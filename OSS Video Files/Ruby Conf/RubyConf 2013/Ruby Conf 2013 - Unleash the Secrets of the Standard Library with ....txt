Title: Ruby Conf 2013 - Unleash the Secrets of the Standard Library with ...
Publication date: 2020-01-27
Playlist: RubyConf 2013
Description: 
	SimpleDelegator, Forwardable, and more By Jim Gay

With Ruby you have simple tools at your fingertips that make building powerful tools easy. Ruby's standard library comes with some helpful libraries like 'delegate' and 'forwardable' that will help make your code easier to maintain.

We'll dive into how SimpleDelegator is different from method_missing and how Forwardable differs still. Learn the basis of the ideas behind these and combine the features to build your own powerful patterns. See how these compare to libraries like ActiveSupport::Delegation and look at how popular presenter libraries like Draper and DisplayCase work.

Help us caption & translate this video!

http://amara.org/v/FG4p/
Captions: 
	00:00:16,500 --> 00:00:18,500
JIM GAY: Thanks for coming. I'm gonna be talking

00:00:20,500 --> 00:00:23,650
about what we have in the standard library of Ruby,

00:00:23,650 --> 00:00:26,090
and what I found as I was learning Ruby

00:00:26,090 --> 00:00:28,960
is that there was a lot there that I didn't know about,

00:00:28,960 --> 00:00:31,169
and I was doing Ruby professionally for awhile

00:00:31,169 --> 00:00:34,110
before I even discovered some of these things.

00:00:34,110 --> 00:00:38,350
So, when I pitched this proposal for RubyConf, I

00:00:38,350 --> 00:00:40,030
said that I was gonna be talking about this

00:00:40,030 --> 00:00:44,170
stuff for beginners to intermediates, so I'm curious how

00:00:44,170 --> 00:00:49,719
many people here consider themselves beginner/intermediate Ruby developers. A

00:00:49,719 --> 00:00:53,399
decent number. And some liars.

00:00:53,399 --> 00:00:56,769
But, also what I found was there are a

00:00:56,769 --> 00:00:59,379
lot of experienced developers who don't know about these

00:00:59,379 --> 00:01:02,079
libraries, as well, and some of the tricks that

00:01:02,079 --> 00:01:03,850
are inside them. So what I'm gonna be doing

00:01:03,850 --> 00:01:06,670
is walking through, talking about what the libraries do,

00:01:06,670 --> 00:01:09,180
talking about the concepts inside them, showing some of

00:01:09,180 --> 00:01:11,500
the tricks of the code that they do, and

00:01:11,500 --> 00:01:13,100
hopefully - what I want you to be able

00:01:13,100 --> 00:01:16,790
to do is look at them, learn from them,

00:01:16,790 --> 00:01:18,969
try them out. Try building some things on your

00:01:18,969 --> 00:01:21,340
own and not just going to look through RubyGems

00:01:21,340 --> 00:01:25,570
for solving some problem that you might have.

00:01:25,570 --> 00:01:28,430
So I encourage you to, if you like, open

00:01:28,430 --> 00:01:31,390
up your laptops and clone Ruby, or just look

00:01:31,390 --> 00:01:34,939
at it on GitHub and, and, walk through some

00:01:34,939 --> 00:01:35,899
of this stuff with me.

00:01:35,899 --> 00:01:41,710
So I'm Jim Gay. I'm @saturnflyer on Twitter, on

00:01:41,710 --> 00:01:45,859
BitBucket and GitHub and GitTorious, which you should check

00:01:45,859 --> 00:01:47,930
out as well.

00:01:47,930 --> 00:01:50,030
So one of the things that, as I was

00:01:50,030 --> 00:01:54,280
learning programming in general, I would hear about the

00:01:54,280 --> 00:01:58,820
standard library of Ruby versus the standard library of

00:01:58,820 --> 00:02:01,530
another programming language, and I think there's two concepts

00:02:01,530 --> 00:02:04,789
here that, you know, there's the standard things that

00:02:04,789 --> 00:02:07,479
are in an array, for example, and that's your

00:02:07,479 --> 00:02:10,429
standard library - or hash, and all the stuff

00:02:10,429 --> 00:02:11,820
that you can do with those things.

00:02:11,820 --> 00:02:13,670
But then there's also the extras that come along

00:02:13,670 --> 00:02:15,560
with it, and what I'm gonna be talking about

00:02:15,560 --> 00:02:20,489
is the extras, right. I, at a certain point,

00:02:20,489 --> 00:02:23,349
I, I realized, I needed to get to know

00:02:23,349 --> 00:02:25,370
Ruby better so I decided to look at the

00:02:25,370 --> 00:02:28,780
code. And not knowing C, I saw this and

00:02:28,780 --> 00:02:31,730
- ahh! my eyes! What is that?

00:02:31,730 --> 00:02:35,120
Yeah, I look at that, and I had no

00:02:35,120 --> 00:02:38,459
idea what it was. And this is actually the

00:02:38,459 --> 00:02:43,510
marshalling code. But, so I would put it aside

00:02:43,510 --> 00:02:45,400
and decide, well, I have to learn some C

00:02:45,400 --> 00:02:48,840
before I can really get to know Ruby. Or,

00:02:48,840 --> 00:02:53,330
you could, you could, Pat Shaughnessy's Ruby Under a

00:02:53,330 --> 00:02:55,890
Microscope, which is a fantastic resource for learning how

00:02:55,890 --> 00:02:57,019
this stuff works.

00:02:57,019 --> 00:03:01,540
But what I was shocked to find was this.

00:03:01,540 --> 00:03:03,769
You know, I was learning about gems and how

00:03:03,769 --> 00:03:06,159
to properly build gems, and you have your Rails

00:03:06,159 --> 00:03:08,400
apps and they have this lib directory. And I

00:03:08,400 --> 00:03:09,549
looked in the Ruby source and I saw this

00:03:09,549 --> 00:03:12,650
lib folder there, and I couldn't believe it. Like,

00:03:12,650 --> 00:03:14,260
wow, there's a, there's a lib folder. And I

00:03:14,260 --> 00:03:16,450
opened it up and it was just plain old

00:03:16,450 --> 00:03:19,409
Ruby code. There was no C in sight.

00:03:19,409 --> 00:03:21,670
So I want to encourage everyone here to just

00:03:21,670 --> 00:03:24,110
go and look through there. There's all kinds of

00:03:24,110 --> 00:03:29,010
fascinating things in there. Useful things that you don't

00:03:29,010 --> 00:03:32,090
have to go out to RubyGems and, you know,

00:03:32,090 --> 00:03:33,830
rely on Bundler to pull it in and figure

00:03:33,830 --> 00:03:36,010
out dependencies and all that. It might just be,

00:03:36,010 --> 00:03:38,390
the tool that you need might be right there.

00:03:38,390 --> 00:03:40,159
So the first library I want to talk about

00:03:40,159 --> 00:03:46,530
is delegate. And if you're using Rubinius, you have

00:03:46,530 --> 00:03:49,230
to install, what is it, what is the name

00:03:49,230 --> 00:03:50,340
of the gem?

00:03:50,340 --> 00:03:50,980
AUDIENCE: RubySL.

00:03:50,980 --> 00:03:53,739
J.G.: RubySL, that has the standard library and it's

00:03:53,739 --> 00:03:56,980
all gems, right. If you have MRI it's just

00:03:56,980 --> 00:04:00,209
right there in the lib directory. So this is

00:04:00,209 --> 00:04:01,909
all you have to do to get this library

00:04:01,909 --> 00:04:03,519
available. You don't have to add it to your

00:04:03,519 --> 00:04:06,269
gem file and do bundle install and, and all

00:04:06,269 --> 00:04:07,719
that stuff. It's right there.

00:04:07,719 --> 00:04:10,900
So when I think about how code works, I

00:04:10,900 --> 00:04:13,769
try to visualize it. So I'm gonna walk you

00:04:13,769 --> 00:04:16,160
through that a little bit and then we'll get

00:04:16,160 --> 00:04:17,760
into some code.

00:04:17,760 --> 00:04:22,560
I forgot to start my timer. We'll be an

00:04:22,560 --> 00:04:23,680
extra few minutes.

00:04:23,680 --> 00:04:27,530
So let's say we have this user object, right.

00:04:27,530 --> 00:04:29,590
It has some information on it, and we can

00:04:29,590 --> 00:04:33,430
send a message to it. Tell me user, when,

00:04:33,430 --> 00:04:35,650
when were you born? And I get back this

00:04:35,650 --> 00:04:39,530
date object, right.

00:04:39,530 --> 00:04:41,280
But in my program, maybe I don't really want

00:04:41,280 --> 00:04:44,000
all of that stuff. I just want to display

00:04:44,000 --> 00:04:45,750
the year. I ask you when you're born. You

00:04:45,750 --> 00:04:48,440
say, oh well, this is, this is it. And

00:04:48,440 --> 00:04:50,680
I don't necessarily want to go and change that

00:04:50,680 --> 00:04:54,610
born method that handles the message that I sent

00:04:54,610 --> 00:04:57,580
to it. I'm only using this in a particular

00:04:57,580 --> 00:04:59,590
place. Maybe in a presenter or some sort of

00:04:59,590 --> 00:05:02,620
display area. So this is what you can do

00:05:02,620 --> 00:05:03,750
with the delegate library.

00:05:03,750 --> 00:05:06,500
You can wrap it in this decorator and it's

00:05:06,500 --> 00:05:08,669
the decorator's responsibility to handle this message. So you

00:05:08,669 --> 00:05:12,680
send the same message and this object is acting

00:05:12,680 --> 00:05:14,590
as if it is the user, right. You're just

00:05:14,590 --> 00:05:16,680
kind of pretending, for now you just be the

00:05:16,680 --> 00:05:20,389
user but you'll have some extra behavior. So, internally

00:05:20,389 --> 00:05:22,940
what it does is it says, user, when were

00:05:22,940 --> 00:05:25,810
you born? I'm gonna translate that and give me

00:05:25,810 --> 00:05:28,410
the year and that's actually what we want to

00:05:28,410 --> 00:05:29,150
say, right.

00:05:29,150 --> 00:05:32,530
So delegate library gives you these three things. Delegator,

00:05:32,530 --> 00:05:36,319
SimpleDelegator, and DelegateClass(). I'll walk through them. And I

00:05:36,319 --> 00:05:38,960
thought it would be interesting to try to implement

00:05:38,960 --> 00:05:42,810
this stuff, the bare bones of, of these libraries,

00:05:42,810 --> 00:05:45,850
into something that fit into a Tweet. So this

00:05:45,850 --> 00:05:49,210
is the smallest implementation I could do for the

00:05:49,210 --> 00:05:52,460
delegator library.

00:05:52,460 --> 00:05:55,250
So if you want to Tweet that real quick.

00:05:55,250 --> 00:05:56,770
That's enough time.

00:05:56,770 --> 00:05:58,740
So I'll expand it for you. This is, this

00:05:58,740 --> 00:06:01,780
is what it's doing. Let's say we called it

00:06:01,780 --> 00:06:04,539
Delegator. You initialize with an object and you store

00:06:04,539 --> 00:06:08,810
a reference to it. And then you use method_missing.

00:06:08,810 --> 00:06:11,030
Any messages it doesn't understand it will send to

00:06:11,030 --> 00:06:14,150
that object.

00:06:14,150 --> 00:06:17,050
So if you're not familiar with method_missing, it is

00:06:17,050 --> 00:06:19,120
so awesome when you learn it and then you

00:06:19,120 --> 00:06:22,289
start using it and realize what a mess you've

00:06:22,289 --> 00:06:25,210
made. But it's still good to know. And this

00:06:25,210 --> 00:06:28,990
is how delegate library works.

00:06:28,990 --> 00:06:30,560
When you send a message to this delegator, it's

00:06:30,560 --> 00:06:32,810
gonna initialize this Delegator class. You send a message

00:06:32,810 --> 00:06:36,280
to it. If it doesn't have a method defined

00:06:36,280 --> 00:06:39,150
that responds, it will say, OK, well I, none

00:06:39,150 --> 00:06:43,330
of my ancestors have a method with born or

00:06:43,330 --> 00:06:45,810
whatever it is. So I'm just go to this

00:06:45,810 --> 00:06:48,240
method_missing hook. And so you can define how you

00:06:48,240 --> 00:06:50,039
want to handle this.

00:06:50,039 --> 00:06:51,419
And what this does is say, all right, I've

00:06:51,419 --> 00:06:53,849
got a reference to a separate object, and I'm

00:06:53,849 --> 00:06:55,940
expecting that object to know what to do with

00:06:55,940 --> 00:06:58,169
this. So I'm just gonna take the name of

00:06:58,169 --> 00:07:00,389
the method that came in, any arguments in the

00:07:00,389 --> 00:07:03,270
block, and just pass it along that way. Whatever

00:07:03,270 --> 00:07:03,990
happens, happens.

00:07:03,990 --> 00:07:09,039
So that's my simple, dumb implementation of this, right.

00:07:09,039 --> 00:07:12,550
So let's just take a look at the user

00:07:12,550 --> 00:07:16,729
that we initialize. This is actually in the documentation.

00:07:16,729 --> 00:07:18,720
I changed it a little bit, but if you

00:07:18,720 --> 00:07:20,639
go and look at the delegate library, this is

00:07:20,639 --> 00:07:23,580
the sample that's in there.

00:07:23,580 --> 00:07:26,500
So I want to know when the user was

00:07:26,500 --> 00:07:30,870
born. And I could add another method to the

00:07:30,870 --> 00:07:32,990
class and say, well, give me your birth year.

00:07:32,990 --> 00:07:34,830
But I don't want to pollute my, you know,

00:07:34,830 --> 00:07:36,710
representation of the user, of what it is with

00:07:36,710 --> 00:07:42,470
extra stuff just for our particular case.

00:07:42,470 --> 00:07:43,979
So what I can do is that, instead I

00:07:43,979 --> 00:07:45,960
can make this user decorator. So I can use

00:07:45,960 --> 00:07:48,340
this delegator class that we created before, and say,

00:07:48,340 --> 00:07:51,090
all right, I'm gonna initialize and I'm gonna have

00:07:51,090 --> 00:07:54,030
reference to that user, and when I call born,

00:07:54,030 --> 00:07:56,300
it's just gonna call super, which will go all

00:07:56,300 --> 00:08:00,310
the way through, hit method_missing, ask the user for

00:08:00,310 --> 00:08:06,819
born, and then call year on that, right.

00:08:06,819 --> 00:08:09,000
So what we end up with this. Same exact

00:08:09,000 --> 00:08:13,680
thing, decorated_user.born is the same as user.born.year. And this,

00:08:13,680 --> 00:08:18,289
this allows you to have this decorated user take

00:08:18,289 --> 00:08:20,220
the place of the user. And you just give

00:08:20,220 --> 00:08:22,240
it a little extra behavior for this particular case

00:08:22,240 --> 00:08:27,849
and just swap it in there.

00:08:27,849 --> 00:08:32,750
So the problem is that in the implementation that

00:08:32,750 --> 00:08:37,099
we have, decorated_user is not the same as the

00:08:37,099 --> 00:08:42,110
user. They're different objects. But we want them, we

00:08:42,110 --> 00:08:44,820
want this decorated_user to just sit in place and

00:08:44,820 --> 00:08:46,410
act like it is the user that we care

00:08:46,410 --> 00:08:49,920
about. So we can do this. We can just

00:08:49,920 --> 00:08:53,040
define this double equals method, right.

00:08:53,040 --> 00:08:54,920
So just say, any time I compare you to

00:08:54,920 --> 00:08:57,780
another object, if that other object is the same

00:08:57,780 --> 00:08:59,160
as the one that we have stored a reference

00:08:59,160 --> 00:09:03,040
to, then return true. Otherwise it'll be false. The

00:09:03,040 --> 00:09:05,630
problem is, what if we're looping through and we're

00:09:05,630 --> 00:09:08,480
comparing something we've already got wrapped? What will this

00:09:08,480 --> 00:09:09,190
be?

00:09:09,190 --> 00:09:10,600
False, right.

00:09:10,600 --> 00:09:15,610
All right. So that's fine. We can fix that.

00:09:15,610 --> 00:09:17,250
Not something I would have thought of initially. I

00:09:17,250 --> 00:09:20,250
probably would have written some code, started using it,

00:09:20,250 --> 00:09:23,670
ran into the problem and realized, oh, I've already

00:09:23,670 --> 00:09:25,130
wrapped this thing.

00:09:25,130 --> 00:09:28,280
So we can just return true if the other

00:09:28,280 --> 00:09:31,090
object we're passing in is me. Like, if it's

00:09:31,090 --> 00:09:35,010
the same object, just return true. And then it

00:09:35,010 --> 00:09:38,080
works. But this is already solved. All you have

00:09:38,080 --> 00:09:42,200
to do is require delegate and inherit from SimpleDelegator.

00:09:42,200 --> 00:09:44,250
And there's a whole lot of methods in there

00:09:44,250 --> 00:09:46,520
I'll show in a bit that are already defined

00:09:46,520 --> 00:09:48,570
like this. The problem has already been solved for

00:09:48,570 --> 00:09:51,390
you, so you don't have to bump into those

00:09:51,390 --> 00:09:54,520
errors, find out where the pain points are. You

00:09:54,520 --> 00:09:58,060
can just use SimpleDelegator.

00:09:58,060 --> 00:10:02,310
So here's the structure with a lot taken out.

00:10:02,310 --> 00:10:07,860
But SimpleDelegator inherits from this Delegator class. And even

00:10:07,860 --> 00:10:09,860
though this is the same name that I used

00:10:09,860 --> 00:10:11,520
earlier, this is the one that we're gonna be

00:10:11,520 --> 00:10:15,420
looking at that is defined inside the delegate library,

00:10:15,420 --> 00:10:16,560
right.

00:10:16,560 --> 00:10:19,940
It inherits rom BasicObject. It has this initialize method,

00:10:19,940 --> 00:10:21,410
which you can see, all it does is it

00:10:21,410 --> 00:10:25,060
calls _setobj and it passes in this object. That's

00:10:25,060 --> 00:10:28,290
defined down here. And you see from this, it

00:10:28,290 --> 00:10:31,940
raises an error, right. So this is designed for

00:10:31,940 --> 00:10:34,510
you to inherit from, and you define your own

00:10:34,510 --> 00:10:35,230
methods.

00:10:35,230 --> 00:10:38,590
Likewise, method_missing - just get the object and send

00:10:38,590 --> 00:10:40,650
it. The same thing we did where we had

00:10:40,650 --> 00:10:44,440
an object reference, but this just had a method.

00:10:44,440 --> 00:10:47,910
But this also raises an error.

00:10:47,910 --> 00:10:52,220
So you wouldn't even initialize a Delegator object. You

00:10:52,220 --> 00:10:54,950
would make your own class, inherit from it, and

00:10:54,950 --> 00:10:57,660
then you'd have to define that method. So that's

00:10:57,660 --> 00:11:03,480
exactly what SimpleDelegator does. It stores this delegate_sd_obj method.

00:11:03,480 --> 00:11:07,040
But one other thing that it does that is

00:11:07,040 --> 00:11:13,210
very helpful is it, when you're setting the objects,

00:11:13,210 --> 00:11:16,100
when you're initializing, it makes sure that you're not

00:11:16,100 --> 00:11:20,330
trying to initialize with yourself or set it to

00:11:20,330 --> 00:11:22,200
yourself. Cause you can call this method at any

00:11:22,200 --> 00:11:24,480
point, if you're wrapping an object and you want

00:11:24,480 --> 00:11:26,570
to swap it out to another object, you don't

00:11:26,570 --> 00:11:29,450
want to accidentally swap in something that's already been

00:11:29,450 --> 00:11:30,600
wrapped.

00:11:30,600 --> 00:11:35,120
So if we were to do our own implementation

00:11:35,120 --> 00:11:37,620
of this, our user decorator, where we just inherit

00:11:37,620 --> 00:11:40,100
from Delegator, you might make the mistake of doing

00:11:40,100 --> 00:11:41,240
this: saying, oh well I just need to set

00:11:41,240 --> 00:11:44,040
it to something and then get it.

00:11:44,040 --> 00:11:47,180
But the problem is, this is what you'll run

00:11:47,180 --> 00:11:50,550
into. So there's a lot to learn from just

00:11:50,550 --> 00:11:52,610
reading the code and seeing how this problem has

00:11:52,610 --> 00:11:55,880
been solved for you, not going down the road

00:11:55,880 --> 00:11:57,280
of trying to implement your own, just say I

00:11:57,280 --> 00:12:00,240
know enough method_missing, I'm just gonna use that in

00:12:00,240 --> 00:12:03,220
a class that I create. Over here the problem

00:12:03,220 --> 00:12:05,440
is solved.

00:12:05,440 --> 00:12:09,970
So I've done this. I've made my own decorators

00:12:09,970 --> 00:12:14,750
or presenters. And the one thing that I don't

00:12:14,750 --> 00:12:19,430
like is these method names. They're really ugly. It's

00:12:19,430 --> 00:12:21,880
great that there's a standard interface across all of

00:12:21,880 --> 00:12:26,080
them, so you can use polymorphism in your application

00:12:26,080 --> 00:12:28,740
and swap different decorators in and out, and if

00:12:28,740 --> 00:12:31,170
you're gonna call mess- you know, call _getobj_ or

00:12:31,170 --> 00:12:33,420
_setobj_, it's always the same. But when I'm writing

00:12:33,420 --> 00:12:35,570
my code inside my methods, I want it to

00:12:35,570 --> 00:12:37,940
look like this, right. I want it to map

00:12:37,940 --> 00:12:39,200
to the domain that I'm using.

00:12:39,200 --> 00:12:40,850
If I'm working with the user, I just want

00:12:40,850 --> 00:12:45,440
user or user equals or profile or profile equals.

00:12:45,440 --> 00:12:49,130
So one way of doing that is creating your

00:12:49,130 --> 00:12:53,300
own decorator class, inheriting from that and then just

00:12:53,300 --> 00:12:59,790
aliasing these methods. That gets kind of cumbersome. It's

00:12:59,790 --> 00:13:03,230
repeating code over and over again. And when I

00:13:03,230 --> 00:13:05,450
know that I'm doing this in my application, anybody

00:13:05,450 --> 00:13:07,200
in my team is doing this, we see this

00:13:07,200 --> 00:13:09,130
type of thing and there's a pattern happening here.

00:13:09,130 --> 00:13:10,790
So let's try to take this out. We know

00:13:10,790 --> 00:13:13,870
this is how this works. And let's just let

00:13:13,870 --> 00:13:15,500
the computer do the work for us, right. That's

00:13:15,500 --> 00:13:20,300
what it's good for.

00:13:20,300 --> 00:13:24,160
So you can learn about how Ruby class inheritance

00:13:24,160 --> 00:13:26,550
works just by reading this library as well. There's

00:13:26,550 --> 00:13:29,490
an inheritant hook that, when you inherit from a

00:13:29,490 --> 00:13:34,180
class, you can do things with the class that,

00:13:34,180 --> 00:13:36,460
that's becoming a subclass.

00:13:36,460 --> 00:13:38,170
So you have this self dot inherited method that

00:13:38,170 --> 00:13:41,300
we're defining on our decorator class. And it has

00:13:41,300 --> 00:13:44,500
a reference to class, and what we can do

00:13:44,500 --> 00:13:46,630
here, what I'm doing is I'm saying, split up

00:13:46,630 --> 00:13:48,760
the name, so if there's any name spacing, I

00:13:48,760 --> 00:13:51,680
want to get rid of that. You know, myApp

00:13:51,680 --> 00:13:54,450
double colon user_decorator. And I want to take user_decorator

00:13:54,450 --> 00:13:56,700
off so all I have is user.

00:13:56,700 --> 00:14:00,920
And then what this code does, not necessary that

00:14:00,920 --> 00:14:02,940
you know exactly everything, but what it's doing is

00:14:02,940 --> 00:14:06,130
it's saying, if you've got user, just downcase it,

00:14:06,130 --> 00:14:08,620
or if you have ShoppingCart, just downcase it and

00:14:08,620 --> 00:14:11,500
underscore it. If you have ActiveSupport in your app,

00:14:11,500 --> 00:14:13,210
if this is a Rails application, it's really easy

00:14:13,210 --> 00:14:16,600
to just send those messages to the string. This

00:14:16,600 --> 00:14:19,010
is how you'd do it if you didn't have

00:14:19,010 --> 00:14:20,490
ActiveSupport.

00:14:20,490 --> 00:14:21,770
And then this is exactly what we did before.

00:14:21,770 --> 00:14:24,270
So we have the class in hand, and we

00:14:24,270 --> 00:14:28,380
can call :alias_method, object_name, :_getobj_. So this is where

00:14:28,380 --> 00:14:35,130
user shows up, and user equals, right.

00:14:35,130 --> 00:14:36,420
So I like doing that, because then I end

00:14:36,420 --> 00:14:40,080
up with stuff. And I still have those _getobj_,

00:14:40,080 --> 00:14:43,920
_setobj_ methods. So the polymorphism in our argument still

00:14:43,920 --> 00:14:45,760
applies. But when I'm writing my code, I want

00:14:45,760 --> 00:14:48,750
to use a word that refers exactly to the

00:14:48,750 --> 00:14:51,410
concept I'm writing.

00:14:51,410 --> 00:14:54,750
So let's take a look at the Delegator class.

00:14:54,750 --> 00:14:57,970
It inherits from BasicObject, and then it does all

00:14:57,970 --> 00:14:59,940
this weird stuff. Remember, the first time I read

00:14:59,940 --> 00:15:01,360
this, I saw this and there were these magical

00:15:01,360 --> 00:15:03,310
methods up there. And I wasn't really sure what

00:15:03,310 --> 00:15:06,310
it was.

00:15:06,310 --> 00:15:12,190
It's dup'ing kernel, evaluating it, undefining it, and then

00:15:12,190 --> 00:15:17,190
including that dupped module. Really strange.

00:15:17,190 --> 00:15:21,560
The reason for this is we want our SimpleDelegator

00:15:21,560 --> 00:15:27,800
objects, which inherit from this, to act sort of

00:15:27,800 --> 00:15:30,660
like objects, sort of like basic objects. If you're

00:15:30,660 --> 00:15:37,630
not familiar, BasicObject has some very, very few methods.

00:15:37,630 --> 00:15:41,060
Fewer than Object does. And the difference here is

00:15:41,060 --> 00:15:45,120
that objects have this kernel module included in them,

00:15:45,120 --> 00:15:47,350
and they also inherit from BasicObject. So what we're

00:15:47,350 --> 00:15:51,360
saying here is Delegator class is saying, I want

00:15:51,360 --> 00:15:54,830
you to be like an object, but I don't

00:15:54,830 --> 00:15:55,650
want these methods.

00:15:55,650 --> 00:15:58,230
So all of these are being pulled off. You're

00:15:58,230 --> 00:16:00,980
saying undefine these from this module that I have

00:16:00,980 --> 00:16:03,410
dupped, and then include it. And the reason for

00:16:03,410 --> 00:16:06,820
that is, we want to_s and inspect and all

00:16:06,820 --> 00:16:09,440
these other things to hit method_missing so it goes

00:16:09,440 --> 00:16:11,100
to our wrapped object.

00:16:11,100 --> 00:16:12,760
So that's what's happening here. The whole reason this

00:16:12,760 --> 00:16:15,770
exists is so that we can pass these through

00:16:15,770 --> 00:16:19,130
to the object that we've got internally. Which is

00:16:19,130 --> 00:16:21,260
great, because when you call user.inspect, you get this,

00:16:21,260 --> 00:16:24,750
and user.to_s you get that, and likewise you get

00:16:24,750 --> 00:16:26,470
the same thing from your decorated_user.

00:16:26,470 --> 00:16:29,390
So it, it really does look and feel like

00:16:29,390 --> 00:16:30,970
the object that you want, it's just got some

00:16:30,970 --> 00:16:34,330
extra behavior. The weird thing about it, though, is

00:16:34,330 --> 00:16:39,950
you run into this case, where it doesn't delegate,

00:16:39,950 --> 00:16:42,290
or it doesn't undefine these and send them out.

00:16:42,290 --> 00:16:43,820
You still know that you have a user or

00:16:43,820 --> 00:16:45,750
you have a user decorator.

00:16:45,750 --> 00:16:47,820
This can become troublesome for you if you use

00:16:47,820 --> 00:16:51,850
something like that, maybe in a Rails application. Because

00:16:51,850 --> 00:16:56,140
if you ever build your own and you find

00:16:56,140 --> 00:16:59,370
that you're using this form_for method, which looks at

00:16:59,370 --> 00:17:01,130
the name of the class and then tries to

00:17:01,130 --> 00:17:03,440
figure out where it's supposed to go, you have

00:17:03,440 --> 00:17:07,660
this odd action, user_decorators slash 1. Which is probably

00:17:07,660 --> 00:17:14,660
fine if you're building an app for costume-makers or

00:17:15,140 --> 00:17:15,810
something like that.

00:17:15,810 --> 00:17:22,470
But we really just want it to go to

00:17:22,470 --> 00:17:24,890
users.

00:17:24,890 --> 00:17:29,780
DisplayCase is a gem that helps solve this problem.

00:17:29,780 --> 00:17:35,920
This came from Avdi Grimm's Objects on Rails. And

00:17:35,920 --> 00:17:40,370
what he does, here, is he uses alias_method and

00:17:40,370 --> 00:17:42,990
what this does internally in Ruby is it actually

00:17:42,990 --> 00:17:45,940
copies this method. So you're saying, giving me a

00:17:45,940 --> 00:17:50,260
method that's under under class and define it exactly

00:17:50,260 --> 00:17:51,500
the same way as class is defined.

00:17:51,500 --> 00:17:53,200
So you have two methods that do exactly the

00:17:53,200 --> 00:17:55,780
same thing. Same procedures, whatever's defined in one is

00:17:55,780 --> 00:17:57,130
now in the other. And then it gives them

00:17:57,130 --> 00:18:00,010
the opportunity to then go and redefine class and

00:18:00,010 --> 00:18:03,220
say don't give me your class, give me the

00:18:03,220 --> 00:18:07,420
wrapped object's class.

00:18:07,420 --> 00:18:11,030
Draper's a little different. Draper is not SimpleDelegator. I

00:18:11,030 --> 00:18:14,320
think they, they have method_missing inside there. And there's

00:18:14,320 --> 00:18:18,200
a lot more code done to figure that out.

00:18:18,200 --> 00:18:21,240
And they actually turn to ActiveModel here by delegating

00:18:21,240 --> 00:18:23,630
model name to the object class, and they get

00:18:23,630 --> 00:18:25,530
their object class from the inferred object.

00:18:25,530 --> 00:18:28,900
So there's a lot going on inside of Draper,

00:18:28,900 --> 00:18:33,500
right. And that's all to solve problems like turn

00:18:33,500 --> 00:18:39,920
user_decorators into users. So understanding this concept will help

00:18:39,920 --> 00:18:42,070
you in developing simple little apps, where you just

00:18:42,070 --> 00:18:45,370
try to just do some method_missing magic to just

00:18:45,370 --> 00:18:47,120
wrap an object, and you run into this type

00:18:47,120 --> 00:18:50,100
of thing.

00:18:50,100 --> 00:18:52,160
That's how those gems do it. So if you're

00:18:52,160 --> 00:18:54,530
gonna build your own, you need to know about

00:18:54,530 --> 00:18:57,260
that thing. Are you going to redefine class or

00:18:57,260 --> 00:18:59,420
are you going to try to figure out what

00:18:59,420 --> 00:19:01,810
ActiveModel's looking for and hook into it similar to

00:19:01,810 --> 00:19:03,270
the way that Draper did?

00:19:03,270 --> 00:19:05,730
So the other thing that blew my mind when

00:19:05,730 --> 00:19:12,730
I was reading delegate library was this thing.

00:19:13,180 --> 00:19:16,840
You can see, it's defining a method and it's

00:19:16,840 --> 00:19:21,850
a capital letter. Who makes, like, aren't constants capitals?

00:19:21,850 --> 00:19:24,470
Isn't that one of the rules of Ruby? Like,

00:19:24,470 --> 00:19:29,500
everything that starts with a capital is a constant?

00:19:29,500 --> 00:19:31,860
Apparently not.

00:19:31,860 --> 00:19:34,140
This comes with it, and in, in fact, in

00:19:34,140 --> 00:19:39,300
the documentation for it, it says, this is the

00:19:39,300 --> 00:19:43,270
main interface for this library. I rarely see this.

00:19:43,270 --> 00:19:47,900
I always see people user SimpleDelegator. I always use

00:19:47,900 --> 00:19:50,450
SimpleDelegator. But according to the documentation, this is what

00:19:50,450 --> 00:19:51,060
you should be using.

00:19:51,060 --> 00:19:53,670
So the way this works is kind of like

00:19:53,670 --> 00:19:57,880
this - that's really how I see it. But

00:19:57,880 --> 00:20:01,390
it's just making a new class, and if you

00:20:01,390 --> 00:20:03,370
have never done this before, you can call new

00:20:03,370 --> 00:20:06,950
on class and pass in some other existing class,

00:20:06,950 --> 00:20:09,470
and that returns a class that then you can

00:20:09,470 --> 00:20:13,760
go and effect. It allows you to dynamically create

00:20:13,760 --> 00:20:14,120
classes.

00:20:14,120 --> 00:20:15,100
So if you want to do something like this

00:20:15,100 --> 00:20:19,380
on the fly, you can do that.

00:20:19,380 --> 00:20:22,190
And I like the fact that it's capitalized, because

00:20:22,190 --> 00:20:23,840
it makes me think about the fact that I'm

00:20:23,840 --> 00:20:28,200
creating constants. And then it returns the class at

00:20:28,200 --> 00:20:30,240
the bottom.

00:20:30,240 --> 00:20:33,250
So this is what, what, you know, our structure

00:20:33,250 --> 00:20:35,660
is. And I want to talk about how the

00:20:35,660 --> 00:20:38,930
ancestry is built. The ancestors are, you know, all

00:20:38,930 --> 00:20:44,170
the classes and modules when you hit method_missing, it's

00:20:44,170 --> 00:20:46,370
gonna go and look through all of these things

00:20:46,370 --> 00:20:48,910
to find a matching method, and then go into

00:20:48,910 --> 00:20:51,450
your - well, when you send a message to

00:20:51,450 --> 00:20:53,000
an object, it'll do that, then it'll go to

00:20:53,000 --> 00:20:54,860
your method_missing.

00:20:54,860 --> 00:21:00,070
This module is that kernel dup. It has no

00:21:00,070 --> 00:21:02,660
name. It's dynamically defined. It wasn't given a constant

00:21:02,660 --> 00:21:05,390
name. And so this can be kind of tricky

00:21:05,390 --> 00:21:08,310
when you're dynamically creating constants. If you don't give

00:21:08,310 --> 00:21:10,890
them names you can run into ancestry like this,

00:21:10,890 --> 00:21:12,970
and you might actually look for the name of

00:21:12,970 --> 00:21:15,730
a class or call name on that class for

00:21:15,730 --> 00:21:17,740
module, and it'll blow up because it doesn't actually

00:21:17,740 --> 00:21:20,860
have one.

00:21:20,860 --> 00:21:22,900
But this is what you could do. Going back

00:21:22,900 --> 00:21:24,820
to our other example, you could make a user

00:21:24,820 --> 00:21:28,410
decorator to just, just uses delegate class and I

00:21:28,410 --> 00:21:31,160
pass in user. So I'm saying this is how

00:21:31,160 --> 00:21:34,000
I'm making an object that's gonna act on behalf

00:21:34,000 --> 00:21:36,850
of the user. But you can see what happens

00:21:36,850 --> 00:21:39,620
to the ancestry here. We have this dynamically defined

00:21:39,620 --> 00:21:42,240
class, and we lose reference for what it actually

00:21:42,240 --> 00:21:47,720
is.

00:21:47,720 --> 00:21:49,970
But I want to do all the awesome metaprogramming

00:21:49,970 --> 00:21:51,780
stuff that I did to alias_method so I can

00:21:51,780 --> 00:21:57,230
use them, so I can actually just assign a

00:21:57,230 --> 00:22:01,750
constant there, call class.new, pass in delegate class and

00:22:01,750 --> 00:22:05,850
an instance of the user and get its class,

00:22:05,850 --> 00:22:07,090
do all the same stuff that I was doing

00:22:07,090 --> 00:22:09,720
before. This is all to alias the methods to

00:22:09,720 --> 00:22:13,070
user, user equal.

00:22:13,070 --> 00:22:14,550
So that would allow me, if I wanted to

00:22:14,550 --> 00:22:16,140
create something on the fly - didn't know what

00:22:16,140 --> 00:22:18,370
kind of class or I wanted to be able

00:22:18,370 --> 00:22:23,490
to add classes to my application and have presenters

00:22:23,490 --> 00:22:26,630
defined for me automatically, I could do this. And

00:22:26,630 --> 00:22:28,860
I'd just get the class from my object and

00:22:28,860 --> 00:22:30,830
pass it along.

00:22:30,830 --> 00:22:31,900
And then, of course, I thought it would be

00:22:31,900 --> 00:22:35,740
awesome to make a really cool gem to do

00:22:35,740 --> 00:22:42,240
it. That doesn't exist. But Decoratificationizer. So you could

00:22:42,240 --> 00:22:44,010
do this. If you wanted to just pass in

00:22:44,010 --> 00:22:46,400
an object rather than a class, you pass in

00:22:46,400 --> 00:22:48,820
an object, do exactly the same thing. You use

00:22:48,820 --> 00:22:52,070
delegate class to define your class, and you've got

00:22:52,070 --> 00:22:53,700
a reference to it here, and you can assign

00:22:53,700 --> 00:22:55,320
that to a constant and do whatever you need

00:22:55,320 --> 00:22:58,200
with it.

00:22:58,200 --> 00:23:02,540
All right. Forwardable.

00:23:02,540 --> 00:23:04,970
I'll talk a bit about how these two are

00:23:04,970 --> 00:23:09,880
different a little later. But this is the way

00:23:09,880 --> 00:23:12,960
I see forwardable working, right. I've got a user

00:23:12,960 --> 00:23:18,090
and the user has an address - and address

00:23:18,090 --> 00:23:20,180
didn't fit in the little hexagon I had so

00:23:20,180 --> 00:23:23,980
I had to shorten it up.

00:23:23,980 --> 00:23:26,900
So if I send a message to address.user, I

00:23:26,900 --> 00:23:31,530
expect to get this address object. And then I

00:23:31,530 --> 00:23:36,650
could send city to address and get Miami. But

00:23:36,650 --> 00:23:38,330
maybe in my application, what I really want to

00:23:38,330 --> 00:23:40,300
do is just ask the user either what city

00:23:40,300 --> 00:23:42,620
are they in or what's their home city. And

00:23:42,620 --> 00:23:45,380
I just want it to return to me Miami.

00:23:45,380 --> 00:23:47,830
I don't want to spread knowledge throughout the system

00:23:47,830 --> 00:23:50,910
that the user has an address, that, whether it's

00:23:50,910 --> 00:23:53,520
current or it's their home address or whatever it

00:23:53,520 --> 00:23:55,760
is. I just want to know that there's an

00:23:55,760 --> 00:23:57,650
address associated with this user and I want to

00:23:57,650 --> 00:24:00,180
know the city that they're currently in.

00:24:00,180 --> 00:24:02,780
So this is how I see it happening. This

00:24:02,780 --> 00:24:05,070
address - this isn't a wrapper, but it's more

00:24:05,070 --> 00:24:07,610
like an internal reference to an object. And I

00:24:07,610 --> 00:24:08,940
don't care from the outside. I just want to

00:24:08,940 --> 00:24:11,460
say give me your city, and internally it will

00:24:11,460 --> 00:24:14,520
say, I'm gonna pass city along to address, and

00:24:14,520 --> 00:24:21,520
then we're gonna return that. Just forwarding it.

00:24:21,690 --> 00:24:24,440
So this is - the forwardable library gives us

00:24:24,440 --> 00:24:30,780
Forwardable and SingleForwardable. And then there's forwardable method, or,

00:24:30,780 --> 00:24:32,880
module that fits in a Tweet. So you can

00:24:32,880 --> 00:24:35,000
Tweet that.

00:24:35,000 --> 00:24:38,320
That's actually pretty faithful to what Forwardable does.

00:24:38,320 --> 00:24:39,840
But I'll expand it a bit and we can

00:24:39,840 --> 00:24:43,210
take a look at it. So the difference, of

00:24:43,210 --> 00:24:45,450
course, with this is it's a module. So you

00:24:45,450 --> 00:24:48,140
can create your own class hierarchy, not have to

00:24:48,140 --> 00:24:50,870
inherit from this. You just kind of add it

00:24:50,870 --> 00:24:53,030
wherever you need it.

00:24:53,030 --> 00:24:55,030
And what it does is it would define a

00:24:55,030 --> 00:24:58,370
method on a class. You extend the class with

00:24:58,370 --> 00:25:01,950
forward - define this method, and you can say,

00:25:01,950 --> 00:25:03,530
this is the reference that I want it to

00:25:03,530 --> 00:25:05,140
go to. So in this case it might be

00:25:05,140 --> 00:25:05,800
address, right.

00:25:05,800 --> 00:25:08,130
And then here's a method name. And one of

00:25:08,130 --> 00:25:10,059
the really cool tricks that I've found in reading

00:25:10,059 --> 00:25:14,070
this library was I can give it three arguments,

00:25:14,070 --> 00:25:16,030
and that third argument, if I don't give it

00:25:16,030 --> 00:25:18,120
one, if I only give it two, it's just

00:25:18,120 --> 00:25:19,950
gonna say, well your third argument is your second

00:25:19,950 --> 00:25:20,370
argument

00:25:20,370 --> 00:25:23,280
So it actually evaluates that, I can reference the

00:25:23,280 --> 00:25:26,460
third one if I only give it two, it's

00:25:26,460 --> 00:25:28,090
gonna use the same exact name. So it just

00:25:28,090 --> 00:25:30,500
assigns it if, if you didn't give it a

00:25:30,500 --> 00:25:33,750
third one. That's really useful.

00:25:33,750 --> 00:25:36,110
And then what it does is it evaluates the

00:25:36,110 --> 00:25:40,650
code below in the context of the current class.

00:25:40,650 --> 00:25:42,380
So if you've extended the forward class and you're

00:25:42,380 --> 00:25:45,340
gonna forward to address, it'll say all right, I'm

00:25:45,340 --> 00:25:48,270
going to define a method here, whatever alternative is,

00:25:48,270 --> 00:25:53,530
so if it's city, if I pass in city,

00:25:53,530 --> 00:25:56,440
it's gonna define that. Whatever args there are, and

00:25:56,440 --> 00:25:58,730
then it's going to take my reference, my address,

00:25:58,730 --> 00:26:02,200
and say send it city, pass along everything that

00:26:02,200 --> 00:26:07,440
comes with it.

00:26:07,440 --> 00:26:09,220
So let's say we have this address right, and

00:26:09,220 --> 00:26:12,140
a person, a person has a name and an

00:26:12,140 --> 00:26:13,870
address. This is just some structure to get you

00:26:13,870 --> 00:26:17,130
to understand how this might work. Like, maybe you

00:26:17,130 --> 00:26:19,400
have this in a database, but this is good

00:26:19,400 --> 00:26:20,550
enough.

00:26:20,550 --> 00:26:26,030
So I've set home to be Main Street, Miami,

00:26:26,030 --> 00:26:29,320
Florida, whatever it is. And then I assign home

00:26:29,320 --> 00:26:33,300
as the address for the user.

00:26:33,300 --> 00:26:35,820
So in my application, if I want to ask

00:26:35,820 --> 00:26:39,580
it what city, I could say, well, get the

00:26:39,580 --> 00:26:42,630
user's address and then ask that address for its

00:26:42,630 --> 00:26:45,980
city, right. But that means I'm gonna be working

00:26:45,980 --> 00:26:48,630
with multiple objects, and if you do that, then

00:26:48,630 --> 00:26:51,320
the responsibilities of your code kind of seep into

00:26:51,320 --> 00:26:53,420
the relationships that exist in your objects. And you

00:26:53,420 --> 00:26:56,250
should try to avoid that, because if I only

00:26:56,250 --> 00:26:59,980
rely on the, the user to know about where

00:26:59,980 --> 00:27:01,690
it is, then I can just ask the user,

00:27:01,690 --> 00:27:05,410
or tell the user to do something.

00:27:05,410 --> 00:27:07,370
So this is essentially what would, what was happening

00:27:07,370 --> 00:27:11,870
with forward. If I extend it, I can do

00:27:11,870 --> 00:27:14,660
this. I can just say forward city to address.

00:27:14,660 --> 00:27:17,350
It's the same exact thing. It didn't- it dynamically

00:27:17,350 --> 00:27:19,840
defines that method, so at load time when I

00:27:19,840 --> 00:27:21,770
boot the application up, it's going to go through

00:27:21,770 --> 00:27:25,580
this class, define those methods. So this is different

00:27:25,580 --> 00:27:28,540
from method_missing. It doesn't, it doesn't go through looking

00:27:28,540 --> 00:27:31,370
through the ancestry to findthe method. It's right here

00:27:31,370 --> 00:27:34,809
on this class. So it's gonna be much faster.

00:27:34,809 --> 00:27:36,720
And then I can just have the user tell

00:27:36,720 --> 00:27:40,020
me what city is it. And we'll say Miami,

00:27:40,020 --> 00:27:40,450
right.

00:27:40,450 --> 00:27:44,900
Now the other thing that I can do, is

00:27:44,900 --> 00:27:48,070
there, here's the alternative. Before, when I didn't give

00:27:48,070 --> 00:27:49,610
it an alternative, it just said alright I'm going

00:27:49,610 --> 00:27:51,500
to assign it to the one that you gave

00:27:51,500 --> 00:27:52,980
me in second argument. But here I can say

00:27:52,980 --> 00:27:54,340
I, I want this to be home city. So

00:27:54,340 --> 00:27:56,710
this would be where you live or whatever the

00:27:56,710 --> 00:27:59,190
concept of home city is in the application.

00:27:59,190 --> 00:28:00,850
But wht happens here is, if I call city

00:28:00,850 --> 00:28:03,020
on it, no it's a NoMethodError. It doesn't define

00:28:03,020 --> 00:28:06,570
that. it only took the third argument.

00:28:06,570 --> 00:28:10,330
But it allows me to do this. I can

00:28:10,330 --> 00:28:14,420
very easily have this understanding of a relationship where

00:28:14,420 --> 00:28:16,630
a person has an address and I can just

00:28:16,630 --> 00:28:19,850
say anytime these methods are called on the end,

00:28:19,850 --> 00:28:23,490
just send these other methods to that object.

00:28:23,490 --> 00:28:30,490
But here's how it works in forwardable. When I

00:28:31,090 --> 00:28:32,950
first saw this, I thought this was really weird

00:28:32,950 --> 00:28:38,400
syntax, and unRuby-like. This def_delegator thing.

00:28:38,400 --> 00:28:39,850
But it's essentially the same thing that we had

00:28:39,850 --> 00:28:44,940
in our forward module.

00:28:44,940 --> 00:28:48,970
It takes three arguments, first on is the object,

00:28:48,970 --> 00:28:51,390
second one is the message that you're gonna pass

00:28:51,390 --> 00:28:53,270
to that object, and the third one is the

00:28:53,270 --> 00:28:58,679
message that you're going to receive to send along.

00:28:58,679 --> 00:29:01,850
So I want to talk a bit about how

00:29:01,850 --> 00:29:04,410
you can clean this up. If, if I'm not

00:29:04,410 --> 00:29:05,990
going to do the home city thing and I

00:29:05,990 --> 00:29:10,320
just want to pass along city number, postal code.

00:29:10,320 --> 00:29:15,170
You can do the plural version, right. def_delegators, the

00:29:15,170 --> 00:29:17,500
first one is, is the object you're gonna send

00:29:17,500 --> 00:29:22,400
to, and then any number of method names afterwards.

00:29:22,400 --> 00:29:26,480
And then this really weird syntax, that I was

00:29:26,480 --> 00:29:31,059
surprised worked - I don't know why - but

00:29:31,059 --> 00:29:32,860
you can use pretty much anything as a key

00:29:32,860 --> 00:29:36,679
in a hash. So this is just a hash

00:29:36,679 --> 00:29:38,450
argument, where I can say, I'm gonna delegate all

00:29:38,450 --> 00:29:40,130
of these things to that.

00:29:40,130 --> 00:29:42,420
And I prefer to write it this way and

00:29:42,420 --> 00:29:43,780
I prefer to read it this way, cause this

00:29:43,780 --> 00:29:45,660
is how I think about it. Any of these

00:29:45,660 --> 00:29:48,770
arguments are just gonna go over to that thing,

00:29:48,770 --> 00:29:50,730
right

00:29:50,730 --> 00:29:54,470
But when it defines the method it defines, you

00:29:54,470 --> 00:29:57,090
know, it evaluates it in a string, and it

00:29:57,090 --> 00:29:58,559
will turn this into a string so you can

00:29:58,559 --> 00:30:00,590
actually use instance variables, so you don't actually have

00:30:00,590 --> 00:30:03,620
to have a method. You can have an internal

00:30:03,620 --> 00:30:07,179
reference to another object. It can be whatever you

00:30:07,179 --> 00:30:09,280
want. And you just put that reference there and

00:30:09,280 --> 00:30:11,650
that'll work as well. So it defines a method,

00:30:11,650 --> 00:30:15,300
it'll look for that instance variable.

00:30:15,300 --> 00:30:20,100
ActiveSupport, from Rails, has its own way of doing

00:30:20,100 --> 00:30:25,080
this, which is nice in that it has this

00:30:25,080 --> 00:30:29,960
allow_nil flag which forwardable doesn't have. But what happens

00:30:29,960 --> 00:30:34,070
is, if address is nil, you can just say,

00:30:34,070 --> 00:30:38,750
give me the postal code and if the address

00:30:38,750 --> 00:30:40,490
is nil, just say nil. It won't throw an

00:30:40,490 --> 00:30:43,010
error. It won't say there's, there's some problem where

00:30:43,010 --> 00:30:44,990
you called nil on, or you called a method

00:30:44,990 --> 00:30:45,710
on nilclass.

00:30:45,710 --> 00:30:48,350
But the other thing it does is it allows

00:30:48,350 --> 00:30:53,760
you to say prefix true. and it will automatically

00:30:53,760 --> 00:30:55,370
figure out what that is and define the method

00:30:55,370 --> 00:30:59,990
as address_city. So it helps you create the interface

00:30:59,990 --> 00:31:06,200
that you want for this person class without revealing

00:31:06,200 --> 00:31:09,250
that there actually is an address object and that

00:31:09,250 --> 00:31:10,160
object has other things.

00:31:10,160 --> 00:31:12,730
So you can build a library for something and

00:31:12,730 --> 00:31:16,580
adhere to this interface that you design and change

00:31:16,580 --> 00:31:18,340
the implementation later.

00:31:18,340 --> 00:31:21,880
The other thing you can do is define your

00:31:21,880 --> 00:31:28,880
own prefix. So ActiveSupport has this. Forwardable doesn't. So

00:31:28,890 --> 00:31:32,220
there's really nothing preventing you from writing your own

00:31:32,220 --> 00:31:34,230
methods that do this. All you have to do

00:31:34,230 --> 00:31:36,250
is say, well I'm gonna pass in an options

00:31:36,250 --> 00:31:38,750
hash, and I can do my own allow nil

00:31:38,750 --> 00:31:41,620
or allow blank or prefix, whatever you want to

00:31:41,620 --> 00:31:44,080
do, and you can do the same exact stuff,

00:31:44,080 --> 00:31:47,330
with the same code that's in forwardable. you can

00:31:47,330 --> 00:31:52,049
create your own.

00:31:52,049 --> 00:31:54,450
I haven't used this much, but SingleForwardable is actually

00:31:54,450 --> 00:31:57,980
really nice. I only discovered it recently. So I

00:31:57,980 --> 00:31:59,450
don't know if any of you have code like

00:31:59,450 --> 00:32:02,330
this. Something goes wrong, you capture the error, you

00:32:02,330 --> 00:32:05,480
send it off to some external system to keep

00:32:05,480 --> 00:32:08,040
track of it.

00:32:08,040 --> 00:32:09,309
I found a good thing to do in my

00:32:09,309 --> 00:32:13,950
code is to not reference that third party directly.

00:32:13,950 --> 00:32:16,970
I want to build a facade between me and

00:32:16,970 --> 00:32:22,929
it. Because maybe they'll go out of business. Maybe

00:32:22,929 --> 00:32:25,500
we'll decide that we need features from some other

00:32:25,500 --> 00:32:30,520
library. For example, let's say I want to move

00:32:30,520 --> 00:32:34,920
to app_signal. I want better ties in with ActiveSupport

00:32:34,920 --> 00:32:37,690
notifications or something like that.

00:32:37,690 --> 00:32:43,610
So I can start with my delegator sending stuff

00:32:43,610 --> 00:32:45,929
in this notify method to errorbreak, right. But this

00:32:45,929 --> 00:32:47,520
is the contract that I want to have, right.

00:32:47,520 --> 00:32:48,600
I want to say save for later. I want

00:32:48,600 --> 00:32:49,860
to look at this later.

00:32:49,860 --> 00:32:52,049
And so this is what I would use in

00:32:52,049 --> 00:32:54,450
my application. I'm gonna say, this is how I'm

00:32:54,450 --> 00:32:56,380
gonna handle it. I don't want to reference this

00:32:56,380 --> 00:32:59,520
third party directly. And then later I can change

00:32:59,520 --> 00:33:02,820
it and say, well, they used notify and they

00:33:02,820 --> 00:33:05,850
use send exception. That's OK, I can still use

00:33:05,850 --> 00:33:06,620
save for later.

00:33:06,620 --> 00:33:08,220
So I just designed my app so that I

00:33:08,220 --> 00:33:12,260
can swap out the third party.

00:33:12,260 --> 00:33:17,230
So the difference between these is that at runtime,

00:33:17,230 --> 00:33:19,940
you can wrap an object in SimpleDelegator. you can

00:33:19,940 --> 00:33:23,559
add behavior to it. You can have this object,

00:33:23,559 --> 00:33:26,929
your wrapper, act like it is the other object

00:33:26,929 --> 00:33:30,950
that you care about. And forwardable happens at boot

00:33:30,950 --> 00:33:33,940
time, because it's dynamically defining methods. So you're not

00:33:33,940 --> 00:33:37,700
gonna be changing things there. That's, so, I, I

00:33:37,700 --> 00:33:39,809
look at this in terms of, forwardable is great

00:33:39,809 --> 00:33:42,240
for when I know the relationships ahead of time.

00:33:42,240 --> 00:33:43,990
When I know what methods I need to forward

00:33:43,990 --> 00:33:45,250
ahead of time.

00:33:45,250 --> 00:33:48,570
SimpleDelegator is great when I either don't care what

00:33:48,570 --> 00:33:51,080
methods are gonna come in, because I'm just swapping

00:33:51,080 --> 00:33:53,490
in another object and I want method_missing to pass

00:33:53,490 --> 00:33:56,990
it along, or I don't know. It allows me

00:33:56,990 --> 00:34:00,110
to build, for example, an interface where, if we're

00:34:00,110 --> 00:34:04,820
going to expose new information to the user, I

00:34:04,820 --> 00:34:08,409
can just swap this in and if there's nothing

00:34:08,409 --> 00:34:12,240
defined to override behavior, it will just pass it

00:34:12,240 --> 00:34:13,299
along.

00:34:13,299 --> 00:34:19,730
So there's a lot of similar projects out there

00:34:19,730 --> 00:34:22,109
that I encourage you to go check out. You

00:34:22,109 --> 00:34:25,379
can write your own stuff. You can use these

00:34:25,379 --> 00:34:28,919
libraries. You can explore them and figure out the

00:34:28,919 --> 00:34:31,190
concepts and the way they use them. I wrote

00:34:31,190 --> 00:34:35,330
one called casting. Nathan wrote one called rep that

00:34:35,330 --> 00:34:38,609
uses a lot of forwardable, and doesn't use SimpleDelegator

00:34:38,609 --> 00:34:39,010
stuff.

00:34:39,010 --> 00:34:46,010
here are other examples of SimpleDelegator style approaches. Definitely

00:34:47,490 --> 00:34:51,359
check those out. I send out tips on a

00:34:51,359 --> 00:34:54,359
weekly basis from my newsletter. You can sign up

00:34:54,359 --> 00:34:56,649
there. And I'm selling a book called Clean Ruby,

00:34:56,649 --> 00:34:58,050
which talks about a lot of this stuff and

00:34:58,050 --> 00:35:00,050
how it applies to your application architecture. You can

00:35:00,050 --> 00:35:02,150
get twenty percent off on the book.

00:35:02,150 --> 00:35:04,940

YouTube URL: https://www.youtube.com/watch?v=3XdVLv5nqvk


