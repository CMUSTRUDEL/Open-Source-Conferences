Title: Ruby Conf 2013 - Mangling Ruby with TracePoint by Mark Bates
Publication date: 2020-01-27
Playlist: RubyConf 2013
Description: 
	Introduced in Ruby 2.0, TracePoint is meant to help developers better instrument their code for debugging and performance reasons, but there's more to TracePoint than that!

In this talk we'll learn about TracePoint while building several example projects. Once we know the basics we'll use TracePoint to do things to Ruby that we couldn't have done otherwise.

By the end of this talk you'll be able to frighten and amaze your friends when you show them things like true abstract classes and interfaces in Ruby, just like Java! Yikes!

Help us caption & translate this video!

http://amara.org/v/FG5B/
Captions: 
	00:00:16,000 --> 00:00:18,500
MARK BATES: Good. I'm, anyway, I'm Mark Bates.

00:00:18,519 --> 00:00:20,650
In case you couldn't tell by the sign on the wall.

00:00:20,650 --> 00:00:23,490
You probably all are a bit surprised that I actually am Mark Bates.

00:00:23,490 --> 00:00:26,689
You all thought I was this man, by my awesome stache

00:00:26,689 --> 00:00:29,800
that I've been growing. See? You're all envious,

00:00:29,800 --> 00:00:32,410
I know. I've got to pick up a little mustache wax,

00:00:32,410 --> 00:00:34,300
it's getting a bit out of control.

00:00:34,300 --> 00:00:35,540
Actually, I haven't shaved since I got here, so

00:00:35,540 --> 00:00:37,190
I look a little bit more like, like this

00:00:37,190 --> 00:00:40,270
man. At least, I definitely looked like him last

00:00:40,270 --> 00:00:41,740
night. That's hysterical.

00:00:41,740 --> 00:00:45,420
So, real quick, like why, why am I growing

00:00:45,420 --> 00:00:47,690
a stache, this killer stache that you see before

00:00:47,690 --> 00:00:50,920
you? It's for Movember. I know PJ and Katie

00:00:50,920 --> 00:00:54,800
talked about Movember yesterday in their keynote. So if

00:00:54,800 --> 00:00:56,190
you're not familiar with Movember, it's, you grow mustaches

00:00:56,190 --> 00:00:59,440
to raise awareness and money for men's health issues,

00:00:59,440 --> 00:01:02,830
like testicular cancer and prostate cancer, both of which

00:01:02,830 --> 00:01:04,899
have effected my family greatly.

00:01:04,899 --> 00:01:07,240
So if you want to, I highly encourage you

00:01:07,240 --> 00:01:09,259
to donate to my Movember campaign at mo dot

00:01:09,259 --> 00:01:13,289
markbates dot com. In a related note, I am

00:01:13,289 --> 00:01:15,969
the voice behind a screencast site called metacast dot

00:01:15,969 --> 00:01:18,859
tv. We do weekly screencasts series on all sorts

00:01:18,859 --> 00:01:20,909
of different stuff, like Go and Ember and Angular

00:01:20,909 --> 00:01:23,640
and Ruby and Reddis and PosGres.

00:01:23,640 --> 00:01:26,130
And this month, if you sign up I'm donating

00:01:26,130 --> 00:01:29,389
a dollar to Movember as well. And to make

00:01:29,389 --> 00:01:31,549
it even better, use RubyConf13 and you get the

00:01:31,549 --> 00:01:34,149
month for free. So it's kind of a win-win

00:01:34,149 --> 00:01:36,729
for everybody except for me, who has to pay

00:01:36,729 --> 00:01:39,259
the dollar. But it works out well. It's good.

00:01:39,259 --> 00:01:42,729
OK, so we're here to talk about mangling TracePoint.

00:01:42,729 --> 00:01:45,600
At least that's what it says in your folders,

00:01:45,600 --> 00:01:48,990
anyway. So what is TracePoint? TracePoint came out in

00:01:48,990 --> 00:01:53,639
Ruby 2, and it kind of superseded SetTraceFunc if

00:01:53,639 --> 00:01:56,280
anybody's ever used SetTraceFunc before.

00:01:56,280 --> 00:02:00,049
And the whole purpose of TracePoint is to allow

00:02:00,049 --> 00:02:03,569
us to instrument our applications, right. Gives us all

00:02:03,569 --> 00:02:06,429
these nice little hooks into Ruby life cycle events

00:02:06,429 --> 00:02:08,020
that we can use to figure out what is

00:02:08,020 --> 00:02:11,009
happening in our application, what things we're doing, what

00:02:11,009 --> 00:02:13,629
it's doing. Some really fun stuff like that.

00:02:13,629 --> 00:02:16,110
And we're gonna use that here today, we're gonna

00:02:16,110 --> 00:02:18,599
do a couple different demos. And one, the first

00:02:18,599 --> 00:02:21,980
demo we're gonna build is actually in instrumentation for

00:02:21,980 --> 00:02:23,970
an application. Let's do a quick look at what

00:02:23,970 --> 00:02:26,760
kind of TracePoint looks like really quickly. This is

00:02:26,760 --> 00:02:29,170
from the documentation. I believe this was written by

00:02:29,170 --> 00:02:31,709
Zach Scott, who spoke the other day and who's

00:02:31,709 --> 00:02:33,290
probably not here because he never attends any of

00:02:33,290 --> 00:02:33,700
my talks.

00:02:33,700 --> 00:02:36,579
The bastard. Probably at the bar. If you're looking

00:02:36,579 --> 00:02:38,500
for Zach he's at the bar.

00:02:38,500 --> 00:02:40,370
Anyway, so this is what some TracePoint looks like.

00:02:40,370 --> 00:02:42,540
We're gonna listen to the :raise event, so every

00:02:42,540 --> 00:02:45,610
time that a :raise, an exception gets raised in

00:02:45,610 --> 00:02:47,959
our application, this block of code up here is

00:02:47,959 --> 00:02:50,390
gonna get called. And this example, all it's gonna

00:02:50,390 --> 00:02:52,349
do, it's gonna print out the line number, the

00:02:52,349 --> 00:02:55,579
event, the exception that gets raised. We enable the

00:02:55,579 --> 00:02:58,430
TracePoint, we do some silly math, and you can

00:02:58,430 --> 00:03:00,019
see that we get this nice little stuff printed

00:03:00,019 --> 00:03:00,709
out here.

00:03:00,709 --> 00:03:03,360
Right, so, in essence, this is really what TracePoint

00:03:03,360 --> 00:03:06,000
is all about. You hook into an event, you

00:03:06,000 --> 00:03:07,340
give it a block of code. The block of

00:03:07,340 --> 00:03:08,879
code runs and you can do really cool shit

00:03:08,879 --> 00:03:09,670
with it.

00:03:09,670 --> 00:03:12,250
So I said there's different events we could listen

00:03:12,250 --> 00:03:13,980
to. There's about eight or nine. I can't remember

00:03:13,980 --> 00:03:17,219
the exact number. The first one is, the first

00:03:17,219 --> 00:03:20,700
set is :class and :end, and :class listens for

00:03:20,700 --> 00:03:23,420
class and module, the beginning of class and module

00:03:23,420 --> 00:03:26,219
definitions, and :end listens for, to the end of

00:03:26,219 --> 00:03:27,500
class and module definitions.

00:03:27,500 --> 00:03:30,000
And we'll use the :end one a little bit

00:03:30,000 --> 00:03:31,609
when we do some really terrible things to Ruby

00:03:31,609 --> 00:03:33,810
that we shouldn't be doing. But it's really nice.

00:03:33,810 --> 00:03:35,469
But what the end doesn't do, it doesn't listen

00:03:35,469 --> 00:03:37,989
to method definition ending, so that's an important thing

00:03:37,989 --> 00:03:39,400
to note, and that's actually one of the things

00:03:39,400 --> 00:03:42,560
missing from the life cycle hooks of TracePoint. We

00:03:42,560 --> 00:03:44,150
can't listen to when a method definition ends.

00:03:44,150 --> 00:03:47,090
But we can get class and module methods, which

00:03:47,090 --> 00:03:48,329
is cool.

00:03:48,329 --> 00:03:51,810
:call, :return, :c_call and :c_return - I loop, I

00:03:51,810 --> 00:03:53,569
lump these together cause they all kind of behave

00:03:53,569 --> 00:03:58,799
the same. :call and :c_call listen to Ruby method

00:03:58,799 --> 00:04:01,200
calls that happen. The :call one, the :call event

00:04:01,200 --> 00:04:03,469
listens for Ruby, Ruby method calls. So anything that

00:04:03,469 --> 00:04:06,129
happens in the Ruby layer. And :c_call listens for

00:04:06,129 --> 00:04:09,579
anything that happens in the C part of Ruby.

00:04:09,579 --> 00:04:11,120
And the same thing for :return. So :return gets

00:04:11,120 --> 00:04:15,049
called whenever a method returns, so basically on every

00:04:15,049 --> 00:04:18,930
method, and :c_return, whenever a method gets returned in

00:04:18,930 --> 00:04:21,220
C. So I put them together cause they're really

00:04:21,220 --> 00:04:23,539
useful. So if you're gonna instrument, you want to

00:04:23,539 --> 00:04:27,000
listen to every method call in an entire application,

00:04:27,000 --> 00:04:29,090
you want to use both :call and :c_call, which

00:04:29,090 --> 00:04:30,160
we'll do later.

00:04:30,160 --> 00:04:32,699
If you're just instrumenting your application, your application's probably

00:04:32,699 --> 00:04:35,870
written all in Ruby, so you just use :call.

00:04:35,870 --> 00:04:39,150
:raise, we saw :raise earlier. One of the things

00:04:39,150 --> 00:04:41,949
I like about :raise is think about the, I

00:04:41,949 --> 00:04:44,139
was talking to, like, New Relic, one of the

00:04:44,139 --> 00:04:46,460
guys from New Relic earlier, Jason - you here?

00:04:46,460 --> 00:04:49,259
Jason, there he is. We talked about this over

00:04:49,259 --> 00:04:51,720
lunch, and I was saying you could rewrite something

00:04:51,720 --> 00:04:54,180
like AirBrake or Exceptional or any one of those

00:04:54,180 --> 00:04:58,620
error tracking using TracePoint.new(:raise) and give it a block

00:04:58,620 --> 00:05:00,470
of code, and then have it take that exception

00:05:00,470 --> 00:05:02,479
and post it to anywhere you want.

00:05:02,479 --> 00:05:04,460
So in about, like, five lines of code you

00:05:04,460 --> 00:05:07,720
could build a gem that listens to every exception

00:05:07,720 --> 00:05:11,610
in your entire application, regardless of where it's called.

00:05:11,610 --> 00:05:14,590
All right, that's pretty cool. That's some really cool

00:05:14,590 --> 00:05:15,389
stuff.

00:05:15,389 --> 00:05:21,220
Let's see, :b_call and :b_return. These listen to block

00:05:21,220 --> 00:05:25,009
calls and block returns. So whenever a block ends.

00:05:25,009 --> 00:05:27,780
There's no a_call or a_return, in case you guys

00:05:27,780 --> 00:05:30,139
were wondering. Just doesn't exist, which is a shame,

00:05:30,139 --> 00:05:31,610
cause it'd be fun.

00:05:31,610 --> 00:05:34,479
And then there's :thread_begin and :thread_end, which do exactly

00:05:34,479 --> 00:05:35,370
what you think they do. They listen to the

00:05:35,370 --> 00:05:36,800
beginning of a thread when a thread gets spawned

00:05:36,800 --> 00:05:39,169
up and then when a thread ends you get

00:05:39,169 --> 00:05:39,900
:thread_end.

00:05:39,900 --> 00:05:43,069
So now the fun part. We're gonna write a

00:05:43,069 --> 00:05:45,000
little demo here.

00:05:45,000 --> 00:05:47,889
I'm gonna write a demo but it's going to

00:05:47,889 --> 00:05:51,660
listen to a Ruby application, and whenever a method

00:05:51,660 --> 00:05:54,220
gets called, I'm gonna keep track of it to

00:05:54,220 --> 00:05:57,050
find out exactly how many method calls happen, which

00:05:57,050 --> 00:05:59,639
class they happen on, which, which methods are gonna

00:05:59,639 --> 00:06:02,099
get called in our application, right.

00:06:02,099 --> 00:06:03,590
So here's a little quick example of what this

00:06:03,590 --> 00:06:06,400
is gonna look like. I'm gonna require my little

00:06:06,400 --> 00:06:08,310
tracer program, and we'll build the tracer program in

00:06:08,310 --> 00:06:11,000
a second here. And I've got a nice foo

00:06:11,000 --> 00:06:13,069
class because a demo wouldn't be complete without a

00:06:13,069 --> 00:06:14,710
foo class.

00:06:14,710 --> 00:06:17,250
I was gonna do a Fibonacci generator, but, I

00:06:17,250 --> 00:06:20,319
just, it's a bit too much. And I call

00:06:20,319 --> 00:06:21,900
foo dot new dot bar, and this is what

00:06:21,900 --> 00:06:24,720
dumps out from my tracer program. And we'll look

00:06:24,720 --> 00:06:26,810
at that a little bit more in a second

00:06:26,810 --> 00:06:27,250
here.

00:06:27,250 --> 00:06:30,419
So to do that, right, I'm gonna require, I'm

00:06:30,419 --> 00:06:31,830
gonna build the little trace collector. And this is

00:06:31,830 --> 00:06:35,490
gonna hold the information about what we're building, OK.

00:06:35,490 --> 00:06:37,419
The things we want to capture are the class

00:06:37,419 --> 00:06:39,930
name, the method on that class that gets called,

00:06:39,930 --> 00:06:42,789
and the amount of times it gets called.

00:06:42,789 --> 00:06:44,770
So build this little simple singleton here. It's gonna

00:06:44,770 --> 00:06:47,419
hold onto all the calls for me. Give us

00:06:47,419 --> 00:06:49,240
a nice little way to iterate over each of

00:06:49,240 --> 00:06:52,419
them. Build a nice little method_missing cause I hate

00:06:52,419 --> 00:06:56,520
calling dot instance on my singleton classes. Let that

00:06:56,520 --> 00:06:57,849
catch up here.

00:06:57,849 --> 00:07:01,509
And go a little faster, go a little faster.

00:07:01,509 --> 00:07:02,440
By the way, don't you like my typing. I'm

00:07:02,440 --> 00:07:05,030
like, I'm pretty good. So our collect method is

00:07:05,030 --> 00:07:06,919
our big method, right. It's gonna take our TracePoint

00:07:06,919 --> 00:07:09,550
object, like it yields it up whenever one of

00:07:09,550 --> 00:07:11,020
these events happen, all right.

00:07:11,020 --> 00:07:11,810
And the first thing I need to know is

00:07:11,810 --> 00:07:14,000
the name of the class. So to do that,

00:07:14,000 --> 00:07:16,349
I can do TP dot self, and I think

00:07:16,349 --> 00:07:19,009
this is a poorly named method, but, what self

00:07:19,009 --> 00:07:22,550
returns when you call it on TP is the

00:07:22,550 --> 00:07:25,620
objects that the event occurred on. So in our

00:07:25,620 --> 00:07:26,650
case, foo.

00:07:26,650 --> 00:07:30,139
It's a little poorly named, but very useful, right.

00:07:30,139 --> 00:07:31,520
So now, with that we can get access to

00:07:31,520 --> 00:07:34,030
the class name. I do a little math because

00:07:34,030 --> 00:07:36,840
nilClass won't print out, obviously. We need to try

00:07:36,840 --> 00:07:38,490
to print it out.

00:07:38,490 --> 00:07:40,979
And then finally I'm calling the method ID, TP

00:07:40,979 --> 00:07:42,919
dot methodID returns back the name of the method

00:07:42,919 --> 00:07:46,879
that gets called, and I instrument, increment it by

00:07:46,879 --> 00:07:47,319
one.

00:07:47,319 --> 00:07:49,460
All right. So now we just need to create

00:07:49,460 --> 00:07:51,060
our tracers. So that's just, remember I said all

00:07:51,060 --> 00:07:53,849
it's doing is holding onto this information for us.

00:07:53,849 --> 00:07:57,689
Our tracers are even simpler, right. We got two

00:07:57,689 --> 00:07:59,530
tracers, one listed as :c_calls, see the list here,

00:07:59,530 --> 00:08:01,729
you know, and regular call. We want both Ruby

00:08:01,729 --> 00:08:03,800
and the C stack.

00:08:03,800 --> 00:08:05,400
We want to trace both of those. So what

00:08:05,400 --> 00:08:06,789
happens is we just, when that happens, we're gonna

00:08:06,789 --> 00:08:08,759
create a tracer and it's gonna just take that

00:08:08,759 --> 00:08:11,280
TracePoint object that gets returned to the block and

00:08:11,280 --> 00:08:12,960
we're gonna send it to our collect on our

00:08:12,960 --> 00:08:16,330
tracecollector. And then finally we enable it.

00:08:16,330 --> 00:08:18,210
That's it. That's all we do.

00:08:18,210 --> 00:08:22,039
And then, I believe, oh here's an at_exit. I'm

00:08:22,039 --> 00:08:24,389
not gonna explain the at_exit, but it's just formatting

00:08:24,389 --> 00:08:26,470
and dumping out all the shit, so the screen

00:08:26,470 --> 00:08:28,270
that we saw a second ago.

00:08:28,270 --> 00:08:30,780
So it's just there for completeness so that you

00:08:30,780 --> 00:08:32,680
don't think some magic thing was happening that TracePoint

00:08:32,680 --> 00:08:35,409
gives you. So now when we run our example

00:08:35,409 --> 00:08:39,010
again, this time we'll actually look at the output

00:08:39,010 --> 00:08:40,329
for a- I'll let you look at the output

00:08:40,329 --> 00:08:46,620
for a second. Very simple little program. Just foobar.

00:08:46,620 --> 00:08:52,079
There we go. We get an output that looks

00:08:52,079 --> 00:08:54,320
like this. This isn't all the output. This is

00:08:54,320 --> 00:08:56,420
some of the output. All the output looks like

00:08:56,420 --> 00:08:58,279
this. All right, so we can see that in

00:08:58,279 --> 00:09:02,019
that program I had fourteen method calls, once I

00:09:02,019 --> 00:09:03,310
enabled the tracers.

00:09:03,310 --> 00:09:05,760
Now, there's some information here I could have stripped

00:09:05,760 --> 00:09:09,250
out. Certainly the TracePoint stuff itself. If I really

00:09:09,250 --> 00:09:11,230
wanted to I could strip that out. Same thing

00:09:11,230 --> 00:09:12,940
with some of the object stuff here, I'm just

00:09:12,940 --> 00:09:16,130
printing stuff out to the screen. But we, so

00:09:16,130 --> 00:09:17,750
we, but, you now, it's like, screw it. It's

00:09:17,750 --> 00:09:20,470
just a demo. But you get the idea, right.

00:09:20,470 --> 00:09:22,490
So we can find out some more information. So

00:09:22,490 --> 00:09:23,360
in our foo, if we look at our foo

00:09:23,360 --> 00:09:26,120
model here, we see that bar and initialize get

00:09:26,120 --> 00:09:28,070
called once, right. That's the, in this case, in

00:09:28,070 --> 00:09:31,529
our case, that's the information we're really interested in.

00:09:31,529 --> 00:09:32,410
We can do more than this. It's a very

00:09:32,410 --> 00:09:35,959
simple program. What if we built something just a

00:09:35,959 --> 00:09:39,100
little bit more complex.

00:09:39,100 --> 00:09:41,000
What if we instrumented this in a Rails application?

00:09:41,000 --> 00:09:43,190
Now I'm just, I'm gonna, I'll tell you what

00:09:43,190 --> 00:09:45,440
the Rails application is, and I'm gonna ask you

00:09:45,440 --> 00:09:47,300
guys to tell me how many method calls you

00:09:47,300 --> 00:09:50,500
think occur in this Rails application. So it's a

00:09:50,500 --> 00:09:52,980
hello world application, right. And I'm gonna build the

00:09:52,980 --> 00:09:55,510
application here, you'll see the entire application. It has

00:09:55,510 --> 00:09:58,760
one controller - hello controller. It has one index

00:09:58,760 --> 00:10:01,320
action and it has one line inside that index

00:10:01,320 --> 00:10:04,420
action that calls render 'text:', "Hello, world!"

00:10:04,420 --> 00:10:07,440
That's the entire program. I will hit Hello World

00:10:07,440 --> 00:10:10,410
one time and then close it out and we'll

00:10:10,410 --> 00:10:12,970
see the instrumentation kick out all the method calls

00:10:12,970 --> 00:10:15,190
in the system. So my question is, how many

00:10:15,190 --> 00:10:20,019
people think it's under ten thousand method calls?

00:10:20,019 --> 00:10:22,100
One person. How many think it's over ten thousand?

00:10:22,100 --> 00:10:24,850
OK, everybody. Good. How many think it's over twenty

00:10:24,850 --> 00:10:31,850
thousand? Over fifty thousand? Over one hundred thousand? OK.

00:10:32,389 --> 00:10:33,490
Over two hundred thousand? I'll go crazy. Who thinks

00:10:33,490 --> 00:10:34,139
over two hundred thousand? OK, no one thinks it's

00:10:34,139 --> 00:10:36,079
over two hundred thousand.

00:10:36,079 --> 00:10:38,620
Well, let's see what the answer actually is.

00:10:38,620 --> 00:10:41,820
The answer may surprise you. So, here we go.

00:10:41,820 --> 00:10:44,490
Rails new Hello World. This is a standard Rails

00:10:44,490 --> 00:10:47,139
4 application. I'm not doing anything funky. This is

00:10:47,139 --> 00:10:50,600
the entire process, as you see it. Generating controller

00:10:50,600 --> 00:10:54,499
hello, and let's see it spit out some stuff

00:10:54,499 --> 00:10:55,690
- there we go. It spat out all its

00:10:55,690 --> 00:10:57,870
stuff. I open the controller and define my index

00:10:57,870 --> 00:11:02,060
action, right. And I'm gonna render the text "Hello

00:11:02,060 --> 00:11:04,149
World" to the screen.

00:11:04,149 --> 00:11:05,010
None of this should be surprising. Open up the

00:11:05,010 --> 00:11:07,980
routes file, add our route for it, in this

00:11:07,980 --> 00:11:11,230
case the root route. All right. Nothing fancy here.

00:11:11,230 --> 00:11:13,470
Nothing up my sleeves.

00:11:13,470 --> 00:11:15,550
And finally, I'm gonna, at the boot rb file,

00:11:15,550 --> 00:11:17,200
I'm gonna add my tracer program. It's the same

00:11:17,200 --> 00:11:19,360
tracer program we just used to do foo, that

00:11:19,360 --> 00:11:22,670
foo example. Nothing is changed here. You can even

00:11:22,670 --> 00:11:24,130
see the dis, the directory structure I used for

00:11:24,130 --> 00:11:28,660
when I write my talks. There we go.

00:11:28,660 --> 00:11:30,070
And I save it. Now I'm gonna start the

00:11:30,070 --> 00:11:33,300
Rails server. And you can see I'm using Webrick.

00:11:33,300 --> 00:11:35,480
I'm not using any fancy web server here to

00:11:35,480 --> 00:11:39,170
inflate these numbers. I go to Chrome, I hit

00:11:39,170 --> 00:11:41,649
it, Hello World - fantastic. You see it hit

00:11:41,649 --> 00:11:44,160
once. Boom. Ran down.

00:11:44,160 --> 00:11:51,160
One hundred twenty-two thousand five hundred thirty-eight method calls.

00:11:54,790 --> 00:11:57,300
Now I'm not trying to slam Rails here. I

00:11:57,300 --> 00:11:59,529
just, I just, I, I, that number blew my

00:11:59,529 --> 00:12:01,940
mind away. I was like, I can't believe how

00:12:01,940 --> 00:12:02,940
many - and wait until you see some of

00:12:02,940 --> 00:12:06,360
the other numbers. So here are the top method,

00:12:06,360 --> 00:12:07,949
here are the top classes. I'll show you the

00:12:07,949 --> 00:12:11,630
top classes and their top method calls. It's kind

00:12:11,630 --> 00:12:11,910
of scary.

00:12:11,910 --> 00:12:15,779
So class has almost twenty-six thousand method calls on

00:12:15,779 --> 00:12:19,990
it. Rails initializable initializer has sixteen and a half

00:12:19,990 --> 00:12:22,810
thousand calls. I don't know what that class does.

00:12:22,810 --> 00:12:26,170
It seems a bit excessive for something that says

00:12:26,170 --> 00:12:29,630
initializer in it twice. That seems like a, a

00:12:29,630 --> 00:12:31,480
bit much, or excessive.

00:12:31,480 --> 00:12:34,449
Now module and string and array, you expect to

00:12:34,449 --> 00:12:36,170
see a lot of method calls. now notice that

00:12:36,170 --> 00:12:39,370
they're like, close, but I mean like, object only

00:12:39,370 --> 00:12:42,139
has forty-five hundred, or fixnum, right. I'm, and you

00:12:42,139 --> 00:12:43,790
make a lot of those in, in a Ruby

00:12:43,790 --> 00:12:45,149
program. So I expect to see a lot of

00:12:45,149 --> 00:12:46,810
method calls in there.

00:12:46,810 --> 00:12:48,769
But this one really does scare me a little

00:12:48,769 --> 00:12:51,240
bit. But let's look at the Hello Controller. Now,

00:12:51,240 --> 00:12:53,480
I mean, another little quick question. So, you saw

00:12:53,480 --> 00:12:55,209
I hit the, I hit the hello controller how

00:12:55,209 --> 00:12:58,740
many times? Once.

00:12:58,740 --> 00:13:01,910
How many times should initialize get called on that?

00:13:01,910 --> 00:13:06,329
Come on. You would think once. How many times

00:13:06,329 --> 00:13:08,350
you guys think it actually gets called?

00:13:08,350 --> 00:13:13,649
Oh, come on, throw it a number. Sixteen and

00:13:13,649 --> 00:13:15,850
a half thousand? That would be awesome.

00:13:15,850 --> 00:13:19,550
Actually it's called four times.

00:13:19,550 --> 00:13:25,230
I don't know. Like I said I'm not here

00:13:25,230 --> 00:13:28,690
to indite Rails. I'm just, just, I just think

00:13:28,690 --> 00:13:29,480
it's quite funny.

00:13:29,480 --> 00:13:31,260
You know, and if I really wanted to take

00:13:31,260 --> 00:13:32,440
this a step further, I was thinking about this

00:13:32,440 --> 00:13:34,209
last night in my hotel room, maybe I should

00:13:34,209 --> 00:13:36,829
take this demo a step further and use TracePoint

00:13:36,829 --> 00:13:40,089
to then pin, to dig into that and find

00:13:40,089 --> 00:13:43,970
out which files were calling initialize four times on

00:13:43,970 --> 00:13:46,440
my Hello controller, right. So we could do that.

00:13:46,440 --> 00:13:48,209
I'm not going to cause that's just kind of

00:13:48,209 --> 00:13:50,079
beating a dead horse, right, and this is not

00:13:50,079 --> 00:13:52,259
about figuring out why Rails is slow or why

00:13:52,259 --> 00:13:54,269
Rails calls these methods so many times or whatever.

00:13:54,269 --> 00:13:56,350
That's not the point. That just, I was just

00:13:56,350 --> 00:13:59,839
showing an example of a complex application here.

00:13:59,839 --> 00:14:01,519
But we could do that. We could use TracePoint

00:14:01,519 --> 00:14:02,940
to do that. And you see we had the

00:14:02,940 --> 00:14:05,300
start of a program that is doing that for

00:14:05,300 --> 00:14:09,839
us, right. It uses instrumentation that's built in, built

00:14:09,839 --> 00:14:11,910
right into Ruby in 2.0 and above to let

00:14:11,910 --> 00:14:13,540
us do that. And we could use this to

00:14:13,540 --> 00:14:16,699
build, you know, kind of, you know, bench marking

00:14:16,699 --> 00:14:18,420
metrics. We could look at the beginning and end

00:14:18,420 --> 00:14:19,500
of the method definition, of, beginning and end of

00:14:19,500 --> 00:14:20,940
a method call.

00:14:20,940 --> 00:14:23,980
See how long it takes to return and then

00:14:23,980 --> 00:14:25,449
say, OK, these we all the methods that take

00:14:25,449 --> 00:14:27,310
over a second. These are the methods that take

00:14:27,310 --> 00:14:29,009
over a certain amount of time. Print those out.

00:14:29,009 --> 00:14:32,000
We could gather all sorts of really incredible information

00:14:32,000 --> 00:14:34,610
with just a few lines of code. The largest

00:14:34,610 --> 00:14:37,089
amount of code I wrote in this example was

00:14:37,089 --> 00:14:39,430
the code to print it out at the end.

00:14:39,430 --> 00:14:41,029
You see the rest of the code I wrote.

00:14:41,029 --> 00:14:43,279
It was just a few lines to actually capture

00:14:43,279 --> 00:14:45,500
all this information.

00:14:45,500 --> 00:14:48,060
I promised you a little bit of mangling. I

00:14:48,060 --> 00:14:49,550
promised you I was gonna do something really terrible

00:14:49,550 --> 00:14:51,759
to Ruby. And I'm going to. I was not

00:14:51,759 --> 00:14:56,100
joking. I'm gonna real, this is, yeah, this is

00:14:56,100 --> 00:14:58,040
terrible.

00:14:58,040 --> 00:15:01,800
Anybody here like Java? Ah huh, OK, there you

00:15:01,800 --> 00:15:03,339
go. Anybody like when you put Java and Ruby

00:15:03,339 --> 00:15:07,899
together? OK. And I don't mean JRuby. We're not

00:15:07,899 --> 00:15:10,550
gonna talk about JRuby, right. SO I came form

00:15:10,550 --> 00:15:12,209
a Java background. I did, I've been in Ruby

00:15:12,209 --> 00:15:14,990
since 2005. Before that I was doing Java for

00:15:14,990 --> 00:15:16,649
years.

00:15:16,649 --> 00:15:18,779
And one of the things we had in Java

00:15:18,779 --> 00:15:22,820
were these terrible things called abstract interfaces. You see

00:15:22,820 --> 00:15:28,329
where this is going, don't you?

00:15:28,329 --> 00:15:31,329
Yup.

00:15:31,329 --> 00:15:35,970
I, I have to say that. Please do not

00:15:35,970 --> 00:15:38,060
actually try this at home. All right, I wrote

00:15:38,060 --> 00:15:40,540
a blog post a couple years ago where I

00:15:40,540 --> 00:15:42,240
talk about this. I was bored one day, as

00:15:42,240 --> 00:15:44,829
you do, and I said, jees, I wonder if

00:15:44,829 --> 00:15:47,019
you could do, like, abstract classes and interfaces in

00:15:47,019 --> 00:15:49,339
Ruby. And so I wrote this blog post kind

00:15:49,339 --> 00:15:51,889
of hypothesizing the different ways you could potentially do

00:15:51,889 --> 00:15:53,769
this. It was just a thought experiment. Just kind

00:15:53,769 --> 00:15:55,660
of playing around with some stuff.

00:15:55,660 --> 00:15:57,660
And I got two different types of people responding

00:15:57,660 --> 00:15:59,579
to it. I got one group of people saying,

00:15:59,579 --> 00:16:01,240
oh my god that's awesome you should write a

00:16:01,240 --> 00:16:04,630
gem! And then, and then other people were like,

00:16:04,630 --> 00:16:06,180
oh yeah, also, I actually wrote the gem! Don't

00:16:06,180 --> 00:16:07,720
worry about it! They were responding to each other,

00:16:07,720 --> 00:16:08,910
like, oh, I got your back! I wrote the

00:16:08,910 --> 00:16:10,269
gem for you.

00:16:10,269 --> 00:16:13,490
Don't. And another group of people who yelled at

00:16:13,490 --> 00:16:15,800
me. Like, like were really violent with me on,

00:16:15,800 --> 00:16:18,630
on, on my comments section. Like how dare you

00:16:18,630 --> 00:16:20,860
do this in Ruby? And if you want interfaces,

00:16:20,860 --> 00:16:24,699
go use Java you dick! And I was like,

00:16:24,699 --> 00:16:27,810
whoa! Like, that seems like overly hostile. Like I'm

00:16:27,810 --> 00:16:29,709
just talking about interfaces.

00:16:29,709 --> 00:16:30,769
So I just wanted to make sure I got

00:16:30,769 --> 00:16:32,800
that out in advanced that I am not actually

00:16:32,800 --> 00:16:35,420
advocating this. But if you take it away and

00:16:35,420 --> 00:16:38,579
do something with it, it's all on you.

00:16:38,579 --> 00:16:40,100
So here are, here is an example of an

00:16:40,100 --> 00:16:41,120
interface in Java.

00:16:41,120 --> 00:16:44,839
Right, we have a bicycle interface, and it says,

00:16:44,839 --> 00:16:47,009
anybody who implements me has to define these three

00:16:47,009 --> 00:16:51,410
methods. These three methods are required by me, by

00:16:51,410 --> 00:16:53,540
me the bicycle, to be considered a bicycle, right.

00:16:53,540 --> 00:16:56,040
And then I have a class down here that

00:16:56,040 --> 00:16:57,800
implements that bicycle, the acting bicycle here, and it

00:16:57,800 --> 00:16:59,690
has to define those three methods.

00:16:59,690 --> 00:17:02,389
If I don't define those three methods, what happens

00:17:02,389 --> 00:17:04,900
is the JVM, when it's compiling, will kick up

00:17:04,900 --> 00:17:09,150
an error at compilation time and say, whoa, ACMEBicycle,

00:17:09,150 --> 00:17:11,110
you're missing a method or two. You have to

00:17:11,110 --> 00:17:13,720
implement these things. And execution stops. Like, it won't

00:17:13,720 --> 00:17:15,860
even get past compilation.

00:17:15,860 --> 00:17:17,730
So I want to do that in Ruby, right.

00:17:17,730 --> 00:17:19,280
I don't want it to happen that when I'm

00:17:19,280 --> 00:17:21,980
using a library it says oh, you're missing a

00:17:21,980 --> 00:17:24,300
method. I want it to have happened at boot

00:17:24,300 --> 00:17:27,580
time, when Ruby starts actually looking at the method

00:17:27,580 --> 00:17:29,250
definition and it stops and it says, you're missing

00:17:29,250 --> 00:17:30,000
methods.

00:17:30,000 --> 00:17:32,560
And that's, that's the goal here. I want to

00:17:32,560 --> 00:17:34,270
be able to do something like this. All right,

00:17:34,270 --> 00:17:37,530
I want to have an API interface include an

00:17:37,530 --> 00:17:41,080
AbstraceInterface module, define a couple abstract methods, and then

00:17:41,080 --> 00:17:43,880
have another class down here, the HTTPLibrary in this

00:17:43,880 --> 00:17:47,160
case, that should spit up errors as soon as

00:17:47,160 --> 00:17:50,830
Ruby parses this class definition and says, you are

00:17:50,830 --> 00:17:52,000
missing shit.

00:17:52,000 --> 00:17:54,550
Now, one, one place you would try to do

00:17:54,550 --> 00:17:57,760
that is here, right, is the include line. You'd

00:17:57,760 --> 00:18:00,730
say, OK, when this is included, let me try

00:18:00,730 --> 00:18:04,680
and figure out if HTTPLibrary has these missing methods.

00:18:04,680 --> 00:18:08,010
Now here, this would work fine. This example, that

00:18:08,010 --> 00:18:09,090
would raise an error, and you'd be, you'd be

00:18:09,090 --> 00:18:09,600
golden.

00:18:09,600 --> 00:18:12,660
however, in this case, if I try to do

00:18:12,660 --> 00:18:15,370
it here again, I am defining get and put,

00:18:15,370 --> 00:18:18,800
the problem is at the include line, get and

00:18:18,800 --> 00:18:20,780
put have not been defined yet on my class

00:18:20,780 --> 00:18:24,290
because it's not finishing parsing the class definition. So

00:18:24,290 --> 00:18:26,140
it would stop execution and yell at me that

00:18:26,140 --> 00:18:28,310
you're missing these methods, and then you spend, you

00:18:28,310 --> 00:18:29,470
know, three hours trying to figure out, you know,

00:18:29,470 --> 00:18:31,570
well what the fuck is going on? I've defined

00:18:31,570 --> 00:18:32,820
them!

00:18:32,820 --> 00:18:34,680
But they don't exist at that, at that point

00:18:34,680 --> 00:18:36,500
in time, though.

00:18:36,500 --> 00:18:37,340
So here's what we're gonna do. I'm gonna show

00:18:37,340 --> 00:18:40,210
you a little example of this here working. I

00:18:40,210 --> 00:18:44,190
like doing that. I'm gonna require my interface's library

00:18:44,190 --> 00:18:47,430
that I've built, and I'm gonna define the exact

00:18:47,430 --> 00:18:52,790
same code we just saw here, our ApiInterface. Include

00:18:52,790 --> 00:18:53,640
the AbstractInterface.

00:18:53,640 --> 00:18:56,160
By the way, these robes are really hot. I

00:18:56,160 --> 00:18:58,520
don't know if anybody's worn one of these things

00:18:58,520 --> 00:19:01,960
yet. They are really, really hot. But I'm not

00:19:01,960 --> 00:19:03,700
wearing any pants.

00:19:03,700 --> 00:19:06,050
I'm kind of stuck wearing it for the rest

00:19:06,050 --> 00:19:08,700
of the, for the rest of the talk. That's

00:19:08,700 --> 00:19:09,690
a, that's a thing with me. Apparently I suck,

00:19:09,690 --> 00:19:11,560
I've stopped wearing pants to talks. I did the

00:19:11,560 --> 00:19:13,220
keynote in a half tuxedo this summer cause I

00:19:13,220 --> 00:19:17,000
forgot my pants. As you do. But anyways, we

00:19:17,000 --> 00:19:17,560
get this-

00:19:17,560 --> 00:19:20,030
WE get this great class here, and when we

00:19:20,030 --> 00:19:22,880
run it, we get this. WE get an error,

00:19:22,880 --> 00:19:24,580
as soon as we try to run it, that

00:19:24,580 --> 00:19:27,080
says you must implement the following methods get and

00:19:27,080 --> 00:19:27,450
put.

00:19:27,450 --> 00:19:30,090
That's what we're going for. That's the, that's the

00:19:30,090 --> 00:19:32,420
end goal here. That's the dream, right. Notice I

00:19:32,420 --> 00:19:34,200
wasn't trying to use the library. I was just

00:19:34,200 --> 00:19:37,150
defining it. Just defining my class in this, this

00:19:37,150 --> 00:19:39,070
got called.

00:19:39,070 --> 00:19:39,940
So how do we build this?

00:19:39,940 --> 00:19:43,040
Let's see, we skipped over that. Oh, here's the,

00:19:43,040 --> 00:19:45,380
here's it actually running successfully, just in case you

00:19:45,380 --> 00:19:48,080
don't believe me. So get and put. We're in

00:19:48,080 --> 00:19:51,060
there. I run it. It ends successfully. Nothing blows

00:19:51,060 --> 00:19:53,680
up. So. That's the dream, right. That's the goal

00:19:53,680 --> 00:19:54,950
that we all want in our lives.

00:19:54,950 --> 00:19:57,330
So to do this is actually pretty simple. We

00:19:57,330 --> 00:20:00,920
build this abstract interface and it's just gotta couple

00:20:00,920 --> 00:20:02,780
things on it, I think, important. It has a

00:20:02,780 --> 00:20:06,340
standard error, a nice little not implemented error here

00:20:06,340 --> 00:20:07,930
just so we can print it out to the

00:20:07,930 --> 00:20:09,520
screen. I realized, I was like, oh, I could

00:20:09,520 --> 00:20:10,630
have made this more verbose.

00:20:10,630 --> 00:20:12,120
That happens when you start doing these demos, like

00:20:12,120 --> 00:20:14,160
these kinds of talks. You're like, oh, I could

00:20:14,160 --> 00:20:15,440
actually add this to it, and I could add

00:20:15,440 --> 00:20:17,220
that to it. and you missed the whole point

00:20:17,220 --> 00:20:19,200
of don't do it, not doing this.

00:20:19,200 --> 00:20:21,120
But you can say, oh this class requires these

00:20:21,120 --> 00:20:24,660
methods and what have you. But anyway, so, I

00:20:24,660 --> 00:20:26,800
have an error there. And then I'm just calling

00:20:26,800 --> 00:20:29,600
the extend, the included hook on module. So when

00:20:29,600 --> 00:20:32,060
somebody includes the abstract interface into it I add

00:20:32,060 --> 00:20:34,560
some class methods. And the only class method I

00:20:34,560 --> 00:20:38,700
add is the abstract method call we saw, which

00:20:38,700 --> 00:20:40,650
takes a splat of methods.

00:20:40,650 --> 00:20:42,530
And that's gonna just pass that off to an

00:20:42,530 --> 00:20:45,620
abstract method manager, which we haven't written yet. I'm

00:20:45,620 --> 00:20:47,370
big on singletons in case you haven't noticed. I

00:20:47,370 --> 00:20:50,980
even used manager, cause it's very Java-esque. I was

00:20:50,980 --> 00:20:53,420
gonna have a service and an IMPLE that generated

00:20:53,420 --> 00:20:55,020
the manager for me.

00:20:55,020 --> 00:20:58,010
And a factory as well. But I thought that

00:20:58,010 --> 00:20:59,970
was a bit too, a bit too much.

00:20:59,970 --> 00:21:02,310
So the abstract method manager takes, has a method

00:21:02,310 --> 00:21:04,380
called add, and it's gonna take two arguments. The

00:21:04,380 --> 00:21:08,250
class that's requiring them, that is requiring these methods-

00:21:08,250 --> 00:21:10,980
so ApiInterface for this example, and then the methods

00:21:10,980 --> 00:21:14,580
that it, it wants, get and put.

00:21:14,580 --> 00:21:16,340
So to build that abstract method manager, this is

00:21:16,340 --> 00:21:18,420
even simpler than our trace collector earlier, which is

00:21:18,420 --> 00:21:21,260
a little bit more complex. This is even simpler.

00:21:21,260 --> 00:21:23,300
Again, it's a singleton. We just have an adder

00:21:23,300 --> 00:21:25,030
for the methods and the key is going to

00:21:25,030 --> 00:21:28,030
be the class name. And the values are going

00:21:28,030 --> 00:21:31,470
to be those methods that we want, the get

00:21:31,470 --> 00:21:32,350
and put here.

00:21:32,350 --> 00:21:33,660
And you can see that in our add method

00:21:33,660 --> 00:21:33,780
here.

00:21:33,780 --> 00:21:40,780
Should have sped this up a little more.

00:21:41,820 --> 00:21:43,880
And there we go. OK. That's our entire abstract

00:21:43,880 --> 00:21:46,890
method manager. The real fun, obviously, comes in our

00:21:46,890 --> 00:21:48,410
trace.

00:21:48,410 --> 00:21:51,540
SO we're gonna define new TracePoint. It's gonna listen

00:21:51,540 --> 00:21:54,050
to the end keyword. So whenever the module or

00:21:54,050 --> 00:21:56,900
class gets define it's gonna run this code.

00:21:56,900 --> 00:21:59,110
As soon as it runs this code, first thing

00:21:59,110 --> 00:21:59,760
it's gonna do is it's gonna grab all the

00:21:59,760 --> 00:22:03,750
ancestors for that class or module. And then it's

00:22:03,750 --> 00:22:06,140
gonna delete itself, and the reason we delete itself

00:22:06,140 --> 00:22:08,770
from the ancestor tree is, in the case of

00:22:08,770 --> 00:22:12,380
ApiInterface, right, I say here are some abstract methods

00:22:12,380 --> 00:22:14,920
for ApiInterface, and then if I call end, if

00:22:14,920 --> 00:22:16,380
I didn't do that line, if I didn't do

00:22:16,380 --> 00:22:19,270
that third line of deleting myself, it's going to,

00:22:19,270 --> 00:22:20,470
when you see the rest of the program, it's

00:22:20,470 --> 00:22:21,960
going to look at the ancestor, it'll loop through

00:22:21,960 --> 00:22:25,360
the ancestor tree, see itself, look for abstract methods,

00:22:25,360 --> 00:22:27,400
gonna find some, it doesn't define them, and it's

00:22:27,400 --> 00:22:28,170
gonna blow up.

00:22:28,240 --> 00:22:30,500
So we have to take ourselves out of the

00:22:30,500 --> 00:22:32,790
equation to do this. So anyway, once we take

00:22:32,790 --> 00:22:34,150
our selves out we're gonna have an array that's

00:22:34,150 --> 00:22:37,000
gonna hold onto any method, missing methods that we

00:22:37,000 --> 00:22:40,030
need, and at the end of our block here,

00:22:40,030 --> 00:22:42,040
we're gonna raise that error if we have any

00:22:42,040 --> 00:22:45,410
missing methods we're gonna point them all out here.

00:22:45,410 --> 00:22:46,750
But now we're, the real meat of it is

00:22:46,750 --> 00:22:49,720
actually looping through all the ancestors. So you loop

00:22:49,720 --> 00:22:52,340
through each of the ancestors, and then we ask

00:22:52,340 --> 00:22:54,900
the abstract method manager, do you have any methods?

00:22:54,900 --> 00:22:58,120
If it has methods, we then use that TP

00:22:58,120 --> 00:23:00,100
dot self, I'm getting ahead of myself here.

00:23:00,100 --> 00:23:01,900
Here we go. We're gonna use that TP dot

00:23:01,900 --> 00:23:04,680
self call again to ask the object, hey, in,

00:23:04,680 --> 00:23:07,780
on your instance methods, do you include these couple

00:23:07,780 --> 00:23:09,290
methods we need? Do you include get, do you

00:23:09,290 --> 00:23:11,610
include put, and if not we're gonna add them

00:23:11,610 --> 00:23:13,000
to our missing methods.

00:23:13,000 --> 00:23:16,090
That's it. That's all the code I wrote to

00:23:16,090 --> 00:23:18,760
make that work. That, that little bit of code,

00:23:18,760 --> 00:23:21,380
and this is really the bulk of the code,

00:23:21,380 --> 00:23:22,730
that and the last, the last file, so what,

00:23:22,730 --> 00:23:25,180
maybe about two dozen lines of code, and I've

00:23:25,180 --> 00:23:27,970
built abstract methods in Ruby.

00:23:27,970 --> 00:23:30,160
I built this.

00:23:30,160 --> 00:23:31,620
Using TracePoint.

00:23:31,620 --> 00:23:34,000
I think it's pretty cool. And it's really fun.

00:23:34,000 --> 00:23:36,820
So there's a lot we can do with TracePoint,

00:23:36,820 --> 00:23:38,200
and I'm just kind of touching the surface of

00:23:38,200 --> 00:23:40,970
it here. I'm not gonna go into much further

00:23:40,970 --> 00:23:43,370
detail, much further examples, but really the docs say

00:23:43,370 --> 00:23:45,690
it all, and you can see there, there's lots

00:23:45,690 --> 00:23:47,120
of fun thing you can do with instrumentation, with

00:23:47,120 --> 00:23:49,630
mangling Ruby and other great stuff.

00:23:49,630 --> 00:23:51,560
And that is it. Told you it was gonna

00:23:51,560 --> 00:23:58,560

YouTube URL: https://www.youtube.com/watch?v=cxzUrT0slB0


