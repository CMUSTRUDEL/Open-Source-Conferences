Title: Ruby Conf 2013 - Profiling Ruby: Finding 10x Gains In RSpec and CRuby
Publication date: 2020-01-27
Playlist: RubyConf 2013
Description: 
	By Xavier Shay

In this detective story we'll start by identifying and fixing easy performance problems in Ruby, before working our way down to the guts of the interpreter itself. Using concrete examples from RSpec and CRuby we'll cover all the necessary tools including benchmark, ruby-prof, gnuplot, and more, and show how you can tie them all together to solve real problems yourself.

Help us caption & translate this video!

http://amara.org/v/FG50/
Captions: 
	00:00:16,000 --> 00:00:19,900
XAVIER SHAY: Sorry. The lights stopped. Thank you for your patience.

00:00:19,980 --> 00:00:23,140
My name's Xavier. I currently work at Square on

00:00:23,140 --> 00:00:26,480
the production engineering team. And my details are up

00:00:26,480 --> 00:00:28,070
here. You can see them.

00:00:28,070 --> 00:00:30,250
And today I'm going to be talking about profiling

00:00:30,250 --> 00:00:32,290
Ruby. It's a thing that I've done a little

00:00:32,290 --> 00:00:35,230
bit of. I've sped up a lot of things.

00:00:35,230 --> 00:00:36,750
In some ways, this is kind of a weird

00:00:36,750 --> 00:00:39,399
talk for me to give, because I'm actually not

00:00:39,399 --> 00:00:42,910
really that much of an expert at this. And

00:00:42,910 --> 00:00:48,570
I don't really even like it very much. But.

00:00:48,570 --> 00:00:52,120
I really, really hate slow things. And that's been

00:00:52,120 --> 00:00:55,910
sufficient motivation to overcome the first two difficulties -

00:00:55,910 --> 00:00:58,660
an opportunity to speed up some slow things.

00:00:58,660 --> 00:01:00,470
And so I wanted to talk through that with

00:01:00,470 --> 00:01:02,130
you guys.

00:01:02,130 --> 00:01:05,560
To put it in Matz's terms from this morning,

00:01:05,560 --> 00:01:06,880
sometimes you just have to take out the garbage,

00:01:06,880 --> 00:01:12,009
right. So that's, that's what this is for me.

00:01:12,009 --> 00:01:14,920
Now this isn't, this isn't a tools talk. I

00:01:14,920 --> 00:01:17,429
want to preface that. If you've come to learn

00:01:17,429 --> 00:01:20,200
the latest and greatest about sampling profiles, this is

00:01:20,200 --> 00:01:23,249
not that talk. I do cover some basic tools

00:01:23,249 --> 00:01:25,520
that you need to know about, but this is

00:01:25,520 --> 00:01:28,799
really about the mindset of how I, how I

00:01:28,799 --> 00:01:32,020
go into this problem, and how I, how I

00:01:32,020 --> 00:01:35,369
approach it, and it's worthwhile for me.

00:01:35,369 --> 00:01:38,119
So there are, there are three, three things that

00:01:38,119 --> 00:01:40,259
I'm always doing whenever I'm trying to figure out

00:01:40,259 --> 00:01:43,869
why something is slow. I'm hypothesizing - why could

00:01:43,869 --> 00:01:47,009
this be slow? What is this thing doing? Computers

00:01:47,009 --> 00:01:49,619
are really fast, and if I'm sitting there for

00:01:49,619 --> 00:01:51,380
three seconds waiting for a computer to do something,

00:01:51,380 --> 00:01:53,479
I have heaps of time to think about, well,

00:01:53,479 --> 00:01:55,859
what's it doing? It's got three seconds. That's a

00:01:55,859 --> 00:01:57,529
lot of computer time, right.

00:01:57,529 --> 00:01:59,200
So coming up with ideas.

00:01:59,200 --> 00:02:00,979
Figure out how to isolate those in order to

00:02:00,979 --> 00:02:03,529
test whether that's actually your problem or not, and

00:02:03,529 --> 00:02:05,670
then also figuring out how to instrument different things

00:02:05,670 --> 00:02:07,590
to figure out which bits are fast, which bits

00:02:07,590 --> 00:02:09,740
are slow, and then to prove that you actually

00:02:09,740 --> 00:02:11,150
spend a thing up.

00:02:11,150 --> 00:02:13,310
So I'm gonna keep coming back to these three

00:02:13,310 --> 00:02:16,150
points. I'm gonna work through a couple of examples

00:02:16,150 --> 00:02:19,400
of, of how I've applied this, and there's pretty

00:02:19,400 --> 00:02:22,069
graphs and everything. It's gonna be great.

00:02:22,069 --> 00:02:24,299
To begin with, though, I wanted to talk more

00:02:24,299 --> 00:02:27,610
about the, the mental game of this. Because I've

00:02:27,610 --> 00:02:30,049
certainly, for me it's, profiling has always been that

00:02:30,049 --> 00:02:33,950
kind of thing, it's like, it just seems too

00:02:33,950 --> 00:02:36,360
hard, right. And some of the best advice I

00:02:36,360 --> 00:02:38,870
got in relation to this was actually not computer

00:02:38,870 --> 00:02:42,340
related at all. This was probably third year university.

00:02:42,340 --> 00:02:45,390
I moved into an apartment with one of my

00:02:45,390 --> 00:02:48,129
friends, and sort of fairly early on in the

00:02:48,129 --> 00:02:49,930
relationship, he was like, hey, do you want to

00:02:49,930 --> 00:02:51,810
play a game of Scrabble? Ah, that sounds great.

00:02:51,810 --> 00:02:54,159
Do you guys know Scrabble? The board game? Hopefully

00:02:54,159 --> 00:02:55,000
everybody knows Scrabble.

00:02:55,000 --> 00:02:57,510
And, so oh, great, I love Scrabble. That's a

00:02:57,510 --> 00:02:59,730
fun game. I played it as a kid. So

00:02:59,730 --> 00:03:00,500
you know we got a couple of beers, got

00:03:00,500 --> 00:03:04,890
the Scrabble board out, played this game. He absolutely

00:03:04,890 --> 00:03:07,930
smashed me. Like, he got a gazillion points. I

00:03:07,930 --> 00:03:10,650
couldn't put any words on the board. And afterwards,

00:03:10,650 --> 00:03:12,569
he was like, oh wow, I really need to

00:03:12,569 --> 00:03:14,230
teach you how to play Scrabble.

00:03:14,230 --> 00:03:17,510
And that was kind of hard, cause I was

00:03:17,510 --> 00:03:19,069
like, it's just Scrabble. It's just making words. Like,

00:03:19,069 --> 00:03:20,159
none of this, like, somebody's mom was like a

00:03:20,159 --> 00:03:22,219
pro-Scrabble player and all we did together was play

00:03:22,219 --> 00:03:25,230
Scrabble, and he really shocked me. But one of

00:03:25,230 --> 00:03:27,329
the best bits of advice he gave me, so.

00:03:27,329 --> 00:03:29,340
We're, we're playing along and there's this thing in

00:03:29,340 --> 00:03:31,459
Scrabble called a Bingo, where if you put all

00:03:31,459 --> 00:03:33,129
of your seven piles, you get rid of your

00:03:33,129 --> 00:03:34,030
rack, you get a bonus 50 points. It's kind

00:03:34,030 --> 00:03:35,739
of a big deal. It's also kind of exciting,

00:03:35,739 --> 00:03:39,439
like, laying down all seven tiles. It's kind of,

00:03:39,439 --> 00:03:42,219
it just feels really good, you know. But, like,

00:03:42,219 --> 00:03:44,359
making a seven-letter word in Scrabble is really hard.

00:03:44,359 --> 00:03:46,329
I've never done it before in my entire life.

00:03:46,329 --> 00:03:47,900
And like, within the first couple of games he's

00:03:47,900 --> 00:03:49,920
laid down a few of them. And I called

00:03:49,920 --> 00:03:52,140
him on it. I'm like that's, that's rubbish. Like,

00:03:52,140 --> 00:03:53,510
how did you manage to get all these seven

00:03:53,510 --> 00:03:54,780
letter words? He's like, oh you just need to

00:03:54,780 --> 00:03:55,599
look for them.

00:03:55,599 --> 00:03:59,319
I thought, well that's useless advice, isn't it.

00:03:59,319 --> 00:04:00,819
But sure enough, I thought, well, OK, well, I'll

00:04:00,819 --> 00:04:02,810
try it out. And the next game, like, every

00:04:02,810 --> 00:04:04,409
single rack I got, I just look at it,

00:04:04,409 --> 00:04:05,999
and say, OK, can I make a seven letter

00:04:05,999 --> 00:04:08,620
word? Like, no. No. No. And I kept trying

00:04:08,620 --> 00:04:10,139
and I kept trying, and then, then it was

00:04:10,139 --> 00:04:12,519
yes! I saw one. And like the very next

00:04:12,519 --> 00:04:14,459
game I got my first seven-letter word ever. And

00:04:14,459 --> 00:04:16,810
I was so excited. And it all just came

00:04:16,810 --> 00:04:18,959
from, he's like, you just need to look for

00:04:18,959 --> 00:04:20,070
it.

00:04:20,070 --> 00:04:23,530
And I, this is applied so much to me

00:04:23,530 --> 00:04:26,620
for speeding up code. It's really easy to sort

00:04:26,620 --> 00:04:28,970
of in your head say, oh it's a popular

00:04:28,970 --> 00:04:31,220
library, like, much smarter people than me have looked

00:04:31,220 --> 00:04:34,390
at this, you know, surely, maybe there's some micro

00:04:34,390 --> 00:04:37,390
optimizations, but I don't know how to find those.

00:04:37,390 --> 00:04:39,330
You really need to actually - that's a really

00:04:39,330 --> 00:04:41,190
negative mindset. You need to come in believing that

00:04:41,190 --> 00:04:43,350
you're going to find something. You need to sort

00:04:43,350 --> 00:04:45,920
of walk into the code base, say, you know

00:04:45,920 --> 00:04:47,920
what, there's so much low-hanging fruit in here I

00:04:47,920 --> 00:04:49,770
can, there's plenty of peaches. I just need to

00:04:49,770 --> 00:04:50,600
go in and find them.

00:04:50,600 --> 00:04:52,300
So you just need to go into a code

00:04:52,300 --> 00:04:54,470
base and just believe that you can find something.

00:04:54,470 --> 00:04:56,610
And honestly more than of- more often than not

00:04:56,610 --> 00:04:57,560
you probably will.

00:04:57,560 --> 00:05:00,530
This is rea- I've been, I've been absolutely surprised

00:05:00,530 --> 00:05:02,830
every single time I've managed to speed something up.

00:05:02,830 --> 00:05:05,410
I have been shocked at, one) how easy it

00:05:05,410 --> 00:05:07,640
was, and two) the fact that it's like, wait,

00:05:07,640 --> 00:05:09,810
really? It's like, that obvious that we can speed

00:05:09,810 --> 00:05:11,320
it up in this way?

00:05:11,320 --> 00:05:12,960
And so, what I want everybody to come away

00:05:12,960 --> 00:05:15,400
from this talk with, is, hopefully I can inspire

00:05:15,400 --> 00:05:18,320
you. So tomorrow or Monday or whenever you're back,

00:05:18,320 --> 00:05:20,070
you can sit down, you - that thing that's

00:05:20,070 --> 00:05:22,160
been annoying you for ages, that you just sort

00:05:22,160 --> 00:05:24,730
of take for granted. It's like, oh yeah, now

00:05:24,730 --> 00:05:26,320
it just takes a minute to boot up.

00:05:26,320 --> 00:05:27,420
Well, what are you gonna do? Hopefully I can

00:05:27,420 --> 00:05:28,980
inspire you to sit down and take another look

00:05:28,980 --> 00:05:31,660
at it. That's really what this talk is about.

00:05:31,660 --> 00:05:36,020
So, let's start with my first example. I know

00:05:36,020 --> 00:05:38,820
this isn't a Rails conference, but does this resonate

00:05:38,820 --> 00:05:41,240
with anybody?

00:05:41,240 --> 00:05:42,380
Just checking.

00:05:42,380 --> 00:05:46,030
So, this is not Rails specific. It just happens

00:05:46,030 --> 00:05:48,050
that I, it happens to be a good project

00:05:48,050 --> 00:05:51,060
to demonstrate some of these techniques on. So Rails

00:05:51,060 --> 00:05:52,370
boot time is slow. I've had this problem so

00:05:52,370 --> 00:05:54,020
many times.

00:05:54,020 --> 00:05:56,820
So let's sit down and figure out. We'll hypothesize

00:05:56,820 --> 00:05:59,050
- well, what does it do? What could possibly

00:05:59,050 --> 00:06:02,580
be slow? We'll isolate it, figure out which bits

00:06:02,580 --> 00:06:04,750
are slow, and then figure out how to instrument

00:06:04,750 --> 00:06:07,120
it and measure.

00:06:07,120 --> 00:06:09,050
So what does Rails do at start-up?

00:06:09,050 --> 00:06:11,880
Load Bundler and gems. Loads up the Rails framework.

00:06:11,880 --> 00:06:15,290
Runs your initializers. I guess it's, maybe starts a

00:06:15,290 --> 00:06:16,520
server.

00:06:16,520 --> 00:06:19,060
But, this is kind of basically it, right. This

00:06:19,060 --> 00:06:21,590
is like three seconds of work, right. Being like,

00:06:21,590 --> 00:06:22,630
well I guess it does that, I guess it

00:06:22,630 --> 00:06:23,880
does that. Like, I guess it does that.

00:06:23,880 --> 00:06:26,660
So, OK, well that's a good place to start,

00:06:26,660 --> 00:06:28,220
right. So let's, let's see if we can isolate

00:06:28,220 --> 00:06:30,580
those things. This is the really, this is my

00:06:30,580 --> 00:06:33,160
favorite way to do an initial test of something.

00:06:33,160 --> 00:06:35,910
Just time Ruby require some stuff. Run some code

00:06:35,910 --> 00:06:38,570
Turns out in this case that everything is slow.

00:06:38,570 --> 00:06:41,280
Which is good. It's good. It means there's plenty

00:06:41,280 --> 00:06:43,380
of places to look, right. And this is on

00:06:43,380 --> 00:06:46,050
a fairly smallish Rails app. It doesn't really do

00:06:46,050 --> 00:06:49,910
anything. The - I actually, I have a number

00:06:49,910 --> 00:06:51,710
of different Rails apps. All the, the these numbers

00:06:51,710 --> 00:06:54,540
are not consistent across slides, because I switch between

00:06:54,540 --> 00:06:54,890
apps.

00:06:54,890 --> 00:06:58,450
Because they all have something different to show. But,

00:06:58,450 --> 00:07:01,870
so this is the first way to isolate. Second

00:07:01,870 --> 00:07:04,490
way to isolate - this is my favorite thing

00:07:04,490 --> 00:07:07,750
about Ruby and scripting languages, is you can just

00:07:07,750 --> 00:07:09,750
throw a thing in the global namespace and go

00:07:09,750 --> 00:07:12,000
and iterate throughout your code, right.

00:07:12,000 --> 00:07:13,190
Obviously this is not something that you would share

00:07:13,190 --> 00:07:15,500
with anybody. You wouldn't ship it to production. But

00:07:15,500 --> 00:07:17,130
doing this sort of thing, where, you know, you

00:07:17,130 --> 00:07:18,750
come up with a time stamp, write a method

00:07:18,750 --> 00:07:20,330
to put it out, and then you can just

00:07:20,330 --> 00:07:22,480
go in and start putting, like, snares all through

00:07:22,480 --> 00:07:23,700
your code.

00:07:23,700 --> 00:07:25,960
This, I find, is a really great way to

00:07:25,960 --> 00:07:29,780
just jump into a problem. The other - the

00:07:29,780 --> 00:07:31,510
other issue I see, like, when I'm coming into

00:07:31,510 --> 00:07:33,390
a problem, it, it can seem kind of intimidating.

00:07:33,390 --> 00:07:35,440
Like, Rails - I don't really know how it

00:07:35,440 --> 00:07:37,940
all works. I don't really know what everything's doing.

00:07:37,940 --> 00:07:40,670
But I can jump in and put put stamp

00:07:40,670 --> 00:07:41,970
code with the best of them, right. Like it's,

00:07:41,970 --> 00:07:44,490
this is what I call the naive approach.

00:07:44,490 --> 00:07:46,680
And this is my way of discovering a code

00:07:46,680 --> 00:07:48,740
base and of figuring it out. Now the, there

00:07:48,740 --> 00:07:51,220
are some advance profiles that'll sort of do this

00:07:51,220 --> 00:07:53,110
automatically for all of your methods, and I'll talk

00:07:53,110 --> 00:07:55,720
about them later. But that can also be kind

00:07:55,720 --> 00:07:58,050
of overwhelming, right. You get like these massive trays

00:07:58,050 --> 00:08:00,610
of like, here is every method execution ever, and

00:08:00,610 --> 00:08:01,950
you're like, ahhh!

00:08:01,950 --> 00:08:04,130
Whereas this you can just go in and say

00:08:04,130 --> 00:08:06,540
OK, well, we're booting, we're doing some Rails, we're

00:08:06,540 --> 00:08:08,960
doing some Bundle stuff, et cetera, et cetera, et

00:08:08,960 --> 00:08:10,630
cetera. What's also cool about this is it helps

00:08:10,630 --> 00:08:13,030
you figure out where in the code things are

00:08:13,030 --> 00:08:15,250
happening. So if you don't know about the caller

00:08:15,250 --> 00:08:17,400
method in Ruby, you need to learn it, because

00:08:17,400 --> 00:08:19,190
this is the other best thing in Ruby.

00:08:19,190 --> 00:08:20,940
I have a couple of best things in Ruby,

00:08:20,940 --> 00:08:24,560
and caller, combined with the fact, so caller will

00:08:24,560 --> 00:08:26,650
give you the stacked trays of the current spot

00:08:26,650 --> 00:08:32,120
where you are. Then you can copy this line,

00:08:32,120 --> 00:08:33,680
open it up in your editor, and it's like

00:08:33,680 --> 00:08:36,979
some gem somewhere, whatever - change it, rerun your

00:08:36,979 --> 00:08:37,329
code.

00:08:37,329 --> 00:08:39,360
This is amazing. You could just go in and

00:08:39,360 --> 00:08:42,459
change third-party libraries on the fly. Which is really,

00:08:42,459 --> 00:08:46,120
really scary, but really, really useful in development.

00:08:46,120 --> 00:08:50,220
So here is an example. So initializers. So Rails

00:08:50,220 --> 00:08:53,350
takes every file in a directory, runs each one

00:08:53,350 --> 00:08:54,460
of them on through. And so, this does take

00:08:54,460 --> 00:08:57,240
a little awhile, so I thought, oh well, I

00:08:57,240 --> 00:08:59,830
could go into every initializer I have and stamp,

00:08:59,830 --> 00:09:02,960
stamp, stamp, stamp, stamp. But I could just do

00:09:02,960 --> 00:09:06,880
puts caller, find the full loop that's running over

00:09:06,880 --> 00:09:08,900
the, the code. Like yes it's in Rails internal,

00:09:08,900 --> 00:09:11,230
but I can probably recognize a for loop when

00:09:11,230 --> 00:09:12,560
I see it.

00:09:12,560 --> 00:09:15,000
And, and then I could just put some extra

00:09:15,000 --> 00:09:18,900
stuff in there. And this was really interesting. So

00:09:18,900 --> 00:09:21,950
I did this on - actually this is one

00:09:21,950 --> 00:09:22,760
of the first things that I did two and

00:09:22,760 --> 00:09:25,260
a half years ago at Square, where I went

00:09:25,260 --> 00:09:28,170
and I did this follow down initializers. And something

00:09:28,170 --> 00:09:30,260
really stood out at me. And there's one here

00:09:30,260 --> 00:09:31,850
that you'll notice - it's taking about four or

00:09:31,850 --> 00:09:34,310
five seconds for an initializer to run.

00:09:34,310 --> 00:09:37,480
That's kind of a long time. Seems like too

00:09:37,480 --> 00:09:39,360
long a time, right. And I actually went in

00:09:39,360 --> 00:09:40,860
and it turned out that we were shelling out

00:09:40,860 --> 00:09:42,620
to a Bundle exec, so it was reloading the

00:09:42,620 --> 00:09:44,840
Rails environment again. It was like, oh, well, we

00:09:44,840 --> 00:09:47,240
just don't - we can just not do that.

00:09:47,240 --> 00:09:48,790
And that sped this up quite considerably.

00:09:48,790 --> 00:09:52,550
I have since either run this or advocated other

00:09:52,550 --> 00:09:55,980
people do this, just this, literally exactly this. Like,

00:09:55,980 --> 00:09:59,380
open up the Rails code, print stuff out, and

00:09:59,380 --> 00:10:03,580
like, sixty-percent of people find just stuff there that's

00:10:03,580 --> 00:10:04,270
slow.

00:10:04,270 --> 00:10:07,010
My favorite was, there was an app that, they

00:10:07,010 --> 00:10:09,020
were using ZooKeeper, but they were just using it

00:10:09,020 --> 00:10:12,170
in production, some force coordination stuff. But in development,

00:10:12,170 --> 00:10:14,750
they were trying to connect to ZooKeeper. Which wasn't

00:10:14,750 --> 00:10:15,930
there. So it would time out.

00:10:15,930 --> 00:10:18,170
Then it would try again. It would time out.

00:10:18,170 --> 00:10:19,490
Then it would try a third time, before it

00:10:19,490 --> 00:10:21,170
would continue on. So the route was taking ages

00:10:21,170 --> 00:10:22,730
to start up. And with this it was sort

00:10:22,730 --> 00:10:24,880
of kind of obvious what was going on.

00:10:24,880 --> 00:10:26,520
So if you run a Rails app, you should

00:10:26,520 --> 00:10:31,340
do this. If you haven't already. That's, it's, you'll

00:10:31,340 --> 00:10:32,500
find something.

00:10:32,500 --> 00:10:34,630
Quick aside. I think Rails should do this by

00:10:34,630 --> 00:10:36,800
default for you and log slow stuff. Submit a

00:10:36,800 --> 00:10:40,320
poll request if you think so too. Just check

00:10:40,320 --> 00:10:40,730
out.

00:10:40,730 --> 00:10:44,080
Big part of this, big class of performance problem

00:10:44,080 --> 00:10:46,610
is not actually a performance problem but a visibility

00:10:46,610 --> 00:10:48,650
problem. Somebody said this to me, and I can't

00:10:48,650 --> 00:10:50,570
remember who it was, and I can't find it

00:10:50,570 --> 00:10:51,750
on my Twitter.

00:10:51,750 --> 00:10:53,630
But, there's performance problems where you have to go

00:10:53,630 --> 00:10:55,810
in and change algorithms. And there's just visibility problems,

00:10:55,810 --> 00:10:58,110
where you're doing something stupid, but you don't know

00:10:58,110 --> 00:11:00,330
about it. And this is what I consider the

00:11:00,330 --> 00:11:02,029
class of visibility problem.

00:11:02,029 --> 00:11:03,850
And there's actually a large class of things that

00:11:03,850 --> 00:11:06,090
are slow. It's that, you don't know what's going

00:11:06,090 --> 00:11:08,730
on. We had a deployment tool at Square that,

00:11:08,730 --> 00:11:13,610
that's written in Ruby, and it was slow when

00:11:13,610 --> 00:11:15,950
you ran it. And it turned out that it

00:11:15,950 --> 00:11:17,890
was like doing some get operations that we could

00:11:17,890 --> 00:11:20,320
optimize. But the biggest - that was really obvious

00:11:20,320 --> 00:11:22,230
once we just put in some logging around, well,

00:11:22,230 --> 00:11:23,510
OK, what am I doing now? What am I

00:11:23,510 --> 00:11:24,540
doing now?

00:11:24,540 --> 00:11:27,840
So making, if you, whenever you have long pauses

00:11:27,840 --> 00:11:30,850
of anything, it should be logging. Your app should

00:11:30,850 --> 00:11:32,680
log what it's doing so you can find this

00:11:32,680 --> 00:11:35,760
stuff without even having to go looking for it.

00:11:35,760 --> 00:11:39,720
So that's, so that's kind of the obvious stuff,

00:11:39,720 --> 00:11:41,750
right. So far we haven't talked about anything hard

00:11:41,750 --> 00:11:45,810
or anything difficult. Put statements and finding stupid things.

00:11:45,810 --> 00:11:47,370
So you crunch on that a little while. Hopefully

00:11:47,370 --> 00:11:53,160
you'll find something. Then you get down into the

00:11:53,160 --> 00:11:55,220
kind of trickier situations. And you start having to

00:11:55,220 --> 00:11:56,890
do the other thing, where you need to prove

00:11:56,890 --> 00:11:58,570
that things are fast.

00:11:58,570 --> 00:12:00,640
So when you hypothesize if a thing is slow,

00:12:00,640 --> 00:12:02,140
that's great. Maybe you can prove that it's slow.

00:12:02,140 --> 00:12:04,000
But if you can't find what's slow, you then

00:12:04,000 --> 00:12:05,790
need to take the opposite approach and start, figure

00:12:05,790 --> 00:12:07,529
out, OK, well what's fast?

00:12:07,529 --> 00:12:09,890
And how do I guarantee, how can I prove

00:12:09,890 --> 00:12:11,930
that this is fast? And so the most obvious

00:12:11,930 --> 00:12:13,690
one for me was when you're loading up an

00:12:13,690 --> 00:12:16,180
app, was, well, let's prove that require is fast.

00:12:16,180 --> 00:12:19,250
Just requiring files. So you can do this -

00:12:19,250 --> 00:12:22,300
there's a library, probably most people are familiar with,

00:12:22,300 --> 00:12:26,160
called benchmark in the standard library. It's really simple.

00:12:26,160 --> 00:12:27,220
It just, you don't even need to use it.

00:12:27,220 --> 00:12:28,779
It just loops over your code a number of

00:12:28,779 --> 00:12:30,740
times to tell you how long it took to

00:12:30,740 --> 00:12:31,430
run.

00:12:31,430 --> 00:12:34,420
In this case here, I'm creating ten thousand files

00:12:34,420 --> 00:12:37,380
in the file system, and then requiring it in

00:12:37,380 --> 00:12:39,010
terms of like, I'm requiring 500, then 1,000, then

00:12:39,010 --> 00:12:40,740
1,500, then 2,000. Just to see, you know, if

00:12:40,740 --> 00:12:44,240
there's any change between small, large, whatever.

00:12:44,240 --> 00:12:47,630
And of course this is gonna be really superfast,

00:12:47,630 --> 00:12:50,900
because this is CRuby and that's awesome. And then

00:12:50,900 --> 00:12:53,070
I ran it and I was like - well,

00:12:53,070 --> 00:12:55,870
so it's, we got twenty-five thousand- twenty-five hundred files.

00:12:55,870 --> 00:12:58,060
And they're not doing anything and it's taking a

00:12:58,060 --> 00:13:00,060
second, a bit over a second to load. And

00:13:00,060 --> 00:13:04,550
that's a long time in computer, in computer-y times.

00:13:04,550 --> 00:13:07,060
So anyway, the top one is the benchmark output.

00:13:07,060 --> 00:13:10,540
The bottom one is a Ruby one-liner trying to

00:13:10,540 --> 00:13:12,620
be a bash one liner, except it doesn't bash

00:13:12,620 --> 00:13:15,420
very well. And Ruby's really good at one-liners. You

00:13:15,420 --> 00:13:16,810
just make a CSV, which we can then graph,

00:13:16,810 --> 00:13:19,740
and when I put a graph, like this, now

00:13:19,740 --> 00:13:22,630
it's starting to look pretty scary to me.

00:13:22,630 --> 00:13:23,600
This is the thing that I was trying to

00:13:23,600 --> 00:13:25,690
prove is fast, turned out, actually it's looking kind

00:13:25,690 --> 00:13:29,370
of slow. So, sorry the colors on this are

00:13:29,370 --> 00:13:31,290
terrible, but the top one, the top line is

00:13:31,290 --> 00:13:35,950
1 point 9, Ruby 1.9, load time, the bottom

00:13:35,950 --> 00:13:37,510
one is 1.8.7.

00:13:37,510 --> 00:13:39,540
And there are two things that are horrifying about

00:13:39,540 --> 00:13:44,230
this graph. The first one is that kind of

00:13:44,230 --> 00:13:46,690
exponential-like curve, right. Whenever you see this sort of

00:13:46,690 --> 00:13:50,420
exponential curve, you should kind of get scared. There

00:13:50,420 --> 00:13:53,680
are very few computer-y problems that we deal with

00:13:53,680 --> 00:13:55,860
day to day that should exhibit this sort of

00:13:55,860 --> 00:13:57,130
behavior. They should be relatively flat.

00:13:57,130 --> 00:13:59,430
And the second one that was interesting to me

00:13:59,430 --> 00:14:04,710
was the large gap between 1.8.7 and 1.9.

00:14:04,710 --> 00:14:09,720
So my Rails at the time was about twenty-three

00:14:09,720 --> 00:14:13,610
hundred files. So another interesting Ruby thing, you can

00:14:13,610 --> 00:14:16,029
just monkey patch require if you want to measure

00:14:16,029 --> 00:14:20,250
stuff. That was kind of neat. So twenty-three hundred,

00:14:20,250 --> 00:14:22,910
which was taking about, you know, a second.

00:14:22,910 --> 00:14:25,350
And I thought this was particularly interesting, because 1.8.7,

00:14:25,350 --> 00:14:26,899
if you look at it, has the same performance

00:14:26,899 --> 00:14:30,040
curve, but the absolute numbers, so the y scale

00:14:30,040 --> 00:14:32,890
is over here is about 200 milliseconds for 1.8.7.

00:14:32,890 --> 00:14:34,920
So it's like, oh, maybe just nobody's noticed this

00:14:34,920 --> 00:14:37,210
before. This was in the fairly early days of

00:14:37,210 --> 00:14:37,899
1.9.

00:14:37,899 --> 00:14:42,120
So I was definitely noticing this one second load.

00:14:42,120 --> 00:14:45,240
So the curve was scary and the difference between

00:14:45,240 --> 00:14:48,670
1.8.7 and 1.9 was pretty scary. Now when you,

00:14:48,670 --> 00:14:50,350
when you think about that, it kind of makes

00:14:50,350 --> 00:14:52,490
sense. The require behavior in 1.9 is much more

00:14:52,490 --> 00:14:56,410
sensible. It resolves relative paths for you, it's case

00:14:56,410 --> 00:14:58,520
intensive. It's really nice. So it is doing extra

00:14:58,520 --> 00:15:00,440
work, so it is justified in taking some extra

00:15:00,440 --> 00:15:02,160
time.

00:15:02,160 --> 00:15:05,680
But this was too much for me. So, anyway.

00:15:05,680 --> 00:15:08,810
Now, now we're at a place that's really, really

00:15:08,810 --> 00:15:14,220
scary. Because require is slow, and that's CRuby, and

00:15:14,220 --> 00:15:16,420
that's C code, and I don't know a thing

00:15:16,420 --> 00:15:19,110
about C code. I'm a Ruby programmer who just

00:15:19,110 --> 00:15:22,300
writes Ruby everyday. And so this for me is

00:15:22,300 --> 00:15:23,870
kind of like the take a brig- take a

00:15:23,870 --> 00:15:25,890
big breath moment, right. And I have to talk

00:15:25,890 --> 00:15:28,770
myself up and so I started with this sort

00:15:28,770 --> 00:15:31,520
of mantra of believe you can find something, right.

00:15:31,520 --> 00:15:33,149
This is, you know, I wake up and I

00:15:33,149 --> 00:15:34,720
repeat it to myself five times every morning. It's,

00:15:34,720 --> 00:15:36,520
it's that sort of mantra. And I have another

00:15:36,520 --> 00:15:39,100
one as well, which I use. Which is this

00:15:39,100 --> 00:15:42,730
one: Computers are really stupid. They only do what

00:15:42,730 --> 00:15:46,850
you tell them. And C code, it's still just

00:15:46,850 --> 00:15:50,190
code, right. There's function calls, there's variable assignments. I

00:15:50,190 --> 00:15:52,670
can, you know, if I take a deep breath

00:15:52,670 --> 00:15:56,120
and just, like, look in, I'm gonna feel a

00:15:56,120 --> 00:15:58,750
little bit like this guy. But I can probably

00:15:58,750 --> 00:15:59,860
figure something out.

00:15:59,860 --> 00:16:03,050
At least, that's, that's what I believe before I

00:16:03,050 --> 00:16:06,740
open up the require code in Ruby and then

00:16:06,740 --> 00:16:08,380
close my laptop and ahgahah!

00:16:08,380 --> 00:16:10,810
It's all right, it's all right. Take a deep

00:16:10,810 --> 00:16:13,470
breath. It's just C code. It's just unfamiliar. I

00:16:13,470 --> 00:16:15,850
can work with this.

00:16:15,850 --> 00:16:17,800
And this actually took quite a bit of time

00:16:17,800 --> 00:16:20,310
for me. It was like, calming myself down enough

00:16:20,310 --> 00:16:22,560
where I could read through this, figure out what

00:16:22,560 --> 00:16:25,350
was going on. A big part of what I

00:16:25,350 --> 00:16:27,170
did was say, OK well, I know it's slow.

00:16:27,170 --> 00:16:29,339
I don't know exactly where- why it's slow, or

00:16:29,339 --> 00:16:31,959
where it's slow. But I can just try, like,

00:16:31,959 --> 00:16:35,740
commenting out some code branches and see what happens.

00:16:35,740 --> 00:16:38,540
Seriously. This is a really good strategy.

00:16:38,540 --> 00:16:39,730
So I actually got to a point where I

00:16:39,730 --> 00:16:41,970
could require basic files with none of the extra

00:16:41,970 --> 00:16:44,959
fancy 1.9 stuff, and got it down to 1.8.7

00:16:44,959 --> 00:16:48,589
performance. Like, OK, well, now I know like, this

00:16:48,589 --> 00:16:50,430
is my naive approach that I started with, right.

00:16:50,430 --> 00:16:52,899
Just go in, just doing stupid stuff. But it's

00:16:52,899 --> 00:16:55,000
like, obviously not going to work.

00:16:55,000 --> 00:16:56,709
But it, it helps you figure out what's going

00:16:56,709 --> 00:16:58,440
on, it gets you involved in the code, and

00:16:58,440 --> 00:17:00,649
you know, you start seeing patterns. You start, you

00:17:00,649 --> 00:17:02,800
know, being able to figure out what's going on.

00:17:02,800 --> 00:17:05,649
And there's some really neat optimizations in here. For

00:17:05,649 --> 00:17:07,750
instance, like if you require a file in Ruby,

00:17:07,750 --> 00:17:09,990
I, it looks for an rb extension, sometimes it

00:17:09,990 --> 00:17:12,230
also looks for a dot SO extension, right. And

00:17:12,230 --> 00:17:13,779
so, naively you could say, well give me all

00:17:13,779 --> 00:17:15,669
the files and then check, OK, is this an

00:17:15,669 --> 00:17:17,470
rb one or an SO. No, let's move to

00:17:17,470 --> 00:17:19,230
the next file, move to the next file.

00:17:19,230 --> 00:17:23,019
Except, whoever requires an SO file? Like, basically nobody.

00:17:23,019 --> 00:17:24,759
And so there's some code in here. This is,

00:17:24,759 --> 00:17:28,600
this is old 1.9. It's not the latest anymore.

00:17:28,600 --> 00:17:29,690
But there's some code in here that say well

00:17:29,690 --> 00:17:31,940
go through all the Ruby files first, and then

00:17:31,940 --> 00:17:35,059
start looking for SO files. Which is, you know,

00:17:35,059 --> 00:17:35,749
pretty sensible.

00:17:35,749 --> 00:17:37,940
So this is actually a pretty good read. My,

00:17:37,940 --> 00:17:39,690
part of my approach for this is I really

00:17:39,690 --> 00:17:41,940
like to rewrite what I'm seeing in something that

00:17:41,940 --> 00:17:43,629
I'm familiar with. So I went through and I

00:17:43,629 --> 00:17:46,330
rewrote this in Ruby, or I rewrote the essence

00:17:46,330 --> 00:17:47,399
of it in Ruby.

00:17:47,399 --> 00:17:50,850
What does the require algorithm look like in 1.8.7

00:17:50,850 --> 00:17:54,409
and 1.9? And I came up with this. Which

00:17:54,409 --> 00:17:56,789
says, OK, well if you're gonna load a file,

00:17:56,789 --> 00:17:58,440
make sure we haven't loaded it already by iterating

00:17:58,440 --> 00:18:03,139
through all the existing files, and then, then loading

00:18:03,139 --> 00:18:05,669
it and adding it to the end. Now, this

00:18:05,669 --> 00:18:08,669
doesn't account for all of the, the exponential thing,

00:18:08,669 --> 00:18:10,399
but even just looking at this, you should be

00:18:10,399 --> 00:18:12,220
able to see, OK, well, I could probably make

00:18:12,220 --> 00:18:15,039
an algorithmic change here to use a hash or

00:18:15,039 --> 00:18:17,129
a set rather than an array, and that should

00:18:17,129 --> 00:18:19,110
speed things up quite considerably, right.

00:18:19,110 --> 00:18:22,200
And so that's, that was my, that was my

00:18:22,200 --> 00:18:26,519
game plan. I was gonna change loaded to be

00:18:26,519 --> 00:18:29,489
a hash. Now - so I wrote up a

00:18:29,489 --> 00:18:31,409
proof of concept of this. It was terrible C

00:18:31,409 --> 00:18:34,210
code. It changed like every line in the file.

00:18:34,210 --> 00:18:36,529
And the Ruby guy's like, we can't apply that,

00:18:36,529 --> 00:18:38,429
which is totally justified. I wouldn't have done that

00:18:38,429 --> 00:18:38,629
either.

00:18:38,629 --> 00:18:39,759
But I was able to run this on our

00:18:39,759 --> 00:18:42,610
app, just as an RVM hash set, and drop

00:18:42,610 --> 00:18:49,610
out, drop out load time from about seventy-eight seconds

00:18:52,179 --> 00:18:55,529
down to ten using this patch. So that was

00:18:55,529 --> 00:18:57,340
pretty cool.

00:18:57,340 --> 00:19:00,799
Thankfully the Ruby guys said, well, we're not gonna

00:19:00,799 --> 00:19:02,840
take your patch. We'll write a better one. And

00:19:02,840 --> 00:19:05,720
they did, and as you can see now require

00:19:05,720 --> 00:19:08,470
for 9.2 is now much, much faster than it

00:19:08,470 --> 00:19:11,039
used to be. So that's awesome. And it's also

00:19:11,039 --> 00:19:14,730
looking much flatter, which is really cool.

00:19:14,730 --> 00:19:18,179
So anyway. That's, that was my experience with CRuby.

00:19:18,179 --> 00:19:23,080
The next one I wanted to talk about was,

00:19:23,080 --> 00:19:24,190
was this problem.

00:19:24,190 --> 00:19:27,149
So, is anybody - does this resonate with anybody?

00:19:27,149 --> 00:19:30,739
Yeah, so, my, my problem here is actually different

00:19:30,739 --> 00:19:32,519
to what most people experience. Most people when this

00:19:32,519 --> 00:19:34,779
is, they're doing integration testing, you know, something like

00:19:34,779 --> 00:19:38,059
that. My problem was my unit tests are slow.

00:19:38,059 --> 00:19:39,840
And when I say unit tests, I'm talking about

00:19:39,840 --> 00:19:41,629
they're not doing any database access, they're not doing

00:19:41,629 --> 00:19:43,999
any file or network. It's just a file of

00:19:43,999 --> 00:19:46,289
code that was taking too long.

00:19:46,289 --> 00:19:48,539
And this is where, like, when I said I

00:19:48,539 --> 00:19:51,389
really hate slow things, like I really hate slow

00:19:51,389 --> 00:19:53,610
things. I had unit tests that I thought should

00:19:53,610 --> 00:19:54,629
have been taking no more than a millisecond. They

00:19:54,629 --> 00:19:58,350
were taking ten milliseconds. Which is unacceptable.

00:19:58,350 --> 00:20:02,200
So I thought, OK, well, I can look at

00:20:02,200 --> 00:20:04,330
this, you know, believe I'm gonna go in and

00:20:04,330 --> 00:20:06,629
find a peach. This was RSpec. This was kind

00:20:06,629 --> 00:20:08,139
of scary at the time. Hadn't really dealt with

00:20:08,139 --> 00:20:13,059
that before. But, applying these three steps, hypothesize, isolate,

00:20:13,059 --> 00:20:15,649
instrument, figure out what's going on.

00:20:15,649 --> 00:20:18,580
So what is my RSpec test do?

00:20:18,580 --> 00:20:22,109
Create some doubles. That's fine. It does some varifying

00:20:22,109 --> 00:20:24,019
things which should be normal things in Unit Specs

00:20:24,019 --> 00:20:26,960
with RSpec Fire - which if you're not familiar

00:20:26,960 --> 00:20:29,720
with, allows you to stub stuff in a fairly

00:20:29,720 --> 00:20:32,980
safe manner. If your things are loaded, so you

00:20:32,980 --> 00:20:34,509
- it basically stops you from making stubs that

00:20:34,509 --> 00:20:35,119
are just totally made up.

00:20:35,119 --> 00:20:38,720
And we actually just rolled this into RSpec 3,

00:20:38,720 --> 00:20:42,330
which we released the offer of yesterday. Which is,

00:20:42,330 --> 00:20:44,090
sorry, the better of. We changed what we're gonna

00:20:44,090 --> 00:20:46,039
call it. Cause it's actually much more better, it's

00:20:46,039 --> 00:20:48,609
much better than Alpha. It's definitely a beta.

00:20:48,609 --> 00:20:50,659
You should try that out. If you wanted help

00:20:50,659 --> 00:20:53,200
with that, there's a number of RSpec guys around.

00:20:53,200 --> 00:20:54,519
We can help you out. But it's a really

00:20:54,519 --> 00:20:56,470
good release. So, and it has all the stuff

00:20:56,470 --> 00:20:58,480
that I'm about to talk about in it.

00:20:58,480 --> 00:21:01,090
So if you're really annoyed at your 10 millisecond

00:21:01,090 --> 00:21:04,629
unit specs, you can go into RSpec 3.

00:21:04,629 --> 00:21:07,639
And it does some expectation matches. I've actually found

00:21:07,639 --> 00:21:09,519
performance improvements in all three of these, but I'm

00:21:09,519 --> 00:21:11,929
gonna talk about double creation to start with.

00:21:11,929 --> 00:21:13,759
So the first thing we do is we isolate.

00:21:13,759 --> 00:21:18,570
WE say, OK, well, there's not really that many

00:21:18,570 --> 00:21:20,309
parameters when you create a double. There's pretty much

00:21:20,309 --> 00:21:23,429
the number of attributes that you have. And so

00:21:23,429 --> 00:21:25,850
I create the spec that, you know, once again,

00:21:25,850 --> 00:21:27,570
it's normal, but a thousand times it'll create a

00:21:27,570 --> 00:21:31,009
double with zero attributes. Then with one attribute, then

00:21:31,009 --> 00:21:33,399
two attributes, and then three, right.

00:21:33,399 --> 00:21:38,330
And this is the graph, this is what it

00:21:38,330 --> 00:21:38,639
looks like. Two things - one the curve looks

00:21:38,639 --> 00:21:41,700
kind of terrible. And three, we're creating a thousand

00:21:41,700 --> 00:21:44,720
doubles with nine attributes, which in my mind, well

00:21:44,720 --> 00:21:47,269
it's not really doing very much. It's taking about

00:21:47,269 --> 00:21:49,960
three second. That's a lot of computer time.

00:21:49,960 --> 00:21:52,600
So I was kind of offended by that. So

00:21:52,600 --> 00:21:54,519
I thought I'd go in and start poking around.

00:21:54,519 --> 00:21:55,850
Now I started with all the approaches that I've

00:21:55,850 --> 00:21:58,590
already talked about. But then, it gets to the

00:21:58,590 --> 00:22:00,350
point where, the one I was talking about was

00:22:00,350 --> 00:22:01,899
really useful when you have a log thing. You

00:22:01,899 --> 00:22:03,889
use log stuff and figure it out.

00:22:03,889 --> 00:22:06,619
This is, you know, much smaller time frame. Much

00:22:06,619 --> 00:22:09,379
harder to find, much harder to tease out patterns

00:22:09,379 --> 00:22:11,809
using that thing. So this is where I switch

00:22:11,809 --> 00:22:14,590
to using RubyProf, which is a tool that instruments

00:22:14,590 --> 00:22:16,799
all of you methods automatically, and gives you a

00:22:16,799 --> 00:22:18,539
really sweet call stack.

00:22:18,539 --> 00:22:21,700
Now, I want to emphasize this is the first

00:22:21,700 --> 00:22:24,600
time in the talk that I've mentioned a tool

00:22:24,600 --> 00:22:26,809
at all. Up until now, it's just been me

00:22:26,809 --> 00:22:29,330
talking about how I do this. I want everybody

00:22:29,330 --> 00:22:33,320
to remember that. You don't need tools to speed

00:22:33,320 --> 00:22:36,570
things up. Sometimes they help, sometimes they're useful. But

00:22:36,570 --> 00:22:39,519
you really need to approach it without them, and

00:22:39,519 --> 00:22:41,450
you know, don't let, don't let not knowing a

00:22:41,450 --> 00:22:44,480
tool scare you away from this.

00:22:44,480 --> 00:22:46,600
So this call stack graph, I obviously don't expect

00:22:46,600 --> 00:22:47,710
you to read all of it. But it gives

00:22:47,710 --> 00:22:51,409
you the amount of time spent in each of

00:22:51,409 --> 00:22:53,809
these different methods - nested. The interesting ones to

00:22:53,809 --> 00:22:56,259
me - there's a lot of stuff going on

00:22:56,259 --> 00:22:59,369
in here, which seems like a lot to me.

00:22:59,369 --> 00:23:01,730
And more interesting, there's a call down here to

00:23:01,730 --> 00:23:03,249
kernal dot caller, which is that awesome method I

00:23:03,249 --> 00:23:05,070
showed you earlier that shows the back trace.

00:23:05,070 --> 00:23:08,700
We're calling that 5,000 times. Now we've got a

00:23:08,700 --> 00:23:11,749
double that we're declaring. So this is - sorry.

00:23:11,749 --> 00:23:15,429
A thousand creations with five attributes. So we're creating

00:23:15,429 --> 00:23:17,489
a double in one spot and for that double

00:23:17,489 --> 00:23:18,789
we're calling call-all, which is going to give the

00:23:18,789 --> 00:23:21,909
same value as calling that five times.

00:23:21,909 --> 00:23:22,679
So I look at this and thought, I have

00:23:22,679 --> 00:23:25,629
no idea how this code works, why it exists,

00:23:25,629 --> 00:23:28,210
but I'm pretty sure that we should only call

00:23:28,210 --> 00:23:28,989
that a thousand times.

00:23:28,989 --> 00:23:31,029
Right, this is my naive approach. So the very

00:23:31,029 --> 00:23:33,359
first thing I did was pulled naive up, pulled

00:23:33,359 --> 00:23:36,999
the caller up, and I just called it a

00:23:36,999 --> 00:23:38,659
thousand times rather than five thousand.

00:23:38,659 --> 00:23:41,019
Five x improvement. It was amazing. Well, five x

00:23:41,019 --> 00:23:41,529
to that bit.

00:23:41,529 --> 00:23:44,230
And, so then I started thinking, OK, well why

00:23:44,230 --> 00:23:46,480
is call a slow. It's just giving me a

00:23:46,480 --> 00:23:49,200
back trace, right? And so I started poking around,

00:23:49,200 --> 00:23:51,799
I started - didn't quite get to the bottom

00:23:51,799 --> 00:23:54,570
of exactly why it's slow, but it's kind of

00:23:54,570 --> 00:23:57,029
because the Ruby VM like does some fancy stuff

00:23:57,029 --> 00:23:59,330
it needs to reconstruct it or magic - I'm

00:23:59,330 --> 00:24:00,369
sure there's people in the audience who know much

00:24:00,369 --> 00:24:02,029
more about that than I do.

00:24:02,029 --> 00:24:04,190
But one thing I did discover that was interesting,

00:24:04,190 --> 00:24:06,450
is there's a new argument to caller in more

00:24:06,450 --> 00:24:09,919
recent versions of Ruby where you cay, well don't

00:24:09,919 --> 00:24:11,629
give me the entire stack trace, only give me

00:24:11,629 --> 00:24:13,919
the first two lines, or the middle two lines,

00:24:13,919 --> 00:24:15,889
or something like that.

00:24:15,889 --> 00:24:18,119
And so I ran some benchmarks on this, because

00:24:18,119 --> 00:24:20,009
why we're doing it, in RSpec, which I found

00:24:20,009 --> 00:24:21,999
out after reading through it, was we're trying to

00:24:21,999 --> 00:24:24,830
get the first non RSpec backtrace line, to say,

00:24:24,830 --> 00:24:27,039
hey, this is where the error was in your

00:24:27,039 --> 00:24:27,389
code.

00:24:27,389 --> 00:24:30,899
And generally that's in the top two to seven

00:24:30,899 --> 00:24:33,850
bactrace lines. So I thought, well what if rather

00:24:33,850 --> 00:24:36,019
than pulling the entire backtrace and searching it, we

00:24:36,019 --> 00:24:37,929
did like a chunking algorithm, where we chunk down.

00:24:37,929 --> 00:24:40,609
And so I wrote that out. This is kind

00:24:40,609 --> 00:24:42,759
of what it looks line. Which, you know, it's

00:24:42,759 --> 00:24:45,570
about twenty percent faster. The common case it's much

00:24:45,570 --> 00:24:46,210
faster.

00:24:46,210 --> 00:24:49,619
So, I thought, that was a pretty cool find.

00:24:49,619 --> 00:24:50,600
And so that was an interesting thing I learnt

00:24:50,600 --> 00:24:54,330
about caller. The most interesting thing I learned was

00:24:54,330 --> 00:24:57,299
that, so you create a double with snapshot in

00:24:57,299 --> 00:24:57,970
the caller, so we can use it later -

00:24:57,970 --> 00:25:00,340
where, how can you close a failure?

00:25:00,340 --> 00:25:06,570
What, what would ever trigger that caller stack trace?

00:25:06,570 --> 00:25:09,330
Turns out, you can't. We were just using some

00:25:09,330 --> 00:25:11,679
of the generic RSpec infrastructure to create these doubles

00:25:11,679 --> 00:25:14,979
that used the caller, but in this particular case,

00:25:14,979 --> 00:25:16,470
it was never getting used. SO it was spending

00:25:16,470 --> 00:25:18,529
all this time to capture a variable that we

00:25:18,529 --> 00:25:19,210
never used.

00:25:19,210 --> 00:25:21,249
So in the end, after optimizing caller, I managed

00:25:21,249 --> 00:25:24,229
to just get rid of it completely, which initially

00:25:24,229 --> 00:25:26,470
made me fell kind of stupid, but then I

00:25:26,470 --> 00:25:27,729
was like, well, this is like, you start with

00:25:27,729 --> 00:25:30,299
a naive approach, you learn about the code, and

00:25:30,299 --> 00:25:32,190
then you know, you fix it up.

00:25:32,190 --> 00:25:35,489
And we use this elsewhere in RSpec anyway, so

00:25:35,489 --> 00:25:36,960
it still got faster.

00:25:36,960 --> 00:25:38,590
This is the same thing after I was done.

00:25:38,590 --> 00:25:40,479
The things to note are one, it's a lot

00:25:40,479 --> 00:25:43,269
simpler. Rather than using all the generic RSpec infrastructure,

00:25:43,269 --> 00:25:45,799
we added a new concept to make it easier.

00:25:45,799 --> 00:25:49,979
ANd there's no, there's, it doesnt'call out to caller.

00:25:49,979 --> 00:25:52,330
And that's what the graph looks like. It's pretty

00:25:52,330 --> 00:25:53,609
flat now.

00:25:53,609 --> 00:25:55,159
So that's kind of awesome.

00:25:55,159 --> 00:26:00,129
It's about a two or three x above, just

00:26:00,129 --> 00:26:02,169
using an ope- just using an open struct.

00:26:02,169 --> 00:26:04,539
So it's the same curve, just with a higher

00:26:04,539 --> 00:26:06,269
constant factor. So we can probably get a little

00:26:06,269 --> 00:26:07,929
better, but that's - eh, I'm feeling pretty good

00:26:07,929 --> 00:26:08,679
about that.

00:26:08,679 --> 00:26:12,129
Anyway, so I just mentioned RubyProf as one tool.

00:26:12,129 --> 00:26:15,309
But some other tools here, perftools, dtrace, strace. I

00:26:15,309 --> 00:26:16,509
haven't really used them very much so I'm not

00:26:16,509 --> 00:26:17,929
gonna speak about them. I'm just throwing some names

00:26:17,929 --> 00:26:20,799
up if you're interested. Some different things here -

00:26:20,799 --> 00:26:23,649
perftools is a sampling profiler. So RubyProf, you run

00:26:23,649 --> 00:26:25,859
it against code, it slows it down a lot.

00:26:25,859 --> 00:26:28,139
Cause it instruments it a lot. Perftools will just

00:26:28,139 --> 00:26:29,320
look at your code every now and then and

00:26:29,320 --> 00:26:30,450
be like, what are you doing now? What are

00:26:30,450 --> 00:26:31,590
you doing now? What are you doing now? It

00:26:31,590 --> 00:26:33,139
adds very little overhead.

00:26:33,139 --> 00:26:35,119
So in some cases you can actually run that

00:26:35,119 --> 00:26:35,940
in production, too.

00:26:35,940 --> 00:26:39,200
Strace you can track down system calls. If you

00:26:39,200 --> 00:26:41,229
want to see some cool graphs, search for dtrace

00:26:41,229 --> 00:26:42,729
and flame graphs and people have done some cool

00:26:42,729 --> 00:26:46,950
stuff visualizing the things, and this is also exposed

00:26:46,950 --> 00:26:49,879
in a Ruby 2 API. I think it's trace

00:26:49,879 --> 00:26:50,869
point - I think.

00:26:50,869 --> 00:26:54,269
I can't remember. but something like that. Anyway, just

00:26:54,269 --> 00:26:56,409
a dump of names for you to look into

00:26:56,409 --> 00:26:59,309
if you're interested.

00:26:59,309 --> 00:27:01,379
So that's, that's kind of my adventure and the

00:27:01,379 --> 00:27:03,940
things that I've learned about. Are there any, any

00:27:03,940 --> 00:27:08,309
questions about this? I've got a couple minutes left.

00:27:08,309 --> 00:27:10,479
Pretty straightforward then? Awesome.

00:27:10,479 --> 00:27:13,830
QUESTION: Yeah, I found the slides online at the

00:27:13,830 --> 00:27:16,690
beginning of the talk. Are they gonna be online

00:27:16,690 --> 00:27:17,759
at the end?

00:27:17,759 --> 00:27:19,269
X.S.: Yeah, yeah. I can do that. Yeah. There's

00:27:19,269 --> 00:27:19,700
some nice graphs in there.

00:27:19,700 --> 00:27:21,039
Yup, in the back.

00:27:21,039 --> 00:27:28,039
QUESTION: Have you given talks about [indecipherable - 00:27:30]

00:27:30,029 --> 00:27:34,549
X.S.: I- I did it, and they were like,

00:27:34,549 --> 00:27:38,779
this is great. Fix up some things. I did.

00:27:38,779 --> 00:27:41,389
Yeah. And then it - then I actually ended

00:27:41,389 --> 00:27:43,169
up getting more involved in the project. SO it

00:27:43,169 --> 00:27:45,879
was actually a good, a good way in. So

00:27:45,879 --> 00:27:49,229
I'm now a committer on RSpec. And helping out

00:27:49,229 --> 00:27:49,379
there a lot.

00:27:49,379 --> 00:27:50,769
It was, if you ever want to get, like,

00:27:50,769 --> 00:27:54,470
the, like, the best, most awesome code review you've

00:27:54,470 --> 00:27:57,099
had in your life, submit a poll request to

00:27:57,099 --> 00:28:00,100
RSpec. Get Maryn to look at it. That man

00:28:00,100 --> 00:28:02,369
- are you, is he here? Where is he?

00:28:02,369 --> 00:28:03,609
This man here. He seriously gives like the best

00:28:03,609 --> 00:28:05,200
code reviews. It's amazing.

00:28:05,200 --> 00:28:11,349
So I highly recommend - would submit again.

00:28:11,349 --> 00:28:14,619
Yes?

00:28:14,619 --> 00:28:18,609
QUESTION: How long did it take for you to

00:28:18,609 --> 00:28:18,859
X.S.: How long did it take for me to...

00:28:18,859 --> 00:28:22,099
QUESTION: To do the require refactoring.

00:28:22,099 --> 00:28:24,859
X.S.: The require refactoring? Most of my nights for

00:28:24,859 --> 00:28:25,629
two weeks.

00:28:25,629 --> 00:28:26,789
QUESTION: Two weeks?

00:28:26,789 --> 00:28:28,830
X.S.: A lot of that was just, like, figuring

00:28:28,830 --> 00:28:30,440
out - like, you know, an hour or two

00:28:30,440 --> 00:28:31,729
a night for a couple of weeks, just to

00:28:31,729 --> 00:28:35,559
figure out C code mostly. So. Yeah, I don't

00:28:35,559 --> 00:28:37,549
know. That's - if I was actually working full

00:28:37,549 --> 00:28:39,450
time on it, it would have been a lot

00:28:39,450 --> 00:28:40,149
quicker.

00:28:40,149 --> 00:28:44,979
Cool. All right. Well, to just quickly finish up.

00:28:44,979 --> 00:28:46,690
The things I want you to remember - one,

00:28:46,690 --> 00:28:49,590
the computer only does what you tell it, right.

00:28:49,590 --> 00:28:51,950
Just remember this, whenever you're like, getting scared or

00:28:51,950 --> 00:28:54,649
getting intimidated, you know, CRuby is still just C

00:28:54,649 --> 00:28:57,369
code, right.

00:28:57,369 --> 00:28:58,609
Might take some time, but you'll be able to

00:28:58,609 --> 00:29:00,840
figure it out. All just, it's all just function

00:29:00,840 --> 00:29:02,889
calls in the end.

00:29:02,889 --> 00:29:06,789
Believe you're gonna find something. You know, just visualize,

00:29:06,789 --> 00:29:08,489
visualize that looking, you know, how tasty that peach

00:29:08,489 --> 00:29:10,989
is gonna be. If you just believe you're gonna

00:29:10,989 --> 00:29:12,720
find something, you probably will.

00:29:12,720 --> 00:29:16,720
And these three things. Hypothesize. Isolate. And instrument.

00:29:17,340 --> 00:29:18,760

YouTube URL: https://www.youtube.com/watch?v=h9XzLJK3HVM


