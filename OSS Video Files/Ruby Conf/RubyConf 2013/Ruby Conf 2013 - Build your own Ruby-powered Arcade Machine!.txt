Title: Ruby Conf 2013 - Build your own Ruby-powered Arcade Machine!
Publication date: 2020-01-27
Playlist: RubyConf 2013
Description: 
	By Andrew Havens

Have you ever wished you could re-live the fun you had as a kid playing those arcade games? Have you ever wanted to learn 2D game programming with Ruby? Now is the time! The hardware is cheap. The libraries are easy to learn. This session will cover basic game programming techniques using Ruby, as well as the hardware and software you need in order to build and run your own Ruby-powered arcade machine.

Help us caption & translate this video!

http://amara.org/v/FG5A/
Captions: 
	00:00:16,000 --> 00:00:18,400
ANDREW HAVENS: Welcome to my talk,

00:00:18,480 --> 00:00:20,380
build your own Ruby-powered Arcade Machine.

00:00:20,380 --> 00:00:22,510
Thanks for being here. Before I start,

00:00:22,510 --> 00:00:26,170
n I get a show of hands who is here because

00:00:26,170 --> 00:00:32,710
ey're interested in arcade machine hardware? OK.

00:00:32,710 --> 00:00:34,250
And how many of you are here because you're

00:00:34,250 --> 00:00:40,630
interested in writing games with Ruby? OK.

00:00:40,630 --> 00:00:43,320
And who's here just because they thought this talk

00:00:43,320 --> 00:00:47,460
sounded cool? OK.

00:00:47,460 --> 00:00:49,800
And how many of you, how many - I'm

00:00:49,800 --> 00:00:53,580
curious, how many of you feel that you're proficient

00:00:53,580 --> 00:01:00,580
in C or C++ programming? OK. That's more than

00:01:00,780 --> 00:01:02,440
I thought.

00:01:02,440 --> 00:01:07,130
So, let me introduce myself. My name's Andrew Havens.

00:01:07,130 --> 00:01:10,450
I'm a senior software engineer at a company in

00:01:10,450 --> 00:01:16,619
Portland called Copious. Copious is a user-center digital product

00:01:16,619 --> 00:01:20,460
development firm. We build web and mobile applications that

00:01:20,460 --> 00:01:24,030
focus on user experience. Many of our apps we

00:01:24,030 --> 00:01:26,729
build are written in Ruby but we actually have

00:01:26,729 --> 00:01:30,020
nine officially supported languages. One of the things I

00:01:30,020 --> 00:01:32,659
love about working at Copious is the variety. I'm

00:01:32,659 --> 00:01:36,979
getting to work on all sorts of different projects.

00:01:36,979 --> 00:01:38,579
Copious made it possible for me to be here

00:01:38,579 --> 00:01:41,369
today so I'm grateful for their support and Portland

00:01:41,369 --> 00:01:42,859
is a great place to be a Ruby developer

00:01:42,859 --> 00:01:46,549
so if you're interested in moving to Portland, we

00:01:46,549 --> 00:01:49,670
have a number of job openings available. You can

00:01:49,670 --> 00:01:52,030
check out our website, copio dot us, or you

00:01:52,030 --> 00:01:56,630
can talk to me directly.

00:01:56,630 --> 00:01:59,280
So before I start my talk, let's play a

00:01:59,280 --> 00:02:06,280
game. I need two volunteers. You and you.

00:02:09,170 --> 00:02:15,650
Choose a player.

00:02:15,650 --> 00:02:22,330
All right. So the way this works is you're

00:02:22,330 --> 00:02:26,910
gonna push these outside buttons - don't do it

00:02:26,910 --> 00:02:28,830
yet. And you're gonna blow up the balloon as

00:02:28,830 --> 00:02:35,830
fast as you can until it pops. When I

00:02:36,330 --> 00:02:38,890
say go.

00:02:38,890 --> 00:02:45,890
On your mark, get set, go!

00:02:46,560 --> 00:02:49,110
AUDIENCE: Whoo!

00:02:49,110 --> 00:02:55,500
A.H.: All right. Good job.

00:02:55,500 --> 00:03:00,240
All right. So playing games is fun. That's the

00:03:00,240 --> 00:03:02,620
reason why we're here. We want to build games.

00:03:02,620 --> 00:03:07,130
Game programming is fun. And maybe you want to

00:03:07,130 --> 00:03:09,540
make some money making games, so I'll talk a

00:03:09,540 --> 00:03:11,700
little bit about all those different things.

00:03:11,700 --> 00:03:14,930
So first of all, first step is to build

00:03:14,930 --> 00:03:20,260
the arcade machine. First part is planning it out.

00:03:20,260 --> 00:03:21,580
If you're gonna be going to work building an

00:03:21,580 --> 00:03:23,740
arcade machine, you might as well plan it out.

00:03:23,740 --> 00:03:26,080
The first step is deciding on a, a cabinet

00:03:26,080 --> 00:03:28,980
format. So there's all sorts of different arcade cabinet

00:03:28,980 --> 00:03:31,590
formats.

00:03:31,590 --> 00:03:33,680
The first, probably the most popular, is the upright

00:03:33,680 --> 00:03:37,730
cabinet. You could build one from scratch. You can

00:03:37,730 --> 00:03:41,840
find a used on Craigslist and refurbish it. Maybe

00:03:41,840 --> 00:03:45,240
you want to create a sit-down cockpit cabinet for

00:03:45,240 --> 00:03:50,100
driving games or flight simulators. You could re-purpose an

00:03:50,100 --> 00:03:54,830
old two-player cocktail cabinet, or maybe you want to

00:03:54,830 --> 00:03:58,000
build a big four-player cocktail cabinet, invite all your

00:03:58,000 --> 00:04:03,220
friends over to play. Create this cute little bar-top

00:04:03,220 --> 00:04:06,870
arcade. You can just put a sunburst background on

00:04:06,870 --> 00:04:08,540
your, a picture of your arcade - make it

00:04:08,540 --> 00:04:13,130
so much cooler. Or if you're feeling really generous,

00:04:13,130 --> 00:04:18,049
you can build an arcade for your mom.

00:04:18,049 --> 00:04:21,349
The next step is to plan out the control

00:04:21,349 --> 00:04:25,930
panel layout. So this will largely depend on what

00:04:25,930 --> 00:04:27,620
kinds of games you want to play. A game

00:04:27,620 --> 00:04:31,120
like Pac Man is a one-player game with only

00:04:31,120 --> 00:04:33,699
one joystick, so that's really simple to build. Maybe

00:04:33,699 --> 00:04:36,020
you want to build an arcade machine for fighting

00:04:36,020 --> 00:04:41,020
games, so you need two joysticks and six buttons

00:04:41,020 --> 00:04:43,949
or a four-player game that might not have as

00:04:43,949 --> 00:04:46,550
many buttons but it has more joysticks.

00:04:46,550 --> 00:04:50,419
There's lots of different types of buttons. So there's

00:04:50,419 --> 00:04:56,659
concave buttons and convex buttons. There's lighted buttons. Player

00:04:56,659 --> 00:05:01,569
start buttons. Custom, exit, and pause buttons. My favorite

00:05:01,569 --> 00:05:05,469
is the, the lighted insert-coin button. And I've got

00:05:05,469 --> 00:05:08,969
one of those on mine and I just think

00:05:08,969 --> 00:05:13,180
it's so cool.

00:05:13,180 --> 00:05:15,699
The next part is switches. So, some people go

00:05:15,699 --> 00:05:20,210
to great lengths to emulate the actual feel of

00:05:20,210 --> 00:05:23,800
a retro arcade machine and the type of switches

00:05:23,800 --> 00:05:26,460
that they used were called leaf switches. So people

00:05:26,460 --> 00:05:33,460
have created leaf switches to be able to provide

00:05:33,590 --> 00:05:36,279
that, the similar feel. But they're a little bit

00:05:36,279 --> 00:05:38,469
more expensive to get that kind of a feel,

00:05:38,469 --> 00:05:39,449
so maybe you just want to go with the

00:05:39,449 --> 00:05:43,370
plain micro switch. That's what I did.

00:05:43,370 --> 00:05:45,449
My arc- my arc- the goal of my arcade

00:05:45,449 --> 00:05:49,060
machine was to build something cheap and get something

00:05:49,060 --> 00:05:52,419
working right away.

00:05:52,419 --> 00:05:57,729
Joysticks - there are technically three different types of

00:05:57,729 --> 00:05:59,779
joysticks, but the most common are the four-way joysticks

00:05:59,779 --> 00:06:02,460
are the eight-way. A game like pack man is

00:06:02,460 --> 00:06:07,469
four-way. So having a four-way joystick is sort of

00:06:07,469 --> 00:06:09,279
important, because you don't want to get caught in

00:06:09,279 --> 00:06:12,309
a corner and not be able to move because

00:06:12,309 --> 00:06:15,680
it only supports four different directions. A game like

00:06:15,680 --> 00:06:18,699
Street Fighter - a fighting game - has fluid

00:06:18,699 --> 00:06:22,509
circular movements with the joystick so you actually don't

00:06:22,509 --> 00:06:27,009
want to feel the corners. You can get joysticks

00:06:27,009 --> 00:06:30,949
with convertible restrictor plates or ones that are motorized

00:06:30,949 --> 00:06:33,490
to be able to switch between the two. Those

00:06:33,490 --> 00:06:35,729
cost a little bit more, so I, I got

00:06:35,729 --> 00:06:38,180
one that was sort of in between. It has

00:06:38,180 --> 00:06:41,729
an octagon restrictor plate, so it feels a little

00:06:41,729 --> 00:06:43,379
bit more round but you can still feel the

00:06:43,379 --> 00:06:45,779
corners.

00:06:45,779 --> 00:06:49,900
And there's all sorts of extras. You can get

00:06:49,900 --> 00:06:55,839
track balls or flight sticks, light guns, steering wheels,

00:06:55,839 --> 00:06:56,719
shifters.

00:06:56,719 --> 00:06:59,210
Now, when you're laying out your control panel, you

00:06:59,210 --> 00:07:02,930
might feel like being creative. But I might suggest

00:07:02,930 --> 00:07:08,979
against that because you might go a little crazy.

00:07:08,979 --> 00:07:12,419
Slagcoin dot com has arcade layout templates based off

00:07:12,419 --> 00:07:13,999
of some of the most popular arcade games of

00:07:13,999 --> 00:07:16,319
all time, and I really suggest you check them

00:07:16,319 --> 00:07:20,589
out because there's great resources on that website.

00:07:20,589 --> 00:07:22,930
The next thing is a keyboarding coder. So you've

00:07:22,930 --> 00:07:25,710
chosen a format, buttons and joystick. You need something

00:07:25,710 --> 00:07:28,599
to be able to convert the button presses into

00:07:28,599 --> 00:07:30,999
something that the computer can read.

00:07:30,999 --> 00:07:36,710
A keyboarding coder encodes your input and turns it

00:07:36,710 --> 00:07:40,400
into basically keyboard input. So you can think of

00:07:40,400 --> 00:07:44,499
it as your arcade is basically an external USB

00:07:44,499 --> 00:07:48,119
keyboard. The I-Pac is probably the most popular. It's

00:07:48,119 --> 00:07:50,580
a little bit more expensive but it's really easy

00:07:50,580 --> 00:07:52,589
to use and all they, all the inputs are

00:07:52,589 --> 00:07:55,619
labeled. You can see, basically, player one on one

00:07:55,619 --> 00:08:00,300
side, player two on the other side.

00:08:00,300 --> 00:08:06,099
The value edition of the I-Pac only supports two

00:08:06,099 --> 00:08:08,869
players. But it comes with free airmail for thirty-five

00:08:08,869 --> 00:08:12,240
bucks. It ships from the U.K. so that was

00:08:12,240 --> 00:08:15,029
something that I didn't want to have to pay

00:08:15,029 --> 00:08:16,279
a lot for shipping.

00:08:16,279 --> 00:08:19,809
Back in the old days, people had to solder

00:08:19,809 --> 00:08:24,050
wires to a keyboard and they're a lot much

00:08:24,050 --> 00:08:27,300
easier tools now available.

00:08:27,300 --> 00:08:29,509
The next part of building an arcade machine is

00:08:29,509 --> 00:08:32,140
the computer. The brain. The thing that powers it

00:08:32,140 --> 00:08:35,930
all. So the nice thing about building a retro

00:08:35,930 --> 00:08:38,919
arcade game machine is that it doesn't require much

00:08:38,919 --> 00:08:43,360
computing power as a more modern game might require.

00:08:43,360 --> 00:08:47,670
So you can reuse an old computer. That was

00:08:47,670 --> 00:08:51,930
my plan. I wanted to build an arcade machine

00:08:51,930 --> 00:08:55,160
that was powered by my old Dell laptop. That

00:08:55,160 --> 00:09:00,170
thing was a beast. It was a big, heavy,

00:09:00,170 --> 00:09:03,269
seventeen inch laptop, and one time I was helping

00:09:03,269 --> 00:09:06,250
my friend move a piano in a mini-van, and

00:09:06,250 --> 00:09:08,579
my bag's in the back and my friend was

00:09:08,579 --> 00:09:10,430
driving and he had to slam on the breaks

00:09:10,430 --> 00:09:12,959
for some reason and the piano fell over and

00:09:12,959 --> 00:09:16,019
landed on my laptop and it go crunched on

00:09:16,019 --> 00:09:17,850
the outside but it actually survived and it could

00:09:17,850 --> 00:09:23,070
still function, so. I, I always remember that story.

00:09:23,070 --> 00:09:24,639
But the problem that I had with my Dell

00:09:24,639 --> 00:09:28,680
laptop is that - well, one feature was that

00:09:28,680 --> 00:09:31,560
it had S-Video. So I thought, that's great. I'm

00:09:31,560 --> 00:09:35,070
gonna be able to connect it to a TV.

00:09:35,070 --> 00:09:38,240
But the problem was that the S-Video required the

00:09:38,240 --> 00:09:41,300
proprietary Dell Dongle and you had to run this

00:09:41,300 --> 00:09:44,259
custom software on Windows XP and you have to

00:09:44,259 --> 00:09:48,339
manually click to activate it and- and that wasn't

00:09:48,339 --> 00:09:51,410
gonna work. It wasn't kiosk-friendly.

00:09:51,410 --> 00:09:53,690
So when you're building an arcade machine, what you

00:09:53,690 --> 00:09:54,850
want to do is you want to build a

00:09:54,850 --> 00:09:57,699
kiosk experience. SO you walk up to your arcade

00:09:57,699 --> 00:09:59,920
machine and you're not fishing around for a mouse

00:09:59,920 --> 00:10:03,060
to click into the operating system to launch your

00:10:03,060 --> 00:10:06,069
game. You want it to be controlled by the

00:10:06,069 --> 00:10:09,660
controllers on your ke- on your arcade machine.

00:10:09,660 --> 00:10:12,139
So I started building mine about a couple years

00:10:12,139 --> 00:10:16,560
ago. So there wasn't really much I could do

00:10:16,560 --> 00:10:23,560
about that besides maybe find another video-graphics card. But

00:10:23,800 --> 00:10:26,750
then, lucky for me, the Raspberry Pi came out.

00:10:26,750 --> 00:10:28,279
And one of the great things about the Raspberry

00:10:28,279 --> 00:10:33,190
Pi is it has composite video built in. So

00:10:33,190 --> 00:10:38,759
you can connect it to a TV.

00:10:38,759 --> 00:10:42,560
And if you're building a Raspberry Pi arcade machine,

00:10:42,560 --> 00:10:45,139
I want to see you making use of the

00:10:45,139 --> 00:10:48,040
GPIO pins. I want to see you making games

00:10:48,040 --> 00:10:51,029
that make use of external hardware because I think

00:10:51,029 --> 00:10:54,810
that would be super cool.

00:10:54,810 --> 00:10:56,579
So now you've got all the parts you need

00:10:56,579 --> 00:11:01,110
and you want to start building it. MDF or

00:11:01,110 --> 00:11:03,970
plywood are the most common types of wood to

00:11:03,970 --> 00:11:07,550
use when building your arcade machine. Three-quarter inch is

00:11:07,550 --> 00:11:11,829
a thick, is the right thickness. One and one-eighth

00:11:11,829 --> 00:11:17,120
inch hole saw. That's basically the standard button-size. One

00:11:17,120 --> 00:11:22,750
twenty-two, twenty-eight gauge electrical wire, spray paint, nails, screws,

00:11:22,750 --> 00:11:25,160
you know, the standard stuff.

00:11:25,160 --> 00:11:27,250
So when I started building mine, I just used

00:11:27,250 --> 00:11:31,139
some scrap plywood I had in the garage, drilled

00:11:31,139 --> 00:11:32,490
the holes - I ended up making it more

00:11:32,490 --> 00:11:35,259
difficult for myself because I chose a shape that

00:11:35,259 --> 00:11:37,500
wasn't square, so I'm building a box that's not

00:11:37,500 --> 00:11:41,740
square. That's harder to do.

00:11:41,740 --> 00:11:45,579
But the top, the, the sides are held on

00:11:45,579 --> 00:11:48,420
to the top using nails. I used a neumatic

00:11:48,420 --> 00:11:54,170
nail gun and wood glue. So, normally when people

00:11:54,170 --> 00:11:57,470
put a layer on top of their control panel

00:11:57,470 --> 00:12:00,949
they use, they cover it with artwork and they

00:12:00,949 --> 00:12:04,230
cover it with Plexiglas to protect the artwork. But

00:12:04,230 --> 00:12:07,750
that involves drilling more holes in the Plexiglas and

00:12:07,750 --> 00:12:10,579
more money to buy the Plexiglas. So I just

00:12:10,579 --> 00:12:13,670
came up with an idea to use contact paper.

00:12:13,670 --> 00:12:18,069
And it actually worked out pretty nice. It was

00:12:18,069 --> 00:12:20,230
cheap, covered up the nail holes, gives it a

00:12:20,230 --> 00:12:22,190
nice texture.

00:12:22,190 --> 00:12:27,540
There's a picture of me putting the buttons in.

00:12:27,540 --> 00:12:31,899
No switches yet. Here's the, the crown-jewel of my

00:12:31,899 --> 00:12:36,009
arcade machine. And here's a picture of all the

00:12:36,009 --> 00:12:39,940
buttons and the joysticks put in. And here's the

00:12:39,940 --> 00:12:43,709
underside, all wired up. So it's pretty simple. You

00:12:43,709 --> 00:12:48,459
can save wiring by chaining all the grounds together.

00:12:48,459 --> 00:12:50,610
You can use quick disconnects to make it easier

00:12:50,610 --> 00:12:53,509
to wire up. And, in this picture I don't

00:12:53,509 --> 00:12:57,209
have the Raspberry Pi mounted in here, but eventually

00:12:57,209 --> 00:13:02,040
I'll put it in there.

00:13:02,040 --> 00:13:04,440
So we've conquered level one. We've built our arcade

00:13:04,440 --> 00:13:07,000
machine and now we're ready to build some games.

00:13:07,000 --> 00:13:10,670
So, remember when I said we're building a kiosk?

00:13:10,670 --> 00:13:15,629
Well, we, we - unless we're only running one

00:13:15,629 --> 00:13:18,540
game, we need some sort of application to launch

00:13:18,540 --> 00:13:21,379
our games. So this is, this is called a

00:13:21,379 --> 00:13:27,000
front-end. This, essentially acts as our arcade machine's operating

00:13:27,000 --> 00:13:30,889
system. It's what we interact with using our arcade

00:13:30,889 --> 00:13:32,910
controls.

00:13:32,910 --> 00:13:36,670
There are a handful of different front-ends available. They're

00:13:36,670 --> 00:13:40,709
all built to work with game emulators. Here's a,

00:13:40,709 --> 00:13:44,930
a nice one. Some of them focus on having

00:13:44,930 --> 00:13:48,800
nice graphics like this one. Some are built to

00:13:48,800 --> 00:13:53,290
be customized. The problem with this one is that

00:13:53,290 --> 00:13:57,769
it's running on Flash. So it's got nice animations

00:13:57,769 --> 00:14:00,449
but running this on my old Dell laptop was

00:14:00,449 --> 00:14:03,699
super slow. It just didn't look as, as nice

00:14:03,699 --> 00:14:06,639
as this and- plus this one costs money. It's

00:14:06,639 --> 00:14:08,839
not free.

00:14:08,839 --> 00:14:11,149
So I decided I wanted to build my own.

00:14:11,149 --> 00:14:15,860
So the first step in building an arcade machine

00:14:15,860 --> 00:14:19,410
emulator that's running on Ruby - or not an

00:14:19,410 --> 00:14:22,740
emulator, a front-end for launching games - is to

00:14:22,740 --> 00:14:26,240
build a desktop application. But I'd never built a

00:14:26,240 --> 00:14:29,750
desktop application with Ruby. So I did a little

00:14:29,750 --> 00:14:33,509
research and first thing that I came across was

00:14:33,509 --> 00:14:36,360
Curses.

00:14:36,360 --> 00:14:40,060
And Curses is part of the standard Ruby library.

00:14:40,060 --> 00:14:44,790
It's designed for creating text-space GUIs. So it's meant

00:14:44,790 --> 00:14:47,230
to be used on the command line. And I

00:14:47,230 --> 00:14:49,329
started using this, cause it gave it a sort

00:14:49,329 --> 00:14:53,430
of a retro feel. But you reach a point

00:14:53,430 --> 00:14:55,439
where your options are pretty limited. You can't, you

00:14:55,439 --> 00:14:57,709
can't, you don't have a lot of control over

00:14:57,709 --> 00:15:00,740
some different types of things. So it wasn't really

00:15:00,740 --> 00:15:03,699
gonna work out. Can't control the font-size. That was

00:15:03,699 --> 00:15:08,079
the biggest problem. Plus I wanted to build a

00:15:08,079 --> 00:15:14,250
cross-platform application, so this wasn't a good fit.

00:15:14,250 --> 00:15:16,029
So if you att- if you attended the talk

00:15:16,029 --> 00:15:20,009
yesterday using DRb to create a Pirate Game, then

00:15:20,009 --> 00:15:23,579
you got a taste for what Shoes can do.

00:15:23,579 --> 00:15:28,670
Shoes basically provides a, a Ruby DSL for creating

00:15:28,670 --> 00:15:32,350
desktop applications, but, again, it's not really designed for

00:15:32,350 --> 00:15:35,959
creating full-screen applications that are controlled by the arrow

00:15:35,959 --> 00:15:40,899
keys. So this wasn't gonna work.

00:15:40,899 --> 00:15:43,350
The next thing I found was QT. There are

00:15:43,350 --> 00:15:48,930
QT Ruby bindings available. You can create cross-platform applications

00:15:48,930 --> 00:15:53,519
similar to Shoes, but it's basically in the same

00:15:53,519 --> 00:15:55,050
boat. You don't have a lot of control and

00:15:55,050 --> 00:15:59,649
it's not really designed for the purpose that I

00:15:59,649 --> 00:16:00,120
wanted.

00:16:00,120 --> 00:16:04,110
Then I came across Gosu. And Gosu is perfect

00:16:04,110 --> 00:16:10,810
for this. Gosu is full- built for, is designed

00:16:10,810 --> 00:16:17,810
for building full-screen graphical applications. It is powered by

00:16:17,930 --> 00:16:24,930
C++ library which abstracts the OpenGL calls and provides

00:16:24,990 --> 00:16:28,230
a Ruby wrapper to interact with the underlying C++

00:16:28,230 --> 00:16:31,079
layer. It runs on Windows, Mac, and Linux.

00:16:31,079 --> 00:16:34,990
So if you search for Ruby game programming on

00:16:34,990 --> 00:16:40,439
the web, you will find people saying that Ruby's

00:16:40,439 --> 00:16:43,480
too slow and you can't use it for game

00:16:43,480 --> 00:16:49,879
programming. But I think it's important to realize that

00:16:49,879 --> 00:16:53,339
while you might not be using Ruby for the

00:16:53,339 --> 00:17:00,339
actual OpenGL calls, you can interact with some lower-level

00:17:01,569 --> 00:17:04,079
C and C++ libraries.

00:17:04,079 --> 00:17:07,220
And if you were, if you attended Michael Fairley's

00:17:07,220 --> 00:17:10,980
talk about Gosu yesterday, then you're already pretty familiar

00:17:10,980 --> 00:17:14,260
with this, and if you're not then I suggest

00:17:14,260 --> 00:17:16,630
you go online and watch his talk cause it

00:17:16,630 --> 00:17:18,059
was really good.

00:17:18,059 --> 00:17:19,100
So I'm just gonna fly through some of the

00:17:19,100 --> 00:17:26,100
basics. So Gosu provides hardware abstractions so you don't

00:17:26,720 --> 00:17:30,980
have to interact with the, the graphics rendering yourself.

00:17:30,980 --> 00:17:35,100
It provides a run loop which is used to

00:17:35,100 --> 00:17:40,200
redraw the screen when events happen. Handles keyboard and

00:17:40,200 --> 00:17:47,200
mouse input. Provides some APIs for shapes, images, audio

00:17:48,140 --> 00:17:49,419
and text.

00:17:49,419 --> 00:17:53,039
Here's a basic Gosu structure. You, you extend from

00:17:53,039 --> 00:17:58,870
Gosu Window. You define these methods. Gosu will then

00:17:58,870 --> 00:18:01,080
call these methods every time through the run loop

00:18:01,080 --> 00:18:08,080
so, so that you can handle your game, game

00:18:08,520 --> 00:18:15,520
state changes through each iteration of the run loop.

00:18:16,880 --> 00:18:23,120
Gosu provides some abstractions for interacting with keyboard input.

00:18:23,120 --> 00:18:26,409
Keyboard and mouse input. It provides some, some nice

00:18:26,409 --> 00:18:29,529
APIs for creating images on the screen, so if

00:18:29,529 --> 00:18:32,360
you want to create just one image and render

00:18:32,360 --> 00:18:35,130
that one or if you want to have a

00:18:35,130 --> 00:18:38,740
sprite that's made up of multiple images -basically used

00:18:38,740 --> 00:18:42,220
for animations - you can use Gosu image load

00:18:42,220 --> 00:18:46,510
tiles and it provides an array of images that

00:18:46,510 --> 00:18:48,980
you can iterate through.

00:18:48,980 --> 00:18:55,980
Sounds. You can load music that is played through

00:18:56,279 --> 00:19:01,549
multiple iterations or you can, you can create sound

00:19:01,549 --> 00:19:08,460
samples that are used for short-term sound-effects and provides

00:19:08,460 --> 00:19:13,770
APIs for drawing shapes. This is pretty basic here.

00:19:13,770 --> 00:19:16,510
Basic - it really just abstracts the, the underlying

00:19:16,510 --> 00:19:20,029
OpenGL calls. Once you start getting into game programming

00:19:20,029 --> 00:19:24,659
like this you, you see that these methods end

00:19:24,659 --> 00:19:27,870
up taking like a huge amount of arguments and

00:19:27,870 --> 00:19:32,309
it gets kind of messy.

00:19:32,309 --> 00:19:34,159
Gosu provides two different ways of drawing text to

00:19:34,159 --> 00:19:35,970
the screen depending on how often it needs to

00:19:35,970 --> 00:19:38,500
be updated. So if you have a big block

00:19:38,500 --> 00:19:42,210
of text that's displaying, you know, the rules of

00:19:42,210 --> 00:19:44,809
your game or something like that, then you'll want

00:19:44,809 --> 00:19:47,820
to use that text and draw it into an

00:19:47,820 --> 00:19:49,900
image. Or if you've got the points on the

00:19:49,900 --> 00:19:54,940
screen that are, is updating frequently then you'll use

00:19:54,940 --> 00:19:57,370
a different approach there.

00:19:57,370 --> 00:19:59,870
So I don't think that I have time for,

00:19:59,870 --> 00:20:02,919
to show the source code of the game that

00:20:02,919 --> 00:20:07,429
we played earlier. So I put it online so

00:20:07,429 --> 00:20:11,230
you can find it on GitHub. And you might

00:20:11,230 --> 00:20:16,240
have noticed it's in this Ruby dash arcade organization.

00:20:16,240 --> 00:20:22,230
So this is the GitHub organization that I created

00:20:22,230 --> 00:20:28,870
when I started by Ruby front-end project. The goal

00:20:28,870 --> 00:20:32,760
was to build an arcade front-end that allows you

00:20:32,760 --> 00:20:35,570
to download and run games that other people have

00:20:35,570 --> 00:20:37,559
created, written in Ruby.

00:20:37,559 --> 00:20:40,770
but I got a little sidetracked along the way

00:20:40,770 --> 00:20:44,110
so it's not done yet. But you can check

00:20:44,110 --> 00:20:47,770
out that repository and it's got a lot of

00:20:47,770 --> 00:20:51,230
Ruby game programming-related gems and projects in there that

00:20:51,230 --> 00:20:58,230
you might want to check out.

00:21:00,500 --> 00:21:06,260
And one of those projects is rcade_controls. So this

00:21:06,260 --> 00:21:11,240
just provides a, a simple, simply provides some aliases

00:21:11,240 --> 00:21:16,880
to the Gosu keyboard constants. So instead of typing

00:21:16,880 --> 00:21:23,020
Goson colon colon KBA for the, the a key

00:21:23,020 --> 00:21:25,080
on the keyboard, you can type player two button

00:21:25,080 --> 00:21:30,640
one and that is a lot easier to read.

00:21:30,640 --> 00:21:34,710
Another lofty goal of mine was to run this,

00:21:34,710 --> 00:21:37,380
this presentation using a gem that I created called

00:21:37,380 --> 00:21:41,399
the presentation gem. So you can try it all.

00:21:41,399 --> 00:21:43,929
I wanted to be able to write my slides

00:21:43,929 --> 00:21:48,890
in mark down and automatically apply syntax highlighting and

00:21:48,890 --> 00:21:54,409
has it running as a full-screen application like this.

00:21:54,409 --> 00:21:55,789
But I ran out of time so I switched

00:21:55,789 --> 00:21:59,669
to using keynote, but.

00:21:59,669 --> 00:22:03,460
The presentation gem, it's pretty, it provides the basics

00:22:03,460 --> 00:22:04,710
out of the box so you could try it

00:22:04,710 --> 00:22:07,059
out. It'd be cool to improve on this in

00:22:07,059 --> 00:22:09,700
the future but it's not what I'm working on

00:22:09,700 --> 00:22:15,630
at the moment.

00:22:15,630 --> 00:22:17,730
Gosu is one of the few different game engine

00:22:17,730 --> 00:22:23,380
options available in Ruby. Gosu is designed for building

00:22:23,380 --> 00:22:29,960
desktop games. In Ruby motion we have Joybox. Joybox

00:22:29,960 --> 00:22:34,380
is really cool. But it only runs on iOS

00:22:34,380 --> 00:22:35,520
right now.

00:22:35,520 --> 00:22:40,520
In JRuby you can take advantage of LibGDX and

00:22:40,520 --> 00:22:45,529
Slick2D, which are two popular game libraries written in

00:22:45,529 --> 00:22:50,570
Java. So compared to these other two, Joybox and

00:22:50,570 --> 00:22:54,990
these Java libraries, Gosu seems pretty basic. And that's

00:22:54,990 --> 00:22:58,659
by design. Gosu is only really designed to provide

00:22:58,659 --> 00:23:05,080
a basic layer of abstraction.

00:23:05,080 --> 00:23:07,370
So there are other libraries that are built on

00:23:07,370 --> 00:23:11,130
top of Gosu that provide more game engine logic.

00:23:11,130 --> 00:23:17,570
Three examples are Chingu, Gamebox, and Metro. And Gamebox

00:23:17,570 --> 00:23:20,110
and Joybox have two very similar names, so don't

00:23:20,110 --> 00:23:23,570
get confused. Joybox is for iOS, Gamebox is for

00:23:23,570 --> 00:23:25,230
Gosu.

00:23:25,230 --> 00:23:29,640
And once you start interacting with more advanced physics,

00:23:29,640 --> 00:23:35,110
collision, detection and gravity and things like that, you

00:23:35,110 --> 00:23:37,539
want to start - you could either write all

00:23:37,539 --> 00:23:39,970
the math yourself to do this if it's pretty

00:23:39,970 --> 00:23:42,480
basic, but you might want to take advantage of

00:23:42,480 --> 00:23:44,620
some other options that are available like Chipmunk.

00:23:44,620 --> 00:23:48,390
Chipmunk, I think, is a C library, and there's

00:23:48,390 --> 00:23:51,809
a Chipmunk gem that abstracts that an provides a

00:23:51,809 --> 00:23:53,940
Rub API.

00:23:53,940 --> 00:24:00,890
OK, so, started building my Ruby-powered front-end for my

00:24:00,890 --> 00:24:04,080
arcade machine and I want it on- wanted, want

00:24:04,080 --> 00:24:09,429
to run it on my Raspberry Pi. So first

00:24:09,429 --> 00:24:13,080
step is to install Ruby on my Raspberry Pi.

00:24:13,080 --> 00:24:15,309
I installed it from source, which took about three

00:24:15,309 --> 00:24:19,899
hours. And I installed my gems and then I

00:24:19,899 --> 00:24:23,220
tried to run Gosu and it didn't work. I

00:24:23,220 --> 00:24:25,070
figured I was probably missing some sort of dependencies

00:24:25,070 --> 00:24:28,529
so I turned to Google and asked Google, how

00:24:28,529 --> 00:24:30,380
do I run Gosu on Raspberry Pi?

00:24:30,380 --> 00:24:34,730
And then I came across the Gosu forum, and

00:24:34,730 --> 00:24:39,789
in the forum Mat, here, he, he - I

00:24:39,789 --> 00:24:42,799
noticed that is, said he was working on something

00:24:42,799 --> 00:24:48,159
called Raspian, which is a Debian-Linux distribution designed for

00:24:48,159 --> 00:24:52,159
running on the Raspberry Pi. And he'd like to

00:24:52,159 --> 00:24:56,149
get Gosu running on Raspian so that his kids

00:24:56,149 --> 00:24:58,570
can get started with game programming.

00:24:58,570 --> 00:25:03,649
But as I scroll further down in the post,

00:25:03,649 --> 00:25:07,570
months have gone by and, found out that Raspian

00:25:07,570 --> 00:25:10,809
has launched and it's so popular it has become

00:25:10,809 --> 00:25:13,880
the default operating system and that they decided to

00:25:13,880 --> 00:25:18,630
go with Python instead.

00:25:18,630 --> 00:25:22,539
No!

00:25:22,539 --> 00:25:27,140
So the problem is that Python is now installed

00:25:27,140 --> 00:25:31,070
by default on the Raspian on, the, so basically

00:25:31,070 --> 00:25:37,159
on the Raspberry Pi. It comes with PyGame on

00:25:37,159 --> 00:25:39,779
Raspian, you even got a directory for your Python

00:25:39,779 --> 00:25:45,519
games in there, and Pyth- PyGame works on the

00:25:45,519 --> 00:25:49,029
Raspberry Pi, and that's because PyGame uses the SDL

00:25:49,029 --> 00:25:53,480
library instead of custom C++ code like Gosu uses.

00:25:53,480 --> 00:25:57,809
SDL stands for simple direct media layer. And essentially

00:25:57,809 --> 00:26:04,409
Gosu and SDL are almost competing. But the thing

00:26:04,409 --> 00:26:07,809
that concerned me is that I'm wondering, are kids

00:26:07,809 --> 00:26:12,309
learning Python instead of Ruby? Game programming is a

00:26:12,309 --> 00:26:16,510
great way for kids to get into programming. So

00:26:16,510 --> 00:26:20,340
this kind of made me wonder about the future

00:26:20,340 --> 00:26:23,899
of Ruby. If the next generation is building games

00:26:23,899 --> 00:26:27,559
with Python, they're already gonna know Python. Are they

00:26:27,559 --> 00:26:31,269
gonna be interested to switching to Ruby or, or

00:26:31,269 --> 00:26:35,580
is Ruby gonna die out?

00:26:35,580 --> 00:26:38,429
So what can we do? We can help improve

00:26:38,429 --> 00:26:40,370
Gosu so that we can get it running on

00:26:40,370 --> 00:26:45,570
the Raspberry Pi. Gosu's basically maintained by one person

00:26:45,570 --> 00:26:51,059
and it's the most popular Ruby library for creating

00:26:51,059 --> 00:26:55,169
graphical applications like this. So I feel like we

00:26:55,169 --> 00:26:59,860
can either support Gosu as a community, help, help

00:26:59,860 --> 00:27:02,039
maintain it with him so that he's not the

00:27:02,039 --> 00:27:05,120
only one having to work on it. Cause there's

00:27:05,120 --> 00:27:06,419
a lot of open issues that you can, you

00:27:06,419 --> 00:27:07,610
can help out with.

00:27:07,610 --> 00:27:09,899
I think the problem is that a lot of

00:27:09,899 --> 00:27:14,510
people don't know C or C++ and so they

00:27:14,510 --> 00:27:16,610
have a hard time jumping in and helping. So

00:27:16,610 --> 00:27:20,460
all of you that are familiar with C++ I

00:27:20,460 --> 00:27:22,320
encourage you to look to, look to some areas

00:27:22,320 --> 00:27:23,500
like this.

00:27:23,500 --> 00:27:27,710
Or we can swap out the custom Gosu C++

00:27:27,710 --> 00:27:30,529
for SDL so that we have one less dependency

00:27:30,529 --> 00:27:37,529
to maintain. I should also mention that Gosu has

00:27:37,850 --> 00:27:41,789
been around since 2001, so it's actually been around

00:27:41,789 --> 00:27:45,399
a long time. And at the time, SDL was

00:27:45,399 --> 00:27:48,220
not a good option. It did not use hardware

00:27:48,220 --> 00:27:52,870
accelerated graphics and Gosu was a much nicer library.

00:27:52,870 --> 00:27:56,090
But over time, SDL has gained a lot of

00:27:56,090 --> 00:27:58,649
contributors and so they're able to keep up with

00:27:58,649 --> 00:28:02,380
changes and new technology.

00:28:02,380 --> 00:28:05,139
The next thing is to get involved in teaching

00:28:05,139 --> 00:28:10,169
kids game programming. Game programming is a great way

00:28:10,169 --> 00:28:13,000
for kids to get into programming, so if we

00:28:13,000 --> 00:28:15,769
get involved with helping to teach them using Ruby,

00:28:15,769 --> 00:28:18,610
we can stack the deck in our favor. One

00:28:18,610 --> 00:28:21,659
organization that I came across while preparing for this

00:28:21,659 --> 00:28:26,340
talk is, back in Portland we have an organization

00:28:26,340 --> 00:28:33,179
called GameEducationPDX dot com, and they provide workshops for

00:28:33,179 --> 00:28:37,260
kids to get involved in game programming. I just

00:28:37,260 --> 00:28:41,720
learned about the Coder Dojo concept and that sounds

00:28:41,720 --> 00:28:44,940
like a great opportunity, too, so I encourage you

00:28:44,940 --> 00:28:49,580
to try to start one of these programs, organizations

00:28:49,580 --> 00:28:51,380
in your area.

00:28:51,380 --> 00:28:56,320
Make use of KidsRuby. Create tools and tutorials to

00:28:56,320 --> 00:29:00,600
help kids gain pro- get into game programming. And

00:29:00,600 --> 00:29:05,870
help change perceptions. So I think some people think

00:29:05,870 --> 00:29:08,169
that programmers are just nerdy guys who don't shower

00:29:08,169 --> 00:29:13,019
and live in their parents' basement and that game

00:29:13,019 --> 00:29:15,740
programming is just for guys and that's really a

00:29:15,740 --> 00:29:20,340
bad thing. We need to help change perceptions, get

00:29:20,340 --> 00:29:24,080
people interested in game programming.

00:29:24,080 --> 00:29:27,450
I went to college for graphic design. In high

00:29:27,450 --> 00:29:30,490
school, I wasn't interested - or I was interested

00:29:30,490 --> 00:29:33,190
in creating art and creating websites. I wanted to

00:29:33,190 --> 00:29:37,419
work with the web. But my perception of computer

00:29:37,419 --> 00:29:41,169
science wasn't, it wasn't even on my radar because

00:29:41,169 --> 00:29:44,610
my perception was that computer science was boring and

00:29:44,610 --> 00:29:48,159
it involved a lot of math. Eventually I got

00:29:48,159 --> 00:29:51,600
into programming cause I realized how fun it was,

00:29:51,600 --> 00:29:54,799
but computer science does not mean you will spend

00:29:54,799 --> 00:29:57,019
your life working on applications that look like Microsoft

00:29:57,019 --> 00:30:01,490
Excel, because that was my perception. SO we can

00:30:01,490 --> 00:30:04,149
help change perceptions.

00:30:04,149 --> 00:30:07,720
The next is to improve neglected areas of Ruby.

00:30:07,720 --> 00:30:11,309
There are some areas of Ruby that could use

00:30:11,309 --> 00:30:15,480
some love. Game programming is one of those areas.

00:30:15,480 --> 00:30:18,399
People are using things like JavaScript to create commercial

00:30:18,399 --> 00:30:21,860
games and it's, it kind of boggles my mind,

00:30:21,860 --> 00:30:24,669
like. We have Ruby, like this really nice programming

00:30:24,669 --> 00:30:27,929
language, and game programming is sort of seen like

00:30:27,929 --> 00:30:32,470
a toy. So one of the things that I've

00:30:32,470 --> 00:30:35,289
done is I've created a website called RubyGameDev dot

00:30:35,289 --> 00:30:40,010
com, which I hope will be a central hub

00:30:40,010 --> 00:30:43,990
for communication and discussion around game programming with Ruby

00:30:43,990 --> 00:30:50,710
to help really improve the game programming community as

00:30:50,710 --> 00:30:54,470
it relates to Ruby, and so that discussion around

00:30:54,470 --> 00:30:58,470
Ruby game programming isn't silo'd to specific gems but

00:30:58,470 --> 00:31:01,720
really it can, we can cross-collaborate and improve the

00:31:01,720 --> 00:31:03,309
discussion there.

00:31:03,309 --> 00:31:07,970
So this website is really rough right now, but

00:31:07,970 --> 00:31:10,350
I've, I plan to really build this out and,

00:31:10,350 --> 00:31:13,149
with your help, we can turn this into something

00:31:13,149 --> 00:31:15,500
really cool.

00:31:15,500 --> 00:31:17,110
The next thing that I'm working on, which I'm

00:31:17,110 --> 00:31:21,970
really excited about, is compartment CMS. So I feel

00:31:21,970 --> 00:31:26,210
like CMS's in Ruby - we have CMS's in

00:31:26,210 --> 00:31:30,549
Ruby but nothing, in my opinion, that can compete

00:31:30,549 --> 00:31:34,039
against, like a PHP CMS. And so I feel

00:31:34,039 --> 00:31:37,539
like how Ruby on Rails was this great web

00:31:37,539 --> 00:31:41,279
framework that brought people away from other languages to

00:31:41,279 --> 00:31:44,970
learn Ruby, we can do that with things like

00:31:44,970 --> 00:31:48,679
game programming and CMS's. People will see, wow, these

00:31:48,679 --> 00:31:50,710
tools are so much easier to use and they're

00:31:50,710 --> 00:31:54,309
so much fun that, and they're so professional that

00:31:54,309 --> 00:31:56,940
they want to switch to using Ruby, so.

00:31:56,940 --> 00:32:03,940
But I digress. Let's talk about professional game programming.

00:32:04,210 --> 00:32:06,009
So like I said, right now game programming in

00:32:06,009 --> 00:32:08,679
Ruby feels more like a toy or a hobby.

00:32:08,679 --> 00:32:11,990
If we really want to legitimize game programming in

00:32:11,990 --> 00:32:14,240
Ruby, we need to be thinking about how it

00:32:14,240 --> 00:32:21,240
can be used professionally. So game programming is actually

00:32:21,340 --> 00:32:24,269
kind of a lucrative business. It's the top app

00:32:24,269 --> 00:32:30,220
store category. The ga- the global game programming industry

00:32:30,220 --> 00:32:34,970
is valued at seventy billion dollars. The average iOS

00:32:34,970 --> 00:32:39,090
Indie game, in a survey for 250 independent iOS

00:32:39,090 --> 00:32:44,470
game developers, they were making eighty-six thousand in revenue

00:32:44,470 --> 00:32:48,000
per game in a twelve month span. So that's

00:32:48,000 --> 00:32:48,980
kind of cool.

00:32:48,980 --> 00:32:53,120
And these were independent game developers, most of which

00:32:53,120 --> 00:32:55,380
this was not their full-time job. This was something

00:32:55,380 --> 00:32:58,950
that they were doing on the side. So we

00:32:58,950 --> 00:33:05,950
can build tools like Joybox to help make game

00:33:06,580 --> 00:33:12,049
programming faster and more efficient.

00:33:12,049 --> 00:33:19,049
Just checking my time to see how much time

00:33:19,480 --> 00:33:21,440
- I got ten minutes.

00:33:21,440 --> 00:33:23,649
The next thing is multi-platform support. So we sort

00:33:23,649 --> 00:33:26,940
of have desktop taken care of. We sort of,

00:33:26,940 --> 00:33:29,630
you know, we're dabbling in the mobile space. Really

00:33:29,630 --> 00:33:35,409
console is not even on our radar. And if

00:33:35,409 --> 00:33:38,350
we wanted to write our games and have them

00:33:38,350 --> 00:33:40,000
run on these different devices, we would have to

00:33:40,000 --> 00:33:43,799
rewrite them to work on different platforms and that's

00:33:43,799 --> 00:33:45,789
not as efficient as we could be.

00:33:45,789 --> 00:33:48,830
But what do they all have in common? They

00:33:48,830 --> 00:33:55,830
all run C or C++. And C++ is basically

00:33:56,019 --> 00:33:59,980
the standard in professional game programming. There are a

00:33:59,980 --> 00:34:05,039
ton of C++ game libraries available. So, am I

00:34:05,039 --> 00:34:11,500
encouraging you to write your games in C++? No.

00:34:11,500 --> 00:34:16,690
Lucky for us, we've got mRuby. MRuby is a

00:34:16,690 --> 00:34:21,560
minimal Ruby implementation. You might have heard about it

00:34:21,560 --> 00:34:23,659
in the past or heard about it yesterday. There

00:34:23,659 --> 00:34:29,139
are some great talks that involved MRuby. It's built

00:34:29,139 --> 00:34:33,419
to be small, embeddable, and modular.

00:34:33,419 --> 00:34:35,669
And you compile it with your C or C++

00:34:35,669 --> 00:34:39,310
code. So this will allow us to write some

00:34:39,310 --> 00:34:44,550
Ruby code that executes C or C++ code and

00:34:44,550 --> 00:34:47,050
package it all up to be able to distribute

00:34:47,050 --> 00:34:50,550
on these different platforms. So we can leverage existing

00:34:50,550 --> 00:34:54,800
C++ game libraries.

00:34:54,800 --> 00:34:59,280
So I just started learning C a month ago.

00:34:59,280 --> 00:35:01,420
So for me, getting started with MRuby was kind

00:35:01,420 --> 00:35:06,540
of a hurdle. It was more difficult than, than

00:35:06,540 --> 00:35:09,430
I thought. And that's because there aren't a whole

00:35:09,430 --> 00:35:12,000
lot of tutorials available, and the ones that are

00:35:12,000 --> 00:35:16,260
available are written in Japanese. So it was hard

00:35:16,260 --> 00:35:19,530
for me, as an English speaker who didn't know

00:35:19,530 --> 00:35:21,869
how to compile something at the command line.

00:35:21,869 --> 00:35:23,849
So here's a really basic tutorial on how to

00:35:23,849 --> 00:35:27,130
get started with MRuby. You can clone the MRuby

00:35:27,130 --> 00:35:31,760
GitHub repo and just run make, and the interesting

00:35:31,760 --> 00:35:35,829
thing about how you compile MRuby is that make

00:35:35,829 --> 00:35:40,020
just calls to rake and all of the compilation

00:35:40,020 --> 00:35:43,950
steps are written as rake tasks. So I thought

00:35:43,950 --> 00:35:45,640
that was interesting.

00:35:45,640 --> 00:35:52,640
A basic MRuby example is including standard library stuff

00:35:54,079 --> 00:35:55,450
- I don't even know if you need to

00:35:55,450 --> 00:36:00,250
do that. Include MRuby. Open up MRuby game, or,

00:36:00,250 --> 00:36:05,210
MRuby state. Create a string with some MRuby or

00:36:05,210 --> 00:36:08,030
some Ruby code, and you can load the string

00:36:08,030 --> 00:36:15,020
using mrb_load_string, and we compile that. You can use

00:36:15,020 --> 00:36:21,420
GCC, the name of our C file, and include

00:36:21,420 --> 00:36:26,500
the MRuby archive library, and then include the MRuby

00:36:26,500 --> 00:36:29,740
include directory. By default, since we didn't specify an

00:36:29,740 --> 00:36:33,650
output format, it'll create an a dot out file,

00:36:33,650 --> 00:36:35,510
and we can execute that and we can see

00:36:35,510 --> 00:36:40,060
our Ruby code has run.

00:36:40,060 --> 00:36:47,060
So, more complicated example. We include the MRuby compile

00:36:50,250 --> 00:36:55,710
header and we define our C method here that

00:36:55,710 --> 00:36:58,310
runs some C code. I learned that puts is

00:36:58,310 --> 00:37:02,270
actually in C, so, in Ruby when I type

00:37:02,270 --> 00:37:07,470
puts, like oh, this came from C. So we

00:37:07,470 --> 00:37:14,470
create our main loop here, or, open up, create

00:37:14,609 --> 00:37:19,119
an MRuby state here. We define our module. We

00:37:19,119 --> 00:37:22,089
define a class method on our module. So we're

00:37:22,089 --> 00:37:25,550
essentially writing C code that will call our C

00:37:25,550 --> 00:37:31,150
code and define some Ruby classes or modules or

00:37:31,150 --> 00:37:34,720
methods that become available from the Ruby side. And

00:37:34,720 --> 00:37:37,470
at the bottom here, we open up our Ruby

00:37:37,470 --> 00:37:42,540
file and we call mrb load file.

00:37:42,540 --> 00:37:46,619
In our mrb, in our example dot rb file,

00:37:46,619 --> 00:37:50,369
we say running some code in Ruby. We call

00:37:50,369 --> 00:37:52,390
to our module that we defined in the C

00:37:52,390 --> 00:37:58,640
code. We compile it. We run it. And we

00:37:58,640 --> 00:38:03,069
see we called our C method in Ru- in

00:38:03,069 --> 00:38:06,329
MRuby. Now I just got started a month ago,

00:38:06,329 --> 00:38:11,250
and this is like super cool. And it's super

00:38:11,250 --> 00:38:16,650
easy, I mean. That is pretty readable to me,

00:38:16,650 --> 00:38:19,460
I mean. Wow.

00:38:19,460 --> 00:38:23,460
It, we can abstract this, you know, create reusable

00:38:23,460 --> 00:38:29,950
methods, things like that. But it's, it, it's clear

00:38:29,950 --> 00:38:33,960
to me how we can start making use of

00:38:33,960 --> 00:38:39,920
external C libraries and, and C++ libraries in defining

00:38:39,920 --> 00:38:45,260
abstractions that are available in the Ruby environment.

00:38:45,260 --> 00:38:50,560
So if you want to get more examples, I

00:38:50,560 --> 00:38:53,170
started this repository. I don't think I've pushed any

00:38:53,170 --> 00:38:56,410
code to it yet cause it wasn't ready. But

00:38:56,410 --> 00:38:58,670
I plan to, so if you, if you start

00:38:58,670 --> 00:39:02,520
or watch this repository, it's also in the Ruby

00:39:02,520 --> 00:39:08,300
arcade organization. I found MRuby dot S-H is a

00:39:08,300 --> 00:39:14,730
great website for finding out news about MRuby, and

00:39:14,730 --> 00:39:16,710
I don't know what else is out there, so

00:39:16,710 --> 00:39:20,890
if you do you know, more English tutorials for

00:39:20,890 --> 00:39:24,859
people who are getting started with C and MRuby,

00:39:24,859 --> 00:39:27,780
then email them to me or post them on

00:39:27,780 --> 00:39:32,790
RubyGameDev dot com, because they would be really useful.

00:39:32,790 --> 00:39:37,810
So what's next? Join RubyGameDev dot com. I encourage

00:39:37,810 --> 00:39:39,569
you to learn C programming cause it's really not

00:39:39,569 --> 00:39:43,069
as hard as I thought it was and it

00:39:43,069 --> 00:39:45,880
would be really useful to you. Get started with

00:39:45,880 --> 00:39:48,619
MRuby, if you, if this all seems really easy

00:39:48,619 --> 00:39:51,510
to you then help others get started with MRuby.

00:39:51,510 --> 00:39:54,230
You know, by writing tutorials and things like that.

00:39:54,230 --> 00:39:59,880
Help build MRuby-powered game libraries. And here are just

00:39:59,880 --> 00:40:04,420
a bunch, a list of resources that I mentioned

00:40:04,420 --> 00:40:06,170
a little bit in my talks.

00:40:06,170 --> 00:40:09,250
ArcadeControls dot com is a great website. All right,

00:40:09,250 --> 00:40:12,390
I think that's the end of my talk. Thank

00:40:12,390 --> 00:40:12,839

YouTube URL: https://www.youtube.com/watch?v=Cru9bq_xPQo


