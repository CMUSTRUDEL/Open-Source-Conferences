Title: Ruby Conf 2013 - Effective Debugging by Jonathan Wallace
Publication date: 2020-01-27
Playlist: RubyConf 2013
Description: 
	Debugging is an art. And to be an effective artist, an artist must be intimately familiar with their tools. In this talk, we'll start gently and finish strong to ensure that there's something for everyone. We'll cover when to use a debugger, which debugger to use, and how to use the debugger, and how to quickly configure your debugger for maximum utility. We'll touch briefly on pry and why pry is not a debugger, except when it is.

Developers are always looking for ways to boost productivity. Effective debugging allows one to more quickly discover inaccuracies between our expectations and how the software actually behaves.

Help us caption & translate this video!

http://amara.org/v/FG5Y/
Captions: 
	00:00:16,000 --> 00:00:20,000
JONATHAN WALLACE: Hello everyone. Thanks for coming to my talk.

00:00:20,359 --> 00:00:22,390
My name's Jonathan and I'm gonna talk about

00:00:22,390 --> 00:00:27,109
effective debugging today. And before I get started,

00:00:27,109 --> 00:00:30,619
I, I wanted to explain this awesome flavor saver

00:00:30,619 --> 00:00:34,570
that I'm rocking right now. I'm part of Movember.

00:00:34,570 --> 00:00:35,910
If you've heard of this, this is an organization

00:00:35,910 --> 00:00:39,610
that's raising awareness about prostrate and testicular cancer.

00:00:39,610 --> 00:00:41,830
If you're interested, are interested in helping out,

00:00:41,830 --> 00:00:44,920
feel free to come and talk to me after the talk.

00:00:44,920 --> 00:00:49,670
All right. So today I want to share with

00:00:49,670 --> 00:00:51,600
you my take on what it takes to be

00:00:51,600 --> 00:00:55,720
effective in doing debugging in Ruby. That's gonna involve

00:00:55,720 --> 00:00:58,470
us looking at a case study. We'll look at

00:00:58,470 --> 00:01:00,290
some basic commands that you can use in almost

00:01:00,290 --> 00:01:04,049
any library, any library in Ruby that supports debugging.

00:01:04,049 --> 00:01:05,829
After that we'll recap what we learned, talk about

00:01:05,829 --> 00:01:08,020
some advanced commands that may not be available on

00:01:08,020 --> 00:01:11,219
all the versions of all the libraries. After that

00:01:11,219 --> 00:01:12,359
we'll sort of look at a little bit of

00:01:12,359 --> 00:01:14,509
an overview of the debugging ecosystem, so you'll know

00:01:14,509 --> 00:01:17,390
which version of which library to use with which

00:01:17,390 --> 00:01:19,499
version of Ruby. And then we'll touch on Pry.

00:01:19,499 --> 00:01:21,210
If you were in the previous talk in this

00:01:21,210 --> 00:01:23,630
room, it was an exceptional talk. The guy gave

00:01:23,630 --> 00:01:26,439
a great, went into great detail about what makes

00:01:26,439 --> 00:01:27,310
Pry so great.

00:01:27,310 --> 00:01:28,640
And we're not gonna do that here. But we

00:01:28,640 --> 00:01:32,049
will talk about the intersection between Pry and some

00:01:32,049 --> 00:01:33,289
debugging libraries.

00:01:33,289 --> 00:01:34,819
So let's get started. Let's look at our case

00:01:34,819 --> 00:01:36,979
study. So in this case study, we're gonna use

00:01:36,979 --> 00:01:41,189
a gem called BuyBug. And here's the situation. We've

00:01:41,189 --> 00:01:44,999
received a project from a client or a boss,

00:01:44,999 --> 00:01:48,299
and this project is a simulation of a relationship

00:01:48,299 --> 00:01:51,590
between a crap and a parasite.

00:01:51,590 --> 00:01:55,700
And this parasite is called Sacculina Carcini. This is

00:01:55,700 --> 00:01:59,079
a parasitic barnacle and it, if you look at

00:01:59,079 --> 00:02:00,459
this picture of the crab and you look at

00:02:00,459 --> 00:02:03,060
the yellow glistening disgusting thing on the bottom of

00:02:03,060 --> 00:02:05,399
it, that's called an externa, and that's where the

00:02:05,399 --> 00:02:09,849
parasite releases its, the larvae children into the water.

00:02:09,849 --> 00:02:12,739
And there's a really interesting aspect. If you haven't

00:02:12,739 --> 00:02:16,409
investigated, one of my favorite topics is some biological

00:02:16,409 --> 00:02:19,010
host-parasite relationships. And this is one of the more

00:02:19,010 --> 00:02:21,580
interesting ones. I've got a few more, if you

00:02:21,580 --> 00:02:23,250
want to hear about them I can share, share

00:02:23,250 --> 00:02:24,860
the general details with you, but.

00:02:24,860 --> 00:02:27,470
In this case, what this larvae does, the Sacculina

00:02:27,470 --> 00:02:30,379
Carcini, it, it lands on a crab in the

00:02:30,379 --> 00:02:32,489
water, and it'll crawl along the shell of the

00:02:32,489 --> 00:02:34,730
crab until it finds some soft part of the

00:02:34,730 --> 00:02:36,439
exoskeleton. So that's either a joint or an eye

00:02:36,439 --> 00:02:39,200
socket or an eye stalk. And then what it

00:02:39,200 --> 00:02:42,450
does is it pierces that soft part of the

00:02:42,450 --> 00:02:47,060
crab and ejects itself, injects itself into the crab,

00:02:47,060 --> 00:02:50,250
you know, throwing away its thorax and abdomen, and

00:02:50,250 --> 00:02:51,739
it crawls along the inside of the crab. It

00:02:51,739 --> 00:02:53,569
migrates its way to underneath the heart of the

00:02:53,569 --> 00:02:55,720
grab, and it starts taking nutrients and growing.

00:02:55,720 --> 00:02:57,959
This takes a couple of weeks of time.

00:02:57,959 --> 00:03:00,549
Then, this is where it gets really creepy. So

00:03:00,549 --> 00:03:03,269
this is already, this, this parasite's in there, and,

00:03:03,269 --> 00:03:05,349
and that's sketchy and scary that, you know, you've

00:03:05,349 --> 00:03:07,120
got another organism living in you. But what gets

00:03:07,120 --> 00:03:11,019
really weird is that it, it actually starts extending

00:03:11,019 --> 00:03:13,019
tendrils into the crab's brain. And it starts to

00:03:13,019 --> 00:03:16,379
change the hormone balance of a crab.

00:03:16,379 --> 00:03:18,319
So female crabs in general they, you know, they

00:03:18,319 --> 00:03:20,409
reproduce, so they have an egg sac, and when

00:03:20,409 --> 00:03:23,879
they want to spread their eggs they climb up

00:03:23,879 --> 00:03:26,680
to, onto a rocky shelf or rocky outcrop, and

00:03:26,680 --> 00:03:28,510
they wave their claw in the air, in the,

00:03:28,510 --> 00:03:30,189
in the water to help distribute their eggs.

00:03:30,189 --> 00:03:32,159
Well, the same behavior is what needs to happen

00:03:32,159 --> 00:03:36,189
to distribute this parasite. But this parasite's not picky.

00:03:36,189 --> 00:03:39,180
It doesn't just infect ma- female crabs. It also

00:03:39,180 --> 00:03:41,599
infects male crabs. In fact, what it does is

00:03:41,599 --> 00:03:43,329
it changes the shape of a male crab to

00:03:43,329 --> 00:03:46,140
be like a female crab. The male crab now

00:03:46,140 --> 00:03:48,340
acts like a female crab. It performs the same

00:03:48,340 --> 00:03:51,060
types of behaviors, including crawling up to the top

00:03:51,060 --> 00:03:52,719
of some, you know, the high part on the

00:03:52,719 --> 00:03:55,340
bottom of the ocean, where there's, the current is

00:03:55,340 --> 00:03:58,069
strong, and waving its claw to help distribute the

00:03:58,069 --> 00:03:58,530
larvae.

00:03:58,530 --> 00:04:03,099
So, really sketchy stuff. A really interesting relationship. And

00:04:03,099 --> 00:04:06,390
our software is simulating this relationship. So we're going

00:04:06,390 --> 00:04:08,370
to, we're going to look at the code base

00:04:08,370 --> 00:04:10,420
and, and see if we can add some features

00:04:10,420 --> 00:04:11,420
to it.

00:04:11,420 --> 00:04:14,549
So here we are. We've cloned the code base

00:04:14,549 --> 00:04:17,919
down and we're gonna run Rspec. So this project

00:04:17,919 --> 00:04:19,829
has a test suite, which is fantastic. It should

00:04:19,829 --> 00:04:21,720
allow us to move a little bit quicker. And

00:04:21,720 --> 00:04:24,080
the previous developer that, that gave us this code

00:04:24,080 --> 00:04:25,800
base says, everything's good to go. You can start

00:04:25,800 --> 00:04:27,110
adding features right away.

00:04:27,110 --> 00:04:29,380
But, just to verify, we want to make sure

00:04:29,380 --> 00:04:31,440
that everything's working the way it says it is.

00:04:31,440 --> 00:04:33,590
We're gonna run the test suite.

00:04:33,590 --> 00:04:35,220
So we do that, and we have a failure.

00:04:35,220 --> 00:04:39,000
Darn. That stinks. But it's not altogether unexpected, right.

00:04:39,000 --> 00:04:43,180
Sometimes we're, developers are optimistic about how things work.

00:04:43,180 --> 00:04:45,580
In my experience in developing software, it's very, very

00:04:45,580 --> 00:04:48,330
tempting for us to ignore the things that we

00:04:48,330 --> 00:04:51,370
don't understand. And a big, huge long stack trace

00:04:51,370 --> 00:04:54,990
when you're getting started in Ruby is very intimidating,

00:04:54,990 --> 00:04:56,090
and people don't want to read it.

00:04:56,090 --> 00:04:58,360
But it's still intimidating, someone who's been developing Ruby

00:04:58,360 --> 00:05:01,530
for five or six years. And so my first

00:05:01,530 --> 00:05:02,849
point that I'd like to make is to make

00:05:02,849 --> 00:05:05,479
sure you read the errors that you receive. Read

00:05:05,479 --> 00:05:09,199
them closely. It's very easy to, to not be

00:05:09,199 --> 00:05:11,860
focusing, to not have our attention at a hundred

00:05:11,860 --> 00:05:14,199
percent, because, the goal here is that we want

00:05:14,199 --> 00:05:16,060
to be efficient, and if we're not giving our

00:05:16,060 --> 00:05:17,970
full attention, it's very easy for us to make

00:05:17,970 --> 00:05:20,900
mistakes that we, you know, glide over and then

00:05:20,900 --> 00:05:22,370
find out ten minutes later that if we'd only

00:05:22,370 --> 00:05:24,039
paid attention in the very beginning we would have

00:05:24,039 --> 00:05:24,680
caught it right away.

00:05:24,680 --> 00:05:26,699
So we're gonna do that right now. We're gonna

00:05:26,699 --> 00:05:30,039
make sure we look closely at that error and

00:05:30,039 --> 00:05:31,380
we're gonna read that. So the failure error is

00:05:31,380 --> 00:05:33,419
that the crab's abdomen should have an externa. Remember

00:05:33,419 --> 00:05:35,009
that yellow sac in the image.

00:05:35,009 --> 00:05:36,889
At some point in this test, that should be

00:05:36,889 --> 00:05:38,240
present.

00:05:38,240 --> 00:05:40,419
We're gonna look at the expected and, this is

00:05:40,419 --> 00:05:42,949
the part where my eyes, as an experienced Ruby

00:05:42,949 --> 00:05:45,919
developer, will start to glaze over. There's a class

00:05:45,919 --> 00:05:48,180
name followed by its location in memory, which is

00:05:48,180 --> 00:05:51,069
this nice hex to decimal string. And then it

00:05:51,069 --> 00:05:53,319
has a bunch of instance variables and I don't

00:05:53,319 --> 00:05:54,169
want to look at it. But I want to

00:05:54,169 --> 00:05:55,680
make sure that I know what that is.

00:05:55,680 --> 00:05:57,449
And, and so now, I know that that's an

00:05:57,449 --> 00:06:01,310
instance of Sacculina Carcini, which is the parasite. And

00:06:01,310 --> 00:06:04,610
instead of seeing an instance of that class, the

00:06:04,610 --> 00:06:07,410
parasite, we're seeing a nil value. So the next

00:06:07,410 --> 00:06:09,120
thing we want to look at, after we know

00:06:09,120 --> 00:06:10,889
we, after we're sure we're confident we know what

00:06:10,889 --> 00:06:12,910
the error is in our test suite, is to

00:06:12,910 --> 00:06:14,509
examine the stack trace.

00:06:14,509 --> 00:06:19,250
Now my tendency, and, when I first started developing,

00:06:19,250 --> 00:06:21,099
even still now, is to jump into the details

00:06:21,099 --> 00:06:23,310
and get to the nitty-gritty. I would advise against

00:06:23,310 --> 00:06:29,849
that. A well-written software will, will segregate out into

00:06:29,849 --> 00:06:32,460
separate, different layers of abstraction, and at the higher

00:06:32,460 --> 00:06:34,490
level of abstractions we can see the broad details

00:06:34,490 --> 00:06:36,860
of what the application or the program is supposed

00:06:36,860 --> 00:06:38,520
to do.

00:06:38,520 --> 00:06:40,699
If it's well-written software that'll be the case, and

00:06:40,699 --> 00:06:42,710
we're gonna assume that here. I find that that's

00:06:42,710 --> 00:06:44,690
the best way for us to partition the problem

00:06:44,690 --> 00:06:46,639
space where the bug can lie.

00:06:46,639 --> 00:06:49,909
So in a typical software application, you may have

00:06:49,909 --> 00:06:51,940
tens of thousands of lines of code. If you

00:06:51,940 --> 00:06:53,639
jump down into the details, there's a lot of

00:06:53,639 --> 00:06:55,250
details in the application you're gonna have to look

00:06:55,250 --> 00:06:56,919
through to find the bug. So if we can

00:06:56,919 --> 00:06:59,940
figure out a way to partition that space and

00:06:59,940 --> 00:07:01,530
maybe do like a binary search. Let's cut it

00:07:01,530 --> 00:07:03,199
in half and determine that the bug doesn't exist

00:07:03,199 --> 00:07:05,139
in this half. Then we can throw that half

00:07:05,139 --> 00:07:07,470
away. Then we're, we're doing fantastic. We can quickly

00:07:07,470 --> 00:07:11,440
find the, the root cause much, much faster and,

00:07:11,440 --> 00:07:13,289
and resolve it.

00:07:13,289 --> 00:07:15,080
So for that reason, I advice for you to

00:07:15,080 --> 00:07:17,110
start at the bottom of the stack trace for

00:07:17,110 --> 00:07:19,690
the first piece of code that you're responsible for.

00:07:19,690 --> 00:07:22,120
So that doesn't include libraries. You don't want to

00:07:22,120 --> 00:07:23,889
dig into the library code unless you're sure there's

00:07:23,889 --> 00:07:26,840
an error there. And ninety-nine - nine hundred and

00:07:26,840 --> 00:07:28,800
ninety-nine thousand - no, wait. Nine thousand nine hundred

00:07:28,800 --> 00:07:31,500
ninety-nine times out of ten thousand, it's always your

00:07:31,500 --> 00:07:32,789
code, right.

00:07:32,789 --> 00:07:34,610
It's never the other person's code. So in general

00:07:34,610 --> 00:07:36,830
find the code that you own and start there.

00:07:36,830 --> 00:07:38,349
That should be the highest level abstraction. We want

00:07:38,349 --> 00:07:39,560
to make sure that things are good there. And

00:07:39,560 --> 00:07:42,220
we understand the context as we dive into those

00:07:42,220 --> 00:07:43,389
layers.

00:07:43,389 --> 00:07:45,750
So in this case, the error's on line twelve

00:07:45,750 --> 00:07:50,099
of a feature file. Now we are using a

00:07:50,099 --> 00:07:53,300
tool called Turnup. This app- this program is using

00:07:53,300 --> 00:07:58,650
Turnup, which is a, gives us gerkin syntax. If

00:07:58,650 --> 00:08:01,080
you're not familiar with that, it's also used in

00:08:01,080 --> 00:08:03,849
Cucumber, which gives us a nice, high-level overview. The

00:08:03,849 --> 00:08:07,530
features are written in plain English. The implementi- implementation

00:08:07,530 --> 00:08:10,129
details are abstracted away. And that's what we have

00:08:10,129 --> 00:08:10,509
here. [00:08:11 - review paragraph]

00:08:10,509 --> 00:08:12,169
And the key point to take away from, from

00:08:12,169 --> 00:08:14,129
Turnip if you're not familiar with it, is that

00:08:14,129 --> 00:08:16,330
we have a series of steps that are executed

00:08:16,330 --> 00:08:19,460
in sequential order. If any step has, contains an

00:08:19,460 --> 00:08:22,599
expectation that fails, execution will stop on that step

00:08:22,599 --> 00:08:24,110
and that will be where the error is reported

00:08:24,110 --> 00:08:25,970
and the stack trace is shared with us.

00:08:25,970 --> 00:08:27,810
Like the one we stopped- the one we just

00:08:27,810 --> 00:08:28,360
saw.

00:08:28,360 --> 00:08:30,460
So line twelve is the line we're interested in.

00:08:30,460 --> 00:08:32,479
And if we look at line twelve, it's just

00:08:32,479 --> 00:08:34,200
telling, it's the same that was in the error,

00:08:34,200 --> 00:08:37,029
we don't have any more information. It's not telling

00:08:37,029 --> 00:08:39,370
us exactly what's going, so it's, the other thing

00:08:39,370 --> 00:08:40,909
I like to, to point out is that it's

00:08:40,909 --> 00:08:42,169
important to go back to my errors.

00:08:42,169 --> 00:08:46,550
It's important for me to maintain a, a, a

00:08:46,550 --> 00:08:50,050
good understanding of what my, what problem I'm trying

00:08:50,050 --> 00:08:51,430
to solve. If I get lost in between the

00:08:51,430 --> 00:08:53,079
trees I can forget - what problem was I

00:08:53,079 --> 00:08:54,440
trying to solve? So let's go back and look

00:08:54,440 --> 00:08:56,160
at our stack trace again.

00:08:56,160 --> 00:08:59,420
We're actually interested in the next level up. And

00:08:59,420 --> 00:09:01,910
in that case, that is spec steps dot rb

00:09:01,910 --> 00:09:05,730
on line thirty-two. So let's examine that step definition

00:09:05,730 --> 00:09:07,250
file and see if we can learn a little

00:09:07,250 --> 00:09:09,000
bit more.

00:09:09,000 --> 00:09:11,260
So here we are. I've opened up the spec

00:09:11,260 --> 00:09:14,430
steps dot rb file, and we are interested in

00:09:14,430 --> 00:09:17,399
line thirty-two.

00:09:17,399 --> 00:09:19,670
If we take a second to read this line,

00:09:19,670 --> 00:09:21,240
we can see that we have an instance variable

00:09:21,240 --> 00:09:24,040
of a crab. There's some method called payload that's

00:09:24,040 --> 00:09:26,529
being called on it. And we're, where there, we

00:09:26,529 --> 00:09:31,370
are indexing into that via infection, and we expect

00:09:31,370 --> 00:09:34,880
whatever the value of that is to equal a

00:09:34,880 --> 00:09:37,000
instance variable that's @sacculina_carcini.

00:09:37,000 --> 00:09:39,279
So if we think about our error, we can

00:09:39,279 --> 00:09:42,100
say that there, there's an instance of a sacculina_carcini,

00:09:42,100 --> 00:09:43,970
and we expect it to be there, but we're

00:09:43,970 --> 00:09:47,750
seeing nil instead.

00:09:47,750 --> 00:09:49,800
So if we take a step back, look at

00:09:49,800 --> 00:09:51,500
our feature again, we know the failure is on

00:09:51,500 --> 00:09:53,769
line twelve - then we have a really good

00:09:53,769 --> 00:09:57,570
idea of where the error is probably occurring. It's

00:09:57,570 --> 00:10:01,950
somewhere between lines three through eleven, right. A simple

00:10:01,950 --> 00:10:04,720
process of elimination. That's our, that's our search space.

00:10:04,720 --> 00:10:06,230
This is the prob- where the problem could reside.

00:10:06,230 --> 00:10:08,470
We need to figure out where in between lines

00:10:08,470 --> 00:10:10,790
three and eleven the error is actually occurring, determine

00:10:10,790 --> 00:10:12,709
the root cause, and resolve it.

00:10:12,709 --> 00:10:15,550
So, again at this, it's always tempting to jump

00:10:15,550 --> 00:10:17,889
down into the details of the crab and try

00:10:17,889 --> 00:10:20,850
to figure out what's going on. In this example

00:10:20,850 --> 00:10:23,880
that I've, I'm sharing with you, it's very, it's

00:10:23,880 --> 00:10:25,230
gonna be a simple example. We could get away

00:10:25,230 --> 00:10:27,500
with that. We can do that in small applications.

00:10:27,500 --> 00:10:29,750
But in larger applications, that maybe have years of

00:10:29,750 --> 00:10:34,029
development, years of different approaches to solving problems, with

00:10:34,029 --> 00:10:37,000
different styles in the same code base, maybe good

00:10:37,000 --> 00:10:39,370
code coverage in some sections of the application and

00:10:39,370 --> 00:10:41,269
not in the others. That can lead you down

00:10:41,269 --> 00:10:43,490
rabbit holes that take, that can distract you from

00:10:43,490 --> 00:10:44,720
actually getting your problem solved.

00:10:44,720 --> 00:10:47,019
So I say let's not do that. Let's keep

00:10:47,019 --> 00:10:49,700
things very simple. Let's try to stay assumption free,

00:10:49,700 --> 00:10:52,070
if we can. So we're gonna use the ByeBug

00:10:52,070 --> 00:10:55,529
gem. It's hosted on RubyGems. And there's two things

00:10:55,529 --> 00:10:57,970
that we have to do to use ByeBug.

00:10:57,970 --> 00:10:59,389
Number one, we're gonna add it to our gem

00:10:59,389 --> 00:11:03,130
file, run Bundler, and then number two, we need

00:11:03,130 --> 00:11:04,820
to make a method call. So we're looking at

00:11:04,820 --> 00:11:08,370
our step file here, and we're gonna add a

00:11:08,370 --> 00:11:11,269
method column here, and - but where should we

00:11:11,269 --> 00:11:12,399
put it?

00:11:12,399 --> 00:11:15,019
Remember, we have those steps when we were looking

00:11:15,019 --> 00:11:17,389
at our feature file, we saw lines three through

00:11:17,389 --> 00:11:20,029
eleven. We're looking at the actual step definitions now.

00:11:20,029 --> 00:11:22,649
Well, here's the first two, two features. There is

00:11:22,649 --> 00:11:25,050
a crab and there is a SacculinaCarcini.

00:11:25,050 --> 00:11:26,680
So there is a host and there is a

00:11:26,680 --> 00:11:29,240
parasite. From looking at lines two and line six,

00:11:29,240 --> 00:11:32,050
we can quickly see that there's not any relationship

00:11:32,050 --> 00:11:34,480
between those two instance variables.

00:11:34,480 --> 00:11:36,649
So this is probably not where our problem is

00:11:36,649 --> 00:11:38,320
going to lie. We can sort of say, make

00:11:38,320 --> 00:11:41,550
a good safe assumption, that the background steps -

00:11:41,550 --> 00:11:43,839
they're fine. If there was even more going on

00:11:43,839 --> 00:11:45,170
in there, we might have to dig into there

00:11:45,170 --> 00:11:47,790
a little further but, we're good.

00:11:47,790 --> 00:11:49,339
So we're gonna drop it into the very first

00:11:49,339 --> 00:11:52,660
step that's not a background step, that was occurring

00:11:52,660 --> 00:11:54,279
on line eight in the feature file, which in

00:11:54,279 --> 00:11:55,740
this case we're gonna drop in line ten. So

00:11:55,740 --> 00:12:00,130
we're dropping the debugger method call on line ten.

00:12:00,130 --> 00:12:01,639
The important thing to note about using a debugger,

00:12:01,639 --> 00:12:03,130
if you haven't used on in the past, is

00:12:03,130 --> 00:12:06,839
that when execution reaches the debugger statement, the debugger

00:12:06,839 --> 00:12:09,639
method call, the executation of our application is gonna

00:12:09,639 --> 00:12:12,019
stop, and we'll be dropped into the debugger session.

00:12:12,019 --> 00:12:15,110
So let's see that happening. We're gonna run our

00:12:15,110 --> 00:12:18,639
focused feature. And here we are. You can see

00:12:18,639 --> 00:12:20,120
that we ran Bundle, and that we ran our

00:12:20,120 --> 00:12:22,620
focus feature, and when we do that, we are

00:12:22,620 --> 00:12:24,949
paused. So let's take a moment and dissect what

00:12:24,949 --> 00:12:25,660
we see.

00:12:25,660 --> 00:12:28,540
If you've not used the debugger, and most peo-

00:12:28,540 --> 00:12:30,070
my familiarity when I started using a debugger was

00:12:30,070 --> 00:12:32,440
GGB. That's my background. When I came to Ruby

00:12:32,440 --> 00:12:34,570
I struggled with the fact that there wasn't great

00:12:34,570 --> 00:12:37,810
debugging support out of the gate.

00:12:37,810 --> 00:12:39,370
But if you're, if you're a person who's been

00:12:39,370 --> 00:12:40,760
using IDEs in the past, it may be a

00:12:40,760 --> 00:12:42,320
little confusing. So we're gonna break this down real

00:12:42,320 --> 00:12:46,660
quick. Here's the context. We can see ten lines

00:12:46,660 --> 00:12:51,839
of context, and we can see the line numbers

00:12:51,839 --> 00:12:54,920
that, where we're at in the left-hand column. We

00:12:54,920 --> 00:12:56,760
can see where the execution is paused - we're

00:12:56,760 --> 00:12:58,510
paused on line eleven. There's a nice little hash

00:12:58,510 --> 00:13:02,149
rocket there that shows us that to keep us

00:13:02,149 --> 00:13:03,860
knowing where we're at.

00:13:03,860 --> 00:13:06,120
So let's again examine the code in this step.

00:13:06,120 --> 00:13:09,120
So there's two lines, and I don't know what's

00:13:09,120 --> 00:13:10,720
going on in line eleven. I don't need to

00:13:10,720 --> 00:13:13,149
know. But I can tell from the error message

00:13:13,149 --> 00:13:16,860
that we recieved that line twelve looks really interesting.

00:13:16,860 --> 00:13:19,430
The crab's payload was nil, when the test expected

00:13:19,430 --> 00:13:21,399
there to be a value.

00:13:21,399 --> 00:13:25,680
So we're at the, we are at the, we

00:13:25,680 --> 00:13:27,180
want to make sure that we can see how

00:13:27,180 --> 00:13:30,360
that value changes throughout the executation of our application.

00:13:30,360 --> 00:13:32,209
So there's a nice feature in the debugger called

00:13:32,209 --> 00:13:34,500
display - this is a watched variable or a

00:13:34,500 --> 00:13:36,610
display variable. We're gonna write out display and then

00:13:36,610 --> 00:13:39,470
our arbitrary Ruby expression.

00:13:39,470 --> 00:13:41,600
And we're gonna hit enter. Once we do that,

00:13:41,600 --> 00:13:45,389
note that now in our debugger session, as part

00:13:45,389 --> 00:13:48,019
of that, we have something that is gonna display

00:13:48,019 --> 00:13:50,880
the expression on every debugger command that we provide

00:13:50,880 --> 00:13:52,930
to it. So we will, can, every step that

00:13:52,930 --> 00:13:55,540
we take through the application, every time executation is

00:13:55,540 --> 00:13:58,829
paused, we can verify - has something changed with

00:13:58,829 --> 00:14:00,639
that particular Ruby expression?

00:14:00,639 --> 00:14:03,649
All right. So we're gonna move forward. We've got

00:14:03,649 --> 00:14:05,100
that set now. So we're gonna use the step

00:14:05,100 --> 00:14:06,529
command. This is the next command. If you're not

00:14:06,529 --> 00:14:09,759
familiar with this, this is gonna execute one Ruby

00:14:09,759 --> 00:14:12,240
command and move us forward. So we're gonna enter,

00:14:12,240 --> 00:14:14,250
hit step and hit enter, and the first thing

00:14:14,250 --> 00:14:16,360
to note is to double check - has anything

00:14:16,360 --> 00:14:20,620
changed with our display Ruby expression? And nothing has.

00:14:20,620 --> 00:14:22,930
It's still, it still points to nothing.

00:14:22,930 --> 00:14:24,750
But something else has changed. You may have noticed

00:14:24,750 --> 00:14:28,050
that the context for where we're at has changed.

00:14:28,050 --> 00:14:30,459
And so we're no longer in the step definition

00:14:30,459 --> 00:14:33,639
file. Now we are in another file, which is

00:14:33,639 --> 00:14:35,139
cut-off a little bit on my slide but it's

00:14:35,139 --> 00:14:37,720
the, it's the parasite's attach method.

00:14:37,720 --> 00:14:40,199
And we can see that's not where we want

00:14:40,199 --> 00:14:42,170
to be. So we've just dropped down one level

00:14:42,170 --> 00:14:44,470
of abstraction, a little bit deeper than I think

00:14:44,470 --> 00:14:45,750
we need to be. We want to stay at

00:14:45,750 --> 00:14:47,690
the same level until we've determined that we need

00:14:47,690 --> 00:14:49,000
to dive deeper.

00:14:49,000 --> 00:14:50,949
This'll keep us from falling down rabbit holes and

00:14:50,949 --> 00:14:52,820
spending time doing things that are not gonna lead

00:14:52,820 --> 00:14:54,899
us to resolving the issue. Sometimes you get lucky

00:14:54,899 --> 00:14:57,100
if you try that, but it's, if we're playing

00:14:57,100 --> 00:14:59,420
a percentages game, it's not the way to go.

00:14:59,420 --> 00:15:02,209
So I'm gonna cheat a little bit here. I'm

00:15:02,209 --> 00:15:04,670
gonna type in step three. So I can pass

00:15:04,670 --> 00:15:07,910
an arbitrary argument, an integer argument, excuse me. I

00:15:07,910 --> 00:15:10,850
can pass an integer argument to step that'll tell

00:15:10,850 --> 00:15:11,620
it how many times to run.

00:15:11,620 --> 00:15:13,820
How do I run that it, I should run

00:15:13,820 --> 00:15:15,829
it three times? Well I can see here that

00:15:15,829 --> 00:15:17,610
there's three lines, but it's because I wrote this

00:15:17,610 --> 00:15:18,850
and I already know that. So we're gonna use

00:15:18,850 --> 00:15:21,440
that for now just to, just to move along.

00:15:21,440 --> 00:15:22,920
So we're gonna step three, and that's gonna take

00:15:22,920 --> 00:15:24,639
us back up to the level of abstraction that

00:15:24,639 --> 00:15:27,480
we were operating at before. So now we're, we're

00:15:27,480 --> 00:15:30,839
paused before the execution of line twelve. And we

00:15:30,839 --> 00:15:34,009
are back in our steps file and double-checking that

00:15:34,009 --> 00:15:35,350
our displayed variable hasn't changed.

00:15:35,350 --> 00:15:36,949
So even though I sort of cheated and I

00:15:36,949 --> 00:15:40,970
skipped through the attach method, nothing changed in our

00:15:40,970 --> 00:15:43,290
displayed Ruby expression. So we're good. I cheated a

00:15:43,290 --> 00:15:44,970
little bit, but that way I just cut-out at

00:15:44,970 --> 00:15:49,029
that method. If that method was seven, seven method

00:15:49,029 --> 00:15:51,389
calls, and maybe hitting external service and nothing changed,

00:15:51,389 --> 00:15:52,949
then I didn't have to go examine those things.

00:15:52,949 --> 00:15:53,940
So that's a win-win.

00:15:53,940 --> 00:15:58,019
So we're gonna step forward again, and wal-la. Something

00:15:58,019 --> 00:16:01,610
has changed. Our display val- our displayed Ruby expression,

00:16:01,610 --> 00:16:05,009
which is the crab's payload infection, has a value.

00:16:05,009 --> 00:16:07,639
This is fantastic.

00:16:07,639 --> 00:16:09,459
But our context has changed again. And this can

00:16:09,459 --> 00:16:11,529
be a little jarring when you're first using debugger.

00:16:11,529 --> 00:16:13,630
We're now in the turnip/rspec dot rb file. So

00:16:13,630 --> 00:16:18,410
now we have actually moved into the internal Turnip

00:16:18,410 --> 00:16:19,920
library. And this is not where we want to

00:16:19,920 --> 00:16:21,360
be at all. We're not even in our application

00:16:21,360 --> 00:16:23,170
anymore.

00:16:23,170 --> 00:16:26,199
So we, we're interested in what happens at the

00:16:26,199 --> 00:16:28,670
Turnip step levels of eight, nine, ten, and eleven,

00:16:28,670 --> 00:16:31,440
right. We're not concerned about background. And so how

00:16:31,440 --> 00:16:33,829
can we quickly stop execution at each of those

00:16:33,829 --> 00:16:34,519
lines?

00:16:34,519 --> 00:16:35,940
Well there's one way that I've already shared with

00:16:35,940 --> 00:16:38,540
you that we could use. We could add debugger

00:16:38,540 --> 00:16:42,569
statements to lines sixteen, twenty, twenty-four, and twenty-eight. So

00:16:42,569 --> 00:16:43,779
we have it on line ten, that it would

00:16:43,779 --> 00:16:46,240
look something like this. We'd have debugger statements. Now

00:16:46,240 --> 00:16:47,910
we're littering our code. But that's - there's a

00:16:47,910 --> 00:16:49,120
much better way.

00:16:49,120 --> 00:16:51,569
We can make use of another command called break,

00:16:51,569 --> 00:16:53,480
which adds a break point, which is a place

00:16:53,480 --> 00:16:56,130
that the execution in the application should stop. I'm

00:16:56,130 --> 00:16:58,279
using an abbreviated version of the break command. And

00:16:58,279 --> 00:17:02,149
it's normally, you use break, spelled out b-r-e-a-k. And

00:17:02,149 --> 00:17:03,810
instead I'm just using the shorthand version. I'm gonna

00:17:03,810 --> 00:17:06,700
create a break statement on line sixteen of steps

00:17:06,700 --> 00:17:07,170
dot rb.

00:17:07,170 --> 00:17:08,950
So I'm gonna do the same thing again on

00:17:08,950 --> 00:17:12,140
line twenty. Again on line twenty-four. Again on line

00:17:12,140 --> 00:17:15,130
twenty-eight. And now we've got our break points set

00:17:15,130 --> 00:17:17,510
at each of the step definitions. And now I'm

00:17:17,510 --> 00:17:20,270
gonna use a new command called continue, which says,

00:17:20,270 --> 00:17:23,540
continue execution of the application until the program completes,

00:17:23,540 --> 00:17:26,690
or I hit another break point.

00:17:26,690 --> 00:17:29,310
So we continue. We hit enter. And now we

00:17:29,310 --> 00:17:30,900
can see that we have a bre- we're at

00:17:30,900 --> 00:17:33,730
break point number one. Our crab's payload has stayed

00:17:33,730 --> 00:17:36,990
the same. And we are on line sixteen, all

00:17:36,990 --> 00:17:40,470
right. So fantastic. Nothing has changed. You can't quite

00:17:40,470 --> 00:17:43,670
see the memory location of this instance of sacculina_carcini.

00:17:43,670 --> 00:17:44,700
That's fine.

00:17:44,700 --> 00:17:48,280
Trust me. It's good. It hasn't changed. So we're

00:17:48,280 --> 00:17:51,570
gonna continue. Again, we're partitioning the search space. We're

00:17:51,570 --> 00:17:53,510
not concerned. We're looking to see, where does this

00:17:53,510 --> 00:17:55,830
value change for the first time.

00:17:55,830 --> 00:17:57,880
So we hit continue again. And now we hit

00:17:57,880 --> 00:18:02,290
break point number two. We examine our display val-

00:18:02,290 --> 00:18:06,170
variable. It's good. We hit continue again. Now I'm

00:18:06,170 --> 00:18:09,070
using an abbreviated version of continue, which is just

00:18:09,070 --> 00:18:11,740
the character c. And we hit break point number

00:18:11,740 --> 00:18:15,670
three. Again, our displayed arbitrary Ruby expression - in

00:18:15,670 --> 00:18:18,710
this case the crab's payload, is still the same.

00:18:18,710 --> 00:18:21,060
And then we hit continue again, and now we

00:18:21,060 --> 00:18:25,870
are at break point number four. Still nothing's changed

00:18:25,870 --> 00:18:28,570
in our displayed variable. This is interesting, right. We

00:18:28,570 --> 00:18:30,010
would have expected - we really just cut out

00:18:30,010 --> 00:18:32,480
about seventy-five percent of this search space, where the,

00:18:32,480 --> 00:18:35,480
where the error could reside.

00:18:35,480 --> 00:18:37,980
So we're looking at this line. The crab's, does,

00:18:37,980 --> 00:18:40,810
@crab, does it have an externa? This, this method

00:18:40,810 --> 00:18:43,200
call externa question mark. The last time we stepped

00:18:43,200 --> 00:18:44,830
into a method, we took a detour that wasn't

00:18:44,830 --> 00:18:48,870
necessary or informative. So let's look at another command

00:18:48,870 --> 00:18:49,960
that we can use. We're gonna look at the

00:18:49,960 --> 00:18:51,070
command called next.

00:18:51,070 --> 00:18:53,450
And the next command - what it does, is

00:18:53,450 --> 00:18:57,120
it will execute the next line of code, and

00:18:57,120 --> 00:18:59,040
if it's a method it will wait till that

00:18:59,040 --> 00:19:03,570
method returns before pausing execution again. So if this

00:19:03,570 --> 00:19:06,060
method contains a lot of things that are going

00:19:06,060 --> 00:19:07,250
on it can take a little bit of time,

00:19:07,250 --> 00:19:08,560
but once you hit, type in next and hit

00:19:08,560 --> 00:19:10,290
enter, you'll move to the next line. So in

00:19:10,290 --> 00:19:13,130
this case it's line twenty-nine.

00:19:13,130 --> 00:19:15,030
And there's something interesting about this line. If you

00:19:15,030 --> 00:19:16,640
were in the Pry talk, you might have, you

00:19:16,640 --> 00:19:21,600
might have expected this. There, there's the, there's nothing

00:19:21,600 --> 00:19:23,790
else that could be wrong. But if we look

00:19:23,790 --> 00:19:25,710
back to the desplay variable and start comparing, now

00:19:25,710 --> 00:19:27,870
that we have caught, we have the context between

00:19:27,870 --> 00:19:30,050
what we expect to see and what the test

00:19:30,050 --> 00:19:32,390
is expecting in the same place, we can see

00:19:32,390 --> 00:19:34,970
that we have a very common error.

00:19:34,970 --> 00:19:38,500
The string versus symbol. If you're a Rails developer,

00:19:38,500 --> 00:19:40,680
I would say that Rails facilitates us making this

00:19:40,680 --> 00:19:43,680
mistake because we use hash within different axis, which

00:19:43,680 --> 00:19:46,880
makes us think that strings and symbols that represent

00:19:46,880 --> 00:19:49,530
the same thing are, are the same thing, but

00:19:49,530 --> 00:19:50,480
they're not.

00:19:50,480 --> 00:19:52,200
This is instance is a regular Ruby program. This

00:19:52,200 --> 00:19:54,650
is probably the source of the bug in the

00:19:54,650 --> 00:19:56,840
code, and it's an easy one to make. So

00:19:56,840 --> 00:20:00,230
we're gonna quit out of our debugger session and

00:20:00,230 --> 00:20:03,140
test this out. And then for some reason all

00:20:03,140 --> 00:20:04,750
the debuggers like to make sure you're really sure

00:20:04,750 --> 00:20:09,090
and confident that you're ready to quit.

00:20:09,090 --> 00:20:11,960
So let's go dive into our steps file. We're

00:20:11,960 --> 00:20:13,870
going to make the change. We have a string

00:20:13,870 --> 00:20:17,030
for an infection. We're gonna change it to symbol.

00:20:17,030 --> 00:20:20,090
And then we're going to remove our debugger statement.

00:20:20,090 --> 00:20:21,710
We've got out steps file. We save that. And

00:20:21,710 --> 00:20:25,850
now we can run our test suite. And success!

00:20:25,850 --> 00:20:27,390
We've got a green test suite.

00:20:27,390 --> 00:20:29,580
Now we can move forward with confidence in developing

00:20:29,580 --> 00:20:33,070
our feature set or, our doing whatever is needed.

00:20:33,070 --> 00:20:38,200
So recap. We covered six commands. We talked about

00:20:38,200 --> 00:20:40,580
debugger. We talked about display. We talked about step,

00:20:40,580 --> 00:20:44,980
break, and continue and next. The debugger method paused

00:20:44,980 --> 00:20:47,000
the execution, but actually I sort of just lied

00:20:47,000 --> 00:20:48,150
to you guys a little bit.

00:20:48,150 --> 00:20:51,320
We, remember we're using the ByeBug gem. ByeBug doesn't

00:20:51,320 --> 00:20:55,330
support the method debugger. It actually requires that you

00:20:55,330 --> 00:20:57,960
use ByeBug. If you're using two point three point

00:20:57,960 --> 00:21:00,910
one, which is the latest version. So anywhere we

00:21:00,910 --> 00:21:02,830
saw the word debugger used, which was actually only

00:21:02,830 --> 00:21:05,120
in one location, you would have to use ByeBug.

00:21:05,120 --> 00:21:08,990
However, that should change. Just recently I, I submitted

00:21:08,990 --> 00:21:11,460
a poll request to the maintainer of ByeBug and

00:21:11,460 --> 00:21:11,980
that's been accepted.

00:21:11,980 --> 00:21:13,850
So the next version that gets pushed out to

00:21:13,850 --> 00:21:18,020
RubyGems, you can use the debugger alias.

00:21:18,020 --> 00:21:19,810
So to recap display - to go into a

00:21:19,810 --> 00:21:22,910
little more detail, you can pass an arbitrary Ruby

00:21:22,910 --> 00:21:27,250
expression. You can abbreviate it as d-i-s-p. The step

00:21:27,250 --> 00:21:29,750
command takes an arbitrary integer argument that tells how

00:21:29,750 --> 00:21:32,200
many times it needs to be done. The break

00:21:32,200 --> 00:21:34,120
command, the way we saw it used, you pass

00:21:34,120 --> 00:21:36,920
in a file name followed by a colon followed

00:21:36,920 --> 00:21:39,910
by a line number.

00:21:39,910 --> 00:21:42,530
You can abbre- use the abbreviated version. And then

00:21:42,530 --> 00:21:44,370
there's actually a couple other ways. One, you can

00:21:44,370 --> 00:21:47,800
drop in a break statement for the method, for

00:21:47,800 --> 00:21:50,430
a class method, by using class dot class method.

00:21:50,430 --> 00:21:52,480
You can also do the same thing for an

00:21:52,480 --> 00:21:55,600
instance method. And then we looked at the continue

00:21:55,600 --> 00:21:57,130
command, we looked at the next where you can

00:21:57,130 --> 00:21:58,990
also, we didn't see this, but you can pass

00:21:58,990 --> 00:22:02,260
in an integer as an optional argument to next.

00:22:02,260 --> 00:22:04,490
And you can also abbreviate next as n.

00:22:04,490 --> 00:22:06,770
So let's look at a couple of advance commands.

00:22:06,770 --> 00:22:08,660
Those commands that we just looked at, you could

00:22:08,660 --> 00:22:11,170
use that in any version of the libraries that

00:22:11,170 --> 00:22:12,760
I'm gonna talk about today, which are the majority

00:22:12,760 --> 00:22:15,770
of the debugging libraries. But we missed a couple

00:22:15,770 --> 00:22:18,210
of things that are advanced, that are available in

00:22:18,210 --> 00:22:20,480
ByeBug, that are highly useful.

00:22:20,480 --> 00:22:23,490
And those are finish, save, and source. So let's

00:22:23,490 --> 00:22:24,900
look at finish real quick and see how that

00:22:24,900 --> 00:22:27,580
would work.

00:22:27,580 --> 00:22:29,780
The finish - remember in our case study, a

00:22:29,780 --> 00:22:31,180
couple minutes ago when we were looking on line

00:22:31,180 --> 00:22:33,760
eleven and we stepped into the attach method and

00:22:33,760 --> 00:22:34,970
that was not the thing that we wanted to

00:22:34,970 --> 00:22:36,870
do? And so then I used step three to

00:22:36,870 --> 00:22:38,420
jump back out of it and I just happened

00:22:38,420 --> 00:22:40,190
to know that if I step three times we

00:22:40,190 --> 00:22:43,020
would, we would pop that frame off the stack.

00:22:43,020 --> 00:22:44,850
We could have used the finish command there instead.

00:22:44,850 --> 00:22:47,770
That would have, runs executation until a stack frame

00:22:47,770 --> 00:22:50,740
has popped off. And then re-pause execution the application.

00:22:50,740 --> 00:22:53,370
And so we come back out to line twelve.

00:22:53,370 --> 00:22:55,900
Super simple. Doesn't work in some of the libraries

00:22:55,900 --> 00:22:57,840
that we're gonna talk about in a couple minutes.

00:22:57,840 --> 00:23:01,740
Save. This one is supe- this one is key.

00:23:01,740 --> 00:23:06,300
In simple applications, you probably won't need this. But

00:23:06,300 --> 00:23:08,860
in more complex applications that have external dependencies on

00:23:08,860 --> 00:23:14,300
third-party APIs or on the database, you may establish,

00:23:14,300 --> 00:23:16,340
you may be trying to partition your search space

00:23:16,340 --> 00:23:18,050
of the problem domain to figure out where the

00:23:18,050 --> 00:23:20,160
bug is lying or where the root cause of

00:23:20,160 --> 00:23:21,420
the bug is lying.

00:23:21,420 --> 00:23:22,670
And you may have to exit out of your

00:23:22,670 --> 00:23:25,570
debugger session and reset that state if you're debugging

00:23:25,570 --> 00:23:28,870
something in your development environment. Or even worse, if

00:23:28,870 --> 00:23:31,840
you were develop- debugging something in y our production

00:23:31,840 --> 00:23:34,910
environment. So the save command allows us to save

00:23:34,910 --> 00:23:37,940
this, the state of the debugger session. So if

00:23:37,940 --> 00:23:43,150
we were to input arbi- some displayed expressions along

00:23:43,150 --> 00:23:46,080
with some break statements and we needed to change,

00:23:46,080 --> 00:23:48,010
we needed to exit out of the application and

00:23:48,010 --> 00:23:50,050
change some external state to see if we can

00:23:50,050 --> 00:23:52,460
trigger the bug again, we can use the save

00:23:52,460 --> 00:23:53,020
command.

00:23:53,020 --> 00:23:56,130
It takes a optional argument that is a file

00:23:56,130 --> 00:23:58,650
name. If you don't, it'll drop it somewhere in

00:23:58,650 --> 00:24:01,110
temp. And then once you hit enter there it

00:24:01,110 --> 00:24:03,060
actually saves it out to that file name. I

00:24:03,060 --> 00:24:04,430
like to use something like debug dot command -

00:24:04,430 --> 00:24:06,380
it's pretty obvious what that is. And then if

00:24:06,380 --> 00:24:10,240
we go look at the debug dot commands file

00:24:10,240 --> 00:24:12,480
we'll see that the statements, the lines that we

00:24:12,480 --> 00:24:13,710
just entered are there.

00:24:13,710 --> 00:24:17,290
Our break statements are there, our displayed value is

00:24:17,290 --> 00:24:20,510
there, as well as some more things. So let's,

00:24:20,510 --> 00:24:21,780
let's take a second to talk about what those

00:24:21,780 --> 00:24:26,060
are. Auto-eval means that if I type something, an

00:24:26,060 --> 00:24:29,490
arbitrary expression into my prompt in a debugger session,

00:24:29,490 --> 00:24:32,030
that it will automatically evaluate it. That's on by

00:24:32,030 --> 00:24:34,950
default in ByeBug. Basename is off. So right now

00:24:34,950 --> 00:24:37,600
we're seeing the full path for all files in

00:24:37,600 --> 00:24:38,950
the output.

00:24:38,950 --> 00:24:40,130
You can turn that off if you don't need

00:24:40,130 --> 00:24:43,510
that. I left it on here because that's the

00:24:43,510 --> 00:24:45,860
default. Testing - I'm not actually sure what that

00:24:45,860 --> 00:24:48,910
does, but it seems to be off, so. I

00:24:48,910 --> 00:24:51,100
guess that's a good thing. Autolist is the thing

00:24:51,100 --> 00:24:53,350
that's giving us the context. That's a default to

00:24:53,350 --> 00:24:56,160
ByeBug. And then autoirb is off. So if you

00:24:56,160 --> 00:24:58,930
like to use features of irb, you can turn

00:24:58,930 --> 00:25:00,590
that on so that, instead of landing into a

00:25:00,590 --> 00:25:02,950
debugger prompt, you're landed into a, you're dropped into

00:25:02,950 --> 00:25:03,960
an irb prompt.

00:25:03,960 --> 00:25:05,490
And the way that works is it'll try to

00:25:05,490 --> 00:25:08,510
execute whatever you type in as a debugger command

00:25:08,510 --> 00:25:10,020
first, and if that fails, then it'll execute it

00:25:10,020 --> 00:25:11,410
in the context of irb.

00:25:11,410 --> 00:25:14,140
So pretty cool. So that's the save command. You

00:25:14,140 --> 00:25:16,630
can think about the save command as serializing the

00:25:16,630 --> 00:25:18,930
state of your debugger session out to a file.

00:25:18,930 --> 00:25:21,120
Alternatively, you have source, which does what you would

00:25:21,120 --> 00:25:23,060
think. This is deserializing the state of a debugger

00:25:23,060 --> 00:25:23,890
session.

00:25:23,890 --> 00:25:25,250
This is when we've restarted and we don't want

00:25:25,250 --> 00:25:27,550
to have to re-enter all our break points. One

00:25:27,550 --> 00:25:28,850
of the things that I haven't talked about in

00:25:28,850 --> 00:25:31,970
this talk is that you can pass conditionals into

00:25:31,970 --> 00:25:35,120
your break commands as to, maybe if you want

00:25:35,120 --> 00:25:37,660
to only call the, hit the break point on

00:25:37,660 --> 00:25:39,650
another arbitrary Ruby expression.

00:25:39,650 --> 00:25:42,310
Remember, we're trying to partition our search space. So

00:25:42,310 --> 00:25:44,210
if you have a huge loop that's looping over

00:25:44,210 --> 00:25:45,840
things a thousands of times or a bunch of

00:25:45,840 --> 00:25:47,870
data you're not interested in, you might not need

00:25:47,870 --> 00:25:51,070
to wait until the nine hundred and ninety-ninth iteration

00:25:51,070 --> 00:25:52,460
of your loop, maybe if you know there's a

00:25:52,460 --> 00:25:54,560
thousand objects in there. You don't want to hit

00:25:54,560 --> 00:25:56,520
that break point nine-hundred ninety-nine times.

00:25:56,520 --> 00:25:58,510
So you can pass an arbitrary expression to handle

00:25:58,510 --> 00:25:59,510
that.

00:25:59,510 --> 00:26:01,430
So we use the source command. We hit enter.

00:26:01,430 --> 00:26:03,510
Fantastic. We see that our break points are automatically

00:26:03,510 --> 00:26:05,870
created for us nice and quick. There are the

00:26:05,870 --> 00:26:09,300
display variables there, and that the other session, session

00:26:09,300 --> 00:26:11,680
variables for the debugger are re-established.

00:26:11,680 --> 00:26:15,120
So fantastic. You're ready to run out and go

00:26:15,120 --> 00:26:17,650
use the debugger, right? You're super excited - I

00:26:17,650 --> 00:26:18,940
can tell. You guys are ready to walk right

00:26:18,940 --> 00:26:19,960
out.

00:26:19,960 --> 00:26:21,500
Hold up a second. Let's talk about which version

00:26:21,500 --> 00:26:23,510
of Ruby was I using, because that matters. This

00:26:23,510 --> 00:26:25,870
whole, the cont- the implicit context in this talk

00:26:25,870 --> 00:26:28,980
has been that we're using CRuby. We're using MRI.

00:26:28,980 --> 00:26:31,320
And in fact we've been using Ruby 2 point

00:26:31,320 --> 00:26:36,480
0 patch 247. Unfortunately it wasn't always so great.

00:26:36,480 --> 00:26:40,100
Here's your, your, your cheat sheet as to which

00:26:40,100 --> 00:26:42,480
libraries you, you can use with which versions of

00:26:42,480 --> 00:26:44,050
Ruby. If you're on 1.8 you have to use

00:26:44,050 --> 00:26:47,990
something called Ruby dash debug. If you're on Ruby

00:26:47,990 --> 00:26:51,220
1.9, you have a few options. None of them

00:26:51,220 --> 00:26:53,650
are super great. You have debugger, you have Ruby

00:26:53,650 --> 00:26:56,400
dash debug one nine, you have debugger2. If you've

00:26:56,400 --> 00:26:57,940
tried to use these in the past you may

00:26:57,940 --> 00:27:01,360
have found issues getting some C extensions to compile,

00:27:01,360 --> 00:27:04,190
that they depend upon. And if you're using Ruby

00:27:04,190 --> 00:27:06,030
2 point 0, you have a few options. Debugger's

00:27:06,030 --> 00:27:09,440
available. Debugger2 is available. ByeBug is the one I

00:27:09,440 --> 00:27:13,150
recommend. Both Debugger and Debugger2 are - they don't

00:27:13,150 --> 00:27:16,310
have full support for everything that they, that's documented.

00:27:16,310 --> 00:27:18,780
So why is this the case? So, it's because

00:27:18,780 --> 00:27:21,130
debuggers stink. Especially in Ruby. OK - that's my

00:27:21,130 --> 00:27:23,280
provocative slide. I'm just trying to say something, something

00:27:23,280 --> 00:27:27,340
that we can argue about later. But let's talk

00:27:27,340 --> 00:27:29,470
about why that's the case.

00:27:29,470 --> 00:27:31,650
Previous to Ruby 2 point 0, all of the

00:27:31,650 --> 00:27:35,290
debuggers would hook into internals to the C API.

00:27:35,290 --> 00:27:37,210
So anytime you have a new version of Ruby

00:27:37,210 --> 00:27:39,900
release, any time a new patch level came out,

00:27:39,900 --> 00:27:42,100
your debugger broke and you couldn't use the debugger.

00:27:42,100 --> 00:27:43,470
So if you were the type of a person,

00:27:43,470 --> 00:27:45,720
as I was, who likes using the debugger to

00:27:45,720 --> 00:27:51,020
quickly rectify the cognitive dissonance between my understanding of

00:27:51,020 --> 00:27:52,960
the code and how it actually works, there would

00:27:52,960 --> 00:27:55,020
be times where you wouldn't have a debugger available

00:27:55,020 --> 00:27:57,570
for your version of Ruby for a week, two

00:27:57,570 --> 00:28:00,680
weeks, to however long it took for the maintainer

00:28:00,680 --> 00:28:02,440
to, to bump their dependency.

00:28:02,440 --> 00:28:05,430
And what we're looking at here is the debugger

00:28:05,430 --> 00:28:10,100
changelog on GitHub.

00:28:10,100 --> 00:28:12,540
And the majority of point releases were to match

00:28:12,540 --> 00:28:15,560
up with point rel- patch levels that had been

00:28:15,560 --> 00:28:19,340
released for Ruby. So again, the early, in Ruby

00:28:19,340 --> 00:28:22,530
1.8 and 1.9 are, the C API was tightly

00:28:22,530 --> 00:28:25,590
coupled to, debuggers were tightly coupled to the Ruby

00:28:25,590 --> 00:28:28,550
C API. This was a problem. That's not the

00:28:28,550 --> 00:28:32,430
case anymore in Ruby 2 point 0. They've, they

00:28:32,430 --> 00:28:35,290
wrote, the Ruby core maintainers wrote something called trace

00:28:35,290 --> 00:28:37,640
point API, which is what gems can hook into

00:28:37,640 --> 00:28:40,820
to get, to look into the internals of Ruby.

00:28:40,820 --> 00:28:43,960
That's fantastic because now there's a well-defined interface and

00:28:43,960 --> 00:28:46,090
when the internals of the Ruby C API change,

00:28:46,090 --> 00:28:48,280
they, we, they, we have a contract that we

00:28:48,280 --> 00:28:50,790
know is not going to change. So if you're

00:28:50,790 --> 00:28:52,510
going to use, if you need to debug in

00:28:52,510 --> 00:28:55,160
Ruby 1.8, I saw on Heroku's blog post, I

00:28:55,160 --> 00:28:56,770
think it was within the last year, that there's

00:28:56,770 --> 00:28:59,110
still people who are using Ruby 1.8. There might

00:28:59,110 --> 00:29:01,440
have been even one that was still using Ruby

00:29:01,440 --> 00:29:01,890
1.8.6.

00:29:01,890 --> 00:29:04,780
But I, I'm pretty sure still 1.8.7, so if

00:29:04,780 --> 00:29:06,750
you're using 1.8 you're gonna use Ruby dash debug.

00:29:06,750 --> 00:29:09,510
In that case, if you want the functionality that

00:29:09,510 --> 00:29:11,750
we looked at here, you need to set a

00:29:11,750 --> 00:29:15,970
few variables and a ~/.rdebugrc file, a dot rdebugrc

00:29:15,970 --> 00:29:18,260
file. So you want to set your auto reload,

00:29:18,260 --> 00:29:20,940
your auto eval and your auto list.

00:29:20,940 --> 00:29:22,760
If you're using ByeBug and you want to change

00:29:22,760 --> 00:29:27,130
those default values, it's actually ByeBugrc as opposed to

00:29:27,130 --> 00:29:27,670
rdebugrc.

00:29:27,670 --> 00:29:30,360
If you're using 1.9, you have options. Good luck.

00:29:30,360 --> 00:29:33,090
I don't know which one will compile for you

00:29:33,090 --> 00:29:37,720
in your situation. But those are your options. Debugger,

00:29:37,720 --> 00:29:41,720
Debugger2, Ruby dash Debugger19. And then if you're going

00:29:41,720 --> 00:29:45,700
to use 2.0, just use ByeBug. Debugger and Debugger2,

00:29:45,700 --> 00:29:47,820
they're not fully fleshed out.

00:29:47,820 --> 00:29:50,360
And the person who's maintaining Debugger is not actively

00:29:50,360 --> 00:29:52,880
working in Ruby anymore, so there is an option

00:29:52,880 --> 00:29:55,230
if you want to, there's an opensource repository that

00:29:55,230 --> 00:29:57,210
needs some help, you could jump in, garbage collect

00:29:57,210 --> 00:29:59,160
there. There's a good amount of work that has

00:29:59,160 --> 00:29:59,840
been done.

00:29:59,840 --> 00:30:02,970
In fact, that's why ByeBug was created. The developer,

00:30:02,970 --> 00:30:04,640
he was frustrated with some problems he was having

00:30:04,640 --> 00:30:09,000
with Debugger, and so he created ByeBug to, to

00:30:09,000 --> 00:30:09,720
resolve that.

00:30:09,720 --> 00:30:11,840
So I said I was gonna talk about Pry.

00:30:11,840 --> 00:30:14,190
One of my many, many of, my many pet

00:30:14,190 --> 00:30:16,040
peeves is this tiny one here. Is that a

00:30:16,040 --> 00:30:16,970
lot of people will just say, oh I just

00:30:16,970 --> 00:30:19,130
use Pry to debug things. Well Pry isn't a

00:30:19,130 --> 00:30:21,910
debugger. If you were in the last talk, it

00:30:21,910 --> 00:30:25,280
was made clear that Pry is an alternative to

00:30:25,280 --> 00:30:27,690
IRB. What's really cool about it is the, the,

00:30:27,690 --> 00:30:29,960
the plugin architecture has allowed a lot of people

00:30:29,960 --> 00:30:33,100
to build really cool tools on top of Pry.

00:30:33,100 --> 00:30:34,950
It's got syntax highlighting built in which is really

00:30:34,950 --> 00:30:36,840
cool. So I'm gonna take a second to show

00:30:36,840 --> 00:30:39,030
us real quick what that would look like if

00:30:39,030 --> 00:30:40,300
we did our case study with Pry.

00:30:40,300 --> 00:30:44,000
So instead of just having ByeBug, we would have

00:30:44,000 --> 00:30:46,340
Pry dash ByeBug. So this would say that we

00:30:46,340 --> 00:30:50,200
have Pry available within our ByeBug sessions. And instead

00:30:50,200 --> 00:30:53,940
of using the debugger method call, which remember -

00:30:53,940 --> 00:30:55,860
we can't use until the next version of ByeBug

00:30:55,860 --> 00:30:58,330
is released. We would use binding dot Pry.

00:30:58,330 --> 00:31:03,480
So we run our feature. And execution is paused

00:31:03,480 --> 00:31:05,200
on that line. This is very similar to what

00:31:05,200 --> 00:31:06,840
we were seeing before. The only- the main thing

00:31:06,840 --> 00:31:10,290
to know that's different is you got pretty colors.

00:31:10,290 --> 00:31:10,840
Fantastic.

00:31:10,840 --> 00:31:13,350
You have commands like step. It's very similar. We

00:31:13,350 --> 00:31:16,300
saw that earlier. We have next. We're gonna next

00:31:16,300 --> 00:31:18,620
over that attach method. But one of the key

00:31:18,620 --> 00:31:21,240
differences to note, if you're gonna use, if you're

00:31:21,240 --> 00:31:23,300
a Pry lover and you want to use debugging

00:31:23,300 --> 00:31:26,250
functionality with Pry, is that you don't have the

00:31:26,250 --> 00:31:28,960
alias for B by default. You have to type

00:31:28,960 --> 00:31:30,580
out break.

00:31:30,580 --> 00:31:33,590
And you have, you have to type out the

00:31:33,590 --> 00:31:36,600
relative path of the file to where your application

00:31:36,600 --> 00:31:38,190
is running. So we have to write out specs

00:31:38,190 --> 00:31:40,190
forward slash step dot rb. We can't just say

00:31:40,190 --> 00:31:42,120
step dot rb and give it a line number.

00:31:42,120 --> 00:31:44,940
Other than that, as soon as, the other interesting

00:31:44,940 --> 00:31:45,980
thing that Pry does is as soon as I

00:31:45,980 --> 00:31:48,880
hit enter on this line, it actually takes us

00:31:48,880 --> 00:31:50,990
- it creates the break point for us, and

00:31:50,990 --> 00:31:54,220
takes us and shows us the context of that

00:31:54,220 --> 00:31:56,710
break point. So we haven't actually moved, we haven't

00:31:56,710 --> 00:31:58,840
actually executed anything other than creating a break point

00:31:58,840 --> 00:32:00,500
in our debugger session.

00:32:00,500 --> 00:32:01,600
But now we're seeing the context of that. That's

00:32:01,600 --> 00:32:04,390
a little different than we saw before. All right.

00:32:04,390 --> 00:32:06,430
So we're on- now we see where our breakpoint

00:32:06,430 --> 00:32:07,840
is. This is, this is nice in case you're

00:32:07,840 --> 00:32:09,390
like, oh I put the breakpoint in the wrong

00:32:09,390 --> 00:32:11,630
spot. Maybe you can delete the breakpoint or disable

00:32:11,630 --> 00:32:12,690
it.

00:32:12,690 --> 00:32:15,500
So once we actually hit continue, then we see

00:32:15,500 --> 00:32:17,250
that we've actually hit the break point. And a

00:32:17,250 --> 00:32:19,070
nice thing that, that Pry is giving us is

00:32:19,070 --> 00:32:20,410
it's showing us how many times we hit that

00:32:20,410 --> 00:32:22,330
break point.

00:32:22,330 --> 00:32:24,550
If you do want the aliases, there is a

00:32:24,550 --> 00:32:26,960
way to do that in Pry. You can alias

00:32:26,960 --> 00:32:30,490
commands. You can drop that in a dot Pryrc.

00:32:30,490 --> 00:32:35,500
So that's fantastic.

00:32:35,500 --> 00:32:37,760
If you want to use Pry with debugger, you

00:32:37,760 --> 00:32:39,860
can use Pry dash debugger. That'll give you the

00:32:39,860 --> 00:32:41,520
debugger that has all the problems that we talked

00:32:41,520 --> 00:32:44,240
about along with Pry in Ruby 1.9. And you

00:32:44,240 --> 00:32:45,700
can use it with Pry dash ByeBug.

00:32:45,700 --> 00:32:50,720
So real quick, a couple more things about ByeBug.

00:32:50,720 --> 00:32:52,820
It was a mashup of something called debase. Debase

00:32:52,820 --> 00:32:56,690
is what's being used in RubyMine. And so they,

00:32:56,690 --> 00:33:00,520
he, the developer, David, took the C extension portion

00:33:00,520 --> 00:33:02,690
of Debase and combined with the lib and the

00:33:02,690 --> 00:33:05,240
test ears of the debugger and put that together,

00:33:05,240 --> 00:33:06,960
put in a lot of work to fix any

00:33:06,960 --> 00:33:11,030
of the open issues that were existing on debugger,

00:33:11,030 --> 00:33:13,230
and so that's why you need to use ByeBug.

00:33:13,230 --> 00:33:14,670
Because it actually works and does all the things

00:33:14,670 --> 00:33:17,060
it says it's gonna use and do.

00:33:17,060 --> 00:33:20,310
It works on Ruby 2. Doesn't work on 1.9.

00:33:20,310 --> 00:33:23,350
Doesn't have any internal source code dependencies. It's fantastic.

00:33:23,350 --> 00:33:27,500
All right. So that covers CRuby, right. Now you

00:33:27,500 --> 00:33:30,500
have a good idea of which debuggers to use

00:33:30,500 --> 00:33:32,000
with which version of Ruby you need to use

00:33:32,000 --> 00:33:33,460
it for. You know the basics of how to

00:33:33,460 --> 00:33:36,170
do it, and hopefully if the version you're using

00:33:36,170 --> 00:33:37,730
supports the advance commands, you know how to do

00:33:37,730 --> 00:33:38,590
that as well.

00:33:38,590 --> 00:33:41,750
What about Rubinius? Great news. Rubinius has a debugger

00:33:41,750 --> 00:33:43,660
built in. If you've never used Rubinius, this is

00:33:43,660 --> 00:33:46,000
fantastic. You don't have to include a separate library.

00:33:46,000 --> 00:33:47,570
It has all of the functionality that we just

00:33:47,570 --> 00:33:50,870
talked about, plus a little bit more. That's awesome.

00:33:50,870 --> 00:33:54,470
What about JRuby? If you're using JRuby and you

00:33:54,470 --> 00:33:57,490
need to, and you want to debug things, you've

00:33:57,490 --> 00:33:59,340
got the whole Java ecosystem to lean on. There's

00:33:59,340 --> 00:34:01,890
a tool called VisualVM. I've used it in the

00:34:01,890 --> 00:34:03,670
past when I needed to do memory debugging in

00:34:03,670 --> 00:34:10,070
Ruby. And so there's, the tooling system in Java

00:34:10,070 --> 00:34:12,230
is much more mature than it is in Ruby.

00:34:12,230 --> 00:34:15,220
For, and, so that's fantastic. So you have those

00:34:15,220 --> 00:34:16,050
are your choices there.

00:34:16,050 --> 00:34:19,310
So to recap, we, we looked at a case

00:34:19,310 --> 00:34:22,030
study. We looked at the basic commands of next,

00:34:22,030 --> 00:34:24,710
step, break, continue, and display. We look at some

00:34:24,710 --> 00:34:27,500
advance commands that are not available everywhere, but they're

00:34:27,500 --> 00:34:31,480
available in ByeBug. That's finish, source, and save. If

00:34:31,480 --> 00:34:33,690
you're using Ruby 1.8.7, you're gonna use Ruby dash

00:34:33,690 --> 00:34:36,399
debug. If you're using 1.9 you're gonna use Debugger,

00:34:36,399 --> 00:34:37,520
and if you're using 2 point 0 you're gonna

00:34:37,520 --> 00:34:38,510
use ByeBug.

00:34:38,510 --> 00:34:40,230
If you're gonna use Pry, you can. You can

00:34:40,230 --> 00:34:42,000
use them with both of them. And in fact

00:34:42,000 --> 00:34:43,810
in the last talk they talked about using Pry

00:34:43,810 --> 00:34:47,110
dash plus. I would highly recommend that as well.

00:34:47,110 --> 00:34:50,880
My slides are available up on SpeakerDeck. I'll tweet

00:34:50,880 --> 00:34:53,520
those out later, too. You can see the source

00:34:53,520 --> 00:34:56,330
code repository for what we used in this project.

00:34:56,330 --> 00:34:59,950
Attributions for the nasty photo of the, the host

00:34:59,950 --> 00:35:03,400
crab with its Sacculina Carcini parasite. That's the credit

00:35:03,400 --> 00:35:04,470
there.

00:35:04,470 --> 00:35:06,440
I've got a nice stache for a reason -

00:35:06,440 --> 00:35:08,250
you can talk to me about it. If you

00:35:08,250 --> 00:35:09,660
want to get to know me, you can go

00:35:09,660 --> 00:35:10,780
check out my blog. If you want to follow

00:35:10,780 --> 00:35:12,110
me on Twitter. If you want to work with

00:35:12,110 --> 00:35:13,560
me, I work with a company called Big Nerd

00:35:13,560 --> 00:35:17,190
Ranch. We develop IOS Android apps. We also the

00:35:17,190 --> 00:35:20,300
back-ends for those things in Ruby.

00:35:20,300 --> 00:35:22,530
And I thank them for giving me the time

00:35:22,530 --> 00:35:25,260
to work on this type of stuff, and come

00:35:25,260 --> 00:35:26,950
and work on these types of presentations and share

00:35:26,950 --> 00:35:29,070
it with you guys. Thanks to the organizers. And

00:35:29,070 --> 00:35:30,280
if you want to code with me and don't

00:35:30,280 --> 00:35:30,680
want to work with me, you can come code

00:35:30,680 --> 00:35:32,230
with me on GitHub.

00:35:32,230 --> 00:35:34,080
So that's it. I'm open up to question if

00:35:34,080 --> 00:35:36,880

YouTube URL: https://www.youtube.com/watch?v=ri2JcQ4Qp80


