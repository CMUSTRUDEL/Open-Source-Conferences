Title: Ruby Conf 2013 - Arrrr me hearty! Sailing the Seas of DRb in a Shoe
Publication date: 2020-01-27
Playlist: RubyConf 2013
Description: 
	By Davy Stevenson, Rein Henrichs and Eric Hodel

You insouciant scalawags will share the experience of a lifetime as you play a game built atop DRb and Shoes based generally upon the phenomenon known as Spaceteam! Except with Pirates!!

Join us as we skirt the treacherous shoals of DRb, learning techniques that will allow you to navigate it like you were born on the high seas!

Dig for the buried treasure of Rinda to discover the mysterious secrets of the RingProvider and TupleSpace!

Storm the fortress of Shoes and learn about it's secret trapdoors and avoid the dungeons!

Team up with your fellow attendees to plunder the high seas and avoid the Curse of the Live Demo! Yarrrr....â˜ 

Help us caption & translate this video!

http://amara.org/v/FG52/
Captions: 
	00:00:16,000 --> 00:00:19,400
DAVY STEVENSON: Hey everyone, we ready? Ready for some pirate game?

00:00:19,460 --> 00:00:21,000
AUDIENCE: Arrrr!

00:00:21,000 --> 00:00:25,060
D.S.: Arrr! I am Davy Stevenson. I work at

00:00:25,060 --> 00:00:27,880
the Ezri Portland R&D Center in Portland, Oregon.

00:00:27,880 --> 00:00:31,119
ERIC HODEL: I am Eric Hodel. I work for

00:00:31,119 --> 00:00:34,770
AT&T under Coby, who is doing the filming here.

00:00:34,770 --> 00:00:37,110
REIN HENRICHS: I am Rein Henrichs. I also work

00:00:37,110 --> 00:00:39,160
for Coby at AT&T and I am responsible for

00:00:39,160 --> 00:00:43,760
looking like a pirate and saying 'arrrr' a lot.

00:00:43,760 --> 00:00:45,390
Arrrr!

00:00:45,390 --> 00:00:52,280
D.S.: So, who here has played Spaceteam or know

00:00:52,280 --> 00:00:55,000
what Spaceteam is? Excellent. We got at least, like,

00:00:55,000 --> 00:00:57,380
a third of you who kind of know what's

00:00:57,380 --> 00:00:59,200
coming. And the rest of you are in for

00:00:59,200 --> 00:01:01,710
a treat. Let's see if the sound here works.

00:01:01,710 --> 00:01:04,259
Maybe. This is the Spaceteam trailer. Sound, sound, there

00:01:04,259 --> 00:01:05,140
is sound.

00:01:05,140 --> 00:01:05,650
-SPACETEAM TRAILER-

00:01:05,650 --> 00:01:12,650
GUY: This is the captain speaker. I've had reports

00:01:13,250 --> 00:01:14,000
of incoherent shouting and confusion.

00:01:14,000 --> 00:01:17,000
D.S.: No sound. Anyway. So Spaceteam is a co-located

00:01:17,000 --> 00:01:24,000
collaborative mobile game, on IOS and Android, where you

00:01:24,620 --> 00:01:30,370
work together as a Spaceteam. So everyone gets a

00:01:30,370 --> 00:01:36,130
randomly generated board indicating your, your spaceship controls, and

00:01:36,130 --> 00:01:37,890
you get a command that you need, are responsible

00:01:37,890 --> 00:01:40,550
for making sure gets activated.

00:01:40,550 --> 00:01:46,170
However, that command is not necessarily on your board.

00:01:46,170 --> 00:01:53,170
You also have to avoid asteroids. And wormholes. And

00:01:55,909 --> 00:01:59,130
there's other technical difficulties like, all of your controls

00:01:59,130 --> 00:02:04,810
turning into crazy symbols. Or falling apart. Or there's

00:02:04,810 --> 00:02:07,780
boo and random other things that can ruin your

00:02:07,780 --> 00:02:10,619
life.

00:02:10,619 --> 00:02:17,619
There is also a massive player mode, which I

00:02:18,170 --> 00:02:21,159
actually didn't know about until watching this trailer. Anyway,

00:02:21,159 --> 00:02:22,510
it's gotten lots of awards and is a lot

00:02:22,510 --> 00:02:26,329
of fun to play. So Eric and I like

00:02:26,329 --> 00:02:30,510
writing DRb, and so when we, we're trying to

00:02:30,510 --> 00:02:33,169
figure out a good topic for, you know, a

00:02:33,169 --> 00:02:35,620
talk about it, and we decided, well, what if

00:02:35,620 --> 00:02:39,810
we reimplemented Spaceteam, but used, used Ruby to do

00:02:39,810 --> 00:02:40,159
it?

00:02:40,159 --> 00:02:43,739
What if we used DRB and Rinda to do

00:02:43,739 --> 00:02:48,290
the distributed performance, and why, why not use Shoes

00:02:48,290 --> 00:02:54,859
to write the, the GUI application?

00:02:54,859 --> 00:02:56,959
And then we decided, well, you know, Space --

00:02:56,959 --> 00:03:03,090
that Space. Let's do it with pirates.

00:03:03,090 --> 00:03:03,999
So-

00:03:03,999 --> 00:03:07,819
E.H.: So, we chose to use DRb because it,

00:03:07,819 --> 00:03:10,799
it leaves, easily allows us to communicate between multiple

00:03:10,799 --> 00:03:13,700
processes, where you either, on the same machine or

00:03:13,700 --> 00:03:16,659
across the network. And you're both able to get

00:03:16,659 --> 00:03:19,650
and send data really easily. It's really transparent and

00:03:19,650 --> 00:03:22,359
it's peer-to-peer so you don't need one server or

00:03:22,359 --> 00:03:24,689
any of that. You just go and connect to

00:03:24,689 --> 00:03:27,249
each other.

00:03:27,249 --> 00:03:30,269
We use Rinda because it allows us to flexibly

00:03:30,269 --> 00:03:33,189
discover the other services. So we don't have to

00:03:33,189 --> 00:03:35,359
have any, any explicit destination. You can just put

00:03:35,359 --> 00:03:37,230
it in this, it includes a tuplespace, you can

00:03:37,230 --> 00:03:39,889
just put it in the tuplespace, and put information

00:03:39,889 --> 00:03:43,029
in the tuplespace, get it out through Breezy.

00:03:43,029 --> 00:03:46,870
But, we chose Shoes because - Davy is gonna

00:03:46,870 --> 00:03:47,340
explain.

00:03:47,340 --> 00:03:50,150
D.S.: So, you know, a lot of people have

00:03:50,150 --> 00:03:51,510
asked me, you know, why, why didn't you just

00:03:51,510 --> 00:03:53,199
write a web-server and do, you know, do it

00:03:53,199 --> 00:03:57,180
that way? And one is that, you know, HTTP

00:03:57,180 --> 00:04:00,519
is already sort of a distributed protocol. Trying to

00:04:00,519 --> 00:04:03,439
do things with DRB and Rinda behind the scenes,

00:04:03,439 --> 00:04:06,099
it's not quite as obvious that something awesome is

00:04:06,099 --> 00:04:09,799
happening, because we all are, for the most part,

00:04:09,799 --> 00:04:13,049
have done web-programming before. And, you know, have, setting

00:04:13,049 --> 00:04:15,499
up a server somewhere far away, that's, you know,

00:04:15,499 --> 00:04:18,449
easy to handle a lot of the, that background

00:04:18,449 --> 00:04:19,019
processing.

00:04:19,019 --> 00:04:22,610
Not only that, but this is RubyConf. Not RailsConf,

00:04:22,610 --> 00:04:25,120
or web-programming with RubyConf. So we really wanted to

00:04:25,120 --> 00:04:26,840
put a talk together that had nothing to do

00:04:26,840 --> 00:04:30,020
with web programming at all. So Shoes.

00:04:30,020 --> 00:04:32,770
Shoes is a really great resource that the Ruby

00:04:32,770 --> 00:04:35,539
community has. But it needs a little bit of

00:04:35,539 --> 00:04:38,250
love and attention. For us, it was a perfect

00:04:38,250 --> 00:04:41,479
showcase for distributed code, because it itself has, you

00:04:41,479 --> 00:04:47,370
know, no communication built in at all. Shoes is

00:04:47,370 --> 00:04:54,330
also, you know, I think, finding some great examples

00:04:54,330 --> 00:04:55,770
of really cool things you can do for Shoes

00:04:55,770 --> 00:04:57,080
and trying to get people a little bit more

00:04:57,080 --> 00:05:00,030
involved in the development was another really big plus

00:05:00,030 --> 00:05:03,840
for me, personally.

00:05:03,840 --> 00:05:06,419
R.H.: So you might all be wondering, why pirates?

00:05:06,419 --> 00:05:10,409
And as the resident pirate expert and beard, I'm

00:05:10,409 --> 00:05:12,030
going to tell you there are two reasons why

00:05:12,030 --> 00:05:12,340
pirates.

00:05:12,340 --> 00:05:16,289
One, because this is a Ruby Conference, and pirates

00:05:16,289 --> 00:05:19,930
like treasure. Nothing? And two, because pirates are clearly

00:05:19,930 --> 00:05:23,300
better than, than space teams. Clearly more exciting to

00:05:23,300 --> 00:05:27,479
be a pirate. And that's it.

00:05:27,479 --> 00:05:30,539
No, that's it. That was- Also, yarr. I have

00:05:30,539 --> 00:05:33,430
to. I'm contractually obligated to say yarr.

00:05:33,430 --> 00:05:38,099
D.S.: OK, so I Tweeted this out yesterday. Tweeted

00:05:38,099 --> 00:05:40,569
it out last night, really late. Other people re-Tweeted

00:05:40,569 --> 00:05:42,319
it out this morning. But just to make sure,

00:05:42,319 --> 00:05:44,400
if you want to play this game, you need

00:05:44,400 --> 00:05:46,930
to have followed the preparation instructions. You have to

00:05:46,930 --> 00:05:48,639
install JRuby, install Shoes.

00:05:48,639 --> 00:05:49,580
AUDIENCE: Yay JRuby!

00:05:49,580 --> 00:05:52,060
D.S.: And we'll get back to that. There's also

00:05:52,060 --> 00:05:54,740
a - all this information, which is now in

00:05:54,740 --> 00:05:58,620
the pirate_game GitHub repo. So we want to look

00:05:58,620 --> 00:06:02,419
there and find it - all the preparation instructions.

00:06:02,419 --> 00:06:06,960
E.H.: So DRB is a remote invo- a method

00:06:06,960 --> 00:06:09,770
invocation library for Ruby. So it allows you to

00:06:09,770 --> 00:06:12,840
use remote methods as if they were local, and

00:06:12,840 --> 00:06:15,319
call them the same way you would call local

00:06:15,319 --> 00:06:18,110
methods. It's part of the standard library, and you

00:06:18,110 --> 00:06:22,599
can load it with require DRb.

00:06:22,599 --> 00:06:24,259
And so here we have an example of a

00:06:24,259 --> 00:06:27,469
shared array over DRb. In the first line we

00:06:27,469 --> 00:06:29,770
create an array and then we go and share

00:06:29,770 --> 00:06:31,639
it, and we put nil in that first argument

00:06:31,639 --> 00:06:35,300
so that DRb can pick which URI. So we

00:06:35,300 --> 00:06:36,900
display that, and then at the bottom here we

00:06:36,900 --> 00:06:41,490
wait for you to quit the server.

00:06:41,490 --> 00:06:42,860
And so, in the client, we just go ahead

00:06:42,860 --> 00:06:44,849
and reference it with that URI that we, we

00:06:44,849 --> 00:06:47,229
printed out. You know, we can go and apend

00:06:47,229 --> 00:06:48,759
an a or push a b or a c

00:06:48,759 --> 00:06:52,620
on there. And then in a, in a third

00:06:52,620 --> 00:06:55,330
process, we can go and get that reference again,

00:06:55,330 --> 00:06:56,939
and then if we go and print out within

00:06:56,939 --> 00:06:59,159
the array it goes to the server and it

00:06:59,159 --> 00:07:03,650
can see all the stuff we've added to it.

00:07:03,650 --> 00:07:06,499
And Rinda is an implementation of the Rinda tuplespace

00:07:06,499 --> 00:07:09,439
model of distributed programming. There's a, there's a book

00:07:09,439 --> 00:07:11,090
on this, but I forgot to include the link.

00:07:11,090 --> 00:07:13,180
So ask me later.

00:07:13,180 --> 00:07:14,719
And it's also part of the standard library. You

00:07:14,719 --> 00:07:17,689
can load it up with rinda slash tuplespace. And

00:07:17,689 --> 00:07:21,689
it stores tuples or, kind of like, arrays, so,

00:07:21,689 --> 00:07:24,689
an arbitrary length of data. So you can write

00:07:24,689 --> 00:07:26,419
a tuple into the space, and then the reader

00:07:26,419 --> 00:07:28,860
take tools out of the space with, what, what

00:07:28,860 --> 00:07:31,249
are, what, what - excuse me, with templates.

00:07:31,249 --> 00:07:35,469
And they are what Rinda calls can anti-tuple.

00:07:35,469 --> 00:07:38,710
And so this is an example we use in

00:07:38,710 --> 00:07:43,270
pirate_game. So there's several operations. There's read and write

00:07:43,270 --> 00:07:45,949
and take. And so with the take here, we

00:07:45,949 --> 00:07:48,139
go in with this template, so the first thing

00:07:48,139 --> 00:07:49,610
- it must be a button. And the second

00:07:49,610 --> 00:07:51,349
thing must be a string. But the third thing,

00:07:51,349 --> 00:07:54,129
it's a range. So it uses the case equals

00:07:54,129 --> 00:07:55,169
operator to match that.

00:07:55,169 --> 00:07:57,120
And then the last one is a nil. It

00:07:57,120 --> 00:07:59,509
can be anything you want. And so that'll just

00:07:59,509 --> 00:08:01,740
wait until a tuple appears in the space that

00:08:01,740 --> 00:08:03,919
matches it. And then you'll get that tuple back

00:08:03,919 --> 00:08:06,779
out. And so this is waiting for the user

00:08:06,779 --> 00:08:09,159
to press the keel button. So when the user

00:08:09,159 --> 00:08:12,169
presses that on, possibly another machine, it'll go and

00:08:12,169 --> 00:08:14,099
write this tuple in with the current timestamp. And

00:08:14,099 --> 00:08:16,180
so if those match up you press the keel

00:08:16,180 --> 00:08:17,919
button at the right time, then that takes it,

00:08:17,919 --> 00:08:20,189
it goes and returns and, you know, can register

00:08:20,189 --> 00:08:23,979
the action that you've pressed.

00:08:23,979 --> 00:08:26,529
And then, on top of the tuplespace, Rinda provides

00:08:26,529 --> 00:08:31,169
service discovery through the Rinda::Ring library. And so it

00:08:31,169 --> 00:08:38,169
has coordinates between processes using broadcast or unicast UDP

00:08:38,740 --> 00:08:42,040
messages with multisport- multicast support coming in Ruby 2.1.

00:08:42,040 --> 00:08:45,540
And it holds the tuplespace use for all the

00:08:45,540 --> 00:08:47,590
And then there's also the ring provider, which is

00:08:47,590 --> 00:08:50,140
a wrapper for advertising your service on, into the

00:08:50,140 --> 00:08:52,140
tuplespace.

00:08:52,140 --> 00:08:56,920
D.S.: So Shoes was originally created by _why, to

00:08:56,920 --> 00:09:00,680
be a very simple cross-platform GUI toolkit for the

00:09:00,680 --> 00:09:04,120
Ruby language. There has been a couple of rewrites

00:09:04,120 --> 00:09:07,740
since then. The current is, Shoes4 is an all-Ruby

00:09:07,740 --> 00:09:10,490
rewrite. It is still under active development. So if

00:09:10,490 --> 00:09:12,490
you go look at the preparation instructions you'll notice

00:09:12,490 --> 00:09:15,510
that I require you to check out a very

00:09:15,510 --> 00:09:18,180
specific commit of Shoes4.

00:09:18,180 --> 00:09:20,770
Mainly because, people have been doing a lot of

00:09:20,770 --> 00:09:22,630
awesome work in the month of October, and we

00:09:22,630 --> 00:09:24,250
were not able to keep up and make sure

00:09:24,250 --> 00:09:27,290
that Pirate Game works with the, all the cool

00:09:27,290 --> 00:09:29,140
new stuff that's been added. We're gonna be working

00:09:29,140 --> 00:09:33,340
on that in the future, hopefully.

00:09:33,340 --> 00:09:37,640
So the, there's a Shoes manual online, which has

00:09:37,640 --> 00:09:41,000
been for the, you know, previous Shoes versions. So

00:09:41,000 --> 00:09:43,280
you can read a lot more about a lot

00:09:43,280 --> 00:09:45,380
of the things that, that are provided by Shoes.

00:09:45,380 --> 00:09:47,560
There's, you know, basic layout, so you, how do,

00:09:47,560 --> 00:09:50,270
how do things lay out on the screen, do

00:09:50,270 --> 00:09:53,560
they stack, do they flow?

00:09:53,560 --> 00:09:56,040
There's a variety of input elements that are provided,

00:09:56,040 --> 00:10:01,450
bit- buttons, radio and check-boxes, text fields and things

00:10:01,450 --> 00:10:04,330
like that. You are able to draw directly on

00:10:04,330 --> 00:10:08,010
the screen. You can do background images, colors, you

00:10:08,010 --> 00:10:13,320
can draw shapes, arcs. Various other shapes. Add images.

00:10:13,320 --> 00:10:17,830
And you're able to animate, move, and have events.

00:10:17,830 --> 00:10:20,430
You can keep, do key events or, you know,

00:10:20,430 --> 00:10:24,000
other things like that. Hover. And so the, there's

00:10:24,000 --> 00:10:25,440
a link to the manual if you want to

00:10:25,440 --> 00:10:28,650
check that out a little bit more in depth.

00:10:28,650 --> 00:10:33,220
So the, currently Shoes4 definitely has some still some

00:10:33,220 --> 00:10:38,950
functionality gap from the previous Shoes implementations. And like

00:10:38,950 --> 00:10:40,680
I said before, a lot of this might be

00:10:40,680 --> 00:10:43,010
already out of date, because I know that they've

00:10:43,010 --> 00:10:46,970
been adding a lot of these features lately. But

00:10:46,970 --> 00:10:49,190
for, for our implementation, we had to kind of

00:10:49,190 --> 00:10:52,150
get around some of the deficiencies, lack of features

00:10:52,150 --> 00:10:54,260
that were in Shoes4 right now.

00:10:54,260 --> 00:10:56,840
So not all the movement methods have been fully

00:10:56,840 --> 00:10:59,670
implemented on all the objects. You can, you can

00:10:59,670 --> 00:11:02,890
move things but not displace, which is always fun.

00:11:02,890 --> 00:11:06,570
Some of the width/height, you know, accessors settings aren't

00:11:06,570 --> 00:11:09,660
working very well. And the other thing that was

00:11:09,660 --> 00:11:11,200
kind of rough for us was that the general

00:11:11,200 --> 00:11:13,920
show, hide, and toggle options on all the objects

00:11:13,920 --> 00:11:15,760
didn't exist, so we had to kind of, basically,

00:11:15,760 --> 00:11:19,070
destroy and rebuild things a lot. But hopefully that

00:11:19,070 --> 00:11:21,980
will be going away soon.

00:11:21,980 --> 00:11:24,370
The other thing that kind of took us a

00:11:24,370 --> 00:11:26,130
little bit, a little while to figure out -

00:11:26,130 --> 00:11:28,700
so I figured I would state it for all

00:11:28,700 --> 00:11:32,680
of you, was that the animations, you know, run

00:11:32,680 --> 00:11:34,730
in parallel, and they're, you do need to manually

00:11:34,730 --> 00:11:37,510
manage them. So unlike a lot of the other

00:11:37,510 --> 00:11:39,180
sorts of things when you clear off the screen,

00:11:39,180 --> 00:11:41,140
it does not clear out the animations like you

00:11:41,140 --> 00:11:42,980
might expect it would.

00:11:42,980 --> 00:11:46,030
You need to explicitly call start, stop, remove methods

00:11:46,030 --> 00:11:49,090
on those animation blocks. So there was a fun

00:11:49,090 --> 00:11:51,180
time when I was like, why is the app

00:11:51,180 --> 00:11:54,590
just getting slower and slower as I move the

00:11:54,590 --> 00:11:57,680
screens, because I was basically stacking animations upon themselves

00:11:57,680 --> 00:11:59,800
over and over and over again. And not, and

00:11:59,800 --> 00:12:02,400
losing references to them and not clearing them up.

00:12:02,400 --> 00:12:04,460
So, pro-tip, you need to keep track of your

00:12:04,460 --> 00:12:06,940
animations and, for us, it was really helpful to

00:12:06,940 --> 00:12:10,230
separate out the drawing from the animation steps. So

00:12:10,230 --> 00:12:12,120
that was, really helped clean up our code a

00:12:12,120 --> 00:12:14,990
lot.

00:12:14,990 --> 00:12:17,260
The other thing that, you know, we found by

00:12:17,260 --> 00:12:20,480
developing this, you know, for, what I can tell,

00:12:20,480 --> 00:12:22,510
for Shoes, is a pretty complex Shoes app, was

00:12:22,510 --> 00:12:24,920
that, you know, it can highlight a lot of

00:12:24,920 --> 00:12:29,130
the regressions that might be introduced as Shoes4 development

00:12:29,130 --> 00:12:30,100
continues.

00:12:30,100 --> 00:12:33,090
And so hopefully we're gonna be using that to,

00:12:33,090 --> 00:12:35,090
use the game to detect those issues and be

00:12:35,090 --> 00:12:36,720
able to fix them and contribute back to Shoes.

00:12:36,720 --> 00:12:38,510
I know I already have a couple patches that

00:12:38,510 --> 00:12:41,260
I want to contribute, so hopefully, you know, that

00:12:41,260 --> 00:12:43,560
can be a really great benefit for having something

00:12:43,560 --> 00:12:46,760
like this around to test on regularly.

00:12:46,760 --> 00:12:48,910
So-

00:12:48,910 --> 00:12:53,560
E.H.: So we're, we, all of this is opensource,

00:12:53,560 --> 00:12:56,400
and we have three gems. They're under Davy's repo

00:12:56,400 --> 00:13:02,050
as pirate_command, shuttlecraft, and pirate_game.

00:13:02,050 --> 00:13:06,820
R.H.: So in the grand tradition of noun that

00:13:06,820 --> 00:13:10,740
verb and action that thing generators, we present you

00:13:10,740 --> 00:13:14,320
the pirate themed generator, which has a purpose provided

00:13:14,320 --> 00:13:19,170
entirely by Davy, that includes the word booty. Which

00:13:19,170 --> 00:13:21,620
is going to cause us some problems later, I

00:13:21,620 --> 00:13:22,190
expect.

00:13:22,190 --> 00:13:24,050
But you are free to use this. It is

00:13:24,050 --> 00:13:26,410
free as in grog for all of you to,

00:13:26,410 --> 00:13:29,830
to enjoy. So please, add some more pirate-themed awesomeness

00:13:29,830 --> 00:13:35,280
to your web applications and enterprise applications. I think

00:13:35,280 --> 00:13:38,860
it'd be great.

00:13:38,860 --> 00:13:44,310
D.S.: So, shuttlecraft was built to basically add an

00:13:44,310 --> 00:13:48,600
extra layer of stuff upon the sort of distributed

00:13:48,600 --> 00:13:52,270
system stuff that's provided by Rinda. It's explicitly helped

00:13:52,270 --> 00:13:56,770
simplify a lot of the registration, and client services

00:13:56,770 --> 00:13:59,870
management, you know. With Rinda it's kind of, you

00:13:59,870 --> 00:14:01,830
eith- you get a full tuplespace, but you are

00:14:01,830 --> 00:14:05,670
kind of left to implement everything on top of

00:14:05,670 --> 00:14:06,360
that.

00:14:06,360 --> 00:14:08,770
So with the shuttlecraft, you're very easily able to

00:14:08,770 --> 00:14:12,860
create a mothership that handles managing the tuplespace and

00:14:12,860 --> 00:14:16,980
watching for registrations, and then multiple shuttlecrafts can dynamically

00:14:16,980 --> 00:14:21,260
find any motherships around and register very easily. And

00:14:21,260 --> 00:14:23,940
then both sides can easily get all the list

00:14:23,940 --> 00:14:25,450
of register services.

00:14:25,450 --> 00:14:27,890
We also added a bunch of convenience methods to

00:14:27,890 --> 00:14:32,370
help broadcast messages from either side, as well. And

00:14:32,370 --> 00:14:34,340
hopefully we'll be adding to that sort of functionality,

00:14:34,340 --> 00:14:35,700
making it a little bit, a little bit easier

00:14:35,700 --> 00:14:37,390
to use Rinda, since it is a little bit

00:14:37,390 --> 00:14:44,240
dense.

00:14:44,240 --> 00:14:48,290
And then of course, there's pirate_game, which you use

00:14:48,290 --> 00:14:53,630
to play the Pirate Game.

00:14:53,630 --> 00:14:56,450
So this is kind of a, perhaps a traditional

00:14:56,450 --> 00:14:59,160
game architecture, where you have sort of a game

00:14:59,160 --> 00:15:02,000
master that handles all of the business logic, and

00:15:02,000 --> 00:15:06,070
it explicitly issues commands to all the games and

00:15:06,070 --> 00:15:09,620
manages the actions coming back from that.

00:15:09,620 --> 00:15:13,520
But that is no fun at all. And so

00:15:13,520 --> 00:15:17,510
by using Rinda and DRB we're able to implement

00:15:17,510 --> 00:15:22,780
a variety of other game architectures.

00:15:22,780 --> 00:15:25,700
So I'll talk about three of, sort of, the

00:15:25,700 --> 00:15:29,930
sub-components of the Pirate Game. The registration, layout generation,

00:15:29,930 --> 00:15:33,390
and the, the more complicated issuing the action and

00:15:33,390 --> 00:15:38,550
gathering responses and saving those actions as completed.

00:15:38,550 --> 00:15:41,160
So yay diagrams! Because there's not space on all

00:15:41,160 --> 00:15:44,620
the slides for all the words, we'll be color-coding

00:15:44,620 --> 00:15:49,760
the components like so.

00:15:49,760 --> 00:15:52,750
So for registration, and this is sort of the

00:15:52,750 --> 00:15:56,930
stuff that's baked in directly to the shuttlecraft gem,

00:15:56,930 --> 00:16:00,480
so each of the games simply, when it tries

00:16:00,480 --> 00:16:04,580
to register with the game, it just writes a

00:16:04,580 --> 00:16:10,360
name into the tuplespace.

00:16:10,360 --> 00:16:12,300
And then the game master can use the read

00:16:12,300 --> 00:16:15,370
all to collect those, those names, so the, so

00:16:15,370 --> 00:16:17,450
these names will live in the tuplespace as long

00:16:17,450 --> 00:16:20,930
as those services are registered. And in that way

00:16:20,930 --> 00:16:23,850
the game master, and also the games themselves, can

00:16:23,850 --> 00:16:26,450
know who else is around. And so that URI

00:16:26,450 --> 00:16:28,880
there, that's the, the DRB URI that can be

00:16:28,880 --> 00:16:32,060
used to directly communicate to any of those processes.

00:16:32,060 --> 00:16:36,250
And then when the, the games, you know, exit,

00:16:36,250 --> 00:16:39,040
then they take those names out of the tuplespace

00:16:39,040 --> 00:16:43,360
to indicate that they are not registered anymore.

00:16:43,360 --> 00:16:46,150
So for the layout generation, this is, you know,

00:16:46,150 --> 00:16:48,800
our game, the, you know, issuing what buttons should

00:16:48,800 --> 00:16:51,650
appear on each of the games. For right now,

00:16:51,650 --> 00:16:54,070
the simplest way was to generate a list of

00:16:54,070 --> 00:16:56,670
all the buttons that should per- should be scattered

00:16:56,670 --> 00:16:59,420
amongst all the different games, and then, and each

00:16:59,420 --> 00:17:01,550
game gets that full list.

00:17:01,550 --> 00:17:03,230
And then also it gets a smaller list of

00:17:03,230 --> 00:17:06,390
the buttons that should be displayed on that particular

00:17:06,390 --> 00:17:08,890
game for that stage. And for this, we just

00:17:08,890 --> 00:17:12,170
simply use direct DRB. There's no real need to

00:17:12,170 --> 00:17:14,870
use Rinda in this, in this case, since we

00:17:14,870 --> 00:17:18,829
know exactly who we're talking to at this point.

00:17:18,829 --> 00:17:25,829
So now we get to the fun part, where

00:17:25,900 --> 00:17:29,230
those, those actions are being generated on each of

00:17:29,230 --> 00:17:31,430
the games. And so the architecture that we took

00:17:31,430 --> 00:17:32,940
was that each of the games was going to

00:17:32,940 --> 00:17:36,530
be responsible for generating that action and then waiting

00:17:36,530 --> 00:17:39,940
for the message from the other games to indicate

00:17:39,940 --> 00:17:42,740
that that button has been clicked.

00:17:42,740 --> 00:17:47,700
The game master is responsible for gathering up all

00:17:47,700 --> 00:17:51,410
the list of correctly completed actions. And so here,

00:17:51,410 --> 00:17:54,860
we're, we simply are, are, running a take that

00:17:54,860 --> 00:17:57,830
will watch for the completed action tuples as they're

00:17:57,830 --> 00:18:00,940
entered into the tuplespace. And so this will, will

00:18:00,940 --> 00:18:06,160
block intel, a matching tuple has entered.

00:18:06,160 --> 00:18:11,440
So the game generates an action. Haul the Keel.

00:18:11,440 --> 00:18:15,450
Then it also sets up a take, which blocks

00:18:15,450 --> 00:18:18,360
and waits for the button click from the other

00:18:18,360 --> 00:18:23,820
game. So the other game has clicked the button,

00:18:23,820 --> 00:18:27,680
and writes a tuple into the tuplespace. Which is

00:18:27,680 --> 00:18:30,940
similar to the previous slide. Here is the button

00:18:30,940 --> 00:18:34,240
action, the button that was actually clicked, which was

00:18:34,240 --> 00:18:37,250
Keel, the timestamp that it was clicked and the,

00:18:37,250 --> 00:18:40,640
the URI that was, actually clicked it. So who's

00:18:40,640 --> 00:18:42,360
this from.

00:18:42,360 --> 00:18:44,780
And so the timestamp is really important to be

00:18:44,780 --> 00:18:46,270
able to detect whether or not the button was

00:18:46,270 --> 00:18:48,380
clicked within the correct time period. Because if it's

00:18:48,380 --> 00:18:51,940
too late than the other game will not register

00:18:51,940 --> 00:18:54,280
that as a correct action.

00:18:54,280 --> 00:18:56,280
And the from we use basically just for, for

00:18:56,280 --> 00:18:58,630
tracking. We want to be able to indicate statistics

00:18:58,630 --> 00:19:00,630
on end about how many people have, you know,

00:19:00,630 --> 00:19:05,230
who's correctly performed how many actions.

00:19:05,230 --> 00:19:07,210
So now that that button has been put into

00:19:07,210 --> 00:19:09,760
the tuplespace, that's going to match that take that

00:19:09,760 --> 00:19:15,090
the previous game is blocking on. And so it

00:19:15,090 --> 00:19:17,350
takes that tuple out and then writes a new

00:19:17,350 --> 00:19:21,150
one in, an action tuple. Again with the Keel,

00:19:21,150 --> 00:19:24,150
and just passing through that timestamp, and from URI,

00:19:24,150 --> 00:19:26,820
to indicate that the, that that action was completed

00:19:26,820 --> 00:19:29,140
successfully.

00:19:29,140 --> 00:19:31,550
And that, of course, matches the take that the

00:19:31,550 --> 00:19:33,900
game master is looking for. And so it grabs

00:19:33,900 --> 00:19:37,770
that action, increments it, marks, you know, as a,

00:19:37,770 --> 00:19:42,690
another completed action for the, in the total count,

00:19:42,690 --> 00:19:47,670
and we'll move on.

00:19:47,670 --> 00:19:49,180
So I'd also like to discuss a little bit

00:19:49,180 --> 00:19:51,290
of our, kind of like, internal structure of the

00:19:51,290 --> 00:19:54,710
application. So we split up into kind of three

00:19:54,710 --> 00:19:55,710
main components.

00:19:55,710 --> 00:19:58,250
The apps, the master app and the client app

00:19:58,250 --> 00:20:00,740
at the bottom. Those are basically the, the Shoes

00:20:00,740 --> 00:20:04,500
apps themselves. But the vast majority of the logic

00:20:04,500 --> 00:20:08,320
is not in the Shoes app. The, that's in

00:20:08,320 --> 00:20:10,750
the game master and client objects, which are wrappers

00:20:10,750 --> 00:20:15,260
for the shuttlecraft gems. So the, the apps themselves

00:20:15,260 --> 00:20:19,600
are responsible only for layout, animation, and drawing.

00:20:19,600 --> 00:20:23,040
Pretty much any game logic is not in the

00:20:23,040 --> 00:20:26,010
main Shoes app itself, it's in the sub-object. So

00:20:26,010 --> 00:20:30,160
the game master knows how to generate stages, collect

00:20:30,160 --> 00:20:33,000
information about the actions, et cetera, et cetera. And

00:20:33,000 --> 00:20:36,920
the client knows how to automatically generate the actions

00:20:36,920 --> 00:20:39,080
and watch for the button clicks and all that

00:20:39,080 --> 00:20:42,980
fun stuff. And then the shuttlecraft gem handles all

00:20:42,980 --> 00:20:49,290
the communication through the tupplespace.

00:20:49,290 --> 00:20:56,290
R.H.: Arrrr! You land lovers and scallywags, prepare yourselves

00:20:57,010 --> 00:21:00,740
for the Pirate Game. That's all I got.

00:21:00,740 --> 00:21:07,740
D.S.: OK, so preparation again. JRuby, Shoes4, and the,

00:21:07,760 --> 00:21:11,040
now, next important step, which is to install the

00:21:11,040 --> 00:21:15,940
pirate_game gem. So, a brief discussion about networking.

00:21:15,940 --> 00:21:17,640
Will you take this one?

00:21:17,640 --> 00:21:20,190
E.H.: So theoretically, this should all work on the

00:21:20,190 --> 00:21:23,430
conference wifi, but for best results, you'll want to

00:21:23,430 --> 00:21:25,750
be using, like a personal access point or a

00:21:25,750 --> 00:21:28,620
private network. Also, for reasons of security, which we'll

00:21:28,620 --> 00:21:31,020
be covering later in the talk.

00:21:31,020 --> 00:21:34,570
So, to run the game, someone needs to run

00:21:34,570 --> 00:21:37,370
the ring server. We haven't made this automatic as

00:21:37,370 --> 00:21:40,910
part of the game master yet. You only need

00:21:40,910 --> 00:21:42,780
to run one, and if you run more than

00:21:42,780 --> 00:21:45,740
one, you may have some problems. So try not

00:21:45,740 --> 00:21:46,670
to do that.

00:21:46,670 --> 00:21:48,780
And we, you know, we're working to get this,

00:21:48,780 --> 00:21:52,970
this easier to use. And you also need only

00:21:52,970 --> 00:21:55,400
one game master. But if you have multiple the,

00:21:55,400 --> 00:21:57,770
the client will show all the different ones, so

00:21:57,770 --> 00:21:59,760
you don't have, if you don't, if your friends

00:21:59,760 --> 00:22:01,360
don't like you very much, maybe they'll create your

00:22:01,360 --> 00:22:03,580
own- their own, and then they can leave you

00:22:03,580 --> 00:22:05,730
alone. And, you know, that'll be sad.

00:22:05,730 --> 00:22:09,150
Also, if the game master crashes, the, the game

00:22:09,150 --> 00:22:11,580
is stranded. We had it working for awhile and

00:22:11,580 --> 00:22:13,690
then we broke it. So, you'll have to just

00:22:13,690 --> 00:22:17,970
restart the client.

00:22:17,970 --> 00:22:21,340
So, Pirate Game. It is for one to four

00:22:21,340 --> 00:22:23,640
players. So you can, in fact, play the game

00:22:23,640 --> 00:22:26,260
all by yourself. It's totally a feature and not

00:22:26,260 --> 00:22:29,710
a bug. So the, the first step of course

00:22:29,710 --> 00:22:34,150
is to enter your name.

00:22:34,150 --> 00:22:35,900
Then you need to find your game. So this

00:22:35,900 --> 00:22:38,020
is where the game masters are found by the

00:22:38,020 --> 00:22:40,880
Rinda services discovery. And you will see any of

00:22:40,880 --> 00:22:43,760
the games that are visible to, to Rinda at

00:22:43,760 --> 00:22:45,400
that point. So if you're on the conference wifi

00:22:45,400 --> 00:22:46,640
that might be a lot. If you're on a

00:22:46,640 --> 00:22:50,510
personal access point, that would probably be only one.

00:22:50,510 --> 00:22:52,480
And you can always hit the rescan button, which

00:22:52,480 --> 00:22:55,500
will, you know, scan the network again in case

00:22:55,500 --> 00:22:57,690
another game master has popped up. So it doesn't

00:22:57,690 --> 00:23:02,990
really matter in what order these apps are launched.

00:23:02,990 --> 00:23:05,600
So one issue that, or, basically not, a feature

00:23:05,600 --> 00:23:07,620
that hasn't been developed yet, which is, if the

00:23:07,620 --> 00:23:09,400
join fails - so if you try and join

00:23:09,400 --> 00:23:11,260
a game that already has four players, or a

00:23:11,260 --> 00:23:13,940
game that's already started, you will not recieve a

00:23:13,940 --> 00:23:16,850
very good error message, and instead will enter an

00:23:16,850 --> 00:23:20,090
empty disconnected pirate hub all alone, with no one

00:23:20,090 --> 00:23:21,610
to chat to.

00:23:21,610 --> 00:23:22,920
E.H.: And no grawk.

00:23:22,920 --> 00:23:24,120
D.S.: And no grawk.

00:23:24,120 --> 00:23:27,130
And so if you do successfully connect, you'll be

00:23:27,130 --> 00:23:29,260
taken to the Pirate Pub. And so you can

00:23:29,260 --> 00:23:34,070
see there that, that, if you're registered or not.

00:23:34,070 --> 00:23:36,710
If you're unregistered with the game master, it will

00:23:36,710 --> 00:23:40,360
say not registered and have a little register button.

00:23:40,360 --> 00:23:41,950
And here, in the Pirate Pub, you can chat

00:23:41,950 --> 00:23:45,590
with all of your fellow Pirates and discuss fun

00:23:45,590 --> 00:23:45,920
things.

00:23:45,920 --> 00:23:48,500
And yes, you do have to click the send

00:23:48,500 --> 00:23:50,350
button. Really difficult. All of us are used to

00:23:50,350 --> 00:23:53,210
hitting enter and having it work, but have not

00:23:53,210 --> 00:23:54,990
figured out how to hook up the key bindings

00:23:54,990 --> 00:23:57,250
for that correctly, if there even are any. So

00:23:57,250 --> 00:24:02,110
if anyone knows, let me know.

00:24:02,110 --> 00:24:04,400
So at this moment, the game master also needs

00:24:04,400 --> 00:24:08,480
to trigger each stage. In the future, we would

00:24:08,480 --> 00:24:11,530
like to switch over to the sort of space

00:24:11,530 --> 00:24:14,070
team model, where each, each player gets to indicate

00:24:14,070 --> 00:24:16,200
whether they're ready to proceed or not. but that

00:24:16,200 --> 00:24:20,190
just hasn't happened quite yet.

00:24:20,190 --> 00:24:23,010
So for, then, as you enter each stage, you

00:24:23,010 --> 00:24:24,080
need to work together to keep the ship afloat,

00:24:24,080 --> 00:24:27,500
man the ship, keep a-heading in the right direction,

00:24:27,500 --> 00:24:30,600
and beware of bad weather.

00:24:30,600 --> 00:24:35,870
So this is a quick little demo.

00:24:35,870 --> 00:24:40,090
E.H.: So, we got the chat here. Why is

00:24:40,090 --> 00:24:42,210
the rum gone?

00:24:42,210 --> 00:24:45,200
And then over, I'm over clicking the start button.

00:24:45,200 --> 00:24:47,170
So here's a stage. So you gotta like, here's

00:24:47,170 --> 00:24:50,240
your action. Walk towards the crow's nest. You gotta

00:24:50,240 --> 00:24:52,200
find the button. It's really hard cause it is

00:24:52,200 --> 00:24:54,429
windy on this screen. So the buttons are really

00:24:54,429 --> 00:24:59,760
flying around.

00:24:59,760 --> 00:25:03,480
It's random. We're sorry. Yeah. I clicked the wrong

00:25:03,480 --> 00:25:07,940
button there cause it's hard. And then when you're

00:25:07,940 --> 00:25:11,710
all done clicking the musket buttons, it'll take you

00:25:11,710 --> 00:25:16,720
back to the pirate pub here in a second.

00:25:16,720 --> 00:25:18,020
So you can ask why the rum is gone

00:25:18,020 --> 00:25:19,240
again.

00:25:19,240 --> 00:25:23,940
D.S.: It is a little bit more exciting when

00:25:23,940 --> 00:25:27,900
you're playing with more than one person, honest. There's

00:25:27,900 --> 00:25:31,040
very little shouting when you're playing by yourself.

00:25:31,040 --> 00:25:35,790
E.H.: So, security. DRB doesn't give security a very

00:25:35,790 --> 00:25:38,500
high priority. It's more focused on ease of use

00:25:38,500 --> 00:25:42,970
and transparency. There are some security features, though. So

00:25:42,970 --> 00:25:47,010
the, the biggest problem is, DRb gives you full

00:25:47,010 --> 00:25:50,740
access to the remote machine. Anything you can do,

00:25:50,740 --> 00:25:52,460
the server can do for itself, you can do

00:25:52,460 --> 00:25:54,830
on the server. So that means if you can

00:25:54,830 --> 00:25:59,140
system_rm, rf, on the server, you can do it

00:25:59,140 --> 00:26:00,220
locally.

00:26:00,220 --> 00:26:04,450
Yeah, so, also like, instance_eval and all those things,

00:26:04,450 --> 00:26:07,370
they're all, you know, very dangerous methods. So, I've

00:26:07,370 --> 00:26:08,679
also, so using, you know, you've got to be

00:26:08,679 --> 00:26:12,870
careful about that. Who you use DRb services with.

00:26:12,870 --> 00:26:14,520
And I've written a proof of concept of how

00:26:14,520 --> 00:26:18,510
to infect another DRb machine with code from a

00:26:18,510 --> 00:26:22,070
local machine called the drb dash worm. It's a

00:26:22,070 --> 00:26:24,700
gem you can see there. It doesn't do anything

00:26:24,700 --> 00:26:27,510
dangerous now, and I don't expect it to do

00:26:27,510 --> 00:26:29,390
anything dangerous, but you know, this is just so

00:26:29,390 --> 00:26:31,790
you can look and see what kind of stuff

00:26:31,790 --> 00:26:34,000
that you can do.

00:26:34,000 --> 00:26:37,710
So at the message level, DRb has two methods

00:26:37,710 --> 00:26:40,850
of security. So you can add methods to this

00:26:40,850 --> 00:26:45,600
insecure method array, but it's gonna be very difficult

00:26:45,600 --> 00:26:47,620
for you to weed out all of the not

00:26:47,620 --> 00:26:50,360
dangerous methods, because it's an opt-out, not an opt-in

00:26:50,360 --> 00:26:52,700
to good methods.

00:26:52,700 --> 00:26:55,370
You can also set the safe level for the

00:26:55,370 --> 00:27:00,309
thread that the DRb server evaluates the methods in.

00:27:00,309 --> 00:27:04,390
However, that relies on tainting, and not every object

00:27:04,390 --> 00:27:07,110
gets tainted properly when it's sent over, so it's

00:27:07,110 --> 00:27:10,110
possible that you can get a non-tainted string with

00:27:10,110 --> 00:27:12,820
user-local content in it, even under a higher safe

00:27:12,820 --> 00:27:19,820
level where things like eval would be disabled.

00:27:19,900 --> 00:27:22,559
So if you don't need network access for your

00:27:22,559 --> 00:27:24,830
server, you can run DRb over a unix socket.

00:27:24,830 --> 00:27:26,809
And so that's just restricted to the one host,

00:27:26,809 --> 00:27:30,020
and you can use filesystem permissions to control your

00:27:30,020 --> 00:27:32,030
access. And since you have no network access, you

00:27:32,030 --> 00:27:34,299
don't have to worry about other people being able

00:27:34,299 --> 00:27:38,179
to inject new content, or, inject bad methods.

00:27:38,179 --> 00:27:41,210
If you're running on a network, you can use

00:27:41,210 --> 00:27:43,750
an access control list. It's like, all of the

00:27:43,750 --> 00:27:46,330
other access control lists allow or deny by IP

00:27:46,330 --> 00:27:49,370
address or IP address range. But this can be

00:27:49,370 --> 00:27:52,230
difficult to manage, like if you're in a cloud

00:27:52,230 --> 00:27:54,720
computing environment then you're Ips are gonna be changing

00:27:54,720 --> 00:27:57,260
all the time. And there's not really any data

00:27:57,260 --> 00:27:58,970
privacy, so if you have something secret that you

00:27:58,970 --> 00:28:00,750
want to send, you probably don't want to use

00:28:00,750 --> 00:28:02,740
this.

00:28:02,740 --> 00:28:06,690
And there's also DRb over SSL using x509 certificates

00:28:06,690 --> 00:28:08,880
where you have full privacy, but it's also you

00:28:08,880 --> 00:28:11,500
have to do certificate management the same way you

00:28:11,500 --> 00:28:16,799
have to deal with updating your ACLs.

00:28:16,799 --> 00:28:19,380
You can also use chroot, either through the system

00:28:19,380 --> 00:28:21,250
call or if you can set up a sandbox

00:28:21,250 --> 00:28:23,500
using the shell, so that way the program can't

00:28:23,500 --> 00:28:26,730
break out of it and write bad files. So

00:28:26,730 --> 00:28:29,170
if somebody goes and attacks your process, that means

00:28:29,170 --> 00:28:31,710
they can only consume CPU or create a bunch

00:28:31,710 --> 00:28:34,350
of processes. They can't do other bad things. Or

00:28:34,350 --> 00:28:37,320
at least not file-system level bad things.

00:28:37,320 --> 00:28:41,500
Unfortunately, JRuby does not support chroot, which Shoes requires,

00:28:41,500 --> 00:28:44,860
so this is not super useful for the Pirate

00:28:44,860 --> 00:28:49,179
Game. And in general, the best practices are always

00:28:49,179 --> 00:28:53,010
be sure you're talking to trusted peers. Make sure

00:28:53,010 --> 00:28:54,600
that, you know, all the hosts that you're gonna

00:28:54,600 --> 00:28:57,690
communicate with don't have other processes that other users

00:28:57,690 --> 00:29:00,400
control, so they can get you and elevate their

00:29:00,400 --> 00:29:03,240
privileges. Limit the accessibility using Unix sockets if you

00:29:03,240 --> 00:29:07,460
don't need network. Use ACLs or SSL instead of

00:29:07,460 --> 00:29:09,530
just straight-up TTP sockets.

00:29:09,530 --> 00:29:12,360
And, and of course, always run on a private

00:29:12,360 --> 00:29:16,750
network, if you're not very trusting.

00:29:16,750 --> 00:29:19,070
So there's also a tool that I wrote to

00:29:19,070 --> 00:29:24,780
help you debug, or monitor, or understand how your

00:29:24,780 --> 00:29:27,360
programs using DRb are not working called DRb dump

00:29:27,360 --> 00:29:30,570
and it works a lot like tcpdump. It monitors

00:29:30,570 --> 00:29:33,870
message sends and message latency and how many allocations

00:29:33,870 --> 00:29:35,549
it takes for messages to send and it also

00:29:35,549 --> 00:29:37,330
sends you a log of all the messages that

00:29:37,330 --> 00:29:38,460
are scrolling by.

00:29:38,460 --> 00:29:41,380
It's not, it doesn't have everything, it doesn't implement

00:29:41,380 --> 00:29:47,570
everything. It doesn't understand out-of-order TCP or mDNS except,

00:29:47,570 --> 00:29:50,160
that's gonna be fixed in Ruby 2 point 1.

00:29:50,160 --> 00:29:52,910
And there's also no filtering yet, and I think

00:29:52,910 --> 00:29:57,140
IPv6 for it is currently broken.

00:29:57,140 --> 00:29:59,790
So you can run it as root like this,

00:29:59,790 --> 00:30:02,470
drbdump and it'll just be like tcpdump, it'll show

00:30:02,470 --> 00:30:05,040
you all the messages going by. You can say,

00:30:05,040 --> 00:30:07,570
give me a summary of these ten thousand messages

00:30:07,570 --> 00:30:10,110
so it'll just record, won't print anything at the

00:30:10,110 --> 00:30:11,970
end and it'll dump the statistics and then, by

00:30:11,970 --> 00:30:14,640
default it listens on your default interface and the

00:30:14,640 --> 00:30:17,370
loopback interface, so you can just restrict the loopback

00:30:17,370 --> 00:30:19,960
if you don't care about outside of the network

00:30:19,960 --> 00:30:22,990
stuff.

00:30:22,990 --> 00:30:25,460
And these slides were supposed to be skipped but

00:30:25,460 --> 00:30:27,890
I'll run through them, so, this is, this is

00:30:27,890 --> 00:30:29,850
the output of a message send. You've got the

00:30:29,850 --> 00:30:33,220
time stamp there at the top, the message sending

00:30:33,220 --> 00:30:37,730
address. This arrow says it's going out, it's message

00:30:37,730 --> 00:30:38,160
send.

00:30:38,160 --> 00:30:42,390
The message receipt address and the message name and

00:30:42,390 --> 00:30:46,370
the arguments are last. For message receipt, you've got

00:30:46,370 --> 00:30:50,010
the timestamp again. And this is the message sender,

00:30:50,010 --> 00:30:53,100
unlike TCPdump, where usually the -- this is who

00:30:53,100 --> 00:30:55,740
sent the message, but it's flipped from tcpdump, so

00:30:55,740 --> 00:30:57,210
the person who sent it is always going to

00:30:57,210 --> 00:30:59,320
be on the left, and of course the arrow

00:30:59,320 --> 00:31:01,870
goes the other way. Who the reciept is coming

00:31:01,870 --> 00:31:05,190
from and the status and the response object --

00:31:05,190 --> 00:31:06,630
in this case it's just a true cause we

00:31:06,630 --> 00:31:09,179
asked for respondto.

00:31:09,179 --> 00:31:10,750
And for an exception you've got a broken arrow

00:31:10,750 --> 00:31:14,340
and it says exception with an error message. And

00:31:14,340 --> 00:31:15,850
these are all easy to match, so you can

00:31:15,850 --> 00:31:17,410
just line them up and kind of see what's

00:31:17,410 --> 00:31:19,370
going on, so the ports are lined up on

00:31:19,370 --> 00:31:21,120
each side, so you can tell that the messages

00:31:21,120 --> 00:31:22,730
are from different connections.

00:31:22,730 --> 00:31:28,140
And then it also connects, collects statistics output, so

00:31:28,140 --> 00:31:30,270
you can see how many messages were sent and

00:31:30,270 --> 00:31:33,960
packets and so forth, and how many allocations were

00:31:33,960 --> 00:31:36,870
required to send that message. And then also the

00:31:36,870 --> 00:31:39,679
latencies per peer and per message.

00:31:39,679 --> 00:31:43,070
And the basic ones are just, just packets and

00:31:43,070 --> 00:31:47,419
messages and results and exceptions. And they've got min,

00:31:47,419 --> 00:31:52,440
max, average, and standard deviation for both, and -

00:31:52,440 --> 00:31:54,960
So we use this in DRbdump to fix, or

00:31:54,960 --> 00:31:57,690
use this with Pirate Game to fix some problems

00:31:57,690 --> 00:32:00,000
like, a bunch of message spam, and then it's

00:32:00,000 --> 00:32:01,650
like kind of reappeared again, so when you're on

00:32:01,650 --> 00:32:04,410
the game you'll be able to see how it's

00:32:04,410 --> 00:32:06,530
just kind of spitting out tons of messages that

00:32:06,530 --> 00:32:07,309
you shouldn't need to do.

00:32:07,309 --> 00:32:09,390
You can also use it to find hanging calls

00:32:09,390 --> 00:32:10,900
if you're like, OK, I went and sent this

00:32:10,900 --> 00:32:15,120
message and nothing's happening. What, where did it get

00:32:15,120 --> 00:32:17,260
to? And also it'll verify that it's working how

00:32:17,260 --> 00:32:18,360
you expect.

00:32:18,360 --> 00:32:23,059
D.S.: So, future. Do you want to pitch in?

00:32:23,059 --> 00:32:25,549
There's a lot of additional development that could be

00:32:25,549 --> 00:32:28,580
added to Pirate Game to make it more fun,

00:32:28,580 --> 00:32:31,559
more full-featured, you know. We wanted to try to

00:32:31,559 --> 00:32:35,510
implement something like the asteroid or wormhole group activities

00:32:35,510 --> 00:32:37,780
that Space Team provides. Something like maybe raiding a

00:32:37,780 --> 00:32:40,260
ship or surviving a hurricane.

00:32:40,260 --> 00:32:41,980
It would also be fun to add some extra

00:32:41,980 --> 00:32:44,910
special controls, instead of just having buttons everywhere. Kind

00:32:44,910 --> 00:32:46,530
of like being able to steer the ship with

00:32:46,530 --> 00:32:48,860
a wheel or other things like that.

00:32:48,860 --> 00:32:51,600
Also I thought it'd be fun to be able

00:32:51,600 --> 00:32:54,690
to build in some character generation, like in Space

00:32:54,690 --> 00:32:56,860
Team, they make like an automatic little alien man

00:32:56,860 --> 00:33:00,110
for you. You can make an automatical pirate, with

00:33:00,110 --> 00:33:04,950
randomly selected beard, parrot, eye patch, maybe different hair.

00:33:04,950 --> 00:33:06,679
There's also a lot of infrastructure improvement that could

00:33:06,679 --> 00:33:09,350
be added to the game. It would be nice

00:33:09,350 --> 00:33:13,360
to completely eliminate the need for an external game

00:33:13,360 --> 00:33:16,230
master app to integrate that directly into the Pirate

00:33:16,230 --> 00:33:20,059
Game itself so you can launch that internally.

00:33:20,059 --> 00:33:24,860
Of course, always, better error handling, and I'd also

00:33:24,860 --> 00:33:26,120
like to make it so that it's easy to

00:33:26,120 --> 00:33:27,940
restart a game. At this point, after the game

00:33:27,940 --> 00:33:31,010
is ended or, you have to restart all of

00:33:31,010 --> 00:33:35,130
the applications to play a second game.

00:33:35,130 --> 00:33:38,860
So play, contribute -- hopefully you enjoyed it. And

00:33:38,860 --> 00:33:41,610
we're gonna try and run a live demo. We'll

00:33:41,610 --> 00:33:48,030
see how well that works.

00:33:48,030 --> 00:33:51,049
So I am running the ring server -- oh,

00:33:51,049 --> 00:33:53,130
not, OK.

00:33:53,130 --> 00:33:59,640
Mirror. It's mirrors and displays.

00:33:59,640 --> 00:34:06,640
Ah, I know, everything's so small.

00:34:12,829 --> 00:34:14,979
OK. OK. So this tab's running a ring server.

00:34:14,979 --> 00:34:18,460
And we're running drbdump in the background as well,

00:34:18,460 --> 00:34:20,239
so you can see a lot of the DRb

00:34:20,239 --> 00:34:24,679
messages flying by already.

00:34:24,679 --> 00:34:31,679
So run the game master, run the Pirate Game.

00:34:35,989 --> 00:34:42,989
Started the game. This screen is the foggy screen.

00:34:50,479 --> 00:34:54,099
This is actually another interesting thing about Shoes, is

00:34:54,099 --> 00:34:57,779
that the, you cannot actually overlay anything directly over

00:34:57,779 --> 00:35:00,529
the input elements. So you can see that the

00:35:00,529 --> 00:35:03,059
launch button here is still crystal clear, which doesn't

00:35:03,059 --> 00:35:06,170
really make the foggy actually that much harder than

00:35:06,170 --> 00:35:09,410
the regular thing but, whatever.

00:35:09,410 --> 00:35:16,410
OK, so, here we got, so, Eric's already joined.

00:35:18,160 --> 00:35:21,170
Here I'm on the choose game screen. I can

00:35:21,170 --> 00:35:28,170
see my demo. So I can join. Anyone else

00:35:29,999 --> 00:35:33,609
want to join?

00:35:33,609 --> 00:35:36,619
Can't get on the network? So-

00:35:36,619 --> 00:35:37,700
E.H.: We're using a private network, so, so you

00:35:37,700 --> 00:35:37,769
guys can't access it.

00:35:37,769 --> 00:35:38,819
D.S.: Ah yeah. OK. So, like I said, the

00:35:38,819 --> 00:35:41,920
game master, you hit the start button. It's go

00:35:41,920 --> 00:35:43,089
time.

00:35:43,089 --> 00:35:44,109
Vandalize the treasure.

00:35:44,109 --> 00:35:45,769
R.H.: Find the rum!

00:35:45,769 --> 00:35:47,839
D.S.: Find the rum! Compass!

00:35:47,839 --> 00:35:49,499
E.H.: Attack the compass.

00:35:49,499 --> 00:35:50,390
D.S.: More compass!

00:35:50,390 --> 00:35:51,589
E.H.: Compensate the ocean!

00:35:51,589 --> 00:35:53,279
D.S.: Steal the gun powder.

00:35:53,279 --> 00:35:55,249
R.H.: Yarr!

00:35:55,249 --> 00:35:59,190
E.H.: Assault the chest!

00:35:59,190 --> 00:36:03,130
R.H.: Walk the compass!

00:36:03,130 --> 00:36:06,089
D.S.: Rum! Compass!

00:36:06,089 --> 00:36:11,890
R.H.: Raid the, raid the poop deck. Yarr!

00:36:11,890 --> 00:36:14,619
D.S.: Who has the poop deck?

00:36:14,619 --> 00:36:16,079
E.H.: Attack the chest.

00:36:16,079 --> 00:36:19,359
R.H.: You're not raiding it! She raid, you're OK.

00:36:19,359 --> 00:36:21,190
E.H.: Abandon the gun powder!

00:36:21,190 --> 00:36:22,650
D.S.: Explore the pistol.

00:36:22,650 --> 00:36:23,019
OK.

00:36:23,019 --> 00:36:24,109
E.H.: Yes, success!

00:36:24,109 --> 00:36:26,200
D.S.: And so at the end, on the game

00:36:26,200 --> 00:36:29,450
master you can see some statistics, so it still

00:36:29,450 --> 00:36:32,359
displays the four players that have joined. This was

00:36:32,359 --> 00:36:35,839
stage one -- it was a success. We completed

00:36:35,839 --> 00:36:38,289
eleven total actions, and this is the spit out

00:36:38,289 --> 00:36:43,700
by the DRb URI. And then this is the

00:36:43,700 --> 00:36:45,769
game run-down so far which, since we only played

00:36:45,769 --> 00:36:48,700
one stage, is exactly identical.

00:36:48,700 --> 00:36:51,249
And I think if we start but don't play,

00:36:51,249 --> 00:36:56,109
yeah it's going crazy back there. We don't play

00:36:56,109 --> 00:36:58,680
and we let it fail then you'll see the

00:36:58,680 --> 00:37:02,809
end screen. And so here, you can also see

00:37:02,809 --> 00:37:06,369
on the game master as, as it's running the

00:37:06,369 --> 00:37:09,460
live actions, so we're on stage two. No actions

00:37:09,460 --> 00:37:13,150
have been performed. We have the time left.

00:37:13,150 --> 00:37:17,210
And this is, it's windy. So that's what windy

00:37:17,210 --> 00:37:22,869
looks like. It's a little bit harder. It's actually

00:37:22,869 --> 00:37:24,999
surprisingly more difficult.

00:37:24,999 --> 00:37:26,229
So here's a little, so here you can see

00:37:26,229 --> 00:37:30,279
drbdump. So this is the information that's kind of

00:37:30,279 --> 00:37:34,150
flowing through. You can see that it's, the game

00:37:34,150 --> 00:37:37,489
master is recording back the, the end of game

00:37:37,489 --> 00:37:41,089
stats, because we failed the game. And here we

00:37:41,089 --> 00:37:43,609
get a little bit of information feedback. I want

00:37:43,609 --> 00:37:45,729
to make this a lot better as well so

00:37:45,729 --> 00:37:47,920
that I know that out of the total actions,

00:37:47,920 --> 00:37:49,829
I, my contribution was six of them.

00:37:49,829 --> 00:37:52,930
So yeah, there's lots of room for improvement there.

00:37:52,930 --> 00:37:54,779
So anyway.

00:37:54,779 --> 00:37:58,559
Demo successful. Please get everything installed. Try and play

00:37:58,559 --> 00:38:01,749
it -- in the hallway, around. It's quite fun.

00:38:01,749 --> 00:38:03,589
And, yeah, let me know what you think. Contribute.

00:38:03,589 --> 00:38:06,900

YouTube URL: https://www.youtube.com/watch?v=IlGD8lAUMoA


