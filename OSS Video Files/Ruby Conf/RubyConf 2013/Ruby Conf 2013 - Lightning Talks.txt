Title: Ruby Conf 2013 - Lightning Talks
Publication date: 2020-01-27
Playlist: RubyConf 2013
Description: 
	01:15 - Coby Randquist - Announcements about Los Angeles Ruby Conf and Ruby on Ales
02:30 - Josh - Ruby Hangout - follow @rubyhangout  on twitter - Online meetup
03:49 - Evan Machnic - Rails Installer Project - Windows and OS X Rails Installer - railsinstaller.org
04:35 - Brandon Valentine - Nashville Software School

Help us caption & translate this video!

http://amara.org/v/FG47/
Captions: 
	00:00:17,160 --> 00:00:18,240
??: Here's what we're gonna do,

00:00:18,240 --> 00:00:21,500
because we only did five five minute lists here,

00:00:21,500 --> 00:00:25,540
I'm gonna do something on the fly right now.

00:00:25,540 --> 00:00:28,920
If you're on this list, and you can do

00:00:28,920 --> 00:00:32,060
it in one minute and you don't get to

00:00:32,060 --> 00:00:36,780
use the computer, do, are, is there anyone for

00:00:36,780 --> 00:00:37,780
which that is true?

00:00:39,420 --> 00:00:43,040
Really? You, you all need a computer? You all

00:00:43,040 --> 00:00:45,320
need five minutes? You don't want to just tell

00:00:45,320 --> 00:00:48,580
me about your awesome idea in forty-five seconds? Really?

00:00:48,580 --> 00:00:49,900
All right, all right.

00:00:49,900 --> 00:00:52,060
Because you get to go right now. So if

00:00:52,060 --> 00:00:54,280
you're down here, this is what I'm saying. If

00:00:54,280 --> 00:00:57,740
you're down here, right, and you want to go

00:00:57,740 --> 00:00:59,580
right now, and you could do it in a

00:00:59,580 --> 00:01:01,320
minute, you can do it.

00:01:03,300 --> 00:01:05,760
??: Yeah. Well, Coby is, you're a special exception,

00:01:05,760 --> 00:01:07,100
so you can come up here, yeah.

00:01:12,560 --> 00:01:13,560
Whoa. Coby everyone.

00:01:17,960 --> 00:01:18,960
COBY RANDQUIST: OK.

00:01:18,960 --> 00:01:19,960
??: Oh, is that mic working?

00:01:19,960 --> 00:01:20,960
C.R.: It's on?

00:01:20,960 --> 00:01:21,960
??: Here, take this one.

00:01:25,020 --> 00:01:27,620
C.R.: All right. Sorry about that. That was my grace

00:01:27,620 --> 00:01:32,340
Real quick, I just wanted to announce, February sixth,

00:01:32,340 --> 00:01:34,780
seventh, and eighth, Los Angelos Ruby Conference in LA.

00:01:34,780 --> 00:01:38,660
March sixth and seventh is Ruby on Ales in

00:01:38,660 --> 00:01:43,380
Bend. CFPs for both are open now. Bend is

00:01:43,380 --> 00:01:46,100
in Oregon, so up in the Pacific Northwest.

00:01:46,100 --> 00:01:48,940
How many people have been to Ruby on Ales

00:01:48,940 --> 00:01:50,360
that are in the audience right now?

00:01:51,200 --> 00:01:52,720
All right. So we got a decent number of

00:01:52,720 --> 00:01:55,840
alumni. Talk, look ar- hold your hands again. Talk

00:01:55,840 --> 00:01:57,760
to these folks. Ask them if it's worth going,

00:01:57,760 --> 00:01:59,800
and then we'll see you in Bend in March.

00:02:00,700 --> 00:02:03,880
Other than that, all the videos for RubyConf are

00:02:03,880 --> 00:02:07,040
being recorded. They'll all be up on Confreaks coming

00:02:07,040 --> 00:02:12,060
out during the month of November. Follow Confreaks on

00:02:12,060 --> 00:02:13,720
Twitter and that's all I've got.

00:02:14,380 --> 00:02:16,540
And now I'm gonna try not to fall off the stage.

00:02:18,520 --> 00:02:19,520
??: Thank you.

00:02:21,700 --> 00:02:22,700
??: One more thirty second one?

00:02:25,420 --> 00:02:26,420
??: Yeah, absolutely.

00:02:29,100 --> 00:02:30,100
??: Ah!

00:02:30,220 --> 00:02:31,700
C.R.: That's how it's done!

00:02:32,420 --> 00:02:34,420
JOSH: Hey, I'm Josh. I, I don't know if

00:02:34,420 --> 00:02:35,980
you guys heard of the Ruby Hangout. I announced

00:02:35,980 --> 00:02:39,260
it last year before we started. Now we've done

00:02:39,260 --> 00:02:42,620
twelve. We've had Erin Patterson, Zach, Chad Fowler -

00:02:42,620 --> 00:02:45,140
a bunch of other people on it. Go to

00:02:45,140 --> 00:02:48,540
Twitter, it's @rubyhangout. The next one's gonna be in

00:02:48,540 --> 00:02:50,720
December. I don't have the person lined up just

00:02:50,720 --> 00:02:53,160
yet, but I think it's gonna be awesome. Check

00:02:53,160 --> 00:02:54,620
it out. We record once a month.

00:02:54,620 --> 00:02:57,760
It's an online meetup. You can go face-to-face, have

00:02:57,760 --> 00:02:59,500
a meetup, that's great. If you can't get out

00:02:59,500 --> 00:03:01,600
and meet people or you live in the middle

00:03:01,600 --> 00:03:03,720
of nowhere or whatever, you can do this online

00:03:03,720 --> 00:03:06,280
using Google Hangout. That's what we do. It's a

00:03:06,280 --> 00:03:09,580
meetup for everybody. So @rubyhangout on Twitter. Thanks.

00:03:10,640 --> 00:03:15,660
??: Thank you. OK, so here's, here's your chance.

00:03:15,660 --> 00:03:19,440
I've indicated, these are thirty-minute blocks. So this is

00:03:19,440 --> 00:03:23,020
half an hour, one hour, hour and a half,

00:03:23,020 --> 00:03:25,640
two hours - so this is the danger zone.

00:03:25,640 --> 00:03:27,860
So if you're in the danger zone, this is

00:03:27,860 --> 00:03:30,620
your opportunity, if you can do it in one minute

00:03:30,620 --> 00:03:33,420
Really, we have no takers? I had people who

00:03:33,420 --> 00:03:34,420
said they wanted to do it.

00:03:34,680 --> 00:03:35,680
??: I'll do it!

00:03:35,680 --> 00:03:36,680
??: OK, come on up.

00:03:38,680 --> 00:03:41,180
If there's anyone else, this is the last call.

00:03:41,180 --> 00:03:42,180
I need you to come up here right now

00:03:42,180 --> 00:03:45,600
because we're gonna go, we're burning daylight here.

00:03:48,320 --> 00:03:50,400
EVAN MACKNICK: Hey everyone. My name is Evan Macknick,

00:03:50,400 --> 00:03:52,660
and if you don't know, I am the new

00:03:52,660 --> 00:03:56,080
maintainer of the Rails Installer project, which is, you

00:03:56,080 --> 00:03:58,660
know, Windows and OS ten versions of Rails Installer.

00:04:00,760 --> 00:04:03,900
EngineYard kind of just does, finished supporting RVM, so

00:04:03,900 --> 00:04:06,520
therefore we also finished supporting Michael Pappis,

00:04:06,520 --> 00:04:08,140
who is working on the OS ten version. So we're

00:04:08,140 --> 00:04:09,420
kind of at the point where we need a

00:04:09,420 --> 00:04:10,740
little help from the community.

00:04:10,740 --> 00:04:12,100
So if you used RailsInstaller, if you know what

00:04:12,100 --> 00:04:15,080
RailsInstaller is, if you've ever tried RailsInstaller,

00:04:15,080 --> 00:04:16,080
please go

00:04:16,080 --> 00:04:18,960
on, go on RailsInstaller dot org and, you know,

00:04:18,960 --> 00:04:22,040
look. Help us out. We could use some help

00:04:22,040 --> 00:04:24,660
with the website. Also both versions of RailsInstaller, we

00:04:24,660 --> 00:04:26,380
really need your help, so. That's it.

00:04:27,580 --> 00:04:28,880
??: OK, thank you.

00:04:31,460 --> 00:04:32,260
OK. Hurry.

00:04:32,280 --> 00:04:33,280
BRANDON VALENTINE: Alright.

00:04:33,600 --> 00:04:34,600
??: Tick, tick, tick.

00:04:36,680 --> 00:04:39,240
B.V.: Hi guys. I'm Brandon Valentine from Nashville, Tennessee.

00:04:39,240 --> 00:04:41,140
I just wanted to take a couple of minutes

00:04:41,140 --> 00:04:42,900
- raise your hand if you actually have a

00:04:42,900 --> 00:04:44,720
computer science degree, in this room.

00:04:45,680 --> 00:04:48,240
All right. Put them down. Raise your hand if

00:04:48,240 --> 00:04:50,600
you taught yourself how to program, somebody else taught

00:04:50,600 --> 00:04:51,820
you, you have a mentor to thank.

00:04:52,680 --> 00:04:55,840
All right. So raise your hand if, in your

00:04:55,840 --> 00:04:59,440
town, there is some sort of software academy, starter-league

00:04:59,440 --> 00:05:02,720
that kind of thing. All right. Put your hands

00:05:02,720 --> 00:05:05,660
down if the thing in your town is for-profit.

00:05:07,580 --> 00:05:09,480
All right. So I want to tell you about

00:05:09,480 --> 00:05:11,760
something really cool that's happening in Nashville right now.

00:05:11,760 --> 00:05:14,700
For the last year and a half, there's a

00:05:14,700 --> 00:05:17,540
thing called the Nashville Software School. It is, as

00:05:17,540 --> 00:05:20,500
far as I know, the only non-profit software academy

00:05:20,500 --> 00:05:22,200
going in the United States right now.

00:05:22,780 --> 00:05:25,580
We have a mission to give a hand up

00:05:25,580 --> 00:05:28,000
to people who don't have the privilege that we

00:05:28,000 --> 00:05:30,600
have all had to make it into this career.

00:05:30,600 --> 00:05:33,880
So we have a program, six months of intense

00:05:33,880 --> 00:05:36,860
training, that costs the student a thousand dollars up

00:05:36,860 --> 00:05:39,780
front. We also provide them a stipend throughout the

00:05:39,780 --> 00:05:42,580
program so they can afford to continue with their training.

00:05:42,580 --> 00:05:45,060
At the end of it, we have an excellent

00:05:45,060 --> 00:05:48,100
graduation rate. We place people directly into pro- into

00:05:48,100 --> 00:05:51,360
jobs working as professional software developers, and

00:05:51,360 --> 00:05:52,360
it's going really well.

00:05:52,860 --> 00:05:54,600
But we need your help. We have a little

00:05:54,600 --> 00:05:56,620
bit of a cash flow problem with our non-profit,

00:05:56,620 --> 00:06:00,120
and if you go to NashvilleSoftwareSchool dot com slash

00:06:00,120 --> 00:06:02,740
support, you can help us build the operating capitol

00:06:02,740 --> 00:06:05,480
we need to keep this program going so that

00:06:05,480 --> 00:06:07,080
people who don't have the privilege that we all

00:06:07,080 --> 00:06:09,340
have to be here and take a weekend off

00:06:09,340 --> 00:06:11,260
in the middle of November to fly to Miami

00:06:11,260 --> 00:06:14,800
beach can find their way into our career. So,

00:06:14,800 --> 00:06:15,120
thank you.

00:06:15,120 --> 00:06:15,820
??: Thanks Brandon.

00:06:20,140 --> 00:06:22,120
OK, here's how we're gonna do this. I'm gonna

00:06:22,120 --> 00:06:24,460
announce the current one and the person who's on

00:06:24,460 --> 00:06:26,180
deck. If you're not on deck when your time

00:06:26,180 --> 00:06:28,500
comes up, you're skipped. So that's just, I'm not

00:06:28,500 --> 00:06:29,500
gonna fuck around.

00:06:29,500 --> 00:06:35,900
So OK. So Prem, you're next. Tom, you're up.

00:06:35,900 --> 00:06:37,000
??: Thank you. What's up?

00:06:38,020 --> 00:06:39,880
??: Oh, OK, yeah. It's fine. You got one?

00:06:39,880 --> 00:06:40,880
Go for it.

00:06:41,720 --> 00:06:43,600
TODD PEARSON: Sorry guys, last one. My name's Todd

00:06:43,600 --> 00:06:48,200
Pearson. I'm one of the co-creators of influxdb. Influx

00:06:48,200 --> 00:06:50,840
is an opensource time series and events database written

00:06:50,840 --> 00:06:53,980
in Go. We just released it this past week

00:06:53,980 --> 00:06:58,160
and we had libraries for JavaScript and Ruby, and

00:06:58,160 --> 00:07:01,680
we've already had contributions for Python libraries, node.js library,

00:07:01,680 --> 00:07:04,680
command line interface. So the community response has been great.

00:07:04,680 --> 00:07:07,880
What I'd like for you guys is just come

00:07:07,880 --> 00:07:09,520
find me if you have anything that you'd like

00:07:09,520 --> 00:07:13,660
to see get added. Future requests, library questions, anything

00:07:13,660 --> 00:07:16,060
that you want to contribute. We'd love to get

00:07:16,060 --> 00:07:17,960
as much feedback as possible so that we build

00:07:17,960 --> 00:07:21,580
something that helps as many people as possible. We're

00:07:21,580 --> 00:07:24,460
planning to have clustering support ready in December and

00:07:24,460 --> 00:07:26,480
a production-ready release in January.

00:07:26,480 --> 00:07:28,200
So if you guys are interested or if you

00:07:28,200 --> 00:07:29,460
have anything you want to talk to me about,

00:07:29,460 --> 00:07:30,460
come find me. Thank you.

00:07:31,160 --> 00:07:34,540
??: Thank you very much. Any other ones? Ones?

00:07:34,540 --> 00:07:38,160
Going once - OK, we're good. Tom, you're up.

00:07:38,160 --> 00:07:40,060
Wait, are you a one, or are you good, Tom?

00:07:40,060 --> 00:07:41,260
TOM: No I have slides. Turn the slides on.

00:07:41,500 --> 00:07:42,980
??: Oh, oh I like it. Look at this,

00:07:42,980 --> 00:07:45,200
we got a pair of fools up here.

00:07:45,880 --> 00:07:48,120
TOM: What's up guys? I'm Tom Laymen, one of

00:07:48,120 --> 00:07:51,140
the cofounders of Rab Genius. I'm also the CTO

00:07:51,140 --> 00:07:54,160
and today I'm gonna talk to you guys about

00:07:54,160 --> 00:07:56,280
hyperlayers. Whoosh!

00:07:56,280 --> 00:08:00,080
A new hope for caching personalized content.

00:08:00,980 --> 00:08:03,400
All right, so caching is a pretty big meme,

00:08:03,400 --> 00:08:05,120
huh, you guys feel me? Give it up for caching!

00:08:07,140 --> 00:08:09,340
Makes your app fast. It's great. Here is an

00:08:09,340 --> 00:08:11,160
example of a template you might want to cache

00:08:11,160 --> 00:08:13,760
- the rap genius song page. And if you're

00:08:13,760 --> 00:08:16,180
using a modern caching technique, which I'm sure you

00:08:16,180 --> 00:08:18,820
guys all called generational caching, you're gonna deal with

00:08:18,820 --> 00:08:21,800
cache experation, but it's having this cleverly constructed cache keys.

00:08:21,800 --> 00:08:23,800
So you throw the song updated at in

00:08:23,800 --> 00:08:25,140
the cache key, you don't have to worry about

00:08:25,140 --> 00:08:26,440
expiring the cache manually, so.

00:08:26,440 --> 00:08:29,520
Generational caching, it's great. But it's not so great

00:08:29,520 --> 00:08:32,680
when the page has a lot of personalized per-user

00:08:32,680 --> 00:08:35,080
content. So in this example, we're putting an edit

00:08:35,080 --> 00:08:38,000
link on the song page only for users who

00:08:38,000 --> 00:08:40,520
have permission to edit that song. And so this

00:08:40,520 --> 00:08:43,580
messes up that caching situation we had before, because

00:08:43,580 --> 00:08:47,100
you can't share cache versions of the song page between users.

00:08:47,100 --> 00:08:49,100
So now you need to have two versions of

00:08:49,100 --> 00:08:51,380
the cache, and those need to be different based

00:08:51,380 --> 00:08:53,900
on whether the edit link is there. So what do you do?

00:08:53,900 --> 00:08:56,700
Well, a naive solution is just to add -

00:08:56,700 --> 00:08:58,760
go back - a naive solution is just to

00:08:58,760 --> 00:09:01,260
add the, the per user permission to the cache

00:09:01,260 --> 00:09:03,080
key. So in this case we'd put whether the

00:09:03,080 --> 00:09:04,620
current user can edit the song right there in

00:09:04,620 --> 00:09:07,500
the cache key, and this'll give correct results, but

00:09:07,500 --> 00:09:09,960
it limits the effectiveness of caching. And this just

00:09:09,960 --> 00:09:11,680
gets worse and worse as you start to put

00:09:11,680 --> 00:09:14,500
more and more user-specific stuff in the cache key.

00:09:14,500 --> 00:09:17,780
And before long, you're totally hosed. Caching is broken.

00:09:17,780 --> 00:09:20,000
So obviously it's a naive approach. It's not gonna

00:09:20,000 --> 00:09:22,280
work. How do you fix it? Well, there are

00:09:22,280 --> 00:09:24,920
a couple approaches. One approach, advocated by DHH at

00:09:24,920 --> 00:09:27,960
last year's RailsConf is basing client-side customization.

00:09:27,960 --> 00:09:30,960
So you send each client the same rendered HTML

00:09:30,960 --> 00:09:33,520
and thereby allow each client to share the same

00:09:33,520 --> 00:09:35,740
cache key and cache version, but then on page

00:09:35,740 --> 00:09:37,760
load, you go in with JavaScript and you basically

00:09:37,760 --> 00:09:39,920
remove all the stuff the client isn't permissioned to

00:09:39,920 --> 00:09:42,600
see. And so this isn't a great technique.

00:09:42,600 --> 00:09:44,680
For one thing, you've got this JavaScript. It's going

00:09:44,680 --> 00:09:47,080
in and doing all this like minutae and that's

00:09:47,080 --> 00:09:49,700
a little bit complicated. But on a more fundamental

00:09:49,700 --> 00:09:52,440
level, you are giving each client the same rendered

00:09:52,440 --> 00:09:54,840
HTML, and so this is fine if there's just

00:09:54,840 --> 00:09:56,300
an edit link in there that a client might

00:09:56,300 --> 00:09:58,100
not want to see. But it's not fine if

00:09:58,100 --> 00:09:59,420
there's truly confidential data.

00:09:59,420 --> 00:10:00,720
So you can't, if you have a user's email

00:10:00,720 --> 00:10:03,780
address, you can't remove that client-side with JavaScript.

00:10:03,780 --> 00:10:05,440
You just can't send it over the wire to the

00:10:05,440 --> 00:10:07,200
user at all. So that's a little messed up.

00:10:07,200 --> 00:10:07,760
Not so great.

00:10:07,760 --> 00:10:11,300
Another solution to this, which was also presented at

00:10:11,300 --> 00:10:13,480
RailsConf in response to DHH, is, is this idea

00:10:13,480 --> 00:10:15,720
of client-side templating, which you guys have probably heard

00:10:15,720 --> 00:10:18,040
of. This is WyCat's solution to this problem. And

00:10:18,040 --> 00:10:20,940
so this simplifies the JavaScript considerably and gives you

00:10:20,940 --> 00:10:23,620
a nice looking template, but the problem here is

00:10:23,620 --> 00:10:25,920
that now the client has to know all it

00:10:25,920 --> 00:10:28,720
needs to know to answer any permission question about a template.

00:10:28,720 --> 00:10:30,560
So in this context the client has to know

00:10:30,560 --> 00:10:32,580
current user can't edit this song. And that might

00:10:32,580 --> 00:10:34,660
depend on a bunch of different things. So making

00:10:34,660 --> 00:10:36,840
your client smart enough to know all this permissions

00:10:36,840 --> 00:10:38,800
stuff is complicated and so I don't like this

00:10:38,800 --> 00:10:41,620
solution either. So the good solution, which I like,

00:10:41,620 --> 00:10:46,360
what I'm talking about today is hyperlayers. And this is hyperlayers.

00:10:46,360 --> 00:10:49,620
So the idea behind hyperlayers is it splits up

00:10:49,620 --> 00:10:52,940
your apps rendering into two passes, or layers. In

00:10:52,940 --> 00:10:55,480
the first pass, which is illustrated by these arrows

00:10:55,520 --> 00:10:57,820
on the screen here, you take the erb template

00:10:57,820 --> 00:11:00,720
on the left and render it to the erb

00:11:00,720 --> 00:11:01,620
template on the right.

00:11:01,620 --> 00:11:03,880
And what we've done is we've rendered to HTML

00:11:03,880 --> 00:11:07,300
all of the non user-specific content. So the song's

00:11:07,300 --> 00:11:09,840
title is now rendered as Hey There, Delilah. The

00:11:09,840 --> 00:11:12,040
song's process lyrics are the lyrics to this, my

00:11:12,040 --> 00:11:15,000
favorite song. And all of the non-user-specific content in

00:11:15,000 --> 00:11:16,600
general is rendered to HTML.

00:11:16,600 --> 00:11:20,080
But the user-specific content, in particular this edit link,

00:11:20,080 --> 00:11:22,740
which we've wrapped in this hyperlayered do block, is

00:11:22,740 --> 00:11:26,460
rendered instead to customization instructions, which is, in this

00:11:26,460 --> 00:11:29,500
case, erb. So we render the erb template on

00:11:29,500 --> 00:11:32,100
the left into the erb template on the right,

00:11:32,100 --> 00:11:34,560
and then we cache the erb template on the right.

00:11:34,560 --> 00:11:38,400
Now, when the client requests the web page, we

00:11:38,400 --> 00:11:40,980
pull that right-most erb template out of the cache,

00:11:40,980 --> 00:11:43,600
and that erb template is pretty cooked. Almost mostly

00:11:43,600 --> 00:11:45,580
filled in with actual data. The only thing that

00:11:45,580 --> 00:11:49,460
remains is your user-customization part. So you evaluate the

00:11:49,460 --> 00:11:51,980
remainder of the erb, customize it for that user

00:11:51,980 --> 00:11:53,660
and send it down the wire. And so the

00:11:53,660 --> 00:11:56,280
beauty here is that, again, all users share the

00:11:56,280 --> 00:11:58,800
same cache key and cache version - cache key

00:11:58,800 --> 00:12:00,020
is the simple one again at the bottom -

00:12:00,020 --> 00:12:03,320
so it's super performant from a cache perspective. And

00:12:03,320 --> 00:12:06,580
all users only get exactly the data they are

00:12:06,580 --> 00:12:07,320
permissioned to see.

00:12:07,320 --> 00:12:10,060
So that is hyperlayers. The best way to have

00:12:10,060 --> 00:12:14,060
effectively cached per-user customized content. Now

00:12:14,060 --> 00:12:14,800
hyperlayers is very

00:12:14,800 --> 00:12:17,440
important. One thing that's more important than hyperlayers today

00:12:17,440 --> 00:12:20,460
and that is the RapGenius RubyConf party. So if

00:12:20,460 --> 00:12:22,520
you guys are down to party, give it up!

00:12:24,140 --> 00:12:27,240
This is a caching themed party. So you should

00:12:27,240 --> 00:12:30,820
show up dressed as your favorite caching concept. Sweeper,

00:12:30,820 --> 00:12:33,600
or, you know, a genera- and so it's gonna

00:12:33,600 --> 00:12:37,280
be at this address. Bit.ly slash RubyConf dash party.

00:12:37,280 --> 00:12:40,560
We're gonna be installing hyperlayers on anyone's app. You

00:12:40,560 --> 00:12:42,580
just come check it out. There's a pool. It's

00:12:42,580 --> 00:12:44,680
gonna be great. Hit me up, show me love.

00:12:44,680 --> 00:12:49,640
Tom at rapgenius dot com. 305-281-0228, five minutes on

00:12:49,640 --> 00:12:51,440
the dot, rap key is out! Peace!

00:12:55,040 --> 00:12:59,300
PREM SICHANUGRIST: All right. Hello. My name is Prem

00:12:59,300 --> 00:13:01,940
- whoa, whoa, hold on. My name is Prem

00:13:01,940 --> 00:13:05,520
Sichanugrist. You might know me as sikachu. I work

00:13:05,520 --> 00:13:08,820
for ThoughtBot. We have so many opensource gems, such

00:13:08,820 --> 00:13:14,160
as PaperClip, Factory Girl. And, but today I'm gonna

00:13:14,160 --> 00:13:15,160
talk about appraisal.

00:13:15,160 --> 00:13:20,740
So I know you probably published your gem, right.

00:13:20,740 --> 00:13:25,860
At, that would probably be fully tested. But can

00:13:25,860 --> 00:13:27,580
you be sure that they are working with the

00:13:27,580 --> 00:13:31,120
other version of those dependency? Probably not.

00:13:33,620 --> 00:13:39,080
So, like, hold on. Actually, hold on. Yes.

00:13:40,500 --> 00:13:42,040
So like if you, if you create a gem

00:13:42,040 --> 00:13:44,260
right now, you probably have it, have a gem

00:13:44,260 --> 00:13:48,300
spec, say, you - sorry. You probably make it

00:13:48,300 --> 00:13:51,120
support for Rails 4, but then if your gem

00:13:51,120 --> 00:13:54,520
actually age awhile, you probably have to have suppor-

00:13:54,560 --> 00:13:57,420
you probably have to have support for 3.2 as well

00:13:58,120 --> 00:14:02,400
Then, well, 3.1 or maybe 3.0.

00:14:03,960 --> 00:14:06,980
So, I mean, for example, for our PaperClip gem,

00:14:06,980 --> 00:14:12,700
we actually have a dependency like this, because PaperClip

00:14:12,700 --> 00:14:19,440
is so old. Then once in awhile we, people

00:14:19,440 --> 00:14:22,520
will install PaperClip and just coming at us like,

00:14:22,520 --> 00:14:25,580
your gem doesn't work. Sadface.

00:14:25,580 --> 00:14:29,860
So that actually means that even, like, if you

00:14:29,860 --> 00:14:33,220
test your gem against the latest version, it doesn't

00:14:33,220 --> 00:14:38,220
mean that it works with the previous version. I

00:14:38,260 --> 00:14:40,220
actually have some slides about similar, but I'm

00:14:40,220 --> 00:14:45,120
not going to get into Rails in similar after yesterday.

00:14:46,120 --> 00:14:47,120
Nevermind.

00:14:47,920 --> 00:14:50,040
So we need to test with the multiple version.

00:14:50,580 --> 00:14:56,340
So how? Well, use appraisal. You can set multiple

00:14:56,340 --> 00:15:01,140
versions of dependencies in one place, merge them, and,

00:15:01,140 --> 00:15:05,460
and appraisal will generate a gemfile for you. When

00:15:05,460 --> 00:15:08,100
you run the test it actually setup the environment

00:15:08,100 --> 00:15:13,120
for you. So for example, in your application, well,

00:15:13,120 --> 00:15:16,900
in your gem's gemfile, you probably have something like this.

00:15:16,900 --> 00:15:22,280
Or, you can also use gemspec as well. And

00:15:22,280 --> 00:15:24,780
then you create a new file called appraisal. Have

00:15:24,780 --> 00:15:31,360
these guys in. And the, the, the other thing

00:15:31,360 --> 00:15:33,460
you need to set up is just adding appraisal

00:15:33,520 --> 00:15:36,560
to your Rake file. Then you can run Rake

00:15:36,560 --> 00:15:39,700
appraisal gemfiles that will generate the gemfiles for you.

00:15:40,200 --> 00:15:42,620
You can run appraisal install that will install all

00:15:42,620 --> 00:15:46,260
the dependencies and when you want to run the

00:15:46,260 --> 00:15:49,040
test, you just run rake appraisal test. So apr,

00:15:49,040 --> 00:15:52,100
appending appraisal to all of your rake tasks.

00:15:53,380 --> 00:15:55,820
And, yeah, if you want to test with, like,

00:15:55,820 --> 00:16:00,600
a specific version, just give the version name there.

00:16:01,880 --> 00:16:03,480
So just a recap.

00:16:03,480 --> 00:16:08,160
So appraisal allows, it allows you to set dependency

00:16:08,160 --> 00:16:11,440
in one place, generate the sub-gemfiles for you, install

00:16:11,440 --> 00:16:15,160
multiple versions of dependency for you, and it tells

00:16:15,160 --> 00:16:17,940
Bundler what version of dependecy you want to test against.

00:16:18,960 --> 00:16:22,260
So if you have a gem you probably setup

00:16:22,260 --> 00:16:26,820
the CI using Travis CIs. It's actually pretty simple.

00:16:26,820 --> 00:16:30,420
You just put this into your, the Travis dot

00:16:30,420 --> 00:16:34,040
yml, and that's pretty much it. You just push

00:16:34,040 --> 00:16:36,200
your gem and it will be something like this.

00:16:37,560 --> 00:16:42,900
So for PaperClip we have this and you can

00:16:42,900 --> 00:16:46,840
see that we have multiple gemfiles tested. And they're

00:16:46,840 --> 00:16:48,220
all green. So happy.

00:16:49,840 --> 00:16:54,680
So yeah. Show that this actually shows that your,

00:16:54,680 --> 00:16:58,440
your gem are working with the older version of

00:16:58,440 --> 00:17:04,480
its dependency. So if you want to try it

00:17:04,480 --> 00:17:07,960
out right now, just go to RubyGems - well,

00:17:07,960 --> 00:17:10,220
do gem install appraisal.

00:17:10,860 --> 00:17:14,020
I put the appraisal pre-hear because we are going

00:17:14,020 --> 00:17:16,260
to raise on ?? which takes out the,

00:17:16,260 --> 00:17:19,120
like, rake task dependency. So you can just call

00:17:19,120 --> 00:17:22,140
like appraisal. I have a slide up on my

00:17:22,140 --> 00:17:28,540
SpeakerDeck that outline the new features, but, yeah. If,

00:17:28,540 --> 00:17:30,600
if you are interested you should go check it out.

00:17:31,240 --> 00:17:34,380
So remember, if you have a gem, test it

00:17:34,380 --> 00:17:38,540
against multiple versions of its dependency by using appraisal.

00:17:39,040 --> 00:17:40,040
Thank you.

00:17:43,160 --> 00:17:45,140
RICHARD SCHNEEMAN: OK, hello everyone. My name is, my

00:17:45,140 --> 00:17:46,440
name is Richard Schneeman-

00:17:46,440 --> 00:17:47,680
??: The timer's here by the way.

00:17:47,680 --> 00:17:49,860
R.S.: -and my, my talk is entitled programming programmers.

00:17:49,860 --> 00:17:52,640
So today I want to introduce you to Rafael.

00:17:52,640 --> 00:17:56,340
So this is a glorious picture of Rafael, and

00:17:56,340 --> 00:17:58,740
he happens to be the number five committer in

00:17:58,740 --> 00:18:00,060
Rails slash Rails.

00:18:00,060 --> 00:18:03,360
Currently something like two-thousand two hundred and nine commits,

00:18:03,360 --> 00:18:05,480
which is incredible. I'm sure he's probably like a

00:18:05,480 --> 00:18:07,900
beast and is like, I don't know, is double

00:18:07,900 --> 00:18:09,620
that by now since I copied that.

00:18:09,620 --> 00:18:14,340
So Rafael, you know, looks at a ton of

00:18:14,340 --> 00:18:18,200
issues in addition to contributing a lot to, to

00:18:18,200 --> 00:18:21,780
Rails. Like, absolutely so many issues, it's mind-boggling.

00:18:21,780 --> 00:18:24,540
Like, I mean, I can comment on something at any

00:18:24,540 --> 00:18:26,920
hour of the, of the day, and you know

00:18:26,920 --> 00:18:27,540
he'll be there.

00:18:27,540 --> 00:18:31,760
So, you know, unfortunately, though, Rafael has a problem.

00:18:31,760 --> 00:18:34,920
He has to sleep every once in awhile. And

00:18:34,920 --> 00:18:38,400
you know also unfortunately, Rails issues don't have to

00:18:38,400 --> 00:18:42,900
sleep. So just really quick, raise your hand if

00:18:42,900 --> 00:18:45,080
you have ever used opensource.

00:18:47,040 --> 00:18:49,340
OK. As some people did not raise their hand

00:18:49,340 --> 00:18:51,060
- man, what are you doing here?

00:18:52,940 --> 00:18:56,500
All right. What about contributed to opensource? All right,

00:18:56,500 --> 00:18:59,600
OK, that's looking pretty good. What about contributed to

00:18:59,600 --> 00:19:02,640
opensource two thousand two hundred and nine times? OK.

00:19:02,640 --> 00:19:03,260
Yeah. There we-

00:19:03,260 --> 00:19:04,260
??: Probably. Probably.

00:19:04,260 --> 00:19:05,260
R.S.: -all right! Whoo!

00:19:10,920 --> 00:19:13,000
OK, so what if there was a way to,

00:19:13,000 --> 00:19:16,840
at the same time, super charge your programming skills

00:19:16,840 --> 00:19:20,740
and, and - I, I hate the term giving

00:19:20,740 --> 00:19:24,400
back to opensource. Because I am super selfish and

00:19:24,400 --> 00:19:27,880
I like giving forwards to future me. So you know-

00:19:31,060 --> 00:19:33,540
And, and, and we want to release your inner

00:19:33,540 --> 00:19:35,160
Rafael. What if, what if there is a way

00:19:35,160 --> 00:19:39,020
to do this? So I discovered a secret API

00:19:39,020 --> 00:19:40,360
- well, first of all, I discovered that number

00:19:40,360 --> 00:19:41,700
one, programmers are humans.

00:19:43,600 --> 00:19:46,680
Yeah. Pretty surprising. I also discovered that there is

00:19:46,680 --> 00:19:50,660
an API into the human mind that managers have

00:19:50,660 --> 00:19:53,740
figured out how to manipulate. You might know it as email.

00:19:55,920 --> 00:19:59,860
So a way to condition yourself into being a

00:19:59,860 --> 00:20:03,560
better programmer is a little program I wrote called

00:20:03,560 --> 00:20:05,220
CodeTriage.

00:20:09,240 --> 00:20:11,000
All right. Some of you have heard of this

00:20:11,000 --> 00:20:14,080
before, and that's probably good because I released it

00:20:14,080 --> 00:20:16,560
at Denver RubyConf in a similar lightning talk -

00:20:17,620 --> 00:20:22,160
whoo! So since then, we've got about 3,000 developers,

00:20:22,160 --> 00:20:26,300
almost a thousand projects, and I'd also like to,

00:20:26,300 --> 00:20:29,340
it, it was officially given as the reason of

00:20:29,340 --> 00:20:33,320
Jon Rowe getting Rspec commit access.

00:20:33,320 --> 00:20:37,460
So, yeah, that's, that's a thing. If you're unfamiliar

00:20:37,460 --> 00:20:41,840
with CodeTriage, essentially, all of those things that Rafael

00:20:41,840 --> 00:20:43,840
has to do with those seven hundred freaking issues

00:20:43,840 --> 00:20:46,400
- most of them, you can do. Most of

00:20:46,400 --> 00:20:48,040
them, you can look and see like, oh, is

00:20:48,040 --> 00:20:49,940
this a bug? Oh, can I reproduce this? What

00:20:49,940 --> 00:20:51,440
version of Rails are you using?

00:20:51,440 --> 00:20:53,480
Oh, it looks like no one has commented on

00:20:53,480 --> 00:20:55,360
this issue in the last two years. Can we

00:20:55,360 --> 00:20:57,380
please, for the - like, close this?

00:20:58,400 --> 00:20:59,980
So these are all things you can do. And,

00:20:59,980 --> 00:21:03,860
so CodeTriage will send you one issue from your

00:21:03,860 --> 00:21:08,140
chosen repository per day. It's very lightweight, especially if

00:21:08,140 --> 00:21:10,920
you've, if you've not contributed to Rack or Rails

00:21:10,920 --> 00:21:14,120
or Ruby or whatever your favorite libraries, it's a

00:21:14,120 --> 00:21:16,580
very lightweight way to get involved there.

00:21:16,580 --> 00:21:22,760
So sign up today. Codetriage dot com. And yeah.

00:21:22,760 --> 00:21:25,580
Thank you all very much for attending the, the

00:21:25,580 --> 00:21:26,580
lightning talk.

00:21:29,500 --> 00:21:30,500
??: Thank you very much.

00:21:31,700 --> 00:21:35,720
NARI: Hello everybody. Today I am talking about how

00:21:35,720 --> 00:21:41,380
to make perfume dance. My name is Nari. I'm

00:21:41,380 --> 00:21:45,780
a CRuby committer and I'm a creator of Bitmap

00:21:45,780 --> 00:21:49,940
Marking GC in CRuby 2 point 0.

00:21:52,660 --> 00:21:57,160
Today topic is about perfume. Perfume is a famous

00:21:57,160 --> 00:22:01,660
folk group in Japan. They are many fan of

00:22:01,660 --> 00:22:03,180
Perfume in Japan.

00:22:04,840 --> 00:22:10,720
Perfume has started very interesting project. This project called

00:22:10,720 --> 00:22:16,460
name is Perfume Dev. They, they are provide motion

00:22:16,460 --> 00:22:20,080
capture. They download their dance to GitHub. The

00:22:20,080 --> 00:22:22,280
url is here.

00:22:25,140 --> 00:22:28,560
This motion data is free to use. So we,

00:22:28,560 --> 00:22:31,760
we can create some movies and so on with

00:22:31,760 --> 00:22:37,580
this motion data. And many creator in the world

00:22:37,580 --> 00:22:41,720
created some works. This movie shows how part of

00:22:41,720 --> 00:22:43,040
it works by many creators.

00:22:43,040 --> 00:22:48,260
Well when I saw this project I thought it was a very interesting project. So one, I

00:22:48,260 --> 00:22:52,780
so, I want to make Perfume dance with Ruby.

00:22:54,060 --> 00:22:59,040
So I started to hack. I used Ruby/SDL and

00:22:59,040 --> 00:23:03,920
the motion data format is BVH. We can parse

00:23:03,920 --> 00:23:07,960
this format with BVH gem. And hacking is done.

00:23:07,960 --> 00:23:12,940
This is my first prototype of dancing Perfume.

00:23:22,200 --> 00:23:27,240
You know that there's a bug. I found wrong

00:23:27,240 --> 00:23:33,260
matrix calculation and fix it. Done. And this is

00:23:33,260 --> 00:23:36,460
my second prototype of the same Perfume.

00:23:39,060 --> 00:23:40,060
Thank you.

00:23:42,860 --> 00:23:46,160
I made it, but I was not satisfied because

00:23:46,160 --> 00:23:50,800
there is a unfavorable line of code. This is wrong.

00:23:53,360 --> 00:23:58,540
I, I- I, I usually say, hey you should

00:23:58,540 --> 00:24:01,820
not disable GC. But I did it. I am

00:24:01,820 --> 00:24:07,360
so sorry. Why does this program need to disable GC?

00:24:07,880 --> 00:24:12,740
The motion data is big and motion data translate

00:24:12,740 --> 00:24:18,060
to read-only objects in Ruby heap after parsing. These

00:24:18,060 --> 00:24:20,760
objects can cause high GC pressure.

00:24:22,680 --> 00:24:27,340
GC must scan this motion data objects each time.

00:24:27,340 --> 00:24:31,780
So as a result, GC forced to interrupt the

00:24:31,780 --> 00:24:36,060
dancing. So I want to show GC issue.

00:24:44,720 --> 00:24:48,380
This one, it, you can see they stop dancing

00:24:48,380 --> 00:24:53,220
so, so they feel, they are stop the world

00:24:53,220 --> 00:24:59,240
now. GC interrupts, GC interrupts their balance. They cannot

00:24:59,240 --> 00:25:00,240
dance mostly.

00:25:00,240 --> 00:25:03,660
??: This is the best GC stop the world demo I've ever seen.

00:25:10,140 --> 00:25:14,220
NARI: Well, in Ruby 2 point 1 Koi-san introduced

00:25:14,220 --> 00:25:18,640
Generational GC to Ruby. This is called RGenGC. This

00:25:18,640 --> 00:25:24,280
feature saves the dance. This motion data read-only on

00:25:24,280 --> 00:25:30,360
they are long-life objects and aren't in GC, and so need

00:25:30,360 --> 00:25:33,480
to scan these as fast.

00:25:33,480 --> 00:25:39,300
But RGenGC can actually, these are longer object. After

00:25:39,300 --> 00:25:43,340
that RGenGC scans these objects sometimes.

00:25:44,340 --> 00:25:46,600
OK, I want to prove my source.

00:26:02,780 --> 00:26:03,780
??: Oh yeah.

00:26:06,580 --> 00:26:14,600
NARI: Yes. They dance gracefully. They can dance mostly.

00:26:14,600 --> 00:26:19,580
These will be 2 point 1, for the great.

00:26:21,720 --> 00:26:23,520
??: Is this official RubyConf dance now?

00:26:27,940 --> 00:26:31,840
NARI: Conclusion. RGenGC is cool. Koi-san is also cool.

00:26:31,840 --> 00:26:36,200
Ruby 2 point 1 will be great. And you

00:26:36,200 --> 00:26:43,040
should not, you should not GC.disable. Thank you.

00:26:46,980 --> 00:26:49,980
ALLISON SHEREN: Hi everyone. My name is Allison and

00:26:49,980 --> 00:26:52,560
I'm gonna be talking about mentoring from a newbie's perspective.

00:26:53,780 --> 00:26:56,640
So, first a little bit about myself. So I'm

00:26:56,640 --> 00:27:00,020
a RailsGirls DC Organizer. I'm a newbie. I'm a

00:27:00,020 --> 00:27:03,920
super-motivated learner. I love the Ruby community. I am

00:27:03,920 --> 00:27:05,780
a mentor and a mentee and I am a

00:27:05,780 --> 00:27:07,400
first-time lightning talker.

00:27:07,400 --> 00:27:07,980
AUDIENCE: Whoo!

00:27:07,980 --> 00:27:08,980
A.S.: So.

00:27:13,500 --> 00:27:15,900
So I've been learning to code for about a

00:27:15,900 --> 00:27:18,160
year, and through my journey there have been a

00:27:18,160 --> 00:27:20,320
ton of people who have really helped me learn.

00:27:20,320 --> 00:27:23,900
It's been really, really amazing. And everybody's had really

00:27:23,900 --> 00:27:27,300
good intentions but some people I've learned from really

00:27:27,300 --> 00:27:30,000
effectively and others not as much.

00:27:30,860 --> 00:27:31,860
That's OK.

00:27:33,100 --> 00:27:36,080
So here are some of main tips for being

00:27:36,080 --> 00:27:37,080
an effective mentor.

00:27:38,360 --> 00:27:41,320
So first, when I started learning, I didn't even

00:27:41,320 --> 00:27:43,660
know what questions to ask. So people would come

00:27:43,660 --> 00:27:45,420
up to me and they'd be like, oh, what do you need help with?

00:27:45,420 --> 00:27:47,080
What are you working on? What are your questions?

00:27:47,080 --> 00:27:50,280
And I would be like, I'm OK, thanks. And it's really because I

00:27:50,280 --> 00:27:52,380
just didn't know what to ask, and sometimes when

00:27:52,380 --> 00:27:54,720
I asked a question, every word that came out

00:27:54,720 --> 00:27:57,300
of the person's mouth sounded like a completely foreign language.

00:27:57,300 --> 00:28:01,420
So I really appreciated when mentors encouraged me to

00:28:01,420 --> 00:28:04,700
be relentlessly curious. So to ask questions and continue

00:28:04,700 --> 00:28:06,920
asking questions and continue asking questions, and if they

00:28:06,920 --> 00:28:08,980
were answering a question and I didn't understand a

00:28:08,980 --> 00:28:10,980
word that they were saying - ask that question

00:28:10,980 --> 00:28:12,500
in the middle of their answer.

00:28:14,020 --> 00:28:17,820
So, second, don't go down the rabbit hole. So

00:28:17,820 --> 00:28:20,220
I feel like there's this tendency sometimes, I've seen

00:28:20,220 --> 00:28:24,060
it before in meetups and different places, where somebody

00:28:24,060 --> 00:28:27,500
asks a question and there's a desire to really

00:28:27,500 --> 00:28:32,640
answer the question, give additional resources, articles, blogs, and

00:28:32,640 --> 00:28:35,300
also talk about how it relates to everything else

00:28:35,300 --> 00:28:37,080
involved with Ruby and Rails and whatnot.

00:28:37,080 --> 00:28:39,400
So that's great except that at some point I

00:28:39,400 --> 00:28:40,680
have no idea what you're talking about and I

00:28:40,680 --> 00:28:42,580
feel like I'm never actually gonna be able to code.

00:28:43,060 --> 00:28:45,540
So just, you know, keep it concise. Answer the

00:28:45,540 --> 00:28:48,460
question. Make sure that the person hasn't completely lost you.

00:28:49,620 --> 00:28:54,000
So, third, understand if you're not understood. And so

00:28:54,000 --> 00:28:57,060
I think that this one is challenging. There are

00:28:57,060 --> 00:29:00,300
times where somebody has tried to explain something to

00:29:00,300 --> 00:29:02,640
me over and over and over again, rephrase it

00:29:02,640 --> 00:29:05,580
a million times, and I just am not understanding

00:29:05,580 --> 00:29:07,760
it. And then somebody else comes up and says

00:29:07,760 --> 00:29:09,620
it and I'm like, oh, yeah, now I get it.

00:29:09,620 --> 00:29:12,580
And that's, you know, it's not you, it's just

00:29:12,580 --> 00:29:14,880
that different people learn in different ways. So I

00:29:14,880 --> 00:29:16,440
would say, make it OK for the person that

00:29:16,440 --> 00:29:18,880
you're mentoring, to say, are you, are you understanding

00:29:18,880 --> 00:29:20,540
what I'm saying or, you know, hey, how would you

00:29:20,540 --> 00:29:24,160
explain this to an additional mentor? They might just

00:29:24,160 --> 00:29:26,220
be able to use different words or, or get

00:29:26,220 --> 00:29:27,740
through more effectively.

00:29:28,980 --> 00:29:32,540
Fourth, the dreaded answer to what should I read?

00:29:32,540 --> 00:29:36,540
So this question comes up again in learning meetups

00:29:36,540 --> 00:29:39,120
all the time, on forums, and somebody says, hey,

00:29:39,120 --> 00:29:41,480
what should I read? And then everyone just throws

00:29:41,480 --> 00:29:43,680
out a ton of authors and books and everything,

00:29:43,680 --> 00:29:46,400
and you have this, like, mile-long list that you

00:29:46,400 --> 00:29:47,980
then have to Google, but you have no idea

00:29:47,980 --> 00:29:51,000
what to read, in what order, why you should be reading it.

00:29:51,000 --> 00:29:53,960
So something that I find really helpful is giving

00:29:53,960 --> 00:29:56,420
directions. So what books should you read first. Where

00:29:56,420 --> 00:29:59,100
should you read these books in your learning journey?

00:29:59,100 --> 00:30:02,200
Why, and when I'm reading books, what should I

00:30:02,200 --> 00:30:04,140
really be making sure to focus on to, to

00:30:04,140 --> 00:30:06,400
learn from for that particular book?

00:30:07,360 --> 00:30:10,520
Five, is don't put your fingers on my keyboard.

00:30:10,520 --> 00:30:14,960
So, so this one I find is really, really

00:30:14,960 --> 00:30:17,760
challenging in working with, with more experienced developers.

00:30:17,760 --> 00:30:22,620
Unless you're pair programming, it's, it's really effective, and I

00:30:22,620 --> 00:30:25,120
know that it's painful sometimes to have to say,

00:30:25,120 --> 00:30:29,980
OK, capitol this then space then - but I

00:30:29,980 --> 00:30:32,360
find that you have to be really, really patient,

00:30:32,360 --> 00:30:35,220
but I know that I've learned better when somebody

00:30:35,220 --> 00:30:38,540
has literally told me every letter to type in,

00:30:38,540 --> 00:30:40,580
and other people has as well.

00:30:40,580 --> 00:30:42,600
So, again, it takes a lot of patience, but

00:30:42,600 --> 00:30:44,060
I think it's more effective.

00:30:45,240 --> 00:30:48,840
And, finally, help celebrate the small stuff and motivate

00:30:48,840 --> 00:30:52,360
to do the big stuff. So when I was

00:30:52,360 --> 00:30:55,260
first learning, everything, to me, was amazing and I

00:30:55,260 --> 00:30:57,040
assumed that it was like, really not a big

00:30:57,040 --> 00:30:59,460
deal to everybody else because everybody else knew a

00:30:59,460 --> 00:31:02,100
lot more than I did. So it really helped

00:31:02,100 --> 00:31:03,540
me to be with a really amazing community of

00:31:03,540 --> 00:31:05,980
people that helped me celebrate that small stuff and

00:31:05,980 --> 00:31:08,480
realize that those small things were actually big things.

00:31:08,480 --> 00:31:12,460
And then, you know, building on that, they encouraged

00:31:12,460 --> 00:31:15,440
me to do, to do big stuff. So give

00:31:15,440 --> 00:31:17,380
a talk at a local Ruby group, give this

00:31:17,380 --> 00:31:20,700
lightning talk today, and, and so celebrate the small

00:31:20,700 --> 00:31:23,380
stuff and motivate to do even bigger things.

00:31:24,760 --> 00:31:26,140
That's it. Thanks so much.

00:31:26,140 --> 00:31:27,140
??: Whoo!

00:31:29,620 --> 00:31:31,740
LUCAS DOHMEN: So hey everyone. I want to talk

00:31:31,740 --> 00:31:34,640
about graphs and hamsters. My name is Lucas, but

00:31:34,640 --> 00:31:36,040
the hamsters are more important.

00:31:36,040 --> 00:31:40,040
So, if you ever seen a hamster eat something,

00:31:40,040 --> 00:31:43,140
you see real joy. So a hamster really enjoys

00:31:43,140 --> 00:31:48,060
eating stuff and yeah. This picture just makes me happy.

00:31:48,060 --> 00:31:52,220
So if you imagine you are a hamster and

00:31:52,220 --> 00:31:54,100
you are not living in a cage but you're

00:31:54,100 --> 00:31:57,040
living in the wild, so you have certain caves

00:31:57,040 --> 00:31:59,620
and they are connected with tunnels. And then you

00:31:59,620 --> 00:32:03,600
can travel along those tunnels and yeah put food into them.

00:32:03,600 --> 00:32:07,620
So imagine you are this hamster and you, you

00:32:07,620 --> 00:32:11,760
collected grains and nuts in your different caves, and

00:32:11,760 --> 00:32:15,740
you built up a tunnel network between all those

00:32:15,740 --> 00:32:19,980
caves. Then you can walk between them and maybe

00:32:19,980 --> 00:32:21,860
eat something and be happy again.

00:32:21,860 --> 00:32:26,920
So what our task now is, is the, the

00:32:26,920 --> 00:32:30,620
hamster, it should count how much grain and how

00:32:30,620 --> 00:32:33,420
much nuts it has so it knows if it

00:32:33,420 --> 00:32:36,480
can survive the winter because it has enough, it

00:32:36,480 --> 00:32:40,980
has enough to eat. So but the hamster, it's,

00:32:40,980 --> 00:32:43,300
it's just a hamster. It's brain is not very

00:32:43,300 --> 00:32:46,960
big so it can only remember the back, the

00:32:46,960 --> 00:32:51,000
way back to its home cave if he goes

00:32:51,000 --> 00:32:52,740
at least, at most two caves.

00:32:52,740 --> 00:32:56,100
And, but it can remember which caves it already

00:32:56,100 --> 00:33:01,720
has visited. So if it starts up there, it

00:33:01,720 --> 00:33:04,800
knows it has zero grains and zero nuts, and

00:33:04,800 --> 00:33:08,780
then it can travel and just count every, in

00:33:08,780 --> 00:33:10,840
every cave how much grain is in there and

00:33:10,840 --> 00:33:11,840
then just add it up.

00:33:11,840 --> 00:33:15,860
But it can't visit this cave because it's too

00:33:15,860 --> 00:33:17,840
far away and it wouldn't find the way back.

00:33:17,840 --> 00:33:21,140
So it will go here and then there and

00:33:21,140 --> 00:33:24,300
then there and then there, and then it has

00:33:24,300 --> 00:33:28,760
counted all of its grains and nuts. And this

00:33:28,760 --> 00:33:31,580
is the result - so it has thirteen grains

00:33:31,580 --> 00:33:32,380
and thirteen nuts.

00:33:32,380 --> 00:33:35,660
This hamster's kind of creepy, I think, but it's

00:33:35,660 --> 00:33:39,340
a hamster so it's still cute. So the hamster

00:33:39,340 --> 00:33:41,760
is a visitor. So if you want to implement

00:33:41,760 --> 00:33:46,340
it, there's something called traversals. And this is a

00:33:46,340 --> 00:33:49,580
very, very natural way to implement something like that.

00:33:49,580 --> 00:33:53,880
So I work in a free and opensource project

00:33:53,880 --> 00:33:57,160
called ArangoDB, and it supports both documents and graphs

00:33:57,160 --> 00:34:01,140
and it has a awesome curry language but also

00:34:01,140 --> 00:34:03,960
has support for simple curries. It has real transactions,

00:34:03,960 --> 00:34:07,020
which are logged with, because it's an OS database,

00:34:07,020 --> 00:34:09,180
it's not normal, I think. It has

00:34:09,180 --> 00:34:12,480
master/slave replication and extensible API.

00:34:12,480 --> 00:34:16,340
Embedded V8, yeah. And it's efficient and performant.

00:34:16,340 --> 00:34:19,680
So what you can do with ArangoDB is model

00:34:19,680 --> 00:34:22,360
such a thing like a hamster, because hamster's are

00:34:22,360 --> 00:34:26,340
awesome. And this is done via the rest API.

00:34:26,340 --> 00:34:29,000
So what you can see here is the configuration

00:34:29,000 --> 00:34:32,160
of the traversal of this hamster. So you say

00:34:32,160 --> 00:34:34,360
where should it start - so there, so vertex

00:34:34,360 --> 00:34:38,500
where the hamster lives, and then you can say

00:34:38,500 --> 00:34:41,480
give, give certain details. It's a lightning talk so

00:34:41,480 --> 00:34:42,680
I won't go into everything.

00:34:42,680 --> 00:34:45,420
And then you can just give some JavaScript code

00:34:45,420 --> 00:34:48,740
and tell it what to do at every single

00:34:48,740 --> 00:34:54,080
cave. And this way it supports count the same

00:34:54,080 --> 00:34:57,640
way that it did in the example before.

00:34:57,640 --> 00:34:59,480
And you can see that it will see if

00:34:59,480 --> 00:35:04,860
it, it will remember all the nodes it visited

00:35:04,860 --> 00:35:07,860
because of this global uniqueness.

00:35:07,860 --> 00:35:13,140
So ArangoDB has some additional features for graphs. It

00:35:13,140 --> 00:35:16,140
has a really cool graphical graph explorer that a friend

00:35:16,140 --> 00:35:18,860
of mine implemented that you can see the admin

00:35:18,860 --> 00:35:20,880
interface and then you can explore the entire graph.

00:35:20,880 --> 00:35:24,540
The query language has support for graphs, but and,

00:35:24,540 --> 00:35:26,700
if you want more you can use those interators

00:35:26,700 --> 00:35:28,840
that I just showed you. And it has a

00:35:28,840 --> 00:35:31,240
lot of built in algorithms like shortest path and

00:35:31,240 --> 00:35:32,960
centrality measurements.

00:35:32,960 --> 00:35:36,980
And it's also compatible with Ruby, so I wrote

00:35:36,980 --> 00:35:40,420
a little adapter called Ashikawa Core. It's a low-level

00:35:40,420 --> 00:35:42,920
driver you can find on GitHub, as well as

00:35:42,920 --> 00:35:47,540
the database. And of course, also on RubyGems, and

00:35:47,540 --> 00:35:51,520
Guacamole - it's an ODM with Rails support that

00:35:51,520 --> 00:35:52,800
we just shipped today.

00:35:52,800 --> 00:35:56,080
So you can check it out and, yeah, get

00:35:56,080 --> 00:35:57,480
a look on GitHub. Thank you.

00:36:01,780 --> 00:36:04,420
??: All right. How many people here don't know

00:36:04,420 --> 00:36:05,420
what this means?

00:36:06,940 --> 00:36:08,120
All right. It was gonna be a really short

00:36:08,120 --> 00:36:11,640
talk otherwise. If everybody already knew. All right, so

00:36:11,640 --> 00:36:16,220
miniswan, this is a, one of the fundamental tenants

00:36:16,220 --> 00:36:19,400
of the Ruby community, and what it stands for

00:36:19,400 --> 00:36:23,740
is Matz is nice and so we are nice.

00:36:26,160 --> 00:36:29,780
I think it's really important we constantly keep repeating

00:36:29,780 --> 00:36:32,580
this and keep it going as, as more people

00:36:32,580 --> 00:36:37,000
come into the Ruby community and it, it kind

00:36:37,000 --> 00:36:39,100
of goes through waves. I feel like it, a

00:36:39,100 --> 00:36:40,800
lot of people will talk about it and then

00:36:40,800 --> 00:36:42,080
it kind, it will kind of go away.

00:36:42,080 --> 00:36:45,560
But there, there's more to it than just being

00:36:45,560 --> 00:36:49,140
friendly and, and treating people well and that sort

00:36:49,140 --> 00:36:51,940
of thing, and I think if we embrace this

00:36:51,940 --> 00:36:54,200
we can really keep Ruby awesome and we can

00:36:54,200 --> 00:36:58,400
move on to just make Ruby awesomer, including the,

00:36:58,400 --> 00:37:01,520
a whole community around it, and part of that

00:37:01,520 --> 00:37:05,980
is, is, is going into the way we treat

00:37:05,980 --> 00:37:07,260
people and the way we write the code.

00:37:07,260 --> 00:37:09,600
So I, I just wanted to point out real

00:37:09,600 --> 00:37:13,660
quick. We can write some nice code. And I

00:37:13,660 --> 00:37:17,840
don't, I'm not sure that's entirely intuitive. So part

00:37:17,860 --> 00:37:21,160
of this is giving forward to my future self.

00:37:21,160 --> 00:37:25,020
The semantic versioning - let's, let's write code that

00:37:25,020 --> 00:37:27,260
behaves well with other people. Let's make it so

00:37:27,260 --> 00:37:31,100
it's intuitive how, how things work. Let's do things

00:37:31,100 --> 00:37:35,040
that - write good Git commit messages. This is

00:37:35,040 --> 00:37:38,960
very important to your future self and to the

00:37:38,960 --> 00:37:40,540
people that are trying to collaborate with you.

00:37:40,540 --> 00:37:42,320
You know, put things in namespaces, that sort of

00:37:42,320 --> 00:37:45,840
thing. I, I think we can embrace this and

00:37:45,840 --> 00:37:49,340
just keep things going forward. And overall, let's just

00:37:49,340 --> 00:37:52,880
make sure that we maintain this tenant that, you

00:37:52,880 --> 00:37:55,920
know, goes back to the early days of the,

00:37:55,920 --> 00:37:58,100
you know, the RubyLang mailing list.

00:37:58,100 --> 00:38:00,940
And, and we want to just, just keep going,

00:38:00,940 --> 00:38:03,280
and when you see people that aren't acting accordingly,

00:38:03,280 --> 00:38:06,280
just tell them Miniswan and keep going with it.

00:38:06,280 --> 00:38:06,920
Thank you.

00:38:10,500 --> 00:38:13,800
??: OK. I have fifty slides in five minutes,

00:38:13,800 --> 00:38:15,040
so that's six seconds a slide.

00:38:17,240 --> 00:38:21,100
So this is a short talk about software compatibility.

00:38:21,100 --> 00:38:24,340
And software compatibility is important because, if you want

00:38:24,340 --> 00:38:27,020
to upgrade one of you dependencies, whether that be

00:38:27,020 --> 00:38:29,520
an operating system, a programming language or a gem,

00:38:29,520 --> 00:38:32,220
you need to know whether it's compatible with the

00:38:32,220 --> 00:38:33,640
version you're currently using.

00:38:35,520 --> 00:38:38,840
So let's talk about semantic versioning. What does it

00:38:38,840 --> 00:38:41,860
mean for a version to be semantic? A semantic

00:38:41,860 --> 00:38:44,780
version conveys information about the meaning of the code.

00:38:44,780 --> 00:38:48,320
The version isn't just some arbitrary number, it actually

00:38:48,320 --> 00:38:49,320
tells you something.

00:38:50,440 --> 00:38:54,520
And specifically, it tells you what changed, and it

00:38:54,520 --> 00:38:58,400
tells you what didn't change. So another way to

00:38:58,400 --> 00:39:01,280
say that is, semantic versioning is a statement about

00:39:01,280 --> 00:39:05,000
software's compatibility with the previous version or previous versions

00:39:05,000 --> 00:39:06,000
of that software.

00:39:07,720 --> 00:39:12,040
So semantic version has three places for numbers. In

00:39:12,040 --> 00:39:15,280
this case represented by x, y, and z. For

00:39:15,280 --> 00:39:18,200
those who speak British, that's x, y, and zed.

00:39:19,000 --> 00:39:24,700
Note, you, you can't tell whether a version is

00:39:24,700 --> 00:39:27,820
semantic just by looking at it. So Ruby and

00:39:27,820 --> 00:39:31,160
Rails both have version numbers in this form, but

00:39:31,160 --> 00:39:33,040
neither adheres to semantic versioning.

00:39:33,940 --> 00:39:36,220
So what you should do is you should document

00:39:36,220 --> 00:39:38,540
that you're using semantic versioning, in a README or

00:39:38,540 --> 00:39:40,580
some other obvious place where people can find it.

00:39:42,140 --> 00:39:45,100
So this is an example version number, and each

00:39:45,100 --> 00:39:47,560
digit means something different, right. The x, y, and

00:39:47,560 --> 00:39:49,040
z all, all have a different meaning.

00:39:50,280 --> 00:39:53,480
When the developer increments the least significant digit,

00:39:53,480 --> 00:39:56,940
the three, in this case, basically they're making a statement

00:39:56,940 --> 00:40:01,860
about, a promise, actually, about the, the compatibility. And

00:40:01,860 --> 00:40:03,980
they're saying that this version is fully compatible with

00:40:03,980 --> 00:40:06,540
the previous version. And it's even more precise than

00:40:06,540 --> 00:40:09,200
that. It's not just compatible. It's there's no interface

00:40:09,200 --> 00:40:13,140
changes, right. No changes to the public interface.

00:40:14,080 --> 00:40:16,800
These are often called patch releases and include things

00:40:16,800 --> 00:40:21,700
like bug fixes, performance improvements and security patches.

00:40:22,600 --> 00:40:25,800
And in the words of Janet Jackson, you want this,

00:40:25,800 --> 00:40:28,300
right. When a developer ships a new patch release,

00:40:28,300 --> 00:40:31,900
you should upgrade. The risks are typically low and

00:40:31,900 --> 00:40:32,900
the rewards are high.

00:40:34,140 --> 00:40:36,660
So now let's talk about the second digit in

00:40:36,660 --> 00:40:40,720
semver. Unlike patch-releases, minor updates allow interface

00:40:40,720 --> 00:40:45,160
changes, but they only allow positive deltas. So new methods can

00:40:45,160 --> 00:40:47,400
be added, but old methods can't be removed or

00:40:47,400 --> 00:40:50,320
changed in an incompatible way. So, again, just like

00:40:50,320 --> 00:40:53,460
patch releases, these are compatible. There can be public

00:40:53,460 --> 00:40:56,300
API changes but only positive additions to the public API.

00:40:56,300 --> 00:41:00,620
And the developer promises there's no breaking changes.

00:41:00,620 --> 00:41:03,400
Typically, minor releases are used for adding new features.

00:41:03,400 --> 00:41:08,240
And I don't actually know LaToya Jackson said this, but it

00:41:08,240 --> 00:41:10,100
sort of goes with the theme. You might want

00:41:10,100 --> 00:41:14,000
this, right. It's new features, it's not breaking anything.

00:41:14,000 --> 00:41:16,880
So, in general, the, the risk of upgrading is

00:41:16,880 --> 00:41:20,960
pretty low and there, there's no good reason not

00:41:20,960 --> 00:41:22,780
to upgrade. You get new features, which you may,

00:41:22,780 --> 00:41:23,780
may want to use.

00:41:25,360 --> 00:41:28,120
So the most significant digit, when that's incremented, it

00:41:28,120 --> 00:41:30,640
indicates that there's a, there's an existing change. And

00:41:30,640 --> 00:41:33,620
just to be clear, like, this version should only

00:41:33,620 --> 00:41:36,120
be incremented when there is a breaking change. If

00:41:36,120 --> 00:41:38,640
there's not a breaking change, then you can just

00:41:38,640 --> 00:41:41,380
keep incrementing that minor version number, right. The, these

00:41:41,380 --> 00:41:43,800
numbers can go above nine. You can have one

00:41:43,800 --> 00:41:46,580
dot ten or one dot eleven, right. Goes to eleven.

00:41:46,580 --> 00:41:50,940
So when, when the significant digit changes, that's like

00:41:50,940 --> 00:41:54,860
a significant statement that this version is incompatible.

00:41:54,860 --> 00:41:58,440
Some behavior that was existing was either changed or removed.

00:41:58,440 --> 00:42:02,300
And that basically there's interface changes.

00:42:04,580 --> 00:42:07,900
And this is, in the immortal words of Michael

00:42:07,940 --> 00:42:10,540
Jackson, basically you'll have to change your code, right.

00:42:10,540 --> 00:42:12,840
If something is incompatible, that means you have to

00:42:12,840 --> 00:42:14,960
do something to make it work with the system

00:42:14,960 --> 00:42:16,160
that you're upgrading.

00:42:16,160 --> 00:42:18,600
So, you get, maybe you get a new feature,

00:42:18,600 --> 00:42:19,600
but it's not - you don't get it for

00:42:19,600 --> 00:42:21,520
free, the way that you do in a patch

00:42:21,520 --> 00:42:23,220
release or a minor release.

00:42:26,200 --> 00:42:29,420
So one point zero point zero is a significant

00:42:29,420 --> 00:42:33,000
release. This also has semantic meaning in semantic versioning

00:42:33,000 --> 00:42:37,140
Basically, this defines your public API. So before version

00:42:37,140 --> 00:42:39,480
1 point 0, you can do whatever you want.

00:42:39,480 --> 00:42:41,740
You can make breaking changes. There's no guarantees and

00:42:41,740 --> 00:42:44,020
no promises. But once you release version 1 point

00:42:44,020 --> 00:42:47,660
0, what you're saying is, this is, this is

00:42:47,660 --> 00:42:50,320
like a stable API. I will not change it

00:42:50,320 --> 00:42:51,860
until version 2 is released.

00:42:53,520 --> 00:42:56,060
And when you release version 2, it's sort of

00:42:56,060 --> 00:43:01,260
another way of saying - can we do that

00:43:01,260 --> 00:43:02,260
again, sorry?

00:43:02,700 --> 00:43:04,320
JOB: I've made a huge mistake.

00:43:05,660 --> 00:43:08,780
??: So yeah, like basically it means that, like,

00:43:08,780 --> 00:43:11,040
you designed your API and you're like, OK, it's

00:43:11,040 --> 00:43:13,220
1 point 0. I'm locking it down. It's solid.

00:43:13,220 --> 00:43:16,020
And then you realize that, like, maybe you hadn't

00:43:16,020 --> 00:43:17,740
thought through the problem all the way or modelled

00:43:17,740 --> 00:43:21,780
it correctly or whatever. And so yeah, so then

00:43:22,840 --> 00:43:24,180
maybe that happens again.

00:43:25,760 --> 00:43:27,620
JOB: I've made a huge mistake.

00:43:28,960 --> 00:43:32,040
??: And so maybe it even happens one more

00:43:32,960 --> 00:43:34,780
JOB: I've made a huge mistake.

00:43:35,640 --> 00:43:40,620
??: So these software, the, the, there's sort of

00:43:40,620 --> 00:43:42,980
this formula that I've come up with for stability

00:43:42,980 --> 00:43:46,940
of a, of a package, which is, you take

00:43:46,940 --> 00:43:49,540
the major version number and divide it by the

00:43:49,540 --> 00:43:51,700
amount of time since version one point zero point

00:43:51,700 --> 00:43:52,700
zero was released.

00:43:52,700 --> 00:43:56,240
And it's basically like saying like how often does

00:43:56,240 --> 00:44:00,280
this library break its public API. How often do

00:44:00,280 --> 00:44:02,680
you, as the user of this library, need to

00:44:02,680 --> 00:44:07,160
make changes be, because, like the API wasn't quite

00:44:07,160 --> 00:44:09,400
right in version one, or two, or three.

00:44:11,540 --> 00:44:14,240
OK, so now you understand semantic versioning, but so

00:44:14,240 --> 00:44:16,960
what? Like why is this useful? So the thing

00:44:16,960 --> 00:44:19,520
that makes semantic versioning useful is that you can

00:44:19,520 --> 00:44:23,080
use it to correctly specify dependencies. There's a great

00:44:23,080 --> 00:44:26,080
blog post about this by Yehuda Kats, called using

00:44:26,080 --> 00:44:28,780
greater to or equal to considered harmful, in the

00:44:28,780 --> 00:44:32,020
context of specifying dependencies. I would encourage you to

00:44:32,020 --> 00:44:34,140
read the whole blog post. it's a great blog post.

00:44:34,140 --> 00:44:38,180
But it has a TL;DR as the first line,

00:44:38,180 --> 00:44:41,800
which basically says, use this instead. Don't use greater

00:44:41,800 --> 00:44:44,080
than or equal to. Use this. What is this?

00:44:44,080 --> 00:44:47,400
This is the pessimistic version constraint, and it works

00:44:47,400 --> 00:44:50,780
like this. So if you say, pessimistic version constraint

00:44:50,780 --> 00:44:53,000
one point two point three, that's the same thing

00:44:53,000 --> 00:44:55,100
as saying greater than or equal to one point

00:44:55,100 --> 00:44:57,380
two point three but less than one point three.

00:44:57,380 --> 00:45:00,140
So basically you like, knock off the last specified

00:45:00,140 --> 00:45:03,160
digit and make that like an x basically.

00:45:03,160 --> 00:45:05,040
So it's like one point two point x, where

00:45:05,040 --> 00:45:07,280
x is greater than three. And you can do

00:45:07,280 --> 00:45:09,160
the thing, same thing with two digits of precision

00:45:09,160 --> 00:45:12,200
as well, so saying pessimistic version constraint one point

00:45:12,200 --> 00:45:14,820
two is the same thing as saying greater than

00:45:14,820 --> 00:45:17,320
or equal to one point two, less than two point 0.

00:45:17,320 --> 00:45:19,380
And that's typically the one that you want to

00:45:19,380 --> 00:45:25,300
use when you're specifying a dependency that is above,

00:45:25,300 --> 00:45:28,640
on a gem that uses semantic versioning and is

00:45:28,640 --> 00:45:29,960
above version one point 0.

00:45:31,180 --> 00:45:35,000
So not everyone does this. I've gone to the

00:45:35,140 --> 00:45:37,380
trouble of removing the names from this page because

00:45:37,380 --> 00:45:39,660
Matz is nice, and so I'm trying to be

00:45:39,660 --> 00:45:43,060
nice, and I wouldn't want to publicly shame the gem that

00:45:45,820 --> 00:45:46,820
??: Burn!

00:45:46,820 --> 00:45:48,740
??: So this is a very popular gem with

00:45:48,740 --> 00:45:50,820
more than a million downloads, or almost a million

00:45:50,820 --> 00:45:54,020
downloads, and basically it uses greater than or equal

00:45:54,020 --> 00:45:58,840
to everywhere. And this is, like, really a bad

00:45:58,840 --> 00:46:00,920
thing to do, because it's basically saying that all

00:46:00,920 --> 00:46:05,740
future versions of this library will be compatible with

00:46:05,740 --> 00:46:09,160
this library. And, by definition, if they are using

00:46:09,160 --> 00:46:12,480
semantic version, versioning, then they will not be compatible, right.

00:46:12,520 --> 00:46:13,900
When there is a new major version, that will

00:46:13,900 --> 00:46:17,880
break compatibility by definition. So please do not do

00:46:17,880 --> 00:46:21,100
this. It will cause a bunch of problems for

00:46:21,100 --> 00:46:25,380
your users. Please use semantic versioning. Please specify

00:46:25,380 --> 00:46:28,440
your dependencies correctly. Thank you.

00:46:32,720 --> 00:46:35,180
MICHAEL HARTL: Hello everyone. I'm, I'm Michael Hartl and

00:46:35,180 --> 00:46:37,900
I'm here to tell you about PolyTexnic, an ebook

00:46:37,900 --> 00:46:41,160
typesetting system for technical authors. I'm, some of you

00:46:41,160 --> 00:46:42,500
may know me as the author of the Ruby

00:46:42,500 --> 00:46:45,320
on Rails Tutorial, or, or maybe as the author

00:46:45,320 --> 00:46:48,780
of The Tau Manifesto. What you may not know

00:46:48,780 --> 00:46:51,000
is that both of these were made using the

00:46:51,000 --> 00:46:54,600
prototype of PolyTechnic, and the production version of PolyTechnic

00:46:54,600 --> 00:46:56,680
is currently in private beta, and I'll have a

00:46:56,680 --> 00:46:58,660
little bit to tell you about it at the

00:46:58,660 --> 00:47:00,240
end if you're interested in getting involved.

00:47:01,400 --> 00:47:04,100
So PolyTechnic is distributed as a RubyGem under the

00:47:04,100 --> 00:47:06,500
MIT license and it, it gives you a, a

00:47:06,500 --> 00:47:08,120
command line client- hmm?

00:47:08,120 --> 00:47:09,120
??: Make that font bigger.

00:47:09,120 --> 00:47:11,380
M.H.: So it's actually not important for them to-

00:47:11,380 --> 00:47:12,380
??: OK.

00:47:12,380 --> 00:47:14,080
M.H.: Well, I can, so it's not, it's not

00:47:14,080 --> 00:47:17,220
that important. I can try it. So, cause I'll

00:47:17,220 --> 00:47:19,660
be telling them. Anyway, so it comes with a

00:47:19,660 --> 00:47:21,320
command line client called Poly, and so what we're

00:47:21,320 --> 00:47:22,720
gonna do now is set, make a new book

00:47:22,720 --> 00:47:25,800
with Poly new. So let's make a new little

00:47:25,800 --> 00:47:27,280
book called RubyConf.

00:47:29,100 --> 00:47:33,000
So that generated a, a file skeleton. So it's

00:47:33,000 --> 00:47:35,520
a book, it's sort of a book skeleton. And

00:47:35,520 --> 00:47:39,560
I've got it - oops. I've got a prep

00:47:39,560 --> 00:47:40,980
script here just to save a little time.

00:47:42,940 --> 00:47:45,300
And one of the things that PolyTechnic comes with

00:47:45,300 --> 00:47:48,720
is a server. I've called Poly server or poly

00:47:48,720 --> 00:47:51,280
s for short, that builds the template that we

00:47:51,280 --> 00:47:53,920
just made and serves it as HTML on a

00:47:53,920 --> 00:47:56,420
local host 4000. So let's take a look at that.

00:47:59,240 --> 00:48:01,960
So this is the template that just got generated.

00:48:05,800 --> 00:48:08,080
And let's take a look at the source of

00:48:08,080 --> 00:48:13,800
this, and we've got some demo material. All right,

00:48:13,800 --> 00:48:15,100
so let's just get it, get it set up.

00:48:15,100 --> 00:48:18,220
OK, so this is set, the first chapter of

00:48:18,220 --> 00:48:20,020
the template document that got generated. But I'm just

00:48:20,020 --> 00:48:21,980
gonna delete the, the stubs cause we don't need it

00:48:21,980 --> 00:48:24,160
So you can see that the server actually just

00:48:24,160 --> 00:48:28,680
refreshed the document automatically when I saved. So now

00:48:28,680 --> 00:48:31,620
I'm gonna put a new title for the chapter

00:48:31,620 --> 00:48:33,660
- it's A PolyTexnic demo. And you can see

00:48:33,660 --> 00:48:35,380
that it's got a couple of references there, to

00:48:35,380 --> 00:48:37,660
a section on inheritance, and section on the golden ratio.

00:48:37,660 --> 00:48:40,920
The, those are labels, though, so you can see

00:48:40,920 --> 00:48:43,260
colon inheritance. It's in red because it hasn't been

00:48:43,260 --> 00:48:47,120
defined yet. So I'm going to paste in the

00:48:47,120 --> 00:48:49,440
section on inheritance. You can see it changes to

00:48:49,440 --> 00:48:52,060
section 1 point 1, covers inheritance. That's a linked

00:48:52,060 --> 00:48:54,580
cross-reference. And you can see there are a couple

00:48:54,580 --> 00:48:57,140
of blocks of code there will full syntax highlighting.

00:48:57,140 --> 00:48:59,940
But it's really nice, especially in a longer document,

00:48:59,940 --> 00:49:01,940
to be able to refer to your code by

00:49:01,940 --> 00:49:04,640
some sort of label. So I'm gonna paste this

00:49:04,640 --> 00:49:07,180
in here, and you can see listing code colon

00:49:07,180 --> 00:49:09,320
word, which is an example of inheritance in Ruby.

00:49:09,320 --> 00:49:14,080
And now I'm gonna put in a code listing

00:49:14,080 --> 00:49:16,160
environment. This comes as a part of the PolyTechnix

00:49:16,160 --> 00:49:23,740
system. So here we go. I'm gonna cut that

00:49:23,740 --> 00:49:24,940
and put it in, and now you can see

00:49:24,940 --> 00:49:26,840
listing 1 point 1, which is an example of

00:49:26,840 --> 00:49:27,620
Ruby inheritance.

00:49:27,620 --> 00:49:29,500
So you can see that Polytechnic is really good

00:49:29,500 --> 00:49:30,700
at source code, but it does a lot of

00:49:30,700 --> 00:49:34,240
other things too. Here's the second section on the

00:49:34,240 --> 00:49:35,240
Golden ratio.

00:49:37,640 --> 00:49:39,800
So we can see here that we've got a

00:49:39,800 --> 00:49:44,480
figure with a numbered caption. And that's a golden

00:49:44,480 --> 00:49:46,140
rectangle there - if you do some analysis and

00:49:46,140 --> 00:49:48,480
some algrebra, you can derive the numerical result for

00:49:48,480 --> 00:49:52,180
the numerical value for the golden ratio. And you

00:49:52,180 --> 00:49:54,380
can see that the PolyTechnix supports a linked cross- reference

00:49:54,380 --> 00:49:59,280
for the figure, centered math, inline math, numbered equations

00:49:59,280 --> 00:50:00,420
with linked cross-references.

00:50:01,540 --> 00:50:03,440
Right, so our document is, is coming together now.

00:50:03,440 --> 00:50:07,320
Let's build some ebooks. I'm typing poly build here.

00:50:07,320 --> 00:50:09,640
This is building epub, mobe, and pdf from the

00:50:09,640 --> 00:50:11,720
same source. The input source we've been looking at

00:50:11,720 --> 00:50:14,340
is called PolyTec. It's a strict subset of the

00:50:14,340 --> 00:50:17,980
laytech subtyping language. PolyTechnix also supports markdown as

00:50:17,980 --> 00:50:20,600
input, and includes a mark down polytech converter so

00:50:20,600 --> 00:50:22,400
you can switch to polytech if you want to.

00:50:23,820 --> 00:50:25,620
Right, so let's take a look at the ebook

00:50:25,620 --> 00:50:29,840
that got generated. All right, so here is the

00:50:29,840 --> 00:50:33,260
PDF, and you can see that there's the, a

00:50:33,260 --> 00:50:35,980
cover that of course you can change before publishing

00:50:36,020 --> 00:50:39,460
anything, and here is the first chapter of PolyTechnix

00:50:39,460 --> 00:50:42,460
Demo, and we see that links, linked cross-references, syntax

00:50:42,460 --> 00:50:47,440
highlighted source code, math, figure and so on, whoops.

00:50:49,600 --> 00:50:51,100
And let's take a look at the, at the

00:50:51,100 --> 00:50:54,280
mobe document. K, we see the same thing. Linked

00:50:54,280 --> 00:50:57,940
cross-references, syntax highlighted source code, the figure, and math.

00:50:57,940 --> 00:51:01,160
So, these files are on my computer, so I

00:51:01,160 --> 00:51:02,280
can do whatever I want with them. I can

00:51:02,280 --> 00:51:04,140
sell them, I can give them away. But one

00:51:04,140 --> 00:51:05,980
of the things I learned in the Rails Tutorial

00:51:05,980 --> 00:51:07,220
is how nice it is to be able to

00:51:07,220 --> 00:51:11,700
publish very, very quickly and easily. So PolyTechnix comes

00:51:11,700 --> 00:51:14,420
with one file thing called polypublish, which publishes to

00:51:14,420 --> 00:51:17,340
a website that we're developing, my cofounders and I

00:51:17,340 --> 00:51:20,000
are developing as a part of PolyTechnix called softcover.

00:51:20,000 --> 00:51:21,780
So that's uploading, but just to save time I'm

00:51:21,780 --> 00:51:24,040
gonna show you that this is the live website.

00:51:24,040 --> 00:51:27,520
It's softcover dot io. And so you can see

00:51:27,520 --> 00:51:29,060
that it's, this is the book online. It's the

00:51:29,060 --> 00:51:32,260
HTML, there's also pdf, epub and moby. Softcover's design

00:51:32,260 --> 00:51:35,140
is a general system for selling digital goods, so

00:51:35,140 --> 00:51:39,300
you can upload screencasts, make multiple bundles with multiple pircing tiers.

00:51:39,300 --> 00:51:42,620
So if you're interested in learning more about PolyTechnix

00:51:42,620 --> 00:51:45,180
or softcover, go to softcover dot io and put

00:51:45,180 --> 00:51:47,120
your email address in and you'll get an invitation

00:51:47,120 --> 00:51:48,460
to the private data. Thank you.

00:51:49,420 --> 00:51:50,420
??: Very nice.

00:51:51,620 --> 00:51:55,620
Also we, also be sure to check out the

00:51:55,620 --> 00:51:57,140
Tau Manifesto. OK.

00:51:57,940 --> 00:52:01,720
HIROSHI SHIBATA: OK, so, current status of ruby-lang dot org.

00:52:01,720 --> 00:52:05,400
So my name is Hiroshi Shibata, so I am

00:52:05,400 --> 00:52:09,660
CRuby committer. So my Twitter and GitHub accounts and,

00:52:09,660 --> 00:52:14,620
HSBT. This is my GitHub profile, so my main

00:52:14,620 --> 00:52:16,740
work is OSS contributions.

00:52:16,740 --> 00:52:21,720
So I am root of ruby-lang org. I'll introduce

00:52:21,720 --> 00:52:26,860
current status of ruby-lang org. So first, we're

00:52:26,860 --> 00:52:28,620
www ruby-lang org.

00:52:29,860 --> 00:52:35,420
www ruby-lang org is hosted by GitHub now. We

00:52:35,420 --> 00:52:39,980
can see content in ruby-lang org easily. If you

00:52:39,980 --> 00:52:45,060
discover type in the wrong sentence, please open each

00:52:45,060 --> 00:52:48,420
issue and send pull requests.

00:52:48,420 --> 00:52:54,020
We can merge it, and the deploy production

00:52:54,020 --> 00:53:00,460
stage in ruby-lang. I introduced ruby-lang org in Beirut RubyConf, 

00:53:00,460 --> 00:53:04,160
Singapore at the spring this year. So

00:53:04,160 --> 00:53:08,120
we got our better?? translations in six months.

00:53:08,120 --> 00:53:12,700
And some of translations are out of date. We

00:53:12,700 --> 00:53:15,840
need to more contributions. Please join us.

00:53:18,400 --> 00:53:23,700
Next, is, I prepared HTTPS protocol in

00:53:23,700 --> 00:53:29,420
ruby-lang org. This SSL certification is provided by

00:53:29,420 --> 00:53:34,840
GlobalSign opensource program. They provided us with one such

00:53:34,840 --> 00:53:38,320
certifications, so thanks to GlobalSign.

00:53:40,300 --> 00:53:45,420
And next our bugs.ruby-lang.org. It is also issue tracking

00:53:45,420 --> 00:53:52,640
ruby development using redmine. So bet, bugs.ruby-lang.org is

00:53:52,640 --> 00:53:58,320
running with dedicated server now. And it uses Ruby 1

00:53:58,320 --> 00:54:02,720
point 8 and Rails 2 point 3 It's the

00:54:02,720 --> 00:54:05,600
bug. They are already in the MRI.

00:54:05,600 --> 00:54:09,820
So I hope to use Ruby 2 point 0

00:54:09,820 --> 00:54:14,780
and the latest version of RedMine. Now we fork

00:54:14,780 --> 00:54:23,120
at GitHub, and at bugs.ruby-lang.org uses original program of

00:54:23,120 --> 00:54:26,820
RedMine. I think they are contributed for Rails 3

00:54:26,820 --> 00:54:30,820
but current status is pending.

00:54:33,200 --> 00:54:39,140
Next, is our docs.ruby-lang.org. Docs.ruby-lang.org

00:54:39,140 --> 00:54:41,460
provide only Japanese documentation

00:54:41,460 --> 00:54:45,540
of Ruby. It name is RubyMa. RubyMa stands

00:54:45,540 --> 00:54:50,780
for Ruby Manual. Docs.ruby-lang.org provides

00:54:50,780 --> 00:54:52,860
English documentation now.

00:54:52,860 --> 00:54:57,340
This prepared by Jach. Thank you for Jack.

00:55:05,940 --> 00:55:12,280
And Heroku provides our resources of www and bugs

00:55:12,280 --> 00:55:16,320
and docs and more. We are migrating our content

00:55:16,320 --> 00:55:20,700
to Heroku from dedicated server. After migrations, we plan

00:55:20,700 --> 00:55:23,640
to add a CVM. Thanks to Heroku.

00:55:29,860 --> 00:55:35,620
And next server is cache.ruby-lang.org. This host are providing

00:55:35,620 --> 00:55:39,260
official Ruby packages. We have the recent program.

00:55:39,260 --> 00:55:43,120
This first location is Japan. So USA and the

00:55:43,120 --> 00:55:47,260
Europe is too far from this host, so I

00:55:47,260 --> 00:55:52,240
negotiated fastly, and they have CVM. You can get

00:55:52,240 --> 00:55:56,180
Ruby packages with ?? in USA and Europe.

00:55:57,960 --> 00:56:03,000
These are same hosts ?? is STP Ruby-lang.org.

00:56:03,000 --> 00:56:09,840
That cache.ruby-lang.org never the CVM. You can see

00:56:09,840 --> 00:56:15,100
this ten times faster with CVM. Don't use STP.

00:56:15,100 --> 00:56:17,720
Please use cache stp ruby-lang.org.

00:56:23,620 --> 00:56:28,400
Thanks to fastly, please Tweet thanks flastly.

00:56:30,520 --> 00:56:34,300
And finally we offer a Ruby design contest of

00:56:34,300 --> 00:56:38,420
ruby-lang.org. We have a lot of submissions. I'll introduce

00:56:38,420 --> 00:56:43,440
them in order of submissions. First designs.

00:56:44,460 --> 00:56:53,060
Second. Third. Fourth. Our five. Our six.

00:56:54,220 --> 00:56:56,760
So we are going to select one design in

00:56:56,760 --> 00:57:01,900
RubyWorldConference at November 21. Great chance.

00:57:01,900 --> 00:57:02,900
Thanks.

00:57:07,040 --> 00:57:10,120
SATOSHI GUNJI: I'm Gunji. I have opportunity for the

00:57:10,120 --> 00:57:12,780
presentation introducing Rubyist Magazine.

00:57:14,240 --> 00:57:17,380
So a, I'd like to begin my, by asking

00:57:17,380 --> 00:57:22,060
you a question. Do you know Rubyist Magazine? Oh,

00:57:22,060 --> 00:57:23,060
thank you.

00:57:24,260 --> 00:57:27,200
Rubyist Magazine is the most popular web magazine in

00:57:27,200 --> 00:57:32,060
Japan that posts inform- important information about Ruby. Now

00:57:32,060 --> 00:57:36,220
it's nine years old and it has forty-four, plus

00:57:36,220 --> 00:57:40,480
seven issues, five hundred and ninety-seven articles, but

00:57:40,480 --> 00:57:42,200
most of them are Japanese.

00:57:43,440 --> 00:57:47,460
The website is http colon slash slash magazine dot

00:57:47,460 --> 00:57:48,760
rubyist dot net.

00:57:52,220 --> 00:57:56,260
And I am one of the member of Rubyist

00:57:56,260 --> 00:58:01,420
Magazine editors' team. I edited many articles posted on

00:58:01,420 --> 00:58:06,280
Rubyist Magazine, and I posted some articles to Rubyists Magazine.

00:58:06,280 --> 00:58:10,300
for example, Fiber for beginners, which do

00:58:10,300 --> 00:58:16,720
you like map or collect? and Euruko 2013 Conference Report.

00:58:16,720 --> 00:58:21,460
But these articles are written in Japanese. If you

00:58:21,460 --> 00:58:24,180
want to read, please use Google translate.

00:58:26,920 --> 00:58:32,280
So Rubyists Magazine major contents, for example, Rubyists interviews,

00:58:32,280 --> 00:58:40,640
memorable first interviews, interviewees, Matz-san and interviewer is 

00:58:40,640 --> 00:58:41,640
Koi-san.

00:58:49,960 --> 00:58:54,100
And regional Ruby conference reports. We have many, many

00:58:54,100 --> 00:58:58,780
regional Ruby conference in Japan. And introducing your li-

00:58:58,780 --> 00:59:02,200
library, if you made it, and job offer, for

00:59:02,200 --> 00:59:07,600
example, Nintendo employees implement examination,

00:59:07,600 --> 00:59:12,160
and Nintendo called a puzzle. It's fun so please try it.

00:59:22,140 --> 00:59:23,140
And so.

00:59:56,920 --> 00:59:58,560
??: Is the laptop not working again?

00:59:59,600 --> 01:00:00,600
S.G.: I don't.

01:00:11,860 --> 01:00:12,860
??: Let's try it again.

01:00:30,220 --> 01:00:33,140
S.G.: And, this is a conents ranking of Rubyist

01:00:33,140 --> 01:00:37,300
Magazine contents. If you happen to be interested in

01:00:37,300 --> 01:00:42,760
Japanese user interests, pease refer to ranking at this URL.

01:00:43,880 --> 01:00:47,840
And some English articles are translated to, to

01:00:47,840 --> 01:00:51,960
Japanese for example, RubyGems and blah blah blah.

01:00:53,720 --> 01:00:58,560
And a few articles its, which we want many

01:00:58,560 --> 01:01:01,160
of our own Japanese people to read, translate it

01:01:01,160 --> 01:01:04,660
Japanese to English. For example, Ruby 2 point 0

01:01:04,660 --> 01:01:08,720
Release special articles. Introducing to Ruby 2 point 0

01:01:08,720 --> 01:01:14,920
and introduction ruby-dev translation is in translation of ruby-dev

01:01:14,920 --> 01:01:16,980
English translation project.

01:01:18,600 --> 01:01:22,160
So why don't you post to, to Rubyist Magazine?

01:01:22,160 --> 01:01:26,280
We are waiting for your post. We, we want

01:01:26,280 --> 01:01:30,000
more English content, more regional Ruby conference reports from

01:01:30,000 --> 01:01:34,400
any countries, more job offers from any countries, introducing

01:01:34,400 --> 01:01:39,260
your own libraries, so please send email to magazine

01:01:39,260 --> 01:01:41,680
at ruby-no-kai dot org, if you want to post.

01:01:42,320 --> 01:01:43,320
Thank you.

01:01:46,140 --> 01:01:47,120
ANDREW HARVEY: So I want to talk a little

01:01:47,120 --> 01:01:49,660
bit about what I have learned in the last

01:01:49,660 --> 01:01:54,660
three weeks by interviewing a bunch of Rubyists. Let

01:01:54,660 --> 01:01:56,820
me first make sure this works.

01:01:57,460 --> 01:02:00,120
Let me first introduce myself. My name is Andrew

01:02:00,120 --> 01:02:05,280
Harvey. I run rorosyd, which is the Sydney Ruby

01:02:05,280 --> 01:02:09,480
on Rails meetup. We meet monthly. I also help

01:02:09,480 --> 01:02:13,060
run development hub and am an organizer of Rails

01:02:13,060 --> 01:02:15,400
Girls Sydney. We're actually, Emily Sprocket

01:02:15,400 --> 01:02:18,280
Australia has four simultaneous Rails Girls running.

01:02:18,280 --> 01:02:22,380
and next weekend in Sydney, Perth, Melbourne and Brysbourne.

01:02:22,380 --> 01:02:25,380
Those cities might not mean anything to you but that's OK.

01:02:26,840 --> 01:02:31,760
As of two weeks ago, we launched multifaced dot

01:02:31,760 --> 01:02:34,740
io. It is a blog very much like rubyist

01:02:34,740 --> 01:02:37,640
dot net. It is designed to pull in content

01:02:37,640 --> 01:02:41,600
at, we're, we're, we're building content by talking to

01:02:41,600 --> 01:02:44,060
some really interesting people about interesting

01:02:44,060 --> 01:02:47,660
things, focused around Ruby and, and around Rubyists.

01:02:48,280 --> 01:02:52,380
But this week, there has been a hub. How

01:02:52,380 --> 01:02:54,760
many of you have actually been to the hub?

01:02:56,900 --> 01:03:00,180
Can I, can I suggest, ask that maybe some

01:03:00,180 --> 01:03:01,700
more might want to have a look? It's got

01:03:01,700 --> 01:03:03,780
a stream of all the, all the Twitter feed

01:03:03,780 --> 01:03:06,180
and Instagram and whatever else you kids are using

01:03:06,180 --> 01:03:11,060
these days. It's got a planner down the side, including some

01:03:11,060 --> 01:03:13,680
talk previews. If you're still struggling to work out

01:03:13,680 --> 01:03:16,380
which talks you're interested in going to, we've been

01:03:16,380 --> 01:03:18,480
interviewing a lot of the speakers.

01:03:18,480 --> 01:03:20,760
And that's where I get to what I learned

01:03:20,760 --> 01:03:23,880
from talking to a bunch of Rubyists. I think

01:03:23,880 --> 01:03:26,740
I ended up talking to eighteen or nineteen different

01:03:26,740 --> 01:03:28,640
Rubyists before I got on a plane here, and

01:03:28,640 --> 01:03:31,380
then I've talked to even more. And I learned

01:03:31,380 --> 01:03:33,580
some things about Ruby and Rubyists.

01:03:33,580 --> 01:03:35,900
But first I need to make an apology. There

01:03:35,900 --> 01:03:38,040
are some speakers that I interviewed that I have

01:03:38,040 --> 01:03:41,360
not yet, either been able to post their interview

01:03:41,360 --> 01:03:44,320
or the writeup of it, because that's currently,

01:03:44,320 --> 01:03:48,880
multifaceted has been around for a, for a week, and

01:03:48,880 --> 01:03:52,520
that's how many words I've written. 8,430, and my,

01:03:53,080 --> 01:03:54,720
I, I can't type any faster.

01:03:55,220 --> 01:03:57,760
But what I learned about Ruby is, as Rubyists

01:03:57,760 --> 01:04:02,900
we love the syntax. We love the expressiveness, the

01:04:02,900 --> 01:04:08,020
conciseness and the simplicity of the syntax. We also

01:04:08,020 --> 01:04:12,820
love the people. Matz is nice so we are nice.

01:04:12,820 --> 01:04:15,640
And that has radiated throughout the community.

01:04:15,640 --> 01:04:18,000
I actually think there's a little bit of technological

01:04:18,000 --> 01:04:21,680
determinism going in there as well. We're a very

01:04:21,680 --> 01:04:25,060
human oriented language. A language which is designed for

01:04:25,060 --> 01:04:28,340
humans has brought in humans that care about humans.

01:04:29,920 --> 01:04:32,860
We do actually care about performance- that's one -

01:04:32,860 --> 01:04:35,780
I also love that gif, I ccould, yeah, I

01:04:35,780 --> 01:04:37,040
don't even know.

01:04:37,040 --> 01:04:39,180
We actually do care about performance. There is a

01:04:39,180 --> 01:04:42,460
huge number of talks this weekend that have been

01:04:42,460 --> 01:04:46,100
about concurrent Ruby, about garbage collection and about making

01:04:46,100 --> 01:04:48,320
Ruby perform better. And I think one of the

01:04:48,320 --> 01:04:52,220
reasons that we actually compare, care about performance is

01:04:52,220 --> 01:04:54,020
that we want to widen the tent.

01:04:54,020 --> 01:04:57,180
We want to increase the number and the diversity

01:04:57,180 --> 01:04:59,540
of people who come in and use Ruby, and

01:04:59,540 --> 01:05:03,260
especially those that might be in performance-sensitive areas,

01:05:03,260 --> 01:05:06,940
like science and, and other things like that.

01:05:07,840 --> 01:05:10,120
We want to be better. One thing I've learned

01:05:10,120 --> 01:05:12,740
about Rubyists is we are constantly learning and constantly

01:05:12,740 --> 01:05:15,520
getting better at what we do. You hear a

01:05:15,520 --> 01:05:17,520
lot of Rubyists talk about their development as craft, 

01:05:17,520 --> 01:05:22,660
and they, and they extend themselves as, as, as crafts people.

01:05:24,060 --> 01:05:26,300
We also want to help others get better. The

01:05:26,300 --> 01:05:30,280
number of people who, who have mentored me or

01:05:30,280 --> 01:05:32,900
someone else that I know is just amazing. The

01:05:32,900 --> 01:05:34,680
people, the number of people who will come alongside

01:05:34,680 --> 01:05:38,240
you, whether it's on IRC, on a forum, or

01:05:38,240 --> 01:05:40,620
in, in real life is, is just fantastic.

01:05:41,480 --> 01:05:44,560
And we want to change the world. That's the

01:05:44,560 --> 01:05:48,500
one amazing thing, I've, I've used a range of

01:05:48,500 --> 01:05:52,380
programming languages and been involved in different communities,

01:05:52,380 --> 01:05:55,120
but never have I found one where changing the world

01:05:55,120 --> 01:05:56,860
is actually on the list of things to do.

01:05:57,460 --> 01:06:00,280
And that's something I find unique to Rubyists, and

01:06:00,280 --> 01:06:01,780
I don't think we should lose that.

01:06:02,620 --> 01:06:07,280
But we are also a pretty odd bunch. Last

01:06:07,280 --> 01:06:10,060
night, I, you should check out the hot tub

01:06:10,060 --> 01:06:13,200
cause last night there was the most bizarre thing

01:06:13,200 --> 01:06:16,340
of, of, I've - twenty, you know, twenty odd

01:06:16,340 --> 01:06:19,300
programmers sitting there, people with cigars and bourbon in

01:06:19,300 --> 01:06:21,600
a hot tub in Miami, I'd never expected that

01:06:21,600 --> 01:06:23,020
of, of software developers.

01:06:23,020 --> 01:06:25,640
And I have twenty seconds left, in which I'm

01:06:25,640 --> 01:06:27,340
gonna say thank you and say check out the

01:06:27,340 --> 01:06:29,560
hub. If you haven't submitted your talk notes you

01:06:29,560 --> 01:06:31,360
should totally do that. I've got twenty-three pull requests

01:06:31,360 --> 01:06:32,860
and I'm stoked. I have one more.

01:06:32,860 --> 01:06:34,220
Thank you very much.

01:06:35,800 --> 01:06:36,800
??: Thank you.

01:06:40,500 --> 01:06:42,900
NAOTOSHI SEO: OK, let me talk about my examination

01:06:42,900 --> 01:06:46,620
- is Ruby standard program thread safe and process safe?

01:06:47,700 --> 01:06:50,680
My name is Naotoshi Seo. My Twitter and GitHub

01:06:50,680 --> 01:06:54,080
are currently s-o-n-o-t-s, right, sonots. I'm working as

01:06:54,080 --> 01:06:56,780
an engineer at :Dena in Japan, and I recently

01:06:56,780 --> 01:06:59,460
became as a committer member of Fluentd.

01:06:59,460 --> 01:07:01,860
How many people know Fluentd here?

01:07:03,700 --> 01:07:07,880
Oh, a few. OK. Let me explain about Fluentd.

01:07:07,880 --> 01:07:12,240
Fluentd can be used for realtime pipelining of log

01:07:12,240 --> 01:07:16,180
streams and we can write many plugins using Ruby,

01:07:16,180 --> 01:07:19,980
so using Fluentd we can collect logs from many

01:07:19,980 --> 01:07:23,400
web application servers and data processing, and the first

01:07:23,400 --> 01:07:27,260
thing to some operating systems such as iOS and Unix

01:07:27,260 --> 01:07:31,600
and we can store such long data into data store like MongoDB.

01:07:33,080 --> 01:07:36,440
Yes, and I'll talk about management to compare Fluentd

01:07:36,440 --> 01:07:42,520
ilke syslog and ryslog, scribed, flumeNG, logstash, and Fluentd.

01:07:42,520 --> 01:07:47,400
Fluentd has plenty plugin functionality that we can write

01:07:47,400 --> 01:07:51,200
Ruby plugin usi- Ruby plugin and it support gem.

01:07:51,200 --> 01:07:55,720
Logstash also supports Ruby plugin but it doesn't support

01:07:55,720 --> 01:07:59,580
gem, and so we have to pull request to Logstash git.

01:07:59,580 --> 01:08:01,560
So fluentd is a very nice tool, so try

01:08:01,560 --> 01:08:03,380
that. Try and check it out.

01:08:03,900 --> 01:08:08,580
But today's talk is about Ruby's logger. So we

01:08:08,580 --> 01:08:12,440
needed a logger which works safely in multiprocessing environment,

01:08:12,440 --> 01:08:16,860
especially for Fluentd. So I examined the Ruby's logger.

01:08:16,860 --> 01:08:19,880
So I examined four things.

01:08:19,880 --> 01:08:22,920
First thing is will logs not be mixtured in

01:08:22,920 --> 01:08:27,640
multi-threads? And second is same thing in multi-processes. And

01:08:27,640 --> 01:08:30,680
third is does log rotation work safely in multi-threads?

01:08:30,680 --> 01:08:34,080
And fourth is safe thing in multi-processes.

01:08:34,080 --> 01:08:36,940
So I wrote the tests, tests called like this.

01:08:36,940 --> 01:08:40,660
I use the parallel gem on the, using parallel

01:08:40,660 --> 01:08:46,180
gem, I, in faster threads, I wrote a five

01:08:46,180 --> 01:08:49,440
thousand a characters in log, in second thread, be it

01:08:49,440 --> 01:08:52,780
five thousand b characters in log. And I repeated this

01:08:52,780 --> 01:08:57,880
thing ten thousand times, and look into the log

01:08:57,880 --> 01:09:02,520
file and I found there is no ?? like ab or ba.

01:09:02,520 --> 01:09:05,700
So it worked fine. And I also checked the

01:09:05,700 --> 01:09:08,920
Ruby logger source code, and it was taking mutex

01:09:08,920 --> 01:09:12,800
synchronize to be thread-safe, so it looked OK. And

01:09:12,800 --> 01:09:17,200
second, same thing in multiprocess case, in using Ruby,

01:09:17,200 --> 01:09:22,940
using parallel gem, to changing the, changing, changing the

01:09:22,940 --> 01:09:26,960
option in threads to in processing, we can test

01:09:26,960 --> 01:09:29,580
the same thing in multi process case.

01:09:29,580 --> 01:09:33,560
And I looked at the log files and there

01:09:33,560 --> 01:09:37,540
is no ??. But looking in the source

01:09:37,540 --> 01:09:40,600
code, it was curious for me, it was not

01:09:40,600 --> 01:09:46,740
taking anything for thre- for multiprocess safe. But seeing

01:09:46,740 --> 01:09:49,100
the log page of Ruby of the system call

01:09:49,100 --> 01:09:52,600
lead to function in thread is saying it is hard to make.

01:09:52,600 --> 01:09:58,080
It took me ?? is wrong. So it should be OK.

01:09:58,080 --> 01:10:01,420
Third thing is does log rotation work safely in

01:10:01,420 --> 01:10:05,940
multi thread, and Ruby's logger has the option system

01:10:05,940 --> 01:10:09,200
edge, and using that, Ruby's logger can do log

01:10:09,200 --> 01:10:12,480
rotation. I tested that. And it looked OK.

01:10:12,480 --> 01:10:16,920
But in the case of multiprocess it errored. So

01:10:16,920 --> 01:10:18,480
it was bad. Why?

01:10:18,840 --> 01:10:21,060
I looked at source code. It was taking mutex,

01:10:21,060 --> 01:10:25,300
mutex works only for thread safe, it doesn't work

01:10:25,300 --> 01:10:29,660
for multi-processes. So we fix it for Fluentd.

01:10:30,480 --> 01:10:34,940
We used the, we used a flock(2) to be

01:10:34,940 --> 01:10:39,580
for interprocess locking, and I pull request this thing

01:10:39,580 --> 01:10:44,740
to Ruby 2, and it was merged! So will

01:10:44,740 --> 01:10:47,480
be released with 2 point 1 point 0!

01:10:50,440 --> 01:10:54,140
So conclusion is that Ruby logger was not safe

01:10:54,140 --> 01:10:57,000
in multiprocess but it is safe now, so you

01:10:57,000 --> 01:11:00,580
can try this in ruby-trunk and I also created

01:11:00,580 --> 01:11:04,620
process gem named the process_safe_logger, so you can try

01:11:04,620 --> 01:11:07,320
this without waiting for Ruby 2 point 1 if

01:11:07,320 --> 01:11:08,900
you wanted to try immediately.

01:11:10,180 --> 01:11:15,480
Try Fluentd! This is very cool tool, so, please

01:11:15,480 --> 01:11:17,440
try and check it out. Thank you.

01:11:18,260 --> 01:11:19,260
??: Thank you.

01:11:21,280 --> 01:11:22,280
GAUTAM REGE: All right, hi.

01:11:22,280 --> 01:11:22,720
??: Go ahead.

01:11:22,720 --> 01:11:26,120
G.R..: Let me introduce myself first. I am Gautam

01:11:26,120 --> 01:11:29,400
Rege and I, I'm a cofounder of Josh Software.

01:11:29,400 --> 01:11:31,380
It's an Indian based company which works

01:11:31,380 --> 01:11:33,040
exclusively in Ruby on Rails.

01:11:35,380 --> 01:11:38,160
We have something special in our company - the

01:11:38,160 --> 01:11:39,740
last line - we are actually associated with a company

01:11:39,740 --> 01:11:45,740
called TechVision, which has four blind Rubyists. And

01:11:45,740 --> 01:11:48,200
we've been teaching them Ruby for the past couple of years.

01:11:51,180 --> 01:11:56,120
But the question always pops up, there are all

01:11:56,120 --> 01:11:58,500
these excellent efforts which are going on, and kudos

01:11:58,500 --> 01:12:01,700
to everyone here. But how many of you all,

01:12:01,700 --> 01:12:04,520
if I may ask, have actually worked with the

01:12:04,520 --> 01:12:08,520
visually impaired or blind Rubyists? I'm really proud of

01:12:08,520 --> 01:12:10,940
you. Really proud of a couple of you guys here.

01:12:10,940 --> 01:12:18,100
But why? Are we afraid that they need work

01:12:18,100 --> 01:12:21,840
place safety? Are we afraid that they need special

01:12:21,840 --> 01:12:23,280
equipment? Maybe we have to learn braille?

01:12:24,580 --> 01:12:28,180
Let me show you a video of - this

01:12:28,180 --> 01:12:31,920
is Niten. He's working right there with a standard

01:12:31,920 --> 01:12:36,220
keyboard. It's attached to a wireless computer. There's nothing

01:12:36,220 --> 01:12:38,740
special about the keyboard. And he's got a headset.

01:12:39,740 --> 01:12:43,200
And he's listening to the screen.

01:12:46,140 --> 01:12:48,720
The laptop's far away from him. Believe it or

01:12:48,720 --> 01:12:50,600
not he doesn't even care if the display's on

01:12:50,600 --> 01:12:56,540
or not. Right. He's started a Rails server, and

01:12:56,540 --> 01:12:59,620
these guys work just like this. There's been a

01:12:59,620 --> 01:13:01,820
time when you know I've gone to their office

01:13:01,820 --> 01:13:04,780
and it's pitch dark, and I'm like, guys, is

01:13:04,780 --> 01:13:06,740
there no electricity here. And he says, why?

01:13:10,000 --> 01:13:14,180
Well, they all, what they're using is a screen

01:13:14,180 --> 01:13:18,220
reader called JAWS. There are other tools like Orca

01:13:18,220 --> 01:13:22,220
in Linux, and Mac has its built-in accessibility. But

01:13:22,820 --> 01:13:25,080
if you think I'm on a philanthropy trip here,

01:13:25,080 --> 01:13:27,960
trying to say that we should help these poor guys - I'm not.

01:13:27,960 --> 01:13:32,160
I'm here to tell you guys how big a

01:13:32,160 --> 01:13:37,480
disadvantage it is for us to be sighted. These

01:13:37,480 --> 01:13:39,440
guys have a huge advantage.

01:13:41,840 --> 01:13:45,760
Being blind, not only makes the other sensories, other

01:13:45,760 --> 01:13:48,720
senses really, really alert, they are very eager and

01:13:48,720 --> 01:13:52,400
motivated, but more importantly, they can read faster than

01:13:52,400 --> 01:13:58,280
us. That screen reader works at about 80% of

01:13:58,280 --> 01:14:02,900
what we can read. So if it's all gibberish

01:14:02,900 --> 01:14:05,140
to us, but if you open a wikipedia page

01:14:05,140 --> 01:14:10,500
and they probably read it eighty times, twenty times

01:14:10,500 --> 01:14:12,680
faster than what we can read.

01:14:12,680 --> 01:14:14,540
So by the time you are one paragraph, they

01:14:14,540 --> 01:14:15,900
read the whole page, and they probably know it

01:14:15,900 --> 01:14:20,500
better than us. They have one other advantage. This

01:14:20,500 --> 01:14:23,360
morning, Katie was talking about, you know, people who've

01:14:23,360 --> 01:14:25,480
not come on stage and who should come on

01:14:25,480 --> 01:14:27,420
stage and just talk. These guys have no stage

01:14:27,420 --> 01:14:29,480
fright. If you are standing in front of so

01:14:29,480 --> 01:14:31,400
many people, they don't really care. It can be

01:14:31,400 --> 01:14:33,680
empty, but they know what they have to talk about.

01:14:33,680 --> 01:14:37,040
In fact, I'm embarrassed that I need a presentation.

01:14:37,680 --> 01:14:40,100
These guys can sit and talk for an hour.

01:14:40,100 --> 01:14:42,040
It was interesting when I spoke to one of

01:14:42,040 --> 01:14:43,080
them, I said, hey can you just tell me

01:14:43,080 --> 01:14:45,260
a story? And he says, yeah, for how much

01:14:45,260 --> 01:14:47,840
time? Five minutes, ten minutes, one hour? When?

01:14:47,840 --> 01:14:51,760
 Now? These guys know it, because of their senses are

01:14:51,760 --> 01:14:54,920
so well developed, it's a natural advantage for them

01:14:54,920 --> 01:14:59,820
to learn programming. Well, Ruby has actually helped them,

01:15:00,360 --> 01:15:02,920
because Ruby as a language is easy for us.

01:15:02,920 --> 01:15:04,780
I ask you to take an exercise here.

01:15:04,780 --> 01:15:07,320
Close your eyes and try to think how would

01:15:07,320 --> 01:15:10,520
you, how you would explain to somebody what is

01:15:10,580 --> 01:15:14,720
the differece between a hash and an array. And

01:15:14,720 --> 01:15:16,620
you know we are all used to saying, this

01:15:16,620 --> 01:15:18,960
is a root node and the two leaf nodes,

01:15:19,560 --> 01:15:22,060
and you can draw diagrams and you can show

01:15:22,060 --> 01:15:24,040
screens, but if you're talking to a blind person,

01:15:24,040 --> 01:15:26,680
and it's for the first time, if you're trying

01:15:26,680 --> 01:15:27,900
to teach them what is a hash and an

01:15:27,900 --> 01:15:30,020
array, that's not easy.

01:15:31,980 --> 01:15:33,520
And if you're try and look at a binary

01:15:33,520 --> 01:15:35,400
search tree and tell them why it's better and

01:15:35,400 --> 01:15:37,360
why, you know, the level or the height of

01:15:37,360 --> 01:15:40,480
the tree is what the fastest search is, you

01:15:40,480 --> 01:15:42,140
know you actually have to take ?? paper,

01:15:42,140 --> 01:15:46,640
or you'll hold their hand and you know loop,

01:15:46,640 --> 01:15:48,540
press their fingers and tell them these are the nodes.

01:15:48,540 --> 01:15:52,480
So it's different teaching them. It's important for them

01:15:52,480 --> 01:15:56,700
to realize that user interface is important. They are

01:15:56,700 --> 01:15:59,140
blind but they know the value of user interfaces.

01:15:59,140 --> 01:16:03,860
And that's why Ruby helps us understand, because it

01:16:03,860 --> 01:16:07,120
hides all the, all the abstract, it abstracts all

01:16:07,120 --> 01:16:08,680
the way. So you can have a hash dot

01:16:08,680 --> 01:16:11,080
each or some array dot each and it's all

01:16:11,080 --> 01:16:11,640
the same code.

01:16:11,640 --> 01:16:13,920
So they can concentrate more on what they actually

01:16:13,920 --> 01:16:16,820
have to say. Coming to the problems I've faced

01:16:16,820 --> 01:16:18,840
are things like this - multi-line commands.

01:16:20,560 --> 01:16:25,780
Exceptions and logs. And making the ac, making it

01:16:25,780 --> 01:16:28,080
all as accessible as what they're currently working on.

01:16:28,080 --> 01:16:34,920
They're actually working with, they're actually working with Brails.

01:16:37,500 --> 01:16:39,160
This is a site that they have actually developed

01:16:39,160 --> 01:16:41,460
and this is an accessible site, and this is

01:16:41,460 --> 01:16:43,740
developed completely by them, where they can actually do 

01:16:43,740 --> 01:16:46,380
it for the visually impaired. And you can change

01:16:46,380 --> 01:16:49,580
these, these colors are not random colors. They are

01:16:49,580 --> 01:16:51,940
actually in the WCB standards, and I implore

01:16:51,940 --> 01:16:53,880
you all to actually go to the site and

01:16:53,880 --> 01:16:56,440
check it out and do any efforts to help

01:16:56,440 --> 01:16:57,480
for the content management of this site.

01:16:58,260 --> 01:16:59,260
Thank you so much.

01:16:59,260 --> 01:17:00,260
??: Thank you.

01:17:03,200 --> 01:17:04,200
??: Are you here?

01:17:04,200 --> 01:17:04,940
SHIMPEI MAKIMOTO: What?

01:17:04,940 --> 01:17:05,940
??: OK. Come on up.

01:17:06,260 --> 01:17:09,580
S.M.: OK. Hello everyone. I have a talk about

01:17:09,580 --> 01:17:14,020
animated GIF. I am Makimoto of CookPad Inc in

01:17:14,020 --> 01:17:19,500
Tokyo. My recent interest is breaking images, and so

01:17:19,500 --> 01:17:25,300
last year I gave a lightning talk about the pragmatic glitch.

01:17:26,220 --> 01:17:30,400
But and today my talk is not glitch but

01:17:30,400 --> 01:17:36,360
animated GIF. You already know animated gif is this.

01:17:36,360 --> 01:17:41,840
Loading this very fast.

01:17:41,840 --> 01:17:49,620
Well, most people aren't ready to ?? this is image magic. Use

01:17:49,620 --> 01:17:55,040
a convert command, and you can, you can generate

01:17:55,040 --> 01:18:03,000
an animated gif. In Ruby, you use RMagick. This

01:18:03,000 --> 01:18:06,080
is a sample of generating animated GIF code,

01:18:06,080 --> 01:18:08,620
and so, so -

01:18:08,620 --> 01:18:13,460
Image Magick is a ?? and I want to

01:18:13,460 --> 01:18:16,820
focus on a little bit of gif. So I

01:18:16,820 --> 01:18:21,140
created the gifanime, a wrapper for RMagick's animated GIF this morning.

01:18:24,980 --> 01:18:26,540
It is like this.

01:18:30,520 --> 01:18:35,780
If you never want to install ImageMagick, I created

01:18:35,780 --> 01:18:42,480
the animated GIF API by cURL. This is a

01:18:42,480 --> 01:18:46,180
sample ?? program, and, and it prepares this

01:18:46,180 --> 01:18:49,820
images and takes this command.

01:18:51,280 --> 01:18:52,580
It work like a-

01:19:00,480 --> 01:19:02,500
And generate this file.

01:19:08,600 --> 01:19:13,440
My presentation is written in pragmatic, but it problematic.

01:19:15,660 --> 01:19:20,720
I believe this. But more, more programmer think

01:19:20,720 --> 01:19:25,020
uses in case of headless browser testing.

01:19:37,120 --> 01:19:43,760
I create this and, and this, sorry, this page.

01:19:47,940 --> 01:19:51,980
And it maybe tested by such way RSpec code.

01:19:51,980 --> 01:19:55,780
It may work but not in ?? so

01:19:56,600 --> 01:20:01,400
then, and right, so that's c?? an image GIF

01:20:01,400 --> 01:20:06,120
a GIF image. And I'll do the test.

01:20:07,860 --> 01:20:12,800
So it, it generates very useful.

01:20:14,500 --> 01:20:19,640
Wrap up. Gif anime is almost good. Gif anime

01:20:19,640 --> 01:20:26,560
is easy to make and GIF anime is sometimes useful. Thank you.

01:20:29,280 --> 01:20:31,160
??: OK, so a lot of people know what

01:20:31,160 --> 01:20:33,580
RubyMotion is, and a lot of people saw it

01:20:33,580 --> 01:20:36,740
maybe a year ago or awhile, and if you

01:20:36,740 --> 01:20:37,880
don't know, I'm just gonna give you a quick

01:20:37,880 --> 01:20:41,460
explanation, as far as also - it's really changed

01:20:41,460 --> 01:20:43,680
a lot over the past year, and why I

01:20:43,680 --> 01:20:46,400
know is because I love Ruby, I hate objective

01:20:46,400 --> 01:20:50,500
C. I wrote a book on it, and if

01:20:50,500 --> 01:20:52,340
you're really interested, you should come to the meetups

01:20:52,340 --> 01:20:54,260
that we do every month. We do an online meetup.

01:20:54,260 --> 01:20:57,980
Laurant gave us meetup dot RubyMotion dot com.

01:20:57,980 --> 01:20:59,480
It's pretty nice of him.

01:21:00,520 --> 01:21:03,980
So RubyMotion - a lot of people look at

01:21:03,980 --> 01:21:06,900
me like that when I talk about it. But,

01:21:06,900 --> 01:21:10,600
if you really want - this is the worst

01:21:10,600 --> 01:21:13,160
definition ever, just in case you're wondering, but what

01:21:13,160 --> 01:21:15,240
I tell them, I just say, it's apps the

01:21:15,240 --> 01:21:17,920
Ruby way. Which basically, if you've dealt with Objective

01:21:17,920 --> 01:21:20,920
C, and you've gotten that headache and you're ready

01:21:20,920 --> 01:21:22,160
to go ahead and slam your face into the

01:21:22,160 --> 01:21:24,420
wall, then you could just go ahead and go

01:21:24,420 --> 01:21:27,080
back and do some RubyMotion, where everything actually looks

01:21:27,080 --> 01:21:28,080
and feels like Ruby.

01:21:28,740 --> 01:21:30,640
Now, at first, if you've seen this awhile ago,

01:21:30,640 --> 01:21:34,700
ObjectiveC, you're gonna do button taps. This happens all

01:21:34,700 --> 01:21:36,880
the time. You're constantly tapping buttons. They're all in

01:21:36,880 --> 01:21:41,020
there. This is your average Objective C. If you

01:21:41,020 --> 01:21:42,440
can read that, you're doing better than I do.

01:21:43,240 --> 01:21:47,520
Then you convert that over to RubyMotion and it

01:21:47,520 --> 01:21:51,700
doesn't look any better. It actually looks like ObjectiveC

01:21:51,700 --> 01:21:53,700
slammed into Ruby.

01:21:53,700 --> 01:21:56,880
Now it's a little bit more readable, but this

01:21:56,880 --> 01:21:59,660
is kind of where, you know, people started seeing

01:21:59,660 --> 01:22:01,640
this and they're like, oh, this doesn't feel right,

01:22:01,640 --> 01:22:05,140
you know. Well, of course, with the community, started

01:22:05,140 --> 01:22:07,880
writing some gems. Started getting things rocking and rolling.

01:22:07,880 --> 01:22:11,680
And then, so this is, with the gem that's

01:22:11,680 --> 01:22:15,720
supported by RubyMotion, and everybody here, no matter what

01:22:15,720 --> 01:22:17,020
age, should be able to read that.

01:22:17,020 --> 01:22:20,000
That's the difference. It's amazing.

01:22:21,480 --> 01:22:22,480
Well, thank you.

01:22:26,360 --> 01:22:28,380
I just use that all the time. There's a

01:22:28,380 --> 01:22:29,920
lot more smarter people than me that wrote it.

01:22:31,480 --> 01:22:36,280
So this is a guy, Clay Allsopp. He, he

01:22:36,280 --> 01:22:38,040
does propeller. He said this, and I think it

01:22:38,040 --> 01:22:41,060
looks great on a screen. Says lessLike:objectiveC: and more

01:22:41,060 --> 01:22:44,260
like_ruby. There's actually a Kent State University study that

01:22:44,260 --> 01:22:46,740
says, you know, that snake casing is actually more

01:22:46,740 --> 01:22:49,460
eye-trackable. It helps everybody out. It's even better.

01:22:50,860 --> 01:22:53,020
So, what's so great about it? Well, this is

01:22:53,020 --> 01:22:55,480
gonna sound kind of repetitive to y'all. Gems and

01:22:55,480 --> 01:22:59,400
the community. Makes sense. You gotta love it. Editor

01:22:59,400 --> 01:23:03,500
independence. No more xCode crashes. Testing. You can actually

01:23:03,500 --> 01:23:06,720
test it. Ships with MacBacon. You know, you just

01:23:06,720 --> 01:23:07,540
do all your testing.

01:23:07,540 --> 01:23:09,000
I do test-driven development with it.

01:23:09,840 --> 01:23:13,220
The readability and it actually compiles down. It's not

01:23:13,220 --> 01:23:15,560
like PhoneGap. You're actually gonna get native speeds.

01:23:15,560 --> 01:23:19,220
And it's, it adds about a megabyte, maybe two

01:23:19,220 --> 01:23:22,360
megabytes to the file size, which is nothing.

01:23:23,360 --> 01:23:25,940
And the REPL, if you saw the stuff with

01:23:25,940 --> 01:23:28,620
the pry and all the other stuff. Being able

01:23:28,620 --> 01:23:31,200
to type directly into a screen and then seeing

01:23:31,200 --> 01:23:35,000
that code happen in real time is amazing. I,

01:23:35,000 --> 01:23:37,160
it, I write all my apps basically REPL-driven.

01:23:38,820 --> 01:23:42,800
This is a horrible analogy. RubyMotion is to, to

01:23:42,800 --> 01:23:46,560
ObjectiveC as, sort of like CoffeeScript is to JavaScript.

01:23:46,560 --> 01:23:49,300
It's easier, more readable, compiles down. But not really.

01:23:50,040 --> 01:23:53,720
Additionally, it includes gems, which I guess you can

01:23:53,720 --> 01:23:54,900
kind of say if you're going with the web

01:23:54,900 --> 01:23:56,140
analogy is jQuery plugins.

01:23:56,880 --> 01:24:00,560
And then you got your Jasmine tests, REPL. So

01:24:00,560 --> 01:24:02,160
anyways, this analogy just goes straight to hell.

01:24:03,920 --> 01:24:05,340
But if makes a lot of sense at the

01:24:05,340 --> 01:24:06,860
same time because nothing else is supporting that.

01:24:06,860 --> 01:24:10,200
So, in looking at the code, I have three

01:24:10,200 --> 01:24:11,720
things real quick and I can burn through them.

01:24:12,240 --> 01:24:15,980
Hello world. Tests fail outside the box because it

01:24:15,980 --> 01:24:20,980
should- comes with red-green refactor mentality. Then, from here,

01:24:20,980 --> 01:24:24,000
you can command click the view and add a

01:24:24,000 --> 01:24:25,700
label to the screen. I do this from the

01:24:25,700 --> 01:24:27,360
REPL and it builds it just fine.

01:24:27,360 --> 01:24:29,480
Then from there you can go ahead and select

01:24:29,480 --> 01:24:32,480
stuff, or use the tree command from sugarcube, and

01:24:32,480 --> 01:24:34,400
then it lists out all the items for you.

01:24:34,400 --> 01:24:36,900
And it's amazing so that you can actually access

01:24:36,900 --> 01:24:38,440
and modify things in real time.

01:24:38,440 --> 01:24:40,600
if you want to see this in real, you

01:24:40,600 --> 01:24:41,620
know, if you actually want to see me do

01:24:41,620 --> 01:24:42,620
this, I will show you.

01:24:43,940 --> 01:24:45,440
Here's the other thing. I wrote an app called

01:24:45,440 --> 01:24:49,040
Ruby Trivia. It's free. It has no adds. And

01:24:49,040 --> 01:24:50,700
it was written and it was released the day

01:24:50,700 --> 01:24:54,620
iOS7 was released, so if you like Ruby, which

01:24:54,620 --> 01:24:56,320
I imagine some of you do, go ahead and

01:24:56,320 --> 01:24:58,980
download Ruby trivia. It was written completely in RubyMotion.

01:24:58,980 --> 01:25:01,740
And so it's got all these gems in it.

01:25:01,740 --> 01:25:04,600
And since it was written in RubyMotion, it needs

01:25:04,600 --> 01:25:08,520
a yo dawg. Cause yo dawg, you like to

01:25:08,520 --> 01:25:09,740
Ruby, you got it in Ruby.

01:25:09,740 --> 01:25:13,440
And there it is right there. Last thing I'm

01:25:13,440 --> 01:25:16,240
gonna show you - game development port. There's actually

01:25:16,240 --> 01:25:19,040
a bunch of really cool games. This guy made

01:25:19,040 --> 01:25:23,280
this thing right here. And I actually, in one

01:25:23,280 --> 01:25:27,080
day, made this game. If you want it, I

01:25:27,080 --> 01:25:29,080
have it on my iPad. I'll happily let you play.

01:25:29,080 --> 01:25:31,920
That's me eating tacos. Thank you.

01:25:36,760 --> 01:25:38,780
JED: OK, hey, what's up. My name is Jed,

01:25:38,780 --> 01:25:41,620
and the title of this lightning talk is making

01:25:41,620 --> 01:25:45,260
slides in Ruby. I've been working on a small

01:25:45,260 --> 01:25:48,040
project, it's called RevealCK, and that's what I'd like

01:25:48,040 --> 01:25:49,040
to talk to you about.

01:25:49,040 --> 01:25:51,380
If anybody ever tries to convince you to switch

01:25:51,380 --> 01:25:53,340
to a new framework for building slides, you should

01:25:53,340 --> 01:25:55,740
probably ask them three questions. Maybe four.

01:25:55,740 --> 01:25:58,240
The first one is, what do I have to

01:25:58,240 --> 01:26:00,220
do to make the slides, like, what do I

01:26:00,220 --> 01:26:01,220
actually create?

01:26:02,600 --> 01:26:05,700
And then the second one is, having created that,

01:26:05,700 --> 01:26:09,980
having written that, what do I get?

01:26:10,940 --> 01:26:13,160
And the third one is how do I get it?

01:26:14,040 --> 01:26:16,140
The fourth one might be why are you talking

01:26:16,140 --> 01:26:17,140
to me about slides?

01:26:18,060 --> 01:26:21,800
So, with RevealCK, you write something like this. This

01:26:21,800 --> 01:26:29,340
is HAML. It is a, RevealCK's a gem. Here's

01:26:29,340 --> 01:26:32,120
the HAML - oh, I'm gonna slide over.

01:26:33,540 --> 01:26:35,180
Here's that same thing that I was just showing

01:26:35,180 --> 01:26:38,300
you. And, let me see if I can do this.

01:26:45,220 --> 01:26:47,820
So it comes with a command line executable. I

01:26:47,820 --> 01:26:56,780
just ran it. RevealCK generate. OK, there we go.

01:26:56,780 --> 01:26:58,640
And now I just used the open command, and

01:26:58,640 --> 01:27:00,980
we open it up in a browser. And this

01:27:00,980 --> 01:27:03,420
is what you got from your HAML.

01:27:03,420 --> 01:27:09,420
So that's what you put in. And it's a

01:27:09,420 --> 01:27:11,120
gem. You ran it and now you can see

01:27:11,120 --> 01:27:13,140
what you got out. And what you got out

01:27:13,140 --> 01:27:15,180
is probably pretty familiar to you. There have been

01:27:15,180 --> 01:27:17,200
four presentations so far that have used this framework.

01:27:17,200 --> 01:27:19,720
It's an HTML presentation framework called Reveal.JS.

01:27:20,500 --> 01:27:22,540
And RevealCK, the C and the K stand for

01:27:22,540 --> 01:27:26,340
construction and kit, so they take, what RevealCK does

01:27:26,340 --> 01:27:28,340
is it takes HAML and it builds these things.

01:27:28,340 --> 01:27:32,100
Is anybody familiar with Reveal.JS? Has anybody seen it?

01:27:32,100 --> 01:27:33,620
Awesome. Cool.

01:27:33,620 --> 01:27:37,020
So, what you might now have noticed is that,

01:27:38,280 --> 01:27:40,320
as you were watching people come up, just like

01:27:40,320 --> 01:27:43,700
the one we just did, you get speaker mode.

01:27:43,700 --> 01:27:46,060
It works on mobile. You can swipe it on

01:27:46,060 --> 01:27:49,980
a tablet, and, oh yeah, and it's all static

01:27:49,980 --> 01:27:52,340
HTML. So if you can host stuff on a

01:27:52,340 --> 01:27:54,000
website, you can STP stuff up or you can

01:27:54,000 --> 01:27:57,180
push stuff up to GitHub pages, it works as

01:27:57,180 --> 01:27:58,180
well for you.

01:27:58,980 --> 01:28:00,920
And this first one, the one that I generated

01:28:00,920 --> 01:28:03,540
just now, that was just, if you noticed the

01:28:03,540 --> 01:28:06,260
URL, it's just one of my files - file

01:28:06,260 --> 01:28:07,860
local host. So you don't have to put it

01:28:07,860 --> 01:28:09,440
up on the web to show it to anybody.

01:28:11,540 --> 01:28:14,580
OK, so, did anybody see Matz's keynote, where he

01:28:14,580 --> 01:28:16,720
was using Rabbit? So he was using a slide

01:28:16,720 --> 01:28:20,340
framework called Rabbit. And one of the things here

01:28:20,340 --> 01:28:23,000
is that it's built for Rubyists. You don't have

01:28:23,000 --> 01:28:25,060
to leave your editor and you don't have to,

01:28:25,060 --> 01:28:26,760
you know, you can track your changes just as

01:28:26,760 --> 01:28:29,160
plain text in any version control system you like.

01:28:29,160 --> 01:28:30,620
So you get the same sort of stuff when

01:28:30,620 --> 01:28:33,420
you're using RevealCK or Reveal.JS for that matter.

01:28:37,840 --> 01:28:40,360
So that HAML file that was like one file

01:28:40,360 --> 01:28:44,020
and we ran RevealCK at it. RevealCK generated that

01:28:44,020 --> 01:28:46,460
thing. And HAML's cool. You can also use SLIM.

01:28:46,460 --> 01:28:49,920
But they're still templating languages, so you might want

01:28:49,920 --> 01:28:53,820
to actually build slides in Ruby. And before I

01:28:53,820 --> 01:28:56,300
was done with this project I made a little builder DSL.

01:28:56,300 --> 01:28:58,760
So you got a presentation. Every time you call

01:28:58,760 --> 01:29:08,900
slide you get a new slide. And can anybody

01:29:08,940 --> 01:29:10,140
guess what that will do?

01:29:17,460 --> 01:29:25,160
The answer is, it will entertain my daughter, right.

01:29:26,040 --> 01:29:30,960
So you know, you can when, once you start,

01:29:30,960 --> 01:29:33,140
once you graduate to actually building slides with Ruby,

01:29:33,140 --> 01:29:35,360
this one searched the web, right. it did a

01:29:35,360 --> 01:29:37,000
Google image search for a particular query. It brought

01:29:37,000 --> 01:29:38,400
back the results and it built the slides.

01:29:38,400 --> 01:29:40,120
But there's no reason that couldn't have been an

01:29:40,120 --> 01:29:43,040
API, scraped a website, pulled stuff from the database.

01:29:43,860 --> 01:29:45,620
The sky's wide open, right. Anything you can do

01:29:45,620 --> 01:29:47,160
in Ruby, you can do there.

01:29:49,180 --> 01:29:50,940
And I think that's it. Thank you very much.

01:29:51,520 --> 01:29:52,520
??: Thank you.

01:29:53,260 --> 01:29:58,400
??: OK. Hi. This is Japanese famous phrase, converting

01:29:58,400 --> 01:30:04,960
n-click to 1-click becomes a business. Converting 1-click to

01:30:04,960 --> 01:30:11,840
0-click becomes a revolution. Otsume, 2008.

01:30:13,200 --> 01:30:17,100
No one knows this, because I translate this today.

01:30:18,100 --> 01:30:21,700
Sorry. So I waste a lot of time for

01:30:21,700 --> 01:30:28,360
clicking. I wish less effort brought more value! It

01:30:28,360 --> 01:30:33,780
is worthwhile to make habit of good behavior. If

01:30:33,780 --> 01:30:36,340
this is easy, awesome!

01:30:36,340 --> 01:30:41,220
I'm talking about application how not to die. My

01:30:41,220 --> 01:30:46,200
tool supports this. I feel this is revolution. The

01:30:46,200 --> 01:30:47,880
tool name is Tachikoma.

01:30:51,680 --> 01:30:54,080
I am Sane Mat. I work for Oh My

01:30:54,080 --> 01:30:59,980
Classes. We offer e-commerce system based on Spree and

01:30:59,980 --> 01:31:05,800
sell eye-wears in Japan. Spree is Rails engine for

01:31:05,800 --> 01:31:11,200
e-commerce. Are there, are there any people who know

01:31:11,200 --> 01:31:18,420
Spree? Are there any people who use Spree here?

01:31:19,560 --> 01:31:23,020
Oh, thank you. But Spree is not a topic

01:31:23,020 --> 01:31:25,820
in this talk. Sorry. Yeah.

01:31:25,820 --> 01:31:31,160
Topic is changeless application. Changeless application will die,

01:31:31,160 --> 01:31:33,600
gradually. Matz say same.

01:31:35,020 --> 01:31:39,340
In PHP case, PHP conference in Japan, Kentaro said

01:31:39,340 --> 01:31:45,020
- oh, this, this is Japanese, so. Point is,

01:31:45,020 --> 01:31:50,560
continue to respond change is a destiny of web service.

01:31:51,320 --> 01:31:56,340
Important thing is keeping upgrade continuously. This includes hardware,

01:31:56,340 --> 01:32:01,100
middleware, library, development method, and so on. This is

01:32:01,100 --> 01:32:02,460
all I want to say here.

01:32:02,460 --> 01:32:06,980
How not to die with Ruby application.

01:32:08,100 --> 01:32:12,960
Run bundle updates simply and easily. Tachikoma fills a

01:32:12,960 --> 01:32:17,760
gap between this. Tachikoma automatically does git clone, bundle

01:32:17,760 --> 01:32:20,380
update, git commit and send pull request.

01:32:22,840 --> 01:32:25,820
Here, this is caption. So send pull request.

01:32:27,480 --> 01:32:32,840
So usage is set environment variables and run rake task.

01:32:32,840 --> 01:32:39,160
Bundle exec rake tachikoma:run_bundle. Tachikoma automatically does git

01:32:39,160 --> 01:32:42,860
clone, bundle update, git commit and send pull request. This

01:32:42,860 --> 01:32:44,360
is amazing, isn't it?

01:32:45,400 --> 01:32:48,680
You only do Merge Pull Request off and on.

01:32:49,560 --> 01:32:54,600
The point. Application will die without bundle update frequently.

01:32:54,600 --> 01:33:00,560
Almost no bundle update. You probably understand this, but

01:33:00,560 --> 01:33:04,940
no. As a result, the application will die gradually.

01:33:04,940 --> 01:33:12,680
How about using Tachikoma. Tachikoma automatically goes these results.

01:33:14,460 --> 01:33:21,060
And Tachikoma is a better implementation. Tachikoma send pull

01:33:21,060 --> 01:33:25,640
request, but Tachikoma don't know how to get diff

01:33:25,640 --> 01:33:28,820
of gem. I use GitHub compare view.

01:33:31,160 --> 01:33:34,080
If you are interested in Tachikoma, you can Google

01:33:34,080 --> 01:33:40,900
Tachikoma, but Tachikoma is animation character in Japan. So

01:33:40,900 --> 01:33:45,880
you can't find my Tachikoma. You can Google Tachikoma

01:33:45,880 --> 01:33:53,060
Ruby. And this is. And I want your GitHub star.

01:33:54,560 --> 01:33:58,300
OK, repeat after me, please. Tachikoma Ruby!

01:33:58,300 --> 01:34:00,080
??: Tachikoma Ruby!

01:34:00,080 --> 01:34:01,080
??: Thank you.

01:34:02,760 --> 01:34:03,760
??: Thank you.

01:34:05,000 --> 01:34:06,000
??: Cool.

01:34:06,000 --> 01:34:08,660
MICHAEL DVORKIN: All right. My name is Michael Dvorkin.

01:34:08,660 --> 01:34:11,980
I work for WalmartLabs.

01:34:11,980 --> 01:34:16,120
I'm the author of awesome_print gem.

01:34:21,400 --> 01:34:25,180
But today I'm gonna talk about another gem I

01:34:25,180 --> 01:34:30,060
wrote. It's called unbelievable. And it's the actual name.

01:34:32,400 --> 01:34:35,560
I show it you in a minute, but before

01:34:35,560 --> 01:34:38,900
I want to, to mention that I was inspired,

01:34:38,900 --> 01:34:42,920
inspired by Yusuke Endoh, who is one of the

01:34:42,920 --> 01:34:45,460
greatest Ruby hackers out there.

01:34:48,160 --> 01:34:49,160
So let's see.

01:34:57,380 --> 01:35:21,660
So - OK. So here's some lorem, random lorem.

01:35:21,660 --> 01:35:24,900
And if you run it, you obviously you'll get

01:35:24,900 --> 01:35:28,400
the syntax error. It, here's a little magic.

01:35:30,260 --> 01:35:38,160
I require unbelievable, right - oops. And now I'm

01:35:38,160 --> 01:35:46,380
gonna run it. Oops. Ruby. Sure.

01:35:46,380 --> 01:35:49,600
And it shows you Hello, RubyConf!

01:35:49,600 --> 01:35:55,700
So essentially it's a Ruby program encoded as lorem

01:35:55,700 --> 01:35:58,500
ipsum. Let me show you some other example.

01:36:02,820 --> 01:36:05,660
??: This is how you ship you're like, special gem, right?

01:36:05,660 --> 01:36:09,480
M.D.: This looks like, you know, your typical to-do

01:36:09,480 --> 01:36:13,300
list, or you know, as Matz call it, calls

01:36:13,300 --> 01:36:20,820
it, stupid boss. So let's run it. RubyConf.

01:36:21,880 --> 01:36:26,620
So one more example. This is haiku.

01:36:26,620 --> 01:36:28,980
??: I feel like I'm being punked by having to hold this.

01:36:31,000 --> 01:36:33,120
M.D.: And it's kind of romantic, if you read

01:36:33,120 --> 01:36:36,600
it, right. So it's being run.

01:36:42,960 --> 01:36:47,720
And finally I, I have one more thing. It

01:36:47,720 --> 01:36:53,060
was developed, you know, at some secret government agency,

01:36:53,060 --> 01:36:55,980
and when you file the freedom of information act

01:36:55,980 --> 01:36:59,360
request, you get back something like, that looks like this.

01:36:59,700 --> 01:37:02,120
It's called secret.

01:37:05,080 --> 01:37:13,940
And when you run it. I know. It's top

01:37:13,940 --> 01:37:18,440
secret, because otherwise you, you're helping terrorists and drug dealers.

01:37:19,420 --> 01:37:22,720
So let me show you some more.

01:37:23,340 --> 01:37:24,340
??: Can you do it with white space?

01:37:24,340 --> 01:37:31,080
M.D.: Yeah. You look amused. I bet you're wondering

01:37:31,080 --> 01:37:33,400
whether it runs with Rubinius.

01:37:33,400 --> 01:37:34,400
??: I am wondering.

01:37:34,400 --> 01:37:35,260
M.D.: It should.

01:37:35,260 --> 01:37:35,780
??: OK.

01:37:35,780 --> 01:37:42,860
M.D.: So let me show you fibonacci. So this

01:37:42,860 --> 01:37:46,500
is more complex example. So basically, here's the code,

01:37:46,500 --> 01:37:51,660
and it just goes through the styles. And I

01:37:51,660 --> 01:37:57,240
generate the story, for, for the style. Then I

01:37:58,220 --> 01:38:01,840
print it, and then at the end, I go

01:38:01,840 --> 01:38:04,520
through the stories and I just eval the story.

01:38:05,220 --> 01:38:06,600
So let's see what happens.

01:38:11,040 --> 01:38:12,040
Boom.

01:38:13,200 --> 01:38:15,240
So it's a little bit more verbose, but here's

01:38:15,240 --> 01:38:20,820
your, here's your haiku and lorem, and secret, and

01:38:20,820 --> 01:38:22,240
your todo list, right.

01:38:22,240 --> 01:38:23,160
??: That's a lot of to dos. I hope

01:38:23,160 --> 01:38:24,480
that's not just for one Saturday.

01:38:26,100 --> 01:38:29,960
M.D.: So I probably don't have time to explain.

01:38:29,960 --> 01:38:31,140
I'm, you know-

01:38:31,140 --> 01:38:32,620
??: It's just gonna remain a secret.

01:38:32,620 --> 01:38:35,220
M.D.: Well, it's up on GitHub, so you can

01:38:35,220 --> 01:38:36,220
check it out.

01:38:36,220 --> 01:38:38,640
??: Is it encoded in Unbelievable? Like it's a

01:38:38,640 --> 01:38:40,180
climb, and so-

01:38:40,180 --> 01:38:43,520
M.D.: It's not, but, you know, if Erin is

01:38:43,520 --> 01:38:47,300
here, I bet he is wondering, maybe, some parts

01:38:47,300 --> 01:38:50,120
of ActiveRecord should be converted to Unbelievable.

01:38:53,580 --> 01:38:56,060
So yeah, to give you a hint, you know,

01:38:56,060 --> 01:39:00,420
I'm trapping method_missing const_missing, and all I care is

01:39:00,420 --> 01:39:04,480
the method name and the lengths of the method

01:39:04,480 --> 01:39:07,900
name, right. And that lets me to, you know,

01:39:07,900 --> 01:39:12,340
construct the characters and eventually reconstruct the, the entire

01:39:12,340 --> 01:39:13,340
Ruby code.

01:39:14,060 --> 01:39:15,060
So-

01:39:16,040 --> 01:39:17,340
??: I think we have, I think we have

01:39:17,340 --> 01:39:18,340
to leave them with that.

01:39:21,320 --> 01:39:23,860
M.D.: So here you can find me on GitHub,

01:39:23,860 --> 01:39:28,560
on Twitter, my personal website is Michael. Dvorkin dot

01:39:28,560 --> 01:39:32,220
net. And there is one more thing, just in

01:39:32,220 --> 01:39:35,120
case you, you know, decide to use it in

01:39:35,120 --> 01:39:37,520
production, it's a disclaimer from the README file.

01:39:41,380 --> 01:39:42,380
Thank you guys.

01:39:42,380 --> 01:39:43,380
??: Thanks.

01:39:45,400 --> 01:39:46,400
??: Go ahead.

01:39:46,400 --> 01:39:49,140
BRYCE CURLY: All right. Good evening everybody. I'm Bryce

01:39:49,140 --> 01:39:51,820
Curly and I run the Miami Ruby Brigade. So

01:39:51,820 --> 01:39:53,060
the first thing I'd like to do is give

01:39:53,060 --> 01:39:55,240
a shoutout to everybody else who helps, or has

01:39:55,240 --> 01:39:56,900
helped organize the Miami Ruby Group.

01:39:56,900 --> 01:40:00,820
Chris Sailor, Kelli Brainguard. Ivan Accastarubio who's over

01:40:00,820 --> 01:40:03,760
here, and Joseph Diago, who is elsewhere in the room.

01:40:03,760 --> 01:40:08,300
So two years ago at RubyConf 2011, I stood

01:40:08,300 --> 01:40:10,240
up on stage, I would say here, but it

01:40:10,240 --> 01:40:12,660
was really in New Orleans, and said do not

01:40:12,660 --> 01:40:15,520
meet at a bar. Always have a presentation and

01:40:15,520 --> 01:40:16,400
only meet once a month.

01:40:17,740 --> 01:40:20,960
Ryan Davis said everything that I said was completely

01:40:20,960 --> 01:40:24,600
wrong, and he told me that they meet, he

01:40:24,600 --> 01:40:27,160
runs Seattle Ruby, and they meet at a bookstore

01:40:27,160 --> 01:40:30,480
that happens to sell beer, weekly, and don't usually have topics.

01:40:32,320 --> 01:40:36,160
So that's what we moved the Miami group to.

01:40:36,160 --> 01:40:38,660
We meet once a week at a bar. We

01:40:38,660 --> 01:40:40,560
usually don't have a topic. We just sort of

01:40:40,560 --> 01:40:44,060
have a table. And we talk about computers. And

01:40:44,060 --> 01:40:47,360
it's fantastic. It has worked out so unbelievably well

01:40:47,360 --> 01:40:50,100
for us. People show up to our meetings. Attendance

01:40:50,100 --> 01:40:54,040
isn't spectacular, but nobody feels I haven't gone for

01:40:54,040 --> 01:40:56,420
like, months and months and months, they won't welcome

01:40:56,420 --> 01:40:57,940
me because I quit showing up.

01:40:57,940 --> 01:40:59,640
We actually don't care if you show up or

01:40:59,640 --> 01:41:02,140
not. Which is great. If you show up, you're

01:41:02,140 --> 01:41:04,420
wonderful. If you don't, you're wonderful and we'll see

01:41:04,420 --> 01:41:08,440
you next time. We don't have any exclusion stuff.

01:41:08,440 --> 01:41:10,740
If you don't drink or if you're too young

01:41:10,740 --> 01:41:13,420
to drink, you're still welcome. We actually don't care

01:41:13,420 --> 01:41:15,700
about what programming languages you like. If you want

01:41:15,700 --> 01:41:18,940
to talk about JavaScript or Python or Go, you're

01:41:18,940 --> 01:41:19,940
definitely welcome.

01:41:21,840 --> 01:41:23,840
A few years ago, or sort of a year

01:41:23,840 --> 01:41:26,940
after we started doing this, Nick Coronto created the

01:41:26,940 --> 01:41:29,600
openhack brand for the same sort of, you know,

01:41:29,600 --> 01:41:32,260
inclusive meetup. So we've been using that, and we're

01:41:32,260 --> 01:41:34,480
listed on openhack dot github dot io.

01:41:35,980 --> 01:41:38,900
Within the last couple months, a gentleman named Teff

01:41:38,900 --> 01:41:41,460
in the United Kingdom, made a group called Computer

01:41:41,460 --> 01:41:44,100
Anonymous. And from there we sort of stole a

01:41:44,100 --> 01:41:48,420
code of conduct and that's basically the entire group.

01:41:48,420 --> 01:41:52,420
We show up every Monday at seven PM. We'll

01:41:52,420 --> 01:41:55,640
be meeting there this Monday after RubyConf. We help

01:41:55,640 --> 01:41:58,320
people, like new people are welcome to ask questions,

01:41:58,320 --> 01:42:01,800
work on Rails projects - please, we're there to

01:42:01,800 --> 01:42:04,500
help. If you're experienced and just want to, you

01:42:04,500 --> 01:42:07,160
know, talk about work or complain about work, we

01:42:07,160 --> 01:42:08,880
want you to do that too. If you want

01:42:08,880 --> 01:42:10,760
to help organize the meetup or come up with

01:42:10,760 --> 01:42:12,920
presentations, we'd love you to run them by us

01:42:12,920 --> 01:42:14,880
first and we could help you build out a presentation.

01:42:14,880 --> 01:42:17,360
That's all I have to talk about for this.

01:42:17,360 --> 01:42:20,220
If anybody's interested in more, find me later, or

01:42:20,220 --> 01:42:22,660
you can search for my presentation notes on Twitter.

01:42:22,660 --> 01:42:26,840
Search for RubyConf and EverNote, which I use to write my notes.

01:42:27,480 --> 01:42:28,480
And that's it. Thanks.

01:42:28,480 --> 01:42:29,480
??: Thanks Bryce.

01:42:31,580 --> 01:42:33,380
??: How many of you here care about the

01:42:33,380 --> 01:42:34,980
problems of healthcare dot gov?

01:42:37,680 --> 01:42:40,260
How many of you do actually know what are

01:42:40,260 --> 01:42:41,260
the issues there?

01:42:44,000 --> 01:42:46,180
I been working for a health, for, in the

01:42:46,180 --> 01:42:50,320
health care industry for the last two years. And

01:42:50,320 --> 01:42:54,100
in my experience, the healthcare IT industry is complex

01:42:54,100 --> 01:42:56,680
because there are rules. You have to follow lots

01:42:56,680 --> 01:43:00,520
of best practices. They're all, you also have to

01:43:00,520 --> 01:43:05,340
interact with different entities from doctors, patients, to insurance

01:43:05,340 --> 01:43:06,980
companies and governments.

01:43:09,160 --> 01:43:12,160
And you usually don't have a single product. You

01:43:12,160 --> 01:43:16,220
have to have a very complex product. Like healthcare

01:43:16,220 --> 01:43:20,500
dot gov, which is complex in extension and, let's

01:43:20,500 --> 01:43:23,520
face it, it's complex because the human body is complex

01:43:23,520 --> 01:43:26,240
and because it's related to money.

01:43:30,100 --> 01:43:32,800
I'm gonna give you an example about how hard

01:43:32,800 --> 01:43:34,700
it is to share medical information, and for that

01:43:34,700 --> 01:43:38,260
I'm gonna give you my last, I want to

01:43:38,260 --> 01:43:41,000
talk to you about my last run, last week.

01:43:42,000 --> 01:43:44,500
I was running in the morning and my heart,

01:43:44,500 --> 01:43:48,220
my chest started to hurt. And since my family

01:43:48,220 --> 01:43:51,280
has a long history of heart disease, I just stopped.

01:43:52,140 --> 01:43:55,040
And I started thinking about going to the ER

01:43:55,040 --> 01:43:59,340
or schedule an appointment with my doctor. And I

01:43:59,340 --> 01:44:01,320
will probably have to go there. My doctor will

01:44:01,320 --> 01:44:05,480
have to take my blood pressure and he will

01:44:05,480 --> 01:44:08,900
probably recommend some blood work, and for all that,

01:44:08,900 --> 01:44:10,800
I have to have my insurance card.

01:44:13,460 --> 01:44:15,960
Don't worry - I'm fine. My heart is fine.

01:44:15,960 --> 01:44:17,580
I was just cold that morning.

01:44:19,480 --> 01:44:22,120
But if you follow the flow, it's - I

01:44:23,000 --> 01:44:25,540
have to have my insurance presented to my doctor,

01:44:25,980 --> 01:44:28,020
and then I have my insurance to go to

01:44:28,020 --> 01:44:31,860
a lab. And then, if I wanted to see

01:44:31,860 --> 01:44:37,280
any specialist, my doctor would have to fax my records.

01:44:39,060 --> 01:44:40,500
Yeah. Fax my records.

01:44:44,120 --> 01:44:46,140
So there are some companies that are trying to

01:44:46,140 --> 01:44:50,220
do something to share your data electronically, and there

01:44:50,220 --> 01:44:54,800
are international standards to share your data. Most of

01:44:54,800 --> 01:44:59,380
these data is based on electronic data interchange, that's

01:44:59,380 --> 01:45:04,300
ADI. That is something like sharing files separated by

01:45:04,300 --> 01:45:09,120
pipes. And although there are newer versions of this

01:45:09,120 --> 01:45:14,800
standard based on XML, like, HL7 version 3, there

01:45:14,800 --> 01:45:18,380
is no Ruby version of XL, of, to interact

01:45:18,380 --> 01:45:20,260
with this version of the standard.

01:45:24,320 --> 01:45:27,760
So there are, this problem is to share information,

01:45:27,760 --> 01:45:29,940
and that, through this, that we as a Ruby

01:45:29,940 --> 01:45:33,140
community don't have enough tools to interact with all

01:45:33,140 --> 01:45:36,000
the sets of medical records and medical data available.

01:45:39,780 --> 01:45:41,660
The other example that I want to talk about,

01:45:41,660 --> 01:45:44,680
it's, if you want to interact with the health

01:45:44,680 --> 01:45:50,000
graph, tools created by room keeper to collect, to

01:45:50,000 --> 01:45:53,240
collect data from your phone, you can do it

01:45:53,240 --> 01:45:55,360
with a gem that was built three years ago

01:45:55,360 --> 01:45:57,820
and was last updated two years ago.

01:45:58,960 --> 01:46:01,500
And I'm not even sure it runs on Rubinius.

01:46:03,360 --> 01:46:05,340
So my point is that there is going to

01:46:05,340 --> 01:46:07,940
be a lot of information from wearables and medical

01:46:07,940 --> 01:46:11,240
devices that generate data, and what I'm gonna use

01:46:11,240 --> 01:46:15,040
to, I'm gonna start using Java or Go or

01:46:15,040 --> 01:46:16,620
node.js to interact with this data.

01:46:20,240 --> 01:46:25,360
We need healthcare focused gems. We need API tools,

01:46:25,360 --> 01:46:29,240
and we need to follow the standards and try

01:46:29,240 --> 01:46:31,040
to build on top of this.

01:46:33,440 --> 01:46:38,740
But especially the healthcare indu, IT industry needs the

01:46:38,740 --> 01:46:39,740
Ruby community.

01:46:41,800 --> 01:46:44,460
So we have two options now. One is you

01:46:44,460 --> 01:46:47,820
have to visit this address I have here. And

01:46:47,820 --> 01:46:53,800
participate in opensource health IT projects. Or, you can

01:46:53,800 --> 01:46:57,560
eat well, sleep well, and don't get sick so

01:46:57,560 --> 01:47:00,620
your records don't fax, don't get faxed.

01:47:02,520 --> 01:47:05,260
And Tweet me if you have any questions.

01:47:06,760 --> 01:47:07,760
??: Thank you.

01:47:09,200 --> 01:47:11,020
??: All right, I'm gonna try to go, to

01:47:11,020 --> 01:47:15,180
blaze through this. This is kind of my own

01:47:15,180 --> 01:47:17,980
personal journey that I've gone through this past year.

01:47:17,980 --> 01:47:21,800
The talk is learn improv for great good. And

01:47:21,800 --> 01:47:25,280
as much how I feel by, I've been learning

01:47:25,280 --> 01:47:28,460
a certain particular form of improv - comedy improv.

01:47:28,460 --> 01:47:30,700
I've become a better person.

01:47:32,180 --> 01:47:34,420
I could tell you why I got into, but

01:47:34,420 --> 01:47:36,240
there's not enough time for it. I wish I

01:47:36,240 --> 01:47:37,320
had twenty-four hours for it.

01:47:37,980 --> 01:47:42,140
The form I started is called The Harold. And,

01:47:42,140 --> 01:47:44,460
and the Harold is not what you think, like

01:47:44,460 --> 01:47:46,180
Whose Line is it Anyway is not the kind

01:47:46,180 --> 01:47:48,340
of like this - there's a preset game that

01:47:48,340 --> 01:47:53,360
you're gonna play. It's a completely improvised show. It

01:47:53,360 --> 01:47:57,920
was created by Dave Close, and the only thing

01:47:57,920 --> 01:48:01,040
you get from the audience is one single world.

01:48:02,220 --> 01:48:05,560
And a group of people put together a three

01:48:05,560 --> 01:48:11,000
act show, about twenty minutes long. And nobody knows

01:48:11,000 --> 01:48:13,620
what the word is gonna be. Nobody knows what

01:48:13,620 --> 01:48:17,680
the game is gonna be or anything until a

01:48:17,680 --> 01:48:21,460
few seconds after they start talking. So like, I

01:48:21,460 --> 01:48:24,220
think I can do them like somebody earlier and

01:48:24,220 --> 01:48:26,340
they, it was the talk raft. So like, oh,

01:48:26,340 --> 01:48:28,680
we could, this is how a production would go

01:48:28,680 --> 01:48:29,280
with the word raft.

01:48:29,280 --> 01:48:31,420
And that would be the only thing that will

01:48:31,420 --> 01:48:32,640
come up, right. Raft.

01:48:33,500 --> 01:48:36,780
And a group of people, like a team like

01:48:36,780 --> 01:48:41,580
that, all bring their own personal intuition, experience to

01:48:41,580 --> 01:48:44,600
the word, interpretation to the word raft. And unfortunately,

01:48:44,600 --> 01:48:48,620
they don't all think like me. I request everybody's space.

01:48:49,760 --> 01:48:53,080
They all bring their own thing. So like, going

01:48:53,080 --> 01:48:56,060
back to the, to the form - oh, there's

01:48:56,060 --> 01:48:59,420
gonna be three beats, or three acts, and each

01:48:59,420 --> 01:49:02,920
act has three scenes. And in each, in the

01:49:02,920 --> 01:49:04,800
first beat you got to find the beat, the

01:49:04,800 --> 01:49:07,180
game of this scene. And you need to understand

01:49:07,180 --> 01:49:10,660
the char, each character mental model, what it motivates,

01:49:10,660 --> 01:49:13,560
and you ask if that is way, if this

01:49:13,560 --> 01:49:15,560
is true about them, what else is true?

01:49:17,660 --> 01:49:21,580
You know, how Barney pretty much to everything, how

01:49:21,580 --> 01:49:23,560
he thinks, but you have to figure out in

01:49:23,560 --> 01:49:24,560
about five seconds.

01:49:25,600 --> 01:49:29,920
So a scene one, beat one, will pretty much

01:49:29,920 --> 01:49:31,720
go like this. You know, the word is Raft,

01:49:31,720 --> 01:49:34,340
and one person will step out. Doesn't know who's

01:49:34,340 --> 01:49:35,800
next - the other person that steps out with

01:49:35,800 --> 01:49:38,740
him, and everybody else of the team stays back.

01:49:38,740 --> 01:49:41,580
And they will say, will you help me? I've

01:49:41,580 --> 01:49:44,380
been building this raft for a month, and you,

01:49:44,380 --> 01:49:46,060
don't, don't give me a hand.

01:49:46,060 --> 01:49:48,080
And the other person go, yeah, but I don't

01:49:48,080 --> 01:49:49,920
really want to get out of this island. It's

01:49:49,920 --> 01:49:50,860
so nice over here.

01:49:52,000 --> 01:49:55,160
Oh, Jesus Christ, there's not enough food. I'm gonna

01:49:55,160 --> 01:49:56,520
get, I'm starving.

01:49:56,520 --> 01:49:59,360
Yeah, but you never look greater than this. I

01:49:59,360 --> 01:50:00,840
mean, like it's, you look wonderful.

01:50:00,840 --> 01:50:03,020
And he's not, this is like a straight man,

01:50:03,020 --> 01:50:06,200
crazy man scenario. And, and he's not just like,

01:50:07,060 --> 01:50:09,720
then after you have to justify. No, it's not

01:50:09,720 --> 01:50:11,740
enough that the person is kind of crazy, like

01:50:11,740 --> 01:50:13,980
OK is it weird behavior. You have to justify.

01:50:13,980 --> 01:50:16,800
Maybe I'm the girlfriend that's trying to leave him,

01:50:16,800 --> 01:50:18,580
and get the fuck off - oh sorry. The,

01:50:18,580 --> 01:50:20,060
the island.

01:50:21,680 --> 01:50:23,880
And, and he doesn't want to leave him, or

01:50:23,880 --> 01:50:26,400
maybe he has a girlfriend that left him and

01:50:26,400 --> 01:50:27,580
doesn't want to go back to reality.

01:50:28,260 --> 01:50:31,240
And then you know there's a scene two, like

01:50:31,240 --> 01:50:33,980
somebody else takes a, two different people, like a

01:50:33,980 --> 01:50:38,520
different interpretation of the word Raft. And the third

01:50:38,520 --> 01:50:40,580
group does the same thing. Then we go into

01:50:40,580 --> 01:50:43,420
act two, and we play a different version. If

01:50:43,420 --> 01:50:44,700
that's true, what else is true? How can we

01:50:44,700 --> 01:50:46,320
put, like, this mental model.

01:50:46,320 --> 01:50:50,040
Come on man, run, it's, it's the zombie apocalypse!

01:50:50,040 --> 01:50:51,420
Everybody - you'll get eaten!

01:50:51,420 --> 01:50:54,440
Yeah, but it's OK. You know, I never really

01:50:54,440 --> 01:50:56,780
liked my brains, you know, I'm not, I'm not

01:50:56,780 --> 01:51:00,540
smart. And you just play that again and see

01:51:00,540 --> 01:51:04,020
three and four and whatever. OK, that's great. But

01:51:04,020 --> 01:51:04,680
why should I care?

01:51:04,680 --> 01:51:07,340
All right, I'm gonna - we have to go fast.

01:51:08,080 --> 01:51:10,620
Because we don't code in isolation, we don't work

01:51:10,620 --> 01:51:14,380
in isolation. And a computer programmer usually have, like,

01:51:14,380 --> 01:51:17,540
I'm gonna be introverted, shy. Then don't communicate very

01:51:17,540 --> 01:51:19,600
well. And they're kind of like onions, it's very

01:51:19,600 --> 01:51:21,680
hard to get stuff out of them.

01:51:22,320 --> 01:51:25,020
And now that I am trying to hire people,

01:51:25,020 --> 01:51:29,120
they're also mildly autistic, they've got the superiority problem,

01:51:30,260 --> 01:51:32,920
and in general there's a low empathy level. And

01:51:32,920 --> 01:51:35,380
improv is all about communication and caring about the

01:51:35,380 --> 01:51:38,380
other person. And not just listen to verbal cues,

01:51:38,380 --> 01:51:41,320
but nonverbal cues. Eye contact, body language, energy level.

01:51:41,320 --> 01:51:44,920
And most importantly, you have to understand it, it's

01:51:44,920 --> 01:51:47,660
a skill that you acquire by doing it over and over.

01:51:47,660 --> 01:51:51,140
That you really have to deeply care about what

01:51:51,140 --> 01:51:53,540
the other person is saying all the time, and

01:51:53,540 --> 01:51:56,380
remember everything. And you also must relinquish control, which

01:51:56,380 --> 01:51:57,920
is very hard to do for a developer.

01:51:58,460 --> 01:52:01,200
And you must ask for permission, which we usually

01:52:01,200 --> 01:52:03,220
don't. Like, grabbing the keyboard and being like, oh,

01:52:03,220 --> 01:52:04,420
let me show you how to do this stuff.

01:52:04,420 --> 01:52:08,380
So it really teaches you about empathy. And it

01:52:08,380 --> 01:52:10,660
helps you understand your coworker. How they think, how

01:52:10,660 --> 01:52:12,680
you can help him, what's going on in their

01:52:12,680 --> 01:52:15,500
life, what they want, what makes them happy, and

01:52:15,500 --> 01:52:17,580
how do my action effects them.

01:52:17,580 --> 01:52:20,780
You know, and also, yeah - time is over.

01:52:20,780 --> 01:52:26,120
Better relationship also with girlfriend, boyfriend, parents, friends. And

01:52:26,120 --> 01:52:28,020
helps you be in the moment. Most of all,

01:52:28,020 --> 01:52:32,660
it's more to be nice, you can revert to

01:52:32,660 --> 01:52:34,880
a kid and you can just have fun. It's,

01:52:34,880 --> 01:52:36,360
it's the most fun I ever had.

01:52:36,360 --> 01:52:38,760
There you go. Thank you.

01:52:39,220 --> 01:52:40,220
??: Thank you.

01:52:41,240 --> 01:52:42,880
??: OK, so it's actually kind of funny this

01:52:42,880 --> 01:52:45,060
other talk was right before me, because it's actually

01:52:45,060 --> 01:52:46,860
a wonderful segway into kind of, we're the human

01:52:46,860 --> 01:52:50,380
aspect of software engineering. So I love Ruby. I

01:52:50,380 --> 01:52:52,020
have a small little company, it's called polyglot programming.

01:52:52,020 --> 01:52:54,020
I'll do a quick little whatever, sayout for that.

01:52:54,020 --> 01:52:57,020
We do consulting. Always looking for interesting projects.

01:52:57,020 --> 01:53:00,220
But today, wanted to talk about kind of the

01:53:00,220 --> 01:53:04,120
softer skills. XP. How many people here know what

01:53:04,120 --> 01:53:09,180
XP is? OK, a good number. So, one of

01:53:09,180 --> 01:53:11,540
the practices that I like the practice quite a

01:53:11,540 --> 01:53:16,940
bit is pair programming. How many people here have

01:53:16,940 --> 01:53:18,200
tried pair programming?

01:53:19,240 --> 01:53:22,180
OK. Quite a few. How many people here regularly

01:53:22,180 --> 01:53:23,180
pair program?

01:53:25,000 --> 01:53:27,920
All right, well, about two years ago, went independent,

01:53:27,920 --> 01:53:31,320
and we have a very small consultancy, where we

01:53:31,320 --> 01:53:33,520
don't have, quite often we don't have either budget

01:53:33,520 --> 01:53:36,580
or something else to be able to pair program

01:53:36,580 --> 01:53:37,280
all the time.

01:53:37,280 --> 01:53:40,060
And this really bugged me, because it reduces the

01:53:40,060 --> 01:53:41,920
code that I write - or, not, sorry -

01:53:41,920 --> 01:53:44,180
the bugs that I put in my code, and

01:53:44,180 --> 01:53:46,840
it gives me really high quality code. And so

01:53:46,840 --> 01:53:49,140
I was thinking, what could I do, what could

01:53:49,140 --> 01:53:51,940
I - is there another way that I could

01:53:51,940 --> 01:53:54,000
get a dev pair and get that quality back

01:53:54,000 --> 01:53:56,100
in my day to day workflow?

01:53:56,100 --> 01:53:59,260
And so I was looking over, and I saw this.

01:54:01,020 --> 01:54:02,520
How many people here have cats?

01:54:04,060 --> 01:54:08,520
We've got a few. And I was thinking, ever

01:54:08,520 --> 01:54:10,380
since - and, so my cat's name is Ellie

01:54:10,380 --> 01:54:13,080
- ever since she was a kitten, she used

01:54:13,080 --> 01:54:15,420
to sleep in my laptop bag, she would sleep

01:54:15,420 --> 01:54:17,060
on top of the laptop, and she was always

01:54:17,060 --> 01:54:19,460
intrigued by electronics, and I thought, what if I

01:54:19,460 --> 01:54:23,160
substitute out a human dev pair for a feline

01:54:23,160 --> 01:54:27,960
dev pair? And try what we call purr programming.

01:54:30,040 --> 01:54:32,960
So we've been doing - I, I've actually been

01:54:32,960 --> 01:54:34,380
doing this now for about two years and have

01:54:34,380 --> 01:54:35,900
learned a few of kind of the best practices

01:54:35,900 --> 01:54:39,080
with it, because there are patterns for effectively purr

01:54:39,080 --> 01:54:41,980
programming. As you can see here, you need to

01:54:41,980 --> 01:54:44,100
have a very comfortable work station for both you

01:54:44,100 --> 01:54:46,660
and your, your progra- your pair.

01:54:46,660 --> 01:54:52,380
Comfortable chair. And we generally prefer to have, like,

01:54:52,380 --> 01:54:54,660
just the one keyboard setup with a nice big

01:54:54,660 --> 01:54:58,300
monitor. And we've learned, I've actually learned a few

01:54:58,300 --> 01:55:00,520
things about this. First of all, how many people

01:55:00,520 --> 01:55:02,480
here have had their cats jump onto their keyboard

01:55:02,480 --> 01:55:04,660
while they're coding? Yes, quite a few.

01:55:04,660 --> 01:55:07,100
I used to think that that was just Ellie

01:55:07,100 --> 01:55:11,160
looking for attention. Nope. She is ag- she's actually

01:55:11,160 --> 01:55:14,200
telling me something. She's telling me no, it's time

01:55:14,200 --> 01:55:15,640
for you to take a break. It's your pomadoral

01:55:15,640 --> 01:55:18,580
alarm. No, you've made a really stupid mistake.

01:55:18,580 --> 01:55:19,580
Don't do that.

01:55:20,900 --> 01:55:22,720
And I've learned a few other things too. Cats

01:55:22,720 --> 01:55:24,460
actually can tell just by the cadence of the

01:55:24,460 --> 01:55:26,400
way you're typing when you're making a mistake. So

01:55:26,400 --> 01:55:28,360
when a cat looks like they're sleeping, they're actually

01:55:28,360 --> 01:55:29,360
still helping you.

01:55:30,200 --> 01:55:33,140
It's a really wonderful thing. But beyond that, too,

01:55:33,140 --> 01:55:36,000
how many people, a lot of people usually think,

01:55:36,000 --> 01:55:37,680
well, ok, great, so I've got a cat that's

01:55:37,680 --> 01:55:39,100
helping me purr program and they're like, well, it's

01:55:39,100 --> 01:55:39,940
just like a rubber duck.

01:55:39,940 --> 01:55:42,240
No. She drives.

01:55:44,680 --> 01:55:47,100
This is a really gnarly debugging session that we

01:55:47,100 --> 01:55:48,680
had here, and she just was like, no, no,

01:55:48,680 --> 01:55:50,620
no, let me take care of it. I'm gonna fix it.

01:55:53,800 --> 01:55:56,560
And there are other advantages, too. For example, there

01:55:56,560 --> 01:55:58,900
are times when I'm working on a really difficult

01:55:58,900 --> 01:56:02,060
problem and I'm trying to figu- I'm stressed. I'm

01:56:02,060 --> 01:56:05,460
under the deadline or something else like that, and

01:56:05,460 --> 01:56:07,140
I can just reach over and start petting her.

01:56:07,140 --> 01:56:10,300
She purrs. It settles us both down.

01:56:10,300 --> 01:56:12,340
I don't know a lot of dev pairs that

01:56:12,340 --> 01:56:13,960
would actually, where that would work very well with.

01:56:17,200 --> 01:56:19,280
Now, for the people, though, probably a lot of

01:56:19,280 --> 01:56:22,680
people here, how many people here have dogs. All

01:56:22,680 --> 01:56:25,080
right. How many people, out of those people, how

01:56:25,080 --> 01:56:27,380
many people, how many of you guys are more

01:56:27,380 --> 01:56:31,080
of dog people than cat people? Yes.

01:56:32,120 --> 01:56:34,620
So we looked into that. We have a couple.

01:56:34,620 --> 01:56:38,000
Their names are Max and Ming. So far though,

01:56:38,000 --> 01:56:40,440
it just, it hasn't quite worked for us. It

01:56:40,440 --> 01:56:43,940
hasn't - their talents don't lie in programming. Maybe

01:56:43,940 --> 01:56:45,920
they're better at project management or something like that.

01:56:45,920 --> 01:56:48,000
We're still looking for that, though. We have a

01:56:48,000 --> 01:56:49,980
small subset and we've had a small sampling of

01:56:49,980 --> 01:56:52,960
this so far, so we would welcome any input

01:56:52,960 --> 01:56:55,380
on that, if somebody has noticed something better with it.

01:56:55,680 --> 01:56:57,100
Do let us know.

01:56:57,540 --> 01:56:58,880
But at any rate, and of course in our

01:56:58,880 --> 01:57:00,340
house at any rate of course the cat rules

01:57:00,340 --> 01:57:01,720
the roost. We have the cat and the dogs

01:57:01,720 --> 01:57:02,600
and she rules the roost.

01:57:02,600 --> 01:57:04,620
So at any rate, I blogged about it -

01:57:04,620 --> 01:57:08,440
purr programming. And there's also a website.

01:57:10,940 --> 01:57:11,940
??: All right, thanks.

01:57:12,980 --> 01:57:15,000
??: OK, so hi everyone. Today we're here to

01:57:15,000 --> 01:57:16,880
talk to you about a game that we are

01:57:16,880 --> 01:57:18,740
currently working on called Berlin.

01:57:18,740 --> 01:57:20,480
GIOM MALETTE: It has nothing to do with the city.

01:57:21,280 --> 01:57:23,060
So I'm Giom Malette.

01:57:23,060 --> 01:57:24,180
C.?.: I'm Christian.

01:57:24,820 --> 01:57:26,720
G.M.: And you can follow us on Twitter or Github.

01:57:26,720 --> 01:57:29,380
We work for Shopify. This has nothing to do with it.

01:57:30,780 --> 01:57:31,780
So the game.

01:57:31,780 --> 01:57:35,660
I'll throw a couple of key, buzzwords at you,

01:57:35,660 --> 01:57:38,880
and I don't have my speaker notes, so Berlin

01:57:38,880 --> 01:57:41,520
is an electronic web based turn by turn -

01:57:41,520 --> 01:57:44,280
AUDIENCE: [indecipherable]

01:57:44,280 --> 01:57:47,500
CHRIS: artificial intelligence strategy board game. I think I

01:57:47,500 --> 01:57:48,320
got them all.

01:57:48,840 --> 01:57:50,840
What this means is, it's a risk game that

01:57:50,840 --> 01:57:52,820
you're writin' the I for.

01:57:53,560 --> 01:57:55,420
G.M.: So we have a website. Go check it

01:57:55,420 --> 01:57:58,720
out. You'll be able to replay all the games,

01:57:58,720 --> 01:58:02,540
see list of AIs, list of users, and also

01:58:02,540 --> 01:58:03,980
find all the recommendation.

01:58:05,200 --> 01:58:09,500
CHRIS: Currently we have fifty-eight artificial intelligences. And over

01:58:09,500 --> 01:58:12,140
3,500 games have been played so far.

01:58:12,140 --> 01:58:15,220
G.M.: There are about eighty people here, so this

01:58:15,220 --> 01:58:18,380
should go to about a hundred and thirty tonight, please.

01:58:18,380 --> 01:58:18,780
CHRIS: Yeah, tonight.

01:58:19,040 --> 01:58:23,080
G.M.: So the, a few rules. So, OK, basically

01:58:23,080 --> 01:58:25,620
there's a map, and the arrow points to a

01:58:25,620 --> 01:58:28,480
node. This is a bat, and this is a

01:58:28,480 --> 01:58:31,980
city. Cities spawn soldiers when you own them.

01:58:33,440 --> 01:58:36,400
Each turn is played in three phases. Movement phase,

01:58:36,400 --> 01:58:38,960
where your AI tells the server what movement it

01:58:38,960 --> 01:58:43,360
wants to perform. If two or more AIs are

01:58:43,360 --> 01:58:46,160
on the city at, or any node, at the

01:58:46,160 --> 01:58:47,500
end of the turn, there is a combat that

01:58:47,500 --> 01:58:50,820
occurs, and after that, every, every node that is

01:58:50,820 --> 01:58:52,700
controlled by a player spawns a soldier.

01:58:55,080 --> 01:58:56,720
So as you can see, what you want is

01:58:56,720 --> 01:58:59,960
to dominate the map in order to gain more

01:58:59,960 --> 01:59:03,680
cities, to gain more soldiers, to get more cities, to get more soldiers,

01:59:03,680 --> 01:59:04,680
and so on and so forth.

01:59:05,820 --> 01:59:09,020
G.M.: So here's a quick replay of the game playing.

01:59:09,020 --> 01:59:11,320
I don't - is it your AI?

01:59:11,320 --> 01:59:15,680
CHRIS: I don't think so. It's way too dumb. This is

01:59:15,680 --> 01:59:16,540
probably random AIs.

01:59:16,540 --> 01:59:18,100
G.M.: Yeah, those are really dumb.

01:59:18,100 --> 01:59:20,160
CHRIS: But you can see what it looks like and

01:59:20,160 --> 01:59:21,160
the replay mode.

01:59:22,800 --> 01:59:27,640
G.M.: OK, so AIs are self-hosted, so whenever a game

01:59:27,640 --> 01:59:30,140
starts, the server just sent a JSON request to

01:59:30,140 --> 01:59:35,820
your AI, which just then compute the moves it

01:59:35,820 --> 01:59:38,340
want to do, then sends back a JSON response to server.

01:59:39,740 --> 01:59:41,800
CHRIS: So, where does Ruby fit into this?

01:59:41,800 --> 01:59:44,900
We're gonna go really quickly, and in about one

01:59:44,900 --> 01:59:47,480
minute, we'll build your own random AI and maybe

01:59:47,480 --> 01:59:48,780
you can beat these two AIs.

01:59:49,580 --> 01:59:52,620
So there's a gem, it's super easy to use,

01:59:52,620 --> 01:59:55,900
but the DSL is not so great. We hadn't

01:59:55,900 --> 01:59:59,620
seen Emily's talk yet. So you have to open

01:59:59,620 --> 02:00:02,660
up the Berlin AI Player class and define the

02:00:02,660 --> 02:00:05,940
self dot onturn method, because we hate you. Not

02:00:05,940 --> 02:00:08,440
true. LIke, I, it's cool.

02:00:08,440 --> 02:00:11,420
So you get a game object in there. The

02:00:11,420 --> 02:00:14,000
game object gets a reference to the map and

02:00:14,000 --> 02:00:16,960
the map has plenty of helper methods, of which

02:00:16,960 --> 02:00:19,580
control nodes, control nodes are the nodes that you

02:00:19,580 --> 02:00:21,660
possess and have at least one soldier on.

02:00:21,660 --> 02:00:24,100
So you can move that soldier to another node.

02:00:24,100 --> 02:00:27,600
So we're gonna go to all the adjascent nodes,

02:00:27,600 --> 02:00:33,980
pick, well, actually shuffle them and move, iterate, find

02:00:33,980 --> 02:00:35,840
a random number of soldiers that we can move

02:00:35,840 --> 02:00:40,420
and call game dot addmove to move from one

02:00:40,420 --> 02:00:42,520
node to the other, x amount of soldiers.

02:00:42,520 --> 02:00:44,800
G.M.: The only important thing to note here is the

02:00:44,800 --> 02:00:46,860
game dot addmove, that's all you need to do

02:00:46,860 --> 02:00:48,740
in order to create an AI. So it, you

02:00:48,740 --> 02:00:50,680
just need to provide the node from which removing,

02:00:50,680 --> 02:00:52,520
the node where you want to go, and the

02:00:52,520 --> 02:00:54,780
amount of soldiers you want to move. And that's

02:00:54,780 --> 02:00:56,940
it, this will create the JSON response for you

02:00:56,940 --> 02:00:58,820
and send it back to the server as soon

02:00:58,820 --> 02:01:00,460
as- CHRIS: Sorry, sorry.

02:01:00,460 --> 02:01:04,160
G.M.: As soon as the loop is completed. So, yeah, I

02:01:04,160 --> 02:01:04,640
guess that's it.

02:01:04,640 --> 02:01:05,660

YouTube URL: https://www.youtube.com/watch?v=gJOkpP__dY4


