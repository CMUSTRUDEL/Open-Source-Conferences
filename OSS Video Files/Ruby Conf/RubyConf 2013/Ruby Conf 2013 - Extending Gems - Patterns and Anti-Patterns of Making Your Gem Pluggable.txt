Title: Ruby Conf 2013 - Extending Gems - Patterns and Anti-Patterns of Making Your Gem Pluggable
Publication date: 2020-01-27
Playlist: RubyConf 2013
Description: 
	By Jason Clark

One strength of the Ruby community is the simplicity of sharing code via gems. When a gem is popular enough, it can even develop an ecosystem of additional gems that build on it.

But extending a gem that wasn't built with that flexibility in mind isn't always easy. This talk highlights tips and techniques for making your gem simpler to plug into, and avoid mistakes that will have devs cursing under their breath.

We'll cover the highs and lows of interacting with others gems, from configuration to documentation and everywhere in between.
Captions: 
	00:00:16,000 --> 00:00:18,100
JASON CLARK: Welcome everyone.

00:00:18,199 --> 00:00:21,900
My name is Jason Clark. I work for New Relic.

00:00:21,900 --> 00:00:23,320
Specifically on the Ruby agent,

00:00:23,320 --> 00:00:24,980
so that's the New Relic RPM gem

00:00:24,980 --> 00:00:26,810
that maybe a few of you are familiar with

00:00:26,810 --> 00:00:29,160
and have installed once or twice.

00:00:29,160 --> 00:00:30,759
And I'm here today to talk to you about

00:00:30,759 --> 00:00:34,870
ways that you can make your gems more extensible,

00:00:34,870 --> 00:00:37,329
more flexible. And talk about, like, a lot of

00:00:37,329 --> 00:00:40,600
the pitfalls that you might run into in building

00:00:40,600 --> 00:00:42,210
a gem that other people might want to build

00:00:42,210 --> 00:00:43,680
on top of.

00:00:43,680 --> 00:00:45,079
But before we get too far into that, I

00:00:45,079 --> 00:00:47,609
want to start with a little storytime.

00:00:47,609 --> 00:00:52,090
So New Relic does performance monitoring for your Rails

00:00:52,090 --> 00:00:54,949
and other applications. One of the things that we

00:00:54,949 --> 00:00:57,410
do is we will inject a little piece of

00:00:57,410 --> 00:01:00,929
JavaScript into the footer of your page so that

00:01:00,929 --> 00:01:03,600
it can get timings on the clients' side and

00:01:03,600 --> 00:01:05,430
then transmit those back to us so we can

00:01:05,430 --> 00:01:07,950
paint you pretty graphs and show you alerts for

00:01:07,950 --> 00:01:09,280
what's going on.

00:01:09,280 --> 00:01:11,480
So in the Ruby agent - the Ruby agent

00:01:11,480 --> 00:01:13,250
is the piece that you put in your app

00:01:13,250 --> 00:01:16,000
- there's this little piece of code. And here's

00:01:16,000 --> 00:01:18,180
a snippet of it, where we're figuring out the

00:01:18,180 --> 00:01:20,890
queuing time. Then we've got all this ugly business,

00:01:20,890 --> 00:01:22,940
so we were doing around rounding and clamping and

00:01:22,940 --> 00:01:24,500
making sure that things are fine.

00:01:24,500 --> 00:01:27,390
And then we omit this footer, and that actually

00:01:27,390 --> 00:01:28,810
ends up in your page.

00:01:28,810 --> 00:01:30,810
Well, this is the type of code that, you

00:01:30,810 --> 00:01:32,860
know, when you're making another change in an area,

00:01:32,860 --> 00:01:35,130
you might want to refactor a little bit. And

00:01:35,130 --> 00:01:37,420
so we extracted a bunch of the timings out,

00:01:37,420 --> 00:01:39,730
we moved a bunch of that logic around, you

00:01:39,730 --> 00:01:41,720
know. What's a millisecond. What do we round. What

00:01:41,720 --> 00:01:45,200
do we do there into a transaction timing's object.

00:01:45,200 --> 00:01:47,500
Which cleans this interface up very nicely.

00:01:47,500 --> 00:01:49,970
This, you know, is kind of deep in the

00:01:49,970 --> 00:01:53,290
guts of the agent. It's deep in our code,

00:01:53,290 --> 00:01:55,220
and so we felt pretty good about doing that

00:01:55,220 --> 00:01:58,180
and then removing that other browser timing method that

00:01:58,180 --> 00:02:01,100
was there.

00:02:01,100 --> 00:02:03,810
Unfortunately there was a problem.

00:02:03,810 --> 00:02:07,130
Elsewhere in New Relic, we run a Rails-based application,

00:02:07,130 --> 00:02:09,250
a web, our website, that you might go and

00:02:09,250 --> 00:02:14,180
log into. And this method happened to show up

00:02:14,180 --> 00:02:18,519
in there. So we were monkey patching the footer_js_string

00:02:18,519 --> 00:02:20,269
so that we could modify that and put it

00:02:20,269 --> 00:02:20,879
in there.

00:02:20,879 --> 00:02:24,129
And, you know, we use our own site to

00:02:24,129 --> 00:02:26,950
run our software and experiment with things. But we

00:02:26,950 --> 00:02:29,280
didn't catch this until it got onto dev. It

00:02:29,280 --> 00:02:31,659
didn't make it to production - nothing broke. But

00:02:31,659 --> 00:02:34,049
this is an example of the sort of problem

00:02:34,049 --> 00:02:36,439
that you can have when you tromp on something

00:02:36,439 --> 00:02:38,040
in another gem.

00:02:38,040 --> 00:02:41,340
Do- the Ruby agent didn't provide a good API

00:02:41,340 --> 00:02:43,769
for somebody else to extend it the way that

00:02:43,769 --> 00:02:45,799
we would like them to. And so to get

00:02:45,799 --> 00:02:48,060
their work done, they did the only thing that

00:02:48,060 --> 00:02:50,219
was available to them. And it caused both of

00:02:50,219 --> 00:02:52,530
us pain in the end.

00:02:52,530 --> 00:02:53,999
That's the sort of situation that I'm here to

00:02:53,999 --> 00:02:55,849
talk to you about today, and give you a

00:02:55,849 --> 00:02:58,010
lot of tips all the way from small things

00:02:58,010 --> 00:02:59,370
that you can do all the way up to

00:02:59,370 --> 00:03:02,579
how you pattern your applications and gems, so that

00:03:02,579 --> 00:03:04,840
you can avoid this sort of pain that happens

00:03:04,840 --> 00:03:06,689
when people plug in to your gems in ways

00:03:06,689 --> 00:03:09,180
that you're not expecting.

00:03:09,180 --> 00:03:11,769
Maybe you want to write the next big application

00:03:11,769 --> 00:03:13,200
server. You want to get in the fray with

00:03:13,200 --> 00:03:17,420
Unicorn and Puma and fight it out, you know.

00:03:17,420 --> 00:03:19,120
Maybe you think that you've got a better idea

00:03:19,120 --> 00:03:23,540
about how to do background job processing, you know.

00:03:23,540 --> 00:03:25,379
All these other frameworks have got it wrong. You've

00:03:25,379 --> 00:03:27,260
got the plan.

00:03:27,260 --> 00:03:29,569
Or maybe you've just got some little utility gem

00:03:29,569 --> 00:03:31,450
that you want to put out there and have

00:03:31,450 --> 00:03:33,689
people be able to use, and you want people

00:03:33,689 --> 00:03:36,099
to be able to build on top of it.

00:03:36,099 --> 00:03:38,189
Whatever the case is, there are ways that you

00:03:38,189 --> 00:03:40,260
can make your life easier and make the life

00:03:40,260 --> 00:03:44,069
of your gem users easier as well.

00:03:44,069 --> 00:03:45,730
So we're gonna cover a lot of material, a

00:03:45,730 --> 00:03:47,889
lot of little cases, that we've run into at

00:03:47,889 --> 00:03:50,359
New Relics. So we're on both sides of this.

00:03:50,359 --> 00:03:52,829
We hook into other gems to be able to

00:03:52,829 --> 00:03:55,329
monitor and get timings for them. And other people

00:03:55,329 --> 00:03:56,959
build on top of us and put us in

00:03:56,959 --> 00:03:59,599
their app. And so some of these examples will

00:03:59,599 --> 00:04:01,969
be things that we've run into with other gems

00:04:01,969 --> 00:04:04,099
and worked through with them. Others will be things

00:04:04,099 --> 00:04:06,560
that we've screwed up and made other peoples' lives

00:04:06,560 --> 00:04:07,200
hard.

00:04:07,200 --> 00:04:09,279
And we'll hopefully learn a lot from all of

00:04:09,279 --> 00:04:11,359
this. We'll talk about how you can pass things

00:04:11,359 --> 00:04:13,459
into your gems and patterns for doing that to

00:04:13,459 --> 00:04:15,859
make it easy for people to modify the behavior

00:04:15,859 --> 00:04:18,540
of your gem. We'll talk about using events to

00:04:18,540 --> 00:04:21,800
make things more decoupled, giving a good interface for

00:04:21,800 --> 00:04:24,060
people to hook in to your gem.

00:04:24,060 --> 00:04:25,760
We'll talk about the middleware pattern, which is a

00:04:25,760 --> 00:04:29,610
very powerful way for letting people interject into kind

00:04:29,610 --> 00:04:32,390
of a request life cycle within the life of

00:04:32,390 --> 00:04:35,600
your gem. We'll talk about life cycle for broader

00:04:35,600 --> 00:04:40,610
things, more application lifecycle for webservers and background job

00:04:40,610 --> 00:04:43,360
processors and making the changes you need there for

00:04:43,360 --> 00:04:44,910
people to work.

00:04:44,910 --> 00:04:48,850
We'll talk about naming, configuration, documentation - all of

00:04:48,850 --> 00:04:51,320
the sort of periferal things around your gem that

00:04:51,320 --> 00:04:54,020
surprisingly can make things a lot easier or a

00:04:54,020 --> 00:04:56,780
lot harder depending on how you do it.

00:04:56,780 --> 00:04:59,720
So let's move on to the first topic. Passing

00:04:59,720 --> 00:05:02,220
things in.

00:05:02,220 --> 00:05:05,140
A great case for letting somebody pass something in

00:05:05,140 --> 00:05:06,970
- the simplest sort of way that you can

00:05:06,970 --> 00:05:09,560
let somebody modify the behavior of your gem, is

00:05:09,560 --> 00:05:11,260
to let them hand you an object. And a

00:05:11,260 --> 00:05:13,570
logger is a really great example of that, and

00:05:13,570 --> 00:05:15,260
one that you probably should be doing if you're

00:05:15,260 --> 00:05:18,460
doing some sort of logging from your gem.

00:05:18,460 --> 00:05:21,340
We have here the one positive case that I'll

00:05:21,340 --> 00:05:23,220
take out of ActiveRecord today to show you of

00:05:23,220 --> 00:05:25,870
the pattern from the gem. It actually happens to

00:05:25,870 --> 00:05:27,640
be the only thing that I'm taking out of

00:05:27,640 --> 00:05:31,030
ActiveRecord in this case. But they will let you

00:05:31,030 --> 00:05:33,590
set the logger. It's right there on the base.

00:05:33,590 --> 00:05:35,810
You can hand it an object and that's what

00:05:35,810 --> 00:05:37,620
it'll use to log.

00:05:37,620 --> 00:05:39,280
If they didn't do that, and you wanted to

00:05:39,280 --> 00:05:41,990
change the output that they do where that goes

00:05:41,990 --> 00:05:44,080
to, you know, pack that somewhere else, put it

00:05:44,080 --> 00:05:46,600
to a file, modify it in some way. You

00:05:46,600 --> 00:05:48,780
know, you would be forced to grovel around in

00:05:48,780 --> 00:05:51,210
their internals or find where they're doing that logging

00:05:51,210 --> 00:05:53,430
and monkey patch it in some way.

00:05:53,430 --> 00:05:56,430
So letting them surface that logger just, give access

00:05:56,430 --> 00:05:59,460
to that object on the top level, gives you

00:05:59,460 --> 00:06:02,280
a lot of flexibility.

00:06:02,280 --> 00:06:04,990
In other circles this is commonly known as dependency

00:06:04,990 --> 00:06:07,080
injection. But if you're like me, that makes you

00:06:07,080 --> 00:06:09,810
think of something in Java with factoring managers and

00:06:09,810 --> 00:06:12,080
a bunch of XML to wire it up.

00:06:12,080 --> 00:06:14,660
It doesn't have to be, though. Dependency injection just

00:06:14,660 --> 00:06:17,490
means that you let somebody else provide you with

00:06:17,490 --> 00:06:19,470
the dependency that you need to work with.

00:06:19,470 --> 00:06:22,140
And in this case with the logger, it's just

00:06:22,140 --> 00:06:24,680
a matter of a single accessor for the object

00:06:24,680 --> 00:06:26,500
that you're gonna use.

00:06:26,500 --> 00:06:28,710
This is a lot simpler in Ruby than it

00:06:28,710 --> 00:06:30,370
is in some other languages as well, because of

00:06:30,370 --> 00:06:33,860
duck typing. Although that's kind of a double-edged sword.

00:06:33,860 --> 00:06:36,520
In the case of the logger, you need to

00:06:36,520 --> 00:06:38,560
make sure that your logger supports all of the

00:06:38,560 --> 00:06:41,270
same methods that would commonly be exposed off of

00:06:41,270 --> 00:06:44,440
the logger class that ActiveRecord is expecting.

00:06:44,440 --> 00:06:47,530
It's highly recommending, from what I've found, to provide

00:06:47,530 --> 00:06:50,110
some sort of spec, if you're intending people to

00:06:50,110 --> 00:06:52,670
pass an object in for this type of case.

00:06:52,670 --> 00:06:54,550
You know, maybe not for a logger, because that's

00:06:54,550 --> 00:06:56,280
pretty common and people know, but if you've got

00:06:56,280 --> 00:06:59,120
anything more specialized, you want to clearly communicate what

00:06:59,120 --> 00:07:01,120
that contract is.

00:07:01,120 --> 00:07:03,490
The other people are gonna be building their code

00:07:03,490 --> 00:07:06,240
against.

00:07:06,240 --> 00:07:09,020
Another great case for doing this sort of injection

00:07:09,020 --> 00:07:12,280
is instrumentors. And this is obviously very near and

00:07:12,280 --> 00:07:14,310
dear to my heart, being at New Relic, and

00:07:14,310 --> 00:07:16,720
I love to see gems that provide ways to

00:07:16,720 --> 00:07:19,670
let you wrap around and measure the timings for

00:07:19,670 --> 00:07:22,300
critical things that happen within them.

00:07:22,300 --> 00:07:24,210
A good example of where this had been done

00:07:24,210 --> 00:07:26,840
was in the excon gem. So excon is a

00:07:26,840 --> 00:07:30,590
HTTP client library, and when you spin up the

00:07:30,590 --> 00:07:33,460
new connection, it gives you this instrumentor in the

00:07:33,460 --> 00:07:35,710
hash that you can provide. And you give it

00:07:35,710 --> 00:07:38,050
a class or module and it will go and

00:07:38,050 --> 00:07:40,050
it will use that to wrap around all of

00:07:40,050 --> 00:07:42,620
the HTTP calls that it makes.

00:07:42,620 --> 00:07:45,140
This is a really nice idea, and it lets

00:07:45,140 --> 00:07:47,820
you build a simple little instrumentor class that just,

00:07:47,820 --> 00:07:50,670
you know, does whatever timing or output or logging

00:07:50,670 --> 00:07:52,180
that you want to do, and then you yield

00:07:52,180 --> 00:07:54,970
and it carries on with its business inside of

00:07:54,970 --> 00:07:56,760
there.

00:07:56,760 --> 00:07:59,020
Unfortunately there's a little bit of a problem with

00:07:59,020 --> 00:08:01,550
this, and that's the fact that there is one

00:08:01,550 --> 00:08:05,870
instrumentor allowed in excon. So on the surface this

00:08:05,870 --> 00:08:08,100
looks like exactly what we wanted when we came

00:08:08,100 --> 00:08:11,380
around to instrument this particular HTTP library. But in

00:08:11,380 --> 00:08:14,550
fact we couldn't use it, because it would tromp

00:08:14,550 --> 00:08:17,530
on somebody else's instrumentor that they might have set.

00:08:17,530 --> 00:08:19,550
The application that was using it might have already

00:08:19,550 --> 00:08:22,830
set one. Some other library might have. Or in,

00:08:22,830 --> 00:08:25,790
excon itself might set something there by default.

00:08:25,790 --> 00:08:28,140
All of those cases wouldn't have allowed us to

00:08:28,140 --> 00:08:31,900
easily pass that in and modify it without risking

00:08:31,900 --> 00:08:34,919
ruining somebody else's behavior. This is a theme that

00:08:34,919 --> 00:08:36,789
we'll come back to a number of times throughout

00:08:36,789 --> 00:08:39,219
this talk. That if there is a place where

00:08:39,219 --> 00:08:41,620
you have a single thing, whether it is a

00:08:41,620 --> 00:08:44,519
hook or an object that's being relied on, you

00:08:44,519 --> 00:08:47,430
know, that potentially locks people in in how they

00:08:47,430 --> 00:08:50,209
interact with your gem and makes it difficult for

00:08:50,209 --> 00:08:52,290
people that want to extend it to do the

00:08:52,290 --> 00:08:55,480
things that they need to do.

00:08:55,480 --> 00:08:58,499
Another great case for passing things in and allowing

00:08:58,499 --> 00:09:02,610
different functionality is backend. So assuming everybody else uses

00:09:02,610 --> 00:09:05,740
the same data access library, or gets things together

00:09:05,740 --> 00:09:08,920
in the same way as you do, it's, you

00:09:08,920 --> 00:09:10,779
know, kind of confining.

00:09:10,779 --> 00:09:14,269
A good case for this was the Delayed::Job gem.

00:09:14,269 --> 00:09:17,410
So Delayed::Job is a background job processor. The first

00:09:17,410 --> 00:09:19,910
line is the demonstration of just a piece of

00:09:19,910 --> 00:09:21,579
Ruby code that you would do. And with Delayed::Job

00:09:21,579 --> 00:09:24,310
you can say dot delay and then call the

00:09:24,310 --> 00:09:27,240
method that you would. And what that delay actually

00:09:27,240 --> 00:09:31,769
does is serializes enough information into some data store

00:09:31,769 --> 00:09:33,790
that it can run that piece of code for

00:09:33,790 --> 00:09:35,220
you later.

00:09:35,220 --> 00:09:37,540
And in the early versions of it, it was

00:09:37,540 --> 00:09:40,050
tied to ActiveRecord, but then they broke this out

00:09:40,050 --> 00:09:43,050
into separate backends that you could provide. And I

00:09:43,050 --> 00:09:45,660
think there was a datamapper implementation and a Mongo

00:09:45,660 --> 00:09:46,740
implementation.

00:09:46,740 --> 00:09:48,649
So they actually went so far as to make

00:09:48,649 --> 00:09:50,949
it so that you could provide separate backends as

00:09:50,949 --> 00:09:54,290
gems, that would hook into this. And that's a

00:09:54,290 --> 00:09:58,579
really nice structure for being able to do that.

00:09:58,579 --> 00:10:00,860
There was a little bit of a weirdness, though,

00:10:00,860 --> 00:10:03,449
in how the interaction went with these backend gems.

00:10:03,449 --> 00:10:06,209
And it caused us some issues in the instrumentation

00:10:06,209 --> 00:10:08,309
that we wrote for it. And it specifically was

00:10:08,309 --> 00:10:09,610
this line.

00:10:09,610 --> 00:10:13,209
So what that does, you provide it with your

00:10:13,209 --> 00:10:15,759
backend. You've got your own class in your gem,

00:10:15,759 --> 00:10:18,519
but then they were forcing that to be the

00:10:18,519 --> 00:10:21,579
delayed job constant. So when we came to this

00:10:21,579 --> 00:10:24,839
library we thought, oh, you know, the delayed job

00:10:24,839 --> 00:10:27,430
class. That's the one that we ought to instrument

00:10:27,430 --> 00:10:28,920
things around.

00:10:28,920 --> 00:10:30,860
And we wrote some code that looked a little

00:10:30,860 --> 00:10:34,029
like this. So we looked for the count on

00:10:34,029 --> 00:10:37,379
it. Well this seemed safe. We're talking to something

00:10:37,379 --> 00:10:40,019
that was right there in Delayed::Job, right.

00:10:40,019 --> 00:10:43,050
Well, no. We were actually talking to something that

00:10:43,050 --> 00:10:45,389
was a separate plugin. It wasn't part of the

00:10:45,389 --> 00:10:47,870
main API, and if you tried to use Delayed::Job

00:10:47,870 --> 00:10:51,279
with something else, it would fail.

00:10:51,279 --> 00:10:53,370
This isn't something that you can even cleanly protect

00:10:53,370 --> 00:10:56,639
against in a lot of senses, because just looking

00:10:56,639 --> 00:10:59,499
for a respond to on count doesn't necessarily imply

00:10:59,499 --> 00:11:01,809
that it's going to work properly when you call

00:11:01,809 --> 00:11:03,449
it with these methods.

00:11:03,449 --> 00:11:05,740
So it would have probably been cleaner if they

00:11:05,740 --> 00:11:09,160
had left things, not making it look like that

00:11:09,160 --> 00:11:13,180
backend is something that's in the base gem. But

00:11:13,180 --> 00:11:15,120
maybe provided a different way that you could access

00:11:15,120 --> 00:11:18,980
and check it to figure out what capabilities it

00:11:18,980 --> 00:11:20,379
had.

00:11:20,379 --> 00:11:21,360
There are a lot of ways that you can

00:11:21,360 --> 00:11:26,100
make specific things to the functionality of your gem

00:11:26,100 --> 00:11:28,350
in the objects that people pass in. So the

00:11:28,350 --> 00:11:32,149
example that I have here is resque. So resque

00:11:32,149 --> 00:11:34,259
is another background job processor.

00:11:34,259 --> 00:11:36,559
You provide it a job class with a perform

00:11:36,559 --> 00:11:39,850
method and it allows you to incue that job

00:11:39,850 --> 00:11:42,100
and then it will write that to a Redis

00:11:42,100 --> 00:11:45,149
backend and a separate process will then consume that.

00:11:45,149 --> 00:11:46,850
It'll run later on.

00:11:46,850 --> 00:11:49,529
So the way that they let you customize this

00:11:49,529 --> 00:11:53,660
is they provide before and after hooks for a

00:11:53,660 --> 00:11:57,519
lot of different pieces of the lifecycle of your

00:11:57,519 --> 00:11:59,379
job. So they have a way that, if you

00:11:59,379 --> 00:12:01,990
name a method with before_perform on the class that

00:12:01,990 --> 00:12:04,439
you're handing in, then it will go and find

00:12:04,439 --> 00:12:06,749
all of those and it'll run them for you.

00:12:06,749 --> 00:12:08,709
So in this way they let, they give you

00:12:08,709 --> 00:12:12,569
a very tidy interface for modifying your job class

00:12:12,569 --> 00:12:14,470
and the way that you pass it in, to

00:12:14,470 --> 00:12:15,869
get the work done that you need to do

00:12:15,869 --> 00:12:17,129
around your job.

00:12:17,129 --> 00:12:20,759
And as an instrumentor, as somebody that works on

00:12:20,759 --> 00:12:24,209
top of Resque at New Relic, we use exactly

00:12:24,209 --> 00:12:26,819
this functionality to be able to wrap around your

00:12:26,819 --> 00:12:29,129
perform on a job and take the timings that

00:12:29,129 --> 00:12:30,569
you want to get to figure out how your

00:12:30,569 --> 00:12:32,639
jobs are doing.

00:12:32,639 --> 00:12:34,550
Another key point about this is that this is

00:12:34,550 --> 00:12:37,569
also documented. They have a nice page that spells

00:12:37,569 --> 00:12:39,730
out all the hooks and what they are because

00:12:39,730 --> 00:12:42,220
this naming with before_perform and then you can name

00:12:42,220 --> 00:12:44,720
it whatever you want after that is very flexible,

00:12:44,720 --> 00:12:47,350
you know, without the documentation it may not be

00:12:47,350 --> 00:12:50,019
clear without reading the code exactly what's gonna be

00:12:50,019 --> 00:12:51,720
supported and what's not.

00:12:51,720 --> 00:12:53,240
But they make that very clear in the docs

00:12:53,240 --> 00:12:55,160
and that's a plus, and something that we'll touch

00:12:55,160 --> 00:12:58,670
on later, too.

00:12:58,670 --> 00:13:00,869
So there's a lot of different ways that Ruby,

00:13:00,869 --> 00:13:03,949
being very object oriented and duck typed, allows you

00:13:03,949 --> 00:13:06,970
to let people pass different things in than what

00:13:06,970 --> 00:13:10,569
your base implementation is. So when you're writing a

00:13:10,569 --> 00:13:12,069
gem, think about the ways that people might be

00:13:12,069 --> 00:13:14,759
able to simply pass things through to get different

00:13:14,759 --> 00:13:16,619
behavior than what they might be getting out of

00:13:16,619 --> 00:13:20,439
the box.

00:13:20,439 --> 00:13:23,329
There's another way that you can let people intercept

00:13:23,329 --> 00:13:25,290
and find out about the things that are happening

00:13:25,290 --> 00:13:27,110
in your gem. And that's events.

00:13:27,110 --> 00:13:29,459
So when I say events, there's probably a lot

00:13:29,459 --> 00:13:31,189
of things that you might be thinking. Maybe you're

00:13:31,189 --> 00:13:35,110
thinking, you know, node and asynchrony, or, you know,

00:13:35,110 --> 00:13:38,110
IO-driven stuff, or maybe if you've had bad experiences

00:13:38,110 --> 00:13:40,769
like me, you're thinking visual basic event handlers -

00:13:40,769 --> 00:13:45,399
anybody? No. OK, don't think about that too hard.

00:13:45,399 --> 00:13:47,220
When I say events, what I really just mean

00:13:47,220 --> 00:13:52,399
is, ways of notifying external code that important things

00:13:52,399 --> 00:13:54,600
have happened in you gem, giving them points where

00:13:54,600 --> 00:13:57,679
they can hook behavior onto what you're doing.

00:13:57,679 --> 00:14:00,339
I've actually given a whole talk about this, and

00:14:00,339 --> 00:14:03,689
an eventing system doesn't have to be complicated. I've

00:14:03,689 --> 00:14:07,439
written up a little gem, not necessarily for production

00:14:07,439 --> 00:14:10,410
usage but to demonstrate as, maybe like fifty lines

00:14:10,410 --> 00:14:13,300
to write this sort of event system where you

00:14:13,300 --> 00:14:15,389
can notify of something that happens and have an

00:14:15,389 --> 00:14:19,389
arbitrary list of subscribers that are interested run their

00:14:19,389 --> 00:14:22,350
code and the things that you care about happen.

00:14:22,350 --> 00:14:24,720
This provides a really nice interface, just because it

00:14:24,720 --> 00:14:27,910
separates the classes. They don't have to know about

00:14:27,910 --> 00:14:31,550
each other. They talk to each other through that

00:14:31,550 --> 00:14:34,369
event interface, and that's a really powerful thing that

00:14:34,369 --> 00:14:35,970
you can do when you don't control the code

00:14:35,970 --> 00:14:38,420
on both sides.

00:14:38,420 --> 00:14:40,949
How you surface those events is kind of up

00:14:40,949 --> 00:14:42,779
to you, but it makes a lot of sense

00:14:42,779 --> 00:14:45,019
to kind of frontload this into a place that's

00:14:45,019 --> 00:14:48,779
very visible, and very easy for instrumentors and other

00:14:48,779 --> 00:14:50,540
people to access.

00:14:50,540 --> 00:14:53,790
So in the New Relic Ruby agent, we've actually

00:14:53,790 --> 00:14:56,339
started using this. And so on our agent there

00:14:56,339 --> 00:14:59,079
is an events object that is the primary event

00:14:59,079 --> 00:15:02,779
listener that is in our system. And then here's

00:15:02,779 --> 00:15:04,939
an example of how you would subscribe to that.

00:15:04,939 --> 00:15:07,110
So this says hey, when I start a transaction,

00:15:07,110 --> 00:15:09,220
I've got some custom parameters work that I want

00:15:09,220 --> 00:15:12,309
to do. That block gets executed whenever we fire

00:15:12,309 --> 00:15:14,319
:start_transaction.

00:15:14,319 --> 00:15:16,309
You have to know about the agent in the

00:15:16,309 --> 00:15:18,059
events object, know they get to that, but then

00:15:18,059 --> 00:15:19,579
you don't have to know anything else about our

00:15:19,579 --> 00:15:23,019
transaction class. You don't know any of those details.

00:15:23,019 --> 00:15:27,569
You can just wire this block up.

00:15:27,569 --> 00:15:30,339
Resque has a similar sort of hooking mechanism, although

00:15:30,339 --> 00:15:32,209
they do it directly off of the top of

00:15:32,209 --> 00:15:36,160
a module. So you can set this after_fork, so

00:15:36,160 --> 00:15:38,569
when Resque runs for each job, it will fork

00:15:38,569 --> 00:15:43,230
off a new copy of job process. And each

00:15:43,230 --> 00:15:45,949
of those will run this after_fork for you.

00:15:45,949 --> 00:15:47,779
This actually turns out to be pretty important because

00:15:47,779 --> 00:15:51,459
this line is very commonly added in cases where

00:15:51,459 --> 00:15:54,929
people are using Resque or other forking frameworks, to

00:15:54,929 --> 00:15:57,319
make sure that your database connections are all there

00:15:57,319 --> 00:15:58,579
and the child.

00:15:58,579 --> 00:16:00,639
You can run into problems if you don't re-establish

00:16:00,639 --> 00:16:02,629
those connections.

00:16:02,629 --> 00:16:04,850
This turned out to be an issue for us

00:16:04,850 --> 00:16:07,699
at New Relic, though, because we actually have some

00:16:07,699 --> 00:16:10,040
work that we really want to do in our,

00:16:10,040 --> 00:16:13,410
in the after_fork from Resque as well. We use

00:16:13,410 --> 00:16:15,100
some background threads - we'll talk a little more

00:16:15,100 --> 00:16:17,779
about that later. But we needed to have an

00:16:17,779 --> 00:16:21,029
after_fork, and as it turned out there was only

00:16:21,029 --> 00:16:22,800
one of them.

00:16:22,800 --> 00:16:25,170
In some earlier versions of Resque, you got one

00:16:25,170 --> 00:16:28,300
after_fork put. And so either we didn't get our

00:16:28,300 --> 00:16:31,959
threads started, because somebody else came along later and

00:16:31,959 --> 00:16:35,989
registered their own after_fork, or we tromped over somebody

00:16:35,989 --> 00:16:39,319
else's after_fork hook, and then their database connections might

00:16:39,319 --> 00:16:42,749
not work or whatever functionality they were rewiring at

00:16:42,749 --> 00:16:45,220
that point would end up broken.

00:16:45,220 --> 00:16:47,739
This is not a good situation at all, and

00:16:47,739 --> 00:16:49,540
we ended up having to, you know, when people

00:16:49,540 --> 00:16:52,139
would run into it, they would have to make

00:16:52,139 --> 00:16:54,759
their own after_fork that did both the database stuff

00:16:54,759 --> 00:16:57,519
and called over to our piece of code and

00:16:57,519 --> 00:17:00,249
did whatever else they needed to have happen there.

00:17:00,249 --> 00:17:02,959
Not a good situation for anyone. So the fix

00:17:02,959 --> 00:17:04,569
for this turned out to be pretty simple when

00:17:04,569 --> 00:17:07,220
they put it into Resque, two or three versions

00:17:07,220 --> 00:17:08,890
back. And that was simply to make it so

00:17:08,890 --> 00:17:13,120
that after_fork had an array. It held on to

00:17:13,120 --> 00:17:15,769
multiple handlers and allowed you to put those in

00:17:15,769 --> 00:17:16,360
there.

00:17:16,360 --> 00:17:18,809
And so it was wonderful that the way that

00:17:18,809 --> 00:17:21,750
they did that was actually API compatible. Nobody had

00:17:21,750 --> 00:17:24,419
to change their code necessarily to make that work

00:17:24,419 --> 00:17:27,459
correctly. And if it had been that way from

00:17:27,459 --> 00:17:29,809
the start, would have been nice, but, you know,

00:17:29,809 --> 00:17:31,720
where we're at today, you don't have to do

00:17:31,720 --> 00:17:33,880
this sort of custom hookup that you do.

00:17:33,880 --> 00:17:39,690
So if you've got, again, one thing, think about

00:17:39,690 --> 00:17:41,320
whether it might make sense for there to be

00:17:41,320 --> 00:17:43,590
more than one. Make sure that you're not gonna

00:17:43,590 --> 00:17:46,220
be running into a situation where different people are

00:17:46,220 --> 00:17:49,179
gonna tromp on that single log object and run

00:17:49,179 --> 00:17:52,890
into problems because of it.

00:17:52,890 --> 00:17:55,840
Working with events, one consideration is whether there is

00:17:55,840 --> 00:17:59,049
order dependencies in the event handlers and the things

00:17:59,049 --> 00:18:01,460
that need to happen. And it's kind of a

00:18:01,460 --> 00:18:04,429
pressure against using an evented sort of mechanism for

00:18:04,429 --> 00:18:07,110
this, because they don't really support events. I don't

00:18:07,110 --> 00:18:09,299
know what order the things that I put in

00:18:09,299 --> 00:18:13,669
to :start_transaction are necessary to get called in.

00:18:13,669 --> 00:18:15,630
If it matters a lot, you might want to

00:18:15,630 --> 00:18:19,549
think about doing things differently. But that's kind of

00:18:19,549 --> 00:18:21,830
a thing that might push us to some other

00:18:21,830 --> 00:18:25,000
techniques that we'll look at a little later.

00:18:25,000 --> 00:18:28,289
Also want to make a call-out as well, that

00:18:28,289 --> 00:18:31,350
Rails in ActiveSupport, since about the 3.0 version, has

00:18:31,350 --> 00:18:34,610
shipped with a thing called ActiveSupport::Notifications. And this is

00:18:34,610 --> 00:18:38,830
basically a built-in eventing, event notification system like what

00:18:38,830 --> 00:18:40,789
I just tried. The interface is very similar to

00:18:40,789 --> 00:18:44,360
what we've shown that we use in the agent,

00:18:44,360 --> 00:18:47,039
although we've got our own little implementation, since we

00:18:47,039 --> 00:18:49,960
can't depend on this specific version of ActiveSupport.

00:18:49,960 --> 00:18:52,679
So a lot of things in Rails are already

00:18:52,679 --> 00:18:54,610
using this. This is how a lot of the

00:18:54,610 --> 00:18:57,010
logging happens. A lot of the things that underpin

00:18:57,010 --> 00:19:00,110
Rails are already built on top of this. And

00:19:00,110 --> 00:19:03,299
so depending on the context of your gem, you

00:19:03,299 --> 00:19:06,110
might consider wiring into that. I've seen a lot

00:19:06,110 --> 00:19:08,360
of things as well where people are optionally wiring

00:19:08,360 --> 00:19:10,330
into it if they find that it's around and

00:19:10,330 --> 00:19:13,080
firing off interesting events that people like, wanna subscribe

00:19:13,080 --> 00:19:13,370
to.

00:19:13,370 --> 00:19:17,240
Which is kind of nice to provide that visibility

00:19:17,240 --> 00:19:20,120
if it's there.

00:19:20,120 --> 00:19:22,110
So events are a really powerful way that you

00:19:22,110 --> 00:19:25,100
can let people hook into your code in a

00:19:25,100 --> 00:19:28,909
decoupled way and respond to the important things that

00:19:28,909 --> 00:19:33,630
happen during the lifetime of your gem.

00:19:33,630 --> 00:19:35,649
But another way that you can handle things, especially

00:19:35,649 --> 00:19:38,860
if there is order at play, is the pattern

00:19:38,860 --> 00:19:42,890
of middleware. So most people are probably familiar with

00:19:42,890 --> 00:19:45,299
middleware primarily from rack.

00:19:45,299 --> 00:19:48,200
So rack is a very common library that's used

00:19:48,200 --> 00:19:52,070
under the vast majority of the web frameworks that

00:19:52,070 --> 00:19:55,679
we're familiar with today in Ruby, Sinatra, Rails uses

00:19:55,679 --> 00:19:58,549
it. And basically the metaphor that it has is

00:19:58,549 --> 00:20:01,690
there is a, a stack of these middlewares. And

00:20:01,690 --> 00:20:04,570
when a request comes in, it gets handed through

00:20:04,570 --> 00:20:07,210
each of these layers in this middleware stack.

00:20:07,210 --> 00:20:10,130
Each of them have their opportunity to do something

00:20:10,130 --> 00:20:13,809
in response to that request, modify the request, eventually

00:20:13,809 --> 00:20:16,179
it gets to your application. You generate content to

00:20:16,179 --> 00:20:19,639
send back out. And then that response percolates back

00:20:19,639 --> 00:20:22,360
out through that middleware stack, and everybody again has

00:20:22,360 --> 00:20:24,059
an opportunity to look at that and do what

00:20:24,059 --> 00:20:27,360
they need to in response to it.

00:20:27,360 --> 00:20:30,809
So the interface for this is really slim. There's,

00:20:30,809 --> 00:20:33,279
you just define a call method, it takes an

00:20:33,279 --> 00:20:36,340
environment which is a hash that has the values

00:20:36,340 --> 00:20:38,610
from the request and the values from the environment

00:20:38,610 --> 00:20:41,809
- the server environment and things that come through.

00:20:41,809 --> 00:20:44,760
And you're responsible to make this app call and

00:20:44,760 --> 00:20:46,980
pass on to the next layer of the stack.

00:20:46,980 --> 00:20:51,190
It's really very slim and very nice in that

00:20:51,190 --> 00:20:52,230
way.

00:20:52,230 --> 00:20:54,820
The environment, though, can be a problem, in this

00:20:54,820 --> 00:20:57,309
sort of setup. It's very wide open. This hash

00:20:57,309 --> 00:21:00,389
is just there, and any of the middlewares that

00:21:00,389 --> 00:21:02,860
are in that stack have the opportunity to interact

00:21:02,860 --> 00:21:04,010
with that.

00:21:04,010 --> 00:21:07,070
Sometimes in ways that you might not expect. This

00:21:07,070 --> 00:21:08,929
is just the list of the base things that

00:21:08,929 --> 00:21:11,960
I saw in a Rails application that I had

00:21:11,960 --> 00:21:14,549
there. And it's pretty easy for there to be

00:21:14,549 --> 00:21:17,100
leftovers. It's pretty easy for there to be things

00:21:17,100 --> 00:21:19,039
that happen in that environment that you might not

00:21:19,039 --> 00:21:20,830
be expecting.

00:21:20,830 --> 00:21:22,549
Especially if you do things where maybe you mount

00:21:22,549 --> 00:21:24,960
a Sinatra app inside of a Rails app. It's

00:21:24,960 --> 00:21:27,850
stringing these things together. I've definitely seen cases where

00:21:27,850 --> 00:21:30,019
there are things that are left in the environment

00:21:30,019 --> 00:21:33,080
from prior layers of the middleware that cause behavior

00:21:33,080 --> 00:21:34,889
that you're not expecting.

00:21:34,889 --> 00:21:36,789
So it's just something to be aware of, you

00:21:36,789 --> 00:21:39,600
know. If everybody's tidy and clean and write's their

00:21:39,600 --> 00:21:42,230
code well, this doesn't end up being a big

00:21:42,230 --> 00:21:43,210
problem.

00:21:43,210 --> 00:21:45,639
But it can happen when you're passing off through

00:21:45,639 --> 00:21:48,510
so many different layers.

00:21:48,510 --> 00:21:51,529
There's also a problem with introspection, and the way

00:21:51,529 --> 00:21:56,080
that rack has implemented the middlewares. Rails and Sinatra

00:21:56,080 --> 00:21:58,159
actually wrap some things around this, so you can

00:21:58,159 --> 00:22:01,549
see what that stack is. But at the base

00:22:01,549 --> 00:22:04,039
of it, all that rack requires is that each

00:22:04,039 --> 00:22:06,529
layer knows the communicate to the next one, like

00:22:06,529 --> 00:22:11,399
that app instance variable is the connection between those.

00:22:11,399 --> 00:22:12,980
And there's no reason it has to be named

00:22:12,980 --> 00:22:16,000
app. I can store that wherever I want to.

00:22:16,000 --> 00:22:18,350
And so if you're wanting to look at that

00:22:18,350 --> 00:22:21,240
stack, look at what's in those rack layers, you

00:22:21,240 --> 00:22:22,480
kind of are in for a little bit of

00:22:22,480 --> 00:22:24,529
a hard time if you can't assume some version

00:22:24,529 --> 00:22:29,549
of Rails or Sinatra that's there to help you.

00:22:29,549 --> 00:22:32,840
Middleware is not necessarily restricted to just Rack, and

00:22:32,840 --> 00:22:35,570
the web, though. I've seen it applied very well

00:22:35,570 --> 00:22:40,590
from the background job processing framework Sidekiq. So Sidekiq,

00:22:40,590 --> 00:22:43,440
unlike Resque, which forks, Sidekiq uses multiple threads to

00:22:43,440 --> 00:22:45,000
do that processing.

00:22:45,000 --> 00:22:47,760
And there are actually middlewares that are provided, both

00:22:47,760 --> 00:22:50,659
on the side of adding a job into the

00:22:50,659 --> 00:22:52,919
queue, and taking the job off of the queue

00:22:52,919 --> 00:22:55,519
and processing it on server side.

00:22:55,519 --> 00:23:00,139
And so a middleware in, in Sidekiq looks like

00:23:00,139 --> 00:23:02,519
we see here very similar to what we had

00:23:02,519 --> 00:23:04,760
in Rack. Tells you the worker, tells you the

00:23:04,760 --> 00:23:06,570
message, gives you some information that you can set

00:23:06,570 --> 00:23:07,669
up.

00:23:07,669 --> 00:23:09,059
This is really nice because it gives you a

00:23:09,059 --> 00:23:13,029
very structured way to organize those pieces. And in

00:23:13,029 --> 00:23:16,789
addition, it, there is a directly exposed way to

00:23:16,789 --> 00:23:19,950
see what that stack of middlewares are. You can

00:23:19,950 --> 00:23:22,100
add them very simply in this way, but you

00:23:22,100 --> 00:23:24,370
can interact and you can look at that list.

00:23:24,370 --> 00:23:27,269
And so as a third party, being able to

00:23:27,269 --> 00:23:29,850
potentially look at what's there, make sure that you're

00:23:29,850 --> 00:23:32,779
not already added, you know, potentially since other things

00:23:32,779 --> 00:23:34,669
that are going on in that middleware stack, is

00:23:34,669 --> 00:23:38,149
a really big plus.

00:23:38,149 --> 00:23:40,029
So that's the middleware pattern. It's a good way

00:23:40,029 --> 00:23:43,730
to deal with things when you've got events that

00:23:43,730 --> 00:23:46,600
might need to be wrapped around what's going on

00:23:46,600 --> 00:23:48,880
in your gem, but you care about the ordering,

00:23:48,880 --> 00:23:52,809
you care about the sequence that they happen in.

00:23:52,809 --> 00:23:55,169
So sometimes you write gems, sometimes you might be

00:23:55,169 --> 00:23:57,830
writing something where there's kind of more of a

00:23:57,830 --> 00:24:00,200
executable aspect to it, whether it's a web server

00:24:00,200 --> 00:24:02,210
or some sort of service that sits there and

00:24:02,210 --> 00:24:06,149
monitors something, background job processor.

00:24:06,149 --> 00:24:10,029
A lot of times, those sorts of applications will

00:24:10,029 --> 00:24:15,200
run into issues around forking and daemonization.

00:24:15,200 --> 00:24:18,370
So at base, what happens with forking is that

00:24:18,370 --> 00:24:20,610
you're running a process, and you make a call

00:24:20,610 --> 00:24:23,750
for a process for one of the similar overrides

00:24:23,750 --> 00:24:28,149
of that which exists. And the underlying operating system

00:24:28,149 --> 00:24:30,820
will make you a new child process, with its

00:24:30,820 --> 00:24:33,980
own identity, but with an exact copy of the

00:24:33,980 --> 00:24:36,320
state of the process that you started in.

00:24:36,320 --> 00:24:39,820
And in that child and parent, then execution continues

00:24:39,820 --> 00:24:43,899
from that point before it was called.

00:24:43,899 --> 00:24:47,710
So it's really nice if you're writing an application

00:24:47,710 --> 00:24:51,149
that does this sort of forking to provide hooks

00:24:51,149 --> 00:24:54,710
for before and after the fork.

00:24:54,710 --> 00:24:57,330
This let's people that might be interested in making

00:24:57,330 --> 00:24:59,620
the state of the world be a little different

00:24:59,620 --> 00:25:01,519
than it was, take care of their business, either

00:25:01,519 --> 00:25:04,100
before you go off and take care of the

00:25:04,100 --> 00:25:06,309
fork, or after it.

00:25:06,309 --> 00:25:09,179
One really concrete example of why you might want

00:25:09,179 --> 00:25:11,480
to do that is the fact that, I just

00:25:11,480 --> 00:25:13,820
kind of lied to you. When I said that

00:25:13,820 --> 00:25:16,539
the state of the child application is exactly the

00:25:16,539 --> 00:25:20,820
same, there are some things that don't carry over.

00:25:20,820 --> 00:25:25,100
When you have multiple threads executing in a process,

00:25:25,100 --> 00:25:27,700
only the thread that called fork ends up in

00:25:27,700 --> 00:25:28,809
the child.

00:25:28,809 --> 00:25:31,990
Now maybe you're thinking, OK, well, so those threads

00:25:31,990 --> 00:25:34,220
go away. Why, why do we care?

00:25:34,220 --> 00:25:37,330
Well, for example, New Relic runs a background thread

00:25:37,330 --> 00:25:39,820
that will send the data for your performance monitoring

00:25:39,820 --> 00:25:42,720
once a minute. If we start up in the

00:25:42,720 --> 00:25:47,000
parent process, and then you fork, we don't have

00:25:47,000 --> 00:25:49,539
our background thread to report that data back and

00:25:49,539 --> 00:25:51,350
you don't get your graphs.

00:25:51,350 --> 00:25:53,690
So for us, it's critical that we know when

00:25:53,690 --> 00:25:57,200
we fork so that we can restart that background

00:25:57,200 --> 00:26:00,690
thread and the child process. But without hooks, there

00:26:00,690 --> 00:26:02,630
aren't hooks built into the Ruby language to get

00:26:02,630 --> 00:26:04,519
at this in the generic way.

00:26:04,519 --> 00:26:07,899
So without you as a gem author, providing those

00:26:07,899 --> 00:26:10,600
spots where we can hook into it, we're kind

00:26:10,600 --> 00:26:13,380
of in for a bad time.

00:26:13,380 --> 00:26:15,419
There's also some other issues that we've run into

00:26:15,419 --> 00:26:18,970
around this, specifically related to locking and multi-threaded is

00:26:18,970 --> 00:26:22,659
concurrency. So if you have a lock held on

00:26:22,659 --> 00:26:26,159
a background thread, and then the fork happens on

00:26:26,159 --> 00:26:30,470
another thread while that background lock is taken, the

00:26:30,470 --> 00:26:33,620
lock state carries over to the child, but the

00:26:33,620 --> 00:26:36,100
thread that actually owned it isn't there to let

00:26:36,100 --> 00:26:37,100
it go away.

00:26:37,100 --> 00:26:39,759
No some of this might be bugs, at the

00:26:39,759 --> 00:26:42,090
Ruby VM level, we've actually seen a few patches

00:26:42,090 --> 00:26:43,980
come through to deal with some of these. But

00:26:43,980 --> 00:26:47,470
you gotta be aware that threads and forking, you

00:26:47,470 --> 00:26:48,990
probably are in for a little bit of a

00:26:48,990 --> 00:26:50,720
bad time.

00:26:50,720 --> 00:26:52,789
Actually had a long thread on this, on the

00:26:52,789 --> 00:26:56,559
resque project, talking through some options, and it's amazing

00:26:56,559 --> 00:26:58,889
the lengths to which some people have gone to

00:26:58,889 --> 00:27:01,100
get this stuff to work correctly. There have been

00:27:01,100 --> 00:27:03,580
patches to Ruby, a lot of stuff around, you

00:27:03,580 --> 00:27:06,009
know, exact versions of the operating systems that you

00:27:06,009 --> 00:27:10,120
work with to take care of that.

00:27:10,120 --> 00:27:12,480
If you're running an application that's also responsible for

00:27:12,480 --> 00:27:15,149
loading gems, there's a lot for you to consider

00:27:15,149 --> 00:27:17,440
around how you interact with things, to give third

00:27:17,440 --> 00:27:19,950
parties the hooks that they need.

00:27:19,950 --> 00:27:21,929
Unicorn is a great example of this. It's a

00:27:21,929 --> 00:27:24,789
forking web server. The master process starts up, spins

00:27:24,789 --> 00:27:29,289
off worker children that actually handle the requests. And

00:27:29,289 --> 00:27:31,590
they have a couple of different modes that you

00:27:31,590 --> 00:27:33,990
can run in. You can either load the gems

00:27:33,990 --> 00:27:36,539
in the parent or you can load them later

00:27:36,539 --> 00:27:39,450
on after things have started in the child.

00:27:39,450 --> 00:27:42,279
The unfortunate part about this for us is that

00:27:42,279 --> 00:27:46,009
because things get laoded late in the lifecycle if

00:27:46,009 --> 00:27:49,840
you set the preload app to false, we actually

00:27:49,840 --> 00:27:53,210
can't instrument the right things when this goes on.

00:27:53,210 --> 00:27:55,509
Because we don't get the hook after the load

00:27:55,509 --> 00:28:00,279
has happened, we want to actually instrument something that

00:28:00,279 --> 00:28:02,960
has already been called in Unicorn. And so we

00:28:02,960 --> 00:28:06,759
can't get the cycle of that correct.

00:28:06,759 --> 00:28:08,690
It's a difficult thing to work through, but if

00:28:08,690 --> 00:28:11,070
you're loading gems, it's good to pay attention to

00:28:11,070 --> 00:28:13,110
when you provide hooks and what the life cycle

00:28:13,110 --> 00:28:16,799
is that people might need.

00:28:16,799 --> 00:28:19,440
So that's the lifecycle of a broader application gems,

00:28:19,440 --> 00:28:21,750
a lot of, a lot around forking and threads.

00:28:21,750 --> 00:28:23,200
A lot to look into and a lot to

00:28:23,200 --> 00:28:24,679
think about if you're gonna write something that works

00:28:24,679 --> 00:28:26,629
that way.

00:28:26,629 --> 00:28:30,230
Moving on.

00:28:30,230 --> 00:28:34,450
So naming is a hard thing, right. It's, it's

00:28:34,450 --> 00:28:36,799
one of the two hard problems in computer science.

00:28:36,799 --> 00:28:39,370
The other ones being cache-in validation and off by

00:28:39,370 --> 00:28:41,659
one errors.

00:28:41,659 --> 00:28:43,919
So it's something you definitely got to pay attention

00:28:43,919 --> 00:28:46,299
to.

00:28:46,299 --> 00:28:48,190
There is a thing in the Ruby community, which

00:28:48,190 --> 00:28:53,610
has been very great for Rails, called convention over

00:28:53,610 --> 00:28:56,899
configuration, right.

00:28:56,899 --> 00:28:59,850
And another way to talk, another way to think

00:28:59,850 --> 00:29:01,909
about that is, it kind of forces you to

00:29:01,909 --> 00:29:04,279
name things in a certain way. Forces you to

00:29:04,279 --> 00:29:05,330
do certain things.

00:29:05,330 --> 00:29:08,250
Now if you're Rails, that's great. If you're Rails,

00:29:08,250 --> 00:29:10,100
I will - if I'm gonna work in Rails,

00:29:10,100 --> 00:29:12,870
I'll shape things to what, what I'm doing. But

00:29:12,870 --> 00:29:15,309
if you're a third party, if you're a smaller

00:29:15,309 --> 00:29:18,000
library, you might want to think twice about how

00:29:18,000 --> 00:29:19,960
much you enforce about the naming and paths that

00:29:19,960 --> 00:29:22,340
other people have to abide by.

00:29:22,340 --> 00:29:24,649
The example that I have here is the sequel

00:29:24,649 --> 00:29:27,019
ORM. Now I want to be clear, sequel is

00:29:27,019 --> 00:29:30,289
an awesome ORM. We love it. It's great. And

00:29:30,289 --> 00:29:32,980
we especially love the fact that they provide a

00:29:32,980 --> 00:29:36,309
plugin and extension architecture. Like, they have thought through

00:29:36,309 --> 00:29:38,120
the fact that people are gonna want to plug

00:29:38,120 --> 00:29:40,529
in to this, and they've provided a lot of

00:29:40,529 --> 00:29:41,710
functionality around it.

00:29:41,710 --> 00:29:43,740
There's a whole huge list of plugins if you

00:29:43,740 --> 00:29:46,090
go out to the project. This is the line

00:29:46,090 --> 00:29:48,990
that shows you how you can register a plugin

00:29:48,990 --> 00:29:51,840
with sequel to, you know, put that extra sort

00:29:51,840 --> 00:29:53,279
of stuff in there.

00:29:53,279 --> 00:29:54,899
But there's a little bit of a rug to

00:29:54,899 --> 00:29:58,279
me about how this gets implemented. Cause basically what

00:29:58,279 --> 00:30:00,850
this boils down to is a require that looks

00:30:00,850 --> 00:30:03,960
for sequel plugins in New Relic instrumentation.

00:30:03,960 --> 00:30:06,279
Now maybe I'm just being a little, you know,

00:30:06,279 --> 00:30:09,179
pedantic about things, but when I look in the

00:30:09,179 --> 00:30:13,409
lib directory for my gem, K, New Relic, folder,

00:30:13,409 --> 00:30:15,370
that's where most of my code goes, that's great.

00:30:15,370 --> 00:30:18,080
Tasks, OK, you know, that makes a lot of

00:30:18,080 --> 00:30:21,309
sense. New Relic RPM - gotta have that. And

00:30:21,309 --> 00:30:22,220
sequel.

00:30:22,220 --> 00:30:25,399
It gets a little awkward that I'm being forced

00:30:25,399 --> 00:30:27,639
to put sequel at the top level of my

00:30:27,639 --> 00:30:30,200
structure to have things end up the way that

00:30:30,200 --> 00:30:31,730
they need to to get picked up.

00:30:31,730 --> 00:30:34,500
So it'd be a fairly simple thing to address

00:30:34,500 --> 00:30:38,019
by just letting us pass a class, or module.

00:30:38,019 --> 00:30:40,230
Let us pass in the thing that we want

00:30:40,230 --> 00:30:43,799
to hook into you, rather than something that you

00:30:43,799 --> 00:30:46,379
evaluate to a path to go it up for.

00:30:46,379 --> 00:30:49,789
Again, just a consideration depending on what sort of

00:30:49,789 --> 00:30:52,799
library you're writing and how broadly it's used.

00:30:52,799 --> 00:30:55,460
I also have a little bit of a thing

00:30:55,460 --> 00:30:57,850
- so in Ruby, there's a lot of very

00:30:57,850 --> 00:31:00,370
colorful naming for our gems, and sometimes we get

00:31:00,370 --> 00:31:02,809
made fun of, and I'm not actually gonna, gonna

00:31:02,809 --> 00:31:04,799
pick on that at all. But every once in

00:31:04,799 --> 00:31:06,259
awhile we also kind of go to the other

00:31:06,259 --> 00:31:07,990
end of the spectrum and name things a little

00:31:07,990 --> 00:31:09,259
generically.

00:31:09,259 --> 00:31:14,259
Like here's my implementation of the ActiveRecord pattern. I

00:31:14,259 --> 00:31:20,480
called it ActiveRecord. Here's the datamapper pattern. DattaMattern.

00:31:20,480 --> 00:31:23,480
I'm gonna write an HTTP client. I'm gonna name

00:31:23,480 --> 00:31:24,519
it HTTPClient.

00:31:24,519 --> 00:31:27,809
You know, this isn't a huge thing, but then

00:31:27,809 --> 00:31:30,309
if somebody else wants to use any of those

00:31:30,309 --> 00:31:34,249
words in their, their infrastructure, like if you're, you

00:31:34,249 --> 00:31:39,610
have multiple HTTP clients that you actually wire into.

00:31:39,610 --> 00:31:42,110
It gets a little ambiguous when of them, one

00:31:42,110 --> 00:31:45,169
of these specific libraries, that you support is named

00:31:45,169 --> 00:31:47,879
HTTPClient. No, no, not the HTTP client. The HTTP

00:31:47,879 --> 00:31:52,059
client HTTPClient.

00:31:52,059 --> 00:31:53,620
It's nice to keep in mind that you might

00:31:53,620 --> 00:31:55,039
want to go with something that's a little more

00:31:55,039 --> 00:31:57,169
specific than that. I know it's hard to come

00:31:57,169 --> 00:31:59,389
up with good names at times. But it's probably

00:31:59,389 --> 00:32:01,080
worth your time.

00:32:01,080 --> 00:32:04,889
This also leads to a lot, so naming also

00:32:04,889 --> 00:32:06,639
leads to a lot of issues around how you

00:32:06,639 --> 00:32:09,710
qualify your code. So when I say qualify that,

00:32:09,710 --> 00:32:12,659
that means you know how you specify the modules

00:32:12,659 --> 00:32:15,879
where things live. And there's a lot of dynamic

00:32:15,879 --> 00:32:18,350
things about how Ruby will look up to find

00:32:18,350 --> 00:32:22,009
code for you, and occassionally, depending on how you

00:32:22,009 --> 00:32:25,100
name things, that can come back to bite you.

00:32:25,100 --> 00:32:28,070
So here we have a mistake that I personally

00:32:28,070 --> 00:32:31,240
made. So we were adding a little bit of

00:32:31,240 --> 00:32:33,659
functionality. We wanted to have some consistency around how

00:32:33,659 --> 00:32:37,009
we spun background threads up within the New Relic

00:32:37,009 --> 00:32:39,149
agent. Because we have a couple of them.

00:32:39,149 --> 00:32:41,730
And I thought, hey, I'll make my own thread

00:32:41,730 --> 00:32:43,659
class that kind of has our extra little bit

00:32:43,659 --> 00:32:45,850
of stuff that we want there.

00:32:45,850 --> 00:32:47,139
Everything's good.

00:32:47,139 --> 00:32:52,950
Well, not so much. Cause somewhere else out there

00:32:52,950 --> 00:32:56,139
in gem land, somebody wanted to reopen the standard

00:32:56,139 --> 00:32:59,169
library thread class and do something to it. Their

00:32:59,169 --> 00:33:02,690
code, unfortunately, ended up getting executed in the context

00:33:02,690 --> 00:33:07,200
where we were looking up into New Relic agent,

00:33:07,200 --> 00:33:09,210
and guess what class they found instead of the

00:33:09,210 --> 00:33:11,860
standard library thread class.

00:33:11,860 --> 00:33:13,649
They found my class.

00:33:13,649 --> 00:33:16,830
So we ended up renaming it. Which is a

00:33:16,830 --> 00:33:19,769
little unfortunate, because it feels like it's the clean

00:33:19,769 --> 00:33:23,450
thing to do, but there's some peril if you

00:33:23,450 --> 00:33:25,860
are gonna name things after the standard library.

00:33:25,860 --> 00:33:28,279
Now, I've had people make a little objection to

00:33:28,279 --> 00:33:31,169
my comments on this, that like, well, any gem

00:33:31,169 --> 00:33:33,740
out there could name something a name that you're

00:33:33,740 --> 00:33:37,149
gonna use. But I think it's mostly around the

00:33:37,149 --> 00:33:40,059
really commonly used things. Like if you're shadowing the

00:33:40,059 --> 00:33:42,559
name of something that's in the standard library, or

00:33:42,559 --> 00:33:45,820
maybe in Rails, you might run into cases where

00:33:45,820 --> 00:33:48,309
there could be some ambiguity or things that will

00:33:48,309 --> 00:33:50,059
get looked up in a way that you might

00:33:50,059 --> 00:33:52,159
not be expecting, and that you might not be

00:33:52,159 --> 00:33:55,360
testing for because it relies on other pieces of

00:33:55,360 --> 00:33:58,360
the gem infrastructure being loaded, that you're not really

00:33:58,360 --> 00:34:00,370
putting into your environment.

00:34:00,370 --> 00:34:04,440
Embarrassingly, we had a similar sort of thing happen

00:34:04,440 --> 00:34:07,249
within New Relic itself. SO there is a plugin

00:34:07,249 --> 00:34:10,579
gem which this is responsible for communicating your own

00:34:10,579 --> 00:34:14,649
custom metrics to the New Relic platform, which is

00:34:14,649 --> 00:34:17,790
different than the New Relic RPM Ruby agent on

00:34:17,790 --> 00:34:18,319
there.

00:34:18,319 --> 00:34:22,450
And in the plugin they defined this logger class.

00:34:22,450 --> 00:34:26,530
Seems pretty reasonable. It's in the New Relic module.

00:34:26,530 --> 00:34:28,889
But I bet you can all imagine what's probably

00:34:28,889 --> 00:34:31,159
gonna happen next.

00:34:31,159 --> 00:34:34,260
In New Relic RPB, we had the AgentLogger -

00:34:34,260 --> 00:34:36,800
now I know the naming's a little odd, Agent

00:34:36,800 --> 00:34:39,240
AgentLogger, but roll with me here. We learned from

00:34:39,240 --> 00:34:41,099
that.

00:34:41,099 --> 00:34:44,829
Unfortunately we had this.

00:34:44,829 --> 00:34:47,260
We weren't using the plugin gem together with the

00:34:47,260 --> 00:34:50,359
agent, cause we hadn't tested that combination, and there

00:34:50,359 --> 00:34:53,220
wasn't a lot of functional reason for it. But

00:34:53,220 --> 00:34:56,700
you can guess exactly which class got found when

00:34:56,700 --> 00:34:59,130
this line of code executed.

00:34:59,130 --> 00:35:01,400
You put two New Relic things together and it

00:35:01,400 --> 00:35:04,050
bombs. That's not a good experience.

00:35:04,050 --> 00:35:06,530
This could just as easily have been with somebody

00:35:06,530 --> 00:35:09,589
else's gem and some other thing of naming. And

00:35:09,589 --> 00:35:15,170
it's annoying because the fix is two characters.

00:35:15,170 --> 00:35:17,559
I really think that if you're writing a gem,

00:35:17,559 --> 00:35:20,730
you want to be very cautious, very conservative about

00:35:20,730 --> 00:35:23,059
the ways that you name on the module lookup

00:35:23,059 --> 00:35:25,579
rules. Cause you can't always assume the context in

00:35:25,579 --> 00:35:27,680
which your code is gonna execute.

00:35:27,680 --> 00:35:29,819
Unless you're way smarter than me, you know, things

00:35:29,819 --> 00:35:33,059
will come out and bite you. And it's just

00:35:33,059 --> 00:35:35,660
a matter of two colons to make sure that

00:35:35,660 --> 00:35:37,339
you're talking to the class that you think that

00:35:37,339 --> 00:35:40,510
you're talking to.

00:35:40,510 --> 00:35:43,109
So that's names and paths. It's easy to get

00:35:43,109 --> 00:35:47,319
those mixed up, and it's definitely something that's hard

00:35:47,319 --> 00:35:49,680
to test for at times. So keep your eyes

00:35:49,680 --> 00:35:53,040
closely on that.

00:35:53,040 --> 00:35:55,290
Configuration is another part, especially if you write a

00:35:55,290 --> 00:35:58,579
larger gem, that comes into play.

00:35:58,579 --> 00:36:01,680
Ruby's got a pretty good standard built-in mechanism now,

00:36:01,680 --> 00:36:04,569
all of the noise around yml with the security

00:36:04,569 --> 00:36:07,140
vulnerabilities earlier in the year. I don't really feel

00:36:07,140 --> 00:36:10,940
like makes it invalid as a configuration file format,

00:36:10,940 --> 00:36:12,660
you know. If you're slinging data across the wire

00:36:12,660 --> 00:36:15,630
in yml, you're gonna have problems. But config is

00:36:15,630 --> 00:36:17,470
kind of what it's there for.

00:36:17,470 --> 00:36:19,230
If you want a little more dynamic thing than

00:36:19,230 --> 00:36:21,800
just those sort of key value pairs, though, you

00:36:21,800 --> 00:36:24,790
can also mix this up with ERB a little

00:36:24,790 --> 00:36:25,450
bit.

00:36:25,450 --> 00:36:27,599
Example of how you would do that, is we

00:36:27,599 --> 00:36:30,230
read in a yml file. We can then use

00:36:30,230 --> 00:36:33,760
ERB to evaluate that, and what that lets us

00:36:33,760 --> 00:36:37,280
do, when we load the yml, is people can

00:36:37,280 --> 00:36:40,119
embed some templating in there. So here, they can

00:36:40,119 --> 00:36:43,140
get that default_awesome_key that we handed in from that

00:36:43,140 --> 00:36:45,660
external environment, or they can run any, any Ruby

00:36:45,660 --> 00:36:48,190
code that they need to.

00:36:48,190 --> 00:36:50,440
Potentially a little ugly for people to do that,

00:36:50,440 --> 00:36:53,010
though, if they need to do something really dynamic.

00:36:53,010 --> 00:36:55,180
And so there has been a resurgence of a

00:36:55,180 --> 00:36:59,369
new language for doing configuration in the Ruby space

00:36:59,369 --> 00:37:01,680
in the last couple of years that you might

00:37:01,680 --> 00:37:03,930
want to consider.

00:37:03,930 --> 00:37:07,559
And that language is Ruby.

00:37:07,559 --> 00:37:09,630
Prime case of this is Unicorn. You provide it

00:37:09,630 --> 00:37:11,780
a config file, it's a Ruby file. It gets

00:37:11,780 --> 00:37:15,410
executed in the context of a config object that

00:37:15,410 --> 00:37:18,260
provides these methods. The nice thing about this is

00:37:18,260 --> 00:37:21,400
that all of the configuration can go together. Things

00:37:21,400 --> 00:37:24,359
that need to have code associated with it -

00:37:24,359 --> 00:37:28,200
an event handler can be defined in here, alongside

00:37:28,200 --> 00:37:30,869
the other config that's there.

00:37:30,869 --> 00:37:33,420
Puma has similar support for this sort of RB

00:37:33,420 --> 00:37:35,530
file, which is really nice, and you can see

00:37:35,530 --> 00:37:38,559
all the on_worker_boot. So it has a forked mode,

00:37:38,559 --> 00:37:40,900
where it'll send off other child processes, so we're

00:37:40,900 --> 00:37:43,559
doing, here's an example of how they would wire

00:37:43,559 --> 00:37:45,829
the database back up.

00:37:45,829 --> 00:37:47,750
There is a little downside to this sort of

00:37:47,750 --> 00:37:51,069
configuration file loading in Ruby, though, that you gotta

00:37:51,069 --> 00:37:54,380
be aware of. And that's, if you are writing

00:37:54,380 --> 00:37:56,609
for gems to be able to wire into that

00:37:56,609 --> 00:37:58,750
as well. This is very clean for the app

00:37:58,750 --> 00:38:01,380
to write that RB file that gets loaded up.

00:38:01,380 --> 00:38:03,930
But if some third party wants to glom onto

00:38:03,930 --> 00:38:05,930
that, you want to make sure that your interfaces

00:38:05,930 --> 00:38:08,059
are nice for it.

00:38:08,059 --> 00:38:09,829
So this is what we actually end up doing

00:38:09,829 --> 00:38:12,109
in the case of Puma for New Relic, and

00:38:12,109 --> 00:38:14,420
you don't have to read all the details, but

00:38:14,420 --> 00:38:16,450
it's kind of ugly for us to be able

00:38:16,450 --> 00:38:18,809
to interact with that from the code rather than

00:38:18,809 --> 00:38:20,740
from that config file.

00:38:20,740 --> 00:38:23,940
And in particular, it relies on this :cli_config, which

00:38:23,940 --> 00:38:26,960
it is not actually always present, depending on the

00:38:26,960 --> 00:38:29,750
way that you start Puma. We're working with the

00:38:29,750 --> 00:38:31,869
Puma folks - we love Puma, it's awesome, and

00:38:31,869 --> 00:38:33,890
we wanna make this a little better, but, you

00:38:33,890 --> 00:38:36,079
know making sure that you provide a code based

00:38:36,079 --> 00:38:40,730
way of facing your config as well as the

00:38:40,730 --> 00:38:43,540
file based loading that people might commonly use is

00:38:43,540 --> 00:38:45,170
a really good idea if you're gonna write a

00:38:45,170 --> 00:38:49,770
gem that has a lot of functionality to it.

00:38:49,770 --> 00:38:52,609
So that's configuration. The bigger your gem gets, the

00:38:52,609 --> 00:38:54,130
more likely that you are to want to let

00:38:54,130 --> 00:38:56,160
people get in there and do things that you

00:38:56,160 --> 00:39:00,089
might not be expecting, and how you configure it.

00:39:00,089 --> 00:39:04,170
The last place that we'll go is documentation. So

00:39:04,170 --> 00:39:06,609
readmes.

00:39:06,609 --> 00:39:09,440
Most people will not get past the readme. So

00:39:09,440 --> 00:39:11,390
if you've got ways that you expect people to

00:39:11,390 --> 00:39:15,510
hook into your application, expect them to modify your

00:39:15,510 --> 00:39:18,520
gem, at least call out that that documentation exists

00:39:18,520 --> 00:39:20,089
from the readme. Maybe you don't need to be

00:39:20,089 --> 00:39:23,550
like Sinatra, where you go to the readme and

00:39:23,550 --> 00:39:25,819
then there's the table of contents, and then there's

00:39:25,819 --> 00:39:28,290
still the table of contents, and there's still the

00:39:28,290 --> 00:39:30,869
table of contents, and then all the stuff is

00:39:30,869 --> 00:39:32,290
in the readme page.

00:39:32,290 --> 00:39:34,970
That might be a little overboard. But make sure

00:39:34,970 --> 00:39:37,329
that the pertinent details, and the fact that you've

00:39:37,329 --> 00:39:40,210
thought about how people should extend your gem shows

00:39:40,210 --> 00:39:42,690
up there early, or people are gonna start looking

00:39:42,690 --> 00:39:45,040
at the code and digging in and monkey patching

00:39:45,040 --> 00:39:49,329
things that you don't expect.

00:39:49,329 --> 00:39:52,040
Sidekiq is a great example of this. There's a

00:39:52,040 --> 00:39:54,240
wiki out there. It's got a lot of articles

00:39:54,240 --> 00:39:56,069
and they're very specific, and you can see that

00:39:56,069 --> 00:39:57,770
it tells you about the internals, it tells you

00:39:57,770 --> 00:40:00,010
about the middlewares, it tells you all of those

00:40:00,010 --> 00:40:02,319
different pieces that you can customize about it. It's

00:40:02,319 --> 00:40:04,540
very accesible, and it made it very easy for

00:40:04,540 --> 00:40:09,770
us to work on instrumenting it from New Relic.

00:40:09,770 --> 00:40:11,880
Don't bury the things in your documentation that people

00:40:11,880 --> 00:40:14,270
care about. And here I'll give a counter example

00:40:14,270 --> 00:40:18,819
that we've just fixed.

00:40:18,819 --> 00:40:20,970
So our documentation used to look a lot like

00:40:20,970 --> 00:40:23,640
this. And it scrolls, and it scrolls.

00:40:23,640 --> 00:40:25,359
How do you know what class you're supposed to

00:40:25,359 --> 00:40:28,069
use? There's no real way for you to tell

00:40:28,069 --> 00:40:32,359
that as somebody external. We've thinned that down. Make

00:40:32,359 --> 00:40:34,030
the things that are important for people to get

00:40:34,030 --> 00:40:36,520
at the things that show up when they first

00:40:36,520 --> 00:40:37,690
go to it.

00:40:37,690 --> 00:40:38,910
And then they can read the code if they

00:40:38,910 --> 00:40:41,010
need to get into more details and do something

00:40:41,010 --> 00:40:43,250
more complicated.

00:40:43,250 --> 00:40:46,849
Also, the version of your gem is part of

00:40:46,849 --> 00:40:51,020
your documentation. Consider using semantic versioning to make that

00:40:51,020 --> 00:40:53,819
clear when things appear so you don't have to

00:40:53,819 --> 00:40:57,059
think about, was it zero thirty-seven or zero thirty-five

00:40:57,059 --> 00:41:00,290
where we added that hook? Semantic versioning makes that

00:41:00,290 --> 00:41:03,540
a lot easier to remember.

00:41:03,540 --> 00:41:05,059
So that's docs.

00:41:05,059 --> 00:41:07,480
We've covered a lot of material here. We've talked

00:41:07,480 --> 00:41:10,290
about how to pass things through, how to event

00:41:10,290 --> 00:41:13,559
things, how middleware can help you. The lifecycle of

00:41:13,559 --> 00:41:17,339
gems, names, config, docs. Hopefully you found something in

00:41:17,339 --> 00:41:19,900
here that'll help your gems get better, easier for

00:41:19,900 --> 00:41:21,869
people to work with, and save you and your

00:41:21,869 --> 00:41:22,829
clients pain.

00:41:22,829 --> 00:41:23,660

YouTube URL: https://www.youtube.com/watch?v=Q1mk_9__roI


