Title: Ruby Conf 2013 - Extreme Makeover: Rubygems Edition by AndrÃ© Arko
Publication date: 2020-01-27
Playlist: RubyConf 2013
Description: 
	Rubygems.org provides every Rubyist with an amazing service: all the libraries in the Ruby world. As amazing as that is, installing gems can be a time-consuming and even error-prone process. (Just ask the Travis guys.) In this talk, you'll learn about the recent dramatic changes in Rubygems and Bundler to improve speed and reliability by rewriting the Rubygems client/server architecture. I'll show how the new system caches more information, makes fewer requests, and takes less time to install gems. Finally, I'll cover how the changes allow worldwide mirrors of rubygems.org, improving things for Rubyists around the globe.

Help us caption & translate this video!

http://amara.org/v/FG4v/
Captions: 
	00:00:16,000 --> 00:00:20,000
ANDRE ARKO: So this is Extreme Makeover: Rubygems Edition.

00:00:20,050 --> 00:00:24,390
I'm basically gonna talk about what happened

00:00:24,390 --> 00:00:25,500
to Rubygems in the last year

00:00:25,500 --> 00:00:29,099
and what we're planning on doing in the near future.

00:00:29,099 --> 00:00:33,620
I am Andre Arko. I'm indirect on all of the internet things.

00:00:33,620 --> 00:00:37,730
I work at Cloud City Development, a mostly Rails,

00:00:37,730 --> 00:00:40,469
but general web development shop, where we build apps

00:00:40,469 --> 00:00:43,290
for people.

00:00:43,290 --> 00:00:46,340
So let's get started.

00:00:46,340 --> 00:00:49,960
Rubygems. Lots of stuff happened this year. It was

00:00:49,960 --> 00:00:56,960
a really eventful year for RubyGems. The infrastructure changed

00:00:57,079 --> 00:01:00,370
a lot, and - mostly in good ways. So

00:01:00,370 --> 00:01:03,190
the, the first kind of, stretching the definition of

00:01:03,190 --> 00:01:06,170
a year till last October. The first thing that

00:01:06,170 --> 00:01:12,490
happened was Bundler kind of DDoS'd Rubygems dot org.

00:01:12,490 --> 00:01:15,830
Sorry.

00:01:15,830 --> 00:01:18,790
Arguably my fault.

00:01:18,790 --> 00:01:21,810
We basically couldn't tell that it was happening until

00:01:21,810 --> 00:01:25,479
people slowly installed Bundler 1 point 1 and more

00:01:25,479 --> 00:01:27,320
and more and more of them installed Bundler 1

00:01:27,320 --> 00:01:29,950
point 1, and eventually it was enough people that

00:01:29,950 --> 00:01:34,369
Rubygems couldn't handle it anymore and it died.

00:01:34,369 --> 00:01:37,470
So the dependency API that Bundler was using turned

00:01:37,470 --> 00:01:40,740
out to be really CPU intensive compared to the

00:01:40,740 --> 00:01:45,590
like, not very CPU intensive delivering a file that

00:01:45,590 --> 00:01:48,310
was happening without the API.

00:01:48,310 --> 00:01:49,990
So I gave a talk at Gotham Ruby this

00:01:49,990 --> 00:01:52,180
year, actually, just a few months ago with a

00:01:52,180 --> 00:01:54,750
lot of detail about that particular situation and what

00:01:54,750 --> 00:01:56,570
happened and what we learned from it and what

00:01:56,570 --> 00:02:00,070
we did about it. It's online if you guys

00:02:00,070 --> 00:02:02,960
really care about that particular thing.

00:02:02,960 --> 00:02:06,049
The TL;DR is that we rebuilt the API as

00:02:06,049 --> 00:02:08,220
a Sinatra app. It's not hosted on Horoku, separate

00:02:08,220 --> 00:02:11,349
from Rubygems dot org, and we throw an unbelievable

00:02:11,349 --> 00:02:14,220
amount of CPU and database resources at it in

00:02:14,220 --> 00:02:18,280
comparison to like what we had before.

00:02:18,280 --> 00:02:22,989
The next relatively significant thing that happened was there

00:02:22,989 --> 00:02:25,020
was a security breach over at Rubygems dot org

00:02:25,020 --> 00:02:30,750
in January. Their gems have yml gem specs and

00:02:30,750 --> 00:02:37,430
Rails, at the time, provided a way to use

00:02:37,430 --> 00:02:43,670
yml to exploit against the running application. So someone

00:02:43,670 --> 00:02:47,300
uploaded a gem to Rubygems dot org that contained

00:02:47,300 --> 00:02:50,540
crafted, malicious yml and the server executed it and

00:02:50,540 --> 00:02:54,290
they got access to the server.

00:02:54,290 --> 00:02:56,440
Like, I think they paste binned a copy of

00:02:56,440 --> 00:03:01,659
the etsy passwords file. It was pretty bad.

00:03:01,659 --> 00:03:05,050
As a result of that, potentially any gem on

00:03:05,050 --> 00:03:07,180
Rubygems dot org could have been replaced with a

00:03:07,180 --> 00:03:09,120
gem that had a Trojan in it and we

00:03:09,120 --> 00:03:11,420
didn't really have a way to tell just from

00:03:11,420 --> 00:03:14,010
the server logs because it could have been tampered

00:03:14,010 --> 00:03:14,319
with.

00:03:14,319 --> 00:03:18,599
So the Rubygems dot org team mostly up in

00:03:18,599 --> 00:03:22,500
Phoenix kind of exhaustively compared every gem that we

00:03:22,500 --> 00:03:25,060
had to copies of those gems that had been

00:03:25,060 --> 00:03:28,819
taken by mirrors of Rubygems at other times before

00:03:28,819 --> 00:03:33,049
the exploit had happened. Happily it turned out that

00:03:33,049 --> 00:03:34,790
all of our gems were fine and no one

00:03:34,790 --> 00:03:39,860
was screwed. Yay.

00:03:39,860 --> 00:03:42,659
But we didn't really have a way to trust

00:03:42,659 --> 00:03:44,650
the box that Rubygems dot org had been hosted

00:03:44,650 --> 00:03:50,360
on again. Not too surprisingly. So as part of

00:03:50,360 --> 00:03:54,939
the process of rebuilding everything from scratch, we actually

00:03:54,939 --> 00:03:58,330
rebuilt everything on a new architecture that's more flexible.

00:03:58,330 --> 00:04:02,590
We're on EC2 now. We have redundant servers. We

00:04:02,590 --> 00:04:05,220
have maybe, possibly, hopefully fail-over if some of those

00:04:05,220 --> 00:04:10,730
servers stop working. It's all managed by chef recipes.

00:04:10,730 --> 00:04:13,299
Honestly I think it's way better than the set

00:04:13,299 --> 00:04:16,280
up that we had before. The chef recipes are

00:04:16,280 --> 00:04:19,759
open source. Anyone can contribute fixes or features to

00:04:19,759 --> 00:04:22,180
not - before you could contribute fixes and features

00:04:22,180 --> 00:04:24,160
to Rubygems dot org the Rails app. Now you

00:04:24,160 --> 00:04:26,470
can contribute fixes and features to the servers that

00:04:26,470 --> 00:04:28,600
Rubygems dot org runs on as well.

00:04:28,600 --> 00:04:30,960
The refill is on GitHub in the Rubygems org

00:04:30,960 --> 00:04:34,810
named Rubygems dash AWS.

00:04:34,810 --> 00:04:37,740
And that's actually pretty cool. Like I'm - as,

00:04:37,740 --> 00:04:39,600
as frustrating as this was at the time, I'm

00:04:39,600 --> 00:04:41,210
really happy with how things turned out and how

00:04:41,210 --> 00:04:44,180
things are better now.

00:04:44,180 --> 00:04:47,830
Another issue that plagued a lot of people was

00:04:47,830 --> 00:04:52,370
Travis network issues connecting Rubygems dot org. Like, I

00:04:52,370 --> 00:04:53,840
don't know if all of you guys know what

00:04:53,840 --> 00:04:57,380
Travis is. It's an automated continuous integration system. Lots

00:04:57,380 --> 00:05:00,290
of opensource projects use it because they will provide

00:05:00,290 --> 00:05:03,490
server-side continuous integration testing for free, for all opensource

00:05:03,490 --> 00:05:05,030
projects.

00:05:05,030 --> 00:05:08,419
Bundler uses Travis super extensively to test on every

00:05:08,419 --> 00:05:10,600
Ruby version and every Rubygems version to make sure

00:05:10,600 --> 00:05:15,070
it still works.

00:05:15,070 --> 00:05:19,120
For a few months, it was basically a crapshoot,

00:05:19,120 --> 00:05:21,910
whether you could actually install gems on Travis. You

00:05:21,910 --> 00:05:24,970
could try, like, ten times, and sometimes eight of

00:05:24,970 --> 00:05:26,780
those tries would work and sometimes one of those

00:05:26,780 --> 00:05:29,910
tries would work, and it really, really frustrating. And

00:05:29,910 --> 00:05:32,380
basically no one knew what the problem was because

00:05:32,380 --> 00:05:37,320
everyone said it was someone else's fault.

00:05:37,320 --> 00:05:40,500
There was a, I don't know, kind of on

00:05:40,500 --> 00:05:43,699
and off investigation. It turned out that the problem

00:05:43,699 --> 00:05:49,000
was actually DNS. The Travis virtual machines had hard-coded

00:05:49,000 --> 00:05:51,009
DNS servers that were on the opposite side of

00:05:51,009 --> 00:05:53,080
the country from the data center where the Travis

00:05:53,080 --> 00:05:57,759
VMs actually ran.

00:05:57,759 --> 00:06:02,569
That meant that whenever Rubygems tried, or actually, so,

00:06:02,569 --> 00:06:06,550
Rubygems posts gems on Amazon's S3 service, and then

00:06:06,550 --> 00:06:09,509
sends you to Cloud Front, which theoretically gives you

00:06:09,509 --> 00:06:12,460
a server that's geographically close to where you are.

00:06:12,460 --> 00:06:14,470
The problem is, it uses your GNS servers to

00:06:14,470 --> 00:06:18,470
know what geographically close to you is. That meant

00:06:18,470 --> 00:06:21,400
that the Travis servers looked to Cloud Front like

00:06:21,400 --> 00:06:23,509
they were on the other side of the country

00:06:23,509 --> 00:06:25,910
and they were getting told to use Cloud Front

00:06:25,910 --> 00:06:28,410
servers that were about as far apart as is

00:06:28,410 --> 00:06:30,340
possible to be whilst still being inside the United

00:06:30,340 --> 00:06:32,710
States.

00:06:32,710 --> 00:06:37,440
That was not optimal. It - once we actually

00:06:37,440 --> 00:06:41,139
figured out that that was the problem, Travis was

00:06:41,139 --> 00:06:45,069
able to sort of force their DNS servers back

00:06:45,069 --> 00:06:46,759
to ones that were actually inside the data center

00:06:46,759 --> 00:06:50,210
where their, their VMs were hosted. And that basically

00:06:50,210 --> 00:06:53,090
just went away. It's not perfect - there's still,

00:06:53,090 --> 00:06:55,979
like, it's still like a very heavily contended connection

00:06:55,979 --> 00:06:58,710
to Rubygems. But because there's, like, so many jobs

00:06:58,710 --> 00:07:01,729
running simultaneously. But it's way, way, way, way better.

00:07:01,729 --> 00:07:03,030
It's now like nine or ten times out of

00:07:03,030 --> 00:07:08,060
ten. It succeeds.

00:07:08,060 --> 00:07:14,569
The other equally frustrating and equally intermittant problem that

00:07:14,569 --> 00:07:19,360
happened to Rubygems this year kind of semi-concurrently with

00:07:19,360 --> 00:07:22,050
the Travis issues, have been continuing after that was

00:07:22,050 --> 00:07:23,990
SSL issues.

00:07:23,990 --> 00:07:26,169
If you have done a lot of gem installing,

00:07:26,169 --> 00:07:29,020
you have probably seen SSL errors and been, like,

00:07:29,020 --> 00:07:31,509
I don't know why this happens. And sometimes they

00:07:31,509 --> 00:07:33,319
just go away if you try again, which is,

00:07:33,319 --> 00:07:37,720
like, the worst possible kind of bug.

00:07:37,720 --> 00:07:41,460
So it turned out to actually be two different

00:07:41,460 --> 00:07:45,340
bugs. There was one issue that was kind of

00:07:45,340 --> 00:07:50,720
a combination of different certificate problems. Some, like, so,

00:07:50,720 --> 00:07:53,970
some Linux machines don't ship with a new enough

00:07:53,970 --> 00:07:57,340
certificate to verify the Rubygems dot org certificate, and

00:07:57,340 --> 00:08:00,879
so we had to add the appropriate certificates to

00:08:00,879 --> 00:08:03,139
Rubygems and Bundler, so that on machines that didn't

00:08:03,139 --> 00:08:05,870
have it we can verify that Rubygems dot org

00:08:05,870 --> 00:08:09,319
was the machine that we thought it was.

00:08:09,319 --> 00:08:12,419
There was another certificate issue in that some S3

00:08:12,419 --> 00:08:16,419
end points started using a newer SSL certificate, which

00:08:16,419 --> 00:08:19,340
meant that what we'd done to fix that was

00:08:19,340 --> 00:08:22,120
now semi-invalid, but it was kind of random which

00:08:22,120 --> 00:08:26,000
S3 input you got, so it only sometimes failed.

00:08:26,000 --> 00:08:28,389
So we also updated the certificates again to like

00:08:28,389 --> 00:08:33,329
fix that issue. And then, surper frustratingly, at the

00:08:33,329 --> 00:08:37,330
same time, there was a different SSL issue, where

00:08:37,330 --> 00:08:42,820
if it, it turned out, eventually to be that,

00:08:42,820 --> 00:08:46,730
if you were on a laggy connection, Rubygems dot

00:08:46,730 --> 00:08:49,550
org would just stop responding to your requests to

00:08:49,550 --> 00:08:51,680
open a connection if it took a little bit

00:08:51,680 --> 00:08:52,740
too long.

00:08:52,740 --> 00:08:54,550
The timeout was very short, just like a few

00:08:54,550 --> 00:08:59,260
seconds. And so the SSL, like, what you would

00:08:59,260 --> 00:09:01,310
see if the servers that note this took too

00:09:01,310 --> 00:09:05,339
long kill it, was an SSL error. Because the

00:09:05,339 --> 00:09:09,850
SSL connection had never been finished setting up.

00:09:09,850 --> 00:09:12,800
So we increased the time out, and that also

00:09:12,800 --> 00:09:15,000
has basically made that problem go away. Obviously it

00:09:15,000 --> 00:09:17,540
can still happen if you're on an incredibly laggy

00:09:17,540 --> 00:09:19,600
connection, but we set it to something more reasonable

00:09:19,600 --> 00:09:23,120
that means almost everyone succeeds almost all the time

00:09:23,120 --> 00:09:30,120
now. Which is great. Like it's so much better.

00:09:30,480 --> 00:09:34,000
So that's kind of, like, a review of the

00:09:34,000 --> 00:09:37,540
significant things that happened. Now I'd like to talk

00:09:37,540 --> 00:09:41,630
about how Rubygems works and how I am working

00:09:41,630 --> 00:09:44,779
on changing it to work differently. So, right. How

00:09:44,779 --> 00:09:46,589
it works today.

00:09:46,589 --> 00:09:50,000
Today, both Bundler and Rubygems download gem information from

00:09:50,000 --> 00:09:54,600
Rubygems dot org. There's basically two ways to get

00:09:54,600 --> 00:09:57,830
information about gems. You can either ask Rubygems dot

00:09:57,830 --> 00:09:59,620
org for the list of all the gems that

00:09:59,620 --> 00:10:03,860
exist, or you can ask the Bundler API for

00:10:03,860 --> 00:10:09,610
just a, like, named list of gems.

00:10:09,610 --> 00:10:12,990
Honestly neither one of these is that great. But

00:10:12,990 --> 00:10:16,829
they both work. So we keep using them. When

00:10:16,829 --> 00:10:20,459
you run gem install Rubygems downloads the list of

00:10:20,459 --> 00:10:22,660
all of the gems, and then looks for the

00:10:22,660 --> 00:10:25,470
newest version of whatever gem you asked for to

00:10:25,470 --> 00:10:28,500
find out what it is. When you call Bundle

00:10:28,500 --> 00:10:32,519
install, it will first try to use the API

00:10:32,519 --> 00:10:33,980
and only ask about the gems that are in

00:10:33,980 --> 00:10:36,910
your gem file, and then the gems that those

00:10:36,910 --> 00:10:38,890
gems need and the gems that those gems need,

00:10:38,890 --> 00:10:40,430
and then the gems that those-

00:10:40,430 --> 00:10:46,200
So it can mean a lot of requests. Both

00:10:46,200 --> 00:10:50,420
of those options, like, are pretty memory intensive, because

00:10:50,420 --> 00:10:52,230
you end up with, like, if you download the

00:10:52,230 --> 00:10:53,820
whole list, you end up with a list of

00:10:53,820 --> 00:10:55,820
every gem that exists, even if you didn't actually

00:10:55,820 --> 00:10:59,170
care about any of those gems - just the

00:10:59,170 --> 00:11:00,959
one.

00:11:00,959 --> 00:11:05,790
So with a fast connection it's not that bad.

00:11:05,790 --> 00:11:07,660
You can download the whole list of every gem

00:11:07,660 --> 00:11:10,279
pretty quickly. You can make lots of requests to

00:11:10,279 --> 00:11:14,610
the Bundler API pretty quickly. And either way it's

00:11:14,610 --> 00:11:20,420
tolerable. It's not great, but everyone's pretty much OK

00:11:20,420 --> 00:11:21,920
with it.

00:11:21,920 --> 00:11:25,050
The problem is, Rubygems dot org, and the Bundler

00:11:25,050 --> 00:11:30,320
API both live in AWS US East zone, which

00:11:30,320 --> 00:11:35,620
is in Virginia. That means that if you're not

00:11:35,620 --> 00:11:38,010
in the United States, you don't have a fast

00:11:38,010 --> 00:11:41,279
connection. The end.

00:11:41,279 --> 00:11:44,730
If you're, like, in Europe or Asia or Australia,

00:11:44,730 --> 00:11:50,790
god forbid, it's gonna take a really long time.

00:11:50,790 --> 00:11:53,420
It, it's not as bad if you're just downloading

00:11:53,420 --> 00:11:56,589
the whole list all at once, but then you

00:11:56,589 --> 00:11:59,540
have the, like, this is it, it's like multi-megabyte

00:11:59,540 --> 00:12:04,190
file, and then you have to unmarshal- It's, it's

00:12:04,190 --> 00:12:08,370
a big file with arrays of gems and then

00:12:08,370 --> 00:12:13,269
it's marshalled into the Ruby marshal binary format.

00:12:13,269 --> 00:12:15,019
And so you have to unmarshal the entire list

00:12:15,019 --> 00:12:16,350
and then look through that list for the gem

00:12:16,350 --> 00:12:18,209
that you actually cared about, and that can use

00:12:18,209 --> 00:12:20,450
up way more memory than it needs to, and

00:12:20,450 --> 00:12:22,329
way more bandwidth than it needs to. And if

00:12:22,329 --> 00:12:25,550
you're using Bundler, you've probably just made fifty round

00:12:25,550 --> 00:12:27,930
trip requests to Virginia, and if you're in Australia,

00:12:27,930 --> 00:12:34,930
that took forever. So definitely could be better. This

00:12:35,690 --> 00:12:39,269
is not the fastest situation.

00:12:39,269 --> 00:12:44,269
So basically after setting up the new Bundler API

00:12:44,269 --> 00:12:49,430
system earlier this year, it took us probably a

00:12:49,430 --> 00:12:52,639
month to get the replacement up after everything went

00:12:52,639 --> 00:12:55,690
down in October. And then kind of after that,

00:12:55,690 --> 00:12:59,670
I spent, I don't know, several, several conferences worth

00:12:59,670 --> 00:13:03,209
of time talking with the Rubygems dot org team

00:13:03,209 --> 00:13:05,899
members, the Rubygems team members and the Bundler team

00:13:05,899 --> 00:13:08,360
members. And we kind of, like, all pooled our

00:13:08,360 --> 00:13:11,720
ideas for how to make this less bad. And

00:13:11,720 --> 00:13:14,639
I kind of aggregated all of them together and

00:13:14,639 --> 00:13:18,649
sanity checked the overall ideas with everyone, and we

00:13:18,649 --> 00:13:21,410
have a plan.

00:13:21,410 --> 00:13:24,329
It's relatively straightforward, but it's a pretty big departure

00:13:24,329 --> 00:13:28,190
from how we've been doing things up until now.

00:13:28,190 --> 00:13:30,769
So instead of using Marshal to raise, we just

00:13:30,769 --> 00:13:33,139
have a plain text file that lists the gem

00:13:33,139 --> 00:13:35,880
names and the versions of the gems. You can

00:13:35,880 --> 00:13:38,790
parse plain text files with, like, split - you

00:13:38,790 --> 00:13:41,910
don't have the dangers of marshal or yml or

00:13:41,910 --> 00:13:45,699
have to worry about the file changing from the

00:13:45,699 --> 00:13:47,720
beginning to end just because you added a single

00:13:47,720 --> 00:13:50,510
thing to the end of the list.

00:13:50,510 --> 00:13:54,430
Those are all benefits. It's really easy to cache

00:13:54,430 --> 00:13:57,560
plain text files. It's really easy to, you know,

00:13:57,560 --> 00:14:00,209
like, copy them around and look at them and

00:14:00,209 --> 00:14:04,740
it's much nicer in general, I think. Happily, we

00:14:04,740 --> 00:14:06,620
figured out a way to use plain text files

00:14:06,620 --> 00:14:11,550
that is very, very, like, within 5% as fast

00:14:11,550 --> 00:14:17,579
as the current marshal format. So, pretty good.

00:14:17,579 --> 00:14:21,790
So once we have that plain text format, we

00:14:21,790 --> 00:14:24,670
can make some improvements. We can cache those files

00:14:24,670 --> 00:14:27,680
on the client because it's broken down into individual

00:14:27,680 --> 00:14:32,380
pieces, you know, like, each, each gem has a

00:14:32,380 --> 00:14:34,470
file that lists all of the versions of that

00:14:34,470 --> 00:14:36,839
gem and all of the gems that those versions

00:14:36,839 --> 00:14:39,579
depend on. And then there's like a master list

00:14:39,579 --> 00:14:43,209
that tells which gems, like, tells you about all

00:14:43,209 --> 00:14:46,139
of the gems that exist.

00:14:46,139 --> 00:14:50,019
So because those files are separate and small, we

00:14:50,019 --> 00:14:52,589
can say, hey, I'll just keep these here on

00:14:52,589 --> 00:14:54,660
my computer and I won't need to redownload them

00:14:54,660 --> 00:14:58,290
every time, because right now both Rubygems and Bundler

00:14:58,290 --> 00:15:01,019
redownload the entire list of gems from scratch because

00:15:01,019 --> 00:15:04,410
it might have updated. And we had no good

00:15:04,410 --> 00:15:07,870
way to incrementally add to that list with the

00:15:07,870 --> 00:15:13,089
format that we already had.

00:15:13,089 --> 00:15:15,910
That also reduce, like, so that, the, that obviously

00:15:15,910 --> 00:15:17,980
reduces the size of the data that gets transferred.

00:15:17,980 --> 00:15:20,220
But that also reduces, by a lot, the number

00:15:20,220 --> 00:15:23,589
of requests that have to be made, because you

00:15:23,589 --> 00:15:26,920
can do things like check to see if new

00:15:26,920 --> 00:15:28,720
gems have been pushed since the last time you

00:15:28,720 --> 00:15:30,240
ran, and if you get the response that's like

00:15:30,240 --> 00:15:32,170
nope, no gems pushed, then you don't even have

00:15:32,170 --> 00:15:34,199
to check to see if any of the individual

00:15:34,199 --> 00:15:35,820
gems were updated. You just know that they're all

00:15:35,820 --> 00:15:38,300
up to date.

00:15:38,300 --> 00:15:44,889
So less response data, and less requests means faster

00:15:44,889 --> 00:15:48,240
for everyone, but it will definitely be significantly, noticeably,

00:15:48,240 --> 00:15:50,589
like, it will be noticeably faster in the US,

00:15:50,589 --> 00:15:53,040
but it will be incredibly faster outside of the

00:15:53,040 --> 00:15:55,790
US.

00:15:55,790 --> 00:15:58,300
Right along those lines to speed things up even

00:15:58,300 --> 00:16:01,880
more, we're going to add CDNs in front of

00:16:01,880 --> 00:16:05,480
basically everything. Right now the way that the architecture

00:16:05,480 --> 00:16:08,889
works is all requests have to go to AWS

00:16:08,889 --> 00:16:13,170
in Virginia to find out where to get the

00:16:13,170 --> 00:16:17,560
data from. And that works for gems, it works

00:16:17,560 --> 00:16:21,130
for gem specs, it works for the gem index

00:16:21,130 --> 00:16:26,070
file itself. So everything will be CDN.

00:16:26,070 --> 00:16:32,380
I, the, the CDN company Fastly volunteered to both

00:16:32,380 --> 00:16:38,009
provide engineering resources and an account. And so we're

00:16:38,009 --> 00:16:40,430
going to have the gem specs, the gems, and

00:16:40,430 --> 00:16:43,089
the gem index files, which right now are not

00:16:43,089 --> 00:16:46,759
cached in a CDN at all, available just from

00:16:46,759 --> 00:16:48,290
Fastly. Which means that when you make a request

00:16:48,290 --> 00:16:52,380
from Australia, assuming that the file hasn't changed, Fastly

00:16:52,380 --> 00:16:53,529
will just give it to you from a server

00:16:53,529 --> 00:16:55,509
in Australia. You won't have to - like, there

00:16:55,509 --> 00:16:58,399
will be no requests that happen to the US

00:16:58,399 --> 00:17:01,329
until the Rubygems server tells Fastly, hey, there's a

00:17:01,329 --> 00:17:04,839
new version of this file.

00:17:04,839 --> 00:17:08,130
That should remove all requests that have to span

00:17:08,130 --> 00:17:10,870
the world to install gems, and I'm hoping that

00:17:10,870 --> 00:17:13,660
that will make all of the international Rubyists super

00:17:13,660 --> 00:17:16,329
happy.

00:17:16,329 --> 00:17:20,110
The final part of the improvement plan is to

00:17:20,110 --> 00:17:24,039
provide easy to install and use local mirrors of

00:17:24,039 --> 00:17:28,910
Rubygems. Right now this is basically a nightmare. It's

00:17:28,910 --> 00:17:32,650
super hard to do and it's not - a

00:17:32,650 --> 00:17:34,780
combination of the way that it works right now

00:17:34,780 --> 00:17:37,630
and no one having spent a huge amount of

00:17:37,630 --> 00:17:40,210
time on it means that the options basically boil

00:17:40,210 --> 00:17:42,500
down to, hey you should just put a varnish

00:17:42,500 --> 00:17:45,590
or squid cache in front of Rubygems. And hope

00:17:45,590 --> 00:17:48,960
that that does what you want.

00:17:48,960 --> 00:17:52,730
So we are like as part of this plan,

00:17:52,730 --> 00:17:55,360
we're building out the app that currently provides the

00:17:55,360 --> 00:17:58,610
Bundler API to also act as a local mirror

00:17:58,610 --> 00:18:01,299
of Rubygems. So you'll be able to spin up

00:18:01,299 --> 00:18:03,860
a copy of that inside your data center, near

00:18:03,860 --> 00:18:07,700
your machines, and, like, we're working with the Travis

00:18:07,700 --> 00:18:09,460
guys to get this set up inside the Travis

00:18:09,460 --> 00:18:14,070
data center. Various other companies that run enough boxes

00:18:14,070 --> 00:18:16,789
that install gems that they're, like, you know, if

00:18:16,789 --> 00:18:20,900
you're, if you either care about this performance-wise, because

00:18:20,900 --> 00:18:22,289
you have a lot of machines doing a lot

00:18:22,289 --> 00:18:24,210
of gem installs, or you care about this from

00:18:24,210 --> 00:18:26,690
like a paranoia perspective, where you want to have

00:18:26,690 --> 00:18:28,880
copies of all of your gems yourself, inside your

00:18:28,880 --> 00:18:31,080
data center, even if Rubygems dot org is gone

00:18:31,080 --> 00:18:36,130
- this will allow you to do that.

00:18:36,130 --> 00:18:40,030
And it, we're hoping to - although it's not

00:18:40,030 --> 00:18:43,120
done yet - have scripts that will let you

00:18:43,120 --> 00:18:45,620
just like run this on a, an out of

00:18:45,620 --> 00:18:48,120
the box Ubuntu VM or run this on, you

00:18:48,120 --> 00:18:54,080
know, like, whatever internal setup you have super easily.

00:18:54,080 --> 00:18:57,860
So after I hashed out all of this plan

00:18:57,860 --> 00:18:59,490
and wrote it down and said, this is what

00:18:59,490 --> 00:19:01,240
I'm gonna spend my free time working on for

00:19:01,240 --> 00:19:04,549
the next whatever, six months or a year, ten

00:19:04,549 --> 00:19:08,260
years or however long it takes to do this.

00:19:08,260 --> 00:19:11,720
Ruby Central said hey, that actually sounds like a

00:19:11,720 --> 00:19:14,520
really great idea. And we would like to give

00:19:14,520 --> 00:19:15,950
a grant to work on that.

00:19:15,950 --> 00:19:18,640
So, I got a grant to work on that.

00:19:18,640 --> 00:19:21,890
For the last few months I have been working

00:19:21,890 --> 00:19:24,470
one or two days a week, paid by Rubygems

00:19:24,470 --> 00:19:31,470
to implement that plan, which is pretty awesome. Yeah.

00:19:37,919 --> 00:19:43,580
So I'm really excited about that. Like it's super

00:19:43,580 --> 00:19:45,919
great that Ruby Central thought that this was worth

00:19:45,919 --> 00:19:48,360
doing, and I am really happy to have been

00:19:48,360 --> 00:19:50,860
working on it in that time. I just wanna

00:19:50,860 --> 00:19:53,330
let you guys know what we've been able to

00:19:53,330 --> 00:19:57,150
do so far and kind of where we're at.

00:19:57,150 --> 00:20:01,370
So there had been like a couple of different

00:20:01,370 --> 00:20:04,340
stabs at a new index format by various Rubygems

00:20:04,340 --> 00:20:06,940
team members. But nothing that was like super solid

00:20:06,940 --> 00:20:10,210
or that was actually getting used. I spent the

00:20:10,210 --> 00:20:13,570
first, probably, month or so working on the index

00:20:13,570 --> 00:20:16,440
format and making sure that it worked and contained

00:20:16,440 --> 00:20:19,190
all the information that we needed, and it was,

00:20:19,190 --> 00:20:22,760
you know, like usable across both Rubygems and Bundler

00:20:22,760 --> 00:20:24,780
and could be created on the server and all

00:20:24,780 --> 00:20:27,559
of that stuff.

00:20:27,559 --> 00:20:30,659
And then started implementing it. So like right now,

00:20:30,659 --> 00:20:33,789
the Bundler API Sinatra app can actually serve the

00:20:33,789 --> 00:20:37,260
new plain text index formats, like, and it works.

00:20:37,260 --> 00:20:40,360
It's really great. There's - I, I have a

00:20:40,360 --> 00:20:43,909
prototype implementation in Bundler that lets Bundler install gem

00:20:43,909 --> 00:20:47,390
files using only the new index format, from only

00:20:47,390 --> 00:20:49,610
the, you know like, from a server that only

00:20:49,610 --> 00:20:55,270
speaks the new index format, which is pretty sweet.

00:20:55,270 --> 00:20:58,059
Along with working on this, we, you know, kind

00:20:58,059 --> 00:21:01,299
of like, in that same time period, I worked

00:21:01,299 --> 00:21:04,110
with the Rubygems dot org team on the SSL

00:21:04,110 --> 00:21:06,260
issues that I'd previously mentioned, to figure out what

00:21:06,260 --> 00:21:09,500
was going on and get those resolved. We've also

00:21:09,500 --> 00:21:12,280
worked with Fastly and the Rubygems dot org team

00:21:12,280 --> 00:21:15,700
to actually get - it's not the entire plan,

00:21:15,700 --> 00:21:18,059
but right now gems engine specs are actually hosted

00:21:18,059 --> 00:21:22,650
by Fastly, and we've asked international Rubyists to benchmark

00:21:22,650 --> 00:21:25,659
this change. And it's been a huge improvement.

00:21:25,659 --> 00:21:27,720
So we're part of the way there on the

00:21:27,720 --> 00:21:32,200
CDN thing, which is really great.

00:21:32,200 --> 00:21:34,870
So having made it that far, here's what we

00:21:34,870 --> 00:21:36,539
have left to do.

00:21:36,539 --> 00:21:39,320
Rubygems dot org is going to but does not

00:21:39,320 --> 00:21:42,870
yet serve the new index format. Rubygems itself is

00:21:42,870 --> 00:21:44,990
going to use but does not yet use the

00:21:44,990 --> 00:21:48,090
new index format. And we're going to get all

00:21:48,090 --> 00:21:51,150
of those files pushed out into Fastly so that

00:21:51,150 --> 00:21:53,990
no requests have to go to the Rubygems server

00:21:53,990 --> 00:22:00,990
itself unless there's a cache miss on the CDN.

00:22:01,480 --> 00:22:07,580
So. At that point, once we have done that,

00:22:07,580 --> 00:22:12,169
everyone installing gems, everyone using Bundler, everyone using Rubygems,

00:22:12,169 --> 00:22:13,450
will be able to benefit from all of those

00:22:13,450 --> 00:22:20,450
changes. That's pretty exciting, actually. Basically, like, at that

00:22:23,039 --> 00:22:28,950
point, no matter which, like, gem installing client you're

00:22:28,950 --> 00:22:31,850
using, or how you have, you know like, the

00:22:31,850 --> 00:22:33,840
server set up, you will be able to use

00:22:33,840 --> 00:22:36,830
the new index format, get your data from Fastly,

00:22:36,830 --> 00:22:41,679
and make as few requests as possible and just

00:22:41,679 --> 00:22:46,100
get to the business of actually installing gems.

00:22:46,100 --> 00:22:50,750
So let's talk about what that means for the

00:22:50,750 --> 00:22:52,250
future.

00:22:52,250 --> 00:22:56,800
I am really excited about this plan. Like, I

00:22:56,800 --> 00:23:01,789
- even in my prototype rudamentary testing is way

00:23:01,789 --> 00:23:06,220
faster. I am super, super grateful that the Rubygems

00:23:06,220 --> 00:23:08,470
team and the Rubygems dot org team and the

00:23:08,470 --> 00:23:11,549
Bundler team have all, like, been helpful and supportive

00:23:11,549 --> 00:23:14,909
as I've been working on this. Ruby Central has

00:23:14,909 --> 00:23:17,100
obviously been paying for some of this work, which

00:23:17,100 --> 00:23:19,929
is super awesome.

00:23:19,929 --> 00:23:24,980
Kind of more immediately, in the future, there is

00:23:24,980 --> 00:23:29,350
a pre-release version of Bundler right now that doesn't

00:23:29,350 --> 00:23:34,220
include the new index format, yet. Instead it includes

00:23:34,220 --> 00:23:39,140
a parallel installation, which is another huge speed increase

00:23:39,140 --> 00:23:42,850
that we've been working on. If you install a

00:23:42,850 --> 00:23:45,210
pre-release version of Bundler, and then call Bundler install

00:23:45,210 --> 00:23:47,940
with dash j and then a number, it will

00:23:47,940 --> 00:23:51,340
spin up that many processes or threads to install

00:23:51,340 --> 00:23:52,440
your gems.

00:23:52,440 --> 00:23:54,860
If you have, like, four or eight cores, this

00:23:54,860 --> 00:23:57,240
can make a really significant difference in how fast

00:23:57,240 --> 00:24:02,409
your entire gem file gets installed. Horoku and Travis

00:24:02,409 --> 00:24:06,799
are both testing this change and will implement it,

00:24:06,799 --> 00:24:10,090
like, system-wide once the release is final.

00:24:10,090 --> 00:24:14,179
That should make both deploys and CI runs noticeably

00:24:14,179 --> 00:24:18,730
faster, which will be pretty great.

00:24:18,730 --> 00:24:20,150
As soon as this version is out as a

00:24:20,150 --> 00:24:24,720
final release, I'm going to move into the pre-release

00:24:24,720 --> 00:24:26,590
cycle for the version of Bundler with the new

00:24:26,590 --> 00:24:30,559
index format. It's, it's almost baked enough to be

00:24:30,559 --> 00:24:34,059
a pre-release, and I'm kind of like parallel-y splitting

00:24:34,059 --> 00:24:36,460
my time between getting the work that we've already

00:24:36,460 --> 00:24:40,429
done out and working on the new stuff.

00:24:40,429 --> 00:24:42,809
Once these release - like once this release is

00:24:42,809 --> 00:24:47,110
out completely I will ask everyone to try out

00:24:47,110 --> 00:24:50,690
the new index version of Bundler, and probably will

00:24:50,690 --> 00:24:52,770
have to fix whatever has gone wrong that we

00:24:52,770 --> 00:24:59,440
didn't notice. But it's like real soon now, is

00:24:59,440 --> 00:25:04,070
basically the answer. That said, there is a lot

00:25:04,070 --> 00:25:05,799
of work left to do.

00:25:05,799 --> 00:25:11,779
Like, obviously, like, there's ongoing Rubygems and Bundler maintenance

00:25:11,779 --> 00:25:15,020
as Ruby moves forward and as Rubygems moves forward.

00:25:15,020 --> 00:25:16,740
We have to like keep all of them in

00:25:16,740 --> 00:25:21,529
sync and working together. So there's ongoing compatibility work.

00:25:21,529 --> 00:25:25,029
There's working on making Bundler faster. There's working on

00:25:25,029 --> 00:25:28,730
making all of these things work together to be

00:25:28,730 --> 00:25:32,860
an awesome new system like we've planned. Even with

00:25:32,860 --> 00:25:35,000
the Ruby Central grant, I'm still only able to

00:25:35,000 --> 00:25:38,100
work on this like two days a week.

00:25:38,100 --> 00:25:42,029
The volunteer teams that work on Rubygems and Bundler

00:25:42,029 --> 00:25:44,350
and Rubygems dot org have been super helpful this

00:25:44,350 --> 00:25:49,450
entire time, and we could totally use more help.

00:25:49,450 --> 00:25:52,429
If any of you are interested and able to

00:25:52,429 --> 00:25:55,120
help us out, definitely hit me up. I will

00:25:55,120 --> 00:25:59,460
pull you into the next generation Bundler group and

00:25:59,460 --> 00:26:02,200
we can try and get things worked out so

00:26:02,200 --> 00:26:04,630
that it happens even faster.

00:26:04,630 --> 00:26:07,419

YouTube URL: https://www.youtube.com/watch?v=-kyhz_VZMMM


