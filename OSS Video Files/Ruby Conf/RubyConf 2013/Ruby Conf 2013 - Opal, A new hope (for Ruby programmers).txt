Title: Ruby Conf 2013 - Opal, A new hope (for Ruby programmers)
Publication date: 2020-01-27
Playlist: RubyConf 2013
Description: 
	By Forrest Chang

A short time ago, in an internet not far away ...

It is a period of Javascript revolution. Rebel Ruby coders, striking 
from an obscure repository, have won significant victories against 
evil Javascript Empire.

During the battle, Rebel Ruby coders have managed to duplicate the 
Empire's ultimate weapon, the use of the same language on both server and
client sides, but this time with a language with enough meta programming 
power to make the most elegant DSLs on the planet.

Pursued by myriad Javascript options, the Rebel Coders race home to 
their repositories, custodian of the code that can save their people and 
restore freedom to Ruby Coders everywhere. 
---

Do you have mixed feelings about the Javascript Revolution? It is a 
truly exciting time with many options and opportunities. 
Unfortunately, the language of this revolution is Javascript.

"Javascript is the path to the dark side. Javascript leads to anger. Anger leads to hate. Hate leads to suffering." 
- Yoda, if he were a coder

With all this Javascript goodness, what's a Ruby programmer to do? One 
word - Opal. Opal is a source to source ruby to javascript compiler, 
corelib and a runtime implementation that currently passes 1716 
rubyspecs w/a reachable goal of passing them all.

You might be thinking, yet another language that compiles down to 
Javascript. Why should you as a Ruby Coder board care?

Matz once wrote: 
"For me the purpose of life is partly to have joy. Programmers often feel joy when they can concentrate on the creative side of programming, So Ruby is designed to make programmers happy."

As another Ruby, Opal is designed to make programmer's happy

Here's the top 8 reasons why Opal will make you, the Ruby programmer, happy 
1. It's just Ruby, and a viable one 
2. Greenspun's 10th Rule, Opal Edition 
3. Solves things the Ruby way, making the programmer happy 
4. Frameworks, we don't need no stinking frameworks (but we have some) 
5. Tools you already know and love 
6. Easy integration with Ruby web frameworks 
7. Awesome In Browser tools 
8. New possibilities

This talk will go over those 8 reasons and more. There will be live code demonstrations.

Opal, this might just be the droid you're looking for.

You'll laugh, you'll cry, you'll kiss Javascript goodbye. Coming a computer near you.

Help us caption & translate this video!

http://amara.org/v/FG40/
Captions: 
	00:00:16,500 --> 00:00:17,800
FORREST CHANG: All right. You're coming in here.

00:00:17,800 --> 00:00:22,220
OK, so I'm Forrest Chang. This is Opal - A New Hope.

00:00:22,220 --> 00:00:25,640
This presentation has been rated R for Ruby. I

00:00:25,640 --> 00:00:29,390
want to call out that, for optimum viewing experience,

00:00:29,390 --> 00:00:30,699
please wait until the text hits the middle of

00:00:30,699 --> 00:00:32,850
the screen before you read. This will make sense

00:00:32,850 --> 00:00:39,850
when you see it. All right.

00:02:44,700 --> 00:02:47,700
All right, so. Thank you.

00:02:53,200 --> 00:02:56,540
So, quick show of hands. Who works with web?

00:02:59,990 --> 00:03:05,010
About eighty percent there. Who codes in Ruby? Surprisingly

00:03:05,010 --> 00:03:08,520
still only eighty percent.

00:03:08,520 --> 00:03:13,959
Who has to work with JavaScript? Seventy percent there.

00:03:13,959 --> 00:03:18,459
Of you guys, who likes Ruby better?

00:03:18,459 --> 00:03:21,680
More than the last slide, amazingly. All right, so

00:03:21,680 --> 00:03:24,980
you are my target audience. But everyone else is

00:03:24,980 --> 00:03:25,459
welcome.

00:03:25,459 --> 00:03:27,790
So, for the crawling text. It is a time

00:03:27,790 --> 00:03:32,160
of JavaScript Revolution, right. JavaScript is everywhere. It's on

00:03:32,160 --> 00:03:34,340
desktops, it's on the mobile browsers. We have it

00:03:34,340 --> 00:03:38,690
in the backend now. So performance, what used to

00:03:38,690 --> 00:03:41,180
be slow is no longer. V8 kind of leads

00:03:41,180 --> 00:03:43,560
this charge. It powers Chrome and Node.

00:03:43,560 --> 00:03:45,709
But the other engines, some of which you probably

00:03:45,709 --> 00:03:49,740
never heard of, they're all getting faster, right. And

00:03:49,740 --> 00:03:51,830
you can't ignore the libraries and frameworks that are

00:03:51,830 --> 00:03:53,830
there. You know, we started out with Dom libraries,

00:03:53,830 --> 00:03:58,819
jQuery, prototype and then GUI stuff, XJS, YUY, et

00:03:58,819 --> 00:03:59,380
cetera.

00:03:59,380 --> 00:04:01,739
These days, the rage is all in the MV

00:04:01,739 --> 00:04:04,860
star frameworks, and there's just so many more libraries.

00:04:04,860 --> 00:04:08,890
D3, Ging frameworks, charts, all kinds of stuff, right.

00:04:08,890 --> 00:04:12,170
It's truly an exciting time in web technology.

00:04:12,170 --> 00:04:14,810
A lot like it was for Ruby, mid, late

00:04:14,810 --> 00:04:18,219
2000s there. I love this Dude! I'm at RailsConf!

00:04:18,219 --> 00:04:20,309
picture from O'Reilly.

00:04:20,309 --> 00:04:22,900
But there's a problem. The language is JavaScript.

00:04:22,900 --> 00:04:23,289
-VIDEO-

00:04:23,289 --> 00:04:25,509
LUKE SKYWALKER: What a piece of junk!

00:04:25,509 --> 00:04:30,800
F.C.: I repeat. That language is JavaScript.

00:04:30,800 --> 00:04:30,800
with anything?

00:04:35,309 --> 00:04:42,080
side! JavaScript leads to anger. Anger leads to hate.

00:04:42,080 --> 00:04:45,620
Hate leads to suffering.

00:04:45,620 --> 00:04:50,699
F.C.: So if you've done any substantial amount of

00:04:50,699 --> 00:04:54,080
JavaScript, you may have felt the way Yoda did.

00:04:54,080 --> 00:04:55,629
So when I look at the Ruby community, I

00:04:55,629 --> 00:04:57,969
think of it as a forward-thinking group of polyglots.

00:04:57,969 --> 00:05:01,589
Like, we like Erlang, we like, you know, whatever,

00:05:01,589 --> 00:05:03,409
whatever the thing is. We look at what's appropriate

00:05:03,409 --> 00:05:05,330
for the job. So you really can't ignore the

00:05:05,330 --> 00:05:07,969
possibilities and opportunities that are happening in the JavaScript

00:05:07,969 --> 00:05:09,919
revolution.

00:05:09,919 --> 00:05:12,800
All this momentum behind JavaScript, there's clearly a strong

00:05:12,800 --> 00:05:17,059
pressure to adopt or switch over, you know. And

00:05:17,059 --> 00:05:19,770
it feels something like this to the Ruby programmer.

00:05:19,770 --> 00:05:20,849
-VIDEO-

00:05:20,849 --> 00:05:27,309
EMPEROR PALPATINE: If you will not turn then you

00:05:27,309 --> 00:05:29,229
will be destroyed.

00:05:29,229 --> 00:05:33,529
C.F.: And no one wants to be destroyed. So

00:05:33,529 --> 00:05:36,620
let us segue now to Ruby. Matz wrote this

00:05:36,620 --> 00:05:40,879
once: "For me the purpose of life is partly

00:05:40,879 --> 00:05:43,919
to have joy. Programmers often feel joy when they

00:05:43,919 --> 00:05:46,039
can concentrate on the creative side of programming. So

00:05:46,039 --> 00:05:48,309
Ruby is designed to make programmers happy."

00:05:48,309 --> 00:05:50,889
So, you might infer, then, the purpose of Ruby

00:05:50,889 --> 00:05:56,199
is what? Anyone? Bueller?

00:05:56,199 --> 00:05:58,719
To make you happy, right. And so then the

00:05:58,719 --> 00:06:00,520
Ruby way would be to do more of what

00:06:00,520 --> 00:06:02,550
makes you happy. Which in my mind is not

00:06:02,550 --> 00:06:07,839
this, so. You can't read that. That's OK. You

00:06:07,839 --> 00:06:10,169
can't read it normally, anyways.

00:06:10,169 --> 00:06:15,319
So, ultimately, this is a talk about happiness. So

00:06:15,319 --> 00:06:17,599
the pitch that I have for you today is

00:06:17,599 --> 00:06:20,439
that Opal will make you happy. The premise is

00:06:20,439 --> 00:06:21,349
this:

00:06:21,349 --> 00:06:25,119
Ruby makes me happy. Probably you too. You're at

00:06:25,119 --> 00:06:27,009
RubyConf, right. It would be kind of odd for

00:06:27,009 --> 00:06:29,610
you not to like Ruby and be here.

00:06:29,610 --> 00:06:32,289
So if Opal is Ruby, then Opal makes me

00:06:32,289 --> 00:06:34,499
happy, and thus should make you happy.

00:06:34,499 --> 00:06:36,659
Does JavaScript make me happy?

00:06:36,659 --> 00:06:38,990
Not as much. I still like to code regardless

00:06:38,990 --> 00:06:41,189
of language, but it's just not as fun. So

00:06:41,189 --> 00:06:43,919
a quick background: my journey with Opal is what

00:06:43,919 --> 00:06:46,469
I call JDD.

00:06:46,469 --> 00:06:48,059
Joy-driven development.

00:06:48,059 --> 00:06:49,569
So the background on that is that I don't

00:06:49,569 --> 00:06:53,180
really need Opal. My day job, vanilla Rails and

00:06:53,180 --> 00:06:56,279
some moderate amount of Ajax is perfectly adequate. I

00:06:56,279 --> 00:06:59,869
don't need to have these crazy super Ajax-y, you

00:06:59,869 --> 00:07:02,249
know, nothing in the backend sort of thing there.

00:07:02,249 --> 00:07:06,189
In my life, I have four kids. I have

00:07:06,189 --> 00:07:07,149
no time, right. But, I'm having so much fun,

00:07:07,149 --> 00:07:09,879
I can't put it down. AJeff Spicoli lot like

00:07:09,879 --> 00:07:11,919
a good book. So like, it's just too fun

00:07:11,919 --> 00:07:13,809
for me. So purpose of this talk is to

00:07:13,809 --> 00:07:16,669
share this joy with the rest of you guys.

00:07:16,669 --> 00:07:19,979
So what is Opal? Opal is a Ruby to

00:07:19,979 --> 00:07:23,199
JavaScript source-to-source compiler. And in that fashion, it's similar

00:07:23,199 --> 00:07:26,199
to CoffeeScript. There is a small runtime, and this

00:07:26,199 --> 00:07:29,659
allows us to support method missing, operator overloading, error

00:07:29,659 --> 00:07:31,580
dechecking, all these things that you can do Ruby

00:07:31,580 --> 00:07:33,719
that you can't do in JavaScript.

00:07:33,719 --> 00:07:36,399
In short, it's Ruby in the browser, which is-

00:07:36,399 --> 00:07:36,999
-VIDEO-

00:07:36,999 --> 00:07:40,050
JEFF SPICOLI: Awesome! Totally awesome!

00:07:40,050 --> 00:07:43,869
C.F.: We can con concisely describe Opal as code.

00:07:43,869 --> 00:07:45,550
So you can see here, Opal is a subclass

00:07:45,550 --> 00:07:49,669
of Ruby. It includes browser access JavaScript interaction. Runs

00:07:49,669 --> 00:07:52,389
in the browser. Runs in Node. Makes you happy.

00:07:52,389 --> 00:07:55,830
So, a quick look at the GitHub page, you

00:07:55,830 --> 00:07:57,490
can see there's thirteen projects and I'll be talking

00:07:57,490 --> 00:07:59,389
about a good many of these, just to give

00:07:59,389 --> 00:08:02,039
you a feel that, you know, there's a body

00:08:02,039 --> 00:08:03,360
of official repo work.

00:08:03,360 --> 00:08:05,629
So now I'm gonna switch gears to my David

00:08:05,629 --> 00:08:09,520
Letterman mode. I have the Opal Show Top Ten

00:08:09,520 --> 00:08:13,449
minus two reasons Opal will make you happy countdown.

00:08:13,449 --> 00:08:20,449
Eight, seven, six, five, four, three, two, one:

00:08:22,319 --> 00:08:26,360
Top ten minus two Opal, reasons Opal will make

00:08:26,360 --> 00:08:27,240
you happy.

00:08:27,240 --> 00:08:31,029
Number one: It's just Ruby, and a viable one.

00:08:31,029 --> 00:08:35,959
Number two: Greenspun's 10th Rule, Opal Edition.

00:08:35,959 --> 00:08:38,880
Three: solves things the Ruby way, making the programmer

00:08:38,880 --> 00:08:39,949
happy.

00:08:39,949 --> 00:08:44,019
Four: Frameworks, we don't need no stinking frameworks. But

00:08:44,019 --> 00:08:46,060
we have some.

00:08:46,060 --> 00:08:49,990
Five: Tools you already know and love.

00:08:49,990 --> 00:08:53,490
Six: Easy integration with web frameworks. Oh, thank you

00:08:53,490 --> 00:08:55,730
for the-

00:08:55,730 --> 00:08:59,490
Seven: Awesome in-browser tools.

00:08:59,490 --> 00:09:03,269
And number eight: New possibilities.

00:09:03,269 --> 00:09:05,279
So let's look at each one of these.

00:09:05,279 --> 00:09:07,490
Number one: It's just Ruby, and a viable one.

00:09:07,490 --> 00:09:09,430
So the first question you probably have is, is

00:09:09,430 --> 00:09:11,589
Opal viable? Or is it another one of these

00:09:11,589 --> 00:09:14,430
toy compiles-to-JavaScript languages?

00:09:14,430 --> 00:09:16,380
So you should know that there are six, at

00:09:16,380 --> 00:09:19,430
least six apps in production now. There's two more

00:09:19,430 --> 00:09:21,579
coming, I believe, at the end of this month.

00:09:21,579 --> 00:09:24,100
Of these, the biggest apps are the store and

00:09:24,100 --> 00:09:27,860
the mobile site for a high-end fashion/luxury brand, because

00:09:27,860 --> 00:09:30,930
of the client confidential agreement the developer has with

00:09:30,930 --> 00:09:33,180
the company I can't say who it is, oddly

00:09:33,180 --> 00:09:33,430
enough.

00:09:33,430 --> 00:09:35,410
But we can look at some stats for that.

00:09:35,410 --> 00:09:39,209
So globally, this company has about two million unique

00:09:39,209 --> 00:09:43,170
visitors and twenty million page views a month. The

00:09:43,170 --> 00:09:45,370
parts that involve Opal - not the whole thing.

00:09:45,370 --> 00:09:48,149
The store and the mobile part both get about

00:09:48,149 --> 00:09:50,880
two million views a month. So not unreasonable amount

00:09:50,880 --> 00:09:55,100
of load. Certainly, I think, more than our site.

00:09:55,100 --> 00:09:58,670
Store is responsive, the mobile works well. So, it

00:09:58,670 --> 00:10:00,259
kind of shows that Opal is not too heavy

00:10:00,259 --> 00:10:05,379
for mobile devices. And from this site's battle tested

00:10:05,379 --> 00:10:09,810
for IE8, plus Chrome, Safari, Firefox.

00:10:09,810 --> 00:10:14,149
So Opal is real Ruby. It's 1.9.3 compliant -

00:10:14,149 --> 00:10:17,740
mostly. So as of two days ago, it passes

00:10:17,740 --> 00:10:20,959
about 3,200 Ruby specs. And the goal is to

00:10:20,959 --> 00:10:23,190
pass all, or nearly all of them. Some things

00:10:23,190 --> 00:10:24,800
you just can't do cause you're the browser. But

00:10:24,800 --> 00:10:28,649
it is the desire to be compatible.

00:10:28,649 --> 00:10:32,769
It's capable of running complex Ruby. Asciidoc gem runs

00:10:32,769 --> 00:10:37,430
unmodified, and spec runs unmodified. Rspec runs with some

00:10:37,430 --> 00:10:39,940
small modifications, and that's primarily due to the fact

00:10:39,940 --> 00:10:44,079
that Opal has immutable strings, and rspec does not.

00:10:44,079 --> 00:10:46,490
So, but that's, so that's a big testament, cause

00:10:46,490 --> 00:10:48,480
those of you guys who've looked at rspec know

00:10:48,480 --> 00:10:49,970
there's a lot of crazy Ruby on that. So

00:10:49,970 --> 00:10:51,269
for it to pretty much run that with some

00:10:51,269 --> 00:10:53,550
small modification is substantial.

00:10:53,550 --> 00:10:56,949
It can compile itself. That means something for some

00:10:56,949 --> 00:10:58,199
people.

00:10:58,199 --> 00:11:00,329
And much of the standard lib is in place.

00:11:00,329 --> 00:11:03,000
So let's look at the testimonial to. So this

00:11:03,000 --> 00:11:05,569
is a thread on the Google Group, and they're

00:11:05,569 --> 00:11:09,190
talking about performance. Wow, I can't read that. And

00:11:09,190 --> 00:11:10,449
so Dan Allen says this:

00:11:10,449 --> 00:11:12,829
"I can attest to the speed and the feather

00:11:12,829 --> 00:11:16,389
weightness of Opal. The performance is astonishing, actually. I

00:11:16,389 --> 00:11:19,040
originally expected the conversion of my library, Asciidoctor from

00:11:19,040 --> 00:11:21,940
Ruby to be just an experiment. Instead, it created

00:11:21,940 --> 00:11:24,019
a viable port and eliminated the need to write

00:11:24,019 --> 00:11:26,560
JavaScript manually for the client-side usage. So much so

00:11:26,560 --> 00:11:28,949
that NeoforJ is using it for one of their

00:11:28,949 --> 00:11:31,889
online tools. See graph gist, blah, blah, blah."

00:11:31,889 --> 00:11:34,199
And just last month Sam Ruby was playing around

00:11:34,199 --> 00:11:36,670
with Opal and he says it looks very promising.

00:11:36,670 --> 00:11:39,029
So those of you guys who come to RubyConf,

00:11:39,029 --> 00:11:42,709
you know about that guy. That guy might say,

00:11:42,709 --> 00:11:45,350
well, what does DHH think?

00:11:45,350 --> 00:11:49,370
So, a year ago, Ashton J asked DHH, he

00:11:49,370 --> 00:11:51,660
said, hey, what, what do you think about Opal,

00:11:51,660 --> 00:11:53,339
given all the hot stuff that's going on there?

00:11:53,339 --> 00:11:56,170
And long story short, DHH says, well, you know,

00:11:56,170 --> 00:11:58,050
I'm not into it. It's just vanilla Ruby. It's

00:11:58,050 --> 00:12:00,209
not like you have ActiveSupport available, which kind of

00:12:00,209 --> 00:12:03,230
defeats the purpose for me.

00:12:03,230 --> 00:12:09,879
But wait. Two stars there, but, there is Active,

00:12:09,879 --> 00:12:11,550
Opal ActiveSupport there.

00:12:11,550 --> 00:12:14,120
So Ruby language features in Opal. So I'm not

00:12:14,120 --> 00:12:15,610
gonna read this. A lot of bullets there. But

00:12:15,610 --> 00:12:17,089
the point is to give you a feeling of,

00:12:17,089 --> 00:12:18,899
look, we support all this stuff, and some of

00:12:18,899 --> 00:12:22,009
this stuff is really handy and often not in

00:12:22,009 --> 00:12:24,360
JavaScript, right. And the point of all this is

00:12:24,360 --> 00:12:27,069
you can't underestimate the power of a better programming

00:12:27,069 --> 00:12:28,720
language in the browser.

00:12:28,720 --> 00:12:30,379
Those of you guys who have chosen Ruby over

00:12:30,379 --> 00:12:32,519
other languages in the backend, you know what I

00:12:32,519 --> 00:12:35,920
mean. It's just more fun, right. And so these

00:12:35,920 --> 00:12:38,540
two tools which I'll mention many times before I

00:12:38,540 --> 00:12:41,680
actually demo them - easy to write, easy to

00:12:41,680 --> 00:12:43,790
read, very little code, which takes us to our

00:12:43,790 --> 00:12:45,360
next point.

00:12:45,360 --> 00:12:48,970
Which is Greenspun's 10th Rule Opal Edition.

00:12:48,970 --> 00:12:50,740
So who knows Greenspun's rule?

00:12:50,740 --> 00:12:54,920
Oh, good. Then my slide is useful here. So

00:12:54,920 --> 00:12:59,910
he wrote this: Any sufficiently complicated C or Fortran

00:12:59,910 --> 00:13:03,910
program contains an ad hoc, informally specified, bug-ridden, slow

00:13:03,910 --> 00:13:08,180
implementation of half of Common Lisp. And so this

00:13:08,180 --> 00:13:10,180
is really a testament to the power of Lisp

00:13:10,180 --> 00:13:12,290
and as you're programs, and as your programs get

00:13:12,290 --> 00:13:14,779
more and more complicated, you start to do stuff

00:13:14,779 --> 00:13:16,569
that Lisp had in the first place. You know,

00:13:16,569 --> 00:13:18,230
it's a Lisp advocacy thing.

00:13:18,230 --> 00:13:22,319
And to complete my StarWars circle, here's a cartoon

00:13:22,319 --> 00:13:29,319
that connects Lisp to Star Wars. Is that big

00:13:33,069 --> 00:13:37,129
enough to be read? All right. Chuckle. Chuckle means

00:13:37,129 --> 00:13:38,029
you read.

00:13:38,029 --> 00:13:44,279
So, what then is Greenspun's Rule, Opal Edition?

00:13:44,279 --> 00:13:49,139
It is this: Any sufficiently complicated JavaScript program contains

00:13:49,139 --> 00:13:52,970
an ad hoc, informally-specified, bug-ridden slow implementation of half

00:13:52,970 --> 00:13:56,199
of Ruby.

00:13:56,199 --> 00:13:59,060
So let's look at Greenspun in action, also known

00:13:59,060 --> 00:14:02,939
as, some attempts inspired by trying to imitate Ruby

00:14:02,939 --> 00:14:05,620
or emulating Ruby-like features using JavaScript.

00:14:05,620 --> 00:14:07,819
So we start off with Prototype. Everyone pretty much

00:14:07,819 --> 00:14:10,399
knows Sam Stevenson wrote this to make JavaScript more

00:14:10,399 --> 00:14:12,949
like Ruby. And underscore, you know. So I'm gonna

00:14:12,949 --> 00:14:14,279
go through this quick. There's a lot of slides

00:14:14,279 --> 00:14:16,259
and, and not a lot of time.

00:14:16,259 --> 00:14:19,290
So Ruby here, RubyJS. There's no surprise that Ruby

00:14:19,290 --> 00:14:22,430
is mentioned, you know, in this one. So -

00:14:22,430 --> 00:14:25,939
animation too slow.

00:14:25,939 --> 00:14:32,600
OK, Strukt, Ruby-inspired structs for JavaScript. String.JS, doesn't call

00:14:32,600 --> 00:14:33,870
it out, but if you look at the API

00:14:33,870 --> 00:14:39,379
it's like making Ruby strings. JSClass, you know. Ruby.

00:14:39,379 --> 00:14:41,499
Joose - they don't mention Ruby by name but

00:14:41,499 --> 00:14:46,149
if you look at the feature set, Ruby. JavaScriptMVC

00:14:46,149 --> 00:14:48,459
- Ruby-like classes in JavaScript.

00:14:48,459 --> 00:14:53,180
Def.JS, super simple Ruby-style inheritance. Here's a, a good

00:14:53,180 --> 00:14:55,480
blog post by Jahuda, where he pretty much says

00:14:55,480 --> 00:15:01,709
JavaScript needs Ruby blocks because JavaScript blocks suck.

00:15:01,709 --> 00:15:05,149
Raiya in Humax, again, classes like Ruby's mixin. Here's

00:15:05,149 --> 00:15:08,439
a first slide of this scatterpoll dot com, making

00:15:08,439 --> 00:15:11,199
JavaScript more like Ruby. ActiveJS - actually, ActiveJS is

00:15:11,199 --> 00:15:15,050
more like an Active, or, you know, a Rails

00:15:15,050 --> 00:15:17,620
clone than a Ruby clone specifically here.

00:15:17,620 --> 00:15:21,980
RedScript, Ruby-flavored JavaScript experiment. Forml - so this is

00:15:21,980 --> 00:15:25,310
worth reading out loud. A contemporary programming language for

00:15:25,310 --> 00:15:28,139
the discriminating programmer, intended to approximate the safety of

00:15:28,139 --> 00:15:31,300
Haskel and the expressiveness of Ruby, should such an

00:15:31,300 --> 00:15:33,910
approximation turn out to exist.

00:15:33,910 --> 00:15:36,740
So here's other attempts to do Ruby in JS.

00:15:36,740 --> 00:15:38,149
You can see Opal's at the top, and there's

00:15:38,149 --> 00:15:40,680
been, you know, a bunch of these. Some of

00:15:40,680 --> 00:15:43,290
which I think there have been talks, relating talks

00:15:43,290 --> 00:15:43,730
about.

00:15:43,730 --> 00:15:46,860
Long story short, people want Ruby in the browser.

00:15:46,860 --> 00:15:49,829
Even if they don't know it, right. Some people

00:15:49,829 --> 00:15:55,180
know they don't want JavaScript.

00:15:55,180 --> 00:15:56,930
So those of you don't know this meme, this

00:15:56,930 --> 00:15:59,059
is a ripoff of the Smug DHH meme, which

00:15:59,059 --> 00:16:01,709
there's at least three websites that you can put

00:16:01,709 --> 00:16:04,730
words to DHH's mouth.

00:16:04,730 --> 00:16:09,279
So, instead of the ad hoc, informally-specified, bug-ridden, slow

00:16:09,279 --> 00:16:12,399
implementation, why don't we use the real thing? And

00:16:12,399 --> 00:16:13,050
that would be Opal.

00:16:13,050 --> 00:16:16,339
All right, slide, or, point number three. Solving things

00:16:16,339 --> 00:16:19,589
the Ruby way, making the programmer happy.

00:16:19,589 --> 00:16:22,110
So this, in itself, could have been the whole

00:16:22,110 --> 00:16:24,339
presentation. I tried to pick some select examples and,

00:16:24,339 --> 00:16:28,259
excuse me for any indiscretions that I've done there.

00:16:28,259 --> 00:16:31,360
I start off with some comparisons, modular code, namespaces,

00:16:31,360 --> 00:16:34,660
external templates, automation tasks, scope, and then I just

00:16:34,660 --> 00:16:36,379
do some stuff that's just, you know, this is

00:16:36,379 --> 00:16:37,399
what you do in Opal.

00:16:37,399 --> 00:16:40,990
All right, let's look at these. So by modular

00:16:40,990 --> 00:16:43,910
code, I pretty much mean, you know, not having

00:16:43,910 --> 00:16:46,129
one giant file. Which is sort of the way

00:16:46,129 --> 00:16:48,730
JavaScript was designed for. And one of the useful

00:16:48,730 --> 00:16:51,949
bolt-ons is really requiredJS, so you require JS, you

00:16:51,949 --> 00:16:54,509
define a module, and you have to require it.

00:16:54,509 --> 00:16:56,399
There's, you know, often a lot more. You have

00:16:56,399 --> 00:16:58,839
to make shims for a lot of libraries and

00:16:58,839 --> 00:17:00,470
if you look at, like, tutorials, how to use

00:17:00,470 --> 00:17:02,249
require JS, it's like, eleven pages to do this

00:17:02,249 --> 00:17:03,829
and this and this and this, and then we

00:17:03,829 --> 00:17:04,589
can call these two things.

00:17:04,589 --> 00:17:07,670
What do you do in Ruby? You create a

00:17:07,670 --> 00:17:10,950
Ruby file, or a gem, and you require it.

00:17:10,950 --> 00:17:14,089
Right, very Ruby-esque. What do you do in Opal?

00:17:14,089 --> 00:17:16,120
You create a Ruby file or gem and you

00:17:16,120 --> 00:17:19,390
require it. All right, so here's an example from

00:17:19,390 --> 00:17:21,310
some code that I will show later.

00:17:21,310 --> 00:17:24,420
This is the actual application dot rb. I require

00:17:24,420 --> 00:17:27,010
some gems - Opal, Opal jQuery, Opal parser comes

00:17:27,010 --> 00:17:29,050
with Opal. The third one is a gem that

00:17:29,050 --> 00:17:31,420
I've written, or actually a file, I can't remember.

00:17:31,420 --> 00:17:34,630
And, you know, document ready. Opal IRB console dot

00:17:34,630 --> 00:17:38,080
create console, so. Just like you're backend coding.

00:17:38,080 --> 00:17:40,490
Namespacing. So you can do this a number of

00:17:40,490 --> 00:17:42,740
ways. It's typically about, you know, nesting objects in

00:17:42,740 --> 00:17:45,800
objects that way. You can use namespace functions that

00:17:45,800 --> 00:17:48,290
you wrote yourself, do it by hand, YUI, Dojo,

00:17:48,290 --> 00:17:51,130
they all have methods for this one. If you

00:17:51,130 --> 00:17:52,320
do it by hand, you can see the, the

00:17:52,320 --> 00:17:54,950
top code there, you know, I make an object

00:17:54,950 --> 00:17:57,220
and I make a object owning object and this,

00:17:57,220 --> 00:17:59,000
and of course you can do it nested below

00:17:59,000 --> 00:18:01,760
if you know what that tree is.

00:18:01,760 --> 00:18:02,500
And that gets to be a pain in the

00:18:02,500 --> 00:18:04,540
but so you can, you know, you can see

00:18:04,540 --> 00:18:06,710
the top line there, where you have this, something

00:18:06,710 --> 00:18:09,150
that parse's string, makes namespace, and that function might

00:18:09,150 --> 00:18:10,190
look something like this.

00:18:10,190 --> 00:18:11,560
So how do you do the same thing in

00:18:11,560 --> 00:18:15,300
Ruby? You use module or class, right. So, what

00:18:15,300 --> 00:18:18,490
do you do for Opal? You use module or

00:18:18,490 --> 00:18:19,780
class.

00:18:19,780 --> 00:18:22,610
Template, external file - there's a lot of stuff

00:18:22,610 --> 00:18:23,870
here. So I'm gonna try to make this Apple

00:18:23,870 --> 00:18:26,500
to Apple, so I picked sort of JST to

00:18:26,500 --> 00:18:29,490
compare to ERB. You know, you have to make

00:18:29,490 --> 00:18:31,880
a JST template file, a separate file. You can

00:18:31,880 --> 00:18:33,220
do this, this is handy.

00:18:33,220 --> 00:18:36,170
It's unfortunately JavaScript that you put HTML and strings

00:18:36,170 --> 00:18:38,690
or otherwise mark it off there. You include the

00:18:38,690 --> 00:18:41,430
HTML and you call it. That's super ugly.

00:18:41,430 --> 00:18:44,560
So, for Ruby, I use Rails cause it's the

00:18:44,560 --> 00:18:47,370
easiest. You make the template file, and sometimes you

00:18:47,370 --> 00:18:49,860
have to write ren, render, so, you don't even

00:18:49,860 --> 00:18:51,840
have to do that sometimes, right.

00:18:51,840 --> 00:18:56,370
Template files for Opal, make the external file. You

00:18:56,370 --> 00:19:00,010
will require it. And then you, you know, do

00:19:00,010 --> 00:19:01,450
template filename render.

00:19:01,450 --> 00:19:05,080
Automation tasks. So once upon a time, I thought

00:19:05,080 --> 00:19:08,110
Cake was pretty popular. These days it seems like

00:19:08,110 --> 00:19:11,170
Grunt, Grunt JS is all the rage. They're like

00:19:11,170 --> 00:19:14,180
reading some, discussions on how it's going down the

00:19:14,180 --> 00:19:16,320
path of Ant, which, of course, is evil.

00:19:16,320 --> 00:19:18,680
So maybe as we talk now there's something new

00:19:18,680 --> 00:19:20,760
for these guys. What do we do in Ruby?

00:19:20,760 --> 00:19:26,250
Rake. If Jim's around, thanks. If Jim's not around,

00:19:26,250 --> 00:19:26,860
thanks.

00:19:26,860 --> 00:19:28,890
What do we do in Opal? We use Rake.

00:19:28,890 --> 00:19:29,770
Scope.

00:19:29,770 --> 00:19:32,880
So what, one thing that makes JavaScript painful is

00:19:32,880 --> 00:19:36,120
that the function is your sole vehicle for scoping.

00:19:36,120 --> 00:19:37,700
So you have to wrap everything in a function.

00:19:37,700 --> 00:19:39,560
So this very simple example, where I'm trying to

00:19:39,560 --> 00:19:42,810
make an array of functions that, you know, first

00:19:42,810 --> 00:19:45,820
one returns alert zero, second one alert one, et

00:19:45,820 --> 00:19:47,940
cetera there. For me to store that i in

00:19:47,940 --> 00:19:49,590
the loop, I have to wrap the function in

00:19:49,590 --> 00:19:51,450
a function and call it with itself.

00:19:51,450 --> 00:19:53,560
And, while you learn to read this pattern over

00:19:53,560 --> 00:19:56,980
time, it kind of sucks, right.

00:19:56,980 --> 00:19:59,150
Scope, I just say in a sentence. You know,

00:19:59,150 --> 00:20:01,700
Ruby has a lot more flexible scoping, and I,

00:20:01,700 --> 00:20:05,880
I daresay, same scoping. And Opal has the same.

00:20:05,880 --> 00:20:07,180
All right.

00:20:07,180 --> 00:20:09,000
Defer execution. So here's a bit of code that's

00:20:09,000 --> 00:20:13,720
not too ugly, right. Window dot setImmediate(function() code that

00:20:13,720 --> 00:20:15,820
you want. But if we compare it to what

00:20:15,820 --> 00:20:17,780
Opal browser gives you, you can write this kind

00:20:17,780 --> 00:20:21,640
of code. So, again, clarity of the code. Ruby

00:20:21,640 --> 00:20:22,630
versus JavaScript.

00:20:22,630 --> 00:20:26,310
So now we're out of the comparisons, and I'm

00:20:26,310 --> 00:20:29,140
gonna talk about just things that Opal does. So

00:20:29,140 --> 00:20:31,860
to use JavaScript from Opal, and again, because we

00:20:31,860 --> 00:20:35,150
support operator overload, method missing - a lot of

00:20:35,150 --> 00:20:37,650
non-JavaScripty things - we can't do what JavaScript does

00:20:37,650 --> 00:20:39,170
and just be syntactic sugar.

00:20:39,170 --> 00:20:41,930
So we call JavaScript though x-strings the way you

00:20:41,930 --> 00:20:45,660
call external things in Ruby. You can use the

00:20:45,660 --> 00:20:47,510
percent sign x thing, or you can use the

00:20:47,510 --> 00:20:51,150
back tix, and you use this to get values.

00:20:51,150 --> 00:20:53,720
Opal used to do what, what's called seamless bridging.

00:20:53,720 --> 00:20:56,050
The same way in JRuby, you just call it

00:20:56,050 --> 00:20:59,210
and then it's like, it's a, a Ruby class.

00:20:59,210 --> 00:21:03,050
Lately, because of optimization issues, they've switched this to

00:21:03,050 --> 00:21:04,460
wrapping things in native, so.

00:21:04,460 --> 00:21:06,030
You can say like, grab an editor and then

00:21:06,030 --> 00:21:08,190
I call native over the back tix, but this

00:21:08,190 --> 00:21:11,760
object, at editor, acts like a Ruby class.

00:21:11,760 --> 00:21:16,920
All right. So here's something from Opal browser. At

00:21:16,920 --> 00:21:18,270
the top here, you can create a DOM. It

00:21:18,270 --> 00:21:20,720
looks a lot like markup b or other builders,

00:21:20,720 --> 00:21:23,670
and of course there's a power to this one.

00:21:23,670 --> 00:21:26,210
I'll grab an, an object by ID, and then

00:21:26,210 --> 00:21:28,740
I have, like, two ways to append. And again,

00:21:28,740 --> 00:21:31,030
it's very Ruby-esque. You can see append child, or,

00:21:31,030 --> 00:21:33,070
you know, less than less than.

00:21:33,070 --> 00:21:35,050
And I'll demo this in the next slide, live

00:21:35,050 --> 00:21:38,120
in the browser there.

00:21:38,120 --> 00:21:41,050
So again, CSS, you can also write CSS in

00:21:41,050 --> 00:21:42,900
Ruby, if you want, so you can see CSS

00:21:42,900 --> 00:21:46,060
do rule, et cetera. There's cool things like ten

00:21:46,060 --> 00:21:48,860
dot pixels and, and whatnot here. And then you

00:21:48,860 --> 00:21:50,830
can append this document head, C dot append do

00:21:50,830 --> 00:21:51,720
document dot head.

00:21:51,720 --> 00:21:55,650
It's all very clear and easy to read. There

00:21:55,650 --> 00:21:56,430
you go.

00:21:56,430 --> 00:22:00,590
Tests and specs. So rspec has certainly influenced a

00:22:00,590 --> 00:22:02,460
lot of things, and these days, Jasmine, I forgot

00:22:02,460 --> 00:22:03,760
the name of the other library that looks a

00:22:03,760 --> 00:22:07,390
lot like Jasmine. With Jasmine in CoffeeScript, you can

00:22:07,390 --> 00:22:10,240
now write tests in the JavaScript world that look

00:22:10,240 --> 00:22:11,940
a lot like rspec.

00:22:11,940 --> 00:22:15,430
But I'd say this looks more like rspec, right.

00:22:15,430 --> 00:22:18,250
And this is, in fact, code I submitted when

00:22:18,250 --> 00:22:20,820
I made a PR for Opal JQuery. And I

00:22:20,820 --> 00:22:22,450
just love the way it reads. You can see

00:22:22,450 --> 00:22:24,480
the before is clear, I'm doing this. And actually

00:22:24,480 --> 00:22:26,000
use a here dot there to say here's the

00:22:26,000 --> 00:22:27,680
HTML I'm gonna work on.

00:22:27,680 --> 00:22:29,930
And those of you who know rspec, you know,

00:22:29,930 --> 00:22:32,420
it's, it's very clear. It looks, it looks better

00:22:32,420 --> 00:22:34,460
in my mind.

00:22:34,460 --> 00:22:36,800
There are some other examples I choose not to

00:22:36,800 --> 00:22:40,010
do, partly cause my thing is 46 minutes and

00:22:40,010 --> 00:22:42,200
I have forty-five.

00:22:42,200 --> 00:22:44,510
Things that are easy in Ruby but difficult. There's

00:22:44,510 --> 00:22:46,590
several ways that you can do monkey patching in

00:22:46,590 --> 00:22:50,220
JavaScript, all homegrown. Method missing - not really supported.

00:22:50,220 --> 00:22:54,230
A couple engines are supported but not really.

00:22:54,230 --> 00:22:56,240
All right. Next one.

00:22:56,240 --> 00:22:56,740
-VIDEO-

00:22:56,740 --> 00:23:01,260
WAYNE: Wayne got no frameworks. Wayne no framework. I

00:23:01,260 --> 00:23:04,960
don't have to show you any stinking framework.

00:23:04,960 --> 00:23:07,090
F.C.: All right. So the point of the no

00:23:07,090 --> 00:23:08,710
frameworks thing.

00:23:08,710 --> 00:23:12,390
Again, I'll call these examples but I promise a

00:23:12,390 --> 00:23:13,230
demo.

00:23:13,230 --> 00:23:15,190
These things were really easy for me to write.

00:23:15,190 --> 00:23:18,220
Originally I said, I should go learn Vienna, the

00:23:18,220 --> 00:23:21,430
built-in but highly undocumented MVC framework they have to

00:23:21,430 --> 00:23:25,120
do this. But I didn't have to. And that's,

00:23:25,120 --> 00:23:27,320
that's kind of a strength, right. And again, the

00:23:27,320 --> 00:23:30,020
testament of having a better language, right.

00:23:30,020 --> 00:23:32,650
So the second demo I will do, I'll talk

00:23:32,650 --> 00:23:34,610
a little about the code. It's four-hundred and forty-eight

00:23:34,610 --> 00:23:38,780
lines of code, including whitespace and debugging lines. It's

00:23:38,780 --> 00:23:42,240
pretty much plain Ruby. A couple Opal JQuery lines.

00:23:42,240 --> 00:23:43,430
And that's it.

00:23:43,430 --> 00:23:45,800
So I just show some selected code from that

00:23:45,800 --> 00:23:46,840
and then when I do the demo you can

00:23:46,840 --> 00:23:49,070
look back and say the code is this way,

00:23:49,070 --> 00:23:51,420
so. At the beginning, I require gems, Opal, Opal

00:23:51,420 --> 00:23:54,420
JQuery, and then the gem that I wrote, Opal

00:23:54,420 --> 00:23:56,400
IRB, or actually I should say, a file in

00:23:56,400 --> 00:23:57,280
the gem.

00:23:57,280 --> 00:23:59,350
Then I have a bunch of erb templates which

00:23:59,350 --> 00:24:02,550
I'm gonna replace with something else. Require those. So

00:24:02,550 --> 00:24:04,530
there's a bunch of pains in Opal inspector. Each

00:24:04,530 --> 00:24:06,390
one is a sub class of Opal id pane.

00:24:06,390 --> 00:24:08,620
You can see, you just have to redefine four

00:24:08,620 --> 00:24:11,420
things and write down there, I rendered the template

00:24:11,420 --> 00:24:12,810
the way I showed before.

00:24:12,810 --> 00:24:14,750
And that's how I render it self.

00:24:14,750 --> 00:24:16,610
And the way I set up the app, document

00:24:16,610 --> 00:24:18,670
ready do, I create an IDE, and you can

00:24:18,670 --> 00:24:20,230
see I have a sub, sub class for each

00:24:20,230 --> 00:24:23,100
one. So I add all the panes to the

00:24:23,100 --> 00:24:25,210
IDE and then I use a little JQuery to,

00:24:25,210 --> 00:24:26,980
to grab some things in the markup and, and

00:24:26,980 --> 00:24:29,750
hook up a connection like, the second to last

00:24:29,750 --> 00:24:33,420
line you can see Opal close dot on click,

00:24:33,420 --> 00:24:36,770
and, and a little lambda there. Or, not a

00:24:36,770 --> 00:24:38,240
lambda. A block.

00:24:38,240 --> 00:24:41,080
Right. So. And, and again, so I was able

00:24:41,080 --> 00:24:43,120
to write, and you'll see the demo, a fairly

00:24:43,120 --> 00:24:45,750
impressive stuff with no frameworks.

00:24:45,750 --> 00:24:48,230
So Ruby itself is powerful, but you still want

00:24:48,230 --> 00:24:50,210
libraries. So we have we have a number of

00:24:50,210 --> 00:24:54,230
select ones. Opal JQuery. So this is JQuery wrapped

00:24:54,230 --> 00:24:56,500
via Opal, and it's not a straight wrapping. It's

00:24:56,500 --> 00:24:58,720
very, very Ruby-esque. You see inside of a document

00:24:58,720 --> 00:25:03,140
dot ready question mark do stuff like that, or

00:25:03,140 --> 00:25:06,510
element dot find. I think Adam did a really

00:25:06,510 --> 00:25:10,120
good job of Rubyfying the interface to JQuery.

00:25:10,120 --> 00:25:12,000
There's Opal Browser, which gives you all kinds of

00:25:12,000 --> 00:25:17,800
Opal. All kinds of browser functionality. And to include

00:25:17,800 --> 00:25:20,080
most of the things most people use during query

00:25:20,080 --> 00:25:23,790
for. So if you're not using JQuery, you can

00:25:23,790 --> 00:25:25,920
just use Opal browser, a good interface to that

00:25:25,920 --> 00:25:28,440
one. But a lot of people use JQuery.

00:25:28,440 --> 00:25:31,460
So, Vienna is the MVC framework that comes with

00:25:31,460 --> 00:25:35,330
it. Looks very backbone-influenced to me. Astonishing to me

00:25:35,330 --> 00:25:37,710
how little code is in that framework. And there

00:25:37,710 --> 00:25:39,250
is Lissio. This is a framework that one of

00:25:39,250 --> 00:25:42,020
the committers is doing on the side that I

00:25:42,020 --> 00:25:45,130
really like, and I'll give some code for later.

00:25:45,130 --> 00:25:51,290
All right. So point number five. Opal is Ruby,

00:25:51,290 --> 00:25:53,900
right. So then, tools you use for Ruby, like

00:25:53,900 --> 00:25:56,870
your editor - emacs, textmate, vim, sublime, RubyMine. They

00:25:56,870 --> 00:25:58,270
all work, right.

00:25:58,270 --> 00:26:01,460
Rake, you use rake, you still use rake. Rspec,

00:26:01,460 --> 00:26:03,510
if you love it, great. If you don't, sorry.

00:26:03,510 --> 00:26:06,230
You can run mspec.

00:26:06,230 --> 00:26:07,790
Guard - I used guard to, you know, when

00:26:07,790 --> 00:26:09,540
I'm doing the GUI thing I go change and

00:26:09,540 --> 00:26:12,470
popup and stuff for that one.

00:26:12,470 --> 00:26:14,560
It's just Ruby. So whatever tools you use for

00:26:14,560 --> 00:26:16,870
Ruby, you can still use. But I think even

00:26:16,870 --> 00:26:20,690
better is that you can reuse all the OO

00:26:20,690 --> 00:26:22,540
and patterns and knowledge and stuff you've learned to

00:26:22,540 --> 00:26:24,920
do with Ruby as a programming language on the

00:26:24,920 --> 00:26:27,810
frontend, no context change, right. And, and that's really

00:26:27,810 --> 00:26:28,130
good.

00:26:28,130 --> 00:26:28,450
-VIDEO-

00:26:28,450 --> 00:26:30,270
LEIA: I love you.

00:26:30,270 --> 00:26:33,270
LUKE SKYWALKER: I know.

00:26:33,270 --> 00:26:38,360
F.C.: Easy integration with Ruby web frameworks. So, if

00:26:38,360 --> 00:26:40,350
you use Rails, and I think most people do,

00:26:40,350 --> 00:26:45,080
you have Opal-Rails. Otherwise, we use Opal-Sprockets directly, which

00:26:45,080 --> 00:26:48,080
actually is the magic behind Opal-Rails as well. You

00:26:48,080 --> 00:26:50,400
can use that, you know, in rake files to

00:26:50,400 --> 00:26:53,080
generate static files. Or, if you want something that

00:26:53,080 --> 00:26:55,430
works like Rails, where every time you refresh the

00:26:55,430 --> 00:26:57,840
browser you get the latest Opal code, you can

00:26:57,840 --> 00:26:59,810
set up Opal server, which is part of Opal

00:26:59,810 --> 00:27:00,450
sprockets.

00:27:00,450 --> 00:27:02,320
So for Opal Rails, the easy way to, to

00:27:02,320 --> 00:27:04,810
make a Rails app with that is Rails new

00:27:04,810 --> 00:27:08,760
project dash dash JavaScript equals Opal. Now, if you

00:27:08,760 --> 00:27:11,080
don't like easy things, you can do it by

00:27:11,080 --> 00:27:15,140
hand. You can add the gem Opal-Rails to gemfile,

00:27:15,140 --> 00:27:18,730
you can add the appropriate JavaScript to, and you'll

00:27:18,730 --> 00:27:23,500
see down there I call it, like, order matters.

00:27:23,500 --> 00:27:25,900
Which actually is generally true.

00:27:25,900 --> 00:27:30,380
Then you make star dot JS dot RB files,

00:27:30,380 --> 00:27:33,000
put code in there. If you like HAML, Opal-Rails

00:27:33,000 --> 00:27:34,650
supports HAML filters so you can say I have

00:27:34,650 --> 00:27:38,530
a colon, colon Opal and then just Ruby, right

00:27:38,530 --> 00:27:41,670
there, embedded in your template. And specs live under

00:27:41,670 --> 00:27:44,770
JavaSrcipt slash specs, so you can put, you know,

00:27:44,770 --> 00:27:46,530
specs there and run those in the browser.

00:27:46,530 --> 00:27:51,190
There's a dedicated page Opal Rails gives you for

00:27:51,190 --> 00:27:53,390
For a static file, use Opal-Sprockets here. And this

00:27:53,390 --> 00:27:56,360
is one my Rake tests for the JQ console,

00:27:56,360 --> 00:27:59,010
so you can see there's a file dot open.

00:27:59,010 --> 00:27:59,970
This is where you want to write it to.

00:27:59,970 --> 00:28:02,550
You get an Opal environment and you append paths,

00:28:02,550 --> 00:28:06,060
and then Opal-Sprockets magically knows your paths, and so

00:28:06,060 --> 00:28:07,700
you can just require, like I showed you in

00:28:07,700 --> 00:28:09,990
the code, and it finds where your stuff is

00:28:09,990 --> 00:28:14,110
and then automatically concatenates the stuff and all three

00:28:14,110 --> 00:28:14,670
sprockets.

00:28:14,670 --> 00:28:17,260
And then you put it up. So, and then

00:28:17,260 --> 00:28:19,200
you can sort of see my Rake test has,

00:28:19,200 --> 00:28:22,000
shows me in Chrome afterwards.

00:28:22,000 --> 00:28:23,500
If you want the thing I talked about, the

00:28:23,500 --> 00:28:28,950
server, so there's a little rack-based server that you

00:28:28,950 --> 00:28:32,420
can come with, or you add Opal, Opal-Sprockets to

00:28:32,420 --> 00:28:35,150
your gem file, you create the Opal files, typically

00:28:35,150 --> 00:28:37,720
in app is the pattern, but not required there.

00:28:37,720 --> 00:28:41,960
You include application.js under assets in your file. Then

00:28:41,960 --> 00:28:46,690
you make up a simple config dot ru, and

00:28:46,690 --> 00:28:49,410
then you run rack-up and then refresh at will.

00:28:49,410 --> 00:28:52,240
So pretty handy for that one.

00:28:52,240 --> 00:28:56,890
Number seven. Awesome in-browser tools. Opal-IRB and Inspector. So

00:28:56,890 --> 00:28:58,220
I've been talking about this, I finally can show

00:28:58,220 --> 00:29:04,320
them. Opal-IRB, not surprisingly is IRB for Opal. So

00:29:04,320 --> 00:29:07,300
I have, of course, command history. I have most

00:29:07,300 --> 00:29:09,620
readline controls, I'll probably add more. So those of

00:29:09,620 --> 00:29:12,200
you guys who know, a new readline, I'd do

00:29:12,200 --> 00:29:12,820
that one.

00:29:12,820 --> 00:29:14,780
I have a multi-line editor, which actually I think

00:29:14,780 --> 00:29:17,710
is actually better than real IRB, where you jump

00:29:17,710 --> 00:29:19,740
into your own editor or, if you use emacs

00:29:19,740 --> 00:29:22,570
you're using an inferior, when you write to it.

00:29:22,570 --> 00:29:24,090
But you can do this all over history, so

00:29:24,090 --> 00:29:26,310
you can go back two lines and edit that

00:29:26,310 --> 00:29:27,550
one in the multiline editor.

00:29:27,550 --> 00:29:30,120
There's a feature I like to call live gist,

00:29:30,120 --> 00:29:32,850
and I'll demo that shortly.

00:29:32,850 --> 00:29:37,510
Opal-Inspector. This is inspired by Amber.JS's in-browser SmallTalk code

00:29:37,510 --> 00:29:39,480
browser. At this point, I could say it's more

00:29:39,480 --> 00:29:44,460
than inspired, it's a zerox copy of sorts.

00:29:44,460 --> 00:29:46,860
And the idea sort of came to me, it's

00:29:46,860 --> 00:29:49,870
like, well I'm gonna have persistent live Opal objects

00:29:49,870 --> 00:29:51,930
in the browser. This is a lot like SmallTalk

00:29:51,930 --> 00:29:56,390
in its image, right. And the goal of sort

00:29:56,390 --> 00:29:57,850
of going this way is to change the paradigm

00:29:57,850 --> 00:30:00,730
of web app development. And if you're familiar with

00:30:00,730 --> 00:30:03,350
SmallTalk and just changing real things at RunTime, which

00:30:03,350 --> 00:30:05,300
we love to talk about in like Pry-based development.

00:30:05,300 --> 00:30:09,910
A lot of those lines, life can be different.

00:30:09,910 --> 00:30:11,430
You write the code, you push to the browser,

00:30:11,430 --> 00:30:12,760
you make it work in the browser, you push

00:30:12,760 --> 00:30:14,330
it back. That's sort of the goal I have

00:30:14,330 --> 00:30:15,680
with this one.

00:30:15,680 --> 00:30:19,480
And down the road I can see that, possibly

00:30:19,480 --> 00:30:21,040
you have better tools in the browser than outside

00:30:21,040 --> 00:30:23,020
of the browser. All right, demo time.

00:30:23,020 --> 00:30:24,430
So I'm gonna lose my timer, because I forgot

00:30:24,430 --> 00:30:29,150
to hit that timer, so, hopefully I don't go

00:30:29,150 --> 00:30:29,370
over.

00:30:29,370 --> 00:30:31,110
All right, so, is that showing? All right.

00:30:31,110 --> 00:30:32,870
Here's the idea for IRB. So you got your

00:30:32,870 --> 00:30:34,970
app and you're running in - I got to

00:30:34,970 --> 00:30:39,080
find my cursor. It is here, OK. And so

00:30:39,080 --> 00:30:41,350
you can pop up and so, you're here. This

00:30:41,350 --> 00:30:44,150
is RubyRed, by the way. You know, and so

00:30:44,150 --> 00:30:47,200
this is just a plane, this is basically IRB,

00:30:47,200 --> 00:30:50,530
you know. I can do this, I can puts

00:30:50,530 --> 00:30:57,530
f, right. I one dot dot ten dot each,

00:30:58,060 --> 00:31:03,470
I puts I, right. Got that one.

00:31:03,470 --> 00:31:05,590
So I have command line history, so I can

00:31:05,590 --> 00:31:08,120
up, you know, control P or up arrow. I

00:31:08,120 --> 00:31:11,680
have readline, so control A, control D a couple

00:31:11,680 --> 00:31:16,300
times. Alt F and I'll change this one to

00:31:16,300 --> 00:31:22,310
alert I, and then return - oops. I made

00:31:22,310 --> 00:31:24,410
an error.

00:31:24,410 --> 00:31:26,500
Thank you.

00:31:26,500 --> 00:31:31,830
All right. And then, of course, so, we got

00:31:31,830 --> 00:31:33,590
stuff, right. And so, you know, when you have

00:31:33,590 --> 00:31:36,780
multiline stuff, and I hit control M, and now

00:31:36,780 --> 00:31:39,500
I have a multiline editor so now I can

00:31:39,500 --> 00:31:41,120
do things much more happily.

00:31:41,120 --> 00:31:47,960
Bar, alert bar, end, end, f is foo dot

00:31:47,960 --> 00:31:53,470
new. F dot bar. And then control enter will

00:31:53,470 --> 00:31:56,160
execute that. So you get that one. And it's

00:31:56,160 --> 00:31:57,530
here. So you can see, so now I have

00:31:57,530 --> 00:31:59,690
the history, this way I can go through. So

00:31:59,690 --> 00:32:01,500
let's say I'm coding some stuff, oh let me

00:32:01,500 --> 00:32:02,900
go edit that thing from before. So I hit

00:32:02,900 --> 00:32:05,770
up and then control M and then I can

00:32:05,770 --> 00:32:08,020
re-edit this, you know. And so that's kind of

00:32:08,020 --> 00:32:08,570
cool.

00:32:08,570 --> 00:32:10,550
So I think a little more than what IRB

00:32:10,550 --> 00:32:11,480
does now.

00:32:11,480 --> 00:32:12,760
The other thing that you can do, so I

00:32:12,760 --> 00:32:15,280
was talking about live gist, so hit control l

00:32:15,280 --> 00:32:17,610
and that gives me a link. So if I

00:32:17,610 --> 00:32:23,550
open the link in a new window, there you

00:32:23,550 --> 00:32:25,900
go. This brings up the code and runs it

00:32:25,900 --> 00:32:27,520
for you. So the idea of this is gist.

00:32:27,520 --> 00:32:29,490
I can send you this gist and it will

00:32:29,490 --> 00:32:31,450
bring it up and actually, this right now is

00:32:31,450 --> 00:32:34,590
local because I don't trust the, the internet. But

00:32:34,590 --> 00:32:37,150
I have the same thing running off my GitHub

00:32:37,150 --> 00:32:39,310
IO thing for the project. So you can sit

00:32:39,310 --> 00:32:41,060
there and it will point to that one in

00:32:41,060 --> 00:32:43,290
the GitHub. So you'll have the IRB with your

00:32:43,290 --> 00:32:45,400
code, and then he can monkey with it and

00:32:45,400 --> 00:32:47,470
send you one back, and then you can do

00:32:47,470 --> 00:32:49,440
that one. SO I think that's kind of cool.

00:32:49,440 --> 00:32:51,880
And again, different than what IRB gives you.

00:32:51,880 --> 00:32:54,510
What else? OK, so let's do some, let me

00:32:54,510 --> 00:32:56,940
get rid of, let me get rid of that

00:32:56,940 --> 00:32:59,090
one. Let's do some of that dom stuff that

00:32:59,090 --> 00:33:01,330
I was talking about.

00:33:01,330 --> 00:33:05,160
All right. Here you go. So, so I talk

00:33:05,160 --> 00:33:09,380
about building a dom. So d equals dom do

00:33:09,380 --> 00:33:15,680
div dot blue do h1 I'm blue, end. And

00:33:15,680 --> 00:33:20,420
div dot red do h1-

00:33:20,420 --> 00:33:23,140
And so, for those of you who do HAML

00:33:23,140 --> 00:33:29,530
or Jade or Slim, this should be very ops-

00:33:29,530 --> 00:33:36,530
very familiar to you. OK, sorry. OK. End.

00:33:37,840 --> 00:33:40,510
So you can see, I actually have a mydiv

00:33:40,510 --> 00:33:47,510
equals dollar document, mydiv. And again, this should be

00:33:47,800 --> 00:33:54,280
similar to my example before. And then mydiv -

00:33:54,280 --> 00:33:57,070
hopefully this works right the first time.

00:33:57,070 --> 00:34:01,000
Oh, you can't see it cause it's much smaller.

00:34:01,000 --> 00:34:03,650
So, these are added now. They weren't there before,

00:34:03,650 --> 00:34:06,280
right. And so you can see dom manipulation, pretty,

00:34:06,280 --> 00:34:11,060
pretty straightforward. Let's do some CSS now.

00:34:11,060 --> 00:34:18,060
OK. C equals CSS do, whoops. rule dot blue

00:34:23,169 --> 00:34:30,169
do color blue and rule dot red do color

00:34:33,090 --> 00:34:40,090
red end end. C dot append_to - and hopefully,

00:34:40,639 --> 00:34:43,310
you're seeing, you know, when you look at this

00:34:43,310 --> 00:34:48,120
- head, right. All very straightfoward for the Rubyist.

00:34:48,120 --> 00:34:54,129
OK. And so if I show it now, there

00:34:54,129 --> 00:35:00,490
you go. Right. So.

00:35:00,490 --> 00:35:02,620
So much better than JavaScript.

00:35:02,620 --> 00:35:05,410
All right, so let's go over to the Opal

00:35:05,410 --> 00:35:05,970
Inspector.

00:35:05,970 --> 00:35:08,660
So same idea. I've got this program, and so

00:35:08,660 --> 00:35:10,910
I need to show you the spec here, and

00:35:10,910 --> 00:35:14,250
this markup is nearly a hundred percent lifted from

00:35:14,250 --> 00:35:17,400
Amber.js, which is actually very odd markup that I'm

00:35:17,400 --> 00:35:18,970
very happy to replace.

00:35:18,970 --> 00:35:20,800
So I have a number of tabs inspire by

00:35:20,800 --> 00:35:23,140
then the transcript is there log, everything that goes

00:35:23,140 --> 00:35:25,970
here. I, I've set up Inspector to have two

00:35:25,970 --> 00:35:31,350
things where you console dot log will go to,

00:35:31,350 --> 00:35:33,450
you know, the, the log inspector in your, in

00:35:33,450 --> 00:35:36,210
your web developer tools, and there's a Ruby specific

00:35:36,210 --> 00:35:37,650
one. Because there's time when I see everything and

00:35:37,650 --> 00:35:38,730
I go to that one.

00:35:38,730 --> 00:35:40,230
And there's times when I only want to see

00:35:40,230 --> 00:35:42,190
the stuff I'm spitting out. Cause you can imagine

00:35:42,190 --> 00:35:43,340
if you look at that one it can be

00:35:43,340 --> 00:35:44,470
very verbose. That's transcript.

00:35:44,470 --> 00:35:46,110
So the IRB I showed you earlier is this

00:35:46,110 --> 00:35:49,690
tab. For SmallTalk, you know, it's their try-it little

00:35:49,690 --> 00:35:51,590
browser, which actually works more like TryRuby where you

00:35:51,590 --> 00:35:53,260
write the code and you can, you try it

00:35:53,260 --> 00:35:55,970
or inspect it or something, run it I think

00:35:55,970 --> 00:35:56,360
there.

00:35:56,360 --> 00:35:57,850
So this idea of running tests, so this one

00:35:57,850 --> 00:35:59,290
I haven't done any work on. but the idea

00:35:59,290 --> 00:36:00,880
is I'll build up the specs out of the

00:36:00,880 --> 00:36:03,540
browser there. Let's go back so, this is the

00:36:03,540 --> 00:36:08,960
same IRB as before. You know.

00:36:08,960 --> 00:36:13,240
One dot dot ten so, so true to IRB,

00:36:13,240 --> 00:36:16,730
you know, the output that you have here is

00:36:16,730 --> 00:36:19,450
here. But you might do a lot of stuff

00:36:19,450 --> 00:36:21,150
in IRB. So you can still have this one,

00:36:21,150 --> 00:36:22,650
which you can go back to the transcript and

00:36:22,650 --> 00:36:23,980
you can clear this. So you can see, you

00:36:23,980 --> 00:36:25,560
have the history here and the place that you

00:36:25,560 --> 00:36:28,120
work there. That's somewhat useful there.

00:36:28,120 --> 00:36:31,130
I have a test class in, in, inspector here,

00:36:31,130 --> 00:36:37,460
so - oops, sorry. K, right. And so foo

00:36:37,460 --> 00:36:39,900
is a class. it has an a and b

00:36:39,900 --> 00:36:41,400
attribute. So I can type, oh let me see

00:36:41,400 --> 00:36:43,210
what f dot a is. Oh, that's, OK, that's

00:36:43,210 --> 00:36:45,140
OK. We can monkey patch that.

00:36:45,140 --> 00:36:52,140
Right. Class Foo attr_accessor :a, :b end. So I

00:36:56,110 --> 00:36:58,710
do that one. Now f dot a has a

00:36:58,710 --> 00:37:02,890
value. So you know in Ruby we got f

00:37:02,890 --> 00:37:09,890
dot inspect, which in this case, not so useful.

00:37:10,550 --> 00:37:12,710
Control P - I have something called O inspect,

00:37:12,710 --> 00:37:15,420
Opal inspect. And this pops you over, you see

00:37:15,420 --> 00:37:16,470
it jumped a tab. So you see now I

00:37:16,470 --> 00:37:18,470
have a visual tool here, which, you now, you

00:37:18,470 --> 00:37:20,290
can look at this one. And even better, I

00:37:20,290 --> 00:37:22,460
can go in here and say, you know, new

00:37:22,460 --> 00:37:26,210
string, return. Right. So now you can mess with

00:37:26,210 --> 00:37:26,370
the stuff.

00:37:26,370 --> 00:37:27,930
And then we go back over to IRB, cause

00:37:27,930 --> 00:37:30,650
I'm writing some stuff, and f dot a is,

00:37:30,650 --> 00:37:35,100
oh sorry. F dot a is a new string.

00:37:35,100 --> 00:37:36,380
And vice versa. I can change it here and

00:37:36,380 --> 00:37:37,810
push it there. And so you can see where

00:37:37,810 --> 00:37:38,230
this goes.

00:37:38,230 --> 00:37:41,300
Let me make a couple other variables. Ent equals

00:37:41,300 --> 00:37:44,530
ten. I apologize for the scrolling. I did this

00:37:44,530 --> 00:37:49,500
in a much higher resolution when I practiced.

00:37:49,500 --> 00:37:52,870
String equals str. So also I keep track of

00:37:52,870 --> 00:37:55,170
everything that you define in IRB. So look, these

00:37:55,170 --> 00:37:56,820
things that I've written are here. So a lot

00:37:56,820 --> 00:37:58,710
of times, you ever do stuff in IRB, and

00:37:58,710 --> 00:38:00,770
then four hundred lines up was this variable that

00:38:00,770 --> 00:38:02,320
you wanted that you don't know the name of?

00:38:02,320 --> 00:38:04,540
Here it is. And the goal here is I

00:38:04,540 --> 00:38:06,080
grab this, click this, and it would go over

00:38:06,080 --> 00:38:07,140
to the instance browser.

00:38:07,140 --> 00:38:08,830
So this is all tabs, but the class browser.

00:38:08,830 --> 00:38:11,970
So one of the big things with the class

00:38:11,970 --> 00:38:15,150
browser in SmallTalk is you can go and look

00:38:15,150 --> 00:38:17,310
at everything and start to see, there's methods and

00:38:17,310 --> 00:38:18,540
various, and I have to change this cause this

00:38:18,540 --> 00:38:22,820
is stolen straight from Amber.js. So we don't quite

00:38:22,820 --> 00:38:24,130
have the same exact structure, but class - so.

00:38:24,130 --> 00:38:26,810
You know. Here's the constants. So you can see

00:38:26,810 --> 00:38:29,990
Ruby Engine. We call it Opal here.

00:38:29,990 --> 00:38:32,320
And, and, and the idea is, inspect anything and

00:38:32,320 --> 00:38:34,130
change it, you know. So I can go here

00:38:34,130 --> 00:38:36,370
and say, well you know what the RubyEngine is

00:38:36,370 --> 00:38:39,620
purple, wouldn't that be a mind-blowing kind of activity.

00:38:39,620 --> 00:38:41,430
Save this and run, just like I did in

00:38:41,430 --> 00:38:44,830
IRB, you know. So where I'm going with this,

00:38:44,830 --> 00:38:46,680
and I, and I suppose most of you guys

00:38:46,680 --> 00:38:49,820
aren't that SmallTalky savvy, but the idea is, the

00:38:49,820 --> 00:38:51,540
way it used to work is you write your

00:38:51,540 --> 00:38:54,670
code, get in the browser. Oh. Do this. Change

00:38:54,670 --> 00:38:56,680
the code. Redeploy. And sometimes it's just refresh your

00:38:56,680 --> 00:38:57,290
page.

00:38:57,290 --> 00:38:59,820
But, no, it's not. Write the code, go in

00:38:59,820 --> 00:39:01,710
the browser, make it work in the browser, push

00:39:01,710 --> 00:39:04,320
it back to the server. And it'll all work.

00:39:04,320 --> 00:39:06,910
And so I'm really looking to paradigm change there.

00:39:06,910 --> 00:39:13,650
So back to my slides now. I'm, so, this,

00:39:13,650 --> 00:39:15,850
this is what I do with IRB and sort

00:39:15,850 --> 00:39:17,960
of what I did with that one.

00:39:17,960 --> 00:39:20,320
There's one remaining feature that I'm trying to get

00:39:20,320 --> 00:39:23,860
Adam to build for me, and that's the much

00:39:23,860 --> 00:39:27,930
better support, I, what. In, in SmallTalk you can

00:39:27,930 --> 00:39:31,310
ask everything about everything. So I kind of drive

00:39:31,310 --> 00:39:32,850
a lot of these features in Opal now.

00:39:32,850 --> 00:39:34,110
So I need this feature now where in the

00:39:34,110 --> 00:39:36,340
frontend and the backend, all the code changes I

00:39:36,340 --> 00:39:37,840
could change, so those code changes that I make,

00:39:37,840 --> 00:39:40,010
I want to report them. So I guess hey,

00:39:40,010 --> 00:39:41,970
what's this method that I've written since it was

00:39:41,970 --> 00:39:44,220
written on the server. Or even lambdas. What's the

00:39:44,220 --> 00:39:45,760
method, what's the code for the lambdas. So let

00:39:45,760 --> 00:39:47,650
me pull that lambda back up and edit it.

00:39:47,650 --> 00:39:50,080
So once we have this feature done, I'll probably

00:39:50,080 --> 00:39:53,030
then release Opal-Inspector and then I'll feel like this.

00:39:53,030 --> 00:39:53,240
EMPORER PALPETINE: Now witness the fire power of this

00:39:53,240 --> 00:40:00,050
fully-armed and operational battle station.

00:40:00,050 --> 00:40:05,820
F.C.: All right, the new possibilities.

00:40:05,820 --> 00:40:09,400
So, with the demo in browser development, right. I'm

00:40:09,400 --> 00:40:11,400
looking to change this paradigm. I think we get

00:40:11,400 --> 00:40:13,640
better and better. The dev tools get better. You're

00:40:13,640 --> 00:40:16,230
doing more of this anyways, but we're doing it

00:40:16,230 --> 00:40:18,230
for Ruby. You know, the example that I used

00:40:18,230 --> 00:40:20,820
I took mostly from SmallTalk, but the way we

00:40:20,820 --> 00:40:23,380
do IRB is different than the way SmallTalk does,

00:40:23,380 --> 00:40:24,330
but that's the way we do it.

00:40:24,330 --> 00:40:29,270
So, from Ruby also. I worked on this machine,

00:40:29,270 --> 00:40:32,450
freshman internship in college. Don't remember much, but I'll

00:40:32,450 --> 00:40:34,100
have to rediscover it cause there's some really awesome

00:40:34,100 --> 00:40:35,040
things I want to pull from that, over that

00:40:35,040 --> 00:40:38,070
way.

00:40:38,070 --> 00:40:41,060
Standard UI platform. it's my opinion that, I think,

00:40:41,060 --> 00:40:44,369
Ruby tools partially stagnated because there's no standard GUIs,

00:40:44,369 --> 00:40:49,040
right. There's TTK, WX Windows, 2TTK. I wrote this

00:40:49,040 --> 00:40:50,350
tool, you wrote this tool, you know what, that,

00:40:50,350 --> 00:40:52,869
and then bring in like JRuby and there's Swing

00:40:52,869 --> 00:40:56,090
or, I forget, the one that's in Eclipse. SWT.

00:40:56,090 --> 00:40:59,110
It's like you don't even have a thing there,

00:40:59,110 --> 00:41:01,300
right. Everyone's got a browser.

00:41:01,300 --> 00:41:03,590
We have one platform.

00:41:03,590 --> 00:41:06,720
So down the road, you know, these tools, on

00:41:06,720 --> 00:41:09,060
the front end, we can use in the backend.

00:41:09,060 --> 00:41:13,140
Anyone use better errors? Better errors is awesome. You,

00:41:13,140 --> 00:41:14,640
you put in your code, not only does it

00:41:14,640 --> 00:41:16,190
give you a better navigatable stack trace, but it

00:41:16,190 --> 00:41:18,200
has a little IRB window if you put, I

00:41:18,200 --> 00:41:20,690
forget, like, binding Pry or whatever there. And so

00:41:20,690 --> 00:41:22,200
you can see the broken error and then you

00:41:22,200 --> 00:41:23,990
can type in that IRB window and it will

00:41:23,990 --> 00:41:25,110
change it on the server.

00:41:25,110 --> 00:41:26,350
So you can sort of do what I'm saying

00:41:26,350 --> 00:41:28,900
there. So it's like, well if better error's can

00:41:28,900 --> 00:41:30,610
do this then these cool tools I write for

00:41:30,610 --> 00:41:32,670
Opal, you could use to run the backend. SO

00:41:32,670 --> 00:41:36,180
like this class browser, there's nothing for backend Ruby.

00:41:36,180 --> 00:41:38,220
Well, once we get this working for Opal that's

00:41:38,220 --> 00:41:40,390
not much that, you know, you set up some

00:41:40,390 --> 00:41:41,900
kind of JSON server or something and, and push

00:41:41,900 --> 00:41:43,550
these back and forth to the servers. So the

00:41:43,550 --> 00:41:46,070
goal is better tools across the board for Ruby,

00:41:46,070 --> 00:41:47,440
not just for Opal.

00:41:47,440 --> 00:41:50,020
So. What's next?

00:41:50,020 --> 00:41:53,900
All right, so I think meteor.js is really cool.

00:41:53,900 --> 00:41:55,860
This same code on the frontend, and, and the

00:41:55,860 --> 00:41:58,490
really blurring of what, what is what. I think

00:41:58,490 --> 00:42:00,860
that's a really exciting direction that Opal makes us

00:42:00,860 --> 00:42:03,480
po- or Opal, Ruby on the frontend, Ruby on

00:42:03,480 --> 00:42:06,160
the backend. Whether that's MRI backend and on the

00:42:06,160 --> 00:42:08,150
frontend or Opal on the frontend and Opal on

00:42:08,150 --> 00:42:11,840
Node backend. There's possibilities. I think that's really good.

00:42:11,840 --> 00:42:13,740
EventD safe Ruby libs. So this is another thing

00:42:13,740 --> 00:42:16,090
that holds Ruby back. We got lots of libs

00:42:16,090 --> 00:42:18,590
that are not eventd or thread safe. So as

00:42:18,590 --> 00:42:20,970
Opal matures and we write more and more gems

00:42:20,970 --> 00:42:23,450
for Opal, which again is Ruby, you'll have gems

00:42:23,450 --> 00:42:26,170
and libraries that are run on both sides that

00:42:26,170 --> 00:42:28,790
will be event safe because, of course, written on

00:42:28,790 --> 00:42:29,560
top of JavaScript.

00:42:29,560 --> 00:42:31,500
That's cool too.

00:42:31,500 --> 00:42:32,869
So here's something I want to bring up. Component

00:42:32,869 --> 00:42:35,400
based coding all in one place, for the web

00:42:35,400 --> 00:42:39,300
in Ruby. So as a long time GUI programmer

00:42:39,300 --> 00:42:42,100
before I became a web programmer, I hate, oh,

00:42:42,100 --> 00:42:43,980
I got this thing. So let me dig down

00:42:43,980 --> 00:42:45,640
into JavaScript and change my, and then they come

00:42:45,640 --> 00:42:48,340
back up and now I'm gonna go and change

00:42:48,340 --> 00:42:48,660
a mark - oh, wait, wait, change gears. Now,

00:42:48,660 --> 00:42:51,770
I got to change the way it looks, right.

00:42:51,770 --> 00:42:55,220
And that's, for a guy who wrote X Windows

00:42:55,220 --> 00:42:57,730
stuff that's like, lame, right.

00:42:57,730 --> 00:42:59,220
And how do you do OO with that? Ruby's

00:42:59,220 --> 00:43:00,650
so OO. How do you do OO with, oh

00:43:00,650 --> 00:43:02,630
well here's a HAML. WEll, you know, partials are

00:43:02,630 --> 00:43:05,390
sort of there and, and sass has some things.

00:43:05,390 --> 00:43:07,460
But each one is so in separate modality, right.

00:43:07,460 --> 00:43:10,500
So lissio is that MVC framework I talked about.

00:43:10,500 --> 00:43:12,480
It's Ruby class, all parts in Ruby.

00:43:12,480 --> 00:43:15,250
So the HTML, CSS, and the behavior. SO let's

00:43:15,250 --> 00:43:18,140
look at a very simple lissio component. Is this

00:43:18,140 --> 00:43:22,530
code readable? I unfortunately can't zoom in anymore.

00:43:22,530 --> 00:43:24,970
But, so you can see here's some behavior. on

00:43:24,970 --> 00:43:28,340
:click, of what I can do this. shekels dot

00:43:28,340 --> 00:43:31,150
navigate, right. Here's the element I'm associated with. I

00:43:31,150 --> 00:43:34,060
showed you HTML. It's a builder. You know, here's

00:43:34,060 --> 00:43:36,550
the markup. Here's the CSS. You can see, you

00:43:36,550 --> 00:43:40,470
know, the sixty dot pixels, stuff, right. All one

00:43:40,470 --> 00:43:44,390
place, one language. No jumping three files even if

00:43:44,390 --> 00:43:46,190
RubyMine makes it real to the easy to do.

00:43:46,190 --> 00:43:48,690
It's all here. One place. And then you can

00:43:48,690 --> 00:43:50,990
see if you do CSS like this, lot less

00:43:50,990 --> 00:43:53,810
cascading. I hate CSS where you never know what

00:43:53,810 --> 00:43:56,580
it looks like until you jump into the, the

00:43:56,580 --> 00:43:58,470
Chrome and try to navigate, ah, it looks like

00:43:58,470 --> 00:44:00,030
this. You can see that you do a lot

00:44:00,030 --> 00:44:01,820
less cascading with this and then you can see,

00:44:01,820 --> 00:44:03,869
well, I'll have a header and I'll have, like,

00:44:03,869 --> 00:44:06,100
class sexy header, which is subclass of header. And

00:44:06,100 --> 00:44:09,210
I'm over, you know, I might override just one

00:44:09,210 --> 00:44:10,180
line of this and do it again.

00:44:10,180 --> 00:44:12,480
So all the OO stuff that you can't do

00:44:12,480 --> 00:44:16,790
now, you can do and it's all Ruby.

00:44:16,790 --> 00:44:18,869
So I want to show, just to you know,

00:44:18,869 --> 00:44:22,080
sass, sass-like nested stuff, and you can see, you

00:44:22,080 --> 00:44:23,660
can do more than sass. You can put Ruby

00:44:23,660 --> 00:44:25,950
code. Well define this, look like this, else ook

00:44:25,950 --> 00:44:27,880
like that. So you can see like, you can,

00:44:27,880 --> 00:44:32,000
you know, ouv'e got the full power of Ruby.

00:44:32,000 --> 00:44:33,860
All right.

00:44:33,860 --> 00:44:36,310
So here's the sad question. Can you imagine a

00:44:36,310 --> 00:44:37,430
world without Ruby?

00:44:37,430 --> 00:44:40,869
So, I, I heard Charlie Nutter kind of say,

00:44:40,869 --> 00:44:43,580
well, it's fudd that Ruby's dying, but in truth

00:44:43,580 --> 00:44:46,190
there's a possibility. JavaScript Revolution's gotten here, lots of

00:44:46,190 --> 00:44:48,200
people are saying like, Ruby is dead, Ruby is

00:44:48,200 --> 00:44:51,360
dead. So maybe with Opal we can stand that

00:44:51,360 --> 00:44:51,680
one.

00:44:51,680 --> 00:44:55,570
So let's fascilitate the fantasy land of Ruby everywhere.

00:44:55,570 --> 00:44:57,690
Backend, we have options, MRI, JRuby, Rubinius. Mira, I

00:44:57,690 --> 00:45:01,869
don't know if I have any JRuby guys here.

00:45:01,869 --> 00:45:07,080
I love this project. Subset of, well. I don't

00:45:07,080 --> 00:45:09,020
know. Look it up.

00:45:09,020 --> 00:45:12,670
You know, we have MRuby for embedded, mobile, you

00:45:12,670 --> 00:45:15,070
know there's RubyMotion, there's MobyRuby. I don't know if

00:45:15,070 --> 00:45:18,090
Ruboto is really as viable as these from last

00:45:18,090 --> 00:45:20,190
time I played with it. And, and then Opal.

00:45:20,190 --> 00:45:24,250
Which runs everywhere that JavaScript runs, right.

00:45:24,250 --> 00:45:27,210
So let's have a dubious history as Star Wars

00:45:27,210 --> 00:45:32,860
films. Episode one, the Phantom JS Menace. Mesa use

00:45:32,860 --> 00:45:37,360
JavaScript on the backend. Mesa use JavaScript everywhere. Mesa

00:45:37,360 --> 00:45:42,430
use JavaScript in ways unintended by founder.

00:45:42,430 --> 00:45:47,580
Episode two, Attack of the Clones. Just read.

00:45:47,580 --> 00:45:52,900
Episode three, Revenge of the Sith. Evil empire complete.

00:45:52,900 --> 00:45:56,840
Brings us to now. Episode four, A New Hope.

00:45:56,840 --> 00:46:02,000
Opal Wan Kenobi. You're my only hope.

00:46:02,000 --> 00:46:09,000
Episode five, the Empire Strikes Back.

00:46:10,369 --> 00:46:17,369
Episode six, Return of the Jedi. And, like reality,

00:46:17,720 --> 00:46:20,190
episode seven is to be determined. Question I have

00:46:20,190 --> 00:46:23,230
is, will it involve you?

00:46:23,230 --> 00:46:27,420
So, resist the empire. Join the alliance today. This

00:46:27,420 --> 00:46:29,940
is my call of arms, call to arms. I

00:46:29,940 --> 00:46:32,530
would love to have some momentum like Rubinius. For

00:46:32,530 --> 00:46:34,400
those of you who saw at RubyConf 06, Evan

00:46:34,400 --> 00:46:37,040
Phoenix gave this talk of just this idea he

00:46:37,040 --> 00:46:37,960
had, a little code that he wrote on the

00:46:37,960 --> 00:46:40,260
plane on the way over.

00:46:40,260 --> 00:46:42,830
Same time next year, it's a freaking movement. Nine

00:46:42,830 --> 00:46:46,040
zillion commits, like twenty committers. Anyone can commit, stuff

00:46:46,040 --> 00:46:49,200
right. Really cool. Opal is yo- I've already showed

00:46:49,200 --> 00:46:51,619
you, there's a lot in Opal already. So hopefully

00:46:51,619 --> 00:46:53,440
this brings some attention there. We're alone? Oh no.

00:46:53,440 --> 00:46:57,230
We've got thirteen repos officially and some side things,

00:46:57,230 --> 00:46:59,690
code, production apps, two million views page a month.

00:46:59,690 --> 00:47:01,210
Right. Stuff is good.

00:47:01,210 --> 00:47:05,520
So things are pretty good. Can always be better.

00:47:05,520 --> 00:47:08,700
You know, pretty much Adam and Matt just they,

00:47:08,700 --> 00:47:10,810
they bang on the language stuff. And I'm glad

00:47:10,810 --> 00:47:12,030
they do that so then I can work on

00:47:12,030 --> 00:47:15,290
tool stuff, which I know more about.

00:47:15,290 --> 00:47:16,940
You know, so we need more libs, more complete

00:47:16,940 --> 00:47:22,230
libraries there. Documentation, not surprisingly not great. WE need

00:47:22,230 --> 00:47:23,280
your help.

00:47:23,280 --> 00:47:25,180
Things you can do - one, try it out.

00:47:25,180 --> 00:47:27,890
See if you like it. There is an OpalIRB

00:47:27,890 --> 00:47:31,050
dot org. There's a TryRuby. Left is the code.

00:47:31,050 --> 00:47:33,430
It'll generate the JavaScript. It'll put the results down

00:47:33,430 --> 00:47:37,410
here. That's cool. My Opal IRB embed thing there.

00:47:37,410 --> 00:47:39,710
This is the GitHub IO page, and, you know,

00:47:39,710 --> 00:47:41,890
I'll have, I'll have the slides out. So, you

00:47:41,890 --> 00:47:46,530
don't have to needlessly try to scribble that down.

00:47:46,530 --> 00:47:49,570
Communicate. IRC seems to be the active place. Everyone

00:47:49,570 --> 00:47:53,650
but me is in Europe, so time's a little

00:47:53,650 --> 00:47:57,150
odd. There's a Google Group, not super active. Document,

00:47:57,150 --> 00:47:59,190
yeah. Try things out in Document. I think that's

00:47:59,190 --> 00:48:01,510
what I'll be doing at some point.

00:48:01,510 --> 00:48:03,560
Contribute. It's just Ruby. So this is the whole

00:48:03,560 --> 00:48:05,910
talk I think Evan Phoenix talked about. Rubinius. You

00:48:05,910 --> 00:48:08,800
don't have to know C to contribute to Ruby

00:48:08,800 --> 00:48:10,180
like you do for MRI, you can write in

00:48:10,180 --> 00:48:12,260
Ruby. And so this is Opal. You know Ruby.

00:48:12,260 --> 00:48:15,790
You can contribute to Opal, right.

00:48:15,790 --> 00:48:17,850
Convert gems. You want a gem you want? Some

00:48:17,850 --> 00:48:20,830
of them will run, some of them won't. Immutable

00:48:20,830 --> 00:48:24,700
string, which, they're talking about maybe undoing that, but

00:48:24,700 --> 00:48:27,119
you can imagine optimization wise it's much better.

00:48:27,119 --> 00:48:29,690
Thread, threadsafe wise it's actually better.

00:48:29,690 --> 00:48:31,190
But you can imagine there's a lot of existing

00:48:31,190 --> 00:48:33,880
Ruby stuff that doesn't obey that.

00:48:33,880 --> 00:48:37,150
Have fun, right. That's, that's the. Be garbage collectors.

00:48:37,150 --> 00:48:39,570
Change the world. Have fun. Be happy.

00:48:39,570 --> 00:48:43,090
All right. So, my question, will you join the

00:48:43,090 --> 00:48:48,700
dark side or code with the force? You choose.

00:48:48,700 --> 00:48:49,570
But, for me-

00:48:49,570 --> 00:48:50,230
-VIDEO-

00:48:50,230 --> 00:48:56,130
LUKE SKYWALKER: I'll never turn to the dark side.

00:48:56,130 --> 00:49:00,670
You failed, your highness. I am a Jedi, like

00:49:00,670 --> 00:49:03,720
my father before me.

00:49:03,720 --> 00:49:09,010
F.C.: So let us change the world. Defeat the

00:49:09,010 --> 00:49:13,180
evil. Save Ruby. Be happy.

00:49:13,180 --> 00:49:17,150
All right. So some quick resources. OpalIRB.org is good.

00:49:17,150 --> 00:49:21,750
You know, GitHub - thirteen projects, read the code.

00:49:21,750 --> 00:49:24,260
IRC I think is the best place and they're

00:49:24,260 --> 00:49:27,410
pretty responsive. Google Groups, not very active, but if

00:49:27,410 --> 00:49:29,750
that's more your speed.

00:49:29,750 --> 00:49:31,200
I'll call my blog cause I have a couple

00:49:31,200 --> 00:49:33,030
articles when I first got into it and then

00:49:33,030 --> 00:49:35,680
I will certainly write more now that I'm not

00:49:35,680 --> 00:49:37,890
writing presentations for RubyConf.

00:49:37,890 --> 00:49:41,030
It's not a lot. Better than nothing. Some of

00:49:41,030 --> 00:49:43,790
it's out of date. But that'll be changed. Otherwise

00:49:43,790 --> 00:49:45,619
there's really not a lot in the way, for

00:49:45,619 --> 00:49:46,609
that one.

00:49:46,609 --> 00:49:52,670
Thanks, Matz, for Ruby. Thank you. DHH for allowing

00:49:52,670 --> 00:49:56,510
us to have dayjobs that have Ruby. Adam, Meh,

00:49:56,510 --> 00:49:58,790
and Elia. They're the committers to Opal, so, they've

00:49:58,790 --> 00:50:02,150
done a good job. I love the community. In

00:50:02,150 --> 00:50:04,900
fact, the whole happiness thing, love you guys. George

00:50:04,900 --> 00:50:07,119
Lucas, thanks for Star Wars, and I'm not as,

00:50:07,119 --> 00:50:09,030
I'm not as picky as the guys that are

00:50:09,030 --> 00:50:12,200
all mad at his revisions. And you guys for

00:50:12,200 --> 00:50:14,780
listening to this presentation.

00:50:14,780 --> 00:50:18,950
So lastly, like everyone else, it's unfortunately the last

00:50:18,950 --> 00:50:22,200
day, we're hiring. Standford, Connecticut, New York if you

00:50:22,200 --> 00:50:25,020
want to do that. Contact us. Diego's been giving

00:50:25,020 --> 00:50:27,340
out all his cards, so. That's it.

00:50:27,340 --> 00:50:30,230
So you can find me on Twitter. But I

00:50:30,230 --> 00:50:32,610
Tweet more about food than anything else.

00:50:33,800 --> 00:50:35,760

YouTube URL: https://www.youtube.com/watch?v=GH9FAfKG-qY


