Title: revo.js 2019 - Mathieu Henri - End to end testing a world of web, mobile & desktop apps
Publication date: 2019-10-25
Playlist: Revo.js Conf 2019
Description: 
	End to end testing a world of web, mobile & desktop apps
Presented by Mathieu Henri, at revo.js 2019
https://revojs.ro/2019/speakers/mathieu-henri
---
Things get complicated when you target multiple platforms and large parts of your code powers components used on Android, iOS, Mac, Win32 and the web from IE11 and up.

This is the testing journey of the Profile card serving +100M people in Outlook and Office 365: How we style, test and monitor our components for any hiccups. And boy do they misbehave at times!

Starting with one browser and some open source libraries, we improved the status quo and set a framework that scales our end to end testing across browsers and native applications.
Captions: 
	00:00:00,720 --> 00:00:08,230
[Music]

00:00:11,630 --> 00:00:16,730
thank you so much for having me so far

00:00:14,090 --> 00:00:17,960
every guess is just amazing and really

00:00:16,730 --> 00:00:20,860
really happy and really impressed

00:00:17,960 --> 00:00:25,970
because this is your first conference

00:00:20,860 --> 00:00:28,820
incredible so us Jenna said my name is

00:00:25,970 --> 00:00:33,160
Matt you owe me I go on - with your wife

00:00:28,820 --> 00:00:33,160
I am the software engineer at Microsoft

00:00:33,370 --> 00:00:38,690
I'm not exactly like your classic

00:00:35,989 --> 00:00:40,730
structure engineer I started in the code

00:00:38,690 --> 00:00:44,360
club when I was about six seven years

00:00:40,730 --> 00:00:46,280
old and we were just like learning how

00:00:44,360 --> 00:00:50,390
to program very simple things and it was

00:00:46,280 --> 00:00:53,870
all about making visual things to get

00:00:50,390 --> 00:00:56,300
feedback really quickly and learn not

00:00:53,870 --> 00:00:57,620
get scared about what we are doing and

00:00:56,300 --> 00:01:00,050
soon I was exposed to the demoscene

00:00:57,620 --> 00:01:02,059
which is a movement about pushing we

00:01:00,050 --> 00:01:06,080
artistic and technical limits of any

00:01:02,059 --> 00:01:08,509
platform basically and I just blew my

00:01:06,080 --> 00:01:10,399
mind with the machine movement I kept

00:01:08,509 --> 00:01:13,759
following it and I'm still an active

00:01:10,399 --> 00:01:16,340
member of it and it just sparked my

00:01:13,759 --> 00:01:19,360
curiosity about like how does this thing

00:01:16,340 --> 00:01:21,979
work how can I do it how can I actually

00:01:19,360 --> 00:01:25,159
see something that I like and learn from

00:01:21,979 --> 00:01:27,710
it and turn it into my auntie and so I'm

00:01:25,159 --> 00:01:29,390
really much a visual learner I really

00:01:27,710 --> 00:01:34,970
love to get things on the screen to test

00:01:29,390 --> 00:01:37,009
an experimental get going and three

00:01:34,970 --> 00:01:39,110
years ago also because I learned from

00:01:37,009 --> 00:01:41,000
the code club two years ago I created my

00:01:39,110 --> 00:01:44,180
own cook lab at the school of my

00:01:41,000 --> 00:01:47,570
daughter and I'm teaching kids from 7 to

00:01:44,180 --> 00:01:51,619
11 years old how to program using a very

00:01:47,570 --> 00:01:55,640
visual approach so this is Morris I went

00:01:51,619 --> 00:01:58,820
to tech at Microsoft I work on what we

00:01:55,640 --> 00:02:01,909
call the media applications this is our

00:01:58,820 --> 00:02:05,869
set of high-value components but you can

00:02:01,909 --> 00:02:09,280
see in Microsoft 365 Microsoft 365 is

00:02:05,869 --> 00:02:11,360
just the umbrella name for all the

00:02:09,280 --> 00:02:15,709
Microsoft and office applications like

00:02:11,360 --> 00:02:18,489
Altru office 1 hi world except on all

00:02:15,709 --> 00:02:22,430
platforms the immediate applications are

00:02:18,489 --> 00:02:24,109
the profile Cal which we can see every

00:02:22,430 --> 00:02:25,370
time you see the photo or the name

00:02:24,109 --> 00:02:29,030
someone in any

00:02:25,370 --> 00:02:31,069
these applications so you click open a

00:02:29,030 --> 00:02:36,940
picture and you get this nice guarded

00:02:31,069 --> 00:02:41,060
context for information we also have the

00:02:36,940 --> 00:02:42,590
photo kicker where you can when you edit

00:02:41,060 --> 00:02:45,049
the contact you can also change the

00:02:42,590 --> 00:02:50,090
picture of someone we have the contact

00:02:45,049 --> 00:02:52,459
editor well when you see someone you can

00:02:50,090 --> 00:02:55,849
add but personal contact and then you

00:02:52,459 --> 00:02:59,359
can edit different informations another

00:02:55,849 --> 00:03:01,640
thing that we have is search box which

00:02:59,359 --> 00:03:03,040
you are trying to unify a call because

00:03:01,640 --> 00:03:07,069
all of Microsoft

00:03:03,040 --> 00:03:09,470
so what's sounds like an easy task but

00:03:07,069 --> 00:03:13,579
it's quite challenging to unify search

00:03:09,470 --> 00:03:15,620
papers all Microsoft applications and

00:03:13,579 --> 00:03:19,340
all these applications they are shipped

00:03:15,620 --> 00:03:21,290
in six different platforms so all these

00:03:19,340 --> 00:03:22,879
applications outlook Word Excel

00:03:21,290 --> 00:03:26,120
PowerPoint which consume our

00:03:22,879 --> 00:03:29,359
applications the profit our contact is

00:03:26,120 --> 00:03:31,400
Ito of the picker the people picker also

00:03:29,359 --> 00:03:35,180
is like when you add mentioned someone

00:03:31,400 --> 00:03:36,500
in a comment or in you tap the add

00:03:35,180 --> 00:03:38,840
symbol and start typing with them some

00:03:36,500 --> 00:03:40,549
an image you get the combo box where you

00:03:38,840 --> 00:03:43,579
can actually find people and then add

00:03:40,549 --> 00:03:46,069
them so this is the release button

00:03:43,579 --> 00:03:48,440
so all these applications we are

00:03:46,069 --> 00:03:53,540
targeting six platforms it target

00:03:48,440 --> 00:03:55,750
Windows 32 Windows 10 Mac iOS Android

00:03:53,540 --> 00:03:58,040
and the web starting from ia level and

00:03:55,750 --> 00:04:00,500
so we are quite a big team we are

00:03:58,040 --> 00:04:04,340
hundred hundred fifty contributors to

00:04:00,500 --> 00:04:06,590
the code we work on the main mano

00:04:04,340 --> 00:04:08,900
history with about that many packages

00:04:06,590 --> 00:04:11,449
are eight hundred something over 1

00:04:08,900 --> 00:04:13,040
million line of code about 70% of the

00:04:11,449 --> 00:04:14,449
code is actually shared across all

00:04:13,040 --> 00:04:18,620
platforms

00:04:14,449 --> 00:04:20,959
we write in tasks so and we have a

00:04:18,620 --> 00:04:23,840
pretty decent amount of users in the

00:04:20,959 --> 00:04:26,240
hundreds of millions of users all day so

00:04:23,840 --> 00:04:31,639
that gives us very large code base the

00:04:26,240 --> 00:04:34,470
very large surface area and very big

00:04:31,639 --> 00:04:36,090
number of ways that we can take this

00:04:34,470 --> 00:04:38,730
so today I would like to share with you

00:04:36,090 --> 00:04:41,430
how we approached end-to-end testing the

00:04:38,730 --> 00:04:43,230
world of web mobile and net under

00:04:41,430 --> 00:04:44,700
certifications I would like to share

00:04:43,230 --> 00:04:46,530
with you some learnings some

00:04:44,700 --> 00:04:48,890
improvements with within and some of the

00:04:46,530 --> 00:04:51,750
work that we have ahead of us

00:04:48,890 --> 00:04:54,450
obviously the midgard applications did

00:04:51,750 --> 00:04:57,900
not stop at that scale it started much

00:04:54,450 --> 00:04:59,940
much smaller as a technical bet the team

00:04:57,900 --> 00:05:03,960
that I joined at Microsoft three years

00:04:59,940 --> 00:05:08,130
ago previously built the profile card in

00:05:03,960 --> 00:05:09,900
one workload in one website and we saw

00:05:08,130 --> 00:05:12,660
that this factor was pretty neat and

00:05:09,900 --> 00:05:15,480
people really enjoyed it so with certain

00:05:12,660 --> 00:05:17,520
opportunity to make that into a coherent

00:05:15,480 --> 00:05:20,460
user experience that could be shared

00:05:17,520 --> 00:05:23,910
across or for Microsoft applications so

00:05:20,460 --> 00:05:27,720
we made this bet to ribbon that but as a

00:05:23,910 --> 00:05:32,400
reusable component and for that we used

00:05:27,720 --> 00:05:34,980
ok act because it's really easy to

00:05:32,400 --> 00:05:36,330
involve new developers and it has if you

00:05:34,980 --> 00:05:38,370
don't do something too silly you get

00:05:36,330 --> 00:05:40,740
good performance on the get-go it's

00:05:38,370 --> 00:05:43,110
really nice and so we started from this

00:05:40,740 --> 00:05:45,440
one website we started to replace we

00:05:43,110 --> 00:05:49,560
prefer gap and being in one website

00:05:45,440 --> 00:05:50,430
targeting only the web made everything

00:05:49,560 --> 00:05:54,030
easy peasy

00:05:50,430 --> 00:05:57,360
we we somehow knew and control the horse

00:05:54,030 --> 00:06:00,030
tech stack we knew exactly how this

00:05:57,360 --> 00:06:02,580
website was working and when we found a

00:06:00,030 --> 00:06:05,310
bird or studying Huey could just fix

00:06:02,580 --> 00:06:08,220
uber or walk around it so that we would

00:06:05,310 --> 00:06:11,580
not like the host application so that

00:06:08,220 --> 00:06:13,440
was really good so we use react to build

00:06:11,580 --> 00:06:16,710
the components and tasks quick to get

00:06:13,440 --> 00:06:21,360
strong typing which was incredibly

00:06:16,710 --> 00:06:24,960
useful because you don't get any any

00:06:21,360 --> 00:06:26,970
bugs like like API bugs because you get

00:06:24,960 --> 00:06:29,340
the type definition you get all your API

00:06:26,970 --> 00:06:30,720
exposed everything is like directly

00:06:29,340 --> 00:06:33,690
visible in your ID it's really

00:06:30,720 --> 00:06:35,640
convenient for bigger pieces of budget

00:06:33,690 --> 00:06:39,180
we use unit testing of course it's

00:06:35,640 --> 00:06:41,740
pretty classic and as we were developing

00:06:39,180 --> 00:06:44,139
this new version the component

00:06:41,740 --> 00:06:45,910
and that we had to sign off every every

00:06:44,139 --> 00:06:48,970
week or every so often to make sure that

00:06:45,910 --> 00:06:53,800
it worked in the website we were doing

00:06:48,970 --> 00:06:59,979
manual testing in Safari Firefox home

00:06:53,800 --> 00:07:02,080
edge and I 11 but was not really fun but

00:06:59,979 --> 00:07:05,229
it got us there

00:07:02,080 --> 00:07:07,330
I mean we despite the manual testing and

00:07:05,229 --> 00:07:09,009
the pain but it was we were able to

00:07:07,330 --> 00:07:11,110
prove that we we were capable of

00:07:09,009 --> 00:07:12,970
building a reusable component that could

00:07:11,110 --> 00:07:16,360
be used and shared across all Microsoft

00:07:12,970 --> 00:07:18,759
recent applications so this whole thing

00:07:16,360 --> 00:07:22,090
of this whole bed was very dated and

00:07:18,759 --> 00:07:25,000
everything grew from there so we

00:07:22,090 --> 00:07:28,720
developed new components and midgard was

00:07:25,000 --> 00:07:30,849
bought we added the contact editor so

00:07:28,720 --> 00:07:32,500
that when you open this card you protect

00:07:30,849 --> 00:07:35,110
someone as your contact and then edit or

00:07:32,500 --> 00:07:36,849
view feels alright and the photo picker

00:07:35,110 --> 00:07:39,940
that when you put update a picture or

00:07:36,849 --> 00:07:42,009
your own picture and of course within go

00:07:39,940 --> 00:07:45,400
we got more packages more users more

00:07:42,009 --> 00:07:47,680
work routes with three components we

00:07:45,400 --> 00:07:51,669
have been consuming about 12 workers

00:07:47,680 --> 00:07:53,830
revocation so at that point because we

00:07:51,669 --> 00:07:57,599
were not in one worker we were the dozen

00:07:53,830 --> 00:08:02,849
we did not come for the whole tech stack

00:07:57,599 --> 00:08:05,199
so our testing metrics just exploded

00:08:02,849 --> 00:08:09,400
if we can really have I mean did not

00:08:05,199 --> 00:08:12,759
scared to manually test all over at that

00:08:09,400 --> 00:08:15,340
point we were targeting away and Android

00:08:12,759 --> 00:08:17,919
and iOS on the way we used the way up

00:08:15,340 --> 00:08:20,409
and on the mobile platform we use react

00:08:17,919 --> 00:08:25,020
native and we also use the F native and

00:08:20,409 --> 00:08:27,880
Windows and so we started to look at

00:08:25,020 --> 00:08:33,219
test automation and we will go through

00:08:27,880 --> 00:08:35,409
three aspects we end-to-end testing the

00:08:33,219 --> 00:08:37,240
visual regression and the component

00:08:35,409 --> 00:08:40,029
testing and twenties thing is about

00:08:37,240 --> 00:08:42,070
really testing your whole application in

00:08:40,029 --> 00:08:44,890
in context and visualization is about

00:08:42,070 --> 00:08:46,180
catching a visual reference component

00:08:44,890 --> 00:08:49,240
testing is about testing audio

00:08:46,180 --> 00:08:52,390
components and isolation so for we

00:08:49,240 --> 00:08:53,800
entwisted end-to-end testing of course

00:08:52,390 --> 00:08:56,260
we wanted to test

00:08:53,800 --> 00:08:58,480
full scenarios like as you really

00:08:56,260 --> 00:08:59,769
exercise and use with different programs

00:08:58,480 --> 00:09:04,209
different make the other applications

00:08:59,769 --> 00:09:06,880
but we also added some some measurements

00:09:04,209 --> 00:09:08,709
for performance and visual regression

00:09:06,880 --> 00:09:12,250
because this is the things that really

00:09:08,709 --> 00:09:14,250
hit us most so first we need an

00:09:12,250 --> 00:09:17,740
automation framework to run office and

00:09:14,250 --> 00:09:20,050
each platform has its own way to to

00:09:17,740 --> 00:09:22,600
opponent automate tasks so this spot

00:09:20,050 --> 00:09:26,589
began to end testing is definitely

00:09:22,600 --> 00:09:36,250
platform specific for time reason I will

00:09:26,589 --> 00:09:38,190
program mostly web and windows so so we

00:09:36,250 --> 00:09:41,230
went shopping at the time and

00:09:38,190 --> 00:09:44,709
implemented some end-to-end tests with a

00:09:41,230 --> 00:09:47,290
different automation framework and we

00:09:44,709 --> 00:09:51,579
came up with this totem of automation

00:09:47,290 --> 00:09:56,500
framework on one side we have a native

00:09:51,579 --> 00:09:59,050
platform Android iOS Mac Windows and the

00:09:56,500 --> 00:10:01,240
different automation flavors the most

00:09:59,050 --> 00:10:02,649
common one is appium which supports iOS

00:10:01,240 --> 00:10:07,350
Android and Windows

00:10:02,649 --> 00:10:10,660
but the media team who was in charge of

00:10:07,350 --> 00:10:12,820
developing or targeting with native

00:10:10,660 --> 00:10:14,709
platform found that the windows 32

00:10:12,820 --> 00:10:17,829
support and task with support of a cure

00:10:14,709 --> 00:10:19,540
was not really great so we moved to win

00:10:17,829 --> 00:10:22,540
a driver which you got all types of

00:10:19,540 --> 00:10:24,160
Windows it is executable and really work

00:10:22,540 --> 00:10:27,459
for them they they have stone typing for

00:10:24,160 --> 00:10:31,480
laboratory use iOS and Android still use

00:10:27,459 --> 00:10:34,350
a few on the way you have the Grandpa

00:10:31,480 --> 00:10:36,970
out of all the test automation selenium

00:10:34,350 --> 00:10:39,010
which has been here for ever

00:10:36,970 --> 00:10:41,970
she bought although all the browsers

00:10:39,010 --> 00:10:45,610
it's really like the cross-platform

00:10:41,970 --> 00:10:48,339
destination on up but the setup is very

00:10:45,610 --> 00:10:50,890
painful with selenium and the developer

00:10:48,339 --> 00:10:52,959
experience is a nightmare writing test

00:10:50,890 --> 00:10:53,649
is really painful debugging test is even

00:10:52,959 --> 00:10:56,410
more painful

00:10:53,649 --> 00:10:58,779
you get really cryptic messages and you

00:10:56,410 --> 00:11:00,610
don't know what is going wrong on how to

00:10:58,779 --> 00:11:02,300
do it and the documentation is not

00:11:00,610 --> 00:11:04,399
helping very much

00:11:02,300 --> 00:11:07,250
another one that you tried is webdiver

00:11:04,399 --> 00:11:10,519
which makes all of that better but it's

00:11:07,250 --> 00:11:13,370
still bit fiddly so next we look at

00:11:10,519 --> 00:11:17,839
Cyprus which you will hear a lot more

00:11:13,370 --> 00:11:20,569
about with Glenn and Cyprus is when you

00:11:17,839 --> 00:11:23,389
just to mention just for now built from

00:11:20,569 --> 00:11:27,500
the ground up with focus on the develop

00:11:23,389 --> 00:11:30,529
experience I just wish I could use

00:11:27,500 --> 00:11:33,800
cyclists but we have to support 11 and

00:11:30,529 --> 00:11:36,980
Syfy's only works in home from your

00:11:33,800 --> 00:11:39,230
mother's so this is a no-go for us all

00:11:36,980 --> 00:11:43,850
the components we write all the software

00:11:39,230 --> 00:11:45,500
we write Microsoft is used by people

00:11:43,850 --> 00:11:49,180
like us but also by companies by

00:11:45,500 --> 00:11:52,399
governments by Education people and

00:11:49,180 --> 00:11:55,730
everything has to work in eleven and so

00:11:52,399 --> 00:11:58,310
we we have very wide testing metrics so

00:11:55,730 --> 00:12:01,129
in fortunately we can use ciphers then

00:11:58,310 --> 00:12:03,649
what we tried was puppeteer but it is a

00:12:01,129 --> 00:12:05,870
high-level API on top of the chrome dev

00:12:03,649 --> 00:12:09,500
tools protocol which is used to drive

00:12:05,870 --> 00:12:10,879
home and allows you to do everything

00:12:09,500 --> 00:12:13,759
that you can do in the chrome dev tool

00:12:10,879 --> 00:12:17,899
but from code so there is a very nice

00:12:13,759 --> 00:12:19,279
API that's taxed with typescript typing

00:12:17,899 --> 00:12:21,769
which is very nice for us

00:12:19,279 --> 00:12:24,019
so as you write your test you get a good

00:12:21,769 --> 00:12:26,300
impression about all the API over quite

00:12:24,019 --> 00:12:29,420
typing and everything this is really

00:12:26,300 --> 00:12:31,610
what you want and it's it is the

00:12:29,420 --> 00:12:33,500
puppeteer is developed by chrome dev

00:12:31,610 --> 00:12:35,329
tools team so it's it's really up to

00:12:33,500 --> 00:12:37,189
date and they also implemented the

00:12:35,329 --> 00:12:41,439
Firefox version and there is an

00:12:37,189 --> 00:12:44,809
unofficial popliteal I which I have to

00:12:41,439 --> 00:12:47,019
do fully validate well from what I've

00:12:44,809 --> 00:12:52,639
seen it supports everything that we need

00:12:47,019 --> 00:12:55,309
so we went with Papa on the way we the

00:12:52,639 --> 00:12:58,339
ID to run the and to interest and when

00:12:55,309 --> 00:13:00,339
test is to open an application with a

00:12:58,339 --> 00:13:03,649
bit of your code but you want to test

00:13:00,339 --> 00:13:05,660
the code to test all your scenarios and

00:13:03,649 --> 00:13:12,529
request some screenshots from the tester

00:13:05,660 --> 00:13:15,529
so for that there are different ways you

00:13:12,529 --> 00:13:17,329
can either inject the test you

00:13:15,529 --> 00:13:20,360
your test runner just went up and inject

00:13:17,329 --> 00:13:22,430
the test in the application or your

00:13:20,360 --> 00:13:25,970
application but is run by test when I

00:13:22,430 --> 00:13:27,560
can import like normal module you can

00:13:25,970 --> 00:13:30,769
dynamically import the test as a

00:13:27,560 --> 00:13:35,029
separate bundle so that's the two ways

00:13:30,769 --> 00:13:38,329
to get your test code in you can do that

00:13:35,029 --> 00:13:40,879
using the live site or life application

00:13:38,329 --> 00:13:42,829
or using the test application and you

00:13:40,879 --> 00:13:45,949
can also do that using live data or

00:13:42,829 --> 00:13:48,860
musically mock data or your machi data

00:13:45,949 --> 00:13:51,350
can be like just JSON files or it can be

00:13:48,860 --> 00:13:51,709
a replay of network traffic but you have

00:13:51,350 --> 00:13:57,019
run

00:13:51,709 --> 00:14:00,620
previously on the definition so for

00:13:57,019 --> 00:14:03,410
native platforms unless it platform B

00:14:00,620 --> 00:14:06,800
they have it easy in a way I really envy

00:14:03,410 --> 00:14:09,019
them but the UI is typically very

00:14:06,800 --> 00:14:11,269
isolated the comprehend that they write

00:14:09,019 --> 00:14:12,740
are really isolated from the components

00:14:11,269 --> 00:14:14,809
of the application that they live in

00:14:12,740 --> 00:14:17,149
like if the application that they

00:14:14,809 --> 00:14:19,399
believe in says that all button should

00:14:17,149 --> 00:14:20,750
not should not be think it's only about

00:14:19,399 --> 00:14:22,910
the buttons of the applications not

00:14:20,750 --> 00:14:26,589
about the buttons of our components

00:14:22,910 --> 00:14:29,360
which are injected afterwards so and

00:14:26,589 --> 00:14:31,279
understand if in our applications which

00:14:29,360 --> 00:14:33,740
is pretty much a third party component

00:14:31,279 --> 00:14:36,740
in this application we say that all the

00:14:33,740 --> 00:14:38,329
buttons should have 10 pixel border but

00:14:36,740 --> 00:14:41,360
would not affect the native application

00:14:38,329 --> 00:14:44,720
but our helper comparable existing live

00:14:41,360 --> 00:14:47,509
them so because of his isolation the

00:14:44,720 --> 00:14:50,600
native apps can test in just test

00:14:47,509 --> 00:14:52,730
application we don't have to use live

00:14:50,600 --> 00:14:56,079
application and for them it's also a lot

00:14:52,730 --> 00:14:58,399
easier to just import the the test way

00:14:56,079 --> 00:14:59,209
it's easier to import the test when to

00:14:58,399 --> 00:15:02,420
dynamically

00:14:59,209 --> 00:15:05,600
eject that so on native reuse we import

00:15:02,420 --> 00:15:07,279
the test we use the test application and

00:15:05,600 --> 00:15:09,110
because of the reservation then they can

00:15:07,279 --> 00:15:12,499
use mock data it's it's really simple

00:15:09,110 --> 00:15:15,740
and the format we typically use a replay

00:15:12,499 --> 00:15:18,949
of network traffic on the web we are bit

00:15:15,740 --> 00:15:20,870
less lucky because our our testing

00:15:18,949 --> 00:15:23,990
surface is much bigger

00:15:20,870 --> 00:15:27,950
so not only are with the same code or

00:15:23,990 --> 00:15:31,990
web targets 40-plus websites

00:15:27,950 --> 00:15:33,850
but we will target multiple browsers and

00:15:31,990 --> 00:15:37,190
on the web

00:15:33,850 --> 00:15:40,339
Stein's uh global speed is global

00:15:37,190 --> 00:15:43,190
anything loads are global so if your

00:15:40,339 --> 00:15:44,420
website decides but it's always that the

00:15:43,190 --> 00:15:47,450
consumers are component decides that

00:15:44,420 --> 00:15:49,490
suddenly all readings should have 40

00:15:47,450 --> 00:15:51,980
bits are spreading around around the

00:15:49,490 --> 00:15:55,190
links that will trickle down that will

00:15:51,980 --> 00:15:58,970
cascade down to our components so

00:15:55,190 --> 00:16:02,660
because of that we have to test in their

00:15:58,970 --> 00:16:06,140
live applications we we have to get our

00:16:02,660 --> 00:16:07,910
tests into the live equations to get the

00:16:06,140 --> 00:16:09,709
test in the lab application it's as easy

00:16:07,910 --> 00:16:11,750
to inject them using the test for now

00:16:09,709 --> 00:16:14,480
Ottoman program like to report a New

00:16:11,750 --> 00:16:17,529
Testament we use both strategies it's

00:16:14,480 --> 00:16:20,390
really as simple to do one of Europe and

00:16:17,529 --> 00:16:22,550
because also the data that we saw faced

00:16:20,390 --> 00:16:26,000
in the different application say in our

00:16:22,550 --> 00:16:27,589
crew versus in one time are different in

00:16:26,000 --> 00:16:29,930
our group we can easily see your face

00:16:27,589 --> 00:16:31,820
your image image that you share with the

00:16:29,930 --> 00:16:34,600
person and you're not surprised to see

00:16:31,820 --> 00:16:38,600
that in SharePoint or onedrive

00:16:34,600 --> 00:16:41,930
technically we can do that but and legal

00:16:38,600 --> 00:16:43,310
you also but this is not something you

00:16:41,930 --> 00:16:44,870
expect so you don't surface the same

00:16:43,310 --> 00:16:47,120
data exactly and with your friends any

00:16:44,870 --> 00:16:49,940
different order so because of all these

00:16:47,120 --> 00:16:53,600
differences we have to test against live

00:16:49,940 --> 00:16:55,490
date website and live data which is nice

00:16:53,600 --> 00:16:58,430
because when we really get really poor

00:16:55,490 --> 00:17:01,399
testing surface but but also exposes us

00:16:58,430 --> 00:17:06,230
to very light availability of the whole

00:17:01,399 --> 00:17:09,230
stack so if we test in Outlook and for

00:17:06,230 --> 00:17:11,600
some reason output goes down then our

00:17:09,230 --> 00:17:14,270
test cannot run and we have no idea what

00:17:11,600 --> 00:17:16,130
is going on or if just like one small

00:17:14,270 --> 00:17:20,750
part in the chain in the in the tech

00:17:16,130 --> 00:17:23,390
stack goes down because the availability

00:17:20,750 --> 00:17:27,140
of say getting an auth token to access

00:17:23,390 --> 00:17:29,780
and an end point is 99.99 percent we

00:17:27,140 --> 00:17:32,270
have a 2001 to some chance of but all

00:17:29,780 --> 00:17:35,720
tests will not get enough token and fail

00:17:32,270 --> 00:17:37,550
because the web so it's a bit annoying

00:17:35,720 --> 00:17:39,860
to be exposed to that but

00:17:37,550 --> 00:17:41,210
we have to live with that so we this is

00:17:39,860 --> 00:17:43,910
some work that we have to do to learn

00:17:41,210 --> 00:17:49,940
from native platforms and try to isolate

00:17:43,910 --> 00:17:52,010
us or to shield us from that so another

00:17:49,940 --> 00:17:54,559
thing that you saw this morning in the

00:17:52,010 --> 00:17:57,710
talk from Jennifer with Patti is that

00:17:54,559 --> 00:18:04,400
most of the testing frameworks what they

00:17:57,710 --> 00:18:06,080
do is what the we you define your test

00:18:04,400 --> 00:18:08,360
you say ok I want to go to this URL

00:18:06,080 --> 00:18:13,280
click here on there and then take a

00:18:08,360 --> 00:18:15,679
screenshot this is great but oh our code

00:18:13,280 --> 00:18:18,440
actually lives in 40 different web sites

00:18:15,679 --> 00:18:22,190
it lives in Outlook in SharePoint in one

00:18:18,440 --> 00:18:24,980
right and booting up or loading Outlook

00:18:22,190 --> 00:18:27,200
and reaching your inbox and everything

00:18:24,980 --> 00:18:29,780
takes maybe 30 seconds if you want a

00:18:27,200 --> 00:18:33,440
slow connection so if we were to do that

00:18:29,780 --> 00:18:36,860
then we will have some crimes because

00:18:33,440 --> 00:18:39,500
you might say like ok you you created

00:18:36,860 --> 00:18:42,170
your own end-to-end test framework and

00:18:39,500 --> 00:18:44,120
be like really really another one do we

00:18:42,170 --> 00:18:45,830
really need that and the answer is yes

00:18:44,120 --> 00:18:48,980
unfortunately we have to create our own

00:18:45,830 --> 00:18:50,660
test framework because all the testing

00:18:48,980 --> 00:18:53,870
frameworks that I have seen and I've

00:18:50,660 --> 00:18:55,520
been looking around quite a bit only

00:18:53,870 --> 00:18:57,170
allows you to define the test that goes

00:18:55,520 --> 00:18:58,970
to one website there from one action

00:18:57,170 --> 00:19:01,460
like a screenshot or to some tests and

00:18:58,970 --> 00:19:03,590
then close the browser we cannot do that

00:19:01,460 --> 00:19:06,080
when just opening the website takes 30

00:19:03,590 --> 00:19:08,870
seconds we have thousands of tests we

00:19:06,080 --> 00:19:11,270
cannot we do not have that time luxury

00:19:08,870 --> 00:19:13,700
so we have to create our own testing

00:19:11,270 --> 00:19:16,160
framework that opens a website with

00:19:13,700 --> 00:19:18,170
special ability passing some feature

00:19:16,160 --> 00:19:19,880
flags that you want to test and then

00:19:18,170 --> 00:19:22,220
inject the test code or important and

00:19:19,880 --> 00:19:24,200
then run as many scenarios at you as you

00:19:22,220 --> 00:19:24,980
can like always can show that you can

00:19:24,200 --> 00:19:27,800
and then close

00:19:24,980 --> 00:19:29,300
be done with that website so we have no

00:19:27,800 --> 00:19:34,390
choice but to create our own testing

00:19:29,300 --> 00:19:40,300
framework the typical test opens the

00:19:34,390 --> 00:19:43,760
host application one I shall point and

00:19:40,300 --> 00:19:46,530
import or with all local confuse lag

00:19:43,760 --> 00:19:49,320
that we need importante

00:19:46,530 --> 00:19:51,480
and then upon all the different

00:19:49,320 --> 00:19:53,130
scenarios so in the case of a profile

00:19:51,480 --> 00:19:55,670
card it would open the profile card for

00:19:53,130 --> 00:19:58,730
different types of users of that last

00:19:55,670 --> 00:20:01,950
exercise all the panel's kickthrough

00:19:58,730 --> 00:20:05,610
take some screenshots it will also take

00:20:01,950 --> 00:20:08,340
some performance measurement and also

00:20:05,610 --> 00:20:09,720
take a count of the number of style

00:20:08,340 --> 00:20:14,220
sheets and steroids that were added

00:20:09,720 --> 00:20:18,240
during the test we do that because one

00:20:14,220 --> 00:20:21,600
nice incident that we had where we was

00:20:18,240 --> 00:20:24,900
that when we burnt version of our CSS

00:20:21,600 --> 00:20:29,190
NGS framework but report swimming when

00:20:24,900 --> 00:20:31,050
we're going to made your version the way

00:20:29,190 --> 00:20:33,990
that you do him in change a little bit

00:20:31,050 --> 00:20:35,760
and we we didn't pay attention to this

00:20:33,990 --> 00:20:38,130
and suddenly when we are wondering

00:20:35,760 --> 00:20:39,900
components every time the Cumbrian was

00:20:38,130 --> 00:20:42,060
rendered all the style sheets for web

00:20:39,900 --> 00:20:46,230
component over stereo so vertebra we'll

00:20:42,060 --> 00:20:48,860
add it again so eventually we got in the

00:20:46,230 --> 00:20:54,630
range of 30 40 thousand style sheets of

00:20:48,860 --> 00:20:59,370
salad in 11 in a loop and 11 was not too

00:20:54,630 --> 00:21:01,740
happy some customers who happen to use I

00:20:59,370 --> 00:21:05,190
11 were not too happy IRA

00:21:01,740 --> 00:21:07,680
so we gotten yeah we got an alert and we

00:21:05,190 --> 00:21:09,600
had to call back version very quick and

00:21:07,680 --> 00:21:15,540
then to investigate and add all these

00:21:09,600 --> 00:21:18,750
meters so this is how you get your test

00:21:15,540 --> 00:21:22,140
and how you can test always in iOS and

00:21:18,750 --> 00:21:24,630
take a screenshot from the automation in

00:21:22,140 --> 00:21:27,720
our case we cover hundreds thousands of

00:21:24,630 --> 00:21:29,700
scenarios we probably have some over

00:21:27,720 --> 00:21:32,580
coverage before we test some things too

00:21:29,700 --> 00:21:37,680
much I'm looking forward to the talk

00:21:32,580 --> 00:21:40,140
from clever to see how we work on this

00:21:37,680 --> 00:21:42,060
and in the end what we get is many

00:21:40,140 --> 00:21:50,110
screenshots many many many many studios

00:21:42,060 --> 00:21:51,640
in the orders of the

00:21:50,110 --> 00:21:54,120
screen shots when you are developing you

00:21:51,640 --> 00:21:57,490
don't want to get all these passengers

00:21:54,120 --> 00:22:00,700
so the thing is that if you build your

00:21:57,490 --> 00:22:03,280
test as packages that depend on the

00:22:00,700 --> 00:22:04,480
components that we test then just

00:22:03,280 --> 00:22:07,150
following the dependency dependency

00:22:04,480 --> 00:22:09,309
graph from webpack will only run the

00:22:07,150 --> 00:22:12,670
test for the components that you teach

00:22:09,309 --> 00:22:16,420
and then as you watch your code run the

00:22:12,670 --> 00:22:18,490
test information on it on CI only the

00:22:16,420 --> 00:22:21,580
test from the components that you change

00:22:18,490 --> 00:22:25,120
in encode will happen and already

00:22:21,580 --> 00:22:27,220
pensively so you get much fewer tests so

00:22:25,120 --> 00:22:29,549
now let's talk about the second part

00:22:27,220 --> 00:22:32,520
about the end-to-end testing which is

00:22:29,549 --> 00:22:35,490
very regression testing the visual

00:22:32,520 --> 00:22:37,929
regression testing is platform agnostic

00:22:35,490 --> 00:22:40,929
which is super nice this is where we can

00:22:37,929 --> 00:22:42,429
actually bring a lot and bring some

00:22:40,929 --> 00:22:45,309
value across platforms and across

00:22:42,429 --> 00:22:47,860
projects because in the end what we get

00:22:45,309 --> 00:22:50,620
from all our end-to-end tests in native

00:22:47,860 --> 00:22:52,480
or the web is screenshots it doesn't

00:22:50,620 --> 00:22:57,190
matter how they are produced what we get

00:22:52,480 --> 00:22:58,570
is sprinkles so we can compare all these

00:22:57,190 --> 00:23:01,990
screenshots in JavaScript or in touch

00:22:58,570 --> 00:23:06,010
with so the first thing that we used was

00:23:01,990 --> 00:23:08,230
selling map set match by map box which

00:23:06,010 --> 00:23:10,120
is the library where this is pretty much

00:23:08,230 --> 00:23:14,860
by oh the visual regression testing

00:23:10,120 --> 00:23:19,179
corner and that's incredible what we got

00:23:14,860 --> 00:23:25,330
out of the box on the image on the right

00:23:19,179 --> 00:23:27,150
hand side what you what you have is the

00:23:25,330 --> 00:23:29,919
difference between two images between

00:23:27,150 --> 00:23:32,710
master screenshot and change screenshot

00:23:29,919 --> 00:23:38,679
and you see in red all the pixels

00:23:32,710 --> 00:23:42,360
addiction so I was a big big win but I

00:23:38,679 --> 00:23:42,360
don't know if you can make sense of that

00:23:43,260 --> 00:23:49,270
and it was even worse because I am used

00:23:47,350 --> 00:23:51,940
to - look at these pencils and I cannot

00:23:49,270 --> 00:23:53,230
make sense of that and every every week

00:23:51,940 --> 00:23:55,540
we had different people looking at these

00:23:53,230 --> 00:23:58,030
pictures and then it couldn't make sense

00:23:55,540 --> 00:24:00,340
of it so by showing only the difference

00:23:58,030 --> 00:24:02,530
between two screenshots we lost all the

00:24:00,340 --> 00:24:03,520
context so you could say like okay in

00:24:02,530 --> 00:24:05,950
your

00:24:03,520 --> 00:24:07,929
in your test report you could say I'll

00:24:05,950 --> 00:24:09,580
display the baseline or master

00:24:07,929 --> 00:24:11,380
screenshots on red on the desk Richard

00:24:09,580 --> 00:24:12,730
side-by-side but these screenshots can

00:24:11,380 --> 00:24:14,260
be stored on different storages that

00:24:12,730 --> 00:24:18,429
request left open and then you don't

00:24:14,260 --> 00:24:20,710
have the time of the people so what we

00:24:18,429 --> 00:24:22,960
did is that we award a spring shut if

00:24:20,710 --> 00:24:25,900
you library but generates side by side

00:24:22,960 --> 00:24:28,480
screenshots and that brings all the

00:24:25,900 --> 00:24:31,059
context it works basically like a git

00:24:28,480 --> 00:24:33,400
diff but at the pixel level and this is

00:24:31,059 --> 00:24:35,590
what it looks like so in the middle you

00:24:33,400 --> 00:24:38,160
have the absolute if what we saw before

00:24:35,590 --> 00:24:41,290
just invite the pixels right change and

00:24:38,160 --> 00:24:43,650
on the right-hand side you see the

00:24:41,290 --> 00:24:47,260
screenshot of your change with a ghost

00:24:43,650 --> 00:24:50,890
showing where the peas are change from

00:24:47,260 --> 00:24:54,070
the master and on the left-hand side you

00:24:50,890 --> 00:24:57,280
have the printer for master with the

00:24:54,070 --> 00:24:59,110
server change in your change in read and

00:24:57,280 --> 00:25:01,270
pay just like when you look at the pull

00:24:59,110 --> 00:25:03,970
request and with that you've really

00:25:01,270 --> 00:25:06,190
contextualize the screenshots and that

00:25:03,970 --> 00:25:07,900
makes it's very simple change but it

00:25:06,190 --> 00:25:09,850
makes a huge difference because these

00:25:07,900 --> 00:25:12,610
screenshots are super easy to understand

00:25:09,850 --> 00:25:13,900
and they'll actually never you don't you

00:25:12,610 --> 00:25:17,500
just look at that and you understand

00:25:13,900 --> 00:25:20,110
Morris what happened in this case in the

00:25:17,500 --> 00:25:22,000
middle we see something that says some

00:25:20,110 --> 00:25:24,190
pixels change around the text that says

00:25:22,000 --> 00:25:25,420
profile but if that's all the

00:25:24,190 --> 00:25:27,490
information you have you don't know what

00:25:25,420 --> 00:25:29,980
to do a ruler if you look on the right

00:25:27,490 --> 00:25:31,900
and you see what your chance shows the

00:25:29,980 --> 00:25:33,640
swing LinkedIn and there's a ghost of

00:25:31,900 --> 00:25:35,440
something else but something else is

00:25:33,640 --> 00:25:36,790
just but we change your screen from

00:25:35,440 --> 00:25:39,850
linking for fact we just name it and

00:25:36,790 --> 00:25:42,250
that's it it's okay if we look again at

00:25:39,850 --> 00:25:43,960
the first chance that I show you we get

00:25:42,250 --> 00:25:46,000
to now we get a clearer picture of what

00:25:43,960 --> 00:25:48,790
happened so in the middle you get the

00:25:46,000 --> 00:25:51,700
gibberish with tons of red pixels but

00:25:48,790 --> 00:25:54,370
say that basically everything change if

00:25:51,700 --> 00:25:56,350
you look at the right-hand side watch

00:25:54,370 --> 00:26:00,610
shows your change will be both showing

00:25:56,350 --> 00:26:04,059
what change from the master then it's

00:26:00,610 --> 00:26:06,820
it's a bit more clear what happened here

00:26:04,059 --> 00:26:08,890
is that we just align the typography of

00:26:06,820 --> 00:26:13,590
this panel to match the typography of

00:26:08,890 --> 00:26:13,590
linking and that's it nothing more

00:26:13,810 --> 00:26:20,990
so as we saw in the top from Jennifer

00:26:18,520 --> 00:26:23,990
but she mentioned how to hide some

00:26:20,990 --> 00:26:25,550
elements like third-party components in

00:26:23,990 --> 00:26:27,290
that case we have to do the opposite

00:26:25,550 --> 00:26:29,510
we are the third party component but

00:26:27,290 --> 00:26:31,910
it's consumed by a website so we have to

00:26:29,510 --> 00:26:33,830
do some normalization and there's just a

00:26:31,910 --> 00:26:36,290
snippet of CSS but we're injecting the

00:26:33,830 --> 00:26:40,490
test to basically hide everything that

00:26:36,290 --> 00:26:42,890
is not our component hide the cap I'd

00:26:40,490 --> 00:26:44,600
like the cursor in all the text inputs

00:26:42,890 --> 00:26:46,880
because you don't want to spin shot but

00:26:44,600 --> 00:26:49,790
choose the cursor is blinking there will

00:26:46,880 --> 00:26:52,340
be some noise we saw collapse all the

00:26:49,790 --> 00:26:53,900
animations and position so that whole

00:26:52,340 --> 00:26:58,970
animation and transitions are instant

00:26:53,900 --> 00:27:01,070
over test we also make all the images

00:26:58,970 --> 00:27:06,470
with the brightness of zero so we don't

00:27:01,070 --> 00:27:10,850
because know how to endure images here

00:27:06,470 --> 00:27:13,790
was an image so as we use this

00:27:10,850 --> 00:27:17,570
screenshot between library we improved

00:27:13,790 --> 00:27:20,330
it we made it completely standalone we

00:27:17,570 --> 00:27:24,140
added this punch I light in the middle

00:27:20,330 --> 00:27:25,880
that shows where we are something

00:27:24,140 --> 00:27:28,370
changed so it's easier even if you get a

00:27:25,880 --> 00:27:31,610
really big really full size creature you

00:27:28,370 --> 00:27:33,230
quickly get a good look up we have

00:27:31,610 --> 00:27:35,510
something changed even if it's just like

00:27:33,230 --> 00:27:37,550
one picture you get this orange blob etc

00:27:35,510 --> 00:27:41,740
here you don't want research on this

00:27:37,550 --> 00:27:45,220
Bell we also optimize it a lot

00:27:41,740 --> 00:27:48,320
made it with multi-threaded by default

00:27:45,220 --> 00:27:50,720
we generate a hash of the differences so

00:27:48,320 --> 00:27:52,970
that you can duplicate your differences

00:27:50,720 --> 00:27:56,450
across your path of the screenshot you

00:27:52,970 --> 00:27:58,190
enjoy it report you not official 500

00:27:56,450 --> 00:27:59,870
times of 70 difference if you just

00:27:58,190 --> 00:28:04,790
change one but until we take this or to

00:27:59,870 --> 00:28:06,620
relax you will see once and because we

00:28:04,790 --> 00:28:10,520
highly optimized it and made it each

00:28:06,620 --> 00:28:12,530
process by foot we can now this around

00:28:10,520 --> 00:28:16,100
the face on screen shots per minute and

00:28:12,530 --> 00:28:18,320
by this I mean decoding the baseline

00:28:16,100 --> 00:28:19,760
master images do everything and we

00:28:18,320 --> 00:28:21,740
encode image as PNG

00:28:19,760 --> 00:28:22,700
you can do a thousand times per per

00:28:21,740 --> 00:28:26,570
minute

00:28:22,700 --> 00:28:28,549
and we can try our recipe for this

00:28:26,570 --> 00:28:31,909
wicked fast side-by-side screenshots

00:28:28,549 --> 00:28:35,389
living today just npm install screen

00:28:31,909 --> 00:28:37,399
served if the package is available the

00:28:35,389 --> 00:28:40,460
repository will be public in a few days

00:28:37,399 --> 00:28:44,239
I got all your pores just needing to go

00:28:40,460 --> 00:28:46,549
back to work and actually and I would

00:28:44,239 --> 00:28:47,809
love to hear your feedback and help you

00:28:46,549 --> 00:28:54,999
consider this package you include your

00:28:47,809 --> 00:28:57,259
aunt when testing so we talked about and

00:28:54,999 --> 00:28:58,580
automation frameworks and when testing

00:28:57,259 --> 00:29:01,720
on visualization

00:28:58,580 --> 00:29:05,119
one last point but I would like you to

00:29:01,720 --> 00:29:09,309
talk about this component testing but is

00:29:05,119 --> 00:29:12,710
to test components in isolation and the

00:29:09,309 --> 00:29:16,369
the standard recipe is storybook you

00:29:12,710 --> 00:29:18,919
write stories about your components and

00:29:16,369 --> 00:29:21,830
you can get your report and but renders

00:29:18,919 --> 00:29:25,809
all your components on the side this is

00:29:21,830 --> 00:29:29,299
super super powerful we are embracing

00:29:25,809 --> 00:29:30,769
storybook right now because that way we

00:29:29,299 --> 00:29:33,169
can actually test all our components in

00:29:30,769 --> 00:29:34,700
isolation we can also test

00:29:33,169 --> 00:29:36,379
responsiveness for our conference

00:29:34,700 --> 00:29:41,659
because we can under them in different

00:29:36,379 --> 00:29:43,820
container sizes which is beautiful but

00:29:41,659 --> 00:29:45,559
there's a prime because I mean you test

00:29:43,820 --> 00:29:47,359
your component and isolation and we have

00:29:45,559 --> 00:29:49,009
seen that it's not the world it's not

00:29:47,359 --> 00:29:51,019
the ground hook like all components get

00:29:49,009 --> 00:29:53,289
affected by the style of a worker so

00:29:51,019 --> 00:29:56,720
it's just one more tool in Autobots

00:29:53,289 --> 00:29:58,940
storybook also supports visualization

00:29:56,720 --> 00:30:00,889
testing using chromatic but o matic

00:29:58,940 --> 00:30:04,190
because is something like picks and

00:30:00,889 --> 00:30:08,119
match from my box which is very

00:30:04,190 --> 00:30:15,679
difficult to so we we hope at all

00:30:08,119 --> 00:30:18,080
sensitive in package will help you with

00:30:15,679 --> 00:30:20,299
that thank you so much for having me

00:30:18,080 --> 00:30:23,179
my name is Mata Hari you can find me

00:30:20,299 --> 00:30:27,350
online special one and I hope it was

00:30:23,179 --> 00:30:28,999
helpful but I would really really really

00:30:27,350 --> 00:30:31,759
really appreciate if you could give it a

00:30:28,999 --> 00:30:35,149
shot at this printer different package

00:30:31,759 --> 00:30:40,839
and hopefully it can be

00:30:35,149 --> 00:30:44,269
come basically a package that you can

00:30:40,839 --> 00:30:46,359
use them replace or used to replace your

00:30:44,269 --> 00:30:46,359
existing

00:30:46,430 --> 00:30:53,240

YouTube URL: https://www.youtube.com/watch?v=qzguvJB3AfY


