Title: revo.js 2019 - Csaba Patkós - Clean Architecture: A Twelve Months Journey to Clarity
Publication date: 2019-10-25
Playlist: Revo.js Conf 2019
Description: 
	Clean Architecture: A Twelve Months Journey to Clarity
Presented by Csaba Patkós, at revo.js 2019
https://revojs.ro/2019/speakers/csaba-patkos
---
We believe in change. We believe in proven principles. We believe in choosing the right tool for the job. Come, attend my presentation to get a glimpse at our journey from a monolithic architecture to one driven by Clean Architecture.

I will show you how a project changed over the course of a whole year from a monolith written on top of an Express.js structure, and in various plain and messy JavaScript standards, into a modular Clean Architecture driven design and architecture, and with TypeScript.

We will talk about modules, adopting TypeScript, extracting microservices from existing code, and of course TDD, unit testing, api testing.
Captions: 
	00:00:00,720 --> 00:00:08,230
[Music]

00:00:13,570 --> 00:00:20,450
and one more thing to test works

00:00:18,099 --> 00:00:23,869
welcome to clean architecture the 12

00:00:20,450 --> 00:00:25,579
month journey to clarity I say first of

00:00:23,869 --> 00:00:28,250
all I would like to congratulate the

00:00:25,579 --> 00:00:30,590
organizers for the first ever real

00:00:28,250 --> 00:00:33,260
software conference in Timisoara they

00:00:30,590 --> 00:00:42,650
did a really good job and I'm proud to

00:00:33,260 --> 00:00:46,670
be here my name is Pat Korriban I live

00:00:42,650 --> 00:00:48,949
in Timisoara technically I am team lead

00:00:46,670 --> 00:00:52,129
at see NATO but in the past few months I

00:00:48,949 --> 00:00:57,290
started to move migrated towards

00:00:52,129 --> 00:00:59,839
software and product architecture if you

00:00:57,290 --> 00:01:01,809
seen my talks in the past for the past

00:00:59,839 --> 00:01:05,030
three four years I was talking about

00:01:01,809 --> 00:01:07,520
people skills leadership and so on but

00:01:05,030 --> 00:01:11,119
today we will do architecture and we

00:01:07,520 --> 00:01:14,869
will actually see some code before

00:01:11,119 --> 00:01:17,840
entering into more details I think it is

00:01:14,869 --> 00:01:20,560
very important to have a clear context

00:01:17,840 --> 00:01:23,649
and a little bit of history about myself

00:01:20,560 --> 00:01:28,310
about the company I work for today and

00:01:23,649 --> 00:01:31,070
about the project we will see I started

00:01:28,310 --> 00:01:33,979
coding learning coding about 20 years

00:01:31,070 --> 00:01:37,130
ago or I think that was exactly 20 years

00:01:33,979 --> 00:01:40,850
ago when I started at the University and

00:01:37,130 --> 00:01:44,390
I got my first job the next year and I

00:01:40,850 --> 00:01:47,390
was using a spark computer in 2000 that

00:01:44,390 --> 00:01:49,189
was so cool for that student of course I

00:01:47,390 --> 00:01:51,350
knew nothing about programming design

00:01:49,189 --> 00:01:54,229
patterns architect architecture

00:01:51,350 --> 00:01:56,509
standards and so on I barely scratched

00:01:54,229 --> 00:01:58,789
the surface of programming but I was

00:01:56,509 --> 00:02:02,020
scratching my head a lot because I was

00:01:58,789 --> 00:02:05,569
assigned to a new project to work along

00:02:02,020 --> 00:02:07,850
in a programming language I never heard

00:02:05,569 --> 00:02:12,140
about maybe you need a it is called

00:02:07,850 --> 00:02:16,459
tickle TK I was given two big books and

00:02:12,140 --> 00:02:18,680
told okay to the project and what is the

00:02:16,459 --> 00:02:21,710
project about right a microprocessor

00:02:18,680 --> 00:02:24,410
simulator for a microprocessor called

00:02:21,710 --> 00:02:32,060
dwarf probably you never heard

00:02:24,410 --> 00:02:34,250
but it's okay the whole process was very

00:02:32,060 --> 00:02:36,890
intensive for me I had to learn a lot

00:02:34,250 --> 00:02:40,190
without exactly knowing to which

00:02:36,890 --> 00:02:42,290
direction to go but at the moment I was

00:02:40,190 --> 00:02:47,750
very happy I was the student I had a job

00:02:42,290 --> 00:02:50,180
high life and in hindsight this was the

00:02:47,750 --> 00:02:53,000
project that opened my eyes toward

00:02:50,180 --> 00:02:55,490
software development and made me curious

00:02:53,000 --> 00:02:57,770
and passionate about doing it

00:02:55,490 --> 00:02:59,270
however after finishing my studies I

00:02:57,770 --> 00:03:01,820
somehow ended up in network

00:02:59,270 --> 00:03:05,720
administration Linux servers and so on

00:03:01,820 --> 00:03:07,940
until 10 years ago where a company

00:03:05,720 --> 00:03:11,900
called C Neto hired me as a junior or

00:03:07,940 --> 00:03:14,240
mid-level software developer I was very

00:03:11,900 --> 00:03:16,400
lucky because it was the moment when the

00:03:14,240 --> 00:03:19,190
company started to adopt agile

00:03:16,400 --> 00:03:22,070
principles and practices and back then

00:03:19,190 --> 00:03:25,640
it was I believe one of the first three

00:03:22,070 --> 00:03:29,180
companies in Romania who knew about AJ

00:03:25,640 --> 00:03:35,560
and I had an opportunity to learn a lot

00:03:29,180 --> 00:03:39,230
did I change the slide now okay I

00:03:35,560 --> 00:03:42,200
learned a lot about TDD agile principles

00:03:39,230 --> 00:03:44,720
practices solid practices domain-driven

00:03:42,200 --> 00:03:46,340
design and because we started a project

00:03:44,720 --> 00:03:49,280
at the same time I had the opportunity

00:03:46,340 --> 00:03:53,240
to actually apply all the stuff I read

00:03:49,280 --> 00:03:55,430
in all those books in 2014 I discovered

00:03:53,240 --> 00:03:57,740
conferences I really liked them the

00:03:55,430 --> 00:04:01,460
first one was in 2014 that's a picture

00:03:57,740 --> 00:04:03,950
taken by me the person on the stage is

00:04:01,460 --> 00:04:07,460
Jared measurers the writer of xunit

00:04:03,950 --> 00:04:09,530
design pattern and after that I went to

00:04:07,460 --> 00:04:11,570
a lot of conferences and at some point I

00:04:09,530 --> 00:04:14,630
realized that we have an experience and

00:04:11,570 --> 00:04:18,250
some knowledge at that I learned at the

00:04:14,630 --> 00:04:21,140
company that I can share with others and

00:04:18,250 --> 00:04:23,000
I believe that I was the first person

00:04:21,140 --> 00:04:25,130
from Romania to ever speak at a July

00:04:23,000 --> 00:04:27,920
conference in the United States which is

00:04:25,130 --> 00:04:28,580
the biggest conference agile conference

00:04:27,920 --> 00:04:31,490
in the world

00:04:28,580 --> 00:04:35,450
but enough about me let's get to our

00:04:31,490 --> 00:04:38,450
project the main project was started in

00:04:35,450 --> 00:04:40,880
2010 and it is still ongoing of course

00:04:38,450 --> 00:04:43,370
imagine it as a big server with a lot of

00:04:40,880 --> 00:04:46,580
disks our operating system on top of it

00:04:43,370 --> 00:04:48,910
and at the beginning it was just for

00:04:46,580 --> 00:04:53,000
file sharing and data protection like a

00:04:48,910 --> 00:04:55,670
NASA on steroids at some point we

00:04:53,000 --> 00:04:59,000
realized that we have this machine with

00:04:55,670 --> 00:05:01,610
a lot of CPU and memory why not run some

00:04:59,000 --> 00:05:04,910
virtual machines inside that was before

00:05:01,610 --> 00:05:07,430
the term hyper-converged which is known

00:05:04,910 --> 00:05:09,980
today in the industry was defined but

00:05:07,430 --> 00:05:13,160
selling hardware and software is not

00:05:09,980 --> 00:05:15,860
enough anymore in a connected world so

00:05:13,160 --> 00:05:18,170
we ended up creating a new project to

00:05:15,860 --> 00:05:21,830
offer connected services for these

00:05:18,170 --> 00:05:26,690
devices and our end users and this is

00:05:21,830 --> 00:05:28,910
the project about which we will talk it

00:05:26,690 --> 00:05:32,090
is called Seattle Central and it is a

00:05:28,910 --> 00:05:35,450
service as a Pratt as a platform it is

00:05:32,090 --> 00:05:39,560
used by the end users by the devices

00:05:35,450 --> 00:05:41,390
themselves and by us the company I don't

00:05:39,560 --> 00:05:43,790
intend this to be a presentation about

00:05:41,390 --> 00:05:48,650
the company but I want you to understand

00:05:43,790 --> 00:05:51,050
how and what this project does so

00:05:48,650 --> 00:05:53,180
end-users can do fleet management the

00:05:51,050 --> 00:05:57,400
license management and so on of their

00:05:53,180 --> 00:06:00,620
product and that we the employees can do

00:05:57,400 --> 00:06:08,990
manage orders clients and products and

00:06:00,620 --> 00:06:11,150
so on the project was started in 2017 at

00:06:08,990 --> 00:06:14,270
first it was a one-man show followed by

00:06:11,150 --> 00:06:18,170
a small team created around the project

00:06:14,270 --> 00:06:20,300
it was built from the start on modern

00:06:18,170 --> 00:06:22,550
and well-known frameworks like react

00:06:20,300 --> 00:06:27,770
Express sequel eyes and lately

00:06:22,550 --> 00:06:30,740
typescript and today it is composed of a

00:06:27,770 --> 00:06:34,640
set of multiple micro services at the

00:06:30,740 --> 00:06:38,120
start it was just one service in 2018 a

00:06:34,640 --> 00:06:40,790
year ago the original programmer and

00:06:38,120 --> 00:06:43,550
team lead left the company and I ended

00:06:40,790 --> 00:06:45,890
up to take over the project as a team

00:06:43,550 --> 00:06:50,600
lead and as the responsible developer

00:06:45,890 --> 00:06:52,159
for the backend so the rest of the

00:06:50,600 --> 00:06:55,489
presentation will be about

00:06:52,159 --> 00:06:58,129
the backend and not the front the back

00:06:55,489 --> 00:07:01,519
end was created in Express JavaScript

00:06:58,129 --> 00:07:03,709
and civilized the project just came out

00:07:01,519 --> 00:07:06,379
from prototype and ended up in

00:07:03,709 --> 00:07:11,269
production a couple of months before I

00:07:06,379 --> 00:07:13,519
took it over and it doesn't matter how

00:07:11,269 --> 00:07:16,249
well intended you are or how agile is

00:07:13,519 --> 00:07:18,019
your company and the team sometimes it

00:07:16,249 --> 00:07:20,779
happens that software ends up in

00:07:18,019 --> 00:07:22,459
production even though it was not ready

00:07:20,779 --> 00:07:24,740
it was working perfectly

00:07:22,459 --> 00:07:27,110
but from an architectural and code

00:07:24,740 --> 00:07:31,219
standard perspective there were

00:07:27,110 --> 00:07:33,709
legislate some issues so my manager came

00:07:31,219 --> 00:07:36,879
to me after a month or so and asked me

00:07:33,709 --> 00:07:41,360
to add three fields on the product

00:07:36,879 --> 00:07:44,719
entity sure how hard can it be right we

00:07:41,360 --> 00:07:46,819
have civilized we have after two hours I

00:07:44,719 --> 00:07:50,119
realized it was a three days work but

00:07:46,819 --> 00:07:57,199
why the project was organized like this

00:07:50,119 --> 00:08:00,139
as you can see there is no architecture

00:07:57,199 --> 00:08:02,209
representing anything but frameworks if

00:08:00,139 --> 00:08:04,699
you see this you know okay it's an

00:08:02,209 --> 00:08:07,009
express project maybe some sequel I

00:08:04,699 --> 00:08:08,899
stuff mixed in there but what does the

00:08:07,009 --> 00:08:12,050
project though who knows what the

00:08:08,899 --> 00:08:13,429
project does right now nobody because I

00:08:12,050 --> 00:08:15,639
didn't tell you and you cannot figure

00:08:13,429 --> 00:08:22,039
out from there

00:08:15,639 --> 00:08:23,959
so I couldn't figure out either and when

00:08:22,039 --> 00:08:25,699
I started to look for the files I have

00:08:23,959 --> 00:08:30,679
to change to introduce those three

00:08:25,699 --> 00:08:34,099
fields I found this on this screen you

00:08:30,679 --> 00:08:36,680
can see about 15 to 20 files highlighted

00:08:34,099 --> 00:08:40,430
in blue and these are just what I could

00:08:36,680 --> 00:08:44,420
find yesterday when I picked up this

00:08:40,430 --> 00:08:46,759
screenshot one year ago I am certain

00:08:44,420 --> 00:08:50,389
there were 30 plus files I had to modify

00:08:46,759 --> 00:08:55,490
and many of those files had several

00:08:50,389 --> 00:08:58,670
methods outputting or requiring the

00:08:55,490 --> 00:09:02,600
product object in different ways so I

00:08:58,670 --> 00:09:05,000
had to do like 60 or more changes just

00:09:02,600 --> 00:09:07,070
to add three fields on an object that's

00:09:05,000 --> 00:09:09,860
insane

00:09:07,070 --> 00:09:12,990
so what can we do to make it better

00:09:09,860 --> 00:09:17,339
clean architecture to the rescue I read

00:09:12,990 --> 00:09:19,350
the book about 2 months before I started

00:09:17,339 --> 00:09:21,899
to work on this project and started to

00:09:19,350 --> 00:09:25,649
apply a few ideas on the previous

00:09:21,899 --> 00:09:28,529
project so I said ok let's try it what

00:09:25,649 --> 00:09:32,160
what is clean architecture to define it

00:09:28,529 --> 00:09:35,250
in a single sentence it is a gel solid

00:09:32,160 --> 00:09:39,560
principles applied to modules instead of

00:09:35,250 --> 00:09:42,209
grass seeds but if you try to do this

00:09:39,560 --> 00:09:45,180
you will observe that there is a problem

00:09:42,209 --> 00:09:48,810
ok I applied a single responsibility

00:09:45,180 --> 00:09:52,050
principle to a module but what classes

00:09:48,810 --> 00:09:54,600
should go into which module for this

00:09:52,050 --> 00:09:58,140
cleaner kit actually introduced some

00:09:54,600 --> 00:10:03,180
matrix which are pretty easy to

00:09:58,140 --> 00:10:06,209
understand but they are a lot of them so

00:10:03,180 --> 00:10:09,360
clean architecture is complex but not

00:10:06,209 --> 00:10:11,670
hard because of this complexity I

00:10:09,360 --> 00:10:14,580
decided that for this talk I will just

00:10:11,670 --> 00:10:17,250
take three ideas from the book and show

00:10:14,580 --> 00:10:26,700
you how we applied them and and how the

00:10:17,250 --> 00:10:28,380
project changed if you are curious the

00:10:26,700 --> 00:10:31,020
book is called clean architecture

00:10:28,380 --> 00:10:32,990
written by Robert C Martin and if you

00:10:31,020 --> 00:10:38,820
scan that it will bring you to the

00:10:32,990 --> 00:10:41,820
Amazon Web page so the book recommends

00:10:38,820 --> 00:10:45,660
to organize your project in one of two

00:10:41,820 --> 00:10:49,740
ways either you go and make your main

00:10:45,660 --> 00:10:51,540
folders for main modules the layers from

00:10:49,740 --> 00:10:56,610
the clean architecture from the schema

00:10:51,540 --> 00:10:59,100
or you make your modules the entities

00:10:56,610 --> 00:11:01,860
from the schema let's analyze it a

00:10:59,100 --> 00:11:04,620
little bit so in the middle of the

00:11:01,860 --> 00:11:07,890
circles we have the entities these are

00:11:04,620 --> 00:11:10,230
the business rules that are essential

00:11:07,890 --> 00:11:13,010
for the business not for the application

00:11:10,230 --> 00:11:15,750
if you think of them stuff you would do

00:11:13,010 --> 00:11:19,950
in the same business if you wouldn't

00:11:15,750 --> 00:11:20,820
have a computer then there are the use

00:11:19,950 --> 00:11:23,640
cases

00:11:20,820 --> 00:11:27,660
these are application business rules

00:11:23,640 --> 00:11:30,660
that add extra functionality on top of

00:11:27,660 --> 00:11:31,740
your business for example when an

00:11:30,660 --> 00:11:34,980
end-user first

00:11:31,740 --> 00:11:37,950
powers on one of our product it goes

00:11:34,980 --> 00:11:42,740
through a setup screen a first-time

00:11:37,950 --> 00:11:46,590
setup like when you power on your TV if

00:11:42,740 --> 00:11:51,150
there is no product or no license for a

00:11:46,590 --> 00:11:53,370
product recorded in senato central they

00:11:51,150 --> 00:11:56,580
won't be able to use the product so this

00:11:53,370 --> 00:11:59,520
is a limitation or a feature which was

00:11:56,580 --> 00:12:03,720
introduced by our business logic through

00:11:59,520 --> 00:12:06,080
our application then you have the

00:12:03,720 --> 00:12:09,030
interface adapters the gateways

00:12:06,080 --> 00:12:12,360
presenters controllers and finally the

00:12:09,030 --> 00:12:18,030
rest of the stuff like frameworks

00:12:12,360 --> 00:12:21,060
databases web UI and so on so what if we

00:12:18,030 --> 00:12:23,040
try to create the project on the left

00:12:21,060 --> 00:12:25,950
you have the original screen shot from

00:12:23,040 --> 00:12:31,520
2018 on the right you have a screen shot

00:12:25,950 --> 00:12:35,280
as the project is yesterday instead or

00:12:31,520 --> 00:12:40,580
Express frameworks equalise what you see

00:12:35,280 --> 00:12:44,760
are our entities you can see product

00:12:40,580 --> 00:12:47,570
maintenance services email module and so

00:12:44,760 --> 00:12:53,130
on and inside each of these modules

00:12:47,570 --> 00:12:55,830
there is a mini architecture all or only

00:12:53,130 --> 00:12:58,020
some of the architectural parts can be

00:12:55,830 --> 00:13:02,400
find in each folder so we have

00:12:58,020 --> 00:13:04,650
controllers ACL implementations router

00:13:02,400 --> 00:13:07,710
presenter which are part of the

00:13:04,650 --> 00:13:11,070
framework side then we have factories

00:13:07,710 --> 00:13:14,070
repositories gateways and which are part

00:13:11,070 --> 00:13:17,670
of the adapter side then in each folder

00:13:14,070 --> 00:13:21,300
we may have services which are our use

00:13:17,670 --> 00:13:23,640
cases then have the real models for the

00:13:21,300 --> 00:13:27,000
product from a civilized perspective and

00:13:23,640 --> 00:13:32,490
of course we also have our tests here we

00:13:27,000 --> 00:13:34,020
will see later why so far this was a big

00:13:32,490 --> 00:13:36,600
step forward

00:13:34,020 --> 00:13:39,390
what you've seen was the result of a

00:13:36,600 --> 00:13:43,950
much longer process this started a year

00:13:39,390 --> 00:13:48,149
ago and it is still in progress to

00:13:43,950 --> 00:13:50,700
decide which classes go into which

00:13:48,149 --> 00:13:52,110
folders missus just saying okay I do

00:13:50,700 --> 00:13:55,230
this architecture here

00:13:52,110 --> 00:13:57,690
we employed a lot the single

00:13:55,230 --> 00:13:59,459
responsibility principle you probably

00:13:57,690 --> 00:14:01,920
know from Robert Sumati

00:13:59,459 --> 00:14:04,890
it says a class should have only one

00:14:01,920 --> 00:14:08,279
reason to change and that this principle

00:14:04,890 --> 00:14:13,050
is not about code it's about people it's

00:14:08,279 --> 00:14:16,610
about actors so when someone asks when

00:14:13,050 --> 00:14:20,220
the product manager asks for a change

00:14:16,610 --> 00:14:23,279
then it should happen only on one module

00:14:20,220 --> 00:14:27,750
which is used by the product manager and

00:14:23,279 --> 00:14:29,790
shouldn't affect anything else so let's

00:14:27,750 --> 00:14:34,620
get back to our examples with the three

00:14:29,790 --> 00:14:36,480
fields information about products are

00:14:34,620 --> 00:14:39,360
seen on the user dashboard as well of

00:14:36,480 --> 00:14:41,730
course but requests from the product

00:14:39,360 --> 00:14:47,839
manager to add those fields shouldn't

00:14:41,730 --> 00:14:47,839
make me change the user dashboard right

00:14:48,860 --> 00:14:54,779
we employed again some clean

00:14:51,390 --> 00:14:56,430
architecture ideas I zoomed in on the

00:14:54,779 --> 00:14:59,970
bottom right where you have a little

00:14:56,430 --> 00:15:02,130
schema please observe that in the top

00:14:59,970 --> 00:15:04,920
left of the schema you have that object

00:15:02,130 --> 00:15:08,220
called presenter which we found very

00:15:04,920 --> 00:15:10,200
very useful because all of these

00:15:08,220 --> 00:15:12,300
controllers had their own methods to

00:15:10,200 --> 00:15:14,550
present the product they were from

00:15:12,300 --> 00:15:16,980
different modules even if I organized

00:15:14,550 --> 00:15:19,470
the project the controller's still

00:15:16,980 --> 00:15:22,820
called the same calls from the to the

00:15:19,470 --> 00:15:29,510
database and outputted the JSON

00:15:22,820 --> 00:15:29,510
formatted by themselves so we started by

00:15:29,720 --> 00:15:40,380
extracting presenters from the product

00:15:33,209 --> 00:15:45,029
controller then from each of the other

00:15:40,380 --> 00:15:47,279
15 or so controllers we extracted the

00:15:45,029 --> 00:15:49,370
relevant code and move them to the

00:15:47,279 --> 00:15:53,060
prison

00:15:49,370 --> 00:15:55,639
what we ended up was only two

00:15:53,060 --> 00:15:59,610
representations for the product model

00:15:55,639 --> 00:16:02,610
instead of 15 or 30 or how many there

00:15:59,610 --> 00:16:05,399
were at the beginning one representation

00:16:02,610 --> 00:16:08,100
for the client facing request and one

00:16:05,399 --> 00:16:10,889
representation for the internal facing

00:16:08,100 --> 00:16:13,649
requests the internal product may have

00:16:10,889 --> 00:16:15,720
some sensible information which only we

00:16:13,649 --> 00:16:20,209
can see at the company but everybody

00:16:15,720 --> 00:16:20,209
else can see the other representations

00:16:21,079 --> 00:16:31,459
okay but how we did this first of all we

00:16:28,019 --> 00:16:34,610
created an example here a user presenter

00:16:31,459 --> 00:16:38,459
presenters can talk between each other

00:16:34,610 --> 00:16:44,009
and a user presenter uses a product

00:16:38,459 --> 00:16:45,209
presenter then in our router which is a

00:16:44,009 --> 00:16:49,430
work in progress

00:16:45,209 --> 00:16:52,889
we created a presenter of type user

00:16:49,430 --> 00:16:56,220
presenter and passed it to our user

00:16:52,889 --> 00:17:00,209
controller and in the user controller

00:16:56,220 --> 00:17:04,260
you can see that it receives a presenter

00:17:00,209 --> 00:17:06,809
of type presenter each presenter has a

00:17:04,260 --> 00:17:10,500
base class everybody extends the same

00:17:06,809 --> 00:17:14,250
class type of type presenter and then it

00:17:10,500 --> 00:17:18,240
just calls presenter present no more any

00:17:14,250 --> 00:17:21,679
controller knows anything about how the

00:17:18,240 --> 00:17:25,620
output is formatted and each module

00:17:21,679 --> 00:17:31,590
representing model or a business entity

00:17:25,620 --> 00:17:34,020
has an assigned presenter so now the

00:17:31,590 --> 00:17:36,390
user controller will still show the user

00:17:34,020 --> 00:17:39,179
dashboard with the user product

00:17:36,390 --> 00:17:43,730
information inside but without any

00:17:39,179 --> 00:17:46,830
knowledge about product and this led to

00:17:43,730 --> 00:17:49,860
the following improvements so how many

00:17:46,830 --> 00:17:52,140
files do I have to change now for the

00:17:49,860 --> 00:17:55,919
three new fields well I have to change

00:17:52,140 --> 00:17:57,929
one presenter I have to create a

00:17:55,919 --> 00:18:01,760
database migration force equalize

00:17:57,929 --> 00:18:04,130
because frameworks I have to update the

00:18:01,760 --> 00:18:08,870
civilized model for the product because

00:18:04,130 --> 00:18:12,710
frameworks and maybe I have to change

00:18:08,870 --> 00:18:15,320
one controller and one use case if the

00:18:12,710 --> 00:18:19,370
new fields are connected with some new

00:18:15,320 --> 00:18:22,070
logic so that's a ten times less

00:18:19,370 --> 00:18:26,320
modifications needed and twenty five

00:18:22,070 --> 00:18:26,320
seven times less dope code duplication

00:18:28,330 --> 00:18:42,650
and two extra tips move tests close to

00:18:37,250 --> 00:18:44,840
the source code when I started to work

00:18:42,650 --> 00:18:49,880
on this project there was a huge test

00:18:44,840 --> 00:18:53,600
folder without any organization just a

00:18:49,880 --> 00:18:56,150
test after test after test and I asked

00:18:53,600 --> 00:18:59,330
myself ok which are the test files

00:18:56,150 --> 00:19:02,630
testing let's say the product service

00:18:59,330 --> 00:19:05,810
that was difficult to find but if you

00:19:02,630 --> 00:19:08,510
take both your unit tests and in our

00:19:05,810 --> 00:19:12,710
case our API test and keep them in the

00:19:08,510 --> 00:19:18,020
same module you will be able to focus on

00:19:12,710 --> 00:19:19,970
that module when doing TDD and when just

00:19:18,020 --> 00:19:21,770
trying to update some tests because you

00:19:19,970 --> 00:19:23,900
don't have to keep in your mind to

00:19:21,770 --> 00:19:28,730
directory structures and jump from one

00:19:23,900 --> 00:19:32,930
place to another and another interesting

00:19:28,730 --> 00:19:35,990
thing was switching to typescript but

00:19:32,930 --> 00:19:39,800
why why wasn't it good it was written in

00:19:35,990 --> 00:19:41,870
JavaScript why not keep JavaScript so

00:19:39,800 --> 00:19:44,300
the project was one and a half years old

00:19:41,870 --> 00:19:47,960
when I started to work on it and in

00:19:44,300 --> 00:19:50,590
those one and half years there were four

00:19:47,960 --> 00:19:53,750
different JavaScript standards

00:19:50,590 --> 00:19:57,410
implemented on the project at the same

00:19:53,750 --> 00:20:00,230
time so now how should I declare an

00:19:57,410 --> 00:20:02,180
object should I create a class to

00:20:00,230 --> 00:20:04,340
delegate a function returning other

00:20:02,180 --> 00:20:08,090
functions or should I create a function

00:20:04,340 --> 00:20:11,000
returning a closure so we just went with

00:20:08,090 --> 00:20:13,880
something standard typescript because

00:20:11,000 --> 00:20:15,419
you have to write a little bit more but

00:20:13,880 --> 00:20:18,229
you get types and

00:20:15,419 --> 00:20:23,669
the code becomes much more expressive

00:20:18,229 --> 00:20:26,759
then we started to initialize all our

00:20:23,669 --> 00:20:29,789
objects in the applications entry point

00:20:26,759 --> 00:20:32,909
that would be your up tiers if you are

00:20:29,789 --> 00:20:35,789
on Express or in our example it was the

00:20:32,909 --> 00:20:38,389
route 30s but that is just for a

00:20:35,789 --> 00:20:42,629
temporary place for technical reasons

00:20:38,389 --> 00:20:45,450
the idea is that you should have all the

00:20:42,629 --> 00:20:46,139
objects initialized when the application

00:20:45,450 --> 00:20:48,450
starts

00:20:46,139 --> 00:20:51,599
those are your instances and they will

00:20:48,450 --> 00:20:55,829
live as long as the application runs if

00:20:51,599 --> 00:20:58,349
you do proper typing you won't be able

00:20:55,829 --> 00:21:01,289
to create for example cyclic

00:20:58,349 --> 00:21:04,679
dependencies which we actually had about

00:21:01,289 --> 00:21:05,899
three and it was difficult no did we

00:21:04,679 --> 00:21:11,179
clear them

00:21:05,899 --> 00:21:15,359
yes yes we did there's my colleague okay

00:21:11,179 --> 00:21:18,389
and one more thing I like about

00:21:15,359 --> 00:21:20,579
typescript and strongly and statically

00:21:18,389 --> 00:21:26,609
typed languages is that if you are

00:21:20,579 --> 00:21:30,359
working with beginner programmers or

00:21:26,609 --> 00:21:33,629
mid-level developers they may or may not

00:21:30,359 --> 00:21:37,200
understand design patterns if you are a

00:21:33,629 --> 00:21:39,239
really good programmer and you know how

00:21:37,200 --> 00:21:42,389
the patterns are implemented

00:21:39,239 --> 00:21:45,239
theoretically and you apply the pattern

00:21:42,389 --> 00:21:46,889
on a dynamic language you would end up

00:21:45,239 --> 00:21:49,919
with much less code and much less

00:21:46,889 --> 00:21:52,079
classes instead of five classes you may

00:21:49,919 --> 00:21:55,409
end up with two the pattern is still

00:21:52,079 --> 00:21:58,589
there but it is hidden if you have to

00:21:55,409 --> 00:22:01,969
write the proper interfaces and you have

00:21:58,589 --> 00:22:05,339
to extend the proper abstract classes

00:22:01,969 --> 00:22:07,379
that makes your code mirror the schemas

00:22:05,339 --> 00:22:11,729
from the book so it is much easier to

00:22:07,379 --> 00:22:14,909
explain to your junior colleagues that

00:22:11,729 --> 00:22:16,979
is a factory pattern and these two pages

00:22:14,909 --> 00:22:19,820
from this book will always help you

00:22:16,979 --> 00:22:19,820
understand that

00:22:20,570 --> 00:22:27,839
so just to recap before we finish it

00:22:25,099 --> 00:22:29,280
please try to make your architecture in

00:22:27,839 --> 00:22:32,730
a way that reflects what the

00:22:29,280 --> 00:22:35,940
does and not what are the frameworks it

00:22:32,730 --> 00:22:41,160
is built on try to apply the solid

00:22:35,940 --> 00:22:43,670
principles to your project so that clean

00:22:41,160 --> 00:22:46,890
architecture is respected

00:22:43,670 --> 00:22:51,060
try using presenters they are magic I

00:22:46,890 --> 00:22:53,640
tell you they are magic adopt strongly

00:22:51,060 --> 00:22:56,300
and statically typed language and keep

00:22:53,640 --> 00:23:01,260
your tests close to your source code

00:22:56,300 --> 00:23:03,930
thank you very much if you scan that you

00:23:01,260 --> 00:23:05,790
will get my contact details I am open to

00:23:03,930 --> 00:23:08,310
any type of questions in the coffee

00:23:05,790 --> 00:23:10,890
break and you can also send me an email

00:23:08,310 --> 00:23:13,590
or contact me through LinkedIn all the

00:23:10,890 --> 00:23:14,300
links inside the QR code thank you very

00:23:13,590 --> 00:23:15,830
much

00:23:14,300 --> 00:23:23,440
[Applause]

00:23:15,830 --> 00:23:23,440

YouTube URL: https://www.youtube.com/watch?v=hATkIlJNqi8


