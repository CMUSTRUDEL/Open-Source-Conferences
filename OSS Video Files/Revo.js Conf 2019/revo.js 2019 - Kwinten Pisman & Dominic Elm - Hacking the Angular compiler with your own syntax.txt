Title: revo.js 2019 - Kwinten Pisman & Dominic Elm - Hacking the Angular compiler with your own syntax
Publication date: 2019-10-25
Playlist: Revo.js Conf 2019
Description: 
	Hacking the Angular compiler with your own syntax
Presented by Kwinten Pisman & Dominic Elm, at revo.js 2019
https://revojs.ro/2019/agenda/angular
---
In this duo-talk, Kwinten Pisman and Dominic Elm are going to take us on a deep dive into how Angular transforms components into DOM elements.

We will see how we hooked into this process to be able to teach our own template syntax to Angular so we can make our own code more concise and start using some features/APIs we've always wanted.

Attendees will walk away with a deep understanding of the Angular compiler and learn an (experimental) way to hack their own syntax into it!
Captions: 
	00:00:00,000 --> 00:00:15,660
oh yeah so hi everyone

00:00:13,610 --> 00:00:18,180
dominic and I are super excited to be

00:00:15,660 --> 00:00:19,650
here first edition of rave oh yes it's

00:00:18,180 --> 00:00:21,300
been pretty impressing so far and I want

00:00:19,650 --> 00:00:22,920
to give a like we want to give a

00:00:21,300 --> 00:00:25,949
personal shout out to the transcribing

00:00:22,920 --> 00:00:30,269
because it's like what is that that's so

00:00:25,949 --> 00:00:32,460
impressive this is amazing so um today

00:00:30,269 --> 00:00:34,200
dominic and I are going to talk but

00:00:32,460 --> 00:00:35,370
before we start I want to start by

00:00:34,200 --> 00:00:38,160
asking you a question

00:00:35,370 --> 00:00:41,280
and that question is do you still

00:00:38,160 --> 00:00:44,510
understand the code that you wrote six

00:00:41,280 --> 00:00:47,789
months ago one stanza code show of hands

00:00:44,510 --> 00:00:51,690
I'm gonna put mine down because I don't

00:00:47,789 --> 00:00:53,340
do you Dominic I don't cuz I always I I

00:00:51,690 --> 00:00:54,870
don't even remember what I have for

00:00:53,340 --> 00:00:57,270
breakfast yesterday so how am I supposed

00:00:54,870 --> 00:00:57,750
to understand code that I like wrote six

00:00:57,270 --> 00:01:00,899
months ago

00:00:57,750 --> 00:01:02,399
same it's it's super hardened and for

00:01:00,899 --> 00:01:03,570
the people who still had our hands up do

00:01:02,399 --> 00:01:06,960
you understand the code that your

00:01:03,570 --> 00:01:08,880
co-workers wrote six months ago or how

00:01:06,960 --> 00:01:12,180
easy is it to understand the code that

00:01:08,880 --> 00:01:13,409
someone else wrote and then even even

00:01:12,180 --> 00:01:14,880
further what if you need to change

00:01:13,409 --> 00:01:16,740
something to code that someone else

00:01:14,880 --> 00:01:23,790
wrote that's this is kind of how it

00:01:16,740 --> 00:01:26,610
makes me feel some time no no no because

00:01:23,790 --> 00:01:28,560
well the problem is that code should

00:01:26,610 --> 00:01:29,939
express intent right it should be

00:01:28,560 --> 00:01:31,650
expressive it should be easy to

00:01:29,939 --> 00:01:34,020
understand if we take a look at our code

00:01:31,650 --> 00:01:35,640
or somebody else's code it should be

00:01:34,020 --> 00:01:37,770
easy to understand what it does and what

00:01:35,640 --> 00:01:39,810
it's supposed to do right but this is

00:01:37,770 --> 00:01:42,210
actually not that easy because often we

00:01:39,810 --> 00:01:44,250
lack documentation so it it is a

00:01:42,210 --> 00:01:46,500
systemic problem now the question is

00:01:44,250 --> 00:01:49,610
what can you actually do about this well

00:01:46,500 --> 00:01:53,520
what do you do what do we tell our boss

00:01:49,610 --> 00:01:55,470
well I guess we just well we tell them

00:01:53,520 --> 00:01:58,079
we've throw it away and we rewrite it

00:01:55,470 --> 00:01:59,460
from scratch that's easy that's there

00:01:58,079 --> 00:02:01,560
might not be the most budget-friendly

00:01:59,460 --> 00:02:03,840
thing and all manager might not be super

00:02:01,560 --> 00:02:05,969
happy with this but it's easy right well

00:02:03,840 --> 00:02:07,590
we're freelancers so that's like a good

00:02:05,969 --> 00:02:11,370
thing right more work for us definitely

00:02:07,590 --> 00:02:12,960
for us that's good so Quentin come what

00:02:11,370 --> 00:02:15,610
can we do about this

00:02:12,960 --> 00:02:17,890
well one thing we could do is we could

00:02:15,610 --> 00:02:19,180
maybe look at other ways that we

00:02:17,890 --> 00:02:21,460
communicate and one of those ways that

00:02:19,180 --> 00:02:23,590
we communicate is using text messages

00:02:21,460 --> 00:02:26,440
so if Dominic sends me this text message

00:02:23,590 --> 00:02:27,340
and I ask and he asked me like what did

00:02:26,440 --> 00:02:29,650
you do last night

00:02:27,340 --> 00:02:30,670
I could send him this anomaly do you

00:02:29,650 --> 00:02:32,740
understand what this means

00:02:30,670 --> 00:02:34,720
I guess it's supposed to be you although

00:02:32,740 --> 00:02:36,490
you don't have a beard you play tennis

00:02:34,720 --> 00:02:39,280
you took a shower you had an awesome

00:02:36,490 --> 00:02:42,400
beard probably local hopefully you went

00:02:39,280 --> 00:02:44,080
home you watch them TV epics and you

00:02:42,400 --> 00:02:46,750
went to bed that sounds like an awesome

00:02:44,080 --> 00:02:49,120
day that's that's exactly correct only

00:02:46,750 --> 00:02:51,280
using a couple of emojis Dominic was

00:02:49,120 --> 00:02:53,080
able to infer what I mean and you

00:02:51,280 --> 00:02:55,330
probably knows know what this means like

00:02:53,080 --> 00:02:57,720
in six months run easy easy

00:02:55,330 --> 00:03:00,250
so if we look at the way we communicate

00:02:57,720 --> 00:03:02,950
emojis have drastically changed the way

00:03:00,250 --> 00:03:05,560
that we do that according to some very

00:03:02,950 --> 00:03:08,890
reliable source we found online is

00:03:05,560 --> 00:03:11,410
pedia no it's not last year we sent

00:03:08,890 --> 00:03:14,080
about 900 million messages on Facebook

00:03:11,410 --> 00:03:17,110
which were just emojis I read half of

00:03:14,080 --> 00:03:17,800
the messages contain emojis so all

00:03:17,110 --> 00:03:19,840
messages

00:03:17,800 --> 00:03:23,890
that's super power powerful writes it is

00:03:19,840 --> 00:03:26,050
very expressive so why don't we put two

00:03:23,890 --> 00:03:27,760
and two together so this is standard and

00:03:26,050 --> 00:03:30,730
get a code right so we have a couple of

00:03:27,760 --> 00:03:33,040
divs here you have an input element you

00:03:30,730 --> 00:03:36,250
also have a to-do item component and we

00:03:33,040 --> 00:03:37,660
use these angular directives well what

00:03:36,250 --> 00:03:39,760
if we put two and two together and

00:03:37,660 --> 00:03:44,950
replace these and make them more

00:03:39,760 --> 00:03:47,320
expressive by using emojis Wow how

00:03:44,950 --> 00:03:50,040
awesome does that look right I mean who

00:03:47,320 --> 00:03:52,690
doesn't want to use emojis in their code

00:03:50,040 --> 00:03:54,640
nobody probably all of us want to use

00:03:52,690 --> 00:03:57,310
that I think this is actually the best

00:03:54,640 --> 00:04:00,130
idea we've ever had I guess so I think

00:03:57,310 --> 00:04:02,440
so today Dominic and I want to show you

00:04:00,130 --> 00:04:04,209
how you can build an emoji syntax into

00:04:02,440 --> 00:04:06,520
angular and to do that we're gonna look

00:04:04,209 --> 00:04:08,470
at how angular works what the compiler

00:04:06,520 --> 00:04:10,840
is how it is build up and how we can

00:04:08,470 --> 00:04:13,660
maybe hack in our own syntax maybe maybe

00:04:10,840 --> 00:04:15,790
but before we do that a little bit about

00:04:13,660 --> 00:04:17,590
ourselves so dominic and I both work

00:04:15,790 --> 00:04:19,810
force tablets which hopefully everyone

00:04:17,590 --> 00:04:21,040
knows it's an online editor which is

00:04:19,810 --> 00:04:24,250
which is very awesome

00:04:21,040 --> 00:04:26,110
we both do trainings either to dot RAM

00:04:24,250 --> 00:04:26,690
or strong brow and we're both Google

00:04:26,110 --> 00:04:30,980
developer

00:04:26,690 --> 00:04:32,990
spirts but another thing that we do so

00:04:30,980 --> 00:04:34,400
we have like this was one of our IDs the

00:04:32,990 --> 00:04:35,810
emoji syntax but we've also built

00:04:34,400 --> 00:04:37,670
something called the angular checklist

00:04:35,810 --> 00:04:39,830
which you can find that angular -

00:04:37,670 --> 00:04:41,720
checklist at i/o and this is a list of

00:04:39,830 --> 00:04:43,370
curated best practices that we feel

00:04:41,720 --> 00:04:45,830
should be in every angular application

00:04:43,370 --> 00:04:47,870
and we've also just recently released

00:04:45,830 --> 00:04:49,490
the angler profiler dev tools which is a

00:04:47,870 --> 00:04:51,650
Chrome extension that can be used to

00:04:49,490 --> 00:04:54,590
visualize change detection cycles in

00:04:51,650 --> 00:04:56,330
your in your application and also

00:04:54,590 --> 00:04:59,890
visualize the componentry in a dev tool

00:04:56,330 --> 00:05:02,960
panel so you can easily optimize this

00:04:59,890 --> 00:05:05,600
alright so remember we want to build our

00:05:02,960 --> 00:05:07,250
own emoji syntax but before we can do

00:05:05,600 --> 00:05:09,920
that we actually have to understand how

00:05:07,250 --> 00:05:12,860
we build or implement angular

00:05:09,920 --> 00:05:15,200
applications now we use typescript in

00:05:12,860 --> 00:05:17,600
HTML to write our angular applications

00:05:15,200 --> 00:05:19,430
right and then in the end what we get is

00:05:17,600 --> 00:05:21,080
something it's JavaScript that can be

00:05:19,430 --> 00:05:23,000
executed inside the browser because well

00:05:21,080 --> 00:05:24,920
typescript doesn't the browser doesn't

00:05:23,000 --> 00:05:27,500
understand typescript and there's also

00:05:24,920 --> 00:05:29,780
something inside the mark-up inside the

00:05:27,500 --> 00:05:32,540
HTML that the browser doesn't understand

00:05:29,780 --> 00:05:34,460
so what is this magic unknown thing in

00:05:32,540 --> 00:05:36,500
the middle and it turns out that this is

00:05:34,460 --> 00:05:38,090
actually something called the angular

00:05:36,500 --> 00:05:41,570
compiler the angular compiler takes

00:05:38,090 --> 00:05:43,940
typescript as well as HTML and then

00:05:41,570 --> 00:05:46,220
compile it into JavaScript which then

00:05:43,940 --> 00:05:49,130
runs inside the browser now let's tape

00:05:46,220 --> 00:05:50,690
let's take one step back and take a look

00:05:49,130 --> 00:05:52,880
at the definition of a compiler what is

00:05:50,690 --> 00:05:54,500
a compiler and by definition a compiler

00:05:52,880 --> 00:05:56,630
is a computer program that translates

00:05:54,500 --> 00:05:58,520
computer code written in one programming

00:05:56,630 --> 00:06:01,640
language into another programming

00:05:58,520 --> 00:06:03,370
language that's great but I mean we

00:06:01,640 --> 00:06:06,410
already have the typescript compiler

00:06:03,370 --> 00:06:07,880
right which take which takes touchcode

00:06:06,410 --> 00:06:10,280
and transpose it down to JavaScript

00:06:07,880 --> 00:06:12,800
that's good but why do we need an

00:06:10,280 --> 00:06:14,480
angular compiler why I don't get it

00:06:12,800 --> 00:06:17,000
that's that's a good question right

00:06:14,480 --> 00:06:18,680
because we write HTML and typescript and

00:06:17,000 --> 00:06:20,540
typescript can also already be

00:06:18,680 --> 00:06:22,010
translated into JavaScript so why do we

00:06:20,540 --> 00:06:23,630
need it and there's actually a really

00:06:22,010 --> 00:06:26,180
good reason for this and this is all

00:06:23,630 --> 00:06:28,550
about the clarity vs. imperative when we

00:06:26,180 --> 00:06:31,250
write HTML in our angular components

00:06:28,550 --> 00:06:33,440
we're not really writing HTML writing

00:06:31,250 --> 00:06:36,590
something we like to refer to as any

00:06:33,440 --> 00:06:38,690
HTML which is HTML plus a little bit of

00:06:36,590 --> 00:06:40,010
JavaScript syntax and also a little bit

00:06:38,690 --> 00:06:41,480
of angular syntax

00:06:40,010 --> 00:06:43,940
but of course our browser doesn't

00:06:41,480 --> 00:06:45,380
understand what that is but the reason

00:06:43,940 --> 00:06:47,090
that angular has decided to work with

00:06:45,380 --> 00:06:48,680
templates is because it's a very

00:06:47,090 --> 00:06:51,560
declarative way of writing our

00:06:48,680 --> 00:06:53,000
components because of this declarative

00:06:51,560 --> 00:06:55,460
way and because we only have like

00:06:53,000 --> 00:06:57,830
limited JavaScript syntax we're forced

00:06:55,460 --> 00:06:59,350
to keep our templates very simple which

00:06:57,830 --> 00:07:03,020
is always going to be a good idea

00:06:59,350 --> 00:07:05,000
another reason is that because we don't

00:07:03,020 --> 00:07:07,070
do anything imperatively so we don't do

00:07:05,000 --> 00:07:08,780
the Dom manipulation or itself angular

00:07:07,070 --> 00:07:12,260
when it translates our declarative

00:07:08,780 --> 00:07:14,570
template files to to the more verbose

00:07:12,260 --> 00:07:17,180
imperative Dom manipulation and it can

00:07:14,570 --> 00:07:19,100
actually greatly optimize that and for

00:07:17,180 --> 00:07:21,320
instance browser optimization techniques

00:07:19,100 --> 00:07:24,020
that are valid today might not be valid

00:07:21,320 --> 00:07:25,550
tomorrow if that ever changes anger is

00:07:24,020 --> 00:07:29,420
gonna optimize that for us without us

00:07:25,550 --> 00:07:31,040
having to do anything so what does the

00:07:29,420 --> 00:07:33,680
angular compiler actually do for us so

00:07:31,040 --> 00:07:35,750
the first thing it does it's going to do

00:07:33,680 --> 00:07:37,010
type tracking of our templates so it's

00:07:35,750 --> 00:07:38,480
gonna make sure that we don't use any

00:07:37,010 --> 00:07:40,190
variables which don't exist on the

00:07:38,480 --> 00:07:42,050
component class it's gonna make sure

00:07:40,190 --> 00:07:44,450
that we don't pass numbers to functions

00:07:42,050 --> 00:07:46,400
which accept strings and so on and so

00:07:44,450 --> 00:07:49,130
forth next thing it does is it's going

00:07:46,400 --> 00:07:51,350
to check and find the errors in the

00:07:49,130 --> 00:07:53,120
structure of our application if we have

00:07:51,350 --> 00:07:55,340
a component which is using a directive

00:07:53,120 --> 00:07:56,810
and that component belongs to a module

00:07:55,340 --> 00:08:00,470
which doesn't have access to that

00:07:56,810 --> 00:08:01,760
directive it's gonna throw an error next

00:08:00,470 --> 00:08:03,400
thing it does it's gonna transform

00:08:01,760 --> 00:08:05,510
decorators and to static properties

00:08:03,400 --> 00:08:08,000
decorators are normally executed at

00:08:05,510 --> 00:08:09,590
runtime angular transform them into

00:08:08,000 --> 00:08:11,810
static properties as an optimization

00:08:09,590 --> 00:08:15,260
technique this is one of the examples on

00:08:11,810 --> 00:08:17,270
how angular really helps us with that it

00:08:15,260 --> 00:08:18,920
also of course needs to translate our

00:08:17,270 --> 00:08:20,420
typescript into JavaScript and it's

00:08:18,920 --> 00:08:22,700
gonna use the compiler for that the

00:08:20,420 --> 00:08:24,200
typescript compiler and it's also going

00:08:22,700 --> 00:08:26,840
to generate template instructions so

00:08:24,200 --> 00:08:30,740
these are the the verbose Dom

00:08:26,840 --> 00:08:32,990
manipulation that it does for us so

00:08:30,740 --> 00:08:35,479
that's that's great but how do we build

00:08:32,990 --> 00:08:37,250
or how do we build an application and if

00:08:35,479 --> 00:08:39,560
you've used angular then you've probably

00:08:37,250 --> 00:08:41,270
also used angular CLI most angular

00:08:39,560 --> 00:08:44,990
applications use the English CLI to

00:08:41,270 --> 00:08:47,270
build our application but what does the

00:08:44,990 --> 00:08:49,280
angular CLI actually use to build our

00:08:47,270 --> 00:08:51,650
applications and if we open up this

00:08:49,280 --> 00:08:53,230
black box for the most people this is

00:08:51,650 --> 00:08:55,840
actually a black box including

00:08:53,230 --> 00:08:58,000
it was a black box so under the hood it

00:08:55,840 --> 00:09:00,130
uses web pack and web pack is kind of

00:08:58,000 --> 00:09:02,290
like a build tool or Universal bunda

00:09:00,130 --> 00:09:06,610
that can literally bundle everything

00:09:02,290 --> 00:09:07,120
anything images CSS HTML typescript

00:09:06,610 --> 00:09:10,480
anything

00:09:07,120 --> 00:09:12,220
so what web pack takes in it pulls in

00:09:10,480 --> 00:09:15,310
our application and and then spits out

00:09:12,220 --> 00:09:17,710
these bundles and our app is typically

00:09:15,310 --> 00:09:20,590
comprised of an entry file which is our

00:09:17,710 --> 00:09:22,720
main TS from which we then bootstrap our

00:09:20,590 --> 00:09:24,940
app module which is our route module and

00:09:22,720 --> 00:09:27,460
then inside the app module we would

00:09:24,940 --> 00:09:29,860
declare components directors pipes and

00:09:27,460 --> 00:09:31,990
provide even services so that's great

00:09:29,860 --> 00:09:33,790
so ports in all these that the entry

00:09:31,990 --> 00:09:36,340
file and follows all the imports until

00:09:33,790 --> 00:09:39,250
it has seen all the files we have for in

00:09:36,340 --> 00:09:41,500
for our application that's great so

00:09:39,250 --> 00:09:44,200
let's dive into web pack a little bit

00:09:41,500 --> 00:09:45,940
deeper what we have here is the web pack

00:09:44,200 --> 00:09:48,130
configuration file and this is the

00:09:45,940 --> 00:09:50,320
configuration file that we use to

00:09:48,130 --> 00:09:51,970
instruct web pack how to work so we tell

00:09:50,320 --> 00:09:53,950
web pack for instance hey this is our

00:09:51,970 --> 00:09:56,200
entry file and then from within this

00:09:53,950 --> 00:09:58,750
configuration file we can also register

00:09:56,200 --> 00:10:00,670
plugins which we can use to basically

00:09:58,750 --> 00:10:02,680
hook into various stages in the

00:10:00,670 --> 00:10:04,990
compilation process and we can also

00:10:02,680 --> 00:10:07,630
register loaders and loaders are kind of

00:10:04,990 --> 00:10:10,930
like transformations transformers that

00:10:07,630 --> 00:10:13,210
we can use to pre-process files as we

00:10:10,930 --> 00:10:15,310
load them or report require them now the

00:10:13,210 --> 00:10:17,140
important thing is is the angular

00:10:15,310 --> 00:10:19,060
compiler plugin this is actually where

00:10:17,140 --> 00:10:20,920
the whole compilation happens now the

00:10:19,060 --> 00:10:23,260
angular compiler plugin generates

00:10:20,920 --> 00:10:24,880
angular code that can be executed inside

00:10:23,260 --> 00:10:27,100
the browser remember we use like

00:10:24,880 --> 00:10:28,660
declarative markup which the browser

00:10:27,100 --> 00:10:30,670
doesn't understand so we basically have

00:10:28,660 --> 00:10:33,160
to generate first angular code that we

00:10:30,670 --> 00:10:34,930
can then ship to the browser and then

00:10:33,160 --> 00:10:37,780
there's also something called the NGC

00:10:34,930 --> 00:10:40,210
loader and the NGC loader is just a

00:10:37,780 --> 00:10:43,030
loader that waits for that angular code

00:10:40,210 --> 00:10:45,760
to be emitted and once it's emitted it

00:10:43,030 --> 00:10:47,800
will then forward it to further web pack

00:10:45,760 --> 00:10:50,710
processing that involves resolving

00:10:47,800 --> 00:10:52,570
dependencies and also bundling and then

00:10:50,710 --> 00:10:54,670
what comes out is our bundle that's

00:10:52,570 --> 00:10:56,260
great but this is very high level we

00:10:54,670 --> 00:10:58,060
still don't know how we built an

00:10:56,260 --> 00:11:00,430
application and how the compiler works

00:10:58,060 --> 00:11:02,200
so let's open up the angular compiler

00:11:00,430 --> 00:11:04,690
plugin and now the first thing that

00:11:02,200 --> 00:11:06,579
happens that the compiler plugin does is

00:11:04,690 --> 00:11:09,579
it creates a weber compiler

00:11:06,579 --> 00:11:11,860
host now what is that well the compiler

00:11:09,579 --> 00:11:13,989
host is basically responsible for file

00:11:11,860 --> 00:11:15,220
system operations so it's in the end

00:11:13,989 --> 00:11:18,429
it's really just a typescript compiler

00:11:15,220 --> 00:11:20,290
host that reads files write files

00:11:18,429 --> 00:11:23,139
it reads directories and does all these

00:11:20,290 --> 00:11:24,970
things the next thing is that we create

00:11:23,139 --> 00:11:27,279
a program and this is a typescript

00:11:24,970 --> 00:11:29,110
program and once we create the program

00:11:27,279 --> 00:11:31,779
we basically kick off this process and

00:11:29,110 --> 00:11:33,819
start with the T is config Jason where

00:11:31,779 --> 00:11:35,889
we say okay these are the files we want

00:11:33,819 --> 00:11:37,449
to include in our application and then

00:11:35,889 --> 00:11:39,639
in this process

00:11:37,449 --> 00:11:41,799
typescript discovers all the files and

00:11:39,639 --> 00:11:44,139
looks at them so we have two different

00:11:41,799 --> 00:11:46,299
modes build modes basically we have a ot

00:11:44,139 --> 00:11:48,279
which is ahead of time this means that

00:11:46,299 --> 00:11:51,369
the the whole compilation happens at

00:11:48,279 --> 00:11:53,230
Build time and we also have JIT so the

00:11:51,369 --> 00:11:55,779
compilation basically happens at runtime

00:11:53,230 --> 00:11:59,199
so let's take a look closer look at the

00:11:55,779 --> 00:12:01,779
AO t pass once we created the ng program

00:11:59,199 --> 00:12:04,059
which is a typescript program right then

00:12:01,779 --> 00:12:06,489
the next step is analysis and in this

00:12:04,059 --> 00:12:08,619
step the goal is basically to understand

00:12:06,489 --> 00:12:10,869
all the angular parts of our application

00:12:08,619 --> 00:12:14,379
specifically modules provide us

00:12:10,869 --> 00:12:16,600
components etc and once the compiler

00:12:14,379 --> 00:12:18,209
finds one of these angular things it

00:12:16,600 --> 00:12:20,889
tries to understand it a little bit more

00:12:18,209 --> 00:12:24,009
for instance if it finds a component it

00:12:20,889 --> 00:12:26,410
parses its template but remember it

00:12:24,009 --> 00:12:28,540
looks at every single file in isolation

00:12:26,410 --> 00:12:30,879
on a class-by-class basis so we don't

00:12:28,540 --> 00:12:33,160
know yet that this particular component

00:12:30,879 --> 00:12:35,619
that we're looking at belongs to this ng

00:12:33,160 --> 00:12:37,209
module so that's in the analysis phase

00:12:35,619 --> 00:12:40,839
once this phase is over

00:12:37,209 --> 00:12:42,819
we go on to the resolve step and in this

00:12:40,839 --> 00:12:45,669
step we take a look at the entire

00:12:42,819 --> 00:12:48,429
application from a much much bigger

00:12:45,669 --> 00:12:51,699
picture and we try to understand the

00:12:48,429 --> 00:12:53,169
structure as well as dependencies ok so

00:12:51,699 --> 00:12:54,759
the next step is actually type checking

00:12:53,169 --> 00:12:56,259
and that's where both branches come back

00:12:54,759 --> 00:12:59,499
together type checking is all about

00:12:56,259 --> 00:13:01,929
checking types in our component classes

00:12:59,499 --> 00:13:03,579
as well as validating expressions in our

00:13:01,929 --> 00:13:06,189
templates that's great

00:13:03,579 --> 00:13:08,529
and then the final stage is the amid

00:13:06,189 --> 00:13:10,209
stage that's where the the magic

00:13:08,529 --> 00:13:13,239
basically happens that's were the

00:13:10,209 --> 00:13:15,249
generated angular code is emitted and so

00:13:13,239 --> 00:13:16,569
the angular compiler takes all decorated

00:13:15,249 --> 00:13:19,240
classes that we have for instance

00:13:16,569 --> 00:13:20,410
components and passes them through a

00:13:19,240 --> 00:13:22,360
series of transformation

00:13:20,410 --> 00:13:25,360
for example one of those transformations

00:13:22,360 --> 00:13:27,699
is inlining resources so when we define

00:13:25,360 --> 00:13:30,370
a template URL you point to an external

00:13:27,699 --> 00:13:32,440
file where you have to find your compare

00:13:30,370 --> 00:13:34,029
the template now with the angular

00:13:32,440 --> 00:13:36,160
compiler does does it take stats and

00:13:34,029 --> 00:13:38,110
replaces it with the require call and

00:13:36,160 --> 00:13:41,980
then that one is being resolved by web

00:13:38,110 --> 00:13:43,660
pack later on once the image stage is

00:13:41,980 --> 00:13:46,300
over we basically end up with our

00:13:43,660 --> 00:13:48,339
generated angular code that's great

00:13:46,300 --> 00:13:50,259
so this is on a very still on a very

00:13:48,339 --> 00:13:52,889
high level of how the angular compiler

00:13:50,259 --> 00:13:56,319
works and how we build our applications

00:13:52,889 --> 00:13:58,240
but I mean that's cool what's next

00:13:56,319 --> 00:14:00,459
then still want to build in our emojis

00:13:58,240 --> 00:14:03,009
yeah that's that's cool indeed and it

00:14:00,459 --> 00:14:05,019
was yeah it's quite difficult to follow

00:14:03,009 --> 00:14:06,430
but I think we're all interested to see

00:14:05,019 --> 00:14:09,790
where we were gonna build in the emoji

00:14:06,430 --> 00:14:12,040
syntax right so one thing we're gonna

00:14:09,790 --> 00:14:13,689
use is like Dominic talked about loaders

00:14:12,040 --> 00:14:15,009
and if I recall correctly he said

00:14:13,689 --> 00:14:17,560
something about that's like

00:14:15,009 --> 00:14:19,509
pre-processing a foul so we can do

00:14:17,560 --> 00:14:22,720
something with it so maybe if we write

00:14:19,509 --> 00:14:25,899
our own HTML loader we can go from our

00:14:22,720 --> 00:14:28,029
emoji like syntax and we can pass it to

00:14:25,899 --> 00:14:33,069
angular as just like the normal for both

00:14:28,029 --> 00:14:35,050
syntax that might actually work so if we

00:14:33,069 --> 00:14:37,029
go back to this diagram we can see that

00:14:35,050 --> 00:14:39,430
we already have like these loaders and

00:14:37,029 --> 00:14:41,920
we have the NGC loader so maybe we

00:14:39,430 --> 00:14:44,620
should try to fit in our own HTML loader

00:14:41,920 --> 00:14:47,620
here like a custom loader and if we look

00:14:44,620 --> 00:14:49,509
at this load these loaders Oh super

00:14:47,620 --> 00:14:51,459
important like if you know how the

00:14:49,509 --> 00:14:54,370
angular CLI works and Dominic set this

00:14:51,459 --> 00:14:56,649
is like the web pack configuration is

00:14:54,370 --> 00:14:58,630
inside of the angular CLI and that

00:14:56,649 --> 00:15:00,279
configuration is private so how do we

00:14:58,630 --> 00:15:03,610
how do we add our own loader that's

00:15:00,279 --> 00:15:05,680
gonna be difficult but luckily since

00:15:03,610 --> 00:15:07,959
angular CLI version 6 there is something

00:15:05,680 --> 00:15:09,970
called builders and builders basically

00:15:07,959 --> 00:15:12,040
allow you to also hook into the angler

00:15:09,970 --> 00:15:12,759
CLI at certain points and there's one

00:15:12,040 --> 00:15:15,100
builder called

00:15:12,759 --> 00:15:16,839
and Jake's built plus and this builder

00:15:15,100 --> 00:15:19,149
allows you to hook into the web pack

00:15:16,839 --> 00:15:21,939
configuration without actually ejecting

00:15:19,149 --> 00:15:23,740
so you can still use the CLI but you can

00:15:21,939 --> 00:15:26,860
also sprinkle it with a little bit of

00:15:23,740 --> 00:15:30,160
extra web configuration so if we look at

00:15:26,860 --> 00:15:32,470
that web pack configuration so before we

00:15:30,160 --> 00:15:34,420
install we first need to add ngx build

00:15:32,470 --> 00:15:36,160
plus and to do that we're going to use

00:15:34,420 --> 00:15:38,890
which is a schematic so it's gonna

00:15:36,160 --> 00:15:41,200
transform everything it needs to inside

00:15:38,890 --> 00:15:43,450
of your project automatically and then

00:15:41,200 --> 00:15:47,290
we can create our extra config

00:15:43,450 --> 00:15:49,060
file now if we look at this foul and

00:15:47,290 --> 00:15:50,980
this is a partial configuration

00:15:49,060 --> 00:15:53,410
file that we're gonna add it's actually

00:15:50,980 --> 00:15:55,450
pretty easy if we zoom in we can see

00:15:53,410 --> 00:15:57,670
that we have this ro hex which basically

00:15:55,450 --> 00:16:01,360
says that this loader should only be

00:15:57,670 --> 00:16:03,100
applied to HTML files and then we have

00:16:01,360 --> 00:16:05,050
our own loader that we apply so that's

00:16:03,100 --> 00:16:07,030
gonna get a pulse to the loader that we

00:16:05,050 --> 00:16:08,530
want and we're also gonna use the raw

00:16:07,030 --> 00:16:12,820
loader to make sure that it's being

00:16:08,530 --> 00:16:15,280
loaded as a string yeah cool we have our

00:16:12,820 --> 00:16:16,960
loader but we still need to register the

00:16:15,280 --> 00:16:19,180
loader right yeah the angular compiler

00:16:16,960 --> 00:16:19,660
doesn't know about it so how do we do

00:16:19,180 --> 00:16:22,120
that

00:16:19,660 --> 00:16:23,590
so the good thing is luckily ngx built

00:16:22,120 --> 00:16:26,980
plus which is really an amazing

00:16:23,590 --> 00:16:29,950
open-source library does not only allow

00:16:26,980 --> 00:16:31,990
us to register these partial weapon

00:16:29,950 --> 00:16:34,990
configuration files but also provides

00:16:31,990 --> 00:16:37,480
plugins so we're gonna create another

00:16:34,990 --> 00:16:39,760
file which we call ng emoji plucking DUP

00:16:37,480 --> 00:16:42,100
Jas and this is what it looks like so

00:16:39,760 --> 00:16:44,740
this is more or less the anatomy of an

00:16:42,100 --> 00:16:46,720
NG X build plus plugin so it's not a web

00:16:44,740 --> 00:16:49,960
Peck plugin and we basically have access

00:16:46,720 --> 00:16:51,580
to 3 hooks pre post and config now

00:16:49,960 --> 00:16:54,370
configure is the one that is important

00:16:51,580 --> 00:16:56,560
here because config is called once the

00:16:54,370 --> 00:16:58,630
angular CLI has built the entire weapon

00:16:56,560 --> 00:17:00,910
configuration and it's being passed to

00:16:58,630 --> 00:17:02,590
us so we can just extend it and do all

00:17:00,910 --> 00:17:04,570
sorts of things with with the

00:17:02,590 --> 00:17:06,640
configuration file let's zoom in a

00:17:04,570 --> 00:17:08,440
little bit the first thing that we have

00:17:06,640 --> 00:17:10,510
to do is we have to find the current

00:17:08,440 --> 00:17:13,540
instance of the angular compiler

00:17:10,510 --> 00:17:15,280
because we have to change it if it's not

00:17:13,540 --> 00:17:19,570
there we just simply throw an error

00:17:15,280 --> 00:17:21,339
that's easy but if it's there we extend

00:17:19,570 --> 00:17:23,949
the options because the angular compiler

00:17:21,339 --> 00:17:25,810
plugin was instantiated with options but

00:17:23,949 --> 00:17:28,270
we cannot just simply change these

00:17:25,810 --> 00:17:31,900
options or the existing instance because

00:17:28,270 --> 00:17:33,880
it's immutable so important here is that

00:17:31,900 --> 00:17:35,530
we have to override direct template

00:17:33,880 --> 00:17:38,290
loading which is a property and it has

00:17:35,530 --> 00:17:39,250
to be false now this basically this tiny

00:17:38,290 --> 00:17:41,560
little flag

00:17:39,250 --> 00:17:44,020
this tells the English CLI whether we

00:17:41,560 --> 00:17:46,390
want to load resources directly from the

00:17:44,020 --> 00:17:47,980
file system or if we want to pass them

00:17:46,390 --> 00:17:50,440
through loaders

00:17:47,980 --> 00:17:52,840
if it's false we basically tell the CLI

00:17:50,440 --> 00:17:55,210
hey please resolve these dependencies

00:17:52,840 --> 00:17:58,150
via loaders so that's that's very

00:17:55,210 --> 00:17:59,860
important that we turn this off next we

00:17:58,150 --> 00:18:01,809
need to remove the current instance

00:17:59,860 --> 00:18:04,179
because as I said we cannot modify the

00:18:01,809 --> 00:18:06,280
current existing instance so we have to

00:18:04,179 --> 00:18:08,740
create a new instance and pass in our

00:18:06,280 --> 00:18:11,110
extended options with direct template

00:18:08,740 --> 00:18:13,270
loading set to false and then we simply

00:18:11,110 --> 00:18:15,549
take our instance and push it into the

00:18:13,270 --> 00:18:17,320
array of all the pockets right you can

00:18:15,549 --> 00:18:19,510
see that conflict of plugins that it's

00:18:17,320 --> 00:18:21,669
just an array of all the plugins that we

00:18:19,510 --> 00:18:24,190
can that we have registered in our web

00:18:21,669 --> 00:18:26,580
configuration file and then finally we

00:18:24,190 --> 00:18:30,340
can just return our configuration file

00:18:26,580 --> 00:18:33,280
that's it that's basically it so let's

00:18:30,340 --> 00:18:35,320
give it a spin so we have prepared a

00:18:33,280 --> 00:18:36,910
small application and this is what it

00:18:35,320 --> 00:18:39,580
looks like it's already running I've

00:18:36,910 --> 00:18:41,830
typed in into my terminal ng surf which

00:18:39,580 --> 00:18:44,169
spins up the development server and this

00:18:41,830 --> 00:18:46,450
is what it looks like so isn't this the

00:18:44,169 --> 00:18:48,220
most beautiful thing ever I don't know

00:18:46,450 --> 00:18:51,100
if you notice but did you see that

00:18:48,220 --> 00:18:52,809
banana in the box syntax how cool is

00:18:51,100 --> 00:18:54,010
that now you can actually use banana you

00:18:52,809 --> 00:18:56,460
know what that is that's a two-way

00:18:54,010 --> 00:18:58,929
data-binding isn't that awesome

00:18:56,460 --> 00:19:01,120
first of all I like bananas and then

00:18:58,929 --> 00:19:04,570
inside a box it's the most amazing thing

00:19:01,120 --> 00:19:06,549
yep anyways this is what our template

00:19:04,570 --> 00:19:08,080
now looks like right so we want to show

00:19:06,549 --> 00:19:12,549
you that this actually works that we're

00:19:08,080 --> 00:19:15,309
not full of you know so I have my

00:19:12,549 --> 00:19:16,990
application here and as you can see it

00:19:15,309 --> 00:19:19,570
works it's running I can reload the page

00:19:16,990 --> 00:19:25,660
I can even toggle this so it disappears

00:19:19,570 --> 00:19:27,340
I can bring it back Wow so I can also

00:19:25,660 --> 00:19:29,650
type the banana in the box syntax works

00:19:27,340 --> 00:19:32,110
but what I want to point out here is

00:19:29,650 --> 00:19:34,750
that I have already I have already

00:19:32,110 --> 00:19:37,419
opened the app component HTML this is

00:19:34,750 --> 00:19:40,540
our template as you can see there are

00:19:37,419 --> 00:19:42,280
emojis but we can see that there's

00:19:40,540 --> 00:19:44,770
actually these directives the more of a

00:19:42,280 --> 00:19:46,240
bose syntax of angular so there's no

00:19:44,770 --> 00:19:48,340
emojis being shipped to the browser

00:19:46,240 --> 00:19:50,260
because everything happens in the build

00:19:48,340 --> 00:19:53,320
processing we just simply replace these

00:19:50,260 --> 00:19:55,059
emojis by the verbose angular syntax and

00:19:53,320 --> 00:19:58,900
these directives which is pretty cool I

00:19:55,059 --> 00:20:01,450
also have something here see I can also

00:19:58,900 --> 00:20:04,000
make a change so I have this

00:20:01,450 --> 00:20:06,779
box and provide my custom styles

00:20:04,000 --> 00:20:13,570
hopefully that box will look Oh green

00:20:06,779 --> 00:20:16,389
beautiful okay so it kind of works you

00:20:13,570 --> 00:20:17,710
can also find this on on on github so if

00:20:16,389 --> 00:20:19,720
you want to play around with this and

00:20:17,710 --> 00:20:21,700
see how the code works and follow it see

00:20:19,720 --> 00:20:23,590
the loader in action and everything just

00:20:21,700 --> 00:20:27,630
click on this link once we share the

00:20:23,590 --> 00:20:30,789
slides on Twitter something yes but but

00:20:27,630 --> 00:20:33,370
we have a problem there is a bit big but

00:20:30,789 --> 00:20:36,190
what about inline template inline

00:20:33,370 --> 00:20:38,559
templates let's let's think again so

00:20:36,190 --> 00:20:41,980
what we did was we had the loader the

00:20:38,559 --> 00:20:46,899
loader worked on HTML files in nine ten

00:20:41,980 --> 00:20:48,940
plates or those HTML files that's a

00:20:46,899 --> 00:20:51,190
problem we need to fix that as well so

00:20:48,940 --> 00:20:54,279
how can we fix this well let's go back

00:20:51,190 --> 00:20:57,130
to this diagram and Dominic talked about

00:20:54,279 --> 00:20:59,529
the pre-processors for file loading like

00:20:57,130 --> 00:21:00,940
HTML but you also mentioned something

00:20:59,529 --> 00:21:02,980
about transformers so we have

00:21:00,940 --> 00:21:04,750
transformers here and these are

00:21:02,980 --> 00:21:06,820
basically typescript transformers which

00:21:04,750 --> 00:21:09,549
angular itself uses extensively to

00:21:06,820 --> 00:21:11,350
change the code so just like we did with

00:21:09,549 --> 00:21:13,809
the custom loader we could probably

00:21:11,350 --> 00:21:16,419
provide a custom touch transformer

00:21:13,809 --> 00:21:18,279
I guess that should probably work so

00:21:16,419 --> 00:21:20,740
reasonable let's try that out but before

00:21:18,279 --> 00:21:22,299
let's look a little bit out what a tight

00:21:20,740 --> 00:21:23,679
grip transformer is and the tight grip

00:21:22,299 --> 00:21:26,049
transformer is something that's gonna

00:21:23,679 --> 00:21:28,269
change the structure of your typescript

00:21:26,049 --> 00:21:31,360
file so whenever typescript parses your

00:21:28,269 --> 00:21:34,600
file it's gonna parse it as an AST when

00:21:31,360 --> 00:21:37,990
an AST good question an AST stands for

00:21:34,600 --> 00:21:40,000
abstract abstract syntax tree so if we

00:21:37,990 --> 00:21:42,519
look at like this could be a foul that's

00:21:40,000 --> 00:21:45,370
parsed by typescript and it parses it in

00:21:42,519 --> 00:21:47,830
this data structure now every time you

00:21:45,370 --> 00:21:49,870
want to apply a transformer what we can

00:21:47,830 --> 00:21:51,429
do is we can visit all of the nodes so

00:21:49,870 --> 00:21:53,289
we can look for the note that we want to

00:21:51,429 --> 00:21:54,970
change using the visitor pattern which

00:21:53,289 --> 00:21:57,250
we'll see in the next code examples as

00:21:54,970 --> 00:21:58,929
well and when we find one of these nodes

00:21:57,250 --> 00:22:00,789
we can apply one of these

00:21:58,929 --> 00:22:02,590
transformations so we could say that

00:22:00,789 --> 00:22:05,169
we're gonna change that specific note

00:22:02,590 --> 00:22:07,000
and we're gonna change the structure so

00:22:05,169 --> 00:22:08,620
you could for instance say that I have a

00:22:07,000 --> 00:22:11,019
function and I want to remove that

00:22:08,620 --> 00:22:14,529
function by using a transformer which is

00:22:11,019 --> 00:22:15,100
perfectly possible how does that work in

00:22:14,529 --> 00:22:16,630
our code

00:22:15,100 --> 00:22:19,090
what you can see here is our own

00:22:16,630 --> 00:22:21,370
transformer and a transformer function

00:22:19,090 --> 00:22:22,780
is actually a factory function and that

00:22:21,370 --> 00:22:24,190
factory function returns another

00:22:22,780 --> 00:22:26,410
function that is going to be used that's

00:22:24,190 --> 00:22:28,780
our actual transformer and you can see

00:22:26,410 --> 00:22:30,580
that it accepts the source file so what

00:22:28,780 --> 00:22:32,559
type trip is going to do it's going to

00:22:30,580 --> 00:22:34,270
call this function with every source

00:22:32,559 --> 00:22:36,880
file that it's parses or at least the

00:22:34,270 --> 00:22:38,860
angular compiler is going to do that and

00:22:36,880 --> 00:22:41,830
inside of that function we can actually

00:22:38,860 --> 00:22:43,480
change the structure so when we enter

00:22:41,830 --> 00:22:45,400
that function the first thing that we're

00:22:43,480 --> 00:22:47,830
going to do is we're gonna find the

00:22:45,400 --> 00:22:49,720
template property assignment that's what

00:22:47,830 --> 00:22:51,159
it calls so we have that template

00:22:49,720 --> 00:22:52,600
property inside of our component

00:22:51,159 --> 00:22:54,580
declaration so we're gonna find that

00:22:52,600 --> 00:22:56,740
property what is what is the T is query

00:22:54,580 --> 00:22:58,450
that we're using good question so the TS

00:22:56,740 --> 00:23:01,600
query that we have that's actually a

00:22:58,450 --> 00:23:04,900
library which allows you to easily

00:23:01,600 --> 00:23:08,830
traverse abstract syntax trees or AST s

00:23:04,900 --> 00:23:10,809
by using some CSS like selectors so in

00:23:08,830 --> 00:23:13,630
this case we're just passing it a

00:23:10,809 --> 00:23:16,210
selector inline templates syntax and

00:23:13,630 --> 00:23:18,309
we're just finding that one and then we

00:23:16,210 --> 00:23:20,500
get our templates once we have our

00:23:18,309 --> 00:23:23,830
template what we need to do is we need

00:23:20,500 --> 00:23:25,630
to update our our file so what we're

00:23:23,830 --> 00:23:28,570
doing here is we're basically going to

00:23:25,630 --> 00:23:30,610
use typescript api's to visit all of the

00:23:28,570 --> 00:23:33,309
nodes starting from the from the source

00:23:30,610 --> 00:23:34,960
file using this visitor function and in

00:23:33,309 --> 00:23:36,280
this visitor function we can change this

00:23:34,960 --> 00:23:38,650
structure so we're going to loop over

00:23:36,280 --> 00:23:40,270
that node and then every child node but

00:23:38,650 --> 00:23:42,280
in that function we're first gonna check

00:23:40,270 --> 00:23:44,590
is the node that we are currently

00:23:42,280 --> 00:23:46,630
looping over the note that we want to

00:23:44,590 --> 00:23:49,090
change so remember we found our

00:23:46,630 --> 00:23:50,980
templates property assignments so now

00:23:49,090 --> 00:23:52,960
we're checking is the note that we're

00:23:50,980 --> 00:23:56,020
currently looping over that specific

00:23:52,960 --> 00:23:57,760
template property assignments once it is

00:23:56,020 --> 00:24:01,240
that node what we're going to do is

00:23:57,760 --> 00:24:03,220
we're going to take the plain text the

00:24:01,240 --> 00:24:05,890
current template and then we're gonna

00:24:03,220 --> 00:24:08,080
using another typescript API and our own

00:24:05,890 --> 00:24:10,330
update directives function so that

00:24:08,080 --> 00:24:12,429
update directive function is just going

00:24:10,330 --> 00:24:14,500
to do a search and replace for the Moche

00:24:12,429 --> 00:24:17,500
syntax with the actual structural

00:24:14,500 --> 00:24:20,200
directives and we get back our updated

00:24:17,500 --> 00:24:21,700
template function so we get we we search

00:24:20,200 --> 00:24:25,179
for the template function with emojis

00:24:21,700 --> 00:24:27,190
and we replace it with we get a template

00:24:25,179 --> 00:24:28,450
function without emojis and then the

00:24:27,190 --> 00:24:28,940
only thing we still need to do at the

00:24:28,450 --> 00:24:31,880
bottom of the

00:24:28,940 --> 00:24:33,800
function is we need to change the

00:24:31,880 --> 00:24:36,380
property so we're going to override the

00:24:33,800 --> 00:24:40,340
value of the template when we parsed it

00:24:36,380 --> 00:24:42,950
with the new one without images okay and

00:24:40,340 --> 00:24:44,780
once we've done that the only thing we

00:24:42,950 --> 00:24:46,460
need to do is we need to change again a

00:24:44,780 --> 00:24:48,680
little bit our angular compiler that

00:24:46,460 --> 00:24:50,360
we're creating ourselves and what we're

00:24:48,680 --> 00:24:52,700
going to do is we're gonna add this

00:24:50,360 --> 00:24:55,160
specific transformer in the list of

00:24:52,700 --> 00:24:56,570
already existing transformers what's

00:24:55,160 --> 00:24:57,800
really important here is that we need to

00:24:56,570 --> 00:24:59,060
add it in the first place

00:24:57,800 --> 00:25:01,970
to make sure that none of the other

00:24:59,060 --> 00:25:04,700
transformers sees the emoji syntax they

00:25:01,970 --> 00:25:07,160
should only see the non emoji Center so

00:25:04,700 --> 00:25:12,320
that's why we're adding it first and

00:25:07,160 --> 00:25:14,450
then it works problems solved all our

00:25:12,320 --> 00:25:17,600
problems like we'll never have to

00:25:14,450 --> 00:25:20,690
rewrite anything again emojis all the

00:25:17,600 --> 00:25:23,480
way yeah it's the best thing ever really

00:25:20,690 --> 00:25:25,610
is it is it are we really gonna use

00:25:23,480 --> 00:25:27,320
emojis in our source code I mean they're

00:25:25,610 --> 00:25:30,070
fun and all and they have kind of

00:25:27,320 --> 00:25:34,820
revolutionized other communication

00:25:30,070 --> 00:25:37,550
thanks but no I guess I don't want to

00:25:34,820 --> 00:25:39,350
use them oh geez in myself go maybe well

00:25:37,550 --> 00:25:41,420
we tried it out and it was always fun

00:25:39,350 --> 00:25:45,790
and all but maybe maybe it's not the

00:25:41,420 --> 00:25:48,710
best idea we have ever so maybe it is

00:25:45,790 --> 00:25:51,440
but so let's take a look at a more

00:25:48,710 --> 00:25:52,880
practical example we can actually use

00:25:51,440 --> 00:25:54,770
the same techniques and Quinton and I

00:25:52,880 --> 00:25:57,260
were we're big fans of reactive

00:25:54,770 --> 00:25:58,790
programming right with the push based

00:25:57,260 --> 00:26:01,490
architecture we can make sure that our

00:25:58,790 --> 00:26:03,200
entire UI always stays up-to-date and

00:26:01,490 --> 00:26:05,150
the good thing as angular already

00:26:03,200 --> 00:26:08,030
supports reactive primitives for many

00:26:05,150 --> 00:26:10,390
api's but the the place where it

00:26:08,030 --> 00:26:13,610
actually lacks is templates

00:26:10,390 --> 00:26:16,490
unfortunately so we thought why don't we

00:26:13,610 --> 00:26:20,060
create a library that supercharges our

00:26:16,490 --> 00:26:22,400
templates with reactivity right so this

00:26:20,060 --> 00:26:24,530
is a standard angular component with its

00:26:22,400 --> 00:26:26,780
class and the template but what if we

00:26:24,530 --> 00:26:28,850
wanted to get an observable from this

00:26:26,780 --> 00:26:31,280
button click what we would normally do

00:26:28,850 --> 00:26:32,780
is without any template syntax which we

00:26:31,280 --> 00:26:34,970
don't have an angular we would

00:26:32,780 --> 00:26:39,650
imperatively create a new subject

00:26:34,970 --> 00:26:41,270
instance and sorry it create a new

00:26:39,650 --> 00:26:42,560
subject instance and then from and then

00:26:41,270 --> 00:26:42,890
that within the template we would say

00:26:42,560 --> 00:26:45,380
sub

00:26:42,890 --> 00:26:47,840
next and passing the gala event which is

00:26:45,380 --> 00:26:50,840
the payload but this is imperative it is

00:26:47,840 --> 00:26:52,970
not declarative kind of ugly kind of

00:26:50,840 --> 00:26:54,830
ugly and it also doesn't align with

00:26:52,970 --> 00:26:57,590
other api's from angular if you think

00:26:54,830 --> 00:26:59,750
about view chart view children anger

00:26:57,590 --> 00:27:02,929
users makes use makes heavy use of

00:26:59,750 --> 00:27:04,910
decorators so we thought why don't we

00:27:02,929 --> 00:27:07,910
create our own library that makes this

00:27:04,910 --> 00:27:10,340
basically more declarative and so we

00:27:07,910 --> 00:27:13,130
came up with this there's also an issue

00:27:10,340 --> 00:27:15,440
on github that you can find and so what

00:27:13,130 --> 00:27:17,360
we do is basically at this little star

00:27:15,440 --> 00:27:19,640
so a little bit of syntactic sugar to

00:27:17,360 --> 00:27:21,980
our template to indicate that this

00:27:19,640 --> 00:27:24,799
should be an observable and then we just

00:27:21,980 --> 00:27:26,540
simply connect this stream in our class

00:27:24,799 --> 00:27:28,340
with an observer with a with the

00:27:26,540 --> 00:27:30,830
decorator called observable event and

00:27:28,340 --> 00:27:33,260
that's all we have to do now this looks

00:27:30,830 --> 00:27:35,240
pretty much like angular and now we have

00:27:33,260 --> 00:27:38,390
also reactivity in our templates which

00:27:35,240 --> 00:27:40,220
is amazing it is not maybe less code

00:27:38,390 --> 00:27:42,200
that we have to write but it's basically

00:27:40,220 --> 00:27:47,210
the same it is at least the same

00:27:42,200 --> 00:27:50,270
paradigm exactly so can I have it

00:27:47,210 --> 00:27:51,890
yes you can so this is actually a

00:27:50,270 --> 00:27:56,270
library that has been published for a

00:27:51,890 --> 00:27:58,490
while now on get up we've been using it

00:27:56,270 --> 00:28:00,080
ourselves the reason that we actually

00:27:58,490 --> 00:28:01,610
created this library is because we want

00:28:00,080 --> 00:28:03,590
to push the angular framework forward

00:28:01,610 --> 00:28:05,630
and this is one of the regions that we

00:28:03,590 --> 00:28:08,059
we know there's a lot of questions about

00:28:05,630 --> 00:28:10,190
reactivity in templates so our idea was

00:28:08,059 --> 00:28:12,049
basically to give it like a push see

00:28:10,190 --> 00:28:14,540
what I see what feedback from the

00:28:12,049 --> 00:28:16,700
community is and provided back to to the

00:28:14,540 --> 00:28:19,130
angular team our main goal in this is

00:28:16,700 --> 00:28:21,500
basically to make this library obsolete

00:28:19,130 --> 00:28:24,470
if this library is obsolete the sooner

00:28:21,500 --> 00:28:26,270
the better I would say you can start

00:28:24,470 --> 00:28:28,700
using this today as you've seen in the

00:28:26,270 --> 00:28:31,460
in the slides we are using some pretty

00:28:28,700 --> 00:28:33,260
low-level api's but these api's are

00:28:31,460 --> 00:28:35,720
supported we have contact with some

00:28:33,260 --> 00:28:37,940
people from the angular CLI team so if

00:28:35,720 --> 00:28:39,320
at some point it changes and we need to

00:28:37,940 --> 00:28:41,690
change our implementation we will

00:28:39,320 --> 00:28:43,580
definitely do so and if it's impossible

00:28:41,690 --> 00:28:45,710
to change we can always provide you with

00:28:43,580 --> 00:28:48,830
a schematic to go back to the most more

00:28:45,710 --> 00:28:51,410
verbose syntax another reason that we

00:28:48,830 --> 00:28:53,720
wanted to give this talk is because we

00:28:51,410 --> 00:28:55,130
want to encourage you to also come up

00:28:53,720 --> 00:28:57,200
with your own templates and taxes

00:28:55,130 --> 00:28:59,240
because it's an ideal way

00:28:57,200 --> 00:29:01,279
if you if you have something which is

00:28:59,240 --> 00:29:03,049
quite verbose quite repetitive and you

00:29:01,279 --> 00:29:05,149
you have an idea for a better syntax

00:29:03,049 --> 00:29:07,640
this is a way how you can actually test

00:29:05,149 --> 00:29:09,830
this and show the angular team that

00:29:07,640 --> 00:29:11,809
there might be a syntax which would be

00:29:09,830 --> 00:29:13,640
cool to add and at some point might be

00:29:11,809 --> 00:29:15,350
adopted in the angular community as well

00:29:13,640 --> 00:29:21,230
so it's a it's a nice way to give

00:29:15,350 --> 00:29:24,169
feedback yeah all right so the key

00:29:21,230 --> 00:29:25,789
takeaways from this talk are that we

00:29:24,169 --> 00:29:27,710
looked at the angular compiler we've

00:29:25,789 --> 00:29:30,019
seen how we build angular applications

00:29:27,710 --> 00:29:33,559
why we need the compiler what it does

00:29:30,019 --> 00:29:35,510
and we've also talked about typescript

00:29:33,559 --> 00:29:37,700
inform us and how we can actually change

00:29:35,510 --> 00:29:41,419
types of typescript files based on an

00:29:37,700 --> 00:29:43,429
ast we have also talked about ngx

00:29:41,419 --> 00:29:45,980
templates dreams and you've seen the

00:29:43,429 --> 00:29:47,870
technique that we also use to build this

00:29:45,980 --> 00:29:49,309
library so there's nothing new to it you

00:29:47,870 --> 00:29:51,139
can actually use everything that we

00:29:49,309 --> 00:29:53,299
talked about today and build your own

00:29:51,139 --> 00:29:58,070
libraries and add your own custom

00:29:53,299 --> 00:30:00,470
templates and Texas's but we definitely

00:29:58,070 --> 00:30:02,659
as Quentin's that we definitely want you

00:30:00,470 --> 00:30:06,919
we want to encourage you to experiment

00:30:02,659 --> 00:30:10,120
yourself so most importantly you can

00:30:06,919 --> 00:30:13,309
learn so much by also having fun really

00:30:10,120 --> 00:30:15,559
so thank you reboot yes we're gonna

00:30:13,309 --> 00:30:18,860
tweet out the slide deck later on

00:30:15,559 --> 00:30:20,720
Twitter yeah so thank you so much for

00:30:18,860 --> 00:30:27,519
having us thank you

00:30:20,720 --> 00:30:27,519

YouTube URL: https://www.youtube.com/watch?v=zaCYMarOtDE


