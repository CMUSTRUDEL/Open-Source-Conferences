Title: revo.js 2019 - Alex Moldovan - Done in 0.0166666666 seconds
Publication date: 2019-10-25
Playlist: Revo.js Conf 2019
Description: 
	Done in 0.0166666666 seconds
Presented by Alex Moldovan, at revo.js 2019
https://revojs.ro/2019/speakers/alex-moldovan
---
In order to ensure a smooth, jank-free experience on the web, we need to render a constant stream of 60 frames per second. This means that the browser has 16 milliseconds to execute our code and render the changes on the screen. Letâ€™s find out how the rendering pipeline works and how JavaScript and CSS might affect the rendering performance.
Captions: 
	00:00:00,720 --> 00:00:08,230
[Music]

00:00:12,090 --> 00:00:17,980
all right thank you

00:00:14,379 --> 00:00:21,490
Wow good morning again mushara how nice

00:00:17,980 --> 00:00:23,349
it is to be here and super super excited

00:00:21,490 --> 00:00:26,140
about being part of this conference as

00:00:23,349 --> 00:00:28,180
I've been following the people from Team

00:00:26,140 --> 00:00:30,130
J's for quite a while now and we've been

00:00:28,180 --> 00:00:33,190
in contact so much over like the past

00:00:30,130 --> 00:00:35,260
few years so I'm really really happy to

00:00:33,190 --> 00:00:38,469
be here and to be part of like the first

00:00:35,260 --> 00:00:41,770
the first edition as mentioned my name

00:00:38,469 --> 00:00:43,750
is Alex people from Romania might and

00:00:41,770 --> 00:00:46,210
instantly figure out by my thick accent

00:00:43,750 --> 00:00:48,910
that I'm coming from Cluj you can find

00:00:46,210 --> 00:00:52,600
me on Twitter at Alex and Moldovan and

00:00:48,910 --> 00:00:56,260
very important there's a link here bitly

00:00:52,600 --> 00:00:59,079
slash rebel Jas - Alex if you follow

00:00:56,260 --> 00:01:00,370
that link you'll have instant access to

00:00:59,079 --> 00:01:03,360
the slides if you want to follow along

00:01:00,370 --> 00:01:06,400
the slides there are a bunch of links

00:01:03,360 --> 00:01:10,030
usually in the bottom part that you can

00:01:06,400 --> 00:01:13,720
also access afterwards and read at your

00:01:10,030 --> 00:01:17,560
own pace pace I work at a company called

00:01:13,720 --> 00:01:21,130
teleport HQ in the video stock hero

00:01:17,560 --> 00:01:22,900
anyway we do kind of like all sorts of

00:01:21,130 --> 00:01:24,610
crazy experiments with wireframe

00:01:22,900 --> 00:01:26,590
detection and code generation if you're

00:01:24,610 --> 00:01:28,210
interested in that part this is not a

00:01:26,590 --> 00:01:30,909
topic for today so I'd love to talk with

00:01:28,210 --> 00:01:33,490
you about about it but maybe we can talk

00:01:30,909 --> 00:01:35,860
to you in the break and as I mentioned I

00:01:33,490 --> 00:01:37,630
want to give a huge shout out to my

00:01:35,860 --> 00:01:39,790
local community from Cluj as heroes I

00:01:37,630 --> 00:01:43,090
know a bunch of you were a Jays heroes

00:01:39,790 --> 00:01:45,190
in the last year's I hope to see as many

00:01:43,090 --> 00:01:47,680
as possible of you there next year is

00:01:45,190 --> 00:01:50,740
going to be under 23rd and 24th of April

00:01:47,680 --> 00:01:52,420
so grab your tickets come find me

00:01:50,740 --> 00:01:55,990
afterwards I have discount links for

00:01:52,420 --> 00:01:57,610
communities and yeah I would love to a

00:01:55,990 --> 00:01:59,710
lot to see you there and I have stickers

00:01:57,610 --> 00:02:02,710
by the way you know I'm a huge sticker

00:01:59,710 --> 00:02:04,630
fan so fortunately you can't see what I

00:02:02,710 --> 00:02:10,239
just have to show you my lap of his full

00:02:04,630 --> 00:02:12,549
of speakers so ok ok so we're going to

00:02:10,239 --> 00:02:15,129
talk about performance today and when I

00:02:12,549 --> 00:02:17,799
talk about performance I'd like to set

00:02:15,129 --> 00:02:19,779
the stage with somehow how I how I feel

00:02:17,799 --> 00:02:22,780
like to kind of like truths about

00:02:19,779 --> 00:02:24,880
performance or to things that I

00:02:22,780 --> 00:02:27,970
to share as ideas just to take away so

00:02:24,880 --> 00:02:31,000
first of all performance is something

00:02:27,970 --> 00:02:33,610
that performance problems will happen so

00:02:31,000 --> 00:02:36,540
whatever we do we will build sites that

00:02:33,610 --> 00:02:39,880
perform badly and this is just like an

00:02:36,540 --> 00:02:43,090
truth that we just need to accept on the

00:02:39,880 --> 00:02:45,100
upside what I think a lot of people fail

00:02:43,090 --> 00:02:47,310
to realize is that we shouldn't be

00:02:45,100 --> 00:02:49,300
afraid of getting our hands dirty

00:02:47,310 --> 00:02:52,800
performance is not something that should

00:02:49,300 --> 00:02:54,670
be tackled by seniors consultant experts

00:02:52,800 --> 00:02:57,880
professionals whatever you call them

00:02:54,670 --> 00:02:59,739
it's something that can be tackled by

00:02:57,880 --> 00:03:01,390
developers in the day by the activity

00:02:59,739 --> 00:03:03,760
and one of the reasons why I talk about

00:03:01,390 --> 00:03:06,519
performance is to inspire teams

00:03:03,760 --> 00:03:10,120
individuals companies in general to

00:03:06,519 --> 00:03:12,550
bring these small tweaks these small

00:03:10,120 --> 00:03:14,860
ideas that can improve performance in

00:03:12,550 --> 00:03:18,220
your day-by-day activity right so that

00:03:14,860 --> 00:03:21,400
you're not putting all the performance

00:03:18,220 --> 00:03:23,530
effort in the performance sprint or the

00:03:21,400 --> 00:03:25,300
performance iteration after the release

00:03:23,530 --> 00:03:27,730
when you realize that it's already too

00:03:25,300 --> 00:03:30,880
late you actually bring it all as well

00:03:27,730 --> 00:03:33,730
at every step of of the development

00:03:30,880 --> 00:03:36,100
process and today particularly we're

00:03:33,730 --> 00:03:37,840
going to discuss about a specific branch

00:03:36,100 --> 00:03:41,019
of performance which is called rendering

00:03:37,840 --> 00:03:42,280
performance what happens after the page

00:03:41,019 --> 00:03:44,260
is loaded so we're not going to talk

00:03:42,280 --> 00:03:46,390
about prioritizing resources about

00:03:44,260 --> 00:03:48,880
bundle sizes about stuff like that we're

00:03:46,390 --> 00:03:51,519
going to talk about how the app feels or

00:03:48,880 --> 00:03:53,200
how the website feels after we loaded

00:03:51,519 --> 00:03:55,510
everything and the user starts

00:03:53,200 --> 00:03:57,190
interacting what happens when you focus

00:03:55,510 --> 00:03:59,140
on input what happens when you hover

00:03:57,190 --> 00:04:00,940
over something animations and stuff like

00:03:59,140 --> 00:04:04,870
that so rendering performance is

00:04:00,940 --> 00:04:08,430
basically what happens when a change

00:04:04,870 --> 00:04:11,140
from JavaScript or CSS three girls a

00:04:08,430 --> 00:04:14,230
change on the screen write a new frame

00:04:11,140 --> 00:04:16,810
being rendered and this rendering

00:04:14,230 --> 00:04:19,090
pipeline it's composed of out of a

00:04:16,810 --> 00:04:21,669
couple of steps it starts from

00:04:19,090 --> 00:04:24,210
JavaScript because most of your changes

00:04:21,669 --> 00:04:26,770
will happen in JavaScript event handlers

00:04:24,210 --> 00:04:29,979
asynchronous actions data coming back

00:04:26,770 --> 00:04:31,450
from course from some endpoint it

00:04:29,979 --> 00:04:33,580
usually starts there you can of course

00:04:31,450 --> 00:04:36,129
start from CSS but most of the times

00:04:33,580 --> 00:04:38,020
javascript is the domain

00:04:36,129 --> 00:04:40,059
rigor of a domme change right you may

00:04:38,020 --> 00:04:42,550
can imagine that at this point an

00:04:40,059 --> 00:04:45,759
element was added to the Dom or was

00:04:42,550 --> 00:04:48,999
removed or some some change happen the

00:04:45,759 --> 00:04:51,759
next step is the styling phase in this

00:04:48,999 --> 00:04:54,039
phase based on specificity all the

00:04:51,759 --> 00:04:58,659
elements in the Dom can get their

00:04:54,039 --> 00:04:59,979
computed styles next one is layout when

00:04:58,659 --> 00:05:01,539
you take when you start the browser

00:04:59,979 --> 00:05:03,779
starts from the top left corner and

00:05:01,539 --> 00:05:08,409
starts arranging the elements based on

00:05:03,779 --> 00:05:09,939
positioning displays margins the grid

00:05:08,409 --> 00:05:12,729
system everything like the box model

00:05:09,939 --> 00:05:14,619
everything that decides the position of

00:05:12,729 --> 00:05:18,009
an element relative to others or

00:05:14,619 --> 00:05:19,899
absolute or whatever the rules are as

00:05:18,009 --> 00:05:22,389
after you have the layout if you have

00:05:19,899 --> 00:05:26,679
like the skeleton of of the of the Dom

00:05:22,389 --> 00:05:28,990
you have the paint operation now the

00:05:26,679 --> 00:05:31,389
browser can decide ok for each

00:05:28,990 --> 00:05:33,309
individual pixel which color do I assign

00:05:31,389 --> 00:05:35,649
is it the border color is it the

00:05:33,309 --> 00:05:38,499
background color is it a shadow is it

00:05:35,649 --> 00:05:40,119
opacity so basically it's deciding for

00:05:38,499 --> 00:05:43,990
each pixel which color to apply and

00:05:40,119 --> 00:05:46,779
finally the last step is the composite

00:05:43,990 --> 00:05:48,249
step because browsers are not like the

00:05:46,779 --> 00:05:51,399
Dom is not necessarily rendered on a

00:05:48,249 --> 00:05:54,149
single sheet if you want it actually can

00:05:51,399 --> 00:05:57,339
be layered based on things like z-index

00:05:54,149 --> 00:05:59,499
based on certain elements being promoted

00:05:57,339 --> 00:06:00,729
to their own layer and keep that in mind

00:05:59,499 --> 00:06:03,309
because it would be important layer

00:06:00,729 --> 00:06:05,800
later the idea is that you end up with a

00:06:03,309 --> 00:06:07,719
couple of layers of elements and in the

00:06:05,800 --> 00:06:09,999
final step the browser needs to decide

00:06:07,719 --> 00:06:12,779
ok which element is on top is it this

00:06:09,999 --> 00:06:17,789
model window or is it the background

00:06:12,779 --> 00:06:21,789
screen now all these action actions

00:06:17,789 --> 00:06:24,909
happen in sequence every action requires

00:06:21,789 --> 00:06:28,929
the result of the previous step to be

00:06:24,909 --> 00:06:31,809
able to work because of that we need to

00:06:28,929 --> 00:06:34,329
make sure that these runs fast because

00:06:31,809 --> 00:06:36,729
otherwise because keep in mind the

00:06:34,329 --> 00:06:38,559
browser the UI thread of the browser is

00:06:36,729 --> 00:06:40,149
the UI thread right is not the UI thread

00:06:38,559 --> 00:06:44,229
so we'll have a single threaded

00:06:40,149 --> 00:06:46,329
environment that pretty much has to run

00:06:44,229 --> 00:06:49,180
this rendering pipeline for each change

00:06:46,329 --> 00:06:52,389
that you trigger from the code

00:06:49,180 --> 00:06:54,850
this frame in order to in order to

00:06:52,389 --> 00:06:58,389
produce a new frame no sorry in order to

00:06:54,850 --> 00:07:00,400
produce 60 frames per second which is

00:06:58,389 --> 00:07:01,780
the average which is the value what you

00:07:00,400 --> 00:07:05,229
want in order to synchronize with the

00:07:01,780 --> 00:07:08,139
hardware refresh rate you want 60 frames

00:07:05,229 --> 00:07:12,610
per second you then it means that each

00:07:08,139 --> 00:07:14,080
frame has approximately 0.01 sick sick

00:07:12,610 --> 00:07:16,300
sick sick sick sick sick seats and so on

00:07:14,080 --> 00:07:19,479
a second which is 16 milliseconds

00:07:16,300 --> 00:07:22,570
approximately this is your budget for a

00:07:19,479 --> 00:07:24,370
single rendering for a single time that

00:07:22,570 --> 00:07:27,100
the browser rendering pipeline has to

00:07:24,370 --> 00:07:30,370
run but here's the catch like the

00:07:27,100 --> 00:07:33,639
browsers are super fast and super

00:07:30,370 --> 00:07:36,700
optimized for this in an ideal world

00:07:33,639 --> 00:07:40,050
let's say you can expect that the

00:07:36,700 --> 00:07:43,419
rendering pipeline takes about 6

00:07:40,050 --> 00:07:45,580
milliseconds and it's computed on an

00:07:43,419 --> 00:07:47,410
average website average number of dom

00:07:45,580 --> 00:07:50,530
nodes average positioning stuff like

00:07:47,410 --> 00:07:53,470
that let's assume it's 6 milliseconds

00:07:50,530 --> 00:07:55,389
you might say cool problem solve 60

00:07:53,470 --> 00:08:00,220
frames per second everything is smooth I

00:07:55,389 --> 00:08:02,190
can go home all done what happens in the

00:08:00,220 --> 00:08:06,250
other 10 milliseconds

00:08:02,190 --> 00:08:09,280
well we only talked about what the

00:08:06,250 --> 00:08:12,190
browser does this is not our application

00:08:09,280 --> 00:08:14,440
code our application code needs to run

00:08:12,190 --> 00:08:16,570
in the other 10 milliseconds and our

00:08:14,440 --> 00:08:18,789
application code means basically

00:08:16,570 --> 00:08:21,210
JavaScript logic business logic data

00:08:18,789 --> 00:08:24,070
fetching Dom diff thing data processing

00:08:21,210 --> 00:08:25,360
everything especially with our big fat

00:08:24,070 --> 00:08:27,700
JavaScript applications that we have

00:08:25,360 --> 00:08:32,919
nowadays in the browsers it's a lot of

00:08:27,700 --> 00:08:36,219
work so in the real world most likely it

00:08:32,919 --> 00:08:38,709
will happen like this first frame goes

00:08:36,219 --> 00:08:40,690
in 10 milliseconds that's fine it leaves

00:08:38,709 --> 00:08:43,479
room for the rendering pipeline to

00:08:40,690 --> 00:08:46,209
process and to produce a new frame but

00:08:43,479 --> 00:08:48,190
then you have an operation like I know

00:08:46,209 --> 00:08:50,650
deserializing a JSON object

00:08:48,190 --> 00:08:52,270
or running some sort of long event

00:08:50,650 --> 00:08:57,190
handler that dozens of data processing

00:08:52,270 --> 00:08:59,709
and boom you have 40 milliseconds 40

00:08:57,190 --> 00:09:01,780
milliseconds on a single threaded

00:08:59,709 --> 00:09:02,860
environment means that the next two

00:09:01,780 --> 00:09:06,190
frames

00:09:02,860 --> 00:09:10,270
cannot run the rendering pipeline if

00:09:06,190 --> 00:09:12,850
during this operation there's a change

00:09:10,270 --> 00:09:14,980
on the screen there's an animation

00:09:12,850 --> 00:09:18,430
happening the user Scrolls these are

00:09:14,980 --> 00:09:21,190
focuses on an input those will be

00:09:18,430 --> 00:09:24,700
dropped frames which the user will

00:09:21,190 --> 00:09:26,590
perceive as laggy application it's also

00:09:24,700 --> 00:09:29,530
called jank right when you scroll and

00:09:26,590 --> 00:09:31,780
start it's it feels like it's stuck in

00:09:29,530 --> 00:09:35,800
for a few for a few microts at

00:09:31,780 --> 00:09:40,330
microseconds there let's do a quick

00:09:35,800 --> 00:09:47,650
audit to see how this actually looks in

00:09:40,330 --> 00:09:51,300
the browser you have any Formula one

00:09:47,650 --> 00:09:53,980
fans here okay a few hand-raise cool

00:09:51,300 --> 00:09:58,240
okay I'm going to audit their website

00:09:53,980 --> 00:10:01,780
which honestly sucks big time like just

00:09:58,240 --> 00:10:05,170
before I was trying to load it up on the

00:10:01,780 --> 00:10:08,350
on the slow 3G network in the room and

00:10:05,170 --> 00:10:10,330
it took forever to load so definitely

00:10:08,350 --> 00:10:12,850
not optimize but that's a talk for

00:10:10,330 --> 00:10:15,430
another day we assume that we have the

00:10:12,850 --> 00:10:19,060
website loaded let's see what happens

00:10:15,430 --> 00:10:21,690
when we start auditing here so we have

00:10:19,060 --> 00:10:24,160
this performance tab in chrome dev tools

00:10:21,690 --> 00:10:26,110
I'm used with the chrome dev tools but

00:10:24,160 --> 00:10:28,710
all all the browser's pretty much have

00:10:26,110 --> 00:10:32,890
tools for analyzing the runtime

00:10:28,710 --> 00:10:35,320
activities on the website so you can

00:10:32,890 --> 00:10:38,290
click on the first button on the record

00:10:35,320 --> 00:10:39,760
button and after I click on the record

00:10:38,290 --> 00:10:41,740
button I'm going to scroll through the

00:10:39,760 --> 00:10:45,640
website new content will appear at the

00:10:41,740 --> 00:10:46,510
bottom I can for example do like open

00:10:45,640 --> 00:10:49,270
the menu

00:10:46,510 --> 00:10:50,170
go back things like that and then I'm

00:10:49,270 --> 00:10:53,530
going to stop it

00:10:50,170 --> 00:10:54,820
and this will now load the profile of

00:10:53,530 --> 00:10:58,330
what just happened

00:10:54,820 --> 00:11:00,220
it will it will show all the functions

00:10:58,330 --> 00:11:03,070
calls that got executed during this

00:11:00,220 --> 00:11:05,980
operation during me interacting with the

00:11:03,070 --> 00:11:09,180
page scrolling clicking dropping down

00:11:05,980 --> 00:11:14,560
the manual and things like that

00:11:09,180 --> 00:11:16,790
this looks terrifying at first I agree

00:11:14,560 --> 00:11:18,140
with you but it only gets better

00:11:16,790 --> 00:11:20,570
and better as you as you practice with

00:11:18,140 --> 00:11:22,490
with the rendering tool you will get

00:11:20,570 --> 00:11:25,730
something called a flame chart this is

00:11:22,490 --> 00:11:28,370
the the exact number the exact stack

00:11:25,730 --> 00:11:31,280
trace of your website all the functions

00:11:28,370 --> 00:11:35,200
that the website called during the

00:11:31,280 --> 00:11:43,790
operation you get the frames per second

00:11:35,200 --> 00:11:48,710
in it okay visible in the back I need

00:11:43,790 --> 00:11:52,070
the hand in the back cool so you get

00:11:48,710 --> 00:11:54,770
things like the frame rate which is the

00:11:52,070 --> 00:11:58,370
green line that goes up and down as you

00:11:54,770 --> 00:12:00,310
can see here you get the amount of time

00:11:58,370 --> 00:12:03,350
that the browser spent executing

00:12:00,310 --> 00:12:05,330
JavaScript versus the amount of time

00:12:03,350 --> 00:12:07,490
that it's spent executing rendering

00:12:05,330 --> 00:12:10,970
operations like paint and composite this

00:12:07,490 --> 00:12:13,790
is the yellow versus the purple the

00:12:10,970 --> 00:12:18,200
purple color here and very important you

00:12:13,790 --> 00:12:20,570
get messages hints of places where there

00:12:18,200 --> 00:12:23,690
might be something you can do like pay a

00:12:20,570 --> 00:12:25,430
recurring handler took 142nd

00:12:23,690 --> 00:12:31,040
milliseconds remember the 40

00:12:25,430 --> 00:12:34,430
milliseconds example right 147 means 8

00:12:31,040 --> 00:12:38,600
frames that were dropped so if this

00:12:34,430 --> 00:12:41,300
occurs you regularly you can go down all

00:12:38,600 --> 00:12:45,940
the way to like 10 15 frames per second

00:12:41,300 --> 00:12:49,610
rendering you also get messages like I

00:12:45,940 --> 00:12:52,070
hope I get one yeah here first reflow is

00:12:49,610 --> 00:12:54,380
likely a performance bottleneck so only

00:12:52,070 --> 00:12:58,160
by using only by auditing the website

00:12:54,380 --> 00:13:01,010
you already start seeing errors like

00:12:58,160 --> 00:13:02,330
messages hey and you start googling like

00:13:01,010 --> 00:13:03,980
what what's the deal with this this is

00:13:02,330 --> 00:13:05,660
basically how you get into performance

00:13:03,980 --> 00:13:07,640
it's not like you take a course it's not

00:13:05,660 --> 00:13:11,000
like you you go to university to the

00:13:07,640 --> 00:13:13,190
performance university of javascript you

00:13:11,000 --> 00:13:15,920
can actually just use the dev tools

00:13:13,190 --> 00:13:17,750
get your find out what the problems are

00:13:15,920 --> 00:13:20,120
on real websites on your own

00:13:17,750 --> 00:13:21,650
applications and figure out by reading

00:13:20,120 --> 00:13:23,870
the documentation understanding what the

00:13:21,650 --> 00:13:25,730
problem is they're trying to figure out

00:13:23,870 --> 00:13:28,720
the problem and trying to fix them it's

00:13:25,730 --> 00:13:31,780
the best way that you can learn it ok

00:13:28,720 --> 00:13:35,330
enough about

00:13:31,780 --> 00:13:39,440
all the ink parnell let's have a look

00:13:35,330 --> 00:13:40,790
after let's let's check after we have

00:13:39,440 --> 00:13:42,680
the audit right this is the first step

00:13:40,790 --> 00:13:44,930
we need to be aware that hey this

00:13:42,680 --> 00:13:49,330
website might have some potential

00:13:44,930 --> 00:13:51,350
problems now let's talk about those

00:13:49,330 --> 00:13:56,180
specific things that I mentioned like

00:13:51,350 --> 00:13:58,820
the small areas areas of concern that

00:13:56,180 --> 00:14:01,310
you can follow you can look into and you

00:13:58,820 --> 00:14:04,270
can bring back in your day by day

00:14:01,310 --> 00:14:06,680
activity and just make sure that

00:14:04,270 --> 00:14:08,840
performance wise you are not impacting

00:14:06,680 --> 00:14:11,720
the website and they can in a negative a

00:14:08,840 --> 00:14:14,720
negative way so we're going to talk

00:14:11,720 --> 00:14:19,760
about three particular areas of interest

00:14:14,720 --> 00:14:23,900
here first one is the Dom access don't

00:14:19,760 --> 00:14:26,860
access is tricky because it's pretty

00:14:23,900 --> 00:14:29,630
time-consuming from the perspective of

00:14:26,860 --> 00:14:32,000
again the single threaded environment

00:14:29,630 --> 00:14:35,420
Dom axis is one of the most expensive

00:14:32,000 --> 00:14:38,720
operations that you can do on on a

00:14:35,420 --> 00:14:41,810
running website that's why a lot of

00:14:38,720 --> 00:14:44,060
modern frameworks don't even allow you

00:14:41,810 --> 00:14:47,060
to do direct Dom access and they will do

00:14:44,060 --> 00:14:49,580
it for you with an optimized approach

00:14:47,060 --> 00:14:53,090
but let's say for the sake of it that we

00:14:49,580 --> 00:14:56,000
are dealing with direct manipulation of

00:14:53,090 --> 00:14:59,540
the DOM and you will see here that it's

00:14:56,000 --> 00:15:00,980
not only that it's there are a lot of

00:14:59,540 --> 00:15:03,650
situations when even when you would have

00:15:00,980 --> 00:15:06,860
a virtual Dom you would still you still

00:15:03,650 --> 00:15:10,910
can easily cause headaches for for the

00:15:06,860 --> 00:15:12,380
in terms of like performance and the

00:15:10,910 --> 00:15:15,950
amount of time to the browser needs to

00:15:12,380 --> 00:15:18,920
spend on Dom manipulation so first off

00:15:15,950 --> 00:15:22,010
multiple Dom accesses of course this is

00:15:18,920 --> 00:15:24,050
more problematic one Dom access is what

00:15:22,010 --> 00:15:26,270
usually have to do the virtual Dom will

00:15:24,050 --> 00:15:28,690
have to do that Dom access at some point

00:15:26,270 --> 00:15:33,170
it's not like they don't do it magically

00:15:28,690 --> 00:15:35,300
but the problem is like in in a scenario

00:15:33,170 --> 00:15:36,740
like this let's say that you are like I

00:15:35,300 --> 00:15:39,260
did on the on the website I was

00:15:36,740 --> 00:15:41,450
scrolling and I was getting new items

00:15:39,260 --> 00:15:43,280
new newsy news items are loaded in the

00:15:41,450 --> 00:15:44,060
in the bottom of the page you might have

00:15:43,280 --> 00:15:46,550
some systems

00:15:44,060 --> 00:15:49,100
gives you additionally like 20 items at

00:15:46,550 --> 00:15:51,650
some point so the code would be like you

00:15:49,100 --> 00:15:54,380
would do a for loop over all those 20

00:15:51,650 --> 00:15:57,340
news items you would create us a box a

00:15:54,380 --> 00:15:59,810
news box for each individual item and

00:15:57,340 --> 00:16:03,080
you will at the end of the for loop you

00:15:59,810 --> 00:16:05,870
will append that box to the wrapper to

00:16:03,080 --> 00:16:09,530
the container that that keeps all the

00:16:05,870 --> 00:16:12,050
news items this is of course problematic

00:16:09,530 --> 00:16:15,530
because this is a synchronous call this

00:16:12,050 --> 00:16:18,220
is this is a single function executed at

00:16:15,530 --> 00:16:22,070
some point which triggers

00:16:18,220 --> 00:16:24,200
twenty-something Dom Dom accesses during

00:16:22,070 --> 00:16:27,050
this time so this can give get very

00:16:24,200 --> 00:16:29,300
tricky very fast imagine if you're

00:16:27,050 --> 00:16:31,190
having this infinite scroll and a

00:16:29,300 --> 00:16:34,910
Billiken you're loading 20 news items

00:16:31,190 --> 00:16:37,220
every couple of 100 milliseconds castle

00:16:34,910 --> 00:16:39,170
we furiously live scrolling down the

00:16:37,220 --> 00:16:41,090
page to catch maybe the footer which is

00:16:39,170 --> 00:16:44,480
not accessible because infinite

00:16:41,090 --> 00:16:48,080
scrolling yeah that's a talk for another

00:16:44,480 --> 00:16:50,180
day again there's a link here about a

00:16:48,080 --> 00:16:51,920
case study on Dom performance it's

00:16:50,180 --> 00:16:54,260
really interesting to read and to find

00:16:51,920 --> 00:16:58,010
out maybe some tips and tricks on how to

00:16:54,260 --> 00:17:03,800
make this kind of situation better in

00:16:58,010 --> 00:17:06,020
real time in real real life examples one

00:17:03,800 --> 00:17:08,660
particular problem with Dom access is

00:17:06,020 --> 00:17:11,510
what is called a involuntarily layout

00:17:08,660 --> 00:17:14,120
trigger so consider this example where

00:17:11,510 --> 00:17:16,790
you have a header and you have an event

00:17:14,120 --> 00:17:19,540
handler on scroll on the handle scroll

00:17:16,790 --> 00:17:21,980
function inside it you will have a

00:17:19,540 --> 00:17:25,910
condition right if the scroll position

00:17:21,980 --> 00:17:29,300
is greater than 50 let's say the next

00:17:25,910 --> 00:17:31,100
line is change the position of the

00:17:29,300 --> 00:17:33,110
change sorry change the style of the

00:17:31,100 --> 00:17:35,000
header to a fixed position this is like

00:17:33,110 --> 00:17:38,980
a sticky header implementation if you

00:17:35,000 --> 00:17:42,680
want so well third line the one that

00:17:38,980 --> 00:17:46,070
changes the style as mentioned before

00:17:42,680 --> 00:17:47,630
any change in the Dom that is triggered

00:17:46,070 --> 00:17:51,740
by JavaScript will trigger the rendering

00:17:47,630 --> 00:17:54,190
pipeline the problem is this one the

00:17:51,740 --> 00:17:57,270
second line the window scroll why

00:17:54,190 --> 00:17:59,010
turns out the browser's again am

00:17:57,270 --> 00:18:00,870
and I'm praising the browsers here but

00:17:59,010 --> 00:18:04,050
the brothers are really really smart and

00:18:00,870 --> 00:18:08,550
heavily optimized and the browser does

00:18:04,050 --> 00:18:11,550
not compute these values on every at at

00:18:08,550 --> 00:18:15,480
millisecond precision because that would

00:18:11,550 --> 00:18:17,520
just drain resources right so when

00:18:15,480 --> 00:18:20,640
you're calling this kind of function you

00:18:17,520 --> 00:18:23,070
are forcing the browser to perform a

00:18:20,640 --> 00:18:26,720
layout operation and figure out what's

00:18:23,070 --> 00:18:29,670
the value of the scroll position and

00:18:26,720 --> 00:18:32,460
turns out there are a bunch of these

00:18:29,670 --> 00:18:36,600
functions on the Dom api's which are

00:18:32,460 --> 00:18:39,420
triggering this layout I had no idea I

00:18:36,600 --> 00:18:41,430
found out this I was like whoa I'm just

00:18:39,420 --> 00:18:43,710
reading a value and I'm causing a

00:18:41,430 --> 00:18:45,870
performance issue that's bad but turns

00:18:43,710 --> 00:18:48,270
out like things like offset left offset

00:18:45,870 --> 00:18:50,130
top I'm pretty sure you used some of

00:18:48,270 --> 00:18:52,320
these in something or even if you're

00:18:50,130 --> 00:18:54,360
using react or view or whatever the

00:18:52,320 --> 00:18:57,030
hottest framework nowadays isn't in

00:18:54,360 --> 00:18:58,890
JavaScript you might have some scenarios

00:18:57,030 --> 00:19:01,200
where you might be using some something

00:18:58,890 --> 00:19:03,660
like this there's a guest here at the

00:19:01,200 --> 00:19:06,650
bottom on written by Paul Irish quite a

00:19:03,660 --> 00:19:10,080
while ago on all of these this is just a

00:19:06,650 --> 00:19:11,550
small section of all the functions of

00:19:10,080 --> 00:19:13,310
sorry of all the properties and

00:19:11,550 --> 00:19:16,740
functions that are triggering is layout

00:19:13,310 --> 00:19:18,090
the problem here is not only okay let's

00:19:16,740 --> 00:19:19,350
say the layout is fine

00:19:18,090 --> 00:19:22,230
the browser can compute the layout also

00:19:19,350 --> 00:19:25,560
very fast but there's a problem of

00:19:22,230 --> 00:19:27,300
resource allocation here a for

00:19:25,560 --> 00:19:28,320
synchronous layout most of the times we

00:19:27,300 --> 00:19:32,220
trigger what is called a layout

00:19:28,320 --> 00:19:34,530
thrashing same example again this is

00:19:32,220 --> 00:19:36,000
what you see this example forced reflow

00:19:34,530 --> 00:19:37,680
is likely a performance bottleneck

00:19:36,000 --> 00:19:39,720
because you have the second line the

00:19:37,680 --> 00:19:42,120
scroll y position the browser needs to

00:19:39,720 --> 00:19:43,830
compute the entire layout and then what

00:19:42,120 --> 00:19:45,690
you do on the next line you change the

00:19:43,830 --> 00:19:49,680
Dom so the browser has to recompute the

00:19:45,690 --> 00:19:53,220
layout right so this is like pretty much

00:19:49,680 --> 00:19:55,290
a useless operation that happened one

00:19:53,220 --> 00:19:57,540
line before imagine if you have this

00:19:55,290 --> 00:19:59,190
running multiple times in event handlers

00:19:57,540 --> 00:20:01,050
that it can actually lead to a lot of

00:19:59,190 --> 00:20:04,820
performance bottlenecks and you will see

00:20:01,050 --> 00:20:07,260
this very often on when when looking at

00:20:04,820 --> 00:20:09,210
through the dev tools like forced reflow

00:20:07,260 --> 00:20:09,580
is likely a performance bottleneck this

00:20:09,210 --> 00:20:13,179
is

00:20:09,580 --> 00:20:15,869
this is most likely the cause of it okay

00:20:13,179 --> 00:20:17,110
done with the da Max's let's talk about

00:20:15,869 --> 00:20:21,909
JavaScript

00:20:17,110 --> 00:20:24,659
I need this sip of water because talking

00:20:21,909 --> 00:20:28,090
about JavaScript is gonna take a while

00:20:24,659 --> 00:20:29,980
the first thing you want to look in

00:20:28,090 --> 00:20:32,619
terms of JavaScript and performance at

00:20:29,980 --> 00:20:34,989
runtime is event handlers because that's

00:20:32,619 --> 00:20:39,220
the entry point to any change to any

00:20:34,989 --> 00:20:40,840
user interaction and again coming back

00:20:39,220 --> 00:20:43,419
to the example remember the long running

00:20:40,840 --> 00:20:47,590
tasks like a hundred milliseconds a task

00:20:43,419 --> 00:20:50,289
if that task is triggered by some sort

00:20:47,590 --> 00:20:52,690
of timeout let's say and there's a data

00:20:50,289 --> 00:20:54,399
fetching but the user is not interacting

00:20:52,690 --> 00:20:55,809
with the page at that time that's fine

00:20:54,399 --> 00:20:58,899
that doesn't affect performance

00:20:55,809 --> 00:21:01,090
but event handlers 90 something percent

00:20:58,899 --> 00:21:04,119
of the cases event handlers are user

00:21:01,090 --> 00:21:06,369
triggered so the user wants to focus on

00:21:04,119 --> 00:21:08,649
an input the user types something in an

00:21:06,369 --> 00:21:11,919
input the user Scrolls these or hovers

00:21:08,649 --> 00:21:14,980
over something all of these are all of

00:21:11,919 --> 00:21:17,289
these are all of these event handlers if

00:21:14,980 --> 00:21:20,470
they are if the handler itself takes too

00:21:17,289 --> 00:21:22,749
long to run it will cause the user to

00:21:20,470 --> 00:21:24,999
wait to have draws those drop frames and

00:21:22,749 --> 00:21:27,489
to feel that hey I just click here why

00:21:24,999 --> 00:21:29,289
does it feel like it it's janky why did

00:21:27,489 --> 00:21:30,639
the why did the scroll jump you know

00:21:29,289 --> 00:21:35,230
this is where you this is when you get

00:21:30,639 --> 00:21:36,909
that kind of janky activity and again

00:21:35,230 --> 00:21:40,059
the dev tools are really good at this

00:21:36,909 --> 00:21:41,409
because they figure out all the event

00:21:40,059 --> 00:21:44,409
handlers which are taking I think

00:21:41,409 --> 00:21:48,549
there's a threshold of 100 milliseconds

00:21:44,409 --> 00:21:52,330
that and it's it's it's triggered or it

00:21:48,549 --> 00:21:55,840
has a it has a small red corner that

00:21:52,330 --> 00:21:59,230
says hey this event handler is taking

00:21:55,840 --> 00:22:01,179
too long so a good idea when you have

00:21:59,230 --> 00:22:03,669
when you have this kind of problem is

00:22:01,179 --> 00:22:05,649
maybe to defer whatever action for

00:22:03,669 --> 00:22:08,440
example most of the times on an event

00:22:05,649 --> 00:22:10,059
handler you might be data processing

00:22:08,440 --> 00:22:14,139
something then calling some sort of

00:22:10,059 --> 00:22:17,619
backend API you can try to maybe

00:22:14,139 --> 00:22:19,509
dispatch that on a separate on a

00:22:17,619 --> 00:22:20,980
separate event depending on the

00:22:19,509 --> 00:22:23,170
architecture like for example you have

00:22:20,980 --> 00:22:25,930
like a Redux style architecture

00:22:23,170 --> 00:22:29,140
you can try doing a set time out simply

00:22:25,930 --> 00:22:31,120
allow the handler to run and the visual

00:22:29,140 --> 00:22:34,270
change to happen on the screen only then

00:22:31,120 --> 00:22:36,040
your actual code to run so there are

00:22:34,270 --> 00:22:38,530
there a lot of things that you can do

00:22:36,040 --> 00:22:43,180
here to to change the way in which

00:22:38,530 --> 00:22:46,270
handlers are are affecting kind of like

00:22:43,180 --> 00:22:49,330
performance the next thing about

00:22:46,270 --> 00:22:51,610
handlers is not only how much it takes

00:22:49,330 --> 00:22:54,160
for one instance of the handle to run

00:22:51,610 --> 00:22:57,370
but how much it takes for know how many

00:22:54,160 --> 00:23:01,060
times the handler runs when you do a

00:22:57,370 --> 00:23:03,400
scroll and you just listen on a scroll

00:23:01,060 --> 00:23:06,160
event it you might get you might get it

00:23:03,400 --> 00:23:08,500
: all 40 50 times even just by scrolling

00:23:06,160 --> 00:23:12,640
tapping right for a few hundred

00:23:08,500 --> 00:23:14,530
milliseconds on the on the screen so in

00:23:12,640 --> 00:23:16,090
this case you want to use event

00:23:14,530 --> 00:23:17,560
throttling for those who are not

00:23:16,090 --> 00:23:20,380
familiar with the term throttling is

00:23:17,560 --> 00:23:23,530
basically just saying okay event handler

00:23:20,380 --> 00:23:25,990
will only get called once every 100

00:23:23,530 --> 00:23:28,060
milliseconds with the one hand with

00:23:25,990 --> 00:23:30,610
throttling you can make sure that an

00:23:28,060 --> 00:23:33,820
event handler only is triggered I know

00:23:30,610 --> 00:23:35,740
at most let's say 10 times a second

00:23:33,820 --> 00:23:37,660
which might be significantly less

00:23:35,740 --> 00:23:42,070
impactful on the performance than

00:23:37,660 --> 00:23:43,840
calling it 73 times doing that same the

00:23:42,070 --> 00:23:45,550
same period of time there's an article

00:23:43,840 --> 00:23:47,350
at the bottom also with the difference

00:23:45,550 --> 00:23:49,570
between throttling and debouncing if you

00:23:47,350 --> 00:23:50,920
want to use the bouncing on inputs and

00:23:49,570 --> 00:23:55,330
stuff like that you can read the article

00:23:50,920 --> 00:23:58,090
and paramore about it one quick thing

00:23:55,330 --> 00:24:00,310
that you can fix which is I don't think

00:23:58,090 --> 00:24:03,640
is that well-known is the passive event

00:24:00,310 --> 00:24:06,910
listeners so touch and scroll operations

00:24:03,640 --> 00:24:09,670
are again optimized by the browsers so

00:24:06,910 --> 00:24:13,450
the browser can do the scrolling on a

00:24:09,670 --> 00:24:15,670
separate thread but if you are attaching

00:24:13,450 --> 00:24:17,260
an event handler to the scroll the

00:24:15,670 --> 00:24:20,350
browser has to wait for your event

00:24:17,260 --> 00:24:22,750
handler to to finish because you might

00:24:20,350 --> 00:24:24,910
call prevent default and the browser

00:24:22,750 --> 00:24:26,350
should not scroll so with passive event

00:24:24,910 --> 00:24:30,250
listener you are instructing the browser

00:24:26,350 --> 00:24:32,560
to optimize the scroll and you're making

00:24:30,250 --> 00:24:34,870
a promise that hey I won't call prevent

00:24:32,560 --> 00:24:36,470
default on this event you just optimize

00:24:34,870 --> 00:24:38,780
the scroll I'll just do my thing

00:24:36,470 --> 00:24:40,549
on the handler it's basically like like

00:24:38,780 --> 00:24:42,380
I said in the beginning is deferring the

00:24:40,549 --> 00:24:43,880
work of the handler until the visual

00:24:42,380 --> 00:24:47,510
change can happen first so the visual

00:24:43,880 --> 00:24:51,100
change will have a priority there's a

00:24:47,510 --> 00:24:53,690
video here hopefully it works there's a

00:24:51,100 --> 00:24:55,370
you can also read in the docs more about

00:24:53,690 --> 00:24:57,260
passive my listeners you just have to

00:24:55,370 --> 00:25:08,929
put the passive through parameter when

00:24:57,260 --> 00:25:12,799
you're attaching the event listener so

00:25:08,929 --> 00:25:16,960
it's instantly visible the difference

00:25:12,799 --> 00:25:20,870
between a passive and listener and the

00:25:16,960 --> 00:25:22,669
option without that it's it's

00:25:20,870 --> 00:25:26,659
interesting that CNN is usually used by

00:25:22,669 --> 00:25:28,100
a lot of performance like a lot of

00:25:26,659 --> 00:25:29,690
examples of performance and you would

00:25:28,100 --> 00:25:35,059
imagine they would do a better job by

00:25:29,690 --> 00:25:37,400
now but apparently okay finally

00:25:35,059 --> 00:25:41,150
animations

00:25:37,400 --> 00:25:45,049
all right the juice of all applications

00:25:41,150 --> 00:25:46,820
the the fun part one animations can be

00:25:45,049 --> 00:25:47,990
optimized from two perspective because

00:25:46,820 --> 00:25:52,159
there are two types of animations

00:25:47,990 --> 00:25:54,710
JavaScript animations have a very this

00:25:52,159 --> 00:25:58,549
is not a very common case I agree but if

00:25:54,710 --> 00:26:00,440
by some chance you need to animate

00:25:58,549 --> 00:26:03,650
something from JavaScript you have your

00:26:00,440 --> 00:26:04,700
own custom animation in JavaScript it's

00:26:03,650 --> 00:26:06,679
very important to use

00:26:04,700 --> 00:26:09,289
requestanimationframe because in a

00:26:06,679 --> 00:26:12,080
function like this we have an animate

00:26:09,289 --> 00:26:13,970
box function right which sets the margin

00:26:12,080 --> 00:26:16,730
it this is very stupid example I know I

00:26:13,970 --> 00:26:18,980
know but just bear with me so you're

00:26:16,730 --> 00:26:21,080
setting the margin for example for a box

00:26:18,980 --> 00:26:23,539
you're computing the margin in the

00:26:21,080 --> 00:26:25,820
function and the last call of the

00:26:23,539 --> 00:26:28,909
function is requestanimationframe of the

00:26:25,820 --> 00:26:31,340
same function so the other option would

00:26:28,909 --> 00:26:33,260
be to do like a set interval right or a

00:26:31,340 --> 00:26:36,380
set timeout the problem is that that

00:26:33,260 --> 00:26:38,090
just runs in the regular event queue

00:26:36,380 --> 00:26:39,909
like in the in the event loop of

00:26:38,090 --> 00:26:43,880
JavaScript with requestanimationframe

00:26:39,909 --> 00:26:46,370
you are syncing the function with the

00:26:43,880 --> 00:26:48,500
rendering pipeline so you are assured

00:26:46,370 --> 00:26:50,390
that the animate box function in this

00:26:48,500 --> 00:26:52,910
case will run exactly

00:26:50,390 --> 00:26:55,940
for the rendering pipeline at the end of

00:26:52,910 --> 00:26:58,190
the frame which ensures you that this

00:26:55,940 --> 00:26:59,960
function runs if you have a 60 frames

00:26:58,190 --> 00:27:02,630
per second animation this function runs

00:26:59,960 --> 00:27:06,650
exactly 60 times you won't get that with

00:27:02,630 --> 00:27:10,700
a set interval of 0 or 60 milliseconds

00:27:06,650 --> 00:27:13,060
never so this is very important but I'm

00:27:10,700 --> 00:27:17,540
moving to the CSS animations which is

00:27:13,060 --> 00:27:20,900
probably the most common use case of the

00:27:17,540 --> 00:27:24,050
most common case of animation coming

00:27:20,900 --> 00:27:27,410
back to the rendering pipeline style

00:27:24,050 --> 00:27:32,380
layout paint composite right hopefully

00:27:27,410 --> 00:27:36,800
by now you you remember them what if a

00:27:32,380 --> 00:27:39,800
CSS animation can start with a style and

00:27:36,800 --> 00:27:43,460
then skips the layout part and goes with

00:27:39,800 --> 00:27:46,130
paint and composite or even better what

00:27:43,460 --> 00:27:47,420
if it starts with the style in its style

00:27:46,130 --> 00:27:49,610
ready needs to compute the stylet

00:27:47,420 --> 00:27:51,770
inevitable but what if we skip the

00:27:49,610 --> 00:27:54,590
layout and we skip the paint and we just

00:27:51,770 --> 00:27:55,600
run the composite level layer the

00:27:54,590 --> 00:27:59,300
composite level

00:27:55,600 --> 00:28:02,000
luckily CSS some CSS animations have

00:27:59,300 --> 00:28:04,900
this ability on CSS triggers calm you

00:28:02,000 --> 00:28:08,300
will find a complete list of which rules

00:28:04,900 --> 00:28:09,770
trigger which steps but it seems like a

00:28:08,300 --> 00:28:12,170
bit complicated if you look at the table

00:28:09,770 --> 00:28:14,690
also browser implementations can be fir

00:28:12,170 --> 00:28:17,210
there's a one trick of remembering it if

00:28:14,690 --> 00:28:20,140
it changes the geometry of the element

00:28:17,210 --> 00:28:22,670
is it's a width animation max height

00:28:20,140 --> 00:28:25,280
height whatever animation you're using

00:28:22,670 --> 00:28:28,130
that triggers some sort of change in

00:28:25,280 --> 00:28:29,600
border margin stuff like that sorry but

00:28:28,130 --> 00:28:32,150
it will trigger layout paint and

00:28:29,600 --> 00:28:36,080
composite because it has to recompute

00:28:32,150 --> 00:28:37,460
the entire structure of the Dom if it's

00:28:36,080 --> 00:28:39,080
only a visual property if you're

00:28:37,460 --> 00:28:41,180
animating the color or the background

00:28:39,080 --> 00:28:43,220
color or the visibility of an element

00:28:41,180 --> 00:28:46,640
without taking it out of the Dom in this

00:28:43,220 --> 00:28:51,380
case you get away with a paint and a

00:28:46,640 --> 00:28:53,500
composite and if your CSS rule is

00:28:51,380 --> 00:28:56,740
promoting an element to a new layer

00:28:53,500 --> 00:29:00,800
which is what transform and opacity do

00:28:56,740 --> 00:29:03,560
you will get only composite so it's

00:29:00,800 --> 00:29:03,929
super important if you are noticing for

00:29:03,560 --> 00:29:08,100
exam

00:29:03,929 --> 00:29:09,360
for slow animations you can try in depth

00:29:08,100 --> 00:29:13,619
tours I didn't show this in dev tours

00:29:09,360 --> 00:29:18,720
you can run your CPU with the simulated

00:29:13,619 --> 00:29:21,450
like 4x or 6 6 X slowdown and if you

00:29:18,720 --> 00:29:24,480
notice that the animation starts looking

00:29:21,450 --> 00:29:26,960
like janky and all it might be time to

00:29:24,480 --> 00:29:30,840
switch for example from a height based

00:29:26,960 --> 00:29:34,919
animation of a drop down to a transition

00:29:30,840 --> 00:29:37,080
transform transition based sorry

00:29:34,919 --> 00:29:38,929
translate based animation or you can

00:29:37,080 --> 00:29:43,499
switch to opacity something that

00:29:38,929 --> 00:29:47,580
whatever else now I don't have time

00:29:43,499 --> 00:29:51,029
unfortunately but I have this sandbox

00:29:47,580 --> 00:29:52,529
that you can also check online it's

00:29:51,029 --> 00:29:55,019
going to get slow anyway because of the

00:29:52,529 --> 00:29:58,830
network connection and in this in this

00:29:55,019 --> 00:30:00,779
code sandbox you can check how two boxes

00:29:58,830 --> 00:30:04,710
are moving and eight boxes in the

00:30:00,779 --> 00:30:06,499
samples so two boxes will be moving on

00:30:04,710 --> 00:30:09,240
the screen and you can play with

00:30:06,499 --> 00:30:11,970
animating them by margin and animating

00:30:09,240 --> 00:30:14,820
them by a translate and furthermore

00:30:11,970 --> 00:30:17,399
there's one final touch to this in case

00:30:14,820 --> 00:30:18,600
the browser cannot figure out that hey

00:30:17,399 --> 00:30:21,539
this element needs to be promoted

00:30:18,600 --> 00:30:29,399
there's this trick here called will

00:30:21,539 --> 00:30:31,710
change say this and then I'm off so

00:30:29,399 --> 00:30:33,840
we'll change transform will tell the

00:30:31,710 --> 00:30:35,879
browser hey promote this element I can

00:30:33,840 --> 00:30:37,980
assure you that I will do some animation

00:30:35,879 --> 00:30:39,929
with it for example here I'm writing

00:30:37,980 --> 00:30:41,879
animation in JavaScript so the browser

00:30:39,929 --> 00:30:44,249
just looks at the CSS doesn't know that

00:30:41,879 --> 00:30:46,639
hey this alamin needs to be promoted so

00:30:44,249 --> 00:30:54,659
when you do will change in this example

00:30:46,639 --> 00:30:58,289
you will be you'll be able to you will

00:30:54,659 --> 00:31:01,169
be able to have smooth animations

00:30:58,289 --> 00:31:04,619
without triggering layout and pain keep

00:31:01,169 --> 00:31:06,119
in mind with will change that you should

00:31:04,619 --> 00:31:07,740
don't use it as a last resort you should

00:31:06,119 --> 00:31:09,509
not do will change on any element

00:31:07,740 --> 00:31:12,240
because composition it comes with the

00:31:09,509 --> 00:31:13,559
cost at the end and make sure you test

00:31:12,240 --> 00:31:15,899
everything and you just introduce it

00:31:13,559 --> 00:31:16,800
after you know that it's the only thing

00:31:15,899 --> 00:31:21,930
that left

00:31:16,800 --> 00:31:24,900
in optimizing it so we quick recap we

00:31:21,930 --> 00:31:26,790
talked about these things today and know

00:31:24,900 --> 00:31:30,300
how to read them all all you can follow

00:31:26,790 --> 00:31:33,240
along the slides there are a bunch of

00:31:30,300 --> 00:31:36,390
resources I think they I have more but

00:31:33,240 --> 00:31:39,510
it simply didn't fit more on the slide a

00:31:36,390 --> 00:31:41,460
lot of lot of links on this come find me

00:31:39,510 --> 00:31:44,520
afterwards if you want to to talk about

00:31:41,460 --> 00:31:46,350
anything from CSS animations to stuff

00:31:44,520 --> 00:31:48,690
related to anything I talked about or

00:31:46,350 --> 00:31:50,970
anything I didn't talk about we'll be

00:31:48,690 --> 00:31:53,640
more than happy to interact during the

00:31:50,970 --> 00:31:55,850
next break and thank you very much for

00:31:53,640 --> 00:32:01,580
having me and have a lovely day

00:31:55,850 --> 00:32:08,359
[Applause]

00:32:01,580 --> 00:32:08,359

YouTube URL: https://www.youtube.com/watch?v=juTZsOCd3uw


