Title: How to Become an IoT Developer (and Have Fun!)
Publication date: 2020-10-15
Playlist: ApacheCon @Home 2020: IoT
Description: 
	How to Become an IoT Developer (and Have Fun!)
Justin Mclean

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

I started off my life as a developer writing machine code and C and working on some low-level hardware projects. Then this thing called the internet come along and I moved into the web application space for a couple of decades. More recently I've moved back into commercial IoT development and not unexpectedly a lot has changed over that time. In this talk, I'll cover what it's like developing IoT projects. I'll go over the tools you need and the protocols you need to be familiar with. I'll look at how the C language has evolved to what it is today and how to write code that works well on memory constrained devices. I'll go over producing prototypes, rapid development, debugging and testing embedded applications and what and how much electronics you should learn. In short, everything you need to know in becoming an IoT developer and have fun doing it.

Justin Mclean has more than 25 yearsâ€™ experience in developing web-based applications and is heavily involved in open source hardware and software. He runs his own consulting company Class Software and has spoken at numerous conferences in Australia and overseas. In his free time, he's active in several Apache Software Foundation projects, including the Apache Incubator, and is a mentor for a number of their projects. He is also current the chair of the Apache Incubator and on the ASF board. He also teaches at an online college and runs the IoT meetup in Sydney.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:24,480 --> 00:00:26,880
so

00:00:24,880 --> 00:00:28,560
um welcome everyone thanks for coming to

00:00:26,880 --> 00:00:31,679
my talk on how to become an

00:00:28,560 --> 00:00:35,920
iot developer and have fun uh

00:00:31,679 --> 00:00:39,440
just first off a little bit about me

00:00:35,920 --> 00:00:41,600
look good that's working um so i

00:00:39,440 --> 00:00:44,079
my name's justin mclean i'm a board

00:00:41,600 --> 00:00:46,239
member i'm also the vp of the apache

00:00:44,079 --> 00:00:48,000
incubator but the reason why i'm giving

00:00:46,239 --> 00:00:52,239
this talk is that i'm interested

00:00:48,000 --> 00:00:54,640
in iot and iot development and i've done

00:00:52,239 --> 00:00:56,640
a little bit of that in in recent time

00:00:54,640 --> 00:00:58,399
and a little bit of that in my past as

00:00:56,640 --> 00:01:02,480
well which i'll go into a little more

00:00:58,399 --> 00:01:05,040
detail on i'm also on several pmcs

00:01:02,480 --> 00:01:06,000
at the apache software foundation and

00:01:05,040 --> 00:01:08,640
mentor of several

00:01:06,000 --> 00:01:10,640
projects projects and i've reviewed

00:01:08,640 --> 00:01:13,200
hundreds of releases that apache

00:01:10,640 --> 00:01:14,880
so um you may have come across me when

00:01:13,200 --> 00:01:17,280
i've voted minus one on one of your

00:01:14,880 --> 00:01:17,280
releases

00:01:18,960 --> 00:01:24,400
so first off um

00:01:22,960 --> 00:01:26,640
a little bit about my background and how

00:01:24,400 --> 00:01:29,520
i actually got here

00:01:26,640 --> 00:01:30,400
i've been coding since the 80s and i

00:01:29,520 --> 00:01:34,479
started out in

00:01:30,400 --> 00:01:37,360
low-level machine code and c programming

00:01:34,479 --> 00:01:39,119
and i worked on a lot of very early iot

00:01:37,360 --> 00:01:40,159
projects and they weren't called iot

00:01:39,119 --> 00:01:41,680
back then they were

00:01:40,159 --> 00:01:44,720
they were different things but they were

00:01:41,680 --> 00:01:48,399
basically what we would call iot now

00:01:44,720 --> 00:01:50,640
uh and then as my career progressed this

00:01:48,399 --> 00:01:53,759
thing called the internet came along

00:01:50,640 --> 00:01:55,520
uh and open source hardware came along

00:01:53,759 --> 00:01:56,799
and i sort of got interested back in it

00:01:55,520 --> 00:01:58,000
again i

00:01:56,799 --> 00:01:59,360
i thought well you know i actually

00:01:58,000 --> 00:02:00,799
really like working on that hardware

00:01:59,360 --> 00:02:03,920
stuff and i haven't done that for

00:02:00,799 --> 00:02:05,759
you know 15 20 years and i was

00:02:03,920 --> 00:02:07,200
wondering what has changed i got

00:02:05,759 --> 00:02:09,840
involved

00:02:07,200 --> 00:02:12,800
with some hobbyist platforms such as the

00:02:09,840 --> 00:02:12,800
adreno platform

00:02:13,440 --> 00:02:17,040
and i got interested in that and i

00:02:15,520 --> 00:02:19,920
started running

00:02:17,040 --> 00:02:22,640
talks at apachecon and and other

00:02:19,920 --> 00:02:23,840
conferences on on that and i started up

00:02:22,640 --> 00:02:25,520
the iot sydney

00:02:23,840 --> 00:02:27,120
meetup which has now been going for for

00:02:25,520 --> 00:02:28,879
more than five years

00:02:27,120 --> 00:02:30,239
um and then i sort of come full circle

00:02:28,879 --> 00:02:32,800
again and start working back

00:02:30,239 --> 00:02:34,400
working back on hardware and coding in c

00:02:32,800 --> 00:02:37,040
um more recently i'm actually

00:02:34,400 --> 00:02:38,400
writing content for iot courses as well

00:02:37,040 --> 00:02:39,680
so

00:02:38,400 --> 00:02:43,360
so it's sort of a nice little journey

00:02:39,680 --> 00:02:44,480
that's that's that's started off

00:02:43,360 --> 00:02:46,480
well i finished basically where i

00:02:44,480 --> 00:02:49,040
started off which is

00:02:46,480 --> 00:02:50,000
a fun thing to have um and during that

00:02:49,040 --> 00:02:53,519
time things have certainly

00:02:50,000 --> 00:02:56,640
changed uh and i'm going to list out

00:02:53,519 --> 00:02:59,200
just a few of the major changes here

00:02:56,640 --> 00:03:01,680
the biggest change is the fact that you

00:02:59,200 --> 00:03:04,800
can now have access to very low cost

00:03:01,680 --> 00:03:06,720
easy to program hardware the hardware

00:03:04,800 --> 00:03:10,159
used to be really expensive

00:03:06,720 --> 00:03:11,680
and you also

00:03:10,159 --> 00:03:13,760
couldn't program it that easily you

00:03:11,680 --> 00:03:17,200
actually physically had to take the chip

00:03:13,760 --> 00:03:18,080
out of the thing put it into an apron

00:03:17,200 --> 00:03:20,640
burner

00:03:18,080 --> 00:03:21,440
um burn it that would take 15 minutes or

00:03:20,640 --> 00:03:23,440
so

00:03:21,440 --> 00:03:25,200
uh you'd also have to erase the chip

00:03:23,440 --> 00:03:27,920
under ultraviolet light

00:03:25,200 --> 00:03:28,959
um so these days you just can plug in a

00:03:27,920 --> 00:03:31,040
usb cable

00:03:28,959 --> 00:03:32,879
and send the program across or even do

00:03:31,040 --> 00:03:35,599
it over the air

00:03:32,879 --> 00:03:36,799
by some means so that is one of the

00:03:35,599 --> 00:03:39,840
major things that change and

00:03:36,799 --> 00:03:41,680
it's made it much more accessible

00:03:39,840 --> 00:03:44,000
we also have a lot more modern

00:03:41,680 --> 00:03:45,599
development tools from ide

00:03:44,000 --> 00:03:47,599
some of these are maybe not quite as

00:03:45,599 --> 00:03:51,599
modern as you're used to in

00:03:47,599 --> 00:03:53,599
depending on what you're coding but

00:03:51,599 --> 00:03:55,200
there's been improvements there um

00:03:53,599 --> 00:03:55,760
there's also been some standardization

00:03:55,200 --> 00:03:59,599
in

00:03:55,760 --> 00:04:01,599
in the way that you talk to things and

00:03:59,599 --> 00:04:03,360
the interfaces you use and things along

00:04:01,599 --> 00:04:05,840
those lines so

00:04:03,360 --> 00:04:07,760
if you've worked in one platform you've

00:04:05,840 --> 00:04:09,040
got skills that's transferable across to

00:04:07,760 --> 00:04:10,560
others

00:04:09,040 --> 00:04:12,720
um and then there's just a whole open

00:04:10,560 --> 00:04:13,599
source hardware and software communities

00:04:12,720 --> 00:04:17,280
that have

00:04:13,599 --> 00:04:20,560
risen up and make your life

00:04:17,280 --> 00:04:22,880
so much more easy it's you know

00:04:20,560 --> 00:04:24,720
you don't have to constantly constantly

00:04:22,880 --> 00:04:26,240
reinvent the wheel

00:04:24,720 --> 00:04:27,759
but you know other people have gone and

00:04:26,240 --> 00:04:28,320
done all the hard work for you and you

00:04:27,759 --> 00:04:31,440
can

00:04:28,320 --> 00:04:34,560
you can use their hard work to to do

00:04:31,440 --> 00:04:34,560
more interesting things

00:04:34,720 --> 00:04:38,639
but there's one thing that hasn't

00:04:36,000 --> 00:04:40,400
changed and and that is that hardware is

00:04:38,639 --> 00:04:43,680
hard

00:04:40,400 --> 00:04:45,040
you can't revert changes quickly uh once

00:04:43,680 --> 00:04:48,080
because it's a physical thing

00:04:45,040 --> 00:04:50,160
once it's made it's made uh and you

00:04:48,080 --> 00:04:51,520
you can't undo that trace on the on the

00:04:50,160 --> 00:04:54,320
board

00:04:51,520 --> 00:04:55,759
uh and you can't you know change it once

00:04:54,320 --> 00:04:57,280
once

00:04:55,759 --> 00:04:58,720
once it's out there in the field you

00:04:57,280 --> 00:04:59,840
might be able to change the software on

00:04:58,720 --> 00:05:03,919
it

00:04:59,840 --> 00:05:05,840
but that is a different thing entirely

00:05:03,919 --> 00:05:08,400
people also often underestimate the time

00:05:05,840 --> 00:05:10,160
taken to develop hardware

00:05:08,400 --> 00:05:12,400
it can take a lot longer than you think

00:05:10,160 --> 00:05:14,320
and and a lot of this is going to be

00:05:12,400 --> 00:05:16,000
in some of the complexities low-level

00:05:14,320 --> 00:05:16,960
complexities of it and some of this is

00:05:16,000 --> 00:05:19,120
just in basic

00:05:16,960 --> 00:05:20,560
debugging because it's harder to find

00:05:19,120 --> 00:05:24,560
and debug errors

00:05:20,560 --> 00:05:28,080
um you often have no

00:05:24,560 --> 00:05:28,960
real insight into what's going on in the

00:05:28,080 --> 00:05:32,880
hardware

00:05:28,960 --> 00:05:34,560
uh and in some cases

00:05:32,880 --> 00:05:36,400
you know you can't set break points you

00:05:34,560 --> 00:05:38,320
can't step through the code and do some

00:05:36,400 --> 00:05:41,520
of the other things that you would be

00:05:38,320 --> 00:05:43,840
used to doing in other environments

00:05:41,520 --> 00:05:45,520
uh and the last thing is i've already

00:05:43,840 --> 00:05:46,240
mentioned is that it can sometimes be

00:05:45,520 --> 00:05:49,759
very hard to

00:05:46,240 --> 00:05:52,479
update the software on these devices uh

00:05:49,759 --> 00:05:55,360
and that that is a topic that i could

00:05:52,479 --> 00:05:57,280
spend an entire presentation on

00:05:55,360 --> 00:05:59,680
so hopefully you came along to this talk

00:05:57,280 --> 00:06:02,720
because you are or you want to be

00:05:59,680 --> 00:06:06,160
an iot developer

00:06:02,720 --> 00:06:09,039
and so what is an iot developer well

00:06:06,160 --> 00:06:10,639
it's sort of one name different jobs

00:06:09,039 --> 00:06:13,759
it's the iot has sort of

00:06:10,639 --> 00:06:16,160
uh lost a bit of its hype the shine

00:06:13,759 --> 00:06:17,199
on its name and it now means a lot of

00:06:16,160 --> 00:06:20,720
different things and

00:06:17,199 --> 00:06:23,039
iot is going to be in

00:06:20,720 --> 00:06:24,560
everyday projects and so you can

00:06:23,039 --> 00:06:26,000
actually be an iot developer without

00:06:24,560 --> 00:06:27,280
touching any hardware at all you can be

00:06:26,000 --> 00:06:30,880
writing a software

00:06:27,280 --> 00:06:33,440
that that you know collates all the data

00:06:30,880 --> 00:06:34,000
uh from it and shows a nice dashboard of

00:06:33,440 --> 00:06:36,080
what's going

00:06:34,000 --> 00:06:37,520
on and so forth if you want to see

00:06:36,080 --> 00:06:41,680
something along those lines

00:06:37,520 --> 00:06:41,680
go to chris's talk which is up next

00:06:42,160 --> 00:06:45,440
and

00:06:42,630 --> 00:06:47,520
[Music]

00:06:45,440 --> 00:06:48,880
yeah so you can not do the hardware

00:06:47,520 --> 00:06:49,440
itself so what i'm going to focus on in

00:06:48,880 --> 00:06:51,759
this talk

00:06:49,440 --> 00:06:54,720
is that you want to actually do

00:06:51,759 --> 00:06:56,880
something with the hardware and

00:06:54,720 --> 00:06:57,759
discover a little more about how

00:06:56,880 --> 00:07:01,280
hardware works

00:06:57,759 --> 00:07:03,360
and focus on the more embedded side

00:07:01,280 --> 00:07:04,800
of it but from a software point of view

00:07:03,360 --> 00:07:05,440
so you'll actually be writing software a

00:07:04,800 --> 00:07:08,479
little

00:07:05,440 --> 00:07:09,759
run on these devices so how can you

00:07:08,479 --> 00:07:11,520
actually get into this field and what's

00:07:09,759 --> 00:07:13,280
some of the things you can do

00:07:11,520 --> 00:07:15,120
to you know start to get interested in

00:07:13,280 --> 00:07:17,520
this and start learning about it

00:07:15,120 --> 00:07:19,599
well the thing i like most is you can

00:07:17,520 --> 00:07:21,199
play with toys

00:07:19,599 --> 00:07:22,960
just get yourself one of these cheap

00:07:21,199 --> 00:07:24,560
development boards an adreno or a

00:07:22,960 --> 00:07:25,680
raspberry pi or something similar along

00:07:24,560 --> 00:07:28,160
those lines

00:07:25,680 --> 00:07:29,039
and and i think of a project that

00:07:28,160 --> 00:07:30,800
interests you

00:07:29,039 --> 00:07:32,080
now this can be as simple as just some

00:07:30,800 --> 00:07:34,240
blinking leads

00:07:32,080 --> 00:07:35,759
or it can be monitoring your gardens

00:07:34,240 --> 00:07:37,199
climate you know

00:07:35,759 --> 00:07:39,280
working out when you need to water your

00:07:37,199 --> 00:07:40,960
plants um

00:07:39,280 --> 00:07:43,919
displaying your favorite team sports

00:07:40,960 --> 00:07:46,000
scores hooking it up to twitter or

00:07:43,919 --> 00:07:47,280
whatever well you know if you're into

00:07:46,000 --> 00:07:48,240
beer brewing then

00:07:47,280 --> 00:07:50,000
then you know controlling the

00:07:48,240 --> 00:07:52,400
temperature of your brew and logging

00:07:50,000 --> 00:07:54,160
what's going on

00:07:52,400 --> 00:07:55,680
so and just pick something that

00:07:54,160 --> 00:07:57,120
interests you and just play around with

00:07:55,680 --> 00:07:58,240
it because if you have a personal

00:07:57,120 --> 00:08:01,120
interest in it you're more

00:07:58,240 --> 00:08:01,599
likely to put some time and effort into

00:08:01,120 --> 00:08:03,440
it

00:08:01,599 --> 00:08:13,199
and you'll actually get a lot more out

00:08:03,440 --> 00:08:16,080
of it

00:08:13,199 --> 00:08:16,479
so i just chris's chest there yes the

00:08:16,080 --> 00:08:20,400
the

00:08:16,479 --> 00:08:23,360
the print line is uh blinking lights in

00:08:20,400 --> 00:08:23,360
in the it world

00:08:24,160 --> 00:08:27,199
so um you know the adreno board if you

00:08:25,919 --> 00:08:29,599
haven't seen them it looks

00:08:27,199 --> 00:08:30,720
something like this this is a reasonably

00:08:29,599 --> 00:08:33,440
old one

00:08:30,720 --> 00:08:34,560
uh but it's a good prototyping board to

00:08:33,440 --> 00:08:37,839
starting out with

00:08:34,560 --> 00:08:40,399
it's very robust and rugged uh

00:08:37,839 --> 00:08:41,039
you can turn things on and off with it

00:08:40,399 --> 00:08:44,480
uh

00:08:41,039 --> 00:08:47,839
it has analog inputs as well um

00:08:44,480 --> 00:08:49,120
and yeah you the thing you think you'll

00:08:47,839 --> 00:08:50,080
learn most about playing with one of

00:08:49,120 --> 00:08:53,519
these is

00:08:50,080 --> 00:08:57,200
that it's actually really hard to break

00:08:53,519 --> 00:08:59,360
and and that you can do quite a lot

00:08:57,200 --> 00:09:01,440
a lot with a combination of hardware and

00:08:59,360 --> 00:09:03,600
software

00:09:01,440 --> 00:09:05,200
the ide itself for vitrino there's a

00:09:03,600 --> 00:09:10,320
there's a new cloud id

00:09:05,200 --> 00:09:12,560
as well um esp32s well the leica are

00:09:10,320 --> 00:09:13,760
also a good platform to play with them i

00:09:12,560 --> 00:09:17,200
just noticed a comment

00:09:13,760 --> 00:09:22,080
in the chat thing um

00:09:17,200 --> 00:09:23,680
and and this is sort of a typical code

00:09:22,080 --> 00:09:25,519
uh that you could sort of write an id

00:09:23,680 --> 00:09:27,839
this is very simple you know just

00:09:25,519 --> 00:09:30,240
making some lights blink or changing the

00:09:27,839 --> 00:09:32,480
color of some some lights

00:09:30,240 --> 00:09:33,519
um or the first part of the code anyway

00:09:32,480 --> 00:09:35,600
there so

00:09:33,519 --> 00:09:36,640
um what i like about this idea is that

00:09:35,600 --> 00:09:38,320
it's not complex

00:09:36,640 --> 00:09:40,000
it's only got a few buttons up the top

00:09:38,320 --> 00:09:41,839
you just write your code there most your

00:09:40,000 --> 00:09:44,800
programs are very simple

00:09:41,839 --> 00:09:45,200
uh and it's very easy to upload and test

00:09:44,800 --> 00:09:48,640
and

00:09:45,200 --> 00:09:50,080
and run stuff so once you've sort of

00:09:48,640 --> 00:09:52,160
played around with this a

00:09:50,080 --> 00:09:53,440
little bit what you might want to do is

00:09:52,160 --> 00:09:55,120
start thinking about creating some of

00:09:53,440 --> 00:09:57,920
your own circuits

00:09:55,120 --> 00:10:00,320
and so you want to get a breadboard and

00:09:57,920 --> 00:10:02,959
some wires and wire up a simple circuit

00:10:00,320 --> 00:10:04,399
and and try and then you know maybe

00:10:02,959 --> 00:10:05,600
create a prototype out of that and get

00:10:04,399 --> 00:10:07,120
it working

00:10:05,600 --> 00:10:09,360
and you may not start to need to look

00:10:07,120 --> 00:10:12,880
into you know some

00:10:09,360 --> 00:10:13,200
slight getting some slight more skills

00:10:12,880 --> 00:10:15,839
in

00:10:13,200 --> 00:10:17,760
basic electronics and you might have to

00:10:15,839 --> 00:10:18,560
get yourself a multimeter to work out

00:10:17,760 --> 00:10:20,560
what's going on

00:10:18,560 --> 00:10:22,560
what's going wrong with your your

00:10:20,560 --> 00:10:24,079
circuit there um and there's sort of two

00:10:22,560 --> 00:10:25,760
styles when it comes to creating

00:10:24,079 --> 00:10:27,279
breadboards and wires one is cutting all

00:10:25,760 --> 00:10:28,880
the wires nice to length

00:10:27,279 --> 00:10:30,560
the other is making it look like a rat's

00:10:28,880 --> 00:10:32,240
nest i don't think you can guess which

00:10:30,560 --> 00:10:35,200
one i go with

00:10:32,240 --> 00:10:36,880
uh so anyway so here's a simple

00:10:35,200 --> 00:10:40,079
breadboard with some some

00:10:36,880 --> 00:10:41,920
leads um and some

00:10:40,079 --> 00:10:43,519
resistors on it so just to limit the

00:10:41,920 --> 00:10:46,720
current to the lids

00:10:43,519 --> 00:10:47,200
there's nothing complex here if you want

00:10:46,720 --> 00:10:48,880
to do

00:10:47,200 --> 00:10:50,560
a little more than that when you first

00:10:48,880 --> 00:10:52,800
start out then

00:10:50,560 --> 00:10:54,160
a good idea is to use breakout boards

00:10:52,800 --> 00:10:54,800
and there's lots of companies that will

00:10:54,160 --> 00:10:57,279
actually

00:10:54,800 --> 00:10:57,839
make these boards and you can buy them

00:10:57,279 --> 00:10:59,839
quite

00:10:57,839 --> 00:11:01,200
easily and cheaply depending depending

00:10:59,839 --> 00:11:02,959
on what they do

00:11:01,200 --> 00:11:05,360
and there's there's literally hundreds

00:11:02,959 --> 00:11:06,880
of thousands of them involved

00:11:05,360 --> 00:11:08,399
and these boards are pre-assembled

00:11:06,880 --> 00:11:08,720
they'll have some sort of chip on them

00:11:08,399 --> 00:11:10,800
that

00:11:08,720 --> 00:11:12,399
has a specific purpose they'll often

00:11:10,800 --> 00:11:13,600
have a standard interface that you can

00:11:12,399 --> 00:11:17,600
communicate

00:11:13,600 --> 00:11:20,000
with there's chip with say i i squared c

00:11:17,600 --> 00:11:22,000
or spi and you can basically think of

00:11:20,000 --> 00:11:24,240
them as lego blocks and you can

00:11:22,000 --> 00:11:26,640
plug all these different blocks together

00:11:24,240 --> 00:11:28,320
and make your own project up that can

00:11:26,640 --> 00:11:31,519
have quite a lot of functionality

00:11:28,320 --> 00:11:33,839
and complexity to it just from

00:11:31,519 --> 00:11:36,560
using a few standard off-the-shelf

00:11:33,839 --> 00:11:36,560
breakout boards

00:11:39,279 --> 00:11:42,720
so here's a little air quality control

00:11:42,079 --> 00:11:46,160
board

00:11:42,720 --> 00:11:49,760
that's here and and here's a uh

00:11:46,160 --> 00:11:52,560
a breakout whole lot of breakout boards

00:11:49,760 --> 00:11:53,600
connected to um that's actually a

00:11:52,560 --> 00:11:55,440
particle

00:11:53,600 --> 00:11:57,839
board there but it's similar to an

00:11:55,440 --> 00:11:57,839
adreno

00:11:58,240 --> 00:12:03,600
or rsp esp32

00:12:06,959 --> 00:12:09,360
so the next thing you actually want to

00:12:08,160 --> 00:12:10,079
turn this into something permanent

00:12:09,360 --> 00:12:11,600
because

00:12:10,079 --> 00:12:13,680
uh breadboards are great for making

00:12:11,600 --> 00:12:16,480
prototypes but then they're not really

00:12:13,680 --> 00:12:18,240
very rugged the wires come out easily

00:12:16,480 --> 00:12:21,040
and so the next thing you want to do is

00:12:18,240 --> 00:12:22,720
to learn how to solder

00:12:21,040 --> 00:12:24,079
um and it's actually a lot easier than

00:12:22,720 --> 00:12:26,000
you think you just

00:12:24,079 --> 00:12:27,360
need to use the right tools and in

00:12:26,000 --> 00:12:29,440
particular the right tip

00:12:27,360 --> 00:12:31,360
you need a you know a small properly

00:12:29,440 --> 00:12:33,839
sized tip

00:12:31,360 --> 00:12:34,560
and i would start off with large

00:12:33,839 --> 00:12:36,240
through-hole

00:12:34,560 --> 00:12:37,680
items first rather than going straight

00:12:36,240 --> 00:12:40,079
down the surface mount

00:12:37,680 --> 00:12:42,240
path um once you get a little practice

00:12:40,079 --> 00:12:43,839
with larger components you can then try

00:12:42,240 --> 00:12:46,000
smaller components and it actually

00:12:43,839 --> 00:12:48,399
involves different soldering techniques

00:12:46,000 --> 00:12:50,000
to to solder these together there's lots

00:12:48,399 --> 00:12:51,519
of great useful information online that

00:12:50,000 --> 00:12:53,760
you can find out how to do this

00:12:51,519 --> 00:12:55,760
and videos that you can see but people

00:12:53,760 --> 00:12:58,480
showing you how to do this

00:12:55,760 --> 00:12:59,279
one thing you should learn really early

00:12:58,480 --> 00:13:02,880
on

00:12:59,279 --> 00:13:02,880
is how to correct your mistakes

00:13:03,120 --> 00:13:06,320
and that will save you a lot of time and

00:13:04,639 --> 00:13:09,839
effort because you will make mistakes

00:13:06,320 --> 00:13:09,839
when when you when you start out

00:13:09,920 --> 00:13:13,040
using a flex plan will certainly help

00:13:12,480 --> 00:13:16,880
make

00:13:13,040 --> 00:13:20,079
your life a lot easier and also

00:13:16,880 --> 00:13:22,399
when you start first using ics uh when

00:13:20,079 --> 00:13:23,680
you're first starting to use getting

00:13:22,399 --> 00:13:24,959
your soldering skills together you'll

00:13:23,680 --> 00:13:26,160
tend to hold the iron

00:13:24,959 --> 00:13:27,839
to things for a little too long and

00:13:26,160 --> 00:13:29,600
they'll get overheated and that can

00:13:27,839 --> 00:13:30,959
possibly damage some ics so it's a good

00:13:29,600 --> 00:13:34,240
idea to use sockets

00:13:30,959 --> 00:13:35,839
and then just plug the ics into them

00:13:34,240 --> 00:13:38,720
but electronics are actually getting

00:13:35,839 --> 00:13:40,480
more and more robust as time goes on

00:13:38,720 --> 00:13:41,839
and it's actually reasonably hard to

00:13:40,480 --> 00:13:45,199
damage

00:13:41,839 --> 00:13:48,240
a lot of modern electronics

00:13:45,199 --> 00:13:49,680
so once you've put your skills to use

00:13:48,240 --> 00:13:50,800
there you can actually come up with a

00:13:49,680 --> 00:13:53,199
prototype

00:13:50,800 --> 00:13:54,320
um so this is just using a prototype uh

00:13:53,199 --> 00:13:55,839
board here

00:13:54,320 --> 00:13:57,920
with a couple of components soldered

00:13:55,839 --> 00:13:59,519
onto it and you can see

00:13:57,920 --> 00:14:01,680
it's still looking a bit like the

00:13:59,519 --> 00:14:03,040
breadboard there in that i just soldered

00:14:01,680 --> 00:14:04,880
some wires

00:14:03,040 --> 00:14:07,519
that were looping across the surface of

00:14:04,880 --> 00:14:07,519
the board there

00:14:08,160 --> 00:14:11,920
so once you've got this you wanted to do

00:14:10,560 --> 00:14:13,920
something and now the whole point of

00:14:11,920 --> 00:14:17,120
this is that you want to write some code

00:14:13,920 --> 00:14:18,399
that goes on it um and in most cases you

00:14:17,120 --> 00:14:21,920
probably need to use

00:14:18,399 --> 00:14:24,560
a a new language and most boards

00:14:21,920 --> 00:14:26,000
uh will actually use c uh some will use

00:14:24,560 --> 00:14:29,040
c plus plus and there's a few

00:14:26,000 --> 00:14:32,399
other platforms that exist

00:14:29,040 --> 00:14:32,959
as well so there are boards which you

00:14:32,399 --> 00:14:35,360
can actually

00:14:32,959 --> 00:14:36,560
code python or micropython on and you

00:14:35,360 --> 00:14:38,160
can also

00:14:36,560 --> 00:14:40,079
there's a couple of bullets that you can

00:14:38,160 --> 00:14:43,199
use javascript but

00:14:40,079 --> 00:14:44,399
a c is not too hard to learn and the

00:14:43,199 --> 00:14:45,920
sort of programs that you're going to be

00:14:44,399 --> 00:14:50,240
writing here

00:14:45,920 --> 00:14:50,240
uh are not going to be that complex

00:14:50,480 --> 00:14:54,800
and you'll get you'll actually learn a

00:14:52,320 --> 00:14:58,079
lot by using a language that

00:14:54,800 --> 00:14:58,560
has uh pointers and memory management i

00:14:58,079 --> 00:15:00,399
know

00:14:58,560 --> 00:15:01,839
chris is in the in the chat they will

00:15:00,399 --> 00:15:04,399
probably just agree with me because

00:15:01,839 --> 00:15:08,000
he's uh recently had to write some c and

00:15:04,399 --> 00:15:08,000
i don't think he was enjoying it at all

00:15:10,399 --> 00:15:16,240
so um yeah he's replied not really

00:15:16,800 --> 00:15:19,760
so you may have need to forget some of

00:15:18,320 --> 00:15:20,959
the stuff that you need that you've

00:15:19,760 --> 00:15:22,880
already learned you know you need to

00:15:20,959 --> 00:15:26,160
unlearn some stuff in order to learn

00:15:22,880 --> 00:15:29,519
learn something something new um c is

00:15:26,160 --> 00:15:33,360
not as complicated as you may think

00:15:29,519 --> 00:15:36,079
and in particular the way that modern c

00:15:33,360 --> 00:15:37,759
is written is a little different to uh

00:15:36,079 --> 00:15:41,040
how you may have come across it

00:15:37,759 --> 00:15:44,399
in the in the past so

00:15:41,040 --> 00:15:45,920
uh yeah just just take that on board and

00:15:44,399 --> 00:15:46,800
and it's always good learning new stuff

00:15:45,920 --> 00:15:49,199
anyway

00:15:46,800 --> 00:15:51,120
so here's like again like here's a very

00:15:49,199 --> 00:15:54,160
simple adreno program

00:15:51,120 --> 00:15:57,600
and what this does is that it's

00:15:54,160 --> 00:15:58,560
set up a pin in this case pin 10 to be

00:15:57,600 --> 00:16:01,440
an output

00:15:58,560 --> 00:16:02,880
that's in the setup function there and

00:16:01,440 --> 00:16:05,920
then in the loop function

00:16:02,880 --> 00:16:07,920
it's just turning that pin off

00:16:05,920 --> 00:16:10,000
waiting half a second then turning that

00:16:07,920 --> 00:16:11,519
pin on and waiting half a second so this

00:16:10,000 --> 00:16:14,560
will make a little lip blink

00:16:11,519 --> 00:16:17,360
this is basically the hello world of the

00:16:14,560 --> 00:16:17,360
iot world

00:16:20,839 --> 00:16:26,800
so if you want to learn

00:16:23,440 --> 00:16:27,600
a little more about c then what you

00:16:26,800 --> 00:16:30,880
should do

00:16:27,600 --> 00:16:32,560
is um possibly go back and read one of

00:16:30,880 --> 00:16:36,959
the classics this is the

00:16:32,560 --> 00:16:39,680
k r c programming language manual

00:16:36,959 --> 00:16:41,279
this will contain just about everything

00:16:39,680 --> 00:16:42,320
you need to know but it is as i said a

00:16:41,279 --> 00:16:45,920
little dated and c

00:16:42,320 --> 00:16:47,839
has gone through a few more modern

00:16:45,920 --> 00:16:51,839
revisions

00:16:47,839 --> 00:16:54,160
and i would recommend maybe this book as

00:16:51,839 --> 00:16:54,160
well

00:16:58,160 --> 00:17:04,319
so c has has definitely improved

00:17:02,639 --> 00:17:06,400
and there's a couple of different float

00:17:04,319 --> 00:17:08,880
loops

00:17:06,400 --> 00:17:10,640
skipped a slide there no no for some

00:17:08,880 --> 00:17:13,679
reason i've managed to put one

00:17:10,640 --> 00:17:14,240
down there um so there's a whole lot of

00:17:13,679 --> 00:17:17,679
different

00:17:14,240 --> 00:17:19,280
different versions of c um so you need

00:17:17,679 --> 00:17:19,679
to decide which one you're going to go

00:17:19,280 --> 00:17:22,799
with

00:17:19,679 --> 00:17:24,319
in some cases that

00:17:22,799 --> 00:17:25,919
my choice may have been made for you by

00:17:24,319 --> 00:17:26,559
the architecture of the board or

00:17:25,919 --> 00:17:29,679
whatever

00:17:26,559 --> 00:17:31,440
i see 99 seems to be a good base

00:17:29,679 --> 00:17:33,760
set of features and it's added a few

00:17:31,440 --> 00:17:35,440
more

00:17:33,760 --> 00:17:37,440
things that you may not have run into if

00:17:35,440 --> 00:17:40,559
you used to old style k

00:17:37,440 --> 00:17:41,600
rc things like different building and

00:17:40,559 --> 00:17:43,440
mint types

00:17:41,600 --> 00:17:45,120
auto sizing is a raise which is which is

00:17:43,440 --> 00:17:48,000
quite nice it's got

00:17:45,120 --> 00:17:48,799
support for floating point numbers uh in

00:17:48,000 --> 00:17:51,919
this case

00:17:48,799 --> 00:17:54,080
uh ieee 754 version

00:17:51,919 --> 00:17:57,120
uh and also inline functions which is

00:17:54,080 --> 00:17:57,120
which is sort of nice

00:17:59,120 --> 00:18:05,280
um you do when you start

00:18:02,960 --> 00:18:05,280
out

00:18:06,160 --> 00:18:08,480
is

00:18:09,280 --> 00:18:14,160
you might want to avoid dynamic

00:18:11,679 --> 00:18:15,760
allocation of memory altogether

00:18:14,160 --> 00:18:18,320
you may not have a choice but it may be

00:18:15,760 --> 00:18:21,280
a good way to do it so you can basically

00:18:18,320 --> 00:18:23,919
pre-allocate everything that you need

00:18:21,280 --> 00:18:25,200
and that way you know that you're not

00:18:23,919 --> 00:18:28,080
going to

00:18:25,200 --> 00:18:29,679
have issues with running out of memory

00:18:28,080 --> 00:18:33,520
or

00:18:29,679 --> 00:18:33,520
you know other issues along those lines

00:18:33,919 --> 00:18:37,919
um also just be careful with using

00:18:36,160 --> 00:18:38,160
pointers these may be a new thing to you

00:18:37,919 --> 00:18:41,360
and

00:18:38,160 --> 00:18:42,960
you may run into some some trouble and

00:18:41,360 --> 00:18:44,799
i would just try and keep the code as

00:18:42,960 --> 00:18:46,160
simple as possible and not try to do

00:18:44,799 --> 00:18:48,880
anything fancy

00:18:46,160 --> 00:18:49,440
you can always improve the performance

00:18:48,880 --> 00:18:52,880
uh

00:18:49,440 --> 00:18:52,880
you know later if it's needed

00:18:54,840 --> 00:19:00,080
definitely

00:18:56,240 --> 00:19:03,120
don't uh try and

00:19:00,080 --> 00:19:04,720
optimize things too early um you can

00:19:03,120 --> 00:19:08,000
also encapsulate all the hard bits

00:19:04,720 --> 00:19:10,400
you know um and and

00:19:08,000 --> 00:19:11,760
make sure that you can get those working

00:19:10,400 --> 00:19:14,240
with a clean api

00:19:11,760 --> 00:19:16,320
and then it makes it a lot easier to use

00:19:14,240 --> 00:19:18,320
in the rest of the program

00:19:16,320 --> 00:19:21,039
and there's a few things that you need

00:19:18,320 --> 00:19:22,480
to take care of in terms of

00:19:21,039 --> 00:19:24,320
in terms of memory management most of

00:19:22,480 --> 00:19:25,600
these constrained systems have very

00:19:24,320 --> 00:19:27,200
small amounts of memory

00:19:25,600 --> 00:19:28,640
you want to make sure that you're not

00:19:27,200 --> 00:19:31,360
using up too much memory so

00:19:28,640 --> 00:19:32,720
using the appropriate size integers is a

00:19:31,360 --> 00:19:35,360
is a good thing to do

00:19:32,720 --> 00:19:35,919
and you need to take care with strings

00:19:35,360 --> 00:19:37,679
in c

00:19:35,919 --> 00:19:39,679
because these are null terminated so

00:19:37,679 --> 00:19:41,039
they've got a special character at the

00:19:39,679 --> 00:19:43,360
end of the string

00:19:41,039 --> 00:19:45,360
and it's quite easy to to mess that up

00:19:43,360 --> 00:19:47,039
and not put the null on the end we'll go

00:19:45,360 --> 00:19:50,720
off the end of the string or do other

00:19:47,039 --> 00:19:52,880
other horrible things along those lines

00:19:50,720 --> 00:19:54,400
however i've been talking about these

00:19:52,880 --> 00:19:56,640
things systems being constrained

00:19:54,400 --> 00:19:57,440
not having a lot of memory but you can

00:19:56,640 --> 00:20:00,880
do

00:19:57,440 --> 00:20:02,880
an awful lot in a small amount of memory

00:20:00,880 --> 00:20:04,799
so on the adreno for example you can

00:20:02,880 --> 00:20:05,440
write a web server in about 20 lines of

00:20:04,799 --> 00:20:09,120
code

00:20:05,440 --> 00:20:12,640
and that compiles down to 2k

00:20:09,120 --> 00:20:14,960
in size so

00:20:12,640 --> 00:20:15,919
it's um it's quite amazing what you can

00:20:14,960 --> 00:20:17,200
do on

00:20:15,919 --> 00:20:19,679
these things now you're not going to be

00:20:17,200 --> 00:20:22,480
able to serve videos

00:20:19,679 --> 00:20:23,440
or anything like that off of off that

00:20:22,480 --> 00:20:25,039
platform

00:20:23,440 --> 00:20:26,960
uh but it's good enough to have a little

00:20:25,039 --> 00:20:27,840
interface that you can communicate with

00:20:26,960 --> 00:20:32,000
or talk to or

00:20:27,840 --> 00:20:33,679
or even serve some web pages off from

00:20:32,000 --> 00:20:35,039
so by this point you're going to need to

00:20:33,679 --> 00:20:36,640
know some some

00:20:35,039 --> 00:20:38,320
electronic basics and this will this

00:20:36,640 --> 00:20:41,840
will definitely help you in your

00:20:38,320 --> 00:20:42,880
in your path here um and most of the

00:20:41,840 --> 00:20:45,760
things you're going to be dealing with

00:20:42,880 --> 00:20:48,000
is is digital logic not analog logic

00:20:45,760 --> 00:20:49,600
uh sorry about digital electronics on

00:20:48,000 --> 00:20:52,559
analog electronics

00:20:49,600 --> 00:20:53,679
so um generally this is means either

00:20:52,559 --> 00:20:56,000
five volts or three and

00:20:53,679 --> 00:20:57,600
three point three volts is one and nord

00:20:56,000 --> 00:21:00,159
volts is zero

00:20:57,600 --> 00:21:02,320
um and so that's pretty easy to to

00:21:00,159 --> 00:21:03,120
understand and get used to um and then

00:21:02,320 --> 00:21:05,760
you're going to get in

00:21:03,120 --> 00:21:07,520
to you know a few basic techniques and

00:21:05,760 --> 00:21:09,520
and in building circuits

00:21:07,520 --> 00:21:11,280
about how you can limit currents to

00:21:09,520 --> 00:21:13,760
leads so they glow

00:21:11,280 --> 00:21:15,760
with the right brightness how to use

00:21:13,760 --> 00:21:18,240
transistors for switching

00:21:15,760 --> 00:21:20,799
turning things on and off if you were

00:21:18,240 --> 00:21:24,159
using a few ics you need

00:21:20,799 --> 00:21:26,559
cap capacitors to

00:21:24,159 --> 00:21:29,039
to make sure that their power supplies

00:21:26,559 --> 00:21:30,799
are constant

00:21:29,039 --> 00:21:32,240
and also if you're using switches you

00:21:30,799 --> 00:21:33,440
need to use pull up or pull down

00:21:32,240 --> 00:21:35,360
resistors

00:21:33,440 --> 00:21:36,640
so they actually work as switches and

00:21:35,360 --> 00:21:40,240
give proper

00:21:36,640 --> 00:21:42,720
logic levels of you know one and zero

00:21:40,240 --> 00:21:43,280
and not indeterminate values which can

00:21:42,720 --> 00:21:46,000
totally

00:21:43,280 --> 00:21:47,120
screw things up and sometimes vaulted

00:21:46,000 --> 00:21:49,440
dividers are

00:21:47,120 --> 00:21:50,880
useful but once you know most of those

00:21:49,440 --> 00:21:52,000
things there and all these are very very

00:21:50,880 --> 00:21:54,559
simple

00:21:52,000 --> 00:21:56,480
and you can you can look them up um

00:21:54,559 --> 00:21:57,679
you'll be well on your way to making

00:21:56,480 --> 00:22:00,480
some of your own

00:21:57,679 --> 00:22:02,000
circuits and so forth once you start

00:22:00,480 --> 00:22:04,799
using some of these components

00:22:02,000 --> 00:22:06,159
these will come with data sheets and

00:22:04,799 --> 00:22:07,679
you'll need to learn a little bit about

00:22:06,159 --> 00:22:09,440
how to read the data sheet and look for

00:22:07,679 --> 00:22:12,960
what the important values are

00:22:09,440 --> 00:22:15,120
in there now don't be so concerned if

00:22:12,960 --> 00:22:16,799
you don't understand all of it

00:22:15,120 --> 00:22:18,640
you probably don't need to know all of

00:22:16,799 --> 00:22:21,039
it they often contain

00:22:18,640 --> 00:22:22,880
far more data than you actually need and

00:22:21,039 --> 00:22:23,360
um you're only interested in the few

00:22:22,880 --> 00:22:26,480
things

00:22:23,360 --> 00:22:28,559
that in your use force for example if

00:22:26,480 --> 00:22:31,440
you look at a data sheet for a lead

00:22:28,559 --> 00:22:32,799
you want to know uh what the forward

00:22:31,440 --> 00:22:34,400
voltage of it is

00:22:32,799 --> 00:22:36,960
uh so you know what the voltage drop is

00:22:34,400 --> 00:22:38,159
across the lid and you want to know

00:22:36,960 --> 00:22:40,000
you know how much power it's going to

00:22:38,159 --> 00:22:42,320
consume and once you know

00:22:40,000 --> 00:22:44,080
those two things you can you can work

00:22:42,320 --> 00:22:45,280
out you know the value of the resistor

00:22:44,080 --> 00:22:48,400
for example for

00:22:45,280 --> 00:22:50,159
limiting current through it

00:22:48,400 --> 00:22:51,679
um quite often these datasheets will

00:22:50,159 --> 00:22:53,919
contain

00:22:51,679 --> 00:22:55,440
sample circuits and that's a great thing

00:22:53,919 --> 00:22:56,880
because it means

00:22:55,440 --> 00:22:58,559
they've gone off and done the work for

00:22:56,880 --> 00:23:00,559
you and can show you how you can

00:22:58,559 --> 00:23:02,559
actually use something

00:23:00,559 --> 00:23:04,400
uh in some cases they're going to

00:23:02,559 --> 00:23:05,840
provide timing information

00:23:04,400 --> 00:23:08,240
and that's going to be useful if you're

00:23:05,840 --> 00:23:08,559
programming something and generally you

00:23:08,240 --> 00:23:10,240
can

00:23:08,559 --> 00:23:12,799
you can actually with something like the

00:23:10,240 --> 00:23:14,720
adreno because they run reasonably fast

00:23:12,799 --> 00:23:16,159
you can actually use what's called a bit

00:23:14,720 --> 00:23:18,960
banging technique

00:23:16,159 --> 00:23:19,919
and actually simulate this timing but

00:23:18,960 --> 00:23:22,559
just by turning

00:23:19,919 --> 00:23:23,120
digital inputs on and off very fast and

00:23:22,559 --> 00:23:25,600
you don't

00:23:23,120 --> 00:23:25,600
have to

00:23:26,240 --> 00:23:29,600
do it so precisely and you'll still be

00:23:28,559 --> 00:23:31,679
able to get away with

00:23:29,600 --> 00:23:32,880
with things working just be careful that

00:23:31,679 --> 00:23:35,919
data sheets can

00:23:32,880 --> 00:23:36,640
vary a lot in quality and sometimes they

00:23:35,919 --> 00:23:40,000
can even be

00:23:36,640 --> 00:23:43,279
misleading so if you buy random bits

00:23:40,000 --> 00:23:44,880
of ebay and

00:23:43,279 --> 00:23:46,400
they may not even come with a data sheet

00:23:44,880 --> 00:23:47,279
or if they do the data sheet may not

00:23:46,400 --> 00:23:51,200
even be for that

00:23:47,279 --> 00:23:53,360
for that part

00:23:51,200 --> 00:23:54,799
so once you get to this stage and going

00:23:53,360 --> 00:23:56,559
a little further you're going to have

00:23:54,799 --> 00:23:58,000
learn how to read a circuit diagram and

00:23:56,559 --> 00:23:59,520
you just need to know at this point that

00:23:58,000 --> 00:24:02,320
the basic symbols

00:23:59,520 --> 00:24:03,600
and how to match up pins on in ics

00:24:02,320 --> 00:24:05,919
integrated circuits

00:24:03,600 --> 00:24:07,039
so you know how to hook them up on your

00:24:05,919 --> 00:24:10,400
breadboard or

00:24:07,039 --> 00:24:12,559
in your you know your prototype

00:24:10,400 --> 00:24:14,240
so here's a little sample schematic of

00:24:12,559 --> 00:24:17,600
an ic

00:24:14,240 --> 00:24:18,320
this just shows it's an accelerometer i

00:24:17,600 --> 00:24:19,600
believe

00:24:18,320 --> 00:24:22,159
and it's just got a couple of extra

00:24:19,600 --> 00:24:24,559
components there including

00:24:22,159 --> 00:24:25,840
um some capacitors and and that's about

00:24:24,559 --> 00:24:27,520
it

00:24:25,840 --> 00:24:28,960
but each of those pins there means

00:24:27,520 --> 00:24:29,360
something and if you look at the data

00:24:28,960 --> 00:24:30,799
sheet

00:24:29,360 --> 00:24:33,120
those pins will tell you what you need

00:24:30,799 --> 00:24:35,279
to do and how you need to connect them

00:24:33,120 --> 00:24:35,279
up

00:24:37,919 --> 00:24:40,960
so by this stage

00:24:41,120 --> 00:24:44,240
you've made things on breadboards you've

00:24:42,559 --> 00:24:46,720
made things on prototyping boards

00:24:44,240 --> 00:24:48,080
you can actually make a pcb um and and

00:24:46,720 --> 00:24:49,760
this is actually

00:24:48,080 --> 00:24:51,679
you know why should you do this it's fun

00:24:49,760 --> 00:24:54,320
and it's actually quite cheap

00:24:51,679 --> 00:24:54,720
um these days you can get like 10 boards

00:24:54,320 --> 00:24:56,320
made

00:24:54,720 --> 00:24:58,159
no reasonable sideboards and we're

00:24:56,320 --> 00:25:00,640
talking simple boards just single

00:24:58,159 --> 00:25:02,799
double-sided boards uh 10 boards done

00:25:00,640 --> 00:25:04,400
for about 10

00:25:02,799 --> 00:25:06,720
i would suggest you start out with a

00:25:04,400 --> 00:25:08,000
basic pcb layout program something like

00:25:06,720 --> 00:25:10,480
fritzing

00:25:08,000 --> 00:25:12,000
there are other open source ones around

00:25:10,480 --> 00:25:14,240
as well that are

00:25:12,000 --> 00:25:15,200
kaikad for example which are more

00:25:14,240 --> 00:25:16,320
complex

00:25:15,200 --> 00:25:20,320
but they're going to take longer to

00:25:16,320 --> 00:25:23,919
learn and you'll

00:25:20,320 --> 00:25:23,919
may that may be a stumbling block

00:25:24,400 --> 00:25:27,440
so fritzing will do some basic checks

00:25:26,400 --> 00:25:29,279
for you

00:25:27,440 --> 00:25:31,360
it's got a breadboard layout and a

00:25:29,279 --> 00:25:32,880
circuit layout and a pcb layout you can

00:25:31,360 --> 00:25:34,320
switch between all three of them

00:25:32,880 --> 00:25:36,000
which is really nice and if you make

00:25:34,320 --> 00:25:37,200
changes as one it will make changes in

00:25:36,000 --> 00:25:38,400
the other

00:25:37,200 --> 00:25:40,640
and particularly when you're starting

00:25:38,400 --> 00:25:41,919
out that's a great help

00:25:40,640 --> 00:25:43,840
and there's just a few things you need

00:25:41,919 --> 00:25:45,279
to be to be aware of when you're laying

00:25:43,840 --> 00:25:46,960
out these boards

00:25:45,279 --> 00:25:48,720
um it's that you don't want to cross the

00:25:46,960 --> 00:25:49,600
track tracks because that causes a short

00:25:48,720 --> 00:25:51,279
circuit

00:25:49,600 --> 00:25:52,880
um and sometimes you can actually go

00:25:51,279 --> 00:25:54,320
between the top layer of the board and

00:25:52,880 --> 00:25:57,120
the bottom layer of the board

00:25:54,320 --> 00:25:58,559
via a little wire and that's the way you

00:25:57,120 --> 00:25:59,760
can connect things between the two

00:25:58,559 --> 00:26:03,039
boards

00:25:59,760 --> 00:26:05,760
um and you also need to understand about

00:26:03,039 --> 00:26:06,640
ground fill and copper fill because you

00:26:05,760 --> 00:26:08,080
don't

00:26:06,640 --> 00:26:09,279
you you don't want to etch all the

00:26:08,080 --> 00:26:10,799
copper off the board because that's

00:26:09,279 --> 00:26:13,200
that's wasteful

00:26:10,799 --> 00:26:14,080
um but again all of this is fairly

00:26:13,200 --> 00:26:17,840
straightforward

00:26:14,080 --> 00:26:19,520
and would you know most people could

00:26:17,840 --> 00:26:21,840
be able to put a board together like the

00:26:19,520 --> 00:26:25,840
one i've shown there in the space a half

00:26:21,840 --> 00:26:25,840
a day from knowing nothing at all

00:26:26,080 --> 00:26:30,320
so that's what the board looks like when

00:26:28,400 --> 00:26:33,039
you made it and then once you've sold

00:26:30,320 --> 00:26:35,840
everything up um you'll find that

00:26:33,039 --> 00:26:35,840
hopefully it works

00:26:36,080 --> 00:26:41,760
so some things to to to be uh

00:26:39,360 --> 00:26:43,120
careful of is there's always a

00:26:41,760 --> 00:26:45,600
temptation to use small

00:26:43,120 --> 00:26:48,080
cheap surface mount components and to

00:26:45,600 --> 00:26:51,279
really miniaturize things and go small

00:26:48,080 --> 00:26:53,840
um this keeps the costs down but it

00:26:51,279 --> 00:26:56,720
makes the devices a lot harder to debug

00:26:53,840 --> 00:26:57,200
and you may make a few mistakes in you

00:26:56,720 --> 00:27:00,559
know

00:26:57,200 --> 00:27:03,039
your first device um and it also makes

00:27:00,559 --> 00:27:04,799
it almost it makes it hard or sometimes

00:27:03,039 --> 00:27:05,520
even impossible to make modifications to

00:27:04,799 --> 00:27:08,880
the board

00:27:05,520 --> 00:27:09,440
if you uh make a mistake on a larger

00:27:08,880 --> 00:27:11,360
board

00:27:09,440 --> 00:27:13,039
you can easily just get a knife and cut

00:27:11,360 --> 00:27:14,559
a track or you can solder some wires

00:27:13,039 --> 00:27:15,919
together

00:27:14,559 --> 00:27:18,159
or something along those lines to

00:27:15,919 --> 00:27:18,640
correct some mistakes but the smaller

00:27:18,159 --> 00:27:22,480
you get

00:27:18,640 --> 00:27:24,080
the harder it is to to do that

00:27:22,480 --> 00:27:25,919
and also the the boards may also have

00:27:24,080 --> 00:27:28,000
higher defect rates

00:27:25,919 --> 00:27:29,279
um particularly when you're starting out

00:27:28,000 --> 00:27:30,000
and you may not understand all the

00:27:29,279 --> 00:27:32,240
tolerances

00:27:30,000 --> 00:27:34,960
and and what you need to do to to make

00:27:32,240 --> 00:27:38,720
boards of that size

00:27:34,960 --> 00:27:41,760
um another good thing uh you can do

00:27:38,720 --> 00:27:42,720
is uh don't use the hardware at all i

00:27:41,760 --> 00:27:45,120
actually just

00:27:42,720 --> 00:27:46,640
write all your code and compile it and

00:27:45,120 --> 00:27:48,559
test it locally

00:27:46,640 --> 00:27:50,320
because you're just writing c standard c

00:27:48,559 --> 00:27:53,600
works just about everywhere

00:27:50,320 --> 00:27:56,880
um and you know

00:27:53,600 --> 00:27:59,120
your laptop is going to be a lot faster

00:27:56,880 --> 00:28:00,000
than the development board you're

00:27:59,120 --> 00:28:01,440
working on

00:28:00,000 --> 00:28:03,679
and it's also going to be a lot easier

00:28:01,440 --> 00:28:04,320
to debug um you've probably got a nicer

00:28:03,679 --> 00:28:06,000
ide

00:28:04,320 --> 00:28:08,559
you can step through things you can set

00:28:06,000 --> 00:28:10,159
break points now in this case as you

00:28:08,559 --> 00:28:11,760
you're probably going to mean you can

00:28:10,159 --> 00:28:13,840
you're going to have to stub things out

00:28:11,760 --> 00:28:15,039
or you're going to have to you know make

00:28:13,840 --> 00:28:16,480
some assumptions there and there were

00:28:15,039 --> 00:28:19,520
some there's certainly some stuff that

00:28:16,480 --> 00:28:21,679
you're not going to be able to

00:28:19,520 --> 00:28:22,960
code uh without using the actual

00:28:21,679 --> 00:28:24,559
hardware

00:28:22,960 --> 00:28:26,399
um it also means you can write unit

00:28:24,559 --> 00:28:28,240
tests for all your stuff

00:28:26,399 --> 00:28:30,080
and that means you you you can get about

00:28:28,240 --> 00:28:33,760
80 done and you have a really

00:28:30,080 --> 00:28:35,440
good idea that it's going to work well

00:28:33,760 --> 00:28:38,559
and then what you do is you go off and

00:28:35,440 --> 00:28:39,679
test it on on the actual hardware

00:28:38,559 --> 00:28:41,200
um because at some point it's going to

00:28:39,679 --> 00:28:42,559
run on the real hardware so you've got

00:28:41,200 --> 00:28:46,480
to test it there

00:28:42,559 --> 00:28:48,960
now with modern hardware and modern ides

00:28:46,480 --> 00:28:50,399
in this environment most so most of them

00:28:48,960 --> 00:28:51,919
well not all of them but most of them

00:28:50,399 --> 00:28:55,440
will actually support

00:28:51,919 --> 00:28:56,960
uh modern debugging and

00:28:55,440 --> 00:28:59,120
they can you know you can set

00:28:56,960 --> 00:28:59,919
breakpoints set through the code line by

00:28:59,120 --> 00:29:02,640
line

00:28:59,919 --> 00:29:04,320
and you can do other things as well uh

00:29:02,640 --> 00:29:04,799
the one thing you want to do is you you

00:29:04,320 --> 00:29:07,600
want to

00:29:04,799 --> 00:29:09,120
test release builds as well as debug

00:29:07,600 --> 00:29:10,960
builds and make sure that things are

00:29:09,120 --> 00:29:13,840
working on the release version and the

00:29:10,960 --> 00:29:13,840
debug version

00:29:16,080 --> 00:29:19,120
um don't forget that you also want to

00:29:18,000 --> 00:29:20,880
test your hardware

00:29:19,120 --> 00:29:22,320
you you need to have some way of testing

00:29:20,880 --> 00:29:25,279
that and

00:29:22,320 --> 00:29:26,640
there's a few options that you can do

00:29:25,279 --> 00:29:29,279
one is you want to have

00:29:26,640 --> 00:29:30,559
some sort of boot up sequence on the on

00:29:29,279 --> 00:29:31,440
the hardware where the power is first

00:29:30,559 --> 00:29:32,720
applied

00:29:31,440 --> 00:29:34,799
and that will check that a couple of

00:29:32,720 --> 00:29:37,919
things are working and possibly give

00:29:34,799 --> 00:29:39,440
some feedback uh to indicate if

00:29:37,919 --> 00:29:40,480
something's gone wrong that may just be

00:29:39,440 --> 00:29:42,000
you know

00:29:40,480 --> 00:29:43,840
blinking a lead or changing the color of

00:29:42,000 --> 00:29:45,120
the lead to tell you what's what's

00:29:43,840 --> 00:29:46,880
happening there

00:29:45,120 --> 00:29:49,120
you can also put physical test points on

00:29:46,880 --> 00:29:50,720
the board itself to make it easier to

00:29:49,120 --> 00:29:52,240
to measure currents and voltages so you

00:29:50,720 --> 00:29:53,360
can make sure that things are working

00:29:52,240 --> 00:29:55,279
properly

00:29:53,360 --> 00:29:56,559
and if you're making a large number of

00:29:55,279 --> 00:29:58,720
boards

00:29:56,559 --> 00:29:59,679
what you want to do is you want to make

00:29:58,720 --> 00:30:01,520
up a test rig

00:29:59,679 --> 00:30:03,039
that has the they're called pogo pins

00:30:01,520 --> 00:30:03,760
and they push down on all the test

00:30:03,039 --> 00:30:06,320
points

00:30:03,760 --> 00:30:09,840
and that way you can you can test large

00:30:06,320 --> 00:30:09,840
amounts of boards quite quickly

00:30:10,640 --> 00:30:15,600
with these constrained systems um you

00:30:13,360 --> 00:30:18,640
want to watch out for your memory

00:30:15,600 --> 00:30:19,200
uh like you know 32k or 128k or even a

00:30:18,640 --> 00:30:23,120
meg

00:30:19,200 --> 00:30:26,080
may sound like that that it's a lot

00:30:23,120 --> 00:30:26,720
uh but you can run out of memory as i

00:30:26,080 --> 00:30:30,000
said before

00:30:26,720 --> 00:30:31,360
try when starting out to avoid

00:30:30,000 --> 00:30:33,200
dynamically allocating memory if

00:30:31,360 --> 00:30:36,159
possible um

00:30:33,200 --> 00:30:38,080
and often if you're using a you know a

00:30:36,159 --> 00:30:40,559
slightly more complex board you might

00:30:38,080 --> 00:30:41,279
be using a real-time operating system

00:30:40,559 --> 00:30:43,200
and they

00:30:41,279 --> 00:30:45,679
generally have ways of showing you

00:30:43,200 --> 00:30:47,039
memory usage and memory usage over time

00:30:45,679 --> 00:30:50,080
and some of them have more advanced

00:30:47,039 --> 00:30:50,480
features like stack overflow guards and

00:30:50,080 --> 00:30:52,640
and

00:30:50,480 --> 00:30:54,559
other things like that will help you do

00:30:52,640 --> 00:30:56,480
this but one thing you should definitely

00:30:54,559 --> 00:30:59,120
really do is do a burning test and

00:30:56,480 --> 00:31:01,039
have you have your prototype running for

00:30:59,120 --> 00:31:03,440
you know say 24 hours or so

00:31:01,039 --> 00:31:05,120
um to make sure that the memory doesn't

00:31:03,440 --> 00:31:05,679
climb over time and that everything is

00:31:05,120 --> 00:31:08,960
in

00:31:05,679 --> 00:31:12,399
in good working order

00:31:08,960 --> 00:31:15,039
um you're going to run into bugs and

00:31:12,399 --> 00:31:17,120
um generally it's always the software is

00:31:15,039 --> 00:31:18,799
that its fault

00:31:17,120 --> 00:31:20,640
if something doesn't work it's gonna be

00:31:18,799 --> 00:31:23,039
the software not the hardware

00:31:20,640 --> 00:31:24,880
um and if you can't find the bug it's

00:31:23,039 --> 00:31:27,440
still likely to be your software

00:31:24,880 --> 00:31:29,840
and it's not likely to be in that

00:31:27,440 --> 00:31:32,000
library used by thousands of people

00:31:29,840 --> 00:31:33,200
it's gonna be in your software so you

00:31:32,000 --> 00:31:35,120
know

00:31:33,200 --> 00:31:37,120
99 of the time it's going to be

00:31:35,120 --> 00:31:40,960
something that you've done wrong

00:31:37,120 --> 00:31:42,000
um so um except when it is actually the

00:31:40,960 --> 00:31:44,640
hardware

00:31:42,000 --> 00:31:45,360
and there's some good news here is in

00:31:44,640 --> 00:31:48,480
that

00:31:45,360 --> 00:31:50,320
um generally what happens

00:31:48,480 --> 00:31:52,399
is it just it won't work at all so the

00:31:50,320 --> 00:31:54,240
hardware won't even power up

00:31:52,399 --> 00:31:55,840
or it'll have a short and consume all

00:31:54,240 --> 00:31:57,200
the power and probably let out some

00:31:55,840 --> 00:32:00,000
magic smoke

00:31:57,200 --> 00:32:01,039
and you'll have a dead board if you're

00:32:00,000 --> 00:32:03,120
very unlucky

00:32:01,039 --> 00:32:05,039
it will mostly work and i i've seen this

00:32:03,120 --> 00:32:07,600
happen a few times

00:32:05,039 --> 00:32:08,320
and i'll go through a couple examples

00:32:07,600 --> 00:32:10,720
there

00:32:08,320 --> 00:32:11,440
um i was working on a project that had

00:32:10,720 --> 00:32:13,760
some

00:32:11,440 --> 00:32:15,360
gps antennas in them and they supplied

00:32:13,760 --> 00:32:17,039
the wrong antennas with them

00:32:15,360 --> 00:32:18,559
uh we would require there's two main

00:32:17,039 --> 00:32:19,600
types of antennas there's passive and

00:32:18,559 --> 00:32:21,360
active ones and they

00:32:19,600 --> 00:32:23,919
give us the wrong ones but they weren't

00:32:21,360 --> 00:32:25,840
marked in any way so we had no idea

00:32:23,919 --> 00:32:27,279
that they had given us the wrong ones

00:32:25,840 --> 00:32:28,880
and it means that the gps

00:32:27,279 --> 00:32:31,440
could actually get a little bit of a

00:32:28,880 --> 00:32:33,120
signal but not a lot of the signal

00:32:31,440 --> 00:32:34,799
so it would sometimes work and it

00:32:33,120 --> 00:32:37,840
wouldn't really work well indoors

00:32:34,799 --> 00:32:40,159
uh which was really really annoying

00:32:37,840 --> 00:32:42,559
i've also seen boards which had crystals

00:32:40,159 --> 00:32:44,399
rotated 90 degrees on them and so they

00:32:42,559 --> 00:32:45,200
sort of connected to the pins but not

00:32:44,399 --> 00:32:46,880
quite

00:32:45,200 --> 00:32:48,480
and it means that things would work and

00:32:46,880 --> 00:32:50,080
run at low speed but once you tried to

00:32:48,480 --> 00:32:54,559
do things at a higher speed

00:32:50,080 --> 00:32:57,120
uh it wouldn't work um and that

00:32:54,559 --> 00:32:58,960
and because these uh these crystals are

00:32:57,120 --> 00:33:00,960
not quite square but pretty cool close

00:32:58,960 --> 00:33:04,799
to square and quite small components

00:33:00,960 --> 00:33:06,960
um it was quite difficult

00:33:04,799 --> 00:33:08,080
uh doing it um i just saw a question

00:33:06,960 --> 00:33:09,200
there that

00:33:08,080 --> 00:33:10,799
asked that i have experienced in

00:33:09,200 --> 00:33:11,600
building shields for adrenos yes i

00:33:10,799 --> 00:33:13,360
certainly do

00:33:11,600 --> 00:33:14,880
in fact the lead shield that i showed

00:33:13,360 --> 00:33:17,760
earlier in the presentation was it was

00:33:14,880 --> 00:33:17,760
an adreno shield

00:33:17,919 --> 00:33:22,159
um and the worst thing i ran into was an

00:33:20,320 --> 00:33:24,720
incorrect accelerometer circuit

00:33:22,159 --> 00:33:26,559
uh the accelerometer all of it worked

00:33:24,720 --> 00:33:28,320
but it wouldn't return any values

00:33:26,559 --> 00:33:30,159
and it was because one of the clock

00:33:28,320 --> 00:33:33,440
lines had been um

00:33:30,159 --> 00:33:36,080
tied to uh a high value

00:33:33,440 --> 00:33:37,440
um and thus it would it would power up

00:33:36,080 --> 00:33:39,200
you could send commands to it it

00:33:37,440 --> 00:33:40,640
responds responses back to you

00:33:39,200 --> 00:33:42,640
but it wouldn't actually give you any

00:33:40,640 --> 00:33:45,919
acceleration data which

00:33:42,640 --> 00:33:45,919
was really annoying

00:33:46,080 --> 00:33:49,440
so one of the other things that you can

00:33:48,000 --> 00:33:51,600
do is uh

00:33:49,440 --> 00:33:52,960
logging this will really help you with

00:33:51,600 --> 00:33:55,600
the debugging stuff

00:33:52,960 --> 00:33:57,200
just log everything that you can and so

00:33:55,600 --> 00:33:58,799
you've got a good idea of what's

00:33:57,200 --> 00:34:00,720
going on in your hardware at any point

00:33:58,799 --> 00:34:02,480
of time um

00:34:00,720 --> 00:34:04,080
you're generally the the way to do this

00:34:02,480 --> 00:34:05,120
is you can't just have a log that keeps

00:34:04,080 --> 00:34:09,040
going

00:34:05,120 --> 00:34:11,040
forever and

00:34:09,040 --> 00:34:12,159
uh you'll have a circular log and you

00:34:11,040 --> 00:34:14,800
say you'll just have a

00:34:12,159 --> 00:34:16,079
you know the last things that are going

00:34:14,800 --> 00:34:18,560
through there

00:34:16,079 --> 00:34:20,399
so um and another good idea is just used

00:34:18,560 --> 00:34:20,720
an indicator led to indicate the status

00:34:20,399 --> 00:34:22,800
so

00:34:20,720 --> 00:34:24,560
don't annoy people but you can like

00:34:22,800 --> 00:34:24,879
blink a version number when it starts up

00:34:24,560 --> 00:34:27,839
and

00:34:24,879 --> 00:34:28,800
link some sort of status that's on on

00:34:27,839 --> 00:34:31,040
there

00:34:28,800 --> 00:34:32,159
there are some not some fun bits but i'm

00:34:31,040 --> 00:34:34,639
not going to go into those

00:34:32,159 --> 00:34:36,320
and they include security power issues

00:34:34,639 --> 00:34:41,040
and over-the-air updates that's

00:34:36,320 --> 00:34:43,040
i can fill up an entire talk with those

00:34:41,040 --> 00:34:44,320
um so that's sort of been a little bit

00:34:43,040 --> 00:34:46,240
about my journey and

00:34:44,320 --> 00:34:48,000
um and along the way that i've learned

00:34:46,240 --> 00:34:50,639
lots of new skills i've met lots

00:34:48,000 --> 00:34:53,760
of nice people um and i've been involved

00:34:50,639 --> 00:34:56,639
in a number of communities that

00:34:53,760 --> 00:34:57,599
have grown and flourished and i've made

00:34:56,639 --> 00:34:58,880
lots of personal

00:34:57,599 --> 00:35:00,480
connections with the people in those

00:34:58,880 --> 00:35:01,599
communities and i've had a lot of fun

00:35:00,480 --> 00:35:03,599
along the way

00:35:01,599 --> 00:35:05,839
and i hope that your journey will be the

00:35:03,599 --> 00:35:05,839
same

00:35:07,280 --> 00:35:10,640
so we have a few minutes for questions

00:35:10,160 --> 00:35:13,760
uh

00:35:10,640 --> 00:35:17,359
five in fact i think not quite

00:35:13,760 --> 00:35:19,599
um i see one question up there was that

00:35:17,359 --> 00:35:20,480
uh they're having trouble going to

00:35:19,599 --> 00:35:22,240
something to

00:35:20,480 --> 00:35:23,839
more professional um it's just a matter

00:35:22,240 --> 00:35:27,440
of small steps

00:35:23,839 --> 00:35:30,560
um it's it's not as hard

00:35:27,440 --> 00:35:32,240
as you think

00:35:30,560 --> 00:35:33,200
once you get to something more complex

00:35:32,240 --> 00:35:34,079
you're probably going to be using a

00:35:33,200 --> 00:35:36,480
real-time

00:35:34,079 --> 00:35:38,000
operating system and that makes things a

00:35:36,480 --> 00:35:40,480
lot easier for you

00:35:38,000 --> 00:35:45,839
and it means you can do a lot of tasks

00:35:40,480 --> 00:35:48,560
at the same time

00:35:45,839 --> 00:35:49,920
so uh a board that's support for mobile

00:35:48,560 --> 00:35:52,400
networks yeah there's huge number of

00:35:49,920 --> 00:35:54,640
boards that support mobile networks

00:35:52,400 --> 00:35:55,920
um i had a screenshot of the particle

00:35:54,640 --> 00:35:59,119
board before

00:35:55,920 --> 00:36:01,920
um i quite like those they they

00:35:59,119 --> 00:36:03,920
support uh mobile networks can and other

00:36:01,920 --> 00:36:06,640
networking

00:36:03,920 --> 00:36:07,680
things as well i'm a really big fan of

00:36:06,640 --> 00:36:10,880
lorawan

00:36:07,680 --> 00:36:14,240
which is a wide area low

00:36:10,880 --> 00:36:14,240
power network

00:36:16,830 --> 00:36:20,000
[Music]

00:36:20,720 --> 00:36:25,280
okay all right i think i'm out of time

00:36:23,119 --> 00:36:28,720
chris wants to give his talk and i shall

00:36:25,280 --> 00:36:28,720
join chris afterwards for a beer

00:36:32,640 --> 00:36:42,720
thanks for coming by and

00:36:40,640 --> 00:36:42,720

YouTube URL: https://www.youtube.com/watch?v=4jL57aNvzZI


