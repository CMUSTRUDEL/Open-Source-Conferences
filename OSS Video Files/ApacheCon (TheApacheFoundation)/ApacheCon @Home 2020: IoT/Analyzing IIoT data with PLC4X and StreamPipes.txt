Title: Analyzing IIoT data with PLC4X and StreamPipes
Publication date: 2020-10-15
Playlist: ApacheCon @Home 2020: IoT
Description: 
	Analyzing IIoT data with PLC4X and StreamPipes
Philipp Zehnder, Christofer Dutz

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:24,880 --> 00:00:28,880
then

00:00:25,279 --> 00:00:31,519
i will share the slides and we'll begin

00:00:28,880 --> 00:00:34,399
so the talk today is about analyzing

00:00:31,519 --> 00:00:35,520
iiot data with plc for x and stream

00:00:34,399 --> 00:00:38,399
pipes

00:00:35,520 --> 00:00:39,360
so and the whole story started last year

00:00:38,399 --> 00:00:42,399
at the apache con

00:00:39,360 --> 00:00:44,079
in las vegas where we first met and

00:00:42,399 --> 00:00:46,559
there in the hex session

00:00:44,079 --> 00:00:48,239
we integrated the first running example

00:00:46,559 --> 00:00:51,680
of integrating

00:00:48,239 --> 00:00:52,320
tlc4x here as an adapter into stream

00:00:51,680 --> 00:00:54,000
types

00:00:52,320 --> 00:00:55,360
and we also had our first running

00:00:54,000 --> 00:00:58,559
example a running

00:00:55,360 --> 00:01:01,520
example there um so

00:00:58,559 --> 00:01:01,840
who are we is me i'm phillip um i work

00:01:01,520 --> 00:01:04,559
as

00:01:01,840 --> 00:01:05,920
a researcher at the research institute

00:01:04,559 --> 00:01:08,400
in carlsrae

00:01:05,920 --> 00:01:09,360
and this is a joint talk with chris so

00:01:08,400 --> 00:01:12,560
maybe you want to

00:01:09,360 --> 00:01:15,680
introduce yourself yeah hi um

00:01:12,560 --> 00:01:17,680
yeah my name's chris uh i work as an

00:01:15,680 --> 00:01:18,960
industrial iot consultant at uh

00:01:17,680 --> 00:01:21,280
codecentric

00:01:18,960 --> 00:01:22,640
uh yeah and i love everything that has

00:01:21,280 --> 00:01:26,479
an iot in it

00:01:22,640 --> 00:01:30,080
if it's iiot or just iot but everything

00:01:26,479 --> 00:01:30,080
as soon as it's hardware i love it

00:01:30,799 --> 00:01:35,520
okay thank you then i'll continue so the

00:01:33,840 --> 00:01:36,640
talk we will start with a short

00:01:35,520 --> 00:01:39,119
motivation

00:01:36,640 --> 00:01:41,200
then we will introduce briefly the two

00:01:39,119 --> 00:01:42,720
projects maybe we can shorten this part

00:01:41,200 --> 00:01:43,840
a bit because we lost some time in the

00:01:42,720 --> 00:01:46,000
beginning

00:01:43,840 --> 00:01:48,479
and if you're interested just um write

00:01:46,000 --> 00:01:51,360
us we are also available for the next

00:01:48,479 --> 00:01:52,079
couple of days um then after the

00:01:51,360 --> 00:01:54,799
introduction

00:01:52,079 --> 00:01:55,520
there will be a demo and then some more

00:01:54,799 --> 00:01:57,759
technical

00:01:55,520 --> 00:01:58,640
um information about stream pipes

00:01:57,759 --> 00:02:01,200
connect so how

00:01:58,640 --> 00:02:02,240
you can connect new data sources with

00:02:01,200 --> 00:02:04,320
dream pipes

00:02:02,240 --> 00:02:06,479
and in the end also some current work

00:02:04,320 --> 00:02:09,440
that we are working on

00:02:06,479 --> 00:02:10,399
so the motivation behind all this is

00:02:09,440 --> 00:02:13,599
that in the

00:02:10,399 --> 00:02:15,360
iot um or factory 4.0 we have a lot of

00:02:13,599 --> 00:02:17,440
different data streams

00:02:15,360 --> 00:02:19,920
so for example we have the robot

00:02:17,440 --> 00:02:22,480
operating system ros or mqdt

00:02:19,920 --> 00:02:24,400
or mudpass and we have all this

00:02:22,480 --> 00:02:26,000
different kind of data sources which we

00:02:24,400 --> 00:02:29,120
want to harmonize

00:02:26,000 --> 00:02:31,360
so the normal solution would be for

00:02:29,120 --> 00:02:32,480
us developers to develop custom

00:02:31,360 --> 00:02:34,840
solutions

00:02:32,480 --> 00:02:36,080
for the individual standards and

00:02:34,840 --> 00:02:38,959
protocols

00:02:36,080 --> 00:02:39,840
but there's still one problem low level

00:02:38,959 --> 00:02:43,280
plcs

00:02:39,840 --> 00:02:44,000
are often not very well supported so and

00:02:43,280 --> 00:02:47,519
that's where

00:02:44,000 --> 00:02:50,560
plc forex comes in so plc for x

00:02:47,519 --> 00:02:52,160
gives you a really nice api

00:02:50,560 --> 00:02:53,920
where you can use your high level

00:02:52,160 --> 00:02:58,239
programming language and

00:02:53,920 --> 00:03:00,159
get data out of the machines directly

00:02:58,239 --> 00:03:02,400
with plc for x and all the other

00:03:00,159 --> 00:03:03,200
solutions you still have to implement

00:03:02,400 --> 00:03:05,440
them

00:03:03,200 --> 00:03:07,120
and that's what the idea of the

00:03:05,440 --> 00:03:10,000
screenpipes connect library

00:03:07,120 --> 00:03:11,920
is for that users with a little or no

00:03:10,000 --> 00:03:13,840
programming knowledge are also able to

00:03:11,920 --> 00:03:16,560
connect those data sources

00:03:13,840 --> 00:03:17,280
and have a unified workflow to connect

00:03:16,560 --> 00:03:20,640
them

00:03:17,280 --> 00:03:24,560
and process the data

00:03:20,640 --> 00:03:25,920
so next um the two further introductions

00:03:24,560 --> 00:03:28,319
of the two projects

00:03:25,920 --> 00:03:30,239
so maybe chris you can say a couple of

00:03:28,319 --> 00:03:32,560
words about plt points

00:03:30,239 --> 00:03:34,000
yeah well everybody who knows me knows i

00:03:32,560 --> 00:03:36,480
rather spend too many words

00:03:34,000 --> 00:03:37,440
uh i'll i'll just make it short uh i

00:03:36,480 --> 00:03:39,519
think uh

00:03:37,440 --> 00:03:41,120
last apache con we all got one of these

00:03:39,519 --> 00:03:42,959
swag things to charge our

00:03:41,120 --> 00:03:44,560
phones it was sort of like a universal

00:03:42,959 --> 00:03:46,879
adapter to sort of like

00:03:44,560 --> 00:03:47,840
charge any phone with any source of the

00:03:46,879 --> 00:03:50,799
usb

00:03:47,840 --> 00:03:51,200
uh so that's actually what plc4x is sort

00:03:50,799 --> 00:03:53,599
of

00:03:51,200 --> 00:03:54,720
about it's sort of like having one api

00:03:53,599 --> 00:03:57,360
on one side

00:03:54,720 --> 00:03:59,280
and a whole load of uh different uh

00:03:57,360 --> 00:04:02,319
apis on the other side so

00:03:59,280 --> 00:04:04,159
we implement all sorts of drivers

00:04:02,319 --> 00:04:05,920
to communicate directly with industrial

00:04:04,159 --> 00:04:08,959
hardware um

00:04:05,920 --> 00:04:11,120
and we use that and

00:04:08,959 --> 00:04:12,840
make it possible to really really easily

00:04:11,120 --> 00:04:16,400
access data

00:04:12,840 --> 00:04:18,720
um uh yeah so the unified

00:04:16,400 --> 00:04:20,160
the the shared api is sort of the unique

00:04:18,720 --> 00:04:24,000
thing uh with apache

00:04:20,160 --> 00:04:24,479
plc4x um we also bring a whole variety

00:04:24,000 --> 00:04:27,360
of

00:04:24,479 --> 00:04:28,400
uh different integration modules to

00:04:27,360 --> 00:04:31,840
integrate it into

00:04:28,400 --> 00:04:34,720
other apache products we even have one

00:04:31,840 --> 00:04:36,639
stream pipes adapter in our sandbox but

00:04:34,720 --> 00:04:37,919
the stream pipes folks are doing a much

00:04:36,639 --> 00:04:41,360
better job in uh

00:04:37,919 --> 00:04:44,160
having appeals for example in theirs so

00:04:41,360 --> 00:04:45,520
that's why i'm here today um currently

00:04:44,160 --> 00:04:47,840
uh everything we do

00:04:45,520 --> 00:04:49,520
is generally available in java i'm

00:04:47,840 --> 00:04:50,880
currently working hard on implementing

00:04:49,520 --> 00:04:53,520
that in c

00:04:50,880 --> 00:04:55,440
and there's a big team currently working

00:04:53,520 --> 00:04:59,040
on porting that to python

00:04:55,440 --> 00:05:00,960
so that was the short version

00:04:59,040 --> 00:05:02,560
then i will also give you a brief um

00:05:00,960 --> 00:05:04,479
overview over stream types

00:05:02,560 --> 00:05:06,720
so maybe some of you already saw the

00:05:04,479 --> 00:05:10,000
awesome talk of patrick which was

00:05:06,720 --> 00:05:12,639
right before ours and he also explained

00:05:10,000 --> 00:05:14,639
the individual details um more so if

00:05:12,639 --> 00:05:15,440
you're interested go and check out his

00:05:14,639 --> 00:05:17,840
talk

00:05:15,440 --> 00:05:19,360
so in the beginning we have several data

00:05:17,840 --> 00:05:21,199
sources and connectors

00:05:19,360 --> 00:05:22,880
with them we are able to connect to

00:05:21,199 --> 00:05:25,199
various um

00:05:22,880 --> 00:05:26,960
different protocols and formats like

00:05:25,199 --> 00:05:31,280
kafka mqdt

00:05:26,960 --> 00:05:34,320
and also plcs over plc for x

00:05:31,280 --> 00:05:36,639
then we have a algorithm toolbox which

00:05:34,320 --> 00:05:39,520
contains different analytical algorithms

00:05:36,639 --> 00:05:41,759
so they can be simple ones like filters

00:05:39,520 --> 00:05:43,840
but can also be more like complex ones

00:05:41,759 --> 00:05:45,919
or time series analytics

00:05:43,840 --> 00:05:47,520
and also machine learning components can

00:05:45,919 --> 00:05:50,240
be wrapped in such

00:05:47,520 --> 00:05:52,320
processors and they can run standalone

00:05:50,240 --> 00:05:55,919
also run distributed in for example

00:05:52,320 --> 00:05:57,600
a sling cluster then for deployment we

00:05:55,919 --> 00:06:00,639
support various

00:05:57,600 --> 00:06:03,039
options so you can run it either on a

00:06:00,639 --> 00:06:06,080
computer or on arm pcs

00:06:03,039 --> 00:06:09,199
and we also have linux osx and

00:06:06,080 --> 00:06:12,400
windows support and there's also a hem

00:06:09,199 --> 00:06:15,280
chart for kubernetes deployment

00:06:12,400 --> 00:06:16,240
so the overall architecture looks like

00:06:15,280 --> 00:06:19,120
usually we have

00:06:16,240 --> 00:06:20,400
machines which are our data sources then

00:06:19,120 --> 00:06:23,280
we have our

00:06:20,400 --> 00:06:24,240
adapter library with the various data

00:06:23,280 --> 00:06:27,440
connectors

00:06:24,240 --> 00:06:28,720
and those harmonize data onto a unified

00:06:27,440 --> 00:06:31,160
message bus

00:06:28,720 --> 00:06:32,479
from this message path we have several

00:06:31,160 --> 00:06:35,520
microservices

00:06:32,479 --> 00:06:38,720
which get the data from this analyze it

00:06:35,520 --> 00:06:40,319
and users interact with this system over

00:06:38,720 --> 00:06:43,600
the pipeline management

00:06:40,319 --> 00:06:47,360
through the web ui but now

00:06:43,600 --> 00:06:49,919
we will go directly into a demo

00:06:47,360 --> 00:06:50,800
so hopefully it will work um here we

00:06:49,919 --> 00:06:53,599
have

00:06:50,800 --> 00:06:55,199
a sample factory which is located in

00:06:53,599 --> 00:06:56,400
chris's office so it should be right

00:06:55,199 --> 00:06:59,440
next to him

00:06:56,400 --> 00:07:01,520
and here we have a bigger

00:06:59,440 --> 00:07:03,440
factory with several stations and we

00:07:01,520 --> 00:07:05,039
will focus on the sorting machine which

00:07:03,440 --> 00:07:08,960
is on the top left corner

00:07:05,039 --> 00:07:11,280
and is controlled by this s7 plc

00:07:08,960 --> 00:07:13,440
so i will directly switch to stream

00:07:11,280 --> 00:07:16,400
pipes

00:07:13,440 --> 00:07:17,759
and we already connected it so we have a

00:07:16,400 --> 00:07:21,199
running pipeline

00:07:17,759 --> 00:07:23,680
if i go here where we get the images

00:07:21,199 --> 00:07:27,039
from an ip camera hanging above the

00:07:23,680 --> 00:07:28,319
factory and projecting it into our live

00:07:27,039 --> 00:07:31,199
dashboard

00:07:28,319 --> 00:07:31,759
and if i go to our live dashboard we

00:07:31,199 --> 00:07:34,400
should get

00:07:31,759 --> 00:07:36,880
a live image from chris's office and

00:07:34,400 --> 00:07:39,360
maybe you can hold your hand into the

00:07:36,880 --> 00:07:39,360
screen

00:07:40,000 --> 00:07:47,840
so and in the first step

00:07:44,240 --> 00:07:51,280
we want to connect our plc so therefore

00:07:47,840 --> 00:07:54,160
we have um stream pipes connect and

00:07:51,280 --> 00:07:56,319
here we have those different adapters

00:07:54,160 --> 00:07:59,240
and if i scroll down

00:07:56,319 --> 00:08:00,560
you will also see a specific adapter for

00:07:59,240 --> 00:08:03,599
plc4x

00:08:00,560 --> 00:08:04,400
so we can select this one then we have

00:08:03,599 --> 00:08:11,759
to provide

00:08:04,400 --> 00:08:14,960
the ip address of the plc

00:08:11,759 --> 00:08:17,360
and also the polling interval

00:08:14,960 --> 00:08:19,360
and we have to define which registers we

00:08:17,360 --> 00:08:20,319
want to read so we can do this manually

00:08:19,360 --> 00:08:23,440
by entering

00:08:20,319 --> 00:08:26,400
the registers but we can also export a

00:08:23,440 --> 00:08:28,479
csv or excel file from the tr portal

00:08:26,400 --> 00:08:30,400
and directly import it into stream type

00:08:28,479 --> 00:08:31,280
so you don't have to manually configure

00:08:30,400 --> 00:08:33,039
the adapter

00:08:31,280 --> 00:08:34,719
so that's what i provided so here we

00:08:33,039 --> 00:08:37,360
have a csv file which you can

00:08:34,719 --> 00:08:38,560
upload here in screenpipes and if i

00:08:37,360 --> 00:08:41,200
click on next

00:08:38,560 --> 00:08:43,120
the system already um generates the

00:08:41,200 --> 00:08:45,760
event schema for us

00:08:43,120 --> 00:08:46,959
and we can also edit this schema here in

00:08:45,760 --> 00:08:49,600
this case we just

00:08:46,959 --> 00:08:51,600
want to add a timestamp and here you can

00:08:49,600 --> 00:08:55,120
see we have a color sensor

00:08:51,600 --> 00:08:58,000
and several um booleans

00:08:55,120 --> 00:08:59,839
also if you go on edit you can see the

00:08:58,000 --> 00:09:02,240
data type and can also add some

00:08:59,839 --> 00:09:05,279
additional information here

00:09:02,240 --> 00:09:07,839
if you click on next we

00:09:05,279 --> 00:09:08,480
you can give the adapter name and start

00:09:07,839 --> 00:09:10,399
it

00:09:08,480 --> 00:09:12,240
and this takes a few seconds till the

00:09:10,399 --> 00:09:14,560
adapter is running

00:09:12,240 --> 00:09:15,920
so currently the adapter is running on

00:09:14,560 --> 00:09:18,160
my local machine

00:09:15,920 --> 00:09:20,399
and is connecting to the plc which is

00:09:18,160 --> 00:09:22,560
located in chris's office

00:09:20,399 --> 00:09:23,440
and here you can see um the data which

00:09:22,560 --> 00:09:26,720
is coming in

00:09:23,440 --> 00:09:29,120
live data and if we now go to the

00:09:26,720 --> 00:09:31,040
pipeline editor where users can model

00:09:29,120 --> 00:09:34,160
those execution pipelines

00:09:31,040 --> 00:09:34,959
you can see we have a new um adapter and

00:09:34,160 --> 00:09:38,240
also you can

00:09:34,959 --> 00:09:40,399
see the values here and now we can use

00:09:38,240 --> 00:09:41,600
our algorithm toolbox to analyze this

00:09:40,399 --> 00:09:44,240
data

00:09:41,600 --> 00:09:45,120
but first of all i will switch um to

00:09:44,240 --> 00:09:46,959
another view

00:09:45,120 --> 00:09:49,040
we also have an asset dashboard which

00:09:46,959 --> 00:09:52,000
you can use to create create

00:09:49,040 --> 00:09:54,640
those asset views and if i open this

00:09:52,000 --> 00:09:58,240
dashboard there you can upload

00:09:54,640 --> 00:10:01,920
um an image and then you should see the

00:09:58,240 --> 00:10:01,920
live data which is currently not

00:10:02,839 --> 00:10:05,839
coming

00:10:07,279 --> 00:10:13,519
okay maybe we have a vpn problem

00:10:11,200 --> 00:10:16,160
but um so okay the data is not coming

00:10:13,519 --> 00:10:16,160
anymore

00:10:16,480 --> 00:10:20,000
um so i'll continue so usually you

00:10:18,640 --> 00:10:23,040
should see um

00:10:20,000 --> 00:10:26,399
like the live data coming in but somehow

00:10:23,040 --> 00:10:29,600
the vpn probably is broken so i will

00:10:26,399 --> 00:10:30,079
continue with the demo um so one problem

00:10:29,600 --> 00:10:33,120
that

00:10:30,079 --> 00:10:34,720
chris had was that the sorting of the

00:10:33,120 --> 00:10:36,720
machine didn't always work so

00:10:34,720 --> 00:10:38,480
he was implementing the solution during

00:10:36,720 --> 00:10:39,760
the night and he was setting all the

00:10:38,480 --> 00:10:41,440
default parameters

00:10:39,760 --> 00:10:42,959
but on the next day when he showed it to

00:10:41,440 --> 00:10:46,240
someone the

00:10:42,959 --> 00:10:48,079
sorting just didn't work and now to

00:10:46,240 --> 00:10:50,560
figure out what the problem is we want

00:10:48,079 --> 00:10:52,800
to store this data for offline analytics

00:10:50,560 --> 00:10:55,360
so you can use the adapter

00:10:52,800 --> 00:10:56,720
and store it in a data lake or in

00:10:55,360 --> 00:11:00,959
internal

00:10:56,720 --> 00:11:02,640
database for stream types

00:11:00,959 --> 00:11:05,120
and give it a name and start the

00:11:02,640 --> 00:11:05,120
pipeline

00:11:11,120 --> 00:11:15,440
so now the pipeline is started and is

00:11:13,920 --> 00:11:18,560
sending data directly

00:11:15,440 --> 00:11:20,720
into our data lake and if we go here you

00:11:18,560 --> 00:11:24,959
can create such data views

00:11:20,720 --> 00:11:24,959
and look at this data here

00:11:25,440 --> 00:11:28,880
and now we will see the live data and

00:11:27,600 --> 00:11:32,240
chris if you go

00:11:28,880 --> 00:11:33,519
back to the factory and maybe you can

00:11:32,240 --> 00:11:36,640
add some of the blocks

00:11:33,519 --> 00:11:38,160
into the machine so now i'm back at the

00:11:36,640 --> 00:11:41,120
live dashboard and chris

00:11:38,160 --> 00:11:43,680
will enter several of the colored blocks

00:11:41,120 --> 00:11:46,160
into the machine as you can see here

00:11:43,680 --> 00:11:46,800
and the machine will start sorting them

00:11:46,160 --> 00:11:51,440
so the first

00:11:46,800 --> 00:11:51,440
was a white one then there was a red one

00:11:52,079 --> 00:11:55,600
or is it blue there was a blue one and

00:11:55,120 --> 00:11:59,600
now

00:11:55,600 --> 00:12:00,800
also a red one and if we go back to the

00:11:59,600 --> 00:12:03,680
data explorer

00:12:00,800 --> 00:12:04,480
we can now have a look at the values of

00:12:03,680 --> 00:12:07,120
our

00:12:04,480 --> 00:12:08,240
light sensor so i'll make it a bit

00:12:07,120 --> 00:12:11,440
bigger

00:12:08,240 --> 00:12:12,560
and here we can see that um the light is

00:12:11,440 --> 00:12:15,040
constant

00:12:12,560 --> 00:12:16,639
and here we have the value for example

00:12:15,040 --> 00:12:19,600
for the white

00:12:16,639 --> 00:12:20,240
um for the white block and if i go back

00:12:19,600 --> 00:12:23,200
to

00:12:20,240 --> 00:12:25,279
the live dashboard chris can you use

00:12:23,200 --> 00:12:28,240
your lighting and

00:12:25,279 --> 00:12:39,839
um yeah that we see that the value

00:12:28,240 --> 00:12:39,839
change when there's too much light

00:12:40,079 --> 00:12:44,480
and now is putting with a spotlight onto

00:12:43,120 --> 00:12:46,639
the sensor

00:12:44,480 --> 00:12:48,880
and here you can see that it has a big

00:12:46,639 --> 00:12:53,160
impact on the value

00:12:48,880 --> 00:12:55,680
and now he's adding

00:12:53,160 --> 00:12:58,079
a few of the tips again

00:12:55,680 --> 00:12:59,920
and if i go back to the data explorer we

00:12:58,079 --> 00:13:01,279
can here have a look at the data and

00:12:59,920 --> 00:13:04,240
here you can see this was

00:13:01,279 --> 00:13:06,160
with no light and so a developer can use

00:13:04,240 --> 00:13:09,200
this view to look at the data

00:13:06,160 --> 00:13:12,000
and also see how this is evolving

00:13:09,200 --> 00:13:12,639
and then go back to the plc program and

00:13:12,000 --> 00:13:14,720
configure

00:13:12,639 --> 00:13:16,880
the parameters accordingly so this was

00:13:14,720 --> 00:13:17,519
one use case which we used before the

00:13:16,880 --> 00:13:22,720
talk

00:13:17,519 --> 00:13:24,480
to configure um the factory floor

00:13:22,720 --> 00:13:26,399
additionally we can also analyze the

00:13:24,480 --> 00:13:29,760
data so again if i

00:13:26,399 --> 00:13:31,760
take the plc data we could for example

00:13:29,760 --> 00:13:34,160
count how many

00:13:31,760 --> 00:13:35,920
of the red chips which we are we are

00:13:34,160 --> 00:13:38,320
producing so in the data we just have

00:13:35,920 --> 00:13:41,199
the booleans and the light sensor

00:13:38,320 --> 00:13:42,320
and we can use just a simple boolean

00:13:41,199 --> 00:13:45,600
counter which is

00:13:42,320 --> 00:13:48,399
included here in um

00:13:45,600 --> 00:13:50,079
did you say something chris no my mac

00:13:48,399 --> 00:13:53,519
just died again

00:13:50,079 --> 00:13:54,560
and uh i just had a spare one standing

00:13:53,519 --> 00:13:57,600
next to it so i

00:13:54,560 --> 00:13:57,600
had to log in with that

00:13:58,079 --> 00:14:04,720
so i will continue and so we can connect

00:14:01,600 --> 00:14:08,000
the um our plc to this component

00:14:04,720 --> 00:14:09,360
and then we can um see that we can

00:14:08,000 --> 00:14:12,720
configure it

00:14:09,360 --> 00:14:13,600
so um if the value goes from false to

00:14:12,720 --> 00:14:15,600
true

00:14:13,600 --> 00:14:17,360
um we want to count and here we have the

00:14:15,600 --> 00:14:19,199
different boolean values and this is for

00:14:17,360 --> 00:14:22,720
example for the white one

00:14:19,199 --> 00:14:25,600
and then i can select it and store it

00:14:22,720 --> 00:14:27,839
and in the end we could store this value

00:14:25,600 --> 00:14:31,040
into a database for example

00:14:27,839 --> 00:14:31,760
here in iot db or we can also for the

00:14:31,040 --> 00:14:35,279
demo

00:14:31,760 --> 00:14:38,079
printed on our live dashboard

00:14:35,279 --> 00:14:40,160
and here we have a white counter or

00:14:38,079 --> 00:14:43,600
counter

00:14:40,160 --> 00:14:47,040
so and save it then

00:14:43,600 --> 00:14:47,040
i start the pipeline again

00:14:53,199 --> 00:14:57,040
and then we can create a visualization

00:14:55,839 --> 00:15:00,399
for this counter

00:14:57,040 --> 00:15:02,639
we go back to the live dashboard and

00:15:00,399 --> 00:15:04,000
now we edit it and add a new

00:15:02,639 --> 00:15:07,279
visualization for our

00:15:04,000 --> 00:15:09,600
counter a single value

00:15:07,279 --> 00:15:11,680
and we select the counter field from our

00:15:09,600 --> 00:15:15,440
event

00:15:11,680 --> 00:15:18,720
and now if you add a white

00:15:15,440 --> 00:15:22,079
uh white block into the machine

00:15:18,720 --> 00:15:24,800
should i yeah please

00:15:22,079 --> 00:15:27,839
oh just so the white one went to the

00:15:24,800 --> 00:15:27,839
wrong one

00:15:31,920 --> 00:15:38,839
huh it sorted into the red one

00:15:35,600 --> 00:15:41,839
just put it manually into the other

00:15:38,839 --> 00:15:41,839
field

00:15:43,600 --> 00:15:50,639
so it's in the white one okay

00:15:48,399 --> 00:15:52,320
now with the counter should have

00:15:50,639 --> 00:15:55,600
increased but maybe we

00:15:52,320 --> 00:15:57,040
have a data problem again so take it out

00:15:55,600 --> 00:15:59,759
and then again maybe

00:15:57,040 --> 00:15:59,759
it takes a bit

00:16:01,920 --> 00:16:08,160
okay um

00:16:05,120 --> 00:16:10,079
okay but yeah usually so with those

00:16:08,160 --> 00:16:11,120
processes you can also implement those

00:16:10,079 --> 00:16:13,120
simple rules

00:16:11,120 --> 00:16:15,440
and create additional kpis or

00:16:13,120 --> 00:16:17,680
information um about your data

00:16:15,440 --> 00:16:19,680
what you can also do is calculate um

00:16:17,680 --> 00:16:21,440
processing times for example from this

00:16:19,680 --> 00:16:25,600
basics values you get

00:16:21,440 --> 00:16:37,839
from you get from the plc's

00:16:25,600 --> 00:16:37,839
so going back to my slides

00:16:38,160 --> 00:16:44,320
i will um briefly explain how

00:16:41,440 --> 00:16:45,360
the adapters work so the conceptual

00:16:44,320 --> 00:16:48,000
model behind

00:16:45,360 --> 00:16:50,160
our adapters is that we support both

00:16:48,000 --> 00:16:54,079
data streams and data sets

00:16:50,160 --> 00:16:56,000
and we have generic adapters and

00:16:54,079 --> 00:16:58,320
generic adapters have a specific

00:16:56,000 --> 00:17:01,120
protocol and also a specific format for

00:16:58,320 --> 00:17:02,639
example on mqtt or kafka

00:17:01,120 --> 00:17:06,000
you can have different kind of data

00:17:02,639 --> 00:17:07,600
formats for example json or thrift

00:17:06,000 --> 00:17:09,520
additionally to that we also have

00:17:07,600 --> 00:17:12,480
specific adapters

00:17:09,520 --> 00:17:13,039
which use software libraries like plc4x

00:17:12,480 --> 00:17:16,319
and give

00:17:13,039 --> 00:17:17,600
users this guided process to enter new

00:17:16,319 --> 00:17:20,400
data sources

00:17:17,600 --> 00:17:21,839
and here for example we have opc ua or

00:17:20,400 --> 00:17:24,400
also plc for x

00:17:21,839 --> 00:17:26,880
and you can also add other apis like for

00:17:24,400 --> 00:17:29,679
example slack

00:17:26,880 --> 00:17:32,160
now we want to focus on an adapter that

00:17:29,679 --> 00:17:35,440
is using plc for x

00:17:32,160 --> 00:17:37,840
and connects s7

00:17:35,440 --> 00:17:40,000
on the left you can see a machine with a

00:17:37,840 --> 00:17:42,480
plc attached to it

00:17:40,000 --> 00:17:43,520
and it's ip and the node which we want

00:17:42,480 --> 00:17:45,679
to read

00:17:43,520 --> 00:17:47,039
and on the right we have an adapter

00:17:45,679 --> 00:17:48,799
instance so adapters

00:17:47,039 --> 00:17:50,240
always have the same shapes in the

00:17:48,799 --> 00:17:52,400
beginning they have the

00:17:50,240 --> 00:17:54,640
actual adapter connecting to the

00:17:52,400 --> 00:17:56,960
physical asset we want to connect to

00:17:54,640 --> 00:17:58,480
then we can use several transformation

00:17:56,960 --> 00:18:01,520
rules like for example

00:17:58,480 --> 00:18:02,799
change the unit or add timestamps or add

00:18:01,520 --> 00:18:05,280
the event schema

00:18:02,799 --> 00:18:06,720
and then we send it on a harmonized

00:18:05,280 --> 00:18:09,280
transport layer

00:18:06,720 --> 00:18:10,960
and if you want to implement a new

00:18:09,280 --> 00:18:13,520
adapter for screenpipes

00:18:10,960 --> 00:18:15,360
there's simple interface with several

00:18:13,520 --> 00:18:17,440
methods that we have to implement

00:18:15,360 --> 00:18:19,039
first of all you need to implement a

00:18:17,440 --> 00:18:22,320
declare model

00:18:19,039 --> 00:18:24,799
method patrick introduced in his talk in

00:18:22,320 --> 00:18:27,760
more detail about the screenpipes

00:18:24,799 --> 00:18:29,679
sdk and the different functionalities

00:18:27,760 --> 00:18:30,880
and basically what you do here is you

00:18:29,679 --> 00:18:33,360
provide

00:18:30,880 --> 00:18:34,960
the input parameters which are required

00:18:33,360 --> 00:18:37,120
from a user and also

00:18:34,960 --> 00:18:39,520
configure how the data looks like that

00:18:37,120 --> 00:18:42,160
is produced by this adapter

00:18:39,520 --> 00:18:43,520
in the getschema method we get some

00:18:42,160 --> 00:18:46,000
example data

00:18:43,520 --> 00:18:46,720
and provide the actual event schema to

00:18:46,000 --> 00:18:50,080
the user

00:18:46,720 --> 00:18:51,919
which can then be um edited and then we

00:18:50,080 --> 00:18:56,400
also have a method to start and

00:18:51,919 --> 00:18:57,440
stop the adapters once we um connect or

00:18:56,400 --> 00:19:00,080
start connecting

00:18:57,440 --> 00:19:02,000
at the plc a user has to provide several

00:19:00,080 --> 00:19:02,640
configurations like you saw before in

00:19:02,000 --> 00:19:05,360
the demo

00:19:02,640 --> 00:19:06,640
we have to edit enter the ip and also

00:19:05,360 --> 00:19:08,880
the polling interval

00:19:06,640 --> 00:19:10,080
and also the nodes which we want to read

00:19:08,880 --> 00:19:12,320
so in this case

00:19:10,080 --> 00:19:14,640
we have the node address we provide a

00:19:12,320 --> 00:19:16,240
human readable name with temperature and

00:19:14,640 --> 00:19:18,799
also the data type

00:19:16,240 --> 00:19:20,640
this is what is configured by the user

00:19:18,799 --> 00:19:22,480
on the bottom left you can see our

00:19:20,640 --> 00:19:25,200
register in the plc

00:19:22,480 --> 00:19:27,120
which currently has a 50 a value 50 um

00:19:25,200 --> 00:19:30,080
for the temperature

00:19:27,120 --> 00:19:31,520
next we want to um and what we do is we

00:19:30,080 --> 00:19:35,360
connect to the plc

00:19:31,520 --> 00:19:37,440
and we get a processable event

00:19:35,360 --> 00:19:40,320
within our programming language in this

00:19:37,440 --> 00:19:43,600
case we have a map with temperature

00:19:40,320 --> 00:19:45,440
and the value of the temperature then we

00:19:43,600 --> 00:19:47,679
have several transformation rules which

00:19:45,440 --> 00:19:49,200
are directly integrated in the adapter

00:19:47,679 --> 00:19:51,280
and are derived from the user

00:19:49,200 --> 00:19:52,640
interaction so you saw i added for

00:19:51,280 --> 00:19:55,679
example the timestamp

00:19:52,640 --> 00:19:57,600
but i can also um change the unit of the

00:19:55,679 --> 00:19:59,600
event or also the event schema

00:19:57,600 --> 00:20:01,440
or also reduce the event frequency for

00:19:59,600 --> 00:20:02,240
example if the frequency is too high you

00:20:01,440 --> 00:20:04,799
can directly

00:20:02,240 --> 00:20:06,000
reduce it and then the transformation

00:20:04,799 --> 00:20:08,400
rules are derived which are

00:20:06,000 --> 00:20:10,480
automatically applied on our event

00:20:08,400 --> 00:20:11,679
in our case we have the temperature

00:20:10,480 --> 00:20:14,320
event then

00:20:11,679 --> 00:20:15,840
we transform the unit from fahrenheit to

00:20:14,320 --> 00:20:19,120
decrease celsius

00:20:15,840 --> 00:20:22,480
and add at the current time stand

00:20:19,120 --> 00:20:24,320
in the last step um it is forwarded to

00:20:22,480 --> 00:20:26,559
the internal transport layer

00:20:24,320 --> 00:20:28,320
in this case the system is configured to

00:20:26,559 --> 00:20:30,960
use kafka and json

00:20:28,320 --> 00:20:33,039
and also the host and the topic are

00:20:30,960 --> 00:20:33,679
provided here by the stream pipe system

00:20:33,039 --> 00:20:35,919
so

00:20:33,679 --> 00:20:37,760
the user doesn't have to configure that

00:20:35,919 --> 00:20:40,480
manually

00:20:37,760 --> 00:20:41,760
and this data is then sent on to kafka

00:20:40,480 --> 00:20:46,840
and can then be used

00:20:41,760 --> 00:20:49,840
in the graphical uh

00:20:46,840 --> 00:20:49,840
degree

00:20:49,919 --> 00:20:53,919
next i want to show you one final demo

00:20:52,720 --> 00:20:57,200
where i have

00:20:53,919 --> 00:20:59,039
an external region sensor this xdk

00:20:57,200 --> 00:21:00,320
and we want to use machine learning

00:20:59,039 --> 00:21:03,280
algorithm to detect

00:21:00,320 --> 00:21:05,360
whether this sensor is shaken or not so

00:21:03,280 --> 00:21:07,520
this will illustrate how also more

00:21:05,360 --> 00:21:10,640
advanced algorithms can be used

00:21:07,520 --> 00:21:12,960
and to realize this use case we gathered

00:21:10,640 --> 00:21:15,039
some sample data and labeled it

00:21:12,960 --> 00:21:16,000
and trained a machine learning model

00:21:15,039 --> 00:21:18,559
which is now

00:21:16,000 --> 00:21:21,280
applied on the data so i switch back to

00:21:18,559 --> 00:21:21,280
stream types

00:21:21,440 --> 00:21:25,520
and in the first step we have to connect

00:21:24,080 --> 00:21:29,200
our data source

00:21:25,520 --> 00:21:31,200
so i go back to stream paths connect and

00:21:29,200 --> 00:21:33,039
in this case the data is i'm streaming

00:21:31,200 --> 00:21:37,280
over kafka

00:21:33,039 --> 00:21:41,039
and i um configure the kafka cluster

00:21:37,280 --> 00:21:41,840
in the port now we're getting um the

00:21:41,039 --> 00:21:44,640
topics

00:21:41,840 --> 00:21:45,280
from our kafka cluster so user can

00:21:44,640 --> 00:21:47,440
select

00:21:45,280 --> 00:21:51,120
which topic to read from in this case we

00:21:47,440 --> 00:21:53,919
want to read the acceleration sensor

00:21:51,120 --> 00:21:55,840
and click on next then we have to define

00:21:53,919 --> 00:21:57,280
the format so we don't know what kind of

00:21:55,840 --> 00:22:00,880
data is coming in

00:21:57,280 --> 00:22:02,799
and in that case it's json now we are

00:22:00,880 --> 00:22:04,080
getting some example data in the back

00:22:02,799 --> 00:22:06,799
and analyze it

00:22:04,080 --> 00:22:08,240
and present the event schema to the user

00:22:06,799 --> 00:22:12,320
so we have the timestamp

00:22:08,240 --> 00:22:15,360
x y and set values if i click on edit

00:22:12,320 --> 00:22:18,559
we can mark this property as

00:22:15,360 --> 00:22:21,280
our event property as a timestamp

00:22:18,559 --> 00:22:23,840
and now we know this is a unix timestamp

00:22:21,280 --> 00:22:27,840
and can use this for further processing

00:22:23,840 --> 00:22:27,840
additionally we add

00:22:28,640 --> 00:22:36,559
we add a url to the other topics

00:22:32,400 --> 00:22:36,559
we have to copy it from another program

00:22:39,520 --> 00:22:57,840
my window is the window is gone

00:22:54,799 --> 00:22:59,520
okay so i copied the urls um

00:22:57,840 --> 00:23:02,000
so in the background we're using

00:22:59,520 --> 00:23:05,760
semantic information and in this case

00:23:02,000 --> 00:23:06,840
we have a predefined uri that defines

00:23:05,760 --> 00:23:09,600
this value as

00:23:06,840 --> 00:23:10,880
acceleration x value currently users

00:23:09,600 --> 00:23:13,280
have to provide this

00:23:10,880 --> 00:23:14,799
manually but for future releases we also

00:23:13,280 --> 00:23:17,760
plan to automatically

00:23:14,799 --> 00:23:18,960
extract this information then we provide

00:23:17,760 --> 00:23:24,880
the same information

00:23:18,960 --> 00:23:24,880
for the y and set value

00:23:27,440 --> 00:23:30,799
and save it we could also add further

00:23:30,080 --> 00:23:33,679
description

00:23:30,799 --> 00:23:35,280
for other users later on but for this

00:23:33,679 --> 00:23:38,000
demo this is sufficient

00:23:35,280 --> 00:23:39,280
then we click on next and we can give it

00:23:38,000 --> 00:23:42,480
a name so xdk

00:23:39,280 --> 00:23:42,480
for sensor name

00:23:42,559 --> 00:23:45,919
and now the adapter is generated and we

00:23:45,200 --> 00:23:49,200
should see

00:23:45,919 --> 00:23:52,400
some live values in the meantime so

00:23:49,200 --> 00:23:55,360
if we go back to

00:23:52,400 --> 00:23:56,320
the pipeline editor we now have our

00:23:55,360 --> 00:23:58,400
sensor here

00:23:56,320 --> 00:24:00,640
and via drag and drop we can create this

00:23:58,400 --> 00:24:04,080
pipeline detecting the activity

00:24:00,640 --> 00:24:06,799
which we are performing

00:24:04,080 --> 00:24:08,960
here we have the partial activity which

00:24:06,799 --> 00:24:12,320
contains this machine learning model

00:24:08,960 --> 00:24:12,720
and if we connect it um this component

00:24:12,320 --> 00:24:15,200
will

00:24:12,720 --> 00:24:16,799
directly be configured and here you can

00:24:15,200 --> 00:24:19,279
see based on the semantic

00:24:16,799 --> 00:24:20,320
or the uri we entered um during creation

00:24:19,279 --> 00:24:22,960
of the adapter

00:24:20,320 --> 00:24:23,440
the system already knows which values to

00:24:22,960 --> 00:24:25,200
map

00:24:23,440 --> 00:24:27,120
we could also add further information

00:24:25,200 --> 00:24:28,159
like for example a minimum frequency

00:24:27,120 --> 00:24:31,200
which we need

00:24:28,159 --> 00:24:33,919
for this algorithm to work properly and

00:24:31,200 --> 00:24:35,760
now we know um the results which are

00:24:33,919 --> 00:24:37,520
produced are semantically correct

00:24:35,760 --> 00:24:39,039
for example if we have a different

00:24:37,520 --> 00:24:41,440
sensor not containing those

00:24:39,039 --> 00:24:43,120
x y and set values or which just has for

00:24:41,440 --> 00:24:45,120
example a temperature value

00:24:43,120 --> 00:24:46,480
the system would say to the user that

00:24:45,120 --> 00:24:50,159
this is incompatible

00:24:46,480 --> 00:24:50,159
and the component can't be used

00:24:50,640 --> 00:24:55,760
and now we also want to visualize it in

00:24:53,760 --> 00:24:59,039
our dashboard

00:24:55,760 --> 00:24:59,039
therefore we give it a name

00:24:59,679 --> 00:25:04,880
and save it and run the pipeline

00:25:13,679 --> 00:25:18,400
now the pipeline is started and here we

00:25:16,240 --> 00:25:20,240
can also see more details on

00:25:18,400 --> 00:25:22,080
the run configuration so you can also

00:25:20,240 --> 00:25:23,600
run the individual algorithms on

00:25:22,080 --> 00:25:25,200
different computers so currently

00:25:23,600 --> 00:25:25,840
everything is running on my local

00:25:25,200 --> 00:25:27,520
machine

00:25:25,840 --> 00:25:29,919
but the system is designed in

00:25:27,520 --> 00:25:32,880
microservices so you can also distribute

00:25:29,919 --> 00:25:33,679
um the individual running services then

00:25:32,880 --> 00:25:36,960
if i go

00:25:33,679 --> 00:25:42,000
to the live dashboard we can

00:25:36,960 --> 00:25:44,799
add a new visualization here

00:25:42,000 --> 00:25:47,120
and we select the activity and create it

00:25:44,799 --> 00:25:47,440
and now we see it's normal and if i take

00:25:47,120 --> 00:25:50,080
it

00:25:47,440 --> 00:25:50,640
in my hand and shake it and i can also

00:25:50,080 --> 00:25:52,240
use it

00:25:50,640 --> 00:25:57,520
and throw it in the air and then it also

00:25:52,240 --> 00:26:11,840
detects that it fell down

00:25:57,520 --> 00:26:11,840
so i will go back to the slides

00:26:14,799 --> 00:26:20,480
okay now we have um one last slide about

00:26:18,480 --> 00:26:21,360
how to get involved into the project and

00:26:20,480 --> 00:26:24,559
also

00:26:21,360 --> 00:26:26,080
um yeah so you can um get involved as a

00:26:24,559 --> 00:26:28,080
user for example so

00:26:26,080 --> 00:26:30,320
all the projects are out there you can

00:26:28,080 --> 00:26:32,640
just download it and have fun with it

00:26:30,320 --> 00:26:33,520
and especially provide us feedback over

00:26:32,640 --> 00:26:36,080
the mailing list

00:26:33,520 --> 00:26:37,120
um for about your use case and how

00:26:36,080 --> 00:26:40,880
you're using

00:26:37,120 --> 00:26:40,880
pipes or plc for x

00:26:41,279 --> 00:26:45,760
then also you can test the plc for x

00:26:45,120 --> 00:26:47,760
drivers

00:26:45,760 --> 00:26:50,240
in real life scenarios and also give

00:26:47,760 --> 00:26:52,320
feedback on that

00:26:50,240 --> 00:26:53,919
and also talk to us and spread the word

00:26:52,320 --> 00:26:56,080
about the projects

00:26:53,919 --> 00:26:57,760
and as developers we're always

00:26:56,080 --> 00:26:59,840
interested in uh

00:26:57,760 --> 00:27:01,840
help of integration of more protocols

00:26:59,840 --> 00:27:02,640
into stream pipes for example from plc

00:27:01,840 --> 00:27:06,000
for x

00:27:02,640 --> 00:27:08,559
and also implement specific processors

00:27:06,000 --> 00:27:11,440
or data processors which are

00:27:08,559 --> 00:27:12,320
specific to a certain domain for example

00:27:11,440 --> 00:27:15,039
and also

00:27:12,320 --> 00:27:16,080
implement more protocols for plc for x

00:27:15,039 --> 00:27:20,080
and

00:27:16,080 --> 00:27:23,200
help to improve the existing projects

00:27:20,080 --> 00:27:23,919
in uh on the last slide um yeah i want

00:27:23,200 --> 00:27:25,520
to

00:27:23,919 --> 00:27:27,760
mention the other talks which are coming

00:27:25,520 --> 00:27:29,120
up in the iot track so the first one is

00:27:27,760 --> 00:27:32,240
about home automation

00:27:29,120 --> 00:27:35,919
with chris tomorrow at um

00:27:32,240 --> 00:27:39,279
at 6 55 and then there's also a talk

00:27:35,919 --> 00:27:42,320
from julian about apache plc for exo

00:27:39,279 --> 00:27:44,399
check out those talks they will also be

00:27:42,320 --> 00:27:47,039
very great and awesome and hopefully

00:27:44,399 --> 00:27:50,720
with no technical problems like this one

00:27:47,039 --> 00:27:51,279
so in the end yeah i better set up my

00:27:50,720 --> 00:27:54,480
demo

00:27:51,279 --> 00:27:56,480
on my spare macbook because uh

00:27:54,480 --> 00:27:59,200
yeah the primary one sort of really

00:27:56,480 --> 00:27:59,200
sucks today

00:28:00,640 --> 00:28:06,640
yeah thanks for your time and

00:28:04,640 --> 00:28:08,799
if you i don't know if we have time for

00:28:06,640 --> 00:28:09,440
questions yeah well we have two minutes

00:28:08,799 --> 00:28:11,360
so

00:28:09,440 --> 00:28:14,240
if there are any questions i think we

00:28:11,360 --> 00:28:14,240
should be able

00:28:15,120 --> 00:28:17,840
type faster

00:28:34,480 --> 00:28:39,039
well it looks like there are no

00:28:36,640 --> 00:28:43,120
questions

00:28:39,039 --> 00:28:48,080
well i think then we'll

00:28:43,120 --> 00:28:48,080
move over to the other part of the day

00:28:48,399 --> 00:28:59,840
see ya fine thanks

00:29:01,520 --> 00:29:03,600

YouTube URL: https://www.youtube.com/watch?v=SzWu7ab1gCI


