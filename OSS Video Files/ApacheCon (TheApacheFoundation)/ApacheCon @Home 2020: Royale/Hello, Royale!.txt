Title: Hello, Royale!
Publication date: 2020-10-14
Playlist: ApacheCon @Home 2020: Royale
Description: 
	Hello, Royale!
Andrew Wetmore

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

A high-level, task-focused view of Apache Royale, including a bit of history, how it has evolved, its core of AS3 and MXML, what it inherits from Flex and how it differs, where it is going, and what you can do with it.

Documentation and QA specialist during 15 years in the software industry with projects ranging from kitchen-table startups to major corporations. Has built several applications using Flex/Royale as the front end technology. Chief editor for the Apache Royale project.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:25,359 --> 00:00:29,760
hi

00:00:26,320 --> 00:00:31,519
it looks like it's 155 or

00:00:29,760 --> 00:00:34,880
five minutes before the hour wherever

00:00:31,519 --> 00:00:38,000
you are so it's time to start

00:00:34,880 --> 00:00:41,200
i'm andrew wettmore and

00:00:38,000 --> 00:00:44,559
this is hello royale a welcome

00:00:41,200 --> 00:00:46,559
or a uh a

00:00:44,559 --> 00:00:47,680
quick tour from pretty high up in the

00:00:46,559 --> 00:00:50,960
air of royale

00:00:47,680 --> 00:00:53,840
what it is and what it does for you

00:00:50,960 --> 00:00:55,600
or what it could now i very carefully

00:00:53,840 --> 00:00:58,640
minimize the

00:00:55,600 --> 00:00:59,680
the browser the the presentation that

00:00:58,640 --> 00:01:03,280
i'm

00:00:59,680 --> 00:01:03,280
running off so i had to find it again

00:01:04,320 --> 00:01:10,799
so i've i'm an apache royal committer

00:01:08,080 --> 00:01:12,720
and my main focus is on documentation

00:01:10,799 --> 00:01:13,360
because i came very late to the software

00:01:12,720 --> 00:01:15,759
world

00:01:13,360 --> 00:01:17,040
that said i spent 15 years developing

00:01:15,759 --> 00:01:21,759
software and

00:01:17,040 --> 00:01:24,960
often using flex as the front end

00:01:21,759 --> 00:01:29,280
so it's i'm not the smartest guy about

00:01:24,960 --> 00:01:30,720
royale but it's my favorite um software

00:01:29,280 --> 00:01:32,640
i also work with the apache

00:01:30,720 --> 00:01:34,640
infrastructure team

00:01:32,640 --> 00:01:36,159
by the way if you're looking at me and

00:01:34,640 --> 00:01:38,720
the presentation

00:01:36,159 --> 00:01:39,759
on your screen if you double click the

00:01:38,720 --> 00:01:44,320
presentation

00:01:39,759 --> 00:01:44,320
it gets larger or as large as it can get

00:01:45,680 --> 00:01:49,360
so apache royale it's a software

00:01:48,000 --> 00:01:51,840
development kit

00:01:49,360 --> 00:01:53,200
it lets you develop data-driven

00:01:51,840 --> 00:01:56,000
applications

00:01:53,200 --> 00:01:57,119
you can use it of course to make a

00:01:56,000 --> 00:01:59,840
business card

00:01:57,119 --> 00:02:02,079
a website that just sits there but it's

00:01:59,840 --> 00:02:02,079
great

00:02:03,119 --> 00:02:06,960
you need to draw information in process

00:02:06,560 --> 00:02:09,920
it

00:02:06,960 --> 00:02:12,000
and hand it out again drawing it in from

00:02:09,920 --> 00:02:13,200
data sources around the world or from

00:02:12,000 --> 00:02:15,200
some user who's

00:02:13,200 --> 00:02:18,080
who's working with the with the tool

00:02:15,200 --> 00:02:18,080
right at that moment

00:02:18,560 --> 00:02:22,239
second great strength of it you build

00:02:21,120 --> 00:02:25,520
apache royale

00:02:22,239 --> 00:02:26,480
on one code base and then you can export

00:02:25,520 --> 00:02:28,480
it

00:02:26,480 --> 00:02:30,480
and you can run it on any browser that

00:02:28,480 --> 00:02:33,040
uses javascript

00:02:30,480 --> 00:02:35,360
you can run it on the desktop using the

00:02:33,040 --> 00:02:38,480
adobe air runtime or something like that

00:02:35,360 --> 00:02:39,440
who knows what will come next or on a

00:02:38,480 --> 00:02:42,560
mobile device

00:02:39,440 --> 00:02:43,440
if you create a project that you can

00:02:42,560 --> 00:02:46,560
export

00:02:43,440 --> 00:02:50,400
for use with apache cordova or or

00:02:46,560 --> 00:02:54,160
something like that

00:02:50,400 --> 00:02:57,120
it's set up so we can extend the sdk

00:02:54,160 --> 00:02:58,000
so it will so you can compile for other

00:02:57,120 --> 00:03:01,120
technologies

00:02:58,000 --> 00:03:03,920
like web assembly native ios

00:03:01,120 --> 00:03:05,519
uh applications or an amdroid one or

00:03:03,920 --> 00:03:08,239
other new technologies

00:03:05,519 --> 00:03:09,599
that are going to appear eventually

00:03:08,239 --> 00:03:11,760
clash will of

00:03:09,599 --> 00:03:13,200
flight i'm sorry eventually javascript

00:03:11,760 --> 00:03:16,480
will go away

00:03:13,200 --> 00:03:19,040
as flash went away and when that does

00:03:16,480 --> 00:03:20,480
apache royale can pivot to using a

00:03:19,040 --> 00:03:25,360
different technology

00:03:20,480 --> 00:03:27,440
to continue to compile and release

00:03:25,360 --> 00:03:28,959
we started off as a macromedia project

00:03:27,440 --> 00:03:32,080
as so many good things

00:03:28,959 --> 00:03:34,799
did then in 2005 adobe

00:03:32,080 --> 00:03:36,959
purchased macromedia and flex became

00:03:34,799 --> 00:03:39,920
adobe flex

00:03:36,959 --> 00:03:40,879
from then until about 2011 that was

00:03:39,920 --> 00:03:44,000
great time

00:03:40,879 --> 00:03:47,440
for flex users the flash

00:03:44,000 --> 00:03:48,959
engine was everywhere the flash tool was

00:03:47,440 --> 00:03:52,480
there and it was assumed

00:03:48,959 --> 00:03:55,120
to be where the cool stuff was

00:03:52,480 --> 00:03:55,599
so adobe flex made it really easy to

00:03:55,120 --> 00:03:58,799
build

00:03:55,599 --> 00:04:01,519
an application compile it

00:03:58,799 --> 00:04:03,280
deploy it on anywhere where there was

00:04:01,519 --> 00:04:06,959
flash

00:04:03,280 --> 00:04:08,640
and then came 2011 and we learned that

00:04:06,959 --> 00:04:15,200
flash would be coming to an end for

00:04:08,640 --> 00:04:17,680
various reasons flex technology

00:04:15,200 --> 00:04:18,959
to the apache software foundation and a

00:04:17,680 --> 00:04:21,919
volunteer community

00:04:18,959 --> 00:04:22,240
since then has been working to improve

00:04:21,919 --> 00:04:25,120
it

00:04:22,240 --> 00:04:27,280
and extend it and then a couple of years

00:04:25,120 --> 00:04:29,600
ago

00:04:27,280 --> 00:04:31,919
the community came to a conclusion that

00:04:29,600 --> 00:04:34,080
there should really be a focus

00:04:31,919 --> 00:04:36,240
since flash was really really really

00:04:34,080 --> 00:04:38,479
going away

00:04:36,240 --> 00:04:40,560
to be able to build applications using

00:04:38,479 --> 00:04:42,880
all the skills and the tools that flex

00:04:40,560 --> 00:04:47,120
had brought this far

00:04:42,880 --> 00:04:50,639
compile essentially to javascript

00:04:47,120 --> 00:04:54,400
so that the resulting output

00:04:50,639 --> 00:04:56,320
could run in any any modern browser

00:04:54,400 --> 00:04:58,240
and that's the main focus of apache

00:04:56,320 --> 00:05:00,320
royale is

00:04:58,240 --> 00:05:02,400
making it possible for you to build

00:05:00,320 --> 00:05:05,039
something that

00:05:02,400 --> 00:05:07,680
anybody can work with who's using a

00:05:05,039 --> 00:05:07,680
modern tool

00:05:08,639 --> 00:05:12,880
the basis for apache rail but they're

00:05:10,800 --> 00:05:16,000
really two

00:05:12,880 --> 00:05:18,560
languages royale uses mxml is a

00:05:16,000 --> 00:05:22,320
declarative language that defines

00:05:18,560 --> 00:05:24,720
and organizes your user interface

00:05:22,320 --> 00:05:27,199
and makes possible a lot of cool royale

00:05:24,720 --> 00:05:30,400
features

00:05:27,199 --> 00:05:32,639
actionscript is a

00:05:30,400 --> 00:05:32,639
uh

00:05:33,520 --> 00:05:37,360
a tool for for data manipulation

00:05:35,600 --> 00:05:40,000
graphics and functions

00:05:37,360 --> 00:05:42,320
that support the front end it's very

00:05:40,000 --> 00:05:45,520
like javascript they're cousins

00:05:42,320 --> 00:05:49,759
but it it focuses on um

00:05:45,520 --> 00:05:52,960
or gives a lot of play for components

00:05:49,759 --> 00:05:54,720
and uh

00:05:52,960 --> 00:05:56,240
makes possible the sort of things that

00:05:54,720 --> 00:06:00,639
we were have been doing in

00:05:56,240 --> 00:06:03,840
in flex the presumption always was that

00:06:00,639 --> 00:06:08,560
that uh action script would

00:06:03,840 --> 00:06:08,560
uh would compile two

00:06:09,039 --> 00:06:13,600
files to javascript

00:06:12,160 --> 00:06:15,520
another cool tool we have is

00:06:13,600 --> 00:06:16,479
actionscript message format this is an

00:06:15,520 --> 00:06:19,759
amazing

00:06:16,479 --> 00:06:23,440
utility for getting

00:06:19,759 --> 00:06:24,000
and sending data whether to a remote

00:06:23,440 --> 00:06:27,039
source

00:06:24,000 --> 00:06:30,720
or to local storage

00:06:27,039 --> 00:06:32,160
it's uh powerful and fast and again

00:06:30,720 --> 00:06:34,160
makes a lot of things possible that

00:06:32,160 --> 00:06:37,199
would be hard to do otherwise in

00:06:34,160 --> 00:06:39,440
royale in a royal application

00:06:37,199 --> 00:06:40,319
we have a wide range of frameworks that

00:06:39,440 --> 00:06:43,840
you can add

00:06:40,319 --> 00:06:46,400
in to your royal application

00:06:43,840 --> 00:06:47,600
to make your development process simpler

00:06:46,400 --> 00:06:49,919
i'm calling out

00:06:47,600 --> 00:06:52,639
crux there because it provides those

00:06:49,919 --> 00:06:55,199
cool functions like inversion of control

00:06:52,639 --> 00:06:56,160
and dependency injection which you may

00:06:55,199 --> 00:07:03,039
be familiar with

00:06:56,160 --> 00:07:06,720
from other uh platforms

00:07:03,039 --> 00:07:10,160
the main concepts that that

00:07:06,720 --> 00:07:10,560
really i've got to say at this point i'm

00:07:10,160 --> 00:07:13,919
i'm

00:07:10,560 --> 00:07:18,560
i'm i'm in love with

00:07:13,919 --> 00:07:18,560
with royale so i'm speaking as a fan

00:07:18,880 --> 00:07:23,680
uh one of the main concepts that i find

00:07:21,599 --> 00:07:25,199
important and differentiates from a lot

00:07:23,680 --> 00:07:27,599
of other languages is that

00:07:25,199 --> 00:07:28,960
there is a concentration in royale on

00:07:27,599 --> 00:07:32,800
object

00:07:28,960 --> 00:07:35,280
oriented programming so i have a

00:07:32,800 --> 00:07:36,880
an application i built that helps an

00:07:35,280 --> 00:07:39,440
organization like a theater

00:07:36,880 --> 00:07:40,080
if they're running a competition for

00:07:39,440 --> 00:07:42,160
plays

00:07:40,080 --> 00:07:44,080
and they people are going to submit

00:07:42,160 --> 00:07:45,440
plays to them

00:07:44,080 --> 00:07:47,520
and you can see immediately there would

00:07:45,440 --> 00:07:49,360
be several steps in that whole process

00:07:47,520 --> 00:07:52,240
there's the submission process

00:07:49,360 --> 00:07:53,520
the evaluation process and if the

00:07:52,240 --> 00:07:54,960
theater likes the play what they're

00:07:53,520 --> 00:07:59,280
going to do with it the production

00:07:54,960 --> 00:08:00,639
process if you put

00:07:59,280 --> 00:08:04,000
all the stuff having to do with

00:08:00,639 --> 00:08:07,120
submitting a manuscript into one

00:08:04,000 --> 00:08:08,479
uh collection of files or even just one

00:08:07,120 --> 00:08:11,599
file

00:08:08,479 --> 00:08:13,520
and make that a module

00:08:11,599 --> 00:08:15,680
you can then incorporate that into the

00:08:13,520 --> 00:08:17,520
main application

00:08:15,680 --> 00:08:19,360
without worrying that you're going to

00:08:17,520 --> 00:08:23,199
bother the code

00:08:19,360 --> 00:08:23,840
that uh covers evaluating the manuscript

00:08:23,199 --> 00:08:26,879
or

00:08:23,840 --> 00:08:29,840
producing the play if it's accepted

00:08:26,879 --> 00:08:30,720
so modular construction means it's

00:08:29,840 --> 00:08:33,039
easier to sub

00:08:30,720 --> 00:08:34,880
to build your code in bits or for a team

00:08:33,039 --> 00:08:36,399
to work on the code working on different

00:08:34,880 --> 00:08:39,519
sections without

00:08:36,399 --> 00:08:40,719
uh crashing into each other and it also

00:08:39,519 --> 00:08:44,000
um

00:08:40,719 --> 00:08:47,519
makes it easier to maintain but it also

00:08:44,000 --> 00:08:51,200
makes it faster to uh to compile faster

00:08:47,519 --> 00:08:51,200
to display as i'll show in a moment

00:08:52,839 --> 00:08:56,360
um the other piece i sort of strayed

00:08:55,519 --> 00:08:59,040
from

00:08:56,360 --> 00:09:00,000
oop to modular design but the other

00:08:59,040 --> 00:09:03,120
piece is we have

00:09:00,000 --> 00:09:04,720
in that uh application where you're

00:09:03,120 --> 00:09:06,320
submitting a play for possible

00:09:04,720 --> 00:09:09,200
production

00:09:06,320 --> 00:09:10,320
you have an object who is the author and

00:09:09,200 --> 00:09:14,320
you have another object

00:09:10,320 --> 00:09:14,320
that is the play the manuscript

00:09:15,120 --> 00:09:19,839
separating those out as objects means i

00:09:18,160 --> 00:09:22,480
can put in the play

00:09:19,839 --> 00:09:22,880
object all the things it has its name

00:09:22,480 --> 00:09:25,920
its

00:09:22,880 --> 00:09:27,200
length its cast list and so on and all

00:09:25,920 --> 00:09:29,360
the things

00:09:27,200 --> 00:09:31,279
if in my application if it could do

00:09:29,360 --> 00:09:33,760
anything the things it could do

00:09:31,279 --> 00:09:34,399
the author object has his name con or

00:09:33,760 --> 00:09:36,800
their name

00:09:34,399 --> 00:09:38,800
contact information and the various

00:09:36,800 --> 00:09:43,200
things they can do like submit

00:09:38,800 --> 00:09:43,200
or respond

00:09:44,000 --> 00:09:50,640
connected to this concept is the

00:09:48,399 --> 00:09:51,519
principle of strict strictly typed

00:09:50,640 --> 00:09:54,640
properties

00:09:51,519 --> 00:09:58,640
in royale and that means if you create

00:09:54,640 --> 00:10:01,760
a a property and say when you create it

00:09:58,640 --> 00:10:03,440
that it's going to accept a text string

00:10:01,760 --> 00:10:04,959
well then that's what it's going to

00:10:03,440 --> 00:10:08,000
accept from then on

00:10:04,959 --> 00:10:11,279
you can't later assign it a

00:10:08,000 --> 00:10:12,880
a numeric value or or an array or

00:10:11,279 --> 00:10:15,920
something

00:10:12,880 --> 00:10:16,720
um and if you try to and then a compile

00:10:15,920 --> 00:10:18,480
time you'll get an

00:10:16,720 --> 00:10:20,640
error and you'll get the error before

00:10:18,480 --> 00:10:23,839
your end users see it

00:10:20,640 --> 00:10:25,600
some other lots of other languages

00:10:23,839 --> 00:10:26,959
don't have strictly typed properties and

00:10:25,600 --> 00:10:31,279
therefore you can assign

00:10:26,959 --> 00:10:35,200
what you want at any given time to

00:10:31,279 --> 00:10:36,320
a property so in a sense your mileage

00:10:35,200 --> 00:10:37,680
may vary it's what you're more

00:10:36,320 --> 00:10:39,839
comfortable with

00:10:37,680 --> 00:10:41,760
me i'm comfortable with strictly type

00:10:39,839 --> 00:10:42,800
properties because it keeps me made from

00:10:41,760 --> 00:10:46,480
making too many

00:10:42,800 --> 00:10:48,000
obvious mistakes one of the other great

00:10:46,480 --> 00:10:51,360
big concepts

00:10:48,000 --> 00:10:53,920
that is uh uh

00:10:51,360 --> 00:10:54,399
differentiates royale from flex before

00:10:53,920 --> 00:10:58,800
it

00:10:54,399 --> 00:10:58,800
is pay as you go or pay g

00:10:58,839 --> 00:11:02,240
basically let's say you had an

00:11:01,040 --> 00:11:06,800
application that had

00:11:02,240 --> 00:11:09,279
a hundred text entry fields

00:11:06,800 --> 00:11:10,880
and each of those text entry fields

00:11:09,279 --> 00:11:14,399
inherited

00:11:10,880 --> 00:11:16,399
all its properties from the template the

00:11:14,399 --> 00:11:20,240
master text entry

00:11:16,399 --> 00:11:23,760
uh property okay that's reasonable

00:11:20,240 --> 00:11:26,720
that's inheritance but what if

00:11:23,760 --> 00:11:28,399
in your application there's only two of

00:11:26,720 --> 00:11:30,880
those text entry field

00:11:28,399 --> 00:11:32,640
instances that have to accept only

00:11:30,880 --> 00:11:34,480
numbers

00:11:32,640 --> 00:11:36,720
well if you were in a flex application

00:11:34,480 --> 00:11:39,760
no problem every single one

00:11:36,720 --> 00:11:42,800
of those text entry fields would have

00:11:39,760 --> 00:11:44,079
all the code necessary to do everything

00:11:42,800 --> 00:11:46,560
that field that

00:11:44,079 --> 00:11:47,519
property could possibly do anywhere

00:11:46,560 --> 00:11:50,560
including

00:11:47,519 --> 00:11:52,480
restricting its input to numbers

00:11:50,560 --> 00:11:56,560
but the downside is then you have a

00:11:52,480 --> 00:11:59,839
hundred instances of all that code and

00:11:56,560 --> 00:12:02,959
98 of them 498 of them the bit about

00:11:59,839 --> 00:12:05,760
numbers is never going to come into play

00:12:02,959 --> 00:12:06,720
so we do rather less inheritance in

00:12:05,760 --> 00:12:10,720
royale

00:12:06,720 --> 00:12:13,920
and more composition and that is

00:12:10,720 --> 00:12:17,120
the keeping with the text input

00:12:13,920 --> 00:12:17,680
field the basic text input field is

00:12:17,120 --> 00:12:20,959
quite

00:12:17,680 --> 00:12:24,320
skinny it's got just the

00:12:20,959 --> 00:12:27,760
very least code possible to accept

00:12:24,320 --> 00:12:32,160
let it accept text

00:12:27,760 --> 00:12:34,720
if you want to make it do other things

00:12:32,160 --> 00:12:37,120
to be disabled or to act like a password

00:12:34,720 --> 00:12:37,120
input

00:12:37,200 --> 00:12:40,320
field or in this case to only accept

00:12:39,680 --> 00:12:42,399
numbers

00:12:40,320 --> 00:12:45,040
you add functionality by adding what are

00:12:42,399 --> 00:12:48,399
called beads

00:12:45,040 --> 00:12:52,000
the the uh file itself

00:12:48,399 --> 00:12:54,480
the uh is the strand

00:12:52,000 --> 00:12:55,040
and onto that in this image you drop

00:12:54,480 --> 00:12:57,360
onto

00:12:55,040 --> 00:12:59,600
a bead or two beads or multiple beads to

00:12:57,360 --> 00:13:01,920
give it extra abilities

00:12:59,600 --> 00:13:03,279
in this case on the screen we've given

00:13:01,920 --> 00:13:06,160
it a bead

00:13:03,279 --> 00:13:06,800
that lets a prompt appear that says only

00:13:06,160 --> 00:13:10,000
numbers

00:13:06,800 --> 00:13:13,440
if if the user tries to put in

00:13:10,000 --> 00:13:14,079
letters or something else and we add a

00:13:13,440 --> 00:13:16,399
bead

00:13:14,079 --> 00:13:18,839
that restricts the pattern that

00:13:16,399 --> 00:13:22,000
restricts what can be input to

00:13:18,839 --> 00:13:24,800
numbers you can have

00:13:22,000 --> 00:13:25,519
tons of beads attached to a specific

00:13:24,800 --> 00:13:28,240
instance

00:13:25,519 --> 00:13:29,200
of any of the components that go in your

00:13:28,240 --> 00:13:31,440
application

00:13:29,200 --> 00:13:33,360
it depends what that particular instance

00:13:31,440 --> 00:13:35,839
of the component needs

00:13:33,360 --> 00:13:35,839
what you add

00:13:36,480 --> 00:13:40,240
here's some other cool features and

00:13:37,839 --> 00:13:42,560
again i say this as a fan

00:13:40,240 --> 00:13:44,720
of flex and royale and the things that

00:13:42,560 --> 00:13:47,839
have helped me out and saved my

00:13:44,720 --> 00:13:50,800
bacon in several projects over time data

00:13:47,839 --> 00:13:50,800
binding is cool

00:13:51,040 --> 00:13:54,639
you have code you have you have

00:13:52,720 --> 00:13:55,680
properties here with values a property

00:13:54,639 --> 00:13:57,440
with a value

00:13:55,680 --> 00:13:58,720
you have a display on your user

00:13:57,440 --> 00:14:01,279
interface

00:13:58,720 --> 00:14:02,000
and you can bind those two together so

00:14:01,279 --> 00:14:04,959
if the data

00:14:02,000 --> 00:14:06,800
changes the display changes immediately

00:14:04,959 --> 00:14:09,199
you can also make it so if the display

00:14:06,800 --> 00:14:10,480
changes the data in your data source

00:14:09,199 --> 00:14:13,519
changes

00:14:10,480 --> 00:14:14,880
i think that's super event bubbling now

00:14:13,519 --> 00:14:19,040
we have we have our

00:14:14,880 --> 00:14:19,040
code broken up into modules

00:14:19,199 --> 00:14:24,480
we want to make sure that when an event

00:14:22,560 --> 00:14:27,839
happens

00:14:24,480 --> 00:14:28,639
and sets off an alert that an event has

00:14:27,839 --> 00:14:31,040
happened

00:14:28,639 --> 00:14:32,079
the event watcher that's looking for

00:14:31,040 --> 00:14:34,240
that

00:14:32,079 --> 00:14:35,839
event or waiting for that event gets it

00:14:34,240 --> 00:14:37,440
so the event will look around in the

00:14:35,839 --> 00:14:38,240
module where it is where it was

00:14:37,440 --> 00:14:41,120
generated

00:14:38,240 --> 00:14:41,920
can't find it move up move up move up in

00:14:41,120 --> 00:14:44,959
the code

00:14:41,920 --> 00:14:47,279
until it finds the event listener

00:14:44,959 --> 00:14:48,720
that it matches it will and it tells it

00:14:47,279 --> 00:14:49,600
to do whatever the thing is that the

00:14:48,720 --> 00:14:53,199
event listener

00:14:49,600 --> 00:14:55,360
is supposed to do third cool thing we

00:14:53,199 --> 00:14:57,600
have in royal is component sets

00:14:55,360 --> 00:14:59,760
you don't start from just nothing there

00:14:57,600 --> 00:15:01,600
are whole sets of components

00:14:59,760 --> 00:15:02,959
and by that i mean text entry fields

00:15:01,600 --> 00:15:06,800
buttons

00:15:02,959 --> 00:15:10,079
labels uh containers

00:15:06,800 --> 00:15:12,320
uh number steppers all sorts of things

00:15:10,079 --> 00:15:14,160
that are already formatted so that you

00:15:12,320 --> 00:15:15,279
can choose to take a very lightweight

00:15:14,160 --> 00:15:16,800
component set

00:15:15,279 --> 00:15:19,839
and very quickly build a proof of

00:15:16,800 --> 00:15:23,040
content except of your application

00:15:19,839 --> 00:15:24,720
or you can choose a richer component set

00:15:23,040 --> 00:15:26,880
and get well on your way to not only

00:15:24,720 --> 00:15:29,920
having the thing do what it needs to do

00:15:26,880 --> 00:15:32,240
but do it in an attractive way on

00:15:29,920 --> 00:15:34,959
thursday

00:15:32,240 --> 00:15:36,399
carlos rivera is presenting on the

00:15:34,959 --> 00:15:38,959
apache jewel

00:15:36,399 --> 00:15:40,480
component set to show what it has and

00:15:38,959 --> 00:15:43,839
what it does and

00:15:40,480 --> 00:15:45,839
why the three more features that i want

00:15:43,839 --> 00:15:49,759
to show you that i think are

00:15:45,839 --> 00:15:52,480
super cool view states basically

00:15:49,759 --> 00:15:54,800
this is a way of simplifying the

00:15:52,480 --> 00:15:58,000
refreshing of the user interface

00:15:54,800 --> 00:16:01,199
as things change in the application

00:15:58,000 --> 00:16:02,639
let's say you have a login screen so

00:16:01,199 --> 00:16:04,959
you're going to have a screen where you

00:16:02,639 --> 00:16:06,720
log in and then something

00:16:04,959 --> 00:16:09,360
is going to be different once you are

00:16:06,720 --> 00:16:12,639
logged in on that screen

00:16:09,360 --> 00:16:12,639
so you create two

00:16:14,240 --> 00:16:17,759
one called login and one called logged

00:16:16,240 --> 00:16:20,880
in

00:16:17,759 --> 00:16:24,560
and then in your display

00:16:20,880 --> 00:16:28,480
code a little bit further down you

00:16:24,560 --> 00:16:31,600
tell each element of the display

00:16:28,480 --> 00:16:34,800
in what in which state

00:16:31,600 --> 00:16:37,519
it's going to appear and then you just

00:16:34,800 --> 00:16:40,720
have to change the state

00:16:37,519 --> 00:16:41,600
of the of your application and if you

00:16:40,720 --> 00:16:44,160
change

00:16:41,600 --> 00:16:45,279
if you if you make the state log in then

00:16:44,160 --> 00:16:47,920
there's going to be the name and

00:16:45,279 --> 00:16:50,639
password field appearing and a button

00:16:47,920 --> 00:16:52,800
and if you change the state to logged in

00:16:50,639 --> 00:16:54,480
those things just go away

00:16:52,800 --> 00:16:56,480
and there's a welcome message or

00:16:54,480 --> 00:16:57,600
whatever your application has at that

00:16:56,480 --> 00:17:00,880
point

00:16:57,600 --> 00:17:03,120
it's very efficient it uh

00:17:00,880 --> 00:17:04,640
it's saved me having to think so many

00:17:03,120 --> 00:17:05,520
times about how am i going to get things

00:17:04,640 --> 00:17:07,679
to go away

00:17:05,520 --> 00:17:09,280
and the right things to go away as we

00:17:07,679 --> 00:17:12,720
move from

00:17:09,280 --> 00:17:16,000
step to step in a user process

00:17:12,720 --> 00:17:16,000
item renderers i think

00:17:16,160 --> 00:17:19,439
very pleasing to me anyhow you have a

00:17:17,839 --> 00:17:22,720
data source

00:17:19,439 --> 00:17:24,000
um an array with uh and each row in the

00:17:22,720 --> 00:17:27,360
array has a

00:17:24,000 --> 00:17:29,120
a name and a type and an icon indication

00:17:27,360 --> 00:17:32,720
and maybe other properties

00:17:29,120 --> 00:17:33,679
and you can indicate which properties

00:17:32,720 --> 00:17:36,559
you want to use

00:17:33,679 --> 00:17:37,840
and then set up a template an item

00:17:36,559 --> 00:17:41,200
renderer

00:17:37,840 --> 00:17:41,679
that grabs those properties and displays

00:17:41,200 --> 00:17:43,360
them

00:17:41,679 --> 00:17:45,039
where you want this thing to be in this

00:17:43,360 --> 00:17:46,559
case in a list

00:17:45,039 --> 00:17:48,480
so you can make a pretty list very

00:17:46,559 --> 00:17:50,960
quickly and dynamically

00:17:48,480 --> 00:17:53,039
because as the data source changes that

00:17:50,960 --> 00:17:55,679
list will get longer or shorter

00:17:53,039 --> 00:17:58,840
and still with the appropriate in images

00:17:55,679 --> 00:18:01,840
related to the appropriate

00:17:58,840 --> 00:18:01,840
names

00:18:03,120 --> 00:18:10,640
we have a really nice set of charts in

00:18:06,799 --> 00:18:12,559
uh in royale but they aren't

00:18:10,640 --> 00:18:14,320
you know people there are other and

00:18:12,559 --> 00:18:15,120
sometimes better charts out there in the

00:18:14,320 --> 00:18:18,400
world

00:18:15,120 --> 00:18:22,400
one excellent set of charts is b charts

00:18:18,400 --> 00:18:25,280
it's an it's now a project incubating at

00:18:22,400 --> 00:18:26,480
the apache software foundation it uses a

00:18:25,280 --> 00:18:28,320
json format

00:18:26,480 --> 00:18:30,240
hierarchical format to declare

00:18:28,320 --> 00:18:32,400
components and styles and data

00:18:30,240 --> 00:18:33,440
and what interactions you can use with

00:18:32,400 --> 00:18:36,400
the chart

00:18:33,440 --> 00:18:37,200
and it takes almost no time to add an

00:18:36,400 --> 00:18:41,039
e-chart

00:18:37,200 --> 00:18:44,559
from the e-charts external library

00:18:41,039 --> 00:18:46,799
into a royale app there are two ways you

00:18:44,559 --> 00:18:50,160
can add a compiler directive

00:18:46,799 --> 00:18:52,320
or you can use the external interface

00:18:50,160 --> 00:18:53,520
function which is royale's version of

00:18:52,320 --> 00:18:57,760
the old flash

00:18:53,520 --> 00:19:00,320
external interface function

00:18:57,760 --> 00:19:01,200
and that means very quickly you can put

00:19:00,320 --> 00:19:05,039
in a piece of

00:19:01,200 --> 00:19:08,000
a chart that takes your data

00:19:05,039 --> 00:19:09,280
and displays it in what we hope the

00:19:08,000 --> 00:19:12,720
users will find

00:19:09,280 --> 00:19:14,240
a compelling and pleasing way

00:19:12,720 --> 00:19:15,840
but this also points to the fact that

00:19:14,240 --> 00:19:19,440
you can use

00:19:15,840 --> 00:19:21,520
any javascript library that's out there

00:19:19,440 --> 00:19:23,120
we can you can incorporate from the

00:19:21,520 --> 00:19:25,840
world of javascript

00:19:23,120 --> 00:19:26,640
javascript riches into your apache

00:19:25,840 --> 00:19:28,960
royale

00:19:26,640 --> 00:19:29,919
application then compile the whole thing

00:19:28,960 --> 00:19:33,120
together

00:19:29,919 --> 00:19:35,679
and use it out securely and

00:19:33,120 --> 00:19:35,679
efficiently

00:19:36,960 --> 00:19:40,400
the first target for real was and is

00:19:39,840 --> 00:19:44,080
flex

00:19:40,400 --> 00:19:47,280
people who are looking at applications

00:19:44,080 --> 00:19:49,120
and assets and piles of knowledge

00:19:47,280 --> 00:19:52,480
that are threatened with coming to an

00:19:49,120 --> 00:19:54,080
end with the end of flash

00:19:52,480 --> 00:19:56,640
and they're all they have two choices

00:19:54,080 --> 00:20:00,400
they can move to some other technology

00:19:56,640 --> 00:20:02,320
which may mean learning another language

00:20:00,400 --> 00:20:04,240
and then if they want to use the same

00:20:02,320 --> 00:20:08,320
application rebuilding it

00:20:04,240 --> 00:20:11,280
in that new language or

00:20:08,320 --> 00:20:13,360
they can migrate to royale they migrate

00:20:11,280 --> 00:20:16,400
that application to real

00:20:13,360 --> 00:20:17,840
the differences between working in flex

00:20:16,400 --> 00:20:21,039
and working in royale

00:20:17,840 --> 00:20:23,039
are relatively small and the

00:20:21,039 --> 00:20:25,200
and the curve to learn them is pretty

00:20:23,039 --> 00:20:26,880
gradual

00:20:25,200 --> 00:20:28,480
a lot of what you already have in your

00:20:26,880 --> 00:20:30,400
application is just going to work

00:20:28,480 --> 00:20:33,679
almost all the action script for

00:20:30,400 --> 00:20:36,400
instance is just going to work

00:20:33,679 --> 00:20:37,919
the skills that you have are just going

00:20:36,400 --> 00:20:42,320
to work

00:20:37,919 --> 00:20:45,760
if you go with the process of paygo

00:20:42,320 --> 00:20:49,120
of making lean

00:20:45,760 --> 00:20:51,200
components you'll end up rather than

00:20:49,120 --> 00:20:53,039
have every text entry field having all

00:20:51,200 --> 00:20:53,679
the possible actions of a text entry

00:20:53,039 --> 00:20:56,960
field

00:20:53,679 --> 00:20:58,320
and every other component having all the

00:20:56,960 --> 00:21:00,880
possible

00:20:58,320 --> 00:21:02,000
functions for that component if you move

00:21:00,880 --> 00:21:05,760
from that

00:21:02,000 --> 00:21:09,120
to uh using the lean

00:21:05,760 --> 00:21:11,120
uh real version of each uh component

00:21:09,120 --> 00:21:12,720
plus strands and beads for what you need

00:21:11,120 --> 00:21:15,280
in each specific instance

00:21:12,720 --> 00:21:18,640
you get a much smaller footprint for

00:21:15,280 --> 00:21:18,640
your compiled application

00:21:21,039 --> 00:21:28,799
and much faster display on wednesday

00:21:25,440 --> 00:21:32,000
alaina kazai is presenting how she

00:21:28,799 --> 00:21:34,080
and her team a team of

00:21:32,000 --> 00:21:35,039
primarily of two people herself and one

00:21:34,080 --> 00:21:38,080
other person

00:21:35,039 --> 00:21:40,799
moved a major application from flex

00:21:38,080 --> 00:21:42,080
to royale i found it really interesting

00:21:40,799 --> 00:21:44,320
and i know you will

00:21:42,080 --> 00:21:45,679
also especially if you're in that boat

00:21:44,320 --> 00:21:46,240
where you're looking at the end of the

00:21:45,679 --> 00:21:49,760
year

00:21:46,240 --> 00:21:52,799
coming up and there and the end of flash

00:21:49,760 --> 00:21:54,640
but it's for everyone else too if

00:21:52,799 --> 00:21:56,240
you're comfortable with strongly typed

00:21:54,640 --> 00:21:59,280
properties if you

00:21:56,240 --> 00:22:01,360
want to investigate well object-oriented

00:21:59,280 --> 00:22:04,720
programming if you think that might be

00:22:01,360 --> 00:22:06,480
a way to make bite-sized all the things

00:22:04,720 --> 00:22:08,720
you have to do in building an app

00:22:06,480 --> 00:22:10,799
if you want to explore good frameworks

00:22:08,720 --> 00:22:12,720
and interesting component sets

00:22:10,799 --> 00:22:13,919
and you like the option of incorporating

00:22:12,720 --> 00:22:18,000
a lot of stuff

00:22:13,919 --> 00:22:21,520
from the existing uh javascript universe

00:22:18,000 --> 00:22:22,320
then royale is for you and carlos rivera

00:22:21,520 --> 00:22:26,080
again

00:22:22,320 --> 00:22:29,760
on wednesday he's going to be presenting

00:22:26,080 --> 00:22:32,960
how to start from a blank file

00:22:29,760 --> 00:22:37,520
and uh his goal is to build a

00:22:32,960 --> 00:22:37,520
to-do list application which is a

00:22:38,480 --> 00:22:41,679
pretty good benchmark for how an app but

00:22:40,320 --> 00:22:43,760
how a

00:22:41,679 --> 00:22:45,760
sdk works whether you can put it put

00:22:43,760 --> 00:22:49,440
together an application like that

00:22:45,760 --> 00:22:49,440
efficiently and usefully

00:22:52,320 --> 00:22:59,200
here's a comparison of the same

00:22:55,760 --> 00:23:02,960
code structure running in royale

00:22:59,200 --> 00:23:04,159
versus react js or the similar code

00:23:02,960 --> 00:23:07,039
structure

00:23:04,159 --> 00:23:07,679
react is a is a pretty well known um

00:23:07,039 --> 00:23:11,039
framework

00:23:07,679 --> 00:23:11,520
for in javascript and royale is just a

00:23:11,039 --> 00:23:14,400
ton

00:23:11,520 --> 00:23:15,039
faster this is just one data point i

00:23:14,400 --> 00:23:17,840
hadn't

00:23:15,039 --> 00:23:18,400
heard another data point yesterday on

00:23:17,840 --> 00:23:21,520
the

00:23:18,400 --> 00:23:23,360
user's email list for royale

00:23:21,520 --> 00:23:25,360
someone saying he started to work with

00:23:23,360 --> 00:23:28,159
royale he wasn't too sure

00:23:25,360 --> 00:23:29,760
trying to migrate his desktop app he's

00:23:28,159 --> 00:23:32,400
got it running

00:23:29,760 --> 00:23:34,240
he's got all the dashboards and

00:23:32,400 --> 00:23:35,039
everything going he's got the code

00:23:34,240 --> 00:23:38,080
flowing

00:23:35,039 --> 00:23:39,520
and he's also found he had a big problem

00:23:38,080 --> 00:23:42,080
in the flex version

00:23:39,520 --> 00:23:43,440
in that he had a very large database

00:23:42,080 --> 00:23:45,360
call

00:23:43,440 --> 00:23:47,039
for a particular display and it was

00:23:45,360 --> 00:23:50,320
taking up to 10 seconds

00:23:47,039 --> 00:23:52,480
in flex for the page to resolve

00:23:50,320 --> 00:23:54,000
the data to be available and he's

00:23:52,480 --> 00:23:57,440
finding in royale

00:23:54,000 --> 00:23:58,799
that is taking one second again there's

00:23:57,440 --> 00:24:02,000
just a single data point

00:23:58,799 --> 00:24:03,600
and but

00:24:02,000 --> 00:24:05,679
it matches what we're hearing from all

00:24:03,600 --> 00:24:09,919
over that the principle

00:24:05,679 --> 00:24:13,200
of paygo and um

00:24:09,919 --> 00:24:14,640
keeping a small footprint is making it

00:24:13,200 --> 00:24:16,880
possible to create

00:24:14,640 --> 00:24:17,679
applications that are both more sturdy

00:24:16,880 --> 00:24:21,840
than those

00:24:17,679 --> 00:24:25,760
from other frameworks but are faster and

00:24:21,840 --> 00:24:25,760
as reliable as anybody could want

00:24:26,000 --> 00:24:30,880
so to me my love affair with flex

00:24:31,679 --> 00:24:38,799
once and then deploy the stuff

00:24:34,880 --> 00:24:40,880
anywhere knowing that i can code for the

00:24:38,799 --> 00:24:44,080
future

00:24:40,880 --> 00:24:47,520
that we can extend to other uh

00:24:44,080 --> 00:24:50,400
platforms and related to that that now

00:24:47,520 --> 00:24:53,120
royale is open source so there will not

00:24:50,400 --> 00:24:55,279
be a flash extinction event ahead of us

00:24:53,120 --> 00:24:57,279
that the complete platform and our

00:24:55,279 --> 00:24:57,919
reason for being as royal people would

00:24:57,279 --> 00:25:01,360
go away

00:24:57,919 --> 00:25:04,480
that's not going to happen so

00:25:01,360 --> 00:25:06,320
that's most of everything that i was

00:25:04,480 --> 00:25:07,679
going to say well look we have time in

00:25:06,320 --> 00:25:10,799
hand

00:25:07,679 --> 00:25:12,400
so if anyone has uh

00:25:10,799 --> 00:25:14,559
questions they want to type in there's a

00:25:12,400 --> 00:25:17,600
chat screen

00:25:14,559 --> 00:25:29,840
and i will try to

00:25:17,600 --> 00:25:29,840
i'll try to answer them

00:25:31,520 --> 00:25:43,840
i should really go over to the next

00:25:34,000 --> 00:25:43,840
there how about that

00:26:09,520 --> 00:26:15,200
now we someone's asking or uh varun

00:26:12,880 --> 00:26:18,480
kumar is asking do we have an id

00:26:15,200 --> 00:26:19,679
like the flash builder for real we do

00:26:18,480 --> 00:26:23,600
not yet

00:26:19,679 --> 00:26:25,760
uh we have internet uh

00:26:23,600 --> 00:26:28,480
integrated development environments like

00:26:25,760 --> 00:26:28,480
moonshine

00:26:30,320 --> 00:26:37,120
yo that run royale support rail but they

00:26:34,720 --> 00:26:39,360
do not have that wonderful tool

00:26:37,120 --> 00:26:41,600
where you could drag a text box over

00:26:39,360 --> 00:26:45,039
here and drag a button down there

00:26:41,600 --> 00:26:46,640
that's how i learned flex i'll be glad

00:26:45,039 --> 00:26:53,840
when we have it again but we don't have

00:26:46,640 --> 00:26:53,840
it yet

00:26:55,440 --> 00:27:00,159
of course i should say best way to move

00:26:58,400 --> 00:27:00,880
us toward where we will have such a

00:27:00,159 --> 00:27:02,400
thing

00:27:00,880 --> 00:27:05,440
is for people who are curious or

00:27:02,400 --> 00:27:08,480
interested to come and get on the

00:27:05,440 --> 00:27:14,080
uh the users or the dev lists for

00:27:08,480 --> 00:27:14,080
apache royale and say hey we need an ide

00:27:14,720 --> 00:27:17,840
so uh daniel is asking does apache

00:27:16,960 --> 00:27:20,880
compete with

00:27:17,840 --> 00:27:24,559
technologies like view react and angular

00:27:20,880 --> 00:27:24,559
in the sense it's a framework

00:27:25,760 --> 00:27:32,159
but because

00:27:28,799 --> 00:27:34,480
royale is based on action script which

00:27:32,159 --> 00:27:36,480
makes a lot of space and assumptions for

00:27:34,480 --> 00:27:39,520
making components

00:27:36,480 --> 00:27:43,039
of your of your code which

00:27:39,520 --> 00:27:49,840
javascript doesn't really um

00:27:43,039 --> 00:27:49,840
it has a slightly different attack

00:27:52,240 --> 00:27:56,799
that's a very good point jose says there

00:27:54,720 --> 00:27:59,760
are hundreds of examples

00:27:56,799 --> 00:28:01,600
in pages like stack overflow uh for

00:27:59,760 --> 00:28:03,360
other technologies but very few in

00:28:01,600 --> 00:28:08,000
royale

00:28:03,360 --> 00:28:08,000
that's true we have um

00:28:08,640 --> 00:28:12,000
for all open source projects we can only

00:28:11,679 --> 00:28:16,480
do

00:28:12,000 --> 00:28:20,399
what the team is available to do

00:28:16,480 --> 00:28:23,760
and the more users uh

00:28:20,399 --> 00:28:25,679
the more users we have who

00:28:23,760 --> 00:28:27,360
surface issues that need answers the

00:28:25,679 --> 00:28:30,480
more we have answers we can

00:28:27,360 --> 00:28:32,080
post to a place like stack overflow on

00:28:30,480 --> 00:28:32,960
our website we have a very good

00:28:32,080 --> 00:28:35,919
collection

00:28:32,960 --> 00:28:35,919
of tutorial

00:28:36,320 --> 00:28:40,960
lessons from our blog

00:28:39,600 --> 00:28:43,360
on a wide range of things that

00:28:40,960 --> 00:28:45,520
introduces not only the specific topic

00:28:43,360 --> 00:28:47,440
like how to do a view state but the

00:28:45,520 --> 00:28:49,360
whole concept of

00:28:47,440 --> 00:28:51,840
of how to work with the apache royale

00:28:49,360 --> 00:28:52,559
code and also provides of course access

00:28:51,840 --> 00:28:58,240
to

00:28:52,559 --> 00:29:00,799
the example code

00:28:58,240 --> 00:29:03,360
some uh vancouver asks do we have any

00:29:00,799 --> 00:29:06,480
more documentation and examples for crux

00:29:03,360 --> 00:29:07,360
and real world amf if you go to our

00:29:06,480 --> 00:29:10,840
website

00:29:07,360 --> 00:29:14,880
you should find material on crux and

00:29:10,840 --> 00:29:18,640
amf and again if you're

00:29:14,880 --> 00:29:22,159
if you're not uh seeing it there

00:29:18,640 --> 00:29:22,159
if that's the place to ask for it

00:29:22,720 --> 00:29:26,320
yes as carlos says it's up to all of us

00:29:24,799 --> 00:29:27,679
to make royale uh

00:29:26,320 --> 00:29:30,399
bigger and to have more users and

00:29:27,679 --> 00:29:31,840
resources one of the reasons we have so

00:29:30,399 --> 00:29:34,960
many

00:29:31,840 --> 00:29:37,840
we are so well prepared for flex users

00:29:34,960 --> 00:29:38,799
to migrate an application from flex to

00:29:37,840 --> 00:29:40,559
royale

00:29:38,799 --> 00:29:42,240
is that we've had people who've done it

00:29:40,559 --> 00:29:44,640
and contributed their knowledge

00:29:42,240 --> 00:29:46,080
and the code they had to write in the

00:29:44,640 --> 00:29:49,279
same way if someone needs

00:29:46,080 --> 00:29:50,320
sees a need oh i need more animation

00:29:49,279 --> 00:29:53,440
support

00:29:50,320 --> 00:29:56,720
it's partly up to me to do

00:29:53,440 --> 00:29:58,320
to provide at least some guidance to

00:29:56,720 --> 00:30:01,919
some specific questions

00:29:58,320 --> 00:30:04,799
so the community can

00:30:01,919 --> 00:30:04,799
make a response

00:30:07,679 --> 00:30:15,039
yeah carlos has pointed out that uh uh

00:30:11,440 --> 00:30:17,760
there's an example using crux uh

00:30:15,039 --> 00:30:19,679
on the website and that might give a lot

00:30:17,760 --> 00:30:23,840
of guidance or a lot of help in getting

00:30:19,679 --> 00:30:23,840
you started with crux

00:30:44,559 --> 00:30:47,840
as carlos says that example doesn't use

00:30:46,720 --> 00:30:52,240
amf but

00:30:47,840 --> 00:30:56,000
but and it does use http https

00:30:52,240 --> 00:30:57,120
http services but right up to there it's

00:30:56,000 --> 00:31:01,039
exactly the same

00:30:57,120 --> 00:31:01,679
and um again the nice thing is if you

00:31:01,039 --> 00:31:03,600
get stuck

00:31:01,679 --> 00:31:19,840
trying out that example the community is

00:31:03,600 --> 00:31:19,840
able to help clarify

00:31:20,080 --> 00:31:24,559
so there were a little we have a little

00:31:23,039 --> 00:31:27,440
time in hand

00:31:24,559 --> 00:31:27,760
however i'm sure you may you may feel

00:31:27,440 --> 00:31:30,960
like

00:31:27,760 --> 00:31:34,159
uh getting yourself a uh a beverage

00:31:30,960 --> 00:31:37,760
or uh getting into

00:31:34,159 --> 00:31:40,159
the corridor chats before the next

00:31:37,760 --> 00:31:40,159
session

00:31:44,399 --> 00:31:48,320
so praveen asks is there a small sample

00:31:46,880 --> 00:31:50,880
demo project

00:31:48,320 --> 00:31:52,000
which has the conversion from flex to

00:31:50,880 --> 00:31:54,480
apache royale

00:31:52,000 --> 00:31:54,480
in git

00:31:55,600 --> 00:32:02,720
and carlos says yes

00:31:59,279 --> 00:32:03,039
oh exactly there is um and carlos will

00:32:02,720 --> 00:32:07,360
be

00:32:03,039 --> 00:32:08,159
uh uh um as carlos points out there is

00:32:07,360 --> 00:32:11,600
the good old

00:32:08,159 --> 00:32:13,919
flex tool called tour deflects that

00:32:11,600 --> 00:32:14,960
showed all the different applications

00:32:13,919 --> 00:32:18,159
properties

00:32:14,960 --> 00:32:19,600
and controls in flex

00:32:18,159 --> 00:32:21,600
and how you could use them in a whole

00:32:19,600 --> 00:32:24,720
bunch of simple examples

00:32:21,600 --> 00:32:27,039
and there is a an instance of that

00:32:24,720 --> 00:32:28,399
in the source code that you can compile

00:32:27,039 --> 00:32:32,000
and run and see

00:32:28,399 --> 00:32:34,640
that it converts into a royale

00:32:32,000 --> 00:32:34,640
application

00:32:37,039 --> 00:32:57,840
as the line alina says it's in the

00:32:40,480 --> 00:32:57,840
sdk examples folder in the

00:33:10,159 --> 00:33:14,799
and the link is there in the chat screen

00:33:21,200 --> 00:33:25,519
so if there are no more questions we'll

00:33:23,279 --> 00:33:29,039
draw this to a close

00:33:25,519 --> 00:33:32,320
um i do hope you follow the other three

00:33:29,039 --> 00:33:34,159
talks in our track that i mentioned

00:33:32,320 --> 00:33:36,159
there's the one about starting from a

00:33:34,159 --> 00:33:39,039
blank file

00:33:36,159 --> 00:33:40,960
build even if you have no flex resources

00:33:39,039 --> 00:33:43,200
to start with

00:33:40,960 --> 00:33:46,000
you can also uh visit the one on

00:33:43,200 --> 00:33:49,279
migrating from a flex app to a royale

00:33:46,000 --> 00:33:50,640
app and there's a third one on taking a

00:33:49,279 --> 00:33:53,760
tour of tour

00:33:50,640 --> 00:33:57,039
de jewel the jewel component set

00:33:53,760 --> 00:34:01,279
is the most elaborated and

00:33:57,039 --> 00:34:01,279
subtle of the component sets that royale

00:34:04,840 --> 00:34:08,960
has

00:34:06,080 --> 00:34:09,839
port and if you have issues the best way

00:34:08,960 --> 00:34:14,240
is to join

00:34:09,839 --> 00:34:17,280
the users at uh apache royale

00:34:14,240 --> 00:34:20,000
web email list and

00:34:17,280 --> 00:34:22,000
um there we are carlos just posted the

00:34:20,000 --> 00:34:25,839
link to the mailing lists

00:34:22,000 --> 00:34:28,079
and introduce yourself there

00:34:25,839 --> 00:34:29,359
you can present a specific problem a

00:34:28,079 --> 00:34:32,720
code snippet

00:34:29,359 --> 00:34:35,520
or ask even a general question and the

00:34:32,720 --> 00:34:37,359
i've found the team is remarkably

00:34:35,520 --> 00:34:38,320
responsive in terms of do it responding

00:34:37,359 --> 00:34:41,040
quickly and

00:34:38,320 --> 00:34:41,040
to the point

00:34:46,079 --> 00:34:50,079
and carlos has also posted a link if you

00:34:48,639 --> 00:34:50,480
if you're talking from the point of view

00:34:50,079 --> 00:34:54,240
of

00:34:50,480 --> 00:34:54,240
a business that needs commercial support

00:34:57,119 --> 00:35:02,240
okay sudakara asked about commercial

00:35:00,560 --> 00:35:04,320
support and if you go to the link that

00:35:02,240 --> 00:35:17,839
carlos just posted you'll see

00:35:04,320 --> 00:35:17,839
some of what we recommend

00:35:34,880 --> 00:35:40,320
so as carlos is pointing out that

00:35:38,000 --> 00:35:44,000
that page that he's linked to lists

00:35:40,320 --> 00:35:46,480
people um

00:35:44,000 --> 00:35:47,280
vendors and and companies that can

00:35:46,480 --> 00:35:50,960
provide

00:35:47,280 --> 00:35:52,160
uh commercial support to your migration

00:35:50,960 --> 00:35:55,200
project

00:35:52,160 --> 00:35:57,599
and of course the rail team itself can

00:35:55,200 --> 00:36:13,839
provide

00:35:57,599 --> 00:36:13,839
open source support

00:36:16,640 --> 00:36:21,599
well thank you very much everyone for

00:36:18,320 --> 00:36:21,599
showing up and

00:36:23,839 --> 00:36:39,599

YouTube URL: https://www.youtube.com/watch?v=YLt85Nee4ks


