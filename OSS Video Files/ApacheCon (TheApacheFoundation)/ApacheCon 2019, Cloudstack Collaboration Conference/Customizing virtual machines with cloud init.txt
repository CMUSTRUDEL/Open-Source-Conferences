Title: Customizing virtual machines with cloud init
Publication date: 2019-09-19
Playlist: ApacheCon 2019, Cloudstack Collaboration Conference
Description: 
	This presentation will cover the basic design around how CloudStack implements support for cloud-init datasources, configuring the cloud-init service within a VM template to talk to one of the CloudStack supported datasources, and give a basic introduction to using cloud-init to customize virtual machines upon deployment.
Captions: 
	00:00:04,840 --> 00:00:09,770
just start out talking a little bit

00:00:06,740 --> 00:00:12,020
about myself I my name is Marcus

00:00:09,770 --> 00:00:16,430
Sorenson and I've been with glass stacks

00:00:12,020 --> 00:00:19,010
community since about 2011 2012 I

00:00:16,430 --> 00:00:22,130
started to commit code back

00:00:19,010 --> 00:00:26,930
I think 2012 was our first bad stack

00:00:22,130 --> 00:00:30,860
conference here in Vegas so it's the

00:00:26,930 --> 00:00:32,629
long time I focus mostly on KBM and also

00:00:30,860 --> 00:00:37,670
the stores and network implementations

00:00:32,629 --> 00:00:40,790
on Kenya I'm gonna talk a little bit

00:00:37,670 --> 00:00:44,630
today about cloud in it how many of you

00:00:40,790 --> 00:00:48,710
are familiar with cloud in it so most of

00:00:44,630 --> 00:00:53,270
you how many of you have actually used

00:00:48,710 --> 00:00:56,840
it to customize a virtual machine okay

00:00:53,270 --> 00:00:58,489
so a couple people son most of this

00:00:56,840 --> 00:01:01,550
discussion is not really a cloud spec

00:00:58,489 --> 00:01:03,739
specific it's more around just how you

00:01:01,550 --> 00:01:08,149
use cloud in it in general and it can be

00:01:03,739 --> 00:01:09,920
applicable to AWS or you know any place

00:01:08,149 --> 00:01:13,359
and I'll talk a little bit about the

00:01:09,920 --> 00:01:16,459
implementation of cloud and cloud stack

00:01:13,359 --> 00:01:19,039
but most of this is pretty basic like

00:01:16,459 --> 00:01:21,170
get your feet wet kind of show you the

00:01:19,039 --> 00:01:23,840
ins and outs one of the things I found

00:01:21,170 --> 00:01:25,880
is that the cloud ended documentation

00:01:23,840 --> 00:01:27,950
can be a little bit sparse especially

00:01:25,880 --> 00:01:30,950
when it comes to functionality and

00:01:27,950 --> 00:01:32,539
individual modules so my hope here today

00:01:30,950 --> 00:01:34,189
is that I can kind of give you a little

00:01:32,539 --> 00:01:36,920
bit of a head start and kind of give you

00:01:34,189 --> 00:01:39,439
a mental model of how some of the pieces

00:01:36,920 --> 00:01:41,420
of cloud in it work so you don't have to

00:01:39,439 --> 00:01:47,179
go through to the trial and error quite

00:01:41,420 --> 00:01:49,039
as much as as I did yeah I don't expect

00:01:47,179 --> 00:01:51,740
to take the full the whole time today

00:01:49,039 --> 00:01:54,229
but we'll just see how how far we get

00:01:51,740 --> 00:01:56,779
and how it goes

00:01:54,229 --> 00:01:59,719
so what is cloud in it if you look it up

00:01:56,779 --> 00:02:01,969
in the documentation they call it the

00:01:59,719 --> 00:02:03,859
de-facto multi multi distribution

00:02:01,969 --> 00:02:07,279
package that handles early

00:02:03,859 --> 00:02:09,380
initialization of a cloud instance so

00:02:07,279 --> 00:02:13,310
what that boils down to is it's a set of

00:02:09,380 --> 00:02:17,210
services that are installed into your VM

00:02:13,310 --> 00:02:17,920
and on boot-up those services come up

00:02:17,210 --> 00:02:20,020
and they

00:02:17,920 --> 00:02:22,990
look at some extra data that are that's

00:02:20,020 --> 00:02:26,260
past tier V m and the individual

00:02:22,990 --> 00:02:30,190
services they kick off and do certain

00:02:26,260 --> 00:02:33,100
configurations so you can run modules

00:02:30,190 --> 00:02:35,590
and they can do things like format your

00:02:33,100 --> 00:02:39,160
file system for you they can add users

00:02:35,590 --> 00:02:41,920
they can configure network details set

00:02:39,160 --> 00:02:44,200
up your SSH keys you can do all sorts of

00:02:41,920 --> 00:02:47,110
things to kind of get the VM up and

00:02:44,200 --> 00:02:49,840
usable and working how you would want to

00:02:47,110 --> 00:02:51,640
have it work as an admin so you kind of

00:02:49,840 --> 00:02:53,380
think of it as like you know there are

00:02:51,640 --> 00:02:55,450
lots of tools in this space there are

00:02:53,380 --> 00:02:57,820
things like puppet and ansible and

00:02:55,450 --> 00:03:00,880
things that you can reach out to vm or

00:02:57,820 --> 00:03:04,420
to any instance or server and can

00:03:00,880 --> 00:03:07,300
configure those but this is kind of like

00:03:04,420 --> 00:03:08,950
the way to bootstrap vm that's been

00:03:07,300 --> 00:03:09,959
brought up from a template and customize

00:03:08,950 --> 00:03:13,090
it

00:03:09,959 --> 00:03:17,080
one thing I'd mention is it's primarily

00:03:13,090 --> 00:03:22,840
developed by canonical and it's dual

00:03:17,080 --> 00:03:24,400
licensed under GPL 3 and Apache 2 it

00:03:22,840 --> 00:03:27,250
also defines a spec for the

00:03:24,400 --> 00:03:29,670
configuration so we'll go over that this

00:03:27,250 --> 00:03:34,360
is kind of a basic energy basic overview

00:03:29,670 --> 00:03:36,790
so a user of a cloud service wants to

00:03:34,360 --> 00:03:38,290
deploy a virtual machine when they

00:03:36,790 --> 00:03:41,440
deploy the virtual machine they provide

00:03:38,290 --> 00:03:44,560
this user data which is configuration

00:03:41,440 --> 00:03:46,420
that we'll go over in a minute they

00:03:44,560 --> 00:03:48,850
provide that and the cloud interface

00:03:46,420 --> 00:03:52,660
whatever they're talking to whether it

00:03:48,850 --> 00:03:56,440
be AWS api or some user interface or the

00:03:52,660 --> 00:03:58,390
cloud stack api that cloud interface is

00:03:56,440 --> 00:04:00,160
going to take the user data and it's

00:03:58,390 --> 00:04:01,750
going to push it into a data source and

00:04:00,160 --> 00:04:03,880
there are multiple data source

00:04:01,750 --> 00:04:08,079
implementations and i'm going to cover

00:04:03,880 --> 00:04:11,019
some of those today but then this this

00:04:08,079 --> 00:04:13,480
cloud orchestration system it provisions

00:04:11,019 --> 00:04:15,489
the incense and then inside the instance

00:04:13,480 --> 00:04:18,340
you have these cloud in it services

00:04:15,489 --> 00:04:20,410
installed and it they know how to reach

00:04:18,340 --> 00:04:23,950
out to that data source and pull that

00:04:20,410 --> 00:04:26,680
that user data that the user provided

00:04:23,950 --> 00:04:27,310
and then it takes that data processes

00:04:26,680 --> 00:04:32,970
and

00:04:27,310 --> 00:04:35,110
there's all the customization yeah

00:04:32,970 --> 00:04:40,810
that's kind of at a high level how the

00:04:35,110 --> 00:04:42,669
whole system works so let's talk about

00:04:40,810 --> 00:04:46,000
these services that are installed inside

00:04:42,669 --> 00:04:48,730
the VM there are I think there are four

00:04:46,000 --> 00:04:50,200
official services and then there's a

00:04:48,730 --> 00:04:55,150
generator which is kind of a

00:04:50,200 --> 00:04:57,340
configuration option so yeah so the

00:04:55,150 --> 00:04:59,889
generator decides if the cloud immune

00:04:57,340 --> 00:05:01,900
services are going to run at all and

00:04:59,889 --> 00:05:05,169
then the individual services like you to

00:05:01,900 --> 00:05:07,150
do the systemctl list units you'll see

00:05:05,169 --> 00:05:07,780
all these different cloud cloudy net

00:05:07,150 --> 00:05:10,540
services

00:05:07,780 --> 00:05:12,729
there's cloud in it local which comes up

00:05:10,540 --> 00:05:15,160
before networking and gives you the

00:05:12,729 --> 00:05:17,800
opportunity to configure networking on

00:05:15,160 --> 00:05:19,900
the system so it's like the earliest and

00:05:17,800 --> 00:05:23,169
also it is capable of reading the local

00:05:19,900 --> 00:05:24,669
data source what we mean by a local data

00:05:23,169 --> 00:05:26,680
source is basically things that don't

00:05:24,669 --> 00:05:29,560
require networking to reach out to a

00:05:26,680 --> 00:05:32,500
dance or so if your data source provider

00:05:29,560 --> 00:05:34,419
is like config drive or an ISO or

00:05:32,500 --> 00:05:37,890
something that the VM can have access to

00:05:34,419 --> 00:05:40,300
without actually having networking then

00:05:37,890 --> 00:05:43,720
you can they can actually pull in that

00:05:40,300 --> 00:05:45,520
data source and the reason why that's

00:05:43,720 --> 00:05:47,860
important is because your user data

00:05:45,520 --> 00:05:51,160
itself it can provide things like

00:05:47,860 --> 00:05:52,479
network setup information and so so

00:05:51,160 --> 00:05:54,340
that's going to require you know you

00:05:52,479 --> 00:05:57,400
have a chicken in the neck situation if

00:05:54,340 --> 00:05:58,770
you have a network data source and

00:05:57,400 --> 00:06:03,400
you're trying to configure networking

00:05:58,770 --> 00:06:05,740
you know so your local data sources what

00:06:03,400 --> 00:06:07,919
you'd use for doing network setup then

00:06:05,740 --> 00:06:12,419
there's the net the cloud in its service

00:06:07,919 --> 00:06:17,110
which is done after network is set up

00:06:12,419 --> 00:06:19,030
and that's controlled by or that runs

00:06:17,110 --> 00:06:22,780
the modules defined in the cloud in the

00:06:19,030 --> 00:06:24,340
modules section then you have the config

00:06:22,780 --> 00:06:25,630
service that comes up after that and

00:06:24,340 --> 00:06:28,240
that's usually where you're going to do

00:06:25,630 --> 00:06:31,300
things like partition file system or

00:06:28,240 --> 00:06:33,510
partition block devices and create file

00:06:31,300 --> 00:06:35,880
systems and things of that nature

00:06:33,510 --> 00:06:38,470
and then you had the final service

00:06:35,880 --> 00:06:40,600
that's normally where you do package

00:06:38,470 --> 00:06:43,120
installations things that you're going

00:06:40,600 --> 00:06:46,510
to lay on top of your finish system you

00:06:43,120 --> 00:06:49,030
can set up SSH keys for example and then

00:06:46,510 --> 00:06:51,280
you can also do a phone home so there's

00:06:49,030 --> 00:06:53,290
the capability to tell cloud a mint to

00:06:51,280 --> 00:06:55,360
reach out to a URL for example and say

00:06:53,290 --> 00:06:59,199
hey I'm done you know I've configured my

00:06:55,360 --> 00:07:01,750
virtual machine so there's there's a lot

00:06:59,199 --> 00:07:03,040
to it and it can be there gonna be a

00:07:01,750 --> 00:07:06,639
little bit of trial and error figuring

00:07:03,040 --> 00:07:11,040
out how all of these services work and

00:07:06,639 --> 00:07:13,330
when to put things in certain services

00:07:11,040 --> 00:07:17,500
so let's talk a little bit about data

00:07:13,330 --> 00:07:19,290
sources these sources are where are

00:07:17,500 --> 00:07:23,500
there kind of a handoff point between

00:07:19,290 --> 00:07:26,710
the VM and the orchestration system they

00:07:23,500 --> 00:07:28,710
kind of reside in the middle the

00:07:26,710 --> 00:07:32,199
orchestration system will populate the

00:07:28,710 --> 00:07:33,639
data provided by the user and then the

00:07:32,199 --> 00:07:37,289
VM needs to know how to reach out to

00:07:33,639 --> 00:07:42,190
that so cloud in it defines an API for

00:07:37,289 --> 00:07:44,940
fetching that user data so it's up to

00:07:42,190 --> 00:07:47,590
the data source to implement that API

00:07:44,940 --> 00:07:50,229
and cloud stack uses cloud stack

00:07:47,590 --> 00:07:51,940
provides a special cloud stack data

00:07:50,229 --> 00:07:54,849
source which is based on the virtual

00:07:51,940 --> 00:07:57,520
router and so that data source module

00:07:54,849 --> 00:08:00,840
knows that it has to look up the virtual

00:07:57,520 --> 00:08:03,370
router address out of the DHCP

00:08:00,840 --> 00:08:04,660
information on your system and then if

00:08:03,370 --> 00:08:07,900
you know and reach out to that virtual

00:08:04,660 --> 00:08:10,990
router at a certain URL and it can fetch

00:08:07,900 --> 00:08:13,780
that user data the other one that

00:08:10,990 --> 00:08:16,440
supports this config drive v2 which is

00:08:13,780 --> 00:08:20,139
actually based on the OpenStack model

00:08:16,440 --> 00:08:22,510
and it's a it's provided as an ISO and

00:08:20,139 --> 00:08:25,030
into the VM and so that would be an

00:08:22,510 --> 00:08:27,220
example of a local data source so you

00:08:25,030 --> 00:08:30,190
could you could configure the VM its

00:08:27,220 --> 00:08:31,479
networking based on that one thing is

00:08:30,190 --> 00:08:34,029
interesting about the way the data

00:08:31,479 --> 00:08:37,300
sources are set up is if you want to

00:08:34,029 --> 00:08:38,260
create a new data source you can do that

00:08:37,300 --> 00:08:41,740
in multiple ways

00:08:38,260 --> 00:08:43,510
you could create a new module that knows

00:08:41,740 --> 00:08:46,050
how to reach out to your data source so

00:08:43,510 --> 00:08:48,480
if you've got some special web point

00:08:46,050 --> 00:08:50,340
web endpoint that you want the VM to

00:08:48,480 --> 00:08:51,330
reach out to to get it submitted or user

00:08:50,340 --> 00:08:54,090
data

00:08:51,330 --> 00:08:56,520
you can create a new module the other

00:08:54,090 --> 00:09:01,860
the other thing you can do is have your

00:08:56,520 --> 00:09:05,040
datasource emulate or implement someone

00:09:01,860 --> 00:09:09,150
else's model so for example the the way

00:09:05,040 --> 00:09:12,510
the Amazon provides user data is it uses

00:09:09,150 --> 00:09:16,020
a link local IP address so when the

00:09:12,510 --> 00:09:17,790
cloud intent service kicks on it tries

00:09:16,020 --> 00:09:21,450
to reach out to one sixty nine to five

00:09:17,790 --> 00:09:25,230
four one six nine to five floor and user

00:09:21,450 --> 00:09:27,570
data and so I may not be Amazon but if I

00:09:25,230 --> 00:09:29,820
could emulate that and make somehow make

00:09:27,570 --> 00:09:33,600
one six nine to five for once at 9 to 5

00:09:29,820 --> 00:09:35,430
for return metadata then I can you know

00:09:33,600 --> 00:09:37,020
I can implement it the way that Amazon

00:09:35,430 --> 00:09:38,580
does it so that's that's what I clip my

00:09:37,020 --> 00:09:41,970
how cloud stack has done with config

00:09:38,580 --> 00:09:43,470
drive OpenStack I published this config

00:09:41,970 --> 00:09:47,340
drive sit back and said this is how our

00:09:43,470 --> 00:09:55,530
module inspects to find the data and we

00:09:47,340 --> 00:09:59,120
implemented that so modules are they're

00:09:55,530 --> 00:10:02,190
basically bundles of Python code usually

00:09:59,120 --> 00:10:04,850
that implements specific tasks and so

00:10:02,190 --> 00:10:07,800
you have a module for example that

00:10:04,850 --> 00:10:11,150
formats a file system you have a module

00:10:07,800 --> 00:10:16,110
that sets up a SSH different module that

00:10:11,150 --> 00:10:19,770
creates users for you the modules have a

00:10:16,110 --> 00:10:23,340
frequency property namely it'll it'll be

00:10:19,770 --> 00:10:25,050
once instance or always and the

00:10:23,340 --> 00:10:28,800
difference or the difference between

00:10:25,050 --> 00:10:31,260
these is your cloud in ed services

00:10:28,800 --> 00:10:34,500
they're coming up and running every

00:10:31,260 --> 00:10:36,300
single time you boot the system but it

00:10:34,500 --> 00:10:39,540
knows that it's only going to run a

00:10:36,300 --> 00:10:42,870
certain module anytime like the VM UUID

00:10:39,540 --> 00:10:45,210
changes so herd for instance would be

00:10:42,870 --> 00:10:49,080
any time the VM UUID changes it's going

00:10:45,210 --> 00:10:51,990
to rerun your module once is like it

00:10:49,080 --> 00:10:54,330
only ever runs one time and so you need

00:10:51,990 --> 00:10:57,630
to be aware of that if you're creating a

00:10:54,330 --> 00:10:59,610
template if you create a template and

00:10:57,630 --> 00:11:00,960
your module is already run then it's

00:10:59,610 --> 00:11:04,050
never gonna run again even when you

00:11:00,960 --> 00:11:05,310
clone that template so those are there's

00:11:04,050 --> 00:11:07,560
some tricky things around the

00:11:05,310 --> 00:11:09,570
frequencies when you're developing and

00:11:07,560 --> 00:11:11,550
trying to build a new multi

00:11:09,570 --> 00:11:13,620
configuration for you and always of

00:11:11,550 --> 00:11:20,070
course it's always going to hold that

00:11:13,620 --> 00:11:23,250
module and process each module has has a

00:11:20,070 --> 00:11:25,440
defined configuration in the cloud in it

00:11:23,250 --> 00:11:29,280
user data and I'll show you an example

00:11:25,440 --> 00:11:32,070
of this but basically it allows you to

00:11:29,280 --> 00:11:37,740
provide customized inputs to each module

00:11:32,070 --> 00:11:41,490
for example the partitioning module you

00:11:37,740 --> 00:11:44,490
can provide which device to look for you

00:11:41,490 --> 00:11:47,480
can provide how you want the partitions

00:11:44,490 --> 00:11:50,160
so you can say I want 50% of it to be

00:11:47,480 --> 00:11:52,530
yeah I want three partitions I want a 50

00:11:50,160 --> 00:11:56,670
percent and a 50 percent or 50 percent

00:11:52,530 --> 00:11:59,370
25 to 25 right something like that and

00:11:56,670 --> 00:12:03,150
each module has kind of a custom set of

00:11:59,370 --> 00:12:04,740
llamó that it supports and that's that's

00:12:03,150 --> 00:12:07,440
one that's probably one of the harder

00:12:04,740 --> 00:12:11,220
things as far as playing with cloud in

00:12:07,440 --> 00:12:14,120
it is understanding the exact syntax and

00:12:11,220 --> 00:12:16,350
config keys that a module supports

00:12:14,120 --> 00:12:18,450
looking for examples and things like

00:12:16,350 --> 00:12:19,830
that sometimes sometimes you have to

00:12:18,450 --> 00:12:22,920
actually go look at the code of the

00:12:19,830 --> 00:12:26,600
module to kind of understand what what

00:12:22,920 --> 00:12:26,600
it supports if you can't find an example

00:12:27,230 --> 00:12:35,280
the bundle of modules are found in the

00:12:32,160 --> 00:12:37,520
cloud net source and so if you do have

00:12:35,280 --> 00:12:40,410
trouble figuring out which keys a

00:12:37,520 --> 00:12:42,450
specific module supports you can go look

00:12:40,410 --> 00:12:45,150
at the source code and if you look in

00:12:42,450 --> 00:12:46,740
the cloud in it source code in this

00:12:45,150 --> 00:12:49,950
directory cloud native slash can take

00:12:46,740 --> 00:12:53,000
you'll see all of the modules there you

00:12:49,950 --> 00:12:53,000
can look at the individual

00:12:55,410 --> 00:13:01,510
so these modules when we look at the

00:12:58,210 --> 00:13:03,130
actual cloud configuration you'll see

00:13:01,510 --> 00:13:06,490
there's a cloud in its section a cloud

00:13:03,130 --> 00:13:08,980
config section and a cloud final section

00:13:06,490 --> 00:13:11,470
and those correspond to the actual

00:13:08,980 --> 00:13:13,990
services and so what you can do is you

00:13:11,470 --> 00:13:16,300
can actually link individual modules to

00:13:13,990 --> 00:13:18,700
run when each of those services kicks

00:13:16,300 --> 00:13:21,010
off and so if you want to if you want to

00:13:18,700 --> 00:13:23,620
run partitioning in the cloud final

00:13:21,010 --> 00:13:26,530
service you can move the module to that

00:13:23,620 --> 00:13:31,960
section or you know rearrange them

00:13:26,530 --> 00:13:35,710
however you feel is appropriate so let's

00:13:31,960 --> 00:13:37,810
talk about those configurations there's

00:13:35,710 --> 00:13:41,800
a system level configuration called Etsy

00:13:37,810 --> 00:13:44,170
cloud cloud CFG and these usually static

00:13:41,800 --> 00:13:45,550
you usually what happens is when you

00:13:44,170 --> 00:13:50,350
build a template you want to put a

00:13:45,550 --> 00:13:51,910
specific cloud CFG there and usually

00:13:50,350 --> 00:13:55,330
each distribution kind of has the same

00:13:51,910 --> 00:13:58,540
default and that's actually pretty wide

00:13:55,330 --> 00:14:01,680
so it provides nearly all the modules

00:13:58,540 --> 00:14:04,360
that are available will be defined there

00:14:01,680 --> 00:14:07,120
and I think my default like it tries to

00:14:04,360 --> 00:14:08,440
use the AWS one first a minute like it

00:14:07,120 --> 00:14:10,410
goes through all of the data sources

00:14:08,440 --> 00:14:16,690
looking for

00:14:10,410 --> 00:14:19,540
for instance user data that can also be

00:14:16,690 --> 00:14:21,670
problematic if you start a few install

00:14:19,540 --> 00:14:23,590
the cloud net services but you don't

00:14:21,670 --> 00:14:25,720
have any sort of user data like if you

00:14:23,590 --> 00:14:28,390
spun up a VirtualBox VM and you install

00:14:25,720 --> 00:14:30,640
clavinet it might take five minutes for

00:14:28,390 --> 00:14:32,200
the VM to come up because as those

00:14:30,640 --> 00:14:35,140
services start up they're going to start

00:14:32,200 --> 00:14:36,340
looking for they use your data and it's

00:14:35,140 --> 00:14:38,680
going to go through all the data sources

00:14:36,340 --> 00:14:41,320
and each one of those has a timeout

00:14:38,680 --> 00:14:43,480
and so I think like just looking for the

00:14:41,320 --> 00:14:44,920
AWS data source it's going to take two

00:14:43,480 --> 00:14:47,410
minutes before it times up

00:14:44,920 --> 00:14:49,800
so you want to be kind of careful when

00:14:47,410 --> 00:14:52,210
you're installing cloud in it that you

00:14:49,800 --> 00:14:55,030
make sure that the data sources that you

00:14:52,210 --> 00:14:57,570
care about are there before you enable

00:14:55,030 --> 00:14:57,570
the services

00:14:58,050 --> 00:15:04,890
so NC cloud cloud CFG I guess is usually

00:15:02,160 --> 00:15:08,339
static you usually don't change that you

00:15:04,890 --> 00:15:11,459
put it in the template and you let it be

00:15:08,339 --> 00:15:13,760
let it be then at a higher level of

00:15:11,459 --> 00:15:16,950
customization you have the user data and

00:15:13,760 --> 00:15:26,910
that's usually what's dynamic did you a

00:15:16,950 --> 00:15:29,010
question yes right yeah when so so when

00:15:26,910 --> 00:15:31,560
you install cloud in it that's actually

00:15:29,010 --> 00:15:33,270
provided in the package usually each

00:15:31,560 --> 00:15:36,720
distribution has its own kind of

00:15:33,270 --> 00:15:39,839
defaults and above that there are

00:15:36,720 --> 00:15:42,120
actually defaults that are just like

00:15:39,839 --> 00:15:44,490
native inside cloud in it and then ANSI

00:15:42,120 --> 00:15:50,250
cloud cloud CFG is like the first level

00:15:44,490 --> 00:15:52,380
override so yeah one level above that

00:15:50,250 --> 00:15:55,589
for customization is the user data

00:15:52,380 --> 00:15:57,930
configuration and so we talked about the

00:15:55,589 --> 00:15:59,370
dynamic configuration because every VM

00:15:57,930 --> 00:16:03,000
that can come up can have different

00:15:59,370 --> 00:16:06,209
inputs to that and we can customize you

00:16:03,000 --> 00:16:07,980
know at that level and there are

00:16:06,209 --> 00:16:13,230
actually a variety of format options

00:16:07,980 --> 00:16:15,029
I'll go over that in just a second then

00:16:13,230 --> 00:16:16,350
there's also instance metadata and

00:16:15,029 --> 00:16:19,380
that's usually provided by the

00:16:16,350 --> 00:16:23,070
orchestration system so things like the

00:16:19,380 --> 00:16:26,160
VM UUID and things like that can be

00:16:23,070 --> 00:16:28,050
provided by the orchestration system

00:16:26,160 --> 00:16:34,709
they can actually use those variables in

00:16:28,050 --> 00:16:36,480
the cloud event data so that's and since

00:16:34,709 --> 00:16:37,709
that depends on the orchestration system

00:16:36,480 --> 00:16:39,600
you can't have to play with that a

00:16:37,709 --> 00:16:43,380
little bit more it's not there's not

00:16:39,600 --> 00:16:45,829
like a static set defined list of VM

00:16:43,380 --> 00:16:48,630
metadata that you're gonna have

00:16:45,829 --> 00:16:50,339
available to you but just just be aware

00:16:48,630 --> 00:16:54,620
that you can use that instance metadata

00:16:50,339 --> 00:16:54,620
as variables that cloud net

00:16:55,670 --> 00:17:00,920
so user data formats so I'm watching a

00:16:58,520 --> 00:17:02,810
p.m. and I want to provide this custom

00:17:00,920 --> 00:17:05,660
user data but what kind of data can

00:17:02,810 --> 00:17:07,699
actually provide and what can it do so

00:17:05,660 --> 00:17:09,260
the most basic thing is if you just take

00:17:07,699 --> 00:17:12,410
a shell script and you pass a shell

00:17:09,260 --> 00:17:16,189
script as user data cloud and it will

00:17:12,410 --> 00:17:17,540
run it and so you can you know that's

00:17:16,189 --> 00:17:21,470
pretty powerful you can do a lot of

00:17:17,540 --> 00:17:24,709
things just with a shell script you can

00:17:21,470 --> 00:17:27,589
also provide include files which are

00:17:24,709 --> 00:17:30,590
actually files containing URLs to other

00:17:27,589 --> 00:17:33,200
user data files so you can do all sorts

00:17:30,590 --> 00:17:35,750
of interesting things here like you can

00:17:33,200 --> 00:17:37,910
have static snippets of user data to do

00:17:35,750 --> 00:17:40,280
various things and you can post them out

00:17:37,910 --> 00:17:42,380
on a web server and then you could

00:17:40,280 --> 00:17:44,930
actually provide just an include file

00:17:42,380 --> 00:17:46,430
and say I want to use this PC user data

00:17:44,930 --> 00:17:48,890
and this one in this one you can kind of

00:17:46,430 --> 00:17:52,220
combine a bunch of pre-baked pieces of

00:17:48,890 --> 00:17:54,350
user data to your your VM and kind of

00:17:52,220 --> 00:17:58,480
mix and match so that's really flex of

00:17:54,350 --> 00:18:02,380
flexible you can also add an upstart job

00:17:58,480 --> 00:18:05,720
placed in so it's just a like a system

00:18:02,380 --> 00:18:11,240
startup script it'll be placed to Nazi

00:18:05,720 --> 00:18:13,940
in it now you can pass boot data which

00:18:11,240 --> 00:18:16,400
is basically a special script that's put

00:18:13,940 --> 00:18:22,490
in the Bartlet cloud directory and

00:18:16,400 --> 00:18:25,190
executes it you can put in what's called

00:18:22,490 --> 00:18:26,810
a Park handler which is Python and it

00:18:25,190 --> 00:18:29,210
will you can actually write some Python

00:18:26,810 --> 00:18:32,060
code it will override what a normal what

00:18:29,210 --> 00:18:33,980
the module would do or you can write a

00:18:32,060 --> 00:18:38,330
new module and provide that dynamically

00:18:33,980 --> 00:18:40,220
through the part handler most of what

00:18:38,330 --> 00:18:42,740
I'm going to go over and a lot of what

00:18:40,220 --> 00:18:46,390
most people it uses what's called cloud

00:18:42,740 --> 00:18:50,179
config which is a special llamó format

00:18:46,390 --> 00:18:51,920
and that's what I was talking about with

00:18:50,179 --> 00:18:53,690
with cloud config data you can actually

00:18:51,920 --> 00:18:57,500
provide yamo to the individual modules

00:18:53,690 --> 00:19:01,640
and you can override the SE cloud cloud

00:18:57,500 --> 00:19:04,600
CFG file as well or if you want to you

00:19:01,640 --> 00:19:06,309
can create a my multi-part archive

00:19:04,600 --> 00:19:08,799
and with that you can take any of these

00:19:06,309 --> 00:19:14,139
and/or all of them and put them into a

00:19:08,799 --> 00:19:16,139
single user data and pass that so there

00:19:14,139 --> 00:19:19,659
are all sorts of things you can do

00:19:16,139 --> 00:19:22,450
provide mix-and-match I'm gonna focus

00:19:19,659 --> 00:19:24,039
mostly on the cloud config I think other

00:19:22,450 --> 00:19:28,120
than that a lot of people use shell

00:19:24,039 --> 00:19:29,830
scripts and a lot of these other things

00:19:28,120 --> 00:19:31,000
I didn't even know existed until I

00:19:29,830 --> 00:19:34,299
started to put together this

00:19:31,000 --> 00:19:35,740
presentation so especially like the mime

00:19:34,299 --> 00:19:38,080
multi-part that's really cool I think

00:19:35,740 --> 00:19:40,389
that you can it you can do - like a

00:19:38,080 --> 00:19:47,139
shell script and cloud config and pass

00:19:40,389 --> 00:19:49,000
them together for example so in order to

00:19:47,139 --> 00:19:51,429
get started you first have to install

00:19:49,000 --> 00:19:53,529
cloud again then you have to you

00:19:51,429 --> 00:19:57,779
probably want to at least customize Etsy

00:19:53,529 --> 00:20:01,360
cloud cloud CFG or review what is there

00:19:57,779 --> 00:20:04,809
then you want to create a template from

00:20:01,360 --> 00:20:08,350
that and then you want to deploy that

00:20:04,809 --> 00:20:12,279
template with user data so that's the

00:20:08,350 --> 00:20:15,159
basic process installation is pretty

00:20:12,279 --> 00:20:22,690
simple most distributions will have

00:20:15,159 --> 00:20:24,580
cloud init packages available yeah you

00:20:22,690 --> 00:20:26,889
can so you can install it into a running

00:20:24,580 --> 00:20:29,580
one or you can add it to kickstart or

00:20:26,889 --> 00:20:32,950
something like that so it gets installed

00:20:29,580 --> 00:20:34,409
but usually from a repo so this is an

00:20:32,950 --> 00:20:37,539
example I know it's a little bit small

00:20:34,409 --> 00:20:41,500
this is an example of Etsy cloud on top

00:20:37,539 --> 00:20:45,700
C of G and I like this so this is the

00:20:41,500 --> 00:20:47,769
data source that I actually like this

00:20:45,700 --> 00:20:50,440
combination and I'll blow it up here in

00:20:47,769 --> 00:20:53,289
a minute this specific combination says

00:20:50,440 --> 00:20:55,629
first look for config drive then look

00:20:53,289 --> 00:20:58,480
for cloud stack and then assume that we

00:20:55,629 --> 00:21:01,269
don't have any easier there and so what

00:20:58,480 --> 00:21:03,399
that does is proving for the config

00:21:01,269 --> 00:21:05,139
drive data source is really fast it just

00:21:03,399 --> 00:21:09,240
loops to see the angel I have an ISO

00:21:05,139 --> 00:21:09,240
that's labeled with this with this

00:21:09,279 --> 00:21:14,080
this specific court format I don't

00:21:11,620 --> 00:21:17,260
remember what or it just has a label

00:21:14,080 --> 00:21:19,990
that looks port that's really fast and

00:21:17,260 --> 00:21:22,210
then it tries to resolve the classic

00:21:19,990 --> 00:21:23,470
virtual Robert and call out to that to

00:21:22,210 --> 00:21:25,539
see if there's you just use your unit

00:21:23,470 --> 00:21:29,470
and then it fails so this is kind of

00:21:25,539 --> 00:21:32,169
like a fail-safe like this would support

00:21:29,470 --> 00:21:36,840
any any data source the class types of

00:21:32,169 --> 00:21:40,659
words let's go through these one by one

00:21:36,840 --> 00:21:43,149
so talked about the data source now the

00:21:40,659 --> 00:21:45,010
network can fake again this is so as

00:21:43,149 --> 00:21:49,210
we're booting up this would be the cloud

00:21:45,010 --> 00:21:50,890
in it local service kicks off and it

00:21:49,210 --> 00:21:54,630
would it would do our networking config

00:21:50,890 --> 00:21:57,669
so you can actually pass like it if you

00:21:54,630 --> 00:21:59,289
wanted like a certain DNS server or

00:21:57,669 --> 00:22:01,559
something like that you can pass

00:21:59,289 --> 00:22:05,140
customize network configuration here

00:22:01,559 --> 00:22:06,610
disable just means doesn't necessarily

00:22:05,140 --> 00:22:08,649
mean that networking is going to be

00:22:06,610 --> 00:22:10,299
disabled it just means the cloud in it

00:22:08,649 --> 00:22:12,429
is no I'm not going to try to configure

00:22:10,299 --> 00:22:16,210
your networking so if your VM template

00:22:12,429 --> 00:22:22,000
already has DHCP setup it's just going

00:22:16,210 --> 00:22:23,470
to use DHCP then there's this section so

00:22:22,000 --> 00:22:26,770
this corresponds with the actual

00:22:23,470 --> 00:22:29,799
clavinet systemctl service and you can

00:22:26,770 --> 00:22:31,539
see your so well I don't know if you can

00:22:29,799 --> 00:22:33,940
see it because you have to pretty small

00:22:31,539 --> 00:22:36,789
but this section here it says cloud

00:22:33,940 --> 00:22:38,830
admit modules and we're defining all of

00:22:36,789 --> 00:22:40,899
the individual modules that are going to

00:22:38,830 --> 00:22:44,320
run or when the cloud managed service

00:22:40,899 --> 00:22:46,539
starts up and so you can see things like

00:22:44,320 --> 00:22:51,750
its current partition resizing

00:22:46,539 --> 00:22:54,720
filesystem setting those sending up SSH

00:22:51,750 --> 00:22:58,539
adding users and groups

00:22:54,720 --> 00:23:01,599
that's a sampling of what you would get

00:22:58,539 --> 00:23:02,949
and then when the cloud config service

00:23:01,599 --> 00:23:07,629
kicks off it's going to run these

00:23:02,949 --> 00:23:10,719
modules and here I have things like disc

00:23:07,629 --> 00:23:15,940
Senate I want to add new mounts

00:23:10,719 --> 00:23:20,289
I can run user scripts reset my ssh

00:23:15,940 --> 00:23:22,839
authentication keys things like that and

00:23:20,289 --> 00:23:24,969
the config so if you write a new module

00:23:22,839 --> 00:23:27,549
you can see here you can put it in a

00:23:24,969 --> 00:23:29,709
specific stage of cloud in that so to

00:23:27,549 --> 00:23:32,889
speak or you can take the existing ones

00:23:29,709 --> 00:23:34,719
and rearrange them how resi fed and

00:23:32,889 --> 00:23:42,339
they're actually going to run in the

00:23:34,719 --> 00:23:45,999
order daysy here one thing to keep in

00:23:42,339 --> 00:23:49,539
mind let's see look let me finish

00:23:45,999 --> 00:23:51,999
covering this so no Don overrides as I

00:23:49,539 --> 00:23:55,329
mentioned earlier there's gonna be a

00:23:51,999 --> 00:23:57,729
default they're gonna be defaults baked

00:23:55,329 --> 00:24:00,249
in the cloud in it natively and then NT

00:23:57,729 --> 00:24:05,789
cloud cloud CFG just kind of like the

00:24:00,249 --> 00:24:09,699
distribution specific overrides and then

00:24:05,789 --> 00:24:11,739
and above that you have the actual user

00:24:09,699 --> 00:24:14,009
data that would override your cloud see

00:24:11,739 --> 00:24:15,999
if Jade and the configs are merged

00:24:14,009 --> 00:24:18,639
they're not read they're not totally

00:24:15,999 --> 00:24:21,129
replaced so if you have things in cloud

00:24:18,639 --> 00:24:23,440
CFG but you didn't put them in your

00:24:21,129 --> 00:24:27,269
customized stuff it's not gonna just

00:24:23,440 --> 00:24:27,269
disappear like it lays it over the top

00:24:29,459 --> 00:24:34,149
we talked about defining modules for a

00:24:32,199 --> 00:24:38,229
stage so one thing that's interesting to

00:24:34,149 --> 00:24:41,379
note there is I have my cloud init

00:24:38,229 --> 00:24:45,369
modules staged and running these

00:24:41,379 --> 00:24:48,129
individual modules in the cloud service

00:24:45,369 --> 00:24:51,190
when it starts up here I've defined

00:24:48,129 --> 00:24:53,499
though if you recall I said that each

00:24:51,190 --> 00:24:54,969
module has a frequency if you look in

00:24:53,499 --> 00:24:57,219
the documentation there's default

00:24:54,969 --> 00:25:00,039
frequency and it will say this only runs

00:24:57,219 --> 00:25:03,039
once or runs per instance or it runs

00:25:00,039 --> 00:25:06,369
always you can actually over override

00:25:03,039 --> 00:25:09,160
that so you can say like the write files

00:25:06,369 --> 00:25:11,410
usually only runs

00:25:09,160 --> 00:25:13,660
I think once if you wanted to do that

00:25:11,410 --> 00:25:15,790
every single time the system boots you

00:25:13,660 --> 00:25:19,090
can change the frequency to always using

00:25:15,790 --> 00:25:24,100
this syntax and then it will always run

00:25:19,090 --> 00:25:27,340
you can over in the module frequency and

00:25:24,100 --> 00:25:29,140
I mentioned there write an order some

00:25:27,340 --> 00:25:34,150
modules do actually depend on other

00:25:29,140 --> 00:25:36,300
modules and so you need to make sure to

00:25:34,150 --> 00:25:41,320
include them both in the right order

00:25:36,300 --> 00:25:42,490
which is kind of interesting but so I

00:25:41,320 --> 00:25:43,180
talked a little bit about module

00:25:42,490 --> 00:25:48,090
frequency

00:25:43,180 --> 00:25:51,250
so there's once once per instance which

00:25:48,090 --> 00:25:52,980
anytime the VM UUID changes so anytime

00:25:51,250 --> 00:25:56,590
you take that template in your cloning

00:25:52,980 --> 00:25:59,770
it's going to run that again

00:25:56,590 --> 00:26:01,180
and then always runs every routes and as

00:25:59,770 --> 00:26:04,810
I mentioned modules have a default

00:26:01,180 --> 00:26:07,030
frequency so here are some examples of

00:26:04,810 --> 00:26:10,620
some module specific configuration and

00:26:07,030 --> 00:26:14,140
this would go into user data for example

00:26:10,620 --> 00:26:16,960
your cloud config user data so let's say

00:26:14,140 --> 00:26:20,050
I actually run a certain command when

00:26:16,960 --> 00:26:26,500
the VM comes up so I'm used to run CMD

00:26:20,050 --> 00:26:31,360
module and I can say so here I have LS -

00:26:26,500 --> 00:26:32,920
lash or I want to echo the date or any

00:26:31,360 --> 00:26:34,240
batch script or command that you would

00:26:32,920 --> 00:26:39,130
run on command line you can actually

00:26:34,240 --> 00:26:41,050
serve on CMD module and run that so if

00:26:39,130 --> 00:26:43,000
you want to if you wanted to manually

00:26:41,050 --> 00:26:45,430
format a file system for example instead

00:26:43,000 --> 00:26:50,170
of using the actual processor module you

00:26:45,430 --> 00:26:52,690
can put it into a run Sanji so that's

00:26:50,170 --> 00:26:55,630
that's kind of like a catch-all you can

00:26:52,690 --> 00:26:57,970
also just use the script I think it's a

00:26:55,630 --> 00:27:02,860
job - there's another example with the

00:26:57,970 --> 00:27:05,200
real part module you can set a mode you

00:27:02,860 --> 00:27:07,300
can set which devices and you can refer

00:27:05,200 --> 00:27:09,970
to it by actual the path where it's

00:27:07,300 --> 00:27:12,600
mounted or you can refer to it by the

00:27:09,970 --> 00:27:12,600
device ID

00:27:13,200 --> 00:27:18,070
instead of that module I think allows

00:27:16,330 --> 00:27:20,830
you to just kind of consume whatever

00:27:18,070 --> 00:27:23,260
spaces so if you imagined that you have

00:27:20,830 --> 00:27:25,150
a distance recent that's if you have a

00:27:23,260 --> 00:27:26,980
template that say ten gigs and you

00:27:25,150 --> 00:27:30,250
resize the root partition there 20 gigs

00:27:26,980 --> 00:27:32,590
or something like that before you

00:27:30,250 --> 00:27:33,910
started then this would actually make

00:27:32,590 --> 00:27:37,660
the partition fill up the rest of the

00:27:33,910 --> 00:27:40,120
space you can also have young reboots

00:27:37,660 --> 00:27:42,940
for example if you want to add extra

00:27:40,120 --> 00:27:46,540
repos improve the end you can define

00:27:42,940 --> 00:27:50,650
there so those are just some examples of

00:27:46,540 --> 00:27:52,930
like module specific configuration every

00:27:50,650 --> 00:27:55,330
module is gonna have its own you know

00:27:52,930 --> 00:27:56,710
its own some configuration can make

00:27:55,330 --> 00:28:01,210
comments about my own experience with

00:27:56,710 --> 00:28:02,560
your own tomorrow but I can tell you

00:28:01,210 --> 00:28:04,570
there when it runs through the whole

00:28:02,560 --> 00:28:25,090
system from user data through the module

00:28:04,570 --> 00:28:27,250
all the way to execution the shell

00:28:25,090 --> 00:28:30,430
script is that propagated through the

00:28:27,250 --> 00:28:34,710
service etc so you'll be careful

00:28:30,430 --> 00:28:34,710
depending what your expectations are

00:28:35,760 --> 00:28:40,680
yeah and that's that's a good point is

00:28:38,050 --> 00:28:43,300
that while clavinet is is a framework

00:28:40,680 --> 00:28:45,610
each of the modules are kind of

00:28:43,300 --> 00:28:50,730
independently maintained and over are of

00:28:45,610 --> 00:28:54,790
varying quality and behavior so you know

00:28:50,730 --> 00:28:56,500
they don't all adhere to the same you

00:28:54,790 --> 00:28:59,200
know the same standards and that's kind

00:28:56,500 --> 00:29:03,370
of that kind of Shoni or where each one

00:28:59,200 --> 00:29:05,380
has its own configuration and if you

00:29:03,370 --> 00:29:07,600
don't like the behavior of one you can

00:29:05,380 --> 00:29:09,640
do a different things so like maybe you

00:29:07,600 --> 00:29:11,200
don't like how run CMD works but maybe

00:29:09,640 --> 00:29:13,320
you can provide that bash script in a

00:29:11,200 --> 00:29:16,660
multi-part I like we talked about

00:29:13,320 --> 00:29:18,310
earlier or you can do you can use the

00:29:16,660 --> 00:29:21,130
write files and you can write out a bash

00:29:18,310 --> 00:29:23,170
script to a certain location and so if

00:29:21,130 --> 00:29:26,260
the file is there and you can run that

00:29:23,170 --> 00:29:27,790
separately so there all sorts of ways to

00:29:26,260 --> 00:29:31,059
to get done what you need to get down to

00:29:27,790 --> 00:29:45,309
the VM let's talk a little bit about

00:29:31,059 --> 00:29:48,490
cloud in it yeah yeah so it's yeah you

00:29:45,309 --> 00:29:50,770
it doesn't necessarily retry so there

00:29:48,490 --> 00:29:53,740
are certain configuration systems that

00:29:50,770 --> 00:29:55,419
you specify the desired state and it

00:29:53,740 --> 00:29:58,360
keeps trying to get to that state until

00:29:55,419 --> 00:30:03,460
it gets there cloud a min is kind of

00:29:58,360 --> 00:30:07,780
like a one-shot thing yeah yeah you're

00:30:03,460 --> 00:30:19,480
right yeah the module itself could to

00:30:07,780 --> 00:30:22,059
try to heal and fix itself all right so

00:30:19,480 --> 00:30:23,500
cloud swag data sources they're

00:30:22,059 --> 00:30:24,880
configuring they're configured at the

00:30:23,500 --> 00:30:28,390
network offering level and I think

00:30:24,880 --> 00:30:33,309
that's because historically it's been

00:30:28,390 --> 00:30:34,630
like a never provided service so you

00:30:33,309 --> 00:30:36,760
can't really see a year but if you were

00:30:34,630 --> 00:30:38,710
to go and add a network offering other

00:30:36,760 --> 00:30:41,290
supportive services you could check user

00:30:38,710 --> 00:30:42,130
data and then you could say where that's

00:30:41,290 --> 00:30:45,340
coming from

00:30:42,130 --> 00:30:47,590
so there's virtual router config drive V

00:30:45,340 --> 00:30:50,919
PC virtual router and then there's this

00:30:47,590 --> 00:30:52,179
very metal user data provider which i

00:30:50,919 --> 00:30:55,990
think is a part of the metal as a

00:30:52,179 --> 00:30:58,080
service at the canonical put together I

00:30:55,990 --> 00:31:02,200
don't know a whole lot about that piece

00:30:58,080 --> 00:31:04,600
but I can tell you that the the virtual

00:31:02,200 --> 00:31:09,220
router V PC virtual router are actually

00:31:04,600 --> 00:31:13,510
a web HTTP web endpoint that the virtual

00:31:09,220 --> 00:31:19,720
router hosts and I think he uses I think

00:31:13,510 --> 00:31:23,590
it uses what's that called well uses it

00:31:19,720 --> 00:31:27,450
yeah it uses Apache but there's the path

00:31:23,590 --> 00:31:32,140
I think he uses was like htaccess files

00:31:27,450 --> 00:31:33,910
to to make sure that only certain VMs

00:31:32,140 --> 00:31:36,080
have access to certain user data and

00:31:33,910 --> 00:31:38,820
metadata

00:31:36,080 --> 00:31:41,070
and then of course we mention config

00:31:38,820 --> 00:31:42,059
drive uses an ISO and I think that

00:31:41,070 --> 00:31:44,429
someone mentioned there's some

00:31:42,059 --> 00:31:46,799
limitations around that like yeah you

00:31:44,429 --> 00:31:49,049
have to be using so it'll store the ISO

00:31:46,799 --> 00:31:51,120
on secondary storage and that's for

00:31:49,049 --> 00:31:53,100
compatibility with the VMware you can

00:31:51,120 --> 00:31:56,070
also there's a global config to say put

00:31:53,100 --> 00:31:57,600
my config drive on primary storage but I

00:31:56,070 --> 00:32:00,750
think that only works currently for

00:31:57,600 --> 00:32:04,020
filesystem based primary storage so like

00:32:00,750 --> 00:32:05,520
block devices it doesn't work with not

00:32:04,020 --> 00:32:07,320
to get off on a tangent but I think it

00:32:05,520 --> 00:32:10,140
would be at least 4 KB em I think it

00:32:07,320 --> 00:32:12,630
would be nice to specify like a like a

00:32:10,140 --> 00:32:15,000
scratched base directory the dejan can

00:32:12,630 --> 00:32:17,280
use or something like that so you could

00:32:15,000 --> 00:32:20,010
you could do because the user do is

00:32:17,280 --> 00:32:22,320
usually very very tiny but it would be

00:32:20,010 --> 00:32:23,570
nice to be storage system agnostic and

00:32:22,320 --> 00:32:27,720
still be able to provide some of this

00:32:23,570 --> 00:32:33,929
stuff that's ultimately just tiny

00:32:27,720 --> 00:32:37,500
metadata so I've already covered most of

00:32:33,929 --> 00:32:41,220
this ultimately to the data source just

00:32:37,500 --> 00:32:46,580
curls just doesn't curl but it makes me

00:32:41,220 --> 00:32:54,539
HTTP GET to the latest slash user data

00:32:46,580 --> 00:32:57,450
to fetch it's a it's user data and I

00:32:54,539 --> 00:32:59,159
think this is this is available like any

00:32:57,450 --> 00:33:01,830
recent cloud and it will have the cloud

00:32:59,159 --> 00:33:03,630
stack data source built into it I think

00:33:01,830 --> 00:33:05,010
two or three years ago there was kind of

00:33:03,630 --> 00:33:07,470
a question as to whether or not it would

00:33:05,010 --> 00:33:11,280
work but I think today pretty much any

00:33:07,470 --> 00:33:19,289
distributions gonna have a recent cloud

00:33:11,280 --> 00:33:24,809
stack data source driver config drive is

00:33:19,289 --> 00:33:26,309
config drive v2 format like I mentioned

00:33:24,809 --> 00:33:27,870
you can actually set it to host on the

00:33:26,309 --> 00:33:31,650
secondary storage around the primary

00:33:27,870 --> 00:33:34,380
storage and you can use the config drive

00:33:31,650 --> 00:33:36,390
to do network customization so add like

00:33:34,380 --> 00:33:38,720
DNS servers and things like that if you

00:33:36,390 --> 00:33:38,720
need to

00:33:40,190 --> 00:33:45,390
so this is what I showed earlier so this

00:33:43,620 --> 00:33:49,110
is the data source configuration that I

00:33:45,390 --> 00:33:50,790
would personally use in cloud CFG to

00:33:49,110 --> 00:33:52,740
work with cloud stack to be the most

00:33:50,790 --> 00:33:54,660
compatible and that gives you the

00:33:52,740 --> 00:33:57,780
freedom to use config drive or the

00:33:54,660 --> 00:34:03,690
virtual router as data sources and it

00:33:57,780 --> 00:34:05,850
will just find which one works so as far

00:34:03,690 --> 00:34:07,110
as providing user data if we go all the

00:34:05,850 --> 00:34:09,780
way back to beginning we talked about

00:34:07,110 --> 00:34:12,929
how the user is interfacing with some

00:34:09,780 --> 00:34:15,260
sort of cloud service and in this

00:34:12,929 --> 00:34:17,909
example I have the cloud stack API

00:34:15,260 --> 00:34:19,409
deployed virtual machine user data

00:34:17,909 --> 00:34:22,560
equals and then we give it

00:34:19,409 --> 00:34:25,020
base64-encoded user data so if you have

00:34:22,560 --> 00:34:27,600
your Yama file your cloud or your bash

00:34:25,020 --> 00:34:29,639
script or whatever it is you can use

00:34:27,600 --> 00:34:30,120
something like that so you do cap use

00:34:29,639 --> 00:34:34,830
your data

00:34:30,120 --> 00:34:36,300
gzip base64 it and then that that's the

00:34:34,830 --> 00:34:39,960
dream that's left is what you can pass

00:34:36,300 --> 00:34:42,200
in user data cloud stack has a 32

00:34:39,960 --> 00:34:45,990
kilobyte limit on HTTP POST

00:34:42,200 --> 00:34:49,429
I don't recall if that was the clouds -

00:34:45,990 --> 00:34:51,720
clouds back specific limit or if that's

00:34:49,429 --> 00:34:56,250
something more fundamental I don't

00:34:51,720 --> 00:34:58,800
recall you can also update so update

00:34:56,250 --> 00:35:01,440
virtual machine would be 5 an existing

00:34:58,800 --> 00:35:03,420
VM and I want to update its cloud net

00:35:01,440 --> 00:35:05,580
data so this would go back to those

00:35:03,420 --> 00:35:08,130
modules that will run always on every

00:35:05,580 --> 00:35:10,500
boot for example you can give new user

00:35:08,130 --> 00:35:11,970
data a new configuration and then you

00:35:10,500 --> 00:35:14,550
can restart the service or you can

00:35:11,970 --> 00:35:21,060
restart the VM and it will reconfigure

00:35:14,550 --> 00:35:24,210
the VM to whatever you change well as

00:35:21,060 --> 00:35:26,310
the service has to restart somehow so

00:35:24,210 --> 00:35:28,680
you can restart the VM or if you have

00:35:26,310 --> 00:35:31,980
some way to orchestrate restart of the

00:35:28,680 --> 00:35:33,420
cloud remit services inside the VM then

00:35:31,980 --> 00:35:36,270
it would pick it up but basically you

00:35:33,420 --> 00:35:40,230
need to tell it to go pick up and rerun

00:35:36,270 --> 00:35:42,990
through the process so it's definitely

00:35:40,230 --> 00:35:44,340
it's not a replacement for like puppet

00:35:42,990 --> 00:35:47,220
or ansible or something that would

00:35:44,340 --> 00:35:49,320
maintain the life cycle of the VM it's

00:35:47,220 --> 00:35:51,109
really just that initial customization I

00:35:49,320 --> 00:35:53,509
want to change I want to

00:35:51,109 --> 00:35:55,519
you know change how my filesystems laid

00:35:53,509 --> 00:35:58,609
out or add users or something like that

00:35:55,519 --> 00:36:01,670
set up LDAP you know whatever the

00:35:58,609 --> 00:36:03,499
initial bootstrapping is one of the

00:36:01,670 --> 00:36:05,359
things that that people do with user

00:36:03,499 --> 00:36:07,369
data for example is they would set up

00:36:05,359 --> 00:36:10,400
the initial keys or the initial access

00:36:07,369 --> 00:36:12,650
that their puppet or you know their

00:36:10,400 --> 00:36:14,420
other configuration system would use and

00:36:12,650 --> 00:36:19,880
then once they have that then they can

00:36:14,420 --> 00:36:23,420
they can maintain the system here's an

00:36:19,880 --> 00:36:27,769
example of cloud config data they could

00:36:23,420 --> 00:36:30,049
actually be used to partition a data

00:36:27,769 --> 00:36:32,450
disk sort of a file system on it and

00:36:30,049 --> 00:36:34,539
then mount those so what I'm doing here

00:36:32,450 --> 00:36:37,729
is I'm saying

00:36:34,539 --> 00:36:39,589
bbbb and you can there are different

00:36:37,729 --> 00:36:42,140
ways that you can refer to advices I

00:36:39,589 --> 00:36:46,130
just chose this example to use the

00:36:42,140 --> 00:36:52,459
actual device that I'm saying that I

00:36:46,130 --> 00:36:56,390
want a GPT partition and I wanted 33c oh

00:36:52,459 --> 00:37:02,239
yeah so I want 33% of that disk should

00:36:56,390 --> 00:37:06,529
be a Linux partition so 82 is the Linux

00:37:02,239 --> 00:37:08,449
device the 1x partition for mine so I

00:37:06,529 --> 00:37:10,789
think 83 is a swap device and things

00:37:08,449 --> 00:37:15,559
like that you don't have to specify the

00:37:10,789 --> 00:37:17,839
actual partition type but I want 33% to

00:37:15,559 --> 00:37:20,869
be this petition type and I want the

00:37:17,839 --> 00:37:24,109
remaining 67% to be separate and so I've

00:37:20,869 --> 00:37:27,949
got two partitions here I set up the

00:37:24,109 --> 00:37:32,569
first swap so 82 is slow and the

00:37:27,949 --> 00:37:36,019
second one I'm gonna set it as ext4 and

00:37:32,569 --> 00:37:38,569
then I'm going to mount my first

00:37:36,019 --> 00:37:40,910
partition because swap I'm gonna mount

00:37:38,569 --> 00:37:42,949
my second one and slash data you not

00:37:40,910 --> 00:37:44,509
have to see how that how that works and

00:37:42,949 --> 00:37:47,029
this is actually relying on three

00:37:44,509 --> 00:37:48,709
separate modules inside cloud of it so

00:37:47,029 --> 00:37:52,190
if I wanted to I could do the distance

00:37:48,709 --> 00:37:54,170
setup and like the cloud emit service

00:37:52,190 --> 00:37:57,589
and I can do the FS set up in the mounts

00:37:54,170 --> 00:37:59,650
and the cloud config service if I wanted

00:37:57,589 --> 00:37:59,650
to

00:38:03,760 --> 00:38:08,329
it just doesn't just Walter just yeah so

00:38:06,500 --> 00:38:10,369
you would you'd actually seen errors in

00:38:08,329 --> 00:38:11,990
the logs and clavinet but there's no

00:38:10,369 --> 00:38:15,290
like there's no user feedback like

00:38:11,990 --> 00:38:17,420
through CloudStack for sure yeah but you

00:38:15,290 --> 00:38:18,650
could you could log on to the system you

00:38:17,420 --> 00:38:22,780
can go look you're clouding their logs

00:38:18,650 --> 00:38:22,780
you can see see what the error is

00:38:24,430 --> 00:38:30,890
so there are a bunch of examples out

00:38:26,839 --> 00:38:34,810
there on the cloud on it website so it's

00:38:30,890 --> 00:38:37,430
just cloud or net read the docs dot io

00:38:34,810 --> 00:38:44,329
and there are a whole host of examples

00:38:37,430 --> 00:38:46,190
of things you can do some some things

00:38:44,329 --> 00:38:50,619
that have helped me when I'm actually

00:38:46,190 --> 00:38:53,180
developing so you can imagine like

00:38:50,619 --> 00:38:54,980
trying to develop the right cloud in it

00:38:53,180 --> 00:38:56,480
data can be a little bit time-consuming

00:38:54,980 --> 00:38:57,859
and you're kind of running through it

00:38:56,480 --> 00:39:00,319
over and over again and making sure that

00:38:57,859 --> 00:39:05,599
you have the the right syntax or

00:39:00,319 --> 00:39:06,770
whatever so when I'm doing that there

00:39:05,599 --> 00:39:09,740
are a couple things that are useful

00:39:06,770 --> 00:39:12,950
there's actually a cloud in it utility

00:39:09,740 --> 00:39:14,869
on the command line the first thing to

00:39:12,950 --> 00:39:19,220
do is to remember that you clear your

00:39:14,869 --> 00:39:21,260
data often because every time every time

00:39:19,220 --> 00:39:23,510
you actually run it if the module

00:39:21,260 --> 00:39:27,319
frequency is once or per instance

00:39:23,510 --> 00:39:29,630
there's actually a file the cloud net

00:39:27,319 --> 00:39:32,240
uses to keep track of whether or not

00:39:29,630 --> 00:39:33,859
that module is running before and so

00:39:32,240 --> 00:39:38,030
you'll end up in a situation where like

00:39:33,859 --> 00:39:40,040
you've changed your your your user data

00:39:38,030 --> 00:39:41,569
but it's not doing anything you're not

00:39:40,040 --> 00:39:43,339
seeing any changes in this because the

00:39:41,569 --> 00:39:46,760
module it knows that has already run

00:39:43,339 --> 00:39:50,900
once and so you can do cloud in it -

00:39:46,760 --> 00:39:54,619
clear - clear that out clubbin it in it

00:39:50,900 --> 00:39:56,690
will run the the cloud in its service or

00:39:54,619 --> 00:40:00,380
cloud in that stage and the local stage

00:39:56,690 --> 00:40:02,930
if you pass - our local cloud Annette

00:40:00,380 --> 00:40:06,440
modules will run the Annette config and

00:40:02,930 --> 00:40:07,630
final stages cloud in it clear will

00:40:06,440 --> 00:40:10,810
clear the

00:40:07,630 --> 00:40:12,640
right data I'm clouding it single you

00:40:10,810 --> 00:40:14,710
can actually target a single module and

00:40:12,640 --> 00:40:18,810
say I won't only want to run the disk

00:40:14,710 --> 00:40:21,910
part or the SSH module against my data

00:40:18,810 --> 00:40:24,730
I'm cloud in a query you can use to look

00:40:21,910 --> 00:40:27,280
up the individual metadata for the

00:40:24,730 --> 00:40:29,260
instance and then you can see which

00:40:27,280 --> 00:40:34,390
metadata is available in your

00:40:29,260 --> 00:40:38,080
environment cloud Annette analyse show

00:40:34,390 --> 00:40:40,360
is really good for showing you which

00:40:38,080 --> 00:40:42,160
modules actually ran and how long each

00:40:40,360 --> 00:40:44,170
module took so it's good for

00:40:42,160 --> 00:40:57,700
troubleshooting you can see that there's

00:40:44,170 --> 00:41:00,550
so this is staged in local and so it

00:40:57,700 --> 00:41:03,220
gives you timing you data and whether or

00:41:00,550 --> 00:41:04,920
not each one succeeded which is really

00:41:03,220 --> 00:41:08,099
handy for troubleshooting

00:41:04,920 --> 00:41:08,099
[Music]

00:41:09,840 --> 00:41:17,050
so as yeah as you're developing your

00:41:13,600 --> 00:41:19,540
cloud in that yellow yeah you can you

00:41:17,050 --> 00:41:23,020
can see this data by running it against

00:41:19,540 --> 00:41:26,520
the user data that you have you can also

00:41:23,020 --> 00:41:30,390
see you can see some data in your

00:41:26,520 --> 00:41:32,650
there's a var log cloud cloud in it log

00:41:30,390 --> 00:41:35,680
that has like everything that ran

00:41:32,650 --> 00:41:37,180
through but it's not quite as detailed

00:41:35,680 --> 00:41:39,340
as this so it doesn't give you like the

00:41:37,180 --> 00:41:41,920
metrics and stuff if you want to see

00:41:39,340 --> 00:41:45,820
like what's taking so long or why didn't

00:41:41,920 --> 00:41:48,340
this work or you can see it says you

00:41:45,820 --> 00:41:50,950
can't see found network data from data

00:41:48,340 --> 00:41:52,960
source cloud stack for example so I want

00:41:50,950 --> 00:41:54,370
to audit and see which data sources is

00:41:52,960 --> 00:41:56,650
actually picking up and how long it

00:41:54,370 --> 00:41:59,200
takes to find the data sources you can

00:41:56,650 --> 00:42:05,320
do that with this cloud in it analyze

00:41:59,200 --> 00:42:07,330
show semaphores as I talked about

00:42:05,320 --> 00:42:10,030
earlier semaphores are the way in the

00:42:07,330 --> 00:42:13,000
cloud Annette determines if a module is

00:42:10,030 --> 00:42:17,020
already run and when at last ran so

00:42:13,000 --> 00:42:20,549
environment cloud instance Sam and bar

00:42:17,020 --> 00:42:23,609
lip cloud Sam you'll see a file the

00:42:20,549 --> 00:42:26,969
named the stage underscore module name

00:42:23,609 --> 00:42:29,009
dot frequency and so if you find them

00:42:26,969 --> 00:42:31,289
for whatever reason you're not able to

00:42:29,009 --> 00:42:33,119
trigger a module you can go into the

00:42:31,289 --> 00:42:34,559
semaphores meters you can see if that

00:42:33,119 --> 00:42:36,989
semaphore is there because it may be

00:42:34,559 --> 00:42:42,900
locking you out of actually executing

00:42:36,989 --> 00:42:45,569
another module all right so that's

00:42:42,900 --> 00:42:48,269
really all I have and I've looks like

00:42:45,569 --> 00:42:50,670
I'm just about out of time so do you

00:42:48,269 --> 00:42:52,670
have any questions I was kind of a slug

00:42:50,670 --> 00:43:27,329
just trying to like describe all this

00:42:52,670 --> 00:43:29,789
detail stuff yeah I think I think in

00:43:27,329 --> 00:43:31,739
general I can't speak for obviously for

00:43:29,789 --> 00:43:33,779
all the hypervisors but I think there

00:43:31,739 --> 00:43:37,289
are a whole bunch of things that could

00:43:33,779 --> 00:43:41,400
be solved by providing in the cloud spec

00:43:37,289 --> 00:43:43,529
agent a scratch space to do things like

00:43:41,400 --> 00:43:44,699
this so I think I can't think of

00:43:43,529 --> 00:43:46,229
anything on top of my head right now but

00:43:44,699 --> 00:43:48,239
ain't there are other instances as well

00:43:46,229 --> 00:43:50,099
where I was thinking well there were

00:43:48,239 --> 00:43:52,619
just some scratch space where a good

00:43:50,099 --> 00:43:56,549
temporarily or you know host some small

00:43:52,619 --> 00:44:02,339
bit of data so that would be that would

00:43:56,549 --> 00:44:05,009
be really helpful yeah yeah just some

00:44:02,339 --> 00:44:06,839
some temporary space that we don't we

00:44:05,009 --> 00:44:08,729
don't really need to because if you

00:44:06,839 --> 00:44:10,140
think about it with primary storage you

00:44:08,729 --> 00:44:13,319
really want to create like a whole block

00:44:10,140 --> 00:44:15,959
device to those 10k or so data or

00:44:13,319 --> 00:44:20,729
something like that you know so in order

00:44:15,959 --> 00:44:22,709
to have overcome the issues around not

00:44:20,729 --> 00:44:24,689
necessarily wanting to mount NFS

00:44:22,709 --> 00:44:28,619
everywhere for secondary storage just as

00:44:24,689 --> 00:44:30,539
metadata not necessarily wanting to have

00:44:28,619 --> 00:44:31,940
to create block devices on primary

00:44:30,539 --> 00:44:33,950
storage just toast made

00:44:31,940 --> 00:44:36,890
it makes sense seven counts and

00:44:33,950 --> 00:44:38,839
freshness I have questioned them so just

00:44:36,890 --> 00:44:42,349
thinking natively in CloudStack is there

00:44:38,839 --> 00:44:45,470
a integration point to the poem this is

00:44:42,349 --> 00:44:51,069
something that could be relevant if a

00:44:45,470 --> 00:44:53,750
stacking phone oh yeah I mean possibly

00:44:51,069 --> 00:44:56,440
you know there's I don't really any

00:44:53,750 --> 00:44:58,880
interfaces for cloud stack to tell you

00:44:56,440 --> 00:45:00,829
whether or not the user data succeeded

00:44:58,880 --> 00:45:04,280
for a VM but I could conceive of

00:45:00,829 --> 00:45:05,809
something similar to that you know where

00:45:04,280 --> 00:45:08,030
I didn't want to know that my cloud of

00:45:05,809 --> 00:45:10,130
my BM through the API that might be it

00:45:08,030 --> 00:45:16,760
was really running until I knew the

00:45:10,130 --> 00:45:18,309
cabinet completed yeah maybe would take

00:45:16,760 --> 00:45:20,990
yeah something to think about for sure

00:45:18,309 --> 00:45:23,720
it would take some design work to kind

00:45:20,990 --> 00:45:26,000
of understand how it actually does the

00:45:23,720 --> 00:45:27,710
phone if it's a web URL to the

00:45:26,000 --> 00:45:30,380
management server whether it's talking

00:45:27,710 --> 00:45:33,170
back to the router VM whether you know

00:45:30,380 --> 00:45:37,279
or some other means but definitely that

00:45:33,170 --> 00:45:39,660
that would be an interesting thing all

00:45:37,279 --> 00:45:44,820
right thanks guys

00:45:39,660 --> 00:45:44,820

YouTube URL: https://www.youtube.com/watch?v=7biaqn-VUOg


