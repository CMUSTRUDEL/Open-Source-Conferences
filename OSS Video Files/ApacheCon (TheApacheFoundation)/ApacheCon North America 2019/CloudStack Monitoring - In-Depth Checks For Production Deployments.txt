Title: CloudStack Monitoring - In-Depth Checks For Production Deployments
Publication date: 2019-09-20
Playlist: ApacheCon North America 2019
Description: 
	This talk is for CloudStack administrators who're responsible for maintaining a robust and fault-free production deployment. It covers monitoring fine grained parameters of a CloudStack installation and how to measure and check not just discrete values but also routinely performed actions against their expected outcome. It also dwells upon how the same discrete values make a difference from an access perspective. Whether you want to auto-resolve common problems, provide an SLA or just keep a tab on your deployment, this talk will definitely provide some insights.
Captions: 
	00:00:04,580 --> 00:00:14,389
so can let's start so my name is Shiv

00:00:08,930 --> 00:00:17,840
I'm the CTO of a start-up in Delhi from

00:00:14,389 --> 00:00:23,540
India called indicus and we started off

00:00:17,840 --> 00:00:31,220
in 2013 and my CloudStack journey has

00:00:23,540 --> 00:00:35,809
been more or less from 2013 only so I'm

00:00:31,220 --> 00:00:37,610
going to talk about monitoring and how

00:00:35,809 --> 00:00:40,070
you know what are the nuances and

00:00:37,610 --> 00:00:42,050
whatever you can monitor or not

00:00:40,070 --> 00:00:44,930
CloudStack implementation but just a

00:00:42,050 --> 00:00:47,840
brief about my CloudStack journey so

00:00:44,930 --> 00:00:51,590
I'll give you a background so I'm I was

00:00:47,840 --> 00:00:54,500
primarily a C and Perl guy software

00:00:51,590 --> 00:00:57,530
developer all these years and from 2013

00:00:54,500 --> 00:01:01,399
when we started with this whole concept

00:00:57,530 --> 00:01:02,719
was introduced to me the cloud and had

00:01:01,399 --> 00:01:07,280
dabbled about a little bit in

00:01:02,719 --> 00:01:13,060
virtualization but not much so man when

00:01:07,280 --> 00:01:17,630
I saw it I said what am I getting - but

00:01:13,060 --> 00:01:20,299
over time after you know spending a lot

00:01:17,630 --> 00:01:21,109
of time there I realized that yes cloud

00:01:20,299 --> 00:01:25,969
stack works

00:01:21,109 --> 00:01:29,359
it was quite intriguing for me and six

00:01:25,969 --> 00:01:33,109
years down the line we can call

00:01:29,359 --> 00:01:35,929
ourselves as a power user and we don't

00:01:33,109 --> 00:01:38,630
know a lot of things not on the dev side

00:01:35,929 --> 00:01:42,670
per se but on the admin side of clouds

00:01:38,630 --> 00:01:46,779
that we do a lot of interesting things

00:01:42,670 --> 00:01:49,009
so what I'm going to talk about is

00:01:46,779 --> 00:01:52,479
primarily on the monitoring aspects of

00:01:49,009 --> 00:01:57,770
cloud stack based on my experiences and

00:01:52,479 --> 00:02:01,249
I've tried to keep the content generic

00:01:57,770 --> 00:02:04,909
and not specific to any particular you

00:02:01,249 --> 00:02:07,849
know monitoring a monitoring software

00:02:04,909 --> 00:02:12,130
like an agarose or a zabbix Wiley why we

00:02:07,849 --> 00:02:14,990
do use zabbix try to keep it neutral and

00:02:12,130 --> 00:02:18,470
what I want to highlight is what all

00:02:14,990 --> 00:02:22,810
challenges we face what all things we

00:02:18,470 --> 00:02:28,760
monitor and how we overcome them right

00:02:22,810 --> 00:02:32,120
so before I proceed I'd like to make a

00:02:28,760 --> 00:02:35,090
disclaimer that there may be some

00:02:32,120 --> 00:02:37,790
methods I will be dis showing you or

00:02:35,090 --> 00:02:40,190
talking about which may be very

00:02:37,790 --> 00:02:41,690
appalling as to you know things like

00:02:40,190 --> 00:02:48,200
dipping into the cloud stock database

00:02:41,690 --> 00:02:51,440
for some stuff etc but yes we do that so

00:02:48,200 --> 00:02:53,810
I'll be covering primarily the

00:02:51,440 --> 00:02:56,720
monitoring active activities the basics

00:02:53,810 --> 00:02:58,340
the application then it goes on getting

00:02:56,720 --> 00:03:01,130
more and more interesting then we go to

00:02:58,340 --> 00:03:05,170
the cloud resources then how certain set

00:03:01,130 --> 00:03:08,840
of automated processes can you know help

00:03:05,170 --> 00:03:11,630
further fine-tune and keep a control on

00:03:08,840 --> 00:03:14,150
the cloud seconds relation and finally

00:03:11,630 --> 00:03:18,860
Auto resolving some common issues again

00:03:14,150 --> 00:03:21,410
Auto resolving needs to be taken with

00:03:18,860 --> 00:03:24,200
due consideration it may not be suitable

00:03:21,410 --> 00:03:26,570
for all deployments it may be suitable

00:03:24,200 --> 00:03:29,000
for some deployments again within that

00:03:26,570 --> 00:03:31,220
there may be certain things which can be

00:03:29,000 --> 00:03:34,390
easily done without any harm and certain

00:03:31,220 --> 00:03:37,850
which may need further evaluation and

00:03:34,390 --> 00:03:41,120
may need to stop at a notification I'll

00:03:37,850 --> 00:03:45,050
just well on those and all this

00:03:41,120 --> 00:03:48,200
monitoring can be done in a

00:03:45,050 --> 00:03:51,740
straightforward way like all world

00:03:48,200 --> 00:03:54,800
monitoring software does but we also

00:03:51,740 --> 00:03:56,420
need to look at how the data is being

00:03:54,800 --> 00:04:00,860
monitored and where it is being

00:03:56,420 --> 00:04:03,650
monitored from we call that this access

00:04:00,860 --> 00:04:06,020
perspective so I'll be telling on what

00:04:03,650 --> 00:04:08,500
is an access perspective and what we

00:04:06,020 --> 00:04:10,790
monitor there and how we monitor that

00:04:08,500 --> 00:04:14,930
after I've covered the basics we'll

00:04:10,790 --> 00:04:18,549
we'll reach there so let's go to the

00:04:14,930 --> 00:04:18,549
main monitoring activities

00:04:47,770 --> 00:04:55,400
right so these are the activities one

00:04:54,020 --> 00:04:57,820
needs to do for monitoring any

00:04:55,400 --> 00:05:00,380
application we eat cloud stat beat

00:04:57,820 --> 00:05:02,030
whatever be your application primarily

00:05:00,380 --> 00:05:03,050
there is a bit of discovery there's a

00:05:02,030 --> 00:05:05,150
bit of collection

00:05:03,050 --> 00:05:07,490
there's representation and reporting

00:05:05,150 --> 00:05:09,560
that you need to do then there's a bit

00:05:07,490 --> 00:05:11,449
of correlation and then there is

00:05:09,560 --> 00:05:13,610
analysis and planning and which

00:05:11,449 --> 00:05:15,770
constitute your capacity management etc

00:05:13,610 --> 00:05:18,740
and then there are actions which you

00:05:15,770 --> 00:05:24,139
need to do based on certain events or

00:05:18,740 --> 00:05:27,350
anomalies occurring right so let's let's

00:05:24,139 --> 00:05:30,470
see what let's see what we use for

00:05:27,350 --> 00:05:33,080
monitoring cloud set so we use a

00:05:30,470 --> 00:05:35,960
combination of batch scripts bash is a

00:05:33,080 --> 00:05:39,169
awesome tool for doing all sort of stuff

00:05:35,960 --> 00:05:43,130
which cannot you know which require

00:05:39,169 --> 00:05:45,470
different different other tools to

00:05:43,130 --> 00:05:48,440
integrate with so we use a lot of mass

00:05:45,470 --> 00:05:51,830
skips we use the monitoring agent

00:05:48,440 --> 00:05:55,370
typically we use zabbix but any agent

00:05:51,830 --> 00:05:58,190
can be used then a lot of command line

00:05:55,370 --> 00:06:00,949
tools we use a lot of command line tools

00:05:58,190 --> 00:06:04,849
for monitoring ACS API needless to say

00:06:00,949 --> 00:06:07,310
is being used cloud monkey it's an

00:06:04,849 --> 00:06:10,580
excellent tool for you know getting

00:06:07,310 --> 00:06:13,400
immediate command line and programmatic

00:06:10,580 --> 00:06:17,720
values from the cloud stack

00:06:13,400 --> 00:06:20,539
implementation and we also do SQL as

00:06:17,720 --> 00:06:24,979
then we have a read-only user read-only

00:06:20,539 --> 00:06:28,490
user which dips into the cloud and cloud

00:06:24,979 --> 00:06:32,210
usage database for some metrics right so

00:06:28,490 --> 00:06:37,610
the caveat here is when one migrates

00:06:32,210 --> 00:06:38,980
from version a to you know a + or some

00:06:37,610 --> 00:06:40,870
other version

00:06:38,980 --> 00:06:44,790
and what does need to take care of

00:06:40,870 --> 00:06:49,500
schema changes content changes etc okay

00:06:44,790 --> 00:06:51,810
so from a discovery perspective most

00:06:49,500 --> 00:06:57,670
monitoring software will allow you to

00:06:51,810 --> 00:07:01,360
have auto discovery so things like zones

00:06:57,670 --> 00:07:04,330
etc can anyway be discovered by calling

00:07:01,360 --> 00:07:07,960
the API and getting a list zones and

00:07:04,330 --> 00:07:12,310
seeing what is there or not so what I am

00:07:07,960 --> 00:07:14,800
trying to emphasize here is what we

00:07:12,310 --> 00:07:17,200
noticed is there is not one single tool

00:07:14,800 --> 00:07:19,330
that can help you do everything that's

00:07:17,200 --> 00:07:23,380
why there's a way if we use a lot of

00:07:19,330 --> 00:07:26,620
bash to you know take data whether it be

00:07:23,380 --> 00:07:30,070
a discovery data beat collection data

00:07:26,620 --> 00:07:34,210
and then validate them and then decide

00:07:30,070 --> 00:07:38,890
what to do so for example host we use a

00:07:34,210 --> 00:07:41,680
Zen server for our installations so in

00:07:38,890 --> 00:07:44,260
Zen server cloud step typically talks to

00:07:41,680 --> 00:07:48,820
the same server via SSH

00:07:44,260 --> 00:07:51,490
so we also use that same concept so for

00:07:48,820 --> 00:07:53,500
discovering hosts what we do is we

00:07:51,490 --> 00:07:55,750
directly dip into the DB and get the

00:07:53,500 --> 00:07:59,170
hosts newly created amazing are based on

00:07:55,750 --> 00:08:02,800
the current time instead of doing a list

00:07:59,170 --> 00:08:04,750
host checking what I have or maybe

00:08:02,800 --> 00:08:07,060
hydrating through that and get the

00:08:04,750 --> 00:08:11,220
period time we do it through the SQL and

00:08:07,060 --> 00:08:15,730
it works for us so while it may not be

00:08:11,220 --> 00:08:17,460
the best you know way to do things it

00:08:15,730 --> 00:08:22,200
does work for us

00:08:17,460 --> 00:08:26,440
similarly for clusters and system memes

00:08:22,200 --> 00:08:29,650
insist in the case of system beams I'll

00:08:26,440 --> 00:08:31,720
cover that at a later slide but what I

00:08:29,650 --> 00:08:34,930
want to emphasize is we are not

00:08:31,720 --> 00:08:37,630
interested in as of now in monitoring

00:08:34,930 --> 00:08:40,360
the CPU etcetera of the system beams so

00:08:37,630 --> 00:08:44,260
for example if a system is destroyed and

00:08:40,360 --> 00:08:47,380
it's placed elsewhere and the name also

00:08:44,260 --> 00:08:50,850
changes it doesn't matter to us because

00:08:47,380 --> 00:08:52,949
we are monitoring more more on the

00:08:50,850 --> 00:08:56,399
systems stable

00:08:52,949 --> 00:09:00,399
aspects rather than keeping a track of

00:08:56,399 --> 00:09:04,329
how it has performed over time right so

00:09:00,399 --> 00:09:07,269
the same goes for a VR because these

00:09:04,329 --> 00:09:09,730
these three type of virtual machines are

00:09:07,269 --> 00:09:13,050
such that you know they can be destroyed

00:09:09,730 --> 00:09:16,569
and then have completely different

00:09:13,050 --> 00:09:19,120
identities from a from a perspective of

00:09:16,569 --> 00:09:23,500
integrating through programmatically so

00:09:19,120 --> 00:09:29,860
we do not try to you know monitor them

00:09:23,500 --> 00:09:33,850
and keep records for a long period then

00:09:29,860 --> 00:09:38,319
we collect data using all these tools

00:09:33,850 --> 00:09:41,920
from then from systems from OS at the OS

00:09:38,319 --> 00:09:45,060
level the DB logs etc then again

00:09:41,920 --> 00:09:49,000
representing and reporting we use graphs

00:09:45,060 --> 00:09:51,009
excels reports initially there's

00:09:49,000 --> 00:09:56,470
something unique we do just call the

00:09:51,009 --> 00:10:00,639
z-axis so what this does is since we

00:09:56,470 --> 00:10:04,810
have data let's say of a particular host

00:10:00,639 --> 00:10:08,079
over time so what we do is we not just

00:10:04,810 --> 00:10:12,730
give you the axis of a period let's say

00:10:08,079 --> 00:10:17,800
from 1 year to time one to time two we

00:10:12,730 --> 00:10:20,649
give you a method wherein there's your

00:10:17,800 --> 00:10:23,860
time one and there's a 24-hour slot from

00:10:20,649 --> 00:10:27,040
0 0 to 23 59 and there's there are two

00:10:23,860 --> 00:10:30,160
lines which if you can see here there

00:10:27,040 --> 00:10:32,769
are two lines the green line is the

00:10:30,160 --> 00:10:36,970
current dates line and the yellow line

00:10:32,769 --> 00:10:38,620
is the average of all the 30 days for

00:10:36,970 --> 00:10:42,990
that particular time interval in the

00:10:38,620 --> 00:10:46,779
24-hour period so we use this to

00:10:42,990 --> 00:10:53,019
evaluate a lot of patterns as to how the

00:10:46,779 --> 00:10:57,279
host is behaving over time then we do a

00:10:53,019 --> 00:11:00,579
lot of profiling I'll come to that later

00:10:57,279 --> 00:11:03,459
profiling basically means you know based

00:11:00,579 --> 00:11:05,990
on sequel queries you can actually find

00:11:03,459 --> 00:11:08,870
out what is the time

00:11:05,990 --> 00:11:12,529
that each job let's say a vm3 it took

00:11:08,870 --> 00:11:16,070
right so based on that you get to know

00:11:12,529 --> 00:11:18,230
what job is taking maximum time and all

00:11:16,070 --> 00:11:20,839
that is easily available from the

00:11:18,230 --> 00:11:24,100
database instead of you know having

00:11:20,839 --> 00:11:27,560
complex log analyzers the beauty of

00:11:24,100 --> 00:11:30,830
cloud stack events and the notification

00:11:27,560 --> 00:11:34,310
is that you can do that at the database

00:11:30,830 --> 00:11:38,660
level itself so based on that you know

00:11:34,310 --> 00:11:42,020
you can you can do a lot of drinks for

00:11:38,660 --> 00:11:44,540
example which VM of mine from a service

00:11:42,020 --> 00:11:47,750
provider perspective which we am of my

00:11:44,540 --> 00:11:50,120
is selling most which VM is not selling

00:11:47,750 --> 00:11:55,370
much all those analytics can come in

00:11:50,120 --> 00:11:57,920
from this place then from a resolution

00:11:55,370 --> 00:12:00,770
perspective of course you can have

00:11:57,920 --> 00:12:03,860
alerting and it is a must you can have

00:12:00,770 --> 00:12:06,080
logging you can have actions wherein you

00:12:03,860 --> 00:12:09,170
can feed to external systems for example

00:12:06,080 --> 00:12:12,529
in a service provider scenario suppose

00:12:09,170 --> 00:12:15,980
you have a cloud sack setup and you have

00:12:12,529 --> 00:12:18,200
a VM which is created but there billing

00:12:15,980 --> 00:12:21,529
guys say that whenever a VM gets created

00:12:18,200 --> 00:12:23,990
boss you need to tell me some tell me or

00:12:21,529 --> 00:12:25,490
maybe shove it to my message bus or

00:12:23,990 --> 00:12:29,570
something like that you know so all

00:12:25,490 --> 00:12:37,339
those things can be done using Auto

00:12:29,570 --> 00:12:39,140
resolution or using actions so this is a

00:12:37,339 --> 00:12:44,540
very quick slide I am NOT getting into

00:12:39,140 --> 00:12:47,750
this much these are the general metrics

00:12:44,540 --> 00:12:51,649
that are that are typically required to

00:12:47,750 --> 00:12:54,230
be monitored in any OS the important

00:12:51,649 --> 00:12:56,450
things this thing is that we should also

00:12:54,230 --> 00:12:59,060
monitor the ports from a tcp/ip

00:12:56,450 --> 00:13:02,779
perspective whether they are working or

00:12:59,060 --> 00:13:05,000
not and not just the processes but the

00:13:02,779 --> 00:13:08,750
ports as well you can take that even

00:13:05,000 --> 00:13:11,540
further for example in the port of 4 4 3

00:13:08,750 --> 00:13:14,060
or 8 0 at 0 you need to get back a

00:13:11,540 --> 00:13:18,880
particular text you can take it as 4

00:13:14,060 --> 00:13:18,880
there as as deep as you want

00:13:19,820 --> 00:13:29,040
then we come to the application matrix

00:13:24,380 --> 00:13:32,400
here we use socket commands typically

00:13:29,040 --> 00:13:36,180
like netcat etcetera and then we also

00:13:32,400 --> 00:13:38,730
have we validate for content that is

00:13:36,180 --> 00:13:43,220
coming back as a response and of course

00:13:38,730 --> 00:13:45,810
standard SSH and CLI so these are

00:13:43,220 --> 00:13:49,710
typically if you see the first two are

00:13:45,810 --> 00:13:53,820
just to capture whether the process are

00:13:49,710 --> 00:13:57,270
running or not correctly and the second

00:13:53,820 --> 00:13:59,880
one the third one is sort of a command

00:13:57,270 --> 00:14:02,100
to check if the cloud you you do have a

00:13:59,880 --> 00:14:03,810
system VM agent you can always query

00:14:02,100 --> 00:14:06,090
from that but this is an added check

00:14:03,810 --> 00:14:08,220
where in you can go via the hypervisor

00:14:06,090 --> 00:14:11,790
into the system we have agent and check

00:14:08,220 --> 00:14:16,980
for status of clouds or you can run

00:14:11,790 --> 00:14:18,960
let's say SS VM check dot SH and gather

00:14:16,980 --> 00:14:20,940
the output this first step that you do

00:14:18,960 --> 00:14:22,890
when a system VM fails is you typically

00:14:20,940 --> 00:14:24,810
go into the system we am and do the ESS

00:14:22,890 --> 00:14:27,050
we uncheck so that can also be further

00:14:24,810 --> 00:14:31,140
automated and we can take it further

00:14:27,050 --> 00:14:34,320
again then you hit cloud stat and get

00:14:31,140 --> 00:14:36,300
back a response from the UI perspective

00:14:34,320 --> 00:14:40,890
as to ensure whether the UI is working

00:14:36,300 --> 00:14:44,010
you can get verify for 200 ok or you can

00:14:40,890 --> 00:14:46,220
even go and force a login username

00:14:44,010 --> 00:14:48,990
password login through the UI

00:14:46,220 --> 00:14:51,690
programmatically get the response and

00:14:48,990 --> 00:14:54,360
see if the notification letter is coming

00:14:51,690 --> 00:14:59,160
so there's no end to how deep you can go

00:14:54,360 --> 00:15:04,250
this is just a idea of how we do we do

00:14:59,160 --> 00:15:10,410
stuff and what all can be done Tomcat

00:15:04,250 --> 00:15:16,040
again we use the JMX mode so these are

00:15:10,410 --> 00:15:20,370
general Tomcat stuff that we monitor and

00:15:16,040 --> 00:15:22,640
stuff for Tomcats OS etc my sequel there

00:15:20,370 --> 00:15:26,240
are a plethora of templates available

00:15:22,640 --> 00:15:29,640
all over the net for all kind of

00:15:26,240 --> 00:15:32,220
monitoring's of software so I'm not

00:15:29,640 --> 00:15:33,180
getting into that so that's a very easy

00:15:32,220 --> 00:15:39,990
task

00:15:33,180 --> 00:15:42,210
that can be accomplished in my sequel

00:15:39,990 --> 00:15:45,930
typically we would like to see the slow

00:15:42,210 --> 00:15:48,180
query log and the slave status again for

00:15:45,930 --> 00:15:50,190
my sequel there are n number of

00:15:48,180 --> 00:15:51,540
parameters that can be monitored right

00:15:50,190 --> 00:15:56,100
from the earth

00:15:51,540 --> 00:16:00,240
you know DB buffers and your write cache

00:15:56,100 --> 00:16:02,550
hits the ratio etc so I've kept that out

00:16:00,240 --> 00:16:10,470
because it's not really you know

00:16:02,550 --> 00:16:13,320
pertaining to cloud stack per se then we

00:16:10,470 --> 00:16:20,670
use it a proxy for load balancing

00:16:13,320 --> 00:16:23,700
between multiple cloud between multiple

00:16:20,670 --> 00:16:26,460
cloud stack management servers so from a

00:16:23,700 --> 00:16:28,650
lower back from monitoring the H a proxy

00:16:26,460 --> 00:16:32,280
perspective again the H aprox is also

00:16:28,650 --> 00:16:35,550
add on a in a pair that's installed so

00:16:32,280 --> 00:16:38,580
we need to definitely look at a couple

00:16:35,550 --> 00:16:41,280
of parameters the request rate the rate

00:16:38,580 --> 00:16:44,010
at which the responses are being served

00:16:41,280 --> 00:16:48,150
then it from the backend type of matrix

00:16:44,010 --> 00:16:51,560
you require the queue concurrency the

00:16:48,150 --> 00:16:55,410
cube time and the service time etcetera

00:16:51,560 --> 00:16:58,770
then from H a proxy perspective file

00:16:55,410 --> 00:17:00,990
descriptors and allowed descriptors and

00:16:58,770 --> 00:17:05,180
the difference between them is something

00:17:00,990 --> 00:17:05,180
that we would definitely like to see

00:17:06,740 --> 00:17:15,540
logs again you can take this with a

00:17:12,300 --> 00:17:19,860
pinch of salt we can go as deep as we

00:17:15,540 --> 00:17:23,640
want in monitoring the logs and we can

00:17:19,860 --> 00:17:26,570
decide only to monitor errors but yes it

00:17:23,640 --> 00:17:32,730
is possible to monitor logs also and

00:17:26,570 --> 00:17:37,830
what we just need to do is you know take

00:17:32,730 --> 00:17:41,220
a take a grep of all the all the lines

00:17:37,830 --> 00:17:44,430
which have error in it and see that it

00:17:41,220 --> 00:17:46,720
has not increased more than the previous

00:17:44,430 --> 00:17:49,570
poll so suppose

00:17:46,720 --> 00:17:52,150
the first poll says there are 15 errors

00:17:49,570 --> 00:17:54,370
and the second one also gives you the 15

00:17:52,150 --> 00:17:57,490
then there has been no error between the

00:17:54,370 --> 00:18:00,070
two polls but suppose it does give you

00:17:57,490 --> 00:18:03,280
an error where your word count WC is

00:18:00,070 --> 00:18:05,320
basically your word count ona my minus L

00:18:03,280 --> 00:18:08,200
gives you the lines so it can give you

00:18:05,320 --> 00:18:12,309
the number of errors on all the logs

00:18:08,200 --> 00:18:21,610
that have occurred recently after your

00:18:12,309 --> 00:18:28,539
previous poll okay now from a cloud

00:18:21,610 --> 00:18:32,530
metrics perspective we we primarily do

00:18:28,539 --> 00:18:35,710
XenServer only so most of my examples

00:18:32,530 --> 00:18:38,710
here would be about XenServer so

00:18:35,710 --> 00:18:42,179
traditional dom0 stats are something

00:18:38,710 --> 00:18:46,690
which we need to monitor and store and

00:18:42,179 --> 00:18:49,510
calculate then again Xen servers reach

00:18:46,690 --> 00:18:52,360
ability to a ACS is something that we

00:18:49,510 --> 00:18:55,990
would want to do regarding the host

00:18:52,360 --> 00:19:01,260
matrix itself from XenServer that is a

00:18:55,990 --> 00:19:04,270
really difficult task to achieve because

00:19:01,260 --> 00:19:09,010
XenServer doesn't give you even if you

00:19:04,270 --> 00:19:11,740
install the agent or if you pull the ssh

00:19:09,010 --> 00:19:13,179
of XenServer it typically gives you the

00:19:11,740 --> 00:19:16,120
value only of dom0

00:19:13,179 --> 00:19:18,280
so what you need to do for that is you

00:19:16,120 --> 00:19:22,480
know you need to go into Xen top and

00:19:18,280 --> 00:19:24,909
parse that and obtain values for even a

00:19:22,480 --> 00:19:27,370
simple thing like CPU utilization and

00:19:24,909 --> 00:19:30,039
again that comes on a per CPU basis

00:19:27,370 --> 00:19:33,100
which needs to be aggregated so Zen

00:19:30,039 --> 00:19:35,799
server host monitoring is a is a little

00:19:33,100 --> 00:19:41,320
tricky but we have been able to obtain

00:19:35,799 --> 00:19:49,860
the CPUs utilized based on that okay and

00:19:41,320 --> 00:19:52,990
again this is we use NFS for storage so

00:19:49,860 --> 00:19:55,090
typically what happens is we need to see

00:19:52,990 --> 00:19:59,810
we need to know up front and beforehand

00:19:55,090 --> 00:20:03,140
if there are any still NFS

00:19:59,810 --> 00:20:07,900
mounts on the XenServer so we achieve

00:20:03,140 --> 00:20:10,880
that by doing an ssh all this is via the

00:20:07,900 --> 00:20:12,740
NMS software so i we can use either keys

00:20:10,880 --> 00:20:15,940
or we can use the password of the

00:20:12,740 --> 00:20:19,130
hypervisor and run our own set of

00:20:15,940 --> 00:20:22,190
commands so even my probes even the

00:20:19,130 --> 00:20:24,530
probes that we do and collections are is

00:20:22,190 --> 00:20:27,980
more of a custom script there are a lot

00:20:24,530 --> 00:20:31,040
of CPU etc can come as inbuilt as part

00:20:27,980 --> 00:20:33,140
of the agent templates but we do a lot

00:20:31,040 --> 00:20:36,320
of custom scripts to hold the data and

00:20:33,140 --> 00:20:37,850
all so basically what this does is we

00:20:36,320 --> 00:20:41,530
just need to see that this doesn't give

00:20:37,850 --> 00:20:44,150
any output this means that none of the

00:20:41,530 --> 00:20:46,840
SRS are still and everything is

00:20:44,150 --> 00:20:46,840
hunky-dory

00:20:52,240 --> 00:21:00,800
so from traditional cloud metrics we do

00:20:57,890 --> 00:21:04,010
IP IP allocated all this is all these

00:21:00,800 --> 00:21:11,480
are all actually available from from the

00:21:04,010 --> 00:21:13,580
cloud stack API itself in addition as I

00:21:11,480 --> 00:21:16,550
said I've put a star on horse that

00:21:13,580 --> 00:21:19,850
basically means that for hosts we need

00:21:16,550 --> 00:21:22,150
to do a lot of additional stuff at our

00:21:19,850 --> 00:21:25,130
and especially in the XenServer level

00:21:22,150 --> 00:21:27,230
and in at the host level we can do

00:21:25,130 --> 00:21:31,690
additional checks on the status of the

00:21:27,230 --> 00:21:35,470
nicks and the raid of the of the host

00:21:31,690 --> 00:21:40,850
host disks that is where the host OS

00:21:35,470 --> 00:21:44,020
XenServer itself resides then on system

00:21:40,850 --> 00:21:48,310
VMs we can check for the reach ability

00:21:44,020 --> 00:21:52,820
the agent status and the availability of

00:21:48,310 --> 00:21:54,920
3:9 to to port which is used for local

00:21:52,820 --> 00:21:59,950
communication with the underlying

00:21:54,920 --> 00:22:02,920
hypervisor again from a capacity

00:21:59,950 --> 00:22:09,980
perspective we can we do a lot of

00:22:02,920 --> 00:22:13,170
storage back-end and IP IP Tex VLANs so

00:22:09,980 --> 00:22:16,380
these are all standard checks that

00:22:13,170 --> 00:22:22,679
most mostly can be done using cloud

00:22:16,380 --> 00:22:27,450
Shrek api's okay now I come to this the

00:22:22,679 --> 00:22:29,160
usage server so typically when you're

00:22:27,450 --> 00:22:34,020
running cloud check in an isp

00:22:29,160 --> 00:22:36,600
environment you're the billing happens

00:22:34,020 --> 00:22:40,350
on an hourly basis so we definitely need

00:22:36,600 --> 00:22:42,450
to get usage on an hourly basis right so

00:22:40,350 --> 00:22:45,510
we have to ensure that the usage server

00:22:42,450 --> 00:22:49,850
is running this can be done by a process

00:22:45,510 --> 00:22:53,990
check or by DB values that can be done

00:22:49,850 --> 00:22:59,730
again deployment planner F weak efficacy

00:22:53,990 --> 00:23:02,270
so we we can get all the hosts of a

00:22:59,730 --> 00:23:04,559
cluster what we do is we get the hosts

00:23:02,270 --> 00:23:10,140
all the hosts of a particular cluster

00:23:04,559 --> 00:23:15,630
and using the VM and its offering versus

00:23:10,140 --> 00:23:18,150
the hosts offering host host capacity we

00:23:15,630 --> 00:23:20,970
can get a spread of all the whole of all

00:23:18,150 --> 00:23:23,070
the VMS in a host and see if there is

00:23:20,970 --> 00:23:27,230
any one particular host or something

00:23:23,070 --> 00:23:30,030
which is very skewed or not this again

00:23:27,230 --> 00:23:31,770
once the host metrics are there we need

00:23:30,030 --> 00:23:34,020
to store those host metrics what we do

00:23:31,770 --> 00:23:37,169
is using that Xen tough we take those

00:23:34,020 --> 00:23:39,450
metrics store it in the zabbix DB stores

00:23:37,169 --> 00:23:41,760
it then based on that we have an

00:23:39,450 --> 00:23:44,460
external check which basically checkbook

00:23:41,760 --> 00:23:47,160
dips into thus the monitoring DB itself

00:23:44,460 --> 00:23:50,940
makes the data and says if there is any

00:23:47,160 --> 00:23:53,760
skew so we again use standard my sequel

00:23:50,940 --> 00:23:59,940
variance and standard deviation commands

00:23:53,760 --> 00:24:02,450
to obtain that okay so okay now in a

00:23:59,940 --> 00:24:07,080
service provider scenario this another

00:24:02,450 --> 00:24:09,360
thing we do called tagging of hosts so

00:24:07,080 --> 00:24:13,679
why we do that is typically to save

00:24:09,360 --> 00:24:16,940
money especially on licensing we tag

00:24:13,679 --> 00:24:21,240
let's say three hosts for Windows and

00:24:16,940 --> 00:24:25,990
others for all other generic workloads

00:24:21,240 --> 00:24:28,960
so that way the reporting of all

00:24:25,990 --> 00:24:31,570
we Windows virtual machines etc you need

00:24:28,960 --> 00:24:34,480
to have only three OS and your licenses

00:24:31,570 --> 00:24:36,999
can be applied at the host level so in

00:24:34,480 --> 00:24:41,730
that case what happens is whenever we

00:24:36,999 --> 00:24:45,249
deploy a particular VM of let's say

00:24:41,730 --> 00:24:48,100
windows offering so we tab that offering

00:24:45,249 --> 00:24:50,350
and I force it to go on that course so

00:24:48,100 --> 00:24:53,049
when we are doing a capacity check or

00:24:50,350 --> 00:24:57,580
when we are doing a check for ensuring

00:24:53,049 --> 00:25:00,940
that the the deployment can be

00:24:57,580 --> 00:25:04,480
successful we need to consider the tags

00:25:00,940 --> 00:25:10,330
of the host and consider those hosts in

00:25:04,480 --> 00:25:14,830
isolation when monitoring capacity then

00:25:10,330 --> 00:25:18,070
coming to offering checks so whenever a

00:25:14,830 --> 00:25:21,700
new offering is created again by dipping

00:25:18,070 --> 00:25:24,100
into the into the database one can get

00:25:21,700 --> 00:25:27,429
to know which is the latest offering

00:25:24,100 --> 00:25:29,559
that has been created and CloudStack

00:25:27,429 --> 00:25:33,340
while creating the offering will happily

00:25:29,559 --> 00:25:36,399
allow you to create whatever gigahertz

00:25:33,340 --> 00:25:40,570
you want irrespective of what is there

00:25:36,399 --> 00:25:44,110
on the underlying underlying XenServer

00:25:40,570 --> 00:25:46,749
so what one needs to do is we have our

00:25:44,110 --> 00:25:50,590
rules for example in XenServer more than

00:25:46,749 --> 00:25:52,840
sixteen course is not supported so we

00:25:50,590 --> 00:25:54,730
have those checks in place like if a new

00:25:52,840 --> 00:25:57,700
offering is created it should not be

00:25:54,730 --> 00:26:00,399
more than 16 cores the key guards cannot

00:25:57,700 --> 00:26:04,779
be more than what is the gigahertz of

00:26:00,399 --> 00:26:10,950
the underlying hosts etcetera coming to

00:26:04,779 --> 00:26:14,529
virtual routers we have seen cases where

00:26:10,950 --> 00:26:18,940
there when you add a private gateway to

00:26:14,529 --> 00:26:21,970
a virtual router then there is there are

00:26:18,940 --> 00:26:25,749
some issues in the static routes which

00:26:21,970 --> 00:26:28,210
do not come up on a reboot so using the

00:26:25,749 --> 00:26:30,519
same I'll come to this again we are

00:26:28,210 --> 00:26:33,220
using the same logic of you know going

00:26:30,519 --> 00:26:36,179
via the hypervisor and into the we are

00:26:33,220 --> 00:26:39,869
one can find out if there are any

00:26:36,179 --> 00:26:39,869
missing static routes

00:26:40,120 --> 00:26:45,950
then coming to management server load we

00:26:44,299 --> 00:26:49,519
can check the load of the management

00:26:45,950 --> 00:26:51,919
server how many requests each management

00:26:49,519 --> 00:26:54,409
server has received and how it is being

00:26:51,919 --> 00:27:00,169
balanced this can be done by a proxy

00:26:54,409 --> 00:27:03,529
logs itself we can also tap into the

00:27:00,169 --> 00:27:07,399
events and alerts again this can be

00:27:03,529 --> 00:27:10,220
tapped at the DB level of cloud stack

00:27:07,399 --> 00:27:13,850
and we can obtain data at the events and

00:27:10,220 --> 00:27:16,669
alerts level we just spoke about

00:27:13,850 --> 00:27:20,059
profiling what type of VM is selling

00:27:16,669 --> 00:27:26,990
which is my best offering etc so we can

00:27:20,059 --> 00:27:30,590
do all that then coming to process

00:27:26,990 --> 00:27:33,110
matrix so these are now we have more or

00:27:30,590 --> 00:27:36,409
less covered the installation part now

00:27:33,110 --> 00:27:39,740
we are trying to see how things are when

00:27:36,409 --> 00:27:41,899
they are running so typically we would

00:27:39,740 --> 00:27:45,080
like to do this maybe once in six hours

00:27:41,899 --> 00:27:49,909
where we create an account we create a V

00:27:45,080 --> 00:27:53,059
PC and a VR and provision a VM inside

00:27:49,909 --> 00:27:55,279
that and create tears and check whether

00:27:53,059 --> 00:27:58,820
it's running and then destroy the same

00:27:55,279 --> 00:28:01,429
so basically what this does is it takes

00:27:58,820 --> 00:28:05,389
care of the complete more or less the

00:28:01,429 --> 00:28:10,370
complete flow that any typical use case

00:28:05,389 --> 00:28:13,700
will will require right from a

00:28:10,370 --> 00:28:16,600
monitoring perspective we also need to

00:28:13,700 --> 00:28:20,000
monitor that our backups that is the

00:28:16,600 --> 00:28:24,169
backups of the cloud DB and the backups

00:28:20,000 --> 00:28:27,080
of the cloud usage are happening on time

00:28:24,169 --> 00:28:30,380
so we can use that that also as part of

00:28:27,080 --> 00:28:36,639
monitoring now let me come to the access

00:28:30,380 --> 00:28:40,490
perspective so are the colors visible

00:28:36,639 --> 00:28:43,399
okay so if you see here the management

00:28:40,490 --> 00:28:45,919
traffic management communicates through

00:28:43,399 --> 00:28:48,649
this management traffic with all the

00:28:45,919 --> 00:28:50,330
hypervisors right so let's let's just

00:28:48,649 --> 00:28:53,810
remember that for a moment this is a

00:28:50,330 --> 00:28:57,010
slide outside taken from

00:28:53,810 --> 00:29:01,520
the cloud Shack documentation itself so

00:28:57,010 --> 00:29:05,450
it's available on public now let's keep

00:29:01,520 --> 00:29:10,640
that in mind and look at this slide this

00:29:05,450 --> 00:29:13,010
was again presented by JIRA deep in 2013

00:29:10,640 --> 00:29:20,540
but what I want to highlight here is it

00:29:13,010 --> 00:29:25,310
is you're using PV land there can be a

00:29:20,540 --> 00:29:27,800
situation where your host or let's say

00:29:25,310 --> 00:29:31,010
your my sequel DB or your cloud stock

00:29:27,800 --> 00:29:33,320
management can give you a status of can

00:29:31,010 --> 00:29:35,990
give you a positive status or a healthy

00:29:33,320 --> 00:29:41,510
status but the connection between the

00:29:35,990 --> 00:29:44,810
two is is not is not healthy so we need

00:29:41,510 --> 00:29:46,550
to actually monitor where we are

00:29:44,810 --> 00:29:49,370
accessing the same data from for example

00:29:46,550 --> 00:29:52,160
if we are accessing a latency of let us

00:29:49,370 --> 00:29:53,980
say the cloud DB the latency of the

00:29:52,160 --> 00:29:57,260
cloud DB from the monitoring software

00:29:53,980 --> 00:30:00,650
can easily be obtained by any monitoring

00:29:57,260 --> 00:30:02,480
system but we are not really interested

00:30:00,650 --> 00:30:06,100
in that what we are really interested in

00:30:02,480 --> 00:30:10,850
is the access between the host and the

00:30:06,100 --> 00:30:14,750
cloud DB right so for that these are the

00:30:10,850 --> 00:30:19,160
these are the specific cases that we

00:30:14,750 --> 00:30:23,950
monitor the management server to cloud

00:30:19,160 --> 00:30:26,380
DB then again between management servers

00:30:23,950 --> 00:30:29,680
how they communicate with each other

00:30:26,380 --> 00:30:33,280
that is something again we need to check

00:30:29,680 --> 00:30:37,720
then the H a proxy to management server

00:30:33,280 --> 00:30:41,330
we have to ensure that that pipe is also

00:30:37,720 --> 00:30:44,510
successful so all these you can not

00:30:41,330 --> 00:30:48,110
really do directly from the monitoring

00:30:44,510 --> 00:30:51,200
system so for these what we do is from

00:30:48,110 --> 00:30:53,570
the source host or the source device we

00:30:51,200 --> 00:30:56,780
run external custom scripts that will go

00:30:53,570 --> 00:30:58,700
and simulate as if them the device

00:30:56,780 --> 00:31:01,900
itself is doing that activity and obtain

00:30:58,700 --> 00:31:05,510
data and get it back then again

00:31:01,900 --> 00:31:10,040
management server to Xen is

00:31:05,510 --> 00:31:13,670
kelly wire shell and zappy then the

00:31:10,040 --> 00:31:16,360
reverse also is true the access to eight

00:31:13,670 --> 00:31:20,410
two five zero from XenServer is also

00:31:16,360 --> 00:31:26,110
something that needs to be monitored

00:31:20,410 --> 00:31:31,340
then in an SS vm why we do have a check

00:31:26,110 --> 00:31:33,080
for that check SS v m dot sh but

00:31:31,340 --> 00:31:36,290
primarily what we need to see is that

00:31:33,080 --> 00:31:40,730
the SS VM is connectable to the internet

00:31:36,290 --> 00:31:42,200
via earth to to management wyeth one and

00:31:40,730 --> 00:31:44,300
in case there is a separate storage

00:31:42,200 --> 00:31:52,420
network it needs to be connected by a

00:31:44,300 --> 00:31:56,600
eth3 then the same goes for CP vm and

00:31:52,420 --> 00:31:59,440
internet CP VM to management server and

00:31:56,600 --> 00:31:59,440
the Internet

00:31:59,860 --> 00:32:08,840
now let's come to Auto resolving ok so I

00:32:04,430 --> 00:32:12,800
am i there's a disclaimer we need to be

00:32:08,840 --> 00:32:16,310
really careful in running these it does

00:32:12,800 --> 00:32:19,460
work but we need to exercise prudence as

00:32:16,310 --> 00:32:23,180
to what to use when to use and in which

00:32:19,460 --> 00:32:25,850
scenarios to use ok so in this I will be

00:32:23,180 --> 00:32:32,750
giving a lot of examples and code

00:32:25,850 --> 00:32:36,590
snippets so typically an agent failure

00:32:32,750 --> 00:32:42,110
in SS V events CP VM what we need to do

00:32:36,590 --> 00:32:45,530
is we we have the metric of ss VM check

00:32:42,110 --> 00:32:47,660
so what we do is we via the underlying

00:32:45,530 --> 00:32:51,080
host when you define this metric in a

00:32:47,660 --> 00:32:53,510
monitoring provider monitoring service

00:32:51,080 --> 00:32:56,930
you define it as a metric of the host

00:32:53,510 --> 00:32:58,940
not as of the metric of the target so as

00:32:56,930 --> 00:33:01,400
a metric of the host you go into the

00:32:58,940 --> 00:33:04,790
host and use the same keys that the host

00:33:01,400 --> 00:33:07,820
is using to log in to the CP VM or SS

00:33:04,790 --> 00:33:09,680
again run the command get the output and

00:33:07,820 --> 00:33:13,010
feed the data back to the monitoring

00:33:09,680 --> 00:33:16,370
system right so the mode that we use for

00:33:13,010 --> 00:33:18,860
this is a combination of sequel SSH

00:33:16,370 --> 00:33:19,669
cloud monkey this is the metric and is

00:33:18,860 --> 00:33:24,289
the

00:33:19,669 --> 00:33:30,980
method to obtain the data for resolving

00:33:24,289 --> 00:33:34,820
this first actually this this SQL is to

00:33:30,980 --> 00:33:44,289
obtain the link local IP and the host IP

00:33:34,820 --> 00:33:46,640
of any any SS SS VM so typically this is

00:33:44,289 --> 00:33:49,210
already there with us because that is

00:33:46,640 --> 00:33:52,190
how we have added that SS VM into the

00:33:49,210 --> 00:33:57,350
monitoring state but this is the query

00:33:52,190 --> 00:34:02,000
to get that data from the underlying bv

00:33:57,350 --> 00:34:07,370
once this is done there are couple of

00:34:02,000 --> 00:34:10,010
ways of doing this in XenServer the the

00:34:07,370 --> 00:34:14,389
under opt cloud bin there is a router

00:34:10,010 --> 00:34:17,179
proxy dot SH which is basically used by

00:34:14,389 --> 00:34:21,490
cloud stat to send any command to the

00:34:17,179 --> 00:34:27,290
router to to the system we am beat

00:34:21,490 --> 00:34:29,149
router or CP VM or SS VM and while the

00:34:27,290 --> 00:34:32,960
command that you want to run needs to be

00:34:29,149 --> 00:34:35,270
under opt cloud bin there is no

00:34:32,960 --> 00:34:37,970
validation there so you can easily you

00:34:35,270 --> 00:34:40,669
know escape it go back and run whatever

00:34:37,970 --> 00:34:44,540
command you want and it can

00:34:40,669 --> 00:34:48,139
automatically restart the cloud services

00:34:44,540 --> 00:34:50,899
on SS VM if you don't want to do that

00:34:48,139 --> 00:34:54,589
you can anyway use the default keys that

00:34:50,899 --> 00:34:57,109
are there in in the underlying

00:34:54,589 --> 00:35:01,099
hypervisor or you can use cloud monkey

00:34:57,109 --> 00:35:03,349
now what happens is fine this has

00:35:01,099 --> 00:35:05,810
restarted it once but what happens if

00:35:03,349 --> 00:35:07,400
the blog problem persists so what we do

00:35:05,810 --> 00:35:10,910
is in this case is this the first

00:35:07,400 --> 00:35:14,060
attempt of resolution in case there is a

00:35:10,910 --> 00:35:16,220
second trigger for resolution and we

00:35:14,060 --> 00:35:18,380
have already attempted this then it's

00:35:16,220 --> 00:35:23,320
just a notification which says both some

00:35:18,380 --> 00:35:23,320
manual intervention is required right

00:35:24,849 --> 00:35:34,810
then we have

00:35:29,080 --> 00:35:40,000
face some issues with with the sink tube

00:35:34,810 --> 00:35:42,340
having going close to to or nearing on

00:35:40,000 --> 00:35:45,150
or even close crossing to so in this

00:35:42,340 --> 00:35:48,010
case we monitor using sink you

00:35:45,150 --> 00:35:50,250
resolution is pretty simple but we need

00:35:48,010 --> 00:35:54,070
to be careful in this resolution because

00:35:50,250 --> 00:35:56,830
the jobs that are running can be

00:35:54,070 --> 00:36:00,010
jeopardized by running cloud track

00:35:56,830 --> 00:36:03,310
management so what we do for this is in

00:36:00,010 --> 00:36:05,020
our labs we in our dev labs we have lot

00:36:03,310 --> 00:36:07,720
of people doing a lot of activity so

00:36:05,020 --> 00:36:09,700
this happens quite frequently so in our

00:36:07,720 --> 00:36:13,480
labs we are more than happy to attempt

00:36:09,700 --> 00:36:16,120
and do this service project management

00:36:13,480 --> 00:36:19,750
restart and in a DevOps environment but

00:36:16,120 --> 00:36:26,260
probably it's it's not advisable to do

00:36:19,750 --> 00:36:30,790
it in a service provider environment ok

00:36:26,260 --> 00:36:32,940
then this again is something which is

00:36:30,790 --> 00:36:37,680
very very critical to service providers

00:36:32,940 --> 00:36:40,360
your usage server has to be running and

00:36:37,680 --> 00:36:42,430
because if you are doing a rating on

00:36:40,360 --> 00:36:46,780
hourly basis and that too on a prepaid

00:36:42,430 --> 00:36:49,930
model wherein the customer has already

00:36:46,780 --> 00:36:51,460
paid his money so it has to be deducted

00:36:49,930 --> 00:36:55,090
and you are not going to send him a bill

00:36:51,460 --> 00:36:59,140
for that it is very crucial for the

00:36:55,090 --> 00:37:03,370
usage server to be running right so just

00:36:59,140 --> 00:37:05,560
ensuring that a PS - EF usage server is

00:37:03,370 --> 00:37:08,440
running may not suffice so what we do is

00:37:05,560 --> 00:37:11,560
we need to get the end date from the

00:37:08,440 --> 00:37:13,570
cloud usage so that at least one entry

00:37:11,560 --> 00:37:17,260
is happening we know that usage as

00:37:13,570 --> 00:37:22,930
occurred right in case it has not

00:37:17,260 --> 00:37:26,560
occurred we we do a usage restart and if

00:37:22,930 --> 00:37:30,040
the problem happens again that is if it

00:37:26,560 --> 00:37:32,170
is recurring even after this action we

00:37:30,040 --> 00:37:35,460
have to go to the alert and manual way

00:37:32,170 --> 00:37:35,460
of trying to solve it

00:37:38,760 --> 00:37:47,860
so in the virtual router service

00:37:44,080 --> 00:37:49,870
providers so I'm sorry we have a lot of

00:37:47,860 --> 00:37:52,990
deployments from a honest service droid

00:37:49,870 --> 00:37:56,560
a perspective so much of my talk is from

00:37:52,990 --> 00:38:00,540
that side but from a service provider

00:37:56,560 --> 00:38:03,130
perspective they they like to offer

00:38:00,540 --> 00:38:11,110
various flavors of a VR let's say like

00:38:03,130 --> 00:38:14,140
two core 2gig VR maybe a one one gig one

00:38:11,110 --> 00:38:17,350
core VR and maybe a one code five to LM

00:38:14,140 --> 00:38:20,080
b vr right so there are different

00:38:17,350 --> 00:38:23,770
offerings that are created for the

00:38:20,080 --> 00:38:26,500
virtual router now what all this is fine

00:38:23,770 --> 00:38:29,920
but the first thing that happens when by

00:38:26,500 --> 00:38:33,820
chance the customer presses the cleanup

00:38:29,920 --> 00:38:36,490
and a restart is that this offering is

00:38:33,820 --> 00:38:38,290
totally ignored right so even while

00:38:36,490 --> 00:38:39,790
creating the virtual router when you

00:38:38,290 --> 00:38:42,250
create the virtual router for the first

00:38:39,790 --> 00:38:46,450
time and even though their API call does

00:38:42,250 --> 00:38:48,640
support providing the offering name it

00:38:46,450 --> 00:38:50,950
by default only creates it in the

00:38:48,640 --> 00:38:53,410
default offering then we have to

00:38:50,950 --> 00:38:55,780
manually stop the router change this

00:38:53,410 --> 00:38:57,690
system we am offering and restart the

00:38:55,780 --> 00:39:01,540
router when you do this programmatically

00:38:57,690 --> 00:39:04,390
so in this case what happens as soon as

00:39:01,540 --> 00:39:07,750
the router is there's a clean up and

00:39:04,390 --> 00:39:10,210
reboot it will go back to the same same

00:39:07,750 --> 00:39:13,630
default offering which may not be what

00:39:10,210 --> 00:39:15,550
the service provider what the service

00:39:13,630 --> 00:39:20,620
provider has promised or entered into a

00:39:15,550 --> 00:39:23,290
contract with the end customer so let's

00:39:20,620 --> 00:39:25,840
assume that my offering is called

00:39:23,290 --> 00:39:30,630
something let's say it starts with I n

00:39:25,840 --> 00:39:33,910
right so if I see any domain router

00:39:30,630 --> 00:39:37,720
which is running and which doesn't have

00:39:33,910 --> 00:39:39,100
the service offering name like iron we

00:39:37,720 --> 00:39:41,080
can also do this we have done this on

00:39:39,100 --> 00:39:44,050
name we can also one can also use tags

00:39:41,080 --> 00:39:47,160
and through this so as soon as we see

00:39:44,050 --> 00:39:50,110
this we need to send an alert to the

00:39:47,160 --> 00:39:51,940
admission in administrator in case of a

00:39:50,110 --> 00:39:58,450
service provider

00:39:51,940 --> 00:40:00,609
that this has been there is an anomaly

00:39:58,450 --> 00:40:03,339
detected so the solution is very simple

00:40:00,609 --> 00:40:06,339
we just need to stop it and restart it

00:40:03,339 --> 00:40:08,619
but then again this cannot be done on on

00:40:06,339 --> 00:40:12,789
a service provider perspective this can

00:40:08,619 --> 00:40:15,430
be done in your if you do a lot of you

00:40:12,789 --> 00:40:17,349
know test on your local lab and you

00:40:15,430 --> 00:40:19,359
require a heavy throughput router this

00:40:17,349 --> 00:40:22,270
can be done there but on a service

00:40:19,359 --> 00:40:25,480
provider perspective it's better to

00:40:22,270 --> 00:40:28,119
alert however the solution is to just

00:40:25,480 --> 00:40:29,890
stop the router change this service

00:40:28,119 --> 00:40:38,400
offering for the rotor to what you want

00:40:29,890 --> 00:40:43,960
and restart it right then coming to VR

00:40:38,400 --> 00:40:48,819
placement so again from a service

00:40:43,960 --> 00:40:50,470
provider perspective storage can be

00:40:48,819 --> 00:40:54,670
offered in many tiers right there will

00:40:50,470 --> 00:40:57,579
be SSD storage there will be an else a

00:40:54,670 --> 00:41:00,460
sense a storage and you can have layered

00:40:57,579 --> 00:41:03,400
storage and typically those storage have

00:41:00,460 --> 00:41:06,339
tags like right you have this tag called

00:41:03,400 --> 00:41:08,140
SAS you have a tag called SSD and when

00:41:06,339 --> 00:41:10,089
you create the offering for the virtual

00:41:08,140 --> 00:41:13,299
router also there is a concept of

00:41:10,089 --> 00:41:15,549
specifying tags but then you deploy the

00:41:13,299 --> 00:41:17,680
virtual router it does it does not

00:41:15,549 --> 00:41:19,839
consider those tags at all and it

00:41:17,680 --> 00:41:24,789
totally ignores it and goes and sits on

00:41:19,839 --> 00:41:28,119
the first available storage device now

00:41:24,789 --> 00:41:30,039
well that is fine there are some cases

00:41:28,119 --> 00:41:32,589
where we have seen that especially if it

00:41:30,039 --> 00:41:35,010
goes and reaches on analysis and the

00:41:32,589 --> 00:41:39,400
IEEE ops are not available for the

00:41:35,010 --> 00:41:41,980
particular router then it goes to into a

00:41:39,400 --> 00:41:43,900
sale still state most of the issues

00:41:41,980 --> 00:41:46,119
happen because the router doesn't get

00:41:43,900 --> 00:41:49,630
the required I opts from the underlying

00:41:46,119 --> 00:41:54,970
storage and goes into a say still state

00:41:49,630 --> 00:41:57,339
so this is the metric to obtain that and

00:41:54,970 --> 00:42:03,789
to resolve this you can just lie

00:41:57,339 --> 00:42:05,750
migrated to the the storage which you

00:42:03,789 --> 00:42:13,190
want that is basically to an SS

00:42:05,750 --> 00:42:15,760
storage or wherever you want right then

00:42:13,190 --> 00:42:19,730
as I said this is a this is the

00:42:15,760 --> 00:42:23,180
different side of the same problem VR

00:42:19,730 --> 00:42:26,960
can have read-only amounts especially if

00:42:23,180 --> 00:42:29,990
it's running on NFS and that while

00:42:26,960 --> 00:42:33,830
normal operations may not be affected

00:42:29,990 --> 00:42:37,820
but whenever you try to do any activity

00:42:33,830 --> 00:42:39,290
which requires the we are to write to

00:42:37,820 --> 00:42:42,020
the local disk or anything like that

00:42:39,290 --> 00:42:46,160
then it goes in to failure mode and

00:42:42,020 --> 00:42:50,440
stale mode so we can just you know

00:42:46,160 --> 00:42:55,220
obtain periodically account of all the

00:42:50,440 --> 00:42:58,280
read-only mounts on the via and if we

00:42:55,220 --> 00:43:02,000
find our founder if we find a mount

00:42:58,280 --> 00:43:04,100
where where it's a very choice ad as

00:43:02,000 --> 00:43:09,230
it's a read-only mount then we can try

00:43:04,100 --> 00:43:12,040
to solve it by restarting the router so

00:43:09,230 --> 00:43:16,850
again this is not for service providers

00:43:12,040 --> 00:43:20,300
it will be more for labs or maybe

00:43:16,850 --> 00:43:22,370
enterprises even if you don't do this

00:43:20,300 --> 00:43:24,440
this is the end solution but probably

00:43:22,370 --> 00:43:26,720
you would want to do this after

00:43:24,440 --> 00:43:31,510
consulting and informing the end

00:43:26,720 --> 00:43:35,090
customer because bringing the NFS back

00:43:31,510 --> 00:43:36,470
without restarting the router I am not

00:43:35,090 --> 00:43:40,100
aware whether such a thing is possible

00:43:36,470 --> 00:43:42,110
or not so this is the only way to do it

00:43:40,100 --> 00:43:44,150
but then first up from a service

00:43:42,110 --> 00:43:46,040
provider perspective you may want to

00:43:44,150 --> 00:43:53,210
talk to the customer and get it done

00:43:46,040 --> 00:43:56,200
with it ok then coming to another use

00:43:53,210 --> 00:43:59,360
case there are situations where you know

00:43:56,200 --> 00:44:04,730
your VM is in expunging state in the

00:43:59,360 --> 00:44:08,990
database but not completely destroyed so

00:44:04,730 --> 00:44:15,080
what this query does is basically it you

00:44:08,990 --> 00:44:17,300
know gets a detail of what all is how

00:44:15,080 --> 00:44:20,660
many VMs are in X

00:44:17,300 --> 00:44:22,940
bunging state which are in expunging

00:44:20,660 --> 00:44:26,150
state for more than two days typically

00:44:22,940 --> 00:44:29,150
the cleanup interval after destroying a

00:44:26,150 --> 00:44:31,280
vm is kept to a 86400 which works out to

00:44:29,150 --> 00:44:33,890
one day so we have kept it as two days

00:44:31,280 --> 00:44:38,090
again this can be tweaked as in as in

00:44:33,890 --> 00:44:39,950
how you would want your check to be once

00:44:38,090 --> 00:44:42,290
this is done you are able to identify

00:44:39,950 --> 00:44:44,780
that okay these are the set of VMs which

00:44:42,290 --> 00:44:48,860
are in expunging mode which have not

00:44:44,780 --> 00:44:50,900
gone to destroyed now that's not enough

00:44:48,860 --> 00:44:53,450
we need a further validation for this

00:44:50,900 --> 00:44:56,090
because there may be cases where it is

00:44:53,450 --> 00:44:57,800
expunging but Zen has so what what will

00:44:56,090 --> 00:44:59,780
happen is it will be put as expunging

00:44:57,800 --> 00:45:02,030
but the Zen may not have failed to

00:44:59,780 --> 00:45:04,880
delete it may have failed to delete it

00:45:02,030 --> 00:45:06,860
or may have successfully deleted deleted

00:45:04,880 --> 00:45:10,340
it but the communication may have not

00:45:06,860 --> 00:45:14,240
been passed on to CloudStack so what we

00:45:10,340 --> 00:45:19,400
need to do this though is we have the we

00:45:14,240 --> 00:45:22,490
have the ID from this we need to check

00:45:19,400 --> 00:45:26,420
in the Zen whether this VDI exists or

00:45:22,490 --> 00:45:28,550
not and only if it doesn't exist can we

00:45:26,420 --> 00:45:31,640
take the resolution path if it does

00:45:28,550 --> 00:45:36,830
exist we have to take the alert path so

00:45:31,640 --> 00:45:39,580
once the the VDI we are sure that the

00:45:36,830 --> 00:45:45,680
video is out then all we need to do is

00:45:39,580 --> 00:45:48,410
set some flags on the ACS DB and that

00:45:45,680 --> 00:45:50,900
can be sort so basically we set the

00:45:48,410 --> 00:45:54,170
flags on the volume and we set the flags

00:45:50,900 --> 00:46:02,720
on the VM instance table and bring the

00:45:54,170 --> 00:46:06,350
thing to normal so what next what are we

00:46:02,720 --> 00:46:10,070
doing next towards on this front we

00:46:06,350 --> 00:46:14,900
already have a Auto scale product of

00:46:10,070 --> 00:46:19,970
ours which works outside of cloud stack

00:46:14,900 --> 00:46:24,260
so how we will be trying to enhance that

00:46:19,970 --> 00:46:28,400
and see how it can fit into cloud stack

00:46:24,260 --> 00:46:31,190
natively or at least it works more

00:46:28,400 --> 00:46:34,430
seamlessly with cloud stack so

00:46:31,190 --> 00:46:36,980
now what we do is we have our we have

00:46:34,430 --> 00:46:38,450
VMs and we have agents install in the

00:46:36,980 --> 00:46:41,450
Williams as part of the template

00:46:38,450 --> 00:46:44,000
offerings and based on that we are able

00:46:41,450 --> 00:46:47,270
to collect metrics and the person is

00:46:44,000 --> 00:46:52,010
able to specify that okay if both these

00:46:47,270 --> 00:46:54,410
VMs have a CPU more than 70% for

00:46:52,010 --> 00:46:57,290
continuously 15 minutes I had a third

00:46:54,410 --> 00:47:02,690
one so what what happens is the third

00:46:57,290 --> 00:47:05,810
one is placed under the same VPC under

00:47:02,690 --> 00:47:08,420
the same tier under the same LB with all

00:47:05,810 --> 00:47:10,850
the rules in place then again the

00:47:08,420 --> 00:47:15,200
rollback can also be specified by the

00:47:10,850 --> 00:47:18,410
end user where the person says that ok

00:47:15,200 --> 00:47:20,390
now when all these three go below 50 for

00:47:18,410 --> 00:47:23,000
continuously 15 minutes kick out that

00:47:20,390 --> 00:47:26,060
old VM so that's something we are

00:47:23,000 --> 00:47:29,120
already doing but we're trying to see if

00:47:26,060 --> 00:47:31,550
we can develop this the so that's our

00:47:29,120 --> 00:47:33,230
totally outside in integration with

00:47:31,550 --> 00:47:38,660
cloud set but we are trying to see if we

00:47:33,230 --> 00:47:42,200
can make it more closer and we would

00:47:38,660 --> 00:47:45,860
like to contribute an extensive plug-in

00:47:42,200 --> 00:47:48,260
on these monitoring aspects typically we

00:47:45,860 --> 00:47:51,650
use zabbix so we would want to do that

00:47:48,260 --> 00:47:57,200
first but I had a chat with Alexander

00:47:51,650 --> 00:48:01,880
also represented the monitoring another

00:47:57,200 --> 00:48:07,130
monitoring discussion check in okay so

00:48:01,880 --> 00:48:11,920
probably we could align our thoughts

00:48:07,130 --> 00:48:18,590
together and make it into a single

00:48:11,920 --> 00:48:20,360
agnostic kind of a template we would

00:48:18,590 --> 00:48:24,050
like to do a lot of VR checks which we

00:48:20,360 --> 00:48:29,810
are not doing right now for example mine

00:48:24,050 --> 00:48:31,670
at tables my my current connected

00:48:29,810 --> 00:48:35,360
sessions these are some things which are

00:48:31,670 --> 00:48:38,420
very very critical to any person who

00:48:35,360 --> 00:48:40,910
owns the wire so what happens is while I

00:48:38,420 --> 00:48:44,690
as a customer or as a user of cloud

00:48:40,910 --> 00:48:47,150
stack on the we are

00:48:44,690 --> 00:48:49,010
I really don't know on it while I can

00:48:47,150 --> 00:48:51,170
create it there's not much I can do

00:48:49,010 --> 00:48:53,180
except configure it the feedback that I

00:48:51,170 --> 00:48:55,730
get from the report the reports and

00:48:53,180 --> 00:48:57,740
feedback is very very limited so that is

00:48:55,730 --> 00:49:03,079
something which we will really be doing

00:48:57,740 --> 00:49:05,420
now whether that will confirm to Apache

00:49:03,079 --> 00:49:07,369
cloud stats vision and whether it should

00:49:05,420 --> 00:49:10,940
be done that way that's something I

00:49:07,369 --> 00:49:16,819
can't promise but we would we would be

00:49:10,940 --> 00:49:21,380
doing that and we we really loved

00:49:16,819 --> 00:49:23,839
primate and we have taken a decisions

00:49:21,380 --> 00:49:27,770
spot decision that we will be helping

00:49:23,839 --> 00:49:30,440
contribute to it so just a brief about

00:49:27,770 --> 00:49:34,069
us we are a cloud solutions company and

00:49:30,440 --> 00:49:35,690
a product company we help a lot of

00:49:34,069 --> 00:49:38,480
enterprises set up their private cloud

00:49:35,690 --> 00:49:42,230
and we also have a product and we help

00:49:38,480 --> 00:49:45,500
service providers set up their public

00:49:42,230 --> 00:49:47,060
cloud we have a marketplace product

00:49:45,500 --> 00:49:50,810
called a particular switch runs over and

00:49:47,060 --> 00:49:53,060
on top of cloud stack and allows any

00:49:50,810 --> 00:49:55,339
entity to use their infrastructure and

00:49:53,060 --> 00:49:57,290
sell the cloud as a service running on

00:49:55,339 --> 00:50:01,010
top of cloud stack we have external

00:49:57,290 --> 00:50:05,000
integrations also with backup as a

00:50:01,010 --> 00:50:06,560
service and other other software which

00:50:05,000 --> 00:50:09,560
can run on top of the cloud but there is

00:50:06,560 --> 00:50:11,690
a centralized billing engine again we

00:50:09,560 --> 00:50:16,640
have done a lot of private clouds and

00:50:11,690 --> 00:50:20,510
hybrid clouds for enterprises we are we

00:50:16,640 --> 00:50:22,849
typically target telcos cloud service

00:50:20,510 --> 00:50:25,040
providers but we have have we have done

00:50:22,849 --> 00:50:29,180
some stuff for airports and in the

00:50:25,040 --> 00:50:32,060
FinTech industry also and we have worked

00:50:29,180 --> 00:50:34,010
with customers in India and Nepal uma

00:50:32,060 --> 00:50:36,260
and Sri Lanka Southeast Asia

00:50:34,010 --> 00:50:40,339
bit of Middle Eastern African

00:50:36,260 --> 00:50:43,099
geographies these are references I

00:50:40,339 --> 00:50:48,290
didn't put the URL because you can just

00:50:43,099 --> 00:50:54,550
google and get the get details these are

00:50:48,290 --> 00:50:54,550
just the image credits any questions

00:51:10,690 --> 00:51:19,160
so when when we when we do the deploy

00:51:16,180 --> 00:51:22,060
virtual router and we do that we have to

00:51:19,160 --> 00:51:22,060
specify an offering

00:51:33,310 --> 00:51:42,590
yes but within that I can do that but

00:51:37,010 --> 00:51:44,000
then I need to know that then but then

00:51:42,590 --> 00:51:45,680
what will be required is for each

00:51:44,000 --> 00:51:49,850
virtual router I would need to have a

00:51:45,680 --> 00:51:51,590
separate network often right in a cloud

00:51:49,850 --> 00:51:53,780
service provider scenario that is not

00:51:51,590 --> 00:51:57,680
really feasible I would rather have a

00:51:53,780 --> 00:52:01,070
generic set of let's say ABCD even Z

00:51:57,680 --> 00:52:03,020
doesn't matter but a fixed set of VR

00:52:01,070 --> 00:52:13,490
offerings and then whenever I create the

00:52:03,020 --> 00:52:14,870
vir I map it to that yeah so that is it

00:52:13,490 --> 00:52:16,640
there is a there is an easy solution to

00:52:14,870 --> 00:52:19,610
that so what we do is when we deploy the

00:52:16,640 --> 00:52:21,560
VR we use our own portal right so we

00:52:19,610 --> 00:52:23,540
deploy the VR we know that it's not

00:52:21,560 --> 00:52:26,000
going to work so as part of the main

00:52:23,540 --> 00:52:27,470
call itself we shut it down change the

00:52:26,000 --> 00:52:31,340
system of ring and bring it up fine

00:52:27,470 --> 00:52:36,380
everything is hunky-dory here but when

00:52:31,340 --> 00:52:40,520
the customer does a cleanup I cannot tap

00:52:36,380 --> 00:52:42,230
in there right from if he if he does the

00:52:40,520 --> 00:52:45,250
cleanup from our hotel I can achieve

00:52:42,230 --> 00:52:48,680
that but if he does a cleanup natively

00:52:45,250 --> 00:52:52,670
then what happens is it brings up on the

00:52:48,680 --> 00:52:58,190
default offering right and the same goes

00:52:52,670 --> 00:53:02,830
for the storage tags as well the

00:52:58,190 --> 00:53:02,830
underlying storage so

00:53:04,539 --> 00:53:14,380
for his ability to create a network when

00:53:07,839 --> 00:53:20,429
you are creating an incorrect and he

00:53:14,380 --> 00:53:26,229
says there in the calls it does exist

00:53:20,429 --> 00:53:28,539
yes even even even the storage it does

00:53:26,229 --> 00:53:30,369
the system I am offering for storage

00:53:28,539 --> 00:53:34,449
that it does exist there we can specify

00:53:30,369 --> 00:53:35,969
a attack and ideally it should just like

00:53:34,449 --> 00:53:39,429
VM it should go and sit in that

00:53:35,969 --> 00:53:42,009
particular storage who wherever that

00:53:39,429 --> 00:53:46,809
storage has the turn but it doesn't

00:53:42,009 --> 00:53:49,630
happen so these are may be hacks but

00:53:46,809 --> 00:54:02,849
that's how it's been handled

00:53:49,630 --> 00:54:02,849

YouTube URL: https://www.youtube.com/watch?v=_IfilOpGWzo


