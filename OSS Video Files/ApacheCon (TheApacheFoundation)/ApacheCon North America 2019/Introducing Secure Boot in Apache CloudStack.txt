Title: Introducing Secure Boot in Apache CloudStack
Publication date: 2019-09-20
Playlist: ApacheCon North America 2019
Description: 
	Existing CloudStack supports legacy boot loader BIOS by default for Guest VM’s booting on Hypervisor(XEN, VMware, KVM etc). In Virtualization, hypervisor emulates the hardware for the Guest VM. BIOS {Basic Input-Output system} is a low-level software. The BIOS loads when a VM starts up, and the BIOS is responsible for waking up your VM’s hardware(emulated) components, ensures they are functioning properly, and then runs the boot loader that boots Windows or whatever other operating system have installed. The existing BIOS has serious limitations. It can only boot from drives of 2 TB or less. 3 TB drives are now common, and a computer with a BIOS can’t boot from them. That limitation is due to the way the BIOS’s Master Boot Record system works. BIOS can be used in devices that do not require large storage or security. UEFI { Unified Extensible Firmware Interface} can work alongside BIOS. It can sit on top of BIOS and work independently. Benefits of UEFI boot mode over Legacy BIOS boot mode include: Support for hard drive partitions larger than 2 TB, support for more than four partitions on a driven Fast booting, efficient power and system management, robust reliability and fault management
Captions: 
	00:00:04,630 --> 00:00:18,130
so not enough questions okay so we

00:00:13,959 --> 00:00:22,720
quickly go through basically this talk

00:00:18,130 --> 00:00:25,240
is about implementing UEFI bars for your

00:00:22,720 --> 00:00:27,580
guests instead of using the traditional

00:00:25,240 --> 00:00:30,189
wires and this will give you a

00:00:27,580 --> 00:00:33,400
flexibility in terms of taking advantage

00:00:30,189 --> 00:00:37,450
of some hardware specific stuff or doing

00:00:33,400 --> 00:00:41,230
a secure boot etc and then we'll show

00:00:37,450 --> 00:00:45,579
you what some screenshot about of the

00:00:41,230 --> 00:00:48,820
integration the way we have done it and

00:00:45,579 --> 00:00:53,379
then the support matrix so currently we

00:00:48,820 --> 00:00:59,559
have VMs boot in normal fashion lose the

00:00:53,379 --> 00:01:02,140
bias and there are many drawbacks you

00:00:59,559 --> 00:01:06,360
can read up on UEFI why you fi is better

00:01:02,140 --> 00:01:08,770
than Kurds about them but one of the

00:01:06,360 --> 00:01:12,880
thing is it can be overridden

00:01:08,770 --> 00:01:16,570
it can help but if the bootloader can be

00:01:12,880 --> 00:01:19,180
overwritten and hacked easily new efi

00:01:16,570 --> 00:01:20,590
has mechanisms and some security

00:01:19,180 --> 00:01:27,820
mechanisms to prevent that from

00:01:20,590 --> 00:01:34,979
happening so UEFI is extensible firmware

00:01:27,820 --> 00:01:40,810
interface a BIOS was defined in like

00:01:34,979 --> 00:01:43,240
1976 simple in that very long ago and

00:01:40,810 --> 00:01:46,180
then it was you know patched we had a

00:01:43,240 --> 00:01:50,770
bootloader and then we went through to

00:01:46,180 --> 00:01:53,259
two stage loading process and then GPT

00:01:50,770 --> 00:01:55,869
for those who know for handling the

00:01:53,259 --> 00:02:01,780
multiple partition problems and things

00:01:55,869 --> 00:02:04,680
like that so UEFI is kind of a answer to

00:02:01,780 --> 00:02:10,890
a lot of these problems and many more

00:02:04,680 --> 00:02:12,850
what's being done is the firmware itself

00:02:10,890 --> 00:02:16,760
abstracts the hardware as much as

00:02:12,850 --> 00:02:20,000
possible so you can even

00:02:16,760 --> 00:02:21,950
do try drivers device drivers that are

00:02:20,000 --> 00:02:24,260
common to multiple processor

00:02:21,950 --> 00:02:27,819
architectures and things like that

00:02:24,260 --> 00:02:31,040
plus it has the mechanism for doing

00:02:27,819 --> 00:02:34,370
doing key generation and protecting the

00:02:31,040 --> 00:02:38,030
bootloader part portion or the critical

00:02:34,370 --> 00:02:40,549
core part of it as well so quite a few

00:02:38,030 --> 00:02:44,900
of advantage advantages I think that's a

00:02:40,549 --> 00:02:47,599
good link that will give you a idea

00:02:44,900 --> 00:02:51,739
about what it can do one what it cannot

00:02:47,599 --> 00:02:54,530
do it this bunch of services that that

00:02:51,739 --> 00:02:56,780
at the boot time but during the whole

00:02:54,530 --> 00:02:59,629
lifecycle you can also have some apps

00:02:56,780 --> 00:03:03,590
written in UEFI firmware for error

00:02:59,629 --> 00:03:09,230
detection and communicating with OS or

00:03:03,590 --> 00:03:11,569
your BMC controller so it's it's

00:03:09,230 --> 00:03:16,430
interesting and all this now you can do

00:03:11,569 --> 00:03:22,579
it through your guests as well this is

00:03:16,430 --> 00:03:28,250
some of the high-level stuff most of

00:03:22,579 --> 00:03:30,620
them we got partition for more than two

00:03:28,250 --> 00:03:33,590
terabyte we've got more than four

00:03:30,620 --> 00:03:36,230
primary partitions we have logical

00:03:33,590 --> 00:03:40,459
partitions available and that's what was

00:03:36,230 --> 00:03:42,650
the way out booting process also can be

00:03:40,459 --> 00:03:44,690
customized so you know you are not going

00:03:42,650 --> 00:03:49,940
to go through certain hardware meetings

00:03:44,690 --> 00:03:51,950
a short circuit a few processes power

00:03:49,940 --> 00:03:56,989
and secure boot support is one of the

00:03:51,950 --> 00:03:59,530
important one and powering system

00:03:56,989 --> 00:04:03,980
management can also be optimized because

00:03:59,530 --> 00:04:05,870
it's all generic and can communicate to

00:04:03,980 --> 00:04:10,190
the upper layers in a way standardized

00:04:05,870 --> 00:04:15,010
4-way fault management I have a slide on

00:04:10,190 --> 00:04:19,489
that a little bit to just explain robust

00:04:15,010 --> 00:04:22,760
questionable and as I told you it so you

00:04:19,489 --> 00:04:26,360
can have more code like small apps if

00:04:22,760 --> 00:04:29,210
you really want to so it can do little

00:04:26,360 --> 00:04:30,680
more than and coordinate with BNC to

00:04:29,210 --> 00:04:34,220
provide more info

00:04:30,680 --> 00:04:37,760
going back and forth this is the fault

00:04:34,220 --> 00:04:41,980
management so basically you have low

00:04:37,760 --> 00:04:48,170
level errors that can be propagated to

00:04:41,980 --> 00:04:51,440
your OS basically and all this can be

00:04:48,170 --> 00:04:54,920
done written once so there are now UEFI

00:04:51,440 --> 00:04:59,450
codes standardized that always can

00:04:54,920 --> 00:05:06,080
retrieve about memory failing and other

00:04:59,450 --> 00:05:09,740
interrupts failing so that's that's you

00:05:06,080 --> 00:05:12,650
if I need some transition on both sides

00:05:09,740 --> 00:05:16,340
and the wayside as well so this is a

00:05:12,650 --> 00:05:20,870
legacy mode provided and the secure boot

00:05:16,340 --> 00:05:23,690
mode allowed so you got in legacy mode

00:05:20,870 --> 00:05:25,910
it will boot and similar to buyers but

00:05:23,690 --> 00:05:29,930
it will how it can take advantages of

00:05:25,910 --> 00:05:33,710
the drivers that are in the UEFI

00:05:29,930 --> 00:05:36,140
firmware I know the secure it's designed

00:05:33,710 --> 00:05:38,690
to protect the operating system against

00:05:36,140 --> 00:05:43,940
the code malicious core being loaded and

00:05:38,690 --> 00:05:48,160
executed in very early stages and it's I

00:05:43,940 --> 00:05:52,370
think stored in EFI files if my binaries

00:05:48,160 --> 00:05:55,220
and it's still evolving you have to be

00:05:52,370 --> 00:05:57,650
matured so they have got it reasonably

00:05:55,220 --> 00:06:00,580
tighten there's still people you know

00:05:57,650 --> 00:06:00,580
managing through it

00:06:01,310 --> 00:06:06,770
cloud second digression so what

00:06:03,380 --> 00:06:09,470
basically we have done is added option

00:06:06,770 --> 00:06:14,600
to deploy virtual machine API so you can

00:06:09,470 --> 00:06:16,250
say use the UEFI and if use UEFI then do

00:06:14,600 --> 00:06:21,860
you want to do it in the legacy mode or

00:06:16,250 --> 00:06:25,700
the secure boot mode so that's what kind

00:06:21,860 --> 00:06:29,840
of it looks like that now so first one

00:06:25,700 --> 00:06:32,750
is the traditional bias which is you

00:06:29,840 --> 00:06:35,090
verify and the second checkbox is saying

00:06:32,750 --> 00:06:39,890
whether you want a legacy one or a

00:06:35,090 --> 00:06:41,720
secure boot 1 and this also becomes

00:06:39,890 --> 00:06:43,590
handy when you are importing virtual

00:06:41,720 --> 00:06:50,370
machines images a

00:06:43,590 --> 00:06:52,800
windows 16:19 they will you will have to

00:06:50,370 --> 00:06:57,660
do less work you can just start using

00:06:52,800 --> 00:07:03,960
the UEFI mode code here and here it will

00:06:57,660 --> 00:07:06,750
show what more the VM is using this is

00:07:03,960 --> 00:07:12,090
how you can go and make sure that indeed

00:07:06,750 --> 00:07:18,570
your guest VM is using the secure boot

00:07:12,090 --> 00:07:19,050
mode and we implemented it for most high

00:07:18,570 --> 00:07:20,580
prices

00:07:19,050 --> 00:07:23,010
I think we have a voices are covered

00:07:20,580 --> 00:07:29,630
these are some of the versions for which

00:07:23,010 --> 00:07:29,630
we have done this work so it's not oh

00:07:30,050 --> 00:07:38,280
yeah the 2 hypervisors are not here kind

00:07:33,750 --> 00:07:52,260
of sensor on it is release or about to

00:07:38,280 --> 00:07:52,919
be released that we have tested and made

00:07:52,260 --> 00:07:56,370
sure it works

00:07:52,919 --> 00:07:59,940
give me about plus and minus 1 or minus

00:07:56,370 --> 00:08:05,789
1 or 2 but that's what we have kind of

00:07:59,940 --> 00:08:09,030
done any questions so this is a

00:08:05,789 --> 00:08:25,280
straightforward UEFI support for all

00:08:09,030 --> 00:08:25,280
hypervisors reddit reddit KVM Red Hat

00:08:27,900 --> 00:08:39,900
[Music]

00:08:29,450 --> 00:08:41,729
you want the qmu version oh I think I I

00:08:39,900 --> 00:08:47,839
have it somewhere I don't have it handy

00:08:41,729 --> 00:08:47,839
here but we'll pass it on Dino's

00:08:50,449 --> 00:08:57,079
yes I I don't know exactly which one

00:08:53,569 --> 00:08:59,899
today I'm going to depict pickup but you

00:08:57,079 --> 00:09:02,480
basically give a package in extra come

00:08:59,899 --> 00:09:03,740
online basically parameter and give the

00:09:02,480 --> 00:09:07,750
file name but I don't know the which

00:09:03,740 --> 00:09:07,750
file name or where is it picked up from

00:09:10,269 --> 00:09:18,649
it should be out do you have it we have

00:09:13,370 --> 00:09:21,860
you know we have PR out not yet it will

00:09:18,649 --> 00:09:40,759
be soon out let's we are almost almost

00:09:21,860 --> 00:09:46,069
there but will be out soon okay my

00:09:40,759 --> 00:09:48,050
apologies I don't know but I'll I will

00:09:46,069 --> 00:09:51,079
correct this and make sure then before

00:09:48,050 --> 00:10:18,110
we upload the slides we will correct

00:09:51,079 --> 00:10:19,579
this thing so the way to think about it

00:10:18,110 --> 00:10:25,160
should be probably template property

00:10:19,579 --> 00:10:27,380
also but when you are just doing

00:10:25,160 --> 00:10:30,550
deploying new virtual machines you may

00:10:27,380 --> 00:10:34,339
choose to do it in one way or the other

00:10:30,550 --> 00:10:35,769
depending on whether you want to take

00:10:34,339 --> 00:10:39,410
advantage of that or not

00:10:35,769 --> 00:10:42,170
and during the PR phase we can now add

00:10:39,410 --> 00:10:43,699
something or remove something we're also

00:10:42,170 --> 00:10:45,290
thinking about adding it at the service

00:10:43,699 --> 00:10:49,129
offering level whether it makes sense or

00:10:45,290 --> 00:10:53,019
not a secure boot may be a good idea to

00:10:49,129 --> 00:10:53,019
put it there I'm not sure

00:10:53,700 --> 00:11:29,410
so yeah you can have a peace offering

00:11:25,540 --> 00:11:30,910
applied to multiple templates so it's

00:11:29,410 --> 00:11:32,860
sometimes a combination of these two and

00:11:30,910 --> 00:11:36,730
that's why we are not kind of sure where

00:11:32,860 --> 00:11:39,460
to put it so we just put it it are at

00:11:36,730 --> 00:11:40,990
this level to start with I'm depending

00:11:39,460 --> 00:11:45,010
on what we get feedback we can change

00:11:40,990 --> 00:11:45,490
little bit yes there okay cool thank you

00:11:45,010 --> 00:11:49,350
guys

00:11:45,490 --> 00:11:49,350
why don't you come over

00:11:54,730 --> 00:11:56,820

YouTube URL: https://www.youtube.com/watch?v=r3Se_IObkrA


