Title: Modern UI for CloudStack
Publication date: 2019-09-20
Playlist: ApacheCon North America 2019
Description: 
	The CloudStack UI code has tolerated massive technical debt over the years and the UI codebase has reached a breaking point. In this talk, we will do a comparison of modern UI development techniques, the pros and cons of current UI UX and codebase, ideas and experiments of a new UI for CloudStack. We need to discuss and propose a new UI that:n* Has CloudMonkey like api discovery and show/hide/block, buttons/sections based on what is allowedn* URL router to navigate to resources, and clicking back button does not close the UIn* Easy to maintain, implement and extend via plugins etc.n* Does not take months to develop and port existing implementation to the new onen* Configurable, theme-able, don't use our own UI framework, but consider something like Vue/React/Angular etc.n* Explore a components based idea, show an api-auto-discovery approach to auto-generate boiler plate for UI component based on an API's request and response paramsn* Make UI more communicative about underlying infra state in real time with modern graphical libraries
Captions: 
	00:00:04,569 --> 00:00:11,019
thank you everyone for for coming to the

00:00:07,689 --> 00:00:13,270
conference and to our talk in this talk

00:00:11,019 --> 00:00:16,029
we'll talk about some modern UI concepts

00:00:13,270 --> 00:00:18,250
for cloud stack in some ideas and

00:00:16,029 --> 00:00:22,030
experiments in the whole journey and

00:00:18,250 --> 00:00:28,930
story let me start by introducing my

00:00:22,030 --> 00:00:31,090
colleague anuraag you to Kosta always

00:00:28,930 --> 00:00:32,949
completing one year now and I've been

00:00:31,090 --> 00:00:36,010
working with Shake loop it's been a very

00:00:32,949 --> 00:00:38,079
exciting journey previously I worked at

00:00:36,010 --> 00:00:38,739
companies like Twitter but never no

00:00:38,079 --> 00:00:42,339
thick sauce

00:00:38,739 --> 00:00:45,519
so this is my first open solution thank

00:00:42,339 --> 00:00:47,139
you not I must start dialog is very

00:00:45,519 --> 00:00:50,920
smart guy like one of the smartest

00:00:47,139 --> 00:00:54,489
people have worked with privilege to you

00:00:50,920 --> 00:00:57,399
know have him useful about me I'm rather

00:00:54,489 --> 00:00:59,889
I've come from Gurgaon India I'm one of

00:00:57,399 --> 00:01:03,219
the oldest dinosaurs in the community

00:00:59,889 --> 00:01:05,710
seven plus is going strong in the cloth

00:01:03,219 --> 00:01:07,390
sack community the only difference is in

00:01:05,710 --> 00:01:09,310
the last seven years the dinosaur has

00:01:07,390 --> 00:01:11,680
gained a lot of weight as cronin of

00:01:09,310 --> 00:01:14,950
stash lost some hair and some of the

00:01:11,680 --> 00:01:17,110
hair has gone gray other than that I

00:01:14,950 --> 00:01:19,240
love cats a lot these are my cat's

00:01:17,110 --> 00:01:21,700
actually you can see at the bottom and

00:01:19,240 --> 00:01:25,630
that's that's a reference of Paul's

00:01:21,700 --> 00:01:27,250
Joker in his keynote so in this

00:01:25,630 --> 00:01:29,710
presentation what we'll do is we'll

00:01:27,250 --> 00:01:31,810
basically I'll try to go over from my

00:01:29,710 --> 00:01:34,600
perspective the state of the cloud stack

00:01:31,810 --> 00:01:36,250
UI some lessons learned in the last

00:01:34,600 --> 00:01:38,380
seven years some experiments will see

00:01:36,250 --> 00:01:41,410
that I've actually gone through but no

00:01:38,380 --> 00:01:43,210
nothing to kind of fruition I'll talk

00:01:41,410 --> 00:01:45,550
about some side project then I started

00:01:43,210 --> 00:01:48,610
will do some demos and maybe we'll

00:01:45,550 --> 00:01:50,890
discuss proposed like what should be the

00:01:48,610 --> 00:01:54,790
next step for the community as general

00:01:50,890 --> 00:01:57,670
the the Apache way so the state of cloud

00:01:54,790 --> 00:02:00,220
stack UI I think one of the so when

00:01:57,670 --> 00:02:03,909
compared to other stacks one of the pros

00:02:00,220 --> 00:02:06,900
of cloud stack is that the UI this is

00:02:03,909 --> 00:02:09,190
something that stands out it's easy for

00:02:06,900 --> 00:02:11,470
someone new to kind of play with a nice

00:02:09,190 --> 00:02:14,769
platform the UI provides all of that

00:02:11,470 --> 00:02:17,709
that was kind of true in 2008 some seven

00:02:14,769 --> 00:02:18,310
to ten years ago but in those 10 years a

00:02:17,709 --> 00:02:20,680
lot of things

00:02:18,310 --> 00:02:23,410
changed but I would say Lord Sai Qi is

00:02:20,680 --> 00:02:25,840
the last one which has gone any major

00:02:23,410 --> 00:02:27,510
changes the UI if you look at the code

00:02:25,840 --> 00:02:30,420
base for example it's highly

00:02:27,510 --> 00:02:35,110
imperatively styled code jQuery based

00:02:30,420 --> 00:02:37,599
and a lot of the methodologies are or

00:02:35,110 --> 00:02:42,330
like the CSS and a lot of those changes

00:02:37,599 --> 00:02:45,819
they're hard to to maintain administrate

00:02:42,330 --> 00:02:48,610
extend and get new new developers to

00:02:45,819 --> 00:02:50,319
kind of you know teach them cover of

00:02:48,610 --> 00:02:51,970
thing is there is no browser history so

00:02:50,319 --> 00:02:53,860
one of the things that most of the new

00:02:51,970 --> 00:02:55,269
people do is they will log in to plot

00:02:53,860 --> 00:02:57,610
stack they will go to a different view

00:02:55,269 --> 00:02:59,140
click on the back button and you are

00:02:57,610 --> 00:03:01,150
back to the login page

00:02:59,140 --> 00:03:05,019
oh you back to the previous you know

00:03:01,150 --> 00:03:07,870
website that you are looking into there

00:03:05,019 --> 00:03:09,459
are single JavaScript files that are so

00:03:07,870 --> 00:03:12,280
large like there there is a file called

00:03:09,459 --> 00:03:15,519
system dot J's that's like 20 through 23

00:03:12,280 --> 00:03:18,610
22 thousand lines of code so it's

00:03:15,519 --> 00:03:20,440
unmaintainable now I've specifically

00:03:18,610 --> 00:03:22,810
mentioned and written the ruler there

00:03:20,440 --> 00:03:25,810
it's actually not joke I'll say the UI

00:03:22,810 --> 00:03:27,820
is largely ruler driven for those of us

00:03:25,810 --> 00:03:29,320
who actually don't know the history I've

00:03:27,820 --> 00:03:31,290
seen my colleagues in my previous

00:03:29,320 --> 00:03:33,940
organization where they will use a

00:03:31,290 --> 00:03:36,130
standard monitor tilt them so you get

00:03:33,940 --> 00:03:38,109
like a land from a portrait like a

00:03:36,130 --> 00:03:40,690
landscape to portrait view then they'll

00:03:38,109 --> 00:03:42,549
use a large ruler to actually match and

00:03:40,690 --> 00:03:45,910
ensure that the braces are properly

00:03:42,549 --> 00:03:52,900
closed so so that's actually for real

00:03:45,910 --> 00:03:54,910
and you can see a lot of indentations

00:03:52,900 --> 00:03:57,910
and whatnot and that's how the clouds

00:03:54,910 --> 00:04:02,440
suck you I was n is being is being

00:03:57,910 --> 00:04:04,269
developed that's an issue so that's just

00:04:02,440 --> 00:04:08,109
to emphasize on the fact that it's hard

00:04:04,269 --> 00:04:10,180
to maintain extend and and NNN develop

00:04:08,109 --> 00:04:12,220
and it's certainly very difficult for

00:04:10,180 --> 00:04:14,620
new engineers that we hire to get them

00:04:12,220 --> 00:04:17,769
started learn on board and whatnot so

00:04:14,620 --> 00:04:21,160
those are some key issues

00:04:17,769 --> 00:04:23,770
so what I did was we have a lot of this

00:04:21,160 --> 00:04:25,389
kind I certainly have this itch so about

00:04:23,770 --> 00:04:28,539
a couple of years ago I thought you know

00:04:25,389 --> 00:04:30,430
late it's time to kind of you know write

00:04:28,539 --> 00:04:32,830
a new UI so I started with this small

00:04:30,430 --> 00:04:35,380
project internally called Project X

00:04:32,830 --> 00:04:37,389
because I couldn't think of a name and

00:04:35,380 --> 00:04:40,660
this is a screenshot of that project now

00:04:37,389 --> 00:04:42,430
this was just the POC I actually

00:04:40,660 --> 00:04:44,080
circulated that between my colleagues

00:04:42,430 --> 00:04:46,000
and some friends in the community but

00:04:44,080 --> 00:04:46,599
not at large so nobody has actually seen

00:04:46,000 --> 00:04:50,020
this before

00:04:46,599 --> 00:04:52,870
and the idea was of of to to build a UI

00:04:50,020 --> 00:04:55,150
X kind of more modern that can be

00:04:52,870 --> 00:04:56,560
responsive and flexible so that it can

00:04:55,150 --> 00:04:58,960
adapt to the various screens like

00:04:56,560 --> 00:05:00,940
tablets and phones in those kind of

00:04:58,960 --> 00:05:03,970
things but one of the things I learned

00:05:00,940 --> 00:05:07,270
is it UI is very hard at that time in

00:05:03,970 --> 00:05:11,020
2014 there was about 300 400 API so you

00:05:07,270 --> 00:05:12,580
can think of every API to do do to do

00:05:11,020 --> 00:05:14,979
something with the UI element whether it

00:05:12,580 --> 00:05:17,409
is an action button a table that lists a

00:05:14,979 --> 00:05:19,449
few things a detailed view like this you

00:05:17,409 --> 00:05:22,060
can see in this example we have an

00:05:19,449 --> 00:05:23,889
instances tab where you can search in

00:05:22,060 --> 00:05:25,810
sort of a middle kind of widget and on

00:05:23,889 --> 00:05:28,000
the right hand side things show up which

00:05:25,810 --> 00:05:29,710
has different tabs like next volume

00:05:28,000 --> 00:05:33,880
snapshot details and there are action

00:05:29,710 --> 00:05:35,139
buttons to actually implement this took

00:05:33,880 --> 00:05:37,870
me a lot of time and you have to

00:05:35,139 --> 00:05:40,419
manually implement a specific view with

00:05:37,870 --> 00:05:42,250
an API in mind so every API can have a

00:05:40,419 --> 00:05:44,889
different view and to do that manually

00:05:42,250 --> 00:05:47,349
for let's say 600 api's now so cloud

00:05:44,889 --> 00:05:50,139
stack as it stands right now has more

00:05:47,349 --> 00:05:53,139
than 600 APs let's do a simple math

00:05:50,139 --> 00:05:55,780
let's say we take an average developer

00:05:53,139 --> 00:05:57,729
that can implement one view in a day so

00:05:55,780 --> 00:05:59,979
that 600 days are about two years or

00:05:57,729 --> 00:06:02,009
slightly more than that of effort to

00:05:59,979 --> 00:06:06,550
actually build something from scratch

00:06:02,009 --> 00:06:08,819
completely new I actually discuss a lot

00:06:06,550 --> 00:06:12,130
with Paul and Giles Michael ijen and

00:06:08,819 --> 00:06:13,539
leaders akshay blue and we kind of felt

00:06:12,130 --> 00:06:15,509
that it's it's probably not the right

00:06:13,539 --> 00:06:18,699
time to work on something from scratch

00:06:15,509 --> 00:06:21,490
so a lot of learning actually came from

00:06:18,699 --> 00:06:23,199
project X and the other thing is since

00:06:21,490 --> 00:06:25,449
this was manually drawn so what I did

00:06:23,199 --> 00:06:27,520
was I looked into a lot of those api's

00:06:25,449 --> 00:06:29,990
and resources like entities and

00:06:27,520 --> 00:06:31,370
resources in cloud stack for example

00:06:29,990 --> 00:06:33,620
you know there are cloud resources

00:06:31,370 --> 00:06:36,260
infrastructure resources and then

00:06:33,620 --> 00:06:38,600
business resources cloud resources are

00:06:36,260 --> 00:06:40,700
things that users consumes like your VM

00:06:38,600 --> 00:06:43,370
instances and volumes infrastructure

00:06:40,700 --> 00:06:44,210
things are like zone spots cluster hosts

00:06:43,370 --> 00:06:45,860
and whatnot

00:06:44,210 --> 00:06:48,380
and then you have those business

00:06:45,860 --> 00:06:52,460
resources like your user role admins and

00:06:48,380 --> 00:06:54,889
whatnot and this graph tries to I mean I

00:06:52,460 --> 00:06:56,930
did this and except this exercise in in

00:06:54,889 --> 00:06:58,970
Project X just to kind of see how can

00:06:56,930 --> 00:07:01,610
one entity relate to others for example

00:06:58,970 --> 00:07:03,800
a virtual machine can have volumes can

00:07:01,610 --> 00:07:05,750
be owned by an account and can run on a

00:07:03,800 --> 00:07:07,639
host which is part of a zone so a lot of

00:07:05,750 --> 00:07:09,770
those things you also have to consider

00:07:07,639 --> 00:07:11,270
when you implement a UI so you can

00:07:09,770 --> 00:07:14,000
navigate and go from one place to

00:07:11,270 --> 00:07:16,280
another place that was kind of a hard

00:07:14,000 --> 00:07:18,800
problem to implement this on a large

00:07:16,280 --> 00:07:22,070
scale for all those three to 600 APs

00:07:18,800 --> 00:07:24,040
and I learned that it's probably best to

00:07:22,070 --> 00:07:26,810
pin this project beside project

00:07:24,040 --> 00:07:30,500
the other thing I think this is slightly

00:07:26,810 --> 00:07:33,830
more my own successful side project

00:07:30,500 --> 00:07:35,840
which started in 2012 and I was like at

00:07:33,830 --> 00:07:38,210
that time people used to first login

00:07:35,840 --> 00:07:40,700
into cloud stack and then they would use

00:07:38,210 --> 00:07:43,490
the API to manually key in keys and

00:07:40,700 --> 00:07:45,950
parameters of an API in the browser to

00:07:43,490 --> 00:07:47,630
execute and just an API so if you if you

00:07:45,950 --> 00:07:50,120
are a UI developer if you have an API

00:07:47,630 --> 00:07:52,490
developer you are like a new API you do

00:07:50,120 --> 00:07:55,669
it manually and thought why isn't there

00:07:52,490 --> 00:07:57,650
a CLI for cloud stack on the right-hand

00:07:55,669 --> 00:07:59,630
side you can see a gift that shows you

00:07:57,650 --> 00:08:02,330
the latest cloud monkey which is a :

00:07:59,630 --> 00:08:03,710
base single binary but that's not

00:08:02,330 --> 00:08:05,870
important the important thing is what

00:08:03,710 --> 00:08:09,620
are the lessons I learned the lessons I

00:08:05,870 --> 00:08:11,360
learned this UI even writing C allies

00:08:09,620 --> 00:08:13,340
could be hard if let's say if I were to

00:08:11,360 --> 00:08:15,830
support those 600 ApS how would I do

00:08:13,340 --> 00:08:19,729
that so at that time I thought let me

00:08:15,830 --> 00:08:21,410
first try to find out those 600 APs at

00:08:19,729 --> 00:08:24,560
that point of time there was no API

00:08:21,410 --> 00:08:27,889
discovery feature what I used then was

00:08:24,560 --> 00:08:29,630
to use Marvin library and then scan all

00:08:27,889 --> 00:08:31,700
the ApS in the Marvin library to find

00:08:29,630 --> 00:08:33,469
out those ap is and then come up with

00:08:31,700 --> 00:08:35,060
the convention so the convention I came

00:08:33,469 --> 00:08:36,260
up with is most of the a passing cloud

00:08:35,060 --> 00:08:39,200
stack would camelcase

00:08:36,260 --> 00:08:41,659
so let me split at the hump of the camel

00:08:39,200 --> 00:08:42,779
case that means camel becomes the kind

00:08:41,659 --> 00:08:44,519
of verb and

00:08:42,779 --> 00:08:46,949
the case in this example became sort of

00:08:44,519 --> 00:08:48,899
the subject or noun so if you were to

00:08:46,949 --> 00:08:51,420
deploy if you were to launch an API you

00:08:48,899 --> 00:08:54,629
will simply you know do it in this way

00:08:51,420 --> 00:08:56,550
so you get ApS automatically executed

00:08:54,629 --> 00:08:59,759
and order completed in cloud monkey and

00:08:56,550 --> 00:09:02,939
then later on with another project I was

00:08:59,759 --> 00:09:05,430
given to work on API Docs so it's funny

00:09:02,939 --> 00:09:06,930
story how API discovery came up I was

00:09:05,430 --> 00:09:08,970
supposed to add some annotations on

00:09:06,930 --> 00:09:10,769
those 600 api's on each of the

00:09:08,970 --> 00:09:13,410
parameters in each of the API to

00:09:10,769 --> 00:09:14,699
generate a paradox for users I thought

00:09:13,410 --> 00:09:16,649
can I do something clever and

00:09:14,699 --> 00:09:19,680
interesting to make it online that means

00:09:16,649 --> 00:09:22,050
you can do it some sort of API discovery

00:09:19,680 --> 00:09:24,870
that means have an online API Docs

00:09:22,050 --> 00:09:26,699
that's how API discovery came up and I

00:09:24,870 --> 00:09:29,639
use the API discovery in cloud monkey to

00:09:26,699 --> 00:09:31,680
allow the sync feature so you get so

00:09:29,639 --> 00:09:34,110
that kind of enables the lesson learned

00:09:31,680 --> 00:09:35,879
is that enables the release management

00:09:34,110 --> 00:09:37,889
development of cloud monkey to be

00:09:35,879 --> 00:09:40,319
separate from cloud stack so you can

00:09:37,889 --> 00:09:41,790
sync those api's and add new features in

00:09:40,319 --> 00:09:43,559
cloud monkey and every time there's a

00:09:41,790 --> 00:09:45,240
new release of cloud start I don't need

00:09:43,559 --> 00:09:47,910
to release a new version of cloud monkey

00:09:45,240 --> 00:09:49,680
because of this increaseth then some

00:09:47,910 --> 00:09:52,589
other features came in like parameter

00:09:49,680 --> 00:09:55,339
completion and the way I did that was I

00:09:52,589 --> 00:09:58,439
added some annotations in the API so I

00:09:55,339 --> 00:10:00,839
did it once and it took me like two

00:09:58,439 --> 00:10:02,939
three months to get it done but then

00:10:00,839 --> 00:10:05,040
after that it became a standard in more

00:10:02,939 --> 00:10:07,800
and more people when they added the API

00:10:05,040 --> 00:10:09,509
is there they I think unconsciously I

00:10:07,800 --> 00:10:12,029
did those parameters and what those

00:10:09,509 --> 00:10:13,769
parameters did was allowed me to do

00:10:12,029 --> 00:10:16,110
parametric completion for example

00:10:13,769 --> 00:10:18,779
there's an API which accepts an ID

00:10:16,110 --> 00:10:21,509
parameter that is of UUID type so let me

00:10:18,779 --> 00:10:24,329
find how that how to get you IDs for

00:10:21,509 --> 00:10:26,189
that parameter so we do some sort of

00:10:24,329 --> 00:10:28,350
convention based discovery that means

00:10:26,189 --> 00:10:30,990
let's say if the keyword is storage ID

00:10:28,350 --> 00:10:34,860
most likely storage ID is returned by an

00:10:30,990 --> 00:10:36,569
API which lists storage or some relevant

00:10:34,860 --> 00:10:41,670
API so that's how parameter kind of

00:10:36,569 --> 00:10:43,740
completion came up so now I've been

00:10:41,670 --> 00:10:48,420
struggling with the idea that let's do a

00:10:43,740 --> 00:10:50,160
modern UI that's kind of a declarative

00:10:48,420 --> 00:10:52,529
that means I just say that go and

00:10:50,160 --> 00:10:55,110
display this I don't need to tell the UI

00:10:52,529 --> 00:10:56,050
in terms of code that how you show that

00:10:55,110 --> 00:10:57,490
exactly

00:10:56,050 --> 00:11:00,040
dumb point of view like how do you

00:10:57,490 --> 00:11:01,420
actually display the I just say go and

00:11:00,040 --> 00:11:04,269
display this data I don't care how you

00:11:01,420 --> 00:11:06,519
would display this data and I want to I

00:11:04,269 --> 00:11:07,990
want the new UI to have API discovery

00:11:06,519 --> 00:11:10,060
and parameter completion like cloud

00:11:07,990 --> 00:11:13,180
monkey why because the 600 API is that

00:11:10,060 --> 00:11:16,600
still 8 1 to 2 years worth of effort if

00:11:13,180 --> 00:11:18,550
one has to do it from scratch so how can

00:11:16,600 --> 00:11:22,779
I reduce that time can I do something

00:11:18,550 --> 00:11:25,660
smart and intelligent 2 to do it can I

00:11:22,779 --> 00:11:27,610
use both API discovery in parametric

00:11:25,660 --> 00:11:30,100
completion to do auto-generated UI

00:11:27,610 --> 00:11:31,779
widgets can I make use of the knowledge

00:11:30,100 --> 00:11:33,880
of what a Piazza of labels what

00:11:31,779 --> 00:11:35,709
parameters are available what types of

00:11:33,880 --> 00:11:37,240
those parameters are and how can I

00:11:35,709 --> 00:11:40,450
complete them to automatically generate

00:11:37,240 --> 00:11:42,790
these widgets and whatnot and can I have

00:11:40,450 --> 00:11:45,180
a more role based permission so right

00:11:42,790 --> 00:11:47,620
now in cloud stack we have a strict

00:11:45,180 --> 00:11:50,290
assumption that you have a root admin a

00:11:47,620 --> 00:11:52,209
domain admin and a user and there are

00:11:50,290 --> 00:11:54,730
certain ApS that are allowed for each of

00:11:52,209 --> 00:11:57,910
those types with the introduction of the

00:11:54,730 --> 00:12:00,160
dynamic roles feature you can now create

00:11:57,910 --> 00:12:01,750
a custom role and say this role can only

00:12:00,160 --> 00:12:04,300
do let's say you're only admin that

00:12:01,750 --> 00:12:06,490
means it can only do all the APIs that

00:12:04,300 --> 00:12:08,740
start with less star or get started and

00:12:06,490 --> 00:12:12,339
those things are now possible so can the

00:12:08,740 --> 00:12:14,230
UI not assume the user to be of any of

00:12:12,339 --> 00:12:16,149
those three static types can we simply

00:12:14,230 --> 00:12:18,520
work on the fact that these are the APS

00:12:16,149 --> 00:12:20,770
available and whether you are able to

00:12:18,520 --> 00:12:24,000
execute that if you are not that was

00:12:20,770 --> 00:12:26,709
sort of I think these are sort of my

00:12:24,000 --> 00:12:29,230
things that I discussed with Paul and

00:12:26,709 --> 00:12:30,700
say let's discuss what are the require

00:12:29,230 --> 00:12:33,520
and so a lot of input also came from

00:12:30,700 --> 00:12:35,770
Paul on this and one thing I wanted to

00:12:33,520 --> 00:12:38,079
do was let's see if we can adopt some

00:12:35,770 --> 00:12:41,230
modern techniques some development

00:12:38,079 --> 00:12:43,449
styles can we make it easy for people to

00:12:41,230 --> 00:12:46,720
understand read extend develop maintain

00:12:43,449 --> 00:12:48,820
so that those are the requirements the

00:12:46,720 --> 00:12:50,860
last thing I would add is if you look at

00:12:48,820 --> 00:12:53,860
thought stacks API and code base in

00:12:50,860 --> 00:12:57,820
general we when we started some ten

00:12:53,860 --> 00:12:59,500
eleven years ago the code base I mean a

00:12:57,820 --> 00:13:01,149
lot of the projects were not available

00:12:59,500 --> 00:13:03,579
so we had to build everything ourselves

00:13:01,149 --> 00:13:05,230
from scratch so so whether it is the

00:13:03,579 --> 00:13:07,779
database layer in cloud stack whether it

00:13:05,230 --> 00:13:09,279
is the console proxy whether is it's the

00:13:07,779 --> 00:13:12,999
plug-in system whether in

00:13:09,279 --> 00:13:16,300
uf specifically we have our own UI

00:13:12,999 --> 00:13:19,509
framework on top of jQuery then we have

00:13:16,300 --> 00:13:21,610
our own styling UI framework that helps

00:13:19,509 --> 00:13:24,399
us to you know draw the tables buttons

00:13:21,610 --> 00:13:28,689
and icons and all of that so I want to

00:13:24,399 --> 00:13:30,670
not use I want to limit creating

00:13:28,689 --> 00:13:34,089
something new so let's go and be an

00:13:30,670 --> 00:13:35,649
actual let's ensure the UI could be a

00:13:34,089 --> 00:13:37,779
very good open source project in the

00:13:35,649 --> 00:13:39,519
sense that it reuses other relevant

00:13:37,779 --> 00:13:43,199
encode open source projects so that we

00:13:39,519 --> 00:13:43,199
don't have to do it ourselves

00:13:43,589 --> 00:13:49,990
let me just give you an example of intox

00:13:48,279 --> 00:13:52,660
something about a pair discovery and

00:13:49,990 --> 00:13:54,220
parametric completions so this is what I

00:13:52,660 --> 00:13:56,949
have sort of already explained that

00:13:54,220 --> 00:13:58,809
there's an API called Escapist you

00:13:56,949 --> 00:14:01,420
execute that and you get like an area of

00:13:58,809 --> 00:14:04,120
various API is that you are allowed for

00:14:01,420 --> 00:14:08,769
a logged in user or the user with the

00:14:04,120 --> 00:14:11,019
given API keys and secret keys in the

00:14:08,769 --> 00:14:13,860
API request so as part of the response

00:14:11,019 --> 00:14:17,980
of the list ApS we get the a pair name

00:14:13,860 --> 00:14:20,350
and an area of arguments that you can

00:14:17,980 --> 00:14:23,019
use so and for each argument you get a

00:14:20,350 --> 00:14:24,639
type in some description some limits

00:14:23,019 --> 00:14:27,730
like lengths and things things like that

00:14:24,639 --> 00:14:30,069
and we also know for each API what is

00:14:27,730 --> 00:14:32,110
the response may look like what kind of

00:14:30,069 --> 00:14:38,079
jason may be returned as part of the

00:14:32,110 --> 00:14:40,000
response and then during the development

00:14:38,079 --> 00:14:42,939
you will see that there is a convention

00:14:40,000 --> 00:14:45,610
driven mapping of aps for all input

00:14:42,939 --> 00:14:47,500
types and arguments so if there is a

00:14:45,610 --> 00:14:50,019
keyword called virtual machine ID that

00:14:47,500 --> 00:14:51,550
will be used across other api's that

00:14:50,019 --> 00:14:55,120
have something to do with virtual

00:14:51,550 --> 00:14:56,529
machines and things like that then there

00:14:55,120 --> 00:14:58,329
is one thing I mentioned in the

00:14:56,529 --> 00:15:01,540
requirements slide which is we want to

00:14:58,329 --> 00:15:03,309
make it declarative so this is a slide

00:15:01,540 --> 00:15:06,009
where I want to introduce you to web

00:15:03,309 --> 00:15:07,660
components for me also this was

00:15:06,009 --> 00:15:10,600
something new about 1 to 2 years ago

00:15:07,660 --> 00:15:12,399
what a web component is it's a reusable

00:15:10,600 --> 00:15:15,699
building block and it promotes

00:15:12,399 --> 00:15:17,920
encapsulation and interoperability on

00:15:15,699 --> 00:15:19,629
the right hand side you can see it's a

00:15:17,920 --> 00:15:21,970
it's a web component where you define

00:15:19,629 --> 00:15:24,189
the HTML so you see there is a template

00:15:21,970 --> 00:15:26,769
some greeting in curly double curly

00:15:24,189 --> 00:15:28,989
braces so that's the what the structure

00:15:26,769 --> 00:15:31,449
should look like you have a script where

00:15:28,989 --> 00:15:33,789
you can put in some code to say what a

00:15:31,449 --> 00:15:35,319
variable or value or a method you can

00:15:33,789 --> 00:15:37,299
declare all those things in that block

00:15:35,319 --> 00:15:39,970
and then you have a style so this is a

00:15:37,299 --> 00:15:42,519
example of a view component where you

00:15:39,970 --> 00:15:44,349
define a new HTML element called hello

00:15:42,519 --> 00:15:48,429
you can see so you put it there in your

00:15:44,349 --> 00:15:51,399
in any web page in HTML file and you get

00:15:48,429 --> 00:15:53,409
this sort of new component so HTML file

00:15:51,399 --> 00:15:56,289
kind of gives you those basic components

00:15:53,409 --> 00:15:58,809
like paragraphs like a button like a

00:15:56,289 --> 00:16:00,549
radio button and check box and those

00:15:58,809 --> 00:16:02,889
kind of things but the idea of web

00:16:00,549 --> 00:16:05,229
component is can you define and create

00:16:02,889 --> 00:16:07,899
something new sort of a black box that

00:16:05,229 --> 00:16:09,669
takes in some inputs that's some

00:16:07,899 --> 00:16:12,519
behavior maybe it can give you an output

00:16:09,669 --> 00:16:13,569
also and the idea is that if we have

00:16:12,519 --> 00:16:15,869
something like this

00:16:13,569 --> 00:16:18,759
notice here we haven't actually told

00:16:15,869 --> 00:16:21,339
where this component in what section in

00:16:18,759 --> 00:16:23,439
what CSS selected it will go and render

00:16:21,339 --> 00:16:25,029
this element so that's the idea of the

00:16:23,439 --> 00:16:27,489
clarity of programming you simply want

00:16:25,029 --> 00:16:31,359
to declare a variable and let the cold

00:16:27,489 --> 00:16:33,579
figure out the Dom's in whatnot so with

00:16:31,359 --> 00:16:35,709
these requirements actually went in try

00:16:33,579 --> 00:16:39,970
to survey existing CloudStack UI because

00:16:35,709 --> 00:16:41,529
again I sincerely don't want to start

00:16:39,970 --> 00:16:43,629
something from scratch because as I

00:16:41,529 --> 00:16:46,419
mentioned it's a lot of work so I looked

00:16:43,629 --> 00:16:49,359
into some existing UI and primarily I

00:16:46,419 --> 00:16:52,869
think the most up-to-date UI open-source

00:16:49,359 --> 00:16:55,059
UI is the you are from bit works but the

00:16:52,869 --> 00:16:56,979
issue is that it doesn't still fulfill

00:16:55,059 --> 00:17:00,549
all those requirements that we discussed

00:16:56,979 --> 00:17:03,549
specifically the ease of extension API

00:17:00,549 --> 00:17:06,669
discovery how can it adapt to changes in

00:17:03,549 --> 00:17:07,959
the API how can it discover new APIs and

00:17:06,669 --> 00:17:10,209
show widgets so all those things were

00:17:07,959 --> 00:17:13,480
not possible the other thing I should

00:17:10,209 --> 00:17:15,789
mention is Project X which was my side

00:17:13,480 --> 00:17:19,389
project experiment was written using

00:17:15,789 --> 00:17:21,490
bootstrap using angularjs and the

00:17:19,389 --> 00:17:23,500
earlier of angularjs and bit works here

00:17:21,490 --> 00:17:26,049
is now written in material you are and

00:17:23,500 --> 00:17:29,769
uses angularjs but the thing about

00:17:26,049 --> 00:17:32,320
angularjs is I mean we as a community

00:17:29,769 --> 00:17:35,049
the API has been broken couple of times

00:17:32,320 --> 00:17:37,720
it's a very large framework to

00:17:35,049 --> 00:17:40,059
do that so when I looked into the bit

00:17:37,720 --> 00:17:41,559
works cloud sag UI codebase it was hard

00:17:40,059 --> 00:17:43,809
for me to understand I couldn't actually

00:17:41,559 --> 00:17:45,489
understand anything because the

00:17:43,809 --> 00:17:47,739
components were not clear enough like

00:17:45,489 --> 00:17:49,989
the implementation was not clear enough

00:17:47,739 --> 00:17:52,119
for me to develop so one of the

00:17:49,989 --> 00:17:54,970
requirements was also that it's easy to

00:17:52,119 --> 00:17:58,090
learn and develop in extent and the the

00:17:54,970 --> 00:18:00,070
main thing is it doesn't support order

00:17:58,090 --> 00:18:03,580
discovery and all those cool

00:18:00,070 --> 00:18:06,190
requirements so wit works UI was

00:18:03,580 --> 00:18:09,519
probably not going to make it further

00:18:06,190 --> 00:18:11,859
further down it was primarily a UI user

00:18:09,519 --> 00:18:14,590
facing UI so just for the users and what

00:18:11,859 --> 00:18:17,559
I wanted in the new modern UI was

00:18:14,590 --> 00:18:19,149
something that can do all APIs a role

00:18:17,559 --> 00:18:22,059
based API so it doesn't assume whether

00:18:19,149 --> 00:18:23,950
it is a user or admin should just say it

00:18:22,059 --> 00:18:26,230
I have logged in tell me what are they

00:18:23,950 --> 00:18:28,090
guys based on the api's these are the

00:18:26,230 --> 00:18:29,919
things you can do in the UI I looked

00:18:28,090 --> 00:18:31,450
into a couple of more and there I

00:18:29,919 --> 00:18:35,320
actually found couple of interesting

00:18:31,450 --> 00:18:37,480
UI's and portals from other friends in

00:18:35,320 --> 00:18:39,340
the community but they were not open so

00:18:37,480 --> 00:18:41,679
they were specific to their organization

00:18:39,340 --> 00:18:46,330
or their user base so that's not going

00:18:41,679 --> 00:18:48,249
to cut it then I looked ok then I kind

00:18:46,330 --> 00:18:50,649
of early in this year I kind of decided

00:18:48,249 --> 00:18:52,509
that doesn't look like I I have to start

00:18:50,649 --> 00:18:54,419
from scratch because I surveyed

00:18:52,509 --> 00:18:58,239
everything and I couldn't find anything

00:18:54,419 --> 00:19:00,789
suitable for for that modern UI so I

00:18:58,239 --> 00:19:02,379
surveyed various JavaScript frameworks

00:19:00,789 --> 00:19:05,379
where the idea is that JavaScript

00:19:02,379 --> 00:19:07,809
framework is specifically just for the

00:19:05,379 --> 00:19:10,029
logic I also looked into some front-end

00:19:07,809 --> 00:19:12,519
feynman because I don't want to write my

00:19:10,029 --> 00:19:14,889
own framework on how to draw and I can

00:19:12,519 --> 00:19:16,509
draw a button and draw this stack I want

00:19:14,889 --> 00:19:17,409
the something ready-made that I can take

00:19:16,509 --> 00:19:19,029
off the shelf

00:19:17,409 --> 00:19:22,059
and it has to be open so so I looked

00:19:19,029 --> 00:19:24,190
into various options and I also learnt

00:19:22,059 --> 00:19:26,169
and looked into some model toolings and

00:19:24,190 --> 00:19:31,749
methodologies and learned taught myself

00:19:26,169 --> 00:19:33,129
that and one thing I really like is we

00:19:31,749 --> 00:19:35,590
had a partially we are community driven

00:19:33,129 --> 00:19:38,019
so the dependencies and all the things

00:19:35,590 --> 00:19:41,320
that we should use should also reflect

00:19:38,019 --> 00:19:43,840
that it has to be community based it has

00:19:41,320 --> 00:19:46,359
to be something like Apache and one

00:19:43,840 --> 00:19:48,669
thing I really like is vue.js it's it's

00:19:46,359 --> 00:19:49,290
a very widely popular progressive web

00:19:48,669 --> 00:19:51,840
saver

00:19:49,290 --> 00:19:54,510
was started by one person then it formed

00:19:51,840 --> 00:19:56,340
a community around that cell compared to

00:19:54,510 --> 00:19:58,410
angularjs and react.js it was much

00:19:56,340 --> 00:20:00,960
easier to learn that's my personal

00:19:58,410 --> 00:20:02,730
opinion and it was more community

00:20:00,960 --> 00:20:04,580
oriented there was no company to dictate

00:20:02,730 --> 00:20:07,980
rules in whatnot so I really liked that

00:20:04,580 --> 00:20:09,600
the other thing is it was there is a lot

00:20:07,980 --> 00:20:11,280
of tons of resources and a lot of other

00:20:09,600 --> 00:20:12,990
open source projects a great lab is a

00:20:11,280 --> 00:20:15,510
big user and there are other

00:20:12,990 --> 00:20:18,360
organizations if you search they are

00:20:15,510 --> 00:20:20,130
using vue.js the last thing I really

00:20:18,360 --> 00:20:22,770
like about you Jace is you can take

00:20:20,130 --> 00:20:25,650
fuses in an existing UI so even our

00:20:22,770 --> 00:20:27,480
current you are you can use you J's to

00:20:25,650 --> 00:20:31,410
extend some view so it is easy to kind

00:20:27,480 --> 00:20:34,350
of mix and compared to I think reactors

00:20:31,410 --> 00:20:37,260
angularjs it was easy for me to learn so

00:20:34,350 --> 00:20:39,420
I I spend like one weekend on each

00:20:37,260 --> 00:20:41,640
framework so about in a - in the idea

00:20:39,420 --> 00:20:43,530
was in a dollar ten off to write

00:20:41,640 --> 00:20:46,410
something if not then that framework is

00:20:43,530 --> 00:20:48,600
good enough for me if it takes me let's

00:20:46,410 --> 00:20:51,510
say a week to learn then it might take a

00:20:48,600 --> 00:20:54,300
lot more time to to make something from

00:20:51,510 --> 00:20:54,720
that so with that I really liked you

00:20:54,300 --> 00:20:56,340
Jace

00:20:54,720 --> 00:20:58,470
the other thing I liked about you Jace

00:20:56,340 --> 00:21:00,270
is they have a concept of a single file

00:20:58,470 --> 00:21:03,660
component so on the right hand side you

00:21:00,270 --> 00:21:05,550
can see the same hello component example

00:21:03,660 --> 00:21:08,010
where in a single file you define the

00:21:05,550 --> 00:21:09,720
structure which is the HTML you define

00:21:08,010 --> 00:21:12,780
the code that is the script or

00:21:09,720 --> 00:21:15,750
JavaScript and you can also have CSS in

00:21:12,780 --> 00:21:18,390
that you can build components reusable

00:21:15,750 --> 00:21:20,610
components and then you can import you

00:21:18,390 --> 00:21:22,560
can pass them as a variable the cool

00:21:20,610 --> 00:21:27,300
stuff you could do in this I really like

00:21:22,560 --> 00:21:29,280
that the other thing I looked at was UI

00:21:27,300 --> 00:21:32,580
frameworks so I don't want to build my

00:21:29,280 --> 00:21:36,030
own components like like your menu bars

00:21:32,580 --> 00:21:38,100
your part is your badges dropdowns all

00:21:36,030 --> 00:21:39,960
of that I don't want to build my own on

00:21:38,100 --> 00:21:42,450
my own so I looked into various things

00:21:39,960 --> 00:21:44,970
like bootstrap semantic UI then I came

00:21:42,450 --> 00:21:48,390
upon this and design what I really liked

00:21:44,970 --> 00:21:50,160
about at design is they I mean typically

00:21:48,390 --> 00:21:52,350
if you look into how UI products are

00:21:50,160 --> 00:21:56,280
developed there is a product designer

00:21:52,350 --> 00:21:57,930
and it's really good to see that this

00:21:56,280 --> 00:22:00,780
project actually does this very well

00:21:57,930 --> 00:22:02,370
they have a ton of document that doesn't

00:22:00,780 --> 00:22:06,000
talk about cold or how-to

00:22:02,370 --> 00:22:07,440
use and design but but from a spec point

00:22:06,000 --> 00:22:09,600
of view a specification point of view

00:22:07,440 --> 00:22:13,800
what should this UI look like and very

00:22:09,600 --> 00:22:16,559
large users like Alibaba then sent a lot

00:22:13,800 --> 00:22:18,780
of most of the users from China they use

00:22:16,559 --> 00:22:22,410
this product in their production

00:22:18,780 --> 00:22:24,030
websites they have so it's like if I use

00:22:22,410 --> 00:22:27,000
iron design I don't have to worry about

00:22:24,030 --> 00:22:29,070
the the graphical u.s. specification I

00:22:27,000 --> 00:22:31,190
as a developer can just use it of the

00:22:29,070 --> 00:22:33,809
shows because somebody has already

00:22:31,190 --> 00:22:36,270
defined what an enterprise UI looks like

00:22:33,809 --> 00:22:39,150
on their website also they mention this

00:22:36,270 --> 00:22:42,090
and it is an enterprise class UI design

00:22:39,150 --> 00:22:44,520
framework in project again tons of stars

00:22:42,090 --> 00:22:46,230
you can see they don't say it's a UFA

00:22:44,520 --> 00:22:52,290
book they say it's a design language you

00:22:46,230 --> 00:22:54,450
can say see on the ticket lab box and so

00:22:52,290 --> 00:22:56,490
they have this design specification and

00:22:54,450 --> 00:22:59,220
that specification they are implemented

00:22:56,490 --> 00:23:00,059
for angularjs vue.js reactors so that

00:22:59,220 --> 00:23:02,280
means you have a consistent

00:23:00,059 --> 00:23:05,370
specification implemented for different

00:23:02,280 --> 00:23:08,820
frameworks you can use so I pick this

00:23:05,370 --> 00:23:12,350
one and I want to introduce you to this

00:23:08,820 --> 00:23:16,830
side project of mine calling it primate

00:23:12,350 --> 00:23:19,440
it's a it's a it's a UI it's a modern

00:23:16,830 --> 00:23:22,440
cloud stack UI side project of mine and

00:23:19,440 --> 00:23:24,150
I started earlier this year that does

00:23:22,440 --> 00:23:26,070
auto discovery so all the stuff you see

00:23:24,150 --> 00:23:28,830
it's a pay order discovery or toward

00:23:26,070 --> 00:23:34,410
over JIT generation parameter completion

00:23:28,830 --> 00:23:35,910
I I actually I wrote couple of code that

00:23:34,410 --> 00:23:38,850
is similar to the code I had written for

00:23:35,910 --> 00:23:40,350
cloud monkey and I couldn't believe

00:23:38,850 --> 00:23:43,320
myself because this was a feasibility

00:23:40,350 --> 00:23:46,770
exercise I did that for one specific API

00:23:43,320 --> 00:23:48,210
then I added some declarative way to say

00:23:46,770 --> 00:23:51,300
these are the APIs I were to show and

00:23:48,210 --> 00:23:53,850
this thing works now for 600 ApS so

00:23:51,300 --> 00:23:56,610
let's say it took me three four weekends

00:23:53,850 --> 00:24:00,000
to get this BOC done in this for Wiggins

00:23:56,610 --> 00:24:02,400
I could then support 600 or any API that

00:24:00,000 --> 00:24:05,640
was something I wanted to do here you

00:24:02,400 --> 00:24:07,679
can see the snapshot of the of the UI

00:24:05,640 --> 00:24:10,110
and I'll invite my colleague I don't

00:24:07,679 --> 00:24:12,330
have to talk and give a demo of this but

00:24:10,110 --> 00:24:15,750
what I'll briefly mention is all this

00:24:12,330 --> 00:24:18,000
stuff you see right now it does

00:24:15,750 --> 00:24:20,220
about all the APS on CloudStack it does

00:24:18,000 --> 00:24:21,900
everything role-based so things kind of

00:24:20,220 --> 00:24:24,780
show her height depending on what ApS

00:24:21,900 --> 00:24:26,850
you are allowed to see in execute or not

00:24:24,780 --> 00:24:29,910
there is no assumption whether it is a

00:24:26,850 --> 00:24:32,940
user a domain admin or an admin and this

00:24:29,910 --> 00:24:36,710
thing works on all devices like your

00:24:32,940 --> 00:24:39,030
phones tablets it's easy to extend I

00:24:36,710 --> 00:24:41,340
mean the core code that does Auto

00:24:39,030 --> 00:24:42,870
completion all that is about maybe less

00:24:41,340 --> 00:24:45,540
than thousand lines of code so it's

00:24:42,870 --> 00:24:49,530
easier and small and compact that way so

00:24:45,540 --> 00:24:51,690
without further ado let me let me pass

00:24:49,530 --> 00:24:53,640
it to unravel show us some demo and then

00:24:51,690 --> 00:24:55,310
I'll come back again to talk about this

00:24:53,640 --> 00:25:07,320
UI

00:24:55,310 --> 00:25:10,950
Thank You Rohit so let me quickly so

00:25:07,320 --> 00:25:12,420
this is the login page some of the

00:25:10,950 --> 00:25:13,620
personalities are still not implemented

00:25:12,420 --> 00:25:17,610
so there will be a lot of rough edges

00:25:13,620 --> 00:25:24,570
please bear with that so let's first try

00:25:17,610 --> 00:25:26,580
to do some sort of invalid login so we

00:25:24,570 --> 00:25:31,650
see on the top they fail to authenticate

00:25:26,580 --> 00:25:36,780
so that means of indication works let's

00:25:31,650 --> 00:25:40,110
go ahead and login as the admin so this

00:25:36,780 --> 00:25:42,690
is the main dashboard so one thing to

00:25:40,110 --> 00:25:45,660
call up lately with mentioned are the UI

00:25:42,690 --> 00:25:47,610
development and the core cloud stack

00:25:45,660 --> 00:25:49,580
development is now independent that

00:25:47,610 --> 00:25:51,630
means we do not have to rebuild

00:25:49,580 --> 00:25:53,370
internally I will show you in a few

00:25:51,630 --> 00:25:55,230
minutes that we can actually point the

00:25:53,370 --> 00:25:58,290
primate code to point to any specific

00:25:55,230 --> 00:26:00,810
running management server or API URL and

00:25:58,290 --> 00:26:03,120
it will point to that so let's just

00:26:00,810 --> 00:26:06,810
quickly walk through this main dashboard

00:26:03,120 --> 00:26:12,780
page so on the left hand side we see all

00:26:06,810 --> 00:26:15,300
these menus it can expand collapse right

00:26:12,780 --> 00:26:19,050
so almost all the functionality is

00:26:15,300 --> 00:26:21,390
already there in the UI code this centre

00:26:19,050 --> 00:26:24,210
part is the dashboard it's very easy to

00:26:21,390 --> 00:26:26,580
use and one thing I should offer you is

00:26:24,210 --> 00:26:28,620
that underlying the ant design they have

00:26:26,580 --> 00:26:31,110
this card base development

00:26:28,620 --> 00:26:33,990
and all these things you see in terms of

00:26:31,110 --> 00:26:37,260
code is a single component right now

00:26:33,990 --> 00:26:39,270
this is sort of including a graph then

00:26:37,260 --> 00:26:40,799
there is a very a large amount of

00:26:39,270 --> 00:26:43,679
flexibility so we can actually customize

00:26:40,799 --> 00:26:46,260
these cards and we see some examples for

00:26:43,679 --> 00:26:48,090
the are the virtual machines lead Lu it

00:26:46,260 --> 00:26:50,610
actually gives a lot of flexibility

00:26:48,090 --> 00:26:53,669
without actually touching the code code

00:26:50,610 --> 00:26:54,179
of the infrastructure side on the right

00:26:53,669 --> 00:26:57,650
hand side

00:26:54,179 --> 00:27:00,539
you see all these events so it pulls and

00:26:57,650 --> 00:27:03,330
we can actually see here and so it's not

00:27:00,539 --> 00:27:11,090
fitting entirely here we can go to the

00:27:03,330 --> 00:27:11,090
details view and we see all these events

00:27:13,340 --> 00:27:18,270
right on the on the top side you can

00:27:16,740 --> 00:27:21,870
actually see all these breadcrumbs like

00:27:18,270 --> 00:27:24,390
the dashboard the language services this

00:27:21,870 --> 00:27:26,610
is the localization what we have done is

00:27:24,390 --> 00:27:28,559
we have actually sort of analyzed the

00:27:26,610 --> 00:27:29,880
old UI code and extracted all the human

00:27:28,559 --> 00:27:31,740
readable strings

00:27:29,880 --> 00:27:33,779
and we have sort of mapped them to the

00:27:31,740 --> 00:27:36,330
new translation files as well we see a

00:27:33,779 --> 00:27:42,840
light day one a few minutes the

00:27:36,330 --> 00:27:44,730
modifications we menu let's actually

00:27:42,840 --> 00:27:51,720
also look at the the project view so

00:27:44,730 --> 00:27:53,039
project views are also supported so

00:27:51,720 --> 00:27:55,169
there you have it so we have different

00:27:53,039 --> 00:27:57,510
cards for the project and the Vav events

00:27:55,169 --> 00:27:59,309
on you let me go back to the default

00:27:57,510 --> 00:28:04,860
view and actually show you how we can

00:27:59,309 --> 00:28:07,200
actually show the mobile view so like oh

00:28:04,860 --> 00:28:09,659
it mention actually vue.js helps us

00:28:07,200 --> 00:28:13,590
directly for our current component base

00:28:09,659 --> 00:28:16,080
code to a mobile specifically so there

00:28:13,590 --> 00:28:19,679
you have it like this is how the current

00:28:16,080 --> 00:28:22,039
climate will look down an iPhone X for

00:28:19,679 --> 00:28:22,039
instance

00:28:23,510 --> 00:28:29,669
here's how it could look on the iPad and

00:28:28,049 --> 00:28:31,080
all of this comes out of the box like we

00:28:29,669 --> 00:28:34,830
don't have to put extra effort for

00:28:31,080 --> 00:28:46,440
device specific translations let's go

00:28:34,830 --> 00:28:50,570
back to the show still rough around the

00:28:46,440 --> 00:28:52,980
edges but they do use cotton you can see

00:28:50,570 --> 00:28:55,679
there is a drop-down if you have

00:28:52,980 --> 00:28:58,590
multiple zones there's a drop searchable

00:28:55,679 --> 00:29:04,799
drop-down so you can search both across

00:28:58,590 --> 00:29:06,330
projects and zones and so let's take an

00:29:04,799 --> 00:29:08,280
example at the end of this slide because

00:29:06,330 --> 00:29:12,270
there is some there's an order refresh

00:29:08,280 --> 00:29:14,070
feature it will just see so I like the

00:29:12,270 --> 00:29:15,570
old UI there all these old specific

00:29:14,070 --> 00:29:17,490
statistics are dumped on the same page

00:29:15,570 --> 00:29:19,710
we actually have filtered them out for

00:29:17,490 --> 00:29:21,330
specific zones this is my local flood

00:29:19,710 --> 00:29:22,770
stock instance so I just have buns over

00:29:21,330 --> 00:29:24,120
for demo purposes but it could

00:29:22,770 --> 00:29:29,130
potentially have multiple zones and we

00:29:24,120 --> 00:29:32,070
can actually try to search you okay ah

00:29:29,130 --> 00:29:35,370
so the next thing to talk about is

00:29:32,070 --> 00:29:37,140
actually web browser history and like

00:29:35,370 --> 00:29:39,929
personally when I started working on the

00:29:37,140 --> 00:29:41,580
cloud side UI it was very painful every

00:29:39,929 --> 00:29:43,290
time I was developing I would refresh

00:29:41,580 --> 00:29:45,929
all the notifications from the top four

00:29:43,290 --> 00:29:47,940
gone and I'll have to again scroll

00:29:45,929 --> 00:29:50,190
through the entire UI and in Beechnut

00:29:47,940 --> 00:29:54,330
stage so on the on the browser address

00:29:50,190 --> 00:29:57,660
actual you see it's not just 8 0 8 0

00:29:54,330 --> 00:30:01,380
slash client it points to a specific URL

00:29:57,660 --> 00:30:05,520
right and this is actually preserved so

00:30:01,380 --> 00:30:07,799
for instance if I go here it goes to a

00:30:05,520 --> 00:30:10,260
guest network so what that means is um

00:30:07,799 --> 00:30:13,679
whenever I hit this particular URL I'm

00:30:10,260 --> 00:30:16,100
sure to get my specific role role

00:30:13,679 --> 00:30:18,270
specific view here it doesn't have to be

00:30:16,100 --> 00:30:22,860
refreshed or scroll through the entire

00:30:18,270 --> 00:30:24,120
UI part again like some of the

00:30:22,860 --> 00:30:25,980
functionalities that have super nice

00:30:24,120 --> 00:30:28,440
thumb didn't you say we can expand and

00:30:25,980 --> 00:30:30,360
collapse the left hand bar all these

00:30:28,440 --> 00:30:32,640
things are components that an provides

00:30:30,360 --> 00:30:34,110
and I'll show it like towards the end

00:30:32,640 --> 00:30:35,970
I'll show you some snippets of the code

00:30:34,110 --> 00:30:38,330
how we have implemented it declare a

00:30:35,970 --> 00:30:38,330
device

00:30:40,340 --> 00:30:45,660
what else of it so let let me show you

00:30:43,920 --> 00:30:49,110
this so like if I if I go to this volume

00:30:45,660 --> 00:30:50,880
detail view and I press back the old UI

00:30:49,110 --> 00:30:52,800
as you would know go back to the jump

00:30:50,880 --> 00:30:54,510
the dashboard but here we can actually

00:30:52,800 --> 00:30:56,040
press back so what it's showing is we

00:30:54,510 --> 00:30:58,260
actually maintaining browser history and

00:30:56,040 --> 00:30:59,640
we're caching the entire path sounds

00:30:58,260 --> 00:31:02,220
trivial but it was really painful to do

00:30:59,640 --> 00:31:06,120
you a okay

00:31:02,220 --> 00:31:07,800
let's quickly walk through this and the

00:31:06,120 --> 00:31:10,770
central resource component so this

00:31:07,800 --> 00:31:14,070
entire table right now it's showing the

00:31:10,770 --> 00:31:15,750
volume specific resource we actually

00:31:14,070 --> 00:31:17,640
haven't heart forgiveness this is the

00:31:15,750 --> 00:31:19,800
game a reusable component that was

00:31:17,640 --> 00:31:22,500
talking about and we just have to

00:31:19,800 --> 00:31:24,090
specify the follows and the order in

00:31:22,500 --> 00:31:26,670
which they should appear in a single

00:31:24,090 --> 00:31:28,800
configuration file and it automatically

00:31:26,670 --> 00:31:30,870
populates first some things more than

00:31:28,800 --> 00:31:32,460
you'll notice is that we actually have

00:31:30,870 --> 00:31:34,740
these so items that are actually

00:31:32,460 --> 00:31:37,530
clickable so what we can potentially do

00:31:34,740 --> 00:31:39,960
is while it sets let's let's click this

00:31:37,530 --> 00:31:42,530
thing so we can literally come to that

00:31:39,960 --> 00:31:45,750
particular zone and notice the URI here

00:31:42,530 --> 00:31:48,270
it actually specifies which zone ID we

00:31:45,750 --> 00:31:50,100
can actually go to again like I can

00:31:48,270 --> 00:31:51,660
press back and I will come back to that

00:31:50,100 --> 00:31:54,210
same page instead of having to go back

00:31:51,660 --> 00:31:57,330
for that I know this small functionality

00:31:54,210 --> 00:32:00,330
that I mean it's not if we go you can

00:31:57,330 --> 00:32:01,950
actually click to copy and like most of

00:32:00,330 --> 00:32:06,960
the times you have to copy to ID so we

00:32:01,950 --> 00:32:09,270
can use that notice this detail you this

00:32:06,960 --> 00:32:11,850
is the same component that has been

00:32:09,270 --> 00:32:15,300
customized for the detailed view of this

00:32:11,850 --> 00:32:16,980
one and this is not hard-coded like

00:32:15,300 --> 00:32:19,290
louis mentioned you have API discovery

00:32:16,980 --> 00:32:21,720
then we get back a response for a

00:32:19,290 --> 00:32:24,750
particular API we populate these parts

00:32:21,720 --> 00:32:26,460
now this is very primitive we haven't

00:32:24,750 --> 00:32:29,570
done any customization that is something

00:32:26,460 --> 00:32:29,570
that we'll go ahead and do in future

00:32:30,410 --> 00:32:36,030
okay one more thing that you see is that

00:32:33,660 --> 00:32:38,910
we have this refresh button but we also

00:32:36,030 --> 00:32:41,040
have an auto refresh what this will do

00:32:38,910 --> 00:32:42,840
is it will periodically fetch the new

00:32:41,040 --> 00:32:44,940
updates for this particular resource and

00:32:42,840 --> 00:32:46,560
that sometimes becomes helpful so like

00:32:44,940 --> 00:32:49,750
if I I don't think I had anything

00:32:46,560 --> 00:32:56,890
country to reflect here but let's say

00:32:49,750 --> 00:32:59,500
the volume so we have this state some of

00:32:56,890 --> 00:33:01,390
the times so you see this refresh thing

00:32:59,500 --> 00:33:02,560
that happens but if you have an

00:33:01,390 --> 00:33:04,810
operation running in the background

00:33:02,560 --> 00:33:06,670
that's an async operation this Auto

00:33:04,810 --> 00:33:08,830
refresh will actually help the UIL who

00:33:06,670 --> 00:33:10,270
are actually CloudStack users to see the

00:33:08,830 --> 00:33:13,150
state without actually having to deep

00:33:10,270 --> 00:33:18,430
dive in or refresh every time so small

00:33:13,150 --> 00:33:19,810
feature but pretty useful okay

00:33:18,430 --> 00:33:22,690
let's actually take a look at

00:33:19,810 --> 00:33:26,170
translations so this is currently

00:33:22,690 --> 00:33:28,840
English but the translation is also much

00:33:26,170 --> 00:33:31,330
much smoother now and it happens on the

00:33:28,840 --> 00:33:33,190
fly so you'll notice that some of the

00:33:31,330 --> 00:33:35,170
text is not translated on it's because

00:33:33,190 --> 00:33:36,910
we don't have the mapping of that

00:33:35,170 --> 00:33:39,610
particular string in the translation

00:33:36,910 --> 00:33:41,590
files that we have the default for that

00:33:39,610 --> 00:33:43,780
language is English so we see use

00:33:41,590 --> 00:33:46,240
violation here but notice on the left

00:33:43,780 --> 00:33:48,790
hand menu and on the header all of this

00:33:46,240 --> 00:33:51,070
translates very smoothly and in real

00:33:48,790 --> 00:33:52,720
thing without even without us having to

00:33:51,070 --> 00:33:57,880
refresh the whole or restart the

00:33:52,720 --> 00:34:00,640
management server for instance okay

00:33:57,880 --> 00:34:02,590
let's let's take a quick look at the

00:34:00,640 --> 00:34:06,820
compute instances because we have done a

00:34:02,590 --> 00:34:10,360
lot of customization there so let's go

00:34:06,820 --> 00:34:13,600
into the detailed view of this again the

00:34:10,360 --> 00:34:15,220
underline is still a part but we have a

00:34:13,600 --> 00:34:17,560
lot of customizations here this is a

00:34:15,220 --> 00:34:19,600
card but it provides a lot of I mean

00:34:17,560 --> 00:34:24,429
it's very elegant to look at we have

00:34:19,600 --> 00:34:25,929
hardware we have statistics settings so

00:34:24,429 --> 00:34:28,290
all of them not working as I said but we

00:34:25,929 --> 00:34:31,090
have these four summarization options

00:34:28,290 --> 00:34:33,700
okay let's let's try to look at these

00:34:31,090 --> 00:34:36,100
actions these actions are also filtered

00:34:33,700 --> 00:34:37,750
out as per the user role and also that

00:34:36,100 --> 00:34:40,149
this particular state supports for

00:34:37,750 --> 00:34:41,800
instance we cannot stop a virtual

00:34:40,149 --> 00:34:44,230
machine that's already stopped so we

00:34:41,800 --> 00:34:49,179
have them disabled again context driven

00:34:44,230 --> 00:34:52,290
rendering by pretty useful so let's try

00:34:49,179 --> 00:34:52,290
to start this virtual machine

00:34:52,870 --> 00:35:00,820
I want to first show the a player or the

00:34:56,830 --> 00:35:03,130
discovery part if we try to click here

00:35:00,820 --> 00:35:05,500
it gives me the the cluster ID for

00:35:03,130 --> 00:35:07,450
instance that currently this particular

00:35:05,500 --> 00:35:10,090
role user can deploy a virtual machine

00:35:07,450 --> 00:35:13,600
on right I'm not going to select that

00:35:10,090 --> 00:35:16,480
and this will get deployed is notice on

00:35:13,600 --> 00:35:19,690
the top corner we have this acing job

00:35:16,480 --> 00:35:21,490
folder and there you have it the virtual

00:35:19,690 --> 00:35:24,160
machine is running the state gets

00:35:21,490 --> 00:35:27,130
updated and all of that because of this

00:35:24,160 --> 00:35:29,290
Auto refresh and this another thing to

00:35:27,130 --> 00:35:33,850
pull out is these notifications don't go

00:35:29,290 --> 00:35:42,610
away for instance if I close this and I

00:35:33,850 --> 00:35:44,380
come back it's still there so this helps

00:35:42,610 --> 00:35:46,420
us keep track of the particular action

00:35:44,380 --> 00:35:50,980
events and anything that we are trying

00:35:46,420 --> 00:35:54,070
to track let's go back to that compute

00:35:50,980 --> 00:35:56,590
page notice on the top they don't show

00:35:54,070 --> 00:35:57,960
actually all the actions but as we

00:35:56,590 --> 00:36:00,190
select a virtual machine for instance

00:35:57,960 --> 00:36:05,460
some of the actions actually pop up

00:36:00,190 --> 00:36:05,460
right you can try to stop within

00:36:11,920 --> 00:36:20,650
and you'll see this progressing okay

00:36:17,380 --> 00:36:20,650
what else

00:36:28,400 --> 00:36:31,789
okay let's quickly take a look at the

00:36:31,099 --> 00:36:34,220
userview

00:36:31,789 --> 00:36:36,890
how it could look to idiom so so I'm

00:36:34,220 --> 00:36:47,240
going to log out and I'm going to log in

00:36:36,890 --> 00:36:50,450
as a user notice on the top on the left

00:36:47,240 --> 00:36:52,490
the resources that the user should not

00:36:50,450 --> 00:36:55,999
see he cannot actually see the virtual

00:36:52,490 --> 00:36:58,460
machines are filtered something else so

00:36:55,999 --> 00:37:00,499
like because we have these URLs one

00:36:58,460 --> 00:37:02,299
might think like what if the user has an

00:37:00,499 --> 00:37:06,380
act like knowledge of the particular URL

00:37:02,299 --> 00:37:08,990
can he open that so we have these checks

00:37:06,380 --> 00:37:15,470
in place so like it's not found or it's

00:37:08,990 --> 00:37:15,890
not allowed okay I think like that

00:37:15,470 --> 00:37:20,299
forever

00:37:15,890 --> 00:37:21,559
most of the UI specific stuff I can jump

00:37:20,299 --> 00:37:24,619
into the photo is about to add something

00:37:21,559 --> 00:37:31,400
to D maybe if you can log in as a

00:37:24,619 --> 00:37:34,009
routine there are a couple of things one

00:37:31,400 --> 00:37:36,980
thing is as soon as you log in we kind

00:37:34,009 --> 00:37:39,140
of do Auto a Davi discovery and that

00:37:36,980 --> 00:37:40,819
means all those things you see on the

00:37:39,140 --> 00:37:42,950
left hand side all the navigation is

00:37:40,819 --> 00:37:45,619
dynamically rendered based on what they

00:37:42,950 --> 00:37:47,450
discover it else that means if it does

00:37:45,619 --> 00:37:49,849
start you cannot do this soon so you

00:37:47,450 --> 00:37:52,220
cannot do in list infrastructure one

00:37:49,849 --> 00:37:54,230
thing I wrong maybe we wanted to mention

00:37:52,220 --> 00:37:56,150
was when we log in as a user the

00:37:54,230 --> 00:37:58,999
infrastructure tab itself was gone and

00:37:56,150 --> 00:38:01,190
the code for that is doesn't assume

00:37:58,999 --> 00:38:05,150
anything based on the type of the user

00:38:01,190 --> 00:38:06,619
it is it is tied up with the API

00:38:05,150 --> 00:38:08,089
discovery so based on the if they

00:38:06,619 --> 00:38:11,150
discover it will automatically show or

00:38:08,089 --> 00:38:13,579
hide some buttons tap radius and

00:38:11,150 --> 00:38:15,499
whatever you have showed was if you know

00:38:13,579 --> 00:38:17,989
the paths through lists all the hosts or

00:38:15,499 --> 00:38:18,930
zones if you try to trigger that you are

00:38:17,989 --> 00:38:21,210
a greater fool

00:38:18,930 --> 00:38:24,059
for because your role is not allowed to

00:38:21,210 --> 00:38:25,770
execute 30 yeah one more thing I would

00:38:24,059 --> 00:38:28,290
like to add here is when he clicked on

00:38:25,770 --> 00:38:30,690
that plus button to deploy IBM all those

00:38:28,290 --> 00:38:32,579
things you see here it's something what

00:38:30,690 --> 00:38:34,950
let's say how cloud monkey would render

00:38:32,579 --> 00:38:36,839
when you do a tap tap on an API just

00:38:34,950 --> 00:38:38,910
that we were doing this in the UI form

00:38:36,839 --> 00:38:41,430
that means let's look into one of the

00:38:38,910 --> 00:38:43,290
things like disk offering IDs so that is

00:38:41,430 --> 00:38:46,319
the API parameter that you can pass

00:38:43,290 --> 00:38:48,690
through this API in the gray area in the

00:38:46,319 --> 00:38:50,460
box itself there is some a pair talk

00:38:48,690 --> 00:38:52,380
itself like the idea of the disk

00:38:50,460 --> 00:38:54,119
offering for the virtual machine so on

00:38:52,380 --> 00:38:56,819
and so forth so this me fair talk is

00:38:54,119 --> 00:38:59,099
also from that dynamically discovered a

00:38:56,819 --> 00:39:02,099
they and their parameters when we click

00:38:59,099 --> 00:39:03,809
on on any of those things like robots

00:39:02,099 --> 00:39:05,550
clicking on the disc offering ID all

00:39:03,809 --> 00:39:07,920
those things you see the rendering is

00:39:05,550 --> 00:39:09,690
also dynamic we don't know which a pair

00:39:07,920 --> 00:39:11,520
to call we simply try to order discover

00:39:09,690 --> 00:39:13,230
and just like cloud monkey when you do a

00:39:11,520 --> 00:39:15,420
tap table and it will list you the you

00:39:13,230 --> 00:39:18,480
IDs in the means it's simply doing that

00:39:15,420 --> 00:39:21,359
in a list form and if you scroll to the

00:39:18,480 --> 00:39:23,339
bottom and irad it it will discover what

00:39:21,359 --> 00:39:25,230
are the required parameters for an api

00:39:23,339 --> 00:39:27,119
so the form automatically enforces that

00:39:25,230 --> 00:39:28,829
so some of the parameters have that read

00:39:27,119 --> 00:39:31,950
aesthetics at least though that they

00:39:28,829 --> 00:39:33,630
required parameters now all of this as

00:39:31,950 --> 00:39:36,540
you can see there is no filtering on

00:39:33,630 --> 00:39:39,839
what things to show or hide but our next

00:39:36,540 --> 00:39:41,549
step is that we will show you how we

00:39:39,839 --> 00:39:44,339
have a declarative conflict file where

00:39:41,549 --> 00:39:48,000
you can simply say for this API use the

00:39:44,339 --> 00:39:49,920
cycle and show only these fields so for

00:39:48,000 --> 00:39:51,930
example the plus button we say this is

00:39:49,920 --> 00:39:54,359
the plus button the API is called deploy

00:39:51,930 --> 00:39:57,119
virtual machine and here we haven't

00:39:54,359 --> 00:39:59,069
actually defined we have forced in code

00:39:57,119 --> 00:40:00,780
that only shows these parameters for the

00:39:59,069 --> 00:40:03,000
demo we want to show all the parameters

00:40:00,780 --> 00:40:05,940
but which I use it will pass but the

00:40:03,000 --> 00:40:09,119
emphasis here is the UI is completely

00:40:05,940 --> 00:40:11,849
API driven order it uses API discovered

00:40:09,119 --> 00:40:13,349
in our parameter completion now there

00:40:11,849 --> 00:40:15,119
are some cabbage with this kind of

00:40:13,349 --> 00:40:17,069
approach which is when everything

00:40:15,119 --> 00:40:19,799
becomes a pair driven in or data driven

00:40:17,069 --> 00:40:22,109
it may not give you that user experience

00:40:19,799 --> 00:40:24,619
so one of the things that I showed you

00:40:22,109 --> 00:40:26,599
was can you go back outside of this

00:40:24,619 --> 00:40:29,000
closed

00:40:26,599 --> 00:40:31,490
so one of the things he was showing you

00:40:29,000 --> 00:40:33,530
is a custom component now here also what

00:40:31,490 --> 00:40:37,910
we do is in this config file we say

00:40:33,530 --> 00:40:40,520
instead of the generate you know widget

00:40:37,910 --> 00:40:42,650
that shows you all those things like he

00:40:40,520 --> 00:40:44,150
showed you the zone example where we are

00:40:42,650 --> 00:40:46,190
basically this thing out the JSON

00:40:44,150 --> 00:40:48,799
response in various cards here is an

00:40:46,190 --> 00:40:50,569
example of a type of component which can

00:40:48,799 --> 00:40:53,770
display data about a virtual machine

00:40:50,569 --> 00:40:56,119
with little assumption about what the

00:40:53,770 --> 00:40:58,160
things could be in that reason so it's

00:40:56,119 --> 00:41:00,859
just an example on how easy it is to

00:40:58,160 --> 00:41:02,119
customize I think there was a couple of

00:41:00,859 --> 00:41:05,359
things I learned if you go to the

00:41:02,119 --> 00:41:07,880
instances page rock there's the table

00:41:05,359 --> 00:41:10,520
tabular view there's also cards view so

00:41:07,880 --> 00:41:13,579
next to searches so if you click on this

00:41:10,520 --> 00:41:15,460
you can see different ways and again to

00:41:13,579 --> 00:41:18,260
implement this view it took me like

00:41:15,460 --> 00:41:21,410
maybe 10 minutes because all it is is a

00:41:18,260 --> 00:41:23,089
for loop that instead of printing rows

00:41:21,410 --> 00:41:25,579
in a table it is like printing them as

00:41:23,089 --> 00:41:28,400
individual cards it is possible because

00:41:25,579 --> 00:41:30,619
you're reusing components you're simply

00:41:28,400 --> 00:41:32,630
saying this is my data and then then

00:41:30,619 --> 00:41:35,420
this in a component and a card component

00:41:32,630 --> 00:41:38,539
and show this like this so it says

00:41:35,420 --> 00:41:40,279
there's the for loop maybe I can show an

00:41:38,539 --> 00:41:42,260
example of deploying a view is one more

00:41:40,279 --> 00:41:45,890
thing I wanted to call out so you see

00:41:42,260 --> 00:41:47,750
this form it's not actually so what it's

00:41:45,890 --> 00:41:49,670
doing it with the a pair discovery

00:41:47,750 --> 00:41:51,710
it knows what kind of parameter it is

00:41:49,670 --> 00:41:53,539
and it fit for example for a boolean

00:41:51,710 --> 00:41:56,029
flag it will automatically populate this

00:41:53,539 --> 00:41:59,299
particular sort of widget if it's a

00:41:56,029 --> 00:42:01,940
value for instance it should be a place

00:41:59,299 --> 00:42:03,829
yeah so later we can actually increase

00:42:01,940 --> 00:42:05,660
and decreasing and none of this is

00:42:03,829 --> 00:42:07,010
hard-coded based on the a pair discovery

00:42:05,660 --> 00:42:09,140
you know the type of the parameter and

00:42:07,010 --> 00:42:16,640
we show the corresponding type of UI

00:42:09,140 --> 00:42:19,240
widget okay so let's try to start a limb

00:42:16,640 --> 00:42:19,240
for instance

00:42:20,280 --> 00:42:26,070
so it will tell us like what particular

00:42:22,600 --> 00:42:28,720
fields are required and we have to

00:42:26,070 --> 00:42:30,900
provide them so let's provide a template

00:42:28,720 --> 00:42:30,900
ID

00:42:39,010 --> 00:42:53,200
say show the m22 there's a display being

00:42:44,140 --> 00:42:55,839
ultimately of a selected true should we

00:42:53,200 --> 00:42:57,339
have this and now we get this so we

00:42:55,839 --> 00:43:00,450
aren't actually started though because

00:42:57,339 --> 00:43:03,550
it can take a lot of time to do this

00:43:00,450 --> 00:43:05,859
okay so that was just a very quick

00:43:03,550 --> 00:43:07,450
walkthrough of what the current UI looks

00:43:05,859 --> 00:43:11,589
like what functionalities are actually

00:43:07,450 --> 00:43:27,670
working let me quickly show you a few

00:43:11,589 --> 00:43:29,290
things in terms of code right so this is

00:43:27,670 --> 00:43:33,849
the primary config file for instance

00:43:29,290 --> 00:43:35,140
where we are specifying the URL to the

00:43:33,849 --> 00:43:37,270
management server so you look at this

00:43:35,140 --> 00:43:39,190
URL if you want to point this to a

00:43:37,270 --> 00:43:41,550
different management server instance all

00:43:39,190 --> 00:43:47,040
you have to do is change this URL

00:43:41,550 --> 00:43:51,089
there's another file we should look at

00:43:47,040 --> 00:43:53,740
so this is this is a sample component if

00:43:51,089 --> 00:43:55,540
you remember what we talked about in

00:43:53,740 --> 00:43:56,980
terms of that component and this is a

00:43:55,540 --> 00:43:59,250
declarative style of implementing that

00:43:56,980 --> 00:44:02,230
component we have one component that

00:43:59,250 --> 00:44:04,420
consumes this compute on gist and just

00:44:02,230 --> 00:44:10,060
try to read this this is just a simple

00:44:04,420 --> 00:44:12,819
the JavaScript object name title item we

00:44:10,060 --> 00:44:15,369
specify the hidden columns for instance

00:44:12,819 --> 00:44:16,990
and we specify this actions and all

00:44:15,369 --> 00:44:19,450
these actions does take this specific

00:44:16,990 --> 00:44:20,920
set of parameters so this is what he

00:44:19,450 --> 00:44:25,530
meant by decorative style of programming

00:44:20,920 --> 00:44:25,530
and on D on the left hand side we have

00:44:25,800 --> 00:44:30,250
yeah so here we have all these different

00:44:28,359 --> 00:44:33,430
sections and all of them will actually

00:44:30,250 --> 00:44:36,190
look like just like the compute thing we

00:44:33,430 --> 00:44:38,260
specify a set of parameters the private

00:44:36,190 --> 00:44:39,579
code will pick this config file and it

00:44:38,260 --> 00:44:42,010
will to enter that particular component

00:44:39,579 --> 00:44:43,630
so it's very easy to extend it with the

00:44:42,010 --> 00:44:47,200
a pair discovery and this definitive

00:44:43,630 --> 00:44:48,819
style of our programming adding more API

00:44:47,200 --> 00:44:52,270
is adding new features makes it very

00:44:48,819 --> 00:44:55,250
easy for developers to implement the UI

00:44:52,270 --> 00:44:57,920
one more interesting thing was let me

00:44:55,250 --> 00:45:01,280
show you to view supports hot reloading

00:44:57,920 --> 00:45:03,500
what hot reloading is that when they try

00:45:01,280 --> 00:45:06,430
to change the code so let me go to

00:45:03,500 --> 00:45:06,430
compute on J's

00:45:07,089 --> 00:45:16,369
this thing is currently actually maybe

00:45:10,910 --> 00:45:18,200
first show the IR do that so here if you

00:45:16,369 --> 00:45:20,300
look at this from compute section we

00:45:18,200 --> 00:45:23,750
have instances ssh key pairs and

00:45:20,300 --> 00:45:26,960
affinity groups now let me go back to

00:45:23,750 --> 00:45:28,670
the code so we demo it's trying to show

00:45:26,960 --> 00:45:31,730
us let's say i want to add like a new

00:45:28,670 --> 00:45:35,480
plug in on some new feature within a how

00:45:31,730 --> 00:45:37,910
easy it is to start and what we do is in

00:45:35,480 --> 00:45:39,559
this contract file we simply add a small

00:45:37,910 --> 00:45:41,180
block that describes what the name

00:45:39,559 --> 00:45:43,369
should look like what should the title

00:45:41,180 --> 00:45:47,089
be what should the Dyken and what should

00:45:43,369 --> 00:45:50,960
be the component - yep and you save this

00:45:47,089 --> 00:45:54,260
file as soon as I save this file the UI

00:45:50,960 --> 00:45:56,900
will kind of order refresh if it is a

00:45:54,260 --> 00:45:58,490
config file and you'll show if we change

00:45:56,900 --> 00:46:01,400
make changes to the component it will

00:45:58,490 --> 00:46:02,869
show what we wrote in our means you are

00:46:01,400 --> 00:46:07,819
downloaded as faster you make changes

00:46:02,869 --> 00:46:09,500
when you see them it makes very easy for

00:46:07,819 --> 00:46:12,500
developers to see how changes are being

00:46:09,500 --> 00:46:14,450
reflected almost in real time so for

00:46:12,500 --> 00:46:16,670
instance if you look at this particular

00:46:14,450 --> 00:46:20,059
part the component that we are using is

00:46:16,670 --> 00:46:22,609
test you so let's go back you go to the

00:46:20,059 --> 00:46:24,619
test view file and this is the very

00:46:22,609 --> 00:46:29,390
simple example like we can add anything

00:46:24,619 --> 00:46:31,970
here and if we save it and we go back

00:46:29,390 --> 00:46:33,440
it just gets updated so it's very easy

00:46:31,970 --> 00:46:35,510
for developers but they don't have to

00:46:33,440 --> 00:46:36,799
rebuild that's that's a pretty exciting

00:46:35,510 --> 00:46:40,849
thing for me for abuse from the

00:46:36,799 --> 00:46:43,640
perspective of using UJS so in contrast

00:46:40,849 --> 00:46:46,280
just let me add in the current or start

00:46:43,640 --> 00:46:48,859
development most people when they start

00:46:46,280 --> 00:46:51,109
they tend to rebuild the entire code

00:46:48,859 --> 00:46:52,579
base while for the current code base you

00:46:51,109 --> 00:46:55,369
don't actually need to do that so they

00:46:52,579 --> 00:46:57,349
will spend anywhere from 15 to 30

00:46:55,369 --> 00:46:59,119
minutes just to build top stack then

00:46:57,349 --> 00:47:00,970
started the starting Rorschach again

00:46:59,119 --> 00:47:04,240
will take 5 minutes

00:47:00,970 --> 00:47:06,640
then they'll hit refresh in last couple

00:47:04,240 --> 00:47:08,470
of years we've found some some you know

00:47:06,640 --> 00:47:11,079
tricks like you don't need to be able to

00:47:08,470 --> 00:47:13,299
touch that for example you can simply go

00:47:11,079 --> 00:47:14,890
to the target flight directory and make

00:47:13,299 --> 00:47:17,140
changes refresh once you're satisfied

00:47:14,890 --> 00:47:21,369
you will copy the code back to this

00:47:17,140 --> 00:47:23,980
thing I mean that is possible but as a

00:47:21,369 --> 00:47:26,109
developer it's painful it's not what I

00:47:23,980 --> 00:47:28,599
want now what a run has just shown us

00:47:26,109 --> 00:47:30,940
how we separate development testing

00:47:28,599 --> 00:47:32,290
review iteration cycle all of that of

00:47:30,940 --> 00:47:34,180
the u.s. separate from the management

00:47:32,290 --> 00:47:35,740
server you can point the code base to

00:47:34,180 --> 00:47:39,369
any management server you want as long

00:47:35,740 --> 00:47:41,859
as it supports that part and he has

00:47:39,369 --> 00:47:43,450
shown that there are config file J's

00:47:41,859 --> 00:47:45,190
config file maybe I know you can show

00:47:43,450 --> 00:47:47,349
that default settings are J's file

00:47:45,190 --> 00:47:49,690
yes--we which may be available at a path

00:47:47,349 --> 00:47:51,309
like EDC cloud stack primate or

00:47:49,690 --> 00:47:53,049
something like that so an admin can

00:47:51,309 --> 00:47:54,880
simply let's say when admin doesn't want

00:47:53,049 --> 00:47:56,890
to call them to be shown to the users

00:47:54,880 --> 00:47:58,750
simply remove that key or add that key

00:47:56,890 --> 00:48:00,460
that's what declarative is you are not

00:47:58,750 --> 00:48:03,549
programming you're simply saying I want

00:48:00,460 --> 00:48:05,200
this API to be shown with this API you

00:48:03,549 --> 00:48:07,390
want some parameters to be shown some

00:48:05,200 --> 00:48:09,339
columns or be used in the forms to be

00:48:07,390 --> 00:48:11,470
they did not show you can do that in a

00:48:09,339 --> 00:48:13,329
declarative way now this is the main

00:48:11,470 --> 00:48:16,390
settings file and here you can see you

00:48:13,329 --> 00:48:18,730
can actually give some options around

00:48:16,390 --> 00:48:20,670
the themes you can specify the parts to

00:48:18,730 --> 00:48:22,900
the database you can give some

00:48:20,670 --> 00:48:25,089
customization in the UI like your I can

00:48:22,900 --> 00:48:27,730
those things can happen actually we

00:48:25,089 --> 00:48:29,290
don't have a demo to show the icon but

00:48:27,730 --> 00:48:32,470
for example you can change the halfpipe

00:48:29,290 --> 00:48:35,349
title there's a button to find help you

00:48:32,470 --> 00:48:37,720
can change that and you can I mean we

00:48:35,349 --> 00:48:39,369
want this the you are to be kind of a

00:48:37,720 --> 00:48:41,980
white label you are you can extend

00:48:39,369 --> 00:48:44,589
modify change do whatever you want with

00:48:41,980 --> 00:48:47,200
that yeah one more thing is that the

00:48:44,589 --> 00:48:50,290
pagination is now not a fixed thing we

00:48:47,200 --> 00:48:51,940
can actually change it and even when we

00:48:50,290 --> 00:48:54,549
try to reopen the window the pagination

00:48:51,940 --> 00:48:56,890
still sticks to it so a lot of the

00:48:54,549 --> 00:48:58,619
configuration is we are using local

00:48:56,890 --> 00:49:01,119
storage the browser local storage so

00:48:58,619 --> 00:49:03,400
anorak showed is an example where he

00:49:01,119 --> 00:49:06,059
would close the browser open the UI

00:49:03,400 --> 00:49:07,709
again and notifications were not gone in

00:49:06,059 --> 00:49:09,719
other options like your project settings

00:49:07,709 --> 00:49:13,019
your translation those things are saved

00:49:09,719 --> 00:49:16,439
in your in local storage as adjacent key

00:49:13,019 --> 00:49:19,949
so you I kind of allows you to do a lot

00:49:16,439 --> 00:49:21,479
of that so okay so I think we have about

00:49:19,949 --> 00:49:32,669
ten minutes left so you want to take up

00:49:21,479 --> 00:49:35,789
for the next show thank you right so

00:49:32,669 --> 00:49:38,159
guys that's primate for you just to

00:49:35,789 --> 00:49:40,079
summarize what we have I mean a couple

00:49:38,159 --> 00:49:44,579
of things I want to add on the side

00:49:40,079 --> 00:49:46,199
project primate is it's completely like

00:49:44,579 --> 00:49:48,239
it's small infants is written using

00:49:46,199 --> 00:49:50,969
buges and I'm design declarative

00:49:48,239 --> 00:49:53,369
programming config driven programming

00:49:50,969 --> 00:49:55,319
you can say we saw example of hot

00:49:53,369 --> 00:49:56,789
reloading let me also mention that we do

00:49:55,319 --> 00:49:59,309
when during in the current cloud set

00:49:56,789 --> 00:50:02,309
code lot of the dependencies like

00:49:59,309 --> 00:50:04,379
JavaScript library and CSS stuff all of

00:50:02,309 --> 00:50:06,299
that is part of the code base we don't

00:50:04,379 --> 00:50:08,459
want that we don't want developer to

00:50:06,299 --> 00:50:10,079
manually manage dependencies in their

00:50:08,459 --> 00:50:12,269
version security issues and things like

00:50:10,079 --> 00:50:15,299
that so code base actually supports

00:50:12,269 --> 00:50:17,429
starred as well again this is a single

00:50:15,299 --> 00:50:20,129
page app so you can actually compile and

00:50:17,429 --> 00:50:22,199
copy the code base to an existing cloud

00:50:20,129 --> 00:50:24,269
stack and instead of index dot HTML

00:50:22,199 --> 00:50:27,509
changed to something else like private

00:50:24,269 --> 00:50:29,849
or dist HTML and you can actually host

00:50:27,509 --> 00:50:32,639
both the old UI on the new primary in

00:50:29,849 --> 00:50:34,469
the same server you can do that one

00:50:32,639 --> 00:50:36,959
thing I want to emphasize is we want to

00:50:34,469 --> 00:50:38,459
do clean and separate development

00:50:36,959 --> 00:50:41,369
lifecycle so you can build the UI

00:50:38,459 --> 00:50:43,109
release much faster because UI is one of

00:50:41,369 --> 00:50:46,019
those types of project that can iterate

00:50:43,109 --> 00:50:50,129
much faster so we want that flexibility

00:50:46,019 --> 00:50:52,499
and it's easy to learn like I a jar with

00:50:50,129 --> 00:50:54,599
no background in a UI or JavaScript I

00:50:52,499 --> 00:50:56,909
could pick UJ start programming in about

00:50:54,599 --> 00:50:58,949
three to four hours I could get through

00:50:56,909 --> 00:51:02,759
very basic concepts like your loops

00:50:58,949 --> 00:51:04,679
conditional variable types and passing

00:51:02,759 --> 00:51:08,249
properties and components I could do

00:51:04,679 --> 00:51:10,199
that in n again I want to emphasize that

00:51:08,249 --> 00:51:12,899
it's a multi set UI that means not

00:51:10,199 --> 00:51:15,419
doesn't assume that it is for a type of

00:51:12,899 --> 00:51:17,339
audience or a user it's completely role

00:51:15,419 --> 00:51:17,930
based that means supports for admin

00:51:17,339 --> 00:51:19,789
using

00:51:17,930 --> 00:51:24,079
any custom rules so that is sort of

00:51:19,789 --> 00:51:27,470
books so I think that we have already

00:51:24,079 --> 00:51:29,720
stressed upon a by Discovery widget

00:51:27,470 --> 00:51:31,849
order generation well let me also

00:51:29,720 --> 00:51:33,650
emphasize that that's something you get

00:51:31,849 --> 00:51:37,130
out of the box but again if you want

00:51:33,650 --> 00:51:40,369
some specific custom UX behavior you can

00:51:37,130 --> 00:51:42,619
implement a custom component just like

00:51:40,369 --> 00:51:45,250
we saw for the compute instance and we

00:51:42,619 --> 00:51:48,349
also saw that demo thing we added

00:51:45,250 --> 00:51:49,970
dynamically we have URL rotator and

00:51:48,349 --> 00:51:52,279
browser history so you can go back and

00:51:49,970 --> 00:51:54,020
forth you must have noticed that in the

00:51:52,279 --> 00:51:56,599
table there are other options like zones

00:51:54,020 --> 00:51:59,900
when you click on that it will take the

00:51:56,599 --> 00:52:01,460
view from that specific page to a zone

00:51:59,900 --> 00:52:05,270
and you can again click on the back

00:52:01,460 --> 00:52:07,880
button to go back again we are trying to

00:52:05,270 --> 00:52:09,619
use as much as modern browser supported

00:52:07,880 --> 00:52:11,930
features like local storage and things

00:52:09,619 --> 00:52:14,869
like that we also saw saw dynamic

00:52:11,930 --> 00:52:16,819
translations so now current in the

00:52:14,869 --> 00:52:18,230
current UI have to actually log out and

00:52:16,819 --> 00:52:19,670
log in again when you want to change

00:52:18,230 --> 00:52:21,799
translations so we want to fix

00:52:19,670 --> 00:52:24,079
Titusville translation is dynamic and

00:52:21,799 --> 00:52:26,029
again we want we don't want everything

00:52:24,079 --> 00:52:27,410
from scratch so we have an Ragus

00:52:26,029 --> 00:52:29,119
actually put a lot of effort to make

00:52:27,410 --> 00:52:30,829
sure how can we best free use the

00:52:29,119 --> 00:52:33,589
existing translation as much as possible

00:52:30,829 --> 00:52:36,260
so we saw example on that as well and

00:52:33,589 --> 00:52:38,589
lastly we want to support all form

00:52:36,260 --> 00:52:41,059
factors all types of skis desktop

00:52:38,589 --> 00:52:43,309
tablets mobile screens they can also

00:52:41,059 --> 00:52:45,500
mention the UI supports 4k that means

00:52:43,309 --> 00:52:47,240
all the icons and images they are SVG

00:52:45,500 --> 00:52:50,410
based they will adapt and they look

00:52:47,240 --> 00:52:55,039
nicer on your you know 2k and 4k screens

00:52:50,410 --> 00:52:57,500
and I think we have seen that simply

00:52:55,039 --> 00:53:01,339
want to thank and give credits to a lot

00:52:57,500 --> 00:53:04,279
of people when we started when I started

00:53:01,339 --> 00:53:06,170
this split we I actually showed the

00:53:04,279 --> 00:53:08,630
first timer to both Paul and Giles is to

00:53:06,170 --> 00:53:11,210
show them ok this is what I have done

00:53:08,630 --> 00:53:12,589
do you see any value in this do you

00:53:11,210 --> 00:53:15,109
saying it can actually become something

00:53:12,589 --> 00:53:17,390
bigger so many thanks to Paul and Giles

00:53:15,109 --> 00:53:20,510
and entire blue team for their support

00:53:17,390 --> 00:53:23,630
in requirement in feedback and whatnot

00:53:20,510 --> 00:53:26,539
then actually what happened was as as I

00:53:23,630 --> 00:53:27,619
was doing this this was about first half

00:53:26,539 --> 00:53:30,410
of 2019

00:53:27,619 --> 00:53:31,160
Jan Feb that timeline actually saw in

00:53:30,410 --> 00:53:34,279
the end

00:53:31,160 --> 00:53:35,839
master gold base we upgraded the jQuery

00:53:34,279 --> 00:53:37,910
version to the latest because of some

00:53:35,839 --> 00:53:40,099
security and other issues and I saw that

00:53:37,910 --> 00:53:42,619
triggered a lot of issues in the current

00:53:40,099 --> 00:53:45,079
UI because the current us imperative Dom

00:53:42,619 --> 00:53:47,539
style programming it assumes width and

00:53:45,079 --> 00:53:49,579
what to show this in that a lot of the

00:53:47,539 --> 00:53:51,319
code base in the UI got broken and I

00:53:49,579 --> 00:53:52,940
noticed that a lot of people especially

00:53:51,319 --> 00:53:56,239
from II worked like

00:53:52,940 --> 00:53:57,890
swen Max Weber Phillip and a lot of his

00:53:56,239 --> 00:54:00,200
their colleagues they were contributing

00:53:57,890 --> 00:54:02,900
pull requests so I thought maybe they

00:54:00,200 --> 00:54:06,109
are they know something about you I let

00:54:02,900 --> 00:54:08,539
me go and talk to them so I I was kind

00:54:06,109 --> 00:54:11,180
of unsure so I mean we want to do this

00:54:08,539 --> 00:54:13,489
possibly but at that time this was still

00:54:11,180 --> 00:54:16,509
a POC I wanted to make sure to get early

00:54:13,489 --> 00:54:20,479
feedback in if they want to guide me

00:54:16,509 --> 00:54:23,809
around you know best practices and stuff

00:54:20,479 --> 00:54:25,519
like that so a lot of thanks to Sven for

00:54:23,809 --> 00:54:29,690
that max actually helped with a lot of

00:54:25,519 --> 00:54:31,339
CSS refactoring he introduced s CSS and

00:54:29,690 --> 00:54:32,989
a lot of stuff that I actually don't

00:54:31,339 --> 00:54:34,880
understand but this stuff in the

00:54:32,989 --> 00:54:36,380
dashboard you saw how it adapted very

00:54:34,880 --> 00:54:38,960
well on the mobile phone that was done

00:54:36,380 --> 00:54:41,329
by max Phillip also did a lot of stuff

00:54:38,960 --> 00:54:44,869
about the conflict changes refactoring

00:54:41,329 --> 00:54:48,049
them again without open source projects

00:54:44,869 --> 00:54:49,880
like UJ s and design it would be hard

00:54:48,049 --> 00:54:52,009
the last thing I would mention is I

00:54:49,880 --> 00:54:53,900
actually when when I started I didn't

00:54:52,009 --> 00:54:55,400
want to start exactly from scratch so I

00:54:53,900 --> 00:54:58,130
also looked into is there a boilerplate

00:54:55,400 --> 00:54:59,960
code just for an admin theme so that I

00:54:58,130 --> 00:55:02,989
have something to start with so I

00:54:59,960 --> 00:55:05,839
started with this open source template

00:55:02,989 --> 00:55:07,279
for the fonts again we are using an open

00:55:05,839 --> 00:55:09,890
source period called fold awesome and

00:55:07,279 --> 00:55:12,319
there were few cat icons you saw in the

00:55:09,890 --> 00:55:14,660
404 exceptions they were done by a

00:55:12,319 --> 00:55:17,119
designer and I got requests and they

00:55:14,660 --> 00:55:18,289
allowed me to use this item so if we

00:55:17,119 --> 00:55:19,999
were to use this in our open source

00:55:18,289 --> 00:55:24,559
period we can because the author has

00:55:19,999 --> 00:55:26,779
allowed us to do this what is next so

00:55:24,559 --> 00:55:30,769
this is the link we will probably make

00:55:26,779 --> 00:55:32,930
it public in quite some time now from

00:55:30,769 --> 00:55:35,930
this starting we have we are ensuring

00:55:32,930 --> 00:55:38,930
that this is a Apache complied about you

00:55:35,930 --> 00:55:42,700
to dot o license code base and what I

00:55:38,930 --> 00:55:44,900
want to do is I mean I'm using the this

00:55:42,700 --> 00:55:48,049
the conference as a way to kind of

00:55:44,900 --> 00:55:49,940
introduce this to you I want to build

00:55:48,049 --> 00:55:52,460
support around this next steps would be

00:55:49,940 --> 00:55:54,319
just I mean not just you all here but

00:55:52,460 --> 00:55:56,960
also it include other people and find

00:55:54,319 --> 00:55:59,479
their feedback gather support seek

00:55:56,960 --> 00:56:03,259
reviews and requirements any feedback

00:55:59,479 --> 00:56:05,630
and we have a hackathon session in the

00:56:03,259 --> 00:56:08,749
convent so maybe if any one of our side

00:56:05,630 --> 00:56:11,539
interests said we can have a small group

00:56:08,749 --> 00:56:14,359
just to discuss primate and other UI

00:56:11,539 --> 00:56:16,609
aspects around the project in the next

00:56:14,359 --> 00:56:20,269
few months what I want to do is I want

00:56:16,609 --> 00:56:22,369
to make sure that we I mean who is

00:56:20,269 --> 00:56:24,619
interested we work together to make sure

00:56:22,369 --> 00:56:26,420
the UI I mean it's still a POC so I

00:56:24,619 --> 00:56:28,249
would emphasize that I don't know

00:56:26,420 --> 00:56:30,079
whether it is primetime for cloud stack

00:56:28,249 --> 00:56:32,839
as a project except this so we want to

00:56:30,079 --> 00:56:34,579
make sure that we reach feature and

00:56:32,839 --> 00:56:38,059
functionality parity with the current

00:56:34,579 --> 00:56:39,950
cloud stack UI and once that is done I

00:56:38,059 --> 00:56:42,950
think the proposed timeline would be we

00:56:39,950 --> 00:56:44,839
do lot of that to the Apache way build

00:56:42,950 --> 00:56:48,650
support propose seek food on the dev

00:56:44,839 --> 00:56:50,359
mailing list I add that when we raises

00:56:48,650 --> 00:56:52,609
it reaches stage where the code base is

00:56:50,359 --> 00:56:55,039
good enough we want to start a

00:56:52,609 --> 00:56:57,979
discussion about accepting this in the

00:56:55,039 --> 00:57:00,829
project and I mean the rough timeline

00:56:57,979 --> 00:57:04,039
would be that around let's say the first

00:57:00,829 --> 00:57:07,549
quarter of 2020 that is after around and

00:57:04,039 --> 00:57:09,529
after 4.14 we reach a technical preview

00:57:07,549 --> 00:57:11,420
or a beta stage that means UI becomes

00:57:09,529 --> 00:57:13,339
more or less functional like the old one

00:57:11,420 --> 00:57:15,739
we might still have some bugs some

00:57:13,339 --> 00:57:18,410
missing features and whatnot so we work

00:57:15,739 --> 00:57:20,420
on that but we want to be able to reach

00:57:18,410 --> 00:57:22,849
that stage so we can give it out as a

00:57:20,420 --> 00:57:25,609
beta technical preview for the users to

00:57:22,849 --> 00:57:27,019
play with and then in after that in the

00:57:25,609 --> 00:57:29,390
next six month or so we work on the

00:57:27,019 --> 00:57:32,180
documentation nodes gather feedback do

00:57:29,390 --> 00:57:34,160
though all that iteration and come up

00:57:32,180 --> 00:57:36,739
with a proper upgrade path and migration

00:57:34,160 --> 00:57:38,989
path so proposal could be that let's say

00:57:36,739 --> 00:57:40,239
after 4.14 we stopped working on the old

00:57:38,989 --> 00:57:42,639
UI

00:57:40,239 --> 00:57:45,759
if everything in the community accepts

00:57:42,639 --> 00:57:48,339
in the UI kind of looks feasible and the

00:57:45,759 --> 00:57:51,249
general availability within with with

00:57:48,339 --> 00:57:54,579
the I mean from a release point of view

00:57:51,249 --> 00:57:56,349
can be done on a on and after for 4.15

00:57:54,579 --> 00:57:58,959
that means second half of 2020 that's

00:57:56,349 --> 00:58:02,889
sort of the proposed timeline for the

00:57:58,959 --> 00:58:05,069
code base in the project okay thank you

00:58:02,889 --> 00:58:05,069
everyone

00:58:08,669 --> 00:58:13,709
do we have any questions yes

00:58:59,910 --> 00:59:16,230
yes no right now it has to be one per

00:59:09,000 --> 00:59:18,930
management service so actually I I when

00:59:16,230 --> 00:59:20,400
I started the sort of feasibility POC I

00:59:18,930 --> 00:59:21,960
actually tried to do that because in

00:59:20,400 --> 00:59:23,340
cloud bug you can basically point to

00:59:21,960 --> 00:59:26,610
different management service change the

00:59:23,340 --> 00:59:29,820
profile the issue with that is browsers

00:59:26,610 --> 00:59:32,130
they will enforce CSRF basically you are

00:59:29,820 --> 00:59:33,720
not allowed to I mean you're you're

00:59:32,130 --> 00:59:35,210
hosting a website somewhere else and you

00:59:33,720 --> 00:59:37,860
want to talk to somewhere else in do

00:59:35,210 --> 00:59:39,390
authentication all that so browser kind

00:59:37,860 --> 00:59:42,840
of due to the browser's limitation that

00:59:39,390 --> 00:59:45,150
is that is limiting but I would add that

00:59:42,840 --> 00:59:46,530
it is actually possible in a different

00:59:45,150 --> 00:59:48,240
way we are not showing the demo here

00:59:46,530 --> 00:59:51,150
maybe I can show you some examples

00:59:48,240 --> 00:59:52,470
privately I we can so we have an open

00:59:51,150 --> 00:59:54,870
source product call electron where you

00:59:52,470 --> 00:59:56,640
can wrap a web application like this

00:59:54,870 --> 00:59:58,740
it's a single page application that

00:59:56,640 --> 01:00:00,120
master client so with the electron you

00:59:58,740 --> 01:00:01,170
can actually have a drop-down you can

01:00:00,120 --> 01:00:03,120
have server profiles

01:00:01,170 --> 01:00:05,520
store them in a config select whatever

01:00:03,120 --> 01:00:07,500
management server you want with some new

01:00:05,520 --> 01:00:09,350
icons customization items and whatnot

01:00:07,500 --> 01:00:12,990
and you can have like a desktop client

01:00:09,350 --> 01:00:16,410
where the Sierra CSRF limitations those

01:00:12,990 --> 01:00:17,940
are not enforced and you can then talk

01:00:16,410 --> 01:00:21,590
to different management servers have a

01:00:17,940 --> 01:00:21,590
desktop primate basically

01:00:25,220 --> 01:00:34,219
right okay thank you guys

01:00:27,920 --> 01:00:34,219

YouTube URL: https://www.youtube.com/watch?v=F2KwZhechzs


