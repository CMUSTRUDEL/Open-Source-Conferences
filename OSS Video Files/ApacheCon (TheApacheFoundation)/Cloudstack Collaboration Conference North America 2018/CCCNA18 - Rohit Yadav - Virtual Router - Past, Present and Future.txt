Title: CCCNA18 - Rohit Yadav - Virtual Router - Past, Present and Future
Publication date: 2018-11-20
Playlist: Cloudstack Collaboration Conference North America 2018
Description: 
	Rohit Yadav - Virtual Router - Past, Present and Future

A presentation from the Cloudstack Collaboration Conference, a part of ApacheCon North America 2018 in Montreal

http://ca.cloudstackcollab.org/
http://apachecon.com/acna18
Captions: 
	00:00:03,080 --> 00:00:09,440
okay thank you all for coming this is my

00:00:07,340 --> 00:00:13,130
talk on the clock strike were children

00:00:09,440 --> 00:00:17,810
we present past and future of work for

00:00:13,130 --> 00:00:20,240
children so Who am I I'm a Software

00:00:17,810 --> 00:00:24,529
Architect at Shea blue I work from

00:00:20,240 --> 00:00:26,810
gurugram India I've been working with

00:00:24,529 --> 00:00:29,269
with the Apache CloudStack community

00:00:26,810 --> 00:00:32,360
since last six plus years now

00:00:29,269 --> 00:00:34,880
I'm a committed in BMC now I have been

00:00:32,360 --> 00:00:37,850
the release manager for several of the

00:00:34,880 --> 00:00:40,640
minor releases and most notably the AV

00:00:37,850 --> 00:00:44,840
Center for 11/0 major release

00:00:40,640 --> 00:00:46,460
I was asked you know to put some some

00:00:44,840 --> 00:00:49,219
stuff about what do I specialize in

00:00:46,460 --> 00:00:51,079
that's very a tough question so I've put

00:00:49,219 --> 00:00:52,519
in some you know high-level things that

00:00:51,079 --> 00:00:55,489
I think I have been working on for the

00:00:52,519 --> 00:00:59,230
last six years I'm also the author of

00:00:55,489 --> 00:01:03,769
cloud monkey the CLI for cloud stack and

00:00:59,230 --> 00:01:05,630
several features in cloud stack I'm a

00:01:03,769 --> 00:01:07,790
vegetarian I love animals and I love

00:01:05,630 --> 00:01:10,670
programming so that's what I do in my

00:01:07,790 --> 00:01:13,970
free time I can see a lot of sleepyheads

00:01:10,670 --> 00:01:15,890
here having your lunch in you know but

00:01:13,970 --> 00:01:18,740
I'll try to keep it very brief into the

00:01:15,890 --> 00:01:21,080
point it actually helps me to know the

00:01:18,740 --> 00:01:23,810
audience so if I may can I have a quick

00:01:21,080 --> 00:01:25,700
show of hands like people who come from

00:01:23,810 --> 00:01:29,270
the development related background or

00:01:25,700 --> 00:01:31,490
what develop is nice thank you

00:01:29,270 --> 00:01:33,350
people who are non deaf but in let's say

00:01:31,490 --> 00:01:36,920
it says admin support related stuff

00:01:33,350 --> 00:01:39,380
they're doing okay and I guess the rest

00:01:36,920 --> 00:01:41,900
of you would be the business managers

00:01:39,380 --> 00:01:44,300
and you know all the nav non-deaf types

00:01:41,900 --> 00:01:46,580
okay so I'll keep it very very simple

00:01:44,300 --> 00:01:50,090
into the point and try to be not very

00:01:46,580 --> 00:01:53,030
very technical I will try not to go into

00:01:50,090 --> 00:01:56,840
and into the corner so the topics for

00:01:53,030 --> 00:01:58,400
today's talk will is like will first

00:01:56,840 --> 00:02:00,200
look at what system names are what

00:01:58,400 --> 00:02:01,940
virtual notice are we will do a

00:02:00,200 --> 00:02:04,280
comparative study so in order to

00:02:01,940 --> 00:02:07,380
understand the virtual Rooter we might

00:02:04,280 --> 00:02:08,849
want to know what's the past overture

00:02:07,380 --> 00:02:10,979
what the virtual lunar kind of looked

00:02:08,849 --> 00:02:13,230
like in the past and give some

00:02:10,979 --> 00:02:15,959
parameters to to measure that and then

00:02:13,230 --> 00:02:18,420
in order to work towards the future of

00:02:15,959 --> 00:02:20,190
the virtual rooters we need to

00:02:18,420 --> 00:02:22,319
understand what does the present like so

00:02:20,190 --> 00:02:24,120
once we know the present then we can

00:02:22,319 --> 00:02:26,010
maybe aim and look around and learn from

00:02:24,120 --> 00:02:27,930
others and see what what what what the

00:02:26,010 --> 00:02:30,989
future of the virtual Reuter can look

00:02:27,930 --> 00:02:33,720
like and of course as you can tell there

00:02:30,989 --> 00:02:35,370
will be a lot of gifts so if my talk is

00:02:33,720 --> 00:02:38,940
kind of boring you can always enjoy the

00:02:35,370 --> 00:02:40,680
gifts all right so what is what you'll

00:02:38,940 --> 00:02:43,170
notice so before we answer that we have

00:02:40,680 --> 00:02:46,349
to ask the question what is a system we

00:02:43,170 --> 00:02:48,599
have template so in CloudStack there are

00:02:46,349 --> 00:02:51,390
a lot of activities or operations that

00:02:48,599 --> 00:02:53,790
we want to do that cannot be simply done

00:02:51,390 --> 00:02:56,010
by by the management server or the core

00:02:53,790 --> 00:02:58,349
you know the the orchestration plane

00:02:56,010 --> 00:03:00,180
itself so for that what we have done is

00:02:58,349 --> 00:03:02,579
we have created a virtual machine disk

00:03:00,180 --> 00:03:05,670
image called the system iam template and

00:03:02,579 --> 00:03:07,410
that system M template can become one of

00:03:05,670 --> 00:03:10,140
the several service virtual machines

00:03:07,410 --> 00:03:12,540
like a console proxy a secondary storage

00:03:10,140 --> 00:03:13,170
virtual machine some sort of virtual

00:03:12,540 --> 00:03:15,180
motor

00:03:13,170 --> 00:03:16,950
it could be a simple word shalu there a

00:03:15,180 --> 00:03:20,459
BBC virtual route and things like that

00:03:16,950 --> 00:03:22,350
and so whatever shoulder is it's

00:03:20,459 --> 00:03:24,530
basically a service which you machine it

00:03:22,350 --> 00:03:27,350
is something to help CloudStack

00:03:24,530 --> 00:03:30,090
orchestrate something for the users

00:03:27,350 --> 00:03:31,889
specifically the it implements the

00:03:30,090 --> 00:03:33,269
networking solution for for your end

00:03:31,889 --> 00:03:36,329
users so that's what the word should

00:03:33,269 --> 00:03:39,389
Rooter does and the virtual router also

00:03:36,329 --> 00:03:41,040
supports all the legacy and the like new

00:03:39,389 --> 00:03:42,959
and the old all those kind of network

00:03:41,040 --> 00:03:46,590
topologies are also supported by which

00:03:42,959 --> 00:03:49,859
is Otis maybe it doesn't make sense I

00:03:46,590 --> 00:03:52,200
don't know I think I tried to give you

00:03:49,859 --> 00:03:55,560
like my understanding of what virtual do

00:03:52,200 --> 00:03:57,690
actually does in order to compare the

00:03:55,560 --> 00:04:00,329
past present and future or what she

00:03:57,690 --> 00:04:02,430
rooted we need to basically define what

00:04:00,329 --> 00:04:06,150
do we mean by you know past present and

00:04:02,430 --> 00:04:08,220
future I think we can all agree all the

00:04:06,150 --> 00:04:11,310
earlier versions of cloud stack from I

00:04:08,220 --> 00:04:13,829
think 4 or X 4.0 til 4 or 5 I'm calling

00:04:11,310 --> 00:04:16,100
that ancient because a lot of people are

00:04:13,829 --> 00:04:19,730
not going to are not using that

00:04:16,100 --> 00:04:22,970
4.5 is a special case I know there are

00:04:19,730 --> 00:04:24,410
people they may be still using 4.5 and

00:04:22,970 --> 00:04:27,350
there is a reason that may be very

00:04:24,410 --> 00:04:30,080
discuss on the way the past what Shalu

00:04:27,350 --> 00:04:32,060
that what I am calling is the diversion

00:04:30,080 --> 00:04:34,610
of CloudStack n the virtual road is

00:04:32,060 --> 00:04:37,250
created by a cloud stack 4.6 to 4 or 10

00:04:34,610 --> 00:04:39,590
the present one is the latest LDS

00:04:37,250 --> 00:04:41,990
release the four are delivered and by

00:04:39,590 --> 00:04:43,910
future I mean maybe the next version of

00:04:41,990 --> 00:04:47,540
launch time maybe for our curves and

00:04:43,910 --> 00:04:50,660
4.30 the reason I am saying for our 12/4

00:04:47,540 --> 00:04:52,580
not cÃ¡rdenas there's a high high chance

00:04:50,660 --> 00:04:55,400
that the virtual lieutenant for our 11

00:04:52,580 --> 00:04:57,820
still keeps you know still gets to be

00:04:55,400 --> 00:05:02,330
used in photo 12 or the other you know

00:04:57,820 --> 00:05:04,430
next few releases so here is a

00:05:02,330 --> 00:05:07,130
comparative study of the virtual Reuter

00:05:04,430 --> 00:05:09,020
you know in terms of facts so the

00:05:07,130 --> 00:05:13,580
password saluted that means cloud stack

00:05:09,020 --> 00:05:17,090
4.6 to 4.9 version versus lost at 4 or

00:05:13,580 --> 00:05:20,090
11 so the first thing we see is I try to

00:05:17,090 --> 00:05:22,310
do sort of you know def kind of table

00:05:20,090 --> 00:05:23,720
unit all the things you see in red they

00:05:22,310 --> 00:05:26,990
are kind of gone and all the green a

00:05:23,720 --> 00:05:27,620
kind of the replacement so the past we

00:05:26,990 --> 00:05:30,260
are used

00:05:27,620 --> 00:05:33,200
they've been 7vz initially we used to

00:05:30,260 --> 00:05:35,300
have two sets of templates for 32-bit

00:05:33,200 --> 00:05:38,000
and 64-bit support and eventually add

00:05:35,300 --> 00:05:39,860
some few years ago we decided to drop

00:05:38,000 --> 00:05:42,320
the trainer bed and we moved to 64-bit

00:05:39,860 --> 00:05:44,360
the current virtual luteal is based on

00:05:42,320 --> 00:05:47,210
the latest they've been 90s it's a

00:05:44,360 --> 00:05:50,000
64-bit template as well one thing you

00:05:47,210 --> 00:05:53,030
could notice SP in the present virtual

00:05:50,000 --> 00:05:55,970
Ruta we have reduced the size by almost

00:05:53,030 --> 00:05:58,070
a gigabyte in size and by reducing the

00:05:55,970 --> 00:06:00,680
size of the template it kind of speeds

00:05:58,070 --> 00:06:03,170
up the orchestration of a virtual router

00:06:00,680 --> 00:06:05,810
the next thing we clearly see is the

00:06:03,170 --> 00:06:07,910
change in linux kernel itself and the

00:06:05,810 --> 00:06:10,190
process orchestration tools that we use

00:06:07,910 --> 00:06:13,700
so the Basquiat goes based on the Linux

00:06:10,190 --> 00:06:16,370
3.2 and uses in addy and the latest one

00:06:13,700 --> 00:06:19,460
uses 4.9 bit system do so we are all

00:06:16,370 --> 00:06:22,040
system D enable now the past we are

00:06:19,460 --> 00:06:23,900
rooted I mean the the source code that

00:06:22,040 --> 00:06:26,660
was used to refactor the two

00:06:23,900 --> 00:06:28,490
there was mostly in Python it's still

00:06:26,660 --> 00:06:30,380
the same more or less in the present

00:06:28,490 --> 00:06:33,139
beer but we did some sort of refactoring

00:06:30,380 --> 00:06:34,850
to remove some bugs makes you few

00:06:33,139 --> 00:06:37,910
optimizations to make it fast and

00:06:34,850 --> 00:06:39,949
whatnot and the other changes you see

00:06:37,910 --> 00:06:42,039
they are all infrastructure changes that

00:06:39,949 --> 00:06:44,900
we moved from Java 1.7 to ignore eight

00:06:42,039 --> 00:06:47,810
the removed from opens find the songs

00:06:44,900 --> 00:06:49,780
file we updated several packages for

00:06:47,810 --> 00:06:52,850
example keepalive is just one example

00:06:49,780 --> 00:06:55,940
and one of the miscellaneous things also

00:06:52,850 --> 00:06:58,190
primary driver of this change was Debian

00:06:55,940 --> 00:07:00,350
7 base template table 7 itself reached

00:06:58,190 --> 00:07:02,930
end-of-life so we had to upgrade the

00:07:00,350 --> 00:07:05,440
base operating system anyway we think

00:07:02,930 --> 00:07:07,910
the present BR is most current stable

00:07:05,440 --> 00:07:09,560
definitely because the packages that I

00:07:07,910 --> 00:07:13,039
installed the new template are the

00:07:09,560 --> 00:07:15,229
latest ones have the latest you know

00:07:13,039 --> 00:07:18,560
colonel related fixes that we saw

00:07:15,229 --> 00:07:20,510
recently and I wanted to just you know

00:07:18,560 --> 00:07:23,210
thank everyone in the community with the

00:07:20,510 --> 00:07:26,419
pull request status on the end of the

00:07:23,210 --> 00:07:29,260
slide this was a major effort it started

00:07:26,419 --> 00:07:33,680
in August of 2017 and lasted till

00:07:29,260 --> 00:07:36,740
December of 2017 and this was I think I

00:07:33,680 --> 00:07:38,930
I helped put together a lot of changes

00:07:36,740 --> 00:07:41,599
from a lot of people so for example will

00:07:38,930 --> 00:07:44,060
Stevens from cloud not see he effects

00:07:41,599 --> 00:07:45,050
the VPN part so we moved from opens find

00:07:44,060 --> 00:07:47,330
the Strongs file

00:07:45,050 --> 00:07:49,639
we know from pc extreme helped me to fix

00:07:47,330 --> 00:07:51,620
the system v scripts and then there was

00:07:49,639 --> 00:07:54,289
Rafael and I Moser and countless people

00:07:51,620 --> 00:07:56,630
that I think I don't remember how you

00:07:54,289 --> 00:07:59,930
can move to the pull request to see but

00:07:56,630 --> 00:08:01,400
they helped to basically report bugs you

00:07:59,930 --> 00:08:04,400
contribute some changes and I would

00:08:01,400 --> 00:08:06,620
basically test them together and with

00:08:04,400 --> 00:08:09,680
this pull request what we also try to do

00:08:06,620 --> 00:08:12,199
is reach almost 100% smooth test

00:08:09,680 --> 00:08:13,870
compliance that means we try to make

00:08:12,199 --> 00:08:18,520
sure that the smooth test will pass

00:08:13,870 --> 00:08:21,199
almost 100% on VMware km ends ends level

00:08:18,520 --> 00:08:22,849
the next thing is the change in building

00:08:21,199 --> 00:08:25,310
so the past virtual water used

00:08:22,849 --> 00:08:27,710
VirtualBox so a lot of people had a lot

00:08:25,310 --> 00:08:28,650
of fun to set up VirtualBox on a Linux

00:08:27,710 --> 00:08:31,770
environment and

00:08:28,650 --> 00:08:33,810
do it themselves the new virtual looter

00:08:31,770 --> 00:08:35,580
is far more easier to build like you can

00:08:33,810 --> 00:08:38,300
build on your laptops a lot of people

00:08:35,580 --> 00:08:39,510
they use Packer for building system

00:08:38,300 --> 00:08:41,610
sorry

00:08:39,510 --> 00:08:44,190
Packer for building guest images and

00:08:41,610 --> 00:08:48,210
system template is just another guest VM

00:08:44,190 --> 00:08:50,400
so you can use Packer to build the base

00:08:48,210 --> 00:08:52,950
image and we are using the same sort of

00:08:50,400 --> 00:08:55,980
export tools and archiving tool like we

00:08:52,950 --> 00:08:58,589
did before and I we believe the present

00:08:55,980 --> 00:09:00,390
way of building is far more easy it is

00:08:58,589 --> 00:09:03,839
consistent so you can build on a laptop

00:09:00,390 --> 00:09:07,560
or put in a CIC we job use Jenkins to

00:09:03,839 --> 00:09:10,860
automate that the the next thing is how

00:09:07,560 --> 00:09:12,510
does a virtual loader patch and we will

00:09:10,860 --> 00:09:14,760
come till the word patching means but

00:09:12,510 --> 00:09:16,350
just for comparison sake I'll say the

00:09:14,760 --> 00:09:19,320
patching process uses the same

00:09:16,350 --> 00:09:21,390
fundamental idea like the past fear as

00:09:19,320 --> 00:09:23,580
in the present we are the other thing we

00:09:21,390 --> 00:09:25,529
did must be refactored the code that

00:09:23,580 --> 00:09:28,380
does patching so there was a one single

00:09:25,529 --> 00:09:30,720
file many of us in the community would

00:09:28,380 --> 00:09:33,480
know that this file was the infamous

00:09:30,720 --> 00:09:34,980
cloud early conflict so big bash script

00:09:33,480 --> 00:09:36,839
maybe two or three thousand lines of

00:09:34,980 --> 00:09:39,810
code and it will do the patching for you

00:09:36,839 --> 00:09:41,400
and the thing was anytime you would make

00:09:39,810 --> 00:09:43,770
a single change you laughs to rebuild

00:09:41,400 --> 00:09:45,930
your entire system IAM temperate this

00:09:43,770 --> 00:09:47,880
was not pretty at all so we refactored

00:09:45,930 --> 00:09:50,370
we basically minimize the chloral

00:09:47,880 --> 00:09:53,070
reconfigure as much as possible and put

00:09:50,370 --> 00:09:55,170
all the changes in in separate

00:09:53,070 --> 00:09:56,670
directories so now if you want to make

00:09:55,170 --> 00:09:58,470
any changes you make a change you

00:09:56,670 --> 00:10:00,750
created a system MDOT ISO file and that

00:09:58,470 --> 00:10:03,120
could be used to patch a system IAM

00:10:00,750 --> 00:10:06,120
template and we'll know we'll we look at

00:10:03,120 --> 00:10:08,040
how that kind of improves things the

00:10:06,120 --> 00:10:10,020
other thing and kind of interesting

00:10:08,040 --> 00:10:11,790
thing I found was you know when you are

00:10:10,020 --> 00:10:13,320
moving from an older system to a new

00:10:11,790 --> 00:10:16,140
system whether you are refactoring or

00:10:13,320 --> 00:10:17,910
rewriting a feature you come across a

00:10:16,140 --> 00:10:20,010
lot of technical dates I have come

00:10:17,910 --> 00:10:23,070
across this a lot of technical debt that

00:10:20,010 --> 00:10:25,290
has that had you know piled up in the

00:10:23,070 --> 00:10:27,630
past year so for example for no reason

00:10:25,290 --> 00:10:29,250
the posterior would patch and reboot one

00:10:27,630 --> 00:10:32,040
two three times depending on a specific

00:10:29,250 --> 00:10:33,990
case or hypervisor the new we are the

00:10:32,040 --> 00:10:36,510
first thing I did was to refactor the

00:10:33,990 --> 00:10:37,329
scripts make it system B enable and see

00:10:36,510 --> 00:10:39,040
if we can

00:10:37,329 --> 00:10:40,629
without rebooting because it didn't make

00:10:39,040 --> 00:10:42,819
sense to me

00:10:40,629 --> 00:10:44,439
maybe the reason why they had reboot

00:10:42,819 --> 00:10:46,839
source you know just to the patching and

00:10:44,439 --> 00:10:48,610
reboot so you don't have to keep take

00:10:46,839 --> 00:10:51,699
care of any missed edge case and things

00:10:48,610 --> 00:10:54,160
like that so what we have done is there

00:10:51,699 --> 00:10:57,009
are zero reboots except for a specific

00:10:54,160 --> 00:10:59,549
case in VMware where the router cannot

00:10:57,009 --> 00:11:02,920
ping the the control of the management

00:10:59,549 --> 00:11:05,230
gateway otherwise we we don't do a

00:11:02,920 --> 00:11:07,569
reboot the other thing we have done is

00:11:05,230 --> 00:11:10,029
patching is much more faster predictable

00:11:07,569 --> 00:11:12,549
and you can observe you can use system

00:11:10,029 --> 00:11:14,889
data basically plot of frame flame graph

00:11:12,549 --> 00:11:16,420
to basically see which process is taking

00:11:14,889 --> 00:11:19,119
how much amount of time and we'll we'll

00:11:16,420 --> 00:11:21,730
come to that in a little while and that

00:11:19,119 --> 00:11:23,799
actually help to optimize the patching

00:11:21,730 --> 00:11:26,350
process then boot processes well the

00:11:23,799 --> 00:11:28,389
last thing is a serial TTY console so

00:11:26,350 --> 00:11:30,699
you can if you are using if you are if

00:11:28,389 --> 00:11:32,439
you're known something like XE tools or

00:11:30,699 --> 00:11:34,749
worse you can use those to basically

00:11:32,439 --> 00:11:36,939
attach a console to the virtual router

00:11:34,749 --> 00:11:41,769
and get it directly of course you have

00:11:36,939 --> 00:11:45,129
SSH and console proxy for the access all

00:11:41,769 --> 00:11:48,429
right so this one I think is something

00:11:45,129 --> 00:11:50,259
that Dagon Giles put together a blog so

00:11:48,429 --> 00:11:52,209
there's a reference to that blog and you

00:11:50,259 --> 00:11:54,910
must have seen this table earlier from

00:11:52,209 --> 00:11:58,029
the keynote as with the other thing we

00:11:54,910 --> 00:12:00,819
did was and this again to credit Visa or

00:11:58,029 --> 00:12:02,919
Emmy and maybe few other people who come

00:12:00,819 --> 00:12:04,929
up with the initial pull request what

00:12:02,919 --> 00:12:07,209
they came up with was this idea so the

00:12:04,929 --> 00:12:10,269
initial idea was how do we reduce the

00:12:07,209 --> 00:12:12,249
downtime of over tributed every time

00:12:10,269 --> 00:12:14,049
there was a new version of cloud stack

00:12:12,249 --> 00:12:17,259
lightly there was a new version of

00:12:14,049 --> 00:12:18,910
system e intemperate and III have come

00:12:17,259 --> 00:12:21,429
across a lot of users who really like to

00:12:18,910 --> 00:12:22,720
upgrade you know that that of course is

00:12:21,429 --> 00:12:25,749
a joke you know people don't like to

00:12:22,720 --> 00:12:27,970
upgrade much especially when they you

00:12:25,749 --> 00:12:30,939
know they try to they want to restart

00:12:27,970 --> 00:12:32,950
the networks people don't enjoy that and

00:12:30,939 --> 00:12:36,850
that affects their SLA is and

00:12:32,950 --> 00:12:39,580
you know etc so the the general idea

00:12:36,850 --> 00:12:41,320
came up with redundant beers so the idea

00:12:39,580 --> 00:12:43,480
for written in VRS you have a backup in

00:12:41,320 --> 00:12:45,250
a master one of them can go down the

00:12:43,480 --> 00:12:48,400
other one becomes the master in your

00:12:45,250 --> 00:12:51,460
network stays on the downtown observe

00:12:48,400 --> 00:12:53,290
could be zero to the amount of time it

00:12:51,460 --> 00:12:55,510
takes that we are happy protocol to kick

00:12:53,290 --> 00:12:57,880
in which i think is in the range of one

00:12:55,510 --> 00:13:00,790
to three seconds you can tune that so

00:12:57,880 --> 00:13:02,590
what we saw came up with was so the

00:13:00,790 --> 00:13:04,330
earlier version that you would restart a

00:13:02,590 --> 00:13:07,630
network was you will get rid of first

00:13:04,330 --> 00:13:09,820
you will get rid of all the old beers so

00:13:07,630 --> 00:13:11,920
see you have a bunch of old we ask

00:13:09,820 --> 00:13:13,750
you've got rid of them but you have also

00:13:11,920 --> 00:13:16,270
upgraded CloudStack there is no

00:13:13,750 --> 00:13:18,790
guarantee that the new we are may

00:13:16,270 --> 00:13:20,380
provision that could be you know

00:13:18,790 --> 00:13:22,300
resource issue there could be compute

00:13:20,380 --> 00:13:24,820
storage those kind of issues so

00:13:22,300 --> 00:13:27,340
basically these are top there's a

00:13:24,820 --> 00:13:29,110
there's a very functioning system a

00:13:27,340 --> 00:13:30,700
virtual rooted in guest if those are

00:13:29,110 --> 00:13:33,250
running you've got rid of the world

00:13:30,700 --> 00:13:34,870
beers right there is no way to back up

00:13:33,250 --> 00:13:37,150
right so he got rid of the world way us

00:13:34,870 --> 00:13:39,040
and there's some problem with the new

00:13:37,150 --> 00:13:42,850
wheels that come up you practically are

00:13:39,040 --> 00:13:45,280
practically screw so the idea was you

00:13:42,850 --> 00:13:47,440
first so in case of red onion because

00:13:45,280 --> 00:13:49,090
the idea was don't remove both the

00:13:47,440 --> 00:13:51,760
virtual rotors don't remove your backup

00:13:49,090 --> 00:13:54,220
and and your master we are instead

00:13:51,760 --> 00:13:56,890
remove the whole back of first then

00:13:54,220 --> 00:13:59,560
provision a new we are once the new way

00:13:56,890 --> 00:14:01,510
are comes up that new the BR will become

00:13:59,560 --> 00:14:03,280
a backup word salute then you destroy

00:14:01,510 --> 00:14:05,680
your old way are we need this when you

00:14:03,280 --> 00:14:07,630
destroy your old master we are the new

00:14:05,680 --> 00:14:09,880
backup we are will become master and

00:14:07,630 --> 00:14:13,960
then you provision the rest and this way

00:14:09,880 --> 00:14:17,080
right now with four eleven one sorry

00:14:13,960 --> 00:14:18,490
with four eleven one if you are if you

00:14:17,080 --> 00:14:21,250
are using a resilient you are in a

00:14:18,490 --> 00:14:22,990
network we kind of observe almost zero

00:14:21,250 --> 00:14:25,150
downtime already with this approach and

00:14:22,990 --> 00:14:27,430
we kind of applied the same approach

00:14:25,150 --> 00:14:30,370
with non redundant we are so the this

00:14:27,430 --> 00:14:33,220
table is his network downtime observed

00:14:30,370 --> 00:14:36,790
for an isolated non redundant we are and

00:14:33,220 --> 00:14:39,310
we see a lot of improvements let me try

00:14:36,790 --> 00:14:41,310
to explain at least in case of 1

00:14:39,310 --> 00:14:45,360
hypervisor we where we saw the most

00:14:41,310 --> 00:14:47,160
game in case of KVM and maybe sensor

00:14:45,360 --> 00:14:49,080
with the reason the virtual who does

00:14:47,160 --> 00:14:51,779
start very quickly is because you have a

00:14:49,080 --> 00:14:53,340
base template and you know the new

00:14:51,779 --> 00:14:55,200
virtual route a kind of folks like

00:14:53,340 --> 00:14:58,140
starts from that base template so if you

00:14:55,200 --> 00:15:00,270
have the guest OS image already on a

00:14:58,140 --> 00:15:02,790
primary storage pool and when you start

00:15:00,270 --> 00:15:04,710
a new we or it just comes up in case of

00:15:02,790 --> 00:15:07,260
beam a what happens that it will copy

00:15:04,710 --> 00:15:09,240
that disk so whatever OVA file or a

00:15:07,260 --> 00:15:12,720
system in temperate image you have it

00:15:09,240 --> 00:15:15,450
will first make a copy of that that and

00:15:12,720 --> 00:15:17,670
best IO are probably the root cause of

00:15:15,450 --> 00:15:20,430
why it takes a lot of time so in our

00:15:17,670 --> 00:15:22,500
test environment for example with 493 it

00:15:20,430 --> 00:15:24,870
takes two minutes for VMware for the we

00:15:22,500 --> 00:15:27,150
are to startup because it's it's spread

00:15:24,870 --> 00:15:30,450
in three ways first a copy of the

00:15:27,150 --> 00:15:33,210
discuss made next the VR is started in

00:15:30,450 --> 00:15:37,260
patch in third it will be program in K

00:15:33,210 --> 00:15:39,720
in our case with 411 one with this near

00:15:37,260 --> 00:15:43,080
zero time zero downtime of great patch

00:15:39,720 --> 00:15:45,360
what we are doing is we first provision

00:15:43,080 --> 00:15:48,839
the new router that means you basically

00:15:45,360 --> 00:15:51,240
copy the disk and start the VM also

00:15:48,839 --> 00:15:53,550
patch the VM and started right then you

00:15:51,240 --> 00:15:56,640
destroy the old router and then you

00:15:53,550 --> 00:15:59,100
basically do sort of you know a manual

00:15:56,640 --> 00:16:01,740
hand over and we see a lot of reduction

00:15:59,100 --> 00:16:03,540
in downtime so for example from two

00:16:01,740 --> 00:16:05,339
minutes of if you are going from minutes

00:16:03,540 --> 00:16:08,130
to seconds that's sort of what we

00:16:05,339 --> 00:16:10,170
achieved with this approach and there is

00:16:08,130 --> 00:16:12,270
some future work where I think we want

00:16:10,170 --> 00:16:17,550
to maybe you know improve that further

00:16:12,270 --> 00:16:20,130
on alright so that was a comparison

00:16:17,550 --> 00:16:23,310
between the past in the present now in

00:16:20,130 --> 00:16:25,350
order to you know basically good back go

00:16:23,310 --> 00:16:27,390
to the future we have to understand the

00:16:25,350 --> 00:16:31,110
present soil Segway my talk into the

00:16:27,390 --> 00:16:33,240
current we are implementation so the

00:16:31,110 --> 00:16:34,950
first question is we have to look at in

00:16:33,240 --> 00:16:38,100
order to understand the present we have

00:16:34,950 --> 00:16:40,410
to understand how systems are born in

00:16:38,100 --> 00:16:42,720
the first place you know understand of

00:16:40,410 --> 00:16:44,670
the whole life cycle so the currently

00:16:42,720 --> 00:16:47,880
what happens is any system whether

00:16:44,670 --> 00:16:50,850
virtual routed the console proxy B Mrs S

00:16:47,880 --> 00:16:53,250
beam you know first of all the system M

00:16:50,850 --> 00:16:55,560
template is copied on a hypervisor on a

00:16:53,250 --> 00:16:58,020
primary storage pool for example and

00:16:55,560 --> 00:16:59,760
this VM will start and based on a

00:16:58,020 --> 00:17:01,380
specific hypervisor the command lines

00:16:59,760 --> 00:17:03,540
some initial options are passed to it

00:17:01,380 --> 00:17:05,640
and the payload the scripts they are

00:17:03,540 --> 00:17:07,440
passed to this will be M by attaching an

00:17:05,640 --> 00:17:10,260
iso file which contains these three

00:17:07,440 --> 00:17:13,200
files we'll look at that later on as

00:17:10,260 --> 00:17:14,880
well and we also pass what kind of you

00:17:13,200 --> 00:17:18,270
know what you machine is this is it the

00:17:14,880 --> 00:17:20,460
console proxy is a shared virtual shred

00:17:18,270 --> 00:17:23,220
network virtual root of e QC virtual

00:17:20,460 --> 00:17:25,470
rotor etcetera and it kind of boots on

00:17:23,220 --> 00:17:29,100
batching I mean the new VR doesn't do

00:17:25,470 --> 00:17:32,400
that often only in case of VMware and a

00:17:29,100 --> 00:17:34,110
very specific case so here's the

00:17:32,400 --> 00:17:37,260
lifecycle I am NOT going to go very deep

00:17:34,110 --> 00:17:39,660
but this for just the blueprint of what

00:17:37,260 --> 00:17:41,790
it does so we have a system ham template

00:17:39,660 --> 00:17:45,330
we should know how to how to build it

00:17:41,790 --> 00:17:47,940
how to patch it how to upgrade that so

00:17:45,330 --> 00:17:49,890
we have covered those topics then clock

00:17:47,940 --> 00:17:52,440
star comes into picture clock stock has

00:17:49,890 --> 00:17:54,870
its own understanding of networking how

00:17:52,440 --> 00:17:57,240
a specific network type or topology is

00:17:54,870 --> 00:17:59,100
implemented then short stack will

00:17:57,240 --> 00:18:01,110
program the we are and there are a bunch

00:17:59,100 --> 00:18:03,260
of features you can see that we are

00:18:01,110 --> 00:18:06,720
supports so those are the different

00:18:03,260 --> 00:18:09,420
features as you as you can see supported

00:18:06,720 --> 00:18:12,300
by different different binaries so just

00:18:09,420 --> 00:18:13,680
for example the DNS mask service which

00:18:12,300 --> 00:18:16,230
runs in the Virgin Rooter is a

00:18:13,680 --> 00:18:18,030
responsible for DHCP and DNS and you

00:18:16,230 --> 00:18:20,070
don't actually have to look at that but

00:18:18,030 --> 00:18:22,740
maybe if somebody wants to reference

00:18:20,070 --> 00:18:24,330
that in future I thought I'll just do a

00:18:22,740 --> 00:18:25,890
survey for everyone so these are

00:18:24,330 --> 00:18:28,830
different features in cloud stack and

00:18:25,890 --> 00:18:32,120
different like tools and technologies we

00:18:28,830 --> 00:18:35,750
use to implement them

00:18:32,120 --> 00:18:38,300
and I'll probably do some demo and for

00:18:35,750 --> 00:18:40,070
the demo purpose I am using a caving

00:18:38,300 --> 00:18:42,680
based monkey box so this is a link so

00:18:40,070 --> 00:18:44,480
you can go and so it's like dev Lord but

00:18:42,680 --> 00:18:47,330
for for Cavin we have to come up with

00:18:44,480 --> 00:18:49,520
the fancy name so I think we came up

00:18:47,330 --> 00:18:51,230
with monkey box the first thing is how

00:18:49,520 --> 00:18:53,990
do you build system um template so it's

00:18:51,230 --> 00:18:56,060
quite easy you throw in the repository

00:18:53,990 --> 00:18:57,890
and there is a build script Iran if you

00:18:56,060 --> 00:18:59,570
are already on Linux and how came you

00:18:57,890 --> 00:19:01,910
install that you don't have to do

00:18:59,570 --> 00:19:04,850
anything I'll skip this part this is

00:19:01,910 --> 00:19:06,410
just for reference throughout my talk

00:19:04,850 --> 00:19:09,740
I'll be skipping some of the slides

00:19:06,410 --> 00:19:11,770
because we I think have to complete this

00:19:09,740 --> 00:19:14,870
in 50 minutes but if anyone wants to

00:19:11,770 --> 00:19:18,230
hack with me further we have a session

00:19:14,870 --> 00:19:20,360
on Wednesday so the first thing is how

00:19:18,230 --> 00:19:23,990
does the system um template itself patch

00:19:20,360 --> 00:19:25,850
I think it does in three stages the

00:19:23,990 --> 00:19:28,190
first stages there is a cloud early

00:19:25,850 --> 00:19:31,720
config script which is not tied to a

00:19:28,190 --> 00:19:36,860
system D service so if this guy starts

00:19:31,720 --> 00:19:40,400
in the in the beginning and so cloudy

00:19:36,860 --> 00:19:42,200
early conflict starts and the cloud

00:19:40,400 --> 00:19:44,480
cycle attacks the system m'lord I also

00:19:42,200 --> 00:19:46,730
file and there are different ways how it

00:19:44,480 --> 00:19:48,890
passes the system online options so in

00:19:46,730 --> 00:19:50,420
case of K limit does by serial port in

00:19:48,890 --> 00:19:53,450
case of XenServer there are two options

00:19:50,420 --> 00:19:55,220
then server uses pie graph to boot just

00:19:53,450 --> 00:19:57,440
a minute so you can either pass the

00:19:55,220 --> 00:19:59,060
command-line directly and inside the

00:19:57,440 --> 00:20:01,160
guest favorite will be available at prop

00:19:59,060 --> 00:20:03,590
command line or you can use XenServer to

00:20:01,160 --> 00:20:05,420
or for example similar ways use PI

00:20:03,590 --> 00:20:07,790
VMware by using open VM tool to

00:20:05,420 --> 00:20:11,030
basically read the initial options in

00:20:07,790 --> 00:20:12,620
stage two this is present we are right

00:20:11,030 --> 00:20:15,320
so what we have done is we have created

00:20:12,620 --> 00:20:17,900
a bash script for each type of the

00:20:15,320 --> 00:20:20,840
virtual machine and and will basically

00:20:17,900 --> 00:20:22,850
look at that briefly so that script is

00:20:20,840 --> 00:20:25,460
executed and it will magically convert

00:20:22,850 --> 00:20:27,560
your guest VM into that type of system

00:20:25,460 --> 00:20:28,970
you and then finally there is a post

00:20:27,560 --> 00:20:31,040
ended service which will conclude

00:20:28,970 --> 00:20:33,530
batching start as a stretch in whatnot

00:20:31,040 --> 00:20:36,029
and if you see on the right hand side

00:20:33,530 --> 00:20:38,129
this is the flume graph that I was

00:20:36,029 --> 00:20:41,249
talking about so using system D you can

00:20:38,129 --> 00:20:43,200
actually print out this is this thing in

00:20:41,249 --> 00:20:45,539
the largest red part so this is the

00:20:43,200 --> 00:20:47,249
claro early config script and this small

00:20:45,539 --> 00:20:49,409
one is the i think is the post init

00:20:47,249 --> 00:20:52,529
script and the last small thing you will

00:20:49,409 --> 00:20:55,139
see here is their sit server itself a

00:20:52,529 --> 00:20:57,239
slightly bigger image for you to see and

00:20:55,139 --> 00:21:00,299
these are the commands we use how do

00:20:57,239 --> 00:21:02,429
basically measure you know and optimize

00:21:00,299 --> 00:21:04,289
your system in temperate so you can run

00:21:02,429 --> 00:21:07,200
system be analyzed and it tells you the

00:21:04,289 --> 00:21:08,879
amount of time it has taken for for us

00:21:07,200 --> 00:21:11,820
to basically start the virtual machine

00:21:08,879 --> 00:21:14,009
and patch it as a virtual routed on my

00:21:11,820 --> 00:21:16,769
laptop it takes 11 seconds to start over

00:21:14,009 --> 00:21:18,960
should route this so I think not bad and

00:21:16,769 --> 00:21:21,119
you can use systemd analyze plot to

00:21:18,960 --> 00:21:23,460
basically a plot of frame graph would

00:21:21,119 --> 00:21:26,999
have done is for for the test

00:21:23,460 --> 00:21:28,710
environment I have a local box running

00:21:26,999 --> 00:21:30,659
so I have a local virtual machine so

00:21:28,710 --> 00:21:35,190
this is a caving box that I'm running

00:21:30,659 --> 00:21:36,719
right and this is my local management

00:21:35,190 --> 00:21:40,109
server and running so I'm running a

00:21:36,719 --> 00:21:41,999
local management server here and I have

00:21:40,109 --> 00:21:43,619
the virtual routed deployed and I took

00:21:41,999 --> 00:21:45,919
the liberty to basically throw out that

00:21:43,619 --> 00:21:49,139
flame graphs beforehand so this is the

00:21:45,919 --> 00:21:51,089
flame graph for that systems virtual

00:21:49,139 --> 00:21:53,039
machine as you can see for the first

00:21:51,089 --> 00:21:54,659
almost two seconds nothing happens so

00:21:53,039 --> 00:21:56,489
this was probably the time it took the

00:21:54,659 --> 00:21:59,219
kernel to initialize itself and whatnot

00:21:56,489 --> 00:22:01,320
and maybe from two seconds to eleven

00:21:59,219 --> 00:22:05,039
seconds it did a lot of these operations

00:22:01,320 --> 00:22:08,820
and this way of you know these kind of

00:22:05,039 --> 00:22:10,739
tools that somebody has provided helps

00:22:08,820 --> 00:22:12,719
us to basically understand how to

00:22:10,739 --> 00:22:14,700
sequence the virtual router how to

00:22:12,719 --> 00:22:17,039
optimize it and see where the problems

00:22:14,700 --> 00:22:19,259
is so for example cloud early conflict

00:22:17,039 --> 00:22:22,489
took only 2 seconds flood Tron poster

00:22:19,259 --> 00:22:24,719
net service took 4 seconds so maybe

00:22:22,489 --> 00:22:26,539
there is a mismatch or there's something

00:22:24,719 --> 00:22:28,649
wrong there so we can we can use this

00:22:26,539 --> 00:22:30,419
these tools and this approach to

00:22:28,649 --> 00:22:32,629
basically debug and see what's going

00:22:30,419 --> 00:22:32,629
where

00:22:33,170 --> 00:22:40,760
back to the presentation so basically

00:22:37,430 --> 00:22:42,530
this allows us to debug in using this

00:22:40,760 --> 00:22:45,410
approach we could trim down the amount

00:22:42,530 --> 00:22:48,380
it takes to starter we are the present

00:22:45,410 --> 00:22:50,330
we are I think best case for example on

00:22:48,380 --> 00:22:52,790
in case of Cairo and on my laptop can

00:22:50,330 --> 00:22:54,800
take 11 seconds maybe in production it

00:22:52,790 --> 00:22:56,210
can take lower or higher than that

00:22:54,800 --> 00:22:58,760
depending on you know what kind of

00:22:56,210 --> 00:23:03,410
storage you have what kind of server you

00:22:58,760 --> 00:23:06,110
got etc okay what does it the ISO file

00:23:03,410 --> 00:23:08,870
so the ISO file is used as a payload so

00:23:06,110 --> 00:23:11,480
it is a way to push the payload in the

00:23:08,870 --> 00:23:14,000
system in template itself it has three

00:23:11,480 --> 00:23:15,920
main files the first file it has is the

00:23:14,000 --> 00:23:19,010
authorized key file so this is the ssh

00:23:15,920 --> 00:23:21,920
public key in case of VMware for example

00:23:19,010 --> 00:23:24,830
this is used to patch the system VM the

00:23:21,920 --> 00:23:26,870
ssh public key is how you know something

00:23:24,830 --> 00:23:29,960
can get in and out of the virtual route

00:23:26,870 --> 00:23:32,500
the virtual router by default uses ssh

00:23:29,960 --> 00:23:35,300
and public key based authentication

00:23:32,500 --> 00:23:38,360
there's an agent not zip file this is

00:23:35,300 --> 00:23:40,850
only used if you are creating a CP VM

00:23:38,360 --> 00:23:44,390
and ssbm and lastly we have cloud

00:23:40,850 --> 00:23:46,760
scripts not exit table right gzip double

00:23:44,390 --> 00:23:48,980
and it has various scripts that I use to

00:23:46,760 --> 00:23:50,540
configure the what you wrote it and then

00:23:48,980 --> 00:23:52,340
there are some details like you know how

00:23:50,540 --> 00:23:54,890
this system in order has to file is

00:23:52,340 --> 00:23:58,430
attached so in case of K this file says

00:23:54,890 --> 00:24:01,340
sets on a caving post and and the SSH

00:23:58,430 --> 00:24:04,490
authorized key is not used by km at all

00:24:01,340 --> 00:24:07,660
like we use a serial script patch via

00:24:04,490 --> 00:24:10,730
socket script to basically send the

00:24:07,660 --> 00:24:13,520
public key in case of VMware and then so

00:24:10,730 --> 00:24:17,360
where it gets it from from the ISO

00:24:13,520 --> 00:24:19,460
itself right not going to bore you a lot

00:24:17,360 --> 00:24:22,130
a lot with a lot of details the only

00:24:19,460 --> 00:24:24,200
important thing from this Redis in order

00:24:22,130 --> 00:24:25,490
to make any Linux books are out there

00:24:24,200 --> 00:24:27,290
what you have to do is you have to make

00:24:25,490 --> 00:24:29,630
sure that it is able to forward the

00:24:27,290 --> 00:24:31,520
packets so that's the only thing I have

00:24:29,630 --> 00:24:32,690
to show you here the other thing is just

00:24:31,520 --> 00:24:34,940
for reference if you

00:24:32,690 --> 00:24:37,070
detective the last thing I would also

00:24:34,940 --> 00:24:39,290
say is sometimes the colonel can panic

00:24:37,070 --> 00:24:41,390
for example it a lot of memory the desk

00:24:39,290 --> 00:24:43,640
useful on the virtual road so in that

00:24:41,390 --> 00:24:45,620
case they have added some crash handling

00:24:43,640 --> 00:24:47,780
here at the very end you can see so if

00:24:45,620 --> 00:24:50,180
it panics we want to reboot as quickly

00:24:47,780 --> 00:24:51,950
as possible so there is a there is a

00:24:50,180 --> 00:24:55,550
chance that next time it boots that will

00:24:51,950 --> 00:24:57,500
maybe recover itself post pattern so

00:24:55,550 --> 00:25:01,040
what happens after the virtual looper

00:24:57,500 --> 00:25:02,540
has patched itself using the the command

00:25:01,040 --> 00:25:05,990
line options in the ISO file

00:25:02,540 --> 00:25:09,320
it starts in SSH server with runs by

00:25:05,990 --> 00:25:11,090
default onboard 3:9 to do and there are

00:25:09,320 --> 00:25:12,770
various space to access you what to do

00:25:11,090 --> 00:25:14,930
there so in case of km there's a link

00:25:12,770 --> 00:25:17,060
local IP and civil also uses something

00:25:14,930 --> 00:25:19,400
similar in case of vmware they don't

00:25:17,060 --> 00:25:21,590
have a concept of a link global IP we

00:25:19,400 --> 00:25:23,300
use the private IP in your management

00:25:21,590 --> 00:25:25,220
server logs you will see something like

00:25:23,300 --> 00:25:27,470
check ssh command so this is something

00:25:25,220 --> 00:25:30,260
the management server tries again and

00:25:27,470 --> 00:25:31,790
again periodically either the master

00:25:30,260 --> 00:25:33,710
print server or the agent that means the

00:25:31,790 --> 00:25:35,990
cave i'm agent will do this basically it

00:25:33,710 --> 00:25:39,470
will check whether it is able to ssh

00:25:35,990 --> 00:25:41,480
into the we are once it is able to

00:25:39,470 --> 00:25:43,820
associate you basically in your UI or a

00:25:41,480 --> 00:25:45,400
two-acre you see that the vr is in the

00:25:43,820 --> 00:25:48,080
running State

00:25:45,400 --> 00:25:49,700
I'm just going to so these are just for

00:25:48,080 --> 00:25:52,220
reference it's in a world gone that

00:25:49,700 --> 00:25:54,740
talks about how do you how do you debuff

00:25:52,220 --> 00:25:56,750
and troubleshoot in what not the only

00:25:54,740 --> 00:25:58,460
difference now is in case of cave-in for

00:25:56,750 --> 00:26:00,680
example let me show you a small demo

00:25:58,460 --> 00:26:01,610
here so I'm going to get going inside

00:26:00,680 --> 00:26:05,510
the VirtualBox

00:26:01,610 --> 00:26:13,240
sorry inside the monkey box let me see

00:26:05,510 --> 00:26:16,790
if it works okay let me directly use the

00:26:13,240 --> 00:26:17,480
the console itself so now once you have

00:26:16,790 --> 00:26:20,300
SSH

00:26:17,480 --> 00:26:22,400
let's say if you if you got access to to

00:26:20,300 --> 00:26:25,490
the Linux box itself you can do worst

00:26:22,400 --> 00:26:27,440
console and you can say are 6:00 p.m. so

00:26:25,490 --> 00:26:29,240
you don't need to ssh you can directly

00:26:27,440 --> 00:26:32,530
you know get into that word should root

00:26:29,240 --> 00:26:34,960
it let me do it once again

00:26:32,530 --> 00:26:39,220
exact

00:26:34,960 --> 00:26:41,890
and if I try again looks like something

00:26:39,220 --> 00:26:43,870
or next up so okay so we are so as soon

00:26:41,890 --> 00:26:45,460
as I did worst console and presented

00:26:43,870 --> 00:26:47,680
with the serial console and I can

00:26:45,460 --> 00:26:49,660
basically log in as root and password so

00:26:47,680 --> 00:26:51,040
these are the default credentials and

00:26:49,660 --> 00:26:53,320
there's a global setting using which you

00:26:51,040 --> 00:26:55,330
can change the in default credentials

00:26:53,320 --> 00:26:56,050
and once you are inside the virtual

00:26:55,330 --> 00:26:57,640
looter

00:26:56,050 --> 00:26:59,650
by this approach you don't actually have

00:26:57,640 --> 00:27:01,510
to use as I said so it is handy in case

00:26:59,650 --> 00:27:04,540
you want to debug something very quickly

00:27:01,510 --> 00:27:07,420
and the same goes for XenServer so there

00:27:04,540 --> 00:27:09,160
is a you can use xc2 so you can use XE

00:27:07,420 --> 00:27:11,620
console and get into the VM isn't that

00:27:09,160 --> 00:27:16,210
way so that's just one additional way

00:27:11,620 --> 00:27:18,340
now to do to troubleshoot etc okay so

00:27:16,210 --> 00:27:20,290
these are the different network models

00:27:18,340 --> 00:27:22,050
that have supported or known and

00:27:20,290 --> 00:27:25,780
understood back route stack so we got

00:27:22,050 --> 00:27:27,490
some sort of share of flag Network so so

00:27:25,780 --> 00:27:29,290
here the idea is you're switching the

00:27:27,490 --> 00:27:31,180
traffic that means clouds like we are

00:27:29,290 --> 00:27:34,690
doesn't participate in routing at all

00:27:31,180 --> 00:27:37,180
maybe the router gives you DNS and DHCP

00:27:34,690 --> 00:27:39,250
and all that stuff for example in case

00:27:37,180 --> 00:27:40,960
of shared network in case of l2 networks

00:27:39,250 --> 00:27:43,540
we don't provision a via we don't need

00:27:40,960 --> 00:27:45,430
that I just thought I'll put it put in

00:27:43,540 --> 00:27:47,170
there the other kind of network we

00:27:45,430 --> 00:27:50,260
support is an active network that means

00:27:47,170 --> 00:27:52,930
the VAR acts as a router and it is

00:27:50,260 --> 00:27:54,820
routing between two networks example is

00:27:52,930 --> 00:27:57,400
the work is the isolated network or

00:27:54,820 --> 00:27:58,990
multi tier of EPC networks the last kind

00:27:57,400 --> 00:27:59,950
of network we don't officially support

00:27:58,990 --> 00:28:02,650
them yet

00:27:59,950 --> 00:28:04,360
though we have a POC so we have a

00:28:02,650 --> 00:28:06,430
special system in the blood that works

00:28:04,360 --> 00:28:10,060
in a different branch in cloud stack

00:28:06,430 --> 00:28:12,280
where OSPF plus twice exists then we can

00:28:10,060 --> 00:28:14,050
route so cloud stack router can actually

00:28:12,280 --> 00:28:19,390
route and talk to the co router get the

00:28:14,050 --> 00:28:22,060
you know network nodes etc I am just

00:28:19,390 --> 00:28:24,310
going to skip this and predict so

00:28:22,060 --> 00:28:26,240
everyone knows there are layers but the

00:28:24,310 --> 00:28:28,640
general idea is that your

00:28:26,240 --> 00:28:29,870
your Colonel weather-dependent it

00:28:28,640 --> 00:28:31,940
doesn't matter what kind of operating

00:28:29,870 --> 00:28:34,100
system at this but when someone is

00:28:31,940 --> 00:28:35,870
talking to like a client a server to a

00:28:34,100 --> 00:28:37,250
client is talking to a server and

00:28:35,870 --> 00:28:40,460
whatnot so these are the different

00:28:37,250 --> 00:28:42,080
layers it gets into and at least the

00:28:40,460 --> 00:28:44,450
developer should have an idea between

00:28:42,080 --> 00:28:46,100
what layer two to layer layer four means

00:28:44,450 --> 00:28:48,530
because that helps a lot in debugging

00:28:46,100 --> 00:28:52,100
and like writing a new feature for

00:28:48,530 --> 00:28:54,050
virtual etcetera and again a lot of

00:28:52,100 --> 00:28:57,410
people would also like to play with

00:28:54,050 --> 00:29:00,710
physical networks and this is a small

00:28:57,410 --> 00:29:03,860
lab I have had in my university days I

00:29:00,710 --> 00:29:05,870
thought I'll just put in there all right

00:29:03,860 --> 00:29:08,750
so isolation mode this is a very good

00:29:05,870 --> 00:29:10,580
concept like when a boss asked me to you

00:29:08,750 --> 00:29:12,710
know put in some so I asked him you know

00:29:10,580 --> 00:29:16,190
can I put in some cat gifs and he said

00:29:12,710 --> 00:29:18,350
why not dogs so this is for guys all

00:29:16,190 --> 00:29:20,330
right so isolation mode so these are the

00:29:18,350 --> 00:29:22,610
VLAN I think is the default isolation

00:29:20,330 --> 00:29:24,800
method we have in cloud stack like by

00:29:22,610 --> 00:29:27,770
default you can use over to have some

00:29:24,800 --> 00:29:30,110
VLANs and start in case of KVM we also

00:29:27,770 --> 00:29:31,820
support VX LAN and then there are

00:29:30,110 --> 00:29:36,500
different providers and different ways

00:29:31,820 --> 00:29:38,179
of of doing isolation of networking if I

00:29:36,500 --> 00:29:40,190
have time I will do some sort of demos

00:29:38,179 --> 00:29:42,860
around this but I'll basically write

00:29:40,190 --> 00:29:45,290
that in order to let us say work on a

00:29:42,860 --> 00:29:47,300
future version of cultural Rooter it

00:29:45,290 --> 00:29:50,390
needs to support these kind of isolation

00:29:47,300 --> 00:29:52,730
methods so that's the basic a point and

00:29:50,390 --> 00:29:54,590
and the general idea is that VLAN is

00:29:52,730 --> 00:29:57,200
just the header in the network packet to

00:29:54,590 --> 00:30:00,080
basically tag an intact similarly in

00:29:57,200 --> 00:30:04,059
case of VX LAN we are encapsulating and

00:30:00,080 --> 00:30:06,559
in case of for example Linux kernel the

00:30:04,059 --> 00:30:09,559
encapsulation and decapsulation occurs

00:30:06,559 --> 00:30:12,050
in the kernel so it's very fast so if

00:30:09,559 --> 00:30:14,509
you want more than let's say for

00:30:12,050 --> 00:30:16,249
zero-nine-five networks then go with

00:30:14,509 --> 00:30:20,089
we excellent and of course if you have

00:30:16,249 --> 00:30:22,070
cave in a lot of people also have

00:30:20,089 --> 00:30:23,989
trouble understanding what exactly is

00:30:22,070 --> 00:30:27,169
realized if time will actually look at

00:30:23,989 --> 00:30:29,209
violence and and it's probably going to

00:30:27,169 --> 00:30:32,989
be a fun exercise a figured time but the

00:30:29,209 --> 00:30:35,079
general idea is a router is responsible

00:30:32,989 --> 00:30:37,639
for switching a packet across networks

00:30:35,079 --> 00:30:40,669
if let's say there are two guest beams

00:30:37,639 --> 00:30:42,589
on the same network the router is not in

00:30:40,669 --> 00:30:44,749
the picture in their communication at

00:30:42,589 --> 00:30:47,179
all like all the if two virtual machines

00:30:44,749 --> 00:30:49,609
guest VMs are on the same Plex isolated

00:30:47,179 --> 00:30:51,199
network the virtual order comes into

00:30:49,609 --> 00:30:53,029
picture only when they want to talk to

00:30:51,199 --> 00:30:55,399
the outside or the outside wants to talk

00:30:53,029 --> 00:30:57,979
inside if the guest frame wants to talk

00:30:55,399 --> 00:30:59,989
to each other right there this they get

00:30:57,979 --> 00:31:01,369
switched by the bridges itself so what

00:30:59,989 --> 00:31:03,979
you looted the traffic doesn't actually

00:31:01,369 --> 00:31:06,549
get to what you looted some basic core

00:31:03,979 --> 00:31:09,109
concepts you are you need to understand

00:31:06,549 --> 00:31:11,479
okay it's time for some prettier picture

00:31:09,109 --> 00:31:13,759
so these are examples based on KVM you

00:31:11,479 --> 00:31:16,719
can experiment on the left-hand side

00:31:13,759 --> 00:31:19,099
when let's say you create a bridge

00:31:16,719 --> 00:31:20,859
network in cloud stack that isn't that

00:31:19,099 --> 00:31:23,449
so you can actually create a custom

00:31:20,859 --> 00:31:26,089
isolated network in cloud stack which is

00:31:23,449 --> 00:31:28,399
and that so in like create a specific

00:31:26,089 --> 00:31:31,159
network offering create a network that

00:31:28,399 --> 00:31:33,349
accepts custom VLAN ID and the VLAN ID

00:31:31,159 --> 00:31:35,299
you can put VLAN as and tag so you

00:31:33,349 --> 00:31:37,849
basically end up fooling and creating a

00:31:35,299 --> 00:31:40,339
system like this where you have physical

00:31:37,849 --> 00:31:43,669
mix on the host that basically end up

00:31:40,339 --> 00:31:45,709
connecting to bridge and that bridge can

00:31:43,669 --> 00:31:48,049
basically these are the v-necks so these

00:31:45,709 --> 00:31:50,479
are tap interfaces if you've got none

00:31:48,049 --> 00:31:53,479
and taps right so tab is an interface we

00:31:50,479 --> 00:31:55,369
basically a lttle interface like virtual

00:31:53,479 --> 00:31:56,050
software interface tablets plugged into

00:31:55,369 --> 00:31:58,630
your virtual

00:31:56,050 --> 00:32:00,640
your guest leaves and that's no

00:31:58,630 --> 00:32:03,850
isolation on the right hand side what

00:32:00,640 --> 00:32:07,480
happens is you have an actual physical

00:32:03,850 --> 00:32:09,840
Ethernet device and then using you

00:32:07,480 --> 00:32:12,550
basically create a VLAN device basically

00:32:09,840 --> 00:32:15,910
let's say you're at zero and you want

00:32:12,550 --> 00:32:17,890
VLAN ID to so it will be at 0.2 it will

00:32:15,910 --> 00:32:20,110
be plug to a bridge and L to bridge

00:32:17,890 --> 00:32:22,210
itself in case of KM so we are talking

00:32:20,110 --> 00:32:25,350
about Cayman so this is an inter bridge

00:32:22,210 --> 00:32:29,290
and it will basically connect itself to

00:32:25,350 --> 00:32:31,240
mimic it could be part so the vini could

00:32:29,290 --> 00:32:33,400
be plugged in to a guest VM or the

00:32:31,240 --> 00:32:35,080
virtual rotor itself now what you want

00:32:33,400 --> 00:32:37,920
what you actually want to understand is

00:32:35,080 --> 00:32:40,930
the whole point of this slide is that

00:32:37,920 --> 00:32:43,690
until this point there is no concept of

00:32:40,930 --> 00:32:46,330
isolation the VLAN tagging and tagging

00:32:43,690 --> 00:32:48,160
is is by this gives this guy this device

00:32:46,330 --> 00:32:49,930
so the virtual luta the point I'm trying

00:32:48,160 --> 00:32:52,810
to make here is which is rooted itself

00:32:49,930 --> 00:32:55,090
doesn't know about isolation the virtual

00:32:52,810 --> 00:32:56,710
room that does not actually do VLAN

00:32:55,090 --> 00:32:59,200
tagging or we extract are you know what

00:32:56,710 --> 00:33:01,540
what have you it is on the host level or

00:32:59,200 --> 00:33:02,950
the hypervisor layer level where you

00:33:01,540 --> 00:33:07,150
basically have some sort of network

00:33:02,950 --> 00:33:09,130
device which is handling this and this

00:33:07,150 --> 00:33:13,690
may be this will come handy when we

00:33:09,130 --> 00:33:15,460
devote you know debug networks the other

00:33:13,690 --> 00:33:17,620
reason I put in those slides were a lot

00:33:15,460 --> 00:33:19,900
of new people want to come in join the

00:33:17,620 --> 00:33:22,390
effort towards the future of virtual

00:33:19,900 --> 00:33:24,130
it's important to understand the present

00:33:22,390 --> 00:33:27,070
so you know we can do something about

00:33:24,130 --> 00:33:29,710
the future these are some some simple

00:33:27,070 --> 00:33:30,580
you know examples how you can experiment

00:33:29,710 --> 00:33:33,010
in akhira

00:33:30,580 --> 00:33:36,460
so watch list can do the listing you can

00:33:33,010 --> 00:33:38,860
do IPA to say get the number of you know

00:33:36,460 --> 00:33:42,820
all the interfaces you can do beyond CTL

00:33:38,860 --> 00:33:44,980
show and there's be a shitty CTL I think

00:33:42,820 --> 00:33:46,780
so MAC addresses and using that you can

00:33:44,980 --> 00:33:48,640
you can see the arc table of that

00:33:46,780 --> 00:33:50,440
specific bridge so you can actually

00:33:48,640 --> 00:33:52,090
understand how that working who works

00:33:50,440 --> 00:33:55,960
and what not and these are some handy

00:33:52,090 --> 00:33:58,060
tools to look at the IP table rules and

00:33:55,960 --> 00:33:58,950
we'll experiment that at the very end if

00:33:58,060 --> 00:34:01,270
we have time

00:33:58,950 --> 00:34:03,370
alright so these are the network types

00:34:01,270 --> 00:34:05,320
that we ought to support the future

00:34:03,370 --> 00:34:07,120
future of virtual looters need to

00:34:05,320 --> 00:34:10,210
support these various network types so

00:34:07,120 --> 00:34:12,010
we got into a network Nicolas is sitting

00:34:10,210 --> 00:34:15,399
there so he was the guy who implemented

00:34:12,010 --> 00:34:17,140
infinite work isolated network so we got

00:34:15,399 --> 00:34:19,960
isolated single-tier basically

00:34:17,140 --> 00:34:22,570
networking BBC what you actually see

00:34:19,960 --> 00:34:25,330
here is if I as a developer I were to

00:34:22,570 --> 00:34:27,730
look at this at the you know with fresh

00:34:25,330 --> 00:34:29,860
eyes I'll say isolated network is a

00:34:27,730 --> 00:34:32,530
special case of EPC network with just

00:34:29,860 --> 00:34:34,630
one tier so that's just one idea you can

00:34:32,530 --> 00:34:36,790
refactor the isolated network in BBC

00:34:34,630 --> 00:34:39,550
network into a kind of network that

00:34:36,790 --> 00:34:41,560
supports multiple tiers so that's like

00:34:39,550 --> 00:34:43,990
one way to think about what you know

00:34:41,560 --> 00:34:46,899
future we can aspire for the next thing

00:34:43,990 --> 00:34:49,149
is a shared network so shared network is

00:34:46,899 --> 00:34:52,720
available I think in both basic zone 4

00:34:49,149 --> 00:34:54,220
and 4 at one's own I think in case of km

00:34:52,720 --> 00:34:56,649
you can also do security groups in

00:34:54,220 --> 00:34:59,470
advance ooh so another idea we don't

00:34:56,649 --> 00:35:01,390
need the different zone type we don't

00:34:59,470 --> 00:35:04,240
need basic zone an advanced zones we can

00:35:01,390 --> 00:35:06,190
just you know refactor it as a zone and

00:35:04,240 --> 00:35:07,420
if you know if you want to share that

00:35:06,190 --> 00:35:09,340
well you can just create a shared

00:35:07,420 --> 00:35:11,500
network whether irrespective of what

00:35:09,340 --> 00:35:13,750
kind of zone is it is so we've got

00:35:11,500 --> 00:35:15,610
hard-coded technical debt that we have

00:35:13,750 --> 00:35:17,680
accumulated and those are the things we

00:35:15,610 --> 00:35:23,530
can work in the future or we are to

00:35:17,680 --> 00:35:25,510
basically solve infix ok let's take a

00:35:23,530 --> 00:35:28,090
deep breath

00:35:25,510 --> 00:35:30,310
we are programming it's probably the

00:35:28,090 --> 00:35:33,490
most ridiculous thing I've come across

00:35:30,310 --> 00:35:35,830
and there's no single you know I have to

00:35:33,490 --> 00:35:38,650
have to refactor in learn a lot in order

00:35:35,830 --> 00:35:40,900
to create the present we are like

00:35:38,650 --> 00:35:43,330
migrate to the present we are so in

00:35:40,900 --> 00:35:44,880
cloud star there are two interfaces or

00:35:43,330 --> 00:35:46,960
you can say classes called virtual

00:35:44,880 --> 00:35:48,640
routing resource and what should order

00:35:46,960 --> 00:35:51,340
deploy these two guys are responsible

00:35:48,640 --> 00:35:53,830
for doing mainly two or three things one

00:35:51,340 --> 00:35:55,360
is to create like a file or something in

00:35:53,830 --> 00:35:57,790
the virtual routed and other one is to

00:35:55,360 --> 00:35:59,950
execute that and for every hypervisor

00:35:57,790 --> 00:36:02,980
type you can extend that feature and and

00:35:59,950 --> 00:36:04,510
basically implement be mechanism like

00:36:02,980 --> 00:36:06,730
how do you get into a we are and create

00:36:04,510 --> 00:36:09,640
that file how do you get into that VR

00:36:06,730 --> 00:36:12,400
and execute that thing the other thing I

00:36:09,640 --> 00:36:14,650
learned was the executable scripts are

00:36:12,400 --> 00:36:16,870
in this location of cloud burn so

00:36:14,650 --> 00:36:18,790
whatever you are executing whether you

00:36:16,870 --> 00:36:21,270
are trying to add a new VM adding new

00:36:18,790 --> 00:36:24,460
DNS and DHCP entries whether you want to

00:36:21,270 --> 00:36:26,620
like attach a VPN like start a VPN

00:36:24,460 --> 00:36:30,400
service or do whatever so all those

00:36:26,620 --> 00:36:31,990
scripts are in that location and also

00:36:30,400 --> 00:36:34,090
found in case of KVM there's something

00:36:31,990 --> 00:36:36,280
what is router proxy so the way it works

00:36:34,090 --> 00:36:39,100
is the management server talks the host

00:36:36,280 --> 00:36:41,500
cause this file and this file internally

00:36:39,100 --> 00:36:44,500
SSH is to the virtual hood or the link

00:36:41,500 --> 00:36:46,450
local IP on the port 3 9 level 2 and

00:36:44,500 --> 00:36:49,570
then execute stuff in the wire so we

00:36:46,450 --> 00:36:52,720
have got a lot of things going on here

00:36:49,570 --> 00:36:54,970
the next thing I see is the payload from

00:36:52,720 --> 00:36:56,710
the management server is deployed in the

00:36:54,970 --> 00:36:59,770
virtual loop there as a JSON file that

00:36:56,710 --> 00:37:02,260
JSON file is read by some Python script

00:36:59,770 --> 00:37:04,450
and then it is processed and gzip that

00:37:02,260 --> 00:37:07,390
moved to the specific folder called for

00:37:04,450 --> 00:37:10,180
cash cloud processing and if that was

00:37:07,390 --> 00:37:12,820
not ridiculous enough this another file

00:37:10,180 --> 00:37:14,380
there is another way of pushing the

00:37:12,820 --> 00:37:17,620
payload so there is something called as

00:37:14,380 --> 00:37:19,810
a config file it is an example with

00:37:17,620 --> 00:37:22,570
Jason in a lot of payload and whatnot

00:37:19,810 --> 00:37:26,080
and it creates this VR - he already dot

00:37:22,570 --> 00:37:28,330
CFG file and so when you do a restart it

00:37:26,080 --> 00:37:30,520
does aggregation in you know apply

00:37:28,330 --> 00:37:33,460
several rules and several types in what

00:37:30,520 --> 00:37:37,360
not in examine file that has Jason in it

00:37:33,460 --> 00:37:40,210
and it is executed by a different thing

00:37:37,360 --> 00:37:44,620
right and the last thing is there are a

00:37:40,210 --> 00:37:47,020
lot of like clouds that we are tries to

00:37:44,620 --> 00:37:50,620
do a very bad job at differing in

00:37:47,020 --> 00:37:53,530
applying the changes and in turn so what

00:37:50,620 --> 00:37:56,440
I see from all of your faces is you know

00:37:53,530 --> 00:37:57,910
you're like in the panic or you know

00:37:56,440 --> 00:37:59,980
like what's happening there's so much

00:37:57,910 --> 00:38:02,140
did so many details side it has to be

00:37:59,980 --> 00:38:04,330
very simple it has to be a very simple

00:38:02,140 --> 00:38:05,980
process like clouds type decides what

00:38:04,330 --> 00:38:07,690
the way I should do it gives that

00:38:05,980 --> 00:38:09,790
information to the we are and the we are

00:38:07,690 --> 00:38:12,130
should apply that's all it should be

00:38:09,790 --> 00:38:14,020
very easy for a new person to understand

00:38:12,130 --> 00:38:15,880
and and and basically make changes in

00:38:14,020 --> 00:38:18,040
the VR code so I think that's what we

00:38:15,880 --> 00:38:20,740
want right so we want some firepower

00:38:18,040 --> 00:38:22,720
from new developers right who basically

00:38:20,740 --> 00:38:25,600
help us refactor this part of the code

00:38:22,720 --> 00:38:27,270
base the entire we are code bases two to

00:38:25,600 --> 00:38:30,100
three thousand lines of Python code I

00:38:27,270 --> 00:38:32,320
believe we can do that we can refactor

00:38:30,100 --> 00:38:34,930
and maybe improve we can even get some

00:38:32,320 --> 00:38:36,670
sort of agent or you know we can explore

00:38:34,930 --> 00:38:38,710
different technologies or different ways

00:38:36,670 --> 00:38:41,140
how do we program the we are

00:38:38,710 --> 00:38:43,900
consistently how do we patch can we do

00:38:41,140 --> 00:38:44,740
online patching that means of we are is

00:38:43,900 --> 00:38:46,870
already there

00:38:44,740 --> 00:38:49,120
we don't need to destroy the world we

00:38:46,870 --> 00:38:50,860
are created you want in touch so those

00:38:49,120 --> 00:38:53,770
are the things I think we want to

00:38:50,860 --> 00:38:57,730
explore and not be like this cat who's

00:38:53,770 --> 00:39:00,280
in the panic code right okay let me let

00:38:57,730 --> 00:39:02,890
me also survey with some pretty diagrams

00:39:00,280 --> 00:39:04,360
so these are all examples from monkey

00:39:02,890 --> 00:39:06,790
pox you can download and play on your

00:39:04,360 --> 00:39:09,490
own laptop these are just diagrams of

00:39:06,790 --> 00:39:11,530
the network setup so so in order to move

00:39:09,490 --> 00:39:14,290
to the future of the VR we also need to

00:39:11,530 --> 00:39:15,670
understand case-by-case basis how are

00:39:14,290 --> 00:39:17,410
different necks are configured they're

00:39:15,670 --> 00:39:19,720
plugged in and whatnot and can be

00:39:17,410 --> 00:39:22,270
unified that and I will explain like

00:39:19,720 --> 00:39:25,210
what I mean by unifying so take this

00:39:22,270 --> 00:39:28,120
example this is an example for ssbm or

00:39:25,210 --> 00:39:31,180
SCP VM virtual machine what happens is

00:39:28,120 --> 00:39:33,910
the SSP MRCP Wims virtual machine has at

00:39:31,180 --> 00:39:34,960
least three necks on it so x0 used as a

00:39:33,910 --> 00:39:37,000
link

00:39:34,960 --> 00:39:39,310
so that means link-local is only used

00:39:37,000 --> 00:39:41,860
for programming purposes the management

00:39:39,310 --> 00:39:45,700
server or the management server we are

00:39:41,860 --> 00:39:47,590
the router proxy script goes to the box

00:39:45,700 --> 00:39:50,110
to the host and then goes to the

00:39:47,590 --> 00:39:54,940
loopback or the link local IP on-board

00:39:50,110 --> 00:39:57,640
302 6 SS HSN what not the F 1 and X 2

00:39:54,940 --> 00:40:01,030
are connected to a bridge so your

00:39:57,640 --> 00:40:03,340
private network so in some cases you can

00:40:01,030 --> 00:40:06,130
have a different network bridge as part

00:40:03,340 --> 00:40:08,950
of KVM host setup you have to create

00:40:06,130 --> 00:40:11,470
these bridges so this is an example of a

00:40:08,950 --> 00:40:14,890
bridge based host KVM setup you can have

00:40:11,470 --> 00:40:16,690
OBS or you can have something else let

00:40:14,890 --> 00:40:19,180
me wrap this up so the point I'm trying

00:40:16,690 --> 00:40:21,430
to make is for one kind of hypervisor

00:40:19,180 --> 00:40:22,930
the way we access to what you loop there

00:40:21,430 --> 00:40:24,220
is different so another kind of

00:40:22,930 --> 00:40:26,020
hypervisor it is different so we

00:40:24,220 --> 00:40:29,650
probably want to unify that make it very

00:40:26,020 --> 00:40:31,600
simple and and see how we can do other

00:40:29,650 --> 00:40:33,760
things like duo online patching and any

00:40:31,600 --> 00:40:36,040
things like that right here's another

00:40:33,760 --> 00:40:38,290
example so this is an example of an l2

00:40:36,040 --> 00:40:39,910
Network you see guest VMs are have

00:40:38,290 --> 00:40:41,980
single NIC and they are connected to a

00:40:39,910 --> 00:40:44,880
bridge which most likely is an l2 bridge

00:40:41,980 --> 00:40:47,110
which India are connected to some

00:40:44,880 --> 00:40:50,680
network or a bunch of next are you have

00:40:47,110 --> 00:40:53,020
configured this is l2 network with VLAN

00:40:50,680 --> 00:40:54,370
so see the difference difference between

00:40:53,020 --> 00:40:58,420
this slide I will give you a moment to

00:40:54,370 --> 00:41:00,670
look at that right look at the cloud 0

00:40:58,420 --> 00:41:04,480
device so in the previous slide also

00:41:00,670 --> 00:41:07,870
right cloud 0 in cloud 0 so in this case

00:41:04,480 --> 00:41:09,850
the cloud 0 bridge exists on the host

00:41:07,870 --> 00:41:11,920
but it does not connect it to any of any

00:41:09,850 --> 00:41:13,540
physical Ethernet device why security

00:41:11,920 --> 00:41:15,490
reasons you want to get into the hosts

00:41:13,540 --> 00:41:18,580
program that we are and get out that's

00:41:15,490 --> 00:41:19,870
the only purpose in case of n2 network

00:41:18,580 --> 00:41:21,790
there is no way are so that's why you

00:41:19,870 --> 00:41:23,560
actually don't see a we are there this

00:41:21,790 --> 00:41:25,900
is just case VM that is connected to a

00:41:23,560 --> 00:41:27,400
bridge directly in case of alternate

00:41:25,900 --> 00:41:30,100
from whether VLAN that means you are

00:41:27,400 --> 00:41:32,320
using VLAN based isolation there will be

00:41:30,100 --> 00:41:34,540
a bridge that the k vm agent will create

00:41:32,320 --> 00:41:36,500
right this bridge again doesn't know

00:41:34,540 --> 00:41:39,080
anything about isolation

00:41:36,500 --> 00:41:41,630
Villa this bridge itself will connect to

00:41:39,080 --> 00:41:43,700
and an ethernet device gardez VLAN

00:41:41,630 --> 00:41:46,130
enable again you know connecting to your

00:41:43,700 --> 00:41:48,740
actual physical neck so that's how it

00:41:46,130 --> 00:41:51,230
kind of works similarly isolated network

00:41:48,740 --> 00:41:53,210
with vila right so what Saluda with

00:41:51,230 --> 00:41:56,090
three next one connecting to the link

00:41:53,210 --> 00:41:58,580
rule for programming purposes there is a

00:41:56,090 --> 00:42:00,380
guest network on ezio so bear in mind in

00:41:58,580 --> 00:42:04,040
case of isolated network the guest

00:42:00,380 --> 00:42:05,980
network is increment by h0 and why I am

00:42:04,040 --> 00:42:09,410
stressing on this point will will come

00:42:05,980 --> 00:42:11,750
will come to know in in effect and s2 is

00:42:09,410 --> 00:42:13,460
for public network so all your s not IP

00:42:11,750 --> 00:42:16,280
is you know public IP that you attach

00:42:13,460 --> 00:42:18,290
they will be on the x2 interface there

00:42:16,280 --> 00:42:20,750
is a guest VM that connects on this

00:42:18,290 --> 00:42:22,820
specific bridge which is VLAN enabled by

00:42:20,750 --> 00:42:25,610
this device right and that's how it

00:42:22,820 --> 00:42:28,730
works when we go from isolated network

00:42:25,610 --> 00:42:31,490
to VPC network see the differences link

00:42:28,730 --> 00:42:33,770
local IP is x0 in case of isolated

00:42:31,490 --> 00:42:35,660
network link local i bill at one so

00:42:33,770 --> 00:42:37,910
again as a developer when I'm debugging

00:42:35,660 --> 00:42:40,190
a network have to remember those things

00:42:37,910 --> 00:42:43,340
you know someone will come back and say

00:42:40,190 --> 00:42:45,290
that one guest PM is trying to use the

00:42:43,340 --> 00:42:46,820
public IP to access another one it is

00:42:45,290 --> 00:42:48,620
not working so this is the classic

00:42:46,820 --> 00:42:50,630
hairpin not problem that we have come

00:42:48,620 --> 00:42:52,970
across we have to be we got all those

00:42:50,630 --> 00:42:54,920
things fixed but as a developer I need

00:42:52,970 --> 00:42:56,510
to know when like keep these diagrams

00:42:54,920 --> 00:42:59,180
handy or at least in my mind somewhere

00:42:56,510 --> 00:43:01,760
to know you know what I'm working on

00:42:59,180 --> 00:43:03,800
VP see again if you see the public

00:43:01,760 --> 00:43:06,890
networks the public network in case of

00:43:03,800 --> 00:43:09,290
EPC workload is our h1 in case of

00:43:06,890 --> 00:43:11,180
isolated network the public was on f2

00:43:09,290 --> 00:43:12,590
again there is a mismatch with the

00:43:11,180 --> 00:43:15,920
numbering in ordering we want to fix

00:43:12,590 --> 00:43:17,450
that for future which is routed and one

00:43:15,920 --> 00:43:20,120
of the aims that I think I want to

00:43:17,450 --> 00:43:21,860
propose here is we want to Club the

00:43:20,120 --> 00:43:24,020
isolated in it for model in the V PC

00:43:21,860 --> 00:43:26,300
model because to make the isolated

00:43:24,020 --> 00:43:29,750
network is a BBC network with just one

00:43:26,300 --> 00:43:31,280
tier so probably if we uniform we make

00:43:29,750 --> 00:43:31,780
everything uniform then it will be

00:43:31,280 --> 00:43:35,210
easier

00:43:31,780 --> 00:43:37,070
lastly in case of V PC virtual routers

00:43:35,210 --> 00:43:39,950
all the guest tears that you keep adding

00:43:37,070 --> 00:43:40,450
they start from earth-2 so x0 is for a

00:43:39,950 --> 00:43:42,520
link logo

00:43:40,450 --> 00:43:46,150
each one is for the public you know NAT

00:43:42,520 --> 00:43:47,800
IP and as you keep adding your tears we

00:43:46,150 --> 00:43:49,990
keep adding the Knicks and they

00:43:47,800 --> 00:43:52,810
basically get its this the same story

00:43:49,990 --> 00:43:54,790
all again right so there is a guest here

00:43:52,810 --> 00:43:56,320
that connects to a bridge this bridge

00:43:54,790 --> 00:43:58,420
itself doesn't know anything about

00:43:56,320 --> 00:44:01,329
isolation but it connects to a device

00:43:58,420 --> 00:44:04,180
that knows right and things like that so

00:44:01,329 --> 00:44:06,280
to say with VPC again these slides will

00:44:04,180 --> 00:44:09,220
be for your reference if you want to dig

00:44:06,280 --> 00:44:11,680
deep on them shared network no isolation

00:44:09,220 --> 00:44:14,200
so again the virtual looter has a public

00:44:11,680 --> 00:44:16,599
Emily Krueger the public thing connects

00:44:14,200 --> 00:44:19,089
to a bridge and you know this is what

00:44:16,599 --> 00:44:20,349
happens this is a more practical use

00:44:19,089 --> 00:44:21,130
case where you have shared network

00:44:20,349 --> 00:44:24,160
whether VLANs

00:44:21,130 --> 00:44:25,900
so again our salute the the virtual

00:44:24,160 --> 00:44:28,060
routing in case of shared network only

00:44:25,900 --> 00:44:30,550
provides DHCP and DNS so that's why you

00:44:28,060 --> 00:44:32,589
don't see a guest interface or something

00:44:30,550 --> 00:44:35,140
like that right okay there's an

00:44:32,589 --> 00:44:37,240
interface there's a bridge that connects

00:44:35,140 --> 00:44:40,180
to the VM and that bridge also connects

00:44:37,240 --> 00:44:42,880
to VLAN aware ethernet device which is

00:44:40,180 --> 00:44:45,940
which does the endcaps the VLAN tagging

00:44:42,880 --> 00:44:49,630
and untangle all right security groups

00:44:45,940 --> 00:44:53,380
very special use case in in in cloud

00:44:49,630 --> 00:44:55,780
stack so security groups basically they

00:44:53,380 --> 00:44:59,710
the isolation happens at the host level

00:44:55,780 --> 00:45:01,839
itself and it happens on the bridge

00:44:59,710 --> 00:45:04,030
itself so the isolation right so there's

00:45:01,839 --> 00:45:07,060
a firewall security group start py and

00:45:04,030 --> 00:45:09,460
uses both IP tables and EB tables so

00:45:07,060 --> 00:45:11,470
basically these are networking firewall

00:45:09,460 --> 00:45:13,270
rules on the Bridgett's of so rules are

00:45:11,470 --> 00:45:16,810
applied here and as you can see here

00:45:13,270 --> 00:45:19,319
there is no VLAN tagging here I think

00:45:16,810 --> 00:45:22,480
you can if you want but there is no need

00:45:19,319 --> 00:45:26,980
so security groups I think in my opinion

00:45:22,480 --> 00:45:29,140
the most new or cloud eras network

00:45:26,980 --> 00:45:32,109
topology must've massively scalable and

00:45:29,140 --> 00:45:34,180
whatnot alright so I think I'm

00:45:32,109 --> 00:45:37,270
approaching I just have five more

00:45:34,180 --> 00:45:38,740
minutes so in order to go to future like

00:45:37,270 --> 00:45:40,420
think about the future of what you know

00:45:38,740 --> 00:45:43,190
that we also need to learn from others

00:45:40,420 --> 00:45:44,930
so what I did was this year I did

00:45:43,190 --> 00:45:46,849
parison between open stag and clouds

00:45:44,930 --> 00:45:49,940
like here's a link you can go and see

00:45:46,849 --> 00:45:51,920
one thing that that was like I really

00:45:49,940 --> 00:45:54,290
loved about opens type was they had a

00:45:51,920 --> 00:45:55,970
network design awakened Robyn dragon

00:45:54,290 --> 00:45:58,700
 leaders and now doesn't put this

00:45:55,970 --> 00:46:00,710
than that more graphically I really like

00:45:58,700 --> 00:46:02,780
that I think probably that's something I

00:46:00,710 --> 00:46:06,410
want good want in cloud sacks very

00:46:02,780 --> 00:46:09,349
flexible to to create networks give that

00:46:06,410 --> 00:46:12,260
plan to cloud stagnant basically creates

00:46:09,349 --> 00:46:14,300
this network for us we can also learn

00:46:12,260 --> 00:46:17,480
from Cuban Indies and see a nice other

00:46:14,300 --> 00:46:19,819
projects like flannel calico B words etc

00:46:17,480 --> 00:46:22,880
how they are solving a networking

00:46:19,819 --> 00:46:25,460
problem for their communities and while

00:46:22,880 --> 00:46:27,920
that might not be directly related to a

00:46:25,460 --> 00:46:29,960
dice leveler but that gives us idea you

00:46:27,920 --> 00:46:31,940
know how they are using for example even

00:46:29,960 --> 00:46:34,609
though kubernetes is a newer technology

00:46:31,940 --> 00:46:36,020
it s still using IP tables for a lot of

00:46:34,609 --> 00:46:38,540
port services and all that

00:46:36,020 --> 00:46:40,880
implementation so it gives me assurance

00:46:38,540 --> 00:46:42,650
that you know I'm I don't need to look

00:46:40,880 --> 00:46:44,660
at the cool things and leave what I have

00:46:42,650 --> 00:46:47,720
now which is rock-solid and working I

00:46:44,660 --> 00:46:50,780
can still build the future of we are on

00:46:47,720 --> 00:46:53,599
on unknown you know battle-tested

00:46:50,780 --> 00:46:55,640
technologies like IP tables and a filter

00:46:53,599 --> 00:46:57,710
framework etcetera and of course I can

00:46:55,640 --> 00:46:59,960
look at other open source square root is

00:46:57,710 --> 00:47:02,260
so what you do that what at the core is

00:46:59,960 --> 00:47:04,550
doing is it is creating some sort of

00:47:02,260 --> 00:47:07,310
payload it is processing that and

00:47:04,550 --> 00:47:10,369
providing a functionality we have ey OS

00:47:07,310 --> 00:47:12,470
is a is an example so gotta kind of open

00:47:10,369 --> 00:47:14,000
source their virtual and I think there's

00:47:12,470 --> 00:47:15,619
a pull request where somebody was trying

00:47:14,000 --> 00:47:17,839
to integrate that with Rorschach so

00:47:15,619 --> 00:47:20,630
maybe what you looted is something that

00:47:17,839 --> 00:47:22,970
we may not need to write from scratch we

00:47:20,630 --> 00:47:25,940
can just you know have an implementation

00:47:22,970 --> 00:47:27,859
or support from others here's what I've

00:47:25,940 --> 00:47:30,230
learned I have learned the built-in

00:47:27,859 --> 00:47:32,329
patching process of the system you right

00:47:30,230 --> 00:47:34,700
I have learned various Network models

00:47:32,329 --> 00:47:37,250
and topologies and whatnot I have

00:47:34,700 --> 00:47:39,410
learned one major thing which was I have

00:47:37,250 --> 00:47:41,300
seen VLANs that's what I am trying to

00:47:39,410 --> 00:47:42,240
say I have seen that what shall go there

00:47:41,300 --> 00:47:45,240
itself is

00:47:42,240 --> 00:47:48,390
the isolation right so using TCP dump

00:47:45,240 --> 00:47:50,130
and whatnot I was very happy to see you

00:47:48,390 --> 00:47:52,320
know we learn tag packets and basically

00:47:50,130 --> 00:47:55,890
understand n2 and how everything kind of

00:47:52,320 --> 00:47:57,360
work together and also I learned that a

00:47:55,890 --> 00:47:58,980
lot of the stuff that runs in the

00:47:57,360 --> 00:48:01,980
virtual route there are services like

00:47:58,980 --> 00:48:05,190
the webserver VPN etc they could be

00:48:01,980 --> 00:48:08,430
containerized and here are some ideas

00:48:05,190 --> 00:48:10,440
for the future so we can again improve

00:48:08,430 --> 00:48:13,020
the virtual system in template upgrade

00:48:10,440 --> 00:48:15,720
process build process passing process we

00:48:13,020 --> 00:48:17,550
can make sure the next next future

00:48:15,720 --> 00:48:21,000
original virtual routers are redundant

00:48:17,550 --> 00:48:23,490
capable so the so why if the reason why

00:48:21,000 --> 00:48:25,110
we have very small downtime in case of

00:48:23,490 --> 00:48:27,869
written virtual Udhas they use something

00:48:25,110 --> 00:48:30,930
called us keep a lab B which does vrrt

00:48:27,869 --> 00:48:33,420
and it uses battle-tested contract D

00:48:30,930 --> 00:48:35,310
which is a demon or a process or a sub

00:48:33,420 --> 00:48:37,410
system in the Linux kernel itself that

00:48:35,310 --> 00:48:40,410
tracks live connections does the state

00:48:37,410 --> 00:48:42,570
transfer using UDP and entasis so we can

00:48:40,410 --> 00:48:44,550
use this this clean state transfer

00:48:42,570 --> 00:48:46,770
handover technology in the in the future

00:48:44,550 --> 00:48:48,750
version of cloud stack so even if you

00:48:46,770 --> 00:48:50,700
you have a network which doesn't have a

00:48:48,750 --> 00:48:52,800
virtual route that is redundant if you

00:48:50,700 --> 00:48:54,869
make it greater and capable an older

00:48:52,800 --> 00:48:58,020
version can migrate to new version

00:48:54,869 --> 00:48:59,730
easily and again the next thing is

00:48:58,020 --> 00:49:02,369
refactor that we are for make it speed

00:48:59,730 --> 00:49:04,830
up we have to move migrate from by 3 2

00:49:02,369 --> 00:49:07,170
dot X maybe to attack there is a new

00:49:04,830 --> 00:49:12,480
subsystem or tooling so we have to move

00:49:07,170 --> 00:49:14,609
to NF tables IP route 2 and here is a

00:49:12,480 --> 00:49:16,890
bold idea why not even get rid of what

00:49:14,609 --> 00:49:19,740
you rooted maybe explore other

00:49:16,890 --> 00:49:23,010
technologies work with online patching

00:49:19,740 --> 00:49:24,920
of of things and and those are some

00:49:23,010 --> 00:49:26,970
things we have to research and other

00:49:24,920 --> 00:49:28,890
getting rid of what shall go there is a

00:49:26,970 --> 00:49:31,260
good idea like all the stuff in the

00:49:28,890 --> 00:49:33,990
diagrams for example we saw here right

00:49:31,260 --> 00:49:36,240
these could be so all this all the

00:49:33,990 --> 00:49:38,010
routing was happening on let's say let

00:49:36,240 --> 00:49:40,230
us take an example of isolated network

00:49:38,010 --> 00:49:43,290
so all the rules on its 0 & 2

00:49:40,230 --> 00:49:47,340
those could be Nix on the host itself

00:49:43,290 --> 00:49:49,440
those could be a process

00:49:47,340 --> 00:49:51,450
versus on the more sexist so there is

00:49:49,440 --> 00:49:53,490
actually no need of virtue there are no

00:49:51,450 --> 00:49:55,800
few people in the community of written

00:49:53,490 --> 00:49:57,450
into me privately that they are probably

00:49:55,800 --> 00:50:00,390
exploring that as well

00:49:57,450 --> 00:50:02,430
in some network implementations for

00:50:00,390 --> 00:50:04,410
example if you don't meet the webserver

00:50:02,430 --> 00:50:07,500
you don't need we have B pins maybe

00:50:04,410 --> 00:50:10,140
there's a way to explore that people are

00:50:07,500 --> 00:50:12,000
already working the conflict dragon so

00:50:10,140 --> 00:50:16,380
it's time so I'd like to thank everyone

00:50:12,000 --> 00:50:20,790
for their time and we are hiring any

00:50:16,380 --> 00:50:22,250
questions guys okay thank you thank you

00:50:20,790 --> 00:50:29,439
very much

00:50:22,250 --> 00:50:29,439

YouTube URL: https://www.youtube.com/watch?v=ixs_bB5yLvE


