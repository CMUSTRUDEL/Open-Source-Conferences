Title: OpenOffice UNO Programming with Groovy
Publication date: 2020-10-16
Playlist: ApacheCon @Home 2020: OpenOffice
Description: 
	OpenOffice UNO Programming with Groovy
Carl Marcum

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

The talk will discuss using the Apache Groovy programming language with Apache OpenOffice UNO API's and some associated projects that allow this to happen. Projects include the Groovy UNO Extension that adds convenience methods to the OpenOffice API's allowing less coding, an OpenOffice Extension that adds Groovy as a macro language to the office, and an associated extension to add sample macros to the office written in Groovy. Examples of usages like Groovy scripts as OpenOffice client applications, OpenOffice macros in Groovy, and a compiled OpenOffice extension application in Groovy.

Software developer and Open Source enthusiast. Owner of Code Builders, LLC specializing in Java-based technologies including Apache Groovy language and the Grails framework for web applications. Apache OpenOffice committer and PMC member. Currently serving as VP OpenOffice. Sun Certified Java Programmer.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:25,279 --> 00:00:28,720
um

00:00:26,480 --> 00:00:31,039
hope everybody's having a good apache

00:00:28,720 --> 00:00:33,760
con at home

00:00:31,039 --> 00:00:36,000
this is the session on open office uno

00:00:33,760 --> 00:00:38,399
programming with groovy

00:00:36,000 --> 00:00:45,840
and i'm karl markham a member of the

00:00:38,399 --> 00:00:45,840
open office pmc

00:00:48,399 --> 00:00:54,160
so a little bit about me

00:00:51,920 --> 00:00:55,760
i come from a manufacturing engineering

00:00:54,160 --> 00:00:58,719
background

00:00:55,760 --> 00:00:59,520
about a year ago i made the transition

00:00:58,719 --> 00:01:02,559
from in

00:00:59,520 --> 00:01:05,840
manufacturing engineering to working in

00:01:02,559 --> 00:01:08,720
engineering i t at emerson electric

00:01:05,840 --> 00:01:10,720
where i've been for the past seven years

00:01:08,720 --> 00:01:14,000
where i get a chance to do

00:01:10,720 --> 00:01:18,640
automation on 3d cad applications

00:01:14,000 --> 00:01:18,640
and support our plm system also

00:01:21,119 --> 00:01:29,040
i freelance under code builders llc

00:01:25,439 --> 00:01:32,640
i've been involved with open office

00:01:29,040 --> 00:01:36,240
since oracle

00:01:32,640 --> 00:01:40,400
brought it to apache and answered

00:01:36,240 --> 00:01:41,600
incubation so later on i was invited to

00:01:40,400 --> 00:01:44,960
be uh pmc

00:01:41,600 --> 00:01:47,600
and i'm currently serving a term as a vp

00:01:44,960 --> 00:01:47,600
open office

00:01:48,880 --> 00:01:52,079
so uh for the agenda i've got a lot to

00:01:51,600 --> 00:01:55,520
uh

00:01:52,079 --> 00:01:57,840
a lot of a lot to cover so i'm gonna

00:01:55,520 --> 00:01:59,200
this is gonna be more of a high level

00:01:57,840 --> 00:02:02,560
overview

00:01:59,200 --> 00:02:06,640
um talk a little bit about open office

00:02:02,560 --> 00:02:08,800
um some of the past work

00:02:06,640 --> 00:02:10,720
i primarily like to work on developer

00:02:08,800 --> 00:02:14,000
tools uh

00:02:10,720 --> 00:02:17,920
things like the netbeans um open office

00:02:14,000 --> 00:02:18,560
api plug-in um so we'll talk a little

00:02:17,920 --> 00:02:22,640
bit about

00:02:18,560 --> 00:02:22,640
uno uh what it looks like

00:02:22,879 --> 00:02:27,840
what apache groovy is hopefully some

00:02:26,160 --> 00:02:29,040
people have had a chance to check out

00:02:27,840 --> 00:02:30,640
those tracks

00:02:29,040 --> 00:02:32,560
yesterday of course not the ones that

00:02:30,640 --> 00:02:36,239
overlap with ours

00:02:32,560 --> 00:02:38,640
but then we'll get into uh

00:02:36,239 --> 00:02:39,360
i guess what i'll call some of my pet

00:02:38,640 --> 00:02:43,040
projects

00:02:39,360 --> 00:02:46,400
um about using groovy uh

00:02:43,040 --> 00:02:49,440
with open office uno apis so

00:02:46,400 --> 00:02:52,480
i'll show you how you can create a

00:02:49,440 --> 00:02:55,680
single groovy script that's actually a

00:02:52,480 --> 00:02:56,480
uno client to connect with and automate

00:02:55,680 --> 00:03:00,159
read from

00:02:56,480 --> 00:03:00,159
the open office

00:03:00,239 --> 00:03:07,360
the groovy uno extension is a project to

00:03:04,000 --> 00:03:10,720
extend the open office java apis

00:03:07,360 --> 00:03:12,560
uh to make the code less verbose

00:03:10,720 --> 00:03:13,760
and basically it's a lot of convenience

00:03:12,560 --> 00:03:17,760
methods

00:03:13,760 --> 00:03:18,159
and um then like i was talking about the

00:03:17,760 --> 00:03:21,120
uh

00:03:18,159 --> 00:03:23,280
the netbeans plug-in uh i've worked on

00:03:21,120 --> 00:03:26,560
some project templates that you can use

00:03:23,280 --> 00:03:26,560
uh from the command line

00:03:26,959 --> 00:03:32,560
and uh so we'll then we'll go into an

00:03:30,480 --> 00:03:34,159
example of that uh calc is our

00:03:32,560 --> 00:03:37,519
spreadsheet application so

00:03:34,159 --> 00:03:38,400
i'll build an add-in uh to add three new

00:03:37,519 --> 00:03:42,159
functions

00:03:38,400 --> 00:03:45,920
to the uh to the office and uh

00:03:42,159 --> 00:03:48,080
then finally i'll wrap it up with the um

00:03:45,920 --> 00:03:50,640
an extension that adds groovy as

00:03:48,080 --> 00:03:51,680
macro language using the open office

00:03:50,640 --> 00:03:55,120
scripting

00:03:51,680 --> 00:03:55,599
framework so and then hopefully i'll

00:03:55,120 --> 00:03:58,720
have some

00:03:55,599 --> 00:03:58,720
time for some questions

00:03:59,439 --> 00:04:05,040
so um what is openoffice

00:04:02,480 --> 00:04:06,239
so for those that don't know it's a

00:04:05,040 --> 00:04:09,439
fully featured

00:04:06,239 --> 00:04:12,840
office suite office productivity suite

00:04:09,439 --> 00:04:15,519
it runs on all the major computer

00:04:12,840 --> 00:04:19,280
platforms

00:04:15,519 --> 00:04:20,560
and and quite a few languages i think i

00:04:19,280 --> 00:04:23,680
was told today

00:04:20,560 --> 00:04:23,680
over 40 right now

00:04:26,479 --> 00:04:30,639
so why would you want to use openoffice

00:04:28,880 --> 00:04:34,320
well uh besides being

00:04:30,639 --> 00:04:37,919
apache licensed it has a

00:04:34,320 --> 00:04:40,400
well-documented open architecture

00:04:37,919 --> 00:04:41,120
it has a great extension mesh mechanism

00:04:40,400 --> 00:04:44,479
that uh

00:04:41,120 --> 00:04:47,600
we'll talk about quite a bit and

00:04:44,479 --> 00:04:50,560
that allows you to add or remove

00:04:47,600 --> 00:04:51,440
functionality from the office as you

00:04:50,560 --> 00:04:54,560
like

00:04:51,440 --> 00:04:58,080
like i said calc add-ins

00:04:54,560 --> 00:05:02,240
for adding functions to um

00:04:58,080 --> 00:05:04,479
adding or replacing the save command

00:05:02,240 --> 00:05:05,520
you know there's it's unlimited what you

00:05:04,479 --> 00:05:07,440
can do

00:05:05,520 --> 00:05:09,199
and then we'll talk about the scripting

00:05:07,440 --> 00:05:13,759
framework

00:05:09,199 --> 00:05:16,400
which right now open office supports

00:05:13,759 --> 00:05:17,680
scripting in a number of languages uh

00:05:16,400 --> 00:05:21,199
python

00:05:17,680 --> 00:05:21,199
then there's java languages

00:05:21,360 --> 00:05:26,720
like beanshell and javascript

00:05:30,240 --> 00:05:36,720
so what is uno uh uno stands for

00:05:33,919 --> 00:05:39,759
universal network objects

00:05:36,720 --> 00:05:43,680
it's the core technology uh

00:05:39,759 --> 00:05:46,880
underneath open office um

00:05:43,680 --> 00:05:50,240
it's it the way i look at it is uh

00:05:46,880 --> 00:05:54,800
it's it's the specifications and the api

00:05:50,240 --> 00:05:54,800
for automating openoffice

00:05:59,759 --> 00:06:04,000
so there's a there's a separate download

00:06:02,319 --> 00:06:05,360
that you can get that's the software

00:06:04,000 --> 00:06:08,800
development kit

00:06:05,360 --> 00:06:11,600
it contains tons of libraries

00:06:08,800 --> 00:06:12,800
documentation on the api java docs

00:06:11,600 --> 00:06:16,880
things like that

00:06:12,800 --> 00:06:19,919
as well as a number of examples for

00:06:16,880 --> 00:06:20,720
for automation doing extensions things

00:06:19,919 --> 00:06:24,319
like that

00:06:20,720 --> 00:06:27,440
for java c plus plus open office basic

00:06:24,319 --> 00:06:30,800
um there's even some support for the

00:06:27,440 --> 00:06:33,759
net cli applications and

00:06:30,800 --> 00:06:36,560
a couple examples of activex and

00:06:33,759 --> 00:06:36,560
vbscript

00:06:38,639 --> 00:06:42,639
so like i said i'm primarily focused on

00:06:41,520 --> 00:06:45,759
developer tools

00:06:42,639 --> 00:06:48,960
uh i build extensions and uh

00:06:45,759 --> 00:06:51,360
customized in installations of open

00:06:48,960 --> 00:06:51,360
office

00:06:52,160 --> 00:06:58,400
so i was primarily concerned with the uh

00:06:56,560 --> 00:07:00,720
with the netbeans plug-in for quite a

00:06:58,400 --> 00:07:04,800
while this is a

00:07:00,720 --> 00:07:07,840
it's a java plug-in for netbeans that

00:07:04,800 --> 00:07:11,039
provides wizards for

00:07:07,840 --> 00:07:13,919
generating extension projects

00:07:11,039 --> 00:07:16,160
so whether you want to do an add-on for

00:07:13,919 --> 00:07:18,560
any of the office applications or

00:07:16,160 --> 00:07:21,120
what we call add-ins for adding

00:07:18,560 --> 00:07:23,360
functions to calc

00:07:21,120 --> 00:07:26,080
that's what you would have used or

00:07:23,360 --> 00:07:29,840
probably used previous to this

00:07:26,080 --> 00:07:33,360
i concentrated on updating the

00:07:29,840 --> 00:07:35,599
for um new versions of open office

00:07:33,360 --> 00:07:37,120
and netbeans uh up until the curve

00:07:35,599 --> 00:07:39,280
version or not

00:07:37,120 --> 00:07:40,160
of until the current uh open office

00:07:39,280 --> 00:07:42,240
version

00:07:40,160 --> 00:07:44,560
uh that's not the current netbeans

00:07:42,240 --> 00:07:46,879
version but the plug-in does still work

00:07:44,560 --> 00:07:49,440
even with the newest releases of of

00:07:46,879 --> 00:07:49,440
netbeans

00:07:51,280 --> 00:07:56,160
so look into the future

00:07:54,319 --> 00:07:58,000
about 10 years ago i was searching

00:07:56,160 --> 00:08:01,840
around for a uh

00:07:58,000 --> 00:08:04,879
web framework uh for a client and

00:08:01,840 --> 00:08:08,000
i uh java based as well as one

00:08:04,879 --> 00:08:09,360
was one of the criteria i came across

00:08:08,000 --> 00:08:13,039
grails

00:08:09,360 --> 00:08:16,639
it used convention over configuration

00:08:13,039 --> 00:08:18,560
and um it really would

00:08:16,639 --> 00:08:20,560
i could quickly get an uh web

00:08:18,560 --> 00:08:24,000
application up and running

00:08:20,560 --> 00:08:26,879
um this is how i was in the

00:08:24,000 --> 00:08:27,360
introduced to groovy so it used groovy

00:08:26,879 --> 00:08:29,280
for

00:08:27,360 --> 00:08:30,960
all the back end controllers and

00:08:29,280 --> 00:08:34,080
services and things like that

00:08:30,960 --> 00:08:36,320
and then after a major release they went

00:08:34,080 --> 00:08:41,120
from from a custom build

00:08:36,320 --> 00:08:43,760
tool to uh using gradle

00:08:41,120 --> 00:08:46,399
in this ecosystem i also found griffin

00:08:43,760 --> 00:08:50,000
it's great for

00:08:46,399 --> 00:08:52,839
for java desktop applications there's

00:08:50,000 --> 00:08:54,640
uh spock for unit testing and functional

00:08:52,839 --> 00:08:57,839
testing there's uh

00:08:54,640 --> 00:09:00,480
grails for web automation

00:08:57,839 --> 00:09:03,920
so there's a lot you can do with those

00:09:00,480 --> 00:09:07,760
last two tools for testing

00:09:03,920 --> 00:09:11,519
but it all centered around groovy

00:09:07,760 --> 00:09:16,240
so i started using groovy 10 years ago

00:09:11,519 --> 00:09:19,839
it is a great tool at the time it was

00:09:16,240 --> 00:09:24,240
really providing modern features

00:09:19,839 --> 00:09:26,240
that java wasn't providing at the time

00:09:24,240 --> 00:09:28,320
that's changed recently they've been

00:09:26,240 --> 00:09:32,399
making great leaps and

00:09:28,320 --> 00:09:34,399
functionality with the new releases

00:09:32,399 --> 00:09:36,880
and unfortunately groovy's uh keep

00:09:34,399 --> 00:09:37,920
keeping me from uh exploring those right

00:09:36,880 --> 00:09:41,680
now

00:09:37,920 --> 00:09:45,200
but uh i do plan to in the future

00:09:41,680 --> 00:09:46,399
so um what is groovy uh groovy is an

00:09:45,200 --> 00:09:49,680
optionally typed

00:09:46,399 --> 00:09:52,880
dynamic language for the jvm

00:09:49,680 --> 00:09:54,800
you can use if you're familiar with

00:09:52,880 --> 00:09:59,120
python

00:09:54,800 --> 00:10:02,959
you can use you can use the def keyword

00:09:59,120 --> 00:10:06,399
when you're initializing variables and

00:10:02,959 --> 00:10:08,800
then groovy will decide what type it is

00:10:06,399 --> 00:10:10,720
or you can do like i generally do and

00:10:08,800 --> 00:10:13,440
you can statically type everything just

00:10:10,720 --> 00:10:16,800
like you would in java

00:10:13,440 --> 00:10:19,839
groovy i'll say groovy can run

00:10:16,800 --> 00:10:23,600
95 percent of java code

00:10:19,839 --> 00:10:26,320
right out of the box you just rename it

00:10:23,600 --> 00:10:26,320
dot groovy

00:10:27,360 --> 00:10:31,120
so it has really good support for uh for

00:10:29,839 --> 00:10:33,440
the java syntax

00:10:31,120 --> 00:10:34,800
although it has a lot of other features

00:10:33,440 --> 00:10:36,480
that you would probably like when you

00:10:34,800 --> 00:10:39,519
give it a try

00:10:36,480 --> 00:10:40,240
like i said it integrates smoothly with

00:10:39,519 --> 00:10:43,600
java

00:10:40,240 --> 00:10:46,240
it compiles to java byte code and

00:10:43,600 --> 00:10:49,200
you can actually use it alongside java

00:10:46,240 --> 00:10:49,200
in the same project

00:10:50,640 --> 00:10:55,600
so it's really easy for java developers

00:10:54,000 --> 00:10:58,560
to get up to speed with

00:10:55,600 --> 00:11:02,399
because of the syntax like i said

00:10:58,560 --> 00:11:04,959
there's a big ecosystem around it

00:11:02,399 --> 00:11:06,480
it has modern features like closures

00:11:04,959 --> 00:11:10,160
i'll touch on that briefly

00:11:06,480 --> 00:11:10,160
and and what they call builders

00:11:10,240 --> 00:11:15,360
one of the uh aspects that i really like

00:11:12,720 --> 00:11:19,519
about it is the meta programming

00:11:15,360 --> 00:11:22,399
that's what allows me to

00:11:19,519 --> 00:11:24,640
extend the java uno apis in a project

00:11:22,399 --> 00:11:28,000
i'll show you in a bit

00:11:24,640 --> 00:11:31,920
dsls and like i said it's great for

00:11:28,000 --> 00:11:31,920
writing tests and build automation

00:11:32,399 --> 00:11:38,079
so some things about uh groovy

00:11:35,600 --> 00:11:39,440
uh you don't need to use semicolons uh

00:11:38,079 --> 00:11:41,839
it's smart enough to figure out where

00:11:39,440 --> 00:11:43,600
the end of the line is

00:11:41,839 --> 00:11:45,360
but you can include them it doesn't hurt

00:11:43,600 --> 00:11:47,120
anything

00:11:45,360 --> 00:11:49,200
classes and methods are public by

00:11:47,120 --> 00:11:51,600
default that's a little different than

00:11:49,200 --> 00:11:51,600
java

00:11:51,760 --> 00:11:57,279
when you're when you're setting pro or

00:11:55,519 --> 00:11:59,360
creating properties they're actually

00:11:57,279 --> 00:12:00,639
private fields and it will create the

00:11:59,360 --> 00:12:03,519
getters and setters

00:12:00,639 --> 00:12:04,320
for you without you specifying them

00:12:03,519 --> 00:12:05,839
unless you need

00:12:04,320 --> 00:12:08,399
something that you don't get with the

00:12:05,839 --> 00:12:10,240
defaults

00:12:08,399 --> 00:12:11,519
and some of the code you'll notice uh

00:12:10,240 --> 00:12:14,240
what looks like

00:12:11,519 --> 00:12:16,399
property access but it's you it's really

00:12:14,240 --> 00:12:18,720
using these getters and setters behind

00:12:16,399 --> 00:12:21,920
the scenes

00:12:18,720 --> 00:12:24,320
um groovy has what it calls groovy

00:12:21,920 --> 00:12:28,079
strings

00:12:24,320 --> 00:12:30,639
for interpolation so instead of

00:12:28,079 --> 00:12:32,880
concatenating your strings together

00:12:30,639 --> 00:12:34,240
when you want to use a variable in the

00:12:32,880 --> 00:12:36,160
middle

00:12:34,240 --> 00:12:38,079
you can do it just like it's shown there

00:12:36,160 --> 00:12:42,320
with groovy which would be the variable

00:12:38,079 --> 00:12:46,480
in this case closures

00:12:42,320 --> 00:12:50,079
closures are reusable code blocks

00:12:46,480 --> 00:12:52,639
so most of the time you'll see them

00:12:50,079 --> 00:12:54,880
in line like i have it shown here but

00:12:52,639 --> 00:12:58,399
you can also

00:12:54,880 --> 00:13:01,200
declare them separately and use them

00:12:58,399 --> 00:13:03,680
in different places in your code so uh

00:13:01,200 --> 00:13:07,600
this example here is taking the list

00:13:03,680 --> 00:13:10,880
and instead of using a for loop

00:13:07,600 --> 00:13:11,600
um this would print the uh print the

00:13:10,880 --> 00:13:13,279
item

00:13:11,600 --> 00:13:16,720
which would be each item in the list

00:13:13,279 --> 00:13:16,720
over and over until you were out

00:13:17,440 --> 00:13:20,480
there's no such thing as primitives in

00:13:19,760 --> 00:13:24,240
groovy

00:13:20,480 --> 00:13:25,680
uh like a java int a primitive would

00:13:24,240 --> 00:13:28,720
actually be

00:13:25,680 --> 00:13:32,800
the the wrapper object

00:13:28,720 --> 00:13:37,040
integer and so on

00:13:32,800 --> 00:13:39,680
so the print line statement uh

00:13:37,040 --> 00:13:40,480
is uh that would be short for a system

00:13:39,680 --> 00:13:43,600
out print line

00:13:40,480 --> 00:13:44,079
so uh make sure it makes a little less

00:13:43,600 --> 00:13:48,320
typing

00:13:44,079 --> 00:13:51,360
if you're not using an ide

00:13:48,320 --> 00:13:54,399
so we'll get into a little bit of uh

00:13:51,360 --> 00:13:56,720
uno here um so

00:13:54,399 --> 00:13:57,680
unu has the concept of uh service

00:13:56,720 --> 00:14:02,240
managers

00:13:57,680 --> 00:14:05,920
so the service manager is like a

00:14:02,240 --> 00:14:09,279
object factory or a service factory um

00:14:05,920 --> 00:14:12,240
services and uno are the objects

00:14:09,279 --> 00:14:13,120
that you would use to do work

00:14:12,240 --> 00:14:17,440
essentially so

00:14:13,120 --> 00:14:20,800
there's uh five what i'll call five top

00:14:17,440 --> 00:14:21,839
service services uh the desktop service

00:14:20,800 --> 00:14:24,959
is the one

00:14:21,839 --> 00:14:28,000
that i use um most of the time

00:14:24,959 --> 00:14:30,399
that's uh responsible for

00:14:28,000 --> 00:14:32,480
like documents that you would open

00:14:30,399 --> 00:14:36,399
things that you put in frames

00:14:32,480 --> 00:14:38,880
so in in in the window

00:14:36,399 --> 00:14:43,680
configuration provider handles things

00:14:38,880 --> 00:14:45,680
like what we would find in tools options

00:14:43,680 --> 00:14:48,160
most of these are self-explanatory the

00:14:45,680 --> 00:14:51,279
database context handles

00:14:48,160 --> 00:14:54,560
uh the databases uh system shell

00:14:51,279 --> 00:14:55,519
execute for executing shell commands and

00:14:54,560 --> 00:14:58,160
uh global

00:14:55,519 --> 00:15:00,560
settings handles uh things like print

00:14:58,160 --> 00:15:00,560
settings

00:15:10,320 --> 00:15:16,160
so um services and interfaces

00:15:13,920 --> 00:15:17,040
so like i said the services are the

00:15:16,160 --> 00:15:20,560
objects that

00:15:17,040 --> 00:15:24,320
uh you would use to do the work

00:15:20,560 --> 00:15:24,320
except when you're using um

00:15:25,040 --> 00:15:31,199
java and the uh

00:15:28,320 --> 00:15:32,480
for uno so you have to use the

00:15:31,199 --> 00:15:36,399
interfaces that

00:15:32,480 --> 00:15:39,120
are um provided by the services

00:15:36,399 --> 00:15:41,040
so uh in this case i wouldn't use the

00:15:39,120 --> 00:15:41,839
office document or the spreadsheet

00:15:41,040 --> 00:15:44,880
document

00:15:41,839 --> 00:15:45,519
there on the left i would be using the

00:15:44,880 --> 00:15:48,880
model

00:15:45,519 --> 00:15:51,519
storable spreadsheet document

00:15:48,880 --> 00:15:54,720
the interfaces all start with an x so

00:15:51,519 --> 00:15:57,199
they're not confused with the services

00:15:54,720 --> 00:15:58,480
so like in java where you would normally

00:15:57,199 --> 00:16:01,519
use a

00:15:58,480 --> 00:16:06,320
the new keyword to create objects

00:16:01,519 --> 00:16:09,360
and uno once we get a service

00:16:06,320 --> 00:16:12,720
from this service manager uh

00:16:09,360 --> 00:16:14,720
we start using the interfaces and to get

00:16:12,720 --> 00:16:17,120
from one interface which is the

00:16:14,720 --> 00:16:20,800
interfaces are

00:16:17,120 --> 00:16:22,959
i guess fine-grained so

00:16:20,800 --> 00:16:24,560
they're designed so they can be reused

00:16:22,959 --> 00:16:28,240
in other

00:16:24,560 --> 00:16:29,759
places like lots of applications deal

00:16:28,240 --> 00:16:31,839
with text

00:16:29,759 --> 00:16:34,240
so you might have might use text in a

00:16:31,839 --> 00:16:36,880
spreadsheet you might use text in writer

00:16:34,240 --> 00:16:40,079
things like that so they tried to make

00:16:36,880 --> 00:16:43,360
it so you could reuse it

00:16:40,079 --> 00:16:46,160
now the other tricky part is when you

00:16:43,360 --> 00:16:46,720
go uh when you start we'll say with the

00:16:46,160 --> 00:16:49,519
model

00:16:46,720 --> 00:16:50,240
and you want to save it so you would

00:16:49,519 --> 00:16:53,920
need to use

00:16:50,240 --> 00:16:53,920
storable for instance so

00:16:54,000 --> 00:17:00,720
you have to use the static unu runtime

00:16:57,600 --> 00:17:04,079
class and query the interface

00:17:00,720 --> 00:17:07,919
so you'll see a lot of

00:17:04,079 --> 00:17:11,120
this query interface in a

00:17:07,919 --> 00:17:14,240
in a java uno application so

00:17:11,120 --> 00:17:16,400
you do the query interface you the

00:17:14,240 --> 00:17:18,160
target is the one you want

00:17:16,400 --> 00:17:19,919
and the interface you want and the

00:17:18,160 --> 00:17:21,120
source object is the one you already

00:17:19,919 --> 00:17:23,600
have

00:17:21,120 --> 00:17:25,919
so uh that'll be important here in a

00:17:23,600 --> 00:17:25,919
little bit

00:17:26,079 --> 00:17:29,600
so i'm not going to try to do a big deep

00:17:29,039 --> 00:17:33,520
dive

00:17:29,600 --> 00:17:36,880
in a lot of this but this comes from our

00:17:33,520 --> 00:17:39,440
our developer developer guide and it's

00:17:36,880 --> 00:17:41,280
also in the sdk documentation

00:17:39,440 --> 00:17:42,559
this is what that we call the first

00:17:41,280 --> 00:17:44,480
contact

00:17:42,559 --> 00:17:46,720
so this is the very beginning of the

00:17:44,480 --> 00:17:50,240
like tutorial we'll call it

00:17:46,720 --> 00:17:52,559
so i'll just step through it

00:17:50,240 --> 00:17:56,080
and give you a little flavor on on what

00:17:52,559 --> 00:17:58,080
we do in almost all these applications

00:17:56,080 --> 00:18:00,960
so that just be like a typical client

00:17:58,080 --> 00:18:01,679
application so the first thing we would

00:18:00,960 --> 00:18:04,880
do

00:18:01,679 --> 00:18:06,960
is get a

00:18:04,880 --> 00:18:09,600
component context so that's kind of like

00:18:06,960 --> 00:18:12,840
a base object

00:18:09,600 --> 00:18:14,080
that we get from the connection so the

00:18:12,840 --> 00:18:17,440
bootstrap

00:18:14,080 --> 00:18:20,960
uh method that's shown here is

00:18:17,440 --> 00:18:23,120
uh how we if open offices are running

00:18:20,960 --> 00:18:25,520
it'll fire up open office and make it

00:18:23,120 --> 00:18:28,799
and make a socket connection

00:18:25,520 --> 00:18:31,440
and uh give you back a

00:18:28,799 --> 00:18:32,640
component context i call it the remote

00:18:31,440 --> 00:18:35,440
context because

00:18:32,640 --> 00:18:37,919
there's actually op objects on both

00:18:35,440 --> 00:18:39,600
sides of this

00:18:37,919 --> 00:18:41,039
because it's like operating over a

00:18:39,600 --> 00:18:43,600
network so

00:18:41,039 --> 00:18:44,240
your client has the remote contacts and

00:18:43,600 --> 00:18:46,559
the

00:18:44,240 --> 00:18:48,640
server which is open office would have

00:18:46,559 --> 00:18:51,840
the local version of that

00:18:48,640 --> 00:18:54,880
context so

00:18:51,840 --> 00:18:56,960
after you've bootstrapped the office

00:18:54,880 --> 00:18:59,200
then um next thing you want to get is

00:18:56,960 --> 00:19:01,120
this uh service manager

00:18:59,200 --> 00:19:03,440
uh that we were talking about that's our

00:19:01,120 --> 00:19:06,480
factory so we get the uh

00:19:03,440 --> 00:19:08,400
cert we get the service manager uh

00:19:06,480 --> 00:19:09,520
from the remote from the component

00:19:08,400 --> 00:19:12,320
contacts or the

00:19:09,520 --> 00:19:13,600
remote version of it and the next thing

00:19:12,320 --> 00:19:17,280
we do is

00:19:13,600 --> 00:19:19,200
um that if you remember that top

00:19:17,280 --> 00:19:20,559
level service the desktop we talked

00:19:19,200 --> 00:19:22,720
about

00:19:20,559 --> 00:19:25,440
that's what i'm getting here now i don't

00:19:22,720 --> 00:19:27,120
have an uh implementation of that

00:19:25,440 --> 00:19:28,720
to really use i'm just getting a

00:19:27,120 --> 00:19:32,080
reference to it that's why it's an

00:19:28,720 --> 00:19:35,919
object and it doesn't have a static

00:19:32,080 --> 00:19:38,320
uh interface name or type

00:19:35,919 --> 00:19:39,840
so i'm going to use that remote service

00:19:38,320 --> 00:19:42,480
manager to uh

00:19:39,840 --> 00:19:42,480
factory up

00:19:42,960 --> 00:19:46,400
the object or the uh

00:19:46,480 --> 00:19:50,000
the desktop and then i'm going to use

00:19:48,640 --> 00:19:52,160
that desktop here's that

00:19:50,000 --> 00:19:53,360
uno runtime query interface for the

00:19:52,160 --> 00:19:56,640
first time

00:19:53,360 --> 00:19:58,960
and i'm going to use that desktop to ask

00:19:56,640 --> 00:20:01,039
for a component loader

00:19:58,960 --> 00:20:03,760
so the component loader is what i use to

00:20:01,039 --> 00:20:07,360
actually load the file

00:20:03,760 --> 00:20:11,360
so um in the next step

00:20:07,360 --> 00:20:14,960
i'm going i'm asking for a empty

00:20:11,360 --> 00:20:16,720
uh calc file basically a brand new file

00:20:14,960 --> 00:20:19,120
and then the final step i'm using the

00:20:16,720 --> 00:20:21,760
unit runtime query interface again

00:20:19,120 --> 00:20:25,520
to get the spreadsheet document and now

00:20:21,760 --> 00:20:25,520
i can start working with the spreadsheet

00:20:26,480 --> 00:20:34,320
so that's kind of a high level overview

00:20:29,760 --> 00:20:37,760
so there's four main java uno libraries

00:20:34,320 --> 00:20:41,679
that are divided up by the um

00:20:37,760 --> 00:20:44,799
by the by their functionality

00:20:41,679 --> 00:20:48,240
so uh the one i wanted to skip to

00:20:44,799 --> 00:20:51,360
is the uno il library

00:20:48,240 --> 00:20:53,760
and that one is um

00:20:51,360 --> 00:20:55,360
like the spreadsheet document that uh

00:20:53,760 --> 00:20:57,919
that i just showed you

00:20:55,360 --> 00:20:59,840
that's in that's in that library so

00:20:57,919 --> 00:21:03,039
those are completely generated

00:20:59,840 --> 00:21:05,120
from what we call idl files or interface

00:21:03,039 --> 00:21:08,240
definition language files

00:21:05,120 --> 00:21:10,640
so those are like the specifications so

00:21:08,240 --> 00:21:13,360
there's tools within openoffice

00:21:10,640 --> 00:21:14,960
that you can use to generate java class

00:21:13,360 --> 00:21:18,320
files or

00:21:14,960 --> 00:21:19,520
or tools to create these classes for

00:21:18,320 --> 00:21:21,360
other languages

00:21:19,520 --> 00:21:23,840
and that's how we get multi-language

00:21:21,360 --> 00:21:23,840
support

00:21:27,280 --> 00:21:32,720
so uh first uh the pep project

00:21:30,799 --> 00:21:34,559
it's not really a project i guess but uh

00:21:32,720 --> 00:21:38,640
the project was in getting to

00:21:34,559 --> 00:21:44,240
where you could use a groovy script

00:21:38,640 --> 00:21:47,360
to to build a create a complete um

00:21:44,240 --> 00:21:47,360
client application

00:21:48,960 --> 00:21:52,559
so uh some of the things that uh make

00:21:51,280 --> 00:21:55,360
that possible

00:21:52,559 --> 00:21:56,240
is uh groovy has a built-in dependency

00:21:55,360 --> 00:22:00,400
manager

00:21:56,240 --> 00:22:03,919
so and a lot of modern build tools

00:22:00,400 --> 00:22:08,480
maven gradle things like that

00:22:03,919 --> 00:22:08,480
they can pull down jars from online

00:22:09,200 --> 00:22:13,919
artifact repositories like maven central

00:22:12,159 --> 00:22:16,720
or ben tray

00:22:13,919 --> 00:22:18,240
so groovy a groovy script can do this

00:22:16,720 --> 00:22:21,760
using the at grab

00:22:18,240 --> 00:22:21,760
annotation that you see there

00:22:22,960 --> 00:22:26,480
the bootstrap connector there is a

00:22:25,440 --> 00:22:29,600
special

00:22:26,480 --> 00:22:32,320
library that is used for

00:22:29,600 --> 00:22:33,360
bootstrapping the office based on a file

00:22:32,320 --> 00:22:36,240
path

00:22:33,360 --> 00:22:36,960
so in traditional clients like created

00:22:36,240 --> 00:22:40,720
with the

00:22:36,960 --> 00:22:43,360
netbeans plugin that

00:22:40,720 --> 00:22:44,480
there's there are special classes for

00:22:43,360 --> 00:22:47,280
discovering

00:22:44,480 --> 00:22:49,520
uh where the office is like it'll look

00:22:47,280 --> 00:22:53,520
through

00:22:49,520 --> 00:22:55,520
standard directory struct directory pass

00:22:53,520 --> 00:22:57,520
depending on whether you're on mac or

00:22:55,520 --> 00:22:59,919
windows or linux so

00:22:57,520 --> 00:23:00,960
and then or it could search the class

00:22:59,919 --> 00:23:04,159
path looking for

00:23:00,960 --> 00:23:06,640
jars things like that so

00:23:04,159 --> 00:23:08,240
we're we're in one script file here so

00:23:06,640 --> 00:23:11,360
we want to

00:23:08,240 --> 00:23:14,240
we need to do away with all that so

00:23:11,360 --> 00:23:16,320
that's what the bootstrap connector uh

00:23:14,240 --> 00:23:19,679
jar theirs for

00:23:16,320 --> 00:23:22,640
the next four are the java uno

00:23:19,679 --> 00:23:25,120
uh libraries but these are versions that

00:23:22,640 --> 00:23:29,120
uh i put in maven central

00:23:25,120 --> 00:23:31,120
so they can be pulled down and

00:23:29,120 --> 00:23:32,640
and used in gradle builds or groovy

00:23:31,120 --> 00:23:35,760
scripts and things like that that could

00:23:32,640 --> 00:23:39,120
be used in maven builds

00:23:35,760 --> 00:23:39,520
so the next part uh that i touched on is

00:23:39,120 --> 00:23:42,159
the

00:23:39,520 --> 00:23:43,919
in the script you would have a path to

00:23:42,159 --> 00:23:45,840
your open office folder

00:23:43,919 --> 00:23:48,320
and then the bootstrap connector would

00:23:45,840 --> 00:23:51,840
do the rest

00:23:48,320 --> 00:23:51,840
so um

00:23:52,240 --> 00:23:56,000
the next piece of this is uh well i'll

00:23:54,720 --> 00:23:57,600
show you uh

00:23:56,000 --> 00:23:59,600
this is code that you would have in your

00:23:57,600 --> 00:24:02,400
script uh looks just like

00:23:59,600 --> 00:24:04,880
uh what you would see in the uh first uh

00:24:02,400 --> 00:24:05,760
first contact uh from the developer

00:24:04,880 --> 00:24:08,960
guide

00:24:05,760 --> 00:24:10,240
um but the but the code at the bottom is

00:24:08,960 --> 00:24:13,600
a shorter version

00:24:10,240 --> 00:24:16,159
that's um that's made possible

00:24:13,600 --> 00:24:17,360
with what i call the groovy uno

00:24:16,159 --> 00:24:19,440
extension

00:24:17,360 --> 00:24:21,679
and that's going to be the next subject

00:24:19,440 --> 00:24:24,080
of the talk and basically that's

00:24:21,679 --> 00:24:26,320
where i'm adding convenience methods in

00:24:24,080 --> 00:24:29,279
this case i'm bypassing

00:24:26,320 --> 00:24:33,679
some of the boilerplate code that you

00:24:29,279 --> 00:24:37,279
would need in a client

00:24:33,679 --> 00:24:39,200
so that's the groovy uno extension

00:24:37,279 --> 00:24:41,840
so the way this works is groovy has

00:24:39,200 --> 00:24:44,880
something called extension modules

00:24:41,840 --> 00:24:47,440
so you create a class like in this in

00:24:44,880 --> 00:24:51,200
this case a spreadsheet extension

00:24:47,440 --> 00:24:53,120
and then in that class you uh

00:24:51,200 --> 00:24:54,880
you dictate your methods you define

00:24:53,120 --> 00:24:55,760
where you define your method so in this

00:24:54,880 --> 00:25:00,240
case

00:24:55,760 --> 00:25:02,720
um i'm adding a get spreadsheet document

00:25:00,240 --> 00:25:03,679
to uh what is shown here in the first

00:25:02,720 --> 00:25:07,279
argument

00:25:03,679 --> 00:25:11,200
that's the x that's the component class

00:25:07,279 --> 00:25:14,720
um and everything that inherits from it

00:25:11,200 --> 00:25:18,400
so when you come when you use this uh

00:25:14,720 --> 00:25:22,559
extension x component now will have this

00:25:18,400 --> 00:25:22,559
um get spreadsheet document

00:25:22,799 --> 00:25:29,120
method available and it does and groovy

00:25:26,320 --> 00:25:30,720
does this at run time so it instruments

00:25:29,120 --> 00:25:34,480
these classes

00:25:30,720 --> 00:25:34,480
um at runtime

00:25:36,080 --> 00:25:41,200
so so basically this is just a little

00:25:39,440 --> 00:25:43,440
diagram of what we're doing here

00:25:41,200 --> 00:25:44,559
the groovy uno extension is using these

00:25:43,440 --> 00:25:46,960
api or the

00:25:44,559 --> 00:25:47,760
these libraries and adding convenience

00:25:46,960 --> 00:25:50,799
methods

00:25:47,760 --> 00:25:53,840
uh most of what i have so far

00:25:50,799 --> 00:25:57,600
deals with the spreadsheet apis

00:25:53,840 --> 00:25:59,840
but i plan on adding more as i go and

00:25:57,600 --> 00:26:02,400
hopefully

00:25:59,840 --> 00:26:04,159
people may be interested in this after

00:26:02,400 --> 00:26:07,600
after this talk

00:26:04,159 --> 00:26:10,640
and uh maybe jump in and help

00:26:07,600 --> 00:26:14,080
so uh enough about that so

00:26:10,640 --> 00:26:16,880
we'll show a little bit about

00:26:14,080 --> 00:26:19,360
some other things like i talked before

00:26:16,880 --> 00:26:22,320
the query interface

00:26:19,360 --> 00:26:23,440
used all over the place in java uno

00:26:22,320 --> 00:26:26,480
programming

00:26:23,440 --> 00:26:28,000
first thing i wanted to do was kind of

00:26:26,480 --> 00:26:30,240
not really get rid of it because it's

00:26:28,000 --> 00:26:33,919
still a lot used in the library

00:26:30,240 --> 00:26:37,440
but get rid of a lot of the

00:26:33,919 --> 00:26:38,640
verbosity of it so i replaced that with

00:26:37,440 --> 00:26:42,480
a method

00:26:38,640 --> 00:26:46,000
uh called guno so you'll see in the uh

00:26:42,480 --> 00:26:50,240
the bottom of that uh section there

00:26:46,000 --> 00:26:53,440
i'm using uh i'm using that method

00:26:50,240 --> 00:26:55,840
and i'm using it on an instance of the

00:26:53,440 --> 00:26:56,960
uh object that i have so i'm not using

00:26:55,840 --> 00:27:00,240
it as a static

00:26:56,960 --> 00:27:03,039
uno runtime method i'm

00:27:00,240 --> 00:27:04,640
actually using it on the uh on the

00:27:03,039 --> 00:27:08,159
object itself

00:27:04,640 --> 00:27:11,760
and passing it the uh class that i want

00:27:08,159 --> 00:27:15,039
back so that makes it a

00:27:11,760 --> 00:27:15,039
a little more straightforward

00:27:15,520 --> 00:27:21,440
so another thing in uno is

00:27:19,360 --> 00:27:24,080
to get uh properties of a lot of these

00:27:21,440 --> 00:27:27,360
objects so you use what uh

00:27:24,080 --> 00:27:31,279
they call a property set

00:27:27,360 --> 00:27:34,240
so you would uh set property value

00:27:31,279 --> 00:27:35,760
get property value things like that one

00:27:34,240 --> 00:27:39,360
thing i've done

00:27:35,760 --> 00:27:43,200
that you can i did using groovy is i

00:27:39,360 --> 00:27:47,039
also added a get at and put at methods

00:27:43,200 --> 00:27:47,039
which those are special names

00:27:47,760 --> 00:27:50,960
by doing that using the special names

00:27:50,240 --> 00:27:53,279
i'm add

00:27:50,960 --> 00:27:54,000
i'm able to add this use the subscript

00:27:53,279 --> 00:27:56,240
operator

00:27:54,000 --> 00:27:58,000
as groovy calls it like down at the

00:27:56,240 --> 00:28:00,159
bottom on the last line

00:27:58,000 --> 00:28:01,600
which looks like map or collection

00:28:00,159 --> 00:28:04,240
access

00:28:01,600 --> 00:28:04,240
in groovy

00:28:06,640 --> 00:28:12,960
so those four methods at the top

00:28:10,000 --> 00:28:14,960
are also added so those are convenience

00:28:12,960 --> 00:28:18,080
methods that i've added

00:28:14,960 --> 00:28:21,600
for uh setting and getting cell contents

00:28:18,080 --> 00:28:22,559
so instead of having to get the cell

00:28:21,600 --> 00:28:26,559
range

00:28:22,559 --> 00:28:28,399
get the cell text and then setting the

00:28:26,559 --> 00:28:30,480
setting the string on the cell text

00:28:28,399 --> 00:28:32,559
object i can go right from the

00:28:30,480 --> 00:28:36,720
spreadsheet

00:28:32,559 --> 00:28:39,679
with a with the coordinates of the cell

00:28:36,720 --> 00:28:41,279
and uh put you do the set formula of

00:28:39,679 --> 00:28:45,679
cell which is the name of the

00:28:41,279 --> 00:28:49,679
the new method right there in one line

00:28:45,679 --> 00:28:49,679
so uh four lines down to one

00:28:49,760 --> 00:28:54,799
so i won't go through all of what this

00:28:52,240 --> 00:28:58,559
does just a little larger example just

00:28:54,799 --> 00:29:01,600
to uh kind of uh illustrate um

00:28:58,559 --> 00:29:05,919
how much uh shorter your uh

00:29:01,600 --> 00:29:07,840
your code can get with methods like this

00:29:05,919 --> 00:29:09,760
with the using convenience methods and

00:29:07,840 --> 00:29:13,840
the groovy uh

00:29:09,760 --> 00:29:13,840
extension module

00:29:14,080 --> 00:29:17,679
so one of the other convenience methods

00:29:16,480 --> 00:29:21,600
that i've added is

00:29:17,679 --> 00:29:25,440
message boxes so the the code at the top

00:29:21,600 --> 00:29:28,000
is an example of displaying a message

00:29:25,440 --> 00:29:31,039
box that's shown on the left

00:29:28,000 --> 00:29:32,960
just a simple just one simple box and

00:29:31,039 --> 00:29:36,080
look at all the code

00:29:32,960 --> 00:29:38,720
so i wanted to improve on that so

00:29:36,080 --> 00:29:41,919
um i've added some convenience methods

00:29:38,720 --> 00:29:45,360
for uh displaying that message box

00:29:41,919 --> 00:29:47,679
uh the next slide is a little more uh an

00:29:45,360 --> 00:29:49,279
involved example or a little fancier box

00:29:47,679 --> 00:29:51,919
uh that has

00:29:49,279 --> 00:29:53,360
this default title that uh it has a

00:29:51,919 --> 00:29:55,919
custom title

00:29:53,360 --> 00:29:59,600
and some more of the standard buttons

00:29:55,919 --> 00:29:59,600
button arrangements that we would use

00:30:02,480 --> 00:30:06,559
so this isn't this isn't part of the

00:30:05,760 --> 00:30:10,159
extension

00:30:06,559 --> 00:30:10,720
but one of the things that groovy also

00:30:10,159 --> 00:30:13,840
brings

00:30:10,720 --> 00:30:18,000
to to programming

00:30:13,840 --> 00:30:21,360
is when you're using

00:30:18,000 --> 00:30:23,200
java swing which is for those that are

00:30:21,360 --> 00:30:26,399
java developer swing was the

00:30:23,200 --> 00:30:29,840
second generation ui toolkit

00:30:26,399 --> 00:30:32,559
after uh awt which was the original

00:30:29,840 --> 00:30:36,480
toolkit which was more heavyweight

00:30:32,559 --> 00:30:40,240
swing is a little lighter weight

00:30:36,480 --> 00:30:42,720
so one of the

00:30:40,240 --> 00:30:43,840
one of the harder things that especially

00:30:42,720 --> 00:30:47,360
new developers

00:30:43,840 --> 00:30:51,279
uh deal with on working with swing uis

00:30:47,360 --> 00:30:54,640
is getting the what we call the

00:30:51,279 --> 00:30:55,600
event dispatch thread or uh so you don't

00:30:54,640 --> 00:30:59,840
block your

00:30:55,600 --> 00:31:03,600
program with the ui

00:30:59,840 --> 00:31:07,120
so um this swing builder here

00:31:03,600 --> 00:31:09,679
handles that with the uh the dot edt

00:31:07,120 --> 00:31:10,960
method there so it automatically uh

00:31:09,679 --> 00:31:13,039
generates

00:31:10,960 --> 00:31:14,559
the byte code correctly for you to deal

00:31:13,039 --> 00:31:17,919
with the uh

00:31:14,559 --> 00:31:20,399
the threading issues so that's just a

00:31:17,919 --> 00:31:33,039
example of a simple ui with a

00:31:20,399 --> 00:31:35,760
with a label and a button

00:31:33,039 --> 00:31:36,320
so the next thing i want to talk about

00:31:35,760 --> 00:31:39,440
is the

00:31:36,320 --> 00:31:42,159
um the project templates so one of the

00:31:39,440 --> 00:31:45,279
things about the

00:31:42,159 --> 00:31:46,240
uh the netbeans uh plug-in that i talked

00:31:45,279 --> 00:31:49,760
about

00:31:46,240 --> 00:31:52,880
was um well it's you're locked to the

00:31:49,760 --> 00:31:53,919
netbeans ide which is a great ide by the

00:31:52,880 --> 00:31:56,240
way and uh

00:31:53,919 --> 00:31:59,919
congratulations to netbeans on uh

00:31:56,240 --> 00:32:00,320
becoming a top-level project at apache

00:31:59,919 --> 00:32:03,679
but

00:32:00,320 --> 00:32:06,399
um you know i don't like the idea

00:32:03,679 --> 00:32:08,559
necessarily of ide lock-in

00:32:06,399 --> 00:32:10,880
there's different times when maybe a

00:32:08,559 --> 00:32:13,039
client i need to use a different ide on

00:32:10,880 --> 00:32:16,399
a project or something like that

00:32:13,039 --> 00:32:20,000
so i i wanted to make this

00:32:16,399 --> 00:32:21,039
uh ide independent so i i chose to use

00:32:20,000 --> 00:32:24,399
uh the grand

00:32:21,039 --> 00:32:27,519
tool uh in these projects and i

00:32:24,399 --> 00:32:28,399
started with the uh the netbeans uh

00:32:27,519 --> 00:32:31,600
project

00:32:28,399 --> 00:32:35,760
templates um where those are uh

00:32:31,600 --> 00:32:39,840
ui wizards and um

00:32:35,760 --> 00:32:41,600
elaborate then uh i wanted just a simple

00:32:39,840 --> 00:32:42,960
command line tool that i could quickly

00:32:41,600 --> 00:32:44,480
get uh

00:32:42,960 --> 00:32:47,200
you know get these projects up and

00:32:44,480 --> 00:32:49,360
running so

00:32:47,200 --> 00:32:50,559
with the different types of templates

00:32:49,360 --> 00:32:52,880
that we're talking about

00:32:50,559 --> 00:32:54,559
is a client application that would be a

00:32:52,880 --> 00:32:56,559
standalone application that you're

00:32:54,559 --> 00:33:00,240
automating the office with

00:32:56,559 --> 00:33:03,840
or the calc add-ins for adding

00:33:00,240 --> 00:33:06,240
spreadsheet functions and add-ons

00:33:03,840 --> 00:33:07,519
i haven't uh i haven't worked on yet but

00:33:06,240 --> 00:33:09,440
that would add

00:33:07,519 --> 00:33:12,640
general functionality into any of the

00:33:09,440 --> 00:33:17,039
applications in openoffice

00:33:12,640 --> 00:33:17,039
so that's uh coming soon

00:33:17,360 --> 00:33:21,360
so these project templates i wanted uh

00:33:19,600 --> 00:33:26,240
simple to create

00:33:21,360 --> 00:33:26,240
minimal setup ide independent

00:33:26,720 --> 00:33:30,480
like i said i derived them from the

00:33:28,240 --> 00:33:33,840
netbeans ide projects

00:33:30,480 --> 00:33:36,000
and lazy bones was another

00:33:33,840 --> 00:33:37,679
tool that i found in the groovy

00:33:36,000 --> 00:33:40,399
ecosystem

00:33:37,679 --> 00:33:40,880
and some of the other projects i believe

00:33:40,399 --> 00:33:44,960
uh

00:33:40,880 --> 00:33:44,960
griffin uses it still

00:33:45,200 --> 00:33:49,519
can't confirm that i'd have to go check

00:33:47,120 --> 00:33:53,840
but uh that was i think that was where i

00:33:49,519 --> 00:33:53,840
found it at actually

00:33:54,640 --> 00:33:59,840
so um and and for all these projects

00:33:57,919 --> 00:34:01,200
the i've got on github i'm going to give

00:33:59,840 --> 00:34:03,440
you links to it

00:34:01,200 --> 00:34:05,279
uh there's a lot of documentation out

00:34:03,440 --> 00:34:07,279
there on how to get lazy but

00:34:05,279 --> 00:34:11,119
how to set it up but it's a really

00:34:07,279 --> 00:34:11,119
simple command line tool to set up

00:34:11,440 --> 00:34:18,240
so uh the way these templates work is um

00:34:16,159 --> 00:34:20,320
i'm just checking my time here so i've

00:34:18,240 --> 00:34:23,760
got about five minutes so i'm gonna

00:34:20,320 --> 00:34:25,520
maybe try to pick it up a little bit um

00:34:23,760 --> 00:34:27,839
so the way these templates work you

00:34:25,520 --> 00:34:31,440
create you put your xml files your

00:34:27,839 --> 00:34:34,960
uh your classes um you use

00:34:31,440 --> 00:34:38,159
uh variables in your

00:34:34,960 --> 00:34:41,919
in these files that are replaced at uh

00:34:38,159 --> 00:34:45,119
creation time so the lazy bones tool

00:34:41,919 --> 00:34:47,119
would would

00:34:45,119 --> 00:34:48,960
copy these files some of them may get

00:34:47,119 --> 00:34:50,480
renamed there's a group there's actually

00:34:48,960 --> 00:34:53,839
a lazy bones

00:34:50,480 --> 00:34:56,159
uh dot groovy script that that handles

00:34:53,839 --> 00:34:58,079
the way these templates are turned

00:34:56,159 --> 00:35:00,839
copied into projects

00:34:58,079 --> 00:35:03,040
uh so you can just you know set your own

00:35:00,839 --> 00:35:05,200
package

00:35:03,040 --> 00:35:07,280
package names class names things like

00:35:05,200 --> 00:35:11,200
that for your project

00:35:07,280 --> 00:35:14,240
and then lazy bones takes care of that

00:35:11,200 --> 00:35:16,800
so this is an example

00:35:14,240 --> 00:35:17,839
a real life example from a project i was

00:35:16,800 --> 00:35:21,200
working on

00:35:17,839 --> 00:35:21,200
recently where

00:35:21,760 --> 00:35:25,440
actually i was having to use excel at

00:35:24,240 --> 00:35:28,560
work

00:35:25,440 --> 00:35:30,320
and i was dealing with the

00:35:28,560 --> 00:35:32,480
a lot of file paths and i was having to

00:35:30,320 --> 00:35:35,599
break them down into their base name

00:35:32,480 --> 00:35:36,560
and extension uh file path things like

00:35:35,599 --> 00:35:40,240
that

00:35:36,560 --> 00:35:44,480
based on a full string and

00:35:40,240 --> 00:35:48,000
while those um well those

00:35:44,480 --> 00:35:50,480
well using functions for that um

00:35:48,000 --> 00:35:52,960
they can get they can get really ugly

00:35:50,480 --> 00:35:56,720
fast when you start trying to deal with

00:35:52,960 --> 00:36:00,000
uh multiple decimal places and

00:35:56,720 --> 00:36:01,359
uh unix path versus window pass things

00:36:00,000 --> 00:36:05,280
like that so

00:36:01,359 --> 00:36:09,520
i decided uh this be a a good example

00:36:05,280 --> 00:36:11,920
to create uh some uh custom functions

00:36:09,520 --> 00:36:14,800
for uh stripping these strings down into

00:36:11,920 --> 00:36:18,880
their base components for the files

00:36:14,800 --> 00:36:20,960
so that and also apache commons has a

00:36:18,880 --> 00:36:23,599
great library for this called file name

00:36:20,960 --> 00:36:23,599
utils

00:36:24,560 --> 00:36:29,200
so to uh in this example we're going to

00:36:26,960 --> 00:36:32,240
run through i'm using the

00:36:29,200 --> 00:36:35,760
lazy bones uh create command

00:36:32,240 --> 00:36:39,599
the uh ao add-in is the name of the

00:36:35,760 --> 00:36:42,079
project 030 there is the version of it

00:36:39,599 --> 00:36:43,359
and then it will pull this down from ben

00:36:42,079 --> 00:36:47,520
tray

00:36:43,359 --> 00:36:49,599
and create your create your project

00:36:47,520 --> 00:36:50,800
in this case the name is file utils

00:36:49,599 --> 00:36:53,040
add-in

00:36:50,800 --> 00:36:54,400
uh you'll answer a few questions like

00:36:53,040 --> 00:36:57,520
the package name

00:36:54,400 --> 00:36:58,160
that you want to use and then it will

00:36:57,520 --> 00:37:00,160
generate

00:36:58,160 --> 00:37:01,359
output for you which is really the

00:37:00,160 --> 00:37:03,680
readme file

00:37:01,359 --> 00:37:06,320
that will go into your project showing

00:37:03,680 --> 00:37:08,720
you how to build the project

00:37:06,320 --> 00:37:09,920
what the directory structure looks like

00:37:08,720 --> 00:37:11,599
and uh

00:37:09,920 --> 00:37:12,960
and some files that you might want to

00:37:11,599 --> 00:37:14,880
edit

00:37:12,960 --> 00:37:16,400
so uh right off the bat this is a

00:37:14,880 --> 00:37:19,200
buildable

00:37:16,400 --> 00:37:20,640
uh extension from a sample there's a

00:37:19,200 --> 00:37:22,720
there's a sample that just adds

00:37:20,640 --> 00:37:25,280
something onto a string

00:37:22,720 --> 00:37:27,119
but uh it it actually runs right out of

00:37:25,280 --> 00:37:29,839
the box

00:37:27,119 --> 00:37:30,480
so we'll just uh jump through this real

00:37:29,839 --> 00:37:34,000
quick

00:37:30,480 --> 00:37:36,720
um so in in the build file where you uh

00:37:34,000 --> 00:37:38,079
in the dependence i added the apache

00:37:36,720 --> 00:37:40,640
commons io

00:37:38,079 --> 00:37:40,640
library

00:37:41,200 --> 00:37:47,760
and uh there's a lot the idl file

00:37:44,720 --> 00:37:51,119
and and the template uh defines

00:37:47,760 --> 00:37:53,440
the three functions

00:37:51,119 --> 00:37:54,320
as well the interface definition for

00:37:53,440 --> 00:37:56,320
them

00:37:54,320 --> 00:37:58,640
uh there's an implementation groovy

00:37:56,320 --> 00:37:59,760
script where i go in and replace the

00:37:58,640 --> 00:38:01,440
sample method

00:37:59,760 --> 00:38:03,119
that's in there with the three new

00:38:01,440 --> 00:38:07,359
methods that i want and i

00:38:03,119 --> 00:38:10,480
import in the file name mutils

00:38:07,359 --> 00:38:12,720
there's a xml file

00:38:10,480 --> 00:38:16,240
that's for the open office extensions

00:38:12,720 --> 00:38:19,839
that describes this extension

00:38:16,240 --> 00:38:19,839
edit your lines there

00:38:20,240 --> 00:38:23,760
there's also another xml file for

00:38:22,720 --> 00:38:26,800
description

00:38:23,760 --> 00:38:29,440
information in this case uh logos and

00:38:26,800 --> 00:38:32,240
things like that the display name and

00:38:29,440 --> 00:38:33,200
the extension manager and the display

00:38:32,240 --> 00:38:37,359
description

00:38:33,200 --> 00:38:39,839
in a file so uh then you build the file

00:38:37,359 --> 00:38:41,359
using the gradle build tool and this zip

00:38:39,839 --> 00:38:44,160
is the task

00:38:41,359 --> 00:38:44,880
or the target and uh we're actually

00:38:44,160 --> 00:38:48,400
using

00:38:44,880 --> 00:38:50,960
uh gradle's built-in support for ant

00:38:48,400 --> 00:38:52,960
tasks so i copied a lot of ant tasks

00:38:50,960 --> 00:38:55,839
over from the netbeans

00:38:52,960 --> 00:38:58,240
plugin for this task for generating

00:38:55,839 --> 00:39:00,320
these classes from idl files and things

00:38:58,240 --> 00:39:03,119
like that and

00:39:00,320 --> 00:39:05,280
then we have a then after we run the

00:39:03,119 --> 00:39:08,000
build

00:39:05,280 --> 00:39:08,400
this would be the build the build tree

00:39:08,000 --> 00:39:11,280
uh

00:39:08,400 --> 00:39:13,760
the classes that are compiled by ant and

00:39:11,280 --> 00:39:17,440
the classes that are compiled by groovy

00:39:13,760 --> 00:39:19,200
or gradle and the

00:39:17,440 --> 00:39:21,599
jar files and then are all of it

00:39:19,200 --> 00:39:24,160
packaged into the oxt file which is our

00:39:21,599 --> 00:39:24,160
extension

00:39:24,720 --> 00:39:29,040
so that's what it looks like in the

00:39:26,160 --> 00:39:31,440
extension manager and

00:39:29,040 --> 00:39:33,440
the next part of the talk is i know i'm

00:39:31,440 --> 00:39:37,200
running out of time

00:39:33,440 --> 00:39:40,400
groovy macro is an open office so

00:39:37,200 --> 00:39:42,720
this is another extension

00:39:40,400 --> 00:39:43,599
that when you uh import it into the

00:39:42,720 --> 00:39:45,839
office

00:39:43,599 --> 00:39:46,720
it's going to add groovy as a macro

00:39:45,839 --> 00:39:48,720
language

00:39:46,720 --> 00:39:49,760
so i'm using the scripting framework

00:39:48,720 --> 00:39:53,359
that's already in

00:39:49,760 --> 00:39:56,079
openoffice to um because there's already

00:39:53,359 --> 00:39:57,040
support for beanshell and javascript it

00:39:56,079 --> 00:39:59,599
was a

00:39:57,040 --> 00:40:01,839
it wasn't that bad of a task to use the

00:39:59,599 --> 00:40:02,960
beanshell example that's built into open

00:40:01,839 --> 00:40:06,480
office

00:40:02,960 --> 00:40:07,760
to add groovy so it uses the groovy

00:40:06,480 --> 00:40:11,040
shell class

00:40:07,760 --> 00:40:13,680
to to do the script or to

00:40:11,040 --> 00:40:16,000
evaluate the scripts and this is an

00:40:13,680 --> 00:40:19,200
example of creating a new script

00:40:16,000 --> 00:40:22,640
and then you get a boilerplate uh

00:40:19,200 --> 00:40:25,119
hello world file macro

00:40:22,640 --> 00:40:27,280
where that's the uh you know this

00:40:25,119 --> 00:40:28,319
automatically comes with the groovy uno

00:40:27,280 --> 00:40:31,359
extension

00:40:28,319 --> 00:40:33,599
built in also so one of the advantages

00:40:31,359 --> 00:40:36,079
the macros is you already get

00:40:33,599 --> 00:40:36,880
the script context shown over on the

00:40:36,079 --> 00:40:39,280
right

00:40:36,880 --> 00:40:42,720
so that saves bootstrapping getting that

00:40:39,280 --> 00:40:45,839
component context and all that

00:40:42,720 --> 00:40:46,400
and lets you get right to business so uh

00:40:45,839 --> 00:40:48,960
there's

00:40:46,400 --> 00:40:50,960
just some simple lines in this and this

00:40:48,960 --> 00:40:51,839
again this macro when you first create a

00:40:50,960 --> 00:40:54,640
macro

00:40:51,839 --> 00:40:55,280
it's a running hello world application

00:40:54,640 --> 00:40:57,359
and then

00:40:55,280 --> 00:40:59,760
also in that macro there's lots of help

00:40:57,359 --> 00:40:59,760
text

00:41:00,720 --> 00:41:04,880
for finding the developer guide and

00:41:03,119 --> 00:41:05,760
going to finding information about

00:41:04,880 --> 00:41:08,880
groovy

00:41:05,760 --> 00:41:10,160
et cetera so the uh then i've also got

00:41:08,880 --> 00:41:13,119
another extension

00:41:10,160 --> 00:41:14,560
that adds a lot of the sample macros

00:41:13,119 --> 00:41:16,480
that come with open office that are in

00:41:14,560 --> 00:41:19,680
bean shell and javascript

00:41:16,480 --> 00:41:21,359
and uh i've recreated those in groovy

00:41:19,680 --> 00:41:24,079
and then you can add all of those at

00:41:21,359 --> 00:41:27,839
once using the extension mat

00:41:24,079 --> 00:41:31,440
extension manager and open office so the

00:41:27,839 --> 00:41:32,160
the downside of that is that you can't

00:41:31,440 --> 00:41:34,160
edit them

00:41:32,160 --> 00:41:36,640
because it comes in with an extension

00:41:34,160 --> 00:41:39,680
that's still packaged in an archive

00:41:36,640 --> 00:41:40,880
so i would actually suggest going to the

00:41:39,680 --> 00:41:43,680
github page

00:41:40,880 --> 00:41:44,240
and copying and pasting the code from

00:41:43,680 --> 00:41:48,640
the uh

00:41:44,240 --> 00:41:50,640
that project into your newly created

00:41:48,640 --> 00:41:52,560
scripts and that way you can play with

00:41:50,640 --> 00:41:55,119
grieving

00:41:52,560 --> 00:41:57,119
so in summary open office is highly

00:41:55,119 --> 00:41:59,920
customizable

00:41:57,119 --> 00:42:01,359
groovy has great capabilities to improve

00:41:59,920 --> 00:42:03,359
uno programming

00:42:01,359 --> 00:42:04,960
and there's efforts underway to improve

00:42:03,359 --> 00:42:08,160
it even more

00:42:04,960 --> 00:42:11,119
so uh i hope you'll uh come to

00:42:08,160 --> 00:42:12,000
openoffice and join us on the developer

00:42:11,119 --> 00:42:15,200
list

00:42:12,000 --> 00:42:16,720
and um you can also uh download some of

00:42:15,200 --> 00:42:20,160
these uh

00:42:16,720 --> 00:42:22,000
uh pet projects of mine uh and uh

00:42:20,160 --> 00:42:23,839
contact me if there's any questions

00:42:22,000 --> 00:42:27,040
about them

00:42:23,839 --> 00:42:27,599
so uh i've got a set of links uh toward

00:42:27,040 --> 00:42:30,720
the end

00:42:27,599 --> 00:42:34,160
an office ruby links to

00:42:30,720 --> 00:42:35,839
everything i've talked about here and

00:42:34,160 --> 00:42:37,520
i really appreciate everybody for

00:42:35,839 --> 00:42:42,720
joining

00:42:37,520 --> 00:42:46,160
um i know i think we're

00:42:42,720 --> 00:42:47,839
oh i'm over time so uh i

00:42:46,160 --> 00:42:49,440
do appre i'm sorry i don't have time for

00:42:47,839 --> 00:42:59,839
questions but

00:42:49,440 --> 00:42:59,839
uh let's see

00:43:06,160 --> 00:43:27,839
so uh thanks everybody for joining um

00:43:09,839 --> 00:43:27,839
we'll see you at the next talk bye

00:44:15,040 --> 00:44:17,119

YouTube URL: https://www.youtube.com/watch?v=CzxLKG9CUvo


