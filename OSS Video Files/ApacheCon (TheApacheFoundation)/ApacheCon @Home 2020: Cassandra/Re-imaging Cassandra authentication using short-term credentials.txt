Title: Re-imaging Cassandra authentication using short-term credentials
Publication date: 2020-10-21
Playlist: ApacheCon @Home 2020: Cassandra
Description: 
	Re-imaging Cassandra authentication using short-term credentials
Arturo Hinojosa, Derek Chen-Becker, Brian Houser

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

Apache Cassandra manages access by using traditional usernames and passwords. However, organizations and developers are moving towards more secure access management techniques for programmatic access, such as using short-term credentials. In this talk, we will dive deep on how Amazon Web Services (AWS) designed and built an open-source authentication plugin for Cassandra drivers that enables developers to use short term credentials for access management instead of hard-coding credentials in their application code. You will learn how the plugin integrates with Cassandra drivers and how the security model works in comparison to traditional authentication.

Arturo Hinojosa:
Arturo Hinojosa is a Principal Product Manager on the Amazon Keyspaces (for Apache Cassandra) team. Arturo is responsible for the overall product strategy of Amazon Keyspaces and has been with Amazon Web Services (AWS) for over four years.
Derek Chen-Becker:
Derek Chen-Becker is a senior software development engineer on the Amazon Keyspaces (for Apache Cassandra) team. Derek is the original author of the AWS authentication plugin for Apache Cassandra drivers. Derek is interested in network engineering and enterprise software development, with focuses in distributed systems, monitoring and management.
Brian Houser:
Brian Houser is a Senior Software Development Engineer on the Amazon Keyspaces (for Apache Cassandra) team. Brian leads open-source efforts for Amazon Keyspaces and has been with Amazon for more than 10 years.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:27,199 --> 00:00:29,599
okay

00:00:28,160 --> 00:00:31,039
oh we'll go ahead and get started we'll

00:00:29,599 --> 00:00:32,239
work out technical issues in the

00:00:31,039 --> 00:00:35,280
background

00:00:32,239 --> 00:00:38,480
um i want to introduce myself

00:00:35,280 --> 00:00:39,760
uh my name is derek chun becker and the

00:00:38,480 --> 00:00:41,600
talk we're going to be giving is

00:00:39,760 --> 00:00:45,840
reimagining cassandra authentication

00:00:41,600 --> 00:00:45,840
using short-term credentials

00:00:46,079 --> 00:00:49,120
first i want to introduce myself for the

00:00:48,239 --> 00:00:51,600
other presenters

00:00:49,120 --> 00:00:53,840
uh like i said my name is derek chen

00:00:51,600 --> 00:00:56,879
becker i'm one of the senior

00:00:53,840 --> 00:00:59,120
engineers on amazon key spaces

00:00:56,879 --> 00:01:00,640
i'm joined by brian houser also one of

00:00:59,120 --> 00:01:04,159
our senior engineers

00:01:00,640 --> 00:01:05,040
and steve mazak one of our managers

00:01:04,159 --> 00:01:08,400
who's going to be

00:01:05,040 --> 00:01:11,600
helping uh answer questions uh in the

00:01:08,400 --> 00:01:13,200
in the chat so

00:01:11,600 --> 00:01:14,880
if you have any questions please feel

00:01:13,200 --> 00:01:17,600
free to enter in the chat window we'll

00:01:14,880 --> 00:01:18,000
we'll try and answer them as we go or um

00:01:17,600 --> 00:01:19,600
if

00:01:18,000 --> 00:01:21,840
if we're running through something we

00:01:19,600 --> 00:01:24,400
will end up answering them at the end

00:01:21,840 --> 00:01:27,840
so without further ado i'll go ahead and

00:01:24,400 --> 00:01:27,840
get started

00:01:28,560 --> 00:01:31,759
so when we were building amazon key

00:01:30,880 --> 00:01:34,479
spaces

00:01:31,759 --> 00:01:35,439
um one of the one of the tenants we

00:01:34,479 --> 00:01:38,400
followed was

00:01:35,439 --> 00:01:39,759
was making the customer experience as

00:01:38,400 --> 00:01:43,600
seamless as possible

00:01:39,759 --> 00:01:46,240
so cassandra out of the box supports

00:01:43,600 --> 00:01:46,799
a username and password authentication

00:01:46,240 --> 00:01:50,320
and so

00:01:46,799 --> 00:01:52,479
we we made sure that using what's called

00:01:50,320 --> 00:01:55,200
service specific credentials

00:01:52,479 --> 00:01:56,399
but immediately after launch customers

00:01:55,200 --> 00:01:59,920
started asking

00:01:56,399 --> 00:02:02,079
uh how they could use im roles uh with

00:01:59,920 --> 00:02:03,600
with uh amazon key spaces so that their

00:02:02,079 --> 00:02:05,200
cassandra clients could

00:02:03,600 --> 00:02:07,040
could attach without having to manage

00:02:05,200 --> 00:02:08,560
all of the usernames and passwords

00:02:07,040 --> 00:02:12,000
across their hosts

00:02:08,560 --> 00:02:13,360
um i am roles are a way of associating a

00:02:12,000 --> 00:02:16,480
role with a container

00:02:13,360 --> 00:02:18,160
or an instance such that you get

00:02:16,480 --> 00:02:19,520
automatically rotated short-term

00:02:18,160 --> 00:02:21,200
credentials

00:02:19,520 --> 00:02:24,160
that are essentially transparent to the

00:02:21,200 --> 00:02:24,160
client for their use

00:02:24,879 --> 00:02:30,080
our immediate goal then was to implement

00:02:27,599 --> 00:02:32,720
a sig v4 client plug-in because

00:02:30,080 --> 00:02:34,800
im authentication uses the sig v4

00:02:32,720 --> 00:02:37,040
authentication protocol

00:02:34,800 --> 00:02:38,160
but longer term we wanted to think about

00:02:37,040 --> 00:02:41,920
how we could

00:02:38,160 --> 00:02:43,120
expose sig v4 uh one outside of amazon

00:02:41,920 --> 00:02:47,120
key spaces and

00:02:43,120 --> 00:02:50,319
also how we might be able to

00:02:47,120 --> 00:02:51,840
contribute to supporting other

00:02:50,319 --> 00:02:54,000
short-term credential systems in

00:02:51,840 --> 00:02:56,400
cassandra

00:02:54,000 --> 00:02:58,400
i want to just put the caveat out there

00:02:56,400 --> 00:03:00,000
i'm not a security expert

00:02:58,400 --> 00:03:02,879
but i am passionate about it i think

00:03:00,000 --> 00:03:05,599
that it's very important that

00:03:02,879 --> 00:03:06,239
effective security is is better when

00:03:05,599 --> 00:03:09,200
it's simple

00:03:06,239 --> 00:03:11,200
as opposed to complex and so this was

00:03:09,200 --> 00:03:14,239
this is a really important topic for us

00:03:11,200 --> 00:03:14,239
to to dive in on

00:03:15,120 --> 00:03:18,640
so before i get too far into the plugin

00:03:17,760 --> 00:03:20,800
itself i want to

00:03:18,640 --> 00:03:22,800
give a little bit of quick background on

00:03:20,800 --> 00:03:25,200
sig v4 authentication

00:03:22,800 --> 00:03:26,560
so sig v4 is a form of digest

00:03:25,200 --> 00:03:28,480
authentication

00:03:26,560 --> 00:03:30,400
that means that instead of sending a

00:03:28,480 --> 00:03:33,440
username and password

00:03:30,400 --> 00:03:35,120
um and identity and credentials are used

00:03:33,440 --> 00:03:38,319
to essentially create a signature

00:03:35,120 --> 00:03:40,080
or a digest and that digest can be

00:03:38,319 --> 00:03:42,480
comprised of various things

00:03:40,080 --> 00:03:44,239
uh if you've ever used digest

00:03:42,480 --> 00:03:46,720
authentication for http

00:03:44,239 --> 00:03:47,760
or if you've heard of cram md5 all those

00:03:46,720 --> 00:03:50,640
kinds of things

00:03:47,760 --> 00:03:52,400
this is a this is a common way of

00:03:50,640 --> 00:03:54,799
preserving secrets without having to

00:03:52,400 --> 00:03:57,200
pass them along

00:03:54,799 --> 00:03:58,799
um for the purposes of sig v4 it can

00:03:57,200 --> 00:04:01,200
also assign the content

00:03:58,799 --> 00:04:02,560
as well as as well as metadata around

00:04:01,200 --> 00:04:04,319
requests

00:04:02,560 --> 00:04:07,439
and there there's also a time stamp

00:04:04,319 --> 00:04:09,360
included as part of the signature

00:04:07,439 --> 00:04:10,640
and the time stamp itself is sent along

00:04:09,360 --> 00:04:11,360
as part of the metadata for the

00:04:10,640 --> 00:04:13,200
signature

00:04:11,360 --> 00:04:14,799
the reason that's done is essentially to

00:04:13,200 --> 00:04:16,959
prevent replay protection

00:04:14,799 --> 00:04:19,440
so you can bound how long a signature is

00:04:16,959 --> 00:04:19,440
valid for

00:04:20,880 --> 00:04:26,960
so 64 was designed primarily for http

00:04:25,360 --> 00:04:29,120
as you can tell we have things like

00:04:26,960 --> 00:04:30,400
request methods and uris and query

00:04:29,120 --> 00:04:32,960
strings and headers

00:04:30,400 --> 00:04:36,000
that are very applicable for http but

00:04:32,960 --> 00:04:39,040
cassandra uses the cql binary protocol

00:04:36,000 --> 00:04:42,160
for client communication

00:04:39,040 --> 00:04:44,880
and these aren't all applicable so

00:04:42,160 --> 00:04:47,199
what we've done is we've taken sigbi4

00:04:44,880 --> 00:04:50,160
and where we can

00:04:47,199 --> 00:04:53,360
we use fixed values for those things

00:04:50,160 --> 00:04:55,040
such as the request method or the uri

00:04:53,360 --> 00:04:56,479
the signature is still dependent on

00:04:55,040 --> 00:04:58,479
things like the time stamp and the

00:04:56,479 --> 00:05:02,320
actual secrets on either side so

00:04:58,479 --> 00:05:02,320
this is this is still considered secure

00:05:03,919 --> 00:05:08,240
i want to talk a little bit about the

00:05:05,199 --> 00:05:10,960
authentication handshake in cassandra

00:05:08,240 --> 00:05:12,800
so authentication is actually optional

00:05:10,960 --> 00:05:15,360
in the cql protocol

00:05:12,800 --> 00:05:16,960
the client begins its connection with a

00:05:15,360 --> 00:05:18,720
startup message

00:05:16,960 --> 00:05:20,639
and the server has the option of either

00:05:18,720 --> 00:05:23,120
sending a ready message which indicates

00:05:20,639 --> 00:05:25,039
that it's ready to receive requests

00:05:23,120 --> 00:05:27,280
or it can send back an authenticate

00:05:25,039 --> 00:05:28,960
message as part of that authenticate

00:05:27,280 --> 00:05:32,080
message it actually sends back

00:05:28,960 --> 00:05:34,080
a fully qualified class name of the

00:05:32,080 --> 00:05:36,240
authentication provider that the server

00:05:34,080 --> 00:05:37,840
wants to use

00:05:36,240 --> 00:05:40,160
the client will invalidate that

00:05:37,840 --> 00:05:42,080
authenticator uh because it needs to

00:05:40,160 --> 00:05:43,440
know that it has an implementation for

00:05:42,080 --> 00:05:45,360
it and it will proceed with the

00:05:43,440 --> 00:05:47,199
authentication if it does

00:05:45,360 --> 00:05:49,039
uh if the authenticator is one that it

00:05:47,199 --> 00:05:50,639
doesn't know about or if it doesn't have

00:05:49,039 --> 00:05:54,639
an implementation for it

00:05:50,639 --> 00:05:57,039
it essentially fails the connection um

00:05:54,639 --> 00:05:58,080
as part of that auth response then

00:05:57,039 --> 00:06:00,319
assuming that

00:05:58,080 --> 00:06:02,000
authentication is moving forward it can

00:06:00,319 --> 00:06:04,479
send information such as

00:06:02,000 --> 00:06:05,520
uh in the case of uh using your

00:06:04,479 --> 00:06:08,560
passwords it sends the

00:06:05,520 --> 00:06:10,720
authentication id and the credential uh

00:06:08,560 --> 00:06:12,319
in other protocols or other providers

00:06:10,720 --> 00:06:13,360
that cassandra supports and can send

00:06:12,319 --> 00:06:14,960
different things in that initial

00:06:13,360 --> 00:06:16,639
response

00:06:14,960 --> 00:06:18,000
and what follows then is basically a

00:06:16,639 --> 00:06:19,919
back and forth of

00:06:18,000 --> 00:06:22,080
challenge and response from server to

00:06:19,919 --> 00:06:23,440
client until the server determines that

00:06:22,080 --> 00:06:27,360
it's either succeeded

00:06:23,440 --> 00:06:27,360
in authentication or it's it's failed

00:06:27,919 --> 00:06:32,720
now this looks at all familiar to to

00:06:30,560 --> 00:06:35,520
people that's because this is based on

00:06:32,720 --> 00:06:36,319
on sassl which is the simple

00:06:35,520 --> 00:06:39,199
authentication

00:06:36,319 --> 00:06:40,960
security layer this is a an

00:06:39,199 --> 00:06:42,319
authentication protocol that goes back

00:06:40,960 --> 00:06:45,280
quite a ways

00:06:42,319 --> 00:06:46,479
i believe it was originally built for

00:06:45,280 --> 00:06:49,199
imap

00:06:46,479 --> 00:06:51,280
but it has since been extended uh into

00:06:49,199 --> 00:06:54,400
other protocols such as smtp

00:06:51,280 --> 00:06:56,400
xmpp etc and it it defines a similar

00:06:54,400 --> 00:06:59,599
handshake protocol

00:06:56,400 --> 00:07:03,039
um there are a couple differences uh

00:06:59,599 --> 00:07:04,720
one the client is the initiator of the

00:07:03,039 --> 00:07:05,919
authentication exchange so it indicates

00:07:04,720 --> 00:07:07,599
to the server that it wants to

00:07:05,919 --> 00:07:09,840
authenticate not the server telling that

00:07:07,599 --> 00:07:11,199
it needs to

00:07:09,840 --> 00:07:14,720
but essentially the rest of it is

00:07:11,199 --> 00:07:14,720
challenge responses and an outcome

00:07:15,599 --> 00:07:19,199
the cassandra doesn't quite support

00:07:17,759 --> 00:07:22,400
sassel

00:07:19,199 --> 00:07:25,840
um for one sassel itself

00:07:22,400 --> 00:07:26,960
provides a mechanism for the server to

00:07:25,840 --> 00:07:29,360
indicate to the client

00:07:26,960 --> 00:07:30,880
which mechanisms are are supported or

00:07:29,360 --> 00:07:31,840
which authentication protocols are

00:07:30,880 --> 00:07:34,400
supported

00:07:31,840 --> 00:07:36,080
in cassandra it's not negotiated it's

00:07:34,400 --> 00:07:37,440
basically something that's configured on

00:07:36,080 --> 00:07:39,919
the server side and configured

00:07:37,440 --> 00:07:41,919
separately on the client side

00:07:39,919 --> 00:07:43,599
like i said before the client the server

00:07:41,919 --> 00:07:44,960
have to statically agree on the

00:07:43,599 --> 00:07:46,160
authenticator

00:07:44,960 --> 00:07:48,000
and if they don't agree on the

00:07:46,160 --> 00:07:49,759
authenticator

00:07:48,000 --> 00:07:52,479
then essentially that that

00:07:49,759 --> 00:07:54,639
authentication can't proceed

00:07:52,479 --> 00:07:56,000
so if we wanted to support the out of

00:07:54,639 --> 00:07:59,120
box experience

00:07:56,000 --> 00:08:00,319
of service specific credentials but we

00:07:59,120 --> 00:08:03,120
also wanted to support

00:08:00,319 --> 00:08:04,879
6v4 we needed to figure out how we could

00:08:03,120 --> 00:08:07,599
advertise different auth providers to

00:08:04,879 --> 00:08:07,599
different users

00:08:08,960 --> 00:08:13,199
as it turns out we're not the first uh

00:08:12,000 --> 00:08:13,759
i'm not the first person to think of

00:08:13,199 --> 00:08:15,840
this

00:08:13,759 --> 00:08:19,440
um there's actually a ticket back from

00:08:15,840 --> 00:08:21,120
2016. this is cassandra 11471

00:08:19,440 --> 00:08:22,800
that talks about adding a sassl

00:08:21,120 --> 00:08:24,879
mechanism negotiation to the native

00:08:22,800 --> 00:08:27,919
protocol

00:08:24,879 --> 00:08:29,680
um this this talks about

00:08:27,919 --> 00:08:31,680
essentially emulating the full sassle

00:08:29,680 --> 00:08:33,839
exchange where the the negotiation would

00:08:31,680 --> 00:08:35,919
happen and the authenticate message

00:08:33,839 --> 00:08:37,039
um there's a good amount of activity on

00:08:35,919 --> 00:08:40,959
this ticket

00:08:37,039 --> 00:08:44,159
um but it was last updated in 2017

00:08:40,959 --> 00:08:46,080
um from from my reading and this is just

00:08:44,159 --> 00:08:47,839
my personal take on it it sounds like

00:08:46,080 --> 00:08:50,240
there is some disagreement on exactly

00:08:47,839 --> 00:08:54,160
where the right place was to do this

00:08:50,240 --> 00:08:55,680
um and it's also a a

00:08:54,160 --> 00:08:57,200
change that would have to go through the

00:08:55,680 --> 00:08:58,959
actual protocol because if we're going

00:08:57,200 --> 00:09:00,720
to change what goes in the authenticate

00:08:58,959 --> 00:09:02,240
message it needs to somehow be backward

00:09:00,720 --> 00:09:05,360
compatible with the

00:09:02,240 --> 00:09:06,320
with the existing clients so so we'd

00:09:05,360 --> 00:09:08,240
have to change

00:09:06,320 --> 00:09:09,680
uh the client drivers coordinate with

00:09:08,240 --> 00:09:12,240
them to allow this to happen

00:09:09,680 --> 00:09:13,360
so um there's i think there's more work

00:09:12,240 --> 00:09:16,880
that could be done on this and we're

00:09:13,360 --> 00:09:16,880
going to discuss this a little bit later

00:09:20,000 --> 00:09:25,200
so among the other options

00:09:23,120 --> 00:09:26,959
we have a new authenticator that can

00:09:25,200 --> 00:09:28,080
negotiate the mechanism this is actually

00:09:26,959 --> 00:09:30,080
one of the things i think that was

00:09:28,080 --> 00:09:32,480
proposed in that ticket was

00:09:30,080 --> 00:09:33,680
um if you provide an implementation of

00:09:32,480 --> 00:09:35,519
authenticator where

00:09:33,680 --> 00:09:36,959
the authenticate challenge and

00:09:35,519 --> 00:09:38,880
authenticate results essentially

00:09:36,959 --> 00:09:41,440
negotiate that mechanism that's one way

00:09:38,880 --> 00:09:41,440
of doing it

00:09:42,399 --> 00:09:47,040
this this does however run back into the

00:09:44,560 --> 00:09:49,279
same issue of

00:09:47,040 --> 00:09:50,720
requiring coordination with clients so

00:09:49,279 --> 00:09:52,160
that you can be backwards compatible

00:09:50,720 --> 00:09:54,000
clients would have to be updated so that

00:09:52,160 --> 00:09:55,040
they're so that they also have an

00:09:54,000 --> 00:09:57,040
implementation for this new

00:09:55,040 --> 00:09:58,959
authenticator

00:09:57,040 --> 00:10:02,320
another another option would be to alter

00:09:58,959 --> 00:10:04,800
the cql binary protocol

00:10:02,320 --> 00:10:05,760
there is an exchange that can happen

00:10:04,800 --> 00:10:08,399
where

00:10:05,760 --> 00:10:09,120
um this the server can essentially tell

00:10:08,399 --> 00:10:12,240
clients

00:10:09,120 --> 00:10:12,480
various options that it supports uh and

00:10:12,240 --> 00:10:14,160
it

00:10:12,480 --> 00:10:15,760
in the startup message the client can

00:10:14,160 --> 00:10:17,360
indicate to the server which options

00:10:15,760 --> 00:10:19,120
it's once enabled or what the settings

00:10:17,360 --> 00:10:20,640
for those options are

00:10:19,120 --> 00:10:22,240
a third option would be to simply

00:10:20,640 --> 00:10:23,200
provide different endpoints where one

00:10:22,240 --> 00:10:25,680
endpoint

00:10:23,200 --> 00:10:26,800
implements one authentication mechanism

00:10:25,680 --> 00:10:28,880
and the other

00:10:26,800 --> 00:10:32,160
you know a different endpoint implements

00:10:28,880 --> 00:10:35,279
something else

00:10:32,160 --> 00:10:38,880
what what we felt was the simplest path

00:10:35,279 --> 00:10:41,360
um for an initial implementation

00:10:38,880 --> 00:10:42,320
uh was to overload the plaintext auth

00:10:41,360 --> 00:10:44,720
provider this is

00:10:42,320 --> 00:10:46,320
this is the the out-of-the-box

00:10:44,720 --> 00:10:48,880
authentication provider for the server

00:10:46,320 --> 00:10:50,399
that handles username and passwords

00:10:48,880 --> 00:10:52,560
it's based around the sassl plane

00:10:50,399 --> 00:10:56,240
mechanism which

00:10:52,560 --> 00:10:56,720
allows you to send credentials in plain

00:10:56,240 --> 00:11:00,000
text

00:10:56,720 --> 00:11:01,920
over a tls connection

00:11:00,000 --> 00:11:03,040
you know it for for key spaces and for

00:11:01,920 --> 00:11:06,800
most cassandra

00:11:03,040 --> 00:11:08,320
in instances where you want the security

00:11:06,800 --> 00:11:09,760
you want to ensure that you have tls

00:11:08,320 --> 00:11:13,120
connections for the

00:11:09,760 --> 00:11:14,480
for the clients um but the the plane

00:11:13,120 --> 00:11:16,320
mechanism

00:11:14,480 --> 00:11:17,760
is defined as having both an

00:11:16,320 --> 00:11:20,000
authentication id

00:11:17,760 --> 00:11:21,279
as well as an authorization id so you

00:11:20,000 --> 00:11:22,720
can you can have two different

00:11:21,279 --> 00:11:24,800
identities for the purposes of

00:11:22,720 --> 00:11:27,200
authentication and authorization

00:11:24,800 --> 00:11:29,600
but in cassandra's implementation the

00:11:27,200 --> 00:11:32,240
authorization id or the auth zid field

00:11:29,600 --> 00:11:32,240
isn't used

00:11:32,800 --> 00:11:37,360
so what we wanted to do was we

00:11:35,760 --> 00:11:40,320
essentially special cased

00:11:37,360 --> 00:11:42,720
on that initial response depending on

00:11:40,320 --> 00:11:45,279
what was in the authorization id

00:11:42,720 --> 00:11:46,959
normally the plain text auth provider

00:11:45,279 --> 00:11:49,040
will send nothing it sends an empty

00:11:46,959 --> 00:11:52,639
string in that field

00:11:49,040 --> 00:11:54,399
what we did was we we added our plugin

00:11:52,639 --> 00:11:56,000
on the client side such that if it wants

00:11:54,399 --> 00:11:58,800
to initiate that

00:11:56,000 --> 00:12:00,959
it sends a sig v4 to start the 64

00:11:58,800 --> 00:12:02,720
exchange and then the server responds

00:12:00,959 --> 00:12:04,320
with a challenge that includes a nonce

00:12:02,720 --> 00:12:06,399
for additional replay protection as well

00:12:04,320 --> 00:12:08,639
as other metadata that the client needs

00:12:06,399 --> 00:12:10,880
to generate its signature

00:12:08,639 --> 00:12:12,639
the client then generates a signature

00:12:10,880 --> 00:12:14,160
along with other metadata

00:12:12,639 --> 00:12:16,480
that it uses to authenticate to the

00:12:14,160 --> 00:12:16,480
server

00:12:18,639 --> 00:12:22,800
so just give a little detail on on what

00:12:20,880 --> 00:12:24,560
this implementation evolved i want to

00:12:22,800 --> 00:12:25,839
really quickly go over kind of the

00:12:24,560 --> 00:12:27,440
contract of the

00:12:25,839 --> 00:12:28,959
the server and the client plug-ins

00:12:27,440 --> 00:12:30,720
because i think i think it's interesting

00:12:28,959 --> 00:12:32,160
they've given us some really good hooks

00:12:30,720 --> 00:12:33,519
to work with here

00:12:32,160 --> 00:12:35,519
and i think this follows the theme of

00:12:33,519 --> 00:12:36,000
cassandra generally having really good

00:12:35,519 --> 00:12:39,200
hooks

00:12:36,000 --> 00:12:43,680
into various uh parts of the

00:12:39,200 --> 00:12:45,279
the session and request life cycle so

00:12:43,680 --> 00:12:47,040
the first thing we look at is there's an

00:12:45,279 --> 00:12:49,440
i authenticator interface that you could

00:12:47,040 --> 00:12:52,000
use to obtain a sassal negotiator so

00:12:49,440 --> 00:12:53,120
the i authenticator basically represents

00:12:52,000 --> 00:12:54,320
a factory

00:12:53,120 --> 00:12:57,120
for these sessional and cecil

00:12:54,320 --> 00:12:57,680
negotiators and the sassal negotiator

00:12:57,120 --> 00:13:00,000
itself

00:12:57,680 --> 00:13:00,800
is considered to be a stateful instance

00:13:00,000 --> 00:13:03,760
that's

00:13:00,800 --> 00:13:04,800
created per session so each session when

00:13:03,760 --> 00:13:06,560
it when it

00:13:04,800 --> 00:13:08,160
initiates authentication is going to get

00:13:06,560 --> 00:13:10,560
its own sassal negotiator that can

00:13:08,160 --> 00:13:13,519
maintain its own state for that whole

00:13:10,560 --> 00:13:15,360
challenge response life cycle the sassal

00:13:13,519 --> 00:13:18,000
negotiator itself then provides hooks

00:13:15,360 --> 00:13:19,519
into that sassa life cycle so

00:13:18,000 --> 00:13:20,800
looking at the sequence diagram here

00:13:19,519 --> 00:13:22,800
when we when we do the initial

00:13:20,800 --> 00:13:24,720
authenticate we get the the new sassl

00:13:22,800 --> 00:13:26,399
negotiator called to essentially assign

00:13:24,720 --> 00:13:28,160
assassin negotiator for the for the

00:13:26,399 --> 00:13:30,880
server session

00:13:28,160 --> 00:13:32,560
the auth response then calls the

00:13:30,880 --> 00:13:34,880
evaluate response method

00:13:32,560 --> 00:13:36,800
evaluate response method can it can

00:13:34,880 --> 00:13:38,399
optionally return data so it can

00:13:36,800 --> 00:13:39,120
basically return a byte array which

00:13:38,399 --> 00:13:40,880
means that

00:13:39,120 --> 00:13:42,959
you could pretty much work this in with

00:13:40,880 --> 00:13:43,519
whatever kind of negotiation you want

00:13:42,959 --> 00:13:45,120
it's not

00:13:43,519 --> 00:13:47,279
it's not constrained your particular

00:13:45,120 --> 00:13:48,800
format or anything

00:13:47,279 --> 00:13:51,279
those bytes are basically sent back

00:13:48,800 --> 00:13:52,399
verbatim in the auth response or the i'm

00:13:51,279 --> 00:13:54,720
sorry the

00:13:52,399 --> 00:13:56,399
auth challenge and then there's an is

00:13:54,720 --> 00:13:58,000
complete method that

00:13:56,399 --> 00:14:00,000
basically tells the server if

00:13:58,000 --> 00:14:01,760
negotiation is complete if that returns

00:14:00,000 --> 00:14:03,519
true then the server will send back an

00:14:01,760 --> 00:14:05,519
auth success message

00:14:03,519 --> 00:14:07,199
and calls the get authenticated user

00:14:05,519 --> 00:14:09,680
method to get

00:14:07,199 --> 00:14:12,720
the authenticated user that's been

00:14:09,680 --> 00:14:12,720
created for that session

00:14:12,959 --> 00:14:17,519
from the client side we have an auth

00:14:15,839 --> 00:14:19,199
provider interface these are these are

00:14:17,519 --> 00:14:19,839
kind of mirror images to the server

00:14:19,199 --> 00:14:21,760
plugin

00:14:19,839 --> 00:14:23,440
where the auth provider again is like a

00:14:21,760 --> 00:14:25,279
factory and then the authenticator is

00:14:23,440 --> 00:14:27,760
used on a per session basis to do the

00:14:25,279 --> 00:14:29,120
stateful authentication life cycle

00:14:27,760 --> 00:14:30,560
again the authenticator provides

00:14:29,120 --> 00:14:32,160
lifecycle books where when we get an

00:14:30,560 --> 00:14:33,600
authenticate message we'll create a new

00:14:32,160 --> 00:14:35,360
authenticator

00:14:33,600 --> 00:14:37,199
the auth response calls an initial

00:14:35,360 --> 00:14:39,120
response method on the authenticator

00:14:37,199 --> 00:14:41,279
this is where in our 64 plugin we send

00:14:39,120 --> 00:14:43,120
back that special string

00:14:41,279 --> 00:14:44,639
the auth challenge will come back with

00:14:43,120 --> 00:14:46,480
those bytes that were sent from the

00:14:44,639 --> 00:14:48,800
server if it sent some

00:14:46,480 --> 00:14:49,839
and then our auth response basically

00:14:48,800 --> 00:14:51,760
sends back

00:14:49,839 --> 00:14:53,360
whatever outputs from the evaluate

00:14:51,760 --> 00:14:54,800
challenge method

00:14:53,360 --> 00:14:56,560
on the authenticator and the evaluate

00:14:54,800 --> 00:14:58,240
challenge is what actually gets the

00:14:56,560 --> 00:15:00,560
bytes and determines if it needs to send

00:14:58,240 --> 00:15:03,519
back a further response and continue the

00:15:00,560 --> 00:15:04,240
the back and forth the auth success

00:15:03,519 --> 00:15:05,839
message

00:15:04,240 --> 00:15:08,399
uh if it's received from the server

00:15:05,839 --> 00:15:11,839
essentially stops the the handshake

00:15:08,399 --> 00:15:13,600
and uh the on authentication success

00:15:11,839 --> 00:15:15,040
method is called on the client to

00:15:13,600 --> 00:15:17,519
perform whatever bookkeeping needs to be

00:15:15,040 --> 00:15:17,519
done there

00:15:18,800 --> 00:15:23,040
so we we learned a lot uh out of

00:15:22,079 --> 00:15:25,920
implementing this

00:15:23,040 --> 00:15:27,120
this plugin uh for the client and also

00:15:25,920 --> 00:15:29,600
figuring out you know

00:15:27,120 --> 00:15:31,360
what we wanted security look like so we

00:15:29,600 --> 00:15:33,839
wanted to take the opportunity

00:15:31,360 --> 00:15:34,399
to to share some of the things that we

00:15:33,839 --> 00:15:37,360
learned

00:15:34,399 --> 00:15:39,199
back with the rest of the community um

00:15:37,360 --> 00:15:40,480
so i want to hand off to brian here and

00:15:39,199 --> 00:15:41,839
let him

00:15:40,480 --> 00:15:43,710
go ahead and pick up where where i've

00:15:41,839 --> 00:15:45,120
left off here

00:15:43,710 --> 00:15:47,519
[Music]

00:15:45,120 --> 00:15:49,040
hi everybody uh my name is brian hauser

00:15:47,519 --> 00:15:52,000
as jack just mentioned

00:15:49,040 --> 00:15:53,680
uh i'm a developer for the newly minted

00:15:52,000 --> 00:15:54,160
cassandra open source contributions

00:15:53,680 --> 00:15:57,120
group

00:15:54,160 --> 00:15:58,959
for amazon key spaces today i'd like to

00:15:57,120 --> 00:16:00,000
talk a little bit about the lessons

00:15:58,959 --> 00:16:02,240
learned in

00:16:00,000 --> 00:16:04,079
in extending the security model and also

00:16:02,240 --> 00:16:06,839
kind of our journey of

00:16:04,079 --> 00:16:07,880
uh trying to follow the security best

00:16:06,839 --> 00:16:11,070
practices

00:16:07,880 --> 00:16:11,070
[Music]

00:16:12,240 --> 00:16:16,000
so cassandra has become a go-to data

00:16:15,600 --> 00:16:17,920
store

00:16:16,000 --> 00:16:20,000
in the way that relational databases

00:16:17,920 --> 00:16:22,000
used to be and obviously that makes it a

00:16:20,000 --> 00:16:24,959
target for bad actors

00:16:22,000 --> 00:16:26,639
uh at the risk of being redundant i have

00:16:24,959 --> 00:16:27,199
to also state that i'm not a security

00:16:26,639 --> 00:16:29,279
expert

00:16:27,199 --> 00:16:30,800
but i really wanted to put on my

00:16:29,279 --> 00:16:32,160
community hat and

00:16:30,800 --> 00:16:34,160
share about the experience of

00:16:32,160 --> 00:16:36,639
implementing all this stuff and

00:16:34,160 --> 00:16:40,240
my my own journey and just attempting to

00:16:36,639 --> 00:16:40,240
follow the security best practices

00:16:42,320 --> 00:16:46,480
so i i'd be remiss in in talking about

00:16:45,120 --> 00:16:50,399
security

00:16:46,480 --> 00:16:52,480
basic otherwise if uh i didn't mention

00:16:50,399 --> 00:16:54,560
some of the things that can be missed

00:16:52,480 --> 00:16:56,240
and the joy of standing a cluster up for

00:16:54,560 --> 00:16:58,480
the first time

00:16:56,240 --> 00:16:59,519
so i think an important thing about

00:16:58,480 --> 00:17:02,639
cassandra is that

00:16:59,519 --> 00:17:04,720
the cassandra is open by default and

00:17:02,639 --> 00:17:06,319
this was a decision that was made very

00:17:04,720 --> 00:17:10,079
very deliberately

00:17:06,319 --> 00:17:11,839
uh basically this is done to

00:17:10,079 --> 00:17:13,760
simplify the process of nodes

00:17:11,839 --> 00:17:16,240
discovering one another

00:17:13,760 --> 00:17:19,280
to make the initial troubleshooting of a

00:17:16,240 --> 00:17:22,559
bootstrapping cluster more convenient

00:17:19,280 --> 00:17:24,240
it and it works really well for these

00:17:22,559 --> 00:17:26,000
purposes but it's one of those things

00:17:24,240 --> 00:17:28,480
that uh

00:17:26,000 --> 00:17:29,840
really before a server goes to

00:17:28,480 --> 00:17:33,600
production before you actually

00:17:29,840 --> 00:17:35,600
put data that you really want in there

00:17:33,600 --> 00:17:38,080
it creates some some work that needs to

00:17:35,600 --> 00:17:40,480
be done in order to lock things down

00:17:38,080 --> 00:17:41,600
so here here's the probably the main

00:17:40,480 --> 00:17:44,799
items

00:17:41,600 --> 00:17:47,280
that uh do need to be locked down

00:17:44,799 --> 00:17:48,000
before it can go to production so the

00:17:47,280 --> 00:17:50,080
first one is

00:17:48,000 --> 00:17:51,039
clients aren't authenticated by default

00:17:50,080 --> 00:17:53,039
um

00:17:51,039 --> 00:17:54,400
anyone can do anything there's no role

00:17:53,039 --> 00:17:57,200
or user that's

00:17:54,400 --> 00:17:59,679
that's tracked obviously that can be

00:17:57,200 --> 00:18:01,520
rectified pretty easily you can use the

00:17:59,679 --> 00:18:03,280
authentication mechanism that that

00:18:01,520 --> 00:18:06,160
exists out of the box but it does take a

00:18:03,280 --> 00:18:06,160
little bit of doing

00:18:06,640 --> 00:18:10,880
internet communication is open and this

00:18:09,039 --> 00:18:14,400
is something that

00:18:10,880 --> 00:18:16,880
can be easy to overlook so essentially

00:18:14,400 --> 00:18:19,120
the nodes all gossip with one another

00:18:16,880 --> 00:18:20,880
there are a variety of features that are

00:18:19,120 --> 00:18:23,360
available out of the box to

00:18:20,880 --> 00:18:24,960
to lock this down you can have the two

00:18:23,360 --> 00:18:27,360
notes be encrypted

00:18:24,960 --> 00:18:29,440
you can have the nodes communicate and

00:18:27,360 --> 00:18:30,880
mutually authenticate themselves

00:18:29,440 --> 00:18:34,320
uh those are all things that you should

00:18:30,880 --> 00:18:36,960
do prior to it prior to it going live

00:18:34,320 --> 00:18:38,559
jmx is open on the local machine meaning

00:18:36,960 --> 00:18:40,240
that there is no authentication

00:18:38,559 --> 00:18:43,120
for jmx though though it's only

00:18:40,240 --> 00:18:45,760
accessible via the local machine

00:18:43,120 --> 00:18:47,440
you can change this to support the same

00:18:45,760 --> 00:18:49,919
same

00:18:47,440 --> 00:18:50,480
to support authentication mechanisms and

00:18:49,919 --> 00:18:52,480
ssl

00:18:50,480 --> 00:18:54,640
is turned off everywhere so the pipes

00:18:52,480 --> 00:18:56,720
are not encrypted

00:18:54,640 --> 00:18:57,840
right obviously we we want to turn that

00:18:56,720 --> 00:19:00,080
on

00:18:57,840 --> 00:19:02,000
so for this part of the talk i'd like to

00:19:00,080 --> 00:19:06,400
focus primarily on

00:19:02,000 --> 00:19:09,280
client and user authentication

00:19:06,400 --> 00:19:10,320
uh the client authentication that you

00:19:09,280 --> 00:19:14,160
get out of the box

00:19:10,320 --> 00:19:16,559
is pretty much a simple plain text

00:19:14,160 --> 00:19:18,400
authentication so the user submits a

00:19:16,559 --> 00:19:21,840
password in plain text

00:19:18,400 --> 00:19:23,919
it's computed with assaults and uh

00:19:21,840 --> 00:19:25,039
a hash crypto hash is generated and then

00:19:23,919 --> 00:19:28,960
it compares the hash

00:19:25,039 --> 00:19:31,360
against what's present in the tables uh

00:19:28,960 --> 00:19:32,080
and this may seem a little bit limiting

00:19:31,360 --> 00:19:35,039
and

00:19:32,080 --> 00:19:36,880
it may seem like this is a very basic

00:19:35,039 --> 00:19:38,720
off

00:19:36,880 --> 00:19:40,640
now like above though this was a

00:19:38,720 --> 00:19:42,480
deliberate cassandra design decision

00:19:40,640 --> 00:19:44,080
uh rather than clutter the core logic

00:19:42,480 --> 00:19:46,080
with lots of different kinds of

00:19:44,080 --> 00:19:47,120
security integrations the choice was

00:19:46,080 --> 00:19:49,760
made to

00:19:47,120 --> 00:19:52,480
to make the security highly extensible

00:19:49,760 --> 00:19:55,200
uh just as we saw from the cb4 work

00:19:52,480 --> 00:19:56,080
right to allow us to like extend it to

00:19:55,200 --> 00:19:59,360
whatever

00:19:56,080 --> 00:20:02,240
security protocol that we want to

00:19:59,360 --> 00:20:04,799
chain into the system uh i'd almost

00:20:02,240 --> 00:20:07,440
consider this to be a best practice

00:20:04,799 --> 00:20:08,400
uh to extend this where possible

00:20:07,440 --> 00:20:10,159
especially

00:20:08,400 --> 00:20:13,039
to try to integrate this with your

00:20:10,159 --> 00:20:15,039
existing security

00:20:13,039 --> 00:20:17,120
okay so it's all well and good to say

00:20:15,039 --> 00:20:18,400
that it's a good idea that we want an

00:20:17,120 --> 00:20:21,120
extension

00:20:18,400 --> 00:20:22,240
i think an important question is what is

00:20:21,120 --> 00:20:24,480
it that we want out of

00:20:22,240 --> 00:20:26,159
an extension if we choose to go down

00:20:24,480 --> 00:20:29,039
this path

00:20:26,159 --> 00:20:30,000
well if you look at these two points you

00:20:29,039 --> 00:20:32,080
can see there's

00:20:30,000 --> 00:20:33,200
the first two points are all about

00:20:32,080 --> 00:20:34,880
inconvenience and

00:20:33,200 --> 00:20:36,559
inconvenience and security breeds

00:20:34,880 --> 00:20:39,520
security problems

00:20:36,559 --> 00:20:41,360
right uh in the first case we want an

00:20:39,520 --> 00:20:42,400
extension to help us centrally manage

00:20:41,360 --> 00:20:44,960
users

00:20:42,400 --> 00:20:47,360
so this is to make things convenient for

00:20:44,960 --> 00:20:49,760
ourselves this assetment

00:20:47,360 --> 00:20:51,919
it's very convenient if we have one

00:20:49,760 --> 00:20:55,120
source of truth for all users

00:20:51,919 --> 00:20:56,720
because that means that there's less

00:20:55,120 --> 00:20:59,679
problems of

00:20:56,720 --> 00:21:00,960
when a user leaves our organization or

00:20:59,679 --> 00:21:03,039
enterprise

00:21:00,960 --> 00:21:04,640
we don't have to go around and and chase

00:21:03,039 --> 00:21:07,679
all the business services that they

00:21:04,640 --> 00:21:09,440
had access to and invalidate them right

00:21:07,679 --> 00:21:10,320
if we do that kind of thing manually not

00:21:09,440 --> 00:21:11,840
only is it

00:21:10,320 --> 00:21:14,320
additional workload but it's a thing

00:21:11,840 --> 00:21:16,720
that we can forget to do

00:21:14,320 --> 00:21:18,240
uh yeah we're very clever assist admins

00:21:16,720 --> 00:21:19,039
and we have an integrated security

00:21:18,240 --> 00:21:21,120
product

00:21:19,039 --> 00:21:23,440
we can even tie this to a meta directory

00:21:21,120 --> 00:21:26,080
of users to even reduce the

00:21:23,440 --> 00:21:26,720
the authentication loads still more so

00:21:26,080 --> 00:21:28,799
like when

00:21:26,720 --> 00:21:30,640
a user joins a company or an

00:21:28,799 --> 00:21:32,240
organization they

00:21:30,640 --> 00:21:33,840
all sorts of stuff automatically

00:21:32,240 --> 00:21:37,360
populates to the

00:21:33,840 --> 00:21:39,280
to uh our user repo and then

00:21:37,360 --> 00:21:41,760
they all automatically get

00:21:39,280 --> 00:21:45,200
authentication mechanisms

00:21:41,760 --> 00:21:46,400
and that's terrific another thing we

00:21:45,200 --> 00:21:48,159
want from the extension is

00:21:46,400 --> 00:21:51,200
we don't want to make things

00:21:48,159 --> 00:21:54,559
inconvenience for our users

00:21:51,200 --> 00:21:57,840
right we really don't want to make users

00:21:54,559 --> 00:21:58,880
have have to juggle around new accounts

00:21:57,840 --> 00:22:01,600
right and this is

00:21:58,880 --> 00:22:02,720
this should be a core a core

00:22:01,600 --> 00:22:04,400
consideration for

00:22:02,720 --> 00:22:06,960
any time we're thinking about security

00:22:04,400 --> 00:22:07,840
right if we make things inconvenient for

00:22:06,960 --> 00:22:09,840
users

00:22:07,840 --> 00:22:11,200
users will look for ways to circumvent

00:22:09,840 --> 00:22:13,440
security

00:22:11,200 --> 00:22:14,400
and that's just a fact like everybody

00:22:13,440 --> 00:22:17,679
knows the story

00:22:14,400 --> 00:22:19,840
of if i have a if i have a door

00:22:17,679 --> 00:22:20,880
if i have a door that my users need to

00:22:19,840 --> 00:22:23,760
access a lot

00:22:20,880 --> 00:22:25,039
and that door has a 10 digit code and

00:22:23,760 --> 00:22:28,240
it's a locked vault door

00:22:25,039 --> 00:22:30,080
right people will prop that door open

00:22:28,240 --> 00:22:31,840
people will write the code right next to

00:22:30,080 --> 00:22:33,360
the right next to the keypad for the

00:22:31,840 --> 00:22:35,520
door

00:22:33,360 --> 00:22:37,039
so in the same vein we really don't want

00:22:35,520 --> 00:22:38,960
users juggling accounts

00:22:37,039 --> 00:22:40,320
if we make them have to remember a bunch

00:22:38,960 --> 00:22:41,520
of different accounts and a bunch of

00:22:40,320 --> 00:22:42,080
different passwords they'll do things

00:22:41,520 --> 00:22:45,200
like

00:22:42,080 --> 00:22:46,880
write it next to their desk um they'll

00:22:45,200 --> 00:22:47,440
use the same password everywhere and

00:22:46,880 --> 00:22:49,200
that kind of

00:22:47,440 --> 00:22:51,760
weakens the security of that password

00:22:49,200 --> 00:22:53,280
because there's multiple

00:22:51,760 --> 00:22:54,880
multiple places where it can be attacked

00:22:53,280 --> 00:22:56,400
multiple surface areas where it can be

00:22:54,880 --> 00:22:58,960
attacked

00:22:56,400 --> 00:23:00,240
and ideally we want solutions that send

00:22:58,960 --> 00:23:01,600
a credential

00:23:00,240 --> 00:23:03,360
that don't send the credential but

00:23:01,600 --> 00:23:06,880
rather they send the proof

00:23:03,360 --> 00:23:08,159
of a credential and if we do things in

00:23:06,880 --> 00:23:10,159
that manner then

00:23:08,159 --> 00:23:11,840
we can actually assign a limited time

00:23:10,159 --> 00:23:15,200
frame to that proof

00:23:11,840 --> 00:23:16,080
so that we can uh we can lessen the

00:23:15,200 --> 00:23:17,840
impact of

00:23:16,080 --> 00:23:19,360
that channel being compromised in any

00:23:17,840 --> 00:23:22,480
way

00:23:19,360 --> 00:23:25,039
now of course these desires aren't new

00:23:22,480 --> 00:23:27,600
lots of systems that are designed for

00:23:25,039 --> 00:23:29,760
the enterprise solve these problems

00:23:27,600 --> 00:23:32,480
so a good question is how can we learn

00:23:29,760 --> 00:23:32,480
from their example

00:23:32,640 --> 00:23:38,080
so typically in an enterprise uh

00:23:36,400 --> 00:23:40,159
we generally already have security

00:23:38,080 --> 00:23:43,360
products of some kind

00:23:40,159 --> 00:23:44,240
now the real dream for security in an

00:23:43,360 --> 00:23:46,880
enterprise

00:23:44,240 --> 00:23:48,799
is that users log in at the beginning of

00:23:46,880 --> 00:23:51,039
the day

00:23:48,799 --> 00:23:52,400
and then they just they can access

00:23:51,039 --> 00:23:54,240
anything that they need to access

00:23:52,400 --> 00:23:57,360
without worrying about security again

00:23:54,240 --> 00:23:57,360
until the following day

00:23:57,919 --> 00:24:02,240
so one of the more common uh ways that

00:24:01,279 --> 00:24:05,600
this is set up

00:24:02,240 --> 00:24:07,919
is the idea of a claim system

00:24:05,600 --> 00:24:09,679
so this is kind of an abstraction of a

00:24:07,919 --> 00:24:12,799
scheme that a lot of different

00:24:09,679 --> 00:24:15,600
use security protocols follow

00:24:12,799 --> 00:24:18,080
okay and here we have three three basic

00:24:15,600 --> 00:24:20,240
actors in a claim system right we have

00:24:18,080 --> 00:24:21,200
the user who wants access to something

00:24:20,240 --> 00:24:24,000
we have a

00:24:21,200 --> 00:24:25,279
business service like in this case i'll

00:24:24,000 --> 00:24:28,000
say cassandra

00:24:25,279 --> 00:24:28,559
and then we have a service whose sole

00:24:28,000 --> 00:24:31,840
job

00:24:28,559 --> 00:24:34,640
is to keep track of

00:24:31,840 --> 00:24:36,559
identities of users and we call this the

00:24:34,640 --> 00:24:38,720
identity provider

00:24:36,559 --> 00:24:40,559
and the identity provider is a

00:24:38,720 --> 00:24:42,960
repository for

00:24:40,559 --> 00:24:47,039
user information and specifically for

00:24:42,960 --> 00:24:49,360
user authentication

00:24:47,039 --> 00:24:51,520
now cassandra as a service is interested

00:24:49,360 --> 00:24:53,520
in this information but

00:24:51,520 --> 00:24:55,120
it may have additional data that it

00:24:53,520 --> 00:24:58,240
wants to add like

00:24:55,120 --> 00:25:01,450
it wants to add its own policies uh

00:24:58,240 --> 00:25:02,720
its own auditing that kind of thing

00:25:01,450 --> 00:25:04,400
[Music]

00:25:02,720 --> 00:25:06,400
so generally the first step in an

00:25:04,400 --> 00:25:07,919
authentication mechanism is that a user

00:25:06,400 --> 00:25:08,960
authenticates against an identity

00:25:07,919 --> 00:25:11,760
provider

00:25:08,960 --> 00:25:12,559
and typically what happens is they they

00:25:11,760 --> 00:25:15,840
get a claim

00:25:12,559 --> 00:25:18,400
back and the claim is essentially proof

00:25:15,840 --> 00:25:20,000
that they've been authenticated it's it

00:25:18,400 --> 00:25:22,720
usually has a number of

00:25:20,000 --> 00:25:25,360
qualities to it uh it contains

00:25:22,720 --> 00:25:27,760
additional data about a user

00:25:25,360 --> 00:25:28,480
so that services can interrogate that

00:25:27,760 --> 00:25:31,840
and

00:25:28,480 --> 00:25:33,360
figure things out it contains

00:25:31,840 --> 00:25:36,640
a bit of data that's protected by

00:25:33,360 --> 00:25:39,679
ciphers in signing and or signing

00:25:36,640 --> 00:25:41,120
and this gives us proof that

00:25:39,679 --> 00:25:43,440
this gives us proof that it hasn't been

00:25:41,120 --> 00:25:45,900
tampered with and that the idp is

00:25:43,440 --> 00:25:47,279
actually signed off on it

00:25:45,900 --> 00:25:49,840
[Music]

00:25:47,279 --> 00:25:50,320
and this claim is also as i mentioned

00:25:49,840 --> 00:25:52,720
before

00:25:50,320 --> 00:25:56,159
given a timestamp so it has a limited

00:25:52,720 --> 00:25:58,720
range of operation

00:25:56,159 --> 00:25:59,760
now after a user has that claim in his

00:25:58,720 --> 00:26:01,360
in their hand

00:25:59,760 --> 00:26:04,159
they call cassandra and they send that

00:26:01,360 --> 00:26:06,320
claim in an authentication request

00:26:04,159 --> 00:26:08,080
and in this case we'll we will imagine

00:26:06,320 --> 00:26:10,320
that cassandra has been extended so that

00:26:08,080 --> 00:26:12,480
it can make sense out of that claim

00:26:10,320 --> 00:26:14,559
okay and cassandra interrogates the

00:26:12,480 --> 00:26:16,320
claim examines it

00:26:14,559 --> 00:26:17,679
figures out that the identity provider

00:26:16,320 --> 00:26:20,000
is uh

00:26:17,679 --> 00:26:21,039
has signed off on this particular user

00:26:20,000 --> 00:26:24,240
opens a session

00:26:21,039 --> 00:26:26,640
and away we go now a lot of ways this

00:26:24,240 --> 00:26:27,679
this claim system is very sim this is

00:26:26,640 --> 00:26:30,400
similar

00:26:27,679 --> 00:26:31,200
and in physical security right like a

00:26:30,400 --> 00:26:34,080
passport

00:26:31,200 --> 00:26:34,640
is a demonstration of this i i go to the

00:26:34,080 --> 00:26:37,679
government

00:26:34,640 --> 00:26:40,080
i i prove who i am and the government

00:26:37,679 --> 00:26:43,760
issues me a document that i can then

00:26:40,080 --> 00:26:44,799
hand off to uh anyone who wants to know

00:26:43,760 --> 00:26:46,159
if i am who i

00:26:44,799 --> 00:26:48,559
am and then just by looking at the

00:26:46,159 --> 00:26:51,679
document they can tell

00:26:48,559 --> 00:26:53,279
whether or not the government has signed

00:26:51,679 --> 00:26:55,520
off on my identity

00:26:53,279 --> 00:26:56,880
uh if you want a more specific or

00:26:55,520 --> 00:26:59,120
localized example you can think of a

00:26:56,880 --> 00:27:02,080
boarding pass right like a check-in

00:26:59,120 --> 00:27:03,679
when i go to an airport i check in and

00:27:02,080 --> 00:27:04,480
immediately and i get a boarding pass

00:27:03,679 --> 00:27:06,799
when i actually

00:27:04,480 --> 00:27:07,760
board the plane they look at that

00:27:06,799 --> 00:27:09,919
boarding pass

00:27:07,760 --> 00:27:10,830
and that tells them that i've been

00:27:09,919 --> 00:27:12,400
authenticated

00:27:10,830 --> 00:27:14,799
[Music]

00:27:12,400 --> 00:27:15,840
now i don't want to say that this is how

00:27:14,799 --> 00:27:18,399
all of these schemes

00:27:15,840 --> 00:27:20,799
absolutely work in terms of the dance of

00:27:18,399 --> 00:27:23,679
messages and claims

00:27:20,799 --> 00:27:24,640
many systems will cause the business

00:27:23,679 --> 00:27:26,799
service to

00:27:24,640 --> 00:27:29,520
call the identity provider directly or

00:27:26,799 --> 00:27:29,520
they'll make

00:27:29,600 --> 00:27:33,200
allowances for that to happen

00:27:30,900 --> 00:27:34,799
[Music]

00:27:33,200 --> 00:27:37,440
saml for example allows us to be

00:27:34,799 --> 00:27:40,240
initiated by either talking to the

00:27:37,440 --> 00:27:41,840
talking to the server and having it

00:27:40,240 --> 00:27:44,640
start this claim process or

00:27:41,840 --> 00:27:45,760
or talking to the identity provider so

00:27:44,640 --> 00:27:48,159
there's a lot of wrinkles

00:27:45,760 --> 00:27:49,039
but the clear takeaway for all of these

00:27:48,159 --> 00:27:51,120
things is that

00:27:49,039 --> 00:27:52,799
we have business services and they rely

00:27:51,120 --> 00:27:55,679
on an outside authenticator

00:27:52,799 --> 00:27:57,039
where users are centrally managed proof

00:27:55,679 --> 00:27:59,039
of credentials are sent

00:27:57,039 --> 00:28:00,080
not necessarily credentials or at least

00:27:59,039 --> 00:28:02,640
the scope

00:28:00,080 --> 00:28:04,000
of how those credentials is sent are uh

00:28:02,640 --> 00:28:05,840
narrowed

00:28:04,000 --> 00:28:08,000
the user isn't required to have any

00:28:05,840 --> 00:28:10,640
extra accounts

00:28:08,000 --> 00:28:12,320
right and all of these all of these

00:28:10,640 --> 00:28:16,559
interactions are

00:28:12,320 --> 00:28:20,240
bound in time

00:28:16,559 --> 00:28:21,360
okay so if you're lucky plugins already

00:28:20,240 --> 00:28:23,039
exist for

00:28:21,360 --> 00:28:24,640
for the security products that you're

00:28:23,039 --> 00:28:27,120
using in your organization

00:28:24,640 --> 00:28:28,480
uh they're plugins that exist for ldap

00:28:27,120 --> 00:28:30,320
for kerberos

00:28:28,480 --> 00:28:31,840
uh for the most part these server

00:28:30,320 --> 00:28:35,440
plugins use the

00:28:31,840 --> 00:28:36,960
intended extension method so they

00:28:35,440 --> 00:28:39,039
color inside the lines the way that

00:28:36,960 --> 00:28:41,679
cassandra wants to be extended for the

00:28:39,039 --> 00:28:44,880
server side

00:28:41,679 --> 00:28:48,000
okay so what's involved in in installing

00:28:44,880 --> 00:28:51,039
a server-side plug-in of this type

00:28:48,000 --> 00:28:53,120
well you can see here four basic steps

00:28:51,039 --> 00:28:54,720
the first step varies a lot from

00:28:53,120 --> 00:28:55,200
implementation to implementation which

00:28:54,720 --> 00:28:57,840
is

00:28:55,200 --> 00:28:58,799
establishing a trust relationship right

00:28:57,840 --> 00:29:00,159
so this can be

00:28:58,799 --> 00:29:01,919
different depending on which security

00:29:00,159 --> 00:29:02,960
protocol you're using if you're using

00:29:01,919 --> 00:29:04,159
kerberos there's

00:29:02,960 --> 00:29:05,840
a lot of things that you need to do in

00:29:04,159 --> 00:29:06,559
order to generate a trust store and

00:29:05,840 --> 00:29:11,120
kerberize

00:29:06,559 --> 00:29:13,600
nodes um samwell's different

00:29:11,120 --> 00:29:15,120
but the the remaining three are very

00:29:13,600 --> 00:29:18,159
much the same

00:29:15,120 --> 00:29:19,440
okay so the next step when you've

00:29:18,159 --> 00:29:21,600
after you've established a trust

00:29:19,440 --> 00:29:23,760
relationship with the node and the

00:29:21,600 --> 00:29:25,679
security product of your choice

00:29:23,760 --> 00:29:27,200
generally speaking you get a binary in

00:29:25,679 --> 00:29:30,080
this case a jar

00:29:27,200 --> 00:29:32,880
right little java binary you copy the

00:29:30,080 --> 00:29:35,600
jar to a node

00:29:32,880 --> 00:29:36,880
and then you add it to the class path

00:29:35,600 --> 00:29:39,360
somehow

00:29:36,880 --> 00:29:41,200
so this could be an exported variable it

00:29:39,360 --> 00:29:43,120
can be a command line argument

00:29:41,200 --> 00:29:44,880
there's a cassandra lib directory that

00:29:43,120 --> 00:29:48,640
you can copy things into

00:29:44,880 --> 00:29:51,919
where it will automatically pick it up

00:29:48,640 --> 00:29:53,520
uh you edit the cassandra.yaml file

00:29:51,919 --> 00:29:55,120
the basis of all configuration

00:29:53,520 --> 00:29:56,880
everywhere and

00:29:55,120 --> 00:29:58,720
in this case i have an example here

00:29:56,880 --> 00:30:00,399
where i'm specifying the fully

00:29:58,720 --> 00:30:02,799
canonicalized name of a different

00:30:00,399 --> 00:30:05,120
authentication method and then you

00:30:02,799 --> 00:30:07,360
restart the node

00:30:05,120 --> 00:30:09,279
so the last three very much look like a

00:30:07,360 --> 00:30:10,880
deployment to a node

00:30:09,279 --> 00:30:12,399
and as such that means that you can do

00:30:10,880 --> 00:30:14,399
this in a rolling fashion

00:30:12,399 --> 00:30:15,600
meaning you can take you can remove a

00:30:14,399 --> 00:30:17,120
node

00:30:15,600 --> 00:30:18,640
apply these changes and then bring the

00:30:17,120 --> 00:30:20,960
node back up

00:30:18,640 --> 00:30:22,159
uh you can also choose to take a

00:30:20,960 --> 00:30:24,480
complete outage

00:30:22,159 --> 00:30:26,159
of the cassandra cluster as a whole so

00:30:24,480 --> 00:30:29,360
you can put everything down and apply

00:30:26,159 --> 00:30:32,960
these changes and bring it back up

00:30:29,360 --> 00:30:36,080
uh which one you pick will depend a bit

00:30:32,960 --> 00:30:38,559
on the uh authentication method and

00:30:36,080 --> 00:30:39,440
the experience that your concerns that

00:30:38,559 --> 00:30:40,960
clients may have

00:30:39,440 --> 00:30:43,760
right so if you change the

00:30:40,960 --> 00:30:46,240
authentication method midstream they may

00:30:43,760 --> 00:30:47,840
a client that is logged in through say

00:30:46,240 --> 00:30:49,840
plain text authentication

00:30:47,840 --> 00:30:52,320
may suddenly lose access depending on

00:30:49,840 --> 00:30:54,640
which node that they talk to

00:30:52,320 --> 00:30:55,679
so it's one of those things that bears

00:30:54,640 --> 00:30:59,679
consideration

00:30:55,679 --> 00:31:00,640
uh also you if this is the first time

00:30:59,679 --> 00:31:03,279
you're setting up any kind of

00:31:00,640 --> 00:31:07,039
authentication you you generally have to

00:31:03,279 --> 00:31:10,159
alter the the system off key space

00:31:07,039 --> 00:31:12,159
uh replication settings

00:31:10,159 --> 00:31:14,640
right it's it's often a good first step

00:31:12,159 --> 00:31:15,360
to start with basic authentication and

00:31:14,640 --> 00:31:19,840
then

00:31:15,360 --> 00:31:19,840
move to something something more grand

00:31:20,000 --> 00:31:25,519
okay so here are some of the ways i was

00:31:23,360 --> 00:31:27,679
considering that we could potentially

00:31:25,519 --> 00:31:30,559
leverage the sig v4 work that

00:31:27,679 --> 00:31:31,279
derek had mentioned before so in this

00:31:30,559 --> 00:31:34,000
case we would

00:31:31,279 --> 00:31:36,159
have a some kind of 64 server plug-in

00:31:34,000 --> 00:31:39,120
that exists on the cassandra node

00:31:36,159 --> 00:31:40,399
and our client would initiate a sig v4

00:31:39,120 --> 00:31:42,720
communication

00:31:40,399 --> 00:31:45,279
uh in much the same way that derek had

00:31:42,720 --> 00:31:46,799
been chatting about before

00:31:45,279 --> 00:31:48,960
so the client in this case would

00:31:46,799 --> 00:31:51,840
actually have the

00:31:48,960 --> 00:31:53,039
a 64 plugin extension itself so there's

00:31:51,840 --> 00:31:55,519
a server side and a

00:31:53,039 --> 00:31:56,799
client side the client would initiate

00:31:55,519 --> 00:31:59,039
that 64

00:31:56,799 --> 00:32:00,880
connection and then cassandra would act

00:31:59,039 --> 00:32:01,679
very similarly to a proxy so it would

00:32:00,880 --> 00:32:04,159
take that

00:32:01,679 --> 00:32:04,960
and then it would pass that information

00:32:04,159 --> 00:32:08,240
to

00:32:04,960 --> 00:32:09,440
the aws secure token service as an

00:32:08,240 --> 00:32:12,240
example

00:32:09,440 --> 00:32:14,880
and the secure token service is a

00:32:12,240 --> 00:32:16,610
service that gives us access to

00:32:14,880 --> 00:32:18,240
data about i am roles and users

00:32:16,610 --> 00:32:21,840
[Music]

00:32:18,240 --> 00:32:22,799
so for making that call cassandra would

00:32:21,840 --> 00:32:24,720
then get

00:32:22,799 --> 00:32:26,799
the server-side plug-in rather would get

00:32:24,720 --> 00:32:30,000
the authentication info and would get

00:32:26,799 --> 00:32:32,960
the knots that is necessary for the next

00:32:30,000 --> 00:32:32,960
part of the communication

00:32:33,120 --> 00:32:36,399
and then in that case what would happen

00:32:34,559 --> 00:32:40,240
is it would send the nonce

00:32:36,399 --> 00:32:42,399
back to the client the client would then

00:32:40,240 --> 00:32:43,279
sign the response and creating that

00:32:42,399 --> 00:32:44,880
digest

00:32:43,279 --> 00:32:46,640
and it would send it to cassandra and

00:32:44,880 --> 00:32:50,320
then cassandra would use that to

00:32:46,640 --> 00:32:53,679
make a call to uh sts and say

00:32:50,320 --> 00:32:54,720
give me the caller info and at that

00:32:53,679 --> 00:32:57,279
point it would get

00:32:54,720 --> 00:32:58,240
details about the imuser which you could

00:32:57,279 --> 00:33:01,600
match

00:32:58,240 --> 00:33:01,600
internally to its own tables

00:33:02,159 --> 00:33:05,519
so in this particular case it works very

00:33:04,720 --> 00:33:07,919
much the way

00:33:05,519 --> 00:33:09,679
derek had talked about the client only

00:33:07,919 --> 00:33:13,279
has to worry about their

00:33:09,679 --> 00:33:14,720
particular i am role

00:33:13,279 --> 00:33:16,799
user credentials they don't have to

00:33:14,720 --> 00:33:20,399
worry about extra accounts

00:33:16,799 --> 00:33:24,320
because this is 64 this is all

00:33:20,399 --> 00:33:27,690
short term in a relationship and then

00:33:24,320 --> 00:33:30,399
we're centrally managed things in sts

00:33:27,690 --> 00:33:33,519
[Music]

00:33:30,399 --> 00:33:34,320
okay so there were there's some other

00:33:33,519 --> 00:33:37,200
ways that

00:33:34,320 --> 00:33:38,720
uh we as a community could consider

00:33:37,200 --> 00:33:41,760
enhancing security

00:33:38,720 --> 00:33:42,399
and here are just a few ideas so one

00:33:41,760 --> 00:33:44,240
notion

00:33:42,399 --> 00:33:45,679
that is very popular in relational

00:33:44,240 --> 00:33:49,360
databases

00:33:45,679 --> 00:33:51,600
is uh the idea of having

00:33:49,360 --> 00:33:54,320
enhanced privileges that come with a

00:33:51,600 --> 00:33:57,120
temporary account

00:33:54,320 --> 00:33:57,679
so you might imagine that a user needs

00:33:57,120 --> 00:34:01,279
to

00:33:57,679 --> 00:34:02,720
change make some kind of sensitive

00:34:01,279 --> 00:34:06,720
change to the database

00:34:02,720 --> 00:34:09,440
such as alter the schema in some way

00:34:06,720 --> 00:34:11,679
uh or insert table or insert data into a

00:34:09,440 --> 00:34:14,960
sensitive table

00:34:11,679 --> 00:34:17,919
so they have a we have a concept of

00:34:14,960 --> 00:34:19,280
elevating a rule so they go to some they

00:34:17,919 --> 00:34:22,399
go to some

00:34:19,280 --> 00:34:25,599
separate system

00:34:22,399 --> 00:34:26,960
and that system interrogates them using

00:34:25,599 --> 00:34:29,919
an identity provider

00:34:26,960 --> 00:34:30,639
and then essentially creates a temporary

00:34:29,919 --> 00:34:34,000
account

00:34:30,639 --> 00:34:35,679
in the cassandra system

00:34:34,000 --> 00:34:39,040
right and then that temporary account

00:34:35,679 --> 00:34:41,520
has a has a username and a password

00:34:39,040 --> 00:34:43,679
and the reason why this is this gets a

00:34:41,520 --> 00:34:44,720
lot of use in relational databases is

00:34:43,679 --> 00:34:46,159
because

00:34:44,720 --> 00:34:48,159
there's many things about it that are

00:34:46,159 --> 00:34:49,839
convenient the first one is that the

00:34:48,159 --> 00:34:52,320
user doesn't have these privileges

00:34:49,839 --> 00:34:53,520
all the time they have to use them for a

00:34:52,320 --> 00:34:55,919
very specific

00:34:53,520 --> 00:34:59,200
they have to initiate this exception

00:34:55,919 --> 00:35:02,560
workflow in order to get them

00:34:59,200 --> 00:35:05,839
the user also has to juggle a password

00:35:02,560 --> 00:35:09,119
and an account but it's a temporary one

00:35:05,839 --> 00:35:11,119
so it's only for the job at hand

00:35:09,119 --> 00:35:13,119
the other real benefit is that that

00:35:11,119 --> 00:35:16,320
temporary account can be tracked

00:35:13,119 --> 00:35:19,359
with a jira or an issue and then later

00:35:16,320 --> 00:35:20,160
when looking at auditing we know every

00:35:19,359 --> 00:35:23,680
place that that

00:35:20,160 --> 00:35:25,610
account is touched we know that that is

00:35:23,680 --> 00:35:26,960
was used as part of

00:35:25,610 --> 00:35:30,079
[Music]

00:35:26,960 --> 00:35:31,280
resolving that particular issue so it's

00:35:30,079 --> 00:35:33,760
great for auditing

00:35:31,280 --> 00:35:34,960
and for keeping track of all of the

00:35:33,760 --> 00:35:37,520
operations

00:35:34,960 --> 00:35:39,680
that happen as a result of working on a

00:35:37,520 --> 00:35:43,599
particular

00:35:39,680 --> 00:35:44,560
problem more often plugins would be

00:35:43,599 --> 00:35:46,560
great to

00:35:44,560 --> 00:35:47,760
enhance the ability that we have of

00:35:46,560 --> 00:35:51,599
integrating to

00:35:47,760 --> 00:35:54,720
security products uh off z plugins

00:35:51,599 --> 00:35:56,800
this is the authy or authorization

00:35:54,720 --> 00:35:58,320
stuff can be extended in much the same

00:35:56,800 --> 00:36:02,320
way as

00:35:58,320 --> 00:36:03,440
the uh off end side of the house can be

00:36:02,320 --> 00:36:05,760
and there are a lot of different

00:36:03,440 --> 00:36:09,280
security products that have

00:36:05,760 --> 00:36:11,280
general policy mechanisms

00:36:09,280 --> 00:36:13,599
that could be exploited so you could

00:36:11,280 --> 00:36:18,000
have more nuanced security potentially

00:36:13,599 --> 00:36:20,800
anyway these are some thoughts um

00:36:18,000 --> 00:36:21,200
i think that clear takeaway from this

00:36:20,800 --> 00:36:25,359
talk

00:36:21,200 --> 00:36:27,680
is uh we've kind of shared how we do

00:36:25,359 --> 00:36:28,800
how we we went about doing the 6v4

00:36:27,680 --> 00:36:30,720
support

00:36:28,800 --> 00:36:33,280
but the big thing about it was that

00:36:30,720 --> 00:36:35,760
extending the off in cassandra was easy

00:36:33,280 --> 00:36:39,359
and straightforward it was it's meant to

00:36:35,760 --> 00:36:42,000
be extended it's an extension point

00:36:39,359 --> 00:36:42,640
uh all any issues that we had were all

00:36:42,000 --> 00:36:45,599
in

00:36:42,640 --> 00:36:47,200
attempting to implement that security

00:36:45,599 --> 00:36:50,240
protocol they weren't in

00:36:47,200 --> 00:36:52,240
uh trying to get cassandra to

00:36:50,240 --> 00:36:53,359
cassandra or the cassandra driver to be

00:36:52,240 --> 00:36:57,680
able to

00:36:53,359 --> 00:36:59,680
adopt the extension point

00:36:57,680 --> 00:37:01,359
again i'd be remiss if i didn't like

00:36:59,680 --> 00:37:04,240
call out

00:37:01,359 --> 00:37:05,920
the obvious the obvious stuff that comes

00:37:04,240 --> 00:37:07,280
with open by default which is that we

00:37:05,920 --> 00:37:10,320
want to make sure that we lock down

00:37:07,280 --> 00:37:14,320
security for jmx and clients

00:37:10,320 --> 00:37:16,400
and internet communication and i think

00:37:14,320 --> 00:37:18,560
something that really benefits our users

00:37:16,400 --> 00:37:21,839
is when we find

00:37:18,560 --> 00:37:23,520
ways to integrate with the existing

00:37:21,839 --> 00:37:24,480
security to make things more convenient

00:37:23,520 --> 00:37:27,599
for them

00:37:24,480 --> 00:37:27,599
and also for ourselves

00:37:29,200 --> 00:37:33,119
uh hopefully this talk has sparked some

00:37:31,440 --> 00:37:35,680
interest

00:37:33,119 --> 00:37:36,800
maybe encourage you to think a little

00:37:35,680 --> 00:37:38,320
bit more about the security of your

00:37:36,800 --> 00:37:40,079
clusters

00:37:38,320 --> 00:37:41,359
if you have any thoughts about this or

00:37:40,079 --> 00:37:43,280
any questions

00:37:41,359 --> 00:37:45,440
that you'd have and any questions that

00:37:43,280 --> 00:37:48,720
we don't have time to address here

00:37:45,440 --> 00:37:50,560
we'd love to hear from you we monitor

00:37:48,720 --> 00:37:52,240
the dev email list we're monitoring

00:37:50,560 --> 00:37:54,880
slack uh

00:37:52,240 --> 00:37:56,320
derek and i are available on those those

00:37:54,880 --> 00:37:57,680
forms if you want to like

00:37:56,320 --> 00:37:59,440
if you want to send us an im through

00:37:57,680 --> 00:38:01,119
slack we'd love to hear from you

00:37:59,440 --> 00:38:03,440
you can also send us an email with these

00:38:01,119 --> 00:38:06,960
addresses

00:38:03,440 --> 00:38:06,960
and we welcome any conversation

00:38:07,200 --> 00:38:12,720
okay uh thanks uh we really appreciate

00:38:09,920 --> 00:38:17,200
the opportunity to share our experience

00:38:12,720 --> 00:38:17,200
i think that steve is

00:38:17,280 --> 00:38:25,350
now going to help us answer any

00:38:20,620 --> 00:38:25,350
[Music]

00:38:30,839 --> 00:38:33,839
questions

00:38:36,240 --> 00:38:47,839
do we have time for questions

00:39:02,800 --> 00:39:05,920
have we gone over time

00:39:11,520 --> 00:39:16,240
i think the sessions are distinct uh

00:39:15,190 --> 00:39:19,599
[Music]

00:39:16,240 --> 00:39:21,359
so i uh nate will correct me if i'm

00:39:19,599 --> 00:39:22,800
wrong here but i think the session stays

00:39:21,359 --> 00:39:25,200
open and it's not going to impede the

00:39:22,800 --> 00:39:25,200
other one

00:39:27,680 --> 00:39:30,320
correct okay

00:39:33,119 --> 00:39:38,960
do you foresee a need to rate limit off

00:39:36,240 --> 00:39:40,079
have you implemented some form of rate

00:39:38,960 --> 00:39:43,839
limiting to avoid

00:39:40,079 --> 00:39:43,839
uh dos attacks

00:39:54,839 --> 00:39:57,839
okay

00:39:57,920 --> 00:40:01,440
how long until you put together a cep

00:39:59,839 --> 00:40:04,240
for critical changes

00:40:01,440 --> 00:40:05,280
that's an excellent that's a that's an

00:40:04,240 --> 00:40:08,400
excellent thought

00:40:05,280 --> 00:40:10,000
uh unfortunately i think actually i

00:40:08,400 --> 00:40:13,680
think that uh

00:40:10,000 --> 00:40:16,640
i personally am out of time um

00:40:13,680 --> 00:40:18,079
so why why don't we do this well like i

00:40:16,640 --> 00:40:19,280
said we we've given you our contact

00:40:18,079 --> 00:40:20,560
information we'd love to hear from you

00:40:19,280 --> 00:40:24,079
on slack we'd

00:40:20,560 --> 00:40:26,720
be happy to uh answer

00:40:24,079 --> 00:40:27,920
questions as best we can uh if we're not

00:40:26,720 --> 00:40:30,720
the right person we can

00:40:27,920 --> 00:40:31,280
we can hunt down the right people so i'm

00:40:30,720 --> 00:40:34,319
just gonna

00:40:31,280 --> 00:40:34,720
i'm just gonna close the session now all

00:40:34,319 --> 00:40:39,839
right

00:40:34,720 --> 00:40:39,839
thanks everybody

00:40:56,480 --> 00:40:58,560

YouTube URL: https://www.youtube.com/watch?v=8CKPipviAA4


