Title: Containerized Cassandra Cluster (CCC)
Publication date: 2020-10-21
Playlist: ApacheCon @Home 2020: Cassandra
Description: 
	Containerized Cassandra Cluster (CCC)
Stanislav Kelberg

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

Elegant and fully controllable Cassandra cluster for local testing and development. A modern and robust alternative to ccm (Cassandra Cluster Manager), taking advantage of containers, while keeping the full control of Cassandra configuration. This talk will demonstrate how to easily test locally against a cluster with production like features, for example: multi DC, SSL, Authentication etc.

Stan is a seasoned DevOps engineer who has worked for small startups and large enterprises like Deutsche Bank and Sky. Stan has been heavily involved with Cassandra and DSE in the last 6 years, 4 of which he has worked for digilalis.io
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:29,599 --> 00:00:34,000
cool

00:00:30,320 --> 00:00:35,760
i guess uh we can start zen so my name

00:00:34,000 --> 00:00:40,480
is uh stanislav kellberg

00:00:35,760 --> 00:00:43,520
and i work for a company digitalis io

00:00:40,480 --> 00:00:44,480
um we do a lot of cassandra managed

00:00:43,520 --> 00:00:48,000
services

00:00:44,480 --> 00:00:52,079
and we do a lot of devops automation

00:00:48,000 --> 00:00:53,120
to deliver the services and today i will

00:00:52,079 --> 00:00:56,160
be sharing

00:00:53,120 --> 00:01:00,160
some of our automation goodies

00:00:56,160 --> 00:01:03,440
for cassandra so what is this

00:01:00,160 --> 00:01:06,479
um this is a little but

00:01:03,440 --> 00:01:09,439
elegant and um

00:01:06,479 --> 00:01:12,080
fully controllable cassandra cluster

00:01:09,439 --> 00:01:15,920
which is deployed into containers

00:01:12,080 --> 00:01:19,680
it is used for mainly local testing

00:01:15,920 --> 00:01:23,360
and playing around you can say

00:01:19,680 --> 00:01:27,040
it is an alternative approach to

00:01:23,360 --> 00:01:27,680
a ccm if you worked with cassandra

00:01:27,040 --> 00:01:30,159
before

00:01:27,680 --> 00:01:32,079
you're probably familiar with this tool

00:01:30,159 --> 00:01:32,799
so it stands for cassandra cluster

00:01:32,079 --> 00:01:35,520
manager

00:01:32,799 --> 00:01:37,040
it's the tools it's been available for a

00:01:35,520 --> 00:01:39,920
long time now

00:01:37,040 --> 00:01:41,119
and it's written in python but it has a

00:01:39,920 --> 00:01:43,360
few dependencies

00:01:41,119 --> 00:01:46,000
and if you want to run a multi-node

00:01:43,360 --> 00:01:49,040
cluster you need to set up a few

00:01:46,000 --> 00:01:50,159
um interfaces and and do a little bit of

00:01:49,040 --> 00:01:54,000
exercise

00:01:50,159 --> 00:01:57,360
right and i think in the modern age

00:01:54,000 --> 00:02:00,640
with docker containers and

00:01:57,360 --> 00:02:03,360
environment around that and kubernetes

00:02:00,640 --> 00:02:04,399
and great environment around that uh you

00:02:03,360 --> 00:02:06,840
you can take

00:02:04,399 --> 00:02:08,000
a different approach a little bit more

00:02:06,840 --> 00:02:11,039
modern

00:02:08,000 --> 00:02:15,120
on to the current age right

00:02:11,039 --> 00:02:16,400
so yeah so this is for like quick and

00:02:15,120 --> 00:02:18,400
easy way

00:02:16,400 --> 00:02:19,520
and very important group reducible way

00:02:18,400 --> 00:02:22,080
uh to

00:02:19,520 --> 00:02:23,920
spin up a cassandra cluster but still

00:02:22,080 --> 00:02:26,879
have all the flexibility

00:02:23,920 --> 00:02:28,400
uh you want in a test environment all

00:02:26,879 --> 00:02:30,800
right so

00:02:28,400 --> 00:02:33,599
there won't be any magic that abstracts

00:02:30,800 --> 00:02:36,800
your way from actually doing

00:02:33,599 --> 00:02:40,080
want obviously uh this is

00:02:36,800 --> 00:02:43,200
not for production uh however

00:02:40,080 --> 00:02:46,239
saying that um you can totally run

00:02:43,200 --> 00:02:49,200
cassandra in containers in production

00:02:46,239 --> 00:02:50,480
uh by using like kubernetes as a

00:02:49,200 --> 00:02:52,480
scheduler or

00:02:50,480 --> 00:02:54,800
other schedulers as well uh it's

00:02:52,480 --> 00:02:58,000
definitely been done and it's

00:02:54,800 --> 00:03:01,680
already possible but it is um

00:02:58,000 --> 00:03:03,360
out of scope for this presentation

00:03:01,680 --> 00:03:05,519
uh because we just simply don't have

00:03:03,360 --> 00:03:08,720
time for this so we're just gonna focus

00:03:05,519 --> 00:03:12,000
on a little environment just uh

00:03:08,720 --> 00:03:14,080
to test your stuff all right so

00:03:12,000 --> 00:03:15,200
we're gonna base on the official docker

00:03:14,080 --> 00:03:18,319
image uh

00:03:15,200 --> 00:03:22,319
which is quite important so

00:03:18,319 --> 00:03:26,560
if you ever worked with docker hub

00:03:22,319 --> 00:03:26,560
before right um

00:03:26,720 --> 00:03:30,959
you probably seen that there are like

00:03:28,879 --> 00:03:34,480
official and unofficial images right

00:03:30,959 --> 00:03:37,920
and yeah non-official is just

00:03:34,480 --> 00:03:38,959
uh added by random guys and girls and

00:03:37,920 --> 00:03:39,519
you don't really know whether you can

00:03:38,959 --> 00:03:42,720
trust them

00:03:39,519 --> 00:03:44,799
or not official images are trusted and

00:03:42,720 --> 00:03:46,400
very importantly they're maintained so

00:03:44,799 --> 00:03:47,120
you don't have to maintain your own

00:03:46,400 --> 00:03:48,959
image

00:03:47,120 --> 00:03:50,640
i don't have to spend time on this and

00:03:48,959 --> 00:03:52,879
every time

00:03:50,640 --> 00:03:54,080
a new cassandra release comes out

00:03:52,879 --> 00:03:56,879
official image

00:03:54,080 --> 00:03:58,159
would be updated as well and also it is

00:03:56,879 --> 00:04:01,280
security scanned

00:03:58,159 --> 00:04:04,640
which is quite important as well right

00:04:01,280 --> 00:04:06,480
uh to orchestrate uh the

00:04:04,640 --> 00:04:08,640
cassandra containers and everything

00:04:06,480 --> 00:04:10,080
needed for that uh we will use docker

00:04:08,640 --> 00:04:12,799
composed

00:04:10,080 --> 00:04:13,519
uh we could have used kubernetes as well

00:04:12,799 --> 00:04:15,920
uh you

00:04:13,519 --> 00:04:18,000
actually can use kubernetes for local

00:04:15,920 --> 00:04:19,040
orchestration as well uh for example

00:04:18,000 --> 00:04:22,400
mini cube is a

00:04:19,040 --> 00:04:23,199
very popular tool uh but i did strive

00:04:22,400 --> 00:04:26,720
that

00:04:23,199 --> 00:04:30,400
approach and uh kubernetes configs are

00:04:26,720 --> 00:04:32,880
way more verbose and

00:04:30,400 --> 00:04:34,160
a bit more complex so kubernetes is a

00:04:32,880 --> 00:04:37,440
very advanced tool

00:04:34,160 --> 00:04:40,880
with much more capabilities but it's

00:04:37,440 --> 00:04:44,960
basically an overkill for this purpose

00:04:40,880 --> 00:04:47,520
also e if you would run mini cube

00:04:44,960 --> 00:04:49,440
you would have to run all the control

00:04:47,520 --> 00:04:50,400
plane components on your local machine

00:04:49,440 --> 00:04:53,280
uh which is

00:04:50,400 --> 00:04:55,919
quite a performance overhead as well so

00:04:53,280 --> 00:04:57,759
we're gonna uh stick with docker compose

00:04:55,919 --> 00:04:59,520
which is really straightforward and it

00:04:57,759 --> 00:05:02,080
looks uh really elegant and

00:04:59,520 --> 00:05:03,039
um out of all options i guess this is

00:05:02,080 --> 00:05:06,560
the best fit

00:05:03,039 --> 00:05:09,600
for for this approach

00:05:06,560 --> 00:05:10,160
right so we won't need to build or

00:05:09,600 --> 00:05:12,160
maintain

00:05:10,160 --> 00:05:14,080
our own image you don't need to change

00:05:12,160 --> 00:05:15,759
the official image

00:05:14,080 --> 00:05:17,520
you actually don't need to rebuild any

00:05:15,759 --> 00:05:21,360
images at all so

00:05:17,520 --> 00:05:22,000
during this presentation no docker files

00:05:21,360 --> 00:05:25,680
will be

00:05:22,000 --> 00:05:28,800
affected at all or harmed in any way

00:05:25,680 --> 00:05:31,919
but we still have all the flexibility

00:05:28,800 --> 00:05:34,960
to configure basically anything like

00:05:31,919 --> 00:05:38,000
anything uh you need

00:05:34,960 --> 00:05:40,800
uh how so we're gonna use a little hack

00:05:38,000 --> 00:05:42,320
right so it's it's quite easy really so

00:05:40,800 --> 00:05:44,560
basically we're gonna copy all the

00:05:42,320 --> 00:05:46,000
config files out of the cassandra docker

00:05:44,560 --> 00:05:49,919
image

00:05:46,000 --> 00:05:50,320
and attach those back uh as a volume uh

00:05:49,919 --> 00:05:53,759
for

00:05:50,320 --> 00:05:56,000
for each cassandra container and mounted

00:05:53,759 --> 00:05:58,720
back to exactly the same location

00:05:56,000 --> 00:06:00,720
um as the original files were and this

00:05:58,720 --> 00:06:01,680
approach works it actually overrides the

00:06:00,720 --> 00:06:04,840
original files

00:06:01,680 --> 00:06:06,080
and and you just can control it from

00:06:04,840 --> 00:06:09,199
there

00:06:06,080 --> 00:06:10,880
um before we uh start cranking on uh

00:06:09,199 --> 00:06:13,039
just to mention the dependencies

00:06:10,880 --> 00:06:14,080
obviously it's uh docker and docker

00:06:13,039 --> 00:06:17,680
compose

00:06:14,080 --> 00:06:21,759
and you need to have uh some free

00:06:17,680 --> 00:06:24,960
rom available on on your machine

00:06:21,759 --> 00:06:28,639
basically two gigabytes per

00:06:24,960 --> 00:06:30,639
per node you can actually run it with a

00:06:28,639 --> 00:06:31,520
little bit less i did i did run it with

00:06:30,639 --> 00:06:34,880
less

00:06:31,520 --> 00:06:36,720
but if you actually plan um

00:06:34,880 --> 00:06:39,039
to use this cluster for something do

00:06:36,720 --> 00:06:40,240
some tests uh you you better to have at

00:06:39,039 --> 00:06:42,000
least two gigabytes

00:06:40,240 --> 00:06:46,479
per node just to make sure it doesn't

00:06:42,000 --> 00:06:50,000
crash out of memory every now and then

00:06:46,479 --> 00:06:50,639
okay so uh let's start uh i guess i need

00:06:50,000 --> 00:06:54,479
to exit

00:06:50,639 --> 00:06:56,160
uh to uh copy uh the commands

00:06:54,479 --> 00:06:57,520
so first of all uh what we're going to

00:06:56,160 --> 00:07:00,720
do is uh pull

00:06:57,520 --> 00:07:03,840
as the latest stable uh cassandra image

00:07:00,720 --> 00:07:04,479
from docker hub but before i do this

00:07:03,840 --> 00:07:08,160
i'll just

00:07:04,479 --> 00:07:10,560
quickly take a look at chat as just

00:07:08,160 --> 00:07:12,479
double check there is no issues all

00:07:10,560 --> 00:07:15,360
right

00:07:12,479 --> 00:07:16,880
cool by the way i need to mention that

00:07:15,360 --> 00:07:19,599
with docker compose you don't

00:07:16,880 --> 00:07:20,400
really need to pull the image uh it does

00:07:19,599 --> 00:07:22,720
it for you

00:07:20,400 --> 00:07:24,800
but since we're gonna uh need to do this

00:07:22,720 --> 00:07:26,639
little hack that i described before

00:07:24,800 --> 00:07:28,479
uh yeah we would need to pull the image

00:07:26,639 --> 00:07:30,000
before we even uh triggers the docker

00:07:28,479 --> 00:07:32,240
compose right so this is a step

00:07:30,000 --> 00:07:32,240
one

00:07:33,039 --> 00:07:36,319
right in my machine it's really easy

00:07:34,479 --> 00:07:39,440
because i already have this

00:07:36,319 --> 00:07:40,639
image pulled in right so it might take a

00:07:39,440 --> 00:07:44,319
little bit time

00:07:40,639 --> 00:07:45,599
on your side so now we're going to run

00:07:44,319 --> 00:07:47,440
this recommends i'm just going to

00:07:45,599 --> 00:07:51,039
trigger them and explain what they do

00:07:47,440 --> 00:07:54,400
right so basically this is

00:07:51,039 --> 00:07:56,000
a docker on which will run a container

00:07:54,400 --> 00:07:58,639
based on the images that we just

00:07:56,000 --> 00:08:00,080
downloaded and it is a disposable

00:07:58,639 --> 00:08:02,400
container

00:08:00,080 --> 00:08:03,919
minus ram means that as soon as the

00:08:02,400 --> 00:08:04,720
container stops which is going to be

00:08:03,919 --> 00:08:08,479
removed

00:08:04,720 --> 00:08:12,240
and we only start it for a little while

00:08:08,479 --> 00:08:15,120
so we can copy the configuration files

00:08:12,240 --> 00:08:16,080
uh to our uh host system uh from this

00:08:15,120 --> 00:08:18,479
container

00:08:16,080 --> 00:08:19,360
right as of now i don't think there is a

00:08:18,479 --> 00:08:22,000
way to copy

00:08:19,360 --> 00:08:23,280
uh the files directly from image so the

00:08:22,000 --> 00:08:25,440
most

00:08:23,280 --> 00:08:26,479
the easiest way uh is just to quickly

00:08:25,440 --> 00:08:29,440
start the container

00:08:26,479 --> 00:08:30,479
get the config and and end of it so here

00:08:29,440 --> 00:08:34,080
we have it

00:08:30,479 --> 00:08:36,479
so it's just yeah uh a directory

00:08:34,080 --> 00:08:37,599
with all the cassandra configs that you

00:08:36,479 --> 00:08:39,760
probably

00:08:37,599 --> 00:08:41,039
might have seen before um if you use

00:08:39,760 --> 00:08:42,800
cassandra right

00:08:41,039 --> 00:08:44,800
those are vanilla conflicts right so

00:08:42,800 --> 00:08:45,600
those are not changed and we're gonna

00:08:44,800 --> 00:08:48,560
name them

00:08:45,600 --> 00:08:50,640
uh like this uh for now and obviously

00:08:48,560 --> 00:08:51,200
those conflicts are specific to this uh

00:08:50,640 --> 00:08:54,800
version

00:08:51,200 --> 00:08:57,680
so we specify the version as well

00:08:54,800 --> 00:08:58,959
right so uh now let's look at the docker

00:08:57,680 --> 00:09:02,080
compose file so this

00:08:58,959 --> 00:09:06,240
is the actual meat

00:09:02,080 --> 00:09:06,240
of what we're going to do um

00:09:07,200 --> 00:09:13,760
all right i guess let me

00:09:10,959 --> 00:09:13,760
zoom in a little

00:09:14,640 --> 00:09:20,000
all right um so it's pretty easy

00:09:18,560 --> 00:09:22,160
actually there is not

00:09:20,000 --> 00:09:24,240
too much going on right so i'm just

00:09:22,160 --> 00:09:27,360
gonna make a few comments

00:09:24,240 --> 00:09:27,760
um just to explain how it works before

00:09:27,360 --> 00:09:30,320
we

00:09:27,760 --> 00:09:32,160
actually apply it right so first of all

00:09:30,320 --> 00:09:34,399
uh we create a docker network called

00:09:32,160 --> 00:09:34,959
cassandra this is where we will put all

00:09:34,399 --> 00:09:37,040
our

00:09:34,959 --> 00:09:38,320
cassandra notes and then we just create

00:09:37,040 --> 00:09:42,160
notes one by one

00:09:38,320 --> 00:09:43,839
uh so i can't fit as a docker compose in

00:09:42,160 --> 00:09:45,360
in one slide so they're gonna be two

00:09:43,839 --> 00:09:48,160
slides this is um

00:09:45,360 --> 00:09:48,640
just the first one undefined here right

00:09:48,160 --> 00:09:50,560
um

00:09:48,640 --> 00:09:51,760
and it's if you use the compost before

00:09:50,560 --> 00:09:53,040
right there is nothing

00:09:51,760 --> 00:09:55,279
that you haven't seen before right so

00:09:53,040 --> 00:09:56,160
you specify the image a container name

00:09:55,279 --> 00:09:58,640
hostname

00:09:56,160 --> 00:10:00,080
the network is going to be attached to

00:09:58,640 --> 00:10:03,839
and we're also going to

00:10:00,080 --> 00:10:07,040
mob support uh to the host system

00:10:03,839 --> 00:10:10,079
you don't really have to do this but um

00:10:07,040 --> 00:10:13,519
we just got gonna map it for

00:10:10,079 --> 00:10:15,680
ease of use so you can access a cql port

00:10:13,519 --> 00:10:18,000
and run queries directly from your host

00:10:15,680 --> 00:10:21,360
system on the sport

00:10:18,000 --> 00:10:24,000
alternatively you can

00:10:21,360 --> 00:10:25,120
add your application container into this

00:10:24,000 --> 00:10:27,200
network as well

00:10:25,120 --> 00:10:28,640
and and and speak inside the docker

00:10:27,200 --> 00:10:30,720
network

00:10:28,640 --> 00:10:32,000
right i guess the most important part is

00:10:30,720 --> 00:10:34,959
the volumes right

00:10:32,000 --> 00:10:36,000
so in this case we have to first one is

00:10:34,959 --> 00:10:39,839
for data

00:10:36,000 --> 00:10:44,480
and um yeah by the way i should say that

00:10:39,839 --> 00:10:47,120
the volume part on the

00:10:44,480 --> 00:10:47,519
right is is the path where it's mounted

00:10:47,120 --> 00:10:50,800
to

00:10:47,519 --> 00:10:53,200
inside the container right and volume uh

00:10:50,800 --> 00:10:55,600
pass on the left is a directory

00:10:53,200 --> 00:10:57,360
on your host system right so this

00:10:55,600 --> 00:10:58,560
directory is not created yet and if it's

00:10:57,360 --> 00:11:00,480
not created

00:10:58,560 --> 00:11:02,399
docker will create it automatically and

00:11:00,480 --> 00:11:03,760
then put all the data here which will

00:11:02,399 --> 00:11:06,959
persist across

00:11:03,760 --> 00:11:10,240
cluster reboots and cluster destroys uh

00:11:06,959 --> 00:11:12,000
whatever right so now is the

00:11:10,240 --> 00:11:13,440
configuration volume this is a bit more

00:11:12,000 --> 00:11:16,800
interesting because

00:11:13,440 --> 00:11:19,360
we actually going to pre-create

00:11:16,800 --> 00:11:20,800
this directory and in this case docker

00:11:19,360 --> 00:11:24,000
will behave

00:11:20,800 --> 00:11:28,160
differently and it will

00:11:24,000 --> 00:11:31,519
mop all this configs

00:11:28,160 --> 00:11:32,560
uh to this path even so this path

00:11:31,519 --> 00:11:35,440
already exists

00:11:32,560 --> 00:11:36,640
um inside the image it will actually

00:11:35,440 --> 00:11:38,560
override source

00:11:36,640 --> 00:11:39,839
right so this is important to understand

00:11:38,560 --> 00:11:43,440
uh it just

00:11:39,839 --> 00:11:45,760
uh to get the idea how how it all works

00:11:43,440 --> 00:11:47,600
um and that's it really right and also

00:11:45,760 --> 00:11:48,480
we specify a couple of environment

00:11:47,600 --> 00:11:50,880
variables

00:11:48,480 --> 00:11:51,839
uh so those environment variables

00:11:50,880 --> 00:11:54,639
actually

00:11:51,839 --> 00:11:56,720
um come from the official image

00:11:54,639 --> 00:11:58,079
documentation right so this is how you

00:11:56,720 --> 00:11:59,839
do some basic

00:11:58,079 --> 00:12:02,240
configuration and you have to provide

00:11:59,839 --> 00:12:05,040
them in any case even if you provide the

00:12:02,240 --> 00:12:06,240
configuration files because those would

00:12:05,040 --> 00:12:08,800
override the default

00:12:06,240 --> 00:12:10,399
values to whatever is default in the

00:12:08,800 --> 00:12:14,000
attach configuration right

00:12:10,399 --> 00:12:16,959
so i'm just going to quickly exit and

00:12:14,000 --> 00:12:17,600
go to the docker hub cassandra official

00:12:16,959 --> 00:12:21,279
image

00:12:17,600 --> 00:12:22,839
where you can see all the documentation

00:12:21,279 --> 00:12:25,519
for

00:12:22,839 --> 00:12:28,639
versus environment variables

00:12:25,519 --> 00:12:31,920
um there's not many right you can only

00:12:28,639 --> 00:12:34,399
uh do the basic stuff with them

00:12:31,920 --> 00:12:35,120
all the advanced stuff you would have to

00:12:34,399 --> 00:12:38,240
do yourself

00:12:35,120 --> 00:12:40,320
right so you can still have control of

00:12:38,240 --> 00:12:43,360
everything

00:12:40,320 --> 00:12:44,880
right so let's go next and

00:12:43,360 --> 00:12:46,560
this is the definition of the other two

00:12:44,880 --> 00:12:49,920
notes it is smaller

00:12:46,560 --> 00:12:52,160
right so i guess uh i will just go back

00:12:49,920 --> 00:12:54,079
right to the environment so it is using

00:12:52,160 --> 00:12:57,040
the environment variables

00:12:54,079 --> 00:12:58,639
that were already uh set for the first

00:12:57,040 --> 00:12:59,920
node it's just gonna inheritance from

00:12:58,639 --> 00:13:02,240
there

00:12:59,920 --> 00:13:03,519
so the only difference uh from the first

00:13:02,240 --> 00:13:05,519
node apart from the

00:13:03,519 --> 00:13:07,519
that node name is different and passes

00:13:05,519 --> 00:13:08,959
are different is that the second node

00:13:07,519 --> 00:13:11,279
depends on the first

00:13:08,959 --> 00:13:13,680
node for startup right so in cassandra

00:13:11,279 --> 00:13:16,480
you don't really start all the nodes

00:13:13,680 --> 00:13:17,200
right away you start them one by one by

00:13:16,480 --> 00:13:19,680
the way

00:13:17,200 --> 00:13:20,880
uh yeah i need to mention that i

00:13:19,680 --> 00:13:23,360
nominated

00:13:20,880 --> 00:13:24,800
the first note and second note as seats

00:13:23,360 --> 00:13:27,519
in cassandra and they

00:13:24,800 --> 00:13:28,000
should be started first and i also

00:13:27,519 --> 00:13:30,000
change

00:13:28,000 --> 00:13:33,120
the cluster name something else to

00:13:30,000 --> 00:13:35,360
something else from default

00:13:33,120 --> 00:13:36,240
and and i don't use the default uh

00:13:35,360 --> 00:13:38,800
snitch

00:13:36,240 --> 00:13:39,600
which is a simple snitch and i use quasi

00:13:38,800 --> 00:13:43,120
property file

00:13:39,600 --> 00:13:43,839
uh snitch uh instead right and i also

00:13:43,120 --> 00:13:48,079
reduced

00:13:43,839 --> 00:13:50,000
uh a number of tokens from default just

00:13:48,079 --> 00:13:51,680
because i can just just to demonstrate

00:13:50,000 --> 00:13:53,760
uh what you can do with environment

00:13:51,680 --> 00:13:55,279
variables

00:13:53,760 --> 00:13:57,680
all right and and the third node is the

00:13:55,279 --> 00:13:58,639
same but this is the third node uh

00:13:57,680 --> 00:14:02,000
depends

00:13:58,639 --> 00:14:04,480
on on the second node obviously so

00:14:02,000 --> 00:14:05,360
those three nodes just going to start in

00:14:04,480 --> 00:14:08,880
sequence

00:14:05,360 --> 00:14:10,160
one two three okay uh so this is an

00:14:08,880 --> 00:14:13,360
image and i

00:14:10,160 --> 00:14:16,320
actually cannot copy paste this uh to

00:14:13,360 --> 00:14:17,600
my environment so i have this already

00:14:16,320 --> 00:14:20,959
prepared

00:14:17,600 --> 00:14:23,360
oh by the way there is um

00:14:20,959 --> 00:14:24,560
it hub repos that i created where all

00:14:23,360 --> 00:14:26,639
the code is available

00:14:24,560 --> 00:14:29,680
so i'm gonna give you uh the location of

00:14:26,639 --> 00:14:32,160
this so uh you just can copy it as well

00:14:29,680 --> 00:14:32,959
really easily so yeah if you take a look

00:14:32,160 --> 00:14:36,560
at it it's just

00:14:32,959 --> 00:14:40,079
uh the same docker file already

00:14:36,560 --> 00:14:44,880
available right

00:14:40,079 --> 00:14:47,120
so let's go further

00:14:44,880 --> 00:14:49,120
okay i'm gonna exit again to clip a new

00:14:47,120 --> 00:14:52,639
commands so what we're going to do now

00:14:49,120 --> 00:14:55,680
we are going to copy uh

00:14:52,639 --> 00:14:57,680
vanilla config into the

00:14:55,680 --> 00:14:59,120
separate config for each node right so

00:14:57,680 --> 00:15:02,160
each node

00:14:59,120 --> 00:15:05,760
would have its own conflict that we can

00:15:02,160 --> 00:15:12,079
maintain right and

00:15:05,760 --> 00:15:14,160
you can see this in here

00:15:12,079 --> 00:15:15,600
right said that each note would have its

00:15:14,160 --> 00:15:19,440
own conflict right

00:15:15,600 --> 00:15:26,160
so from now on we have the power to

00:15:19,440 --> 00:15:29,600
to change anything we want

00:15:26,160 --> 00:15:31,519
all right uh so let's start

00:15:29,600 --> 00:15:34,240
right to start up the cluster you just

00:15:31,519 --> 00:15:37,279
need to run uh docker compose up

00:15:34,240 --> 00:15:38,800
uh and i add minus d minus d means run

00:15:37,279 --> 00:15:41,839
it in a demon mode right

00:15:38,800 --> 00:15:44,320
so i still have my prompt returned to me

00:15:41,839 --> 00:15:47,279
uh when i run this

00:15:44,320 --> 00:15:47,839
uh right uh then uh you can run docker

00:15:47,279 --> 00:15:50,800
ps

00:15:47,839 --> 00:15:52,399
i see that those containers indeed start

00:15:50,800 --> 00:15:54,800
right and you can see them

00:15:52,399 --> 00:15:55,839
with the names cast one cast two and and

00:15:54,800 --> 00:15:59,120
cast three

00:15:55,839 --> 00:16:01,040
right so now let's um

00:15:59,120 --> 00:16:02,639
or let's run some commands by the way

00:16:01,040 --> 00:16:05,440
this is how

00:16:02,639 --> 00:16:07,279
you run commands uh with zipper

00:16:05,440 --> 00:16:09,360
containers if you haven't i use this

00:16:07,279 --> 00:16:11,279
before right so you do docker exec

00:16:09,360 --> 00:16:12,880
and then the name of the container and

00:16:11,279 --> 00:16:15,120
then you just run the command

00:16:12,880 --> 00:16:17,279
you want to run right so in my case i

00:16:15,120 --> 00:16:17,839
just going to run cassandra's

00:16:17,279 --> 00:16:21,120
notification

00:16:17,839 --> 00:16:22,800
status right so that

00:16:21,120 --> 00:16:24,720
just note that command runs inside the

00:16:22,800 --> 00:16:27,839
container right so

00:16:24,720 --> 00:16:29,839
cluster is almost there right so

00:16:27,839 --> 00:16:32,480
almost all three nodes there's the last

00:16:29,839 --> 00:16:36,160
one is joining right so

00:16:32,480 --> 00:16:40,399
you're getting there okay again it's

00:16:36,160 --> 00:16:44,480
not completed but we can already

00:16:40,399 --> 00:16:47,279
run some sql sh against

00:16:44,480 --> 00:16:47,279
the first node

00:16:47,759 --> 00:16:52,480
all right so this returns uh system uh

00:16:50,880 --> 00:16:55,519
key spaces

00:16:52,480 --> 00:16:56,959
uh by the way uh you can run sql search

00:16:55,519 --> 00:17:00,160
interactive as well

00:16:56,959 --> 00:17:03,680
right you just need to add minus

00:17:00,160 --> 00:17:06,400
it to the docker exec

00:17:03,680 --> 00:17:06,799
i means interactive and t means uh to

00:17:06,400 --> 00:17:10,240
have

00:17:06,799 --> 00:17:13,760
um a real terminal it is

00:17:10,240 --> 00:17:15,280
why right so let's run it and now we

00:17:13,760 --> 00:17:19,039
connect it to our

00:17:15,280 --> 00:17:22,160
cassandra with our

00:17:19,039 --> 00:17:23,280
cluster name and we can run some queries

00:17:22,160 --> 00:17:24,959
from here

00:17:23,280 --> 00:17:27,439
um what i want to do i actually want to

00:17:24,959 --> 00:17:30,240
create some data which is not just

00:17:27,439 --> 00:17:32,080
the system key spaces because we will be

00:17:30,240 --> 00:17:33,520
destroying our cluster and i just want

00:17:32,080 --> 00:17:37,039
to show that the data

00:17:33,520 --> 00:17:37,840
persist across different works that you

00:17:37,039 --> 00:17:40,160
do

00:17:37,840 --> 00:17:40,160
so

00:17:43,039 --> 00:17:48,080
right so this sql code is not in the

00:17:45,280 --> 00:17:49,760
slides but you can insert to the cluster

00:17:48,080 --> 00:17:50,400
basically anything you want you just can

00:17:49,760 --> 00:17:52,960
run

00:17:50,400 --> 00:17:54,080
your own uh this one just inserts some

00:17:52,960 --> 00:17:57,600
email contacts

00:17:54,080 --> 00:18:00,160
um in this case both are mine contacts

00:17:57,600 --> 00:18:01,520
by the way it's also real so if you feel

00:18:00,160 --> 00:18:04,720
like writing me a letter

00:18:01,520 --> 00:18:04,720
uh you can

00:18:05,520 --> 00:18:10,799
right so let's

00:18:08,559 --> 00:18:10,799
go

00:18:11,760 --> 00:18:17,919
next oh um first of all let's

00:18:15,520 --> 00:18:20,080
so we did it on on the first note let's

00:18:17,919 --> 00:18:23,360
actually query the same data from the

00:18:20,080 --> 00:18:29,600
um turn on so making sure that

00:18:23,360 --> 00:18:31,679
a class is operation fine and you can

00:18:29,600 --> 00:18:33,919
returns the data from from all the nodes

00:18:31,679 --> 00:18:37,360
uh in the cluster so in this case i pick

00:18:33,919 --> 00:18:37,360
cust3 which is a last name

00:18:37,760 --> 00:18:46,480
and i get the same data

00:18:43,120 --> 00:18:48,000
all right uh so uh now let's change some

00:18:46,480 --> 00:18:50,799
config as an example

00:18:48,000 --> 00:18:52,000
um just to see that what we can do with

00:18:50,799 --> 00:18:55,120
the cluster so

00:18:52,000 --> 00:18:57,840
um for this

00:18:55,120 --> 00:18:59,919
presentation i will change the

00:18:57,840 --> 00:19:01,440
authentication settings so by default

00:18:59,919 --> 00:19:03,679
uh cassandra doesn't require any

00:19:01,440 --> 00:19:05,200
authentication with sql sage right so

00:19:03,679 --> 00:19:07,280
you can see that we can run queries

00:19:05,200 --> 00:19:12,160
without doing any authentication at all

00:19:07,280 --> 00:19:14,640
right in order to enable it

00:19:12,160 --> 00:19:15,360
you need to change the cassandra yama

00:19:14,640 --> 00:19:18,880
config

00:19:15,360 --> 00:19:18,880
right and

00:19:19,600 --> 00:19:23,120
you need to change the authenticator and

00:19:21,840 --> 00:19:26,640
you need to change the

00:19:23,120 --> 00:19:27,440
authorizer right and you need to do it

00:19:26,640 --> 00:19:30,480
for every node

00:19:27,440 --> 00:19:32,720
right so basically we need to update the

00:19:30,480 --> 00:19:34,400
con cassandra yama forecast one case two

00:19:32,720 --> 00:19:37,600
and class three

00:19:34,400 --> 00:19:40,400
i have a little script that just does it

00:19:37,600 --> 00:19:40,400
to save time

00:19:41,120 --> 00:19:45,039
right and we can verify it for like

00:19:43,760 --> 00:19:48,400
let's say second note

00:19:45,039 --> 00:19:50,080
just to see that it did work yeah it did

00:19:48,400 --> 00:19:51,360
work so now it's a password indicator

00:19:50,080 --> 00:19:54,720
and cassandra

00:19:51,360 --> 00:19:57,039
it right so

00:19:54,720 --> 00:19:58,640
and that's it really right so we have

00:19:57,039 --> 00:20:00,080
our configuration updated and

00:19:58,640 --> 00:20:02,000
in order to apply which is the docker

00:20:00,080 --> 00:20:07,120
compose restart and this

00:20:02,000 --> 00:20:10,480
i'm going to restart our cluster

00:20:07,120 --> 00:20:16,400
all three notes right

00:20:10,480 --> 00:20:16,400
and let's see what not to say to say

00:20:17,440 --> 00:20:24,159
right it's still setting up

00:20:20,640 --> 00:20:24,159
takes some time for cassandra

00:20:27,230 --> 00:20:30,349
[Music]

00:20:32,320 --> 00:20:39,360
right so the cluster is up

00:20:35,600 --> 00:20:39,360
and let's run the query again

00:20:41,760 --> 00:20:46,640
oops it doesn't work anymore um but this

00:20:44,640 --> 00:20:48,000
is expected and because we just enabled

00:20:46,640 --> 00:20:49,840
this indication so

00:20:48,000 --> 00:20:51,520
in cassandra one you enable

00:20:49,840 --> 00:20:52,960
authentication's default uh

00:20:51,520 --> 00:20:54,559
username and password is cassandra

00:20:52,960 --> 00:20:58,320
cassandra which we're going to use

00:20:54,559 --> 00:20:59,760
well unless you change it from default

00:20:58,320 --> 00:21:01,840
right and now we can see that

00:20:59,760 --> 00:21:04,240
authentication is working

00:21:01,840 --> 00:21:07,039
right so this example shows what we can

00:21:04,240 --> 00:21:09,760
do and you can do like

00:21:07,039 --> 00:21:10,640
anything anything you want right so all

00:21:09,760 --> 00:21:14,320
those configs

00:21:10,640 --> 00:21:15,919
right you you can change gvm options you

00:21:14,320 --> 00:21:16,400
can change the startup script you can

00:21:15,919 --> 00:21:19,200
change

00:21:16,400 --> 00:21:22,240
cassandra yamaha so you have full

00:21:19,200 --> 00:21:22,240
control of everything

00:21:22,960 --> 00:21:30,080
you can even do more complicated stuff

00:21:26,640 --> 00:21:31,600
so for example you can test a major

00:21:30,080 --> 00:21:34,720
cluster upgrade

00:21:31,600 --> 00:21:35,679
in this environment or you can set up

00:21:34,720 --> 00:21:38,640
encryption

00:21:35,679 --> 00:21:40,320
both note to note and client to node

00:21:38,640 --> 00:21:41,440
right so for example if you wanted to

00:21:40,320 --> 00:21:43,520
see a

00:21:41,440 --> 00:21:46,400
test encryption uh in this cluster and

00:21:43,520 --> 00:21:48,960
tests your clients with encryption

00:21:46,400 --> 00:21:49,760
uh in in the local environment uh all

00:21:48,960 --> 00:21:51,120
you need to do

00:21:49,760 --> 00:21:52,880
obviously you need to generate key

00:21:51,120 --> 00:21:54,480
source and thrusters for every node

00:21:52,880 --> 00:21:56,240
right so you need to do this yourself

00:21:54,480 --> 00:21:57,039
and then you just put this on the same

00:21:56,240 --> 00:21:58,720
volume

00:21:57,039 --> 00:22:00,480
where you have the configuration files

00:21:58,720 --> 00:22:02,480
attached and then you just

00:22:00,480 --> 00:22:04,400
change those configuration files to use

00:22:02,480 --> 00:22:07,440
those keystores and trusters

00:22:04,400 --> 00:22:09,200
and yeah here you go you would have your

00:22:07,440 --> 00:22:11,360
authentication

00:22:09,200 --> 00:22:13,280
working like it was a real a production

00:22:11,360 --> 00:22:16,240
cluster so you can

00:22:13,280 --> 00:22:16,720
test a lot of production like features

00:22:16,240 --> 00:22:20,080
uh

00:22:16,720 --> 00:22:23,600
on your laptop like without any limits

00:22:20,080 --> 00:22:25,919
right so um

00:22:23,600 --> 00:22:27,760
yeah so here we go uh we have a great

00:22:25,919 --> 00:22:31,120
cluster uh very flexible

00:22:27,760 --> 00:22:34,000
and uh you can and you should

00:22:31,120 --> 00:22:35,600
uh put all those configs uh into your

00:22:34,000 --> 00:22:39,280
version control

00:22:35,600 --> 00:22:40,640
right uh so yeah uh it's reproducible

00:22:39,280 --> 00:22:44,000
and it's not lost

00:22:40,640 --> 00:22:45,760
uh also uh you can manage so those are

00:22:44,000 --> 00:22:47,200
those conflicts are just the files on

00:22:45,760 --> 00:22:48,640
your host file system right so you can

00:22:47,200 --> 00:22:50,080
manage them with something else

00:22:48,640 --> 00:22:51,679
if you want you can manage them with

00:22:50,080 --> 00:22:54,559
your configuration management

00:22:51,679 --> 00:22:55,679
for example ansible or or whatever

00:22:54,559 --> 00:22:58,799
whatever else

00:22:55,679 --> 00:23:01,600
that you use um

00:22:58,799 --> 00:23:03,280
okay yeah and yeah i need to say that

00:23:01,600 --> 00:23:04,000
you can also use some of the docker

00:23:03,280 --> 00:23:06,000
goodies

00:23:04,000 --> 00:23:08,559
that are available so for example

00:23:06,000 --> 00:23:12,720
resource limiting or health checks

00:23:08,559 --> 00:23:16,240
i didn't add neither of those

00:23:12,720 --> 00:23:19,840
into the docker compose in here

00:23:16,240 --> 00:23:22,480
yaml because it just wouldn't fit

00:23:19,840 --> 00:23:24,720
on the screen but you can and you should

00:23:22,480 --> 00:23:25,440
uh use resource limits and health check

00:23:24,720 --> 00:23:26,880
and you can

00:23:25,440 --> 00:23:28,799
double check the docker compost

00:23:26,880 --> 00:23:31,120
documentation to do this right so this

00:23:28,799 --> 00:23:34,640
will make your cluster a little bit

00:23:31,120 --> 00:23:36,080
safer and nicer also you can do stuff

00:23:34,640 --> 00:23:38,000
like you can post your entire

00:23:36,080 --> 00:23:39,120
cluster when you don't need to use it

00:23:38,000 --> 00:23:42,240
yeah by the way let's

00:23:39,120 --> 00:23:45,200
actually do this right i'm not sure

00:23:42,240 --> 00:23:46,400
um i have enough going on to really show

00:23:45,200 --> 00:23:49,520
you

00:23:46,400 --> 00:23:49,520
how it works but

00:23:49,600 --> 00:23:56,720
let's try so at the moment

00:23:52,960 --> 00:23:57,840
i have uh uh not sure yeah i have very

00:23:56,720 --> 00:24:02,440
little cpu used

00:23:57,840 --> 00:24:06,960
like half percent and i have like uh

00:24:02,440 --> 00:24:08,720
99.5 idol right um

00:24:06,960 --> 00:24:10,640
because as the class center doesn't

00:24:08,720 --> 00:24:13,840
really do much at the moment right

00:24:10,640 --> 00:24:16,080
but still right you it uses almost up to

00:24:13,840 --> 00:24:19,039
one percent so let's see what happens

00:24:16,080 --> 00:24:19,440
when we put the classroom post right so

00:24:19,039 --> 00:24:21,600
uh

00:24:19,440 --> 00:24:23,919
first let's just check the current

00:24:21,600 --> 00:24:25,760
cities of the cluster

00:24:23,919 --> 00:24:28,159
the cluster is working and what we can

00:24:25,760 --> 00:24:31,279
do we can do docker compose pose

00:24:28,159 --> 00:24:33,679
right and that's it it posts like

00:24:31,279 --> 00:24:36,080
immediately right all all nodes are

00:24:33,679 --> 00:24:38,400
frozen and you wouldn't be able to run

00:24:36,080 --> 00:24:40,080
any commands anymore right so that

00:24:38,400 --> 00:24:44,400
happens immediately

00:24:40,080 --> 00:24:47,440
let's like look at the top again

00:24:44,400 --> 00:24:49,679
all right you can now actually see this

00:24:47,440 --> 00:24:50,240
already better we never really had 99.99

00:24:49,679 --> 00:24:53,120
or

00:24:50,240 --> 00:24:54,799
100 percent idle right so now it's

00:24:53,120 --> 00:24:56,880
officially doing nothing

00:24:54,799 --> 00:24:57,840
right so basically we just froze in our

00:24:56,880 --> 00:25:00,240
cluster

00:24:57,840 --> 00:25:01,840
immediately and it's sometimes useful uh

00:25:00,240 --> 00:25:03,200
when you have a big cluster and you have

00:25:01,840 --> 00:25:04,480
application and you have a lot of

00:25:03,200 --> 00:25:07,120
testing going on and

00:25:04,480 --> 00:25:08,960
and your laptop is really melting and

00:25:07,120 --> 00:25:10,480
somebody gives you a call

00:25:08,960 --> 00:25:12,000
on zoom or skype or you have a

00:25:10,480 --> 00:25:13,600
conference call and

00:25:12,000 --> 00:25:15,520
you just need more performance on your

00:25:13,600 --> 00:25:18,799
laptop you just pause the cluster

00:25:15,520 --> 00:25:21,600
and when you're done you just

00:25:18,799 --> 00:25:21,600
do on pause

00:25:26,480 --> 00:25:29,679
and onpostwar works immediately right so

00:25:29,120 --> 00:25:31,679
it is

00:25:29,679 --> 00:25:33,440
it doesn't need to start up your cluster

00:25:31,679 --> 00:25:35,760
from scratch right

00:25:33,440 --> 00:25:36,640
you just hit on pause and you have boom

00:25:35,760 --> 00:25:38,559
your all

00:25:36,640 --> 00:25:39,919
cluster isn't frozen all three nodes and

00:25:38,559 --> 00:25:43,840
you can work with it

00:25:39,919 --> 00:25:43,840
as you used to work before

00:25:43,919 --> 00:25:50,000
okay right so and yeah

00:25:46,960 --> 00:25:51,840
last but not least um is

00:25:50,000 --> 00:25:54,480
basically just a general approach right

00:25:51,840 --> 00:25:55,440
it to be honest it has nothing to do

00:25:54,480 --> 00:25:58,320
with cassandra

00:25:55,440 --> 00:26:00,480
at all right so you can run anything

00:25:58,320 --> 00:26:03,440
like this you can run it in

00:26:00,480 --> 00:26:04,559
with docker compose and basically the

00:26:03,440 --> 00:26:06,080
only trick here

00:26:04,559 --> 00:26:08,480
is that you attach the configuration

00:26:06,080 --> 00:26:11,600
files as volumes so you have

00:26:08,480 --> 00:26:14,559
this flexibility and also

00:26:11,600 --> 00:26:16,480
is much more dynamic if you had your uh

00:26:14,559 --> 00:26:18,240
configuration files built into the image

00:26:16,480 --> 00:26:20,480
every time you need to change a value

00:26:18,240 --> 00:26:22,000
you have to rebuild this image right and

00:26:20,480 --> 00:26:24,159
and and you have to

00:26:22,000 --> 00:26:25,440
uh restart the container with any image

00:26:24,159 --> 00:26:29,600
etc etc

00:26:25,440 --> 00:26:33,360
right so uh this uh attaching configs

00:26:29,600 --> 00:26:34,400
uh wire volumes give you the flexibility

00:26:33,360 --> 00:26:37,679
just

00:26:34,400 --> 00:26:39,120
to test things really really fast

00:26:37,679 --> 00:26:41,919
and that's basically what you want

00:26:39,120 --> 00:26:43,840
because you don't really uh

00:26:41,919 --> 00:26:46,080
don't want to to waste time on other

00:26:43,840 --> 00:26:48,400
stuff when you're testing

00:26:46,080 --> 00:26:49,760
right so as i said all the code is

00:26:48,400 --> 00:26:52,320
available

00:26:49,760 --> 00:26:53,120
on github right so the reaper name

00:26:52,320 --> 00:26:56,080
called

00:26:53,120 --> 00:26:57,120
triple c you can pretty much guess what

00:26:56,080 --> 00:27:00,480
it stands for

00:26:57,120 --> 00:27:02,559
and it's under digitalis dash i o um

00:27:00,480 --> 00:27:05,039
organization right so i'm just gonna

00:27:02,559 --> 00:27:07,600
quickly navigate to this repo

00:27:05,039 --> 00:27:08,480
right and so here you have the docker

00:27:07,600 --> 00:27:12,000
compose

00:27:08,480 --> 00:27:14,159
file example uh that we used right

00:27:12,000 --> 00:27:15,120
and also all the steps that we details

00:27:14,159 --> 00:27:17,760
in manual steps

00:27:15,120 --> 00:27:18,720
uh we did it manually just to show on

00:27:17,760 --> 00:27:21,200
the approach

00:27:18,720 --> 00:27:21,840
but they just put in in the sim simple

00:27:21,200 --> 00:27:24,000
script

00:27:21,840 --> 00:27:26,000
right it basically figures out the

00:27:24,000 --> 00:27:27,919
version automatically from the docker

00:27:26,000 --> 00:27:30,799
file and just does also manual steps

00:27:27,919 --> 00:27:31,200
uh that we did right so basically you

00:27:30,799 --> 00:27:33,120
don't

00:27:31,200 --> 00:27:34,720
need to do anything you just need to run

00:27:33,120 --> 00:27:36,880
the setup config file

00:27:34,720 --> 00:27:38,080
and that's it from now on you can start

00:27:36,880 --> 00:27:40,240
up your cluster

00:27:38,080 --> 00:27:42,399
and do any test things that you want to

00:27:40,240 --> 00:27:42,399
do

00:27:43,580 --> 00:27:48,559
[Music]

00:27:45,440 --> 00:27:50,240
i guess that's pretty much everything i

00:27:48,559 --> 00:27:53,279
wanted to show

00:27:50,240 --> 00:27:55,600
much ahead of time well

00:27:53,279 --> 00:27:57,440
this just shows how quick and easy this

00:27:55,600 --> 00:27:58,159
approach is so you can do this really

00:27:57,440 --> 00:28:02,080
fast and

00:27:58,159 --> 00:28:04,080
efficiently i guess it's probably

00:28:02,080 --> 00:28:05,840
too much time for questions so we might

00:28:04,080 --> 00:28:09,600
do something else might do

00:28:05,840 --> 00:28:09,600
something more complicated so

00:28:10,559 --> 00:28:14,240
how much time do we have right so this

00:28:12,480 --> 00:28:18,000
session

00:28:14,240 --> 00:28:21,760
will end at 35 and now it's almost 25

00:28:18,000 --> 00:28:24,159
so we have like 10 minutes all right

00:28:21,760 --> 00:28:26,080
why not do a major upgrade of the

00:28:24,159 --> 00:28:30,159
clusters then

00:28:26,080 --> 00:28:33,760
i think 10 minutes should be enough so

00:28:30,159 --> 00:28:36,799
um what do we have now right so

00:28:33,760 --> 00:28:36,799
we have

00:28:38,480 --> 00:28:45,440
the latest 311 version and what

00:28:41,840 --> 00:28:47,360
do we have from the group

00:28:45,440 --> 00:28:49,279
right so we have actually for zero it's

00:28:47,360 --> 00:28:51,840
in beta so probably unstable

00:28:49,279 --> 00:28:53,200
but i guess this is not an issue because

00:28:51,840 --> 00:28:56,399
where else you would

00:28:53,200 --> 00:28:59,520
test unstable version if not on your

00:28:56,399 --> 00:29:02,240
uh local machine all right so this is

00:28:59,520 --> 00:29:05,360
the perfect environment for set so let's

00:29:02,240 --> 00:29:05,360
just change this

00:29:06,799 --> 00:29:11,600
all right yeah so we're actually doing a

00:29:09,679 --> 00:29:12,799
rolling upgrade right so yeah

00:29:11,600 --> 00:29:15,440
when you're bringing cassandra you need

00:29:12,799 --> 00:29:17,170
to do it one by one and also

00:29:15,440 --> 00:29:19,279
you need to

00:29:17,170 --> 00:29:22,960
[Music]

00:29:19,279 --> 00:29:22,960
pull the image as well

00:29:23,600 --> 00:29:30,559
right and let me just

00:29:26,720 --> 00:29:34,000
quickly copy see hockey stuff with it

00:29:30,559 --> 00:29:34,000
for our configurations

00:29:34,559 --> 00:29:41,840
this one

00:29:53,279 --> 00:30:00,080
okay so what i'm going to do right so um

00:29:56,399 --> 00:30:03,279
i am going to change the image stack

00:30:00,080 --> 00:30:05,919
for every container one by one

00:30:03,279 --> 00:30:07,520
and every time i change something i run

00:30:05,919 --> 00:30:08,720
docker compose up and it will

00:30:07,520 --> 00:30:11,760
automatically

00:30:08,720 --> 00:30:13,760
rebuild um the container with the

00:30:11,760 --> 00:30:16,559
changes it needs to apply

00:30:13,760 --> 00:30:17,520
right since it's it's cassandra we do

00:30:16,559 --> 00:30:20,159
this exercise

00:30:17,520 --> 00:30:21,520
one note at a time right but since the

00:30:20,159 --> 00:30:26,080
configuration file will change

00:30:21,520 --> 00:30:26,080
we need to um

00:30:26,159 --> 00:30:32,159
we need to get those

00:30:29,360 --> 00:30:35,200
uh configuration files up to date right

00:30:32,159 --> 00:30:36,880
so i'm going to pull the

00:30:35,200 --> 00:30:38,640
right so that happened quickly now we

00:30:36,880 --> 00:30:40,799
have a configuration files

00:30:38,640 --> 00:30:42,320
uh vanilla configuration files for

00:30:40,799 --> 00:30:44,159
cassandra for zero as well

00:30:42,320 --> 00:30:45,360
so uh since we're going to update the

00:30:44,159 --> 00:30:51,840
first node so let's

00:30:45,360 --> 00:30:51,840
quickly do this and

00:30:52,720 --> 00:30:59,600
copy all of those configuration file

00:30:55,760 --> 00:30:59,600
for node number one

00:31:00,799 --> 00:31:08,240
tonight let's do sudan

00:31:04,720 --> 00:31:11,200
right so i guess we're good to

00:31:08,240 --> 00:31:13,519
do our major upgrade here yep so with

00:31:11,200 --> 00:31:17,200
the docker

00:31:13,519 --> 00:31:19,679
goes up again

00:31:17,200 --> 00:31:20,880
and now it's recreating cassandra one

00:31:19,679 --> 00:31:21,440
because this is the only ones that

00:31:20,880 --> 00:31:24,480
change and

00:31:21,440 --> 00:31:25,200
all others are up to date right and if

00:31:24,480 --> 00:31:28,559
we

00:31:25,200 --> 00:31:28,559
do not full status

00:31:28,960 --> 00:31:32,480
hopefully it will start up right it

00:31:31,120 --> 00:31:36,480
starting up and

00:31:32,480 --> 00:31:36,480
what i want to do is i want to do gossip

00:31:36,799 --> 00:31:40,640
info and grab

00:31:44,480 --> 00:31:47,919
right so you can see that the rolling

00:31:46,640 --> 00:31:50,080
upgrade already started that

00:31:47,919 --> 00:31:50,960
two um out of three nodes are still the

00:31:50,080 --> 00:31:54,480
old version and

00:31:50,960 --> 00:31:56,240
and one of them is new one right so uh

00:31:54,480 --> 00:31:58,840
basically this approach is working so

00:31:56,240 --> 00:32:01,840
i'm just gonna quickly uh do this uh for

00:31:58,840 --> 00:32:01,840
browsers

00:32:12,840 --> 00:32:15,840
so

00:32:20,799 --> 00:32:31,440
uh oh i did restart

00:32:26,840 --> 00:32:31,440
sorry i need to do up my lc

00:32:32,240 --> 00:32:35,440
so okay is that recreated as node number

00:32:34,559 --> 00:32:38,480
two and

00:32:35,440 --> 00:32:41,120
let's change the last one

00:32:38,480 --> 00:32:43,840
right away hopefully we're not doing

00:32:41,120 --> 00:32:43,840
this too quickly

00:32:44,320 --> 00:32:53,120
and we need a config for z note 3

00:32:49,679 --> 00:32:57,840
okay this looks right and

00:32:53,120 --> 00:32:57,840
let's do the compose up again

00:32:58,720 --> 00:33:01,760
right let's do

00:33:02,159 --> 00:33:14,080
multiple status first

00:33:10,559 --> 00:33:14,080
so one of the notes is still down

00:33:14,240 --> 00:33:17,600
all right so now it's all up

00:33:22,559 --> 00:33:26,240
right so that's it now you can see that

00:33:24,720 --> 00:33:29,840
all the nodes have

00:33:26,240 --> 00:33:31,519
the latest uh version running right that

00:33:29,840 --> 00:33:33,360
basically completes the major upgrade of

00:33:31,519 --> 00:33:36,640
the cluster well not quite

00:33:33,360 --> 00:33:36,640
uh if you uh

00:33:37,279 --> 00:33:40,399
read cassandra before you know that you

00:33:39,039 --> 00:33:44,399
also need to

00:33:40,399 --> 00:33:44,399
uh run upgrade as a stables

00:33:45,840 --> 00:33:48,880
just quickly do this

00:33:49,519 --> 00:33:54,880
all right

00:33:52,880 --> 00:33:56,720
well not necessary for the demo but it

00:33:54,880 --> 00:34:00,080
just i can show you uh

00:33:56,720 --> 00:34:00,799
that you can do like everything here you

00:34:00,080 --> 00:34:03,840
can do

00:34:00,799 --> 00:34:04,559
uh snapshots backups as a stable

00:34:03,840 --> 00:34:06,960
upgrades

00:34:04,559 --> 00:34:07,919
basically whatever you do in production

00:34:06,960 --> 00:34:11,679
you can test

00:34:07,919 --> 00:34:14,960
on your local machine really easily

00:34:11,679 --> 00:34:15,760
right so that needs the upgrade and i'm

00:34:14,960 --> 00:34:19,359
just

00:34:15,760 --> 00:34:21,839
going to run the query that we used to

00:34:19,359 --> 00:34:21,839
run

00:34:22,800 --> 00:34:26,879
just to see that our data survives the

00:34:25,040 --> 00:34:30,560
upgrade and then did survive

00:34:26,879 --> 00:34:34,159
right so that's it we just

00:34:30,560 --> 00:34:37,280
did a major

00:34:34,159 --> 00:34:39,040
version upgrade of a three node cluster

00:34:37,280 --> 00:34:42,720
in five minutes

00:34:39,040 --> 00:34:46,560
which i think is not bad so i guess

00:34:42,720 --> 00:34:49,200
now it concludes this presentation

00:34:46,560 --> 00:34:50,320
and uh if you have any questions it's a

00:34:49,200 --> 00:34:52,000
good time to ask

00:34:50,320 --> 00:34:54,320
yeah by the way well while you type in

00:34:52,000 --> 00:34:57,680
your questions uh if there are any

00:34:54,320 --> 00:35:01,520
so here are my contact details and

00:34:57,680 --> 00:35:04,160
also um you can find as a blog post

00:35:01,520 --> 00:35:05,680
on the same topic which is a little bit

00:35:04,160 --> 00:35:07,680
more verbose other since

00:35:05,680 --> 00:35:09,520
this presentation it's a little bit more

00:35:07,680 --> 00:35:11,200
detailed right so you just navigate to

00:35:09,520 --> 00:35:14,560
digital as the tile

00:35:11,200 --> 00:35:17,520
slash block and you can find

00:35:14,560 --> 00:35:20,320
this blog post in there and other great

00:35:17,520 --> 00:35:24,720
blog posts by my colleagues as well

00:35:20,320 --> 00:35:24,720
so let's see is there any questions

00:35:28,839 --> 00:35:31,839
right

00:35:34,880 --> 00:35:39,599
uh have you found the official docker

00:35:37,440 --> 00:35:42,720
images for cassandra adequate

00:35:39,599 --> 00:35:44,560
for use with ccc if not what types of

00:35:42,720 --> 00:35:47,599
changes have you made

00:35:44,560 --> 00:35:48,240
yes i did find the official docker

00:35:47,599 --> 00:35:52,480
images

00:35:48,240 --> 00:35:53,920
at the quad and this is um

00:35:52,480 --> 00:35:55,520
yeah this is the best image i can

00:35:53,920 --> 00:35:58,880
recommend right

00:35:55,520 --> 00:36:01,680
and it's really up to date like uh

00:35:58,880 --> 00:36:03,359
i i've seen that uh the new version was

00:36:01,680 --> 00:36:06,880
released on apache cassandra

00:36:03,359 --> 00:36:10,480
and the same day i i used uh the

00:36:06,880 --> 00:36:12,320
official docker image so yeah

00:36:10,480 --> 00:36:13,680
and you don't really need to change

00:36:12,320 --> 00:36:16,720
anything at all

00:36:13,680 --> 00:36:19,599
like at all so this is the uh nice

00:36:16,720 --> 00:36:20,640
thing about it so if you if you don't

00:36:19,599 --> 00:36:22,000
you know fork or

00:36:20,640 --> 00:36:23,920
don't do any changes don't create your

00:36:22,000 --> 00:36:25,920
docker file don't reuse it it may

00:36:23,920 --> 00:36:27,440
makes it like way way simpler so you

00:36:25,920 --> 00:36:29,920
always

00:36:27,440 --> 00:36:31,280
rely you know always start from a blank

00:36:29,920 --> 00:36:35,280
slate always rely

00:36:31,280 --> 00:36:41,839
on once official image

00:36:35,280 --> 00:36:41,839
right so

00:36:42,160 --> 00:36:47,839
i don't

00:36:45,200 --> 00:36:47,839
see

00:36:48,720 --> 00:36:52,839
any more questions yeah as i mentioned

00:36:51,760 --> 00:36:55,599
before

00:36:52,839 --> 00:36:58,560
um you can use

00:36:55,599 --> 00:36:59,440
this approach for other stuff right um

00:36:58,560 --> 00:37:02,000
yeah by the way

00:36:59,440 --> 00:37:03,119
uh if you haven't tried on the latest

00:37:02,000 --> 00:37:06,960
cassandra 4 yet

00:37:03,119 --> 00:37:10,079
i guess you you should right because

00:37:06,960 --> 00:37:10,079
the uh

00:37:13,440 --> 00:37:20,240
cluster of upgraded one yeah so

00:37:17,200 --> 00:37:21,920
the stable version is not far off um

00:37:20,240 --> 00:37:23,760
so i guess it's a good time to start

00:37:21,920 --> 00:37:26,960
playing

00:37:23,760 --> 00:37:28,560
and this is literally uh the best way

00:37:26,960 --> 00:37:30,320
uh to play with this using docker

00:37:28,560 --> 00:37:37,839
compose and and

00:37:30,320 --> 00:37:37,839
attach configuration as volumes

00:37:43,200 --> 00:37:48,839
all right uh we have two more minutes

00:37:46,400 --> 00:37:50,400
before this ends i don't see any more

00:37:48,839 --> 00:37:53,200
questions so

00:37:50,400 --> 00:37:54,320
yeah i'm just going to open my contacts

00:37:53,200 --> 00:37:57,920
again

00:37:54,320 --> 00:38:01,520
i guess those will be provided in some

00:37:57,920 --> 00:38:02,480
notes by by the organizer i'm not really

00:38:01,520 --> 00:38:04,640
sure how it works

00:38:02,480 --> 00:38:06,400
but i'm just gonna keep it on on screen

00:38:04,640 --> 00:38:08,240
uh just in case

00:38:06,400 --> 00:38:10,320
yeah also you can find me on linkedin

00:38:08,240 --> 00:38:12,560
just uh search

00:38:10,320 --> 00:38:15,359
for stanislav kilberg um i'm the only

00:38:12,560 --> 00:38:19,839
one there with such name

00:38:15,359 --> 00:38:23,359
so friend me

00:38:19,839 --> 00:38:24,400
right last minute and i don't see any

00:38:23,359 --> 00:38:27,760
more questions

00:38:24,400 --> 00:38:28,880
all right i guess uh we can end it here

00:38:27,760 --> 00:38:30,960
then

00:38:28,880 --> 00:38:33,839
thanks for attending i hope it was

00:38:30,960 --> 00:38:33,839
useful

00:39:35,359 --> 00:39:37,440

YouTube URL: https://www.youtube.com/watch?v=YuwgoFmc05g


