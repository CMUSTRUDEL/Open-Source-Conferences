Title: Cloud-Native Cassandra
Publication date: 2020-10-21
Playlist: ApacheCon @Home 2020: Cassandra
Description: 
	Cloud-Native Cassandra
Patrick McFadin

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

Kubernetes is becoming a standard tool to deploy large scale infrastructure and lately, Apache Cassandra. We'll look at some of the methods used to deploy Cassandra using Kubernetes including storage options, networking configuration, and monitoring. In the past year, the Apache Cassandra project has also taken on the task of creating a common operator closer to the project. This will be a chance to get the latest status of the operator effort and where it will be headed post-Cassandra 4.0.

Patrick McFadin is the VP of Developer Relations at DataStax, where he leads a team devoted to making users of Apache Cassandra successful. He has also worked as Chief Evangelist for Apache Cassandra and consultant for DataStax, where he helped build some of the largest and exciting deployments in production. Previous to DataStax, he was Chief Architect at Hobsons and an Oracle DBA/Developer for over 15 years.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:23,920 --> 00:00:29,679
which is really cool

00:00:25,279 --> 00:00:33,520
so um let's just dive right in

00:00:29,679 --> 00:00:35,840
so why cassandra and kubernetes i mean

00:00:33,520 --> 00:00:37,040
it's it's funny because the answer i get

00:00:35,840 --> 00:00:39,040
a lot most time is

00:00:37,040 --> 00:00:40,879
well we run a lot of kubernetes but we

00:00:39,040 --> 00:00:45,200
don't run cassandra in it

00:00:40,879 --> 00:00:47,200
and that's perfectly fine um the uh

00:00:45,200 --> 00:00:48,719
this is the world we live in right

00:00:47,200 --> 00:00:50,640
here's behold

00:00:48,719 --> 00:00:52,079
the cluster everyone loves this thing

00:00:50,640 --> 00:00:54,800
right well

00:00:52,079 --> 00:00:56,320
on one side you get this distributed and

00:00:54,800 --> 00:00:57,280
shared nothing you know and that's

00:00:56,320 --> 00:00:59,840
pretty amazing

00:00:57,280 --> 00:01:01,520
yes but on the other side you get the

00:00:59,840 --> 00:01:03,840
configuration and coordination

00:01:01,520 --> 00:01:05,920
problems that go with it and you know

00:01:03,840 --> 00:01:07,360
that when you're deploying a cassandra

00:01:05,920 --> 00:01:10,840
cluster

00:01:07,360 --> 00:01:13,520
lots of things can go wrong really fast

00:01:10,840 --> 00:01:15,200
and um here's

00:01:13,520 --> 00:01:17,280
has anyone ever done this have you ever

00:01:15,200 --> 00:01:21,200
deployed a hundred node cluster

00:01:17,280 --> 00:01:24,080
or even like a two node cluster manually

00:01:21,200 --> 00:01:26,000
yeah what normally happens in that case

00:01:24,080 --> 00:01:28,720
i mean because we're all humans right

00:01:26,000 --> 00:01:30,320
you get that one node that has a fat

00:01:28,720 --> 00:01:34,079
finger config

00:01:30,320 --> 00:01:36,000
that's a bummer um and

00:01:34,079 --> 00:01:38,159
and it probably will be on fire for some

00:01:36,000 --> 00:01:39,600
reason like why is this one node acting

00:01:38,159 --> 00:01:42,399
bizarrely

00:01:39,600 --> 00:01:43,759
and it's because i i manually change the

00:01:42,399 --> 00:01:48,240
configuration

00:01:43,759 --> 00:01:50,560
and i'm a human so the more we get

00:01:48,240 --> 00:01:52,079
uh non-human interactions with our

00:01:50,560 --> 00:01:54,240
clusters the better off we're going to

00:01:52,079 --> 00:01:57,759
be in the long run

00:01:54,240 --> 00:02:00,880
i i when i was an undergraduate

00:01:57,759 --> 00:02:02,560
studying how to build databases i had a

00:02:00,880 --> 00:02:03,840
professor who said progress in

00:02:02,560 --> 00:02:06,840
technology

00:02:03,840 --> 00:02:09,280
is when we have the ability to be more

00:02:06,840 --> 00:02:12,480
lazy let that sink in

00:02:09,280 --> 00:02:14,239
i love being lazy so this is what we've

00:02:12,480 --> 00:02:16,000
done to be more lazy right

00:02:14,239 --> 00:02:17,360
we started out in the in the good old

00:02:16,000 --> 00:02:20,239
days when we did the

00:02:17,360 --> 00:02:21,280
traditional deployments um you know to

00:02:20,239 --> 00:02:24,800
take a tarball

00:02:21,280 --> 00:02:28,560
maybe a package maybe and use sd

00:02:24,800 --> 00:02:31,120
sdp um vi edit some files

00:02:28,560 --> 00:02:32,560
everything was bare metal yay let's rack

00:02:31,120 --> 00:02:34,400
up some equipment

00:02:32,560 --> 00:02:36,160
and then eventually we got into this

00:02:34,400 --> 00:02:38,800
world of virtualization

00:02:36,160 --> 00:02:39,840
uh that let us do some things like where

00:02:38,800 --> 00:02:42,879
we create images

00:02:39,840 --> 00:02:46,400
you know the gold the gold image

00:02:42,879 --> 00:02:49,599
uh using vmdks or um like in

00:02:46,400 --> 00:02:51,280
the clouds we use amy's and at least let

00:02:49,599 --> 00:02:53,040
us bundle things up and so it's

00:02:51,280 --> 00:02:55,200
consistent in some way

00:02:53,040 --> 00:02:57,760
um but we're you know we did other

00:02:55,200 --> 00:02:59,200
things and now containers right and

00:02:57,760 --> 00:03:01,200
you know it's with containers you're

00:02:59,200 --> 00:03:04,400
probably using docker

00:03:01,200 --> 00:03:06,560
and docker and docker docker and i know

00:03:04,400 --> 00:03:08,800
everyone i could just i don't need any

00:03:06,560 --> 00:03:11,360
of the angry typing what about lxc

00:03:08,800 --> 00:03:13,680
um yeah there are other ones out there

00:03:11,360 --> 00:03:14,800
but you know docker kind of set the pace

00:03:13,680 --> 00:03:17,040
but

00:03:14,800 --> 00:03:19,040
containers are a wonderful way to deploy

00:03:17,040 --> 00:03:22,400
an application for lots of reasons

00:03:19,040 --> 00:03:24,159
and it's standardized the way we've done

00:03:22,400 --> 00:03:25,760
infrastructure especially in data

00:03:24,159 --> 00:03:27,920
infrastructure

00:03:25,760 --> 00:03:28,799
but we've also done this business where

00:03:27,920 --> 00:03:30,840
we've

00:03:28,799 --> 00:03:32,640
layered on all this declarative

00:03:30,840 --> 00:03:36,400
infrastructure um

00:03:32,640 --> 00:03:37,920
bash was i saw i showed this picture to

00:03:36,400 --> 00:03:39,440
jonathan ellis and he says so what

00:03:37,920 --> 00:03:40,879
you're saying is in the beginning was

00:03:39,440 --> 00:03:44,239
bash

00:03:40,879 --> 00:03:47,840
yes yes i am saying that and it was good

00:03:44,239 --> 00:03:51,040
um that's what we used right bash and

00:03:47,840 --> 00:03:53,599
along the way we figured oh we need to

00:03:51,040 --> 00:03:54,720
put some programming around this so chef

00:03:53,599 --> 00:03:56,959
puppet ansible

00:03:54,720 --> 00:03:57,840
salt and then there's tools like ops

00:03:56,959 --> 00:04:01,840
center

00:03:57,840 --> 00:04:01,840
terraform um

00:04:03,360 --> 00:04:08,159
so yeah there's a lot going on here

00:04:09,040 --> 00:04:15,680
can anybody hear me i just got someone

00:04:11,760 --> 00:04:17,649
slacking me saying they can't hear me

00:04:15,680 --> 00:04:21,040
okay

00:04:17,649 --> 00:04:24,080
[Laughter]

00:04:21,040 --> 00:04:27,280
yes man you know what a

00:04:24,080 --> 00:04:28,800
panic moment that is nate nate

00:04:27,280 --> 00:04:30,320
you need to stop doing this to me he

00:04:28,800 --> 00:04:31,600
probably did this to me on purpose

00:04:30,320 --> 00:04:33,759
when you're sitting there i just talked

00:04:31,600 --> 00:04:34,560
for five minutes and then no one heard

00:04:33,759 --> 00:04:36,960
me

00:04:34,560 --> 00:04:39,600
uh this is why we should be in new

00:04:36,960 --> 00:04:39,600
orleans right

00:04:40,639 --> 00:04:44,479
oh there is something there's some real

00:04:42,160 --> 00:04:45,680
classic funny people in here

00:04:44,479 --> 00:04:48,479
this is why we can't have nice

00:04:45,680 --> 00:04:52,000
conferences people all right fine

00:04:48,479 --> 00:04:54,000
nate i'm on so

00:04:52,000 --> 00:04:55,600
back to where we where were we oh yes

00:04:54,000 --> 00:04:59,199
deploying infrastructure

00:04:55,600 --> 00:05:00,320
terraform is cool kid cloud formation if

00:04:59,199 --> 00:05:04,080
you're into the cloudy

00:05:00,320 --> 00:05:04,080
madness of it all um

00:05:04,560 --> 00:05:11,039
but what is it all leading to kubernetes

00:05:08,000 --> 00:05:11,360
and the reason we were seem to be doing

00:05:11,039 --> 00:05:14,960
this

00:05:11,360 --> 00:05:17,520
as a as an organization around the world

00:05:14,960 --> 00:05:18,400
of people who deploy data infrastructure

00:05:17,520 --> 00:05:20,639
is because

00:05:18,400 --> 00:05:23,039
kubernetes is orchestrating the thing

00:05:20,639 --> 00:05:25,600
that we all decided that we like to use

00:05:23,039 --> 00:05:27,680
containers and there have been multiple

00:05:25,600 --> 00:05:30,720
ways to orchestrate containers

00:05:27,680 --> 00:05:31,280
kubernetes just won i'm gonna declare

00:05:30,720 --> 00:05:34,479
that

00:05:31,280 --> 00:05:36,880
um and the adoption rate on kubernetes

00:05:34,479 --> 00:05:39,759
is just taking off like crazy and

00:05:36,880 --> 00:05:40,160
for good reasons what's fascinating to

00:05:39,759 --> 00:05:41,840
me

00:05:40,160 --> 00:05:44,320
is that kubernetes and this is something

00:05:41,840 --> 00:05:45,280
i've studied quite a bit over the past

00:05:44,320 --> 00:05:47,919
year is

00:05:45,280 --> 00:05:49,039
where is kubernetes in respect to data

00:05:47,919 --> 00:05:51,440
infrastructure

00:05:49,039 --> 00:05:52,720
and they're really not joined well

00:05:51,440 --> 00:05:55,680
together right now

00:05:52,720 --> 00:05:56,400
and the reason is is because we solved

00:05:55,680 --> 00:05:57,600
um

00:05:56,400 --> 00:05:59,919
deploying large-scale data

00:05:57,600 --> 00:06:00,639
infrastructure way before kubernetes was

00:05:59,919 --> 00:06:03,039
even a

00:06:00,639 --> 00:06:03,680
glimmer in the borg's eye see what i did

00:06:03,039 --> 00:06:06,720
there

00:06:03,680 --> 00:06:09,039
um but that that

00:06:06,720 --> 00:06:09,759
problem now is coming we're coming to a

00:06:09,039 --> 00:06:12,080
head

00:06:09,759 --> 00:06:13,919
that things are changing so we deployed

00:06:12,080 --> 00:06:15,280
a lot of application infrastructure

00:06:13,919 --> 00:06:16,960
using various methods

00:06:15,280 --> 00:06:18,720
meaning on the top layers the

00:06:16,960 --> 00:06:21,600
microservices the

00:06:18,720 --> 00:06:22,080
um the load balancers that sort of thing

00:06:21,600 --> 00:06:25,360
but

00:06:22,080 --> 00:06:26,960
we're coming it's coming due and what is

00:06:25,360 --> 00:06:29,360
it about cassandra

00:06:26,960 --> 00:06:30,639
that fits into this world well i don't

00:06:29,360 --> 00:06:32,479
know if you all saw this this is a

00:06:30,639 --> 00:06:35,520
really cool survey that's now on the

00:06:32,479 --> 00:06:38,800
casino cassandra.apachedoor.org website

00:06:35,520 --> 00:06:42,240
um and it was just a state of cassandra

00:06:38,800 --> 00:06:44,000
users um survey and there's

00:06:42,240 --> 00:06:46,160
there's some really cool information in

00:06:44,000 --> 00:06:47,759
here but you know i put this graph on

00:06:46,160 --> 00:06:49,759
here important reasons to love because

00:06:47,759 --> 00:06:51,280
or to use cassandra you know right at

00:06:49,759 --> 00:06:51,680
the top there the stuff that we expect

00:06:51,280 --> 00:06:53,440
to see

00:06:51,680 --> 00:06:55,360
it's like great for hybrid you know can

00:06:53,440 --> 00:06:57,120
you pretty much use it anywhere

00:06:55,360 --> 00:06:59,599
um very secure i was actually surprised

00:06:57,120 --> 00:07:01,440
by that and uh highly scalable

00:06:59,599 --> 00:07:03,120
i thought that would be the top but down

00:07:01,440 --> 00:07:06,560
at the very bottom

00:07:03,120 --> 00:07:09,199
want one easy to operate and

00:07:06,560 --> 00:07:11,039
so what it says to me is love cassandra

00:07:09,199 --> 00:07:14,960
i don't like to operate it as much

00:07:11,039 --> 00:07:17,360
now i know i talk to a lot of folks

00:07:14,960 --> 00:07:18,560
once you get used to having to running

00:07:17,360 --> 00:07:21,680
cassandra and you're

00:07:18,560 --> 00:07:22,880
good at it it's not that hard it does

00:07:21,680 --> 00:07:24,639
have things that

00:07:22,880 --> 00:07:26,240
bug you and i think that a lot of that

00:07:24,639 --> 00:07:27,919
is if you look at what's happening in

00:07:26,240 --> 00:07:29,919
4.0 right now

00:07:27,919 --> 00:07:31,840
that's a whole lot of anger at not

00:07:29,919 --> 00:07:35,280
having to care and feed

00:07:31,840 --> 00:07:37,360
cassandra and that's great but

00:07:35,280 --> 00:07:40,479
the basic operations can be pretty tough

00:07:37,360 --> 00:07:43,120
and it's not just a cassandra problem

00:07:40,479 --> 00:07:43,680
so we built distributed data operations

00:07:43,120 --> 00:07:47,199
for

00:07:43,680 --> 00:07:48,319
years i mean i i deployed plenty of

00:07:47,199 --> 00:07:51,759
hadoop

00:07:48,319 --> 00:07:54,479
uh and kafka and cassandra

00:07:51,759 --> 00:07:56,240
and a lot of other distributed data data

00:07:54,479 --> 00:07:57,360
infrastructure in my day and i use a lot

00:07:56,240 --> 00:08:01,680
of different things to do it

00:07:57,360 --> 00:08:04,720
like for instance yarn um and

00:08:01,680 --> 00:08:05,360
when we when we did that we we created i

00:08:04,720 --> 00:08:08,319
think this

00:08:05,360 --> 00:08:10,080
is huge mass well declarative

00:08:08,319 --> 00:08:12,879
application infrastructure

00:08:10,080 --> 00:08:14,560
was later in this whole thing and here

00:08:12,879 --> 00:08:17,360
we are in 2020

00:08:14,560 --> 00:08:18,960
trigger warning sorry it is still 2020.

00:08:17,360 --> 00:08:19,599
but i think we're at the point where now

00:08:18,960 --> 00:08:21,440
where

00:08:19,599 --> 00:08:22,960
these things that were on different

00:08:21,440 --> 00:08:23,919
trajectories are starting to come

00:08:22,960 --> 00:08:27,199
together

00:08:23,919 --> 00:08:29,759
and data ops folks who do data ops are

00:08:27,199 --> 00:08:31,680
looking to become more cloud native and

00:08:29,759 --> 00:08:33,519
the reason being is because it's easier

00:08:31,680 --> 00:08:34,640
to work with in that way

00:08:33,519 --> 00:08:37,279
but what are the challenges with

00:08:34,640 --> 00:08:39,120
cassandra kubernetes well there's three

00:08:37,279 --> 00:08:41,839
problem classes that i'm going to point

00:08:39,120 --> 00:08:46,000
out um topology networking and storage

00:08:41,839 --> 00:08:49,040
of course like what else is left um

00:08:46,000 --> 00:08:50,240
so from a kubernetes standpoint because

00:08:49,040 --> 00:08:51,760
it's trying to orchestrate all these

00:08:50,240 --> 00:08:54,320
containers it's looking to just

00:08:51,760 --> 00:08:55,279
pack things in and be super efficient

00:08:54,320 --> 00:08:56,880
and

00:08:55,279 --> 00:08:58,320
that is great when you're running a

00:08:56,880 --> 00:09:00,240
node.js server

00:08:58,320 --> 00:09:01,440
but not so great when you're running a

00:09:00,240 --> 00:09:03,120
cassandra server

00:09:01,440 --> 00:09:06,000
because cassandra's like no no no i have

00:09:03,120 --> 00:09:08,000
my own version of how things should be

00:09:06,000 --> 00:09:09,279
and i'm distributing my data for maximum

00:09:08,000 --> 00:09:10,800
availability

00:09:09,279 --> 00:09:12,399
and by the way i probably want to take

00:09:10,800 --> 00:09:13,839
the entire machine with me

00:09:12,399 --> 00:09:15,839
and that's great i mean that's what

00:09:13,839 --> 00:09:18,320
cassandra is supposed to do but

00:09:15,839 --> 00:09:20,640
these two things clash quite a bit uh

00:09:18,320 --> 00:09:22,560
the way kubernetes sees distributed

00:09:20,640 --> 00:09:26,720
and the way cassandra sees things

00:09:22,560 --> 00:09:26,720
distributed don't exactly match

00:09:27,040 --> 00:09:30,880
so when it comes to networking uh if

00:09:29,680 --> 00:09:33,040
you've ever

00:09:30,880 --> 00:09:34,320
had the privilege of trying to make

00:09:33,040 --> 00:09:37,040
kubernetes networking

00:09:34,320 --> 00:09:37,920
a thing um you will understand the

00:09:37,040 --> 00:09:41,279
saving

00:09:37,920 --> 00:09:44,720
every cluster is an island and

00:09:41,279 --> 00:09:46,880
it's meant to be that way um it's this

00:09:44,720 --> 00:09:49,120
security bliss where you just like of

00:09:46,880 --> 00:09:52,000
course is secured no one can get to it

00:09:49,120 --> 00:09:53,600
um what was the old nsa red book the

00:09:52,000 --> 00:09:54,880
most secure computer is the one that's

00:09:53,600 --> 00:09:56,959
off

00:09:54,880 --> 00:09:58,880
so they kind of took that right but the

00:09:56,959 --> 00:10:01,279
cassandra world we see

00:09:58,880 --> 00:10:03,200
there's a really strong need for those

00:10:01,279 --> 00:10:05,920
cassandra nodes to see each other

00:10:03,200 --> 00:10:07,120
especially across multiple data centers

00:10:05,920 --> 00:10:08,800
and

00:10:07,120 --> 00:10:10,480
that all the ports that need to be

00:10:08,800 --> 00:10:12,800
opened and those are

00:10:10,480 --> 00:10:14,160
very important for make sure you have an

00:10:12,800 --> 00:10:16,640
efficiently running cluster

00:10:14,160 --> 00:10:17,600
so these two things are now something we

00:10:16,640 --> 00:10:20,240
have to manage

00:10:17,600 --> 00:10:21,279
and then finally with storage uh with

00:10:20,240 --> 00:10:23,920
kubernetes

00:10:21,279 --> 00:10:24,959
originally it was for stateless

00:10:23,920 --> 00:10:26,880
workloads

00:10:24,959 --> 00:10:28,480
meaning i don't care here's some block

00:10:26,880 --> 00:10:31,680
storage get to it

00:10:28,480 --> 00:10:33,839
and stateless uh applications

00:10:31,680 --> 00:10:35,120
like a web web application something

00:10:33,839 --> 00:10:38,000
like that are great

00:10:35,120 --> 00:10:38,640
i mean that's a fantastic kubernetes use

00:10:38,000 --> 00:10:42,079
case

00:10:38,640 --> 00:10:45,600
however with cassandra you know that

00:10:42,079 --> 00:10:46,640
ephemeral is not okay and when we deploy

00:10:45,600 --> 00:10:48,800
a cassandra node

00:10:46,640 --> 00:10:50,320
there is some stickiness to that the ip

00:10:48,800 --> 00:10:52,320
address is sticky in the cluster

00:10:50,320 --> 00:10:54,880
gossip wants to keep track of that ip

00:10:52,320 --> 00:10:55,200
address and the data that's on the disk

00:10:54,880 --> 00:10:57,120
is

00:10:55,200 --> 00:11:00,079
really important it's not like you can

00:10:57,120 --> 00:11:01,279
just delete the disk and be okay unless

00:11:00,079 --> 00:11:02,560
you want to repair something in your

00:11:01,279 --> 00:11:05,040
cluster so

00:11:02,560 --> 00:11:07,040
cassandra has a different notion of what

00:11:05,040 --> 00:11:08,480
node is compared to kubernetes so here's

00:11:07,040 --> 00:11:11,040
some those are things we need to

00:11:08,480 --> 00:11:11,600
take care of so i'm going to go into a

00:11:11,040 --> 00:11:15,279
little bit of

00:11:11,600 --> 00:11:16,640
how we want to make it work this is

00:11:15,279 --> 00:11:19,680
because you may be watching this in the

00:11:16,640 --> 00:11:22,959
future this is as of september 2020

00:11:19,680 --> 00:11:23,519
and um it is subject to change it could

00:11:22,959 --> 00:11:25,839
change

00:11:23,519 --> 00:11:27,040
this week um and that's great we're

00:11:25,839 --> 00:11:29,120
moving fast as

00:11:27,040 --> 00:11:30,720
a community and there's a lot of really

00:11:29,120 --> 00:11:32,720
cool stuff happening around casino

00:11:30,720 --> 00:11:34,959
kubernetes

00:11:32,720 --> 00:11:36,560
operator let's start at the basic unit

00:11:34,959 --> 00:11:38,399
of making it work

00:11:36,560 --> 00:11:40,320
all those challenges i mentioned before

00:11:38,399 --> 00:11:43,519
about networking topology

00:11:40,320 --> 00:11:45,440
storage um we can mitigate a lot of

00:11:43,519 --> 00:11:48,560
those with a great operator

00:11:45,440 --> 00:11:50,399
you could think of an operator as i love

00:11:48,560 --> 00:11:52,399
this um

00:11:50,399 --> 00:11:54,320
ragu from yelp had this great quote he's

00:11:52,399 --> 00:11:55,760
like it's think of it as a robot in your

00:11:54,320 --> 00:11:57,440
data center

00:11:55,760 --> 00:11:59,600
it just runs around taking care of

00:11:57,440 --> 00:12:03,200
things for you this is automation

00:11:59,600 --> 00:12:04,880
and in this case it's translating what

00:12:03,200 --> 00:12:06,959
cassandra can do

00:12:04,880 --> 00:12:09,200
to kubernetes and vice versa so when

00:12:06,959 --> 00:12:11,040
kubernetes says i would like to deploy

00:12:09,200 --> 00:12:12,639
some nodes in cluster i need to deploy a

00:12:11,040 --> 00:12:15,120
cluster

00:12:12,639 --> 00:12:16,000
it's translating that desire into an

00:12:15,120 --> 00:12:19,360
action

00:12:16,000 --> 00:12:21,519
that is cassandra cassandra right-sized

00:12:19,360 --> 00:12:23,200
so for things like node provisioning and

00:12:21,519 --> 00:12:25,839
node placement replacement

00:12:23,200 --> 00:12:28,320
um getting you know ditching an old node

00:12:25,839 --> 00:12:30,959
and replacing it is kind of a

00:12:28,320 --> 00:12:32,480
a specific operation to cassandra and if

00:12:30,959 --> 00:12:35,680
kubernetes had its way it would just

00:12:32,480 --> 00:12:37,839
replace the node immediately and um

00:12:35,680 --> 00:12:38,959
that's not exactly what we want to do

00:12:37,839 --> 00:12:41,040
but operators are

00:12:38,959 --> 00:12:43,120
are right now the way that it's making

00:12:41,040 --> 00:12:45,120
we're making this work

00:12:43,120 --> 00:12:46,160
as it sits today we really have two main

00:12:45,120 --> 00:12:49,040
contenders for

00:12:46,160 --> 00:12:50,000
um operators that are out there um and

00:12:49,040 --> 00:12:51,600
these are

00:12:50,000 --> 00:12:53,360
both very you know they're very strong

00:12:51,600 --> 00:12:54,320
and this is part of our community is

00:12:53,360 --> 00:12:55,920
where we

00:12:54,320 --> 00:12:57,760
we have some good ideas that are out

00:12:55,920 --> 00:12:59,279
there and so i'm just going to cover

00:12:57,760 --> 00:12:59,680
both of these or just talk about both

00:12:59,279 --> 00:13:02,079
these

00:12:59,680 --> 00:13:04,000
versus cascop this is by the team at

00:13:02,079 --> 00:13:07,519
orange in france and

00:13:04,000 --> 00:13:09,040
um they have one called cascop

00:13:07,519 --> 00:13:11,360
i have to give them mad props because

00:13:09,040 --> 00:13:13,360
they actually created an a logo

00:13:11,360 --> 00:13:16,000
and it's cool it's a little you know

00:13:13,360 --> 00:13:18,160
kubernetes thing in the cassandra eye

00:13:16,000 --> 00:13:20,480
it's pretty cool and then we have cavs

00:13:18,160 --> 00:13:22,639
operator from data stacks

00:13:20,480 --> 00:13:24,399
which is primarily being used for

00:13:22,639 --> 00:13:28,000
running on the astra

00:13:24,399 --> 00:13:31,040
standards or service no logo

00:13:28,000 --> 00:13:31,600
what's up come on all right so there's

00:13:31,040 --> 00:13:35,440
there's a hit

00:13:31,600 --> 00:13:37,600
right there but um both of these are

00:13:35,440 --> 00:13:38,720
in right now in this there's discussions

00:13:37,600 --> 00:13:41,760
going on the dev list

00:13:38,720 --> 00:13:44,800
about uh donating this code

00:13:41,760 --> 00:13:46,639
um just stay tuned they're both really

00:13:44,800 --> 00:13:49,120
good operators for the things that they

00:13:46,639 --> 00:13:51,440
do if you were to take a venn diagram

00:13:49,120 --> 00:13:53,199
there would be a whole lot of similarity

00:13:51,440 --> 00:13:53,920
with a very little amount of difference

00:13:53,199 --> 00:13:55,519
and that's

00:13:53,920 --> 00:13:57,600
and that's when you realize okay we have

00:13:55,519 --> 00:13:59,600
a potential way out of this

00:13:57,600 --> 00:14:01,040
but one of what i'm going to talk about

00:13:59,600 --> 00:14:02,240
in this talk is cause operator because

00:14:01,040 --> 00:14:04,720
that's the one i know the most

00:14:02,240 --> 00:14:06,399
and you can roughly translate most to

00:14:04,720 --> 00:14:07,680
what i say into cast cop as well because

00:14:06,399 --> 00:14:11,199
they they

00:14:07,680 --> 00:14:13,920
accomplish the same kind of task

00:14:11,199 --> 00:14:15,600
so the first thing that we have to start

00:14:13,920 --> 00:14:16,560
with when we're deploying kubernetes and

00:14:15,600 --> 00:14:19,600
cassandra

00:14:16,560 --> 00:14:20,399
or cassandra in kubernetes um is the

00:14:19,600 --> 00:14:22,800
container

00:14:20,399 --> 00:14:23,920
because kubernetes is container

00:14:22,800 --> 00:14:25,360
orchestration

00:14:23,920 --> 00:14:27,279
you gotta have something to orchestrate

00:14:25,360 --> 00:14:28,959
right well in

00:14:27,279 --> 00:14:30,959
particular in the particular case with

00:14:28,959 --> 00:14:33,920
calves operator we actually

00:14:30,959 --> 00:14:35,120
uh because and i'll get to this later

00:14:33,920 --> 00:14:36,399
about some of the things that need to

00:14:35,120 --> 00:14:37,680
change a cassandra to make it more

00:14:36,399 --> 00:14:41,839
kubernetes ready

00:14:37,680 --> 00:14:45,839
um we we bundled a management api

00:14:41,839 --> 00:14:47,040
in with um the cassandra node itself in

00:14:45,839 --> 00:14:48,880
the container

00:14:47,040 --> 00:14:50,639
and the reason doing that is because

00:14:48,880 --> 00:14:52,240
that's a better way that's a

00:14:50,639 --> 00:14:53,760
easier way to talk to kubernetes

00:14:52,240 --> 00:14:57,680
kubernetes likes to talk

00:14:53,760 --> 00:15:01,199
in apis like a rest call do this do that

00:14:57,680 --> 00:15:03,199
and um if those of you have had

00:15:01,199 --> 00:15:04,399
been running cassandra for a while you

00:15:03,199 --> 00:15:05,920
know what the

00:15:04,399 --> 00:15:08,480
you know how to configure your cassandra

00:15:05,920 --> 00:15:11,040
cluster by using jmx

00:15:08,480 --> 00:15:11,600
which is in a far superior way no it's

00:15:11,040 --> 00:15:13,920
not

00:15:11,600 --> 00:15:15,199
um but jmx is kind of the way we do

00:15:13,920 --> 00:15:18,320
things and

00:15:15,199 --> 00:15:19,760
that's uh that's not anything

00:15:18,320 --> 00:15:21,600
in the kubernetes world that they're

00:15:19,760 --> 00:15:24,839
willing to even uh adopt

00:15:21,600 --> 00:15:28,079
so we should just move on so

00:15:24,839 --> 00:15:28,560
a in the world and i'm i'm going to go

00:15:28,079 --> 00:15:31,920
through some

00:15:28,560 --> 00:15:33,440
terminology and um i apologize if you

00:15:31,920 --> 00:15:35,680
know nothing about kubernetes i'll try

00:15:33,440 --> 00:15:38,000
to just kind of give you the tl dr

00:15:35,680 --> 00:15:39,360
but there's some overlapping technology

00:15:38,000 --> 00:15:41,839
that is completely

00:15:39,360 --> 00:15:43,040
or terminology that is completely

00:15:41,839 --> 00:15:44,480
different from each other but kind of

00:15:43,040 --> 00:15:46,399
mean the same thing

00:15:44,480 --> 00:15:48,240
so in this case like when we talk about

00:15:46,399 --> 00:15:51,279
a pod what is a pod

00:15:48,240 --> 00:15:53,920
besides a group of whales well it's a

00:15:51,279 --> 00:15:55,279
group of apps or a group of state uh

00:15:53,920 --> 00:15:58,399
stateful services

00:15:55,279 --> 00:16:01,680
and uh i think the the

00:15:58,399 --> 00:16:04,720
cassandra node as we understand it

00:16:01,680 --> 00:16:05,440
is what we translate into a kubernetes

00:16:04,720 --> 00:16:08,079
pod

00:16:05,440 --> 00:16:09,040
so that has the container the storage

00:16:08,079 --> 00:16:11,120
and the network

00:16:09,040 --> 00:16:13,440
so this is think of it as almost like

00:16:11,120 --> 00:16:15,680
the what you would expect to

00:16:13,440 --> 00:16:17,040
roll out in like a cloud image or an

00:16:15,680 --> 00:16:19,040
emmy or something like that here's all

00:16:17,040 --> 00:16:21,519
the stuff that i need an ip address

00:16:19,040 --> 00:16:22,240
with some block storage that has my data

00:16:21,519 --> 00:16:25,040
um

00:16:22,240 --> 00:16:26,880
and all of that gets created as part of

00:16:25,040 --> 00:16:28,720
the kubernetes experience but it has to

00:16:26,880 --> 00:16:31,920
be done in a way that cassandra will

00:16:28,720 --> 00:16:36,320
accept that um a couple of terms in here

00:16:31,920 --> 00:16:38,560
um within storage in in kubernetes land

00:16:36,320 --> 00:16:40,320
um they use these things called

00:16:38,560 --> 00:16:42,399
persistent volumes

00:16:40,320 --> 00:16:43,680
and in order for you to use that you

00:16:42,399 --> 00:16:46,079
have to create a

00:16:43,680 --> 00:16:47,279
persistent volume claim so that's what

00:16:46,079 --> 00:16:50,399
you see in the pvc

00:16:47,279 --> 00:16:52,800
pv persistent persistent volume claim

00:16:50,399 --> 00:16:54,240
on a persistent volume which basically

00:16:52,800 --> 00:16:57,440
means you're just calling dibs

00:16:54,240 --> 00:17:00,240
on it and it keeps other nodes from ever

00:16:57,440 --> 00:17:00,240
do using them

00:17:00,800 --> 00:17:06,079
so the stateful set um it's not the

00:17:04,240 --> 00:17:06,959
newest thing in kubernetes but it is

00:17:06,079 --> 00:17:10,160
pretty new

00:17:06,959 --> 00:17:12,079
and it was brought about by the fact

00:17:10,160 --> 00:17:15,520
that kubernetes was really built around

00:17:12,079 --> 00:17:17,360
stateless um so we don't really care

00:17:15,520 --> 00:17:20,000
if the ip comes and goes the storage

00:17:17,360 --> 00:17:22,400
comes and goes so

00:17:20,000 --> 00:17:23,760
when we when we build stateful

00:17:22,400 --> 00:17:25,280
applications

00:17:23,760 --> 00:17:26,880
there's this list of things that we

00:17:25,280 --> 00:17:28,880
don't want to change and that's what a

00:17:26,880 --> 00:17:31,039
stateful set is

00:17:28,880 --> 00:17:32,160
deploying kubernetes with staple sets

00:17:31,039 --> 00:17:34,720
allows us to

00:17:32,160 --> 00:17:36,240
have some assurances so i know that this

00:17:34,720 --> 00:17:38,559
is the disc that i'm going to get if

00:17:36,240 --> 00:17:40,240
if the compute side dies i know i'm

00:17:38,559 --> 00:17:42,880
going to get the disk back

00:17:40,240 --> 00:17:44,160
persistent volume claim if the ip dies i

00:17:42,880 --> 00:17:44,799
know that i'm going to be able to set it

00:17:44,160 --> 00:17:46,640
up again

00:17:44,799 --> 00:17:48,240
so these stateful sets are really

00:17:46,640 --> 00:17:50,320
critical for staple workloads like

00:17:48,240 --> 00:17:52,160
cassandra

00:17:50,320 --> 00:17:54,799
so what we've done is we've used

00:17:52,160 --> 00:17:57,200
stateful sets to create like a rack

00:17:54,799 --> 00:17:58,960
um like you know when you deploy let's

00:17:57,200 --> 00:18:02,240
say an ami in a cloud

00:17:58,960 --> 00:18:04,799
you know that that the stateful set

00:18:02,240 --> 00:18:05,840
to iraq is like an availability zone to

00:18:04,799 --> 00:18:09,440
a rack

00:18:05,840 --> 00:18:11,600
um this gives cassandra some

00:18:09,440 --> 00:18:13,280
some input on where the data placement

00:18:11,600 --> 00:18:14,240
is that's that's the rack awareness of a

00:18:13,280 --> 00:18:16,240
casino note

00:18:14,240 --> 00:18:18,320
or standard cluster so that you don't

00:18:16,240 --> 00:18:20,559
have any overlaps in your data or

00:18:18,320 --> 00:18:22,480
weird things so the whole if you go back

00:18:20,559 --> 00:18:23,919
like why was rack awareness important

00:18:22,480 --> 00:18:25,760
well what if you pulled a power plug on

00:18:23,919 --> 00:18:28,880
an entire rack of equipment

00:18:25,760 --> 00:18:30,559
all right that means that situation how

00:18:28,880 --> 00:18:32,559
do you manage that it's the same data

00:18:30,559 --> 00:18:34,799
center but you wiped out a rack

00:18:32,559 --> 00:18:36,320
that means that potentially you're not

00:18:34,799 --> 00:18:37,360
going to lose any data like we're not

00:18:36,320 --> 00:18:40,559
going to overlap

00:18:37,360 --> 00:18:43,120
uh token ranges inside the same rack

00:18:40,559 --> 00:18:45,120
just it's just an availability feature

00:18:43,120 --> 00:18:47,360
so we're mapping that rack to a stateful

00:18:45,120 --> 00:18:47,360
set

00:18:47,679 --> 00:18:51,679
and then to deploy we have this custom

00:18:50,400 --> 00:18:54,400
resource and

00:18:51,679 --> 00:18:56,559
um so you could be cool in in kubernetes

00:18:54,400 --> 00:18:58,400
land you can call it a crd

00:18:56,559 --> 00:19:00,559
to say that and everyone's like uh yeah

00:18:58,400 --> 00:19:03,600
crd and

00:19:00,559 --> 00:19:04,880
the crd and the custom resource that you

00:19:03,600 --> 00:19:06,160
were creating in this case with

00:19:04,880 --> 00:19:08,400
cassandra

00:19:06,160 --> 00:19:10,000
is the configuration for the for the

00:19:08,400 --> 00:19:11,600
cluster and from the nodes themselves

00:19:10,000 --> 00:19:13,679
but you're just telling it to cookie

00:19:11,600 --> 00:19:15,360
cutter that placement

00:19:13,679 --> 00:19:18,160
all over if you see like what we've got

00:19:15,360 --> 00:19:18,679
here for instance we specify the server

00:19:18,160 --> 00:19:21,360
version

00:19:18,679 --> 00:19:22,960
3.11.6 how many of these in the cluster

00:19:21,360 --> 00:19:24,080
do we need here's some configuration

00:19:22,960 --> 00:19:28,000
like num tokens

00:19:24,080 --> 00:19:29,600
um this is a major lifesaver this is

00:19:28,000 --> 00:19:30,480
where kubernetes starts getting really

00:19:29,600 --> 00:19:32,640
useful

00:19:30,480 --> 00:19:33,520
because now and i know we've done this

00:19:32,640 --> 00:19:35,679
plenty with other

00:19:33,520 --> 00:19:36,559
things but at least you have this in

00:19:35,679 --> 00:19:38,720
kubernetes

00:19:36,559 --> 00:19:40,160
and it does a different way of enforcing

00:19:38,720 --> 00:19:42,640
this

00:19:40,160 --> 00:19:44,880
which is declare my infrastructure and

00:19:42,640 --> 00:19:47,120
deploy it

00:19:44,880 --> 00:19:48,880
so let's go through this is a startup

00:19:47,120 --> 00:19:51,360
sequence so

00:19:48,880 --> 00:19:52,240
i said i want to create this uh this

00:19:51,360 --> 00:19:54,320
cluster

00:19:52,240 --> 00:19:55,679
here's how it walks through it so in

00:19:54,320 --> 00:19:58,160
this case it creates

00:19:55,679 --> 00:19:59,679
the stateful sets first so we need to

00:19:58,160 --> 00:20:01,520
create a place and these are like the

00:19:59,679 --> 00:20:04,480
racks like i said

00:20:01,520 --> 00:20:04,960
um it provisions each one of the pods

00:20:04,480 --> 00:20:07,200
and

00:20:04,960 --> 00:20:09,440
those are your individual nodes now each

00:20:07,200 --> 00:20:12,640
one of these are off at this point

00:20:09,440 --> 00:20:14,320
so the stateful set being the rack

00:20:12,640 --> 00:20:18,400
now we have nodes sitting inside of them

00:20:14,320 --> 00:20:18,400
called pods so staple set pods

00:20:18,480 --> 00:20:22,400
that cassandra pod again is just this

00:20:20,799 --> 00:20:23,120
part where now we have storage and

00:20:22,400 --> 00:20:25,520
networking

00:20:23,120 --> 00:20:27,280
this is just a quick review we also have

00:20:25,520 --> 00:20:30,400
it set up so that it's um

00:20:27,280 --> 00:20:33,600
it will do the monitoring as well

00:20:30,400 --> 00:20:35,520
so here we go we provision those pods

00:20:33,600 --> 00:20:37,679
and what happens is we start that first

00:20:35,520 --> 00:20:40,480
one

00:20:37,679 --> 00:20:41,039
and it will start them in order this is

00:20:40,480 --> 00:20:44,080
where an

00:20:41,039 --> 00:20:47,760
operator comes in very handy because

00:20:44,080 --> 00:20:49,120
kubernetes just says go do it

00:20:47,760 --> 00:20:51,200
and let's say that you're starting an

00:20:49,120 --> 00:20:52,000
nginx server it would just try to start

00:20:51,200 --> 00:20:54,080
all of them

00:20:52,000 --> 00:20:55,600
it doesn't really think about like well

00:20:54,080 --> 00:20:58,000
there's an order to this

00:20:55,600 --> 00:20:59,360
or as we all know in cassandra land it's

00:20:58,000 --> 00:21:02,400
not as important

00:20:59,360 --> 00:21:05,280
sometimes to um well you

00:21:02,400 --> 00:21:06,000
i would say it's let me rewind that it's

00:21:05,280 --> 00:21:08,240
important

00:21:06,000 --> 00:21:09,120
for you to just not bomb an entire

00:21:08,240 --> 00:21:12,240
cluster

00:21:09,120 --> 00:21:14,559
and start it all at the same time um

00:21:12,240 --> 00:21:16,960
you will get interesting results i've

00:21:14,559 --> 00:21:20,480
done it it's kind of fun to do it so

00:21:16,960 --> 00:21:22,960
you know try it sometime but

00:21:20,480 --> 00:21:24,000
the cassandra cassandra noses are coming

00:21:22,960 --> 00:21:26,880
up come up in

00:21:24,000 --> 00:21:28,240
order across the stateful set so across

00:21:26,880 --> 00:21:31,039
those racks

00:21:28,240 --> 00:21:32,799
and then in the next line down the order

00:21:31,039 --> 00:21:33,600
so it's starting to create this cluster

00:21:32,799 --> 00:21:37,760
in a very

00:21:33,600 --> 00:21:37,760
predictable and useful way

00:21:38,000 --> 00:21:45,520
so remember this yeah

00:21:41,840 --> 00:21:48,000
we just this is a big deal now we have

00:21:45,520 --> 00:21:48,960
declarative infrastructure that is

00:21:48,000 --> 00:21:51,280
enforced

00:21:48,960 --> 00:21:52,720
so something goes wrong kubernetes is

00:21:51,280 --> 00:21:54,320
going to try to fix it

00:21:52,720 --> 00:21:55,919
that's our little robot the operator is

00:21:54,320 --> 00:21:58,080
going to be out there working on it

00:21:55,919 --> 00:21:59,840
but also let's say we want to make some

00:21:58,080 --> 00:22:01,840
changes

00:21:59,840 --> 00:22:03,600
one of the this is this is what

00:22:01,840 --> 00:22:06,240
separates the uh

00:22:03,600 --> 00:22:07,360
the real admins from the noobs is a

00:22:06,240 --> 00:22:08,480
rolling upgrade

00:22:07,360 --> 00:22:10,400
what happens if you want to upgrade

00:22:08,480 --> 00:22:11,440
cassandra now we know cassandra does

00:22:10,400 --> 00:22:15,760
online upgrades

00:22:11,440 --> 00:22:18,640
but how do we do that in kubernetes

00:22:15,760 --> 00:22:20,320
easy you update the configuration let's

00:22:18,640 --> 00:22:20,799
say i want to bump the version from

00:22:20,320 --> 00:22:24,000
eleven

00:22:20,799 --> 00:22:27,120
six to eleven seven no problem

00:22:24,000 --> 00:22:28,240
change that use cube cuddle which is the

00:22:27,120 --> 00:22:30,240
command line tool

00:22:28,240 --> 00:22:31,919
um there's other ways to do this but

00:22:30,240 --> 00:22:32,880
let's go old school and do a command

00:22:31,919 --> 00:22:35,440
line

00:22:32,880 --> 00:22:37,039
you you submit that new configuration

00:22:35,440 --> 00:22:37,840
and now that's the new state of the

00:22:37,039 --> 00:22:40,240
cluster

00:22:37,840 --> 00:22:41,200
as kubernetes kubernetes sees it and

00:22:40,240 --> 00:22:43,280
kubernetes is like

00:22:41,200 --> 00:22:45,280
i'm on it and this is where it starts

00:22:43,280 --> 00:22:46,799
interfacing with the operator and starts

00:22:45,280 --> 00:22:49,520
making those changes

00:22:46,799 --> 00:22:51,120
and the operator's job is to keep

00:22:49,520 --> 00:22:53,360
kubernetes from just

00:22:51,120 --> 00:22:54,799
turning off your entire cluster updating

00:22:53,360 --> 00:22:56,159
all the pods at once and bringing it

00:22:54,799 --> 00:22:57,840
back online

00:22:56,159 --> 00:22:59,679
that is not an online way of doing

00:22:57,840 --> 00:23:03,120
things so

00:22:59,679 --> 00:23:04,799
when when i think of um this robot doing

00:23:03,120 --> 00:23:05,840
the right thing it's doing what we would

00:23:04,799 --> 00:23:08,799
do

00:23:05,840 --> 00:23:09,760
terminates a single pod brings it back

00:23:08,799 --> 00:23:11,679
uh it turns it

00:23:09,760 --> 00:23:13,200
replaces it with the new configuration

00:23:11,679 --> 00:23:14,400
so we get a brand new version of

00:23:13,200 --> 00:23:17,520
cassandra

00:23:14,400 --> 00:23:18,799
um it starts up again and then when it's

00:23:17,520 --> 00:23:21,200
back online

00:23:18,799 --> 00:23:23,120
then it walks through whoops then it

00:23:21,200 --> 00:23:25,440
walks through those

00:23:23,120 --> 00:23:26,559
so let me try to wrap things up a little

00:23:25,440 --> 00:23:28,080
bit here

00:23:26,559 --> 00:23:30,159
and i'm trying to leave at least a

00:23:28,080 --> 00:23:33,600
little bit of time for questions on here

00:23:30,159 --> 00:23:36,640
um when we talk about

00:23:33,600 --> 00:23:38,400
cloud native cassandra it's not that

00:23:36,640 --> 00:23:40,320
we're trying to find a new way to run

00:23:38,400 --> 00:23:42,559
cassandra

00:23:40,320 --> 00:23:44,159
i don't think that's that's just that's

00:23:42,559 --> 00:23:47,600
a good reason maybe

00:23:44,159 --> 00:23:49,440
but it's not the reason um

00:23:47,600 --> 00:23:51,520
and as i talk to folks that are running

00:23:49,440 --> 00:23:52,640
cassandra now and they're also running

00:23:51,520 --> 00:23:54,960
kubernetes

00:23:52,640 --> 00:23:56,159
i am not advocating anyone to just go

00:23:54,960 --> 00:23:57,919
out there and

00:23:56,159 --> 00:23:59,760
and replace the way you run your

00:23:57,919 --> 00:24:00,559
cassandra clusters with kubernetes right

00:23:59,760 --> 00:24:02,640
away

00:24:00,559 --> 00:24:04,640
that i think that's a really bad idea

00:24:02,640 --> 00:24:07,919
it's not good engineering

00:24:04,640 --> 00:24:09,679
what i what i am um offering is that

00:24:07,919 --> 00:24:10,480
this is a time to start thinking about

00:24:09,679 --> 00:24:14,159
how we make

00:24:10,480 --> 00:24:17,039
our lives easier and in the future and

00:24:14,159 --> 00:24:18,880
so when you're deploying a new cassandra

00:24:17,039 --> 00:24:20,480
cluster

00:24:18,880 --> 00:24:22,640
what would make it easier for you in the

00:24:20,480 --> 00:24:25,679
long run and

00:24:22,640 --> 00:24:28,960
when we talk about um

00:24:25,679 --> 00:24:30,559
cloud native cassandra we're going to

00:24:28,960 --> 00:24:32,480
think about it in terms of i want the

00:24:30,559 --> 00:24:34,880
whole application stack to be managed by

00:24:32,480 --> 00:24:37,440
the control the entire control plane

00:24:34,880 --> 00:24:38,799
with the three things like the dynamic

00:24:37,440 --> 00:24:41,520
scalable self-healing

00:24:38,799 --> 00:24:42,960
everything should be on the same page

00:24:41,520 --> 00:24:44,720
and that's that means adding the

00:24:42,960 --> 00:24:47,039
database that can do that and we all

00:24:44,720 --> 00:24:47,840
know cassandra does dynamic scalable and

00:24:47,039 --> 00:24:51,200
self-healing

00:24:47,840 --> 00:24:54,240
like crazy so anything you work

00:24:51,200 --> 00:24:55,120
work on or deploy think of it in cloud

00:24:54,240 --> 00:25:00,080
native terms

00:24:55,120 --> 00:25:02,320
it has infinite storage and compute yeah

00:25:00,080 --> 00:25:02,910
so future oh i see you already see

00:25:02,320 --> 00:25:04,159
questions about

00:25:02,910 --> 00:25:08,080
[Laughter]

00:25:04,159 --> 00:25:10,160
thank you here we go

00:25:08,080 --> 00:25:12,159
i'm glad you asked about multi-region

00:25:10,160 --> 00:25:14,080
[Laughter]

00:25:12,159 --> 00:25:15,679
this is i remember i said networking is

00:25:14,080 --> 00:25:18,880
one of the problems

00:25:15,679 --> 00:25:22,559
um you're you're right

00:25:18,880 --> 00:25:24,480
and uh because kubernetes

00:25:22,559 --> 00:25:27,120
really was designed around your

00:25:24,480 --> 00:25:29,760
kubernetes cluster is an island

00:25:27,120 --> 00:25:31,039
and you know it's like you have to

00:25:29,760 --> 00:25:32,000
really you have to have a note from your

00:25:31,039 --> 00:25:34,159
mom

00:25:32,000 --> 00:25:35,919
uh you have to have a dna sample just to

00:25:34,159 --> 00:25:37,440
get into it i mean it's really tough to

00:25:35,919 --> 00:25:38,559
get into a kubernetes cluster i don't

00:25:37,440 --> 00:25:40,400
know if you've ever tried it

00:25:38,559 --> 00:25:41,600
and for reasons you know i like the

00:25:40,400 --> 00:25:44,880
default secure

00:25:41,600 --> 00:25:45,600
great however we all know that cassandra

00:25:44,880 --> 00:25:49,039
does not

00:25:45,600 --> 00:25:50,799
survive as an island it it loves to be

00:25:49,039 --> 00:25:52,480
spread around the world multi-data

00:25:50,799 --> 00:25:54,240
center it was from day one with

00:25:52,480 --> 00:25:56,240
cassandra

00:25:54,240 --> 00:25:57,919
it's not only cassandra that has this

00:25:56,240 --> 00:26:00,000
but there's a couple of projects that

00:25:57,919 --> 00:26:03,039
are coming that are really interesting

00:26:00,000 --> 00:26:06,400
um nate you nailed it on the head like

00:26:03,039 --> 00:26:08,799
these acl hell yeah um

00:26:06,400 --> 00:26:10,400
we should be able to configure these

00:26:08,799 --> 00:26:13,760
things in a way that

00:26:10,400 --> 00:26:15,840
is declarative as well um

00:26:13,760 --> 00:26:17,840
so network service mesh is a project in

00:26:15,840 --> 00:26:21,200
cncf um

00:26:17,840 --> 00:26:23,120
it does layer two as well as layer three

00:26:21,200 --> 00:26:24,480
so thinking of layer two is like all the

00:26:23,120 --> 00:26:27,679
way down to like mpls

00:26:24,480 --> 00:26:29,279
those are the really down there but

00:26:27,679 --> 00:26:32,000
submariner is another project

00:26:29,279 --> 00:26:33,600
which um i think is a little lighter but

00:26:32,000 --> 00:26:36,840
that's layer three and that's

00:26:33,600 --> 00:26:38,000
using things like encrypted vpn tunnels

00:26:36,840 --> 00:26:40,559
um

00:26:38,000 --> 00:26:41,919
these are cluster kubernetes cluster to

00:26:40,559 --> 00:26:43,679
kubernetes cluster

00:26:41,919 --> 00:26:45,279
and as you deploy your kubernetes

00:26:43,679 --> 00:26:47,520
environment um

00:26:45,279 --> 00:26:48,880
you just build in this multi-data center

00:26:47,520 --> 00:26:50,080
from the beginning and make it

00:26:48,880 --> 00:26:54,400
declarative

00:26:50,080 --> 00:26:55,919
um it it keeps you from having to do

00:26:54,400 --> 00:26:57,679
and this is the same reason you would

00:26:55,919 --> 00:26:59,840
want to run cassandra kubernetes

00:26:57,679 --> 00:27:01,520
it keeps you from having six things to

00:26:59,840 --> 00:27:02,960
manage or three things to manage when

00:27:01,520 --> 00:27:04,559
you deploy a cluster

00:27:02,960 --> 00:27:06,240
you should have the same control plane

00:27:04,559 --> 00:27:06,799
controlling all of it so you can declare

00:27:06,240 --> 00:27:09,360
it

00:27:06,799 --> 00:27:10,880
store the configuration in a get test it

00:27:09,360 --> 00:27:12,159
in your ci cd

00:27:10,880 --> 00:27:14,320
all of those things should happen for

00:27:12,159 --> 00:27:14,320
you

00:27:14,720 --> 00:27:19,279
uh some changes to cassandra

00:27:17,760 --> 00:27:21,039
and this is just a short list but i

00:27:19,279 --> 00:27:22,399
think that there's this has been

00:27:21,039 --> 00:27:24,880
consensus that i've

00:27:22,399 --> 00:27:26,480
heard in many places and i'm this is a

00:27:24,880 --> 00:27:27,600
very short list i'm sure there's plenty

00:27:26,480 --> 00:27:30,000
other things

00:27:27,600 --> 00:27:31,600
but um this has been a real call by the

00:27:30,000 --> 00:27:33,600
cassandra community it's like instead of

00:27:31,600 --> 00:27:34,640
using jmx can we use api based

00:27:33,600 --> 00:27:37,120
management

00:27:34,640 --> 00:27:39,200
there is a psycart project uh in the

00:27:37,120 --> 00:27:41,440
there's this ep one

00:27:39,200 --> 00:27:43,440
but i think this is this is a important

00:27:41,440 --> 00:27:45,679
part of making cassandra

00:27:43,440 --> 00:27:46,880
more ready for what kubernetes can do

00:27:45,679 --> 00:27:49,919
and other things

00:27:46,880 --> 00:27:53,840
is using an api based management

00:27:49,919 --> 00:27:57,120
usually in http based api

00:27:53,840 --> 00:27:58,799
external config management uh the

00:27:57,120 --> 00:28:01,679
configuration mapping and things that

00:27:58,799 --> 00:28:03,120
happen inside of kubernetes

00:28:01,679 --> 00:28:05,279
you know it stores like i said that

00:28:03,120 --> 00:28:07,760
single source of truth for configuration

00:28:05,279 --> 00:28:09,440
and the way you configure a cassandra

00:28:07,760 --> 00:28:11,279
node is with the yaml file

00:28:09,440 --> 00:28:13,200
well if there was some way that we could

00:28:11,279 --> 00:28:14,960
we could block that state into the

00:28:13,200 --> 00:28:18,559
kubernetes replacing

00:28:14,960 --> 00:28:20,720
um ooh and fred asked this question

00:28:18,559 --> 00:28:24,320
replacing a casino gamble with ncd

00:28:20,720 --> 00:28:27,039
maybe or at least some parts of it and

00:28:24,320 --> 00:28:28,080
uh where do we put the source of truth

00:28:27,039 --> 00:28:29,679
and

00:28:28,080 --> 00:28:31,600
that i think that's i think that's going

00:28:29,679 --> 00:28:33,120
to be a longer harder question but it

00:28:31,600 --> 00:28:35,120
makes sense when you're talking about

00:28:33,120 --> 00:28:36,880
having a single control plane because

00:28:35,120 --> 00:28:38,640
now you instead of having to

00:28:36,880 --> 00:28:41,039
manage yaml files as well as your

00:28:38,640 --> 00:28:44,320
deployment yaml that's a lot of yaml

00:28:41,039 --> 00:28:47,760
um how can we make this easier

00:28:44,320 --> 00:28:50,240
uh decoupling networking and storage uh

00:28:47,760 --> 00:28:51,679
not networking from storage but the

00:28:50,240 --> 00:28:53,840
networking from cassandra

00:28:51,679 --> 00:28:55,840
and storage from cassandra finding ways

00:28:53,840 --> 00:28:58,399
that we can make it so it's more

00:28:55,840 --> 00:29:00,559
uh like this whole thing with persistent

00:28:58,399 --> 00:29:04,240
volume claims and persistent volumes

00:29:00,559 --> 00:29:05,760
i mean there's um there's some really

00:29:04,240 --> 00:29:08,880
interesting projects out there

00:29:05,760 --> 00:29:09,840
uh open ebs is one that um they talk

00:29:08,880 --> 00:29:14,159
about local

00:29:09,840 --> 00:29:16,960
uh these local volumes um

00:29:14,159 --> 00:29:17,760
there's uh some i think some discussion

00:29:16,960 --> 00:29:18,960
around

00:29:17,760 --> 00:29:21,039
all these different things around

00:29:18,960 --> 00:29:23,600
storage especially with data

00:29:21,039 --> 00:29:25,440
that are i think because now we're

00:29:23,600 --> 00:29:26,960
starting to do more data in kubernetes

00:29:25,440 --> 00:29:28,559
they're really the realization of

00:29:26,960 --> 00:29:30,159
storage and i would really prefer it

00:29:28,559 --> 00:29:32,559
that we have a data storage

00:29:30,159 --> 00:29:34,320
primitive inside of kubernetes instead

00:29:32,559 --> 00:29:38,000
of just storage

00:29:34,320 --> 00:29:40,320
i think it declares a class properly

00:29:38,000 --> 00:29:42,159
same thing with networking there is some

00:29:40,320 --> 00:29:45,279
cool stuff happening in networking land

00:29:42,159 --> 00:29:46,960
um where the the networks

00:29:45,279 --> 00:29:49,520
because of the way that the kubernetes

00:29:46,960 --> 00:29:50,960
router works it puts latencies and hops

00:29:49,520 --> 00:29:53,360
and things like that

00:29:50,960 --> 00:29:54,080
um but in cassandra if we were able to

00:29:53,360 --> 00:29:58,159
plug into

00:29:54,080 --> 00:30:01,039
like the connect container native um uh

00:29:58,159 --> 00:30:01,840
the container networking uh things

00:30:01,039 --> 00:30:04,159
directly

00:30:01,840 --> 00:30:05,840
i think there's some chance we could get

00:30:04,159 --> 00:30:09,600
a lot better speed throughput

00:30:05,840 --> 00:30:13,520
etc it is a huge area of study

00:30:09,600 --> 00:30:16,880
and finally casino cni thank you

00:30:13,520 --> 00:30:19,919
um and containers is a full first class

00:30:16,880 --> 00:30:20,399
um you know that's not been something

00:30:19,919 --> 00:30:22,880
that the

00:30:20,399 --> 00:30:24,000
cassandra project has really um fronted

00:30:22,880 --> 00:30:26,960
is like this is our

00:30:24,000 --> 00:30:28,720
preferred container right now docker

00:30:26,960 --> 00:30:30,799
pretty much runs the container or

00:30:28,720 --> 00:30:31,760
is the source of truth docker the

00:30:30,799 --> 00:30:36,240
company

00:30:31,760 --> 00:30:39,919
maintains the cassandra image um but

00:30:36,240 --> 00:30:42,000
oh i've had some great conversations um

00:30:39,919 --> 00:30:43,200
joey and i have had this conversation a

00:30:42,000 --> 00:30:44,720
few times about

00:30:43,200 --> 00:30:47,039
you know we should have better

00:30:44,720 --> 00:30:48,000
containers for things in cassandra that

00:30:47,039 --> 00:30:51,200
are

00:30:48,000 --> 00:30:53,440
that are form fit to something like uh

00:30:51,200 --> 00:30:54,480
you know development and deploying it in

00:30:53,440 --> 00:30:57,679
different areas

00:30:54,480 --> 00:30:59,360
um and containers if i think we all

00:30:57,679 --> 00:31:00,799
can we just agree containers are how we

00:30:59,360 --> 00:31:03,679
deploy infrastructure now

00:31:00,799 --> 00:31:04,159
mostly and they're tar balls or we

00:31:03,679 --> 00:31:06,399
should just

00:31:04,159 --> 00:31:08,000
let them go away like the dinosaurs they

00:31:06,399 --> 00:31:10,240
are

00:31:08,000 --> 00:31:11,519
um so that those are some of the changes

00:31:10,240 --> 00:31:13,039
that are to cassandra and there's

00:31:11,519 --> 00:31:14,240
there's actually some stuff that's

00:31:13,039 --> 00:31:16,559
happening there

00:31:14,240 --> 00:31:16,559
um

00:31:17,279 --> 00:31:22,399
thanks fred all right get off my lawn

00:31:20,320 --> 00:31:24,240
all right so i would also invite

00:31:22,399 --> 00:31:25,679
everyone i'm wrapping up your cassandra

00:31:24,240 --> 00:31:26,159
community effort which is happening

00:31:25,679 --> 00:31:28,159
right now

00:31:26,159 --> 00:31:30,080
i mentioned you know there's there is

00:31:28,159 --> 00:31:32,559
this two operators that are

00:31:30,080 --> 00:31:34,480
probably the strongest contenders but we

00:31:32,559 --> 00:31:36,240
really would like to get it down to

00:31:34,480 --> 00:31:38,080
something where we can have

00:31:36,240 --> 00:31:40,799
a better like here's one that we all

00:31:38,080 --> 00:31:41,200
work on i still feel like there's a rule

00:31:40,799 --> 00:31:44,399
there's

00:31:41,200 --> 00:31:45,679
a world out there for that um and closer

00:31:44,399 --> 00:31:46,799
alignment to the apache cassandra

00:31:45,679 --> 00:31:50,880
project

00:31:46,799 --> 00:31:54,399
um the uh

00:31:50,880 --> 00:31:56,559
dinesh no they're not tar balls um

00:31:54,399 --> 00:31:57,600
but having them close to each one of

00:31:56,559 --> 00:32:00,720
these um

00:31:57,600 --> 00:32:02,559
like when we deploy cassandra project

00:32:00,720 --> 00:32:04,480
we're thinking about kubernetes and the

00:32:02,559 --> 00:32:06,480
operator is in alignment with that like

00:32:04,480 --> 00:32:07,919
just like a driver or anything else i

00:32:06,480 --> 00:32:11,120
think that's a really good thing

00:32:07,919 --> 00:32:12,240
so we have um we have a couple of things

00:32:11,120 --> 00:32:14,000
we have the apache so

00:32:12,240 --> 00:32:15,679
if you go to the asf slack there's the

00:32:14,000 --> 00:32:17,120
cassandra kubernetes we'd invite you to

00:32:15,679 --> 00:32:20,880
join us there

00:32:17,120 --> 00:32:23,679
and um we also have the cassandra wiki

00:32:20,880 --> 00:32:25,120
which you can go there anytime no one

00:32:23,679 --> 00:32:27,760
ever does but you could try b

00:32:25,120 --> 00:32:29,600
be original um we have a whole bunch of

00:32:27,760 --> 00:32:31,039
resources on there like all the past

00:32:29,600 --> 00:32:31,760
meetings we've had notes from all those

00:32:31,039 --> 00:32:34,799
meetings

00:32:31,760 --> 00:32:36,080
um the sig is two things it's like get

00:32:34,799 --> 00:32:37,120
trying to get a common operator but

00:32:36,080 --> 00:32:39,519
there's also

00:32:37,120 --> 00:32:40,320
discussions about running cassandra in

00:32:39,519 --> 00:32:43,919
kubernetes

00:32:40,320 --> 00:32:46,240
as well so it's kind of dual purpose uh

00:32:43,919 --> 00:32:47,039
ideally in my mind i would love to have

00:32:46,240 --> 00:32:49,840
that turn

00:32:47,039 --> 00:32:51,200
into just running cassandra and

00:32:49,840 --> 00:32:53,200
kubernetes

00:32:51,200 --> 00:32:55,679
not talking about building an operator

00:32:53,200 --> 00:32:58,320
just i think because we're at the point

00:32:55,679 --> 00:33:00,080
probably after 4.0 where this will be a

00:32:58,320 --> 00:33:02,559
real big focus for the

00:33:00,080 --> 00:33:03,600
project is um having people actually run

00:33:02,559 --> 00:33:06,880
kubernetes

00:33:03,600 --> 00:33:09,519
um or xander and kubernetes

00:33:06,880 --> 00:33:10,320
i think that's all i have for right now

00:33:09,519 --> 00:33:13,679
yes

00:33:10,320 --> 00:33:15,440
the big thank you slide um

00:33:13,679 --> 00:33:17,120
so i'll be happy to take any questions

00:33:15,440 --> 00:33:20,960
or you know

00:33:17,120 --> 00:33:25,519
um joey can make an ironic comment or

00:33:20,960 --> 00:33:27,440
something but

00:33:25,519 --> 00:33:29,840
now dinette see dinesh has got it all

00:33:27,440 --> 00:33:31,840
sorted out

00:33:29,840 --> 00:33:33,679
wow see this is what it's like this is

00:33:31,840 --> 00:33:36,559
almost like being in person

00:33:33,679 --> 00:33:38,240
where i get heckled and then dinesh just

00:33:36,559 --> 00:33:41,279
drops the mic says

00:33:38,240 --> 00:33:43,440
there you go done okay well

00:33:41,279 --> 00:33:45,440
i'm glad i made the effort of creating

00:33:43,440 --> 00:33:48,159
this deck

00:33:45,440 --> 00:33:49,360
um good question are we planning to

00:33:48,159 --> 00:33:52,720
build a new operator

00:33:49,360 --> 00:33:53,600
god i hope not um i like i said there's

00:33:52,720 --> 00:33:56,080
a lot of

00:33:53,600 --> 00:33:58,080
overlap between operators if you get

00:33:56,080 --> 00:34:01,600
into an operator there's not

00:33:58,080 --> 00:34:03,679
a ton of it it's not an

00:34:01,600 --> 00:34:05,519
amazing amount of code it's a whole lot

00:34:03,679 --> 00:34:06,799
of boilerplate that has to get created

00:34:05,519 --> 00:34:08,639
and mapped

00:34:06,799 --> 00:34:10,399
that's probably the best way to put it

00:34:08,639 --> 00:34:12,399
so i would hope that we can come

00:34:10,399 --> 00:34:14,399
together at least on something

00:34:12,399 --> 00:34:15,679
um this is you know this is an open

00:34:14,399 --> 00:34:18,320
source project we

00:34:15,679 --> 00:34:19,359
we have to have a lot of debate a lot of

00:34:18,320 --> 00:34:21,119
back and forth

00:34:19,359 --> 00:34:22,639
if you look on the dev mailing list

00:34:21,119 --> 00:34:25,839
right now there's actually

00:34:22,639 --> 00:34:27,040
activity happening on there today um yes

00:34:25,839 --> 00:34:27,679
there's gonna be a fight in the parking

00:34:27,040 --> 00:34:30,320
lot what

00:34:27,679 --> 00:34:31,839
that is not a pandemic friendly way to

00:34:30,320 --> 00:34:33,440
do things nate

00:34:31,839 --> 00:34:35,520
that's not how we do things we're going

00:34:33,440 --> 00:34:38,879
to meet we're going to play uh

00:34:35,520 --> 00:34:41,599
team fortress right yeah

00:34:38,879 --> 00:34:42,879
virtually so we're going to be in a tf

00:34:41,599 --> 00:34:44,480
we're going to have a duke it out yeah

00:34:42,879 --> 00:34:48,960
nerf guns at six feet

00:34:44,480 --> 00:34:50,320
so we'll see but um

00:34:48,960 --> 00:34:52,720
one of the things i'd really love to be

00:34:50,320 --> 00:34:56,000
able to see is more operators

00:34:52,720 --> 00:34:58,240
um we had bloomberg dreamworks new relic

00:34:56,000 --> 00:35:00,000
show up early early on i'd love to see

00:34:58,240 --> 00:35:02,079
more input from operators

00:35:00,000 --> 00:35:04,800
like this is the way we'd want it to be

00:35:02,079 --> 00:35:04,800
so yeah

00:35:05,359 --> 00:35:09,920
all right look at the comments besides

00:35:07,599 --> 00:35:13,599
fight club

00:35:09,920 --> 00:35:17,520
oh can operators run cross cluster yes

00:35:13,599 --> 00:35:18,560
uh well the operators can communicate if

00:35:17,520 --> 00:35:21,599
you give them the ip

00:35:18,560 --> 00:35:24,800
it's there's actually um boy

00:35:21,599 --> 00:35:27,040
this got me flat-footed i did see a post

00:35:24,800 --> 00:35:31,839
in there how to run

00:35:27,040 --> 00:35:34,800
multi-data center kubernetes um

00:35:31,839 --> 00:35:36,560
there you go so we i'll have to off to

00:35:34,800 --> 00:35:38,720
dig it up but yes it's doable

00:35:36,560 --> 00:35:40,480
uh submariner would be a good choice

00:35:38,720 --> 00:35:41,920
because you're creating a bpm tunnel

00:35:40,480 --> 00:35:44,160
basically so you're flattening out your

00:35:41,920 --> 00:35:47,200
network in a lot of ways or routing it

00:35:44,160 --> 00:35:47,920
um it do not try to do this with service

00:35:47,200 --> 00:35:52,160
mesh

00:35:47,920 --> 00:35:52,160
it just doesn't work the way um

00:35:52,800 --> 00:36:00,880
yes uh dinesh i am also part of the cncf

00:35:57,359 --> 00:36:02,480
technical oversight committee and um

00:36:00,880 --> 00:36:05,119
also a part of this thing called data on

00:36:02,480 --> 00:36:08,160
kubernetes uh community

00:36:05,119 --> 00:36:09,520
um this is beginning to be a thing it's

00:36:08,160 --> 00:36:10,880
interesting because a lot of the storage

00:36:09,520 --> 00:36:11,680
vendors are the ones that are making a

00:36:10,880 --> 00:36:14,880
thing out of it

00:36:11,680 --> 00:36:17,280
fine um but it is uh

00:36:14,880 --> 00:36:18,079
starting to get transmitted over to the

00:36:17,280 --> 00:36:20,960
kubernetes

00:36:18,079 --> 00:36:21,280
the cncf is like uh staple workloads

00:36:20,960 --> 00:36:27,599
need

00:36:21,280 --> 00:36:30,720
a big overhaul and it's just this

00:36:27,599 --> 00:36:34,160
oh open source tupperware

00:36:30,720 --> 00:36:34,160
see i shouldn't be watching the chat

00:36:35,760 --> 00:36:42,880
so um i think um yeah next up is eric

00:36:41,119 --> 00:36:44,160
ramirez if you

00:36:42,880 --> 00:36:46,400
if you want to know everything you did

00:36:44,160 --> 00:36:49,200
wrong eric is the guy to help you

00:36:46,400 --> 00:36:50,000
he probably he helps the most people

00:36:49,200 --> 00:36:52,160
every day

00:36:50,000 --> 00:36:53,119
so you should go watch his session right

00:36:52,160 --> 00:36:57,040
now

00:36:53,119 --> 00:36:59,359
um i'm gonna say goodbye

00:36:57,040 --> 00:37:00,640
see you in the next session um maybe

00:36:59,359 --> 00:37:02,560
i'll see you on slack

00:37:00,640 --> 00:37:03,839
if you want to talk more to me about it

00:37:02,560 --> 00:37:05,040
if you want to get on a zoom call i'm

00:37:03,839 --> 00:37:08,320
happy to hash it out

00:37:05,040 --> 00:37:23,839
but you know where to find me i'm here

00:37:08,320 --> 00:37:23,839
so see you later everyone

00:37:40,880 --> 00:37:42,960

YouTube URL: https://www.youtube.com/watch?v=NxAxVX0Tjt8


