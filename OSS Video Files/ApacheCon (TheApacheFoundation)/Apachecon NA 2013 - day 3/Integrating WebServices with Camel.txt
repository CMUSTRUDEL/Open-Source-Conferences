Title: Integrating WebServices with Camel
Publication date: 2013-10-18
Playlist: Apachecon NA 2013 - day 3
Description: 
	Daniel Kulp
ApacheCon NA 2013
Caravan
Captions: 
	00:00:00,319 --> 00:00:05,940
thank you everybody for sticking out

00:00:03,030 --> 00:00:08,280
this very last session so obviously I

00:00:05,940 --> 00:00:09,990
all of us want to probably get going and

00:00:08,280 --> 00:00:11,880
eat whatever snacks they have out there

00:00:09,990 --> 00:00:13,500
after a break and I did discover coffee

00:00:11,880 --> 00:00:15,269
so I'm a little bit better shape than

00:00:13,500 --> 00:00:18,810
the hadrian was because I actually have

00:00:15,269 --> 00:00:20,510
my cup there but so what kind of get

00:00:18,810 --> 00:00:22,529
started I'm going to talk about

00:00:20,510 --> 00:00:23,789
animating Web Services in the various

00:00:22,529 --> 00:00:29,670
option that we have for web services

00:00:23,789 --> 00:00:31,170
within camel so for quick agenda we have

00:00:29,670 --> 00:00:32,940
a little introduction about what I'm

00:00:31,170 --> 00:00:35,219
talking about Who I am stuff like that

00:00:32,940 --> 00:00:38,160
and then start talking about the various

00:00:35,219 --> 00:00:40,530
options you have within camel for doing

00:00:38,160 --> 00:00:42,540
web services and camel there's there's a

00:00:40,530 --> 00:00:45,930
bunch of different ways and as we saw

00:00:42,540 --> 00:00:48,960
from Christians talk this morning camel

00:00:45,930 --> 00:00:50,250
has this like viewpoint of why have one

00:00:48,960 --> 00:00:54,030
way of doing things when you can have

00:00:50,250 --> 00:00:56,010
five ways of doing things and that's

00:00:54,030 --> 00:00:58,379
fundamentally so when you start digging

00:00:56,010 --> 00:00:59,850
the camel and you're like okay how do

00:00:58,379 --> 00:01:01,170
you do this you suddenly see like six

00:00:59,850 --> 00:01:02,309
different ways of doing things Web

00:01:01,170 --> 00:01:03,570
Services is no exception

00:01:02,309 --> 00:01:06,000
there's a bunch of different ways of

00:01:03,570 --> 00:01:07,740
doing different things there's pros and

00:01:06,000 --> 00:01:10,470
cons of stuff and we're going to kind of

00:01:07,740 --> 00:01:13,640
go through the various options that we

00:01:10,470 --> 00:01:19,439
have in camel and discuss some of them

00:01:13,640 --> 00:01:22,049
so Who am I uhm I'm plugged by a talent

00:01:19,439 --> 00:01:23,430
I'm the VP of open source development I

00:01:22,049 --> 00:01:25,530
have a team of people that kind of

00:01:23,430 --> 00:01:29,610
concentrate on doing stuff at Apache

00:01:25,530 --> 00:01:31,829
whether it's cxf or crap or whatever and

00:01:29,610 --> 00:01:36,450
I've been doing this source stuff for

00:01:31,829 --> 00:01:37,799
many many years I kind of feel like I'm

00:01:36,450 --> 00:01:40,740
like an old part in this whole space

00:01:37,799 --> 00:01:43,170
type thing but I guess I actually am

00:01:40,740 --> 00:01:45,030
because I've been dealing with a lot of

00:01:43,170 --> 00:01:46,680
the soap related stuff back when they

00:01:45,030 --> 00:01:49,920
originally even started just doing soaps

00:01:46,680 --> 00:01:51,899
up and all of your RPC encoded stuff was

00:01:49,920 --> 00:01:55,680
the big thing and which nobody does

00:01:51,899 --> 00:01:58,590
anymore thankfully so if been around for

00:01:55,680 --> 00:02:01,020
doing this for a long time I've been

00:01:58,590 --> 00:02:04,200
with Apache for a very long time as well

00:02:01,020 --> 00:02:05,909
I was involved in bringing cxf into the

00:02:04,200 --> 00:02:09,780
incubator and the currently

00:02:05,909 --> 00:02:12,330
the empty chair there but it also gotten

00:02:09,780 --> 00:02:14,790
involved with a lot of other projects at

00:02:12,330 --> 00:02:16,470
Apache so there's a whole list there I

00:02:14,790 --> 00:02:18,150
have like thousands and thousands of

00:02:16,470 --> 00:02:22,590
commits and all these various projects

00:02:18,150 --> 00:02:24,660
and I am an a SS member that's also a

00:02:22,590 --> 00:02:27,060
kind one of those like proud moment type

00:02:24,660 --> 00:02:28,319
things of being recognized for

00:02:27,060 --> 00:02:30,000
everything that I've done for Apache I

00:02:28,319 --> 00:02:33,180
absolutely have served on the Apache

00:02:30,000 --> 00:02:35,280
board in the past and so I've been very

00:02:33,180 --> 00:02:40,380
involved with Apache so that's who I am

00:02:35,280 --> 00:02:41,940
I said somebody once told me that if you

00:02:40,380 --> 00:02:43,470
you can't have a talk bill saying

00:02:41,940 --> 00:02:45,360
something controversial to people

00:02:43,470 --> 00:02:47,819
remember it so I'm going to say

00:02:45,360 --> 00:02:48,510
something controversial right now go

00:02:47,819 --> 00:02:52,140
Pat's

00:02:48,510 --> 00:02:54,030
they that's what my personal note and a

00:02:52,140 --> 00:02:58,920
controversial note all-in-one so

00:02:54,030 --> 00:03:01,760
everybody'll remember this now all right

00:02:58,920 --> 00:03:04,470
so when we talk about Web Services

00:03:01,760 --> 00:03:06,060
they're traditionally like five years

00:03:04,470 --> 00:03:08,010
ago when you talk to Web Services it was

00:03:06,060 --> 00:03:10,410
always going to be some sort of soap

00:03:08,010 --> 00:03:12,359
based service you're going to be dealing

00:03:10,410 --> 00:03:15,329
with soap 1 1 or 1 2 you may have some

00:03:12,359 --> 00:03:18,269
of those WS star related specs obvious

00:03:15,329 --> 00:03:20,310
addressing dubious or mws security all

00:03:18,269 --> 00:03:22,440
those things it would accomplish what

00:03:20,310 --> 00:03:25,170
you have web services now over the last

00:03:22,440 --> 00:03:28,700
few years we've seen a lot more traction

00:03:25,170 --> 00:03:30,870
around web services based on rest and

00:03:28,700 --> 00:03:32,250
for the purpose of my talk I'm going to

00:03:30,870 --> 00:03:34,139
include all of that stuff because

00:03:32,250 --> 00:03:36,420
fundamentally when I'm talking about Web

00:03:34,139 --> 00:03:40,319
Services for what we're doing nowadays

00:03:36,420 --> 00:03:42,480
it's data or requests and information

00:03:40,319 --> 00:03:44,970
kind of coming being transported over

00:03:42,480 --> 00:03:48,780
your standard web based protocols which

00:03:44,970 --> 00:03:50,730
would basically be HTTP and HTTPS to

00:03:48,780 --> 00:03:53,250
some extent as we're moving forward with

00:03:50,730 --> 00:03:55,230
some of the new protocols with like the

00:03:53,250 --> 00:03:56,760
spidey stuff and the WebSockets and

00:03:55,230 --> 00:03:59,489
things like that I mean the definition

00:03:56,760 --> 00:04:01,920
of web service is going to evolve with

00:03:59,489 --> 00:04:03,870
those standards we've seen the web

00:04:01,920 --> 00:04:05,700
definition kind of change in the last

00:04:03,870 --> 00:04:06,959
few years from from pure soap to

00:04:05,700 --> 00:04:09,209
including the rest things it's like that

00:04:06,959 --> 00:04:10,980
and it will continue to evolve it's not

00:04:09,209 --> 00:04:14,910
like it's going to be set in stone as of

00:04:10,980 --> 00:04:16,560
what this is and like I said there's all

00:04:14,910 --> 00:04:17,049
kinds of options without web services in

00:04:16,560 --> 00:04:19,479
camel

00:04:17,049 --> 00:04:25,090
and we're going to discuss discuss on

00:04:19,479 --> 00:04:26,740
that in camel previewing web services

00:04:25,090 --> 00:04:29,169
one of the things that I usually

00:04:26,740 --> 00:04:31,120
strongly suggest for people is to think

00:04:29,169 --> 00:04:34,900
about them from a very low-level

00:04:31,120 --> 00:04:37,560
standpoint most of your you web services

00:04:34,900 --> 00:04:41,080
use cases when you're dealing with camel

00:04:37,560 --> 00:04:42,639
can be done without things like cxf I

00:04:41,080 --> 00:04:44,909
know we'll talk about cxf a little bit

00:04:42,639 --> 00:04:48,400
later cxf is what I would consider a

00:04:44,909 --> 00:04:52,360
full-featured web service technology for

00:04:48,400 --> 00:04:54,340
to to work with camel but a very large

00:04:52,360 --> 00:04:56,169
percentage of your integration problems

00:04:54,340 --> 00:04:59,020
with camel that you're dealing with with

00:04:56,169 --> 00:05:01,270
web services can be done without C

00:04:59,020 --> 00:05:04,270
except and it would probably perform

00:05:01,270 --> 00:05:05,800
better without cxf cxf has a lot of

00:05:04,270 --> 00:05:10,240
functionality it does a lot of really

00:05:05,800 --> 00:05:12,210
cool things it's I but it's also lots of

00:05:10,240 --> 00:05:15,639
times overkill for what you need to do

00:05:12,210 --> 00:05:18,669
so fundamentally when you're dealing

00:05:15,639 --> 00:05:20,110
with Web Services in your route you're

00:05:18,669 --> 00:05:21,460
going to have some information coming in

00:05:20,110 --> 00:05:22,990
you may do something about that

00:05:21,460 --> 00:05:25,659
information and then you're going to

00:05:22,990 --> 00:05:26,830
send it off to someplace else and that

00:05:25,659 --> 00:05:27,940
whole middle section of actually doing

00:05:26,830 --> 00:05:29,830
something with information that's

00:05:27,940 --> 00:05:32,919
completely optional you may not find it

00:05:29,830 --> 00:05:34,270
one of the common use cases for camel

00:05:32,919 --> 00:05:37,719
with web services it's just a straight

00:05:34,270 --> 00:05:39,880
proxy you bring up a service on a port

00:05:37,719 --> 00:05:41,620
or something like that the requests come

00:05:39,880 --> 00:05:42,969
into there and it goes immediately out

00:05:41,620 --> 00:05:46,840
to another service you don't even really

00:05:42,969 --> 00:05:48,340
look at the payloads I've seen a lot of

00:05:46,840 --> 00:05:49,990
people do do just simple things like

00:05:48,340 --> 00:05:51,370
that and for something with that y-you

00:05:49,990 --> 00:05:52,629
see except where we have a lot of good

00:05:51,370 --> 00:05:56,469
components for that and I'll show you a

00:05:52,629 --> 00:05:57,250
little of that in a second when you're

00:05:56,469 --> 00:05:59,620
dealing with these low-level

00:05:57,250 --> 00:06:01,840
integrations again they're they're

00:05:59,620 --> 00:06:03,340
mostly payload agnostic because you're

00:06:01,840 --> 00:06:06,190
basically just dealing with the streams

00:06:03,340 --> 00:06:09,789
the streams of bytes as the information

00:06:06,190 --> 00:06:10,930
is coming in that that's kind of

00:06:09,789 --> 00:06:13,120
important because when you're dealing

00:06:10,930 --> 00:06:16,900
with streams in camel

00:06:13,120 --> 00:06:18,490
by default with with camel and with

00:06:16,900 --> 00:06:19,690
streams in general is if you read the

00:06:18,490 --> 00:06:22,060
bytes from them for some reason

00:06:19,690 --> 00:06:24,190
for whatever purpose those bytes are

00:06:22,060 --> 00:06:26,199
gone they're consumed so if you have the

00:06:24,190 --> 00:06:28,089
next component that's like if you don't

00:06:26,199 --> 00:06:29,620
do something to save those bytes and

00:06:28,089 --> 00:06:30,490
either you go to the next part of your

00:06:29,620 --> 00:06:32,289
route while those

00:06:30,490 --> 00:06:33,910
they're gone so you need to be aware

00:06:32,289 --> 00:06:37,569
when you're dealing with streams and

00:06:33,910 --> 00:06:40,000
camel dit if you need to pass those

00:06:37,569 --> 00:06:42,460
bytes from from streamer streamer from

00:06:40,000 --> 00:06:45,180
commode opponent you have to like enable

00:06:42,460 --> 00:06:49,330
the stream caching or convert those

00:06:45,180 --> 00:06:50,830
payloads to strings or there's a bunch

00:06:49,330 --> 00:06:52,900
of different options for what you may

00:06:50,830 --> 00:06:54,009
want to do with that but because they

00:06:52,900 --> 00:06:55,810
are stream based it is something that

00:06:54,009 --> 00:06:57,310
you have to be aware of when you're

00:06:55,810 --> 00:07:01,930
dealing with these types of things in

00:06:57,310 --> 00:07:03,430
camel there are the two categories of

00:07:01,930 --> 00:07:04,180
components that you're going to have to

00:07:03,430 --> 00:07:08,530
deal with when you're dealing with

00:07:04,180 --> 00:07:09,789
absurdity of your consumers and then you

00:07:08,530 --> 00:07:12,130
also get producers there's a lot of

00:07:09,789 --> 00:07:15,460
components like C except and jetty that

00:07:12,130 --> 00:07:17,080
provide both consumers and producers in

00:07:15,460 --> 00:07:19,479
the same type of configurations and tax

00:07:17,080 --> 00:07:20,770
and stuff others are not so again if

00:07:19,479 --> 00:07:23,440
you're little bit confused about what

00:07:20,770 --> 00:07:25,599
you need to do I go off to the camel web

00:07:23,440 --> 00:07:27,400
site there's a nice little components

00:07:25,599 --> 00:07:29,050
link on the right there's the whole list

00:07:27,400 --> 00:07:32,050
of 120 of them and you can kind of dig

00:07:29,050 --> 00:07:33,669
through there for the most part fairly

00:07:32,050 --> 00:07:37,840
well-documented and I definitely

00:07:33,669 --> 00:07:38,919
encourage people to if you're looking at

00:07:37,840 --> 00:07:40,150
these components read through the

00:07:38,919 --> 00:07:42,060
documentation if you see something and

00:07:40,150 --> 00:07:45,340
fusing in the documentation help us out

00:07:42,060 --> 00:07:48,669
and kind of give those patches or

00:07:45,340 --> 00:07:51,039
comments or anything up to that oh all

00:07:48,669 --> 00:07:52,960
right so the low-level endpoints are or

00:07:51,039 --> 00:07:53,800
consumers we pretty much have two of

00:07:52,960 --> 00:07:55,930
them they're going to be dealing with

00:07:53,800 --> 00:07:58,690
within camel the first one is the camel

00:07:55,930 --> 00:08:00,819
servlet and the second one would be the

00:07:58,690 --> 00:08:02,979
camel jet either for the most part

00:08:00,819 --> 00:08:05,340
they're the same thing just depends on

00:08:02,979 --> 00:08:07,690
on what your entry point is into camel

00:08:05,340 --> 00:08:10,210
with camel servlet you're going to have

00:08:07,690 --> 00:08:12,789
it more useful for when you're deploying

00:08:10,210 --> 00:08:14,710
into things like tomcat or WebLogic or

00:08:12,789 --> 00:08:17,530
some sort of app server that is

00:08:14,710 --> 00:08:20,409
providing an HTTP stack for you in that

00:08:17,530 --> 00:08:22,860
case when you deploy your your your

00:08:20,409 --> 00:08:25,000
route your starting point is going to be

00:08:22,860 --> 00:08:27,250
basically just a context so like in this

00:08:25,000 --> 00:08:30,159
case would be /foo so things coming in

00:08:27,250 --> 00:08:33,370
on that servlet with /foo will start

00:08:30,159 --> 00:08:38,399
will trigger the start of that row with

00:08:33,370 --> 00:08:39,810
jetty is a little different in that

00:08:38,399 --> 00:08:42,149
it's probably the same thing but rather

00:08:39,810 --> 00:08:43,319
than using your serve your server

00:08:42,149 --> 00:08:44,999
container that's already there it will

00:08:43,319 --> 00:08:47,160
bring up a jetty instance on whatever

00:08:44,999 --> 00:08:49,019
port you have configured there so this

00:08:47,160 --> 00:08:52,529
will actually bring up an embedded jetty

00:08:49,019 --> 00:08:55,259
on the localhost 8080 port and we'll use

00:08:52,529 --> 00:08:59,970
that as the starting point for your

00:08:55,259 --> 00:09:02,040
routes really that's that's the only

00:08:59,970 --> 00:09:05,519
main difference they're both Kasab

00:09:02,040 --> 00:09:07,050
viously provide HTTP headers and to the

00:09:05,519 --> 00:09:08,399
route and the the body is going to come

00:09:07,050 --> 00:09:10,589
in as a string and they're pretty much

00:09:08,399 --> 00:09:16,829
the same idea is just a matter what is

00:09:10,589 --> 00:09:18,149
your starting point the jetty stuff one

00:09:16,829 --> 00:09:19,889
things that they didn't really cover too

00:09:18,149 --> 00:09:21,329
much this morning the other talks was

00:09:19,889 --> 00:09:24,149
everything in camel if you don't know

00:09:21,329 --> 00:09:26,879
about it you have these the URIs so

00:09:24,149 --> 00:09:29,129
there's a lot of like question mark

00:09:26,879 --> 00:09:31,410
config config things that you could tack

00:09:29,129 --> 00:09:32,910
on to these things as far as like jetty

00:09:31,410 --> 00:09:34,680
you can have like configure some of the

00:09:32,910 --> 00:09:38,430
thread pool things and stuff like that

00:09:34,680 --> 00:09:40,470
if you wanted to but for the most part

00:09:38,430 --> 00:09:42,480
if you want very simple like get

00:09:40,470 --> 00:09:46,889
something up and running that would be

00:09:42,480 --> 00:09:50,879
enough to actually do it and the other

00:09:46,889 --> 00:09:52,350
thing to note you have XML DSL and Java

00:09:50,879 --> 00:09:53,790
DSL I'm going to flip back and forth

00:09:52,350 --> 00:09:55,379
between them because it just happen to

00:09:53,790 --> 00:09:57,029
be whatever example I was copying off of

00:09:55,379 --> 00:09:58,319
the web pages or out of the unit tests

00:09:57,029 --> 00:10:03,559
or depending on where I was finding

00:09:58,319 --> 00:10:06,750
examples they may be one of the other

00:10:03,559 --> 00:10:11,610
all right for the low level producers we

00:10:06,750 --> 00:10:13,889
actually there's a bunch of them they're

00:10:11,610 --> 00:10:16,319
all for them pretty much work the same

00:10:13,889 --> 00:10:18,149
way they're going to take a payload of

00:10:16,319 --> 00:10:20,009
bytes and send them off to whatever the

00:10:18,149 --> 00:10:21,750
webserver is and we have these are the

00:10:20,009 --> 00:10:22,980
four main ones that I found I was

00:10:21,750 --> 00:10:25,860
looking through the whole list of under

00:10:22,980 --> 00:10:27,660
20 there's probably others there but for

00:10:25,860 --> 00:10:30,870
the most part we have the camel acp

00:10:27,660 --> 00:10:32,639
which is badly named because it probably

00:10:30,870 --> 00:10:36,290
should have been like an HTTP 3 because

00:10:32,639 --> 00:10:38,100
it's based on the apache httpclient 3x

00:10:36,290 --> 00:10:39,629
we're going to have to have a discussion

00:10:38,100 --> 00:10:43,009
about that one as to whether we keep

00:10:39,629 --> 00:10:45,959
that one going forward due to the Apache

00:10:43,009 --> 00:10:48,710
client 3 rx no longer being supported

00:10:45,959 --> 00:10:51,230
and having support issues and security

00:10:48,710 --> 00:10:53,270
and things like that so going into camel

00:10:51,230 --> 00:10:54,170
3 and those discussions that's one of

00:10:53,270 --> 00:10:58,220
the things that we're going to have to

00:10:54,170 --> 00:11:00,710
talk about now it may be replaced with

00:10:58,220 --> 00:11:02,870
another like the HTV for maybe alias

00:11:00,710 --> 00:11:04,399
taste III so that you can any of your

00:11:02,870 --> 00:11:06,110
existing URLs will still work but

00:11:04,399 --> 00:11:08,570
there's a lot of discussion of that but

00:11:06,110 --> 00:11:13,810
so that's one option we have the HTTP

00:11:08,570 --> 00:11:17,660
for the HC if the async HTTP client

00:11:13,810 --> 00:11:20,000
based producer and we also have jetty

00:11:17,660 --> 00:11:22,940
there's a jetty client API now that you

00:11:20,000 --> 00:11:24,950
can kind of use to make calls and so one

00:11:22,940 --> 00:11:26,899
of the fundamentally all for them pretty

00:11:24,950 --> 00:11:31,550
much do the same thing so why would you

00:11:26,899 --> 00:11:33,320
choose one over another again it's

00:11:31,550 --> 00:11:35,600
really up to you one of the things about

00:11:33,320 --> 00:11:37,640
camel is they don't like to restrict

00:11:35,600 --> 00:11:39,130
your your technology choices in a lot of

00:11:37,640 --> 00:11:42,860
cases so if you have an application

00:11:39,130 --> 00:11:45,589
that's already using they should be for

00:11:42,860 --> 00:11:47,000
libraries for something then it may make

00:11:45,589 --> 00:11:47,690
sense to use the camel issues before

00:11:47,000 --> 00:11:51,050
because you already have the

00:11:47,690 --> 00:11:53,480
dependencies in your class path so you I

00:11:51,050 --> 00:11:55,880
add yet another one likewise if you're

00:11:53,480 --> 00:11:58,610
using jetty you already have the jetty

00:11:55,880 --> 00:12:01,660
libraries there so you could use the

00:11:58,610 --> 00:12:04,910
jetty client as well so a lot of us just

00:12:01,660 --> 00:12:06,790
kind of take a look at your dependency

00:12:04,910 --> 00:12:08,990
trees what jars do you want to bring in

00:12:06,790 --> 00:12:11,779
what mat matches what you're already

00:12:08,990 --> 00:12:15,080
doing it also can kind of come down to

00:12:11,779 --> 00:12:17,630
testing your your routes and your

00:12:15,080 --> 00:12:19,250
payloads with each of them as we saw

00:12:17,630 --> 00:12:22,310
from Christians position this morning

00:12:19,250 --> 00:12:25,459
and there's different options may

00:12:22,310 --> 00:12:30,080
perform differently the like the async

00:12:25,459 --> 00:12:32,329
client HCB client one it's likely slower

00:12:30,080 --> 00:12:33,589
because it's based on the niño stuff so

00:12:32,329 --> 00:12:35,690
it may be a little bit slower than the

00:12:33,589 --> 00:12:38,570
others but because it's a sync in nature

00:12:35,690 --> 00:12:40,279
if you're dealing with a if the server

00:12:38,570 --> 00:12:41,660
on the other side of the connection is a

00:12:40,279 --> 00:12:44,510
slow server it's not going to respond

00:12:41,660 --> 00:12:46,370
for five seconds ten seconds that may be

00:12:44,510 --> 00:12:47,810
a better option because it wouldn't be

00:12:46,370 --> 00:12:49,970
consuming threads where the other ones

00:12:47,810 --> 00:12:52,040
are all blocking based like if you issue

00:12:49,970 --> 00:12:55,550
requests it's going to block that thread

00:12:52,040 --> 00:12:57,890
until every response comes back so

00:12:55,550 --> 00:12:59,540
again you kind of have to weigh some of

00:12:57,890 --> 00:13:02,810
these situations and figure out which is

00:12:59,540 --> 00:13:10,430
the one which was going to best work for

00:13:02,810 --> 00:13:13,820
your your application so just to give a

00:13:10,430 --> 00:13:16,490
quick couple of examples the first one

00:13:13,820 --> 00:13:20,090
up there as I mentioned is your basic

00:13:16,490 --> 00:13:21,380
proxy it's going to come in on jetty and

00:13:20,090 --> 00:13:22,820
it's going to go right out to the real

00:13:21,380 --> 00:13:24,110
server we're not going to touch the

00:13:22,820 --> 00:13:25,400
payload the bytes are going to come in

00:13:24,110 --> 00:13:26,870
we're going to feet send them right out

00:13:25,400 --> 00:13:28,990
we're not gonna really do anything with

00:13:26,870 --> 00:13:32,540
it

00:13:28,990 --> 00:13:35,270
very simple the second one is basically

00:13:32,540 --> 00:13:37,550
the same thing other than we're going to

00:13:35,270 --> 00:13:40,610
stick an XSL transformation in the

00:13:37,550 --> 00:13:42,890
middle so as the information comes in

00:13:40,610 --> 00:13:45,080
we'll run this XSL transformation on it

00:13:42,890 --> 00:13:47,570
and then the bytes will the result of

00:13:45,080 --> 00:13:49,820
that will then go off to the real server

00:13:47,570 --> 00:13:53,480
and then whatever it responds with back

00:13:49,820 --> 00:13:57,260
will come back so relatively simple on

00:13:53,480 --> 00:13:58,910
your again they still kind of fits into

00:13:57,260 --> 00:14:00,710
our definition of web service but we're

00:13:58,910 --> 00:14:03,200
not dealing with so these things could

00:14:00,710 --> 00:14:05,330
be soap it could be just pure XML on a

00:14:03,200 --> 00:14:06,710
rest thing and the first one it could be

00:14:05,330 --> 00:14:09,500
to leave and be JSON or anything they

00:14:06,710 --> 00:14:11,480
don't even it looking at the payload -

00:14:09,500 --> 00:14:13,220
the the second example there because it

00:14:11,480 --> 00:14:16,310
is an excess l transform it's going to

00:14:13,220 --> 00:14:18,080
expect it to be xml fundament and if you

00:14:16,310 --> 00:14:20,570
don't if you try something in json to it

00:14:18,080 --> 00:14:22,220
it'll barf because it's not your egg you

00:14:20,570 --> 00:14:28,010
can't really do an excess l transform

00:14:22,220 --> 00:14:29,180
only on the json but that's part of what

00:14:28,010 --> 00:14:30,650
the whole web service is kind of

00:14:29,180 --> 00:14:33,710
defining what the data you're expecting

00:14:30,650 --> 00:14:36,530
and doing the right thing with it and

00:14:33,710 --> 00:14:38,600
then as we as result for this morning

00:14:36,530 --> 00:14:41,990
with Krishna's thing we you can also do

00:14:38,600 --> 00:14:43,670
things like X queries this is where I

00:14:41,990 --> 00:14:48,890
want to point out we have the stream

00:14:43,670 --> 00:14:50,810
crash equals true added to the route one

00:14:48,890 --> 00:14:55,360
of the things that X query will do is it

00:14:50,810 --> 00:14:58,550
will consume the bytes off the stream to

00:14:55,360 --> 00:15:01,970
obviously run the the X query on it so

00:14:58,550 --> 00:15:03,260
if you don't cache the stream as its

00:15:01,970 --> 00:15:06,559
reading to figure out if it's supposed

00:15:03,260 --> 00:15:08,599
to trigger this this choice

00:15:06,559 --> 00:15:10,459
those whites will be disappeared and

00:15:08,599 --> 00:15:12,729
then when it does that the two it's okay

00:15:10,459 --> 00:15:14,599
if the element is in the first like I

00:15:12,729 --> 00:15:16,909
don't know like ten percent of the

00:15:14,599 --> 00:15:19,069
message the only wherever it's going to

00:15:16,909 --> 00:15:21,049
go from that point on may actually go

00:15:19,069 --> 00:15:23,749
off to the server and the whole first

00:15:21,049 --> 00:15:26,419
chunk because we consumed it is is gone

00:15:23,749 --> 00:15:27,829
so if we don't do some caching you can

00:15:26,419 --> 00:15:29,179
kind of get some funny things where

00:15:27,829 --> 00:15:33,339
you're you're sending like partial

00:15:29,179 --> 00:15:35,389
messages off to the server and that's

00:15:33,339 --> 00:15:36,859
one of those kind of like support things

00:15:35,389 --> 00:15:38,569
or people would ask on the forms like

00:15:36,859 --> 00:15:42,169
hey why is my server only getting half a

00:15:38,569 --> 00:15:44,269
message and it's like well are you doing

00:15:42,169 --> 00:15:48,379
something with the stream like well yeah

00:15:44,269 --> 00:15:49,939
I guess and that that's fun like a lot

00:15:48,379 --> 00:15:51,799
of these camel components will if your

00:15:49,939 --> 00:15:53,899
feed them a stream they may eat a little

00:15:51,799 --> 00:15:55,489
bit one option like I mentioned before

00:15:53,899 --> 00:15:57,049
rat if you know all the messages that

00:15:55,489 --> 00:15:59,599
are coming in are relatively small

00:15:57,049 --> 00:16:02,269
rather than us doing the stream caching

00:15:59,599 --> 00:16:04,099
you could convert them to a string or if

00:16:02,269 --> 00:16:07,309
you know it's XML you can do or convert

00:16:04,099 --> 00:16:10,219
it to a Dom the strings and Dom's and

00:16:07,309 --> 00:16:12,649
things like that are reconstitute you

00:16:10,219 --> 00:16:15,919
can actually iterate over them multiple

00:16:12,649 --> 00:16:16,970
times and stuff so but of course when

00:16:15,919 --> 00:16:18,439
you start doing that you have to deal

00:16:16,970 --> 00:16:19,999
with the memory implications and you

00:16:18,439 --> 00:16:21,889
have to know that okay the only you're

00:16:19,999 --> 00:16:24,949
only going to be getting small messages

00:16:21,889 --> 00:16:26,779
in which I wouldn't usually count on

00:16:24,949 --> 00:16:30,019
that if you're dealing with an internet

00:16:26,779 --> 00:16:31,789
like exposed type thing because messages

00:16:30,019 --> 00:16:34,429
could come in from some attacker and

00:16:31,789 --> 00:16:36,289
they may know that you're only only

00:16:34,429 --> 00:16:39,649
expecting a 10k message and they'll send

00:16:36,289 --> 00:16:40,970
you a two Meg thought or two Meg message

00:16:39,649 --> 00:16:43,369
and you're going to parse it and then it

00:16:40,970 --> 00:16:44,929
just blows up as though so definitely

00:16:43,369 --> 00:16:47,989
kind of think about these things as

00:16:44,929 --> 00:16:49,220
you're as you're designing these the

00:16:47,989 --> 00:16:50,899
nice thing about the stream caching and

00:16:49,220 --> 00:16:53,149
camel if you're not wearing it

00:16:50,899 --> 00:16:56,679
exceed x' a certain size it will get

00:16:53,149 --> 00:16:59,329
dumped on a disk if you think it has to

00:16:56,679 --> 00:17:01,759
to keep the memory usage down obviously

00:16:59,329 --> 00:17:04,990
think you have your disk store may fill

00:17:01,759 --> 00:17:08,539
up and there's those issues run that and

00:17:04,990 --> 00:17:11,119
with 211 they've app we've added the

00:17:08,539 --> 00:17:13,879
ability to actually encrypt those things

00:17:11,119 --> 00:17:15,889
that are stored on disk so if you have

00:17:13,879 --> 00:17:17,119
certain security requirements about

00:17:15,889 --> 00:17:19,140
anything that's written out to

00:17:17,119 --> 00:17:20,760
persistent storage has to be

00:17:19,140 --> 00:17:22,980
encrypted in some sort of algorithms

00:17:20,760 --> 00:17:25,170
there's options for that now

00:17:22,980 --> 00:17:27,089
so obviously the performance impact and

00:17:25,170 --> 00:17:31,680
all that stuff too but I in this there

00:17:27,089 --> 00:17:33,030
are options there now when you're

00:17:31,680 --> 00:17:34,650
dealing with the low-level things like

00:17:33,030 --> 00:17:37,440
said you're doing streams some of them

00:17:34,650 --> 00:17:39,030
is not the most convenient thing to do

00:17:37,440 --> 00:17:42,360
so if you're dealing with sage XBee

00:17:39,030 --> 00:17:45,570
objects or check these objects or the

00:17:42,360 --> 00:17:47,430
easy ones that to talk about and you

00:17:45,570 --> 00:17:50,460
want to send like a Jack's B object to a

00:17:47,430 --> 00:17:53,310
service that expecting a soap thing we

00:17:50,460 --> 00:17:56,100
have this camel soap component it's

00:17:53,310 --> 00:17:59,550
actually really a more of a debt of data

00:17:56,100 --> 00:18:01,500
finding data binding that or data format

00:17:59,550 --> 00:18:06,000
that's it that amount of data binding in

00:18:01,500 --> 00:18:08,550
C except data format and camel that kind

00:18:06,000 --> 00:18:10,440
of makes generating a soap message for

00:18:08,550 --> 00:18:13,920
these low-level things very easy you can

00:18:10,440 --> 00:18:15,540
basic what if it'll basically do was in

00:18:13,920 --> 00:18:19,530
this route that you see at the bottom

00:18:15,540 --> 00:18:21,030
that the direct marshal and then to what

00:18:19,530 --> 00:18:25,200
it'll do is if you send a Jack's the

00:18:21,030 --> 00:18:27,090
object to that direct endpoint it'll

00:18:25,200 --> 00:18:28,560
pass it into the soap data format which

00:18:27,090 --> 00:18:31,380
will then kind of wrapper it with some

00:18:28,560 --> 00:18:32,880
Jack's be things that represent the soap

00:18:31,380 --> 00:18:35,000
envelope and the soap headers and the

00:18:32,880 --> 00:18:39,510
headers out of the message and stuff and

00:18:35,000 --> 00:18:41,130
then write that to a byte array and then

00:18:39,510 --> 00:18:43,910
poured that onto the service so it

00:18:41,130 --> 00:18:47,490
basically just helps helps you make the

00:18:43,910 --> 00:18:49,620
stream of bytes for soap a little bit

00:18:47,490 --> 00:18:52,500
easier so instead of having to do a lot

00:18:49,620 --> 00:18:53,880
of yourself then again if you're going

00:18:52,500 --> 00:18:55,890
to do that you might as well just use

00:18:53,880 --> 00:18:58,130
cxf or spring WS which we'll cover in a

00:18:55,890 --> 00:18:58,130
minute

00:18:58,940 --> 00:19:02,760
this is all part of all that everything

00:19:00,900 --> 00:19:05,160
we talk about here is part as part of

00:19:02,760 --> 00:19:05,790
camel yeah so if you if you go to the if

00:19:05,160 --> 00:19:08,190
you do it

00:19:05,790 --> 00:19:11,430
SBN check out a camel it's there

00:19:08,190 --> 00:19:13,380
someplace in that hundred and some

00:19:11,430 --> 00:19:14,309
components that are in the components

00:19:13,380 --> 00:19:17,759
directory

00:19:14,309 --> 00:19:19,739
yeah yeah yeah yeah it's kind of weird

00:19:17,759 --> 00:19:21,179
name things because it is it isn't

00:19:19,739 --> 00:19:24,299
really a component so you won't sit on

00:19:21,179 --> 00:19:27,529
the component page it's a data format so

00:19:24,299 --> 00:19:29,609
it would be off on the data format pages

00:19:27,529 --> 00:19:33,149
now the one thing to be careful about

00:19:29,609 --> 00:19:36,719
with this I discovered this while I was

00:19:33,149 --> 00:19:39,779
testing and preparing for this slide was

00:19:36,719 --> 00:19:41,669
the marshal and unmarshal methods inside

00:19:39,779 --> 00:19:44,099
a camel used a byte array output stream

00:19:41,669 --> 00:19:46,229
not a cached output string so if the

00:19:44,099 --> 00:19:50,059
size of your message of your jacks be

00:19:46,229 --> 00:19:53,039
objects is huge it will consume memory

00:19:50,059 --> 00:19:54,389
we were having a bet with Hadrian as to

00:19:53,039 --> 00:19:55,710
whether like Christian or Ben or

00:19:54,389 --> 00:19:57,769
somebody's going to be have this fixed

00:19:55,710 --> 00:20:01,619
by the time I end my presentation or not

00:19:57,769 --> 00:20:04,849
but it is something that I didn't know

00:20:01,619 --> 00:20:07,469
so any of the existing versions of camel

00:20:04,849 --> 00:20:08,849
it would consume little in memory it is

00:20:07,469 --> 00:20:11,429
something that I now know about and

00:20:08,849 --> 00:20:15,419
we'll probably get that fixed as I saw

00:20:11,429 --> 00:20:21,690
that not a huge deal but something to be

00:20:15,419 --> 00:20:23,070
aware of then beyond those kind of

00:20:21,690 --> 00:20:25,349
low-level things is when we start

00:20:23,070 --> 00:20:27,210
getting into the more full-featured when

00:20:25,349 --> 00:20:31,259
I talk about full-featured web service

00:20:27,210 --> 00:20:36,059
things they provide more than just like

00:20:31,259 --> 00:20:37,529
bike handling and most these cases they

00:20:36,059 --> 00:20:39,899
will like either take your Jack's B

00:20:37,529 --> 00:20:42,389
objects or your XML and handle the the

00:20:39,899 --> 00:20:43,589
wrap ring like creating a soap envelope

00:20:42,389 --> 00:20:47,999
in the soap header or the soap body

00:20:43,589 --> 00:20:50,219
wrapper elements they handle things some

00:20:47,999 --> 00:20:52,940
of the extra WS star protocols like WS

00:20:50,219 --> 00:20:55,139
addressing and things like that

00:20:52,940 --> 00:20:57,690
once you start getting into your more

00:20:55,139 --> 00:21:02,759
complicated soap cases these things and

00:20:57,690 --> 00:21:04,589
make like quite a bit easier for if you

00:21:02,759 --> 00:21:06,119
have requirements like ws-security

00:21:04,589 --> 00:21:07,529
based requirements you're not going to

00:21:06,119 --> 00:21:10,830
want to be programming those to yourself

00:21:07,529 --> 00:21:13,499
I take it from me we've been doing these

00:21:10,830 --> 00:21:15,179
things for a year like comb and I have

00:21:13,499 --> 00:21:18,450
been doing security stuff for years

00:21:15,179 --> 00:21:20,909
and it's still not working completely

00:21:18,450 --> 00:21:22,529
well and right and we're constantly

00:21:20,909 --> 00:21:23,580
making fixes them so it's not something

00:21:22,529 --> 00:21:24,910
going to tackle yourself and this is

00:21:23,580 --> 00:21:28,240
where you having having

00:21:24,910 --> 00:21:30,070
pull based full-featured options

00:21:28,240 --> 00:21:32,290
available to you makes a little bit more

00:21:30,070 --> 00:21:34,840
valuable first one to talk about is is

00:21:32,290 --> 00:21:37,390
the spring web services component again

00:21:34,840 --> 00:21:40,960
it pretty much will take your XML coming

00:21:37,390 --> 00:21:43,090
in do the wrapping send it off likewise

00:21:40,960 --> 00:21:45,130
it is a it's both a consumer and a

00:21:43,090 --> 00:21:50,640
producer so on the consumer side you can

00:21:45,130 --> 00:21:52,390
expo like create web services that will

00:21:50,640 --> 00:21:53,770
depending on the mappings that you

00:21:52,390 --> 00:21:56,380
choose will then go into whatever

00:21:53,770 --> 00:21:58,360
processor that you want to do or trigger

00:21:56,380 --> 00:22:01,360
another route something like that so you

00:21:58,360 --> 00:22:05,530
can kind of see yeah that's a little

00:22:01,360 --> 00:22:09,070
small over there the top one here they

00:22:05,530 --> 00:22:11,800
get your simple sample of a producer

00:22:09,070 --> 00:22:14,880
where if you send some XML into the

00:22:11,800 --> 00:22:17,140
direct example route as a starting-point

00:22:14,880 --> 00:22:19,020
string web services would wrapper that

00:22:17,140 --> 00:22:22,720
in a soap message and send it off to

00:22:19,020 --> 00:22:24,400
pookkalam slash bar there again it's

00:22:22,720 --> 00:22:26,800
camel there's a whole bunch of question

00:22:24,400 --> 00:22:29,650
mark parameter things on the spring URLs

00:22:26,800 --> 00:22:32,590
that you can say send in a soap action

00:22:29,650 --> 00:22:34,630
of whatever this is you we want WS

00:22:32,590 --> 00:22:36,970
addressing enabled so a spring can't

00:22:34,630 --> 00:22:38,590
handle Douglas addressing so it will add

00:22:36,970 --> 00:22:41,560
the addressing heading headers and

00:22:38,590 --> 00:22:44,140
handle a lot of that response or a lot

00:22:41,560 --> 00:22:48,820
of soap things that you just don't want

00:22:44,140 --> 00:22:52,870
to deal with on the consumer side spring

00:22:48,820 --> 00:22:55,240
has some really nice capability of in

00:22:52,870 --> 00:22:57,760
there I want to say like servlet or

00:22:55,240 --> 00:23:01,300
endpoint mapping thing where you can

00:22:57,760 --> 00:23:03,580
kind of specify a bunch of rules that

00:23:01,300 --> 00:23:06,610
say okay if the data coming in reaches

00:23:03,580 --> 00:23:09,480
meets these patterns it would go off to

00:23:06,610 --> 00:23:12,280
it would trigger a start of this route

00:23:09,480 --> 00:23:14,890
for cxf it's generally looking you have

00:23:12,280 --> 00:23:16,300
a URL that will the URL itself is the

00:23:14,890 --> 00:23:18,970
only thing that really will will trigger

00:23:16,300 --> 00:23:20,490
your start of your route or like in a

00:23:18,970 --> 00:23:24,370
purist except case it's your endpoint

00:23:20,490 --> 00:23:26,470
with spring it there's a lot more

00:23:24,370 --> 00:23:29,190
flexibility so that the top the top one

00:23:26,470 --> 00:23:31,390
here you're basically telling spring

00:23:29,190 --> 00:23:34,050
when anything comes into your servlet

00:23:31,390 --> 00:23:36,970
that has the root cue name in the body

00:23:34,050 --> 00:23:38,500
not that like after you've done the soap

00:23:36,970 --> 00:23:40,660
envelope and by

00:23:38,500 --> 00:23:43,930
processing if the root queue name is

00:23:40,660 --> 00:23:45,760
this get foo then we're going to go off

00:23:43,930 --> 00:23:48,820
and start this rep otherwise if it

00:23:45,760 --> 00:23:52,780
matches this XPath expression with a

00:23:48,820 --> 00:23:54,550
whole big long thing then we're going to

00:23:52,780 --> 00:23:56,140
start this round so spring actually

00:23:54,550 --> 00:23:59,770
gives you kind of some neat flexibility

00:23:56,140 --> 00:24:01,390
as far as being able to have like just

00:23:59,770 --> 00:24:05,020
one thing kind of deployed and it kind

00:24:01,390 --> 00:24:07,060
of will like flow out of there into a

00:24:05,020 --> 00:24:10,240
bunch of routes now that said even on

00:24:07,060 --> 00:24:13,630
the cxf side you could have one URL and

00:24:10,240 --> 00:24:15,160
then do a switch on x queries or in a

00:24:13,630 --> 00:24:16,240
choice on x queries and do roughly the

00:24:15,160 --> 00:24:18,130
same thing you just kind of take the

00:24:16,240 --> 00:24:21,040
payloads and pass them on the next to

00:24:18,130 --> 00:24:22,390
another route anyway so it's just where

00:24:21,040 --> 00:24:25,060
is that kind of configuration down is it

00:24:22,390 --> 00:24:32,470
in routes or as part of these URLs for

00:24:25,060 --> 00:24:40,810
spring don't know and then we get into

00:24:32,470 --> 00:24:43,300
the apache cxf based component I said

00:24:40,810 --> 00:24:45,010
earlier in most in a lot of cases cxf

00:24:43,300 --> 00:24:46,300
component is probably overkill for what

00:24:45,010 --> 00:24:48,790
you're going to need unless you need

00:24:46,300 --> 00:24:52,630
specific things like the ws-security

00:24:48,790 --> 00:24:56,460
things WR mws policy all of those things

00:24:52,630 --> 00:24:59,410
i see except can handle those very well

00:24:56,460 --> 00:25:03,730
6/f component has different options for

00:24:59,410 --> 00:25:05,980
for what gets passed from cxf to the

00:25:03,730 --> 00:25:09,850
route i'm going to cover those for in a

00:25:05,980 --> 00:25:11,770
minute a Christian kind of touched on

00:25:09,850 --> 00:25:13,150
them very briefly this morning but I'll

00:25:11,770 --> 00:25:16,870
talk a little bit more in depth about

00:25:13,150 --> 00:25:19,630
those obviously with cxf you're dealing

00:25:16,870 --> 00:25:21,820
with Jack's wiz so you if you have an

00:25:19,630 --> 00:25:24,100
endpoint that has annotations and stuff

00:25:21,820 --> 00:25:26,980
I see accepts job it will actually take

00:25:24,100 --> 00:25:29,380
that those classes and interfaces and

00:25:26,980 --> 00:25:32,080
stuff and create Jack's be context for

00:25:29,380 --> 00:25:33,550
the POJO models and generate the wisdoms

00:25:32,080 --> 00:25:36,520
that would get returned if somebody else

00:25:33,550 --> 00:25:37,810
for a wisdom I obviously like your route

00:25:36,520 --> 00:25:39,400
you're not going to be dealing with the

00:25:37,810 --> 00:25:40,840
wisdoms around like that you're just

00:25:39,400 --> 00:25:45,010
going to take the the information coming

00:25:40,840 --> 00:25:46,060
in and respond but for true web service

00:25:45,010 --> 00:25:48,760
you're going to want to have a Wizzle

00:25:46,060 --> 00:25:50,580
exposed for the the users to be able to

00:25:48,760 --> 00:25:53,760
use so again cxf can

00:25:50,580 --> 00:25:55,919
handle that very well based on Java

00:25:53,760 --> 00:25:57,330
first scenarios with Jax wiz or even if

00:25:55,919 --> 00:25:59,220
you want to start with a whizz DeLand

00:25:57,330 --> 00:26:04,230
Jenner Ventura code or even not generate

00:25:59,220 --> 00:26:09,570
code with the camel and the big thing

00:26:04,230 --> 00:26:11,549
about the camel cxf component I in camel

00:26:09,570 --> 00:26:13,470
it really does expose pretty much the

00:26:11,549 --> 00:26:15,809
entire functionality have see except to

00:26:13,470 --> 00:26:19,260
a camel user and that's important I mean

00:26:15,809 --> 00:26:20,519
it six F has touch points like through

00:26:19,260 --> 00:26:22,590
the Interceptor chain through the

00:26:20,519 --> 00:26:25,260
various list endpoint listener bus

00:26:22,590 --> 00:26:28,139
listeners things like that so if if you

00:26:25,260 --> 00:26:31,110
need to do some custom functionality in

00:26:28,139 --> 00:26:34,799
your processing all of those touch

00:26:31,110 --> 00:26:37,380
points that cxf has are exposed to the

00:26:34,799 --> 00:26:39,570
camel people and so if you are familiar

00:26:37,380 --> 00:26:41,130
with cxf and you may have applications

00:26:39,570 --> 00:26:43,080
that are already using some of these

00:26:41,130 --> 00:26:46,230
things using those with camels

00:26:43,080 --> 00:26:48,000
relatively simple you can kind of get

00:26:46,230 --> 00:26:51,570
them all kind of working and for the

00:26:48,000 --> 00:26:53,130
most part however and this is the

00:26:51,570 --> 00:26:56,429
probably my biggest complaint about the

00:26:53,130 --> 00:26:58,139
cxf component and camel it's kind of

00:26:56,429 --> 00:27:00,299
complex to configure because there's a

00:26:58,139 --> 00:27:02,370
lot of options most of your other

00:27:00,299 --> 00:27:07,049
components you can do fairly well just

00:27:02,370 --> 00:27:09,570
by modifying the URI string when you as

00:27:07,049 --> 00:27:12,149
a starting route like you saw to HTTP

00:27:09,570 --> 00:27:13,769
colon whatever whatever you can do that

00:27:12,149 --> 00:27:17,669
with cxf but because there's all these

00:27:13,769 --> 00:27:19,620
configuration options your string your

00:27:17,669 --> 00:27:21,059
your string can kind of go like from

00:27:19,620 --> 00:27:24,210
here to the wall or something like that

00:27:21,059 --> 00:27:26,789
it's really that mean it's not so bad

00:27:24,210 --> 00:27:30,000
not so bad in the java DSL where you

00:27:26,789 --> 00:27:31,620
can't least do like close a string and

00:27:30,000 --> 00:27:33,149
then open it like do the plus and then

00:27:31,620 --> 00:27:34,380
open it on the next line and so you can

00:27:33,149 --> 00:27:37,710
have make multi but when you're dealing

00:27:34,380 --> 00:27:39,120
with the with xml where your string is

00:27:37,710 --> 00:27:42,240
basically the contents of the element it

00:27:39,120 --> 00:27:46,620
can kind of make your XML just kind of

00:27:42,240 --> 00:27:48,389
like scroll and scroll and scroll so for

00:27:46,620 --> 00:27:50,850
in the XML stuff then we to kind of

00:27:48,389 --> 00:27:54,059
combat that we actually created separate

00:27:50,850 --> 00:27:56,370
like cxf endpoint elements and then you

00:27:54,059 --> 00:27:59,760
can refer to those in your URL so

00:27:56,370 --> 00:28:00,930
instead of doing C HC except : H to be

00:27:59,760 --> 00:28:02,580
whatever you can do

00:28:00,930 --> 00:28:04,290
being and refer to one of the other

00:28:02,580 --> 00:28:06,030
beans or configures so like that there's

00:28:04,290 --> 00:28:10,830
a lot of power there but it does

00:28:06,030 --> 00:28:16,500
complicate your configuration a bit so

00:28:10,830 --> 00:28:17,940
there's the kind of the example of like

00:28:16,500 --> 00:28:19,830
the various end points that you have

00:28:17,940 --> 00:28:21,990
with cxf and you can kind of see on

00:28:19,830 --> 00:28:24,810
you're dealing with wisdoms and

00:28:21,990 --> 00:28:26,790
namespaces and cue names and service

00:28:24,810 --> 00:28:28,290
classes and and all these kind of stuff

00:28:26,790 --> 00:28:31,590
which if you try to throw them all on a

00:28:28,290 --> 00:28:33,480
single URL line it would get long and

00:28:31,590 --> 00:28:36,180
these are actually simple use this is

00:28:33,480 --> 00:28:39,840
simple stuff if you start happy to like

00:28:36,180 --> 00:28:42,390
add in interceptors you see except end

00:28:39,840 --> 00:28:44,550
point element actually has a cxf :

00:28:42,390 --> 00:28:46,350
interceptors or in interceptors now

00:28:44,550 --> 00:28:47,460
intercept there's separate depending

00:28:46,350 --> 00:28:49,650
where you want the interceptors there

00:28:47,460 --> 00:28:52,560
are child elements for handling adding

00:28:49,650 --> 00:28:55,250
interceptors into there if you need to

00:28:52,560 --> 00:28:58,230
add two except features same way

00:28:55,250 --> 00:29:01,590
endpoint properties that's a big one

00:28:58,230 --> 00:29:03,390
this thing's like ws-security with C

00:29:01,590 --> 00:29:06,960
except the security policy requirements

00:29:03,390 --> 00:29:11,130
that you have to pass in class names for

00:29:06,960 --> 00:29:13,230
your password validators and your

00:29:11,130 --> 00:29:15,750
keyboard locations of your key stores

00:29:13,230 --> 00:29:17,730
for your various keys and things like

00:29:15,750 --> 00:29:21,270
that those are all properties NC Excel

00:29:17,730 --> 00:29:23,370
so if you again you can do like question

00:29:21,270 --> 00:29:24,870
mark I think it's C except properties

00:29:23,370 --> 00:29:27,000
equals and then some name value things

00:29:24,870 --> 00:29:29,190
on the your you just don't want to do

00:29:27,000 --> 00:29:31,320
that though it's it can get very

00:29:29,190 --> 00:29:32,940
complicated which is why if you can kind

00:29:31,320 --> 00:29:34,500
of go this route you can have there's

00:29:32,940 --> 00:29:36,420
child elements for all the various C

00:29:34,500 --> 00:29:39,570
except things that that you may need

00:29:36,420 --> 00:29:43,080
again it's a little complicated from a

00:29:39,570 --> 00:29:46,860
configuration standpoint definitely kind

00:29:43,080 --> 00:29:48,870
of open to ideas for how to address some

00:29:46,860 --> 00:29:51,140
of that explicitly for camel 3 where we

00:29:48,870 --> 00:29:53,250
can have the opportunity to to kind of

00:29:51,140 --> 00:29:55,110
rethink some of this so if anybody has

00:29:53,250 --> 00:29:56,880
some ideas we're definitely open for

00:29:55,110 --> 00:29:58,590
some time it's one of those things where

00:29:56,880 --> 00:30:00,240
6f has a lot of power and like how do

00:29:58,590 --> 00:30:02,490
you expose that in some way that's

00:30:00,240 --> 00:30:06,930
convenient and there's a balance there

00:30:02,490 --> 00:30:08,910
that we're trying to achieve so this

00:30:06,930 --> 00:30:12,660
again is basically just a simple route

00:30:08,910 --> 00:30:13,770
of what comes in on the one goes out on

00:30:12,660 --> 00:30:17,560
the other

00:30:13,770 --> 00:30:19,120
doesn't do any major processing the

00:30:17,560 --> 00:30:21,280
default payload which I'm going to touch

00:30:19,120 --> 00:30:25,420
in a second would be the POJO so this

00:30:21,280 --> 00:30:29,650
would actually whatever the greeter

00:30:25,420 --> 00:30:31,930
imple has as far as its whatever its

00:30:29,650 --> 00:30:34,510
signature says so if it's like a say hi

00:30:31,930 --> 00:30:36,280
object or whatever a person object or

00:30:34,510 --> 00:30:39,610
whatever it would actually this would be

00:30:36,280 --> 00:30:43,600
on the the camel exchange in the middle

00:30:39,610 --> 00:30:45,130
of those two thus if your router is

00:30:43,600 --> 00:30:46,030
doing more than just a from 2 and you're

00:30:45,130 --> 00:30:48,160
dealing with something in the middle

00:30:46,030 --> 00:30:51,490
there you're going to get a whatever the

00:30:48,160 --> 00:30:53,530
jacks be based object or nice thing

00:30:51,490 --> 00:30:55,390
about cxf is we also have data other

00:30:53,530 --> 00:30:58,360
data binding so if you have if your

00:30:55,390 --> 00:31:01,900
greeter interface there has the data

00:30:58,360 --> 00:31:05,050
binding XML beans that would be an XML

00:31:01,900 --> 00:31:09,580
bean object not eight not eject the

00:31:05,050 --> 00:31:12,040
object but say so I'm going to talk

00:31:09,580 --> 00:31:13,510
briefly about the cxf data formats

00:31:12,040 --> 00:31:15,100
because it's kind of important from a

00:31:13,510 --> 00:31:16,540
particularly from a performance

00:31:15,100 --> 00:31:18,490
standpoint but also what you're going to

00:31:16,540 --> 00:31:23,860
get at in the next sections of your

00:31:18,490 --> 00:31:26,170
routes POJO which is the default again

00:31:23,860 --> 00:31:29,560
as I mentioned it seeks by default with

00:31:26,170 --> 00:31:31,750
CF I mean 6 s designed to - you take the

00:31:29,560 --> 00:31:33,130
XML in we do some more marshalling into

00:31:31,750 --> 00:31:35,620
objects and that's what we hand in to

00:31:33,130 --> 00:31:39,400
your endpoint so POJO is basically that

00:31:35,620 --> 00:31:41,410
the default would be jax whiz or jex b

00:31:39,400 --> 00:31:44,080
because that's what Jax was defines as

00:31:41,410 --> 00:31:45,940
the default but there are annotations in

00:31:44,080 --> 00:31:47,800
the configuration that you can say XML

00:31:45,940 --> 00:31:51,910
beans and a lot of stuff can depend on

00:31:47,800 --> 00:31:53,800
on what your what you've used as far as

00:31:51,910 --> 00:31:55,750
your like whistle Java tool like what

00:31:53,800 --> 00:31:57,610
flags you've passed and things like that

00:31:55,750 --> 00:32:00,760
so or if you're doing Java first in

00:31:57,610 --> 00:32:03,340
which case you have existing things so

00:32:00,760 --> 00:32:05,800
that's again that just means cxf will

00:32:03,340 --> 00:32:07,960
handle everything the xml come in will

00:32:05,800 --> 00:32:11,050
process the soap parts will unmarshal

00:32:07,960 --> 00:32:13,510
the the body into these objects and then

00:32:11,050 --> 00:32:17,760
by the time we get out of c xf and into

00:32:13,510 --> 00:32:19,690
the camel space see those are the

00:32:17,760 --> 00:32:20,560
objects the same as what you would have

00:32:19,690 --> 00:32:24,990
if you were doing a

00:32:20,560 --> 00:32:27,760
accepting the other the next thing that

00:32:24,990 --> 00:32:31,870
at the extreme opposite end of the

00:32:27,760 --> 00:32:33,850
spectrum is the message or raw used to

00:32:31,870 --> 00:32:36,340
be called message but there's reason to

00:32:33,850 --> 00:32:40,020
kind of difficult it's oh we've kind of

00:32:36,340 --> 00:32:43,260
alias to raw for right now and that's

00:32:40,020 --> 00:32:45,700
that very similar to the very low level

00:32:43,260 --> 00:32:48,010
components that I mentioned earlier when

00:32:45,700 --> 00:32:51,280
it gets out of cxf and in the camel it's

00:32:48,010 --> 00:32:54,280
going to be a byte stream see in this in

00:32:51,280 --> 00:32:57,730
the raw such message payload or data

00:32:54,280 --> 00:32:59,710
format things see except does almost no

00:32:57,730 --> 00:33:01,150
processing it will not do any XML

00:32:59,710 --> 00:33:02,200
processing it won't look at the soap

00:33:01,150 --> 00:33:05,830
envelope it won't you to look at the

00:33:02,200 --> 00:33:08,700
soap body it does I it really strips out

00:33:05,830 --> 00:33:11,050
almost all of the cxf capabilities the

00:33:08,700 --> 00:33:13,840
to basically through a point where it

00:33:11,050 --> 00:33:14,830
looks like the like camel jetty

00:33:13,840 --> 00:33:16,720
component where you're just kind of

00:33:14,830 --> 00:33:17,950
getting byte arrays stuff like that so

00:33:16,720 --> 00:33:21,820
the question is okay why would you have

00:33:17,950 --> 00:33:23,980
that arm one thing that I mentioned

00:33:21,820 --> 00:33:25,600
earlier was the whistle generation if

00:33:23,980 --> 00:33:27,370
you want to deal with like the strain

00:33:25,600 --> 00:33:29,740
based stuff but you still want the C

00:33:27,370 --> 00:33:32,320
except to handle things like the

00:33:29,740 --> 00:33:33,880
question mark whiz doll and when I start

00:33:32,320 --> 00:33:37,240
dealing with with rest the question mark

00:33:33,880 --> 00:33:38,290
Waddell or underscore Waddell so there

00:33:37,240 --> 00:33:39,940
are certain things like that that you

00:33:38,290 --> 00:33:41,800
may want you still may want to see

00:33:39,940 --> 00:33:43,060
except to generate for you but from a

00:33:41,800 --> 00:33:44,860
camel standpoint you still just want

00:33:43,060 --> 00:33:47,350
this stream of bytes so there are things

00:33:44,860 --> 00:33:48,550
you can you like that the big thing is

00:33:47,350 --> 00:33:50,170
it because you're again you're just

00:33:48,550 --> 00:33:52,570
dealing with the stream of bytes that's

00:33:50,170 --> 00:33:54,850
your highest performance option as rate

00:33:52,570 --> 00:34:01,900
is that one right there for most for the

00:33:54,850 --> 00:34:04,450
most key part a payload um it's kind of

00:34:01,900 --> 00:34:06,970
like the POJO without the actually

00:34:04,450 --> 00:34:07,990
creating the jxp objects if you're

00:34:06,970 --> 00:34:09,730
dealing with something like this was

00:34:07,990 --> 00:34:11,710
like a pure sea except application this

00:34:09,730 --> 00:34:14,200
would be the equivalent of passing the

00:34:11,710 --> 00:34:16,350
source data binding into the whistle to

00:34:14,200 --> 00:34:18,550
java tool where it would generate

00:34:16,350 --> 00:34:21,130
instead of generating jacks be things it

00:34:18,550 --> 00:34:23,409
just in a generated code it just does a

00:34:21,130 --> 00:34:24,820
like Dom source or a stream source or

00:34:23,409 --> 00:34:27,899
something like that and that's what you

00:34:24,820 --> 00:34:30,909
would I see except will pass to you I

00:34:27,899 --> 00:34:32,589
this is kind of like in between the POJO

00:34:30,909 --> 00:34:36,729
in the raw

00:34:32,589 --> 00:34:40,629
you actually get XML as a source by

00:34:36,729 --> 00:34:42,969
default with with starting to 93

00:34:40,629 --> 00:34:47,289
I think of camel it would be a stack

00:34:42,969 --> 00:34:49,419
source if Stax is enabled which so at

00:34:47,289 --> 00:34:51,549
least it allows some level streaming

00:34:49,419 --> 00:34:53,499
because with Stax you can kind of get

00:34:51,549 --> 00:34:55,450
the events off there and it basically

00:34:53,499 --> 00:34:58,299
kind of wrappers the input stream with

00:34:55,450 --> 00:35:00,789
the stacks or so C except we'll have

00:34:58,299 --> 00:35:05,049
processed all the soapy stuff so it's

00:35:00,789 --> 00:35:06,489
just just the body coming in i if for

00:35:05,049 --> 00:35:09,519
some reason while processing the soap

00:35:06,489 --> 00:35:12,999
stuff it has to break that streaming it

00:35:09,519 --> 00:35:14,410
will obviously like ws-security we have

00:35:12,999 --> 00:35:16,690
to read the whole thing in so we can do

00:35:14,410 --> 00:35:18,219
the signatures and stuff so again I saw

00:35:16,690 --> 00:35:21,460
all kind of hidden under the covers by C

00:35:18,219 --> 00:35:23,410
except my time against the route you

00:35:21,460 --> 00:35:28,150
just got XML the body now that the

00:35:23,410 --> 00:35:29,259
problem we had in 2:9 and earlier was

00:35:28,150 --> 00:35:31,660
that those were the only three options

00:35:29,259 --> 00:35:33,400
we had what if you wanted to have C

00:35:31,660 --> 00:35:36,630
except actually processed the soap stuff

00:35:33,400 --> 00:35:39,219
but you still wanted the entire message

00:35:36,630 --> 00:35:41,829
there wasn't an option to do that with

00:35:39,219 --> 00:35:43,779
prior versions of camel so one of the

00:35:41,829 --> 00:35:48,069
things that we added was the C except

00:35:43,779 --> 00:35:50,999
message mode which kind of sits between

00:35:48,069 --> 00:35:53,289
the payload and the raw message in that

00:35:50,999 --> 00:35:55,839
seeked it doesn't remove all the

00:35:53,289 --> 00:35:58,089
interceptors like it's in the raw mode

00:35:55,839 --> 00:36:00,009
so all of the accept will still do the

00:35:58,089 --> 00:36:01,660
WS RM processing it will still the SS

00:36:00,009 --> 00:36:03,039
Security processing stuff like that but

00:36:01,660 --> 00:36:06,130
what you like you get in your camel

00:36:03,039 --> 00:36:09,099
route then is the kind of post processed

00:36:06,130 --> 00:36:11,529
full message so if you have headers in

00:36:09,099 --> 00:36:13,239
your XML your so patterns in your soap

00:36:11,529 --> 00:36:16,989
message they'll still be going through

00:36:13,239 --> 00:36:18,940
but it's post post-processing so like a

00:36:16,989 --> 00:36:20,710
username token Vasudha there but if it

00:36:18,940 --> 00:36:21,880
was originally a cryptid on the wire by

00:36:20,710 --> 00:36:23,920
the time you get in the camel will be

00:36:21,880 --> 00:36:27,729
decrypted because C accessible I've done

00:36:23,920 --> 00:36:29,710
that a lot of good things a lot about

00:36:27,729 --> 00:36:31,569
things I great idea that there's a

00:36:29,710 --> 00:36:33,160
problem right now and that there's some

00:36:31,569 --> 00:36:35,410
restrictions inside of C except that

00:36:33,160 --> 00:36:38,170
makes us have to pull the entire message

00:36:35,410 --> 00:36:41,289
into basically an S AJ model in order to

00:36:38,170 --> 00:36:43,599
do this so there are definitely

00:36:41,289 --> 00:36:45,999
performance impact of it right now

00:36:43,599 --> 00:36:47,470
I'm hoping as part of either a future

00:36:45,999 --> 00:36:49,239
version of C except to be able to fix

00:36:47,470 --> 00:36:52,229
some of those issues and then go back to

00:36:49,239 --> 00:36:54,819
fix the camel issues so that we can

00:36:52,229 --> 00:36:56,799
continue to stream it rather than having

00:36:54,819 --> 00:36:58,869
to pull everything in so I said for the

00:36:56,799 --> 00:37:00,849
most most times when you're dealing with

00:36:58,869 --> 00:37:02,319
the cxf message as opposed to the raw

00:37:00,849 --> 00:37:03,549
message you're going to need the whole

00:37:02,319 --> 00:37:05,440
thing in anyway because things like

00:37:03,549 --> 00:37:06,190
ws-security is going to need to process

00:37:05,440 --> 00:37:09,880
the whole message

00:37:06,190 --> 00:37:11,019
so the impact is less but there is an

00:37:09,880 --> 00:37:17,049
impact there so something to keep in

00:37:11,019 --> 00:37:20,529
mind right now all right so that pretty

00:37:17,049 --> 00:37:22,479
much covers most the soap things um make

00:37:20,529 --> 00:37:25,660
sure to stop right there any questions

00:37:22,479 --> 00:37:31,390
about anything that far might as well

00:37:25,660 --> 00:37:33,519
stop and ask No all right let me go into

00:37:31,390 --> 00:37:36,519
the other category web services which

00:37:33,519 --> 00:37:39,069
would be rest right now in camel you

00:37:36,519 --> 00:37:40,569
have additional low-level things like

00:37:39,069 --> 00:37:43,359
with those low-level things talked about

00:37:40,569 --> 00:37:45,099
earlier you can do posts you can do gets

00:37:43,359 --> 00:37:47,200
you can kind of do your puts and your

00:37:45,099 --> 00:37:49,210
deletes I like doing all the low-level

00:37:47,200 --> 00:37:50,200
things so you can do it it's just gonna

00:37:49,210 --> 00:37:51,430
be a little bit more difficult because

00:37:50,200 --> 00:37:53,710
you're gonna have to start adding extra

00:37:51,430 --> 00:37:54,759
like question mark flag to say what

00:37:53,710 --> 00:37:58,329
method you're going to be dealing with

00:37:54,759 --> 00:38:01,089
and things like that we have there two

00:37:58,329 --> 00:38:02,499
components right now in camel to kind of

00:38:01,089 --> 00:38:06,509
make that a little bit easier the first

00:38:02,499 --> 00:38:09,160
one is the camel wrestling this is

00:38:06,509 --> 00:38:11,799
basically an example here where you're

00:38:09,160 --> 00:38:15,819
going to expose a rest-based service on

00:38:11,799 --> 00:38:18,700
a DAT users ID basic it's going to start

00:38:15,819 --> 00:38:21,130
a process or a route that then goes into

00:38:18,700 --> 00:38:22,839
this processor and rest that we'll take

00:38:21,130 --> 00:38:26,619
a look at that URL up there notice the

00:38:22,839 --> 00:38:29,380
brackets and depending on the URL coming

00:38:26,619 --> 00:38:32,859
in we'll find out that ID is in that

00:38:29,380 --> 00:38:35,829
group there and we'll create a header in

00:38:32,859 --> 00:38:37,180
exchange to actually represent that and

00:38:35,829 --> 00:38:38,950
you can kind of manipulate things that

00:38:37,180 --> 00:38:40,989
way so you don't have to do all the URL

00:38:38,950 --> 00:38:46,660
parsing to figure out okay where is the

00:38:40,989 --> 00:38:48,760
ID and that does that for you so like

00:38:46,660 --> 00:38:53,200
this is actually again

00:38:48,760 --> 00:38:55,990
I'll take you on the producer side so

00:38:53,200 --> 00:38:58,090
they send this it would trigger that and

00:38:55,990 --> 00:39:02,140
this one point one two three would be

00:38:58,090 --> 00:39:05,680
the IV going into your service and again

00:39:02,140 --> 00:39:07,060
it'll kind of handle this wrestle it has

00:39:05,680 --> 00:39:08,230
a whole bunch of the like you can put

00:39:07,060 --> 00:39:09,850
the different types of brackets and

00:39:08,230 --> 00:39:13,030
there's path params and like whether

00:39:09,850 --> 00:39:16,180
it's like a question mark type pram this

00:39:13,030 --> 00:39:17,290
is a path program again it just kind of

00:39:16,180 --> 00:39:19,120
makes it a little bit easier so you

00:39:17,290 --> 00:39:23,350
don't need to be tearing apart the URL

00:39:19,120 --> 00:39:24,840
rest that will do it for you makes a

00:39:23,350 --> 00:39:27,400
little bit more convenient but still not

00:39:24,840 --> 00:39:28,870
if you're kind of Java first type shop

00:39:27,400 --> 00:39:32,470
you're still just a little bit more

00:39:28,870 --> 00:39:34,750
complicated the other option is the

00:39:32,470 --> 00:39:37,570
camel see except component again this is

00:39:34,750 --> 00:39:40,600
another thing camel shake SEP component

00:39:37,570 --> 00:39:42,370
have gotten really big and one thing so

00:39:40,600 --> 00:39:45,130
money for probably three oh is splitted

00:39:42,370 --> 00:39:47,500
I know on the cxf side we've already

00:39:45,130 --> 00:39:49,090
kind of holds various parts of the

00:39:47,500 --> 00:39:51,160
jax-rs implementation to separate jars

00:39:49,090 --> 00:39:52,900
or probably only the same thing here and

00:39:51,160 --> 00:39:56,140
have a separate camel Jack's arrest

00:39:52,900 --> 00:39:57,640
based thing as opposed to the camel see

00:39:56,140 --> 00:39:59,380
except xrs opposed to kin will see so

00:39:57,640 --> 00:40:02,980
Jack's whiz or something like that but

00:39:59,380 --> 00:40:05,850
right now it's in the same thing the the

00:40:02,980 --> 00:40:08,620
big power here because it's jax-rs based

00:40:05,850 --> 00:40:11,380
are you all familiar with jax-rs and we

00:40:08,620 --> 00:40:13,300
should probably ask that for those of

00:40:11,380 --> 00:40:19,690
you're not it's basically a

00:40:13,300 --> 00:40:22,240
specification for how to map your urls

00:40:19,690 --> 00:40:25,020
and rest requests coming in two methods

00:40:22,240 --> 00:40:28,480
on a service object

00:40:25,020 --> 00:40:29,770
cxf extends that spec a little bit by

00:40:28,480 --> 00:40:32,680
allowing you to just have those

00:40:29,770 --> 00:40:34,510
annotations on an interface and then you

00:40:32,680 --> 00:40:36,220
can kind of end with camel you can kind

00:40:34,510 --> 00:40:38,410
of just use that interface to define

00:40:36,220 --> 00:40:40,030
what your rest methods are and that's

00:40:38,410 --> 00:40:42,910
basically what this is showing is you

00:40:40,030 --> 00:40:45,220
have a Java interface with the various

00:40:42,910 --> 00:40:49,540
annotations so you can have multiple

00:40:45,220 --> 00:40:52,240
methods there say get to that URL we'll

00:40:49,540 --> 00:40:55,570
call that method and a put to that will

00:40:52,240 --> 00:40:58,500
call that you can kind of when you

00:40:55,570 --> 00:41:02,010
create your endpoint then with the kind

00:40:58,500 --> 00:41:06,330
6f you just kind of pass that class name

00:41:02,010 --> 00:41:07,740
in and the 6f internally volt does a lot

00:41:06,330 --> 00:41:09,150
of things but one thing it'll generate

00:41:07,740 --> 00:41:10,710
the Waddell document for any of you that

00:41:09,150 --> 00:41:13,860
don't know what a Waddell document is

00:41:10,710 --> 00:41:16,950
it's basically the rest equivalent of a

00:41:13,860 --> 00:41:19,020
wisdom so it kind of describes what your

00:41:16,950 --> 00:41:20,610
rest services had like is it'll say the

00:41:19,020 --> 00:41:23,040
arrest service has least three these

00:41:20,610 --> 00:41:25,140
methods these are the pass to those

00:41:23,040 --> 00:41:26,940
methods is expecting a delete for that

00:41:25,140 --> 00:41:30,150
method I put for that method in the

00:41:26,940 --> 00:41:33,660
various types so it's like fish much

00:41:30,150 --> 00:41:34,920
wisdom for arrest so it'll do that based

00:41:33,660 --> 00:41:38,430
on that interface

00:41:34,920 --> 00:41:41,790
and it'll map everything talked in this

00:41:38,430 --> 00:41:43,800
case because it's using c xf s internal

00:41:41,790 --> 00:41:46,050
jetty it would bring up the jetty port

00:41:43,800 --> 00:41:48,600
with the the right paths and stuff like

00:41:46,050 --> 00:41:51,030
that so i think it comes in you're going

00:41:48,600 --> 00:41:53,460
to start a process and again you can

00:41:51,030 --> 00:41:54,960
kind of pulling things out of the

00:41:53,460 --> 00:41:57,990
exchange in the in message and then do

00:41:54,960 --> 00:42:01,020
some various processing based on what

00:41:57,990 --> 00:42:02,220
you see there in this case because you

00:42:01,020 --> 00:42:04,140
don't actually have a real object is all

00:42:02,220 --> 00:42:06,230
defined by an interface it kind of puts

00:42:04,140 --> 00:42:08,490
tears all that stuff apart into

00:42:06,230 --> 00:42:10,950
information in the in message and then

00:42:08,490 --> 00:42:12,360
you can in your processor your you can

00:42:10,950 --> 00:42:14,550
kind of do various things based on that

00:42:12,360 --> 00:42:18,810
in this case if it's the update customer

00:42:14,550 --> 00:42:20,820
method the accept will have based on the

00:42:18,810 --> 00:42:23,610
update customer method it will have

00:42:20,820 --> 00:42:26,160
already pulled the data which is kind of

00:42:23,610 --> 00:42:27,630
put in parsed it into a customer object

00:42:26,160 --> 00:42:29,640
and that's what will be in your exchange

00:42:27,630 --> 00:42:31,200
so you don't need to do any parsing

00:42:29,640 --> 00:42:34,920
you'll get the object just like liking

00:42:31,200 --> 00:42:36,750
opponent so that's just kind of makes

00:42:34,920 --> 00:42:40,080
make the the rest up a little bit easier

00:42:36,750 --> 00:42:42,840
if you're trying to do rest up so then

00:42:40,080 --> 00:42:44,040
there's the okay if l else fails and you

00:42:42,840 --> 00:42:46,490
really don't want to use any of those

00:42:44,040 --> 00:42:49,650
components there's the old standby of

00:42:46,490 --> 00:42:51,660
gamma beam camel beam you can pretty

00:42:49,650 --> 00:42:53,190
much do anything you want and you can

00:42:51,660 --> 00:42:56,520
kind of create your own little javabean

00:42:53,190 --> 00:43:01,350
you can use cxf generated code you can

00:42:56,520 --> 00:43:03,930
use X's to generate code you can i if

00:43:01,350 --> 00:43:07,170
you have code that actually uses a HTTP

00:43:03,930 --> 00:43:08,460
URL connection to do a put or something

00:43:07,170 --> 00:43:09,390
like that you can kind of create your

00:43:08,460 --> 00:43:11,700
own little bean

00:43:09,390 --> 00:43:15,089
and as part of your route you can call a

00:43:11,700 --> 00:43:17,640
method on your beef very simple I'm in

00:43:15,089 --> 00:43:20,190
it in a lot of cases it works like if

00:43:17,640 --> 00:43:22,049
you have code already as part of your

00:43:20,190 --> 00:43:24,720
application someplace that does

00:43:22,049 --> 00:43:27,089
something like that this may actually be

00:43:24,720 --> 00:43:28,650
the easiest option all right why like

00:43:27,089 --> 00:43:32,460
duplicate a lot of work that you've done

00:43:28,650 --> 00:43:35,970
to optimize a certain interaction when

00:43:32,460 --> 00:43:38,849
you can just call your bean it's simple

00:43:35,970 --> 00:43:40,309
and easy so that's my all else fails

00:43:38,849 --> 00:43:43,319
it's there for you

00:43:40,309 --> 00:43:44,730
that's something I strongly encourage

00:43:43,319 --> 00:43:48,869
but it is something that you should be

00:43:44,730 --> 00:43:51,240
aware of dit to think about so that's

00:43:48,869 --> 00:43:52,319
pretty much all the various options that

00:43:51,240 --> 00:43:54,660
I'm aware of there's probably about

00:43:52,319 --> 00:43:58,529
another dozen options out there in the

00:43:54,660 --> 00:43:59,849
ether of the internet someplace but

00:43:58,529 --> 00:44:02,309
another so these are the stuff that's

00:43:59,849 --> 00:44:06,240
kind of built into two camel SVN

00:44:02,309 --> 00:44:08,760
repository as it is today and obviously

00:44:06,240 --> 00:44:09,960
as time goes on technology changes will

00:44:08,760 --> 00:44:11,910
probably be adjusting some of these

00:44:09,960 --> 00:44:13,950
saying the camel 3 discussions are going

00:44:11,910 --> 00:44:17,430
to cause some of these things to change

00:44:13,950 --> 00:44:19,170
a little bit but that's that's pretty

00:44:17,430 --> 00:44:23,160
much there if you need more information

00:44:19,170 --> 00:44:24,809
again go to the camel website there's

00:44:23,160 --> 00:44:26,549
the components button on the right all

00:44:24,809 --> 00:44:27,779
the components are there if you have a

00:44:26,549 --> 00:44:30,930
problem there's probably a component

00:44:27,779 --> 00:44:32,220
there that will help you and then

00:44:30,930 --> 00:44:37,529
there's my contact information if you

00:44:32,220 --> 00:44:41,000
need it so any questions or comments

00:44:37,529 --> 00:44:41,000
yeah misery

00:44:43,610 --> 00:44:49,560
for the rest components yet I in both

00:44:46,050 --> 00:44:52,670
like the rest easy and risky but the the

00:44:49,560 --> 00:44:54,570
wrestle it and the cxf components

00:44:52,670 --> 00:44:56,910
explicitly foresee except because see

00:44:54,570 --> 00:45:00,000
except being jax-rs based you have a

00:44:56,910 --> 00:45:03,930
bunch of jax-rs providers and like even

00:45:00,000 --> 00:45:05,550
like jackson provides a standard jax-rs

00:45:03,930 --> 00:45:07,560
provider that you can just plug into

00:45:05,550 --> 00:45:09,990
your jax-rs implementation to do that so

00:45:07,560 --> 00:45:13,080
if your interface that you wrote there

00:45:09,990 --> 00:45:17,340
has an app produces application JSON or

00:45:13,080 --> 00:45:18,390
app consumes JSON cxf will call off to

00:45:17,340 --> 00:45:20,760
the right provider that you've had

00:45:18,390 --> 00:45:22,560
Richard now that said again it gets into

00:45:20,760 --> 00:45:23,880
some of the complexity in Plec city of

00:45:22,560 --> 00:45:26,610
cxf and then you have to figure out how

00:45:23,880 --> 00:45:28,080
to register those producers with cxf and

00:45:26,610 --> 00:45:29,870
that involves like spring config or

00:45:28,080 --> 00:45:33,660
blueprint a big or something like that

00:45:29,870 --> 00:45:34,860
but again it's with six with with both

00:45:33,660 --> 00:45:35,820
of those things they can kind of handle

00:45:34,860 --> 00:45:38,190
it depending on how you have your

00:45:35,820 --> 00:45:40,890
annotations and configuration and what's

00:45:38,190 --> 00:45:43,470
available again with like c except we

00:45:40,890 --> 00:45:46,410
have the option to use jettison or

00:45:43,470 --> 00:45:50,090
jackson or a couple of others and things

00:45:46,410 --> 00:45:54,830
like that so depends on we can configure

00:45:50,090 --> 00:45:54,830
any other questions or comments

00:45:54,850 --> 00:45:59,900
nope well thank you very much I was

00:45:58,280 --> 00:46:02,450
great just everybody stuck around to the

00:45:59,900 --> 00:46:03,920
end where this is the end of the

00:46:02,450 --> 00:46:06,440
sessions now so I'm assuming that means

00:46:03,920 --> 00:46:09,550
we have a break and then probably all of

00:46:06,440 --> 00:46:09,550

YouTube URL: https://www.youtube.com/watch?v=5JT9wvKMJc4


