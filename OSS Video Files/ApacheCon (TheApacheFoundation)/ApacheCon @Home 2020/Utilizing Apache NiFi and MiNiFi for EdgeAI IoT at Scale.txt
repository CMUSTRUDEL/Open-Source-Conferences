Title: Utilizing Apache NiFi and MiNiFi for EdgeAI IoT at Scale
Publication date: 2020-10-15
Playlist: ApacheCon @Home 2020
Description: 
	Utilizing Apache NiFi and MiNiFi for EdgeAI IoT at Scale
Timothy Spann, Sunile Manjee

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

A hands-on deep dive on using Apache NiFi + Edge Flow Manager + MiniFi Agents with Apache MXNet, OpenVino, TensorFlow Lite, and other Deep Learning Libraries on the actual edge devices including Raspberry Pi with Movidius 2, Google Coral TPU, NVidia Jetson Xavier, and NVidia Jetson Nano. We run deep learning models on the edge devices and send images, capture real-time GPS and sensor data. With our low coding IoT applications providing easy edge routing, transformation, data acquisition and alerting before we decide what data to stream real-time to our data space. These edge applications classify images and sensor readings real-time at the edge and then send Deep Learning results to Apache NiFi for transformation, parsing, enrichment, querying, filtering and merging data to various Apache data stores including Apache Kudu and Apache HBase. https://www.datainmotion.dev/2019/08/updating-machine-learning-models-at.html

Tim Spann is a Principal Field Engineer at Cloudera in the Data in Motion Team where he works with Apache NiFi, MiniFi, Kafka, Kafka Streams, Edge Flow Manager, MXNet, TensorFlow, Apache Spark, Big Data, IoT, Cloud, Machine Learning, and Deep Learning. Tim has over a decade of experience with the IoT, big data, distributed computing, streaming technologies, and Java programming. Previously, he was a senior solutions architect at AirisData and a senior field engineer at Pivotal. He blogs for DZone, where he is the Big Data Zone leader, and runs a popular meetup in Princeton on big data, IoT, deep learning, streaming, NiFi, blockchain, and Spark. Tim is a frequent speaker at conferences such as IoT Fusion, Strata, ApacheCon, Data Works Summit Berlin, DataWorks Summit Sydney, DataWorks Summit DC, DataWorks Summit Barcelona and Oracle Code NYC. He holds a BS and MS in computer science.
Sunile: As a open source first champion in the Data of Anything space, I have lead and enabled unreasonably successful data strategies for several premier fortune 100s. I simplify technical solutions through ubiquitous language for complex business challenges. Evangelism of open source adoption with a maniacal business centric solutions approach earned me the Hortonworks 2016 Technical Leadership Award. With paramount passion, I am a business enabler who has built from soup to nuts habitually secure, dynamic, scalable, distributed, versatile, and remunerative enterprise grade analytic and transactional solutions.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:24,400 --> 00:00:28,320
all right

00:00:25,199 --> 00:00:30,640
um i'm i'm the so we're going to be

00:00:28,320 --> 00:00:34,079
talking about

00:00:30,640 --> 00:00:35,680
iot and iiot and

00:00:34,079 --> 00:00:37,360
some of the technology components that

00:00:35,680 --> 00:00:40,320
support um

00:00:37,360 --> 00:00:42,719
those aspects of it we're going to go

00:00:40,320 --> 00:00:45,520
deep into the aspects of of why

00:00:42,719 --> 00:00:46,800
and and the how um and then definitely

00:00:45,520 --> 00:00:49,760
get into the what at the

00:00:46,800 --> 00:00:51,600
at the end of the presentation um and

00:00:49,760 --> 00:00:54,320
give a demo

00:00:51,600 --> 00:00:56,960
so um before we jump into it who am i uh

00:00:54,320 --> 00:01:00,320
i'm sunil manji i'm a

00:00:56,960 --> 00:01:03,600
principal solution engineer at cloudera

00:01:00,320 --> 00:01:07,200
my expertise belongs in the iot or

00:01:03,600 --> 00:01:10,240
resides in the iot or iiot space

00:01:07,200 --> 00:01:13,119
specifically in manufacturing i spent

00:01:10,240 --> 00:01:14,560
a number of years in manufacturing uh

00:01:13,119 --> 00:01:16,799
obviously telecom

00:01:14,560 --> 00:01:17,920
geospatial and been with cloudera

00:01:16,799 --> 00:01:19,680
roughly

00:01:17,920 --> 00:01:21,360
uh roughly four years tim you want to

00:01:19,680 --> 00:01:25,280
introduce yourself

00:01:21,360 --> 00:01:28,159
sure uh tim spann i'm a principal

00:01:25,280 --> 00:01:30,400
data flow field engineer for cloudera

00:01:28,159 --> 00:01:33,439
i've been at cloudera hortonworks for

00:01:30,400 --> 00:01:36,479
four or so years before that i was at

00:01:33,439 --> 00:01:39,680
pivotal i've done a lot of nifi

00:01:36,479 --> 00:01:41,280
before that i did some iot with a

00:01:39,680 --> 00:01:44,880
real-time energy startup

00:01:41,280 --> 00:01:44,880
so i get a little bit of experience

00:01:46,079 --> 00:01:49,759
all right so i want to be respectful of

00:01:49,040 --> 00:01:52,880
time here

00:01:49,759 --> 00:01:55,520
225 we'll call it the uh

00:01:52,880 --> 00:01:56,880
call it an end to for questions so what

00:01:55,520 --> 00:01:59,840
we'll do today is we'll kind of dive

00:01:56,880 --> 00:02:01,840
into iot and iot

00:01:59,840 --> 00:02:04,399
we'll talk a little bit about protocols

00:02:01,840 --> 00:02:07,680
um i think this is the

00:02:04,399 --> 00:02:10,720
uh this is some of the pitfalls of iot

00:02:07,680 --> 00:02:11,599
or io2 solutions is the protocol so

00:02:10,720 --> 00:02:14,319
we'll go

00:02:11,599 --> 00:02:15,280
fairly deep into that talk about fog and

00:02:14,319 --> 00:02:17,680
edge

00:02:15,280 --> 00:02:18,800
edge and fog computing technical

00:02:17,680 --> 00:02:20,080
architecture

00:02:18,800 --> 00:02:21,920
and then we'll kind of go through a live

00:02:20,080 --> 00:02:23,200
demonstration of manufacturing sensor

00:02:21,920 --> 00:02:26,959
data

00:02:23,200 --> 00:02:29,680
streaming through to the solution set

00:02:26,959 --> 00:02:31,680
so before we jump into it just on a pure

00:02:29,680 --> 00:02:35,560
numbers basis

00:02:31,680 --> 00:02:39,120
uh we have roughly over

00:02:35,560 --> 00:02:42,560
120 000 iot

00:02:39,120 --> 00:02:44,879
um minify agents installed

00:02:42,560 --> 00:02:46,080
um at the edge at one of our uh customer

00:02:44,879 --> 00:02:47,760
bases

00:02:46,080 --> 00:02:50,400
and why am i mentioning this is because

00:02:47,760 --> 00:02:52,319
not to not to uh

00:02:50,400 --> 00:02:53,840
you know to talk about how amazing and

00:02:52,319 --> 00:02:54,800
how difficult this was but actually to

00:02:53,840 --> 00:02:57,040
talk more about

00:02:54,800 --> 00:02:59,040
some of the challenges that we hit when

00:02:57,040 --> 00:03:00,640
we did come to this scale of 120 and

00:02:59,040 --> 00:03:03,680
this is just the tip of the iceberg

00:03:00,640 --> 00:03:05,280
we're continuing to expand and

00:03:03,680 --> 00:03:07,840
we followed a lot of thought leadership

00:03:05,280 --> 00:03:10,319
in iot and iit

00:03:07,840 --> 00:03:11,760
and i'm excusing iiot and we found that

00:03:10,319 --> 00:03:13,280
there wasn't a lot of

00:03:11,760 --> 00:03:14,480
real thought leadership in terms of some

00:03:13,280 --> 00:03:15,200
of the pitfalls and some of the

00:03:14,480 --> 00:03:16,560
challenges

00:03:15,200 --> 00:03:18,720
so you'll see that i'll be completely

00:03:16,560 --> 00:03:19,599
transparent in in where we do good and

00:03:18,720 --> 00:03:22,080
where we do not

00:03:19,599 --> 00:03:25,840
we're in as an industry uh from a

00:03:22,080 --> 00:03:25,840
technical perspective we have major gaps

00:03:25,920 --> 00:03:32,959
so what is iiot to set the table stakes

00:03:29,200 --> 00:03:35,519
i iot is is anything that um

00:03:32,959 --> 00:03:36,959
that could produce data sets right

00:03:35,519 --> 00:03:38,159
telemetry data it doesn't matter what

00:03:36,959 --> 00:03:39,360
kind of data sets you're talking about

00:03:38,159 --> 00:03:42,480
but they're very

00:03:39,360 --> 00:03:44,799
i.t focused and we

00:03:42,480 --> 00:03:46,720
as cloudera and most vendors in this

00:03:44,799 --> 00:03:48,159
space understand it

00:03:46,720 --> 00:03:50,879
fairly well right that's what our

00:03:48,159 --> 00:03:54,959
specialty is however on the other side

00:03:50,879 --> 00:03:58,879
of iot which is a subset of iot

00:03:54,959 --> 00:04:01,599
there's a significant antiquated

00:03:58,879 --> 00:04:02,480
protocols that most of us have never

00:04:01,599 --> 00:04:05,920
heard of

00:04:02,480 --> 00:04:08,319
and typically the thoughts here is

00:04:05,920 --> 00:04:09,519
why doesn't this industry just use i.t

00:04:08,319 --> 00:04:11,519
protocols

00:04:09,519 --> 00:04:13,680
and that's not going to work their

00:04:11,519 --> 00:04:15,920
protocols are highly efficient

00:04:13,680 --> 00:04:17,759
they work and they're revenue generating

00:04:15,920 --> 00:04:20,079
right tied to revenue jading

00:04:17,759 --> 00:04:23,600
generating operating systems so for that

00:04:20,079 --> 00:04:27,280
reason when we talk about iot and iot

00:04:23,600 --> 00:04:30,320
there's a cross-pollination of these two

00:04:27,280 --> 00:04:33,040
ecosystems and even though iiot

00:04:30,320 --> 00:04:34,720
is a subset of iot you really have to

00:04:33,040 --> 00:04:35,680
think about the entire comprehensive

00:04:34,720 --> 00:04:38,720
solution set

00:04:35,680 --> 00:04:41,840
to be able to take it forward when it

00:04:38,720 --> 00:04:43,680
comes to actually edge deployment

00:04:41,840 --> 00:04:45,120
what is it protocols just kind of table

00:04:43,680 --> 00:04:47,360
set on that

00:04:45,120 --> 00:04:48,320
is we've seen it if anyone's on the it

00:04:47,360 --> 00:04:51,120
space um

00:04:48,320 --> 00:04:53,280
i bet most of us can probably talk about

00:04:51,120 --> 00:04:55,040
six or seven or maybe ten

00:04:53,280 --> 00:04:56,639
some of us can probably talk about all

00:04:55,040 --> 00:04:58,800
of these protocols that we've worked out

00:04:56,639 --> 00:05:01,199
at some point in our career right

00:04:58,800 --> 00:05:03,280
totally makes sense

00:05:01,199 --> 00:05:05,360
these are the protocols that most folks

00:05:03,280 --> 00:05:07,280
do not know uh i'd be willing to bet

00:05:05,360 --> 00:05:10,240
that not many of us have seen this right

00:05:07,280 --> 00:05:10,720
most people think modbus is the popular

00:05:10,240 --> 00:05:12,639
one

00:05:10,720 --> 00:05:14,240
but the reality is modbus is just

00:05:12,639 --> 00:05:17,800
typically a iceberg

00:05:14,240 --> 00:05:20,880
right uh this is i would say one

00:05:17,800 --> 00:05:22,400
100th or one one thousandth of the

00:05:20,880 --> 00:05:24,800
number of protocols that are available

00:05:22,400 --> 00:05:26,320
in operational technology and the

00:05:24,800 --> 00:05:28,160
challenges in i.t

00:05:26,320 --> 00:05:29,440
we don't understand this language and a

00:05:28,160 --> 00:05:32,800
lot of times this language

00:05:29,440 --> 00:05:34,000
is proprietary a lot of times on the it

00:05:32,800 --> 00:05:35,840
side it's open source

00:05:34,000 --> 00:05:37,199
right so it's super easy to work with

00:05:35,840 --> 00:05:39,039
but here you're not going to get these

00:05:37,199 --> 00:05:40,720
vendors or these vendors that support

00:05:39,039 --> 00:05:42,479
these protocols to all of a sudden take

00:05:40,720 --> 00:05:44,160
their source code and make it open

00:05:42,479 --> 00:05:45,759
so how do we get over that challenge and

00:05:44,160 --> 00:05:48,080
where do we find

00:05:45,759 --> 00:05:50,560
these uh connect but this operational

00:05:48,080 --> 00:05:52,000
these protocols i was talking about

00:05:50,560 --> 00:05:53,600
generally you'll find these protocols in

00:05:52,000 --> 00:05:55,280
manufacturing

00:05:53,600 --> 00:05:56,960
but they are littered outside of

00:05:55,280 --> 00:05:58,479
manufacturing as well

00:05:56,960 --> 00:06:00,560
uh you'll find them in plants and

00:05:58,479 --> 00:06:04,000
manufacturing plants and refineries

00:06:00,560 --> 00:06:06,880
and drill sites and a lot of times

00:06:04,000 --> 00:06:09,199
you will find these protocols in areas

00:06:06,880 --> 00:06:11,680
where there's decent connectivity iot

00:06:09,199 --> 00:06:13,759
connectivity back to the mothership and

00:06:11,680 --> 00:06:16,319
what i mean by that is

00:06:13,759 --> 00:06:17,680
when you install an edgy device and try

00:06:16,319 --> 00:06:20,080
to capture data

00:06:17,680 --> 00:06:22,080
you can quite easily send it over back

00:06:20,080 --> 00:06:23,919
to the data center or to the cloud

00:06:22,080 --> 00:06:26,080
no challenge right the connectivity

00:06:23,919 --> 00:06:28,960
exists

00:06:26,080 --> 00:06:30,000
but then there's also a set of

00:06:28,960 --> 00:06:33,199
deployments

00:06:30,000 --> 00:06:35,520
that the network connectivity is very

00:06:33,199 --> 00:06:38,800
rare or very low

00:06:35,520 --> 00:06:42,080
and like trains planes automobiles right

00:06:38,800 --> 00:06:43,199
and they also create additional

00:06:42,080 --> 00:06:45,360
complexity

00:06:43,199 --> 00:06:48,240
in terms of not only connectivity for

00:06:45,360 --> 00:06:50,240
example i i work with a customer that

00:06:48,240 --> 00:06:52,560
deploys edge agents in the middle of the

00:06:50,240 --> 00:06:56,000
gulf ocean i'm located in houston texas

00:06:52,560 --> 00:06:57,680
so i work primarily in oil and gas um

00:06:56,000 --> 00:06:59,120
what we get as a connectivity in the

00:06:57,680 --> 00:07:00,160
middle of the gulf is very different

00:06:59,120 --> 00:07:02,479
than what you get

00:07:00,160 --> 00:07:03,680
in houston texas going back to baytown

00:07:02,479 --> 00:07:05,039
for example

00:07:03,680 --> 00:07:08,319
big difference right and the deployment

00:07:05,039 --> 00:07:11,199
model and how you deploy i um iot

00:07:08,319 --> 00:07:12,160
sensors uh i'm sorry edge capture agents

00:07:11,199 --> 00:07:14,080
is very different

00:07:12,160 --> 00:07:16,400
right we have to think about the entire

00:07:14,080 --> 00:07:17,919
space completely differently

00:07:16,400 --> 00:07:19,840
if there's a change that needs to happen

00:07:17,919 --> 00:07:22,080
on the agent itself it's not readily

00:07:19,840 --> 00:07:23,919
available

00:07:22,080 --> 00:07:26,160
the other piece that's complicated

00:07:23,919 --> 00:07:28,800
between the two different ecosystems

00:07:26,160 --> 00:07:30,080
is the compute that's available there's

00:07:28,800 --> 00:07:32,400
two main

00:07:30,080 --> 00:07:33,599
two main thoughts when it comes to iot

00:07:32,400 --> 00:07:36,240
edge computing

00:07:33,599 --> 00:07:37,759
and fog computing and i'll dive into

00:07:36,240 --> 00:07:40,800
this a little bit further

00:07:37,759 --> 00:07:43,520
but at a high level edge compute

00:07:40,800 --> 00:07:45,039
computing is a theory that you want to

00:07:43,520 --> 00:07:47,440
actually compute

00:07:45,039 --> 00:07:48,240
on the actual device itself the plc

00:07:47,440 --> 00:07:50,319
devices

00:07:48,240 --> 00:07:51,360
or the sensor itself i think that's very

00:07:50,319 --> 00:07:53,120
rare right

00:07:51,360 --> 00:07:55,120
but having compute on the sensor itself

00:07:53,120 --> 00:07:56,639
because sensor is a pretty dummy agent

00:07:55,120 --> 00:07:58,560
it doesn't do a lot it's supposed to do

00:07:56,639 --> 00:08:00,160
one thing and just create a reading

00:07:58,560 --> 00:08:01,680
but there's thoughts out there that you

00:08:00,160 --> 00:08:03,120
can actually put a sense out of put an

00:08:01,680 --> 00:08:05,919
agent and do the reading on the sensor

00:08:03,120 --> 00:08:08,479
itself i would say what's more

00:08:05,919 --> 00:08:10,639
um what what is a pattern that's well

00:08:08,479 --> 00:08:12,800
established is fog computing

00:08:10,639 --> 00:08:14,080
fog computing is the concept where you

00:08:12,800 --> 00:08:15,599
still have the sensors you still have

00:08:14,080 --> 00:08:18,319
the plc devices

00:08:15,599 --> 00:08:19,199
but you have a micro data center or a

00:08:18,319 --> 00:08:22,479
small box

00:08:19,199 --> 00:08:24,479
or boxes that are called edge gateways

00:08:22,479 --> 00:08:26,479
and within these edge gateways is where

00:08:24,479 --> 00:08:29,520
the compute is available

00:08:26,479 --> 00:08:31,039
and these plc devices or these sensors

00:08:29,520 --> 00:08:31,759
come and talk directly to the edge

00:08:31,039 --> 00:08:33,039
gateway

00:08:31,759 --> 00:08:34,959
right many of the manufacturing

00:08:33,039 --> 00:08:35,440
industries understand edge gateway very

00:08:34,959 --> 00:08:38,959
well

00:08:35,440 --> 00:08:38,959
and that's where you perform the compute

00:08:39,039 --> 00:08:43,120
so what about edge computing right

00:08:41,680 --> 00:08:44,320
because it seems like i'm advocating for

00:08:43,120 --> 00:08:46,399
fog

00:08:44,320 --> 00:08:47,519
not really but let me explain where the

00:08:46,399 --> 00:08:51,040
challenge is

00:08:47,519 --> 00:08:52,720
when we talk about iot and iot

00:08:51,040 --> 00:08:54,800
we hit this when we did our large-scale

00:08:52,720 --> 00:08:56,800
deployment of my first slide of 100 or a

00:08:54,800 --> 00:09:00,320
couple slides 120 000 plus

00:08:56,800 --> 00:09:01,839
deployments when someone says i want to

00:09:00,320 --> 00:09:03,600
deploy on the edge

00:09:01,839 --> 00:09:05,200
i would challenge what do you mean and

00:09:03,600 --> 00:09:06,399
where is that so i'll give you an

00:09:05,200 --> 00:09:09,839
example if you have

00:09:06,399 --> 00:09:12,959
an iwatch or samsung

00:09:09,839 --> 00:09:13,519
watch generally that's an edge device

00:09:12,959 --> 00:09:14,880
right

00:09:13,519 --> 00:09:16,560
and there's not a lot of compute

00:09:14,880 --> 00:09:18,480
available on these things

00:09:16,560 --> 00:09:21,120
same thing with ubi by the way ubi

00:09:18,480 --> 00:09:23,760
stands for usage waste insurance

00:09:21,120 --> 00:09:25,279
the plug-and-play devices that insurance

00:09:23,760 --> 00:09:26,560
companies offer they're generally dan

00:09:25,279 --> 00:09:28,480
log devices

00:09:26,560 --> 00:09:31,200
and those dan law devices plug into your

00:09:28,480 --> 00:09:32,959
car not a lot of compute available

00:09:31,200 --> 00:09:34,720
but then if there's a requirement that

00:09:32,959 --> 00:09:35,440
says i want to run compute on that on

00:09:34,720 --> 00:09:38,720
that

00:09:35,440 --> 00:09:40,480
device really so we really think about

00:09:38,720 --> 00:09:41,760
like how does the pack how how do you

00:09:40,480 --> 00:09:43,920
actually do the compute

00:09:41,760 --> 00:09:45,200
and you think about it you go oh hold on

00:09:43,920 --> 00:09:47,760
the iphone

00:09:45,200 --> 00:09:50,399
generally has a co-processor which is

00:09:47,760 --> 00:09:53,279
the the mobile phone which is the iphone

00:09:50,399 --> 00:09:55,279
what i noticed on my iphone on my iwatch

00:09:53,279 --> 00:09:57,519
is that there was very rare um

00:09:55,279 --> 00:09:58,399
very little information about my health

00:09:57,519 --> 00:10:01,120
statistics

00:09:58,399 --> 00:10:01,519
when i just had the iwatch but then when

00:10:01,120 --> 00:10:02,959
i

00:10:01,519 --> 00:10:05,360
turned it into and i connected it with

00:10:02,959 --> 00:10:07,279
my iphone i immediately got information

00:10:05,360 --> 00:10:09,680
about how my health is over a week

00:10:07,279 --> 00:10:11,200
my month it pushed me harder it actually

00:10:09,680 --> 00:10:12,480
said oh by the way your heart rate is

00:10:11,200 --> 00:10:14,000
out of spec within

00:10:12,480 --> 00:10:16,000
you know what i generally my resting

00:10:14,000 --> 00:10:18,240
heart rate is a ton of more

00:10:16,000 --> 00:10:19,839
information was available and it was not

00:10:18,240 --> 00:10:21,600
by coincidence

00:10:19,839 --> 00:10:23,440
the compute that's available on the edge

00:10:21,600 --> 00:10:25,440
simply we do not have enough

00:10:23,440 --> 00:10:27,120
so you generally have a co-processor

00:10:25,440 --> 00:10:29,279
like a phone

00:10:27,120 --> 00:10:32,480
same thing with usage-based insurance

00:10:29,279 --> 00:10:34,640
with usage great insurance devices um

00:10:32,480 --> 00:10:36,399
if you for example uh if you're an

00:10:34,640 --> 00:10:38,959
allstate i'm an allstate customer

00:10:36,399 --> 00:10:39,760
if you plug in your your device they

00:10:38,959 --> 00:10:42,240
tell you to

00:10:39,760 --> 00:10:43,440
download their app on your phone that's

00:10:42,240 --> 00:10:45,279
not coincidence

00:10:43,440 --> 00:10:47,120
there's a reason why they do that it's

00:10:45,279 --> 00:10:47,760
because that dan law device connects to

00:10:47,120 --> 00:10:49,279
your iphone

00:10:47,760 --> 00:10:51,040
it doesn't matter if you're progressive

00:10:49,279 --> 00:10:52,959
all of them require you to install an

00:10:51,040 --> 00:10:54,640
application on your iphone

00:10:52,959 --> 00:10:56,320
and what that does is essentially says

00:10:54,640 --> 00:10:57,760
when they're near each other

00:10:56,320 --> 00:10:59,760
it will ship the data from the

00:10:57,760 --> 00:11:02,079
usage-based device

00:10:59,760 --> 00:11:03,680
over to the to your mobile to your tab

00:11:02,079 --> 00:11:05,360
onto your tablet or your phone

00:11:03,680 --> 00:11:07,519
and from that device you'll do the

00:11:05,360 --> 00:11:09,839
compute and send it over back to

00:11:07,519 --> 00:11:11,200
um to the mothership where the insurance

00:11:09,839 --> 00:11:14,320
companies can analyze how you're

00:11:11,200 --> 00:11:15,279
how you're behaving but here's also the

00:11:14,320 --> 00:11:16,560
differentiation

00:11:15,279 --> 00:11:19,040
of what we have to understand at edge

00:11:16,560 --> 00:11:20,560
computing it's not enough to move data

00:11:19,040 --> 00:11:22,399
off of these devices

00:11:20,560 --> 00:11:23,680
any technical solution has to do

00:11:22,399 --> 00:11:25,200
bi-directional

00:11:23,680 --> 00:11:28,560
and any technical solution that has to

00:11:25,200 --> 00:11:30,079
do bi-directional is for example uh

00:11:28,560 --> 00:11:31,920
i cannot mention this customer's name

00:11:30,079 --> 00:11:33,360
but they they were streaming data off of

00:11:31,920 --> 00:11:36,480
the usage-based insurance

00:11:33,360 --> 00:11:39,440
onto their uh um their tablets on

00:11:36,480 --> 00:11:40,560
their phones what customers quickly

00:11:39,440 --> 00:11:42,800
realized

00:11:40,560 --> 00:11:43,760
is that their behaviors over a month

00:11:42,800 --> 00:11:46,800
would drive

00:11:43,760 --> 00:11:49,200
their end of month or their six-month

00:11:46,800 --> 00:11:50,880
period of what their uh what they need

00:11:49,200 --> 00:11:54,000
to pay the insurance companies

00:11:50,880 --> 00:11:55,600
the challenge is what if i had a bad day

00:11:54,000 --> 00:11:57,519
or a bad couple days

00:11:55,600 --> 00:11:59,360
right and i would like to know that am i

00:11:57,519 --> 00:12:01,279
influencing my rate

00:11:59,360 --> 00:12:02,880
so what we're doing now is we're able to

00:12:01,279 --> 00:12:04,320
stream data off of the usage-based

00:12:02,880 --> 00:12:07,279
insurance devices

00:12:04,320 --> 00:12:09,440
onto the onto the mobile phone and on

00:12:07,279 --> 00:12:10,959
the mobile phone itself we can detect if

00:12:09,440 --> 00:12:12,320
these behaviors are out of spec for

00:12:10,959 --> 00:12:13,200
example if you're driving for a three

00:12:12,320 --> 00:12:15,519
day period

00:12:13,200 --> 00:12:17,519
that's just buck wild we can actually

00:12:15,519 --> 00:12:19,760
inform the user that oh by the way

00:12:17,519 --> 00:12:21,120
you continue doing this you're not going

00:12:19,760 --> 00:12:23,600
to be so happy with your

00:12:21,120 --> 00:12:24,639
um with your six month premium and so

00:12:23,600 --> 00:12:26,160
you can immediately change your

00:12:24,639 --> 00:12:27,839
behaviors right it doesn't need to

00:12:26,160 --> 00:12:29,360
always go back to the mothership

00:12:27,839 --> 00:12:31,279
so you have to think through the entire

00:12:29,360 --> 00:12:32,480
life cycle of not just moving data off

00:12:31,279 --> 00:12:35,120
of the devices

00:12:32,480 --> 00:12:36,800
but how do you make this this code

00:12:35,120 --> 00:12:39,279
device or co-processor

00:12:36,800 --> 00:12:43,279
be able to ship data back to the actual

00:12:39,279 --> 00:12:43,279
device that's capturing the data set

00:12:44,399 --> 00:12:47,920
in fog it's slightly different but

00:12:47,360 --> 00:12:51,120
mimics

00:12:47,920 --> 00:12:53,440
a behavior that's that is recognizable

00:12:51,120 --> 00:12:56,000
by the the previous pattern

00:12:53,440 --> 00:12:57,200
in fog computing you generally have an

00:12:56,000 --> 00:12:58,800
edge gateway

00:12:57,200 --> 00:13:00,880
right you have your refineries you have

00:12:58,800 --> 00:13:04,160
your manufacturing plants

00:13:00,880 --> 00:13:06,639
you have your airline industry where

00:13:04,160 --> 00:13:08,160
they are shipped all of these airlines

00:13:06,639 --> 00:13:09,839
the air buses and boeings

00:13:08,160 --> 00:13:12,320
they all ship the edge gateways as a

00:13:09,839 --> 00:13:14,800
part of their fleet

00:13:12,320 --> 00:13:17,040
and inside of this edge gateway is where

00:13:14,800 --> 00:13:20,480
all the devices and instrumentations

00:13:17,040 --> 00:13:22,480
speak to the edge gateway and from there

00:13:20,480 --> 00:13:25,120
is the challenge of how do we move these

00:13:22,480 --> 00:13:26,959
data sets from the edge gateway

00:13:25,120 --> 00:13:28,800
over to the data center or to a

00:13:26,959 --> 00:13:31,200
geo-distributed data center

00:13:28,800 --> 00:13:33,600
and to be able to run the compute and

00:13:31,200 --> 00:13:37,040
that generally happens

00:13:33,600 --> 00:13:37,920
by by uh going through a aggregator the

00:13:37,040 --> 00:13:40,959
reason why you want an

00:13:37,920 --> 00:13:44,079
aggregator in this scenario is

00:13:40,959 --> 00:13:45,199
most enterprises will never allow you to

00:13:44,079 --> 00:13:47,760
go directly

00:13:45,199 --> 00:13:49,279
from the l3 or the the where your

00:13:47,760 --> 00:13:50,639
equipment is

00:13:49,279 --> 00:13:51,839
directly to the data center it doesn't

00:13:50,639 --> 00:13:53,040
matter if you're in the cloud in azure

00:13:51,839 --> 00:13:54,560
aws google

00:13:53,040 --> 00:13:56,160
or if it's an on-prem it's just not

00:13:54,560 --> 00:13:57,839
going to happen right

00:13:56,160 --> 00:13:59,360
manufacturer is very tight in the way

00:13:57,839 --> 00:14:01,120
they do the purdue model

00:13:59,360 --> 00:14:02,639
so for that reason you generally need to

00:14:01,120 --> 00:14:04,399
go through some layers

00:14:02,639 --> 00:14:06,399
and in fact you can do some filtering

00:14:04,399 --> 00:14:08,079
and do some compute and go right back

00:14:06,399 --> 00:14:09,920
to the manufacturing plants or to the

00:14:08,079 --> 00:14:10,880
aircraft and say that there's a behavior

00:14:09,920 --> 00:14:12,880
we need to detect

00:14:10,880 --> 00:14:14,320
so this geo-distributed data center is a

00:14:12,880 --> 00:14:15,120
ton of benefits not only from a security

00:14:14,320 --> 00:14:17,600
perspective

00:14:15,120 --> 00:14:20,959
but also going bi-directional and then

00:14:17,600 --> 00:14:20,959
finally back to the data center

00:14:21,519 --> 00:14:25,920
so applying the technical solution to it

00:14:24,560 --> 00:14:29,519
right what we did

00:14:25,920 --> 00:14:31,839
um in the in the 120 000 plus deployment

00:14:29,519 --> 00:14:34,000
what we did is we took minify and

00:14:31,839 --> 00:14:34,880
deployed it on the edge gateway apache

00:14:34,000 --> 00:14:36,800
minify

00:14:34,880 --> 00:14:38,560
and while apache minifies role in this

00:14:36,800 --> 00:14:39,279
technical stack is to capture the data

00:14:38,560 --> 00:14:41,279
set

00:14:39,279 --> 00:14:42,959
and send it downstream right you can do

00:14:41,279 --> 00:14:44,800
the filtering you can do compression

00:14:42,959 --> 00:14:46,880
all that greatness but then it will go

00:14:44,800 --> 00:14:50,480
to knife i which knife will be

00:14:46,880 --> 00:14:51,920
the the uh the aggregator where it

00:14:50,480 --> 00:14:53,519
accepts the data sets

00:14:51,920 --> 00:14:56,320
does more compute and then they could

00:14:53,519 --> 00:14:57,920
ship it downstream to kafka

00:14:56,320 --> 00:14:59,040
and then fling for analysis and we'll

00:14:57,920 --> 00:14:59,519
walk through what that actually looks

00:14:59,040 --> 00:15:02,079
like

00:14:59,519 --> 00:15:03,120
but here's the here's the major gap we

00:15:02,079 --> 00:15:05,440
talked about that

00:15:03,120 --> 00:15:07,360
cloudera and most vendors in this space

00:15:05,440 --> 00:15:08,800
and i would say even open source across

00:15:07,360 --> 00:15:11,760
all open source projects

00:15:08,800 --> 00:15:13,920
we do a great job of oit support but we

00:15:11,760 --> 00:15:15,279
do not do a good job of ot support it's

00:15:13,920 --> 00:15:17,120
because they're

00:15:15,279 --> 00:15:19,760
littered with proprietary protocols

00:15:17,120 --> 00:15:21,760
right so what do you have to do

00:15:19,760 --> 00:15:23,440
for example generally you'll find in in

00:15:21,760 --> 00:15:26,079
the iot industry

00:15:23,440 --> 00:15:27,920
that no one one vendor does it all right

00:15:26,079 --> 00:15:29,519
it's generally a partnership with other

00:15:27,920 --> 00:15:31,600
vendors that have

00:15:29,519 --> 00:15:33,839
knowledge and domain expertise in the ot

00:15:31,600 --> 00:15:35,759
side so for example here

00:15:33,839 --> 00:15:36,880
um litmus automation i've worked with

00:15:35,759 --> 00:15:39,279
them very closely i've been very

00:15:36,880 --> 00:15:41,440
impressed with just their agileness

00:15:39,279 --> 00:15:43,920
and what i what i find is they they

00:15:41,440 --> 00:15:45,839
support many ot protocols

00:15:43,920 --> 00:15:47,600
but they do the ot side very well right

00:15:45,839 --> 00:15:48,560
they're able to talk modbus and heart

00:15:47,600 --> 00:15:51,199
ipa

00:15:48,560 --> 00:15:52,639
and many and um pi connect they're able

00:15:51,199 --> 00:15:54,320
to do a lot of different protocols that

00:15:52,639 --> 00:15:54,880
we as a technical company don't

00:15:54,320 --> 00:15:57,120
understand

00:15:54,880 --> 00:15:59,519
and most technical vendors do not so

00:15:57,120 --> 00:16:02,000
what we do is we take care of the itself

00:15:59,519 --> 00:16:03,920
as uh software the ot software like

00:16:02,000 --> 00:16:05,600
litmus automation accepts the data and

00:16:03,920 --> 00:16:08,480
sits on the edge gateway

00:16:05,600 --> 00:16:10,079
minify sits within uh within litmus

00:16:08,480 --> 00:16:10,880
automation or software like litmus

00:16:10,079 --> 00:16:12,560
automation

00:16:10,880 --> 00:16:13,920
and says i will take care of shipping

00:16:12,560 --> 00:16:15,839
the data to kafka

00:16:13,920 --> 00:16:17,680
or to spark or to flank it doesn't

00:16:15,839 --> 00:16:18,720
matter but those are all it protocols

00:16:17,680 --> 00:16:20,720
after that

00:16:18,720 --> 00:16:22,160
so the first layer is or what you call

00:16:20,720 --> 00:16:24,320
southbound connections

00:16:22,160 --> 00:16:25,519
are all ot protocols and everything

00:16:24,320 --> 00:16:28,079
northbound is

00:16:25,519 --> 00:16:28,720
uh i.t protocols which is what we and

00:16:28,079 --> 00:16:31,680
most

00:16:28,720 --> 00:16:32,560
vendors are good at so what does the

00:16:31,680 --> 00:16:34,720
revised

00:16:32,560 --> 00:16:36,000
technical architecture look like and

00:16:34,720 --> 00:16:37,120
this is what it is right so you still

00:16:36,000 --> 00:16:38,320
have the edge gateway you used to have

00:16:37,120 --> 00:16:39,120
all the components really the only

00:16:38,320 --> 00:16:41,279
difference is

00:16:39,120 --> 00:16:42,880
we included litmus automation here and

00:16:41,279 --> 00:16:45,839
again latency automation sits

00:16:42,880 --> 00:16:46,320
on the edge gateway itself minify sits

00:16:45,839 --> 00:16:48,880
within

00:16:46,320 --> 00:16:50,959
uh litmus automation and then we can

00:16:48,880 --> 00:16:52,240
continue to do the the entire downstream

00:16:50,959 --> 00:16:54,240
bi-directional flow

00:16:52,240 --> 00:16:55,440
and we can and minify can go and talk to

00:16:54,240 --> 00:16:56,880
litmus itself

00:16:55,440 --> 00:16:59,279
if there's a behavior that we need to

00:16:56,880 --> 00:16:59,279
detect

00:17:00,160 --> 00:17:03,519
so to demo this all out what we'll show

00:17:02,880 --> 00:17:05,520
is

00:17:03,519 --> 00:17:07,520
again litmus or real data litmus

00:17:05,520 --> 00:17:09,120
automation sending data

00:17:07,520 --> 00:17:12,000
uh like i believe we're going to be

00:17:09,120 --> 00:17:14,720
showing uh temperature data

00:17:12,000 --> 00:17:16,480
and uh vibration data now i know

00:17:14,720 --> 00:17:18,319
vibration data is a

00:17:16,480 --> 00:17:21,039
hot topic for those that work in our

00:17:18,319 --> 00:17:22,559
industry many vendors say vibration data

00:17:21,039 --> 00:17:24,000
is a combination of acceleration

00:17:22,559 --> 00:17:26,400
velocity and displacement

00:17:24,000 --> 00:17:28,000
fine but there are a lot of vendors that

00:17:26,400 --> 00:17:28,640
sit out there that say look we'll do all

00:17:28,000 --> 00:17:30,160
that

00:17:28,640 --> 00:17:31,679
a correlation for you just give you a

00:17:30,160 --> 00:17:33,200
single measurement which is vibration

00:17:31,679 --> 00:17:34,640
so we're going to do that right we're

00:17:33,200 --> 00:17:36,640
going to have we're going to capture

00:17:34,640 --> 00:17:39,200
temperature data and vibration data

00:17:36,640 --> 00:17:39,919
we're going to run it through nifi and

00:17:39,200 --> 00:17:42,480
those are two

00:17:39,919 --> 00:17:43,919
distinct streams and then we're going to

00:17:42,480 --> 00:17:44,960
run that through kafka

00:17:43,919 --> 00:17:47,200
and then finally we're going to

00:17:44,960 --> 00:17:48,400
correlate that over a one minute

00:17:47,200 --> 00:17:50,160
tumbling window actually that's not

00:17:48,400 --> 00:17:52,240
accurate we're gonna we're gonna

00:17:50,160 --> 00:17:54,559
correlate that over a 10 second

00:17:52,240 --> 00:17:56,240
tumbling window to determine if there's

00:17:54,559 --> 00:17:57,039
any out of spec condition between

00:17:56,240 --> 00:17:59,600
temperature

00:17:57,039 --> 00:18:00,400
and vibration generally a real use case

00:17:59,600 --> 00:18:03,520
you have um

00:18:00,400 --> 00:18:04,559
a gamut of uh readings that you want to

00:18:03,520 --> 00:18:06,240
correlate

00:18:04,559 --> 00:18:08,080
but typically when you talk to

00:18:06,240 --> 00:18:11,440
manufacturing experts temperature

00:18:08,080 --> 00:18:12,559
vibration are the two um low hanging

00:18:11,440 --> 00:18:15,840
fruits you want to capture

00:18:12,559 --> 00:18:15,840
and you can get a ton of insights

00:18:17,440 --> 00:18:20,640
so i'm going to jump to the demo um tim

00:18:19,440 --> 00:18:22,960
do you have anything to add or can i

00:18:20,640 --> 00:18:27,039
jump right into it

00:18:22,960 --> 00:18:31,200
no let's see some demo man this is

00:18:27,039 --> 00:18:32,559
all cool so um i i do want i want to be

00:18:31,200 --> 00:18:35,039
cognizant of time so i

00:18:32,559 --> 00:18:35,679
i believe i have just a few minutes left

00:18:35,039 --> 00:18:38,240
um

00:18:35,679 --> 00:18:39,919
so this is litmus automation this is uh

00:18:38,240 --> 00:18:41,840
this is actually sitting on the edge

00:18:39,919 --> 00:18:43,440
gateway itself right and it's capturing

00:18:41,840 --> 00:18:44,960
data

00:18:43,440 --> 00:18:46,799
and what you can see here is that we

00:18:44,960 --> 00:18:49,600
have the the actual

00:18:46,799 --> 00:18:50,080
it's plugged into a device and we are

00:18:49,600 --> 00:18:52,559
pulling

00:18:50,080 --> 00:18:54,000
temperature and vibration data right and

00:18:52,559 --> 00:18:55,600
and we're not doing like minifi is not

00:18:54,000 --> 00:18:57,200
doing anything right this is the ot side

00:18:55,600 --> 00:18:58,960
they speak all these protocols

00:18:57,200 --> 00:19:00,240
but we know what we care about is we

00:18:58,960 --> 00:19:02,960
need these two data sets

00:19:00,240 --> 00:19:03,840
so how do we do that so within litmus

00:19:02,960 --> 00:19:06,160
automation

00:19:03,840 --> 00:19:09,280
and other vendors can do similar things

00:19:06,160 --> 00:19:10,960
what we can do is we can have minify

00:19:09,280 --> 00:19:12,880
running inside a litmus automation so

00:19:10,960 --> 00:19:14,400
this is a minified container

00:19:12,880 --> 00:19:16,880
and minifies containers sitting there

00:19:14,400 --> 00:19:18,320
and it's listening to port 7002

00:19:16,880 --> 00:19:19,919
now how did this all happen i'll show

00:19:18,320 --> 00:19:21,520
you this in just a moment but the

00:19:19,919 --> 00:19:25,120
important point to understand is

00:19:21,520 --> 00:19:27,360
litmus is taking data capturing data

00:19:25,120 --> 00:19:28,799
and sending it locally to the agent

00:19:27,360 --> 00:19:30,240
that's installed with it right within

00:19:28,799 --> 00:19:32,720
that container

00:19:30,240 --> 00:19:33,360
in the flow if you're curious what it

00:19:32,720 --> 00:19:35,919
looks like

00:19:33,360 --> 00:19:38,000
it's pretty simple this is loop flows

00:19:35,919 --> 00:19:40,080
and it's capturing the two the vibration

00:19:38,000 --> 00:19:41,440
data the temperature data doing this

00:19:40,080 --> 00:19:42,320
quick transformation and then it's

00:19:41,440 --> 00:19:44,160
sending it over

00:19:42,320 --> 00:19:45,520
to its local self and if i double click

00:19:44,160 --> 00:19:50,559
into it you can see

00:19:45,520 --> 00:19:50,559
um if you if you um

00:19:50,880 --> 00:19:54,400
it doesn't show it here but what this is

00:19:52,480 --> 00:19:58,160
doing is sending it to the local

00:19:54,400 --> 00:19:59,600
7002 port so how does that work

00:19:58,160 --> 00:20:01,760
because what i showed you earlier is

00:19:59,600 --> 00:20:04,880
minifi is running

00:20:01,760 --> 00:20:06,720
inside of a container but how does this

00:20:04,880 --> 00:20:09,360
container know what to do

00:20:06,720 --> 00:20:11,679
so what we did is when we launched

00:20:09,360 --> 00:20:13,840
minify

00:20:11,679 --> 00:20:15,679
we launched it with the docker just a

00:20:13,840 --> 00:20:18,960
docker standard docker command

00:20:15,679 --> 00:20:22,000
but then we created a a parameter called

00:20:18,960 --> 00:20:24,240
litmus agent and this class

00:20:22,000 --> 00:20:25,840
how this works is when when minify is

00:20:24,240 --> 00:20:27,840
launched on uh

00:20:25,840 --> 00:20:29,520
inside a container or if it's uh sitting

00:20:27,840 --> 00:20:32,159
on a windows laptop or

00:20:29,520 --> 00:20:33,120
windows server or linux machines it

00:20:32,159 --> 00:20:35,039
doesn't matter

00:20:33,120 --> 00:20:36,240
they all have a class associated with it

00:20:35,039 --> 00:20:37,280
you can call a class anything you can

00:20:36,240 --> 00:20:40,240
call it class cenial

00:20:37,280 --> 00:20:43,360
class tim but any time an agent

00:20:40,240 --> 00:20:46,799
identifies itself as a class

00:20:43,360 --> 00:20:48,640
the command and control center is

00:20:46,799 --> 00:20:50,880
where that agent shows up so you notice

00:20:48,640 --> 00:20:53,039
here that i have litmus agent as a class

00:20:50,880 --> 00:20:54,240
so any agent that identifies itself as a

00:20:53,039 --> 00:20:57,280
litmus agent

00:20:54,240 --> 00:21:00,960
will run the whatever the workflow

00:20:57,280 --> 00:21:02,559
instructions are so for example

00:21:00,960 --> 00:21:04,320
over here it's pretty simple right it's

00:21:02,559 --> 00:21:06,320
a drag and drop interface

00:21:04,320 --> 00:21:07,919
of being able to say hey i want on

00:21:06,320 --> 00:21:10,799
whatever agent that

00:21:07,919 --> 00:21:11,360
identifies itself as litmus agent i want

00:21:10,799 --> 00:21:14,880
to

00:21:11,360 --> 00:21:17,120
uh listen on local port 7002

00:21:14,880 --> 00:21:18,559
and the base path is litmus so basically

00:21:17,120 --> 00:21:21,280
whatever local path

00:21:18,559 --> 00:21:22,640
seven thousand two dash right nothing

00:21:21,280 --> 00:21:24,480
fancy here

00:21:22,640 --> 00:21:26,159
but then we do wanna send the data

00:21:24,480 --> 00:21:28,000
somewhere so this is listening but then

00:21:26,159 --> 00:21:29,600
we wanna send the data somewhere

00:21:28,000 --> 00:21:31,600
so here in this example we're actually

00:21:29,600 --> 00:21:34,080
sending it over to nifi

00:21:31,600 --> 00:21:36,080
this knife endpoint is there listening

00:21:34,080 --> 00:21:39,200
on and here's my url

00:21:36,080 --> 00:21:41,360
point 7003 and

00:21:39,200 --> 00:21:42,960
i'm using a post pretty simple there's

00:21:41,360 --> 00:21:44,080
nothing fancy going on here right

00:21:42,960 --> 00:21:47,840
we're taking the temperature and

00:21:44,080 --> 00:21:47,840
vibration data sending it over to nikon

00:21:48,080 --> 00:21:52,000
going over to nifi notify sitting out

00:21:50,559 --> 00:21:54,159
here

00:21:52,000 --> 00:21:55,039
sitting and listening to the to the

00:21:54,159 --> 00:21:57,760
temperature

00:21:55,039 --> 00:21:59,520
and vibration data and what we want to

00:21:57,760 --> 00:22:02,400
do is we want to route

00:21:59,520 --> 00:22:04,159
see it's a single port right 7002 but we

00:22:02,400 --> 00:22:06,720
want to route the data to the

00:22:04,159 --> 00:22:08,400
corresponding kafka topic we want to

00:22:06,720 --> 00:22:09,440
send it to vibration we want to send it

00:22:08,400 --> 00:22:10,960
the kafka topic

00:22:09,440 --> 00:22:13,200
so in knife we're able to do a lot of

00:22:10,960 --> 00:22:14,559
fancy things of kind of route on on the

00:22:13,200 --> 00:22:16,720
stream itself

00:22:14,559 --> 00:22:19,039
we can do a transformation we remove

00:22:16,720 --> 00:22:21,360
some text that don't make a lot of sense

00:22:19,039 --> 00:22:22,880
and then we finally persisted to capture

00:22:21,360 --> 00:22:24,480
so at this point we've gone through

00:22:22,880 --> 00:22:27,600
capturing the data set

00:22:24,480 --> 00:22:29,600
we've gone through um uh uh capturing

00:22:27,600 --> 00:22:32,159
and uh capturing on litmus

00:22:29,600 --> 00:22:33,520
sh is handing it over to minify minify

00:22:32,159 --> 00:22:35,200
then sending a nifi

00:22:33,520 --> 00:22:37,200
so now this is the this is the local

00:22:35,200 --> 00:22:39,760
aggregator if you remember the chart

00:22:37,200 --> 00:22:41,760
and now we need to ship it to kafka in

00:22:39,760 --> 00:22:43,919
kafka's here and we shipped it

00:22:41,760 --> 00:22:45,360
so inside of kafka you can see that i

00:22:43,919 --> 00:22:46,960
have two different

00:22:45,360 --> 00:22:48,720
um this is the ui and character the

00:22:46,960 --> 00:22:49,440
clutter is built for monitoring and

00:22:48,720 --> 00:22:50,799
taking a look

00:22:49,440 --> 00:22:52,320
and you can see here that i have a

00:22:50,799 --> 00:22:52,880
producer and it's producing the two

00:22:52,320 --> 00:22:55,360
different

00:22:52,880 --> 00:22:57,360
distinct partitions so you can see here

00:22:55,360 --> 00:22:59,520
that i have a vibration topic

00:22:57,360 --> 00:23:00,480
and i have a temperature topic and i can

00:22:59,520 --> 00:23:02,159
also take a look at

00:23:00,480 --> 00:23:03,679
the data that's being streamed into it

00:23:02,159 --> 00:23:05,679
real time as well

00:23:03,679 --> 00:23:07,360
so what i need to do next and here's

00:23:05,679 --> 00:23:08,640
some of the the json data that we

00:23:07,360 --> 00:23:10,880
were receiving from the actual

00:23:08,640 --> 00:23:12,240
manufacturing device all right cool so

00:23:10,880 --> 00:23:13,360
we have it we have the data we have

00:23:12,240 --> 00:23:16,400
vibration data

00:23:13,360 --> 00:23:17,200
and kafka the last step that we want to

00:23:16,400 --> 00:23:20,320
do

00:23:17,200 --> 00:23:23,679
is we want to be able to read

00:23:20,320 --> 00:23:25,440
from that stream uh those two streams

00:23:23,679 --> 00:23:27,679
so what i do here is i create some in

00:23:25,440 --> 00:23:29,440
flink sql so in flimsy i'm going to run

00:23:27,679 --> 00:23:31,840
free sql streaming

00:23:29,440 --> 00:23:33,600
and i want to read that temperature data

00:23:31,840 --> 00:23:34,960
and i want to read the vibration data i

00:23:33,600 --> 00:23:35,520
want to correlate those two streams

00:23:34,960 --> 00:23:38,559
together

00:23:35,520 --> 00:23:41,600
so here you can see here i have kafka

00:23:38,559 --> 00:23:42,880
temperature uh reading um reading from

00:23:41,600 --> 00:23:45,440
the temperature topic so i'm going to go

00:23:42,880 --> 00:23:47,520
ahead and create this table called temp

00:23:45,440 --> 00:23:48,720
and i have the same thing here called uh

00:23:47,520 --> 00:23:49,760
vibration

00:23:48,720 --> 00:23:51,440
and i'm going to go ahead and create

00:23:49,760 --> 00:23:54,080
again it's a completely different topic

00:23:51,440 --> 00:23:56,400
right so we have two different streams

00:23:54,080 --> 00:23:57,600
so we have the two tables created i

00:23:56,400 --> 00:24:00,480
finally want to

00:23:57,600 --> 00:24:02,159
correlate i'm going to go and kick off

00:24:00,480 --> 00:24:03,600
the streaming sql

00:24:02,159 --> 00:24:06,159
what i want to do now is i want to

00:24:03,600 --> 00:24:07,919
correlate the vibration data

00:24:06,159 --> 00:24:09,600
to the temperature data if i go back to

00:24:07,919 --> 00:24:11,600
the stream for uh go back to the slide

00:24:09,600 --> 00:24:12,960
for just a moment

00:24:11,600 --> 00:24:15,279
this is what we're trying to do right

00:24:12,960 --> 00:24:16,799
litmus we're generating vibration

00:24:15,279 --> 00:24:18,799
and temperature data it comes through

00:24:16,799 --> 00:24:20,960
nifa which i showed you

00:24:18,799 --> 00:24:23,279
we persisted to kafka we saw some data

00:24:20,960 --> 00:24:26,880
on kafka and then finally we want to run

00:24:23,279 --> 00:24:28,480
a in sql live stream to correlate over a

00:24:26,880 --> 00:24:29,600
10 second window not a one minute

00:24:28,480 --> 00:24:32,000
tumbling window

00:24:29,600 --> 00:24:32,799
and see that if there's any anomalies

00:24:32,000 --> 00:24:35,760
that we need to

00:24:32,799 --> 00:24:38,640
identify when it comes to vibration and

00:24:35,760 --> 00:24:41,120
temperature analysis

00:24:38,640 --> 00:24:41,840
takes just a moment to run here so here

00:24:41,120 --> 00:24:43,360
you go

00:24:41,840 --> 00:24:45,360
so you can see here that every 10

00:24:43,360 --> 00:24:46,320
seconds you can see here the the 10 and

00:24:45,360 --> 00:24:50,320
the 20

00:24:46,320 --> 00:24:52,880
i'm going to get the average temperature

00:24:50,320 --> 00:24:53,360
and the average vibration between the

00:24:52,880 --> 00:24:55,120
two

00:24:53,360 --> 00:24:56,400
and they need to fit in between a spec

00:24:55,120 --> 00:24:57,840
like every vendor

00:24:56,400 --> 00:25:00,080
that generates the manufacturing

00:24:57,840 --> 00:25:03,039
equipment the instrumentation always say

00:25:00,080 --> 00:25:04,480
that the the spec of this is under

00:25:03,039 --> 00:25:06,240
normal condition between

00:25:04,480 --> 00:25:09,200
you know 70 and 80 and temperature

00:25:06,240 --> 00:25:11,200
should be between 150 to 160.

00:25:09,200 --> 00:25:13,120
so you can continue to pulsate through

00:25:11,200 --> 00:25:14,880
this iterate through this over and over

00:25:13,120 --> 00:25:16,080
again to determine if any out-of-spec

00:25:14,880 --> 00:25:19,279
conditions

00:25:16,080 --> 00:25:22,240
i am over two minutes for questions

00:25:19,279 --> 00:25:22,880
that is it i know i speak very fast uh

00:25:22,240 --> 00:25:25,520
but

00:25:22,880 --> 00:25:27,679
again just going summarizing what we did

00:25:25,520 --> 00:25:29,600
we talked about the it protocols

00:25:27,679 --> 00:25:32,000
the ot protocols which is the general

00:25:29,600 --> 00:25:34,640
gap in the technology of iiot and

00:25:32,000 --> 00:25:36,240
iot that most do not talk about we

00:25:34,640 --> 00:25:38,240
talked about the challenges of compute

00:25:36,240 --> 00:25:39,679
and networking that's available

00:25:38,240 --> 00:25:42,240
and then we spoke about how do we

00:25:39,679 --> 00:25:45,120
actually overcome those challenges by

00:25:42,240 --> 00:25:46,880
introducing ot vendors and it vendors

00:25:45,120 --> 00:25:48,559
and then finally showing how the how

00:25:46,880 --> 00:25:50,240
you can end the loop by creating a

00:25:48,559 --> 00:25:52,960
stream through knife

00:25:50,240 --> 00:25:54,799
to kafka to flink sql thank you any

00:25:52,960 --> 00:25:56,559
questions

00:25:54,799 --> 00:25:58,240
yeah we should have about 10 minutes

00:25:56,559 --> 00:26:01,600
left i think

00:25:58,240 --> 00:26:03,679
i think we have till 3 35.

00:26:01,600 --> 00:26:05,440
i'm going to show you about link sql

00:26:03,679 --> 00:26:08,320
catalogs so you don't have to create

00:26:05,440 --> 00:26:10,799
that table manually

00:26:08,320 --> 00:26:13,120
if you connect it to schema registry

00:26:10,799 --> 00:26:14,559
it'll automatically pull in every schema

00:26:13,120 --> 00:26:17,600
you have defined

00:26:14,559 --> 00:26:19,919
matched up to those kafka topics so they

00:26:17,600 --> 00:26:22,320
just show up in the catalog

00:26:19,919 --> 00:26:23,360
and you don't have to do a create tab

00:26:22,320 --> 00:26:27,200
catalog and

00:26:23,360 --> 00:26:29,760
lose it every time you restart fling sql

00:26:27,200 --> 00:26:29,760
very nice

00:26:31,520 --> 00:26:35,600
how does minify compare to node red

00:26:37,600 --> 00:26:43,520
yeah um so node red

00:26:40,960 --> 00:26:46,080
is so one of the challenge of node red

00:26:43,520 --> 00:26:48,640
is that it has a very limited

00:26:46,080 --> 00:26:49,520
um operating system support that's

00:26:48,640 --> 00:26:53,360
number one

00:26:49,520 --> 00:26:56,880
uh number two it has very limited

00:26:53,360 --> 00:27:00,640
connectivity to the ot protocol side

00:26:56,880 --> 00:27:03,919
so again not a lot of thoughts about

00:27:00,640 --> 00:27:07,440
how node red will tackle the ot

00:27:03,919 --> 00:27:09,360
side of the house in general um

00:27:07,440 --> 00:27:10,960
i don't see no dread in the wild what i

00:27:09,360 --> 00:27:13,679
see most of the time in the wild

00:27:10,960 --> 00:27:15,120
is uh when you talk about iot i'm seeing

00:27:13,679 --> 00:27:16,640
things like uber agent and things like

00:27:15,120 --> 00:27:18,480
that that due to general capturing

00:27:16,640 --> 00:27:20,080
not really no no bread tim do you have

00:27:18,480 --> 00:27:22,320
any thoughts about that

00:27:20,080 --> 00:27:23,440
yeah i mean i've seen people use it in

00:27:22,320 --> 00:27:26,080
demos

00:27:23,440 --> 00:27:28,000
but no i haven't seen it at any

00:27:26,080 --> 00:27:31,919
companies out there

00:27:28,000 --> 00:27:34,640
it looks kind of fun but

00:27:31,919 --> 00:27:36,399
um i i like you said they probably isn't

00:27:34,640 --> 00:27:38,320
someone with a hundred thousand nodes

00:27:36,399 --> 00:27:40,799
out there

00:27:38,320 --> 00:27:42,480
yeah i mean i mean at the end of the day

00:27:40,799 --> 00:27:43,919
the customers we work with

00:27:42,480 --> 00:27:46,480
they're looking for enterprise great

00:27:43,919 --> 00:27:47,760
support right so i'm just not sure

00:27:46,480 --> 00:27:49,440
i see it in the wild there are some of

00:27:47,760 --> 00:27:50,159
the largest customers wanting to go down

00:27:49,440 --> 00:27:51,520
their route but

00:27:50,159 --> 00:27:54,399
again i don't know much about that

00:27:51,520 --> 00:27:57,039
window or that product

00:27:54,399 --> 00:27:58,799
yeah the blink sql thing was really cool

00:27:57,039 --> 00:28:01,440
i think we have to uh

00:27:58,799 --> 00:28:02,000
have you distill this demo up because

00:28:01,440 --> 00:28:05,600
there's a

00:28:02,000 --> 00:28:08,159
lot of cool features in there already

00:28:05,600 --> 00:28:09,360
and once once we web ui for this though

00:28:08,159 --> 00:28:12,799
i love your

00:28:09,360 --> 00:28:14,399
background uh behind the flink sql

00:28:12,799 --> 00:28:15,440
client i was trying to find one that

00:28:14,399 --> 00:28:17,520
worked for me

00:28:15,440 --> 00:28:21,760
i i like what you did there it makes it

00:28:17,520 --> 00:28:24,480
uh look a lot cooler than a command line

00:28:21,760 --> 00:28:25,600
it makes me less uh homicidal during the

00:28:24,480 --> 00:28:28,559
week

00:28:25,600 --> 00:28:30,080
yeah that's more because i have like uh

00:28:28,559 --> 00:28:31,919
i don't what color do i have i love like

00:28:30,080 --> 00:28:35,039
a blue screen and that's just

00:28:31,919 --> 00:28:37,039
not doing but having those catalogs

00:28:35,039 --> 00:28:38,960
those will make you a happy day you'll

00:28:37,039 --> 00:28:42,399
load your schema

00:28:38,960 --> 00:28:44,080
and it just shows up and you just

00:28:42,399 --> 00:28:46,559
you could describe the table you don't

00:28:44,080 --> 00:28:48,799
have to worry about it it matches it up

00:28:46,559 --> 00:28:50,159
so what i do is i auto load all my

00:28:48,799 --> 00:28:53,360
schemas

00:28:50,159 --> 00:28:55,360
from the rest api and then

00:28:53,360 --> 00:28:57,600
once i start pushing data to it i can go

00:28:55,360 --> 00:29:00,399
to flink sql and all my tables in there

00:28:57,600 --> 00:29:00,399
that's kind of nice

00:29:03,279 --> 00:29:06,720
i'm not able to see the question page

00:29:04,799 --> 00:29:08,559
for some reason so uh

00:29:06,720 --> 00:29:10,559
yeah i can see it it's in the chat

00:29:08,559 --> 00:29:13,200
there's not much going on

00:29:10,559 --> 00:29:14,240
there was a little discussion on uh

00:29:13,200 --> 00:29:16,960
another project

00:29:14,240 --> 00:29:18,320
plc for x which does some of the lower

00:29:16,960 --> 00:29:20,559
level stuff

00:29:18,320 --> 00:29:22,399
which uh would be cool to marry with

00:29:20,559 --> 00:29:25,840
minify

00:29:22,399 --> 00:29:28,399
for some projects again

00:29:25,840 --> 00:29:30,240
if there's a vendor that supports that

00:29:28,399 --> 00:29:33,520
and make it easier for

00:29:30,240 --> 00:29:36,640
getting that deployed uh for

00:29:33,520 --> 00:29:39,760
uh you know personal projects

00:29:36,640 --> 00:29:42,480
that seems awesome but if

00:29:39,760 --> 00:29:44,320
the our hard part is always finding

00:29:42,480 --> 00:29:46,159
someone who will give you a commercial

00:29:44,320 --> 00:29:49,600
support so i can get that

00:29:46,159 --> 00:29:52,799
installed in a car or truck or

00:29:49,600 --> 00:29:54,559
manufacturing plants i mean most of them

00:29:52,799 --> 00:29:55,679
are a little more open to open source

00:29:54,559 --> 00:29:59,039
than they were before

00:29:55,679 --> 00:30:01,200
but if there isn't some vendor

00:29:59,039 --> 00:30:02,159
and some guy to yell at that they're not

00:30:01,200 --> 00:30:04,320
happy

00:30:02,159 --> 00:30:06,159
put a jira ticket doesn't work for most

00:30:04,320 --> 00:30:08,480
of them

00:30:06,159 --> 00:30:10,000
yeah that's right i mean that's that's

00:30:08,480 --> 00:30:10,559
why that's why we looked at litmus right

00:30:10,000 --> 00:30:12,960
because

00:30:10,559 --> 00:30:14,080
we oh there's support there that's a

00:30:12,960 --> 00:30:15,760
good one

00:30:14,080 --> 00:30:18,240
he's got some vendor support there so

00:30:15,760 --> 00:30:18,240
that's cool

00:30:20,840 --> 00:30:24,240
yeah well we'll have to take a look at

00:30:23,120 --> 00:30:26,480
that

00:30:24,240 --> 00:30:28,159
always looking for supported apache

00:30:26,480 --> 00:30:31,200
projects which is very cool

00:30:28,159 --> 00:30:34,640
uh yeah we have some people doing for

00:30:31,200 --> 00:30:37,840
uh midify to collect log and click data

00:30:34,640 --> 00:30:41,039
or using nifi depends where the uh

00:30:37,840 --> 00:30:41,039
logs and events are

00:30:41,919 --> 00:30:46,080
yeah so i mean we i mean it depends

00:30:44,640 --> 00:30:48,000
click data

00:30:46,080 --> 00:30:49,760
when you talk about logs logs is you

00:30:48,000 --> 00:30:51,600
know for example

00:30:49,760 --> 00:30:53,200
building a universal pipeline right of

00:30:51,600 --> 00:30:56,320
logs uh

00:30:53,200 --> 00:30:57,600
that's really not a minifi case unless

00:30:56,320 --> 00:31:00,240
you're looking at

00:30:57,600 --> 00:31:02,159
where you if we're able to collect the

00:31:00,240 --> 00:31:04,159
click data or the log data

00:31:02,159 --> 00:31:05,200
at its origination which is generally on

00:31:04,159 --> 00:31:07,440
a linux

00:31:05,200 --> 00:31:09,360
or a windows box then minify and by the

00:31:07,440 --> 00:31:12,080
way that 120

00:31:09,360 --> 00:31:14,080
000 number i shared earlier that is a

00:31:12,080 --> 00:31:18,320
combination of

00:31:14,080 --> 00:31:22,159
windows 2008 2012

00:31:18,320 --> 00:31:25,919
2016 2019 windows 7

00:31:22,159 --> 00:31:29,600
windows 10 linux uh i think it's red hat

00:31:25,919 --> 00:31:31,120
centos uh suse and i think that's about

00:31:29,600 --> 00:31:32,320
it but

00:31:31,120 --> 00:31:33,600
generally that's where we're collecting

00:31:32,320 --> 00:31:36,799
the data and then now we're collecting

00:31:33,600 --> 00:31:36,799
it on the ot side

00:31:36,880 --> 00:31:41,120
yeah for uh some questions on some other

00:31:40,320 --> 00:31:43,120
projects

00:31:41,120 --> 00:31:47,840
i was just gonna bring up with the stuff

00:31:43,120 --> 00:31:50,880
you're doing with nine five stateless

00:31:47,840 --> 00:31:52,159
yeah so you mean like how we're using

00:31:50,880 --> 00:31:54,320
nephi stateless

00:31:52,159 --> 00:31:56,559
yeah because you have a couple of

00:31:54,320 --> 00:31:59,519
interesting use cases i've seen you

00:31:56,559 --> 00:32:00,000
mention yeah yeah so not like stateless

00:31:59,519 --> 00:32:03,120
is

00:32:00,000 --> 00:32:04,799
um is basically knifi

00:32:03,120 --> 00:32:06,320
stateless exactly what it is so what we

00:32:04,799 --> 00:32:08,559
do is we run knife

00:32:06,320 --> 00:32:09,440
stateless on open shift so one of the

00:32:08,559 --> 00:32:10,880
one of the things that

00:32:09,440 --> 00:32:12,559
we're having trouble with knife is that

00:32:10,880 --> 00:32:13,600
you know it does require a server-based

00:32:12,559 --> 00:32:16,880
architecture

00:32:13,600 --> 00:32:18,960
but when it comes to scaling uh

00:32:16,880 --> 00:32:20,880
when uh in auto scaling inflating up and

00:32:18,960 --> 00:32:22,000
down we found that openshift or

00:32:20,880 --> 00:32:24,640
kubernetes is just

00:32:22,000 --> 00:32:25,200
much more friendly in that manner but we

00:32:24,640 --> 00:32:27,679
couldn't really

00:32:25,200 --> 00:32:28,799
port that over uh knife i put that over

00:32:27,679 --> 00:32:30,799
very easily

00:32:28,799 --> 00:32:32,000
so instead what we have is knife

00:32:30,799 --> 00:32:35,039
stateless which

00:32:32,000 --> 00:32:37,360
what it does essentially um deploying a

00:32:35,039 --> 00:32:39,440
single flow which i showed earlier

00:32:37,360 --> 00:32:42,159
but what it does is it it creates the

00:32:39,440 --> 00:32:44,480
acknowledgement from when it create uh

00:32:42,159 --> 00:32:45,360
receives a transaction and it only

00:32:44,480 --> 00:32:48,000
acknowledges

00:32:45,360 --> 00:32:48,799
when it re finish the transaction when

00:32:48,000 --> 00:32:50,880
it persists

00:32:48,799 --> 00:32:52,559
the last processor so for example if

00:32:50,880 --> 00:32:54,080
you're receiving log data

00:32:52,559 --> 00:32:56,799
and they're doing a transformation of

00:32:54,080 --> 00:32:57,360
xml to json and then you go from json

00:32:56,799 --> 00:32:59,440
and you do

00:32:57,360 --> 00:33:00,559
another thing and then you go to kafka

00:32:59,440 --> 00:33:03,039
well

00:33:00,559 --> 00:33:05,039
that typically is one transaction so

00:33:03,039 --> 00:33:06,720
what we did is mapped by stateless says

00:33:05,039 --> 00:33:08,080
we're not going to hold the state

00:33:06,720 --> 00:33:09,200
individual processors

00:33:08,080 --> 00:33:10,320
we're just going to say that when we

00:33:09,200 --> 00:33:12,080
receive the data and do the

00:33:10,320 --> 00:33:13,760
transformations and persistent kafka

00:33:12,080 --> 00:33:16,320
that's a single transformation that's a

00:33:13,760 --> 00:33:18,640
single event so what we did is now

00:33:16,320 --> 00:33:20,240
um one of our customer sites we deployed

00:33:18,640 --> 00:33:22,640
knife by stateless

00:33:20,240 --> 00:33:24,240
all log data cyber security data is sent

00:33:22,640 --> 00:33:27,120
over to open shift

00:33:24,240 --> 00:33:29,440
open shift uh knife stateless is this

00:33:27,120 --> 00:33:30,720
listening to port 5001

00:33:29,440 --> 00:33:32,640
and then it does a transformation

00:33:30,720 --> 00:33:34,559
persister kafka and it can auto inflate

00:33:32,640 --> 00:33:35,840
and deflate because it's running a

00:33:34,559 --> 00:33:38,240
single event at a time

00:33:35,840 --> 00:33:40,799
right so it's true event event-based

00:33:38,240 --> 00:33:40,799
architecture

00:33:42,640 --> 00:33:46,480
yeah i mean if it is it first that's

00:33:44,320 --> 00:33:46,480
right

00:33:46,799 --> 00:33:49,840
yeah i mean we don't have we don't have

00:33:48,720 --> 00:33:53,039
a lot of the native

00:33:49,840 --> 00:33:55,440
uh ot connectors as you mentioned and we

00:33:53,039 --> 00:33:58,320
probably never will unless the community

00:33:55,440 --> 00:34:00,080
does that or we work closely with one of

00:33:58,320 --> 00:34:01,440
these other projects which

00:34:00,080 --> 00:34:03,279
we've looked at in the past

00:34:01,440 --> 00:34:04,320
unfortunately i remember talking about

00:34:03,279 --> 00:34:07,440
that at the

00:34:04,320 --> 00:34:08,800
apache con in montreal and it just it

00:34:07,440 --> 00:34:11,040
never took off but

00:34:08,800 --> 00:34:12,320
that would be a nice to see a couple of

00:34:11,040 --> 00:34:15,440
these we have so many

00:34:12,320 --> 00:34:16,560
many projects out there that i do in

00:34:15,440 --> 00:34:19,119
pieces of this

00:34:16,560 --> 00:34:20,079
maybe if someone's out there leading

00:34:19,119 --> 00:34:21,280
that and pushing those

00:34:20,079 --> 00:34:24,800
together you can make something

00:34:21,280 --> 00:34:27,520
interesting i don't know who's

00:34:24,800 --> 00:34:29,280
up for doing that that'd be pretty cool

00:34:27,520 --> 00:34:31,760
i mean for me the trouble has been

00:34:29,280 --> 00:34:32,720
we don't have a lot of open source

00:34:31,760 --> 00:34:36,240
supported

00:34:32,720 --> 00:34:38,079
ot software um and i'm more than willing

00:34:36,240 --> 00:34:39,440
to listen right and go push that but

00:34:38,079 --> 00:34:41,599
there isn't i mean

00:34:39,440 --> 00:34:43,280
um and it has not only does it have to

00:34:41,599 --> 00:34:44,480
be supported but it has to have the

00:34:43,280 --> 00:34:46,480
richness

00:34:44,480 --> 00:34:49,500
of ot protocol support there's thousands

00:34:46,480 --> 00:34:50,720
of them right i think it's very cute

00:34:49,500 --> 00:34:53,359
[Music]

00:34:50,720 --> 00:34:54,399
i have modbus support so what modbus

00:34:53,359 --> 00:34:56,240
doesn't mean anything

00:34:54,399 --> 00:34:58,480
right you have to support the thousands

00:34:56,240 --> 00:34:59,680
of protocols because you will see at a

00:34:58,480 --> 00:35:03,280
single customer site

00:34:59,680 --> 00:35:04,800
those thousand on a single plant

00:35:03,280 --> 00:35:06,560
yeah no one gets rid of anything they

00:35:04,800 --> 00:35:08,240
just add more stuff

00:35:06,560 --> 00:35:10,160
yeah so i mean i don't know these

00:35:08,240 --> 00:35:10,560
projects but i would love to dig into it

00:35:10,160 --> 00:35:12,560
but

00:35:10,560 --> 00:35:14,320
we did our research there's just the

00:35:12,560 --> 00:35:15,680
reality is it requires significant

00:35:14,320 --> 00:35:18,560
domain expertise

00:35:15,680 --> 00:35:19,680
and and years of industry expertise to

00:35:18,560 --> 00:35:23,119
actually go there and again it's

00:35:19,680 --> 00:35:23,119
littered with proprietary protocols

00:35:25,440 --> 00:35:28,880
well we're pretty close to uh end of

00:35:27,920 --> 00:35:30,960
time here

00:35:28,880 --> 00:35:33,440
i don't know if you have any uh thing

00:35:30,960 --> 00:35:36,640
you want to post anneal or any uh

00:35:33,440 --> 00:35:39,760
final uh thoughts

00:35:36,640 --> 00:35:42,560
no i you know again my my call to action

00:35:39,760 --> 00:35:43,920
i guess we kind of already brought it up

00:35:42,560 --> 00:35:44,960
i was hoping that you know with the

00:35:43,920 --> 00:35:48,160
community we can

00:35:44,960 --> 00:35:51,359
if there is some

00:35:48,160 --> 00:35:54,160
open source projects that are um

00:35:51,359 --> 00:35:54,720
facilitating the ot of the ot side we

00:35:54,160 --> 00:35:56,560
would love to

00:35:54,720 --> 00:35:58,560
hear that i would love to push that

00:35:56,560 --> 00:36:00,400
aspect of it so my call to action is if

00:35:58,560 --> 00:36:01,760
there isn't

00:36:00,400 --> 00:36:03,839
it'd be great to have something in the

00:36:01,760 --> 00:36:05,359
open source arena for that but again i i

00:36:03,839 --> 00:36:07,280
understand why there isn't

00:36:05,359 --> 00:36:10,480
and it's because of you know years and

00:36:07,280 --> 00:36:12,000
years of hundreds of years of just uh

00:36:10,480 --> 00:36:14,320
domain expertise that kind of gets

00:36:12,000 --> 00:36:16,880
buried with some of these products

00:36:14,320 --> 00:36:18,480
yeah and just not getting a license to

00:36:16,880 --> 00:36:20,800
to do these connections

00:36:18,480 --> 00:36:22,640
i mean couchback worked in utilities so

00:36:20,800 --> 00:36:25,359
he had access to it then

00:36:22,640 --> 00:36:27,680
but once you're in the open as just a

00:36:25,359 --> 00:36:28,480
regular developer working at a software

00:36:27,680 --> 00:36:32,240
company

00:36:28,480 --> 00:36:32,960
i can't get uh you know a free version

00:36:32,240 --> 00:36:35,440
of some

00:36:32,960 --> 00:36:37,200
uh industrial piece of equipment and

00:36:35,440 --> 00:36:39,760
that particular

00:36:37,200 --> 00:36:40,720
interface and that proprietary software

00:36:39,760 --> 00:36:43,440
to deal with

00:36:40,720 --> 00:36:45,599
that's where we kind of hit a wall of

00:36:43,440 --> 00:36:47,680
unless that vendor is interested in

00:36:45,599 --> 00:36:49,760
being part of the community

00:36:47,680 --> 00:36:54,000
and they put part of it out there in the

00:36:49,760 --> 00:36:56,720
open source with some kind of tester

00:36:54,000 --> 00:36:59,119
makes it really tough yeah i mean we we

00:36:56,720 --> 00:37:02,079
reached out to a couple of ot vendors

00:36:59,119 --> 00:37:03,839
um early in the year pre-covered and the

00:37:02,079 --> 00:37:04,880
entry fee to just have a talk with them

00:37:03,839 --> 00:37:07,280
was roughly

00:37:04,880 --> 00:37:08,240
100k all right 100k to have a

00:37:07,280 --> 00:37:11,599
conversation

00:37:08,240 --> 00:37:13,839
i'm just not sure that's uh

00:37:11,599 --> 00:37:16,160
i like i i i like to be on the receiving

00:37:13,839 --> 00:37:20,160
end of that conversation hundred grand

00:37:16,160 --> 00:37:20,160
oh no that won't work see ya

00:37:20,839 --> 00:37:26,640
right

00:37:23,839 --> 00:37:28,000
i hope these they uh save these chats

00:37:26,640 --> 00:37:30,560
when they uh

00:37:28,000 --> 00:37:32,000
push this stuff out there's some useful

00:37:30,560 --> 00:37:34,960
stuff in there

00:37:32,000 --> 00:37:36,240
it is you know i took a screenshot so

00:37:34,960 --> 00:37:38,400
yeah i grabbed

00:37:36,240 --> 00:37:39,680
a couple things we'll see uh we'll see

00:37:38,400 --> 00:37:42,320
how it goes but

00:37:39,680 --> 00:37:43,200
yeah we definitely keep the conversation

00:37:42,320 --> 00:37:45,200
going that'd be

00:37:43,200 --> 00:37:46,720
very interesting if we could get

00:37:45,200 --> 00:37:50,240
something even if it's

00:37:46,720 --> 00:37:54,160
for one subset of one industry

00:37:50,240 --> 00:37:55,920
if someone has access to one really uh

00:37:54,160 --> 00:37:57,359
eager vendor that's not going to charge

00:37:55,920 --> 00:37:59,440
100k

00:37:57,359 --> 00:38:01,599
so we could have even if it's one

00:37:59,440 --> 00:38:04,800
solution okay we could do

00:38:01,599 --> 00:38:05,760
this one one machine and one type of

00:38:04,800 --> 00:38:07,520
factory

00:38:05,760 --> 00:38:10,000
and we could do it fully apache the

00:38:07,520 --> 00:38:13,599
whole way that would still be cool

00:38:10,000 --> 00:38:16,400
yeah completely

00:38:13,599 --> 00:38:18,160
well i think that that's it for us but

00:38:16,400 --> 00:38:20,880
uh thanks ceniel

00:38:18,160 --> 00:38:22,960
uh this is a really good talk i know uh

00:38:20,880 --> 00:38:24,160
probably gonna do uh future iterations

00:38:22,960 --> 00:38:26,720
of this at other

00:38:24,160 --> 00:38:28,320
events and meetups and whether you like

00:38:26,720 --> 00:38:30,320
it or not

00:38:28,320 --> 00:38:31,920
yeah hey thanks for the the feedback

00:38:30,320 --> 00:38:33,520
here i caught a couple of links here so

00:38:31,920 --> 00:38:35,119
i appreciate the feedback and again

00:38:33,520 --> 00:38:36,880
i put my information out there so if you

00:38:35,119 --> 00:38:37,520
guys have any thoughts about the ot side

00:38:36,880 --> 00:38:39,040
and

00:38:37,520 --> 00:38:40,560
i'd love to hear it right and i'm not

00:38:39,040 --> 00:38:42,320
going to pretend that i'm i'm an expert

00:38:40,560 --> 00:38:43,680
in halting ot if there's

00:38:42,320 --> 00:38:45,680
there's vendors out there that are open

00:38:43,680 --> 00:38:48,720
source and open source savvy

00:38:45,680 --> 00:38:48,720
let's let's hear about it

00:38:49,200 --> 00:39:01,839
sounds good go on to the next session

00:38:55,280 --> 00:39:01,839
thanks everybody

00:39:07,680 --> 00:39:09,760

YouTube URL: https://www.youtube.com/watch?v=7hSGHzEIIns


