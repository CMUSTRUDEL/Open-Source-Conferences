Title: Apache Big-Data meets Cloud-Native and Kubernetes
Publication date: 2020-10-21
Playlist: ApacheCon @Home 2020: Big Data (Track 2)
Description: 
	Apache Big-Data meets Cloud-Native and Kubernetes
MÃ¡rton Elek

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

Apache big-data projects / the Hadoop ecosystem is widely adopted and very popular so the Kubernetes / Cloud-native tools. Surprisingly there are only a very minimal number of projects in the intersection of the two words. This presentation explains why could it be, shows the key problems to run Apache Big-Data projects (such as Hadoop, Kafka, Flink, Spark...) on Kubernetes and gives a demo of a possible solution.

Marton Elek is PMC in Apache Hadoop and Apache Ratis projects and working on the Apache Hadoop Ozone at Cloudera. Ozone is a new Hadoop sub-project which provides an S3 compatible Object Store for Hadoop on top of a new generalized binary storage layer. He is also working on the containerization of Hadoop and creating different solutions to run Apache Big Data projects in Kubernetes and other could native environments.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:24,000 --> 00:00:28,840
and we can start

00:00:26,080 --> 00:00:31,199
so thank you very much for joining

00:00:28,840 --> 00:00:34,800
usually

00:00:31,199 --> 00:00:37,600
i really like this uh it's this uh

00:00:34,800 --> 00:00:38,640
session schedule so this is the last in

00:00:37,600 --> 00:00:41,360
the in this

00:00:38,640 --> 00:00:42,960
conference which is very good for me

00:00:41,360 --> 00:00:46,320
hope for you as well

00:00:42,960 --> 00:00:48,000
and you know that's usually in and

00:00:46,320 --> 00:00:50,320
in that time the conference is almost

00:00:48,000 --> 00:00:53,199
empty everybody just

00:00:50,320 --> 00:00:54,320
usually go to the airport so thank you

00:00:53,199 --> 00:00:55,920
to join

00:00:54,320 --> 00:00:58,399
and it's almost like a verse of feather

00:00:55,920 --> 00:01:00,000
session right so feel free to ask

00:00:58,399 --> 00:01:02,879
anything if you have any

00:01:00,000 --> 00:01:03,760
any uh question i can see the chat

00:01:02,879 --> 00:01:06,400
window

00:01:03,760 --> 00:01:08,560
during the presentation so what we are

00:01:06,400 --> 00:01:10,320
talking about kubernetes and apache big

00:01:08,560 --> 00:01:12,000
data or cloud native environment and

00:01:10,320 --> 00:01:14,960
investing big data and i

00:01:12,000 --> 00:01:15,840
did multiple presentation about similar

00:01:14,960 --> 00:01:19,920
topics

00:01:15,840 --> 00:01:22,720
but this is a different

00:01:19,920 --> 00:01:23,600
a little because what i would like to

00:01:22,720 --> 00:01:26,560
talk

00:01:23,600 --> 00:01:27,439
is usability and collaboration and i

00:01:26,560 --> 00:01:30,159
know that it

00:01:27,439 --> 00:01:32,799
sounds very abstract or theoretical but

00:01:30,159 --> 00:01:36,400
i promise that i will have demo

00:01:32,799 --> 00:01:40,000
and exact code and the exact solution

00:01:36,400 --> 00:01:43,680
but i also would like to talk about uh

00:01:40,000 --> 00:01:46,720
what are important for

00:01:43,680 --> 00:01:49,280
for running apache big data projects in

00:01:46,720 --> 00:01:52,399
in kubernetes

00:01:49,280 --> 00:01:54,000
so my name is martin alek i'm a hadoop

00:01:52,399 --> 00:01:57,600
android is bmc

00:01:54,000 --> 00:02:00,079
and i'm working for cloudara

00:01:57,600 --> 00:02:02,640
and most of the time i'm working from

00:02:00,079 --> 00:02:04,560
apache hadoop ozone

00:02:02,640 --> 00:02:06,159
if you don't know what is it there was a

00:02:04,560 --> 00:02:08,000
separated session

00:02:06,159 --> 00:02:09,520
and and you can check it from the

00:02:08,000 --> 00:02:13,520
archive

00:02:09,520 --> 00:02:18,000
and api hadoop ozone is a new

00:02:13,520 --> 00:02:20,239
object store for the adobe ecosystem and

00:02:18,000 --> 00:02:21,440
it's a new one so i would like to test

00:02:20,239 --> 00:02:25,040
it everywhere

00:02:21,440 --> 00:02:26,879
with any of the other big data projects

00:02:25,040 --> 00:02:30,800
i would like to test storage and

00:02:26,879 --> 00:02:33,920
sling storage and storage and spark

00:02:30,800 --> 00:02:36,480
hive age bit everything so what i need

00:02:33,920 --> 00:02:37,440
is some environment where i can very

00:02:36,480 --> 00:02:39,360
quickly

00:02:37,440 --> 00:02:40,879
install multiple apache big data

00:02:39,360 --> 00:02:44,160
projects and

00:02:40,879 --> 00:02:46,239
for me this is kubernetes so i started a

00:02:44,160 --> 00:02:48,560
few years ago

00:02:46,239 --> 00:02:50,319
experimenting with containerized all of

00:02:48,560 --> 00:02:51,360
these applications and run in the fire

00:02:50,319 --> 00:02:53,680
and environment

00:02:51,360 --> 00:02:55,040
noma docker compose and finally i

00:02:53,680 --> 00:02:58,480
started to use

00:02:55,040 --> 00:03:01,680
uh i started to use

00:02:58,480 --> 00:03:03,519
kubernetes and because i was unhappy

00:03:01,680 --> 00:03:04,800
with the existing tools i started to

00:03:03,519 --> 00:03:06,400
create a new tool

00:03:04,800 --> 00:03:08,879
and what i would like to share is the

00:03:06,400 --> 00:03:11,200
experiences during these

00:03:08,879 --> 00:03:12,879
years that what did i do and why it's

00:03:11,200 --> 00:03:15,200
not important that what

00:03:12,879 --> 00:03:16,840
the exact tool but what i would like to

00:03:15,200 --> 00:03:18,480
share that what are the important

00:03:16,840 --> 00:03:21,599
factors

00:03:18,480 --> 00:03:23,440
so first of all this is the vision

00:03:21,599 --> 00:03:25,200
where it's not a very clear vision as i

00:03:23,440 --> 00:03:27,760
see because the

00:03:25,200 --> 00:03:29,200
the resolution it's not very good but

00:03:27,760 --> 00:03:31,599
this is apache m very

00:03:29,200 --> 00:03:33,200
so this is a cluster manager tool which

00:03:31,599 --> 00:03:35,840
was used by hortonworks before the

00:03:33,200 --> 00:03:37,840
hortonworks cloudera emerged and

00:03:35,840 --> 00:03:39,360
since the merge i think it's more and

00:03:37,840 --> 00:03:41,200
more abandoned

00:03:39,360 --> 00:03:42,799
but this is the vision what i would like

00:03:41,200 --> 00:03:44,879
to to

00:03:42,799 --> 00:03:46,480
have something similar you know it's

00:03:44,879 --> 00:03:50,319
very very simple

00:03:46,480 --> 00:03:53,439
to to run kubernetes or spark

00:03:50,319 --> 00:03:55,200
uh run kafka or spark in the kubernetes

00:03:53,439 --> 00:03:55,840
right we have operators we have help

00:03:55,200 --> 00:03:58,840
charts

00:03:55,840 --> 00:04:00,480
but what i'm interested about is running

00:03:58,840 --> 00:04:03,760
together storage

00:04:00,480 --> 00:04:05,280
streaming processing everything together

00:04:03,760 --> 00:04:07,439
that's what i'm interested

00:04:05,280 --> 00:04:09,519
so it's not so easy to run different

00:04:07,439 --> 00:04:12,799
operators and set up

00:04:09,519 --> 00:04:15,360
for example security or kerberos

00:04:12,799 --> 00:04:16,720
for all of them so that's that's our our

00:04:15,360 --> 00:04:20,320
vision

00:04:16,720 --> 00:04:23,440
so let's start first part the borders

00:04:20,320 --> 00:04:26,960
so you know that we know that we have

00:04:23,440 --> 00:04:28,320
some cloud native uh area and some

00:04:26,960 --> 00:04:30,880
apache big data

00:04:28,320 --> 00:04:32,479
but similar to the borders it's it's not

00:04:30,880 --> 00:04:35,919
very clear that

00:04:32,479 --> 00:04:38,400
what is between them and i

00:04:35,919 --> 00:04:39,199
had a lot of uh chat with different

00:04:38,400 --> 00:04:42,240
people

00:04:39,199 --> 00:04:43,840
and each of the people had different

00:04:42,240 --> 00:04:46,240
opinion about this one

00:04:43,840 --> 00:04:47,919
so this is the usual this is the most

00:04:46,240 --> 00:04:49,440
typical that we have some cloud native

00:04:47,919 --> 00:04:51,040
thingy apache big data

00:04:49,440 --> 00:04:53,040
and it's very interesting that there are

00:04:51,040 --> 00:04:55,440
only a few project which is in the

00:04:53,040 --> 00:04:57,600
intersection we have a few operators

00:04:55,440 --> 00:04:59,360
for example uni we have unicorn for

00:04:57,600 --> 00:05:00,400
example which is a scheduler for both

00:04:59,360 --> 00:05:02,800
cyan and

00:05:00,400 --> 00:05:04,240
kubernetes but we don't have a lot of

00:05:02,800 --> 00:05:06,720
projects

00:05:04,240 --> 00:05:07,840
there is another opinion that oh why do

00:05:06,720 --> 00:05:09,600
we talk

00:05:07,840 --> 00:05:10,880
about this one this is totally too

00:05:09,600 --> 00:05:13,680
different it's it's no

00:05:10,880 --> 00:05:14,400
nonsense to run hadoop in kubernetes why

00:05:13,680 --> 00:05:17,520
that's also

00:05:14,400 --> 00:05:20,880
an other class of answers

00:05:17,520 --> 00:05:24,080
my opinion is something like this so

00:05:20,880 --> 00:05:25,680
i think it's it's worse to do to

00:05:24,080 --> 00:05:27,600
run hadoop and other projects in

00:05:25,680 --> 00:05:27,919
kubernetes and that's what i would like

00:05:27,600 --> 00:05:30,000
to

00:05:27,919 --> 00:05:31,520
to share but you know that it's it's

00:05:30,000 --> 00:05:33,919
hard to decide which one

00:05:31,520 --> 00:05:34,960
which one is the truth right but how can

00:05:33,919 --> 00:05:38,000
we do it

00:05:34,960 --> 00:05:40,240
so let's check the two parts one by

00:05:38,000 --> 00:05:42,080
one and let's start with the cloud

00:05:40,240 --> 00:05:44,880
native ecosystem

00:05:42,080 --> 00:05:47,160
so this is from the from the i think

00:05:44,880 --> 00:05:50,160
it's a yearly report from

00:05:47,160 --> 00:05:53,680
2019 and it shows the

00:05:50,160 --> 00:05:56,080
extreme popularity of of kubernetes

00:05:53,680 --> 00:05:59,199
and and cncf projects it's just that i

00:05:56,080 --> 00:06:01,440
think it's a contributing

00:05:59,199 --> 00:06:03,199
companies so it's not individuals but it

00:06:01,440 --> 00:06:05,840
is the number of the companies

00:06:03,199 --> 00:06:07,280
so it's a lot and it's a very big growth

00:06:05,840 --> 00:06:08,160
and the question is that what is the

00:06:07,280 --> 00:06:10,560
secret

00:06:08,160 --> 00:06:12,080
why is it so why kubernetes is so

00:06:10,560 --> 00:06:14,880
popular

00:06:12,080 --> 00:06:16,400
and yeah it's a very tricky question

00:06:14,880 --> 00:06:19,280
right because if we would know

00:06:16,400 --> 00:06:22,319
we can just start a new startup but it's

00:06:19,280 --> 00:06:24,720
very hard to imagine actually so

00:06:22,319 --> 00:06:25,960
the kubernetes actually it's a very well

00:06:24,720 --> 00:06:28,319
designed but this is a

00:06:25,960 --> 00:06:30,479
developer-centric something right we

00:06:28,319 --> 00:06:32,000
have an api where we can just post yaml

00:06:30,479 --> 00:06:34,960
files that's what we

00:06:32,000 --> 00:06:37,280
what we what we use just try to imagine

00:06:34,960 --> 00:06:39,759
that you are pitching to a

00:06:37,280 --> 00:06:40,639
a vc that oh i think it will be very

00:06:39,759 --> 00:06:44,080
very popular

00:06:40,639 --> 00:06:47,520
i have a api server and an edcd

00:06:44,080 --> 00:06:51,120
behind it and and we can just post

00:06:47,520 --> 00:06:54,479
post any kind of flexible yaml files so

00:06:51,120 --> 00:06:57,039
what is the secret of the popularity

00:06:54,479 --> 00:06:58,880
i don't think that there is a one single

00:06:57,039 --> 00:07:01,759
answer but my answer is that

00:06:58,880 --> 00:07:03,280
the one secret is the collaboration the

00:07:01,759 --> 00:07:06,960
collaboration between

00:07:03,280 --> 00:07:10,479
the the components so for example

00:07:06,960 --> 00:07:13,360
if i annotate my spark

00:07:10,479 --> 00:07:15,199
hadoop hdfs yarn components with the

00:07:13,360 --> 00:07:18,319
right kubernetes annotation

00:07:15,199 --> 00:07:19,360
parameters just pull all of the metrics

00:07:18,319 --> 00:07:21,520
from them

00:07:19,360 --> 00:07:22,960
or i can choose from different log

00:07:21,520 --> 00:07:26,080
collection services

00:07:22,960 --> 00:07:30,240
all of them are in the cloud

00:07:26,080 --> 00:07:32,800
are somehow i just

00:07:30,240 --> 00:07:34,560
adjusted to to be compatible with with

00:07:32,800 --> 00:07:36,319
the kubernetes ecosystem

00:07:34,560 --> 00:07:37,919
so this is really the power of the

00:07:36,319 --> 00:07:39,039
collaboration i think this is a common

00:07:37,919 --> 00:07:40,960
platform

00:07:39,039 --> 00:07:43,199
if if i use the common platform there

00:07:40,960 --> 00:07:46,240
will be unlimited number of tools

00:07:43,199 --> 00:07:49,039
which way which i can use okay let's

00:07:46,240 --> 00:07:52,080
check the other side

00:07:49,039 --> 00:07:53,039
the apache big data so if i check the

00:07:52,080 --> 00:07:55,599
apache side

00:07:53,039 --> 00:07:57,360
it's also very popular right so it's

00:07:55,599 --> 00:07:58,080
actually it's very hard to imagine that

00:07:57,360 --> 00:07:59,680
if the

00:07:58,080 --> 00:08:02,319
left side is popular the right side is

00:07:59,680 --> 00:08:04,960
popular then why do we have so

00:08:02,319 --> 00:08:06,240
few projects in the intersection so

00:08:04,960 --> 00:08:08,000
these are the number of

00:08:06,240 --> 00:08:09,280
commits i think it's also from the

00:08:08,000 --> 00:08:12,720
fiscal year

00:08:09,280 --> 00:08:16,319
uh the last year yearly report

00:08:12,720 --> 00:08:19,039
this is the number of uh comments and

00:08:16,319 --> 00:08:20,160
yeah that was apache but inside of

00:08:19,039 --> 00:08:22,879
apache

00:08:20,160 --> 00:08:24,720
if we calculate the number of resolved

00:08:22,879 --> 00:08:27,919
issues real result not just

00:08:24,720 --> 00:08:30,800
close with duplicate you can see that

00:08:27,919 --> 00:08:32,000
these are the numbers of result issues

00:08:30,800 --> 00:08:36,159
per project

00:08:32,000 --> 00:08:40,000
per year and you can see that the top

00:08:36,159 --> 00:08:41,919
10 are almost

00:08:40,000 --> 00:08:43,760
big almost all of them are big data

00:08:41,919 --> 00:08:46,160
related

00:08:43,760 --> 00:08:47,760
yeah the infra is not a real project but

00:08:46,160 --> 00:08:52,240
i respect the work of

00:08:47,760 --> 00:08:54,320
the infra so i just put it i i i

00:08:52,240 --> 00:08:55,760
kept it here and maybe the camel is the

00:08:54,320 --> 00:08:58,560
only one which is not

00:08:55,760 --> 00:08:59,680
directly related to the big data so big

00:08:58,560 --> 00:09:01,920
data is very

00:08:59,680 --> 00:09:03,920
popular and we already have something

00:09:01,920 --> 00:09:06,000
like the collaboration right

00:09:03,920 --> 00:09:08,080
so we have the hadoop compatible file

00:09:06,000 --> 00:09:10,880
system even the people

00:09:08,080 --> 00:09:12,480
who who brought the hadoop is dead using

00:09:10,880 --> 00:09:13,680
the hadoop compatible file system the

00:09:12,480 --> 00:09:16,880
cloud connectors

00:09:13,680 --> 00:09:20,480
s3a or or google cloud connectors

00:09:16,880 --> 00:09:22,480
for spark flink i hbase for everything

00:09:20,480 --> 00:09:24,160
also the hadoop rpc and configuration

00:09:22,480 --> 00:09:26,560
itself are used by other

00:09:24,160 --> 00:09:27,680
other projects in the projects in the

00:09:26,560 --> 00:09:30,880
ecosystem like

00:09:27,680 --> 00:09:33,680
age base or or hive so it's there we

00:09:30,880 --> 00:09:34,399
already have some level of collaboration

00:09:33,680 --> 00:09:36,640
in the

00:09:34,399 --> 00:09:37,600
in the apache big data world but this

00:09:36,640 --> 00:09:40,640
collaboration

00:09:37,600 --> 00:09:44,320
is slightly different

00:09:40,640 --> 00:09:45,440
because what is interesting is that it's

00:09:44,320 --> 00:09:48,560
very rare

00:09:45,440 --> 00:09:49,600
that i'm when i would like to use only

00:09:48,560 --> 00:09:52,720
one project

00:09:49,600 --> 00:09:53,360
right kafka alone no no usually i have

00:09:52,720 --> 00:09:57,200
kafka

00:09:53,360 --> 00:09:58,880
which um stream the data to spark or

00:09:57,200 --> 00:10:01,680
flink or just save to

00:09:58,880 --> 00:10:02,720
hdfs or kia school or something so

00:10:01,680 --> 00:10:04,720
usually

00:10:02,720 --> 00:10:05,920
we need multiple apache projects

00:10:04,720 --> 00:10:08,399
together

00:10:05,920 --> 00:10:09,600
and this kind of collaboration it's not

00:10:08,399 --> 00:10:12,079
so obvious

00:10:09,600 --> 00:10:12,880
we have a few projects which try to

00:10:12,079 --> 00:10:16,079
address

00:10:12,880 --> 00:10:16,399
this this i call it mato project which

00:10:16,079 --> 00:10:19,920
just

00:10:16,399 --> 00:10:21,760
provides some services based on multiple

00:10:19,920 --> 00:10:24,480
apache projects so one is the apache

00:10:21,760 --> 00:10:28,000
ember which is a cluster management

00:10:24,480 --> 00:10:30,880
but after the hortonworks clutter emerge

00:10:28,000 --> 00:10:32,640
clauder decided to use cloudera manager

00:10:30,880 --> 00:10:34,560
instead of ambery

00:10:32,640 --> 00:10:35,839
which is closed source apache viktor

00:10:34,560 --> 00:10:38,640
plays another

00:10:35,839 --> 00:10:39,839
meta project which provides testing and

00:10:38,640 --> 00:10:42,560
packaging for

00:10:39,839 --> 00:10:44,480
for multiple big data projects but it's

00:10:42,560 --> 00:10:46,720
not very typical to have

00:10:44,480 --> 00:10:48,240
to solve this problem to to provide

00:10:46,720 --> 00:10:50,640
something as a stack

00:10:48,240 --> 00:10:51,839
as an ecosystem so this kind of

00:10:50,640 --> 00:10:54,320
collaboration

00:10:51,839 --> 00:10:55,200
seems to be it's not missing but it's

00:10:54,320 --> 00:10:58,000
not

00:10:55,200 --> 00:11:00,480
not so typical and my question is why

00:10:58,000 --> 00:11:03,120
why it's not so typical

00:11:00,480 --> 00:11:03,680
again it's hard to answer right but i

00:11:03,120 --> 00:11:07,200
have an

00:11:03,680 --> 00:11:08,800
answer and i think the answer is our

00:11:07,200 --> 00:11:12,000
other friend the usability

00:11:08,800 --> 00:11:14,160
because it's hard understanding hadoop

00:11:12,000 --> 00:11:16,880
is hard all of the configuration hard

00:11:14,160 --> 00:11:17,839
but we can learn that how it should be

00:11:16,880 --> 00:11:20,160
installed

00:11:17,839 --> 00:11:21,600
but for the stack itself you need to

00:11:20,160 --> 00:11:24,880
understand

00:11:21,600 --> 00:11:27,360
hdfs or ozone or spark fling

00:11:24,880 --> 00:11:29,200
hbase hype together a lot of different

00:11:27,360 --> 00:11:32,320
components different logic

00:11:29,200 --> 00:11:34,880
so it's hard to provide something

00:11:32,320 --> 00:11:35,760
which can help to install apache big

00:11:34,880 --> 00:11:38,720
data projects

00:11:35,760 --> 00:11:40,399
as a stack because the complexity

00:11:38,720 --> 00:11:40,800
because it's hard to provide something

00:11:40,399 --> 00:11:43,440
which

00:11:40,800 --> 00:11:45,440
which is usable enough and my

00:11:43,440 --> 00:11:48,079
preconception is that maybe

00:11:45,440 --> 00:11:49,279
the kubernetes is a platform can provide

00:11:48,079 --> 00:11:51,760
something

00:11:49,279 --> 00:11:54,320
which can which can help us to achieve

00:11:51,760 --> 00:11:56,160
better usability

00:11:54,320 --> 00:11:57,440
and better usability can help us to

00:11:56,160 --> 00:12:01,360
provide something

00:11:57,440 --> 00:12:04,399
and to in to install this together

00:12:01,360 --> 00:12:05,760
so that was the theoretical part so

00:12:04,399 --> 00:12:10,639
let's check some

00:12:05,760 --> 00:12:11,360
code thingy second part when i started

00:12:10,639 --> 00:12:15,760
to

00:12:11,360 --> 00:12:19,120
do this uh experiment a few years ago

00:12:15,760 --> 00:12:19,920
i started first i started to use ham

00:12:19,120 --> 00:12:22,959
charts

00:12:19,920 --> 00:12:26,880
but helm is not it is kubernetes package

00:12:22,959 --> 00:12:30,639
manager but it's uh invented to

00:12:26,880 --> 00:12:32,160
to install one stack it's harder to

00:12:30,639 --> 00:12:35,120
achieve something

00:12:32,160 --> 00:12:36,079
where i have to manage multiple

00:12:35,120 --> 00:12:37,760
components

00:12:36,079 --> 00:12:40,720
like i would like to set that okay i

00:12:37,760 --> 00:12:41,760
need secure from everything as security

00:12:40,720 --> 00:12:44,160
affects a security arm

00:12:41,760 --> 00:12:45,040
suck your secure spark secure everything

00:12:44,160 --> 00:12:47,120
so ham

00:12:45,040 --> 00:12:48,639
this this recoil version is not very

00:12:47,120 --> 00:12:50,000
well supported

00:12:48,639 --> 00:12:52,639
after that i started to use the

00:12:50,000 --> 00:12:53,040
customize this is not template-based as

00:12:52,639 --> 00:12:56,240
ham

00:12:53,040 --> 00:12:58,959
but more like transformation based

00:12:56,240 --> 00:13:00,720
and earlier i started to create some

00:12:58,959 --> 00:13:01,839
transformation preprocessor for

00:13:00,720 --> 00:13:03,120
customize

00:13:01,839 --> 00:13:05,200
but the problem was that the

00:13:03,120 --> 00:13:08,320
transformation was not reusable

00:13:05,200 --> 00:13:11,760
what does it mean i will see in a minute

00:13:08,320 --> 00:13:13,839
and so this preprocessor is just evolved

00:13:11,760 --> 00:13:17,600
to a separated2

00:13:13,839 --> 00:13:19,279
and it's called flexible

00:13:17,600 --> 00:13:21,360
because it's just a very flexible way to

00:13:19,279 --> 00:13:23,760
manage all of the kubernetes bars

00:13:21,360 --> 00:13:24,720
so kubernetes is nothing more just a

00:13:23,760 --> 00:13:26,720
yaml game

00:13:24,720 --> 00:13:28,320
right i need a lot of yaml files that's

00:13:26,720 --> 00:13:29,040
all what i need and after that i can

00:13:28,320 --> 00:13:30,959
just

00:13:29,040 --> 00:13:33,200
push it to the kubernetes api and i'm

00:13:30,959 --> 00:13:35,920
done the question is that how can i

00:13:33,200 --> 00:13:36,720
create the right yaml files handshard

00:13:35,920 --> 00:13:39,680
just ring the

00:13:36,720 --> 00:13:41,040
renders your mo files and customize also

00:13:39,680 --> 00:13:43,040
creates yaml files

00:13:41,040 --> 00:13:44,240
so this is what i try to do and i'm

00:13:43,040 --> 00:13:47,519
trying to show

00:13:44,240 --> 00:13:50,560
how does it work uh okay

00:13:47,519 --> 00:13:53,839
let's create a project

00:13:50,560 --> 00:13:55,920
and this is my tool this is flexible

00:13:53,839 --> 00:13:56,880
but again it's not a it's not the tool

00:13:55,920 --> 00:13:58,320
which is important

00:13:56,880 --> 00:14:00,880
but i would like to show it that what

00:13:58,320 --> 00:14:03,360
kind of function in his functionalities

00:14:00,880 --> 00:14:04,639
are missing to provide some very good

00:14:03,360 --> 00:14:07,519
usability

00:14:04,639 --> 00:14:07,920
so first of all i would like to have

00:14:07,519 --> 00:14:10,320
some

00:14:07,920 --> 00:14:12,639
sources and search so this is nothing

00:14:10,320 --> 00:14:14,160
more just a

00:14:12,639 --> 00:14:15,760
github search and all of the

00:14:14,160 --> 00:14:17,360
repositories which are tagged with

00:14:15,760 --> 00:14:20,480
flexible are here

00:14:17,360 --> 00:14:24,240
so i need flexible

00:14:20,480 --> 00:14:27,760
source add i need a head

00:14:24,240 --> 00:14:32,720
and obviously i need ozone

00:14:27,760 --> 00:14:35,600
so let me add the ocean as well so

00:14:32,720 --> 00:14:37,199
let me check what kind of apps are here

00:14:35,600 --> 00:14:40,800
so the two repositories

00:14:37,199 --> 00:14:44,399
are cloned to a cache directory

00:14:40,800 --> 00:14:49,120
hopefully it's fast enough

00:14:44,399 --> 00:14:51,040
and we will see the available

00:14:49,120 --> 00:14:52,959
projects or applications which are

00:14:51,040 --> 00:14:56,240
somehow defined we will see

00:14:52,959 --> 00:14:59,920
it later so i can use hdfs yarn ozone

00:14:56,240 --> 00:15:04,079
oh it sounds good so let me

00:14:59,920 --> 00:15:08,399
add let's add add

00:15:04,079 --> 00:15:12,800
let's try to add yarn and hdfs

00:15:08,399 --> 00:15:15,839
and i do a flexible generate

00:15:12,800 --> 00:15:17,120
and what i have a lot of your mofi so

00:15:15,839 --> 00:15:19,440
these are

00:15:17,120 --> 00:15:20,560
pure kubernetes html files i can just

00:15:19,440 --> 00:15:24,079
deploy it with

00:15:20,560 --> 00:15:27,519
control apply and i will have a

00:15:24,079 --> 00:15:30,639
hdfs and and uh ion cluster oh

00:15:27,519 --> 00:15:31,759
i added hdfs not ozone oh my plan was

00:15:30,639 --> 00:15:33,759
just to add those on

00:15:31,759 --> 00:15:36,079
okay i can show that this is the this is

00:15:33,759 --> 00:15:39,040
the descriptor

00:15:36,079 --> 00:15:41,199
very easy so i can just fix to have

00:15:39,040 --> 00:15:46,000
ozone which is an object store

00:15:41,199 --> 00:15:50,560
instead of the hdfs okay and i can just

00:15:46,000 --> 00:15:50,560
regenerate okay let me

00:15:51,680 --> 00:15:55,600
generate and i will have ozone and i can

00:15:54,720 --> 00:15:58,560
deploy it

00:15:55,600 --> 00:16:00,000
and i will have the interesting part is

00:15:58,560 --> 00:16:03,680
the transformations

00:16:00,000 --> 00:16:03,680
so let me check the tree

00:16:04,639 --> 00:16:09,519
what we can hear is that when i imported

00:16:07,199 --> 00:16:12,639
ozone from this repository

00:16:09,519 --> 00:16:14,320
i got a few kubernetes resources and

00:16:12,639 --> 00:16:16,880
they are somehow

00:16:14,320 --> 00:16:18,880
transformed but the interesting part is

00:16:16,880 --> 00:16:22,079
the definitions so these are

00:16:18,880 --> 00:16:25,839
reusable transformation so for example

00:16:22,079 --> 00:16:25,839
okay let me first

00:16:27,600 --> 00:16:33,920
omit i need a

00:16:31,759 --> 00:16:35,440
bit ignore file because in the cache i

00:16:33,920 --> 00:16:37,839
have all of the sources

00:16:35,440 --> 00:16:40,480
so i would like to commit the current

00:16:37,839 --> 00:16:42,880
state just to make it easier to compare

00:16:40,480 --> 00:16:43,680
different transformations so initial

00:16:42,880 --> 00:16:47,120
version and

00:16:43,680 --> 00:16:50,639
it's committed okay

00:16:47,120 --> 00:16:54,880
so i can

00:16:50,639 --> 00:16:56,959
back to the flexibility

00:16:54,880 --> 00:16:58,639
so i have a reasonable transformation

00:16:56,959 --> 00:17:01,839
for example this is a

00:16:58,639 --> 00:17:02,880
ozone mem disk let's me check what is

00:17:01,839 --> 00:17:06,160
this

00:17:02,880 --> 00:17:09,360
flexible for info

00:17:06,160 --> 00:17:09,360
ozone memdisk

00:17:09,839 --> 00:17:14,000
okay so i have some license use memdisk

00:17:12,240 --> 00:17:16,000
for empty directories

00:17:14,000 --> 00:17:17,600
so the ozone user usually i wouldn't

00:17:16,000 --> 00:17:18,880
like to use memphis right because it's

00:17:17,600 --> 00:17:21,760
it's ephemeral

00:17:18,880 --> 00:17:22,480
but it can be used used for testing for

00:17:21,760 --> 00:17:24,160
example

00:17:22,480 --> 00:17:26,319
and you can see that this is you don't

00:17:24,160 --> 00:17:27,039
need to understand but this is something

00:17:26,319 --> 00:17:29,360
which is a path

00:17:27,039 --> 00:17:30,400
in the kubernetes cml files and this is

00:17:29,360 --> 00:17:33,039
which will be

00:17:30,400 --> 00:17:35,039
added right the memory will be added so

00:17:33,039 --> 00:17:38,400
let me try to edit

00:17:35,039 --> 00:17:41,039
i'm editing the the

00:17:38,400 --> 00:17:42,679
resource file and i will say that okay i

00:17:41,039 --> 00:17:46,000
need a transformation

00:17:42,679 --> 00:17:49,679
transformations and i was on slash

00:17:46,000 --> 00:17:51,039
memdisk right i just activate it for the

00:17:49,679 --> 00:17:54,559
ozone resources

00:17:51,039 --> 00:17:58,240
this pre-defined transformation

00:17:54,559 --> 00:18:00,400
and do a generate and do maybe diff

00:17:58,240 --> 00:18:02,640
and you can see that all the stateful

00:18:00,400 --> 00:18:04,799
set itself somehow modified

00:18:02,640 --> 00:18:05,919
i don't need to understand that what

00:18:04,799 --> 00:18:09,440
should i

00:18:05,919 --> 00:18:11,600
use to use memory disk but it will be

00:18:09,440 --> 00:18:13,360
somehow just added i can choose from

00:18:11,600 --> 00:18:17,039
existing transformation

00:18:13,360 --> 00:18:21,200
okay i can omit this one

00:18:17,039 --> 00:18:23,760
and let me share another example

00:18:21,200 --> 00:18:24,960
because the interesting part is the

00:18:23,760 --> 00:18:27,360
collaboration right

00:18:24,960 --> 00:18:28,080
so let me add an other type of

00:18:27,360 --> 00:18:31,280
transformation

00:18:28,080 --> 00:18:33,200
here for example ozone ozone fs so ozone

00:18:31,280 --> 00:18:33,919
phi system is a hydrocompatible file

00:18:33,200 --> 00:18:36,400
system

00:18:33,919 --> 00:18:37,600
so i would like to use that from hr from

00:18:36,400 --> 00:18:40,240
from yarn

00:18:37,600 --> 00:18:42,480
which means that i need some jar files

00:18:40,240 --> 00:18:44,960
in the yarn containers and i have to set

00:18:42,480 --> 00:18:46,799
the hadoop crossbars

00:18:44,960 --> 00:18:48,640
but i have a reasonable transformation

00:18:46,799 --> 00:18:52,960
the ozone file system

00:18:48,640 --> 00:18:52,960
and i can just regenerate

00:18:54,400 --> 00:18:57,840
flexible generate

00:18:58,559 --> 00:19:05,039
oh and you can see that all of the

00:19:01,840 --> 00:19:06,559
files the yarn files are modified

00:19:05,039 --> 00:19:09,679
the hadoop crossplus environment

00:19:06,559 --> 00:19:09,679
variable has been set

00:19:09,760 --> 00:19:16,480
we have a new mount

00:19:13,039 --> 00:19:18,400
which is an empty deer here is the

00:19:16,480 --> 00:19:20,400
definition so this is an empty deer

00:19:18,400 --> 00:19:22,240
and this is shared between the yarn and

00:19:20,400 --> 00:19:24,240
a new init container

00:19:22,240 --> 00:19:26,559
and the init container and just copy the

00:19:24,240 --> 00:19:29,919
jar files so there is a new play

00:19:26,559 --> 00:19:32,480
new place where the jar file is copied

00:19:29,919 --> 00:19:33,679
and it's usable from the yarn and i can

00:19:32,480 --> 00:19:35,200
just use it

00:19:33,679 --> 00:19:36,720
so without creating new docker

00:19:35,200 --> 00:19:39,039
containers or anything

00:19:36,720 --> 00:19:40,160
just with reusing a transformation which

00:19:39,039 --> 00:19:42,559
is provided by

00:19:40,160 --> 00:19:43,760
by the developers of the this stock

00:19:42,559 --> 00:19:46,000
roson project

00:19:43,760 --> 00:19:46,880
i can just pick one that okay this is

00:19:46,000 --> 00:19:49,520
what i need

00:19:46,880 --> 00:19:51,039
and i got it so this is what uh this is

00:19:49,520 --> 00:19:54,400
the hard part i think

00:19:51,039 --> 00:19:57,360
this is the collaboration right

00:19:54,400 --> 00:19:58,640
this is this is what i didn't find in

00:19:57,360 --> 00:20:00,799
any other project

00:19:58,640 --> 00:20:02,720
so the ozone files the ozone somehow

00:20:00,799 --> 00:20:07,280
started to collaborate with the yarn

00:20:02,720 --> 00:20:08,640
without understanding so i i didn't need

00:20:07,280 --> 00:20:11,840
to understand all of the

00:20:08,640 --> 00:20:12,880
all of the details so that's the

00:20:11,840 --> 00:20:13,919
flexible tool

00:20:12,880 --> 00:20:16,320
there is a document if you are

00:20:13,919 --> 00:20:19,840
interested you can check on the github

00:20:16,320 --> 00:20:21,840
i used it a lot of times to test those

00:20:19,840 --> 00:20:25,120
on to deploy different type of

00:20:21,840 --> 00:20:28,720
telogen hdfs ozone

00:20:25,120 --> 00:20:29,679
flink tool but still we are not at the

00:20:28,720 --> 00:20:32,559
end

00:20:29,679 --> 00:20:34,000
oh thanks yeah i really like it i so

00:20:32,559 --> 00:20:37,440
lets me back to this

00:20:34,000 --> 00:20:40,080
one so demo is

00:20:37,440 --> 00:20:42,799
okay after that i started to create

00:20:40,080 --> 00:20:43,440
another project this locker github is

00:20:42,799 --> 00:20:45,840
nothing

00:20:43,440 --> 00:20:48,159
nothing more just the docker images for

00:20:45,840 --> 00:20:51,360
all of the hadoop and everything

00:20:48,159 --> 00:20:54,640
and and reusable these transformations

00:20:51,360 --> 00:20:56,240
are added not for i have a lot of

00:20:54,640 --> 00:20:58,320
projects not all the possible

00:20:56,240 --> 00:21:01,200
transformations but uh

00:20:58,320 --> 00:21:02,720
a lot of transformation i think i can

00:21:01,200 --> 00:21:06,480
even flop

00:21:02,720 --> 00:21:08,240
focus yes i can just yeah this one

00:21:06,480 --> 00:21:10,240
so i started to use it one and you can

00:21:08,240 --> 00:21:12,640
see that i have a lot of uh

00:21:10,240 --> 00:21:15,120
version and this is basically what i did

00:21:12,640 --> 00:21:19,039
i you can just add an

00:21:15,120 --> 00:21:21,440
existing components but i think

00:21:19,039 --> 00:21:23,039
the i it's a solution for the

00:21:21,440 --> 00:21:24,720
collaboration right that the yarn and

00:21:23,039 --> 00:21:25,760
the ozone file system collaborated but

00:21:24,720 --> 00:21:28,799
it's still not

00:21:25,760 --> 00:21:32,080
very usable i need the knowledge

00:21:28,799 --> 00:21:33,919
that how can what should i

00:21:32,080 --> 00:21:35,840
what transformation should be activated

00:21:33,919 --> 00:21:37,919
in yarn to use on one file system

00:21:35,840 --> 00:21:38,880
that's what i know right i just selected

00:21:37,919 --> 00:21:41,600
the right one

00:21:38,880 --> 00:21:45,200
so still it's not it's not the same

00:21:41,600 --> 00:21:49,360
usability as a cluster manager with ur

00:21:45,200 --> 00:21:52,240
and before we go to there we are just uh

00:21:49,360 --> 00:21:52,880
okay let's let's talk about uh again

00:21:52,240 --> 00:21:54,559
something

00:21:52,880 --> 00:21:57,280
okay this is not the vertical but this

00:21:54,559 --> 00:22:00,559
is a car so this is my very first car

00:21:57,280 --> 00:22:00,960
this is a ladder actually i think it's

00:22:00,559 --> 00:22:04,159
it

00:22:00,960 --> 00:22:07,440
uh it was one of the most popular

00:22:04,159 --> 00:22:09,840
uh car type in the

00:22:07,440 --> 00:22:12,320
eastern eastern europe eastern block and

00:22:09,840 --> 00:22:15,600
and russia i'm from eastern europe

00:22:12,320 --> 00:22:18,720
and i got it from from my parents

00:22:15,600 --> 00:22:20,720
for free actually and even my parents

00:22:18,720 --> 00:22:22,640
got it for free and it was very popular

00:22:20,720 --> 00:22:25,600
because you know that that

00:22:22,640 --> 00:22:27,440
um car from today or a tesla it's very

00:22:25,600 --> 00:22:28,400
hard to understand what's going on under

00:22:27,440 --> 00:22:30,640
the hood

00:22:28,400 --> 00:22:31,919
here there was no secret you can just

00:22:30,640 --> 00:22:34,240
open it and this is

00:22:31,919 --> 00:22:36,240
a good old car you can do whatever you

00:22:34,240 --> 00:22:36,640
want or whatever you would like to do

00:22:36,240 --> 00:22:39,600
just

00:22:36,640 --> 00:22:40,960
fix it very easily cheap assembly parts

00:22:39,600 --> 00:22:42,480
only problem is that you

00:22:40,960 --> 00:22:44,400
need to understand more or less the

00:22:42,480 --> 00:22:47,520
basics of the cars unfortunately i

00:22:44,400 --> 00:22:47,520
didn't understand that

00:22:47,760 --> 00:22:52,159
i think it was 20 years old so it was

00:22:50,559 --> 00:22:55,600
very typical that it

00:22:52,159 --> 00:22:57,440
that during the trip it just

00:22:55,600 --> 00:22:59,440
yeah the most important part was a phone

00:22:57,440 --> 00:23:01,520
inside inside the car

00:22:59,440 --> 00:23:03,120
to get some help that how can i fix it

00:23:01,520 --> 00:23:05,120
because something is wrong broken

00:23:03,120 --> 00:23:07,360
some wheel was broken even i didn't know

00:23:05,120 --> 00:23:09,760
that what are the names of the

00:23:07,360 --> 00:23:10,400
of the parts so this is this is

00:23:09,760 --> 00:23:13,039
something like

00:23:10,400 --> 00:23:14,400
the hadoop if you understand the hadoop

00:23:13,039 --> 00:23:17,840
you can do whatever you want

00:23:14,400 --> 00:23:20,080
right you can tuning and it can

00:23:17,840 --> 00:23:21,200
handle any number of files okay almost

00:23:20,080 --> 00:23:23,039
any number so

00:23:21,200 --> 00:23:24,320
it's very powerful but you need to

00:23:23,039 --> 00:23:25,440
understand what's going on and

00:23:24,320 --> 00:23:28,480
unfortunately

00:23:25,440 --> 00:23:30,720
i didn't understand fully but

00:23:28,480 --> 00:23:32,080
i have another story about this one so

00:23:30,720 --> 00:23:36,240
this is another

00:23:32,080 --> 00:23:37,039
one this is a washing machine so i

00:23:36,240 --> 00:23:39,679
worked in

00:23:37,039 --> 00:23:41,039
switzerland and that time my wife bought

00:23:39,679 --> 00:23:44,000
it for i think for

00:23:41,039 --> 00:23:45,520
five five bucks so it's five seats swiss

00:23:44,000 --> 00:23:48,640
francs which is uh

00:23:45,520 --> 00:23:52,240
five dollars or something like this and

00:23:48,640 --> 00:23:54,559
in switzerland it's very common that the

00:23:52,240 --> 00:23:56,799
washing machine and dryer is shared

00:23:54,559 --> 00:24:01,120
between between multiple flats

00:23:56,799 --> 00:24:03,919
in a in a common room and

00:24:01,120 --> 00:24:05,120
one woman just moved from a flat where

00:24:03,919 --> 00:24:07,120
it was not shared

00:24:05,120 --> 00:24:08,400
to another one where it was shared so it

00:24:07,120 --> 00:24:11,039
was

00:24:08,400 --> 00:24:12,080
it was not required anymore and it was

00:24:11,039 --> 00:24:15,520
almost free

00:24:12,080 --> 00:24:16,799
so i went to home with this washing

00:24:15,520 --> 00:24:19,200
machine and at home

00:24:16,799 --> 00:24:20,720
i just checked that what is it and i

00:24:19,200 --> 00:24:22,960
checked the serial number

00:24:20,720 --> 00:24:24,400
and i found that even if it was in

00:24:22,960 --> 00:24:27,679
switzerland

00:24:24,400 --> 00:24:31,279
it was an australian not austrian

00:24:27,679 --> 00:24:33,760
australian model and i just got oh

00:24:31,279 --> 00:24:34,559
oh it seems to be cheap but if something

00:24:33,760 --> 00:24:36,559
is broken

00:24:34,559 --> 00:24:37,840
i have to call a repairman from

00:24:36,559 --> 00:24:40,799
australia

00:24:37,840 --> 00:24:42,799
i have to pay for uh for a airplane

00:24:40,799 --> 00:24:43,919
ticket or i don't know how can i fix it

00:24:42,799 --> 00:24:46,400
actually

00:24:43,919 --> 00:24:48,159
so i checked the homepage of the vendor

00:24:46,400 --> 00:24:52,080
and this is what i found

00:24:48,159 --> 00:24:54,159
a very detailed manual that

00:24:52,080 --> 00:24:55,600
or actually this is the this is the

00:24:54,159 --> 00:24:58,159
collection of the

00:24:55,600 --> 00:24:59,120
of the spare parts i can order any of

00:24:58,159 --> 00:25:00,880
these

00:24:59,120 --> 00:25:02,720
and this is way better than my car right

00:25:00,880 --> 00:25:04,320
i don't need to understand what's going

00:25:02,720 --> 00:25:06,559
on if something is broken

00:25:04,320 --> 00:25:08,080
i can just order a new one and i can try

00:25:06,559 --> 00:25:09,840
to to replace it

00:25:08,080 --> 00:25:12,240
i can replace the motor i can replace

00:25:09,840 --> 00:25:14,640
the door i can replace everything

00:25:12,240 --> 00:25:15,600
and i don't need a full understanding

00:25:14,640 --> 00:25:18,400
what's going on

00:25:15,600 --> 00:25:20,400
i can just say something is is black or

00:25:18,400 --> 00:25:24,080
broken i can just replace it

00:25:20,400 --> 00:25:27,279
which is way better for me because

00:25:24,080 --> 00:25:28,640
it it will work so it was finally it

00:25:27,279 --> 00:25:31,679
seems to be a

00:25:28,640 --> 00:25:35,279
a good deal and actually it's

00:25:31,679 --> 00:25:37,840
uh it's working very well since that

00:25:35,279 --> 00:25:39,279
and when we are talking about the the

00:25:37,840 --> 00:25:42,400
configuration or

00:25:39,279 --> 00:25:44,960
customization level it's very clear that

00:25:42,400 --> 00:25:45,919
we always need something where we can

00:25:44,960 --> 00:25:48,240
modify

00:25:45,919 --> 00:25:49,440
any of the configurations in case of

00:25:48,240 --> 00:25:51,679
emergency

00:25:49,440 --> 00:25:54,240
but the interesting level is that what

00:25:51,679 --> 00:25:56,000
kind of other levels can be provided

00:25:54,240 --> 00:25:58,159
usually we have a very high level this

00:25:56,000 --> 00:25:59,279
is that give me a secure hdfs and kafka

00:25:58,159 --> 00:26:01,360
i wouldn't like to know

00:25:59,279 --> 00:26:02,400
how do you do it just give me it right

00:26:01,360 --> 00:26:04,960
now

00:26:02,400 --> 00:26:06,480
this is the the abstraction level of the

00:26:04,960 --> 00:26:09,279
cloud providers right

00:26:06,480 --> 00:26:10,559
click the button give me kafka that's

00:26:09,279 --> 00:26:12,799
what i need

00:26:10,559 --> 00:26:13,600
and usually there is a low level bottom

00:26:12,799 --> 00:26:16,559
that's the

00:26:13,600 --> 00:26:18,960
the car level a lot of level then when

00:26:16,559 --> 00:26:20,799
you know the exact configuration and you

00:26:18,960 --> 00:26:23,919
would like to just modify it

00:26:20,799 --> 00:26:25,520
and and scale it but i think there is

00:26:23,919 --> 00:26:27,440
something between them

00:26:25,520 --> 00:26:28,720
and and this is very similar to the

00:26:27,440 --> 00:26:31,760
previous two right

00:26:28,720 --> 00:26:34,799
when i just shared a transformation

00:26:31,760 --> 00:26:36,080
do you need a memdisk for example or a

00:26:34,799 --> 00:26:40,000
different persistence

00:26:36,080 --> 00:26:41,360
or do you need to expose all of the

00:26:40,000 --> 00:26:44,640
ports

00:26:41,360 --> 00:26:45,679
and you can just choose from available

00:26:44,640 --> 00:26:48,080
options

00:26:45,679 --> 00:26:49,520
i need i think we need all of the

00:26:48,080 --> 00:26:52,000
abstraction levels

00:26:49,520 --> 00:26:52,880
and this is the key for for the

00:26:52,000 --> 00:26:56,240
usability

00:26:52,880 --> 00:26:57,200
to provide so let's go back to the very

00:26:56,240 --> 00:27:00,400
very first

00:26:57,200 --> 00:27:01,919
uh first point the cluster management

00:27:00,400 --> 00:27:04,240
that was the vision right

00:27:01,919 --> 00:27:05,600
which is still not very clear but this

00:27:04,240 --> 00:27:07,279
is still a numbery

00:27:05,600 --> 00:27:09,039
and the header cluster manager and in

00:27:07,279 --> 00:27:12,480
the left side you can see that it's

00:27:09,039 --> 00:27:15,919
hdfs mapreduce yarn as hive

00:27:12,480 --> 00:27:18,799
hbase big zookeeper and oh

00:27:15,919 --> 00:27:21,120
i'm very metrics maybe are installed in

00:27:18,799 --> 00:27:24,559
this cluster together

00:27:21,120 --> 00:27:27,360
so this is something what i

00:27:24,559 --> 00:27:28,480
we would like to provide and we already

00:27:27,360 --> 00:27:30,960
have a low level tool

00:27:28,480 --> 00:27:32,559
which can just share really irreusable

00:27:30,960 --> 00:27:34,880
transformation

00:27:32,559 --> 00:27:36,559
so which can be useful for achieve both

00:27:34,880 --> 00:27:39,039
the collaboration and the usability but

00:27:36,559 --> 00:27:42,399
still we are not there

00:27:39,039 --> 00:27:45,440
so a few weeks ago

00:27:42,399 --> 00:27:48,080
we had a hackathon inside my my uh

00:27:45,440 --> 00:27:48,559
company so everybody it was totally free

00:27:48,080 --> 00:27:52,240
to do

00:27:48,559 --> 00:27:55,600
something and we had to

00:27:52,240 --> 00:27:58,960
two and a half days to to create

00:27:55,600 --> 00:28:00,960
something new and

00:27:58,960 --> 00:28:02,000
with my colleague one of my colleagues

00:28:00,960 --> 00:28:05,440
we just sit down

00:28:02,000 --> 00:28:08,720
and we thought okay maybe we can

00:28:05,440 --> 00:28:11,840
do something like this because

00:28:08,720 --> 00:28:13,600
if it's true that the kubernetes can

00:28:11,840 --> 00:28:15,200
help us

00:28:13,600 --> 00:28:16,799
and we can just reuse all of the

00:28:15,200 --> 00:28:19,679
existing components

00:28:16,799 --> 00:28:20,880
then maybe it's possible to provide

00:28:19,679 --> 00:28:24,960
something like this

00:28:20,880 --> 00:28:25,520
just in two and a half days and we tried

00:28:24,960 --> 00:28:27,919
it

00:28:25,520 --> 00:28:29,760
and i can show that what do we have it's

00:28:27,919 --> 00:28:30,240
not a full application so the previous

00:28:29,760 --> 00:28:33,039
one

00:28:30,240 --> 00:28:34,960
the the resource generator it's a it's a

00:28:33,039 --> 00:28:35,440
it's a stable application and i use it

00:28:34,960 --> 00:28:39,120
every day

00:28:35,440 --> 00:28:39,679
this is more like a demo to understand

00:28:39,120 --> 00:28:42,960
that

00:28:39,679 --> 00:28:46,399
it might be we it might be required

00:28:42,960 --> 00:28:48,000
to to provide uh something for the

00:28:46,399 --> 00:28:52,000
apache big data ecosystem

00:28:48,000 --> 00:28:55,679
in club kubernetes so let's

00:28:52,000 --> 00:28:57,760
back to here and this one what we did

00:28:55,679 --> 00:29:00,720
it's nothing more just a few hundred

00:28:57,760 --> 00:29:01,760
lines of go code and html code very

00:29:00,720 --> 00:29:04,399
minimal

00:29:01,760 --> 00:29:05,200
it's two days and and something like

00:29:04,399 --> 00:29:07,840
this

00:29:05,200 --> 00:29:09,760
but and you can see that i have some

00:29:07,840 --> 00:29:11,440
components so it's very simple

00:29:09,760 --> 00:29:13,440
not very similar to them very but to

00:29:11,440 --> 00:29:15,200
something like this

00:29:13,440 --> 00:29:17,520
first what we can see for hing symbol

00:29:15,200 --> 00:29:20,000
the nodes what we can see here is

00:29:17,520 --> 00:29:22,880
nothing more just kubernetes api cause

00:29:20,000 --> 00:29:24,159
but here the collaboration part if i

00:29:22,880 --> 00:29:28,080
click to the dashboard

00:29:24,159 --> 00:29:31,039
and if it works i'm going to

00:29:28,080 --> 00:29:32,080
graphena right so this is this is all of

00:29:31,039 --> 00:29:34,559
the information

00:29:32,080 --> 00:29:36,080
about my node so it's nothing more just

00:29:34,559 --> 00:29:38,000
the parameters and graphing eye in the

00:29:36,080 --> 00:29:39,919
background and it can just

00:29:38,000 --> 00:29:42,240
you know it's very common that graphene

00:29:39,919 --> 00:29:46,000
can be set up to monitor everything in

00:29:42,240 --> 00:29:49,120
size so we can also go to the

00:29:46,000 --> 00:29:51,520
current status i have hdfsc on zookeeper

00:29:49,120 --> 00:29:52,480
you can see that i have some services

00:29:51,520 --> 00:29:55,440
hdfs

00:29:52,480 --> 00:29:56,480
again this locks and hdfs name node this

00:29:55,440 --> 00:29:59,840
is uh

00:29:56,480 --> 00:30:02,240
grafana and loki all of the logs are

00:29:59,840 --> 00:30:04,480
collected here okay it's not

00:30:02,240 --> 00:30:06,000
i think i didn't run any specific

00:30:04,480 --> 00:30:08,640
workloads so i couldn't see

00:30:06,000 --> 00:30:10,240
too much this is the console this is

00:30:08,640 --> 00:30:13,679
nothing more kubernetes

00:30:10,240 --> 00:30:14,799
dashboard but i can just go to the hdfs

00:30:13,679 --> 00:30:17,279
so i can

00:30:14,799 --> 00:30:21,120
do anything here especially if i have

00:30:17,279 --> 00:30:24,399
default fs i have no default fs okay

00:30:21,120 --> 00:30:26,640
so this is the collaboration part right

00:30:24,399 --> 00:30:28,720
with the collaboration that with all of

00:30:26,640 --> 00:30:30,640
the existing cloud native tools

00:30:28,720 --> 00:30:32,080
i can provide a very good user

00:30:30,640 --> 00:30:34,399
experience okay

00:30:32,080 --> 00:30:35,520
i wouldn't like to talk about the ui you

00:30:34,399 --> 00:30:38,080
know that this is a

00:30:35,520 --> 00:30:40,000
i'm not a ui man but you know that the

00:30:38,080 --> 00:30:41,360
functionality it's very easy to to

00:30:40,000 --> 00:30:44,559
provide all of this

00:30:41,360 --> 00:30:45,840
but still something what we need this uh

00:30:44,559 --> 00:30:48,960
the abstraction level

00:30:45,840 --> 00:30:50,320
so let's go back to here i would like to

00:30:48,960 --> 00:30:52,880
install a new service

00:30:50,320 --> 00:30:55,120
obviously an amazon one right and we

00:30:52,880 --> 00:30:58,159
definitely need an awesome service

00:30:55,120 --> 00:31:01,519
so let's try to add the nozzle service

00:30:58,159 --> 00:31:02,000
and let's see what happens ideally and

00:31:01,519 --> 00:31:04,880
also

00:31:02,000 --> 00:31:05,360
oh awesome services i did still not

00:31:04,880 --> 00:31:07,760
installed

00:31:05,360 --> 00:31:08,399
just add it to the to the party i have

00:31:07,760 --> 00:31:11,039
two options

00:31:08,399 --> 00:31:11,919
apply the changes or configure the

00:31:11,039 --> 00:31:13,760
servers

00:31:11,919 --> 00:31:16,640
let's check the apply the changes so

00:31:13,760 --> 00:31:18,960
under the hood i have the git repository

00:31:16,640 --> 00:31:20,480
and everything what we have seen earlier

00:31:18,960 --> 00:31:23,679
this major generation

00:31:20,480 --> 00:31:25,200
happens so if i under if i am interested

00:31:23,679 --> 00:31:33,600
about what happened

00:31:25,200 --> 00:31:36,880
the this adding goes on

00:31:33,600 --> 00:31:40,320
if my vpn would like to show it

00:31:36,880 --> 00:31:40,720
the all of the all of the diffs between

00:31:40,320 --> 00:31:43,120
oh

00:31:40,720 --> 00:31:44,000
i have you can see that i had a lot of

00:31:43,120 --> 00:31:46,080
new

00:31:44,000 --> 00:31:47,360
uh stateful sets the ozone actually is

00:31:46,080 --> 00:31:49,440
added to the party

00:31:47,360 --> 00:31:51,440
this is the descriptor what we have seen

00:31:49,440 --> 00:31:53,919
earlier so you can see that i just added

00:31:51,440 --> 00:31:56,559
the ozone as before

00:31:53,919 --> 00:31:57,120
okay still it's not applied right i have

00:31:56,559 --> 00:31:59,840
this

00:31:57,120 --> 00:32:00,559
one here so i need to apply it to commit

00:31:59,840 --> 00:32:04,080
to the

00:32:00,559 --> 00:32:07,279
cluster but okay i have a

00:32:04,080 --> 00:32:08,480
few minutes but what i can do it's more

00:32:07,279 --> 00:32:12,840
interesting so

00:32:08,480 --> 00:32:16,240
let's go back to this ozone

00:32:12,840 --> 00:32:18,960
and plain services nothing

00:32:16,240 --> 00:32:21,440
important okay configuring these are

00:32:18,960 --> 00:32:24,000
reasonable

00:32:21,440 --> 00:32:25,679
so this is the the level abstraction

00:32:24,000 --> 00:32:28,080
level of the washing machine right

00:32:25,679 --> 00:32:29,519
let's say i would like to enable service

00:32:28,080 --> 00:32:31,039
on all nodes which

00:32:29,519 --> 00:32:33,679
under the hood is just the noteboard

00:32:31,039 --> 00:32:36,880
service and i can choose it

00:32:33,679 --> 00:32:39,600
so under the hood again it will add that

00:32:36,880 --> 00:32:41,760
to the descriptor so i can just check

00:32:39,600 --> 00:32:43,919
what happened

00:32:41,760 --> 00:32:45,840
okay a new comment add view published it

00:32:43,919 --> 00:32:48,159
will set to the service awesome okay

00:32:45,840 --> 00:32:49,679
check what does it mean and you can see

00:32:48,159 --> 00:32:53,600
that okay i have a new

00:32:49,679 --> 00:32:56,320
few new services which will expose

00:32:53,600 --> 00:32:57,840
with this kind of notepad all of the

00:32:56,320 --> 00:32:59,919
awesome services i don't need to

00:32:57,840 --> 00:33:02,000
understand that how should i do it right

00:32:59,919 --> 00:33:05,039
i can just choose from the existing

00:33:02,000 --> 00:33:06,880
if i would like to do i can i can

00:33:05,039 --> 00:33:09,279
configure everything one by one

00:33:06,880 --> 00:33:10,320
so if i go to the hdfs i have all of

00:33:09,279 --> 00:33:12,559
this config here

00:33:10,320 --> 00:33:13,840
you can see that coresight hdfs i can

00:33:12,559 --> 00:33:16,240
modify any of this

00:33:13,840 --> 00:33:18,159
but i don't need to understand and it's

00:33:16,240 --> 00:33:21,360
something lower level than the

00:33:18,159 --> 00:33:23,840
what i can find in the cloud providers

00:33:21,360 --> 00:33:24,799
okay let's see another example so this

00:33:23,840 --> 00:33:26,640
is the versions

00:33:24,799 --> 00:33:29,039
again collaboration this is nothing more

00:33:26,640 --> 00:33:30,880
just the docker registry under the hood

00:33:29,039 --> 00:33:33,039
and in the docker registry i ask that

00:33:30,880 --> 00:33:34,880
what kind of images are there

00:33:33,039 --> 00:33:36,960
and i can say that okay i would like to

00:33:34,880 --> 00:33:40,080
use the 1.1

00:33:36,960 --> 00:33:40,960
1.0.0 and you know that this other

00:33:40,080 --> 00:33:44,320
transformation

00:33:40,960 --> 00:33:48,080
package somehow added

00:33:44,320 --> 00:33:52,159
due to the ozone installation

00:33:48,080 --> 00:33:53,760
so let's check what does it mean it

00:33:52,159 --> 00:33:55,120
means a new transformation i don't need

00:33:53,760 --> 00:33:57,840
to understand i'm just

00:33:55,120 --> 00:33:59,279
showing that what what's under the hood

00:33:57,840 --> 00:34:01,600
and you can see that

00:33:59,279 --> 00:34:03,519
the image itself it's modified to

00:34:01,600 --> 00:34:05,200
download this specific image from the

00:34:03,519 --> 00:34:07,760
internal docker registry

00:34:05,200 --> 00:34:09,359
again i almost it's almost nothing a few

00:34:07,760 --> 00:34:12,399
lines i've got five line

00:34:09,359 --> 00:34:15,200
lines of code but i just integrated the

00:34:12,399 --> 00:34:15,919
existing local registry with with all of

00:34:15,200 --> 00:34:18,079
those things

00:34:15,919 --> 00:34:21,919
so finally i can say that apply the

00:34:18,079 --> 00:34:25,760
changes it's nothing more just a push

00:34:21,919 --> 00:34:29,440
so when i push this one to the

00:34:25,760 --> 00:34:31,919
git repository i have this deployment

00:34:29,440 --> 00:34:32,879
and not a big surprise i just reused

00:34:31,919 --> 00:34:36,480
something

00:34:32,879 --> 00:34:38,480
which is um github space the tool

00:34:36,480 --> 00:34:40,320
which is nothing more just synchronizing

00:34:38,480 --> 00:34:43,440
a git repository

00:34:40,320 --> 00:34:45,200
with my kubernetes

00:34:43,440 --> 00:34:47,679
so all of the yaml files in the git

00:34:45,200 --> 00:34:51,280
repositories will be synchronized

00:34:47,679 --> 00:34:53,440
i can revert here i can check the status

00:34:51,280 --> 00:34:54,480
but everything is green so everything is

00:34:53,440 --> 00:34:56,720
supposed to

00:34:54,480 --> 00:34:58,640
available if i check the current status

00:34:56,720 --> 00:35:02,640
yes i have the ozone

00:34:58,640 --> 00:35:05,119
six running services i can just check it

00:35:02,640 --> 00:35:05,920
because i enable the node port i can

00:35:05,119 --> 00:35:09,119
just check

00:35:05,920 --> 00:35:12,160
the s3jg for example or

00:35:09,119 --> 00:35:15,440
scm public maybe

00:35:12,160 --> 00:35:17,280
maybe this one yes this is the s3

00:35:15,440 --> 00:35:20,079
compostable interface of ozone

00:35:17,280 --> 00:35:21,760
so i'm just clicking and but under the

00:35:20,079 --> 00:35:22,640
hood it's very easy to understand and

00:35:21,760 --> 00:35:25,520
there is no

00:35:22,640 --> 00:35:25,920
state you can just move everything from

00:35:25,520 --> 00:35:27,599
from

00:35:25,920 --> 00:35:29,680
one environment to another one right

00:35:27,599 --> 00:35:32,160
it's nothing more just a git repository

00:35:29,680 --> 00:35:33,760
this is just a helper to understand the

00:35:32,160 --> 00:35:36,960
big data projects

00:35:33,760 --> 00:35:39,119
because under the hood we have just the

00:35:36,960 --> 00:35:40,480
flexible project which generates all of

00:35:39,119 --> 00:35:43,280
the ammo files

00:35:40,480 --> 00:35:44,800
okay so this is some kind of vision what

00:35:43,280 --> 00:35:48,160
i have so

00:35:44,800 --> 00:35:49,839
where we have a middle level obstruction

00:35:48,160 --> 00:35:52,960
to understand what we have

00:35:49,839 --> 00:35:55,599
and reuse transformation to provide a

00:35:52,960 --> 00:35:57,280
some expedia usability for the stack

00:35:55,599 --> 00:35:57,760
itself for the apache big data as a

00:35:57,280 --> 00:35:59,839
stack

00:35:57,760 --> 00:36:01,200
and a few other components c and cf

00:35:59,839 --> 00:36:03,359
projects parameters

00:36:01,200 --> 00:36:04,480
loki a lot of things can be can can be

00:36:03,359 --> 00:36:06,920
added

00:36:04,480 --> 00:36:09,440
so let's just go back and close the

00:36:06,920 --> 00:36:13,520
presentation

00:36:09,440 --> 00:36:17,040
this is yes

00:36:13,520 --> 00:36:20,000
yeah so summary is that i think

00:36:17,040 --> 00:36:21,440
what we need to make it easier to use

00:36:20,000 --> 00:36:24,240
all of these tools

00:36:21,440 --> 00:36:25,599
it's not separated hem charts or

00:36:24,240 --> 00:36:28,480
operators but something

00:36:25,599 --> 00:36:29,760
which is common and can provide some

00:36:28,480 --> 00:36:32,560
good usability

00:36:29,760 --> 00:36:34,880
i think the key for the good usability

00:36:32,560 --> 00:36:38,640
is this reusable transformation

00:36:34,880 --> 00:36:40,560
i also think that the kubernetes can be

00:36:38,640 --> 00:36:42,880
a very good platform because it's so

00:36:40,560 --> 00:36:44,320
flexible on top of it very easy

00:36:42,880 --> 00:36:46,800
two days and we can just provide

00:36:44,320 --> 00:36:49,839
something it's very easy to create

00:36:46,800 --> 00:36:52,320
something and

00:36:49,839 --> 00:36:53,200
the next step is an open question one

00:36:52,320 --> 00:36:56,160
option

00:36:53,200 --> 00:36:58,000
if if at least a few people are

00:36:56,160 --> 00:37:00,000
interested about this approach

00:36:58,000 --> 00:37:01,520
we can try to create an incubator

00:37:00,000 --> 00:37:04,480
proposal or

00:37:01,520 --> 00:37:05,599
we can just do more prototypes or

00:37:04,480 --> 00:37:07,280
experiments

00:37:05,599 --> 00:37:10,079
everything is open so if you are

00:37:07,280 --> 00:37:14,079
interested feel free to ping me here

00:37:10,079 --> 00:37:15,520
or here oh i didn't mention that if you

00:37:14,079 --> 00:37:17,440
are interested about the ozone then

00:37:15,520 --> 00:37:18,000
there is a youtube channel where you can

00:37:17,440 --> 00:37:21,119
also

00:37:18,000 --> 00:37:24,960
have information so that's what i

00:37:21,119 --> 00:37:28,400
i planned to

00:37:24,960 --> 00:37:31,920
share and still we have

00:37:28,400 --> 00:37:34,000
oh i think three minutes so if you have

00:37:31,920 --> 00:37:36,160
any questions

00:37:34,000 --> 00:37:38,000
actually we have unlimited time right

00:37:36,160 --> 00:37:39,599
because this is the last

00:37:38,000 --> 00:37:41,680
presentation one of the last

00:37:39,599 --> 00:37:44,880
presentations in the conference

00:37:41,680 --> 00:37:49,440
so feel free to ask if you have any

00:37:44,880 --> 00:37:49,440
questions comments or

00:37:49,520 --> 00:37:55,040
or feel free to contact me if you have

00:37:52,000 --> 00:37:55,040
no questions

00:37:57,440 --> 00:38:00,560
oh yes birth of feather session it's

00:37:59,119 --> 00:38:04,720
very important go to birth of

00:38:00,560 --> 00:38:08,480
feather session it's always always uh

00:38:04,720 --> 00:38:10,800
four hours yes

00:38:08,480 --> 00:38:12,640
i know somebody who participate who

00:38:10,800 --> 00:38:13,280
followed the presentation from japan

00:38:12,640 --> 00:38:16,720
actually

00:38:13,280 --> 00:38:17,040
and i really respect him okay if there

00:38:16,720 --> 00:38:19,119
is

00:38:17,040 --> 00:38:21,599
no other question thank you to

00:38:19,119 --> 00:38:23,359
participate

00:38:21,599 --> 00:38:25,440
and join to this talk thank you to join

00:38:23,359 --> 00:38:27,760
to this conference

00:38:25,440 --> 00:38:27,760
and

00:38:28,720 --> 00:38:33,839
thank you

00:38:54,960 --> 00:38:57,040

YouTube URL: https://www.youtube.com/watch?v=QWytiBFY6ps


