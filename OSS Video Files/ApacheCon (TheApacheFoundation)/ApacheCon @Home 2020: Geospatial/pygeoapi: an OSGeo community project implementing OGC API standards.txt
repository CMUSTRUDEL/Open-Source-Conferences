Title: pygeoapi: an OSGeo community project implementing OGC API standards
Publication date: 2020-10-22
Playlist: ApacheCon @Home 2020: Geospatial
Description: 
	pygeoapi: an OSGeo community project implementing OGC API standards
Tom Kralidis, Francesco Bartoli

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

The proliferation of REST as an architectural style as well as OpenAPI has resulted in broader adoption of a leaner service contract and the OGC developing a new generation of API specifications in support of discovery, access, visualization and processing of geospatial data. These efforts are aimed to lower the barrier to implementation, especially for mass-market/non-geospatial developers. pygeoapi is an OGC Reference Implementation compliant with the OGC API - Features specification. Implemented in Python, pygeoapi supports many other OGC APIs via the Flask web framework and a fully integrated OpenAPI structure. Lightweight, easy to deploy and cloud-ready, pygeoapi's architecture facilitates publishing datasets and processes from multiple sources. Implementations of other OGC APIs are in progress for the 1.0 roadmap, including gridded/coverage data (OGC API - Coverages), search (OGC API - Records), and vector/map tiles (OGC API - Tiles). pygeoapi is a community project of the Open Source Geospatial Foundation (OSGeo). pygeoapi follows a clear separation structure with a view, provider/plugin and entry point module. The view approach allows for easy integration with other Python web frameworks like Starlette and Django. The provider abstracts connectivity to numerous data sources (CSV, SQLite3, GeoJSON, Elasticsearch, GDAL/OGR) and provides extensibility to support additional formats, databases, object storage and more. This presentation will provide an overview of pygeoapi, current status and next steps as part of the evolution of the project.

Tom is a Senior Systems Scientist for the Meteorological Service of Canada and is a longtime proponent of spatial data infrastructure, interoperability, open standards and open source. He is chief architect of the World Ozone and Ultraviolet Radiation Data Centre (WOUDC) and MSC's GeoMet platform of real-time and archive weather, climate and water APIs. Tom is active in OGC and is currently co-chair of the OGC API - Records SWG. He is also the chair of the UN World Meteorological Organization Expert Team on Metadata. Tom is has contributed to numerous FOSS4G projects such as QGIS and MapServer. He is the founder of the pycsw and pygeoapi projects. He is a Charter Member of OSGeo and currently serves on their Board of Directors.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:24,720 --> 00:00:28,080
really looking forward to this pie geo

00:00:26,720 --> 00:00:30,560
api

00:00:28,080 --> 00:00:32,719
presentation this is a bit of software

00:00:30,560 --> 00:00:35,440
that's really um

00:00:32,719 --> 00:00:36,640
gotten a lot of notice and essential and

00:00:35,440 --> 00:00:39,760
ogc sprints

00:00:36,640 --> 00:00:42,960
and other activities around the globe so

00:00:39,760 --> 00:00:45,840
looking forward to it tom great

00:00:42,960 --> 00:00:48,000
thanks um thanks george for for for the

00:00:45,840 --> 00:00:50,879
intro and thanks for inviting us to uh

00:00:48,000 --> 00:00:51,520
um to talk we're very happy to be here

00:00:50,879 --> 00:00:55,039
so

00:00:51,520 --> 00:00:57,120
um this brand this presentation will be

00:00:55,039 --> 00:00:59,199
uh was to be delivered by francesco and

00:00:57,120 --> 00:01:02,480
i so francesco i will keep going

00:00:59,199 --> 00:01:04,879
until uh until you are in and then

00:01:02,480 --> 00:01:06,400
i'll be able to to move things over to

00:01:04,879 --> 00:01:10,159
you accordingly

00:01:06,400 --> 00:01:11,040
so basically um i'm going to give a a

00:01:10,159 --> 00:01:14,000
presentation

00:01:11,040 --> 00:01:15,200
on on on you api so given georgia's

00:01:14,000 --> 00:01:18,080
introduction

00:01:15,200 --> 00:01:19,840
as well as uh as well as martin's

00:01:18,080 --> 00:01:23,520
presentation i mean

00:01:19,840 --> 00:01:27,040
very good overviews of uh ogc and open

00:01:23,520 --> 00:01:30,240
standards and open source as well as uh

00:01:27,040 --> 00:01:32,640
the apache sis implementation here

00:01:30,240 --> 00:01:35,280
in um in paigo api we're going to dive a

00:01:32,640 --> 00:01:37,920
little deeper into the into the api side

00:01:35,280 --> 00:01:39,439
so sort of the publishing and accessing

00:01:37,920 --> 00:01:42,560
and discovering things

00:01:39,439 --> 00:01:45,600
through through an open source python

00:01:42,560 --> 00:01:45,600
server implementation

00:01:48,000 --> 00:01:51,520
so we're going to walk over you know

00:01:50,960 --> 00:01:54,560
where

00:01:51,520 --> 00:01:56,399
where sort of geospatial apis are

00:01:54,560 --> 00:01:57,840
have been and what their evolution is

00:01:56,399 --> 00:01:59,360
we'll talk a little bit about

00:01:57,840 --> 00:02:01,759
some of the current technologies that

00:01:59,360 --> 00:02:04,240
are driving um some of the uh

00:02:01,759 --> 00:02:06,000
ogc activity with regards to with

00:02:04,240 --> 00:02:08,080
regards to apis

00:02:06,000 --> 00:02:09,360
we'll talk uh we'll give you an

00:02:08,080 --> 00:02:11,920
introduction to the

00:02:09,360 --> 00:02:13,760
to the project pyto api we'll walk

00:02:11,920 --> 00:02:16,239
through some core capabilities

00:02:13,760 --> 00:02:18,560
um give you some information on how you

00:02:16,239 --> 00:02:20,959
can install this and run it

00:02:18,560 --> 00:02:22,480
as well as provide some uh provide some

00:02:20,959 --> 00:02:24,640
examples so i mean

00:02:22,480 --> 00:02:26,560
in my in my opinion that there's

00:02:24,640 --> 00:02:29,599
implementations are uh

00:02:26,560 --> 00:02:31,360
are are a great example of of the of

00:02:29,599 --> 00:02:33,519
lowering the barrier to

00:02:31,360 --> 00:02:34,879
uh you know the standards implementation

00:02:33,519 --> 00:02:36,239
so we'll

00:02:34,879 --> 00:02:38,319
show you some examples of production

00:02:36,239 --> 00:02:41,360
instances where we're going

00:02:38,319 --> 00:02:42,400
and uh um hopefully we'll be able to

00:02:41,360 --> 00:02:45,599
give a

00:02:42,400 --> 00:02:45,599
demo following that

00:02:46,560 --> 00:02:50,720
francesco i do see you now but uh are

00:02:49,680 --> 00:02:53,840
you able to speak

00:02:50,720 --> 00:02:57,280
do you hear me yeah

00:02:53,840 --> 00:03:01,599
okay cool so i when it's my side

00:02:57,280 --> 00:03:04,720
i can talk excellent thank goodness

00:03:01,599 --> 00:03:08,159
um okay so next slide

00:03:04,720 --> 00:03:11,840
uh i will move on to the uh evolution of

00:03:08,159 --> 00:03:13,920
geospatial api so geospatial sort of web

00:03:11,840 --> 00:03:17,360
apis have been around as

00:03:13,920 --> 00:03:20,080
george said quite a long time the

00:03:17,360 --> 00:03:21,040
the first generation of ogc standards

00:03:20,080 --> 00:03:23,120
are

00:03:21,040 --> 00:03:24,159
you know decades old with regards to the

00:03:23,120 --> 00:03:26,879
apis

00:03:24,159 --> 00:03:27,920
and they were built at a time where um

00:03:26,879 --> 00:03:31,840
you know things like

00:03:27,920 --> 00:03:36,400
xml rpc soap wizal

00:03:31,840 --> 00:03:38,720
uddi were very very popular and uh

00:03:36,400 --> 00:03:39,840
you know popular implementation and

00:03:38,720 --> 00:03:42,159
design patterns

00:03:39,840 --> 00:03:45,120
there was a strong concept of a

00:03:42,159 --> 00:03:46,720
relational database as the back end

00:03:45,120 --> 00:03:48,879
obviously relational databases have not

00:03:46,720 --> 00:03:49,599
gone away uh but there's other things

00:03:48,879 --> 00:03:52,080
these days

00:03:49,599 --> 00:03:54,319
such as you know document stores no sql

00:03:52,080 --> 00:03:57,120
and and so on so

00:03:54,319 --> 00:03:58,000
you know in the 90s um we saw the the

00:03:57,120 --> 00:04:01,120
you know the first

00:03:58,000 --> 00:04:04,000
implement the first uh standard of odc

00:04:01,120 --> 00:04:06,959
wms 1.0 in 1999

00:04:04,000 --> 00:04:08,720
which um i remember looking back at that

00:04:06,959 --> 00:04:10,640
and saying to myself oh my goodness this

00:04:08,720 --> 00:04:12,239
is this is the future so uh

00:04:10,640 --> 00:04:14,239
so it was great to see that as sort of

00:04:12,239 --> 00:04:16,479
the first um you know

00:04:14,239 --> 00:04:19,120
major web mapping spec coming out of uh

00:04:16,479 --> 00:04:21,519
coming out of ogc

00:04:19,120 --> 00:04:23,840
moving uh you know moving along into the

00:04:21,519 --> 00:04:27,440
2000s mid 2000s we had the

00:04:23,840 --> 00:04:29,520
you know concepts of of web 2

00:04:27,440 --> 00:04:30,639
suddenly we have google maps the

00:04:29,520 --> 00:04:33,840
concepts of uh

00:04:30,639 --> 00:04:37,360
ajax uh and and asynchronous sort of

00:04:33,840 --> 00:04:40,639
uh workflows uh maps as

00:04:37,360 --> 00:04:42,479
tiles so you know the the the first

00:04:40,639 --> 00:04:43,680
iteration of doing maps on the web with

00:04:42,479 --> 00:04:46,080
ogc wms

00:04:43,680 --> 00:04:47,919
was based on um you know being able to

00:04:46,080 --> 00:04:50,080
look for any part in the world

00:04:47,919 --> 00:04:51,280
uh you know any any data in the world

00:04:50,080 --> 00:04:54,160
any bounding box

00:04:51,280 --> 00:04:56,160
any uh you know width and height aspect

00:04:54,160 --> 00:04:58,880
ratio and you get a result back

00:04:56,160 --> 00:05:00,479
um slippy maps and tiles started to come

00:04:58,880 --> 00:05:03,199
in to address submit to

00:05:00,479 --> 00:05:04,320
you know help out with some issues on um

00:05:03,199 --> 00:05:06,320
on you know getting canned

00:05:04,320 --> 00:05:08,880
representations of that data

00:05:06,320 --> 00:05:10,320
in in support of performance all the

00:05:08,880 --> 00:05:12,960
while uh

00:05:10,320 --> 00:05:14,320
the ogc api specifications start uh

00:05:12,960 --> 00:05:17,039
continue to evolve

00:05:14,320 --> 00:05:19,039
so we went from maps which are you know

00:05:17,039 --> 00:05:19,600
basically pretty pictures of geospatial

00:05:19,039 --> 00:05:22,639
data

00:05:19,600 --> 00:05:24,080
we got into features or vector data we

00:05:22,639 --> 00:05:27,280
also got into

00:05:24,080 --> 00:05:30,720
a gridded data coverages if you will um

00:05:27,280 --> 00:05:32,560
generic processes so doing uh workflows

00:05:30,720 --> 00:05:33,520
and chaining through uh through ogc

00:05:32,560 --> 00:05:35,919
standards

00:05:33,520 --> 00:05:37,199
as well as catalog services for uh you

00:05:35,919 --> 00:05:40,000
know for search

00:05:37,199 --> 00:05:40,000
for discovery

00:05:40,880 --> 00:05:45,840
so um where you know where did that

00:05:44,160 --> 00:05:47,360
where did that get us as george said

00:05:45,840 --> 00:05:50,639
there's you know over a million

00:05:47,360 --> 00:05:52,560
um you know implementations out there uh

00:05:50,639 --> 00:05:53,759
there's there's numerous organizations

00:05:52,560 --> 00:05:55,919
deploying these things

00:05:53,759 --> 00:05:57,520
they're not going away anytime soon at

00:05:55,919 --> 00:05:59,919
the same time

00:05:57,520 --> 00:06:01,919
the api standards um you know there are

00:05:59,919 --> 00:06:05,120
some there were some realities that are

00:06:01,919 --> 00:06:07,759
that are associated with them uh

00:06:05,120 --> 00:06:08,400
you know things around http tunnels and

00:06:07,759 --> 00:06:11,919
using

00:06:08,400 --> 00:06:12,720
xml or gml um which is which is great

00:06:11,919 --> 00:06:14,880
and still

00:06:12,720 --> 00:06:15,840
um you know still useful and still

00:06:14,880 --> 00:06:18,560
required

00:06:15,840 --> 00:06:19,360
but uh you know there there are some

00:06:18,560 --> 00:06:21,919
limitations

00:06:19,360 --> 00:06:22,960
um with that with regards to uh regards

00:06:21,919 --> 00:06:25,680
to moving things

00:06:22,960 --> 00:06:25,680
over the web

00:06:26,080 --> 00:06:32,840
here's a typical example of what uh a uh

00:06:29,440 --> 00:06:35,600
uh a gml payload made it uh will look

00:06:32,840 --> 00:06:38,800
like

00:06:35,600 --> 00:06:42,000
uh some other real realities uh we

00:06:38,800 --> 00:06:43,759
we we found that we wanted to make our

00:06:42,000 --> 00:06:44,880
apis more search engine friendly and

00:06:43,759 --> 00:06:48,319
that's market

00:06:44,880 --> 00:06:51,120
um friendlies and we we also found that

00:06:48,319 --> 00:06:52,560
the first generation odc specs were

00:06:51,120 --> 00:06:56,560
somewhat challenging

00:06:52,560 --> 00:06:59,360
for uh for the non-geospatial uh

00:06:56,560 --> 00:07:00,400
web developer um that that increasingly

00:06:59,360 --> 00:07:02,960
becomes important

00:07:00,400 --> 00:07:03,919
as we tried um i guess as an overall

00:07:02,960 --> 00:07:06,960
community to

00:07:03,919 --> 00:07:08,000
make geospatial more ubiquitous in uh in

00:07:06,960 --> 00:07:10,800
in

00:07:08,000 --> 00:07:10,800
mainstream i.t

00:07:12,400 --> 00:07:16,720
i'll move it over to francesco now to

00:07:14,319 --> 00:07:18,880
give us a talk about um

00:07:16,720 --> 00:07:21,039
what where where we are today in terms

00:07:18,880 --> 00:07:24,720
of all these approaches

00:07:21,039 --> 00:07:28,960
yeah thanks tom so we we have then

00:07:24,720 --> 00:07:32,639
discovered that george explained

00:07:28,960 --> 00:07:35,840
before that the evolution of geospatial

00:07:32,639 --> 00:07:39,160
api is actually here and

00:07:35,840 --> 00:07:42,400
more importantly we have specific

00:07:39,160 --> 00:07:46,000
peculiarities uh just in place

00:07:42,400 --> 00:07:47,360
so we have the http communication

00:07:46,000 --> 00:07:50,479
protocol which is

00:07:47,360 --> 00:07:53,840
based on a rest model and it is

00:07:50,479 --> 00:07:57,360
stateless uh next please tom

00:07:53,840 --> 00:08:01,319
thank you and we

00:07:57,360 --> 00:08:04,400
actually uh now we have to use

00:08:01,319 --> 00:08:07,039
http verbs for

00:08:04,400 --> 00:08:08,240
the different operation on the same

00:08:07,039 --> 00:08:12,000
results

00:08:08,240 --> 00:08:14,960
and we have also http codes

00:08:12,000 --> 00:08:17,199
for the responses which can return

00:08:14,960 --> 00:08:20,479
different payloads

00:08:17,199 --> 00:08:24,400
based on on different media types

00:08:20,479 --> 00:08:27,280
so for instance html and json are

00:08:24,400 --> 00:08:28,080
now the default in most of the new

00:08:27,280 --> 00:08:31,360
generation

00:08:28,080 --> 00:08:34,800
or gc api specification and

00:08:31,360 --> 00:08:38,479
and also more importantly uri which

00:08:34,800 --> 00:08:41,839
identify uniquely a resource that

00:08:38,479 --> 00:08:45,600
we are going to consume with such uh

00:08:41,839 --> 00:08:49,200
approach um and then another flower

00:08:45,600 --> 00:08:52,959
is is jason which is easy to handle

00:08:49,200 --> 00:08:54,080
and very popular among uh uh developers

00:08:52,959 --> 00:08:56,800
so that

00:08:54,080 --> 00:08:57,839
in most cases the first choice for

00:08:56,800 --> 00:09:00,959
restful

00:08:57,839 --> 00:09:03,920
web services is such format

00:09:00,959 --> 00:09:04,560
and in particular for uh the geospatial

00:09:03,920 --> 00:09:08,240
stuff

00:09:04,560 --> 00:09:11,279
with the geojson and and and then

00:09:08,240 --> 00:09:12,640
last but not least the open avi

00:09:11,279 --> 00:09:16,720
specification

00:09:12,640 --> 00:09:20,160
which is basically uh a way to describe

00:09:16,720 --> 00:09:23,360
a web api in term of uh

00:09:20,160 --> 00:09:27,040
uh it's an end points in term of

00:09:23,360 --> 00:09:30,080
the request parameters the responses

00:09:27,040 --> 00:09:30,880
and the schemas and and so on it is

00:09:30,080 --> 00:09:33,760
basically

00:09:30,880 --> 00:09:34,880
a language a new agnostic in its

00:09:33,760 --> 00:09:38,399
semantics

00:09:34,880 --> 00:09:41,040
and it was born and formerly known as uh

00:09:38,399 --> 00:09:42,320
as its worker which is actually the

00:09:41,040 --> 00:09:45,680
rendered

00:09:42,320 --> 00:09:49,040
80 html page of

00:09:45,680 --> 00:09:49,040
an open api document

00:09:49,200 --> 00:09:52,160
so next please

00:09:52,480 --> 00:09:59,120
this is a typical example of uh

00:09:56,080 --> 00:10:02,480
uh and the

00:09:59,120 --> 00:10:06,079
uh header of uh an opi an open

00:10:02,480 --> 00:10:08,959
open api json uh document

00:10:06,079 --> 00:10:09,839
and and that next please and and then we

00:10:08,959 --> 00:10:13,279
have

00:10:09,839 --> 00:10:16,560
a said the this worker tool which is

00:10:13,279 --> 00:10:20,720
uh a robust tooling uh

00:10:16,560 --> 00:10:24,320
strongly developer oriented which gives

00:10:20,720 --> 00:10:28,000
uh some nice feature like

00:10:24,320 --> 00:10:31,040
automated documentation uh we'll see it

00:10:28,000 --> 00:10:32,399
uh later in the demo and also the

00:10:31,040 --> 00:10:36,800
ability to test

00:10:32,399 --> 00:10:40,640
the apis and generate a certain point

00:10:36,800 --> 00:10:44,000
uh the client could to consume uh

00:10:40,640 --> 00:10:47,839
the endpoint automatically

00:10:44,000 --> 00:10:47,839
next please

00:10:51,440 --> 00:10:55,680
okay so i'll uh i'll i'll carry on into

00:10:54,000 --> 00:10:57,040
the next section so

00:10:55,680 --> 00:11:00,480
given the fact that we've talked about

00:10:57,040 --> 00:11:02,959
where where geospatial web apis

00:11:00,480 --> 00:11:03,600
have come from and where uh and where

00:11:02,959 --> 00:11:07,760
they're at

00:11:03,600 --> 00:11:09,920
as well as some of the technology um um

00:11:07,760 --> 00:11:10,959
patterns of uh of today i'll talk a

00:11:09,920 --> 00:11:13,279
little bit about

00:11:10,959 --> 00:11:15,120
uh what's going on in ogc sort of

00:11:13,279 --> 00:11:18,480
supplementing what george has mentioned

00:11:15,120 --> 00:11:18,480
in georgia's talk earlier

00:11:18,720 --> 00:11:25,120
whoops so in

00:11:21,839 --> 00:11:25,920
in 2017 the w3c published the spatial

00:11:25,120 --> 00:11:29,360
data

00:11:25,920 --> 00:11:29,920
on the web best practices basically this

00:11:29,360 --> 00:11:33,040
is a

00:11:29,920 --> 00:11:34,000
a very important paper which um you know

00:11:33,040 --> 00:11:37,200
everybody's

00:11:34,000 --> 00:11:38,959
welcome to and encouraged to read uh

00:11:37,200 --> 00:11:40,320
this is about how to make how to make

00:11:38,959 --> 00:11:42,399
geospatial data

00:11:40,320 --> 00:11:43,440
webby and putting things on the web

00:11:42,399 --> 00:11:45,680
making things

00:11:43,440 --> 00:11:46,480
making them available through uh through

00:11:45,680 --> 00:11:48,800
apis

00:11:46,480 --> 00:11:49,920
and identifiers and access mechanisms

00:11:48,800 --> 00:11:52,560
and so on so

00:11:49,920 --> 00:11:53,040
a really foundational piece of work here

00:11:52,560 --> 00:11:56,320
from

00:11:53,040 --> 00:11:58,720
from w3c

00:11:56,320 --> 00:12:00,079
again um the design patterns you know

00:11:58,720 --> 00:12:03,519
being web friendly

00:12:00,079 --> 00:12:06,800
being developer friendly um using

00:12:03,519 --> 00:12:09,200
you know http the specification

00:12:06,800 --> 00:12:10,160
directly as it was uh you know as

00:12:09,200 --> 00:12:13,920
intended

00:12:10,160 --> 00:12:15,680
and um and moving to this you know

00:12:13,920 --> 00:12:17,120
pattern of modular specification

00:12:15,680 --> 00:12:20,320
development where we have core

00:12:17,120 --> 00:12:21,760
and we have extensions so um

00:12:20,320 --> 00:12:23,680
you know a lot of times we don't need

00:12:21,760 --> 00:12:26,399
the 100 solution

00:12:23,680 --> 00:12:28,079
and just the you know there's a minimum

00:12:26,399 --> 00:12:29,680
viable product that can be realized

00:12:28,079 --> 00:12:31,279
through a course specification

00:12:29,680 --> 00:12:33,120
that may not do everything that

00:12:31,279 --> 00:12:35,040
everybody needs to do but

00:12:33,120 --> 00:12:36,480
it'll catch uh it'll capture and make

00:12:35,040 --> 00:12:39,680
things a lot easier for

00:12:36,480 --> 00:12:42,160
a great majority while giving um

00:12:39,680 --> 00:12:42,880
you know the rest of us or other other

00:12:42,160 --> 00:12:45,040
uh

00:12:42,880 --> 00:12:46,800
you know zealots like me let's say more

00:12:45,040 --> 00:12:49,360
specialized um

00:12:46,800 --> 00:12:53,040
capability to do more specialized things

00:12:49,360 --> 00:12:57,040
through apis terms of final

00:12:53,040 --> 00:12:58,399
timeline uh again the w3c paper the ogc

00:12:57,040 --> 00:13:01,600
api white paper

00:12:58,399 --> 00:13:03,279
uh came out in 2017 which basically

00:13:01,600 --> 00:13:05,440
talked a lot about a lot about the

00:13:03,279 --> 00:13:08,480
similar things that we talked about here

00:13:05,440 --> 00:13:10,079
uh and in 2018 we saw a lot of activity

00:13:08,480 --> 00:13:12,959
from odc on

00:13:10,079 --> 00:13:14,639
on putting these uh these things into

00:13:12,959 --> 00:13:15,200
these things into action and coming up

00:13:14,639 --> 00:13:17,120
with

00:13:15,200 --> 00:13:19,519
you know hackathons and code sprints

00:13:17,120 --> 00:13:20,800
which to this day continued and as

00:13:19,519 --> 00:13:23,760
george mentioned i mean there's one

00:13:20,800 --> 00:13:23,760
going on right now

00:13:24,639 --> 00:13:28,480
and here's a look at for those of you

00:13:26,639 --> 00:13:28,959
who are familiar with the ogc standards

00:13:28,480 --> 00:13:31,040
so

00:13:28,959 --> 00:13:32,720
whether you're dealing with vector data

00:13:31,040 --> 00:13:35,519
raster data

00:13:32,720 --> 00:13:36,720
maps tiles search um there's an

00:13:35,519 --> 00:13:39,360
equivalent for uh

00:13:36,720 --> 00:13:41,600
for a lot of what we um what we've done

00:13:39,360 --> 00:13:44,639
in the ogc on the api side

00:13:41,600 --> 00:13:44,639
uh moving forward

00:13:45,279 --> 00:13:48,959
here's one i think this is that i

00:13:47,279 --> 00:13:50,800
certainly like i mean the activity

00:13:48,959 --> 00:13:52,480
uh there's a lot of ogc activity on

00:13:50,800 --> 00:13:54,560
github so now i can

00:13:52,480 --> 00:13:55,839
i can go on github and see the state of

00:13:54,560 --> 00:13:57,760
the specification

00:13:55,839 --> 00:13:59,839
at any given time and i can fork it and

00:13:57,760 --> 00:14:00,800
then i can make a contribution to it if

00:13:59,839 --> 00:14:03,600
i uh

00:14:00,800 --> 00:14:04,480
if uh if i want to so um the standards

00:14:03,600 --> 00:14:07,440
are released as

00:14:04,480 --> 00:14:07,920
html the sources are actually on github

00:14:07,440 --> 00:14:10,959
the

00:14:07,920 --> 00:14:13,519
issues uh behind a lot of the the

00:14:10,959 --> 00:14:14,240
discussions on those standards are going

00:14:13,519 --> 00:14:17,120
on

00:14:14,240 --> 00:14:17,839
at github uh on github as well as you

00:14:17,120 --> 00:14:20,880
know there's uh

00:14:17,839 --> 00:14:24,160
uh a lot of them use gitter as a uh

00:14:20,880 --> 00:14:26,320
as a chat capability so um this

00:14:24,160 --> 00:14:27,839
really lowered the barrier in my opinion

00:14:26,320 --> 00:14:30,480
to for

00:14:27,839 --> 00:14:31,120
for a lot more people to get involved in

00:14:30,480 --> 00:14:32,880
uh

00:14:31,120 --> 00:14:34,320
in the development of the specifications

00:14:32,880 --> 00:14:38,000
as well as implementing

00:14:34,320 --> 00:14:40,720
clients servers parsers serializers and

00:14:38,000 --> 00:14:40,720
you know and what have

00:14:42,639 --> 00:14:47,199
so here we are um and you know because

00:14:46,000 --> 00:14:48,880
of all that i think it's important to

00:14:47,199 --> 00:14:52,079
talk about where we came from and

00:14:48,880 --> 00:14:54,639
and you know how far the ogc has come

00:14:52,079 --> 00:14:56,160
especially in addressing the uh the need

00:14:54,639 --> 00:14:57,600
for more modern apis i think they've

00:14:56,160 --> 00:15:00,240
done a great job and

00:14:57,600 --> 00:15:01,279
um we've we've tried to follow that wave

00:15:00,240 --> 00:15:03,360
along with a lot of other

00:15:01,279 --> 00:15:04,079
implementations to implement these apis

00:15:03,360 --> 00:15:07,360
so

00:15:04,079 --> 00:15:10,480
here's uh here's pygio api so pyjio api

00:15:07,360 --> 00:15:12,079
is a server implementation of uh of a

00:15:10,480 --> 00:15:15,120
lot of the ogc

00:15:12,079 --> 00:15:18,000
api api standards

00:15:15,120 --> 00:15:19,600
it's an osgo uh community project so we

00:15:18,000 --> 00:15:22,959
got community project status

00:15:19,600 --> 00:15:24,320
um last summer and we continue to work

00:15:22,959 --> 00:15:27,760
with osgo

00:15:24,320 --> 00:15:30,800
to uh to bring us to a full-fledged osgo

00:15:27,760 --> 00:15:32,639
project uh project status

00:15:30,800 --> 00:15:34,399
so what's this project all about again

00:15:32,639 --> 00:15:37,440
it's a it's an api

00:15:34,399 --> 00:15:39,759
framework it's um it's primarily based

00:15:37,440 --> 00:15:41,920
around web apis but the way it's built

00:15:39,759 --> 00:15:44,160
you can actually run it on the command

00:15:41,920 --> 00:15:46,240
line to do what you need to do to you

00:15:44,160 --> 00:15:47,279
know access your data or discover it or

00:15:46,240 --> 00:15:51,680
process it

00:15:47,279 --> 00:15:53,360
um or or whatever or wherever else

00:15:51,680 --> 00:15:55,040
you can also implement it because it's

00:15:53,360 --> 00:15:56,320
an api framework you can also make your

00:15:55,040 --> 00:15:58,399
own application

00:15:56,320 --> 00:16:00,720
and implement it there so you can put

00:15:58,399 --> 00:16:04,160
your own front end on top of that so

00:16:00,720 --> 00:16:04,959
um uh it's it's very flexible that way

00:16:04,160 --> 00:16:06,800
and and

00:16:04,959 --> 00:16:08,880
it should be clear that not only can you

00:16:06,800 --> 00:16:09,360
leverage by your api i have a pyja api

00:16:08,880 --> 00:16:11,360
actually

00:16:09,360 --> 00:16:12,399
which is a lot of open source tooling

00:16:11,360 --> 00:16:15,839
underneath which we'll

00:16:12,399 --> 00:16:17,600
show later on we're ogc compliant um to

00:16:15,839 --> 00:16:19,519
the ogc api features

00:16:17,600 --> 00:16:21,519
specification and we continue to pursue

00:16:19,519 --> 00:16:24,560
compliance on all the apis

00:16:21,519 --> 00:16:26,800
that we uh that we implement in in in

00:16:24,560 --> 00:16:28,880
the project so being compliant

00:16:26,800 --> 00:16:31,120
is important uh for us in fact we're a

00:16:28,880 --> 00:16:32,160
reference implementation for ogc api

00:16:31,120 --> 00:16:34,639
features so

00:16:32,160 --> 00:16:36,240
i think that gives uh uh i think that's

00:16:34,639 --> 00:16:39,120
great for the project to

00:16:36,240 --> 00:16:39,440
demonstrate uh to others the uh um that

00:16:39,120 --> 00:16:40,880
we

00:16:39,440 --> 00:16:42,320
pass all the compliance tests and people

00:16:40,880 --> 00:16:42,959
can be confident that when they're

00:16:42,320 --> 00:16:45,279
deploying

00:16:42,959 --> 00:16:47,360
deploying the project like project api

00:16:45,279 --> 00:16:48,639
with this which is compliant there

00:16:47,360 --> 00:16:50,880
it'll do what they think it's going to

00:16:48,639 --> 00:16:52,800
do with regards to the standards

00:16:50,880 --> 00:16:54,800
there's a lot of developers that can the

00:16:52,800 --> 00:16:58,000
developer team continues to grow

00:16:54,800 --> 00:16:59,839
uh across uh you know many uh you know

00:16:58,000 --> 00:17:00,639
many countries and many in many time

00:16:59,839 --> 00:17:02,720
zones

00:17:00,639 --> 00:17:04,799
and again we stand on the shoulders of

00:17:02,720 --> 00:17:07,600
numerous open source

00:17:04,799 --> 00:17:07,600
implementations

00:17:08,880 --> 00:17:14,480
so one key point about pyjo api

00:17:12,240 --> 00:17:16,400
is we don't touch any data so imagine

00:17:14,480 --> 00:17:18,880
you have a geospatial database

00:17:16,400 --> 00:17:19,760
or geopackage files or some geotiffs or

00:17:18,880 --> 00:17:22,480
net cdfs

00:17:19,760 --> 00:17:24,400
or what have you all we do is publish it

00:17:22,480 --> 00:17:26,319
we don't change anything uh

00:17:24,400 --> 00:17:28,400
into it we don't play around with any of

00:17:26,319 --> 00:17:29,039
the values or the data types of the

00:17:28,400 --> 00:17:31,760
values

00:17:29,039 --> 00:17:33,360
it's where it is simply a publishing uh

00:17:31,760 --> 00:17:35,440
mechanism so you take your data

00:17:33,360 --> 00:17:38,960
and you put it on the shelf through uh

00:17:35,440 --> 00:17:38,960
um through pyjo api

00:17:40,320 --> 00:17:44,799
it's uh maybe i'll go on to the to the

00:17:43,200 --> 00:17:46,240
diagram and talk a little bit about how

00:17:44,799 --> 00:17:50,000
it's put all together

00:17:46,240 --> 00:17:51,600
so at a high level um there is the core

00:17:50,000 --> 00:17:53,520
in the middle and that is actually

00:17:51,600 --> 00:17:53,919
that's the python api so everything's

00:17:53,520 --> 00:17:56,720
written

00:17:53,919 --> 00:17:58,480
in uh in python and there's a

00:17:56,720 --> 00:18:00,480
configuration that drives everything the

00:17:58,480 --> 00:18:03,760
configuration is a yaml

00:18:00,480 --> 00:18:05,840
format um underneath the core

00:18:03,760 --> 00:18:07,440
there is a uh there's a concept that

00:18:05,840 --> 00:18:10,000
we're calling providers

00:18:07,440 --> 00:18:10,720
and you can basically attach geospatial

00:18:10,000 --> 00:18:13,200
data or

00:18:10,720 --> 00:18:14,160
catalogs or what have you through these

00:18:13,200 --> 00:18:15,679
different um

00:18:14,160 --> 00:18:17,280
through these different providers which

00:18:15,679 --> 00:18:18,480
are available through you know if you

00:18:17,280 --> 00:18:20,400
have csv data

00:18:18,480 --> 00:18:22,799
let's say you have a geojson file which

00:18:20,400 --> 00:18:25,280
we've heard earlier on today

00:18:22,799 --> 00:18:26,880
or or some relational database you

00:18:25,280 --> 00:18:28,400
basically use these providers or

00:18:26,880 --> 00:18:31,039
adapters and you and you

00:18:28,400 --> 00:18:32,640
plug them into uh python api through a

00:18:31,039 --> 00:18:33,440
configuration so you don't have to touch

00:18:32,640 --> 00:18:34,960
any code

00:18:33,440 --> 00:18:37,280
or anything like that you set up a

00:18:34,960 --> 00:18:38,480
configuration file tell it where your

00:18:37,280 --> 00:18:39,760
data is

00:18:38,480 --> 00:18:41,360
give a give us a little bit of

00:18:39,760 --> 00:18:42,320
information about what kind of data it

00:18:41,360 --> 00:18:44,799
is and

00:18:42,320 --> 00:18:45,520
uh then the project makes it available

00:18:44,799 --> 00:18:48,559
through

00:18:45,520 --> 00:18:50,559
um the web front ends uh up top so if

00:18:48,559 --> 00:18:51,440
you're into python um you're probably

00:18:50,559 --> 00:18:53,520
aware of

00:18:51,440 --> 00:18:54,640
various web frameworks such as flask or

00:18:53,520 --> 00:18:57,440
or django

00:18:54,640 --> 00:18:58,640
or starlit for a synchronous so we

00:18:57,440 --> 00:19:01,039
provide uh

00:18:58,640 --> 00:19:02,559
web front ends uh from them to that as

00:19:01,039 --> 00:19:04,480
well so the core part

00:19:02,559 --> 00:19:06,160
is in the middle is the part that i was

00:19:04,480 --> 00:19:07,520
saying you can you can

00:19:06,160 --> 00:19:10,720
you can run it on the command line or

00:19:07,520 --> 00:19:12,799
you can integrate it into your own um

00:19:10,720 --> 00:19:13,840
into your own application a little bit

00:19:12,799 --> 00:19:16,559
more about the core

00:19:13,840 --> 00:19:17,360
and provider approach uh the entire

00:19:16,559 --> 00:19:20,240
project

00:19:17,360 --> 00:19:21,919
again written in python is based on a uh

00:19:20,240 --> 00:19:25,360
sort of a factory pattern

00:19:21,919 --> 00:19:28,799
where uh there's a there's an idea of

00:19:25,360 --> 00:19:29,520
of a robust plug-in mechanism so anybody

00:19:28,799 --> 00:19:32,000
can write

00:19:29,520 --> 00:19:32,960
a pyto api plug-in that that simply has

00:19:32,000 --> 00:19:35,280
to meet a

00:19:32,960 --> 00:19:36,640
an abstract based class specification

00:19:35,280 --> 00:19:38,880
and um

00:19:36,640 --> 00:19:40,400
once you do that and you your your you

00:19:38,880 --> 00:19:42,640
meet the uh

00:19:40,400 --> 00:19:43,520
uh you know the api requirements from

00:19:42,640 --> 00:19:46,160
the python

00:19:43,520 --> 00:19:47,840
sense then you're good to go so

00:19:46,160 --> 00:19:49,280
something like apache sis

00:19:47,840 --> 00:19:51,039
uh i mean i'm excited to have

00:19:49,280 --> 00:19:52,160
conversations with uh with martin and

00:19:51,039 --> 00:19:53,679
others on

00:19:52,160 --> 00:19:55,360
seeing what kind of things the packages

00:19:53,679 --> 00:19:58,080
can do and how we can plug them into

00:19:55,360 --> 00:20:01,039
python api and make them available

00:19:58,080 --> 00:20:01,039
through through the web

00:20:01,679 --> 00:20:06,240
some examples of uh of our of our plugin

00:20:04,559 --> 00:20:08,080
so anybody can write a plug-in

00:20:06,240 --> 00:20:10,159
it doesn't have to be in the project you

00:20:08,080 --> 00:20:11,360
can run it from your own location and

00:20:10,159 --> 00:20:13,760
just reference it

00:20:11,360 --> 00:20:15,039
from uh from pyju api the plugins do

00:20:13,760 --> 00:20:19,120
have to be python

00:20:15,039 --> 00:20:20,880
obviously having said this um python api

00:20:19,120 --> 00:20:22,640
provides a number of off-the-shelf

00:20:20,880 --> 00:20:24,240
plug-ins that gets shipped with the

00:20:22,640 --> 00:20:26,320
software so you don't have to do

00:20:24,240 --> 00:20:27,919
any additional tooling so here you can

00:20:26,320 --> 00:20:28,799
see that a number of vector data

00:20:27,919 --> 00:20:30,960
providers

00:20:28,799 --> 00:20:32,720
are provided with the uh with the

00:20:30,960 --> 00:20:35,039
software up front so

00:20:32,720 --> 00:20:36,559
i mentioned around standing on the

00:20:35,039 --> 00:20:39,280
shoulders of many uh

00:20:36,559 --> 00:20:40,080
many successful projects uh phosphate

00:20:39,280 --> 00:20:43,600
projects

00:20:40,080 --> 00:20:44,960
so gdal ogr um is uh

00:20:43,600 --> 00:20:46,880
is one of our is one of our core

00:20:44,960 --> 00:20:48,960
providers so uh

00:20:46,880 --> 00:20:50,320
that ubiquitous tool has enabled so many

00:20:48,960 --> 00:20:52,080
projects in

00:20:50,320 --> 00:20:53,760
in the geospatial sort of ecosystem and

00:20:52,080 --> 00:20:56,720
five view api is no exception

00:20:53,760 --> 00:20:56,720
so we support that

00:20:57,280 --> 00:21:00,960
which in turn allows the project to

00:20:59,600 --> 00:21:03,840
support hundreds of different vector

00:21:00,960 --> 00:21:03,840
formats

00:21:04,400 --> 00:21:07,440
recently in the last few months we've

00:21:05,919 --> 00:21:09,280
gone into coverages so

00:21:07,440 --> 00:21:10,640
we can also for those of you that are

00:21:09,280 --> 00:21:14,640
into

00:21:10,640 --> 00:21:16,480
multi-dimensional data we're able to

00:21:14,640 --> 00:21:18,640
to deal with uh gridded data or

00:21:16,480 --> 00:21:21,120
coverages so we currently have

00:21:18,640 --> 00:21:21,760
support for rasterial uh back-ends and

00:21:21,120 --> 00:21:24,559
as well as

00:21:21,760 --> 00:21:25,919
something called x-ray which allows for

00:21:24,559 --> 00:21:27,600
you know slicing and dicing very

00:21:25,919 --> 00:21:30,880
efficient slicing and dicing

00:21:27,600 --> 00:21:32,960
of multi-multi-dimensional data such as

00:21:30,880 --> 00:21:36,080
such as net cdf so we also have the

00:21:32,960 --> 00:21:36,080
coverage capabilities

00:21:37,760 --> 00:21:42,159
we also have tile providers so we talked

00:21:39,679 --> 00:21:44,159
about doing map tiles

00:21:42,159 --> 00:21:45,520
and we've recently implemented tile

00:21:44,159 --> 00:21:48,720
providers so

00:21:45,520 --> 00:21:49,679
if you have a tile set so you generated

00:21:48,720 --> 00:21:52,400
a geospatial

00:21:49,679 --> 00:21:52,960
set of map tiles you can you can just

00:21:52,400 --> 00:21:56,000
simply

00:21:52,960 --> 00:21:57,280
point pyja api either locally on a disk

00:21:56,000 --> 00:22:00,000
where those tiles are

00:21:57,280 --> 00:22:00,799
or you can point it to you know minion

00:22:00,000 --> 00:22:03,039
or some other

00:22:00,799 --> 00:22:05,520
object storage which uh which can be

00:22:03,039 --> 00:22:07,120
remote and by geo api will integrate

00:22:05,520 --> 00:22:09,600
that just the same so that you can

00:22:07,120 --> 00:22:12,880
serve your map tiles out with uh you

00:22:09,600 --> 00:22:14,240
know with confidence

00:22:12,880 --> 00:22:15,679
another part of the project so we

00:22:14,240 --> 00:22:17,200
mentioned around the standards and the

00:22:15,679 --> 00:22:20,880
apis being webby

00:22:17,200 --> 00:22:23,200
um the python api for all of the apis

00:22:20,880 --> 00:22:24,320
provides an html interface a relatively

00:22:23,200 --> 00:22:26,480
simple one

00:22:24,320 --> 00:22:28,640
but it's there and it is extensible you

00:22:26,480 --> 00:22:30,880
can make your own html templates which

00:22:28,640 --> 00:22:32,480
would end up looking um a little bit

00:22:30,880 --> 00:22:34,559
more pretty than what we will see

00:22:32,480 --> 00:22:36,240
in the in the uh in the demo but the

00:22:34,559 --> 00:22:36,960
important part the other important part

00:22:36,240 --> 00:22:38,760
is that

00:22:36,960 --> 00:22:40,240
uh we also support the concepts of

00:22:38,760 --> 00:22:42,640
schema.org and

00:22:40,240 --> 00:22:45,120
linked data so you can go and do

00:22:42,640 --> 00:22:47,360
structured data queries on

00:22:45,120 --> 00:22:48,400
google data set search for example and

00:22:47,360 --> 00:22:50,159
have your data more

00:22:48,400 --> 00:22:55,840
easily accessible through search engines

00:22:50,159 --> 00:22:55,840
as a as a result

00:22:56,799 --> 00:23:01,520
at this point i will move it back over

00:22:58,640 --> 00:23:01,520
to francesco

00:23:03,280 --> 00:23:09,679
thanks tom so uh tom has

00:23:06,559 --> 00:23:12,960
talked about this uh pluggable

00:23:09,679 --> 00:23:15,440
architecture no but um

00:23:12,960 --> 00:23:16,960
what does the core offer in term of

00:23:15,440 --> 00:23:20,080
capabilities

00:23:16,960 --> 00:23:22,799
uh so the the we

00:23:20,080 --> 00:23:23,679
can say that the core capabilities so by

00:23:22,799 --> 00:23:26,799
gpi

00:23:23,679 --> 00:23:30,400
are tidally related to

00:23:26,799 --> 00:23:34,000
the set or new uh generation

00:23:30,400 --> 00:23:34,960
of gc api specification that you want to

00:23:34,000 --> 00:23:38,640
implement

00:23:34,960 --> 00:23:42,400
in in the sense that in the

00:23:38,640 --> 00:23:42,400
config file that

00:23:43,360 --> 00:23:49,679
that the pi gpi rely on

00:23:46,480 --> 00:23:53,039
you can just you can just configure

00:23:49,679 --> 00:23:55,520
the uh open api specification that

00:23:53,039 --> 00:23:56,640
you want to implement so you if you want

00:23:55,520 --> 00:24:00,240
to implement

00:23:56,640 --> 00:24:03,360
ogc avi features versus

00:24:00,240 --> 00:24:07,200
tiles versus coverage it's

00:24:03,360 --> 00:24:10,799
just a matter of uh declare

00:24:07,200 --> 00:24:11,840
those uh endpoints those results and

00:24:10,799 --> 00:24:15,840
declare the

00:24:11,840 --> 00:24:20,400
types of ogc api implementation

00:24:15,840 --> 00:24:20,400
that you want to publish to

00:24:20,559 --> 00:24:25,360
pi gpi so next please

00:24:29,919 --> 00:24:37,440
and this is actually uh this worker uh

00:24:33,960 --> 00:24:41,520
html renderer that i talked

00:24:37,440 --> 00:24:46,559
briefly uh before here um

00:24:41,520 --> 00:24:50,080
it's uh um clearly it's a common uh

00:24:46,559 --> 00:24:53,279
core capability because pi gpi

00:24:50,080 --> 00:24:56,400
can uh offer uh

00:24:53,279 --> 00:25:00,000
in one of each uh

00:24:56,400 --> 00:25:03,200
in one of its endpoints can offer

00:25:00,000 --> 00:25:06,240
the the ability to provide an open

00:25:03,200 --> 00:25:09,919
api document as a

00:25:06,240 --> 00:25:13,440
json encoded payload or

00:25:09,919 --> 00:25:18,400
this uh html page which

00:25:13,440 --> 00:25:22,080
was formerly known as this vlogger page

00:25:18,400 --> 00:25:25,120
and through that i can show you later

00:25:22,080 --> 00:25:28,559
how these work people can

00:25:25,120 --> 00:25:33,039
uh can try uh

00:25:28,559 --> 00:25:36,720
the requests so he can he can he she can

00:25:33,039 --> 00:25:38,320
uh obviously uh requests for uh the

00:25:36,720 --> 00:25:41,600
metadata that

00:25:38,320 --> 00:25:45,520
are going to publish by gpi uh

00:25:41,600 --> 00:25:49,679
or directly call an ogc

00:25:45,520 --> 00:25:53,200
api for feature data set or

00:25:49,679 --> 00:25:57,039
tile vector style or

00:25:53,200 --> 00:25:59,679
different stuff like that

00:25:57,039 --> 00:25:59,679
next please

00:26:02,799 --> 00:26:09,440
so one of the most

00:26:05,919 --> 00:26:10,000
important capability is the dlgc api

00:26:09,440 --> 00:26:13,120
feature

00:26:10,000 --> 00:26:18,400
which is uh actually the most

00:26:13,120 --> 00:26:18,400
mature implementation from the ogc

00:26:19,120 --> 00:26:26,240
and we we will talk about that

00:26:23,200 --> 00:26:29,360
later uh also how

00:26:26,240 --> 00:26:33,360
this specification is going to

00:26:29,360 --> 00:26:36,400
uh spawn excel itself with additional

00:26:33,360 --> 00:26:40,320
uh functionality for the

00:26:36,400 --> 00:26:44,000
the transaction and for advanced the

00:26:40,320 --> 00:26:47,760
sql uh filter mechanism

00:26:44,000 --> 00:26:51,440
um it is worth also to mention that

00:26:47,760 --> 00:26:54,080
pygiu api is already officially

00:26:51,440 --> 00:26:57,679
compliant with this specification

00:26:54,080 --> 00:27:00,240
and we have also a specific automated

00:26:57,679 --> 00:27:03,520
job on our

00:27:00,240 --> 00:27:07,440
ci infrastructure to maintain

00:27:03,520 --> 00:27:10,080
uh these compliance

00:27:07,440 --> 00:27:10,080
next please

00:27:13,440 --> 00:27:20,640
uh recently we have we have introduced

00:27:16,720 --> 00:27:24,480
the ogc api coverages for

00:27:20,640 --> 00:27:29,600
handling multi-dimensional raster data

00:27:24,480 --> 00:27:32,640
with the support of cover json

00:27:29,600 --> 00:27:35,919
payload and for for the metadata

00:27:32,640 --> 00:27:39,200
and also we have implemented

00:27:35,919 --> 00:27:43,360
the next please the ogc api

00:27:39,200 --> 00:27:46,640
api uh tiles uh specification

00:27:43,360 --> 00:27:51,279
uh and uh you you have seen

00:27:46,640 --> 00:27:54,960
uh before that there is a pluggable

00:27:51,279 --> 00:27:58,559
back-end provider for having

00:27:54,960 --> 00:28:02,159
an object storage or a local uh

00:27:58,559 --> 00:28:06,640
directory tree to uh just

00:28:02,159 --> 00:28:10,080
publishing vector tiles

00:28:06,640 --> 00:28:13,120
next please we have

00:28:10,080 --> 00:28:16,559
also processes

00:28:13,120 --> 00:28:19,600
which are supported by uh pi g

00:28:16,559 --> 00:28:22,960
api that allows to deploy

00:28:19,600 --> 00:28:26,320
uh a backend process defined

00:28:22,960 --> 00:28:30,880
as it it

00:28:26,320 --> 00:28:34,559
can be run as a job and eventually

00:28:30,880 --> 00:28:38,159
obviously with a a positive

00:28:34,559 --> 00:28:41,600
uh claim for uh called the

00:28:38,159 --> 00:28:44,799
uh the the run of the job in

00:28:41,600 --> 00:28:50,320
a sink or a sync mode and get back

00:28:44,799 --> 00:28:50,320
the the result next please

00:28:53,520 --> 00:28:57,880
and last but not least we are also

00:28:56,080 --> 00:29:00,640
supporting

00:28:57,880 --> 00:29:03,919
spatiotemporal asset catalog

00:29:00,640 --> 00:29:07,200
which is a metadata open avi based

00:29:03,919 --> 00:29:08,480
steel open avi based specification for a

00:29:07,200 --> 00:29:12,480
catalog

00:29:08,480 --> 00:29:15,039
of raster data

00:29:12,480 --> 00:29:15,039
next please

00:29:19,600 --> 00:29:22,159
next please

00:29:24,840 --> 00:29:30,080
now we

00:29:26,880 --> 00:29:33,760
i want to talk a little bit about the

00:29:30,080 --> 00:29:37,279
the different way to uh deploy

00:29:33,760 --> 00:29:40,640
uh the pi geo api

00:29:37,279 --> 00:29:44,080
there are several way to

00:29:40,640 --> 00:29:47,840
to make it happen and

00:29:44,080 --> 00:29:51,520
and i i would say that obviously

00:29:47,840 --> 00:29:52,399
much depends on what you want to achieve

00:29:51,520 --> 00:29:56,399
and how

00:29:52,399 --> 00:29:57,830
your infrastructure is designed to work

00:29:56,399 --> 00:29:59,440
we have

00:29:57,830 --> 00:30:02,960
[Music]

00:29:59,440 --> 00:30:06,080
several possibilities

00:30:02,960 --> 00:30:09,440
one of these is

00:30:06,080 --> 00:30:12,640
the the ability to use pyja api as

00:30:09,440 --> 00:30:16,080
uh a library uh so

00:30:12,640 --> 00:30:19,279
for example you can install it from pi

00:30:16,080 --> 00:30:22,399
ap or uh the repository

00:30:19,279 --> 00:30:26,159
uh and use as a library for

00:30:22,399 --> 00:30:29,360
your downstream project

00:30:26,159 --> 00:30:32,720
but also by jvi is shipped

00:30:29,360 --> 00:30:36,080
as a native package on

00:30:32,720 --> 00:30:39,600
ubuntu gis and freebsd

00:30:36,080 --> 00:30:42,880
and and obviously uh we

00:30:39,600 --> 00:30:45,390
are also uh supporting uh

00:30:42,880 --> 00:30:46,799
a docker infrastructure and

00:30:45,390 --> 00:30:50,320
[Music]

00:30:46,799 --> 00:30:53,360
and and and then you can just fetch

00:30:50,320 --> 00:30:56,559
uh and

00:30:53,360 --> 00:30:59,679
get a pi gvi image to run

00:30:56,559 --> 00:31:03,360
a container and the the process the

00:30:59,679 --> 00:31:06,799
procedure is quite

00:31:03,360 --> 00:31:09,080
simple uh in fact this is uh uh

00:31:06,799 --> 00:31:10,720
my opinion uh one of the most

00:31:09,080 --> 00:31:13,840
interesting

00:31:10,720 --> 00:31:17,519
option to deploy pi g api because

00:31:13,840 --> 00:31:20,720
it is handy and allows also to

00:31:17,519 --> 00:31:23,760
uh have different to have flexibility

00:31:20,720 --> 00:31:26,000
and uh and to have different solutions

00:31:23,760 --> 00:31:29,760
to scale up by gopi

00:31:26,000 --> 00:31:33,600
uh i will talk uh about it

00:31:29,760 --> 00:31:37,279
in a while uh recently it has um

00:31:33,600 --> 00:31:39,840
it has been added also

00:31:37,279 --> 00:31:39,840
next please

00:31:40,559 --> 00:31:48,960
the capability to

00:31:44,080 --> 00:31:52,080
to have pi gpi from an os geo live

00:31:48,960 --> 00:31:55,519
distribution which is uh

00:31:52,080 --> 00:31:59,440
uh basically a dvd or a

00:31:55,519 --> 00:32:02,240
an image that you can spin up and

00:31:59,440 --> 00:32:04,000
you can find the most important open

00:32:02,240 --> 00:32:07,760
source gis software

00:32:04,000 --> 00:32:12,840
all together for a quick try

00:32:07,760 --> 00:32:16,720
so coming back to the docker

00:32:12,840 --> 00:32:20,080
infrastructure um we say that

00:32:16,720 --> 00:32:20,799
we have uh docker images and those

00:32:20,080 --> 00:32:23,840
images

00:32:20,799 --> 00:32:25,039
are published on docker app so you can

00:32:23,840 --> 00:32:28,640
just

00:32:25,039 --> 00:32:32,000
grab these images

00:32:28,640 --> 00:32:36,000
and and just uh test locally

00:32:32,000 --> 00:32:39,600
your pyja api implementation

00:32:36,000 --> 00:32:42,640
or deploy on your own server

00:32:39,600 --> 00:32:45,760
or natively on the cloud

00:32:42,640 --> 00:32:46,720
so we can support uh cloud

00:32:45,760 --> 00:32:50,640
infrastructure

00:32:46,720 --> 00:32:54,640
like aws azure and google cloud

00:32:50,640 --> 00:32:58,000
platform these are

00:32:54,640 --> 00:33:01,279
allowed to stress the concept of the uh

00:32:58,000 --> 00:33:04,880
horizontal scalability uh

00:33:01,279 --> 00:33:07,919
and give us also some

00:33:04,880 --> 00:33:10,720
uh for ex for instance some corner cases

00:33:07,919 --> 00:33:12,159
where you can come up with a

00:33:10,720 --> 00:33:15,519
configuration

00:33:12,159 --> 00:33:18,720
uh for example with just one resource

00:33:15,519 --> 00:33:22,159
in the pi g api configuration so

00:33:18,720 --> 00:33:25,279
that you can a certain point

00:33:22,159 --> 00:33:28,480
easily set up an auto scaling

00:33:25,279 --> 00:33:31,760
uh for the consumption of your

00:33:28,480 --> 00:33:32,720
web api uh with just one single

00:33:31,760 --> 00:33:35,200
collection

00:33:32,720 --> 00:33:36,480
and we're gonna get cut off in about two

00:33:35,200 --> 00:33:39,840
minutes right

00:33:36,480 --> 00:33:42,640
okay thank you i'll skip a little bit

00:33:39,840 --> 00:33:42,640
so next please

00:33:46,720 --> 00:33:53,360
and okay we can skip this is just uh

00:33:50,159 --> 00:33:56,480
an example of the command to have uh

00:33:53,360 --> 00:33:59,519
quickly a docker image uh up running

00:33:56,480 --> 00:34:00,240
uh we have several production instances

00:33:59,519 --> 00:34:03,279
i don't know if

00:34:00,240 --> 00:34:05,519
tomorrow want to talk about that

00:34:03,279 --> 00:34:07,279
i'm wondering whether uh yeah we have

00:34:05,519 --> 00:34:08,800
many production instances here at the

00:34:07,279 --> 00:34:10,159
weather service of canada as well as

00:34:08,800 --> 00:34:11,760
other organizations

00:34:10,159 --> 00:34:14,079
i'm wondering whether with the time left

00:34:11,760 --> 00:34:17,440
we should do like some q a

00:34:14,079 --> 00:34:18,720
question and answer if anybody has any

00:34:17,440 --> 00:34:21,839
questions otherwise we can use the

00:34:18,720 --> 00:34:21,839
remaining time for a demo

00:34:25,440 --> 00:34:29,119
don't see any questions in chat i have

00:34:27,359 --> 00:34:30,159
questions but maybe the demo would be

00:34:29,119 --> 00:34:32,480
most uh

00:34:30,159 --> 00:34:33,440
appreciated you can you can do it in two

00:34:32,480 --> 00:34:36,800
minutes because i'm

00:34:33,440 --> 00:34:39,200
gonna have to go to the next session

00:34:36,800 --> 00:34:39,200
yeah sure

00:34:41,839 --> 00:34:49,839
are you able to share your screen

00:34:43,119 --> 00:34:49,839
franchise move yeah

00:34:52,560 --> 00:34:57,919
oh sorry are you seeing my screen

00:34:58,000 --> 00:35:03,119
yeah okay this is the uh actually the

00:35:01,680 --> 00:35:06,160
landing page

00:35:03,119 --> 00:35:09,040
of pyja api uh instance

00:35:06,160 --> 00:35:10,079
where i have configured the just two

00:35:09,040 --> 00:35:13,359
collection

00:35:10,079 --> 00:35:14,800
uh in this landing page we have the

00:35:13,359 --> 00:35:18,400
collection that

00:35:14,800 --> 00:35:21,920
can or can have as

00:35:18,400 --> 00:35:26,480
a different back-end providers to

00:35:21,920 --> 00:35:30,320
publish features rather than

00:35:26,480 --> 00:35:33,200
tiles or coverages and there is also

00:35:30,320 --> 00:35:34,079
the and this is also the entry point to

00:35:33,200 --> 00:35:37,520
bros

00:35:34,079 --> 00:35:41,119
uh spatial temporal asset catalog

00:35:37,520 --> 00:35:43,910
or processes and obviously we have the

00:35:41,119 --> 00:35:45,599
uh swagger page or the json

00:35:43,910 --> 00:35:48,720
[Music]

00:35:45,599 --> 00:35:52,160
format with the open api document

00:35:48,720 --> 00:35:55,440
if you if if i go here

00:35:52,160 --> 00:35:59,119
for example i have two essay

00:35:55,440 --> 00:36:02,720
to resources one is lakes

00:35:59,119 --> 00:36:06,160
uh and for example if i go here

00:36:02,720 --> 00:36:09,839
i can try out these

00:36:06,160 --> 00:36:13,280
resources i ask for a payload

00:36:09,839 --> 00:36:14,640
jasmine format i i'm going to execute

00:36:13,280 --> 00:36:18,400
the request and

00:36:14,640 --> 00:36:22,400
i go back uh the links for

00:36:18,400 --> 00:36:26,160
the the the nested the resources

00:36:22,400 --> 00:36:31,280
of this uh collection so

00:36:26,160 --> 00:36:31,280
back in the actual html page

00:36:33,040 --> 00:36:40,320
this is something that that can happen

00:36:36,560 --> 00:36:43,119
in the rendered page

00:36:40,320 --> 00:36:44,720
so here i'm going to ask the same

00:36:43,119 --> 00:36:49,119
request as before

00:36:44,720 --> 00:36:53,040
but i'm going to ask the html format

00:36:49,119 --> 00:36:56,480
and if i go here in the view

00:36:53,040 --> 00:36:59,839
i'm going just to ask okay uh by gpi

00:36:56,480 --> 00:37:03,200
give all all the

00:36:59,839 --> 00:37:06,400
uh feature that

00:37:03,200 --> 00:37:07,359
belongs to that belong to this

00:37:06,400 --> 00:37:10,720
collection

00:37:07,359 --> 00:37:14,960
and uh i i just uh

00:37:10,720 --> 00:37:18,560
uh get uh the the paginated

00:37:14,960 --> 00:37:22,000
result in the html page

00:37:18,560 --> 00:37:25,040
but obviously i can ask also

00:37:22,000 --> 00:37:26,160
the jason formatted payload and i get

00:37:25,040 --> 00:37:29,680
back

00:37:26,160 --> 00:37:33,119
obviously a geojson

00:37:29,680 --> 00:37:33,119
just before

00:37:34,400 --> 00:37:38,800
the end i want just to display in this

00:37:37,280 --> 00:37:42,480
specific collection i

00:37:38,800 --> 00:37:44,560
have also configured oh sorry

00:37:42,480 --> 00:37:46,320
there isn't the vector tiles here

00:37:44,560 --> 00:37:49,520
because probably the back end

00:37:46,320 --> 00:37:53,520
is is broken or is down

00:37:49,520 --> 00:37:56,079
but here obviously uh i'm going to ask

00:37:53,520 --> 00:37:56,880
uh for this specific collection which

00:37:56,079 --> 00:37:59,920
has

00:37:56,880 --> 00:38:03,040
a because a bacon provider for

00:37:59,920 --> 00:38:06,160
tiles to return the uh

00:38:03,040 --> 00:38:08,800
the configured the uh map

00:38:06,160 --> 00:38:09,839
map box vector tile for for the

00:38:08,800 --> 00:38:12,960
collection

00:38:09,839 --> 00:38:17,359
yeah and and so uh uh

00:38:12,960 --> 00:38:20,640
i can say that here we can

00:38:17,359 --> 00:38:23,839
obviously uh trying to uh

00:38:20,640 --> 00:38:28,000
match uh the the

00:38:23,839 --> 00:38:31,440
old let's say the legacy uh web services

00:38:28,000 --> 00:38:36,000
so uh uh both the wfs

00:38:31,440 --> 00:38:39,920
and the w ms but in a modern

00:38:36,000 --> 00:38:42,880
as a modern result with a more

00:38:39,920 --> 00:38:47,839
performant performance way with the

00:38:42,880 --> 00:38:47,839
vector tiles

00:38:50,640 --> 00:38:58,000
i think uh probably

00:38:54,560 --> 00:39:01,440
we don't have a much more time to

00:38:58,000 --> 00:39:01,440
go forward

00:39:04,960 --> 00:39:09,520
sounds good i guess um people are on to

00:39:08,000 --> 00:39:12,880
the next chapter

00:39:09,520 --> 00:39:15,440
if anybody else has any um questions

00:39:12,880 --> 00:39:16,560
feel free to uh feel free to find us

00:39:15,440 --> 00:39:19,760
we're on the getter chat

00:39:16,560 --> 00:39:21,280
where we posted it uh um we posted it

00:39:19,760 --> 00:39:23,680
somewhere here in the chat but just look

00:39:21,280 --> 00:39:27,200
for pyja api getter and uh

00:39:23,680 --> 00:39:30,480
probably sorry tom probably we can show

00:39:27,200 --> 00:39:33,920
the the last presentation

00:39:30,480 --> 00:39:42,240
slide with some links

00:39:33,920 --> 00:39:45,599
good idea

00:39:42,240 --> 00:39:45,599
it's mine sorry

00:39:51,920 --> 00:39:55,040
okay are you seeing my screen so here we

00:39:54,480 --> 00:39:58,079
are

00:39:55,040 --> 00:40:01,359
several links i think the more

00:39:58,079 --> 00:40:04,800
important is the guitar chart here

00:40:01,359 --> 00:40:08,560
where people again ask for help

00:40:04,800 --> 00:40:10,880
there is the main list and obviously the

00:40:08,560 --> 00:40:13,839
docker infrastructure where

00:40:10,880 --> 00:40:14,720
you can get the pi g api images and

00:40:13,839 --> 00:40:17,839
there are

00:40:14,720 --> 00:40:21,440
uh links for the demo uh

00:40:17,839 --> 00:40:22,400
i would say that it's very interesting

00:40:21,440 --> 00:40:25,200
to

00:40:22,400 --> 00:40:26,000
have a look at the demo we where there

00:40:25,200 --> 00:40:30,400
is

00:40:26,000 --> 00:40:33,440
a covet 19 demonstration

00:40:30,400 --> 00:40:37,839
with a backend

00:40:33,440 --> 00:40:41,280
of an esri arcgis

00:40:37,839 --> 00:40:44,880
remote server and also a csv

00:40:41,280 --> 00:40:48,000
remote file from a github

00:40:44,880 --> 00:40:51,359
repository and

00:40:48,000 --> 00:40:55,520
i think that that's all

00:40:51,359 --> 00:40:57,440
right okay thanks francesco and thanks

00:40:55,520 --> 00:40:59,359
for everybody uh

00:40:57,440 --> 00:41:00,960
thanks for for for listening and i hope

00:40:59,359 --> 00:41:02,880
everybody enjoys uh the rest of the

00:41:00,960 --> 00:41:04,000
geospatial track and the rest of uh

00:41:02,880 --> 00:41:07,119
apache con

00:41:04,000 --> 00:41:21,839
thank you yeah me too thank you

00:41:07,119 --> 00:41:21,839
thanks everybody

00:41:50,480 --> 00:41:52,560

YouTube URL: https://www.youtube.com/watch?v=F-rsOsjA3-o


