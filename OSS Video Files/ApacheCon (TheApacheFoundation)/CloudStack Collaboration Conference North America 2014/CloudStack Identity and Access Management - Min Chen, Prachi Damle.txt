Title: CloudStack Identity and Access Management - Min Chen, Prachi Damle
Publication date: 2014-04-29
Playlist: CloudStack Collaboration Conference North America 2014
Description: 
	CloudStack Collaboration Conference North America 2014
Captions: 
	00:00:00,000 --> 00:00:05,970
okay let's start it good morning

00:00:03,780 --> 00:00:08,220
everyone welcome to our last session

00:00:05,970 --> 00:00:11,700
before lunch just make sure we don't

00:00:08,220 --> 00:00:14,790
talk to none to make you hungry my name

00:00:11,700 --> 00:00:17,789
is Minton this is my coworker Prachi

00:00:14,790 --> 00:00:19,949
domine we both from Citrix and work on

00:00:17,789 --> 00:00:22,710
the Apache CloudStack of open source

00:00:19,949 --> 00:00:26,730
project today we're going to present the

00:00:22,710 --> 00:00:29,519
new project we we recently working for

00:00:26,730 --> 00:00:34,010
the 4.4 that's classic identity and

00:00:29,519 --> 00:00:37,110
access management system record I am

00:00:34,010 --> 00:00:39,000
this is agenda for today first I will

00:00:37,110 --> 00:00:41,010
describe the background of this project

00:00:39,000 --> 00:00:42,960
when you talk about what is the

00:00:41,010 --> 00:00:45,629
limitation of current CloudStack are

00:00:42,960 --> 00:00:48,690
back system was the drawback there and

00:00:45,629 --> 00:00:51,870
then come talk about why we come up with

00:00:48,690 --> 00:00:55,230
this idea to work on this IM and then we

00:00:51,870 --> 00:00:57,750
describe the goal we want to achieve for

00:00:55,230 --> 00:00:59,670
this new feature and then give you some

00:00:57,750 --> 00:01:02,670
brief overview of the architecture

00:00:59,670 --> 00:01:04,409
design and next i will just hand over to

00:01:02,670 --> 00:01:06,869
practice is bowing to some

00:01:04,409 --> 00:01:09,450
implementation details and we will

00:01:06,869 --> 00:01:12,020
describe the several use cases that that

00:01:09,450 --> 00:01:16,200
can be implemented by this new IM model

00:01:12,020 --> 00:01:18,780
finally will distance ever like next

00:01:16,200 --> 00:01:22,159
steps because we owning finish the phase

00:01:18,780 --> 00:01:24,630
one provided the rpac foundation piece

00:01:22,159 --> 00:01:27,330
there several task remaining to

00:01:24,630 --> 00:01:32,850
implement this foundation into class

00:01:27,330 --> 00:01:35,729
deck for several areas so now let's talk

00:01:32,850 --> 00:01:38,970
about background cluster have some

00:01:35,729 --> 00:01:41,159
access control vicinities right now but

00:01:38,970 --> 00:01:43,229
they are very limited so if you use a

00:01:41,159 --> 00:01:47,070
classic you should know there's some

00:01:43,229 --> 00:01:49,710
fixed rows like ruderman domain ring and

00:01:47,070 --> 00:01:52,200
resource owners they have very pretty x

00:01:49,710 --> 00:01:55,200
access control you cannot change it and

00:01:52,200 --> 00:01:58,049
also we cannot provide support for you

00:01:55,200 --> 00:02:00,479
to create a custom low and also there

00:01:58,049 --> 00:02:03,240
are some special resources for example

00:02:00,479 --> 00:02:06,710
the cheryl at work affinity groups in

00:02:03,240 --> 00:02:09,300
the service near we have very hard coded

00:02:06,710 --> 00:02:11,490
access control business logic built in

00:02:09,300 --> 00:02:13,560
and if you want to change anything

00:02:11,490 --> 00:02:17,010
here you have to go to delve into that

00:02:13,560 --> 00:02:18,600
code to change there in the 4.2 we also

00:02:17,010 --> 00:02:20,760
have introduced a feature called a

00:02:18,600 --> 00:02:22,860
dedicated resource feature that can do

00:02:20,760 --> 00:02:24,750
some granting permission but that

00:02:22,860 --> 00:02:29,610
granting permission by dedicating

00:02:24,750 --> 00:02:31,710
resources very limited so I consider all

00:02:29,610 --> 00:02:35,790
these limitations we thought about

00:02:31,710 --> 00:02:39,510
proposed a new I I am model to work with

00:02:35,790 --> 00:02:42,300
caustic the goal is the for us is trying

00:02:39,510 --> 00:02:44,520
to provide a true pluggable I am service

00:02:42,300 --> 00:02:48,810
here's their tours I want to highlight

00:02:44,520 --> 00:02:51,810
here i am and a service so let's talk

00:02:48,810 --> 00:02:54,870
about what is I am Here I am is sure

00:02:51,810 --> 00:02:58,590
Stanford identity access and management

00:02:54,870 --> 00:03:00,690
system so think about simply put this is

00:02:58,590 --> 00:03:02,400
just like a security guard when the

00:03:00,690 --> 00:03:04,050
people coming they want to access your

00:03:02,400 --> 00:03:06,300
system resource they want to some

00:03:04,050 --> 00:03:08,670
actions on top of do you give him

00:03:06,300 --> 00:03:11,040
permission to allow or deny that's the

00:03:08,670 --> 00:03:13,830
functionality for him so this picture

00:03:11,040 --> 00:03:15,960
describes some common taxonomies using

00:03:13,830 --> 00:03:18,450
the IM there are some principles and

00:03:15,960 --> 00:03:20,880
there's some resource you want to work

00:03:18,450 --> 00:03:23,940
on these resources so how to determine

00:03:20,880 --> 00:03:26,340
that you define several policies this

00:03:23,940 --> 00:03:29,730
policy you can sync up with a set of

00:03:26,340 --> 00:03:31,860
permissions each permission describe who

00:03:29,730 --> 00:03:34,200
that's principal what action you can

00:03:31,860 --> 00:03:36,570
work on and what kind of resource in

00:03:34,200 --> 00:03:38,340
some fancy case you can even define in

00:03:36,570 --> 00:03:41,370
their word conditions you can do that

00:03:38,340 --> 00:03:44,820
and also in I am you also can manage

00:03:41,370 --> 00:03:47,610
users through IM group so that the

00:03:44,820 --> 00:03:49,110
admins can centrally control and easily

00:03:47,610 --> 00:03:51,810
manage it granted permission to a group

00:03:49,110 --> 00:03:54,210
flow account and there's a letter actual

00:03:51,810 --> 00:03:56,070
concept core alone just like a picture

00:03:54,210 --> 00:03:58,310
shows there like a principle you can

00:03:56,070 --> 00:04:02,160
impersonate a row to do some action and

00:03:58,310 --> 00:04:03,720
this allergy is just like sometimes the

00:04:02,160 --> 00:04:05,460
parallel in mom may be wondering

00:04:03,720 --> 00:04:10,140
personally their kids to take a pic on

00:04:05,460 --> 00:04:12,390
their facebook conversation so then

00:04:10,140 --> 00:04:14,280
mapped is map that model to our cross

00:04:12,390 --> 00:04:16,080
leg I a model in a face my

00:04:14,280 --> 00:04:18,840
implementation we implement all the

00:04:16,080 --> 00:04:21,930
concept there except the role model so

00:04:18,840 --> 00:04:24,000
we didn't implement impersonation but in

00:04:21,930 --> 00:04:24,560
a principal in the class tag actually

00:04:24,000 --> 00:04:27,110
map to

00:04:24,560 --> 00:04:29,000
the classic account if you use class

00:04:27,110 --> 00:04:31,160
that you will know that permission

00:04:29,000 --> 00:04:33,320
control is an intern at the account

00:04:31,160 --> 00:04:35,570
level not on the user level the user

00:04:33,320 --> 00:04:37,639
only provided login credentials so

00:04:35,570 --> 00:04:40,669
principally our system is account an

00:04:37,639 --> 00:04:42,830
account can be assigned to several group

00:04:40,669 --> 00:04:44,990
you can belong to multiple groups then

00:04:42,830 --> 00:04:47,540
you can define a policy on top you can

00:04:44,990 --> 00:04:49,760
attach one or more policies to a group

00:04:47,540 --> 00:04:51,620
also we introduce you can define a

00:04:49,760 --> 00:04:54,740
policy attached direct to your account

00:04:51,620 --> 00:04:56,510
that's the error there in case you want

00:04:54,740 --> 00:05:00,830
earning chrome permission to individual

00:04:56,510 --> 00:05:03,620
account not a group of people so next

00:05:00,830 --> 00:05:05,930
what is the service we talk about here's

00:05:03,620 --> 00:05:09,410
we want to implement I am as applicable

00:05:05,930 --> 00:05:11,300
service so just like a SS a.m. service

00:05:09,410 --> 00:05:13,220
we won't follow the service oriented

00:05:11,300 --> 00:05:16,220
architecture so that we have a loosely

00:05:13,220 --> 00:05:18,320
coupled with elastic core we won hosted

00:05:16,220 --> 00:05:21,710
I am server as independent service

00:05:18,320 --> 00:05:24,620
running at a special different this

00:05:21,710 --> 00:05:27,560
server listening at a certain point so

00:05:24,620 --> 00:05:29,419
that the class that go you utter portal

00:05:27,560 --> 00:05:34,190
service can be caused to do access

00:05:29,419 --> 00:05:36,590
checking this I am service consistency

00:05:34,190 --> 00:05:39,830
to component one we call the IM server

00:05:36,590 --> 00:05:41,660
the I record I am plugging I am server

00:05:39,830 --> 00:05:44,690
you can think about acing implementation

00:05:41,660 --> 00:05:47,360
of a pure I am taxonomy I described in

00:05:44,690 --> 00:05:49,310
the first picture this one taxonomy have

00:05:47,360 --> 00:05:50,780
nothing to do with classic terminology

00:05:49,310 --> 00:05:53,990
so they don't understand cross that

00:05:50,780 --> 00:05:57,080
terminology and in this release we

00:05:53,990 --> 00:06:01,039
provide other pups I am implementation

00:05:57,080 --> 00:06:03,680
based on our IM schema I would just show

00:06:01,039 --> 00:06:05,330
you in a minute and for the third party

00:06:03,680 --> 00:06:07,669
vendors you actually can implement in

00:06:05,330 --> 00:06:10,160
your own IM server so for example you

00:06:07,669 --> 00:06:11,750
want to use ad or tab protocol then you

00:06:10,160 --> 00:06:14,600
can just implement that I am server

00:06:11,750 --> 00:06:16,419
interface in our code then that can be

00:06:14,600 --> 00:06:20,030
easily for covering the cross back and

00:06:16,419 --> 00:06:23,600
to to work with cross tag we provide a

00:06:20,030 --> 00:06:26,330
letter plugin I plugging I am plugging

00:06:23,600 --> 00:06:28,700
to integrate with class tag this is just

00:06:26,330 --> 00:06:31,820
classic plug-in using the plugin

00:06:28,700 --> 00:06:33,229
framework and calling work so let the

00:06:31,820 --> 00:06:35,419
cross section calling back through the

00:06:33,229 --> 00:06:36,750
captor interface in our case we

00:06:35,419 --> 00:06:39,900
specifically

00:06:36,750 --> 00:06:42,480
define a three adapter interface why is

00:06:39,900 --> 00:06:44,700
the API checker the other secure checker

00:06:42,480 --> 00:06:47,370
and there's query selector this your

00:06:44,700 --> 00:06:50,610
interface you can implement and also we

00:06:47,370 --> 00:06:53,640
provide a new IP I am plugging api's so

00:06:50,610 --> 00:06:58,500
that any client can issue to create a

00:06:53,640 --> 00:07:00,210
group policy grant permission so let's

00:06:58,500 --> 00:07:01,740
see how these two component work

00:07:00,210 --> 00:07:04,530
together and how they interact with

00:07:01,740 --> 00:07:06,420
class tag on this diagram here you can

00:07:04,530 --> 00:07:08,430
see on the left-hand side you have class

00:07:06,420 --> 00:07:10,800
that core and they have api and the

00:07:08,430 --> 00:07:12,780
server on the right-hand side that's the

00:07:10,800 --> 00:07:16,440
i am service i'm talking about in

00:07:12,780 --> 00:07:18,810
acrostic core we define a public adapter

00:07:16,440 --> 00:07:20,580
interface that's API checker and secure

00:07:18,810 --> 00:07:23,490
checker and the query selector on the

00:07:20,580 --> 00:07:26,130
right hand side I am a service on the

00:07:23,490 --> 00:07:27,930
server side they just implement that the

00:07:26,130 --> 00:07:30,450
database schema I'm just talking about

00:07:27,930 --> 00:07:32,970
that the server you implement your IM

00:07:30,450 --> 00:07:35,220
server interface they also can provide I

00:07:32,970 --> 00:07:37,320
am server API in case some third-party

00:07:35,220 --> 00:07:39,180
want to directly talk to your IM server

00:07:37,320 --> 00:07:42,300
is that goes through the plucking any

00:07:39,180 --> 00:07:45,150
class tech then caustic lucky I am

00:07:42,300 --> 00:07:47,580
plug-in interact with I am server it

00:07:45,150 --> 00:07:50,040
provide concrete implementation of this

00:07:47,580 --> 00:07:52,710
three adapter interface we called a row

00:07:50,040 --> 00:07:55,169
paste API checker low based and tit an

00:07:52,710 --> 00:07:58,919
entity checker and low base the query

00:07:55,169 --> 00:08:01,919
selector so basically applying plug-in

00:07:58,919 --> 00:08:08,460
wheel cartoon i am a server api to issue

00:08:01,919 --> 00:08:12,030
any API requests from CloudStack this is

00:08:08,460 --> 00:08:14,070
a simple schema you eat extra basic

00:08:12,030 --> 00:08:16,650
database representation for the iron

00:08:14,070 --> 00:08:19,080
model i just described before that's our

00:08:16,650 --> 00:08:21,780
other pod epoxy implementation for the

00:08:19,080 --> 00:08:23,580
IM server you can see here we have

00:08:21,780 --> 00:08:26,070
account and euro test from the cloth

00:08:23,580 --> 00:08:28,590
stack itself the database table an

00:08:26,070 --> 00:08:31,050
account can be on to several groups and

00:08:28,590 --> 00:08:33,060
there's a group and the policy you can

00:08:31,050 --> 00:08:35,400
define and a policy and the permission

00:08:33,060 --> 00:08:37,530
is a one-to-many relationship then you

00:08:35,400 --> 00:08:39,330
can attach the policy to the group

00:08:37,530 --> 00:08:41,250
that's through the first link you can

00:08:39,330 --> 00:08:43,710
attach a policy through account that's a

00:08:41,250 --> 00:08:46,950
meter link so our implementation purely

00:08:43,710 --> 00:08:49,080
based on this database schema any

00:08:46,950 --> 00:08:50,089
third-party you can actually define your

00:08:49,080 --> 00:08:53,089
own schema

00:08:50,089 --> 00:08:54,860
implement that interface I am a server

00:08:53,089 --> 00:08:56,870
interface so that you can plug into

00:08:54,860 --> 00:09:00,019
class stack or host or you as your own

00:08:56,870 --> 00:09:01,819
am server for your business use and also

00:09:00,019 --> 00:09:04,100
you can also define your schema instead

00:09:01,819 --> 00:09:08,209
of using this table base you can use the

00:09:04,100 --> 00:09:10,339
XML JSON blob whatsoever next I would

00:09:08,209 --> 00:09:14,800
just hand over to project to talk about

00:09:10,339 --> 00:09:14,800
I the plug-in details and use cases

00:09:24,519 --> 00:09:30,230
hello ribbon I am prachee dumbly working

00:09:27,860 --> 00:09:32,930
on CloudStack since four years working

00:09:30,230 --> 00:09:35,749
at citrix and with men i am developing

00:09:32,930 --> 00:09:39,199
the i am feature so now i will take

00:09:35,749 --> 00:09:41,569
forward the presentation by diving into

00:09:39,199 --> 00:09:44,509
some implementation details of the IM

00:09:41,569 --> 00:09:47,389
plug-in component now has been talked

00:09:44,509 --> 00:09:50,480
about the eye on server is based on true

00:09:47,389 --> 00:09:52,759
IM concepts it does not understand any

00:09:50,480 --> 00:09:54,290
of the CloudStack terminologies so we

00:09:52,759 --> 00:09:57,170
need some connector to work with

00:09:54,290 --> 00:10:00,259
CloudStack the plug-in acts like a

00:09:57,170 --> 00:10:03,439
connector it understands the CloudStack

00:10:00,259 --> 00:10:06,230
terminologies and it integrates with

00:10:03,439 --> 00:10:09,079
cloudstack by implementing the adapter

00:10:06,230 --> 00:10:13,069
framework that is available also it

00:10:09,079 --> 00:10:15,050
exposes some I am api's and these api is

00:10:13,069 --> 00:10:17,779
follow the pluggable service model of

00:10:15,050 --> 00:10:21,559
cloudstack and because of which these

00:10:17,779 --> 00:10:25,370
api is they are exposed to the same

00:10:21,559 --> 00:10:26,990
endpoint as cloudstack eps then there

00:10:25,370 --> 00:10:29,959
are three adapters that the plug-in

00:10:26,990 --> 00:10:32,569
involves api checker security checker

00:10:29,959 --> 00:10:35,470
and query selector each serving

00:10:32,569 --> 00:10:35,470
different purposes

00:10:36,730 --> 00:10:43,680
now about the I am EP is now the plug-in

00:10:40,570 --> 00:10:47,920
has to act as a connector between

00:10:43,680 --> 00:10:50,500
cloudstack and the IM server so it has

00:10:47,920 --> 00:10:54,029
to reflect the CloudStack model into the

00:10:50,500 --> 00:10:57,790
IM model for that the api's are

00:10:54,029 --> 00:10:59,860
important consider the CloudStack

00:10:57,790 --> 00:11:04,320
account which is a pure CloudStack

00:10:59,860 --> 00:11:09,670
entity then we have api's to create

00:11:04,320 --> 00:11:12,550
delete and list I am groups then we need

00:11:09,670 --> 00:11:16,120
api's to integrate with CloudStack

00:11:12,550 --> 00:11:18,610
account and the IM Group entity so add

00:11:16,120 --> 00:11:21,959
account to I am group and remove account

00:11:18,610 --> 00:11:25,690
from I am group will serve this purpose

00:11:21,959 --> 00:11:27,730
another I am entity is I am policy we

00:11:25,690 --> 00:11:31,720
have create delete and this time

00:11:27,730 --> 00:11:34,329
policies then there's the I am

00:11:31,720 --> 00:11:37,180
permission entity for that we have a

00:11:34,329 --> 00:11:41,410
dyin permission to the policy and remove

00:11:37,180 --> 00:11:43,389
I am permission from the IM policy now

00:11:41,410 --> 00:11:45,850
then the policies have to be attached to

00:11:43,389 --> 00:11:48,579
the group so attached I on policy and

00:11:45,850 --> 00:11:52,959
remove I am policy from the groups of

00:11:48,579 --> 00:11:54,760
this purpose lastly we also have a

00:11:52,959 --> 00:11:57,430
facility to directly attached the

00:11:54,760 --> 00:12:00,699
policies and permissions to club to the

00:11:57,430 --> 00:12:03,040
cloud stock account so attached I am

00:12:00,699 --> 00:12:06,579
policy to account and remove I am policy

00:12:03,040 --> 00:12:09,970
from account api's provide this facility

00:12:06,579 --> 00:12:12,339
so this way the IM api's of the plug-in

00:12:09,970 --> 00:12:14,699
will try to bind together the cloudstack

00:12:12,339 --> 00:12:17,410
terminology with the IM terminologies

00:12:14,699 --> 00:12:20,110
for example cloud sat works with

00:12:17,410 --> 00:12:24,160
accounts and domains and it has a it

00:12:20,110 --> 00:12:26,829
always works with a domain hierarchy but

00:12:24,160 --> 00:12:29,949
in i am terminology there is no domain

00:12:26,829 --> 00:12:33,699
concept but we have IM groups so to

00:12:29,949 --> 00:12:36,790
model that the create i am group api

00:12:33,699 --> 00:12:39,190
takes in the domain ID so it understands

00:12:36,790 --> 00:12:41,260
cloudstack domain concept and then it

00:12:39,190 --> 00:12:43,870
converts the domain and loads the domain

00:12:41,260 --> 00:12:47,769
and gets the path of that domain and

00:12:43,870 --> 00:12:48,850
sets it to the group in the IM server so

00:12:47,769 --> 00:12:51,250
ever doesn't understand

00:12:48,850 --> 00:12:53,380
the domain hierarchy but using the path

00:12:51,250 --> 00:12:58,540
we can model the hierarchy in the

00:12:53,380 --> 00:13:01,870
plug-in next I will talk about the

00:12:58,540 --> 00:13:05,680
adapters first one is the API checker

00:13:01,870 --> 00:13:08,079
adapter interface of CloudStack a goal

00:13:05,680 --> 00:13:12,190
of this adapter is to check if a certain

00:13:08,079 --> 00:13:15,220
user can invoke a given API now the

00:13:12,190 --> 00:13:17,440
current implementation of a pH a current

00:13:15,220 --> 00:13:20,740
CloudStack works with the static rules

00:13:17,440 --> 00:13:23,380
and commands work properties file now

00:13:20,740 --> 00:13:26,100
Cloud sac has three to four default

00:13:23,380 --> 00:13:30,370
roles root admin resource domain admin

00:13:26,100 --> 00:13:33,399
domain admin and user and which role can

00:13:30,370 --> 00:13:35,560
invoke which API this has been pre baked

00:13:33,399 --> 00:13:37,899
into a property file which is the

00:13:35,560 --> 00:13:41,680
commands road properties so as you can

00:13:37,899 --> 00:13:44,199
see a start virtual machine API can be

00:13:41,680 --> 00:13:47,519
invoked by all the rules so this is the

00:13:44,199 --> 00:13:50,410
bitmap value for start virtual machine

00:13:47,519 --> 00:13:52,329
now the limitation of this is we

00:13:50,410 --> 00:13:54,250
definitely cannot add any custom role

00:13:52,329 --> 00:13:57,790
and assign permissions to it in this

00:13:54,250 --> 00:14:01,089
model so the iron feature provides our

00:13:57,790 --> 00:14:03,279
implementation to overcome that the role

00:14:01,089 --> 00:14:07,420
based API access checker implements the

00:14:03,279 --> 00:14:10,589
APA checker interface and it on startup

00:14:07,420 --> 00:14:14,139
in order to model cloud stacks current

00:14:10,589 --> 00:14:15,790
commands road properties design it loads

00:14:14,139 --> 00:14:18,850
the permissions from the property file

00:14:15,790 --> 00:14:21,870
it creates default groups and default

00:14:18,850 --> 00:14:24,040
policies for the cloudstack roles and

00:14:21,870 --> 00:14:26,889
assigns these permissions into these

00:14:24,040 --> 00:14:30,069
policies then when a check access call

00:14:26,889 --> 00:14:32,860
happens then role-based api access

00:14:30,069 --> 00:14:35,110
checker will list the group for the

00:14:32,860 --> 00:14:37,660
given user list the policies of that

00:14:35,110 --> 00:14:39,790
group then check the permissions which

00:14:37,660 --> 00:14:43,029
are been assigned to that policy and if

00:14:39,790 --> 00:14:49,509
the permissions allow invocation of this

00:14:43,029 --> 00:14:51,310
API then the qual can go through so this

00:14:49,509 --> 00:14:53,680
is an illustration how the default

00:14:51,310 --> 00:14:58,089
CloudStack policies are mod end into the

00:14:53,680 --> 00:15:00,040
IM schema by the plug-in so this is a

00:14:58,089 --> 00:15:01,290
fancy commands or properties file

00:15:00,040 --> 00:15:05,279
illustration

00:15:01,290 --> 00:15:07,769
it says something like API name equal to

00:15:05,279 --> 00:15:11,190
what value for giving the permission so

00:15:07,769 --> 00:15:14,940
start virtual machine is 15 API checker

00:15:11,190 --> 00:15:17,759
when it starts up loads the default

00:15:14,940 --> 00:15:20,490
groups creates default groups creates

00:15:17,759 --> 00:15:23,360
default policies and then for each API

00:15:20,490 --> 00:15:25,889
it creates a permission entity and

00:15:23,360 --> 00:15:29,310
assign set to the respective policies

00:15:25,889 --> 00:15:33,959
that have been given permission in the

00:15:29,310 --> 00:15:36,360
commands or properties thus if an API is

00:15:33,959 --> 00:15:39,449
only allowed for say root admin migrate

00:15:36,360 --> 00:15:41,009
virtual machine is such API then it will

00:15:39,449 --> 00:15:46,319
be assigned only to the root admin

00:15:41,009 --> 00:15:49,980
policy next adapter for the plug-in is

00:15:46,319 --> 00:15:53,430
security checker now this interface of

00:15:49,980 --> 00:15:56,519
CloudStack the goal for it is to check

00:15:53,430 --> 00:15:59,130
whether given a collar and an entity if

00:15:56,519 --> 00:16:01,709
a certain action can be performed on

00:15:59,130 --> 00:16:03,660
that entity by the collar so difference

00:16:01,709 --> 00:16:07,170
is that it checks entity based

00:16:03,660 --> 00:16:09,360
permission current implementation of

00:16:07,170 --> 00:16:11,459
CloudStack is a domain checker which

00:16:09,360 --> 00:16:15,990
only checks for account ownership or

00:16:11,459 --> 00:16:17,910
placement in the domain tree but again

00:16:15,990 --> 00:16:21,959
the limitation is does not support

00:16:17,910 --> 00:16:24,240
custom permissions now i am feature

00:16:21,959 --> 00:16:27,209
introduces the role based entity access

00:16:24,240 --> 00:16:29,670
checker it again checks policies and

00:16:27,209 --> 00:16:33,149
permissions for the entity and access

00:16:29,670 --> 00:16:36,930
type by looking at the schema if a

00:16:33,149 --> 00:16:39,209
permission is found for the given access

00:16:36,930 --> 00:16:42,870
type action on that given entity type

00:16:39,209 --> 00:16:45,389
then the call can proceed now currently

00:16:42,870 --> 00:16:48,800
we only work with allow kind of

00:16:45,389 --> 00:16:52,399
permissions we don't support yet

00:16:48,800 --> 00:16:55,050
specifying permissions to deny something

00:16:52,399 --> 00:16:57,180
this is because our policy evaluation

00:16:55,050 --> 00:16:58,620
logic would then have to consider

00:16:57,180 --> 00:17:01,800
priorities if there are multiple

00:16:58,620 --> 00:17:04,199
permissions on the same entity types so

00:17:01,800 --> 00:17:08,280
that will be something for our phase 2

00:17:04,199 --> 00:17:10,230
model now access type so as you can see

00:17:08,280 --> 00:17:13,470
there are two parameters access type and

00:17:10,230 --> 00:17:14,290
action so what is the difference action

00:17:13,470 --> 00:17:18,070
is mapped

00:17:14,290 --> 00:17:21,580
api name of cloudstack but in a certain

00:17:18,070 --> 00:17:24,730
API it is not that always one entity is

00:17:21,580 --> 00:17:26,500
being operated on in an API there will

00:17:24,730 --> 00:17:29,320
be multiple entities and then you need

00:17:26,500 --> 00:17:31,710
to access them in different way so we

00:17:29,320 --> 00:17:34,240
have enumeration of access type define

00:17:31,710 --> 00:17:37,360
list entry defines a read-only access

00:17:34,240 --> 00:17:40,180
for the entity use entry is read and use

00:17:37,360 --> 00:17:42,760
access and update entries and operate

00:17:40,180 --> 00:17:46,240
axis now what a difference between the

00:17:42,760 --> 00:17:48,790
first two lists and uses that list entry

00:17:46,240 --> 00:17:51,160
for example you can if you have access

00:17:48,790 --> 00:17:54,010
list entry on a template you can list

00:17:51,160 --> 00:17:55,960
that template but if you have access use

00:17:54,010 --> 00:17:58,750
entry on the template you can list that

00:17:55,960 --> 00:18:04,210
template as well at use it to say launch

00:17:58,750 --> 00:18:09,340
a vm from it now how the access check

00:18:04,210 --> 00:18:11,230
flow happens in the IM model so we have

00:18:09,340 --> 00:18:14,800
the two adapters in the plug-in epi

00:18:11,230 --> 00:18:17,170
checker and security checker it works on

00:18:14,800 --> 00:18:19,090
the IM schema the schema has all the

00:18:17,170 --> 00:18:24,520
default groups and policy is loaded on

00:18:19,090 --> 00:18:27,010
startup consider a user and she has a

00:18:24,520 --> 00:18:29,860
virtual machine say foo and she wants to

00:18:27,010 --> 00:18:32,290
start the vm so it calls api start

00:18:29,860 --> 00:18:35,620
virtual machine on the virtual machine

00:18:32,290 --> 00:18:38,590
foo now first is the API checker which

00:18:35,620 --> 00:18:41,500
checks if this operation can be invoked

00:18:38,590 --> 00:18:43,960
by the user to do that it just loads the

00:18:41,500 --> 00:18:46,630
policy of the user which is user policy

00:18:43,960 --> 00:18:49,350
and sees that as a start virtual machine

00:18:46,630 --> 00:18:52,300
permission granted so it can proceed

00:18:49,350 --> 00:18:53,950
security checker has to see that if this

00:18:52,300 --> 00:18:58,210
operation can be invoked on this

00:18:53,950 --> 00:19:00,580
particular vm foo to do that it looks at

00:18:58,210 --> 00:19:03,790
scope of the permission which is granted

00:19:00,580 --> 00:19:07,090
in this case the scope says account

00:19:03,790 --> 00:19:11,860
which means this user can do start vm on

00:19:07,090 --> 00:19:14,410
VMS of her own account now since virtual

00:19:11,860 --> 00:19:16,510
machine who belongs to her account the

00:19:14,410 --> 00:19:19,990
security checker grants the permission

00:19:16,510 --> 00:19:23,200
and the call can proceed so consider a

00:19:19,990 --> 00:19:25,750
root admin if same call is made by the

00:19:23,200 --> 00:19:27,970
root admin the root admin policy says

00:19:25,750 --> 00:19:30,190
that the call can be invoked

00:19:27,970 --> 00:19:32,620
and it can be invoked on all virtual

00:19:30,190 --> 00:19:36,100
machines so a root admin gets

00:19:32,620 --> 00:19:39,310
permissions if it's another user trying

00:19:36,100 --> 00:19:43,300
to start this VM we expect that he would

00:19:39,310 --> 00:19:45,160
be denied API checker says the IP I can

00:19:43,300 --> 00:19:47,290
be invoked but security checker will

00:19:45,160 --> 00:19:52,180
deny it because the vm does not belong

00:19:47,290 --> 00:19:54,670
to this user's account we have another

00:19:52,180 --> 00:19:56,770
Raptor call query selector now this is a

00:19:54,670 --> 00:19:59,410
new adapter introduced in cloudstack to

00:19:56,770 --> 00:20:01,870
facilitate query api's or listing EPS

00:19:59,410 --> 00:20:03,640
till now most of our listing api's

00:20:01,870 --> 00:20:06,730
handle their own access control logic

00:20:03,640 --> 00:20:09,760
and was hard-coded everywhere and in

00:20:06,730 --> 00:20:11,890
order to have a standard pattern we

00:20:09,760 --> 00:20:14,770
introduced this query selector adapter

00:20:11,890 --> 00:20:19,050
it has methods to get authorized domains

00:20:14,770 --> 00:20:19,050
accounts resources for a given caller

00:20:19,620 --> 00:20:25,750
now using this I am feature few use

00:20:23,860 --> 00:20:29,170
cases that we are able to achieve now

00:20:25,750 --> 00:20:32,620
one is custom policy generation so

00:20:29,170 --> 00:20:35,080
consider say a domain admin he can list

00:20:32,620 --> 00:20:37,450
VMs in his domain but he wants to create

00:20:35,080 --> 00:20:41,290
a group of accounts in the domain who

00:20:37,450 --> 00:20:43,750
can also list the VMS so considered to

00:20:41,290 --> 00:20:45,940
accounts in a domain domain admin will

00:20:43,750 --> 00:20:49,390
first create a group say Service Desk

00:20:45,940 --> 00:20:52,030
group then creates a read-only policy

00:20:49,390 --> 00:20:56,770
using the IM api's and attaches

00:20:52,030 --> 00:20:59,350
permissions to list the VMS and says

00:20:56,770 --> 00:21:03,090
that the scope of the vm is the domain

00:20:59,350 --> 00:21:06,670
it means a current domain of the caller

00:21:03,090 --> 00:21:10,060
then attaches this policy to the group

00:21:06,670 --> 00:21:12,970
and adds accounts to the group by doing

00:21:10,060 --> 00:21:15,190
this operation these two accounts get

00:21:12,970 --> 00:21:20,260
the permission to list VMs in their

00:21:15,190 --> 00:21:22,440
domains not just their own VMs similarly

00:21:20,260 --> 00:21:25,630
across account grant can be achieved now

00:21:22,440 --> 00:21:29,440
so if there is a user a having a virtual

00:21:25,630 --> 00:21:32,320
machine foo and she wants to grant it to

00:21:29,440 --> 00:21:36,550
the another account be and just creates

00:21:32,320 --> 00:21:38,290
a policies a vm of policy and creates

00:21:36,550 --> 00:21:39,059
permissions for the operations you want

00:21:38,290 --> 00:21:41,700
to learn

00:21:39,059 --> 00:21:44,249
say start virtual machine and stop

00:21:41,700 --> 00:21:46,889
virtual machine is to be allowed so

00:21:44,249 --> 00:21:48,629
creates two permissions and specifies

00:21:46,889 --> 00:21:50,909
that the scope of this permission is

00:21:48,629 --> 00:21:53,129
resource which means these operations

00:21:50,909 --> 00:21:56,009
can be invoked only on this particular

00:21:53,129 --> 00:21:59,909
resource this particular resource ID

00:21:56,009 --> 00:22:02,490
which is foo and then attaches the

00:21:59,909 --> 00:22:04,889
policy directly to the account does this

00:22:02,490 --> 00:22:10,289
account along with his only ms can now

00:22:04,889 --> 00:22:13,860
start and stop the vm foo now some next

00:22:10,289 --> 00:22:15,720
steps for us for the next phases we

00:22:13,860 --> 00:22:19,889
integrate the IM model with all

00:22:15,720 --> 00:22:22,259
CloudStack access control logic right

00:22:19,889 --> 00:22:23,639
now we have worked on making sure that

00:22:22,259 --> 00:22:27,269
the current CloudStack model is

00:22:23,639 --> 00:22:29,460
reflected correctly on our new schema we

00:22:27,269 --> 00:22:31,529
have to integrate some functionalities

00:22:29,460 --> 00:22:35,309
like shared and isolated networks with

00:22:31,529 --> 00:22:37,769
it for example we with I am model we

00:22:35,309 --> 00:22:40,169
need not have this classification of

00:22:37,769 --> 00:22:42,629
share versus isolated in CloudStack it

00:22:40,169 --> 00:22:45,090
could be just one entity called network

00:22:42,629 --> 00:22:47,519
and shared would mean it is granted on a

00:22:45,090 --> 00:22:51,029
domain level isolated would mean it is

00:22:47,519 --> 00:22:52,799
granted on a account level we haven't

00:22:51,029 --> 00:22:55,499
yet handled any non controlled entities

00:22:52,799 --> 00:22:58,679
the Iron model works on account

00:22:55,499 --> 00:23:00,299
permissions so account-based entities so

00:22:58,679 --> 00:23:03,179
these are they are called controlled

00:23:00,299 --> 00:23:05,399
entities of cloudstack and they have

00:23:03,179 --> 00:23:07,860
account ID and domain ID but then the

00:23:05,399 --> 00:23:11,279
entities like zone service offering

00:23:07,860 --> 00:23:13,919
discs offering or any resources like

00:23:11,279 --> 00:23:16,559
host storage pool all of them they do

00:23:13,919 --> 00:23:18,659
not belong to one particular account so

00:23:16,559 --> 00:23:21,929
we have to extend our I and model to

00:23:18,659 --> 00:23:24,480
these entities as well once that is done

00:23:21,929 --> 00:23:26,850
we can also integrate with the dedicated

00:23:24,480 --> 00:23:29,070
to source feature currently it has its

00:23:26,850 --> 00:23:31,559
own ApS to dedicate a resource to an

00:23:29,070 --> 00:23:38,159
account this exactly falls into the

00:23:31,559 --> 00:23:41,070
grant concept of I am another major step

00:23:38,159 --> 00:23:43,649
is we need to provide a UI support for I

00:23:41,070 --> 00:23:48,090
am ap is so that it is easy to create

00:23:43,649 --> 00:23:50,550
policies and permissions and further is

00:23:48,090 --> 00:23:53,370
handling Jason based policy definition

00:23:50,550 --> 00:23:56,340
our definitions are just API based on a

00:23:53,370 --> 00:23:58,680
schema they are granular but the

00:23:56,340 --> 00:24:01,050
limitation is that if it is a complex

00:23:58,680 --> 00:24:04,080
policy then it involves invoking

00:24:01,050 --> 00:24:06,450
multiple API calls to do that instead if

00:24:04,080 --> 00:24:08,520
we handle a policy statement where all

00:24:06,450 --> 00:24:11,220
permissions can be listed in a JSON

00:24:08,520 --> 00:24:14,370
format it will be easy for anybody to

00:24:11,220 --> 00:24:15,990
create custom policies also it will help

00:24:14,370 --> 00:24:18,030
us to integrate with any other

00:24:15,990 --> 00:24:22,830
third-party IM implementations which

00:24:18,030 --> 00:24:25,530
most likely work with json some

00:24:22,830 --> 00:24:28,770
references for our work is the

00:24:25,530 --> 00:24:31,470
functional spec is on the anar vicky and

00:24:28,770 --> 00:24:34,530
it provides a lot of details on all the

00:24:31,470 --> 00:24:36,720
topics that we talked today and we have

00:24:34,530 --> 00:24:39,000
also put up a guideline for API and

00:24:36,720 --> 00:24:41,070
service layer developers this is

00:24:39,000 --> 00:24:43,260
important because the developer should

00:24:41,070 --> 00:24:46,320
know what are the new annotations and

00:24:43,260 --> 00:24:48,690
what are the new patterns to follow so

00:24:46,320 --> 00:24:53,010
that the IM server gets invoked

00:24:48,690 --> 00:24:56,100
correctly and using that we will we will

00:24:53,010 --> 00:25:01,020
avoid any how pre-baked logic further if

00:24:56,100 --> 00:25:02,880
we use those annotations all right let's

00:25:01,020 --> 00:25:05,780
set any questions on the I am feature

00:25:02,880 --> 00:25:05,780
for me and men

00:25:29,889 --> 00:25:34,610
that would be a thoughtful future

00:25:32,480 --> 00:25:37,639
development definitely but currently

00:25:34,610 --> 00:25:40,190
CloudStack just a science permissions on

00:25:37,639 --> 00:25:42,320
account level and users are the keys

00:25:40,190 --> 00:25:45,529
that are created for users are only a

00:25:42,320 --> 00:25:48,379
means of login or access accessing the

00:25:45,529 --> 00:25:51,379
account but I know that the traditional

00:25:48,379 --> 00:25:53,359
I am of say Amazon's I am works at user

00:25:51,379 --> 00:25:56,600
level and grants permissions at user

00:25:53,359 --> 00:26:06,009
level but CloudStack doesn't work at

00:25:56,600 --> 00:26:10,960
user level for now any more questions

00:26:06,009 --> 00:26:10,960

YouTube URL: https://www.youtube.com/watch?v=iUThjMl2yl8


