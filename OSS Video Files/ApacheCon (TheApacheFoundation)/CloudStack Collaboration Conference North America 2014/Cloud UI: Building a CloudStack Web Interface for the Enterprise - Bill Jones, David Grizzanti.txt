Title: Cloud UI: Building a CloudStack Web Interface for the Enterprise - Bill Jones, David Grizzanti
Publication date: 2014-04-29
Playlist: CloudStack Collaboration Conference North America 2014
Description: 
	CloudStack Collaboration Conference North America 2014
Captions: 
	00:00:00,000 --> 00:00:04,680
so welcome to building a CloudStack UI

00:00:02,669 --> 00:00:07,040
for the enterprise my name is Bill Jones

00:00:04,680 --> 00:00:10,500
this is Dave presenti we're both

00:00:07,040 --> 00:00:12,660
software engineers for sungard

00:00:10,500 --> 00:00:15,210
availability services cloud engineering

00:00:12,660 --> 00:00:16,800
group I'm just going to give an overview

00:00:15,210 --> 00:00:18,720
I think I'm supposed to stand here

00:00:16,800 --> 00:00:20,670
actually I'm going to get an overview of

00:00:18,720 --> 00:00:24,060
what we're going to talk about and go

00:00:20,670 --> 00:00:25,199
through first sort of what sungard

00:00:24,060 --> 00:00:27,599
availability services what the cloud

00:00:25,199 --> 00:00:29,550
engineering group does then we're going

00:00:27,599 --> 00:00:32,369
to talk about our development effort we

00:00:29,550 --> 00:00:34,170
built a UI on top of CloudStack to serve

00:00:32,369 --> 00:00:36,300
our customers as a cloud control panel

00:00:34,170 --> 00:00:39,570
sort of as an alternative sort of a

00:00:36,300 --> 00:00:42,480
customer-focused version of the dig out

00:00:39,570 --> 00:00:43,890
of the box CloudStack you I we're going

00:00:42,480 --> 00:00:46,200
to talk a little bit about what's unique

00:00:43,890 --> 00:00:48,870
about our user interface sort of what

00:00:46,200 --> 00:00:52,140
drove us to do that some of the features

00:00:48,870 --> 00:00:54,120
the technologies that we're using then

00:00:52,140 --> 00:00:56,629
I'm going to turn it over to Dave he's

00:00:54,120 --> 00:00:58,379
going to go through the architecture

00:00:56,629 --> 00:01:01,199
integrating with Klaus tech some of the

00:00:58,379 --> 00:01:02,879
experience that we had there and then

00:01:01,199 --> 00:01:03,899
we're going to have a short demo show

00:01:02,879 --> 00:01:05,280
some of the features of the user

00:01:03,899 --> 00:01:07,320
interface some of the things that drove

00:01:05,280 --> 00:01:10,409
us to choose the technologies that we

00:01:07,320 --> 00:01:12,420
chose and then we're going to if we have

00:01:10,409 --> 00:01:13,350
time talk a little bit about continuous

00:01:12,420 --> 00:01:18,210
integration and sort of how we

00:01:13,350 --> 00:01:23,990
integrated that into our process so

00:01:18,210 --> 00:01:26,310
sungard availability services is well I

00:01:23,990 --> 00:01:28,439
guess I have to talk a little bit about

00:01:26,310 --> 00:01:30,840
some guard because that's where I work

00:01:28,439 --> 00:01:32,549
and I think they expect that so I'm not

00:01:30,840 --> 00:01:37,140
going to read through this sungard's a

00:01:32,549 --> 00:01:42,000
great company we have great services you

00:01:37,140 --> 00:01:45,930
should all use us nicely a cloud

00:01:42,000 --> 00:01:48,659
especially the cloud so currently

00:01:45,930 --> 00:01:51,420
sungard has a cloud offering called

00:01:48,659 --> 00:01:56,640
enterprise cloud services it's a shared

00:01:51,420 --> 00:01:58,590
multi-tenant infrastructure it's a fully

00:01:56,640 --> 00:02:00,840
managed infrastructure it is not a

00:01:58,590 --> 00:02:03,060
self-service infrastructure it's geared

00:02:00,840 --> 00:02:05,130
more towards customers that are trying

00:02:03,060 --> 00:02:09,750
to move their existing IT workloads into

00:02:05,130 --> 00:02:12,819
the cloud to the quote unquote cloud

00:02:09,750 --> 00:02:17,400
it gives them a lot of the flexibility

00:02:12,819 --> 00:02:20,170
of a cloud economic model but it also

00:02:17,400 --> 00:02:22,120
provides them with on the sort of full

00:02:20,170 --> 00:02:24,129
service debt that a traditional

00:02:22,120 --> 00:02:29,200
operations IT operations group would

00:02:24,129 --> 00:02:31,569
would provide so what we're missing

00:02:29,200 --> 00:02:33,880
though or what we were missing and what

00:02:31,569 --> 00:02:35,290
we're building is more of a public cloud

00:02:33,880 --> 00:02:37,330
type of an offering something that

00:02:35,290 --> 00:02:40,480
provides a self service model for our

00:02:37,330 --> 00:02:42,400
customers that allows them to sort of

00:02:40,480 --> 00:02:46,450
manage their infrastructure themselves

00:02:42,400 --> 00:02:48,640
it's primarily geared towards scenarios

00:02:46,450 --> 00:02:50,349
for development and test as opposed to

00:02:48,640 --> 00:02:52,180
production our current environment is

00:02:50,349 --> 00:02:57,870
more of a production support type of a

00:02:52,180 --> 00:02:59,769
an offering so we thought about offering

00:02:57,870 --> 00:03:02,140
publix out on top of our existing

00:02:59,769 --> 00:03:05,829
infrastructure but it really wasn't

00:03:02,140 --> 00:03:07,810
built for that and in addition we we

00:03:05,829 --> 00:03:10,269
work or our existing infrastructure is

00:03:07,810 --> 00:03:12,250
pretty much homegrown it's it's all sort

00:03:10,269 --> 00:03:14,109
of custom built and we thought that

00:03:12,250 --> 00:03:17,109
there might be a better way to do that

00:03:14,109 --> 00:03:21,010
so as we're er detective things we chose

00:03:17,109 --> 00:03:23,739
card to CloudStack and significantly

00:03:21,010 --> 00:03:27,130
simplified sort of our underlying

00:03:23,739 --> 00:03:28,840
hardware architecture and also you know

00:03:27,130 --> 00:03:30,519
get the ability to leverage the open

00:03:28,840 --> 00:03:37,900
source community and you know all the

00:03:30,519 --> 00:03:40,889
great work that club text doing so a

00:03:37,900 --> 00:03:44,560
little bit about why we chose CloudStack

00:03:40,889 --> 00:03:49,389
we're growing so scalability scaling our

00:03:44,560 --> 00:03:52,209
development group was a concern also the

00:03:49,389 --> 00:03:55,470
flexibility and customization that that

00:03:52,209 --> 00:03:55,470
a self-service offering will provide

00:03:57,150 --> 00:04:01,889
improving the the reliability of our

00:03:59,980 --> 00:04:05,470
provisioning automation automation

00:04:01,889 --> 00:04:07,510
there's been a lot of I guess advances

00:04:05,470 --> 00:04:09,190
in technology since we built our

00:04:07,510 --> 00:04:11,109
original cloud platform three years ago

00:04:09,190 --> 00:04:13,419
and so we wanted to sort of start from

00:04:11,109 --> 00:04:16,560
start from scratch and leverage sort of

00:04:13,419 --> 00:04:16,560
the best in the industry

00:04:18,319 --> 00:04:25,710
so what you I do we offer our customers

00:04:22,400 --> 00:04:27,840
there's a few driving features or

00:04:25,710 --> 00:04:29,400
driving factors behind sort of how we

00:04:27,840 --> 00:04:32,370
built this UI first of all certainly

00:04:29,400 --> 00:04:34,259
self-service we wanted customers to be

00:04:32,370 --> 00:04:35,250
able to sort of sign up by themselves

00:04:34,259 --> 00:04:39,360
and manage their own infrastructure

00:04:35,250 --> 00:04:41,009
completely utility billing the billing

00:04:39,360 --> 00:04:43,139
model that we that we have for our

00:04:41,009 --> 00:04:46,800
existing cloud service is is not a

00:04:43,139 --> 00:04:50,220
utility billing model it's it it's uh

00:04:46,800 --> 00:04:52,680
it's not a utility billing right don't

00:04:50,220 --> 00:04:53,879
really want to talk about it but what we

00:04:52,680 --> 00:04:55,740
do want to provide wanted to provide

00:04:53,879 --> 00:04:57,830
pay-as-you-go type of service so that

00:04:55,740 --> 00:05:00,000
you only pay for what you use and

00:04:57,830 --> 00:05:02,340
finally one of the one of the real

00:05:00,000 --> 00:05:04,830
driving factors for us was the ability

00:05:02,340 --> 00:05:07,919
to provide cost control so for a lot of

00:05:04,830 --> 00:05:10,469
customers when they use a self-serve

00:05:07,919 --> 00:05:12,389
sort of utility billing model and roll

00:05:10,469 --> 00:05:14,190
that out to their to the internal groups

00:05:12,389 --> 00:05:16,409
there is no way for them to really

00:05:14,190 --> 00:05:17,940
manage the costs associated with that so

00:05:16,409 --> 00:05:19,379
one of what a lot of the features that

00:05:17,940 --> 00:05:21,719
we're building into our user interface

00:05:19,379 --> 00:05:23,639
allow for cost control chargeback and

00:05:21,719 --> 00:05:25,590
reporting so that there can be some

00:05:23,639 --> 00:05:29,340
administrative management control over

00:05:25,590 --> 00:05:31,069
how how these how the spend the spend

00:05:29,340 --> 00:05:34,319
associated with the cloud infrastructure

00:05:31,069 --> 00:05:36,719
and then finally we wanted to make it

00:05:34,319 --> 00:05:40,229
very easy to use our existing user

00:05:36,719 --> 00:05:44,400
interface for our ecs and for a lot of

00:05:40,229 --> 00:05:47,279
the well the existing cloudstack you I

00:05:44,400 --> 00:05:48,659
not exactly geared towards end users so

00:05:47,279 --> 00:05:51,509
we wanted to provide something that was

00:05:48,659 --> 00:05:52,740
simple something that provided a lot of

00:05:51,509 --> 00:05:58,830
functionality but didn't require

00:05:52,740 --> 00:06:00,900
training and was intuitive to use so

00:05:58,830 --> 00:06:03,120
some of the things that we do that are a

00:06:00,900 --> 00:06:05,789
little bit different than the existing

00:06:03,120 --> 00:06:08,279
cloud the existing cloudstack

00:06:05,789 --> 00:06:12,020
administrative console we provide

00:06:08,279 --> 00:06:15,539
real-time notifications the existing

00:06:12,020 --> 00:06:17,610
cloud stack you I actually relies on

00:06:15,539 --> 00:06:19,620
polling and it pulls the cloudstack

00:06:17,610 --> 00:06:20,940
management server we wanted to provide

00:06:19,620 --> 00:06:25,560
something that was a little more

00:06:20,940 --> 00:06:27,600
responsive so we to do that we integrate

00:06:25,560 --> 00:06:29,940
with the rabid mq event bus which was

00:06:27,600 --> 00:06:33,810
you think was new and for dot one but

00:06:29,940 --> 00:06:37,170
sort of more robust in for dot two we

00:06:33,810 --> 00:06:40,130
also wanted to provide our end users

00:06:37,170 --> 00:06:43,650
with the ability to do things that the

00:06:40,130 --> 00:06:46,500
standard CloudStack permissions model

00:06:43,650 --> 00:06:48,330
only gives root admin users to do so

00:06:46,500 --> 00:06:51,710
without exposing the root admin

00:06:48,330 --> 00:06:54,180
capability we wanted to for example give

00:06:51,710 --> 00:06:55,770
authorized users within our UI the

00:06:54,180 --> 00:06:58,290
ability to create new to create new

00:06:55,770 --> 00:07:01,200
users which in the standard model is

00:06:58,290 --> 00:07:03,720
only allowed for the root admin so we

00:07:01,200 --> 00:07:06,960
also provide roles that are more

00:07:03,720 --> 00:07:10,620
business centric so as opposed to adjust

00:07:06,960 --> 00:07:12,360
the domain admin admin at root admin we

00:07:10,620 --> 00:07:14,460
have a number of business centric roles

00:07:12,360 --> 00:07:17,160
that we're building in for billing

00:07:14,460 --> 00:07:18,750
administration for administrative

00:07:17,160 --> 00:07:22,980
management for systems administrators

00:07:18,750 --> 00:07:25,230
and then for lower privileged systems

00:07:22,980 --> 00:07:28,440
administrators but provide something

00:07:25,230 --> 00:07:32,630
that's a little more aligned with our

00:07:28,440 --> 00:07:36,770
customers actual requirements and then

00:07:32,630 --> 00:07:39,180
finally again I mentioned one of the big

00:07:36,770 --> 00:07:44,250
driving features for us was cost control

00:07:39,180 --> 00:07:46,560
so we actually took the concept of the

00:07:44,250 --> 00:07:48,090
clouds that project and expanded that

00:07:46,560 --> 00:07:50,370
somewhat into something what that we

00:07:48,090 --> 00:07:53,310
call a workplace and a workplace is a

00:07:50,370 --> 00:07:56,220
CloudStack project but it also includes

00:07:53,310 --> 00:07:58,770
the ability to assign budgets so that

00:07:56,220 --> 00:08:00,540
you can get notifications when to spend

00:07:58,770 --> 00:08:02,340
in that workplace or when the cost

00:08:00,540 --> 00:08:05,030
associated with that workplace exceeds

00:08:02,340 --> 00:08:07,820
certain thresholds and that gives

00:08:05,030 --> 00:08:10,380
administrative management the ability to

00:08:07,820 --> 00:08:11,700
understand sort of how things how costs

00:08:10,380 --> 00:08:15,090
are going into control costs within

00:08:11,700 --> 00:08:16,440
their organization so without further

00:08:15,090 --> 00:08:17,910
ado I'm going to turn it over to Dave

00:08:16,440 --> 00:08:21,720
it's going to talk about the technical

00:08:17,910 --> 00:08:23,550
Oh guys hear me mike is good okay so I'm

00:08:21,720 --> 00:08:26,820
gonna take off from Bill and give you

00:08:23,550 --> 00:08:28,550
guys a description of the components

00:08:26,820 --> 00:08:29,840
that we've built and

00:08:28,550 --> 00:08:32,620
it components that we're integrating

00:08:29,840 --> 00:08:35,450
with for CloudStack this is kind of a

00:08:32,620 --> 00:08:39,250
fun or a picture than just boxes with

00:08:35,450 --> 00:08:42,680
words so start on the left hand side

00:08:39,250 --> 00:08:45,620
with the client or the browser so Chrome

00:08:42,680 --> 00:08:47,690
Firefox Internet Explorer if you're so

00:08:45,620 --> 00:08:49,250
inclined with to use that that's made up

00:08:47,690 --> 00:08:52,280
of a few components Twitter bootstrap

00:08:49,250 --> 00:08:55,880
framework backbone Jas and marionette j

00:08:52,280 --> 00:08:58,700
s for javascript and sock Jas for web

00:08:55,880 --> 00:09:00,890
sockets in the bottom left hand corner

00:08:58,700 --> 00:09:03,140
is an open ID server that we're using

00:09:00,890 --> 00:09:05,330
for single sign-on that's integrating

00:09:03,140 --> 00:09:07,250
with something that some garda currently

00:09:05,330 --> 00:09:10,100
uses in that way users don't have to

00:09:07,250 --> 00:09:12,410
remember another username password so

00:09:10,100 --> 00:09:14,030
the client in the browser basically two

00:09:12,410 --> 00:09:15,830
connections back to our server one is to

00:09:14,030 --> 00:09:19,040
a ruby on rails app that we're building

00:09:15,830 --> 00:09:21,440
and the other is to a node.js app that

00:09:19,040 --> 00:09:23,750
we're calling Hermes so it's come to

00:09:21,440 --> 00:09:25,310
check on the rails app first so all the

00:09:23,750 --> 00:09:27,350
interaction with the browser the user

00:09:25,310 --> 00:09:29,210
does filling out forms clicking buttons

00:09:27,350 --> 00:09:32,690
all that stuff is posted back to the

00:09:29,210 --> 00:09:35,120
rails app and it's responsible for

00:09:32,690 --> 00:09:36,740
figuring out which calls need to go to

00:09:35,120 --> 00:09:39,710
cloud sac or which calls need to go to a

00:09:36,740 --> 00:09:41,000
set of billing integration api's that

00:09:39,710 --> 00:09:42,560
we're building internally as well that

00:09:41,000 --> 00:09:44,780
are on top of some oracle systems and

00:09:42,560 --> 00:09:46,910
that handles setting up customers

00:09:44,780 --> 00:09:48,910
accounts and and for the utility billing

00:09:46,910 --> 00:09:51,320
stuff that bill mentioned a little later

00:09:48,910 --> 00:09:53,570
and then the one other component that

00:09:51,320 --> 00:09:56,510
we're talking to is a Redis a back-end

00:09:53,570 --> 00:09:57,980
datastore and I'm going to talk about

00:09:56,510 --> 00:09:59,690
that a little later but essentially

00:09:57,980 --> 00:10:01,760
we're using that to store information

00:09:59,690 --> 00:10:04,460
about any of the async jobs that we call

00:10:01,760 --> 00:10:06,500
on cloud sec so we're storing the job ID

00:10:04,460 --> 00:10:10,340
along with all the request parameters

00:10:06,500 --> 00:10:12,500
for all the async jobs then lastly the

00:10:10,340 --> 00:10:15,530
other connection is back to a WebSocket

00:10:12,500 --> 00:10:17,630
connection back to the nodejs app and we

00:10:15,530 --> 00:10:20,150
use that to funnel those real-time

00:10:17,630 --> 00:10:24,500
events that bill mentioned earlier up to

00:10:20,150 --> 00:10:26,570
the user so we are subscribing to the

00:10:24,500 --> 00:10:28,550
RabbitMQ process that cloud sack

00:10:26,570 --> 00:10:30,650
publishes events to with the worker

00:10:28,550 --> 00:10:33,560
process that we call bunny ears that's

00:10:30,650 --> 00:10:36,230
written in Ruby and it's responsible for

00:10:33,560 --> 00:10:38,900
parsing each of the messages determining

00:10:36,230 --> 00:10:41,480
if it's relevant to us potentially

00:10:38,900 --> 00:10:44,360
looking up more data within CloudStack

00:10:41,480 --> 00:10:47,269
and potentially write us for the acing

00:10:44,360 --> 00:10:49,790
jobs sending that back up to Hermes via

00:10:47,269 --> 00:10:52,250
HTTP post and then Hermes basically

00:10:49,790 --> 00:10:54,410
decides if or not sides if but which

00:10:52,250 --> 00:10:58,100
users that data may be relevant to and

00:10:54,410 --> 00:10:59,240
then signs it back up to the browser so

00:10:58,100 --> 00:11:00,829
I'm going to talk about you too little

00:10:59,240 --> 00:11:02,139
the piece is a little bit more so the

00:11:00,829 --> 00:11:04,610
work of process like I said earlier is

00:11:02,139 --> 00:11:06,680
called bunny or written in Ruby we're

00:11:04,610 --> 00:11:09,290
using a ruby gem called bunny just where

00:11:06,680 --> 00:11:11,410
the name bunny ears came from and then

00:11:09,290 --> 00:11:13,370
Ruby on the web app is Ruby on Rails

00:11:11,410 --> 00:11:17,720
that's running under engine X and

00:11:13,370 --> 00:11:19,250
unicorn the node.js app is no touch is

00:11:17,720 --> 00:11:22,630
obviously but it's using a framework

00:11:19,250 --> 00:11:24,949
called Primus for the WebSocket server

00:11:22,630 --> 00:11:26,630
and the one interesting thing about the

00:11:24,949 --> 00:11:28,579
herpes apps it's really small it's like

00:11:26,630 --> 00:11:31,070
140 lines of code it's not doing very

00:11:28,579 --> 00:11:32,899
much just handling those those posts

00:11:31,070 --> 00:11:36,370
from bunny ears and then sending sending

00:11:32,899 --> 00:11:39,560
some up to the up to the user and then

00:11:36,370 --> 00:11:42,730
backbone and marionette are handling all

00:11:39,560 --> 00:11:46,220
the UI changes in the browser

00:11:42,730 --> 00:11:47,959
particularly when the events come up

00:11:46,220 --> 00:11:49,790
through the WebSocket connection it's

00:11:47,959 --> 00:11:51,680
responsible for basically redrawing all

00:11:49,790 --> 00:11:54,110
of the stuff on the screen you know when

00:11:51,680 --> 00:11:57,019
resources change or when new VMS pop up

00:11:54,110 --> 00:11:59,329
etc and i think a lot of this stuff is

00:11:57,019 --> 00:12:00,709
all theoretical now but it'll be it'll

00:11:59,329 --> 00:12:03,350
be helpful we show the demo you can kind

00:12:00,709 --> 00:12:06,290
of see how all of it works and then

00:12:03,350 --> 00:12:08,060
Redis using it that for the async job

00:12:06,290 --> 00:12:11,300
storage correlation and then we're also

00:12:08,060 --> 00:12:12,860
using it for user invitations unrelated

00:12:11,300 --> 00:12:14,690
the cloud sack but that way we give

00:12:12,860 --> 00:12:16,069
users the ability to invite more people

00:12:14,690 --> 00:12:19,399
and then we're keeping track of the

00:12:16,069 --> 00:12:22,790
invites that way and then lastly just

00:12:19,399 --> 00:12:24,290
the bootstrap to push out framework so

00:12:22,790 --> 00:12:26,389
the one thing we definitely want to talk

00:12:24,290 --> 00:12:29,420
about in our talk of the conference was

00:12:26,389 --> 00:12:34,310
our experience using the API and the

00:12:29,420 --> 00:12:36,889
eventbus both good in and bad and so the

00:12:34,310 --> 00:12:40,610
obviously benefits fully featured API is

00:12:36,889 --> 00:12:42,410
is really great there's no secret sauce

00:12:40,610 --> 00:12:43,760
inside the orcs tration layer that we we

00:12:42,410 --> 00:12:45,680
necessarily don't have access to so we

00:12:43,760 --> 00:12:48,500
can do everything through the API that

00:12:45,680 --> 00:12:50,209
the clouds i qi is doing and acing jobs

00:12:48,500 --> 00:12:51,649
are also really really great instead of

00:12:50,209 --> 00:12:53,269
you know making the user have to wait

00:12:51,649 --> 00:12:54,440
for synchronous things to finish on

00:12:53,269 --> 00:12:57,080
creating a vm

00:12:54,440 --> 00:12:58,070
and we're wrapping some of that in the

00:12:57,080 --> 00:13:02,540
job manuf and stuff that I mentioned

00:12:58,070 --> 00:13:05,120
earlier so as with anything that people

00:13:02,540 --> 00:13:06,920
use a lot you kind of notice more

00:13:05,120 --> 00:13:08,810
problems as you're using them so some of

00:13:06,920 --> 00:13:12,260
the areas that we've been kind of eyeing

00:13:08,810 --> 00:13:14,330
for improvement and things that some

00:13:12,260 --> 00:13:16,040
guards trying to help improve with the

00:13:14,330 --> 00:13:18,290
community are a better permissions model

00:13:16,040 --> 00:13:20,690
it which is actually something that's

00:13:18,290 --> 00:13:23,360
already in progress a truly restful

00:13:20,690 --> 00:13:25,610
interface to the API and then just more

00:13:23,360 --> 00:13:28,220
consistency around the requests and

00:13:25,610 --> 00:13:29,270
responses through the API so most of

00:13:28,220 --> 00:13:31,580
it's not big deals with just little

00:13:29,270 --> 00:13:33,650
things like when you list SSH key pairs

00:13:31,580 --> 00:13:36,770
you say SH key pairs and when it replies

00:13:33,650 --> 00:13:38,150
it says his heat SSH key pair singular

00:13:36,770 --> 00:13:39,860
so just little things that you're not

00:13:38,150 --> 00:13:43,730
expecting when you first first start

00:13:39,860 --> 00:13:45,350
using it and this is kind of our little

00:13:43,730 --> 00:13:46,550
poke that we were tempted not to put in

00:13:45,350 --> 00:13:48,830
there but we figured it would be fun to

00:13:46,550 --> 00:13:50,630
throw it up there so some of the

00:13:48,830 --> 00:13:51,830
developers that were working with had

00:13:50,630 --> 00:13:54,470
never worked with thought site before so

00:13:51,830 --> 00:13:56,990
they were just you know making API calls

00:13:54,470 --> 00:13:59,390
so they were one of the user stories

00:13:56,990 --> 00:14:01,460
that we tried to implement a ting a port

00:13:59,390 --> 00:14:03,050
forwarding rule which you can't do but

00:14:01,460 --> 00:14:04,070
they didn't know that so when they were

00:14:03,050 --> 00:14:05,450
trying to do what they were like we're

00:14:04,070 --> 00:14:06,920
getting a job ID back and everything

00:14:05,450 --> 00:14:09,200
says it's working but it's not it's not

00:14:06,920 --> 00:14:11,570
so like we open up the code and was like

00:14:09,200 --> 00:14:12,590
what what is this so it says that it

00:14:11,570 --> 00:14:16,700
works but it doesn't really cuz it's

00:14:12,590 --> 00:14:18,640
just common today so the eventbus stuff

00:14:16,700 --> 00:14:20,540
as we mentioned we're using RabbitMQ

00:14:18,640 --> 00:14:21,980
when we originally started working on

00:14:20,540 --> 00:14:25,510
the project we were actually using cloud

00:14:21,980 --> 00:14:27,980
platform 306 which didn't have the event

00:14:25,510 --> 00:14:30,470
bus functionality and we were just

00:14:27,980 --> 00:14:32,180
polling and we notice really quickly

00:14:30,470 --> 00:14:35,150
that was not going to scale it was a

00:14:32,180 --> 00:14:36,920
pain for user acceptance testing an

00:14:35,150 --> 00:14:38,780
automated tests so we're really happy

00:14:36,920 --> 00:14:40,790
once we moved to 42 and we're able to

00:14:38,780 --> 00:14:44,210
integrate that so that's been really

00:14:40,790 --> 00:14:45,560
helpful and then along the same lines of

00:14:44,210 --> 00:14:48,200
the API some areas that we've been

00:14:45,560 --> 00:14:49,460
trying to help contribute back to is the

00:14:48,200 --> 00:14:51,110
different types of events were kind of

00:14:49,460 --> 00:14:53,660
confusing at first like action events

00:14:51,110 --> 00:14:56,180
usage events research stage changes

00:14:53,660 --> 00:14:57,710
events a sick job events just data was

00:14:56,180 --> 00:14:59,480
kind of spread across multiple places so

00:14:57,710 --> 00:15:01,160
trying to figure out which ones were

00:14:59,480 --> 00:15:03,290
appropriate for all of our use cases

00:15:01,160 --> 00:15:06,320
took us a little bit of time and

00:15:03,290 --> 00:15:07,150
sometimes it was data in some of the

00:15:06,320 --> 00:15:10,180
events related

00:15:07,150 --> 00:15:11,170
projects that were unique IDs that were

00:15:10,180 --> 00:15:13,780
internal to the database that you

00:15:11,170 --> 00:15:16,660
couldn't really use the list stuff to in

00:15:13,780 --> 00:15:18,130
one specific case for a sink jobs we

00:15:16,660 --> 00:15:20,890
committed something back that added the

00:15:18,130 --> 00:15:22,780
project ID to async jobs for project so

00:15:20,890 --> 00:15:24,910
that way you could you know once you get

00:15:22,780 --> 00:15:28,330
that data back it's easier to look up

00:15:24,910 --> 00:15:31,390
what project was relevant for so this is

00:15:28,330 --> 00:15:32,980
just the kind of circle back and look at

00:15:31,390 --> 00:15:35,830
what the full architecture looks like

00:15:32,980 --> 00:15:37,300
after I explained all of it so no

00:15:35,830 --> 00:15:41,080
surprises here I just wanted to throw it

00:15:37,300 --> 00:15:43,330
back up there so you can see till going

00:15:41,080 --> 00:15:45,580
to move on to the demo you want to do

00:15:43,330 --> 00:15:48,070
the domain media they go oh you just

00:15:45,580 --> 00:15:50,140
play it we can talk to it I guess okay

00:15:48,070 --> 00:15:51,310
so pre-canned we didn't wanted we were

00:15:50,140 --> 00:15:54,670
going to do a live demo but we were a

00:15:51,310 --> 00:15:55,930
little nervous hopefully this works okay

00:15:54,670 --> 00:15:59,080
I thought when we set it up first them

00:15:55,930 --> 00:16:02,680
all so what we're looking at here is the

00:15:59,080 --> 00:16:04,330
workplace dashboard where we show what

00:16:02,680 --> 00:16:06,970
all the virtual research resources in

00:16:04,330 --> 00:16:08,140
your project / workplace are and we're

00:16:06,970 --> 00:16:11,110
going to just walk through the creation

00:16:08,140 --> 00:16:12,430
of a vm and show the flow of that to

00:16:11,110 --> 00:16:13,630
show how we try to improve the user

00:16:12,430 --> 00:16:19,930
experience around creating a virtual

00:16:13,630 --> 00:16:24,280
machine and it looks oh so you click new

00:16:19,930 --> 00:16:26,140
virtual machine enter the hostname and

00:16:24,280 --> 00:16:28,690
the description select the service

00:16:26,140 --> 00:16:31,600
offering it's going kinda quickly what

00:16:28,690 --> 00:16:33,580
can you pause it yeah okay so I've done

00:16:31,600 --> 00:16:35,770
this like 16 times a day that's kind of

00:16:33,580 --> 00:16:37,450
flying through so it's a little bit hard

00:16:35,770 --> 00:16:38,590
to scroll up we sort of went past it but

00:16:37,450 --> 00:16:39,730
the first thing that you select is you

00:16:38,590 --> 00:16:42,670
select your template or your operating

00:16:39,730 --> 00:16:44,380
system the next thing and here we have

00:16:42,670 --> 00:16:45,520
them grouped by we have the templates

00:16:44,380 --> 00:16:46,810
proof by operating system in this case

00:16:45,520 --> 00:16:49,540
it's a development system so there's not

00:16:46,810 --> 00:16:52,360
a lot of not about a lot of a lot of

00:16:49,540 --> 00:16:54,130
artifacts there yet the next you select

00:16:52,360 --> 00:16:56,170
your computer offering but instead of

00:16:54,130 --> 00:16:57,910
selecting a computer offering in the way

00:16:56,170 --> 00:16:59,890
that cloudstack presents it we actually

00:16:57,910 --> 00:17:01,270
break it down so that you can so from a

00:16:59,890 --> 00:17:02,860
customer perspective you can select how

00:17:01,270 --> 00:17:04,060
many CPUs do I want and then how much

00:17:02,860 --> 00:17:05,890
memory do I want you don't have to look

00:17:04,060 --> 00:17:08,830
at them together and we think we have a

00:17:05,890 --> 00:17:11,620
nice sort of a flow here to to make that

00:17:08,830 --> 00:17:13,750
sort of easy to understand and then if

00:17:11,620 --> 00:17:15,070
you play again obviously the one thing

00:17:13,750 --> 00:17:16,330
to the last thing is we don't have any

00:17:15,070 --> 00:17:17,980
the billing integration in the

00:17:16,330 --> 00:17:19,550
screenshots now but eventually you'll

00:17:17,980 --> 00:17:20,900
see a price here and it'll

00:17:19,550 --> 00:17:24,140
change based on what service offering

00:17:20,900 --> 00:17:26,360
they're picking and then finally you

00:17:24,140 --> 00:17:27,980
select your network and your essay or

00:17:26,360 --> 00:17:31,640
actually your authentication mechanism

00:17:27,980 --> 00:17:33,260
again I started was going so fast but at

00:17:31,640 --> 00:17:36,620
the end you get the root password back

00:17:33,260 --> 00:17:38,810
in a in a in a modal display which is

00:17:36,620 --> 00:17:41,150
not safe anywhere it's now the collapse

00:17:38,810 --> 00:17:43,340
affect database we don't say it anyway

00:17:41,150 --> 00:17:45,800
we don't say okay so that's the end of

00:17:43,340 --> 00:17:47,350
that one and one to the next one so the

00:17:45,800 --> 00:17:50,270
next one we're trying to row try this

00:17:47,350 --> 00:17:51,590
demo is is to just display sort of the

00:17:50,270 --> 00:17:55,580
real-time notifications to sort of how

00:17:51,590 --> 00:17:57,830
the user interface updates so we have to

00:17:55,580 --> 00:18:00,110
work places here or actually we have two

00:17:57,830 --> 00:18:02,180
views of the same workplace imagine that

00:18:00,110 --> 00:18:03,440
you have one user at one desktop and

00:18:02,180 --> 00:18:04,250
another user or another desktop and

00:18:03,440 --> 00:18:07,040
they're both working in the same

00:18:04,250 --> 00:18:10,490
workplace one user goes in adds a

00:18:07,040 --> 00:18:12,560
virtual machine and what we're showing

00:18:10,490 --> 00:18:16,700
here is that all of the all of the views

00:18:12,560 --> 00:18:18,980
updates simultaneously so it's going to

00:18:16,700 --> 00:18:23,750
look similar to the other one I started

00:18:18,980 --> 00:18:26,030
tightening select the service offering

00:18:23,750 --> 00:18:30,170
in this case we're going to use an ssh

00:18:26,030 --> 00:18:31,370
key pair instead of a root password and

00:18:30,170 --> 00:18:34,880
you can see down here was kind of fast

00:18:31,370 --> 00:18:37,210
but this like this browser changed let

00:18:34,880 --> 00:18:37,210
me go back

00:18:37,330 --> 00:18:41,650
the vm down here showed up after we

00:18:40,480 --> 00:18:43,540
clicked the crate so we're just showing

00:18:41,650 --> 00:18:46,050
that that the events are kind of going

00:18:43,540 --> 00:18:48,310
to both browsers at the same time and

00:18:46,050 --> 00:18:49,510
we'll drill into a little bit more we

00:18:48,310 --> 00:18:51,910
went to the you know the top browser to

00:18:49,510 --> 00:18:53,140
the vm we're stopping it stopping is

00:18:51,910 --> 00:18:54,700
actually pretty quick since we're using

00:18:53,140 --> 00:18:57,400
the simulator here but you can notice

00:18:54,700 --> 00:19:00,760
down here that just the status which i

00:18:57,400 --> 00:19:04,090
was doing it on you okay then lastly

00:19:00,760 --> 00:19:07,750
this is some just network configuration

00:19:04,090 --> 00:19:09,940
your steps I don't feel anybody one of

00:19:07,750 --> 00:19:11,490
them yeah so we kind of organized the

00:19:09,940 --> 00:19:13,510
network configuration into these tabs

00:19:11,490 --> 00:19:16,450
you can kind of see everything all

00:19:13,510 --> 00:19:18,070
online so there's no public ip's port

00:19:16,450 --> 00:19:20,200
forwarding inbound up on firewall rules

00:19:18,070 --> 00:19:21,670
load balancing and VPN configuration so

00:19:20,200 --> 00:19:23,290
the first thing I did was just you

00:19:21,670 --> 00:19:25,330
adding an IP address to this network and

00:19:23,290 --> 00:19:26,260
then the way that the events are working

00:19:25,330 --> 00:19:28,690
it kind of popped up on the screen

00:19:26,260 --> 00:19:32,800
automatically the next thing we're going

00:19:28,690 --> 00:19:34,570
to show is about firewall rules and how

00:19:32,800 --> 00:19:41,610
the UI is changing dynamically depending

00:19:34,570 --> 00:19:41,610
on if you pick tcp or ICMP or UDP

00:19:48,429 --> 00:19:55,029
two actually icmp rules have a code at a

00:19:51,789 --> 00:19:57,369
type whereas UDP and TCP rules to only

00:19:55,029 --> 00:19:58,869
have start and end forts so and then

00:19:57,369 --> 00:20:02,649
those are interfaced updates dynamically

00:19:58,869 --> 00:20:10,419
for that and the last thing was load

00:20:02,649 --> 00:20:11,350
balancing never actually gets there so

00:20:10,419 --> 00:20:13,360
here we're going to go through the steps

00:20:11,350 --> 00:20:15,759
of creating a load balancer pool give it

00:20:13,360 --> 00:20:19,509
a name assigned an IP address and port

00:20:15,759 --> 00:20:23,610
range and a policy and then afterwards

00:20:19,509 --> 00:20:23,610
add beiongs to that load balancer pool

00:20:28,460 --> 00:20:32,660
and again our feeling is our goal here

00:20:31,100 --> 00:20:35,020
is to make the functionality accessible

00:20:32,660 --> 00:20:37,900
to end users that are not necessarily

00:20:35,020 --> 00:20:44,060
experienced systems administrators but

00:20:37,900 --> 00:20:45,140
but understand the concepts okay technol

00:20:44,060 --> 00:20:47,240
I think we have five minutes left so I'm

00:20:45,140 --> 00:20:49,670
going to I'm just speed through the

00:20:47,240 --> 00:20:51,080
testing part as quick as possible giving

00:20:49,670 --> 00:20:52,580
everyone the information so the one

00:20:51,080 --> 00:20:54,320
thing that we wanted to talk about a

00:20:52,580 --> 00:20:56,210
little bell was testing and maybe

00:20:54,320 --> 00:20:58,310
logging a pie of time so obviously

00:20:56,210 --> 00:21:00,050
testing testing an application is hard

00:20:58,310 --> 00:21:01,850
in general so from the beginning when we

00:21:00,050 --> 00:21:03,140
started working on this we wanted to try

00:21:01,850 --> 00:21:04,820
as hard as possible to do test-driven

00:21:03,140 --> 00:21:07,850
development with everything we're using

00:21:04,820 --> 00:21:09,860
and we're doing an agile development

00:21:07,850 --> 00:21:11,780
method doing week's prints so we've been

00:21:09,860 --> 00:21:14,990
pretty aggressive with with the way that

00:21:11,780 --> 00:21:16,850
we've been working so let me step back

00:21:14,990 --> 00:21:18,830
so you didn't see that one of the items

00:21:16,850 --> 00:21:20,840
things that we in the beginning had a

00:21:18,830 --> 00:21:22,700
challenge with was we wanted to write

00:21:20,840 --> 00:21:25,490
user accepts and tests user acceptance

00:21:22,700 --> 00:21:29,270
tests so basically using a framework

00:21:25,490 --> 00:21:31,580
called copy Barra and poltergeist to do

00:21:29,270 --> 00:21:32,810
headless browser testing so emulating an

00:21:31,580 --> 00:21:34,730
actual user clicking around in the

00:21:32,810 --> 00:21:37,340
browser every you know every code push

00:21:34,730 --> 00:21:39,920
that we do so we actually you know need

00:21:37,340 --> 00:21:41,900
to talk to I'll CloudStack somewhere so

00:21:39,920 --> 00:21:44,900
in the beginning we were like able to

00:21:41,900 --> 00:21:46,970
use the simulator and I don't know who

00:21:44,900 --> 00:21:48,800
is just bad luck and we picked use cases

00:21:46,970 --> 00:21:50,000
that made it really difficult we just

00:21:48,800 --> 00:21:52,340
had like a ton of problems getting it to

00:21:50,000 --> 00:21:54,550
work correctly it would fill up since

00:21:52,340 --> 00:21:57,500
its kind of acting as a real hypervisor

00:21:54,550 --> 00:21:59,380
so you know just in terms of quickness

00:21:57,500 --> 00:22:01,910
some of the guys that were working with

00:21:59,380 --> 00:22:03,770
had some experience with vcr before and

00:22:01,910 --> 00:22:05,180
that's a recording tool obviously from

00:22:03,770 --> 00:22:10,160
the name but it allows you to record

00:22:05,180 --> 00:22:11,330
HTTP request and then replay them so we

00:22:10,160 --> 00:22:13,280
were basically using that as the end

00:22:11,330 --> 00:22:15,890
point so we would you know emulate what

00:22:13,280 --> 00:22:17,960
we were sending a request and respond

00:22:15,890 --> 00:22:21,410
with what we expected and it was really

00:22:17,960 --> 00:22:23,510
great the beginning is super fast but it

00:22:21,410 --> 00:22:24,830
broke down once we integrated the event

00:22:23,510 --> 00:22:28,030
bus because obviously the VCR can't

00:22:24,830 --> 00:22:31,520
generate events to RabbitMQ so our next

00:22:28,030 --> 00:22:34,880
effort wasn't let's build a fake clubs

00:22:31,520 --> 00:22:37,190
back so along that lines we basically

00:22:34,880 --> 00:22:39,080
built a Sinatra app that emulated what

00:22:37,190 --> 00:22:40,519
clouds that would do sending events and

00:22:39,080 --> 00:22:42,919
we called it smokestack

00:22:40,519 --> 00:22:45,019
but that became too much work after a

00:22:42,919 --> 00:22:46,099
couple weeks as well we abandoned that

00:22:45,019 --> 00:22:48,019
went back to the simulator and

00:22:46,099 --> 00:22:49,190
eventually figured out a way to get it

00:22:48,019 --> 00:22:51,229
to work which I'll talk about in a

00:22:49,190 --> 00:22:53,349
second one of the own dimension we're

00:22:51,229 --> 00:22:55,519
using a tool called cold climate for

00:22:53,349 --> 00:22:57,619
quality and security analysis which is

00:22:55,519 --> 00:23:00,289
pretty cool gives us grades on our code

00:22:57,619 --> 00:23:02,989
and also just test coverage stuff so

00:23:00,289 --> 00:23:05,239
we're using Jenkins for continuous

00:23:02,989 --> 00:23:08,629
integration so running tests after each

00:23:05,239 --> 00:23:09,799
push branches and master and the

00:23:08,629 --> 00:23:12,349
challenge will be had with the simulator

00:23:09,799 --> 00:23:14,659
was how many do we have do we have one

00:23:12,349 --> 00:23:17,269
per developer do we have some set of

00:23:14,659 --> 00:23:18,320
them in our lab that all the Jenkins

00:23:17,269 --> 00:23:20,719
tests are running against and the

00:23:18,320 --> 00:23:22,609
developers are running against two ended

00:23:20,719 --> 00:23:25,849
up settling on this idea of having a

00:23:22,609 --> 00:23:29,570
pool of cloud sec instances that the

00:23:25,849 --> 00:23:30,709
tests can ask for you know check out and

00:23:29,570 --> 00:23:34,039
then check in when they're done and

00:23:30,709 --> 00:23:36,739
we're basically using that with a bare

00:23:34,039 --> 00:23:40,089
metal box with vagrant and virtualbox so

00:23:36,739 --> 00:23:42,499
snapshotting each of the instances and

00:23:40,089 --> 00:23:44,089
then the test will ask for them run

00:23:42,499 --> 00:23:45,589
their tests and then when they're done

00:23:44,089 --> 00:23:47,690
when they check it back in we'll just

00:23:45,589 --> 00:23:49,279
reset to the snapshot and virtualbox

00:23:47,690 --> 00:23:51,440
actually does a really good job it's

00:23:49,279 --> 00:23:53,570
like seconds between when we say it's

00:23:51,440 --> 00:23:55,249
you know check back in and when it's

00:23:53,570 --> 00:23:57,440
ready again for more tests so this is

00:23:55,249 --> 00:23:58,639
just like a quick picture of what the

00:23:57,440 --> 00:24:02,119
simulator pool looks like gives you

00:23:58,639 --> 00:24:03,709
status can I ask a quick question how

00:24:02,119 --> 00:24:05,179
many are there anybody in the audience

00:24:03,709 --> 00:24:08,119
familiar with the clouds deck simulator

00:24:05,179 --> 00:24:09,769
does anybody use it chip maybe I should

00:24:08,119 --> 00:24:11,479
we should have talked about that um ok

00:24:09,769 --> 00:24:13,729
I'll give two seconds so it basically

00:24:11,479 --> 00:24:16,119
allows you to have a fake hypervisor

00:24:13,729 --> 00:24:18,649
that instead of talking to any back-end

00:24:16,119 --> 00:24:20,950
physical real hypervisors it just put

00:24:18,649 --> 00:24:23,599
sensors in a database but it still acts

00:24:20,950 --> 00:24:25,099
the same it still runs through code and

00:24:23,599 --> 00:24:27,649
has a certain amount of RAM has certain

00:24:25,099 --> 00:24:29,539
on a cpu certain amount of storage so so

00:24:27,649 --> 00:24:30,709
the simulated part is the hypervisor

00:24:29,539 --> 00:24:32,749
yeah the simulator parts the hypervisor

00:24:30,709 --> 00:24:34,070
so you still have an issue with how many

00:24:32,749 --> 00:24:35,989
hosts does it have how much memory does

00:24:34,070 --> 00:24:38,029
it have so you can't just throw it there

00:24:35,989 --> 00:24:39,559
and say it'll last for the whole day we

00:24:38,029 --> 00:24:41,389
did at the beginning then as we got more

00:24:39,559 --> 00:24:47,549
developers and more tests it just became

00:24:41,389 --> 00:24:51,100
really cumbersome where are we on time

00:24:47,549 --> 00:24:53,470
okay so doctors like the new cool thing

00:24:51,100 --> 00:24:54,640
so we did a little bit of a prototype to

00:24:53,470 --> 00:24:56,799
replace VirtualBox in vagrant with

00:24:54,640 --> 00:24:57,909
docker works pretty well we just having

00:24:56,799 --> 00:24:59,740
that time to really integrated and with

00:24:57,909 --> 00:25:01,980
the with the pool but I think it could

00:24:59,740 --> 00:25:06,669
be a interesting area of exploration and

00:25:01,980 --> 00:25:09,400
lastly the company we're working with

00:25:06,669 --> 00:25:11,409
along with us built a ruby client for

00:25:09,400 --> 00:25:12,880
cloudstack that's up on github it's cool

00:25:11,409 --> 00:25:14,830
everyone should check it out i'm not

00:25:12,880 --> 00:25:16,330
going to go into too much detail but has

00:25:14,830 --> 00:25:17,980
a lot of interesting features and also

00:25:16,330 --> 00:25:20,919
our Baker and clouds like simulators up

00:25:17,980 --> 00:25:23,530
on github as well we're using grey log

00:25:20,919 --> 00:25:24,940
for logging that's also good helps us a

00:25:23,530 --> 00:25:27,220
lot with tracing problems through the

00:25:24,940 --> 00:25:28,840
development environment when the app is

00:25:27,220 --> 00:25:31,210
really complicated we're going from the

00:25:28,840 --> 00:25:33,280
UI in a cloud stack of rails the clouds

00:25:31,210 --> 00:25:34,659
deck and all those events so whenever we

00:25:33,280 --> 00:25:35,830
have tests that break it was really hard

00:25:34,659 --> 00:25:39,490
to figure out where they were breaking

00:25:35,830 --> 00:25:40,960
so bunched up in grey look so lastly

00:25:39,490 --> 00:25:42,429
just some acknowledgments obviously we

00:25:40,960 --> 00:25:44,380
want to thank the classic community for

00:25:42,429 --> 00:25:48,220
helping us out with everything our

00:25:44,380 --> 00:25:51,760
employer and prompt works as the name of

00:25:48,220 --> 00:25:54,100
the rails and Ruby shop in Philadelphia

00:25:51,760 --> 00:25:55,870
that we're working with so obviously

00:25:54,100 --> 00:25:57,010
they are doing a lot of work for us so

00:25:55,870 --> 00:26:02,020
want to throw their name up there as

00:25:57,010 --> 00:26:05,490
well and go to questions no we're done

00:26:02,020 --> 00:26:05,490
really for no reason I can keep talking

00:26:11,070 --> 00:26:14,070
goals

00:26:20,490 --> 00:26:27,280
sure so I guess since we're using the

00:26:25,090 --> 00:26:28,930
single instance of cloud sac single

00:26:27,280 --> 00:26:31,690
instance of the management server and

00:26:28,930 --> 00:26:34,870
each customer's not getting their own we

00:26:31,690 --> 00:26:36,550
can't give any one customer the root

00:26:34,870 --> 00:26:37,840
permissions so I don't know if how

00:26:36,550 --> 00:26:41,080
familiar you are with a permission model

00:26:37,840 --> 00:26:42,370
in cloud sec now but if we gave it out

00:26:41,080 --> 00:26:43,480
to everyone they could you know delete

00:26:42,370 --> 00:26:46,630
other people's projects to leave other

00:26:43,480 --> 00:26:49,570
people's VMs so we're creating a domain

00:26:46,630 --> 00:26:51,760
/ company that would sign up and then

00:26:49,570 --> 00:26:54,760
the highest level person that company

00:26:51,760 --> 00:26:55,930
becomes a domain admin no name domain

00:26:54,760 --> 00:26:57,790
admins don't have the ability to create

00:26:55,930 --> 00:27:02,080
accounts other accounts so what ends up

00:26:57,790 --> 00:27:03,700
happening is we have to act as root

00:27:02,080 --> 00:27:06,160
admin for them in order to create more

00:27:03,700 --> 00:27:08,110
accounts within their domain so that's

00:27:06,160 --> 00:27:10,200
that's probably the biggest example I

00:27:08,110 --> 00:27:12,970
would say of the elevated permissions

00:27:10,200 --> 00:27:15,210
there's a case where we for some for a

00:27:12,970 --> 00:27:17,260
particular reason we don't want users

00:27:15,210 --> 00:27:19,000
regenerating their API keys because

00:27:17,260 --> 00:27:20,410
we're storing them somewhere else so we

00:27:19,000 --> 00:27:22,000
have to block that from letting users

00:27:20,410 --> 00:27:26,590
generate the API keys as well so we're

00:27:22,000 --> 00:27:28,660
making only root admin do that and in

00:27:26,590 --> 00:27:30,640
the future some of our future plans are

00:27:28,660 --> 00:27:32,170
going to require a lot more fine-grained

00:27:30,640 --> 00:27:35,050
permissions so I think we'd like to get

00:27:32,170 --> 00:27:36,580
away from doing that in the UI and push

00:27:35,050 --> 00:27:37,990
that put that more into cloud sec and

00:27:36,580 --> 00:27:39,820
there's actually a project going on that

00:27:37,990 --> 00:27:41,170
some of the photos Citrix are working on

00:27:39,820 --> 00:27:43,750
that we're going to hopefully help with

00:27:41,170 --> 00:27:47,080
that'll make lots like more similar to

00:27:43,750 --> 00:27:50,970
AWS as I am model so groups and policies

00:27:47,080 --> 00:27:50,970
you know on top of comic accounts

00:27:53,260 --> 00:27:56,570
so the question was i forgot to repeat

00:27:55,280 --> 00:27:58,640
the first one do I actually export the

00:27:56,570 --> 00:28:00,800
console yes so one of the things on

00:27:58,640 --> 00:28:04,130
stacker be that we realized that we

00:28:00,800 --> 00:28:06,350
needed was the ability to get back what

00:28:04,130 --> 00:28:10,820
would be the consult in the browser so

00:28:06,350 --> 00:28:12,260
yeah we the stacker be has a call you

00:28:10,820 --> 00:28:13,490
know I think console access it's called

00:28:12,260 --> 00:28:15,530
and you stopped to give it the API and

00:28:13,490 --> 00:28:17,870
secret key and it gives you back the

00:28:15,530 --> 00:28:21,050
HTML source and we just throw that in a

00:28:17,870 --> 00:28:23,540
browser window and that's how the

00:28:21,050 --> 00:28:25,460
context is so sorry it seemed to be an

00:28:23,540 --> 00:28:29,960
iframe it seemed to be an iframe now

00:28:25,460 --> 00:28:32,980
it's a new tab was there another

00:28:29,960 --> 00:28:32,980
question in the middle

00:28:42,480 --> 00:28:47,190
so the way that we're not really

00:28:45,240 --> 00:28:49,590
exposing the users right now we're

00:28:47,190 --> 00:28:51,690
treating a user as an account and we're

00:28:49,590 --> 00:28:53,700
actually not letting anyone create any

00:28:51,690 --> 00:28:55,350
account level resources we're just going

00:28:53,700 --> 00:28:57,390
to in like global settings we're going

00:28:55,350 --> 00:28:58,590
to set max account all those 20 and

00:28:57,390 --> 00:29:01,110
we're going to make everyone use a

00:28:58,590 --> 00:29:03,150
project so all of the all of the billing

00:29:01,110 --> 00:29:05,000
is going to be at the project level not

00:29:03,150 --> 00:29:07,020
at the individual account level and that

00:29:05,000 --> 00:29:08,429
some of the backend billing systems i

00:29:07,020 --> 00:29:10,169
showed in the initial picture they're

00:29:08,429 --> 00:29:12,510
going to pull the usage records you know

00:29:10,169 --> 00:29:19,080
daily or twice a day and then just build

00:29:12,510 --> 00:29:22,740
based on that getting the big stops

00:29:19,080 --> 00:29:26,780
cuffs on what should be read oh okay

00:29:22,740 --> 00:29:26,780

YouTube URL: https://www.youtube.com/watch?v=4hA8kGCRCOE


