Title: It's the App, Stupid! - Uri Cohen
Publication date: 2014-04-25
Playlist: CloudStack Collaboration Conference North America 2014
Description: 
	CloudStack Collaboration Conference North America 2014
Captions: 
	00:00:00,000 --> 00:00:04,799
so before I start raise your hand if you

00:00:02,310 --> 00:00:09,690
ever heard the name cloud if I get

00:00:04,799 --> 00:00:11,460
spaces all right that stuff yes i'm

00:00:09,690 --> 00:00:15,800
going to start first with the motivation

00:00:11,460 --> 00:00:18,949
van qualifying kind of using a funny

00:00:15,800 --> 00:00:21,029
story here okay so we're talking about a

00:00:18,949 --> 00:00:23,580
company a fictional company obviously

00:00:21,029 --> 00:00:26,010
called patsy and they've been selling

00:00:23,580 --> 00:00:29,750
pet art since last year and you can see

00:00:26,010 --> 00:00:31,920
some of their finest specimens over here

00:00:29,750 --> 00:00:35,280
and betsy has a pretty complex

00:00:31,920 --> 00:00:38,450
deployment stack they have engine eeks

00:00:35,280 --> 00:00:42,120
on the front python unicorn web server

00:00:38,450 --> 00:00:44,789
backing it activemq Hadoop to do

00:00:42,120 --> 00:00:47,100
some numbers on the data crunching and

00:00:44,789 --> 00:00:49,890
then here on the right side they have a

00:00:47,100 --> 00:00:55,739
bunch of monitoring and admin tools like

00:00:49,890 --> 00:00:58,050
log stash graphite nagios and you know

00:00:55,739 --> 00:00:59,190
the business is doing quite well there

00:00:58,050 --> 00:01:01,350
something everyone loves better

00:00:59,190 --> 00:01:06,270
especially the stuff that cats are

00:01:01,350 --> 00:01:07,740
making from toilet papers but they have

00:01:06,270 --> 00:01:10,770
a few issues around rolling and

00:01:07,740 --> 00:01:13,040
deploying new code so the first thing

00:01:10,770 --> 00:01:14,939
that they actually experience is that

00:01:13,040 --> 00:01:17,040
every time they want to push in a

00:01:14,939 --> 00:01:18,650
version they have to do it manually it's

00:01:17,040 --> 00:01:20,820
not really something that they do easily

00:01:18,650 --> 00:01:22,890
they have to take down their servers

00:01:20,820 --> 00:01:24,210
they have to install the new code and

00:01:22,890 --> 00:01:25,590
each every server and start and if

00:01:24,210 --> 00:01:27,240
everything breaks they have to roll

00:01:25,590 --> 00:01:32,130
everything back manually so it's really

00:01:27,240 --> 00:01:34,560
really error-prone and then when

00:01:32,130 --> 00:01:37,140
something really breaks in production

00:01:34,560 --> 00:01:40,970
they find it very hard to fix things it

00:01:37,140 --> 00:01:40,970
takes a lot of time typically a few days

00:01:41,450 --> 00:01:46,979
so they figure that they need to animate

00:01:43,970 --> 00:01:48,420
and automation is key ok so you probably

00:01:46,979 --> 00:01:51,680
know the famous meme about automation

00:01:48,420 --> 00:01:54,479
it's it's their take about on it again

00:01:51,680 --> 00:01:56,040
given their love for cats so they

00:01:54,479 --> 00:01:57,750
started looking at all the processes

00:01:56,040 --> 00:02:02,759
they need to support to deploy their

00:01:57,750 --> 00:02:04,500
application and there's soon realized

00:02:02,759 --> 00:02:06,719
that realize that it's really about what

00:02:04,500 --> 00:02:08,700
we call workflows and triggers ok so a

00:02:06,719 --> 00:02:12,569
workflow is really something that you

00:02:08,700 --> 00:02:13,830
would do to support one of the steps in

00:02:12,569 --> 00:02:15,300
your applications life cycles

00:02:13,830 --> 00:02:16,740
and a triggers is something that

00:02:15,300 --> 00:02:19,350
triggers workflow okay so for example

00:02:16,740 --> 00:02:22,740
installation can be triggered manually

00:02:19,350 --> 00:02:24,210
by developer by an operator and the

00:02:22,740 --> 00:02:26,040
workflow is really the installation work

00:02:24,210 --> 00:02:29,160
for them going to talk about a second or

00:02:26,040 --> 00:02:30,390
for example scaling it's something that

00:02:29,160 --> 00:02:32,850
can be triggered based on specific

00:02:30,390 --> 00:02:35,160
metrics and thresholds that are being

00:02:32,850 --> 00:02:37,650
crossed and then it will be followed by

00:02:35,160 --> 00:02:39,630
a scaling workflow that would create the

00:02:37,650 --> 00:02:43,140
VMS install the right stuff on them

00:02:39,630 --> 00:02:45,780
joined make them join the cluster and so

00:02:43,140 --> 00:02:47,760
on so then they start to identify all

00:02:45,780 --> 00:02:49,920
the processes they need a support the

00:02:47,760 --> 00:02:51,990
first one is automated deployment and

00:02:49,920 --> 00:02:54,000
then start to analyze that and try to

00:02:51,990 --> 00:02:56,820
figure out first of all water trigger

00:02:54,000 --> 00:02:59,220
that and then second what is involved in

00:02:56,820 --> 00:03:02,010
in this workflow so trigger like I said

00:02:59,220 --> 00:03:03,990
is manual for example if you know that

00:03:02,010 --> 00:03:05,340
you have a new version to deploy or you

00:03:03,990 --> 00:03:08,090
want to set up a new environment for

00:03:05,340 --> 00:03:10,980
testing for production or what have you

00:03:08,090 --> 00:03:12,390
you can do it manually but then it can

00:03:10,980 --> 00:03:14,250
also be triggered from a CI server like

00:03:12,390 --> 00:03:16,260
Jenkins or Travis if you build your code

00:03:14,250 --> 00:03:20,340
you want to set up new environments and

00:03:16,260 --> 00:03:21,840
in fact many people actually use that as

00:03:20,340 --> 00:03:23,850
their trick as a trigger for their

00:03:21,840 --> 00:03:26,910
deployments and if you look at what the

00:03:23,850 --> 00:03:29,519
workflow needs to do during this step is

00:03:26,910 --> 00:03:31,170
not just about pushing the code to a new

00:03:29,519 --> 00:03:32,070
server it's all about setting up the

00:03:31,170 --> 00:03:34,620
environment so if you're using

00:03:32,070 --> 00:03:37,080
cloudstack it's about provisioning the

00:03:34,620 --> 00:03:39,360
resources and resources don't just mean

00:03:37,080 --> 00:03:41,459
compute servers it actually also means

00:03:39,360 --> 00:03:43,850
storage like block storage devices you

00:03:41,459 --> 00:03:46,590
want allocate or attached to your VMS

00:03:43,850 --> 00:03:48,120
network interfaces a lot of a lot of

00:03:46,590 --> 00:03:50,930
their deployments for example right now

00:03:48,120 --> 00:03:52,980
they have a DMZ and internal network

00:03:50,930 --> 00:03:54,630
with the use for the web servers and

00:03:52,980 --> 00:03:56,580
then another network for the database so

00:03:54,630 --> 00:03:58,110
provisioning an environment will mean to

00:03:56,580 --> 00:03:59,850
create all of those networks create

00:03:58,110 --> 00:04:02,700
routers between them attached to write V

00:03:59,850 --> 00:04:03,660
engine networks and that's just the

00:04:02,700 --> 00:04:05,640
first phase of creating the

00:04:03,660 --> 00:04:07,019
infrastructure the second phase of this

00:04:05,640 --> 00:04:09,390
flow is to configure the servers

00:04:07,019 --> 00:04:12,360
typically using shell scripts you know

00:04:09,390 --> 00:04:13,830
which most people use but also tools

00:04:12,360 --> 00:04:19,830
like share for puppet and more recently

00:04:13,830 --> 00:04:22,770
ansible or salt and essentially taking a

00:04:19,830 --> 00:04:25,560
vm and configuring properly once that is

00:04:22,770 --> 00:04:26,730
done making sure to push the right code

00:04:25,560 --> 00:04:28,530
onto it

00:04:26,730 --> 00:04:29,550
basically start the components and this

00:04:28,530 --> 00:04:30,720
is also something that you need to

00:04:29,550 --> 00:04:32,700
orchestrate because for example

00:04:30,720 --> 00:04:34,740
sometimes you just can't can start the

00:04:32,700 --> 00:04:36,210
web server before you start the database

00:04:34,740 --> 00:04:39,570
it needs to know about this location

00:04:36,210 --> 00:04:41,910
port number and all these things if you

00:04:39,570 --> 00:04:43,680
also take into consideration all of the

00:04:41,910 --> 00:04:45,180
kind of accompanying components the

00:04:43,680 --> 00:04:46,890
monitoring components and the log

00:04:45,180 --> 00:04:49,170
recreation components these are also

00:04:46,890 --> 00:04:50,550
things that you need to wire into this

00:04:49,170 --> 00:04:52,140
whole thing so it becomes a really

00:04:50,550 --> 00:04:55,350
complex process to orchestrate and set

00:04:52,140 --> 00:04:58,260
up the next work for the identified is

00:04:55,350 --> 00:05:00,420
infrastructure upgrade so this doesn't

00:04:58,260 --> 00:05:01,860
typically happen very very often but

00:05:00,420 --> 00:05:04,350
every once in a while I need to patch

00:05:01,860 --> 00:05:07,380
your OS and you know we all heard about

00:05:04,350 --> 00:05:08,850
the openness to sell stuff yesterday so

00:05:07,380 --> 00:05:11,700
this is the kind of event it makes you

00:05:08,850 --> 00:05:13,020
actually patch your OS it can also

00:05:11,700 --> 00:05:15,630
happen with your middle where your

00:05:13,020 --> 00:05:19,110
databases your web servers and so on and

00:05:15,630 --> 00:05:21,030
when that happens you usually would want

00:05:19,110 --> 00:05:22,920
to do that gradually so you don't take

00:05:21,030 --> 00:05:25,440
down the entire system so that will

00:05:22,920 --> 00:05:28,140
involve maybe taking down the relevant

00:05:25,440 --> 00:05:30,270
VMs or processes one by one apply the

00:05:28,140 --> 00:05:31,830
patch and reconnect them to the cluster

00:05:30,270 --> 00:05:34,200
again it's a workflow that you need to

00:05:31,830 --> 00:05:35,580
be able to do and at every point in this

00:05:34,200 --> 00:05:36,690
work for you need to actually check that

00:05:35,580 --> 00:05:38,070
things are working correctly and if

00:05:36,690 --> 00:05:41,820
they're if they don't you want to be

00:05:38,070 --> 00:05:44,430
able to roll them back next phase its

00:05:41,820 --> 00:05:47,190
code push so code pushes a bit different

00:05:44,430 --> 00:05:50,430
than infrastructure upgrade that

00:05:47,190 --> 00:05:51,720
typically happens much more often that's

00:05:50,430 --> 00:05:52,860
one thing that's different the other

00:05:51,720 --> 00:05:57,660
thing that's different is that we

00:05:52,860 --> 00:05:59,460
usually in terms of confidence that we

00:05:57,660 --> 00:06:00,750
have in our code is much lower than the

00:05:59,460 --> 00:06:03,810
degree of confidence that we have in

00:06:00,750 --> 00:06:05,760
patches or always upgrades because they

00:06:03,810 --> 00:06:10,110
tend to change a lot more often and are

00:06:05,760 --> 00:06:11,790
less tested by by by many people so

00:06:10,110 --> 00:06:13,740
again if we're doing continuous

00:06:11,790 --> 00:06:15,090
deployment that would be the CI server

00:06:13,740 --> 00:06:17,250
that will do it automatically for just

00:06:15,090 --> 00:06:19,200
in continuous delivery that would be

00:06:17,250 --> 00:06:21,420
done manually after we verified

00:06:19,200 --> 00:06:24,180
everything is working but that too can

00:06:21,420 --> 00:06:26,850
be quite a complex workflow so for

00:06:24,180 --> 00:06:29,010
example canary instance is one of the

00:06:26,850 --> 00:06:31,320
ways you can do that right so you can

00:06:29,010 --> 00:06:33,450
assign a certain instance that we call

00:06:31,320 --> 00:06:35,940
it can our instance deploy the new code

00:06:33,450 --> 00:06:38,550
to it verify that everything is working

00:06:35,940 --> 00:06:40,230
correctly and then if that is if that is

00:06:38,550 --> 00:06:42,720
okay push it to the rest of the

00:06:40,230 --> 00:06:45,720
if it's not okay roll attack there are

00:06:42,720 --> 00:06:47,880
red black or blue green deployment it's

00:06:45,720 --> 00:06:49,260
kind of a synonymous which is

00:06:47,880 --> 00:06:50,340
essentially when you're using a cloud

00:06:49,260 --> 00:06:52,320
you can do it you actually you can

00:06:50,340 --> 00:06:55,320
actually set up a whole new environment

00:06:52,320 --> 00:06:58,170
side by side with the existing one make

00:06:55,320 --> 00:06:59,760
some basic validations on top of that if

00:06:58,170 --> 00:07:02,550
everything goes well route the traffic

00:06:59,760 --> 00:07:04,410
to it keep the other one in place for a

00:07:02,550 --> 00:07:05,430
couple of hours a couple of days just to

00:07:04,410 --> 00:07:06,840
make sure things are running correctly

00:07:05,430 --> 00:07:10,080
and when you're sure that everything is

00:07:06,840 --> 00:07:12,390
okay take it down so these are just some

00:07:10,080 --> 00:07:14,730
of the strategies you need to be able to

00:07:12,390 --> 00:07:17,010
handle and again it's all a very very

00:07:14,730 --> 00:07:19,050
complex workflow that you need to go

00:07:17,010 --> 00:07:20,730
through and you need to be able to roll

00:07:19,050 --> 00:07:23,750
it back at any point in time okay so

00:07:20,730 --> 00:07:26,760
it's not just enough to do it manually

00:07:23,750 --> 00:07:29,360
the next piece of work flow is no

00:07:26,760 --> 00:07:32,430
failure and you know trigger is that

00:07:29,360 --> 00:07:34,890
this things tend to happen especially if

00:07:32,430 --> 00:07:36,180
you have a large deployment and what you

00:07:34,890 --> 00:07:38,490
need to do here is first detect that

00:07:36,180 --> 00:07:42,720
again typically using your monitoring

00:07:38,490 --> 00:07:45,000
systems provision new resources instead

00:07:42,720 --> 00:07:47,480
of the ones that failed attaching the

00:07:45,000 --> 00:07:50,730
storage to them attaching the network's

00:07:47,480 --> 00:07:52,710
reconfiguring your application or for

00:07:50,730 --> 00:07:54,690
example if using a load balancer and

00:07:52,710 --> 00:07:56,580
your web servers failed when the web

00:07:54,690 --> 00:07:57,930
server starts again you need to reattach

00:07:56,580 --> 00:08:00,660
it to the load balancer so it's

00:07:57,930 --> 00:08:04,260
available to your users if a database

00:08:00,660 --> 00:08:05,550
fails for example my sequel master fails

00:08:04,260 --> 00:08:08,010
you fail over to the SEC to the

00:08:05,550 --> 00:08:10,920
secondary node you need to notify all

00:08:08,010 --> 00:08:12,840
the related components about this new

00:08:10,920 --> 00:08:16,710
master so that the application keeps

00:08:12,840 --> 00:08:18,810
functioning correctly and the last bit

00:08:16,710 --> 00:08:20,630
of workflow is scaling so scaling is

00:08:18,810 --> 00:08:23,460
kind of the advancement advanced a

00:08:20,630 --> 00:08:27,330
mentioned is what you guys are doing

00:08:23,460 --> 00:08:28,890
next so this is kind of the next phase

00:08:27,330 --> 00:08:31,230
and what you want to do around

00:08:28,890 --> 00:08:33,750
automation typically what you would do

00:08:31,230 --> 00:08:36,900
it measure what we call SLA service

00:08:33,750 --> 00:08:39,840
level agreements these can be simple

00:08:36,900 --> 00:08:42,960
ones like CPU or memory or disk

00:08:39,840 --> 00:08:46,380
utilization they can be more application

00:08:42,960 --> 00:08:48,180
centric metrics or KPIs like the number

00:08:46,380 --> 00:08:50,970
of concurrent sessions that you have on

00:08:48,180 --> 00:08:52,200
your web server or the number of locks

00:08:50,970 --> 00:08:53,850
or connections that you have to your

00:08:52,200 --> 00:08:57,180
database and

00:08:53,850 --> 00:09:00,060
then as you identify those those metrics

00:08:57,180 --> 00:09:02,430
and breach some of the thresholds that

00:09:00,060 --> 00:09:03,990
you defined you want to be able to start

00:09:02,430 --> 00:09:09,120
new instances or just scale your

00:09:03,990 --> 00:09:10,949
application what that involve is also

00:09:09,120 --> 00:09:12,810
typically quite complex because it's not

00:09:10,949 --> 00:09:14,250
just enough to add for example you have

00:09:12,810 --> 00:09:17,490
a web server it's not just enough to add

00:09:14,250 --> 00:09:20,819
new nodes to the web server and install

00:09:17,490 --> 00:09:22,380
I know Jas on top of them you need to

00:09:20,819 --> 00:09:23,519
again reconfigure the load balancer it's

00:09:22,380 --> 00:09:26,339
kind of similar to failure you need to

00:09:23,519 --> 00:09:28,529
reconfigure a load balancer you need to

00:09:26,339 --> 00:09:30,300
push the right version of the code to

00:09:28,529 --> 00:09:32,490
those servers and you need to identify

00:09:30,300 --> 00:09:34,589
to actually notify the pendant notes for

00:09:32,490 --> 00:09:36,389
example if you're scaling and mongodb

00:09:34,589 --> 00:09:39,300
instance adding shards or a cassandra

00:09:36,389 --> 00:09:41,699
instance you want typically you want the

00:09:39,300 --> 00:09:44,880
clients that use those services to know

00:09:41,699 --> 00:09:46,440
about the changes okay it's the bottom

00:09:44,880 --> 00:09:49,019
line we have very complex set of

00:09:46,440 --> 00:09:52,380
triggers and workflows that we need to

00:09:49,019 --> 00:09:53,880
automate one thing to note here is that

00:09:52,380 --> 00:09:56,880
almost in every one of those workflows

00:09:53,880 --> 00:09:59,069
it just it was it just was enough to

00:09:56,880 --> 00:10:01,589
touch one of the tears right so I've

00:09:59,069 --> 00:10:04,110
typically i have three tiers or three

00:10:01,589 --> 00:10:05,819
layers in every everything that I do I

00:10:04,110 --> 00:10:08,939
have the application layer which is my

00:10:05,819 --> 00:10:11,550
code or my my schema for the database I

00:10:08,939 --> 00:10:13,350
have my middleware layer or the platform

00:10:11,550 --> 00:10:16,259
layer where I install the services like

00:10:13,350 --> 00:10:17,850
like the database and the web server and

00:10:16,259 --> 00:10:20,069
have the infrastructure layer which is

00:10:17,850 --> 00:10:21,899
kind of in our case it's cloudstack and

00:10:20,069 --> 00:10:23,870
every one of those workflows if you

00:10:21,899 --> 00:10:26,819
recall had to touch in it to manipulate

00:10:23,870 --> 00:10:28,470
all of these tears together right so

00:10:26,819 --> 00:10:31,680
it's not enough usually when people

00:10:28,470 --> 00:10:32,910
think about for example DevOps you know

00:10:31,680 --> 00:10:35,009
they tend to think about chef and pop

00:10:32,910 --> 00:10:36,329
and configuring servers but what about

00:10:35,009 --> 00:10:38,370
the application on top of the whatever

00:10:36,329 --> 00:10:40,560
the code pushes when people think about

00:10:38,370 --> 00:10:42,449
operations they tend to think about this

00:10:40,560 --> 00:10:44,130
layer or even below that right the

00:10:42,449 --> 00:10:46,019
physical infrastructure but what about

00:10:44,130 --> 00:10:47,490
the what about these things so

00:10:46,019 --> 00:10:52,110
everything that you do need to involve

00:10:47,490 --> 00:10:54,750
and it can pass all of those layers okay

00:10:52,110 --> 00:10:56,730
so basically that's let's now look at a

00:10:54,750 --> 00:10:58,259
bit of the tools if we look at the you

00:10:56,730 --> 00:11:00,420
know the all the concerns that i just

00:10:58,259 --> 00:11:03,059
mentioned put them on kind of this

00:11:00,420 --> 00:11:04,410
continuum we have environment creation

00:11:03,059 --> 00:11:06,809
and infrastructure and set up code

00:11:04,410 --> 00:11:07,769
pushes monitoring an alarming repairing

00:11:06,809 --> 00:11:09,899
and scaling

00:11:07,769 --> 00:11:14,160
and let's look at some tools that do at

00:11:09,899 --> 00:11:17,249
least some of these things so when it

00:11:14,160 --> 00:11:19,319
comes to orchestration tools I know a

00:11:17,249 --> 00:11:20,639
few and other clouds like heat if you

00:11:19,319 --> 00:11:23,819
guys if anyone in familiar with eight

00:11:20,639 --> 00:11:25,410
from heat from OpenStack okay so that's

00:11:23,819 --> 00:11:28,379
doing anything similar that we have for

00:11:25,410 --> 00:11:32,970
CloudStack still okay excellent

00:11:28,379 --> 00:11:35,429
excellent and the cloud formation which

00:11:32,970 --> 00:11:37,290
I assume most of you guys know from AWS

00:11:35,429 --> 00:11:40,170
what these are very good at is

00:11:37,290 --> 00:11:41,519
essentially having a blueprint for all

00:11:40,170 --> 00:11:43,589
the infrastructure that you will need

00:11:41,519 --> 00:11:47,249
for a specific application or a specific

00:11:43,589 --> 00:11:52,199
deployment so it's very good at creating

00:11:47,249 --> 00:11:54,209
your environment networks the MS Walk

00:11:52,199 --> 00:11:57,209
storage devices load balancer

00:11:54,209 --> 00:11:59,279
configuration and so on they can trigger

00:11:57,209 --> 00:12:01,230
tools like chef for puppet or bash

00:11:59,279 --> 00:12:03,119
scripts but you know it doesn't feel

00:12:01,230 --> 00:12:05,759
that natural and it's not really the

00:12:03,119 --> 00:12:07,379
best way to do that just one comment

00:12:05,759 --> 00:12:09,389
about all these tools you'd probably be

00:12:07,379 --> 00:12:10,949
able to do most of this stuff with each

00:12:09,389 --> 00:12:14,339
one of these tools you just have to work

00:12:10,949 --> 00:12:17,579
very hard to do that then we have CM

00:12:14,339 --> 00:12:20,939
tools we're kind of in a very

00:12:17,579 --> 00:12:22,529
interesting times today you know we used

00:12:20,939 --> 00:12:26,369
to have just pop it in chef and we have

00:12:22,529 --> 00:12:29,429
a lot more new players in the stack we

00:12:26,369 --> 00:12:31,619
have salt we have ansible we have juju

00:12:29,429 --> 00:12:35,220
from ubuntu and i'm sure I'm kind of

00:12:31,619 --> 00:12:37,799
missing a few more here and see if

00:12:35,220 --> 00:12:39,959
engine also sorry you know fancy engine

00:12:37,799 --> 00:12:43,589
CF engineer and they mentioned that so a

00:12:39,959 --> 00:12:47,339
lot of tools that typically do kind of

00:12:43,589 --> 00:12:50,009
the same thing basically here's a server

00:12:47,339 --> 00:12:51,389
here's a note this is where it is now

00:12:50,009 --> 00:12:52,949
this is where I want it to be and

00:12:51,389 --> 00:12:55,799
basically these tools can do the magic

00:12:52,949 --> 00:12:58,049
under the hood to to be able to bring it

00:12:55,799 --> 00:13:00,959
from one state to another so they're

00:12:58,049 --> 00:13:03,119
very good at this basically configuring

00:13:00,959 --> 00:13:06,899
the environment and installing packages

00:13:03,119 --> 00:13:08,879
and so on some of them can do this and

00:13:06,899 --> 00:13:10,949
automate it although it's not their

00:13:08,879 --> 00:13:12,919
primary targets for example ansible has

00:13:10,949 --> 00:13:16,799
some very nice packages around amazon

00:13:12,919 --> 00:13:18,929
but it's not their primary concern you

00:13:16,799 --> 00:13:20,999
can and I know a lot of companies that

00:13:18,929 --> 00:13:21,650
actually implement code pushes with chef

00:13:20,999 --> 00:13:24,000
for

00:13:21,650 --> 00:13:27,360
but again you have to kind of do a lot

00:13:24,000 --> 00:13:30,060
of loud work around it to be able to

00:13:27,360 --> 00:13:31,680
support that you know because chef

00:13:30,060 --> 00:13:33,870
wasn't really designed for that it's not

00:13:31,680 --> 00:13:34,890
push based it's actually pull Bay so you

00:13:33,870 --> 00:13:36,870
have this you have to have the chef

00:13:34,890 --> 00:13:38,940
client wake up every once in a while

00:13:36,870 --> 00:13:42,000
look at some state understand that it's

00:13:38,940 --> 00:13:44,220
changed pulled the code and so on and

00:13:42,000 --> 00:13:46,770
some of them can do repairing at a very

00:13:44,220 --> 00:13:48,300
basic level so for example again chef or

00:13:46,770 --> 00:13:51,300
puppet if you run them every once in a

00:13:48,300 --> 00:13:52,710
while and they identify that something

00:13:51,300 --> 00:13:54,870
is not as it should be for example a

00:13:52,710 --> 00:13:57,120
certain process is not up and running

00:13:54,870 --> 00:13:59,730
they would start it for you they would

00:13:57,120 --> 00:14:02,100
not be able to do repairing of anything

00:13:59,730 --> 00:14:04,590
beyond the vm scope or the host scope if

00:14:02,100 --> 00:14:08,970
an entire vm fails it's not the right

00:14:04,590 --> 00:14:10,890
tool to handle that some other

00:14:08,970 --> 00:14:13,200
automation tools that are again very

00:14:10,890 --> 00:14:15,510
good at i actually put salt and ants

00:14:13,200 --> 00:14:18,120
about here as well because they go a bit

00:14:15,510 --> 00:14:19,230
beyond just a configuration manager

00:14:18,120 --> 00:14:21,410
they're actually push bay so you can

00:14:19,230 --> 00:14:23,250
actually do some orchestration with them

00:14:21,410 --> 00:14:25,620
again they're very good its

00:14:23,250 --> 00:14:27,830
infrastructure setup it's very easy to

00:14:25,620 --> 00:14:31,340
implement code pushes with them as well

00:14:27,830 --> 00:14:34,140
fabre Capistrano anyone using them here

00:14:31,340 --> 00:14:37,110
alright ever anyone know you guys know

00:14:34,140 --> 00:14:41,310
fabric Oracle okay yeah so these are

00:14:37,110 --> 00:14:42,630
basically kind of remote distributed

00:14:41,310 --> 00:14:45,210
remote execution framework so you can

00:14:42,630 --> 00:14:50,120
execute actually commands with them very

00:14:45,210 --> 00:14:53,790
easily and of course monitoring right so

00:14:50,120 --> 00:14:56,870
a lot of tools there I just put in some

00:14:53,790 --> 00:15:00,240
that we use right rimas avex xenos

00:14:56,870 --> 00:15:02,310
graphite nagios of course i guess most

00:15:00,240 --> 00:15:04,920
of you guys have used it sometime in the

00:15:02,310 --> 00:15:07,080
past i also put locks this year because

00:15:04,920 --> 00:15:08,550
a lot of our users actually is locked

00:15:07,080 --> 00:15:11,550
such not just at La gregation forever

00:15:08,550 --> 00:15:13,200
but also the monitoring framework one of

00:15:11,550 --> 00:15:15,240
the interesting things things you can do

00:15:13,200 --> 00:15:17,760
with logging and actually I hope to show

00:15:15,240 --> 00:15:20,580
during the demo is you can aggregate you

00:15:17,760 --> 00:15:23,490
can make your applications amid

00:15:20,580 --> 00:15:24,930
structured log messages and take these

00:15:23,490 --> 00:15:26,100
messages and aggregate them and collect

00:15:24,930 --> 00:15:27,600
them understand things about your

00:15:26,100 --> 00:15:29,280
business so for example every time user

00:15:27,600 --> 00:15:31,560
logs into the system there's a very

00:15:29,280 --> 00:15:33,870
specific log message that gets submitted

00:15:31,560 --> 00:15:35,110
this tool can actually aggregate that

00:15:33,870 --> 00:15:36,240
push it for example to

00:15:35,110 --> 00:15:39,130
search and then you can actually

00:15:36,240 --> 00:15:40,930
understand for example the the behavior

00:15:39,130 --> 00:15:42,880
over time of this specific event so you

00:15:40,930 --> 00:15:44,950
have a business metric which you can act

00:15:42,880 --> 00:15:46,240
upon so it's not just about logging it's

00:15:44,950 --> 00:15:48,930
actually about collecting metrics that

00:15:46,240 --> 00:15:50,950
you cannot collect in any other way

00:15:48,930 --> 00:15:54,760
Raymond is actually another interesting

00:15:50,950 --> 00:15:56,380
tool and I'm going to talk about that as

00:15:54,760 --> 00:15:59,820
well or I'm going to show it as well and

00:15:56,380 --> 00:16:02,230
I want sorry man anyone heard about it

00:15:59,820 --> 00:16:09,370
you guys yeah the guys from Switzerland

00:16:02,230 --> 00:16:11,310
me as the riemann is a i would say how

00:16:09,370 --> 00:16:13,510
would you best define it like an event

00:16:11,310 --> 00:16:16,019
aggregation framework that lets it

00:16:13,510 --> 00:16:18,490
straight an enclosure it lets you define

00:16:16,019 --> 00:16:21,010
rules kind of rules to process

00:16:18,490 --> 00:16:24,600
monitoring events and to make sense of

00:16:21,010 --> 00:16:27,190
them so for example group together

00:16:24,600 --> 00:16:30,959
certain events for a specific window of

00:16:27,190 --> 00:16:34,899
time then send them over to another pipe

00:16:30,959 --> 00:16:37,899
placing your input send alerts based on

00:16:34,899 --> 00:16:40,360
that feed metrics into graphite do a

00:16:37,899 --> 00:16:41,740
bunch of other interesting things so

00:16:40,360 --> 00:16:43,740
that's another tool that we're pretty

00:16:41,740 --> 00:16:45,610
excited about just that's why funny here

00:16:43,740 --> 00:16:47,500
anyway so the bottom line here is that

00:16:45,610 --> 00:16:49,570
we have all these tools and each one of

00:16:47,500 --> 00:16:51,730
them does one thing very very well

00:16:49,570 --> 00:16:54,220
specifically maybe some other things not

00:16:51,730 --> 00:16:55,959
as well and when you want a kind of

00:16:54,220 --> 00:16:58,060
cater for all of the workflows and

00:16:55,959 --> 00:17:00,370
requirements that I've talked about

00:16:58,060 --> 00:17:02,949
before you'd have to do a lot of hard

00:17:00,370 --> 00:17:05,169
manual work okay so if you want to be

00:17:02,949 --> 00:17:08,980
here where everything is working nice

00:17:05,169 --> 00:17:12,760
and and and you know all of your faces

00:17:08,980 --> 00:17:15,850
here are covered with nice smileys you'd

00:17:12,760 --> 00:17:18,130
have to do a lot of kind of gluing work

00:17:15,850 --> 00:17:22,660
right love glue code to be able to

00:17:18,130 --> 00:17:26,520
handle that so I'm going to take a step

00:17:22,660 --> 00:17:30,700
back and look look at for example AWS so

00:17:26,520 --> 00:17:32,740
with AWS if we look at their tool chain

00:17:30,700 --> 00:17:35,890
we mentioned cloud formation which is

00:17:32,740 --> 00:17:37,480
kind of here around orchestration

00:17:35,890 --> 00:17:39,220
infrastructure or consideration we have

00:17:37,480 --> 00:17:42,309
of course the basic API switch you can

00:17:39,220 --> 00:17:44,950
use without using any orchestration tool

00:17:42,309 --> 00:17:46,450
just right call yourself and then we

00:17:44,950 --> 00:17:48,010
have kind of the higher level services

00:17:46,450 --> 00:17:48,730
right so we have been stuck here which

00:17:48,010 --> 00:17:50,169
is which is

00:17:48,730 --> 00:17:52,260
they don't call it that way but it's

00:17:50,169 --> 00:17:54,730
really a proper platform-as-a-service

00:17:52,260 --> 00:17:56,919
very similar to cloud foundry or open

00:17:54,730 --> 00:17:59,049
shift and there's the new kid on the

00:17:56,919 --> 00:18:02,549
block which is AWS opsworks relatively

00:17:59,049 --> 00:18:05,020
new it's already a year old or even more

00:18:02,549 --> 00:18:07,660
and i would say opsworks is kind of the

00:18:05,020 --> 00:18:10,780
closest thing that we have to basically

00:18:07,660 --> 00:18:19,270
providing all this glue around those

00:18:10,780 --> 00:18:21,630
those tools so CTO Verner Vogel's calls

00:18:19,270 --> 00:18:24,190
a DevOps automation he's a CTO of Amazon

00:18:21,630 --> 00:18:29,620
and the idea is very simple you define

00:18:24,190 --> 00:18:31,360
stacks so stacks is basically the way

00:18:29,620 --> 00:18:35,200
your application is structured so if we

00:18:31,360 --> 00:18:36,400
remember the the picture or the diagram

00:18:35,200 --> 00:18:39,630
from the beginning of the top where you

00:18:36,400 --> 00:18:43,290
have all these boxes and all these tools

00:18:39,630 --> 00:18:46,059
you actually modeled them as a stack and

00:18:43,290 --> 00:18:50,559
identify how they interconnect with one

00:18:46,059 --> 00:18:52,600
another and then basically within within

00:18:50,559 --> 00:18:54,400
the stack of those layers which are

00:18:52,600 --> 00:18:56,440
basically your web server your database

00:18:54,400 --> 00:18:59,740
it for each layer define how you want to

00:18:56,440 --> 00:19:03,640
install it typically obvious sorry

00:18:59,740 --> 00:19:05,590
absorb supports chef for that how many

00:19:03,640 --> 00:19:07,660
instances you want off of it whether or

00:19:05,590 --> 00:19:09,730
not you want some metrics to go into a

00:19:07,660 --> 00:19:11,890
cloud watch to be able to monitor this

00:19:09,730 --> 00:19:15,549
stuff so it's a very similar concept

00:19:11,890 --> 00:19:18,730
what I just described taylormade to the

00:19:15,549 --> 00:19:20,830
Amazon or AWS toolchain think with that

00:19:18,730 --> 00:19:23,860
is also it's a bit it's a bit too rigid

00:19:20,830 --> 00:19:25,210
it has a very specific lifecycle it has

00:19:23,860 --> 00:19:26,530
very specific workflows you can

00:19:25,210 --> 00:19:27,610
typically kind of deal with them so if

00:19:26,530 --> 00:19:29,320
you want to tweak the workflow for

00:19:27,610 --> 00:19:32,230
example if you have a continuous

00:19:29,320 --> 00:19:34,809
deployment workflow and you want to

00:19:32,230 --> 00:19:37,210
tweak it you cannot do it here now if

00:19:34,809 --> 00:19:39,190
you want to tweak the way they recover

00:19:37,210 --> 00:19:40,960
from failure and stuff like that it's

00:19:39,190 --> 00:19:42,610
not really something you can control its

00:19:40,960 --> 00:19:47,130
kind of built into the platform it's

00:19:42,610 --> 00:19:50,799
hard coded so the idea beyond clarify is

00:19:47,130 --> 00:19:54,340
again take these concept and basically

00:19:50,799 --> 00:19:55,600
build a tool that will integrate the

00:19:54,340 --> 00:19:59,740
tool change that you're using whether

00:19:55,600 --> 00:20:02,530
it's chef or puppet or salt the cloud

00:19:59,740 --> 00:20:03,550
that you want to have okay so cloudstack

00:20:02,530 --> 00:20:06,010
we are natively integrate with

00:20:03,550 --> 00:20:08,320
cloudstack for both I'm going to talk

00:20:06,010 --> 00:20:10,450
about the versions later but we've done

00:20:08,320 --> 00:20:13,600
some work around that for both are

00:20:10,450 --> 00:20:15,630
existing in our future version with help

00:20:13,600 --> 00:20:17,680
with the kind of half of Sebastian and

00:20:15,630 --> 00:20:20,380
I'm going to talk about that as well

00:20:17,680 --> 00:20:24,910
using lip cloud and Jay clouds for the

00:20:20,380 --> 00:20:26,710
other version so the idea behind that is

00:20:24,910 --> 00:20:28,240
to have it as open as possible okay and

00:20:26,710 --> 00:20:31,030
open source platform obviously it's it's

00:20:28,240 --> 00:20:34,180
a licensed under Apache to be able to

00:20:31,030 --> 00:20:35,800
define custom workflows have a few work

00:20:34,180 --> 00:20:37,870
flows out of the box of course but VN go

00:20:35,800 --> 00:20:41,530
to define custom workflows and custard

00:20:37,870 --> 00:20:43,840
triggers for those workflows not just

00:20:41,530 --> 00:20:45,730
limited to chef of course because as you

00:20:43,840 --> 00:20:48,430
mentioned as you rightly mentioned chef

00:20:45,730 --> 00:20:49,900
might be maybe I know five percent or if

00:20:48,430 --> 00:20:52,140
you're if you're kind of optimistic here

00:20:49,900 --> 00:20:55,810
from the whole kind of automation market

00:20:52,140 --> 00:20:57,970
and have opened monitoring and policies

00:20:55,810 --> 00:21:00,120
right so if I'm using zabbix I want to

00:20:57,970 --> 00:21:02,260
be able to attach that if I'm using

00:21:00,120 --> 00:21:04,150
nagios maybe that's the thing I want to

00:21:02,260 --> 00:21:05,620
use if I'm using stats d I want to

00:21:04,150 --> 00:21:07,420
connect that and I want to be able to

00:21:05,620 --> 00:21:08,710
define my policy is based on that okay

00:21:07,420 --> 00:21:10,570
so that's that's for example we'll use

00:21:08,710 --> 00:21:12,430
Riemann for so you can use reman to

00:21:10,570 --> 00:21:16,660
actually find those policies for your

00:21:12,430 --> 00:21:19,840
tools before I jump to the demo the the

00:21:16,660 --> 00:21:23,680
basic idea is to have an application

00:21:19,840 --> 00:21:26,430
blueprint kind of like a stack if you

00:21:23,680 --> 00:21:28,810
will with opsworks and the blueprint is

00:21:26,430 --> 00:21:31,270
divided into three parts the first part

00:21:28,810 --> 00:21:32,890
is the topology describing the

00:21:31,270 --> 00:21:35,680
components in their relationships

00:21:32,890 --> 00:21:38,080
between the components for example to

00:21:35,680 --> 00:21:42,280
web server two Tomcats or to know GS

00:21:38,080 --> 00:21:43,720
instances connected to one s

00:21:42,280 --> 00:21:45,430
instance which is connected to two more

00:21:43,720 --> 00:21:47,710
go to instances and that's how they

00:21:45,430 --> 00:21:50,440
deepen and wander and that's a topology

00:21:47,710 --> 00:21:52,810
in other topology is not just about your

00:21:50,440 --> 00:21:54,130
application components about everything

00:21:52,810 --> 00:21:56,500
that's related to your application so

00:21:54,130 --> 00:22:00,910
it's about the VMS about the network's

00:21:56,500 --> 00:22:04,510
about the routers to connect them about

00:22:00,910 --> 00:22:06,250
the storage medium and again and then

00:22:04,510 --> 00:22:07,690
later the application components in

00:22:06,250 --> 00:22:11,470
module on top of them this is this is a

00:22:07,690 --> 00:22:15,100
complete topology then there are

00:22:11,470 --> 00:22:16,360
workflows actually maybe I can show what

00:22:15,100 --> 00:22:19,780
a topology looks like if

00:22:16,360 --> 00:22:23,020
or the demo so this is a topology right

00:22:19,780 --> 00:22:25,780
for example and we're going to see it in

00:22:23,020 --> 00:22:28,450
a live demo in a second so we have here

00:22:25,780 --> 00:22:29,920
for example the tier and then within the

00:22:28,450 --> 00:22:31,809
tier we have host within the host we

00:22:29,920 --> 00:22:34,960
have servers or middleware and within

00:22:31,809 --> 00:22:37,000
the server's we have modules which

00:22:34,960 --> 00:22:38,530
connect to another host again which has

00:22:37,000 --> 00:22:41,710
another module within it and that's

00:22:38,530 --> 00:22:44,200
that's how it's all layered again you

00:22:41,710 --> 00:22:46,330
have networks and you have storage

00:22:44,200 --> 00:22:55,780
mediums so it's all part of your

00:22:46,330 --> 00:22:58,750
topology just go back here how am i

00:22:55,780 --> 00:23:00,190
doing in time by the way five minutes

00:22:58,750 --> 00:23:02,410
all right okay so we should just done to

00:23:00,190 --> 00:23:03,910
them so we've workflows which describe

00:23:02,410 --> 00:23:05,770
the work force damage just mentioned in

00:23:03,910 --> 00:23:07,570
policies that actually control how you

00:23:05,770 --> 00:23:09,580
trigger those workflows and the

00:23:07,570 --> 00:23:11,350
workflows basically manipulate the

00:23:09,580 --> 00:23:14,080
topology if you are right so a workflow

00:23:11,350 --> 00:23:16,990
would add instances topology removing

00:23:14,080 --> 00:23:20,710
this front apology and so on so the damn

00:23:16,990 --> 00:23:23,620
i'm going to show now is actually the

00:23:20,710 --> 00:23:26,200
next release of our platform so we're

00:23:23,620 --> 00:23:27,820
basic using XO scale which is probably

00:23:26,200 --> 00:23:30,160
the best and most reliable cloudstack

00:23:27,820 --> 00:23:32,710
public cloud then I know what we've done

00:23:30,160 --> 00:23:35,549
is we've instantiated a management

00:23:32,710 --> 00:23:39,370
server on one of the exascale servers

00:23:35,549 --> 00:23:42,880
and then we've used let me see where I'm

00:23:39,370 --> 00:23:45,490
hearing it and then we've used we have a

00:23:42,880 --> 00:23:47,679
blueprint here okay so we took a

00:23:45,490 --> 00:23:51,510
blueprint this is the blueprint and let

00:23:47,679 --> 00:23:54,850
me show it to you kind of simple over

00:23:51,510 --> 00:23:56,559
here ok so it's kind of just the ammo

00:23:54,850 --> 00:23:58,540
file not going to get into deals but

00:23:56,559 --> 00:24:02,410
just so you see how easy it is you

00:23:58,540 --> 00:24:03,940
define the name of the blueprint and the

00:24:02,410 --> 00:24:06,340
tears that compose it right so we have

00:24:03,940 --> 00:24:09,490
vm that hosts we have a vm the

00:24:06,340 --> 00:24:12,820
host node and on top of the vm we

00:24:09,490 --> 00:24:14,710
have the de instance and top of

00:24:12,820 --> 00:24:16,630
the node vm we have the no GS instance

00:24:14,710 --> 00:24:19,750
and within the no GF GS we have an

00:24:16,630 --> 00:24:21,910
application it's it's a demo no Jess

00:24:19,750 --> 00:24:23,919
application called note seller if you

00:24:21,910 --> 00:24:25,360
want to learn Express and no then

00:24:23,919 --> 00:24:28,690
bootstrap and all that stuff it's kind

00:24:25,360 --> 00:24:30,130
of nice so we took this blueprint we

00:24:28,690 --> 00:24:33,490
uploaded it to the server

00:24:30,130 --> 00:24:35,890
using this command and we basically see

00:24:33,490 --> 00:24:37,420
it over here okay so this is my

00:24:35,890 --> 00:24:38,710
blueprint it kind of describes a

00:24:37,420 --> 00:24:40,360
topology it's much simpler than the one

00:24:38,710 --> 00:24:43,300
I showed you the slide okay because you

00:24:40,360 --> 00:24:47,740
know for the sake of simplicity so we

00:24:43,300 --> 00:24:49,780
have a vm then OGS within it these are

00:24:47,740 --> 00:24:52,030
instances the app module and this is

00:24:49,780 --> 00:24:53,920
actually dependent on the do state

00:24:52,030 --> 00:24:55,840
inside the MongoDB a very simple

00:24:53,920 --> 00:24:59,200
topology obviously it can get much more

00:24:55,840 --> 00:25:02,230
complex with networks and and routes and

00:24:59,200 --> 00:25:06,430
all that stuff the next thing we do is

00:25:02,230 --> 00:25:10,410
we actually were is it over here we

00:25:06,430 --> 00:25:10,410
create a deployment of that topology and

00:25:10,530 --> 00:25:16,740
deployment basically is think of it as

00:25:12,880 --> 00:25:20,650
an instantiation of desire to eat

00:25:16,740 --> 00:25:21,790
instantiation of the topology and for

00:25:20,650 --> 00:25:23,950
each such deployment we can actually

00:25:21,790 --> 00:25:25,420
start triggering workflows manually okay

00:25:23,950 --> 00:25:26,950
so in this case we have two simple

00:25:25,420 --> 00:25:29,290
workflows install and uninstall which

00:25:26,950 --> 00:25:31,630
basically traverse the topology and

00:25:29,290 --> 00:25:35,350
materialize it okay the materialization

00:25:31,630 --> 00:25:38,080
of the topology is done very in a very

00:25:35,350 --> 00:25:41,350
high level through Python agents that

00:25:38,080 --> 00:25:43,690
receive tasks over a message queue and

00:25:41,350 --> 00:25:45,700
invoke what we call plugins plugins are

00:25:43,690 --> 00:25:48,880
basically pieces of code pieces of

00:25:45,700 --> 00:25:51,970
Python code or bash code or chef coat do

00:25:48,880 --> 00:25:55,000
specific operations so for example we

00:25:51,970 --> 00:25:58,180
have now in this demo we have a python

00:25:55,000 --> 00:26:01,960
agent that invokes lib cloud to create

00:25:58,180 --> 00:26:02,920
all of the instances on cloudstack then

00:26:01,960 --> 00:26:05,290
on top of that we have a bash script

00:26:02,920 --> 00:26:07,360
that fetches MongoDB from internet

00:26:05,290 --> 00:26:10,600
unpacks and installs and local machine

00:26:07,360 --> 00:26:14,650
and once we invoke this topology we

00:26:10,600 --> 00:26:15,640
basically have it materialized here so

00:26:14,650 --> 00:26:18,280
we see that everything is kind of

00:26:15,640 --> 00:26:20,440
running and green one out of one we also

00:26:18,280 --> 00:26:22,360
have very nice log aggregation on task

00:26:20,440 --> 00:26:24,340
aggregation framework here this is

00:26:22,360 --> 00:26:26,740
actually based on elastic search so part

00:26:24,340 --> 00:26:29,310
of the platform is actually deploying

00:26:26,740 --> 00:26:32,880
log stash on each of those boxes and

00:26:29,310 --> 00:26:35,500
pushing the events into elasticsearch

00:26:32,880 --> 00:26:38,440
and then basically being able to

00:26:35,500 --> 00:26:40,030
visualize and trace those events there's

00:26:38,440 --> 00:26:43,960
a more detailed view for that let me

00:26:40,030 --> 00:26:48,250
just filter it out here

00:26:43,960 --> 00:26:51,220
and it's fetching that crossing my

00:26:48,250 --> 00:26:52,750
fingers yeah all right so these are the

00:26:51,220 --> 00:26:55,210
events right so you can see also i can

00:26:52,750 --> 00:26:58,330
see proper tasks that were sent and I

00:26:55,210 --> 00:27:02,590
can also see logging events so for

00:26:58,330 --> 00:27:05,140
example here we can see a task that an

00:27:02,590 --> 00:27:07,840
installed tasks that said that installs

00:27:05,140 --> 00:27:09,100
the no GA then OGS vm and here i can see

00:27:07,840 --> 00:27:10,570
that succeeded so I have very good

00:27:09,100 --> 00:27:12,970
tracing about what's going on the

00:27:10,570 --> 00:27:16,750
platform obviously I can also see and

00:27:12,970 --> 00:27:21,520
trace those events from the CLI I just

00:27:16,750 --> 00:27:25,450
saw you guys yeah ok so I can fetch the

00:27:21,520 --> 00:27:26,980
events oops this is probably wrong

00:27:25,450 --> 00:27:29,920
defining any way I can fetch the events

00:27:26,980 --> 00:27:33,130
using the CLI and verbose or just simple

00:27:29,920 --> 00:27:34,660
format and as you move forward obviously

00:27:33,130 --> 00:27:37,330
what we can do is we i can add more

00:27:34,660 --> 00:27:39,430
workflows for scaling for continuous

00:27:37,330 --> 00:27:40,470
delivery and so on that's part of the

00:27:39,430 --> 00:27:43,870
things we're playing to the web platform

00:27:40,470 --> 00:27:47,010
so i'm just going to end with one thing

00:27:43,870 --> 00:27:52,000
here the platform itself is just

00:27:47,010 --> 00:27:54,310
available on get cloudy file org the the

00:27:52,000 --> 00:27:55,710
version die schöne now is in beta ok

00:27:54,310 --> 00:27:58,780
it's all available of course on github

00:27:55,710 --> 00:28:00,820
some of the pieces here are most of the

00:27:58,780 --> 00:28:03,100
pieces you are open source there will be

00:28:00,820 --> 00:28:04,210
some commercial features obviously

00:28:03,100 --> 00:28:08,140
because we need to make money off of

00:28:04,210 --> 00:28:11,860
something and again we encourage you

00:28:08,140 --> 00:28:13,300
guys to give it a try download see for

00:28:11,860 --> 00:28:23,980
it so it's very easy to install and

00:28:13,300 --> 00:28:26,820
setup no time for questions right or we

00:28:23,980 --> 00:28:26,820
get time for questions

00:28:29,170 --> 00:28:36,130
oh yeah sure sure so what one thing you

00:28:34,180 --> 00:28:38,080
can do will actually we've done it for

00:28:36,130 --> 00:28:40,450
one of our users and we're going to open

00:28:38,080 --> 00:28:42,460
source very soon so one of the plugins

00:28:40,450 --> 00:28:44,230
that you can have as part the topology

00:28:42,460 --> 00:28:47,290
is very flexible so you can define any

00:28:44,230 --> 00:28:48,550
kind of type within the topology and put

00:28:47,290 --> 00:28:50,650
it in your blueprint so you can have a

00:28:48,550 --> 00:28:53,350
docker container type and think it's

00:28:50,650 --> 00:28:55,150
just another box within the vm and put

00:28:53,350 --> 00:28:56,470
your stuff on top of that so definitely

00:28:55,150 --> 00:29:03,970
something that some of our users have

00:28:56,470 --> 00:29:08,110
already done more questions come on

00:29:03,970 --> 00:29:10,240
don't be shy I have one you mentioned

00:29:08,110 --> 00:29:12,820
that you have elastic search in there

00:29:10,240 --> 00:29:15,430
and then reman and so on yeah I mean so

00:29:12,820 --> 00:29:17,470
doesn't that make it difficult to deploy

00:29:15,430 --> 00:29:19,300
cloud if I if you have lots of food

00:29:17,470 --> 00:29:21,040
packages that come up with employment is

00:29:19,300 --> 00:29:23,020
very simple deployment is just a matter

00:29:21,040 --> 00:29:26,830
of actually if you probably have a

00:29:23,020 --> 00:29:28,360
command in my history that's what the

00:29:26,830 --> 00:29:30,850
deployment is like it's one command

00:29:28,360 --> 00:29:33,010
we've actually package everything into a

00:29:30,850 --> 00:29:35,650
self-sustained package no external

00:29:33,010 --> 00:29:38,590
dependencies what this does is basically

00:29:35,650 --> 00:29:41,080
start the vm on CloudStack fetches the

00:29:38,590 --> 00:29:43,440
package from the internet unpacks it and

00:29:41,080 --> 00:29:43,440
you're done

00:29:51,879 --> 00:29:57,919
so at this point user would a user would

00:29:54,710 --> 00:29:59,629
manage its his deployments on git

00:29:57,919 --> 00:30:01,970
repositories up and virtue version it

00:29:59,629 --> 00:30:03,169
through there one of the next thing

00:30:01,970 --> 00:30:04,549
we're going to do is actually integrate

00:30:03,169 --> 00:30:07,759
with get so you can actually take

00:30:04,549 --> 00:30:19,730
deployments from a specific version or

00:30:07,759 --> 00:30:22,009
branch or yeah you can you can actually

00:30:19,730 --> 00:30:27,019
update a blueprint okay so you can you

00:30:22,009 --> 00:30:28,759
can update a blue print command some of

00:30:27,019 --> 00:30:30,830
the few already have a deployment that's

00:30:28,759 --> 00:30:32,210
running for that blueprint you would you

00:30:30,830 --> 00:30:34,580
you'd be able to update some of the

00:30:32,210 --> 00:30:37,190
things not all of them but essentially

00:30:34,580 --> 00:30:41,360
what we can support we can we actually

00:30:37,190 --> 00:30:44,649
allow it to do that cool thanks again

00:30:41,360 --> 00:30:44,649

YouTube URL: https://www.youtube.com/watch?v=qImLp1bwqZQ


