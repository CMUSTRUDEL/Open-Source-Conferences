Title: Apache Stratos Incubating - Samisa Abeysinghe
Publication date: 2014-04-24
Playlist: CloudStack Collaboration Conference North America 2014
Description: 
	CloudStack Collaboration Conference North America 2014
Captions: 
	00:00:00,060 --> 00:00:04,920
good afternoon everyone so I'm here to

00:00:02,429 --> 00:00:07,200
talk about Apache Stratos which is an

00:00:04,920 --> 00:00:09,719
Apache project which is a platform as a

00:00:07,200 --> 00:00:12,630
service framework

00:00:09,719 --> 00:00:14,759
I am from WS o - W is an open-source

00:00:12,630 --> 00:00:20,340
middleware company we work very closely

00:00:14,759 --> 00:00:22,470
with Apogee on multiple projects however

00:00:20,340 --> 00:00:24,269
I'm not going to talk about WEC - today

00:00:22,470 --> 00:00:28,680
I'm predominantly going to talk about a

00:00:24,269 --> 00:00:31,080
party status so as I mentioned a bunch

00:00:28,680 --> 00:00:34,260
of statuses and incubating project

00:00:31,080 --> 00:00:37,440
initially Stratus was developed by WB so

00:00:34,260 --> 00:00:41,370
- but about an year ago WC - donated

00:00:37,440 --> 00:00:43,170
this to Apache and it has been this

00:00:41,370 --> 00:00:47,340
project has been evolving on the Apache

00:00:43,170 --> 00:00:49,710
community for the last year or so and it

00:00:47,340 --> 00:00:53,030
has gone on the major reality-check

00:00:49,710 --> 00:00:55,649
Citra with within the patch community

00:00:53,030 --> 00:00:58,800
and it is basically a platform as a

00:00:55,649 --> 00:01:03,110
service framework by the Apache

00:00:58,800 --> 00:01:05,970
community and it is capable of

00:01:03,110 --> 00:01:09,210
elastically scaling any service type on

00:01:05,970 --> 00:01:11,549
top of theoretically any infrastructure

00:01:09,210 --> 00:01:13,740
as a service that's the idea so you plug

00:01:11,549 --> 00:01:16,080
in whatever the infrastructure service

00:01:13,740 --> 00:01:19,710
that you have use Apache Stratus and

00:01:16,080 --> 00:01:23,250
bring in services to be automatically

00:01:19,710 --> 00:01:26,189
scaled so when I say services here we

00:01:23,250 --> 00:01:27,720
mean things such as application

00:01:26,189 --> 00:01:29,490
frameworks application servers

00:01:27,720 --> 00:01:34,680
programming language frameworks

00:01:29,490 --> 00:01:37,170
programming languages databases etc so

00:01:34,680 --> 00:01:40,140
because it is a framework when you have

00:01:37,170 --> 00:01:43,200
some service protein you have automatic

00:01:40,140 --> 00:01:46,189
managing management of logging and

00:01:43,200 --> 00:01:49,439
metering services provided for the

00:01:46,189 --> 00:01:53,579
services that you bring in and also it

00:01:49,439 --> 00:01:57,149
also have some foundation services such

00:01:53,579 --> 00:01:59,610
as user management storage billing which

00:01:57,149 --> 00:02:03,360
is expected out of a pass so that you

00:01:59,610 --> 00:02:05,729
can easily in a unified manner may

00:02:03,360 --> 00:02:07,350
manage these across the services that

00:02:05,729 --> 00:02:09,740
you bring in to the platform as a

00:02:07,350 --> 00:02:09,740
service

00:02:10,259 --> 00:02:15,290
so this is the overall architecture of

00:02:12,330 --> 00:02:17,879
Apache Stratos I will go into the more

00:02:15,290 --> 00:02:21,090
important sections section by section

00:02:17,879 --> 00:02:22,620
and explain how it does so at the bottom

00:02:21,090 --> 00:02:25,950
most do you have the infrastructure as a

00:02:22,620 --> 00:02:28,430
service you can have any infrastructure

00:02:25,950 --> 00:02:31,680
service cloud that you have for example

00:02:28,430 --> 00:02:35,610
OpenStack we cloud cloud stack easy to

00:02:31,680 --> 00:02:40,379
etc and we integrate the infrastructure

00:02:35,610 --> 00:02:43,110
service using J clouds API into the

00:02:40,379 --> 00:02:45,000
platform as a service and then platform

00:02:43,110 --> 00:02:47,160
as a service has various components

00:02:45,000 --> 00:02:49,340
predominantly it can have multiple

00:02:47,160 --> 00:02:52,560
services for example databases

00:02:49,340 --> 00:02:55,410
application service etc and each service

00:02:52,560 --> 00:02:58,170
can have its own load balancer and B

00:02:55,410 --> 00:03:01,620
load balance one of the key aspects of

00:02:58,170 --> 00:03:04,680
this infrastructure is the fact that all

00:03:01,620 --> 00:03:07,260
components are connected using a message

00:03:04,680 --> 00:03:09,470
bus so it brings in the decoupling

00:03:07,260 --> 00:03:12,810
between the components that we have and

00:03:09,470 --> 00:03:15,540
has loose coupling so that you can

00:03:12,810 --> 00:03:20,569
easily manage this architecture bringing

00:03:15,540 --> 00:03:24,269
new ash layers bringing new services etc

00:03:20,569 --> 00:03:26,609
so on the left-hand side of the

00:03:24,269 --> 00:03:28,739
architecture we had the Stratus

00:03:26,609 --> 00:03:31,139
controller basically you have the

00:03:28,739 --> 00:03:33,120
provision to manage artifact

00:03:31,139 --> 00:03:36,209
distribution into various services that

00:03:33,120 --> 00:03:38,250
you have it has the autoscaler which is

00:03:36,209 --> 00:03:40,230
rule-based which manipulates the

00:03:38,250 --> 00:03:42,239
coordination between the load balancers

00:03:40,230 --> 00:03:44,910
and the service nodes

00:03:42,239 --> 00:03:47,280
you have the cloud controller and you

00:03:44,910 --> 00:03:50,549
have a complex event processing engine

00:03:47,280 --> 00:03:58,799
and as I said these are all connected

00:03:50,549 --> 00:04:00,690
into a unified message bus so the cloud

00:03:58,799 --> 00:04:03,690
controller is responsible for

00:04:00,690 --> 00:04:06,389
controlling the infrastructure as a

00:04:03,690 --> 00:04:12,480
service resources we are the J clouds

00:04:06,389 --> 00:04:14,699
API and it deals with spawning new

00:04:12,480 --> 00:04:18,719
instances on top of the infrastructure

00:04:14,699 --> 00:04:22,860
service cloud then you have a service

00:04:18,719 --> 00:04:24,260
services composition of a set of one or

00:04:22,860 --> 00:04:28,790
more load balancers

00:04:24,260 --> 00:04:31,640
one normal service nodes and basically

00:04:28,790 --> 00:04:35,510
the load balances balance the load

00:04:31,640 --> 00:04:38,840
across the service nodes and informs the

00:04:35,510 --> 00:04:40,970
autoscaler in terms of the current load

00:04:38,840 --> 00:04:42,800
that you have in order to scale up or

00:04:40,970 --> 00:04:49,700
down based on the load the service nodes

00:04:42,800 --> 00:04:53,590
that are doing the real work then every

00:04:49,700 --> 00:04:58,570
service node has an agent inside there

00:04:53,590 --> 00:05:03,560
this one all these agents publish

00:04:58,570 --> 00:05:06,890
information as events into a real-time

00:05:03,560 --> 00:05:10,730
event bus so that it helps you to keep

00:05:06,890 --> 00:05:14,030
monitoring the status of the service

00:05:10,730 --> 00:05:16,130
nodes and the event bus is in turn

00:05:14,030 --> 00:05:18,350
connected to a complexity and processing

00:05:16,130 --> 00:05:21,410
engine so that it is capable of picking

00:05:18,350 --> 00:05:23,330
up interesting streams in terms of what

00:05:21,410 --> 00:05:25,760
is happening so basically this

00:05:23,330 --> 00:05:27,650
particular event bus based the

00:05:25,760 --> 00:05:30,170
architecture brings in the situational

00:05:27,650 --> 00:05:32,450
awareness of the cloud you can keep

00:05:30,170 --> 00:05:37,790
track of what is going on with your

00:05:32,450 --> 00:05:41,800
cloud using this particular technique

00:05:37,790 --> 00:05:45,170
and complex event processing engine

00:05:41,800 --> 00:05:48,410
filters these events and informs the

00:05:45,170 --> 00:05:51,380
message bus what the situation is all

00:05:48,410 --> 00:05:53,990
about and if you want you can plug in

00:05:51,380 --> 00:05:58,790
external business exit monitor in jeans

00:05:53,990 --> 00:06:01,970
etc in order to extract these events and

00:05:58,790 --> 00:06:07,730
do further processing into a third party

00:06:01,970 --> 00:06:10,520
system if you want then it also has the

00:06:07,730 --> 00:06:13,310
foundation services right for example

00:06:10,520 --> 00:06:14,990
you need to have user management billing

00:06:13,310 --> 00:06:17,420
is an important aspect when you are

00:06:14,990 --> 00:06:20,890
dealing with the infrastructure service

00:06:17,420 --> 00:06:24,350
allocations etc and then common storage

00:06:20,890 --> 00:06:28,670
services etc so these are provided into

00:06:24,350 --> 00:06:32,120
tuol services as foundation services so

00:06:28,670 --> 00:06:35,300
that you can leverage the these across

00:06:32,120 --> 00:06:37,660
services in a unified manner so putting

00:06:35,300 --> 00:06:40,750
them all back together

00:06:37,660 --> 00:06:43,900
the the architecture has the message bus

00:06:40,750 --> 00:06:48,130
the event bus there's a services plugged

00:06:43,900 --> 00:06:50,670
in and common services being provided in

00:06:48,130 --> 00:06:56,020
terms of getting the job done

00:06:50,670 --> 00:06:58,960
holistically so the advantage of this

00:06:56,020 --> 00:07:00,730
architecture is first and foremost the

00:06:58,960 --> 00:07:02,980
event bus model gives you the unified

00:07:00,730 --> 00:07:07,740
communication across the components in

00:07:02,980 --> 00:07:09,070
the platform as a service also the the

00:07:07,740 --> 00:07:10,930
sorry

00:07:09,070 --> 00:07:14,380
rather the even brands the message bus

00:07:10,930 --> 00:07:20,160
then you also have the event bus to

00:07:14,380 --> 00:07:23,470
monitor the situational awareness the

00:07:20,160 --> 00:07:26,650
capacity aspects etc in terms of the

00:07:23,470 --> 00:07:32,230
cloud and we have centralized monitoring

00:07:26,650 --> 00:07:34,600
and metering in the cloud and then by

00:07:32,230 --> 00:07:36,700
architecture it is such that you can

00:07:34,600 --> 00:07:39,670
plug in new infrastructure so service

00:07:36,700 --> 00:07:45,130
layers into this one and it also has a

00:07:39,670 --> 00:07:47,460
cottage model cartridges are those types

00:07:45,130 --> 00:07:52,570
of services that you have in the system

00:07:47,460 --> 00:07:56,680
where you scale up and down as service

00:07:52,570 --> 00:07:58,990
nodes as I explained earlier so this

00:07:56,680 --> 00:08:02,670
this is the cottage concept so you can

00:07:58,990 --> 00:08:06,240
have frameworks application servers

00:08:02,670 --> 00:08:10,270
various programming language platforms

00:08:06,240 --> 00:08:12,760
databases or anything if you have legacy

00:08:10,270 --> 00:08:17,250
applications etc you can bring them in

00:08:12,760 --> 00:08:20,230
into the platform as service nodes and

00:08:17,250 --> 00:08:22,320
service nodes many benefit from the

00:08:20,230 --> 00:08:25,590
common infrastructure services and

00:08:22,320 --> 00:08:28,720
foundation services that you have and

00:08:25,590 --> 00:08:30,160
other important aspect of this Stratis

00:08:28,720 --> 00:08:32,110
architecture is that it is not only

00:08:30,160 --> 00:08:35,410
about the web traffic it is not only the

00:08:32,110 --> 00:08:37,320
HTTP that you can scale using this

00:08:35,410 --> 00:08:41,169
architecture it is also capable of

00:08:37,320 --> 00:08:44,350
scaling non-http for example you can

00:08:41,169 --> 00:08:47,400
scale up and down thrift given this

00:08:44,350 --> 00:08:47,400
particular architecture

00:08:50,810 --> 00:08:59,040
so we have logging metering and

00:08:55,500 --> 00:09:04,040
monitoring in the system basically you

00:08:59,040 --> 00:09:08,460
can track instance up-and-down times and

00:09:04,040 --> 00:09:10,350
the health status of the system and you

00:09:08,460 --> 00:09:12,590
can keep monitoring the application logs

00:09:10,350 --> 00:09:14,940
when applications are deployed into the

00:09:12,590 --> 00:09:20,150
system using the common infrastructure

00:09:14,940 --> 00:09:25,190
and basically in simple terms it makes

00:09:20,150 --> 00:09:29,850
it helps you to deal with throttling and

00:09:25,190 --> 00:09:33,990
also makes the devops live easy when it

00:09:29,850 --> 00:09:35,340
comes to managing the cloud so talking

00:09:33,990 --> 00:09:39,720
about DevOps life easy

00:09:35,340 --> 00:09:44,100
we have DevOps tooling basically these

00:09:39,720 --> 00:09:46,620
tools are built on top of the CEP the

00:09:44,100 --> 00:09:49,470
complexity main processor mechanism of

00:09:46,620 --> 00:09:52,580
monitoring the situational awareness in

00:09:49,470 --> 00:09:54,750
the cloud so the CEP and gene keep

00:09:52,580 --> 00:09:58,650
capturing the events that are publishing

00:09:54,750 --> 00:10:01,290
to this one and the event bus and then

00:09:58,650 --> 00:10:02,850
you can build dashboards to keep track

00:10:01,290 --> 00:10:06,480
of whatever the interesting information

00:10:02,850 --> 00:10:08,690
that you want in terms of monitoring the

00:10:06,480 --> 00:10:08,690
cloud

00:10:13,220 --> 00:10:17,570
the advantage of Stratus first and

00:10:16,010 --> 00:10:22,040
foremost it is capable of scaling

00:10:17,570 --> 00:10:24,950
anything so as I said you can bringing

00:10:22,040 --> 00:10:29,830
service knows as legacy cartridges into

00:10:24,950 --> 00:10:32,360
the system so you can now clarify your

00:10:29,830 --> 00:10:33,830
cloud enable your legacy applications

00:10:32,360 --> 00:10:36,170
using this particular architecture and

00:10:33,830 --> 00:10:38,420
your legacy applications could use

00:10:36,170 --> 00:10:42,260
anything other than HTTP so it is also

00:10:38,420 --> 00:10:46,730
capable of dealing with non-http traffic

00:10:42,260 --> 00:10:50,560
when it comes to elastic elastically

00:10:46,730 --> 00:10:52,700
scaling then now given the fact that

00:10:50,560 --> 00:10:54,010
Stratis architecture is capable of

00:10:52,700 --> 00:10:56,780
handling multiple

00:10:54,010 --> 00:10:58,880
infrastructure-as-a-service clouds it

00:10:56,780 --> 00:11:02,180
also gives you the ability to cloud

00:10:58,880 --> 00:11:05,180
burst into multiple clouds and the other

00:11:02,180 --> 00:11:07,250
aspect is that it also has a concept of

00:11:05,180 --> 00:11:10,330
multi zone multi data center support for

00:11:07,250 --> 00:11:15,650
example you can have load balancers

00:11:10,330 --> 00:11:17,810
dealing with particular data center zone

00:11:15,650 --> 00:11:19,970
so that you can deal with that

00:11:17,810 --> 00:11:23,120
particularly soon independent of the

00:11:19,970 --> 00:11:25,580
other zone and the other important

00:11:23,120 --> 00:11:28,490
aspect of Stratus is the levels of

00:11:25,580 --> 00:11:30,830
multi-tenancy that it supports so it

00:11:28,490 --> 00:11:32,690
supports four levels of multi-tenancy

00:11:30,830 --> 00:11:35,210
the in container

00:11:32,690 --> 00:11:37,820
multi-tenancy which means that given a

00:11:35,210 --> 00:11:39,800
container you can have multiple tenants

00:11:37,820 --> 00:11:43,340
within that content itself

00:11:39,800 --> 00:11:46,280
oh the container level multi-tenancy

00:11:43,340 --> 00:11:50,980
such as OS layer virtual machine layer

00:11:46,280 --> 00:11:50,980
physical machine layer is also supported

00:11:52,420 --> 00:11:59,750
so this is the cloud bursting aspect

00:11:55,940 --> 00:12:04,640
that I was talking about as this diagram

00:11:59,750 --> 00:12:07,670
explains you can have in here we have

00:12:04,640 --> 00:12:08,660
the service type of PHP write PHP

00:12:07,670 --> 00:12:12,020
cartridges

00:12:08,660 --> 00:12:17,470
deployed across to infrastructure

00:12:12,020 --> 00:12:20,960
service clouds and the load can be

00:12:17,470 --> 00:12:24,140
pumped into bursted into something like

00:12:20,960 --> 00:12:26,960
ec2 for example if that is your public

00:12:24,140 --> 00:12:30,260
cloud when the load increases

00:12:26,960 --> 00:12:34,850
keep on serving your requests in there

00:12:30,260 --> 00:12:40,760
and so when you're bursting you have a

00:12:34,850 --> 00:12:42,920
load balancer each to deal with the

00:12:40,760 --> 00:12:46,250
particular infrastructure service cloud

00:12:42,920 --> 00:12:48,980
that you are dealing with and then that

00:12:46,250 --> 00:12:50,930
load balancer will deal with the nodes

00:12:48,980 --> 00:12:55,930
service nodes were within that

00:12:50,930 --> 00:12:55,930
particular infrastructure service cloud

00:13:01,090 --> 00:13:09,440
and I as I mentioned when you are

00:13:06,430 --> 00:13:13,760
talking about controlling infrastructure

00:13:09,440 --> 00:13:20,420
service resources the system is capable

00:13:13,760 --> 00:13:26,180
of controlling I ask clouds per cloud

00:13:20,420 --> 00:13:27,920
per region per zone and and it the key

00:13:26,180 --> 00:13:30,440
advantage of that particular model is

00:13:27,920 --> 00:13:32,360
that it allows you to deal with things

00:13:30,440 --> 00:13:36,290
such as availability disaster recovery

00:13:32,360 --> 00:13:38,300
because if one of your I asked clouds go

00:13:36,290 --> 00:13:44,000
down you still have the capability to

00:13:38,300 --> 00:13:47,990
recover because you can so the same

00:13:44,000 --> 00:13:52,940
service using different cloud that is

00:13:47,990 --> 00:13:55,730
out there and obviously that also helps

00:13:52,940 --> 00:14:00,520
it your service level agreements as well

00:13:55,730 --> 00:14:06,230
because you can keep making sure that

00:14:00,520 --> 00:14:09,140
the applications are running and it's

00:14:06,230 --> 00:14:13,850
not never out of out of service kind of

00:14:09,140 --> 00:14:15,770
scenario and it also gives you better

00:14:13,850 --> 00:14:19,840
control in terms of resource utilization

00:14:15,770 --> 00:14:23,660
and also it allows you to deal with the

00:14:19,840 --> 00:14:26,240
geo based deployments as well because of

00:14:23,660 --> 00:14:28,450
the regional aspect that it can deal

00:14:26,240 --> 00:14:28,450
with

00:14:32,030 --> 00:14:39,290
the other aspect that I spoke about is

00:14:34,330 --> 00:14:44,690
the multi tendency model as I said you

00:14:39,290 --> 00:14:49,460
can have four levels of multi-tenancy in

00:14:44,690 --> 00:14:51,320
here one is in container within the

00:14:49,460 --> 00:14:54,830
container you can have multiple tenants

00:14:51,320 --> 00:14:58,220
that is basically a running instance can

00:14:54,830 --> 00:15:01,730
serve multiple tenants or you can have

00:14:58,220 --> 00:15:04,070
container level multi-tenancy where by

00:15:01,730 --> 00:15:11,570
always virtual machine or an operating

00:15:04,070 --> 00:15:14,390
system you can deal with tenants and the

00:15:11,570 --> 00:15:17,090
the advantage here is that given that

00:15:14,390 --> 00:15:19,220
your application is capable of dealing

00:15:17,090 --> 00:15:23,110
with in container multi-tenancy it gives

00:15:19,220 --> 00:15:28,960
you the maximum multi-tenancy density

00:15:23,110 --> 00:15:35,170
the number of tenants that given

00:15:28,960 --> 00:15:38,990
application can be conserved obviously

00:15:35,170 --> 00:15:42,800
the key advantage here is that it can

00:15:38,990 --> 00:15:44,270
give you absolute control in terms of

00:15:42,800 --> 00:15:56,060
how your resources are being utilized

00:15:44,270 --> 00:15:59,810
etc so finally Stratos is an Apache

00:15:56,060 --> 00:16:01,430
project it has a diverse community and

00:15:59,810 --> 00:16:04,610
it is going to graduate

00:16:01,430 --> 00:16:08,720
pretty soon from incubation state into a

00:16:04,610 --> 00:16:12,550
top-level project it's open source

00:16:08,720 --> 00:16:15,440
Apache License you can give it a try and

00:16:12,550 --> 00:16:17,960
also obviously you can be part of it as

00:16:15,440 --> 00:16:23,720
well you can join the community in one

00:16:17,960 --> 00:16:27,410
way help as uses by trying it out oh you

00:16:23,720 --> 00:16:28,820
can contribute to the code yourself if

00:16:27,410 --> 00:16:33,020
you are interested in participating in

00:16:28,820 --> 00:16:35,560
the platform as a service project and if

00:16:33,020 --> 00:16:38,900
you are not in so the interested in

00:16:35,560 --> 00:16:42,050
taking part as a code contributor you

00:16:38,900 --> 00:16:44,290
can still contribute at the cartage

00:16:42,050 --> 00:16:46,930
level because

00:16:44,290 --> 00:16:49,330
we have a set of cartridges already you

00:16:46,930 --> 00:16:53,280
know you can find them out in court it's

00:16:49,330 --> 00:16:56,940
two but we keep on adding new cartridges

00:16:53,280 --> 00:16:59,620
into the system so that the number of

00:16:56,940 --> 00:17:05,650
services that that are that are

00:16:59,620 --> 00:17:08,170
available for people hi and because of

00:17:05,650 --> 00:17:10,740
the open source model you can contribute

00:17:08,170 --> 00:17:14,829
them on the apache license etcetera and

00:17:10,740 --> 00:17:17,949
I have given the website here you can

00:17:14,829 --> 00:17:22,660
have a visit locate documentation etc

00:17:17,949 --> 00:17:25,829
and we have a lot of social presence as

00:17:22,660 --> 00:17:30,750
well we have Facebook LinkedIn Twitter

00:17:25,829 --> 00:17:34,180
and a lot of material in terms of social

00:17:30,750 --> 00:17:37,090
contributions in terms of how to write

00:17:34,180 --> 00:17:39,300
cottages etc etcetera available so you

00:17:37,090 --> 00:17:42,490
can have a look at them and there are

00:17:39,300 --> 00:17:45,700
LACMA land near mal who are participants

00:17:42,490 --> 00:17:48,700
of the community sitting there at the

00:17:45,700 --> 00:17:51,370
back hands up guys you can talk to them

00:17:48,700 --> 00:17:52,900
for a demo etc there are committees of

00:17:51,370 --> 00:17:57,280
the project lab mal is the lead of the

00:17:52,900 --> 00:17:59,800
project if you're interested in right

00:17:57,280 --> 00:18:02,560
that's all I have I think I was too

00:17:59,800 --> 00:18:04,390
quick anyway if you have questions I'm

00:18:02,560 --> 00:18:07,060
happy and if I cannot answer your

00:18:04,390 --> 00:18:08,860
detailed technical questions we have the

00:18:07,060 --> 00:18:11,550
computers from the project we can

00:18:08,860 --> 00:18:11,550
definitely help you

00:18:17,280 --> 00:18:21,900
thank you so we have time for questions

00:18:22,980 --> 00:18:27,090
go ahead I'll repeat the question

00:18:30,380 --> 00:18:35,610
can you give us an example of in

00:18:32,880 --> 00:18:41,610
container multi-tenancy okay so

00:18:35,610 --> 00:18:43,470
basically an example is that say you

00:18:41,610 --> 00:18:46,050
have an application server the

00:18:43,470 --> 00:18:48,780
application server is capable of hosting

00:18:46,050 --> 00:18:50,010
multiple tenants within a single

00:18:48,780 --> 00:18:55,740
instance of the application server

00:18:50,010 --> 00:18:58,320
basically in order to support the in

00:18:55,740 --> 00:19:00,390
container multi-tenancy that particular

00:18:58,320 --> 00:19:04,650
service itself needs to be capable of

00:19:00,390 --> 00:19:06,540
dealing with tenants so for example if I

00:19:04,650 --> 00:19:09,960
take a ws for example W so two

00:19:06,540 --> 00:19:11,970
application server is multi-talented by

00:19:09,960 --> 00:19:17,690
implementation so you can have multiple

00:19:11,970 --> 00:19:24,150
tenants running inside a single JVM

00:19:17,690 --> 00:19:26,540
right did I answer your question more

00:19:24,150 --> 00:19:26,540
questions

00:19:43,210 --> 00:19:49,630
how do you manage the NS when you do the

00:19:45,980 --> 00:19:49,630
cloud bursting between multi clouds

00:19:55,750 --> 00:20:00,320
Stratus maintain the topology all the

00:19:58,490 --> 00:20:04,160
operating member information inside the

00:20:00,320 --> 00:20:06,530
topology event so we can just it's a you

00:20:04,160 --> 00:20:09,350
can say topic you can just subscribe to

00:20:06,530 --> 00:20:11,300
that event and get the membe information

00:20:09,350 --> 00:20:14,420
like load balance information you can

00:20:11,300 --> 00:20:16,760
update with DNS when in our DNS is

00:20:14,420 --> 00:20:18,650
spinning up in public cloud it is here

00:20:16,760 --> 00:20:24,250
replicate if you re in the topology you

00:20:18,650 --> 00:20:24,250
can just appear a DNS simply with that

00:20:27,640 --> 00:20:32,500
thank you more

00:20:51,230 --> 00:20:58,980
so if the infrastructure layer supports

00:20:56,480 --> 00:21:03,630
multiple parameters we can support that

00:20:58,980 --> 00:21:06,299
if it doesn't support we cannot support

00:21:03,630 --> 00:21:09,299
that so it depends on the capabilities

00:21:06,299 --> 00:21:11,039
of the iose layer because we are dealing

00:21:09,299 --> 00:21:14,539
with the ash layer if the ash layer is

00:21:11,039 --> 00:21:17,659
capable of that then we can support them

00:21:14,539 --> 00:21:17,659
am i right

00:21:39,750 --> 00:21:51,059
I have one question so you're using

00:21:47,940 --> 00:21:51,780
Jacob to talk to all the different des

00:21:51,059 --> 00:21:54,990
providers

00:21:51,780 --> 00:21:58,890
yes solutions do you have it all worked

00:21:54,990 --> 00:22:00,900
out with CloudStack do we have it is it

00:21:58,890 --> 00:22:02,970
working with CloudStack yeah yeah

00:22:00,900 --> 00:22:12,690
currently working on getting it to work

00:22:02,970 --> 00:22:13,980
with cloud safe okay great so they fit

00:22:12,690 --> 00:22:16,230
me I mean if you need any help either

00:22:13,980 --> 00:22:17,970
from J clouds or cloud stack which are

00:22:16,230 --> 00:22:20,820
top level projects you know we'll be

00:22:17,970 --> 00:22:27,480
happy to to help great get that done

00:22:20,820 --> 00:22:31,130
great thank you yeah no tuna yeah this

00:22:27,480 --> 00:22:31,130

YouTube URL: https://www.youtube.com/watch?v=br1NE6i2st4


