Title: AWS and GCE Interface - Sebastien Goasguen
Publication date: 2014-04-25
Playlist: CloudStack Collaboration Conference North America 2014
Description: 
	CloudStack Collaboration Conference North America 2014
Captions: 
	00:00:00,020 --> 00:00:05,420
so thanks for coming the talk was

00:00:03,709 --> 00:00:07,370
supposed to be just about the ec2

00:00:05,420 --> 00:00:08,510
interfacing CloudStack and then I

00:00:07,370 --> 00:00:10,850
thought you know it would be good to

00:00:08,510 --> 00:00:15,050
also mention the GCE interface or the

00:00:10,850 --> 00:00:17,090
Google compute engine interface the talk

00:00:15,050 --> 00:00:18,920
is fairly simple and mostly i'm going to

00:00:17,090 --> 00:00:21,920
show you those two project and how they

00:00:18,920 --> 00:00:24,880
implemented the the interface ok and

00:00:21,920 --> 00:00:28,400
some of you who were in the tutorial on

00:00:24,880 --> 00:00:31,490
on wednesday you might have tried the

00:00:28,400 --> 00:00:33,590
dc2 interface okay already so i'll give

00:00:31,490 --> 00:00:38,540
a demo of that one but also talk about

00:00:33,590 --> 00:00:40,250
the google compute engine interface so

00:00:38,540 --> 00:00:41,989
when we talk about clouds i mean of

00:00:40,250 --> 00:00:43,880
course everybody has yet they have their

00:00:41,989 --> 00:00:45,500
own point of view but what's a cloud

00:00:43,880 --> 00:00:47,660
would they want to get from a cloud and

00:00:45,500 --> 00:00:50,390
so on for me really either all the cloud

00:00:47,660 --> 00:00:54,559
its amazon amazon web services when they

00:00:50,390 --> 00:00:58,160
started you know 2005-2006 and the first

00:00:54,559 --> 00:00:59,809
released s3 and ec2 that was really you

00:00:58,160 --> 00:01:01,579
know huge game changer you know you make

00:00:59,809 --> 00:01:04,129
a call you gather you get the instance

00:01:01,579 --> 00:01:07,009
you ssh and that was really extremely

00:01:04,129 --> 00:01:10,369
impressive obviously they are the world

00:01:07,009 --> 00:01:12,049
leader in public clouds and they keep on

00:01:10,369 --> 00:01:15,049
cutting their prices and now we see

00:01:12,049 --> 00:01:17,359
Google and Microsoft trying to kind of

00:01:15,049 --> 00:01:20,170
chase them what what's really impressive

00:01:17,359 --> 00:01:20,170
about Emma's

00:01:21,570 --> 00:01:29,409
back back okay don't touch the mic is

00:01:26,890 --> 00:01:31,929
that they keep on adding services so not

00:01:29,409 --> 00:01:34,990
only s3 and ec2 but you know in terms of

00:01:31,929 --> 00:01:37,689
storage of course they have VBS glacier

00:01:34,990 --> 00:01:41,409
data warehouse you know you name it

00:01:37,689 --> 00:01:44,319
cloud front they're also bringing up new

00:01:41,409 --> 00:01:46,420
services in terms of big data so of

00:01:44,319 --> 00:01:48,759
course they had elastic mapreduce very

00:01:46,420 --> 00:01:51,280
early on which underlying lee you know

00:01:48,759 --> 00:01:54,369
it's Hadoop cluster with my producer

00:01:51,280 --> 00:01:56,399
enabled now they have kinases for

00:01:54,369 --> 00:01:58,890
real-time data processing and so on

00:01:56,399 --> 00:02:01,840
redshift for data warehouse and what's

00:01:58,890 --> 00:02:03,429
really really amazing is that all those

00:02:01,840 --> 00:02:06,189
services are coming online and they

00:02:03,429 --> 00:02:08,819
offer an API and a very rich API so that

00:02:06,189 --> 00:02:11,680
you can access all of this on demand

00:02:08,819 --> 00:02:13,900
through any type of you know favorite

00:02:11,680 --> 00:02:16,420
language but basically a programming

00:02:13,900 --> 00:02:17,950
interface and to me that's really what

00:02:16,420 --> 00:02:21,840
the cloud is about is that you know the

00:02:17,950 --> 00:02:25,209
ability to undemanding services access

00:02:21,840 --> 00:02:30,400
services and then you know do it like as

00:02:25,209 --> 00:02:35,079
a developer so what is CloudStack really

00:02:30,400 --> 00:02:37,959
doing about you know amazon and if you

00:02:35,079 --> 00:02:40,630
know about yuka eucalyptus their

00:02:37,959 --> 00:02:43,480
strategy was really to be a an Amazon

00:02:40,630 --> 00:02:45,040
clone especially easy to clone and I

00:02:43,480 --> 00:02:46,600
wish that you know in cloudstack we

00:02:45,040 --> 00:02:50,069
would do the same and put you know a lot

00:02:46,600 --> 00:02:52,870
of emphasis into being amazon compliant

00:02:50,069 --> 00:02:54,880
so we are I'll show you this but you

00:02:52,870 --> 00:02:57,370
know hopefully we we would like to see

00:02:54,880 --> 00:02:59,709
more but going back a little bit and

00:02:57,370 --> 00:03:02,139
talking about the the API and why why

00:02:59,709 --> 00:03:04,269
it's very very powerful to have an API

00:03:02,139 --> 00:03:06,760
because then you have a very large

00:03:04,269 --> 00:03:09,430
ecosystem of software out there that

00:03:06,760 --> 00:03:11,170
developer operators are using and all

00:03:09,430 --> 00:03:12,940
the all that ecosystem all those

00:03:11,170 --> 00:03:15,790
softwares that people are using are

00:03:12,940 --> 00:03:18,400
using the API and the cloudstack API of

00:03:15,790 --> 00:03:20,169
course so what big chunk of my of my

00:03:18,400 --> 00:03:22,239
work is actually to look at the the

00:03:20,169 --> 00:03:25,090
ecosystem out there that everybody is

00:03:22,239 --> 00:03:27,819
using for for cloud computing and making

00:03:25,090 --> 00:03:29,950
sure that that ecosystem works well with

00:03:27,819 --> 00:03:31,510
the with cloudstack so whether you're

00:03:29,950 --> 00:03:34,010
taking any configuration management

00:03:31,510 --> 00:03:37,580
system like ansible chef

00:03:34,010 --> 00:03:40,909
but saltstack you know all those now

00:03:37,580 --> 00:03:43,129
have some type of interface to the cloud

00:03:40,909 --> 00:03:46,310
stack API okay the knife CloudStack plug

00:03:43,129 --> 00:03:50,269
in and see both as a inventory mechanism

00:03:46,310 --> 00:03:52,129
based on lip cloud saltstack has salt

00:03:50,269 --> 00:03:54,170
cloud which allows you to provision

00:03:52,129 --> 00:03:56,810
machines in the cloud and then install

00:03:54,170 --> 00:04:01,510
the salt master and and minions and so

00:03:56,810 --> 00:04:05,299
on vagrant has a CloudStack plugin and

00:04:01,510 --> 00:04:08,690
you name it so we have a very vibrant

00:04:05,299 --> 00:04:11,810
ecosystem for CloudStack and what was

00:04:08,690 --> 00:04:14,989
missing really is the the ec2 and the GC

00:04:11,810 --> 00:04:16,789
interface but now before I get into that

00:04:14,989 --> 00:04:18,739
so the API that is that you know

00:04:16,789 --> 00:04:21,859
CloudStack has a very powerful API that

00:04:18,739 --> 00:04:25,370
the powers that ecosystem that API is

00:04:21,859 --> 00:04:27,340
rest like our ways back a point of you

00:04:25,370 --> 00:04:29,630
know mentioning it it's not restful

00:04:27,340 --> 00:04:32,630
because it's just using HTTP GET

00:04:29,630 --> 00:04:35,750
sometimes post and then the the URI is

00:04:32,630 --> 00:04:40,729
actually more of a query syntax than

00:04:35,750 --> 00:04:44,060
just a very clean rest like restful

00:04:40,729 --> 00:04:46,250
system it's not that bad because if you

00:04:44,060 --> 00:04:48,860
look at the services from amazon they

00:04:46,250 --> 00:04:52,940
are actually query you know query like

00:04:48,860 --> 00:04:57,729
api google compute engine is much more

00:04:52,940 --> 00:05:01,490
restful okay so that api is great and

00:04:57,729 --> 00:05:04,039
it's not a standard okay neither is

00:05:01,490 --> 00:05:06,050
amazon but amazon api the amazon

00:05:04,039 --> 00:05:08,120
interface is the de facto standards out

00:05:06,050 --> 00:05:09,889
there everybody uses it but it's not a

00:05:08,120 --> 00:05:11,630
standard the google compute engine

00:05:09,889 --> 00:05:14,449
that's the that's the logo of google

00:05:11,630 --> 00:05:16,270
ready GCE that's not a standard either

00:05:14,449 --> 00:05:19,970
and that's different than the amazon

00:05:16,270 --> 00:05:23,870
interface so there are standards efforts

00:05:19,970 --> 00:05:26,870
out there see me from the MTF and occi

00:05:23,870 --> 00:05:28,789
from what GF but really I'm not saying I

00:05:26,870 --> 00:05:32,330
mean except a few project in Europe I'm

00:05:28,789 --> 00:05:34,370
not seeing anybody in productions or you

00:05:32,330 --> 00:05:38,150
know users in the enterprise making any

00:05:34,370 --> 00:05:40,099
use of those standards so really the

00:05:38,150 --> 00:05:42,400
push and what's interesting for us in

00:05:40,099 --> 00:05:46,639
cloudstack is making sure that we are

00:05:42,400 --> 00:05:49,569
amazon compliant and you know if GC

00:05:46,639 --> 00:05:51,830
gets more and more esteem you know under

00:05:49,569 --> 00:05:53,780
no that's not the expression I was going

00:05:51,830 --> 00:05:56,289
to say steam under their legs that

00:05:53,780 --> 00:06:02,659
doesn't work no what's the expression

00:05:56,289 --> 00:06:05,270
Russell no gathers more steam ok so if

00:06:02,659 --> 00:06:07,039
GC starts catching up with Amazon you

00:06:05,270 --> 00:06:12,800
know it would be good to have a GC

00:06:07,039 --> 00:06:14,840
interface does that make sense yes so

00:06:12,800 --> 00:06:16,819
you know the talk was just supposed to

00:06:14,840 --> 00:06:21,800
be about ews but I thought I would you

00:06:16,819 --> 00:06:24,069
know put in the GC as well it's very

00:06:21,800 --> 00:06:27,650
important because in december of last

00:06:24,069 --> 00:06:30,979
year so google made the you know GC

00:06:27,650 --> 00:06:33,289
generally available GA and they cut

00:06:30,979 --> 00:06:36,550
prices and very recently i think like

00:06:33,289 --> 00:06:39,169
march they announced like live migration

00:06:36,550 --> 00:06:41,060
of the m's in their in their essence

00:06:39,169 --> 00:06:44,749
their center and so on so most likely

00:06:41,060 --> 00:06:46,849
GCE is going to to get better and better

00:06:44,749 --> 00:06:48,860
and it's going to be interesting to see

00:06:46,849 --> 00:06:50,990
if they bring up new services just like

00:06:48,860 --> 00:06:53,990
amazon so you know MapReduce interface

00:06:50,990 --> 00:06:56,930
may be a real time processing interface

00:06:53,990 --> 00:06:59,210
and so on so how can we how can we offer

00:06:56,930 --> 00:07:01,099
a GC interface to CloudStack that's

00:06:59,210 --> 00:07:04,939
really the point because that's totally

00:07:01,099 --> 00:07:08,389
different from the cloudstack API so I

00:07:04,939 --> 00:07:11,330
work with some some students one of them

00:07:08,389 --> 00:07:13,580
who did the google Summer of Code last

00:07:11,330 --> 00:07:15,379
year with quad stack and basically what

00:07:13,580 --> 00:07:17,990
we did is we created a little

00:07:15,379 --> 00:07:20,300
application we call G stack so it's a

00:07:17,990 --> 00:07:22,430
server that sits in front of your

00:07:20,300 --> 00:07:25,729
cloudstack cloud and basically it's

00:07:22,430 --> 00:07:28,639
going to do an API translation so it

00:07:25,729 --> 00:07:32,360
receives API calls that you make with

00:07:28,639 --> 00:07:34,219
any of the google tools ok and then it's

00:07:32,360 --> 00:07:36,199
which received those calls and then you

00:07:34,219 --> 00:07:38,270
know processes the request of course and

00:07:36,199 --> 00:07:41,120
then recreates the corresponding

00:07:38,270 --> 00:07:45,229
cloudstack api and makes that call and

00:07:41,120 --> 00:07:47,659
then back ok so it's just a you could

00:07:45,229 --> 00:07:50,509
call it an adapter or an API translator

00:07:47,659 --> 00:07:55,219
or something ok so for google we have G

00:07:50,509 --> 00:07:58,219
stack I'm a lot into implementation

00:07:55,219 --> 00:07:59,870
details so it's you know it's a Python

00:07:58,219 --> 00:08:02,460
flask application

00:07:59,870 --> 00:08:04,800
and I'll show you a little bit how it

00:08:02,460 --> 00:08:06,990
works unfortunately when Google when GA

00:08:04,800 --> 00:08:08,580
they broke our app because of course

00:08:06,990 --> 00:08:10,290
they change a little bit dapi they

00:08:08,580 --> 00:08:13,440
change the responses and take like this

00:08:10,290 --> 00:08:15,600
so right now we haven't had time to fix

00:08:13,440 --> 00:08:17,940
it if anybody wants to have a look at it

00:08:15,600 --> 00:08:20,580
and help us you know fix a little bit

00:08:17,940 --> 00:08:23,400
the responses and so on I in the it

00:08:20,580 --> 00:08:25,260
needs a little bit of love okay but

00:08:23,400 --> 00:08:28,500
basically you have in a now command line

00:08:25,260 --> 00:08:32,460
client GCU TL that's the Google tool it

00:08:28,500 --> 00:08:34,590
comes from google developed by google to

00:08:32,460 --> 00:08:36,260
make it work with CloudStack we have to

00:08:34,590 --> 00:08:38,670
define some parameters in like a

00:08:36,260 --> 00:08:43,110
configuration file that we need to pass

00:08:38,670 --> 00:08:47,760
a project that's a Google that's a

00:08:43,110 --> 00:08:49,380
Google term and for us in the cloud that

00:08:47,760 --> 00:08:51,330
we are using here it was just the email

00:08:49,380 --> 00:08:53,670
of the user and then you make the call

00:08:51,330 --> 00:08:56,040
list machine types so that's you know

00:08:53,670 --> 00:08:59,250
again given by google and then you get

00:08:56,040 --> 00:09:03,600
the result except that this comes from a

00:08:59,250 --> 00:09:06,150
CloudStack cloud okay same thing if you

00:09:03,600 --> 00:09:10,220
want to create a firewall add firewall

00:09:06,150 --> 00:09:12,840
you want open 22 for ssh get firewall

00:09:10,220 --> 00:09:15,150
ssh you get the description of that

00:09:12,840 --> 00:09:16,890
firewall and you see underneath I mean

00:09:15,150 --> 00:09:20,580
get firewall that's not a cloud stack

00:09:16,890 --> 00:09:24,450
API but you see that would be a list

00:09:20,580 --> 00:09:27,270
security groups with the name of the

00:09:24,450 --> 00:09:31,140
security group of ssh so all of that

00:09:27,270 --> 00:09:34,290
works you can also start instances here

00:09:31,140 --> 00:09:37,320
you see listing sensitives the start

00:09:34,290 --> 00:09:41,910
instance is just add instance so that

00:09:37,320 --> 00:09:44,310
works well the AWS interface that's

00:09:41,910 --> 00:09:45,960
pretty much the same the same idea again

00:09:44,310 --> 00:09:48,660
it's a server that runs that map's the

00:09:45,960 --> 00:09:51,240
API it's implemented the same way except

00:09:48,660 --> 00:09:53,820
that the guys who did it so it one of

00:09:51,240 --> 00:09:57,240
them is the same that did the g GC

00:09:53,820 --> 00:09:59,220
interface but at the beginning that the

00:09:57,240 --> 00:10:02,250
end of Python they're just like 20 year

00:09:59,220 --> 00:10:04,320
old kids from Ireland so what they've

00:10:02,250 --> 00:10:06,330
done for the AWS interface is actually

00:10:04,320 --> 00:10:10,830
much better than for the Google

00:10:06,330 --> 00:10:12,250
interface what you have in there is just

00:10:10,830 --> 00:10:16,180
easy to ok

00:10:12,250 --> 00:10:18,670
look at all the AWS services we're not

00:10:16,180 --> 00:10:21,280
at the level of offering EMR or anything

00:10:18,670 --> 00:10:24,760
like this so really the foundation is

00:10:21,280 --> 00:10:26,830
ec2 cloud stack will never offer s three

00:10:24,760 --> 00:10:30,220
as such okay CloudStack is not an object

00:10:26,830 --> 00:10:32,140
store there is no plan to become an

00:10:30,220 --> 00:10:35,590
object store and really if you need to

00:10:32,140 --> 00:10:39,160
bring in s3 in your data center you know

00:10:35,590 --> 00:10:42,790
I always say look at react CS from bash

00:10:39,160 --> 00:10:46,240
or SEF or things like this together to

00:10:42,790 --> 00:10:48,910
expose an s3 compatible API okay so

00:10:46,240 --> 00:10:51,070
there is no need for us to look at s3 we

00:10:48,910 --> 00:10:53,920
just need ec2 and then once we have a

00:10:51,070 --> 00:10:56,830
very solid ec2 interface we can start

00:10:53,920 --> 00:11:00,340
building up to offer more interesting

00:10:56,830 --> 00:11:02,650
services in a in CloudStack however you

00:11:00,340 --> 00:11:04,780
know that there is an existing a WS API

00:11:02,650 --> 00:11:08,260
interface okay so when you install the

00:11:04,780 --> 00:11:12,190
CloudStack packages you can run an easy

00:11:08,260 --> 00:11:14,920
to interface but it's a it's quite old

00:11:12,190 --> 00:11:17,650
its return in Java it runs with access

00:11:14,920 --> 00:11:19,780
and it causes you know packaging and

00:11:17,650 --> 00:11:23,320
then build problems it's also

00:11:19,780 --> 00:11:26,350
responsible for maybe forty percent of

00:11:23,320 --> 00:11:28,150
the lines of code in CloudStack that we

00:11:26,350 --> 00:11:31,600
need we need to check but there is a lot

00:11:28,150 --> 00:11:34,300
of generated code for that for that

00:11:31,600 --> 00:11:37,360
package so really my my goal there was

00:11:34,300 --> 00:11:39,339
to remove this from the cloud stack

00:11:37,360 --> 00:11:41,500
source code so that we get something

00:11:39,339 --> 00:11:43,870
much smaller easier to maintain easier

00:11:41,500 --> 00:11:47,320
to build and so on and then we build a

00:11:43,870 --> 00:11:49,839
separate ec2 interface which would be

00:11:47,320 --> 00:11:53,470
you know more up-to-date and also easier

00:11:49,839 --> 00:11:55,360
to maintain okay so that was the that

00:11:53,470 --> 00:11:57,630
was the aim of the project really remove

00:11:55,360 --> 00:12:00,640
the native VC to interface in cloudstack

00:11:57,630 --> 00:12:02,560
simplify the packaging and then get to a

00:12:00,640 --> 00:12:06,100
level where we have you know a newer

00:12:02,560 --> 00:12:08,080
code base that we can we can work on so

00:12:06,100 --> 00:12:12,430
here comes easy to stack that was just

00:12:08,080 --> 00:12:15,310
released a month ago and again it's a

00:12:12,430 --> 00:12:17,770
Python flask application so it's a

00:12:15,310 --> 00:12:19,300
little little server that runs and then

00:12:17,770 --> 00:12:22,060
implements the kollel I'll show you a

00:12:19,300 --> 00:12:23,560
little bit the code of course the

00:12:22,060 --> 00:12:26,180
question is what's your coverage in

00:12:23,560 --> 00:12:32,750
terms of API so right now we have

00:12:26,180 --> 00:12:35,140
333 percent of the ec2 EBS API to create

00:12:32,750 --> 00:12:39,610
keep air create cheaper DDT pair

00:12:35,140 --> 00:12:43,250
describe key pair create security group

00:12:39,610 --> 00:12:45,170
describe security group at rule create

00:12:43,250 --> 00:12:47,360
volume attach volume detach volume

00:12:45,170 --> 00:12:49,040
create instance list instance soon and

00:12:47,360 --> 00:12:54,050
so on so that's roughly thirty three

00:12:49,040 --> 00:12:56,930
percent of the API ec2 EBS API and it

00:12:54,050 --> 00:12:59,500
should be fairly easy to add and get a

00:12:56,930 --> 00:13:02,600
much stronger fidelity with the

00:12:59,500 --> 00:13:04,970
completely c2 and EBS I'm kind of

00:13:02,600 --> 00:13:06,770
putting those two together so once you

00:13:04,970 --> 00:13:12,110
run that application that it becomes as

00:13:06,770 --> 00:13:16,640
simple as using the ws CLI for example

00:13:12,110 --> 00:13:18,020
here AWS ec2 described images and you

00:13:16,640 --> 00:13:19,910
see that what happens is that you have

00:13:18,020 --> 00:13:23,380
to specify a different end point okay

00:13:19,910 --> 00:13:26,029
otherwise it would go to like AWS region

00:13:23,380 --> 00:13:28,850
so here we specify an endpoint that's

00:13:26,029 --> 00:13:32,959
this application is to stack running

00:13:28,850 --> 00:13:35,060
locally okay so the the CLI will make

00:13:32,959 --> 00:13:36,709
the call to is to stack running locally

00:13:35,060 --> 00:13:39,800
and then easy to stack is going to

00:13:36,709 --> 00:13:43,610
basically process the request and make

00:13:39,800 --> 00:13:45,880
the call to cloudstack before i give you

00:13:43,610 --> 00:13:48,820
the demo i also want to mention that

00:13:45,880 --> 00:13:51,410
there was a talk on AWS CloudFormation

00:13:48,820 --> 00:13:55,040
interface so there is a project called

00:13:51,410 --> 00:13:57,950
stack Titian and that was originated by

00:13:55,040 --> 00:14:00,170
sheridan vittal and then a mug vasa car

00:13:57,950 --> 00:14:04,250
is working on this so that's separate

00:14:00,170 --> 00:14:06,170
from easy to stack but it offers a cloud

00:14:04,250 --> 00:14:08,779
formation service and AWS CloudFormation

00:14:06,170 --> 00:14:11,240
service if you're not familiar with

00:14:08,779 --> 00:14:14,290
cloud formations basically it's a you

00:14:11,240 --> 00:14:17,720
know templates that define a complete

00:14:14,290 --> 00:14:19,940
application like system so if you want

00:14:17,720 --> 00:14:21,950
to set up for example a lamp stack you

00:14:19,940 --> 00:14:24,500
know you have templates for lamp stack

00:14:21,950 --> 00:14:26,810
with my sequel apache PHP blah blah and

00:14:24,500 --> 00:14:28,850
you feed that to the AWS CloudFormation

00:14:26,810 --> 00:14:31,399
service and it's going to provision

00:14:28,850 --> 00:14:33,380
everything for you okay so what they did

00:14:31,399 --> 00:14:37,400
with tactician is that you can use those

00:14:33,380 --> 00:14:39,710
exact same time plates well almost exact

00:14:37,400 --> 00:14:41,810
same templates and then feed it to

00:14:39,710 --> 00:14:45,650
Titian and it's going to create that

00:14:41,810 --> 00:14:47,450
lamp stack in a class that cloud okay I

00:14:45,650 --> 00:14:49,430
didn't get the logo but there was also

00:14:47,450 --> 00:14:51,710
another talk bye bye sure dip about

00:14:49,430 --> 00:14:53,840
stack watch which is supposed to be any

00:14:51,710 --> 00:14:56,930
click an equivalent to cloud watch okay

00:14:53,840 --> 00:14:59,630
so all of this gives you the idea that

00:14:56,930 --> 00:15:04,700
you know we are trying to push for

00:14:59,630 --> 00:15:09,830
better fidelity with with AWS so I'm

00:15:04,700 --> 00:15:14,360
going show you some demo you guys wanna

00:15:09,830 --> 00:15:18,100
see a demo ok I'll of demos okay let me

00:15:14,360 --> 00:15:18,100
let me show you the code maybe first

00:15:26,790 --> 00:15:32,490
okay so it's a flask application so

00:15:30,660 --> 00:15:34,350
basically if asking you know it's a very

00:15:32,490 --> 00:15:38,270
nice framework to be able to expose a

00:15:34,350 --> 00:15:42,030
web service so if you look at the the

00:15:38,270 --> 00:15:45,210
default route okay it's this line here

00:15:42,030 --> 00:15:47,160
since the UC two is really a query API

00:15:45,210 --> 00:15:49,800
there is only one route which is slash

00:15:47,160 --> 00:15:52,080
and then it's a post method with flask

00:15:49,800 --> 00:15:54,150
you you would be also you would be able

00:15:52,080 --> 00:15:56,880
to define different route different your

00:15:54,150 --> 00:15:59,130
eyes and also respond if you have

00:15:56,880 --> 00:16:01,080
different verbs being used okay but in

00:15:59,130 --> 00:16:03,660
the case of ec2 it's just going to be at

00:16:01,080 --> 00:16:05,700
that single route okay so what's

00:16:03,660 --> 00:16:08,370
interesting is the get action so

00:16:05,700 --> 00:16:12,720
basically we receive the HTTP request

00:16:08,370 --> 00:16:15,300
from any of the AWS client and then we

00:16:12,720 --> 00:16:18,840
extract the action so if you delete

00:16:15,300 --> 00:16:21,780
volume or now let's say yeah whatever

00:16:18,840 --> 00:16:24,120
create volume delete key pair that's the

00:16:21,780 --> 00:16:26,700
the action coming from the AWS client

00:16:24,120 --> 00:16:31,470
and then that maps to a method that we

00:16:26,700 --> 00:16:36,600
we implement there so you go back here

00:16:31,470 --> 00:16:38,250
and we have providers that was kind of a

00:16:36,600 --> 00:16:40,890
little bit sneaky what I wanted the guys

00:16:38,250 --> 00:16:43,230
to do is that you know technically that

00:16:40,890 --> 00:16:45,450
architecture is little bit abstract so

00:16:43,230 --> 00:16:49,650
if you wanted to use this for OpenStack

00:16:45,450 --> 00:16:52,470
or azure or something else you could

00:16:49,650 --> 00:16:54,660
write a provider for those clouds okay

00:16:52,470 --> 00:16:57,330
so right now there is only one provider

00:16:54,660 --> 00:16:59,100
which is cloudstack so you click on

00:16:57,330 --> 00:17:01,860
cloudstack and now you see the actual

00:16:59,100 --> 00:17:04,740
categories of api that that are in play

00:17:01,860 --> 00:17:07,790
for example in key pair now you see the

00:17:04,740 --> 00:17:10,950
method that the HTTP call you know would

00:17:07,790 --> 00:17:14,610
would basically use so create key pair

00:17:10,950 --> 00:17:17,100
we basically extra look at the

00:17:14,610 --> 00:17:21,660
parameters and then we make the request

00:17:17,100 --> 00:17:24,720
and that request it's this one which is

00:17:21,660 --> 00:17:27,180
just a request an HTTP request to our to

00:17:24,720 --> 00:17:29,280
cloudstack okay so that's just mapping

00:17:27,180 --> 00:17:32,220
everything so here you see we extract

00:17:29,280 --> 00:17:36,360
the the information create ssh key pair

00:17:32,220 --> 00:17:38,540
being the api of quad stack does that

00:17:36,360 --> 00:17:38,540
make sense

00:17:38,860 --> 00:17:50,410
okay so to run it you can get it from

00:17:45,929 --> 00:17:52,600
the Python install the Python package

00:17:50,410 --> 00:17:55,240
installer pip install easy to stack

00:17:52,600 --> 00:17:56,590
there is a configuration file so here it

00:17:55,240 --> 00:17:58,750
just says you know you run the app

00:17:56,590 --> 00:18:01,080
locally is your zero zero five thousand

00:17:58,750 --> 00:18:03,730
and then I'm actually going to use a

00:18:01,080 --> 00:18:06,370
production cloudstack cloud from my

00:18:03,730 --> 00:18:08,320
buddies in Switzerland exhaust Gail so

00:18:06,370 --> 00:18:11,950
you define the end point of that classic

00:18:08,320 --> 00:18:14,320
system you could you can define also

00:18:11,950 --> 00:18:18,100
mapping of service offerings okay

00:18:14,320 --> 00:18:21,820
because the clients the AWS clients may

00:18:18,100 --> 00:18:24,730
by default use AWS offering so I'm 1 dot

00:18:21,820 --> 00:18:26,470
small and one large and so on so in the

00:18:24,730 --> 00:18:29,140
in that configuration file you would do

00:18:26,470 --> 00:18:32,429
a mapping you would say m1 dot small for

00:18:29,140 --> 00:18:37,090
amazon no for me it's you know tiny or

00:18:32,429 --> 00:18:40,360
whatever so you do this they say there

00:18:37,090 --> 00:18:42,400
is an easy to stack command there is a

00:18:40,360 --> 00:18:46,150
configure command where you can actually

00:18:42,400 --> 00:18:49,179
run it and write that file so now you

00:18:46,150 --> 00:18:52,270
run the app of course here it's not yet

00:18:49,179 --> 00:18:54,130
demon eyes dan and so on but so you have

00:18:52,270 --> 00:18:57,280
the server running on five thousand four

00:18:54,130 --> 00:19:03,820
five thousand waiting for requests from

00:18:57,280 --> 00:19:07,450
an AWS client so I'm just going to keep

00:19:03,820 --> 00:19:12,970
it running here and AWS you can install

00:19:07,450 --> 00:19:15,640
the AWS CLI and in the config file you

00:19:12,970 --> 00:19:18,790
just write the name of the region which

00:19:15,640 --> 00:19:21,669
is your cloudstack zone and then you put

00:19:18,790 --> 00:19:27,790
in your keys okay api key secret key

00:19:21,669 --> 00:19:36,340
from cloudstack and now we should do AWS

00:19:27,790 --> 00:19:40,770
ec2 describe a valet bility zones for

00:19:36,340 --> 00:19:46,710
example and we say that the endpoint is

00:19:40,770 --> 00:19:46,710
localhost 5000

00:19:47,020 --> 00:19:58,250
yeah okay you can change the output

00:19:55,809 --> 00:20:01,490
hopefully we're going to make a pull

00:19:58,250 --> 00:20:04,669
request to the AWS client so that the

00:20:01,490 --> 00:20:07,070
end point we can specify the end point

00:20:04,669 --> 00:20:09,080
in the configuration file so that would

00:20:07,070 --> 00:20:11,780
make it extremely clean so we would just

00:20:09,080 --> 00:20:13,490
do a wacc to describe ability zone and

00:20:11,780 --> 00:20:15,620
it would pull the appropriate

00:20:13,490 --> 00:20:18,530
appropriate information from the config

00:20:15,620 --> 00:20:20,770
file no need to do mess the command line

00:20:18,530 --> 00:20:26,950
with the endpoint and then you get the

00:20:20,770 --> 00:20:30,610
answers okay of course you have ec2 I

00:20:26,950 --> 00:20:33,880
think it's described key pairs describe

00:20:30,610 --> 00:20:33,880
key pairs

00:20:42,400 --> 00:20:49,870
get your key pairs okay I did that

00:20:47,710 --> 00:20:56,800
before so if i go to the production

00:20:49,870 --> 00:21:00,460
cloud oh I'm going to have to renew my

00:20:56,800 --> 00:21:03,520
keys it's going to be on camera so here

00:21:00,460 --> 00:21:06,660
you see that i have i have some ssh key

00:21:03,520 --> 00:21:09,010
pair let me delete that one from the UI

00:21:06,660 --> 00:21:12,280
that's actually CloudStack but they did

00:21:09,010 --> 00:21:18,100
a new UI okay so i only have one so if i

00:21:12,280 --> 00:21:27,280
go back here i only have one yeah it's

00:21:18,100 --> 00:21:35,730
kind of cleaner with the you can of

00:21:27,280 --> 00:21:35,730
course create create key pair think

00:21:43,929 --> 00:21:46,769
key name

00:22:02,669 --> 00:22:05,629
typing too fast

00:22:09,820 --> 00:22:15,310
you go so you can create the key pair

00:22:12,070 --> 00:22:20,320
you get your private key and if we go

00:22:15,310 --> 00:22:24,580
back here create the keeper okay so you

00:22:20,320 --> 00:22:27,010
can also described images start

00:22:24,580 --> 00:22:29,250
instances so let's do the described

00:22:27,010 --> 00:22:29,250
images

00:22:37,690 --> 00:22:43,910
described images you can start instances

00:22:40,460 --> 00:22:47,180
stop them we start them terminate them

00:22:43,910 --> 00:22:48,650
so you see hit the result and every time

00:22:47,180 --> 00:22:51,080
you make a call of course you see the

00:22:48,650 --> 00:22:55,490
post request coming to your little app

00:22:51,080 --> 00:22:57,110
okay the ec2 into the google the GC

00:22:55,490 --> 00:23:00,050
interface it's going to be exactly the

00:22:57,110 --> 00:23:02,420
same setup you run that little server

00:23:00,050 --> 00:23:09,110
accepted its g stack and then you make

00:23:02,420 --> 00:23:15,920
requests with the GC util client one

00:23:09,110 --> 00:23:25,630
more maybe just showing you that if you

00:23:15,920 --> 00:23:31,970
like if you like code so that AWS client

00:23:25,630 --> 00:23:34,790
CLI comes from a WS directly but it uses

00:23:31,970 --> 00:23:37,520
boto the python module a well-known

00:23:34,790 --> 00:23:39,920
python module to talk to all the AWS

00:23:37,520 --> 00:23:42,710
services so you can also write straight

00:23:39,920 --> 00:23:45,350
up a python a python script with both oh

00:23:42,710 --> 00:23:49,820
so I mean forget about some of this but

00:23:45,350 --> 00:23:52,550
both oh that ec2 that's your your module

00:23:49,820 --> 00:23:56,120
your keys I'll change my keys don't

00:23:52,550 --> 00:23:59,950
don't think about stealing them here you

00:23:56,120 --> 00:24:02,810
initiate the connection connect ec2 and

00:23:59,950 --> 00:24:07,250
again you do that connection you do that

00:24:02,810 --> 00:24:08,720
connection to you know Pat / 5000 so

00:24:07,250 --> 00:24:11,630
you're going to get a boat OH connection

00:24:08,720 --> 00:24:15,860
directly to that app with the latest API

00:24:11,630 --> 00:24:18,590
version which is a big issue because the

00:24:15,860 --> 00:24:20,510
the biggest problem with the native AWS

00:24:18,590 --> 00:24:23,060
API package in cloudstack was that it

00:24:20,510 --> 00:24:25,400
was a old API version so that causes a

00:24:23,060 --> 00:24:32,200
bunch of problems so here it's the

00:24:25,400 --> 00:24:32,200
latest so let's try to use that one

00:24:37,030 --> 00:24:43,850
I'm using ipython to get an interactive

00:24:40,130 --> 00:24:47,090
shell okay so now we have a connection

00:24:43,850 --> 00:24:49,670
object directly in that in that session

00:24:47,090 --> 00:24:54,680
which is an ec2 connection so you see

00:24:49,670 --> 00:24:59,630
all the ec2 calls available and it's

00:24:54,680 --> 00:25:02,590
connected to easy to stack okay so for

00:24:59,630 --> 00:25:13,090
example you do gone I think it's

00:25:02,590 --> 00:25:17,390
described images no get all images and

00:25:13,090 --> 00:25:21,260
you get your response okay so you get

00:25:17,390 --> 00:25:23,480
the idea only roughly thirty percent of

00:25:21,260 --> 00:25:26,300
the API are covered but it's working

00:25:23,480 --> 00:25:30,920
fairly well with the wsdl I of course

00:25:26,300 --> 00:25:33,650
the Python bhutto module and hopefully

00:25:30,920 --> 00:25:35,540
we're going to be able to add more AP is

00:25:33,650 --> 00:25:38,270
in that application it's on github if

00:25:35,540 --> 00:25:40,040
anybody wants to know Mac pull request

00:25:38,270 --> 00:25:42,740
to add some support that would be great

00:25:40,040 --> 00:25:44,870
and if you also want to look at the GC

00:25:42,740 --> 00:25:47,420
interface it needs a little bit more

00:25:44,870 --> 00:25:50,660
love and more unit tests and things like

00:25:47,420 --> 00:25:53,840
this but it's working very well and I

00:25:50,660 --> 00:25:59,570
hope we're going to keep on developing

00:25:53,840 --> 00:26:02,000
those two little applications so

00:25:59,570 --> 00:26:04,250
conclusions the classic API is great

00:26:02,000 --> 00:26:06,830
okay we could live with the CloudStack

00:26:04,250 --> 00:26:09,470
API it works well it says you know it's

00:26:06,830 --> 00:26:12,140
like 300 methods you can use things like

00:26:09,470 --> 00:26:14,060
Club monkey to you know use the cloud

00:26:12,140 --> 00:26:16,220
stack API and you get android percent

00:26:14,060 --> 00:26:19,370
coverage of the API so that's you know

00:26:16,220 --> 00:26:22,100
that's perfect there is a very vibrant

00:26:19,370 --> 00:26:25,120
ecosystem out there you know you know

00:26:22,100 --> 00:26:28,220
whether it's configuration management

00:26:25,120 --> 00:26:30,800
data collection you name it so you know

00:26:28,220 --> 00:26:32,960
we have a pretty good echo system and we

00:26:30,800 --> 00:26:35,870
keep on adding CloudStack support in all

00:26:32,960 --> 00:26:37,400
of this but really if you if you're

00:26:35,870 --> 00:26:39,680
thinking about hybrid cloud and you're

00:26:37,400 --> 00:26:41,300
already using a public cloud you know in

00:26:39,680 --> 00:26:44,090
your in your setup if you're using

00:26:41,300 --> 00:26:46,060
google or EWS then we want to make sure

00:26:44,090 --> 00:26:48,890
that artists I want to make sure that

00:26:46,060 --> 00:26:52,400
cloudstack offers a pretty

00:26:48,890 --> 00:26:56,590
high-fidelity interface whatever public

00:26:52,400 --> 00:26:59,890
cloud your you're using and this is it

00:26:56,590 --> 00:26:59,890

YouTube URL: https://www.youtube.com/watch?v=rws9BrlM47A


