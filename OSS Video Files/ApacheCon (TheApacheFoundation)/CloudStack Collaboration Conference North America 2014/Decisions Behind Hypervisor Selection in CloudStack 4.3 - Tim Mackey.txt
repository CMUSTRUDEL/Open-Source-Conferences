Title: Decisions Behind Hypervisor Selection in CloudStack 4.3 - Tim Mackey
Publication date: 2014-04-29
Playlist: CloudStack Collaboration Conference North America 2014
Description: 
	CloudStack Collaboration Conference North America 2014
Captions: 
	00:00:00,539 --> 00:00:05,910
so if any of you who are in the back

00:00:03,720 --> 00:00:07,919
have weaker eyes you might want to move

00:00:05,910 --> 00:00:11,000
up front just a little bit because this

00:00:07,919 --> 00:00:13,559
is gonna be a bit of an eye chart so a

00:00:11,000 --> 00:00:15,960
little bit about me my name is Tim Maki

00:00:13,559 --> 00:00:17,850
my current role within Citrix is a

00:00:15,960 --> 00:00:20,340
XenServer community manager and part of

00:00:17,850 --> 00:00:22,439
the Citrix open-source business office

00:00:20,340 --> 00:00:23,789
I am also these enter evangelist been

00:00:22,439 --> 00:00:25,650
that for a few years

00:00:23,789 --> 00:00:27,590
occasional coder I used to say that I

00:00:25,650 --> 00:00:30,470
code in only an anger these days but

00:00:27,590 --> 00:00:32,460
maybe a little bit more coding lately

00:00:30,470 --> 00:00:34,680
some of the cool things that I've done

00:00:32,460 --> 00:00:36,300
you can see up there so I'm not just

00:00:34,680 --> 00:00:40,170
like grunting out little small bits of

00:00:36,300 --> 00:00:41,730
code but I've got a couple of

00:00:40,170 --> 00:00:45,180
interesting things up there as well on

00:00:41,730 --> 00:00:46,950
Twitter I'm at XenServer army and all

00:00:45,180 --> 00:00:51,300
the decks that I present including this

00:00:46,950 --> 00:00:53,430
one will be up on my SlideShare and in a

00:00:51,300 --> 00:01:00,210
second one like I'll flip some batteries

00:00:53,430 --> 00:01:04,769
into the clicker there we go and things

00:01:00,210 --> 00:01:07,400
moving so with the whole XenServer piece

00:01:04,769 --> 00:01:09,810
behind me you are well within your

00:01:07,400 --> 00:01:10,979
expectations of saying that well the

00:01:09,810 --> 00:01:13,140
best hypervisor is going to be send

00:01:10,979 --> 00:01:15,060
server and the reality is the best

00:01:13,140 --> 00:01:17,310
hypervisor is the one that's going to

00:01:15,060 --> 00:01:19,320
give you what you need at the end of the

00:01:17,310 --> 00:01:21,630
day and so what are we trying to

00:01:19,320 --> 00:01:23,630
accomplish and within 30 minutes I'm

00:01:21,630 --> 00:01:26,970
going to talk a little bit quicker so

00:01:23,630 --> 00:01:29,970
the big thing about clouds is that

00:01:26,970 --> 00:01:31,290
everybody wants to cloud today and your

00:01:29,970 --> 00:01:33,570
boss is gonna say gee whiz but I need

00:01:31,290 --> 00:01:36,450
one and then low and behold you have to

00:01:33,570 --> 00:01:37,470
actually build one so in order to start

00:01:36,450 --> 00:01:38,850
out with something that you're actually

00:01:37,470 --> 00:01:40,500
going to be successful with you first

00:01:38,850 --> 00:01:42,210
have to define what it is that you want

00:01:40,500 --> 00:01:44,220
to accomplish so what are the types of

00:01:42,210 --> 00:01:45,689
services that you're going to offer who

00:01:44,220 --> 00:01:47,040
has access to them who's actually owning

00:01:45,689 --> 00:01:49,229
them who's going to be maintaining them

00:01:47,040 --> 00:01:52,439
what did the templates look like and

00:01:49,229 --> 00:01:54,509
things of that nature defining all the

00:01:52,439 --> 00:01:58,530
expectations around tenancy requirements

00:01:54,509 --> 00:02:00,479
data isolation key management who owns

00:01:58,530 --> 00:02:02,820
what from a compliance perspective those

00:02:00,479 --> 00:02:06,079
are all factors that go into the

00:02:02,820 --> 00:02:09,509
definition of success within cloud and

00:02:06,079 --> 00:02:11,730
all of those pieces well they're not

00:02:09,509 --> 00:02:13,769
actually technology selection those are

00:02:11,730 --> 00:02:17,109
the things that actually matter to

00:02:13,769 --> 00:02:18,459
you.your org your customers org and so

00:02:17,109 --> 00:02:21,760
forth in terms of being able to decide

00:02:18,459 --> 00:02:23,290
what success is and so one of the things

00:02:21,760 --> 00:02:25,810
that's really cool about cloud stack is

00:02:23,290 --> 00:02:27,609
that it's multi hypervisor you can mix

00:02:25,810 --> 00:02:30,370
and match pretty much anything that you

00:02:27,609 --> 00:02:31,629
want the cloud that I run internally

00:02:30,370 --> 00:02:33,639
within Citrix is called the showcase

00:02:31,629 --> 00:02:35,680
cloud it's got some vSphere it's got

00:02:33,639 --> 00:02:37,540
some KVM it's got a whole bunch of Zen

00:02:35,680 --> 00:02:38,859
server in there it's all mixed matched

00:02:37,540 --> 00:02:40,989
and I can go in provision whatever I

00:02:38,859 --> 00:02:43,930
need to and all of the pieces talk to

00:02:40,989 --> 00:02:45,969
each other as happy as happy gets some

00:02:43,930 --> 00:02:49,209
of the decisions that come into that are

00:02:45,969 --> 00:02:51,310
also do I want to pool things do I want

00:02:49,209 --> 00:02:52,719
to have a cloud which is made up of a

00:02:51,310 --> 00:02:55,840
whole bunch of independent hypervisors

00:02:52,719 --> 00:02:57,730
or do I want to use VMware's clustering

00:02:55,840 --> 00:02:59,769
or Zen servers clustering to accomplish

00:02:57,730 --> 00:03:01,180
what I need to accomplish and then it

00:02:59,769 --> 00:03:05,199
comes into storage definition and so

00:03:01,180 --> 00:03:06,819
forth so when I look at how I'm building

00:03:05,199 --> 00:03:07,930
these things and this is where all the

00:03:06,819 --> 00:03:09,579
eye charts are going to start and you

00:03:07,930 --> 00:03:12,870
can see where I've gotten some of them

00:03:09,579 --> 00:03:17,169
right now what we see and this is all

00:03:12,870 --> 00:03:19,150
current as a 4.3 what we see is we've

00:03:17,169 --> 00:03:21,729
got a couple of different choices in

00:03:19,150 --> 00:03:23,169
play and we've got some things that we

00:03:21,729 --> 00:03:24,639
want to be able to do now if you take

00:03:23,169 --> 00:03:27,009
the Zen server for example stock

00:03:24,639 --> 00:03:28,479
XenServer today comes with the open

00:03:27,009 --> 00:03:30,609
virtual switch as its default network

00:03:28,479 --> 00:03:32,349
stack if you want to use security groups

00:03:30,609 --> 00:03:34,989
with XenServer you actually have to go

00:03:32,349 --> 00:03:36,370
down to bridge mode which is contrary to

00:03:34,989 --> 00:03:39,009
most things that Citrix will recommend

00:03:36,370 --> 00:03:41,259
so a lot of these little gotchas are

00:03:39,009 --> 00:03:42,879
more tribal knowledge at this point and

00:03:41,259 --> 00:03:45,040
so that's kind of the point behind this

00:03:42,879 --> 00:03:47,199
presentation is give you the eye charts

00:03:45,040 --> 00:03:49,629
see what things work what things work

00:03:47,199 --> 00:03:51,669
with a certain asterisks beside and what

00:03:49,629 --> 00:03:53,500
you want to accomplish so for example if

00:03:51,669 --> 00:03:55,930
you want to do ipv6 if that is a true

00:03:53,500 --> 00:03:59,439
requirement for you yes then server can

00:03:55,930 --> 00:04:01,599
do ipv6 on the guest side but not on the

00:03:59,439 --> 00:04:03,549
host side if that's important to you you

00:04:01,599 --> 00:04:08,229
don't have ipv6 you would have to go to

00:04:03,549 --> 00:04:10,959
KBM for example looking at a VLAN

00:04:08,229 --> 00:04:12,879
segmentation or the advanced networking

00:04:10,959 --> 00:04:14,829
model you get some of the same kinds of

00:04:12,879 --> 00:04:17,859
restrictions and I love how when you

00:04:14,829 --> 00:04:19,539
shrink things down little R's appear but

00:04:17,859 --> 00:04:22,360
the maximum number of VLANs that you can

00:04:19,539 --> 00:04:25,449
support varies by your hypervisor again

00:04:22,360 --> 00:04:27,050
ipv6 is a KVM only thing if you want to

00:04:25,449 --> 00:04:29,650
be able to support

00:04:27,050 --> 00:04:32,740
a NetScaler in your environment to do

00:04:29,650 --> 00:04:35,120
load balancing or auto scaling of the

00:04:32,740 --> 00:04:37,180
network services you're not going to be

00:04:35,120 --> 00:04:40,550
able to do that if you choose Alex C

00:04:37,180 --> 00:04:44,090
similarly you get interesting things

00:04:40,550 --> 00:04:45,440
like note that's the next slide you'll

00:04:44,090 --> 00:04:48,050
you'll get some pieces that are

00:04:45,440 --> 00:04:49,970
specifically supported by the vendor in

00:04:48,050 --> 00:04:52,909
a cloud stack environment only on a

00:04:49,970 --> 00:04:54,409
specific hypervisor even if it's going

00:04:52,909 --> 00:04:55,669
to work on all hypervisors and so that's

00:04:54,409 --> 00:04:59,330
the support statement that they have in

00:04:55,669 --> 00:05:00,680
place and so that's actually contrail so

00:04:59,330 --> 00:05:03,080
it works perfectly fine on other

00:05:00,680 --> 00:05:05,800
hypervisors they've just chosen for now

00:05:03,080 --> 00:05:08,930
to support it only on certain server so

00:05:05,800 --> 00:05:11,569
natively we can do Jerry tunnels on top

00:05:08,930 --> 00:05:13,069
of sensor because that in a Zen server

00:05:11,569 --> 00:05:17,300
environment is our cross host private

00:05:13,069 --> 00:05:19,009
networks even though it were just the

00:05:17,300 --> 00:05:20,990
open virtual switch which can be put

00:05:19,009 --> 00:05:25,280
into KDM that concept and that de paula

00:05:20,990 --> 00:05:27,590
G doesn't exist there and again here's

00:05:25,280 --> 00:05:30,169
where we flipped things around if you

00:05:27,590 --> 00:05:32,569
have a desire to do and tiered

00:05:30,169 --> 00:05:34,400
applications and security groups and

00:05:32,569 --> 00:05:36,380
your Zen server you actually can't do

00:05:34,400 --> 00:05:38,000
both because one needs bridge and the

00:05:36,380 --> 00:05:40,520
other one needs the virtual switch to

00:05:38,000 --> 00:05:43,789
function and so a lot of these kinds of

00:05:40,520 --> 00:05:45,680
gotchas are employee so if I'm

00:05:43,789 --> 00:05:50,120
delivering specific network services and

00:05:45,680 --> 00:05:51,800
I want ipv6 well that's KVM security

00:05:50,120 --> 00:05:53,539
groups also work there and incredibly

00:05:51,800 --> 00:05:56,870
large well let's say the whole forty 94

00:05:53,539 --> 00:06:00,590
range for VLANs you get that with KVM if

00:05:56,870 --> 00:06:02,599
you want the X LAN and your vSphere all

00:06:00,590 --> 00:06:04,330
obviously you're going to need to get

00:06:02,599 --> 00:06:07,669
something like Enterprise Plus and play

00:06:04,330 --> 00:06:09,919
and probably also the nexus 1000v which

00:06:07,669 --> 00:06:13,969
is going to impact your overall success

00:06:09,919 --> 00:06:16,039
from a accosting perspective and some of

00:06:13,969 --> 00:06:17,840
these things actually do play out in

00:06:16,039 --> 00:06:20,150
terms of the overall success of the

00:06:17,840 --> 00:06:23,960
cloud by looking at what the cost of

00:06:20,150 --> 00:06:27,050
service delivery is so that's the

00:06:23,960 --> 00:06:29,900
network piece and when I do designs

00:06:27,050 --> 00:06:31,310
that's actually one of the areas where I

00:06:29,900 --> 00:06:32,960
spend the majority of my time because

00:06:31,310 --> 00:06:36,409
there's so many areas where it can just

00:06:32,960 --> 00:06:38,270
get confused quickly but instances need

00:06:36,409 --> 00:06:40,039
a home and so the first piece of this is

00:06:38,270 --> 00:06:40,729
primary storage so primary storage is

00:06:40,039 --> 00:06:42,319
fundamentally

00:06:40,729 --> 00:06:43,759
storage which is hooked up to the

00:06:42,319 --> 00:06:45,680
hypervisor where your VMs are actually

00:06:43,759 --> 00:06:49,339
running and live and are happy and can

00:06:45,680 --> 00:06:51,889
do whatever they need to do this is

00:06:49,339 --> 00:06:54,710
where hyper-v which is newly introduced

00:06:51,889 --> 00:06:56,029
within 4.3 starts to look very different

00:06:54,710 --> 00:07:00,229
than every other hypervisor that we've

00:06:56,029 --> 00:07:02,689
got so there is no NFS capability there

00:07:00,229 --> 00:07:04,039
is no I scuzzy capability now that

00:07:02,689 --> 00:07:05,749
doesn't mean that you can't do these

00:07:04,039 --> 00:07:07,819
things within hyper-v it just means that

00:07:05,749 --> 00:07:11,029
the hyper-v plug-in doesn't have this

00:07:07,819 --> 00:07:13,159
capability further in order to support

00:07:11,029 --> 00:07:16,669
primary storage they've chosen to go

00:07:13,159 --> 00:07:18,800
with SMB 3 which means that if you're

00:07:16,669 --> 00:07:20,719
doing multi hypervisor with hyper-v you

00:07:18,800 --> 00:07:23,180
have to contend with the fact that smb3

00:07:20,719 --> 00:07:24,529
is only on hyper-v and none of the other

00:07:23,180 --> 00:07:27,439
hypervisors that you might want to have

00:07:24,529 --> 00:07:29,059
in your environment if you want

00:07:27,439 --> 00:07:31,939
multipath I scuzzy so traditional

00:07:29,059 --> 00:07:34,309
Enterprise multipathing you're going to

00:07:31,939 --> 00:07:36,379
be using XenServer and cloud stack

00:07:34,309 --> 00:07:38,479
doesn't have the capability of defining

00:07:36,379 --> 00:07:41,059
all those paths so you have to define it

00:07:38,479 --> 00:07:43,939
within Xen servers storage repository

00:07:41,059 --> 00:07:46,159
wizard or on the command line and then

00:07:43,939 --> 00:07:50,689
set it up as a pre setup storage

00:07:46,159 --> 00:07:52,399
repository for for XenServer direct

00:07:50,689 --> 00:07:54,830
array access if you want to do some vai

00:07:52,399 --> 00:07:56,959
stuff that's vSphere through and through

00:07:54,830 --> 00:07:58,520
your template format obviously will map

00:07:56,959 --> 00:08:01,969
to whatever the capabilities of your

00:07:58,520 --> 00:08:03,560
hypervisor we have some plugins as well

00:08:01,969 --> 00:08:05,719
so the SolidFire plug-in the net app

00:08:03,560 --> 00:08:08,569
plug in there perfectly they're just not

00:08:05,719 --> 00:08:10,759
on hyper-v if you want to do some zone

00:08:08,569 --> 00:08:13,459
wide storage you get that with vSphere

00:08:10,759 --> 00:08:14,779
and KVM but not Zen server so a lot of

00:08:13,459 --> 00:08:15,860
these things kind of play out in terms

00:08:14,779 --> 00:08:17,990
of what your overall storage

00:08:15,860 --> 00:08:19,580
architecture is going to to look like

00:08:17,990 --> 00:08:23,870
and again if you want to do some RVD

00:08:19,580 --> 00:08:25,939
stuff well that's KVM today on the

00:08:23,870 --> 00:08:27,469
secondary storage side so that's where

00:08:25,939 --> 00:08:30,259
all the templates live and snapshots and

00:08:27,469 --> 00:08:32,329
so forth NFS is there across the board

00:08:30,259 --> 00:08:35,930
unless your hyper-v in which case you

00:08:32,329 --> 00:08:38,889
are back to SMB if you want to use swift

00:08:35,930 --> 00:08:41,479
you can but you need an NFS staging area

00:08:38,889 --> 00:08:43,810
if you want to use an s3 compatible

00:08:41,479 --> 00:08:46,040
storage mechanism you can do that

00:08:43,810 --> 00:08:48,500
providing you don't already also have an

00:08:46,040 --> 00:08:50,390
NFS secondary storage in place because

00:08:48,500 --> 00:08:52,120
the two of them today aren't compatible

00:08:50,390 --> 00:08:55,310
with each other

00:08:52,120 --> 00:09:00,680
so that's the network that's the storage

00:08:55,310 --> 00:09:01,880
and those are the two hardest pieces

00:09:00,680 --> 00:09:04,009
unless you want to take a look at the

00:09:01,880 --> 00:09:07,610
actual features themselves and kind of

00:09:04,009 --> 00:09:09,319
map a few of these things through so for

00:09:07,610 --> 00:09:11,569
example I'm just kind of cherry pick a

00:09:09,319 --> 00:09:14,240
few of these and this actually does play

00:09:11,569 --> 00:09:16,610
into how you manage an environment so

00:09:14,240 --> 00:09:18,230
when people start to do their first

00:09:16,610 --> 00:09:20,029
cloud one of the things that they're

00:09:18,230 --> 00:09:21,290
tempted to do is manage things the way

00:09:20,029 --> 00:09:23,139
that they've always managed it do it

00:09:21,290 --> 00:09:26,870
from dissenters do it from Zen Center

00:09:23,139 --> 00:09:28,399
use the same consoles but you can end up

00:09:26,870 --> 00:09:29,990
in a situation where some of those

00:09:28,399 --> 00:09:32,269
activities conflict with each other

00:09:29,990 --> 00:09:34,579
and so for example if I go and take a

00:09:32,269 --> 00:09:37,130
look at high availability Zen server has

00:09:34,579 --> 00:09:39,759
a nice high availability engine that

00:09:37,130 --> 00:09:43,220
does resource planning and pre-planning

00:09:39,759 --> 00:09:45,769
for around failure modes but you can't

00:09:43,220 --> 00:09:47,360
use that with cloud stack because the

00:09:45,769 --> 00:09:48,769
two of them have entirely different

00:09:47,360 --> 00:09:50,139
algorithms for what the correct answer

00:09:48,769 --> 00:09:52,970
is and they'll conflict with each other

00:09:50,139 --> 00:09:55,069
but if you're using vSphere it will

00:09:52,970 --> 00:09:57,019
natively use the h.a capabilities that

00:09:55,069 --> 00:09:58,699
are inside a V Center to perform the

00:09:57,019 --> 00:10:00,800
work which means that if you're a VMware

00:09:58,699 --> 00:10:02,329
admin you can very nicely go to V Center

00:10:00,800 --> 00:10:03,860
you can see all the h.a definitions you

00:10:02,329 --> 00:10:05,300
can see activities that are happening

00:10:03,860 --> 00:10:07,399
and other than the fact that there's

00:10:05,300 --> 00:10:09,410
these weird instance IDs and weird uu

00:10:07,399 --> 00:10:12,139
IDs that show up it all looks completely

00:10:09,410 --> 00:10:13,970
natural normal to you and if you make

00:10:12,139 --> 00:10:16,040
changes those will also flow through

00:10:13,970 --> 00:10:18,410
that cloud stack is able to understand

00:10:16,040 --> 00:10:19,880
what they are and so when someone's

00:10:18,410 --> 00:10:21,680
looking at it from a multi hypervisor

00:10:19,880 --> 00:10:24,019
perspective how they're managing these

00:10:21,680 --> 00:10:26,449
things really becomes a case of who is

00:10:24,019 --> 00:10:28,490
the master of the environment and so as

00:10:26,449 --> 00:10:31,519
best as possible if you can keep cloud

00:10:28,490 --> 00:10:33,350
stack itself in charge you're going to

00:10:31,519 --> 00:10:37,100
have a more successful multi hypervisor

00:10:33,350 --> 00:10:39,380
solution and so that even gets down into

00:10:37,100 --> 00:10:41,480
things like snapshots IO throttling

00:10:39,380 --> 00:10:43,399
being able to dedicate resources all of

00:10:41,480 --> 00:10:45,470
these really cool capabilities that

00:10:43,399 --> 00:10:48,410
exist within cloud stack are now

00:10:45,470 --> 00:10:50,810
starting to become hinged upon what

00:10:48,410 --> 00:10:52,790
hypervisors that you have and how those

00:10:50,810 --> 00:10:54,500
things have played out now one of the

00:10:52,790 --> 00:10:57,110
more interesting things from just a code

00:10:54,500 --> 00:10:58,910
contribution perspective is that some of

00:10:57,110 --> 00:11:01,819
these features have been developed

00:10:58,910 --> 00:11:03,380
around a specific need and they were

00:11:01,819 --> 00:11:05,630
perfectly well within that specific need

00:11:03,380 --> 00:11:07,280
but if you wanted to extend

00:11:05,630 --> 00:11:09,620
that functionality that's an opportunity

00:11:07,280 --> 00:11:12,110
to contribute as well and say that you

00:11:09,620 --> 00:11:13,550
know what just because I don't have for

00:11:12,110 --> 00:11:14,870
example memory snapshotting and hyper-v

00:11:13,550 --> 00:11:16,820
doesn't mean that it shouldn't work and

00:11:14,870 --> 00:11:19,190
if I've got a hyper-v environment why

00:11:16,820 --> 00:11:22,040
not make it work or just because I've

00:11:19,190 --> 00:11:23,840
got a memory overcommit limit capability

00:11:22,040 --> 00:11:24,470
within XenServer I also want to have it

00:11:23,840 --> 00:11:31,010
in a VM

00:11:24,470 --> 00:11:33,020
why can't I make that work so that's the

00:11:31,010 --> 00:11:34,730
core functionality but if you take a

00:11:33,020 --> 00:11:36,920
look at the capabilities of the

00:11:34,730 --> 00:11:39,620
individual hypervisors things get very

00:11:36,920 --> 00:11:41,990
interesting so I take a look at maximum

00:11:39,620 --> 00:11:44,140
VM density and anyone who's how many

00:11:41,990 --> 00:11:46,460
people here have you send server before

00:11:44,140 --> 00:11:51,530
how many people remember that Zen server

00:11:46,460 --> 00:11:52,820
has a fairly low VM limit on it guy in

00:11:51,530 --> 00:11:55,280
the back is grinning nicely on that one

00:11:52,820 --> 00:11:57,410
we've actually bumped it up in 6 - quite

00:11:55,280 --> 00:11:58,640
nicely some of the stuff that russ was

00:11:57,410 --> 00:12:02,000
talking about we also took and brought

00:11:58,640 --> 00:12:04,040
into Zen server so it's not uncommon to

00:12:02,000 --> 00:12:06,860
be able to get hundreds of VMS per host

00:12:04,040 --> 00:12:08,900
it used to be a case of you could buy

00:12:06,860 --> 00:12:12,080
hardware that you couldn't fully utilize

00:12:08,900 --> 00:12:15,770
now you can buy will use everything that

00:12:12,080 --> 00:12:18,680
you can buy so class ax VM density has

00:12:15,770 --> 00:12:22,820
been bumped up to 504 3 & 4 - and before

00:12:18,680 --> 00:12:24,110
it was 128 we use direct sappy calls so

00:12:22,820 --> 00:12:25,640
there's nothing special that you have to

00:12:24,110 --> 00:12:28,280
install on a Zen server host in order to

00:12:25,640 --> 00:12:30,590
make it work then server has a max

00:12:28,280 --> 00:12:33,320
cluster size of 16 I usually make some

00:12:30,590 --> 00:12:34,790
comment at this point about choosing the

00:12:33,320 --> 00:12:36,350
correct cluster size because if you're

00:12:34,790 --> 00:12:37,820
cloud is successful whatever that number

00:12:36,350 --> 00:12:39,680
is is irrelevant cuz you're probably

00:12:37,820 --> 00:12:42,890
gonna grow beyond it so use something

00:12:39,680 --> 00:12:44,630
that is modular for you so if it's 4 if

00:12:42,890 --> 00:12:45,980
it's one if it's 6 if it's 10 whatever

00:12:44,630 --> 00:12:49,250
it is but make certain that you've got

00:12:45,980 --> 00:12:51,260
some modularity behind it on the

00:12:49,250 --> 00:12:53,870
operating system side of things one of

00:12:51,260 --> 00:12:57,140
the things that we've decided it makes

00:12:53,870 --> 00:12:59,000
easy to explain easy to understand we

00:12:57,140 --> 00:13:00,080
support any Windows operating system

00:12:59,000 --> 00:13:01,520
that Microsoft is going to support

00:13:00,080 --> 00:13:03,320
because we're not going to be in the

00:13:01,520 --> 00:13:04,790
business of fixing windows so something

00:13:03,320 --> 00:13:06,620
breaks we don't want to have kind of a

00:13:04,790 --> 00:13:08,360
finger-pointing thing which means the XP

00:13:06,620 --> 00:13:09,440
is technically dropped off the list as

00:13:08,360 --> 00:13:11,660
of last week

00:13:09,440 --> 00:13:15,230
same thing with Linux operating systems

00:13:11,660 --> 00:13:18,100
we've got all the the rels the sleds and

00:13:15,230 --> 00:13:21,670
so forth some bun - and

00:13:18,100 --> 00:13:23,770
in there as well on the XenServer

00:13:21,670 --> 00:13:25,900
advanced features we support our virtual

00:13:23,770 --> 00:13:28,840
switch storage Zen motion which is to be

00:13:25,900 --> 00:13:31,840
able ability to migrate a VM and its

00:13:28,840 --> 00:13:33,730
storage to a different one or even

00:13:31,840 --> 00:13:35,380
across pools as well as the dynamic

00:13:33,730 --> 00:13:38,680
memory control to do the memory over

00:13:35,380 --> 00:13:40,810
commit those are the three quote premium

00:13:38,680 --> 00:13:44,770
features that are supported within

00:13:40,810 --> 00:13:50,110
XenServer and within clouds dec oh these

00:13:44,770 --> 00:13:52,090
are 5.5 the primary mode of integration

00:13:50,110 --> 00:13:54,370
is with vCenter so if you just want to

00:13:52,090 --> 00:13:57,760
use the vcr hypervisor that's not a

00:13:54,370 --> 00:14:01,270
supported entity we are making direct v

00:13:57,760 --> 00:14:02,800
center calls the vm density is again

00:14:01,270 --> 00:14:04,350
comparable to what we have within

00:14:02,800 --> 00:14:07,800
XenServer so you can do some pretty

00:14:04,350 --> 00:14:10,030
highly dense highly dense environments

00:14:07,800 --> 00:14:11,500
advanced features this is where the

00:14:10,030 --> 00:14:13,180
beauty of integrating directly with V

00:14:11,500 --> 00:14:15,130
Center comes in we get the H a we get

00:14:13,180 --> 00:14:17,070
DRS we get the virtual distributed

00:14:15,130 --> 00:14:19,900
switch we get V motion we get the nexus

00:14:17,070 --> 00:14:23,860
1000v we get the a s a 1000 be kind of

00:14:19,900 --> 00:14:26,110
out of the box broadest support for

00:14:23,860 --> 00:14:27,360
operating systems out there and so this

00:14:26,110 --> 00:14:30,070
really comes down to

00:14:27,360 --> 00:14:32,590
don't try and fit something into the

00:14:30,070 --> 00:14:33,880
model if you don't have to if you have

00:14:32,590 --> 00:14:35,950
an operating system it's only supported

00:14:33,880 --> 00:14:37,750
on VMware well let's go and deploy it on

00:14:35,950 --> 00:14:39,190
VMware if it's an application that's

00:14:37,750 --> 00:14:41,170
only supported on VMware look go and

00:14:39,190 --> 00:14:42,370
deploy it on top of VMware don't don't

00:14:41,170 --> 00:14:43,690
try and mess with the weird support

00:14:42,370 --> 00:14:45,940
statements just to try and make it all

00:14:43,690 --> 00:14:47,560
fit in let Klaus Tech be that

00:14:45,940 --> 00:14:49,990
abstraction layer so that the users

00:14:47,560 --> 00:14:54,220
don't know and don't care it all just

00:14:49,990 --> 00:14:56,590
kind of works so k vm and this is

00:14:54,220 --> 00:15:01,570
specifically looking at sent 65 as well

00:14:56,590 --> 00:15:04,780
as the LTS version of unto 12 the

00:15:01,570 --> 00:15:07,300
maximum vm density is whatever your p

00:15:04,780 --> 00:15:10,120
cores are multiplied by 10 cloud stack

00:15:07,300 --> 00:15:13,000
will only by default lets you run up to

00:15:10,120 --> 00:15:16,870
50 per host you can change that in the

00:15:13,000 --> 00:15:18,190
config variables it does have a its

00:15:16,870 --> 00:15:19,810
innovations through libvirt but there is

00:15:18,190 --> 00:15:21,940
a cloud stack agent which means that on

00:15:19,810 --> 00:15:23,980
every k vm host you have to have a cloud

00:15:21,940 --> 00:15:25,660
stack agent installed which also means

00:15:23,980 --> 00:15:29,890
that you have to be sensitive to things

00:15:25,660 --> 00:15:31,850
like upgrade outages and so forth there

00:15:29,890 --> 00:15:33,740
are none of the advanced features

00:15:31,850 --> 00:15:35,300
for example you might get with Red Hat

00:15:33,740 --> 00:15:36,769
Enterprise virtualization are supported

00:15:35,300 --> 00:15:39,500
within us because it's livered not over

00:15:36,769 --> 00:15:41,209
that we're in agreeing with and the

00:15:39,500 --> 00:15:44,720
operating systems are pretty broad as

00:15:41,209 --> 00:15:48,380
well on the container side of things is

00:15:44,720 --> 00:15:49,910
this theoretical limit of 6000 actually

00:15:48,380 --> 00:15:53,899
out of curiosity who's worked with

00:15:49,910 --> 00:15:55,100
containers so far cool

00:15:53,899 --> 00:15:58,399
that's actually a little bit higher than

00:15:55,100 --> 00:15:59,630
I expected I might want to talk to a

00:15:58,399 --> 00:16:01,040
couple of you guys afterwards because I

00:15:59,630 --> 00:16:05,149
got an interesting little side project

00:16:01,040 --> 00:16:07,220
on the containers and hypervisors this

00:16:05,149 --> 00:16:11,720
also does do the integration through

00:16:07,220 --> 00:16:13,610
libvirt but it doesn't have the

00:16:11,720 --> 00:16:15,889
capability of doing the system vm so the

00:16:13,610 --> 00:16:18,649
console proxy as well as the secondary

00:16:15,889 --> 00:16:20,779
storage via so you need to have a pure k

00:16:18,649 --> 00:16:23,329
vm environment in there someplace to run

00:16:20,779 --> 00:16:28,160
those system VMs otherwise it's simply

00:16:23,329 --> 00:16:31,579
not going to work hyper-v newest

00:16:28,160 --> 00:16:33,500
operating system with 4.3 we will

00:16:31,579 --> 00:16:36,079
support the maximum VM that's to do that

00:16:33,500 --> 00:16:37,699
Microsoft does which is 1024 there is a

00:16:36,079 --> 00:16:39,620
cloud stack agent which is installed on

00:16:37,699 --> 00:16:44,029
the hyper-v hosts so that is all written

00:16:39,620 --> 00:16:46,970
in C sharp and WMI there is no System

00:16:44,029 --> 00:16:49,100
Center integration so any config manager

00:16:46,970 --> 00:16:50,569
vmm ops manager

00:16:49,100 --> 00:16:52,130
none of those components are integrated

00:16:50,569 --> 00:16:54,290
at this point in time they may be in

00:16:52,130 --> 00:16:58,220
time but this is the one dato of this

00:16:54,290 --> 00:17:01,339
particular support max cluster size is

00:16:58,220 --> 00:17:03,259
64 but we'd probably recommend going a

00:17:01,339 --> 00:17:07,669
little bit below that just to have more

00:17:03,259 --> 00:17:10,100
modularity so in terms of the best one

00:17:07,669 --> 00:17:12,439
well the real answer is there is no best

00:17:10,100 --> 00:17:15,319
one the best one is going to be that

00:17:12,439 --> 00:17:19,130
which gets the job done for you in the

00:17:15,319 --> 00:17:20,709
most economical fashion and so a lot of

00:17:19,130 --> 00:17:23,679
the best practices that are out there

00:17:20,709 --> 00:17:26,209
may not necessarily yield the best one

00:17:23,679 --> 00:17:28,459
there was customer that was working with

00:17:26,209 --> 00:17:29,840
a couple months ago who had their best

00:17:28,459 --> 00:17:31,309
practice was to have some direct

00:17:29,840 --> 00:17:33,140
attached storage on every single host

00:17:31,309 --> 00:17:36,500
and they had a specific vendor in mind

00:17:33,140 --> 00:17:40,040
and that ended up yielding a cost per VM

00:17:36,500 --> 00:17:41,770
per month of $1,000 which was well

00:17:40,040 --> 00:17:45,080
outside of what they had is their range

00:17:41,770 --> 00:17:47,870
for what was acceptable so there and

00:17:45,080 --> 00:17:49,460
midst of doing a re our Kotecha so that

00:17:47,870 --> 00:17:53,299
they can get things a little bit more

00:17:49,460 --> 00:17:54,649
under control so just because you've

00:17:53,299 --> 00:17:56,090
always done something a certain way

00:17:54,649 --> 00:17:57,679
doesn't mean that you have to and

00:17:56,090 --> 00:17:59,360
particularly when you start to get an

00:17:57,679 --> 00:18:02,570
abstraction layer like cloud stack above

00:17:59,360 --> 00:18:03,980
this nobody really needs to know what's

00:18:02,570 --> 00:18:06,950
running under the Carver's so long as

00:18:03,980 --> 00:18:09,289
it's running within the SLA so the

00:18:06,950 --> 00:18:11,090
primary value proposition for KVM really

00:18:09,289 --> 00:18:14,059
is its low costs very familiar

00:18:11,090 --> 00:18:16,309
administration model and it is broadly

00:18:14,059 --> 00:18:18,409
developed that's got a very rich feature

00:18:16,309 --> 00:18:20,929
set that has active development

00:18:18,409 --> 00:18:24,230
underneath it so obvious uses are

00:18:20,929 --> 00:18:26,480
devtest clouds web hosting tenant

00:18:24,230 --> 00:18:28,039
density which is gonna dictate some Sdn

00:18:26,480 --> 00:18:29,539
use cases

00:18:28,039 --> 00:18:31,190
one of the biggest weakness is of course

00:18:29,539 --> 00:18:34,070
being that it does require that libvirt

00:18:31,190 --> 00:18:35,299
agent so it's another management thing

00:18:34,070 --> 00:18:36,830
that you have to take care of when you

00:18:35,299 --> 00:18:40,029
go and perform upgrades and so forth

00:18:36,830 --> 00:18:42,409
very limited native storage options and

00:18:40,029 --> 00:18:44,120
because of the integration with lavertus

00:18:42,409 --> 00:18:47,059
opposed to over there's no advanced

00:18:44,120 --> 00:18:49,070
capabilities thrown in on the container

00:18:47,059 --> 00:18:54,110
side of things I was first introduced in

00:18:49,070 --> 00:18:56,600
cloud stack 4.2 by specific vendor it

00:18:54,110 --> 00:18:59,679
does require KVM for the system VMs as I

00:18:56,600 --> 00:19:04,100
mentioned as well as that libvirt agent

00:18:59,679 --> 00:19:06,559
really really well designed for hosting

00:19:04,100 --> 00:19:08,240
environments where you might have

00:19:06,559 --> 00:19:12,409
smaller applications in a dev test

00:19:08,240 --> 00:19:14,840
environment as well hyper-v the primary

00:19:12,409 --> 00:19:18,230
value prop here is the unlimited Windows

00:19:14,840 --> 00:19:19,820
Server licenses that you get so if there

00:19:18,230 --> 00:19:23,289
is a requirement have Windows Server in

00:19:19,820 --> 00:19:26,360
the in your cloud positioning with

00:19:23,289 --> 00:19:29,299
Windows Server 2012 r2 datacenter

00:19:26,360 --> 00:19:31,519
Edition gives you that capability for

00:19:29,299 --> 00:19:33,710
those people who are familiar with

00:19:31,519 --> 00:19:36,380
Microsoft's management paradigm this is

00:19:33,710 --> 00:19:39,350
that easy to manage perfect for dotnet

00:19:36,380 --> 00:19:42,850
hosting Windows workloads as well as

00:19:39,350 --> 00:19:45,399
desktop as a service type clouds no real

00:19:42,850 --> 00:19:47,840
use of advanced features or functions

00:19:45,399 --> 00:19:51,289
again no integration with system Center

00:19:47,840 --> 00:19:53,809
as well on the vSphere side of things

00:19:51,289 --> 00:19:55,880
broadest application broadest operating

00:19:53,809 --> 00:19:58,040
system support

00:19:55,880 --> 00:20:00,460
very easy to find people who know how to

00:19:58,040 --> 00:20:03,080
and then assert vSphere environment

00:20:00,460 --> 00:20:04,820
incredibly large ecosystem so long as

00:20:03,080 --> 00:20:08,680
VMware doesn't upset somebody this time

00:20:04,820 --> 00:20:11,180
and change some API is around but

00:20:08,680 --> 00:20:15,350
fundamentally you've got a vast pool of

00:20:11,180 --> 00:20:16,550
stuff to to pick from many of the cloud

00:20:15,350 --> 00:20:18,580
stack features are actually native

00:20:16,550 --> 00:20:21,320
implementations which is really good

00:20:18,580 --> 00:20:23,870
private enterprise clouds this is where

00:20:21,320 --> 00:20:26,780
we see the majority of the vSphere

00:20:23,870 --> 00:20:27,770
deployments being mostly because well

00:20:26,780 --> 00:20:31,580
that's where the majority of the vSphere

00:20:27,770 --> 00:20:33,590
deployments are devtest clouds the

00:20:31,580 --> 00:20:35,600
biggest weakness is on the costing side

00:20:33,590 --> 00:20:38,870
of things and what we have been seeing

00:20:35,600 --> 00:20:40,490
is a fair amount of interest in hey if I

00:20:38,870 --> 00:20:42,440
go cloud stack do I still need to have

00:20:40,490 --> 00:20:44,300
the vSphere environment in place because

00:20:42,440 --> 00:20:46,220
now I can go and have that forcing

00:20:44,300 --> 00:20:47,960
function that says I can go and look at

00:20:46,220 --> 00:20:51,020
what the actual cost of service delivery

00:20:47,960 --> 00:20:53,990
is keep the vSphere for the really

00:20:51,020 --> 00:20:56,120
difficult things and let the utility

00:20:53,990 --> 00:21:01,970
stuff which is where most clouds are

00:20:56,120 --> 00:21:06,020
today take advantage of all of the the

00:21:01,970 --> 00:21:07,700
more web-centric workloads vCenter

00:21:06,020 --> 00:21:10,660
integration does require some redundant

00:21:07,700 --> 00:21:12,860
designs so if anyone who's run the

00:21:10,660 --> 00:21:14,540
vmware knows that if the center goes

00:21:12,860 --> 00:21:16,250
down then you can't manage the

00:21:14,540 --> 00:21:17,570
environment so you do need to have the

00:21:16,250 --> 00:21:19,730
whole heart beating mechanism in place

00:21:17,570 --> 00:21:21,020
as well and have cloud stack talk to the

00:21:19,730 --> 00:21:23,290
heartbeat server as opposed to directly

00:21:21,020 --> 00:21:26,410
to the vCenter server itself

00:21:23,290 --> 00:21:29,330
one other gotcha in here is that while

00:21:26,410 --> 00:21:32,090
you can have multiple clusters per zone

00:21:29,330 --> 00:21:35,210
you can only have one via the centered

00:21:32,090 --> 00:21:37,070
data center node per zone and that's the

00:21:35,210 --> 00:21:38,180
change that happened within for two for

00:21:37,070 --> 00:21:39,590
one you did have a little bit of

00:21:38,180 --> 00:21:43,490
flexibility around that but with 4 -

00:21:39,590 --> 00:21:46,340
that's a new that's a new change on the

00:21:43,490 --> 00:21:49,460
XenServer side of things again it's a

00:21:46,340 --> 00:21:50,900
low cost option I'm not certain what the

00:21:49,460 --> 00:21:53,120
current stats are but I've heard numbers

00:21:50,900 --> 00:21:54,260
as high as 85 to 90% of cloud stack

00:21:53,120 --> 00:21:56,690
based clouds have some amount of

00:21:54,260 --> 00:21:59,900
XenServer in them very very active

00:21:56,690 --> 00:22:01,370
development it is direct to integration

00:21:59,900 --> 00:22:03,110
through the zappy tool stack which is

00:22:01,370 --> 00:22:05,059
what russ was talking about

00:22:03,110 --> 00:22:09,380
as one of the available tool stack

00:22:05,059 --> 00:22:13,370
options I just did a code commit to

00:22:09,380 --> 00:22:15,920
separate out the concept of Zen from the

00:22:13,370 --> 00:22:17,510
concept of sense server within cloud

00:22:15,920 --> 00:22:20,570
stack today they're a little bit

00:22:17,510 --> 00:22:22,400
commingled the idea being that down the

00:22:20,570 --> 00:22:24,679
road in the not so distant future we

00:22:22,400 --> 00:22:27,320
could have a pure native Zen project

00:22:24,679 --> 00:22:29,780
hypervisor in there for those situations

00:22:27,320 --> 00:22:32,299
where you want to have a different

00:22:29,780 --> 00:22:35,540
tooling to accomplish whatever tasks you

00:22:32,299 --> 00:22:38,059
need attack to attack cloud use cases

00:22:35,540 --> 00:22:41,059
desktop as a service within Citrix is

00:22:38,059 --> 00:22:42,200
kind of a sweet spot for Citrix so we

00:22:41,059 --> 00:22:45,080
know that this is going to work through

00:22:42,200 --> 00:22:47,600
the stack very large VM density

00:22:45,080 --> 00:22:50,929
I typically positions and server versus

00:22:47,600 --> 00:22:52,580
KVM as they're both going to do pretty

00:22:50,929 --> 00:22:55,850
much what you would want from a

00:22:52,580 --> 00:22:57,500
virtualization perspective the primary

00:22:55,850 --> 00:22:59,660
difference is going to be on the

00:22:57,500 --> 00:23:01,130
security side of things because Zen

00:22:59,660 --> 00:23:03,260
server is more of a type 1 hypervisor

00:23:01,130 --> 00:23:04,910
versus KVM being more of a type 2

00:23:03,260 --> 00:23:06,710
hypervisor the security boundaries are a

00:23:04,910 --> 00:23:08,210
lot more rigid in a Zen server

00:23:06,710 --> 00:23:09,679
environment and so that means that

00:23:08,210 --> 00:23:10,030
tenant isolation it's a little bit

00:23:09,679 --> 00:23:12,950
better

00:23:10,030 --> 00:23:14,179
the net result being that you can mix

00:23:12,950 --> 00:23:17,059
and match them they all work perfectly

00:23:14,179 --> 00:23:18,350
fine together so for those situations

00:23:17,059 --> 00:23:20,390
where you need that additional security

00:23:18,350 --> 00:23:22,429
flip some Zen server in when you don't

00:23:20,390 --> 00:23:24,620
need it you can keep some Zen server or

00:23:22,429 --> 00:23:30,230
you can go to KVM and accomplish exactly

00:23:24,620 --> 00:23:34,130
the same task suite so multi hypervisor

00:23:30,230 --> 00:23:35,540
support I mentioned that I have this

00:23:34,130 --> 00:23:37,130
showcase cloud and I've got all this

00:23:35,540 --> 00:23:39,740
wonderful capacity I'm running three

00:23:37,130 --> 00:23:41,990
hypervisors in there the biggest thing

00:23:39,740 --> 00:23:45,260
that I had to contend with was ensuring

00:23:41,990 --> 00:23:48,320
that the network labels and labeling was

00:23:45,260 --> 00:23:50,299
compatible across all of them XenServer

00:23:48,320 --> 00:23:53,480
calls things a certain way

00:23:50,299 --> 00:23:55,160
KVM calls things similar but not quite

00:23:53,480 --> 00:23:57,080
the same and VMware is way out in left

00:23:55,160 --> 00:23:58,520
field you can make them all work

00:23:57,080 --> 00:24:00,380
together quite nicely

00:23:58,520 --> 00:24:02,030
it's just a matter of sitting down and

00:24:00,380 --> 00:24:04,370
saying well what is the thing called

00:24:02,030 --> 00:24:05,720
that is physically attached to this set

00:24:04,370 --> 00:24:08,390
of trunk ports so that I can go and

00:24:05,720 --> 00:24:10,760
accomplish what I need to do the ability

00:24:08,390 --> 00:24:12,980
to actually successfully network these

00:24:10,760 --> 00:24:15,950
together really is the intersect of the

00:24:12,980 --> 00:24:16,790
core capabilities of those hypervisors

00:24:15,950 --> 00:24:18,980
so again

00:24:16,790 --> 00:24:21,710
if you wanted ipv6 well you're not gonna

00:24:18,980 --> 00:24:24,620
get it all the way across because KBM is

00:24:21,710 --> 00:24:27,590
the only one it has it on the storage

00:24:24,620 --> 00:24:31,760
side of things that first bullet point

00:24:27,590 --> 00:24:35,360
is Tim's success story as opposed to a

00:24:31,760 --> 00:24:37,940
true requirement anymore in 4.0 there

00:24:35,360 --> 00:24:39,020
was a series of bugs where if you had

00:24:37,940 --> 00:24:42,740
multi hypervisor

00:24:39,020 --> 00:24:44,720
the last hypervisor to be added a system

00:24:42,740 --> 00:24:46,250
VM could get stuck there and if there

00:24:44,720 --> 00:24:47,840
was an insufficient capacity and needed

00:24:46,250 --> 00:24:51,380
to restart it wouldn't automatically

00:24:47,840 --> 00:24:53,690
restart on other clusters that were with

00:24:51,380 --> 00:24:55,640
plenty of capacity so what I do is I

00:24:53,690 --> 00:24:57,170
actually pin that and you can do that

00:24:55,640 --> 00:24:59,420
within the global config parameters and

00:24:57,170 --> 00:25:05,210
say what the actual preferred hypervisor

00:24:59,420 --> 00:25:07,490
is for for a specific system VM zones

00:25:05,210 --> 00:25:10,400
with primary storage zone wide primary

00:25:07,490 --> 00:25:13,970
storage is as limited as a new feature

00:25:10,400 --> 00:25:15,830
4-4-2 so little bits there

00:25:13,970 --> 00:25:21,350
same thing with vSphere data center of

00:25:15,830 --> 00:25:23,630
spanning zones hyper-v today they say

00:25:21,350 --> 00:25:25,250
that it can be but practically it can't

00:25:23,630 --> 00:25:27,380
be mixed with other hypervisors because

00:25:25,250 --> 00:25:30,080
of things like storage as well as a

00:25:27,380 --> 00:25:31,220
network labeling you'd be impressed with

00:25:30,080 --> 00:25:33,170
a number of people who asked the

00:25:31,220 --> 00:25:37,370
question can I use H a to migrate

00:25:33,170 --> 00:25:42,370
between say vSphere and XenServer and

00:25:37,370 --> 00:25:45,410
the answer is huh no can't be done

00:25:42,370 --> 00:25:46,550
capacity planning it's a lot more

00:25:45,410 --> 00:25:48,920
difficult when you have multiple

00:25:46,550 --> 00:25:50,450
hypervisors in place but it can be done

00:25:48,920 --> 00:25:55,180
it just requires a lot more attention to

00:25:50,450 --> 00:25:57,770
detail and so if we tie it all together

00:25:55,180 --> 00:25:59,180
the most important thing is to find what

00:25:57,770 --> 00:26:01,550
it is that you're going to have as your

00:25:59,180 --> 00:26:04,730
success criteria we hear a lot about

00:26:01,550 --> 00:26:06,290
fail fast and fail often your boss

00:26:04,730 --> 00:26:08,120
doesn't want to hear that your boss

00:26:06,290 --> 00:26:09,980
wants something to be successful so I go

00:26:08,120 --> 00:26:11,570
back to what a virtualization looked

00:26:09,980 --> 00:26:13,610
like ten years ago you started with the

00:26:11,570 --> 00:26:15,110
easy things you didn't you went with

00:26:13,610 --> 00:26:18,020
file and print servers and web servers

00:26:15,110 --> 00:26:20,090
you may have thrown in some LDAP servers

00:26:18,020 --> 00:26:22,280
or domain controllers you didn't start

00:26:20,090 --> 00:26:23,900
with s ap you didn't start with Oracle

00:26:22,280 --> 00:26:26,540
financials you didn't start with a

00:26:23,900 --> 00:26:29,510
massive sharepoint farm or something of

00:26:26,540 --> 00:26:30,100
that nature be successful show that this

00:26:29,510 --> 00:26:31,870
cloud

00:26:30,100 --> 00:26:34,780
thing can work show that this cloud

00:26:31,870 --> 00:26:36,850
thing can deliver value find some

00:26:34,780 --> 00:26:38,320
topology that actually makes sense are

00:26:36,850 --> 00:26:41,020
you going to be a service provider and

00:26:38,320 --> 00:26:44,500
go crazy designed for that at the outset

00:26:41,020 --> 00:26:46,960
are you a private enterprise and you've

00:26:44,500 --> 00:26:48,760
only got say a dozen business units to

00:26:46,960 --> 00:26:50,559
contend with design around that

00:26:48,760 --> 00:26:52,750
assumption there's there's no reason to

00:26:50,559 --> 00:26:55,799
build something more complex than you

00:26:52,750 --> 00:26:58,390
need to same thing is true with storage

00:26:55,799 --> 00:27:00,669
from that decide what you want to

00:26:58,390 --> 00:27:02,950
support don't let everyone and their

00:27:00,669 --> 00:27:04,570
uncle come in and say hey I'm gonna have

00:27:02,950 --> 00:27:06,100
this template I'm gonna do these things

00:27:04,570 --> 00:27:07,960
and I'm gonna have all this random stuff

00:27:06,100 --> 00:27:09,669
because at some point something's going

00:27:07,960 --> 00:27:13,210
to go wrong and you're not necessarily

00:27:09,669 --> 00:27:15,820
gonna be able to pull back and say oh I

00:27:13,210 --> 00:27:18,010
ran out of this space because this guy

00:27:15,820 --> 00:27:20,049
defined a template that needed 10

00:27:18,010 --> 00:27:21,309
terabytes of storage and I don't have 10

00:27:20,049 --> 00:27:23,409
terabytes of storage to give them

00:27:21,309 --> 00:27:26,370
anywhere why what you don't to be in

00:27:23,409 --> 00:27:29,080
that business once you have all of that

00:27:26,370 --> 00:27:30,669
you've now got yourself a set of

00:27:29,080 --> 00:27:31,840
requirements that will dictate the types

00:27:30,669 --> 00:27:34,630
of hypervisors that are going to meet

00:27:31,840 --> 00:27:37,270
your requirement far too often I see the

00:27:34,630 --> 00:27:38,650
hey we're a vmware shop let's go put

00:27:37,270 --> 00:27:40,720
vmware in there because vmware is kind

00:27:38,650 --> 00:27:42,789
of cool and now you're kind of trying to

00:27:40,720 --> 00:27:44,980
fit what you want to accomplish into a

00:27:42,789 --> 00:27:46,539
vmware model as opposed to saying hey

00:27:44,980 --> 00:27:48,400
I've got this opportunity let's go build

00:27:46,539 --> 00:27:49,929
the things that I need to build to be

00:27:48,400 --> 00:27:51,909
successful and find the technology that

00:27:49,929 --> 00:27:54,880
makes most amount of sense then validate

00:27:51,909 --> 00:27:57,429
that matrix and build your cloud it's

00:27:54,880 --> 00:27:58,799
that simple and I think I got one minute

00:27:57,429 --> 00:28:04,150
left

00:27:58,799 --> 00:28:07,409
questions nobody gets a t-shirt we're

00:28:04,150 --> 00:28:07,409
gonna lob a few these things out

00:28:08,950 --> 00:28:24,460
let's see we have 1 4 I have no idea

00:28:17,980 --> 00:28:28,960
what the sizes of these are oops let's

00:28:24,460 --> 00:28:32,800
see the last time I did one of these

00:28:28,960 --> 00:28:35,620
presentations I had a whole bunch of old

00:28:32,800 --> 00:28:38,080
CloudStack t-shirts of random sizes and

00:28:35,620 --> 00:28:42,430
who asked the questions they got

00:28:38,080 --> 00:28:43,930
t-shirts so that's it for me I thank you

00:28:42,430 --> 00:28:46,740
very much I hope this was good for you

00:28:43,930 --> 00:28:46,740

YouTube URL: https://www.youtube.com/watch?v=CcjpA2ilqKI


