Title: Using Chef to Automate the Deployment of CloudStack - Pierre-Luc Dion
Publication date: 2014-04-28
Playlist: CloudStack Collaboration Conference North America 2014
Description: 
	CloudStack Collaboration Conference 2014
Captions: 
	00:00:00,020 --> 00:00:07,740
good day and welcome thanks for being

00:00:04,319 --> 00:00:11,160
here I'm doing a presentation on how to

00:00:07,740 --> 00:00:15,929
deploy CloudStack which chef the idea

00:00:11,160 --> 00:00:20,100
comes to the reason why the the idea of

00:00:15,929 --> 00:00:22,890
deploying CloudStack using chef Witten

00:00:20,100 --> 00:00:26,279
CloudStack was for many dev environment

00:00:22,890 --> 00:00:28,920
and ability to test new version of

00:00:26,279 --> 00:00:32,250
cloudstack feature and being able to

00:00:28,920 --> 00:00:34,020
deploy CloudStack the same fashion on

00:00:32,250 --> 00:00:36,510
production environment and test

00:00:34,020 --> 00:00:40,770
environment so that's pretty much the

00:00:36,510 --> 00:00:43,500
overview for today the objective of the

00:00:40,770 --> 00:00:45,629
presentation will run a demo while

00:00:43,500 --> 00:00:48,320
presenting our what the cookbook is

00:00:45,629 --> 00:00:53,520
doing in background in terms of

00:00:48,320 --> 00:00:56,940
configuration to CloudStack about cloud

00:00:53,520 --> 00:00:59,480
ups claude ups is a small company in

00:00:56,940 --> 00:01:03,769
montreal that we do manage services and

00:00:59,480 --> 00:01:08,369
operate cloud build out of a cloud stack

00:01:03,769 --> 00:01:14,010
it's a company that has close to 10

00:01:08,369 --> 00:01:19,650
years of existence now so a good place

00:01:14,010 --> 00:01:23,729
to move to work for and yeah why we did

00:01:19,650 --> 00:01:27,210
create that that the chef cookbook at

00:01:23,729 --> 00:01:33,240
first was really to be able to the

00:01:27,210 --> 00:01:36,540
install CloudStack easily and every time

00:01:33,240 --> 00:01:43,049
at the same way for production

00:01:36,540 --> 00:01:45,930
environment as well as for test the it's

00:01:43,049 --> 00:01:47,729
really to unify the way of deploying

00:01:45,930 --> 00:01:49,619
them it's not that it's really

00:01:47,729 --> 00:01:51,180
complicated to follow the documentation

00:01:49,619 --> 00:01:54,000
of cloudstack to install it manually

00:01:51,180 --> 00:01:56,880
it's just a way of doing it and forget

00:01:54,000 --> 00:02:00,119
the all the subtlety when you install it

00:01:56,880 --> 00:02:02,219
and having to download system template

00:02:00,119 --> 00:02:07,099
and things like that everything's get

00:02:02,219 --> 00:02:14,010
end all by Chef so in this demo what

00:02:07,099 --> 00:02:18,750
I'll deploy is really start from vanilla

00:02:14,010 --> 00:02:21,860
sent os6 vm and will in the provision my

00:02:18,750 --> 00:02:26,370
sequel server install cloudstack

00:02:21,860 --> 00:02:29,099
download the system template for xen

00:02:26,370 --> 00:02:33,209
server environment will also

00:02:29,099 --> 00:02:37,019
pre-configure the secondary storage NFS

00:02:33,209 --> 00:02:39,480
shared from that vm in the background

00:02:37,019 --> 00:02:43,319
also because it's a vm within CloudStack

00:02:39,480 --> 00:02:47,730
what we're doing is that the center west

00:02:43,319 --> 00:02:50,519
and placed as a small OS root disk so

00:02:47,730 --> 00:02:54,269
we're creating a data drive that will

00:02:50,519 --> 00:02:59,159
get formatted and mounted into / data to

00:02:54,269 --> 00:03:02,790
that vm and it's going to be served as

00:02:59,159 --> 00:03:05,579
the secondary storage from that vm i'm

00:03:02,790 --> 00:03:08,280
also do some funny things like

00:03:05,579 --> 00:03:11,069
installing cloud monkey for the root

00:03:08,280 --> 00:03:14,129
account and also generating the API key

00:03:11,069 --> 00:03:17,370
for the administrator user so for future

00:03:14,129 --> 00:03:19,470
use of automating the deployment of the

00:03:17,370 --> 00:03:24,079
configuration within CloudStack such as

00:03:19,470 --> 00:03:26,669
playing with global settings and

00:03:24,079 --> 00:03:29,879
creating zones eventual either by

00:03:26,669 --> 00:03:32,970
automated way of maybe CloudStack maybe

00:03:29,879 --> 00:03:35,940
with chef or other tools such as a cloud

00:03:32,970 --> 00:03:39,720
monkey or other various script with the

00:03:35,940 --> 00:03:44,780
API so that's going to be a future stuff

00:03:39,720 --> 00:03:47,940
I guess so yeah i'm using the yum repo

00:03:44,780 --> 00:03:51,150
as the main repo for that demo it's

00:03:47,940 --> 00:03:52,769
going to use the cloud stack one or

00:03:51,150 --> 00:04:00,269
maybe an internal one to speed up the

00:03:52,769 --> 00:04:06,000
process nature but so yep so i think i

00:04:00,269 --> 00:04:07,829
talked about that already so let's start

00:04:06,000 --> 00:04:12,150
so what I'm doing is that i'm using

00:04:07,829 --> 00:04:14,430
knife CloudStack as a plug-in which from

00:04:12,150 --> 00:04:17,340
which i'm firing up a new santo svm

00:04:14,430 --> 00:04:21,570
within cloudstack and from there i'm

00:04:17,340 --> 00:04:24,240
going to assign the basic role to my vm

00:04:21,570 --> 00:04:26,430
that will pre-configured my data drive

00:04:24,240 --> 00:04:29,490
and

00:04:26,430 --> 00:04:32,310
I have a role as a CloudStack note that

00:04:29,490 --> 00:04:35,910
will configure database installed

00:04:32,310 --> 00:04:37,979
CloudStack and prepare few things I'm

00:04:35,910 --> 00:04:40,440
also specifying from that command line

00:04:37,979 --> 00:04:44,070
on which zone of my cloud I'm creating

00:04:40,440 --> 00:04:48,509
the vm the service type that I'm

00:04:44,070 --> 00:04:51,720
selecting to it oh I'm managing the root

00:04:48,509 --> 00:04:53,820
account for that VM and the disk

00:04:51,720 --> 00:04:58,169
offering for the data drive so I'm going

00:04:53,820 --> 00:04:59,729
to fire up that that that script that's

00:04:58,169 --> 00:05:02,610
going to run in background because it

00:04:59,729 --> 00:05:06,750
takes like between 10 to 15 minutes to

00:05:02,610 --> 00:05:08,880
get all the chevron executed so far what

00:05:06,750 --> 00:05:10,800
it's taking time is not really the chef

00:05:08,880 --> 00:05:14,580
work that's running background it's more

00:05:10,800 --> 00:05:17,190
like downloading descent the CloudStack

00:05:14,580 --> 00:05:20,669
packages and then the time that it take

00:05:17,190 --> 00:05:24,060
to download the system VM images that

00:05:20,669 --> 00:05:26,430
take most of that time which explain why

00:05:24,060 --> 00:05:29,220
it's not taking like two minutes to get

00:05:26,430 --> 00:05:31,409
a cloud stack up and running because it

00:05:29,220 --> 00:05:34,830
would be that fast if package would be

00:05:31,409 --> 00:05:37,199
already local to the vm basically so

00:05:34,830 --> 00:05:39,539
that's pretty much the same command that

00:05:37,199 --> 00:05:43,820
was shown on the slide I'm going to fire

00:05:39,539 --> 00:05:43,820
it up and we'll see how it goes

00:05:49,050 --> 00:05:55,330
so here is the process that's going to

00:05:52,960 --> 00:06:04,180
run in background whoops i guess it's

00:05:55,330 --> 00:06:09,430
fail that's real demo so let me let me

00:06:04,180 --> 00:06:12,490
check something quickly so because i'm

00:06:09,430 --> 00:06:16,030
doing that remotely on a VPN so maybe

00:06:12,490 --> 00:06:30,060
the demo is going to fail but i know it

00:06:16,030 --> 00:06:30,060
works that's it that's why

00:06:36,409 --> 00:06:39,219
thank you

00:06:45,680 --> 00:06:56,430
so so basically yeah come to our booth

00:06:53,280 --> 00:06:58,950
will have a t-shirt so basically what is

00:06:56,430 --> 00:07:02,640
gonna run in background is that I will

00:06:58,950 --> 00:07:06,030
start I will create a santo svm in two

00:07:02,640 --> 00:07:10,170
CloudStack that will have data drive for

00:07:06,030 --> 00:07:12,120
that case it's 64 gigs of data drive it

00:07:10,170 --> 00:07:15,780
could be bigger it's just that it takes

00:07:12,120 --> 00:07:20,970
time to format the file system so I just

00:07:15,780 --> 00:07:23,550
shrink it for the demo and afterward

00:07:20,970 --> 00:07:25,530
there is the chef bootstrap the process

00:07:23,550 --> 00:07:28,080
that's going to install the chef client

00:07:25,530 --> 00:07:31,950
push all the config to that Chef client

00:07:28,080 --> 00:07:37,050
and then it will configure a basic oh

00:07:31,950 --> 00:07:40,770
esta for SNMP and TP be basic things

00:07:37,050 --> 00:07:44,910
like a 40 / the OS and then I'm

00:07:40,770 --> 00:07:48,090
preparing the data drive installing a my

00:07:44,910 --> 00:07:53,720
sequel server with the D the community

00:07:48,090 --> 00:07:57,810
cookbook and then I'm reconfiguring the

00:07:53,720 --> 00:08:00,630
export of the NFS from that vm for the

00:07:57,810 --> 00:08:03,210
secondary storage there is also a

00:08:00,630 --> 00:08:06,180
primary storage NFS export that I'm

00:08:03,210 --> 00:08:08,400
doing if I would like to use the primary

00:08:06,180 --> 00:08:09,780
storage as well but in this case it

00:08:08,400 --> 00:08:13,920
wouldn't make sense because it would be

00:08:09,780 --> 00:08:17,760
very slow as a primary storage and then

00:08:13,920 --> 00:08:22,140
I'm installing cloudstack with the RPM

00:08:17,760 --> 00:08:25,280
package and yum repo I'm initializing

00:08:22,140 --> 00:08:30,390
the cloudstack database with the regular

00:08:25,280 --> 00:08:35,360
skipped provide by the instruction all

00:08:30,390 --> 00:08:39,660
parameter can be tuned such as the cloud

00:08:35,360 --> 00:08:41,520
user and password that is within the

00:08:39,660 --> 00:08:46,520
configuration of a cloud stack

00:08:41,520 --> 00:08:49,680
everything is as attributes within chef

00:08:46,520 --> 00:08:54,470
so a lot of thing can be customized from

00:08:49,680 --> 00:08:57,560
the cookbook for the moment

00:08:54,470 --> 00:09:00,630
afterward I'm setting up the database

00:08:57,560 --> 00:09:04,890
download the system template those can

00:09:00,630 --> 00:09:06,899
be defined with attribute where if I'm

00:09:04,890 --> 00:09:12,440
running kvm then I could quite easily

00:09:06,899 --> 00:09:16,950
update attributes to download latest kvm

00:09:12,440 --> 00:09:20,670
system template right now I'm going to

00:09:16,950 --> 00:09:22,680
install 43 cloudstack 43 but since

00:09:20,670 --> 00:09:25,950
depending on the version of cloudstack

00:09:22,680 --> 00:09:29,180
there is different system template vm

00:09:25,950 --> 00:09:31,110
then it's a matter of updating the

00:09:29,180 --> 00:09:35,910
attribute depending on the version

00:09:31,110 --> 00:09:41,220
you're installing I'm generating the M

00:09:35,910 --> 00:09:44,010
min API keys for it was some kind of a

00:09:41,220 --> 00:09:46,200
challenge that I wanted to do from the

00:09:44,010 --> 00:09:50,040
chef's side but eventually it's going to

00:09:46,200 --> 00:09:53,060
be reused probably for using the same

00:09:50,040 --> 00:09:56,820
cookbook but with more more feature to

00:09:53,060 --> 00:09:59,100
pre-configure zones maybe upload also

00:09:56,820 --> 00:10:02,970
default service offering that we don't

00:09:59,100 --> 00:10:07,260
like from the default installation disk

00:10:02,970 --> 00:10:09,930
offering and a bunch of configuration

00:10:07,260 --> 00:10:12,570
within CloudStack and I'm also

00:10:09,930 --> 00:10:16,170
installing Club monkey as a root and

00:10:12,570 --> 00:10:19,140
from for a root user so if we have

00:10:16,170 --> 00:10:23,209
already some script in place from Club

00:10:19,140 --> 00:10:26,220
monkey everything is ready to be used

00:10:23,209 --> 00:10:29,310
there is some dependency for doing

00:10:26,220 --> 00:10:32,279
things like the running cloudstack

00:10:29,310 --> 00:10:34,709
within cloudstack with Chef like for

00:10:32,279 --> 00:10:38,130
this one which is to have knife

00:10:34,709 --> 00:10:40,800
cloudstack which allow me to create vm

00:10:38,130 --> 00:10:42,899
just with knife that's quite interesting

00:10:40,800 --> 00:10:47,870
when it comes to automating a deployment

00:10:42,899 --> 00:10:51,000
of a vm and cousin cloudstack which chef

00:10:47,870 --> 00:10:56,850
i'm using also the notion of environment

00:10:51,000 --> 00:11:00,410
in chef I'm using that to to provide the

00:10:56,850 --> 00:11:04,230
attribute specific to an environment so

00:11:00,410 --> 00:11:07,320
this way I'm able to have multiple I

00:11:04,230 --> 00:11:07,970
could I could have isolated my sequel

00:11:07,320 --> 00:11:10,459
database

00:11:07,970 --> 00:11:12,740
to a node and I wouldn't have to worry

00:11:10,459 --> 00:11:18,620
about his OHS name because i'm using

00:11:12,740 --> 00:11:20,540
search in chef so that way I'm I don't

00:11:18,620 --> 00:11:21,920
know the host name of my my sequel

00:11:20,540 --> 00:11:24,139
server because I'm going to do some

00:11:21,920 --> 00:11:26,899
searching on who's my my sequel server

00:11:24,139 --> 00:11:30,379
and I'll grab attributes from there and

00:11:26,899 --> 00:11:36,790
be able to create configuration to a

00:11:30,379 --> 00:11:40,040
cloud stachy there is also by using

00:11:36,790 --> 00:11:41,569
environment it allowed me to have let's

00:11:40,040 --> 00:11:46,269
say I want to redundancy on the

00:11:41,569 --> 00:11:50,949
CloudStack service or the CloudStack

00:11:46,269 --> 00:11:55,220
application I can run multiple vm

00:11:50,949 --> 00:11:57,560
cloudstack vm and they will know that

00:11:55,220 --> 00:11:59,269
there is already in a database that has

00:11:57,560 --> 00:12:02,389
been configured so I'm not going to

00:11:59,269 --> 00:12:04,490
create a second database of CloudStack

00:12:02,389 --> 00:12:07,579
and I'm going to have a redundancy on

00:12:04,490 --> 00:12:10,879
the application level the my sequel

00:12:07,579 --> 00:12:14,559
layer for replication is a separate

00:12:10,879 --> 00:12:18,889
topic in his own so I'm not disgusting

00:12:14,559 --> 00:12:20,720
about the my sequel layer if you want a

00:12:18,889 --> 00:12:23,870
che on that part because it could be a

00:12:20,720 --> 00:12:27,589
cluster master-slave whatever so it's

00:12:23,870 --> 00:12:29,660
more up to you so that's in a

00:12:27,589 --> 00:12:31,970
configuration example that it's required

00:12:29,660 --> 00:12:36,709
for an environment it's quite basic

00:12:31,970 --> 00:12:38,540
actually I'm here it's really the

00:12:36,709 --> 00:12:42,889
objective of the environment it's just

00:12:38,540 --> 00:12:46,629
we isolate the installation so so for

00:12:42,889 --> 00:12:49,759
the same cloud I can spin up multiple

00:12:46,629 --> 00:12:51,829
cloudstack environment the thing is that

00:12:49,759 --> 00:12:54,559
there will be isolated into their own

00:12:51,829 --> 00:12:58,250
environment within chef so for a dev

00:12:54,559 --> 00:13:01,279
environment i can run like maybe let's

00:12:58,250 --> 00:13:04,069
say five CloudStack installation they

00:13:01,279 --> 00:13:07,879
will all have their own my sequel

00:13:04,069 --> 00:13:11,689
database so i can do some pretty some

00:13:07,879 --> 00:13:14,509
tests of maybe a new new feature in

00:13:11,689 --> 00:13:17,689
cloudstack special type of configuration

00:13:14,509 --> 00:13:20,300
i can do it within a cloudstack

00:13:17,689 --> 00:13:22,870
environment i can delete destroy it

00:13:20,300 --> 00:13:28,580
afterward

00:13:22,870 --> 00:13:32,260
so here is the configuration of the role

00:13:28,580 --> 00:13:35,240
for CloudStack and because i did not

00:13:32,260 --> 00:13:37,910
configure the default recipe of

00:13:35,240 --> 00:13:41,060
CloudStack to execute everything because

00:13:37,910 --> 00:13:43,220
things has to be modular because I want

00:13:41,060 --> 00:13:44,810
to reuse that cookbook for production

00:13:43,220 --> 00:13:47,510
environment into a production

00:13:44,810 --> 00:13:51,740
environment it's not going to be like

00:13:47,510 --> 00:13:53,779
for a lab in a test environment where

00:13:51,740 --> 00:13:56,360
everything will run within the same vm

00:13:53,779 --> 00:14:00,170
so i want to reuse those the same

00:13:56,360 --> 00:14:03,529
cookbook for the production so things

00:14:00,170 --> 00:14:07,070
need to be modular and by doing it which

00:14:03,529 --> 00:14:10,880
roles so far a it work well apparently

00:14:07,070 --> 00:14:14,420
some people are not using roll with chef

00:14:10,880 --> 00:14:17,240
and there are more using kind of another

00:14:14,420 --> 00:14:24,260
cookbook that rap recipes together and

00:14:17,240 --> 00:14:28,010
do the the end laying of the DD let's

00:14:24,260 --> 00:14:32,180
say the the order that recipe get

00:14:28,010 --> 00:14:38,570
executed so these things can be

00:14:32,180 --> 00:14:41,060
customized customized afterward and so

00:14:38,570 --> 00:14:44,750
it's a cookbook that is under

00:14:41,060 --> 00:14:48,560
development so there is a lot of things

00:14:44,750 --> 00:14:52,850
that are still missing on it I add some

00:14:48,560 --> 00:14:56,480
input that there is some interest on

00:14:52,850 --> 00:14:59,779
having support to Debian since Apache

00:14:56,480 --> 00:15:03,550
CloudStack you can also get package from

00:14:59,779 --> 00:15:08,000
debian to run them on ubuntu or whatever

00:15:03,550 --> 00:15:10,070
so the in the future release of the book

00:15:08,000 --> 00:15:12,680
i will probably add support to debian

00:15:10,070 --> 00:15:16,790
package also there was there is some

00:15:12,680 --> 00:15:19,220
interest on having the ability to build

00:15:16,790 --> 00:15:22,100
environment with chef but also from the

00:15:19,220 --> 00:15:25,810
git repo so for people that work on

00:15:22,100 --> 00:15:28,190
maybe the master branch or newer branch

00:15:25,810 --> 00:15:30,110
having the ability that which chef

00:15:28,190 --> 00:15:33,860
create those dev environment so I'll

00:15:30,110 --> 00:15:36,440
probably do it do work on that but

00:15:33,860 --> 00:15:37,730
it's not clear yet I would all would be

00:15:36,440 --> 00:15:40,450
the approach but it's kind of an

00:15:37,730 --> 00:15:46,459
interesting challenge I think on the

00:15:40,450 --> 00:15:49,220
four as a chef user and next step will

00:15:46,459 --> 00:15:52,430
be probably to do more automation on the

00:15:49,220 --> 00:15:55,490
configuration of cloud sac itself from

00:15:52,430 --> 00:15:59,510
the chef's perspective so eventually it

00:15:55,490 --> 00:16:01,430
would I may come up with with the

00:15:59,510 --> 00:16:04,760
ability of creating a zone within

00:16:01,430 --> 00:16:09,890
cloudstack and manage some clouds that

00:16:04,760 --> 00:16:12,100
configuration within a within chef I've

00:16:09,890 --> 00:16:15,160
already started doing some script

00:16:12,100 --> 00:16:18,800
instead of using the UI when it comes to

00:16:15,160 --> 00:16:22,040
to create zone I know that a lot of

00:16:18,800 --> 00:16:24,649
people are using a maven or Marvin that

00:16:22,040 --> 00:16:35,390
is all the Python script collection to

00:16:24,649 --> 00:16:36,920
create the zones and but anyway so kind

00:16:35,390 --> 00:16:39,890
of a challenge that I faced by

00:16:36,920 --> 00:16:42,260
developing that chef cookbook was that

00:16:39,890 --> 00:16:45,920
kind of cool to have everything into a

00:16:42,260 --> 00:16:51,070
single instance but into a production

00:16:45,920 --> 00:16:51,070
environment I may want to create new

00:16:51,190 --> 00:17:07,370
CloudStack instance and the I may want

00:17:02,720 --> 00:17:09,919
to add new CloudStack application but

00:17:07,370 --> 00:17:12,679
without either wiping the existing

00:17:09,919 --> 00:17:15,169
database or creating a new one so in

00:17:12,679 --> 00:17:18,799
chef there's the notion of search and

00:17:15,169 --> 00:17:21,829
tags that I'm using these days a for the

00:17:18,799 --> 00:17:25,579
moment on the the cookbook so when I'm

00:17:21,829 --> 00:17:27,679
spinning up a second cloudstack vm it's

00:17:25,579 --> 00:17:30,740
going to look if the database already

00:17:27,679 --> 00:17:33,200
been initiated and if it does what is IP

00:17:30,740 --> 00:17:38,750
address and it created the configuration

00:17:33,200 --> 00:17:45,150
for the Tomcat the the DB the cone file

00:17:38,750 --> 00:17:48,420
for cloudstack so make things kind of

00:17:45,150 --> 00:17:50,640
the then it gives the ability to scale

00:17:48,420 --> 00:17:55,920
kind of things the CloudStack

00:17:50,640 --> 00:18:00,650
application so when everything has been

00:17:55,920 --> 00:18:04,740
run from the the bootstrap of the vm

00:18:00,650 --> 00:18:06,260
usually well we end up with a cloudstack

00:18:04,740 --> 00:18:09,480
environment that is ready to be

00:18:06,260 --> 00:18:12,900
configured so next step is really to

00:18:09,480 --> 00:18:15,900
create an eye / visor configure tea

00:18:12,900 --> 00:18:18,360
prepared the hypervisor level and then

00:18:15,900 --> 00:18:22,340
start the clouds that the the new zone

00:18:18,360 --> 00:18:26,220
configuration within that CloudStack

00:18:22,340 --> 00:18:29,730
define how you expect to run the primary

00:18:26,220 --> 00:18:31,950
storage because we're not providing the

00:18:29,730 --> 00:18:36,060
primary storage in necessarily from the

00:18:31,950 --> 00:18:39,000
that VM and do your basic configuration

00:18:36,060 --> 00:18:43,410
or tuning within CloudStack service

00:18:39,000 --> 00:18:48,090
maybe on the global setting service

00:18:43,410 --> 00:18:51,300
suffering stuff like that so at the end

00:18:48,090 --> 00:18:54,300
the idea is that with the same cookbook

00:18:51,300 --> 00:18:56,670
we see with the same method of

00:18:54,300 --> 00:18:58,650
installing cloudstack variable that

00:18:56,670 --> 00:19:01,050
cloud apps to provide the dev

00:18:58,650 --> 00:19:03,840
environment for people that contributing

00:19:01,050 --> 00:19:07,770
to club stack but also for environment

00:19:03,840 --> 00:19:10,620
that we deliver to our customer and test

00:19:07,770 --> 00:19:12,990
environment to do some QA on CloudStack

00:19:10,620 --> 00:19:19,110
we are all using the same installation

00:19:12,990 --> 00:19:24,600
method and make things easy easier than

00:19:19,110 --> 00:19:28,530
always having to do it manually it also

00:19:24,600 --> 00:19:36,810
support the the multiple vm instead of

00:19:28,530 --> 00:19:40,130
the single one as we have now so so the

00:19:36,810 --> 00:19:43,190
yeah pretty much what i said i guess

00:19:40,130 --> 00:19:47,490
let's see if the demo is still running

00:19:43,190 --> 00:19:49,620
so i don't know if everybody is from a

00:19:47,490 --> 00:19:51,360
year would chef but that's the kind of

00:19:49,620 --> 00:19:55,740
the output that Chef providing when it

00:19:51,360 --> 00:19:57,960
run for the first time so it explained

00:19:55,740 --> 00:20:02,029
we can see a

00:19:57,960 --> 00:20:12,120
a lot of all the output that's going on

00:20:02,029 --> 00:20:14,640
so apparently it's not done yet yeah and

00:20:12,120 --> 00:20:18,149
so if you want to try those cookbook

00:20:14,640 --> 00:20:19,770
they are available on github so if you

00:20:18,149 --> 00:20:23,070
want some fix and things like that

00:20:19,770 --> 00:20:26,159
there's a very easy to fork and there

00:20:23,070 --> 00:20:30,179
are also available and the ups code

00:20:26,159 --> 00:20:32,580
community cookbooks right now I think

00:20:30,179 --> 00:20:35,880
there is it's the only cloudstack

00:20:32,580 --> 00:20:38,580
cookbook on the community cookbook I

00:20:35,880 --> 00:20:42,840
heard that there was some there is other

00:20:38,580 --> 00:20:48,330
cook chef cookbook for cloudstack on

00:20:42,840 --> 00:20:51,059
github I never tried them because when I

00:20:48,330 --> 00:20:55,140
start working on that I prefer to create

00:20:51,059 --> 00:20:59,070
my own cookbook because I in the same

00:20:55,140 --> 00:21:02,669
time I kind of understand how CloudStack

00:20:59,070 --> 00:21:08,700
yet installed and all the installation

00:21:02,669 --> 00:21:11,429
subtlety there's we add also we have

00:21:08,700 --> 00:21:14,549
also a blog post in our website where we

00:21:11,429 --> 00:21:18,870
have more information on getting up to

00:21:14,549 --> 00:21:23,850
speed on installing third stack wood

00:21:18,870 --> 00:21:26,640
chef apparently we're doing a survey so

00:21:23,850 --> 00:21:29,250
if you're a CloudStack user would be

00:21:26,640 --> 00:21:35,880
interesting to see the way you're using

00:21:29,250 --> 00:21:37,679
CloudStack in your environment and for

00:21:35,880 --> 00:21:41,460
those that don't know there is a party

00:21:37,679 --> 00:21:45,299
tonight so it could be interesting so

00:21:41,460 --> 00:21:48,210
it's tonight at 9pm at the lobby here at

00:21:45,299 --> 00:21:54,370
the entrance we'll go somewhere I don't

00:21:48,210 --> 00:22:03,700
know where so that's there

00:21:54,370 --> 00:22:08,100
ah nice so in theory if I cut and paste

00:22:03,700 --> 00:22:11,290
that IP address i should have and a

00:22:08,100 --> 00:22:13,470
CloudStack running so I'm going to test

00:22:11,290 --> 00:22:13,470
that

00:22:50,600 --> 00:23:05,900
well still loading so it's the first

00:22:52,940 --> 00:23:08,570
time so it seems that it worked so

00:23:05,900 --> 00:23:10,520
afterward well we just have to start the

00:23:08,570 --> 00:23:12,440
configuration within CloudStack and do

00:23:10,520 --> 00:23:16,960
our test or deploy a production

00:23:12,440 --> 00:23:16,960
environment depends on underneath and

00:23:18,010 --> 00:23:27,190
yeah that's it so thank you very much I

00:23:23,240 --> 00:23:27,190
don't know if anybody has question I

00:23:33,549 --> 00:23:38,299
assume you're doing this in a notic

00:23:36,200 --> 00:23:39,740
you're doing cloudstack on cloudstack

00:23:38,299 --> 00:23:41,809
right you know you're like putting these

00:23:39,740 --> 00:23:43,580
and you're thinking about doing

00:23:41,809 --> 00:23:45,770
different virtual machines and like

00:23:43,580 --> 00:23:47,539
creating like a test bet or something so

00:23:45,770 --> 00:23:50,630
you can deploy you know the noting one

00:23:47,539 --> 00:23:53,150
place instead of one day yeah really the

00:23:50,630 --> 00:23:55,130
idea of deploying cloudstack and

00:23:53,150 --> 00:23:57,980
CloudStack is because internally we have

00:23:55,130 --> 00:24:00,350
a cloud out of CloudStack and we're

00:23:57,980 --> 00:24:02,419
using chef for automation and let's say

00:24:00,350 --> 00:24:04,460
I want to test because it's now it's

00:24:02,419 --> 00:24:07,669
like in four to one and I want to test

00:24:04,460 --> 00:24:11,030
for three and even the test from four to

00:24:07,669 --> 00:24:14,120
12 43 then i'm going to set up a devin

00:24:11,030 --> 00:24:16,309
bahr a test environment with those which

00:24:14,120 --> 00:24:18,350
f i'm going to set up CloudStack

00:24:16,309 --> 00:24:21,350
installation i'm going to populate it

00:24:18,350 --> 00:24:22,789
create a zone and then do the upgrade

00:24:21,350 --> 00:24:26,450
and make sure that it's not going to

00:24:22,789 --> 00:24:29,690
break all our system that's the basic

00:24:26,450 --> 00:24:33,289
idea I can just use chef and nut

00:24:29,690 --> 00:24:36,860
cloudstack under the hood and install a

00:24:33,289 --> 00:24:39,890
chef where wherever it's not important

00:24:36,860 --> 00:24:43,580
to do with our inside CloudStack it's

00:24:39,890 --> 00:24:45,350
just fun so you use a chef instead of

00:24:43,580 --> 00:24:47,419
puppet because chef is something used

00:24:45,350 --> 00:24:51,440
internally correct yeah because puppet

00:24:47,419 --> 00:24:53,090
has more support for this kind of this

00:24:51,440 --> 00:24:54,590
kind of caustic on OpenStack I'm saying

00:24:53,090 --> 00:24:56,780
this because I I actually did the same

00:24:54,590 --> 00:24:59,150
thing with Amazon ec2 and OpenStack so I

00:24:56,780 --> 00:25:00,220
just like allowance and create VP sees

00:24:59,150 --> 00:25:01,780
you know like

00:25:00,220 --> 00:25:05,610
you know and now I'm thinking about this

00:25:01,780 --> 00:25:08,820
insane for CloudStack um but you know

00:25:05,610 --> 00:25:11,500
you were saying or was that to develop

00:25:08,820 --> 00:25:12,580
installation process with puppet or yeah

00:25:11,500 --> 00:25:14,169
because it's the same you know like I

00:25:12,580 --> 00:25:17,350
will just use the part of the code which

00:25:14,169 --> 00:25:20,140
creates a spinster and notes in open in

00:25:17,350 --> 00:25:21,880
Amazon ec2 right ok and then deploy

00:25:20,140 --> 00:25:23,770
OpenStack you know i have read already

00:25:21,880 --> 00:25:25,900
done that right so now i want to do the

00:25:23,770 --> 00:25:29,770
same with cardstock art so that's why I

00:25:25,900 --> 00:25:32,260
came but the question is what was why

00:25:29,770 --> 00:25:34,480
you chef instead of puppet but now you

00:25:32,260 --> 00:25:36,640
with me well yeah it's because we're

00:25:34,480 --> 00:25:40,510
using mostly chef but everything can be

00:25:36,640 --> 00:25:43,510
done even whatever saltstack or ansible

00:25:40,510 --> 00:25:46,480
it's not like a big problem we start

00:25:43,510 --> 00:25:49,799
using a chef like two years ago and we

00:25:46,480 --> 00:26:00,780
kind of love it so we kind of adopted

00:25:49,799 --> 00:26:00,780
thanks any more questions no I think yes

00:26:03,929 --> 00:26:10,559
the Marvin Marvin framework already has

00:26:08,480 --> 00:26:12,389
capability to install the crowd stack

00:26:10,559 --> 00:26:15,929
and also set up the gloves tag right so

00:26:12,389 --> 00:26:18,419
way you wanted to have this solution I'm

00:26:15,929 --> 00:26:24,419
sorry no if you see the Apache

00:26:18,419 --> 00:26:27,419
CloudStack some now if you see the

00:26:24,419 --> 00:26:30,840
Apache CloudStack page and there we have

00:26:27,419 --> 00:26:34,070
some steps to install and configure

00:26:30,840 --> 00:26:36,809
CloudStack using Marvin framework so

00:26:34,070 --> 00:26:40,950
like any reason for coming up with this

00:26:36,809 --> 00:26:47,749
solution using chip I sorry I just don't

00:26:40,950 --> 00:26:50,129
understand the question yeah why why

00:26:47,749 --> 00:26:54,299
chef is required when we already have a

00:26:50,129 --> 00:26:57,179
solution based on Marvin you mean to

00:26:54,299 --> 00:27:01,950
create the dead zone create all those

00:26:57,179 --> 00:27:04,499
stuff but yeah I don't know sorry I

00:27:01,950 --> 00:27:06,690
think you mean the development process

00:27:04,499 --> 00:27:14,549
of cloud sec itself where maven is used

00:27:06,690 --> 00:27:16,559
and but he uses it in Opera mm-hmm but

00:27:14,549 --> 00:27:19,169
you are using it in your operational

00:27:16,559 --> 00:27:23,210
environment to deploy it so that's a

00:27:19,169 --> 00:27:26,309
different case yeah the idea behind the

00:27:23,210 --> 00:27:27,840
the objective of using chef to install

00:27:26,309 --> 00:27:29,669
CloudStack even for a dev environment

00:27:27,840 --> 00:27:32,490
it's really to have a single

00:27:29,669 --> 00:27:37,769
installation procedure so I'm installing

00:27:32,490 --> 00:27:41,039
for 11 if you're contributing to code DD

00:27:37,769 --> 00:27:45,330
it has to be different than for that but

00:27:41,039 --> 00:27:47,369
for if you the idea is just to unify the

00:27:45,330 --> 00:27:49,860
way we're installing it for test

00:27:47,369 --> 00:27:51,570
purposes and everything so even for

00:27:49,860 --> 00:27:52,980
installing it for a production

00:27:51,570 --> 00:27:56,399
environment it's going to be the same

00:27:52,980 --> 00:27:57,779
process so eventually for upgrade of

00:27:56,399 --> 00:28:00,389
those environment and things like that

00:27:57,779 --> 00:28:03,210
then it's going to be all the same way

00:28:00,389 --> 00:28:05,490
so it's just one procedure that people

00:28:03,210 --> 00:28:08,490
have to know what that's it for us at

00:28:05,490 --> 00:28:10,860
cloud apps instead of one with maven and

00:28:08,490 --> 00:28:12,600
another one with a chef for production

00:28:10,860 --> 00:28:16,789
environment that was really the

00:28:12,600 --> 00:28:16,789
objective on doing it with chef

00:28:19,700 --> 00:28:26,000
no more okay thank you Galu thank you

00:28:23,790 --> 00:28:26,000

YouTube URL: https://www.youtube.com/watch?v=V7Pt4pkGTNU


