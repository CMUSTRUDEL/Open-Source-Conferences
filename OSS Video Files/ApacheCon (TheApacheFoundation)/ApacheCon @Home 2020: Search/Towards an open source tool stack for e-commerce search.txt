Title: Towards an open source tool stack for e-commerce search
Publication date: 2020-10-17
Playlist: ApacheCon @Home 2020: Search
Description: 
	Towards an open source tool stack for e-commerce search
Eric Pugh, René Kriegler

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

Search teams in the e-commerce space want to own their search: they want to understand how exactly the retrieval works and optimise it according to their specific needs, both from the user and from the seller perspective. Implementing search using open source search engines, such as Solr and Elasticsearch, seems like a perfect match. Unfortunately, the open source solutions available today aren’t anywhere near reaching parity with a commercial solution out of the box, especially when it comes to optimizing search relevance and managing individual queries as a merchandiser. This leads to a very difficult buy vs build decision, especially for smaller teams that don’t have deep search expertise already and are faced with developing significant functionality for digital commerce from scratch. In this session we will introduce Chorus: an initiative to combine open source tools and libraries like Querqy (powerful query rewriting library), SMUI (a search management UI to boost and bury products and categories), and the Quepid, RRE, and Quaerite (search relevance assessment and tuning projects) into a single template to accelerate the development of your own e-commerce search, allowing you to shift from setting up basic search functionality to domain specific optimizations much faster.

Eric Pugh:
Fascinated by the craft of software development, Eric Pugh has been involved in the open source world as a developer, committer and user for the past fifteen years. He is a member of the Apache Software Foundation and continues to be very active in the Solr and Tika projects, as well as avidly reads every commit to the Zeppelin project! In biotech, financial services, and defense IT, he has helped European and American companies develop coherent strategies for embracing open source software. Eric became involved in Solr when he submitted the patch SOLR-284 for extracting text from binary files (such as PDF and MS Office formats), that subsequently became the single most popular patch as measured by votes! He co-authored the book Apache Solr Enterprise Search Server, now on its third edition. Today he helps OSC’s clients build their own search teams and improve their search maturity, both by leading projects and by acting as a trusted advisor.

René Kriegler:
René has been working as a freelance search consultant for clients in Germany and abroad for more than ten years. Although he is interested in all aspects of search and NLP, key areas include search relevance and e-commerce search. His technological focus is on Solr/Elasticsearch/Lucene. René is founder and co-organiser of MICES (Mix-Camp E-Commerce Search - a Berlin Buzzwords partner event). He maintains Querqy - an open source library for query pre-processing.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:24,320 --> 00:00:26,880
hello everyone

00:00:25,359 --> 00:00:28,880
welcome to the last session of the

00:00:26,880 --> 00:00:32,239
search track at apachecon at home

00:00:28,880 --> 00:00:34,000
2020 and

00:00:32,239 --> 00:00:36,960
while the search track will be done the

00:00:34,000 --> 00:00:39,120
conference still has a full day to go

00:00:36,960 --> 00:00:41,280
we also have a slack channel on apache

00:00:39,120 --> 00:00:42,960
on slack in case you want to engage in

00:00:41,280 --> 00:00:45,760
social related discussions or

00:00:42,960 --> 00:00:48,559
just generally meet people for for this

00:00:45,760 --> 00:00:52,160
session we have eric you and

00:00:48,559 --> 00:00:54,320
renee kriegler uh eric has been involved

00:00:52,160 --> 00:00:56,640
in the open source war for many years

00:00:54,320 --> 00:00:58,160
and recently became a committer uh on

00:00:56,640 --> 00:01:01,039
apache solar

00:00:58,160 --> 00:01:02,480
leucine uh 12 years after first being

00:01:01,039 --> 00:01:03,760
involved in the community so

00:01:02,480 --> 00:01:07,280
congratulations on that

00:01:03,760 --> 00:01:09,040
eric uh a co-author of the book apache

00:01:07,280 --> 00:01:10,640
solar enterprise search server

00:01:09,040 --> 00:01:13,280
uh today he helps open source

00:01:10,640 --> 00:01:15,200
connections clients

00:01:13,280 --> 00:01:17,920
build their own search teams and improve

00:01:15,200 --> 00:01:20,640
their search maturity

00:01:17,920 --> 00:01:22,400
reni has been a freelance search

00:01:20,640 --> 00:01:23,840
consultant for clients in germany for

00:01:22,400 --> 00:01:26,400
over a decade

00:01:23,840 --> 00:01:28,479
with technology focus on solar

00:01:26,400 --> 00:01:31,439
elasticsearch and lucine

00:01:28,479 --> 00:01:32,960
he's the founder and co-organizer of

00:01:31,439 --> 00:01:35,680
mice's a pretty interesting

00:01:32,960 --> 00:01:36,240
uh conference that happens in berlin

00:01:35,680 --> 00:01:39,680
renee

00:01:36,240 --> 00:01:42,799
also is the maintainer of corgi

00:01:39,680 --> 00:01:44,079
um an open source uh library for query

00:01:42,799 --> 00:01:45,759
pre-processing

00:01:44,079 --> 00:01:47,439
hope you enjoy this session and i'll see

00:01:45,759 --> 00:01:48,159
you all around over to you eric and

00:01:47,439 --> 00:01:51,520
ready

00:01:48,159 --> 00:01:53,200
yeah thank you um again our session we

00:01:51,520 --> 00:01:57,119
are going to talk about

00:01:53,200 --> 00:01:58,320
um two stack that is made of open source

00:01:57,119 --> 00:02:01,759
components

00:01:58,320 --> 00:02:03,439
for e-commerce search um i'm have

00:02:01,759 --> 00:02:08,640
i have to remote control eric for the

00:02:03,439 --> 00:02:12,800
slide so next slide please

00:02:08,640 --> 00:02:13,360
um so um we started this initiative to

00:02:12,800 --> 00:02:15,840
create

00:02:13,360 --> 00:02:17,599
a two stack of open source components

00:02:15,840 --> 00:02:20,239
for e-commerce search

00:02:17,599 --> 00:02:20,879
uh back at the beginning of this year uh

00:02:20,239 --> 00:02:24,160
together

00:02:20,879 --> 00:02:25,760
with uh paul maria bartosz and johannes

00:02:24,160 --> 00:02:29,280
peter

00:02:25,760 --> 00:02:31,200
and we've given kind of a workshop that

00:02:29,280 --> 00:02:35,040
was a long session

00:02:31,200 --> 00:02:36,959
about this topic at the

00:02:35,040 --> 00:02:38,879
mices conference so mice stands for

00:02:36,959 --> 00:02:40,879
mexican ecommerce search

00:02:38,879 --> 00:02:42,239
um this year was joint virtual

00:02:40,879 --> 00:02:44,319
conference with haystack and berlin

00:02:42,239 --> 00:02:46,560
buzzwords so i think many of you are

00:02:44,319 --> 00:02:50,560
familiar with these conferences

00:02:46,560 --> 00:02:52,959
and out of this initiative uh

00:02:50,560 --> 00:02:54,400
we uh or based on this initiative we got

00:02:52,959 --> 00:02:56,800
a lot of feedback

00:02:54,400 --> 00:02:57,519
and we thought it might be a good idea

00:02:56,800 --> 00:03:00,400
to

00:02:57,519 --> 00:03:01,840
promote this idea often open source

00:03:00,400 --> 00:03:05,760
toolstack for e-commerce

00:03:01,840 --> 00:03:08,000
and search further and submit to talk to

00:03:05,760 --> 00:03:09,040
apache con so today it's only eric and

00:03:08,000 --> 00:03:12,000
me

00:03:09,040 --> 00:03:12,800
and we give a reduced version of this

00:03:12,000 --> 00:03:15,840
talk with some

00:03:12,800 --> 00:03:17,760
with some additions of course and we'll

00:03:15,840 --> 00:03:21,120
start with uh talking about

00:03:17,760 --> 00:03:23,200
the motivation so why should there be a

00:03:21,120 --> 00:03:25,040
tool stack for e-commerce search then

00:03:23,200 --> 00:03:25,920
eric would be schwartzmow and an

00:03:25,040 --> 00:03:28,799
overview of the

00:03:25,920 --> 00:03:29,840
components and then i'll take over and

00:03:28,799 --> 00:03:32,560
do a deep dive

00:03:29,840 --> 00:03:34,239
into quirky which is one of the core

00:03:32,560 --> 00:03:37,280
components of it

00:03:34,239 --> 00:03:39,599
so why should there be a

00:03:37,280 --> 00:03:42,480
tool stack for e-commerce search based

00:03:39,599 --> 00:03:46,480
on open source components

00:03:42,480 --> 00:03:49,519
i want to introduce to you pete who is a

00:03:46,480 --> 00:03:52,400
new product owner for search at your

00:03:49,519 --> 00:03:54,720
sample company and i think we've been in

00:03:52,400 --> 00:03:58,560
this situation a lot of times

00:03:54,720 --> 00:04:00,000
so the management wants a better search

00:03:58,560 --> 00:04:03,519
whatever that means the best

00:04:00,000 --> 00:04:06,560
in class whatever the class is and

00:04:03,519 --> 00:04:09,120
pete is left with this challenge

00:04:06,560 --> 00:04:10,239
and then thinks so how am i going to do

00:04:09,120 --> 00:04:13,519
this

00:04:10,239 --> 00:04:16,560
and next slide what does it mean

00:04:13,519 --> 00:04:19,680
so what would be the approach in the end

00:04:16,560 --> 00:04:22,880
um so creating the

00:04:19,680 --> 00:04:24,080
best in class search um there are a

00:04:22,880 --> 00:04:26,080
number of options

00:04:24,080 --> 00:04:27,759
uh when it comes to the tool stack so

00:04:26,080 --> 00:04:30,400
should we choose in

00:04:27,759 --> 00:04:32,320
a commercial solution closed source with

00:04:30,400 --> 00:04:35,199
a lot of features and all

00:04:32,320 --> 00:04:36,400
bells and whistles attached but then on

00:04:35,199 --> 00:04:38,479
the other hand

00:04:36,400 --> 00:04:40,000
we can't be a lot better than our

00:04:38,479 --> 00:04:43,520
competitors because

00:04:40,000 --> 00:04:46,800
they could buy the same technology and

00:04:43,520 --> 00:04:49,759
we have this crazy idea maybe

00:04:46,800 --> 00:04:51,199
that comes from our insights into our

00:04:49,759 --> 00:04:54,400
domain that

00:04:51,199 --> 00:04:57,199
is only applicable to us so maybe

00:04:54,400 --> 00:04:58,000
using a commercial solution might leave

00:04:57,199 --> 00:05:01,039
us

00:04:58,000 --> 00:05:02,800
with too little flexibility so we can't

00:05:01,039 --> 00:05:04,720
really implement what we want and we

00:05:02,800 --> 00:05:07,520
won't achieve this

00:05:04,720 --> 00:05:09,680
competitive advantage and we probably

00:05:07,520 --> 00:05:13,440
won't own our search

00:05:09,680 --> 00:05:14,960
so the next idea would be to use an open

00:05:13,440 --> 00:05:17,520
source solution so that would be the

00:05:14,960 --> 00:05:17,520
next slide

00:05:17,680 --> 00:05:23,199
and then when we use an open source

00:05:21,520 --> 00:05:26,400
solution

00:05:23,199 --> 00:05:28,720
i think we spend a lot of time

00:05:26,400 --> 00:05:30,240
in the first place to get on par with

00:05:28,720 --> 00:05:32,880
the commercial solution

00:05:30,240 --> 00:05:34,560
so that means of course getting things

00:05:32,880 --> 00:05:36,800
to operations would

00:05:34,560 --> 00:05:39,039
could be something we also need to do

00:05:36,800 --> 00:05:40,560
with the commercial solution except it's

00:05:39,039 --> 00:05:42,320
it might be a service that's being

00:05:40,560 --> 00:05:44,800
provided

00:05:42,320 --> 00:05:47,120
but then getting the initial

00:05:44,800 --> 00:05:50,000
configuration right

00:05:47,120 --> 00:05:51,360
being able to measure such relevance or

00:05:50,000 --> 00:05:54,160
search quality

00:05:51,360 --> 00:05:55,840
finding this optimal configuration

00:05:54,160 --> 00:05:58,000
getting tools in place

00:05:55,840 --> 00:06:00,240
to do all the merchandising and

00:05:58,000 --> 00:06:01,840
e-commerce search that's very important

00:06:00,240 --> 00:06:04,720
make sure you get the right brand at the

00:06:01,840 --> 00:06:07,360
top and and make the most money of it

00:06:04,720 --> 00:06:08,080
so uh and looking at e-commerce

00:06:07,360 --> 00:06:10,560
solutions

00:06:08,080 --> 00:06:11,600
that's not easily available yeah so we

00:06:10,560 --> 00:06:14,720
have the basic

00:06:11,600 --> 00:06:17,199
uh technology but we can't really

00:06:14,720 --> 00:06:18,319
get on par with the commercial solution

00:06:17,199 --> 00:06:22,000
easily

00:06:18,319 --> 00:06:24,240
and i have to say um i've i've been

00:06:22,000 --> 00:06:25,759
part of uh migrations to open source

00:06:24,240 --> 00:06:27,919
solutions a number of times

00:06:25,759 --> 00:06:28,960
and it's easily a year that it takes to

00:06:27,919 --> 00:06:32,080
get on

00:06:28,960 --> 00:06:35,520
at this stage um uh

00:06:32,080 --> 00:06:38,400
given a reasonably well-tuned uh

00:06:35,520 --> 00:06:40,400
baseline from which you you starting off

00:06:38,400 --> 00:06:44,000
and then what we really want to do is

00:06:40,400 --> 00:06:45,680
uh apply our specific thing yeah so

00:06:44,000 --> 00:06:47,280
make it better than our competitors

00:06:45,680 --> 00:06:49,520
search and be

00:06:47,280 --> 00:06:50,800
become innovative apply learning to

00:06:49,520 --> 00:06:54,880
touring and

00:06:50,800 --> 00:06:57,360
apply personalization so that's a bit of

00:06:54,880 --> 00:06:58,400
a trade-off yeah so when we want to do

00:06:57,360 --> 00:07:00,000
uh open source

00:06:58,400 --> 00:07:01,440
uh when we want to use open source to

00:07:00,000 --> 00:07:04,720
get this flexibility

00:07:01,440 --> 00:07:06,000
we spent some time getting on par with

00:07:04,720 --> 00:07:06,720
the commercial solution in the first

00:07:06,000 --> 00:07:10,160
place

00:07:06,720 --> 00:07:13,840
next slide and

00:07:10,160 --> 00:07:15,759
so we thought we create a

00:07:13,840 --> 00:07:18,639
stack of open source components and when

00:07:15,759 --> 00:07:21,680
i say create that means

00:07:18,639 --> 00:07:22,160
we combine existing components yeah so

00:07:21,680 --> 00:07:24,639
we're not

00:07:22,160 --> 00:07:27,360
writing solar from scratch we are using

00:07:24,639 --> 00:07:29,840
solar and maybe elasticsearch later

00:07:27,360 --> 00:07:31,280
we are using cupid and other components

00:07:29,840 --> 00:07:34,400
to form

00:07:31,280 --> 00:07:36,880
this fine-tuned a well-tuned

00:07:34,400 --> 00:07:37,680
ensemble of components to speed up the

00:07:36,880 --> 00:07:41,520
development

00:07:37,680 --> 00:07:44,400
to do this first phase

00:07:41,520 --> 00:07:45,360
more rapidly more quickly so that you

00:07:44,400 --> 00:07:47,039
can focus

00:07:45,360 --> 00:07:48,879
later on on the stuff that you really

00:07:47,039 --> 00:07:52,160
want to do and this

00:07:48,879 --> 00:07:54,400
tool stack is called chorus so

00:07:52,160 --> 00:07:55,520
a chorus of components of open source

00:07:54,400 --> 00:07:58,639
components

00:07:55,520 --> 00:08:00,800
and eric is giving is going to give a

00:07:58,639 --> 00:08:03,919
short demo and then overview

00:08:00,800 --> 00:08:05,520
of these components now so thank you

00:08:03,919 --> 00:08:08,560
renee thank you very much

00:08:05,520 --> 00:08:13,039
so let's see if i can so

00:08:08,560 --> 00:08:16,720
it's here so so i am going to

00:08:13,039 --> 00:08:22,080
uh go ahead and show not talk

00:08:16,720 --> 00:08:22,080
let's see uh here we go

00:08:24,840 --> 00:08:28,319
so so

00:08:33,440 --> 00:08:37,440
and so all right so here we go

00:08:38,839 --> 00:08:41,839
sorry

00:08:42,959 --> 00:08:49,519
4000 thank you sorry nerves catch me

00:08:46,480 --> 00:08:51,440
sam all right so here we are at our

00:08:49,519 --> 00:08:54,640
chorus electronics online

00:08:51,440 --> 00:08:57,360
store and this is a store a made-up

00:08:54,640 --> 00:08:58,160
store uh where we sell lots of different

00:08:57,360 --> 00:09:01,360
electronics

00:08:58,160 --> 00:09:03,279
laptops notebooks chromebooks but other

00:09:01,360 --> 00:09:06,880
things like coffee makers

00:09:03,279 --> 00:09:10,399
ram lots of different products and

00:09:06,880 --> 00:09:13,120
uh it's very similar to uh any other

00:09:10,399 --> 00:09:14,240
uh e-commerce site so we'll go ahead and

00:09:13,120 --> 00:09:17,360
let's look at some

00:09:14,240 --> 00:09:19,360
laptops uh notebooks and you can see we

00:09:17,360 --> 00:09:21,600
have all sort of the standard features

00:09:19,360 --> 00:09:23,519
of any other ecommerce store we can sort

00:09:21,600 --> 00:09:24,720
by brands we can look at different

00:09:23,519 --> 00:09:26,800
product types

00:09:24,720 --> 00:09:28,080
right this is our course electronics web

00:09:26,800 --> 00:09:30,080
shop

00:09:28,080 --> 00:09:32,240
and so we've done a search for notebooks

00:09:30,080 --> 00:09:33,120
and you know we get back our products we

00:09:32,240 --> 00:09:36,880
can look at them

00:09:33,120 --> 00:09:39,040
and they're all related to notebooks

00:09:36,880 --> 00:09:41,279
but very quickly all of you see that

00:09:39,040 --> 00:09:43,279
these are actually not very good search

00:09:41,279 --> 00:09:44,240
results because when i'm looking for a

00:09:43,279 --> 00:09:47,600
notebook

00:09:44,240 --> 00:09:50,959
i mean a laptop computer

00:09:47,600 --> 00:09:51,360
a notebook computer not what i'm seeing

00:09:50,959 --> 00:09:54,240
here

00:09:51,360 --> 00:09:55,920
is predominantly accessories and i have

00:09:54,240 --> 00:09:58,560
to kind of scroll pretty far

00:09:55,920 --> 00:10:00,160
down before i start seeing actual

00:09:58,560 --> 00:10:02,480
notebooks

00:10:00,160 --> 00:10:05,040
so what can we do about this how can we

00:10:02,480 --> 00:10:07,200
improve this well

00:10:05,040 --> 00:10:09,360
one of the tools that we have and that

00:10:07,200 --> 00:10:12,880
renee will be going into more depth

00:10:09,360 --> 00:10:16,000
is uh the ability to do merchandising

00:10:12,880 --> 00:10:19,440
the idea that i can actively

00:10:16,000 --> 00:10:20,800
manage my search queries and so i'm

00:10:19,440 --> 00:10:23,760
gonna go ahead and

00:10:20,800 --> 00:10:25,200
add a rule for notebook and i'm

00:10:23,760 --> 00:10:28,880
leveraging my

00:10:25,200 --> 00:10:31,279
own internal knowledge as a

00:10:28,880 --> 00:10:33,120
search advisor someone who uh that we

00:10:31,279 --> 00:10:35,200
have a solar field

00:10:33,120 --> 00:10:36,640
that is the categorization or the

00:10:35,200 --> 00:10:39,200
product type

00:10:36,640 --> 00:10:40,160
and so i know that if we search for

00:10:39,200 --> 00:10:43,360
notebooks

00:10:40,160 --> 00:10:46,560
i'm gonna go ahead and boost on

00:10:43,360 --> 00:10:48,640
any any uh product

00:10:46,560 --> 00:10:49,600
that has the product type notebook makes

00:10:48,640 --> 00:10:51,680
sense

00:10:49,600 --> 00:10:53,360
let me go ahead and save those search

00:10:51,680 --> 00:11:00,320
rules in

00:10:53,360 --> 00:11:03,519
i'm gonna push my configuration to solar

00:11:00,320 --> 00:11:05,360
pushing to solar and i'm going to swap

00:11:03,519 --> 00:11:07,200
algorithms that i'm using

00:11:05,360 --> 00:11:11,200
one that takes advantage of these rules

00:11:07,200 --> 00:11:11,200
let's go ahead and look at notebook

00:11:13,680 --> 00:11:19,680
there right i think you would all

00:11:16,959 --> 00:11:20,640
agree these are much better search

00:11:19,680 --> 00:11:23,680
results

00:11:20,640 --> 00:11:24,399
for the query notebook but what about

00:11:23,680 --> 00:11:27,600
laptop

00:11:24,399 --> 00:11:30,959
right laptops are also notebooks

00:11:27,600 --> 00:11:33,519
let's take a look-see at them

00:11:30,959 --> 00:11:35,519
oh here we have a slightly different we

00:11:33,519 --> 00:11:37,760
still you know these are all laptops but

00:11:35,519 --> 00:11:39,839
again we still have the same

00:11:37,760 --> 00:11:41,279
issue that we're looking at laptop

00:11:39,839 --> 00:11:43,040
accessories

00:11:41,279 --> 00:11:44,640
and we're looking at a very different

00:11:43,040 --> 00:11:46,399
set of products because

00:11:44,640 --> 00:11:48,160
our search engine doesn't know that

00:11:46,399 --> 00:11:51,279
laptops and notebooks

00:11:48,160 --> 00:11:53,200
mean the same thing so let's go ahead

00:11:51,279 --> 00:11:55,360
and i'm sure this won't surprise many of

00:11:53,200 --> 00:11:56,639
you we're gonna go ahead and add a

00:11:55,360 --> 00:11:59,920
synonym

00:11:56,639 --> 00:12:03,680
and we're going to specify that laptops

00:11:59,920 --> 00:12:06,320
and notebooks are synonyms of each other

00:12:03,680 --> 00:12:08,160
let's go ahead and save that rule let's

00:12:06,320 --> 00:12:11,600
go ahead and push it out to

00:12:08,160 --> 00:12:12,880
our cluster move that over and now let's

00:12:11,600 --> 00:12:15,680
go ahead and do a search

00:12:12,880 --> 00:12:15,680
for laptop

00:12:18,079 --> 00:12:21,680
and there you go you see slightly

00:12:20,880 --> 00:12:23,360
different

00:12:21,680 --> 00:12:25,120
mix of products because we're making

00:12:23,360 --> 00:12:26,880
laptops and notebooks the same but you

00:12:25,120 --> 00:12:30,480
see that we have those products

00:12:26,880 --> 00:12:33,440
so we've been able to improve that so

00:12:30,480 --> 00:12:35,360
that's great right we have an intuition

00:12:33,440 --> 00:12:36,079
that we have improved the quality of

00:12:35,360 --> 00:12:37,920
search

00:12:36,079 --> 00:12:39,360
but something that we've learned is it's

00:12:37,920 --> 00:12:40,480
really important to be able to put a

00:12:39,360 --> 00:12:42,959
number on that

00:12:40,480 --> 00:12:44,320
and make a regression test and so i'm

00:12:42,959 --> 00:12:47,680
going to show you

00:12:44,320 --> 00:12:52,399
here one of the ways that we often

00:12:47,680 --> 00:12:56,639
do this is uh here's a tool called cupid

00:12:52,399 --> 00:12:58,800
and in cupid i've got my lap my two

00:12:56,639 --> 00:13:01,120
queries i've been working with

00:12:58,800 --> 00:13:01,839
and you can see on the right here is my

00:13:01,120 --> 00:13:04,560
products

00:13:01,839 --> 00:13:06,079
listed you can see them on the left and

00:13:04,560 --> 00:13:08,480
i've gone in and i've said how

00:13:06,079 --> 00:13:11,279
good is this as a search result i've

00:13:08,480 --> 00:13:14,639
given it on a scale of zero to three

00:13:11,279 --> 00:13:17,839
from poor to perfect fair like it's

00:13:14,639 --> 00:13:19,440
vaguely related to laptops but it's not

00:13:17,839 --> 00:13:22,720
a very good result

00:13:19,440 --> 00:13:25,760
i've done the same for notebooks

00:13:22,720 --> 00:13:28,079
so now let me go ahead and

00:13:25,760 --> 00:13:29,839
i'm going to switch my algorithms back

00:13:28,079 --> 00:13:33,040
to the one using the rules

00:13:29,839 --> 00:13:36,480
where i've done some merchandising

00:13:33,040 --> 00:13:38,639
and wt equals quirky

00:13:36,480 --> 00:13:42,639
and let me go ahead and my you can see

00:13:38,639 --> 00:13:42,639
my score right there let me rerun my

00:13:46,839 --> 00:13:52,399
searches

00:13:49,279 --> 00:13:55,279
nope sorry not writer type equals quirky

00:13:52,399 --> 00:13:56,399
query type equals quirky it should be

00:13:55,279 --> 00:13:59,360
def type

00:13:56,399 --> 00:14:00,240
uh there we go there we go tune

00:13:59,360 --> 00:14:02,800
relevance

00:14:00,240 --> 00:14:05,120
and there you can see right there are

00:14:02,800 --> 00:14:07,360
the products matching on both sides

00:14:05,120 --> 00:14:08,399
i've gone ahead and rated all of these

00:14:07,360 --> 00:14:10,959
laptops as

00:14:08,399 --> 00:14:12,639
perfect results and you can see that my

00:14:10,959 --> 00:14:14,959
score has jumped

00:14:12,639 --> 00:14:16,000
significantly and i'm able to put a

00:14:14,959 --> 00:14:19,120
number on this

00:14:16,000 --> 00:14:21,519
improvement so uh so that

00:14:19,120 --> 00:14:22,720
is just a quick walkthrough of uh some

00:14:21,519 --> 00:14:30,560
of the aspects

00:14:22,720 --> 00:14:33,920
of the chorus stack

00:14:30,560 --> 00:14:35,040
so real quickly to recap what all the

00:14:33,920 --> 00:14:38,000
current

00:14:35,040 --> 00:14:39,199
parts of the tool stack we start out

00:14:38,000 --> 00:14:43,199
with docker

00:14:39,199 --> 00:14:45,680
uh chorus is just a set of docker images

00:14:43,199 --> 00:14:47,040
wired together using a docker compose

00:14:45,680 --> 00:14:48,880
script so you can

00:14:47,040 --> 00:14:51,199
immediately bring up all of these

00:14:48,880 --> 00:14:55,120
components together

00:14:51,199 --> 00:14:56,800
with very quickly today

00:14:55,120 --> 00:14:58,480
everything is based around solar we're

00:14:56,800 --> 00:15:01,839
using the solar search engine

00:14:58,480 --> 00:15:01,839
to store all of our data

00:15:02,160 --> 00:15:05,680
the front end that i showed you is from

00:15:05,120 --> 00:15:09,040
project

00:15:05,680 --> 00:15:09,920
blacklight which is a fairly is an easy

00:15:09,040 --> 00:15:12,720
way of building

00:15:09,920 --> 00:15:15,040
a custom front end to solar-based search

00:15:12,720 --> 00:15:17,360
engine

00:15:15,040 --> 00:15:18,480
and then we have the paired combination

00:15:17,360 --> 00:15:21,199
of quirky

00:15:18,480 --> 00:15:22,800
this rules engine query rewriting engine

00:15:21,199 --> 00:15:23,600
that rene is going to talk a lot more

00:15:22,800 --> 00:15:28,000
about

00:15:23,600 --> 00:15:30,160
and smoothie the search management ui

00:15:28,000 --> 00:15:32,480
which gives us a really friendly

00:15:30,160 --> 00:15:36,000
powerful user interface

00:15:32,480 --> 00:15:38,079
uh and supports uh making it easy

00:15:36,000 --> 00:15:39,759
for a merchandiser or other

00:15:38,079 --> 00:15:44,480
non-technical person

00:15:39,759 --> 00:15:47,519
to write complex rules and to test them

00:15:44,480 --> 00:15:51,360
and then to show you some some

00:15:47,519 --> 00:15:53,600
some relevancy testing we have cupid

00:15:51,360 --> 00:15:55,279
which does a great job of interactive

00:15:53,600 --> 00:15:57,040
playing with queries trying to

00:15:55,279 --> 00:15:57,680
understand why you get the results that

00:15:57,040 --> 00:15:59,839
you get

00:15:57,680 --> 00:16:01,519
i just showed you for sort of comparing

00:15:59,839 --> 00:16:05,040
a before and after

00:16:01,519 --> 00:16:06,320
of adding some rules and then lastly and

00:16:05,040 --> 00:16:09,600
what i didn't show

00:16:06,320 --> 00:16:10,800
is rated ranking evaluator which does

00:16:09,600 --> 00:16:13,519
sort of regression

00:16:10,800 --> 00:16:15,199
test and comparing is designed to run

00:16:13,519 --> 00:16:18,320
thousands of queries

00:16:15,199 --> 00:16:19,920
against your cluster and and do a lot of

00:16:18,320 --> 00:16:22,160
different metrics

00:16:19,920 --> 00:16:23,040
and all of these components work

00:16:22,160 --> 00:16:26,560
together

00:16:23,040 --> 00:16:28,880
to make the chorus stack

00:16:26,560 --> 00:16:31,759
so and with that i'm going to hand it

00:16:28,880 --> 00:16:31,759
over to renee

00:16:33,279 --> 00:16:37,839
thank you let me share my screen

00:16:38,240 --> 00:16:43,839
this works fine so i hope you can see my

00:16:41,680 --> 00:16:46,320
screen

00:16:43,839 --> 00:16:48,000
is it can you see my screen yes we can

00:16:46,320 --> 00:16:51,759
quirky for queries

00:16:48,000 --> 00:16:53,519
great so um

00:16:51,759 --> 00:16:56,480
one of the components that eric

00:16:53,519 --> 00:16:57,440
mentioned is quirky a curvy writing

00:16:56,480 --> 00:16:59,120
library

00:16:57,440 --> 00:17:02,320
and i would say it's one of the core

00:16:59,120 --> 00:17:04,559
components of the course deck

00:17:02,320 --> 00:17:05,439
it's a library uh that came into

00:17:04,559 --> 00:17:08,799
existence

00:17:05,439 --> 00:17:10,079
back in 2014 exactly at such a migration

00:17:08,799 --> 00:17:13,600
scenario

00:17:10,079 --> 00:17:16,720
where we had to replace functionality

00:17:13,600 --> 00:17:20,160
of a commercial search engine that

00:17:16,720 --> 00:17:22,720
was there to create such rules to

00:17:20,160 --> 00:17:26,400
optimize search results

00:17:22,720 --> 00:17:28,400
it also allows for an easier query

00:17:26,400 --> 00:17:30,000
building and i would say

00:17:28,400 --> 00:17:32,080
this is especially true for the

00:17:30,000 --> 00:17:34,240
elasticsearch version

00:17:32,080 --> 00:17:36,160
the solar version is more or less along

00:17:34,240 --> 00:17:39,440
the lines of the edis max

00:17:36,160 --> 00:17:41,840
query parser plus some additional quirky

00:17:39,440 --> 00:17:43,600
functionality

00:17:41,840 --> 00:17:46,960
but it gives you a lot of additional

00:17:43,600 --> 00:17:49,280
parameters to tune uh relevance in in

00:17:46,960 --> 00:17:52,320
both versions it's released under

00:17:49,280 --> 00:17:52,880
apache 2 license and we haven't

00:17:52,320 --> 00:17:56,799
mentioned

00:17:52,880 --> 00:17:59,679
yet for a chorus we organize everything

00:17:56,799 --> 00:18:01,440
under the quirky orc umbrella so kirk

00:17:59,679 --> 00:18:05,039
york is more or less the

00:18:01,440 --> 00:18:05,679
uh community uh the go do go to place on

00:18:05,039 --> 00:18:08,400
the web

00:18:05,679 --> 00:18:09,600
and you also find links to uh course

00:18:08,400 --> 00:18:12,880
there

00:18:09,600 --> 00:18:15,200
so who is using qirky um so

00:18:12,880 --> 00:18:17,280
it was developed or has been developed

00:18:15,200 --> 00:18:20,000
with e-commerce search in mind

00:18:17,280 --> 00:18:20,480
and uh users and contributors include

00:18:20,000 --> 00:18:24,080
quite

00:18:20,480 --> 00:18:27,039
a lot of big brands in europe so otto

00:18:24,080 --> 00:18:28,320
uh i think it's a lot after amazon the

00:18:27,039 --> 00:18:31,360
largest

00:18:28,320 --> 00:18:33,440
germany based online retailer

00:18:31,360 --> 00:18:34,799
um media mark saturn large electronics

00:18:33,440 --> 00:18:37,600
retailer

00:18:34,799 --> 00:18:38,320
asda belongs to walmart labs uh that's

00:18:37,600 --> 00:18:40,880
uk

00:18:38,320 --> 00:18:42,320
groceries and then companies in

00:18:40,880 --> 00:18:44,640
switzerland

00:18:42,320 --> 00:18:46,080
retailers like brock and ultron or

00:18:44,640 --> 00:18:49,360
klinger group in germany

00:18:46,080 --> 00:18:51,200
and many of them have also almost all of

00:18:49,360 --> 00:18:52,880
them have contributed

00:18:51,200 --> 00:18:55,440
some code and some effort into the

00:18:52,880 --> 00:18:55,440
development of

00:18:55,600 --> 00:19:02,320
uh quirky ru the rules that um

00:18:59,200 --> 00:19:04,720
eric has demonstrated uh

00:19:02,320 --> 00:19:06,960
are written into a file under the hood

00:19:04,720 --> 00:19:07,679
uh this is what we call the rules txt

00:19:06,960 --> 00:19:08,840
file

00:19:07,679 --> 00:19:11,679
and this is more or less the

00:19:08,840 --> 00:19:14,640
configuration of just one of many

00:19:11,679 --> 00:19:15,919
possible rewriters in a rewriter chain

00:19:14,640 --> 00:19:18,240
and we call this

00:19:15,919 --> 00:19:19,360
rewriter the common rules rewriter

00:19:18,240 --> 00:19:22,160
because

00:19:19,360 --> 00:19:23,679
common rules are roots that we normally

00:19:22,160 --> 00:19:26,080
use as

00:19:23,679 --> 00:19:27,679
merchandisers to pick up on this bingo

00:19:26,080 --> 00:19:31,360
word

00:19:27,679 --> 00:19:32,640
so it allows you to create rules for

00:19:31,360 --> 00:19:35,440
synonyms boost or

00:19:32,640 --> 00:19:36,080
penalties create dependent filters and

00:19:35,440 --> 00:19:37,600
deletes

00:19:36,080 --> 00:19:39,919
and i'm going to explain this in a

00:19:37,600 --> 00:19:43,360
minute so synonyms

00:19:39,919 --> 00:19:45,360
um so this is actually what uh

00:19:43,360 --> 00:19:46,720
rules would look like in such a file and

00:19:45,360 --> 00:19:49,840
the first examples are

00:19:46,720 --> 00:19:51,919
um synonyms examples so the input would

00:19:49,840 --> 00:19:52,640
be personal computer and we would add a

00:19:51,919 --> 00:19:55,679
cinnamon

00:19:52,640 --> 00:19:56,000
pc for that and as you can see there's

00:19:55,679 --> 00:19:59,520
no

00:19:56,000 --> 00:20:01,760
issue with um multi-term

00:19:59,520 --> 00:20:03,360
input so this problem has been solved

00:20:01,760 --> 00:20:06,400
i'll come back to this

00:20:03,360 --> 00:20:09,440
later and you will also see

00:20:06,400 --> 00:20:10,880
that uh we don't use any references to

00:20:09,440 --> 00:20:14,400
fields here

00:20:10,880 --> 00:20:15,200
um and uh um at least in the synonym

00:20:14,400 --> 00:20:17,039
rules

00:20:15,200 --> 00:20:18,480
and that means everything is applied we

00:20:17,039 --> 00:20:21,679
go to the

00:20:18,480 --> 00:20:26,240
analysis chain and this makes rewriting

00:20:21,679 --> 00:20:26,240
a lot more flexible and we have a lot

00:20:27,679 --> 00:20:31,870
fewer problems uh compared to using the

00:20:30,720 --> 00:20:33,280
synonym

00:20:31,870 --> 00:20:36,880
[Music]

00:20:33,280 --> 00:20:38,159
token filter in the second example this

00:20:36,880 --> 00:20:40,559
wall example

00:20:38,159 --> 00:20:42,400
i want to demonstrate um that there's a

00:20:40,559 --> 00:20:43,600
bit of flexibility so we can use a

00:20:42,400 --> 00:20:46,720
pattern and pick up

00:20:43,600 --> 00:20:48,720
on what matches the star so

00:20:46,720 --> 00:20:50,880
this could be used for a lot of purposes

00:20:48,720 --> 00:20:53,919
like in this case a poor man's

00:20:50,880 --> 00:20:56,159
decompounding so if something is

00:20:53,919 --> 00:20:58,720
prefixed by a wall we can always split

00:20:56,159 --> 00:21:01,360
off and pick up

00:20:58,720 --> 00:21:02,000
in this case mount or whatever is

00:21:01,360 --> 00:21:04,559
represented

00:21:02,000 --> 00:21:06,080
by the star in uh using the dollar one

00:21:04,559 --> 00:21:08,880
symbol

00:21:06,080 --> 00:21:10,159
uh then a feature that's used a lot in

00:21:08,880 --> 00:21:13,840
um

00:21:10,159 --> 00:21:17,840
um merchandising um boosting

00:21:13,840 --> 00:21:21,280
and uh applying penalties

00:21:17,840 --> 00:21:23,039
so if uh let's say the close iphone um

00:21:21,280 --> 00:21:25,360
we want to boost up everything that

00:21:23,039 --> 00:21:27,120
contains apple by a given factor like in

00:21:25,360 --> 00:21:30,240
this case 200

00:21:27,120 --> 00:21:32,240
and then the next line uh

00:21:30,240 --> 00:21:33,440
is in a line where you can say your

00:21:32,240 --> 00:21:35,840
field name actually

00:21:33,440 --> 00:21:36,480
so we want to bring down the accessories

00:21:35,840 --> 00:21:39,039
uh so

00:21:36,480 --> 00:21:41,679
if someone searches for iphone uh we

00:21:39,039 --> 00:21:44,720
don't want to show all the iphone cases

00:21:41,679 --> 00:21:45,440
and uh whatever we have we want to bring

00:21:44,720 --> 00:21:48,240
to the top

00:21:45,440 --> 00:21:48,720
the proper smartphones and this down

00:21:48,240 --> 00:21:50,640
boost

00:21:48,720 --> 00:21:52,799
has a special syntax you can see a star

00:21:50,640 --> 00:21:55,840
in front of it and this means

00:21:52,799 --> 00:21:57,520
that's a expression in the language

00:21:55,840 --> 00:21:59,360
and the specific language of the search

00:21:57,520 --> 00:22:02,480
engine so in this case it's solar

00:21:59,360 --> 00:22:04,480
but you could also put in a

00:22:02,480 --> 00:22:06,559
json blob that represents an

00:22:04,480 --> 00:22:08,640
elasticsearch query for

00:22:06,559 --> 00:22:09,600
elasticsearch so there's a layer in

00:22:08,640 --> 00:22:11,120
quirky that search

00:22:09,600 --> 00:22:13,120
engine independent but we can always

00:22:11,120 --> 00:22:14,320
reference the search engines syntax

00:22:13,120 --> 00:22:17,360
itself

00:22:14,320 --> 00:22:19,200
so filter query um so again the iphone

00:22:17,360 --> 00:22:22,000
example we can say oh we

00:22:19,200 --> 00:22:22,720
we don't not we don't uh just want to

00:22:22,000 --> 00:22:24,880
boost

00:22:22,720 --> 00:22:26,559
apple but we want to restrict our search

00:22:24,880 --> 00:22:28,240
results to everything that contains

00:22:26,559 --> 00:22:29,840
apple

00:22:28,240 --> 00:22:32,799
and we want to exclude everything that

00:22:29,840 --> 00:22:35,360
contains case yeah so we can do that

00:22:32,799 --> 00:22:37,360
and i think there's no such thing like

00:22:35,360 --> 00:22:39,919
cheap iphone so what should we do

00:22:37,360 --> 00:22:41,840
if someone searches for cheap iphone

00:22:39,919 --> 00:22:46,159
well we can delete the cheap term

00:22:41,840 --> 00:22:47,919
yeah so um and uh we can also

00:22:46,159 --> 00:22:50,480
find an interpretation for cheap and

00:22:47,919 --> 00:22:53,760
that's what i'm going in the next slide

00:22:50,480 --> 00:22:56,400
so we can always go back to uh

00:22:53,760 --> 00:22:56,960
using function queries so we could say

00:22:56,400 --> 00:22:59,200
um

00:22:56,960 --> 00:23:00,480
or or use filter close so we could boost

00:22:59,200 --> 00:23:03,120
or promote everything that

00:23:00,480 --> 00:23:03,840
matches a certain price range in this

00:23:03,120 --> 00:23:06,960
slide

00:23:03,840 --> 00:23:09,360
i'm more referencing

00:23:06,960 --> 00:23:10,400
uh function curves or more complex uh

00:23:09,360 --> 00:23:13,360
expressions

00:23:10,400 --> 00:23:14,320
so if there's something saying new in

00:23:13,360 --> 00:23:17,280
our query

00:23:14,320 --> 00:23:18,080
we can remove the new from the query uh

00:23:17,280 --> 00:23:20,880
because it

00:23:18,080 --> 00:23:23,360
hardly matches but then we can say we

00:23:20,880 --> 00:23:25,600
boost everything that has a release date

00:23:23,360 --> 00:23:27,200
around today four days back and one

00:23:25,600 --> 00:23:30,480
feeling

00:23:27,200 --> 00:23:32,480
and we can also find interpretation

00:23:30,480 --> 00:23:33,600
for let's say an expression like special

00:23:32,480 --> 00:23:36,799
offer so

00:23:33,600 --> 00:23:37,840
again probably we might we might not

00:23:36,799 --> 00:23:41,279
have a match for this

00:23:37,840 --> 00:23:43,760
expression or index but we can say uh

00:23:41,279 --> 00:23:44,880
we restrict our search results to

00:23:43,760 --> 00:23:47,200
everything results

00:23:44,880 --> 00:23:49,360
to everything that has a strike price

00:23:47,200 --> 00:23:50,320
and then boost a certain price range

00:23:49,360 --> 00:23:53,520
yeah so uh

00:23:50,320 --> 00:23:56,000
this complex function query

00:23:53,520 --> 00:23:59,200
has a conditional boost i'm not deep

00:23:56,000 --> 00:24:02,080
diving to the expression

00:23:59,200 --> 00:24:04,000
so coming back to synonyms you might

00:24:02,080 --> 00:24:06,720
remember that there are some issues with

00:24:04,000 --> 00:24:09,600
multi-term synonyms and solar and partly

00:24:06,720 --> 00:24:14,080
maybe also an elastic surge

00:24:09,600 --> 00:24:18,080
and the way this handled and quirky

00:24:14,080 --> 00:24:21,360
is different so this is an example for

00:24:18,080 --> 00:24:22,480
the input query personal computer uh so

00:24:21,360 --> 00:24:24,400
it's a boolean query

00:24:22,480 --> 00:24:25,600
with two disjunction maximization codes

00:24:24,400 --> 00:24:27,440
so i'm expressing this

00:24:25,600 --> 00:24:29,200
in the object model of kiraki which is

00:24:27,440 --> 00:24:31,840
very similar in this case

00:24:29,200 --> 00:24:33,679
to the scene model but you can see that

00:24:31,840 --> 00:24:37,120
there are no field names yeah so

00:24:33,679 --> 00:24:39,679
we apply the field names later then we

00:24:37,120 --> 00:24:43,600
apply the synonym expansion

00:24:39,679 --> 00:24:46,000
and what we do is we add the synonym

00:24:43,600 --> 00:24:48,640
to these clauses individually or twice

00:24:46,000 --> 00:24:50,080
so to say yeah so

00:24:48,640 --> 00:24:51,919
why are we doing this why aren't we

00:24:50,080 --> 00:24:54,559
creating a top level query

00:24:51,919 --> 00:24:54,960
a boolean query with a branch separately

00:24:54,559 --> 00:24:58,000
for

00:24:54,960 --> 00:25:01,279
pc the reason is uh this makes clear

00:24:58,000 --> 00:25:03,679
rewriting a lot easier and

00:25:01,279 --> 00:25:05,840
also we maintain the minimum short match

00:25:03,679 --> 00:25:06,080
semantics yeah so if minimum shot match

00:25:05,840 --> 00:25:09,120
is

00:25:06,080 --> 00:25:10,159
50 percent uh that means we want to

00:25:09,120 --> 00:25:12,880
match half of

00:25:10,159 --> 00:25:15,039
the top level clauses uh we would still

00:25:12,880 --> 00:25:16,559
fulfill this uh if we did it this way if

00:25:15,039 --> 00:25:20,000
we do it this way

00:25:16,559 --> 00:25:22,159
and uh using this approach we can uh

00:25:20,000 --> 00:25:24,720
have overlapping multi-term import

00:25:22,159 --> 00:25:28,080
whatever we want multi-term output

00:25:24,720 --> 00:25:30,880
it just works so then

00:25:28,080 --> 00:25:31,840
if you go back to let's say the old wiki

00:25:30,880 --> 00:25:35,039
for solar

00:25:31,840 --> 00:25:36,720
you get a warning not to use um query

00:25:35,039 --> 00:25:38,480
time synonyms because there's an issue

00:25:36,720 --> 00:25:41,600
with document frequency and this

00:25:38,480 --> 00:25:43,279
issue already exists if you're not using

00:25:41,600 --> 00:25:45,200
synonyms but just

00:25:43,279 --> 00:25:47,039
let's say edus mugs and then expand the

00:25:45,200 --> 00:25:49,039
query across fields like in this case

00:25:47,039 --> 00:25:51,840
the query is genes

00:25:49,039 --> 00:25:52,320
and let's say we search genes in three

00:25:51,840 --> 00:25:55,279
fields

00:25:52,320 --> 00:25:56,480
title brand and color and this is a real

00:25:55,279 --> 00:25:59,440
life example

00:25:56,480 --> 00:25:59,919
uh the first result result we see is

00:25:59,440 --> 00:26:02,559
this

00:25:59,919 --> 00:26:04,400
duvet cover and it's showing up in the

00:26:02,559 --> 00:26:07,039
first result because someone

00:26:04,400 --> 00:26:07,919
put into the color field uh the word

00:26:07,039 --> 00:26:10,400
genes for

00:26:07,919 --> 00:26:12,720
maybe whatever was the motivation the

00:26:10,400 --> 00:26:15,919
motivation was

00:26:12,720 --> 00:26:18,720
and then this

00:26:15,919 --> 00:26:20,080
color field genes in the color field has

00:26:18,720 --> 00:26:23,360
a document frequency

00:26:20,080 --> 00:26:25,919
of just one and using a tf-idf based

00:26:23,360 --> 00:26:27,600
scoring will promote this to the top

00:26:25,919 --> 00:26:28,240
yeah it's just one document that has

00:26:27,600 --> 00:26:31,679
this

00:26:28,240 --> 00:26:36,720
compared to the title uh field that has

00:26:31,679 --> 00:26:40,320
501 documents having this term genes

00:26:36,720 --> 00:26:43,039
so uh that's a problem and what we do

00:26:40,320 --> 00:26:44,080
in quirky is we fake the document

00:26:43,039 --> 00:26:46,799
frequency

00:26:44,080 --> 00:26:49,039
uh so we say uh we take the maximum

00:26:46,799 --> 00:26:51,679
frequency so so in this case the maximum

00:26:49,039 --> 00:26:52,320
frequency is taken from genes from title

00:26:51,679 --> 00:26:55,440
genes

00:26:52,320 --> 00:26:57,520
and apply it to all the other

00:26:55,440 --> 00:26:59,679
fields that come from the same input

00:26:57,520 --> 00:27:01,039
term so that's basically what you can

00:26:59,679 --> 00:27:03,279
also achieve

00:27:01,039 --> 00:27:05,279
in uh just using a blended term gray or

00:27:03,279 --> 00:27:06,000
synonym cray in your scene and this is

00:27:05,279 --> 00:27:09,760
partly being

00:27:06,000 --> 00:27:13,120
done in in solar and and elastic search

00:27:09,760 --> 00:27:16,240
but what we do in quirky in addition is

00:27:13,120 --> 00:27:18,640
if this input term uh is expanded into a

00:27:16,240 --> 00:27:22,320
complex expression like in this case

00:27:18,640 --> 00:27:24,720
uh we add the synonym denim trousers um

00:27:22,320 --> 00:27:26,080
we apply the same fake frequency to the

00:27:24,720 --> 00:27:28,799
entire branch

00:27:26,080 --> 00:27:30,080
uh in this syntax tree that comes from

00:27:28,799 --> 00:27:33,120
this input

00:27:30,080 --> 00:27:35,360
and so we get a um

00:27:33,120 --> 00:27:36,880
so so we we don't have any issue with

00:27:35,360 --> 00:27:39,520
document frequency

00:27:36,880 --> 00:27:40,960
in addition you can always turn off

00:27:39,520 --> 00:27:43,279
document frequency

00:27:40,960 --> 00:27:45,200
or the use of document frequency and uh

00:27:43,279 --> 00:27:48,640
or similarities going

00:27:45,200 --> 00:27:50,480
in quirky altogether

00:27:48,640 --> 00:27:51,679
um so you would just have a boolean

00:27:50,480 --> 00:27:54,159
similarity

00:27:51,679 --> 00:27:55,279
and that makes sense in many uh

00:27:54,159 --> 00:27:58,799
e-commerce

00:27:55,279 --> 00:27:59,520
cases so you've seen the common roots

00:27:58,799 --> 00:28:02,640
rewriter

00:27:59,520 --> 00:28:04,720
and you've seen that it can handle

00:28:02,640 --> 00:28:06,880
multi-term input output overlapping

00:28:04,720 --> 00:28:09,919
input handles document frequency

00:28:06,880 --> 00:28:11,039
so says anyone using synonyms txt or

00:28:09,919 --> 00:28:14,320
elevate

00:28:11,039 --> 00:28:15,360
xml so i would say there's hardly any

00:28:14,320 --> 00:28:17,919
use for that

00:28:15,360 --> 00:28:19,520
and if you're still not convinced uh

00:28:17,919 --> 00:28:22,559
what's up coming is

00:28:19,520 --> 00:28:24,799
uh you will be able to configure this

00:28:22,559 --> 00:28:28,240
rewrite these rewriters via

00:28:24,799 --> 00:28:32,880
uh an httpi so not just the commonwoods

00:28:28,240 --> 00:28:35,440
rewriter and as a bonus there will be

00:28:32,880 --> 00:28:36,320
no collection reload required yeah so

00:28:35,440 --> 00:28:38,720
the new

00:28:36,320 --> 00:28:40,320
rules are just being applied and there's

00:28:38,720 --> 00:28:41,360
no hiccup your collection will be

00:28:40,320 --> 00:28:44,320
available

00:28:41,360 --> 00:28:45,360
um just like this so this is uh should

00:28:44,320 --> 00:28:47,679
be available in

00:28:45,360 --> 00:28:49,200
probably a month from now in addition to

00:28:47,679 --> 00:28:52,799
this but as a separate

00:28:49,200 --> 00:28:54,240
um improvement uh we

00:28:52,799 --> 00:28:56,799
want to use the new packaging and

00:28:54,240 --> 00:28:57,600
plug-in api that david described in his

00:28:56,799 --> 00:29:01,120
talk

00:28:57,600 --> 00:29:03,760
but this doesn't cover the

00:29:01,120 --> 00:29:05,520
configuration of the rewriter itself so

00:29:03,760 --> 00:29:08,399
this rules txt file

00:29:05,520 --> 00:29:10,240
uh will be removed from the

00:29:08,399 --> 00:29:12,640
configuration that i showed earlier

00:29:10,240 --> 00:29:15,840
and become part of and the rules will

00:29:12,640 --> 00:29:18,720
become part of an http request

00:29:15,840 --> 00:29:20,880
so uh i've said that there's not just

00:29:18,720 --> 00:29:22,159
one rewriter incarnation like the common

00:29:20,880 --> 00:29:25,039
roots rewriter

00:29:22,159 --> 00:29:26,480
um so i want to give an overview how

00:29:25,039 --> 00:29:28,480
these rewriter

00:29:26,480 --> 00:29:30,000
rewriters plug in into the overall

00:29:28,480 --> 00:29:33,279
architecture

00:29:30,000 --> 00:29:36,399
so quirky

00:29:33,279 --> 00:29:38,960
has multiple layers so there is a

00:29:36,399 --> 00:29:40,960
core that's search engine independent

00:29:38,960 --> 00:29:43,039
and then there's a little scene layer

00:29:40,960 --> 00:29:44,640
and then there's something that plugs it

00:29:43,039 --> 00:29:46,799
in into the

00:29:44,640 --> 00:29:48,240
search engine so either into solar or

00:29:46,799 --> 00:29:50,640
into elasticsearch

00:29:48,240 --> 00:29:51,360
and what happens is the input is parsed

00:29:50,640 --> 00:29:54,320
into

00:29:51,360 --> 00:29:55,840
quirky's internal query object model so

00:29:54,320 --> 00:29:58,000
this parser is not a

00:29:55,840 --> 00:30:00,559
solar or losing gray parser but it's a

00:29:58,000 --> 00:30:04,000
quirky query parser

00:30:00,559 --> 00:30:05,039
and then you can configure a chain of

00:30:04,000 --> 00:30:07,600
rewriters

00:30:05,039 --> 00:30:08,960
that operates on this object model and

00:30:07,600 --> 00:30:11,120
manipulates it

00:30:08,960 --> 00:30:13,679
adds those synonyms or does other things

00:30:11,120 --> 00:30:16,399
that i'm going to explain in a minute

00:30:13,679 --> 00:30:18,559
and once uh this chain has finished has

00:30:16,399 --> 00:30:21,600
finished rewriting the query

00:30:18,559 --> 00:30:23,279
a query builder builds lucene query

00:30:21,600 --> 00:30:24,799
and the whole thing is plugged into the

00:30:23,279 --> 00:30:27,120
search engine which

00:30:24,799 --> 00:30:28,799
uh and the plugin is either a credible

00:30:27,120 --> 00:30:29,840
than elasticsearch or create powers and

00:30:28,799 --> 00:30:33,279
solar

00:30:29,840 --> 00:30:34,480
and this provides the control of the

00:30:33,279 --> 00:30:36,720
whole process

00:30:34,480 --> 00:30:39,520
and also access to request parameters

00:30:36,720 --> 00:30:41,840
and the environment

00:30:39,520 --> 00:30:43,679
so i want to talk about a few further

00:30:41,840 --> 00:30:45,679
rewriters so what you have seen so far

00:30:43,679 --> 00:30:47,919
is the common rules rewriter

00:30:45,679 --> 00:30:50,000
so basically uh it does all these

00:30:47,919 --> 00:30:51,039
synonyms boosting penalties filters

00:30:50,000 --> 00:30:53,120
deletes

00:30:51,039 --> 00:30:55,440
then there's a replace rewriter so the

00:30:53,120 --> 00:30:59,039
replace rewriter

00:30:55,440 --> 00:31:01,200
does not add something or remove

00:30:59,039 --> 00:31:03,279
something but it replaces

00:31:01,200 --> 00:31:05,200
input and normally it would just

00:31:03,279 --> 00:31:07,760
normalize the input

00:31:05,200 --> 00:31:10,320
and uh so imagine there are a lot of

00:31:07,760 --> 00:31:13,760
typos for word like mobile

00:31:10,320 --> 00:31:15,440
and if you want to maintain a synonym

00:31:13,760 --> 00:31:17,919
for mobile or boost rule

00:31:15,440 --> 00:31:19,679
for mobile you would have to do this for

00:31:17,919 --> 00:31:22,880
all the missed typings for all the

00:31:19,679 --> 00:31:24,880
the spelling mistakes but if you apply a

00:31:22,880 --> 00:31:27,919
replace rewriter before that

00:31:24,880 --> 00:31:29,039
uh we can just uh normalize everything

00:31:27,919 --> 00:31:30,880
to mobile

00:31:29,039 --> 00:31:33,039
and then apply the common words rewrite

00:31:30,880 --> 00:31:33,840
adjust on mobile so that saves a lot of

00:31:33,039 --> 00:31:35,840
work

00:31:33,840 --> 00:31:37,679
and this functionality will be added to

00:31:35,840 --> 00:31:40,080
smoothie so or it's already been added

00:31:37,679 --> 00:31:44,240
to somewhere in the next course version

00:31:40,080 --> 00:31:46,960
you can use smoothie and

00:31:44,240 --> 00:31:47,679
maintain your spellings in one place and

00:31:46,960 --> 00:31:49,840
the

00:31:47,679 --> 00:31:51,519
merchandising rules uh in a different

00:31:49,840 --> 00:31:53,440
place

00:31:51,519 --> 00:31:56,799
then we have a number unit rewriter that

00:31:53,440 --> 00:31:58,720
adds an interpretation of a numerical

00:31:56,799 --> 00:32:01,360
of numbers and units i'm going to show

00:31:58,720 --> 00:32:05,279
this in greater detail in a moment

00:32:01,360 --> 00:32:07,679
then a very simple rewriter that just

00:32:05,279 --> 00:32:08,640
combines adjacent tokens into a combined

00:32:07,679 --> 00:32:10,320
token

00:32:08,640 --> 00:32:12,480
uh like in this case iphone written

00:32:10,320 --> 00:32:15,679
versus base um

00:32:12,480 --> 00:32:17,679
we create iphone uh this is

00:32:15,679 --> 00:32:19,360
more and more being replaced by the word

00:32:17,679 --> 00:32:20,399
break rewriter that also creates

00:32:19,360 --> 00:32:23,120
compounds

00:32:20,399 --> 00:32:24,480
so in this case um i'm i've just shown

00:32:23,120 --> 00:32:26,960
two examples here

00:32:24,480 --> 00:32:28,000
so if you have an occurring input grain

00:32:26,960 --> 00:32:30,159
free

00:32:28,000 --> 00:32:31,360
we can add automatically add a synonym

00:32:30,159 --> 00:32:34,960
grain

00:32:31,360 --> 00:32:36,240
space free and then the next example is

00:32:34,960 --> 00:32:40,399
from dutch

00:32:36,240 --> 00:32:43,200
so we can configure words that

00:32:40,399 --> 00:32:44,399
trigger uh the creation of a compound

00:32:43,200 --> 00:32:47,360
like in this case it means

00:32:44,399 --> 00:32:47,760
uh food for dogs four for hondan and

00:32:47,360 --> 00:32:51,440
then

00:32:47,760 --> 00:32:53,039
uh we add the wholemen for um uh synonym

00:32:51,440 --> 00:32:55,360
uh i show this in a moment and you can

00:32:53,039 --> 00:32:58,720
always plug in your own rewriter

00:32:55,360 --> 00:33:01,760
and so it's a framework and the chain

00:32:58,720 --> 00:33:04,080
the rewrite chain is quite flexible so i

00:33:01,760 --> 00:33:06,320
want to explain the number unit rewriter

00:33:04,080 --> 00:33:07,919
so what it does is so let's imagine we

00:33:06,320 --> 00:33:11,600
have a query like notebook

00:33:07,919 --> 00:33:14,640
16 inch and then we want to find the

00:33:11,600 --> 00:33:18,320
interpretation of the 16 inch

00:33:14,640 --> 00:33:22,080
and we can say we want to filter

00:33:18,320 --> 00:33:24,159
the results based on the

00:33:22,080 --> 00:33:25,200
screen diameter and we want to provide

00:33:24,159 --> 00:33:28,240
the range not just

00:33:25,200 --> 00:33:32,000
16. yes in case we say okay

00:33:28,240 --> 00:33:33,919
14.5 to 17.5 inches

00:33:32,000 --> 00:33:36,640
and then we want to say the one that's

00:33:33,919 --> 00:33:38,720
the closest to the original input

00:33:36,640 --> 00:33:40,399
that's uh that should be boosted the

00:33:38,720 --> 00:33:41,360
most yeah so we have two linear

00:33:40,399 --> 00:33:44,960
functions

00:33:41,360 --> 00:33:45,279
um that uh have their their peak value

00:33:44,960 --> 00:33:48,399
uh

00:33:45,279 --> 00:33:51,200
in this case uh at the original input

00:33:48,399 --> 00:33:53,840
so uh just to make this clear uh we will

00:33:51,200 --> 00:33:56,000
not configure something specific to 16

00:33:53,840 --> 00:33:58,080
yeah so we will configure something

00:33:56,000 --> 00:33:59,360
that's based uh that's triggered by okay

00:33:58,080 --> 00:34:01,840
there's notebook and there's

00:33:59,360 --> 00:34:03,919
inch yeah and then we can say okay so

00:34:01,840 --> 00:34:07,039
that's the boost function and that's the

00:34:03,919 --> 00:34:08,960
uh the filter function so if you uh go

00:34:07,039 --> 00:34:10,879
to media map de in germany

00:34:08,960 --> 00:34:12,079
uh you can see this in action i don't

00:34:10,879 --> 00:34:15,119
know how visible

00:34:12,079 --> 00:34:16,800
or whether you can recognize this so um

00:34:15,119 --> 00:34:19,599
i think there's a functionality for this

00:34:16,800 --> 00:34:21,679
uh in solar so that you can map

00:34:19,599 --> 00:34:22,879
a query and put the textual input to a

00:34:21,679 --> 00:34:26,240
single field

00:34:22,879 --> 00:34:27,599
uh and in kirk you can do this using as

00:34:26,240 --> 00:34:29,599
many fields as you want

00:34:27,599 --> 00:34:31,679
and more flexible and then you also have

00:34:29,599 --> 00:34:34,639
this boosting so in this case

00:34:31,679 --> 00:34:35,280
the input query is 16 sol 16 source 16

00:34:34,639 --> 00:34:37,599
inch

00:34:35,280 --> 00:34:38,720
a thousand euros and as you can see in

00:34:37,599 --> 00:34:40,960
the results

00:34:38,720 --> 00:34:41,760
we're not just matching the exact 16

00:34:40,960 --> 00:34:45,839
inches

00:34:41,760 --> 00:34:47,919
but something around 16 inches

00:34:45,839 --> 00:34:49,440
and we boost the ones that are the

00:34:47,919 --> 00:34:51,679
closest to the top

00:34:49,440 --> 00:34:52,879
and here we have 15.6 which is still in

00:34:51,679 --> 00:34:55,200
the filter range

00:34:52,879 --> 00:34:57,440
and then also the price range is being

00:34:55,200 --> 00:34:59,040
filtered and boosted

00:34:57,440 --> 00:35:01,440
another and the last and the final

00:34:59,040 --> 00:35:03,040
rewriter that i want to

00:35:01,440 --> 00:35:05,440
explained today is the word break

00:35:03,040 --> 00:35:07,359
rewriter and it does not just break

00:35:05,440 --> 00:35:08,960
words into part but also into parts but

00:35:07,359 --> 00:35:11,280
also create compounds as

00:35:08,960 --> 00:35:13,839
synonyms so i've already given this

00:35:11,280 --> 00:35:17,280
example of grain free

00:35:13,839 --> 00:35:19,200
so internally it uses a technique which

00:35:17,280 --> 00:35:21,200
is very similar to lucien's word break

00:35:19,200 --> 00:35:21,760
spell checker so based on a dictionary

00:35:21,200 --> 00:35:23,920
field

00:35:21,760 --> 00:35:26,560
it examines the input where can i break

00:35:23,920 --> 00:35:28,480
it and it might find the words grain and

00:35:26,560 --> 00:35:29,200
free in the index in this dictionary

00:35:28,480 --> 00:35:31,200
field

00:35:29,200 --> 00:35:33,440
and then say okay if the input is grain

00:35:31,200 --> 00:35:37,200
free i

00:35:33,440 --> 00:35:40,079
split it into these two words and

00:35:37,200 --> 00:35:41,760
add this as a synonym and it also does

00:35:40,079 --> 00:35:44,560
the other way around so it creates

00:35:41,760 --> 00:35:45,920
shingles of these of adjacent tokens so

00:35:44,560 --> 00:35:48,160
if the input

00:35:45,920 --> 00:35:49,599
is coming in into in two words it

00:35:48,160 --> 00:35:52,160
creates the combined

00:35:49,599 --> 00:35:53,680
combined word the compound and then this

00:35:52,160 --> 00:35:55,839
dog food example

00:35:53,680 --> 00:35:57,599
so uh what you would do is you would

00:35:55,839 --> 00:35:59,200
configure a list of those words that

00:35:57,599 --> 00:36:02,960
trigger this behavior

00:35:59,200 --> 00:36:04,640
so if it fi when it finds a four

00:36:02,960 --> 00:36:07,280
it would look to the left and to the

00:36:04,640 --> 00:36:11,599
right and then create the compound

00:36:07,280 --> 00:36:13,280
with the two words in reverse order um

00:36:11,599 --> 00:36:15,040
and uh one thing i want to mention is

00:36:13,280 --> 00:36:17,359
that this happens before

00:36:15,040 --> 00:36:18,480
uh field analysis and the nice thing

00:36:17,359 --> 00:36:20,400
about it is

00:36:18,480 --> 00:36:22,640
uh you can search in different fields

00:36:20,400 --> 00:36:25,440
yeah so in german we where

00:36:22,640 --> 00:36:26,880
we have many compounds and a technique

00:36:25,440 --> 00:36:29,680
might be use a material

00:36:26,880 --> 00:36:30,320
plus the thing like cotton jacket and

00:36:29,680 --> 00:36:32,079
then

00:36:30,320 --> 00:36:34,160
you split it and then cotton would be

00:36:32,079 --> 00:36:35,760
searched maybe in the material field

00:36:34,160 --> 00:36:37,440
and jacket in the product type or

00:36:35,760 --> 00:36:39,440
category field so

00:36:37,440 --> 00:36:43,280
there's quite a benefit in doing this

00:36:39,440 --> 00:36:43,280
before you go to the analysis chain

00:36:44,079 --> 00:36:48,400
very new maybe that's been released four

00:36:47,119 --> 00:36:51,760
weeks ago

00:36:48,400 --> 00:36:53,680
is a language specific implementation of

00:36:51,760 --> 00:36:55,599
compounding rules with this

00:36:53,680 --> 00:36:56,800
word break compound rewriter so you can

00:36:55,599 --> 00:36:59,040
configure

00:36:56,800 --> 00:37:02,480
a language specific compounding

00:36:59,040 --> 00:37:05,359
morphology so this sounds complicated

00:37:02,480 --> 00:37:06,720
so what does it mean as an example in

00:37:05,359 --> 00:37:10,079
german

00:37:06,720 --> 00:37:10,720
so we do have this technique of uh just

00:37:10,079 --> 00:37:13,839
combine

00:37:10,720 --> 00:37:16,640
combining two words into uh

00:37:13,839 --> 00:37:17,200
a compound uh without changing the word

00:37:16,640 --> 00:37:20,320
forms

00:37:17,200 --> 00:37:23,440
yeah so in this case up for vine apple

00:37:20,320 --> 00:37:27,200
wine becomes up for wine

00:37:23,440 --> 00:37:29,760
but then we have a specific

00:37:27,200 --> 00:37:31,760
word forms that are only used when the

00:37:29,760 --> 00:37:34,560
word occurs in a compound

00:37:31,760 --> 00:37:35,040
like in the second example gradual boat

00:37:34,560 --> 00:37:38,160
board

00:37:35,040 --> 00:37:39,119
rescue boat the the word itself is

00:37:38,160 --> 00:37:42,880
return

00:37:39,119 --> 00:37:46,000
rescue but in the compound uh

00:37:42,880 --> 00:37:48,960
form it adds an s yeah and there's no

00:37:46,000 --> 00:37:50,400
other context in which we would use that

00:37:48,960 --> 00:37:52,079
as together with this word

00:37:50,400 --> 00:37:53,599
that's just this a very specific

00:37:52,079 --> 00:37:56,880
compound form

00:37:53,599 --> 00:37:58,240
and the same and

00:37:56,880 --> 00:37:59,920
it's not just this way it could also be

00:37:58,240 --> 00:38:02,960
the other way around so in this case

00:37:59,920 --> 00:38:04,000
a bomb volley project so when a bomb

00:38:02,960 --> 00:38:06,880
volley is taking so

00:38:04,000 --> 00:38:07,839
cotton when this is taken uh when this

00:38:06,880 --> 00:38:09,680
is used in the

00:38:07,839 --> 00:38:12,160
as a head as a modifier word in the

00:38:09,680 --> 00:38:15,680
compound we will drop the e

00:38:12,160 --> 00:38:17,200
yeah so now i imagine see this word

00:38:15,680 --> 00:38:19,040
and you would try the splits based on

00:38:17,200 --> 00:38:19,760
the dictionary field you wouldn't find

00:38:19,040 --> 00:38:22,000
the match

00:38:19,760 --> 00:38:23,119
because in the dictionary there's this e

00:38:22,000 --> 00:38:26,640
yeah so

00:38:23,119 --> 00:38:30,320
um we uh so we've

00:38:26,640 --> 00:38:32,560
implemented patterns um the the 20 most

00:38:30,320 --> 00:38:34,960
popular patterns and achieve a much

00:38:32,560 --> 00:38:37,200
higher recall based on that

00:38:34,960 --> 00:38:38,079
all right so i think this was my tour de

00:38:37,200 --> 00:38:41,119
force uh

00:38:38,079 --> 00:38:43,520
through rewriters and quirky

00:38:41,119 --> 00:38:44,160
so coming back to the broader context of

00:38:43,520 --> 00:38:47,280
course

00:38:44,160 --> 00:38:49,760
and um

00:38:47,280 --> 00:38:51,359
toolstack for open source uh e-commerce

00:38:49,760 --> 00:38:54,640
search

00:38:51,359 --> 00:38:56,960
so as i said earlier we want to

00:38:54,640 --> 00:38:58,079
keep this under the quirky orc umbrella

00:38:56,960 --> 00:39:00,320
and

00:38:58,079 --> 00:39:02,640
we are still in the process of finding

00:39:00,320 --> 00:39:05,119
ourselves defining a road map

00:39:02,640 --> 00:39:06,000
and create a community process and

00:39:05,119 --> 00:39:09,599
you're very

00:39:06,000 --> 00:39:12,000
welcome to join hands and uh

00:39:09,599 --> 00:39:13,200
implementation wise i think there should

00:39:12,000 --> 00:39:16,720
definitely be

00:39:13,200 --> 00:39:19,359
a elasticsearch version of smoothie and

00:39:16,720 --> 00:39:21,119
we also need to make sure that what we

00:39:19,359 --> 00:39:24,560
give there as an example

00:39:21,119 --> 00:39:27,040
will work smoothly for many different

00:39:24,560 --> 00:39:29,839
organizations for many different needs

00:39:27,040 --> 00:39:31,280
and of course we should make sure that

00:39:29,839 --> 00:39:33,200
there's a path

00:39:31,280 --> 00:39:34,320
from roots topping with chorus your

00:39:33,200 --> 00:39:37,440
starting point

00:39:34,320 --> 00:39:40,079
uh to production yeah so maybe using

00:39:37,440 --> 00:39:42,720
kubernetes uh make sure this this works

00:39:40,079 --> 00:39:43,119
um yeah so that's about the next steps

00:39:42,720 --> 00:39:46,240
and

00:39:43,119 --> 00:39:48,880
uh uh feel free to get in touch so

00:39:46,240 --> 00:39:51,280
remembering our pete uh you can write to

00:39:48,880 --> 00:39:55,440
pete at quirky or hello pete

00:39:51,280 --> 00:39:58,880
and uh yeah then uh we have these uh

00:39:55,440 --> 00:40:11,280
urls where you can find us

00:39:58,880 --> 00:40:13,920
thank you very much

00:40:11,280 --> 00:40:13,920
any questions

00:40:15,520 --> 00:40:19,200
for a couple of different questions uh

00:40:17,599 --> 00:40:22,160
you need to read them out renee

00:40:19,200 --> 00:40:22,720
and uh you can take a a stab at between

00:40:22,160 --> 00:40:25,760
that so

00:40:22,720 --> 00:40:28,480
from alexandre uh so

00:40:25,760 --> 00:40:29,200
uh how is it different from the analyzer

00:40:28,480 --> 00:40:32,880
chains

00:40:29,200 --> 00:40:33,760
query pass uh yeah so so let me take

00:40:32,880 --> 00:40:38,160
this one

00:40:33,760 --> 00:40:41,280
uh so basically um the analyzer path

00:40:38,160 --> 00:40:44,720
uh has a certain notion of

00:40:41,280 --> 00:40:46,880
state yeah so and this leads to all

00:40:44,720 --> 00:40:50,800
problems when it comes to graph

00:40:46,880 --> 00:40:54,400
and uh i think it's also um

00:40:50,800 --> 00:40:57,680
intertwined with uh stemming and so on

00:40:54,400 --> 00:40:59,440
and what we say is uh we do this before

00:40:57,680 --> 00:41:01,920
we go to the analysis chain and get

00:40:59,440 --> 00:41:02,960
greater flexibility yeah and we also

00:41:01,920 --> 00:41:05,520
have a notion

00:41:02,960 --> 00:41:07,280
if you want uh you can say okay this is

00:41:05,520 --> 00:41:08,640
already a boolean query so there's a

00:41:07,280 --> 00:41:11,520
bracket around things

00:41:08,640 --> 00:41:15,280
this is something that you that you

00:41:11,520 --> 00:41:17,440
don't have in the analysis change

00:41:15,280 --> 00:41:19,760
and then the second part of his question

00:41:17,440 --> 00:41:20,400
was about trey granger's semantic search

00:41:19,760 --> 00:41:22,880
approach

00:41:20,400 --> 00:41:25,119
seems to apply to extract similar

00:41:22,880 --> 00:41:28,319
category detection automatically and

00:41:25,119 --> 00:41:28,319
what are your thoughts on that

00:41:29,920 --> 00:41:36,720
yeah so category detection

00:41:34,079 --> 00:41:37,839
you can do this uh i mean this is not

00:41:36,720 --> 00:41:39,920
the end of the story

00:41:37,839 --> 00:41:41,599
um but what we have observed is that

00:41:39,920 --> 00:41:42,480
there's always a need for manual

00:41:41,599 --> 00:41:45,760
interference

00:41:42,480 --> 00:41:48,079
and so yeah um

00:41:45,760 --> 00:41:49,680
so there's a late addition to quirky

00:41:48,079 --> 00:41:50,880
wars how do we combine it with learning

00:41:49,680 --> 00:41:54,319
to rank

00:41:50,880 --> 00:41:57,440
and which one has predominance

00:41:54,319 --> 00:42:00,160
and we say quirky has it because

00:41:57,440 --> 00:42:01,760
we can expect that a rule maintained a

00:42:00,160 --> 00:42:04,160
quirky

00:42:01,760 --> 00:42:04,880
should be there to say okay our

00:42:04,160 --> 00:42:08,000
algorithm

00:42:04,880 --> 00:42:10,400
our ltr works in 98 of our form

00:42:08,000 --> 00:42:11,359
of my queries and to fix the last two

00:42:10,400 --> 00:42:14,000
percent

00:42:11,359 --> 00:42:15,359
uh i need some manual interference yeah

00:42:14,000 --> 00:42:18,800
yeah

00:42:15,359 --> 00:42:19,520
sam um all right so uh some other

00:42:18,800 --> 00:42:22,960
questions

00:42:19,520 --> 00:42:25,440
uh anshum uh asked about do you still

00:42:22,960 --> 00:42:28,880
need to use synonyms with solar

00:42:25,440 --> 00:42:28,880
sort of classical synonyms

00:42:29,599 --> 00:42:36,000
i would say no uh except um

00:42:32,960 --> 00:42:38,400
if there's something at the index side

00:42:36,000 --> 00:42:40,319
so there might be cases uh where you

00:42:38,400 --> 00:42:44,000
want to add synonyms uh

00:42:40,319 --> 00:42:46,800
at index time uh but apart from this

00:42:44,000 --> 00:42:48,960
i think an uh index time has its issues

00:42:46,800 --> 00:42:51,440
when you split things maybe

00:42:48,960 --> 00:42:53,200
uh you get a match for a single term

00:42:51,440 --> 00:42:55,359
problematic don't do that

00:42:53,200 --> 00:42:56,800
i think it's much more robust if you do

00:42:55,359 --> 00:42:59,119
it at query time

00:42:56,800 --> 00:43:00,880
yeah and but there might be cases maybe

00:42:59,119 --> 00:43:04,160
replace something by an id

00:43:00,880 --> 00:43:05,760
or something that makes sense i think my

00:43:04,160 --> 00:43:09,359
answer on that would be

00:43:05,760 --> 00:43:12,079
we abuse the concept of synonyms that

00:43:09,359 --> 00:43:13,040
this is a synonym of this to make all

00:43:12,079 --> 00:43:15,760
sorts of tri

00:43:13,040 --> 00:43:17,359
uh attempts at relationships and rules

00:43:15,760 --> 00:43:20,400
using synonyms

00:43:17,359 --> 00:43:24,480
and it's difficult to use

00:43:20,400 --> 00:43:26,640
it causes a lot of like side effects

00:43:24,480 --> 00:43:28,160
i think synonyms are great if you can

00:43:26,640 --> 00:43:29,440
load a bunch of synonyms into your

00:43:28,160 --> 00:43:32,240
search index that you know

00:43:29,440 --> 00:43:33,119
are very stable and good and you're able

00:43:32,240 --> 00:43:35,520
to test them

00:43:33,119 --> 00:43:37,680
but where we want to use synonyms is

00:43:35,520 --> 00:43:39,839
fixing individual problems and we want

00:43:37,680 --> 00:43:42,000
to be very proactive about that and so

00:43:39,839 --> 00:43:44,640
the sort of real-time nature

00:43:42,000 --> 00:43:45,760
of being able to use the quirky style

00:43:44,640 --> 00:43:48,400
synonyms

00:43:45,760 --> 00:43:48,880
i think for me makes it a it makes it

00:43:48,400 --> 00:43:52,480
really

00:43:48,880 --> 00:43:53,920
is a really powerful feature yeah

00:43:52,480 --> 00:43:55,440
okay to go through the i don't know how

00:43:53,920 --> 00:43:56,240
much time you have left to go through

00:43:55,440 --> 00:43:58,960
the questions

00:43:56,240 --> 00:43:59,599
quickly query elevation component is a

00:43:58,960 --> 00:44:02,880
lot less

00:43:59,599 --> 00:44:05,599
flexible yeah so i i wouldn't use it uh

00:44:02,880 --> 00:44:07,359
so then next question uh automatically

00:44:05,599 --> 00:44:09,280
generate rules

00:44:07,359 --> 00:44:11,520
i could imagine to write a rewriter that

00:44:09,280 --> 00:44:13,599
does something contextually

00:44:11,520 --> 00:44:15,520
so not even using rules but a model

00:44:13,599 --> 00:44:18,640
somehow

00:44:15,520 --> 00:44:21,760
but i know at least of one client

00:44:18,640 --> 00:44:22,319
of one user of quirky they've generated

00:44:21,760 --> 00:44:24,640
like

00:44:22,319 --> 00:44:25,760
i think 50 000 rules and put it into

00:44:24,640 --> 00:44:28,960
quirky

00:44:25,760 --> 00:44:31,119
so after some offline calculation so

00:44:28,960 --> 00:44:32,400
uh basically you can always create a

00:44:31,119 --> 00:44:35,040
configuration

00:44:32,400 --> 00:44:35,520
pre-calculate something and then put it

00:44:35,040 --> 00:44:38,880
onto

00:44:35,520 --> 00:44:41,119
onto quirky yeah branding uh we think

00:44:38,880 --> 00:44:41,520
quirky org is the community and the host

00:44:41,119 --> 00:44:43,280
and

00:44:41,520 --> 00:44:45,359
course is the software yeah so the

00:44:43,280 --> 00:44:46,480
chorus is the stack that puts it all

00:44:45,359 --> 00:44:50,800
together

00:44:46,480 --> 00:44:54,079
yeah there was one more question about

00:44:50,800 --> 00:44:57,200
user base personalization like user

00:44:54,079 --> 00:44:57,920
like user personalization um renee any

00:44:57,200 --> 00:44:59,030
thoughts on

00:44:57,920 --> 00:45:01,200
on personalization

00:44:59,030 --> 00:45:03,599
[Music]

00:45:01,200 --> 00:45:04,720
uh there's a feature that i didn't show

00:45:03,599 --> 00:45:08,000
with the

00:45:04,720 --> 00:45:10,480
common roots rewriter that allows you to

00:45:08,000 --> 00:45:12,960
contextualize the application of rules

00:45:10,480 --> 00:45:13,839
so that means you can say okay that's my

00:45:12,960 --> 00:45:16,800
context

00:45:13,839 --> 00:45:18,240
and then you have tagged your rules to

00:45:16,800 --> 00:45:20,480
only apply

00:45:18,240 --> 00:45:22,000
in the specific context so that could be

00:45:20,480 --> 00:45:25,520
the user's mail

00:45:22,000 --> 00:45:28,880
or it could be it's uh 9 p.m now

00:45:25,520 --> 00:45:31,280
or whatever your context is so

00:45:28,880 --> 00:45:32,000
exploring the product set available to

00:45:31,280 --> 00:45:34,720
them versus

00:45:32,000 --> 00:45:35,200
the user is looking for a specific on

00:45:34,720 --> 00:45:38,640
sale

00:45:35,200 --> 00:45:41,480
product though this is not the the

00:45:38,640 --> 00:45:43,599
uh the vector you would normally use for

00:45:41,480 --> 00:45:46,800
contextualization but at least some

00:45:43,599 --> 00:45:48,400
type of segmentation so i could imagine

00:45:46,800 --> 00:45:52,319
developing it further

00:45:48,400 --> 00:45:55,680
but what you have now is this um

00:45:52,319 --> 00:46:00,480
filtering and ordering of

00:45:55,680 --> 00:46:01,200
rules prioritizing of rules depending on

00:46:00,480 --> 00:46:03,760
this

00:46:01,200 --> 00:46:03,760
context

00:46:05,680 --> 00:46:07,920
so

00:46:10,319 --> 00:46:15,839
okay any further questions

00:46:19,359 --> 00:46:25,440
yeah um if you go to the chorus

00:46:22,640 --> 00:46:26,480
uh website uh quirky.org and then click

00:46:25,440 --> 00:46:29,440
the chorus link

00:46:26,480 --> 00:46:31,520
um if you want to try everything out

00:46:29,440 --> 00:46:33,760
it's as simple as get clone

00:46:31,520 --> 00:46:35,680
the repository and then there's a shell

00:46:33,760 --> 00:46:38,800
script dot slash quick start

00:46:35,680 --> 00:46:41,040
run that um give your laptop about 20

00:46:38,800 --> 00:46:42,000
minutes to build everything and load all

00:46:41,040 --> 00:46:43,280
the sample data

00:46:42,000 --> 00:46:44,880
and everything else but you'll have all

00:46:43,280 --> 00:46:45,760
the components of a quirky working

00:46:44,880 --> 00:46:48,160
together

00:46:45,760 --> 00:46:49,680
uh and there's a couple of katas that

00:46:48,160 --> 00:46:51,520
we've already published that teach you

00:46:49,680 --> 00:46:54,560
how to follow through all the steps

00:46:51,520 --> 00:46:57,760
uh with more coming so thank you and

00:46:54,560 --> 00:47:00,880
if you're still stuck uh stay tuned um

00:46:57,760 --> 00:47:03,440
there might be a hands-on webinar soon

00:47:00,880 --> 00:47:04,960
uh maybe still this month so you have

00:47:03,440 --> 00:47:08,240
our twitter handles i guess

00:47:04,960 --> 00:47:09,839
so stay tuned and uh then you might

00:47:08,240 --> 00:47:11,760
wanna try this out

00:47:09,839 --> 00:47:14,160
in this webinar session hands on

00:47:11,760 --> 00:47:14,160
yourselves

00:47:14,560 --> 00:47:17,200
right thank you

00:47:17,920 --> 00:47:25,839
thank you thank you

00:47:31,680 --> 00:47:33,760

YouTube URL: https://www.youtube.com/watch?v=NGtmSbOoFjA


