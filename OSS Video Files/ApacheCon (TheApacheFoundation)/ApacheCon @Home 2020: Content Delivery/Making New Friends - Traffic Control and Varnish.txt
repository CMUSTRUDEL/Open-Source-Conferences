Title: Making New Friends - Traffic Control and Varnish
Publication date: 2020-10-15
Playlist: ApacheCon @Home 2020: Content Delivery
Description: 
	Making New Friends - Traffic Control and Varnish
Eric Friedrich

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

Traffic Control is a full featured CDN Control Plane built around Traffic Server caches. This session describes integration of ATCâ€™s Traffic Router and Traffic Manager with Varnish Cache. Varnish Cache uses a specialized configuration language (VCL) which is generated alongside Traffic Control configuration files.

Eric is currently a Content Distribution Architect with Disney Streaming Services. He is also a PMC member and committer of Apache Traffic Control.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:25,279 --> 00:00:28,320
hi everyone

00:00:26,480 --> 00:00:30,240
my name is eric friedrich and i'm a

00:00:28,320 --> 00:00:31,920
content distribution architect at disney

00:00:30,240 --> 00:00:33,200
streaming services

00:00:31,920 --> 00:00:35,200
i'm very excited to be leading off the

00:00:33,200 --> 00:00:38,719
content delivery track here

00:00:35,200 --> 00:00:40,079
at apachecon 2020. before i get started

00:00:38,719 --> 00:00:41,760
i want to thank all the apache con

00:00:40,079 --> 00:00:42,160
volunteers and especially our track

00:00:41,760 --> 00:00:44,480
chair

00:00:42,160 --> 00:00:46,559
dave newman for putting together a great

00:00:44,480 --> 00:00:48,480
list of speakers today

00:00:46,559 --> 00:00:50,160
i'll be going through our experiences at

00:00:48,480 --> 00:00:51,440
disney streaming services

00:00:50,160 --> 00:00:53,840
and bringing together some of our

00:00:51,440 --> 00:00:59,840
existing content delivery systems

00:00:53,840 --> 00:00:59,840
along with apache traffic control

00:01:02,320 --> 00:01:07,280
first i'll introduce a bit of history

00:01:05,360 --> 00:01:10,159
then varnish cache and finally how it

00:01:07,280 --> 00:01:12,560
can be used alongside traffic control

00:01:10,159 --> 00:01:14,080
plan to leave about the last 10 minutes

00:01:12,560 --> 00:01:16,560
or so for any questions

00:01:14,080 --> 00:01:16,560
and answers

00:01:17,280 --> 00:01:20,479
our beginnings at disney streaming

00:01:19,119 --> 00:01:22,640
services came

00:01:20,479 --> 00:01:24,080
from being part of the major league

00:01:22,640 --> 00:01:26,799
baseball sports league

00:01:24,080 --> 00:01:29,200
uh responsible originally for live

00:01:26,799 --> 00:01:31,200
streaming of baseball events

00:01:29,200 --> 00:01:33,759
we were spun out into an independent

00:01:31,200 --> 00:01:34,640
company where we expanded to other live

00:01:33,759 --> 00:01:37,360
events

00:01:34,640 --> 00:01:38,799
such as wrestlemania 34 and super bowl

00:01:37,360 --> 00:01:41,200
51.

00:01:38,799 --> 00:01:43,119
for these we've traditionally leveraged

00:01:41,200 --> 00:01:44,960
commercial content delivery networks

00:01:43,119 --> 00:01:46,240
to deliver content from our origin

00:01:44,960 --> 00:01:50,079
servers to

00:01:46,240 --> 00:01:50,560
all of our viewers uh as we are acquired

00:01:50,079 --> 00:01:54,000
by

00:01:50,560 --> 00:01:55,520
disney we also began to take on vod

00:01:54,000 --> 00:01:57,040
which is a much different experience

00:01:55,520 --> 00:02:00,479
than live

00:01:57,040 --> 00:02:00,880
we started with wwe network vod and hbo

00:02:00,479 --> 00:02:04,079
now

00:02:00,880 --> 00:02:07,119
such as game of thrones and here we saw

00:02:04,079 --> 00:02:09,200
lower peaks less band with the peak but

00:02:07,119 --> 00:02:11,680
a lot more sustained traffic kind of the

00:02:09,200 --> 00:02:13,440
the baseline was was much much higher

00:02:11,680 --> 00:02:14,720
and of course a much more diverse

00:02:13,440 --> 00:02:18,000
content library

00:02:14,720 --> 00:02:20,560
instead of a few sporting events it was

00:02:18,000 --> 00:02:22,160
many many different pieces of content

00:02:20,560 --> 00:02:24,720
and we found that the variety

00:02:22,160 --> 00:02:26,319
and library size had a large impact on

00:02:24,720 --> 00:02:29,520
user experience

00:02:26,319 --> 00:02:30,319
this led us to stand up not just our own

00:02:29,520 --> 00:02:32,480
origins

00:02:30,319 --> 00:02:34,160
but our own origin shields as well to

00:02:32,480 --> 00:02:37,599
help feed all the different content

00:02:34,160 --> 00:02:40,400
delivery networks

00:02:37,599 --> 00:02:42,239
i joined disney streaming services in

00:02:40,400 --> 00:02:45,120
00:02:42,239 --> 00:02:45,680
prior to that i was at cisco and sydney

00:02:45,120 --> 00:02:47,920
media

00:02:45,680 --> 00:02:49,519
contributing to traffic control i've

00:02:47,920 --> 00:02:51,519
been with traffic control since its

00:02:49,519 --> 00:02:54,560
beginnings as an open source project

00:02:51,519 --> 00:02:56,480
in 2015 prior to it even coming to

00:02:54,560 --> 00:02:58,159
apache through the incubator

00:02:56,480 --> 00:03:00,959
it's been very exciting to see it grow

00:02:58,159 --> 00:03:04,000
over these last few years

00:03:00,959 --> 00:03:06,239
now at dss i'm working to combine our

00:03:04,000 --> 00:03:08,239
existing varnish cache infrastructure

00:03:06,239 --> 00:03:11,680
along with apache traffic control and

00:03:08,239 --> 00:03:11,680
that's what we'll talk more about today

00:03:14,959 --> 00:03:18,800
our goal like all cdns is to deliver

00:03:17,840 --> 00:03:20,800
great content

00:03:18,800 --> 00:03:22,400
and great viewing experiences to our

00:03:20,800 --> 00:03:25,440
customers

00:03:22,400 --> 00:03:27,200
all of the content we're responsible for

00:03:25,440 --> 00:03:29,519
delivering is stored on a set of origin

00:03:27,200 --> 00:03:32,400
servers over here on the right

00:03:29,519 --> 00:03:35,519
these origins authoritatively keep the

00:03:32,400 --> 00:03:37,440
entire copy of the content library

00:03:35,519 --> 00:03:39,360
but of course while they have lots of

00:03:37,440 --> 00:03:41,599
storage they can't handle

00:03:39,360 --> 00:03:42,720
the load the bandwidth the transactions

00:03:41,599 --> 00:03:45,360
per second

00:03:42,720 --> 00:03:47,040
to keep up with our viewers so enter our

00:03:45,360 --> 00:03:50,879
cdn

00:03:47,040 --> 00:03:54,080
we operate a network of origin shield

00:03:50,879 --> 00:03:55,120
varnish caches and load balancers these

00:03:54,080 --> 00:03:56,879
help to scale up

00:03:55,120 --> 00:03:59,680
and protect the origin from periods of

00:03:56,879 --> 00:04:01,920
high traffic the final delivery

00:03:59,680 --> 00:04:04,000
to our viewers still today occurs

00:04:01,920 --> 00:04:07,120
through commercial cdns

00:04:04,000 --> 00:04:07,760
and open caching those and this entire

00:04:07,120 --> 00:04:10,239
system

00:04:07,760 --> 00:04:11,920
is controlled by a custom control plane

00:04:10,239 --> 00:04:15,599
uh with the origin shields

00:04:11,920 --> 00:04:18,959
we started very organically uh just some

00:04:15,599 --> 00:04:20,880
ansible scripts to generate

00:04:18,959 --> 00:04:23,040
the vcl files you'll see in a second and

00:04:20,880 --> 00:04:26,080
the load balancers configs

00:04:23,040 --> 00:04:27,759
as we built out a more full featured

00:04:26,080 --> 00:04:30,800
robust feature set

00:04:27,759 --> 00:04:32,400
we moved over to a java web app based on

00:04:30,800 --> 00:04:33,919
the experiences

00:04:32,400 --> 00:04:36,800
of our team and the skills that they

00:04:33,919 --> 00:04:36,800
felt comfortable with

00:04:39,199 --> 00:04:45,360
so this is what our origin shield tier

00:04:42,479 --> 00:04:46,960
looks like today we have multiple

00:04:45,360 --> 00:04:50,639
clusters of caches

00:04:46,960 --> 00:04:53,600
serving different geographic regions

00:04:50,639 --> 00:04:55,280
each region has multiple caches and

00:04:53,600 --> 00:04:57,919
multiple load balancers

00:04:55,280 --> 00:04:59,360
so there's no single point of failure

00:04:57,919 --> 00:05:01,280
the load balancers

00:04:59,360 --> 00:05:02,479
are responsible for health checking the

00:05:01,280 --> 00:05:05,120
caches and

00:05:02,479 --> 00:05:06,000
hashing requests based on url across

00:05:05,120 --> 00:05:07,680
them

00:05:06,000 --> 00:05:10,080
the cache is responsible for serving

00:05:07,680 --> 00:05:12,160
those requests and fetching this is from

00:05:10,080 --> 00:05:14,639
the origin

00:05:12,160 --> 00:05:16,560
now the clients of these systems are

00:05:14,639 --> 00:05:19,199
commercial cdns

00:05:16,560 --> 00:05:19,840
so it's the cdn's job here to localize

00:05:19,199 --> 00:05:20,880
clients

00:05:19,840 --> 00:05:23,120
figure out where the clients are

00:05:20,880 --> 00:05:25,759
geographically or in the network

00:05:23,120 --> 00:05:27,840
and then choose the best edge node but

00:05:25,759 --> 00:05:31,280
also the best origin shield

00:05:27,840 --> 00:05:34,800
cluster to use for a particular request

00:05:31,280 --> 00:05:37,120
so for example a viewer in paris

00:05:34,800 --> 00:05:38,560
would trigger a fetch from a european

00:05:37,120 --> 00:05:40,560
origin shield cluster

00:05:38,560 --> 00:05:42,639
while a viewer in the us would fetch

00:05:40,560 --> 00:05:45,120
from a north american shield origin

00:05:42,639 --> 00:05:47,440
region and we do have multiple regions

00:05:45,120 --> 00:05:53,120
within each continent

00:05:47,440 --> 00:05:56,639
for better locality

00:05:53,120 --> 00:05:59,440
diving a bit into varnish now

00:05:56,639 --> 00:06:00,639
varnish is a highly configurable reverse

00:05:59,440 --> 00:06:03,280
proxy

00:06:00,639 --> 00:06:04,560
it is also open source not under the

00:06:03,280 --> 00:06:07,039
apache license

00:06:04,560 --> 00:06:09,759
but under the bsd license so it's very

00:06:07,039 --> 00:06:12,080
modifiable

00:06:09,759 --> 00:06:12,960
varnish can do everything that traffic

00:06:12,080 --> 00:06:15,199
server can

00:06:12,960 --> 00:06:16,400
but in my opinion is a little bit easier

00:06:15,199 --> 00:06:18,960
to configure

00:06:16,400 --> 00:06:21,039
you don't need to use plug-ins to do

00:06:18,960 --> 00:06:23,520
many of the things

00:06:21,039 --> 00:06:25,280
varnish is configurable through what is

00:06:23,520 --> 00:06:28,160
called varnish config language

00:06:25,280 --> 00:06:30,800
or vcl and this gives you an incredible

00:06:28,160 --> 00:06:32,479
level of control over request processing

00:06:30,800 --> 00:06:34,639
uh much like the the header rewrites

00:06:32,479 --> 00:06:37,440
language but on steroids

00:06:34,639 --> 00:06:39,360
so it lets you do remapping rewrites of

00:06:37,440 --> 00:06:40,960
course

00:06:39,360 --> 00:06:42,479
changing the details of object custom

00:06:40,960 --> 00:06:44,160
logging

00:06:42,479 --> 00:06:45,919
but it also lets you control the flow of

00:06:44,160 --> 00:06:47,440
the request through the cache

00:06:45,919 --> 00:06:48,960
so you might want to turn a cache hit

00:06:47,440 --> 00:06:51,440
into a cache miss

00:06:48,960 --> 00:06:53,039
um or you know based on a certain header

00:06:51,440 --> 00:06:53,759
skip over the fetch to the back end and

00:06:53,039 --> 00:06:57,520
you can do

00:06:53,759 --> 00:06:59,520
all of these things with vcl

00:06:57,520 --> 00:07:00,880
there are some advantages to traffic

00:06:59,520 --> 00:07:04,319
server though um

00:07:00,880 --> 00:07:05,360
like tls support native and http 3

00:07:04,319 --> 00:07:07,520
support

00:07:05,360 --> 00:07:09,440
varnish doesn't have either of those yet

00:07:07,520 --> 00:07:11,280
and in fact if you want to use tls

00:07:09,440 --> 00:07:13,520
with varnish you need to bring in a

00:07:11,280 --> 00:07:17,360
separate tls terminating proxy

00:07:13,520 --> 00:07:21,120
like hitch or aha proxy

00:07:17,360 --> 00:07:22,800
so this is a graph of the different vcl

00:07:21,120 --> 00:07:24,880
subroutines a subroutine

00:07:22,800 --> 00:07:26,479
is basically a chunk of code that's run

00:07:24,880 --> 00:07:29,039
during a different part of the request

00:07:26,479 --> 00:07:31,360
processing and servicing

00:07:29,039 --> 00:07:32,639
each subroutine has different objects

00:07:31,360 --> 00:07:35,520
available in it

00:07:32,639 --> 00:07:36,400
so for example the vcl receive function

00:07:35,520 --> 00:07:38,479
at the top

00:07:36,400 --> 00:07:40,400
has the request object in it which

00:07:38,479 --> 00:07:43,840
contains client ip

00:07:40,400 --> 00:07:46,800
the http request

00:07:43,840 --> 00:07:48,160
the request headers and the url a few

00:07:46,800 --> 00:07:50,879
other things

00:07:48,160 --> 00:07:52,479
in contrast vcl deliver which is the

00:07:50,879 --> 00:07:54,639
last thing that happens

00:07:52,479 --> 00:07:56,160
you have many more objects available

00:07:54,639 --> 00:07:57,840
there you have the request

00:07:56,160 --> 00:07:59,919
but you also have the object and its

00:07:57,840 --> 00:08:01,680
metadata that's about to be delivered

00:07:59,919 --> 00:08:04,000
and you have the response object which

00:08:01,680 --> 00:08:07,599
contains status code

00:08:04,000 --> 00:08:10,400
um response headers and so on

00:08:07,599 --> 00:08:12,160
so starting at the top following the

00:08:10,400 --> 00:08:14,720
life of a request

00:08:12,160 --> 00:08:17,360
vcl receive is the entry point for all

00:08:14,720 --> 00:08:19,440
requests coming into the cache

00:08:17,360 --> 00:08:21,039
typically there's some examination of

00:08:19,440 --> 00:08:23,199
the host header

00:08:21,039 --> 00:08:24,639
maybe the url path or request headers

00:08:23,199 --> 00:08:26,879
here

00:08:24,639 --> 00:08:28,160
from there the processing moves on to

00:08:26,879 --> 00:08:30,960
vcl hash

00:08:28,160 --> 00:08:32,880
where we create a cache key varnish has

00:08:30,960 --> 00:08:34,399
a pretty same default for this but if

00:08:32,880 --> 00:08:35,599
you wanted to customize it

00:08:34,399 --> 00:08:37,839
maybe you want to add something from a

00:08:35,599 --> 00:08:39,519
request header or a fixed string or

00:08:37,839 --> 00:08:43,039
something else into the cache key

00:08:39,519 --> 00:08:44,959
you can do it here following that is a

00:08:43,039 --> 00:08:47,680
look up into the cache to see if the

00:08:44,959 --> 00:08:50,480
object already exists

00:08:47,680 --> 00:08:51,600
if so you come over to vcl hit and then

00:08:50,480 --> 00:08:54,560
deliver

00:08:51,600 --> 00:08:56,399
but more interesting case where there's

00:08:54,560 --> 00:08:57,040
no object in the cache mastering that

00:08:56,399 --> 00:08:59,839
key

00:08:57,040 --> 00:09:01,760
you come over into vcl miss and then you

00:08:59,839 --> 00:09:02,800
perform a fetch to the back end or the

00:09:01,760 --> 00:09:04,560
origin

00:09:02,800 --> 00:09:05,839
you have two separate subroutines here

00:09:04,560 --> 00:09:08,480
to both prepare

00:09:05,839 --> 00:09:10,160
the back end request in fetch so setting

00:09:08,480 --> 00:09:12,320
things like

00:09:10,160 --> 00:09:13,200
outgoing request headers to the back end

00:09:12,320 --> 00:09:15,200
and then

00:09:13,200 --> 00:09:16,480
processing the back end response you

00:09:15,200 --> 00:09:18,480
might want to do something here like

00:09:16,480 --> 00:09:20,720
modifying the object metadata

00:09:18,480 --> 00:09:22,720
if you want to change the ttl how long

00:09:20,720 --> 00:09:26,080
it's stored in the cache for here

00:09:22,720 --> 00:09:26,080
you would do that in this function

00:09:26,160 --> 00:09:30,080
one other aspect is vcl synth and we'll

00:09:29,120 --> 00:09:32,240
see how this is used

00:09:30,080 --> 00:09:33,120
a little bit later but synth basically

00:09:32,240 --> 00:09:36,560
lets you create

00:09:33,120 --> 00:09:39,600
a synthetic response either containing

00:09:36,560 --> 00:09:40,720
an http status and reason line of your

00:09:39,600 --> 00:09:42,800
choice

00:09:40,720 --> 00:09:45,600
or even we'll use it to create a custom

00:09:42,800 --> 00:09:45,600
response body

00:09:49,440 --> 00:09:54,560
so these are some of the components of

00:09:52,000 --> 00:09:56,720
cdn request processing or jobs that

00:09:54,560 --> 00:09:58,880
every cdn has to do in order to

00:09:56,720 --> 00:09:59,680
differentiate it from a naive simple

00:09:58,880 --> 00:10:01,920
cache

00:09:59,680 --> 00:10:03,040
um we'll take a look at how to build the

00:10:01,920 --> 00:10:06,320
first few of these

00:10:03,040 --> 00:10:07,600
in vcl but things like delivery service

00:10:06,320 --> 00:10:10,399
isolation

00:10:07,600 --> 00:10:12,320
request scrubbing and back-end selection

00:10:10,399 --> 00:10:16,399
are all things that you can do

00:10:12,320 --> 00:10:18,880
in vcl the first one of those

00:10:16,399 --> 00:10:19,680
is delivery service isolation and this

00:10:18,880 --> 00:10:21,920
is a way

00:10:19,680 --> 00:10:23,680
to separate the configuration of

00:10:21,920 --> 00:10:25,920
different delivery services

00:10:23,680 --> 00:10:27,200
say a live sports service and a movies

00:10:25,920 --> 00:10:30,399
on demand service

00:10:27,200 --> 00:10:32,959
within the same cache varnish does this

00:10:30,399 --> 00:10:34,240
using labels which are separate bundles

00:10:32,959 --> 00:10:36,880
of vcl

00:10:34,240 --> 00:10:38,720
that specify different behaviors so for

00:10:36,880 --> 00:10:41,519
example you could have one label

00:10:38,720 --> 00:10:43,040
for the sports another label for the

00:10:41,519 --> 00:10:46,160
movies

00:10:43,040 --> 00:10:48,480
these labels can be loaded and unloaded

00:10:46,160 --> 00:10:50,399
independently so it's a really nice way

00:10:48,480 --> 00:10:51,760
to be able to change the settings on on

00:10:50,399 --> 00:10:55,760
one delivery service without

00:10:51,760 --> 00:10:58,079
impacting anything else on that cache

00:10:55,760 --> 00:10:59,120
you can see in this example that we

00:10:58,079 --> 00:11:02,880
evaluate the label

00:10:59,120 --> 00:11:03,279
in vcl receive basically we perform a

00:11:02,880 --> 00:11:05,600
check

00:11:03,279 --> 00:11:07,200
on the host header to see if it matches

00:11:05,600 --> 00:11:10,560
one of the host names we're

00:11:07,200 --> 00:11:13,600
expecting live sports and if so

00:11:10,560 --> 00:11:15,519
will activate the live ds label

00:11:13,600 --> 00:11:17,920
otherwise if it's the movie's hostname

00:11:15,519 --> 00:11:19,519
we'll activate the vod.ds label

00:11:17,920 --> 00:11:21,519
if neither of those match we can return

00:11:19,519 --> 00:11:23,920
a 503 error basically saying we don't

00:11:21,519 --> 00:11:26,480
know how to handle the request

00:11:23,920 --> 00:11:27,279
once the label is activated by returning

00:11:26,480 --> 00:11:30,640
live ds

00:11:27,279 --> 00:11:31,760
or movie or vod then varnish restarts

00:11:30,640 --> 00:11:34,320
processing

00:11:31,760 --> 00:11:36,800
of the request from within the label

00:11:34,320 --> 00:11:40,000
using vcl receive a second time

00:11:36,800 --> 00:11:42,079
in the new bundle of config

00:11:40,000 --> 00:11:44,000
now this is great for configuration but

00:11:42,079 --> 00:11:45,680
it doesn't provide isolation within the

00:11:44,000 --> 00:11:46,880
storage you know if you wanted one part

00:11:45,680 --> 00:11:49,600
of your cache

00:11:46,880 --> 00:11:51,440
um to store delivery service a another

00:11:49,600 --> 00:11:53,600
part to store delivery service b

00:11:51,440 --> 00:11:54,639
with no interaction between the two that

00:11:53,600 --> 00:11:55,279
would be something that you would need

00:11:54,639 --> 00:11:57,680
to tackle

00:11:55,279 --> 00:11:58,800
through the cache key as it's set in the

00:11:57,680 --> 00:12:01,360
vcl hash

00:11:58,800 --> 00:12:01,360
subroutine

00:12:03,760 --> 00:12:08,079
request normalization is another task

00:12:05,839 --> 00:12:11,360
that all cdns have to do

00:12:08,079 --> 00:12:13,920
in this example we are using vcl

00:12:11,360 --> 00:12:15,760
to strip certain request headers or

00:12:13,920 --> 00:12:17,040
unset the authorization header

00:12:15,760 --> 00:12:20,079
we don't want that to be passed to our

00:12:17,040 --> 00:12:22,560
origin we are restricting

00:12:20,079 --> 00:12:24,160
the http methods that we're allowing to

00:12:22,560 --> 00:12:25,680
only a get method

00:12:24,160 --> 00:12:27,440
if it's something else like a put or a

00:12:25,680 --> 00:12:28,639
post again we don't want that going back

00:12:27,440 --> 00:12:31,200
to our origin

00:12:28,639 --> 00:12:33,680
so we return a 405 error code for method

00:12:31,200 --> 00:12:36,800
not allowed

00:12:33,680 --> 00:12:38,480
we're using vcl here in a regular

00:12:36,800 --> 00:12:41,120
expression search and replace

00:12:38,480 --> 00:12:42,639
called regular expression substitution

00:12:41,120 --> 00:12:46,320
or reg sub

00:12:42,639 --> 00:12:49,279
we're taking the url modifying

00:12:46,320 --> 00:12:50,720
searching for anything after the

00:12:49,279 --> 00:12:52,880
question mark which is basically the

00:12:50,720 --> 00:12:53,519
query string and replacing that with a

00:12:52,880 --> 00:12:55,120
blank

00:12:53,519 --> 00:12:57,440
so this lets you strip out the query

00:12:55,120 --> 00:13:01,200
string both in the cache

00:12:57,440 --> 00:13:03,200
and as requests going to the back end

00:13:01,200 --> 00:13:05,760
and then finally in this normalization

00:13:03,200 --> 00:13:09,040
step we're further modifying the url

00:13:05,760 --> 00:13:09,839
to add a prefix using another reg sub

00:13:09,040 --> 00:13:13,600
operation

00:13:09,839 --> 00:13:13,600
to the beginning of the path

00:13:16,720 --> 00:13:21,279
a backend selection is is one of my kind

00:13:19,519 --> 00:13:23,279
of favorite operations because it really

00:13:21,279 --> 00:13:27,120
shows the power of what you can do

00:13:23,279 --> 00:13:29,600
in vcl now in varnish terminology a

00:13:27,120 --> 00:13:31,920
backend is either an origin server

00:13:29,600 --> 00:13:34,639
or another cache that varnish goes to to

00:13:31,920 --> 00:13:35,839
fetch the content from you can define

00:13:34,639 --> 00:13:37,519
your backends

00:13:35,839 --> 00:13:40,320
in the vcl here we have one called

00:13:37,519 --> 00:13:43,279
parent one with this ip address

00:13:40,320 --> 00:13:44,480
parent two with this other ip address

00:13:43,279 --> 00:13:46,320
once they're defined

00:13:44,480 --> 00:13:48,480
varnish will start doing a background

00:13:46,320 --> 00:13:49,760
probing or health checking

00:13:48,480 --> 00:13:51,600
to check on the health of the back end

00:13:49,760 --> 00:13:54,000
to make sure they're up

00:13:51,600 --> 00:13:55,600
and it's got some functionality to say

00:13:54,000 --> 00:13:56,079
uh you know if the probe fails three

00:13:55,600 --> 00:13:58,240
times

00:13:56,079 --> 00:13:59,680
then mark it unhealthy it just won't

00:13:58,240 --> 00:14:01,279
failure and it won't set it off

00:13:59,680 --> 00:14:02,800
and there's lots of ways and lots of

00:14:01,279 --> 00:14:04,000
other customizations you can make on the

00:14:02,800 --> 00:14:05,519
back end

00:14:04,000 --> 00:14:09,040
and the probes that aren't shown here

00:14:05,519 --> 00:14:09,040
this is just a simple example

00:14:09,360 --> 00:14:12,639
then we define what varnish calls a

00:14:12,000 --> 00:14:15,360
director

00:14:12,639 --> 00:14:17,920
and a director is basically a type of

00:14:15,360 --> 00:14:20,639
policy on how to choose the back end

00:14:17,920 --> 00:14:22,720
this happens in the vcl init subroutine

00:14:20,639 --> 00:14:25,360
which is a special subroutine not called

00:14:22,720 --> 00:14:27,519
per request just called once when you

00:14:25,360 --> 00:14:29,680
load the vcl

00:14:27,519 --> 00:14:31,279
inside of the subroutine we're creating

00:14:29,680 --> 00:14:32,800
a director

00:14:31,279 --> 00:14:34,399
here we're using the random director

00:14:32,800 --> 00:14:36,480
which is basically a random weight to

00:14:34,399 --> 00:14:39,440
choose between the different back ends

00:14:36,480 --> 00:14:40,880
with a 10 weight on the first back end

00:14:39,440 --> 00:14:42,639
and a 90 percent weight

00:14:40,880 --> 00:14:45,920
on the second back end so this one would

00:14:42,639 --> 00:14:47,199
be seeing the bulk of the requests

00:14:45,920 --> 00:14:49,040
there's lots of different back-ends

00:14:47,199 --> 00:14:51,360
available in varnish

00:14:49,040 --> 00:14:52,480
this is just a random one here there's

00:14:51,360 --> 00:14:55,199
also

00:14:52,480 --> 00:14:56,320
hash and shard directors which use the

00:14:55,199 --> 00:14:58,560
request url

00:14:56,320 --> 00:14:59,680
in order to choose which back end should

00:14:58,560 --> 00:15:01,760
be used uh

00:14:59,680 --> 00:15:03,600
shard is a consistent hash and that

00:15:01,760 --> 00:15:05,519
hashes to plain hash

00:15:03,600 --> 00:15:07,040
and there's also a fallback director

00:15:05,519 --> 00:15:08,800
which does a primary and backup

00:15:07,040 --> 00:15:12,079
selection based on the the health of the

00:15:08,800 --> 00:15:15,600
back end as seen by the probes

00:15:12,079 --> 00:15:16,720
so once this request comes in in vcl

00:15:15,600 --> 00:15:20,000
receive

00:15:16,720 --> 00:15:22,160
all we do is simply ask the director for

00:15:20,000 --> 00:15:24,000
a back-end to use ten percent of the

00:15:22,160 --> 00:15:25,040
time this will choose parent one

00:15:24,000 --> 00:15:27,440
ninety percent of the times they'll

00:15:25,040 --> 00:15:29,120
choose parent two and

00:15:27,440 --> 00:15:30,959
we give that to varnish using the

00:15:29,120 --> 00:15:32,560
special variable back end hint

00:15:30,959 --> 00:15:34,959
and this actually determines which back

00:15:32,560 --> 00:15:37,040
end that varnish is going to use

00:15:34,959 --> 00:15:38,240
uh finally we have a really simple host

00:15:37,040 --> 00:15:40,480
header remap

00:15:38,240 --> 00:15:42,160
in the back end request to change the

00:15:40,480 --> 00:15:45,759
origin host

00:15:42,160 --> 00:15:45,759
to something the origin is expecting

00:15:49,440 --> 00:15:52,880
now let's talk a little bit about how we

00:15:51,519 --> 00:15:56,160
integrated varnish

00:15:52,880 --> 00:15:56,160
with apache traffic control

00:15:58,880 --> 00:16:04,959
right now we're in the prototype stage

00:16:01,759 --> 00:16:06,800
looking at adding varnish and atc

00:16:04,959 --> 00:16:09,120
as a component of our overall edge

00:16:06,800 --> 00:16:10,800
delivery strategy

00:16:09,120 --> 00:16:13,199
and this is an existing of our an

00:16:10,800 --> 00:16:15,040
extension of our existing origin shield

00:16:13,199 --> 00:16:16,800
infrastructure that we talked about a

00:16:15,040 --> 00:16:20,079
little bit earlier with

00:16:16,800 --> 00:16:23,199
the load balancers and the caches

00:16:20,079 --> 00:16:25,759
in this prototype varnish is monitored

00:16:23,199 --> 00:16:26,880
for health by traffic monitor just the

00:16:25,759 --> 00:16:28,800
same way tm

00:16:26,880 --> 00:16:31,680
would monitor an apache traffic server

00:16:28,800 --> 00:16:34,399
cache or a growth cache

00:16:31,680 --> 00:16:36,079
uh similarly now instead of viewers

00:16:34,399 --> 00:16:39,199
coming in through the cdn

00:16:36,079 --> 00:16:42,480
viewers are instead localized

00:16:39,199 --> 00:16:43,279
by traffic router using coverage zone

00:16:42,480 --> 00:16:45,759
file

00:16:43,279 --> 00:16:48,240
go ip whatever it might be and

00:16:45,759 --> 00:16:50,560
redirected to our new tier

00:16:48,240 --> 00:16:52,959
of varnish caches this bottom blue one

00:16:50,560 --> 00:16:55,759
on the left

00:16:52,959 --> 00:16:57,680
just like everything else along the left

00:16:55,759 --> 00:16:59,759
this new tier of varnish caches

00:16:57,680 --> 00:17:01,839
will fetch from our origin shield as it

00:16:59,759 --> 00:17:04,079
does today

00:17:01,839 --> 00:17:05,120
but notice that there's no load balancer

00:17:04,079 --> 00:17:06,799
here

00:17:05,120 --> 00:17:08,959
we've taken this opportunity to to

00:17:06,799 --> 00:17:10,480
change the architecture a little bit

00:17:08,959 --> 00:17:12,079
and find a way to replace our

00:17:10,480 --> 00:17:13,520
traditional load balancer

00:17:12,079 --> 00:17:15,360
that has been doing the consistent

00:17:13,520 --> 00:17:17,679
hashing among the cluster

00:17:15,360 --> 00:17:18,480
with uh consistent hashing occurring

00:17:17,679 --> 00:17:21,919
entirely

00:17:18,480 --> 00:17:21,919
within a varnish cluster

00:17:23,120 --> 00:17:27,439
so this uses a varnish consistent

00:17:26,799 --> 00:17:29,280
hashing

00:17:27,439 --> 00:17:31,600
the shard back end we were talking about

00:17:29,280 --> 00:17:34,480
before and it breaks

00:17:31,600 --> 00:17:35,520
the varnish caches into two types and

00:17:34,480 --> 00:17:38,559
the type can vary

00:17:35,520 --> 00:17:41,919
based on request an edge

00:17:38,559 --> 00:17:44,880
and a shield and shield host

00:17:41,919 --> 00:17:45,440
is the host responsible for caching

00:17:44,880 --> 00:17:48,160
content

00:17:45,440 --> 00:17:48,640
and fetching from origin where the edge

00:17:48,160 --> 00:17:50,960
host

00:17:48,640 --> 00:17:53,679
handles the request from the client

00:17:50,960 --> 00:17:57,600
performs a consistent hash on the url

00:17:53,679 --> 00:17:59,840
and then chooses the shield so

00:17:57,600 --> 00:18:01,440
as an example we could see a client

00:17:59,840 --> 00:18:03,440
request coming in

00:18:01,440 --> 00:18:05,919
from the client to varnish three this

00:18:03,440 --> 00:18:09,120
makes varnish through the edge

00:18:05,919 --> 00:18:11,919
then varnish host then varnish three

00:18:09,120 --> 00:18:13,120
looks at the url hashes it and chooses

00:18:11,919 --> 00:18:16,240
the shield box

00:18:13,120 --> 00:18:18,559
in this case that's varnish 2.

00:18:16,240 --> 00:18:19,280
here varnish 2 holds the cache for that

00:18:18,559 --> 00:18:20,559
object

00:18:19,280 --> 00:18:23,120
and it might need to go fetch it from

00:18:20,559 --> 00:18:24,640
the origin if it's not already in cache

00:18:23,120 --> 00:18:27,600
then the response comes back from

00:18:24,640 --> 00:18:30,960
varnish 2 proxy through varnish 3

00:18:27,600 --> 00:18:33,200
and back to the client looking at this

00:18:30,960 --> 00:18:34,240
for a separate request varnish 2 could

00:18:33,200 --> 00:18:36,320
also play the role

00:18:34,240 --> 00:18:38,240
of an edge box if that's where the

00:18:36,320 --> 00:18:40,240
client request comes into

00:18:38,240 --> 00:18:41,280
here varnish 1 is the shield but it

00:18:40,240 --> 00:18:44,400
could be any box

00:18:41,280 --> 00:18:46,559
um you can even have a box be both the

00:18:44,400 --> 00:18:48,400
edge and the shield for a given request

00:18:46,559 --> 00:18:50,480
if that's how the consistent hashing

00:18:48,400 --> 00:18:52,480
works it out

00:18:50,480 --> 00:18:53,760
so what this allows us to do is take

00:18:52,480 --> 00:18:56,000
away an entire

00:18:53,760 --> 00:18:57,679
set of components from our architecture

00:18:56,000 --> 00:18:59,280
it's much simplified we don't have a

00:18:57,679 --> 00:19:02,400
separate set of load balancers

00:18:59,280 --> 00:19:04,720
to manage now and everything can be done

00:19:02,400 --> 00:19:05,840
internally within the same set of

00:19:04,720 --> 00:19:10,960
varnish caches

00:19:05,840 --> 00:19:11,840
so this is very neat a next step of our

00:19:10,960 --> 00:19:14,080
integration

00:19:11,840 --> 00:19:16,480
was generating configs for traffic

00:19:14,080 --> 00:19:16,480
control

00:19:17,840 --> 00:19:21,200
the first step to do this was

00:19:19,440 --> 00:19:23,280
implementing the traffic control

00:19:21,200 --> 00:19:25,440
authentication flow

00:19:23,280 --> 00:19:26,400
basically traffic router and traffic

00:19:25,440 --> 00:19:28,880
monitor

00:19:26,400 --> 00:19:31,679
both use mojolicious cookies or cookies

00:19:28,880 --> 00:19:34,799
to authenticate with traffic ops

00:19:31,679 --> 00:19:35,440
we mimic those same apis in our java web

00:19:34,799 --> 00:19:37,440
app

00:19:35,440 --> 00:19:38,559
so that both traffic monitor and traffic

00:19:37,440 --> 00:19:42,559
router can now

00:19:38,559 --> 00:19:44,160
obtain config files and access the apis

00:19:42,559 --> 00:19:46,400
as needed to get their config

00:19:44,160 --> 00:19:48,960
information

00:19:46,400 --> 00:19:50,480
we did have a small bug when doing this

00:19:48,960 --> 00:19:52,400
in traffic router

00:19:50,480 --> 00:19:53,600
we noticed that traffic router in its

00:19:52,400 --> 00:19:56,320
request flow

00:19:53,600 --> 00:19:56,720
was not setting the proper content type

00:19:56,320 --> 00:19:58,320
uh

00:19:56,720 --> 00:20:00,880
in the login request it was setting it

00:19:58,320 --> 00:20:03,520
to url form encoded

00:20:00,880 --> 00:20:05,440
while this is fine for for the go and

00:20:03,520 --> 00:20:07,280
pearl traffic offices

00:20:05,440 --> 00:20:09,200
we're using java spring and we just

00:20:07,280 --> 00:20:10,080
weren't able to to work around that in

00:20:09,200 --> 00:20:12,880
any way

00:20:10,080 --> 00:20:14,640
so we've now fixed it in master so that

00:20:12,880 --> 00:20:15,919
traffic router can actually set the

00:20:14,640 --> 00:20:19,039
right content type on it

00:20:15,919 --> 00:20:21,679
on its json requests

00:20:19,039 --> 00:20:22,559
we'd have to implement a few other apis

00:20:21,679 --> 00:20:25,440
for example

00:20:22,559 --> 00:20:26,799
traffic monitor uses the api servers the

00:20:25,440 --> 00:20:28,960
server get api

00:20:26,799 --> 00:20:29,919
in order to get a list of servers so

00:20:28,960 --> 00:20:32,320
that's implemented

00:20:29,919 --> 00:20:34,960
and mimicking the exact same format in

00:20:32,320 --> 00:20:36,880
our control plane as well

00:20:34,960 --> 00:20:38,400
we're hosting the static files from our

00:20:36,880 --> 00:20:39,039
control plane like the coverage zone

00:20:38,400 --> 00:20:41,679
file

00:20:39,039 --> 00:20:42,960
and the max mine database and of course

00:20:41,679 --> 00:20:44,640
we had to generate

00:20:42,960 --> 00:20:46,720
the you know the main configuration

00:20:44,640 --> 00:20:51,280
files uh cr config

00:20:46,720 --> 00:20:51,280
monitoring json and ssl keys

00:20:51,360 --> 00:20:56,400
as part of our vcl generation in the

00:20:54,320 --> 00:20:58,480
control plane which is pre-existing

00:20:56,400 --> 00:20:59,679
we're using apache free marker templates

00:20:58,480 --> 00:21:01,280
i'll show you a bit more on the next

00:20:59,679 --> 00:21:03,200
slide about how this works in order to

00:21:01,280 --> 00:21:04,640
generate the files

00:21:03,200 --> 00:21:06,480
and we felt like it was a really

00:21:04,640 --> 00:21:06,880
consistent way to continue to do this

00:21:06,480 --> 00:21:10,000
and it

00:21:06,880 --> 00:21:13,440
expanded for the traffic control files

00:21:10,000 --> 00:21:16,000
so let's talk a little bit about that

00:21:13,440 --> 00:21:16,960
in order to generate the config files we

00:21:16,000 --> 00:21:20,080
have it split up

00:21:16,960 --> 00:21:22,000
into a database of templates and

00:21:20,080 --> 00:21:25,840
databases of actual configuration

00:21:22,000 --> 00:21:28,240
variables we're using another apache

00:21:25,840 --> 00:21:31,039
project of course apache free marker

00:21:28,240 --> 00:21:32,559
to render these templates into the

00:21:31,039 --> 00:21:34,799
config files

00:21:32,559 --> 00:21:35,679
free marker combines the variables from

00:21:34,799 --> 00:21:37,520
the database

00:21:35,679 --> 00:21:38,960
which is in you know whatever database

00:21:37,520 --> 00:21:41,600
schema

00:21:38,960 --> 00:21:43,440
java plain old java object object

00:21:41,600 --> 00:21:44,799
hierarchy

00:21:43,440 --> 00:21:46,720
and kind of mashing them into the

00:21:44,799 --> 00:21:47,760
templates in order to create the files

00:21:46,720 --> 00:21:50,880
that traffic router

00:21:47,760 --> 00:21:50,880
and traffic monitor need

00:21:52,960 --> 00:22:00,880
here is an example of one of our

00:21:57,200 --> 00:22:01,440
cr config templates this is getting a

00:22:00,880 --> 00:22:03,600
little bit

00:22:01,440 --> 00:22:04,960
into the guts of traffic router but i'm

00:22:03,600 --> 00:22:06,640
hoping that most people should be

00:22:04,960 --> 00:22:08,799
somewhat familiar with this

00:22:06,640 --> 00:22:10,480
by looking at the snapshot diffs on on

00:22:08,799 --> 00:22:12,159
traffic portal

00:22:10,480 --> 00:22:14,080
the templates are kind of dense so

00:22:12,159 --> 00:22:16,640
apologies in advance

00:22:14,080 --> 00:22:18,000
um we can see here the delivery services

00:22:16,640 --> 00:22:21,600
section

00:22:18,000 --> 00:22:23,280
within which we are iterating a list

00:22:21,600 --> 00:22:26,080
iterating over a list of of all the

00:22:23,280 --> 00:22:28,400
delivery services in the system

00:22:26,080 --> 00:22:29,840
we're able to access some variables in

00:22:28,400 --> 00:22:32,080
the delivery service

00:22:29,840 --> 00:22:33,520
such as the id and whether we have a

00:22:32,080 --> 00:22:36,480
particular feature like anonymous

00:22:33,520 --> 00:22:38,159
blocking turned on

00:22:36,480 --> 00:22:39,600
the template language also gives us a

00:22:38,159 --> 00:22:42,400
bunch of flexibility

00:22:39,600 --> 00:22:44,400
in when to include or or exclude certain

00:22:42,400 --> 00:22:46,880
blocks from the json

00:22:44,400 --> 00:22:48,720
so you can see here we are

00:22:46,880 --> 00:22:50,640
conditionalizing the presence of this

00:22:48,720 --> 00:22:53,039
bypass destination block

00:22:50,640 --> 00:22:55,440
on whether or not that variable exists

00:22:53,039 --> 00:22:57,280
as it's coming from the control plane

00:22:55,440 --> 00:22:59,919
and this is a really great way for us to

00:22:57,280 --> 00:23:03,280
implement feature flippers

00:22:59,919 --> 00:23:05,039
we can modify the template separately

00:23:03,280 --> 00:23:06,799
from deploying code changes to the

00:23:05,039 --> 00:23:07,520
control plane so we can implement the

00:23:06,799 --> 00:23:09,280
change

00:23:07,520 --> 00:23:11,120
uh you know to add support for this in

00:23:09,280 --> 00:23:12,559
the template first

00:23:11,120 --> 00:23:14,240
and then when the control plane adds the

00:23:12,559 --> 00:23:16,320
support either in the database

00:23:14,240 --> 00:23:18,720
uh or on the web app ui it can actually

00:23:16,320 --> 00:23:22,080
get activated separately

00:23:18,720 --> 00:23:24,240
that's come in very handy for us

00:23:22,080 --> 00:23:25,600
operationally these config files are

00:23:24,240 --> 00:23:27,840
generated very similar

00:23:25,600 --> 00:23:29,679
to the snapshot but we're starting to

00:23:27,840 --> 00:23:31,280
develop some separate control over when

00:23:29,679 --> 00:23:33,039
they're activated

00:23:31,280 --> 00:23:34,559
so just generating the file does not

00:23:33,039 --> 00:23:35,679
necessarily push it out to the config

00:23:34,559 --> 00:23:37,200
files

00:23:35,679 --> 00:23:39,520
to the traffic routers and traffic

00:23:37,200 --> 00:23:40,960
monitors it just generates it and it

00:23:39,520 --> 00:23:42,480
sits there until someone goes in and

00:23:40,960 --> 00:23:44,320
actually says okay i want to start using

00:23:42,480 --> 00:23:45,840
this change

00:23:44,320 --> 00:23:48,240
and one of the things that's on our list

00:23:45,840 --> 00:23:48,799
is to further consider how we can do a

00:23:48,240 --> 00:23:50,400
staged

00:23:48,799 --> 00:23:52,159
deployment like this or a canary

00:23:50,400 --> 00:23:54,080
deployment

00:23:52,159 --> 00:23:55,679
of changes to the cr config because it

00:23:54,080 --> 00:23:57,840
is such a large

00:23:55,679 --> 00:24:00,000
and critical file you know can we do

00:23:57,840 --> 00:24:02,960
delivery service steering

00:24:00,000 --> 00:24:04,640
to trial change on a delivery service or

00:24:02,960 --> 00:24:05,679
can we roll out a change to see our

00:24:04,640 --> 00:24:07,279
config to just

00:24:05,679 --> 00:24:08,720
some of the traffic monitors or just

00:24:07,279 --> 00:24:12,960
some of the traffic routers

00:24:08,720 --> 00:24:12,960
to reduce the risk in any changes

00:24:13,279 --> 00:24:19,600
here is another example of our cr config

00:24:16,720 --> 00:24:21,919
template for the cache or content server

00:24:19,600 --> 00:24:21,919
section

00:24:23,679 --> 00:24:27,919
here again we're listing over all of the

00:24:25,760 --> 00:24:30,559
caches in the system

00:24:27,919 --> 00:24:31,600
printing out the name cache group and so

00:24:30,559 --> 00:24:32,960
on

00:24:31,600 --> 00:24:35,760
here's one part i thought was

00:24:32,960 --> 00:24:37,279
particularly interesting

00:24:35,760 --> 00:24:39,120
for the delivery service reference

00:24:37,279 --> 00:24:40,960
section you're basically which

00:24:39,120 --> 00:24:42,400
delivery services are assigned to which

00:24:40,960 --> 00:24:45,360
caches

00:24:42,400 --> 00:24:47,360
were able to combine the list of caches

00:24:45,360 --> 00:24:49,039
and the list of delivery services or

00:24:47,360 --> 00:24:51,279
properties

00:24:49,039 --> 00:24:53,039
to create the references so you can see

00:24:51,279 --> 00:24:55,919
here we're able to

00:24:53,039 --> 00:24:57,679
build the delivery service host name

00:24:55,919 --> 00:24:59,760
based on

00:24:57,679 --> 00:25:01,360
details of the object so rather than

00:24:59,760 --> 00:25:03,600
explicitly having to create it

00:25:01,360 --> 00:25:04,960
in the control plane and then just use a

00:25:03,600 --> 00:25:06,159
template variable here

00:25:04,960 --> 00:25:09,360
we can build it a little bit more

00:25:06,159 --> 00:25:13,200
dynamically based on whether this is a

00:25:09,360 --> 00:25:15,840
dns delivery service or an http delivery

00:25:13,200 --> 00:25:15,840
service

00:25:16,000 --> 00:25:19,520
you can also see down here that we're

00:25:17,520 --> 00:25:21,919
able to

00:25:19,520 --> 00:25:22,880
traverse this object hierarchy several

00:25:21,919 --> 00:25:25,200
layers deep

00:25:22,880 --> 00:25:26,880
in order to get at different pieces of

00:25:25,200 --> 00:25:29,440
information

00:25:26,880 --> 00:25:31,279
so the template that coming the context

00:25:29,440 --> 00:25:33,200
that comes into the template

00:25:31,279 --> 00:25:35,279
has lots of different objects lots of

00:25:33,200 --> 00:25:37,039
different links between objects

00:25:35,279 --> 00:25:38,320
and it's fairly easy to get at all of

00:25:37,039 --> 00:25:40,559
the data you need

00:25:38,320 --> 00:25:43,120
all the information from the database

00:25:40,559 --> 00:25:45,279
from any point in the template

00:25:43,120 --> 00:25:47,120
this means that small changes to the

00:25:45,279 --> 00:25:49,200
file syntax or

00:25:47,120 --> 00:25:51,520
adding something new to the file don't

00:25:49,200 --> 00:25:54,240
necessarily need a change

00:25:51,520 --> 00:25:57,600
to the control plane code in our

00:25:54,240 --> 00:26:01,279
deployment of the control plane code

00:25:57,600 --> 00:26:02,799
many times a you know many times just

00:26:01,279 --> 00:26:04,159
modifying the template and just

00:26:02,799 --> 00:26:05,760
modifying the database

00:26:04,159 --> 00:26:11,120
are good enough and the the changes kind

00:26:05,760 --> 00:26:14,240
of all propagate through automatically

00:26:11,120 --> 00:26:15,919
next is a health monitoring of varnish

00:26:14,240 --> 00:26:17,679
basically how we're using traffic

00:26:15,919 --> 00:26:19,760
monitor to

00:26:17,679 --> 00:26:20,720
understand if one of our varnish caches

00:26:19,760 --> 00:26:24,320
is healthy

00:26:20,720 --> 00:26:27,600
or unhealthy just like traffic server

00:26:24,320 --> 00:26:28,159
has the a stats plug-in we needed to

00:26:27,600 --> 00:26:30,960
implement

00:26:28,159 --> 00:26:33,760
a varnish module or v-mod to provide the

00:26:30,960 --> 00:26:37,360
health information to tm

00:26:33,760 --> 00:26:40,320
as powerful as vcl is we're not able to

00:26:37,360 --> 00:26:42,240
generate an http response body from vcl

00:26:40,320 --> 00:26:43,520
so we had to write a vmod this is just

00:26:42,240 --> 00:26:45,919
um you know basically a

00:26:43,520 --> 00:26:48,480
a piece of c code a c library in order

00:26:45,919 --> 00:26:51,840
to generate a response body

00:26:48,480 --> 00:26:53,919
the v mod a stats reference

00:26:51,840 --> 00:26:54,880
references uh the existing a stats

00:26:53,919 --> 00:26:56,559
implementation as

00:26:54,880 --> 00:26:58,159
much as possible you know it uses the

00:26:56,559 --> 00:27:00,159
same files

00:26:58,159 --> 00:27:01,840
and sysfs interfaces in order to get

00:27:00,159 --> 00:27:06,559
information about

00:27:01,840 --> 00:27:08,400
the load average and interface speeds

00:27:06,559 --> 00:27:09,679
we have not added in the delivery

00:27:08,400 --> 00:27:12,080
service stats yet

00:27:09,679 --> 00:27:13,919
which are used for things like gigabits

00:27:12,080 --> 00:27:14,960
per second and transaction per second

00:27:13,919 --> 00:27:16,960
quotas

00:27:14,960 --> 00:27:18,240
but it's definitely on our list we do

00:27:16,960 --> 00:27:20,159
need to build in some additional

00:27:18,240 --> 00:27:22,320
instrumentation into varnish

00:27:20,159 --> 00:27:25,679
in order to track this information at a

00:27:22,320 --> 00:27:25,679
per delivery service level

00:27:26,960 --> 00:27:30,559
with the vmod written here's how we call

00:27:30,159 --> 00:27:36,000
it

00:27:30,559 --> 00:27:37,679
from vcl first we import the a stats

00:27:36,000 --> 00:27:39,200
module which tells varnish we're about

00:27:37,679 --> 00:27:41,679
to use it

00:27:39,200 --> 00:27:42,240
and then we create an access control

00:27:41,679 --> 00:27:45,679
list

00:27:42,240 --> 00:27:48,480
of ip addresses that are allowed to

00:27:45,679 --> 00:27:49,520
see the a stats information and this is

00:27:48,480 --> 00:27:52,000
something special

00:27:49,520 --> 00:27:52,880
that varnish provides you know for this

00:27:52,000 --> 00:27:54,240
very purpose

00:27:52,880 --> 00:27:56,720
of controlling access to certain

00:27:54,240 --> 00:27:56,720
endpoints

00:27:57,120 --> 00:28:01,200
now as the request is received we check

00:28:00,159 --> 00:28:02,960
the url

00:28:01,200 --> 00:28:04,320
to see it starts with a stats this is

00:28:02,960 --> 00:28:06,000
actually a regular expression

00:28:04,320 --> 00:28:07,360
check here make sure it starts with a

00:28:06,000 --> 00:28:10,399
stats

00:28:07,360 --> 00:28:12,080
if so we evaluate the acl

00:28:10,399 --> 00:28:14,720
making sure that client ip is one of the

00:28:12,080 --> 00:28:17,600
ones allowed in the list

00:28:14,720 --> 00:28:18,480
if it is allowed we'll set an internal

00:28:17,600 --> 00:28:20,960
request header

00:28:18,480 --> 00:28:23,679
to true saying we're in a stats mode and

00:28:20,960 --> 00:28:26,000
move to the synthetic response

00:28:23,679 --> 00:28:27,919
otherwise we jump into the synthetic

00:28:26,000 --> 00:28:29,440
response without starting the a stats

00:28:27,919 --> 00:28:31,279
without setting the a stats header

00:28:29,440 --> 00:28:33,440
and this will indicate that we're just

00:28:31,279 --> 00:28:36,240
going to send an error

00:28:33,440 --> 00:28:38,320
vcl synth is down here again we perform

00:28:36,240 --> 00:28:40,960
a check to make sure that mode is set

00:28:38,320 --> 00:28:41,600
and if so we create a synthetic response

00:28:40,960 --> 00:28:44,320
body

00:28:41,600 --> 00:28:46,480
with the output of the a stats plugin

00:28:44,320 --> 00:28:49,200
just a function called info

00:28:46,480 --> 00:28:50,559
typically we would pass in here the

00:28:49,200 --> 00:28:52,080
interface names

00:28:50,559 --> 00:28:53,760
or anything else that that comes from

00:28:52,080 --> 00:28:56,000
traffic router basically passing the

00:28:53,760 --> 00:28:58,799
query string here

00:28:56,000 --> 00:28:59,360
and once that comes back out the entire

00:28:58,799 --> 00:29:02,399
contents

00:28:59,360 --> 00:29:04,399
is delivered to the client

00:29:02,399 --> 00:29:05,440
so this is something we have working

00:29:04,399 --> 00:29:08,159
today

00:29:05,440 --> 00:29:09,679
proof that cash polling works of traffic

00:29:08,159 --> 00:29:12,960
monitor

00:29:09,679 --> 00:29:13,760
with varnish you can see our bandwidth

00:29:12,960 --> 00:29:16,480
matches

00:29:13,760 --> 00:29:18,240
our 25 gigabit per second interfaces and

00:29:16,480 --> 00:29:19,520
our load averages is accurate based on

00:29:18,240 --> 00:29:20,559
what we're seeing on the cache at the

00:29:19,520 --> 00:29:22,240
time

00:29:20,559 --> 00:29:23,600
but this is still heavily under

00:29:22,240 --> 00:29:25,039
construction and

00:29:23,600 --> 00:29:26,720
some things aren't working yet for

00:29:25,039 --> 00:29:30,000
example we haven't set up

00:29:26,720 --> 00:29:33,360
ipv6 on these caches just a prototype

00:29:30,000 --> 00:29:35,919
so we don't have tm polling that yet

00:29:33,360 --> 00:29:37,120
also these caches are using multiple

00:29:35,919 --> 00:29:39,840
interfaces sharing

00:29:37,120 --> 00:29:41,120
a single ip anycast address each cache

00:29:39,840 --> 00:29:43,760
has its own anycast

00:29:41,120 --> 00:29:45,120
so these interfaces aren't bonded this

00:29:43,760 --> 00:29:46,799
means that traffic monitor

00:29:45,120 --> 00:29:49,679
essentially needs to monitor two

00:29:46,799 --> 00:29:52,799
interfaces per host

00:29:49,679 --> 00:29:55,200
today the lib vmod astax

00:29:52,799 --> 00:29:56,720
is kind of smashing that together into a

00:29:55,200 --> 00:29:58,799
single bandwidth that's

00:29:56,720 --> 00:29:59,919
summed up but i think it could be pretty

00:29:58,799 --> 00:30:03,039
interesting

00:29:59,919 --> 00:30:04,960
for traffic monitor to note and pull

00:30:03,039 --> 00:30:06,320
somehow individual interfaces or at

00:30:04,960 --> 00:30:08,640
least be able to see the health of

00:30:06,320 --> 00:30:11,039
individual interfaces within traffic

00:30:08,640 --> 00:30:11,039
monitor

00:30:12,080 --> 00:30:17,440
one other piece of our integration was

00:30:14,640 --> 00:30:20,320
tls certificate handling

00:30:17,440 --> 00:30:21,600
we had tls keys and search that we store

00:30:20,320 --> 00:30:25,279
in the control plane

00:30:21,600 --> 00:30:26,880
and we publish the bundle to both hitch

00:30:25,279 --> 00:30:29,360
which does the tls termination in

00:30:26,880 --> 00:30:31,919
varnish as well as traffic router

00:30:29,360 --> 00:30:33,600
which sees the same key insert along

00:30:31,919 --> 00:30:35,279
with a little bit of information

00:30:33,600 --> 00:30:38,000
about the delivery service and the host

00:30:35,279 --> 00:30:39,919
name we did find a small bug

00:30:38,000 --> 00:30:41,520
in the subject alternate name wild card

00:30:39,919 --> 00:30:43,840
matching and traffic router

00:30:41,520 --> 00:30:45,520
there's a pr open right now that is

00:30:43,840 --> 00:30:48,159
currently under review

00:30:45,520 --> 00:30:49,760
in order to fix this and this wasn't too

00:30:48,159 --> 00:30:50,399
specific to the integration but more

00:30:49,760 --> 00:30:52,960
about

00:30:50,399 --> 00:30:55,760
our naming schemes and how we generate

00:30:52,960 --> 00:30:55,760
our certificates

00:30:56,399 --> 00:31:00,640
i mentioned that we use anycast on our

00:30:58,559 --> 00:31:02,000
caches we also use it on our traffic

00:31:00,640 --> 00:31:04,960
routers

00:31:02,000 --> 00:31:05,919
dns servers are often run using anycast

00:31:04,960 --> 00:31:07,760
so that the network

00:31:05,919 --> 00:31:09,440
can provide localization of client

00:31:07,760 --> 00:31:11,919
requests this puts

00:31:09,440 --> 00:31:12,799
the routers in charge of which traffic

00:31:11,919 --> 00:31:16,080
router

00:31:12,799 --> 00:31:17,279
the request goes to um so that it's much

00:31:16,080 --> 00:31:19,279
closer in the network and provides

00:31:17,279 --> 00:31:21,120
better performance

00:31:19,279 --> 00:31:22,880
in order to do this in traffic router

00:31:21,120 --> 00:31:26,720
the embedded dns server

00:31:22,880 --> 00:31:27,360
has to bind to port 53 both for tcp and

00:31:26,720 --> 00:31:29,840
udp

00:31:27,360 --> 00:31:32,640
and this is done through the dns

00:31:29,840 --> 00:31:36,320
properties and server xml file

00:31:32,640 --> 00:31:38,720
so we added a small pr to traffic

00:31:36,320 --> 00:31:41,600
control this is also in master already

00:31:38,720 --> 00:31:43,760
in order to allow you to set the um the

00:31:41,600 --> 00:31:47,440
udp and tcp hosts in these files that

00:31:43,760 --> 00:31:50,320
was not previously existing

00:31:47,440 --> 00:31:51,200
so in conclusion the integration

00:31:50,320 --> 00:31:54,559
fortunately

00:31:51,200 --> 00:31:56,320
went very smoothly between varnish and

00:31:54,559 --> 00:31:58,240
traffic control

00:31:56,320 --> 00:32:00,399
it's a prototype at this point but we're

00:31:58,240 --> 00:32:01,600
able to put traffic through it and it

00:32:00,399 --> 00:32:04,240
works very well

00:32:01,600 --> 00:32:05,760
um there's only a few small bits of area

00:32:04,240 --> 00:32:06,960
needing a little bit of polish and a few

00:32:05,760 --> 00:32:11,039
tiny bug fixes

00:32:06,960 --> 00:32:12,799
here and there needed libya mod a stats

00:32:11,039 --> 00:32:14,960
is still under development but once it's

00:32:12,799 --> 00:32:16,240
ready hopefully we can get it approved

00:32:14,960 --> 00:32:17,919
by our open source committee

00:32:16,240 --> 00:32:21,039
and add it into traffic control

00:32:17,919 --> 00:32:21,039
alongside a stats

00:32:21,200 --> 00:32:25,200
and finally we have our custom control

00:32:23,440 --> 00:32:28,240
plane so we didn't add

00:32:25,200 --> 00:32:30,559
generation of varnish config language

00:32:28,240 --> 00:32:32,480
into traffic officer traffic portal but

00:32:30,559 --> 00:32:32,960
that could be a very interesting project

00:32:32,480 --> 00:32:34,799
for

00:32:32,960 --> 00:32:36,880
an intern summer of code or someone else

00:32:34,799 --> 00:32:38,799
to take on potentially through the cache

00:32:36,880 --> 00:32:40,880
side config generation

00:32:38,799 --> 00:32:42,399
in order to generate vcls and really

00:32:40,880 --> 00:32:45,120
complete the integration

00:32:42,399 --> 00:32:47,120
of varnish as a first-class citizen in

00:32:45,120 --> 00:32:48,799
traffic control

00:32:47,120 --> 00:32:50,480
so i'd like to thank everyone for

00:32:48,799 --> 00:32:52,559
attending my presentation today

00:32:50,480 --> 00:32:57,840
and i'm glad to open up the room for for

00:32:52,559 --> 00:32:57,840
any questions at this point

00:33:04,000 --> 00:33:07,200
hey thanks eric can you hear me yep i

00:33:06,240 --> 00:33:10,080
can hear you

00:33:07,200 --> 00:33:11,440
like there was one question from rob i

00:33:10,080 --> 00:33:13,760
think you answered

00:33:11,440 --> 00:33:15,679
um did you write a traffic monitor

00:33:13,760 --> 00:33:18,000
plug-in for the varnish health stats

00:33:15,679 --> 00:33:18,880
i think you're good yeah yeah yeah so i

00:33:18,000 --> 00:33:21,120
wrote um

00:33:18,880 --> 00:33:23,840
we did write a plug-in for varnish

00:33:21,120 --> 00:33:25,039
that'll speak the traffic router format

00:33:23,840 --> 00:33:27,600
yep

00:33:25,039 --> 00:33:29,600
um okay so yeah yeah varnish we made

00:33:27,600 --> 00:33:31,679
varnish itself the a stats format

00:33:29,600 --> 00:33:33,120
yeah yeah yeah he said you answered his

00:33:31,679 --> 00:33:34,720
question okay cool

00:33:33,120 --> 00:33:36,840
all right i don't see any other

00:33:34,720 --> 00:33:40,159
questions we'll give it another minute

00:33:36,840 --> 00:33:43,519
um let's see

00:33:40,159 --> 00:33:45,760
um miles bach asked i would assume the

00:33:43,519 --> 00:33:49,039
phone is to export varnish stats

00:33:45,760 --> 00:33:49,039
it requires something custom

00:33:50,799 --> 00:33:53,919
yes so if you're talking about the

00:33:52,240 --> 00:33:57,519
traffic monitoring

00:33:53,919 --> 00:33:59,360
um traffic monitor uses uh an http

00:33:57,519 --> 00:34:00,640
interface to talk with the caches

00:33:59,360 --> 00:34:02,559
so if you wanted to get data from

00:34:00,640 --> 00:34:04,320
varnish stats which is uh you know

00:34:02,559 --> 00:34:06,880
access to the varnish counters

00:34:04,320 --> 00:34:10,399
um then we need uh something custom in

00:34:06,880 --> 00:34:10,399
order to talk with traffic monitor there

00:34:12,639 --> 00:34:17,040
yeah oh my gosh all right now they're

00:34:15,679 --> 00:34:19,520
coming in

00:34:17,040 --> 00:34:21,679
um here we go near asks how many layers

00:34:19,520 --> 00:34:24,800
do you hold do you

00:34:21,679 --> 00:34:27,679
you also use varnish as a mid layer okay

00:34:24,800 --> 00:34:28,639
yes so um we have a really flexible

00:34:27,679 --> 00:34:31,200
topology

00:34:28,639 --> 00:34:32,000
uh varnish for the last few years has

00:34:31,200 --> 00:34:34,320
been our

00:34:32,000 --> 00:34:36,720
origin shield and we're looking at

00:34:34,320 --> 00:34:39,599
expanding it out to the edge

00:34:36,720 --> 00:34:40,800
so um at least two layers but then

00:34:39,599 --> 00:34:42,800
depending on

00:34:40,800 --> 00:34:44,560
how content is flowing at any particular

00:34:42,800 --> 00:34:45,760
time and what the load is on various

00:34:44,560 --> 00:34:47,760
parts of the system

00:34:45,760 --> 00:34:49,599
we're able to reconfigure it to push it

00:34:47,760 --> 00:34:51,200
several layers deep

00:34:49,599 --> 00:34:53,119
it's not always fixed at just one or

00:34:51,200 --> 00:34:54,159
just to regardless of whether using

00:34:53,119 --> 00:34:57,520
origin shield or

00:34:54,159 --> 00:34:57,520
or edge it's pretty flexible

00:34:59,839 --> 00:35:04,480
great you answered miles could the stats

00:35:02,960 --> 00:35:06,880
gathering be performed using shared

00:35:04,480 --> 00:35:10,880
memory logs instead of a b-mod

00:35:06,880 --> 00:35:10,880
um okay good question

00:35:11,440 --> 00:35:20,000
the um so the stats gathering today

00:35:16,079 --> 00:35:22,880
is mainly looking at

00:35:20,000 --> 00:35:24,160
the cash load average which is system

00:35:22,880 --> 00:35:26,640
load average

00:35:24,160 --> 00:35:29,440
and the amount of bandwidth being sent

00:35:26,640 --> 00:35:32,079
on the interfaces

00:35:29,440 --> 00:35:32,640
these two things live in the proc file

00:35:32,079 --> 00:35:34,480
system

00:35:32,640 --> 00:35:36,000
or an assist file system basically

00:35:34,480 --> 00:35:37,520
reading the interface speed

00:35:36,000 --> 00:35:38,960
um so those wouldn't come from the

00:35:37,520 --> 00:35:40,240
shared memory logs those just need to

00:35:38,960 --> 00:35:42,079
come from the system

00:35:40,240 --> 00:35:44,000
and the easiest way to get them out is

00:35:42,079 --> 00:35:47,440
is through a view mod

00:35:44,000 --> 00:35:48,720
as we look at expanding to

00:35:47,440 --> 00:35:50,640
some other types of counters that

00:35:48,720 --> 00:35:52,880
traffic monitor uses like

00:35:50,640 --> 00:35:53,839
number of requests per second per

00:35:52,880 --> 00:35:56,000
delivery service or

00:35:53,839 --> 00:35:58,800
bits per second for a delivery service

00:35:56,000 --> 00:36:02,400
the more granular counters

00:35:58,800 --> 00:36:03,599
um we could use custom counters using um

00:36:02,400 --> 00:36:06,480
basically varnish allows you to create a

00:36:03,599 --> 00:36:08,000
custom counter um we could do it using

00:36:06,480 --> 00:36:10,079
shared memory logs but then we basically

00:36:08,000 --> 00:36:12,320
have to parse through all of the logs

00:36:10,079 --> 00:36:13,680
and add everything up um and that would

00:36:12,320 --> 00:36:15,839
be a little bit more expensive than just

00:36:13,680 --> 00:36:17,599
building the counter natively inside the

00:36:15,839 --> 00:36:19,839
varnish but it but it is definitely an

00:36:17,599 --> 00:36:19,839
option

00:36:21,280 --> 00:36:28,000
awesome all right well thank you eric

00:36:25,440 --> 00:36:28,640
um i think a lot of people are excited

00:36:28,000 --> 00:36:30,960
um

00:36:28,640 --> 00:36:32,400
based on what you presented so i'm sure

00:36:30,960 --> 00:36:33,280
you'll get some offline questions as

00:36:32,400 --> 00:36:35,839
well yeah

00:36:33,280 --> 00:36:36,800
great um and thanks to you dave and i'm

00:36:35,839 --> 00:36:37,839
really excited to

00:36:36,800 --> 00:36:39,839
to check out a few of the other

00:36:37,839 --> 00:36:40,880
presentations this afternoon and see

00:36:39,839 --> 00:36:41,760
what else is going on with traffic

00:36:40,880 --> 00:36:43,680
control

00:36:41,760 --> 00:36:45,440
yeah me too great all right the next

00:36:43,680 --> 00:36:49,040
one's at um

00:36:45,440 --> 00:36:52,839
10 55 my time so 12 55 eastern

00:36:49,040 --> 00:36:55,839
but thanks eric yeah thank you all for

00:36:52,839 --> 00:36:55,839
joining

00:37:08,400 --> 00:37:10,480

YouTube URL: https://www.youtube.com/watch?v=UkhuO7O-pGQ


