Title: Apache Karaf, multi purpose runtime
Publication date: 2020-10-16
Playlist: ApacheCon @Home 2020: Karaf
Description: 
	Apache Karaf, multi purpose runtime
JB OnofrÃ©

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

Apache Karaf is a perfect runtime for the cloud supporting several kind of programming model. While OSGi is supported for a while, now Karaf evolved to support new kind of framework like CDI, or even Spring Boot. Thanks for that, Karaf is a perfect multi purpose and multi tenant runtime, providing bunch of ready to use features.

JB is ASF member, PMC Chair for Apache Karaf and involve in about 20 Apache projects.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:25,680 --> 00:00:31,039
all right

00:00:26,320 --> 00:00:34,640
i think you hear me fine um

00:00:31,039 --> 00:00:37,840
so join the karaf

00:00:34,640 --> 00:00:39,520
track and the garage session and again

00:00:37,840 --> 00:00:42,800
sorry for

00:00:39,520 --> 00:00:44,719
this delay we had an issue on open to

00:00:42,800 --> 00:00:46,640
start the first session so what i'm

00:00:44,719 --> 00:00:50,000
gonna do is uh

00:00:46,640 --> 00:00:50,640
quickly um introduce the the first

00:00:50,000 --> 00:00:52,960
session

00:00:50,640 --> 00:00:54,079
and we i will come back on this one

00:00:52,960 --> 00:00:57,760
later

00:00:54,079 --> 00:00:59,280
and move forward with the initial so um

00:00:57,760 --> 00:01:02,000
just a few words so

00:00:59,280 --> 00:01:03,680
uh who i am i'm jb uh i'm a software

00:01:02,000 --> 00:01:07,439
engineer and fellow at talent

00:01:03,680 --> 00:01:08,880
i'm also an asset member and i'm pmc

00:01:07,439 --> 00:01:12,400
member or committee for

00:01:08,880 --> 00:01:14,880
ralph 20 apache projects so i'm pmc

00:01:12,400 --> 00:01:15,520
chair for apache carafe but i'm also

00:01:14,880 --> 00:01:19,280
working on

00:01:15,520 --> 00:01:22,880
carmel activating him felix and others

00:01:19,280 --> 00:01:25,040
so we did a full

00:01:22,880 --> 00:01:26,479
full track about apache carafe so

00:01:25,040 --> 00:01:29,840
basically we have

00:01:26,479 --> 00:01:32,479
no more thoughts but actually four

00:01:29,840 --> 00:01:33,439
so the first one is a multi-purpose

00:01:32,479 --> 00:01:35,439
runtime

00:01:33,439 --> 00:01:37,280
i will show you some coming features and

00:01:35,439 --> 00:01:40,640
roadmap and

00:01:37,280 --> 00:01:44,320
it's a key moment i think for for karaf

00:01:40,640 --> 00:01:46,799
because we give a new dimension and

00:01:44,320 --> 00:01:47,920
and uh it's i think it's pretty

00:01:46,799 --> 00:01:50,479
interesting to see

00:01:47,920 --> 00:01:52,079
uh where we are coming from and what's

00:01:50,479 --> 00:01:54,720
the future for for cara

00:01:52,079 --> 00:01:58,000
then we will have another talk for uh

00:01:54,720 --> 00:02:00,880
design resilience uh microservices using

00:01:58,000 --> 00:02:02,640
cxf and karaf uh i'll talk about java

00:02:00,880 --> 00:02:06,000
agent during speaking and the last

00:02:02,640 --> 00:02:08,720
uh talk will be about uh the use of

00:02:06,000 --> 00:02:12,000
caravan netflix and

00:02:08,720 --> 00:02:17,120
it's actually a well-balanced uh track

00:02:12,000 --> 00:02:17,120
and uh the last talk about uh

00:02:17,360 --> 00:02:20,879
netflix will illustrate what we're gonna

00:02:20,080 --> 00:02:24,400
see in the

00:02:20,879 --> 00:02:24,879
in in this first talk so let me switch

00:02:24,400 --> 00:02:28,000
to

00:02:24,879 --> 00:02:32,959
the other talk about the one actually

00:02:28,000 --> 00:02:32,959
scheduled so let me share

00:02:34,080 --> 00:02:40,640
this one all right so um

00:02:37,760 --> 00:02:42,400
so for maybe some some of you doesn't

00:02:40,640 --> 00:02:43,760
know uh what is apache carafe it's

00:02:42,400 --> 00:02:46,560
actually a runtime

00:02:43,760 --> 00:02:47,519
so it's not uh it is not an application

00:02:46,560 --> 00:02:50,879
server

00:02:47,519 --> 00:02:52,800
uh it's not a container like docker

00:02:50,879 --> 00:02:54,959
it's more a runtime that allows you to

00:02:52,800 --> 00:02:57,760
deploy any kind of application on it

00:02:54,959 --> 00:02:59,280
and leverage some existing features uh

00:02:57,760 --> 00:03:00,480
existing in carab directly in your

00:02:59,280 --> 00:03:03,599
application

00:03:00,480 --> 00:03:07,200
as a turnkey so it's pretty

00:03:03,599 --> 00:03:11,280
interesting to understand this um

00:03:07,200 --> 00:03:13,040
and and the the main purpose of the

00:03:11,280 --> 00:03:14,480
runtime is really to provide some

00:03:13,040 --> 00:03:16,560
feature for you

00:03:14,480 --> 00:03:18,560
it's completely a cloud and container

00:03:16,560 --> 00:03:21,760
ready so it means that you can

00:03:18,560 --> 00:03:23,840
run a carafe on kubernetes package

00:03:21,760 --> 00:03:26,640
carafe as docker image we are

00:03:23,840 --> 00:03:28,239
obviously we provide official images

00:03:26,640 --> 00:03:30,159
docker images

00:03:28,239 --> 00:03:32,159
and thanks to this runtime we can

00:03:30,159 --> 00:03:33,920
address a bunch of use cases

00:03:32,159 --> 00:03:35,200
so it could be backend or foreign

00:03:33,920 --> 00:03:36,720
applications

00:03:35,200 --> 00:03:38,480
it could be iot messaging and

00:03:36,720 --> 00:03:41,360
integration or it could be pure

00:03:38,480 --> 00:03:43,519
microservices

00:03:41,360 --> 00:03:46,879
so let's talk about and compare

00:03:43,519 --> 00:03:49,440
application server versus microservices

00:03:46,879 --> 00:03:50,480
so the application server is what we did

00:03:49,440 --> 00:03:53,840
20 years ago

00:03:50,480 --> 00:03:56,640
uh the pro was a single middleware

00:03:53,840 --> 00:03:58,799
and infra it was easy to test and maybe

00:03:56,640 --> 00:04:02,400
easy to deploy but the scalability

00:03:58,799 --> 00:04:04,560
was not really available and

00:04:02,400 --> 00:04:06,239
the update was difficult because it was

00:04:04,560 --> 00:04:09,360
a big monolithic

00:04:06,239 --> 00:04:11,200
thing so updating a single small

00:04:09,360 --> 00:04:13,920
component mean

00:04:11,200 --> 00:04:15,040
updating the whole application server

00:04:13,920 --> 00:04:16,799
and

00:04:15,040 --> 00:04:19,040
most of the time the memory footprint

00:04:16,799 --> 00:04:22,960
was very high

00:04:19,040 --> 00:04:26,000
and actually to eye for the use we do

00:04:22,960 --> 00:04:28,639
on the other hand so very quickly we do

00:04:26,000 --> 00:04:29,360
micro service so he's a very all

00:04:28,639 --> 00:04:32,800
flexible

00:04:29,360 --> 00:04:36,000
and high granularity uh

00:04:32,800 --> 00:04:37,199
partner and component we can do roll up

00:04:36,000 --> 00:04:40,000
updates and uh

00:04:37,199 --> 00:04:40,479
is very highly scalable it's pretty easy

00:04:40,000 --> 00:04:43,520
but

00:04:40,479 --> 00:04:45,440
i think there's some cons and robots

00:04:43,520 --> 00:04:47,840
uh when you have a bunch of containers

00:04:45,440 --> 00:04:49,759
you can cost a lot in terms of infra

00:04:47,840 --> 00:04:51,199
but more than the cost of the infrared

00:04:49,759 --> 00:04:53,280
itself is also the

00:04:51,199 --> 00:04:54,800
management of all those containing

00:04:53,280 --> 00:04:57,520
containers

00:04:54,800 --> 00:04:58,320
it's also not easy to test and you have

00:04:57,520 --> 00:05:01,440
collaborate

00:04:58,320 --> 00:05:02,800
development because uh when you want to

00:05:01,440 --> 00:05:05,440
to test a single

00:05:02,800 --> 00:05:07,919
uh micro service most of the time you

00:05:05,440 --> 00:05:09,919
need a bunch of all the micro services

00:05:07,919 --> 00:05:12,479
and sometimes these micro services are

00:05:09,919 --> 00:05:14,000
not available for the test

00:05:12,479 --> 00:05:16,240
and at the end of the day if you take a

00:05:14,000 --> 00:05:17,680
look about the overall memory footprint

00:05:16,240 --> 00:05:21,680
it could be pretty large

00:05:17,680 --> 00:05:24,000
compared to uh what what we can do

00:05:21,680 --> 00:05:26,479
and actually i think we can imagine so i

00:05:24,000 --> 00:05:29,680
think application server and mobility

00:05:26,479 --> 00:05:31,039
monolith is done and we should not do

00:05:29,680 --> 00:05:33,759
that obviously

00:05:31,039 --> 00:05:35,360
but maybe we have to think about

00:05:33,759 --> 00:05:38,320
microservices

00:05:35,360 --> 00:05:39,520
in a more clever way and that's what i

00:05:38,320 --> 00:05:41,440
named the model is

00:05:39,520 --> 00:05:42,720
so the modulus is not an application

00:05:41,440 --> 00:05:45,840
server but

00:05:42,720 --> 00:05:47,440
is instead of deploying single atomic

00:05:45,840 --> 00:05:50,639
microservices

00:05:47,440 --> 00:05:53,039
you can group your microservices and

00:05:50,639 --> 00:05:56,160
consolidate your micro services

00:05:53,039 --> 00:05:58,639
is a more efficient way um

00:05:56,160 --> 00:06:00,880
the the grouping is depends of your

00:05:58,639 --> 00:06:02,240
application your infra a lot of things i

00:06:00,880 --> 00:06:04,639
mean you can start from

00:06:02,240 --> 00:06:07,280
macro services approach and and say okay

00:06:04,639 --> 00:06:09,919
these two micro services are

00:06:07,280 --> 00:06:11,120
actually tied together in terms of uh

00:06:09,919 --> 00:06:13,840
exchange

00:06:11,120 --> 00:06:15,199
and and you can still update each uh

00:06:13,840 --> 00:06:17,520
each component

00:06:15,199 --> 00:06:19,520
so we don't change the dev model the

00:06:17,520 --> 00:06:21,440
development model is the same

00:06:19,520 --> 00:06:23,840
but we give the opportunity for the

00:06:21,440 --> 00:06:27,039
devops to optimize the infra

00:06:23,840 --> 00:06:27,840
and that's exactly where carafe is is

00:06:27,039 --> 00:06:30,400
going

00:06:27,840 --> 00:06:31,199
so the purpose of karaf is to provide

00:06:30,400 --> 00:06:33,440
the runtime

00:06:31,199 --> 00:06:35,280
allowing you to create some kind of

00:06:33,440 --> 00:06:38,479
motive

00:06:35,280 --> 00:06:41,919
so why multi-purpose

00:06:38,479 --> 00:06:45,120
so the first thing is in karaf so

00:06:41,919 --> 00:06:47,360
for the ones who know karaf

00:06:45,120 --> 00:06:48,720
you maybe know that karaf is based on

00:06:47,360 --> 00:06:51,199
our igr

00:06:48,720 --> 00:06:53,120
but now you don't know you you don't

00:06:51,199 --> 00:06:55,759
have to use your agi to run

00:06:53,120 --> 00:06:56,479
application in karat the fact that some

00:06:55,759 --> 00:06:58,240
part of

00:06:56,479 --> 00:07:00,080
of karaf is based on knowledge is an

00:06:58,240 --> 00:07:01,280
internal implementation it doesn't

00:07:00,080 --> 00:07:04,319
really matter

00:07:01,280 --> 00:07:06,319
so the purpose of the new

00:07:04,319 --> 00:07:08,720
carafe is to have a unique runtime

00:07:06,319 --> 00:07:13,199
supporting several prime models

00:07:08,720 --> 00:07:16,479
um it means that any application mode

00:07:13,199 --> 00:07:18,479
incarna will be able to use services

00:07:16,479 --> 00:07:19,759
provided by all the application modules

00:07:18,479 --> 00:07:22,960
in the same caravan

00:07:19,759 --> 00:07:23,759
or remote it doesn't really matter and

00:07:22,960 --> 00:07:26,319
then

00:07:23,759 --> 00:07:27,199
when you deploy your i mean what's your

00:07:26,319 --> 00:07:29,759
value

00:07:27,199 --> 00:07:30,479
to have your application in curve

00:07:29,759 --> 00:07:32,400
running

00:07:30,479 --> 00:07:34,240
so your application modules it's

00:07:32,400 --> 00:07:36,400
basically because you will have some

00:07:34,240 --> 00:07:38,479
kind of turnkey and common feature that

00:07:36,400 --> 00:07:41,599
you can leverage without cost and

00:07:38,479 --> 00:07:44,000
without changing your application module

00:07:41,599 --> 00:07:45,840
in cara so for instance you can directly

00:07:44,000 --> 00:07:46,479
leverage vlogging you can directly

00:07:45,840 --> 00:07:48,720
leverage

00:07:46,479 --> 00:07:49,759
monitoring feature like a decanter that

00:07:48,720 --> 00:07:53,280
can expose the pro

00:07:49,759 --> 00:07:54,080
promoters appender extra so what you can

00:07:53,280 --> 00:07:56,720
do in

00:07:54,080 --> 00:07:58,240
in carafe right now so the first thing

00:07:56,720 --> 00:08:00,479
is you can directly

00:07:58,240 --> 00:08:01,440
create some web applications so

00:08:00,479 --> 00:08:04,560
basically

00:08:01,440 --> 00:08:07,039
manipulate the camera http service

00:08:04,560 --> 00:08:07,840
and register your servlet your gsp or

00:08:07,039 --> 00:08:09,440
whatever

00:08:07,840 --> 00:08:11,199
so it means that you can interact with

00:08:09,440 --> 00:08:12,720
all the application module from this

00:08:11,199 --> 00:08:15,599
layer so

00:08:12,720 --> 00:08:17,599
services cdi springboard extra and

00:08:15,599 --> 00:08:18,080
support from advanced runtime feature

00:08:17,599 --> 00:08:21,199
like a

00:08:18,080 --> 00:08:24,479
security proxy load balancing extra

00:08:21,199 --> 00:08:28,319
so this is an example of

00:08:24,479 --> 00:08:30,879
a small tablet but i just use at tablet

00:08:28,319 --> 00:08:32,800
there's nothing more to do and if i drop

00:08:30,879 --> 00:08:35,919
a jar file containing these

00:08:32,800 --> 00:08:36,719
uh this tablet it will be automatically

00:08:35,919 --> 00:08:40,000
deployed by

00:08:36,719 --> 00:08:43,760
a by camera for me no no nothing more

00:08:40,000 --> 00:08:45,839
to to do you can also uh

00:08:43,760 --> 00:08:47,279
something more advanced so in that case

00:08:45,839 --> 00:08:50,560
instead of using the

00:08:47,279 --> 00:08:51,839
add web server annotation when you use

00:08:50,560 --> 00:08:55,440
directly

00:08:51,839 --> 00:08:56,560
some declaration in uh karaf so for that

00:08:55,440 --> 00:08:58,959
we i

00:08:56,560 --> 00:09:00,000
we use the ad component that allows you

00:08:58,959 --> 00:09:04,080
to easily

00:09:00,000 --> 00:09:06,959
deploy a tablet another thing is

00:09:04,080 --> 00:09:08,560
directly by code you can get the http

00:09:06,959 --> 00:09:10,080
service provided by giraffe and

00:09:08,560 --> 00:09:11,600
register your tablet so you have

00:09:10,080 --> 00:09:12,720
different ways of deploying your

00:09:11,600 --> 00:09:15,920
servlets in

00:09:12,720 --> 00:09:18,959
in cara and finally you can still

00:09:15,920 --> 00:09:21,360
use the war approach that you can

00:09:18,959 --> 00:09:23,040
do in tomcat for instance so you just

00:09:21,360 --> 00:09:26,640
drop or install your uh

00:09:23,040 --> 00:09:29,040
or archiving in cara

00:09:26,640 --> 00:09:31,200
so and this is an example of some

00:09:29,040 --> 00:09:31,519
feature you can have all of the box for

00:09:31,200 --> 00:09:34,320
you

00:09:31,519 --> 00:09:36,000
without doing anything for instance in

00:09:34,320 --> 00:09:40,560
cara we have the the

00:09:36,000 --> 00:09:44,240
proxy feature that allows you to expose

00:09:40,560 --> 00:09:45,600
internal or so by internal i mean

00:09:44,240 --> 00:09:48,160
web application module but you're

00:09:45,600 --> 00:09:51,519
deploying carafe you can expose

00:09:48,160 --> 00:09:54,399
using another proxy so in the same car

00:09:51,519 --> 00:09:56,720
but you can also create a proxy but

00:09:54,399 --> 00:09:58,880
proxy and remote resource like uh

00:09:56,720 --> 00:10:00,640
for instance mavenstein for that so it

00:09:58,880 --> 00:10:03,680
means that in my cara

00:10:00,640 --> 00:10:05,360
instance there i have slash maven but

00:10:03,680 --> 00:10:08,160
we'll actually proxy to

00:10:05,360 --> 00:10:08,160
maven central

00:10:08,560 --> 00:10:11,920
similar to what we do with web

00:10:10,160 --> 00:10:13,040
application you can do the same with

00:10:11,920 --> 00:10:15,680
rest api

00:10:13,040 --> 00:10:18,399
uh so there you can create xposed api

00:10:15,680 --> 00:10:18,959
using swagger open up here whatever and

00:10:18,399 --> 00:10:20,959
you

00:10:18,959 --> 00:10:23,200
you you have exactly the same approach

00:10:20,959 --> 00:10:26,000
as you can do with web applications

00:10:23,200 --> 00:10:27,600
so for instance you can directly deploy

00:10:26,000 --> 00:10:29,920
this kind of

00:10:27,600 --> 00:10:31,760
so this is an example using a directly

00:10:29,920 --> 00:10:34,880
cxf registration

00:10:31,760 --> 00:10:37,360
so i have my jaxa some dated class

00:10:34,880 --> 00:10:38,240
and then i just deploy using this piece

00:10:37,360 --> 00:10:40,959
of code

00:10:38,240 --> 00:10:41,760
so i i just uh deployed my jack sarah

00:10:40,959 --> 00:10:44,079
server in

00:10:41,760 --> 00:10:44,800
in karat this is the first approach

00:10:44,079 --> 00:10:47,040
about

00:10:44,800 --> 00:10:49,120
a bit of border plate so instead of

00:10:47,040 --> 00:10:52,079
doing that you can directly use

00:10:49,120 --> 00:10:53,839
a white board so in that case i directly

00:10:52,079 --> 00:10:57,920
define my jackson presentation

00:10:53,839 --> 00:10:57,920
and so automatically cara will deploy it

00:10:58,560 --> 00:11:02,800
apache camera we have another track at

00:11:00,880 --> 00:11:06,000
apache cone about apache camera

00:11:02,800 --> 00:11:08,880
so i don't um too much there but just

00:11:06,000 --> 00:11:09,200
to let you know that in in caramel we

00:11:08,880 --> 00:11:11,760
have

00:11:09,200 --> 00:11:12,640
the support of carafe so it means that

00:11:11,760 --> 00:11:15,519
your

00:11:12,640 --> 00:11:16,640
carafe can run your camera routes and so

00:11:15,519 --> 00:11:18,720
this is another

00:11:16,640 --> 00:11:21,200
a new feature coming which is them

00:11:18,720 --> 00:11:22,320
caramel and the purpose of caramel is

00:11:21,200 --> 00:11:25,519
directly

00:11:22,320 --> 00:11:27,519
to allow you to create a kind of carob

00:11:25,519 --> 00:11:30,000
distribution invading your common route

00:11:27,519 --> 00:11:32,560
so for instance you can create

00:11:30,000 --> 00:11:34,640
assuming you have a first route uh

00:11:32,560 --> 00:11:37,200
created using the java dsl

00:11:34,640 --> 00:11:39,680
a second route uh using this uh i don't

00:11:37,200 --> 00:11:43,040
know maybe the spring action on dsl

00:11:39,680 --> 00:11:44,480
and a and the third route uh as a java

00:11:43,040 --> 00:11:46,800
tsl as well but by

00:11:44,480 --> 00:11:47,680
package as a jar file containing some

00:11:46,800 --> 00:11:50,959
processor

00:11:47,680 --> 00:11:52,399
or or bin in that case what you can do

00:11:50,959 --> 00:11:54,240
is directly you can

00:11:52,399 --> 00:11:56,079
run and you provide a list of all

00:11:54,240 --> 00:11:59,279
resources containing your routes and

00:11:56,079 --> 00:12:01,200
it will run uh out of the box beyond the

00:11:59,279 --> 00:12:02,639
hood it means that we will have a karak

00:12:01,200 --> 00:12:05,120
instance running

00:12:02,639 --> 00:12:05,920
and this kind of instance running will

00:12:05,120 --> 00:12:08,959
embed

00:12:05,920 --> 00:12:11,680
the routes located in these artifacts

00:12:08,959 --> 00:12:12,480
we can also create a package so it means

00:12:11,680 --> 00:12:16,320
that you can

00:12:12,480 --> 00:12:19,839
group the the three routes definitely

00:12:16,320 --> 00:12:21,920
in one jar file it run you can create a

00:12:19,839 --> 00:12:25,839
docker image and you can directly deploy

00:12:21,920 --> 00:12:25,839
on kubernetes so you can do

00:12:26,160 --> 00:12:30,240
running your car up we and and embedding

00:12:29,680 --> 00:12:33,519
your

00:12:30,240 --> 00:12:36,560
cameras directly on kubernetes

00:12:33,519 --> 00:12:38,240
or asia obviously carafe is internally

00:12:36,560 --> 00:12:41,680
powered by your agi

00:12:38,240 --> 00:12:43,839
again you can use cara without oigi

00:12:41,680 --> 00:12:44,720
is a big change to what we did in the

00:12:43,839 --> 00:12:47,680
past

00:12:44,720 --> 00:12:48,560
uh the tagline for cara was the oaga

00:12:47,680 --> 00:12:51,440
container

00:12:48,560 --> 00:12:53,360
but that's not not the case anymore i

00:12:51,440 --> 00:12:55,920
mean

00:12:53,360 --> 00:12:57,680
obviously you can still use your agi so

00:12:55,920 --> 00:12:59,200
if you know hdr you can still deploy

00:12:57,680 --> 00:13:01,040
your scr application

00:12:59,200 --> 00:13:02,240
your your blueprint application or

00:13:01,040 --> 00:13:05,760
whatever

00:13:02,240 --> 00:13:07,839
but that's not required and the new

00:13:05,760 --> 00:13:09,120
focus on characters to provide a

00:13:07,839 --> 00:13:12,480
modelling

00:13:09,120 --> 00:13:15,600
runtime but i support different kind of

00:13:12,480 --> 00:13:17,279
prime model so here you probably know if

00:13:15,600 --> 00:13:20,399
you know cara but you can do

00:13:17,279 --> 00:13:23,920
grouping scr extra the thing is

00:13:20,399 --> 00:13:24,639
the service registry the current service

00:13:23,920 --> 00:13:28,079
registry

00:13:24,639 --> 00:13:28,079
share between all

00:13:28,160 --> 00:13:31,360
modules that you deploy in karaf so it

00:13:30,720 --> 00:13:34,399
means that

00:13:31,360 --> 00:13:36,720
from asia you will be able to use bin

00:13:34,399 --> 00:13:37,519
locating another prime model like cdi

00:13:36,720 --> 00:13:39,839
springboot

00:13:37,519 --> 00:13:41,360
and from springboard you will be able to

00:13:39,839 --> 00:13:45,360
use

00:13:41,360 --> 00:13:47,440
bin locating in innova

00:13:45,360 --> 00:13:48,399
so this is an example of an scr

00:13:47,440 --> 00:13:50,959
component

00:13:48,399 --> 00:13:52,800
so you can see this add component and

00:13:50,959 --> 00:13:53,440
add reference means that we are looking

00:13:52,800 --> 00:13:55,519
for

00:13:53,440 --> 00:13:57,839
a service located in the service

00:13:55,519 --> 00:14:01,199
registry and then we just start

00:13:57,839 --> 00:14:03,360
our component so cdi

00:14:01,199 --> 00:14:04,399
is another thing that you we support in

00:14:03,360 --> 00:14:08,160
karaf uh

00:14:04,399 --> 00:14:11,680
this is a new uh cdi support in

00:14:08,160 --> 00:14:13,920
res um the big advantage

00:14:11,680 --> 00:14:16,079
is we are able to decouple from the cdi

00:14:13,920 --> 00:14:17,920
container so you can use open web bins

00:14:16,079 --> 00:14:20,079
well whatever in in karaf it doesn't

00:14:17,920 --> 00:14:22,720
really matter

00:14:20,079 --> 00:14:24,079
the difference between pure cdi and

00:14:22,720 --> 00:14:26,079
carafe and cdi

00:14:24,079 --> 00:14:28,399
is the fact that you have some

00:14:26,079 --> 00:14:32,160
annotation dedicated for igi

00:14:28,399 --> 00:14:32,800
in ogi cdi so you can explicitly

00:14:32,160 --> 00:14:38,560
register

00:14:32,800 --> 00:14:41,120
a new services from your cdi application

00:14:38,560 --> 00:14:42,320
so for instance this is an example i

00:14:41,120 --> 00:14:45,440
have a first

00:14:42,320 --> 00:14:49,440
service uh there that i

00:14:45,440 --> 00:14:52,720
i can use a local bin using add inject

00:14:49,440 --> 00:14:54,720
so this is a regular cdi uh annotation

00:14:52,720 --> 00:14:56,959
and then you can see ad service is

00:14:54,720 --> 00:14:58,000
something coming from ogi cdi that

00:14:56,959 --> 00:15:01,279
allows you to

00:14:58,000 --> 00:15:04,000
define this bin as no agi service

00:15:01,279 --> 00:15:04,720
on the other hand in another module i

00:15:04,000 --> 00:15:07,040
have

00:15:04,720 --> 00:15:09,040
art inject but this time i'm using art

00:15:07,040 --> 00:15:09,839
inject with ad reference so it means

00:15:09,040 --> 00:15:12,880
that

00:15:09,839 --> 00:15:14,240
this service will be injected from the

00:15:12,880 --> 00:15:16,480
service registry

00:15:14,240 --> 00:15:17,760
and corresponding to this one so it's a

00:15:16,480 --> 00:15:20,800
kind of wiring

00:15:17,760 --> 00:15:24,880
but we do between the two

00:15:20,800 --> 00:15:25,600
the two module and finally a new coming

00:15:24,880 --> 00:15:28,880
feature

00:15:25,600 --> 00:15:31,360
is spring boot so

00:15:28,880 --> 00:15:32,720
it means that in carafe you will be able

00:15:31,360 --> 00:15:36,480
to deploy

00:15:32,720 --> 00:15:39,680
prim boot module or application

00:15:36,480 --> 00:15:40,000
so for now we support fad jar so it

00:15:39,680 --> 00:15:42,560
means

00:15:40,000 --> 00:15:44,079
that you have to deploy a jar file

00:15:42,560 --> 00:15:45,920
containing your spring boots

00:15:44,079 --> 00:15:48,160
and in the manifest you have the spring

00:15:45,920 --> 00:15:48,160
boot

00:15:48,240 --> 00:15:55,839
like experiment version classes

00:15:53,120 --> 00:15:58,160
extra or you can directly deploy a

00:15:55,839 --> 00:16:00,399
folder containing your jar file

00:15:58,160 --> 00:16:01,440
so there is no changing in the

00:16:00,399 --> 00:16:03,680
springboot module

00:16:01,440 --> 00:16:05,040
at the development level so there are no

00:16:03,680 --> 00:16:07,440
special plugins

00:16:05,040 --> 00:16:09,600
no special manifest you just directly

00:16:07,440 --> 00:16:12,480
use your springboard artifact

00:16:09,600 --> 00:16:13,279
uh as you used to do you just take the

00:16:12,480 --> 00:16:17,120
spring boot

00:16:13,279 --> 00:16:20,079
and you put into uh into cara

00:16:17,120 --> 00:16:20,800
override some spring boot beans to use

00:16:20,079 --> 00:16:24,320
some

00:16:20,800 --> 00:16:24,800
uh curve services so this is done by the

00:16:24,320 --> 00:16:27,040
car

00:16:24,800 --> 00:16:28,079
the springboot service for you so you

00:16:27,040 --> 00:16:31,120
don't have to

00:16:28,079 --> 00:16:31,759
uh to do anything i mean when you you

00:16:31,120 --> 00:16:34,800
deploy

00:16:31,759 --> 00:16:36,639
your springboot application the cara

00:16:34,800 --> 00:16:40,399
springboot module is able to

00:16:36,639 --> 00:16:42,560
detect some being springboard beam

00:16:40,399 --> 00:16:44,800
and replace with some implementation

00:16:42,560 --> 00:16:46,399
specific to work our springboard module

00:16:44,800 --> 00:16:49,040
i'm thinking about logging and thinking

00:16:46,399 --> 00:16:51,040
about http service stuff like that

00:16:49,040 --> 00:16:52,880
we also have some implicit being

00:16:51,040 --> 00:16:53,920
registration in the service registry

00:16:52,880 --> 00:16:58,000
meaning that

00:16:53,920 --> 00:17:01,199
some of your bin will be exposed

00:16:58,000 --> 00:17:04,640
in your the the

00:17:01,199 --> 00:17:06,480
service registry by default any being

00:17:04,640 --> 00:17:07,679
contained in your application will be

00:17:06,480 --> 00:17:11,679
exposing the service

00:17:07,679 --> 00:17:14,000
registry or you can use some kind of

00:17:11,679 --> 00:17:15,360
metadata definition to see if this is

00:17:14,000 --> 00:17:18,400
being that i want to

00:17:15,360 --> 00:17:21,520
push in the service registry or not

00:17:18,400 --> 00:17:24,240
so this is an example of

00:17:21,520 --> 00:17:26,000
a spring boot package so this is a an

00:17:24,240 --> 00:17:29,520
example of using

00:17:26,000 --> 00:17:31,919
spring boot deploy on an existing

00:17:29,520 --> 00:17:32,640
and running car of instance and this is

00:17:31,919 --> 00:17:35,679
an example

00:17:32,640 --> 00:17:37,760
of springboot package with with carafe

00:17:35,679 --> 00:17:40,320
so let's start with the first approach

00:17:37,760 --> 00:17:42,320
is so let imagine you have a

00:17:40,320 --> 00:17:44,080
carave running and you want to deploy a

00:17:42,320 --> 00:17:45,919
new springbook module in there

00:17:44,080 --> 00:17:47,919
so you have new comments dedicated

00:17:45,919 --> 00:17:49,440
spring boot install and you just provide

00:17:47,919 --> 00:17:51,679
the location of

00:17:49,440 --> 00:17:52,720
uh your springboot jar file so it could

00:17:51,679 --> 00:17:55,120
be a jar file

00:17:52,720 --> 00:17:56,640
local it could be a local folder it

00:17:55,120 --> 00:18:00,559
could be an http or a

00:17:56,640 --> 00:18:01,360
maven location then when you deploy

00:18:00,559 --> 00:18:04,799
there are some

00:18:01,360 --> 00:18:06,640
uh extraction from the details like the

00:18:04,799 --> 00:18:08,960
main class the staff class

00:18:06,640 --> 00:18:09,919
stuff like that done by the kara spring

00:18:08,960 --> 00:18:12,400
good service

00:18:09,919 --> 00:18:13,280
and then you can display it there all

00:18:12,400 --> 00:18:16,400
the uh

00:18:13,280 --> 00:18:16,960
the spring boot application running into

00:18:16,400 --> 00:18:19,120
you have

00:18:16,960 --> 00:18:20,320
available not literally available in

00:18:19,120 --> 00:18:22,960
your uh

00:18:20,320 --> 00:18:25,679
karate instance then you can decide to

00:18:22,960 --> 00:18:27,200
start a module so you just do springboot

00:18:25,679 --> 00:18:28,880
start and then you can see that spring

00:18:27,200 --> 00:18:31,039
wood is starting there

00:18:28,880 --> 00:18:33,679
then you can see that the the log and

00:18:31,039 --> 00:18:35,760
not display on system mode or whatever

00:18:33,679 --> 00:18:36,960
the log are using actually the carafe

00:18:35,760 --> 00:18:40,240
lob service

00:18:36,960 --> 00:18:44,400
thanks to what we define i mean we

00:18:40,240 --> 00:18:46,960
overwrite some springboot beam by

00:18:44,400 --> 00:18:47,600
springwood karatbin and it's what we do

00:18:46,960 --> 00:18:50,799
then

00:18:47,600 --> 00:18:53,840
you can see the time and so maybe

00:18:50,799 --> 00:18:55,280
you may have some question is there any

00:18:53,840 --> 00:18:57,679
overhead to start

00:18:55,280 --> 00:19:00,720
spring boots in carafe compared to

00:18:57,679 --> 00:19:02,960
directly doing java.jar

00:19:00,720 --> 00:19:04,720
and actually it's pretty uh it's pretty

00:19:02,960 --> 00:19:06,320
close i mean it's quite the same when i

00:19:04,720 --> 00:19:09,840
did my test

00:19:06,320 --> 00:19:12,480
the starting time was i would say a

00:19:09,840 --> 00:19:13,440
millisecond uh gap it was exactly the

00:19:12,480 --> 00:19:16,160
same

00:19:13,440 --> 00:19:17,280
so this is a first up approach where you

00:19:16,160 --> 00:19:19,440
can start your

00:19:17,280 --> 00:19:20,960
uh carafe and then you deploy your

00:19:19,440 --> 00:19:24,320
springboot moduling there

00:19:20,960 --> 00:19:27,280
another approach is like we do for

00:19:24,320 --> 00:19:27,840
cameron route using the caramel wrapper

00:19:27,280 --> 00:19:30,240
and

00:19:27,840 --> 00:19:32,400
tuning we do the same for spring boot

00:19:30,240 --> 00:19:34,960
using a new dedicated

00:19:32,400 --> 00:19:35,919
tooling that allows you to create uh

00:19:34,960 --> 00:19:38,799
some kind of

00:19:35,919 --> 00:19:39,760
carafe with springboot running so it

00:19:38,799 --> 00:19:42,480
means that you can

00:19:39,760 --> 00:19:44,160
directly use carrot spring boot package

00:19:42,480 --> 00:19:45,600
scouse from the docker where you

00:19:44,160 --> 00:19:49,360
directly provide the

00:19:45,600 --> 00:19:52,000
uh the jar with the springboot jar

00:19:49,360 --> 00:19:52,799
and then you can decide so this is it

00:19:52,000 --> 00:19:56,720
can be done

00:19:52,799 --> 00:19:58,880
using maven using gradle or whatsapp

00:19:56,720 --> 00:19:59,919
another thing which is very interesting

00:19:58,880 --> 00:20:03,440
when you do that

00:19:59,919 --> 00:20:06,159
is to override some

00:20:03,440 --> 00:20:08,000
class loader that you have in springboot

00:20:06,159 --> 00:20:10,159
let me take a concrete example

00:20:08,000 --> 00:20:11,600
youtube you package your springboot

00:20:10,159 --> 00:20:14,480
application

00:20:11,600 --> 00:20:15,919
as a docker image and then you have a

00:20:14,480 --> 00:20:19,200
and your applications

00:20:15,919 --> 00:20:20,880
are using jackson and this is a cve so

00:20:19,200 --> 00:20:23,120
this is a security fix

00:20:20,880 --> 00:20:25,280
for jackson and then you have to update

00:20:23,120 --> 00:20:27,760
your new jackson version

00:20:25,280 --> 00:20:28,559
uh to do that you have to rebuild your

00:20:27,760 --> 00:20:31,360
application

00:20:28,559 --> 00:20:34,000
all your applications modules and then

00:20:31,360 --> 00:20:36,159
repackage and deploy under

00:20:34,000 --> 00:20:39,120
create a new docker image and do a

00:20:36,159 --> 00:20:40,880
rollup update on kubernetes for instance

00:20:39,120 --> 00:20:43,039
it could be painful because it means

00:20:40,880 --> 00:20:45,200
that the deployment is not a

00:20:43,039 --> 00:20:46,159
is not a big deal but the program is

00:20:45,200 --> 00:20:49,360
more to update

00:20:46,159 --> 00:20:52,080
any imagine if you have 200 of

00:20:49,360 --> 00:20:53,039
springboot modules and you have to do uh

00:20:52,080 --> 00:20:57,520
to do the update

00:20:53,039 --> 00:20:59,679
uh on there so in the cara spring boot

00:20:57,520 --> 00:21:02,080
service what we added is the notion of

00:20:59,679 --> 00:21:03,039
stack so the stack is a class loader

00:21:02,080 --> 00:21:05,120
that you can put

00:21:03,039 --> 00:21:07,200
just before your spring boot application

00:21:05,120 --> 00:21:08,240
is spare screen boot application running

00:21:07,200 --> 00:21:10,720
carafe

00:21:08,240 --> 00:21:12,720
where you can override some class loader

00:21:10,720 --> 00:21:14,880
so basically a stack is a folder

00:21:12,720 --> 00:21:17,840
containing a set of jar files

00:21:14,880 --> 00:21:19,760
it could be spring boot itself but you

00:21:17,840 --> 00:21:21,600
we add parent first in the springboot

00:21:19,760 --> 00:21:24,240
app class holder

00:21:21,600 --> 00:21:26,000
so and the other thing that you can do

00:21:24,240 --> 00:21:29,760
is you can define a

00:21:26,000 --> 00:21:31,120
woolyard key of stacks meaning that your

00:21:29,760 --> 00:21:34,320
springboot application

00:21:31,120 --> 00:21:35,360
can use several stacks so the big

00:21:34,320 --> 00:21:39,360
advantage is to

00:21:35,360 --> 00:21:41,919
override this time the class loader

00:21:39,360 --> 00:21:43,840
updating to a new version updating to a

00:21:41,919 --> 00:21:45,760
new version of stream boot itself or

00:21:43,840 --> 00:21:49,360
dependency

00:21:45,760 --> 00:21:51,039
so this is an example of using stack so

00:21:49,360 --> 00:21:53,039
always the two approach of a first

00:21:51,039 --> 00:21:54,400
approach is using a running carafe

00:21:53,039 --> 00:21:56,000
instance the second approach is

00:21:54,400 --> 00:21:58,880
packaging all together

00:21:56,000 --> 00:21:59,520
so the first approach is i can add a new

00:21:58,880 --> 00:22:01,280
stack

00:21:59,520 --> 00:22:02,960
so this is the location of my stack

00:22:01,280 --> 00:22:05,840
where i can put my jar file

00:22:02,960 --> 00:22:07,760
and then when i install this i define

00:22:05,840 --> 00:22:09,360
the stack that i want to use

00:22:07,760 --> 00:22:12,000
on the other hand when i'm using the

00:22:09,360 --> 00:22:13,039
package then i can directly provide the

00:22:12,000 --> 00:22:17,840
stack that i

00:22:13,039 --> 00:22:17,840
want to use in my uh for my application

00:22:19,039 --> 00:22:24,400
this can be done in two ways you can

00:22:21,840 --> 00:22:26,880
again you can package

00:22:24,400 --> 00:22:28,960
your carafe instance so mixing spring

00:22:26,880 --> 00:22:32,080
boots oigi and others

00:22:28,960 --> 00:22:34,799
into a dynamic approach so this time

00:22:32,080 --> 00:22:35,600
i'm building a regular docker image

00:22:34,799 --> 00:22:37,760
containing

00:22:35,600 --> 00:22:39,039
carafe and then i do some spring boot

00:22:37,760 --> 00:22:41,200
manipulation

00:22:39,039 --> 00:22:44,000
or i can use another thing which is one

00:22:41,200 --> 00:22:47,360
grower so one grower is a new

00:22:44,000 --> 00:22:49,840
carafe product the purpose of one grower

00:22:47,360 --> 00:22:53,200
is to be able to run

00:22:49,840 --> 00:22:56,000
any or agi likes prime model with

00:22:53,200 --> 00:22:57,440
agi l and dependency we have a question

00:22:56,000 --> 00:23:00,559
before so when we

00:22:57,440 --> 00:23:02,400
use a single class loader so you don't

00:23:00,559 --> 00:23:05,520
have to use bundle

00:23:02,400 --> 00:23:08,559
when you use one grower you just deploy

00:23:05,520 --> 00:23:11,679
and run so you can do create a uber jar

00:23:08,559 --> 00:23:12,559
but it's it supports shared support scr

00:23:11,679 --> 00:23:14,880
it supports

00:23:12,559 --> 00:23:16,240
anything that you have in carat so you

00:23:14,880 --> 00:23:18,240
can actually use an

00:23:16,240 --> 00:23:20,080
alternative to spring boots if you don't

00:23:18,240 --> 00:23:21,039
want to use spring boot you can directly

00:23:20,080 --> 00:23:23,280
use one bar

00:23:21,039 --> 00:23:25,120
or you can package spring boot cdi or

00:23:23,280 --> 00:23:27,360
whatever in a single one where

00:23:25,120 --> 00:23:29,679
application

00:23:27,360 --> 00:23:33,200
and finally you can deploy this on

00:23:29,679 --> 00:23:36,400
kubernetes for instance

00:23:33,200 --> 00:23:38,320
for this screenshot i'm using eks but

00:23:36,400 --> 00:23:39,919
it doesn't really matter you can use any

00:23:38,320 --> 00:23:41,919
kind of humanities

00:23:39,919 --> 00:23:43,039
and so once you have a docker you can

00:23:41,919 --> 00:23:46,159
simply

00:23:43,039 --> 00:23:48,720
create your your deployment on

00:23:46,159 --> 00:23:52,320
humanities

00:23:48,720 --> 00:23:54,640
i'm quickly switch to the other uh

00:23:52,320 --> 00:23:55,360
presentation that was planned for the

00:23:54,640 --> 00:24:00,240
first

00:23:55,360 --> 00:24:00,240
hour so let me share again

00:24:02,840 --> 00:24:05,840
um

00:24:08,720 --> 00:24:11,200
here we are

00:24:12,320 --> 00:24:16,799
so uh let me give a complete overview

00:24:15,120 --> 00:24:20,000
about the karaf ecosystem

00:24:16,799 --> 00:24:22,480
uh so right now in the carafe ecosystem

00:24:20,000 --> 00:24:23,760
we have basically five sub projects the

00:24:22,480 --> 00:24:27,200
runtime itself is

00:24:23,760 --> 00:24:29,760
one that we are talking now is the

00:24:27,200 --> 00:24:31,520
multi-purpose runtime uh supporting

00:24:29,760 --> 00:24:33,600
server prime model

00:24:31,520 --> 00:24:35,679
one grower as i mentioned is an oiga

00:24:33,600 --> 00:24:37,120
prime model with flat class loader and

00:24:35,679 --> 00:24:39,919
single class loader

00:24:37,120 --> 00:24:40,720
carb decanter is all about is a kind of

00:24:39,919 --> 00:24:44,080
framework

00:24:40,720 --> 00:24:46,720
for data collection monitoring and bam

00:24:44,080 --> 00:24:49,200
cave is karafke is an artifact and

00:24:46,720 --> 00:24:52,320
docker image repository manager

00:24:49,200 --> 00:24:53,919
and cellar was clustered but the new

00:24:52,320 --> 00:24:56,640
version of cellar

00:24:53,919 --> 00:24:57,520
is more cloud focused in terms of

00:24:56,640 --> 00:25:00,159
feature

00:24:57,520 --> 00:25:01,039
so for the one who's following the

00:25:00,159 --> 00:25:04,559
activity

00:25:01,039 --> 00:25:06,320
on karaf maybe you saw that we we had a

00:25:04,559 --> 00:25:09,679
new pull request today about

00:25:06,320 --> 00:25:12,799
using um secret file

00:25:09,679 --> 00:25:15,200
using uh discovery so

00:25:12,799 --> 00:25:16,320
on seller you can already do humanities

00:25:15,200 --> 00:25:18,320
discovery

00:25:16,320 --> 00:25:20,640
using the pod but now we will have

00:25:18,320 --> 00:25:23,200
config map

00:25:20,640 --> 00:25:24,799
in cellar circular but so it's more

00:25:23,200 --> 00:25:27,840
let's say it's more cloud

00:25:24,799 --> 00:25:29,360
focused feature in terms of current

00:25:27,840 --> 00:25:32,559
runtime releases

00:25:29,360 --> 00:25:36,320
uh we have a new major milestone coming

00:25:32,559 --> 00:25:37,840
is a cara430 so all that i mentioned

00:25:36,320 --> 00:25:42,000
before the springboot

00:25:37,840 --> 00:25:44,559
module can be deployed on any

00:25:42,000 --> 00:25:46,320
cara version but it will be embedded in

00:25:44,559 --> 00:25:46,720
the master so you will be embedded in

00:25:46,320 --> 00:25:49,840
the

00:25:46,720 --> 00:25:50,080
for free x version i'm not sure i will

00:25:49,840 --> 00:25:53,840
in

00:25:50,080 --> 00:25:57,679
uh including in 4-3-0 the major

00:25:53,840 --> 00:26:01,120
changes in the cara 4-3-0 release is

00:25:57,679 --> 00:26:04,720
internally used or asia s7

00:26:01,120 --> 00:26:05,360
specification it's fully jdk 11 plus

00:26:04,720 --> 00:26:09,520
plus

00:26:05,360 --> 00:26:12,080
so it's run on jdk 14 of or 15 it

00:26:09,520 --> 00:26:14,240
doesn't really matter you have an even

00:26:12,080 --> 00:26:15,600
lighter runtime there's some dependency

00:26:14,240 --> 00:26:18,640
that has been removed

00:26:15,600 --> 00:26:19,679
for instance uh jax b was a required

00:26:18,640 --> 00:26:22,720
dependency

00:26:19,679 --> 00:26:25,440
in previous car version no

00:26:22,720 --> 00:26:27,360
now it has been removed to be lighter

00:26:25,440 --> 00:26:31,600
and and faster to start

00:26:27,360 --> 00:26:35,039
uh and we also have uh coming feature

00:26:31,600 --> 00:26:36,400
in the oven we still have a 4 to 10

00:26:35,039 --> 00:26:38,960
release coming

00:26:36,400 --> 00:26:41,039
it contains fixes and improvement there

00:26:38,960 --> 00:26:43,760
are no deep change or api changes

00:26:41,039 --> 00:26:45,039
there but uh it's still maintained and

00:26:43,760 --> 00:26:49,039
updating to the

00:26:45,039 --> 00:26:50,720
latest version of the dependencies

00:26:49,039 --> 00:26:52,480
so in terms of coming feature and other

00:26:50,720 --> 00:26:56,000
common features coming

00:26:52,480 --> 00:26:59,279
is uh karaf deluxe so carol devex

00:26:56,000 --> 00:27:01,440
is all about tooling for developer

00:26:59,279 --> 00:27:04,159
to simplify the way of using character

00:27:01,440 --> 00:27:07,039
speaking actually it provides

00:27:04,159 --> 00:27:08,240
three b components the first thing is an

00:27:07,039 --> 00:27:11,200
sdk

00:27:08,240 --> 00:27:13,760
so the sdk provides some annotation to

00:27:11,200 --> 00:27:16,960
simplify the way of creating a carafe

00:27:13,760 --> 00:27:17,520
application or even a made an

00:27:16,960 --> 00:27:20,480
application

00:27:17,520 --> 00:27:21,919
carafe in your code so basically what we

00:27:20,480 --> 00:27:23,360
plan to do is to have something like

00:27:21,919 --> 00:27:25,279
tariff.maine and you

00:27:23,360 --> 00:27:26,960
just start cara behind the hood you

00:27:25,279 --> 00:27:27,760
don't have to use a tart ball or

00:27:26,960 --> 00:27:30,880
whatever

00:27:27,760 --> 00:27:32,880
it's just half carafe as it is there's

00:27:30,880 --> 00:27:36,320
also a

00:27:32,880 --> 00:27:39,360
an extension junit 5 extension

00:27:36,320 --> 00:27:40,720
which is based a bit like pax exam that

00:27:39,360 --> 00:27:43,840
is actually improved

00:27:40,720 --> 00:27:45,279
and lighter pax exam is not only carafe

00:27:43,840 --> 00:27:48,399
it's a lgi

00:27:45,279 --> 00:27:50,559
and different framework so

00:27:48,399 --> 00:27:52,000
in devex we plan to do something more

00:27:50,559 --> 00:27:56,559
cara focus

00:27:52,000 --> 00:27:58,880
and uh and using junit 5.

00:27:56,559 --> 00:27:59,679
another thing which is i know pretty

00:27:58,880 --> 00:28:01,279
expected

00:27:59,679 --> 00:28:03,760
is the way of creating kind of

00:28:01,279 --> 00:28:05,679
distribution and docker image

00:28:03,760 --> 00:28:07,279
we already have some tuning but they are

00:28:05,679 --> 00:28:09,120
not so easy to use

00:28:07,279 --> 00:28:10,640
to be very confusing depending on the

00:28:09,120 --> 00:28:13,840
scope is really focused on

00:28:10,640 --> 00:28:16,480
on maven so what we plan to do in devx

00:28:13,840 --> 00:28:19,919
is really to have a tuning uh

00:28:16,480 --> 00:28:22,559
easier to use to create distribution

00:28:19,919 --> 00:28:23,200
uh more straightforward and all is based

00:28:22,559 --> 00:28:26,080
on bin

00:28:23,200 --> 00:28:27,919
and we facade this bin using a command

00:28:26,080 --> 00:28:31,279
line using maven or using

00:28:27,919 --> 00:28:31,919
gradle so it opens the usage of carafe

00:28:31,279 --> 00:28:35,360
to

00:28:31,919 --> 00:28:38,480
new people springboot i already

00:28:35,360 --> 00:28:42,000
talked about that so that's another

00:28:38,480 --> 00:28:44,799
important feature we are announcing

00:28:42,000 --> 00:28:45,600
and the purpose is really to have again

00:28:44,799 --> 00:28:47,760
a unique

00:28:45,600 --> 00:28:48,880
runtime where you can deploy any kind of

00:28:47,760 --> 00:28:51,840
application modules

00:28:48,880 --> 00:28:53,200
but really uh changing again the future

00:28:51,840 --> 00:28:56,159
of karaf

00:28:53,200 --> 00:28:57,279
we are not a no hdi runtime anymore we

00:28:56,159 --> 00:29:00,320
are more than that

00:28:57,279 --> 00:29:02,080
we are moderately runtime and it's it's

00:29:00,320 --> 00:29:04,320
all about that

00:29:02,080 --> 00:29:05,360
uh another thing that we introduce is a

00:29:04,320 --> 00:29:08,640
feature spec

00:29:05,360 --> 00:29:11,520
so uh again to simplify the use

00:29:08,640 --> 00:29:12,960
for you as a developer about the some

00:29:11,520 --> 00:29:16,080
specification

00:29:12,960 --> 00:29:19,520
uh java activation

00:29:16,080 --> 00:29:20,399
uh jax b or whatever we're gonna provide

00:29:19,520 --> 00:29:23,520
some

00:29:20,399 --> 00:29:24,320
approved feature in cara so it means

00:29:23,520 --> 00:29:27,679
that you can

00:29:24,320 --> 00:29:29,520
be able to do feature install spec jax b

00:29:27,679 --> 00:29:31,600
for instance and other box you're gonna

00:29:29,520 --> 00:29:34,159
have your jax b feature running

00:29:31,600 --> 00:29:35,679
it's a it's a bit like the enterprise

00:29:34,159 --> 00:29:38,399
feature repo we have

00:29:35,679 --> 00:29:39,760
but it's more generic and rollable for

00:29:38,399 --> 00:29:42,799
jdk specifications

00:29:39,760 --> 00:29:45,679
the purpose is ready to remove the

00:29:42,799 --> 00:29:46,640
jdk 9 folder we have in the leap folder

00:29:45,679 --> 00:29:49,520
of karaf

00:29:46,640 --> 00:29:52,240
so to simplify the world using these

00:29:49,520 --> 00:29:55,120
specifications

00:29:52,240 --> 00:29:57,279
so again a very light runtime the

00:29:55,120 --> 00:30:00,480
purpose is to have a faster

00:29:57,279 --> 00:30:02,720
startup reduce memory footprint uh

00:30:00,480 --> 00:30:06,000
one grower is really really good for

00:30:02,720 --> 00:30:08,799
that we we can leverage cds or whatever

00:30:06,000 --> 00:30:09,360
but even the run time by itself without

00:30:08,799 --> 00:30:11,919
talking about

00:30:09,360 --> 00:30:12,880
one row can be improved and it's what we

00:30:11,919 --> 00:30:16,640
are uh

00:30:12,880 --> 00:30:20,240
we are planning right now so one where i

00:30:16,640 --> 00:30:22,559
already talked about that uh is uh oigi

00:30:20,240 --> 00:30:23,440
prime more than with a single flat class

00:30:22,559 --> 00:30:26,720
loader

00:30:23,440 --> 00:30:28,960
uh it's already on the git box so

00:30:26,720 --> 00:30:31,520
you and github so you can already take a

00:30:28,960 --> 00:30:33,840
look on carafe dash one graph

00:30:31,520 --> 00:30:35,520
a first release is coming we need just

00:30:33,840 --> 00:30:38,559
polish the example

00:30:35,520 --> 00:30:42,799
and documentation but most of the

00:30:38,559 --> 00:30:44,799
of the features are still running

00:30:42,799 --> 00:30:47,120
some news about character cancer so

00:30:44,799 --> 00:30:50,320
there are new appenders coming

00:30:47,120 --> 00:30:51,760
snmp hdfs3 and others

00:30:50,320 --> 00:30:53,679
there are some improvement on the

00:30:51,760 --> 00:30:54,960
existing collectors and appenders like

00:30:53,679 --> 00:30:58,320
prometheus

00:30:54,960 --> 00:30:59,440
uh we can obviously use decanter in the

00:30:58,320 --> 00:31:02,320
current runtime

00:30:59,440 --> 00:31:03,919
but also in one word and better

00:31:02,320 --> 00:31:05,840
integration with all the character

00:31:03,919 --> 00:31:08,640
projects and apache projects

00:31:05,840 --> 00:31:09,760
i'm thinking about better leverage

00:31:08,640 --> 00:31:12,080
seller

00:31:09,760 --> 00:31:15,039
because seller will facet the j clouds

00:31:12,080 --> 00:31:16,559
and humanities api so we can leverage

00:31:15,039 --> 00:31:19,279
these indicator

00:31:16,559 --> 00:31:20,559
or project like apache skywalking so

00:31:19,279 --> 00:31:22,640
that's something that

00:31:20,559 --> 00:31:24,880
we plan there are new processors coming

00:31:22,640 --> 00:31:27,919
in in the counter as well

00:31:24,880 --> 00:31:31,200
uh about karaf cave for

00:31:27,919 --> 00:31:33,679
one who tested cave 42

00:31:31,200 --> 00:31:35,120
is a complete refactoring of cave and

00:31:33,679 --> 00:31:37,440
now we have a full

00:31:35,120 --> 00:31:38,320
artifact maven artifact repository

00:31:37,440 --> 00:31:40,159
manager

00:31:38,320 --> 00:31:41,679
we also have a deployer that allows you

00:31:40,159 --> 00:31:44,000
to manage a farm or

00:31:41,679 --> 00:31:44,960
a cara farm and we have a feature

00:31:44,000 --> 00:31:46,640
gateway

00:31:44,960 --> 00:31:48,000
so we have another feature coming in the

00:31:46,640 --> 00:31:51,039
docker image registry

00:31:48,000 --> 00:31:53,440
but you can use on-prem

00:31:51,039 --> 00:31:54,240
or on cloud it doesn't really matter and

00:31:53,440 --> 00:31:57,120
we have two

00:31:54,240 --> 00:31:57,679
uh updates the more plug-able storage

00:31:57,120 --> 00:31:59,919
back-end

00:31:57,679 --> 00:32:00,960
right now you use a file system a local

00:31:59,919 --> 00:32:02,640
file system

00:32:00,960 --> 00:32:04,720
and the purpose is to be able to

00:32:02,640 --> 00:32:07,440
leverage htfs or s3

00:32:04,720 --> 00:32:09,360
and the same for the metadata storage

00:32:07,440 --> 00:32:10,080
right now is based on the file system as

00:32:09,360 --> 00:32:15,840
well

00:32:10,080 --> 00:32:15,840
but we support etcds

00:32:19,360 --> 00:32:27,360
we have a complete refactoring uh going

00:32:22,640 --> 00:32:30,000
um we we keep asl cast as a module

00:32:27,360 --> 00:32:31,840
but today slr is really focused on

00:32:30,000 --> 00:32:34,720
hazardcast

00:32:31,840 --> 00:32:36,480
so as it will be will still be supported

00:32:34,720 --> 00:32:38,960
by that but as a module

00:32:36,480 --> 00:32:40,159
and we have new independent and atomic

00:32:38,960 --> 00:32:42,640
module coming

00:32:40,159 --> 00:32:44,799
focusing on kubernetes and j clouds and

00:32:42,640 --> 00:32:46,799
also cloud feature generally speaking

00:32:44,799 --> 00:32:48,640
and we also plan to have a plugable

00:32:46,799 --> 00:32:49,440
transport and discovery backend so

00:32:48,640 --> 00:32:52,640
instead of

00:32:49,440 --> 00:32:53,360
only leveraging other cast humanities we

00:32:52,640 --> 00:32:55,760
can

00:32:53,360 --> 00:32:58,720
have more pluggable discovery like

00:32:55,760 --> 00:32:58,720
ignite whatever

00:32:59,519 --> 00:33:04,480
another update about potential new sub

00:33:03,440 --> 00:33:07,679
projects coming

00:33:04,480 --> 00:33:10,080
in karaf so there's a discussion

00:33:07,679 --> 00:33:12,240
on apache service mix community to move

00:33:10,080 --> 00:33:14,399
service mix into the attic

00:33:12,240 --> 00:33:16,159
but there are some part of service mix

00:33:14,399 --> 00:33:17,120
evenly used by all the projects i'm

00:33:16,159 --> 00:33:20,559
thinking about karma

00:33:17,120 --> 00:33:23,840
i'm thinking about carafe itself

00:33:20,559 --> 00:33:26,080
so the purpose is to if we

00:33:23,840 --> 00:33:27,120
when we're gonna move service mix into

00:33:26,080 --> 00:33:29,679
the attic

00:33:27,120 --> 00:33:31,200
uh the purpose is also to have the

00:33:29,679 --> 00:33:34,240
existing bundles

00:33:31,200 --> 00:33:36,559
uh as part of karat but instead of doing

00:33:34,240 --> 00:33:39,200
bundle pad bundle as we did before

00:33:36,559 --> 00:33:40,799
it starts is more to do to store some

00:33:39,200 --> 00:33:42,720
description of the bundle

00:33:40,799 --> 00:33:44,480
and be able to create the bundle on the

00:33:42,720 --> 00:33:47,279
fly um

00:33:44,480 --> 00:33:48,720
so that's that's uh actually easier no

00:33:47,279 --> 00:33:51,919
need to release

00:33:48,720 --> 00:33:53,919
uh as we do before now so it's a

00:33:51,919 --> 00:33:55,279
we we will introduce a new tooling to do

00:33:53,919 --> 00:33:58,159
that on the fly

00:33:55,279 --> 00:33:59,200
uh the spec features the same uh service

00:33:58,159 --> 00:34:02,159
mix provides some

00:33:59,200 --> 00:34:02,799
some spec uh what we plan to do is to

00:34:02,159 --> 00:34:05,919
better

00:34:02,799 --> 00:34:07,679
and focus on geronimo on apache geronimo

00:34:05,919 --> 00:34:10,879
and so spec will be

00:34:07,679 --> 00:34:13,919
probably move as part of karaf or as

00:34:10,879 --> 00:34:13,919
part of geronimo

00:34:15,119 --> 00:34:21,119
that's that's all that i have

00:34:18,159 --> 00:34:21,520
it was pretty fast because i have to uh

00:34:21,119 --> 00:34:24,879
group

00:34:21,520 --> 00:34:26,639
two uh talks in one so what i can

00:34:24,879 --> 00:34:29,679
propose to you now guys is

00:34:26,639 --> 00:34:32,399
if you have any question um we

00:34:29,679 --> 00:34:33,440
we can uh share so i didn't take a look

00:34:32,399 --> 00:34:36,960
about the

00:34:33,440 --> 00:34:40,879
uh the chat uh but

00:34:36,960 --> 00:34:43,919
if if you want to to ask your question

00:34:40,879 --> 00:34:47,359
uh please do it on on on the chat

00:34:43,919 --> 00:34:49,839
and uh and ask and i will uh i will try

00:34:47,359 --> 00:34:49,839
to answer

00:34:53,679 --> 00:34:56,960
no questions so there is a question from

00:34:55,839 --> 00:35:00,640
thomas

00:34:56,960 --> 00:35:05,280
about is oagr existing

00:35:00,640 --> 00:35:08,400
s or icr code can run in one grower

00:35:05,280 --> 00:35:11,440
and the the question the answer is yes

00:35:08,400 --> 00:35:12,320
so basically uh if you take a look on

00:35:11,440 --> 00:35:14,160
the one group

00:35:12,320 --> 00:35:16,480
examples you will see that we actually

00:35:14,160 --> 00:35:16,880
have as yeah i'm gonna i'm gonna show

00:35:16,480 --> 00:35:19,839
you

00:35:16,880 --> 00:35:19,839
in a few sec

00:35:21,599 --> 00:35:25,040
so this is

00:35:27,599 --> 00:35:35,359
you can see there is some um

00:35:31,200 --> 00:35:39,040
examples so this is a pure uh

00:35:35,359 --> 00:35:40,400
you uh regularly so this is a bundle

00:35:39,040 --> 00:35:42,400
activator whatever

00:35:40,400 --> 00:35:44,160
and so yeah you're gonna you can walk

00:35:42,400 --> 00:35:46,720
out of the box and you can

00:35:44,160 --> 00:35:48,720
you can see there the shell can work and

00:35:46,720 --> 00:35:51,200
actually if you take a look so in

00:35:48,720 --> 00:35:52,880
spring boot this is the notion of

00:35:51,200 --> 00:35:56,079
starter

00:35:52,880 --> 00:35:58,000
in one group we name it sepage which is

00:35:56,079 --> 00:36:00,320
basically the same so you can provide

00:35:58,000 --> 00:36:02,240
a separate provide all the dependencies

00:36:00,320 --> 00:36:04,079
the kind of bar

00:36:02,240 --> 00:36:05,280
boom where you have all the dependencies

00:36:04,079 --> 00:36:08,320
you need to

00:36:05,280 --> 00:36:11,440
just create your application so

00:36:08,320 --> 00:36:13,280
this is an example of

00:36:11,440 --> 00:36:15,040
for instance i don't know if you want to

00:36:13,280 --> 00:36:17,119
take a look on uh

00:36:15,040 --> 00:36:18,640
no checks has white but maybe more jack

00:36:17,119 --> 00:36:23,520
stars

00:36:18,640 --> 00:36:26,400
this one so you can see there that i'm

00:36:23,520 --> 00:36:31,359
using blueprints in this example

00:36:26,400 --> 00:36:31,359
but and it will work in one word in one

00:36:38,839 --> 00:36:42,960
word

00:36:40,880 --> 00:36:45,520
uh this question is there with two

00:36:42,960 --> 00:36:46,320
digital cab as application it fits with

00:36:45,520 --> 00:36:47,350
the program

00:36:46,320 --> 00:36:50,460
code um

00:36:47,350 --> 00:36:50,460
[Music]

00:36:51,280 --> 00:36:54,480
several questions so there's a question

00:36:53,200 --> 00:36:55,839
from carlo about uh

00:36:54,480 --> 00:36:57,920
which version of cara supports

00:36:55,839 --> 00:37:00,079
springboots um

00:36:57,920 --> 00:37:01,119
actually when the springboard module is

00:37:00,079 --> 00:37:04,480
still in development

00:37:01,119 --> 00:37:05,920
it's not yet publicly available uh he is

00:37:04,480 --> 00:37:09,359
a poc

00:37:05,920 --> 00:37:11,839
and he should be he will run in any

00:37:09,359 --> 00:37:12,720
car version so you will be able to

00:37:11,839 --> 00:37:17,359
install the

00:37:12,720 --> 00:37:17,359
the feature in any car version and

00:37:20,839 --> 00:37:25,680
render

00:37:23,119 --> 00:37:27,040
any timeline on avatar from dmitry

00:37:25,680 --> 00:37:30,000
pretty soon

00:37:27,040 --> 00:37:32,880
pretty soon uh actually i can i can

00:37:30,000 --> 00:37:32,880
already show you

00:37:34,839 --> 00:37:39,599
um

00:37:36,640 --> 00:37:41,839
i can only already show you what is done

00:37:39,599 --> 00:37:41,839
um

00:37:42,160 --> 00:37:51,839
let me share my screen again

00:38:03,200 --> 00:38:07,599
so this is a springboot module um

00:38:08,320 --> 00:38:12,000
so you can see that these are already

00:38:10,960 --> 00:38:14,400
available so

00:38:12,000 --> 00:38:16,079
uh you can see the command there to

00:38:14,400 --> 00:38:19,200
install springboot application

00:38:16,079 --> 00:38:21,200
and you can see uh internally so this is

00:38:19,200 --> 00:38:23,040
the springboot service imp

00:38:21,200 --> 00:38:24,640
it's where you can register so you can

00:38:23,040 --> 00:38:27,839
see there that we

00:38:24,640 --> 00:38:30,400
looking for stack we creating metadata

00:38:27,839 --> 00:38:31,200
uh it's where we creating the class

00:38:30,400 --> 00:38:33,359
loader

00:38:31,200 --> 00:38:34,320
for the launcher so we have a dedicated

00:38:33,359 --> 00:38:38,640
launcher

00:38:34,320 --> 00:38:41,920
uh for uh for

00:38:38,640 --> 00:38:44,960
uh spring boots so if i show you

00:38:41,920 --> 00:38:47,839
the launcher quickly

00:38:44,960 --> 00:38:47,839
it's there

00:38:48,400 --> 00:38:51,839
so you can see that we are using a

00:38:50,400 --> 00:38:54,960
reflection uh

00:38:51,839 --> 00:38:57,680
to find the main method defined in this

00:38:54,960 --> 00:38:59,359
springboot jar file it's where we we can

00:38:57,680 --> 00:39:02,560
see that we overwrite some bean

00:38:59,359 --> 00:39:05,599
internally it's done there you

00:39:02,560 --> 00:39:08,320
we also have some

00:39:05,599 --> 00:39:08,800
some agave and a big class which is

00:39:08,320 --> 00:39:10,800
actually

00:39:08,800 --> 00:39:11,920
generated using acm is the class

00:39:10,800 --> 00:39:14,880
generator

00:39:11,920 --> 00:39:16,079
it's basically where we can override you

00:39:14,880 --> 00:39:18,720
can see there that

00:39:16,079 --> 00:39:20,720
for instance by default spring boot is

00:39:18,720 --> 00:39:23,200
using off spring boot

00:39:20,720 --> 00:39:24,480
spring framework good logging slf4j

00:39:23,200 --> 00:39:27,280
logging system

00:39:24,480 --> 00:39:28,320
and what we do is we act we override

00:39:27,280 --> 00:39:31,200
this bin by

00:39:28,320 --> 00:39:33,599
r bin which is the pax logging base and

00:39:31,200 --> 00:39:36,400
thanks to that i can override some uh

00:39:33,599 --> 00:39:38,320
some beam so that's the way it works so

00:39:36,400 --> 00:39:40,160
back on your question limited when it

00:39:38,320 --> 00:39:43,839
will be available pretty soon

00:39:40,160 --> 00:39:43,839
really pretty soon

00:39:47,119 --> 00:39:53,119
yes guillaume so basically any

00:39:50,320 --> 00:39:54,839
spring boot again is a pure spring boot

00:39:53,119 --> 00:39:59,920
application

00:39:54,839 --> 00:40:01,280
uh so any any starter any dependency

00:39:59,920 --> 00:40:04,160
that you use

00:40:01,280 --> 00:40:06,000
in springboot including screen data you

00:40:04,160 --> 00:40:11,839
will be able to using car

00:40:06,000 --> 00:40:11,839
using thanks to the springboot service

00:40:20,319 --> 00:40:27,920
you're welcome in your question

00:40:25,680 --> 00:40:27,920
ah

00:40:30,240 --> 00:40:37,200
to be honest thomas probably

00:40:33,280 --> 00:40:40,240
the reason is pax exam is really

00:40:37,200 --> 00:40:43,440
i mean i did a new release

00:40:40,240 --> 00:40:47,119
uh but anytime we add new features

00:40:43,440 --> 00:40:50,560
i mean it's painful we need a cleanup

00:40:47,119 --> 00:40:51,359
uh and again the pro fax exam is a great

00:40:50,560 --> 00:40:55,119
tool

00:40:51,359 --> 00:40:58,960
that is not only cara focus

00:40:55,119 --> 00:41:02,560
so priority debits will be

00:40:58,960 --> 00:41:06,079
the judicial extension will

00:41:02,560 --> 00:41:08,960
use part of pax exam but for your

00:41:06,079 --> 00:41:11,359
the user facing api it will use its own

00:41:08,960 --> 00:41:11,359
api

00:41:15,920 --> 00:41:20,960
uh richard asks will david support such

00:41:18,880 --> 00:41:24,079
a thing let me read

00:41:20,960 --> 00:41:24,079
the channel

00:41:25,440 --> 00:41:28,560
oh uh you talk about the eclipse right

00:41:28,160 --> 00:41:34,240
here

00:41:28,560 --> 00:41:37,359
which up i think

00:41:34,240 --> 00:41:38,640
okay so you want to do some kind of live

00:41:37,359 --> 00:41:40,500
coding

00:41:38,640 --> 00:41:44,000
uh in eclipse

00:41:40,500 --> 00:41:47,040
[Music]

00:41:44,000 --> 00:41:48,800
that's not the purpose of devex i think

00:41:47,040 --> 00:41:51,760
it's more on eclipse

00:41:48,800 --> 00:41:52,880
related stuff in the past we have a new

00:41:51,760 --> 00:41:56,720
ford which is named

00:41:52,880 --> 00:41:58,720
um uh eclipse and eclipse integration

00:41:56,720 --> 00:42:02,560
for karaf ekf

00:41:58,720 --> 00:42:04,560
but um unfortunately we didn't support

00:42:02,560 --> 00:42:06,640
this anymore

00:42:04,560 --> 00:42:09,839
so for this i'm not sure we're

00:42:06,640 --> 00:42:13,610
gonna in the shorter

00:42:09,839 --> 00:42:15,200
anything to uh matching what you need

00:42:13,610 --> 00:42:17,620
[Music]

00:42:15,200 --> 00:42:20,000
if there are some eclipse developers or

00:42:17,620 --> 00:42:22,000
[Music]

00:42:20,000 --> 00:42:24,480
people that want to help i would be

00:42:22,000 --> 00:42:24,480
great but

00:42:24,640 --> 00:42:30,720
one grower ah

00:42:27,680 --> 00:42:30,720
what's the motivation

00:42:32,640 --> 00:42:36,160
there are two motivations the first

00:42:34,400 --> 00:42:38,720
motivation is

00:42:36,160 --> 00:42:40,160
to provide an alternative and especially

00:42:38,720 --> 00:42:44,720
for the one who knows

00:42:40,160 --> 00:42:46,560
osgi they can i mean today or lgi prime

00:42:44,720 --> 00:42:48,640
model is pretty illegal

00:42:46,560 --> 00:42:50,000
and it's a good one but the main

00:42:48,640 --> 00:42:53,040
drawback is

00:42:50,000 --> 00:42:54,480
how the hell about dependency extra most

00:42:53,040 --> 00:42:56,560
of the time the elbow

00:42:54,480 --> 00:42:58,480
about dependencies because people don't

00:42:56,560 --> 00:43:00,800
know how agi is working

00:42:58,480 --> 00:43:00,800
i mean

00:43:01,599 --> 00:43:05,280
my video is off i don't think so for

00:43:04,319 --> 00:43:09,040
sure

00:43:05,280 --> 00:43:12,079
it should be on all right anyway

00:43:09,040 --> 00:43:15,520
back on question um

00:43:12,079 --> 00:43:15,520
the motivation is

00:43:15,680 --> 00:43:20,240
for one grower is the program the prime

00:43:18,240 --> 00:43:24,160
model is fine

00:43:20,240 --> 00:43:27,300
but the dependency it can be

00:43:24,160 --> 00:43:29,520
help as people say

00:43:27,300 --> 00:43:32,720
[Music]

00:43:29,520 --> 00:43:36,400
so but and

00:43:32,720 --> 00:43:40,079
in my opinion oagi again

00:43:36,400 --> 00:43:42,319
is internally to

00:43:40,079 --> 00:43:43,680
is an internal purpose i mean the fact

00:43:42,319 --> 00:43:46,720
that karate is based on knowledge

00:43:43,680 --> 00:43:50,880
it doesn't really matter um

00:43:46,720 --> 00:43:53,359
but as a facing the prime model is fine

00:43:50,880 --> 00:43:54,000
and but but again the class loader can

00:43:53,359 --> 00:43:56,079
be an issue

00:43:54,000 --> 00:43:57,760
so the purpose of one word is to

00:43:56,079 --> 00:44:00,720
leverage all the feature

00:43:57,760 --> 00:44:03,200
all the prime model you have in or agi

00:44:00,720 --> 00:44:04,960
but without any bundle whatever you just

00:44:03,200 --> 00:44:06,800
have a single transformer

00:44:04,960 --> 00:44:08,000
so it's really an alternative to spring

00:44:06,800 --> 00:44:10,480
boot but with a different

00:44:08,000 --> 00:44:11,440
prior model so it's more to migrate

00:44:10,480 --> 00:44:14,160
people from

00:44:11,440 --> 00:44:14,480
aja to something else if you already

00:44:14,160 --> 00:44:16,640
know

00:44:14,480 --> 00:44:20,079
springboot just deploy screen booting in

00:44:16,640 --> 00:44:20,079
cara i mean that's what's

00:44:20,839 --> 00:44:23,839
easier

00:44:24,800 --> 00:44:28,960
uh it doesn't leave so the question is

00:44:26,800 --> 00:44:30,079
how does one work compared to hdi

00:44:28,960 --> 00:44:33,280
connect

00:44:30,079 --> 00:44:34,319
one word doesn't use the ogi connect

00:44:33,280 --> 00:44:38,560
specification

00:44:34,319 --> 00:44:41,119
is a completely uh

00:44:38,560 --> 00:44:41,119
i would say

00:44:41,770 --> 00:44:46,000
[Music]

00:44:42,960 --> 00:44:49,119
coming from our ideas so

00:44:46,000 --> 00:44:49,119
no specification

00:44:49,359 --> 00:44:53,920
the purpose there are some drawbacks

00:44:51,599 --> 00:44:55,040
about ohi connecting the way that ohio

00:44:53,920 --> 00:44:57,760
connects still use an

00:44:55,040 --> 00:44:58,960
agi framework the underhood and so you

00:44:57,760 --> 00:45:02,839
still have the same

00:44:58,960 --> 00:45:05,280
uh you still have the same issue

00:45:02,839 --> 00:45:08,640
uh and

00:45:05,280 --> 00:45:12,000
uh than in in new agi so the purpose of

00:45:08,640 --> 00:45:13,520
one word is really a single password uh

00:45:12,000 --> 00:45:15,119
we asked several questions about the

00:45:13,520 --> 00:45:18,319
timeline

00:45:15,119 --> 00:45:21,440
so about spring boots the timeline is um

00:45:18,319 --> 00:45:24,240
i would say a month for two so

00:45:21,440 --> 00:45:24,880
probably end of october november we're

00:45:24,240 --> 00:45:29,280
gonna have

00:45:24,880 --> 00:45:32,720
some uh first preview of spring boots

00:45:29,280 --> 00:45:35,839
i mean by by preview and mvp about devex

00:45:32,720 --> 00:45:38,960
uh i would say end of this year uh

00:45:35,839 --> 00:45:39,599
so i would say december yeah for around

00:45:38,960 --> 00:45:43,680
christmas

00:45:39,599 --> 00:45:47,839
something like that one slide i

00:45:43,680 --> 00:45:47,839
just have always

00:45:48,960 --> 00:45:56,960
using the oigi specification way

00:45:53,200 --> 00:46:00,000
meaning a bundle bundle activator

00:45:56,960 --> 00:46:01,040
extra this is an import to implement the

00:46:00,000 --> 00:46:03,520
igi in c

00:46:01,040 --> 00:46:04,240
c plus plus the name was celtics but it

00:46:03,520 --> 00:46:07,040
was uh

00:46:04,240 --> 00:46:09,520
i don't think it's maintained anymore so

00:46:07,040 --> 00:46:14,480
bioasia native no nothing about c or c

00:46:09,520 --> 00:46:16,960
express it was really about uh

00:46:14,480 --> 00:46:20,160
about the way of creating the bundles

00:46:16,960 --> 00:46:20,160
and and the activator

00:46:21,760 --> 00:46:29,839
all right i think so anyway uh

00:46:24,880 --> 00:46:29,839
you have uh back on on the slides

00:46:30,400 --> 00:46:37,119
just to to summarize so

00:46:34,400 --> 00:46:38,480
you have a kind of website uh main list

00:46:37,119 --> 00:46:42,480
we also have a

00:46:38,480 --> 00:46:43,280
uh the carav channel on slack the asl

00:46:42,480 --> 00:46:46,079
slack

00:46:43,280 --> 00:46:48,000
uh you can uh send an email uh if you

00:46:46,079 --> 00:46:50,079
want to ping me directly

00:46:48,000 --> 00:46:52,240
uh it's pretty easy to find my email

00:46:50,079 --> 00:46:53,119
somewhere so you can you can ping me or

00:46:52,240 --> 00:46:57,040
on slack

00:46:53,119 --> 00:47:00,240
but yeah but uh i wanted to

00:46:57,040 --> 00:47:03,280
uh to provide you an highlight about

00:47:00,240 --> 00:47:06,000
the new direction taken by karaf

00:47:03,280 --> 00:47:08,800
so it's more than yeah thanks to marvel

00:47:06,000 --> 00:47:08,800
that's historics

00:47:09,520 --> 00:47:17,680
it's keep in mind that

00:47:12,560 --> 00:47:17,680
asia is not the main purpose of cara

00:47:19,520 --> 00:47:25,839
so the purpose of carafe is to be

00:47:22,800 --> 00:47:29,119
the first moderate runtime

00:47:25,839 --> 00:47:31,760
that you can use with any kind of

00:47:29,119 --> 00:47:31,760
artifact

00:47:33,440 --> 00:47:35,920
all right

00:47:37,040 --> 00:47:40,640
if we don't have any question i'm gonna

00:47:39,200 --> 00:47:45,599
stop this session

00:47:40,640 --> 00:47:45,599
and uh see you on the next one

00:47:46,160 --> 00:47:53,839
thanks guys see you soon

00:48:05,760 --> 00:48:07,839

YouTube URL: https://www.youtube.com/watch?v=fAFi9Q2LFuM


