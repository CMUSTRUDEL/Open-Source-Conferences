Title: #ACEU19: Lars Eilebrecht – A Beginner's Guide to HTTPS and TLS
Publication date: 2019-10-29
Playlist: ApacheCon Europe 2019 – Berlin
Description: 
	More: https://aceu19.apachecon.com/session/beginners-guide-https-and-tls

This talk will introduce you to the fundamentals of securing communications with HTTPS. We will start by explaining the basics of X.509 server and client certificates, certification authorities, and using the OpenSSL toolkit. The TLS/SSL protocol will be introduced and how it is used together with HTTP in order to provide for data encryption, integrity, and authentication. We will talk through some important configuration details, standard use cases, common pitfalls, known SSL vulnerabilities, and issues when using HTTPS. The Apache HTTP Server will be used to provide specific examples, but the general information of the talk will be applicable to most server software that supports HTTPS.
Captions: 
	00:00:04,570 --> 00:00:09,490
perfect so I've been involved with the

00:00:06,850 --> 00:00:10,960
Apache web server since 1996 which you

00:00:09,490 --> 00:00:15,700
may have had if you went to the founders

00:00:10,960 --> 00:00:17,830
panel this morning and I used to be

00:00:15,700 --> 00:00:19,330
based as an independent artist security

00:00:17,830 --> 00:00:21,430
consultant in London for the last ten

00:00:19,330 --> 00:00:24,880
years but I actually last month's moved

00:00:21,430 --> 00:00:28,630
to this beautiful city of Berlin I've

00:00:24,880 --> 00:00:32,529
been in Wolfe with security for almost

00:00:28,630 --> 00:00:35,410
ever not always my job involved being in

00:00:32,529 --> 00:00:37,660
a security specific position but it's

00:00:35,410 --> 00:00:40,810
really where my interest is I'm also a

00:00:37,660 --> 00:00:42,460
member of the ASF and security team what

00:00:40,810 --> 00:00:44,320
I want to cover in this presentation so

00:00:42,460 --> 00:00:47,830
it it says already it's a beginner's

00:00:44,320 --> 00:00:49,300
guide to HTTP and TLS probably some of

00:00:47,830 --> 00:00:53,710
you in the audience are not necessarily

00:00:49,300 --> 00:00:56,170
beginners but being having worked as a

00:00:53,710 --> 00:00:58,630
security consultant I have seen things

00:00:56,170 --> 00:01:01,350
going wrong when it comes to TLS it is a

00:00:58,630 --> 00:01:04,689
complicated topic and I've seen even

00:01:01,350 --> 00:01:08,259
senior DevOps people or admins getting

00:01:04,689 --> 00:01:10,060
things wrong what I want to cover in

00:01:08,259 --> 00:01:12,580
this presentation is basically start

00:01:10,060 --> 00:01:16,420
initially was with a basic overview

00:01:12,580 --> 00:01:18,460
about HTTP TLS covers some basic crypto

00:01:16,420 --> 00:01:21,510
details so we'll go through this

00:01:18,460 --> 00:01:24,100
reasonably quickly it's just basically

00:01:21,510 --> 00:01:26,680
mentioning a few abbreviations names

00:01:24,100 --> 00:01:29,049
making sure you have a you know what I'm

00:01:26,680 --> 00:01:31,979
talking about when I when I come to

00:01:29,049 --> 00:01:34,630
these these topics I talking about

00:01:31,979 --> 00:01:36,549
certificates keys talking about some

00:01:34,630 --> 00:01:39,880
basic configuration details when it

00:01:36,549 --> 00:01:41,920
comes to HTTPS getting into a bit more

00:01:39,880 --> 00:01:45,580
advanced topics about protocol

00:01:41,920 --> 00:01:47,799
configuration I will go into a little

00:01:45,580 --> 00:01:50,909
bit of detail about the new TLS 1.3

00:01:47,799 --> 00:01:54,430
stuff and also some configuration

00:01:50,909 --> 00:01:58,000
details or features session caching

00:01:54,430 --> 00:02:01,390
session tickets this is a generic talk

00:01:58,000 --> 00:02:03,280
however I will use some examples how

00:02:01,390 --> 00:02:05,409
this is configured using the Apache web

00:02:03,280 --> 00:02:08,080
server however the idea is that these

00:02:05,409 --> 00:02:12,930
things are applicable to whatever kind

00:02:08,080 --> 00:02:15,430
of server application you are using and

00:02:12,930 --> 00:02:18,270
if I have time at the end maybe a few

00:02:15,430 --> 00:02:21,120
more advanced features and

00:02:18,270 --> 00:02:25,290
details let's talk about crypto

00:02:21,120 --> 00:02:28,830
essentials so obviously public key or

00:02:25,290 --> 00:02:31,560
asymmetric cryptography is an important

00:02:28,830 --> 00:02:35,070
part about TLS that's where you have the

00:02:31,560 --> 00:02:38,160
ARS ideas a algorithms that that are

00:02:35,070 --> 00:02:41,220
important it's about data encrypted with

00:02:38,160 --> 00:02:43,770
the public key can only be encrypted by

00:02:41,220 --> 00:02:46,320
the corresponding private key so by is

00:02:43,770 --> 00:02:48,660
the data being sent to your server can

00:02:46,320 --> 00:02:51,510
only be decrypted by the server and vice

00:02:48,660 --> 00:02:54,480
versa and when it comes to signing data

00:02:51,510 --> 00:02:57,960
signed with the private key can only be

00:02:54,480 --> 00:03:01,200
verified by with it with the public key

00:02:57,960 --> 00:03:02,760
which which is typically how a browser

00:03:01,200 --> 00:03:05,400
would be able to figure out that he's

00:03:02,760 --> 00:03:07,350
really talking to the correct server

00:03:05,400 --> 00:03:11,310
that owns that certificate and that

00:03:07,350 --> 00:03:14,250
hostname that domain name key agreement

00:03:11,310 --> 00:03:17,100
protocols are important because the

00:03:14,250 --> 00:03:19,500
whole communication was TLA TLS isn't

00:03:17,100 --> 00:03:21,000
using public key crypto it's it needs to

00:03:19,500 --> 00:03:23,010
use symmetric crypto because otherwise

00:03:21,000 --> 00:03:28,050
it would be too slow that's where these

00:03:23,010 --> 00:03:31,380
key agreement protocols are important th

00:03:28,050 --> 00:03:34,640
diffie-hellman or ephemeral different

00:03:31,380 --> 00:03:38,130
which is the most popular one these days

00:03:34,640 --> 00:03:41,430
symmetric key crypto really no a s as

00:03:38,130 --> 00:03:43,790
one of the the main encryption protocols

00:03:41,430 --> 00:03:45,720
and algorithms these days or ciphers

00:03:43,790 --> 00:03:49,440
hash function message authentication

00:03:45,720 --> 00:03:52,080
codes just to mention the the basics

00:03:49,440 --> 00:03:53,040
that exist in this area when it comes to

00:03:52,080 --> 00:03:56,900
hash functions

00:03:53,040 --> 00:04:00,060
these days it's char to char char 3 I

00:03:56,900 --> 00:04:02,550
think more or less everywhere by now

00:04:00,060 --> 00:04:07,430
we've got rid of em md5 which is

00:04:02,550 --> 00:04:10,910
basically insecure so that's important

00:04:07,430 --> 00:04:15,060
so why do we actually want all of this

00:04:10,910 --> 00:04:16,890
HTTP and TLS it's about three basic

00:04:15,060 --> 00:04:19,760
things or three important things which

00:04:16,890 --> 00:04:22,650
is confidentiality and data privacy

00:04:19,760 --> 00:04:24,860
making sure that no one can can read

00:04:22,650 --> 00:04:28,919
your data that's being exchanged between

00:04:24,860 --> 00:04:31,110
a browser and the server or a client and

00:04:28,919 --> 00:04:32,250
a and a recipient or client in the

00:04:31,110 --> 00:04:35,229
server

00:04:32,250 --> 00:04:37,449
and making sure that only the intended

00:04:35,229 --> 00:04:40,030
recipient is able to decrypt the data

00:04:37,449 --> 00:04:41,889
and be able to read the data it's also

00:04:40,030 --> 00:04:44,530
about authentication as I talked about

00:04:41,889 --> 00:04:48,220
the signing algorithms it's about making

00:04:44,530 --> 00:04:50,500
sure that you as the the person behind

00:04:48,220 --> 00:04:53,410
the browser knows you're talking to the

00:04:50,500 --> 00:04:56,410
right server but if you use client key

00:04:53,410 --> 00:04:58,360
authentication also giving the the

00:04:56,410 --> 00:05:02,830
server the possibility of authenticating

00:04:58,360 --> 00:05:07,990
the user to figure out or to to log a

00:05:02,830 --> 00:05:10,000
user in for example and sometimes not

00:05:07,990 --> 00:05:12,610
not specifically being mentioned but

00:05:10,000 --> 00:05:15,550
it's also about data integrity making

00:05:12,610 --> 00:05:17,830
sure that no one is able to tamper with

00:05:15,550 --> 00:05:22,199
the data even if it's if you're not able

00:05:17,830 --> 00:05:25,360
to as an eavesdropper or malicious a

00:05:22,199 --> 00:05:28,539
middleman basically even if you cannot

00:05:25,360 --> 00:05:31,630
read the data you also cannot modify the

00:05:28,539 --> 00:05:33,190
data without causing errors or causing

00:05:31,630 --> 00:05:37,840
problems so that's the data integrity

00:05:33,190 --> 00:05:39,669
part just very very briefly where this

00:05:37,840 --> 00:05:43,150
whole thing actually sits in the in the

00:05:39,669 --> 00:05:47,110
layer model basically everything happens

00:05:43,150 --> 00:05:50,740
on the application layer HTTP is not a

00:05:47,110 --> 00:05:54,840
separate protocol in terms of HTTP it's

00:05:50,740 --> 00:05:56,979
really that TLS record layer plus the

00:05:54,840 --> 00:05:58,590
additional protocols that handle the

00:05:56,979 --> 00:06:01,419
handshake and and a few other things

00:05:58,590 --> 00:06:04,150
that sit on top of that plus HTTP

00:06:01,419 --> 00:06:07,630
sitting on top so basically a browser

00:06:04,150 --> 00:06:09,580
first establishes the TLS connection or

00:06:07,630 --> 00:06:11,590
any kind of client and then whatever

00:06:09,580 --> 00:06:20,949
protocol is running over it happens as

00:06:11,590 --> 00:06:25,330
it as it would without encryption these

00:06:20,949 --> 00:06:26,919
days I think TLS is more let's say

00:06:25,330 --> 00:06:30,220
what's the right word accepted or

00:06:26,919 --> 00:06:31,659
commonly being used but there still if

00:06:30,220 --> 00:06:33,639
you look at documentation or talk to

00:06:31,659 --> 00:06:36,449
people people talk about SSL

00:06:33,639 --> 00:06:38,590
Certificates when people talk about SSL

00:06:36,449 --> 00:06:41,650
Certificates today what they really mean

00:06:38,590 --> 00:06:45,610
it's a so-called x.509 certificate for

00:06:41,650 --> 00:06:47,500
use was tls/ssl was the original secure

00:06:45,610 --> 00:06:51,879
it's layer protocol that was originally

00:06:47,500 --> 00:06:54,099
developed by Netscape that was 94 any of

00:06:51,879 --> 00:06:56,229
these SSL to as a cell three protocols

00:06:54,099 --> 00:06:58,449
even though in many cases still

00:06:56,229 --> 00:07:01,479
supported by service offering clients of

00:06:58,449 --> 00:07:04,020
where are deprecated and insecure and

00:07:01,479 --> 00:07:06,699
shouldn't be used and should be disabled

00:07:04,020 --> 00:07:09,250
TLS is what you should use

00:07:06,699 --> 00:07:11,520
except for TLS one that's also something

00:07:09,250 --> 00:07:15,370
you shouldn't really be using anymore

00:07:11,520 --> 00:07:17,860
1.1 I think you should only use this and

00:07:15,370 --> 00:07:19,870
if you have a dependency on a client

00:07:17,860 --> 00:07:23,080
that really doesn't support anything

00:07:19,870 --> 00:07:25,419
else it's not it's not per se insecure

00:07:23,080 --> 00:07:29,680
but it's not really what you want to use

00:07:25,419 --> 00:07:31,029
these days anymore what's basically at

00:07:29,680 --> 00:07:34,800
least when it comes to the world wide

00:07:31,029 --> 00:07:38,759
web and browsers works with any

00:07:34,800 --> 00:07:43,360
reasonably modern browser is TLS 1.2

00:07:38,759 --> 00:07:49,090
since August last year we have the final

00:07:43,360 --> 00:07:55,479
specification being published by the by

00:07:49,090 --> 00:07:57,789
the as now see for TLS 1.3 however it

00:07:55,479 --> 00:08:02,229
will take a very long time before this

00:07:57,789 --> 00:08:04,180
really becomes supported everywhere yes

00:08:02,229 --> 00:08:09,069
many modern browsers recent versions

00:08:04,180 --> 00:08:12,099
support 1.3 service as well but the

00:08:09,069 --> 00:08:14,139
problem is that TLS 1.2 will not go away

00:08:12,099 --> 00:08:17,159
anytime soon but I'll I'll get to that

00:08:14,139 --> 00:08:19,750
in a moment in a bit more detail and

00:08:17,159 --> 00:08:21,430
again very very briefly I don't want to

00:08:19,750 --> 00:08:24,039
go into the detail of the actual

00:08:21,430 --> 00:08:26,800
handshake just to mention that again

00:08:24,039 --> 00:08:28,539
this is that additional layer that that

00:08:26,800 --> 00:08:31,029
happens first the the client needs to

00:08:28,539 --> 00:08:34,599
establish that TLS connection and that's

00:08:31,029 --> 00:08:37,690
the handshake protocol in until as 1.3

00:08:34,599 --> 00:08:41,169
this is significantly improved in terms

00:08:37,690 --> 00:08:42,610
of the round trips and the time it

00:08:41,169 --> 00:08:46,209
requires to actually establish a

00:08:42,610 --> 00:08:49,089
connection so yes you do want to use 1.3

00:08:46,209 --> 00:08:51,519
where possible because it simply saves a

00:08:49,089 --> 00:08:54,910
lot of time what's really expensive is

00:08:51,519 --> 00:08:57,339
the asymmetric crypto dealing with RSA

00:08:54,910 --> 00:08:58,100
or these these

00:08:57,339 --> 00:09:01,339
encryption

00:08:58,100 --> 00:09:02,540
algorithms they are very slow it's it's

00:09:01,339 --> 00:09:05,480
something that happens during the

00:09:02,540 --> 00:09:07,940
handshake and you don't want this to

00:09:05,480 --> 00:09:10,730
happen or you want this to happen as

00:09:07,940 --> 00:09:12,410
infrequently as possible so typically

00:09:10,730 --> 00:09:14,389
you establish a session and you want to

00:09:12,410 --> 00:09:16,069
maintain that session so I get to

00:09:14,389 --> 00:09:20,110
talking about session caching and

00:09:16,069 --> 00:09:22,759
session tickets later in the in the talk

00:09:20,110 --> 00:09:25,029
just a few abbreviations I mentioned ex

00:09:22,759 --> 00:09:29,509
travel I already that's an ITU

00:09:25,029 --> 00:09:31,339
technology standard from 1988 which is

00:09:29,509 --> 00:09:34,269
basically just a standard for public key

00:09:31,339 --> 00:09:37,399
infrastructures how these certificates

00:09:34,269 --> 00:09:40,339
keys look like from a from a format

00:09:37,399 --> 00:09:44,930
point of view public key infrastructure

00:09:40,339 --> 00:09:46,699
is basically if you look at what you

00:09:44,930 --> 00:09:47,389
haven't your browsers and what we use on

00:09:46,699 --> 00:09:50,269
the World Wide Web

00:09:47,389 --> 00:09:53,720
that's basically the how would you refer

00:09:50,269 --> 00:09:59,449
to it the the global PKI that that

00:09:53,720 --> 00:10:01,339
drives how how we handle HTTP on the

00:09:59,449 --> 00:10:04,339
world world web however you can set up

00:10:01,339 --> 00:10:06,589
your own PKI you can set up a pika in

00:10:04,339 --> 00:10:10,160
your company you can set up a test one

00:10:06,589 --> 00:10:12,529
for a specific build system or test

00:10:10,160 --> 00:10:14,750
server or something so it just defines

00:10:12,529 --> 00:10:17,060
the whole domain where you define these

00:10:14,750 --> 00:10:20,930
are the certificates being issues this

00:10:17,060 --> 00:10:24,009
is the root CA like the certification

00:10:20,930 --> 00:10:26,740
authority which issues the certificates

00:10:24,009 --> 00:10:29,240
and it issues certificates based on a

00:10:26,740 --> 00:10:32,540
certificate signing request referred to

00:10:29,240 --> 00:10:34,730
as a CSR so basically the the

00:10:32,540 --> 00:10:35,959
certification Authority would not create

00:10:34,730 --> 00:10:39,410
a private key the private key is

00:10:35,959 --> 00:10:42,680
something that remains on your laptop or

00:10:39,410 --> 00:10:45,769
in a secure location depending how you

00:10:42,680 --> 00:10:47,529
handle this and you would create a

00:10:45,769 --> 00:10:51,680
so-called co-sign sent this to the CA

00:10:47,529 --> 00:10:53,839
they perform identification

00:10:51,680 --> 00:10:55,610
authentication checks or more like

00:10:53,839 --> 00:10:58,160
identification checks to make sure that

00:10:55,610 --> 00:10:59,660
you are the owner of I know if it's

00:10:58,160 --> 00:11:03,380
about the website it would be about the

00:10:59,660 --> 00:11:05,600
domain name if you run your your company

00:11:03,380 --> 00:11:07,850
pic I it would be other forms of

00:11:05,600 --> 00:11:10,220
identification like making sure that the

00:11:07,850 --> 00:11:11,730
name is what what's in your password for

00:11:10,220 --> 00:11:14,550
example

00:11:11,730 --> 00:11:16,770
ca'se are also required to maintain a

00:11:14,550 --> 00:11:19,170
CEO l a certificate revocation list

00:11:16,770 --> 00:11:22,080
because sometimes well certificates

00:11:19,170 --> 00:11:24,960
expire but certificates can also be

00:11:22,080 --> 00:11:26,220
revoked either because someone lost the

00:11:24,960 --> 00:11:32,760
private key because they were

00:11:26,220 --> 00:11:35,160
compromised and clients who use these

00:11:32,760 --> 00:11:36,810
certificates need to have a mechanism to

00:11:35,160 --> 00:11:39,750
be able to figure out is this is the

00:11:36,810 --> 00:11:41,310
certificate still still valid because

00:11:39,750 --> 00:11:43,440
the certificate itself doesn't doesn't

00:11:41,310 --> 00:11:45,360
tell you except for the expiry date I

00:11:43,440 --> 00:11:49,380
get to that later in the talk in a bit

00:11:45,360 --> 00:11:51,720
more detail just very very briefly when

00:11:49,380 --> 00:11:54,210
dealing yourself was creating keys and

00:11:51,720 --> 00:11:57,720
endings here's our there are some common

00:11:54,210 --> 00:11:59,960
formats and and file extensions so

00:11:57,720 --> 00:12:04,860
basically what what you typically have

00:11:59,960 --> 00:12:09,720
or what service server applications tend

00:12:04,860 --> 00:12:12,660
to to accept either it's a pm based file

00:12:09,720 --> 00:12:16,020
or a set of PM based files or it's a

00:12:12,660 --> 00:12:20,040
so-called piece pkcs12 file like two

00:12:16,020 --> 00:12:24,030
billiard P 12 file hmmm is basically a

00:12:20,040 --> 00:12:25,230
base64 encoded dr certificate that looks

00:12:24,030 --> 00:12:27,270
like this you've probably seen this

00:12:25,230 --> 00:12:29,820
before it says beginning v icky or

00:12:27,270 --> 00:12:32,460
begins certificate and then you have the

00:12:29,820 --> 00:12:35,580
basics T 4 encoded details and that's

00:12:32,460 --> 00:12:37,589
the the dr format distinguished encoding

00:12:35,580 --> 00:12:39,210
rules i don't want to go into details

00:12:37,589 --> 00:12:42,600
doesn't really matter it's space video

00:12:39,210 --> 00:12:44,100
let's say reasonably old specification

00:12:42,600 --> 00:12:47,339
and format but that's what's what's

00:12:44,100 --> 00:12:49,500
being used and p12 files the main

00:12:47,339 --> 00:12:51,120
difference is basically with the with

00:12:49,500 --> 00:12:53,970
Pam files you have one Pam file with a

00:12:51,120 --> 00:12:56,790
certificate public key and you have one

00:12:53,970 --> 00:12:58,320
Pam file with the private key was p12

00:12:56,790 --> 00:13:01,290
files you typically put everything into

00:12:58,320 --> 00:13:03,900
a single file and depending which server

00:13:01,290 --> 00:13:05,700
software you're using Apache web server

00:13:03,900 --> 00:13:07,470
ones Pam files so you have a

00:13:05,700 --> 00:13:09,779
configuration this is your private key

00:13:07,470 --> 00:13:13,860
this is your your certificate for the

00:13:09,779 --> 00:13:18,290
server but some applications want to p12

00:13:13,860 --> 00:13:21,240
file it depends on on what you are using

00:13:18,290 --> 00:13:22,920
again sometimes you see like dot CRT or

00:13:21,240 --> 00:13:24,320
dot CR to refer to this is the

00:13:22,920 --> 00:13:26,779
certificate

00:13:24,320 --> 00:13:28,009
and maybe dot see as armed to indicate

00:13:26,779 --> 00:13:33,100
this is actually the signing request

00:13:28,009 --> 00:13:33,100
that's intended to be sent to a to a CA

00:13:35,320 --> 00:13:42,040
again very very briefly the certificate

00:13:38,540 --> 00:13:44,690
structure of these x.509 certificates

00:13:42,040 --> 00:13:46,310
essentially it's the public key but it's

00:13:44,690 --> 00:13:49,880
it's more than just the public it

00:13:46,310 --> 00:13:52,220
includes information about well who owns

00:13:49,880 --> 00:13:54,980
this public key and who owns the

00:13:52,220 --> 00:13:58,100
corresponding private key that's the the

00:13:54,980 --> 00:14:01,310
subject the subject public key info

00:13:58,100 --> 00:14:03,860
that's the public key the subject would

00:14:01,310 --> 00:14:05,870
be something like the the name of the

00:14:03,860 --> 00:14:08,389
person owns a certificate or the the

00:14:05,870 --> 00:14:09,949
domain name and then additional

00:14:08,389 --> 00:14:11,990
information about which algorithms are

00:14:09,949 --> 00:14:14,300
used to sign this who actually issued

00:14:11,990 --> 00:14:15,649
this certificate like what's was the the

00:14:14,300 --> 00:14:18,589
CA which is the issuer

00:14:15,649 --> 00:14:21,019
so there's several several things in

00:14:18,589 --> 00:14:26,089
this certificate to make it to make it

00:14:21,019 --> 00:14:30,949
usable by the by the clients um the

00:14:26,089 --> 00:14:32,690
important bit is the subject something

00:14:30,949 --> 00:14:34,579
other refer to as a subject at the end

00:14:32,690 --> 00:14:41,180
which is a distinguished name the

00:14:34,579 --> 00:14:43,250
sequence of x.509 identifiers and the

00:14:41,180 --> 00:14:44,959
common TN keys you may have seen this if

00:14:43,250 --> 00:14:47,990
you've ever created a certificate or key

00:14:44,959 --> 00:14:50,420
yourself the common TN keys is C and so

00:14:47,990 --> 00:14:52,370
called common name not sure why it's

00:14:50,420 --> 00:14:54,860
common but it's a common name that would

00:14:52,370 --> 00:14:58,550
be what shows your host name for your

00:14:54,860 --> 00:15:00,470
server then there's C for country stage

00:14:58,550 --> 00:15:02,029
locality organizations we can put

00:15:00,470 --> 00:15:04,310
information in that you see an example

00:15:02,029 --> 00:15:06,920
at the bottom you can put information in

00:15:04,310 --> 00:15:10,310
there about what is this who has this

00:15:06,920 --> 00:15:12,199
certificate been assigned to or who is

00:15:10,310 --> 00:15:15,230
the owner of this such a public

00:15:12,199 --> 00:15:18,339
certificate like what's the subject of

00:15:15,230 --> 00:15:22,639
this certificate hence hence the name

00:15:18,339 --> 00:15:25,160
you don't have to put some of these info

00:15:22,639 --> 00:15:27,009
basically almost everything is optional

00:15:25,160 --> 00:15:30,920
obviously when you're dealing with

00:15:27,009 --> 00:15:33,490
service the CN part is not optional that

00:15:30,920 --> 00:15:35,689
needs to contain a host name otherwise

00:15:33,490 --> 00:15:38,100
well in theory you if you run your own

00:15:35,689 --> 00:15:40,740
picker you can put whatever identifier

00:15:38,100 --> 00:15:42,090
you want in there as long as the clients

00:15:40,740 --> 00:15:44,700
know how to deal with this and the

00:15:42,090 --> 00:15:47,370
server's know how to deal with this but

00:15:44,700 --> 00:15:50,750
anything else like locality or

00:15:47,370 --> 00:15:53,550
organization is is optional um

00:15:50,750 --> 00:15:56,310
the common name typically you would have

00:15:53,550 --> 00:15:58,620
a so-called fully qualified domain name

00:15:56,310 --> 00:16:01,410
in there which is like a blood blood

00:15:58,620 --> 00:16:02,730
example.com this would not match

00:16:01,410 --> 00:16:05,940
anything else it would not match

00:16:02,730 --> 00:16:08,160
example.com there's a special case that

00:16:05,940 --> 00:16:10,410
would introduce I think in the very

00:16:08,160 --> 00:16:12,600
beginning which is so called wildcard

00:16:10,410 --> 00:16:15,000
domains so we have star dot example.com

00:16:12,600 --> 00:16:17,340
so the subject of a certificate includes

00:16:15,000 --> 00:16:19,740
this particular thing started example

00:16:17,340 --> 00:16:22,590
will come and it would match example.com

00:16:19,740 --> 00:16:24,090
and everything else unless additional

00:16:22,590 --> 00:16:26,010
dots in there so it wouldn't match

00:16:24,090 --> 00:16:32,580
something like dub dub dub dot

00:16:26,010 --> 00:16:35,400
foo.example.com but these days you

00:16:32,580 --> 00:16:37,560
typically have more than one host name

00:16:35,400 --> 00:16:39,360
website on a single server or want to

00:16:37,560 --> 00:16:42,390
come up with a single certificate so

00:16:39,360 --> 00:16:46,080
what was introduced a long time ago also

00:16:42,390 --> 00:16:48,990
called SAN or multi domain certificates

00:16:46,080 --> 00:16:50,970
sa n stands for the is an abbreviation

00:16:48,990 --> 00:16:52,530
for the extension that's part of the

00:16:50,970 --> 00:16:54,090
certificate structure I mentioned

00:16:52,530 --> 00:16:56,520
earlier so we can have additional

00:16:54,090 --> 00:16:58,740
extensions in a certificate and one is

00:16:56,520 --> 00:17:01,350
subject alternative name which contain

00:16:58,740 --> 00:17:05,060
which can contain so it's optional it

00:17:01,350 --> 00:17:08,459
can contain I think more or less

00:17:05,060 --> 00:17:10,770
arbitrary list of host names you can I

00:17:08,459 --> 00:17:13,320
think there's a limit somewhere 200

00:17:10,770 --> 00:17:15,510
something 254 I'm not sure probably

00:17:13,320 --> 00:17:17,939
depends on the actual implementation but

00:17:15,510 --> 00:17:21,020
you can put a reasonably long list of

00:17:17,939 --> 00:17:24,270
domain names and host names in there and

00:17:21,020 --> 00:17:26,880
clients browsers know how to deal with

00:17:24,270 --> 00:17:29,310
that they just try to find a match in

00:17:26,880 --> 00:17:32,130
this whole list plus the main C and

00:17:29,310 --> 00:17:33,720
that's it's in the subject to figure out

00:17:32,130 --> 00:17:35,900
if that certificate is for this server

00:17:33,720 --> 00:17:37,800
that you are that you are talking to

00:17:35,900 --> 00:17:40,340
additionally there's something called

00:17:37,800 --> 00:17:43,050
evie certificates extended validation

00:17:40,340 --> 00:17:45,260
certificates you may have seen this

00:17:43,050 --> 00:17:47,820
before for some websites especially like

00:17:45,260 --> 00:17:50,280
financial Institute's bangs or whatever

00:17:47,820 --> 00:17:52,830
if you go there your browser shows like

00:17:50,280 --> 00:17:58,340
a more prominent green

00:17:52,830 --> 00:18:01,260
company name or something and that's

00:17:58,340 --> 00:18:03,179
basically the certificate that simply

00:18:01,260 --> 00:18:06,480
contains another extension like a flag

00:18:03,179 --> 00:18:12,240
that ASA defines this is an Eevee

00:18:06,480 --> 00:18:15,000
certificate they were introduced well to

00:18:12,240 --> 00:18:19,049
make things more secure if that's really

00:18:15,000 --> 00:18:21,210
the case I don't know I mean I explained

00:18:19,049 --> 00:18:23,010
this to my to my mom a long time ago and

00:18:21,210 --> 00:18:25,950
I said well this is you if you talk to

00:18:23,010 --> 00:18:27,929
your bank you need to see that name that

00:18:25,950 --> 00:18:29,549
needs to be green it needs to show the

00:18:27,929 --> 00:18:32,639
name of your bank otherwise don't enter

00:18:29,549 --> 00:18:34,740
your your login details and she kind of

00:18:32,639 --> 00:18:37,889
got from this like whenever there's some

00:18:34,740 --> 00:18:39,899
green things showing up it's good that's

00:18:37,889 --> 00:18:43,590
not really the intention I think it

00:18:39,899 --> 00:18:47,610
works for users who are more technically

00:18:43,590 --> 00:18:51,330
savvy but for everyone else I think it

00:18:47,610 --> 00:18:52,679
doesn't really help that much it helps

00:18:51,330 --> 00:18:54,809
the guys because they are really

00:18:52,679 --> 00:18:56,429
expensive when you want to buy them some

00:18:54,809 --> 00:18:59,010
they make more more money with that I

00:18:56,429 --> 00:19:00,779
think there are valid reasons or valid

00:18:59,010 --> 00:19:05,370
cases where an Eevee certificate makes

00:19:00,779 --> 00:19:08,460
sense but in many other cases as a

00:19:05,370 --> 00:19:13,080
simple normal certificate is perfectly

00:19:08,460 --> 00:19:15,510
fine and as already mentioned you can

00:19:13,080 --> 00:19:17,250
create your own that's perfectly fine

00:19:15,510 --> 00:19:19,620
for for testing or you want to set up

00:19:17,250 --> 00:19:21,809
your own PKI if you want to set up in

00:19:19,620 --> 00:19:25,649
your company your organization or just

00:19:21,809 --> 00:19:27,809
honor honor in a from a technical point

00:19:25,649 --> 00:19:31,169
of view in a build environment or

00:19:27,809 --> 00:19:33,210
hosting environment where you have a PKI

00:19:31,169 --> 00:19:34,350
which covers that that environment

00:19:33,210 --> 00:19:36,059
that's fine

00:19:34,350 --> 00:19:38,669
however if you create your own server

00:19:36,059 --> 00:19:40,919
certificate it doesn't really work

00:19:38,669 --> 00:19:42,529
because browsers wouldn't trust your

00:19:40,919 --> 00:19:44,460
pick.i that don't know your

00:19:42,529 --> 00:19:47,240
certification authority and it will show

00:19:44,460 --> 00:19:50,039
a show a warning and one certificate

00:19:47,240 --> 00:19:52,139
authority also a certification authority

00:19:50,039 --> 00:19:54,120
that I would like to briefly mention is

00:19:52,139 --> 00:19:56,760
let's encrypt because it gives you free

00:19:54,120 --> 00:19:59,669
certificates that's that's great that

00:19:56,760 --> 00:20:02,010
didn't exist a few years ago they

00:19:59,669 --> 00:20:05,370
basically this is a service provided by

00:20:02,010 --> 00:20:08,760
the is RG Internet Security

00:20:05,370 --> 00:20:12,350
research group since april 2016 so it is

00:20:08,760 --> 00:20:15,360
a nonprofit organization and they

00:20:12,350 --> 00:20:18,180
provide what's called so-called domain

00:20:15,360 --> 00:20:20,390
only validation certificates you can't

00:20:18,180 --> 00:20:23,760
have a certificate from them that shows

00:20:20,390 --> 00:20:26,910
organizational information it will only

00:20:23,760 --> 00:20:28,640
it only certifies that you have proved

00:20:26,910 --> 00:20:31,220
that you are the owner of this domain

00:20:28,640 --> 00:20:34,890
and it gives you a free certificate

00:20:31,220 --> 00:20:39,780
typically a certificate from a global or

00:20:34,890 --> 00:20:42,150
public CA is valid for 12 months let's

00:20:39,780 --> 00:20:45,420
encrypt only does 90 days but you can

00:20:42,150 --> 00:20:48,929
once I think it's older than 60 days you

00:20:45,420 --> 00:20:53,940
can renew the certificate and it's very

00:20:48,929 --> 00:20:56,700
quick and an automated process one thing

00:20:53,940 --> 00:20:59,429
that I found interesting you actually

00:20:56,700 --> 00:21:03,330
ran into is if you get a a paid-for

00:20:59,429 --> 00:21:05,670
certificate from a public CA they have

00:21:03,330 --> 00:21:08,309
extension fields that define them as

00:21:05,670 --> 00:21:11,580
valid for server-side encryption but

00:21:08,309 --> 00:21:12,990
also for client-side encryption which is

00:21:11,580 --> 00:21:16,920
sometimes helpful because if you have

00:21:12,990 --> 00:21:18,570
your reverse proxy the browser's would

00:21:16,920 --> 00:21:19,890
use that certificate to figure out

00:21:18,570 --> 00:21:22,410
that's the server that I'm talking to

00:21:19,890 --> 00:21:24,690
but you can also use this as a client

00:21:22,410 --> 00:21:26,640
certificate on the server talking to Y

00:21:24,690 --> 00:21:29,070
HTTP has two other back-end services

00:21:26,640 --> 00:21:31,470
that does not work with let's encrypt

00:21:29,070 --> 00:21:34,130
let's encrypt specifically only gives

00:21:31,470 --> 00:21:37,920
use certificates which are suitable for

00:21:34,130 --> 00:21:39,780
server-side encryption I found is

00:21:37,920 --> 00:21:41,309
important to mention because I tried

00:21:39,780 --> 00:21:44,280
that and it didn't work and I didn't

00:21:41,309 --> 00:21:47,840
know why for a while

00:21:44,280 --> 00:21:50,580
it's basically available like the CA is

00:21:47,840 --> 00:21:54,090
available in every browser every browser

00:21:50,580 --> 00:21:56,970
hasn't has a list of public sea-ice it

00:21:54,090 --> 00:21:59,460
trusts well personally you may not trust

00:21:56,970 --> 00:22:01,200
all of them but if you install a browser

00:21:59,460 --> 00:22:03,660
that's what's what's in there like a

00:22:01,200 --> 00:22:06,270
long list of CAS from every every

00:22:03,660 --> 00:22:07,800
country and if it's anything else a

00:22:06,270 --> 00:22:10,730
browser wouldn't trust it it would show

00:22:07,800 --> 00:22:12,870
a warning message which looks like this

00:22:10,730 --> 00:22:15,030
or something similar you've probably

00:22:12,870 --> 00:22:18,030
seen this so we create your own

00:22:15,030 --> 00:22:19,020
certificates it looks like this but this

00:22:18,030 --> 00:22:22,170
also sometimes

00:22:19,020 --> 00:22:25,890
happens if you simply misconfigure the

00:22:22,170 --> 00:22:27,330
certificate on the server side how this

00:22:25,890 --> 00:22:32,790
often works in browser the browser

00:22:27,330 --> 00:22:36,060
doesn't contain a list of every CAE that

00:22:32,790 --> 00:22:39,690
issues certificates it often contains

00:22:36,060 --> 00:22:43,400
just a list of of higher-level root

00:22:39,690 --> 00:22:46,770
certificates so you have this this

00:22:43,400 --> 00:22:50,340
certificate chain at the bottom you have

00:22:46,770 --> 00:22:52,440
the the leaf certificate or and entity

00:22:50,340 --> 00:22:56,160
certificate that's your server or client

00:22:52,440 --> 00:22:58,590
certificate and it's not the root CA the

00:22:56,160 --> 00:23:00,600
roots certification Authority directly

00:22:58,590 --> 00:23:03,530
that would issue that certificate

00:23:00,600 --> 00:23:06,390
there's usually intermediate ones

00:23:03,530 --> 00:23:08,190
commercial CAS have different ones for

00:23:06,390 --> 00:23:10,770
different purposes one for evey

00:23:08,190 --> 00:23:12,450
certificates one for domain only or

00:23:10,770 --> 00:23:14,910
different geographical regions and

00:23:12,450 --> 00:23:17,610
whatever and so it sometimes requires

00:23:14,910 --> 00:23:19,500
you on the server side to actually

00:23:17,610 --> 00:23:22,370
configure not just your server

00:23:19,500 --> 00:23:24,780
certificate but actually configure

00:23:22,370 --> 00:23:26,280
intermediate certificates as well so the

00:23:24,780 --> 00:23:29,430
browser may only contain the root

00:23:26,280 --> 00:23:31,290
certificate that it trusts if you only

00:23:29,430 --> 00:23:33,510
put the actual server certificate on

00:23:31,290 --> 00:23:36,720
your server it's like well I don't know

00:23:33,510 --> 00:23:38,900
the intermediate CI I've never seen her

00:23:36,720 --> 00:23:41,040
have not no idea where that's from

00:23:38,900 --> 00:23:42,470
but you can't go figure on the server

00:23:41,040 --> 00:23:45,060
side is you can basically frigging

00:23:42,470 --> 00:23:47,310
arbitrary number of certificates you

00:23:45,060 --> 00:23:50,970
need to put all these certificates in

00:23:47,310 --> 00:23:54,180
there to reach a trusted certificate

00:23:50,970 --> 00:23:56,280
that the browser knows about and

00:23:54,180 --> 00:23:59,450
basically in the handshake the server

00:23:56,280 --> 00:24:02,490
would send the whole set of certificates

00:23:59,450 --> 00:24:05,160
and to give the browser a chance to find

00:24:02,490 --> 00:24:10,410
one that hits the trusted certificate

00:24:05,160 --> 00:24:14,250
basically in it's just just briefly

00:24:10,410 --> 00:24:17,460
about Apache so Apache has well it's so

00:24:14,250 --> 00:24:21,090
called mod SSL so it has it has a TLS

00:24:17,460 --> 00:24:25,500
module it is included as default since a

00:24:21,090 --> 00:24:29,010
very early version of Apache 2.0 2.0 it

00:24:25,500 --> 00:24:32,270
uses open SSL it supports all the

00:24:29,010 --> 00:24:37,180
various TLS versions

00:24:32,270 --> 00:24:41,180
I think yeah SSL 3 is still supported

00:24:37,180 --> 00:24:44,030
2.0 support was removed a while ago I

00:24:41,180 --> 00:24:45,620
think we need to remove SSL three years

00:24:44,030 --> 00:24:47,480
as well it doesn't make sense it

00:24:45,620 --> 00:24:49,700
shouldn't be used anymore

00:24:47,480 --> 00:24:51,980
but there's still some cases where

00:24:49,700 --> 00:24:56,870
people may have dependencies on this or

00:24:51,980 --> 00:25:00,230
whatever but it is insecure 1.3 TLS 1 by

00:24:56,870 --> 00:25:02,630
3 is supported since a recent 2.4

00:25:00,230 --> 00:25:10,400
version of Apache and if you have open

00:25:02,630 --> 00:25:13,840
SSL 1.1 installed let me let me skip

00:25:10,400 --> 00:25:13,840
over this is just a module configuration

00:25:14,110 --> 00:25:18,620
but very briefly I mentioned this before

00:25:16,310 --> 00:25:22,460
talking about the pennmen p12 file so

00:25:18,620 --> 00:25:24,530
Apache requires you to give it to Pam

00:25:22,460 --> 00:25:32,350
files one is your server certificate and

00:25:24,530 --> 00:25:35,330
one is your server key and the the

00:25:32,350 --> 00:25:37,760
certificate file is the one where you

00:25:35,330 --> 00:25:42,770
would put the intermediate certificates

00:25:37,760 --> 00:25:45,980
that I just mentioned earlier browsers

00:25:42,770 --> 00:25:49,070
typically handle an arbitrary order of

00:25:45,980 --> 00:25:52,010
these certificates but depending on the

00:25:49,070 --> 00:25:54,230
client that may not be the case it

00:25:52,010 --> 00:25:56,540
actually should be that you sort the

00:25:54,230 --> 00:25:58,760
certificates in that file starting from

00:25:56,540 --> 00:26:00,410
leaf to the root certificate so the top

00:25:58,760 --> 00:26:02,780
contains your server certificate and

00:26:00,410 --> 00:26:04,790
then the one that issued that one didn't

00:26:02,780 --> 00:26:07,460
really want to issue that one you should

00:26:04,790 --> 00:26:08,660
not put actually mention root

00:26:07,460 --> 00:26:10,390
certificate here but you shouldn't

00:26:08,660 --> 00:26:14,030
really put the root certificate in there

00:26:10,390 --> 00:26:15,320
because that's the one that the the

00:26:14,030 --> 00:26:18,140
trusted one that the browser's know

00:26:15,320 --> 00:26:18,740
about that shouldn't be put in there it

00:26:18,140 --> 00:26:20,060
doesn't matter

00:26:18,740 --> 00:26:22,340
it would just be overhead if you always

00:26:20,060 --> 00:26:24,170
end this with every handshake the

00:26:22,340 --> 00:26:26,540
browser would be fine it would stop at

00:26:24,170 --> 00:26:27,740
that point and say ok I'm happy I found

00:26:26,540 --> 00:26:29,840
something that matches one of my

00:26:27,740 --> 00:26:32,770
certificates so don't need to check any

00:26:29,840 --> 00:26:32,770
of the other certificates

00:26:37,159 --> 00:26:48,240
it's so briefly about virtual hosting it

00:26:44,549 --> 00:26:50,940
was a problem many years ago that it was

00:26:48,240 --> 00:26:54,650
difficult to host multiple domains on a

00:26:50,940 --> 00:26:57,750
single server when using HTTP because

00:26:54,650 --> 00:26:59,900
going back to the layer model I showed

00:26:57,750 --> 00:27:03,900
earlier

00:26:59,900 --> 00:27:06,480
TLS establishing the TLS session happens

00:27:03,900 --> 00:27:09,090
before any kind of HTTP request is sent

00:27:06,480 --> 00:27:10,679
that includes the host header which

00:27:09,090 --> 00:27:12,330
tells the server which domain which

00:27:10,679 --> 00:27:15,510
hosts which virtual house you actually

00:27:12,330 --> 00:27:17,309
want to talk to so the server was like

00:27:15,510 --> 00:27:20,070
okay I need to show you one certificate

00:27:17,309 --> 00:27:21,659
so yes one option is to put use one

00:27:20,070 --> 00:27:25,710
certificate for all domains but that

00:27:21,659 --> 00:27:27,090
sometimes not not practical this was

00:27:25,710 --> 00:27:30,750
solved by adding basically another

00:27:27,090 --> 00:27:34,470
feature or extension to two TLS or two

00:27:30,750 --> 00:27:38,730
TLS which is called sni server name

00:27:34,470 --> 00:27:42,059
identification but is yeah TLS 7m

00:27:38,730 --> 00:27:45,929
identification is basically on the TLS

00:27:42,059 --> 00:27:48,030
handshake layer giving the user sorry

00:27:45,929 --> 00:27:49,740
giving the server the information about

00:27:48,030 --> 00:27:51,510
which domain which hostname you actually

00:27:49,740 --> 00:27:53,100
want to talk to so basically whatever is

00:27:51,510 --> 00:27:55,140
in the house header would be in that

00:27:53,100 --> 00:27:57,000
handshake and in the server nose in that

00:27:55,140 --> 00:27:58,860
case I'm going to do the handshake using

00:27:57,000 --> 00:28:03,929
this certificate and not the other one

00:27:58,860 --> 00:28:06,020
and typically any kind of server

00:28:03,929 --> 00:28:09,000
software and client software these days

00:28:06,020 --> 00:28:12,360
supports that however it can still be

00:28:09,000 --> 00:28:16,370
the case that some clients simply do not

00:28:12,360 --> 00:28:18,690
support as a nine that's an interesting

00:28:16,370 --> 00:28:22,620
configuration setup you need you may

00:28:18,690 --> 00:28:24,390
need to look at because some server

00:28:22,620 --> 00:28:27,570
software may not handle this properly

00:28:24,390 --> 00:28:31,500
some may just show an error message some

00:28:27,570 --> 00:28:33,679
may pick the whatever random one on

00:28:31,500 --> 00:28:36,360
unspecified one from the virtual host

00:28:33,679 --> 00:28:40,830
certificates you've configured in Apache

00:28:36,360 --> 00:28:42,330
it would pick the first virtual host if

00:28:40,830 --> 00:28:43,799
a client doesn't send that information

00:28:42,330 --> 00:28:44,250
in those that I would simply pick the

00:28:43,799 --> 00:28:46,260
first one

00:28:44,250 --> 00:28:48,539
there was a behavior before as and I was

00:28:46,260 --> 00:28:51,130
introduced however there's a for Apache

00:28:48,539 --> 00:28:54,300
web server there's a configuration

00:28:51,130 --> 00:28:56,710
called ssl strict s NIV house check

00:28:54,300 --> 00:28:59,830
which basically I would recommend to

00:28:56,710 --> 00:29:01,630
enable because these days you usually

00:28:59,830 --> 00:29:02,890
don't want to talk to any clients

00:29:01,630 --> 00:29:05,440
anymore at least when it comes to the

00:29:02,890 --> 00:29:06,940
browser's who don't support as an I if

00:29:05,440 --> 00:29:11,550
there's a request coming and that

00:29:06,940 --> 00:29:14,260
doesn't have SN I enabled or uses SN I

00:29:11,550 --> 00:29:15,850
then it seems a bit odd it shouldn't

00:29:14,260 --> 00:29:17,890
really be the case so in that case if

00:29:15,850 --> 00:29:20,430
you have this enabled Apache will just

00:29:17,890 --> 00:29:23,920
respond with the I think of forbidden

00:29:20,430 --> 00:29:26,130
yeah fourthly forbidden responds and

00:29:23,920 --> 00:29:30,810
they're like I can help you you need to

00:29:26,130 --> 00:29:33,970
get your thing sorted out basically um

00:29:30,810 --> 00:29:36,010
just briefly again Apache web server I

00:29:33,970 --> 00:29:39,390
mentioned that's encrypt there's a

00:29:36,010 --> 00:29:42,070
module called mod MD managing domains

00:29:39,390 --> 00:29:43,810
not sure if that's a the most catchy

00:29:42,070 --> 00:29:49,450
name but that's the name of the the

00:29:43,810 --> 00:29:51,700
module which handles automatic basically

00:29:49,450 --> 00:29:53,620
retrieval of server certificates from

00:29:51,700 --> 00:29:55,900
let's encrypt so basically you just

00:29:53,620 --> 00:29:58,240
configure your normal virtual host you

00:29:55,900 --> 00:30:01,150
put an M domain you give it the the host

00:29:58,240 --> 00:30:03,480
names a couple other standard things

00:30:01,150 --> 00:30:05,860
that that the whole the the module needs

00:30:03,480 --> 00:30:06,490
and then when you start Apache it would

00:30:05,860 --> 00:30:08,170
on-the-fly

00:30:06,490 --> 00:30:11,500
fetch a certificate and make sure it

00:30:08,170 --> 00:30:13,600
gets updated before it expires it is

00:30:11,500 --> 00:30:16,450
still an experimental module but it has

00:30:13,600 --> 00:30:18,730
been available for a while and there's

00:30:16,450 --> 00:30:21,070
some active development around this so

00:30:18,730 --> 00:30:23,380
it's if you're using Apache web server

00:30:21,070 --> 00:30:24,520
it's worth looking at this if let's

00:30:23,380 --> 00:30:30,160
encrypt is something that will make

00:30:24,520 --> 00:30:31,800
sense for your for your use cases again

00:30:30,160 --> 00:30:34,440
there's some Apache web server

00:30:31,800 --> 00:30:37,390
configuration examples but this is

00:30:34,440 --> 00:30:39,460
reasonably reasonably generic if you

00:30:37,390 --> 00:30:46,420
have a software server software that

00:30:39,460 --> 00:30:50,950
deals with the Apache sorry that that

00:30:46,420 --> 00:30:53,500
uses open SSL as the SSL library you may

00:30:50,950 --> 00:30:55,360
have seen like an in the surface cipher

00:30:53,500 --> 00:31:00,910
suite configuration line something like

00:30:55,360 --> 00:31:03,550
this where you define which ciphers open

00:31:00,910 --> 00:31:04,750
SSL is supposed to use or not supposed

00:31:03,550 --> 00:31:06,250
to use

00:31:04,750 --> 00:31:08,649
it looks a bit weird it has these

00:31:06,250 --> 00:31:11,890
different prefixes for each thing and

00:31:08,649 --> 00:31:14,110
yet the colons and it can be reason to

00:31:11,890 --> 00:31:15,580
be long depending how how detailed you

00:31:14,110 --> 00:31:18,779
want to get into specifying which

00:31:15,580 --> 00:31:20,830
ciphers are ki which ciphers are bad and

00:31:18,779 --> 00:31:22,720
it is one thing that often gets

00:31:20,830 --> 00:31:24,610
forgotten when server software gets

00:31:22,720 --> 00:31:25,720
configured people tend to just leave in

00:31:24,610 --> 00:31:28,269
there whatever was the default

00:31:25,720 --> 00:31:30,970
configuration and that may not

00:31:28,269 --> 00:31:33,399
necessarily be the best especially for a

00:31:30,970 --> 00:31:36,639
particular use case and it may already

00:31:33,399 --> 00:31:38,980
be outdated I think even at the Apache

00:31:36,639 --> 00:31:41,019
web server we are not that good at

00:31:38,980 --> 00:31:43,330
keeping that up to date I think we're

00:31:41,019 --> 00:31:45,970
better than we used to be but you should

00:31:43,330 --> 00:31:48,010
always look at that you should look at

00:31:45,970 --> 00:31:51,789
what does this day and does this make

00:31:48,010 --> 00:31:53,380
sense for my for my use cases so this is

00:31:51,789 --> 00:31:57,880
the current default configuration in

00:31:53,380 --> 00:32:00,840
Apache which is okay but typically you

00:31:57,880 --> 00:32:04,450
want something something more

00:32:00,840 --> 00:32:07,299
restrictive um in general I would always

00:32:04,450 --> 00:32:11,250
recommend specifically even though open

00:32:07,299 --> 00:32:14,260
SSL disabled some of the old SSL

00:32:11,250 --> 00:32:17,110
protocols already automatically even if

00:32:14,260 --> 00:32:18,220
you don't specifically disable them at

00:32:17,110 --> 00:32:21,309
least with the patch of our server

00:32:18,220 --> 00:32:22,840
there's an SSL protocol directive and I

00:32:21,309 --> 00:32:25,980
will always use that to make sure you

00:32:22,840 --> 00:32:29,679
disable the stuff that you don't really

00:32:25,980 --> 00:32:32,889
need so my recommendation would be for

00:32:29,679 --> 00:32:37,330
the protocol disable SSL v3 disable a

00:32:32,889 --> 00:32:39,399
TLS 1.0 and 1.1 and make sure all

00:32:37,330 --> 00:32:43,330
thereby making sure that you really only

00:32:39,399 --> 00:32:46,510
use TLS 1.2 and till there's 1.3 if the

00:32:43,330 --> 00:32:49,840
client supports it for the cipher suite

00:32:46,510 --> 00:32:53,260
again depends on your use case this is a

00:32:49,840 --> 00:32:57,340
slightly more restrictive configuration

00:32:53,260 --> 00:32:59,620
what you want is use TLS 1.2 or higher

00:32:57,340 --> 00:33:03,029
and you want to use it with strong

00:32:59,620 --> 00:33:07,360
ciphers that support forward secrecy

00:33:03,029 --> 00:33:10,570
puts forward secrecy basically if a

00:33:07,360 --> 00:33:13,720
middleman monitors your country your

00:33:10,570 --> 00:33:15,750
your session exchange the data going

00:33:13,720 --> 00:33:18,170
back and forth between client and server

00:33:15,750 --> 00:33:21,920
and then at a later point

00:33:18,170 --> 00:33:24,860
days weeks hours whatever is able to

00:33:21,920 --> 00:33:29,000
compromise your server if the algorithm

00:33:24,860 --> 00:33:30,710
is not forward secure the attack I would

00:33:29,000 --> 00:33:33,800
be able to decrypt all the previous

00:33:30,710 --> 00:33:36,560
traffic if you have an algorithm with

00:33:33,800 --> 00:33:39,350
forwarding secrecy or perfect forward

00:33:36,560 --> 00:33:41,630
secrecy that's not possible

00:33:39,350 --> 00:33:43,490
basically only from the point where

00:33:41,630 --> 00:33:45,710
something gets compromised only from the

00:33:43,490 --> 00:33:48,560
point onwards the attacker would be able

00:33:45,710 --> 00:33:50,780
to to decrypt the traffic but wouldn't

00:33:48,560 --> 00:33:52,940
be able to decrypt any of the previous

00:33:50,780 --> 00:33:58,130
traffic so that's what I mean was strong

00:33:52,940 --> 00:34:00,800
strong ciphers um if you use the MOT

00:33:58,130 --> 00:34:02,210
HTTP 2 module with the patchy web server

00:34:00,800 --> 00:34:07,100
there's actually and a configuration

00:34:02,210 --> 00:34:10,610
option that enables certain security

00:34:07,100 --> 00:34:12,169
settings and enforces specific security

00:34:10,610 --> 00:34:15,020
settings and requirements for all

00:34:12,169 --> 00:34:17,030
connections that can be configured in

00:34:15,020 --> 00:34:19,820
addition to the other things it's just

00:34:17,030 --> 00:34:22,429
an additional way to make sure that

00:34:19,820 --> 00:34:26,530
you're not to have any legacy things

00:34:22,429 --> 00:34:26,530
enabled in your configuration I

00:34:26,770 --> 00:34:30,580
mentioned here lies one point three a

00:34:28,730 --> 00:34:33,610
few times

00:34:30,580 --> 00:34:35,899
again this is potentially a bit

00:34:33,610 --> 00:34:40,220
complicated but just very briefly to

00:34:35,899 --> 00:34:43,190
mention some important changes that or

00:34:40,220 --> 00:34:47,120
where TLS 1 by 3 is better than any of

00:34:43,190 --> 00:34:49,460
the previous algorithms one is it

00:34:47,120 --> 00:34:51,290
removes support for for various weak and

00:34:49,460 --> 00:34:54,080
insecure algorithms so even if you would

00:34:51,290 --> 00:34:55,850
want to use md5 we're still as 1.3

00:34:54,080 --> 00:34:57,320
that's simply not possible like the

00:34:55,850 --> 00:35:00,310
clients and servers simply wouldn't be

00:34:57,320 --> 00:35:04,100
using that so that's no longer in there

00:35:00,310 --> 00:35:06,770
including any of the SSL protocols it

00:35:04,100 --> 00:35:10,640
also mandates perfect forward secrecy so

00:35:06,770 --> 00:35:15,560
you cannot use any of these weak ciphers

00:35:10,640 --> 00:35:17,630
any more and it separates the key

00:35:15,560 --> 00:35:20,420
agreement and authentication algorithms

00:35:17,630 --> 00:35:25,840
from the actual cipher suites some of

00:35:20,420 --> 00:35:28,520
the SSL TLS vulnerabilities that exist

00:35:25,840 --> 00:35:31,400
come from the fact that this was all

00:35:28,520 --> 00:35:32,540
like what's the right word I wouldn't

00:35:31,400 --> 00:35:35,150
say cobble together butter

00:35:32,540 --> 00:35:37,250
was like all a single protocol handling

00:35:35,150 --> 00:35:38,930
handling everything this is a clear

00:35:37,250 --> 00:35:40,550
separation this is about the

00:35:38,930 --> 00:35:42,250
authentication this is about the key

00:35:40,550 --> 00:35:46,900
agreement and this is about the actual

00:35:42,250 --> 00:35:49,160
encryption cipher for my session it also

00:35:46,900 --> 00:35:52,930
includes some new stream ciphers and

00:35:49,160 --> 00:35:55,930
some new algorithms and it replaces

00:35:52,930 --> 00:35:58,550
session resumption with pre shared key

00:35:55,930 --> 00:36:02,840
cipher suites and tickets I get to that

00:35:58,550 --> 00:36:05,000
later in the talk going back to the one

00:36:02,840 --> 00:36:08,000
of the first slides I showed it supports

00:36:05,000 --> 00:36:11,150
so-called one RTT handshakes like

00:36:08,000 --> 00:36:17,359
there's only one one one round trip and

00:36:11,150 --> 00:36:22,880
it has optional support for zero

00:36:17,359 --> 00:36:24,140
round-trip handshakes I think I have

00:36:22,880 --> 00:36:27,320
another slide about this but let me

00:36:24,140 --> 00:36:29,300
mention this briefly so Apache web

00:36:27,320 --> 00:36:34,640
server at this point does not support

00:36:29,300 --> 00:36:38,900
zero round-trip handshakes I think

00:36:34,640 --> 00:36:41,690
neither does the Apache traffic server

00:36:38,900 --> 00:36:45,109
at this time or Tomcat I think I'm

00:36:41,690 --> 00:36:46,780
looking at wrong I think it doesn't it

00:36:45,109 --> 00:36:49,520
does what doesn't

00:36:46,780 --> 00:36:52,100
traffic server does okay last time I

00:36:49,520 --> 00:36:55,790
look at it it didn't and it is

00:36:52,100 --> 00:37:02,090
interesting it obviously makes things

00:36:55,790 --> 00:37:06,380
more performant because basically are we

00:37:02,090 --> 00:37:09,980
running out of time okay I'll keep it

00:37:06,380 --> 00:37:13,160
short then so basically a it requires

00:37:09,980 --> 00:37:17,510
you to look at your applications because

00:37:13,160 --> 00:37:19,460
it introduces I don't want to say

00:37:17,510 --> 00:37:23,840
security vulnerability but basically it

00:37:19,460 --> 00:37:29,390
it does because it simply reuses

00:37:23,840 --> 00:37:32,180
existing existing cached information and

00:37:29,390 --> 00:37:38,690
that can cause a security vulnerability

00:37:32,180 --> 00:37:43,840
so basically if you have no other form

00:37:38,690 --> 00:37:46,270
of authentication happening it basically

00:37:43,840 --> 00:37:48,130
results in potential for

00:37:46,270 --> 00:37:51,580
attacks the attacker would not be able

00:37:48,130 --> 00:37:54,280
to decrypt any of the data but it allows

00:37:51,580 --> 00:37:57,220
for it makes it basically trivial to

00:37:54,280 --> 00:37:59,530
replay the same request so it's not a

00:37:57,220 --> 00:38:01,000
specifically a bug or an issue in the

00:37:59,530 --> 00:38:02,970
service offer but you need to look at

00:38:01,000 --> 00:38:06,370
your applications if you have an API

00:38:02,970 --> 00:38:09,400
that has no additional form of

00:38:06,370 --> 00:38:12,490
identification authentication whatever

00:38:09,400 --> 00:38:14,340
then a replay attack can potentially

00:38:12,490 --> 00:38:18,490
cause issues let's say you have a

00:38:14,340 --> 00:38:22,300
payment system or that's like a like a

00:38:18,490 --> 00:38:25,570
shopping cart and the action of paying

00:38:22,300 --> 00:38:27,310
something if I can replay the same the

00:38:25,570 --> 00:38:29,230
same traffic to the server again it will

00:38:27,310 --> 00:38:31,090
base the execute the same request again

00:38:29,230 --> 00:38:33,280
if in your application on your

00:38:31,090 --> 00:38:36,520
application level you don't deal with

00:38:33,280 --> 00:38:38,620
this information that this request is

00:38:36,520 --> 00:38:41,740
being replayed you have a potential

00:38:38,620 --> 00:38:43,690
issue I think going forward I have the

00:38:41,740 --> 00:38:47,050
feeling this is going to cause quite a

00:38:43,690 --> 00:38:49,300
few vulnerabilities not in the server

00:38:47,050 --> 00:38:52,030
software itself but for companies

00:38:49,300 --> 00:38:53,520
because the operations team is often

00:38:52,030 --> 00:38:55,930
different from the development team

00:38:53,520 --> 00:38:58,330
operations want to improve things make

00:38:55,930 --> 00:38:58,870
things faster so I think hey this sounds

00:38:58,330 --> 00:39:00,550
great

00:38:58,870 --> 00:39:03,580
zero bunch of handshakes let's enable

00:39:00,550 --> 00:39:06,580
this but without auditing and looking at

00:39:03,580 --> 00:39:10,480
your applications you by doing that you

00:39:06,580 --> 00:39:12,670
may introduce security problems so long

00:39:10,480 --> 00:39:16,840
story short you need to look at this

00:39:12,670 --> 00:39:20,080
before you enable this in in your

00:39:16,840 --> 00:39:22,540
service as I mentioned before TLS 1.2

00:39:20,080 --> 00:39:25,000
for now is here to stay

00:39:22,540 --> 00:39:31,420
it took a long time to get rid of even

00:39:25,000 --> 00:39:34,030
SSL l3 so this is basically you should

00:39:31,420 --> 00:39:36,820
make sure that you enable TLS 1.3 for

00:39:34,030 --> 00:39:39,310
clients that already supported but you

00:39:36,820 --> 00:39:42,750
will have a dependency on TLS 1.2 for a

00:39:39,310 --> 00:39:46,050
very long time only very recent browsers

00:39:42,750 --> 00:39:48,250
support the final tier less 1.3 spec I

00:39:46,050 --> 00:39:53,830
actually I had a separate slide about

00:39:48,250 --> 00:39:57,280
zero round-trip handshakes yeah

00:39:53,830 --> 00:39:59,650
recommendation to upgrade to TLS 1.3 but

00:39:57,280 --> 00:40:00,250
you need to look at your your API is a

00:39:59,650 --> 00:40:06,030
knowledge of

00:40:00,250 --> 00:40:10,300
vacations before doing that random seeds

00:40:06,030 --> 00:40:11,500
sometimes typically forgotten about but

00:40:10,300 --> 00:40:14,200
it's important to make sure that your

00:40:11,500 --> 00:40:16,750
server has enough random randomness

00:40:14,200 --> 00:40:18,790
random data to actually be able to

00:40:16,750 --> 00:40:21,070
create the initial keys and and

00:40:18,790 --> 00:40:22,600
everything which can sometimes be a

00:40:21,070 --> 00:40:24,460
problem so it needs to be looked at

00:40:22,600 --> 00:40:33,970
depending how your your server

00:40:24,460 --> 00:40:35,590
application does that session caching so

00:40:33,970 --> 00:40:39,960
until has one point two and lower

00:40:35,590 --> 00:40:39,960
basically we have session caching the

00:40:40,200 --> 00:40:46,960
the the server-side caches the sessions

00:40:43,300 --> 00:40:50,890
basically the the symmetric key that was

00:40:46,960 --> 00:40:52,630
agreed in the TLS handshake and when a

00:40:50,890 --> 00:40:55,270
client comes back based on the

00:40:52,630 --> 00:40:57,970
identifier of that of that session the

00:40:55,270 --> 00:40:59,500
server knows the server doesn't have to

00:40:57,970 --> 00:41:01,200
do a full hand check it knows how that's

00:40:59,500 --> 00:41:03,850
the same client again it's the same

00:41:01,200 --> 00:41:05,560
symmetric encryption key for these

00:41:03,850 --> 00:41:08,290
sessions I'm just going to use that and

00:41:05,560 --> 00:41:10,600
everyone's happy but you cannot

00:41:08,290 --> 00:41:12,820
indefinitely cache session keys on the

00:41:10,600 --> 00:41:13,960
server side also you don't really want

00:41:12,820 --> 00:41:16,180
to cache things on the server side

00:41:13,960 --> 00:41:19,450
because well that session is on that

00:41:16,180 --> 00:41:22,150
server and you may have a set of high

00:41:19,450 --> 00:41:23,280
availability servers running side by

00:41:22,150 --> 00:41:26,590
side

00:41:23,280 --> 00:41:28,480
that's where sometimes these sticky SSL

00:41:26,590 --> 00:41:30,160
session features come from in reverse

00:41:28,480 --> 00:41:31,630
proxies to make sure that the same

00:41:30,160 --> 00:41:33,610
client is always brought to the same

00:41:31,630 --> 00:41:36,640
back-end server but then that server

00:41:33,610 --> 00:41:38,950
fails causes problems so um it works

00:41:36,640 --> 00:41:41,320
it's important to enable otherwise you

00:41:38,950 --> 00:41:43,540
always end up with a full TLS handshake

00:41:41,320 --> 00:41:45,700
every time your client sends an HTTP

00:41:43,540 --> 00:41:50,080
request and that's something you don't

00:41:45,700 --> 00:41:52,030
really want to do and if you have a very

00:41:50,080 --> 00:41:54,880
long session cache it compromises

00:41:52,030 --> 00:41:57,730
forward secrecy because their session

00:41:54,880 --> 00:42:00,970
keys in there from days ago or or weeks

00:41:57,730 --> 00:42:04,570
ago depending how you configured it so

00:42:00,970 --> 00:42:06,460
in TLS 1.3 but also in 1.2 you have

00:42:04,570 --> 00:42:08,440
session tickets and that's basically

00:42:06,460 --> 00:42:10,600
instead of caching things on the server

00:42:08,440 --> 00:42:12,640
side it had the client well here's some

00:42:10,600 --> 00:42:14,610
blob of data that the server has

00:42:12,640 --> 00:42:18,550
encrypted with his

00:42:14,610 --> 00:42:20,650
the obsession encryption key and tells

00:42:18,550 --> 00:42:22,000
the client you store this on your side

00:42:20,650 --> 00:42:24,130
and whenever you want to send me

00:42:22,000 --> 00:42:25,690
something again you just send this whole

00:42:24,130 --> 00:42:27,670
thing again and then I can figure out

00:42:25,690 --> 00:42:31,030
which session key to use for for this

00:42:27,670 --> 00:42:33,970
for this session problem here is again

00:42:31,030 --> 00:42:36,190
forward secrecy so my recommendation I

00:42:33,970 --> 00:42:39,970
think I'm running out of time keeping it

00:42:36,190 --> 00:42:43,560
short for 1.2 is and if you're really

00:42:39,970 --> 00:42:46,210
for your application for your use case

00:42:43,560 --> 00:42:48,550
have a strong requirement for forward

00:42:46,210 --> 00:42:51,280
secrecy if you cannot live with any

00:42:48,550 --> 00:42:53,770
cases where a compromise would lead to a

00:42:51,280 --> 00:42:56,050
compromise of previous data being

00:42:53,770 --> 00:42:58,630
exchanged with those clients you should

00:42:56,050 --> 00:43:01,000
disable session keys sorry session

00:42:58,630 --> 00:43:03,820
tickets however in general I recommend

00:43:01,000 --> 00:43:08,860
enabling it but rotating the encryption

00:43:03,820 --> 00:43:12,360
key that the server uses for this on a

00:43:08,860 --> 00:43:15,280
regular basis once a day once an hour

00:43:12,360 --> 00:43:17,890
depending on what's acceptable from a

00:43:15,280 --> 00:43:19,180
rest point of view for your use case if

00:43:17,890 --> 00:43:22,600
we're coming in the case of the Apache

00:43:19,180 --> 00:43:25,510
web server just restarting it based

00:43:22,600 --> 00:43:26,710
these cycles that that key until as one

00:43:25,510 --> 00:43:29,980
point to this whole thing has been

00:43:26,710 --> 00:43:32,260
solved so it's not a problem anymore

00:43:29,980 --> 00:43:34,990
there's no vulnerability in terms of

00:43:32,260 --> 00:43:40,480
forward secrecy so in that case you do

00:43:34,990 --> 00:43:43,210
want to have this enabled I think I'll

00:43:40,480 --> 00:43:46,840
skip over the other to be every running

00:43:43,210 --> 00:43:51,100
out of time okay give me a few more

00:43:46,840 --> 00:43:54,670
minutes for this um whatever session

00:43:51,100 --> 00:43:57,369
tickets OCSP the online certificate

00:43:54,670 --> 00:44:01,210
status protocol and I talked initially

00:43:57,369 --> 00:44:03,310
about the certificate revocation list so

00:44:01,210 --> 00:44:05,170
browser talking to a server doesn't

00:44:03,310 --> 00:44:06,670
necessarily know if that certificate is

00:44:05,170 --> 00:44:08,980
still valid yes it may not have been

00:44:06,670 --> 00:44:10,170
expired but the client at that point

00:44:08,980 --> 00:44:11,320
doesn't really know if it has been

00:44:10,170 --> 00:44:13,030
revoked

00:44:11,320 --> 00:44:17,020
because maybe it has been compromised a

00:44:13,030 --> 00:44:20,590
few days ago for this the the OCSP

00:44:17,020 --> 00:44:22,450
protocol was invented basically it

00:44:20,590 --> 00:44:25,180
allows the browser so the certificate

00:44:22,450 --> 00:44:27,460
contains a no CSP endpoint that the

00:44:25,180 --> 00:44:29,440
browser can use or the client can use

00:44:27,460 --> 00:44:34,210
to ask the CIA is that certificate still

00:44:29,440 --> 00:44:36,280
valid but that creates lots of issues

00:44:34,210 --> 00:44:38,350
there's a privacy issue you have to send

00:44:36,280 --> 00:44:39,790
a request to somewhere which which

00:44:38,350 --> 00:44:42,550
website you're talking about it's the

00:44:39,790 --> 00:44:45,970
efficiency it didn't mitigate against

00:44:42,550 --> 00:44:47,830
man-in-the-middle attacks etc what you

00:44:45,970 --> 00:44:50,020
want to enable and you're on your server

00:44:47,830 --> 00:44:53,410
side is what's referred to as OCSP

00:44:50,020 --> 00:44:55,590
stapling it's known as the TLS

00:44:53,410 --> 00:44:59,010
certificate status request extension

00:44:55,590 --> 00:45:02,950
wonderful name what it basically does is

00:44:59,010 --> 00:45:06,790
the server side talks to the CA and gets

00:45:02,950 --> 00:45:11,530
a signed piece of data from the from the

00:45:06,790 --> 00:45:14,200
CA and simply forwards this as part of

00:45:11,530 --> 00:45:17,650
the handshake to the client so instead

00:45:14,200 --> 00:45:19,570
of the client asking the CA it gets a

00:45:17,650 --> 00:45:21,310
blob of data from the server which is

00:45:19,570 --> 00:45:23,640
signed by the CA so the client can

00:45:21,310 --> 00:45:27,040
verify that that it's valid information

00:45:23,640 --> 00:45:30,670
which allows it to say ok this is a

00:45:27,040 --> 00:45:33,010
recent response from the CA that at

00:45:30,670 --> 00:45:34,750
least I know two hours ago this

00:45:33,010 --> 00:45:37,390
certificate was still valid so it hasn't

00:45:34,750 --> 00:45:39,430
been compromised so it makes this whole

00:45:37,390 --> 00:45:40,990
thing more efficient and the browser or

00:45:39,430 --> 00:45:44,610
the client really just talks to the

00:45:40,990 --> 00:45:50,850
server and not has to talk to any other

00:45:44,610 --> 00:45:53,560
endpoint and a whole different set of

00:45:50,850 --> 00:45:56,100
configuration in your service of where

00:45:53,560 --> 00:46:01,360
usually comes into play when you want to

00:45:56,100 --> 00:46:04,420
not just use HTTP to identify or to

00:46:01,360 --> 00:46:06,130
allow the server to be authenticated

00:46:04,420 --> 00:46:07,210
towards the client but if you want the

00:46:06,130 --> 00:46:09,880
other way around if you want to

00:46:07,210 --> 00:46:12,880
authenticate your clients your browser's

00:46:09,880 --> 00:46:15,970
if you have certificates issued to your

00:46:12,880 --> 00:46:17,890
employees or to your your service if you

00:46:15,970 --> 00:46:20,490
use like a back-end service that's

00:46:17,890 --> 00:46:22,900
wanted by reverse proxy which uses HTTPS

00:46:20,490 --> 00:46:26,230
you need to enable client certificate

00:46:22,900 --> 00:46:28,150
authentication and that basically

00:46:26,230 --> 00:46:30,580
reverses the whole the whole thing in

00:46:28,150 --> 00:46:33,400
that case this this server would be the

00:46:30,580 --> 00:46:36,940
client so you need to give it a client

00:46:33,400 --> 00:46:39,940
certificate and make sure that the other

00:46:36,940 --> 00:46:41,750
side knows which certificates are

00:46:39,940 --> 00:46:43,850
trusted is

00:46:41,750 --> 00:46:46,700
I don't have time to go into the into

00:46:43,850 --> 00:46:50,180
the into details of this again depends

00:46:46,700 --> 00:46:51,860
if you're really it is something that

00:46:50,180 --> 00:46:55,600
that this is something that you are

00:46:51,860 --> 00:46:55,600
looking for in your use cases

00:46:56,590 --> 00:47:04,760
let me skip over that one important and

00:46:59,450 --> 00:47:07,310
last slide then I'll finish is not

00:47:04,760 --> 00:47:10,370
specifically something you can you you

00:47:07,310 --> 00:47:12,350
have to that's specific to the server

00:47:10,370 --> 00:47:14,920
software that you are using is the

00:47:12,350 --> 00:47:18,770
so-called HTTP strict Transport Security

00:47:14,920 --> 00:47:20,420
header it's simply a header that you

00:47:18,770 --> 00:47:22,940
configure on the server side there's not

00:47:20,420 --> 00:47:25,070
a feature of your application it's just

00:47:22,940 --> 00:47:26,780
that you would have to configure your

00:47:25,070 --> 00:47:30,410
server side to make sure this head I

00:47:26,780 --> 00:47:32,960
gets added in every response and it

00:47:30,410 --> 00:47:37,250
simply tells the client this website

00:47:32,960 --> 00:47:39,830
uses HTTP and will always use HTTPS well

00:47:37,250 --> 00:47:42,260
always as in you can define a max age

00:47:39,830 --> 00:47:45,650
for how long the client is supposed to

00:47:42,260 --> 00:47:47,690
catch that information typically once

00:47:45,650 --> 00:47:50,300
you make the decision I'm going to use

00:47:47,690 --> 00:47:53,180
HTTPS for everything you want to put

00:47:50,300 --> 00:47:54,500
something like the number of seconds for

00:47:53,180 --> 00:47:56,210
the whole year and they're like searches

00:47:54,500 --> 00:48:00,910
but similar to the cache control header

00:47:56,210 --> 00:48:05,050
if you are used to that one and one

00:48:00,910 --> 00:48:08,690
advice I would give is when he comes to

00:48:05,050 --> 00:48:10,430
development environments you may want to

00:48:08,690 --> 00:48:13,610
look at this configuration because once

00:48:10,430 --> 00:48:16,310
you put this in there if you are testing

00:48:13,610 --> 00:48:19,310
against the the staging or development

00:48:16,310 --> 00:48:20,720
environment you cannot reach the HTTP

00:48:19,310 --> 00:48:22,790
endpoint anymore with your browser

00:48:20,720 --> 00:48:24,590
because the browser has has cached this

00:48:22,790 --> 00:48:26,900
yes you may other things may be

00:48:24,590 --> 00:48:29,030
automated then that's that's all fine if

00:48:26,900 --> 00:48:30,620
your automation ignores this header but

00:48:29,030 --> 00:48:32,870
browsers will not browsers will honor

00:48:30,620 --> 00:48:35,180
this header and even if you specifically

00:48:32,870 --> 00:48:37,070
type HTTP it will not send an HTTP

00:48:35,180 --> 00:48:39,050
request anymore it will not do a

00:48:37,070 --> 00:48:42,020
redirect to HTTPS it will straight away

00:48:39,050 --> 00:48:43,520
send an HTTP request because you told it

00:48:42,020 --> 00:48:48,860
previously that you do not want to use

00:48:43,520 --> 00:48:51,170
HTTP anymore so that's also something

00:48:48,860 --> 00:48:54,650
that can be configured with what MD and

00:48:51,170 --> 00:48:57,200
Apache you just basically find it at the

00:48:54,650 --> 00:49:00,200
had every response that's been that's

00:48:57,200 --> 00:49:02,140
being sent okay I'm out of time do we

00:49:00,200 --> 00:49:06,290
have time for one or two questions maybe

00:49:02,140 --> 00:49:09,080
any questions on this have I confused

00:49:06,290 --> 00:49:12,440
everyone now with this beginner talk or

00:49:09,080 --> 00:49:23,900
was it too much of an advanced talk I

00:49:12,440 --> 00:49:26,990
hope not any questions okay yeah which

00:49:23,900 --> 00:49:30,170
is a place is it's in an Apache web

00:49:26,990 --> 00:49:33,080
server project or somewhere some

00:49:30,170 --> 00:49:37,000
information about Morrison security

00:49:33,080 --> 00:49:45,440
issues with certificates or visa Java

00:49:37,000 --> 00:49:49,070
where can check is my version which I

00:49:45,440 --> 00:49:52,970
use safe or sometimes as a box in Java

00:49:49,070 --> 00:49:56,090
for example this so SMI I serve a name

00:49:52,970 --> 00:49:59,450
armed in interrogation it was a bug say

00:49:56,090 --> 00:50:02,150
and some sometimes there's a box that

00:49:59,450 --> 00:50:05,240
really make a security so unsecure some

00:50:02,150 --> 00:50:10,250
some protocols is there any place in

00:50:05,240 --> 00:50:11,690
Apache we can check it and so if an send

00:50:10,250 --> 00:50:14,030
our question correctly it's about where

00:50:11,690 --> 00:50:15,290
can you find out about if something is

00:50:14,030 --> 00:50:17,680
wrong and you need to change something

00:50:15,290 --> 00:50:20,120
on your side whether it's a bug

00:50:17,680 --> 00:50:22,670
obviously bugs in the patchy software

00:50:20,120 --> 00:50:25,100
yes they there would be new release that

00:50:22,670 --> 00:50:26,690
would be the CVE number assigned and

00:50:25,100 --> 00:50:28,430
usually some information about how to

00:50:26,690 --> 00:50:30,230
mitigate the park what's the patches or

00:50:28,430 --> 00:50:32,840
which release you need to use that's

00:50:30,230 --> 00:50:37,250
about bugs and apache software if it's

00:50:32,840 --> 00:50:40,070
about in open ssl then it's off over to

00:50:37,250 --> 00:50:41,480
the open ssl team to publish back

00:50:40,070 --> 00:50:44,410
information and vulnerability

00:50:41,480 --> 00:50:47,960
information if it's something that's

00:50:44,410 --> 00:50:50,510
specific to the whole TLS protocol like

00:50:47,960 --> 00:50:52,730
we had the heartbleed attack a while

00:50:50,510 --> 00:50:54,980
back that's something that yeah may

00:50:52,730 --> 00:50:56,750
affect the service of but isn't really a

00:50:54,980 --> 00:50:59,570
back in the service of myself it was a

00:50:56,750 --> 00:51:02,330
problem with the whole protocol

00:50:59,570 --> 00:51:06,420
basically so that's a that's a different

00:51:02,330 --> 00:51:08,190
one then it's really up to

00:51:06,420 --> 00:51:10,980
the usual places where you find out

00:51:08,190 --> 00:51:13,020
about vulnerabilities backtrack many

00:51:10,980 --> 00:51:15,900
lists that that kind of that kind of

00:51:13,020 --> 00:51:17,880
stuff normally if it's even but not

00:51:15,900 --> 00:51:21,150
exactly in my piece of software I can

00:51:17,880 --> 00:51:23,400
even despite as I'd recommend to use us

00:51:21,150 --> 00:51:28,920
to use some workarounds to hide this

00:51:23,400 --> 00:51:30,930
part I'm sorry say again even if it's if

00:51:28,920 --> 00:51:34,560
it's a problem not exactly in the my

00:51:30,930 --> 00:51:37,440
project in my piece of software yeah but

00:51:34,560 --> 00:51:40,320
for example in Java or Telus or

00:51:37,440 --> 00:51:43,680
somewhere else I can recommend the users

00:51:40,320 --> 00:51:45,720
way to avoid workarounds basically to

00:51:43,680 --> 00:51:47,690
avoid a problem immediately because

00:51:45,720 --> 00:51:51,180
sometimes it could be really critical

00:51:47,690 --> 00:51:53,520
yeah it's it's something I I kind of

00:51:51,180 --> 00:51:55,080
tried to mention around the whole how

00:51:53,520 --> 00:51:57,300
you configure your protocols how you

00:51:55,080 --> 00:51:59,910
configure the set of cipher suites if

00:51:57,300 --> 00:52:01,350
you have a wrong configuration in there

00:51:59,910 --> 00:52:02,790
it's really up to you it's something

00:52:01,350 --> 00:52:05,220
that you need to fix on your side

00:52:02,790 --> 00:52:06,750
there's no backing in the protocol or

00:52:05,220 --> 00:52:08,670
the application it's it's a Mis

00:52:06,750 --> 00:52:10,080
configuration so that's a tricky bit

00:52:08,670 --> 00:52:12,630
I've always seen miss configurations

00:52:10,080 --> 00:52:14,700
around using the wrong certificates

00:52:12,630 --> 00:52:17,760
using the wrong key and which which then

00:52:14,700 --> 00:52:19,380
causes problems so I can't really give

00:52:17,760 --> 00:52:20,930
advice it depends on on how you're

00:52:19,380 --> 00:52:24,120
handling this is really up to you to

00:52:20,930 --> 00:52:27,060
follow best practices and have someone

00:52:24,120 --> 00:52:28,770
who understands this to some level I

00:52:27,060 --> 00:52:31,470
actually do this or to some level I mean

00:52:28,770 --> 00:52:33,150
the person who is valuing this or

00:52:31,470 --> 00:52:35,960
checking these configurations should

00:52:33,150 --> 00:52:39,120
know how this whole thing works with

00:52:35,960 --> 00:52:42,330
HTTPS it's easy to to tweak the

00:52:39,120 --> 00:52:43,920
configuration until it works but that

00:52:42,330 --> 00:52:45,690
doesn't necessarily mean that you've

00:52:43,920 --> 00:52:48,470
covered all the cases where it works but

00:52:45,690 --> 00:52:51,810
shouldn't work if you know what I mean

00:52:48,470 --> 00:52:55,710
in terms of checking your web server a

00:52:51,810 --> 00:52:59,430
good place to check is there's the SSL

00:52:55,710 --> 00:53:01,080
labs SSL server security test or

00:52:59,430 --> 00:53:03,900
whatever it's called basically if you

00:53:01,080 --> 00:53:05,940
look for SSL labs dot-com and and server

00:53:03,900 --> 00:53:08,430
tests you can basically put in your

00:53:05,940 --> 00:53:10,380
hostname and it will do a long set of

00:53:08,430 --> 00:53:11,700
tests and it will tell you which ciphers

00:53:10,380 --> 00:53:14,190
you have enabled it will tell you which

00:53:11,700 --> 00:53:15,720
ones are insecure if you have any

00:53:14,190 --> 00:53:17,580
protocols enable that you shouldn't have

00:53:15,720 --> 00:53:20,190
enabled and provide you with information

00:53:17,580 --> 00:53:22,740
about how to fix this or

00:53:20,190 --> 00:53:25,680
can be done in some cases when the in

00:53:22,740 --> 00:53:29,220
the past especially was was TLS with

00:53:25,680 --> 00:53:32,040
early TLS versions there was sometimes

00:53:29,220 --> 00:53:33,540
the the problem that it's a security

00:53:32,040 --> 00:53:35,790
feature you want to enable but by

00:53:33,540 --> 00:53:37,740
enabling it you cause another security

00:53:35,790 --> 00:53:41,550
problem so there was like a like a

00:53:37,740 --> 00:53:43,020
catch-22 kind of setup so some hedges

00:53:41,550 --> 00:53:46,680
you have to decide based on your use

00:53:43,020 --> 00:53:49,290
case what makes sense but that is a

00:53:46,680 --> 00:53:51,480
useful site I use sometimes as well to

00:53:49,290 --> 00:53:53,040
make sure why I haven't best configured

00:53:51,480 --> 00:53:55,230
anything but that doesn't necessarily

00:53:53,040 --> 00:53:57,630
help you with like internal servers or

00:53:55,230 --> 00:54:02,150
like clients of Java clients that that

00:53:57,630 --> 00:54:05,490
you've developed okay thanks all right

00:54:02,150 --> 00:54:08,069
this one is even quicker you can ask the

00:54:05,490 --> 00:54:11,190
CA with a certificate if we worked or

00:54:08,069 --> 00:54:12,750
not but can you ask anyone whether the

00:54:11,190 --> 00:54:20,869
CA is it'll authorized to issue

00:54:12,750 --> 00:54:24,300
certificates yes and no browsers today

00:54:20,869 --> 00:54:26,900
typically don't really have this like

00:54:24,300 --> 00:54:29,460
like features that would make this easy

00:54:26,900 --> 00:54:35,810
the ism I'm trying to remember the name

00:54:29,460 --> 00:54:37,500
there is a what it's called this later

00:54:35,810 --> 00:54:43,260
sorry Britta

00:54:37,500 --> 00:54:45,060
Britta no like a monitoring is the wrong

00:54:43,260 --> 00:54:48,630
word but like a monitoring system that

00:54:45,060 --> 00:54:51,210
that record certificates and CI

00:54:48,630 --> 00:54:52,740
information to see if any of them may

00:54:51,210 --> 00:54:55,010
have been compromised or something I

00:54:52,740 --> 00:54:57,540
kept that sorry I'm missing the name

00:54:55,010 --> 00:55:00,030
let's put it that way based on the

00:54:57,540 --> 00:55:02,280
protocols itself there isn't really an

00:55:00,030 --> 00:55:04,560
easy way to do this let's put it that

00:55:02,280 --> 00:55:06,930
way I think there's some research in

00:55:04,560 --> 00:55:09,230
this area there's some first steps to to

00:55:06,930 --> 00:55:12,420
have some kind of more transparency

00:55:09,230 --> 00:55:13,380
around this but yeah if the CIA has been

00:55:12,420 --> 00:55:17,839
compromised

00:55:13,380 --> 00:55:17,839
mmm yeah then you have a problem

00:55:21,400 --> 00:55:28,420
I think we need to need to finish I need

00:55:25,750 --> 00:55:31,810
to make way for the next speaker which i

00:55:28,420 --> 00:55:33,280
think is you okay okay thank you very

00:55:31,810 --> 00:55:38,609
much

00:55:33,280 --> 00:55:38,609

YouTube URL: https://www.youtube.com/watch?v=HBI5vhlmagY


