Title: #ACEU19: Jean-Frederic Clere – HTTP 2, HTTP 3 and SSL TLS State of Art in Our Servers
Publication date: 2019-10-31
Playlist: ApacheCon Europe 2019 – Berlin
Description: 
	More: https://aceu19.apachecon.com/session/http2-http3-and-ssltls-state-art-our-servers

A new protocol is getting ready HTTP/3 we will look to where we are with it in our serves.
The "old" HTTP/2 protocol and the corresponding TLS/SSL are common to Traffic Server, HTTP Server and Tomcat.
The presentation will shortly explain the new protocol and the ALPN extensions and look to the state of the those in our 3 servers and show the common parts and the specifics of each servers.
A demo configuration of each server will be run.
Captions: 
	00:00:04,620 --> 00:00:11,590
okay so I'm going to speak about the new

00:00:07,270 --> 00:00:15,670
protocol HTTP HTTP 3 and I'm going to

00:00:11,590 --> 00:00:20,170
speak also a little about our the ICP 2

00:00:15,670 --> 00:00:23,950
which is not so new and I to talk

00:00:20,170 --> 00:00:28,000
Maanshan SSL and TLS but I will only go

00:00:23,950 --> 00:00:30,660
briefly on the topic I have a bunch of

00:00:28,000 --> 00:00:33,880
the demo and a bunch of a small our way

00:00:30,660 --> 00:00:39,220
which I don't know at some point it

00:00:33,880 --> 00:00:41,050
should start and you know however I like

00:00:39,220 --> 00:00:44,430
the most but usually my demos are not

00:00:41,050 --> 00:00:44,430
working for different reasons

00:00:44,700 --> 00:00:50,800
so what I will cover I will cover the

00:00:47,920 --> 00:00:52,390
new protocol basically I'm not going to

00:00:50,800 --> 00:00:57,010
go into detail how it works

00:00:52,390 --> 00:00:59,650
a but you can ask questions I will do my

00:00:57,010 --> 00:01:01,450
best to answer I have a red part of the

00:00:59,650 --> 00:01:05,680
spec I understand more is how it is so I

00:01:01,450 --> 00:01:08,020
can probably give some the answer I can

00:01:05,680 --> 00:01:10,060
speak about the I'm going to speak about

00:01:08,020 --> 00:01:14,560
the edge - I'm going to speak about the

00:01:10,060 --> 00:01:19,229
edge - and the LPN I'm going to give a

00:01:14,560 --> 00:01:21,880
brief status or while we are on a server

00:01:19,229 --> 00:01:26,620
HTTP Dini on Tomcat and traffic server I

00:01:21,880 --> 00:01:30,280
never have room for demo for my demo and

00:01:26,620 --> 00:01:32,830
some questions don't hesitate to stop me

00:01:30,280 --> 00:01:36,520
if you have if you have a question

00:01:32,830 --> 00:01:39,820
because if we put all at the end it it's

00:01:36,520 --> 00:01:44,020
I I made a lot of time to answer the

00:01:39,820 --> 00:01:47,470
questions so I was already presenting I

00:01:44,020 --> 00:01:50,380
guess you all know me I'm chef Eric I'm

00:01:47,470 --> 00:01:52,000
living in Switzerland and I'm a runner

00:01:50,380 --> 00:01:53,770
I've been running this morning I was a

00:01:52,000 --> 00:01:57,400
bit disappointed I was alone running in

00:01:53,770 --> 00:01:58,659
the rain but that's happened I started

00:01:57,400 --> 00:02:00,250
in my hotel it was not raining and

00:01:58,659 --> 00:02:02,590
arrived at the place where the people

00:02:00,250 --> 00:02:06,750
were supposed to meet it was raining so

00:02:02,590 --> 00:02:06,750
I was running and I was running anyway

00:02:07,590 --> 00:02:17,080
so let's jump directly in the slide but

00:02:14,169 --> 00:02:21,070
I'm going to just basically stand what

00:02:17,080 --> 00:02:22,740
well why are we doing so many new

00:02:21,070 --> 00:02:27,100
protocols

00:02:22,740 --> 00:02:30,280
well we have discovered that at CP 1.1

00:02:27,100 --> 00:02:32,230
is not the best performance for the

00:02:30,280 --> 00:02:37,210
whole browser for the rendering because

00:02:32,230 --> 00:02:39,840
basically you have to multiplex you you

00:02:37,210 --> 00:02:42,400
have to establish several connection

00:02:39,840 --> 00:02:45,130
establishing a tcp/ip connection is

00:02:42,400 --> 00:02:46,360
taking a lot of time and definitely if

00:02:45,130 --> 00:02:49,840
your browser need something like 10

00:02:46,360 --> 00:02:51,960
connection to get a page it's going to

00:02:49,840 --> 00:02:56,290
take several milliseconds until

00:02:51,960 --> 00:02:58,240
something can be displayed so they were

00:02:56,290 --> 00:03:03,730
different intent to improve these things

00:02:58,240 --> 00:03:08,650
like telling the browser to open more

00:03:03,730 --> 00:03:11,170
sockets to the server's also trying to

00:03:08,650 --> 00:03:15,370
keep them open and reuse them but that's

00:03:11,170 --> 00:03:19,920
still not perfect so we were coming with

00:03:15,370 --> 00:03:23,709
a new protocol HTTP 2 which basically

00:03:19,920 --> 00:03:26,980
still use tcp/ip and basically it open

00:03:23,709 --> 00:03:29,290
one socket between the browser and the

00:03:26,980 --> 00:03:32,440
server and in this socket we're going to

00:03:29,290 --> 00:03:35,709
dip Lex the requests we need to build

00:03:32,440 --> 00:03:38,700
the page but this is not this is still

00:03:35,709 --> 00:03:44,140
not perfect because it's a connected

00:03:38,700 --> 00:03:48,250
connection of the tcp/ip basically if

00:03:44,140 --> 00:03:50,770
one packet is lost in the middle it's

00:03:48,250 --> 00:03:54,340
going to block everything until this

00:03:50,770 --> 00:03:56,860
packet is repeated definitively if it

00:03:54,340 --> 00:03:59,320
works a lot better when you use h2 but

00:03:56,860 --> 00:04:00,970
still if if you lose one packet you are

00:03:59,320 --> 00:04:04,450
in trouble and you're in trouble in all

00:04:00,970 --> 00:04:09,239
your connections so a new idea was

00:04:04,450 --> 00:04:12,640
developed is like why not using UDP and

00:04:09,239 --> 00:04:16,350
the advantage of UDP as you do not need

00:04:12,640 --> 00:04:16,350
to acknowledge the packet you're sending

00:04:16,500 --> 00:04:23,260
you can prevent this blocking situation

00:04:20,530 --> 00:04:26,950
because basically you can still be

00:04:23,260 --> 00:04:29,140
signing things for for one part of the

00:04:26,950 --> 00:04:30,449
page while another one have been lost

00:04:29,140 --> 00:04:32,789
that

00:04:30,449 --> 00:04:35,370
the browser that we can still try to

00:04:32,789 --> 00:04:39,870
display something while he will at some

00:04:35,370 --> 00:04:42,590
point ask the the repetition of of the

00:04:39,870 --> 00:04:44,909
frame that he have not received

00:04:42,590 --> 00:04:47,129
basically those who did the new h2

00:04:44,909 --> 00:04:52,080
protocol it's in progress

00:04:47,129 --> 00:04:54,060
they have been draft regularly I I did

00:04:52,080 --> 00:04:56,159
the presentation in Las Vegas was one

00:04:54,060 --> 00:05:00,050
version of the draft of the specs now

00:04:56,159 --> 00:05:03,090
there's a new one done some our

00:05:00,050 --> 00:05:05,490
compatible or some other server and the

00:05:03,090 --> 00:05:07,979
browser does not want to have to support

00:05:05,490 --> 00:05:11,340
more than one so basically if you if you

00:05:07,979 --> 00:05:13,979
recombine something with the new your

00:05:11,340 --> 00:05:16,110
library somewhere and it done it used

00:05:13,979 --> 00:05:20,310
the new aged tree protocol basically

00:05:16,110 --> 00:05:22,289
it's going to be not working and I have

00:05:20,310 --> 00:05:23,759
not investigate why but I think it makes

00:05:22,289 --> 00:05:25,949
sense when you are developing something

00:05:23,759 --> 00:05:28,710
not having to support all those many

00:05:25,949 --> 00:05:30,779
protocol in the case of h2 they were

00:05:28,710 --> 00:05:32,460
supporting several version but that was

00:05:30,779 --> 00:05:33,870
a lot more easy because it was adding

00:05:32,460 --> 00:05:38,330
stuff on it yeah it's a bit more

00:05:33,870 --> 00:05:43,919
difficult so h2 it's it's using quick

00:05:38,330 --> 00:05:50,009
it's you you need to use a TLS 1.3 and

00:05:43,919 --> 00:05:53,190
it using UDP basically the idea is to be

00:05:50,009 --> 00:06:00,210
able to transport HTTP 1.1 like h2 is

00:05:53,190 --> 00:06:04,409
doing to do the to do the to the initial

00:06:00,210 --> 00:06:06,000
connection in some cases basically you

00:06:04,409 --> 00:06:09,839
don't know that your server is going to

00:06:06,000 --> 00:06:13,650
be able to make each h3 so basically you

00:06:09,839 --> 00:06:18,870
can send a normal HTTP 1.1 request with

00:06:13,650 --> 00:06:20,490
a special with the special no you may

00:06:18,870 --> 00:06:22,919
get to your page and you get you're

00:06:20,490 --> 00:06:24,659
going to get a response a special adder

00:06:22,919 --> 00:06:27,960
which is responds with an alternate

00:06:24,659 --> 00:06:31,199
Saudis and the alternate service is h2

00:06:27,960 --> 00:06:33,569
h3 in D in in my example I'm in my

00:06:31,199 --> 00:06:35,520
example and that's the port where h3 is

00:06:33,569 --> 00:06:40,080
running on that server then the browser

00:06:35,520 --> 00:06:45,949
will go on could go on either tanguay is

00:06:40,080 --> 00:06:45,949
or going to use h3 on that for

00:06:46,040 --> 00:06:51,150
it's three of a bunch of problem because

00:06:48,840 --> 00:06:54,420
in lot of places the people have been

00:06:51,150 --> 00:06:56,190
closing the the UDP port because they

00:06:54,420 --> 00:06:59,660
was thinking like a mob that might be a

00:06:56,190 --> 00:06:59,660
security issue

00:06:59,750 --> 00:07:07,140
it's quite easy to think that UDP is

00:07:03,330 --> 00:07:11,220
probably slower than tcp/ip in the

00:07:07,140 --> 00:07:16,110
Colonel's because basically it isn't it

00:07:11,220 --> 00:07:20,100
have been it has not been so used and we

00:07:16,110 --> 00:07:23,790
can assume that it's probably not so

00:07:20,100 --> 00:07:25,800
fast and not so well done it's basically

00:07:23,790 --> 00:07:27,180
like it's auto prime of all software the

00:07:25,800 --> 00:07:29,220
more it's used the better it is

00:07:27,180 --> 00:07:31,350
so we know that that part have not been

00:07:29,220 --> 00:07:37,670
used much so it might be the desam the

00:07:31,350 --> 00:07:41,190
efficiency additionally definitely this

00:07:37,670 --> 00:07:43,740
this protocol is going to require a bit

00:07:41,190 --> 00:07:46,560
more CPU probably a bit more memory

00:07:43,740 --> 00:07:47,910
because basically you are you're going

00:07:46,560 --> 00:07:50,250
to have to check each packet you're

00:07:47,910 --> 00:07:52,410
getting to make sure that you can

00:07:50,250 --> 00:07:53,670
reorder it the right way and to see if

00:07:52,410 --> 00:07:55,440
there's not anything missing before

00:07:53,670 --> 00:07:59,580
starting to display the image for

00:07:55,440 --> 00:08:02,990
example the specification are based on

00:07:59,580 --> 00:08:05,490
several air FC exactly there's six RFC's

00:08:02,990 --> 00:08:08,990
for the moment I don't think they're

00:08:05,490 --> 00:08:13,440
going to be on a new one but we never do

00:08:08,990 --> 00:08:18,840
so how you are able to do it to start to

00:08:13,440 --> 00:08:22,710
play with which h3 because it's as I was

00:08:18,840 --> 00:08:26,780
saying it's it's it's still a draft so I

00:08:22,710 --> 00:08:29,610
don't apart about Google Facebook and

00:08:26,780 --> 00:08:32,400
CloudFlare I don't think anyone I've

00:08:29,610 --> 00:08:37,669
really using it intensively for the

00:08:32,400 --> 00:08:42,240
moment so what do we have

00:08:37,669 --> 00:08:49,490
what could we already test so you can

00:08:42,240 --> 00:08:53,060
curl since recently I can do at HTTP 3

00:08:49,490 --> 00:08:55,329
directly directly connected using you

00:08:53,060 --> 00:09:00,509
UDP or use

00:08:55,329 --> 00:09:03,399
the the odd service way by basically

00:09:00,509 --> 00:09:05,410
sending a get request and reading the

00:09:03,399 --> 00:09:10,329
response and reconnecting using this

00:09:05,410 --> 00:09:13,980
using UDP you need some extra libraries

00:09:10,329 --> 00:09:21,299
in most of the case in case to use curl

00:09:13,980 --> 00:09:21,299
you can do it using quiche or ng TCP -

00:09:21,720 --> 00:09:27,579
we have been low so looking in all Sava

00:09:24,689 --> 00:09:32,920
in in Tomcat we have a different problem

00:09:27,579 --> 00:09:36,369
because that requires UDP the UDP IP is

00:09:32,920 --> 00:09:41,170
quite incomplete compared to the TCP one

00:09:36,369 --> 00:09:42,730
so it's probably quite difficult to

00:09:41,170 --> 00:09:47,040
implement these things we don't know yet

00:09:42,730 --> 00:09:51,579
are we going to do that in Apache HTTP D

00:09:47,040 --> 00:09:55,449
it needs some time it will probably use

00:09:51,579 --> 00:09:57,129
an external library we don't know yet

00:09:55,449 --> 00:10:00,579
when we are going to start to implement

00:09:57,129 --> 00:10:05,230
it it's some work and apparently the it

00:10:00,579 --> 00:10:09,959
the the adoption of this the of this new

00:10:05,230 --> 00:10:12,040
protocol is not that fast traffic server

00:10:09,959 --> 00:10:15,459
traffic server they have been very

00:10:12,040 --> 00:10:20,910
active in this area so they are planning

00:10:15,459 --> 00:10:25,509
to have a at least support the current

00:10:20,910 --> 00:10:31,779
draft at some point at the end of this

00:10:25,509 --> 00:10:36,389
year so basically if I want to I will

00:10:31,779 --> 00:10:40,689
make a very short demo later on using

00:10:36,389 --> 00:10:44,079
the traffic server and Curl Curl that i

00:10:40,689 --> 00:10:46,299
have compiled whiskey because you need

00:10:44,079 --> 00:10:48,339
to you need you need different things

00:10:46,299 --> 00:10:54,850
you need first you need a modified

00:10:48,339 --> 00:10:58,720
version of open SSL because the h3

00:10:54,850 --> 00:11:01,299
protocol allows a different fast

00:10:58,720 --> 00:11:04,689
connection their own trip things which

00:11:01,299 --> 00:11:07,629
are not by default in open SSL so you

00:11:04,689 --> 00:11:08,350
need to have a small patch in open SSL

00:11:07,629 --> 00:11:10,270
the

00:11:08,350 --> 00:11:12,910
the code is available you just need to

00:11:10,270 --> 00:11:15,910
compile your own version but it's it's

00:11:12,910 --> 00:11:23,350
good to experiment but it's still quite

00:11:15,910 --> 00:11:25,570
far from production so well so I will

00:11:23,350 --> 00:11:28,830
jump a bit over these things and come

00:11:25,570 --> 00:11:31,420
back well I will be doing the demo

00:11:28,830 --> 00:11:33,040
because I I already did that

00:11:31,420 --> 00:11:39,340
presentation I know I'm going to run out

00:11:33,040 --> 00:11:42,010
of time otherwise so I'm going to

00:11:39,340 --> 00:11:47,230
re-explain a bit like I'm insisting on

00:11:42,010 --> 00:11:49,240
the message somehow so that this is the

00:11:47,230 --> 00:11:52,060
slide I was using when I was presenting

00:11:49,240 --> 00:11:58,450
the h2 protocol and this is valid also

00:11:52,060 --> 00:12:03,250
for h3 basically actually P 1.1 is quite

00:11:58,450 --> 00:12:05,290
old it's it's like the Apache Software

00:12:03,250 --> 00:12:09,580
Foundation it had been out here for a

00:12:05,290 --> 00:12:11,980
long time and it was prepared for what

00:12:09,580 --> 00:12:15,100
we were using at that time I had a

00:12:11,980 --> 00:12:19,090
server at that time running on on a on

00:12:15,100 --> 00:12:22,480
the huge desktop and I was just saving a

00:12:19,090 --> 00:12:25,080
small image and one or two HTML pages

00:12:22,480 --> 00:12:28,480
now if you have your own server at home

00:12:25,080 --> 00:12:29,730
you're going you have a huge page you're

00:12:28,480 --> 00:12:35,160
going to have a bunch of image

00:12:29,730 --> 00:12:35,160
JavaScript and a lot of stuff so

00:12:35,340 --> 00:12:40,420
definitely the design of the protocol

00:12:38,040 --> 00:12:42,100
start to be completely in adapted

00:12:40,420 --> 00:12:45,100
because you imagine to serve all those

00:12:42,100 --> 00:12:47,950
pieces according to the protocol you

00:12:45,100 --> 00:12:50,800
have to open a connection and to render

00:12:47,950 --> 00:12:54,640
these things it's going it's very very

00:12:50,800 --> 00:12:56,860
slow because you you get the HTML page

00:12:54,640 --> 00:12:58,270
that you're going that you start parsing

00:12:56,860 --> 00:12:59,740
and then you're going to open new

00:12:58,270 --> 00:13:01,420
connection and then you're going to get

00:12:59,740 --> 00:13:08,220
all those things the one after the other

00:13:01,420 --> 00:13:10,870
so we had to look for something new so

00:13:08,220 --> 00:13:13,600
what what could we do to make something

00:13:10,870 --> 00:13:16,930
new first we make it a big part be

00:13:13,600 --> 00:13:19,690
binary you know all the errors they're

00:13:16,930 --> 00:13:21,100
going to be the same so basically you

00:13:19,690 --> 00:13:22,060
have to if you if you have a binary

00:13:21,100 --> 00:13:24,700
protocol

00:13:22,060 --> 00:13:28,120
can compress the you can compress things

00:13:24,700 --> 00:13:32,050
you can have all the others compressed

00:13:28,120 --> 00:13:33,820
or encoded you can have friends and you

00:13:32,050 --> 00:13:36,460
can multiplex the things basically the

00:13:33,820 --> 00:13:38,410
browser is going instead opening several

00:13:36,460 --> 00:13:40,720
socket it's going to open one socket and

00:13:38,410 --> 00:13:45,700
it's going to multiplex the data in this

00:13:40,720 --> 00:13:48,790
socket h2 was is based on on speedy it

00:13:45,700 --> 00:13:52,330
requires you to use TLS I mean the

00:13:48,790 --> 00:13:57,730
browser accounts do anything else than

00:13:52,330 --> 00:14:02,620
HTTP and they requires a strong cipher

00:13:57,730 --> 00:14:04,660
you can't do forward proxy but of course

00:14:02,620 --> 00:14:07,500
you can make reverse proxy and the

00:14:04,660 --> 00:14:10,030
reverse proxy is basically we have a

00:14:07,500 --> 00:14:14,020
version of the protocol which is without

00:14:10,030 --> 00:14:16,600
encrypting definitely that might not be

00:14:14,020 --> 00:14:18,790
the best idea but basically that allowed

00:14:16,600 --> 00:14:22,080
you to basically do delete LS

00:14:18,790 --> 00:14:26,230
termination on HTTP D and then having

00:14:22,080 --> 00:14:29,350
the clear text age to run on a tomcat

00:14:26,230 --> 00:14:33,940
for example anyway I will again say that

00:14:29,350 --> 00:14:37,120
I will say that now if you want to be

00:14:33,940 --> 00:14:39,750
really safe and secure it's not a very

00:14:37,120 --> 00:14:43,110
good idea that somewhere even in your

00:14:39,750 --> 00:14:46,750
supposedly safe intranet to have

00:14:43,110 --> 00:14:48,370
something which is unencrypted because

00:14:46,750 --> 00:14:49,930
basically at some point here you are

00:14:48,370 --> 00:14:52,600
going to other something which is

00:14:49,930 --> 00:14:55,690
compressed but it's unencrypted so you

00:14:52,600 --> 00:14:58,600
can someone in the company in the

00:14:55,690 --> 00:15:00,820
intranet could snipe this data which is

00:14:58,600 --> 00:15:03,280
probably not what you want when you are

00:15:00,820 --> 00:15:07,030
a bank so more and more people more and

00:15:03,280 --> 00:15:10,380
more of our customer usually requesting

00:15:07,030 --> 00:15:13,660
that everything stays encrypted they all

00:15:10,380 --> 00:15:17,400
all along the the way for the data until

00:15:13,660 --> 00:15:17,400
they arrive in the application

00:15:20,960 --> 00:15:33,150
any questions so far I'm going too fast

00:15:28,340 --> 00:15:35,220
okay so if if you look to age - well

00:15:33,150 --> 00:15:40,740
basically it's it's based on two

00:15:35,220 --> 00:15:45,330
specification on two RFC's one is the

00:15:40,740 --> 00:15:47,640
other compression and definitely this is

00:15:45,330 --> 00:15:51,300
one of the part that is change in h3

00:15:47,640 --> 00:15:54,330
because this supposed comes kind of some

00:15:51,300 --> 00:15:55,920
order of the data which we can't warrant

00:15:54,330 --> 00:15:58,740
it in the h3 protocol

00:15:55,920 --> 00:16:02,100
so this those are different in the case

00:15:58,740 --> 00:16:08,100
of when you're using h3 that's why also

00:16:02,100 --> 00:16:11,970
why we are more RFC so what does it use

00:16:08,100 --> 00:16:13,740
also it use the application layer

00:16:11,970 --> 00:16:16,050
protocol negotiation so this is

00:16:13,740 --> 00:16:20,940
something which is going to be in the

00:16:16,050 --> 00:16:23,750
first ESL packet which is exchange and

00:16:20,940 --> 00:16:26,130
basically the client is going to tell

00:16:23,750 --> 00:16:30,890
unable to do that and the server is

00:16:26,130 --> 00:16:36,210
going to answer well let's do this one I

00:16:30,890 --> 00:16:38,520
have so multiplexed mean that basically

00:16:36,210 --> 00:16:42,870
you can exchange in the sense okay so

00:16:38,520 --> 00:16:45,180
this big bluish stuff is a supposed to

00:16:42,870 --> 00:16:46,670
be a socket the things inside is

00:16:45,180 --> 00:16:52,260
supposed to be a stream a stream

00:16:46,670 --> 00:16:56,370
correspond to basically l1 request

00:16:52,260 --> 00:16:59,790
response process that you do in a HTTP

00:16:56,370 --> 00:17:01,920
1.1 so for example you can have a adder

00:16:59,790 --> 00:17:04,260
which is answered by your adder you can

00:17:01,920 --> 00:17:06,150
have a bunch of other and get and get

00:17:04,260 --> 00:17:09,120
some data in the case of a gate you can

00:17:06,150 --> 00:17:12,240
have a data and others and in the in the

00:17:09,120 --> 00:17:14,339
case you have something like a post and

00:17:12,240 --> 00:17:18,569
the interesting things is like basically

00:17:14,339 --> 00:17:21,120
your server is able now to push some

00:17:18,569 --> 00:17:24,209
data to the browser that could be

00:17:21,120 --> 00:17:26,069
interesting for example if you have a if

00:17:24,209 --> 00:17:28,890
you know your page is going to offer a

00:17:26,069 --> 00:17:30,780
large JavaScript it could be interesting

00:17:28,890 --> 00:17:34,090
to push this JavaScript while the

00:17:30,780 --> 00:17:38,920
customer is trying to make a choice

00:17:34,090 --> 00:17:41,200
shoes were is choose one or two you you

00:17:38,920 --> 00:17:43,480
need some time so it could be a good

00:17:41,200 --> 00:17:46,510
moment to send something to the browser

00:17:43,480 --> 00:17:49,240
so that he can put it in his cache one

00:17:46,510 --> 00:17:52,210
of the issue is like actually you I was

00:17:49,240 --> 00:17:53,800
trying something is to send images like

00:17:52,210 --> 00:17:55,840
basically you know that at some point

00:17:53,800 --> 00:17:57,460
you're going to have images and then you

00:17:55,840 --> 00:17:59,740
want to send them while the customer is

00:17:57,460 --> 00:18:03,370
making a choice that is not working but

00:17:59,740 --> 00:18:04,720
the JavaScript is working so that could

00:18:03,370 --> 00:18:06,670
be very interesting like a you imagine

00:18:04,720 --> 00:18:09,360
you have you have a bunch of choice

00:18:06,670 --> 00:18:11,710
you're going to use the same JavaScript

00:18:09,360 --> 00:18:13,270
or you need a JavaScript to validate

00:18:11,710 --> 00:18:14,740
different things then you can send them

00:18:13,270 --> 00:18:17,070
when the customer is making a choice

00:18:14,740 --> 00:18:20,470
which definitely will make your server

00:18:17,070 --> 00:18:22,660
with a lot better latency because when

00:18:20,470 --> 00:18:25,020
the guy with will click one you will

00:18:22,660 --> 00:18:28,840
have what is in this choice one with

00:18:25,020 --> 00:18:30,810
already all the JavaScript he need to

00:18:28,840 --> 00:18:34,470
make the validation in the next page

00:18:30,810 --> 00:18:37,180
that's that's the ID of the server bush

00:18:34,470 --> 00:18:39,340
of course it depends on the app on your

00:18:37,180 --> 00:18:45,370
application you you need to you need to

00:18:39,340 --> 00:18:47,410
prepare the stuff a little so the other

00:18:45,370 --> 00:18:52,720
compression that's not going to be into

00:18:47,410 --> 00:18:54,580
sis to save something like 80% of the of

00:18:52,720 --> 00:18:56,350
the stuff what you need on in the other

00:18:54,580 --> 00:19:02,350
it's specially interesting when you have

00:18:56,350 --> 00:19:04,150
small pieces a small would you have a

00:19:02,350 --> 00:19:06,760
request that I was several small

00:19:04,150 --> 00:19:09,180
requests with a small answers because

00:19:06,760 --> 00:19:12,460
basically you can you're going to get

00:19:09,180 --> 00:19:14,200
you can have you can under priorities on

00:19:12,460 --> 00:19:15,760
both sides the browser can tell like I

00:19:14,200 --> 00:19:18,520
want to get this first and the server

00:19:15,760 --> 00:19:21,730
can tell I want this first the server

00:19:18,520 --> 00:19:24,010
Bush as I was mentioning definitively

00:19:21,730 --> 00:19:25,540
that that will prevent something which

00:19:24,010 --> 00:19:28,030
is taking a lot of time which is

00:19:25,540 --> 00:19:31,030
basically the browser saying like oh I

00:19:28,030 --> 00:19:32,620
need the JavaScript and you need to open

00:19:31,030 --> 00:19:33,850
a request and get it and of course if

00:19:32,620 --> 00:19:36,760
you already have it it's going to be a

00:19:33,850 --> 00:19:38,650
lot better so all those new protocol are

00:19:36,760 --> 00:19:40,750
basically not to make the people that

00:19:38,650 --> 00:19:43,570
are doing tomcat and httpd well

00:19:40,750 --> 00:19:45,910
traffic's have their life more easy it

00:19:43,570 --> 00:19:49,200
just to get to

00:19:45,910 --> 00:19:52,330
faster and better rendering on browsers

00:19:49,200 --> 00:19:54,340
so this is this is for the final user

00:19:52,330 --> 00:19:57,160
and then we are making server so

00:19:54,340 --> 00:20:09,970
basically for us it's time to be more

00:19:57,160 --> 00:20:13,240
trouble than any other thing so if if we

00:20:09,970 --> 00:20:16,240
link to h2 it has been there since a

00:20:13,240 --> 00:20:20,320
long long time I I don't think if anyone

00:20:16,240 --> 00:20:23,140
is still using Firefox that he saw that

00:20:20,320 --> 00:20:26,010
if for but I guess that starts of

00:20:23,140 --> 00:20:29,830
already some very old one like chrome 30

00:20:26,010 --> 00:20:33,300
internet explorer 11 opera and Safari

00:20:29,830 --> 00:20:36,820
and that definitively it's supported

00:20:33,300 --> 00:20:42,130
some people have that's that's the data

00:20:36,820 --> 00:20:45,040
from a year and a half now the traffic

00:20:42,130 --> 00:20:47,050
server people are pressing the different

00:20:45,040 --> 00:20:51,520
requests they're getting and they were

00:20:47,050 --> 00:20:54,970
noting that 80% of the traffic or around

00:20:51,520 --> 00:20:57,220
80 percent of the traffic was using H -

00:20:54,970 --> 00:20:59,320
they have their favor with h2 enabled

00:20:57,220 --> 00:21:00,760
and then that way they say the

00:20:59,320 --> 00:21:04,480
estimation is like basically there's a

00:21:00,760 --> 00:21:08,050
very small they start to be around 20%

00:21:04,480 --> 00:21:16,840
of the people that don't have a browser

00:21:08,050 --> 00:21:21,490
which is able to do h2 so we're going to

00:21:16,840 --> 00:21:25,030
go a bit deeper in the in some more

00:21:21,490 --> 00:21:29,440
details in order to try to show a little

00:21:25,030 --> 00:21:35,350
of those things are working so this is a

00:21:29,440 --> 00:21:37,030
client hello this is a my laptop I need

00:21:35,350 --> 00:21:39,040
to drink something because I have to

00:21:37,030 --> 00:21:45,490
have another talk different get dry I

00:21:39,040 --> 00:21:49,360
will not be able to do it so basically

00:21:45,490 --> 00:21:51,450
this is a this is my firefox that make a

00:21:49,360 --> 00:21:56,740
request and this is a white shark

00:21:51,450 --> 00:22:00,040
capture of the connection it's a it's

00:21:56,740 --> 00:22:06,850
using it's not very recent one because

00:22:00,040 --> 00:22:08,950
choosing a TLS 1.2 you can see that you

00:22:06,850 --> 00:22:12,340
have a client hello which is going to be

00:22:08,950 --> 00:22:17,040
answered by a server alone and this is

00:22:12,340 --> 00:22:21,250
the data of the client hello and the

00:22:17,040 --> 00:22:23,350
browser the Firefox is telling all h2 is

00:22:21,250 --> 00:22:25,150
able to do like this this other

00:22:23,350 --> 00:22:27,640
different variant of the protocol this

00:22:25,150 --> 00:22:29,560
is the actual one is also telling that

00:22:27,640 --> 00:22:32,290
he is doing speedy which I don't think

00:22:29,560 --> 00:22:34,990
anyone is using anymore and is also

00:22:32,290 --> 00:22:36,960
doing HTTP 1.1 you will always be doing

00:22:34,990 --> 00:22:40,090
actually big one not one usually the

00:22:36,960 --> 00:22:42,130
that's the kind of like he fewer browser

00:22:40,090 --> 00:22:50,530
you have to support the old protocol for

00:22:42,130 --> 00:22:52,630
a long long time so the Tomcat is going

00:22:50,530 --> 00:22:53,050
is going to answer I have it's really a

00:22:52,630 --> 00:22:54,970
tomcat

00:22:53,050 --> 00:23:00,550
it's not that I have written Tomcat

00:22:54,970 --> 00:23:04,570
because it's a tomcat racket so this is

00:23:00,550 --> 00:23:09,190
the answer from Tomcat the tone in in

00:23:04,570 --> 00:23:14,380
the server ello the the Tomcat is going

00:23:09,190 --> 00:23:17,170
to Tucson TLP an extension you have the

00:23:14,380 --> 00:23:20,920
length and then he's going to tell the

00:23:17,170 --> 00:23:23,890
tips those things I can tunnel are not

00:23:20,920 --> 00:23:25,270
crypt attack at all and big redundant we

00:23:23,890 --> 00:23:27,130
could have a zero byte then you would

00:23:25,270 --> 00:23:28,840
know the nodes but that's it so you have

00:23:27,130 --> 00:23:32,020
the lengths and then it says that it the

00:23:28,840 --> 00:23:34,060
next protocol you want to do is h2 so as

00:23:32,020 --> 00:23:37,570
the browser was saying it this was

00:23:34,060 --> 00:23:46,630
browser was proposing edge to and tomcat

00:23:37,570 --> 00:23:49,030
says yes I can do that so this

00:23:46,630 --> 00:23:52,690
requirement in fact now they they looked

00:23:49,030 --> 00:24:00,430
a bit quite all because basically who is

00:23:52,690 --> 00:24:02,710
running a open SSL 1.1 something okay

00:24:00,430 --> 00:24:04,390
you you'll be too long but yeah that's I

00:24:02,710 --> 00:24:07,890
think that's that's a good idea

00:24:04,390 --> 00:24:17,850
so with

00:24:07,890 --> 00:24:21,030
running something older than 10.2 okay

00:24:17,850 --> 00:24:24,000
so yeah if you know if you're doing if

00:24:21,030 --> 00:24:25,950
you would be running one of zero

00:24:24,000 --> 00:24:28,740
something you definitely have a big

00:24:25,950 --> 00:24:31,290
problem you probably even know one can

00:24:28,740 --> 00:24:33,780
connect to your to your to your server

00:24:31,290 --> 00:24:35,790
because at some point to processor the

00:24:33,780 --> 00:24:37,670
browser have been more and more

00:24:35,790 --> 00:24:41,549
restrictive in order to protect

00:24:37,670 --> 00:24:44,040
customers so at some point everyone will

00:24:41,549 --> 00:24:44,900
have to upgrade to a new version of the

00:24:44,040 --> 00:24:52,620
protocol

00:24:44,900 --> 00:24:56,100
even if TLS from probably TLS 1 to 2 is

00:24:52,620 --> 00:25:00,390
going to be here for a long time because

00:24:56,100 --> 00:25:06,799
it's it's kind of choose to move fast

00:25:00,390 --> 00:25:10,890
and it start to move a bit slower and ok

00:25:06,799 --> 00:25:16,020
if you are using Tomcat this is in

00:25:10,890 --> 00:25:18,710
Tomcat it since Tomcat 8 on fine so it's

00:25:16,020 --> 00:25:22,440
going to be in line you need to use a

00:25:18,710 --> 00:25:27,600
tomcat Tomcat native the version need to

00:25:22,440 --> 00:25:30,270
be new enough in fact don't don't use

00:25:27,600 --> 00:25:32,790
that version of some cat native use the

00:25:30,270 --> 00:25:36,440
latest version the latest release

00:25:32,790 --> 00:25:40,820
because this this one is the old one or

00:25:36,440 --> 00:25:47,150
Java which is iodine Java 9 this is why

00:25:40,820 --> 00:25:50,340
Remy had problem with growl it's a Java

00:25:47,150 --> 00:25:52,890
8 and it does not have the ILP end so

00:25:50,340 --> 00:25:54,690
you can't basically decide that you're

00:25:52,890 --> 00:25:57,299
going to do issue because you can't

00:25:54,690 --> 00:26:00,210
analyze the message the browser is

00:25:57,299 --> 00:26:02,340
sending so basically what you're doing

00:26:00,210 --> 00:26:04,110
to do is like as you can't analyze the

00:26:02,340 --> 00:26:11,460
message you can't decide so you're going

00:26:04,110 --> 00:26:13,100
to do HTTP 1.1 so I if you look in RTP

00:26:11,460 --> 00:26:16,800
it has been there for a long long time

00:26:13,100 --> 00:26:20,790
as I was mentioning before it it's it's

00:26:16,800 --> 00:26:27,600
using a an external library

00:26:20,790 --> 00:26:32,310
leave NJ a HTP - this is a small library

00:26:27,600 --> 00:26:35,640
small C library which is available on

00:26:32,310 --> 00:26:38,940
all distribution if you look to traffic

00:26:35,640 --> 00:26:42,570
server traffic server they they have

00:26:38,940 --> 00:26:46,590
implemented the the full edge to stack

00:26:42,570 --> 00:26:50,760
in the in traffic server so they don't

00:26:46,590 --> 00:26:52,830
depend on anything else done OpenSSL -

00:26:50,760 --> 00:26:54,540
basically you get traffic server if you

00:26:52,830 --> 00:27:04,980
compile traffic server you uni

00:26:54,540 --> 00:27:11,070
dependency you have this open SSL okay

00:27:04,980 --> 00:27:17,970
so I'll be when I've written 8.5 it's

00:27:11,070 --> 00:27:22,080
also 9 so it's in in in case of Tomcat

00:27:17,970 --> 00:27:24,140
we have a full support it's stable if

00:27:22,080 --> 00:27:27,420
you want to use a server push you need a

00:27:24,140 --> 00:27:30,660
quite version a recent version of the of

00:27:27,420 --> 00:27:33,620
the servlet the thing is like basically

00:27:30,660 --> 00:27:37,080
don't be fool shabbos I was mentioning

00:27:33,620 --> 00:27:40,770
in HTTP DS as a full support for a long

00:27:37,080 --> 00:27:43,500
time and in traffic server they have

00:27:40,770 --> 00:27:51,270
nearly implemented everything this is

00:27:43,500 --> 00:27:54,500
the version of last year so I have some

00:27:51,270 --> 00:27:56,970
slide on Tomcat and I have some slide on

00:27:54,500 --> 00:28:01,650
httpd and I have some slide on traffic

00:27:56,970 --> 00:28:03,540
so this is not I should have dated this

00:28:01,650 --> 00:28:07,380
this thing but basically what is

00:28:03,540 --> 00:28:10,770
interesting to see is like in case you

00:28:07,380 --> 00:28:14,070
want to do to the protocol the only

00:28:10,770 --> 00:28:18,420
thing you have to add is a one line in

00:28:14,070 --> 00:28:25,440
your configuration which is I design all

00:28:18,420 --> 00:28:31,890
this this line so so if you look

00:28:25,440 --> 00:28:33,870
I waited to to example oh yeah this is

00:28:31,890 --> 00:28:39,480
using the upper protocol so this one is

00:28:33,870 --> 00:28:44,070
also going to work with Java 8 and this

00:28:39,480 --> 00:28:47,940
this one used the nao connected then it

00:28:44,070 --> 00:28:49,530
is going to require if you want to do h2

00:28:47,940 --> 00:28:53,040
is going to require a version of Java

00:28:49,530 --> 00:28:55,080
which is I online and actually it's

00:28:53,040 --> 00:28:56,460
going to be 11 because I don't think you

00:28:55,080 --> 00:29:07,760
want to use something which is not

00:28:56,460 --> 00:29:07,760
long-term support I'm going this time

00:29:13,430 --> 00:29:20,809
so in case you want to use the a pair

00:29:17,930 --> 00:29:23,360
which is the the first the first example

00:29:20,809 --> 00:29:27,070
I have you have to configure either you

00:29:23,360 --> 00:29:30,830
have to have your Tomcat native library

00:29:27,070 --> 00:29:38,000
in the Java path either you need to

00:29:30,830 --> 00:29:40,610
export it BLD pass the decision this is

00:29:38,000 --> 00:29:42,500
an example of the first one that was

00:29:40,610 --> 00:29:46,270
working more yet it was the first one

00:29:42,500 --> 00:29:52,580
that was working when you when you look

00:29:46,270 --> 00:29:56,210
this is using LD de I to see what its

00:29:52,580 --> 00:29:58,640
link it with and then I wasn't engaging

00:29:56,210 --> 00:29:59,960
the people to check that when they build

00:29:58,640 --> 00:30:03,679
these things on their own to make sure

00:29:59,960 --> 00:30:06,880
it's linked with the right one you have

00:30:03,679 --> 00:30:10,790
to have a version of open SSL which is

00:30:06,880 --> 00:30:14,110
early enough and appears does not really

00:30:10,790 --> 00:30:20,140
brings any problem because we don't use

00:30:14,110 --> 00:30:23,510
very complex feature of up here and

00:30:20,140 --> 00:30:29,870
nowadays in any distribution you have

00:30:23,510 --> 00:30:36,890
all you need as it's simpler 23 and I'm

00:30:29,870 --> 00:30:38,330
running federal 30 so you know so those

00:30:36,890 --> 00:30:42,980
are all test

00:30:38,330 --> 00:30:45,500
I didn't redo them but alive I did

00:30:42,980 --> 00:30:48,460
loosely make check that it was still

00:30:45,500 --> 00:30:51,200
making sense okay I take two points and

00:30:48,460 --> 00:30:54,230
so basically the year the idea is to say

00:30:51,200 --> 00:30:57,970
like okay this guy is telling us like we

00:30:54,230 --> 00:30:57,970
need to try the new protocol

00:30:59,500 --> 00:31:04,160
definitively that's surely have a cost

00:31:02,270 --> 00:31:06,070
because we're going to multiplex

00:31:04,160 --> 00:31:10,100
conference so you're going to have to

00:31:06,070 --> 00:31:13,130
demo duplex and uncompress and the idea

00:31:10,100 --> 00:31:16,360
was to like to look a little how much

00:31:13,130 --> 00:31:21,320
load we can get out of the stuff and

00:31:16,360 --> 00:31:24,730
definitively it well it's a load tested

00:31:21,320 --> 00:31:26,929
or kind bench so it's very you can tell

00:31:24,730 --> 00:31:30,979
you can make the bench tale

00:31:26,929 --> 00:31:33,859
what you want so but you can see part of

00:31:30,979 --> 00:31:36,589
what I was trying to explain here it's

00:31:33,859 --> 00:31:43,849
like if you have big if you are sending

00:31:36,589 --> 00:31:45,409
big binary file the the the concurrency

00:31:43,849 --> 00:31:48,799
that what you're going to get is going

00:31:45,409 --> 00:31:50,320
to be more or less the same because

00:31:48,799 --> 00:31:53,389
basically you have a very little

00:31:50,320 --> 00:31:54,769
overload because you just have a little

00:31:53,389 --> 00:31:56,989
part of the multiplexing the

00:31:54,769 --> 00:32:00,979
multiplexing if you are sending small

00:31:56,989 --> 00:32:08,029
packet you have a you are you need to

00:32:00,979 --> 00:32:10,789
consume a lot more resources and so this

00:32:08,029 --> 00:32:13,539
is this is the CPU usage because one

00:32:10,789 --> 00:32:18,710
thing is the true put you can get

00:32:13,539 --> 00:32:22,759
another thing is to get the CPU usage so

00:32:18,710 --> 00:32:25,279
yeah why we see first we don't feel the

00:32:22,759 --> 00:32:27,889
CPU completely which is in the caste of

00:32:25,279 --> 00:32:32,210
a benches but maybe not what we wanted

00:32:27,889 --> 00:32:35,509
but more or less that you can see you

00:32:32,210 --> 00:32:37,999
need an additional 10% of superior

00:32:35,509 --> 00:32:40,369
resources if you use the new protocol

00:32:37,999 --> 00:32:44,539
and that's not an application that's

00:32:40,369 --> 00:32:46,489
just a load test that's that's always

00:32:44,539 --> 00:32:49,549
the difficulty but if on a load test you

00:32:46,489 --> 00:32:51,019
have something 10 20 % definitely if you

00:32:49,549 --> 00:32:54,259
want to move to the new protocol you

00:32:51,019 --> 00:32:57,739
must make sure that you have enough CPU

00:32:54,259 --> 00:33:00,679
in order to see again because if you

00:32:57,739 --> 00:33:03,969
overload your server using the new

00:33:00,679 --> 00:33:03,969
protocol is not going to help

00:33:08,299 --> 00:33:15,739
so what we'll jump on the server on the

00:33:11,479 --> 00:33:17,779
demo and the demo are taking a lot of

00:33:15,739 --> 00:33:22,429
time so I'll I'll do them if there's no

00:33:17,779 --> 00:33:27,080
question by the way any question anyone

00:33:22,429 --> 00:33:30,049
using traffic server ok I will just go

00:33:27,080 --> 00:33:32,809
very very quickly on the on the other

00:33:30,049 --> 00:33:37,849
thing so traffic server is is a reverse

00:33:32,809 --> 00:33:39,889
proxy it had a lot of caching it used it

00:33:37,849 --> 00:33:43,940
was used to an event donated by Yahoo

00:33:39,889 --> 00:33:49,509
and it's it widely use on people that

00:33:43,940 --> 00:33:53,809
have a need of a fast proxy II it had

00:33:49,509 --> 00:33:55,940
some how it can serve static pages but

00:33:53,809 --> 00:33:58,700
that that's not the idea that basically

00:33:55,940 --> 00:34:01,399
the idea it's it's a proxy and it able

00:33:58,700 --> 00:34:02,779
to cache request any to mood Castro

00:34:01,399 --> 00:34:08,629
responds on the request in order to

00:34:02,779 --> 00:34:11,960
optimize the throughput so what is

00:34:08,629 --> 00:34:18,529
interesting to to see here we tell it

00:34:11,960 --> 00:34:23,569
that is going to use h2 we tell here in

00:34:18,529 --> 00:34:28,490
this example that is able to use TLS 1.1

00:34:23,569 --> 00:34:32,149
and TLS 1.2 we give him the key and

00:34:28,490 --> 00:34:36,950
certificate we asked him to map anything

00:34:32,149 --> 00:34:40,279
to autumn cut and he they'll be picky

00:34:36,950 --> 00:34:41,809
with the with the yellow which makes

00:34:40,279 --> 00:34:44,960
sense they want to protect their server

00:34:41,809 --> 00:34:47,779
so you need to tell that what you are

00:34:44,960 --> 00:34:51,710
doing so in this case I was following my

00:34:47,779 --> 00:34:56,869
own address which is probably not a good

00:34:51,710 --> 00:35:00,020
idea and any pv6 which is probably also

00:34:56,869 --> 00:35:02,150
not what you want but that is just an

00:35:00,020 --> 00:35:05,809
example that you can see what you need

00:35:02,150 --> 00:35:08,599
and all these things the things in httpd

00:35:05,809 --> 00:35:12,230
you have one big file in traffic server

00:35:08,599 --> 00:35:13,789
you have a lot of small files and I like

00:35:12,230 --> 00:35:16,190
httpd for one reason it's like

00:35:13,789 --> 00:35:17,839
everything is in one file and I dislike

00:35:16,190 --> 00:35:19,700
it for the same reason because if you

00:35:17,839 --> 00:35:21,480
are doing some tries you end up with a

00:35:19,700 --> 00:35:23,400
huge file and you don't know what

00:35:21,480 --> 00:35:27,690
to do with it in traffic server

00:35:23,400 --> 00:35:29,160
everything is in a small file so when

00:35:27,690 --> 00:35:31,680
you start to use it it's very very

00:35:29,160 --> 00:35:33,240
annoying because you never know where

00:35:31,680 --> 00:35:35,070
you have to put the stuff you need to

00:35:33,240 --> 00:35:38,490
read the documentation again to make

00:35:35,070 --> 00:35:41,250
sure like okay what does this go and

00:35:38,490 --> 00:35:43,170
then you start the server and you still

00:35:41,250 --> 00:35:45,390
can't connect to it it says forbidden

00:35:43,170 --> 00:35:47,100
and then you say oh yes of course I have

00:35:45,390 --> 00:35:50,250
to allow my own IP because by default

00:35:47,100 --> 00:35:52,680
it's doing nothing which is a way to

00:35:50,250 --> 00:35:58,290
make the singing safe like no one can

00:35:52,680 --> 00:36:00,840
enter your sure it's good so so my

00:35:58,290 --> 00:36:03,420
experience is like if you use it

00:36:00,840 --> 00:36:06,570
regularly it's very it's probably more

00:36:03,420 --> 00:36:09,900
easy to configure and and tweaked on the

00:36:06,570 --> 00:36:12,570
httpd but if you are the first user and

00:36:09,900 --> 00:36:14,760
you want to reverse proxy use HTTP D

00:36:12,570 --> 00:36:17,670
because you're going to be bitten by

00:36:14,760 --> 00:36:19,230
these things and it's it's it's not very

00:36:17,670 --> 00:36:21,540
nice and it's bit annoying and it's very

00:36:19,230 --> 00:36:23,880
easy to make especially on these things

00:36:21,540 --> 00:36:26,670
when you can control the entry address

00:36:23,880 --> 00:36:27,859
or the remote address you really quickly

00:36:26,670 --> 00:36:31,830
screw it

00:36:27,859 --> 00:36:34,650
but while the talk is very good so if

00:36:31,830 --> 00:36:36,560
you're motivated definitely and if you

00:36:34,650 --> 00:36:39,119
want a really something which is fast

00:36:36,560 --> 00:36:41,640
you can go for it because always

00:36:39,119 --> 00:36:45,380
remember with HTTP D you can do a lot

00:36:41,640 --> 00:36:48,119
more which is probably what you're doing

00:36:45,380 --> 00:36:52,470
but with traffic server as you can do

00:36:48,119 --> 00:36:54,240
only what a reverse proxy is doing you

00:36:52,470 --> 00:36:57,060
can optimize things a lot more easy and

00:36:54,240 --> 00:36:58,890
you don't have some kind like why do I

00:36:57,060 --> 00:37:01,760
need to use mode variety to do these

00:36:58,890 --> 00:37:06,420
things or things like that

00:37:01,760 --> 00:37:09,050
so I want I will skip the demo so let's

00:37:06,420 --> 00:37:11,580
look a bit what we configure in a HTTP D

00:37:09,050 --> 00:37:17,070
so in a GT PD it's quite easy we just

00:37:11,580 --> 00:37:19,770
have to load the module we yeah we

00:37:17,070 --> 00:37:22,820
create a virtual also use it we tell it

00:37:19,770 --> 00:37:28,050
that we want to use the two protocol and

00:37:22,820 --> 00:37:29,550
we ask it to order to owner the order of

00:37:28,050 --> 00:37:31,830
the protocol we are put there so

00:37:29,550 --> 00:37:34,980
basically the browser if is able to do H

00:37:31,830 --> 00:37:37,520
2 is going to do H 2 we need to

00:37:34,980 --> 00:37:42,840
as I said this is a very very sample

00:37:37,520 --> 00:37:44,250
OpenSSL a mod SSL configuration uses SSL

00:37:42,840 --> 00:37:48,780
engine on you

00:37:44,250 --> 00:37:53,250
Dawid the SSL certificate it's it's my

00:37:48,780 --> 00:37:55,859
own certificate I have my own pacaya I

00:37:53,250 --> 00:37:59,010
own my on my laptop because I'm doing

00:37:55,859 --> 00:38:01,800
some crypto stuff so usually I hope I

00:37:59,010 --> 00:38:05,760
can that's why you can try things you

00:38:01,800 --> 00:38:07,920
know in a in a very easy way of course

00:38:05,760 --> 00:38:13,260
if if you want to use your own you have

00:38:07,920 --> 00:38:14,640
to you have to import this a certificate

00:38:13,260 --> 00:38:21,000
in your browser so that you can

00:38:14,640 --> 00:38:23,460
recognize it and you can't import that

00:38:21,000 --> 00:38:25,350
format in the browser directly you have

00:38:23,460 --> 00:38:26,820
to convert it but open the cell is doing

00:38:25,350 --> 00:38:31,050
this for you and there's tons of

00:38:26,820 --> 00:38:34,530
documentation so yeah I was doing the

00:38:31,050 --> 00:38:37,650
same test with httpd because I also

00:38:34,530 --> 00:38:42,240
wanted to see what happened here you can

00:38:37,650 --> 00:38:45,960
see that basically it seems to be more

00:38:42,240 --> 00:38:50,609
performant and if you look to the CP you

00:38:45,960 --> 00:38:53,010
can ignore the bump on the top I've read

00:38:50,609 --> 00:38:55,440
this point and I have forgot to change

00:38:53,010 --> 00:38:58,440
the slide so the things are a bit more

00:38:55,440 --> 00:39:00,750
together so basically this is the CPU

00:38:58,440 --> 00:39:04,230
usage I was not trying to feel

00:39:00,750 --> 00:39:06,960
completely the CPU I guess at some point

00:39:04,230 --> 00:39:10,700
I'm limited with my network that's a big

00:39:06,960 --> 00:39:15,180
problem when you bench sinks is like now

00:39:10,700 --> 00:39:17,280
CPU power is quite an expensive so at

00:39:15,180 --> 00:39:19,680
the point you fill the line and then you

00:39:17,280 --> 00:39:21,150
have all kind of side effects and you're

00:39:19,680 --> 00:39:24,650
not measuring the performance of your

00:39:21,150 --> 00:39:35,250
server so but you can see here basically

00:39:24,650 --> 00:39:38,790
it's very similar so

00:39:35,250 --> 00:39:42,210
I'm basically using httpd while my

00:39:38,790 --> 00:39:44,369
customer using httpd as a proxy so this

00:39:42,210 --> 00:39:48,690
is an example of httpd proxy

00:39:44,369 --> 00:39:51,839
configuration we have to put mod proxy

00:39:48,690 --> 00:39:57,030
h2 and yeah you have the configuration

00:39:51,839 --> 00:40:00,500
and here we we tell basically httpd with

00:39:57,030 --> 00:40:05,040
proxy pass directive we tell it to do a

00:40:00,500 --> 00:40:08,190
h2 in clear-text to do this which in

00:40:05,040 --> 00:40:17,270
fact in my case is a tomcat running

00:40:08,190 --> 00:40:23,369
there I will skip the demo I might try a

00:40:17,270 --> 00:40:26,940
5-time so I want to get some questions

00:40:23,369 --> 00:40:29,270
that's why I put the demo till the last

00:40:26,940 --> 00:40:36,510
minute

00:40:29,270 --> 00:40:39,480
so are we h2 ready yes because even if

00:40:36,510 --> 00:40:41,520
you use it without push it's already

00:40:39,480 --> 00:40:44,010
quite impressive you have tons of

00:40:41,520 --> 00:40:49,290
example in the internet like images that

00:40:44,010 --> 00:40:52,410
are rendered faster a safer crypto than

00:40:49,290 --> 00:40:54,720
the an unsafe crypto everyone knows that

00:40:52,410 --> 00:40:58,980
it's more expensive but that surprise we

00:40:54,720 --> 00:41:05,369
have to pay additionally as it's

00:40:58,980 --> 00:41:07,560
multiplexing HTTP 1.1 instead eh - well

00:41:05,369 --> 00:41:10,710
you don't need to change anything in

00:41:07,560 --> 00:41:12,690
your application because basically your

00:41:10,710 --> 00:41:15,290
application is your normal web app

00:41:12,690 --> 00:41:19,109
there's no reason to change anything

00:41:15,290 --> 00:41:22,520
it's going to h2 the browser is going to

00:41:19,109 --> 00:41:24,810
ascend stuff it's going to be a

00:41:22,520 --> 00:41:27,329
multiplex going to be 10 multiplied X

00:41:24,810 --> 00:41:30,690
and at the end on in the tomcat you're

00:41:27,329 --> 00:41:35,040
going to have your normal web app

00:41:30,690 --> 00:41:45,319
without any change so if you want to use

00:41:35,040 --> 00:41:45,319
H to go for it is h3 ready well

00:41:45,600 --> 00:41:50,890
first it's still a draft I don't know

00:41:48,610 --> 00:41:53,890
you want to run a server using a draft

00:41:50,890 --> 00:41:57,010
protocol except you will we want to take

00:41:53,890 --> 00:42:00,220
the risk that the next change is going

00:41:57,010 --> 00:42:03,550
to break everything which in fact seems

00:42:00,220 --> 00:42:10,390
to be the case another big problem it's

00:42:03,550 --> 00:42:12,490
using UDP versus DCP we we all know it's

00:42:10,390 --> 00:42:16,270
just you know this kind of filling why

00:42:12,490 --> 00:42:19,240
do people in the cloud of blocked UDP

00:42:16,270 --> 00:42:21,640
you start to think like well because

00:42:19,240 --> 00:42:23,730
well they want to optimize the kernel as

00:42:21,640 --> 00:42:28,530
much as they can and they discover that

00:42:23,730 --> 00:42:32,170
probably the UDP stuff need some work I

00:42:28,530 --> 00:42:35,440
didn't check the code but I know that it

00:42:32,170 --> 00:42:36,280
needs some if you want to touch the

00:42:35,440 --> 00:42:41,470
kernel

00:42:36,280 --> 00:42:47,260
it's a good opportunity that stuff to do

00:42:41,470 --> 00:42:49,210
that actually the other thing is like if

00:42:47,260 --> 00:42:54,670
you really want to get all the benefits

00:42:49,210 --> 00:43:00,550
of h3 you need of you need a fork of

00:42:54,670 --> 00:43:02,410
open SSL to be able to do the 0er tt0

00:43:00,550 --> 00:43:05,560
editor means that basically you're not

00:43:02,410 --> 00:43:08,200
protected on a replay in the case you

00:43:05,560 --> 00:43:10,120
using the h2 proto the h3 protocol

00:43:08,200 --> 00:43:12,610
you're protected against replay because

00:43:10,120 --> 00:43:16,510
basically no protocol we will take care

00:43:12,610 --> 00:43:19,600
that it does not happen twice but if you

00:43:16,510 --> 00:43:27,130
want if you imagine that you would using

00:43:19,600 --> 00:43:33,730
just the is we would just be using UDP

00:43:27,130 --> 00:43:37,990
plus the TLS a 1.3 connecting to

00:43:33,730 --> 00:43:41,020
application together definitely you can

00:43:37,990 --> 00:43:43,840
with the 0 a TT you can replica can

00:43:41,020 --> 00:43:45,700
replay a packet you can get someone in

00:43:43,840 --> 00:43:48,640
the network which will replay the packet

00:43:45,700 --> 00:43:50,170
so definitely in the in this case we

00:43:48,640 --> 00:43:55,150
have to have to make sure that we don't

00:43:50,170 --> 00:43:58,330
we can't replace something yeah and

00:43:55,150 --> 00:44:01,080
that's one thing what is

00:43:58,330 --> 00:44:04,810
going to be interesting it's like well

00:44:01,080 --> 00:44:07,030
you will also have no need to rewrite to

00:44:04,810 --> 00:44:08,410
a server application there because

00:44:07,030 --> 00:44:11,970
basically the things are going to be

00:44:08,410 --> 00:44:15,490
multiplexed and sent to you so basically

00:44:11,970 --> 00:44:17,050
what the the end customer is going to

00:44:15,490 --> 00:44:21,690
get is a page which is going to be

00:44:17,050 --> 00:44:26,250
displayed a lot faster so that's again

00:44:21,690 --> 00:44:30,210
but I would say like for the moment wait

00:44:26,250 --> 00:44:33,610
if you want to experiment feel free but

00:44:30,210 --> 00:44:36,310
there's a kind of orange blinking stuffs

00:44:33,610 --> 00:44:38,740
telling like for the moment wait and

00:44:36,310 --> 00:44:41,170
then I've been doing I've been

00:44:38,740 --> 00:44:44,170
presenting a t-33 time and I've been

00:44:41,170 --> 00:44:46,450
always telling wait and the number of

00:44:44,170 --> 00:44:49,000
the draft protocol has changed every two

00:44:46,450 --> 00:44:54,970
months or something like that and trust

00:44:49,000 --> 00:44:57,790
me it does not work they those those all

00:44:54,970 --> 00:44:59,800
those server implement only one because

00:44:57,790 --> 00:45:02,350
I think I've not looked to the detail of

00:44:59,800 --> 00:45:04,660
the change but it looks like it I really

00:45:02,350 --> 00:45:08,340
don't care of making or putting all the

00:45:04,660 --> 00:45:12,580
ifs in their code other it's not so easy

00:45:08,340 --> 00:45:17,320
to support more than one version of the

00:45:12,580 --> 00:45:19,300
protocol so this is the space for

00:45:17,320 --> 00:45:23,680
question and I will try to make a demo

00:45:19,300 --> 00:45:27,100
if if I have extra time I have five

00:45:23,680 --> 00:45:28,690
minutes and one of myself was not

00:45:27,100 --> 00:45:33,700
starting before so it might be that I'm

00:45:28,690 --> 00:45:36,460
not able to do a demo so if you want to

00:45:33,700 --> 00:45:41,740
know a little more if you have any

00:45:36,460 --> 00:45:47,550
question you can mail me this is this is

00:45:41,740 --> 00:45:47,550
the this is the URL of the HTTP to stuff

00:45:47,940 --> 00:45:56,410
if you want to look about h3 the chrome

00:45:54,790 --> 00:46:01,930
developer Daniel I have been doing a lot

00:45:56,410 --> 00:46:06,950
of things so you just look for a book on

00:46:01,930 --> 00:46:09,769
it so you can look for HTTP a3 explain

00:46:06,950 --> 00:46:13,430
I incur and then you have a wonderful

00:46:09,769 --> 00:46:15,799
book with all the explanation curl over

00:46:13,430 --> 00:46:20,450
a lot of wiki that explain how you can

00:46:15,799 --> 00:46:23,049
build those things so if you want to

00:46:20,450 --> 00:46:27,230
experiment there's a lot of things and

00:46:23,049 --> 00:46:28,789
now we have space for questions and if

00:46:27,230 --> 00:46:30,519
there's no question I will try to make a

00:46:28,789 --> 00:46:39,289
demo and then you have to stop me

00:46:30,519 --> 00:46:42,430
because I'm the next speaker and I then

00:46:39,289 --> 00:46:46,339
I use a reverse proxy Canada news HDTV -

00:46:42,430 --> 00:46:49,160
without encryption so yes yes yes

00:46:46,339 --> 00:46:53,289
wonderful browser - yes the browser

00:46:49,160 --> 00:46:55,880
won't accept to do H - in clear-text but

00:46:53,289 --> 00:46:58,789
it's quite interesting it's always

00:46:55,880 --> 00:47:03,760
interesting to do a the TLS termination

00:46:58,789 --> 00:47:10,099
in C in httpd or in traffic server

00:47:03,760 --> 00:47:13,609
because if you use Java doing number

00:47:10,099 --> 00:47:16,190
crunching is it's I've been improving

00:47:13,609 --> 00:47:18,740
but it's still it's still a bit slow in

00:47:16,190 --> 00:47:21,589
the past it was extremely slow like I

00:47:18,740 --> 00:47:25,190
did test something like five years ago

00:47:21,589 --> 00:47:27,230
and I was desperately looking after

00:47:25,190 --> 00:47:31,009
doing the most automatic measurement I

00:47:27,230 --> 00:47:33,829
was desperately looking for the oh I

00:47:31,009 --> 00:47:36,230
must have done something wrong Java must

00:47:33,829 --> 00:47:39,259
be somewhere in the in the curve and it

00:47:36,230 --> 00:47:41,089
was on the zero line like doing nothing

00:47:39,259 --> 00:47:44,029
and I was saying oh she done must be a

00:47:41,089 --> 00:47:45,589
bug then look how you scale up and and

00:47:44,029 --> 00:47:48,440
you say oh you know it's link something

00:47:45,589 --> 00:47:50,839
but it was worse now it's it's it's

00:47:48,440 --> 00:47:54,890
still slower and it's definitively

00:47:50,839 --> 00:47:58,849
Weider's also all sort of kind of

00:47:54,890 --> 00:48:08,299
improving things by compiling it like -

00:47:58,849 --> 00:48:09,829
growl Remy was showing before we can

00:48:08,299 --> 00:48:13,119
have one last question if anyone has

00:48:09,829 --> 00:48:13,119
yeah you have one question

00:48:14,809 --> 00:48:20,719
I got a couple oh I got a couple of

00:48:17,509 --> 00:48:23,390
question one is regarding one moment in

00:48:20,719 --> 00:48:25,909
which you told us that it's it's not

00:48:23,390 --> 00:48:28,759
possible to do for worse I mean are you

00:48:25,909 --> 00:48:31,699
talking about the HTTP ready date that

00:48:28,759 --> 00:48:33,949
goes to the client and after that it

00:48:31,699 --> 00:48:36,409
goes to another place the forward proxy

00:48:33,949 --> 00:48:38,689
is basically you are in a big company I

00:48:36,409 --> 00:48:41,179
don't give you direct access to Internet

00:48:38,689 --> 00:48:43,699
I think making a forward proxy for you

00:48:41,179 --> 00:48:47,689
also forward proxy is not possible in

00:48:43,699 --> 00:48:49,459
the case of h2 okay no s3 okay and the

00:48:47,689 --> 00:48:52,369
second question is regarding the the

00:48:49,459 --> 00:48:55,279
necks of the pieces in the ecosystem I

00:48:52,369 --> 00:48:57,349
mean what about the the load balancing

00:48:55,279 --> 00:49:00,409
because nearly all of us have web

00:48:57,349 --> 00:49:03,709
servers and with rather proxy to

00:49:00,409 --> 00:49:07,640
application servers did you do some

00:49:03,709 --> 00:49:09,739
debts or just to to see around if the

00:49:07,640 --> 00:49:12,259
load balancing companies are

00:49:09,739 --> 00:49:14,749
implementing the the proxy at the

00:49:12,259 --> 00:49:17,239
protocol sorry I have not looked if the

00:49:14,749 --> 00:49:19,369
load balancing company were taking care

00:49:17,239 --> 00:49:21,349
of these things what I can tell you is

00:49:19,369 --> 00:49:25,579
like basically at some point we have the

00:49:21,349 --> 00:49:27,739
things in a ICP 1.11 it's limited next

00:49:25,579 --> 00:49:32,150
and then you can plug your your load

00:49:27,739 --> 00:49:35,029
balancer there I mean you can use mode

00:49:32,150 --> 00:49:38,869
load balancer with h2 without problem I

00:49:35,029 --> 00:49:41,449
don't have an example but I was the

00:49:38,869 --> 00:49:46,029
question was regarding HTTP - yeah yeah

00:49:41,449 --> 00:49:49,539
you can do load balancing okay thank you

00:49:46,029 --> 00:49:52,789
but not without a device to my knowledge

00:49:49,539 --> 00:49:54,259
so we'll be wrapping up here yes thank

00:49:52,789 --> 00:49:55,999
you very much if you have any other

00:49:54,259 --> 00:49:57,820
questions you can feel free to take them

00:49:55,999 --> 00:50:05,589
offline thank you

00:49:57,820 --> 00:50:05,589

YouTube URL: https://www.youtube.com/watch?v=D_ITxTR9KS8


