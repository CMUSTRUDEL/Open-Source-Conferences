Title: #ACEU19: Marton Elek – Patterns and Anti-Patterns of running Apache bigdata projects in Kubernetes
Publication date: 2019-10-31
Playlist: ApacheCon Europe 2019 – Berlin
Description: 
	More: https://aceu19.apachecon.com/session/patterns-and-anti-patterns-running-apache-bigdata-projects-kubernetes

Nowadays almost all of the Apache bigdata projects can be started in Kubernetes in some way. But the biggest question is still open: what is the most effective way to manage a set of coherent projects together? What is the best way to start and operate Hadoop, Ozone, HBase, Kafka, Spark, etc. together in Kubernetes?

Traditional cluster management tools -- like Ambari -- are based on an host-based, agent centric approach which doesn’t apply very well to the cloud-native environments.

In this presentation we will analyze the key challenges of running multiple Apache project together in Kubernetes (eg. configuration dependency, topology profiles, composability). And we will show how Kubernetes tools like Helm or Kustomize can answer those questions.

A real-life demo will presented about how to leverage tools of the kubernetes ecosystem to provide user experiences similar to the existing cluster management tools and how to provide an unified user experience to manage different projects of the Apache bigdata ecosystem.
Captions: 
	00:00:04,700 --> 00:00:09,469
hi thank you for joining yeah I have a

00:00:07,430 --> 00:00:11,870
shorter version of this title just a

00:00:09,469 --> 00:00:14,180
petty little of cognitive this is what I

00:00:11,870 --> 00:00:16,940
would like to talk about and let's let's

00:00:14,180 --> 00:00:19,820
start with the Apache part first so

00:00:16,940 --> 00:00:21,919
these numbers from the Apache Jireh from

00:00:19,820 --> 00:00:25,759
this year all of the result the number

00:00:21,919 --> 00:00:27,800
of the resolved issues per project the

00:00:25,759 --> 00:00:30,140
real result issues so not the duplicate

00:00:27,800 --> 00:00:32,810
so what we can see here first of all had

00:00:30,140 --> 00:00:34,730
Hadoop is not that this is weak I'm

00:00:32,810 --> 00:00:38,210
pretty sure the other thing what we can

00:00:34,730 --> 00:00:42,530
see here is that the majority of the

00:00:38,210 --> 00:00:45,590
most the most popular projects are

00:00:42,530 --> 00:00:49,190
related to Big Data and this is not just

00:00:45,590 --> 00:00:50,989
because some big companies are working

00:00:49,190 --> 00:00:53,510
on that because you see this this is

00:00:50,989 --> 00:00:55,969
just about Hadoop and the number of the

00:00:53,510 --> 00:00:59,000
unique contributors so the Hadoop is

00:00:55,969 --> 00:01:01,670
developed not only a few people who paid

00:00:59,000 --> 00:01:04,190
for it but a lot of individual

00:01:01,670 --> 00:01:07,850
contributors so it seems to be very

00:01:04,190 --> 00:01:10,820
popular the Apache big data space and

00:01:07,850 --> 00:01:13,070
the other side the cognitive space or

00:01:10,820 --> 00:01:14,750
kubernetes space is also very popular so

00:01:13,070 --> 00:01:17,270
this is from the CN CF kubernetes

00:01:14,750 --> 00:01:19,400
project journey report and what you can

00:01:17,270 --> 00:01:21,829
see that there are a huge number of pull

00:01:19,400 --> 00:01:24,799
requests in the in the kubernetes space

00:01:21,829 --> 00:01:27,740
and unlimited number so it's even more

00:01:24,799 --> 00:01:29,990
popular so my question is if the left

00:01:27,740 --> 00:01:33,680
side is very popular if the right side

00:01:29,990 --> 00:01:36,409
is very popular popular what is between

00:01:33,680 --> 00:01:38,180
them in the intersection there should be

00:01:36,409 --> 00:01:41,240
a lot of very popular project or right

00:01:38,180 --> 00:01:43,189
which can be just used of the shelf so

00:01:41,240 --> 00:01:45,200
where are the projects that's what I

00:01:43,189 --> 00:01:47,990
would like to try to find in this

00:01:45,200 --> 00:01:50,659
presentation that why there is no more

00:01:47,990 --> 00:01:53,360
projector if most of the sites are very

00:01:50,659 --> 00:01:56,899
popular okay let's talk about first

00:01:53,360 --> 00:01:59,710
about the Apache big data space so I had

00:01:56,899 --> 00:02:04,369
a presentation one year ago that how the

00:01:59,710 --> 00:02:10,430
Hadoop can be started in kubernetes or

00:02:04,369 --> 00:02:12,530
Hadoop Ozone and I think nowadays all of

00:02:10,430 --> 00:02:15,200
the projects can be started with some

00:02:12,530 --> 00:02:17,690
kind of tricks in in kubernetes with

00:02:15,200 --> 00:02:18,470
operate or with ham chart because most

00:02:17,690 --> 00:02:20,600
of the problems

00:02:18,470 --> 00:02:23,300
are very small problems regarding DNS

00:02:20,600 --> 00:02:26,660
handling or retrying and they are mostly

00:02:23,300 --> 00:02:28,730
sold in the project so everything is

00:02:26,660 --> 00:02:31,280
fine but what I'm interested about is

00:02:28,730 --> 00:02:35,020
not just start a spark or start a Kafka

00:02:31,280 --> 00:02:39,590
but what I would like to get is

00:02:35,020 --> 00:02:42,500
deploying a full stack which can work

00:02:39,590 --> 00:02:45,230
together and use each other let's say I

00:02:42,500 --> 00:02:47,150
have some incoming data in Kafka and I'm

00:02:45,230 --> 00:02:51,020
processing with spark and saving to

00:02:47,150 --> 00:02:53,840
Apache ozone or or Apache Hadoop ozone

00:02:51,020 --> 00:02:56,420
or head of HDFS so I would like to

00:02:53,840 --> 00:03:00,980
deploy and handle this as a as a stack

00:02:56,420 --> 00:03:04,310
and this seems to be missing so that was

00:03:00,980 --> 00:03:08,060
the head apart so let's check the other

00:03:04,310 --> 00:03:10,430
side of the problem so what is this what

00:03:08,060 --> 00:03:13,400
is cloud native actually do you do you

00:03:10,430 --> 00:03:15,980
have a good definition actually the

00:03:13,400 --> 00:03:19,450
problem is that it's very very hard to

00:03:15,980 --> 00:03:22,310
define what is cloud native exactly so

00:03:19,450 --> 00:03:24,739
maybe because it's some kind of

00:03:22,310 --> 00:03:27,380
marketing term not just purely technical

00:03:24,739 --> 00:03:30,650
term but yeah the easiest way is just

00:03:27,380 --> 00:03:33,440
replace the cloud native expression with

00:03:30,650 --> 00:03:34,910
asset or search and replace with

00:03:33,440 --> 00:03:37,100
kubernetes right that's the easiest

00:03:34,910 --> 00:03:40,550
definition even if it's not the most

00:03:37,100 --> 00:03:44,150
accurate if we are looking for a more

00:03:40,550 --> 00:03:47,030
accurate definition this one is from the

00:03:44,150 --> 00:03:49,100
CN CF Charter so cognitive technologies

00:03:47,030 --> 00:03:51,019
empower organization to build and run

00:03:49,100 --> 00:03:53,000
scalable applications in modern dynamic

00:03:51,019 --> 00:03:57,470
environments such as public private and

00:03:53,000 --> 00:04:01,880
hybrid hybrid clouds clear right can you

00:03:57,470 --> 00:04:04,100
repeat it for example so I read it

00:04:01,880 --> 00:04:06,080
multiple times but to be honest there

00:04:04,100 --> 00:04:09,350
there are some other definitions under

00:04:06,080 --> 00:04:11,660
the CN CF it hub repositories which says

00:04:09,350 --> 00:04:14,840
that ok cloud native is something like

00:04:11,660 --> 00:04:17,330
miracle service and containers and all

00:04:14,840 --> 00:04:20,359
together and scaling up and down and

00:04:17,330 --> 00:04:21,979
something like this so yeah it's not

00:04:20,359 --> 00:04:24,110
very easy to define what the cloud

00:04:21,979 --> 00:04:26,930
native but it's also an advantage for me

00:04:24,110 --> 00:04:30,020
because in that case I may have my own

00:04:26,930 --> 00:04:32,030
original definition right if everybody

00:04:30,020 --> 00:04:32,330
can say what is called it a bi I can

00:04:32,030 --> 00:04:35,479
also

00:04:32,330 --> 00:04:37,789
say what is cloud native the only

00:04:35,479 --> 00:04:41,060
problem is that if I define cloud native

00:04:37,789 --> 00:04:43,490
for me this depends from my view right

00:04:41,060 --> 00:04:46,099
it depends from what I'm doing so first

00:04:43,490 --> 00:04:48,169
of all I should clarify what I'm doing

00:04:46,099 --> 00:04:50,000
it's a disclaimer that's everything what

00:04:48,169 --> 00:04:52,699
I'm talking about is it's from one

00:04:50,000 --> 00:04:52,969
specific view so my name is Martin

00:04:52,699 --> 00:04:54,889
Ehrlich

00:04:52,969 --> 00:04:57,949
and I'm working on an Apache Hadoop

00:04:54,889 --> 00:05:01,400
mainly on a new sub project which is

00:04:57,949 --> 00:05:05,900
called Apache Hadoop ozone and it's very

00:05:01,400 --> 00:05:09,979
nice logo and this is an object store so

00:05:05,900 --> 00:05:12,139
it's something like the s3 and fhe hdf I

00:05:09,979 --> 00:05:14,770
had to page the FS together so this is a

00:05:12,139 --> 00:05:17,960
storage and you can use it as a s3

00:05:14,770 --> 00:05:20,419
back-end or you can use it from good old

00:05:17,960 --> 00:05:23,960
Hadoop file system from spark hive and

00:05:20,419 --> 00:05:25,669
the other selling point it it scale very

00:05:23,960 --> 00:05:29,360
more better than the HDFS so it can

00:05:25,669 --> 00:05:31,129
handle a lot of small files not ten

00:05:29,360 --> 00:05:34,729
billions of files

00:05:31,129 --> 00:05:38,690
I'm working for cloud era and when I

00:05:34,729 --> 00:05:41,300
have some time I'm also trying to run

00:05:38,690 --> 00:05:43,490
these Big Data Apache Big Data projects

00:05:41,300 --> 00:05:46,099
in different contours environment I

00:05:43,490 --> 00:05:49,699
started with nomads and Oakhurst farm

00:05:46,099 --> 00:05:51,979
nowadays I use kubernetes for everything

00:05:49,699 --> 00:05:55,580
and this is what I would like to share

00:05:51,979 --> 00:05:59,509
here I have also some tool which is

00:05:55,580 --> 00:06:01,370
required to do it so so what is

00:05:59,509 --> 00:06:05,029
coordinating for me yeah that's no

00:06:01,370 --> 00:06:07,250
that's you you understand my viewpoint

00:06:05,029 --> 00:06:10,610
so I can say that okay what is cloud

00:06:07,250 --> 00:06:13,909
native this is Apache Hadoop it's 2.7

00:06:10,610 --> 00:06:15,860
but you know this is a generic Apache

00:06:13,909 --> 00:06:19,490
download page so the 3.2 which is very

00:06:15,860 --> 00:06:21,139
similar and in Apache the real is it's

00:06:19,490 --> 00:06:24,319
the real release is just the source

00:06:21,139 --> 00:06:27,529
package right that's the Rayleigh's it's

00:06:24,319 --> 00:06:29,629
possible to give convenience binaries

00:06:27,529 --> 00:06:32,240
for the user so this is a binary which

00:06:29,629 --> 00:06:33,800
can be downloaded and can be used ok

00:06:32,240 --> 00:06:38,690
next question how can I start it in

00:06:33,800 --> 00:06:41,020
kubernetes any guess yeah that pardon

00:06:38,690 --> 00:06:44,089
just put it to echo internal write for

00:06:41,020 --> 00:06:46,070
but I can read all of the documentation

00:06:44,089 --> 00:06:48,550
and all of the settings are documented

00:06:46,070 --> 00:06:51,110
very well but this is usually the user

00:06:48,550 --> 00:06:53,420
responsibility to start it in some

00:06:51,110 --> 00:06:54,910
tricky way in kubernetes or docker

00:06:53,420 --> 00:06:58,400
compose or samba right

00:06:54,910 --> 00:07:00,680
the hadoop itself is developed by the

00:06:58,400 --> 00:07:02,240
developers it's finished you can do it

00:07:00,680 --> 00:07:05,300
your own what you would like to do on

00:07:02,240 --> 00:07:06,920
the other hand from the other side point

00:07:05,300 --> 00:07:09,470
of view what we are doing I think this

00:07:06,920 --> 00:07:11,390
is my responsibility to help all of the

00:07:09,470 --> 00:07:13,580
users to run in different environments

00:07:11,390 --> 00:07:16,850
also on so also images you can download

00:07:13,580 --> 00:07:18,500
it there are multiple way to run it just

00:07:16,850 --> 00:07:20,450
with a docker compose up there are

00:07:18,500 --> 00:07:22,340
example clusters with all of the

00:07:20,450 --> 00:07:25,250
configuration locally it's very easy to

00:07:22,340 --> 00:07:28,310
start there are kubernetes examples so

00:07:25,250 --> 00:07:30,350
this is the documentation and it's not

00:07:28,310 --> 00:07:32,090
about ozone it's I think it's about the

00:07:30,350 --> 00:07:34,640
so for me this is this is the cloud

00:07:32,090 --> 00:07:37,460
native approach when we need to support

00:07:34,640 --> 00:07:39,500
multiple cloud based environments not

00:07:37,460 --> 00:07:41,990
just to start it in kubernetes or

00:07:39,500 --> 00:07:44,870
different kind of cloud but to work

00:07:41,990 --> 00:07:47,990
together with other projects with pro

00:07:44,870 --> 00:07:50,000
metals with open tracing with any other

00:07:47,990 --> 00:07:51,740
projects which is actually very similar

00:07:50,000 --> 00:07:54,350
what we have in the Hadoop right and the

00:07:51,740 --> 00:07:56,570
head hoop is an ecosystem so the HBase

00:07:54,350 --> 00:07:58,460
and Hadoop can work together spark and

00:07:56,570 --> 00:08:00,980
head can work together so this is

00:07:58,460 --> 00:08:03,710
something it's very similar what we have

00:08:00,980 --> 00:08:07,640
now but why do we need to work together

00:08:03,710 --> 00:08:09,500
that's the next question and not just

00:08:07,640 --> 00:08:13,280
because it's it's it's fun before it's

00:08:09,500 --> 00:08:18,350
easier but this is the AWS console right

00:08:13,280 --> 00:08:20,690
if you need to start a new machine then

00:08:18,350 --> 00:08:23,180
with a few click you can do it and you

00:08:20,690 --> 00:08:25,100
can understand what's going on and I

00:08:23,180 --> 00:08:26,000
would like to provide the same user

00:08:25,100 --> 00:08:29,180
experience

00:08:26,000 --> 00:08:33,740
not with UI because mainly I I like the

00:08:29,180 --> 00:08:37,910
console and I do everything here but the

00:08:33,740 --> 00:08:39,919
same simplicity so I think the cloud

00:08:37,910 --> 00:08:43,160
natives about the user experience and

00:08:39,919 --> 00:08:45,350
the user experience mainly achieved can

00:08:43,160 --> 00:08:46,880
be achieved with the collaboration so

00:08:45,350 --> 00:08:50,300
that's the main reason why I would like

00:08:46,880 --> 00:08:52,190
to support to run the project the Apache

00:08:50,300 --> 00:08:55,520
project everywhere and I would like to

00:08:52,190 --> 00:08:58,670
support the collaboration with other

00:08:55,520 --> 00:08:59,750
existing point ok so that was the cloud

00:08:58,670 --> 00:09:01,880
native

00:08:59,750 --> 00:09:04,460
and we know what is the what is the

00:09:01,880 --> 00:09:06,410
Apache Big Data Hadoop and also it's not

00:09:04,460 --> 00:09:08,360
just about header but all of the cough

00:09:06,410 --> 00:09:11,960
costs Park and all of the similar Apache

00:09:08,360 --> 00:09:14,000
Big Data project so first of all we we

00:09:11,960 --> 00:09:16,580
need something here in the intersection

00:09:14,000 --> 00:09:20,300
right so we should define the

00:09:16,580 --> 00:09:23,960
requirements that what kind of project

00:09:20,300 --> 00:09:27,890
projects can be there it may help us to

00:09:23,960 --> 00:09:30,110
to find the ideal solution okay I have

00:09:27,890 --> 00:09:31,850
five requirements this is the first one

00:09:30,110 --> 00:09:34,670
and I think we already discussed it

00:09:31,850 --> 00:09:37,760
right I wouldn't like to deploy deploy

00:09:34,670 --> 00:09:40,460
projects I would like to deploy some

00:09:37,760 --> 00:09:43,340
kind of stack where the project's can

00:09:40,460 --> 00:09:45,530
work with each other so it's some kind

00:09:43,340 --> 00:09:46,850
of collaborations between the project so

00:09:45,530 --> 00:09:49,940
it's not just about how can i deploy

00:09:46,850 --> 00:09:51,740
Kafka and who can i deploy a storage but

00:09:49,940 --> 00:09:55,250
how can i how can they work together

00:09:51,740 --> 00:09:57,980
with the same configuration okay the

00:09:55,250 --> 00:10:00,260
next is the fully customizable right

00:09:57,980 --> 00:10:02,240
because mainly because I'm a developer I

00:10:00,260 --> 00:10:03,830
would like to have the power to set all

00:10:02,240 --> 00:10:06,860
of the settings which are implemented in

00:10:03,830 --> 00:10:09,200
the in the Apache but this is not just

00:10:06,860 --> 00:10:12,200
because I'm a deep developer so I don't

00:10:09,200 --> 00:10:15,050
think that we can cover all of the

00:10:12,200 --> 00:10:18,830
specific use cases with a simplified set

00:10:15,050 --> 00:10:22,160
so yeah some of the projects for example

00:10:18,830 --> 00:10:24,440
Hadoop has unlimited number of the

00:10:22,160 --> 00:10:26,390
configuration and it's very very hard to

00:10:24,440 --> 00:10:28,760
understand what kind of configuration

00:10:26,390 --> 00:10:30,500
should be set and I think it's bad but

00:10:28,760 --> 00:10:32,660
the configuration shouldn't be hidden

00:10:30,500 --> 00:10:35,000
they should be organized somehow or

00:10:32,660 --> 00:10:37,430
structured to make it easy to to

00:10:35,000 --> 00:10:39,460
understand but we need the power to use

00:10:37,430 --> 00:10:42,380
all of them so that's the the second

00:10:39,460 --> 00:10:44,720
third this is some kind of packaging

00:10:42,380 --> 00:10:46,820
like the RPM so I would like to I

00:10:44,720 --> 00:10:49,040
mentioned that sometimes I need the

00:10:46,820 --> 00:10:51,860
spark and ozone and Kafka together

00:10:49,040 --> 00:10:53,990
sometimes I just an HDFS sometimes so

00:10:51,860 --> 00:10:56,870
it's not just about components or

00:10:53,990 --> 00:11:00,170
projects but also about generic features

00:10:56,870 --> 00:11:02,390
like kerberized cluster so if I need a

00:11:00,170 --> 00:11:05,480
secure cluster I would like to Kerber

00:11:02,390 --> 00:11:08,900
eyes and turn on the security all of the

00:11:05,480 --> 00:11:13,640
projects so this is some kind of

00:11:08,900 --> 00:11:14,990
packaging and generic features and okay

00:11:13,640 --> 00:11:19,220
this is the composite of feature-set

00:11:14,990 --> 00:11:22,130
this is the most tricky one so when I

00:11:19,220 --> 00:11:25,180
would like to turn on the security it

00:11:22,130 --> 00:11:29,480
shirt should be turned on everywhere and

00:11:25,180 --> 00:11:31,460
that will be the hardest part because it

00:11:29,480 --> 00:11:34,520
means that it's not enough to install

00:11:31,460 --> 00:11:37,730
one kafka and one spark and one storage

00:11:34,520 --> 00:11:40,280
but somehow when I change the storage

00:11:37,730 --> 00:11:42,500
configuration all of the other projects

00:11:40,280 --> 00:11:45,890
all of the other configuration should be

00:11:42,500 --> 00:11:49,910
changed we will see more examples later

00:11:45,890 --> 00:11:54,020
and finally uh yeah this is the Hadoop

00:11:49,910 --> 00:11:56,210
configuration it's XML because it's a

00:11:54,020 --> 00:11:58,160
good old project and we have this code

00:11:56,210 --> 00:12:01,670
that's the core side that's the trick so

00:11:58,160 --> 00:12:05,060
this should be copied to everywhere to

00:12:01,670 --> 00:12:07,100
all of the components we have an HDFS

00:12:05,060 --> 00:12:10,070
site eczema for the storage we have a

00:12:07,100 --> 00:12:12,860
yard sign access for the execution but

00:12:10,070 --> 00:12:14,720
if we check the containers for example

00:12:12,860 --> 00:12:17,210
so this is one container for the storage

00:12:14,720 --> 00:12:19,700
we have the core configuration and the

00:12:17,210 --> 00:12:21,380
storage configuration for the execution

00:12:19,700 --> 00:12:23,750
we need the core configuration the

00:12:21,380 --> 00:12:25,700
storage configuration to use data from

00:12:23,750 --> 00:12:27,980
the storage and the execution

00:12:25,700 --> 00:12:29,870
configuration what about if I would like

00:12:27,980 --> 00:12:32,540
to change the storage to an other

00:12:29,870 --> 00:12:35,270
storage well it's not just the storage

00:12:32,540 --> 00:12:36,830
which should be updated but all of the

00:12:35,270 --> 00:12:39,380
execution containers should be updated

00:12:36,830 --> 00:12:41,270
so that's the trick so that's some kind

00:12:39,380 --> 00:12:43,370
of collaboration between them right so

00:12:41,270 --> 00:12:47,090
they are not just individual containers

00:12:43,370 --> 00:12:48,910
but they should work together okay so

00:12:47,090 --> 00:12:52,660
that's the collaboration part and

00:12:48,910 --> 00:12:55,610
finally I would like to support

00:12:52,660 --> 00:12:57,260
versioning and migration you know that

00:12:55,610 --> 00:12:59,560
if the configuration is bad I would like

00:12:57,260 --> 00:13:02,450
to roll back to the previous one if

00:12:59,560 --> 00:13:05,570
there is a risky configuration I would

00:13:02,450 --> 00:13:07,340
like to test it in a test environment or

00:13:05,570 --> 00:13:09,920
staging environment and I would like to

00:13:07,340 --> 00:13:12,290
deploy it the production after that one

00:13:09,920 --> 00:13:14,510
option is to do it just to commit all of

00:13:12,290 --> 00:13:17,540
the configuration to a git repository

00:13:14,510 --> 00:13:19,340
this is get ops if there is a tool to

00:13:17,540 --> 00:13:22,640
convert all of the configuration to a

00:13:19,340 --> 00:13:24,350
real environment and it's possible ok so

00:13:22,640 --> 00:13:27,350
this is my dream this is what I'm

00:13:24,350 --> 00:13:29,990
looking for something which

00:13:27,350 --> 00:13:33,800
can help to achieve all of these in

00:13:29,990 --> 00:13:36,220
cloud native environments the first of

00:13:33,800 --> 00:13:38,600
all I'm not sure if they are real

00:13:36,220 --> 00:13:41,720
requirements so we should check some

00:13:38,600 --> 00:13:43,640
existing tools that if they provide

00:13:41,720 --> 00:13:47,870
something similar to this one because if

00:13:43,640 --> 00:13:50,120
the existing cluster managers have

00:13:47,870 --> 00:13:52,160
something similar then it's more or less

00:13:50,120 --> 00:13:55,040
realistic dream to have something

00:13:52,160 --> 00:13:57,800
similar in the kubernetes as of novice

00:13:55,040 --> 00:14:01,280
I'm familiar only the Apache armory

00:13:57,800 --> 00:14:03,440
which is I think the developed is mostly

00:14:01,280 --> 00:14:05,540
stopped when the Hortonworks merged with

00:14:03,440 --> 00:14:07,940
cloud era and there is this cloud or

00:14:05,540 --> 00:14:10,880
manager which is not open source and not

00:14:07,940 --> 00:14:13,310
Apache project at all but we can check

00:14:10,880 --> 00:14:17,270
at least the requirements that ok this

00:14:13,310 --> 00:14:19,550
is a proprietary solution but this it

00:14:17,270 --> 00:14:21,800
provides some kind of functionality what

00:14:19,550 --> 00:14:23,300
we are looking in kubernetes so first of

00:14:21,800 --> 00:14:27,500
all manage the wall platform right

00:14:23,300 --> 00:14:29,570
all of these management products doing

00:14:27,500 --> 00:14:31,460
the same we have a lot of five age-based

00:14:29,570 --> 00:14:33,230
so this is what I'm looking for in

00:14:31,460 --> 00:14:36,710
kubernetes so I would like to manage all

00:14:33,230 --> 00:14:39,290
of them together fully customizable ok

00:14:36,710 --> 00:14:41,750
that's again just an example here you

00:14:39,290 --> 00:14:44,000
can see that it's structured so this is

00:14:41,750 --> 00:14:46,010
a simplified view and you it's easier to

00:14:44,000 --> 00:14:49,010
find the right configuration but you

00:14:46,010 --> 00:14:52,880
always have the option to set any kind

00:14:49,010 --> 00:14:55,070
of Hadoop or real Apache configuration

00:14:52,880 --> 00:14:57,620
here this is the safe at all so this is

00:14:55,070 --> 00:14:59,380
what I would like to have just the poor

00:14:57,620 --> 00:15:03,920
to configure everything

00:14:59,380 --> 00:15:06,980
the others are our more tricky shareable

00:15:03,920 --> 00:15:09,380
is reusable part usually are usually

00:15:06,980 --> 00:15:13,370
it's implemented by the different kind

00:15:09,380 --> 00:15:16,790
of big data management software because

00:15:13,370 --> 00:15:19,220
they use rpm but it's very hard to

00:15:16,790 --> 00:15:21,380
create your own rpm if you are not

00:15:19,220 --> 00:15:24,290
familiar so it's not very well designed

00:15:21,380 --> 00:15:26,120
to get external contributions the

00:15:24,290 --> 00:15:28,400
compossible collaborative feature said

00:15:26,120 --> 00:15:31,040
it's yeah it's again it's very hard to

00:15:28,400 --> 00:15:34,250
create something when you install a new

00:15:31,040 --> 00:15:36,440
let's say ozone and it it couldn't

00:15:34,250 --> 00:15:38,930
modify the graph on uninstall or

00:15:36,440 --> 00:15:40,970
something or if it should its hard-coded

00:15:38,930 --> 00:15:43,550
somewhere under the hood

00:15:40,970 --> 00:15:45,650
this versioning is usually supported by

00:15:43,550 --> 00:15:47,240
the database and all of the

00:15:45,650 --> 00:15:50,180
configuration are stored in the database

00:15:47,240 --> 00:15:52,820
you can roll back and there are some

00:15:50,180 --> 00:15:54,980
kind of templates which can be reused so

00:15:52,820 --> 00:15:58,360
more or less the features are valid

00:15:54,980 --> 00:16:01,640
right because the the proprietary tools

00:15:58,360 --> 00:16:05,720
provides something very similar more or

00:16:01,640 --> 00:16:08,960
less so let's check a what do we have in

00:16:05,720 --> 00:16:10,940
the kubernetes so first of all what is

00:16:08,960 --> 00:16:14,360
how does kubernetes work do you use

00:16:10,940 --> 00:16:16,100
kubernetes hands on if you use ok a few

00:16:14,360 --> 00:16:18,440
of them i have a full kubernetes

00:16:16,100 --> 00:16:20,870
training in the next one minute but only

00:16:18,440 --> 00:16:23,180
the part what we are interested about so

00:16:20,870 --> 00:16:25,340
let me explain what it is kubernetes

00:16:23,180 --> 00:16:27,500
from this point of view so this is

00:16:25,340 --> 00:16:29,960
actually not kubernetes this is a good

00:16:27,500 --> 00:16:34,220
old web application and I'm pretty sure

00:16:29,960 --> 00:16:35,690
you developed a lot or at least you have

00:16:34,220 --> 00:16:38,600
seen a lot of this type of application

00:16:35,690 --> 00:16:40,490
where you have a back-end usually there

00:16:38,600 --> 00:16:42,920
is a database somewhere here but it's

00:16:40,490 --> 00:16:45,050
not so interesting right now and we have

00:16:42,920 --> 00:16:47,120
multiple resources and usually we have

00:16:45,050 --> 00:16:48,950
some kind of interests interfaces for

00:16:47,120 --> 00:16:51,050
example or some kind of interfaces here

00:16:48,950 --> 00:16:53,420
you can just create read update delete

00:16:51,050 --> 00:16:56,060
to the users the customers and the

00:16:53,420 --> 00:16:58,640
products and kubernetes itself it's very

00:16:56,060 --> 00:17:00,860
similar just way more flexible because

00:16:58,640 --> 00:17:04,280
you can see everything in the world or

00:17:00,860 --> 00:17:06,380
almost everything and because you can

00:17:04,280 --> 00:17:08,449
save out of type or free sources

00:17:06,380 --> 00:17:11,120
the only thing what you should do is

00:17:08,449 --> 00:17:13,339
just group somehow these resources so

00:17:11,120 --> 00:17:16,370
usually we have a group a version group

00:17:13,339 --> 00:17:18,829
and under that we have some kind of

00:17:16,370 --> 00:17:22,300
resource which can be saved that's all

00:17:18,829 --> 00:17:25,220
the kubernetes so it's a very flexible

00:17:22,300 --> 00:17:29,000
back-end server for example this is the

00:17:25,220 --> 00:17:31,940
apps we won this is the group the first

00:17:29,000 --> 00:17:34,460
version of the apps group and under that

00:17:31,940 --> 00:17:37,040
we have this stateful search service so

00:17:34,460 --> 00:17:41,270
kubernetes is nothing more just a very

00:17:37,040 --> 00:17:43,640
huge game with your mole files right so

00:17:41,270 --> 00:17:45,770
it's here you can see that XV 1 this is

00:17:43,640 --> 00:17:48,440
the epic version API version this is the

00:17:45,770 --> 00:17:50,690
kind this metadata is it's very usual to

00:17:48,440 --> 00:17:53,450
have it but all of the others depends

00:17:50,690 --> 00:17:54,350
from the resource so ideally you can you

00:17:53,450 --> 00:17:56,270
can

00:17:54,350 --> 00:17:59,090
have any kind of amorphous to the

00:17:56,270 --> 00:18:00,799
kubernetes yeah but the only problem is

00:17:59,090 --> 00:18:03,020
at the end of the day we would like to

00:18:00,799 --> 00:18:05,360
have a running container right that's

00:18:03,020 --> 00:18:07,940
the that's the wall point so when you

00:18:05,360 --> 00:18:12,500
save a resource under the hood there are

00:18:07,940 --> 00:18:14,270
controllers who who listen on the API

00:18:12,500 --> 00:18:16,549
server and if there is a new resource

00:18:14,270 --> 00:18:19,190
they will do something for example start

00:18:16,549 --> 00:18:21,890
a container monta start mount a storage

00:18:19,190 --> 00:18:24,950
or something but the main interface is

00:18:21,890 --> 00:18:26,870
just saving a lot of gamma files to the

00:18:24,950 --> 00:18:29,390
or posting a lot of few more files for

00:18:26,870 --> 00:18:31,400
the kubernetes so all of my problem here

00:18:29,390 --> 00:18:33,289
is just creating a lot of fuel files it

00:18:31,400 --> 00:18:35,240
seems to be easier so still I don't

00:18:33,289 --> 00:18:37,010
understand why there is nothing on the

00:18:35,240 --> 00:18:40,820
intersection if it's just the mo file

00:18:37,010 --> 00:18:44,539
generation problem okay so let's talk

00:18:40,820 --> 00:18:46,929
about patterns the most popular pattern

00:18:44,539 --> 00:18:51,169
in kubernetes is the operator pattern

00:18:46,929 --> 00:18:53,030
which means that okay if I would like to

00:18:51,169 --> 00:18:55,820
install for example ozone in kubernetes

00:18:53,030 --> 00:18:58,190
I need a lot of llamo files not just one

00:18:55,820 --> 00:19:01,880
but a lot of complex llamo files

00:18:58,190 --> 00:19:04,909
what about to simplify and post just one

00:19:01,880 --> 00:19:06,919
just the ozone llamo face so instead of

00:19:04,909 --> 00:19:09,380
creating a lot of this one a lot of from

00:19:06,919 --> 00:19:11,570
this which come which defines that ok

00:19:09,380 --> 00:19:13,370
the number of the replicas labels

00:19:11,570 --> 00:19:16,789
metadata creates something like this

00:19:13,370 --> 00:19:18,559
it's still llamo files so we it's still

00:19:16,789 --> 00:19:20,659
the game of the ml files but this is

00:19:18,559 --> 00:19:23,179
just one llamo five it as simplified

00:19:20,659 --> 00:19:26,270
configuration that's the whole point

00:19:23,179 --> 00:19:29,480
the only problem is here that by default

00:19:26,270 --> 00:19:31,700
if I post something it it was saved but

00:19:29,480 --> 00:19:34,000
none of the controllers will pick up

00:19:31,700 --> 00:19:36,140
right because the controllers are

00:19:34,000 --> 00:19:38,750
trained to handle the original

00:19:36,140 --> 00:19:41,059
kubernetes resources so I need to

00:19:38,750 --> 00:19:43,640
implement some controller which listens

00:19:41,059 --> 00:19:46,400
if somebody saves this simplified file

00:19:43,640 --> 00:19:48,710
and create all of the original resources

00:19:46,400 --> 00:19:52,340
in the API server so that's the operator

00:19:48,710 --> 00:19:55,429
pattern some custom forma a simplified a

00:19:52,340 --> 00:19:58,549
multi-format and under the hood some

00:19:55,429 --> 00:20:02,090
controller who can do the right thing

00:19:58,549 --> 00:20:05,000
based on the llamo files ok what's the

00:20:02,090 --> 00:20:06,650
problem first of all it's I wouldn't

00:20:05,000 --> 00:20:07,610
like to say that the operator pattern is

00:20:06,650 --> 00:20:11,120
bad you

00:20:07,610 --> 00:20:12,770
could be very powerful because it's a

00:20:11,120 --> 00:20:15,920
simplified version of the configuration

00:20:12,770 --> 00:20:18,200
right it's there is more chance that an

00:20:15,920 --> 00:20:20,950
average user can understand it for

00:20:18,200 --> 00:20:23,810
example there are operators to create

00:20:20,950 --> 00:20:25,910
similar resources for spark jobs and

00:20:23,810 --> 00:20:29,780
it's enough to create a simple Yama

00:20:25,910 --> 00:20:32,720
files to initiate a new spark job which

00:20:29,780 --> 00:20:35,780
is very nice the problem is if I have

00:20:32,720 --> 00:20:38,960
only this interface and I have no power

00:20:35,780 --> 00:20:41,420
to configure it right because I'm pretty

00:20:38,960 --> 00:20:43,280
sure that after a while I will have some

00:20:41,420 --> 00:20:44,990
requirements let's say I have an

00:20:43,280 --> 00:20:47,120
additional SSD and I would like to

00:20:44,990 --> 00:20:50,240
configure it in an Asha as additional

00:20:47,120 --> 00:20:51,890
store under the storage oh sorry about

00:20:50,240 --> 00:20:55,460
it it's not supported with the

00:20:51,890 --> 00:20:57,920
simplified resource configuration okay

00:20:55,460 --> 00:20:59,750
so that's my problem right we wouldn't

00:20:57,920 --> 00:21:02,540
like to hide the complexity from the

00:20:59,750 --> 00:21:04,700
admin we would like to structure somehow

00:21:02,540 --> 00:21:09,110
and have to understand what's going on

00:21:04,700 --> 00:21:12,590
my other problem is that I have some

00:21:09,110 --> 00:21:15,590
running component here and the behavior

00:21:12,590 --> 00:21:18,020
of my cluster based on this based on the

00:21:15,590 --> 00:21:19,700
state of this control controller or if

00:21:18,020 --> 00:21:22,250
there is no state at least based on the

00:21:19,700 --> 00:21:25,070
version so when I would like to migrate

00:21:22,250 --> 00:21:27,580
this resource from one cluster the other

00:21:25,070 --> 00:21:32,030
cluster the behavior depends from this

00:21:27,580 --> 00:21:34,310
friend which mmm it's more is right

00:21:32,030 --> 00:21:41,600
there is something under the hood which

00:21:34,310 --> 00:21:44,660
does the final deployment so that's the

00:21:41,600 --> 00:21:48,170
operator pattern and these are the most

00:21:44,660 --> 00:21:51,530
problematic parts that I have no power

00:21:48,170 --> 00:21:53,780
to fully customize and it's a little bit

00:21:51,530 --> 00:21:56,180
hard to handle all of this versioning

00:21:53,780 --> 00:21:58,190
the other parts it's a little bit easier

00:21:56,180 --> 00:22:00,020
for example this composable

00:21:58,190 --> 00:22:01,280
collaborative features that when one

00:22:00,020 --> 00:22:03,250
component modifies the other

00:22:01,280 --> 00:22:06,350
configuration because this application

00:22:03,250 --> 00:22:09,080
sits inside kubernetes and can do every

00:22:06,350 --> 00:22:10,760
everything which is magic so that's the

00:22:09,080 --> 00:22:12,920
operator I wouldn't like to say the

00:22:10,760 --> 00:22:16,820
operator is bad but maybe this is not

00:22:12,920 --> 00:22:18,830
the best fit to solve this problem which

00:22:16,820 --> 00:22:21,530
is a very specific problem right it is

00:22:18,830 --> 00:22:24,560
not an generic problem to do anything

00:22:21,530 --> 00:22:27,580
to run or Apache Big Data project as a

00:22:24,560 --> 00:22:32,230
stack so let's try to find something

00:22:27,580 --> 00:22:37,870
some other tools we have multiple tools

00:22:32,230 --> 00:22:40,220
in kubernetes which can be used to to

00:22:37,870 --> 00:22:44,030
handle all of the siamo files

00:22:40,220 --> 00:22:46,760
ham customize flexible and the generic

00:22:44,030 --> 00:22:52,420
question about these tools that how can

00:22:46,760 --> 00:22:55,820
we use them and how the tools work and

00:22:52,420 --> 00:22:59,750
how can we achieve or go as the five

00:22:55,820 --> 00:23:02,480
goals with the tools and first of all I

00:22:59,750 --> 00:23:06,890
have a disclaimer in fact we have two

00:23:02,480 --> 00:23:08,600
tools the ham is a CNC F incubating

00:23:06,890 --> 00:23:11,900
project it's you can see that it's very

00:23:08,600 --> 00:23:15,980
popular and very old and there is a new

00:23:11,900 --> 00:23:20,570
one to customize somewhat similar goals

00:23:15,980 --> 00:23:22,910
it its merged to the kubernetes itself

00:23:20,570 --> 00:23:26,330
so if you download the cube control tool

00:23:22,910 --> 00:23:27,920
which can help you to handle all of

00:23:26,330 --> 00:23:32,150
these yellow files and apply them their

00:23:27,920 --> 00:23:33,770
customers will be included and he added

00:23:32,150 --> 00:23:36,410
the disclaimer so unfortunately the

00:23:33,770 --> 00:23:38,030
third one is written by me and I

00:23:36,410 --> 00:23:39,920
wouldn't like to sell it to you that oh

00:23:38,030 --> 00:23:41,660
that's that's the tool which solves

00:23:39,920 --> 00:23:43,850
everything because there is there are

00:23:41,660 --> 00:23:45,950
some obvious differences between them

00:23:43,850 --> 00:23:49,160
right so if you if you would like to

00:23:45,950 --> 00:23:52,280
find a project it's it's it's more like

00:23:49,160 --> 00:23:54,320
a POC not a project right but I would

00:23:52,280 --> 00:23:57,710
like to use it to show how the different

00:23:54,320 --> 00:24:01,220
feature set of these real tools can be

00:23:57,710 --> 00:24:03,050
become deconstructed and combined in a

00:24:01,220 --> 00:24:06,530
different way so it's more like a

00:24:03,050 --> 00:24:10,640
research to understand the patterns

00:24:06,530 --> 00:24:12,860
behind the tools because if I can get

00:24:10,640 --> 00:24:14,720
some features from here I'd get some

00:24:12,860 --> 00:24:17,030
features from here and combine them in a

00:24:14,720 --> 00:24:18,920
different way then we can understand

00:24:17,030 --> 00:24:22,900
that what are the limitations here and

00:24:18,920 --> 00:24:25,580
here so that's only thing why I use this

00:24:22,900 --> 00:24:27,590
flexible tool so because the patterns

00:24:25,580 --> 00:24:30,140
are independent from the implementation

00:24:27,590 --> 00:24:34,550
we we should see the patterns of the of

00:24:30,140 --> 00:24:35,330
the O's so the questions were like how

00:24:34,550 --> 00:24:39,410
can we you

00:24:35,330 --> 00:24:42,680
with them and yet ahem it says

00:24:39,410 --> 00:24:45,320
unfortunately I have no internet so I

00:24:42,680 --> 00:24:47,690
think I have some yeah hmmm cunningly

00:24:45,320 --> 00:24:52,820
started locally because I have no access

00:24:47,690 --> 00:24:55,100
to my kubernetes cluster but usually the

00:24:52,820 --> 00:24:58,670
if you'd like to see it from the user

00:24:55,100 --> 00:25:01,070
perspective you need a CLI the ham first

00:24:58,670 --> 00:25:03,590
of all you need the ham you should start

00:25:01,070 --> 00:25:05,780
the ham in it that's an interesting

00:25:03,590 --> 00:25:09,880
question why do we need it because it

00:25:05,780 --> 00:25:12,830
will install a server side component

00:25:09,880 --> 00:25:14,960
which is one of the weakness of the ham

00:25:12,830 --> 00:25:16,910
in the next version of the ham it will

00:25:14,960 --> 00:25:19,190
be removed right it's very similar to

00:25:16,910 --> 00:25:21,320
the operator so somebody on the server

00:25:19,190 --> 00:25:24,200
it just modifies everything and it

00:25:21,320 --> 00:25:26,780
depends from the version yeah

00:25:24,200 --> 00:25:29,240
and for example with ham it's very hard

00:25:26,780 --> 00:25:32,390
to use the hair if this CLI and the

00:25:29,240 --> 00:25:35,180
server have different versions there are

00:25:32,390 --> 00:25:38,480
different kind of problems errors so

00:25:35,180 --> 00:25:40,130
that's okay but we start it so let's try

00:25:38,480 --> 00:25:41,750
it out and after that we can evaluate

00:25:40,130 --> 00:25:44,240
how does it work

00:25:41,750 --> 00:25:47,840
so this is what you we should do this is

00:25:44,240 --> 00:25:50,210
some kind of packaging I'm installing

00:25:47,840 --> 00:25:52,910
Hadoop from the stable repository and

00:25:50,210 --> 00:25:56,030
with this name and I will see a lot of

00:25:52,910 --> 00:25:58,340
output that ok all of the mo fights I

00:25:56,030 --> 00:26:01,790
created under the hood and save to the

00:25:58,340 --> 00:26:07,220
kubernetes and it's it's working alright

00:26:01,790 --> 00:26:10,640
so that's all and you have an option to

00:26:07,220 --> 00:26:14,870
customize this package and you can set

00:26:10,640 --> 00:26:17,450
variables one by one yeah it seems to be

00:26:14,870 --> 00:26:20,630
a limitation right it's very optimistic

00:26:17,450 --> 00:26:22,490
if you if you install a big data cluster

00:26:20,630 --> 00:26:26,170
what do you expect

00:26:22,490 --> 00:26:28,970
how many configuration should be set to

00:26:26,170 --> 00:26:32,270
to be comfortable with your environment

00:26:28,970 --> 00:26:35,330
I expect a lot actually and there are

00:26:32,270 --> 00:26:37,610
it's not directly supported by ham there

00:26:35,330 --> 00:26:39,620
are other tools which makes easier to

00:26:37,610 --> 00:26:44,750
set it all of them all of the

00:26:39,620 --> 00:26:46,820
configuration ok and after that you can

00:26:44,750 --> 00:26:49,250
see with the ham list that is deployed

00:26:46,820 --> 00:26:52,190
and in the kubernetes we can

00:26:49,250 --> 00:26:55,340
all of the containers somehow started so

00:26:52,190 --> 00:26:57,679
that's ham how does it work well

00:26:55,340 --> 00:27:00,830
actually this is nothing more just a

00:26:57,679 --> 00:27:04,580
package manager to post a template

00:27:00,830 --> 00:27:07,130
system so this is the source of the of a

00:27:04,580 --> 00:27:09,740
ham chart and this is that you can see

00:27:07,130 --> 00:27:12,320
that this is the amo files which is the

00:27:09,740 --> 00:27:14,799
kubernetes is about so and there are

00:27:12,320 --> 00:27:18,440
templates fragments which will be

00:27:14,799 --> 00:27:20,330
evaluated before it's applied and the

00:27:18,440 --> 00:27:23,120
additional advantage that there is a

00:27:20,330 --> 00:27:26,659
package manager so this yomel templates

00:27:23,120 --> 00:27:27,140
can be downloaded so what's the problem

00:27:26,659 --> 00:27:29,870
here

00:27:27,140 --> 00:27:32,799
first of all this is a gamma phi so

00:27:29,870 --> 00:27:39,559
originally it was a very structured

00:27:32,799 --> 00:27:42,440
format where we have meaning or so all

00:27:39,559 --> 00:27:45,020
of the lines so will be the structure we

00:27:42,440 --> 00:27:47,480
know what what does it mean exactly but

00:27:45,020 --> 00:27:49,669
this is converted to a text file right

00:27:47,480 --> 00:27:51,830
so if it's a template this is just a

00:27:49,669 --> 00:27:53,900
text file we don't know how can we

00:27:51,830 --> 00:27:55,520
modify it so we have just a lot of so

00:27:53,900 --> 00:27:57,620
this is the wall values which can be set

00:27:55,520 --> 00:27:59,929
from the command line I can for example

00:27:57,620 --> 00:28:06,460
saturdays your node manager for allah

00:27:59,929 --> 00:28:10,340
create similar to this web HDFS enabled

00:28:06,460 --> 00:28:13,090
ok so i can modify this one but what

00:28:10,340 --> 00:28:18,020
about if i would like to put a

00:28:13,090 --> 00:28:20,510
additional key here which is supported

00:28:18,020 --> 00:28:22,039
by kubernetes let's say i would like to

00:28:20,510 --> 00:28:24,799
define if the container should be

00:28:22,039 --> 00:28:28,460
downloaded all the time or just once at

00:28:24,799 --> 00:28:30,679
the beginning or how can i add it right

00:28:28,460 --> 00:28:33,260
it's not supported with the ham short

00:28:30,679 --> 00:28:36,490
it's sorry you can create a pull request

00:28:33,260 --> 00:28:39,650
it's an open source ham short ideally so

00:28:36,490 --> 00:28:42,860
yeah that's that means that it's not

00:28:39,650 --> 00:28:48,620
fully customizable right it's even worse

00:28:42,860 --> 00:28:51,230
that these are specific to the ham

00:28:48,620 --> 00:28:54,740
charts these settings so even if i learn

00:28:51,230 --> 00:28:56,450
the you know files and which is not an

00:28:54,740 --> 00:28:58,220
easy task in kubernetes because there

00:28:56,450 --> 00:29:00,530
are a lot of ml files but let's say i

00:28:58,220 --> 00:29:02,480
learned all of the structure but i don't

00:29:00,530 --> 00:29:03,200
know how the structure can be modified

00:29:02,480 --> 00:29:05,510
in this

00:29:03,200 --> 00:29:07,880
cific chart because it depends from this

00:29:05,510 --> 00:29:11,720
template so this customizable it's

00:29:07,880 --> 00:29:13,639
definitely it's a it's a wrong part of

00:29:11,720 --> 00:29:15,679
the ham chart and it's not powerful

00:29:13,639 --> 00:29:17,809
enough again I wouldn't like to say the

00:29:15,679 --> 00:29:20,630
ham is bad at all it's very very

00:29:17,809 --> 00:29:23,000
powerful just to install something just

00:29:20,630 --> 00:29:25,580
to install a operator just to install a

00:29:23,000 --> 00:29:28,309
headache' you have seen but for this use

00:29:25,580 --> 00:29:31,700
case when I would like to have an rear

00:29:28,309 --> 00:29:35,960
cluster a real stack it's not maybe it's

00:29:31,700 --> 00:29:38,450
not the most powerful version so yeah we

00:29:35,960 --> 00:29:40,000
have versioning our versioning migration

00:29:38,450 --> 00:29:43,639
support it's also we need additional

00:29:40,000 --> 00:29:46,269
tools to make it possible to save all of

00:29:43,639 --> 00:29:49,519
the variables in a file and reproduce

00:29:46,269 --> 00:29:51,769
reproduce the state and we have we need

00:29:49,519 --> 00:29:53,659
to have exactly the same state in the

00:29:51,769 --> 00:29:54,649
other server so that's also not very

00:29:53,659 --> 00:29:57,080
good

00:29:54,649 --> 00:29:59,139
there is no composable feature set at

00:29:57,080 --> 00:30:02,690
all so with ham chart you can install

00:29:59,139 --> 00:30:05,750
Kafka and spark but this spark chart

00:30:02,690 --> 00:30:07,130
it's very hard to modify the Kafka the

00:30:05,750 --> 00:30:09,860
dependency management is something like

00:30:07,130 --> 00:30:11,809
to combine all of them to one big chart

00:30:09,860 --> 00:30:15,049
in that case you can imagine home any

00:30:11,809 --> 00:30:17,960
configuration where you have so this is

00:30:15,049 --> 00:30:22,010
one tool and it's nice this is this was

00:30:17,960 --> 00:30:25,700
one of the oldest one but it doesn't

00:30:22,010 --> 00:30:29,419
solve all of the programs so let's check

00:30:25,700 --> 00:30:32,090
the customize customize it's a very more

00:30:29,419 --> 00:30:33,649
newer tool and it's more easy you can

00:30:32,090 --> 00:30:35,929
guess from the name then the only

00:30:33,649 --> 00:30:38,330
problem here is make it fully

00:30:35,929 --> 00:30:39,830
customizable right because we learned

00:30:38,330 --> 00:30:42,669
that that's that's the problem with the

00:30:39,830 --> 00:30:49,010
ham chart let's do something better so

00:30:42,669 --> 00:30:49,669
let's try to oh let's go to here do you

00:30:49,010 --> 00:30:55,279
see this

00:30:49,669 --> 00:30:57,320
oh no okay maybe my images can be better

00:30:55,279 --> 00:31:00,830
than this one okay this is a customize

00:30:57,320 --> 00:31:04,220
director directory and here I have two

00:31:00,830 --> 00:31:06,940
directories the ozone and ozone freon in

00:31:04,220 --> 00:31:09,830
the ozone and ozone freon

00:31:06,940 --> 00:31:13,010
there are just kubernetes resources so

00:31:09,830 --> 00:31:15,529
if I would check the SCM so this is

00:31:13,010 --> 00:31:17,820
plain old Cooper no license this is

00:31:15,529 --> 00:31:20,379
Apache spyler

00:31:17,820 --> 00:31:22,330
this is playing on all kubernetes

00:31:20,379 --> 00:31:24,700
resource past the apache license you can

00:31:22,330 --> 00:31:26,730
see the API version and the kind what we

00:31:24,700 --> 00:31:27,940
learned earlier and all of the others

00:31:26,730 --> 00:31:29,440
okay

00:31:27,940 --> 00:31:31,570
I would like to modify them right

00:31:29,440 --> 00:31:33,580
because it's very good to have the

00:31:31,570 --> 00:31:36,370
example but for example I would like to

00:31:33,580 --> 00:31:38,769
change the version of the docker

00:31:36,370 --> 00:31:41,409
containers which are somewhere in the

00:31:38,769 --> 00:31:46,539
amorphous so I need some kind of

00:31:41,409 --> 00:31:49,539
transformations these are what is which

00:31:46,539 --> 00:31:51,909
is big enough but you can is so these

00:31:49,539 --> 00:31:54,759
are transformation definitions so it

00:31:51,909 --> 00:31:55,570
means that I need to replace in one of

00:31:54,759 --> 00:31:57,929
the UML files

00:31:55,570 --> 00:32:01,360
I don't know what we will see it later

00:31:57,929 --> 00:32:03,309
the spec template spec container 0 image

00:32:01,360 --> 00:32:05,740
so it is the first image under the spec

00:32:03,309 --> 00:32:08,860
template spec so this is structured

00:32:05,740 --> 00:32:12,759
right this is not just that dump text

00:32:08,860 --> 00:32:15,460
file we can point to the right point in

00:32:12,759 --> 00:32:17,669
the structure demo file and I would like

00:32:15,460 --> 00:32:21,389
to change it to build ozone this is my

00:32:17,669 --> 00:32:24,009
new image name okay and I have

00:32:21,389 --> 00:32:26,619
customization llamo file where I need to

00:32:24,009 --> 00:32:28,629
say that okay these are the directories

00:32:26,619 --> 00:32:31,480
please use all of the original

00:32:28,629 --> 00:32:35,350
kubernetes KML files because I like I

00:32:31,480 --> 00:32:39,999
love the mo files please change prefixes

00:32:35,350 --> 00:32:45,220
and after that I'm defining the ok

00:32:39,999 --> 00:32:48,070
I had an EPS v1 stateful set and the

00:32:45,220 --> 00:32:52,499
name if the name is Om like ah so

00:32:48,070 --> 00:32:55,600
manager the image patch / mo file

00:32:52,499 --> 00:32:57,879
transformation should be applied so this

00:32:55,600 --> 00:33:01,830
is something more customizable right

00:32:57,879 --> 00:33:06,220
this is it called customized right so

00:33:01,830 --> 00:33:08,409
customize build will generate a lot of

00:33:06,220 --> 00:33:12,460
film on file so these are the real

00:33:08,409 --> 00:33:14,740
kubernetes gamma files the transport the

00:33:12,460 --> 00:33:18,850
result of the transformation and

00:33:14,740 --> 00:33:20,980
somewhere in the init containers you

00:33:18,850 --> 00:33:23,559
should see that the image has been has

00:33:20,980 --> 00:33:25,200
been changed so that's all you have an

00:33:23,559 --> 00:33:29,380
original set of the unifies

00:33:25,200 --> 00:33:31,870
transformation and the result okay

00:33:29,380 --> 00:33:34,360
yeah we have seen this one this one and

00:33:31,870 --> 00:33:36,309
this one how does it work well it's very

00:33:34,360 --> 00:33:38,260
easy to imagine because it's nothing

00:33:36,309 --> 00:33:40,539
more just a transformation locally right

00:33:38,260 --> 00:33:41,950
it's just a simple go leg application

00:33:40,539 --> 00:33:44,940
reading files

00:33:41,950 --> 00:33:47,500
finding the right or the transformation

00:33:44,940 --> 00:33:49,510
applying to the amorphous and saving it

00:33:47,500 --> 00:33:52,299
to the end so there is no magic it's

00:33:49,510 --> 00:33:54,429
it's very very easy and fully

00:33:52,299 --> 00:33:57,100
customizable right this is what we

00:33:54,429 --> 00:34:00,220
started to use it I can change anything

00:33:57,100 --> 00:34:02,890
if you come to say that I I would like

00:34:00,220 --> 00:34:06,309
to change it to make it deployable only

00:34:02,890 --> 00:34:08,679
on this specific note I can modify I can

00:34:06,309 --> 00:34:10,109
add an additional transformation I can

00:34:08,679 --> 00:34:14,139
manage the wall platform together

00:34:10,109 --> 00:34:17,619
because when I say customize build okay

00:34:14,139 --> 00:34:20,409
when I in the customizing mo I can just

00:34:17,619 --> 00:34:22,600
include all zones Park Kafka everything

00:34:20,409 --> 00:34:24,760
here and all of the AMA files will be

00:34:22,600 --> 00:34:27,940
included in the result from multiple

00:34:24,760 --> 00:34:30,220
directories so it's very nice there are

00:34:27,940 --> 00:34:32,859
shareable reusable parts right this is

00:34:30,220 --> 00:34:34,810
what we have here we have also an

00:34:32,859 --> 00:34:37,600
awesome free on the sub directories

00:34:34,810 --> 00:34:39,730
actually and you can download it from

00:34:37,600 --> 00:34:42,760
github repositories as well so you can

00:34:39,730 --> 00:34:46,929
there is some kind of remote support as

00:34:42,760 --> 00:34:52,990
well but the problem is that it's very

00:34:46,929 --> 00:34:54,790
hard - so this is - - yamo or me what

00:34:52,990 --> 00:34:57,129
about if you would like to change the

00:34:54,790 --> 00:35:00,640
image file for your install uninstall

00:34:57,129 --> 00:35:02,920
you should create this image patch GMO

00:35:00,640 --> 00:35:05,590
or download a similar transformation

00:35:02,920 --> 00:35:09,490
you should modify your value to your

00:35:05,590 --> 00:35:12,250
image name and you should say all of the

00:35:09,490 --> 00:35:14,290
files should be modified which vise ah

00:35:12,250 --> 00:35:16,150
you can check it from the source but so

00:35:14,290 --> 00:35:19,380
this is not something it's not user

00:35:16,150 --> 00:35:24,160
friendly at all right if the if the

00:35:19,380 --> 00:35:26,140
closet 'iv is if the cognitive is user

00:35:24,160 --> 00:35:32,380
experience this is not user experience

00:35:26,140 --> 00:35:34,810
at all so the problem is that the rules

00:35:32,380 --> 00:35:37,300
are not reusable and they are not

00:35:34,810 --> 00:35:39,700
packaging packaged and they can download

00:35:37,300 --> 00:35:42,490
I would like to provide something which

00:35:39,700 --> 00:35:43,270
is easy and you it should be enough to

00:35:42,490 --> 00:35:47,110
say I need

00:35:43,270 --> 00:35:49,210
ozone and Kafka and do all of the

00:35:47,110 --> 00:35:52,120
transformation to have a secure roster

00:35:49,210 --> 00:35:54,010
that's what we need I think and by it

00:35:52,120 --> 00:35:55,540
can be version very easily right because

00:35:54,010 --> 00:35:59,350
this is a game with all of the local

00:35:55,540 --> 00:36:04,060
files and nothing more so let's check

00:35:59,350 --> 00:36:08,560
this experiment so I have no internet

00:36:04,060 --> 00:36:14,170
for some strange reason so I would like

00:36:08,560 --> 00:36:22,330
to do something which similar to the in

00:36:14,170 --> 00:36:27,570
turn of your flexible okay so this tool

00:36:22,330 --> 00:36:30,010
search for oh I need to make it smaller

00:36:27,570 --> 00:36:32,500
the first of all I'm interested at what

00:36:30,010 --> 00:36:35,770
kind of applications are available ham

00:36:32,500 --> 00:36:38,440
chart uses some very specific repository

00:36:35,770 --> 00:36:40,840
format in fact this is a github

00:36:38,440 --> 00:36:43,690
repository search if you put the right

00:36:40,840 --> 00:36:49,060
topic it will be displayed okay let's go

00:36:43,690 --> 00:36:53,110
forward and add infra means that some

00:36:49,060 --> 00:36:55,840
kind of infrastructure related some

00:36:53,110 --> 00:36:58,510
dashboards and monitoring and ozone is

00:36:55,840 --> 00:37:00,370
some kind of ozone related definitions

00:36:58,510 --> 00:37:02,290
we can check that what kind of

00:37:00,370 --> 00:37:05,700
applications which usually just

00:37:02,290 --> 00:37:08,890
directories wait kubernetes resources

00:37:05,700 --> 00:37:11,530
okay I have a lot of rough on I a girl I

00:37:08,890 --> 00:37:13,960
mean I Oprah mantis and ozone so ideally

00:37:11,530 --> 00:37:15,640
there should be spark Costco all of them

00:37:13,960 --> 00:37:17,500
are here you can see that I have some

00:37:15,640 --> 00:37:20,590
local cash and I have just directories

00:37:17,500 --> 00:37:25,960
under the hood and I can add for example

00:37:20,590 --> 00:37:29,800
the ozone okay ozone free on which is a

00:37:25,960 --> 00:37:36,660
load generator it could be no it can be

00:37:29,800 --> 00:37:39,850
bigger and I can add some Tomatoes yeah

00:37:36,660 --> 00:37:42,640
in fact this is just it created a very

00:37:39,850 --> 00:37:45,810
easy file that what git repositories

00:37:42,640 --> 00:37:51,250
should be downloaded and which

00:37:45,810 --> 00:37:52,900
directories should be used okay and all

00:37:51,250 --> 00:37:55,810
of the all of the fights are generated

00:37:52,900 --> 00:37:57,250
so it's very similar to customize so the

00:37:55,810 --> 00:37:59,530
customers itself can

00:37:57,250 --> 00:38:02,740
improve to use something like this but

00:37:59,530 --> 00:38:05,080
we have seen that we have we have this

00:38:02,740 --> 00:38:10,630
packaging from the ham chart and we have

00:38:05,080 --> 00:38:13,780
the structured llamó file processing

00:38:10,630 --> 00:38:16,390
from the customized so these are the

00:38:13,780 --> 00:38:18,900
patterns which should be reused somehow

00:38:16,390 --> 00:38:21,430
okay these are the transformation so

00:38:18,900 --> 00:38:24,010
earlier we had this replace in

00:38:21,430 --> 00:38:27,360
customized here the interesting part is

00:38:24,010 --> 00:38:29,590
that also knit SAS provides ready-to-use

00:38:27,360 --> 00:38:31,540
transformation and this is the level

00:38:29,590 --> 00:38:33,400
what I would like to provide that ok if

00:38:31,540 --> 00:38:35,230
you would like to use mem disk for the

00:38:33,400 --> 00:38:37,450
storage because you would like to just

00:38:35,230 --> 00:38:40,060
play with the ozone and it would be

00:38:37,450 --> 00:38:43,420
enough to add this awesome and this

00:38:40,060 --> 00:38:48,490
transformation for all of the oh where

00:38:43,420 --> 00:38:52,150
is this oh it's you can see just the new

00:38:48,490 --> 00:38:54,130
lines okay let's see it so you can put

00:38:52,150 --> 00:38:56,710
all unfortunately we can see the

00:38:54,130 --> 00:38:59,050
original lines of the the flexible which

00:38:56,710 --> 00:39:01,030
is which was visible earlier so we can

00:38:59,050 --> 00:39:02,640
just put additional transformations to

00:39:01,030 --> 00:39:05,980
here to use the empty dear

00:39:02,640 --> 00:39:07,390
transformation or this is an image

00:39:05,980 --> 00:39:09,280
transformation which means that the

00:39:07,390 --> 00:39:11,170
image should be replaced but only for

00:39:09,280 --> 00:39:13,530
this one but again I wouldn't like to

00:39:11,170 --> 00:39:19,630
sell this too I would like to say that

00:39:13,530 --> 00:39:21,790
the missing part to have something which

00:39:19,630 --> 00:39:24,220
is powerful the Apache big data it's

00:39:21,790 --> 00:39:28,060
something which we can just combine all

00:39:24,220 --> 00:39:31,120
of the all of the resources and modify

00:39:28,060 --> 00:39:32,770
based on high level rules and not low

00:39:31,120 --> 00:39:35,560
level rules so some kind of

00:39:32,770 --> 00:39:37,390
collaboration yeah you can see that I'm

00:39:35,560 --> 00:39:40,510
generated all over I originally did all

00:39:37,390 --> 00:39:43,000
of the resources and the MTD or is just

00:39:40,510 --> 00:39:48,090
added sample because I activated it

00:39:43,000 --> 00:39:52,300
emptied air transformation so this is

00:39:48,090 --> 00:39:54,730
this was the question line that what why

00:39:52,300 --> 00:39:58,150
there is nothing here in the in the

00:39:54,730 --> 00:40:00,820
intersection and I think that key is the

00:39:58,150 --> 00:40:03,460
collaboration for both of the sizes both

00:40:00,820 --> 00:40:06,250
both of the sides so in the Apache

00:40:03,460 --> 00:40:09,070
projects we already started to create

00:40:06,250 --> 00:40:11,109
some so originally we we have this

00:40:09,070 --> 00:40:15,130
collaboration between spark of

00:40:11,109 --> 00:40:16,779
and and all of the tools between we

00:40:15,130 --> 00:40:18,910
should improve it right to make it

00:40:16,779 --> 00:40:21,459
easier to work together with all of the

00:40:18,910 --> 00:40:24,219
other tools monitoring and make it easy

00:40:21,459 --> 00:40:27,099
to run our projects in cloud native

00:40:24,219 --> 00:40:29,709
environments but the other side I think

00:40:27,099 --> 00:40:33,719
we also need to invent new tools which

00:40:29,709 --> 00:40:37,049
can which can support this kind of

00:40:33,719 --> 00:40:39,369
collaboration between the projects or

00:40:37,049 --> 00:40:42,219
improve the existing tools improved

00:40:39,369 --> 00:40:46,509
customize for example to have this kind

00:40:42,219 --> 00:40:51,069
of power to define the big configuration

00:40:46,509 --> 00:40:55,390
set and and handle all of the projects

00:40:51,069 --> 00:40:58,690
together as a as a stack and they are

00:40:55,390 --> 00:41:00,729
not there actually and I think that's

00:40:58,690 --> 00:41:03,729
the main reason why there is nothing

00:41:00,729 --> 00:41:05,559
here but I would like to definitely see

00:41:03,729 --> 00:41:10,259
a lot of different kind of projects

00:41:05,559 --> 00:41:14,920
which can which can solve this problem

00:41:10,259 --> 00:41:18,239
ok that was all thank you very much if

00:41:14,920 --> 00:41:18,239
you have any question

00:41:25,380 --> 00:41:31,800
when deploying big data tools to

00:41:28,089 --> 00:41:34,570
kubernetes have you observed any

00:41:31,800 --> 00:41:37,810
slowdowns or reduced number of i/os

00:41:34,570 --> 00:41:41,740
operations it depends how do you use it

00:41:37,810 --> 00:41:46,180
I'm I'm working on storage right so yes

00:41:41,740 --> 00:41:48,670
kubernetes provides a lot of possibility

00:41:46,180 --> 00:41:51,460
to use network storage but if you deploy

00:41:48,670 --> 00:41:54,099
a storage itself I'm pretty sure that

00:41:51,460 --> 00:41:56,980
you should use local disk right local

00:41:54,099 --> 00:41:59,589
SSD or local spinning disk and yet case

00:41:56,980 --> 00:42:01,720
it's it's the same because it's just

00:41:59,589 --> 00:42:05,050
mounted it's actually it's a bind mount

00:42:01,720 --> 00:42:07,630
so no it's typically there is if you use

00:42:05,050 --> 00:42:09,250
in the original way how the a storage

00:42:07,630 --> 00:42:13,530
should be used and it should be the same

00:42:09,250 --> 00:42:17,820
if you start to use NFS under the

00:42:13,530 --> 00:42:19,359
heading for example that's I think that

00:42:17,820 --> 00:42:21,520
performance degradation

00:42:19,359 --> 00:42:24,640
even without the kubernetes right if you

00:42:21,520 --> 00:42:27,250
put everything under a storage system to

00:42:24,640 --> 00:42:30,070
a network file system so but typically

00:42:27,250 --> 00:42:33,910
no in the network there are multiple

00:42:30,070 --> 00:42:36,040
hopes but I didn't notice so we did

00:42:33,910 --> 00:42:38,680
performance tests in kubernetes and on

00:42:36,040 --> 00:42:41,140
kubernetes and all of the problems were

00:42:38,680 --> 00:42:43,750
bigger than this overhead so the

00:42:41,140 --> 00:42:51,060
problems were independent from the

00:42:43,750 --> 00:42:51,060
environments thank you any order

00:42:55,420 --> 00:43:00,050
hello we've been working with

00:42:58,250 --> 00:43:04,340
Hortonworks and with somebody for a long

00:43:00,050 --> 00:43:11,930
time yeah it's a it's funny to to show

00:43:04,340 --> 00:43:14,090
how many it's fine yeah it's funny to

00:43:11,930 --> 00:43:17,510
see how how many tricks are inside

00:43:14,090 --> 00:43:20,230
Hadoop and environments I mean when you

00:43:17,510 --> 00:43:24,560
land the process the process itself

00:43:20,230 --> 00:43:27,140
knows if the data is close to him and in

00:43:24,560 --> 00:43:29,840
the in this kind of scenarios he goes

00:43:27,140 --> 00:43:31,310
directly to the to the disk itself so in

00:43:29,840 --> 00:43:33,890
inducing short circuits and his

00:43:31,310 --> 00:43:37,609
constants so when when I see the

00:43:33,890 --> 00:43:39,920
kubernetes approach I have a lot of

00:43:37,609 --> 00:43:43,340
doubts about this kind of affinities and

00:43:39,920 --> 00:43:44,750
these kind of tricks and so yeah what's

00:43:43,340 --> 00:43:47,180
your opinion surround it

00:43:44,750 --> 00:43:49,190
yeah there are multiple questions here

00:43:47,180 --> 00:43:51,800
so this is not an embody trick actually

00:43:49,190 --> 00:43:54,109
this is a good old Hadoop trick to do

00:43:51,800 --> 00:43:58,520
the short circuit read from the

00:43:54,109 --> 00:43:59,720
execution to the storage and let's talk

00:43:58,520 --> 00:44:02,480
about first memory

00:43:59,720 --> 00:44:04,700
so there are some additional values from

00:44:02,480 --> 00:44:06,589
the ombré which are which were not

00:44:04,700 --> 00:44:10,970
mentioned here for example logging

00:44:06,589 --> 00:44:13,160
monitoring all of these but I think the

00:44:10,970 --> 00:44:15,080
benefit to use the cloud native

00:44:13,160 --> 00:44:17,720
environments that you can get

00:44:15,080 --> 00:44:20,630
out-of-the-box more powerful tools from

00:44:17,720 --> 00:44:22,520
a toes grow fauna or anything so there

00:44:20,630 --> 00:44:25,280
are a lot of tools which can be easily

00:44:22,520 --> 00:44:26,960
used if they are integrated and the

00:44:25,280 --> 00:44:30,020
integration usually is just a few lines

00:44:26,960 --> 00:44:32,030
of code so that's the that's some

00:44:30,020 --> 00:44:34,730
features from the armory which can be

00:44:32,030 --> 00:44:36,349
replaced the next question yeah I'm

00:44:34,730 --> 00:44:39,470
talking sorry but I'm talking about the

00:44:36,349 --> 00:44:41,330
approach of Hadoop ecosystem itself in

00:44:39,470 --> 00:44:44,450
which they yeah being on the same box

00:44:41,330 --> 00:44:46,369
it's a quite important yes so the data

00:44:44,450 --> 00:44:48,080
locality itself it's I think is a

00:44:46,369 --> 00:44:50,630
separated question so there could be

00:44:48,080 --> 00:44:52,609
other tricks and some of the tricks

00:44:50,630 --> 00:44:57,230
should be working container data

00:44:52,609 --> 00:45:00,530
locality it's it can be solved but what

00:44:57,230 --> 00:45:06,470
we see that a lot of customers would

00:45:00,530 --> 00:45:08,059
like to create separated execution and

00:45:06,470 --> 00:45:09,650
storage cluster and wouldn't like to

00:45:08,059 --> 00:45:12,349
use the little opportunity at all

00:45:09,650 --> 00:45:14,779
because they have a very very fast

00:45:12,349 --> 00:45:17,119
Network I'm not sure if this is the best

00:45:14,779 --> 00:45:21,079
approach all the time but this is the

00:45:17,119 --> 00:45:22,789
movement where there's a storage so the

00:45:21,079 --> 00:45:26,269
customers would like to manage the

00:45:22,789 --> 00:45:27,949
storage in a in a separated way anyway

00:45:26,269 --> 00:45:29,719
in this case it's not a question so

00:45:27,949 --> 00:45:31,130
that's the data locality it's a very

00:45:29,719 --> 00:45:33,380
tricky question

00:45:31,130 --> 00:45:35,599
by default it this is the reason why is

00:45:33,380 --> 00:45:40,449
it not supported but I have seen some

00:45:35,599 --> 00:45:43,789
demos where the spark itself modified to

00:45:40,449 --> 00:45:45,619
support data locality on kubernetes on

00:45:43,789 --> 00:45:48,140
top of some annotations so it's possible

00:45:45,619 --> 00:45:50,359
but it's it's more tricky and in yarn

00:45:48,140 --> 00:45:54,170
it's not supported at all I think inside

00:45:50,359 --> 00:45:56,900
containers so but I think they're real

00:45:54,170 --> 00:45:58,249
the others so that's one specific very

00:45:56,900 --> 00:45:59,719
hard question so it's a very good

00:45:58,249 --> 00:46:05,150
question but I think there are a lot of

00:45:59,719 --> 00:46:07,729
other tricks which work as before but

00:46:05,150 --> 00:46:10,670
yeah the UM the advantage of the web

00:46:07,729 --> 00:46:12,799
armory is that it has a lot of time

00:46:10,670 --> 00:46:14,959
behind them right it learned a lot of

00:46:12,799 --> 00:46:17,269
things so right if I would just create

00:46:14,959 --> 00:46:19,640
something locally it's not equivalent

00:46:17,269 --> 00:46:23,179
from business point of view because I

00:46:19,640 --> 00:46:25,969
didn't run it in ten years or something

00:46:23,179 --> 00:46:28,519
like this so yeah but I think the same

00:46:25,969 --> 00:46:31,489
can be achieved with enough resources in

00:46:28,519 --> 00:46:33,880
different way after a while yeah okay

00:46:31,489 --> 00:46:33,880
thank you

00:46:34,359 --> 00:46:37,569
any other

00:46:41,390 --> 00:46:48,920
I guess it's a similar question but but

00:46:46,910 --> 00:46:53,390
for example I used helmet charts to

00:46:48,920 --> 00:46:55,930
deploy a guru on kubernetes and some of

00:46:53,390 --> 00:47:00,380
the problems I had were with things like

00:46:55,930 --> 00:47:03,799
guru using NTP for transactional

00:47:00,380 --> 00:47:05,539
consistency and being cloud native you

00:47:03,799 --> 00:47:07,640
know adds that extra layer away from the

00:47:05,539 --> 00:47:08,930
system which means that I had a lot of

00:47:07,640 --> 00:47:11,900
trouble I had to used the hybrid clock

00:47:08,930 --> 00:47:13,489
and that you know lost consistency did

00:47:11,900 --> 00:47:15,920
you experience any of those problems and

00:47:13,489 --> 00:47:19,220
how do you think we should solve that

00:47:15,920 --> 00:47:21,200
for especially for database you see a

00:47:19,220 --> 00:47:22,640
different time inside the containers and

00:47:21,200 --> 00:47:25,160
also the containers

00:47:22,640 --> 00:47:28,460
exactly I haven't seen this one but

00:47:25,160 --> 00:47:30,970
there could be so you know that in an

00:47:28,460 --> 00:47:33,259
HDFS storage it's not it's it's more

00:47:30,970 --> 00:47:34,789
database specific I think there should

00:47:33,259 --> 00:47:36,980
be I had to be honest I don't know I

00:47:34,789 --> 00:47:39,619
think there should be some methods to

00:47:36,980 --> 00:47:41,869
mount the right / pros so there should

00:47:39,619 --> 00:47:45,440
be the same time I I don't understand

00:47:41,869 --> 00:47:47,690
why did so if the NTP synchronized on

00:47:45,440 --> 00:47:50,089
the note I think the same time should be

00:47:47,690 --> 00:47:51,849
visible in the containers no I think

00:47:50,089 --> 00:47:59,289
there's a specific problem with the way

00:47:51,849 --> 00:48:02,720
maybe you can ask yeah yeah any order

00:47:59,289 --> 00:48:06,279
okay so let's thank they speak again

00:48:02,720 --> 00:48:06,279
yeah thank you

00:48:07,210 --> 00:48:09,270

YouTube URL: https://www.youtube.com/watch?v=QIWQlKaiQjg


