Title: CCCNA18 - Nicolas Vazquez - Bypass CloudStack secondary Storage
Publication date: 2018-11-20
Playlist: ApacheCon North America 2018
Description: 
	Nicolas Vazquez - Bypass CloudStack secondary Storage

A presentation from the Cloudstack Collaboration Conference, a part of ApacheCon North America 2018 in Montreal

http://ca.cloudstackcollab.org/
http://apachecon.com/acna18
Captions: 
	00:00:04,279 --> 00:00:11,129
all right I guess it's time to start

00:00:08,150 --> 00:00:13,610
welcome guys thank you for for shining

00:00:11,129 --> 00:00:16,710
the stop it is going to be about

00:00:13,610 --> 00:00:20,070
bypassing secondary storage for VM

00:00:16,710 --> 00:00:22,259
deployments in cloud stack so this is my

00:00:20,070 --> 00:00:26,460
first conference the first one I'm

00:00:22,259 --> 00:00:28,349
attending I am Nicholas Vasquez and yeah

00:00:26,460 --> 00:00:31,710
I would like to start by introducing

00:00:28,349 --> 00:00:34,189
myself a little bit for YouTube to get

00:00:31,710 --> 00:00:34,189
to know me

00:00:58,410 --> 00:01:02,030
so if this was working

00:01:05,290 --> 00:01:08,100
yeah

00:01:12,470 --> 00:01:15,610
yeah sorry

00:01:18,430 --> 00:01:24,740
sorry for the inconvenience yes

00:01:21,590 --> 00:01:28,130
mentioning Nicolas basket I live in

00:01:24,740 --> 00:01:30,710
India I am based in Tahrir which is the

00:01:28,130 --> 00:01:34,790
capital city of you know what otherwise

00:01:30,710 --> 00:01:39,500
a small country in the south east coast

00:01:34,790 --> 00:01:42,140
of Latin America and it's the small red

00:01:39,500 --> 00:01:44,840
dot there on the map which is located

00:01:42,140 --> 00:01:49,220
between Joseon countries which are

00:01:44,840 --> 00:01:53,360
Argentina and Brazil and yeah so as I

00:01:49,220 --> 00:01:56,780
work as a software engineer for say blue

00:01:53,360 --> 00:01:59,450
I have joined the company last year and

00:01:56,780 --> 00:02:03,830
before that I've been working as a

00:01:59,450 --> 00:02:06,170
developer for six years and I also been

00:02:03,830 --> 00:02:09,649
involved in clouds taxes a couple of

00:02:06,170 --> 00:02:12,530
years working for other companies have

00:02:09,649 --> 00:02:16,010
been started developing features and

00:02:12,530 --> 00:02:20,840
getting involved with the community so

00:02:16,010 --> 00:02:24,400
that was serious in 2015 and after that

00:02:20,840 --> 00:02:25,989
I become I became a commuter in 2016 so

00:02:24,400 --> 00:02:30,290
sorry

00:02:25,989 --> 00:02:33,530
I'm not a native English speaker as you

00:02:30,290 --> 00:02:36,200
know while I am Spanish native speaker

00:02:33,530 --> 00:02:41,060
so I excuse myself in advance for any

00:02:36,200 --> 00:02:44,690
mistake I could have so this talk is

00:02:41,060 --> 00:02:47,440
going to be about a new feature which we

00:02:44,690 --> 00:02:51,440
we have been working on I've been

00:02:47,440 --> 00:02:57,260
working on its development this feature

00:02:51,440 --> 00:03:01,070
is available in version 4.2 11.1 and it

00:02:57,260 --> 00:03:04,430
is a way to bypass secondary storage

00:03:01,070 --> 00:03:07,130
while you are trying to be prepared and

00:03:04,430 --> 00:03:08,700
register templates and vices

00:03:07,130 --> 00:03:12,660
so

00:03:08,700 --> 00:03:17,400
I'm gonna try to show you the advantages

00:03:12,660 --> 00:03:21,810
of doing that in yeah this feature it's

00:03:17,400 --> 00:03:25,170
been implemented in kayvyun as a

00:03:21,810 --> 00:03:28,310
starting point in yeah we'll really try

00:03:25,170 --> 00:03:32,280
to see which improvements can bring on

00:03:28,310 --> 00:03:36,120
performance and we'll see that so well

00:03:32,280 --> 00:03:39,780
start by first even a brief introduction

00:03:36,120 --> 00:03:42,480
for those who are not used to the

00:03:39,780 --> 00:03:45,870
template and ISOs registration process

00:03:42,480 --> 00:03:48,900
and then I'll go to the to this new

00:03:45,870 --> 00:03:51,989
approach with templates a nice

00:03:48,900 --> 00:03:55,560
illustration after that I'm going to

00:03:51,989 --> 00:03:58,530
explain how VM deployments are treated

00:03:55,560 --> 00:04:01,560
with this new feature and the additions

00:03:58,530 --> 00:04:03,930
of the KB I mentioned and lastly we're

00:04:01,560 --> 00:04:07,549
gonna talk about the Mettling supports

00:04:03,930 --> 00:04:11,790
which is also introduced by this feature

00:04:07,549 --> 00:04:14,430
so yeah let me start by briefly

00:04:11,790 --> 00:04:18,299
introducing the templates and Isis

00:04:14,430 --> 00:04:20,250
registration so as I see many of you

00:04:18,299 --> 00:04:20,950
guys in the community are here and you

00:04:20,250 --> 00:04:25,180
are ready

00:04:20,950 --> 00:04:28,600
really used to to this process but for

00:04:25,180 --> 00:04:31,180
someone who is not in Jakarta I would

00:04:28,600 --> 00:04:34,420
like to first start introducing how this

00:04:31,180 --> 00:04:38,440
works so to register a template or Eliza

00:04:34,420 --> 00:04:41,700
the user has to provide a URL which is

00:04:38,440 --> 00:04:45,610
the URL for that template and then

00:04:41,700 --> 00:04:50,860
download task is then sent to secondary

00:04:45,610 --> 00:04:54,310
p.m. which it's delegated to download on

00:04:50,860 --> 00:04:57,910
that template from the URL and store it

00:04:54,310 --> 00:05:00,970
into secondary storage so once that

00:04:57,910 --> 00:05:05,140
template gets downloaded a secondary

00:05:00,970 --> 00:05:09,280
storage it becames it becomes useful so

00:05:05,140 --> 00:05:12,580
in this diagram I tried to represent how

00:05:09,280 --> 00:05:14,140
it is how it has been working for

00:05:12,580 --> 00:05:18,250
several years

00:05:14,140 --> 00:05:23,440
the usual templates registration process

00:05:18,250 --> 00:05:27,520
so yeah we can see that in the secondary

00:05:23,440 --> 00:05:30,430
storage PM is the one which has the task

00:05:27,520 --> 00:05:33,280
to download the template and then that

00:05:30,430 --> 00:05:37,240
template gets stored into secondary

00:05:33,280 --> 00:05:39,130
storage so when a user would like to

00:05:37,240 --> 00:05:41,080
deploy a beer from that template and

00:05:39,130 --> 00:05:43,570
that template is not on primary storage

00:05:41,080 --> 00:05:47,380
we're going to copy that template into

00:05:43,570 --> 00:05:50,650
private storage so what I try to

00:05:47,380 --> 00:05:55,690
represent on that equation below the

00:05:50,650 --> 00:05:57,760
diagram is the time which takes two to

00:05:55,690 --> 00:06:01,330
make a deployment from scratch and

00:05:57,760 --> 00:06:03,370
you'll see that there's a time to

00:06:01,330 --> 00:06:06,700
download the template the first time

00:06:03,370 --> 00:06:09,220
into secondary storage then

00:06:06,700 --> 00:06:11,650
well there's an idle time in which the

00:06:09,220 --> 00:06:14,530
user did not want to do anything with

00:06:11,650 --> 00:06:18,700
the template but we considered that and

00:06:14,530 --> 00:06:20,560
then whenever he wants to to use it we

00:06:18,700 --> 00:06:26,040
need to copy that template into primary

00:06:20,560 --> 00:06:29,040
storage and that involves a network

00:06:26,040 --> 00:06:32,890
copying uh from that template to

00:06:29,040 --> 00:06:36,940
secondary enterprise so what we would

00:06:32,890 --> 00:06:39,540
like to chew a boy is to use in

00:06:36,940 --> 00:06:43,420
secondary storage in this equation and

00:06:39,540 --> 00:06:48,250
what we are presenting today is anyway

00:06:43,420 --> 00:06:54,250
to just sending these down don't dust

00:06:48,250 --> 00:06:58,330
directly to the host so in this way we

00:06:54,250 --> 00:07:02,620
will see that we get reduced of that

00:06:58,330 --> 00:07:05,260
time so whenever the template needs to

00:07:02,620 --> 00:07:09,130
be downloaded on primary storage it gets

00:07:05,260 --> 00:07:13,930
there without the secondary storage

00:07:09,130 --> 00:07:17,760
cache so this is the new approach that

00:07:13,930 --> 00:07:23,590
we are I am presenting with this feature

00:07:17,760 --> 00:07:27,850
to make a brief summary we are by this

00:07:23,590 --> 00:07:30,370
approach what the what it is in short is

00:07:27,850 --> 00:07:33,190
that the template gets into primary

00:07:30,370 --> 00:07:35,980
storage whenever it's necessary and it

00:07:33,190 --> 00:07:39,220
becomes it becomes usable for users

00:07:35,980 --> 00:07:41,770
immediately after it gets registered and

00:07:39,220 --> 00:07:44,980
I'm gonna talk about that in a few

00:07:41,770 --> 00:07:47,010
seconds another remark is that it is

00:07:44,980 --> 00:07:51,230
only available for

00:07:47,010 --> 00:07:55,560
at the moment and if you want to try it

00:07:51,230 --> 00:08:00,630
it is available from Caltech 4.11 dot

00:07:55,560 --> 00:08:05,790
wine or latest versions so let me now

00:08:00,630 --> 00:08:10,650
show you how it is not working in a high

00:08:05,790 --> 00:08:14,090
level so but what we now are doing is

00:08:10,650 --> 00:08:18,870
whenever the the template gets register

00:08:14,090 --> 00:08:24,510
the there is a new check performed by

00:08:18,870 --> 00:08:28,320
the host so we delegate a task to to the

00:08:24,510 --> 00:08:32,490
host in order to verify that the URL is

00:08:28,320 --> 00:08:36,600
reachable so in order to avoid failing

00:08:32,490 --> 00:08:39,360
deployments because if the template has

00:08:36,600 --> 00:08:42,479
to be registered and then a user wants

00:08:39,360 --> 00:08:46,320
to deploy from that template but but the

00:08:42,479 --> 00:08:51,210
URL is not reachable then it will have a

00:08:46,320 --> 00:08:54,440
failure and our wage to try to prevent

00:08:51,210 --> 00:08:58,080
that is to randomly select a house and

00:08:54,440 --> 00:09:02,970
delegate the the task to verify that URL

00:08:58,080 --> 00:09:05,850
so in this diagram we'll see that we

00:09:02,970 --> 00:09:08,150
need a way we have provided a way to

00:09:05,850 --> 00:09:12,890
tell the host that it should look for

00:09:08,150 --> 00:09:15,960
the template URL and if it is successful

00:09:12,890 --> 00:09:18,390
then CloudStack needs to update its

00:09:15,960 --> 00:09:22,260
database to be consistent with the

00:09:18,390 --> 00:09:26,250
template registration so the difference

00:09:22,260 --> 00:09:29,760
from what was the latest the usual

00:09:26,250 --> 00:09:32,940
approach is that the register template

00:09:29,760 --> 00:09:35,820
and precious terrorised awake guys were

00:09:32,940 --> 00:09:39,210
extended they accept now a new boolean

00:09:35,820 --> 00:09:41,250
parameter which is direct download and

00:09:39,210 --> 00:09:43,020
you can see it in the UI it is

00:09:41,250 --> 00:09:46,089
represented with a new check box

00:09:43,020 --> 00:09:50,529
only when the KVM hyper

00:09:46,089 --> 00:09:54,490
selected and when that checkbox is

00:09:50,529 --> 00:09:57,279
clicked you'll also be we are also

00:09:54,490 --> 00:09:59,970
displaying the checksum this is very

00:09:57,279 --> 00:10:02,199
important because as we are now

00:09:59,970 --> 00:10:05,620
downloading directly into a primary

00:10:02,199 --> 00:10:08,199
storage it provides a way to to ensure

00:10:05,620 --> 00:10:12,009
that the that template is the one that

00:10:08,199 --> 00:10:15,819
we want so the as you may know the

00:10:12,009 --> 00:10:20,019
checksum its compute after the file is

00:10:15,819 --> 00:10:22,209
downloaded and if it is compared to the

00:10:20,019 --> 00:10:26,499
one that the user provides just in order

00:10:22,209 --> 00:10:32,249
to prevent corrupt files so how close

00:10:26,499 --> 00:10:35,259
that is expecting this chicken is it is

00:10:32,249 --> 00:10:37,720
mentioned there its format is the

00:10:35,259 --> 00:10:42,490
algorithm between braces and then the

00:10:37,720 --> 00:10:45,839
hash the checksum hash the available the

00:10:42,490 --> 00:10:51,120
availa available algorithms are md5

00:10:45,839 --> 00:10:55,569
shaft wealth and sha-256 at the moment

00:10:51,120 --> 00:10:58,990
so as I mentioned when the user now

00:10:55,569 --> 00:11:02,709
registers the template selecting the the

00:10:58,990 --> 00:11:05,709
dynamic download checkbox or setting the

00:11:02,709 --> 00:11:08,769
direct download parameter to true

00:11:05,709 --> 00:11:11,439
even now cloud stock will now select a

00:11:08,769 --> 00:11:14,079
host randomly and it would try three

00:11:11,439 --> 00:11:17,709
times to get to reach that template URL

00:11:14,079 --> 00:11:19,959
so if after those three times the the

00:11:17,709 --> 00:11:23,470
template can be reached then their

00:11:19,959 --> 00:11:25,089
registration fails and if it is

00:11:23,470 --> 00:11:28,689
successful then

00:11:25,089 --> 00:11:31,930
to be consistent with CloudStack and to

00:11:28,689 --> 00:11:36,100
other nutrient should be reference table

00:11:31,930 --> 00:11:39,579
to template store wrath table by adding

00:11:36,100 --> 00:11:45,660
this in this new download state which is

00:11:39,579 --> 00:11:49,180
by path in the estate set it to ready so

00:11:45,660 --> 00:11:52,779
by doing that whenever we want to deploy

00:11:49,180 --> 00:11:56,019
and we have indicated that we want to

00:11:52,779 --> 00:11:59,829
deploy from a template which is bypassed

00:11:56,019 --> 00:12:03,819
secondary storage what cloud stack is

00:11:59,829 --> 00:12:06,490
doing is using a new manager which is

00:12:03,819 --> 00:12:09,610
interacting with the host directly and

00:12:06,490 --> 00:12:12,399
with the management server so it would

00:12:09,610 --> 00:12:15,160
first look for entries on the templates

00:12:12,399 --> 00:12:17,800
progressive the templates poor graph

00:12:15,160 --> 00:12:20,860
table is a table for reference for

00:12:17,800 --> 00:12:22,990
templates in primary storage so if it

00:12:20,860 --> 00:12:25,540
does not find a reference for that

00:12:22,990 --> 00:12:27,779
template into primary storage in that

00:12:25,540 --> 00:12:31,569
template is to be downloaded directly

00:12:27,779 --> 00:12:34,870
into primary start it needs to choose

00:12:31,569 --> 00:12:38,110
unloaded so it sends a command to the

00:12:34,870 --> 00:12:42,220
host to tell them that that template

00:12:38,110 --> 00:12:45,939
should be downloaded from the URL into

00:12:42,220 --> 00:12:49,720
primary storage so once that is done

00:12:45,939 --> 00:12:53,050
then the host sends its answers back and

00:12:49,720 --> 00:12:56,829
the templates tariffs our table is

00:12:53,050 --> 00:12:58,629
updated so and then the usual deployment

00:12:56,829 --> 00:13:02,499
process continues the same as it was

00:12:58,629 --> 00:13:04,749
before so we need to do this in order to

00:13:02,499 --> 00:13:05,550
ensure that the template is available at

00:13:04,749 --> 00:13:12,060
the

00:13:05,550 --> 00:13:16,050
time so that download manager director

00:13:12,060 --> 00:13:18,240
loan manager in orange is a new this new

00:13:16,050 --> 00:13:21,959
manager which is a pluggable solution

00:13:18,240 --> 00:13:25,440
and it's used when the volumes and

00:13:21,959 --> 00:13:28,860
isil's are prepared so why it's

00:13:25,440 --> 00:13:31,500
applicable solution because as you can

00:13:28,860 --> 00:13:34,110
see there it supports multiple protocols

00:13:31,500 --> 00:13:37,950
at the moment it supports and fast

00:13:34,110 --> 00:13:41,310
downloads HTTP and HTTPS and methylenes

00:13:37,950 --> 00:13:46,950
but there it is possible to extend them

00:13:41,310 --> 00:13:51,269
with more protocols so yeah it has the

00:13:46,950 --> 00:13:54,300
ability to explicitly tell kayvyun host

00:13:51,269 --> 00:13:56,880
to download templates into a specific

00:13:54,300 --> 00:14:00,779
storage pool and it also has the ability

00:13:56,880 --> 00:14:05,250
to upload certificates into those hosts

00:14:00,779 --> 00:14:08,550
the certificates are used for HTTP

00:14:05,250 --> 00:14:12,200
downloads and it also has the ability to

00:14:08,550 --> 00:14:17,820
set HTTP headers use for this tolerant

00:14:12,200 --> 00:14:21,720
by setting the the VM detail VM template

00:14:17,820 --> 00:14:24,720
details table prepending the world HTTP

00:14:21,720 --> 00:14:28,740
header as shown on the slides and then

00:14:24,720 --> 00:14:32,130
the name of the of the HTTP header in

00:14:28,740 --> 00:14:35,730
that example we wanted to pass content

00:14:32,130 --> 00:14:38,160
type and we have added these values on

00:14:35,730 --> 00:14:40,620
the cloud stack database so our new

00:14:38,160 --> 00:14:44,250
manager will pick those up and send them

00:14:40,620 --> 00:14:47,790
to the hosts for their for the HTTP

00:14:44,250 --> 00:14:49,949
dominant so as I also mentioned the

00:14:47,790 --> 00:14:53,760
there is a way to provide certificates

00:14:49,949 --> 00:14:56,130
to those first and it is through a new

00:14:53,760 --> 00:15:01,070
API which is a blue direct upload

00:14:56,130 --> 00:15:03,269
certificate what they basically do is

00:15:01,070 --> 00:15:05,310
letting the hosts of their own

00:15:03,269 --> 00:15:10,490
certificate into their cloud

00:15:05,310 --> 00:15:15,000
shakiest start which is a pistol file

00:15:10,490 --> 00:15:19,680
introduced by the CH framework and it is

00:15:15,000 --> 00:15:24,029
used for HTTP very downloads so now let

00:15:19,680 --> 00:15:27,870
me show you the new edition seems to be

00:15:24,029 --> 00:15:30,480
the KPI measures right so now the can be

00:15:27,870 --> 00:15:33,560
I mentioned this is receiving new

00:15:30,480 --> 00:15:37,920
directive loads commands which are for

00:15:33,560 --> 00:15:41,550
HTTP HTTPS and fsor or metalloids

00:15:37,920 --> 00:15:45,240
so each command is is executed by a new

00:15:41,550 --> 00:15:47,760
downloader and each downloader as I

00:15:45,240 --> 00:15:51,870
mentioned before it's a pluggable

00:15:47,760 --> 00:15:55,170
solution so it can if we want to extend

00:15:51,870 --> 00:15:57,839
this functionality for new protocols we

00:15:55,170 --> 00:16:00,180
need to make sure that we provide we

00:15:57,839 --> 00:16:03,830
implement these methods to download

00:16:00,180 --> 00:16:07,740
templates into a specific storage pool

00:16:03,830 --> 00:16:10,530
to extract and install them to get the

00:16:07,740 --> 00:16:15,830
information after it is installed and to

00:16:10,530 --> 00:16:18,780
validate the checks so after it it gets

00:16:15,830 --> 00:16:22,890
at the moment the the our own shallow

00:16:18,780 --> 00:16:26,430
base but initially for metallic

00:16:22,890 --> 00:16:32,460
terminals we were using the area to

00:16:26,430 --> 00:16:34,980
binaries but to avoid some conflicts

00:16:32,460 --> 00:16:37,220
with the Apache licensing we have

00:16:34,980 --> 00:16:42,780
decided to move it to a shadow base

00:16:37,220 --> 00:16:44,100
implementation for metals so I've been

00:16:42,780 --> 00:16:47,250
talking about metallics

00:16:44,100 --> 00:16:51,950
but let me now show you what a meta link

00:16:47,250 --> 00:16:57,930
is what it looks like it is basically an

00:16:51,950 --> 00:17:01,750
XML file which contains some URL in

00:16:57,930 --> 00:17:06,010
charge as you can see it has two

00:17:01,750 --> 00:17:09,819
and well it can it can have a priority

00:17:06,010 --> 00:17:13,270
property so it would work as the lowest

00:17:09,819 --> 00:17:17,140
priority number the highest priority it

00:17:13,270 --> 00:17:19,660
has so our Java based downloader for

00:17:17,140 --> 00:17:22,510
metallics is now considering these

00:17:19,660 --> 00:17:26,050
priorities and it will iterate through

00:17:22,510 --> 00:17:28,420
this URL touch on the highest priorities

00:17:26,050 --> 00:17:31,360
first and it will try to download the

00:17:28,420 --> 00:17:36,010
template so if it fails for the first

00:17:31,360 --> 00:17:40,179
one it will try to the second one and we

00:17:36,010 --> 00:17:44,260
can also set the checksum as you can see

00:17:40,179 --> 00:17:49,720
it hash hash tag there it is also

00:17:44,260 --> 00:17:53,970
possible to be provided so it is now

00:17:49,720 --> 00:17:58,330
supported for both direct downloads or

00:17:53,970 --> 00:18:01,600
usual ssbm downloads so what that means

00:17:58,330 --> 00:18:04,110
is that for KVM hypervisor you are now

00:18:01,600 --> 00:18:09,760
able to register meta link

00:18:04,110 --> 00:18:12,610
Mettling template so I'm gonna do a

00:18:09,760 --> 00:18:16,600
brief demo after this but we like to

00:18:12,610 --> 00:18:18,640
mention some some points for further

00:18:16,600 --> 00:18:21,429
reading you can find the feature

00:18:18,640 --> 00:18:24,360
specification in this link and you can

00:18:21,429 --> 00:18:31,230
find the yards from which this was

00:18:24,360 --> 00:18:31,230
introduced so let me briefly go to them

00:18:32,990 --> 00:18:42,150
okay yeah my small local environment

00:18:37,440 --> 00:18:47,210
with one host here so I'm gonna show you

00:18:42,150 --> 00:18:55,160
how to call this work so I'm gonna try

00:18:47,210 --> 00:18:55,160
registering the Martian email template

00:19:03,429 --> 00:19:10,089
so now let me show you yeah I'm telling

00:19:05,919 --> 00:19:13,509
the the host logs at the moment so I

00:19:10,089 --> 00:19:16,629
would try to register a template also

00:19:13,509 --> 00:19:19,779
user and the same goes everything I have

00:19:16,629 --> 00:19:22,839
mentioned with analogies for ice is Isis

00:19:19,779 --> 00:19:25,719
right so for the sake of simplicity I'm

00:19:22,839 --> 00:19:30,219
gonna do it with template but let me

00:19:25,719 --> 00:19:34,029
just start precious thing and we can see

00:19:30,219 --> 00:19:37,779
that yeah I'd first checking the URL on

00:19:34,029 --> 00:19:42,159
the host so this this command came to

00:19:37,779 --> 00:19:46,389
the host does that check URL command in

00:19:42,159 --> 00:19:50,139
after it check it it registered the

00:19:46,389 --> 00:19:53,440
template successfully so if we now check

00:19:50,139 --> 00:19:56,529
the template we'll see it's usable and

00:19:53,440 --> 00:19:57,999
we'll also see it status is bypassed

00:19:56,529 --> 00:20:03,899
secondary storage

00:19:57,999 --> 00:20:10,799
so after I registered and now I want to

00:20:03,899 --> 00:20:14,229
do a deployment frames and I'm not gonna

00:20:10,799 --> 00:20:18,849
fully show you the behaviors it may have

00:20:14,229 --> 00:20:23,879
awry as I am from my cell phone but let

00:20:18,849 --> 00:20:23,879
me show you the logs on the house

00:20:30,820 --> 00:20:39,610
yes oh we see that it is downloading the

00:20:33,790 --> 00:20:43,150
template from this URL so into primary

00:20:39,610 --> 00:20:45,640
storage so yeah this would take time in

00:20:43,150 --> 00:20:50,320
because more my connectivity issues but

00:20:45,640 --> 00:20:52,680
in yeah in this is the way to work with

00:20:50,320 --> 00:20:57,220
it oh sorry

00:20:52,680 --> 00:21:01,270
learn everything no children the last

00:20:57,220 --> 00:21:03,670
life in which I was so I now will

00:21:01,270 --> 00:21:07,180
encourage you to to use this feature and

00:21:03,670 --> 00:21:10,800
to provide feedback and I open the the

00:21:07,180 --> 00:21:10,800
room for any questions that you may have

00:21:16,470 --> 00:21:19,130
sorry

00:21:25,820 --> 00:21:28,690
yes

00:21:29,660 --> 00:21:36,570
yes so so the idea is to avoid

00:21:33,620 --> 00:21:40,230
downloaded it once from secondary

00:21:36,570 --> 00:21:42,690
storage storing it there and then have

00:21:40,230 --> 00:21:46,050
to copy the template into primary so

00:21:42,690 --> 00:21:49,080
imagine a big template which you have to

00:21:46,050 --> 00:21:50,850
download you from the internet into

00:21:49,080 --> 00:21:55,320
secondary storage and then you have to

00:21:50,850 --> 00:21:58,950
again copy through your network in again

00:21:55,320 --> 00:22:03,420
to primary storage so yeah the the ideas

00:21:58,950 --> 00:22:05,610
to directly directly go to primary

00:22:03,420 --> 00:22:08,720
storage without having to copy things

00:22:05,610 --> 00:22:08,720
this time

00:22:13,680 --> 00:22:24,500
and the time of registration gets ya

00:22:19,650 --> 00:22:24,500
after it gets down sorry

00:22:28,539 --> 00:22:33,659
does it ever like savers and since that

00:22:30,849 --> 00:22:33,659
same time Percy

00:22:34,840 --> 00:22:37,840
No

00:22:38,570 --> 00:22:44,510
yeah it would try to avoid using second

00:22:41,870 --> 00:22:47,810
registered so if you mark it for direct

00:22:44,510 --> 00:22:50,150
number four die rectangle in with

00:22:47,810 --> 00:22:53,330
anything if it's not available on that

00:22:50,150 --> 00:22:55,640
storage pool you download it again so if

00:22:53,330 --> 00:22:58,370
you already have it then you you just

00:22:55,640 --> 00:23:02,080
don't need to download it again and you

00:22:58,370 --> 00:23:02,080
don't use secondary storage at all

00:23:58,520 --> 00:24:01,520
yeah

00:24:14,470 --> 00:24:17,130
by Oh

00:24:27,470 --> 00:24:30,879
I'll face my

00:24:36,429 --> 00:24:38,460
I

00:24:50,750 --> 00:24:57,280
don't understand

00:24:52,730 --> 00:24:57,280
all that they're using what they wear

00:24:57,390 --> 00:25:00,390
yeah

00:25:10,440 --> 00:25:21,580
why cut away what's right no you should

00:25:19,330 --> 00:25:25,690
provide the URL yeah

00:25:21,580 --> 00:25:31,419
so in the URL you went to a mentally

00:25:25,690 --> 00:25:34,989
yeah so yeah it never accepts the limit

00:25:31,419 --> 00:25:36,700
of the extension now it's the same

00:25:34,989 --> 00:25:39,299
process but with the metallic or

00:25:36,700 --> 00:25:39,299
extension

00:26:17,380 --> 00:26:21,750
we in the other we should

00:26:25,669 --> 00:26:28,389
so say for instance

00:26:35,120 --> 00:26:44,700
yeah

00:26:37,440 --> 00:26:47,750
so what this young person so with the

00:26:44,700 --> 00:26:53,700
template storage for reference

00:26:47,750 --> 00:26:57,000
make sure you with this each time we we

00:26:53,700 --> 00:26:59,550
download the template we make sure we we

00:26:57,000 --> 00:27:01,470
update the database so the next time

00:26:59,550 --> 00:27:04,110
we'll check the database there will be

00:27:01,470 --> 00:27:08,300
an entry there so we don't download it

00:27:04,110 --> 00:27:08,300
again that's that's the way

00:27:35,920 --> 00:27:39,049
[Music]

00:27:45,920 --> 00:27:47,950
Oh

00:27:50,029 --> 00:27:57,969
so their community okay what lesson

00:27:55,639 --> 00:27:57,969
question

00:28:16,120 --> 00:28:25,450
if you can use me oh okay yeah you can

00:28:21,750 --> 00:28:29,400
so you can register templates a super

00:28:25,450 --> 00:28:33,820
registry by just providing the the URL

00:28:29,400 --> 00:28:37,150
so right now it has changed for KVM you

00:28:33,820 --> 00:28:40,860
are now allowed to register metallics -

00:28:37,150 --> 00:28:40,860
if that was your question

00:29:06,090 --> 00:29:12,340
is that it was that your question

00:29:09,360 --> 00:29:16,120
okay you know what we can see right

00:29:12,340 --> 00:29:18,330
after this stuff okay so any any other

00:29:16,120 --> 00:29:18,330
guys

00:29:22,520 --> 00:29:29,260
if you can disable no we but you can

00:29:26,270 --> 00:29:32,630
disable it but in my not selectivities

00:29:29,260 --> 00:29:34,900
this parameter here or not selecting

00:29:32,630 --> 00:29:34,900
this checkbox

00:29:38,700 --> 00:29:43,950
yeah so if you market for diamond

00:29:41,700 --> 00:29:50,100
download app registration time it should

00:29:43,950 --> 00:29:52,590
be there as Assad as a director so yeah

00:29:50,100 --> 00:30:04,680
you need to be sure when you register if

00:29:52,590 --> 00:30:20,670
you wanted for primary story she know so

00:30:04,680 --> 00:30:24,360
you it's also actually the yeah there's

00:30:20,670 --> 00:30:29,480
not an API food that you should update

00:30:24,360 --> 00:30:29,480
the database but yeah it was

00:31:01,970 --> 00:31:09,420
okay any other questions okay so thank

00:31:08,539 --> 00:31:15,599
you

00:31:09,420 --> 00:31:15,599

YouTube URL: https://www.youtube.com/watch?v=C-KqoqqysZY


