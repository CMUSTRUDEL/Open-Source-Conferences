Title: Building high performance microservices in finance with Apache Thrift Randy Abernethy
Publication date: 2019-06-19
Playlist: Apache Roadshow Chicago, 2019
Description: 
	In this talk weâ€™ll look at the ways Apache Thrift can solve performance problems commonly facing next generation applications deployed in performance sensitive capital markets and banking environments. The talk will include practical examples illustrating the construction, performance and resource utilization benefits of Apache Thrift. Apache Thrift is a high-performance cross platform RPC and serialization framework designed to make it possible for organizations to specify interfaces and application wide data structures suitable for serialization and transport over a wide variety of schemes. Due to the unparalleled set of languages supported by Apache Thrift, these interfaces and structs have similar interoperability to REST type services with an order of magnitude improvement in performance. Apache Thrift services are also a perfect fit for container technology, using considerably fewer resources than traditional application server style deployments. Decomposing applications into microservices, packaging them into containers and orchestrating them on systems like Kubernetes can bring great value to an organization; however, it can also take a very fast monolithic application and turn it into a high latency web of slow, resource hungry services. Apache Thrift is a perfect solution to the performance and resource ills of many microservice based endeavors.
Captions: 
	00:00:00,030 --> 00:01:25,759
all right he's going to be talking about

00:01:39,979 --> 00:01:51,030
projects actually started doing our easy

00:01:45,899 --> 00:01:54,090
stuff pretty heavily in 90s and then a

00:01:51,030 --> 00:01:56,430
lot of RPC technologies were really

00:01:54,090 --> 00:01:58,500
brittle and if you needed to change API

00:01:56,430 --> 00:02:03,540
was like rebuild the world total

00:01:58,500 --> 00:02:06,840
disaster and so when I trying to build a

00:02:03,540 --> 00:02:09,610
bunch of new stuff sometime around 2007

00:02:06,840 --> 00:02:12,940
I think it was 2008 I was

00:02:09,610 --> 00:02:15,880
for a better solution than like MSRP C

00:02:12,940 --> 00:02:17,980
or dce/rpc or one of those things and I

00:02:15,880 --> 00:02:20,590
found thrift and I was like holy

00:02:17,980 --> 00:02:22,480
mackerel like this is the Holy Grail

00:02:20,590 --> 00:02:24,910
this is everything that I needed about

00:02:22,480 --> 00:02:27,520
the other RPC stuff we were using fixed

00:02:24,910 --> 00:02:28,870
and I was really so excited

00:02:27,520 --> 00:02:32,430
one thing I was a little bit worried

00:02:28,870 --> 00:02:35,470
about was serialization stuff because

00:02:32,430 --> 00:02:37,690
for some crazy fast things that we were

00:02:35,470 --> 00:02:38,890
doing this all for trading systems and

00:02:37,690 --> 00:02:42,010
stuff or it needed to be really little

00:02:38,890 --> 00:02:43,870
at sea we were doing binary stuff we

00:02:42,010 --> 00:02:45,790
were like grabbing business out of the

00:02:43,870 --> 00:02:47,200
memory slapping them on the wire and

00:02:45,790 --> 00:02:48,760
then picking them up and stick it on the

00:02:47,200 --> 00:02:50,770
memory on the other side so it doesn't

00:02:48,760 --> 00:02:53,050
get much faster than that and you're

00:02:50,770 --> 00:02:56,170
actually doing TWiki stuff too like you

00:02:53,050 --> 00:02:58,239
know especially spaced out and design

00:02:56,170 --> 00:03:01,959
trucks in memory that would work and

00:02:58,239 --> 00:03:05,500
c-sharp and in Java and and then you

00:03:01,959 --> 00:03:07,690
know see native code as well but when I

00:03:05,500 --> 00:03:10,209
saw him I started playing with it I

00:03:07,690 --> 00:03:14,040
found that it was absolutely fast enough

00:03:10,209 --> 00:03:17,110
for most anything and that it had this

00:03:14,040 --> 00:03:18,880
amazing set of evolution features which

00:03:17,110 --> 00:03:26,560
are which really sold me and so I've

00:03:18,880 --> 00:03:29,110
been a teacher since been contributing

00:03:26,560 --> 00:03:30,880
as much as I can with Griffith I RSS but

00:03:29,110 --> 00:03:33,130
this talks about how crisp it's into the

00:03:30,880 --> 00:03:37,570
cloud native thing so cognitive big you

00:03:33,130 --> 00:03:38,950
know push pin check anyway and I kind of

00:03:37,570 --> 00:03:41,380
like this little picture because it

00:03:38,950 --> 00:03:43,150
shows you what happens to your hat when

00:03:41,380 --> 00:03:45,100
you go to loud native right because that

00:03:43,150 --> 00:03:47,350
in case it was mentioning the glass talk

00:03:45,100 --> 00:03:49,120
there are three kind of factors that

00:03:47,350 --> 00:03:50,410
really makes something loud native right

00:03:49,120 --> 00:03:52,360
it's micro service-oriented

00:03:50,410 --> 00:03:54,250
its container packaged and it's

00:03:52,360 --> 00:03:56,080
dynamically orchestrated meaning the

00:03:54,250 --> 00:03:58,840
stateless a part you know is going to be

00:03:56,080 --> 00:04:00,420
around a lot and so you take your app

00:03:58,840 --> 00:04:03,910
that looks like this and you just

00:04:00,420 --> 00:04:06,579
exploded right the API of this thing is

00:04:03,910 --> 00:04:08,079
the same but now there's you know five

00:04:06,579 --> 00:04:10,510
copies of it they're being a little

00:04:08,079 --> 00:04:12,760
balanced and multiplex and stuff and so

00:04:10,510 --> 00:04:14,739
these guys any one of them talk to any

00:04:12,760 --> 00:04:16,760
one of those you don't know this guy

00:04:14,739 --> 00:04:19,580
maybe cause the green guy

00:04:16,760 --> 00:04:22,070
standard API was implemented in 15 you

00:04:19,580 --> 00:04:22,880
know elements over here and same thing

00:04:22,070 --> 00:04:24,530
over here

00:04:22,880 --> 00:04:27,080
so the beauty of bringing this stuff out

00:04:24,530 --> 00:04:29,900
is developer productivity right you want

00:04:27,080 --> 00:04:31,490
to make developers go faster sorry you

00:04:29,900 --> 00:04:33,140
can do that there two minutes right they

00:04:31,490 --> 00:04:34,190
operate at a certain clock speed they

00:04:33,140 --> 00:04:36,200
can't go any faster

00:04:34,190 --> 00:04:37,580
what you can do is you can remove the

00:04:36,200 --> 00:04:39,530
mood up right the waste

00:04:37,580 --> 00:04:42,050
the toilet away right get rid of the

00:04:39,530 --> 00:04:43,880
stuff that slows them down which is

00:04:42,050 --> 00:04:46,160
coordination overhead right if you have

00:04:43,880 --> 00:04:48,470
to coordinate the build and deployment

00:04:46,160 --> 00:04:51,440
of this old massive bin your entire app

00:04:48,470 --> 00:04:54,230
that coordinates twenties that's not

00:04:51,440 --> 00:04:56,480
going to be easy on the other hand if

00:04:54,230 --> 00:04:59,710
the skies are fixed engine that sends

00:04:56,480 --> 00:05:02,210
orders to Nasdaq this is your you know

00:04:59,710 --> 00:05:05,900
maybe your dot engines and send orders

00:05:02,210 --> 00:05:07,880
to New York and then this is your market

00:05:05,900 --> 00:05:09,650
data summary engine and this is your

00:05:07,880 --> 00:05:12,110
risk management engine right there all

00:05:09,650 --> 00:05:14,150
seven pieces each one of them a piece of

00:05:12,110 --> 00:05:16,010
the problem remain each developer

00:05:14,150 --> 00:05:18,250
capable of deploying new versions and

00:05:16,010 --> 00:05:20,540
new features independently of the others

00:05:18,250 --> 00:05:22,190
one of the most important things you

00:05:20,540 --> 00:05:25,100
need to make that our work is the

00:05:22,190 --> 00:05:28,610
ability with all these api's without

00:05:25,100 --> 00:05:30,770
breaking the world rest has been doing

00:05:28,610 --> 00:05:32,270
that for a long time right for HTTP JSON

00:05:30,770 --> 00:05:35,330
whatever you want to call it however you

00:05:32,270 --> 00:05:38,210
like to do it you can add a route to a

00:05:35,330 --> 00:05:39,500
server and nobody cares right they don't

00:05:38,210 --> 00:05:42,200
use it they don't use it if they want to

00:05:39,500 --> 00:05:45,500
use it you can you can add parameters to

00:05:42,200 --> 00:05:47,450
a you know request rest request and

00:05:45,500 --> 00:05:49,850
nobody character I didn't supply it so

00:05:47,450 --> 00:05:51,680
figure it out default why can't you do

00:05:49,850 --> 00:05:55,060
that with RPC what you can a thrift

00:05:51,680 --> 00:05:59,390
that's what it brings to the table and

00:05:55,060 --> 00:06:01,700
so being able to do this stuff fast has

00:05:59,390 --> 00:06:03,590
a lot to do with money which is why

00:06:01,700 --> 00:06:05,810
companies especially financial services

00:06:03,590 --> 00:06:08,180
like it right if you don't want your

00:06:05,810 --> 00:06:09,890
lunch eaten by the new guy you have to

00:06:08,180 --> 00:06:11,390
quit right you have to be able to end

00:06:09,890 --> 00:06:13,790
they quickly enough to be able to get

00:06:11,390 --> 00:06:15,890
ideas and answered your customers and

00:06:13,790 --> 00:06:18,140
that's all about this you know CIC eat

00:06:15,890 --> 00:06:20,540
right I've seen companies do all sorts

00:06:18,140 --> 00:06:25,040
of crazy CI stuff and then they stop

00:06:20,540 --> 00:06:26,390
there and benefits right github you know

00:06:25,040 --> 00:06:28,370
I don't know right you've got all this

00:06:26,390 --> 00:06:28,940
amazing innovation and get out but it's

00:06:28,370 --> 00:06:31,160
not

00:06:28,940 --> 00:06:33,830
your customers right you have have a

00:06:31,160 --> 00:06:35,360
whole pipeline that drops things into a

00:06:33,830 --> 00:06:38,090
production environment that people can

00:06:35,360 --> 00:06:39,800
use that sounds scary financial services

00:06:38,090 --> 00:06:42,470
firms don't like scary right they like

00:06:39,800 --> 00:06:44,720
stable reliable but they also don't want

00:06:42,470 --> 00:06:46,730
to get crushed by their competitors so

00:06:44,720 --> 00:06:49,370
they're being forced to be this way and

00:06:46,730 --> 00:06:52,910
we're also finding through statistics

00:06:49,370 --> 00:06:54,620
that it's actually better right because

00:06:52,910 --> 00:06:56,210
instead of building up all this risk and

00:06:54,620 --> 00:06:57,980
then don't be you know the system

00:06:56,210 --> 00:06:59,960
fighting animal problems impression

00:06:57,980 --> 00:07:02,390
you're dumping out all these little

00:06:59,960 --> 00:07:04,190
events taking lots of little chances if

00:07:02,390 --> 00:07:05,690
you have a dynamic orchestration system

00:07:04,190 --> 00:07:08,360
like kubernetes or something like that

00:07:05,690 --> 00:07:10,040
little crab you do you deploy this this

00:07:08,360 --> 00:07:12,290
is container and it doesn't work you can

00:07:10,040 --> 00:07:13,850
go back and you can also do dynamic

00:07:12,290 --> 00:07:15,110
deployments where you put the new guy

00:07:13,850 --> 00:07:16,640
out there and they only give it five

00:07:15,110 --> 00:07:18,170
percent of the traffic and if things are

00:07:16,640 --> 00:07:19,820
ugly you should at that mom's right it's

00:07:18,170 --> 00:07:22,550
all these things you can do in dynamic

00:07:19,820 --> 00:07:24,680
infrastructure to make this much lower

00:07:22,550 --> 00:07:26,480
risk then lights out a monthly

00:07:24,680 --> 00:07:33,680
employment types of things that you give

00:07:26,480 --> 00:07:35,510
in that my little world to not only

00:07:33,680 --> 00:07:38,380
allow me to innovate faster but to

00:07:35,510 --> 00:07:41,480
reduce the risk in the process and so

00:07:38,380 --> 00:07:45,020
time to market right in the innovation

00:07:41,480 --> 00:07:46,970
that's really a big thing so cloud

00:07:45,020 --> 00:07:48,169
native adoption you know our people are

00:07:46,970 --> 00:07:52,669
using this stuff you know

00:07:48,169 --> 00:07:55,190
12:3 it pulls on dr as a 20-17 of the

00:07:52,669 --> 00:07:55,700
rig is not only 1518 something like that

00:07:55,190 --> 00:07:59,210
00:07:55,700 --> 00:08:01,130
this is stackoverflow trends you've got

00:07:59,210 --> 00:08:02,990
all these different cluster managers it

00:08:01,130 --> 00:08:04,580
turns out if you have 20 different

00:08:02,990 --> 00:08:06,890
cluster managers and 20 different

00:08:04,580 --> 00:08:08,900
container technologies that's actually a

00:08:06,890 --> 00:08:10,040
bummer for developers because developers

00:08:08,900 --> 00:08:12,380
want to innovate they want to build

00:08:10,040 --> 00:08:14,060
software they don't want to learn five

00:08:12,380 --> 00:08:17,180
different packaging schemes and 20

00:08:14,060 --> 00:08:19,790
different orchestrators and so for good

00:08:17,180 --> 00:08:22,280
or bad kubernetes has to become things

00:08:19,790 --> 00:08:24,080
right this is my and everybody else is

00:08:22,280 --> 00:08:26,660
down here it's more of a sauce or

00:08:24,080 --> 00:08:28,910
whatever kubernetes is clearly you know

00:08:26,660 --> 00:08:30,530
that's one veteran right you look at

00:08:28,910 --> 00:08:33,260
anyone that you want and you can pretty

00:08:30,530 --> 00:08:35,630
much see kubernetes coming emerging as

00:08:33,260 --> 00:08:38,479
the thing and you've got a very big ax

00:08:35,630 --> 00:08:40,209
right it's very painfully poking I go

00:08:38,479 --> 00:08:42,279
was three

00:08:40,209 --> 00:08:44,589
Nettie's possible there's a lot of

00:08:42,279 --> 00:08:46,389
issues in the early phases of that but

00:08:44,589 --> 00:08:48,610
we're glad they did it right because

00:08:46,389 --> 00:08:51,759
they fix those problems they found all

00:08:48,610 --> 00:08:53,439
the gacho's in that first phase Google's

00:08:51,759 --> 00:08:55,779
been running three thousand containers a

00:08:53,439 --> 00:08:58,420
second keyboard which is the precursor

00:08:55,779 --> 00:08:59,980
already in their infrastructure

00:08:58,420 --> 00:09:04,420
you've got five hundred sixty-seven

00:08:59,980 --> 00:09:06,399
percent growth in 2017 so micro-services

00:09:04,420 --> 00:09:08,230
on command you seem like an interesting

00:09:06,399 --> 00:09:09,579
you know combination here right that's

00:09:08,230 --> 00:09:13,119
the way if you want to get on properly

00:09:09,579 --> 00:09:14,589
and we go into plan a of systems you

00:09:13,119 --> 00:09:16,269
move from this environment where your

00:09:14,589 --> 00:09:19,300
app runs on an operating system in a

00:09:16,269 --> 00:09:21,009
tiara your cloud-based to this kind of

00:09:19,300 --> 00:09:23,079
environment where you're not running a

00:09:21,009 --> 00:09:25,600
container on an ellipse and then can be

00:09:23,079 --> 00:09:27,249
on a VM or it could be a barrel right

00:09:25,600 --> 00:09:29,550
through the getting rid of all of these

00:09:27,249 --> 00:09:32,860
copies of the operating system right

00:09:29,550 --> 00:09:34,839
plebeians and each one is packaging some

00:09:32,860 --> 00:09:36,730
big monolithic app that you've got your

00:09:34,839 --> 00:09:39,249
unit of deployment as a virtual machine

00:09:36,730 --> 00:09:40,509
you're paying this price for every

00:09:39,249 --> 00:09:42,999
single one of those depends on this

00:09:40,509 --> 00:09:45,579
computer over here you have a single

00:09:42,999 --> 00:09:48,730
operating system so you get better

00:09:45,579 --> 00:09:51,639
server density and that's cost right

00:09:48,730 --> 00:09:53,949
bottom line and you also have better

00:09:51,639 --> 00:09:55,990
performance for the i/o right in this

00:09:53,949 --> 00:09:58,959
experimental that OS owns the hardware

00:09:55,990 --> 00:10:00,399
right this is the negotiator if you say

00:09:58,959 --> 00:10:02,589
I want to write to the disk and you say

00:10:00,399 --> 00:10:05,170
oh right this guy decides who goes first

00:10:02,589 --> 00:10:06,819
but if you're over here and we knew that

00:10:05,170 --> 00:10:08,740
this guy can't die because he's a

00:10:06,819 --> 00:10:10,629
virtual machine he tries to touch

00:10:08,740 --> 00:10:12,279
virtual Hardware trapped into the

00:10:10,629 --> 00:10:13,720
hypervisor and then this guy and that

00:10:12,279 --> 00:10:16,809
Nikko experience and that's an expert

00:10:13,720 --> 00:10:18,939
layer and that's why ILO is slow and

00:10:16,809 --> 00:10:22,389
that's why storage solutions that are

00:10:18,939 --> 00:10:24,970
doing tons of i/o for this model right

00:10:22,389 --> 00:10:26,709
if you use a database as a service in a

00:10:24,970 --> 00:10:29,139
cloud they're probably running it on

00:10:26,709 --> 00:10:31,569
bare metal or some sort of solution that

00:10:29,139 --> 00:10:33,249
has a really hacked hypervisor it allows

00:10:31,569 --> 00:10:36,160
them to get to straight to gifts because

00:10:33,249 --> 00:10:38,170
they need the performance they don't

00:10:36,160 --> 00:10:40,990
want their databases to be slow over the

00:10:38,170 --> 00:10:42,249
rest of you to hops networking any kind

00:10:40,990 --> 00:10:44,199
of i/o where you have to talk to a

00:10:42,249 --> 00:10:46,720
device encamping multiplex is all this

00:10:44,199 --> 00:10:48,020
trick stuff out area network cards that

00:10:46,720 --> 00:10:50,000
allow for

00:10:48,020 --> 00:10:51,950
different interfaces and one of them was

00:10:50,000 --> 00:10:54,290
assigned to each p.m. and stuff like

00:10:51,950 --> 00:10:56,029
that that's was in scale that it's not

00:10:54,290 --> 00:10:57,500
general purpose and simple and so a lot

00:10:56,029 --> 00:10:58,760
of cloud vendors didn't either charge

00:10:57,500 --> 00:11:01,520
you more for it or they don't even offer

00:10:58,760 --> 00:11:03,230
it and so this is really a nice option

00:11:01,520 --> 00:11:04,520
right you both would continue

00:11:03,230 --> 00:11:08,060
superseding sort of get rid of that

00:11:04,520 --> 00:11:10,820
problem all together so the challenges

00:11:08,060 --> 00:11:13,880
though that show up in these kinds of

00:11:10,820 --> 00:11:17,060
systems are this right we used to have

00:11:13,880 --> 00:11:21,350
these seventeen big PMS and you'd run 12

00:11:17,060 --> 00:11:23,959
inch now you have 1700 micro-services

00:11:21,350 --> 00:11:25,700
and you have 60 cogs of each at all

00:11:23,959 --> 00:11:28,100
talking to each other Netflix calls this

00:11:25,700 --> 00:11:30,560
micro sort of death star model right it

00:11:28,100 --> 00:11:33,020
looks like it would you like to manage

00:11:30,560 --> 00:11:36,260
that or a monitor that not lab schools

00:11:33,020 --> 00:11:38,540
that's for sure right so increased

00:11:36,260 --> 00:11:42,050
pressure on networks right where he used

00:11:38,540 --> 00:11:44,990
to be I call a function now I have to

00:11:42,050 --> 00:11:46,790
make a network of all yes if I'm a

00:11:44,990 --> 00:11:49,899
financial services firm I'm like well I

00:11:46,790 --> 00:11:52,339
just went from microseconds right to

00:11:49,899 --> 00:11:56,180
milliseconds that's a very serious deal

00:11:52,339 --> 00:11:57,350
that monolith is way faster right you

00:11:56,180 --> 00:11:58,700
know all the way back to that model of

00:11:57,350 --> 00:12:00,620
picture and looked at the exploited

00:11:58,700 --> 00:12:02,209
micro service that thing's never going

00:12:00,620 --> 00:12:03,709
to be as fast the applications and

00:12:02,209 --> 00:12:05,750
microscopes is never going to have the

00:12:03,709 --> 00:12:07,520
little accent of that model

00:12:05,750 --> 00:12:08,720
this is why I'm you talk to Wi-Fi here

00:12:07,520 --> 00:12:10,220
you can see trailers and stuff and you

00:12:08,720 --> 00:12:11,630
start telling about microservices stuff

00:12:10,220 --> 00:12:12,920
they look at you like you're crazy well

00:12:11,630 --> 00:12:15,440
I would never do that

00:12:12,920 --> 00:12:16,880
you're nuts get out right but if you

00:12:15,440 --> 00:12:19,010
start talking to people who are building

00:12:16,880 --> 00:12:21,200
systems of scale 20 millions of users

00:12:19,010 --> 00:12:24,079
consumer facing products things that

00:12:21,200 --> 00:12:26,800
have to be scalable beyond what a single

00:12:24,079 --> 00:12:30,829
computer can handle well this model has

00:12:26,800 --> 00:12:33,020
to recommend it and particularly the

00:12:30,829 --> 00:12:34,850
innovation piece of the vast innovation

00:12:33,020 --> 00:12:36,110
especially in your deal with beatsie

00:12:34,850 --> 00:12:40,130
types of situations

00:12:36,110 --> 00:12:42,140
so even b2b them so this brings us back

00:12:40,130 --> 00:12:44,240
then to that interface right okay so

00:12:42,140 --> 00:12:46,370
we've gone to micro services we have the

00:12:44,240 --> 00:12:48,560
speed the innovation speed but we're

00:12:46,370 --> 00:12:51,320
losing the actual application

00:12:48,560 --> 00:12:53,750
responsiveness by adding lassie to all

00:12:51,320 --> 00:12:55,220
of these communications we get a little

00:12:53,750 --> 00:12:56,460
bit back by going to containers and

00:12:55,220 --> 00:12:58,589
cutting out the middleman

00:12:56,460 --> 00:13:00,210
no more PMS if we're running on bare

00:12:58,589 --> 00:13:01,890
metal anyway or at least fewer the

00:13:00,210 --> 00:13:03,630
answers we're running into the cloud as

00:13:01,890 --> 00:13:05,040
well and more and more clouds are

00:13:03,630 --> 00:13:07,170
offering bare metal systems right on

00:13:05,040 --> 00:13:09,060
Amazon you to get bare metal distances I

00:13:07,170 --> 00:13:11,160
be on the cloud as bare metal assistance

00:13:09,060 --> 00:13:13,140
packet as a cloud that's just caramel

00:13:11,160 --> 00:13:16,350
so there's options out there do you want

00:13:13,140 --> 00:13:20,070
crazy performance modern RPC is an

00:13:16,350 --> 00:13:21,959
interesting bit in this place REST API

00:13:20,070 --> 00:13:25,529
czar awesome talk more about that and

00:13:21,959 --> 00:13:28,110
second but RPC if I'm in a monolith and

00:13:25,529 --> 00:13:32,000
this function over here is being called

00:13:28,110 --> 00:13:35,370
by this module over here to function all

00:13:32,000 --> 00:13:37,500
right I can take this module and rip it

00:13:35,370 --> 00:13:39,149
out say it's still a function call make

00:13:37,500 --> 00:13:42,000
a function call get a result

00:13:39,149 --> 00:13:44,370
you know routing query parameters and

00:13:42,000 --> 00:13:46,620
JSON that's part of the lingua franca of

00:13:44,370 --> 00:13:48,390
an application that is integrated into a

00:13:46,620 --> 00:13:51,029
single piece of software right you don't

00:13:48,390 --> 00:13:52,709
have a REST API as inside software and

00:13:51,029 --> 00:13:54,480
if you're building things from a

00:13:52,709 --> 00:13:57,089
brownfield environment which pretty much

00:13:54,480 --> 00:13:58,980
everybody is especially in financial

00:13:57,089 --> 00:14:01,050
services right creating a company from

00:13:58,980 --> 00:14:03,240
scratch with your giant organization

00:14:01,050 --> 00:14:05,220
there are for startups to do but but

00:14:03,240 --> 00:14:06,990
many many many of the projects out there

00:14:05,220 --> 00:14:09,150
at ground field so I've got this

00:14:06,990 --> 00:14:11,010
monolith and I need to take the pieces

00:14:09,150 --> 00:14:13,290
of that thing that I have to innovate

00:14:11,010 --> 00:14:14,970
quickly on and work them into micro

00:14:13,290 --> 00:14:17,430
services and I don't wanna have to

00:14:14,970 --> 00:14:19,740
reinvent pulling the IO today I want to

00:14:17,430 --> 00:14:21,180
take the classes and the methods that

00:14:19,740 --> 00:14:24,870
it's already got and just turn that into

00:14:21,180 --> 00:14:28,010
what are we seeing our face so this was

00:14:24,870 --> 00:14:30,300
an idea that was started by Bruce Nelson

00:14:28,010 --> 00:14:33,089
in the early days of the art for that in

00:14:30,300 --> 00:14:33,600
1989 moves been around for a while see

00:14:33,089 --> 00:14:35,370
rocks

00:14:33,600 --> 00:14:37,709
created probably the first commercial

00:14:35,370 --> 00:14:40,290
solution there and summer see in that

00:14:37,709 --> 00:14:43,170
Tiki floor you know those guys and Sons

00:14:40,290 --> 00:14:45,209
visionary that's still in use today

00:14:43,170 --> 00:14:48,839
they now probably ONC plus but if you're

00:14:45,209 --> 00:14:53,339
using NFS you're using son RPC from 1984

00:14:48,839 --> 00:14:54,990
so that's pretty big my ex korba you can

00:14:53,339 --> 00:14:58,800
see the same report right that stuff

00:14:54,990 --> 00:15:02,190
I'll just do that a PC erm I see this

00:14:58,800 --> 00:15:04,410
was everybody want to use some stuff

00:15:02,190 --> 00:15:06,390
right idea and to the pack Ronaldo's

00:15:04,410 --> 00:15:07,880
created their own thing and there was a

00:15:06,390 --> 00:15:10,910
big committee that created

00:15:07,880 --> 00:15:12,920
so created by committee Microsoft jump

00:15:10,910 --> 00:15:14,600
on the bandwagon and adopted dce/rpc is

00:15:12,920 --> 00:15:16,579
thrown in less urgency so this is

00:15:14,600 --> 00:15:18,139
another survivor if you're using Active

00:15:16,579 --> 00:15:20,360
Directory you're using and I start to

00:15:18,139 --> 00:15:21,860
see under the covers and then they got

00:15:20,360 --> 00:15:23,269
that and all sorts of other things for

00:15:21,860 --> 00:15:25,220
the first day it kind of showed up

00:15:23,269 --> 00:15:28,610
because the next-gen era of scores

00:15:25,220 --> 00:15:30,800
oriented architectures was so simple

00:15:28,610 --> 00:15:32,180
object access between well decide is for

00:15:30,800 --> 00:15:34,069
service main architectures was

00:15:32,180 --> 00:15:39,279
distributed service private environment

00:15:34,069 --> 00:15:42,319
but at the Navajo of being XML based so

00:15:39,279 --> 00:15:44,690
slow another problem with soap is that

00:15:42,319 --> 00:15:46,550
the tunnels everything for HTTP so it's

00:15:44,690 --> 00:15:48,019
posting all the time and you don't get

00:15:46,550 --> 00:15:52,240
me get efficient disease that you have

00:15:48,019 --> 00:15:55,190
unrest and things like that and so

00:15:52,240 --> 00:15:56,870
Google in 2001 creates this really cool

00:15:55,190 --> 00:15:58,699
thing called protocol offers they're

00:15:56,870 --> 00:16:01,550
using rest everywhere and they go this

00:15:58,699 --> 00:16:03,740
is too slow let's be able to create

00:16:01,550 --> 00:16:05,540
things that are like these JSON objects

00:16:03,740 --> 00:16:08,269
or your XML objects that we want to pass

00:16:05,540 --> 00:16:10,639
around but let's turn it into a binary

00:16:08,269 --> 00:16:13,040
piece of data that serialize is crazy

00:16:10,639 --> 00:16:15,259
fast and deserialize is crazy fast when

00:16:13,040 --> 00:16:17,480
it's really compact on the wire so they

00:16:15,259 --> 00:16:20,480
dream protocol I was doing IDL interface

00:16:17,480 --> 00:16:22,519
definition language describes truck and

00:16:20,480 --> 00:16:24,500
their engine will serializer for you in

00:16:22,519 --> 00:16:26,449
whatever language you're using as long

00:16:24,500 --> 00:16:29,509
as it's one of Java's or one of the Java

00:16:26,449 --> 00:16:33,759
Python C++ languages that was using at

00:16:29,509 --> 00:16:36,620
the time also open sourced right so

00:16:33,759 --> 00:16:38,509
Facebook is there a lot to do keeps my

00:16:36,620 --> 00:16:40,639
own stuff that Google's doing internally

00:16:38,509 --> 00:16:43,040
says wow that's really cool we need some

00:16:40,639 --> 00:16:45,829
of that hires the guy one of the guys on

00:16:43,040 --> 00:16:47,990
the architecture team and it says build

00:16:45,829 --> 00:16:51,769
a cooler one for us and he creates a

00:16:47,990 --> 00:16:55,360
magic drift and Facebook and open source

00:16:51,769 --> 00:16:59,029
and so a patch of thread shows that

00:16:55,360 --> 00:17:00,769
solution it has all goodness of you know

00:16:59,029 --> 00:17:02,630
the smart state that Google put into it

00:17:00,769 --> 00:17:04,069
but with the backwards looking you know

00:17:02,630 --> 00:17:06,530
hey we can do a couple things to prep

00:17:04,069 --> 00:17:09,860
more interesting and we get a passion

00:17:06,530 --> 00:17:13,490
thread shows a better way to serialize

00:17:09,860 --> 00:17:16,120
deeper to do they create art music

00:17:13,490 --> 00:17:19,760
system for it I put it on here mostly to

00:17:16,120 --> 00:17:20,850
suggest that you take great care if you

00:17:19,760 --> 00:17:23,220
are even

00:17:20,850 --> 00:17:25,860
about using a broker our PC try it first

00:17:23,220 --> 00:17:30,269
I don't know anybody who's using I'll be

00:17:25,860 --> 00:17:32,669
good then next in 2015 Google comes out

00:17:30,269 --> 00:17:34,649
with Jerrica see and somewhere in here

00:17:32,669 --> 00:17:36,630
they'll open up being actually forever

00:17:34,649 --> 00:17:38,759
cause them to open source program offers

00:17:36,630 --> 00:17:40,409
to like okay you know somebody's a

00:17:38,759 --> 00:17:41,759
little bit sourcing an RPC system that

00:17:40,409 --> 00:17:43,289
looks a lot like protocol buffers we

00:17:41,759 --> 00:17:45,360
kinda open source protocol buffers if

00:17:43,289 --> 00:17:47,340
you want to keep you know a piece of the

00:17:45,360 --> 00:17:50,309
market interested in us so protocol

00:17:47,340 --> 00:17:52,620
buffers shows up but there's no RPC

00:17:50,309 --> 00:17:54,720
system it's just a serialization in

00:17:52,620 --> 00:17:56,250
right it doesn't it doesn't have an RPC

00:17:54,720 --> 00:17:58,889
server set and things like that like

00:17:56,250 --> 00:18:00,750
Grif does and it's because internally

00:17:58,889 --> 00:18:03,929
Google's using this thing called study

00:18:00,750 --> 00:18:05,730
and really cool and everything acquired

00:18:03,929 --> 00:18:08,519
into their stuff let's begin Belize the

00:18:05,730 --> 00:18:10,110
open source in and it opens far stubby

00:18:08,519 --> 00:18:12,690
because they have other plans they

00:18:10,110 --> 00:18:14,009
they're working hard to get HTTP to

00:18:12,690 --> 00:18:15,870
creative right which gives us the

00:18:14,009 --> 00:18:17,700
ability to the live headers to compress

00:18:15,870 --> 00:18:19,860
data to have bi-directional flow to

00:18:17,700 --> 00:18:22,379
prioritize things all sorts of problems

00:18:19,860 --> 00:18:24,539
and I'm walking you know clean up all

00:18:22,379 --> 00:18:27,269
the problems with HTTP one one kind of

00:18:24,539 --> 00:18:30,029
fix HTTP queue and when that happens

00:18:27,269 --> 00:18:31,309
HTTP to standardize in 2013 they still

00:18:30,029 --> 00:18:34,169
on the TRC

00:18:31,309 --> 00:18:37,350
GRDC is Google's articie platform that

00:18:34,169 --> 00:18:39,149
sits on top of HTTP tube and uses

00:18:37,350 --> 00:18:41,309
protocol buffers he doesn't require

00:18:39,149 --> 00:18:42,720
protocol buffers but nobody has an

00:18:41,309 --> 00:18:44,039
implementation of Gerrit and see what

00:18:42,720 --> 00:18:46,320
they think else at the moment and

00:18:44,039 --> 00:18:49,370
probably not a lot of motivation to and

00:18:46,320 --> 00:18:52,440
because the buffers really nice and so

00:18:49,370 --> 00:18:54,779
essentially and this is in my humble

00:18:52,440 --> 00:18:56,909
opinion take it with a grain of salt I'm

00:18:54,779 --> 00:19:00,059
on the PFC of a patent drip there's a

00:18:56,909 --> 00:19:02,309
patent thrift and there's G RPC protobuf

00:19:00,059 --> 00:19:04,860
those are the two players in this space

00:19:02,309 --> 00:19:06,690
that have a lot of momentum and a lot of

00:19:04,860 --> 00:19:07,919
adoption a lot of use by are there other

00:19:06,690 --> 00:19:10,620
things there's lots of other really cool

00:19:07,919 --> 00:19:12,000
things and in a particular niche there

00:19:10,620 --> 00:19:13,919
may be something else that's better than

00:19:12,000 --> 00:19:16,710
either of those two for that particular

00:19:13,919 --> 00:19:19,320
marketplace but the broad scope of RPC

00:19:16,710 --> 00:19:21,539
those are the things that we see how to

00:19:19,320 --> 00:19:24,210
drift inside Cassandra inside all sorts

00:19:21,539 --> 00:19:27,029
have to do stuff GRDC baked into

00:19:24,210 --> 00:19:29,340
kubernetes and docker right so if you're

00:19:27,029 --> 00:19:30,550
in the CN CF world you're probably going

00:19:29,340 --> 00:19:32,980
to be using the open sea

00:19:30,550 --> 00:19:34,840
it's such DCF project pocketed computing

00:19:32,980 --> 00:19:37,510
charge which is where kubernetes clips

00:19:34,840 --> 00:19:39,070
and if you are an actuarial you're

00:19:37,510 --> 00:19:41,560
probably going to be using Apache thrift

00:19:39,070 --> 00:19:43,390
though you see people on you know

00:19:41,560 --> 00:19:45,280
there's there's things over in the CNCs

00:19:43,390 --> 00:19:47,020
I that use Apache thrift and there's

00:19:45,280 --> 00:19:50,440
things over in the Apache site that use

00:19:47,020 --> 00:19:52,480
kerosene but to to babysit technology

00:19:50,440 --> 00:19:54,610
those are really useful gherkin C is now

00:19:52,480 --> 00:19:56,500
Cynthia project engineer but protobuf

00:19:54,610 --> 00:19:58,840
still isn't there's something because it

00:19:56,500 --> 00:20:00,520
was open source so early on there's some

00:19:58,840 --> 00:20:02,170
tree marking things that need to get

00:20:00,520 --> 00:20:05,710
cleaned up and probably put about that

00:20:02,170 --> 00:20:08,200
stuff under the scene Seattle's okay so

00:20:05,710 --> 00:20:10,150
how does this hardly see stuff make my

00:20:08,200 --> 00:20:13,480
life easier how do I get to use this is

00:20:10,150 --> 00:20:15,490
it do I want to use this everywhere or

00:20:13,480 --> 00:20:17,830
than questions like that are probably

00:20:15,490 --> 00:20:20,680
best answered with some examples imagine

00:20:17,830 --> 00:20:22,690
you've got a monolith this things

00:20:20,680 --> 00:20:23,920
written in C++ it's been in your company

00:20:22,690 --> 00:20:27,040
for like 12 years

00:20:23,920 --> 00:20:28,990
it's rock-solid trusted code fast you

00:20:27,040 --> 00:20:31,390
don't realize mess with it because

00:20:28,990 --> 00:20:33,480
there's nothing to make there but you

00:20:31,390 --> 00:20:41,110
want to be able to use it in other way

00:20:33,480 --> 00:20:43,480
imagine application for America's Cup

00:20:41,110 --> 00:20:50,950
sale right you trying to look at the

00:20:43,480 --> 00:20:55,930
wind speed over this really great engine

00:20:50,950 --> 00:20:58,000
of the statistics tells you which you

00:20:55,930 --> 00:20:59,290
know people whose logistics on this boat

00:20:58,000 --> 00:21:02,140
when it line and you know stuff like

00:20:59,290 --> 00:21:03,940
that just simple things and the people

00:21:02,140 --> 00:21:07,630
who build your website didn't know to

00:21:03,940 --> 00:21:09,310
ask for PHP around you know like if we

00:21:07,630 --> 00:21:11,230
can put that sailing statistics on the

00:21:09,310 --> 00:21:13,300
web where he's super awesome okay well

00:21:11,230 --> 00:21:15,640
we got to get rid of this monolithic

00:21:13,300 --> 00:21:17,470
desktop mentality take that piece and

00:21:15,640 --> 00:21:19,360
rip it out of there and make it

00:21:17,470 --> 00:21:20,890
available to everybody but we don't want

00:21:19,360 --> 00:21:23,110
to re-engineer it we don't have rewrite

00:21:20,890 --> 00:21:24,730
you know we already have it done I don't

00:21:23,110 --> 00:21:27,370
I take that and turn it into a micro

00:21:24,730 --> 00:21:29,500
service well it's pretty easy impacted

00:21:27,370 --> 00:21:32,290
if you would create a service give it a

00:21:29,500 --> 00:21:35,230
name and then you specify its API using

00:21:32,290 --> 00:21:37,690
the Apache thrift idea every method

00:21:35,230 --> 00:21:40,150
gives a name and a return type and

00:21:37,690 --> 00:21:41,120
thrift provides collections like this

00:21:40,150 --> 00:21:44,180
man

00:21:41,120 --> 00:21:46,309
sets and then your parameters are gonna

00:21:44,180 --> 00:21:48,320
all have types as well which can also be

00:21:46,309 --> 00:21:51,290
collections and you get each of them an

00:21:48,320 --> 00:21:55,640
IV on the wire you don't want to pass em

00:21:51,290 --> 00:21:57,530
I in the underbar are a TI ng right it's

00:21:55,640 --> 00:22:00,050
too much you don't have to compress it

00:21:57,530 --> 00:22:02,480
even so in thrift all of the parameters

00:22:00,050 --> 00:22:04,280
have it worden and it's the number that

00:22:02,480 --> 00:22:06,890
gets passed on the wire drift has a

00:22:04,280 --> 00:22:09,170
contact compression serialization

00:22:06,890 --> 00:22:11,420
protocol which requires only the number

00:22:09,170 --> 00:22:14,300
of bits that it takes to represent that

00:22:11,420 --> 00:22:17,240
number plus one so one can be

00:22:14,300 --> 00:22:19,370
represented in two bits 2 can be

00:22:17,240 --> 00:22:22,010
represented in 3 so this gives you a

00:22:19,370 --> 00:22:24,110
huge you know efficiency passing the

00:22:22,010 --> 00:22:25,940
banners another thing you might say is

00:22:24,110 --> 00:22:28,520
well why do I need a number can't you

00:22:25,940 --> 00:22:30,380
just be positional no they can't if you

00:22:28,520 --> 00:22:32,929
want to be able to evolve your interface

00:22:30,380 --> 00:22:35,570
I want to be able to add parameters to

00:22:32,929 --> 00:22:36,920
those sponsors and I feel about it and I

00:22:35,570 --> 00:22:38,840
don't want to break the world when I do

00:22:36,920 --> 00:22:40,970
that means we need a serialization layer

00:22:38,840 --> 00:22:42,770
that can detect the parameters know

00:22:40,970 --> 00:22:45,110
which ones it recognizes in which ones

00:22:42,770 --> 00:22:46,970
it doesn't have all your values that

00:22:45,110 --> 00:22:52,040
don't show up right it solves all your

00:22:46,970 --> 00:22:54,920
problems you had business so we now

00:22:52,040 --> 00:22:57,890
created an API for this logical we just

00:22:54,920 --> 00:22:59,990
rip it out when we need we need to be

00:22:57,890 --> 00:23:04,360
able to glue the networking stuff that

00:22:59,990 --> 00:23:07,460
receives those calls to our module easy

00:23:04,360 --> 00:23:10,130
with this idea you can use the Apache

00:23:07,460 --> 00:23:12,910
pretty on my phone you can rate C++ does

00:23:10,130 --> 00:23:16,400
done you know your server side steps

00:23:12,910 --> 00:23:18,530
then you need an engine that will start

00:23:16,400 --> 00:23:20,059
up control of processes and threads and

00:23:18,530 --> 00:23:22,429
handle all the connections and all the

00:23:20,059 --> 00:23:25,730
stubs write an actual article Z server

00:23:22,429 --> 00:23:30,440
no problem that comes with several for

00:23:25,730 --> 00:23:31,160
C++ Java C sharp dirt you know rust you

00:23:30,440 --> 00:23:33,920
name it right

00:23:31,160 --> 00:23:35,570
Scala crazy languages haskell i'll start

00:23:33,920 --> 00:23:37,460
at your house okay but anything right

00:23:35,570 --> 00:23:43,970
you can pretty much client support for

00:23:37,460 --> 00:23:46,100
an action trick though so there's your

00:23:43,970 --> 00:23:48,559
micro service now what about a client ax

00:23:46,100 --> 00:23:52,160
you take that same idea and generate

00:23:48,559 --> 00:23:53,910
client stubs or PHP or nodejs

00:23:52,160 --> 00:23:58,740
or javascript in the prowl

00:23:53,910 --> 00:24:01,110
or C++ or anything and now here we go

00:23:58,740 --> 00:24:02,850
you start this guy up all you gotta do

00:24:01,110 --> 00:24:04,560
is tell that clients couple of IP

00:24:02,850 --> 00:24:06,510
important and he's going to connect that

00:24:04,560 --> 00:24:08,220
you're going to get crazy fast harkensee

00:24:06,510 --> 00:24:10,410
between two completely different

00:24:08,220 --> 00:24:13,620
languages but the PHP guys I'm just

00:24:10,410 --> 00:24:14,310
calling functions in a native DP object

00:24:13,620 --> 00:24:16,320
or nodejs

00:24:14,310 --> 00:24:18,930
or whatever the case may be and it just

00:24:16,320 --> 00:24:20,970
works and so now I kind of broken up the

00:24:18,930 --> 00:24:24,150
modeling right and it's been a pretty

00:24:20,970 --> 00:24:26,160
easy puddle because have everything all

00:24:24,150 --> 00:24:27,840
the stock stuff is already built all you

00:24:26,160 --> 00:24:30,420
have to do is define your API and you

00:24:27,840 --> 00:24:34,140
generate stubs both sides a little bit

00:24:30,420 --> 00:24:36,030
of glue code and so is it worth it is it

00:24:34,140 --> 00:24:37,740
should I just dress right should I take

00:24:36,030 --> 00:24:40,470
like the bullet and reinvent all these

00:24:37,740 --> 00:24:42,840
api's and rest form and then become of

00:24:40,470 --> 00:24:44,610
the rest stylist stuff on the server

00:24:42,840 --> 00:24:47,960
side and recode the rest I'll suck on

00:24:44,610 --> 00:24:50,670
that plan is Oxbow we can start with so

00:24:47,960 --> 00:24:52,080
this is an example of a server and a

00:24:50,670 --> 00:24:54,420
client running with a little blue

00:24:52,080 --> 00:24:57,150
background single box all these tests

00:24:54,420 --> 00:25:00,210
were run on the same box and the URL for

00:24:57,150 --> 00:25:01,260
the stuff for all is written is coming

00:25:00,210 --> 00:25:03,540
up at the end you need to try it

00:25:01,260 --> 00:25:05,580
yourself one but we basically have the

00:25:03,540 --> 00:25:08,220
client make a million pops and then say

00:25:05,580 --> 00:25:09,960
how long did that take right your client

00:25:08,220 --> 00:25:12,450
and the servers are written in Java you

00:25:09,960 --> 00:25:15,240
get your results we use though you see

00:25:12,450 --> 00:25:17,460
lots of use PHP if you have a go client

00:25:15,240 --> 00:25:19,650
talking to a C++ server right it's just

00:25:17,460 --> 00:25:21,840
one example right there's you know

00:25:19,650 --> 00:25:23,820
there's lies there's darn lies and

00:25:21,840 --> 00:25:25,620
there's statistics and statistics so try

00:25:23,820 --> 00:25:27,870
it yourself but just to give you a

00:25:25,620 --> 00:25:30,150
general idea of the orders of magnitude

00:25:27,870 --> 00:25:35,310
we're talking about so you don't even

00:25:30,150 --> 00:25:37,740
request 375 seconds right running on

00:25:35,310 --> 00:25:44,760
Tomcat 7 with HTTP XML serialization

00:25:37,740 --> 00:25:47,400
like now we switch to rest you and I'm

00:25:44,760 --> 00:25:49,680
saving about 15% is to be attributed to

00:25:47,400 --> 00:25:51,300
different things number one what's

00:25:49,680 --> 00:25:53,880
happening under the covers here we're

00:25:51,300 --> 00:25:55,920
saying give me a quote for MSFT

00:25:53,880 --> 00:25:58,680
and then we're passing back screaming to

00:25:55,920 --> 00:26:01,140
Tigger MSFT a price which is a double

00:25:58,680 --> 00:26:02,880
and a quantity which is an INT rights

00:26:01,140 --> 00:26:04,800
were just passing back a very simple

00:26:02,880 --> 00:26:07,610
structure scraps different numbers right

00:26:04,800 --> 00:26:11,030
again your mileage may vary well

00:26:07,610 --> 00:26:13,850
here we get requests to get something

00:26:11,030 --> 00:26:15,890
restful actually use to get her it

00:26:13,850 --> 00:26:18,020
doesn't mean to serialize data to send

00:26:15,890 --> 00:26:21,260
to the server to ask it what to do just

00:26:18,020 --> 00:26:23,300
gets a URL you're done right so this is

00:26:21,260 --> 00:26:25,070
going to not serialize on the way to the

00:26:23,300 --> 00:26:28,070
server or deserialize you're cutting

00:26:25,070 --> 00:26:29,810
your serialization low-impact probably a

00:26:28,070 --> 00:26:30,860
big piece of this the other thing is it

00:26:29,810 --> 00:26:32,720
gates on a little easier

00:26:30,860 --> 00:26:36,200
internationalist area lines this is

00:26:32,720 --> 00:26:37,910
straight-up jax-rs New Jersey to Tomcat

00:26:36,200 --> 00:26:41,090
7 each a sign of the game pretty much

00:26:37,910 --> 00:26:44,300
the same job now we switch to Patrick

00:26:41,090 --> 00:26:46,670
drift you can you can use a servlet a

00:26:44,300 --> 00:26:48,230
Java servlet and Patty Griffin run it on

00:26:46,670 --> 00:26:49,370
top Catalan with everything else that's

00:26:48,230 --> 00:26:52,520
what we're doing here

00:26:49,370 --> 00:26:55,840
we got a Ajax IRS Jersey to top tax out

00:26:52,520 --> 00:26:58,670
of HTTP JSON write everything the same

00:26:55,840 --> 00:27:00,770
over here context that needs to be JSON

00:26:58,670 --> 00:27:02,120
but just Apache driven one of the neat

00:27:00,770 --> 00:27:04,370
things about crypt is it has a plughole

00:27:02,120 --> 00:27:07,220
serializers we can actually get JSON you

00:27:04,370 --> 00:27:10,070
want to and now we're cutting so good at

00:27:07,220 --> 00:27:10,640
taking a huge you know 30% discount on

00:27:10,070 --> 00:27:13,220
rest

00:27:10,640 --> 00:27:14,690
performance-wise ok well that's an

00:27:13,220 --> 00:27:16,940
interesting but maybe not enough

00:27:14,690 --> 00:27:18,770
motivation right Nicholas Pearce says

00:27:16,940 --> 00:27:20,150
premature optimization is the root of

00:27:18,770 --> 00:27:22,130
all evil right for most situations

00:27:20,150 --> 00:27:24,680
unless you need it you don't want a

00:27:22,130 --> 00:27:27,200
tombstone but let's see how are we gonna

00:27:24,680 --> 00:27:29,990
do we switch to the thrift of TCP and

00:27:27,200 --> 00:27:32,480
taste I write get rid of the whole table

00:27:29,990 --> 00:27:36,440
you know traditional stack that still

00:27:32,480 --> 00:27:39,410
run a Java server over TCP now and still

00:27:36,440 --> 00:27:41,180
JSON them so sterilizing JSON you can

00:27:39,410 --> 00:27:42,620
see that a huge part of the overhead is

00:27:41,180 --> 00:27:44,600
this you know server raised

00:27:42,620 --> 00:27:46,700
infrastructure platform you move to

00:27:44,600 --> 00:27:47,990
micro services do you really want

00:27:46,700 --> 00:27:50,780
containers with

00:27:47,990 --> 00:27:52,520
tomcat in them running 12 times on the

00:27:50,780 --> 00:27:53,900
same computer that's not how it was

00:27:52,520 --> 00:27:56,540
meant to be that's not what it was

00:27:53,900 --> 00:27:58,760
designed for the cloud native way of

00:27:56,540 --> 00:28:02,480
doing things is this orthogonal

00:27:58,760 --> 00:28:04,880
projection from the old you know SOA a

00:28:02,480 --> 00:28:08,570
tomcat kind of architectures up to Java

00:28:04,880 --> 00:28:10,340
space and if we if we drag that forward

00:28:08,570 --> 00:28:13,400
a bit that's weird that perhaps all

00:28:10,340 --> 00:28:13,980
those compacts letting on a single boxes

00:28:13,400 --> 00:28:15,900
and

00:28:13,980 --> 00:28:18,330
just like all blows os's and those key

00:28:15,900 --> 00:28:21,090
elements is it going to help us slim it

00:28:18,330 --> 00:28:24,299
down right Yuda get rid of them and so

00:28:21,090 --> 00:28:26,510
over here I mean you're at an order of

00:28:24,299 --> 00:28:29,610
magnitude or more faster right you're in

00:28:26,510 --> 00:28:32,700
something like you know 40 seconds zone

00:28:29,610 --> 00:28:35,600
and then finally get ready JSON and go

00:28:32,700 --> 00:28:38,640
to compact protocol which is a basically

00:28:35,600 --> 00:28:42,270
protobuf right at the end of the day huh

00:28:38,640 --> 00:28:44,520
protocol compresses integers and line

00:28:42,270 --> 00:28:46,799
speed so it takes up a little more CPU

00:28:44,520 --> 00:28:49,080
but it's very very fast and it gives you

00:28:46,799 --> 00:28:50,390
maybe 30 percent smaller footprint on

00:28:49,080 --> 00:28:52,620
the wire that's a pure binary

00:28:50,390 --> 00:28:55,230
representation but it's way more

00:28:52,620 --> 00:29:00,150
efficient than JSON and as you can see

00:28:55,230 --> 00:29:01,919
you cut this down by no factor of 50

00:29:00,150 --> 00:29:05,220
percent of something so you're now down

00:29:01,919 --> 00:29:08,610
in like a nine second zone so 375

00:29:05,220 --> 00:29:10,110
seconds nine tumors of magnitude you

00:29:08,610 --> 00:29:13,080
start talking to or as a magnet to you

00:29:10,110 --> 00:29:15,600
well you know that's a pretty pretty

00:29:13,080 --> 00:29:17,130
nice thing to see the other thing is

00:29:15,600 --> 00:29:19,320
you're worried about lassi

00:29:17,130 --> 00:29:20,640
not only is it going to be faster than

00:29:19,320 --> 00:29:23,280
some of your other options but it's

00:29:20,640 --> 00:29:25,230
easier to take the brownfield monolith

00:29:23,280 --> 00:29:27,059
and break off micro-services that use

00:29:25,230 --> 00:29:28,440
aren't you see in my experience then

00:29:27,059 --> 00:29:30,000
just switch them to a completely

00:29:28,440 --> 00:29:32,790
different speed for Billy greater guy

00:29:30,000 --> 00:29:34,880
yeah the big option being no rest so

00:29:32,790 --> 00:29:36,960
another thing that you can see I

00:29:34,880 --> 00:29:39,480
mentioned we know that the language is

00:29:36,960 --> 00:29:41,370
very antsy also have Latika

00:29:39,480 --> 00:29:44,280
take into consideration consideration

00:29:41,370 --> 00:29:46,080
like who's the plant whose concern you

00:29:44,280 --> 00:29:48,120
got to know when just a us for being

00:29:46,080 --> 00:29:51,450
pretty quick and it's connecting to a

00:29:48,120 --> 00:29:54,210
Python server and you hit a building

00:29:51,450 --> 00:29:56,640
request with a single client it's pretty

00:29:54,210 --> 00:30:00,299
fast but as soon as you load up for

00:29:56,640 --> 00:30:02,309
clients the Python server arcs right

00:30:00,299 --> 00:30:04,470
it's dying because it doesn't count

00:30:02,309 --> 00:30:06,840
concurrency right Python doesn't support

00:30:04,470 --> 00:30:08,730
parallelism you can model concurrency

00:30:06,840 --> 00:30:11,700
but it's only going to run one thread at

00:30:08,730 --> 00:30:13,980
a time through any of your code so it's

00:30:11,700 --> 00:30:15,240
way worse than just four times the blue

00:30:13,980 --> 00:30:17,390
right you don't want to have a

00:30:15,240 --> 00:30:19,320
python-based

00:30:17,390 --> 00:30:22,710
multi-threaded kind of server in fire

00:30:19,320 --> 00:30:24,690
but not so fast if we go down here there

00:30:22,710 --> 00:30:27,629
is an accelerated version pipe

00:30:24,690 --> 00:30:30,259
so this is kind of like a little bit of

00:30:27,629 --> 00:30:35,519
a parallel to the rocks engine inside

00:30:30,259 --> 00:30:39,149
cosigner right this is a C++ native

00:30:35,519 --> 00:30:41,639
serialize her for throws built for

00:30:39,149 --> 00:30:43,799
Python and you just you just say I want

00:30:41,639 --> 00:30:45,629
to use the native serializers rather

00:30:43,799 --> 00:30:48,210
than the bottom line all sudden you get

00:30:45,629 --> 00:30:51,119
this massive performance one nice to

00:30:48,210 --> 00:30:53,190
build out the same but for all study you

00:30:51,119 --> 00:30:55,649
know that's a big win right so you can

00:30:53,190 --> 00:30:57,749
still write pretty fast little

00:30:55,649 --> 00:30:59,820
micro-services of Python crazy

00:30:57,749 --> 00:31:02,099
productivity and get decent performance

00:30:59,820 --> 00:31:04,349
if you want extreme you need to start

00:31:02,099 --> 00:31:04,769
going to go and post plus some things

00:31:04,349 --> 00:31:07,559
like that

00:31:04,769 --> 00:31:09,539
when have you use these P here the

00:31:07,559 --> 00:31:13,379
fastest of the mama C++ clients talking

00:31:09,539 --> 00:31:15,779
C++ servers but - time to go servers

00:31:13,379 --> 00:31:17,519
pretty close right and then we go time

00:31:15,779 --> 00:31:20,849
to go Oh still in the same ballpark

00:31:17,519 --> 00:31:23,570
spaces and kind of I'm talking C++ a

00:31:20,849 --> 00:31:25,979
little bit slower JavaScript you know so

00:31:23,570 --> 00:31:27,899
so language the piece of the puzzle but

00:31:25,979 --> 00:31:29,840
the beautiful thing is that in a micro

00:31:27,899 --> 00:31:32,070
service environment you know

00:31:29,840 --> 00:31:33,419
everything's Java here we all can do job

00:31:32,070 --> 00:31:36,299
and then you buy the company we're

00:31:33,419 --> 00:31:37,919
keeping C sharp right or then you know

00:31:36,299 --> 00:31:40,320
you can hire this team that is doing

00:31:37,919 --> 00:31:42,359
everything in JavaScript or you have

00:31:40,320 --> 00:31:44,220
some you spell work state it's all being

00:31:42,359 --> 00:31:46,529
that you trust and you can create that

00:31:44,220 --> 00:31:49,169
right micro service based systems tend

00:31:46,529 --> 00:31:50,999
to be polyglot you need a solution

00:31:49,169 --> 00:31:54,629
that's poly black which is rests almost

00:31:50,999 --> 00:31:56,279
been thought about but in case of you

00:31:54,629 --> 00:31:58,529
know drift and chairman same book we've

00:31:56,279 --> 00:32:01,139
got a pretty good languages so here you

00:31:58,529 --> 00:32:03,929
see we've got emergency first let me say

00:32:01,139 --> 00:32:06,539
hey Jeremy C is awesome it's a great

00:32:03,929 --> 00:32:08,249
rule and it's haven't been graded and

00:32:06,539 --> 00:32:11,489
crannies and docker and things like that

00:32:08,249 --> 00:32:13,080
it's not Google behind it with a lot of

00:32:11,489 --> 00:32:15,509
money and developers think you're the

00:32:13,080 --> 00:32:18,029
great documentation done a fantastic job

00:32:15,509 --> 00:32:21,080
of integrating with HTTP to your world

00:32:18,029 --> 00:32:23,820
is whether an HTTP

00:32:21,080 --> 00:32:25,200
sadly as a packet thrift person I would

00:32:23,820 --> 00:32:26,970
have to say maybe you should look at

00:32:25,200 --> 00:32:28,919
your conceit but if you are building

00:32:26,970 --> 00:32:31,379
back-end things that have to be the

00:32:28,919 --> 00:32:33,119
lowest possible lassie that I can tell

00:32:31,379 --> 00:32:36,509
you that is generally about four times

00:32:33,119 --> 00:32:38,220
faster so this is a one-sided right it's

00:32:36,509 --> 00:32:39,779
just the performance there's so many

00:32:38,220 --> 00:32:41,909
things about using one of these tools

00:32:39,779 --> 00:32:43,200
and I want you to carefully considered

00:32:41,909 --> 00:32:44,610
you see if you're looking at the river

00:32:43,200 --> 00:32:46,470
because you should look at both for sure

00:32:44,610 --> 00:32:48,389
under any circumstance we should look at

00:32:46,470 --> 00:32:50,220
both but they have their differences

00:32:48,389 --> 00:32:51,929
right there some things that maybe are

00:32:50,220 --> 00:32:56,309
from Co rock stars and things a big

00:32:51,929 --> 00:32:59,940
patch of dirt and rock stuff so about

00:32:56,309 --> 00:33:03,690
rest when we talk about the rest this is

00:32:59,940 --> 00:33:07,379
this is actually a straight out of the

00:33:03,690 --> 00:33:10,799
PhD dissertation Roy fielding right who

00:33:07,379 --> 00:33:12,629
invented the term rest and so one of the

00:33:10,799 --> 00:33:15,000
things that he showed here is that these

00:33:12,629 --> 00:33:16,350
caches where you see the dollar sign our

00:33:15,000 --> 00:33:19,590
beautiful part of the infrastructure

00:33:16,350 --> 00:33:21,750
think about this for just a second your

00:33:19,590 --> 00:33:23,460
inner browser here and you're hitting

00:33:21,750 --> 00:33:25,409
this website it shows your Doc's that

00:33:23,460 --> 00:33:27,529
are available for about and you look up

00:33:25,409 --> 00:33:30,000
the Chihuahua if you close your browser

00:33:27,529 --> 00:33:31,379
and you open it again and you look at

00:33:30,000 --> 00:33:36,480
that you love I think comes out of your

00:33:31,379 --> 00:33:39,570
browser's cache attacks you drift and T

00:33:36,480 --> 00:33:41,720
RPC are going to use post which is

00:33:39,570 --> 00:33:44,639
always going to go back to the server

00:33:41,720 --> 00:33:46,860
compare a REST API that pulls out of the

00:33:44,639 --> 00:33:50,580
browser cache Burgett operation versus

00:33:46,860 --> 00:33:52,830
those and rest will crush gr PC it will

00:33:50,580 --> 00:33:55,289
crush a patent River because it's coming

00:33:52,830 --> 00:33:56,909
out of your process you don't even go

00:33:55,289 --> 00:33:58,649
over the water right you just can't

00:33:56,909 --> 00:34:01,019
repeat with that if you're calling all

00:33:58,649 --> 00:34:02,700
the way back to the server and then what

00:34:01,019 --> 00:34:03,870
if you have a cache missed because now

00:34:02,700 --> 00:34:06,870
you're moving up the Saint Bernard

00:34:03,870 --> 00:34:08,940
well everybody works at a company and

00:34:06,870 --> 00:34:11,429
has their machine inside that company is

00:34:08,940 --> 00:34:13,740
hitting probably a proxy server and in

00:34:11,429 --> 00:34:16,200
anybody on your company did it yet

00:34:13,740 --> 00:34:17,669
against the Bernard is gonna come out of

00:34:16,200 --> 00:34:19,980
the proxy cache which means it's going

00:34:17,669 --> 00:34:22,079
out and get internal networks of your

00:34:19,980 --> 00:34:23,359
company here fast anyway right it

00:34:22,079 --> 00:34:25,470
doesn't have to go to the internet your

00:34:23,359 --> 00:34:28,500
deterministic you know bouncing around

00:34:25,470 --> 00:34:30,179
packets is a lot lower so a lot better

00:34:28,500 --> 00:34:32,369
so you end up getting out of a local

00:34:30,179 --> 00:34:34,319
cache for technology internet crazy fast

00:34:32,369 --> 00:34:36,780
again then

00:34:34,319 --> 00:34:39,210
cache this cache miss does not you're

00:34:36,780 --> 00:34:41,339
looking up the Afghan right well if

00:34:39,210 --> 00:34:44,240
anybody has ever looked up the Afghan

00:34:41,339 --> 00:34:46,919
from this app it's in the reverse price

00:34:44,240 --> 00:34:48,110
in the Gateway that they have standing

00:34:46,919 --> 00:34:49,730
up in front of theirs

00:34:48,110 --> 00:34:51,860
right after whatever they're easy right

00:34:49,730 --> 00:34:54,050
and boom you get that from the Gateway

00:34:51,860 --> 00:34:56,660
we just probably in kannada aarti bath

00:34:54,050 --> 00:34:58,160
and every store that manufacture maybe

00:34:56,660 --> 00:35:00,350
you've got to be here those look right

00:34:58,160 --> 00:35:02,180
and so a band maybe of that david freese

00:35:00,350 --> 00:35:03,590
you pass again because no machinery had

00:35:02,180 --> 00:35:05,930
to kick into gear that the distances

00:35:03,590 --> 00:35:08,420
were touching probably worst-case

00:35:05,930 --> 00:35:10,190
scenario you look for a dog that you've

00:35:08,420 --> 00:35:12,080
never looked for no need your company's

00:35:10,190 --> 00:35:13,850
ever looked for no one on the internet

00:35:12,080 --> 00:35:16,040
has ever looked for and you can finally

00:35:13,850 --> 00:35:17,600
get this server and it populates every

00:35:16,040 --> 00:35:19,760
cache along the back way that sort of

00:35:17,600 --> 00:35:21,620
everything again until that hash line

00:35:19,760 --> 00:35:23,420
create some buyers and if you're running

00:35:21,620 --> 00:35:25,340
this site you can do smart things to

00:35:23,420 --> 00:35:27,950
specify when they expire alive it

00:35:25,340 --> 00:35:29,570
doesn't rest as it matters and it has a

00:35:27,950 --> 00:35:31,430
good body and the headers of the

00:35:29,570 --> 00:35:33,830
metadata or the infrastructure right in

00:35:31,430 --> 00:35:36,850
the platforms all the tools that's one

00:35:33,830 --> 00:35:41,000
of the amazing things about rest and so

00:35:36,850 --> 00:35:42,680
grac is an HTTP to base protocol so

00:35:41,000 --> 00:35:44,390
you've got the headers but you don't get

00:35:42,680 --> 00:35:46,400
all this wonderful depth attachment

00:35:44,390 --> 00:35:49,190
stuff because you don't use getting in

00:35:46,400 --> 00:35:51,650
that environment pack III has a team

00:35:49,190 --> 00:35:53,180
header protocol or tea hunter transport

00:35:51,650 --> 00:35:55,040
excuse me that you can use to set

00:35:53,180 --> 00:35:57,200
headers so you can get better benefits

00:35:55,040 --> 00:35:59,990
and stuff like that even if it's UCP

00:35:57,200 --> 00:36:01,820
level with rip but you can run approved

00:35:59,990 --> 00:36:03,860
over HTTP GET cutters that way two

00:36:01,820 --> 00:36:06,590
different possibilities there

00:36:03,860 --> 00:36:08,780
but again thrift is going typically post

00:36:06,590 --> 00:36:11,750
all the way back you're using HTTP

00:36:08,780 --> 00:36:14,090
however there's any things about

00:36:11,750 --> 00:36:15,920
cripples i private but that's one of the

00:36:14,090 --> 00:36:17,900
things about the rest api

00:36:15,920 --> 00:36:19,730
you're using the web if you're going out

00:36:17,900 --> 00:36:22,040
over the Internet rest is king and

00:36:19,730 --> 00:36:23,840
there's so many benefits is just some of

00:36:22,040 --> 00:36:26,780
them right all of the infrastructure to

00:36:23,840 --> 00:36:29,900
link the HTTP protocol is really a

00:36:26,780 --> 00:36:34,460
powerful important thing and rest api's

00:36:29,900 --> 00:36:37,850
don't plug into it they are it right

00:36:34,460 --> 00:36:39,440
they use natively all of the verbs and

00:36:37,850 --> 00:36:41,660
the headers and things like that so

00:36:39,440 --> 00:36:44,810
there's been pretty significant managers

00:36:41,660 --> 00:36:46,580
to using rest outside and I really

00:36:44,810 --> 00:36:48,800
actually have just probably curiously

00:36:46,580 --> 00:36:50,660
recurring communications path which is a

00:36:48,800 --> 00:36:52,310
ripoff of the C++ curiously return

00:36:50,660 --> 00:36:55,370
template patents and the idea is that

00:36:52,310 --> 00:36:57,230
people tend to use rest outside their

00:36:55,370 --> 00:36:59,360
infrastructure and they tend to use are

00:36:57,230 --> 00:37:00,260
you see on the inside as ultimately it's

00:36:59,360 --> 00:37:02,240
stuff like again

00:37:00,260 --> 00:37:04,610
pressure to break up roundfield stopper

00:37:02,240 --> 00:37:06,830
to get fast and they need to do

00:37:04,610 --> 00:37:08,480
something internally but on the outside

00:37:06,830 --> 00:37:10,220
breast is the fastest thing we could

00:37:08,480 --> 00:37:12,230
have picked anyone and it's also needed

00:37:10,220 --> 00:37:14,180
and it's also easy for other developers

00:37:12,230 --> 00:37:16,220
to adopt right I'm not saying that the

00:37:14,180 --> 00:37:19,670
referee TREC isn't it but it's less

00:37:16,220 --> 00:37:20,240
right so everybody knows reps right HDPE

00:37:19,670 --> 00:37:23,690
hazel

00:37:20,240 --> 00:37:26,540
so the rift hasn't been into HTTP HTTP

00:37:23,690 --> 00:37:29,210
web socket from the browser and it can

00:37:26,540 --> 00:37:31,760
go all the way back to the back end so

00:37:29,210 --> 00:37:33,170
you don't need a gate there this is the

00:37:31,760 --> 00:37:34,280
downfall of hearing Steve actually if

00:37:33,170 --> 00:37:37,040
you're coming from the browser you have

00:37:34,280 --> 00:37:40,120
that gateway to translate the xhr type

00:37:37,040 --> 00:37:42,440
stuff into the underlying calls

00:37:40,120 --> 00:37:44,090
maybe they'll examine at the present

00:37:42,440 --> 00:37:46,190
they just actually came out with and

00:37:44,090 --> 00:37:47,720
gave myself and then there's the T

00:37:46,190 --> 00:37:50,540
header transport so you get quatre

00:37:47,720 --> 00:37:53,060
benefits even the prompt a protocol and

00:37:50,540 --> 00:37:54,650
to give HTTP altogether I get the

00:37:53,060 --> 00:37:57,460
performance and still get the benefits

00:37:54,650 --> 00:38:00,490
with infrastructure headers is watching

00:37:57,460 --> 00:38:02,690
so service message across any concerns

00:38:00,490 --> 00:38:05,720
the last thing I want to find out about

00:38:02,690 --> 00:38:07,700
micro services and passion Creek is

00:38:05,720 --> 00:38:12,190
there's a lot of stuff you have to do in

00:38:07,700 --> 00:38:14,450
a micro service environment okay so a

00:38:12,190 --> 00:38:17,480
lot of things you have to micro service

00:38:14,450 --> 00:38:20,210
environment that don't have anything to

00:38:17,480 --> 00:38:22,970
do with your app and it's a hassle right

00:38:20,210 --> 00:38:25,570
oh you know wait we're I am services

00:38:22,970 --> 00:38:28,220
firm we don't need security in-depth

00:38:25,570 --> 00:38:29,900
these things might go to the cloud an

00:38:28,220 --> 00:38:32,090
untrusted environment that means if I

00:38:29,900 --> 00:38:34,670
make an RPC call that thing has to be

00:38:32,090 --> 00:38:36,620
encrypted because you're leaving in the

00:38:34,670 --> 00:38:38,630
box right and we don't only the network

00:38:36,620 --> 00:38:41,870
it's sure you know there's crazy stuff

00:38:38,630 --> 00:38:43,790
happening there so we want a mutual TLS

00:38:41,870 --> 00:38:46,490
right not only do I want you to encrypt

00:38:43,790 --> 00:38:48,290
the data and privacy authenticate the

00:38:46,490 --> 00:38:50,210
other guy make sure that we can trust in

00:38:48,290 --> 00:38:53,360
these the guys should be talking to me

00:38:50,210 --> 00:38:54,920
so that's a lot right every single

00:38:53,360 --> 00:38:56,990
server side building I have to use

00:38:54,920 --> 00:38:59,750
privacy and authentication and utility

00:38:56,990 --> 00:39:02,930
websites we're about tracing who called

00:38:59,750 --> 00:39:04,520
who this customer hit something and 15

00:39:02,930 --> 00:39:07,030
different services were invoked there's

00:39:04,520 --> 00:39:09,110
a problem who called who write

00:39:07,030 --> 00:39:11,510
context-sensitive observability is

00:39:09,110 --> 00:39:12,490
called tracing to eat tracing what about

00:39:11,510 --> 00:39:14,350
written

00:39:12,490 --> 00:39:16,660
right you don't have overloaded somebody

00:39:14,350 --> 00:39:18,430
without load balancing and discovering

00:39:16,660 --> 00:39:20,260
services that might be another clusters

00:39:18,430 --> 00:39:20,770
them house checks and all that sort of

00:39:20,260 --> 00:39:22,360
stuff

00:39:20,770 --> 00:39:24,070
these are cross-cutting concerns they

00:39:22,360 --> 00:39:26,440
affect every single micro service you

00:39:24,070 --> 00:39:28,810
probably want to do that once and just

00:39:26,440 --> 00:39:31,030
have it saw so there's the state on the

00:39:28,810 --> 00:39:32,920
surface tension we should becoming

00:39:31,030 --> 00:39:34,420
really popular there's a particular one

00:39:32,920 --> 00:39:37,119
that's becoming really popular amongst

00:39:34,420 --> 00:39:39,990
them which is this Keogh and it works

00:39:37,119 --> 00:39:43,420
like this in Internet is cluster or in

00:39:39,990 --> 00:39:45,910
Cloud Foundry environment or in an

00:39:43,420 --> 00:39:48,190
environment for a decent ongoing piece

00:39:45,910 --> 00:39:49,960
of it you can do something like this if

00:39:48,190 --> 00:39:51,850
you have a control plane up here so just

00:39:49,960 --> 00:39:54,610
you know perhaps and then you have these

00:39:51,850 --> 00:39:58,000
monstrosities and what's neat is and

00:39:54,610 --> 00:40:00,400
kubernetes you still believe checks the

00:39:58,000 --> 00:40:02,350
proxy in your pop the developer just

00:40:00,400 --> 00:40:04,150
builds their software like normal right

00:40:02,350 --> 00:40:07,270
oblivious to the fact that all the stuff

00:40:04,150 --> 00:40:09,250
is happening free and is neo injects the

00:40:07,270 --> 00:40:12,580
proxy into their pod now they make the

00:40:09,250 --> 00:40:14,380
call that proxy is going to figure out

00:40:12,580 --> 00:40:16,000
where they should be sending that

00:40:14,380 --> 00:40:17,830
traffic and it doesn't have to be the

00:40:16,000 --> 00:40:19,390
correct through nice cluster it could be

00:40:17,830 --> 00:40:21,070
a hybrid solution where it's a lot for

00:40:19,390 --> 00:40:22,570
him into the cloud might say hey for

00:40:21,070 --> 00:40:24,520
this activity I'm going to go to the

00:40:22,570 --> 00:40:25,840
line from side maybe into the cloud or

00:40:24,520 --> 00:40:27,369
hey that other the cloud that

00:40:25,840 --> 00:40:30,070
multi-platinum admin seems to be down

00:40:27,369 --> 00:40:32,109
over local or whatever right now so

00:40:30,070 --> 00:40:34,180
discovery load balancing rating all the

00:40:32,109 --> 00:40:37,240
stuffs gonna apply not to mention auth

00:40:34,180 --> 00:40:39,820
and TLS then this guy is going to set in

00:40:37,240 --> 00:40:41,980
traffic gap so again let me talked about

00:40:39,820 --> 00:40:44,140
in the database iPod starts up there's

00:40:41,980 --> 00:40:46,650
an excellent container that's also today

00:40:44,140 --> 00:40:49,030
that can immediately take to whatever

00:40:46,650 --> 00:40:50,890
resources this guy might pick time to

00:40:49,030 --> 00:40:52,900
access over a network and regrets under

00:40:50,890 --> 00:40:54,580
the proxy so everything is going to get

00:40:52,900 --> 00:40:57,220
wider loop load will be back to the

00:40:54,580 --> 00:41:00,010
proxy proxy Jenn decides how to make

00:40:57,220 --> 00:41:02,140
install talks to the other proxy which

00:41:00,010 --> 00:41:03,760
it's the off and the TLS all sorted and

00:41:02,140 --> 00:41:06,609
then over the local loopback this guy

00:41:03,760 --> 00:41:08,650
calls me a service and so the control

00:41:06,609 --> 00:41:10,930
plane is get checked and policy like hey

00:41:08,650 --> 00:41:13,060
you're not that smart that guy geez you

00:41:10,930 --> 00:41:14,800
didn't camp right amongst other things

00:41:13,060 --> 00:41:18,220
right all this to be controlled

00:41:14,800 --> 00:41:20,350
visualize at this high level and so in

00:41:18,220 --> 00:41:21,970
an Apache thrift environment where we

00:41:20,350 --> 00:41:23,400
just built that little micro service we

00:41:21,970 --> 00:41:25,890
detune your eyes that we

00:41:23,400 --> 00:41:28,410
plating readies you can get this meshing

00:41:25,890 --> 00:41:29,069
functionality for free and that's pretty

00:41:28,410 --> 00:41:31,289
powerful

00:41:29,069 --> 00:41:34,710
that will work by the way if your PC and

00:41:31,289 --> 00:41:37,349
with rest and one of the things that I

00:41:34,710 --> 00:41:37,770
can say is that this video dashboard

00:41:37,349 --> 00:41:40,170
that

00:41:37,770 --> 00:41:42,210
Jiali is the new guy that they use for

00:41:40,170 --> 00:41:44,069
visualization you can see here's a real

00:41:42,210 --> 00:41:48,270
example of an Apache thrift test client

00:41:44,069 --> 00:41:50,220
okay yeah calling a service which that

00:41:48,270 --> 00:41:52,230
calls it up a guy on the back end and

00:41:50,220 --> 00:41:55,039
that's that's an example of just you

00:41:52,230 --> 00:41:57,599
know with action thrift employee is

00:41:55,039 --> 00:41:59,880
definitely she got a note that you can

00:41:57,599 --> 00:42:00,450
see a high-level TCP statistics and

00:41:59,880 --> 00:42:02,520
things like that

00:42:00,450 --> 00:43:34,049
today is steel doesn't understand

00:42:02,520 --> 00:43:34,820
companies curve a fine bully age the

00:43:34,049 --> 00:43:39,860
person

00:43:34,820 --> 00:43:45,340
over at the Emporium and then maybe

00:43:39,860 --> 00:43:45,340
Chicago at the so

00:44:20,300 --> 00:44:23,489
[Music]

00:45:54,780 --> 00:45:57,829
[Music]

00:46:19,970 --> 00:46:23,160
[Music]

00:46:47,150 --> 00:46:50,189
[Music]

00:48:21,700 --> 00:48:24,780

YouTube URL: https://www.youtube.com/watch?v=hqeATdYnlNY


