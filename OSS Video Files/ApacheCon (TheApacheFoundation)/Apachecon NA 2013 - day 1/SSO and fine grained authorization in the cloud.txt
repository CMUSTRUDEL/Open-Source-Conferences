Title: SSO and fine grained authorization in the cloud
Publication date: 2013-10-17
Playlist: Apachecon NA 2013 - day 1
Description: 
	Oliver Wulff ApacheCon NA 2013
Cloud Crowd
Captions: 
	00:00:10,219 --> 00:00:17,990
so hi there welcome to the presentation

00:00:14,400 --> 00:00:21,449
about single sign-on and fine-grained

00:00:17,990 --> 00:00:26,010
authorization in the clouds my name is

00:00:21,449 --> 00:00:29,039
Oliver wolf I'm based in Switzerland in

00:00:26,010 --> 00:00:31,800
Zurich and what what I'm telling our

00:00:29,039 --> 00:00:36,540
explaining to you today is really based

00:00:31,800 --> 00:00:42,469
on customer use cases which finally

00:00:36,540 --> 00:00:42,469
finally became a sub-project of CX F

00:00:42,829 --> 00:00:48,180
brief introduction about myself my role

00:00:45,870 --> 00:00:50,430
with customer is a little bit different

00:00:48,180 --> 00:00:53,699
sometimes a principal engineer sometimes

00:00:50,430 --> 00:00:55,770
solution architect I'd have quite a lot

00:00:53,699 --> 00:00:59,010
of experience with web services started

00:00:55,770 --> 00:01:01,590
with them axis or even with how was it

00:00:59,010 --> 00:01:05,250
called Apache soap before and ended up

00:01:01,590 --> 00:01:07,890
now with zxf security was always a key

00:01:05,250 --> 00:01:12,990
thing independent where it was web

00:01:07,890 --> 00:01:16,710
services or Cobra I'm not only

00:01:12,990 --> 00:01:21,000
developing in Java they are still have

00:01:16,710 --> 00:01:24,630
to do some things in C++ or C sharp for

00:01:21,000 --> 00:01:30,450
the Microsoft platform Apache CX of pmc

00:01:24,630 --> 00:01:33,180
member and i'm working for talent you

00:01:30,450 --> 00:01:36,930
see a lot about the history of the of

00:01:33,180 --> 00:01:39,329
this patch if zxf edits project i am on

00:01:36,930 --> 00:01:44,100
my block and you can reach me on these

00:01:39,329 --> 00:01:46,500
email address so the agenda does look

00:01:44,100 --> 00:01:50,880
like this i will initially start with

00:01:46,500 --> 00:01:54,720
the challenges or how have you solved

00:01:50,880 --> 00:01:57,750
fine-grained authorization maybe 10 15

00:01:54,720 --> 00:02:00,270
years ago what are the challenges today

00:01:57,750 --> 00:02:05,040
to deploy an application in the cloud

00:02:00,270 --> 00:02:06,899
and how to address that then i will give

00:02:05,040 --> 00:02:11,430
them a brief introduction about the

00:02:06,899 --> 00:02:12,430
patches exf edits and we'll make some

00:02:11,430 --> 00:02:15,400
Devils

00:02:12,430 --> 00:02:18,519
based on the vedas and sts use cases

00:02:15,400 --> 00:02:22,209
which are also shipped as part of Apache

00:02:18,519 --> 00:02:24,819
fittings and then the more interesting

00:02:22,209 --> 00:02:27,689
part especially also for for the cloud

00:02:24,819 --> 00:02:30,969
is that the role of the relying party

00:02:27,689 --> 00:02:33,969
IDP I will come in detail stand to that

00:02:30,969 --> 00:02:37,150
and finally I will end the presentation

00:02:33,969 --> 00:02:45,879
with a short outlook of the roadmap of

00:02:37,150 --> 00:02:49,870
Hades so how did the application

00:02:45,879 --> 00:02:52,450
security look like 10 years ago so you

00:02:49,870 --> 00:02:54,970
had maybe single sign-on solutions in

00:02:52,450 --> 00:02:58,599
place very often with their reverse

00:02:54,970 --> 00:03:01,290
proxy in front of the applications but

00:02:58,599 --> 00:03:05,109
you were using some kind of proprietary

00:03:01,290 --> 00:03:07,780
protocol between the proxy and the

00:03:05,109 --> 00:03:10,659
backend application and also some

00:03:07,780 --> 00:03:14,980
proprietary single sign-on tokens this

00:03:10,659 --> 00:03:18,099
means that you need the same product or

00:03:14,980 --> 00:03:22,239
the same solution at the reverse proxy

00:03:18,099 --> 00:03:25,629
site for the application server and for

00:03:22,239 --> 00:03:27,669
the central security service so

00:03:25,629 --> 00:03:33,430
therefore you do have a tight coupling

00:03:27,669 --> 00:03:36,939
to this vendor and also very often that

00:03:33,430 --> 00:03:40,150
the backend application is validating

00:03:36,939 --> 00:03:43,209
the security tokens against the central

00:03:40,150 --> 00:03:44,769
security server again so which is an

00:03:43,209 --> 00:03:49,750
additional remote colonization

00:03:44,769 --> 00:03:51,699
additional dependency and the only thing

00:03:49,750 --> 00:03:55,900
which was really supported or which is

00:03:51,699 --> 00:03:58,930
also standardized by j ee or by x dot

00:03:55,900 --> 00:04:01,949
net is role based access control but

00:03:58,930 --> 00:04:05,560
usually this is not sufficient to

00:04:01,949 --> 00:04:10,180
authorized users what they can do with

00:04:05,560 --> 00:04:12,699
your applications another thing is user

00:04:10,180 --> 00:04:16,299
and ID management was all internal

00:04:12,699 --> 00:04:20,030
within your company so it was not very

00:04:16,299 --> 00:04:24,200
flexible to integrate other ideas

00:04:20,030 --> 00:04:29,450
so what are the security challenges more

00:04:24,200 --> 00:04:32,900
for non IT companies they are thinking

00:04:29,450 --> 00:04:35,750
about should i buy a product or buy a

00:04:32,900 --> 00:04:40,940
solution I'm out in the cloud or should

00:04:35,750 --> 00:04:43,220
I build it on my own and another

00:04:40,940 --> 00:04:45,440
challenge I have is that they might

00:04:43,220 --> 00:04:49,510
deploy solutions in their own data

00:04:45,440 --> 00:04:54,020
center but to be more flexible agile

00:04:49,510 --> 00:04:56,000
good to better scale they are thinking

00:04:54,020 --> 00:05:00,650
about hosting the applications in the

00:04:56,000 --> 00:05:04,910
clouds for my companies which are

00:05:00,650 --> 00:05:06,770
providing software as a service they do

00:05:04,910 --> 00:05:10,220
have the challenges how can they

00:05:06,770 --> 00:05:13,669
integrate the different between

00:05:10,220 --> 00:05:15,740
customers they do have they do have

00:05:13,669 --> 00:05:18,229
their own ID system how can they

00:05:15,740 --> 00:05:21,410
integrate that into their applications

00:05:18,229 --> 00:05:23,450
without replicating all the user

00:05:21,410 --> 00:05:25,970
information of provisional the user

00:05:23,450 --> 00:05:30,860
information out into the cloud which is

00:05:25,970 --> 00:05:34,820
also again is security risk thought that

00:05:30,860 --> 00:05:37,580
this was this point and finally how can

00:05:34,820 --> 00:05:41,810
an application deployed in the cloud get

00:05:37,580 --> 00:05:44,720
access to user information because based

00:05:41,810 --> 00:05:48,340
on these user information you can then

00:05:44,720 --> 00:05:54,580
do some some some sort of access control

00:05:48,340 --> 00:05:57,500
maybe where the user is located in which

00:05:54,580 --> 00:06:04,220
organization level he is aligned what

00:05:57,500 --> 00:06:06,789
his functional roles are etc etc the

00:06:04,220 --> 00:06:10,400
challenge Terry is that usually this

00:06:06,789 --> 00:06:13,729
information is available on premise in

00:06:10,400 --> 00:06:17,210
some of the SIS IDM systems but you

00:06:13,729 --> 00:06:21,950
can't access that from front from the

00:06:17,210 --> 00:06:24,440
cloud and you want to avoid replicating

00:06:21,950 --> 00:06:26,620
what I managed before this information

00:06:24,440 --> 00:06:30,100
to the cloud solution

00:06:26,620 --> 00:06:33,130
and finally I'm due to the fact that

00:06:30,100 --> 00:06:37,060
everything which went beyond role-based

00:06:33,130 --> 00:06:41,410
access control was developed custom ly

00:06:37,060 --> 00:06:44,199
within the application may you always

00:06:41,410 --> 00:06:47,440
have their a lot of security code a lot

00:06:44,199 --> 00:06:50,710
of complexity in your application code

00:06:47,440 --> 00:06:54,370
instead of really concentrating so that

00:06:50,710 --> 00:06:57,699
you can focus on them on the bib on the

00:06:54,370 --> 00:07:01,330
business code of your application so

00:06:57,699 --> 00:07:03,010
these are the challenges when you want

00:07:01,330 --> 00:07:06,729
to deploy something the cloud and

00:07:03,010 --> 00:07:12,150
integrate with or combined with them

00:07:06,729 --> 00:07:12,150
with the IDM system you have on premise

00:07:14,430 --> 00:07:21,760
so what are the gaps i already mentioned

00:07:18,340 --> 00:07:25,120
in fine grained authorization everything

00:07:21,760 --> 00:07:28,180
beyond is application-specific you do

00:07:25,120 --> 00:07:31,270
have this tight coupling of custom

00:07:28,180 --> 00:07:34,450
security components from the central

00:07:31,270 --> 00:07:37,990
server the the reverse proxy and the

00:07:34,450 --> 00:07:40,710
agent or proxy agent whatever in front

00:07:37,990 --> 00:07:42,520
of your application these all are

00:07:40,710 --> 00:07:44,860
communicating with each other in a

00:07:42,520 --> 00:07:49,210
proprietary fashion and therefore you

00:07:44,860 --> 00:07:52,539
are tightly coupled you are also tightly

00:07:49,210 --> 00:07:54,400
coupled through a single user domain

00:07:52,539 --> 00:07:59,080
because as soon as you have to integrate

00:07:54,400 --> 00:08:03,099
an additional LDAP directory yeah what

00:07:59,080 --> 00:08:05,229
are you doing you can start adding some

00:08:03,099 --> 00:08:08,680
more sophisticated logic in your

00:08:05,229 --> 00:08:10,660
application to either checked it against

00:08:08,680 --> 00:08:12,490
these other directory and against the

00:08:10,660 --> 00:08:14,349
other relative directory so there are

00:08:12,490 --> 00:08:17,949
different ways how you could address

00:08:14,349 --> 00:08:21,570
that but you do have a lot of security

00:08:17,949 --> 00:08:21,570
code within your application

00:08:23,080 --> 00:08:32,969
an interesting point is you are not

00:08:27,310 --> 00:08:38,019
really a child in integrating another

00:08:32,969 --> 00:08:40,450
customer b2b customer like you're

00:08:38,019 --> 00:08:43,599
providing a service like salesforce.com

00:08:40,450 --> 00:08:47,670
and you are want to integrate now that

00:08:43,599 --> 00:08:47,670
with another with the insurance company

00:08:48,570 --> 00:08:54,220
till till you have integrated and

00:08:51,519 --> 00:08:57,160
provisioned all the users from this

00:08:54,220 --> 00:08:59,290
insurance company into your system you

00:08:57,160 --> 00:09:02,079
are already replicating everything this

00:08:59,290 --> 00:09:06,310
takes quite a lot of time and especially

00:09:02,079 --> 00:09:08,260
it also is a security risk because what

00:09:06,310 --> 00:09:11,440
happens if the employee from this

00:09:08,260 --> 00:09:14,440
insurance company is leaving the user

00:09:11,440 --> 00:09:17,890
and the credentials are still in the

00:09:14,440 --> 00:09:20,320
salesforce.com ma'am my application so

00:09:17,890 --> 00:09:23,140
he can still log in there so you have to

00:09:20,320 --> 00:09:31,209
manually d provision the user there

00:09:23,140 --> 00:09:32,500
first and with sometimes you might you

00:09:31,209 --> 00:09:34,390
can have different kind of

00:09:32,500 --> 00:09:37,209
authentication mechanism like user and

00:09:34,390 --> 00:09:40,000
password or cameras or maybe a

00:09:37,209 --> 00:09:43,899
two-factor authentication but all that

00:09:40,000 --> 00:09:46,329
was usually built in in your application

00:09:43,899 --> 00:09:49,120
code of course there are there are

00:09:46,329 --> 00:09:52,660
frameworks out there like like spring

00:09:49,120 --> 00:09:54,940
security and for instance where you can

00:09:52,660 --> 00:09:59,760
decouple that a little bit but it's

00:09:54,940 --> 00:09:59,760
still part of your application bundle a

00:10:00,120 --> 00:10:08,320
ver very important gap is that when you

00:10:04,390 --> 00:10:10,779
do have in implement that the web single

00:10:08,320 --> 00:10:13,449
sign-on for your web applications and

00:10:10,779 --> 00:10:17,019
you are done interacting with them web

00:10:13,449 --> 00:10:19,630
services and you would like to trigger

00:10:17,019 --> 00:10:24,390
this request on behalf of the logged in

00:10:19,630 --> 00:10:27,459
user there was no real solution in place

00:10:24,390 --> 00:10:29,410
because the vendors providing web as so

00:10:27,459 --> 00:10:32,230
solution didn't care about web services

00:10:29,410 --> 00:10:32,910
and the web service a solution didn't

00:10:32,230 --> 00:10:35,580
care about

00:10:32,910 --> 00:10:39,540
how to integrate with the web

00:10:35,580 --> 00:10:43,320
application so this was also a big gap

00:10:39,540 --> 00:10:46,530
and finally when an application

00:10:43,320 --> 00:10:51,510
developers once starts testing its its

00:10:46,530 --> 00:10:53,940
application how can he do that if the

00:10:51,510 --> 00:10:57,480
authentication authorization is based on

00:10:53,940 --> 00:11:00,540
some central servers like reverse proxy

00:10:57,480 --> 00:11:03,990
and the central security server you

00:11:00,540 --> 00:11:09,390
can't deploy that on on your on your

00:11:03,990 --> 00:11:12,150
machine so we had some kind of mechanism

00:11:09,390 --> 00:11:14,670
in the application to maybe disable it

00:11:12,150 --> 00:11:16,890
or have a complete different kind of

00:11:14,670 --> 00:11:19,170
security mechanism when you are

00:11:16,890 --> 00:11:22,260
developing locally and when you deploy

00:11:19,170 --> 00:11:24,120
it then into user acceptance test

00:11:22,260 --> 00:11:29,670
environment it's completely different

00:11:24,120 --> 00:11:33,200
fails so these are the gaps where we

00:11:29,670 --> 00:11:38,670
were looking and finding a solution

00:11:33,200 --> 00:11:41,730
which is much more flexible the key

00:11:38,670 --> 00:11:45,690
things were on the one hand we want to

00:11:41,730 --> 00:11:49,620
have this indirect trust relationship to

00:11:45,690 --> 00:11:52,710
the security server which means that the

00:11:49,620 --> 00:11:54,930
the application server doesn't have to

00:11:52,710 --> 00:11:58,200
go to the security server to validate

00:11:54,930 --> 00:12:00,300
the ticket or or whatever he can just

00:11:58,200 --> 00:12:02,820
based on the information he is getting

00:12:00,300 --> 00:12:05,850
oh based on the ticket he is getting he

00:12:02,820 --> 00:12:08,450
can validate on that on its own it will

00:12:05,850 --> 00:12:12,390
reduce the load on the security server

00:12:08,450 --> 00:12:17,210
then user information which are required

00:12:12,390 --> 00:12:20,760
for the fine-grained authorization are

00:12:17,210 --> 00:12:23,810
pushed to the application instead of the

00:12:20,760 --> 00:12:27,840
application as the polders information

00:12:23,810 --> 00:12:30,290
and that that's that's this was a key

00:12:27,840 --> 00:12:32,460
thing all the different kind of of

00:12:30,290 --> 00:12:35,790
authentication mechanism user and

00:12:32,460 --> 00:12:37,950
password Kerberos whatever we wanted to

00:12:35,790 --> 00:12:40,740
avoid that every application has to

00:12:37,950 --> 00:12:44,399
repeat that or re-implement that

00:12:40,740 --> 00:12:46,430
again in their application so instead we

00:12:44,399 --> 00:12:49,350
want to externalize the whole

00:12:46,430 --> 00:12:52,680
authentication process to a central

00:12:49,350 --> 00:12:55,560
server which means if one project has a

00:12:52,680 --> 00:12:59,430
requirement for maybe 25 two-factor

00:12:55,560 --> 00:13:01,950
authentication we implement that once in

00:12:59,430 --> 00:13:05,430
the central security server and every

00:13:01,950 --> 00:13:08,640
application which also want to benefit

00:13:05,430 --> 00:13:11,100
from this feature can just configure

00:13:08,640 --> 00:13:16,470
that and use it but they don't have to

00:13:11,100 --> 00:13:18,180
care about it and the whole thing I

00:13:16,470 --> 00:13:20,760
mentioned before the mock testing it

00:13:18,180 --> 00:13:23,010
should be quite a lightweight open

00:13:20,760 --> 00:13:26,490
source solutions so that you can really

00:13:23,010 --> 00:13:31,830
run everything locally in a simplified

00:13:26,490 --> 00:13:34,470
in my fashion and last but absolutely

00:13:31,830 --> 00:13:37,560
not least everything should be based on

00:13:34,470 --> 00:13:40,709
industry standards so that we don't have

00:13:37,560 --> 00:13:43,080
the coupling to a single wet vendor in

00:13:40,709 --> 00:13:47,220
all the components central security

00:13:43,080 --> 00:13:49,829
server reverse proxy and application so

00:13:47,220 --> 00:13:53,300
that these components they still exist

00:13:49,829 --> 00:13:55,620
or you still need them but they are

00:13:53,300 --> 00:14:02,649
communicating based on a standard or

00:13:55,620 --> 00:14:04,720
based on an industry standard so

00:14:02,649 --> 00:14:09,490
what is the solution of what is the

00:14:04,720 --> 00:14:12,449
standard we found to achieve that so we

00:14:09,490 --> 00:14:15,720
decided they're 24 ws-federation

00:14:12,449 --> 00:14:21,100
specification which is an oasis standard

00:14:15,720 --> 00:14:23,379
since 2009 a very key Phineas it's it

00:14:21,100 --> 00:14:28,389
does not mandate any kind of security

00:14:23,379 --> 00:14:33,069
tokens you can use sam'l once ml to

00:14:28,389 --> 00:14:34,990
accustom token even for a migration path

00:14:33,069 --> 00:14:37,259
when you still have custom security

00:14:34,990 --> 00:14:41,470
tokens in place and you need to support

00:14:37,259 --> 00:14:43,899
still both you can do that with this man

00:14:41,470 --> 00:14:49,139
with the solution because it's a token

00:14:43,899 --> 00:14:52,869
agnostic and the key thing there is it

00:14:49,139 --> 00:14:55,600
leverage the w's trust also an oasis

00:14:52,869 --> 00:14:57,790
standard which defines us this so-called

00:14:55,600 --> 00:15:00,459
security token service we see it a

00:14:57,790 --> 00:15:03,660
little bit later which is responsible to

00:15:00,459 --> 00:15:06,999
issue security tokens to validate

00:15:03,660 --> 00:15:11,829
security tokens it's quite a flexible

00:15:06,999 --> 00:15:14,800
API to also add an additional

00:15:11,829 --> 00:15:17,079
information into the issued security

00:15:14,800 --> 00:15:20,709
token about the user these are the

00:15:17,079 --> 00:15:22,569
so-called claims this is also a term

00:15:20,709 --> 00:15:27,610
which has been introduced in the WC

00:15:22,569 --> 00:15:32,439
trust them as specification the cool

00:15:27,610 --> 00:15:35,610
thing is ws-federation is really the

00:15:32,439 --> 00:15:39,639
only standard which really reuses

00:15:35,610 --> 00:15:42,399
something which can be used on the one

00:15:39,639 --> 00:15:45,009
hand for the web application single sign

00:15:42,399 --> 00:15:47,889
on and on the other hand for web

00:15:45,009 --> 00:15:53,290
services we will see that later and also

00:15:47,889 --> 00:15:55,779
we my in the demo what we are using from

00:15:53,290 --> 00:15:58,990
doubles Federation specification is this

00:15:55,779 --> 00:16:01,569
passive request the profile and due to

00:15:58,990 --> 00:16:04,839
the fact that there is trust is a web

00:16:01,569 --> 00:16:09,309
server resource you can only call it as

00:16:04,839 --> 00:16:10,600
a soap client this is not a browser is

00:16:09,309 --> 00:16:14,139
not able to

00:16:10,600 --> 00:16:16,930
make any so-called so the idea of the

00:16:14,139 --> 00:16:21,730
passive request the profile of the Earth

00:16:16,930 --> 00:16:24,459
Federation is to adapt the symantec you

00:16:21,730 --> 00:16:28,440
have and the capabilities for a browser

00:16:24,459 --> 00:16:31,630
to map that the semantics of WS trust

00:16:28,440 --> 00:16:35,380
usually than just by mapping some

00:16:31,630 --> 00:16:39,730
elements in the in the ws trust call to

00:16:35,380 --> 00:16:44,759
two parameters HTTP parameters query

00:16:39,730 --> 00:16:48,069
parameters and the other thing is that

00:16:44,759 --> 00:16:51,430
an application which is then deployed in

00:16:48,069 --> 00:16:55,630
the cloud doesn't need connectivity to

00:16:51,430 --> 00:16:58,959
an IBM system so the only piece which

00:16:55,630 --> 00:17:06,780
needs a connectivity to the application

00:16:58,959 --> 00:17:09,640
and to the IDM system is the browser and

00:17:06,780 --> 00:17:12,490
of course the obvious Federation also

00:17:09,640 --> 00:17:15,640
supports different kind of authorization

00:17:12,490 --> 00:17:22,709
and authentication domains what we will

00:17:15,640 --> 00:17:22,709
see later awesome any questions so far

00:17:25,220 --> 00:17:30,919
okay because the security token service

00:17:27,980 --> 00:17:35,659
of ss trust plays such a key role I

00:17:30,919 --> 00:17:37,700
would just explain it quickly so what we

00:17:35,659 --> 00:17:40,490
have here and this is also standardized

00:17:37,700 --> 00:17:44,390
by Tobias trust is this security token

00:17:40,490 --> 00:17:47,090
service we do have here that the web

00:17:44,390 --> 00:17:50,510
service which is protected by the STS

00:17:47,090 --> 00:17:54,620
and the web service client so initially

00:17:50,510 --> 00:17:57,890
you start by sending a request to the

00:17:54,620 --> 00:18:03,080
STS providing some sort of my

00:17:57,890 --> 00:18:05,299
credentials for authentication the STS

00:18:03,080 --> 00:18:09,200
will validate these credentials and

00:18:05,299 --> 00:18:11,809
issue is secured a token whatever kind

00:18:09,200 --> 00:18:15,289
of security token you request it that's

00:18:11,809 --> 00:18:18,679
just the parameter a constant you are

00:18:15,289 --> 00:18:22,309
sending to the STS then the web service

00:18:18,679 --> 00:18:24,679
client is adding this security token to

00:18:22,309 --> 00:18:28,010
death with a web service call the

00:18:24,679 --> 00:18:30,110
service will validate that has a trust

00:18:28,010 --> 00:18:32,090
relationship with the STS so for

00:18:30,110 --> 00:18:36,230
instance if it's a saml token the saml

00:18:32,090 --> 00:18:38,900
token is signed the service must have

00:18:36,230 --> 00:18:43,630
deployed here that a certificate of the

00:18:38,900 --> 00:18:47,539
STS so that he is able to validate the

00:18:43,630 --> 00:18:50,390
that the saml token on its own without

00:18:47,539 --> 00:18:53,390
having to go back to the STS for

00:18:50,390 --> 00:18:56,450
validation so what that's also the

00:18:53,390 --> 00:19:00,980
reason why we combine w Federation with

00:18:56,450 --> 00:19:04,460
Sam OH to reduce this requirement of to

00:19:00,980 --> 00:19:06,470
having this connectivity okay he

00:19:04,460 --> 00:19:08,600
validated token is doing that the

00:19:06,470 --> 00:19:15,620
business logic and then sending the

00:19:08,600 --> 00:19:17,960
response back the cool thing here is the

00:19:15,620 --> 00:19:21,200
client itself doesn't have really to

00:19:17,960 --> 00:19:25,039
understand that the security tokens the

00:19:21,200 --> 00:19:28,340
target web service needs so the service

00:19:25,039 --> 00:19:30,169
can provide some security policies in

00:19:28,340 --> 00:19:32,840
their days there is some information

00:19:30,169 --> 00:19:33,880
what kind of token in eads maybe this

00:19:32,840 --> 00:19:36,400
one needs a mole

00:19:33,880 --> 00:19:40,270
sam'l 11 token an address and the two

00:19:36,400 --> 00:19:43,840
token and third one a custom token even

00:19:40,270 --> 00:19:45,850
it's a constant token in the response he

00:19:43,840 --> 00:19:49,060
is getting back he would just take this

00:19:45,850 --> 00:19:51,490
snippet of the of the XML response and

00:19:49,060 --> 00:19:54,360
added to the w security header he

00:19:51,490 --> 00:19:58,090
doesn't have to care about it or

00:19:54,360 --> 00:20:01,090
validate their ID issued token so that's

00:19:58,090 --> 00:20:03,640
quite powerful in the combination of

00:20:01,090 --> 00:20:07,620
them WS trust and doubles Federation

00:20:03,640 --> 00:20:07,620
them you can combine these

00:20:13,630 --> 00:20:27,220
yeah I reckon you can of course also

00:20:20,320 --> 00:20:33,840
send here for an occasion when yes

00:20:27,220 --> 00:20:38,250
we use that the option i use

00:20:33,840 --> 00:20:41,450
cameras so the the ZX f st s is

00:20:38,250 --> 00:20:41,450
supporting that as well

00:20:45,980 --> 00:20:48,610
ok

00:20:54,820 --> 00:21:03,669
okay what is some patchy see xfa deeds

00:20:58,690 --> 00:21:07,710
it is a project of Apache zxf the work

00:21:03,669 --> 00:21:13,090
started on reddit's at around meet of

00:21:07,710 --> 00:21:16,409
2011 the community am I still growing

00:21:13,090 --> 00:21:21,220
and we had the first release last year

00:21:16,409 --> 00:21:23,799
in June it hasn't been updated yet but

00:21:21,220 --> 00:21:28,720
thanks to comb and this right now it's

00:21:23,799 --> 00:21:32,409
the release 103 out and we are finishing

00:21:28,720 --> 00:21:34,720
the work for the 11 release I will tell

00:21:32,409 --> 00:21:43,470
you at the end what the new features are

00:21:34,720 --> 00:21:48,190
of the 11 release so how does fit is and

00:21:43,470 --> 00:21:50,649
ws-federation fit together I will

00:21:48,190 --> 00:21:53,620
explain here we do have on the one hand

00:21:50,649 --> 00:21:56,379
we do have the user machine with the

00:21:53,620 --> 00:22:00,220
browser installed we do have this

00:21:56,379 --> 00:22:02,740
central IDP identity provider and the

00:22:00,220 --> 00:22:06,519
security token service deployed as a

00:22:02,740 --> 00:22:09,450
central security server face is

00:22:06,519 --> 00:22:13,210
providing their the debate is IDP and

00:22:09,450 --> 00:22:17,879
Hades STS but finish STS is nothing else

00:22:13,210 --> 00:22:21,909
than the CSF sts pre-configured for the

00:22:17,879 --> 00:22:24,909
requirements we have here for this to

00:22:21,909 --> 00:22:28,899
fulfill double federation with the

00:22:24,909 --> 00:22:30,549
browser and on the other hand on the

00:22:28,899 --> 00:22:33,519
relying party side where the

00:22:30,549 --> 00:22:36,809
applications its we do have some sort of

00:22:33,519 --> 00:22:40,299
server container the web application and

00:22:36,809 --> 00:22:43,000
the vedas plug in the plugin component

00:22:40,299 --> 00:22:45,850
which is responsible to see when there

00:22:43,000 --> 00:22:50,409
are oh no unauthenticated requests

00:22:45,850 --> 00:22:53,799
trigger redirect to the IDP do the

00:22:50,409 --> 00:22:57,279
authentication challenge here and ensure

00:22:53,799 --> 00:23:00,220
the token post it back the plugin will

00:22:57,279 --> 00:23:03,100
validate the token and

00:23:00,220 --> 00:23:05,470
then trade the internal security context

00:23:03,100 --> 00:23:09,580
of the server container so that's the

00:23:05,470 --> 00:23:11,409
overall architecture what is very

00:23:09,580 --> 00:23:14,230
important here that all the

00:23:11,409 --> 00:23:16,480
authentication and issue offer of a

00:23:14,230 --> 00:23:24,929
security token is he delegated to the

00:23:16,480 --> 00:23:24,929
ladies zxf sts any questions

00:23:27,950 --> 00:23:32,580
for

00:23:30,659 --> 00:23:38,159
providers

00:23:32,580 --> 00:23:40,500
oh yeah the the homerun discovering you

00:23:38,159 --> 00:23:46,620
mean i think i will come to this a

00:23:40,500 --> 00:23:48,870
little bit later okay here we see Chazz

00:23:46,620 --> 00:23:51,480
it we see it a little bit in more detail

00:23:48,870 --> 00:23:54,330
what is really going on you can see I'm

00:23:51,480 --> 00:23:57,450
accessing a resource in the in the

00:23:54,330 --> 00:24:01,320
server container I'm not authenticated

00:23:57,450 --> 00:24:03,950
so I get redirected to the IDP I have to

00:24:01,320 --> 00:24:06,929
log in their posts and credentials of

00:24:03,950 --> 00:24:10,230
this one here I'm sending design in

00:24:06,929 --> 00:24:12,750
request that's standard our standardized

00:24:10,230 --> 00:24:15,950
by ws-federation how this signing

00:24:12,750 --> 00:24:19,380
request has to look like and it's a

00:24:15,950 --> 00:24:21,510
parameterised so you can define what

00:24:19,380 --> 00:24:24,179
kind of authentication mechanism you

00:24:21,510 --> 00:24:27,450
would like to have what your home realm

00:24:24,179 --> 00:24:31,169
is if you already know and a lot of

00:24:27,450 --> 00:24:34,380
other information then he will lo q lo

00:24:31,169 --> 00:24:38,039
que challenging ones create design in

00:24:34,380 --> 00:24:42,120
response which is by default the Semel

00:24:38,039 --> 00:24:44,039
to token post this sign in response to

00:24:42,120 --> 00:24:46,679
the relying party and he will then

00:24:44,039 --> 00:24:49,889
validate that based on the signature and

00:24:46,679 --> 00:24:54,289
based on the trust he has here with the

00:24:49,889 --> 00:24:54,289
IDP but there are no remote calls

00:24:58,539 --> 00:25:06,860
the number of features of the Apache see

00:25:02,119 --> 00:25:09,889
except as tests are quite impressive I

00:25:06,860 --> 00:25:13,549
have highlighted here the most important

00:25:09,889 --> 00:25:15,860
ones for the to sue which are used in in

00:25:13,549 --> 00:25:18,980
fairies so on the one hand we do have

00:25:15,860 --> 00:25:22,820
some 01 ones Cemil to you have that

00:25:18,980 --> 00:25:25,279
claim support which are the claims you

00:25:22,820 --> 00:25:29,419
made about the user or find it just user

00:25:25,279 --> 00:25:31,460
attributes claims transformation that's

00:25:29,419 --> 00:25:35,029
an interesting for not only federating

00:25:31,460 --> 00:25:38,960
identities but also federal claims which

00:25:35,029 --> 00:25:42,169
brings you even more flexibility it also

00:25:38,960 --> 00:25:44,480
supports intermediary the intermediary

00:25:42,169 --> 00:25:48,220
use case I will show that later in in an

00:25:44,480 --> 00:25:52,039
example with the on behalf of or act as

00:25:48,220 --> 00:25:57,980
element I think these are done with the

00:25:52,039 --> 00:26:01,039
most important ones so the fairies IEP

00:25:57,980 --> 00:26:05,019
and STS when you download that what you

00:26:01,039 --> 00:26:07,909
are getting there is you can

00:26:05,019 --> 00:26:12,109
authenticate mechanism is right now only

00:26:07,909 --> 00:26:13,789
username and password and you can then

00:26:12,109 --> 00:26:16,220
configure different kind of use of

00:26:13,789 --> 00:26:18,859
stores this can be for mock tests in

00:26:16,220 --> 00:26:21,590
just the file where you entering all or

00:26:18,859 --> 00:26:24,980
adding all your users and roles and

00:26:21,590 --> 00:26:27,950
claims or but it can also be an LDAP

00:26:24,980 --> 00:26:33,529
directory or you can plug in another Jas

00:26:27,950 --> 00:26:36,789
my login module for the claims or the

00:26:33,529 --> 00:26:40,999
role store you can use their file or

00:26:36,789 --> 00:26:43,279
LDAP directory as well or write

00:26:40,999 --> 00:26:45,529
something custom it's it's an API tanned

00:26:43,279 --> 00:26:46,990
interface you can just implement and

00:26:45,529 --> 00:26:50,970
extend

00:26:46,990 --> 00:26:53,350
the behavior all the thing around

00:26:50,970 --> 00:26:55,390
customizing that the creation of the

00:26:53,350 --> 00:26:59,500
saml token is a functionality provided

00:26:55,390 --> 00:27:02,020
by the ZX f st s which is very pluggable

00:26:59,500 --> 00:27:05,460
so you can trust enhance that and use

00:27:02,020 --> 00:27:08,290
that also within them within fairies and

00:27:05,460 --> 00:27:10,650
the cool thing is a small footprint so

00:27:08,290 --> 00:27:15,400
you can really start everything on your

00:27:10,650 --> 00:27:17,980
local machine the IDP and and you were

00:27:15,400 --> 00:27:19,809
application and finally when you are

00:27:17,980 --> 00:27:22,660
going into production the only

00:27:19,809 --> 00:27:27,130
difference is that the IDP is sitting

00:27:22,660 --> 00:27:30,490
somewhere else so then you are really

00:27:27,130 --> 00:27:33,520
testing the exact same functionality of

00:27:30,490 --> 00:27:36,580
the fairies plugin or newer in your

00:27:33,520 --> 00:27:41,130
development environment right like it is

00:27:36,580 --> 00:27:41,130
later running in uat or end production

00:27:44,530 --> 00:27:49,210
the faith is plug-in itself which is

00:27:46,600 --> 00:27:51,430
deployed on the relying party side on

00:27:49,210 --> 00:27:55,840
the application side we're supporting

00:27:51,430 --> 00:28:00,580
double federation 10 11 12 sam'l tokens

00:27:55,840 --> 00:28:03,540
11 and 20 we are supporting two types of

00:28:00,580 --> 00:28:06,520
trusts with the IDP that the so-called

00:28:03,540 --> 00:28:09,640
chain trust or direct trust so

00:28:06,520 --> 00:28:12,640
directress means i have to import the

00:28:09,640 --> 00:28:15,970
certificates which has been used by the

00:28:12,640 --> 00:28:19,030
STS to issue the token I must deploy

00:28:15,970 --> 00:28:21,040
that to the relying party and if the

00:28:19,030 --> 00:28:29,350
certificate expires I have to update

00:28:21,040 --> 00:28:31,840
that and sometimes this is Carson might

00:28:29,350 --> 00:28:34,030
might have a more an easier solution

00:28:31,840 --> 00:28:36,040
without having to deploy the certificate

00:28:34,030 --> 00:28:39,430
every time that's in the chain trust

00:28:36,040 --> 00:28:42,190
which means only the CA which has issued

00:28:39,430 --> 00:28:46,710
designing certificates must be deployed

00:28:42,190 --> 00:28:50,770
there but additionally you must define

00:28:46,710 --> 00:28:53,020
the exact issue the exact subject name

00:28:50,770 --> 00:28:55,240
of the certificate so when these

00:28:53,020 --> 00:28:58,150
certificate expires you might trust must

00:28:55,240 --> 00:29:02,320
ensure that the issue the subject name

00:28:58,150 --> 00:29:05,170
is still the same what was very

00:29:02,320 --> 00:29:08,200
important for the for the Vedas plugin

00:29:05,170 --> 00:29:11,650
is that its container independent as

00:29:08,200 --> 00:29:14,380
much as possible so i would say ninety

00:29:11,650 --> 00:29:17,950
percent of the whole logic is container

00:29:14,380 --> 00:29:21,190
independent and we do have been adapters

00:29:17,950 --> 00:29:25,150
for different kind of containers the

00:29:21,190 --> 00:29:28,570
current 103 release only supports tomcat

00:29:25,150 --> 00:29:32,800
save at seven but we are working now in

00:29:28,570 --> 00:29:34,480
supporting other containers as well the

00:29:32,800 --> 00:29:36,790
vedas parking is also able to publish

00:29:34,480 --> 00:29:40,210
the W Federation metadata information

00:29:36,790 --> 00:29:42,700
like their you can then see information

00:29:40,210 --> 00:29:45,010
like what are the required claims of the

00:29:42,700 --> 00:29:48,390
application would is the certificate

00:29:45,010 --> 00:29:52,230
which is used when you are using a trip

00:29:48,390 --> 00:29:54,510
encrypted tokens and so on it's also

00:29:52,230 --> 00:29:58,740
also standardized by the SS Federation

00:29:54,510 --> 00:30:03,480
specification now when we are when we

00:29:58,740 --> 00:30:06,810
look at the API level in Java the two

00:30:03,480 --> 00:30:09,890
api's you have is you can validate who

00:30:06,810 --> 00:30:13,440
is the user get user principal on the

00:30:09,890 --> 00:30:16,350
httpservletrequest and whether the user

00:30:13,440 --> 00:30:18,570
has a specific role but all the

00:30:16,350 --> 00:30:21,150
additional information you might have

00:30:18,570 --> 00:30:24,960
about the user in the Semel tokens you

00:30:21,150 --> 00:30:27,620
can't access we wanted to avoid that the

00:30:24,960 --> 00:30:31,290
applications have to write some

00:30:27,620 --> 00:30:33,930
processing logic for assemble tokens so

00:30:31,290 --> 00:30:36,120
therefore we introduced this Federation

00:30:33,930 --> 00:30:39,140
principle which allows you to access

00:30:36,120 --> 00:30:42,150
these claims information very easily so

00:30:39,140 --> 00:30:44,400
you can just get user principal and then

00:30:42,150 --> 00:30:46,290
down cars to the Federation principal

00:30:44,400 --> 00:30:52,260
and then you can access the claims

00:30:46,290 --> 00:30:55,830
collection and there is ok are here is

00:30:52,260 --> 00:30:58,380
the link is not correct and that's 44

00:30:55,830 --> 00:31:01,470
the IDP but everything is quite good

00:30:58,380 --> 00:31:05,480
documented how to configure what are the

00:31:01,470 --> 00:31:05,480
configuration options on the wiki

00:31:09,980 --> 00:31:14,020
um

00:31:11,800 --> 00:31:17,260
what you have configured I would just

00:31:14,020 --> 00:31:19,360
mention the most important things is on

00:31:17,260 --> 00:31:23,170
the plug-in side on the application side

00:31:19,360 --> 00:31:26,950
is who is the issuer or where is the IDP

00:31:23,170 --> 00:31:29,260
the URL of the IDP you must define the

00:31:26,950 --> 00:31:31,810
realm of your application that's justice

00:31:29,260 --> 00:31:36,660
disculpa ng naming context of your

00:31:31,810 --> 00:31:43,140
application and then the rest are all

00:31:36,660 --> 00:31:47,170
optional parameters so these two are are

00:31:43,140 --> 00:31:49,990
mandatory for configuration side and for

00:31:47,170 --> 00:31:52,420
the photo edits plugin you can but you

00:31:49,990 --> 00:31:54,850
cannot already control what kind of

00:31:52,420 --> 00:31:57,910
authentication mechanism you really want

00:31:54,850 --> 00:32:05,170
because it might be that the user is

00:31:57,910 --> 00:32:08,650
accessing some highly confidential sites

00:32:05,170 --> 00:32:11,020
within your application therefore only

00:32:08,650 --> 00:32:15,180
using a password authentication is not

00:32:11,020 --> 00:32:18,520
sufficient so you want something like

00:32:15,180 --> 00:32:21,340
certificate based authentication and

00:32:18,520 --> 00:32:24,580
whatever in stats so that's what you can

00:32:21,340 --> 00:32:27,580
configure that here this is part of the

00:32:24,580 --> 00:32:30,520
sign-in request into the IDP and he will

00:32:27,580 --> 00:32:34,470
is doing then the authentication on the

00:32:30,520 --> 00:32:34,470
application side is just configuration

00:32:36,920 --> 00:32:45,560
they are also i am some extension points

00:32:40,790 --> 00:32:47,360
within the various plug-in if you need

00:32:45,560 --> 00:32:53,560
to figure out what kind of

00:32:47,360 --> 00:32:58,040
authentication mechanism at runtime so

00:32:53,560 --> 00:33:01,130
for instance if you are accessing this

00:32:58,040 --> 00:33:03,080
uri within your application you might

00:33:01,130 --> 00:33:05,990
have a requirement to for more

00:33:03,080 --> 00:33:09,440
sophisticated authentication mechanism

00:33:05,990 --> 00:33:11,840
if you are accessing just that the root

00:33:09,440 --> 00:33:14,390
context maybe the default is sufficient

00:33:11,840 --> 00:33:18,490
so things like that you could handle

00:33:14,390 --> 00:33:23,840
here by the known callback handler

00:33:18,490 --> 00:33:25,820
interface or API provided by Java you

00:33:23,840 --> 00:33:27,880
can also customize security token

00:33:25,820 --> 00:33:31,010
validation so if you do have a

00:33:27,880 --> 00:33:35,390
proprietary security token in place and

00:33:31,010 --> 00:33:38,990
you need support for that it's easy to

00:33:35,390 --> 00:33:41,900
add this an additional validator two

00:33:38,990 --> 00:33:49,700
ladies and enable the validation of

00:33:41,900 --> 00:33:54,290
dense here is the simple example for the

00:33:49,700 --> 00:33:58,030
case for the home realm discovery we

00:33:54,290 --> 00:34:01,130
come to this am a little bit later but

00:33:58,030 --> 00:34:06,230
it should just illustrate what you are

00:34:01,130 --> 00:34:10,040
what you can do here so in every tall

00:34:06,230 --> 00:34:12,620
back fade it is providing to you you

00:34:10,040 --> 00:34:14,750
have access to the httpservletrequest so

00:34:12,620 --> 00:34:19,130
based on this information you are

00:34:14,750 --> 00:34:23,150
getting their source IP or whatever

00:34:19,130 --> 00:34:27,410
information you can dance for instance a

00:34:23,150 --> 00:34:30,110
ok my whole morale is XY set you set

00:34:27,410 --> 00:34:33,410
this on the call back on the call back

00:34:30,110 --> 00:34:36,730
object and then this information is then

00:34:33,410 --> 00:34:36,730
sent to the IDP

00:34:37,929 --> 00:34:47,899
there's also some this is documented on

00:34:40,940 --> 00:34:51,560
the wiki now I mentioned them that there

00:34:47,899 --> 00:34:53,720
was a strong focus on being aligned with

00:34:51,560 --> 00:34:59,420
industry standards and the reason behind

00:34:53,720 --> 00:35:02,329
this is interoperability and reduce

00:34:59,420 --> 00:35:04,670
tight coupling to a vendor so the

00:35:02,329 --> 00:35:09,050
fairies plugin has already been tested

00:35:04,670 --> 00:35:10,849
with different vendors so what we know

00:35:09,050 --> 00:35:13,520
the famous block in itself has been

00:35:10,849 --> 00:35:16,880
integrated of course with the IDP with

00:35:13,520 --> 00:35:19,900
the Vedas I DP this works of know whom

00:35:16,880 --> 00:35:22,579
is there is another company closer some

00:35:19,900 --> 00:35:26,119
company we have validated to fate its

00:35:22,579 --> 00:35:32,780
plug-in with this solution and with

00:35:26,119 --> 00:35:35,810
Microsoft ad FS and on the asp.net site

00:35:32,780 --> 00:35:38,150
the counterpart of editing in a spin in

00:35:35,810 --> 00:35:41,839
my class world is the windows identity

00:35:38,150 --> 00:35:44,800
foundation or wif and we have also

00:35:41,839 --> 00:35:49,579
validated this with the verisign EDP and

00:35:44,800 --> 00:35:54,010
with the Novem IDP i assume this one

00:35:49,579 --> 00:35:57,740
just works but I haven't tested its own

00:35:54,010 --> 00:36:00,530
the interesting thing here here with

00:35:57,740 --> 00:36:02,780
this innova my DP is we have integrated

00:36:00,530 --> 00:36:04,670
the CX f st s so the whole

00:36:02,780 --> 00:36:07,880
responsibility to issue that howkins

00:36:04,670 --> 00:36:10,819
validated token salam is within the ZX f

00:36:07,880 --> 00:36:15,109
st s and the innova my DP is only

00:36:10,819 --> 00:36:20,960
responsible to map the semantics of the

00:36:15,109 --> 00:36:22,910
sts to plain HTTP parameters and so on

00:36:20,960 --> 00:36:25,630
so to interact to be able to interact

00:36:22,910 --> 00:36:25,630
with a browser

00:36:28,340 --> 00:36:34,800
so as part of when you download

00:36:32,400 --> 00:36:38,130
Freddie's there are two examples there I

00:36:34,800 --> 00:36:45,420
will first show the simple web

00:36:38,130 --> 00:36:51,240
application what we see here is the IDP

00:36:45,420 --> 00:36:54,030
component the STS the browser and my web

00:36:51,240 --> 00:36:56,850
application and here it's the same

00:36:54,030 --> 00:37:00,150
mechanism as I illustrated them before

00:36:56,850 --> 00:37:01,970
with the redirect with the redirect here

00:37:00,150 --> 00:37:05,040
to the IDP the challenge the

00:37:01,970 --> 00:37:07,710
authentication issued a token by the

00:37:05,040 --> 00:37:11,700
security token service which is then

00:37:07,710 --> 00:37:12,869
validated here these are the standards

00:37:11,700 --> 00:37:16,310
which are involved here double

00:37:12,869 --> 00:37:20,580
Federation ones one two there is trust

00:37:16,310 --> 00:37:23,970
1010 sam'l 20 and the Oasis identity

00:37:20,580 --> 00:37:26,820
meta meta system is that they are

00:37:23,970 --> 00:37:30,000
standardizing some claims because as it

00:37:26,820 --> 00:37:32,910
is a Semel attribute has a name and the

00:37:30,000 --> 00:37:36,990
value and they are standardizing some

00:37:32,910 --> 00:37:40,230
names some claim names about for the

00:37:36,990 --> 00:37:42,570
user for instance this discreet the

00:37:40,230 --> 00:37:46,680
first name the last name email address

00:37:42,570 --> 00:37:49,619
and so on which means if you are aligned

00:37:46,680 --> 00:37:51,930
with the system and another system is

00:37:49,619 --> 00:37:54,619
also supporting this standard you don't

00:37:51,930 --> 00:37:58,609
have to do any kind of mappings because

00:37:54,619 --> 00:38:02,190
it is the under standard kind of naming

00:37:58,609 --> 00:38:09,210
the SDS capability we are using here is

00:38:02,190 --> 00:38:11,550
a username in the demo now and the

00:38:09,210 --> 00:38:14,160
Federation plug-in is just saml token

00:38:11,550 --> 00:38:18,660
validation with double uses for jay and

00:38:14,160 --> 00:38:20,990
anne opens mo that we just run the table

00:38:18,660 --> 00:38:20,990
now

00:38:38,599 --> 00:38:44,450
so what I do have here is I do it the

00:38:41,569 --> 00:38:49,220
concave instance where the IEP is

00:38:44,450 --> 00:38:52,839
deployed and an instance of Tomcat where

00:38:49,220 --> 00:38:52,839
the application is deployed

00:38:57,150 --> 00:39:05,000
have download it now Apache paid it's

00:39:00,950 --> 00:39:10,410
103 so what you all you have to do is

00:39:05,000 --> 00:39:12,950
copy these two more files in near to the

00:39:10,410 --> 00:39:12,950
IEP

00:39:17,100 --> 00:39:20,690
then let's start it

00:39:29,010 --> 00:39:32,780
can you see at the bank

00:39:36,960 --> 00:39:43,849
and then cook for the relying party

00:39:40,460 --> 00:39:43,849
let's start

00:40:02,789 --> 00:40:08,220
I would just

00:40:05,230 --> 00:40:08,220
build the application

00:40:15,400 --> 00:40:18,000
nearly

00:40:24,539 --> 00:40:29,029
so I'm accessing now this pretty subtle

00:40:27,749 --> 00:40:34,069
world

00:40:29,029 --> 00:40:36,519
application I don't have them session

00:40:34,069 --> 00:40:36,519
anymore

00:40:38,779 --> 00:40:42,400
are we looking now with

00:40:45,760 --> 00:40:54,890
now we see here on the IDP that

00:40:49,070 --> 00:40:59,090
something is going on and it's already

00:40:54,890 --> 00:41:01,760
back and I'm now logged in to to the

00:40:59,090 --> 00:41:08,270
application as he here the role I have

00:41:01,760 --> 00:41:11,480
and the claims configured for this user

00:41:08,270 --> 00:41:15,230
and we also see the initial boot struct

00:41:11,480 --> 00:41:19,360
out the bootstrap out was the 7000 which

00:41:15,230 --> 00:41:19,360
has been issued by the IEP

00:41:28,140 --> 00:41:35,930
and quickly show you

00:41:30,319 --> 00:41:38,809
what we have here in the server it is so

00:41:35,930 --> 00:41:43,910
I'm really losing just standard Java API

00:41:38,809 --> 00:41:46,910
access the user principal and also the

00:41:43,910 --> 00:41:50,809
standard API figure out our static list

00:41:46,910 --> 00:41:54,709
here just for demo purposes which roles

00:41:50,809 --> 00:41:56,719
the user has and finally and just cast

00:41:54,709 --> 00:41:59,420
into the Federation principle to have

00:41:56,719 --> 00:42:03,890
access to the planes collection and then

00:41:59,420 --> 00:42:10,059
I write all the claims out to the page

00:42:03,890 --> 00:42:10,059
and as saying for the security

00:42:17,540 --> 00:42:23,270
the Vedas plotting where is the

00:42:19,820 --> 00:42:26,750
deployment of the plug-in itself it will

00:42:23,270 --> 00:42:31,370
hear the Tomcat relying party and in

00:42:26,750 --> 00:42:35,540
here at with fairies subdirectory and

00:42:31,370 --> 00:42:41,240
India of all the required libraries you

00:42:35,540 --> 00:42:44,210
need what is a new CD and core which is

00:42:41,240 --> 00:42:49,030
about this size and the adaption for Tom

00:42:44,210 --> 00:42:49,030
cuts is that make ten percent

00:42:50,080 --> 00:42:58,559
you can also download this

00:42:53,339 --> 00:43:00,779
when you download and plugins Tomcat you

00:42:58,559 --> 00:43:03,650
don't have the library's last

00:43:00,779 --> 00:43:03,650
instructions

00:43:05,920 --> 00:43:09,839
do you have any questions so far

00:43:16,880 --> 00:43:23,799
and how much time do we have left people

00:43:20,799 --> 00:43:23,799
then

00:43:26,150 --> 00:43:34,190
I guess I will just explain quickly the

00:43:29,690 --> 00:43:37,609
second able to show you the integration

00:43:34,190 --> 00:43:41,599
of the web single sign on with the web

00:43:37,609 --> 00:43:43,520
service stack here in grey these were

00:43:41,599 --> 00:43:46,520
just the components which were involved

00:43:43,520 --> 00:43:48,859
before during the signing we do have

00:43:46,520 --> 00:43:52,119
here the web application at target web

00:43:48,859 --> 00:43:55,490
service I want to call I do have

00:43:52,119 --> 00:43:57,829
initially more the application here is

00:43:55,490 --> 00:44:01,670
in the position of the saml token which

00:43:57,829 --> 00:44:03,740
has been issued initially so when he is

00:44:01,670 --> 00:44:06,650
accessing here or trying to call the

00:44:03,740 --> 00:44:10,099
service he's validate the security

00:44:06,650 --> 00:44:12,170
policy of it is detecting that it's an

00:44:10,099 --> 00:44:15,859
issued token policy which means it must

00:44:12,170 --> 00:44:19,900
be issued by an sts so he sending a

00:44:15,859 --> 00:44:23,900
request to the STS and sending the the

00:44:19,900 --> 00:44:27,859
initially in the token initially issued

00:44:23,900 --> 00:44:31,220
by the essays on behalf of so that he is

00:44:27,859 --> 00:44:33,650
getting a new token which is understood

00:44:31,220 --> 00:44:37,150
and be able to validate it by the target

00:44:33,650 --> 00:44:40,849
web service also that is quite easily

00:44:37,150 --> 00:44:48,400
just run two times may even clean tomtom

00:44:40,849 --> 00:44:50,829
can redeploy and then execute the JSP

00:44:48,400 --> 00:44:52,480
I mentioned here and then the web

00:44:50,829 --> 00:44:54,880
service is called and the web search

00:44:52,480 --> 00:44:57,039
will then respond based on the web

00:44:54,880 --> 00:45:00,309
service context what the current user

00:44:57,039 --> 00:45:04,089
was and this is the same but then

00:45:00,309 --> 00:45:09,809
because I would like to talk about the

00:45:04,089 --> 00:45:09,809
relying party IDP I will skip the demo

00:45:12,710 --> 00:45:18,200
okay yeah it has been mentioned before

00:45:15,390 --> 00:45:21,510
what happens if you have several

00:45:18,200 --> 00:45:25,190
authentication domains or request their

00:45:21,510 --> 00:45:29,579
IDPs so double saturation specification

00:45:25,190 --> 00:45:33,349
differentiates between a resource ID p

00:45:29,579 --> 00:45:37,260
or recall it sometimes relying party mdp

00:45:33,349 --> 00:45:44,460
and the requester IDP which is really

00:45:37,260 --> 00:45:49,760
doing the authentication so the the

00:45:44,460 --> 00:45:53,460
relying party IDP issues the saml token

00:45:49,760 --> 00:45:55,710
in a completely request sir independent

00:45:53,460 --> 00:46:00,000
formant which means final the

00:45:55,710 --> 00:46:03,059
application doesn't care whether that

00:46:00,000 --> 00:46:05,579
the requester IDP was from company a or

00:46:03,059 --> 00:46:08,279
company b because both companies might

00:46:05,579 --> 00:46:11,279
have different kind of semantics and

00:46:08,279 --> 00:46:14,599
syntax how they want to express some

00:46:11,279 --> 00:46:19,559
plain and it's the responsibility of the

00:46:14,599 --> 00:46:22,410
relying party IDP to map or transform

00:46:19,559 --> 00:46:24,690
these claims into a UA into a unique

00:46:22,410 --> 00:46:27,420
format which is understood by the

00:46:24,690 --> 00:46:29,730
application or by all sort of

00:46:27,420 --> 00:46:34,740
applications you are providing to your

00:46:29,730 --> 00:46:37,440
customers so this allows to integrate

00:46:34,740 --> 00:46:40,259
for instance of a new b2b customers

00:46:37,440 --> 00:46:43,170
without touching your application at all

00:46:40,259 --> 00:46:45,779
because all you have to do is when you

00:46:43,170 --> 00:46:47,880
know you need these ten attributes and

00:46:45,779 --> 00:46:51,150
you have this kind of naming of these

00:46:47,880 --> 00:46:54,980
attributes all you have to do is to have

00:46:51,150 --> 00:46:58,109
a generic transformation of the

00:46:54,980 --> 00:47:01,369
semantics the new b2b customer has in

00:46:58,109 --> 00:47:03,930
their system to this format your

00:47:01,369 --> 00:47:08,010
understanding and this is done within

00:47:03,930 --> 00:47:10,910
the relying party IDP and finally in

00:47:08,010 --> 00:47:10,910
in the sts

00:47:19,310 --> 00:47:27,350
we see that here so i do have here to

00:47:24,530 --> 00:47:29,630
rot relying party an application i'm

00:47:27,350 --> 00:47:32,920
providing two different kind of

00:47:29,630 --> 00:47:36,440
customers I haven't the relying party

00:47:32,920 --> 00:47:38,710
IDP where these home realm discovery

00:47:36,440 --> 00:47:42,920
functionality is deployed which means

00:47:38,710 --> 00:47:45,680
the browser is the browser is accessing

00:47:42,920 --> 00:47:48,020
the application gets redirected to here

00:47:45,680 --> 00:47:50,810
and now it's the responsibility of the

00:47:48,020 --> 00:47:54,710
relying party IDP or of this mechanism

00:47:50,810 --> 00:47:58,400
to figure out who where is his request

00:47:54,710 --> 00:48:01,970
sir I DP is he from company a or Company

00:47:58,400 --> 00:48:04,730
B this can be based on the on the URI

00:48:01,970 --> 00:48:08,960
you enter this can be based on the

00:48:04,730 --> 00:48:12,710
source IP this can be any kind of any

00:48:08,960 --> 00:48:15,620
kind of mechanism you can implement here

00:48:12,710 --> 00:48:17,890
so then you are redirected he has

00:48:15,620 --> 00:48:22,010
figured out that you are coming from

00:48:17,890 --> 00:48:26,930
adopting com so he will redirect the

00:48:22,010 --> 00:48:29,720
browser again to add autumn com IDP he

00:48:26,930 --> 00:48:32,840
is doing the challenge authentication

00:48:29,720 --> 00:48:35,830
issues a token is sending the towel can

00:48:32,840 --> 00:48:39,790
hear to the relying party IDP and now

00:48:35,830 --> 00:48:43,160
the relying party IDP will issue a new

00:48:39,790 --> 00:48:46,370
token and do the transformation of all

00:48:43,160 --> 00:48:49,250
the sam'l attributes to a form it which

00:48:46,370 --> 00:48:51,980
is understood by the relying party so

00:48:49,250 --> 00:48:55,250
all you have to do when you are now

00:48:51,980 --> 00:48:58,010
adding additional b2b customers adding

00:48:55,250 --> 00:48:59,960
here the logic to transform the saml

00:48:58,010 --> 00:49:03,170
token which has been issued by another

00:48:59,960 --> 00:49:04,340
IDP to the forward you are understanding

00:49:03,170 --> 00:49:07,720
here in the applications without

00:49:04,340 --> 00:49:07,720
touching them at all

00:49:11,510 --> 00:49:21,050
do you have questions to this relying

00:49:15,329 --> 00:49:21,050
party concept and home run discovery

00:49:24,880 --> 00:49:31,299
I don't have a demo for for death the

00:49:28,119 --> 00:49:34,299
reason for that is right now Vedas

00:49:31,299 --> 00:49:37,720
doesn't support the relying party IDP

00:49:34,299 --> 00:49:39,970
concept so but we are planning to have

00:49:37,720 --> 00:49:42,269
this for the for the next release for

00:49:39,970 --> 00:49:45,210
the for the next minor release for 11

00:49:42,269 --> 00:49:47,829
the same for the for the home run

00:49:45,210 --> 00:49:52,319
discovery missouri's which is the core

00:49:47,829 --> 00:49:55,779
functionality within the reliability IDP

00:49:52,319 --> 00:50:00,329
we intended to add also support for the

00:49:55,779 --> 00:50:03,730
Semel profiles but we have to delay that

00:50:00,329 --> 00:50:05,680
to be able to issue the 11 release a

00:50:03,730 --> 00:50:08,619
little bit early because it provides a

00:50:05,680 --> 00:50:11,019
lot of new functionality we are planning

00:50:08,619 --> 00:50:14,799
to also support encrypted sama tokens

00:50:11,019 --> 00:50:18,130
and to a support salmon holder of key

00:50:14,799 --> 00:50:23,349
which means the browser also needs a

00:50:18,130 --> 00:50:27,250
certificate to validate against the

00:50:23,349 --> 00:50:31,950
application and we are supporting some

00:50:27,250 --> 00:50:37,539
more some more containers like carafe

00:50:31,950 --> 00:50:39,490
jetty and also spring security and

00:50:37,539 --> 00:50:43,450
spring security provides two options

00:50:39,490 --> 00:50:46,029
either pre off authentication which

00:50:43,450 --> 00:50:48,190
means container managed authentication

00:50:46,029 --> 00:50:51,069
which is of course the case in the

00:50:48,190 --> 00:50:56,170
current plugin for tomcat and chatty as

00:50:51,069 --> 00:50:59,710
well as the native integration in spring

00:50:56,170 --> 00:51:02,349
security for for fairies which means you

00:50:59,710 --> 00:51:05,589
can then deploy if it is for instance

00:51:02,349 --> 00:51:09,880
also in websphere or weblogic where days

00:51:05,589 --> 00:51:12,630
don't get a native and adapter available

00:51:09,880 --> 00:51:12,630
in fairies

00:51:14,970 --> 00:51:21,040
if you need more information I'd

00:51:17,980 --> 00:51:25,420
recommend to go to the wiki site it's

00:51:21,040 --> 00:51:27,880
quite good documented how to deploy how

00:51:25,420 --> 00:51:31,830
to create my certificates and so on

00:51:27,880 --> 00:51:34,420
there are some interesting blogs about

00:51:31,830 --> 00:51:40,270
security but not only about ready source

00:51:34,420 --> 00:51:44,200
about zxf and DST s from calm van Sergei

00:51:40,270 --> 00:51:57,270
and mine as well so differ i would like

00:51:44,200 --> 00:52:02,650
to hand over to you for questions yeah i

00:51:57,270 --> 00:52:05,680
had to find the or make a proposal quite

00:52:02,650 --> 00:52:08,440
quickly so our goal was to really

00:52:05,680 --> 00:52:10,360
provide some benefit for the business to

00:52:08,440 --> 00:52:13,900
be more our child to get more customers

00:52:10,360 --> 00:52:17,160
or more b2b customer so it's just a

00:52:13,900 --> 00:52:23,730
combination of Federation and business

00:52:17,160 --> 00:52:23,730
varies there any other questions

00:52:23,950 --> 00:52:26,790
yep

00:52:27,330 --> 00:52:36,360
and right now right now not we have a

00:52:32,100 --> 00:52:38,520
mad we have chira I'm open for that also

00:52:36,360 --> 00:52:42,540
both for it we had also feedback from in

00:52:38,520 --> 00:52:45,540
the community what is about logout but

00:52:42,540 --> 00:52:47,490
the key thing is let's imagine you are

00:52:45,540 --> 00:52:50,820
working with different kind of

00:52:47,490 --> 00:52:53,100
application some are holes that

00:52:50,820 --> 00:52:55,140
on-premise some others are holes in this

00:52:53,100 --> 00:52:57,210
cloud providers a modest in that cloud

00:52:55,140 --> 00:53:00,570
provider and it when you just click on

00:52:57,210 --> 00:53:02,850
one log out then you really have a

00:53:00,570 --> 00:53:04,560
single logo which means you are

00:53:02,850 --> 00:53:07,380
immediately locked out from all the

00:53:04,560 --> 00:53:12,060
applications you have to sign in before

00:53:07,380 --> 00:53:16,200
and after that usually the discussion

00:53:12,060 --> 00:53:18,480
and stopped because this was not the

00:53:16,200 --> 00:53:20,370
intention want to have but we still have

00:53:18,480 --> 00:53:23,220
it on the roadmap to breathe already

00:53:20,370 --> 00:53:24,950
have in the feature complete is this

00:53:23,220 --> 00:53:27,589
part of

00:53:24,950 --> 00:53:34,520
go yes yeah that's also standardized

00:53:27,589 --> 00:53:37,099
down this is configured configurations

00:53:34,520 --> 00:53:38,900
done through sorry for all the

00:53:37,099 --> 00:53:41,930
configurations done through spring or is

00:53:38,900 --> 00:53:44,750
it evidence is it separate and

00:53:41,930 --> 00:53:47,359
figuration particles there's no spray

00:53:44,750 --> 00:53:49,430
dependency in there only for the

00:53:47,359 --> 00:53:58,700
integration for sprint security which

00:53:49,430 --> 00:54:01,400
will come with one month and there the

00:53:58,700 --> 00:54:04,370
other questions

00:54:01,400 --> 00:54:06,430
okay then thank you very much for your

00:54:04,370 --> 00:54:06,430

YouTube URL: https://www.youtube.com/watch?v=VGcbBeRD0cM


