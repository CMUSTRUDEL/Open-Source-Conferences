Title: Introduction to Apache Flex
Publication date: 2013-10-17
Playlist: Apachecon NA 2013 - day 1
Description: 
	Justin Mclean
ApacheCon NA 2013
Overture and Beginners
Captions: 
	00:00:00,030 --> 00:00:04,529
so my name is just McClane I'm here to

00:00:01,770 --> 00:00:05,790
talk about Apache flex a little bit

00:00:04,529 --> 00:00:07,620
about Who I am I've been programming for

00:00:05,790 --> 00:00:09,420
25 years I've done all sorts of all

00:00:07,620 --> 00:00:12,269
sorts of things making web applications

00:00:09,420 --> 00:00:15,059
for about 15 I've actually used flex for

00:00:12,269 --> 00:00:20,430
a very long time since version 1.5 about

00:00:15,059 --> 00:00:24,060
eight years one of the PMC members and

00:00:20,430 --> 00:00:25,980
committers and I think unfortunately

00:00:24,060 --> 00:00:32,669
sorry give me one second I have actually

00:00:25,980 --> 00:00:35,360
got the wrong slides yeah that's what

00:00:32,669 --> 00:00:35,360
you get for just

00:00:44,800 --> 00:00:47,730
yeah that's better

00:00:48,300 --> 00:00:53,760
I gave this talk at at Apache Con in EU

00:00:52,739 --> 00:00:55,440
and you were just seeing the Apache

00:00:53,760 --> 00:00:57,690
Connor used slides but now I've got the

00:00:55,440 --> 00:01:00,269
right one so we're all good so anyway so

00:00:57,690 --> 00:01:02,010
I'm a PMC member and committer and I was

00:01:00,269 --> 00:01:04,589
the release manager for Apache flex for

00:01:02,010 --> 00:01:05,880
point 9.0 and we just released four

00:01:04,589 --> 00:01:07,140
point nine point one last night we

00:01:05,880 --> 00:01:08,159
haven't made any official announcement

00:01:07,140 --> 00:01:11,490
about it yet we still got a bit of

00:01:08,159 --> 00:01:13,950
housework and and cleanup to do um so

00:01:11,490 --> 00:01:16,440
who here has actually used Apache flex

00:01:13,950 --> 00:01:18,360
before do you know anything about what

00:01:16,440 --> 00:01:21,479
people's mostly their background are you

00:01:18,360 --> 00:01:23,630
Java developers mostly yeah you know

00:01:21,479 --> 00:01:26,820
that's generally the case in Apache so

00:01:23,630 --> 00:01:28,679
flex is an application framework that

00:01:26,820 --> 00:01:31,170
makes you enables you to make web

00:01:28,679 --> 00:01:33,899
applications desktop applications and

00:01:31,170 --> 00:01:36,000
mobile applications it is developer

00:01:33,899 --> 00:01:37,740
friendly and by developer friendly I

00:01:36,000 --> 00:01:40,410
mean it it's especially become from a

00:01:37,740 --> 00:01:42,810
Java background it's strongly typed when

00:01:40,410 --> 00:01:44,520
you need it it has proper classes it

00:01:42,810 --> 00:01:46,500
does lots of those things that you know

00:01:44,520 --> 00:01:50,100
you expect in life it has debuggers for

00:01:46,500 --> 00:01:51,690
example that work so it's also designer

00:01:50,100 --> 00:01:53,630
friendly um you can skin flex

00:01:51,690 --> 00:01:56,009
applications really well you can use CSS

00:01:53,630 --> 00:01:58,200
and you can do quite advanced skinning

00:01:56,009 --> 00:01:59,640
stuff I'm mostly developer focus so I'm

00:01:58,200 --> 00:02:03,780
not going to go into any of the skinning

00:01:59,640 --> 00:02:05,399
or so forth it also targets what a wide

00:02:03,780 --> 00:02:09,690
range of platforms i was a-sayin your

00:02:05,399 --> 00:02:14,280
targets both web in the browser desktop

00:02:09,690 --> 00:02:18,870
and mobile and it currently it compiles

00:02:14,280 --> 00:02:20,819
to run in the flash vm war err on the

00:02:18,870 --> 00:02:23,340
desktop and mobile there is a lot of

00:02:20,819 --> 00:02:25,920
work currently going on in apache flex

00:02:23,340 --> 00:02:27,840
on making a target javascript and HTML

00:02:25,920 --> 00:02:29,819
and if you want to know more about that

00:02:27,840 --> 00:02:31,500
you can actually just ask Alex who's the

00:02:29,819 --> 00:02:34,530
chair of Apache flexes just walked in

00:02:31,500 --> 00:02:35,790
he's up the back there so I've been sort

00:02:34,530 --> 00:02:37,200
of following what's going on in that but

00:02:35,790 --> 00:02:40,140
I haven't been actively involved in that

00:02:37,200 --> 00:02:41,819
I'm an Adobe who donated Apache flex

00:02:40,140 --> 00:02:44,040
continues to provide support and

00:02:41,819 --> 00:02:47,849
resources Alex for examples of full-time

00:02:44,040 --> 00:02:49,290
employee at Adobe so I said it was an

00:02:47,849 --> 00:02:51,150
application framework so what does it

00:02:49,290 --> 00:02:53,700
actually do so it provides the

00:02:51,150 --> 00:02:55,440
architecture for your framework it gives

00:02:53,700 --> 00:02:57,750
you a set of common UI components like

00:02:55,440 --> 00:03:00,550
list boxes ways of laying out your

00:02:57,750 --> 00:03:01,960
components inside your application

00:03:00,550 --> 00:03:04,180
and it has there's two different types

00:03:01,960 --> 00:03:06,490
of languages inside it and I'll show you

00:03:04,180 --> 00:03:08,650
some examples of those in a minute that

00:03:06,490 --> 00:03:09,970
one of them are now is an XML markup

00:03:08,650 --> 00:03:12,430
language that enables you to layout

00:03:09,970 --> 00:03:17,170
applications simply and quickly and the

00:03:12,430 --> 00:03:18,820
other is ActionScript which is a

00:03:17,170 --> 00:03:20,230
scripting language that enables you you

00:03:18,820 --> 00:03:24,130
know to do your business logic and and

00:03:20,230 --> 00:03:25,960
other code um it gives you easy

00:03:24,130 --> 00:03:28,720
integration to back-end services you

00:03:25,960 --> 00:03:30,070
want to talk to Java on the backend you

00:03:28,720 --> 00:03:31,870
can do that very easily and you can do

00:03:30,070 --> 00:03:36,970
that in a variety of ways it understands

00:03:31,870 --> 00:03:40,000
is XML it understands Web Services and

00:03:36,970 --> 00:03:43,330
it has its own format as well which you

00:03:40,000 --> 00:03:45,340
can basically package up JavaScript

00:03:43,330 --> 00:03:46,870
ActionScript objects send them to Java

00:03:45,340 --> 00:03:47,410
crate than those Java objects and

00:03:46,870 --> 00:03:49,000
vice-versa

00:03:47,410 --> 00:03:52,000
it's actually quite flexible along those

00:03:49,000 --> 00:03:54,730
lines it's aimed it's easy easy to

00:03:52,000 --> 00:03:55,690
create mobile applications you're not

00:03:54,730 --> 00:03:56,950
going to be able to take a hundred

00:03:55,690 --> 00:03:58,900
percent of your code and just make a

00:03:56,950 --> 00:04:00,610
mobile application out of it it doesn't

00:03:58,900 --> 00:04:03,220
quite work that way because mobiles are

00:04:00,610 --> 00:04:05,110
very different user interface you've got

00:04:03,220 --> 00:04:06,989
small screen sizes that users interact

00:04:05,110 --> 00:04:09,280
with applications in a different way and

00:04:06,989 --> 00:04:12,190
it's aimed at enterprise style

00:04:09,280 --> 00:04:14,170
applications so the current status is we

00:04:12,190 --> 00:04:17,230
are a top-level Apache project we will

00:04:14,170 --> 00:04:19,810
vote it in in mid-december yay we have

00:04:17,230 --> 00:04:22,660
Apache flex 4.9 released that is the

00:04:19,810 --> 00:04:25,270
second release of Apache flex the first

00:04:22,660 --> 00:04:28,030
one was a parity release that was just

00:04:25,270 --> 00:04:29,620
basically the same as the Adobe version

00:04:28,030 --> 00:04:31,500
of the SDK but it was there to make sure

00:04:29,620 --> 00:04:34,120
that we had done all the right stuff and

00:04:31,500 --> 00:04:36,940
we've also created an installer to help

00:04:34,120 --> 00:04:39,780
people install the software that has a

00:04:36,940 --> 00:04:42,669
lot of third-party libraries in it that

00:04:39,780 --> 00:04:46,180
for various licensing reasons not part

00:04:42,669 --> 00:04:47,740
of the the software download so this

00:04:46,180 --> 00:04:49,450
just helps people get up to speed and

00:04:47,740 --> 00:04:50,950
you know it means we don't have to

00:04:49,450 --> 00:04:53,590
answer endless questions about how can I

00:04:50,950 --> 00:04:55,180
get this working why won't it install we

00:04:53,590 --> 00:04:57,040
have a nice new shiny website if you go

00:04:55,180 --> 00:04:59,530
to flex start apache at all you can you

00:04:57,040 --> 00:05:01,630
can see that in action and we've also

00:04:59,530 --> 00:05:03,550
done there's been a lot of work in the

00:05:01,630 --> 00:05:06,250
last couple of months on ActionScript to

00:05:03,550 --> 00:05:09,460
JavaScript across compiler I believe at

00:05:06,250 --> 00:05:11,680
the current stage is that we can take

00:05:09,460 --> 00:05:13,630
any pure ActionScript that doesn't

00:05:11,680 --> 00:05:14,260
involve any flash player calls and

00:05:13,630 --> 00:05:15,520
convert that

00:05:14,260 --> 00:05:18,760
straight to JavaScript and it'll just

00:05:15,520 --> 00:05:21,420
work so but again alex is man to speak

00:05:18,760 --> 00:05:24,520
to if you want to know more about that

00:05:21,420 --> 00:05:26,590
so extra script itself as a scripting

00:05:24,520 --> 00:05:29,350
language it's based on JavaScript and it

00:05:26,590 --> 00:05:31,990
has a lot of a Java and C features in it

00:05:29,350 --> 00:05:35,580
so as I said most people here are Java

00:05:31,990 --> 00:05:38,080
developers so it will be familiar to you

00:05:35,580 --> 00:05:40,030
open source specification compiler and

00:05:38,080 --> 00:05:42,220
VM we now have the code to the compiler

00:05:40,030 --> 00:05:44,350
and come up and modify it we also have

00:05:42,220 --> 00:05:46,840
code to a new faster and better

00:05:44,350 --> 00:05:50,380
architecture compiler which people are

00:05:46,840 --> 00:05:51,610
working on as well inside ActionScript

00:05:50,380 --> 00:05:53,710
it's it's class-based

00:05:51,610 --> 00:05:56,410
not prototype base so you have real

00:05:53,710 --> 00:05:58,780
classes you have real package names you

00:05:56,410 --> 00:06:00,370
don't have all you know the messiness

00:05:58,780 --> 00:06:02,350
and JavaScript of everything's basically

00:06:00,370 --> 00:06:04,510
in the global namespace and you've got

00:06:02,350 --> 00:06:08,050
to do all sorts of tricks to to get that

00:06:04,510 --> 00:06:10,480
to work um it's strongly typed mostly it

00:06:08,050 --> 00:06:12,070
doesn't have to be strongly typed and

00:06:10,480 --> 00:06:13,480
this actually gives it it's one of its

00:06:12,070 --> 00:06:15,610
best features I think because it gives

00:06:13,480 --> 00:06:17,350
you flexibility when you need it but

00:06:15,610 --> 00:06:18,970
when you need safety it gives you that

00:06:17,350 --> 00:06:20,410
as well

00:06:18,970 --> 00:06:23,410
it has compile-time and run-time

00:06:20,410 --> 00:06:25,690
checking and it also has a very rich

00:06:23,410 --> 00:06:29,860
event handling system which is basically

00:06:25,690 --> 00:06:30,880
based on Dom events um it does have some

00:06:29,860 --> 00:06:33,970
of the JavaScript baggage that comes

00:06:30,880 --> 00:06:36,700
along with it for example it's got the

00:06:33,970 --> 00:06:38,440
implicit type conversion that you can do

00:06:36,700 --> 00:06:41,170
all sorts of silly things with it

00:06:38,440 --> 00:06:43,570
you know it's numbers get converted to

00:06:41,170 --> 00:06:45,190
strings and you know and sometimes

00:06:43,570 --> 00:06:47,140
numbers are not even a number and

00:06:45,190 --> 00:06:49,450
there's you know there's these weird

00:06:47,140 --> 00:06:51,820
values of undefined and not a number and

00:06:49,450 --> 00:06:53,260
no and you're never quite sure when you

00:06:51,820 --> 00:06:58,660
first start out with it you know what it

00:06:53,260 --> 00:07:00,430
what exactly that all means as I saying

00:06:58,660 --> 00:07:02,070
compared to Java it's actually dynamic

00:07:00,430 --> 00:07:04,930
it's a dynamic language you can create

00:07:02,070 --> 00:07:07,270
basic objects you can add methods at

00:07:04,930 --> 00:07:09,340
runtime you can add properties at

00:07:07,270 --> 00:07:11,530
runtime you can even change methods

00:07:09,340 --> 00:07:12,850
around at runtime if you want to do so

00:07:11,530 --> 00:07:14,050
but you'd have one I have a good reason

00:07:12,850 --> 00:07:15,880
for doing that because that can be quite

00:07:14,050 --> 00:07:18,070
confusing code it's entirely possible

00:07:15,880 --> 00:07:21,430
there's absolutely no difference between

00:07:18,070 --> 00:07:22,990
functions and variables so functions of

00:07:21,430 --> 00:07:25,450
first-class citizens you can pass them

00:07:22,990 --> 00:07:26,890
around as parameters to methods as I

00:07:25,450 --> 00:07:27,820
said you can change them you can do all

00:07:26,890 --> 00:07:29,920
sorts of things

00:07:27,820 --> 00:07:32,800
setters and getters actually work and

00:07:29,920 --> 00:07:36,250
they show up its properties so there's

00:07:32,800 --> 00:07:37,690
no reason to write lots of setters and

00:07:36,250 --> 00:07:39,010
getters codes that just do a single

00:07:37,690 --> 00:07:41,020
thing like you know return a single

00:07:39,010 --> 00:07:42,580
property where a sign of property it

00:07:41,020 --> 00:07:44,290
makes your code much easier to read much

00:07:42,580 --> 00:07:45,970
more since inked and it does mean that

00:07:44,290 --> 00:07:47,740
if you can start off by just having

00:07:45,970 --> 00:07:49,420
properties and then later on you can

00:07:47,740 --> 00:07:51,760
change those two methods which are

00:07:49,420 --> 00:07:54,940
setters and getters and the interface to

00:07:51,760 --> 00:07:57,070
your class doesn't change there is no

00:07:54,940 --> 00:07:58,990
method overloading functions can have

00:07:57,070 --> 00:08:00,820
default parameters and there's a few

00:07:58,990 --> 00:08:03,940
other nice features that it has in their

00:08:00,820 --> 00:08:07,420
xml for example is an native type and

00:08:03,940 --> 00:08:09,940
you can have built-in query language for

00:08:07,420 --> 00:08:14,080
xml which is called a 4x which makes it

00:08:09,940 --> 00:08:16,630
very very easy to to search for nodes in

00:08:14,080 --> 00:08:20,290
xml and even query it to get information

00:08:16,630 --> 00:08:22,090
out of a xml structure and the the

00:08:20,290 --> 00:08:26,610
arrays and collections are very similar

00:08:22,090 --> 00:08:26,610
to Java maybe with a few more features

00:08:26,820 --> 00:08:31,960
so we have M XML which is one of the two

00:08:29,860 --> 00:08:35,320
languages inside Apache flex it's a UI

00:08:31,960 --> 00:08:37,990
markup language and you use it to create

00:08:35,320 --> 00:08:40,390
very simple and flexible layouts you can

00:08:37,990 --> 00:08:41,800
also use em XML to nest components

00:08:40,390 --> 00:08:45,220
together which I'll show you an example

00:08:41,800 --> 00:08:47,050
in a minute M XML also supports a

00:08:45,220 --> 00:08:51,880
variable binding which means that you

00:08:47,050 --> 00:08:54,790
can bind values to say say you got a

00:08:51,880 --> 00:08:56,680
text input field and you can bind what

00:08:54,790 --> 00:08:58,780
that text is displayed to a variable

00:08:56,680 --> 00:09:00,460
whenever that variable changed the text

00:08:58,780 --> 00:09:01,930
field will automatically update you

00:09:00,460 --> 00:09:04,710
don't have to write any extra code to do

00:09:01,930 --> 00:09:07,870
that it just does it for itself

00:09:04,710 --> 00:09:09,640
you can also inside your M XML you can

00:09:07,870 --> 00:09:12,040
also include ActionScript code and you

00:09:09,640 --> 00:09:13,630
can put this inside a code block what

00:09:12,040 --> 00:09:16,090
actually happens under the hood in the

00:09:13,630 --> 00:09:19,210
old version the compiler is that the M

00:09:16,090 --> 00:09:20,920
XML is actually compiled to ActionScript

00:09:19,210 --> 00:09:22,120
so it's just an ActionScript class and

00:09:20,920 --> 00:09:26,530
you can treat it like any other

00:09:22,120 --> 00:09:29,110
ActionScript class so here's some mxml

00:09:26,530 --> 00:09:31,240
here so this is our just a snippet from

00:09:29,110 --> 00:09:36,150
a very simple application but you can

00:09:31,240 --> 00:09:38,590
see that it's XML and that there's

00:09:36,150 --> 00:09:40,660
several form items here and they have

00:09:38,590 --> 00:09:41,769
some labels in there and inside those

00:09:40,660 --> 00:09:44,079
labels

00:09:41,769 --> 00:09:48,519
you can see say where text equals person

00:09:44,079 --> 00:09:51,429
name that is binding to a name property

00:09:48,519 --> 00:09:54,730
of an instance of a class which is a

00:09:51,429 --> 00:09:57,279
type person whenever that property

00:09:54,730 --> 00:09:58,779
changes then that text label will get

00:09:57,279 --> 00:10:02,920
updated you don't have to write any

00:09:58,779 --> 00:10:04,509
other code for that to happen so what

00:10:02,920 --> 00:10:06,819
you can also do with them mxml is you

00:10:04,509 --> 00:10:10,059
can break up complex UI's into smaller

00:10:06,819 --> 00:10:12,699
bite-sized pieces and reuse those pieces

00:10:10,059 --> 00:10:15,449
as components you can write components

00:10:12,699 --> 00:10:18,309
in other mm xml or in ActionScript and

00:10:15,449 --> 00:10:19,089
they can be used either in mxml axiom

00:10:18,309 --> 00:10:21,429
but two things are totally

00:10:19,089 --> 00:10:23,470
interchangeable and then you've got a

00:10:21,429 --> 00:10:26,709
couple of options about how you want to

00:10:23,470 --> 00:10:29,920
communicate between components you can

00:10:26,709 --> 00:10:32,170
set parameters by or properties by

00:10:29,920 --> 00:10:35,139
passing in variables by a variable

00:10:32,170 --> 00:10:37,239
binding or you can from inside the

00:10:35,139 --> 00:10:38,769
component you can dispatch events to

00:10:37,239 --> 00:10:39,970
tell the outside world that something

00:10:38,769 --> 00:10:42,279
has changed and maybe you should do

00:10:39,970 --> 00:10:44,679
something about that again I'll give you

00:10:42,279 --> 00:10:48,339
an example in a minute so we have here

00:10:44,679 --> 00:10:51,369
is a very simple mxml compassion we have

00:10:48,339 --> 00:10:53,829
this is actually a base tag of

00:10:51,369 --> 00:10:56,259
application and inside there we have two

00:10:53,829 --> 00:10:58,420
components one called select person one

00:10:56,259 --> 00:11:01,029
called person's details and both of

00:10:58,420 --> 00:11:04,689
those are actually other M XML files and

00:11:01,029 --> 00:11:06,579
that's you they're just another bit of M

00:11:04,689 --> 00:11:07,959
XML and that's you can sort of basically

00:11:06,579 --> 00:11:10,779
think of it as an include that's a bit

00:11:07,959 --> 00:11:12,129
smarter than that obviously but it means

00:11:10,779 --> 00:11:13,749
that these components can be reused

00:11:12,129 --> 00:11:15,579
anywhere throughout your application and

00:11:13,749 --> 00:11:17,439
you can get a consistent look and feel

00:11:15,579 --> 00:11:20,619
and a consistent behavior across your

00:11:17,439 --> 00:11:22,869
entire application and and it really

00:11:20,619 --> 00:11:25,629
helps code reuse and cuts down on the

00:11:22,869 --> 00:11:27,490
amount of code that you need to write so

00:11:25,629 --> 00:11:29,110
in this case here we're with the Select

00:11:27,490 --> 00:11:31,329
person we can see that we're passing in

00:11:29,110 --> 00:11:33,189
a single I know it's actually an array

00:11:31,329 --> 00:11:35,619
of people so that's going to obviously

00:11:33,189 --> 00:11:37,540
start a list of some sort of list of

00:11:35,619 --> 00:11:40,660
people and then in the Select person

00:11:37,540 --> 00:11:43,149
there we have that is an event that

00:11:40,660 --> 00:11:45,399
happens from inside the component so

00:11:43,149 --> 00:11:47,379
when that event is dispatched it's going

00:11:45,399 --> 00:11:49,660
to call this method called change person

00:11:47,379 --> 00:11:52,480
and pass the event to it and then in the

00:11:49,660 --> 00:11:53,530
person's details there we're going to

00:11:52,480 --> 00:11:56,410
have

00:11:53,530 --> 00:11:57,820
it's going to display a single person's

00:11:56,410 --> 00:11:59,500
details we're passing in what the

00:11:57,820 --> 00:12:00,640
current person is so basically this

00:11:59,500 --> 00:12:02,500
application is going to be a list of

00:12:00,640 --> 00:12:04,810
people's names you click on a person's

00:12:02,500 --> 00:12:08,650
name and then the details update side by

00:12:04,810 --> 00:12:10,720
side directly in here so I'll talked a

00:12:08,650 --> 00:12:13,810
little bit about binding and I've showed

00:12:10,720 --> 00:12:15,460
you one side of it so binding it watches

00:12:13,810 --> 00:12:18,340
for any change of value of a variable

00:12:15,460 --> 00:12:19,660
and then if that variable changes

00:12:18,340 --> 00:12:22,600
anything that's bound to it

00:12:19,660 --> 00:12:24,010
automatically gets updated so you don't

00:12:22,600 --> 00:12:25,660
have generally you don't have to write

00:12:24,010 --> 00:12:28,330
any code to do that if if you're using

00:12:25,660 --> 00:12:30,730
mxml you can just use the the curly

00:12:28,330 --> 00:12:34,030
braces to say binding and you can set up

00:12:30,730 --> 00:12:36,760
variables with a bindable metadata tag

00:12:34,030 --> 00:12:38,680
to say that watch this for changes when

00:12:36,760 --> 00:12:42,430
it does change please tell me and that

00:12:38,680 --> 00:12:44,290
there's two ways it's commonly used one

00:12:42,430 --> 00:12:46,090
is to update a UI like I was showing

00:12:44,290 --> 00:12:51,250
before another you know the people's

00:12:46,090 --> 00:12:55,750
details page or also to pass values into

00:12:51,250 --> 00:12:57,220
a component so here's his a bit more

00:12:55,750 --> 00:12:59,500
another example here just including the

00:12:57,220 --> 00:13:01,839
other extra line showing you how you

00:12:59,500 --> 00:13:03,730
create a an ActionScript variable make

00:13:01,839 --> 00:13:07,150
it bindable and then you can add use

00:13:03,730 --> 00:13:08,260
that to pass it in to various in this

00:13:07,150 --> 00:13:13,720
case labels on the screen that

00:13:08,260 --> 00:13:17,440
automatically get updated so the other

00:13:13,720 --> 00:13:19,810
big part of the Flex framework is events

00:13:17,440 --> 00:13:21,490
now they can be dispatched by a user

00:13:19,810 --> 00:13:23,620
interaction with your application like

00:13:21,490 --> 00:13:26,830
people clicking on buttons or moving

00:13:23,620 --> 00:13:28,150
scrollers around or whatever wall when

00:13:26,830 --> 00:13:30,610
something occurs in your application

00:13:28,150 --> 00:13:32,320
like your application is resized

00:13:30,610 --> 00:13:35,020
well there's also timer events and other

00:13:32,320 --> 00:13:36,690
events like that well you make a web

00:13:35,020 --> 00:13:39,310
service call that's totally asynchronous

00:13:36,690 --> 00:13:40,120
when a fault happens when the results

00:13:39,310 --> 00:13:42,070
come back to you

00:13:40,120 --> 00:13:44,620
you also get an event so you can you can

00:13:42,070 --> 00:13:47,950
do stuff like that so you register

00:13:44,620 --> 00:13:52,570
interest in an event by adding an event

00:13:47,950 --> 00:13:55,600
handler and by listening for that event

00:13:52,570 --> 00:13:57,310
events have the ability of bubbling so

00:13:55,600 --> 00:14:00,339
they basically bubble up through all the

00:13:57,310 --> 00:14:01,750
parent classes that contain them I'm not

00:14:00,339 --> 00:14:03,240
going to go into detail for that because

00:14:01,750 --> 00:14:05,370
we don't have a lot of time

00:14:03,240 --> 00:14:07,709
um you can also create and dispatch your

00:14:05,370 --> 00:14:09,930
own custom events so you can even make

00:14:07,709 --> 00:14:13,740
your own events and and it's very easy

00:14:09,930 --> 00:14:16,950
to do so and that means you can create

00:14:13,740 --> 00:14:19,200
your own components that the interface

00:14:16,950 --> 00:14:21,000
to the outside world is these events

00:14:19,200 --> 00:14:23,010
that they dispatch and that gives you

00:14:21,000 --> 00:14:25,680
this loose coupling it means you can

00:14:23,010 --> 00:14:28,380
totally change a component how it looks

00:14:25,680 --> 00:14:29,610
how it feels how it acts but as long as

00:14:28,380 --> 00:14:31,649
it distilled the patches those same

00:14:29,610 --> 00:14:35,660
events as far as the outside world is

00:14:31,649 --> 00:14:35,660
concerned it's it's the same component

00:14:36,170 --> 00:14:40,170
so we have event handlers so these are

00:14:38,910 --> 00:14:43,950
methods that are called when an event

00:14:40,170 --> 00:14:47,940
occurs they always take an event or a

00:14:43,950 --> 00:14:49,800
subclass of event and return nothing and

00:14:47,940 --> 00:14:51,180
inside an event handler you you actually

00:14:49,800 --> 00:14:52,529
have a little bit of control over what

00:14:51,180 --> 00:14:53,760
you can do I mean generally what you

00:14:52,529 --> 00:14:55,290
want to do is you know you you'll have

00:14:53,760 --> 00:14:57,360
some application logic that says when I

00:14:55,290 --> 00:14:59,850
receive this event golf and do something

00:14:57,360 --> 00:15:01,740
but you can also cancel events you can

00:14:59,850 --> 00:15:04,649
stop them from bubbling and moving up

00:15:01,740 --> 00:15:06,029
through the chain you can prevent the

00:15:04,649 --> 00:15:09,060
default behavior like if they're talking

00:15:06,029 --> 00:15:10,980
about keyboard events inside a thing you

00:15:09,060 --> 00:15:13,410
know someone hits tab you can stop tab

00:15:10,980 --> 00:15:15,450
from doing what it normally does and

00:15:13,410 --> 00:15:16,709
make it do something else so this gives

00:15:15,450 --> 00:15:19,680
you actually quite a lot of flexibility

00:15:16,709 --> 00:15:21,270
in in terms of events so here's an

00:15:19,680 --> 00:15:24,149
example of some ActionScript code that

00:15:21,270 --> 00:15:27,060
is a vent handler so we have this event

00:15:24,149 --> 00:15:29,160
handler called on change person and you

00:15:27,060 --> 00:15:32,490
can see that it takes a an event of type

00:15:29,160 --> 00:15:35,940
index change event and that what that is

00:15:32,490 --> 00:15:38,520
is that's actually the a in this case

00:15:35,940 --> 00:15:42,020
it's a list box and that gives you the

00:15:38,520 --> 00:15:44,370
selected item in the list box so you can

00:15:42,020 --> 00:15:46,290
what we're now doing here this is inside

00:15:44,370 --> 00:15:49,020
a component we're creating our own

00:15:46,290 --> 00:15:50,760
custom event so this is a class we pray

00:15:49,020 --> 00:15:52,079
to the our self called person event of

00:15:50,760 --> 00:15:54,720
this doesn't exist inside the Flex

00:15:52,079 --> 00:15:57,180
framework and then we can create a new

00:15:54,720 --> 00:15:59,490
event and dispatch that so we can tell

00:15:57,180 --> 00:16:01,649
the outside world that a new person has

00:15:59,490 --> 00:16:03,180
been selected and it doesn't matter

00:16:01,649 --> 00:16:04,950
about the mechanism that that person was

00:16:03,180 --> 00:16:07,440
selected in all that matters is that

00:16:04,950 --> 00:16:10,170
that event gets dispatched and then in

00:16:07,440 --> 00:16:11,310
the actual list itself to actually set

00:16:10,170 --> 00:16:13,500
up that event handler

00:16:11,310 --> 00:16:15,930
you've we've just got a change equals

00:16:13,500 --> 00:16:16,649
and point it to our method so that means

00:16:15,930 --> 00:16:19,829
when

00:16:16,649 --> 00:16:23,430
all this changes call this method so

00:16:19,829 --> 00:16:25,709
it's as simple as that basically what

00:16:23,430 --> 00:16:28,170
we've got in the Flex framework is MVC

00:16:25,709 --> 00:16:30,869
for free so if you think of custom

00:16:28,170 --> 00:16:33,439
components as your view and you have

00:16:30,869 --> 00:16:35,550
your view bind to a simple data model

00:16:33,439 --> 00:16:38,040
which are just simple ActionScript

00:16:35,550 --> 00:16:39,629
classes with properties in them and then

00:16:38,040 --> 00:16:43,589
inside your custom components you

00:16:39,629 --> 00:16:45,240
dispatch events that basically tell your

00:16:43,589 --> 00:16:47,399
application which is you can think of as

00:16:45,240 --> 00:16:49,649
your controller to update the model and

00:16:47,399 --> 00:16:51,480
when then once the model gets updated

00:16:49,649 --> 00:16:54,329
because you're using binding all the

00:16:51,480 --> 00:16:56,220
views automatically update so there's

00:16:54,329 --> 00:16:59,209
actually not a lot of code you have to

00:16:56,220 --> 00:17:00,600
write to be able to get MVC in inside

00:16:59,209 --> 00:17:02,639
the Flex

00:17:00,600 --> 00:17:04,890
there are other frameworks around that

00:17:02,639 --> 00:17:06,959
ActionScript frameworks and and Flex

00:17:04,890 --> 00:17:09,329
frameworks and you you can go ahead and

00:17:06,959 --> 00:17:11,189
use those but quite often for you know

00:17:09,329 --> 00:17:12,899
depending on what project size and what

00:17:11,189 --> 00:17:15,559
you're doing there's often no reason to

00:17:12,899 --> 00:17:18,539
actually use a framework with with Flex

00:17:15,559 --> 00:17:21,179
so I just mentioned before the Flex runs

00:17:18,539 --> 00:17:22,949
in quite a few different targets so it

00:17:21,179 --> 00:17:24,630
runs in browser applications and

00:17:22,949 --> 00:17:27,510
currently that runs in the Flash Player

00:17:24,630 --> 00:17:28,980
virtual machine so it's a Swift file and

00:17:27,510 --> 00:17:33,149
so you're going to have some limitations

00:17:28,980 --> 00:17:35,190
there it's not going to run on you know

00:17:33,149 --> 00:17:38,720
latest versions of the Android system in

00:17:35,190 --> 00:17:40,860
the browser it's not going to run on iis

00:17:38,720 --> 00:17:42,330
but up there there is a way around that

00:17:40,860 --> 00:17:43,860
and I'll tell you in a minute we're

00:17:42,330 --> 00:17:48,330
currently working on a Java strict

00:17:43,860 --> 00:17:50,130
javascript HTML target and there's been

00:17:48,330 --> 00:17:51,570
great progress on that when in exactly

00:17:50,130 --> 00:17:55,130
that's going to be released and 100%

00:17:51,570 --> 00:17:57,929
functional and working I can't tell you

00:17:55,130 --> 00:18:00,570
so as well as running in the browser

00:17:57,929 --> 00:18:04,529
that flex can also run on the desktop it

00:18:00,570 --> 00:18:06,120
runs in the air runtime and the air

00:18:04,529 --> 00:18:07,470
runtime can actually be packaged up with

00:18:06,120 --> 00:18:09,179
the application so you don't have to

00:18:07,470 --> 00:18:14,730
have the user in how to have air

00:18:09,179 --> 00:18:17,159
installed so you know that is it reduces

00:18:14,730 --> 00:18:19,309
the barrier to entry again and it's very

00:18:17,159 --> 00:18:21,539
very simple to change a flex application

00:18:19,309 --> 00:18:23,970
that runs in the browser to a flex

00:18:21,539 --> 00:18:26,010
application that runs in the desktop all

00:18:23,970 --> 00:18:27,929
you have to do is chase change the S

00:18:26,010 --> 00:18:30,240
application tag to a Windows application

00:18:27,929 --> 00:18:31,799
tag and that that'll get it running and

00:18:30,240 --> 00:18:33,600
then you may actually want to take

00:18:31,799 --> 00:18:36,929
advantage of the fact that you're on the

00:18:33,600 --> 00:18:38,880
desktop and you air supports a lot more

00:18:36,929 --> 00:18:40,889
than what the flash player supports so

00:18:38,880 --> 00:18:43,200
you got file access you can actually

00:18:40,889 --> 00:18:45,809
view web websites it's got a HTML view

00:18:43,200 --> 00:18:48,029
you've got SQLite built into there so

00:18:45,809 --> 00:18:50,520
you can have databases that you can have

00:18:48,029 --> 00:18:54,179
native windows menus in this there's

00:18:50,520 --> 00:18:56,039
lots more umm and then finally you can

00:18:54,179 --> 00:18:58,080
actually make Flex run as a mobile

00:18:56,039 --> 00:19:00,179
application and what that happens is it

00:18:58,080 --> 00:19:02,880
actually uses the air runtime but it

00:19:00,179 --> 00:19:04,950
cross compiles the application into

00:19:02,880 --> 00:19:07,409
native applications for both iOS and

00:19:04,950 --> 00:19:09,600
Android and a couple other platforms as

00:19:07,409 --> 00:19:11,730
well um so once you've got that native

00:19:09,600 --> 00:19:15,000
application you can deploy it in an app

00:19:11,730 --> 00:19:17,789
store now because it's running in air

00:19:15,000 --> 00:19:21,630
and it's using the Flex SDK the Flex SDK

00:19:17,789 --> 00:19:23,370
has been optimized for mobile I just

00:19:21,630 --> 00:19:25,230
have to say that it is it's like it's

00:19:23,370 --> 00:19:27,120
great you can make applications really

00:19:25,230 --> 00:19:29,399
quickly it's not going to be suitable

00:19:27,120 --> 00:19:31,830
for everything right there are some

00:19:29,399 --> 00:19:33,480
minor performance issues so you know if

00:19:31,830 --> 00:19:35,520
you want to go off and make a 3d game I

00:19:33,480 --> 00:19:37,260
wouldn't suggest you for using flexes

00:19:35,520 --> 00:19:38,880
the solution for that but if you want an

00:19:37,260 --> 00:19:41,039
enterprise style application that looks

00:19:38,880 --> 00:19:43,049
up data and displays data and has the

00:19:41,039 --> 00:19:47,250
user interact with it it's it's probably

00:19:43,049 --> 00:19:49,200
a good fit for that um the application

00:19:47,250 --> 00:19:51,419
structure is slightly different to like

00:19:49,200 --> 00:19:52,679
a desktop or web application so you're

00:19:51,419 --> 00:19:55,470
going to have to make some modifications

00:19:52,679 --> 00:19:57,929
to your code in my experience about 80

00:19:55,470 --> 00:20:01,110
to 90 percent of your code is gonna be

00:19:57,929 --> 00:20:02,700
exactly the same so but as I said mobile

00:20:01,110 --> 00:20:04,649
is a totally different beast you've got

00:20:02,700 --> 00:20:07,139
small screens users interact them with

00:20:04,649 --> 00:20:08,789
in different ways you're not gonna have

00:20:07,139 --> 00:20:10,740
a data grid with 100 columns on it

00:20:08,789 --> 00:20:13,610
that you can sort and drop drop and drag

00:20:10,740 --> 00:20:16,889
and look about it just doesn't work so

00:20:13,610 --> 00:20:20,279
the and it does support a lot of mo

00:20:16,889 --> 00:20:23,370
mobile features as well like well

00:20:20,279 --> 00:20:27,120
obviously touch you can also support

00:20:23,370 --> 00:20:29,730
gestures notifications and you know any

00:20:27,120 --> 00:20:32,220
anything else that that mobile users

00:20:29,730 --> 00:20:35,330
users are used to if there is something

00:20:32,220 --> 00:20:37,470
that one of the issues is that mobile

00:20:35,330 --> 00:20:39,450
operating systems tend to have frequent

00:20:37,470 --> 00:20:41,530
updates you know every year there's a

00:20:39,450 --> 00:20:44,080
new Android update for example

00:20:41,530 --> 00:20:46,660
the flex SDK may not keep up with that

00:20:44,080 --> 00:20:48,910
so as a way around that it has the

00:20:46,660 --> 00:20:52,900
concepts of native extensions and native

00:20:48,910 --> 00:20:56,350
extensions are basically see what Java

00:20:52,900 --> 00:20:57,940
code which will enable you to do other

00:20:56,350 --> 00:20:59,290
things there's like a dll you know you

00:20:57,940 --> 00:21:03,730
can make it call it to do it something

00:20:59,290 --> 00:21:05,410
that the Flex can't actually do so flex

00:21:03,730 --> 00:21:07,090
itself has many many many more features

00:21:05,410 --> 00:21:08,920
um as I said it's got advanced skinning

00:21:07,090 --> 00:21:11,860
and styling there's a debugger and

00:21:08,920 --> 00:21:13,870
profiler there's some very good unit

00:21:11,860 --> 00:21:16,720
testing frameworks I haven't mentioned

00:21:13,870 --> 00:21:18,040
data grids and the UI Patrol for data

00:21:16,720 --> 00:21:22,360
grid which now was just drop and drag

00:21:18,040 --> 00:21:24,280
columns sort columns group columns have

00:21:22,360 --> 00:21:27,940
complex item renderers and editors

00:21:24,280 --> 00:21:29,380
insider data grid you can have you can

00:21:27,940 --> 00:21:31,090
even have a data grid inside of data

00:21:29,380 --> 00:21:32,830
grid if you really wanted to you know

00:21:31,090 --> 00:21:35,350
I'm not sure why you want to but you

00:21:32,830 --> 00:21:36,850
could it supports runtime shared

00:21:35,350 --> 00:21:39,760
libraries and modules are they're

00:21:36,850 --> 00:21:42,250
probably not so important these days it

00:21:39,760 --> 00:21:43,660
also as well as the styling supports CSS

00:21:42,250 --> 00:21:45,090
and it has really good international

00:21:43,660 --> 00:21:48,910
support

00:21:45,090 --> 00:21:51,700
so um I'd like anyone here who's

00:21:48,910 --> 00:21:53,890
interested to get involved download the

00:21:51,700 --> 00:21:55,840
SDK have a bit of a play with it and

00:21:53,890 --> 00:21:58,420
give us some feedback and Oh sign up to

00:21:55,840 --> 00:22:01,090
the mailing list help out in some JIRA

00:21:58,420 --> 00:22:02,980
bugs if you if you if you can and we're

00:22:01,090 --> 00:22:05,440
also fairly new to Apache like we've

00:22:02,980 --> 00:22:07,180
only been in Apache for about a year so

00:22:05,440 --> 00:22:12,100
quite often we need help with things

00:22:07,180 --> 00:22:15,240
that are not flex related so and these

00:22:12,100 --> 00:22:17,560
slides are publicly available and

00:22:15,240 --> 00:22:19,540
they're actually already up on Google

00:22:17,560 --> 00:22:22,360
Docs feel free to download them there's

00:22:19,540 --> 00:22:24,460
a whole little links at the end and I

00:22:22,360 --> 00:22:26,830
thought what I do for the remaining time

00:22:24,460 --> 00:22:28,900
is I've actually got an application

00:22:26,830 --> 00:22:31,210
those code snippets came from and I can

00:22:28,900 --> 00:22:34,440
show you that application and we'll just

00:22:31,210 --> 00:22:34,440
ask for any any questions

00:22:42,969 --> 00:22:52,039
so inside here if we just take a look at

00:22:45,499 --> 00:22:54,679
the the desktop app sorry the browser at

00:22:52,039 --> 00:22:56,450
first so I'll just I'll just run it to

00:22:54,679 --> 00:23:01,279
give you an idea written then I'll go

00:22:56,450 --> 00:23:02,869
through and explain some of the code so

00:23:01,279 --> 00:23:07,519
as I said it's a very simple application

00:23:02,869 --> 00:23:10,639
it's just consists of a list of people

00:23:07,519 --> 00:23:16,419
and when I change that list of persons

00:23:10,639 --> 00:23:21,339
details next to it get updated oh sorry

00:23:16,419 --> 00:23:21,339
it's something's gone wrong with the

00:23:25,750 --> 00:23:29,980
it should be the resolution because it's

00:23:33,070 --> 00:23:38,150
objectives are the bane of my life I

00:23:35,000 --> 00:23:39,590
have to say all right I'll just slide it

00:23:38,150 --> 00:23:42,620
across me and you should be able to see

00:23:39,590 --> 00:23:45,140
that so so you can see there's a list of

00:23:42,620 --> 00:23:46,820
people select the people it changes so

00:23:45,140 --> 00:23:48,980
yeah we can see the code there that's

00:23:46,820 --> 00:23:50,600
good so that's good enough so inside

00:23:48,980 --> 00:23:52,760
here we have an application we can see

00:23:50,600 --> 00:23:56,060
that we're having a horizontal layout we

00:23:52,760 --> 00:23:58,160
have two components side by side we can

00:23:56,060 --> 00:24:02,030
very simply see that there's a list of

00:23:58,160 --> 00:24:04,570
people and the current person when that

00:24:02,030 --> 00:24:07,690
selected person changes it calls this a

00:24:04,570 --> 00:24:11,930
event handler called change person here

00:24:07,690 --> 00:24:17,510
this gets called and it sets the current

00:24:11,930 --> 00:24:18,650
person we have two components in here if

00:24:17,510 --> 00:24:21,620
we go in to have a look at one of these

00:24:18,650 --> 00:24:24,980
here's the select person we can see that

00:24:21,620 --> 00:24:28,130
it's just a list which is bound to array

00:24:24,980 --> 00:24:31,010
of people when that list changes we call

00:24:28,130 --> 00:24:33,170
another event handler that event handler

00:24:31,010 --> 00:24:35,270
creates a custom event and dispatches

00:24:33,170 --> 00:24:36,710
that so we're not talking about a lot of

00:24:35,270 --> 00:24:42,650
code here it's all very simple and

00:24:36,710 --> 00:24:44,420
straightforward in the person details

00:24:42,650 --> 00:24:46,700
we're just binding to the current person

00:24:44,420 --> 00:24:48,140
so when that current person changes that

00:24:46,700 --> 00:24:50,270
variable will actually change will

00:24:48,140 --> 00:24:53,870
property will change and this is just a

00:24:50,270 --> 00:24:55,490
simple property for that so I just I'll

00:24:53,870 --> 00:24:57,110
just show that the you know the object

00:24:55,490 --> 00:24:59,420
model here - so you can see that the

00:24:57,110 --> 00:25:00,440
object model is very very simple all

00:24:59,420 --> 00:25:02,840
right you know we just have a person

00:25:00,440 --> 00:25:06,170
with name email Apache ID that sort of

00:25:02,840 --> 00:25:08,960
thing so to change this to be a desktop

00:25:06,170 --> 00:25:14,120
app application the only thing that has

00:25:08,960 --> 00:25:15,980
to change is that you I think I didn't

00:25:14,120 --> 00:25:16,910
even change it to Windows application I

00:25:15,980 --> 00:25:18,140
should change that to Windows

00:25:16,910 --> 00:25:20,840
application but you don't even have to

00:25:18,140 --> 00:25:22,580
do that it seems so if I just run that

00:25:20,840 --> 00:25:24,260
one so this is not running in the

00:25:22,580 --> 00:25:26,150
browser now this is running an air you

00:25:24,260 --> 00:25:28,010
get the same application that just works

00:25:26,150 --> 00:25:29,030
as a desktop application and the chrome

00:25:28,010 --> 00:25:33,280
for that's going to be different

00:25:29,030 --> 00:25:36,350
depending on what platform you're on and

00:25:33,280 --> 00:25:38,150
with a little bit of work and just

00:25:36,350 --> 00:25:40,130
rearranging there the

00:25:38,150 --> 00:25:45,320
the application a little bit will

00:25:40,130 --> 00:25:46,220
actually get a a mobile application this

00:25:45,320 --> 00:25:48,110
is just going to be running in a

00:25:46,220 --> 00:25:50,810
simulator but I could cross compile this

00:25:48,110 --> 00:25:52,160
and it would run on iOS way Android and

00:25:50,810 --> 00:25:54,050
you can see that we've got a list here

00:25:52,160 --> 00:25:55,370
and then when we click on a list it

00:25:54,050 --> 00:25:56,540
shows the details like that because

00:25:55,370 --> 00:26:00,530
obviously on a small screen you're not

00:25:56,540 --> 00:26:01,730
going to have that side-by-side so at

00:26:00,530 --> 00:26:03,110
that point I think I'll just open it up

00:26:01,730 --> 00:26:10,960
for questions do we have any have any

00:26:03,110 --> 00:26:10,960
questions nobody

00:26:15,290 --> 00:26:21,410
I do not know the exact number of users

00:26:18,470 --> 00:26:23,690
but it is a large number I think at one

00:26:21,410 --> 00:26:27,860
point in time it was estimated there

00:26:23,690 --> 00:26:30,020
were 300,000 flex developers I assume

00:26:27,860 --> 00:26:33,290
the number is now less than that but it

00:26:30,020 --> 00:26:36,410
would still be significant and I'm I'm

00:26:33,290 --> 00:26:38,360
afraid developer and I basically do

00:26:36,410 --> 00:26:46,910
still code in Flex full-time and I'm

00:26:38,360 --> 00:26:48,350
seeing no shortage of work so flex is

00:26:46,910 --> 00:26:51,080
mostly built used for building

00:26:48,350 --> 00:26:53,870
enterprise apps and also mobile

00:26:51,080 --> 00:26:55,460
applications because of the the fact

00:26:53,870 --> 00:26:57,350
that you don't have to write two

00:26:55,460 --> 00:26:59,750
applications one prove you know iOS and

00:26:57,350 --> 00:27:03,770
one for Android and it has more features

00:26:59,750 --> 00:27:06,500
and performs either on par or better

00:27:03,770 --> 00:27:11,710
than sort of some of the HTML hybrid

00:27:06,500 --> 00:27:11,710
solutions it's still being used for that

00:27:13,930 --> 00:27:19,870
yes up the back there please mm-hmm

00:27:21,190 --> 00:27:25,100
yes it is confusing

00:27:23,360 --> 00:27:26,330
it's the branding the branding from

00:27:25,100 --> 00:27:27,950
Adobe made it very confusing

00:27:26,330 --> 00:27:29,660
unfortunately because they they put

00:27:27,950 --> 00:27:33,740
everything under the under the flash

00:27:29,660 --> 00:27:37,520
platform so flex itself is an SDK that

00:27:33,740 --> 00:27:40,760
is just source code right so it runs in

00:27:37,520 --> 00:27:44,000
the flash player in the browser and runs

00:27:40,760 --> 00:27:45,740
on desktop and mobile using air the

00:27:44,000 --> 00:27:48,410
flash player and air are just two

00:27:45,740 --> 00:27:49,970
different runtimes currently Apache flex

00:27:48,410 --> 00:27:54,620
is trying to make a third run time which

00:27:49,970 --> 00:27:58,070
is HTML and JavaScript so are both flash

00:27:54,620 --> 00:28:02,630
and air are owned by Adobe and are not

00:27:58,070 --> 00:28:04,960
open source products but flex runs on

00:28:02,630 --> 00:28:04,960
them yes

00:28:05,140 --> 00:28:12,590
thank you yes up the front

00:28:07,760 --> 00:28:13,940
oh the the ID there it was a flash

00:28:12,590 --> 00:28:16,220
builder but it's just an eclipse-based

00:28:13,940 --> 00:28:18,740
builder you don't have to use flash

00:28:16,220 --> 00:28:21,970
builder to create flex applications you

00:28:18,740 --> 00:28:24,020
can use a telling Jay I think there's

00:28:21,970 --> 00:28:26,210
there's a few others out there as well

00:28:24,020 --> 00:28:27,770
so you can basically use your editor of

00:28:26,210 --> 00:28:29,890
choice you can actually also even use

00:28:27,770 --> 00:28:32,540
the command line and by if you wanted to

00:28:29,890 --> 00:28:35,410
yeah well as an experiment the other day

00:28:32,540 --> 00:28:38,720
we were most of the people on the Apache

00:28:35,410 --> 00:28:41,570
either OS X for Windows users we don't

00:28:38,720 --> 00:28:43,040
have a lot of Linux people and it's

00:28:41,570 --> 00:28:45,230
actually we've just found out that the

00:28:43,040 --> 00:28:48,380
binary distribution for OS X works

00:28:45,230 --> 00:28:50,570
perfectly on Linux so no changes

00:28:48,380 --> 00:28:51,620
required so but we did I had to do that

00:28:50,570 --> 00:28:53,000
by just playing around well on the

00:28:51,620 --> 00:28:54,890
command line to see what would what

00:28:53,000 --> 00:28:56,720
would work so the compilers themselves

00:28:54,890 --> 00:28:59,059
are command-line compilers you can call

00:28:56,720 --> 00:29:07,010
them via ant or maven or whatever your

00:28:59,059 --> 00:29:09,710
choice is it does have some benefits in

00:29:07,010 --> 00:29:11,750
there so to help you the integrated

00:29:09,710 --> 00:29:12,919
debugger for example is there but it's

00:29:11,750 --> 00:29:14,990
definitely not essential that you use

00:29:12,919 --> 00:29:20,630
it's I mostly use it because that's what

00:29:14,990 --> 00:29:22,929
I'm familiar with any other questions

00:29:20,630 --> 00:29:22,929
yes

00:29:23,380 --> 00:29:34,580
mmm-hmm for integration tests the

00:29:31,630 --> 00:29:35,420
framework itself there has a test suite

00:29:34,580 --> 00:29:38,690
called mostella

00:29:35,420 --> 00:29:42,040
which basically takes it takes a whole

00:29:38,690 --> 00:29:44,330
lot of little flex applications and

00:29:42,040 --> 00:29:46,760
compiles them and then runs them and

00:29:44,330 --> 00:29:48,800
takes bitmaps of the screens and then

00:29:46,760 --> 00:29:50,330
compares the the screen bitmaps that's

00:29:48,800 --> 00:29:53,120
sort of what you want for integration

00:29:50,330 --> 00:29:57,350
testing for more unit testing style

00:29:53,120 --> 00:29:59,360
there's flex unit which is traditional J

00:29:57,350 --> 00:30:02,740
unit style testing and there's also

00:29:59,360 --> 00:30:07,070
another testing framework called

00:30:02,740 --> 00:30:09,200
mock alert which is users spies and

00:30:07,070 --> 00:30:12,280
mocking if that's more your sort of

00:30:09,200 --> 00:30:12,280
thing that's well worth looking into

00:30:15,280 --> 00:30:18,280
sorry

00:30:18,520 --> 00:30:27,130
I'm not aware of that

00:30:20,230 --> 00:30:28,960
I'm sorry oh yeah yes yeah there is

00:30:27,130 --> 00:30:30,430
Sophia that's that the whole there's the

00:30:28,960 --> 00:30:32,920
automation library isn't it so basically

00:30:30,430 --> 00:30:36,480
anything can and there's also selenium

00:30:32,920 --> 00:30:36,480
also it works quite well with it as well

00:30:38,160 --> 00:30:52,050
yes sorry mm-hmm yes yes

00:30:56,150 --> 00:31:00,320
no they're not no we have no we have no

00:30:58,610 --> 00:31:02,240
control over those Adobe can do whatever

00:31:00,320 --> 00:31:03,080
they want with them and they're not

00:31:02,240 --> 00:31:04,880
going to tell us what's going to be

00:31:03,080 --> 00:31:06,890
happening

00:31:04,880 --> 00:31:08,990
but they are still well supported and

00:31:06,890 --> 00:31:11,150
they will be from for many years so uh

00:31:08,990 --> 00:31:12,770
in the the short-term future there's no

00:31:11,150 --> 00:31:15,400
real danger there and we are as I said

00:31:12,770 --> 00:31:18,080
working on HTML and and JavaScript to

00:31:15,400 --> 00:31:19,700
try and have other options available to

00:31:18,080 --> 00:31:22,190
us and it may be that will actually get

00:31:19,700 --> 00:31:23,540
the compilers to work and put new

00:31:22,190 --> 00:31:26,060
compilers quite modular and you can

00:31:23,540 --> 00:31:27,830
actually quite easily extend it to

00:31:26,060 --> 00:31:30,350
target other languages as well so it may

00:31:27,830 --> 00:31:34,360
end up but flex actually Tugg targets

00:31:30,350 --> 00:31:34,360
swing or something like that

00:31:52,970 --> 00:31:57,690
there are two in my experience there are

00:31:56,040 --> 00:32:02,040
a few frameworks that do all of what

00:31:57,690 --> 00:32:06,510
flex can do and and they don't do it in

00:32:02,040 --> 00:32:08,580
the same way flex is quite concise when

00:32:06,510 --> 00:32:11,040
you write it and it's a you can that you

00:32:08,580 --> 00:32:12,510
can be very very productive with it you

00:32:11,040 --> 00:32:15,810
can you can write very complex

00:32:12,510 --> 00:32:20,850
applications with large teams in a short

00:32:15,810 --> 00:32:23,370
amount of time whereas and at you have

00:32:20,850 --> 00:32:26,790
better testing and less cross-platform

00:32:23,370 --> 00:32:28,470
issues less cross-browser issues there's

00:32:26,790 --> 00:32:31,020
there's still a lot of reasons why

00:32:28,470 --> 00:32:32,730
flexes of as a is a framework that you

00:32:31,020 --> 00:32:34,080
would want to use I mean it entirely

00:32:32,730 --> 00:32:35,640
depends on your own business case and

00:32:34,080 --> 00:32:37,260
what they application you you're making

00:32:35,640 --> 00:32:39,840
obviously flex is not always going to be

00:32:37,260 --> 00:32:41,550
the best answer but there is definitely

00:32:39,840 --> 00:32:43,590
a large set of problems out there where

00:32:41,550 --> 00:32:44,850
flex solves it quite well and solves it

00:32:43,590 --> 00:32:53,430
quite better than a lot of the other

00:32:44,850 --> 00:32:59,630
frameworks we have for time I do oh well

00:32:53,430 --> 00:32:59,630
I went to first any other questions

00:33:01,940 --> 00:33:04,940
yeah

00:33:14,270 --> 00:33:20,850
yeah there's it is an issue and you can

00:33:18,870 --> 00:33:22,320
sometimes run into a problem with it one

00:33:20,850 --> 00:33:23,820
of the the things about the Flex

00:33:22,320 --> 00:33:26,460
framework is that when you actually set

00:33:23,820 --> 00:33:27,690
a property under the hood a lot of it is

00:33:26,460 --> 00:33:29,280
it says like height and width for

00:33:27,690 --> 00:33:30,840
example you say I want to change the

00:33:29,280 --> 00:33:32,490
hide I want to change the hide I want to

00:33:30,840 --> 00:33:34,230
change the height it doesn't change it

00:33:32,490 --> 00:33:36,600
every single time it basically matches

00:33:34,230 --> 00:33:37,320
up all those changes and then changes it

00:33:36,600 --> 00:33:39,450
once

00:33:37,320 --> 00:33:41,429
on honor there's a frame rate inside

00:33:39,450 --> 00:33:44,700
flexes like you know for 30 frames a

00:33:41,429 --> 00:33:46,410
second type thing so a lot of those

00:33:44,700 --> 00:33:49,380
problems disappear because all the

00:33:46,410 --> 00:33:52,260
updates are done at one single time do

00:33:49,380 --> 00:33:54,540
most properties but you can still run

00:33:52,260 --> 00:33:58,740
into into issues where order of binding

00:33:54,540 --> 00:34:01,110
is important and you can work around

00:33:58,740 --> 00:34:02,610
that in other ways generally what you

00:34:01,110 --> 00:34:04,049
can do because you combine two you don't

00:34:02,610 --> 00:34:06,419
have to buy into simple variables you

00:34:04,049 --> 00:34:08,580
can buy into complex ones and you can

00:34:06,419 --> 00:34:10,740
put all the values inside that so as

00:34:08,580 --> 00:34:12,570
long as that's created it at once and

00:34:10,740 --> 00:34:13,470
then you change that rather than

00:34:12,570 --> 00:34:16,230
changing a whole little little

00:34:13,470 --> 00:34:18,270
properties in order you just create a

00:34:16,230 --> 00:34:24,210
new object set all the properties and

00:34:18,270 --> 00:34:25,859
then change that entire change that

00:34:24,210 --> 00:34:28,109
entire object and that means all of them

00:34:25,859 --> 00:34:29,879
get set at once so that there's there's

00:34:28,109 --> 00:34:31,830
quite easy ways around that but I have

00:34:29,879 --> 00:34:36,090
run into a few problems where it's taken

00:34:31,830 --> 00:34:40,379
me a while to work out any other

00:34:36,090 --> 00:34:48,240
questions no good thanks for coming

00:34:40,379 --> 00:34:50,280
along and the slides are already up on

00:34:48,240 --> 00:34:52,200
the web and the code is for those

00:34:50,280 --> 00:34:54,149
applications are on github if you want

00:34:52,200 --> 00:34:56,550
to take a look send me an email ask me

00:34:54,149 --> 00:35:00,140
any questions find me at the conference

00:34:56,550 --> 00:35:00,140

YouTube URL: https://www.youtube.com/watch?v=KbC3tp4oMgs


