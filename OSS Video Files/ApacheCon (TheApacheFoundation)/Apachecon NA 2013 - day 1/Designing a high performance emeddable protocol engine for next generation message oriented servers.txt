Title: Designing a high performance emeddable protocol engine for next generation message oriented servers
Publication date: 2013-10-17
Playlist: Apachecon NA 2013 - day 1
Description: 
	Ted Ross ApacheCon NA 2013
Tapping the Stream
Captions: 
	00:00:00,000 --> 00:00:07,109
but so i'll give you a shorter version

00:00:01,170 --> 00:00:08,610
on the slide so I how many people here

00:00:07,109 --> 00:00:12,990
were in the earlier in this morning's

00:00:08,610 --> 00:00:16,619
presentation by Raphael so I think I see

00:00:12,990 --> 00:00:19,350
a few people who are there thank you so

00:00:16,619 --> 00:00:21,210
this I'm going to expand upon and kind

00:00:19,350 --> 00:00:22,260
of go you know beyond where where he's

00:00:21,210 --> 00:00:24,510
talked but there's going to be some

00:00:22,260 --> 00:00:27,840
overlap and some relevance to his

00:00:24,510 --> 00:00:29,880
discussion about amqp and proton and so

00:00:27,840 --> 00:00:31,679
I'm going to talk about today is what is

00:00:29,880 --> 00:00:33,690
amqp and I'll tell you what that means

00:00:31,679 --> 00:00:35,460
you know why is it important for large

00:00:33,690 --> 00:00:37,920
distributed enterprises and large

00:00:35,460 --> 00:00:40,680
distributed systems and I'm gonna talk

00:00:37,920 --> 00:00:42,600
about how the apache community is making

00:00:40,680 --> 00:00:44,129
it a reality what we're doing to work on

00:00:42,600 --> 00:00:47,180
it and we can wrap up and quit with

00:00:44,129 --> 00:00:49,530
questions if we have time at the end and

00:00:47,180 --> 00:00:52,440
here's what I'm hoping that you'll take

00:00:49,530 --> 00:00:54,149
away from the discussion that knowledge

00:00:52,440 --> 00:00:58,260
that amqp is actually more than just

00:00:54,149 --> 00:01:01,620
messaging as we've known it that amqp is

00:00:58,260 --> 00:01:04,019
complex yet capable and that's a

00:01:01,620 --> 00:01:05,580
trade-off it's important that Apache mix

00:01:04,019 --> 00:01:08,520
and keep be accessible and easy to use

00:01:05,580 --> 00:01:10,530
and of course that the apache software

00:01:08,520 --> 00:01:12,000
foundation is on the cutting edge of

00:01:10,530 --> 00:01:15,299
distributed computing had to throw that

00:01:12,000 --> 00:01:16,860
in there so um and just just very

00:01:15,299 --> 00:01:20,549
quickly let me introduce myself my name

00:01:16,860 --> 00:01:22,140
is Ted Ross I'm I work with a red hat

00:01:20,549 --> 00:01:24,420
I'm out of the engineering headquarters

00:01:22,140 --> 00:01:26,130
in western Massachusetts I'm managing

00:01:24,420 --> 00:01:28,380
principal software engineer which means

00:01:26,130 --> 00:01:31,439
that I write code but i also have people

00:01:28,380 --> 00:01:35,430
working for me I'm a PMC member and a

00:01:31,439 --> 00:01:37,740
committer on the cupid project and the

00:01:35,430 --> 00:01:40,860
we have a product called merge m which

00:01:37,740 --> 00:01:43,020
is a practice a a prioritized version of

00:01:40,860 --> 00:01:47,070
cupid and a couple of other things that

00:01:43,020 --> 00:01:49,590
we provide commercial support for my

00:01:47,070 --> 00:01:51,570
background is computer networking and

00:01:49,590 --> 00:01:53,939
network security I am NOT a middleware

00:01:51,570 --> 00:01:56,250
guy norm I am messaging guy I kind of

00:01:53,939 --> 00:01:59,340
came up the protocol stack from device

00:01:56,250 --> 00:02:02,729
drivers to tcp/ip thinking that

00:01:59,340 --> 00:02:05,689
messaging was just the next level up it

00:02:02,729 --> 00:02:05,689
really isn't that way so

00:02:06,860 --> 00:02:13,850
to rehash as quickly what Rafi's talked

00:02:11,000 --> 00:02:15,580
about this morning amqp is stands for

00:02:13,850 --> 00:02:18,170
the advanced message queuing protocol

00:02:15,580 --> 00:02:20,030
their tagline if you go to their website

00:02:18,170 --> 00:02:21,740
and it's a good tag line is open an

00:02:20,030 --> 00:02:24,500
internet protocol for business messaging

00:02:21,740 --> 00:02:27,820
it is a protocol and it was developed by

00:02:24,500 --> 00:02:31,700
users and vendors working together

00:02:27,820 --> 00:02:32,990
financial services were the first to get

00:02:31,700 --> 00:02:34,790
started on it that's where it was born

00:02:32,990 --> 00:02:38,600
but other industry verticals are heavily

00:02:34,790 --> 00:02:41,060
involved in it as well and primarily

00:02:38,600 --> 00:02:42,620
developed you to address lock-in from

00:02:41,060 --> 00:02:44,780
proprietary messaging systems the fact

00:02:42,620 --> 00:02:48,709
that you know messaging systems from

00:02:44,780 --> 00:02:51,170
different vendors don't interoperate so

00:02:48,709 --> 00:02:54,820
with that said this is the origin of

00:02:51,170 --> 00:02:57,520
amqp really is from the message oriented

00:02:54,820 --> 00:03:01,910
message-oriented middleware world

00:02:57,520 --> 00:03:05,300
meaning that it was designed to deal

00:03:01,910 --> 00:03:07,489
with you know issue issues in you know

00:03:05,300 --> 00:03:11,630
tibco IBM mq the you know how did that

00:03:07,489 --> 00:03:13,459
middleware messaging industry and as

00:03:11,630 --> 00:03:15,590
such early versions of the protocol were

00:03:13,459 --> 00:03:18,170
based on a client in a broker it was a

00:03:15,590 --> 00:03:20,180
symmetric the protocol and it actually

00:03:18,170 --> 00:03:23,060
defined how the broker was to operate

00:03:20,180 --> 00:03:24,980
what the broker behavior was amqp one

00:03:23,060 --> 00:03:26,420
point 0 is the newly ratified spit was

00:03:24,980 --> 00:03:29,810
not nearly anymore its but it's the

00:03:26,420 --> 00:03:31,760
ratified final specification and wonder

00:03:29,810 --> 00:03:35,420
dropped that asymmetry went for a

00:03:31,760 --> 00:03:37,100
symmetric communication pattern and it

00:03:35,420 --> 00:03:38,870
has become mostly silent on broker

00:03:37,100 --> 00:03:41,390
behavior doesn't preclude what was there

00:03:38,870 --> 00:03:42,890
before but it doesn't require anything

00:03:41,390 --> 00:03:46,940
either and it's not built into the

00:03:42,890 --> 00:03:49,400
protocol this this is actually a major

00:03:46,940 --> 00:03:52,820
improvement in what the from what the

00:03:49,400 --> 00:03:54,470
early versions did so am QP I'm going to

00:03:52,820 --> 00:03:56,600
claim is more than just messaging it's

00:03:54,470 --> 00:04:00,290
more than middleware and I'll go into

00:03:56,600 --> 00:04:02,060
that so I have to jump on to this

00:04:00,290 --> 00:04:04,040
question I get this question all the

00:04:02,060 --> 00:04:05,780
time when I talk or when I help other

00:04:04,040 --> 00:04:07,130
people do talks and the question always

00:04:05,780 --> 00:04:08,930
comes up and it's something like well

00:04:07,130 --> 00:04:11,360
how does you know how does JMS compete

00:04:08,930 --> 00:04:15,220
with amqp or how does this thing for

00:04:11,360 --> 00:04:17,110
months open mala from from you know

00:04:15,220 --> 00:04:20,650
New York Stock Exchange is that going to

00:04:17,110 --> 00:04:22,510
kill n QP and the answer is that these

00:04:20,650 --> 00:04:25,270
things are complimentary open mama and

00:04:22,510 --> 00:04:27,910
JMS are standard API s amqp is a

00:04:25,270 --> 00:04:29,920
protocol and I'm going to hammer that

00:04:27,910 --> 00:04:35,220
home because it's important to

00:04:29,920 --> 00:04:35,220
understand so here's kind of a generic

00:04:35,640 --> 00:04:39,990
architecture diagram and what it means

00:04:37,480 --> 00:04:42,340
to have a distributed application that

00:04:39,990 --> 00:04:44,800
interacts over protocol so the

00:04:42,340 --> 00:04:46,540
application uses an API to access a

00:04:44,800 --> 00:04:48,010
messaging system that then you know if

00:04:46,540 --> 00:04:49,990
there's a network involved in different

00:04:48,010 --> 00:04:53,680
systems it has to speak of protocol over

00:04:49,990 --> 00:04:56,770
the wire so one classic example familiar

00:04:53,680 --> 00:04:58,330
to all is using HTTP between a web

00:04:56,770 --> 00:05:01,660
server that has maybe the common gateway

00:04:58,330 --> 00:05:04,150
interface behind it as server API and

00:05:01,660 --> 00:05:07,419
perhaps a ruby based REST API in the

00:05:04,150 --> 00:05:10,030
client side likewise we may have JMS

00:05:07,419 --> 00:05:12,010
from a particular vendor that talks to

00:05:10,030 --> 00:05:13,419
other applications using JMS in which

00:05:12,010 --> 00:05:16,360
case people don't even think about the

00:05:13,419 --> 00:05:18,550
protocol they're just thinking about JMS

00:05:16,360 --> 00:05:20,470
as the standard but there is a protocol

00:05:18,550 --> 00:05:22,270
underlying it if there is going to be

00:05:20,470 --> 00:05:25,930
any communication between systems over a

00:05:22,270 --> 00:05:28,630
network often as a broker involved do

00:05:25,930 --> 00:05:31,810
queuing and storing of messages in

00:05:28,630 --> 00:05:35,350
intermediate in between production and

00:05:31,810 --> 00:05:38,080
consumption so if I have JMS vendor a

00:05:35,350 --> 00:05:40,450
and i acquire a company that uses JMS

00:05:38,080 --> 00:05:42,370
vendor be and we merge our systems

00:05:40,450 --> 00:05:44,260
together there is no interoperability

00:05:42,370 --> 00:05:46,330
because the two proprietary protocols

00:05:44,260 --> 00:05:51,340
are different and incompatible and

00:05:46,330 --> 00:05:53,530
unpublished and private so am QP steps

00:05:51,340 --> 00:05:55,750
in to solve this problem so m QP

00:05:53,530 --> 00:05:57,610
provides the promise of interoperability

00:05:55,750 --> 00:06:00,040
to the messaging level where vendor a

00:05:57,610 --> 00:06:02,050
and vendor be can then share the same

00:06:00,040 --> 00:06:06,729
bus and use each other's brokers and

00:06:02,050 --> 00:06:09,870
clients and furthermore we can go beyond

00:06:06,729 --> 00:06:11,830
JMS and we can go beyond you know a

00:06:09,870 --> 00:06:15,330
platform and say that I can actually

00:06:11,830 --> 00:06:18,490
interact between you know Java JMS and

00:06:15,330 --> 00:06:20,290
windows Nets so if I've got you know an

00:06:18,490 --> 00:06:21,940
infrastructure based on windows and net

00:06:20,290 --> 00:06:24,130
and I've got an infrastructure based on

00:06:21,940 --> 00:06:26,639
Java and JMS amqp promises to allow

00:06:24,130 --> 00:06:29,439
these things to interact with each other

00:06:26,639 --> 00:06:32,710
over a common broker or a standard

00:06:29,439 --> 00:06:34,150
broker or no broker at all which is

00:06:32,710 --> 00:06:37,270
something that's available in the and

00:06:34,150 --> 00:06:38,919
keep you 1 point 0 specification so

00:06:37,270 --> 00:06:40,300
since we're talking about protocols I'll

00:06:38,919 --> 00:06:42,400
just throw up a list this is not a

00:06:40,300 --> 00:06:44,439
complete list but a list of protocols to

00:06:42,400 --> 00:06:47,949
contrast so these are all messaging

00:06:44,439 --> 00:06:50,740
protocols HTTP very familiar SMTP for

00:06:47,949 --> 00:06:53,650
email stomp is a very nice and simple

00:06:50,740 --> 00:06:57,219
messaging protocol it's text-based very

00:06:53,650 --> 00:07:01,090
easy to use and qtt and others as well

00:06:57,219 --> 00:07:02,889
so as I discuss the protocol and what

00:07:01,090 --> 00:07:04,750
its capabilities and features are

00:07:02,889 --> 00:07:07,120
sometimes I'll throw in you know

00:07:04,750 --> 00:07:10,539
comparison between it and other others

00:07:07,120 --> 00:07:14,139
protocols as well so here's a rundown of

00:07:10,539 --> 00:07:16,150
the anatomy of of amqp start to the

00:07:14,139 --> 00:07:18,960
connection it's very fat pipe because

00:07:16,150 --> 00:07:21,819
that to fit a lot of things into it so

00:07:18,960 --> 00:07:24,419
the connection is basically a reliable

00:07:21,819 --> 00:07:28,389
transport connection so amqp you

00:07:24,419 --> 00:07:29,919
specifies default port for TCP but

00:07:28,389 --> 00:07:31,810
there's no reason why it has to be TCP

00:07:29,919 --> 00:07:33,639
in fact the cupid project allows also

00:07:31,810 --> 00:07:36,629
RDMA over infiniband or 10 gig Ethernet

00:07:33,639 --> 00:07:40,150
for you know high bandwidth low latency

00:07:36,629 --> 00:07:41,680
applications at this level you can

00:07:40,150 --> 00:07:44,860
provide transport level security from

00:07:41,680 --> 00:07:52,479
ssl/tls sasal is a way of plugging in

00:07:44,860 --> 00:07:54,279
various methods for authentication but

00:07:52,479 --> 00:07:56,050
there's more structure now involved in

00:07:54,279 --> 00:07:58,569
this amqp anatomy so within this

00:07:56,050 --> 00:08:01,240
connection i can embed multiple sessions

00:07:58,569 --> 00:08:03,370
and when i have multiple sessions or

00:08:01,240 --> 00:08:06,460
logical sessions this allows me to

00:08:03,370 --> 00:08:08,500
multiplex data flow over a saying over a

00:08:06,460 --> 00:08:11,129
single connection so if I may have a

00:08:08,500 --> 00:08:13,539
single TCP connection but I may have

00:08:11,129 --> 00:08:14,949
literally thousands of independent

00:08:13,539 --> 00:08:17,889
conversations flowing through that

00:08:14,949 --> 00:08:21,310
connection and amqp allows me to do that

00:08:17,889 --> 00:08:23,949
by allowing the creation of independent

00:08:21,310 --> 00:08:25,779
sessions and the sessions allow for

00:08:23,949 --> 00:08:27,430
interleaving of message flow so one

00:08:25,779 --> 00:08:29,740
session is in the process of

00:08:27,430 --> 00:08:31,690
transferring a very very large image

00:08:29,740 --> 00:08:34,029
file for example and the other session

00:08:31,690 --> 00:08:35,300
is in the process of transferring small

00:08:34,029 --> 00:08:37,039
alerts

00:08:35,300 --> 00:08:38,690
the alerts don't have to wait for the

00:08:37,039 --> 00:08:40,880
image file to be completely completed

00:08:38,690 --> 00:08:44,839
the protocol breaks them up into chunks

00:08:40,880 --> 00:08:47,839
and allows them to be interleaved next

00:08:44,839 --> 00:08:49,459
level down links so within the sessions

00:08:47,839 --> 00:08:53,200
we can we create links and links are

00:08:49,459 --> 00:08:56,480
unidirectional flows of of traffic no

00:08:53,200 --> 00:09:01,279
traffic no data flows over amqp without

00:08:56,480 --> 00:09:03,230
there being a link and links being

00:09:01,279 --> 00:09:05,600
redirection abut they can you again have

00:09:03,230 --> 00:09:07,670
thousands of links within within a

00:09:05,600 --> 00:09:09,589
connection and this allows for full

00:09:07,670 --> 00:09:11,930
duplex message transfer so i can have

00:09:09,589 --> 00:09:13,550
messages flowing left to right and i can

00:09:11,930 --> 00:09:18,260
have messages flowing independently

00:09:13,550 --> 00:09:21,230
right to left this is in contrast for

00:09:18,260 --> 00:09:22,850
example to http where HTTP is a is

00:09:21,230 --> 00:09:25,820
really a half duplex protocol where it's

00:09:22,850 --> 00:09:28,640
always request response this allows

00:09:25,820 --> 00:09:30,140
servers to send information unsolicited

00:09:28,640 --> 00:09:33,680
to clients if that's what your

00:09:30,140 --> 00:09:37,010
application demands asynchronous message

00:09:33,680 --> 00:09:38,660
transfer means that you can ratchet up

00:09:37,010 --> 00:09:40,750
the performance because messages flow

00:09:38,660 --> 00:09:44,959
and their acknowledgments flow back

00:09:40,750 --> 00:09:46,820
asynchronously and flow control is

00:09:44,959 --> 00:09:48,440
handled at the link level so i can have

00:09:46,820 --> 00:09:50,930
independent flow control one of those

00:09:48,440 --> 00:09:53,870
links may be backed up and congested and

00:09:50,930 --> 00:09:55,279
slowed down or maybe even stopped where

00:09:53,870 --> 00:09:57,140
other lengths over the same connection

00:09:55,279 --> 00:10:03,800
can be flowing freely each each one has

00:09:57,140 --> 00:10:05,300
its own notion of flow control so let's

00:10:03,800 --> 00:10:08,240
forget about the connections in the

00:10:05,300 --> 00:10:10,690
sessions let's focus on the link and and

00:10:08,240 --> 00:10:15,140
again i'll reiterate that the link is

00:10:10,690 --> 00:10:18,680
unidirectional and it is used to

00:10:15,140 --> 00:10:21,110
transfer messages or deliveries from a

00:10:18,680 --> 00:10:23,540
source node to a destination node so

00:10:21,110 --> 00:10:25,370
I've got a source node on the right it's

00:10:23,540 --> 00:10:26,990
got a message sitting on it wanting to

00:10:25,370 --> 00:10:30,589
be delivered to the destination node on

00:10:26,990 --> 00:10:32,329
the left so that this this message can

00:10:30,589 --> 00:10:34,490
be transferred and actually one of two

00:10:32,329 --> 00:10:36,290
different modes it can be copied I'll at

00:10:34,490 --> 00:10:37,670
the top one where the message is

00:10:36,290 --> 00:10:40,040
transferred to the destination but it

00:10:37,670 --> 00:10:41,600
remains on the source or it can be moved

00:10:40,040 --> 00:10:43,430
like the lower one where the message is

00:10:41,600 --> 00:10:45,150
actually transferred and its ownership

00:10:43,430 --> 00:10:47,310
is moved from right to

00:10:45,150 --> 00:10:50,730
in this case so if you look at the

00:10:47,310 --> 00:10:53,070
source node in the copy case when I say

00:10:50,730 --> 00:10:55,020
no time I don't mean Q I don't mean

00:10:53,070 --> 00:10:56,490
anything in particular even topic that

00:10:55,020 --> 00:10:58,470
could be a file it could be a database

00:10:56,490 --> 00:11:01,770
it could be you know some sort of live

00:10:58,470 --> 00:11:07,020
sensor that's providing data in fact

00:11:01,770 --> 00:11:08,640
that link can I on its you know on its

00:11:07,020 --> 00:11:09,870
ingress side here this the source side

00:11:08,640 --> 00:11:12,300
of the link may even have a filter

00:11:09,870 --> 00:11:13,800
associated with it that's like a query

00:11:12,300 --> 00:11:16,560
so you could actually implement a

00:11:13,800 --> 00:11:18,240
database query using an AM QP link by

00:11:16,560 --> 00:11:21,240
attaching it saying here's what my

00:11:18,240 --> 00:11:23,340
criteria is my filter and the source

00:11:21,240 --> 00:11:32,480
node then send and transfer information

00:11:23,340 --> 00:11:36,440
across according to that criteria so as

00:11:32,480 --> 00:11:38,430
messages are transferred they are

00:11:36,440 --> 00:11:39,990
potentially settled there's a number of

00:11:38,430 --> 00:11:42,570
different ways or different qualities of

00:11:39,990 --> 00:11:44,490
serves that service if you will as to

00:11:42,570 --> 00:11:46,920
how messages are transferred so all the

00:11:44,490 --> 00:11:49,470
way from kind of the the very best

00:11:46,920 --> 00:11:51,300
effort fire and forget where I as a

00:11:49,470 --> 00:11:52,800
source node pre settle the message and I

00:11:51,300 --> 00:11:54,540
don't care whether it gets to the

00:11:52,800 --> 00:11:56,040
destination and if it doesn't get there

00:11:54,540 --> 00:11:57,630
I don't want to know about it I'm going

00:11:56,040 --> 00:12:00,030
to just do my best to get the message to

00:11:57,630 --> 00:12:02,370
the destination or I can go the next

00:12:00,030 --> 00:12:03,870
level up where I wish to find out what

00:12:02,370 --> 00:12:08,160
its disposition is the other side was it

00:12:03,870 --> 00:12:10,560
accepted or was it rejected or was it

00:12:08,160 --> 00:12:12,360
released and rejected means that the

00:12:10,560 --> 00:12:16,980
receiver decided that the message was

00:12:12,360 --> 00:12:19,620
evil and not not not to be sent anywhere

00:12:16,980 --> 00:12:21,060
else and it should be dropped released

00:12:19,620 --> 00:12:23,940
means that the destination thought the

00:12:21,060 --> 00:12:26,070
message is ok but didn't have time or

00:12:23,940 --> 00:12:29,640
inclination to deal with it and wants it

00:12:26,070 --> 00:12:35,070
to be recent to somebody else from the

00:12:29,640 --> 00:12:37,560
source node at a later time as we go up

00:12:35,070 --> 00:12:38,820
the level of complexity of this quality

00:12:37,560 --> 00:12:40,770
of service we have the notion of

00:12:38,820 --> 00:12:43,140
transactions where a local transaction

00:12:40,770 --> 00:12:44,520
from source to destination is one I have

00:12:43,140 --> 00:12:46,380
a certain number of messages that either

00:12:44,520 --> 00:12:49,020
must all be delivered or must none be

00:12:46,380 --> 00:12:51,570
delivered so 25 messages or two messages

00:12:49,020 --> 00:12:53,580
in this case get them both there or get

00:12:51,570 --> 00:12:55,740
none of them there and if they don't all

00:12:53,580 --> 00:12:57,330
arrive and we'll roll back transaction

00:12:55,740 --> 00:12:57,710
and none of the messages will have been

00:12:57,330 --> 00:13:01,340
Tran

00:12:57,710 --> 00:13:03,920
for a distributed transaction is where

00:13:01,340 --> 00:13:05,990
I've got some third party in the mix so

00:13:03,920 --> 00:13:08,060
for example if my destination node is

00:13:05,990 --> 00:13:10,610
interacting with a database these two

00:13:08,060 --> 00:13:13,490
messages arrive in a transaction and I'm

00:13:10,610 --> 00:13:15,500
then going to do two sequel inserts into

00:13:13,490 --> 00:13:17,000
my database on a different transaction

00:13:15,500 --> 00:13:19,130
in the database I want to make sure that

00:13:17,000 --> 00:13:21,620
those messages go into the database the

00:13:19,130 --> 00:13:23,360
database rejects or fails or if that

00:13:21,620 --> 00:13:26,420
transaction rolls back I can then also

00:13:23,360 --> 00:13:28,190
roll back the transfer so that the

00:13:26,420 --> 00:13:30,680
messages wind up back on the source and

00:13:28,190 --> 00:13:32,570
it's as though nothing happened or or

00:13:30,680 --> 00:13:39,020
there or the entire distributed

00:13:32,570 --> 00:13:41,510
transaction is completed another aspect

00:13:39,020 --> 00:13:43,010
that I referenced before when talking

00:13:41,510 --> 00:13:45,350
about links is the notion of flow

00:13:43,010 --> 00:13:47,420
control where the destination can issue

00:13:45,350 --> 00:13:49,040
credit so the destination can actually

00:13:47,420 --> 00:13:50,570
place a limit on how many messages are

00:13:49,040 --> 00:13:54,020
going to be received or how much space

00:13:50,570 --> 00:13:55,850
it has available to store received

00:13:54,020 --> 00:13:57,680
messages so in this case I've got three

00:13:55,850 --> 00:14:00,830
slots and one message has been received

00:13:57,680 --> 00:14:02,750
and the remaining credit on the source

00:14:00,830 --> 00:14:03,860
is to that means the source is not going

00:14:02,750 --> 00:14:05,780
to send me any more than two more

00:14:03,860 --> 00:14:07,460
messages because I don't want to have

00:14:05,780 --> 00:14:10,730
any more than three messages sitting on

00:14:07,460 --> 00:14:12,380
the left hand side flow control is

00:14:10,730 --> 00:14:15,650
independent from settlement or

00:14:12,380 --> 00:14:17,510
acknowledgement of messages so here's a

00:14:15,650 --> 00:14:20,060
use case that I've seen in the wild in a

00:14:17,510 --> 00:14:21,710
number of different cases and it's

00:14:20,060 --> 00:14:24,320
actually a fairly common and interesting

00:14:21,710 --> 00:14:26,900
use case for a large distributed system

00:14:24,320 --> 00:14:28,730
I've got a data collection system that

00:14:26,900 --> 00:14:30,620
is collecting data from a multitude of

00:14:28,730 --> 00:14:31,910
data sources perhaps hundreds of

00:14:30,620 --> 00:14:36,200
thousands perhaps millions of data

00:14:31,910 --> 00:14:39,320
sources all of which come in at the time

00:14:36,200 --> 00:14:43,040
of their own choosing to send me the

00:14:39,320 --> 00:14:44,900
information that they collected and so

00:14:43,040 --> 00:14:46,430
what that means that these data sources

00:14:44,900 --> 00:14:48,260
are going to make a connection to my

00:14:46,430 --> 00:14:49,940
collection system and drop drop of data

00:14:48,260 --> 00:14:52,970
there for storage and for analysis or

00:14:49,940 --> 00:14:56,150
for whatever purpose it serves the

00:14:52,970 --> 00:14:57,830
problem is that if you do this with one

00:14:56,150 --> 00:14:59,720
of the simpler protocols so you might

00:14:57,830 --> 00:15:01,130
say yourself well HTTP is a nice simple

00:14:59,720 --> 00:15:04,850
protocol or stomps a nice simple

00:15:01,130 --> 00:15:06,680
protocol for trans transmitting data but

00:15:04,850 --> 00:15:07,870
if I've got a collection server that's

00:15:06,680 --> 00:15:11,209
going to

00:15:07,870 --> 00:15:13,459
get a hundred thousand dumps of data all

00:15:11,209 --> 00:15:14,720
at the same time I've got a bit of a

00:15:13,459 --> 00:15:18,199
system problem I'm going to have to

00:15:14,720 --> 00:15:19,670
either I'm going to have to either over

00:15:18,199 --> 00:15:22,220
provision that system make it very very

00:15:19,670 --> 00:15:23,870
big and make it very very memory you

00:15:22,220 --> 00:15:26,000
have a lot of memory in it to handle all

00:15:23,870 --> 00:15:27,589
that burst of data or I'm going to have

00:15:26,000 --> 00:15:28,880
to build something in my application in

00:15:27,589 --> 00:15:30,800
order to I'm going to build something

00:15:28,880 --> 00:15:33,560
around that protocol do something

00:15:30,800 --> 00:15:36,019
unnatural maybe with HTTP in order to

00:15:33,560 --> 00:15:38,180
make it not overflow me because you know

00:15:36,019 --> 00:15:41,810
HTTP and stomp are going to rely on the

00:15:38,180 --> 00:15:43,040
TCP the underlying TCP back pressure and

00:15:41,810 --> 00:15:44,630
that's not going to provide back

00:15:43,040 --> 00:15:45,769
pressure until you've sent quite a lot

00:15:44,630 --> 00:15:48,589
of data so I'm going to need a lot of

00:15:45,769 --> 00:15:50,930
memory in order to handle it with amqp

00:15:48,589 --> 00:15:52,399
links that data collection system can

00:15:50,930 --> 00:15:54,350
accept the connections but issued no

00:15:52,399 --> 00:15:56,870
credit and only issue credit in a

00:15:54,350 --> 00:15:59,389
rolling fashion across those links as it

00:15:56,870 --> 00:16:01,940
as it has memory to process the data so

00:15:59,389 --> 00:16:02,839
it can provide for a very easy you know

00:16:01,940 --> 00:16:04,880
even though it's a more complicated

00:16:02,839 --> 00:16:07,009
protocol and a more sophisticated

00:16:04,880 --> 00:16:09,370
protocol it can actually provide for a

00:16:07,009 --> 00:16:12,170
more simple overall system design

00:16:09,370 --> 00:16:13,670
because I don't need to over engineer to

00:16:12,170 --> 00:16:19,069
handle bursts of traffic I've got

00:16:13,670 --> 00:16:22,790
built-in capability to handle that so

00:16:19,069 --> 00:16:23,899
summarize the benefits and I guess I

00:16:22,790 --> 00:16:27,110
would call this kind of a large

00:16:23,899 --> 00:16:30,529
enterprise benefits of amqp it provides

00:16:27,110 --> 00:16:32,949
session multiplexing it provides full

00:16:30,529 --> 00:16:36,170
duplex duplex asynchronous transfer

00:16:32,949 --> 00:16:38,120
independent threads of transfer it

00:16:36,170 --> 00:16:41,029
provides formal semantics of message

00:16:38,120 --> 00:16:42,620
handoff including transactions it's very

00:16:41,029 --> 00:16:45,230
deliberate about who owns the message at

00:16:42,620 --> 00:16:47,720
any given time provides data security

00:16:45,230 --> 00:16:49,069
both at the connection level and it can

00:16:47,720 --> 00:16:53,480
provide data security at the end to end

00:16:49,069 --> 00:16:55,069
level it provides flow control it

00:16:53,480 --> 00:16:56,480
provides serialization of structured

00:16:55,069 --> 00:16:58,730
data which is something I didn't go into

00:16:56,480 --> 00:17:01,399
detail on but that rapey spoke about

00:16:58,730 --> 00:17:05,360
earlier and the ability to attach

00:17:01,399 --> 00:17:09,559
message metadata to traffic as its sent

00:17:05,360 --> 00:17:11,120
across so i'm going to talk i'm going to

00:17:09,559 --> 00:17:14,030
switch gears a little bit and talk a

00:17:11,120 --> 00:17:15,740
little bit about topologies so again if

00:17:14,030 --> 00:17:17,610
you're a messaging person you understand

00:17:15,740 --> 00:17:20,189
the typical

00:17:17,610 --> 00:17:22,799
the mom topology where I've got end

00:17:20,189 --> 00:17:25,920
points in this case speaking a protocol

00:17:22,799 --> 00:17:27,750
called amqp and they are interacting

00:17:25,920 --> 00:17:29,670
through an intermediary broker and the

00:17:27,750 --> 00:17:32,610
broker is storing and forwarding

00:17:29,670 --> 00:17:34,350
messages according to you know whether

00:17:32,610 --> 00:17:35,340
its cues whether it's topics whether

00:17:34,350 --> 00:17:38,100
it's you know some sort of routing

00:17:35,340 --> 00:17:39,990
algorithm but there's the intermediary

00:17:38,100 --> 00:17:44,580
in the middle that is brokering the

00:17:39,990 --> 00:17:46,350
transfer of messages I have in amqp the

00:17:44,580 --> 00:17:48,630
option of dropping that intermediary and

00:17:46,350 --> 00:17:51,510
going straight point-to-point you could

00:17:48,630 --> 00:17:53,250
almost think of this as using amqp as a

00:17:51,510 --> 00:17:56,190
drop-in replacement for a different

00:17:53,250 --> 00:17:58,440
protocol like maybe HTTP presumably one

00:17:56,190 --> 00:18:00,090
of these endpoints would act as a server

00:17:58,440 --> 00:18:01,790
and accept incoming connections the

00:18:00,090 --> 00:18:04,500
other endpoint would act as a client and

00:18:01,790 --> 00:18:06,750
initiate outgoing connections but in

00:18:04,500 --> 00:18:09,900
both cases in this case the transfer

00:18:06,750 --> 00:18:12,299
between the endpoints is according to

00:18:09,900 --> 00:18:15,570
the rules of amqp and and gets the

00:18:12,299 --> 00:18:17,850
benefits of that protocol there is a

00:18:15,570 --> 00:18:20,480
third and very interesting topology that

00:18:17,850 --> 00:18:24,480
I want to talk more about and that is

00:18:20,480 --> 00:18:26,309
not having an intermediary broker but

00:18:24,480 --> 00:18:29,280
having an intermediary network or a

00:18:26,309 --> 00:18:31,230
messaging service again talking amqp as

00:18:29,280 --> 00:18:33,000
up as the protocol in order to reach

00:18:31,230 --> 00:18:34,230
this so as far as the endpoints are

00:18:33,000 --> 00:18:36,299
concerned they might think they're

00:18:34,230 --> 00:18:37,919
talking to a broker they might even

00:18:36,299 --> 00:18:41,450
think they're talking point to point but

00:18:37,919 --> 00:18:45,570
there's in fact a network of

00:18:41,450 --> 00:18:48,480
intermediaries in between in between and

00:18:45,570 --> 00:18:51,179
forwarding messages back and forth and I

00:18:48,480 --> 00:18:53,850
want this network to be scalable to a

00:18:51,179 --> 00:18:55,470
very large size and I want to perform

00:18:53,850 --> 00:18:58,620
well so what might be inside of that

00:18:55,470 --> 00:19:00,210
network there might be different kinds

00:18:58,620 --> 00:19:04,110
of things it's not just messaging

00:19:00,210 --> 00:19:06,540
brokers but I may have arrays of proxies

00:19:04,110 --> 00:19:10,860
for example that are fronting this this

00:19:06,540 --> 00:19:12,690
cloud I may have mesh of routers inside

00:19:10,860 --> 00:19:15,450
of it that are providing redundant paths

00:19:12,690 --> 00:19:17,280
in case you know in case I have

00:19:15,450 --> 00:19:18,540
requirements for high availability I

00:19:17,280 --> 00:19:20,250
don't want to use clustering for higher

00:19:18,540 --> 00:19:23,390
availability because really a network

00:19:20,250 --> 00:19:26,240
it's not a broker so I might do better

00:19:23,390 --> 00:19:28,620
getting availability by providing a

00:19:26,240 --> 00:19:32,250
redundant

00:19:28,620 --> 00:19:34,080
network topology or a mesh that can find

00:19:32,250 --> 00:19:37,290
alternate paths if they are needed I

00:19:34,080 --> 00:19:39,210
might have brokers in this in this cloud

00:19:37,290 --> 00:19:41,730
as well that are providing the more

00:19:39,210 --> 00:19:42,809
classic store and forward queuing you

00:19:41,730 --> 00:19:44,670
know offloading some of those

00:19:42,809 --> 00:19:46,620
applications and might be application

00:19:44,670 --> 00:19:49,860
functions there might be transformation

00:19:46,620 --> 00:19:51,420
or filtering going on over on the Left

00:19:49,860 --> 00:19:53,940
I've got a box with a question mark on

00:19:51,420 --> 00:19:55,620
it because I think that when we dig into

00:19:53,940 --> 00:19:58,400
this and as we look into this

00:19:55,620 --> 00:20:03,000
possibility of building these hub

00:19:58,400 --> 00:20:06,500
network's at bay mqp level possibilities

00:20:03,000 --> 00:20:08,160
fall out and I'm hoping that we find

00:20:06,500 --> 00:20:09,660
developers who are interested in

00:20:08,160 --> 00:20:12,120
building new types of things that will

00:20:09,660 --> 00:20:18,870
enhance these networks and provide

00:20:12,120 --> 00:20:21,500
greater capabilities to them so if I

00:20:18,870 --> 00:20:25,280
look into what an emt router might be

00:20:21,500 --> 00:20:29,309
again using using the note and the links

00:20:25,280 --> 00:20:31,050
picture I've got links to connected

00:20:29,309 --> 00:20:33,390
endpoints and I've got a routing table

00:20:31,050 --> 00:20:35,850
and I've got links to other routers so

00:20:33,390 --> 00:20:37,230
my router node will then track locally

00:20:35,850 --> 00:20:40,260
connected two endpoints find out who's

00:20:37,230 --> 00:20:45,530
connected who is interested in receiving

00:20:40,260 --> 00:20:48,030
information from what addresses and and

00:20:45,530 --> 00:20:50,220
it has links to other routers so that I

00:20:48,030 --> 00:20:52,170
can share this information and you know

00:20:50,220 --> 00:20:56,490
build as build a smart network so if I'm

00:20:52,170 --> 00:20:57,960
back in my network of routers there's

00:20:56,490 --> 00:21:00,150
actually quite a bit of technology in

00:20:57,960 --> 00:21:03,179
fact the internet has been doing this

00:21:00,150 --> 00:21:06,600
very well for many decades the internet

00:21:03,179 --> 00:21:08,160
is very good at taking a message that

00:21:06,600 --> 00:21:10,290
was dropped into it in New York City and

00:21:08,160 --> 00:21:13,530
popping it back out in its destination

00:21:10,290 --> 00:21:15,270
in Hong Kong or London and it doesn't

00:21:13,530 --> 00:21:16,920
really you know if there are failures

00:21:15,270 --> 00:21:18,600
along the way it'll it'll heal itself

00:21:16,920 --> 00:21:20,510
automatically so there's a lot of these

00:21:18,600 --> 00:21:23,760
technologies that are available I

00:21:20,510 --> 00:21:26,790
propose that we can use them too good to

00:21:23,760 --> 00:21:28,380
to a good effect in this world as well

00:21:26,790 --> 00:21:31,620
where I can build a router network that

00:21:28,380 --> 00:21:35,490
is easy to configure easy to expand upon

00:21:31,620 --> 00:21:38,400
and can automatically handle the

00:21:35,490 --> 00:21:43,220
failures of loss of link or the loss of

00:21:38,400 --> 00:21:46,500
components so that's what a router node

00:21:43,220 --> 00:21:48,330
would be participating in a proxy note

00:21:46,500 --> 00:21:52,770
on the other hand is something very

00:21:48,330 --> 00:21:55,230
simple where the the fact that amqp uses

00:21:52,770 --> 00:21:57,060
links as the way of transferring all

00:21:55,230 --> 00:21:59,730
information are all transferring all

00:21:57,060 --> 00:22:02,550
messages I can actually tie these links

00:21:59,730 --> 00:22:04,200
together in a proxy so let's say for

00:22:02,550 --> 00:22:07,230
example the left hand link is public

00:22:04,200 --> 00:22:08,430
facing it goes outside of the cloud two

00:22:07,230 --> 00:22:10,890
endpoints that wish to use this

00:22:08,430 --> 00:22:12,690
messaging service and the inward link is

00:22:10,890 --> 00:22:16,410
the low right hand link is inward facing

00:22:12,690 --> 00:22:21,090
and perhaps goes to a broker for queuing

00:22:16,410 --> 00:22:22,500
or subscribing to cute messages so I can

00:22:21,090 --> 00:22:24,960
actually do a fairly sophisticated

00:22:22,500 --> 00:22:27,090
policy enforcement at link setup time if

00:22:24,960 --> 00:22:29,340
I wish I can say you know based on your

00:22:27,090 --> 00:22:31,050
identity as you authenticated what are

00:22:29,340 --> 00:22:33,690
you allowed to subscribe to what are you

00:22:31,050 --> 00:22:35,610
allowed to send to if you are allowed to

00:22:33,690 --> 00:22:37,860
do what you're asking to do then we can

00:22:35,610 --> 00:22:39,690
connect these links together the

00:22:37,860 --> 00:22:41,970
delivery of the transfers is very simple

00:22:39,690 --> 00:22:45,810
so so you know messages flowing from one

00:22:41,970 --> 00:22:47,370
to the other is is very simple and can

00:22:45,810 --> 00:22:49,470
be done in a very performant way and

00:22:47,370 --> 00:22:50,670
code because I don't need to look at

00:22:49,470 --> 00:22:51,840
every single message and say what are

00:22:50,670 --> 00:22:54,120
they trying to do what are they trying

00:22:51,840 --> 00:22:56,660
to do they declared their intention when

00:22:54,120 --> 00:23:00,870
they set up the links in the first place

00:22:56,660 --> 00:23:04,920
renaming may occur so if I wish to have

00:23:00,870 --> 00:23:06,900
a multi-tenant type of environment where

00:23:04,920 --> 00:23:10,170
my left hand link is coming in he's

00:23:06,900 --> 00:23:13,380
identified himself as a certain identity

00:23:10,170 --> 00:23:16,520
and he is then known to have access to

00:23:13,380 --> 00:23:19,170
you know maybe a very limited number of

00:23:16,520 --> 00:23:22,820
queues or resources in this network and

00:23:19,170 --> 00:23:25,830
he may have his own namespace that is

00:23:22,820 --> 00:23:28,560
specific to him and that this proxy node

00:23:25,830 --> 00:23:30,690
can then map from the users name space

00:23:28,560 --> 00:23:33,360
to a global internal namespace in order

00:23:30,690 --> 00:23:37,950
to provide limited visibility based on

00:23:33,360 --> 00:23:39,690
your identity is so there's an

00:23:37,950 --> 00:23:42,000
interesting use case that kind of comes

00:23:39,690 --> 00:23:43,620
out of this which is the which I'll sort

00:23:42,000 --> 00:23:46,770
of focus on there's many use cases but

00:23:43,620 --> 00:23:49,080
when I'll focus on is using amqp as a

00:23:46,770 --> 00:23:53,860
way of providing

00:23:49,080 --> 00:23:55,870
public service delivery we we at Red Hat

00:23:53,860 --> 00:23:57,759
have have a number of customers that do

00:23:55,870 --> 00:24:01,539
things like this where there for example

00:23:57,759 --> 00:24:03,039
a European financial services company

00:24:01,539 --> 00:24:05,320
that has partners and customers that use

00:24:03,039 --> 00:24:09,519
that actually use amqp as their way of

00:24:05,320 --> 00:24:11,259
delivering information market

00:24:09,519 --> 00:24:13,029
information and taking control and

00:24:11,259 --> 00:24:15,519
request information over over the

00:24:13,029 --> 00:24:18,779
internet or over private networks and

00:24:15,519 --> 00:24:21,250
what's required in order to do this is

00:24:18,779 --> 00:24:24,129
hardened proxies we need to enforce

00:24:21,250 --> 00:24:25,480
access policy a messaging broker isn't

00:24:24,129 --> 00:24:27,940
necessarily the best place to do this

00:24:25,480 --> 00:24:30,279
but a proxy could be placed in between

00:24:27,940 --> 00:24:32,379
the client and the broker and it could

00:24:30,279 --> 00:24:34,240
be a very good place to enforce access

00:24:32,379 --> 00:24:36,549
policy provides multi-tenancy like I

00:24:34,240 --> 00:24:38,529
mentioned it can resist denial of

00:24:36,549 --> 00:24:41,320
service I don't really want to say

00:24:38,529 --> 00:24:42,519
denial of service attacks but because a

00:24:41,320 --> 00:24:44,320
lot of denial of service is

00:24:42,519 --> 00:24:46,330
non-malicious it's just because coming

00:24:44,320 --> 00:24:49,779
somebody screwed up the implementation

00:24:46,330 --> 00:24:54,399
of their client and it opened 10 million

00:24:49,779 --> 00:24:57,250
links to the same queue so a proxy is a

00:24:54,399 --> 00:24:59,710
very good place to focus on providing

00:24:57,250 --> 00:25:01,389
protection against such things and again

00:24:59,710 --> 00:25:03,700
your router's another type of

00:25:01,389 --> 00:25:06,850
intermediary provide redundancy they

00:25:03,700 --> 00:25:08,860
provide scaling they provide high

00:25:06,850 --> 00:25:11,590
availability and resiliency to failure

00:25:08,860 --> 00:25:14,159
and brokers as we know them and love

00:25:11,590 --> 00:25:16,000
them now provide queuing persistence and

00:25:14,159 --> 00:25:24,570
transformation lots of things that they

00:25:16,000 --> 00:25:27,129
can they can do well so am cute 'add

00:25:24,570 --> 00:25:32,019
it's a trade-off between you know

00:25:27,129 --> 00:25:35,470
complexity and man capability it's

00:25:32,019 --> 00:25:37,570
complex compared to say HTTP because you

00:25:35,470 --> 00:25:39,370
can write an HTTP server in Python

00:25:37,570 --> 00:25:41,259
probably in you know less than an hour

00:25:39,370 --> 00:25:44,019
and you get something that works because

00:25:41,259 --> 00:25:45,549
it's a simple protocol amqp he's got a

00:25:44,019 --> 00:25:46,750
lot of stuff that has to go on you've

00:25:45,549 --> 00:25:48,490
got to do the establishment of the

00:25:46,750 --> 00:25:50,590
connections the establishment of the

00:25:48,490 --> 00:25:52,320
sessions establishments of links you

00:25:50,590 --> 00:25:54,970
know what's a good way to use it so

00:25:52,320 --> 00:25:58,120
here's where projects within the apache

00:25:54,970 --> 00:26:00,340
software foundation step in so if i'm

00:25:58,120 --> 00:26:01,389
using already using messaging systems

00:26:00,340 --> 00:26:04,329
well i can look at

00:26:01,389 --> 00:26:06,489
activemq hiram over here is going to be

00:26:04,329 --> 00:26:08,379
giving a talk after me he's not talking

00:26:06,489 --> 00:26:11,019
specifically about amqp but he's talking

00:26:08,379 --> 00:26:13,059
about the future of activemq activemq is

00:26:11,019 --> 00:26:15,849
a multi-protocol java message broker

00:26:13,059 --> 00:26:18,099
it's very popular and it now includes an

00:26:15,849 --> 00:26:20,459
amqp transport as one of the protocols

00:26:18,099 --> 00:26:25,989
that it supports this is one way to

00:26:20,459 --> 00:26:28,869
utilize amqp apache cupid is a is a more

00:26:25,989 --> 00:26:30,909
amqp centric project it provides a pair

00:26:28,869 --> 00:26:35,289
of brokers a native one written in C++

00:26:30,909 --> 00:26:38,889
and a Java one the native one is quite

00:26:35,289 --> 00:26:40,209
performant and you have some has some

00:26:38,889 --> 00:26:43,359
unique capabilities in terms of

00:26:40,209 --> 00:26:46,509
performance and latency Cupid provides

00:26:43,359 --> 00:26:49,299
an array of clients for different for

00:26:46,509 --> 00:26:53,049
different platforms you know native

00:26:49,299 --> 00:26:55,269
linux native windows java JMS or jca and

00:26:53,049 --> 00:26:59,019
the.net environment on windows or

00:26:55,269 --> 00:27:01,359
elsewhere it provides clients in various

00:26:59,019 --> 00:27:03,489
languages as well including C Java

00:27:01,359 --> 00:27:05,889
Python a number of different scripting

00:27:03,489 --> 00:27:10,779
languages and you know the various

00:27:05,889 --> 00:27:12,489
dotnet programming languages so this is

00:27:10,779 --> 00:27:14,799
good if you're using messaging and you

00:27:12,489 --> 00:27:16,869
wish to utilize amqp but what if you are

00:27:14,799 --> 00:27:19,509
somebody who wants to incorporate amqp

00:27:16,869 --> 00:27:21,909
into your application or into your api

00:27:19,509 --> 00:27:23,320
or better yet what if you're somebody

00:27:21,909 --> 00:27:25,959
who wants to develop some of these

00:27:23,320 --> 00:27:28,839
intermediary capabilities to solve some

00:27:25,959 --> 00:27:30,279
some interesting problems first of all

00:27:28,839 --> 00:27:32,079
if you are in that latter category of

00:27:30,279 --> 00:27:34,269
people I would actually be very

00:27:32,079 --> 00:27:35,499
interested in talking to you because you

00:27:34,269 --> 00:27:37,839
know there's a lot of interesting things

00:27:35,499 --> 00:27:39,909
going on and I should mention also that

00:27:37,839 --> 00:27:44,200
I'll be around all week if anybody wants

00:27:39,909 --> 00:27:45,820
to discuss any of these things or see

00:27:44,200 --> 00:27:47,639
any of the things that we've talked

00:27:45,820 --> 00:27:51,099
about in more detail or in terms of

00:27:47,639 --> 00:27:54,279
demonstration so mqp in your systems

00:27:51,099 --> 00:27:57,099
well raphe talk this morning about cupid

00:27:54,279 --> 00:27:58,749
proton it's a sub-project of cupid it is

00:27:57,099 --> 00:28:02,440
intended for embedding and integration

00:27:58,749 --> 00:28:03,940
it's it's agnostic about threading

00:28:02,440 --> 00:28:06,789
models and programming models it's

00:28:03,940 --> 00:28:09,339
written in actually there's three

00:28:06,789 --> 00:28:11,799
different implementations c java and

00:28:09,339 --> 00:28:12,999
javascript is planned the thought being

00:28:11,799 --> 00:28:13,860
that with those three programming

00:28:12,999 --> 00:28:16,610
languages

00:28:13,860 --> 00:28:19,470
there's no where it can't it can't go

00:28:16,610 --> 00:28:22,850
you know C is great for embedded systems

00:28:19,470 --> 00:28:25,460
it's great for you know backing up

00:28:22,850 --> 00:28:28,530
scripting languages like Perl and Python

00:28:25,460 --> 00:28:31,410
Java is of course critical for the JVM

00:28:28,530 --> 00:28:33,420
pure JVM environments javascript is

00:28:31,410 --> 00:28:37,500
critical for being inside the broker and

00:28:33,420 --> 00:28:39,900
being inside nodejs we believe that

00:28:37,500 --> 00:28:42,240
covers the bases and then proton also

00:28:39,900 --> 00:28:44,100
provides a messenger api that has a

00:28:42,240 --> 00:28:46,049
bunch of script language wrappers as

00:28:44,100 --> 00:28:48,330
well and raphe spoke about that this

00:28:46,049 --> 00:28:50,580
morning there's a second project that

00:28:48,330 --> 00:28:54,090
I'll mention this one's much younger

00:28:50,580 --> 00:28:55,559
it's called cupid dispatch and it is an

00:28:54,090 --> 00:28:57,240
event-driven multi-threaded container

00:28:55,559 --> 00:28:58,440
for proton it's a little bit got it's

00:28:57,240 --> 00:29:02,000
got a different focus and i'll speak

00:28:58,440 --> 00:29:05,160
about that in a moment so keep it proton

00:29:02,000 --> 00:29:08,160
as ropey said before it's it's got two

00:29:05,160 --> 00:29:11,760
components primarily a protocol engine

00:29:08,160 --> 00:29:15,090
pure state machine non-blocking api no

00:29:11,760 --> 00:29:18,299
threads no locks no mutual exclusion no

00:29:15,090 --> 00:29:20,130
no none of those issues it's very simple

00:29:18,299 --> 00:29:22,169
to use and can be portable to a lot of

00:29:20,130 --> 00:29:24,570
different environments and a separate

00:29:22,169 --> 00:29:26,820
driver which provides the i/o and

00:29:24,570 --> 00:29:29,640
defines the threading model so if your

00:29:26,820 --> 00:29:32,250
i/o is based on you know green threads

00:29:29,640 --> 00:29:36,690
or if it's based on pole or select or if

00:29:32,250 --> 00:29:38,790
it's based on you know live event I you

00:29:36,690 --> 00:29:40,440
can per hour could be provided for any

00:29:38,790 --> 00:29:43,530
one of those environments that provides

00:29:40,440 --> 00:29:45,950
you know thread control and it is

00:29:43,530 --> 00:29:48,090
separate so that it can be replaced and

00:29:45,950 --> 00:29:50,640
in for the purpose of going into

00:29:48,090 --> 00:29:54,570
different environments and again the

00:29:50,640 --> 00:29:56,640
messenger API that is built on top of

00:29:54,570 --> 00:29:58,770
the engine and driver isn't easy to use

00:29:56,640 --> 00:30:01,320
messaging API for developers it hides

00:29:58,770 --> 00:30:05,730
many of the of the sort of details

00:30:01,320 --> 00:30:08,760
underneath a furry of amqp so you know a

00:30:05,730 --> 00:30:10,830
hello world written against messenger it

00:30:08,760 --> 00:30:14,700
can be done in just a couple of lines of

00:30:10,830 --> 00:30:16,470
code and furthermore you know real

00:30:14,700 --> 00:30:19,710
programs can be written on top of

00:30:16,470 --> 00:30:23,159
messenger it's a useful interface

00:30:19,710 --> 00:30:24,720
so this is a way to integrate so if I if

00:30:23,159 --> 00:30:27,090
you've got an application or if you've

00:30:24,720 --> 00:30:28,830
got your own messaging API perhaps you

00:30:27,090 --> 00:30:33,240
have a bridge that goes that's going

00:30:28,830 --> 00:30:35,220
from amqp to a different protocol you

00:30:33,240 --> 00:30:38,340
have the option of integrating this over

00:30:35,220 --> 00:30:41,549
the messenger API William in the back

00:30:38,340 --> 00:30:43,710
corner did this with the with the open

00:30:41,549 --> 00:30:47,700
mama api for from New York Stock

00:30:43,710 --> 00:30:52,799
Exchange as an example okay well

00:30:47,700 --> 00:30:55,890
sometimes you need more control ok this

00:30:52,799 --> 00:30:57,870
is this is what we refer sometimes to as

00:30:55,890 --> 00:31:00,330
the red pill so I can build my

00:30:57,870 --> 00:31:02,309
application right over the engine and

00:31:00,330 --> 00:31:03,750
driver interface this is the red pill

00:31:02,309 --> 00:31:06,210
because if you really want to know is

00:31:03,750 --> 00:31:08,100
you take this pill because you need to

00:31:06,210 --> 00:31:10,320
know how it really works and this this

00:31:08,100 --> 00:31:12,120
exposes you to you know to the

00:31:10,320 --> 00:31:14,580
underbelly and to all the bells and

00:31:12,120 --> 00:31:16,169
whistles and all the capabilities when

00:31:14,580 --> 00:31:18,570
you need control over every aspect of

00:31:16,169 --> 00:31:21,240
amqp this is this is an option that you

00:31:18,570 --> 00:31:23,220
have it is significantly more complex in

00:31:21,240 --> 00:31:26,880
fact writing the hello world in this

00:31:23,220 --> 00:31:28,710
environment is considerably larger than

00:31:26,880 --> 00:31:33,779
the certs a couple of lines of code that

00:31:28,710 --> 00:31:36,090
raphe showed you before so this is where

00:31:33,779 --> 00:31:37,529
the cupid dispatch project comes in this

00:31:36,090 --> 00:31:41,490
is a brand new project something I've

00:31:37,529 --> 00:31:44,340
been working on myself and its goal its

00:31:41,490 --> 00:31:46,320
goals are to aid in integration for

00:31:44,340 --> 00:31:48,899
those cases because one percenters out

00:31:46,320 --> 00:31:53,010
there who need to use the engine

00:31:48,899 --> 00:31:56,399
directly would look at this as a

00:31:53,010 --> 00:31:57,990
possible way to integrate it provides a

00:31:56,399 --> 00:31:59,520
framework for development of amqp

00:31:57,990 --> 00:32:02,100
infrastructure it's aimed at

00:31:59,520 --> 00:32:05,760
infrastructure in fact the project was

00:32:02,100 --> 00:32:07,679
not created for the perfect I was

00:32:05,760 --> 00:32:09,899
working on what I'm trying to do is

00:32:07,679 --> 00:32:13,370
solve problems related to intermediaries

00:32:09,899 --> 00:32:15,240
I need a router and I need a proxy

00:32:13,370 --> 00:32:17,220
because I'm trying to solve some

00:32:15,240 --> 00:32:20,190
real-world problems in the distributed

00:32:17,220 --> 00:32:21,450
computing world and it turns out that in

00:32:20,190 --> 00:32:24,270
order to do this it's quite a bit of

00:32:21,450 --> 00:32:26,669
common work that fell out and and it

00:32:24,270 --> 00:32:28,830
turned into a project of its own which

00:32:26,669 --> 00:32:30,179
is which is now a sub-project within

00:32:28,830 --> 00:32:31,850
cubed it's called dispatch and it

00:32:30,179 --> 00:32:34,049
provides a bunch of hooks and

00:32:31,850 --> 00:32:37,350
capabilities and ap is that make it

00:32:34,049 --> 00:32:38,880
easier to use this interface the other

00:32:37,350 --> 00:32:40,889
goal i want to mention this is very

00:32:38,880 --> 00:32:43,110
important is that that i want to be able

00:32:40,889 --> 00:32:46,380
to build simple and QP intermediaries

00:32:43,110 --> 00:32:48,330
that that can fully utilize the

00:32:46,380 --> 00:32:51,750
investments that people have made a

00:32:48,330 --> 00:32:53,970
networking infrastructure so if i've got

00:32:51,750 --> 00:32:56,549
a customer or prospect that has invested

00:32:53,970 --> 00:32:58,110
in 10 gigabit ethernet or InfiniBand or

00:32:56,549 --> 00:33:00,059
some sort of very very high performance

00:32:58,110 --> 00:33:01,740
networking infrastructure you know i

00:33:00,059 --> 00:33:03,929
want to be able to utilize it i want to

00:33:01,740 --> 00:33:07,830
be able to send amqp messages over that

00:33:03,929 --> 00:33:09,840
I'd line rate so so it performance is a

00:33:07,830 --> 00:33:12,570
major emphasis I believe that we can

00:33:09,840 --> 00:33:14,429
build a network or of intermediaries

00:33:12,570 --> 00:33:16,980
that cloud I showed you that n QP cloud

00:33:14,429 --> 00:33:19,260
they can perform at line rate on modern

00:33:16,980 --> 00:33:20,700
networks then there are a lot of very

00:33:19,260 --> 00:33:23,730
very interesting things that it can do

00:33:20,700 --> 00:33:25,440
and very very interesting ways that it

00:33:23,730 --> 00:33:28,860
can change the way that distributed

00:33:25,440 --> 00:33:30,830
applications are developed it is

00:33:28,860 --> 00:33:35,100
multi-threaded and it's an event-driven

00:33:30,830 --> 00:33:37,710
container environment so it works it

00:33:35,100 --> 00:33:39,000
allows you to use proton engine in a

00:33:37,710 --> 00:33:41,779
multi-threaded environment and it's

00:33:39,000 --> 00:33:44,639
primarily a synchronous and event-driven

00:33:41,779 --> 00:33:46,470
okay here's here's its basic

00:33:44,639 --> 00:33:51,169
architecture so the bottom two boxes are

00:33:46,470 --> 00:33:54,029
familiar because that's stock proton and

00:33:51,169 --> 00:33:57,059
there are a number of boxes layered on

00:33:54,029 --> 00:33:59,010
top of it in a tiered fashion so and

00:33:57,059 --> 00:34:01,139
each one of these boxes provides an API

00:33:59,010 --> 00:34:03,210
for a different purpose there's the

00:34:01,139 --> 00:34:07,649
server there's container as a router and

00:34:03,210 --> 00:34:10,500
this message so the server API is all

00:34:07,649 --> 00:34:11,940
about managing connections one of the

00:34:10,500 --> 00:34:13,470
things that you need to do when you

00:34:11,940 --> 00:34:15,450
build a network of components is you

00:34:13,470 --> 00:34:17,190
need to be able to interconnect them so

00:34:15,450 --> 00:34:20,250
they need to be able to accept inbound

00:34:17,190 --> 00:34:22,099
connections listeners but they also need

00:34:20,250 --> 00:34:25,589
to be able to make outbound connections

00:34:22,099 --> 00:34:27,750
connectors to other other entities or

00:34:25,589 --> 00:34:29,940
other intermediaries and the reason i

00:34:27,750 --> 00:34:32,129
call them resilient because if they

00:34:29,940 --> 00:34:33,839
can't be made if that destination is not

00:34:32,129 --> 00:34:36,339
reachable i want that connection to

00:34:33,839 --> 00:34:40,089
retry periodically and if i can

00:34:36,339 --> 00:34:42,279
is lost I want to be reconnected the

00:34:40,089 --> 00:34:44,559
server layer provides resilient

00:34:42,279 --> 00:34:46,239
connector capability and it provides a

00:34:44,559 --> 00:34:49,179
couple other nice hooks like you know

00:34:46,239 --> 00:34:51,219
timers that you can use for doing

00:34:49,179 --> 00:34:52,509
periodic maintenance or whatever is that

00:34:51,219 --> 00:34:55,089
you need to do it provides thread

00:34:52,509 --> 00:34:57,489
control so I can qui ask my server

00:34:55,089 --> 00:35:00,269
threads or resume them that's that's

00:34:57,489 --> 00:35:02,920
useful if I want to do reconfiguration

00:35:00,269 --> 00:35:04,779
it provides management of file

00:35:02,920 --> 00:35:07,719
descriptors that are not related to n QP

00:35:04,779 --> 00:35:10,989
so if I'm building a bridge between amqp

00:35:07,719 --> 00:35:12,789
and another protocol I might wish to

00:35:10,989 --> 00:35:14,140
take the file descriptors that represent

00:35:12,789 --> 00:35:16,630
that of the protocols connections and

00:35:14,140 --> 00:35:20,410
manage them all together it allows me to

00:35:16,630 --> 00:35:22,749
do that it provides an API for handling

00:35:20,410 --> 00:35:28,089
of operating system signals things like

00:35:22,749 --> 00:35:31,989
that up a level the container API is all

00:35:28,089 --> 00:35:34,719
about creating amqp nodes so it it

00:35:31,989 --> 00:35:37,509
manages the node lifecycle and it allows

00:35:34,719 --> 00:35:39,670
me to write code that deals with links

00:35:37,509 --> 00:35:41,829
so a link attached detach you know what

00:35:39,670 --> 00:35:46,410
do I do when a new link comes in what do

00:35:41,829 --> 00:35:49,630
i do what a link goes away delivery of

00:35:46,410 --> 00:35:51,579
messages inbound and outbound it deals

00:35:49,630 --> 00:35:53,589
with the changes in disposition and

00:35:51,579 --> 00:35:57,160
settlements so when I send a message to

00:35:53,589 --> 00:35:59,079
to appear that mess that that peer has

00:35:57,160 --> 00:36:01,690
the option of settling the message or

00:35:59,079 --> 00:36:03,729
acknowledging and rejecting it those

00:36:01,690 --> 00:36:05,680
hooks are provided here this is also

00:36:03,729 --> 00:36:10,239
where you participate in a.m capiz flow

00:36:05,680 --> 00:36:11,739
control at the link level I'm going to

00:36:10,239 --> 00:36:13,049
step up another another layer actually

00:36:11,739 --> 00:36:17,739
I'm talking to talk about the message

00:36:13,049 --> 00:36:19,930
the message module the message API this

00:36:17,739 --> 00:36:22,809
is a way of dealing with the contents of

00:36:19,930 --> 00:36:24,849
a delivery the amqp specification is

00:36:22,809 --> 00:36:27,039
nicely layered it's actually will

00:36:24,849 --> 00:36:30,089
architect at chapter two is all about

00:36:27,039 --> 00:36:32,469
the way deliver data is delivered a

00:36:30,089 --> 00:36:34,269
chapter three is all about what data

00:36:32,469 --> 00:36:36,969
format itself looks like and what the

00:36:34,269 --> 00:36:40,289
message structure is so container is a

00:36:36,969 --> 00:36:42,519
chapter two container chapter two and

00:36:40,289 --> 00:36:44,140
message is all about chapter three it

00:36:42,519 --> 00:36:47,829
deals with the contents of messages of

00:36:44,140 --> 00:36:49,540
the message deliveries themselves it's

00:36:47,829 --> 00:36:51,370
optimized for

00:36:49,540 --> 00:36:55,150
high performance intermediaries it has

00:36:51,370 --> 00:36:57,220
it uses fixed buffer fixed size buffers

00:36:55,150 --> 00:37:01,270
and chains of buffers in order to eat

00:36:57,220 --> 00:37:02,500
ease in memory management to reduce the

00:37:01,270 --> 00:37:04,870
fragmentation of memory when you're

00:37:02,500 --> 00:37:07,420
dealing with lots of transfers going

00:37:04,870 --> 00:37:10,240
back and forth it provides access to

00:37:07,420 --> 00:37:11,950
fields within the message where you

00:37:10,240 --> 00:37:13,480
don't have to worry about where buffer

00:37:11,950 --> 00:37:16,960
boundaries are in fact I've got a test

00:37:13,480 --> 00:37:21,670
in in the system where I have buffers of

00:37:16,960 --> 00:37:23,260
one bite so it's not optimal but if you

00:37:21,670 --> 00:37:26,500
can pass that test then you're doing

00:37:23,260 --> 00:37:28,570
buffer management correctly it also

00:37:26,500 --> 00:37:30,760
parses message contents only as far as

00:37:28,570 --> 00:37:32,740
needed so back in the in that example I

00:37:30,760 --> 00:37:35,080
showed of the proxy where I'm just

00:37:32,740 --> 00:37:37,450
taking two links and transferring

00:37:35,080 --> 00:37:39,940
messages from one to the other if I only

00:37:37,450 --> 00:37:41,200
care about the link addresses then I

00:37:39,940 --> 00:37:42,940
don't really need to look very deeply

00:37:41,200 --> 00:37:45,520
into the messages at all and this gives

00:37:42,940 --> 00:37:47,050
me the option of transferring messages

00:37:45,520 --> 00:37:49,720
from one link to the other without

00:37:47,050 --> 00:37:51,820
wasting the bandwidth or the process you

00:37:49,720 --> 00:37:54,840
know the processing to to parse that

00:37:51,820 --> 00:37:59,560
message I can treat it as pretty much a

00:37:54,840 --> 00:38:01,690
black box of content it efficiently

00:37:59,560 --> 00:38:03,730
handles modified annotations and Kewpie

00:38:01,690 --> 00:38:05,200
allows intermediaries to annotate

00:38:03,730 --> 00:38:07,690
messages as they go through for example

00:38:05,200 --> 00:38:09,310
for the purpose of trace if I want to

00:38:07,690 --> 00:38:11,980
trace the path of a message through

00:38:09,310 --> 00:38:13,450
network then every every hop along that

00:38:11,980 --> 00:38:14,890
network is going to put a little tag on

00:38:13,450 --> 00:38:16,690
that message in order to say that it

00:38:14,890 --> 00:38:19,900
visited here that needs to be

00:38:16,690 --> 00:38:22,660
efficiently handled the last component

00:38:19,900 --> 00:38:23,950
that is in here is the router component

00:38:22,660 --> 00:38:25,330
and this is exactly the same thing I

00:38:23,950 --> 00:38:27,070
presented before when i showed the note

00:38:25,330 --> 00:38:29,980
and linked diagram of the router it

00:38:27,070 --> 00:38:32,230
drinks it attracts consumers by address

00:38:29,980 --> 00:38:33,760
so that messages can be routed to it it

00:38:32,230 --> 00:38:35,860
has a routing table it forwards messages

00:38:33,760 --> 00:38:39,370
you know from inbound to the appropriate

00:38:35,860 --> 00:38:41,530
outbound links it supports internal and

00:38:39,370 --> 00:38:43,150
external endpoints internal meaning that

00:38:41,530 --> 00:38:46,000
i can actually sink messages and source

00:38:43,150 --> 00:38:49,270
messages internally that's useful for

00:38:46,000 --> 00:38:52,540
things like management agents generating

00:38:49,270 --> 00:38:54,580
events etc and it has the protocol

00:38:52,540 --> 00:38:57,600
support to interact with other routers

00:38:54,580 --> 00:38:57,600
in a network

00:38:58,420 --> 00:39:06,620
future work support for configuration

00:39:03,700 --> 00:39:08,740
the very next thing I want to work on is

00:39:06,620 --> 00:39:11,720
the agent for remote management this is

00:39:08,740 --> 00:39:13,130
getting back to theos talk this morning

00:39:11,720 --> 00:39:15,620
where he said that he was a strong

00:39:13,130 --> 00:39:17,210
believer in instrumentation I'm also a

00:39:15,620 --> 00:39:19,670
strong believer instrumentation being

00:39:17,210 --> 00:39:22,160
able to remotely access my container and

00:39:19,670 --> 00:39:25,160
see what's inside of it and and perhaps

00:39:22,160 --> 00:39:29,720
control what it's doing proxy note is

00:39:25,160 --> 00:39:31,490
future work as well so keep a dispatch

00:39:29,720 --> 00:39:34,130
is a project it's a sub-project of

00:39:31,490 --> 00:39:37,430
Apache Cupid it right now lives in a

00:39:34,130 --> 00:39:39,200
directory called extras if you're going

00:39:37,430 --> 00:39:40,490
to the subs or subversion the reason I'm

00:39:39,200 --> 00:39:42,800
telling you about a subversion is

00:39:40,490 --> 00:39:43,790
because it has not yet been released so

00:39:42,800 --> 00:39:45,590
if you want to look at it that's where

00:39:43,790 --> 00:39:49,250
you would find it it's installed

00:39:45,590 --> 00:39:51,650
artifacts include development support a

00:39:49,250 --> 00:39:56,150
set of header files for the AP is and a

00:39:51,650 --> 00:39:57,860
shared object library for you know for

00:39:56,150 --> 00:40:00,320
building applications on top of it and

00:39:57,860 --> 00:40:03,020
it also comes with a router executable

00:40:00,320 --> 00:40:06,710
which is just a raw message router that

00:40:03,020 --> 00:40:09,830
you can use as well the website content

00:40:06,710 --> 00:40:11,720
will appear coincident with the release

00:40:09,830 --> 00:40:16,240
of Cupid 022 which is scheduled for the

00:40:11,720 --> 00:40:19,430
end of next month so just to summarize

00:40:16,240 --> 00:40:22,160
the projects that are involved in amqp

00:40:19,430 --> 00:40:24,890
at apache and what their status is so

00:40:22,160 --> 00:40:28,280
patchy activemq is at version 5.8 it's

00:40:24,890 --> 00:40:31,580
very mature apache cupid is at version 0

00:40:28,280 --> 00:40:35,150
20 and despite its it's revvin umber is

00:40:31,580 --> 00:40:38,330
also very mature both activemq and Cupid

00:40:35,150 --> 00:40:40,010
cupid are deployed in in

00:40:38,330 --> 00:40:43,460
mission-critical systems across the

00:40:40,010 --> 00:40:46,340
world keep it proton released 0.4

00:40:43,460 --> 00:40:49,160
yesterday it is an emerging project it's

00:40:46,340 --> 00:40:51,380
it's getting increasing community of

00:40:49,160 --> 00:40:54,980
users and developers and it's gaining

00:40:51,380 --> 00:40:57,170
momentum in the Apache community keep a

00:40:54,980 --> 00:40:58,760
dispatch is unreleased and it's brand

00:40:57,170 --> 00:41:04,430
new and I'm talking about it for the

00:40:58,760 --> 00:41:07,550
first time here so I had a slide at the

00:41:04,430 --> 00:41:08,900
very beginning that was what I hoped you

00:41:07,550 --> 00:41:11,000
would take away from discussion here I

00:41:08,900 --> 00:41:11,900
repeated the slide you can see how well

00:41:11,000 --> 00:41:14,340
I did

00:41:11,900 --> 00:41:17,280
you know amqp I believe goes beyond

00:41:14,340 --> 00:41:20,520
messaging I see a and Q P as being

00:41:17,280 --> 00:41:22,410
perhaps a good way to take the worlds of

00:41:20,520 --> 00:41:25,530
networking in the worlds of messaging

00:41:22,410 --> 00:41:28,650
and and combine some of their some of

00:41:25,530 --> 00:41:31,190
their advantages internet networking is

00:41:28,650 --> 00:41:32,850
very very good at building huge huge

00:41:31,190 --> 00:41:35,430
distributed systems that are very

00:41:32,850 --> 00:41:38,400
reliable messaging is very very good at

00:41:35,430 --> 00:41:40,140
making it very making it easy to develop

00:41:38,400 --> 00:41:42,330
applications quickly that are

00:41:40,140 --> 00:41:45,240
distributed a combination of the two

00:41:42,330 --> 00:41:48,600
would be very compelling amqp is complex

00:41:45,240 --> 00:41:52,530
yet capable and appropriate for certain

00:41:48,600 --> 00:41:54,240
for certain use cases Apache projects

00:41:52,530 --> 00:41:58,710
make it accessible in various different

00:41:54,240 --> 00:42:03,960
ways questions and discussion anything

00:41:58,710 --> 00:42:06,350
any questions anybody has the gentleman

00:42:03,960 --> 00:42:06,350
in the back

00:42:17,809 --> 00:42:24,319
so the question is in these projects who

00:42:20,839 --> 00:42:29,479
would use these different projects so

00:42:24,319 --> 00:42:31,579
activemq is is a native java messaging

00:42:29,479 --> 00:42:33,229
broker it's very appropriate for Java

00:42:31,579 --> 00:42:36,439
environments but it's also appropriate a

00:42:33,229 --> 00:42:38,059
standalone broker hiram will correct me

00:42:36,439 --> 00:42:44,680
if I'm wrong he's speaking about it next

00:42:38,059 --> 00:42:47,930
hour i would say activemq is is a very

00:42:44,680 --> 00:42:50,809
it's very mature messaging broker that's

00:42:47,930 --> 00:42:52,670
got a lot of capabilities that are that

00:42:50,809 --> 00:42:54,829
are very commonly used into traditional

00:42:52,670 --> 00:42:59,449
mom environments i would say apache

00:42:54,829 --> 00:43:02,150
cupid is less less typical in terms of

00:42:59,449 --> 00:43:04,279
what its capabilities are for middleware

00:43:02,150 --> 00:43:06,709
oriented messaging but apache cupid is

00:43:04,279 --> 00:43:08,809
is used in very frequently in cases

00:43:06,709 --> 00:43:10,880
where performance is an issue it can be

00:43:08,809 --> 00:43:14,559
it can be tuned to go very very fast in

00:43:10,880 --> 00:43:18,439
certain use cases keep it proton is

00:43:14,559 --> 00:43:20,569
again you know for for people who want

00:43:18,439 --> 00:43:22,549
to I think there's two audiences here

00:43:20,569 --> 00:43:26,359
there's the messenger audience that

00:43:22,549 --> 00:43:28,309
wants to be able to use amqp 1.0 and its

00:43:26,359 --> 00:43:29,989
raw form perhaps even in point-to-point

00:43:28,309 --> 00:43:33,469
environments but it's also for people

00:43:29,989 --> 00:43:34,459
who want to encode integrate amqp into

00:43:33,469 --> 00:43:36,799
their own environments their own

00:43:34,459 --> 00:43:39,259
applications dispatch is the extreme

00:43:36,799 --> 00:43:40,939
case of that ladder so for people who

00:43:39,259 --> 00:43:44,179
want to build infrastructure I think

00:43:40,939 --> 00:43:46,420
around amqp itself it was questioned up

00:43:44,179 --> 00:43:46,420
front

00:43:46,970 --> 00:43:54,940
these possibly find engine decision to

00:43:50,150 --> 00:43:57,920
be lovely except for the use cases

00:43:54,940 --> 00:44:04,540
possibly use this I'm sorry talking

00:43:57,920 --> 00:44:06,410
about other than financial oh well

00:44:04,540 --> 00:44:08,620
there's quite a quite a few different

00:44:06,410 --> 00:44:11,960
systems I mean there's the

00:44:08,620 --> 00:44:14,960
transportation and logistics is using

00:44:11,960 --> 00:44:18,620
this to good effect they've built very

00:44:14,960 --> 00:44:20,360
large networks based on amqp in order to

00:44:18,620 --> 00:44:22,370
in fact even in order to deal with

00:44:20,360 --> 00:44:23,660
mobility you know I say mobility i'm not

00:44:22,370 --> 00:44:26,360
talking about handheld devices i'm

00:44:23,660 --> 00:44:29,330
talking about la you know devices that

00:44:26,360 --> 00:44:30,950
move and attach into the network for a

00:44:29,330 --> 00:44:32,870
different you know they roam in network

00:44:30,950 --> 00:44:35,510
they may be you know associated with

00:44:32,870 --> 00:44:41,720
aircraft or railroads for example or

00:44:35,510 --> 00:44:45,440
your trains the there are a number of

00:44:41,720 --> 00:44:49,340
different verticals that that are

00:44:45,440 --> 00:44:51,740
interested even even companies that are

00:44:49,340 --> 00:44:54,590
just a lot a lot of customers that I

00:44:51,740 --> 00:44:56,540
deal with are with large enterprises in

00:44:54,590 --> 00:44:57,890
various verticals but they're the part

00:44:56,540 --> 00:44:59,750
they're the team within the company

00:44:57,890 --> 00:45:02,030
that's responsible for providing

00:44:59,750 --> 00:45:04,160
messaging services to developers within

00:45:02,030 --> 00:45:04,850
the company so in a lot of cases you

00:45:04,160 --> 00:45:06,980
know we're trying to build out

00:45:04,850 --> 00:45:10,790
large-scale environments but a point of

00:45:06,980 --> 00:45:15,830
sale for for retail whether it be

00:45:10,790 --> 00:45:17,760
financial those device in the foot and

00:45:15,830 --> 00:45:21,510
frames were wrong info

00:45:17,760 --> 00:45:23,970
I the proper router or apply them

00:45:21,510 --> 00:45:26,220
occasionally dog you put the pressure on

00:45:23,970 --> 00:45:27,960
this right no not at all in fact that

00:45:26,220 --> 00:45:29,700
the proton messenger footprint is

00:45:27,960 --> 00:45:34,050
Griffey you know the pro point is it's

00:45:29,700 --> 00:45:36,830
very small yeah it's very small tits

00:45:34,050 --> 00:45:42,780
native it has almost no dependencies

00:45:36,830 --> 00:45:45,150
less than megabytes yeah yeah I would

00:45:42,780 --> 00:45:46,770
say tens of kilobytes if you if you want

00:45:45,150 --> 00:45:51,990
really to make it small and of course if

00:45:46,770 --> 00:45:53,880
it's storing messages that it doesn't

00:45:51,990 --> 00:45:56,040
have to be linux it runs on it should

00:45:53,880 --> 00:45:57,690
run in any environment the update the

00:45:56,040 --> 00:46:00,000
implementation of proton is pure see

00:45:57,690 --> 00:46:03,090
with very few dependencies so it's meant

00:46:00,000 --> 00:46:06,240
to be portable to to lots of places and

00:46:03,090 --> 00:46:12,750
handheld devices is Cleo very of great

00:46:06,240 --> 00:46:14,220
interest to us yes yes a handheld might

00:46:12,750 --> 00:46:15,980
you know might be Java might be see

00:46:14,220 --> 00:46:20,940
depending on what the operating system

00:46:15,980 --> 00:46:23,910
mm-hmm yes exactly s nothing scanners

00:46:20,940 --> 00:46:24,960
those you know not in America but in

00:46:23,910 --> 00:46:28,170
other countries where they you know

00:46:24,960 --> 00:46:29,970
where they have the the the credit card

00:46:28,170 --> 00:46:32,460
scanners that are affordable that kind

00:46:29,970 --> 00:46:35,990
of environment is very interesting yep

00:46:32,460 --> 00:46:35,990
yep question from the back

00:46:50,850 --> 00:46:58,300
when a link is established the

00:46:54,210 --> 00:46:59,860
downstream no to that link has to issue

00:46:58,300 --> 00:47:02,920
credit to the upstream before any

00:46:59,860 --> 00:47:05,470
messages can be transferred and there's

00:47:02,920 --> 00:47:07,360
actually there's actually a an exchange

00:47:05,470 --> 00:47:16,150
that occurs that says I I now grant you

00:47:07,360 --> 00:47:18,910
in end credits yes yes yes it can do to

00:47:16,150 --> 00:47:20,620
replace them the idea of credit

00:47:18,910 --> 00:47:23,080
assignment is that you you want you want

00:47:20,620 --> 00:47:24,460
to assign if your bandwidth sensitive

00:47:23,080 --> 00:47:27,250
you want to make sure you have enough

00:47:24,460 --> 00:47:29,020
credits to avoid pi pipeline stalling so

00:47:27,250 --> 00:47:30,910
that you're always sending as fast as

00:47:29,020 --> 00:47:32,530
you can and credit replenishments are

00:47:30,910 --> 00:47:34,240
coming back so if you have a high

00:47:32,530 --> 00:47:37,120
latency link you need more credits and

00:47:34,240 --> 00:47:39,670
if you have a war if you have a memory

00:47:37,120 --> 00:47:41,020
sensitive on a receiver with lots of

00:47:39,670 --> 00:47:44,250
links you might have fewer credits but

00:47:41,020 --> 00:47:44,250
you're going to have pipeline stalling

00:47:49,860 --> 00:47:58,030
so a yes sir that has messages sitting

00:47:54,430 --> 00:48:00,310
there we actually send information to

00:47:58,030 --> 00:48:03,030
the receiver's name hey I has been much

00:48:00,310 --> 00:48:03,030
different messages

00:48:03,059 --> 00:48:07,299
right it's called an offer it's the

00:48:05,380 --> 00:48:08,710
opposite of credit and it's a so if you

00:48:07,299 --> 00:48:09,789
have many connections coming in and

00:48:08,710 --> 00:48:11,980
you're not sure who to give credit to

00:48:09,789 --> 00:48:14,349
the offer protocol can say you know I

00:48:11,980 --> 00:48:17,619
can I'll give credit where there are

00:48:14,349 --> 00:48:27,670
messages available to be sent yep yeah

00:48:17,619 --> 00:48:33,089
it's very cool yeah so the question is

00:48:27,670 --> 00:48:35,589
comparison between amqp and MQTT there I

00:48:33,089 --> 00:48:39,819
do have information about that and speak

00:48:35,589 --> 00:48:42,430
to me afterwards I think do you okay

00:48:39,819 --> 00:48:44,200
yeah he actually implements both and

00:48:42,430 --> 00:48:46,809
there was actually a very good in

00:48:44,200 --> 00:48:48,609
comparison paper written I'm just not

00:48:46,809 --> 00:48:51,270
sure if it's public so if it is all

00:48:48,609 --> 00:48:51,270
pointing to it

00:48:56,450 --> 00:48:59,230
anything else

00:49:05,010 --> 00:49:09,050

YouTube URL: https://www.youtube.com/watch?v=ligCnhPjKNo


