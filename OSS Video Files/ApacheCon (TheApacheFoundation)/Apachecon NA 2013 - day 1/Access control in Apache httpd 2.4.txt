Title: Access control in Apache httpd 2.4
Publication date: 2013-10-17
Playlist: Apachecon NA 2013 - day 1
Description: 
	Rich Bowen
ApacheCon NA 2013
Track : A Patchy Web
Captions: 
	00:00:00,000 --> 00:00:08,010
well I will be speaking about the new

00:00:04,620 --> 00:00:11,280
access control syntax in apache httpd

00:00:08,010 --> 00:00:16,440
2.4 and i'll try very hard not to get

00:00:11,280 --> 00:00:19,410
distracted by by the noise it is both

00:00:16,440 --> 00:00:22,080
helpful and a little bit intimidating

00:00:19,410 --> 00:00:23,910
that several of the people that are

00:00:22,080 --> 00:00:25,170
responsible for this code or sitting in

00:00:23,910 --> 00:00:27,960
the audience so they can they can

00:00:25,170 --> 00:00:30,420
correct me when I make errors and laugh

00:00:27,960 --> 00:00:33,210
at me as well so that's all part of the

00:00:30,420 --> 00:00:35,610
fun I'm going to be talking about

00:00:33,210 --> 00:00:37,800
several general categories of things in

00:00:35,610 --> 00:00:41,670
this talk I'm going to talk a little bit

00:00:37,800 --> 00:00:46,829
about the past and then I'm going to

00:00:41,670 --> 00:00:51,750
jump into the new syntax in 2.44 access

00:00:46,829 --> 00:00:53,969
control the ldap portion ended up being

00:00:51,750 --> 00:00:56,430
a substantial part of the content so I'm

00:00:53,969 --> 00:00:58,199
calling that out separately and then I'm

00:00:56,430 --> 00:01:01,260
also going to be talking about mod

00:00:58,199 --> 00:01:04,589
sessions and the new cookie auth stuff

00:01:01,260 --> 00:01:07,409
that's in 2.4 so these are the major

00:01:04,589 --> 00:01:09,000
categories and if that's not what you're

00:01:07,409 --> 00:01:13,350
interested in there are other great

00:01:09,000 --> 00:01:15,720
talks going on right now I want to make

00:01:13,350 --> 00:01:17,549
explicit up front just I'm sure you all

00:01:15,720 --> 00:01:21,619
know this but authentication and

00:01:17,549 --> 00:01:24,630
authorization are two separate things in

00:01:21,619 --> 00:01:27,869
you know both in concept but also in

00:01:24,630 --> 00:01:31,650
implementation in the web server the the

00:01:27,869 --> 00:01:34,020
authentication phase is run and then

00:01:31,650 --> 00:01:35,790
after that's done the authorization

00:01:34,020 --> 00:01:38,659
phase is done and they may or may not

00:01:35,790 --> 00:01:41,100
have anything to do with one another

00:01:38,659 --> 00:01:45,030
authentication asks the question who are

00:01:41,100 --> 00:01:46,680
you and the answer to that can be

00:01:45,030 --> 00:01:49,680
achieved a number of different ways

00:01:46,680 --> 00:01:51,509
usually in the web server world who are

00:01:49,680 --> 00:01:55,170
you is answered by a username and

00:01:51,509 --> 00:02:01,439
password but it may also be answered by

00:01:55,170 --> 00:02:04,079
an RSA token or a driver's license or a

00:02:01,439 --> 00:02:06,210
passport the are you allowed to be here

00:02:04,079 --> 00:02:09,810
question may or may not have anything to

00:02:06,210 --> 00:02:12,379
do with the authentication question are

00:02:09,810 --> 00:02:15,360
you allowed to be here

00:02:12,379 --> 00:02:19,260
may have to do with the time of day or

00:02:15,360 --> 00:02:22,200
your IP address and then there's this

00:02:19,260 --> 00:02:24,569
general concept of access control which

00:02:22,200 --> 00:02:27,569
may or may not have anything to do with

00:02:24,569 --> 00:02:30,090
either thing there may be access control

00:02:27,569 --> 00:02:32,580
measures that have nothing to do with

00:02:30,090 --> 00:02:34,019
the individual user they may have to do

00:02:32,580 --> 00:02:38,810
with the fact that the building is on

00:02:34,019 --> 00:02:38,810
fire and so we want to keep you out so

00:02:40,940 --> 00:02:48,989
what were we trying to fix in 2.2 and

00:02:44,849 --> 00:02:53,280
earlier the access control syntax was

00:02:48,989 --> 00:02:54,989
confusing and it was limited people

00:02:53,280 --> 00:02:56,670
would frequently have trouble

00:02:54,989 --> 00:02:58,590
understanding how they were supposed to

00:02:56,670 --> 00:03:01,079
express themselves in the access control

00:02:58,590 --> 00:03:03,269
syntax they would frequently get it

00:03:01,079 --> 00:03:06,750
wrong in the time that I've been working

00:03:03,269 --> 00:03:09,920
on the documentation the doc that

00:03:06,750 --> 00:03:12,480
describes the order directive has been

00:03:09,920 --> 00:03:14,069
corrected several times by people who

00:03:12,480 --> 00:03:15,599
didn't really understand it they ended

00:03:14,069 --> 00:03:18,000
up reversing the meaning of it and

00:03:15,599 --> 00:03:20,340
submitting a patch and we would say no

00:03:18,000 --> 00:03:23,700
it was actually right before but maybe

00:03:20,340 --> 00:03:27,870
we can make it less confusing in the 2.4

00:03:23,700 --> 00:03:31,470
version changes hopefully make it much

00:03:27,870 --> 00:03:33,750
easier to use but also much more

00:03:31,470 --> 00:03:36,480
flexible in the concepts that you can

00:03:33,750 --> 00:03:39,709
express you can you can create access

00:03:36,480 --> 00:03:43,859
control situations that express a much

00:03:39,709 --> 00:03:48,720
finer grain of control over who can get

00:03:43,859 --> 00:03:51,660
in so in 2.2 and earlier we had four

00:03:48,720 --> 00:03:55,230
main directives that specified access

00:03:51,660 --> 00:04:02,329
control the order allow deny and

00:03:55,230 --> 00:04:04,769
satisfied directives the order directive

00:04:02,329 --> 00:04:07,470
you can think of this in terms of how

00:04:04,769 --> 00:04:10,799
you might set up firewall rules you can

00:04:07,470 --> 00:04:14,040
either deny everything and then allow

00:04:10,799 --> 00:04:16,289
selectively or you can allow everything

00:04:14,040 --> 00:04:18,060
and then deny the bad stuff and there

00:04:16,289 --> 00:04:20,519
are situations where each one of these

00:04:18,060 --> 00:04:22,140
is relevant it's not that one is better

00:04:20,519 --> 00:04:24,550
than the other there are situations

00:04:22,140 --> 00:04:28,199
where each is relevant so

00:04:24,550 --> 00:04:30,849
in the order directive the allow deny

00:04:28,199 --> 00:04:34,330
specifies that you apply all of the

00:04:30,849 --> 00:04:37,830
specified allow rules and then you go

00:04:34,330 --> 00:04:41,110
back and apply all the deny rules and

00:04:37,830 --> 00:04:42,879
this becomes confusing when you are

00:04:41,110 --> 00:04:44,470
merging multiple sections of your

00:04:42,879 --> 00:04:46,840
configuration suppose you have

00:04:44,470 --> 00:04:48,879
overlapping directory blocks you have

00:04:46,840 --> 00:04:51,430
allow and deny directives in one and

00:04:48,879 --> 00:04:53,770
then some more and another the allow

00:04:51,430 --> 00:04:56,440
directive I'm sorry the order directive

00:04:53,770 --> 00:04:58,539
specifies the the order in which those

00:04:56,440 --> 00:05:02,620
are applied to the specific requests

00:04:58,539 --> 00:05:05,020
under consideration the default behavior

00:05:02,620 --> 00:05:07,930
when you say allow deny the default

00:05:05,020 --> 00:05:12,789
behavior is to deny everything and then

00:05:07,930 --> 00:05:14,080
the reverse is true of deny allow quite

00:05:12,789 --> 00:05:16,900
apart from the confusion surrounding

00:05:14,080 --> 00:05:19,900
this the syntax itself is deny comma

00:05:16,900 --> 00:05:21,940
allow with no spaces and that's a

00:05:19,900 --> 00:05:29,650
frequent syntax error in configuration

00:05:21,940 --> 00:05:33,310
files so this often confused people the

00:05:29,650 --> 00:05:35,919
syntax for specifying what is to be

00:05:33,310 --> 00:05:39,699
allowed goes something like this you can

00:05:35,919 --> 00:05:43,090
say allow from all and deny from all

00:05:39,699 --> 00:05:46,479
which mean exactly what you expect you

00:05:43,090 --> 00:05:48,849
can allow or deny from an address where

00:05:46,479 --> 00:05:52,090
this is either an IP address or a

00:05:48,849 --> 00:05:56,169
hostname or a partial IP address or

00:05:52,090 --> 00:05:59,590
hostname and you can allow or deny from

00:05:56,169 --> 00:06:05,020
an environment variable which means that

00:05:59,590 --> 00:06:07,539
you can specify an environment variable

00:06:05,020 --> 00:06:12,099
either is defined or has a particular

00:06:07,539 --> 00:06:14,819
value and use that as access control and

00:06:12,099 --> 00:06:17,800
then finally the satisfy directive

00:06:14,819 --> 00:06:19,990
specified how many of the rules you had

00:06:17,800 --> 00:06:21,969
to honor so if you say satisfy all it

00:06:19,990 --> 00:06:24,669
means that every rule every allowed

00:06:21,969 --> 00:06:27,849
directive that is specified must be true

00:06:24,669 --> 00:06:31,240
in order for access to be granted if you

00:06:27,849 --> 00:06:33,370
will say satisfy any then one of the

00:06:31,240 --> 00:06:36,909
above is fine so here's an example of

00:06:33,370 --> 00:06:37,889
that this is an access control block for

00:06:36,909 --> 00:06:41,490
the dashboard

00:06:37,889 --> 00:06:43,860
of your website and you want to allow it

00:06:41,490 --> 00:06:48,330
you want to allow anyone within your

00:06:43,860 --> 00:06:50,009
company to access it freely or if

00:06:48,330 --> 00:06:53,129
they're not inside your company you want

00:06:50,009 --> 00:06:56,219
to make sure that they are an admin so

00:06:53,129 --> 00:06:57,779
we say first of all we say deny allows

00:06:56,219 --> 00:07:00,319
best saying that we want to deny

00:06:57,779 --> 00:07:04,020
everything by default and then

00:07:00,319 --> 00:07:06,629
selectively allow things so I'm going to

00:07:04,020 --> 00:07:08,819
deny from all and then I'm going to

00:07:06,629 --> 00:07:12,270
allow people on my network and I'm going

00:07:08,819 --> 00:07:15,779
to allow group admins finally I say

00:07:12,270 --> 00:07:21,150
satisfy any which means any of the above

00:07:15,779 --> 00:07:23,039
is sufficient so if they're on a 10 dot

00:07:21,150 --> 00:07:26,039
one address I don't bother asking for a

00:07:23,039 --> 00:07:29,310
username but if they're not then I'm

00:07:26,039 --> 00:07:30,870
going to have a authentication dialog

00:07:29,310 --> 00:07:37,110
and ask for a login and check that

00:07:30,870 --> 00:07:39,900
they're an admin here's an example of

00:07:37,110 --> 00:07:42,960
using an environment variable as access

00:07:39,900 --> 00:07:46,050
control again this is 2.2 syntax 2.2 and

00:07:42,960 --> 00:07:50,270
earlier i'm going to use the set and if

00:07:46,050 --> 00:07:53,479
directive to say if the user agent field

00:07:50,270 --> 00:07:55,979
matches the regular expression bad bot

00:07:53,479 --> 00:08:00,089
then i'm going to set an environment

00:07:55,979 --> 00:08:02,759
variable called go away and then I say

00:08:00,089 --> 00:08:06,319
deny from environment variable equals go

00:08:02,759 --> 00:08:08,969
away and this is a simple way to

00:08:06,319 --> 00:08:11,389
restrict access from a certain user

00:08:08,969 --> 00:08:11,389
agent

00:08:15,150 --> 00:08:22,380
in in addition to the allow and deny

00:08:18,860 --> 00:08:26,220
syntax there is also in 2.2 and earlier

00:08:22,380 --> 00:08:31,970
a require keyword and the require

00:08:26,220 --> 00:08:34,800
keyword is for user based authentication

00:08:31,970 --> 00:08:37,710
so we can say require valid user which

00:08:34,800 --> 00:08:40,530
means anyone that successfully puts in a

00:08:37,710 --> 00:08:44,490
password is going to be allowed we can

00:08:40,530 --> 00:08:47,930
allow a specific user or we can allow we

00:08:44,490 --> 00:08:50,520
can require a particular group of users

00:08:47,930 --> 00:08:55,110
so anyway that's the way that it is

00:08:50,520 --> 00:08:58,440
prior to 2.4 and if you want to have a

00:08:55,110 --> 00:09:02,130
particularly complex situation where you

00:08:58,440 --> 00:09:05,160
want to require more than just a handful

00:09:02,130 --> 00:09:06,780
of things you want to say well I want

00:09:05,160 --> 00:09:08,040
them to be in the marketing group I

00:09:06,780 --> 00:09:11,940
don't want them to be somebody that's

00:09:08,040 --> 00:09:14,790
only been on staff for two weeks and I

00:09:11,940 --> 00:09:17,100
want them to be in this particular part

00:09:14,790 --> 00:09:18,540
of my building and you know things start

00:09:17,100 --> 00:09:22,050
getting to the point where you can no

00:09:18,540 --> 00:09:27,780
longer express them in the 2.2 and

00:09:22,050 --> 00:09:29,100
earlier syntax so in 2.4 there's a

00:09:27,780 --> 00:09:31,650
couple new keywords that have been

00:09:29,100 --> 00:09:33,570
introduced the require keyword is still

00:09:31,650 --> 00:09:36,150
around but it is much more flexible than

00:09:33,570 --> 00:09:38,490
it used to be and we've introduced these

00:09:36,150 --> 00:09:43,050
three new sections require any require

00:09:38,490 --> 00:09:48,690
all and require none which mean exactly

00:09:43,050 --> 00:09:51,320
what they say the the directives are

00:09:48,690 --> 00:09:54,270
defined in a module called mod authz

00:09:51,320 --> 00:09:56,670
core if you look at a list of Apache

00:09:54,270 --> 00:09:59,970
modules you'll see a bunch of them start

00:09:56,670 --> 00:10:03,420
with laud off n and a bunch of them

00:09:59,970 --> 00:10:06,630
start with Maud RZ the auth end ones are

00:10:03,420 --> 00:10:09,660
for authentication specifically for user

00:10:06,630 --> 00:10:13,140
user based authentication the Aussie

00:10:09,660 --> 00:10:15,960
ones are for authorization and then

00:10:13,140 --> 00:10:19,140
there's the special case mod held at

00:10:15,960 --> 00:10:22,050
month auth NZ ldap which handles both of

00:10:19,140 --> 00:10:24,740
those things altogether because ldap is

00:10:22,050 --> 00:10:24,740
a special case

00:10:26,749 --> 00:10:34,769
all right here is the syntax require you

00:10:32,670 --> 00:10:37,290
can optionally put a knot in there to

00:10:34,769 --> 00:10:40,379
negate it and then there is some entity

00:10:37,290 --> 00:10:42,739
some some attribute that we are going to

00:10:40,379 --> 00:10:45,959
consider and then there's a value

00:10:42,739 --> 00:10:50,309
possibly that we're going to check to

00:10:45,959 --> 00:10:53,759
see if it's set so we'll start with the

00:10:50,309 --> 00:10:57,419
basic one require all granted and

00:10:53,759 --> 00:10:59,939
require all denied are the replacement

00:10:57,419 --> 00:11:06,899
for the old allow from all deny from all

00:10:59,939 --> 00:11:09,619
sin tax next we have environment

00:11:06,899 --> 00:11:13,220
variable requirements require

00:11:09,619 --> 00:11:15,329
environment something so here's a

00:11:13,220 --> 00:11:18,209
comparable example to the one that I

00:11:15,329 --> 00:11:20,790
showed you a little bit earlier I'm

00:11:18,209 --> 00:11:23,730
going to use the set and if directive

00:11:20,790 --> 00:11:25,980
again to set a environment variable

00:11:23,730 --> 00:11:29,220
called let me in and if you don't

00:11:25,980 --> 00:11:33,239
specify a value it sets it to true or 21

00:11:29,220 --> 00:11:37,290
and then I say require environment

00:11:33,239 --> 00:11:40,319
variable let me in so this reduces the

00:11:37,290 --> 00:11:42,899
the for line example from before to a

00:11:40,319 --> 00:11:44,999
two-line example but it's not merely

00:11:42,899 --> 00:11:49,169
about lines of configuration it's also

00:11:44,999 --> 00:11:52,139
about the clarity of expression the the

00:11:49,169 --> 00:11:55,829
order did not deny allow and the deny

00:11:52,139 --> 00:11:57,929
from all kind of gets in the way of

00:11:55,829 --> 00:12:01,169
understanding what exactly is going on

00:11:57,929 --> 00:12:03,929
here so we're simply saying require this

00:12:01,169 --> 00:12:07,699
environment variable the implication is

00:12:03,929 --> 00:12:07,699
everything else is is denied

00:12:12,860 --> 00:12:20,870
okay the next thing that we've got is a

00:12:15,920 --> 00:12:24,530
module called Maud RZ host mud off seek

00:12:20,870 --> 00:12:28,040
or implements the basic require syntax

00:12:24,530 --> 00:12:31,520
any other module can extend that to add

00:12:28,040 --> 00:12:33,380
its own require keywords so this is the

00:12:31,520 --> 00:12:38,300
first of the modules that does that this

00:12:33,380 --> 00:12:40,640
is Maud RZ host and it says require it

00:12:38,300 --> 00:12:44,440
has it has two keywords that you can use

00:12:40,640 --> 00:12:47,750
here the first one is require IP and

00:12:44,440 --> 00:12:49,760
when you use the require IP syntax you

00:12:47,750 --> 00:12:52,310
can express the network address in

00:12:49,760 --> 00:12:55,940
pretty much any syntax you can think of

00:12:52,310 --> 00:13:00,680
you can use a fully address or a partial

00:12:55,940 --> 00:13:05,960
IP address or a bitmask you can use ipv6

00:13:00,680 --> 00:13:13,370
or IB ipv4 addresses and it'll do the

00:13:05,960 --> 00:13:18,890
right thing you can also specify host

00:13:13,370 --> 00:13:21,860
names you can specify a a partial host

00:13:18,890 --> 00:13:25,430
name or a fully qualified host name to

00:13:21,860 --> 00:13:27,620
say I want to require the host example

00:13:25,430 --> 00:13:30,980
org or any any hosts that are in that

00:13:27,620 --> 00:13:36,160
domain I'm also going to exclude

00:13:30,980 --> 00:13:36,160
anything that is in a dot are you domain

00:13:36,190 --> 00:13:41,300
it's it's worth noting at this point

00:13:38,660 --> 00:13:45,920
that you want to avoid name based access

00:13:41,300 --> 00:13:50,210
control if at all possible the main

00:13:45,920 --> 00:13:52,520
reason for that is performance any time

00:13:50,210 --> 00:13:55,970
that you introduced DNS into the

00:13:52,520 --> 00:13:59,780
equation you are introducing a delay

00:13:55,970 --> 00:14:02,660
that you have no control over this is

00:13:59,780 --> 00:14:04,520
doubly true when you do name based

00:14:02,660 --> 00:14:08,210
authentication because when you do a

00:14:04,520 --> 00:14:11,150
host look up when we have for example

00:14:08,210 --> 00:14:13,190
require host example org we take the IP

00:14:11,150 --> 00:14:14,810
address of the client and we do a DNS

00:14:13,190 --> 00:14:18,320
lookup on it and see what host name

00:14:14,810 --> 00:14:20,780
comes back however if you're familiar

00:14:18,320 --> 00:14:23,480
with DNS you know that if you own an IP

00:14:20,780 --> 00:14:26,060
address you can put any reverse lookup

00:14:23,480 --> 00:14:29,600
you want with that IP address so

00:14:26,060 --> 00:14:32,840
we don't trust that we take that

00:14:29,600 --> 00:14:35,450
hostname we do a reverse look-up on it

00:14:32,840 --> 00:14:38,270
again to see what IP address comes back

00:14:35,450 --> 00:14:39,890
and make sure that they match and if

00:14:38,270 --> 00:14:41,630
that's not the case then we go ahead and

00:14:39,890 --> 00:14:45,520
deny it anyway no matter what they told

00:14:41,630 --> 00:14:45,520
us their their point or address was

00:14:46,180 --> 00:14:50,660
there's one special syntax that comes in

00:14:49,040 --> 00:14:53,660
MA taught see host and that's require

00:14:50,660 --> 00:14:57,040
local and this is a little bit more

00:14:53,660 --> 00:15:01,070
intelligent than simply saying require

00:14:57,040 --> 00:15:05,180
127 001 it will allow any connections

00:15:01,070 --> 00:15:09,530
from anything in the 127 network or

00:15:05,180 --> 00:15:12,410
anything that has a a local host ipv6

00:15:09,530 --> 00:15:14,240
address or even something where the

00:15:12,410 --> 00:15:17,410
client and server have the same network

00:15:14,240 --> 00:15:20,360
address so it does a little bit more

00:15:17,410 --> 00:15:23,420
intelligent calculation there when you

00:15:20,360 --> 00:15:26,000
say require local it's really important

00:15:23,420 --> 00:15:29,060
to remember that if you are proxying

00:15:26,000 --> 00:15:32,180
content if you have a proxy pass back to

00:15:29,060 --> 00:15:35,240
a service on the same box then all your

00:15:32,180 --> 00:15:37,940
connections come from local so you want

00:15:35,240 --> 00:15:41,830
to be real careful about using require

00:15:37,940 --> 00:15:41,830
local in that kind of a context

00:15:48,030 --> 00:15:53,280
so the next piece of the next require

00:15:51,120 --> 00:15:55,500
syntax looks very much like what you're

00:15:53,280 --> 00:16:00,300
already used to from 22 and before you

00:15:55,500 --> 00:16:02,070
can require a user you can require valid

00:16:00,300 --> 00:16:05,460
user which means anyone that's

00:16:02,070 --> 00:16:09,540
successfully logged in the new syntax

00:16:05,460 --> 00:16:12,780
here is require not user which creates a

00:16:09,540 --> 00:16:17,190
black list of specific users or groups

00:16:12,780 --> 00:16:19,050
that you're going to exclude but this

00:16:17,190 --> 00:16:27,180
syntax should look very familiar if

00:16:19,050 --> 00:16:28,470
you've been around httpd for a while on

00:16:27,180 --> 00:16:30,840
the other hand if you're upgrading from

00:16:28,470 --> 00:16:36,240
an earlier version of httpd you may not

00:16:30,840 --> 00:16:37,800
be familiar with the the syntax that you

00:16:36,240 --> 00:16:42,410
see here so let me walk through this a

00:16:37,800 --> 00:16:44,460
little bit here the first line is which

00:16:42,410 --> 00:16:46,410
authentication protocol we're going to

00:16:44,460 --> 00:16:50,730
use and in this case we're using basic

00:16:46,410 --> 00:16:54,560
the two main HTTP protocols are basic

00:16:50,730 --> 00:16:59,340
and digest and the basic authentication

00:16:54,560 --> 00:17:01,500
protocol is what's going on most of the

00:16:59,340 --> 00:17:04,230
time when you see a pop-up password

00:17:01,500 --> 00:17:06,600
dialog on a website it asks for your

00:17:04,230 --> 00:17:10,650
credentials and then it passes those

00:17:06,600 --> 00:17:12,360
credentials plain text to the server the

00:17:10,650 --> 00:17:15,780
other thing that happens is that the

00:17:12,360 --> 00:17:18,720
browser will cache your username and

00:17:15,780 --> 00:17:21,690
password it will associate it with the

00:17:18,720 --> 00:17:24,350
host the host name the IP address that

00:17:21,690 --> 00:17:26,400
you're visiting and also the off name

00:17:24,350 --> 00:17:28,740
you'll see that off name in that

00:17:26,400 --> 00:17:31,320
password dialog the browser will cache

00:17:28,740 --> 00:17:33,210
that information and continue to send it

00:17:31,320 --> 00:17:37,860
with every subsequent request to the

00:17:33,210 --> 00:17:39,840
same website so when you're on a an open

00:17:37,860 --> 00:17:43,100
wireless network like at this conference

00:17:39,840 --> 00:17:46,110
you can watch traffic going by and and

00:17:43,100 --> 00:17:47,670
snag all the usernames and passwords of

00:17:46,110 --> 00:17:51,480
sites that are using basic

00:17:47,670 --> 00:17:53,490
authentication without SSL so that's an

00:17:51,480 --> 00:17:56,550
important thing to be aware of there's

00:17:53,490 --> 00:17:58,800
another authentication protocol called

00:17:56,550 --> 00:18:00,610
digest which does a better job of this

00:17:58,800 --> 00:18:04,510
it hashes the username and pass

00:18:00,610 --> 00:18:08,590
and makes it significantly more

00:18:04,510 --> 00:18:11,590
difficult to harvest bet the next

00:18:08,590 --> 00:18:14,830
keyword down here is off basic provider

00:18:11,590 --> 00:18:19,990
and the auth batuk basic provider

00:18:14,830 --> 00:18:22,200
keyword was added in 22 and it reflects

00:18:19,990 --> 00:18:24,549
the fact that you can now store

00:18:22,200 --> 00:18:27,570
authentication credentials in a number

00:18:24,549 --> 00:18:35,260
of different backends that can be file

00:18:27,570 --> 00:18:38,040
dbm or dbd or LDAP in this particular

00:18:35,260 --> 00:18:41,140
case I have to specify the dbm type and

00:18:38,040 --> 00:18:46,620
the file path to where I'm actually

00:18:41,140 --> 00:18:49,480
storing the the password so that's a

00:18:46,620 --> 00:18:54,460
that's a fairly typical authentication

00:18:49,480 --> 00:18:59,650
configuration block if you wish to

00:18:54,460 --> 00:19:01,510
require a group the group syntax is

00:18:59,650 --> 00:19:05,770
fairly simple what you see at the top

00:19:01,510 --> 00:19:09,220
there is a group file and it lists the

00:19:05,770 --> 00:19:11,830
group name and then a space separated

00:19:09,220 --> 00:19:14,440
list of everyone that is in that group

00:19:11,830 --> 00:19:16,840
and you can have as many groups as you

00:19:14,440 --> 00:19:20,500
want in a given group file that can be

00:19:16,840 --> 00:19:25,179
stored in a flat text file or it can be

00:19:20,500 --> 00:19:28,169
stored in a DVM and can be used for

00:19:25,179 --> 00:19:28,169
group based authentication

00:19:34,130 --> 00:19:42,180
next we have mud Ozzy method I believe

00:19:38,220 --> 00:19:45,960
it's called that does HTTP method based

00:19:42,180 --> 00:19:48,660
access control so in this example here I

00:19:45,960 --> 00:19:51,930
say require method get post options and

00:19:48,660 --> 00:19:56,360
that denies access in any other HTTP

00:19:51,930 --> 00:19:56,360
method so that's pretty straightforward

00:19:57,830 --> 00:20:04,800
and then one of the major new features

00:20:01,800 --> 00:20:07,400
in 2.4 is the expression engine this

00:20:04,800 --> 00:20:10,380
allows us to use arbitrarily complex

00:20:07,400 --> 00:20:12,960
logical expressions at various places in

00:20:10,380 --> 00:20:16,520
the configuration file and one of those

00:20:12,960 --> 00:20:19,080
is in access control so here we have

00:20:16,520 --> 00:20:22,340
require expression and then I have a

00:20:19,080 --> 00:20:24,930
expression talking about the time of day

00:20:22,340 --> 00:20:29,370
this particular one denies access

00:20:24,930 --> 00:20:30,630
outside of business hours to whatever

00:20:29,370 --> 00:20:33,200
resource it is that we're protecting

00:20:30,630 --> 00:20:33,200
here

00:20:37,770 --> 00:20:41,280
so now I've got several different ways

00:20:39,480 --> 00:20:44,700
that I can express this the first

00:20:41,280 --> 00:20:48,780
example here is in 2.2 syntax using

00:20:44,700 --> 00:20:50,820
order and deny and allow and then I have

00:20:48,780 --> 00:20:55,770
two different ways that I can express a

00:20:50,820 --> 00:20:59,010
very similar thing using 2.4 syntax I

00:20:55,770 --> 00:21:02,100
can either use I can either set an

00:20:59,010 --> 00:21:05,880
environment variable or I can directly

00:21:02,100 --> 00:21:09,150
use an expression to compare the value

00:21:05,880 --> 00:21:14,970
of the environment variable to a regular

00:21:09,150 --> 00:21:17,100
expression I guess there's really not

00:21:14,970 --> 00:21:18,270
any difference between those two if

00:21:17,100 --> 00:21:19,590
you're going to use the environment

00:21:18,270 --> 00:21:21,870
variable somewhere else you might want

00:21:19,590 --> 00:21:24,300
to use the set envis version if it's

00:21:21,870 --> 00:21:26,430
just a one-off comparison you might want

00:21:24,300 --> 00:21:29,010
to use the expression whichever one

00:21:26,430 --> 00:21:31,830
works best with your brain as you as you

00:21:29,010 --> 00:21:38,670
look into writing these configuration

00:21:31,830 --> 00:21:40,620
bits so next we come on the the bigger

00:21:38,670 --> 00:21:43,410
advantage of this system and that's the

00:21:40,620 --> 00:21:46,050
ability to come to combine several

00:21:43,410 --> 00:21:48,480
different access control mechanisms in a

00:21:46,050 --> 00:21:50,340
single statement and there's three sin

00:21:48,480 --> 00:21:58,230
taxes for this the first one is require

00:21:50,340 --> 00:22:02,520
all require all says anything that is in

00:21:58,230 --> 00:22:04,980
this block must be enforced so in this

00:22:02,520 --> 00:22:07,500
case I'm saying you have to be on our

00:22:04,980 --> 00:22:10,070
network on the 10 dot to network and you

00:22:07,500 --> 00:22:13,380
must also be in the admins group and

00:22:10,070 --> 00:22:20,220
this is identical to the old satisfy all

00:22:13,380 --> 00:22:23,010
syntax next we have require any and this

00:22:20,220 --> 00:22:26,850
is the same as the old satisfy any

00:22:23,010 --> 00:22:29,640
syntax so here I'm saying it's

00:22:26,850 --> 00:22:32,010
sufficient either that you're on my 10

00:22:29,640 --> 00:22:34,620
dot to network or that you're an admin

00:22:32,010 --> 00:22:37,580
it's not necessary that you be both one

00:22:34,620 --> 00:22:37,580
or the other is fine

00:22:42,360 --> 00:22:47,380
so you know here's an example in a

00:22:44,620 --> 00:22:53,500
directory block I haven't uploads

00:22:47,380 --> 00:22:55,659
directory if if you are simply

00:22:53,500 --> 00:22:59,020
retrieving content from the uploads

00:22:55,659 --> 00:23:01,419
directory I don't care who you are but

00:22:59,020 --> 00:23:04,059
if you are doing something else like

00:23:01,419 --> 00:23:09,279
doing a post method I need you to be

00:23:04,059 --> 00:23:12,120
authenticated and so if you do any if

00:23:09,279 --> 00:23:15,130
you do a post or a put it's going to say

00:23:12,120 --> 00:23:16,179
well now I need require valid user so

00:23:15,130 --> 00:23:22,809
I'm going to ask you for your

00:23:16,179 --> 00:23:24,250
credentials so let's compare these two

00:23:22,809 --> 00:23:27,100
blocks and you'll notice that the line

00:23:24,250 --> 00:23:30,010
count is essentially well it's one line

00:23:27,100 --> 00:23:32,860
less but here again it's not about the

00:23:30,010 --> 00:23:35,679
line count so much as about the clarity

00:23:32,860 --> 00:23:39,880
of expression we don't waste time on the

00:23:35,679 --> 00:23:41,860
the seemingly unnecessary deny and order

00:23:39,880 --> 00:23:46,779
lines we just get straight to the point

00:23:41,860 --> 00:23:50,760
we say require any one of these two and

00:23:46,779 --> 00:23:50,760
then we put that in a directory block

00:23:53,279 --> 00:24:01,929
finally we have the require none block

00:23:57,210 --> 00:24:03,909
which says none of the things in this

00:24:01,929 --> 00:24:09,039
group are allowed to be true and still

00:24:03,909 --> 00:24:10,690
allow access so in this case in my ldap

00:24:09,039 --> 00:24:12,520
directory I have two different ways to

00:24:10,690 --> 00:24:15,279
indicate that someone is a temporary

00:24:12,520 --> 00:24:19,570
worker they can either be in the group

00:24:15,279 --> 00:24:25,480
temps or they can have a common name of

00:24:19,570 --> 00:24:27,210
temporary employees and neither one of

00:24:25,480 --> 00:24:29,169
those is acceptable for my particular

00:24:27,210 --> 00:24:31,090
situation I don't want either one of

00:24:29,169 --> 00:24:33,360
those groups of people to have access to

00:24:31,090 --> 00:24:33,360
the content

00:24:35,210 --> 00:24:40,909
and up until now all of that we could

00:24:38,630 --> 00:24:42,169
have done with the old syntax it might

00:24:40,909 --> 00:24:43,940
have been a bit of a stretch but we

00:24:42,169 --> 00:24:46,580
could have done it but what the new

00:24:43,940 --> 00:24:48,770
syntax allows you to do is nest several

00:24:46,580 --> 00:24:51,830
of these together in a very complex way

00:24:48,770 --> 00:24:54,610
and enforce extremely fine grained

00:24:51,830 --> 00:24:59,120
control so here's an example of that

00:24:54,610 --> 00:25:03,350
this is an ldap authentication I'm sorry

00:24:59,120 --> 00:25:06,940
access control block authorization that

00:25:03,350 --> 00:25:09,409
that requires a variety of different

00:25:06,940 --> 00:25:12,860
conditions to be true before we allow

00:25:09,409 --> 00:25:14,390
someone access to our content and you

00:25:12,860 --> 00:25:16,100
know at first glance that may seem a

00:25:14,390 --> 00:25:18,289
little bit baffling but if you look at

00:25:16,100 --> 00:25:20,539
each individual section you can

00:25:18,289 --> 00:25:24,409
understand what each individual section

00:25:20,539 --> 00:25:27,500
is doing so we're saying either they

00:25:24,409 --> 00:25:31,549
need to be an admin or in the group

00:25:27,500 --> 00:25:34,279
admin or in sales and they need to not

00:25:31,549 --> 00:25:36,350
be a temp worker and we combine all of

00:25:34,279 --> 00:25:38,779
these together in a way that ensures

00:25:36,350 --> 00:25:40,520
that only the very specific people that

00:25:38,779 --> 00:25:49,429
I'm interested in can get in and no one

00:25:40,520 --> 00:25:54,380
else can so this brings me to ldap mod

00:25:49,429 --> 00:25:57,169
auth NZ ldap is a new module in 2.2

00:25:54,380 --> 00:25:58,520
which got a lot more love in 2.4 and I'm

00:25:57,169 --> 00:26:04,730
going to show you some of the syntax

00:25:58,520 --> 00:26:08,419
there this is a basic ldap

00:26:04,730 --> 00:26:11,990
authentication directive I pointed at my

00:26:08,419 --> 00:26:16,340
ldap server with an LDAP URL and I say I

00:26:11,990 --> 00:26:18,080
want a valid user going back to the

00:26:16,340 --> 00:26:20,210
example that I gave earlier you can see

00:26:18,080 --> 00:26:23,000
I also have the auth basic provider here

00:26:20,210 --> 00:26:26,690
and the provider in this case is ldap

00:26:23,000 --> 00:26:30,440
and so this is going to go off to my

00:26:26,690 --> 00:26:34,159
ldap server whatever it is and pass the

00:26:30,440 --> 00:26:35,870
the user provided credentials on to that

00:26:34,159 --> 00:26:38,990
server to make sure that they're allowed

00:26:35,870 --> 00:26:42,559
in there's a number of different

00:26:38,990 --> 00:26:45,500
syntaxes you can use to query your LDAP

00:26:42,559 --> 00:26:47,690
server the first one of these is simply

00:26:45,500 --> 00:26:54,080
require valid user

00:26:47,690 --> 00:26:57,950
and that means did they login okay I can

00:26:54,080 --> 00:27:00,429
also specify require ldap user and this

00:26:57,950 --> 00:27:04,159
is going to be the difference between a

00:27:00,429 --> 00:27:11,600
user ID and a user's common name in the

00:27:04,159 --> 00:27:16,970
LDAP directory or I can do an LDAP group

00:27:11,600 --> 00:27:18,980
and for people that are familiar with

00:27:16,970 --> 00:27:20,720
ldap you can get pretty fine grained

00:27:18,980 --> 00:27:23,120
when you build ldap groups groups are

00:27:20,720 --> 00:27:24,679
built on on queries or on lists and so

00:27:23,120 --> 00:27:31,070
you can be very fine-grained there and

00:27:24,679 --> 00:27:33,110
who is in that you can use a ldap

00:27:31,070 --> 00:27:35,659
distinguished name which is different

00:27:33,110 --> 00:27:38,509
potentially from their group or their

00:27:35,659 --> 00:27:42,950
common name you can build this on a

00:27:38,509 --> 00:27:45,740
particular ldap attribute so perhaps you

00:27:42,950 --> 00:27:47,659
have you just have a flag on certain

00:27:45,740 --> 00:27:51,259
ones or your users you can now do access

00:27:47,659 --> 00:27:53,480
control based on that and then you can

00:27:51,259 --> 00:27:55,220
finally you can do an LDAP filter so

00:27:53,480 --> 00:27:59,750
this particular example here from the

00:27:55,220 --> 00:28:02,090
documentation is I want to do access

00:27:59,750 --> 00:28:04,700
control based on anyone that's in

00:28:02,090 --> 00:28:07,909
marketing and has a cell phone on file

00:28:04,700 --> 00:28:10,879
and it does that query on the ldap back

00:28:07,909 --> 00:28:21,230
end and returns at whether the valid or

00:28:10,879 --> 00:28:23,509
not in the ldap URL itself if if you're

00:28:21,230 --> 00:28:25,490
used to building ldap URLs you can you

00:28:23,509 --> 00:28:28,460
can put the query in there in this case

00:28:25,490 --> 00:28:30,350
I've put the I've put some additional

00:28:28,460 --> 00:28:33,740
detail in the ldap URL and I'm going to

00:28:30,350 --> 00:28:40,909
query by user ID rather than by common

00:28:33,740 --> 00:28:43,549
name it's it's important when you're

00:28:40,909 --> 00:28:46,340
using common name against ldap to

00:28:43,549 --> 00:28:48,649
remember that there are actually cases

00:28:46,340 --> 00:28:50,480
where two people have the same name so

00:28:48,649 --> 00:28:52,789
you need to make sure that you're very

00:28:50,480 --> 00:28:55,899
cautious when you use common name as an

00:28:52,789 --> 00:28:55,899
authentication source

00:28:56,380 --> 00:29:02,650
here's one for anyone that carries a

00:28:58,640 --> 00:29:05,060
pager that's very similar to the to the

00:29:02,650 --> 00:29:06,830
cell phone example a little bit earlier

00:29:05,060 --> 00:29:09,020
and this would be a case where you've

00:29:06,830 --> 00:29:12,260
actually created an LDAP attribute that

00:29:09,020 --> 00:29:22,100
you associate with people that carry a

00:29:12,260 --> 00:29:24,170
pager if you want to use active

00:29:22,100 --> 00:29:25,430
directory as your LDAP back in there's a

00:29:24,170 --> 00:29:27,530
couple things that you have to do

00:29:25,430 --> 00:29:30,940
different well just one actually you

00:29:27,530 --> 00:29:35,270
need to use the user principal named

00:29:30,940 --> 00:29:39,110
argument to the ldap URL and that makes

00:29:35,270 --> 00:29:49,910
it play friendly with with HTTP DS

00:29:39,110 --> 00:29:55,850
access control another great new module

00:29:49,910 --> 00:29:58,580
is bot zi ma da SI DVD and this allows

00:29:55,850 --> 00:30:03,800
you to do authentication queries against

00:29:58,580 --> 00:30:06,290
any our DBMS i'm not sure what the full

00:30:03,800 --> 00:30:09,560
list is at the moment but i know you can

00:30:06,290 --> 00:30:16,420
do authorization against my sequel and

00:30:09,560 --> 00:30:21,520
postgres and oracle i believe i think so

00:30:16,420 --> 00:30:24,470
anyway here is a DB d configuration and

00:30:21,520 --> 00:30:26,090
this is split over several different

00:30:24,470 --> 00:30:27,530
slides so i want to talk about each bit

00:30:26,090 --> 00:30:30,650
of it a little bit differently first of

00:30:27,530 --> 00:30:33,620
all you're going to have your basic dbd

00:30:30,650 --> 00:30:36,920
configuration and so you're going to

00:30:33,620 --> 00:30:40,550
have your database name username and

00:30:36,920 --> 00:30:42,710
password there in your HDD BD

00:30:40,550 --> 00:30:45,980
configuration file so it becomes really

00:30:42,710 --> 00:30:49,040
important that you keep that file well

00:30:45,980 --> 00:30:52,420
secured and not readable by people who

00:30:49,040 --> 00:30:55,160
might not need to see this information

00:30:52,420 --> 00:30:59,650
we then have some process management

00:30:55,160 --> 00:31:02,240
stuff configured here mud dbd is a

00:30:59,650 --> 00:31:04,820
database pooling manager and it

00:31:02,240 --> 00:31:06,650
maintains the various connections to the

00:31:04,820 --> 00:31:08,330
database and that allows other modules

00:31:06,650 --> 00:31:11,870
to pass queries through them

00:31:08,330 --> 00:31:14,019
so those those first three directives

00:31:11,870 --> 00:31:16,370
there indicate the minimum and maximum

00:31:14,019 --> 00:31:22,789
number of connections that I want to

00:31:16,370 --> 00:31:24,409
keep in my pool at any time and huh I'm

00:31:22,789 --> 00:31:29,330
drawing a blank what's the DVD key

00:31:24,409 --> 00:31:30,830
before I forget what that one means I'd

00:31:29,330 --> 00:31:33,740
have to look that up you can look that

00:31:30,830 --> 00:31:37,220
up the DVD keep I forget what that

00:31:33,740 --> 00:31:39,860
directive does but the other two they're

00:31:37,220 --> 00:31:42,380
maintained they configure mod DVD how

00:31:39,860 --> 00:31:46,159
large it keeps its pool of connections

00:31:42,380 --> 00:31:48,980
and it will that will spawn and reap

00:31:46,159 --> 00:31:52,669
additional threads as needed based on

00:31:48,980 --> 00:31:55,639
load then we have the expiration time on

00:31:52,669 --> 00:31:57,080
a DVD connection and it it will close a

00:31:55,639 --> 00:32:01,970
connection that's been idle for a

00:31:57,080 --> 00:32:04,580
certain amount of time then here's a the

00:32:01,970 --> 00:32:08,120
actual configuration block that applies

00:32:04,580 --> 00:32:11,059
DVD based authentication to a particular

00:32:08,120 --> 00:32:15,320
resource so i'm specifying there the

00:32:11,059 --> 00:32:17,360
directory path and once again i have

00:32:15,320 --> 00:32:20,059
authtype basic and this time the auth

00:32:17,360 --> 00:32:22,870
basic provider is DVD tells you we're

00:32:20,059 --> 00:32:26,389
going to use mod DVD for the queries I

00:32:22,870 --> 00:32:28,880
then have two separate queries that I've

00:32:26,389 --> 00:32:31,100
specified here one is the one that will

00:32:28,880 --> 00:32:35,980
verify the username and password so

00:32:31,100 --> 00:32:39,470
that's the DVD user password query and

00:32:35,980 --> 00:32:41,750
you'll notice that it's actually

00:32:39,470 --> 00:32:43,970
checking to see that there's a value

00:32:41,750 --> 00:32:49,010
called login equals true and I'm going

00:32:43,970 --> 00:32:53,360
to come back to that in a moment and

00:32:49,010 --> 00:32:55,789
then we have the the authorization where

00:32:53,360 --> 00:32:59,269
it's checking what group they are a

00:32:55,789 --> 00:33:01,490
member of and we're going to check

00:32:59,269 --> 00:33:05,360
against that for authorization as well

00:33:01,490 --> 00:33:07,760
as for authentication I've specified a

00:33:05,360 --> 00:33:09,590
401 document that sends them to a page

00:33:07,760 --> 00:33:11,419
that tells them why they couldn't login

00:33:09,590 --> 00:33:16,330
that's that's always a friendly thing to

00:33:11,419 --> 00:33:20,659
do and then I've got two files blocks

00:33:16,330 --> 00:33:21,830
I'm going to have a log in HTML and a

00:33:20,659 --> 00:33:26,120
log out

00:33:21,830 --> 00:33:28,909
HTML and these are what they sound like

00:33:26,120 --> 00:33:32,269
one of them is the login page and i have

00:33:28,909 --> 00:33:34,730
the query that says select the password

00:33:32,269 --> 00:33:37,549
where the users provided and then i

00:33:34,730 --> 00:33:42,049
require this new this method called DVD

00:33:37,549 --> 00:33:44,690
login and that is the the method with in

00:33:42,049 --> 00:33:46,840
austin a DVD that verifies their

00:33:44,690 --> 00:33:50,510
username and password based on the

00:33:46,840 --> 00:33:54,139
queries that i've provided here and then

00:33:50,510 --> 00:33:59,899
sent the second there is a log out a DVD

00:33:54,139 --> 00:34:04,190
log out that that also that that clears

00:33:59,899 --> 00:34:06,980
the login value on there d on their

00:34:04,190 --> 00:34:08,960
database record and I've also got a

00:34:06,980 --> 00:34:10,909
query there that actually does that you

00:34:08,960 --> 00:34:15,440
can tailor that to your particular

00:34:10,909 --> 00:34:17,179
database needs so this is considerably

00:34:15,440 --> 00:34:22,099
more complicated than some of the other

00:34:17,179 --> 00:34:25,820
ones but what we've found over the years

00:34:22,099 --> 00:34:28,369
is that basic and digest authentication

00:34:25,820 --> 00:34:29,440
are all well and good but most people

00:34:28,369 --> 00:34:32,389
are implementing their own

00:34:29,440 --> 00:34:34,639
authentication on the server side anyway

00:34:32,389 --> 00:34:37,790
they've got in page authentication forms

00:34:34,639 --> 00:34:40,159
and this lowers the barrier to

00:34:37,790 --> 00:34:42,909
developing that it also provides a

00:34:40,159 --> 00:34:45,080
framework that is well tested and

00:34:42,909 --> 00:34:47,690
hopefully more secure than something

00:34:45,080 --> 00:34:50,139
that that junior developers are rolling

00:34:47,690 --> 00:34:50,139
on their own

00:34:52,770 --> 00:34:59,640
and speaking of which we've got another

00:34:56,970 --> 00:35:03,150
new module that does session based

00:34:59,640 --> 00:35:05,340
authentication and this is introduced in

00:35:03,150 --> 00:35:07,800
2.4 there's actually two modules

00:35:05,340 --> 00:35:11,340
involved in this the first one is mod

00:35:07,800 --> 00:35:13,260
sessions and mod sessions doesn't do

00:35:11,340 --> 00:35:18,510
authentication mod sessions just does

00:35:13,260 --> 00:35:22,620
the session stuff so here's how you use

00:35:18,510 --> 00:35:28,140
this if you want to turn on sessions you

00:35:22,620 --> 00:35:30,780
say sessions on you specify the name of

00:35:28,140 --> 00:35:32,760
the session cookie and in this case I'm

00:35:30,780 --> 00:35:36,030
calling it the unimaginative name of

00:35:32,760 --> 00:35:37,740
session and then I specify the path for

00:35:36,030 --> 00:35:40,560
which that cookie is valid in this case

00:35:37,740 --> 00:35:44,160
i'm specifying a path of / so the cookie

00:35:40,560 --> 00:35:48,570
is good for my whole site and then next

00:35:44,160 --> 00:35:50,760
i specify a header and you can make up

00:35:48,570 --> 00:35:55,680
whatever header name you want or you can

00:35:50,760 --> 00:35:58,980
use this this one that's you know as

00:35:55,680 --> 00:36:02,970
good as any other and that header means

00:35:58,980 --> 00:36:06,390
what header should I send to the client

00:36:02,970 --> 00:36:10,200
or rather what header should I send in

00:36:06,390 --> 00:36:12,990
order to reset or replace the session

00:36:10,200 --> 00:36:15,660
data and then if you want to do that

00:36:12,990 --> 00:36:18,600
here's an example from a pearl CGI

00:36:15,660 --> 00:36:20,970
program just to keep it simple but you

00:36:18,600 --> 00:36:24,000
can do this from any any language of

00:36:20,970 --> 00:36:27,510
course in your PHP application or

00:36:24,000 --> 00:36:31,680
whatever you can send a header and set

00:36:27,510 --> 00:36:33,870
the value of the session cookie and in

00:36:31,680 --> 00:36:37,020
this case i'm using the ex replace

00:36:33,870 --> 00:36:40,620
session header that i configured in the

00:36:37,020 --> 00:36:44,310
session header directive on sending data

00:36:40,620 --> 00:36:49,490
in a query string style format because

00:36:44,310 --> 00:36:51,930
that's the way the cookie store data if

00:36:49,490 --> 00:36:54,480
you want to read information back out of

00:36:51,930 --> 00:36:57,240
the session you do that via the

00:36:54,480 --> 00:37:01,470
environment variable HTTP underscore

00:36:57,240 --> 00:37:03,840
session and you also need to set the

00:37:01,470 --> 00:37:05,770
session end cookie on in order to tell

00:37:03,840 --> 00:37:09,700
hd-dvd to set that

00:37:05,770 --> 00:37:11,740
variable so then in your application you

00:37:09,700 --> 00:37:17,290
have access to that session variable you

00:37:11,740 --> 00:37:19,690
can read to it and also write do it the

00:37:17,290 --> 00:37:22,390
second module that hooks in with this

00:37:19,690 --> 00:37:24,880
and these these two modules were donated

00:37:22,390 --> 00:37:28,690
at the same time the second one is mud

00:37:24,880 --> 00:37:33,070
auth form and this is a module that

00:37:28,690 --> 00:37:35,740
takes care of the actual form handling

00:37:33,070 --> 00:37:37,930
side and setting the session data in the

00:37:35,740 --> 00:37:44,200
cookies so here's how you would

00:37:37,930 --> 00:37:46,390
configure this auth form provider file

00:37:44,200 --> 00:37:49,570
means that we're going to store our

00:37:46,390 --> 00:37:53,610
username and password information in a

00:37:49,570 --> 00:37:57,010
flat file you can also store it in a DBM

00:37:53,610 --> 00:37:58,990
or in dbd you can use any of the auth

00:37:57,010 --> 00:38:02,890
providers for this it uses the standard

00:37:58,990 --> 00:38:06,160
off provider syntax in this case since

00:38:02,890 --> 00:38:10,270
I'm using file I specify a file path to

00:38:06,160 --> 00:38:14,560
that user file password and then the

00:38:10,270 --> 00:38:16,780
auth type is form which means that you

00:38:14,560 --> 00:38:19,780
actually have to go put a form in your

00:38:16,780 --> 00:38:27,510
HTML to send us the authentication

00:38:19,780 --> 00:38:30,460
credentials the form login location is

00:38:27,510 --> 00:38:32,950
where to send them if they fail to login

00:38:30,460 --> 00:38:35,160
and then we turn on sessions and say

00:38:32,950 --> 00:38:37,890
wherever we're going to store the cookie

00:38:35,160 --> 00:38:42,790
your form looks like a pretty standard

00:38:37,890 --> 00:38:46,180
password dialog form you do need to use

00:38:42,790 --> 00:38:47,950
the username and password the correct

00:38:46,180 --> 00:38:50,740
names for the username and password

00:38:47,950 --> 00:38:53,140
fields and that's httpd underscore

00:38:50,740 --> 00:38:57,160
username and HTTP underscore password

00:38:53,140 --> 00:38:58,530
and then you can stick this in your in

00:38:57,160 --> 00:39:00,640
your web page and you have

00:38:58,530 --> 00:39:06,790
authentication for free without having

00:39:00,640 --> 00:39:10,120
to go develop that yourself the form

00:39:06,790 --> 00:39:13,300
action is pointing to this do login dot

00:39:10,120 --> 00:39:16,180
HTML which is not actually an HTML file

00:39:13,300 --> 00:39:16,980
on disk it is instead this location

00:39:16,180 --> 00:39:19,530
directive

00:39:16,980 --> 00:39:24,990
and this location directive is pointing

00:39:19,530 --> 00:39:28,170
at the mod auth form handler the form

00:39:24,990 --> 00:39:29,790
login handler there's several different

00:39:28,170 --> 00:39:33,240
things that i can set there there's the

00:39:29,790 --> 00:39:38,540
the the law of the location of the login

00:39:33,240 --> 00:39:38,540
form where to direct them on success and

00:39:41,030 --> 00:39:45,630
right where did you redirect them on

00:39:43,680 --> 00:39:47,940
failure as well as success the login dot

00:39:45,630 --> 00:39:49,740
HTML is where they go they go back to

00:39:47,940 --> 00:39:56,070
the login form if the authentication

00:39:49,740 --> 00:39:57,900
failed so that right there is all that's

00:39:56,070 --> 00:40:03,210
involved in setting up session based

00:39:57,900 --> 00:40:06,150
form based authentication now you can

00:40:03,210 --> 00:40:08,240
also specify in the form itself where

00:40:06,150 --> 00:40:12,410
you want to send them on success and

00:40:08,240 --> 00:40:14,730
that is the httpd underscore location

00:40:12,410 --> 00:40:16,740
argument that you put in the form and

00:40:14,730 --> 00:40:19,859
that way you can have a single login

00:40:16,740 --> 00:40:24,660
form handler handling multiple different

00:40:19,859 --> 00:40:27,119
authentication forms another big

00:40:24,660 --> 00:40:30,530
advantage of this module is that you can

00:40:27,119 --> 00:40:38,820
you can you do a logout handler as well

00:40:30,530 --> 00:40:41,580
and you provide a another location that

00:40:38,820 --> 00:40:45,510
is attached to the form logout handler

00:40:41,580 --> 00:40:47,790
handler and then once again you give it

00:40:45,510 --> 00:40:49,530
a location where you're going to send

00:40:47,790 --> 00:40:55,290
them once they have successfully logged

00:40:49,530 --> 00:40:59,520
out when someone hits this URL you set

00:40:55,290 --> 00:41:00,930
the session max age 21 indicating that

00:40:59,520 --> 00:41:06,960
that session is going to expire

00:41:00,930 --> 00:41:09,560
immediately or after one second and now

00:41:06,960 --> 00:41:09,560
they're logged out

00:41:17,140 --> 00:41:21,970
alright here's one more syntax that's

00:41:19,420 --> 00:41:23,650
available but were there any any

00:41:21,970 --> 00:41:25,839
questions about anything I've covered so

00:41:23,650 --> 00:41:30,099
far I can't see anyone so i can't see if

00:41:25,839 --> 00:41:37,779
i'm making sense to people no okay all

00:41:30,099 --> 00:41:43,450
right another great new syntax in the

00:41:37,779 --> 00:41:45,039
2.4 release is the if directive and this

00:41:43,450 --> 00:41:48,210
gives you yet another way that you can

00:41:45,039 --> 00:41:50,829
specify your access control requirements

00:41:48,210 --> 00:41:52,690
here's two examples that say the same

00:41:50,829 --> 00:41:56,920
thing the first one I'm using a require

00:41:52,690 --> 00:42:01,329
any to say I need it to be either a

00:41:56,920 --> 00:42:04,029
particular time of day or I need them to

00:42:01,329 --> 00:42:07,029
be in the group admins i can say that

00:42:04,029 --> 00:42:09,970
differently as if it's not during

00:42:07,029 --> 00:42:13,000
business hours then require group admins

00:42:09,970 --> 00:42:14,470
and this this gives you several

00:42:13,000 --> 00:42:16,779
different ways that you can think about

00:42:14,470 --> 00:42:18,819
the same access control requirement and

00:42:16,779 --> 00:42:26,170
express it in ways that makes sense to

00:42:18,819 --> 00:42:28,450
you so now one more thing that you need

00:42:26,170 --> 00:42:32,259
to think about is when you are upgrading

00:42:28,450 --> 00:42:34,390
from 22 to 24 you don't want your

00:42:32,259 --> 00:42:36,359
website to break on the first day as

00:42:34,390 --> 00:42:38,829
soon as you install the upgrade so

00:42:36,359 --> 00:42:40,299
ideally you do this on a test server and

00:42:38,829 --> 00:42:42,400
you get everything working there right

00:42:40,299 --> 00:42:45,839
but if you don't have that luxury there

00:42:42,400 --> 00:42:49,630
is a module called mud access compat and

00:42:45,839 --> 00:42:52,059
by enabling mud access compat you can

00:42:49,630 --> 00:42:54,130
continue to use the old authentication

00:42:52,059 --> 00:42:56,890
format while you're getting your

00:42:54,130 --> 00:43:00,220
configuration file to the point where it

00:42:56,890 --> 00:43:02,200
does the right thing so simply loading

00:43:00,220 --> 00:43:05,289
this module will allow you to continue

00:43:02,200 --> 00:43:12,480
to use the order deny allow satisfy

00:43:05,289 --> 00:43:15,519
syntax I wanted to mention one other

00:43:12,480 --> 00:43:17,109
interesting directive that i stumbled

00:43:15,519 --> 00:43:19,329
across while I was preparing this talk

00:43:17,109 --> 00:43:21,759
and this is off send forbidden on

00:43:19,329 --> 00:43:24,160
failure directive this would be

00:43:21,759 --> 00:43:27,369
something that you might use if you had

00:43:24,160 --> 00:43:30,130
a single set of user authentications for

00:43:27,369 --> 00:43:30,830
your whole website but different users

00:43:30,130 --> 00:43:32,630
are

00:43:30,830 --> 00:43:34,880
to access different parts of the website

00:43:32,630 --> 00:43:37,520
so you have a successful authentication

00:43:34,880 --> 00:43:43,000
but you have different authorization

00:43:37,520 --> 00:43:45,920
requirements and this will return a 403

00:43:43,000 --> 00:43:48,350
unauthorized saying yes you've

00:43:45,920 --> 00:43:53,210
successfully authenticated but you're

00:43:48,350 --> 00:43:55,700
not authorized the downside of this is

00:43:53,210 --> 00:43:57,740
if you use it in the wrong place you

00:43:55,700 --> 00:43:59,120
might tell someone yeah the password

00:43:57,740 --> 00:44:00,350
that you just guessed was right but

00:43:59,120 --> 00:44:02,390
you're not allowed in and that gives

00:44:00,350 --> 00:44:10,840
that gives an attacker more information

00:44:02,390 --> 00:44:13,820
than they really needed and then I

00:44:10,840 --> 00:44:17,150
wanted to also mention that if you are a

00:44:13,820 --> 00:44:19,730
fan of mod rewrite you can use the

00:44:17,150 --> 00:44:23,780
expression syntax within mod rewrite to

00:44:19,730 --> 00:44:25,880
to create access control which is

00:44:23,780 --> 00:44:28,610
something that wasn't available in 2.4

00:44:25,880 --> 00:44:30,950
this expression syntax so in this case

00:44:28,610 --> 00:44:33,200
I've got the same example that I was

00:44:30,950 --> 00:44:37,190
showing earlier but using mod rewrite as

00:44:33,200 --> 00:44:40,310
the conveyor of that information i can

00:44:37,190 --> 00:44:42,380
use an expression in a rewrite condition

00:44:40,310 --> 00:44:44,780
and that should say rewritecond there

00:44:42,380 --> 00:44:51,710
should be a d they're not a typo on the

00:44:44,780 --> 00:44:57,590
slide so you all have been very very

00:44:51,710 --> 00:44:59,180
quiet are there any questions and once

00:44:57,590 --> 00:45:01,460
again i'm finishing a little earlier

00:44:59,180 --> 00:45:03,680
than i had hoped because i tend to

00:45:01,460 --> 00:45:08,000
expect a little bit of heckling from the

00:45:03,680 --> 00:45:16,870
crowd but anybody have any any questions

00:45:08,000 --> 00:45:16,870
or comments or whatever is anyone awake

00:45:20,459 --> 00:45:27,759
alright great the require blocks the new

00:45:24,759 --> 00:45:30,339
stanzas they clearly have a scope they

00:45:27,759 --> 00:45:35,619
clearly can be scoped to a directory or

00:45:30,339 --> 00:45:37,869
a location or whatever the impression

00:45:35,619 --> 00:45:40,329
that I've got and I could be wrong on

00:45:37,869 --> 00:45:42,039
this and stuff the rewrite rules have

00:45:40,329 --> 00:45:44,559
always had a scope of basically the

00:45:42,039 --> 00:45:45,729
entire virtual host all right correct

00:45:44,559 --> 00:45:47,789
well that's that's something that you

00:45:45,729 --> 00:45:51,910
can configure you can put one of these

00:45:47,789 --> 00:45:55,650
you can put one of these rewrite it not

00:45:51,910 --> 00:45:55,650
not withstanding rewrite condition but

00:45:56,669 --> 00:46:02,019
so you know here's that here's an

00:45:58,689 --> 00:46:04,719
example of using the third the required

00:46:02,019 --> 00:46:06,459
syntax within a directory block and so

00:46:04,719 --> 00:46:08,410
you can scope that to whatever level you

00:46:06,459 --> 00:46:10,959
want you can put require in a location

00:46:08,410 --> 00:46:14,229
or directory block you can also put

00:46:10,959 --> 00:46:15,849
rewrite rules in a directory block but

00:46:14,229 --> 00:46:17,589
what I was trying to leave I'm sorry

00:46:15,849 --> 00:46:20,679
maybe I misunderstood what I was trying

00:46:17,589 --> 00:46:22,329
to lead up to was the you gave an

00:46:20,679 --> 00:46:27,219
example where you showed using the

00:46:22,329 --> 00:46:30,099
require block with some condition I

00:46:27,219 --> 00:46:32,829
think it was the time of day condition

00:46:30,099 --> 00:46:36,039
and it versus an if block with the

00:46:32,829 --> 00:46:39,069
condition in it and so the question that

00:46:36,039 --> 00:46:41,259
i have is clearly that require block can

00:46:39,069 --> 00:46:44,349
be scoped to location to directory and

00:46:41,259 --> 00:46:47,499
so forth yes if seem to be more related

00:46:44,349 --> 00:46:49,839
to mod rewrite in the earlier talk at

00:46:47,499 --> 00:46:53,199
least the way I perceived it so does it

00:46:49,839 --> 00:46:56,799
have the same scoping within location

00:46:53,199 --> 00:46:58,959
directory and Jeff Gordon put it you can

00:46:56,799 --> 00:47:01,059
put an if block in a directory or a

00:46:58,959 --> 00:47:02,829
location or it'll be global and it only

00:47:01,059 --> 00:47:05,199
applies to that director that's correct

00:47:02,829 --> 00:47:07,689
it only applies to that let's go but you

00:47:05,199 --> 00:47:09,789
can't do that with a rewrite rule

00:47:07,689 --> 00:47:14,499
because that really gets done before it

00:47:09,789 --> 00:47:16,779
even knows what directory right yeah you

00:47:14,499 --> 00:47:20,079
can put rewrite rules in a directory or

00:47:16,779 --> 00:47:23,199
location block it's a little bit it's a

00:47:20,079 --> 00:47:27,069
little there's no downside to putting a

00:47:23,199 --> 00:47:29,930
rewrite rule in a directory block except

00:47:27,069 --> 00:47:32,030
that it doesn't run until you are map

00:47:29,930 --> 00:47:34,010
to that directory right putting in a

00:47:32,030 --> 00:47:36,380
location block is a little bit redundant

00:47:34,010 --> 00:47:39,200
because by the time you get to a

00:47:36,380 --> 00:47:41,599
location you've already let's see which

00:47:39,200 --> 00:47:43,130
way around would that go I guess if you

00:47:41,599 --> 00:47:44,660
wanted to if you wanted to scope a

00:47:43,130 --> 00:47:46,520
rewrite rule to a location you'd

00:47:44,660 --> 00:47:49,010
probably express that in a rewrite

00:47:46,520 --> 00:47:51,200
condition instead of a location right so

00:47:49,010 --> 00:47:53,990
basically a rewrite role scope is your

00:47:51,200 --> 00:47:57,740
entire virtual host typically yes and

00:47:53,990 --> 00:47:59,599
but but if does tie to a smaller scope

00:47:57,740 --> 00:48:01,490
of you in case it in its dance yeah

00:47:59,599 --> 00:48:03,079
typically in it but in both cases you

00:48:01,490 --> 00:48:04,910
can use them which weather whichever way

00:48:03,079 --> 00:48:14,230
you want but yes that is the typical use

00:48:04,910 --> 00:48:20,390
case okay I had a questions about the

00:48:14,230 --> 00:48:25,819
authentication from isn't estranged but

00:48:20,390 --> 00:48:28,390
the field names just stopped by httpd so

00:48:25,819 --> 00:48:33,890
everyone knows you run a posh Apache and

00:48:28,390 --> 00:48:36,230
the over one hidden field to give next

00:48:33,890 --> 00:48:40,790
location after logging is quite strange

00:48:36,230 --> 00:48:45,140
no I'm afraid I'm having trouble hearing

00:48:40,790 --> 00:48:53,540
the question could you go to the

00:48:45,140 --> 00:48:54,890
auto-tune occasion from slide yes so

00:48:53,540 --> 00:48:56,450
rich you remember on the forum

00:48:54,890 --> 00:48:59,630
authentication right you showed an

00:48:56,450 --> 00:49:02,180
example form and he said these input

00:48:59,630 --> 00:49:05,869
fields have to be an HTTP underscore

00:49:02,180 --> 00:49:08,299
this an HTTP d underscore that right so

00:49:05,869 --> 00:49:09,950
regardless of your server signature and

00:49:08,299 --> 00:49:12,740
all that stuff that identifies the web

00:49:09,950 --> 00:49:16,460
server to someone who wants to know what

00:49:12,740 --> 00:49:18,530
you're running yeah I guess that is true

00:49:16,460 --> 00:49:21,980
and those those form fields are not

00:49:18,530 --> 00:49:23,660
configurable as far as I know so maybe

00:49:21,980 --> 00:49:25,069
that would be a good feature request

00:49:23,660 --> 00:49:30,490
going forward is to make that

00:49:25,069 --> 00:49:30,490
configurable hadn't thought of that

00:49:35,120 --> 00:49:42,350
alright well big or you have a question

00:49:46,599 --> 00:49:54,470
what is your advice to somebody trying

00:49:51,380 --> 00:49:58,849
to migrate a really really really big

00:49:54,470 --> 00:50:00,559
and complex infrastructure with lots and

00:49:58,849 --> 00:50:10,039
lots of authentication authorization

00:50:00,559 --> 00:50:15,769
from 22 to do that for so that's that's

00:50:10,039 --> 00:50:17,690
a really very broad question i guess my

00:50:15,769 --> 00:50:21,410
recommendation would be that initially

00:50:17,690 --> 00:50:24,430
they use Modocs mod access compat to

00:50:21,410 --> 00:50:28,760
ensure that things just keep on working

00:50:24,430 --> 00:50:32,890
but then take it one bite at a time to

00:50:28,760 --> 00:50:35,119
try to migrate the individual parts but

00:50:32,890 --> 00:50:36,950
you know it might also be a great

00:50:35,119 --> 00:50:40,730
opportunity to see if they can simplify

00:50:36,950 --> 00:50:43,130
their their over complex authentication

00:50:40,730 --> 00:50:44,900
scheme if that's possible I don't know

00:50:43,130 --> 00:50:46,460
it's hard to it's hard to answer a

00:50:44,900 --> 00:50:51,319
question like that without seeing a

00:50:46,460 --> 00:50:52,640
specific scenario but i would think mod

00:50:51,319 --> 00:50:57,160
access compat would be the right answer

00:50:52,640 --> 00:50:57,160
in the short term anyway

00:51:00,270 --> 00:51:08,410
well thank you all very much the slides

00:51:03,550 --> 00:51:14,800
for this presentation are at this very

00:51:08,410 --> 00:51:19,630
moment nope I lost my screen the slides

00:51:14,800 --> 00:51:21,930
are at that location and thank you all

00:51:19,630 --> 00:51:21,930

YouTube URL: https://www.youtube.com/watch?v=x4tKpFmfF4o


