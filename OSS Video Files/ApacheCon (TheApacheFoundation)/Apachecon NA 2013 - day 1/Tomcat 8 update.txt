Title: Tomcat 8 update
Publication date: 2013-10-17
Playlist: Apachecon NA 2013 - day 1
Description: 
	Mark Thomas
ApacheCon NA 2013
Track : A Patchy Web
Captions: 
	00:00:00,000 --> 00:00:05,430
okay so we'll know kick off worth their

00:00:03,179 --> 00:00:09,210
mark who presented on Tom Cowie robbed

00:00:05,430 --> 00:00:12,000
it so thanks for being here mark and we

00:00:09,210 --> 00:00:15,150
look forward to next 45 minutes we have

00:00:12,000 --> 00:00:23,340
some time at the end for cuny saw way

00:00:15,150 --> 00:00:24,539
thank you thank you very much excellent

00:00:23,340 --> 00:00:27,930
applause and haven't even said anything

00:00:24,539 --> 00:00:29,580
yet marvelous right for those who don't

00:00:27,930 --> 00:00:32,369
know me my name is Mark Thomas I'm

00:00:29,580 --> 00:00:35,850
employed by VMware but I spend most of

00:00:32,369 --> 00:00:38,550
my time working on apache tomcat so the

00:00:35,850 --> 00:00:40,739
agenda for this session is really sort

00:00:38,550 --> 00:00:42,899
of an overview of where we are on tomcat

00:00:40,739 --> 00:00:44,840
eight so i'll do a little bit of

00:00:42,899 --> 00:00:48,510
introduction and then look at the

00:00:44,840 --> 00:00:50,579
joffrey seven aspects of Tom ka and then

00:00:48,510 --> 00:00:52,260
the Tomcat specific stuff who's really

00:00:50,579 --> 00:00:53,730
every major tom cat version falls into

00:00:52,260 --> 00:00:55,620
those two categories those bits of the

00:00:53,730 --> 00:00:57,300
part of the specs and those sort of

00:00:55,620 --> 00:01:00,180
non-spec things that Tomcat is

00:00:57,300 --> 00:01:02,969
implementing then go on to look at time

00:01:00,180 --> 00:01:04,860
scales finish off with some final

00:01:02,969 --> 00:01:07,080
thoughts and then some questions at the

00:01:04,860 --> 00:01:09,510
end of my aim is to leave about 15

00:01:07,080 --> 00:01:11,250
minutes for questions I'm happy to take

00:01:09,510 --> 00:01:12,750
questions as we go along than we can

00:01:11,250 --> 00:01:14,130
sort of adjust the time of the talk and

00:01:12,750 --> 00:01:16,020
the questions accordingly of it

00:01:14,130 --> 00:01:19,430
essentially we've got an hour and we can

00:01:16,020 --> 00:01:22,590
fill it in whichever way we feel useful

00:01:19,430 --> 00:01:24,830
so by way of introduction the reason I'm

00:01:22,590 --> 00:01:27,090
up here today talking about Tomcat 8 is

00:01:24,830 --> 00:01:29,790
unsurprisingly I'm a committer on the

00:01:27,090 --> 00:01:32,450
Apache Tomcat project I do various other

00:01:29,790 --> 00:01:35,009
bits of things at the asf as well

00:01:32,450 --> 00:01:39,090
infrastructure security few bits of

00:01:35,009 --> 00:01:40,860
Commons and VMware my day job I do

00:01:39,090 --> 00:01:43,710
actually get to spend most of my time as

00:01:40,860 --> 00:01:45,780
I said working on tomcat few other bits

00:01:43,710 --> 00:01:48,149
and pieces I do they're a really Tomcat

00:01:45,780 --> 00:01:50,640
related and it's taking Tomcat and then

00:01:48,149 --> 00:01:54,049
feeding it into TC server which is

00:01:50,640 --> 00:01:56,130
VMware's product built on top of tom cat

00:01:54,049 --> 00:01:58,259
i'll also have to do a little bit of

00:01:56,130 --> 00:02:00,119
customer support there again that's

00:01:58,259 --> 00:02:01,920
around tom cat and TC server so i do

00:02:00,119 --> 00:02:07,729
spend most of my time working as i say

00:02:01,920 --> 00:02:11,400
on tomcat so java ee 7 the specs are jus

00:02:07,729 --> 00:02:12,640
spring so that's a slightly movable

00:02:11,400 --> 00:02:14,290
feast but one would

00:02:12,640 --> 00:02:17,650
it was going to be in the next few

00:02:14,290 --> 00:02:20,080
months and as far as Tomcat 8 is

00:02:17,650 --> 00:02:22,420
concerned there are four specifications

00:02:20,080 --> 00:02:26,680
that we're interested in and this is a

00:02:22,420 --> 00:02:29,230
change from tom cat 7 in tomcat 7 it was

00:02:26,680 --> 00:02:31,720
just servlet the JSP and the expression

00:02:29,230 --> 00:02:34,270
language specifications in tomcat a

00:02:31,720 --> 00:02:37,420
we're adding a new specification the

00:02:34,270 --> 00:02:39,040
WebSocket spec now tom cat 7 buzz

00:02:37,420 --> 00:02:41,080
support WebSockets but it does it

00:02:39,040 --> 00:02:42,520
through its own API so in Tomcat 8 we're

00:02:41,080 --> 00:02:46,420
going to be supporting this standard

00:02:42,520 --> 00:02:49,239
java api for web sockets there's not

00:02:46,420 --> 00:02:52,390
really a huge amount of demand for any

00:02:49,239 --> 00:02:56,200
other of the Java EE specifications in

00:02:52,390 --> 00:02:58,750
tomcat various other specifications get

00:02:56,200 --> 00:03:01,630
mentioned now and again all of them are

00:02:58,750 --> 00:03:03,790
available via other libraries that you

00:03:01,630 --> 00:03:05,680
can add to tomcat if you want if you

00:03:03,790 --> 00:03:07,720
want to full web container then you can

00:03:05,680 --> 00:03:09,700
use apache Tommy if you want to fool

00:03:07,720 --> 00:03:13,720
j2ee server then you've got Apache

00:03:09,700 --> 00:03:15,640
Geronimo and both of those not won't be

00:03:13,720 --> 00:03:17,620
a surprise are themselves built with

00:03:15,640 --> 00:03:20,290
tomcat providing the server at the GSB

00:03:17,620 --> 00:03:22,660
and the expression language now one of

00:03:20,290 --> 00:03:25,380
the things that's come up a couple of

00:03:22,660 --> 00:03:29,110
times in the last year is the Java

00:03:25,380 --> 00:03:31,660
authentication SBI for containers but if

00:03:29,110 --> 00:03:33,190
truth be told it's been mentioned more

00:03:31,660 --> 00:03:35,860
often by people writing the

00:03:33,190 --> 00:03:39,790
specification then it has by people that

00:03:35,860 --> 00:03:43,000
want to use it so on that basis we

00:03:39,790 --> 00:03:45,430
probably won't provide support for it if

00:03:43,000 --> 00:03:47,380
that picture changes if we have a large

00:03:45,430 --> 00:03:49,329
number of users saying actually that

00:03:47,380 --> 00:03:51,459
have been really useful if that was in

00:03:49,329 --> 00:03:52,769
top cap please please please please will

00:03:51,459 --> 00:03:55,209
you do it much like they did for

00:03:52,769 --> 00:03:56,799
WebSocket where there was a real ground

00:03:55,209 --> 00:04:01,090
swell of users saying yes we want

00:03:56,799 --> 00:04:02,890
WebSocket in tomcat then yes jazz pick

00:04:01,090 --> 00:04:06,130
could be added to tomcat fairly easily

00:04:02,890 --> 00:04:08,320
the fact that apache Tommy and Geronimo

00:04:06,130 --> 00:04:10,810
have already implemented it means that

00:04:08,320 --> 00:04:14,530
it's not quite but near enough to copy

00:04:10,810 --> 00:04:16,780
paste done thank you very much so it's

00:04:14,530 --> 00:04:19,090
doable but there needs to be a demand

00:04:16,780 --> 00:04:22,330
and that really goes for any of the

00:04:19,090 --> 00:04:24,849
other Java EE specifications the reason

00:04:22,330 --> 00:04:25,760
that Tomcat isn't doesn't support the

00:04:24,849 --> 00:04:27,640
web profile

00:04:25,760 --> 00:04:30,320
is that there wasn't a ground swell of

00:04:27,640 --> 00:04:32,030
demand for that from the user base so

00:04:30,320 --> 00:04:33,650
the Tomcat community will respond to

00:04:32,030 --> 00:04:35,960
what the users want and at the minute

00:04:33,650 --> 00:04:38,510
that servlet JSP expression language and

00:04:35,960 --> 00:04:42,080
web socket so let's look at each of

00:04:38,510 --> 00:04:45,680
those in turn first of all servlet 3.1

00:04:42,080 --> 00:04:47,540
I'm a member of the servlet 3.1 expert

00:04:45,680 --> 00:04:49,550
group this is my first time being a

00:04:47,540 --> 00:04:53,360
member of the expert group this way

00:04:49,550 --> 00:04:57,680
around I'm actually down as officially a

00:04:53,360 --> 00:04:59,330
representative of VMware Apache itself

00:04:57,680 --> 00:05:01,520
doesn't have any representatives in the

00:04:59,330 --> 00:05:03,920
GSR anymore I wanted to be an individual

00:05:01,520 --> 00:05:05,780
representative but the VMware lawyers

00:05:03,920 --> 00:05:08,360
basically said we're not signing the

00:05:05,780 --> 00:05:10,040
piece of paper that the Oracle wants us

00:05:08,360 --> 00:05:11,870
to sign so you can be an individual

00:05:10,040 --> 00:05:15,080
member you'll have to be a member as

00:05:11,870 --> 00:05:18,080
vmware so fine you know price we have to

00:05:15,080 --> 00:05:21,470
pay sometimes I did make clear to them

00:05:18,080 --> 00:05:23,270
if VMware asked me to do anything that I

00:05:21,470 --> 00:05:25,250
didn't agree with I was going to start

00:05:23,270 --> 00:05:28,370
the email my employer has told me to say

00:05:25,250 --> 00:05:31,070
this I don't agree that hasn't happened

00:05:28,370 --> 00:05:33,140
at all they've let they've left me to

00:05:31,070 --> 00:05:36,560
get on and essentially represent Tomcats

00:05:33,140 --> 00:05:38,210
interests to the expo area so the latest

00:05:36,560 --> 00:05:42,320
draft that's publicly available for

00:05:38,210 --> 00:05:45,140
server 3.1 is January 2013 so it's a bit

00:05:42,320 --> 00:05:46,910
over a month old now and server 3.1 is

00:05:45,140 --> 00:05:50,930
looking at a number of new features

00:05:46,910 --> 00:05:53,990
first of all non-blocking i/o now this

00:05:50,930 --> 00:05:56,060
is potentially really interesting let's

00:05:53,990 --> 00:05:58,730
use server API to this point has been

00:05:56,060 --> 00:06:00,590
completely blocking in terms of i/o now

00:05:58,730 --> 00:06:02,870
that a non-blocking i/o has been

00:06:00,590 --> 00:06:06,080
introduced it's been introduced as an

00:06:02,870 --> 00:06:08,090
addition to the server input stream and

00:06:06,080 --> 00:06:10,070
servlet output stream so it's a little

00:06:08,090 --> 00:06:12,080
bit different to what you might be used

00:06:10,070 --> 00:06:14,450
to and you do not have access to the

00:06:12,080 --> 00:06:16,370
underlying socket that means you still

00:06:14,450 --> 00:06:17,960
need a slight change of mindset about

00:06:16,370 --> 00:06:19,820
how you're actually using it but

00:06:17,960 --> 00:06:22,730
fundamentally you can do everything that

00:06:19,820 --> 00:06:25,640
you'd want to be able to do that

00:06:22,730 --> 00:06:28,730
non-blocking i/o itself supports HTTP

00:06:25,640 --> 00:06:30,770
upgrade that is primarily there as a

00:06:28,730 --> 00:06:32,780
hook for the WebSocket specification to

00:06:30,770 --> 00:06:35,240
look into but potentially any other

00:06:32,780 --> 00:06:36,860
protocol that you can actually use HTTP

00:06:35,240 --> 00:06:38,940
upgrade with you could then write

00:06:36,860 --> 00:06:43,740
something to sit on top of sir

00:06:38,940 --> 00:06:45,750
3.1 the other small change in terms of

00:06:43,740 --> 00:06:48,810
functionality is the ability to change

00:06:45,750 --> 00:06:50,190
session ID on authentication and it's a

00:06:48,810 --> 00:06:53,190
little thing but it's there to prevent

00:06:50,190 --> 00:06:54,390
prevent session fixation attacks and the

00:06:53,190 --> 00:06:56,580
fact that you can they do it through the

00:06:54,390 --> 00:06:58,860
API means that security frameworks that

00:06:56,580 --> 00:07:00,180
sit on top of server containers can now

00:06:58,860 --> 00:07:02,220
trigger that session change without

00:07:00,180 --> 00:07:03,720
having to do some of the truly horrible

00:07:02,220 --> 00:07:07,050
hacks that they are having to do in the

00:07:03,720 --> 00:07:08,550
past to achieve the same beyond that

00:07:07,050 --> 00:07:10,830
there's a lot of clarification of

00:07:08,550 --> 00:07:13,200
ambiguities quite a few typos that have

00:07:10,830 --> 00:07:16,050
been fixed and generally one of the

00:07:13,200 --> 00:07:18,210
things I've been trying to do is if I

00:07:16,050 --> 00:07:20,220
look back over the last few years there

00:07:18,210 --> 00:07:23,400
are numerous Tomcat bug reports they've

00:07:20,220 --> 00:07:26,010
ended with yes I know the servlet spec

00:07:23,400 --> 00:07:28,910
is ambiguous but the expert group what

00:07:26,010 --> 00:07:30,840
they meant when they to write was this

00:07:28,910 --> 00:07:32,610
therefore that's the that's the

00:07:30,840 --> 00:07:34,530
functionality that Tomcats implemented

00:07:32,610 --> 00:07:36,780
which try to get those clarifications

00:07:34,530 --> 00:07:40,830
back into the spec so it is then more

00:07:36,780 --> 00:07:43,340
obvious to users moving forward there's

00:07:40,830 --> 00:07:46,710
a couple of things that are TVD

00:07:43,340 --> 00:07:51,240
primarily this is protection for

00:07:46,710 --> 00:07:53,430
uncovered HTTP methods there's a yeah

00:07:51,240 --> 00:07:56,100
let's call it a feature of early

00:07:53,430 --> 00:07:58,110
versions of the servlet spec where if

00:07:56,100 --> 00:08:02,370
you created a security constraint that

00:07:58,110 --> 00:08:04,350
said this URL with this HTTP method is

00:08:02,370 --> 00:08:07,860
only accessible by users in this role

00:08:04,350 --> 00:08:11,070
that was fine that all worked but a

00:08:07,860 --> 00:08:14,100
consequence of that was that that same

00:08:11,070 --> 00:08:17,790
URL with any other HTTP method you care

00:08:14,100 --> 00:08:19,890
to mention is open to everybody and not

00:08:17,790 --> 00:08:22,800
everybody realized that when they were

00:08:19,890 --> 00:08:24,360
writing their security constraints and

00:08:22,800 --> 00:08:26,580
if they did realize it they probably

00:08:24,360 --> 00:08:29,520
forgot that there's actually nothing

00:08:26,580 --> 00:08:32,270
stopping a client sending any HTTP

00:08:29,520 --> 00:08:36,450
method name they like whether it's in

00:08:32,270 --> 00:08:40,800
RFC 2616 or not and a servlet will

00:08:36,450 --> 00:08:42,510
respond to it by default so well sorry

00:08:40,800 --> 00:08:45,200
JSP will respond to a by default a

00:08:42,510 --> 00:08:47,550
servlet won't but a JSP will so that

00:08:45,200 --> 00:08:49,990
potentially creates security holes and

00:08:47,550 --> 00:08:51,760
there have been various

00:08:49,990 --> 00:08:54,310
discussions on the expert group that how

00:08:51,760 --> 00:08:56,200
this should be handled I won't bore you

00:08:54,310 --> 00:08:58,660
with the boy with all of that discussion

00:08:56,200 --> 00:08:59,860
suffice to say i think the solution

00:08:58,660 --> 00:09:02,050
that's going to be adopted isn't the

00:08:59,860 --> 00:09:04,690
right one I think I've lost that

00:09:02,050 --> 00:09:06,370
argument so what's probably going to

00:09:04,690 --> 00:09:08,260
happen it's not certain yet haven't seen

00:09:06,370 --> 00:09:09,790
it in a draft is that a new

00:09:08,260 --> 00:09:12,670
configuration option will be added to

00:09:09,790 --> 00:09:15,520
whet web.xml that basically says if

00:09:12,670 --> 00:09:17,920
anywhere in web.xml there's a security

00:09:15,520 --> 00:09:22,660
constraint that says this URL this

00:09:17,920 --> 00:09:24,550
method this role all other methods will

00:09:22,660 --> 00:09:27,370
be automatically denied unless

00:09:24,550 --> 00:09:29,589
explicitly allowed elsewhere and that

00:09:27,370 --> 00:09:31,720
will then that will certainly block the

00:09:29,589 --> 00:09:33,910
security hole the issues I have with it

00:09:31,720 --> 00:09:36,339
is you don't actually know you've got a

00:09:33,910 --> 00:09:37,779
security hole unless something tells you

00:09:36,339 --> 00:09:38,920
so you need logging or something to say

00:09:37,779 --> 00:09:41,110
hang on a minute I've just passed

00:09:38,920 --> 00:09:42,790
web.xml and it looks like you've got a

00:09:41,110 --> 00:09:44,890
security hole here you might want to do

00:09:42,790 --> 00:09:46,330
something and if we're going to tell the

00:09:44,890 --> 00:09:47,680
users to do something then we may as

00:09:46,330 --> 00:09:49,300
well tell them to use the features that

00:09:47,680 --> 00:09:50,709
already exist in servlet three to plug

00:09:49,300 --> 00:09:53,080
the hole rather than yet another feature

00:09:50,709 --> 00:09:56,680
but I could say I've lost that argument

00:09:53,080 --> 00:09:59,410
I think one feature that's been dropped

00:09:56,680 --> 00:10:02,470
is the idea of overlays and what what

00:09:59,410 --> 00:10:05,050
was was behind this was you could take

00:10:02,470 --> 00:10:07,089
effect via template war file so right

00:10:05,050 --> 00:10:08,470
here's my template add these bits over

00:10:07,089 --> 00:10:11,350
here and turn it into a web app and

00:10:08,470 --> 00:10:13,420
deploy it and the idea was it was really

00:10:11,350 --> 00:10:15,610
around multi-tenancy so you could have

00:10:13,420 --> 00:10:18,270
one basic web app that you could then

00:10:15,610 --> 00:10:20,020
customize for different customers

00:10:18,270 --> 00:10:21,880
unfortunately this was actually the

00:10:20,020 --> 00:10:25,140
first bit of implementation I did and

00:10:21,880 --> 00:10:29,260
just as I got it finished it got dropped

00:10:25,140 --> 00:10:31,180
so support for it is there in Tomcat 8

00:10:29,260 --> 00:10:33,940
as sort of a container specific feature

00:10:31,180 --> 00:10:37,630
but in terms of the Civil API then that

00:10:33,940 --> 00:10:40,140
functionality is not there so that's

00:10:37,630 --> 00:10:44,070
really what's happening in server 3.1

00:10:40,140 --> 00:10:47,560
JSP 2.3 there is no JSP expert group

00:10:44,070 --> 00:10:50,620
there will be a maintenance release much

00:10:47,560 --> 00:10:53,410
like GSP 2.2 is going to be fairly late

00:10:50,620 --> 00:10:56,320
I suspect it will be at the same time as

00:10:53,410 --> 00:10:57,940
the public releases of all the other

00:10:56,320 --> 00:11:00,279
specs are made then they'll be a

00:10:57,940 --> 00:11:02,620
maintenance release made of JSP there's

00:11:00,279 --> 00:11:03,660
essentially not that much to do JSP is

00:11:02,620 --> 00:11:05,520
finished there's

00:11:03,660 --> 00:11:08,070
not a great deal of functionality that

00:11:05,520 --> 00:11:10,230
needs to be added to it if any there

00:11:08,070 --> 00:11:11,700
will be a few updates in light of the

00:11:10,230 --> 00:11:14,540
changes to the expression language I'm

00:11:11,700 --> 00:11:17,940
going to talk about in a few moments and

00:11:14,540 --> 00:11:19,350
one of the potential change is that the

00:11:17,940 --> 00:11:21,120
person doing the maintenance releases

00:11:19,350 --> 00:11:22,920
agreed is a good idea but again until I

00:11:21,120 --> 00:11:25,230
actually see it in the spec we won't

00:11:22,920 --> 00:11:27,900
know for certain that it's in is that

00:11:25,230 --> 00:11:30,630
idea of GSB is responding to all HTTP

00:11:27,900 --> 00:11:33,270
methods regardless because it does have

00:11:30,630 --> 00:11:35,730
some potential security implications is

00:11:33,270 --> 00:11:37,890
to provide a way of limiting it or

00:11:35,730 --> 00:11:39,680
limiting them by default I think what

00:11:37,890 --> 00:11:42,390
we're going to end up with is a

00:11:39,680 --> 00:11:47,070
specification recommendation to limit

00:11:42,390 --> 00:11:49,620
GSP's to head to get some posts and with

00:11:47,070 --> 00:11:55,140
some contain a specific configuration to

00:11:49,620 --> 00:11:58,770
expand that list if you want moving on

00:11:55,140 --> 00:12:00,360
to the expression language then this is

00:11:58,770 --> 00:12:03,090
expression language three-point oh and

00:12:00,360 --> 00:12:05,280
it's a new major version the last one

00:12:03,090 --> 00:12:08,370
was 2.2 and it is significantly

00:12:05,280 --> 00:12:10,350
different as I say I am part of the

00:12:08,370 --> 00:12:12,480
expert group but i must confess i

00:12:10,350 --> 00:12:14,310
haven't been involved in this expert

00:12:12,480 --> 00:12:16,710
group as much as i have been in the

00:12:14,310 --> 00:12:18,930
others this this really the entire

00:12:16,710 --> 00:12:20,670
expert group for expression language has

00:12:18,930 --> 00:12:23,160
been like that none of the experts have

00:12:20,670 --> 00:12:27,780
been that involved it's really all been

00:12:23,160 --> 00:12:30,200
driven by the specification lead as I

00:12:27,780 --> 00:12:34,500
said there are significant changes it's

00:12:30,200 --> 00:12:38,100
getting rather closer to Java than it is

00:12:34,500 --> 00:12:40,110
at the minute and my sort of underlying

00:12:38,100 --> 00:12:44,790
concern but don't really have sort of

00:12:40,110 --> 00:12:46,560
anything concrete to hang it on is is it

00:12:44,790 --> 00:12:48,060
getting too close to Java is it trying

00:12:46,560 --> 00:12:54,570
to do too much is it getting too

00:12:48,060 --> 00:12:55,680
complicated I'm uncomfortable but I said

00:12:54,570 --> 00:12:57,570
I don't have anything specific that

00:12:55,680 --> 00:13:01,170
that's a problem because it's just a

00:12:57,570 --> 00:13:03,120
general level of discomfort so the sorts

00:13:01,170 --> 00:13:05,790
of things that being added access to

00:13:03,120 --> 00:13:07,410
static methods and field and lambda

00:13:05,790 --> 00:13:09,000
expressions that's one big piece of

00:13:07,410 --> 00:13:12,720
functionality you see a couple of

00:13:09,000 --> 00:13:15,810
examples up on the screen there and

00:13:12,720 --> 00:13:18,389
and collection operators now originally

00:13:15,810 --> 00:13:20,639
this was going to be aligned with the

00:13:18,389 --> 00:13:24,600
link you so it would use similar sort of

00:13:20,639 --> 00:13:27,810
syntax a number of people did raise some

00:13:24,600 --> 00:13:29,970
concerns in that wall that's great but

00:13:27,810 --> 00:13:30,959
and the but being that Java right was

00:13:29,970 --> 00:13:35,879
probably going to do something different

00:13:30,959 --> 00:13:37,680
and that went back and forth of it hey

00:13:35,879 --> 00:13:39,449
there was a change a couple of months

00:13:37,680 --> 00:13:41,339
ago that basically all of the link you

00:13:39,449 --> 00:13:43,800
stuff was dropped and alignment with

00:13:41,339 --> 00:13:45,420
Java right was brought in fortunately I

00:13:43,800 --> 00:13:47,279
hadn't implemented anything this time

00:13:45,420 --> 00:13:51,720
because that would have been really

00:13:47,279 --> 00:13:55,110
annoying so there's a there's a fair

00:13:51,720 --> 00:13:56,970
amount of work to be done on that and as

00:13:55,110 --> 00:13:58,769
we'll come onto in time scales in it not

00:13:56,970 --> 00:14:01,920
a huge amount of progress in tomcat and

00:13:58,769 --> 00:14:05,189
actually implementing it yet a couple of

00:14:01,920 --> 00:14:06,839
other operators string concatenation the

00:14:05,189 --> 00:14:08,399
list of operators that are valid for

00:14:06,839 --> 00:14:11,100
string concatenation has been getting

00:14:08,399 --> 00:14:12,870
shorter and shorter and shorter I think

00:14:11,100 --> 00:14:14,100
we're down to just one Nadeau to various

00:14:12,870 --> 00:14:15,689
issues about oh well that won't be

00:14:14,100 --> 00:14:17,730
backwards compatible with that and that

00:14:15,689 --> 00:14:19,829
might be confusing because of that so

00:14:17,730 --> 00:14:21,779
plus equals is how I think string

00:14:19,829 --> 00:14:23,550
concatenation is going to be done it's

00:14:21,779 --> 00:14:24,990
added the assignment operator the

00:14:23,550 --> 00:14:26,370
semicolons who essentially you can have

00:14:24,990 --> 00:14:28,050
a statement that doesn't get displayed

00:14:26,370 --> 00:14:31,230
in fact he gets processing and thrown

00:14:28,050 --> 00:14:32,430
away and the ability to access classes

00:14:31,230 --> 00:14:33,959
directly which of course you need in

00:14:32,430 --> 00:14:40,889
order to be able to access static

00:14:33,959 --> 00:14:43,949
methods and static fields the final Java

00:14:40,889 --> 00:14:46,829
specification from Jerry 713 Tomcat 8 is

00:14:43,949 --> 00:14:49,949
WebSocket and again i'm part of the

00:14:46,829 --> 00:14:51,389
expert group here tomcat 7 as i said

00:14:49,949 --> 00:14:55,110
already does support it but through its

00:14:51,389 --> 00:14:56,730
own api we haven't yet decided not to

00:14:55,110 --> 00:14:59,040
say we I mean this of the Tomcat

00:14:56,730 --> 00:15:02,220
developer community as a whole what's

00:14:59,040 --> 00:15:04,680
going to happen to the Tomcat specific

00:15:02,220 --> 00:15:07,559
web socket API that exists in tomcat 7

00:15:04,680 --> 00:15:10,769
at the minute currently it's in tomcat 7

00:15:07,559 --> 00:15:14,189
and it's in the Tomcat 8 codebase what I

00:15:10,769 --> 00:15:16,709
think is going to happen and if you're

00:15:14,189 --> 00:15:18,689
in the apache weight or earlier and this

00:15:16,709 --> 00:15:20,040
this is just me thinking it's not a

00:15:18,689 --> 00:15:21,809
decision because it didn't happen on the

00:15:20,040 --> 00:15:23,180
mailing list but what I think is going

00:15:21,809 --> 00:15:24,680
to happen is

00:15:23,180 --> 00:15:27,020
the Tomcat specific support will be

00:15:24,680 --> 00:15:29,630
removed from Tomcat 8 Tomcat 8 and just

00:15:27,020 --> 00:15:31,280
support the new AP is the new api's will

00:15:29,630 --> 00:15:33,680
be back ported to tomcat serve and all

00:15:31,280 --> 00:15:35,780
of the hooks are there so that that's

00:15:33,680 --> 00:15:37,760
not a problem and then the Tomcat

00:15:35,780 --> 00:15:40,340
specific API will be deprecated in

00:15:37,760 --> 00:15:42,830
tomcat 7 so there'll be one standard API

00:15:40,340 --> 00:15:44,630
for WebSocket moving forward but those

00:15:42,830 --> 00:15:46,760
folks are using web socket on tomcat

00:15:44,630 --> 00:15:48,740
seven with the Tomcat specific API at

00:15:46,760 --> 00:15:50,840
the minute they'll be still be able to

00:15:48,740 --> 00:15:53,210
carry on doing that for the life of

00:15:50,840 --> 00:15:54,800
Tomcat seven anyway it's actually not

00:15:53,210 --> 00:15:57,260
that bad migrating one from the other

00:15:54,800 --> 00:15:59,750
the Tomcat API is a lot simpler so

00:15:57,260 --> 00:16:01,010
moving to the Java API and isn't that

00:15:59,750 --> 00:16:03,350
difficult I did it for the Tomcat

00:16:01,010 --> 00:16:05,270
examples in about 10 minutes each okay

00:16:03,350 --> 00:16:08,620
they're fairly simple examples but it's

00:16:05,270 --> 00:16:12,230
a it's a relatively simple process

00:16:08,620 --> 00:16:14,270
WebSocket 10 provides an API for both

00:16:12,230 --> 00:16:18,710
clients and servers and tomcat will

00:16:14,270 --> 00:16:20,420
support both in previous incarnations of

00:16:18,710 --> 00:16:21,710
this presentation I've said well we'll

00:16:20,420 --> 00:16:23,510
definitely support the server side

00:16:21,710 --> 00:16:26,090
they're not so sure about the client

00:16:23,510 --> 00:16:28,130
side but the way the specifications

00:16:26,090 --> 00:16:29,840
being constructed you pretty much have

00:16:28,130 --> 00:16:31,490
to support 9 you don't really have to

00:16:29,840 --> 00:16:33,200
write ninety-nine point nine percent of

00:16:31,490 --> 00:16:35,150
the client implementation in order to do

00:16:33,200 --> 00:16:36,470
the server one so we may as well provide

00:16:35,150 --> 00:16:38,930
that last little bit and provide the

00:16:36,470 --> 00:16:42,080
client implementation as well we are

00:16:38,930 --> 00:16:44,360
aiming to do this in a container neutral

00:16:42,080 --> 00:16:46,670
way so you should be able to take these

00:16:44,360 --> 00:16:48,440
WebSocket jars and drop them in any

00:16:46,670 --> 00:16:53,960
server at three point one container and

00:16:48,440 --> 00:16:56,210
get WebSocket support that is that is

00:16:53,960 --> 00:16:58,940
currently the case we don't use any

00:16:56,210 --> 00:17:01,460
tomcat specific api's and i haven't yet

00:16:58,940 --> 00:17:03,140
seen anything in the stuff that we

00:17:01,460 --> 00:17:04,790
haven't implemented that suggests that

00:17:03,140 --> 00:17:06,260
we might need to go down that route so

00:17:04,790 --> 00:17:07,520
in terms of having a portable

00:17:06,260 --> 00:17:12,830
implementation it looks like that's

00:17:07,520 --> 00:17:16,430
going to be possible features that

00:17:12,830 --> 00:17:17,990
WebSocket 10 ads on top of Tomcats

00:17:16,430 --> 00:17:20,150
simple implementation first one is

00:17:17,990 --> 00:17:22,700
encoding and decoding and there's been

00:17:20,150 --> 00:17:25,010
lots of debate about this on the expert

00:17:22,700 --> 00:17:26,600
group mailing lists and primarily it's

00:17:25,010 --> 00:17:28,340
providing a mechanism that lets the

00:17:26,600 --> 00:17:31,070
developer saying hey here's this object

00:17:28,340 --> 00:17:33,620
I don't care how you do it just use web

00:17:31,070 --> 00:17:35,690
socket and get it from this this server

00:17:33,620 --> 00:17:40,879
to that client or vice versa

00:17:35,690 --> 00:17:42,860
and how that's implemented and how

00:17:40,879 --> 00:17:44,509
flexible that is and how many different

00:17:42,860 --> 00:17:46,309
types of objects you can support that

00:17:44,509 --> 00:17:48,559
there's been quite a lot of debate on

00:17:46,309 --> 00:17:50,960
that that I think has now come to a

00:17:48,559 --> 00:17:52,220
sensible conclusion and it's at a point

00:17:50,960 --> 00:17:54,350
where it can be implemented and I've

00:17:52,220 --> 00:17:57,110
done some of it for tomcat but not all

00:17:54,350 --> 00:17:59,629
of it and their support for annotations

00:17:57,110 --> 00:18:01,340
so you can define a WebSocket endpoint

00:17:59,629 --> 00:18:03,440
just with an annotation so you can take

00:18:01,340 --> 00:18:05,629
an ordinary poggio and you can turn it

00:18:03,440 --> 00:18:08,480
into a WebSocket endpoint very very

00:18:05,629 --> 00:18:10,370
quickly there are some examples of that

00:18:08,480 --> 00:18:11,870
in the Tomcat 8 code base at the minute

00:18:10,370 --> 00:18:13,820
so you can see how the Tom kite eight

00:18:11,870 --> 00:18:15,769
examples have been put together and they

00:18:13,820 --> 00:18:19,429
all use poggio so it's really nice and

00:18:15,769 --> 00:18:21,710
simple one of the big differences is

00:18:19,429 --> 00:18:24,679
that Tomcats WebSocket implementation

00:18:21,710 --> 00:18:26,629
that's in seven blocks within a frame so

00:18:24,679 --> 00:18:28,159
once you start reading a message the

00:18:26,629 --> 00:18:30,139
process of reading all of that message

00:18:28,159 --> 00:18:31,850
is a blocking read once you start

00:18:30,139 --> 00:18:34,460
writing a message it's a blocking right

00:18:31,850 --> 00:18:37,460
and hands up I did that because it was

00:18:34,460 --> 00:18:39,620
quicker and it was simpler and putting

00:18:37,460 --> 00:18:42,320
non-blocking in there was going to take

00:18:39,620 --> 00:18:43,610
me longer and nobody made a huge amount

00:18:42,320 --> 00:18:48,049
of fuss at the time that non-blocking

00:18:43,610 --> 00:18:49,549
wasn't available so WebSocket 10 does

00:18:48,049 --> 00:18:51,860
provide non-blocking reads and writes

00:18:49,549 --> 00:18:55,039
you've actually got a choice you can use

00:18:51,860 --> 00:18:56,960
blocking or non blocking it's entirely

00:18:55,039 --> 00:18:59,029
up to you both are available that

00:18:56,960 --> 00:19:00,919
actually creates some interesting fun

00:18:59,029 --> 00:19:03,019
and games under the bonnet because you

00:19:00,919 --> 00:19:05,419
have to do all of those reads and writes

00:19:03,019 --> 00:19:08,720
through the non-blocking api provided

00:19:05,419 --> 00:19:10,399
via server 3.1 and getting blocking

00:19:08,720 --> 00:19:12,080
writes and reads through that is as i

00:19:10,399 --> 00:19:13,429
say a little entertaining but as

00:19:12,080 --> 00:19:15,259
developers you won't need to worry about

00:19:13,429 --> 00:19:16,940
that if any of you are interested in

00:19:15,259 --> 00:19:18,799
contributing to tomcat and in the

00:19:16,940 --> 00:19:23,960
WebSocket area then yes you will need to

00:19:18,799 --> 00:19:25,970
have a quick look at that I said that

00:19:23,960 --> 00:19:29,000
WebSocket 10 was non blocking it does

00:19:25,970 --> 00:19:32,629
actually work with the blocking Java Rio

00:19:29,000 --> 00:19:34,820
connector as well it's obviously not

00:19:32,629 --> 00:19:37,309
really non-blocking essentially every

00:19:34,820 --> 00:19:39,230
time you do read and write it does it

00:19:37,309 --> 00:19:40,759
blocking and then just pretends that oh

00:19:39,230 --> 00:19:43,000
no the rights finished all the reads

00:19:40,759 --> 00:19:46,059
finished and then triggers whatever

00:19:43,000 --> 00:19:47,690
event whether it's a future or the

00:19:46,059 --> 00:19:49,519
completion handler

00:19:47,690 --> 00:19:53,029
or that particular allegedly

00:19:49,519 --> 00:19:57,470
non-blocking event but non-blocking does

00:19:53,029 --> 00:20:01,129
fundamentally change the API so it's if

00:19:57,470 --> 00:20:02,750
you're used to using the tomcat 71 and

00:20:01,129 --> 00:20:04,970
you want to go to non-blocking then you

00:20:02,750 --> 00:20:06,139
if you've got a large application and

00:20:04,970 --> 00:20:08,059
there's like to be a reasonable amount

00:20:06,139 --> 00:20:10,730
of work to be done to take advantage of

00:20:08,059 --> 00:20:13,100
those non-blocking features but really

00:20:10,730 --> 00:20:14,450
if you want scalability and you really

00:20:13,100 --> 00:20:17,049
want to scale your application then

00:20:14,450 --> 00:20:21,409
you're going to need to use non-blocking

00:20:17,049 --> 00:20:23,659
so that's the java ee 7 specific stuff

00:20:21,409 --> 00:20:28,519
what i'm going to do now is move on and

00:20:23,659 --> 00:20:32,419
talk about a tomcat changes and the

00:20:28,519 --> 00:20:34,879
first one is resources so under the

00:20:32,419 --> 00:20:37,610
bonnet in tomcat there are lots of

00:20:34,879 --> 00:20:39,289
different ways that you as a system

00:20:37,610 --> 00:20:41,779
administrator or as a developing state

00:20:39,289 --> 00:20:44,090
yet and now i've got this war file but

00:20:41,779 --> 00:20:46,190
i've got this extra stuff that i want to

00:20:44,090 --> 00:20:49,009
include within my application it might

00:20:46,190 --> 00:20:51,019
be some static files some images that

00:20:49,009 --> 00:20:52,879
you're pulling in Viron alias and it

00:20:51,019 --> 00:20:56,389
might be a bunch of JavaScript you're

00:20:52,879 --> 00:20:57,679
pulling in the same way it might be some

00:20:56,389 --> 00:20:59,059
classes that are in a different

00:20:57,679 --> 00:21:00,500
directory structure that you're pulling

00:20:59,059 --> 00:21:03,529
in via the virtual web application

00:21:00,500 --> 00:21:05,629
loader you might be adding a repository

00:21:03,529 --> 00:21:08,330
directly to the web application class

00:21:05,629 --> 00:21:10,879
loader or you could just be taking

00:21:08,330 --> 00:21:13,519
advantage of the servlet 3 resource

00:21:10,879 --> 00:21:16,639
Joffrey feature now all of those things

00:21:13,519 --> 00:21:19,159
do fundamentally the same thing which is

00:21:16,639 --> 00:21:21,860
take a resource and make it look as if

00:21:19,159 --> 00:21:23,960
it's part of the war file unfortunately

00:21:21,860 --> 00:21:28,250
every single one of those features is

00:21:23,960 --> 00:21:32,320
implemented differently it is incredibly

00:21:28,250 --> 00:21:35,629
fragile it's very very prone to breakage

00:21:32,320 --> 00:21:37,549
as we discovered the hard way when the

00:21:35,629 --> 00:21:40,070
virtual dir context and the virtual web

00:21:37,549 --> 00:21:42,320
app loader were added and I think it

00:21:40,070 --> 00:21:45,710
took us two or three releases to get all

00:21:42,320 --> 00:21:48,470
the various regressions fixed and trying

00:21:45,710 --> 00:21:52,370
to do server 3.1 overlays on top of that

00:21:48,470 --> 00:21:54,559
was not going to be pretty so what we

00:21:52,370 --> 00:21:57,200
did was essentially all of those things

00:21:54,559 --> 00:21:59,539
listed under resources we threw out the

00:21:57,200 --> 00:22:01,190
implementation of that and we've put in

00:21:59,539 --> 00:22:03,130
a new resources implementing

00:22:01,190 --> 00:22:07,100
that's common to all of those features

00:22:03,130 --> 00:22:09,140
or specific we've actually removed all

00:22:07,100 --> 00:22:10,940
of those features and provided

00:22:09,140 --> 00:22:12,740
alternative ways to do the same things

00:22:10,940 --> 00:22:15,080
through the new resources implementation

00:22:12,740 --> 00:22:19,550
so it's new configuration new attributes

00:22:15,080 --> 00:22:21,500
in the context xml file the idea behind

00:22:19,550 --> 00:22:23,450
that was it would then be very simple to

00:22:21,500 --> 00:22:25,730
implement overlays on top of unfortunate

00:22:23,450 --> 00:22:27,770
assay that overlays got removed but this

00:22:25,730 --> 00:22:30,800
new resources implementation is there

00:22:27,770 --> 00:22:33,200
it's available and it's now a consistent

00:22:30,800 --> 00:22:34,820
way for you to put resources into the

00:22:33,200 --> 00:22:37,700
application and it also lets you answer

00:22:34,820 --> 00:22:39,200
questions that suppose you would have to

00:22:37,700 --> 00:22:40,460
have gotten look looked at the code once

00:22:39,200 --> 00:22:43,100
before so example if you're using the

00:22:40,460 --> 00:22:46,520
resources if you've got a virtual dir

00:22:43,100 --> 00:22:48,980
context and some aliases and the servlet

00:22:46,520 --> 00:22:50,720
3 resource jar and they all contain the

00:22:48,980 --> 00:22:53,480
same resource and it's all mapped to the

00:22:50,720 --> 00:22:56,150
same URL if you request you that URL

00:22:53,480 --> 00:22:57,980
which one do you get and the shows the

00:22:56,150 --> 00:23:00,080
other I don't know I'd have to go and

00:22:57,980 --> 00:23:01,700
look at the code and to be honest the

00:23:00,080 --> 00:23:03,320
code is so complicated what I'd probably

00:23:01,700 --> 00:23:05,150
end up doing is actually writing a test

00:23:03,320 --> 00:23:06,860
case and trying it to see what I got and

00:23:05,150 --> 00:23:08,900
then trying to figure out why on earth

00:23:06,860 --> 00:23:11,630
he actually I got that particular

00:23:08,900 --> 00:23:13,040
resource but with the new resources

00:23:11,630 --> 00:23:15,290
implementation there is a very clear

00:23:13,040 --> 00:23:16,910
order of precedence so you could say

00:23:15,290 --> 00:23:20,240
right these get looked in first then

00:23:16,910 --> 00:23:22,220
this then this and that that sort of

00:23:20,240 --> 00:23:28,340
ambiguity about what takes precedence

00:23:22,220 --> 00:23:30,980
goes away another significant change is

00:23:28,340 --> 00:23:34,360
the non-blocking Java Rio connector is

00:23:30,980 --> 00:23:36,710
now the default connector for tomcat

00:23:34,360 --> 00:23:38,720
primary reason for doing that is in

00:23:36,710 --> 00:23:41,660
order to serve to support non-blocking

00:23:38,720 --> 00:23:44,290
i/o in servlet 3.1 you obviously have to

00:23:41,660 --> 00:23:46,970
have fundamentally a non-blocking i/o

00:23:44,290 --> 00:23:50,090
layer so the non-blocking connector is

00:23:46,970 --> 00:23:52,040
the default we've also added some

00:23:50,090 --> 00:23:55,040
diagnostic information in the manager

00:23:52,040 --> 00:23:56,810
that's mainly around ssl configuration

00:23:55,040 --> 00:23:58,640
there's no particular reason this

00:23:56,810 --> 00:24:00,140
couldn't be back ported to tomcat 7

00:23:58,640 --> 00:24:03,170
apart of the fact that nobody's got

00:24:00,140 --> 00:24:04,310
around to doing it yet I've got some

00:24:03,170 --> 00:24:06,650
ideas for adding some additional

00:24:04,310 --> 00:24:10,700
features to that it's actually a really

00:24:06,650 --> 00:24:12,210
simple sort of extension point if you as

00:24:10,700 --> 00:24:14,370
a user as tom cat

00:24:12,210 --> 00:24:16,680
one of the pieces of diagnostic

00:24:14,370 --> 00:24:18,360
information i really i would find really

00:24:16,680 --> 00:24:21,420
useful or i find myself looking at all

00:24:18,360 --> 00:24:22,860
the time if you've got a piece of

00:24:21,420 --> 00:24:24,480
information like that that you'd like to

00:24:22,860 --> 00:24:27,060
see in the manager it's not actually

00:24:24,480 --> 00:24:28,770
that difficult to add it have a look at

00:24:27,060 --> 00:24:30,810
what was done for the ssl ciphers stuff

00:24:28,770 --> 00:24:32,130
create a patch it's actually two

00:24:30,810 --> 00:24:33,870
bugzilla and one of the committee's will

00:24:32,130 --> 00:24:36,330
look look to adding it it's a it's a

00:24:33,870 --> 00:24:37,860
fairly simple way to contribute

00:24:36,330 --> 00:24:42,080
something that could be potentially very

00:24:37,860 --> 00:24:44,550
useful back to tomcat under the bonnet

00:24:42,080 --> 00:24:48,390
we've done quite a lot of cleanup in

00:24:44,550 --> 00:24:51,110
tomcat eight where we can we removed

00:24:48,390 --> 00:24:53,940
some duplicate duplicated functionality

00:24:51,110 --> 00:24:56,340
for example i think there was something

00:24:53,940 --> 00:24:58,860
like eight different places and eight

00:24:56,340 --> 00:25:00,480
different ways where we had code was

00:24:58,860 --> 00:25:03,450
trying to work out where on the file

00:25:00,480 --> 00:25:05,280
system and at base was for a particular

00:25:03,450 --> 00:25:08,670
tomcat instance so that's all been put

00:25:05,280 --> 00:25:13,980
into one common place there's been quite

00:25:08,670 --> 00:25:15,780
a few changes like that the manager the

00:25:13,980 --> 00:25:18,080
loaded and the resort the loader and the

00:25:15,780 --> 00:25:21,180
resources those are all things that are

00:25:18,080 --> 00:25:23,040
specific to a web application you don't

00:25:21,180 --> 00:25:24,840
have a session manager at a host level

00:25:23,040 --> 00:25:26,970
you have a session manager for a web

00:25:24,840 --> 00:25:28,590
application you don't have a resource

00:25:26,970 --> 00:25:30,990
loader at the highest level it's / wed a

00:25:28,590 --> 00:25:33,000
web application you don't actually have

00:25:30,990 --> 00:25:34,350
a class loader and you don't have

00:25:33,000 --> 00:25:37,410
resources all of those things are

00:25:34,350 --> 00:25:38,940
specific to a context i'm looking

00:25:37,410 --> 00:25:41,310
through the codebase it was obvious what

00:25:38,940 --> 00:25:42,780
would that because those elements had

00:25:41,310 --> 00:25:44,250
originally been made part of a container

00:25:42,780 --> 00:25:45,960
and a container is effectively the

00:25:44,250 --> 00:25:48,810
parent object of the context the host

00:25:45,960 --> 00:25:51,990
and the engine there are lots of you

00:25:48,810 --> 00:25:53,190
know fairly unpleasant casts to contact

00:25:51,990 --> 00:25:55,350
when they're whenever they are being

00:25:53,190 --> 00:25:57,000
used so we decided to bite the bullet up

00:25:55,350 --> 00:25:58,500
the only place they used on the contexts

00:25:57,000 --> 00:25:59,940
let's move them from the container to

00:25:58,500 --> 00:26:02,340
the contest let's clean the code up a

00:25:59,940 --> 00:26:04,320
bit and so we're able to clean things up

00:26:02,340 --> 00:26:06,510
get rid of a bunch of casts get rid of a

00:26:04,320 --> 00:26:08,880
bunch of potential problems and just

00:26:06,510 --> 00:26:10,230
tidy things up and it stops people being

00:26:08,880 --> 00:26:13,140
able to create configurations make

00:26:10,230 --> 00:26:15,150
absolutely no sense so you in tomcat 7

00:26:13,140 --> 00:26:16,800
you could quite happily add a session

00:26:15,150 --> 00:26:18,660
manager to a host and it would just

00:26:16,800 --> 00:26:21,870
appear and do anything but it would be

00:26:18,660 --> 00:26:23,310
there it would be quite happy and it

00:26:21,870 --> 00:26:24,780
would serve absolutely no purpose

00:26:23,310 --> 00:26:25,799
whatsoever apart from wasting your

00:26:24,780 --> 00:26:29,340
resources

00:26:25,799 --> 00:26:30,570
so all of those those they've been moved

00:26:29,340 --> 00:26:33,929
to the context and reduce that

00:26:30,570 --> 00:26:35,580
possibility we've also moved the mapper

00:26:33,929 --> 00:26:36,860
from the connector to the service near

00:26:35,580 --> 00:26:39,450
the mapper is one of those low

00:26:36,860 --> 00:26:40,769
relatively low level tomcat internal

00:26:39,450 --> 00:26:43,440
components but it's the component that

00:26:40,769 --> 00:26:45,299
says I've got this URL which hope well

00:26:43,440 --> 00:26:48,840
which engine which host which context is

00:26:45,299 --> 00:26:51,360
actually going to serve this request and

00:26:48,840 --> 00:26:54,059
what we had was we had one of these map

00:26:51,360 --> 00:26:56,159
objects on every single connector so if

00:26:54,059 --> 00:26:58,559
as is often the case you have an HTTP

00:26:56,159 --> 00:27:00,659
connector and HTTPS connector and an ajp

00:26:58,559 --> 00:27:02,850
connector we have three instances of the

00:27:00,659 --> 00:27:05,489
mapper all configured exactly the same

00:27:02,850 --> 00:27:07,590
way all three having to be updated when

00:27:05,489 --> 00:27:10,379
an application was deployed when an

00:27:07,590 --> 00:27:11,759
application was under ployed and it was

00:27:10,379 --> 00:27:14,039
just yeah totally unnecessary

00:27:11,759 --> 00:27:16,529
duplication so that's been moved up to

00:27:14,039 --> 00:27:18,749
the service so there's one mapper for

00:27:16,529 --> 00:27:20,279
the service and it just reduces the

00:27:18,749 --> 00:27:24,239
memory footprint a little bit and make

00:27:20,279 --> 00:27:26,909
some slightly cleaner code internally

00:27:24,239 --> 00:27:29,580
we've gone through and cleaned up ide

00:27:26,909 --> 00:27:32,129
warnings findbugs warnings javadoc

00:27:29,580 --> 00:27:34,350
warnings a limited set of check style

00:27:32,129 --> 00:27:37,470
warnings we certainly haven't done all

00:27:34,350 --> 00:27:39,539
of them when i switch to a new machine

00:27:37,470 --> 00:27:41,970
and i just configured turned on check

00:27:39,539 --> 00:27:44,100
style on the Tomcat 8 codebase there

00:27:41,970 --> 00:27:45,779
were in excess of about 100,000 check

00:27:44,100 --> 00:27:48,149
style warning so we haven't all of them

00:27:45,779 --> 00:27:49,559
but we have focused on a a subset that

00:27:48,149 --> 00:27:51,570
helps make the code a little bit cleaner

00:27:49,559 --> 00:27:53,309
and the aim there is to add a few more

00:27:51,570 --> 00:27:55,769
over time and will slowly work to

00:27:53,309 --> 00:27:58,590
getting a a cleaner codebase the idea

00:27:55,769 --> 00:28:00,330
behind all of that really is to make the

00:27:58,590 --> 00:28:02,070
code a little bit cleaner a little bit

00:28:00,330 --> 00:28:05,669
easier to maintain and then going

00:28:02,070 --> 00:28:07,889
through it we probably found a 2030 just

00:28:05,669 --> 00:28:09,600
little edge case bugs that users may or

00:28:07,889 --> 00:28:11,340
may not have come across that may or may

00:28:09,600 --> 00:28:13,820
not have caused anybody any problems but

00:28:11,340 --> 00:28:16,830
we found them we've cleaned them up and

00:28:13,820 --> 00:28:19,619
now it's a lot easier certainly if

00:28:16,830 --> 00:28:21,779
you're using eclipse with all of the

00:28:19,619 --> 00:28:23,580
recommended settings if you're looking

00:28:21,779 --> 00:28:25,769
at the Tomcat 8 code base and there's

00:28:23,580 --> 00:28:27,570
any little warning track littles of

00:28:25,769 --> 00:28:29,669
yellow exclamation marks you know

00:28:27,570 --> 00:28:31,049
something's not quite right and you know

00:28:29,669 --> 00:28:33,539
it's actually a problem because the code

00:28:31,049 --> 00:28:35,070
base should be clean so it's all the aim

00:28:33,539 --> 00:28:36,419
here is just to make the code base that

00:28:35,070 --> 00:28:37,779
little bit easier to maintain that

00:28:36,419 --> 00:28:40,229
little bit easier to work with

00:28:37,779 --> 00:28:43,090
and so we can spot problems sooner and

00:28:40,229 --> 00:28:45,609
find bugs we have actually turned we've

00:28:43,090 --> 00:28:47,799
turned on all of the warnings we haven't

00:28:45,609 --> 00:28:49,869
turned it to the absolute paranoid level

00:28:47,799 --> 00:28:52,450
but all of this all of the checks are

00:28:49,869 --> 00:28:54,070
enabled including the non default ones

00:28:52,450 --> 00:28:55,929
and we fixed all of the issues and mark

00:28:54,070 --> 00:28:57,669
the ones that as false positives that

00:28:55,929 --> 00:28:58,960
aren't so again it's all about just

00:28:57,669 --> 00:29:02,429
trying to improve the quality of the

00:28:58,960 --> 00:29:02,429
carriage step by step little by little

00:29:03,059 --> 00:29:09,519
so let's go on to talk about time scales

00:29:06,239 --> 00:29:13,059
jari seven is due this spring that's not

00:29:09,519 --> 00:29:14,469
going to slip as we've seen already if

00:29:13,059 --> 00:29:15,849
it looks like it's going to slip then

00:29:14,469 --> 00:29:19,570
our apology is going to pull features

00:29:15,849 --> 00:29:21,549
from it as they did with all the whole

00:29:19,570 --> 00:29:23,589
multi-tenancy thing which is why

00:29:21,549 --> 00:29:29,019
overlays disappeared from the server 3.1

00:29:23,589 --> 00:29:32,200
spec Tomcat 8 there won't be an 8.0

00:29:29,019 --> 00:29:34,719
release until the specification is final

00:29:32,200 --> 00:29:36,940
how long after it really depends on how

00:29:34,719 --> 00:29:38,589
long it takes us to implement all of the

00:29:36,940 --> 00:29:43,779
features and get everything passing the

00:29:38,589 --> 00:29:45,789
TC case based on what happened for

00:29:43,779 --> 00:29:51,489
tomcat 7 i would say we're looking

00:29:45,789 --> 00:29:57,039
towards awesome this year but it just

00:29:51,489 --> 00:29:58,450
depends as any Apache project people who

00:29:57,039 --> 00:30:00,369
work on it they're volunteers it depends

00:29:58,450 --> 00:30:01,779
how how many people are working it on it

00:30:00,369 --> 00:30:05,830
and how much time they have but i would

00:30:01,779 --> 00:30:07,749
guess so a first Tomcat 8 release that's

00:30:05,830 --> 00:30:09,429
got all of this feature complete is

00:30:07,749 --> 00:30:11,229
going to be autumn this year they'll

00:30:09,429 --> 00:30:15,099
almost certainly be some milestone

00:30:11,229 --> 00:30:16,869
releases before then when we come on to

00:30:15,099 --> 00:30:18,159
the WebSocket that's a lot closer to

00:30:16,869 --> 00:30:19,479
completion than others so one of the

00:30:18,159 --> 00:30:21,129
things i can see happening is once

00:30:19,479 --> 00:30:22,509
that's complete is there'll be a

00:30:21,129 --> 00:30:24,849
milestone release with a complete

00:30:22,509 --> 00:30:26,409
WebSocket implementation so people can

00:30:24,849 --> 00:30:30,429
start using that and provide some

00:30:26,409 --> 00:30:33,460
feedback on that so let's talk about

00:30:30,429 --> 00:30:35,440
progress and we'll do these in the same

00:30:33,460 --> 00:30:39,099
order that I went through the various

00:30:35,440 --> 00:30:41,649
features server 3.1 we have a partial

00:30:39,099 --> 00:30:45,700
non-blocking i/o implementation Phillips

00:30:41,649 --> 00:30:47,620
done this for the niño connector I've

00:30:45,700 --> 00:30:50,410
done some of the

00:30:47,620 --> 00:30:52,840
low-level prerequisites we need to do to

00:30:50,410 --> 00:30:54,730
basically do the similar thing for the

00:30:52,840 --> 00:30:56,800
APR collector we obviously can't do it

00:30:54,730 --> 00:31:02,260
for bi oh we we actually have to fake it

00:30:56,800 --> 00:31:04,000
that's all in place however as I said

00:31:02,260 --> 00:31:08,380
earlier the websocket code is built on

00:31:04,000 --> 00:31:09,760
top of this non-blocking i/o and one of

00:31:08,380 --> 00:31:13,240
the things that we've learned by

00:31:09,760 --> 00:31:16,990
implementing WebSocket is that there is

00:31:13,240 --> 00:31:20,710
a fundamental assumption in the server

00:31:16,990 --> 00:31:22,840
3.1 non-blocking api and of the people

00:31:20,710 --> 00:31:26,170
that are using it that it's perfectly

00:31:22,840 --> 00:31:27,670
acceptable to have threads writing to

00:31:26,170 --> 00:31:29,260
the socket and reading to this reading

00:31:27,670 --> 00:31:30,610
from the socket at the same time and

00:31:29,260 --> 00:31:34,840
that's not an unreasonable thing to

00:31:30,610 --> 00:31:38,800
assume at all however the current Tomcat

00:31:34,840 --> 00:31:40,720
code is pretty much entirely written on

00:31:38,800 --> 00:31:42,550
the basis that there will only ever be

00:31:40,720 --> 00:31:46,929
one thread working with a socket at one

00:31:42,550 --> 00:31:49,510
time and you can't actually implement

00:31:46,929 --> 00:31:52,630
the WebSocket spec under that constraint

00:31:49,510 --> 00:31:56,679
doesn't work so we're going to have to

00:31:52,630 --> 00:31:59,429
do some refactoring how extensive that

00:31:56,679 --> 00:32:03,010
turns out to be each one of those well

00:31:59,429 --> 00:32:04,540
you don't know until you try and that's

00:32:03,010 --> 00:32:06,220
really the next big thing to be done

00:32:04,540 --> 00:32:08,980
after the WebSocket is to get the

00:32:06,220 --> 00:32:11,650
non-blocking i/o stuff sorted across all

00:32:08,980 --> 00:32:14,140
of the connectors so there's potentially

00:32:11,650 --> 00:32:17,830
a reasonable amount of work left to do

00:32:14,140 --> 00:32:20,050
there HTTP upgrade is done overlays the

00:32:17,830 --> 00:32:22,900
hard parts done but where we don't

00:32:20,050 --> 00:32:24,370
actually need it but it's done changing

00:32:22,900 --> 00:32:27,309
the session ID that's done that was

00:32:24,370 --> 00:32:29,980
actually not done by one of the

00:32:27,309 --> 00:32:31,809
commuters one of a user said I'd really

00:32:29,980 --> 00:32:34,390
like to help with that they wrote a

00:32:31,809 --> 00:32:36,429
patch we provided some feedback they fix

00:32:34,390 --> 00:32:40,030
the patch we applied the patch so that

00:32:36,429 --> 00:32:41,380
was all done by contributor and none of

00:32:40,030 --> 00:32:43,800
the dev while the devs are involved in

00:32:41,380 --> 00:32:45,790
committing it and reviewing it but the

00:32:43,800 --> 00:32:48,190
contributor did all the hard work and it

00:32:45,790 --> 00:32:50,110
just shows that you can just pick yeah a

00:32:48,190 --> 00:32:52,179
little feature that you're interested in

00:32:50,110 --> 00:32:54,340
or you want to work on provide a patch

00:32:52,179 --> 00:32:56,950
for it attach it to a bugzilla entry and

00:32:54,340 --> 00:32:59,960
get it into the code base so the lots of

00:32:56,950 --> 00:33:02,120
opportunities and places to help

00:32:59,960 --> 00:33:03,470
the protection for uncovered HTTP

00:33:02,120 --> 00:33:04,700
methods that's the issues with the

00:33:03,470 --> 00:33:06,620
security constraints that use the

00:33:04,700 --> 00:33:08,300
methods we haven't done anything on that

00:33:06,620 --> 00:33:10,460
yet we're probably going to have to do

00:33:08,300 --> 00:33:17,440
as I say so there's another area of work

00:33:10,460 --> 00:33:20,630
there websocket that is mostly complete

00:33:17,440 --> 00:33:22,340
it does pass the autobahn tests for all

00:33:20,630 --> 00:33:26,120
three connectors as long as you don't

00:33:22,340 --> 00:33:28,810
use SSL if you use SSL the blocking

00:33:26,120 --> 00:33:32,090
ioann works beautifully the niño

00:33:28,810 --> 00:33:35,300
finishes with a few failures and a PR

00:33:32,090 --> 00:33:38,120
crashes so that's currently a work in

00:33:35,300 --> 00:33:41,300
progress and once I've finished the

00:33:38,120 --> 00:33:42,740
latest refactoring to update Tomcats

00:33:41,300 --> 00:33:45,260
implementation to the new version of the

00:33:42,740 --> 00:33:47,270
spec then looking at what's going on

00:33:45,260 --> 00:33:50,830
with the SSL connect the SSL versions of

00:33:47,270 --> 00:33:53,420
that is next on my list of things to do

00:33:50,830 --> 00:33:55,250
this slide is slightly out of date when

00:33:53,420 --> 00:33:56,570
it says encoding and decoding is the

00:33:55,250 --> 00:33:58,220
largest block of functionality left

00:33:56,570 --> 00:34:00,890
encoding has been done that was the

00:33:58,220 --> 00:34:02,510
simple one decoding is a little bit more

00:34:00,890 --> 00:34:05,060
complicated that still needs to be done

00:34:02,510 --> 00:34:09,260
but all of the WebSocket stuff should be

00:34:05,060 --> 00:34:11,990
fairly quick the one thing that isn't on

00:34:09,260 --> 00:34:14,930
there is the ability on the client side

00:34:11,990 --> 00:34:17,720
to take a pojo and say right make this

00:34:14,930 --> 00:34:20,270
into a WebSocket client please I believe

00:34:17,720 --> 00:34:22,430
all of the various bits of plumbing that

00:34:20,270 --> 00:34:23,660
you need all the various bits are there

00:34:22,430 --> 00:34:26,930
it's just a case of putting them

00:34:23,660 --> 00:34:29,360
together in a class or two so it should

00:34:26,930 --> 00:34:31,760
be fairly quick to do and again that's

00:34:29,360 --> 00:34:34,840
that's another opportunity for somebody

00:34:31,760 --> 00:34:37,820
to contribute in terms of l3 point 0

00:34:34,840 --> 00:34:40,970
haven't done a thing absolutely nothing

00:34:37,820 --> 00:34:43,790
so there's that there's an entire spec

00:34:40,970 --> 00:34:47,450
there that needs implementing the good

00:34:43,790 --> 00:34:50,180
news is a fair chunk of that is writing

00:34:47,450 --> 00:34:52,190
the grammar that's then fed into the

00:34:50,180 --> 00:34:55,700
parser generator to actually parse the

00:34:52,190 --> 00:34:58,520
AEL expressions last time I checked the

00:34:55,700 --> 00:35:00,980
L specification includes a copy of the

00:34:58,520 --> 00:35:04,850
grammar which makes life a whole lot

00:35:00,980 --> 00:35:06,980
easier I would say if you it's worth

00:35:04,850 --> 00:35:10,580
checking it because there were some bugs

00:35:06,980 --> 00:35:11,750
in earlier versions but if you wanted to

00:35:10,580 --> 00:35:13,350
get involved in the expression language

00:35:11,750 --> 00:35:14,520
then there's obviously

00:35:13,350 --> 00:35:16,740
a huge piece of work to be done there

00:35:14,520 --> 00:35:18,540
and to some extent the hard part the

00:35:16,740 --> 00:35:21,270
grammar has been done and then you're

00:35:18,540 --> 00:35:22,740
into well there's then you know 20 30

00:35:21,270 --> 00:35:24,270
however many functions there are that

00:35:22,740 --> 00:35:26,490
need to be implemented and you can pick

00:35:24,270 --> 00:35:28,980
a function implement it or infant three

00:35:26,490 --> 00:35:31,050
or four or or whatever you're interested

00:35:28,980 --> 00:35:34,710
in so there's this again lots of scope

00:35:31,050 --> 00:35:35,970
to get involved there the JSP stuff well

00:35:34,710 --> 00:35:38,340
we haven't seen the spec so we've got

00:35:35,970 --> 00:35:40,140
nothing to implement yet i'm not as i

00:35:38,340 --> 00:35:42,360
said i'm not expecting very big changes

00:35:40,140 --> 00:35:43,890
there that should be pretty quick again

00:35:42,360 --> 00:35:45,840
it's something that somebody wants to

00:35:43,890 --> 00:35:51,870
contribute to should be able to

00:35:45,840 --> 00:35:57,180
contribute to very easily so some final

00:35:51,870 --> 00:35:59,460
thoughts jari seven technically isn't

00:35:57,180 --> 00:36:01,950
final it's still a moving target and

00:35:59,460 --> 00:36:03,840
we're getting closer to the point where

00:36:01,950 --> 00:36:06,090
it's going to be published so I think

00:36:03,840 --> 00:36:09,510
things are more certain than they were a

00:36:06,090 --> 00:36:11,340
few months ago but it's still not beyond

00:36:09,510 --> 00:36:13,280
the realms of possibility for something

00:36:11,340 --> 00:36:15,330
to be pulled at the last minute or a

00:36:13,280 --> 00:36:16,830
significant new feature to be added at

00:36:15,330 --> 00:36:19,730
the last minute to be honest it's more

00:36:16,830 --> 00:36:24,870
likely that something will be pulled but

00:36:19,730 --> 00:36:28,770
anything's possible Tomcat 8 does depend

00:36:24,870 --> 00:36:32,190
on volunteer effort as do every project

00:36:28,770 --> 00:36:33,840
at Apache so if you want to get involved

00:36:32,190 --> 00:36:35,910
you want to contribute to tomcat there

00:36:33,840 --> 00:36:40,830
are lots of opportunities to do do so

00:36:35,910 --> 00:36:43,110
with Tomcat 8 this is potentially well

00:36:40,830 --> 00:36:45,900
less of an issue that the community

00:36:43,110 --> 00:36:48,930
agreement that the resources refactoring

00:36:45,900 --> 00:36:52,320
that was a big change that probably took

00:36:48,930 --> 00:36:54,840
the community the best part of a month i

00:36:52,320 --> 00:36:57,990
should say to go from here's a proposal

00:36:54,840 --> 00:36:59,520
to okay yet we're happy had to repair

00:36:57,990 --> 00:37:03,060
all of that code and replace it with

00:36:59,520 --> 00:37:04,920
this new implementation understandably

00:37:03,060 --> 00:37:07,680
there was a lot of nervousness about

00:37:04,920 --> 00:37:10,170
doing that so it took a while to get to

00:37:07,680 --> 00:37:12,120
a to get to a point to get to an API

00:37:10,170 --> 00:37:13,500
that people were happy with to get to a

00:37:12,120 --> 00:37:15,270
feature set that people were happy with

00:37:13,500 --> 00:37:20,760
and get to some performance that people

00:37:15,270 --> 00:37:22,680
were happy with there might be a similar

00:37:20,760 --> 00:37:24,390
largest piece of work to get the

00:37:22,680 --> 00:37:25,829
connectors working properly for the

00:37:24,390 --> 00:37:31,049
support the non-blocking

00:37:25,829 --> 00:37:32,869
I API in server at 3.1 so that might be

00:37:31,049 --> 00:37:35,069
another one of these things that just

00:37:32,869 --> 00:37:36,420
takes little time to go through the

00:37:35,069 --> 00:37:39,479
process to get to the point where all of

00:37:36,420 --> 00:37:42,900
the committers are happy with it so we

00:37:39,479 --> 00:37:45,930
definitely want help it can be to

00:37:42,900 --> 00:37:48,779
implement a new feature fix bugs clean

00:37:45,930 --> 00:37:50,369
up the code point out the fact that

00:37:48,779 --> 00:37:51,690
we're doing the same thing in five

00:37:50,369 --> 00:37:56,999
different places and it would make sense

00:37:51,690 --> 00:38:00,420
just to do it in one more tests one of

00:37:56,999 --> 00:38:02,459
the things that Tomcat 7 added was the

00:38:00,420 --> 00:38:03,900
ability to embed Tomcat and other things

00:38:02,459 --> 00:38:07,200
and that's made a huge difference to our

00:38:03,900 --> 00:38:08,789
unit tests we have far far more unit

00:38:07,200 --> 00:38:11,430
tests in tomcat now and we did a few

00:38:08,789 --> 00:38:13,380
years ago and that stems from having

00:38:11,430 --> 00:38:15,660
that embedded class but it means unit

00:38:13,380 --> 00:38:17,729
tests are much easier to write so if

00:38:15,660 --> 00:38:19,440
there's a particular bug even if you

00:38:17,729 --> 00:38:21,479
can't fix the bug if you can write a

00:38:19,440 --> 00:38:24,390
unit test that demonstrates it that's an

00:38:21,479 --> 00:38:26,690
enormous help and the other area of

00:38:24,390 --> 00:38:29,519
testing that is incredibly useful is

00:38:26,690 --> 00:38:32,339
when the developer community publishes a

00:38:29,519 --> 00:38:34,920
release candidate on the developer

00:38:32,339 --> 00:38:37,769
website on developer mailing list it's

00:38:34,920 --> 00:38:39,809
really really helpful if folks can

00:38:37,769 --> 00:38:41,369
download that release candidate and test

00:38:39,809 --> 00:38:45,180
it with their applications in their

00:38:41,369 --> 00:38:47,459
their environment it helps everybody it

00:38:45,180 --> 00:38:49,859
particularly helps us in that we get the

00:38:47,459 --> 00:38:51,959
feedback on regressions early but also

00:38:49,859 --> 00:38:54,449
it saves you going through the rigmarole

00:38:51,959 --> 00:38:58,049
of oh great there's new Tomcat release

00:38:54,449 --> 00:39:01,229
I'll download it I'll test it oh there's

00:38:58,049 --> 00:39:02,880
a regression oh well I've I'll I'll just

00:39:01,229 --> 00:39:04,589
have to wait another month for the next

00:39:02,880 --> 00:39:08,190
release when that regressions hopefully

00:39:04,589 --> 00:39:12,089
fixed if you test it before we have the

00:39:08,190 --> 00:39:14,400
release vote and before we say yep

00:39:12,089 --> 00:39:15,959
that's an official release then that we

00:39:14,400 --> 00:39:18,180
get that feedback much earlier in the

00:39:15,959 --> 00:39:19,709
process and then we can say okay yeah

00:39:18,180 --> 00:39:22,140
that release candidates broken we can

00:39:19,709 --> 00:39:23,609
fix the regression and get that fixed

00:39:22,140 --> 00:39:27,599
into the next release so you get the

00:39:23,609 --> 00:39:31,259
working release sooner so people who

00:39:27,599 --> 00:39:32,670
download the release candidates and test

00:39:31,259 --> 00:39:34,829
them with their apps and send a plus one

00:39:32,670 --> 00:39:36,930
to the mailing list it is incredibly

00:39:34,829 --> 00:39:37,900
useful we probably don't make make our

00:39:36,930 --> 00:39:39,400
thanks Nora

00:39:37,900 --> 00:39:41,470
appreciation on the news on the death

00:39:39,400 --> 00:39:44,280
list obvious enough but it is very much

00:39:41,470 --> 00:39:48,280
appreciated and it's a very big help

00:39:44,280 --> 00:39:50,370
documentation plenty of scope to help

00:39:48,280 --> 00:39:53,650
out there whether it's fixing typos or

00:39:50,370 --> 00:39:56,080
if anybody has a burning wish to

00:39:53,650 --> 00:39:57,280
completely restructure the documentation

00:39:56,080 --> 00:40:00,730
so it looks like it wasn't written in

00:39:57,280 --> 00:40:02,380
the 1980s that would be great we know

00:40:00,730 --> 00:40:04,210
it's very dated it's just finding

00:40:02,380 --> 00:40:07,000
somebody with the time the inclination

00:40:04,210 --> 00:40:08,800
and the right skill set to update it and

00:40:07,000 --> 00:40:10,720
if you think that's persons you please

00:40:08,800 --> 00:40:12,220
come and talk to one of us we happily

00:40:10,720 --> 00:40:13,810
point you in the right direction in some

00:40:12,220 --> 00:40:15,670
and sort of give you some of the ideas

00:40:13,810 --> 00:40:18,250
we've had some of the constraints we

00:40:15,670 --> 00:40:19,300
have to work within but again lots of

00:40:18,250 --> 00:40:21,660
different ways that people can

00:40:19,300 --> 00:40:25,060
contribute and people can get involved

00:40:21,660 --> 00:40:26,830
okay that's me a little finished a

00:40:25,060 --> 00:40:28,750
little bit ahead of schedule but at this

00:40:26,830 --> 00:40:35,440
point I'm happy to take questions from

00:40:28,750 --> 00:40:36,370
the floor Oh for a minute I thought I

00:40:35,440 --> 00:40:41,440
was going to get away with that

00:40:36,370 --> 00:40:43,570
apparently not you've done one of my

00:40:41,440 --> 00:40:46,180
favorite things which is for a way code

00:40:43,570 --> 00:40:51,960
um have you noticed any significant

00:40:46,180 --> 00:40:55,780
increase in performance or not

00:40:51,960 --> 00:40:57,730
particularly but I get in terms of I too

00:40:55,780 --> 00:40:59,680
like throwing away code I am never

00:40:57,730 --> 00:41:02,830
happier than when I'm just deleting

00:40:59,680 --> 00:41:04,660
stuff we're not using I think where we

00:41:02,830 --> 00:41:06,670
really seeing the benefits is more in

00:41:04,660 --> 00:41:11,320
terms of maintainability than in

00:41:06,670 --> 00:41:12,910
performance and we've had some changes

00:41:11,320 --> 00:41:15,760
during the life of tomcat seven that

00:41:12,910 --> 00:41:18,580
really have impacted performance but

00:41:15,760 --> 00:41:22,870
those have usually been awful pieces of

00:41:18,580 --> 00:41:26,050
code that have been rewritten I'm

00:41:22,870 --> 00:41:28,090
talking tomorrow about security

00:41:26,050 --> 00:41:29,800
vulnerability handling and there's a in

00:41:28,090 --> 00:41:32,680
the good the bad and the ugly talk as an

00:41:29,800 --> 00:41:34,630
example there of denial of service thing

00:41:32,680 --> 00:41:37,090
is basically down to awful code on our

00:41:34,630 --> 00:41:41,260
part but throwing that away as hell

00:41:37,090 --> 00:41:44,620
performance but generally there's not a

00:41:41,260 --> 00:41:46,210
huge amount of fat that we can throw

00:41:44,620 --> 00:41:48,849
away it's already been pretty much

00:41:46,210 --> 00:41:50,589
trimmed down and we have had

00:41:48,849 --> 00:41:52,989
getting back to opportunities to

00:41:50,589 --> 00:41:54,549
contribute the good folks at ebay have

00:41:52,989 --> 00:41:57,690
been who have been using tomcat for a

00:41:54,549 --> 00:41:59,380
while have raised a number of

00:41:57,690 --> 00:42:02,200
enhancement requests and bug fixes

00:41:59,380 --> 00:42:04,989
around the JSP engine and there's

00:42:02,200 --> 00:42:06,309
actually some quite they vote for their

00:42:04,989 --> 00:42:08,440
environment they're all completely valid

00:42:06,309 --> 00:42:11,039
you know we do this our environment runs

00:42:08,440 --> 00:42:14,259
faster but it's one of those interesting

00:42:11,039 --> 00:42:17,200
yes that will work for everybody that

00:42:14,259 --> 00:42:19,720
work for everybody that one won't and

00:42:17,200 --> 00:42:22,029
it's how do we solve the problem they're

00:42:19,720 --> 00:42:24,190
seeing without o fact the over

00:42:22,029 --> 00:42:26,079
optimizing and making it worse for a for

00:42:24,190 --> 00:42:28,599
a simpler case so that's a good example

00:42:26,079 --> 00:42:29,829
of a contribution coming into

00:42:28,599 --> 00:42:31,180
performance but generally with the

00:42:29,829 --> 00:42:34,599
cleanup I think it's it's

00:42:31,180 --> 00:42:35,979
maintainability and ease of bug fixing

00:42:34,599 --> 00:42:39,849
that's been improved rather than raw

00:42:35,979 --> 00:42:41,619
performance to that end it's also easier

00:42:39,849 --> 00:42:42,849
for people who are coming into the code

00:42:41,619 --> 00:42:45,009
base to try to figure out what's going

00:42:42,849 --> 00:42:46,779
on hey I want to know how do I get from

00:42:45,009 --> 00:42:48,940
point A to point B particularly with the

00:42:46,779 --> 00:42:50,920
resources implementation the new

00:42:48,940 --> 00:42:53,529
resources implementation if you wanted

00:42:50,920 --> 00:42:56,259
to know how your static file got from

00:42:53,529 --> 00:42:58,119
the disk to your response there was

00:42:56,259 --> 00:42:59,670
really no way that yeah a mere mortal

00:42:58,119 --> 00:43:02,200
was going to figure that out in the past

00:42:59,670 --> 00:43:04,329
no I at least now hopefully you can

00:43:02,200 --> 00:43:06,489
follow the code and figure it out but it

00:43:04,329 --> 00:43:09,039
was a nightmare before it well all I

00:43:06,489 --> 00:43:10,269
used to do is just put liberally spread

00:43:09,039 --> 00:43:12,999
break points throughout the code and

00:43:10,269 --> 00:43:16,690
hope that one of them would had trying

00:43:12,999 --> 00:43:19,349
to debug it was horrible let's I've got

00:43:16,690 --> 00:43:22,299
a couple of questions for any much shoot

00:43:19,349 --> 00:43:23,529
essentially in presentation order um you

00:43:22,299 --> 00:43:25,989
mentioned it overlays were dropped from

00:43:23,529 --> 00:43:27,999
the spec is that something that you you

00:43:25,989 --> 00:43:29,529
think that the experts group as a whole

00:43:27,999 --> 00:43:31,719
decided that it just wasn't a good idea

00:43:29,529 --> 00:43:35,109
or that it wasn't flashed out enough and

00:43:31,719 --> 00:43:37,180
it might appear in future spec okay the

00:43:35,109 --> 00:43:40,989
experts to suit yeah this is to serve

00:43:37,180 --> 00:43:43,239
that spec we're talking about you Oracle

00:43:40,989 --> 00:43:45,430
decided that they wanted it in then

00:43:43,239 --> 00:43:48,400
oracle change their minds to be honest

00:43:45,430 --> 00:43:52,239
that's how it happened it really it

00:43:48,400 --> 00:43:54,039
feeds on from the multi-tenancy stuff so

00:43:52,239 --> 00:43:56,499
oracle decided they wanted multi-tenancy

00:43:54,039 --> 00:43:58,719
in java ee 7 that flowed down to the

00:43:56,499 --> 00:44:01,230
various specifications for servlets that

00:43:58,719 --> 00:44:03,450
flowed down in the form of overlays

00:44:01,230 --> 00:44:06,900
Oracle then decided that they didn't so

00:44:03,450 --> 00:44:10,050
it all got pulled so the experts really

00:44:06,900 --> 00:44:11,880
had not a great deal of say about

00:44:10,050 --> 00:44:13,890
whether it was in or whether it is out

00:44:11,880 --> 00:44:16,140
there was a little bit of debate amongst

00:44:13,890 --> 00:44:20,700
the experts around what it should really

00:44:16,140 --> 00:44:22,380
be and how it should work and whether

00:44:20,700 --> 00:44:24,000
multi-tenancy was something that a

00:44:22,380 --> 00:44:30,510
servant container even needed to bother

00:44:24,000 --> 00:44:32,369
worrying about but it really didn't get

00:44:30,510 --> 00:44:34,680
down to anything concrete because it was

00:44:32,369 --> 00:44:36,720
pulled before the the expert really had

00:44:34,680 --> 00:44:39,210
not had come to a conclusion of what

00:44:36,720 --> 00:44:40,830
they thought the API should look like ok

00:44:39,210 --> 00:44:42,420
but so do you have a sense at all

00:44:40,830 --> 00:44:44,250
whether it might be considered in the

00:44:42,420 --> 00:44:50,100
future or it's just really a backup door

00:44:44,250 --> 00:44:51,570
toss a coin and if I'm from what I've

00:44:50,100 --> 00:44:54,930
seen multi-tenancy is going to come back

00:44:51,570 --> 00:45:00,150
in but whether you know in two years

00:44:54,930 --> 00:45:01,710
time it's still the same concern that it

00:45:00,150 --> 00:45:05,340
was when it was put in the first I just

00:45:01,710 --> 00:45:06,990
don't know is pretty it's 5050 because

00:45:05,340 --> 00:45:08,160
again it's how relevant it is to a

00:45:06,990 --> 00:45:11,190
server contain there anyway i think

00:45:08,160 --> 00:45:12,960
overlays they are potentially very

00:45:11,190 --> 00:45:15,119
useful it is something that jetty

00:45:12,960 --> 00:45:17,369
already does and it's something that

00:45:15,119 --> 00:45:20,520
Tomcat can now do fairly easily through

00:45:17,369 --> 00:45:25,650
its resources implementation so from

00:45:20,520 --> 00:45:27,690
that point of view there's a better than

00:45:25,650 --> 00:45:29,609
better than fifty percent chance will be

00:45:27,690 --> 00:45:32,600
a server that three-point whatever the

00:45:29,609 --> 00:45:38,160
next is but the multi-tenancy driver I

00:45:32,600 --> 00:45:41,670
really have no idea okay what's the

00:45:38,160 --> 00:45:44,030
minimum JVM version for Tom Kelly ok

00:45:41,670 --> 00:45:46,619
yeah my bad for not mentioning that

00:45:44,030 --> 00:45:51,359
Tomcat 8 will require a minimum of Java

00:45:46,619 --> 00:45:53,580
7 not because it particularly needs and

00:45:51,359 --> 00:45:55,020
I think that's java 7 specific well

00:45:53,580 --> 00:45:56,520
actually the codebase doesn't actually

00:45:55,020 --> 00:45:58,350
doing a whole part of clean up and taken

00:45:56,520 --> 00:46:04,590
advantage of some of the Java 7 features

00:45:58,350 --> 00:46:06,600
but there's nothing that you couldn't

00:46:04,590 --> 00:46:09,270
implement in Java five if you really

00:46:06,600 --> 00:46:11,440
wanted to but now the minimum will be

00:46:09,270 --> 00:46:13,630
Java 7 ok there's been

00:46:11,440 --> 00:46:15,150
some discussion lately on the users list

00:46:13,630 --> 00:46:18,280
I think Nick Williams is doing some

00:46:15,150 --> 00:46:21,790
screwing around with what Tomcat 8 can

00:46:18,280 --> 00:46:23,530
do and what did jb m8 can do so he's

00:46:21,790 --> 00:46:26,110
been writing jsps that will only work

00:46:23,530 --> 00:46:28,630
for instance with a young with the

00:46:26,110 --> 00:46:31,780
closures and things like that yeah and

00:46:28,630 --> 00:46:35,980
there is an outstanding issue that's

00:46:31,780 --> 00:46:40,120
been raised with running GSP's with Java

00:46:35,980 --> 00:46:42,430
rate in that something goes wrong when

00:46:40,120 --> 00:46:43,900
the compiler tries to insert the

00:46:42,430 --> 00:46:48,210
debugging information into the class

00:46:43,900 --> 00:46:52,150
we've yet to determine whether that's a

00:46:48,210 --> 00:46:54,340
Java a JVM issue whether it's an eclipse

00:46:52,150 --> 00:46:57,010
JDT issue whether it's a tomcat issue

00:46:54,340 --> 00:47:00,250
and to be honest that that's kind of

00:46:57,010 --> 00:47:02,640
parked for a while until those things

00:47:00,250 --> 00:47:08,980
are a little bit more bedded down I

00:47:02,640 --> 00:47:10,420
think time may be all that one also some

00:47:08,980 --> 00:47:12,280
of the folks here might be interested in

00:47:10,420 --> 00:47:14,350
knowing whether trunk actually works

00:47:12,280 --> 00:47:16,630
right now in not in terms of API

00:47:14,350 --> 00:47:18,460
stability but in terms of like server

00:47:16,630 --> 00:47:20,350
stability I probably would want to use

00:47:18,460 --> 00:47:22,690
it in production but it is it

00:47:20,350 --> 00:47:24,610
appropriate to pull it out a subversion

00:47:22,690 --> 00:47:27,780
and try running your app on it or a

00:47:24,610 --> 00:47:31,150
couple as in terms of trunk stability

00:47:27,780 --> 00:47:33,060
the the aim with that is that it should

00:47:31,150 --> 00:47:36,850
or it should definitely always compile

00:47:33,060 --> 00:47:39,870
if it doesn't buildbot yells at us and

00:47:36,850 --> 00:47:44,160
we fix it so it will definitely compile

00:47:39,870 --> 00:47:49,180
it should largely work to be honest I

00:47:44,160 --> 00:47:51,580
would happily run the SF spirit instance

00:47:49,180 --> 00:47:54,010
on trunk at the minute but that's

00:47:51,580 --> 00:47:55,180
because I know the bit of Tonka isn't

00:47:54,010 --> 00:47:56,680
very stable is the WebSocket

00:47:55,180 --> 00:47:59,500
implementation injury goes nowhere near

00:47:56,680 --> 00:48:02,230
that everything else is very very

00:47:59,500 --> 00:48:03,760
similar to tomcat 7 so there shouldn't

00:48:02,230 --> 00:48:06,160
be any met there shouldn't be any issues

00:48:03,760 --> 00:48:07,210
there so it's certainly the sort of

00:48:06,160 --> 00:48:09,520
thing that you could happily run in a

00:48:07,210 --> 00:48:11,020
dev environment but if you're going to

00:48:09,520 --> 00:48:12,400
do that what I'd suggest is have the

00:48:11,020 --> 00:48:14,140
separate Catalina home and Catalina

00:48:12,400 --> 00:48:16,030
basis and just make sure you've got a

00:48:14,140 --> 00:48:18,010
nice stable tomcat 7 release that you

00:48:16,030 --> 00:48:20,100
can drop back to if if you hit a

00:48:18,010 --> 00:48:23,349
regression and you can't work around it

00:48:20,100 --> 00:48:27,020
ok finally

00:48:23,349 --> 00:48:31,609
can you comment on the wisdom of

00:48:27,020 --> 00:48:35,630
potentially using web socket with httpd

00:48:31,609 --> 00:48:37,520
out in front of target yeah the wisdom

00:48:35,630 --> 00:48:38,990
of using tomcat web socket

00:48:37,520 --> 00:48:40,310
implementation with HD foodie in front

00:48:38,990 --> 00:48:44,030
of it is a really bad idea because it

00:48:40,310 --> 00:48:46,310
won't work last time I checked there's

00:48:44,030 --> 00:48:48,650
no way to fairly pass through the

00:48:46,310 --> 00:48:51,200
connection through a reverse proxy for

00:48:48,650 --> 00:48:54,050
web socket so it just stops working I'm

00:48:51,200 --> 00:48:55,400
looking at some of the HTTP critters in

00:48:54,050 --> 00:48:56,810
the room and none of the jumping up and

00:48:55,400 --> 00:48:59,210
down waving at me so I believe I'm

00:48:56,810 --> 00:49:00,290
saying saying the right thing it was

00:48:59,210 --> 00:49:06,460
certainly the case last time I checked

00:49:00,290 --> 00:49:10,520
I'm not aware that that's changed okay

00:49:06,460 --> 00:49:13,329
any other questions we've still got a

00:49:10,520 --> 00:49:13,329
few minutes left

00:49:19,010 --> 00:49:25,280
okay so we have lunch at quarter past

00:49:21,680 --> 00:49:26,210
and it late to probably do the usual and

00:49:25,280 --> 00:49:28,240
say thank you very much for the

00:49:26,210 --> 00:49:28,240

YouTube URL: https://www.youtube.com/watch?v=B57IRtUHMjg


