Title: Getting to Know Apache CloudStack
Publication date: 2013-10-17
Playlist: Apachecon NA 2013 - day 1
Description: 
	Joe Brockmeier
ApacheCon NA 2013
Overture and Beginners
Captions: 
	00:00:00,000 --> 00:00:05,640
so hi my name is Joe brokmeier I'm with

00:00:02,730 --> 00:00:09,780
the Apache CloudStack incubator project

00:00:05,640 --> 00:00:11,849
I work for citrix full-time is a open

00:00:09,780 --> 00:00:13,910
source cloud evangelist or something

00:00:11,849 --> 00:00:17,070
like that but basically I spend my time

00:00:13,910 --> 00:00:18,090
working on Apache CloudStack or going

00:00:17,070 --> 00:00:21,300
around and talking about apache

00:00:18,090 --> 00:00:23,340
cloudstack luckily I have absolutely no

00:00:21,300 --> 00:00:24,900
revenue responsibilities so this is not

00:00:23,340 --> 00:00:27,539
going to be a sales pitch I'm just going

00:00:24,900 --> 00:00:31,140
to try to give you the overview of what

00:00:27,539 --> 00:00:32,669
Apache CloudStack is what it does like

00:00:31,140 --> 00:00:35,040
to get the temperature of a room before

00:00:32,669 --> 00:00:37,410
the talk so let's see how many folks are

00:00:35,040 --> 00:00:41,550
actually using cloud services right now

00:00:37,410 --> 00:00:42,739
or setting them up ok how many folks are

00:00:41,550 --> 00:00:46,140
actually setting up your own

00:00:42,739 --> 00:00:50,370
infrastructure-as-a-service clouds how

00:00:46,140 --> 00:00:53,309
many people want to oh I was hoping for

00:00:50,370 --> 00:00:55,140
more hands on that second one ok well

00:00:53,309 --> 00:00:56,420
maybe this will convince you all right

00:00:55,140 --> 00:00:58,800
I'm going to speed through then the

00:00:56,420 --> 00:01:00,480
characteristics characteristics of

00:00:58,800 --> 00:01:04,320
clouds and things that I assume you all

00:01:00,480 --> 00:01:06,479
have a grounding on so for example NIST

00:01:04,320 --> 00:01:08,760
has a really good definition of cloud I

00:01:06,479 --> 00:01:11,250
like to add something to it so there are

00:01:08,760 --> 00:01:13,920
basically five characteristics of clouds

00:01:11,250 --> 00:01:16,110
that they subscribe to which is number

00:01:13,920 --> 00:01:19,080
one on demand self-service if you can't

00:01:16,110 --> 00:01:21,450
you know plop down your credit card or

00:01:19,080 --> 00:01:23,159
you user credentials and spin up a

00:01:21,450 --> 00:01:25,259
service without intervention of the IT

00:01:23,159 --> 00:01:28,409
department or something it's not really

00:01:25,259 --> 00:01:30,479
cloud broad network access if I can't

00:01:28,409 --> 00:01:34,470
get to it if you don't have a decent

00:01:30,479 --> 00:01:36,180
network it is not really cloud resource

00:01:34,470 --> 00:01:38,070
pooling basically means that you know

00:01:36,180 --> 00:01:40,590
you're using storage and network and

00:01:38,070 --> 00:01:42,960
compute for multiple users or customers

00:01:40,590 --> 00:01:45,720
or whatever you're basically taking that

00:01:42,960 --> 00:01:47,430
stuff and parceling it out to people as

00:01:45,720 --> 00:01:49,829
part of your cloud services in one way

00:01:47,430 --> 00:01:51,899
or another rapid elasticity if I can't

00:01:49,829 --> 00:01:53,930
spin up a hundred instances at once I

00:01:51,899 --> 00:01:56,939
don't really consider it a cloud service

00:01:53,930 --> 00:01:59,250
or take down services rapidly for that

00:01:56,939 --> 00:02:01,259
matter measured service if I can't bill

00:01:59,250 --> 00:02:03,299
you or if I can't tell a department at

00:02:01,259 --> 00:02:05,399
the end of the much into the month how

00:02:03,299 --> 00:02:07,560
much it used its not really cloud and

00:02:05,399 --> 00:02:10,289
finally the thing that I add to it is

00:02:07,560 --> 00:02:12,960
API access you know something like

00:02:10,289 --> 00:02:14,670
Amazon Web Services is nice if you

00:02:12,960 --> 00:02:16,380
ever use their web interface though you

00:02:14,670 --> 00:02:17,790
don't want to be provisioning everything

00:02:16,380 --> 00:02:19,890
through that if they don't have an API

00:02:17,790 --> 00:02:22,140
to get to it if I can't do things

00:02:19,890 --> 00:02:25,800
programmatically it's not really cloud

00:02:22,140 --> 00:02:27,300
to me it's not useful does anybody need

00:02:25,800 --> 00:02:29,880
an explanation of the different cloud

00:02:27,300 --> 00:02:31,500
service models everybody is assuming

00:02:29,880 --> 00:02:35,310
comfortable with the difference between

00:02:31,500 --> 00:02:36,810
IAS and all that okay deployment models

00:02:35,310 --> 00:02:39,110
are pretty straightforward public

00:02:36,810 --> 00:02:42,270
private and hybrid clouds anybody not

00:02:39,110 --> 00:02:47,010
comfortable with those differences or

00:02:42,270 --> 00:02:49,290
those terms okay and being as I'm at

00:02:47,010 --> 00:02:52,010
Apache con i'm assuming why open source

00:02:49,290 --> 00:02:54,360
does not really need a lot of discussion

00:02:52,010 --> 00:02:59,760
anybody in here who's not convinced

00:02:54,360 --> 00:03:01,530
about open source okay good everyone's

00:02:59,760 --> 00:03:02,730
while you go to like a Linux event or

00:03:01,530 --> 00:03:04,590
something there's a couple people like

00:03:02,730 --> 00:03:07,110
that I'd like to hear the argument just

00:03:04,590 --> 00:03:09,540
for my boss okay fair enough but I'm

00:03:07,110 --> 00:03:13,380
assuming everybody here can make that so

00:03:09,540 --> 00:03:16,530
let's talk about CloudStack itself start

00:03:13,380 --> 00:03:18,180
with the CloudStack history the slide

00:03:16,530 --> 00:03:20,730
keeps getting longer every time I give

00:03:18,180 --> 00:03:24,240
this talk funny how history works that

00:03:20,730 --> 00:03:26,250
way so cloudstack actually started its

00:03:24,240 --> 00:03:29,450
origins were in a startup called vm ops

00:03:26,250 --> 00:03:32,760
in 2008 which later became cloud com

00:03:29,450 --> 00:03:37,230
that was then released as CloudStack

00:03:32,760 --> 00:03:38,970
under the gplv3 in May that 2010 it was

00:03:37,230 --> 00:03:40,950
one of those delightful open core

00:03:38,970 --> 00:03:43,020
projects at the time so not everything

00:03:40,950 --> 00:03:46,290
was open some of it was open some was

00:03:43,020 --> 00:03:49,410
not the entire thing cloud com was

00:03:46,290 --> 00:03:51,480
acquired by Citrix in july two thousand

00:03:49,410 --> 00:03:56,370
eleven and then it was entirely open

00:03:51,480 --> 00:03:58,280
sourced in august of 2011 there was last

00:03:56,370 --> 00:04:02,790
year a little bit of contention when

00:03:58,280 --> 00:04:04,980
cloudstack was proposed to apache and i

00:04:02,790 --> 00:04:06,480
think some conspiracy theories and

00:04:04,980 --> 00:04:09,510
things like that what really basically

00:04:06,480 --> 00:04:12,660
happened was this cloud calm and then

00:04:09,510 --> 00:04:14,910
Citrix had customers on cloudstack who

00:04:12,660 --> 00:04:16,590
have production environments and they

00:04:14,910 --> 00:04:20,070
liked it and they were using it and they

00:04:16,590 --> 00:04:21,900
really didn't they weren't confident in

00:04:20,070 --> 00:04:23,730
the bridge between Citrix had talked

00:04:21,900 --> 00:04:24,830
about trying to merge CloudStack and

00:04:23,730 --> 00:04:27,289
OpenStack

00:04:24,830 --> 00:04:28,970
which was probably over overly ambitious

00:04:27,289 --> 00:04:30,979
when that was thought up because

00:04:28,970 --> 00:04:34,430
basically you have a python-based

00:04:30,979 --> 00:04:38,479
project which consists of multiple

00:04:34,430 --> 00:04:40,909
discrete projects like nova in glance

00:04:38,479 --> 00:04:42,409
and Swift and things like that on one

00:04:40,909 --> 00:04:45,740
hand and then you have a product eyes

00:04:42,409 --> 00:04:48,949
java application that's basically an

00:04:45,740 --> 00:04:50,569
all-in-one turnkey solution and it was

00:04:48,949 --> 00:04:52,150
just overly ambitious thinking they were

00:04:50,569 --> 00:04:56,060
going to be able to merge these two

00:04:52,150 --> 00:04:57,740
projects so eventually citric said okay

00:04:56,060 --> 00:05:00,379
we have people paying money for this and

00:04:57,740 --> 00:05:02,629
they'd like to see it continue but as an

00:05:00,379 --> 00:05:05,000
open source project people aren't

00:05:02,629 --> 00:05:07,909
flocking to citrix to participate in a

00:05:05,000 --> 00:05:10,669
project governed by a single entity and

00:05:07,909 --> 00:05:14,150
so they proposed it to apache it was

00:05:10,669 --> 00:05:15,949
accepted in April on April sixteenth all

00:05:14,150 --> 00:05:17,449
the infrastructure took the summer to

00:05:15,949 --> 00:05:19,819
set up the infrastructure get things

00:05:17,449 --> 00:05:21,710
like to get repository set up the

00:05:19,819 --> 00:05:23,960
mailing list working all of that good

00:05:21,710 --> 00:05:26,569
stuff going first release was in

00:05:23,960 --> 00:05:28,879
November and that was our first major

00:05:26,569 --> 00:05:31,219
release as an Apache incubating project

00:05:28,879 --> 00:05:33,650
and our first minor release came out in

00:05:31,219 --> 00:05:35,270
February I was silly enough to raise my

00:05:33,650 --> 00:05:38,599
hand for release management for the

00:05:35,270 --> 00:05:41,599
point releases and so this is the

00:05:38,599 --> 00:05:43,099
history so far we're working on 410 that

00:05:41,599 --> 00:05:46,610
should come out at the end of march or

00:05:43,099 --> 00:05:48,650
early april depending on timing i

00:05:46,610 --> 00:05:50,419
probably don't have to explain why we

00:05:48,650 --> 00:05:52,669
decided to go with citrix or i'm sorry

00:05:50,419 --> 00:05:55,460
about with apache very much to this

00:05:52,669 --> 00:05:57,620
crowd but basically you know citrix

00:05:55,460 --> 00:06:01,099
looked around and they saw apache as

00:05:57,620 --> 00:06:02,629
being the organization with the best

00:06:01,099 --> 00:06:06,169
track history of governance and

00:06:02,629 --> 00:06:08,509
licensing and everything that was you

00:06:06,169 --> 00:06:10,219
know coincided with the project mission

00:06:08,509 --> 00:06:12,860
for cloudstack and we've gotten a lot of

00:06:10,219 --> 00:06:15,020
community members who came to us who

00:06:12,860 --> 00:06:17,150
were already evaluating cloudstack and

00:06:15,020 --> 00:06:19,190
they came to us and said you know going

00:06:17,150 --> 00:06:21,529
to apache did two things number one we

00:06:19,190 --> 00:06:24,469
liked the Apache Apaches licensing a lot

00:06:21,529 --> 00:06:26,930
more and we liked the governance we like

00:06:24,469 --> 00:06:28,969
the fact that Apache has you know well

00:06:26,930 --> 00:06:31,930
understood governance compared to other

00:06:28,969 --> 00:06:34,070
projects it's not quite as dicey as

00:06:31,930 --> 00:06:35,360
creating your own foundation

00:06:34,070 --> 00:06:37,460
governance where we're not quite sure

00:06:35,360 --> 00:06:41,240
where it's going or who is really

00:06:37,460 --> 00:06:44,600
running the show so what is Apache

00:06:41,240 --> 00:06:46,640
CloudStack this is kind of the marketing

00:06:44,600 --> 00:06:49,070
elevator pitch definition it's basically

00:06:46,640 --> 00:06:51,440
just open source infrastructure as a

00:06:49,070 --> 00:06:54,160
service we support multiple hypervisors

00:06:51,440 --> 00:06:56,540
i'll talk about that high availability

00:06:54,160 --> 00:06:59,420
complex networking firewalls load

00:06:56,540 --> 00:07:00,770
balancing VPN configurations in a

00:06:59,420 --> 00:07:03,380
multi-tenant environment this is

00:07:00,770 --> 00:07:05,000
basically pretty much everything people

00:07:03,380 --> 00:07:07,040
want today when they're talking about a

00:07:05,000 --> 00:07:08,420
cloud environment especially when you're

00:07:07,040 --> 00:07:11,120
talking about private cloud or setting

00:07:08,420 --> 00:07:13,670
up a public cloud specifically it's a

00:07:11,120 --> 00:07:15,890
set of applications so we provides

00:07:13,670 --> 00:07:18,710
separation between tenets we handle

00:07:15,890 --> 00:07:20,750
allocating the compute resources we let

00:07:18,710 --> 00:07:22,220
users provision their own resources we

00:07:20,750 --> 00:07:24,650
you know make it easy for you to

00:07:22,220 --> 00:07:26,180
basically give users the keys to the

00:07:24,650 --> 00:07:29,660
amount of resources you want them to

00:07:26,180 --> 00:07:31,850
have its massively scalable we have

00:07:29,660 --> 00:07:34,400
customers like Zynga or i should say

00:07:31,850 --> 00:07:36,530
citrix has customers like Zynga who are

00:07:34,400 --> 00:07:40,640
managing tens of thousands of physical

00:07:36,530 --> 00:07:42,980
hosts using CloudStack in in production

00:07:40,640 --> 00:07:44,660
and of course it provides usage

00:07:42,980 --> 00:07:46,580
accounting I'm going to go through some

00:07:44,660 --> 00:07:48,820
of the top level features and most

00:07:46,580 --> 00:07:51,650
interesting things that CloudStack does

00:07:48,820 --> 00:07:53,600
one of the first because most people

00:07:51,650 --> 00:07:57,680
encounter at first and everybody is

00:07:53,600 --> 00:07:59,870
usually impressed I described this the

00:07:57,680 --> 00:08:02,870
CloudStack user interface it's a

00:07:59,870 --> 00:08:04,700
web-based interface was it a texas linux

00:08:02,870 --> 00:08:05,870
fest last summer and i was trying to

00:08:04,700 --> 00:08:07,670
describe it it's trying to come up with

00:08:05,870 --> 00:08:10,580
a good metaphor basically what i came up

00:08:07,670 --> 00:08:13,370
with you know it's kind of like a kitten

00:08:10,580 --> 00:08:16,100
writing a unicorn over a rainbow you

00:08:13,370 --> 00:08:21,050
know it's just amazing this is not an

00:08:16,100 --> 00:08:23,570
actual screen shot but the cloudstack

00:08:21,050 --> 00:08:28,760
you I its reference implementation of

00:08:23,570 --> 00:08:31,580
the API it's basically Ajax uses JSP for

00:08:28,760 --> 00:08:33,380
localization and you can do all sorts of

00:08:31,580 --> 00:08:35,780
customizations we have people who have

00:08:33,380 --> 00:08:37,520
taken and you know basically swapped out

00:08:35,780 --> 00:08:40,460
the logos and colors so it looks like

00:08:37,520 --> 00:08:42,080
they're companies we have customers who

00:08:40,460 --> 00:08:45,350
have basically rewritten the entire

00:08:42,080 --> 00:08:46,490
interface and one of the concerns a lot

00:08:45,350 --> 00:08:47,810
of people have when they ask

00:08:46,490 --> 00:08:50,750
about well I can do this through to you

00:08:47,810 --> 00:08:52,790
I but what about the API the UI is a

00:08:50,750 --> 00:08:54,529
reference implementation so basically

00:08:52,790 --> 00:08:57,170
there is nothing you can do in the UI

00:08:54,529 --> 00:08:58,790
that you can't do via the API there may

00:08:57,170 --> 00:09:02,029
in fact be some things you can do easily

00:08:58,790 --> 00:09:03,500
programmatically with the API or with

00:09:02,029 --> 00:09:06,320
cloud monkey which I'll talk about a

00:09:03,500 --> 00:09:08,330
little bit but there is nothing you can

00:09:06,320 --> 00:09:12,350
do in the UI that you are hamstrung from

00:09:08,330 --> 00:09:14,120
doing via the API this is a screenshot

00:09:12,350 --> 00:09:15,740
of what it looks like if we have time

00:09:14,120 --> 00:09:19,940
and the network cooperates i'll do a

00:09:15,740 --> 00:09:23,089
quick demo of the UI or of CloudStack

00:09:19,940 --> 00:09:24,920
actually this is kind of a look at all

00:09:23,089 --> 00:09:26,600
of the components that CloudStack

00:09:24,920 --> 00:09:29,600
provides so we have not only the

00:09:26,600 --> 00:09:33,529
CloudStack api we also have an ec2 and

00:09:29,600 --> 00:09:35,089
s3 api that works if you need to use

00:09:33,529 --> 00:09:38,420
that you can turn that on and use that

00:09:35,089 --> 00:09:42,170
as well the self-service portal metering

00:09:38,420 --> 00:09:45,140
the dashboard for the admin we have load

00:09:42,170 --> 00:09:47,779
balancing built-in firewall VPN built-in

00:09:45,140 --> 00:09:49,970
storage it manages your storage compute

00:09:47,779 --> 00:09:51,980
Network and handles all your image

00:09:49,970 --> 00:09:57,350
management for templates and I so's and

00:09:51,980 --> 00:10:00,230
so forth any questions so far is that a

00:09:57,350 --> 00:10:03,980
good thing or a bad thing that everybody

00:10:00,230 --> 00:10:06,230
is so quiet let me give you the quick

00:10:03,980 --> 00:10:08,630
architectural overview so basically

00:10:06,230 --> 00:10:10,850
cloudstack consists of a management

00:10:08,630 --> 00:10:13,700
server which stores all of its

00:10:10,850 --> 00:10:15,649
information in my sequel database and

00:10:13,700 --> 00:10:18,370
then basically you have your hosts which

00:10:15,649 --> 00:10:20,600
are divided into zones pods and clusters

00:10:18,370 --> 00:10:22,420
I'll talk about the secondary and

00:10:20,600 --> 00:10:25,130
primary storage and how those relate

00:10:22,420 --> 00:10:27,320
what they do but this is kind of your

00:10:25,130 --> 00:10:30,649
basic architecture for a CloudStack

00:10:27,320 --> 00:10:32,180
install people will talk about getting

00:10:30,649 --> 00:10:34,370
started with CloudStack what would you

00:10:32,180 --> 00:10:36,800
need to get a reasonable install going

00:10:34,370 --> 00:10:38,660
what would you need to just test it out

00:10:36,800 --> 00:10:40,970
on your laptop and so forth but

00:10:38,660 --> 00:10:43,760
basically the very I tell people the

00:10:40,970 --> 00:10:45,380
bare minimum for a cloudstack install to

00:10:43,760 --> 00:10:47,899
really get the full features is about

00:10:45,380 --> 00:10:49,940
three servers you want to hypervisor

00:10:47,899 --> 00:10:52,520
hosts that are identical or you know

00:10:49,940 --> 00:10:54,949
same RAM same CPU same hypervisor and

00:10:52,520 --> 00:10:56,940
one management server was storage in the

00:10:54,949 --> 00:10:59,860
database on that

00:10:56,940 --> 00:11:02,579
we do support multiple hypervisors we do

00:10:59,860 --> 00:11:06,069
kV m's and servers and cloud platform

00:11:02,579 --> 00:11:08,949
VMware with vcenter and also we do some

00:11:06,069 --> 00:11:10,509
bare metal with ipmi so there are some

00:11:08,949 --> 00:11:13,889
folks who are basically just using

00:11:10,509 --> 00:11:16,240
CloudStack to manage bare metal servers

00:11:13,889 --> 00:11:18,490
we'll talk a little bit now about the

00:11:16,240 --> 00:11:21,819
the designations within CloudStack so

00:11:18,490 --> 00:11:24,370
zone is kind of like an Amazon region or

00:11:21,819 --> 00:11:27,329
whatever it's basically it's just sort

00:11:24,370 --> 00:11:29,709
of a logical definition of a specific

00:11:27,329 --> 00:11:32,439
area you know that you're managing with

00:11:29,709 --> 00:11:35,829
cloud stack secondary storage is shared

00:11:32,439 --> 00:11:37,889
across the entire zone whereas primary

00:11:35,829 --> 00:11:40,269
storage is going to be cluster specific

00:11:37,889 --> 00:11:42,759
it has a single you can only have one

00:11:40,269 --> 00:11:45,490
network model advanced or basic for a

00:11:42,759 --> 00:11:47,439
zone you can manage multiple zones with

00:11:45,490 --> 00:11:50,649
CloudStack you can act actually manage

00:11:47,439 --> 00:11:53,410
multiple data centers or you can set up

00:11:50,649 --> 00:11:55,300
multiple zones within a data center so

00:11:53,410 --> 00:11:58,600
we do have customers for example who are

00:11:55,300 --> 00:12:01,139
using CloudStack with you know they're

00:11:58,600 --> 00:12:05,290
managing multiple data centers with one

00:12:01,139 --> 00:12:07,389
install essentially a pod is sort of

00:12:05,290 --> 00:12:09,639
another logical definition you can use

00:12:07,389 --> 00:12:11,980
that for like a rack or a row of racks

00:12:09,639 --> 00:12:15,399
or something like that these all share a

00:12:11,980 --> 00:12:17,649
guest network you don't have to have

00:12:15,399 --> 00:12:21,819
homogeneous machines within it within a

00:12:17,649 --> 00:12:24,850
pod within a cluster usually have a

00:12:21,819 --> 00:12:27,519
maximum of 8 to 15 machines in a cluster

00:12:24,850 --> 00:12:30,100
and you do require the same cpu ram and

00:12:27,519 --> 00:12:32,290
hypervisor on those same networking type

00:12:30,100 --> 00:12:34,930
and everything that's where you're going

00:12:32,290 --> 00:12:37,300
to migrate that's the level at which you

00:12:34,930 --> 00:12:38,649
migrate machines so for example if you

00:12:37,300 --> 00:12:41,620
have an instance if you have a host

00:12:38,649 --> 00:12:43,569
machine fall over CloudStack will

00:12:41,620 --> 00:12:46,480
migrate your instance to another machine

00:12:43,569 --> 00:12:49,649
in the same cluster so it won't migrate

00:12:46,480 --> 00:12:51,910
the machine outside of that cluster okay

00:12:49,649 --> 00:12:53,529
so let's talk about secondary storage

00:12:51,910 --> 00:12:54,910
real quick secondary storage is

00:12:53,529 --> 00:12:58,480
basically we're going to keep your

00:12:54,910 --> 00:13:02,199
template snapshots and ISO images this

00:12:58,480 --> 00:13:05,259
is historically has been in FS I talked

00:13:02,199 --> 00:13:06,710
I was a Linux conf a you a couple weeks

00:13:05,259 --> 00:13:08,780
ago and I was talking to one of the pho

00:13:06,710 --> 00:13:10,220
who are using cloudstack and actually

00:13:08,780 --> 00:13:13,790
what they're doing is interesting

00:13:10,220 --> 00:13:18,380
they're using they're using NFS on top

00:13:13,790 --> 00:13:19,820
of ZFS and Solaris with CloudStack so

00:13:18,380 --> 00:13:21,680
basically they're using it because they

00:13:19,820 --> 00:13:25,880
wanted to do their own kind of snapshots

00:13:21,680 --> 00:13:28,580
and take advantage of ZFS so they're

00:13:25,880 --> 00:13:31,550
using it with that but we also have

00:13:28,580 --> 00:13:34,160
support for Swift cluster FS SEF and

00:13:31,550 --> 00:13:35,530
some others so we're getting a lot of

00:13:34,160 --> 00:13:37,400
interest from the different storage

00:13:35,530 --> 00:13:39,790
interest from the different storage

00:13:37,400 --> 00:13:44,510
players or users of those storage types

00:13:39,790 --> 00:13:46,610
giving us patches to support this it's

00:13:44,510 --> 00:13:48,200
managed by a secondary storage vm so

00:13:46,610 --> 00:13:50,870
when CloudStack starts up it'll actually

00:13:48,200 --> 00:13:52,790
start up a vm that manages shuttling

00:13:50,870 --> 00:13:55,970
images and I so's back and forth and

00:13:52,790 --> 00:13:57,950
handling snapshots so basically the

00:13:55,970 --> 00:14:01,910
management server will talk to it and it

00:13:57,950 --> 00:14:06,280
will do the work of all that primary

00:14:01,910 --> 00:14:09,260
storage we support NFS I scuzzy CL vm

00:14:06,280 --> 00:14:12,470
requires a shared mount point for

00:14:09,260 --> 00:14:14,780
hypervisors can mountain right to you

00:14:12,470 --> 00:14:15,860
can but I do not recommend this unless

00:14:14,780 --> 00:14:19,430
you really know what you're doing you

00:14:15,860 --> 00:14:22,460
can use local storage but that basically

00:14:19,430 --> 00:14:27,160
means no high availability no migration

00:14:22,460 --> 00:14:30,920
and so forth ok any questions on that

00:14:27,160 --> 00:14:32,360
all right management server we talked

00:14:30,920 --> 00:14:34,160
about this a little bit but basically

00:14:32,360 --> 00:14:36,230
any ideas what happened what what

00:14:34,160 --> 00:14:38,720
happens if the man it to your hosts and

00:14:36,230 --> 00:14:43,430
your instances if the management server

00:14:38,720 --> 00:14:46,070
dies the correct answer is absolutely

00:14:43,430 --> 00:14:48,290
nothing they keep running everything is

00:14:46,070 --> 00:14:50,180
fine the only problem is you you lose

00:14:48,290 --> 00:14:51,710
the ability to manage them at that point

00:14:50,180 --> 00:14:54,020
but all of your running instances all

00:14:51,710 --> 00:14:55,250
your jobs that are going there fine you

00:14:54,020 --> 00:14:57,290
basically just need to kick the

00:14:55,250 --> 00:15:00,650
management server back up and you're

00:14:57,290 --> 00:15:03,380
good again we've already covered the API

00:15:00,650 --> 00:15:04,520
stuff that's all everything you can do

00:15:03,380 --> 00:15:09,440
through the UI you can do through the

00:15:04,520 --> 00:15:11,780
API you have an unauthenticated API if

00:15:09,440 --> 00:15:14,120
you're doing testing or development you

00:15:11,780 --> 00:15:17,570
can turn on an unauthenticated port 80

00:15:14,120 --> 00:15:21,260
96 and basically sim commands that

00:15:17,570 --> 00:15:23,540
way authenticated API is over port 8080

00:15:21,260 --> 00:15:27,920
and you get your responses in XML or

00:15:23,540 --> 00:15:29,300
JSON depending on what you prefer one of

00:15:27,920 --> 00:15:31,670
the things people are interested in

00:15:29,300 --> 00:15:34,130
often is how does cloudstack allocate

00:15:31,670 --> 00:15:35,990
hosts so basically when I tell cloud

00:15:34,130 --> 00:15:38,300
stacks spin up an instance how does it

00:15:35,990 --> 00:15:40,880
choose to do that it depends on what you

00:15:38,300 --> 00:15:42,500
want cloudstack comes out of the box

00:15:40,880 --> 00:15:46,550
with a couple of defaults so you have

00:15:42,500 --> 00:15:48,560
first fit fit fit first and dispersal so

00:15:46,550 --> 00:15:51,470
basically you know if you're worried

00:15:48,560 --> 00:15:54,710
about power consumption you can go with

00:15:51,470 --> 00:15:56,300
a fill first allocation method so

00:15:54,710 --> 00:15:59,930
basically it'll fill up a host before

00:15:56,300 --> 00:16:01,550
you start allocating on another host you

00:15:59,930 --> 00:16:03,080
can go with first fit we're basically

00:16:01,550 --> 00:16:05,570
CloudStack just picks the first

00:16:03,080 --> 00:16:07,280
available host or you can go with the

00:16:05,570 --> 00:16:09,620
dispersal where CloudStack will try to

00:16:07,280 --> 00:16:11,090
evenly keep you know it'll spin up a vm

00:16:09,620 --> 00:16:12,320
on this machine and then the next one

00:16:11,090 --> 00:16:15,050
then the next one to keep the load

00:16:12,320 --> 00:16:17,690
balanced if you don't like those you can

00:16:15,050 --> 00:16:21,440
actually write your own it does allow

00:16:17,690 --> 00:16:24,410
for over-provisioning and you can also

00:16:21,440 --> 00:16:26,840
do allocation by operating system

00:16:24,410 --> 00:16:28,520
preference so for example I live in st.

00:16:26,840 --> 00:16:30,680
Louis we have a hosting provider they're

00:16:28,520 --> 00:16:32,450
called can t jaques that offers a

00:16:30,680 --> 00:16:35,330
service called Mira cloud that's built

00:16:32,450 --> 00:16:38,060
on CloudStack and they offer three types

00:16:35,330 --> 00:16:40,670
they basically offer kvm Zen and VMware

00:16:38,060 --> 00:16:45,590
they charge a premium for VMware and Zen

00:16:40,670 --> 00:16:47,690
over kvm and so you could you know they

00:16:45,590 --> 00:16:50,930
can basically decide where things are

00:16:47,690 --> 00:16:53,000
going to be provisioned by that you

00:16:50,930 --> 00:16:56,570
might want a provision say windows hosts

00:16:53,000 --> 00:16:59,210
on VMware but provision linux on kvm or

00:16:56,570 --> 00:17:02,000
something like that so it's really up to

00:16:59,210 --> 00:17:05,180
you we talked about high availability

00:17:02,000 --> 00:17:08,449
what we really mean by default is really

00:17:05,180 --> 00:17:10,550
fast mean time to recovery basically if

00:17:08,449 --> 00:17:12,230
a host goes down CloudStack or an

00:17:10,550 --> 00:17:13,610
instance goes down cloudstack will

00:17:12,230 --> 00:17:17,209
attempt to bring it up on another host

00:17:13,610 --> 00:17:19,820
or bring it back up again it is not true

00:17:17,209 --> 00:17:21,260
high availability because the host will

00:17:19,820 --> 00:17:25,220
be down for a minute or so while it

00:17:21,260 --> 00:17:26,630
spins up another instance we also have a

00:17:25,220 --> 00:17:29,450
redundant router so that basically

00:17:26,630 --> 00:17:30,030
anytime one of the hosts fails it has a

00:17:29,450 --> 00:17:32,730
router

00:17:30,030 --> 00:17:35,810
you're not you're not going to lose

00:17:32,730 --> 00:17:38,580
connectivity or network because of that

00:17:35,810 --> 00:17:41,900
CloudStack off boat excuse me also

00:17:38,580 --> 00:17:44,640
provides load balancing we use H a proxy

00:17:41,900 --> 00:17:48,150
and basically you can set up sort of

00:17:44,640 --> 00:17:50,370
something like elastic IP on Amazon or

00:17:48,150 --> 00:17:53,720
you can set up load balancing you can go

00:17:50,370 --> 00:17:56,490
through and basically say you know send

00:17:53,720 --> 00:17:59,670
traffic to these three instances that

00:17:56,490 --> 00:18:02,460
comes in on this port to this IP to this

00:17:59,670 --> 00:18:05,160
public IP so you can use that and you

00:18:02,460 --> 00:18:09,900
have a choice of source lb cookie or app

00:18:05,160 --> 00:18:13,380
cookie we don't support all of a che

00:18:09,900 --> 00:18:15,090
proxies load balancing types we just

00:18:13,380 --> 00:18:19,830
support the round-robin source or lease

00:18:15,090 --> 00:18:22,260
connections right now snapshots

00:18:19,830 --> 00:18:24,210
basically you can take snapshots or set

00:18:22,260 --> 00:18:27,330
up recurring snapshots it's very easy to

00:18:24,210 --> 00:18:29,790
do so basically you can you know set up

00:18:27,330 --> 00:18:31,980
a snapshot every day every hour every 15

00:18:29,790 --> 00:18:34,470
minutes whatever you need for your

00:18:31,980 --> 00:18:36,560
instances you can go in there and say

00:18:34,470 --> 00:18:39,180
keep this mini snapshot so you can have

00:18:36,560 --> 00:18:41,610
CloudStack delete snapshots after so

00:18:39,180 --> 00:18:43,080
many and you can of course go in and

00:18:41,610 --> 00:18:44,970
delete things manually if you need to

00:18:43,080 --> 00:18:47,280
clear out space or just for whatever

00:18:44,970 --> 00:18:49,200
other reason and you can also use

00:18:47,280 --> 00:18:50,850
snapshots to create new templates so

00:18:49,200 --> 00:18:53,610
basically spin up an instance from an

00:18:50,850 --> 00:18:55,260
iso create your OS and then take a

00:18:53,610 --> 00:18:59,850
snapshot and you know now you have a new

00:18:55,260 --> 00:19:02,160
template for new instances CloudStack

00:18:59,850 --> 00:19:05,190
networking gets very complicated but

00:19:02,160 --> 00:19:07,200
basically cloudstack manages DHCP VLAN

00:19:05,190 --> 00:19:09,870
allocations firewalls NAT port

00:19:07,200 --> 00:19:12,180
forwarding routing VPN load balancing

00:19:09,870 --> 00:19:15,320
all of that good stuff it can also

00:19:12,180 --> 00:19:17,760
manage some physical network hardware

00:19:15,320 --> 00:19:19,650
sadly I've had no hands-on experience

00:19:17,760 --> 00:19:22,020
with this because for some reason Citrix

00:19:19,650 --> 00:19:25,140
has chosen not to buy me an f5 or any of

00:19:22,020 --> 00:19:27,180
these fun toys for my home use not quite

00:19:25,140 --> 00:19:30,300
sure why I hear they're a little

00:19:27,180 --> 00:19:32,070
expensive we have two types of

00:19:30,300 --> 00:19:34,410
networking and cloudstack basic in

00:19:32,070 --> 00:19:38,040
advanced basically basic is one physical

00:19:34,410 --> 00:19:40,800
Network you know everything has a unique

00:19:38,040 --> 00:19:42,650
private IP you're not really pointing

00:19:40,800 --> 00:19:44,150
anything at a public IP advanced

00:19:42,650 --> 00:19:45,830
is for when you actually want to be

00:19:44,150 --> 00:19:48,770
doing things outside of your own

00:19:45,830 --> 00:19:50,750
firewall and attaching public IPS to

00:19:48,770 --> 00:19:56,350
things and getting into more complex

00:19:50,750 --> 00:19:58,820
networking setups has several networks

00:19:56,350 --> 00:20:01,220
so that you can actually split these out

00:19:58,820 --> 00:20:02,900
for performance and so forth but

00:20:01,220 --> 00:20:04,910
basically there's a management network

00:20:02,900 --> 00:20:06,830
where all that traffic is related to the

00:20:04,910 --> 00:20:09,590
management server communicating to

00:20:06,830 --> 00:20:11,720
hypervisors the private network where

00:20:09,590 --> 00:20:14,060
all the system VMS are talking to one

00:20:11,720 --> 00:20:16,550
another and so forth the public network

00:20:14,060 --> 00:20:18,230
the guest network link local for

00:20:16,550 --> 00:20:26,000
communication between the hypervisor and

00:20:18,230 --> 00:20:28,280
system VMS a lot of customers find VLANs

00:20:26,000 --> 00:20:32,120
limiting so we have implemented security

00:20:28,280 --> 00:20:34,790
groups which is basically using layer 3

00:20:32,120 --> 00:20:39,320
isolation and using CloudStack to manage

00:20:34,790 --> 00:20:40,970
all of the you know you know what you

00:20:39,320 --> 00:20:44,710
can connect to and so forth instead of

00:20:40,970 --> 00:20:47,480
using VLANs default of course is deny

00:20:44,710 --> 00:20:51,530
traffic so you have to basically open up

00:20:47,480 --> 00:20:53,900
everything that you want one of the

00:20:51,530 --> 00:20:56,710
things that some folks seem to find a

00:20:53,900 --> 00:20:59,210
little confusing with CloudStack is

00:20:56,710 --> 00:21:00,920
domains accounts and projects so

00:20:59,210 --> 00:21:03,860
basically when you install CloudStack

00:21:00,920 --> 00:21:05,720
you start with a root level domain where

00:21:03,860 --> 00:21:08,510
you can create administrator and user

00:21:05,720 --> 00:21:10,490
accounts if you want if you have

00:21:08,510 --> 00:21:12,530
customers or departments depending on

00:21:10,490 --> 00:21:14,450
what you're using cloud stack for you

00:21:12,530 --> 00:21:16,670
can create domains under that and then

00:21:14,450 --> 00:21:19,460
you can create admins in that domain or

00:21:16,670 --> 00:21:21,950
regular users and give them access to a

00:21:19,460 --> 00:21:23,660
certain you know you give the domain

00:21:21,950 --> 00:21:25,790
access to a certain amount of compute

00:21:23,660 --> 00:21:28,600
resources and storage and everything and

00:21:25,790 --> 00:21:33,200
then they can administer it within that

00:21:28,600 --> 00:21:37,010
and then you can also use projects to

00:21:33,200 --> 00:21:41,150
organize time limited things so for

00:21:37,010 --> 00:21:43,010
example if you're doing a proof of

00:21:41,150 --> 00:21:44,570
concept for your website or something

00:21:43,010 --> 00:21:46,580
like that you can set up a certain

00:21:44,570 --> 00:21:48,860
amount of resources and cloudstack for

00:21:46,580 --> 00:21:50,840
that you can put it under a project and

00:21:48,860 --> 00:21:52,310
then when the project is done when

00:21:50,840 --> 00:21:54,020
you've decided okay we don't need to

00:21:52,310 --> 00:21:55,700
worry about this anymore you don't have

00:21:54,020 --> 00:21:58,340
to worry about going through and

00:21:55,700 --> 00:21:59,809
deleting 15 different instances or

00:21:58,340 --> 00:22:01,669
something like that separately or

00:21:59,809 --> 00:22:03,080
remembering well which instance is

00:22:01,669 --> 00:22:04,669
associated with this and that in the

00:22:03,080 --> 00:22:08,840
other you basically just whack

00:22:04,669 --> 00:22:10,580
everything in the project we support

00:22:08,840 --> 00:22:14,059
ldap integration so you don't have to

00:22:10,580 --> 00:22:17,470
worry about creating new users we don't

00:22:14,059 --> 00:22:20,000
do really complex role based at

00:22:17,470 --> 00:22:22,909
role-based access control and CloudStack

00:22:20,000 --> 00:22:25,580
right now so for example it's only as

00:22:22,909 --> 00:22:28,850
fine-grained as admin and user there is

00:22:25,580 --> 00:22:31,070
no like you know well this user has just

00:22:28,850 --> 00:22:33,470
this one admin permission but not others

00:22:31,070 --> 00:22:37,070
or anything like that there is some

00:22:33,470 --> 00:22:40,250
proposals to integrate more rbac into

00:22:37,070 --> 00:22:43,000
CloudStack but hasn't made it in just

00:22:40,250 --> 00:22:45,500
yet the account system is very simple

00:22:43,000 --> 00:22:46,909
don't make it overly complicated a lot

00:22:45,500 --> 00:22:48,200
of questions I get her from people who

00:22:46,909 --> 00:22:50,659
are like well I think it should work

00:22:48,200 --> 00:22:53,149
this way so how do I do that it's it's

00:22:50,659 --> 00:22:57,679
not like that if this is as complex as

00:22:53,149 --> 00:22:59,779
it gets usage accounting basically

00:22:57,679 --> 00:23:01,340
CloudStack keep statistics for

00:22:59,779 --> 00:23:04,070
everything that you're doing within

00:23:01,340 --> 00:23:05,870
cloud stack of what you're using you can

00:23:04,070 --> 00:23:09,039
pull it into Excel or some billing

00:23:05,870 --> 00:23:11,539
solutions like a Meister stuff like that

00:23:09,039 --> 00:23:13,100
surprisingly enough Citrix has a billing

00:23:11,539 --> 00:23:17,600
solution that they will sell you if you

00:23:13,100 --> 00:23:20,539
want to do that but basically you can

00:23:17,600 --> 00:23:21,950
use that whether you're doing public or

00:23:20,539 --> 00:23:24,110
private cloud to make sure that you're

00:23:21,950 --> 00:23:30,760
keeping a good track on what everybody's

00:23:24,110 --> 00:23:30,760
using any questions so far yes sir

00:23:31,630 --> 00:23:36,370
I don't know I haven't heard any

00:23:34,840 --> 00:23:41,440
proposals on that why would you want

00:23:36,370 --> 00:23:48,070
multiple root domains okay but I mean as

00:23:41,440 --> 00:23:51,180
opposed to a domain domain like what we

00:23:48,070 --> 00:23:54,070
said you can have a domain that is root

00:23:51,180 --> 00:23:55,450
if I understand that to imply that you

00:23:54,070 --> 00:24:00,340
can only have sub domains under that

00:23:55,450 --> 00:24:02,890
domain if you go back a slide and you

00:24:00,340 --> 00:24:04,990
can so okay I think I understand so

00:24:02,890 --> 00:24:07,210
basically within a domain can I have a

00:24:04,990 --> 00:24:10,980
sub domain yeah I think you I think you

00:24:07,210 --> 00:24:14,650
elaborate but can you have multiple

00:24:10,980 --> 00:24:17,110
multiple domains period not within a

00:24:14,650 --> 00:24:18,640
zone no not multiple not multiple root

00:24:17,110 --> 00:24:22,900
domains you can have multiple domains

00:24:18,640 --> 00:24:24,910
yes so like for example you know we have

00:24:22,900 --> 00:24:27,310
a demo ins demo instance and i have a

00:24:24,910 --> 00:24:31,780
soccer net domain under that and david

00:24:27,310 --> 00:24:36,670
has a GN SI us domain under that set is

00:24:31,780 --> 00:24:38,530
it that that's yeah okay okay any other

00:24:36,670 --> 00:24:44,320
questions thought I saw another hand but

00:24:38,530 --> 00:24:46,480
maybe none okay let's talk about trying

00:24:44,320 --> 00:24:48,330
CloudStack so if you actually want to

00:24:46,480 --> 00:24:50,560
test drive it being an

00:24:48,330 --> 00:24:52,450
infrastructure-as-a-service cloud is not

00:24:50,560 --> 00:24:55,390
trivial to set up but there are a couple

00:24:52,450 --> 00:24:57,880
efforts to make it real easy to use you

00:24:55,390 --> 00:24:59,860
know for initial impressions one of the

00:24:57,880 --> 00:25:01,660
things we have is called devcloud it's a

00:24:59,860 --> 00:25:03,940
virtual box image you basically

00:25:01,660 --> 00:25:05,590
downloaded spin it up in virtualbox you

00:25:03,940 --> 00:25:08,020
can have this up and running in probably

00:25:05,590 --> 00:25:09,610
five or ten minutes there's been a fair

00:25:08,020 --> 00:25:13,420
amount of work that has gone into this

00:25:09,610 --> 00:25:15,280
it's very easy to get started with there

00:25:13,420 --> 00:25:19,960
are a couple of downsides you're doing

00:25:15,280 --> 00:25:23,230
nested virtualization in a vm it's not

00:25:19,960 --> 00:25:25,330
very speedy you know it probably will

00:25:23,230 --> 00:25:28,060
take probably about 10 or 15 minutes

00:25:25,330 --> 00:25:31,330
just to spin up its first system VMS and

00:25:28,060 --> 00:25:33,160
actually get cranking along it's good

00:25:31,330 --> 00:25:34,630
for development purposes we have a lot

00:25:33,160 --> 00:25:37,180
of developers who like to use this

00:25:34,630 --> 00:25:39,280
because they can basically push their

00:25:37,180 --> 00:25:41,020
changes in restart the management server

00:25:39,280 --> 00:25:43,930
and see whether or not it's working see

00:25:41,020 --> 00:25:45,309
whether or not they get errors but it's

00:25:43,930 --> 00:25:47,169
absolutely positive

00:25:45,309 --> 00:25:51,009
not for any kind of production use at

00:25:47,169 --> 00:25:52,570
all don't even think about it we also

00:25:51,009 --> 00:25:53,830
have some developers who run into

00:25:52,570 --> 00:25:55,960
trouble because they're trying to do

00:25:53,830 --> 00:25:57,970
real world like they're trying to test

00:25:55,960 --> 00:25:59,679
devcloud with like real world hardware

00:25:57,970 --> 00:26:01,659
and storage solutions and things like

00:25:59,679 --> 00:26:03,299
that that's where it kind of falls down

00:26:01,659 --> 00:26:05,919
it has not been for that sort of thing

00:26:03,299 --> 00:26:07,749
but it's easy set up basically just

00:26:05,919 --> 00:26:10,629
install it there's some instructions on

00:26:07,749 --> 00:26:14,350
the wiki you'll log in on your machine

00:26:10,629 --> 00:26:16,330
you know localhost 8080 client and just

00:26:14,350 --> 00:26:17,860
or you can just SSH in and you can kind

00:26:16,330 --> 00:26:19,470
of tool around and get the feel for the

00:26:17,860 --> 00:26:21,970
UI and what it does and how it works

00:26:19,470 --> 00:26:26,649
there's also a project called devcloud

00:26:21,970 --> 00:26:29,470
kvm this is basically to take a Linux

00:26:26,649 --> 00:26:31,570
host running kvm and do similar thing to

00:26:29,470 --> 00:26:32,950
devcloud but instead of running it in

00:26:31,570 --> 00:26:35,980
VirtualBox or something you're just

00:26:32,950 --> 00:26:38,499
turning the whole box into a you know a

00:26:35,980 --> 00:26:41,139
dev cloud and this runs a little bit

00:26:38,499 --> 00:26:43,659
faster a little bit better I'm not sure

00:26:41,139 --> 00:26:46,299
how mature devcloud kvm is it's only

00:26:43,659 --> 00:26:48,249
been working it's only been in

00:26:46,299 --> 00:26:49,389
production or I'm sorry they've only

00:26:48,249 --> 00:26:50,980
been working out for a couple of months

00:26:49,389 --> 00:26:54,940
the developers who have been working on

00:26:50,980 --> 00:26:57,309
it but it's also listed on the wiki

00:26:54,940 --> 00:26:59,110
there and I will give them the slides

00:26:57,309 --> 00:27:00,789
and I'll put these on SlideShare so you

00:26:59,110 --> 00:27:03,399
can find the slides and go to these

00:27:00,789 --> 00:27:05,499
lengths and test them out later there's

00:27:03,399 --> 00:27:09,249
also a CloudStack run book for running

00:27:05,499 --> 00:27:11,590
basically a single server install david

00:27:09,249 --> 00:27:13,570
nalli who some of you from Apache

00:27:11,590 --> 00:27:16,119
probably know he's very active in our

00:27:13,570 --> 00:27:18,700
project he wrote that got a lot of fixes

00:27:16,119 --> 00:27:21,429
from the community you can find that at

00:27:18,700 --> 00:27:24,999
that link there and that focuses on

00:27:21,429 --> 00:27:27,190
centos with kvm there's another run book

00:27:24,999 --> 00:27:30,399
I think Sebastian is working on a run

00:27:27,190 --> 00:27:32,919
book for a bun to in Zen so there's a

00:27:30,399 --> 00:27:35,909
couple efforts of foot to basically come

00:27:32,919 --> 00:27:38,499
up with a guide for the simplest

00:27:35,909 --> 00:27:40,650
production installs of cloudstack so you

00:27:38,499 --> 00:27:45,150
can get get it started and get a

00:27:40,650 --> 00:27:47,190
get used to it so one of the messages

00:27:45,150 --> 00:27:48,870
you may be getting is non-trivial to

00:27:47,190 --> 00:27:52,020
install and setup cloudstack it's

00:27:48,870 --> 00:27:53,430
actually I'm fairly technical but not

00:27:52,020 --> 00:27:55,020
certainly probably not the most

00:27:53,430 --> 00:27:56,820
technical person in the room when I

00:27:55,020 --> 00:27:59,190
started with Citrix last year it took me

00:27:56,820 --> 00:28:01,800
about two days to get the first install

00:27:59,190 --> 00:28:03,810
up and running that worked well largely

00:28:01,800 --> 00:28:05,520
because I deviated from the install

00:28:03,810 --> 00:28:08,160
guide just a little bit thinking oh this

00:28:05,520 --> 00:28:11,310
doesn't matter that much turns out it

00:28:08,160 --> 00:28:14,790
matters CloudStack for the moment for

00:28:11,310 --> 00:28:17,160
example does not like ipv6 and so if

00:28:14,790 --> 00:28:19,830
it's on things will not work

00:28:17,160 --> 00:28:23,730
mysteriously just because ipv6 is on the

00:28:19,830 --> 00:28:25,770
interface things like that if you have

00:28:23,730 --> 00:28:27,510
another dhcp server running on the

00:28:25,770 --> 00:28:29,520
network that will confuse the mighty

00:28:27,510 --> 00:28:32,340
heck out of clouds tax management server

00:28:29,520 --> 00:28:34,200
in the instances that's a bad thing so

00:28:32,340 --> 00:28:35,850
little things like that but it's

00:28:34,200 --> 00:28:37,320
actually not that difficult to install

00:28:35,850 --> 00:28:39,110
and get running and if you're talking

00:28:37,320 --> 00:28:42,270
about setting up a production cloud

00:28:39,110 --> 00:28:44,130
compared to other platforms it's

00:28:42,270 --> 00:28:48,690
actually fairly easy to get going once

00:28:44,130 --> 00:28:50,850
you get going that's the end of the

00:28:48,690 --> 00:28:52,680
presentation that's my contact info I'll

00:28:50,850 --> 00:28:55,680
give you if you have any questions or

00:28:52,680 --> 00:28:57,300
anything I can also try to get into the

00:28:55,680 --> 00:28:58,920
demo instance and see if we can do a

00:28:57,300 --> 00:29:01,530
quick demo or at least show you through

00:28:58,920 --> 00:29:07,920
the UI real quick but did anybody have

00:29:01,530 --> 00:29:10,250
any questions ok all right let me see if

00:29:07,920 --> 00:29:10,250
I can

00:29:13,159 --> 00:29:17,330
get a good demo going here

00:29:27,670 --> 00:29:30,870
yeah a network

00:29:53,930 --> 00:29:59,160
there we go all right so this is sort of

00:29:57,510 --> 00:30:00,690
like screenshot i showed you earlier if

00:29:59,160 --> 00:30:02,670
we have time i'll show you both of the

00:30:00,690 --> 00:30:05,760
main admin interface and then at a

00:30:02,670 --> 00:30:07,290
domain user or admin interface so this

00:30:05,760 --> 00:30:10,200
is sort of the dashboard that you get

00:30:07,290 --> 00:30:12,690
when you log in you will show you real

00:30:10,200 --> 00:30:17,250
quick any major alerts these have been

00:30:12,690 --> 00:30:27,060
sitting for a while system capacity this

00:30:17,250 --> 00:30:28,830
is actually yeah yeah we are waiting to

00:30:27,060 --> 00:30:31,380
have more public IP addresses allocated

00:30:28,830 --> 00:30:33,060
from the corporate powers of be so

00:30:31,380 --> 00:30:36,210
that's kind of why we're we're getting

00:30:33,060 --> 00:30:37,920
the red there but basically you'll get a

00:30:36,210 --> 00:30:42,570
quick look at your storage and your IP

00:30:37,920 --> 00:30:43,950
allocation and all that right here go

00:30:42,570 --> 00:30:45,570
down here you can see all of the

00:30:43,950 --> 00:30:48,030
instances that are currently running in

00:30:45,570 --> 00:30:51,120
the entire zone and then you can

00:30:48,030 --> 00:30:57,810
basically get into one of the instances

00:30:51,120 --> 00:31:00,920
and see what's going on there quick

00:30:57,810 --> 00:31:05,220
click and this is a little slow over a

00:31:00,920 --> 00:31:06,960
long-haul network in a on Wi-Fi

00:31:05,220 --> 00:31:09,480
connection like the one we have here but

00:31:06,960 --> 00:31:10,860
basically you'll pop up a console and

00:31:09,480 --> 00:31:13,140
you're right into the instance without

00:31:10,860 --> 00:31:22,680
having to SSH into anything or do

00:31:13,140 --> 00:31:25,980
anything weird so it is not the

00:31:22,680 --> 00:31:29,070
smoothest bestest virtual console I've

00:31:25,980 --> 00:31:30,570
ever seen but it does the job and it's

00:31:29,070 --> 00:31:31,920
perfectly usable if you're doing

00:31:30,570 --> 00:31:34,110
something like installing an operating

00:31:31,920 --> 00:31:36,630
system over the network so you can see

00:31:34,110 --> 00:31:39,140
everything as well any questions on this

00:31:36,630 --> 00:31:39,140
so far

00:31:42,559 --> 00:31:48,239
all right but you can get in here and

00:31:45,749 --> 00:31:51,649
kick the Machine kill it basically

00:31:48,239 --> 00:31:53,879
change the password all that good stuff

00:31:51,649 --> 00:31:55,589
storage will give you an overview of all

00:31:53,879 --> 00:31:57,659
the different storage volumes and

00:31:55,589 --> 00:32:04,609
snapshots and all that good stuff that

00:31:57,659 --> 00:32:04,609
you have here get in and manage that

00:32:06,259 --> 00:32:10,559
network you can get in here and you can

00:32:08,879 --> 00:32:12,149
set up your load balancing you can set

00:32:10,559 --> 00:32:16,049
up your firewalls and everything through

00:32:12,149 --> 00:32:17,609
here templates this will show you all

00:32:16,049 --> 00:32:24,659
the templates that are available to the

00:32:17,609 --> 00:32:26,519
entire system so also where we keep the

00:32:24,659 --> 00:32:28,409
ice oohs and everything it's very easy

00:32:26,519 --> 00:32:31,289
to register a new template or I so you

00:32:28,409 --> 00:32:32,489
basically just fill out a little wizard

00:32:31,289 --> 00:32:34,289
to add a couple pieces of information

00:32:32,489 --> 00:32:37,109
and you're good to go so like if you

00:32:34,289 --> 00:32:39,599
want to you know a new version of debian

00:32:37,109 --> 00:32:41,429
comes out and you have the URL just pop

00:32:39,599 --> 00:32:43,349
it in here and you're good to go users

00:32:41,429 --> 00:32:52,409
can start spinning up instances using

00:32:43,349 --> 00:32:53,969
that events I hate this icon because it

00:32:52,409 --> 00:32:57,479
makes it look like it's a calendar or

00:32:53,969 --> 00:32:59,849
something this is actually a log this

00:32:57,479 --> 00:33:05,279
basically will show you all of the most

00:32:59,849 --> 00:33:08,989
recent events that are interesting or

00:33:05,279 --> 00:33:08,989
you can look at the most recent alerts

00:33:12,550 --> 00:33:16,070
accounts is pretty much what it says on

00:33:14,720 --> 00:33:17,450
the tin you can come in here and manage

00:33:16,070 --> 00:33:22,580
all of your system accounts for the

00:33:17,450 --> 00:33:27,770
entire for the entire zone and then

00:33:22,580 --> 00:33:29,270
here's your your domains so basically

00:33:27,770 --> 00:33:31,730
you can set up all kinds of domains

00:33:29,270 --> 00:33:35,180
under here and you can limit resources

00:33:31,730 --> 00:33:37,040
by domain so let's say I have 10 hosts

00:33:35,180 --> 00:33:39,980
and I could spin up a hundred instances

00:33:37,040 --> 00:33:42,140
in this CloudStack install I can limit a

00:33:39,980 --> 00:33:43,970
domain to say ten instances so they can

00:33:42,140 --> 00:33:46,700
only you know this way you can give

00:33:43,970 --> 00:33:48,920
users or departments or whatever access

00:33:46,700 --> 00:33:50,360
to a very limited set of resources so

00:33:48,920 --> 00:33:52,520
that you don't have to worry about them

00:33:50,360 --> 00:33:53,930
you know it's not the same thing as

00:33:52,520 --> 00:33:55,670
giving the keys to the kingdom and

00:33:53,930 --> 00:33:57,790
vmware vsphere or something where they

00:33:55,670 --> 00:34:00,260
can spin up as many VMS as they want

00:33:57,790 --> 00:34:06,800
this way they can only spin up as many

00:34:00,260 --> 00:34:09,050
VMS as you allow them to infrastructure

00:34:06,800 --> 00:34:10,910
you can get an overview of all the zones

00:34:09,050 --> 00:34:13,130
pods and everything that's running under

00:34:10,910 --> 00:34:17,980
here you can add hosts and clusters and

00:34:13,130 --> 00:34:20,870
whatnot don't really think I have any

00:34:17,980 --> 00:34:28,910
real projects that up let's see we've

00:34:20,870 --> 00:34:30,200
got here yeah so basically yeah we

00:34:28,910 --> 00:34:32,810
haven't really done much with this one

00:34:30,200 --> 00:34:35,000
so but here you can limit the amount

00:34:32,810 --> 00:34:41,960
accounts and everything to a project for

00:34:35,000 --> 00:34:43,550
example global settings you can get in

00:34:41,960 --> 00:34:44,930
here and basically change all the major

00:34:43,550 --> 00:34:47,840
settings you would want to for example

00:34:44,930 --> 00:34:53,900
turning on the ec2 and s3 api's and

00:34:47,840 --> 00:34:56,450
whatnot and then service offerings folks

00:34:53,900 --> 00:34:58,910
are familiar with like the medium ec2

00:34:56,450 --> 00:35:00,470
instances things like that basically the

00:34:58,910 --> 00:35:02,120
different sized instances you get with

00:35:00,470 --> 00:35:03,740
Amazon and whatnot this is the same

00:35:02,120 --> 00:35:05,120
thing this is where you set up the type

00:35:03,740 --> 00:35:11,870
of instances that you want to give

00:35:05,120 --> 00:35:15,380
people so and it's pretty easy to define

00:35:11,870 --> 00:35:16,760
a new instance I used to use I used to

00:35:15,380 --> 00:35:19,940
work for a hosting company that used

00:35:16,760 --> 00:35:20,500
openvz or I'm sorry virtuozzo which you

00:35:19,940 --> 00:35:24,460
know has

00:35:20,500 --> 00:35:27,760
openvz and setting the amount of CPU and

00:35:24,460 --> 00:35:29,350
the amount of amount of ram and things

00:35:27,760 --> 00:35:30,970
that people could have with an instance

00:35:29,350 --> 00:35:34,300
was crazy because you had to do it in

00:35:30,970 --> 00:35:36,670
some weird bean counter like weird

00:35:34,300 --> 00:35:40,020
strings instead of just saying give this

00:35:36,670 --> 00:35:48,910
4 gigs of ram you know it was some weird

00:35:40,020 --> 00:35:52,630
format i'll show you starting up an

00:35:48,910 --> 00:35:54,700
instance real quick so basically it's

00:35:52,630 --> 00:35:58,210
just a six-step process you go in here

00:35:54,700 --> 00:36:01,510
and say okay i want to create a instance

00:35:58,210 --> 00:36:02,920
with a template you can have private

00:36:01,510 --> 00:36:04,390
templates you can have community

00:36:02,920 --> 00:36:06,280
templates so you know if you're in a

00:36:04,390 --> 00:36:07,750
zone and you create a template you want

00:36:06,280 --> 00:36:10,270
to share it with people you can do that

00:36:07,750 --> 00:36:11,770
or you can choose not to you can as a

00:36:10,270 --> 00:36:20,080
user you can create a template that's

00:36:11,770 --> 00:36:25,060
not public so let's say that I want to

00:36:20,080 --> 00:36:30,790
start that one up go over here say small

00:36:25,060 --> 00:36:33,870
instance I'm not going to get a data

00:36:30,790 --> 00:36:33,870
disc offering with that

00:36:36,660 --> 00:36:49,890
not going to do anything fancy with the

00:36:39,180 --> 00:36:51,630
network give it a quick name and it'll

00:36:49,890 --> 00:36:55,950
take us a couple seconds maybe a minute

00:36:51,630 --> 00:36:58,559
to spin up and there you go and of

00:36:55,950 --> 00:37:00,390
course you can do all that via the via

00:36:58,559 --> 00:37:03,650
the command line with cloud monkey you

00:37:00,390 --> 00:37:03,650
can do all that in fact all

00:37:14,230 --> 00:37:19,869
the things I've never gotten used to

00:37:16,270 --> 00:37:22,540
presenting is trying to run a trying to

00:37:19,869 --> 00:37:28,210
work with the mouse between one display

00:37:22,540 --> 00:37:30,810
I can see and one that I can't all right

00:37:28,210 --> 00:37:30,810
there we go

00:37:34,790 --> 00:37:43,410
so basically cloud monkey cloud monkey

00:37:40,920 --> 00:37:44,910
is a shell or a set of command line

00:37:43,410 --> 00:37:50,700
tools that you can use to work with

00:37:44,910 --> 00:37:53,010
CloudStack all you need to use this is

00:37:50,700 --> 00:37:56,220
basically your user secret API key and

00:37:53,010 --> 00:37:58,020
your user ID key or whatever again if

00:37:56,220 --> 00:38:00,360
you've used amazon web services you've

00:37:58,020 --> 00:38:02,850
used something similar you put that in

00:38:00,360 --> 00:38:04,470
your configuration file and then all you

00:38:02,850 --> 00:38:06,920
have to do is start this up and

00:38:04,470 --> 00:38:09,540
associate it with a specific instance

00:38:06,920 --> 00:38:13,020
and so mine is associated with the demo

00:38:09,540 --> 00:38:16,290
instance I can just say list and it'll

00:38:13,020 --> 00:38:18,990
give me you know all the type of things

00:38:16,290 --> 00:38:21,690
that I can list so i'll say list I so's

00:38:18,990 --> 00:38:23,010
and it will give me you know a list of

00:38:21,690 --> 00:38:34,200
all the different I so's that are

00:38:23,010 --> 00:38:39,960
available or i can say list sure list

00:38:34,200 --> 00:38:42,090
instance groups or whatever create you

00:38:39,960 --> 00:38:43,740
know any of these things from the

00:38:42,090 --> 00:38:45,060
command line so basically i don't even

00:38:43,740 --> 00:38:47,160
have to you know pull up a web browser

00:38:45,060 --> 00:38:50,520
to manage this it's a little more typing

00:38:47,160 --> 00:38:52,080
but it's also a command-line tool you

00:38:50,520 --> 00:38:53,670
can use it programmatically so you can

00:38:52,080 --> 00:38:59,010
basically set up scripts to do all these

00:38:53,670 --> 00:39:01,320
things any questions on that ok that's

00:38:59,010 --> 00:39:03,500
pretty much all I've got so thanks very

00:39:01,320 --> 00:39:03,500

YouTube URL: https://www.youtube.com/watch?v=gseD7x3DqT8


