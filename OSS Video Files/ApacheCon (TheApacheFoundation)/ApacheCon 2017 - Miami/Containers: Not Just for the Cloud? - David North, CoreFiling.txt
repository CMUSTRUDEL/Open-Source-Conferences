Title: Containers: Not Just for the Cloud? - David North, CoreFiling
Publication date: 2017-05-18
Playlist: ApacheCon 2017 - Miami
Description: 
	Containers: Not Just for the Cloud? - David North, CoreFiling

Taking a containerized application and deploying it to the cloud is getting easier every day: the big cloud providers all have an answer, and it's the natural environment for Docker et al. But what about those of us whose customers still want applications on-premises instead of in the cloud?

In this talk, David North will summarize his real-world experience in deploying containerized applications on-premises, including in environments with no access to the public internet.

About David North
David North works for CoreFiling, a UK software SME specialising in business and regulatory reporting. Lots of their work involves getting data to and from Excel spreadsheets, which led to David's involvement in the Apache POI project, of which he is a PMC member. He also maintains some smaller open source projects of his own on BitBucket. David has attended ApacheCon twice before, but this is his first time speaking. He has previously spoken at a number of geek nights and smaller meet ups. www.dnorth.net
Captions: 
	00:00:00,560 --> 00:00:05,339
all right well good morning Apache con

00:00:03,330 --> 00:00:09,900
thank you all for turning out for her

00:00:05,339 --> 00:00:12,300
stalk of the day so um about me I'm

00:00:09,900 --> 00:00:15,030
David North I work for a UK based

00:00:12,300 --> 00:00:17,609
company called core foiling we do our

00:00:15,030 --> 00:00:20,130
development mostly in Java and we work

00:00:17,609 --> 00:00:23,400
for people like financial regulators

00:00:20,130 --> 00:00:25,980
banks insurers governments so sort of

00:00:23,400 --> 00:00:28,380
big conservative financial institutions

00:00:25,980 --> 00:00:31,080
which some of you might might know tends

00:00:28,380 --> 00:00:32,579
to put some constraints on what you can

00:00:31,080 --> 00:00:35,820
and can't tell them when it comes to IT

00:00:32,579 --> 00:00:37,850
and in the last year or so we've

00:00:35,820 --> 00:00:40,050
ventured the micro services and

00:00:37,850 --> 00:00:43,710
containers and docker and those sorts of

00:00:40,050 --> 00:00:45,930
things so this talk is based on what

00:00:43,710 --> 00:00:47,850
we've learned and what we've worked out

00:00:45,930 --> 00:00:50,760
along that journey and they're still

00:00:47,850 --> 00:00:52,680
working out so a statement not a

00:00:50,760 --> 00:00:55,379
question we all love docker well maybe

00:00:52,680 --> 00:00:58,109
and I'm not going to go into a huge

00:00:55,379 --> 00:00:59,910
amount of detail about why developing

00:00:58,109 --> 00:01:03,840
applications as lots of little services

00:00:59,910 --> 00:01:06,060
can work well um it has its pros and

00:01:03,840 --> 00:01:07,850
cons but I'm doing it I'm assuming at

00:01:06,060 --> 00:01:10,380
least some of you are doing it as well

00:01:07,850 --> 00:01:14,070
quick show of hands who's using docker

00:01:10,380 --> 00:01:18,270
for anything quite a few of you anyone

00:01:14,070 --> 00:01:20,040
using rockets were lesser-known than me

00:01:18,270 --> 00:01:22,229
neither but I thought it deserved a

00:01:20,040 --> 00:01:23,430
mention since Cuba Nettie's which I'll

00:01:22,229 --> 00:01:25,229
be talking about quite a lot does

00:01:23,430 --> 00:01:31,560
support rocket containers as well as

00:01:25,229 --> 00:01:33,780
docker so I know how many of you are

00:01:31,560 --> 00:01:34,710
running a containerized application and

00:01:33,780 --> 00:01:38,909
selling it to people as a

00:01:34,710 --> 00:01:43,590
software-as-a-service thing okay well we

00:01:38,909 --> 00:01:45,780
are and how many of you are running

00:01:43,590 --> 00:01:49,890
containers on premises for yourselves or

00:01:45,780 --> 00:01:51,420
for customers more of you so perhaps

00:01:49,890 --> 00:01:54,149
you've actually already gone in the same

00:01:51,420 --> 00:01:55,649
direction as our thinking and how do

00:01:54,149 --> 00:01:58,009
people orchestrate their containers who

00:01:55,649 --> 00:01:59,820
just runs them using docker compose and

00:01:58,009 --> 00:02:03,990
nothing more complicated than that

00:01:59,820 --> 00:02:07,979
anyone using cuban s is one of two hands

00:02:03,990 --> 00:02:09,599
and anyone do something else nice those

00:02:07,979 --> 00:02:11,849
of course yes we're at Apache con how

00:02:09,599 --> 00:02:13,800
could I forget and what about the stuff

00:02:11,849 --> 00:02:17,640
built into dock or anyone using

00:02:13,800 --> 00:02:19,980
their latest bits and pieces okay

00:02:17,640 --> 00:02:23,220
well there are a whole bunch of ways

00:02:19,980 --> 00:02:24,960
that you can do these things and a lot

00:02:23,220 --> 00:02:26,610
of them there's brilliant support for on

00:02:24,960 --> 00:02:29,370
big cloud providers if you want to keep

00:02:26,610 --> 00:02:30,960
a nexus cluster on AWS you there are

00:02:29,370 --> 00:02:33,030
tools ships for this you give them your

00:02:30,960 --> 00:02:36,120
AWS API key and say I want to cluster

00:02:33,030 --> 00:02:37,500
about this much hardware you type one

00:02:36,120 --> 00:02:39,690
command and it goes off and makes you

00:02:37,500 --> 00:02:42,240
one and if you want one on the zero it's

00:02:39,690 --> 00:02:43,950
even easier Microsoft have got a native

00:02:42,240 --> 00:02:46,500
support saying I just I want to give an

00:02:43,950 --> 00:02:49,050
SS cluster on my Azure cloud click click

00:02:46,500 --> 00:02:50,460
there you go I don't know if that's a

00:02:49,050 --> 00:02:52,500
piece yet but given if I've heard about

00:02:50,460 --> 00:02:55,650
is Apache Khan last time around it might

00:02:52,500 --> 00:02:57,150
well be and maybe you get your ops team

00:02:55,650 --> 00:02:59,310
to do deployment or maybe you've

00:02:57,150 --> 00:03:01,340
embraced the joys of DevOps and people

00:02:59,310 --> 00:03:03,750
who build things should run them but

00:03:01,340 --> 00:03:06,450
what people don't seem to talk about at

00:03:03,750 --> 00:03:08,880
least not online is what happens if your

00:03:06,450 --> 00:03:12,360
customer doesn't want or can't have

00:03:08,880 --> 00:03:14,370
software as a service what if they need

00:03:12,360 --> 00:03:19,140
your application to come to them needs

00:03:14,370 --> 00:03:21,090
to be on their premises so the situation

00:03:19,140 --> 00:03:22,890
we often find given our clients of

00:03:21,090 --> 00:03:25,230
people like the UK government to have

00:03:22,890 --> 00:03:26,910
lots of sensitive tax day so that

00:03:25,230 --> 00:03:29,790
they're virtually prohibited by law from

00:03:26,910 --> 00:03:31,260
putting in a public cloud and what we

00:03:29,790 --> 00:03:33,660
often find is they say right this is our

00:03:31,260 --> 00:03:34,830
production environment there's no access

00:03:33,660 --> 00:03:37,290
to the public internet from these

00:03:34,830 --> 00:03:39,570
machines and there never will be usually

00:03:37,290 --> 00:03:41,130
that's only a back in frustration but

00:03:39,570 --> 00:03:42,900
just occasionally you get someone really

00:03:41,130 --> 00:03:44,820
paranoid whose front-end machines can't

00:03:42,900 --> 00:03:46,410
access the public Internet at which

00:03:44,820 --> 00:03:47,489
point your front-end developers need to

00:03:46,410 --> 00:03:49,170
think a bit hard because they've

00:03:47,489 --> 00:03:50,910
probably pulled in all sorts of fonts

00:03:49,170 --> 00:03:51,840
and things that are hosted by Google and

00:03:50,910 --> 00:03:53,220
you don't want to see what your

00:03:51,840 --> 00:03:58,250
application looks like when you cut

00:03:53,220 --> 00:04:00,239
those off but focusing on the backend

00:03:58,250 --> 00:04:02,100
what's it what's the next challenge

00:04:00,239 --> 00:04:04,590
these sorts of big enterprise your

00:04:02,100 --> 00:04:07,110
clients often go for Windows as their

00:04:04,590 --> 00:04:09,270
first choice operating system but we

00:04:07,110 --> 00:04:10,890
found if we are so nicely smile sweetly

00:04:09,270 --> 00:04:12,060
give a bit of a push they've got some

00:04:10,890 --> 00:04:15,269
Linux in there somewhere

00:04:12,060 --> 00:04:17,700
it's probably Red Hat so as long as it's

00:04:15,269 --> 00:04:19,109
Red Hat seven then this conversation can

00:04:17,700 --> 00:04:21,690
continue if you're trying to support

00:04:19,109 --> 00:04:23,370
docker on Red Hat 6 it's a bit of a

00:04:21,690 --> 00:04:26,039
nightmare and it's not officially

00:04:23,370 --> 00:04:26,590
supported but thankfully we found Red

00:04:26,039 --> 00:04:28,360
Hat 7

00:04:26,590 --> 00:04:32,440
in the cases where we've been asked to

00:04:28,360 --> 00:04:34,449
do something so here's a rundown of what

00:04:32,440 --> 00:04:37,330
we have to find answers to to get our

00:04:34,449 --> 00:04:38,979
containerized application running on one

00:04:37,330 --> 00:04:42,490
of these big enterprise client sites

00:04:38,979 --> 00:04:44,160
with no public internet so question one

00:04:42,490 --> 00:04:46,150
how do we get the docker images there

00:04:44,160 --> 00:04:47,380
obviously they can't pull them from some

00:04:46,150 --> 00:04:49,900
sort of registry over the public

00:04:47,380 --> 00:04:52,000
Internet given that we're using cuba

00:04:49,900 --> 00:04:53,590
Nettie's how do we install the cluster

00:04:52,000 --> 00:04:57,280
that functions without the public

00:04:53,590 --> 00:04:59,050
internet databases our application uses

00:04:57,280 --> 00:05:00,280
some of them should we stick them inside

00:04:59,050 --> 00:05:03,850
the cluster and treat them as a black

00:05:00,280 --> 00:05:05,530
box or not how do upgrades take place

00:05:03,850 --> 00:05:07,510
how do we stay on top of security

00:05:05,530 --> 00:05:09,220
updates and patching these are often

00:05:07,510 --> 00:05:11,380
things that you have to have answers to

00:05:09,220 --> 00:05:14,740
on the RFP before you get anywhere near

00:05:11,380 --> 00:05:16,540
actually doing it how did the on-site IT

00:05:14,740 --> 00:05:18,010
team manage all this they might not have

00:05:16,540 --> 00:05:19,740
been exposed to containers before so

00:05:18,010 --> 00:05:24,250
that can be a challenge

00:05:19,740 --> 00:05:30,070
logging and backup and recovery so let's

00:05:24,250 --> 00:05:32,050
take these one at a time so first of all

00:05:30,070 --> 00:05:33,520
how do we get our docker images to the

00:05:32,050 --> 00:05:36,030
client site let's pretend for a moment

00:05:33,520 --> 00:05:38,620
that they've got their cluster running

00:05:36,030 --> 00:05:40,419
how do we actually get our application

00:05:38,620 --> 00:05:41,860
there so internally or on your cloud

00:05:40,419 --> 00:05:43,210
it's easy you know you have a local

00:05:41,860 --> 00:05:45,280
registry full of your docker images

00:05:43,210 --> 00:05:47,620
maybe you push them into Amazon or as

00:05:45,280 --> 00:05:49,150
yours registry service and then you pull

00:05:47,620 --> 00:05:51,610
them down onto your production system

00:05:49,150 --> 00:05:53,229
from there in this case we have to get a

00:05:51,610 --> 00:05:55,870
bit more creative and we have to reach

00:05:53,229 --> 00:06:01,240
into a dusty corner of docker that you

00:05:55,870 --> 00:06:03,130
may not have seen before so I think I

00:06:01,240 --> 00:06:04,630
might want to go to mirrored monitors to

00:06:03,130 --> 00:06:08,650
make this at all possible just give me a

00:06:04,630 --> 00:06:11,080
moment yes you can see the same thing I

00:06:08,650 --> 00:06:12,849
can right so there's a lesser-known part

00:06:11,080 --> 00:06:18,160
of docker or to lesser-known commands

00:06:12,849 --> 00:06:19,450
called load and save so save does kind

00:06:18,160 --> 00:06:20,830
of what the name suggests which allows

00:06:19,450 --> 00:06:22,660
you to take some docker images that

00:06:20,830 --> 00:06:24,669
you've got loads Lee and dump them to a

00:06:22,660 --> 00:06:28,180
tar file and then the mirror image

00:06:24,669 --> 00:06:29,590
command is load so you can see what

00:06:28,180 --> 00:06:34,840
docker images you've got on your local

00:06:29,590 --> 00:06:37,380
machine by doing this and if I do a

00:06:34,840 --> 00:06:37,380
quick save

00:06:42,699 --> 00:06:47,959
run it through gzip because these things

00:06:44,989 --> 00:06:49,399
do get quite sizable this is some

00:06:47,959 --> 00:06:52,099
revealing the innards of how docker

00:06:49,399 --> 00:06:54,859
works that each image is sent very easy

00:06:52,099 --> 00:06:56,539
to capture as a tar and in order to save

00:06:54,859 --> 00:06:58,149
that image it's got to produce you at

00:06:56,539 --> 00:07:00,739
all but potentially has all of the

00:06:58,149 --> 00:07:02,659
further up images that build a sprint

00:07:00,739 --> 00:07:05,089
elasticsearch so if it extends from some

00:07:02,659 --> 00:07:12,829
Linux image it's got to save all that as

00:07:05,089 --> 00:07:15,169
well okay well you get the picture let's

00:07:12,829 --> 00:07:16,999
not sit and watch that complete but just

00:07:15,169 --> 00:07:20,989
to show this really does work if I turn

00:07:16,999 --> 00:07:22,189
off my Wi-Fi for a moment now one of the

00:07:20,989 --> 00:07:27,469
first things you do when you install

00:07:22,189 --> 00:07:28,609
docker is this now normally of course if

00:07:27,469 --> 00:07:30,139
I've been connected to the public

00:07:28,609 --> 00:07:31,969
Internet you would have seen it just go

00:07:30,139 --> 00:07:33,349
is you haven't got hello world locally

00:07:31,969 --> 00:07:35,089
so I'll go and talk to the doctor hub

00:07:33,349 --> 00:07:36,829
I'll pull it down and then we're up and

00:07:35,089 --> 00:07:40,309
running can't do that there's no

00:07:36,829 --> 00:07:47,749
internet however earlier on and see that

00:07:40,309 --> 00:07:48,979
I saved one and so as per the command we

00:07:47,749 --> 00:07:50,749
haven't got the hello world image

00:07:48,979 --> 00:08:00,919
locally but it looks like I saved a tour

00:07:50,749 --> 00:08:02,869
of it earlier so that loaded nice and

00:08:00,919 --> 00:08:04,339
quickly and if we do docker images we

00:08:02,869 --> 00:08:06,109
can see a look at the hello world image

00:08:04,339 --> 00:08:08,029
is there and now if I try that again

00:08:06,109 --> 00:08:11,239
still no internet access by the way just

00:08:08,029 --> 00:08:17,809
to prove I'm not cheating really isn't

00:08:11,239 --> 00:08:20,749
and so there you are

00:08:17,809 --> 00:08:23,689
you can dub docker images take them

00:08:20,749 --> 00:08:24,679
probably offline to the customer and get

00:08:23,689 --> 00:08:26,959
them to load them in at the other end

00:08:24,679 --> 00:08:30,849
never underestimate the band width of a

00:08:26,959 --> 00:08:33,139
USB Drive that you've sent by FedEx

00:08:30,849 --> 00:08:36,769
let's just go back to mirrored screams

00:08:33,139 --> 00:08:37,279
so I can see my notes bear with me for a

00:08:36,769 --> 00:08:43,029
moment

00:08:37,279 --> 00:08:43,029
Oh technology

00:08:43,089 --> 00:08:47,300
there's a wonderful bug where when I get

00:08:45,649 --> 00:08:49,189
this right my laptop screen will go

00:08:47,300 --> 00:08:51,170
blank because it sets the brightness to

00:08:49,189 --> 00:08:53,779
zero when I'm just going to unplug and

00:08:51,170 --> 00:09:02,120
replug sorry this is not the smoothest

00:08:53,779 --> 00:09:04,459
of experiences that's better right

00:09:02,120 --> 00:09:08,439
so that's docker load and save so that's

00:09:04,459 --> 00:09:10,879
one of the major hurdles taken care of

00:09:08,439 --> 00:09:16,329
and if I could just start my slides

00:09:10,879 --> 00:09:16,329
again then we'd be good to continue

00:09:19,649 --> 00:09:26,019
yeah there we go right okay so we've got

00:09:24,819 --> 00:09:28,209
the images there we've solved that

00:09:26,019 --> 00:09:29,800
problem now how do we actually get a key

00:09:28,209 --> 00:09:32,380
Vanessa's cluster on this client site

00:09:29,800 --> 00:09:33,610
where there's no internet access so what

00:09:32,380 --> 00:09:35,380
do we need to get the client to give us

00:09:33,610 --> 00:09:37,240
well follow the system requirements will

00:09:35,380 --> 00:09:38,620
need at least two machines let's say

00:09:37,240 --> 00:09:42,250
they're running CentOS which is what I

00:09:38,620 --> 00:09:46,269
did for my little trial run of this very

00:09:42,250 --> 00:09:47,560
similar to Red Hat as you all know first

00:09:46,269 --> 00:09:49,149
thing you need to do is get the client

00:09:47,560 --> 00:09:51,130
to make sure when you get there the

00:09:49,149 --> 00:09:52,990
machines have got docker install and

00:09:51,130 --> 00:09:55,420
they have got cuba Nettie's installed so

00:09:52,990 --> 00:09:57,160
you need to tell them to follow the

00:09:55,420 --> 00:09:59,220
instructions of the website install

00:09:57,160 --> 00:10:01,930
those using yum there's no way around

00:09:59,220 --> 00:10:03,490
needing some internet access at least to

00:10:01,930 --> 00:10:05,529
those repositories to make that happen

00:10:03,490 --> 00:10:06,880
but we tend to find as long as we're

00:10:05,529 --> 00:10:08,709
saying well you'll need that during the

00:10:06,880 --> 00:10:10,540
installation you can prepare the machine

00:10:08,709 --> 00:10:12,850
images and then you can cut the internet

00:10:10,540 --> 00:10:16,509
off the clients have always been happy

00:10:12,850 --> 00:10:18,339
with that as a workaround and of course

00:10:16,509 --> 00:10:19,959
you have any networking in place between

00:10:18,339 --> 00:10:23,139
your two or more machines just a private

00:10:19,959 --> 00:10:24,550
network not the public Internet and so

00:10:23,139 --> 00:10:26,680
once you've got them past this bit

00:10:24,550 --> 00:10:31,300
there's no internet access in what

00:10:26,680 --> 00:10:33,579
follows so the final thing to make it

00:10:31,300 --> 00:10:35,470
all work yes you need to you need to

00:10:33,579 --> 00:10:37,660
take the docker images with you so

00:10:35,470 --> 00:10:38,980
you'll find and annoyingly the only way

00:10:37,660 --> 00:10:40,389
to work this out at the moment is by

00:10:38,980 --> 00:10:42,069
doing it for yourself with internet

00:10:40,389 --> 00:10:44,980
access and then looking at what images

00:10:42,069 --> 00:10:46,569
have appeared but we find that cuba

00:10:44,980 --> 00:10:49,810
Nettie's needs to pull some docker

00:10:46,569 --> 00:10:51,370
images in order to work so the best

00:10:49,810 --> 00:10:53,380
thing to do is run through this when it

00:10:51,370 --> 00:10:55,689
has got internet access and then do

00:10:53,380 --> 00:10:57,670
docker images you can see what it's

00:10:55,689 --> 00:10:59,920
downloaded onto the machine you save all

00:10:57,670 --> 00:11:01,839
those with docker save and once you've

00:10:59,920 --> 00:11:03,850
loaded those into the target machines at

00:11:01,839 --> 00:11:05,680
the other end it will all spray into

00:11:03,850 --> 00:11:10,000
life and start working and shouldn't

00:11:05,680 --> 00:11:12,250
need the public internet so then you can

00:11:10,000 --> 00:11:15,250
for example use cube ATM to initialize

00:11:12,250 --> 00:11:16,269
your cluster and of course you need to

00:11:15,250 --> 00:11:18,040
make sure that whatever you're deploying

00:11:16,269 --> 00:11:18,819
into the cluster doesn't need public

00:11:18,040 --> 00:11:21,189
Internet access

00:11:18,819 --> 00:11:22,959
it's fortunately quite a lot harder to

00:11:21,189 --> 00:11:24,699
slip up in back-end development than in

00:11:22,959 --> 00:11:28,180
front end when it comes to accidentally

00:11:24,699 --> 00:11:30,160
relying on somebody else's URLs a few a

00:11:28,180 --> 00:11:33,130
few tricks we've found over the years is

00:11:30,160 --> 00:11:33,310
when we run our tests using functional

00:11:33,130 --> 00:11:35,620
we

00:11:33,310 --> 00:11:37,900
tend to install a security manager so

00:11:35,620 --> 00:11:39,730
that we spot and block any tests that

00:11:37,900 --> 00:11:41,470
are relying on the public Internet it's

00:11:39,730 --> 00:11:43,390
obviously a reliability problem anyway

00:11:41,470 --> 00:11:47,200
so it's much better if we can make sure

00:11:43,390 --> 00:11:48,850
tests and code don't do that and four

00:11:47,200 --> 00:11:50,320
bits that really do need to do that you

00:11:48,850 --> 00:12:00,100
won't have some kind of option to work

00:11:50,320 --> 00:12:01,450
from an offline cache so um one of the

00:12:00,100 --> 00:12:03,190
elephants in the room you get this nice

00:12:01,450 --> 00:12:04,660
message printed out by cue Bailey I'm

00:12:03,190 --> 00:12:10,000
going this is bisa don't use it in

00:12:04,660 --> 00:12:13,180
production don't but it was alpha in key

00:12:10,000 --> 00:12:15,460
Vanessa's 1.5 it went to be star in 1.6

00:12:13,180 --> 00:12:16,990
we're hoping that the forthcoming 1.7

00:12:15,460 --> 00:12:19,900
will make it production ready

00:12:16,990 --> 00:12:21,310
and once you've initialized the cluster

00:12:19,900 --> 00:12:24,610
you're not actually relying on this tool

00:12:21,310 --> 00:12:26,920
at all so it's a question of saying to

00:12:24,610 --> 00:12:28,420
yourself well where's the risk you can

00:12:26,920 --> 00:12:29,920
look at what a shake of cluster it's

00:12:28,420 --> 00:12:31,300
that's lap but once you've used the besa

00:12:29,920 --> 00:12:34,540
tool to do the install you're not

00:12:31,300 --> 00:12:36,490
reliant on this after that and it is by

00:12:34,540 --> 00:12:39,100
far the simplest option for doing this

00:12:36,490 --> 00:12:41,320
so for the moment our strategy is we do

00:12:39,100 --> 00:12:42,880
use it and we hope to see it goes to

00:12:41,320 --> 00:12:48,040
from business or the real thing very

00:12:42,880 --> 00:12:49,660
soon now what about upgrading

00:12:48,040 --> 00:12:52,570
unfortunately this is one of the things

00:12:49,660 --> 00:12:55,510
but QA DM doesn't do yet or doesn't make

00:12:52,570 --> 00:12:56,830
easy however if you think that's the

00:12:55,510 --> 00:12:58,450
situation I described where you've got

00:12:56,830 --> 00:12:59,980
your big enterprise client you're

00:12:58,450 --> 00:13:01,720
deploying your cluster for them and

00:12:59,980 --> 00:13:05,140
putting your containerized application

00:13:01,720 --> 00:13:06,820
on it most of the time what you're doing

00:13:05,140 --> 00:13:08,700
here is something very expecting to run

00:13:06,820 --> 00:13:10,990
in production for a number of years and

00:13:08,700 --> 00:13:14,290
probably only take security critical

00:13:10,990 --> 00:13:15,700
fixes and occasional updates and given

00:13:14,290 --> 00:13:17,530
them there's no public internet in this

00:13:15,700 --> 00:13:20,530
scenario one of the biggest attack

00:13:17,530 --> 00:13:25,060
vectors for older software is to take an

00:13:20,530 --> 00:13:27,400
away straightaway so not too much of a

00:13:25,060 --> 00:13:28,600
concern and we don't have a brilliant

00:13:27,400 --> 00:13:30,190
answer on that yet but of course the

00:13:28,600 --> 00:13:32,890
other thing to think about which I'll

00:13:30,190 --> 00:13:34,959
cover later is that if you put all the

00:13:32,890 --> 00:13:37,270
important state on volumes or in

00:13:34,959 --> 00:13:39,279
databases outside the cluster then the

00:13:37,270 --> 00:13:41,080
cluster itself as a transient thing and

00:13:39,279 --> 00:13:44,250
blowing it away and creating a fresh one

00:13:41,080 --> 00:13:44,250
isn't such a big job

00:13:45,770 --> 00:13:51,090
so that was something I alluded to what

00:13:49,650 --> 00:13:52,890
lives inside the foster and what lives

00:13:51,090 --> 00:13:54,090
outside if you've gone to all the

00:13:52,890 --> 00:13:56,100
trouble of making its luster of

00:13:54,090 --> 00:13:57,720
containers your first instinct would

00:13:56,100 --> 00:13:59,580
presumably be well let's put absolutely

00:13:57,720 --> 00:14:01,380
everything in there because then it can

00:13:59,580 --> 00:14:03,000
be any old docker container doesn't

00:14:01,380 --> 00:14:04,680
matter what's in it doesn't matter don't

00:14:03,000 --> 00:14:05,700
need to impose any system requirements

00:14:04,680 --> 00:14:08,820
on the client that they don't already

00:14:05,700 --> 00:14:11,400
have but again this is where reality

00:14:08,820 --> 00:14:13,950
comes up and often in these kind of

00:14:11,400 --> 00:14:15,300
enterprises the database admins are

00:14:13,950 --> 00:14:17,280
quite protective of their little corner

00:14:15,300 --> 00:14:19,320
of the world and the idea that you can

00:14:17,280 --> 00:14:20,880
bypass the need for them by just

00:14:19,320 --> 00:14:23,130
sticking some databases in a container

00:14:20,880 --> 00:14:24,660
inside your cluster doesn't go down well

00:14:23,130 --> 00:14:26,850
with them at all and for practical

00:14:24,660 --> 00:14:28,560
reasons as well if your database is one

00:14:26,850 --> 00:14:30,630
of the most i/o intensive parts of the

00:14:28,560 --> 00:14:31,950
application you don't necessarily want

00:14:30,630 --> 00:14:34,560
to be running it inside a bunch of

00:14:31,950 --> 00:14:36,840
docker containers with volumes attached

00:14:34,560 --> 00:14:38,280
to them sometimes running that directly

00:14:36,840 --> 00:14:40,170
on physical hardware might be better

00:14:38,280 --> 00:14:41,880
sometimes the client might have a

00:14:40,170 --> 00:14:43,440
preferred database in which case they'll

00:14:41,880 --> 00:14:44,820
have a cluster of it and they'll have it

00:14:43,440 --> 00:14:47,250
backed up and they'll have it highly

00:14:44,820 --> 00:14:55,170
available so let's take advantage of

00:14:47,250 --> 00:14:57,120
that so often we we do say all right we

00:14:55,170 --> 00:14:58,620
can support we use hibernate we can

00:14:57,120 --> 00:15:01,500
support anything you like the relational

00:14:58,620 --> 00:15:03,390
parts of this so you might as well use

00:15:01,500 --> 00:15:04,890
your existing database cluster and we'll

00:15:03,390 --> 00:15:06,990
just configure our containers to point

00:15:04,890 --> 00:15:08,310
assets so the only thing you then need

00:15:06,990 --> 00:15:10,290
to watch out for is obviously they'll

00:15:08,310 --> 00:15:12,960
need to be some way of getting network

00:15:10,290 --> 00:15:15,360
wise from the cluster to wherever they

00:15:12,960 --> 00:15:17,190
keep their databases and they'll need to

00:15:15,360 --> 00:15:19,200
be no firewalls in the way of that

00:15:17,190 --> 00:15:20,880
particular access which is not difficult

00:15:19,200 --> 00:15:22,830
to arrange but in this kind of

00:15:20,880 --> 00:15:24,360
environment it may be in the most

00:15:22,830 --> 00:15:25,800
extreme case that you have to submit

00:15:24,360 --> 00:15:28,170
your written request to the firewall

00:15:25,800 --> 00:15:29,430
team two weeks in advance not discover

00:15:28,170 --> 00:15:33,930
when you're on site that you haven't

00:15:29,430 --> 00:15:35,460
done so so what about upgrading the

00:15:33,930 --> 00:15:39,870
application running in these containers

00:15:35,460 --> 00:15:41,460
itself well why don't we just do another

00:15:39,870 --> 00:15:44,610
docker save and ship them a nice big

00:15:41,460 --> 00:15:46,350
bundle of images you'll find if you do

00:15:44,610 --> 00:15:48,510
this that it gets quite fat quite

00:15:46,350 --> 00:15:49,770
quickly because the total file system of

00:15:48,510 --> 00:15:52,020
the container building all the way back

00:15:49,770 --> 00:15:55,950
up to whatever it extended from can be

00:15:52,020 --> 00:15:57,120
quite big but as I mentioned before the

00:15:55,950 --> 00:15:59,970
bandwidth of FedEx

00:15:57,120 --> 00:16:02,089
USB Drive is pretty good and if there's

00:15:59,970 --> 00:16:04,350
no internet access at the other end

00:16:02,089 --> 00:16:07,350
that's often the best way to get things

00:16:04,350 --> 00:16:10,110
there anyway so what we actually do in

00:16:07,350 --> 00:16:11,399
houses as well as having a continuous

00:16:10,110 --> 00:16:13,709
deployment of our containerized

00:16:11,399 --> 00:16:16,230
applications we also build an actual

00:16:13,709 --> 00:16:18,509
build artifact for each version which is

00:16:16,230 --> 00:16:20,189
all of our different micro services as a

00:16:18,509 --> 00:16:21,959
docker image bundle that you can

00:16:20,189 --> 00:16:25,620
download and walk away with as a

00:16:21,959 --> 00:16:27,480
self-contained thing the other

00:16:25,620 --> 00:16:29,699
possibilities that you could try and run

00:16:27,480 --> 00:16:31,079
a docker registry and you could say to

00:16:29,699 --> 00:16:33,149
the client well look if you've just

00:16:31,079 --> 00:16:35,490
allowed one bit of our bad into this

00:16:33,149 --> 00:16:37,259
access to our private registry over here

00:16:35,490 --> 00:16:39,749
then you could download the images from

00:16:37,259 --> 00:16:41,370
that or midwife's be simple but it's a

00:16:39,749 --> 00:16:43,139
bit messy running a docker registry that

00:16:41,370 --> 00:16:44,639
requires authentication if you're in a

00:16:43,139 --> 00:16:45,990
full-on commercial setting anyway then

00:16:44,639 --> 00:16:47,970
it might not be such a bad thing to have

00:16:45,990 --> 00:16:49,949
to explicitly ship the binaries to

00:16:47,970 --> 00:16:53,970
people maybe you already have a system

00:16:49,949 --> 00:16:55,529
for doing that with other software so

00:16:53,970 --> 00:16:57,660
security updates here's another one that

00:16:55,529 --> 00:16:59,069
people never seem to talk about the

00:16:57,660 --> 00:17:02,249
answer if you're just running containers

00:16:59,069 --> 00:17:04,230
on AWS or on one deployment wherever you

00:17:02,249 --> 00:17:06,329
like is well you rebuild them nice and

00:17:04,230 --> 00:17:07,770
often and by doing so you make sure that

00:17:06,329 --> 00:17:09,870
whatever they're based on is always the

00:17:07,770 --> 00:17:11,819
newest the latest and greatest and that

00:17:09,870 --> 00:17:14,640
just naturally rolls in all the patches

00:17:11,819 --> 00:17:18,720
make sure that there are no problems no

00:17:14,640 --> 00:17:19,980
security holes lurking in that but what

00:17:18,720 --> 00:17:21,089
if they going to be running on a client

00:17:19,980 --> 00:17:23,520
site for some time

00:17:21,089 --> 00:17:25,380
so we experimented with a few things on

00:17:23,520 --> 00:17:26,880
this we actually at one point got as far

00:17:25,380 --> 00:17:29,340
as having someone spend half a day

00:17:26,880 --> 00:17:31,140
working on if you could run yum update

00:17:29,340 --> 00:17:33,240
or apt-get update inside your docker

00:17:31,140 --> 00:17:35,730
containers and then run commits but

00:17:33,240 --> 00:17:37,200
that's really messy and also suffers

00:17:35,730 --> 00:17:38,970
from the fact that if there's no public

00:17:37,200 --> 00:17:41,640
internet access then you can't do that

00:17:38,970 --> 00:17:44,360
so we took a compromise approach our

00:17:41,640 --> 00:17:46,590
build process monitors every docker file

00:17:44,360 --> 00:17:48,480
fortunately you can only extend from one

00:17:46,590 --> 00:17:50,190
base image and that has to be the first

00:17:48,480 --> 00:17:52,770
line in the file so it's quite easy to

00:17:50,190 --> 00:17:55,140
run an audit over all of those and say

00:17:52,770 --> 00:17:57,260
this is our approved list of base images

00:17:55,140 --> 00:18:00,570
there's only about five of them open JDK

00:17:57,260 --> 00:18:03,899
Debian one to others you must extend

00:18:00,570 --> 00:18:05,549
from one of these and then we monitor we

00:18:03,899 --> 00:18:07,070
use something like Blackduck to monitor

00:18:05,549 --> 00:18:08,880
the software inside them for

00:18:07,070 --> 00:18:10,650
vulnerabilities coming up in the Java

00:18:08,880 --> 00:18:13,110
and we monitor the upstream a

00:18:10,650 --> 00:18:14,750
this security critical problems in the

00:18:13,110 --> 00:18:18,750
software we're taking in the base images

00:18:14,750 --> 00:18:20,970
so in the relatively rare but it does

00:18:18,750 --> 00:18:22,500
happen event of a serious security hole

00:18:20,970 --> 00:18:24,480
affecting something that we're using we

00:18:22,500 --> 00:18:25,890
say to the client okay here's your image

00:18:24,480 --> 00:18:30,660
bundle that contains the updated

00:18:25,890 --> 00:18:33,450
versions of these so what about the on

00:18:30,660 --> 00:18:35,490
syfy TT min this scenario as they met

00:18:33,450 --> 00:18:37,080
containers before quite possibly not if

00:18:35,490 --> 00:18:41,610
they're in a more conservative or older

00:18:37,080 --> 00:18:44,040
enterprise so we may may need to give

00:18:41,610 --> 00:18:45,330
them a bit of education this is where

00:18:44,040 --> 00:18:47,490
kubernetes can actually really help

00:18:45,330 --> 00:18:50,190
because one of the things it provides is

00:18:47,490 --> 00:18:51,780
a dashboard so it's quite nice to be

00:18:50,190 --> 00:18:52,980
able to say to your on-site IT team

00:18:51,780 --> 00:18:55,980
particularly if they're more used to

00:18:52,980 --> 00:18:57,660
Windows is this nice HTTP dashboard it

00:18:55,980 --> 00:18:59,190
shows you the health of the application

00:18:57,660 --> 00:19:00,540
you can go in and click through and see

00:18:59,190 --> 00:19:02,490
the logs you can see where there are

00:19:00,540 --> 00:19:04,170
things working you do all this from a

00:19:02,490 --> 00:19:07,140
browser you don't need to get your hands

00:19:04,170 --> 00:19:09,150
dirty with the command line that often

00:19:07,140 --> 00:19:10,680
goes over quite well and in some ways

00:19:09,150 --> 00:19:12,870
goes over better than our previous

00:19:10,680 --> 00:19:15,150
iteration of things where we'd say well

00:19:12,870 --> 00:19:16,920
it need to install Tomcat and then you

00:19:15,150 --> 00:19:17,820
need to stick a few war files on it and

00:19:16,920 --> 00:19:19,590
you'll need to manage it from the

00:19:17,820 --> 00:19:24,810
command line so that was an unexpected

00:19:19,590 --> 00:19:26,970
bonus there's a little picture of the

00:19:24,810 --> 00:19:29,190
kubernetes dashboard so you get some

00:19:26,970 --> 00:19:30,630
nice metrics for free you get to see the

00:19:29,190 --> 00:19:33,060
various different things that are

00:19:30,630 --> 00:19:34,650
deployed and so say talking people

00:19:33,060 --> 00:19:36,570
through this isn't too difficult and you

00:19:34,650 --> 00:19:38,070
can provide a little that we provide

00:19:36,570 --> 00:19:39,870
little manual just giving the basic

00:19:38,070 --> 00:19:45,150
steps for troubleshooting and the most

00:19:39,870 --> 00:19:46,740
likely scenarios logging so one of the

00:19:45,150 --> 00:19:49,080
downsides or one of the things that

00:19:46,740 --> 00:19:52,110
needs to be managed about micro services

00:19:49,080 --> 00:19:53,940
development as you know is that instead

00:19:52,110 --> 00:19:55,560
of having one monolithic application

00:19:53,940 --> 00:19:57,660
which can pump everything through a

00:19:55,560 --> 00:20:00,000
handful of carefully chosen log channels

00:19:57,660 --> 00:20:02,220
and appear on disk or in a database

00:20:00,000 --> 00:20:03,870
somewhere you've now got zillions of

00:20:02,220 --> 00:20:05,880
little services or you know maybe a

00:20:03,870 --> 00:20:08,130
hundred of them all writing their own

00:20:05,880 --> 00:20:11,790
log output so it's got to be brought

00:20:08,130 --> 00:20:14,550
together and managed somehow and L K

00:20:11,790 --> 00:20:17,820
stands for elasticsearch log stash and

00:20:14,550 --> 00:20:19,440
Cabana so this is a a way of aggregating

00:20:17,820 --> 00:20:22,800
and working with longest in this kind of

00:20:19,440 --> 00:20:25,770
environment so you install

00:20:22,800 --> 00:20:28,110
install an elastic search index in your

00:20:25,770 --> 00:20:29,520
cluster and you use log stash to feed

00:20:28,110 --> 00:20:31,890
all the logs through into there and

00:20:29,520 --> 00:20:35,910
Cabana is a nice web interface to search

00:20:31,890 --> 00:20:38,010
through them now there's one annoying

00:20:35,910 --> 00:20:39,929
thing we found about this which is that

00:20:38,010 --> 00:20:41,780
if you one of the common use cases if

00:20:39,929 --> 00:20:45,090
on-site IT can't solve it themselves

00:20:41,780 --> 00:20:46,980
then you want to be able to say alright

00:20:45,090 --> 00:20:49,140
just export the logs for the last 12

00:20:46,980 --> 00:20:50,550
hours email them to us and we'll have a

00:20:49,140 --> 00:20:53,340
dig through we'll work out what's

00:20:50,550 --> 00:20:55,710
happened annoyingly you can just see

00:20:53,340 --> 00:20:58,590
here if I show you for a moment this is

00:20:55,710 --> 00:21:01,290
the Cabana web interface and it's quite

00:20:58,590 --> 00:21:02,820
nice and you can search through things

00:21:01,290 --> 00:21:04,350
you can run queries you can do

00:21:02,820 --> 00:21:05,460
visualizations and you can see this is

00:21:04,350 --> 00:21:06,660
just a demo that I found online

00:21:05,460 --> 00:21:08,520
somewhere because I'm not running more

00:21:06,660 --> 00:21:10,140
locally you can see it we're aggregating

00:21:08,520 --> 00:21:12,510
the log statements from various

00:21:10,140 --> 00:21:14,850
different services what's missing from

00:21:12,510 --> 00:21:17,550
this picture is a button labeled export

00:21:14,850 --> 00:21:19,770
so you can identify the loggers you want

00:21:17,550 --> 00:21:21,990
them to send you but there isn't a handy

00:21:19,770 --> 00:21:25,559
button to dump them out of CSV or dump

00:21:21,990 --> 00:21:27,510
them out as Excel so we're hoping

00:21:25,559 --> 00:21:29,490
upstream Caban will solve that for us

00:21:27,510 --> 00:21:31,080
for now the best solution we've come up

00:21:29,490 --> 00:21:32,880
with is they need to work out which

00:21:31,080 --> 00:21:34,860
container is causing the problem and

00:21:32,880 --> 00:21:36,900
then the queue Vanessa's dashboard let's

00:21:34,860 --> 00:21:39,179
than zero in on exactly what we want to

00:21:36,900 --> 00:21:42,270
see and they can copy and paste it from

00:21:39,179 --> 00:21:43,830
there so it's not very elegant and if

00:21:42,270 --> 00:21:45,720
upstream doesn't do anything about this

00:21:43,830 --> 00:21:47,010
then in the spirit of open source we

00:21:45,720 --> 00:21:55,590
might try and do something about it

00:21:47,010 --> 00:21:57,210
ourselves backup and recovery so you've

00:21:55,590 --> 00:21:59,730
got all these containers running doing

00:21:57,210 --> 00:22:01,890
stuff if you're running them in AWS

00:21:59,730 --> 00:22:05,010
which we do for our own deployments then

00:22:01,890 --> 00:22:07,770
it can be pretty straightforward and you

00:22:05,010 --> 00:22:10,080
take snapshots of the AWS volumes

00:22:07,770 --> 00:22:11,940
involved and if you're running databases

00:22:10,080 --> 00:22:12,540
on AWS you can schedule automatic

00:22:11,940 --> 00:22:15,570
backups

00:22:12,540 --> 00:22:17,040
I'm sure Azul does something similar it

00:22:15,570 --> 00:22:20,070
all kind of works you don't have to

00:22:17,040 --> 00:22:21,630
think too hard about it although it's

00:22:20,070 --> 00:22:23,970
worth remembering in these things but

00:22:21,630 --> 00:22:25,290
it's not whether you run backups that's

00:22:23,970 --> 00:22:27,360
the question you should be asking it's

00:22:25,290 --> 00:22:28,950
do you run restores have you actually

00:22:27,360 --> 00:22:30,330
tried blowing away the system and

00:22:28,950 --> 00:22:32,700
reconstructing it from what you backed

00:22:30,330 --> 00:22:34,320
up last night if you haven't don't let

00:22:32,700 --> 00:22:36,900
when something has gone wrong be the

00:22:34,320 --> 00:22:39,330
first time so what you need is

00:22:36,900 --> 00:22:41,730
documented and tested process for the

00:22:39,330 --> 00:22:43,350
client to run through on sites so what

00:22:41,730 --> 00:22:45,480
do we actually do to make that possible

00:22:43,350 --> 00:22:47,370
well thinking back to what I said about

00:22:45,480 --> 00:22:49,650
how your cluster should be a stateless

00:22:47,370 --> 00:22:51,870
as possible if your databases are an

00:22:49,650 --> 00:22:54,060
external thing then that takes care of

00:22:51,870 --> 00:22:55,980
that if the on-site DBA is running them

00:22:54,060 --> 00:22:58,950
they know how to back those up they know

00:22:55,980 --> 00:23:00,630
what to work with that the only quirk

00:22:58,950 --> 00:23:02,340
that we've had to work out on that one

00:23:00,630 --> 00:23:04,440
is if you've got multiple different

00:23:02,340 --> 00:23:05,820
stores in your application maybe some of

00:23:04,440 --> 00:23:08,520
them are on disk and maybe some of them

00:23:05,820 --> 00:23:10,620
are relational it may be that the order

00:23:08,520 --> 00:23:12,690
in which things are backed up starts to

00:23:10,620 --> 00:23:14,520
matter so for example if you've got some

00:23:12,690 --> 00:23:17,430
metadata in your database and some files

00:23:14,520 --> 00:23:19,890
on disk then you need to do the backups

00:23:17,430 --> 00:23:22,320
in certain order to avoid capturing a

00:23:19,890 --> 00:23:24,240
state where you might have some files

00:23:22,320 --> 00:23:25,800
that don't have associated metadata or

00:23:24,240 --> 00:23:27,510
you might have some associated metadata

00:23:25,800 --> 00:23:29,040
that doesn't have a file so that's

00:23:27,510 --> 00:23:31,770
something that your architect needs to

00:23:29,040 --> 00:23:33,120
think about hard maybe the solution is

00:23:31,770 --> 00:23:35,310
to just put everything in as few data

00:23:33,120 --> 00:23:37,020
stores as possible but if you start

00:23:35,310 --> 00:23:39,180
trying to stuff you joinery files into a

00:23:37,020 --> 00:23:43,560
database then that has downsides of its

00:23:39,180 --> 00:23:45,060
own but apart from that one quirk yes so

00:23:43,560 --> 00:23:47,070
you tell tell the client to backup the

00:23:45,060 --> 00:23:48,750
databases in the usual way if you've got

00:23:47,070 --> 00:23:50,280
something like Cassandra in the mix you

00:23:48,750 --> 00:23:52,890
follow the advice on how to back that up

00:23:50,280 --> 00:23:55,080
and then file systems if you have

00:23:52,890 --> 00:23:57,090
everything mounted into your cluster as

00:23:55,080 --> 00:23:58,710
external volumes then you say well back

00:23:57,090 --> 00:24:00,720
those up in the same way as you backup a

00:23:58,710 --> 00:24:02,370
file system it's just a matter of making

00:24:00,720 --> 00:24:05,750
sure that you really can restore from

00:24:02,370 --> 00:24:05,750
these things to a working State

00:24:06,140 --> 00:24:12,210
so what else if we're trying to develop

00:24:09,150 --> 00:24:16,740
software which wants to be deployable as

00:24:12,210 --> 00:24:19,590
micro services as a cloudy setup and but

00:24:16,740 --> 00:24:22,320
also on site like this it does limit

00:24:19,590 --> 00:24:25,800
architectural choices a bit and there

00:24:22,320 --> 00:24:27,690
are all sorts of api's in AWS and in

00:24:25,800 --> 00:24:30,720
Azure for doing everything from sending

00:24:27,690 --> 00:24:32,940
email to machine learning and sometimes

00:24:30,720 --> 00:24:34,920
you know on a rainy Tuesday when you've

00:24:32,940 --> 00:24:36,120
got to get something done you look at

00:24:34,920 --> 00:24:38,190
them and go oh wouldn't it be nice if

00:24:36,120 --> 00:24:39,830
life was simple and I could use what

00:24:38,190 --> 00:24:42,450
Microsoft or Amazon have already done

00:24:39,830 --> 00:24:44,490
but we can't or at least we can't

00:24:42,450 --> 00:24:46,560
tightly integrate those as the only way

00:24:44,490 --> 00:24:49,080
to do something although we've also

00:24:46,560 --> 00:24:50,370
found that a good stick to be our

00:24:49,080 --> 00:24:51,809
customers wins because I'm

00:24:50,370 --> 00:24:53,279
we'd love to get to a world where our

00:24:51,809 --> 00:24:54,779
customers get rid of this unhealthy

00:24:53,279 --> 00:24:56,789
obsession about having everything on

00:24:54,779 --> 00:24:59,940
site and just use our cloud wouldn't

00:24:56,789 --> 00:25:02,130
life be great so one way of encouraging

00:24:59,940 --> 00:25:04,980
in that direction is to say well here's

00:25:02,130 --> 00:25:07,020
some nice exciting functionality over

00:25:04,980 --> 00:25:08,429
and above the basic products we'd love

00:25:07,020 --> 00:25:10,590
you to be able to use it but you will

00:25:08,429 --> 00:25:12,330
need to either use our cloud deployment

00:25:10,590 --> 00:25:17,159
or allow access to this bit of cloud

00:25:12,330 --> 00:25:18,900
over here to make that work now there is

00:25:17,159 --> 00:25:21,000
an interim state which I haven't talked

00:25:18,900 --> 00:25:22,679
about much but when we go and have a

00:25:21,000 --> 00:25:25,799
conversation with a potential customer

00:25:22,679 --> 00:25:27,090
about our software what do we actually

00:25:25,799 --> 00:25:29,159
say span we say well you've got a few

00:25:27,090 --> 00:25:31,470
possibilities you could buy it from us

00:25:29,159 --> 00:25:32,880
in the cloud you can will sell it to you

00:25:31,470 --> 00:25:36,659
multi-tenant that's the preferred option

00:25:32,880 --> 00:25:38,490
because it's cheaper for you and it

00:25:36,659 --> 00:25:40,679
reduces resource overhead for us if

00:25:38,490 --> 00:25:42,059
they've got deeper pockets but they're

00:25:40,679 --> 00:25:44,130
willing to take it in the cloud will do

00:25:42,059 --> 00:25:46,620
them their own sort of isolated cloud

00:25:44,130 --> 00:25:48,210
deployment we've found the middle ground

00:25:46,620 --> 00:25:49,529
with at least a few big customers which

00:25:48,210 --> 00:25:51,360
is quite encouraging which is that

00:25:49,529 --> 00:25:52,409
they're heavily invested in AWS or

00:25:51,360 --> 00:25:54,750
they're heavily invested in Azure

00:25:52,409 --> 00:25:56,880
themselves and they want us to take our

00:25:54,750 --> 00:25:59,130
stuff and put it in their AWS account or

00:25:56,880 --> 00:26:01,500
their Azure account that works really

00:25:59,130 --> 00:26:02,970
well because as I mentioned earlier

00:26:01,500 --> 00:26:04,770
there are some really good tools for

00:26:02,970 --> 00:26:06,809
working with these things so we say to

00:26:04,770 --> 00:26:09,510
them you just give us a few API keys

00:26:06,809 --> 00:26:12,360
we'll do the install will talk your IT

00:26:09,510 --> 00:26:13,890
guys through managing it and then when

00:26:12,360 --> 00:26:16,140
we've done the install you can revoke

00:26:13,890 --> 00:26:18,480
the keys we used to do it and it's all

00:26:16,140 --> 00:26:20,279
yours so we've done that probably in

00:26:18,480 --> 00:26:22,470
more cases than we've done the the

00:26:20,279 --> 00:26:25,520
on-site thing and that's definitely our

00:26:22,470 --> 00:26:25,520
second favorite option

00:26:28,380 --> 00:26:33,150
so what do we leave to the customer what

00:26:30,510 --> 00:26:34,799
do we explicitly leave out of scope from

00:26:33,150 --> 00:26:38,039
our installed ID or say that it really

00:26:34,799 --> 00:26:40,080
depends to you SSL if it's anything

00:26:38,039 --> 00:26:41,640
other than our public clouds then it's

00:26:40,080 --> 00:26:43,530
probably got the customers domain name

00:26:41,640 --> 00:26:45,240
involved in access to it that means they

00:26:43,530 --> 00:26:48,120
need to get all of the SSL certificates

00:26:45,240 --> 00:26:49,410
they need to install that and they need

00:26:48,120 --> 00:26:51,960
to work out what they're doing with

00:26:49,410 --> 00:26:57,900
various settings like strict Transport

00:26:51,960 --> 00:26:59,280
Security what about Windows so I

00:26:57,900 --> 00:27:01,049
mentioned earlier that our big

00:26:59,280 --> 00:27:04,049
enterprise customers love their windows

00:27:01,049 --> 00:27:05,760
and so far it turns out that if people

00:27:04,049 --> 00:27:07,650
are big enough they're almost always be

00:27:05,760 --> 00:27:09,179
talkable into having some sort of Linux

00:27:07,650 --> 00:27:11,640
because it won't be the only Linux in

00:27:09,179 --> 00:27:13,049
their IT estate but what if somebody

00:27:11,640 --> 00:27:14,820
really did expect Hills and says I

00:27:13,049 --> 00:27:17,940
really really want this to work on

00:27:14,820 --> 00:27:19,440
Windows well so far we've been lucky and

00:27:17,940 --> 00:27:21,840
we haven't encountered that but our line

00:27:19,440 --> 00:27:24,059
is very much Microsoft were working very

00:27:21,840 --> 00:27:26,490
hard to solve that for us and we've

00:27:24,059 --> 00:27:28,320
already got today the ability to run

00:27:26,490 --> 00:27:29,610
Linux docker containers on Windows

00:27:28,320 --> 00:27:32,220
alright it's not recommended for

00:27:29,610 --> 00:27:33,809
production just yet but a lot of work

00:27:32,220 --> 00:27:36,600
being done with hypervisors and things

00:27:33,809 --> 00:27:38,490
to make that possible there is a lot of

00:27:36,600 --> 00:27:40,770
work being done on kubernetes to make it

00:27:38,490 --> 00:27:43,169
possible to run estates of Windows

00:27:40,770 --> 00:27:44,970
docker containers given that most of the

00:27:43,169 --> 00:27:47,039
contents of our containers is just Java

00:27:44,970 --> 00:27:49,440
we can envision a future where we build

00:27:47,039 --> 00:27:51,000
all of them twice once as a Linux

00:27:49,440 --> 00:27:54,080
container with Java running inside it

00:27:51,000 --> 00:27:56,970
and one this is a Windows container and

00:27:54,080 --> 00:27:58,440
right now if someone absolutely insisted

00:27:56,970 --> 00:28:01,200
on Windows the best we could do is say

00:27:58,440 --> 00:28:04,200
well keep all the databases and data

00:28:01,200 --> 00:28:08,330
stores outside of the cluster and run on

00:28:04,200 --> 00:28:08,330
Linux VM or two to contain the cluster

00:28:08,419 --> 00:28:14,190
so I realize I haven't quite managed to

00:28:11,299 --> 00:28:16,230
fill as much as much time as I

00:28:14,190 --> 00:28:18,090
should but I guess that gives us longer

00:28:16,230 --> 00:28:23,410
so go over any questions if anybody has

00:28:18,090 --> 00:28:25,470
them hi

00:28:23,410 --> 00:28:25,470
I

00:28:27,980 --> 00:28:33,200
so Isaac how do we get the customer to

00:28:30,270 --> 00:28:33,200
send them to us

00:28:36,930 --> 00:28:42,270
and there's a clean there's a service

00:28:40,440 --> 00:28:43,950
called log spouts which you can install

00:28:42,270 --> 00:28:46,050
and even tell docker to send all of the

00:28:43,950 --> 00:28:52,410
all of the logs through that and then

00:28:46,050 --> 00:28:53,880
that feeds them into inter log stash we

00:28:52,410 --> 00:28:55,500
have and I think we've got a couple of

00:28:53,880 --> 00:28:58,500
deployments where we send everything to

00:28:55,500 --> 00:29:05,960
syslog for example but depends a bit

00:28:58,500 --> 00:29:05,960
what people want to do any others

00:29:11,490 --> 00:29:17,100
and so the eventual destination for the

00:29:14,640 --> 00:29:19,800
logs is elasticsearch which then will be

00:29:17,100 --> 00:29:22,260
backed by some volumes so that's where

00:29:19,800 --> 00:29:23,460
they end up and then I think it depends

00:29:22,260 --> 00:29:26,100
what you've done with the darker walk

00:29:23,460 --> 00:29:34,880
drivers as to how long they're kept by

00:29:26,100 --> 00:29:34,880
doctor itself and the others

00:30:11,570 --> 00:30:15,409
and sometimes and you're right there has

00:30:13,940 --> 00:30:16,879
to be a better way than doing it

00:30:15,409 --> 00:30:18,619
completely by hand or copying files

00:30:16,879 --> 00:30:20,869
around I think one of the things we've

00:30:18,619 --> 00:30:23,600
not done and should do given how many of

00:30:20,869 --> 00:30:25,129
our customers have it is got some Red

00:30:23,600 --> 00:30:27,080
Hat for ourselves and properly played

00:30:25,129 --> 00:30:28,639
around with all of the value-add in this

00:30:27,080 --> 00:30:30,080
space and indeed the fact that red hats

00:30:28,639 --> 00:30:31,940
are doing a lot of work we keep a

00:30:30,080 --> 00:30:43,070
nephews and with them with this kind of

00:30:31,940 --> 00:30:45,369
thing directly anymore for anymore thank

00:30:43,070 --> 00:30:45,369

YouTube URL: https://www.youtube.com/watch?v=Jh254anTFw8


