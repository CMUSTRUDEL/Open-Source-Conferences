Title: Apache FlexJS Web Application Development with Visual Studio Code - Josh Tynjala, Bowler Hat LLC
Publication date: 2017-05-19
Playlist: ApacheCon 2017 - Miami
Description: 
	Apache FlexJS Web Application Development with Visual Studio Code - Josh Tynjala, Bowler Hat LLC

Learn to set up an environment for developing and debugging Apache FlexJS applications in Visual Studio Code. Install the required tools, create a new project, build it, and debug the running application in your web browser.

About Josh Tynjala
Josh Tynjala has been building web applications and user interface component libraries for over a decade. He started his career building web applications with Flex (when it was still developed by Adobe), and today, he contributes to the compilers in Apache FlexJS. Josh recently created an extension for Visual Studio Code to add support for the ActionScript and MXML languages, including both FlexJS and SWF workflows.
Captions: 
	00:00:00,030 --> 00:00:06,710
all right thank you my name is Josh

00:00:03,540 --> 00:00:09,050
Tangela I'm on the Apache flex PMC

00:00:06,710 --> 00:00:11,460
although I do work on a number of other

00:00:09,050 --> 00:00:16,170
projects that are related to flux Jas

00:00:11,460 --> 00:00:19,109
and one of those projects is actually

00:00:16,170 --> 00:00:21,779
what I'm going to talk about today I

00:00:19,109 --> 00:00:24,359
recently started building an extension

00:00:21,779 --> 00:00:26,699
for Visual Studio code to add support

00:00:24,359 --> 00:00:28,949
for ActionScript and M XML which are the

00:00:26,699 --> 00:00:35,550
main language is used to develop flex

00:00:28,949 --> 00:00:37,559
jazz applications so let me let me start

00:00:35,550 --> 00:00:39,090
out with a little bit of history to help

00:00:37,559 --> 00:00:41,540
you understand why I built the extension

00:00:39,090 --> 00:00:43,980
and then we'll jump in and actually

00:00:41,540 --> 00:00:46,910
start creating a project and going

00:00:43,980 --> 00:00:51,750
through the steps of development there

00:00:46,910 --> 00:00:55,379
so before flex came to Apache it started

00:00:51,750 --> 00:00:58,590
out as an Adobe product had a pretty

00:00:55,379 --> 00:01:00,570
pretty active ecosystem a lot of

00:00:58,590 --> 00:01:04,379
developers different development

00:01:00,570 --> 00:01:08,100
environments such as Adobe Flash Builder

00:01:04,379 --> 00:01:10,290
which you saw in the last talk IntelliJ

00:01:08,100 --> 00:01:15,540
IDEA fdt flash developed there were

00:01:10,290 --> 00:01:21,350
there were many of them flex Jas is the

00:01:15,540 --> 00:01:24,299
next generation of the Flex SDK that

00:01:21,350 --> 00:01:26,369
runs applications directly in the web

00:01:24,299 --> 00:01:28,140
browser with JavaScript instead of

00:01:26,369 --> 00:01:33,299
relying on a browser plug-in like Flash

00:01:28,140 --> 00:01:34,560
Player the Flex j/s SDK can be used with

00:01:33,299 --> 00:01:37,470
the existing IDs

00:01:34,560 --> 00:01:41,640
however they require some extra

00:01:37,470 --> 00:01:45,600
configuration to get them to work in the

00:01:41,640 --> 00:01:48,149
best States and there are still some

00:01:45,600 --> 00:01:51,090
quirks especially related to debugging

00:01:48,149 --> 00:01:55,979
that make it that's not exactly the

00:01:51,090 --> 00:02:02,009
ideal situation and so I felt that in

00:01:55,979 --> 00:02:03,270
order to help flex Jas grow and become

00:02:02,009 --> 00:02:05,070
more interesting throughout to

00:02:03,270 --> 00:02:06,899
developers I wanted to make sure that

00:02:05,070 --> 00:02:08,580
there was a better environment or flex

00:02:06,899 --> 00:02:11,640
GS would be a first-class citizen and

00:02:08,580 --> 00:02:13,290
that is where Visual Studio code comes

00:02:11,640 --> 00:02:16,680
in

00:02:13,290 --> 00:02:19,620
Visual Studio code is an open-source

00:02:16,680 --> 00:02:25,890
project from Microsoft it's free to

00:02:19,620 --> 00:02:28,560
download it has a very vibrant ecosystem

00:02:25,890 --> 00:02:30,360
with a lot of developers checking it out

00:02:28,560 --> 00:02:31,670
and finding that it works really well

00:02:30,360 --> 00:02:34,380
for their workflows

00:02:31,670 --> 00:02:38,160
there are frequent updates every month

00:02:34,380 --> 00:02:40,590
new features are coming out and it's

00:02:38,160 --> 00:02:43,260
really picking up a lot of steam one of

00:02:40,590 --> 00:02:46,650
the best things about Visual Studio code

00:02:43,260 --> 00:02:48,420
is that it supports extensions not just

00:02:46,650 --> 00:02:49,980
extensions for like the languages that

00:02:48,420 --> 00:02:51,450
are built in when you first download it

00:02:49,980 --> 00:02:54,900
but you can actually add support for new

00:02:51,450 --> 00:02:56,850
languages and so I decided to start

00:02:54,900 --> 00:03:01,710
working on a language extension to add

00:02:56,850 --> 00:03:03,480
support for ActionScript and M XML and I

00:03:01,710 --> 00:03:10,250
released this extension under the name

00:03:03,480 --> 00:03:14,160
next-gen ActionScript Visual Studio code

00:03:10,250 --> 00:03:16,590
sits somewhere between a basic text

00:03:14,160 --> 00:03:19,650
editor and a full-fledged ID it's in

00:03:16,590 --> 00:03:22,080
this like happy middle ground that's at

00:03:19,650 --> 00:03:24,900
least for me is makes for a better

00:03:22,080 --> 00:03:26,459
workflow you can open up any random text

00:03:24,900 --> 00:03:28,140
files dart ads and you'll get syntax

00:03:26,459 --> 00:03:29,520
highlighting and things like that or you

00:03:28,140 --> 00:03:31,500
can actually create a workspace and

00:03:29,520 --> 00:03:35,190
start building a more full-fledged

00:03:31,500 --> 00:03:36,840
project with that's able to run the

00:03:35,190 --> 00:03:40,200
compiler and do debugging and things

00:03:36,840 --> 00:03:42,330
like that and so when when you're

00:03:40,200 --> 00:03:45,720
working in a language like actions

00:03:42,330 --> 00:03:48,060
ActionScript or XML you'll be able to

00:03:45,720 --> 00:03:50,100
take advantage of these code

00:03:48,060 --> 00:03:52,950
intelligence features like being able to

00:03:50,100 --> 00:03:56,700
complete member variables and functions

00:03:52,950 --> 00:03:58,440
on an instance of a class or if you're

00:03:56,700 --> 00:04:00,510
calling a function it'll give you you

00:03:58,440 --> 00:04:03,440
know the list of parameters that are

00:04:00,510 --> 00:04:05,760
available on that function as you type

00:04:03,440 --> 00:04:08,520
errors and warnings will update in real

00:04:05,760 --> 00:04:12,120
time as you add it edit or delete a new

00:04:08,520 --> 00:04:14,160
character it has knowledge of what the

00:04:12,120 --> 00:04:16,080
different symbols in your files are so

00:04:14,160 --> 00:04:19,470
it'll know that a variables of a certain

00:04:16,080 --> 00:04:21,299
type or what class a method is defined

00:04:19,470 --> 00:04:24,539
on and things like that you'll actually

00:04:21,299 --> 00:04:25,800
be able to go to where anything is

00:04:24,539 --> 00:04:29,470
defined by

00:04:25,800 --> 00:04:32,100
you know using the mouse and clicking

00:04:29,470 --> 00:04:34,270
while holding the controller command key

00:04:32,100 --> 00:04:36,040
it knows all the symbols in your

00:04:34,270 --> 00:04:37,480
document in your workspace so you're

00:04:36,040 --> 00:04:39,820
able to search those and navigate around

00:04:37,480 --> 00:04:43,650
your project pretty easily and you can

00:04:39,820 --> 00:04:47,700
even rename things and things like that

00:04:43,650 --> 00:04:50,980
Visual Studio code also provides a

00:04:47,700 --> 00:04:53,230
debugging UI that you can use in any

00:04:50,980 --> 00:04:56,200
language where there is a debugger

00:04:53,230 --> 00:04:59,640
extension available so you'll be able to

00:04:56,200 --> 00:05:03,700
do things like print to a debug console

00:04:59,640 --> 00:05:05,230
add breakpoints so that it will pause

00:05:03,700 --> 00:05:07,690
when you get to a certain line of code

00:05:05,230 --> 00:05:10,360
or it'll stop at an extent as an

00:05:07,690 --> 00:05:14,560
exception you can step through your code

00:05:10,360 --> 00:05:17,770
line by line you can see the function

00:05:14,560 --> 00:05:19,750
call stack and actually see what what

00:05:17,770 --> 00:05:24,010
variables are in scope at the various

00:05:19,750 --> 00:05:28,210
points of execution you can dig it down

00:05:24,010 --> 00:05:34,630
into the properties of any object that's

00:05:28,210 --> 00:05:37,020
in scope as deeply as you need and so

00:05:34,630 --> 00:05:43,210
most of this talk today I'm going to

00:05:37,020 --> 00:05:45,850
actually show you lie of how to do each

00:05:43,210 --> 00:05:48,580
step of the development process let's

00:05:45,850 --> 00:05:52,300
start with installation I have a few

00:05:48,580 --> 00:05:54,190
more slides before I get into that so

00:05:52,300 --> 00:05:56,890
what you'll need for flex jazz

00:05:54,190 --> 00:05:59,110
development obviously includes Visual

00:05:56,890 --> 00:06:02,200
Studio code you can get that from code

00:05:59,110 --> 00:06:03,850
Visual Studio comm this is a

00:06:02,200 --> 00:06:07,360
cross-platform editor so it's available

00:06:03,850 --> 00:06:11,530
for Windows Mac OS and Linux and flux

00:06:07,360 --> 00:06:14,260
Jas the SDK works on all all three of

00:06:11,530 --> 00:06:17,979
those platforms as well

00:06:14,260 --> 00:06:19,390
once you have Visual Studio code when

00:06:17,979 --> 00:06:22,360
you run it you'll be able to go to the

00:06:19,390 --> 00:06:25,390
extensions view and install extensions

00:06:22,360 --> 00:06:26,860
from the Visual Studio marketplace so if

00:06:25,390 --> 00:06:28,990
you go there and you search for

00:06:26,860 --> 00:06:31,720
ActionScript you'll be able to find the

00:06:28,990 --> 00:06:33,220
next gen ActionScript extension you'll

00:06:31,720 --> 00:06:35,590
see this green green install button

00:06:33,220 --> 00:06:37,180
there right next to the extension you

00:06:35,590 --> 00:06:38,560
just click that

00:06:37,180 --> 00:06:42,610
after a moment it'll ask you to restart

00:06:38,560 --> 00:06:45,699
and it will be good to go and then

00:06:42,610 --> 00:06:48,130
finally you will also need a patchy flux

00:06:45,699 --> 00:06:51,430
je s there are two different ways to

00:06:48,130 --> 00:06:54,100
that to install it you can use the Flex

00:06:51,430 --> 00:06:56,080
SDK installer which will have a more

00:06:54,100 --> 00:06:57,669
guided process where you go through a

00:06:56,080 --> 00:06:59,110
wizard and choose where you want to save

00:06:57,669 --> 00:07:00,610
it on your hard drive and what

00:06:59,110 --> 00:07:04,090
dependencies you need and things like

00:07:00,610 --> 00:07:07,660
that and then you can also if you have

00:07:04,090 --> 00:07:10,690
node.js installed you can install Flex

00:07:07,660 --> 00:07:15,970
GIS using the node package manager using

00:07:10,690 --> 00:07:20,020
the command there on the left and then

00:07:15,970 --> 00:07:21,610
the final setup part is telling the

00:07:20,020 --> 00:07:23,020
next-gen ActionScript extension

00:07:21,610 --> 00:07:25,060
individuals to do code where to find

00:07:23,020 --> 00:07:27,220
Flex j/s and there are three different

00:07:25,060 --> 00:07:29,349
ways to do that there are a couple of

00:07:27,220 --> 00:07:31,539
different environment variables where

00:07:29,349 --> 00:07:34,030
the extension will look to see if flux J

00:07:31,539 --> 00:07:35,970
s is defined there and it will use it

00:07:34,030 --> 00:07:38,050
automatically if it's found otherwise

00:07:35,970 --> 00:07:41,380
there is a setting and Visual Studio

00:07:38,050 --> 00:07:46,630
code that you can pass the path to your

00:07:41,380 --> 00:07:49,320
SDK and I'll show you how to do that so

00:07:46,630 --> 00:07:54,070
let's go into creating a new project and

00:07:49,320 --> 00:07:57,780
we're actually going to do that right

00:07:54,070 --> 00:07:57,780
now in Visual Studio code

00:08:00,550 --> 00:08:10,700
alright first here's the extensions view

00:08:06,920 --> 00:08:12,950
where you're able to search in the

00:08:10,700 --> 00:08:15,080
marketplace you'll see next-gen

00:08:12,950 --> 00:08:18,380
ActionScript extension pops up I already

00:08:15,080 --> 00:08:24,080
have it installed here so we don't need

00:08:18,380 --> 00:08:26,960
to install that right now alright now to

00:08:24,080 --> 00:08:30,530
create any project for flex J's first we

00:08:26,960 --> 00:08:35,030
need to create the workspace in a folder

00:08:30,530 --> 00:08:37,430
so we open the folder I'm just going to

00:08:35,030 --> 00:08:41,020
create a new empty folder on my desktop

00:08:37,430 --> 00:08:48,470
I'll call it my first flex J's project

00:08:41,020 --> 00:08:50,840
and open that up and this will be our

00:08:48,470 --> 00:08:52,600
workspace where we add files and source

00:08:50,840 --> 00:08:55,900
code and things like that

00:08:52,600 --> 00:09:00,050
next I want to tell Visual Studio code

00:08:55,900 --> 00:09:04,310
where to find the Flex GS SDK so if we

00:09:00,050 --> 00:09:09,320
go into the Preferences we'll choose the

00:09:04,310 --> 00:09:16,190
setting option here and there are two

00:09:09,320 --> 00:09:17,780
places where you can add settings for

00:09:16,190 --> 00:09:19,339
your development environment there are

00:09:17,780 --> 00:09:21,560
the user settings which will apply to

00:09:19,339 --> 00:09:23,690
any workspace that you open so if you

00:09:21,560 --> 00:09:25,130
just wanted to set up flex Jas once and

00:09:23,690 --> 00:09:26,870
have it work in every workspace you

00:09:25,130 --> 00:09:28,160
could set them here and then there's

00:09:26,870 --> 00:09:31,130
also the workspace settings which will

00:09:28,160 --> 00:09:33,890
apply only to the the new folder that we

00:09:31,130 --> 00:09:35,230
created just a moment ago I'm going to

00:09:33,890 --> 00:09:43,339
set this up in the workspace settings

00:09:35,230 --> 00:09:45,110
and so you'll see as I type the

00:09:43,339 --> 00:09:48,140
available settings will actually show up

00:09:45,110 --> 00:09:49,700
in the completion list you might

00:09:48,140 --> 00:09:53,210
remember from the slide earlier that

00:09:49,700 --> 00:09:58,130
we're looking for next-gen a sdk editor

00:09:53,210 --> 00:10:02,360
and then we'll set that to a pass to the

00:09:58,130 --> 00:10:04,070
sdk I have that downloaded on my desktop

00:10:02,360 --> 00:10:10,899
so I'll just

00:10:04,070 --> 00:10:19,100
set that up here and save that and now

00:10:10,899 --> 00:10:20,959
our workspace is ready to use flex GS if

00:10:19,100 --> 00:10:23,779
I go back here to the file explorer

00:10:20,959 --> 00:10:26,720
you'll see that the dot vs code

00:10:23,779 --> 00:10:28,399
directory was created and it was file in

00:10:26,720 --> 00:10:32,560
there called settings a JSON and that's

00:10:28,399 --> 00:10:39,370
where our workspace settings are saved

00:10:32,560 --> 00:10:39,370
now to tell the workspace yes question

00:10:41,079 --> 00:10:50,600
correct workspace settings override to

00:10:44,089 --> 00:10:52,610
the user settings ok now I'm going to

00:10:50,600 --> 00:10:55,639
create a file named as config dot JSON

00:10:52,610 --> 00:10:58,040
and this is sort of the main prog

00:10:55,639 --> 00:11:00,800
project configuration file for your

00:10:58,040 --> 00:11:03,139
workspace and includes all the compiler

00:11:00,800 --> 00:11:08,630
settings and some additional options as

00:11:03,139 --> 00:11:11,389
well this is a JSON file I'm going to

00:11:08,630 --> 00:11:14,000
set up one compiler option to start and

00:11:11,389 --> 00:11:17,300
then I'm going to specify the entry

00:11:14,000 --> 00:11:20,569
point for our application so I'm going

00:11:17,300 --> 00:11:23,329
to set the target compiler option by

00:11:20,569 --> 00:11:25,910
default flux J s will produce a Java

00:11:23,329 --> 00:11:27,170
Script ascetic Java scripts files for

00:11:25,910 --> 00:11:29,449
our application and it will create a

00:11:27,170 --> 00:11:32,269
swift file that will run in Adobe AIR or

00:11:29,449 --> 00:11:34,069
Flash Player for our purposes we only

00:11:32,269 --> 00:11:38,899
need the Java Script so I'm going to set

00:11:34,069 --> 00:11:41,089
that to J s Flex similar to the settings

00:11:38,899 --> 00:11:43,910
file you'll see that completion is

00:11:41,089 --> 00:11:46,370
available within this file visual studio

00:11:43,910 --> 00:11:48,199
code is aware of what what the format is

00:11:46,370 --> 00:11:51,589
so if you're trying to remember the name

00:11:48,199 --> 00:11:52,699
of anything we can hit control space and

00:11:51,589 --> 00:11:57,100
that will bring up a list of all the

00:11:52,699 --> 00:12:00,949
different options and then I'm going to

00:11:57,100 --> 00:12:05,540
add a file field and I'm going to

00:12:00,949 --> 00:12:07,189
specify which which class is going to be

00:12:05,540 --> 00:12:09,290
the entry point of our application I

00:12:07,189 --> 00:12:11,600
haven't created this file yet but I will

00:12:09,290 --> 00:12:13,220
in just a moment so I'm going to create

00:12:11,600 --> 00:12:15,730
a source directory and then I'm going to

00:12:13,220 --> 00:12:17,270
create a file name my first flex jeaious

00:12:15,730 --> 00:12:20,930
project study

00:12:17,270 --> 00:12:23,560
jemelle and that will be the first class

00:12:20,930 --> 00:12:26,320
that runs when we launch our application

00:12:23,560 --> 00:12:41,330
so let me create that source directory

00:12:26,320 --> 00:12:43,970
and the EM XML file and save you save us

00:12:41,330 --> 00:12:46,730
some time from watching me type out a

00:12:43,970 --> 00:12:50,500
basic application and make a bunch of

00:12:46,730 --> 00:12:50,500
typos I made a quick little snippet here

00:12:53,589 --> 00:12:58,940
so this is probably one of these simpler

00:12:56,560 --> 00:13:02,480
flex jeaious applications that you'll

00:12:58,940 --> 00:13:04,850
see we use the Express component set it

00:13:02,480 --> 00:13:08,350
contains one view which contains a

00:13:04,850 --> 00:13:10,490
button with some text now I want to

00:13:08,350 --> 00:13:12,380
start adding a little bit of code to

00:13:10,490 --> 00:13:14,870
this to show you some of the code to

00:13:12,380 --> 00:13:18,920
telogen features that you can use while

00:13:14,870 --> 00:13:22,880
you're writing your code so the first

00:13:18,920 --> 00:13:24,620
thing I'm going to do it is create an

00:13:22,880 --> 00:13:32,779
event listener for this button when it's

00:13:24,620 --> 00:13:36,020
clicked you'll see as I type the

00:13:32,779 --> 00:13:38,600
completion will pop up offering types

00:13:36,020 --> 00:13:41,899
for this event parameter on the function

00:13:38,600 --> 00:13:44,390
and when we actually complete one of

00:13:41,899 --> 00:13:45,980
those the import for this class is

00:13:44,390 --> 00:13:48,790
automatically added because it's in a

00:13:45,980 --> 00:13:48,790
different package

00:13:52,490 --> 00:14:04,080
I'm just going to write some basic code

00:13:56,790 --> 00:14:05,700
here not trying to develop a

00:14:04,080 --> 00:14:08,520
full-fledged application it's mostly

00:14:05,700 --> 00:14:13,650
just to show you some of the features

00:14:08,520 --> 00:14:15,090
you can use individual studio code so

00:14:13,650 --> 00:14:18,600
I'm going to do a little bit of math and

00:14:15,090 --> 00:14:20,640
then I'm going to show the results and a

00:14:18,600 --> 00:14:25,920
little and an alerts dialog that pops up

00:14:20,640 --> 00:14:27,690
above the application you'll see as I

00:14:25,920 --> 00:14:30,000
make the call to this function the

00:14:27,690 --> 00:14:33,590
signature health pops up to tell us

00:14:30,000 --> 00:14:33,590
about the parameters

00:14:44,180 --> 00:14:55,199
then let me go up in the mxml and add

00:14:48,930 --> 00:14:57,990
this listener to the button so I want to

00:14:55,199 --> 00:15:00,269
listen to the click event and then

00:14:57,990 --> 00:15:04,920
inside of here I can actually use

00:15:00,269 --> 00:15:10,620
completion to call the listener and pass

00:15:04,920 --> 00:15:15,149
in the event between these two quotes is

00:15:10,620 --> 00:15:17,579
actually secretly a function body and so

00:15:15,149 --> 00:15:20,970
Visual Studio code is aware of that and

00:15:17,579 --> 00:15:24,420
can treat this small section of XML as

00:15:20,970 --> 00:15:27,449
ActionScript you'll notice when I hover

00:15:24,420 --> 00:15:29,579
my mouse over the call to the event

00:15:27,449 --> 00:15:31,139
listener we can actually see the class

00:15:29,579 --> 00:15:33,920
where it's defined we can see it's a

00:15:31,139 --> 00:15:37,860
method we can see the parameters there

00:15:33,920 --> 00:15:41,040
if we do the same over the one of these

00:15:37,860 --> 00:15:43,470
imports you can see what package this

00:15:41,040 --> 00:15:46,290
class is in was it extends any

00:15:43,470 --> 00:15:51,329
interfaces it implements and things like

00:15:46,290 --> 00:15:54,269
that if we hold down the control key on

00:15:51,329 --> 00:15:57,660
Windows or Linux or the command key on

00:15:54,269 --> 00:15:59,639
Mac and then we put our mouse over a

00:15:57,660 --> 00:16:01,470
symbol and then click on it it will

00:15:59,639 --> 00:16:03,569
actually take us to the definition of

00:16:01,470 --> 00:16:05,880
whatever that symbol is and so when I do

00:16:03,569 --> 00:16:10,019
that here you can see that the cursor

00:16:05,880 --> 00:16:15,420
moves here to the to where the listener

00:16:10,019 --> 00:16:18,630
is defined then one last thing I want to

00:16:15,420 --> 00:16:21,449
show you here is that we're able to

00:16:18,630 --> 00:16:24,029
rename symbols as well so let's say I

00:16:21,449 --> 00:16:30,350
don't like the name some I want to

00:16:24,029 --> 00:16:30,350
change that to results that's not good

00:16:41,050 --> 00:16:48,340
well if that did work it would change

00:16:44,380 --> 00:16:54,040
both of these these lines where the

00:16:48,340 --> 00:16:56,790
variables name summed to result okay so

00:16:54,040 --> 00:17:02,320
we now we have a basic application here

00:16:56,790 --> 00:17:13,870
and now we want to compile it and then

00:17:02,320 --> 00:17:16,810
eventually we will run it okay so Visual

00:17:13,870 --> 00:17:19,150
Studio code has sort of a universal file

00:17:16,810 --> 00:17:21,280
that it understands regardless of which

00:17:19,150 --> 00:17:26,320
language you're using and this file is

00:17:21,280 --> 00:17:28,570
called tasks JSON it's able to run any

00:17:26,320 --> 00:17:31,030
executable that you want for example a

00:17:28,570 --> 00:17:32,440
compiler or maybe you want to run some

00:17:31,030 --> 00:17:33,720
kind of test runner or something like

00:17:32,440 --> 00:17:35,800
that

00:17:33,720 --> 00:17:38,320
whether you're using ActionScript and

00:17:35,800 --> 00:17:40,840
mxml for Flex Jas or if you're writing

00:17:38,320 --> 00:17:43,660
JavaScript or C or whatever language you

00:17:40,840 --> 00:17:46,360
want to use you can create this file in

00:17:43,660 --> 00:17:48,700
Visual Studio code and it will integrate

00:17:46,360 --> 00:17:56,260
with some of the features for building a

00:17:48,700 --> 00:17:58,450
project that are available now you might

00:17:56,260 --> 00:18:00,190
remember from earlier we created a file

00:17:58,450 --> 00:18:04,240
named a s config dot jasa

00:18:00,190 --> 00:18:06,220
and this file included some of the

00:18:04,240 --> 00:18:08,400
compiler options that we're going to use

00:18:06,220 --> 00:18:12,160
to build our Flex jazz application

00:18:08,400 --> 00:18:14,470
inside tasks JSON we could call the

00:18:12,160 --> 00:18:17,020
compiler directly and pass in all of the

00:18:14,470 --> 00:18:18,730
same compiler options but then we'd have

00:18:17,020 --> 00:18:20,590
them duplicated in a couple of places

00:18:18,730 --> 00:18:22,270
and we'd have to try to keep them in

00:18:20,590 --> 00:18:26,320
sync and that's not really an ideal

00:18:22,270 --> 00:18:29,080
situation and so I created this other

00:18:26,320 --> 00:18:31,320
utility called a s config C which reads

00:18:29,080 --> 00:18:34,390
the a s config dot JSON file and

00:18:31,320 --> 00:18:37,030
actually parses all the compiler

00:18:34,390 --> 00:18:39,160
arguments and calls the compiler using

00:18:37,030 --> 00:18:42,670
all of those values so you can keep all

00:18:39,160 --> 00:18:43,960
of your options in one place and not

00:18:42,670 --> 00:18:46,060
have to worry about any kind of

00:18:43,960 --> 00:18:48,460
duplication and so you can install that

00:18:46,060 --> 00:18:50,590
from node package manager and that's

00:18:48,460 --> 00:18:53,430
what we're going to be using to build

00:18:50,590 --> 00:18:53,430
this project

00:18:56,090 --> 00:19:05,310
so let me go back into Visual Studio

00:18:58,680 --> 00:19:07,590
code alright to create our tasks JSON

00:19:05,310 --> 00:19:09,870
file we're going to open up the command

00:19:07,590 --> 00:19:13,110
palette which you can find in the View

00:19:09,870 --> 00:19:14,430
menu right here command ballot you can

00:19:13,110 --> 00:19:16,080
also bring that up with the keyboard

00:19:14,430 --> 00:19:18,960
shortcuts

00:19:16,080 --> 00:19:22,410
it's ctrl shift P on Windows and Linux

00:19:18,960 --> 00:19:26,730
or command shift key on Mac OS P is in

00:19:22,410 --> 00:19:29,970
palette so we'll bring that up and then

00:19:26,730 --> 00:19:32,730
type tasks and you'll see the second

00:19:29,970 --> 00:19:36,410
option here configure task runner for

00:19:32,730 --> 00:19:39,330
action script and a s config design and

00:19:36,410 --> 00:19:43,190
that will automatically create this file

00:19:39,330 --> 00:19:48,000
for us and populate it with some useful

00:19:43,190 --> 00:19:50,550
arguments to pass to a s config C so the

00:19:48,000 --> 00:19:51,420
two most important fields right here is

00:19:50,550 --> 00:19:54,060
the command field

00:19:51,420 --> 00:19:56,250
this tells visual studio code which

00:19:54,060 --> 00:19:57,920
executable you want it to run in this

00:19:56,250 --> 00:20:00,450
case we're going to run a as config C

00:19:57,920 --> 00:20:03,270
but you could run anything else you want

00:20:00,450 --> 00:20:05,760
it you can actually point to where the

00:20:03,270 --> 00:20:07,200
compiler executable is or if you wanted

00:20:05,760 --> 00:20:09,090
to run some other kind of test runner

00:20:07,200 --> 00:20:12,180
like maven or something like that you

00:20:09,090 --> 00:20:13,860
could put that in here and then we also

00:20:12,180 --> 00:20:17,490
have arguments to pass to that

00:20:13,860 --> 00:20:19,760
executable for a is config C we're going

00:20:17,490 --> 00:20:22,440
to tell it to create a debug build and

00:20:19,760 --> 00:20:25,080
then we also tell it where to find the

00:20:22,440 --> 00:20:29,180
Flex GS SDK you'll notice that this is

00:20:25,080 --> 00:20:31,440
already populated for us the next gen

00:20:29,180 --> 00:20:34,260
ActionScript extension will look in

00:20:31,440 --> 00:20:35,670
visual studio code settings and find

00:20:34,260 --> 00:20:38,310
that path for us and just put it in

00:20:35,670 --> 00:20:41,070
there as a convenience but we can change

00:20:38,310 --> 00:20:46,650
that to any SDK we want and as this file

00:20:41,070 --> 00:20:49,740
however we please going forward so if

00:20:46,650 --> 00:20:53,370
you press control shift B or command

00:20:49,740 --> 00:20:57,990
shift B that will run the main build

00:20:53,370 --> 00:21:00,950
task in task JSON so I'll use that

00:20:57,990 --> 00:21:00,950
shortcut now

00:21:02,429 --> 00:21:10,450
that's why okay I named that flower rod

00:21:08,080 --> 00:21:20,730
so if not my first Alexia's project it's

00:21:10,450 --> 00:21:23,770
my first flex days of application okay

00:21:20,730 --> 00:21:26,980
okay so now the compiler runs and builds

00:21:23,770 --> 00:21:28,780
the project correctly you can see that a

00:21:26,980 --> 00:21:32,260
bin directory was created here that's

00:21:28,780 --> 00:21:36,490
where flexi is normally creates outputs

00:21:32,260 --> 00:21:43,120
for JavaScript applications here's some

00:21:36,490 --> 00:21:48,010
of the generated JavaScript you can see

00:21:43,120 --> 00:21:51,610
here are on button click listener for

00:21:48,010 --> 00:21:54,669
our events another file worth pointing

00:21:51,610 --> 00:21:57,250
out here is the index.html file this is

00:21:54,669 --> 00:21:58,540
also generated by the compiler and it

00:21:57,250 --> 00:22:02,380
just bootstraps our application and

00:21:58,540 --> 00:22:04,840
starts calling our JavaScript code and

00:22:02,380 --> 00:22:07,919
that's what will actually launch in the

00:22:04,840 --> 00:22:07,919
debugger in a moment

00:22:18,559 --> 00:22:25,700
okay another standard file in Visual

00:22:21,510 --> 00:22:29,000
Studio code is a file named launch JSON

00:22:25,700 --> 00:22:31,860
this is very similar to tasks JSON it's

00:22:29,000 --> 00:22:33,480
it's a file that Visual Studio code

00:22:31,860 --> 00:22:35,640
understands no matter what language

00:22:33,480 --> 00:22:38,280
you're using or some kind of runtime or

00:22:35,640 --> 00:22:40,410
whatever whatever it is that you've

00:22:38,280 --> 00:22:47,730
built if you want to run it and debug it

00:22:40,410 --> 00:22:50,640
you'll use launch JSON so the next-gen

00:22:47,730 --> 00:22:53,520
ActionScript extension doesn't have a

00:22:50,640 --> 00:22:57,150
debugger for running JavaScript code in

00:22:53,520 --> 00:23:00,240
a browser but there are separate

00:22:57,150 --> 00:23:03,620
extensions available for the major web

00:23:00,240 --> 00:23:07,169
browsers like google chrome firefox edge

00:23:03,620 --> 00:23:08,970
safari even safari running on an iOS

00:23:07,169 --> 00:23:12,720
device that you have plugged into your

00:23:08,970 --> 00:23:15,870
computer with USB flex j/s can also

00:23:12,720 --> 00:23:19,289
produce javascript code from

00:23:15,870 --> 00:23:22,440
ActionScript 4 nodejs and of course you

00:23:19,289 --> 00:23:23,549
can still continue to build for the

00:23:22,440 --> 00:23:25,230
Adobe Flash runtimes

00:23:23,549 --> 00:23:26,460
if you want and there's a debugger for

00:23:25,230 --> 00:23:31,470
that built into the next-gen

00:23:26,460 --> 00:23:34,530
ActionScript extension so for this

00:23:31,470 --> 00:23:37,200
presentation we're going to use the

00:23:34,530 --> 00:23:38,970
debugger for Chrome but there are

00:23:37,200 --> 00:23:40,650
dividers for other browsers and the

00:23:38,970 --> 00:23:42,840
configuration is pretty similar there's

00:23:40,650 --> 00:23:45,840
just a few minute minor tweaks here and

00:23:42,840 --> 00:23:49,500
there so what we learn for one browser

00:23:45,840 --> 00:23:52,640
we can that knowledge can go on to other

00:23:49,500 --> 00:23:55,200
browsers as well so we'll install the

00:23:52,640 --> 00:23:57,659
this extension from the extensions view

00:23:55,200 --> 00:23:59,460
just like we did with the next-gen

00:23:57,659 --> 00:24:00,960
ActionScript extension to search for

00:23:59,460 --> 00:24:03,620
chrome debug and it should pop up and

00:24:00,960 --> 00:24:03,620
you can install it

00:24:05,750 --> 00:24:12,820
so as you recall four flexpay's

00:24:09,500 --> 00:24:15,530
applications we use ActionScript in mxml

00:24:12,820 --> 00:24:21,050
but we produce JavaScript that can be

00:24:15,530 --> 00:24:23,750
run in the browser ideally we would want

00:24:21,050 --> 00:24:25,809
to be able to debug in our original

00:24:23,750 --> 00:24:29,210
language where we developed them in and

00:24:25,809 --> 00:24:34,820
so web browsers have something called

00:24:29,210 --> 00:24:36,830
source maps that tell debuggers okay if

00:24:34,820 --> 00:24:40,160
you're running the JavaScript code on

00:24:36,830 --> 00:24:45,530
line 16 character for that actually goes

00:24:40,160 --> 00:24:48,200
back to line 6 character 2 and in this

00:24:45,530 --> 00:24:50,390
ActionScript file and it's it's very

00:24:48,200 --> 00:24:53,270
similar to like how you if you were

00:24:50,390 --> 00:24:55,100
building an application in C or Java it

00:24:53,270 --> 00:24:57,230
would produce machine code or bytecode

00:24:55,100 --> 00:25:00,500
and the bugger needs some weight to know

00:24:57,230 --> 00:25:03,890
that okay this byte what here maps back

00:25:00,500 --> 00:25:06,170
to your original code there so it makes

00:25:03,890 --> 00:25:07,700
it so javascript is kind of like the

00:25:06,170 --> 00:25:12,230
bytecode for other languages like

00:25:07,700 --> 00:25:14,390
ActionScript so flux Jas is able to

00:25:12,230 --> 00:25:17,720
produce source maps and there is a

00:25:14,390 --> 00:25:22,700
source map compiler option that you can

00:25:17,720 --> 00:25:26,150
use and we will add that to our AAS

00:25:22,700 --> 00:25:30,530
config dot JSON to tell the compiler to

00:25:26,150 --> 00:25:37,640
produce those for us so let's jump in

00:25:30,530 --> 00:25:40,730
there and do that we open up the debug

00:25:37,640 --> 00:25:45,250
view and you'll see here it says no

00:25:40,730 --> 00:25:48,500
configurations we want to add one and

00:25:45,250 --> 00:25:50,450
then I already have the chrome the

00:25:48,500 --> 00:25:52,880
debugger for Chrome extension installed

00:25:50,450 --> 00:25:55,580
so that will show up in the list now and

00:25:52,880 --> 00:25:56,900
I'll choose that other browsers will

00:25:55,580 --> 00:26:02,120
show up there as well you can see I have

00:25:56,900 --> 00:26:05,570
the Firefox extension installed if - and

00:26:02,120 --> 00:26:09,740
then it will generate a lunch JSON file

00:26:05,570 --> 00:26:12,830
for us it has a couple of default

00:26:09,740 --> 00:26:16,020
configurations here we don't need this

00:26:12,830 --> 00:26:18,150
attached one at all for our project

00:26:16,020 --> 00:26:21,030
and we're actually going to tweak things

00:26:18,150 --> 00:26:25,740
a little bit on this other one so the

00:26:21,030 --> 00:26:30,059
default configuration that it creates

00:26:25,740 --> 00:26:32,610
tells chrome to open up a URL and it

00:26:30,059 --> 00:26:34,530
assumes that we have some kind of local

00:26:32,610 --> 00:26:36,660
web server running on our machine and so

00:26:34,530 --> 00:26:40,470
it tells us to tell it to open up

00:26:36,660 --> 00:26:42,000
localhost as your application gets

00:26:40,470 --> 00:26:44,220
bigger you're probably going to want to

00:26:42,000 --> 00:26:45,870
do something like that there's various

00:26:44,220 --> 00:26:48,780
security restrictions and stuff that you

00:26:45,870 --> 00:26:51,320
need to care about so that's probably

00:26:48,780 --> 00:26:55,650
what you'll be using a lot of the time

00:26:51,320 --> 00:26:57,540
for this quick demo here as part of the

00:26:55,650 --> 00:27:01,230
presentation I'm just going to open up a

00:26:57,540 --> 00:27:03,990
file from the local file system so you

00:27:01,230 --> 00:27:07,410
can see I replaced the URL field with a

00:27:03,990 --> 00:27:10,440
file field and then I'm pointing that to

00:27:07,410 --> 00:27:14,940
the index.html file that's the compiler

00:27:10,440 --> 00:27:18,540
produced this workspace root token here

00:27:14,940 --> 00:27:20,730
is standard in Visual Studio code before

00:27:18,540 --> 00:27:22,620
it launches the project or will replace

00:27:20,730 --> 00:27:25,860
this with the actual path to our

00:27:22,620 --> 00:27:28,770
workspace there are a couple of other

00:27:25,860 --> 00:27:31,830
fields I wanted to point out the source

00:27:28,770 --> 00:27:33,900
map field tells chrome to look for the

00:27:31,830 --> 00:27:37,500
source maps that the compiler will

00:27:33,900 --> 00:27:40,710
generate for us not all browsers require

00:27:37,500 --> 00:27:42,770
you to do that each each extension has

00:27:40,710 --> 00:27:46,110
its own different configuration options

00:27:42,770 --> 00:27:47,730
so for example I know that Firefox will

00:27:46,110 --> 00:27:50,100
automatically find the source maps and

00:27:47,730 --> 00:27:52,740
simply use them so it depends on which

00:27:50,100 --> 00:27:58,500
browser you're using and then this last

00:27:52,740 --> 00:28:01,320
field prelaunch task is a standard field

00:27:58,500 --> 00:28:03,840
that is available in any launch

00:28:01,320 --> 00:28:06,600
configuration

00:28:03,840 --> 00:28:09,090
this tells Visual Studio code to run a

00:28:06,600 --> 00:28:11,070
task before it starts debugging so in

00:28:09,090 --> 00:28:13,920
this case we want it to run a as config

00:28:11,070 --> 00:28:20,840
C to tell it to build our project before

00:28:13,920 --> 00:28:20,840
we run it in the browser so

00:28:21,180 --> 00:28:33,450
let's go to a s config dot JSON and add

00:28:29,430 --> 00:28:36,540
our source map compiler option because

00:28:33,450 --> 00:28:41,310
we'll want that for debugging then if I

00:28:36,540 --> 00:28:44,010
build again we can see here and the bin

00:28:41,310 --> 00:28:47,640
directory that there's a new file here

00:28:44,010 --> 00:28:50,580
that ends with the extension J s Mac and

00:28:47,640 --> 00:28:54,990
this is the source map that the browser

00:28:50,580 --> 00:28:57,180
uses you can see it basically says when

00:28:54,990 --> 00:28:59,580
you're running this JavaScript file the

00:28:57,180 --> 00:29:01,560
actual source is here in this M XML file

00:28:59,580 --> 00:29:04,830
and then this line here with the

00:29:01,560 --> 00:29:06,870
mappings is kind of a obscure format

00:29:04,830 --> 00:29:08,460
that's somehow tells it ok this this

00:29:06,870 --> 00:29:15,060
line in this character map back to this

00:29:08,460 --> 00:29:18,270
line in that character and then I just

00:29:15,060 --> 00:29:19,800
want to launch that now and we'll see

00:29:18,270 --> 00:29:21,930
this application running in the web

00:29:19,800 --> 00:29:25,290
browser so we have our new configuration

00:29:21,930 --> 00:29:27,450
here in the debug view if I hit the

00:29:25,290 --> 00:29:29,880
start debugging button you'll see down

00:29:27,450 --> 00:29:31,620
there that we have the pre launch task

00:29:29,880 --> 00:29:34,890
so it's going to run the compiler first

00:29:31,620 --> 00:29:39,240
and then here is our application running

00:29:34,890 --> 00:29:41,520
in chrome if I click that button you'll

00:29:39,240 --> 00:29:45,720
see the alert pop-up with the text that

00:29:41,520 --> 00:29:49,050
we told it to so now that we have that

00:29:45,720 --> 00:29:53,370
running in the browser let's go back to

00:29:49,050 --> 00:29:57,810
our M XML file and try out some

00:29:53,370 --> 00:30:01,500
debugging tasks so I'm going to add a

00:29:57,810 --> 00:30:03,030
breakpoint in our event listener and so

00:30:01,500 --> 00:30:04,620
now when I click on that button it's

00:30:03,030 --> 00:30:06,900
going to stop at this breakpoint and

00:30:04,620 --> 00:30:10,620
we'll be able to inspect the current

00:30:06,900 --> 00:30:13,380
state of our application so I'll go back

00:30:10,620 --> 00:30:15,090
to the browser the breakpoints are

00:30:13,380 --> 00:30:17,940
updated real time so I didn't need to

00:30:15,090 --> 00:30:21,420
relaunch or anything I click the button

00:30:17,940 --> 00:30:24,060
and it will jump back to visual studio

00:30:21,420 --> 00:30:26,130
code you'll see in the browser though

00:30:24,060 --> 00:30:27,360
that is paused so it hasn't shown the

00:30:26,130 --> 00:30:30,900
alert yet because it's stopped at the

00:30:27,360 --> 00:30:31,650
breakpoint and now we're on this line of

00:30:30,900 --> 00:30:35,290
code

00:30:31,650 --> 00:30:37,720
if I go into the debug view you can see

00:30:35,290 --> 00:30:39,820
on the left here that all of the

00:30:37,720 --> 00:30:43,750
variables that are in the local scope

00:30:39,820 --> 00:30:46,960
are displayed so for instance this event

00:30:43,750 --> 00:30:49,570
listener has a parameter for the events

00:30:46,960 --> 00:30:51,910
we can see that here and we can drill

00:30:49,570 --> 00:30:55,630
down and see the various properties of

00:30:51,910 --> 00:30:59,620
the events as they are in the current

00:30:55,630 --> 00:31:01,540
application States you can see our local

00:30:59,620 --> 00:31:03,160
variables a B and some are still

00:31:01,540 --> 00:31:07,690
undefined because we haven't run those

00:31:03,160 --> 00:31:11,290
lines of code yet so let me step through

00:31:07,690 --> 00:31:17,980
those and we can see that updates is an

00:31:11,290 --> 00:31:23,170
A to B is 5 and the sum is 7 and then

00:31:17,980 --> 00:31:27,790
also on the left here you can see the

00:31:23,170 --> 00:31:30,400
call stack and we're we're in our

00:31:27,790 --> 00:31:33,730
listener here the on button click method

00:31:30,400 --> 00:31:36,940
here on our application if we go up a

00:31:33,730 --> 00:31:39,120
level this is actually the function

00:31:36,940 --> 00:31:42,450
scope I was talking about for the

00:31:39,120 --> 00:31:44,530
listening to the click event in our mxml

00:31:42,450 --> 00:31:46,810
when I clicked on that that line is

00:31:44,530 --> 00:31:50,890
highlighted so we can see that that is

00:31:46,810 --> 00:31:53,010
where the execution is happening if we

00:31:50,890 --> 00:31:56,500
wanted to go further up the call stack

00:31:53,010 --> 00:31:59,290
you can see there are classes in the

00:31:56,500 --> 00:32:04,330
Flex J's frameworks that are in there so

00:31:59,290 --> 00:32:06,250
we would be able to go to those classes

00:32:04,330 --> 00:32:09,300
and see where where which line is

00:32:06,250 --> 00:32:09,300
actually executing on

00:32:11,730 --> 00:32:17,940
then if I can just resume go back to our

00:32:16,050 --> 00:32:22,200
browser and everything continues as

00:32:17,940 --> 00:32:26,670
normal there was one thing I forgot to

00:32:22,200 --> 00:32:29,490
show a bit earlier so we were able to

00:32:26,670 --> 00:32:32,100
control click or command click on any

00:32:29,490 --> 00:32:34,710
symbol in this file if we wanted to do

00:32:32,100 --> 00:32:37,350
it right here on this alert class this

00:32:34,710 --> 00:32:41,070
is a class that is part of the Flex J's

00:32:37,350 --> 00:32:44,700
framework we can actually go there and

00:32:41,070 --> 00:32:49,680
see the original ActionScript source

00:32:44,700 --> 00:32:55,560
code for this component and so you can

00:32:49,680 --> 00:32:57,300
see all of the all of the original code

00:32:55,560 --> 00:33:00,570
is there we can see the comments we can

00:32:57,300 --> 00:33:02,520
see the documentation and so that's a

00:33:00,570 --> 00:33:07,280
really good way to gain an understanding

00:33:02,520 --> 00:33:09,840
of the framework and be able to have

00:33:07,280 --> 00:33:13,100
direct access to all of the

00:33:09,840 --> 00:33:13,100
documentation and things

00:33:24,500 --> 00:33:33,490
all right let me try they're renamed

00:33:26,600 --> 00:33:36,470
again now that I realized that that I

00:33:33,490 --> 00:33:38,600
was referencing the wrong filename so

00:33:36,470 --> 00:33:41,260
there we go okay so the rename is now

00:33:38,600 --> 00:33:41,260
working

00:33:46,399 --> 00:33:49,399
okay

00:33:51,380 --> 00:33:58,940
so I have links here to all the various

00:33:55,400 --> 00:34:01,750
things that are downloaded for this

00:33:58,940 --> 00:34:05,030
workflow links to documentation things

00:34:01,750 --> 00:34:14,260
that is all I have today so are there

00:34:05,030 --> 00:34:17,419
any questions ok thank you

00:34:14,260 --> 00:34:17,419

YouTube URL: https://www.youtube.com/watch?v=cpZ5XT_cLPI


