Title: The Mod_Proxy Cookbook - Daniel Ruggeri, MasterCard
Publication date: 2017-05-18
Playlist: ApacheCon 2017 - Miami
Description: 
	The Mod_Proxy Cookbook - Daniel Ruggeri, MasterCard

The extensive work over the years on the proxy modules has given httpd a degree of flexibility and intelligence that rivals some hardware load balancers. In this session, the speaker will discuss how a few features of different load balancing solutions line up and why mod_proxy/mod_proxy_balancer may be the best choice for you. After providing an overview of configuration directives, the session will begin exploring solutions to many problems that may arise in today's world of complex web applications and cloud-based systems where mod_proxy just makes it all that much easier. Complicated load balancing setups? No problem! Misbehaving backend applications? Child's play! After this session, the functional basis will be set for handling nearly any proxy situation you can think of.

About Daniel Ruggeri
During the day (and some times late at night), Daniel spends his time at MasterCard in the Operations world supporting thousands of instances of web-based infrastructure: everything from hardware load balancers to heavy-weight Java application servers to even DNS and mail servers. Responsible for not only keeping the lights on 24x7 with the operations team, Daniel also sets the strategic direction for new technologies and how to best utilize existing technologies for the web space at MasterCard.
Captions: 
	00:00:00,000 --> 00:00:04,529
well we will go ahead and get started

00:00:02,820 --> 00:00:07,020
hopefully everyone is in the right place

00:00:04,529 --> 00:00:11,370
we're here to talk about the Apache HTTP

00:00:07,020 --> 00:00:13,110
server proxy these are things that I've

00:00:11,370 --> 00:00:15,599
kind of come across in my day job as

00:00:13,110 --> 00:00:17,820
well as it's my time kind of maintaining

00:00:15,599 --> 00:00:18,990
the proxy code and working with the web

00:00:17,820 --> 00:00:22,560
server that I think it's really useful

00:00:18,990 --> 00:00:24,390
but I'd like to share with you and at

00:00:22,560 --> 00:00:26,220
any given point if you have questions

00:00:24,390 --> 00:00:28,529
comments thoughts and concerns except

00:00:26,220 --> 00:00:32,820
for the two gems and Chris go ahead and

00:00:28,529 --> 00:00:36,210
speak up because I definitely would like

00:00:32,820 --> 00:00:39,329
to know what you guys are doing out in

00:00:36,210 --> 00:00:42,000
your day jobs that we might be able to

00:00:39,329 --> 00:00:43,950
answer questions for in here so if

00:00:42,000 --> 00:00:46,649
there's something that I say that it

00:00:43,950 --> 00:00:49,800
kind of sounds like we can dig a little

00:00:46,649 --> 00:00:52,920
deeper on that go for it so really quick

00:00:49,800 --> 00:00:54,420
about me my name is Dana Ruggeri this is

00:00:52,920 --> 00:00:57,050
what I look like in case you can't see

00:00:54,420 --> 00:00:59,160
me from where you are I am and

00:00:57,050 --> 00:01:01,920
infrastructure guy I work at MasterCard

00:00:59,160 --> 00:01:05,760
have been there for 11 years now and I'm

00:01:01,920 --> 00:01:07,890
a big open source nerd I hang out on the

00:01:05,760 --> 00:01:09,990
httpd development list I actually do

00:01:07,890 --> 00:01:14,490
read every email I don't chime in too

00:01:09,990 --> 00:01:17,130
often but I'm there hanging out on users

00:01:14,490 --> 00:01:21,720
as well and then community def right

00:01:17,130 --> 00:01:23,159
everybody loves community otherwise I do

00:01:21,720 --> 00:01:25,500
will always like to put this in my

00:01:23,159 --> 00:01:28,229
slides I'm here on my own behalf not

00:01:25,500 --> 00:01:32,070
necessarily on mastercards behalf

00:01:28,229 --> 00:01:34,079
because we at the foundation we're

00:01:32,070 --> 00:01:36,270
individuals anyway so if MasterCard were

00:01:34,079 --> 00:01:38,909
to try to say this is MasterCard stance

00:01:36,270 --> 00:01:41,310
on the ASF and then yes I probably

00:01:38,909 --> 00:01:43,890
wouldn't to hear it anyway right so I'm

00:01:41,310 --> 00:01:46,130
here's me come as I am take it or leave

00:01:43,890 --> 00:01:46,130
it

00:01:47,010 --> 00:01:53,070
so what is between you guys and the

00:01:50,580 --> 00:01:58,170
delicious coffee that we have been dying

00:01:53,070 --> 00:02:00,930
for since about 11 o'clock so we're

00:01:58,170 --> 00:02:02,370
going to talk a little bit about things

00:02:00,930 --> 00:02:05,790
that aren't necessarily part of the

00:02:02,370 --> 00:02:08,430
proxy one of the bet great things that

00:02:05,790 --> 00:02:10,200
Apache HTTP D brings to the table is

00:02:08,430 --> 00:02:11,820
it's the Swiss Army knife of the

00:02:10,200 --> 00:02:14,310
internet you can do all kinds of stuff

00:02:11,820 --> 00:02:16,860
with it when you involve that kind of

00:02:14,310 --> 00:02:18,750
stuff with the proxy you can do all

00:02:16,860 --> 00:02:20,190
kinds of really neat things and you'll

00:02:18,750 --> 00:02:22,200
see some of those examples as we go

00:02:20,190 --> 00:02:23,540
along it's also very important for you

00:02:22,200 --> 00:02:26,070
to understand your own applications

00:02:23,540 --> 00:02:27,630
there are some things and I'll try to

00:02:26,070 --> 00:02:29,970
call them out that could be a little bit

00:02:27,630 --> 00:02:33,900
dangerous if you do in your application

00:02:29,970 --> 00:02:36,510
if your application sets bad caching

00:02:33,900 --> 00:02:38,850
headers or does something weird you need

00:02:36,510 --> 00:02:41,910
to understand what these things might do

00:02:38,850 --> 00:02:44,910
to your application and the last part

00:02:41,910 --> 00:02:47,610
the really important thing is if at any

00:02:44,910 --> 00:02:50,100
point I start droning on you think this

00:02:47,610 --> 00:02:51,630
is terrible that's fine just download

00:02:50,100 --> 00:02:53,040
the presentation everything that I'm

00:02:51,630 --> 00:02:54,570
going to talk about in fact a lot of

00:02:53,040 --> 00:02:56,840
things that I'm not going to cover are

00:02:54,570 --> 00:03:00,720
in the presentation in the slide notes

00:02:56,840 --> 00:03:02,489
there are some examples there's a couple

00:03:00,720 --> 00:03:05,100
of things you can kind of read through

00:03:02,489 --> 00:03:07,020
like what does the WebSocket HTTP

00:03:05,100 --> 00:03:09,090
upgrade negotiation look like that's

00:03:07,020 --> 00:03:10,709
actually in the slide notes so go ahead

00:03:09,090 --> 00:03:12,840
and grab this every time I do an update

00:03:10,709 --> 00:03:15,840
to the presentation I make sure I keep

00:03:12,840 --> 00:03:18,260
this location as latest and greatest and

00:03:15,840 --> 00:03:21,390
I also made sure to upload this to the

00:03:18,260 --> 00:03:24,020
conference website so grab the

00:03:21,390 --> 00:03:24,020
presentation

00:03:26,190 --> 00:03:30,610
so this is a long-running section I've

00:03:29,290 --> 00:03:33,130
been giving this talk now a couple years

00:03:30,610 --> 00:03:35,830
I think this is the fourth or fifth time

00:03:33,130 --> 00:03:37,270
and what are the things that have

00:03:35,830 --> 00:03:41,110
changed since the last time we talked

00:03:37,270 --> 00:03:43,420
and it hasn't been a ton but if you look

00:03:41,110 --> 00:03:45,150
in the slides you can see some of the

00:03:43,420 --> 00:03:47,440
hidden slides that have already kind of

00:03:45,150 --> 00:03:49,120
yeah it's not that new anymore but

00:03:47,440 --> 00:03:51,160
things that have happened in the last

00:03:49,120 --> 00:03:54,370
four or five years you can see some of

00:03:51,160 --> 00:03:56,530
those differences still the exciting

00:03:54,370 --> 00:04:01,300
thing to talk about though is of course

00:03:56,530 --> 00:04:07,320
h2 right HTTP 2.0 support in apache HTTP

00:04:01,300 --> 00:04:10,750
d so this is very similar to WebSockets

00:04:07,320 --> 00:04:15,100
negotiated through HTTP 1.1 headers

00:04:10,750 --> 00:04:18,790
using upgrade and it's in 2.4 now so

00:04:15,100 --> 00:04:21,520
last time we talked about the proxy last

00:04:18,790 --> 00:04:23,800
Apache con it hadn't yet landed in 2.4

00:04:21,520 --> 00:04:25,330
this code is in 2.4 you can take

00:04:23,800 --> 00:04:28,540
advantage of it if you're on a newer

00:04:25,330 --> 00:04:31,000
version just know that this is currently

00:04:28,540 --> 00:04:32,950
an experimental state and we're actually

00:04:31,000 --> 00:04:35,710
having conversations right now on the

00:04:32,950 --> 00:04:37,600
development list of ok when do we drop

00:04:35,710 --> 00:04:42,030
that experimental tag because it's

00:04:37,600 --> 00:04:45,070
settling it seems to be quite reliable

00:04:42,030 --> 00:04:47,680
looking like maybe 2 dot next or 2 dot 4

00:04:45,070 --> 00:04:52,000
dot next I should say so I think we're

00:04:47,680 --> 00:04:53,650
on 25 or 26 now next version there's

00:04:52,000 --> 00:04:56,650
talks of dropping that experimental flag

00:04:53,650 --> 00:05:00,010
and moving it to more traditional review

00:04:56,650 --> 00:05:01,450
than commit model so really quick you'll

00:05:00,010 --> 00:05:03,130
see examples like this throughout the

00:05:01,450 --> 00:05:04,770
course of the presentation I don't

00:05:03,130 --> 00:05:08,730
expect you to be able to read them all

00:05:04,770 --> 00:05:12,130
because these can be little straining

00:05:08,730 --> 00:05:16,990
but this is how you would enable it very

00:05:12,130 --> 00:05:19,430
simple load the module and then use it

00:05:16,990 --> 00:05:23,040
so

00:05:19,430 --> 00:05:29,100
fair enough the next one that I'm

00:05:23,040 --> 00:05:33,000
incredibly excited about is in 2.4 we do

00:05:29,100 --> 00:05:33,480
have active monitoring calm down

00:05:33,000 --> 00:05:36,210
everyone

00:05:33,480 --> 00:05:37,620
yeah calm down this is something that a

00:05:36,210 --> 00:05:39,930
lot of folks have actually been

00:05:37,620 --> 00:05:43,110
complaining about for a long time the

00:05:39,930 --> 00:05:44,700
the web server knows about backends but

00:05:43,110 --> 00:05:46,800
only when those backends fail during

00:05:44,700 --> 00:05:49,260
handling during the handling of normal

00:05:46,800 --> 00:05:52,530
HTTP requests this came along and

00:05:49,260 --> 00:05:54,900
actually it was just a week or two after

00:05:52,530 --> 00:05:57,600
the last Apache con I think this landed

00:05:54,900 --> 00:06:00,600
in 2.4 as something that you can take

00:05:57,600 --> 00:06:02,700
advantage of now if you're using a

00:06:00,600 --> 00:06:04,500
vendor provided package or an OS

00:06:02,700 --> 00:06:07,620
provided package it may not have these

00:06:04,500 --> 00:06:09,360
features yet but you always want to

00:06:07,620 --> 00:06:10,590
download your web server you always want

00:06:09,360 --> 00:06:14,340
to compile it yourself anyway because

00:06:10,590 --> 00:06:17,280
that's the best way to do so we will

00:06:14,340 --> 00:06:19,380
have a whole slide on this topic alone

00:06:17,280 --> 00:06:21,480
in a bit but know that this is one of

00:06:19,380 --> 00:06:23,940
the new things it's landed in tune up

00:06:21,480 --> 00:06:25,830
for stable and it's something that I

00:06:23,940 --> 00:06:30,110
really encourage folks to take a look at

00:06:25,830 --> 00:06:33,250
and we'll talk about why in a few slides

00:06:30,110 --> 00:06:37,090
we're good

00:06:33,250 --> 00:06:39,250
okay so let's talk about what are things

00:06:37,090 --> 00:06:43,600
that I think are very important for a

00:06:39,250 --> 00:06:45,730
proxy to do in order to be decent one of

00:06:43,600 --> 00:06:48,310
those things is connection marshaling

00:06:45,730 --> 00:06:48,790
and protocol enforcement what does that

00:06:48,310 --> 00:06:51,160
mean

00:06:48,790 --> 00:06:53,650
well I don't know if you guys have been

00:06:51,160 --> 00:06:57,520
on the Internet but it's a scary place

00:06:53,650 --> 00:06:59,500
out there so if you expose the soft

00:06:57,520 --> 00:07:02,050
nougaty center of your application

00:06:59,500 --> 00:07:04,350
server to the public internet very bad

00:07:02,050 --> 00:07:07,330
things may happen but when you have a

00:07:04,350 --> 00:07:09,640
protocol enforcement point or something

00:07:07,330 --> 00:07:11,400
that is gathering these potentially slow

00:07:09,640 --> 00:07:15,310
or bad connections on the Internet and

00:07:11,400 --> 00:07:16,840
sanitizing them it allows that soft

00:07:15,310 --> 00:07:21,010
nougaty Center to remain soft the

00:07:16,840 --> 00:07:23,710
nougaty right load balancing is also

00:07:21,010 --> 00:07:25,930
incredibly important I'd imagine a lot

00:07:23,710 --> 00:07:29,880
of us here have more than one

00:07:25,930 --> 00:07:33,250
application server you should if not

00:07:29,880 --> 00:07:35,050
let's talk some other time and then

00:07:33,250 --> 00:07:38,220
connection pooling and offloading of

00:07:35,050 --> 00:07:41,530
things like TCP and SSL these can be

00:07:38,220 --> 00:07:44,110
costly much less nowadays than they used

00:07:41,530 --> 00:07:46,180
to be but you would expect your proxy to

00:07:44,110 --> 00:07:47,800
be able to do these things and then

00:07:46,180 --> 00:07:49,479
failover health monitoring we were

00:07:47,800 --> 00:07:51,940
talking about load balancers how do we

00:07:49,479 --> 00:07:57,790
know that one of our pool members isn't

00:07:51,940 --> 00:07:59,680
feeling well the next two actually three

00:07:57,790 --> 00:08:01,870
I would say these are some of the cool

00:07:59,680 --> 00:08:03,550
bits and the extra things that you can

00:08:01,870 --> 00:08:05,860
do because of all the different modules

00:08:03,550 --> 00:08:09,240
that httpd brings to the table so

00:08:05,860 --> 00:08:11,890
modified modifying your balancer pool

00:08:09,240 --> 00:08:14,770
modifying the traffic as it comes in or

00:08:11,890 --> 00:08:16,660
goes and then of course mitigating some

00:08:14,770 --> 00:08:19,860
of those terrible nasty things that

00:08:16,660 --> 00:08:19,860
exist out on the Internet

00:08:20,260 --> 00:08:27,470
are we good with that list no complaints

00:08:23,600 --> 00:08:33,040
cool so let's talk about connection

00:08:27,470 --> 00:08:33,040
marshaling protocol enforcement right so

00:08:33,070 --> 00:08:37,700
I'm sure we've all a lot of us have

00:08:35,419 --> 00:08:41,750
heard of an N tier architecture where

00:08:37,700 --> 00:08:44,210
you have the big bad internet you have

00:08:41,750 --> 00:08:46,340
something that you want to protect and

00:08:44,210 --> 00:08:48,440
then some number of things in between

00:08:46,340 --> 00:08:52,220
whether it be firewalls whether it be

00:08:48,440 --> 00:08:55,580
proxies whatever it is the idea in this

00:08:52,220 --> 00:08:57,350
scenario is you would use HTTP D as your

00:08:55,580 --> 00:08:59,650
termination point as it comes into the

00:08:57,350 --> 00:09:05,630
environment and you can do your

00:08:59,650 --> 00:09:07,520
sanitization you can more or less verify

00:09:05,630 --> 00:09:09,470
that the protocol the client wants to

00:09:07,520 --> 00:09:12,140
speak is actually the protocol it's one

00:09:09,470 --> 00:09:15,230
of the the benefits of having httpd out

00:09:12,140 --> 00:09:17,930
there is it's been around a long time

00:09:15,230 --> 00:09:20,000
and it knows how to talk to the various

00:09:17,930 --> 00:09:22,880
clients it also knows what the rules are

00:09:20,000 --> 00:09:25,190
so you don't have to in your application

00:09:22,880 --> 00:09:30,140
server implement necessarily all of that

00:09:25,190 --> 00:09:31,550
logic and it can be very difficult there

00:09:30,140 --> 00:09:33,770
is one of the things I do want to point

00:09:31,550 --> 00:09:36,320
out and this is something a lot of folks

00:09:33,770 --> 00:09:37,160
on my team kind of struggle with and I

00:09:36,320 --> 00:09:38,660
want to talk about the difference

00:09:37,160 --> 00:09:41,120
between a forward proxy and a reverse

00:09:38,660 --> 00:09:44,060
proxy it has anyone heard these two

00:09:41,120 --> 00:09:46,340
terms I expect you guys have heard it at

00:09:44,060 --> 00:09:49,040
some point and Abril really boils down

00:09:46,340 --> 00:09:51,110
to what does the client know in a

00:09:49,040 --> 00:09:53,690
forward proxy scenario let's say Jim is

00:09:51,110 --> 00:09:55,700
my forward proxy and I need to speak to

00:09:53,690 --> 00:09:57,560
the camera which is right behind him I

00:09:55,700 --> 00:10:00,560
know Jim is there so I will say Jim

00:09:57,560 --> 00:10:04,460
please allow me to speak to this camera

00:10:00,560 --> 00:10:05,840
on the other hand in a reverse proxy the

00:10:04,460 --> 00:10:09,950
client doesn't know anything about

00:10:05,840 --> 00:10:12,920
what's back there all I know is Jim is

00:10:09,950 --> 00:10:14,720
the camera so Jim is taking my messages

00:10:12,920 --> 00:10:17,060
and relaying them directly to the camera

00:10:14,720 --> 00:10:19,250
I don't know that there's anything else

00:10:17,060 --> 00:10:20,750
in between so that's really important to

00:10:19,250 --> 00:10:22,520
kind of know those differences because

00:10:20,750 --> 00:10:24,110
if you accidentally turn on forward

00:10:22,520 --> 00:10:26,000
proxying and you meant to turn on

00:10:24,110 --> 00:10:26,860
reverse proxying you've just become a

00:10:26,000 --> 00:10:29,940
bad Internet

00:10:26,860 --> 00:10:33,690
so let's keep that in mind and here's

00:10:29,940 --> 00:10:37,870
here's an example of a forward proxy

00:10:33,690 --> 00:10:40,000
right so you load the proxy module if

00:10:37,870 --> 00:10:41,920
you're like me you like to use a little

00:10:40,000 --> 00:10:44,980
bit of SSL here and there make sure you

00:10:41,920 --> 00:10:47,290
enable the proxy connect module and then

00:10:44,980 --> 00:10:51,070
this is how we would turn it on so you

00:10:47,290 --> 00:10:56,410
really only need one line proxy requests

00:10:51,070 --> 00:11:01,029
on but please add more lines please

00:10:56,410 --> 00:11:03,279
don't be an open proxy that everyone

00:11:01,029 --> 00:11:05,079
knows why that's really bad right if if

00:11:03,279 --> 00:11:07,899
Jim is an open proxy anything that I do

00:11:05,079 --> 00:11:11,829
appears as though Jim is the jerk doing

00:11:07,899 --> 00:11:14,700
it so I mean not that I would do a jerky

00:11:11,829 --> 00:11:14,700
thing at all but

00:11:17,120 --> 00:11:22,670
so cool so that's a forward proxy let's

00:11:20,420 --> 00:11:24,410
talk about the reverse proxy there's no

00:11:22,670 --> 00:11:25,670
fewer than I think five or six different

00:11:24,410 --> 00:11:27,980
ways you can implement a reverse

00:11:25,670 --> 00:11:29,149
proxying Apache HTTP D so I'm going to

00:11:27,980 --> 00:11:33,199
kind of run through some of those

00:11:29,149 --> 00:11:36,379
examples but this is the one down here

00:11:33,199 --> 00:11:39,079
that I like to use in the slides because

00:11:36,379 --> 00:11:42,610
it's the most compact this is the most

00:11:39,079 --> 00:11:45,379
efficient way because it actually avoids

00:11:42,610 --> 00:11:46,970
walking the file system and all of that

00:11:45,379 --> 00:11:50,059
stuff this is the fastest way to get

00:11:46,970 --> 00:11:51,490
your request to the proxy just know you

00:11:50,059 --> 00:11:53,839
can use a lot of these different methods

00:11:51,490 --> 00:11:56,089
so the first is of course in a location

00:11:53,839 --> 00:11:58,279
block and you can share other things in

00:11:56,089 --> 00:11:59,689
this block you can put access controls

00:11:58,279 --> 00:12:03,220
or whatever

00:11:59,689 --> 00:12:08,509
another is using proxy pass standalone

00:12:03,220 --> 00:12:14,389
and then you'll also see the proxy pass

00:12:08,509 --> 00:12:16,069
reverse I guess directive there so just

00:12:14,389 --> 00:12:18,379
a really quick word about the proxy pass

00:12:16,069 --> 00:12:20,779
reverse line it's not necessary unless

00:12:18,379 --> 00:12:25,279
your application does a redirect on the

00:12:20,779 --> 00:12:30,679
back end so what in they do if you've

00:12:25,279 --> 00:12:32,689
ever used sam'l or any sort of IDP espy

00:12:30,679 --> 00:12:36,079
relationship so when you do the redirect

00:12:32,689 --> 00:12:38,600
it looks for this and it replaces with

00:12:36,079 --> 00:12:40,699
what's on the left side so kind of look

00:12:38,600 --> 00:12:41,990
at it backwards that's another thing a

00:12:40,699 --> 00:12:43,490
lot of folks on our team had kind of

00:12:41,990 --> 00:12:48,139
struggled a little bit with so I wanted

00:12:43,490 --> 00:12:50,269
to call that out yes Chris Bobby example

00:12:48,139 --> 00:12:53,269
you know

00:12:50,269 --> 00:12:56,720
yes automatically add that or you can

00:12:53,269 --> 00:13:02,059
location it does not so we actually be

00:12:56,720 --> 00:13:03,829
saying you just I don't know if proxy

00:13:02,059 --> 00:13:06,230
pass reverse works in a location block

00:13:03,829 --> 00:13:08,540
actually because what it's doing is a

00:13:06,230 --> 00:13:11,480
find and replace on the location header

00:13:08,540 --> 00:13:13,279
so I don't know if it would work that

00:13:11,480 --> 00:13:19,730
way that would probably be something we

00:13:13,279 --> 00:13:21,290
would play with the location block no

00:13:19,730 --> 00:13:24,050
you can still put a proxy pass reverse

00:13:21,290 --> 00:13:29,170
in the location block oh you just need

00:13:24,050 --> 00:13:32,170
all four yard I believe so I mean yes

00:13:29,170 --> 00:13:32,170
cool

00:13:32,210 --> 00:13:37,440
you okay so the documentation says it

00:13:36,120 --> 00:13:40,410
can and you know what as far as

00:13:37,440 --> 00:13:43,920
open-source software documentation the

00:13:40,410 --> 00:13:46,290
HTTP server is the best there is a lot

00:13:43,920 --> 00:13:48,960
of stuff out there really sucks we do

00:13:46,290 --> 00:13:50,510
great another way that you do it is with

00:13:48,960 --> 00:13:52,680
proxy pass match and this is really

00:13:50,510 --> 00:13:55,080
handy or interesting if you want to

00:13:52,680 --> 00:13:57,390
maybe cherry-pick the different URL

00:13:55,080 --> 00:13:59,340
components that you want a proxy and yes

00:13:57,390 --> 00:14:04,260
it is regular expressions so now you

00:13:59,340 --> 00:14:06,180
have two problems going further we've

00:14:04,260 --> 00:14:08,550
all heard of the rewrite engine I hope

00:14:06,180 --> 00:14:12,360
you can do just about anything with the

00:14:08,550 --> 00:14:16,140
rewrite engine including proxy so in

00:14:12,360 --> 00:14:18,420
this particular example the presence of

00:14:16,140 --> 00:14:22,140
the top-secret cookie is what gates

00:14:18,420 --> 00:14:24,480
access to my application now that you

00:14:22,140 --> 00:14:26,280
guys all know my secrets I expect that

00:14:24,480 --> 00:14:28,710
being friends will kind of keep this

00:14:26,280 --> 00:14:30,900
under wraps okay but this is an example

00:14:28,710 --> 00:14:33,450
of under a certain condition then I will

00:14:30,900 --> 00:14:36,510
proxy to this location and you'll notice

00:14:33,450 --> 00:14:39,240
what the rewrite engine my cursor

00:14:36,510 --> 00:14:41,730
doesn't show up but the PFLAG is what

00:14:39,240 --> 00:14:43,740
says this is a proxy instead of a

00:14:41,730 --> 00:14:46,070
rewrite or a redirect or something along

00:14:43,740 --> 00:14:46,070
those lines

00:14:47,180 --> 00:14:52,570
you can also implement load balancing

00:14:49,370 --> 00:14:54,590
and some quick terminology that we use

00:14:52,570 --> 00:14:55,420
excuse me throughout the rest of the

00:14:54,590 --> 00:14:58,970
presentation

00:14:55,420 --> 00:15:02,180
is the concept of balancers and workers

00:14:58,970 --> 00:15:05,000
a balancer contains workers workers are

00:15:02,180 --> 00:15:06,380
your back-end nodes and when you take a

00:15:05,000 --> 00:15:08,510
look at something like this we have a

00:15:06,380 --> 00:15:13,820
balancer as you can imagine called my

00:15:08,510 --> 00:15:16,910
cluster and the worker nodes are 1 2 3 4

00:15:13,820 --> 00:15:18,460
and 1 2 3 5 I just so happen to give

00:15:16,910 --> 00:15:22,400
them a route name of Mercury and Venus

00:15:18,460 --> 00:15:24,830
but the real nodes are those IP

00:15:22,400 --> 00:15:26,870
addresses and then going back to our

00:15:24,830 --> 00:15:29,540
proxy pass reverse conversation this

00:15:26,870 --> 00:15:31,610
also works through balancers so I don't

00:15:29,540 --> 00:15:34,910
have to have to proxy pass per versus

00:15:31,610 --> 00:15:38,080
for balancer members right it's just one

00:15:34,910 --> 00:15:41,210
back to the cluster does that make sense

00:15:38,080 --> 00:15:42,830
getting a couple of nods I know guys

00:15:41,210 --> 00:15:44,570
it's dark in here so try not to fall

00:15:42,830 --> 00:15:46,750
asleep I'll do what I can to keep things

00:15:44,570 --> 00:15:46,750
interesting

00:15:48,610 --> 00:15:54,949
but wait there's more you can also

00:15:51,740 --> 00:15:58,310
implement proxies through a DBM file and

00:15:54,949 --> 00:16:01,339
what's really cool about this is you can

00:15:58,310 --> 00:16:03,310
have a large set of URLs going to a

00:16:01,339 --> 00:16:05,779
large set of different backends and

00:16:03,310 --> 00:16:08,870
because it is a DBM file that is

00:16:05,779 --> 00:16:11,389
externalized from httpd when you update

00:16:08,870 --> 00:16:13,310
that DBM file httpd is smart enough to

00:16:11,389 --> 00:16:19,190
realize that and change your proxying

00:16:13,310 --> 00:16:21,319
rules it's a fairly niche itch to

00:16:19,190 --> 00:16:23,029
scratch but it's actually a really cool

00:16:21,319 --> 00:16:25,339
feature because you don't have to do

00:16:23,029 --> 00:16:26,649
even a graceful reload of the config you

00:16:25,339 --> 00:16:30,529
update that file

00:16:26,649 --> 00:16:33,319
rethread not parse it but you remap it

00:16:30,529 --> 00:16:34,940
and bam httpd is doing the right thing

00:16:33,319 --> 00:16:38,329
it's sending requests to the different

00:16:34,940 --> 00:16:41,750
places and then finally you can also set

00:16:38,329 --> 00:16:47,290
it up as a handler time this is semi-new

00:16:41,750 --> 00:16:51,740
and 2.4 10 and this is a really fun

00:16:47,290 --> 00:16:55,209
funky example so for this example we are

00:16:51,740 --> 00:16:57,709
proxying to a local UNIX domain socket

00:16:55,209 --> 00:17:00,649
which is one of the new things that we

00:16:57,709 --> 00:17:04,309
talked about a few years ago which is

00:17:00,649 --> 00:17:08,430
actually a FC GI process on the same

00:17:04,309 --> 00:17:11,150
machine cool

00:17:08,430 --> 00:17:11,150
all right

00:17:12,980 --> 00:17:18,020
so load balancing and traffic

00:17:14,570 --> 00:17:21,410
distribution this is what in my mind of

00:17:18,020 --> 00:17:24,170
what the killer feature is because if

00:17:21,410 --> 00:17:26,570
you run your infrastructure as I run

00:17:24,170 --> 00:17:28,760
mine there are many nodes there are a

00:17:26,570 --> 00:17:30,500
lot of different ways things can come in

00:17:28,760 --> 00:17:32,810
they come into the proxy and I need to

00:17:30,500 --> 00:17:36,560
spread them out all over the place

00:17:32,810 --> 00:17:38,420
so yes httpd does that it has different

00:17:36,560 --> 00:17:40,220
load distribution methodologies I'm not

00:17:38,420 --> 00:17:42,770
going to read them all to you just know

00:17:40,220 --> 00:17:44,990
that they're out there and I'm going to

00:17:42,770 --> 00:17:46,220
I wasn't really going to pick on them

00:17:44,990 --> 00:17:49,880
but I'm going to pick a little bit on

00:17:46,220 --> 00:17:52,550
Jim Riggs here one of the proposals that

00:17:49,880 --> 00:17:56,420
he put together a few years ago years

00:17:52,550 --> 00:17:58,070
ago was to maybe I'd create a new way of

00:17:56,420 --> 00:18:00,470
doing load balancing that's more

00:17:58,070 --> 00:18:02,750
standardized and that is a way for a

00:18:00,470 --> 00:18:05,060
back-end to advertise its own health to

00:18:02,750 --> 00:18:07,640
the server maybe share a load number or

00:18:05,060 --> 00:18:09,740
something like that and he had some

00:18:07,640 --> 00:18:12,010
really great ideas he threw it out there

00:18:09,740 --> 00:18:16,790
we we talked back and forth and then

00:18:12,010 --> 00:18:19,330
nothing so I still have hopes that maybe

00:18:16,790 --> 00:18:21,890
we could turn this into a standard I

00:18:19,330 --> 00:18:25,790
still I wasn't going to mess with you

00:18:21,890 --> 00:18:27,650
but you started so no actually I mean I

00:18:25,790 --> 00:18:29,030
I hope we can all kind of see the value

00:18:27,650 --> 00:18:32,780
in that this is actually what mod

00:18:29,030 --> 00:18:34,310
cluster does in the JBoss world it's

00:18:32,780 --> 00:18:37,760
actually able to advertise

00:18:34,310 --> 00:18:41,450
I am the server I have 15 concurrent

00:18:37,760 --> 00:18:42,950
requests on that guy's only got 12 maybe

00:18:41,450 --> 00:18:47,060
you should send the load his Direction

00:18:42,950 --> 00:18:48,350
is more or less the desire to share that

00:18:47,060 --> 00:18:52,810
information from the back end to the

00:18:48,350 --> 00:18:52,810
front end and I didn't take a drink

00:18:53,560 --> 00:18:56,230
so let's talk about some of the

00:18:54,910 --> 00:18:58,300
interesting things you can do with load

00:18:56,230 --> 00:19:01,360
balancing you can actually do asymmetric

00:18:58,300 --> 00:19:02,710
distribution and there are some

00:19:01,360 --> 00:19:04,560
directives that come into play in order

00:19:02,710 --> 00:19:07,660
to do that so load factor is one of them

00:19:04,560 --> 00:19:09,490
if I assign a back end with a higher

00:19:07,660 --> 00:19:11,800
load factor it's going to get more

00:19:09,490 --> 00:19:14,020
requests it's going to be the ratio

00:19:11,800 --> 00:19:17,370
exactly as you would expect if you put 3

00:19:14,020 --> 00:19:20,350
here and 5 here it's going to be 3 to 5

00:19:17,370 --> 00:19:22,500
you can also set up a hot standby and

00:19:20,350 --> 00:19:26,290
this is very useful if you need to

00:19:22,500 --> 00:19:29,350
provide something back to the users or

00:19:26,290 --> 00:19:32,230
perhaps you have a backhaul connection

00:19:29,350 --> 00:19:34,030
to your backends let's say you're in

00:19:32,230 --> 00:19:35,590
your primary data center you always want

00:19:34,030 --> 00:19:36,700
to talk to your local data center

00:19:35,590 --> 00:19:38,770
because it's just going to be more

00:19:36,700 --> 00:19:41,380
efficient but if those go down for

00:19:38,770 --> 00:19:44,980
maintenance or go down because somebody

00:19:41,380 --> 00:19:47,200
unplugged something why don't we talk to

00:19:44,980 --> 00:19:48,820
the backup data center directly maybe a

00:19:47,200 --> 00:19:51,310
little less efficient but the site stays

00:19:48,820 --> 00:19:54,430
up so that's where a hot standby would

00:19:51,310 --> 00:19:58,540
come into play you can also use load

00:19:54,430 --> 00:20:00,850
balancer sets it's almost I would say

00:19:58,540 --> 00:20:03,610
when you're just doing - you know

00:20:00,850 --> 00:20:05,590
primary and secondary it's almost like a

00:20:03,610 --> 00:20:07,420
duplication of functionality between the

00:20:05,590 --> 00:20:10,840
hot standby but you can actually get

00:20:07,420 --> 00:20:15,970
pretty advanced maybe you have three or

00:20:10,840 --> 00:20:19,620
four sets so that becomes an option and

00:20:15,970 --> 00:20:22,570
another one is to selectively not proxy

00:20:19,620 --> 00:20:24,790
and we'll go see an example so let's

00:20:22,570 --> 00:20:28,570
take a look at our waiting example so we

00:20:24,790 --> 00:20:30,940
have again my cluster and we have to

00:20:28,570 --> 00:20:32,710
balance or members and we went ahead and

00:20:30,940 --> 00:20:34,300
threw a third one in there and let's say

00:20:32,710 --> 00:20:35,650
I don't know that might be the old

00:20:34,300 --> 00:20:37,360
machine that Daniel is running

00:20:35,650 --> 00:20:39,610
underneath this desk it's still alive

00:20:37,360 --> 00:20:42,130
it's still on life support but you know

00:20:39,610 --> 00:20:46,450
it's really not as beefy as these other

00:20:42,130 --> 00:20:49,450
two machines so if I ask you guys there

00:20:46,450 --> 00:20:50,820
are five requests where do we think

00:20:49,450 --> 00:20:54,300
we'll go

00:20:50,820 --> 00:20:55,830
with a load factor of two and two we

00:20:54,300 --> 00:21:00,090
would have four requests to these guys

00:20:55,830 --> 00:21:03,800
and one request here so two two and one

00:21:00,090 --> 00:21:03,800
it really is that straightforward

00:21:08,310 --> 00:21:12,790
there are a couple other parameters in

00:21:10,420 --> 00:21:19,150
here that I'll kind of point out we have

00:21:12,790 --> 00:21:20,830
a softmax being set as well as some some

00:21:19,150 --> 00:21:22,810
Voodoo going on with the sticky session

00:21:20,830 --> 00:21:23,920
and we'll talk a little bit more about

00:21:22,810 --> 00:21:25,510
that but I wanted to really just

00:21:23,920 --> 00:21:27,100
highlight this is how you can set

00:21:25,510 --> 00:21:32,730
additional parameters you just kind of

00:21:27,100 --> 00:21:37,330
slap them on to the end makes sense good

00:21:32,730 --> 00:21:40,750
cool so we talked about hot standby and

00:21:37,330 --> 00:21:44,080
I think that's a very good use case so

00:21:40,750 --> 00:21:48,330
for example on the hot standby setup my

00:21:44,080 --> 00:21:53,200
local datacenter 1.2.3.4 and 1.2.3.4

00:21:48,330 --> 00:21:54,760
the right here in Miami so ideally I

00:21:53,200 --> 00:21:56,830
would talk to the servers that are

00:21:54,760 --> 00:22:00,040
located next to me what if both of those

00:21:56,830 --> 00:22:07,920
are down I should talk to 1.2 3.6 which

00:22:00,040 --> 00:22:07,920
is in Austin so the hot standby yep

00:22:10,770 --> 00:22:16,000
administrative we down we'll get to that

00:22:13,630 --> 00:22:18,400
yeah there's a there are ways that you

00:22:16,000 --> 00:22:20,800
can do that administrative Lee and even

00:22:18,400 --> 00:22:22,000
programmatically with scripting and

00:22:20,800 --> 00:22:31,180
we'll get to that in just a minute

00:22:22,000 --> 00:22:32,890
good question yes hot standby state will

00:22:31,180 --> 00:22:35,670
only be answered if all other pool

00:22:32,890 --> 00:22:35,670
members are down

00:22:39,730 --> 00:22:46,070
kind of like the part drive we're in a

00:22:43,990 --> 00:22:51,820
race that for men

00:22:46,070 --> 00:22:55,610
so I think you can have interesting

00:22:51,820 --> 00:22:58,070
interesting because that way at least

00:22:55,610 --> 00:22:59,980
two or yeah no that's that's a really

00:22:58,070 --> 00:23:03,010
good use case I actually never

00:22:59,980 --> 00:23:05,090
contemplated that that's curious

00:23:03,010 --> 00:23:07,760
well we have plenty of room to add

00:23:05,090 --> 00:23:10,040
additional states right it's it's just

00:23:07,760 --> 00:23:17,600
an integer and we're we're you know bit

00:23:10,040 --> 00:23:18,860
masking so right I think hey cool start

00:23:17,600 --> 00:23:21,020
start the conversation now and then

00:23:18,860 --> 00:23:23,350
we'll talk in three years when nothing

00:23:21,020 --> 00:23:23,350
happens

00:23:25,310 --> 00:23:28,910
okay so selective practicing this is

00:23:27,350 --> 00:23:31,820
actually a really cool example and one

00:23:28,910 --> 00:23:34,520
that I've used in in my day job let's

00:23:31,820 --> 00:23:36,320
say I have a fairly busy website I have

00:23:34,520 --> 00:23:39,950
my static content right here on the web

00:23:36,320 --> 00:23:42,890
server I have two backends and then I

00:23:39,950 --> 00:23:48,320
also have a third back-end that does

00:23:42,890 --> 00:23:51,050
other stuff so really quick let's take a

00:23:48,320 --> 00:23:53,990
look at how this is declared order is

00:23:51,050 --> 00:23:56,420
very important for the proxy in this

00:23:53,990 --> 00:24:00,290
example if a request comes in for slash

00:23:56,420 --> 00:24:05,600
static httpd will serve that content

00:24:00,290 --> 00:24:07,430
directly because I've added and this is

00:24:05,600 --> 00:24:09,470
much harder than I thought it would be

00:24:07,430 --> 00:24:12,740
I've added the exclamation point there

00:24:09,470 --> 00:24:16,910
to say do not proxy this location so

00:24:12,740 --> 00:24:19,640
that's the first hit if I come for slash

00:24:16,910 --> 00:24:22,220
application a I will not hit on static

00:24:19,640 --> 00:24:25,670
but I will get here and I'll go to this

00:24:22,220 --> 00:24:29,480
balancer application B would again go to

00:24:25,670 --> 00:24:32,180
another balancer and if I match neither

00:24:29,480 --> 00:24:33,620
I don't think you would say neither if I

00:24:32,180 --> 00:24:35,330
don't match static I don't match

00:24:33,620 --> 00:24:37,490
application a and I don't match

00:24:35,330 --> 00:24:40,400
application B then everything else

00:24:37,490 --> 00:24:42,110
should go to this other cluster and this

00:24:40,400 --> 00:24:45,020
is actually our hot cluster from the

00:24:42,110 --> 00:24:47,660
previous example so in this example we

00:24:45,020 --> 00:24:50,480
have three clusters three load balancers

00:24:47,660 --> 00:24:52,700
three back-end applications and then all

00:24:50,480 --> 00:24:53,550
of our static content here served by a

00:24:52,700 --> 00:25:00,420
patch of age

00:24:53,550 --> 00:25:02,910
differs the Tomcats community we often

00:25:00,420 --> 00:25:05,250
recommend again green mapping or else

00:25:02,910 --> 00:25:07,500
papers like you have happen to have here

00:25:05,250 --> 00:25:13,050
some applications some slack application

00:25:07,500 --> 00:25:16,290
a latch yes I'm working server is there

00:25:13,050 --> 00:25:20,880
anything that's inherently tomcat II

00:25:16,290 --> 00:25:23,820
about that problem or is a universal

00:25:20,880 --> 00:25:25,410
absolutely not no so it yes so so what

00:25:23,820 --> 00:25:27,900
what Chris had stated is generally in

00:25:25,410 --> 00:25:31,950
the Tomcat community you would avoid

00:25:27,900 --> 00:25:34,110
doing URL trickery in your proxying or

00:25:31,950 --> 00:25:35,610
as you come in and what he what he

00:25:34,110 --> 00:25:39,120
observed and this is a good point but I

00:25:35,610 --> 00:25:41,820
didn't point out is I'm coming in on

00:25:39,120 --> 00:25:45,120
slash application a and that's being

00:25:41,820 --> 00:25:48,510
proxied back to app cluster one whatever

00:25:45,120 --> 00:25:50,490
comes after slash application a that's

00:25:48,510 --> 00:25:53,630
what goes to the back end so you can use

00:25:50,490 --> 00:25:56,160
this to kind of manipulate the URI

00:25:53,630 --> 00:26:00,230
there's pros and cons and one of the

00:25:56,160 --> 00:26:04,320
cons is if your application is doing

00:26:00,230 --> 00:26:05,970
server qualified redirects you have to

00:26:04,320 --> 00:26:07,860
be very careful with your proxy pass

00:26:05,970 --> 00:26:09,480
traverses so you have to catch those and

00:26:07,860 --> 00:26:17,520
fix them on the way out if you're doing

00:26:09,480 --> 00:26:22,440
just relative redirects a ok ok no and

00:26:17,520 --> 00:26:24,900
it also yes and it also goes down to

00:26:22,440 --> 00:26:26,940
links to so if your application thinks I

00:26:24,900 --> 00:26:29,790
am always going to be deployed on slash

00:26:26,940 --> 00:26:32,190
Chris then I might construct all of my

00:26:29,790 --> 00:26:35,670
links as server relative slash Chris

00:26:32,190 --> 00:26:37,950
slash about HTML if I do this type of

00:26:35,670 --> 00:26:41,340
trickery in the proxy I break that link

00:26:37,950 --> 00:26:44,280
so remember I said no your application

00:26:41,340 --> 00:26:46,890
this is why so there will be some some

00:26:44,280 --> 00:26:49,020
strange breakages on the other side

00:26:46,890 --> 00:26:50,730
maybe marketing comes in and says look I

00:26:49,020 --> 00:26:53,160
don't like having slash Chris in the URL

00:26:50,730 --> 00:26:57,170
can you get rid of that this is a way

00:26:53,160 --> 00:26:57,170
that you could do it sorry Chris

00:26:58,710 --> 00:27:02,310
there's another note I wanted to draw

00:27:00,450 --> 00:27:09,750
out here but I couldn't remember what it

00:27:02,310 --> 00:27:14,540
was I did tell it not the proxy static

00:27:09,750 --> 00:27:14,540
because HTTP is a very good web server

00:27:15,230 --> 00:27:21,450
so yeah Jim made a very yes this is a

00:27:19,530 --> 00:27:24,930
very good point if I were to reverse

00:27:21,450 --> 00:27:29,010
these four lines everything would go to

00:27:24,930 --> 00:27:42,750
hot clustered everything because it's

00:27:29,010 --> 00:27:45,350
the first match disk Chris I wanted to

00:27:42,750 --> 00:27:51,950
mention it I talked about a couple times

00:27:45,350 --> 00:27:54,460
without realizing is going on the

00:27:51,950 --> 00:27:57,020
next impact to use for property past

00:27:54,460 --> 00:28:00,110
specifically at the end o the trailing

00:27:57,020 --> 00:28:02,990
slashes you must match slash as you must

00:28:00,110 --> 00:28:05,750
must must match slashes in fact that

00:28:02,990 --> 00:28:07,370
should be an enhancer that not

00:28:05,750 --> 00:28:09,350
necessarily a security issue but it

00:28:07,370 --> 00:28:11,330
could take its cruelly could become one

00:28:09,350 --> 00:28:13,700
but it's not necessarily one right it's

00:28:11,330 --> 00:28:16,340
all in the context most of the time

00:28:13,700 --> 00:28:19,160
it'll manifest as broken links or just

00:28:16,340 --> 00:28:20,600
your proxy isn't working so what Chris

00:28:19,160 --> 00:28:23,390
was pointing out is you must match

00:28:20,600 --> 00:28:25,070
either having a slash at the end or not

00:28:23,390 --> 00:28:27,050
having a slash at the end if you put a

00:28:25,070 --> 00:28:29,090
slash on one and not on the other

00:28:27,050 --> 00:28:31,700
it gets mapped directly in that way so

00:28:29,090 --> 00:28:33,110
you may completely change the context

00:28:31,700 --> 00:28:36,500
route that you're going to on the back

00:28:33,110 --> 00:28:37,730
end by mistake that does seem like

00:28:36,500 --> 00:28:41,030
something that would be easy enough to

00:28:37,730 --> 00:28:43,100
detect and wore on so maybe maybe

00:28:41,030 --> 00:28:46,130
there's a patch that I could write for

00:28:43,100 --> 00:28:48,490
that correct me if I'm wrong but I

00:28:46,130 --> 00:28:48,490
believe

00:28:48,630 --> 00:28:52,440
URL segment where you have an

00:28:50,550 --> 00:28:55,200
application yes--that's

00:28:52,440 --> 00:28:57,330
get the prefix match as your that you're

00:28:55,200 --> 00:29:00,030
trying to map it into the proxy and so

00:28:57,330 --> 00:29:02,660
while your brain might think you don't

00:29:00,030 --> 00:29:05,070
need a slash but just in the past second

00:29:02,660 --> 00:29:07,200
if you had application name is how the

00:29:05,070 --> 00:29:09,420
trailing slash if you requested

00:29:07,200 --> 00:29:11,700
application application with a capital a

00:29:09,420 --> 00:29:13,440
that would go through the proxy even

00:29:11,700 --> 00:29:17,400
though someone reading the configuration

00:29:13,440 --> 00:29:21,450
the easy answer is just just match

00:29:17,400 --> 00:29:22,590
slashes just match slashes cool how

00:29:21,450 --> 00:29:28,920
would the example so they make sense

00:29:22,590 --> 00:29:32,310
guys okay so here's a new one this slide

00:29:28,920 --> 00:29:33,560
is in progress because we just decided

00:29:32,310 --> 00:29:35,760
there's going to be a change coming

00:29:33,560 --> 00:29:38,520
these are the different worker statuses

00:29:35,760 --> 00:29:41,040
that you might see in the proxy through

00:29:38,520 --> 00:29:43,590
the load balancer so there there's

00:29:41,040 --> 00:29:45,210
disabled and stopped and for the life of

00:29:43,590 --> 00:29:47,060
me I can't really figure out what the

00:29:45,210 --> 00:29:50,220
functional differences between the two

00:29:47,060 --> 00:29:51,780
but you asked Jay earlier if if there's

00:29:50,220 --> 00:29:53,940
a way to administrative leap it

00:29:51,780 --> 00:29:55,650
something out of service that would be

00:29:53,940 --> 00:29:59,180
how either one of those would do it

00:29:55,650 --> 00:30:02,790
would stop getting traffic requests I

00:29:59,180 --> 00:30:05,640
believe yeah requests that have that

00:30:02,790 --> 00:30:08,130
route mapped so if you set a cookie that

00:30:05,640 --> 00:30:09,180
says I should go to the Jay server

00:30:08,130 --> 00:30:10,860
directly

00:30:09,180 --> 00:30:14,400
it'll still be honored until that

00:30:10,860 --> 00:30:17,400
machine is done for you can also put a

00:30:14,400 --> 00:30:19,320
worker in to ignore error State and I

00:30:17,400 --> 00:30:20,760
encourage you guys to double check the

00:30:19,320 --> 00:30:22,380
documentation this is just a quick

00:30:20,760 --> 00:30:23,790
summary there a little bit of nuances

00:30:22,380 --> 00:30:27,110
with some of the statuses that you can

00:30:23,790 --> 00:30:27,110
pull from the documentation

00:30:27,299 --> 00:30:35,789
I want to bring down so empathy is an

00:30:32,850 --> 00:30:38,369
example to reload the annulment request

00:30:35,789 --> 00:30:41,489
we'll only ones with the cookie will

00:30:38,369 --> 00:30:44,850
encode testicular never favors gets home

00:30:41,489 --> 00:30:48,739
I mean I think you wanted to dream state

00:30:44,850 --> 00:30:48,739
understatement one and not

00:30:50,010 --> 00:30:56,580
sorry yes yeah yes soon I can have a

00:30:53,760 --> 00:30:59,669
situation all I ask of things what we do

00:30:56,580 --> 00:31:05,880
that it could be on the proxy but he

00:30:59,669 --> 00:31:08,250
wasn't right so you didn't have a

00:31:05,880 --> 00:31:12,210
picture based only on Fox

00:31:08,250 --> 00:31:14,419
we back to the church education so with

00:31:12,210 --> 00:31:14,419
that

00:31:14,690 --> 00:31:19,770
William Marcus over for debate we just

00:31:17,580 --> 00:31:21,809
want a listing session on a server

00:31:19,770 --> 00:31:23,400
cortically no yeah that would be that

00:31:21,809 --> 00:31:30,590
that would be the drain mode I misspoke

00:31:23,400 --> 00:31:33,870
no you drains drain would be right

00:31:30,590 --> 00:31:38,400
you're you're jumping ahead but wait

00:31:33,870 --> 00:31:40,710
there's more I prepared for this yeah so

00:31:38,400 --> 00:31:42,900
um so we talked about hot standby the

00:31:40,710 --> 00:31:45,390
error state is when the proxy has

00:31:42,900 --> 00:31:49,049
detected during normal operation that

00:31:45,390 --> 00:31:51,480
the worker is not healthy so that is

00:31:49,049 --> 00:31:54,330
live traffic went to that guy and it did

00:31:51,480 --> 00:31:55,980
not work then there's also the drain

00:31:54,330 --> 00:31:58,070
state which we just discussed and then

00:31:55,980 --> 00:32:00,900
the check which is an indication that

00:31:58,070 --> 00:32:02,669
health check found a problem and has

00:32:00,900 --> 00:32:05,490
intentionally marked it out of service

00:32:02,669 --> 00:32:08,059
so normal requests will not go to this

00:32:05,490 --> 00:32:09,570
worker because the health check has said

00:32:08,059 --> 00:32:12,679
hang on a minute

00:32:09,570 --> 00:32:14,990
something something kind of smells here

00:32:12,679 --> 00:32:18,000
and then there's the redirect state is

00:32:14,990 --> 00:32:19,799
request they go to this it's not really

00:32:18,000 --> 00:32:21,660
a state per se but request that would

00:32:19,799 --> 00:32:22,890
land on this balance remember should

00:32:21,660 --> 00:32:25,530
actually go to this other balance

00:32:22,890 --> 00:32:28,320
remember instead and then there will be

00:32:25,530 --> 00:32:31,280
a new one that Jim's going to introduce

00:32:28,320 --> 00:32:44,380
for us here soon

00:32:31,280 --> 00:32:47,610
are are for what how about J for Jim

00:32:44,380 --> 00:32:49,900
so sticky sessions everybody loves

00:32:47,610 --> 00:32:51,910
microservices especially your proxy

00:32:49,900 --> 00:32:53,890
administrator because they don't have to

00:32:51,910 --> 00:32:55,690
care if I send you to the same back-end

00:32:53,890 --> 00:32:57,460
that I originally sent you to but

00:32:55,690 --> 00:33:00,910
unfortunately there are a lot of things

00:32:57,460 --> 00:33:03,190
that do require that so any time that

00:33:00,910 --> 00:33:04,990
you're using a shopping cart that

00:33:03,190 --> 00:33:06,640
session information has to live

00:33:04,990 --> 00:33:08,380
somewhere and unless you have taken the

00:33:06,640 --> 00:33:10,059
trouble of extracting next session

00:33:08,380 --> 00:33:12,039
information out of your container and

00:33:10,059 --> 00:33:14,740
put it somewhere else maybe a reddish

00:33:12,039 --> 00:33:17,799
cash or persisted at the disk or

00:33:14,740 --> 00:33:21,789
database somehow it's very important

00:33:17,799 --> 00:33:23,289
that the next time we talk I send the

00:33:21,789 --> 00:33:25,270
request to where it originally went

00:33:23,289 --> 00:33:28,330
otherwise my shopping cart is now empty

00:33:25,270 --> 00:33:32,860
or I'm not logged in or something that I

00:33:28,330 --> 00:33:34,450
was doing just got lost so oh and the

00:33:32,860 --> 00:33:36,760
other option and I'll point this out a

00:33:34,450 --> 00:33:38,710
lot of application servers offer session

00:33:36,760 --> 00:33:40,450
replication that can be expensive

00:33:38,710 --> 00:33:42,280
depending on how you do it and it may

00:33:40,450 --> 00:33:46,990
not scale very well depending on how

00:33:42,280 --> 00:33:47,409
much traffic you end up seeing so you do

00:33:46,990 --> 00:33:50,020
built-in

00:33:47,409 --> 00:33:53,100
load balancing I'm sorry sticky

00:33:50,020 --> 00:33:55,630
sessioning my proxy balancer does

00:33:53,100 --> 00:33:57,490
include facilities to do this but it

00:33:55,630 --> 00:33:59,980
depends on your application server works

00:33:57,490 --> 00:34:03,520
great with Tomcat also requires you to

00:33:59,980 --> 00:34:08,980
know certain parameters about Tomcat it

00:34:03,520 --> 00:34:13,350
can work with WebSphere I'm not so sure

00:34:08,980 --> 00:34:17,800
about things like web logic and then PHP

00:34:13,350 --> 00:34:20,200
not even close right so the other option

00:34:17,800 --> 00:34:23,050
is roll your own which I don't really

00:34:20,200 --> 00:34:24,909
like either because anytime you reinvent

00:34:23,050 --> 00:34:28,240
something you have to ask yourself am i

00:34:24,909 --> 00:34:31,240
doing this as well as perhaps the

00:34:28,240 --> 00:34:34,030
experts would do it regardless the route

00:34:31,240 --> 00:34:37,149
compared out parameter is what does this

00:34:34,030 --> 00:34:39,550
this work so we saw earlier on some

00:34:37,149 --> 00:34:41,859
examples way back when we had a mercury

00:34:39,550 --> 00:34:45,940
and a Venus cluster or a node in our

00:34:41,859 --> 00:34:47,590
cluster if I am presented a cookie that

00:34:45,940 --> 00:34:49,639
says I should go to mercury then that's

00:34:47,590 --> 00:35:00,540
where I should go

00:34:49,639 --> 00:35:02,910
yes Chris write your own mount we'll do

00:35:00,540 --> 00:35:05,130
it somewhere else in your infrastructure

00:35:02,910 --> 00:35:07,560
you could you could use a rewrite engine

00:35:05,130 --> 00:35:08,760
to do it man you know there's there's a

00:35:07,560 --> 00:35:11,040
lot of different ways that you could do

00:35:08,760 --> 00:35:13,470
it because and this is where I kind of

00:35:11,040 --> 00:35:19,619
go into it it's just looking at cookies

00:35:13,470 --> 00:35:22,470
and it's just making a decision you

00:35:19,619 --> 00:35:25,950
could use my obsession yep to create a

00:35:22,470 --> 00:35:27,930
local session on Apache HTTP yeah

00:35:25,950 --> 00:35:31,770
there's a lot of there's a lot of things

00:35:27,930 --> 00:35:33,930
you could do what I like to do well let

00:35:31,770 --> 00:35:37,680
me say let me finish saying why this is

00:35:33,930 --> 00:35:39,690
a problem at least for me we talked

00:35:37,680 --> 00:35:42,930
about different Java backends JBoss

00:35:39,690 --> 00:35:44,310
websphere tomcat even PHP all of these

00:35:42,930 --> 00:35:48,240
different backends have different cookie

00:35:44,310 --> 00:35:50,490
formats for their session cookies so you

00:35:48,240 --> 00:35:52,680
have to know a lot of things that you

00:35:50,490 --> 00:35:54,450
may not want to know or it may be a pain

00:35:52,680 --> 00:35:57,050
in the backside to know maybe you are a

00:35:54,450 --> 00:35:59,280
web server administrator and the

00:35:57,050 --> 00:36:01,080
application server administrator is a

00:35:59,280 --> 00:36:02,670
different team and you have to talk to

00:36:01,080 --> 00:36:05,730
someone else and that's awful nobody

00:36:02,670 --> 00:36:07,650
wants to talk to people you also have to

00:36:05,730 --> 00:36:12,150
know what those values are so in

00:36:07,650 --> 00:36:15,810
websphere there's a clone ID and it's a

00:36:12,150 --> 00:36:17,250
very strange series of someone tapped a

00:36:15,810 --> 00:36:18,780
bunch of keys on the keyboard and that

00:36:17,250 --> 00:36:22,740
is your route parameter and it means

00:36:18,780 --> 00:36:25,560
nothing to humans so because of those

00:36:22,740 --> 00:36:28,740
reasons the built in is not 100%

00:36:25,560 --> 00:36:33,480
compatible but there is a really great

00:36:28,740 --> 00:36:35,490
way to use the other features of httpd

00:36:33,480 --> 00:36:38,609
and some of the environment variables

00:36:35,490 --> 00:36:43,200
that the proxy module will set so you as

00:36:38,609 --> 00:36:45,480
we did before create our balancer

00:36:43,200 --> 00:36:48,750
and then inside the balancer we're going

00:36:45,480 --> 00:36:50,130
to tell the proxy module hey the sticky

00:36:48,750 --> 00:36:53,339
session cookie we're going to call it

00:36:50,130 --> 00:36:54,900
Daniel's app underscore sticky name it

00:36:53,339 --> 00:36:58,109
whatever you'd like it doesn't matter

00:36:54,900 --> 00:37:00,119
because in the next line here we're

00:36:58,109 --> 00:37:02,700
actually using the header module to say

00:37:00,119 --> 00:37:07,470
and this is a little bit a little bit to

00:37:02,700 --> 00:37:08,160
digest all at once if balancer route is

00:37:07,470 --> 00:37:10,500
changed

00:37:08,160 --> 00:37:14,579
that's an environment variable if the

00:37:10,500 --> 00:37:16,530
proxy detected that I'm not going to or

00:37:14,579 --> 00:37:19,530
I haven't been presented a cookie that

00:37:16,530 --> 00:37:22,890
takes me to a specific route then I'm

00:37:19,530 --> 00:37:24,720
going to add a cookie called Daniel zap

00:37:22,890 --> 00:37:27,990
underscore sticky there it is again

00:37:24,720 --> 00:37:31,099
I'm going to put some string and then

00:37:27,990 --> 00:37:36,030
adopt and I'm going to put the value of

00:37:31,099 --> 00:37:37,920
the route that the proxy chose so when

00:37:36,030 --> 00:37:39,599
does this come into play it comes into

00:37:37,920 --> 00:37:41,880
play if this is the first time I showed

00:37:39,599 --> 00:37:44,309
up because the balancer is going to

00:37:41,880 --> 00:37:47,130
decide I should go to the gym cluster or

00:37:44,309 --> 00:37:49,410
I should go to the J cluster it'll also

00:37:47,130 --> 00:37:51,690
come into play if let's say the gym

00:37:49,410 --> 00:37:54,059
cluster goes down the balancer has

00:37:51,690 --> 00:37:56,010
decided I can't send the traffic there I

00:37:54,059 --> 00:37:59,280
have to send it somewhere else a new

00:37:56,010 --> 00:38:00,720
cookie gets set by mod headers so I use

00:37:59,280 --> 00:38:01,799
the heck out of this because then I

00:38:00,720 --> 00:38:05,309
won't have to talk to anybody I don't

00:38:01,799 --> 00:38:07,770
have to look at other configs the front

00:38:05,309 --> 00:38:09,569
end is completely stateless with

00:38:07,770 --> 00:38:11,579
relation to any values that the backend

00:38:09,569 --> 00:38:17,130
might set so this is just a nice little

00:38:11,579 --> 00:38:18,720
recipe I like to use and we are going a

00:38:17,130 --> 00:38:20,400
little slow but it's fine because you

00:38:18,720 --> 00:38:22,819
guys are going to download the sides and

00:38:20,400 --> 00:38:25,559
you'll have all the information so

00:38:22,819 --> 00:38:28,880
connection pooling big deal for proxies

00:38:25,559 --> 00:38:28,880
big deal for load balancers

00:38:28,940 --> 00:38:33,830
so easy it's almost automatic so there

00:38:32,630 --> 00:38:36,610
are a couple parameters to come into

00:38:33,830 --> 00:38:38,810
play max is the hard number of

00:38:36,610 --> 00:38:42,020
connections that will be open to any one

00:38:38,810 --> 00:38:44,000
back-end a soft max is if I have any

00:38:42,020 --> 00:38:46,430
more than this number after some time

00:38:44,000 --> 00:38:48,200
I'm going to tear them down and then TTL

00:38:46,430 --> 00:38:48,770
is how long is the connection allowed to

00:38:48,200 --> 00:38:50,720
be idle

00:38:48,770 --> 00:38:52,400
some other things come into play though

00:38:50,720 --> 00:38:57,200
and I just want to point this out really

00:38:52,400 --> 00:38:58,880
quick that if you have a long-lived TCP

00:38:57,200 --> 00:39:01,790
connection open to a back-end that

00:38:58,880 --> 00:39:06,350
back-end probably has keepalive timeouts

00:39:01,790 --> 00:39:07,820
or other HD or TCP timeouts set so that

00:39:06,350 --> 00:39:09,320
could diminish the value of any

00:39:07,820 --> 00:39:11,120
connection pool and you configure in

00:39:09,320 --> 00:39:13,700
your proxy if the back-end is closing

00:39:11,120 --> 00:39:16,460
the connection too soon so generally

00:39:13,700 --> 00:39:18,350
speaking what I tend to recommend is on

00:39:16,460 --> 00:39:20,570
your back-end web application server on

00:39:18,350 --> 00:39:23,240
your back-end HTTP server whatever it is

00:39:20,570 --> 00:39:25,550
set keep a lifetime out to infinite

00:39:23,240 --> 00:39:28,880
because you're not talking to that nasty

00:39:25,550 --> 00:39:32,360
scary Internet and set the TCP time out

00:39:28,880 --> 00:39:33,950
to a pretty long amount of time that way

00:39:32,360 --> 00:39:36,950
when a connection is established by your

00:39:33,950 --> 00:39:40,330
front-end it can stay open ready and

00:39:36,950 --> 00:39:42,740
active until it's needed

00:39:40,330 --> 00:39:44,330
so here's an example of connection

00:39:42,740 --> 00:39:46,010
pooling you'll notice we really didn't

00:39:44,330 --> 00:39:48,470
do much of anything different or special

00:39:46,010 --> 00:39:51,880
we just set some different parameters on

00:39:48,470 --> 00:39:51,880
how many connections we'll be open

00:39:52,520 --> 00:39:58,470
now I will point out there's a min

00:39:54,720 --> 00:40:00,090
parameter but that min parameter is not

00:39:58,470 --> 00:40:01,980
actually the minimum number of

00:40:00,090 --> 00:40:04,920
connections it will open when httpd

00:40:01,980 --> 00:40:08,490
starts min is the number of connections

00:40:04,920 --> 00:40:11,520
that will be persisted if that point is

00:40:08,490 --> 00:40:14,700
reached or gone beyond if you only have

00:40:11,520 --> 00:40:17,010
a need for one connection at a given

00:40:14,700 --> 00:40:19,800
time you will only ever see one

00:40:17,010 --> 00:40:22,830
connection open but if you set a min of

00:40:19,800 --> 00:40:24,630
two or three and you still only ever use

00:40:22,830 --> 00:40:26,790
one connection you're still only going

00:40:24,630 --> 00:40:29,520
to see one connection however if you set

00:40:26,790 --> 00:40:32,610
them in of to a max of ten and you burst

00:40:29,520 --> 00:40:34,890
up to five you'll see it's somewhere

00:40:32,610 --> 00:40:38,610
between two and five that makes sense

00:40:34,890 --> 00:40:41,130
it's not actually it's not actually I

00:40:38,610 --> 00:40:43,200
guess aggressively established it's just

00:40:41,130 --> 00:40:46,040
it's established when it's needed and

00:40:43,200 --> 00:40:52,620
then it doesn't go below that number

00:40:46,040 --> 00:40:54,420
during normal server operation so the

00:40:52,620 --> 00:40:57,390
other part that I really think is

00:40:54,420 --> 00:41:00,090
important for proxies is doing a hard

00:40:57,390 --> 00:41:03,020
stuff by the by the things that are

00:41:00,090 --> 00:41:08,490
really good at doing that hard stuff so

00:41:03,020 --> 00:41:13,830
SSL benefits Apache HTTP D is it uses

00:41:08,490 --> 00:41:15,990
the open SSL library if you are rich you

00:41:13,830 --> 00:41:18,690
may have crypto accelerators that plug

00:41:15,990 --> 00:41:20,910
into that open SSL library

00:41:18,690 --> 00:41:24,030
you know John Fredrik right this moment

00:41:20,910 --> 00:41:25,800
or in the last session is actually

00:41:24,030 --> 00:41:28,080
giving a talk on how to squeeze out more

00:41:25,800 --> 00:41:32,490
performance from Tomcat and one of the

00:41:28,080 --> 00:41:34,800
ways is to use open SSL let HTTPS be

00:41:32,490 --> 00:41:36,750
gets the cell for you and then inside

00:41:34,800 --> 00:41:38,970
the trusted network within those walled

00:41:36,750 --> 00:41:42,090
garden boundaries go clear text if that

00:41:38,970 --> 00:41:44,760
if that suits your security posture it

00:41:42,090 --> 00:41:49,380
makes a lot of sense running a little

00:41:44,760 --> 00:41:51,600
time a little time tight right now but I

00:41:49,380 --> 00:41:53,820
have a really cool nodejs use case where

00:41:51,600 --> 00:41:56,760
I don't know if it's build the case but

00:41:53,820 --> 00:41:57,900
no js' SSL support really sucked I mean

00:41:56,760 --> 00:42:00,730
it was really really bad

00:41:57,900 --> 00:42:04,450
and an application that you know ray

00:42:00,730 --> 00:42:07,420
thirty eight forty thousand HTTP

00:42:04,450 --> 00:42:09,339
requests a second when turning SSL on it

00:42:07,420 --> 00:42:12,280
went down to about six requests after

00:42:09,339 --> 00:42:14,560
six thousand requests a second we

00:42:12,280 --> 00:42:17,320
fronted it with hd-dvd through a UDS

00:42:14,560 --> 00:42:20,320
socket and bumped up to like thirty

00:42:17,320 --> 00:42:21,700
eight thousand requests so let the thing

00:42:20,320 --> 00:42:24,300
that's really good at doing that thing

00:42:21,700 --> 00:42:24,300
do that thing

00:42:26,369 --> 00:42:35,920
so failover and health attention so

00:42:32,349 --> 00:42:38,260
there's there's it's not all roses some

00:42:35,920 --> 00:42:43,060
failures are only detectable by handling

00:42:38,260 --> 00:42:44,800
it with live traffic sometimes failures

00:42:43,060 --> 00:42:47,650
are detected by your users these are

00:42:44,800 --> 00:42:50,440
examples of things that you might see in

00:42:47,650 --> 00:42:52,420
your environment so SSL errors for

00:42:50,440 --> 00:42:54,820
example those will go back to the user

00:42:52,420 --> 00:42:57,339
there's really not a way cleanly to

00:42:54,820 --> 00:42:58,089
recover from that if the back end goes

00:42:57,339 --> 00:43:02,020
down though

00:42:58,089 --> 00:43:04,060
that's TCP no HTTP session has been

00:43:02,020 --> 00:43:07,869
started no work has been done so that

00:43:04,060 --> 00:43:11,530
fails over seamlessly also slow or hung

00:43:07,869 --> 00:43:14,200
backends excuse me those go back to the

00:43:11,530 --> 00:43:15,790
user as well but because you know your

00:43:14,200 --> 00:43:17,440
application and you spend some time

00:43:15,790 --> 00:43:20,680
talking to your application developers

00:43:17,440 --> 00:43:22,150
you know that you can use to fail on on

00:43:20,680 --> 00:43:23,589
time out yeah that's what we were

00:43:22,150 --> 00:43:26,680
talking about earlier I couldn't

00:43:23,589 --> 00:43:31,359
remember the exact directive so if you

00:43:26,680 --> 00:43:33,790
have a request that takes five seconds

00:43:31,359 --> 00:43:35,440
you can time out in a shorter amount of

00:43:33,790 --> 00:43:37,569
time and then you can mark that back-end

00:43:35,440 --> 00:43:43,950
out of service and say that guy's really

00:43:37,569 --> 00:43:43,950
slow you're striking the Chris

00:43:44,360 --> 00:43:47,120
here's the really cool stuff and this is

00:43:45,620 --> 00:43:49,700
stuff that I'm really jazzed about this

00:43:47,120 --> 00:43:51,800
is a past that Jim put together last

00:43:49,700 --> 00:43:55,550
year one of the things that we voted

00:43:51,800 --> 00:43:58,070
into 2.4 proper just after Apache con

00:43:55,550 --> 00:44:01,010
wrapped up last year and you can do

00:43:58,070 --> 00:44:02,890
probing of your back ends so you can do

00:44:01,010 --> 00:44:04,220
very simple pieces feet

00:44:02,890 --> 00:44:07,550
knock-knock-knock

00:44:04,220 --> 00:44:11,060
are you there or in advanced HTTP

00:44:07,550 --> 00:44:14,630
requests you can even be really clever

00:44:11,060 --> 00:44:16,580
and say as long as this match shows up

00:44:14,630 --> 00:44:19,130
in the response I guess I should

00:44:16,580 --> 00:44:22,490
consider the backend ok so what you can

00:44:19,130 --> 00:44:24,230
do on this is with your web or erm sorry

00:44:22,490 --> 00:44:26,360
your application server you can

00:44:24,230 --> 00:44:28,550
implement a health check a self-help

00:44:26,360 --> 00:44:31,130
diagnostic that says yeah I can get my

00:44:28,550 --> 00:44:33,110
database connections yes the ESB is up

00:44:31,130 --> 00:44:35,690
if you're into that sort of thing

00:44:33,110 --> 00:44:37,910
yes I can do all of the things that I

00:44:35,690 --> 00:44:40,640
need to do and only after executing

00:44:37,910 --> 00:44:43,010
those checks does it return something

00:44:40,640 --> 00:44:44,750
that indicates itself otherwise you can

00:44:43,010 --> 00:44:47,240
proactively be taking an out of service

00:44:44,750 --> 00:44:49,010
and this is all stuff that's done on the

00:44:47,240 --> 00:44:53,570
side it's not wasting connections from

00:44:49,010 --> 00:44:56,600
your actual connection pool that your

00:44:53,570 --> 00:45:00,080
user traffic is using very cool stuff

00:44:56,600 --> 00:45:04,940
and here's how you were doing so this is

00:45:00,080 --> 00:45:06,680
a it's an open source example which

00:45:04,940 --> 00:45:09,460
since it's open source I shamelessly

00:45:06,680 --> 00:45:11,559
stole it from my side

00:45:09,460 --> 00:45:14,559
right out of the documentation it's a

00:45:11,559 --> 00:45:18,700
really good example of how you can check

00:45:14,559 --> 00:45:24,339
that the word failure does not show up

00:45:18,700 --> 00:45:26,950
anywhere in the backend so I have these

00:45:24,339 --> 00:45:30,280
balancer members let's say alpha and

00:45:26,950 --> 00:45:32,380
beta and I'm using the health check

00:45:30,280 --> 00:45:37,270
template that I'm just declaring right

00:45:32,380 --> 00:45:40,119
here and as long as the health check

00:45:37,270 --> 00:45:42,010
expression is coming back clean which in

00:45:40,119 --> 00:45:43,839
this case that's a negative check as

00:45:42,010 --> 00:45:46,119
long as failure does not show up I'm

00:45:43,839 --> 00:45:51,130
good as long as that comes back clean

00:45:46,119 --> 00:45:52,869
these guys will stay in service it's

00:45:51,130 --> 00:45:55,359
really exciting guys come on somebody

00:45:52,869 --> 00:45:59,170
should be clapping right now give Jim fi

00:45:55,359 --> 00:46:00,849
a high-five guys the other part is you

00:45:59,170 --> 00:46:02,470
can do live traffic monitoring keep an

00:46:00,849 --> 00:46:05,200
eye on how things are going you can set

00:46:02,470 --> 00:46:06,880
some parameters if I can't connect after

00:46:05,200 --> 00:46:09,309
this many seconds or milliseconds I

00:46:06,880 --> 00:46:12,940
should abandon the connection you can

00:46:09,309 --> 00:46:14,829
also do proxy timeout so if I don't get

00:46:12,940 --> 00:46:17,890
a response or submit a full request

00:46:14,829 --> 00:46:20,380
after this much time bail on the

00:46:17,890 --> 00:46:22,380
connection and then also fail on status

00:46:20,380 --> 00:46:24,640
which is something that I actually

00:46:22,380 --> 00:46:26,619
really needed in the WebSphere world

00:46:24,640 --> 00:46:29,440
because there are times there's a period

00:46:26,619 --> 00:46:31,299
of time between when certain application

00:46:29,440 --> 00:46:33,970
servers will start answering p2p

00:46:31,299 --> 00:46:36,609
connections and before the application

00:46:33,970 --> 00:46:39,130
actually starts so it'll give you a 503

00:46:36,609 --> 00:46:40,599
hey I'm not ready yet I would rather you

00:46:39,130 --> 00:46:43,750
be out of service until you are ready

00:46:40,599 --> 00:46:45,190
please and then of course another option

00:46:43,750 --> 00:46:49,299
is you can just drive traffic through

00:46:45,190 --> 00:46:50,710
your your sites with monitoring I would

00:46:49,299 --> 00:46:52,180
suggest you should use the built in

00:46:50,710 --> 00:46:55,140
health check unless you need something a

00:46:52,180 --> 00:46:55,140
little more advanced

00:46:57,319 --> 00:47:05,250
grab the flag guys at peace yeah two

00:47:01,920 --> 00:47:06,510
minutes I know okay so and this is this

00:47:05,250 --> 00:47:10,369
is what you're kind of talking about

00:47:06,510 --> 00:47:13,170
Jase so you can dynamically modify your

00:47:10,369 --> 00:47:16,440
cluster configuration your proxy load

00:47:13,170 --> 00:47:18,540
balancer the best way to do it is what

00:47:16,440 --> 00:47:19,859
the balancer manager so there are a

00:47:18,540 --> 00:47:25,200
couple of things that you'll see in the

00:47:19,859 --> 00:47:26,420
balancer manager and these are all

00:47:25,200 --> 00:47:31,079
things that you'll see on the next slide

00:47:26,420 --> 00:47:35,250
but what I will point out is you are an

00:47:31,079 --> 00:47:37,920
admin you're working on production be

00:47:35,250 --> 00:47:41,069
safe out there the balancer manager will

00:47:37,920 --> 00:47:43,950
not say hey are you sure you just said

00:47:41,069 --> 00:47:46,650
drain on everything or take it all down

00:47:43,950 --> 00:47:49,829
are you sure hey you just wrote a script

00:47:46,650 --> 00:47:52,559
and are you sure you want to yeah

00:47:49,829 --> 00:47:54,089
so be careful so this is what the

00:47:52,559 --> 00:47:56,190
balancer manager looks like on the left

00:47:54,089 --> 00:47:58,230
side we actually see the balancer

00:47:56,190 --> 00:48:00,299
manager and then on the right side this

00:47:58,230 --> 00:48:02,940
is an example of what the workers would

00:48:00,299 --> 00:48:06,270
look like so this slides a bit of an eye

00:48:02,940 --> 00:48:07,950
chart is very clear in the downloaded

00:48:06,270 --> 00:48:09,210
presentation but you can see the

00:48:07,950 --> 00:48:11,130
different parameters that you can set

00:48:09,210 --> 00:48:13,799
you can see all the various things that

00:48:11,130 --> 00:48:16,859
you can learn about your environment how

00:48:13,799 --> 00:48:20,640
often was this worker chosen what's its

00:48:16,859 --> 00:48:22,170
current status all kinds of stuff you

00:48:20,640 --> 00:48:23,579
can change a couple of parameters there

00:48:22,170 --> 00:48:27,660
are some parameters that you cannot

00:48:23,579 --> 00:48:28,920
change but do your question earlier one

00:48:27,660 --> 00:48:32,549
of the things that you absolutely can

00:48:28,920 --> 00:48:37,019
change is the state

00:48:32,549 --> 00:48:41,459
first started I used to manager it was

00:48:37,019 --> 00:48:43,709
fun but I have certain things I do on a

00:48:41,459 --> 00:48:46,979
regular basis and I just coming out in

00:48:43,709 --> 00:48:49,410
stances and sure needed a plaintiff I

00:48:46,979 --> 00:48:53,309
come behind their figured out as opposed

00:48:49,410 --> 00:48:57,390
to has so the there's there's good and

00:48:53,309 --> 00:48:59,910
bad and there's some errata so to kind

00:48:57,390 --> 00:49:03,689
of share with that into that 4.4 you can

00:48:59,910 --> 00:49:07,439
actually persist that state so the

00:49:03,689 --> 00:49:09,329
challenge in 2.4 dot three and older is

00:49:07,439 --> 00:49:11,999
if I mark this out of service

00:49:09,329 --> 00:49:14,400
intentionally if I have to do a restart

00:49:11,999 --> 00:49:16,559
of httpd for whatever reason it goes

00:49:14,400 --> 00:49:18,179
back into service you can enable the

00:49:16,559 --> 00:49:20,130
persistence of these parameters that are

00:49:18,179 --> 00:49:23,640
set so even though you don't necessarily

00:49:20,130 --> 00:49:25,769
see it in the config file you do do a

00:49:23,640 --> 00:49:32,539
restart and come into the the state that

00:49:25,769 --> 00:49:34,920
you expect to be in do or not show you

00:49:32,539 --> 00:49:38,039
yeah

00:49:34,920 --> 00:49:39,900
using shell script general to basically

00:49:38,039 --> 00:49:42,500
do things you're done so you could have

00:49:39,900 --> 00:49:45,089
you know a cron job set up absolutely

00:49:42,500 --> 00:49:46,529
colonel you know request that's

00:49:45,089 --> 00:49:50,880
basically all the thing I've been making

00:49:46,529 --> 00:49:52,950
punch respect yeah so Jim Jim makes a

00:49:50,880 --> 00:49:54,809
really good point and and that's uh you

00:49:52,950 --> 00:49:57,900
can script this stuff because it's it's

00:49:54,809 --> 00:50:00,299
not it's not full rest like but it's

00:49:57,900 --> 00:50:02,309
it's deterministic you can enable and

00:50:00,299 --> 00:50:05,000
disable the trick is you have to either

00:50:02,309 --> 00:50:06,869
set the nonce to a value that you're

00:50:05,000 --> 00:50:08,640
expecting it's like a shared secret

00:50:06,869 --> 00:50:10,980
between your client and the server or

00:50:08,640 --> 00:50:14,640
disable the nonce and that exists to

00:50:10,980 --> 00:50:17,390
avoid cross-site request forgery in like

00:50:14,640 --> 00:50:21,230
browser land users administrating

00:50:17,390 --> 00:50:21,230
administering httpd

00:50:24,030 --> 00:50:28,540
well it's pence I mean it depends on

00:50:26,890 --> 00:50:33,640
what's right for you

00:50:28,540 --> 00:50:37,930
okay the mark I guess the way I would

00:50:33,640 --> 00:50:39,760
approach it is I hear your concern if

00:50:37,930 --> 00:50:42,070
I'm going to be in a maintenance mode

00:50:39,760 --> 00:50:44,230
for longer than a typical maintenance

00:50:42,070 --> 00:50:47,020
window I would probably want to do a

00:50:44,230 --> 00:50:50,140
change to the config and reload because

00:50:47,020 --> 00:50:51,700
then you know maybe I win the lottery

00:50:50,140 --> 00:50:55,270
between when maintenance starts and

00:50:51,700 --> 00:50:57,010
finishes and I just walk away I I'm a

00:50:55,270 --> 00:50:59,440
big stickler I like the configuration to

00:50:57,010 --> 00:51:00,790
represent what's actually out there but

00:50:59,440 --> 00:51:02,980
if you're doing maintenance that it's a

00:51:00,790 --> 00:51:04,960
5 10 minute ordeal and it's all scripted

00:51:02,980 --> 00:51:16,600
this would probably be the most

00:51:04,960 --> 00:51:18,590
efficient method that's true that's

00:51:16,600 --> 00:51:25,940
correct yes

00:51:18,590 --> 00:51:25,940
they even take one of the other

00:51:28,320 --> 00:51:32,050
which may not that may be another thing

00:51:30,120 --> 00:51:36,910
we'll hold on

00:51:32,050 --> 00:51:38,740
so I I'm overtime I still have a handful

00:51:36,910 --> 00:51:40,060
of slides but that's okay because you

00:51:38,740 --> 00:51:41,830
guys are going to download them and it's

00:51:40,060 --> 00:51:44,470
going to be great and in in the next

00:51:41,830 --> 00:51:45,910
couple of slides I talk about things

00:51:44,470 --> 00:51:47,920
that you can do to shape traffic I

00:51:45,910 --> 00:51:49,420
wanted you know my application writes

00:51:47,920 --> 00:51:52,810
bad link so I'm going to fix it on the

00:51:49,420 --> 00:51:56,050
way out I'm going to compress or cache

00:51:52,810 --> 00:51:58,150
my content I'm going to do things to

00:51:56,050 --> 00:51:59,770
enhance my security and make sure nobody

00:51:58,150 --> 00:52:01,720
comes into my house and makes a mess

00:51:59,770 --> 00:52:03,640
there are modules that can help you with

00:52:01,720 --> 00:52:06,460
that go ahead and grab the slides take a

00:52:03,640 --> 00:52:09,130
look at them and one last time this is

00:52:06,460 --> 00:52:10,660
where you can download it from and I try

00:52:09,130 --> 00:52:12,520
not to keep a little profile when I'm

00:52:10,660 --> 00:52:14,500
here I absolutely would love to talk

00:52:12,520 --> 00:52:16,090
with you guys about what are you use

00:52:14,500 --> 00:52:17,470
cases what are things that I could add

00:52:16,090 --> 00:52:19,300
to this presentation what are things

00:52:17,470 --> 00:52:23,140
that just didn't really do it for you

00:52:19,300 --> 00:52:26,240
I'd love to hear it otherwise let's clap

00:52:23,140 --> 00:52:31,420
real quick and then go have some coffee

00:52:26,240 --> 00:52:31,420

YouTube URL: https://www.youtube.com/watch?v=fO9-2tY4N2Q


