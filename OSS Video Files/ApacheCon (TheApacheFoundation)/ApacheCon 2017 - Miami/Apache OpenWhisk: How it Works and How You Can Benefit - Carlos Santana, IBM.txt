Title: Apache OpenWhisk: How it Works and How You Can Benefit - Carlos Santana, IBM
Publication date: 2017-05-19
Playlist: ApacheCon 2017 - Miami
Description: 
	Apache OpenWhisk: How it Works and How You Can Benefit - Carlos Santana, IBM

Apache OpenWhisk is a serverless platform ideally suited to a wide range of scenarios including cognitive, data, IoT, microservices, and mobile workloads. During this talk we will illustrate how to benefit by “going” serverless with OpenWhisk by exploring some real-world customer use-cases with a focus on how serverless architectures can be exploited for cognitive applications such as multimedia (images & videos) analysis & object detection, and conversational applications.

Using these use-cases we will explain how OpenWhisk works and why it is the ideally platform for these emerging workloads. We will also show new integrations with other tools such as API Gateway to enable the building of APIs/backends as well as extensions to the programming model.

About Carlos Santana
Senior Software Architect on Bluemix OpenWhisk. PMC member and committer of Apache OpenWhisk and Apache Cordova involved on leveraging open source technologies within IBM’s Cloud organization. Twitter http://twitter.com/csantanapr GitHub http://github.com/csantanapr
Captions: 
	00:00:01,220 --> 00:00:07,680
so let's do something to do a break

00:00:04,170 --> 00:00:09,290
break the eyes everybody stand up let's

00:00:07,680 --> 00:00:12,240
let's stretch everybody

00:00:09,290 --> 00:00:14,000
just just one minute right we're a

00:00:12,240 --> 00:00:17,699
family so we feel comfortable about

00:00:14,000 --> 00:00:21,539
asking questions and everything so let's

00:00:17,699 --> 00:00:22,880
do a few claps like one two keep going

00:00:21,539 --> 00:00:27,080
keep going

00:00:22,880 --> 00:00:30,869
so these will be a standing ovation

00:00:27,080 --> 00:00:32,820
thank you thank you so now I can tweet I

00:00:30,869 --> 00:00:34,950
got a standing ovation my talk

00:00:32,820 --> 00:00:36,630
everybody loves all the people I love

00:00:34,950 --> 00:00:41,040
serverless they'll be contributing to

00:00:36,630 --> 00:00:43,530
the project or incubating anyway so

00:00:41,040 --> 00:00:45,090
let's let's get started I have some

00:00:43,530 --> 00:00:48,300
people that will tell me if I could go

00:00:45,090 --> 00:00:52,350
over if I don't get we happen to twelve

00:00:48,300 --> 00:00:54,660
to twelve ten right I'm at it's after me

00:00:52,350 --> 00:00:56,430
so if you stay here you'll get you get

00:00:54,660 --> 00:00:59,879
double bonus you'll get to hear about

00:00:56,430 --> 00:01:02,370
open which twice um and we'll go deeper

00:00:59,879 --> 00:01:05,070
into the repos with Matt Oggy I'll give

00:01:02,370 --> 00:01:10,250
an overview so my name is Carlos Santana

00:01:05,070 --> 00:01:13,229
I don't play the guitar not a musician I

00:01:10,250 --> 00:01:14,790
was good with math and then good with

00:01:13,229 --> 00:01:18,930
computers

00:01:14,790 --> 00:01:20,670
I work in IBM I'm also a BMC member and

00:01:18,930 --> 00:01:23,580
committer for Apache Cordova PhoneGap

00:01:20,670 --> 00:01:28,340
anyone have used PhoneGap or have heard

00:01:23,580 --> 00:01:30,840
Apertura okay there's just a big

00:01:28,340 --> 00:01:33,200
conference going off a funk update so I

00:01:30,840 --> 00:01:37,020
think all the computers are over there

00:01:33,200 --> 00:01:40,259
so I started this this project we we

00:01:37,020 --> 00:01:42,780
went into incubation December so open

00:01:40,259 --> 00:01:44,850
with is scoring in incubation the

00:01:42,780 --> 00:01:46,799
project have been in github in open

00:01:44,850 --> 00:01:51,210
source for about a year before that it

00:01:46,799 --> 00:01:55,979
was inside IBM being developed so so for

00:01:51,210 --> 00:01:57,810
2002 give a a quick evolution of why

00:01:55,979 --> 00:02:00,750
would I care what is the server listing

00:01:57,810 --> 00:02:03,180
I've been doing server servers and you

00:02:00,750 --> 00:02:05,040
know j2ee and nodejs servers for a while

00:02:03,180 --> 00:02:08,520
so those are the type of service or

00:02:05,040 --> 00:02:10,830
we're talking about so the evolution

00:02:08,520 --> 00:02:12,120
many years ago I started working in

00:02:10,830 --> 00:02:16,379
instauration

00:02:12,120 --> 00:02:18,450
and servers in IBM so I had a lot of

00:02:16,379 --> 00:02:20,700
experience dealing with physical servers

00:02:18,450 --> 00:02:24,330
in turn PowerPC so that's where

00:02:20,700 --> 00:02:27,599
developers or applications you needed to

00:02:24,330 --> 00:02:30,120
build your servers but for developers it

00:02:27,599 --> 00:02:31,860
was like steps 70 right by the time you

00:02:30,120 --> 00:02:34,920
got to install your application like the

00:02:31,860 --> 00:02:36,989
team that did something it took a while

00:02:34,920 --> 00:02:38,760
and sometimes it took awhile from

00:02:36,989 --> 00:02:40,800
another team to set up the storage

00:02:38,760 --> 00:02:43,019
instead of the network and get the CPUs

00:02:40,800 --> 00:02:46,560
and everything so we got an evolution on

00:02:43,019 --> 00:02:48,930
that and then came VMware and the vm's

00:02:46,560 --> 00:02:50,700
revolution and that got a little bit

00:02:48,930 --> 00:02:52,860
easier where somebody goes give you an

00:02:50,700 --> 00:02:54,569
image but you still manage an image you

00:02:52,860 --> 00:02:57,239
were control of the operating system and

00:02:54,569 --> 00:03:00,300
also took a while to get to that to that

00:02:57,239 --> 00:03:01,830
level of getting the application up and

00:03:00,300 --> 00:03:05,459
running and getting a solution and

00:03:01,830 --> 00:03:08,849
getting a prototype then we go into mr.

00:03:05,459 --> 00:03:11,760
site container so recently containers

00:03:08,849 --> 00:03:18,599
becoming the sandbox or the methodology

00:03:11,760 --> 00:03:27,090
of is this plain why this thing nice

00:03:18,599 --> 00:03:31,990
thing do not play and will make it not

00:03:27,090 --> 00:03:35,010
playing let's see

00:03:31,990 --> 00:03:35,010
I can do this

00:03:35,530 --> 00:03:45,420
the first rain send it let's see if we

00:03:42,010 --> 00:03:51,580
can think I'm not touching anything

00:03:45,420 --> 00:03:53,440
stir again so yeah I was talking about

00:03:51,580 --> 00:03:55,810
containers it's a new methodology of

00:03:53,440 --> 00:03:58,600
deploying applications and that became

00:03:55,810 --> 00:03:59,890
easier but you still needed to do some

00:03:58,600 --> 00:04:02,020
management and orchestration of

00:03:59,890 --> 00:04:03,940
containers something like kubernetes or

00:04:02,020 --> 00:04:05,800
docker compose you still managing

00:04:03,940 --> 00:04:07,840
servers and orchestrating them and load

00:04:05,800 --> 00:04:11,110
balancing and then how many do I have

00:04:07,840 --> 00:04:13,810
we regions like you had put them and

00:04:11,110 --> 00:04:16,660
then with functions it's the new

00:04:13,810 --> 00:04:20,739
evolution also coined by lambda Amazon

00:04:16,660 --> 00:04:22,840
lambda it becomes easier so you you

00:04:20,739 --> 00:04:23,830
don't have to manage the server your app

00:04:22,840 --> 00:04:25,690
you don't have to worry about the

00:04:23,830 --> 00:04:27,580
infrastructure you care about small

00:04:25,690 --> 00:04:29,200
snippets of code that you put in the

00:04:27,580 --> 00:04:31,120
cloud or you put you know put in the

00:04:29,200 --> 00:04:32,740
system in the platform and then the

00:04:31,120 --> 00:04:35,110
system would take care of elastically

00:04:32,740 --> 00:04:37,110
deploy them and run them so you just

00:04:35,110 --> 00:04:39,760
concentrate on just just your code

00:04:37,110 --> 00:04:43,180
literally in functions you know not a

00:04:39,760 --> 00:04:48,070
certify of a server of one monolithic

00:04:43,180 --> 00:04:50,800
app the programming model is very very

00:04:48,070 --> 00:04:54,820
simple we call we call them it triggers

00:04:50,800 --> 00:04:57,850
event during programming language these

00:04:54,820 --> 00:04:59,620
are some of the trends that I put them

00:04:57,850 --> 00:05:00,910
just to have them in the slides I'm not

00:04:59,620 --> 00:05:01,990
going to go over them but if you have

00:05:00,910 --> 00:05:04,810
business people that you want to

00:05:01,990 --> 00:05:07,030
convince about trying out or getting

00:05:04,810 --> 00:05:09,729
started this is kind of the market

00:05:07,030 --> 00:05:13,990
trends on on the type of industries of

00:05:09,729 --> 00:05:16,210
applications also the some of the

00:05:13,990 --> 00:05:19,200
industries are are getting into

00:05:16,210 --> 00:05:19,200
serverless

00:05:19,590 --> 00:05:26,320
bluemix is the IBM cloud platform so we

00:05:22,900 --> 00:05:28,570
have just a quick overview we have many

00:05:26,320 --> 00:05:31,950
things we have many services but it

00:05:28,570 --> 00:05:34,419
breaks down in terms of compute to the

00:05:31,950 --> 00:05:36,310
starting range with which server less

00:05:34,419 --> 00:05:38,229
which is open with so we run open with

00:05:36,310 --> 00:05:40,720
in our in our platform and then you have

00:05:38,229 --> 00:05:42,610
platform as a service which is based on

00:05:40,720 --> 00:05:44,440
Cloud Foundry and you have containers

00:05:42,610 --> 00:05:45,970
and you have VM so you have you have a

00:05:44,440 --> 00:05:48,160
spectrum of building different

00:05:45,970 --> 00:05:49,360
applications in a single cloud taking

00:05:48,160 --> 00:05:52,509
advantage of

00:05:49,360 --> 00:05:58,180
I think last count was 150 different

00:05:52,509 --> 00:06:00,400
services from cognitive IOT Watson no

00:05:58,180 --> 00:06:03,129
sequel databases and different services

00:06:00,400 --> 00:06:04,810
so as a manager we that's what we offer

00:06:03,129 --> 00:06:07,900
but today we're going to consider on the

00:06:04,810 --> 00:06:10,599
open source project since this is an

00:06:07,900 --> 00:06:13,780
Apache and not a business business set

00:06:10,599 --> 00:06:16,479
so open with so open with instead

00:06:13,780 --> 00:06:18,430
function as a service everybody's given

00:06:16,479 --> 00:06:21,639
a different name event-driven

00:06:18,430 --> 00:06:23,889
programming model the worst name that

00:06:21,639 --> 00:06:26,020
they were given a server less because

00:06:23,889 --> 00:06:28,509
there's a bunch of servers actually but

00:06:26,020 --> 00:06:32,020
managed by you that are managed by me or

00:06:28,509 --> 00:06:34,000
my team so we have a lot of VMs and I

00:06:32,020 --> 00:06:36,610
was given a talk this week of our

00:06:34,000 --> 00:06:39,340
challenges as commuters or running this

00:06:36,610 --> 00:06:41,770
application is how do we feed so many

00:06:39,340 --> 00:06:44,020
functions in a single VM for all these

00:06:41,770 --> 00:06:45,879
multi tenant users and at the same time

00:06:44,020 --> 00:06:47,830
do it in a you know single-digit

00:06:45,879 --> 00:06:52,629
millisecond running these containers

00:06:47,830 --> 00:06:54,130
this winch's with open source it's a

00:06:52,629 --> 00:06:57,849
patrocle incubation editing everybody's

00:06:54,130 --> 00:07:00,039
familiar with apache we are coordinating

00:06:57,849 --> 00:07:01,810
we Adobe so Adobe an IBM a kind of the

00:07:00,039 --> 00:07:03,250
the two companies that started the

00:07:01,810 --> 00:07:06,819
project but we're looking for

00:07:03,250 --> 00:07:09,069
contributors and and committer so I

00:07:06,819 --> 00:07:10,870
think that like any

00:07:09,069 --> 00:07:13,150
everyone who sell me like getting like

00:07:10,870 --> 00:07:14,919
everybody's getting commuters and

00:07:13,150 --> 00:07:17,080
contributors but I think at this point

00:07:14,919 --> 00:07:20,409
we're looking for users just to tell us

00:07:17,080 --> 00:07:23,740
um what is what are we doing wrong what

00:07:20,409 --> 00:07:25,840
other things are missing a lot of the

00:07:23,740 --> 00:07:28,180
commuters already are very familiar with

00:07:25,840 --> 00:07:30,159
the project so we already lost that

00:07:28,180 --> 00:07:31,599
training of that first person trying it

00:07:30,159 --> 00:07:33,849
for the first time I'm finding that

00:07:31,599 --> 00:07:35,529
maybe that documentation is not that

00:07:33,849 --> 00:07:37,539
clear maybe the tooling is not that

00:07:35,529 --> 00:07:40,840
clear that's why I think we're we we

00:07:37,539 --> 00:07:42,669
want to get to get feedback as any other

00:07:40,840 --> 00:07:43,960
as you guys work with open source

00:07:42,669 --> 00:07:45,699
project that's how you started enjoy

00:07:43,960 --> 00:07:47,650
Christmas party I say user right either

00:07:45,699 --> 00:07:50,529
your company and yourself so that's what

00:07:47,650 --> 00:07:53,949
we're looking for we have we have it as

00:07:50,529 --> 00:07:57,039
a manage diversity in bluemix you can

00:07:53,949 --> 00:07:59,259
get a free account you get a certain

00:07:57,039 --> 00:08:01,089
amount of actions for free or multis for

00:07:59,259 --> 00:08:04,229
similar to Amazon lambda and the other

00:08:01,089 --> 00:08:08,050
ones 400 Gigabit sec

00:08:04,229 --> 00:08:09,430
the concept of open which is a little

00:08:08,050 --> 00:08:12,400
bit different described from the other

00:08:09,430 --> 00:08:15,280
platforms so our model we try to make it

00:08:12,400 --> 00:08:18,070
very very simple where you define a

00:08:15,280 --> 00:08:20,680
trigger so this is that then the non

00:08:18,070 --> 00:08:23,350
blocking or async invocation so you have

00:08:20,680 --> 00:08:25,540
a trigger which could be an HTTP but in

00:08:23,350 --> 00:08:29,169
this case it's a it's a trigger phone

00:08:25,540 --> 00:08:31,810
for an event that you want to respond to

00:08:29,169 --> 00:08:33,669
that trigger or just fire-and-forget

00:08:31,810 --> 00:08:36,099
but you need to connect them to somehow

00:08:33,669 --> 00:08:38,050
with a rule so the actually the entities

00:08:36,099 --> 00:08:39,969
that you program or you declarative

00:08:38,050 --> 00:08:42,279
programming the in open with is you're

00:08:39,969 --> 00:08:43,900
going to define a trigger it becomes an

00:08:42,279 --> 00:08:47,170
endpoint and then you declare

00:08:43,900 --> 00:08:49,029
declarative define which actions do I

00:08:47,170 --> 00:08:50,620
want to that when that trigger fires it

00:08:49,029 --> 00:08:54,700
could be multiple action somebody was

00:08:50,620 --> 00:08:57,250
asking select and open slack today about

00:08:54,700 --> 00:08:58,630
how do I run two actions we want trigger

00:08:57,250 --> 00:09:01,930
well that's that's the purpose you

00:08:58,630 --> 00:09:03,580
define two rules we want for one trigger

00:09:01,930 --> 00:09:09,760
and then you can run two things in in

00:09:03,580 --> 00:09:12,400
parallel then show their actions the

00:09:09,760 --> 00:09:15,520
actions actions in the code its

00:09:12,400 --> 00:09:17,050
diffusion so in the entity in the in the

00:09:15,520 --> 00:09:18,880
programming language or the programming

00:09:17,050 --> 00:09:21,130
model is call it's go action so you

00:09:18,880 --> 00:09:22,570
create actions you invoke actions you

00:09:21,130 --> 00:09:25,630
update your actions you annotate your

00:09:22,570 --> 00:09:27,850
action so that's kind of the core of of

00:09:25,630 --> 00:09:30,640
the of the function as a service

00:09:27,850 --> 00:09:34,920
platform is your actions run and they

00:09:30,640 --> 00:09:37,540
get you results the the simplest way of

00:09:34,920 --> 00:09:39,850
API to define this action is you take

00:09:37,540 --> 00:09:42,100
JSON in a JSON object either your

00:09:39,850 --> 00:09:46,540
programming language of Java JavaScript

00:09:42,100 --> 00:09:48,250
Python any any outputs a a result in

00:09:46,540 --> 00:09:50,140
JSON it could be a venti jason if you

00:09:48,250 --> 00:09:54,040
just you don't care about the result but

00:09:50,140 --> 00:09:57,430
it needs to put JSON out in terms of

00:09:54,040 --> 00:09:58,630
supported languages out-of-the-box are

00:09:57,430 --> 00:10:00,160
not going to talk a little bit more

00:09:58,630 --> 00:10:03,550
about the details

00:10:00,160 --> 00:10:09,060
we support nodejs the looking analytics

00:10:03,550 --> 00:10:09,060
is very popular but we also support java

00:10:09,510 --> 00:10:13,720
dr. should be down there but swift three

00:10:12,040 --> 00:10:16,050
four four people that are doing more

00:10:13,720 --> 00:10:18,329
developing apples so if on linux

00:10:16,050 --> 00:10:20,339
and I'm Python 3 was added but vital to

00:10:18,329 --> 00:10:22,829
Python to show source is still supported

00:10:20,339 --> 00:10:26,089
so I know there's a big debate between

00:10:22,829 --> 00:10:31,439
Fighter 2 pi 3 I'm not a Python guy so

00:10:26,089 --> 00:10:33,389
then then the docker is more of anything

00:10:31,439 --> 00:10:37,079
else that you have if you have C++ their

00:10:33,389 --> 00:10:38,689
goal you have rust those things can be

00:10:37,079 --> 00:10:41,579
compiled you have a batch script

00:10:38,689 --> 00:10:43,739
basically you you define it a docker

00:10:41,579 --> 00:10:46,529
image and then the system will docker

00:10:43,739 --> 00:10:48,480
docker run it catch it so you pay a

00:10:46,529 --> 00:10:50,519
little bit of penalty of the code

00:10:48,480 --> 00:10:53,189
latency if you using something of what

00:10:50,519 --> 00:10:54,899
it's not the one supported but like the

00:10:53,189 --> 00:10:56,610
if you're using the open source project

00:10:54,899 --> 00:10:59,009
is your you're deploying these things so

00:10:56,610 --> 00:11:01,589
you can make any any language be default

00:10:59,009 --> 00:11:03,869
and be a warm container and support it

00:11:01,589 --> 00:11:09,360
if you're if you want to have go as a

00:11:03,869 --> 00:11:12,749
primary language you can do it anything

00:11:09,360 --> 00:11:14,220
that runs in docker Intel right that's

00:11:12,749 --> 00:11:17,819
the thing I've been talking to someone

00:11:14,220 --> 00:11:19,709
this week about supporting arm so

00:11:17,819 --> 00:11:21,480
somebody told me that there's arm

00:11:19,709 --> 00:11:24,089
servers coming up and they are looking

00:11:21,480 --> 00:11:26,429
into contributing our looking into open

00:11:24,089 --> 00:11:30,809
with so I told them that I'm open to

00:11:26,429 --> 00:11:33,209
investigate and work together supporting

00:11:30,809 --> 00:11:35,790
supporting models so basic basic trees

00:11:33,209 --> 00:11:38,429
either fire and forget it come out the

00:11:35,790 --> 00:11:42,449
most common one so if you have data from

00:11:38,429 --> 00:11:44,999
IOT or for a message queue if you have

00:11:42,449 --> 00:11:48,949
changes from a database like couchdb if

00:11:44,999 --> 00:11:51,179
you have a web hook from github

00:11:48,949 --> 00:11:53,970
basically these are fires and fire and

00:11:51,179 --> 00:11:55,769
forget those are the non blockings we

00:11:53,970 --> 00:11:57,480
have the blocking ones where you are

00:11:55,769 --> 00:11:59,910
you're calling that kind of a REST API

00:11:57,480 --> 00:12:00,720
you want the results back you want to be

00:11:59,910 --> 00:12:02,490
very fast

00:12:00,720 --> 00:12:05,309
so those are the broken ones you're

00:12:02,490 --> 00:12:07,889
expecting a result back and those are

00:12:05,309 --> 00:12:09,269
like you go directly to the action and

00:12:07,889 --> 00:12:10,740
you don't have to go to a trigger rule

00:12:09,269 --> 00:12:12,749
you know the action that you want to run

00:12:10,740 --> 00:12:14,939
and you want a response very fast and

00:12:12,749 --> 00:12:17,489
the last one is periodic

00:12:14,939 --> 00:12:22,259
alarm but going to go over one example

00:12:17,489 --> 00:12:25,730
of those we also support sequences a

00:12:22,259 --> 00:12:27,749
sick sequence so you can have an action

00:12:25,730 --> 00:12:29,800
developed by you or developed by

00:12:27,749 --> 00:12:31,870
somebody that shared the action in the

00:12:29,800 --> 00:12:33,279
them that you may not know what is the

00:12:31,870 --> 00:12:35,680
programming language that they're using

00:12:33,279 --> 00:12:38,080
but they could be giving you an action

00:12:35,680 --> 00:12:40,390
to talk to github or talk to slag we

00:12:38,080 --> 00:12:43,149
have some system actions so you can

00:12:40,390 --> 00:12:45,100
change chained them as a sequence so you

00:12:43,149 --> 00:12:47,829
have an action that takes input as a

00:12:45,100 --> 00:12:50,019
Jason puts output as a jason the

00:12:47,829 --> 00:12:51,399
parameters match to the next action and

00:12:50,019 --> 00:12:54,250
the next action in the next action I

00:12:51,399 --> 00:12:55,690
think we have a limit of 10 but again if

00:12:54,250 --> 00:12:58,110
you have the open-source version those

00:12:55,690 --> 00:13:01,269
settings you can you can change them

00:12:58,110 --> 00:13:05,649
dollar the other aspects of an action is

00:13:01,269 --> 00:13:07,660
parameter binding so these are default

00:13:05,649 --> 00:13:09,339
parameters that you set in your action

00:13:07,660 --> 00:13:11,350
that you're not expecting the user to

00:13:09,339 --> 00:13:13,690
call them with those parameters so

00:13:11,350 --> 00:13:16,329
mostly some of the times it's used for

00:13:13,690 --> 00:13:17,440
credentials or an API key that you don't

00:13:16,329 --> 00:13:19,120
want to put in your source code and

00:13:17,440 --> 00:13:20,620
github you want to bind them when you

00:13:19,120 --> 00:13:23,680
deploy them so that's kind of the

00:13:20,620 --> 00:13:28,839
configuration part of configuring your

00:13:23,680 --> 00:13:32,950
actions event providers our event

00:13:28,839 --> 00:13:35,410
emitters are demons or different

00:13:32,950 --> 00:13:39,520
notification systems that would give you

00:13:35,410 --> 00:13:41,920
the event is providing events it's

00:13:39,520 --> 00:13:44,790
firing trigger so and github for example

00:13:41,920 --> 00:13:47,070
will be a web hook the large system is a

00:13:44,790 --> 00:13:49,630
demon service that we have that we

00:13:47,070 --> 00:13:52,000
basically implementing a cron job and

00:13:49,630 --> 00:13:55,260
firing that firing that trigger on the

00:13:52,000 --> 00:13:58,060
on the front based on their own syntax

00:13:55,260 --> 00:14:00,190
we have open open interfaces basically

00:13:58,060 --> 00:14:02,320
that's saying that we have a REST API so

00:14:00,190 --> 00:14:04,450
you can implement your own own trigger

00:14:02,320 --> 00:14:06,670
whenever you want to fire trigger just

00:14:04,450 --> 00:14:08,440
call the REST API and that will that

00:14:06,670 --> 00:14:12,339
will start to change the change of

00:14:08,440 --> 00:14:14,680
sequence these are some of the examples

00:14:12,339 --> 00:14:16,570
I think I already mentioned them the

00:14:14,680 --> 00:14:20,410
last one that we implement it was Kafka

00:14:16,570 --> 00:14:22,029
so if you have half an example I heard

00:14:20,410 --> 00:14:24,550
this week that there's a lot of you know

00:14:22,029 --> 00:14:29,019
interest on IOT message queues on burst

00:14:24,550 --> 00:14:31,360
loads from the field so in bluemix is

00:14:29,019 --> 00:14:34,120
the product name is called message hub

00:14:31,360 --> 00:14:37,540
but it's just Kafka is cascara service

00:14:34,120 --> 00:14:39,279
if used the open-source version these

00:14:37,540 --> 00:14:41,860
providers are in open source by the way

00:14:39,279 --> 00:14:42,310
we have alarm we have cardi B and we

00:14:41,860 --> 00:14:46,420
have

00:14:42,310 --> 00:14:48,130
kheh mobile push and and IBM app connect

00:14:46,420 --> 00:14:51,400
those are things are only available in

00:14:48,130 --> 00:14:53,770
bluemix push notification it's a service

00:14:51,400 --> 00:14:56,680
that is using an API to send push

00:14:53,770 --> 00:14:58,180
notifications using the IBM service and

00:14:56,680 --> 00:14:59,560
github it's just a it's a web hook

00:14:58,180 --> 00:15:04,390
that's the most simple way of explaining

00:14:59,560 --> 00:15:05,770
it to someone granular pricing so I

00:15:04,390 --> 00:15:07,779
think that's the third dimension so I

00:15:05,770 --> 00:15:09,760
mentioned that server lets you don't

00:15:07,779 --> 00:15:12,640
deal with infrastructure the second one

00:15:09,760 --> 00:15:13,960
was you change sure your mindset of

00:15:12,640 --> 00:15:16,960
dealing with events so it's an

00:15:13,960 --> 00:15:20,110
event-driven programming model and the

00:15:16,960 --> 00:15:22,960
last one was it is and some some other

00:15:20,110 --> 00:15:26,200
providers like offer somehow monthly

00:15:22,960 --> 00:15:27,610
payments but in bluemix basically this

00:15:26,200 --> 00:15:29,200
is not part of the open source project

00:15:27,610 --> 00:15:33,040
right you run in your lab that you don't

00:15:29,200 --> 00:15:35,680
bring anyone but in bluemix we would

00:15:33,040 --> 00:15:38,350
charge for gigabit seconds so it depends

00:15:35,680 --> 00:15:40,270
how much memory you give to the action

00:15:38,350 --> 00:15:44,170
and how much milliseconds does he run

00:15:40,270 --> 00:15:47,290
and then you pay I know this for zero

00:15:44,170 --> 00:15:49,750
sir 17 gigabit seconds it's basically

00:15:47,290 --> 00:15:52,030
the same process all the ones with with

00:15:49,750 --> 00:15:55,330
bluemix the api gateways free other

00:15:52,030 --> 00:15:56,980
vendors charge for it so today i was

00:15:55,330 --> 00:15:58,330
trying to do we have a calculator by the

00:15:56,980 --> 00:16:00,790
way under source we do Google server

00:15:58,330 --> 00:16:03,700
let's call talk it will give you you can

00:16:00,790 --> 00:16:05,820
do five million I was think today I was

00:16:03,700 --> 00:16:08,280
doing calculations like 20 million

00:16:05,820 --> 00:16:12,430
invocations amount with the three-tier

00:16:08,280 --> 00:16:14,530
128 max actions 500 milliseconds so

00:16:12,430 --> 00:16:18,040
that's that's enough to to ground for

00:16:14,530 --> 00:16:20,320
awhile in terms of the architecture this

00:16:18,040 --> 00:16:22,540
week I was very excited because there

00:16:20,320 --> 00:16:25,209
was a lot of you asking me how does it

00:16:22,540 --> 00:16:27,730
gets built how do I deploy it what is

00:16:25,209 --> 00:16:31,360
life inside versus just what can I build

00:16:27,730 --> 00:16:33,520
with it so the the architecture is based

00:16:31,360 --> 00:16:35,680
on on docker containers we capsulated

00:16:33,520 --> 00:16:38,290
the services the docker container we

00:16:35,680 --> 00:16:40,630
have a ng and X which is just do the SSL

00:16:38,290 --> 00:16:43,570
termination Welch the controller the

00:16:40,630 --> 00:16:48,070
controller is built in in Scala it's a

00:16:43,570 --> 00:16:51,820
web server its uses couchdb to first for

00:16:48,070 --> 00:16:55,150
state management uses Casca for queuing

00:16:51,820 --> 00:16:55,930
and then it uses the invoker is another

00:16:55,150 --> 00:16:58,450
analyst

00:16:55,930 --> 00:17:00,490
a web server which is a container that

00:16:58,450 --> 00:17:02,710
is the worker so we have multiple

00:17:00,490 --> 00:17:06,400
invoker's that will it will do the work

00:17:02,710 --> 00:17:09,059
of running your functions one thing that

00:17:06,400 --> 00:17:12,250
I was telling folks this week was in IBM

00:17:09,059 --> 00:17:15,160
we have the similar deployments so

00:17:12,250 --> 00:17:16,959
there's no private code versus open

00:17:15,160 --> 00:17:19,839
source code is we just take it as it is

00:17:16,959 --> 00:17:21,610
and we deploy it it's just like we need

00:17:19,839 --> 00:17:24,550
to integrate with our authentication of

00:17:21,610 --> 00:17:26,770
our bluemix for your IBM ID so we have

00:17:24,550 --> 00:17:29,530
authentication integration and then we

00:17:26,770 --> 00:17:31,630
have elastic search for monitoring and

00:17:29,530 --> 00:17:34,420
it's something that the open source

00:17:31,630 --> 00:17:36,700
project is already looking at of having

00:17:34,420 --> 00:17:38,170
this in open source we have it in

00:17:36,700 --> 00:17:40,390
bluemix because we're managing the

00:17:38,170 --> 00:17:42,340
multi-tenant so we need to need the logs

00:17:40,390 --> 00:17:44,740
for the controller and evoker to

00:17:42,340 --> 00:17:46,870
maintain the system and and but we have

00:17:44,740 --> 00:17:49,120
found that folks want to get that

00:17:46,870 --> 00:17:51,400
elasticsearch so we can get the logs and

00:17:49,120 --> 00:17:54,550
the results of your actions put them in

00:17:51,400 --> 00:17:56,440
elasticsearch and then it's your data

00:17:54,550 --> 00:17:58,380
then you can have Cabana on top of it or

00:17:56,440 --> 00:18:01,990
anything like that

00:17:58,380 --> 00:18:04,270
API gateways the last thing major thing

00:18:01,990 --> 00:18:06,100
that we did also one of the github

00:18:04,270 --> 00:18:10,990
projects that Madison to disk

00:18:06,100 --> 00:18:13,710
discuss it's about defining API that can

00:18:10,990 --> 00:18:16,140
run your actions so you're defining a

00:18:13,710 --> 00:18:18,700
operations and things like that but the

00:18:16,140 --> 00:18:21,670
reason that the team did it was anything

00:18:18,700 --> 00:18:24,190
curated for free in the bluemix offering

00:18:21,670 --> 00:18:28,750
is to have rate limiting so if I'm to a

00:18:24,190 --> 00:18:32,020
rate limiting or you want to have API

00:18:28,750 --> 00:18:35,470
keys or API secret or have course

00:18:32,020 --> 00:18:37,900
enabled by default and will still limit

00:18:35,470 --> 00:18:41,640
in and off so they will do all of token

00:18:37,900 --> 00:18:45,929
validation for 14th like Facebook Google

00:18:41,640 --> 00:18:45,929
and the third one is github

00:18:46,440 --> 00:18:51,640
they say a quick example of how would

00:18:49,840 --> 00:18:53,140
you define a crowd operation so you have

00:18:51,640 --> 00:18:55,780
customers so you could do it again

00:18:53,140 --> 00:18:57,850
delete a post and you map them to a

00:18:55,780 --> 00:19:00,070
certain function instead of map mapping

00:18:57,850 --> 00:19:02,080
that to a single single code base so you

00:19:00,070 --> 00:19:04,630
can have your monolithic app break into

00:19:02,080 --> 00:19:09,310
micro services where each each of the

00:19:04,630 --> 00:19:13,250
endpoints deal with something particular

00:19:09,310 --> 00:19:17,360
this is an example so promising that you

00:19:13,250 --> 00:19:19,130
guys will go into C code with this is

00:19:17,360 --> 00:19:21,800
basically with the CLI we have a UI

00:19:19,130 --> 00:19:23,690
which is in our bluemix ecosystem web

00:19:21,800 --> 00:19:26,390
works from open source is there's a CLI

00:19:23,690 --> 00:19:29,780
so you create an action this is just

00:19:26,390 --> 00:19:34,400
returning a payload using the CLI you

00:19:29,780 --> 00:19:36,680
create the action you define an API and

00:19:34,400 --> 00:19:38,570
then and then call it I think we're

00:19:36,680 --> 00:19:43,010
missing the - - web through there's a

00:19:38,570 --> 00:19:48,500
flag in there I'll have a demo on

00:19:43,010 --> 00:19:50,900
showing that web actions are developers

00:19:48,500 --> 00:19:52,880
are bad naming things right but we

00:19:50,900 --> 00:19:56,150
didn't know what to call it so it's an

00:19:52,880 --> 00:19:58,700
action but it is for for web development

00:19:56,150 --> 00:20:01,130
or URL basically takes takes and regular

00:19:58,700 --> 00:20:03,380
action or traditional action and it puts

00:20:01,130 --> 00:20:05,810
the annotation saying this is web export

00:20:03,380 --> 00:20:08,240
or web equals true and basically gives

00:20:05,810 --> 00:20:11,060
you a public URL and then you can give

00:20:08,240 --> 00:20:13,220
that public URL to anyone and then you

00:20:11,060 --> 00:20:15,140
can invoke it with any verse right your

00:20:13,220 --> 00:20:17,350
delete your post your food and it

00:20:15,140 --> 00:20:20,840
becomes so it's kind of be a REST API

00:20:17,350 --> 00:20:22,520
and then with inside the action I don't

00:20:20,840 --> 00:20:24,560
know we have it here which you have it

00:20:22,520 --> 00:20:26,810
here inside the action this is where

00:20:24,560 --> 00:20:30,140
like your us a web developers like AHA

00:20:26,810 --> 00:20:32,590
finally I see a web server you have

00:20:30,140 --> 00:20:36,200
access to the to access to that request

00:20:32,590 --> 00:20:38,180
access to the headers you can you can

00:20:36,200 --> 00:20:40,370
return the header you so you have access

00:20:38,180 --> 00:20:42,950
to the to the request coming in and you

00:20:40,370 --> 00:20:44,690
have access to control the response so

00:20:42,950 --> 00:20:46,370
if you want to in the first one you want

00:20:44,690 --> 00:20:48,800
to return a three or two or three or one

00:20:46,370 --> 00:20:51,350
way with a very direct and you can do it

00:20:48,800 --> 00:20:54,200
if you want to return HTML with a cookie

00:20:51,350 --> 00:20:56,630
you can or just return JSON you can so

00:20:54,200 --> 00:20:58,850
this is where some folks were asking

00:20:56,630 --> 00:21:00,980
like how do I do a web server with

00:20:58,850 --> 00:21:02,810
server less it will be basically using

00:21:00,980 --> 00:21:07,700
web actions where you have control that

00:21:02,810 --> 00:21:11,140
HTTP request and response yeah this is

00:21:07,700 --> 00:21:11,140
this is the part of the response

00:21:13,669 --> 00:21:17,880
yeah this is this is just an echo don't

00:21:15,960 --> 00:21:21,630
get confused is that stuff that you have

00:21:17,880 --> 00:21:23,789
access as from the request so you have

00:21:21,630 --> 00:21:25,830
access to the path the headers and the

00:21:23,789 --> 00:21:29,039
body actually does that's the only thing

00:21:25,830 --> 00:21:31,559
that you need for my HTTP request Khong

00:21:29,039 --> 00:21:34,559
it's another way of doing api gateway

00:21:31,559 --> 00:21:37,169
they implemented we work with them since

00:21:34,559 --> 00:21:40,019
our open with our opens open source open

00:21:37,169 --> 00:21:42,179
standards REST API they implemented a

00:21:40,019 --> 00:21:44,870
plugin so if you have Kong in your shop

00:21:42,179 --> 00:21:47,970
and you want to use come to define api's

00:21:44,870 --> 00:21:52,169
back by actions or functions you can do

00:21:47,970 --> 00:21:54,529
it several experimental have heard of

00:21:52,169 --> 00:21:58,110
server let's I owe or civilize framework

00:21:54,529 --> 00:22:00,000
the basically is a methodology or they

00:21:58,110 --> 00:22:02,730
help you forget to package your actions

00:22:00,000 --> 00:22:04,559
and configure your actions and their try

00:22:02,730 --> 00:22:06,059
to be vendor agnostic so you can do it

00:22:04,559 --> 00:22:07,500
for lambda you can do for Google you can

00:22:06,059 --> 00:22:10,019
do it for open wisk

00:22:07,500 --> 00:22:12,090
what's going to say IBM but in stopping

00:22:10,019 --> 00:22:14,039
with I've been telling telling them to

00:22:12,090 --> 00:22:15,840
remove IBM from the open with Stern

00:22:14,039 --> 00:22:18,149
because this is this is an open source

00:22:15,840 --> 00:22:20,909
project so you can use surveillance

00:22:18,149 --> 00:22:22,710
framework to to package your apps and we

00:22:20,909 --> 00:22:25,110
also have a that we'll be talking about

00:22:22,710 --> 00:22:28,380
which deploys is it's another way of you

00:22:25,110 --> 00:22:30,299
can deploy your apps as functions so we

00:22:28,380 --> 00:22:34,019
just one window choice like we were say

00:22:30,299 --> 00:22:37,559
we're looking for users popping up if

00:22:34,019 --> 00:22:39,600
you have a chat application or it's a

00:22:37,559 --> 00:22:42,029
service of it's a data data stream

00:22:39,600 --> 00:22:44,789
service out there they did integration

00:22:42,029 --> 00:22:46,769
again using the REST API so open API has

00:22:44,789 --> 00:22:48,899
nothing specific about bluemix being

00:22:46,769 --> 00:22:51,450
running in bluemix are not they using

00:22:48,899 --> 00:22:53,669
the REST API so open with so you want to

00:22:51,450 --> 00:22:55,289
connect button up to an instance of all

00:22:53,669 --> 00:22:58,049
the new is running on your VM you can

00:22:55,289 --> 00:23:00,659
just go ahead and do it in terms of

00:22:58,049 --> 00:23:02,850
community developer tooling dissecting

00:23:00,659 --> 00:23:05,490
the area that we need help for up to

00:23:02,850 --> 00:23:07,380
grow the user base of people trying it

00:23:05,490 --> 00:23:10,620
give me feedback and things get better

00:23:07,380 --> 00:23:13,080
we have a an ID plugin for vs go so you

00:23:10,620 --> 00:23:15,269
can instead of using the CLI you can use

00:23:13,080 --> 00:23:18,750
the IDE to create the action invoke it

00:23:15,269 --> 00:23:21,059
and so far and we have no red if you're

00:23:18,750 --> 00:23:23,279
doing IOT some people use no red to

00:23:21,059 --> 00:23:25,919
create workflows from those workflows

00:23:23,279 --> 00:23:27,030
you can define actions and invoke your

00:23:25,919 --> 00:23:32,670
actions and a

00:23:27,030 --> 00:23:35,010
certain points of no read up points I

00:23:32,670 --> 00:23:43,170
think we have we have time for for a

00:23:35,010 --> 00:23:45,660
quick demo let me was going to do it

00:23:43,170 --> 00:23:51,030
live but I'm running out of time so let

00:23:45,660 --> 00:23:56,010
me see if we can place a few videos I

00:23:51,030 --> 00:24:01,950
did a few minutes ago so yeah let's do

00:23:56,010 --> 00:24:03,300
this one so I'll talk well I don't want

00:24:01,950 --> 00:24:05,550
I was going to say I don't want to make

00:24:03,300 --> 00:24:11,490
typos while code but there's typos in

00:24:05,550 --> 00:24:14,340
this video is wrong so I'll go over what

00:24:11,490 --> 00:24:16,650
is going on here so basically just the

00:24:14,340 --> 00:24:19,830
rundown you go to github now we're in

00:24:16,650 --> 00:24:21,930
the under the Apache organization a lazy

00:24:19,830 --> 00:24:24,240
way the easiest ways to get a bunch of

00:24:21,930 --> 00:24:27,000
system with vagrants where you do get

00:24:24,240 --> 00:24:30,660
clone CD to a folder with vagrant and

00:24:27,000 --> 00:24:32,430
then call this script that says hello it

00:24:30,660 --> 00:24:34,710
will take a while to build all the

00:24:32,430 --> 00:24:37,170
containers we're trying to optimize that

00:24:34,710 --> 00:24:39,080
to make it faster to get just a VM to

00:24:37,170 --> 00:24:41,640
give it a try

00:24:39,080 --> 00:24:43,260
once you do that the hello commands you

00:24:41,640 --> 00:24:45,540
will have the CLI in your system you

00:24:43,260 --> 00:24:48,690
have a Linux system running the docker

00:24:45,540 --> 00:24:51,660
containers and as you can see this is

00:24:48,690 --> 00:24:53,760
running locally in my laptop is 192 1.68

00:24:51,660 --> 00:24:55,380
so you have the same environment that is

00:24:53,760 --> 00:24:57,180
on the cloud in your computer so you can

00:24:55,380 --> 00:25:00,300
develop and you can help on the

00:24:57,180 --> 00:25:02,220
community and be a contributor this is

00:25:00,300 --> 00:25:04,560
just a one of the actions that come with

00:25:02,220 --> 00:25:07,710
the system it's called echo you test it

00:25:04,560 --> 00:25:12,930
out it works I'm going to try to create

00:25:07,710 --> 00:25:15,180
a function so basically this is no js'

00:25:12,930 --> 00:25:15,960
and you create a function C to sort

00:25:15,180 --> 00:25:19,500
typos in there

00:25:15,960 --> 00:25:23,520
I know call it main and you can also

00:25:19,500 --> 00:25:25,170
export it with the package Jason you

00:25:23,520 --> 00:25:28,740
need to return JSON so I'll be returning

00:25:25,170 --> 00:25:31,820
it and an object I click finish typing

00:25:28,740 --> 00:25:37,700
come on

00:25:31,820 --> 00:25:40,430
I didn't want to cut anything so so you

00:25:37,700 --> 00:25:43,520
create a payload of updation and that's

00:25:40,430 --> 00:25:44,590
what you return in this one again just

00:25:43,520 --> 00:25:47,780
to say hello

00:25:44,590 --> 00:25:50,000
save it and then how do i how do I send

00:25:47,780 --> 00:25:52,400
it to the system so you run with action

00:25:50,000 --> 00:25:53,840
create give it a name hello and then

00:25:52,400 --> 00:25:57,320
give it the source code it could be a

00:25:53,840 --> 00:25:59,180
sip fire it could be a JavaScript file I

00:25:57,320 --> 00:26:02,810
think I made another typo in there

00:25:59,180 --> 00:26:05,300
creation it's what's already created so

00:26:02,810 --> 00:26:07,700
it felt so update you shoulda can create

00:26:05,300 --> 00:26:09,320
it or updated and I updated it if you

00:26:07,700 --> 00:26:14,240
want to invoke it you do with action

00:26:09,320 --> 00:26:17,360
invoke type hello and then that would

00:26:14,240 --> 00:26:20,480
run the action and we turn there - RSS

00:26:17,360 --> 00:26:22,280
just return me the result if I run it

00:26:20,480 --> 00:26:23,750
with - B it says the blocking and they

00:26:22,280 --> 00:26:25,940
get all the metadata so I'm going to

00:26:23,750 --> 00:26:28,490
show how many milliseconds it took so

00:26:25,940 --> 00:26:31,310
this one took 6 milliseconds to run so

00:26:28,490 --> 00:26:35,020
it went up great the docker container

00:26:31,310 --> 00:26:38,150
was running and Irani's was warm

00:26:35,020 --> 00:26:39,830
you see logs so people asked about logs

00:26:38,150 --> 00:26:41,960
you do console that log so send our

00:26:39,830 --> 00:26:44,060
arrow standard output that's captured by

00:26:41,960 --> 00:26:46,490
the system and then available later on

00:26:44,060 --> 00:26:50,060
that and that metadata of activation IV

00:26:46,490 --> 00:26:53,350
so I'm going to run it again update the

00:26:50,060 --> 00:26:58,430
code so it's console dot log run the

00:26:53,350 --> 00:27:00,950
invoke the action again with - B yeah or

00:26:58,430 --> 00:27:03,350
just the activation ID so that's your

00:27:00,950 --> 00:27:04,820
like ticket ID if you want to go later

00:27:03,350 --> 00:27:07,100
and find all your activations you

00:27:04,820 --> 00:27:09,290
basically do do with with action and

00:27:07,100 --> 00:27:12,050
then pass it past the activation ID and

00:27:09,290 --> 00:27:14,090
then you get when did it start it with

00:27:12,050 --> 00:27:16,040
the rear on how long it took and then

00:27:14,090 --> 00:27:18,740
the logs as you can see that's a an

00:27:16,040 --> 00:27:20,450
array of all the logs that you put in so

00:27:18,740 --> 00:27:22,010
you have an error right or you have an

00:27:20,450 --> 00:27:24,140
exception you will see that in the logs

00:27:22,010 --> 00:27:25,760
that you have undefined it's not a

00:27:24,140 --> 00:27:30,620
function right yeah

00:27:25,760 --> 00:27:34,700
the typical error this one see what I'm

00:27:30,620 --> 00:27:37,100
doing here is just run in a multiple

00:27:34,700 --> 00:27:39,110
time so you can see that the first the

00:27:37,100 --> 00:27:40,730
first time you run it it will take some

00:27:39,110 --> 00:27:43,640
latency because we do something with

00:27:40,730 --> 00:27:45,560
docker it's a go start and then the

00:27:43,640 --> 00:27:50,450
later functions that it run it will

00:27:45,560 --> 00:27:58,790
faster let me just just plain again is

00:27:50,450 --> 00:28:00,940
it oh well the last one is parameters

00:27:58,790 --> 00:28:05,000
how do I pass parameters to my function

00:28:00,940 --> 00:28:08,300
basically they come in an object so in

00:28:05,000 --> 00:28:11,180
here I'm using es6 how to parse the

00:28:08,300 --> 00:28:13,430
parameters sets carlos hello

00:28:11,180 --> 00:28:15,380
then output the parameter and then that

00:28:13,430 --> 00:28:17,150
would come in so the way you run it with

00:28:15,380 --> 00:28:19,220
the rest you pass the parameters to rest

00:28:17,150 --> 00:28:22,720
api is just a payload of the body of

00:28:19,220 --> 00:28:28,850
jason in this case I'm using the CLI

00:28:22,720 --> 00:28:31,190
let's the infra guys talking and one one

00:28:28,850 --> 00:28:33,500
tip is if you want to learn what is

00:28:31,190 --> 00:28:36,310
happening behind the scenes this is -

00:28:33,500 --> 00:28:39,380
should be learned if I have it here

00:28:36,310 --> 00:28:41,510
there's a - V flag that you can pass and

00:28:39,380 --> 00:28:43,700
then you can see like what is this HTTP

00:28:41,510 --> 00:28:48,550
client doing it's just calling West ap

00:28:43,700 --> 00:28:51,920
is our I guess the open Wisc system and

00:28:48,550 --> 00:28:59,480
if I do Jim then it says hello Jean

00:28:51,920 --> 00:29:02,180
Mahalo Carlos or rich a - V so if you do

00:28:59,480 --> 00:29:04,370
- V you will be able to see like how do

00:29:02,180 --> 00:29:08,080
I call this with coral right so you will

00:29:04,370 --> 00:29:11,090
see a the URL your authentication token

00:29:08,080 --> 00:29:17,510
which is basic else and then how do I

00:29:11,090 --> 00:29:19,520
pass a parameter is the request body so

00:29:17,510 --> 00:29:23,620
far so good so I think that's that's

00:29:19,520 --> 00:29:23,620
good for the demo we see this Ganesh

00:29:29,850 --> 00:29:37,760
I think this is let's go back up to see

00:29:33,960 --> 00:29:43,530
like what the actually happened there

00:29:37,760 --> 00:29:45,480
like the work so so what's happening

00:29:43,530 --> 00:29:50,280
behind the scenes is your actions are

00:29:45,480 --> 00:29:52,950
sandbox in a docker container so when

00:29:50,280 --> 00:29:56,310
you do with action invoke that equals to

00:29:52,950 --> 00:29:58,170
a docker run we did the team did some

00:29:56,310 --> 00:30:00,720
optimizations and look into performance

00:29:58,170 --> 00:30:02,820
actually even looking more we found that

00:30:00,720 --> 00:30:05,580
that using the docker CLI command was

00:30:02,820 --> 00:30:08,790
too slow wasn't giving us that lower

00:30:05,580 --> 00:30:11,040
level performance so we're now using run

00:30:08,790 --> 00:30:12,930
see it's a different level of managing

00:30:11,040 --> 00:30:14,760
managing containers and we were able to

00:30:12,930 --> 00:30:16,950
dr. pause and unpause the docker

00:30:14,760 --> 00:30:19,710
container in single-digit millisecond so

00:30:16,950 --> 00:30:21,320
there's no overhead on that one thing

00:30:19,710 --> 00:30:25,050
that we do is when you do talk around

00:30:21,320 --> 00:30:28,200
you have the penalty of what saying

00:30:25,050 --> 00:30:30,510
getting the image downloaded from docker

00:30:28,200 --> 00:30:32,040
hub or even if it's cash you know

00:30:30,510 --> 00:30:34,200
creating creating the image for the

00:30:32,040 --> 00:30:35,760
first time and have any memory what we

00:30:34,200 --> 00:30:38,130
do for the language when we say we have

00:30:35,760 --> 00:30:41,460
languages that we support we already

00:30:38,130 --> 00:30:44,070
have some images already pre-warm

00:30:41,460 --> 00:30:47,010
ready to go listening on a port so it's

00:30:44,070 --> 00:30:49,400
a server running so that's why people I

00:30:47,010 --> 00:30:52,230
would say server less there's a server

00:30:49,400 --> 00:30:54,990
listening in there for example for

00:30:52,230 --> 00:30:57,300
node.js there's a server in the local

00:30:54,990 --> 00:30:59,610
container ready for a function but it's

00:30:57,300 --> 00:31:01,740
a function less it doesn't have your

00:30:59,610 --> 00:31:04,710
code so the first thing that happens is

00:31:01,740 --> 00:31:07,320
we runs any need and that gets the the

00:31:04,710 --> 00:31:09,360
code initialized and then that's why the

00:31:07,320 --> 00:31:12,500
the next requests are coming into the

00:31:09,360 --> 00:31:17,040
system as a burst or just just REST API

00:31:12,500 --> 00:31:19,140
will keep the the container very warm or

00:31:17,040 --> 00:31:21,060
hot it should say and then everyone

00:31:19,140 --> 00:31:25,470
that's why you get single-digit second

00:31:21,060 --> 00:31:27,990
overhead so that's kind of the

00:31:25,470 --> 00:31:30,290
optimizations that are different for for

00:31:27,990 --> 00:31:33,990
open with versus other systems and also

00:31:30,290 --> 00:31:35,180
looking with other orchestration for for

00:31:33,990 --> 00:31:38,970
containers or kubernetes

00:31:35,180 --> 00:31:42,120
methods where it's not that trivial to

00:31:38,970 --> 00:31:43,620
get some work load some actions to run

00:31:42,120 --> 00:31:46,470
on any any containing any

00:31:43,620 --> 00:31:48,150
so we are doing some optimization to to

00:31:46,470 --> 00:31:51,059
do everything that we can so the only

00:31:48,150 --> 00:31:52,710
thing missing is your your code but even

00:31:51,059 --> 00:31:54,480
when we have your code it's already in

00:31:52,710 --> 00:31:57,090
memory so we can just run it right away

00:31:54,480 --> 00:31:58,830
so that's that's why the server let's

00:31:57,090 --> 00:32:00,360
we'll get into the point that is it's a

00:31:58,830 --> 00:32:02,850
similar thing hitting a server that's

00:32:00,360 --> 00:32:06,200
hitting a server less API whoever's

00:32:02,850 --> 00:32:09,890
using it will not will be able to tell

00:32:06,200 --> 00:32:13,320
that this is what I was saying before is

00:32:09,890 --> 00:32:15,690
working with having a way to deploy the

00:32:13,320 --> 00:32:17,400
control plane so this deploying open

00:32:15,690 --> 00:32:19,559
with the controller and the workers do

00:32:17,400 --> 00:32:22,679
it with kubernetes do it with docker

00:32:19,559 --> 00:32:26,330
compose and then see if if we make sense

00:32:22,679 --> 00:32:29,690
or how do we do it to make make workers

00:32:26,330 --> 00:32:33,179
be able to use this illustration of

00:32:29,690 --> 00:32:37,679
containers with kubernetes or dr compost

00:32:33,179 --> 00:32:39,750
or mesos but and and that's another call

00:32:37,679 --> 00:32:41,760
if you are an expert on these areas

00:32:39,750 --> 00:32:43,950
we're looking for contributors on that

00:32:41,760 --> 00:32:47,010
area to either document it or looking at

00:32:43,950 --> 00:32:50,190
how to orchestrate it for for the

00:32:47,010 --> 00:32:53,270
project so we're open to two other

00:32:50,190 --> 00:32:53,270
deployment options

00:32:53,610 --> 00:33:00,650
what is server is good for me3 directing

00:32:56,429 --> 00:33:03,690
that's going to get into use cases

00:33:00,650 --> 00:33:05,700
people say anything but if you have if

00:33:03,690 --> 00:33:07,050
you have something that is has to be up

00:33:05,700 --> 00:33:10,980
and running and it has a persistent

00:33:07,050 --> 00:33:12,840
connection then no if you have somebody

00:33:10,980 --> 00:33:17,400
was asking me if i have a server one

00:33:12,840 --> 00:33:19,410
server it's fully utilized no I'd only

00:33:17,400 --> 00:33:20,820
have one server then then this is not a

00:33:19,410 --> 00:33:22,410
choice right you're optimizing for

00:33:20,820 --> 00:33:26,090
something that should not be optimizing

00:33:22,410 --> 00:33:28,230
other than that if you have things are

00:33:26,090 --> 00:33:30,510
workloads that you can split into

00:33:28,230 --> 00:33:33,360
smaller smaller problems multiple inches

00:33:30,510 --> 00:33:36,150
is a good thing if you have burstiness

00:33:33,360 --> 00:33:38,130
right you have a heavy load in a certain

00:33:36,150 --> 00:33:39,630
period or heavy load that you don't you

00:33:38,130 --> 00:33:43,590
cannot predict this is something that

00:33:39,630 --> 00:33:45,809
can scale some of the users and

00:33:43,590 --> 00:33:48,270
applications are building out there and

00:33:45,809 --> 00:33:51,929
an integrators

00:33:48,270 --> 00:33:54,120
going to go over a few but one that I'm

00:33:51,929 --> 00:33:56,730
excited I was helping is whether whether

00:33:54,120 --> 00:33:57,510
god they it's a mobile app that it's

00:33:56,730 --> 00:34:00,900
using the period

00:33:57,510 --> 00:34:04,410
like alarm system is also using Cloudant

00:34:00,900 --> 00:34:06,210
or CouchDB we basically tells you have

00:34:04,410 --> 00:34:08,880
an example is it sends push

00:34:06,210 --> 00:34:11,280
notifications in the morning and in

00:34:08,880 --> 00:34:13,169
during the night and it gives you data

00:34:11,280 --> 00:34:14,669
about the weather so it needs to

00:34:13,169 --> 00:34:16,380
orchestrate those things but it doesn't

00:34:14,669 --> 00:34:18,270
have to be running all the time so it's

00:34:16,380 --> 00:34:20,669
a certain period that it needs to do

00:34:18,270 --> 00:34:22,710
that that analysis on the data and also

00:34:20,669 --> 00:34:26,460
pushing the push notifications to the

00:34:22,710 --> 00:34:28,950
users so data processing is one of the

00:34:26,460 --> 00:34:31,590
use cases if you insert information to a

00:34:28,950 --> 00:34:36,419
cash TV actually we have a notification

00:34:31,590 --> 00:34:38,130
API and also suppose we recently added

00:34:36,419 --> 00:34:40,020
support for filters so if you want to

00:34:38,130 --> 00:34:43,679
listen to events coming from your

00:34:40,020 --> 00:34:45,419
database that says when a customer gets

00:34:43,679 --> 00:34:47,790
inserted to a database run this function

00:34:45,419 --> 00:34:51,090
against that data or fetch that customer

00:34:47,790 --> 00:34:53,010
and it could be like customer but a car

00:34:51,090 --> 00:34:54,300
for about a bicycle and you want to only

00:34:53,010 --> 00:34:56,550
listen to customers that bought a car

00:34:54,300 --> 00:35:01,530
you can do a filter and only listen to

00:34:56,550 --> 00:35:04,970
that to that data coming in another one

00:35:01,530 --> 00:35:07,530
one of the customers we work with is a

00:35:04,970 --> 00:35:12,030
sight sight spirit of middle school I

00:35:07,530 --> 00:35:14,520
think so such with they reduce the their

00:35:12,030 --> 00:35:15,720
cost by ninety percent so that we're

00:35:14,520 --> 00:35:17,160
paying a lot because the way using

00:35:15,720 --> 00:35:20,850
constant service all running all the

00:35:17,160 --> 00:35:24,840
time and also dealing with all that data

00:35:20,850 --> 00:35:27,180
on bursts of submitting up images they

00:35:24,840 --> 00:35:29,070
made the application faster ten times

00:35:27,180 --> 00:35:31,650
faster and these applications basically

00:35:29,070 --> 00:35:33,390
is for travel business that they need

00:35:31,650 --> 00:35:36,210
the pictures and those pictures they

00:35:33,390 --> 00:35:38,070
wanted to crop them and resize them and

00:35:36,210 --> 00:35:40,950
then it's kind of cool because you can

00:35:38,070 --> 00:35:42,690
point in a in in the picture and array

00:35:40,950 --> 00:35:44,220
that you want to focus and it will crop

00:35:42,690 --> 00:35:47,820
the picture on that when you're clicking

00:35:44,220 --> 00:35:50,340
not just the the whole picture so he has

00:35:47,820 --> 00:35:52,230
a lot of customers that are sending him

00:35:50,340 --> 00:35:56,100
images that he needs to do that that

00:35:52,230 --> 00:35:58,200
image processing so he's doing it with

00:35:56,100 --> 00:36:00,990
open open way so he has some burst I

00:35:58,200 --> 00:36:03,570
just saw floats to open with and just

00:36:00,990 --> 00:36:05,850
gets processed with his actions and he's

00:36:03,570 --> 00:36:10,380
using node.js to process that that image

00:36:05,850 --> 00:36:11,220
images another example is processing

00:36:10,380 --> 00:36:14,930
checks

00:36:11,220 --> 00:36:17,760
Santander data POC without one of our

00:36:14,930 --> 00:36:22,490
open with advocates where there were

00:36:17,760 --> 00:36:25,349
processing images doing OCR recognition

00:36:22,490 --> 00:36:26,760
on the cheques and it's something that

00:36:25,349 --> 00:36:28,530
it happens in a certain amount of time

00:36:26,760 --> 00:36:30,690
right so everybody gets paid maybe on

00:36:28,530 --> 00:36:32,760
the 15 or the 30 or some people just get

00:36:30,690 --> 00:36:34,710
on Friday so that we're doing a lot of

00:36:32,760 --> 00:36:37,830
manual work to get that processor check

00:36:34,710 --> 00:36:39,090
so we're now they're using open within a

00:36:37,830 --> 00:36:43,920
server this question that they can

00:36:39,090 --> 00:36:45,990
handle that burst so this week there was

00:36:43,920 --> 00:36:50,369
a lot of talk about IOT and data and

00:36:45,990 --> 00:36:52,859
metastasis streams message hub or Kafka

00:36:50,369 --> 00:36:56,700
is another way of getting data into the

00:36:52,859 --> 00:36:58,920
system and then BQ into into a certain

00:36:56,700 --> 00:37:02,010
message broker basically Kafka and then

00:36:58,920 --> 00:37:03,630
you can create triggers that will run

00:37:02,010 --> 00:37:08,130
your functions again and get that data

00:37:03,630 --> 00:37:10,020
whenever that data comes in and the last

00:37:08,130 --> 00:37:12,900
one is what's talking about it was

00:37:10,020 --> 00:37:15,530
periodic so if you want to do run a

00:37:12,900 --> 00:37:18,000
certain test a certain amount of time or

00:37:15,530 --> 00:37:20,550
every other week or once a month

00:37:18,000 --> 00:37:22,859
basically supporting a cron syntax you

00:37:20,550 --> 00:37:26,700
can run your function to kick something

00:37:22,859 --> 00:37:29,510
out with a periodic and what is becoming

00:37:26,700 --> 00:37:31,980
very popular are chatbots

00:37:29,510 --> 00:37:35,339
with the API gateway you'll be able to

00:37:31,980 --> 00:37:37,790
support the api's or when you type

00:37:35,339 --> 00:37:40,470
things in your your in your channel

00:37:37,790 --> 00:37:43,290
select has an API that can start sending

00:37:40,470 --> 00:37:46,200
those messages to to an API that you

00:37:43,290 --> 00:37:47,760
define where you can have open with and

00:37:46,200 --> 00:37:51,150
open with who process those messages and

00:37:47,760 --> 00:37:53,970
maybe come back with analysis of that on

00:37:51,150 --> 00:37:55,710
those messages or one thing that we were

00:37:53,970 --> 00:37:58,859
talking about there's a lot of Apache

00:37:55,710 --> 00:38:01,859
projects using flags and they say

00:37:58,859 --> 00:38:03,720
there's a concern or just an idea of

00:38:01,859 --> 00:38:05,760
like how do we get these messages into

00:38:03,720 --> 00:38:07,920
the death list right how do we get if it

00:38:05,760 --> 00:38:10,380
doesn't happen in death list how do we

00:38:07,920 --> 00:38:12,240
know how to archive so we'll be talking

00:38:10,380 --> 00:38:13,560
about creating something generic that we

00:38:12,240 --> 00:38:16,050
work for every project that you can

00:38:13,560 --> 00:38:18,990
install in your open slack and maybe do

00:38:16,050 --> 00:38:21,720
a daily digest or when a thread gets

00:38:18,990 --> 00:38:23,609
started send send an email to the death

00:38:21,720 --> 00:38:25,590
list right send create a new death

00:38:23,609 --> 00:38:27,990
definitely thread

00:38:25,590 --> 00:38:29,760
and that's basically a chatbot is your

00:38:27,990 --> 00:38:31,560
communicating with it or just sending

00:38:29,760 --> 00:38:34,500
commands in in flight you can create a

00:38:31,560 --> 00:38:39,780
bot says run me this backup process or

00:38:34,500 --> 00:38:41,460
create me a JIRA issue using JIRA and

00:38:39,780 --> 00:38:43,500
the chat but would do it but you need

00:38:41,460 --> 00:38:49,230
some back-end so that's just a future

00:38:43,500 --> 00:38:51,060
and running in open whisk then we have

00:38:49,230 --> 00:38:54,750
QA but if you want to know more

00:38:51,060 --> 00:38:57,090
information in terms of bluemix you get

00:38:54,750 --> 00:39:01,230
an account and you can use it I can show

00:38:57,090 --> 00:39:05,660
I can show a demo of out of message

00:39:01,230 --> 00:39:07,800
queue with in bluemix let me show that

00:39:05,660 --> 00:39:10,650
because I saw a lot of people interested

00:39:07,800 --> 00:39:13,830
and the package this service provider

00:39:10,650 --> 00:39:15,630
this event river trigger provider for

00:39:13,830 --> 00:39:17,120
Kafka it's open source is one of the

00:39:15,630 --> 00:39:19,800
repos that Matt is going to point out

00:39:17,120 --> 00:39:22,950
but we're going to show it here with

00:39:19,800 --> 00:39:31,860
bluemix of how would you implement that

00:39:22,950 --> 00:39:34,410
if we can get that to full screen so in

00:39:31,860 --> 00:39:38,180
bloomix we give you the key credit after

00:39:34,410 --> 00:39:42,810
a Kafka our service and here I define

00:39:38,180 --> 00:39:45,900
assignee it's a topic called IOT and if

00:39:42,810 --> 00:39:48,120
I go to open whisk and I go to the

00:39:45,900 --> 00:39:50,820
develop tab this is kind of a nice nice

00:39:48,120 --> 00:39:55,470
UI for for people getting started I have

00:39:50,820 --> 00:40:02,790
a function I can create a function I

00:39:55,470 --> 00:40:05,400
call it what I call it take data yeah so

00:40:02,790 --> 00:40:08,310
I'm taking data from message queue from

00:40:05,400 --> 00:40:09,570
Kafka message hub you see node.js which

00:40:08,310 --> 00:40:14,610
you can use any language you can use

00:40:09,570 --> 00:40:17,520
Python I create the action and then I

00:40:14,610 --> 00:40:19,530
think I edit the action to get the

00:40:17,520 --> 00:40:22,410
messages that are coming from from

00:40:19,530 --> 00:40:27,330
message hub from Kafka and process them

00:40:22,410 --> 00:40:30,560
right in this example can I do

00:40:27,330 --> 00:40:30,560
2x missing

00:40:32,050 --> 00:40:38,630
yeah after I take sensor data so in this

00:40:36,650 --> 00:40:40,250
case I'm just aiming up you've got a

00:40:38,630 --> 00:40:45,230
sensor you have a temperature

00:40:40,250 --> 00:40:47,840
I get the sensor data and I want to send

00:40:45,230 --> 00:40:51,350
a slag notification so it will take the

00:40:47,840 --> 00:40:54,370
data from Kafka take the piece that he

00:40:51,350 --> 00:40:57,740
wants which is temperature create a text

00:40:54,370 --> 00:41:00,410
for for slacks and then I will do a

00:40:57,740 --> 00:41:04,910
sequence where I can define this action

00:41:00,410 --> 00:41:07,670
process the data outputs a another data

00:41:04,910 --> 00:41:09,320
which is the text to the slack action

00:41:07,670 --> 00:41:11,630
and the track action will send a message

00:41:09,320 --> 00:41:16,880
to me to to slack about the temperature

00:41:11,630 --> 00:41:21,920
of the sensor going very very slow

00:41:16,880 --> 00:41:28,670
things I can do a text yeah so here I'm

00:41:21,920 --> 00:41:31,280
creating a a demo take data

00:41:28,670 --> 00:41:35,720
it runs slack I'm running slack with my

00:41:31,280 --> 00:41:37,880
account my web hook from slack so I'm

00:41:35,720 --> 00:41:41,600
creating a sequence and then I'm going

00:41:37,880 --> 00:41:43,360
to after save the action I need I need

00:41:41,600 --> 00:41:49,700
to name it something so I think says

00:41:43,360 --> 00:41:52,310
when data slack again we're developers

00:41:49,700 --> 00:41:55,400
that's our biggest problem naming things

00:41:52,310 --> 00:42:02,600
right so I think I call it when

00:41:55,400 --> 00:42:04,490
temperature data slack and I keep

00:42:02,600 --> 00:42:06,200
messing with it with the name in which

00:42:04,490 --> 00:42:10,370
by a lot of time naming methods right

00:42:06,200 --> 00:42:15,380
and variables so the sequence get

00:42:10,370 --> 00:42:17,750
created close it so that's kind of a

00:42:15,380 --> 00:42:20,090
visualization of the sequence the

00:42:17,750 --> 00:42:22,130
sequence then if I want to automate that

00:42:20,090 --> 00:42:24,020
sequence I want to I want to run that

00:42:22,130 --> 00:42:24,470
that sequence I'm going to create a

00:42:24,020 --> 00:42:30,650
trigger

00:42:24,470 --> 00:42:32,210
so if I click run this run the sequence

00:42:30,650 --> 00:42:38,010
I can just run it from here and pass the

00:42:32,210 --> 00:42:42,890
temperature which is a 60

00:42:38,010 --> 00:42:46,800
just testing it out and we see

00:42:42,890 --> 00:42:48,750
I'll get the data and here you can see

00:42:46,800 --> 00:42:51,000
all your activations of all your actions

00:42:48,750 --> 00:42:54,960
and you can see the message that was

00:42:51,000 --> 00:42:57,030
sent to slack through the sequence to

00:42:54,960 --> 00:43:00,090
the trigger of IOT so I just put a

00:42:57,030 --> 00:43:06,210
message on IOT Kafka and that was saying

00:43:00,090 --> 00:43:08,220
that that wasn't the image I think I

00:43:06,210 --> 00:43:09,780
think that's it at least on that slack

00:43:08,220 --> 00:43:15,630
and that's the message that the

00:43:09,780 --> 00:43:17,910
temperature is 60 so I think we have

00:43:15,630 --> 00:43:24,590
five minutes for for questions if

00:43:17,910 --> 00:43:24,590
there's any let me send this like

00:43:25,819 --> 00:43:28,869
I don't want that

00:43:39,150 --> 00:43:47,880
Missy yeah so we have if you want to

00:43:45,809 --> 00:43:49,470
join our slack if there are questions on

00:43:47,880 --> 00:43:52,500
getting started or grading your first

00:43:49,470 --> 00:43:55,279
Java function you can go ahead a few

00:43:52,500 --> 00:43:55,279
questions

00:44:00,840 --> 00:44:06,900
yeah so persistent the question was how

00:44:03,660 --> 00:44:08,490
do I handle persistent or or state so

00:44:06,900 --> 00:44:10,320
these functions have to run for a

00:44:08,490 --> 00:44:13,290
certain amount of time you can configure

00:44:10,320 --> 00:44:14,790
them up to five minutes and the

00:44:13,290 --> 00:44:17,790
stateless so you have to write your

00:44:14,790 --> 00:44:19,890
application in state late way so using

00:44:17,790 --> 00:44:24,510
something like Redis using something

00:44:19,890 --> 00:44:26,280
like CouchDB or Cloudant or using my

00:44:24,510 --> 00:44:29,010
sequel right connecting so you need to

00:44:26,280 --> 00:44:32,700
have a connection somewhere where you

00:44:29,010 --> 00:44:35,520
purchase that data for those are you

00:44:32,700 --> 00:44:38,460
know server attackers they cheat a

00:44:35,520 --> 00:44:40,020
little bit with a cache so if there's

00:44:38,460 --> 00:44:42,540
definition running and you have to do

00:44:40,020 --> 00:44:44,340
some work or catch some data you can

00:44:42,540 --> 00:44:46,830
check if the last function left

00:44:44,340 --> 00:44:48,290
something and just and just use it but

00:44:46,830 --> 00:44:51,150
don't assume that it's going to be there

00:44:48,290 --> 00:44:52,950
that's just one one trick because your

00:44:51,150 --> 00:44:55,860
future may land on that same container

00:44:52,950 --> 00:44:57,540
but it may learn another one but it's if

00:44:55,860 --> 00:44:59,370
it's a step that you can save I don't

00:44:57,540 --> 00:45:01,920
know 20 milliseconds or 100 milliseconds

00:44:59,370 --> 00:45:05,430
per for function that runs 500

00:45:01,920 --> 00:45:07,020
milliseconds you can do that trick but

00:45:05,430 --> 00:45:11,430
other than that yeah like you were

00:45:07,020 --> 00:45:15,210
saying connect out to persistent and

00:45:11,430 --> 00:45:17,580
another way is your your whole app is is

00:45:15,210 --> 00:45:20,160
the state right so you can create a

00:45:17,580 --> 00:45:24,570
function that process a record from one

00:45:20,160 --> 00:45:26,940
database or analyze an image or do IOT

00:45:24,570 --> 00:45:29,640
recognition and then that action would

00:45:26,940 --> 00:45:31,080
put it into an another database or the

00:45:29,640 --> 00:45:33,270
same database and that will trigger

00:45:31,080 --> 00:45:35,250
another action to handle it so you don't

00:45:33,270 --> 00:45:37,230
have to maintain the state to see if

00:45:35,250 --> 00:45:39,480
that thing was done and this thing was

00:45:37,230 --> 00:45:41,280
done and this thing then I do this just

00:45:39,480 --> 00:45:44,550
follow follow the programming model

00:45:41,280 --> 00:45:46,940
using sequences and triggers any

00:45:44,550 --> 00:45:46,940
questions

00:45:50,360 --> 00:46:03,690
diplomat your function yeah yeah so this

00:46:00,240 --> 00:46:05,370
is marketing I guess we settled mo in

00:46:03,690 --> 00:46:07,080
real production you will just see I see

00:46:05,370 --> 00:46:10,080
did write something like Jenkins and

00:46:07,080 --> 00:46:12,710
something like github matt has a cool

00:46:10,080 --> 00:46:15,630
project is we showing Wisco with deploy

00:46:12,710 --> 00:46:18,210
adobe has another github repo which is

00:46:15,630 --> 00:46:20,310
if you push something to get to your

00:46:18,210 --> 00:46:22,440
gate repository then a web hook will

00:46:20,310 --> 00:46:24,030
call and open with action that will

00:46:22,440 --> 00:46:26,820
package your action and update your

00:46:24,030 --> 00:46:28,350
actions like meta right so it's just a

00:46:26,820 --> 00:46:30,950
rest at the end of the day just just

00:46:28,350 --> 00:46:34,050
calling either the CLI or the REST API

00:46:30,950 --> 00:46:36,990
to submit your sip file for that action

00:46:34,050 --> 00:46:40,770
to update the code or jar file for Java

00:46:36,990 --> 00:46:43,610
or your Python zip file so yeah Jenkins

00:46:40,770 --> 00:46:46,530
badge is just a rest api or coral

00:46:43,610 --> 00:46:48,900
actually but with the way we do it we do

00:46:46,530 --> 00:46:51,840
the CLI in the CL is becoming kind of

00:46:48,900 --> 00:46:53,730
like the common denominator so wrap the

00:46:51,840 --> 00:46:56,490
CLI with Gradle wrap it with something

00:46:53,730 --> 00:46:58,920
else and the CLI is just during

00:46:56,490 --> 00:47:01,260
interface to the REST API so you you

00:46:58,920 --> 00:47:01,980
have structs yourself a little bit that

00:47:01,260 --> 00:47:04,910
answer your question

00:47:01,980 --> 00:47:04,910
cool

00:47:05,990 --> 00:47:19,490
the fire it's not there but we're open

00:47:16,400 --> 00:47:21,950
to to support it and we can create a

00:47:19,490 --> 00:47:26,839
repo if somebody wants to invest time on

00:47:21,950 --> 00:47:28,460
on doing that to for for that side and

00:47:26,839 --> 00:47:31,960
for those deputies you change the

00:47:28,460 --> 00:47:34,790
pattern of Kafka which is basically

00:47:31,960 --> 00:47:37,099
there's two api's when you create a

00:47:34,790 --> 00:47:40,460
trigger you're defining that I want this

00:47:37,099 --> 00:47:43,670
trigger for MQTT and then you have to do

00:47:40,460 --> 00:47:46,369
a second call REST API saying hey mqtt

00:47:43,670 --> 00:47:48,260
start listening or handling these

00:47:46,369 --> 00:47:49,820
messages and fire this trigger which

00:47:48,260 --> 00:47:53,750
basically is just send an HTTP POST

00:47:49,820 --> 00:47:57,650
request to it but now people have done n

00:47:53,750 --> 00:47:59,839
qtt through bluemix that then they do a

00:47:57,650 --> 00:48:02,660
web web app and then it will trigger the

00:47:59,839 --> 00:48:05,270
trigger manually but natively it will be

00:48:02,660 --> 00:48:09,260
nice to have that the same thing for my

00:48:05,270 --> 00:48:11,420
sequel I did a little research and I

00:48:09,260 --> 00:48:14,150
think it's possible using the my sequel

00:48:11,420 --> 00:48:15,589
binary log so have a demon that can

00:48:14,150 --> 00:48:19,460
listen to anything that happens in that

00:48:15,589 --> 00:48:21,619
sequel and then firing triggers also I

00:48:19,460 --> 00:48:24,800
learned this week about rocket rocket

00:48:21,619 --> 00:48:27,710
and you go you'll be cool to have to

00:48:24,800 --> 00:48:32,750
have a rocket and cue firing actions on

00:48:27,710 --> 00:48:34,099
on data on data streams but as part of

00:48:32,750 --> 00:48:35,750
the open source project nobody's working

00:48:34,099 --> 00:48:38,260
on it so we're looking for for

00:48:35,750 --> 00:48:38,260
contributors

00:48:44,369 --> 00:48:48,910
what is it different between open-source

00:48:46,690 --> 00:48:55,479
they are open with open-source versus

00:48:48,910 --> 00:49:00,309
the commercial in IBM yeah open with the

00:48:55,479 --> 00:49:02,859
difference are it's a multi-tenant we

00:49:00,309 --> 00:49:05,140
take the open-source project and we

00:49:02,859 --> 00:49:09,219
deployed in our cloud so we're using the

00:49:05,140 --> 00:49:10,420
vm will be different I think the

00:49:09,219 --> 00:49:12,459
authentication what I show what's

00:49:10,420 --> 00:49:14,829
authentication so if you're deploying

00:49:12,459 --> 00:49:18,069
open wasting your company you will need

00:49:14,829 --> 00:49:20,650
to implement that piece so how do

00:49:18,069 --> 00:49:22,509
identical a user my company if you want

00:49:20,650 --> 00:49:26,019
to deploy open with also indoor

00:49:22,509 --> 00:49:28,660
environments and the other piece is that

00:49:26,019 --> 00:49:30,400
is coming it's elastic search so in in

00:49:28,660 --> 00:49:32,229
the proprietary system since we're

00:49:30,400 --> 00:49:34,059
maintaining all these users we use in

00:49:32,229 --> 00:49:36,430
elastic search to do the monitoring and

00:49:34,059 --> 00:49:39,670
the logs so if you have to deploy open

00:49:36,430 --> 00:49:41,890
whisk then you have to get the locks off

00:49:39,670 --> 00:49:43,509
of the system somewhere with some with

00:49:41,890 --> 00:49:45,160
subsisting and that's not available open

00:49:43,509 --> 00:49:49,420
source yet and that's the part that

00:49:45,160 --> 00:49:51,160
we're working to to have that other than

00:49:49,420 --> 00:49:52,809
that I think that I think that's it and

00:49:51,160 --> 00:49:57,430
I might want to add

00:49:52,809 --> 00:49:59,019
oh yeah the UI so in the commercial you

00:49:57,430 --> 00:50:01,630
will see that that UI that I show to

00:49:59,019 --> 00:50:04,329
credit action and link the teens and the

00:50:01,630 --> 00:50:06,339
boxes and also the nice graphs about

00:50:04,329 --> 00:50:08,410
those things those are available only in

00:50:06,339 --> 00:50:09,969
the commercial in the open source

00:50:08,410 --> 00:50:11,619
basically what I show with the

00:50:09,969 --> 00:50:14,279
command-line interface you get a REST

00:50:11,619 --> 00:50:14,279
API raw

00:50:20,570 --> 00:50:23,570
sorry

00:50:28,170 --> 00:50:35,910
yeah so when you create the the function

00:50:30,900 --> 00:50:37,980
you pass flag or limit so you can set

00:50:35,910 --> 00:50:40,230
the limit of memory basically it's a

00:50:37,980 --> 00:50:43,950
it's a cap and then that's what you pay

00:50:40,230 --> 00:50:45,570
for so I think the max is 512 and we're

00:50:43,950 --> 00:50:47,880
talking about increasing that to one gig

00:50:45,570 --> 00:50:50,940
so you can have up to one gig but today

00:50:47,880 --> 00:50:53,430
is 512 if you use the open source

00:50:50,940 --> 00:50:56,280
version just go to the ansible script

00:50:53,430 --> 00:50:58,170
and change that to whatever money you

00:50:56,280 --> 00:51:00,930
have but as a user when you create the

00:50:58,170 --> 00:51:03,630
function you create a function with 256

00:51:00,930 --> 00:51:05,010
another few 128 another future with 512

00:51:03,630 --> 00:51:06,930
depending what the future is going to do

00:51:05,010 --> 00:51:11,550
if it's going to handle a large buffer

00:51:06,930 --> 00:51:13,410
of data or not for IOT like for IOT or

00:51:11,550 --> 00:51:15,720
Kafka you don't know how many messages

00:51:13,410 --> 00:51:19,460
to going to get on how big is each

00:51:15,720 --> 00:51:22,170
message so you may give it a 512 megs

00:51:19,460 --> 00:51:23,940
and also the time limit if you want you

00:51:22,170 --> 00:51:28,770
always want us to run for for more than

00:51:23,940 --> 00:51:31,220
an X amount of minutes timeout yeah

00:51:28,770 --> 00:51:31,220
that's the

00:51:33,930 --> 00:51:47,750
yeah yeah any any questions or comments

00:51:39,150 --> 00:51:47,750
or yeah yep

00:51:51,319 --> 00:51:59,940
for for Java it is it has GI Jason

00:51:57,210 --> 00:52:03,869
Google Jason is the API so you create a

00:51:59,940 --> 00:52:06,779
jar file it has to have your your Java

00:52:03,869 --> 00:52:09,020
code inside and then you specify what is

00:52:06,779 --> 00:52:13,380
the class that implements that function

00:52:09,020 --> 00:52:15,660
and then it will run so any any

00:52:13,380 --> 00:52:17,609
dependencies you have to build in this

00:52:15,660 --> 00:52:19,890
in this one single jar so you have to

00:52:17,609 --> 00:52:21,299
compile everything and we have examples

00:52:19,890 --> 00:52:23,430
that show you how to do it with Gradle

00:52:21,299 --> 00:52:26,369
but you will need to adapt it because

00:52:23,430 --> 00:52:28,829
maybe your your function doesn't take GI

00:52:26,369 --> 00:52:32,339
Jason so you have to adapt it to to that

00:52:28,829 --> 00:52:33,960
to the API but again is it's open source

00:52:32,339 --> 00:52:37,140
if you know using open source version

00:52:33,960 --> 00:52:41,490
you can change that beads or adapted for

00:52:37,140 --> 00:52:45,170
that I was going to go for for the docs

00:52:41,490 --> 00:52:45,170
we see if I have the talk somewhere here

00:52:52,830 --> 00:52:59,110
yeah when you cook when you create your

00:52:54,910 --> 00:53:00,850
function whisk action create - - Java

00:52:59,110 --> 00:53:03,700
here's the jar file you can pass on all

00:53:00,850 --> 00:53:05,740
the parameters saying memory how much

00:53:03,700 --> 00:53:08,220
memory do you want to allocate to that

00:53:05,740 --> 00:53:08,220
for that function

00:53:13,440 --> 00:53:17,920
yeah and that basically that memory

00:53:16,330 --> 00:53:20,500
you're controlling the memory are to the

00:53:17,920 --> 00:53:22,900
container so that that field of memory

00:53:20,500 --> 00:53:24,970
is we similar of doing a docker run and

00:53:22,900 --> 00:53:27,670
passing hey this container should not

00:53:24,970 --> 00:53:29,680
have more memory than X and then the JVM

00:53:27,670 --> 00:53:32,950
inside and for Java is very interesting

00:53:29,680 --> 00:53:34,600
is it's a it's a it's a Java proxy we

00:53:32,950 --> 00:53:37,270
takes your request and then runs your

00:53:34,600 --> 00:53:38,950
function so for now J's in node.js so we

00:53:37,270 --> 00:53:41,470
try to optimize for the language so it

00:53:38,950 --> 00:53:43,300
the performances it's better so we have

00:53:41,470 --> 00:53:45,840
different proxies for the docker

00:53:43,300 --> 00:53:45,840
containers

00:53:52,570 --> 00:53:58,390
the isolation is through docker

00:53:55,570 --> 00:54:01,870
so the docker is sound is locked down

00:53:58,390 --> 00:54:04,300
with iptables on security so you should

00:54:01,870 --> 00:54:05,890
not be able to break out from your

00:54:04,300 --> 00:54:07,330
container and access another container

00:54:05,890 --> 00:54:09,040
that is running another function so

00:54:07,330 --> 00:54:11,440
that's the level of isolation that we

00:54:09,040 --> 00:54:14,050
have but we have a bunch of VMs running

00:54:11,440 --> 00:54:16,780
the functions but the isolation is done

00:54:14,050 --> 00:54:21,100
at the level of the container I think we

00:54:16,780 --> 00:54:22,780
run out that okay so I think that that's

00:54:21,100 --> 00:54:24,760
that's it if you want to this is this

00:54:22,780 --> 00:54:26,590
the same wheel break map want to stick

00:54:24,760 --> 00:54:29,440
around and learn more about the other

00:54:26,590 --> 00:54:31,450
tools they're all the repos you can

00:54:29,440 --> 00:54:34,030
stick around for the next talk so but so

00:54:31,450 --> 00:54:37,379
far thank you for coming yeah

00:54:34,030 --> 00:54:37,379

YouTube URL: https://www.youtube.com/watch?v=5bOnGxgda1I


