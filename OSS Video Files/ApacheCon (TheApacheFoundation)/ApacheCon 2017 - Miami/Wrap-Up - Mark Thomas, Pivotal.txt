Title: Wrap-Up - Mark Thomas, Pivotal
Publication date: 2017-05-19
Playlist: ApacheCon 2017 - Miami
Description: 
	Wrap-Up - Mark Thomas, Pivotal

This final session of TomcatCon will look ahead to what is expected in 2017 including Java EE 8, Tomcat 9 and the current thoughts on the roadmap for the next 12 months any beyond.

About Mark Thomas
Mark is currently employed by Pivotal where he spends most of his time working on Apache Tomcat. At the Apache Software Foundation, Mark is a committer and PMC member for Apache Tomcat as well as other projects. At the foundation level he is an ASF member, a member of the security and trademarks committees, is an infrastructure volunteer and a Director. Mark speaks regularly on Apache Tomcat including at ApacheCon.
Captions: 
	00:00:00,030 --> 00:00:06,210
welcome to the final track final session

00:00:02,760 --> 00:00:09,450
of the tommcatt comic track it aimed as

00:00:06,210 --> 00:00:10,590
a bit of a wrap-up I'm not going to

00:00:09,450 --> 00:00:12,900
bother introducing myself

00:00:10,590 --> 00:00:15,059
thank you please wish anybody here

00:00:12,900 --> 00:00:18,510
doesn't know who I am then something's

00:00:15,059 --> 00:00:21,119
got a role that first of all thank you

00:00:18,510 --> 00:00:22,680
all for attending I hope it's been

00:00:21,119 --> 00:00:24,900
useful thank you for making it through

00:00:22,680 --> 00:00:26,789
to the last session and it is nice to

00:00:24,900 --> 00:00:28,199
see so many of you still here at the

00:00:26,789 --> 00:00:29,789
last session on the Thursday when

00:00:28,199 --> 00:00:31,529
normally people are dashing for the

00:00:29,789 --> 00:00:34,920
airplane so thank you all very much

00:00:31,529 --> 00:00:36,570
I did say on Tuesday that we had some

00:00:34,920 --> 00:00:39,660
new PMC members that I couldn't announce

00:00:36,570 --> 00:00:42,090
I'm pleased to say that those cote and

00:00:39,660 --> 00:00:51,120
Huck Singh are now fully fledged members

00:00:42,090 --> 00:00:53,219
of the Tomcat PMC so congratulations so

00:00:51,120 --> 00:00:55,410
with this wrap-up session what I wanted

00:00:53,219 --> 00:00:58,980
to do was really look forward and think

00:00:55,410 --> 00:01:01,289
about what I think might be happening in

00:00:58,980 --> 00:01:06,840
Tomcat community and things around it

00:01:01,289 --> 00:01:08,790
over the next year ish so obviously the

00:01:06,840 --> 00:01:15,240
big thing on the horizon is Java EE 8

00:01:08,790 --> 00:01:16,140
it's due June July summer ish the main

00:01:15,240 --> 00:01:18,900
thing that we're going to get there is

00:01:16,140 --> 00:01:19,830
servlet 4 so that's actually three two

00:01:18,900 --> 00:01:21,930
and all the other things that we've

00:01:19,830 --> 00:01:25,020
talked about this week in terms of the

00:01:21,930 --> 00:01:26,850
other specs I'm not aware that anything

00:01:25,020 --> 00:01:28,770
has happened on them so what I'm

00:01:26,850 --> 00:01:29,369
expecting is what's happened with the

00:01:28,770 --> 00:01:33,270
GSEs

00:01:29,369 --> 00:01:34,320
JSP spec in the past which is a few days

00:01:33,270 --> 00:01:36,450
before the deadline

00:01:34,320 --> 00:01:38,790
the maintenance lead will publish an

00:01:36,450 --> 00:01:41,460
update to the spec that will fix a few

00:01:38,790 --> 00:01:43,140
typos maybe add a couple of convenience

00:01:41,460 --> 00:01:45,780
methods not really add anything

00:01:43,140 --> 00:01:47,130
significant and then push it out there

00:01:45,780 --> 00:01:49,710
and that'll be what will end up

00:01:47,130 --> 00:01:51,360
influencing sort of like half a day's

00:01:49,710 --> 00:01:56,219
development effort each other time

00:01:51,360 --> 00:01:57,659
imagining so what that means for tomcat

00:01:56,219 --> 00:02:01,619
9 is we're currently releasing

00:01:57,659 --> 00:02:05,000
milestones it is they're going to stay

00:02:01,619 --> 00:02:08,369
as alphas milestones until the

00:02:05,000 --> 00:02:10,470
specification API is fixed once that's

00:02:08,369 --> 00:02:11,819
slightly them after the minute there'll

00:02:10,470 --> 00:02:14,010
be alpha one suspect

00:02:11,819 --> 00:02:15,810
it's fixed as soon as the implementation

00:02:14,010 --> 00:02:17,610
is done we'll switch it to be set that's

00:02:15,810 --> 00:02:20,430
going to be a very short period of time

00:02:17,610 --> 00:02:23,909
unless something truly awful goes wrong

00:02:20,430 --> 00:02:26,280
in the trailers implementation that's

00:02:23,909 --> 00:02:27,959
about half implemented already and I

00:02:26,280 --> 00:02:30,060
only stopped because those it wasn't

00:02:27,959 --> 00:02:33,360
clarity on what the API was going to be

00:02:30,060 --> 00:02:35,569
so that elf elf though will happen as

00:02:33,360 --> 00:02:37,409
soon as the specs go final

00:02:35,569 --> 00:02:39,690
beats will happen very shortly

00:02:37,409 --> 00:02:43,379
afterwards stable is the one that will

00:02:39,690 --> 00:02:46,140
take a little bit longer the good thing

00:02:43,379 --> 00:02:48,780
with all the delays with Java 8 is that

00:02:46,140 --> 00:02:50,819
Tomcat 9 is an out there for a while

00:02:48,780 --> 00:02:52,920
Tomcat 8 5 which is heavily based on it

00:02:50,819 --> 00:02:55,590
has been out there for a while and it's

00:02:52,920 --> 00:02:57,359
already had a lot of real testing people

00:02:55,590 --> 00:03:00,030
are using it actively in production

00:02:57,359 --> 00:03:01,680
we've ironed out a lot of sort of early

00:03:00,030 --> 00:03:06,690
issues that we'd normally expect to iron

00:03:01,680 --> 00:03:08,849
out when will it be production ready no

00:03:06,690 --> 00:03:10,379
idea in terms of fixed date I wouldn't

00:03:08,849 --> 00:03:12,780
be surprised if it's before the end of

00:03:10,379 --> 00:03:15,690
this year assuming that java re'

00:03:12,780 --> 00:03:17,250
delivers when we're expecting in - so

00:03:15,690 --> 00:03:20,579
compared to previous releases that

00:03:17,250 --> 00:03:23,370
should be fairly quick there is some

00:03:20,579 --> 00:03:27,629
work to do around Java 9 modules but

00:03:23,370 --> 00:03:29,489
that is still a moving target and as

00:03:27,629 --> 00:03:31,260
I've said before this week I'm not

00:03:29,489 --> 00:03:32,970
really that keen on spending time

00:03:31,260 --> 00:03:36,090
working on it when the targets still

00:03:32,970 --> 00:03:38,280
moving we've got an idea of what's going

00:03:36,090 --> 00:03:41,760
to be involved it's probably not going

00:03:38,280 --> 00:03:45,780
to be too much hopefully so we'll let

00:03:41,760 --> 00:03:47,699
that settle down and jari so Java 9 the

00:03:45,780 --> 00:03:52,709
Java EE 8 aren't tied together at the

00:03:47,699 --> 00:03:54,930
minute so we can always treat making it

00:03:52,709 --> 00:03:57,239
run on Java 9 as just something we fix

00:03:54,930 --> 00:03:58,349
in a point release because I don't think

00:03:57,239 --> 00:04:02,659
there's going to be anything is going to

00:03:58,349 --> 00:04:02,659
massively affect any of the existing API

00:04:02,750 --> 00:04:07,470
at the other end of things Tomcat 6 we

00:04:06,209 --> 00:04:10,319
are now slowly closing down the

00:04:07,470 --> 00:04:14,400
resources Bugzilla was closed see new

00:04:10,319 --> 00:04:18,030
bugs I think last week there's something

00:04:14,400 --> 00:04:21,239
just under 20 open tomcat 6 does I think

00:04:18,030 --> 00:04:24,330
it's 18 it might be 17

00:04:21,239 --> 00:04:26,430
so we need to review all of those what

00:04:24,330 --> 00:04:29,310
what I've been doing this time is not it

00:04:26,430 --> 00:04:30,690
previously I've just changed the tomcat

00:04:29,310 --> 00:04:32,759
version to whatever the latest one is

00:04:30,690 --> 00:04:34,289
and left them and what I'm trying to do

00:04:32,759 --> 00:04:35,550
this time is go through them and

00:04:34,289 --> 00:04:37,349
actually give them a bit more of a

00:04:35,550 --> 00:04:39,240
review see if it can we actually

00:04:37,349 --> 00:04:40,110
implement this it does it look like this

00:04:39,240 --> 00:04:43,080
demand for it

00:04:40,110 --> 00:04:44,940
do we need to mark it as won't fix and

00:04:43,080 --> 00:04:46,410
try and actually close the bank rather

00:04:44,940 --> 00:04:48,419
than just punching them again

00:04:46,410 --> 00:04:50,729
I expect that someone end up being

00:04:48,419 --> 00:04:53,639
punted because it will be able well it's

00:04:50,729 --> 00:04:58,080
a nice enough idea it's just a fair

00:04:53,639 --> 00:05:00,630
amount of work so it's not quite an itch

00:04:58,080 --> 00:05:02,280
i want to scratch but it makes sense

00:05:00,630 --> 00:05:04,380
enough that i don't want to just close

00:05:02,280 --> 00:05:05,580
it as won't fix so that in that those

00:05:04,380 --> 00:05:08,340
ones will probably get punted and

00:05:05,580 --> 00:05:11,130
they'll probably be a couple of them the

00:05:08,340 --> 00:05:12,830
other steps once those are done we make

00:05:11,130 --> 00:05:14,970
bugzilla read-only completely four six

00:05:12,830 --> 00:05:17,190
will remove tomcat six from the

00:05:14,970 --> 00:05:18,330
downloads page at some point once we've

00:05:17,190 --> 00:05:20,430
done that we'll remove it from the

00:05:18,330 --> 00:05:22,530
mirrors and then we'll drop the links to

00:05:20,430 --> 00:05:24,090
the docs it's worth remembering that all

00:05:22,530 --> 00:05:25,949
of the Tomcat excursions will still

00:05:24,090 --> 00:05:27,330
always be available on the archive the

00:05:25,949 --> 00:05:29,570
docs will always be available on the

00:05:27,330 --> 00:05:31,889
website we're just not linking to them

00:05:29,570 --> 00:05:36,180
though there are there will be no more

00:05:31,889 --> 00:05:38,820
security fixes for six well with the

00:05:36,180 --> 00:05:40,139
usual caveat that unless three mp3 pmc

00:05:38,820 --> 00:05:42,090
members decide it's a really good idea

00:05:40,139 --> 00:05:44,789
get together do it and vote for it and

00:05:42,090 --> 00:05:48,180
if they do that's fine the chances of me

00:05:44,789 --> 00:05:50,909
being one of them is pretty slim then

00:05:48,180 --> 00:05:53,190
might be three it's possible and it

00:05:50,909 --> 00:05:57,120
depends what the issue is and a district

00:05:53,190 --> 00:05:59,639
sent it depends what those PMC members

00:05:57,120 --> 00:06:01,080
are still supporting that uses six in

00:05:59,639 --> 00:06:03,960
their organizations that a release will

00:06:01,080 --> 00:06:06,810
be helpful for personally I'm trying to

00:06:03,960 --> 00:06:11,340
avoid doing that so it's highly unlikely

00:06:06,810 --> 00:06:12,990
is what we normally say so yes the six

00:06:11,340 --> 00:06:15,330
releases are still on the archives ours

00:06:12,990 --> 00:06:16,620
are all ones back to the Tomcat 3.2 the

00:06:15,330 --> 00:06:18,270
docks will always be available on the

00:06:16,620 --> 00:06:20,759
website as are the docks all the way

00:06:18,270 --> 00:06:24,560
back to 3.2 so we just don't click link

00:06:20,759 --> 00:06:30,710
to them was that a question over there

00:06:24,560 --> 00:06:35,120
and the frequent one of the release

00:06:30,710 --> 00:06:38,830
manager for division known for a long

00:06:35,120 --> 00:06:42,430
tail support so if you absolutely

00:06:38,830 --> 00:06:45,730
require continued support for comcastic

00:06:42,430 --> 00:06:45,730
face down

00:06:48,820 --> 00:06:54,310
so that brings us on to Tomcat 8 and

00:06:51,750 --> 00:06:55,780
because we try and want to transport

00:06:54,310 --> 00:06:58,420
three versions in parallel we don't

00:06:55,780 --> 00:07:03,280
really want to be doing 7a 85 and nine

00:06:58,420 --> 00:07:04,870
and so as I said what we've always

00:07:03,280 --> 00:07:08,290
wanted is eight days wait five to be

00:07:04,870 --> 00:07:11,110
seamless modulars maybe some simple

00:07:08,290 --> 00:07:13,090
configuration changes a tow has got a

00:07:11,110 --> 00:07:16,600
slightly slower release cadence there is

00:07:13,090 --> 00:07:19,060
no fixed date on when a oh is going to

00:07:16,600 --> 00:07:21,070
come to an end and what we heard at the

00:07:19,060 --> 00:07:23,170
meetup last night and various people

00:07:21,070 --> 00:07:25,330
sort of said in the room or in the

00:07:23,170 --> 00:07:27,010
corridors is it would actually help if

00:07:25,330 --> 00:07:28,570
we put a fixed date on that so I think

00:07:27,010 --> 00:07:30,790
that's a discussion that we need to have

00:07:28,570 --> 00:07:31,960
on the mainland wrist feel are we going

00:07:30,790 --> 00:07:34,780
to put a fixed date on this and if so

00:07:31,960 --> 00:07:36,520
what is it or is certainly going to step

00:07:34,780 --> 00:07:39,970
up and volunteer to actually keep it

00:07:36,520 --> 00:07:43,000
running in parallel without five for at

00:07:39,970 --> 00:07:44,920
least the next X months and then we'll

00:07:43,000 --> 00:07:46,270
revisit it maybe but we'll try and get

00:07:44,920 --> 00:07:52,780
some more clarity on that because the

00:07:46,270 --> 00:07:55,180
minute it's not so talked at seven that

00:07:52,780 --> 00:07:59,200
is going to be supported until Java EE

00:07:55,180 --> 00:08:02,440
nine is close to being released now I've

00:07:59,200 --> 00:08:04,270
put an idea here on when I think that

00:08:02,440 --> 00:08:05,950
might be the question was asked on the

00:08:04,270 --> 00:08:07,240
mailing list and I think I went through

00:08:05,950 --> 00:08:10,870
a similar sort of logic and came up with

00:08:07,240 --> 00:08:16,000
a slightly different set of dates it's

00:08:10,870 --> 00:08:19,690
going to be no earlier than end of next

00:08:16,000 --> 00:08:21,610
year I think absolutely earnest and I

00:08:19,690 --> 00:08:25,419
would be amazed if we end up lifetime

00:08:21,610 --> 00:08:27,100
cap seven that early it all depends on

00:08:25,419 --> 00:08:28,900
what happens the java re' nine that's

00:08:27,100 --> 00:08:33,550
meant to be a year after java re' eight

00:08:28,900 --> 00:08:35,860
but I don't see that happening I think

00:08:33,550 --> 00:08:39,219
it's going to stretch longer and then

00:08:35,860 --> 00:08:42,550
there's also then the question of we're

00:08:39,219 --> 00:08:43,839
not going to end-of-life Tomcat 7 until

00:08:42,550 --> 00:08:46,570
we've got a reasonable degree of

00:08:43,839 --> 00:08:47,890
certainty when Tomcat 10 is actually

00:08:46,570 --> 00:08:50,200
going to be entering into service

00:08:47,890 --> 00:08:51,430
there's always some overlap we don't

00:08:50,200 --> 00:08:55,380
want too much we don't want too little

00:08:51,430 --> 00:08:55,380
so you have questions back

00:09:00,579 --> 00:09:07,100
so I've got 800 might but 85 will carry

00:09:03,920 --> 00:09:09,079
on but we might end up livestock and the

00:09:07,100 --> 00:09:11,870
plan was always when we created 8 fibers

00:09:09,079 --> 00:09:13,970
to end-of-life age a fairly quickly but

00:09:11,870 --> 00:09:15,860
it was that that's why it's important

00:09:13,970 --> 00:09:18,500
for us that people to move from 808 5

00:09:15,860 --> 00:09:20,209
without hitting anything horrible and if

00:09:18,500 --> 00:09:25,540
people report it we'll we'll fix it

00:09:20,209 --> 00:09:30,709
nice and quite clicking so yeah and if

00:09:25,540 --> 00:09:32,480
Java EE 9 phase released not next year

00:09:30,709 --> 00:09:35,600
let's say it's six months like that end

00:09:32,480 --> 00:09:39,529
of next year say we don't have certainty

00:09:35,600 --> 00:09:41,060
on that until three months beforehand so

00:09:39,529 --> 00:09:44,060
we probably ain't shoot them for

00:09:41,060 --> 00:09:46,220
end-of-life 12 months after that so

00:09:44,060 --> 00:09:49,010
that's what end of 2019

00:09:46,220 --> 00:09:51,589
so yeah it's somewhere around 2019 maybe

00:09:49,010 --> 00:10:02,060
but it's very movable depending on what

00:09:51,589 --> 00:10:04,730
happens with Java reunite it really

00:10:02,060 --> 00:10:07,519
comes down to there's no fixed rule on

00:10:04,730 --> 00:10:09,579
what we backport to what everything goes

00:10:07,519 --> 00:10:11,990
into trunk so everything goes into nine

00:10:09,579 --> 00:10:16,660
pretty much everything goes into outside

00:10:11,990 --> 00:10:20,870
some internal cleanup doesn't bug fixes

00:10:16,660 --> 00:10:26,870
currently going into not drunk

00:10:20,870 --> 00:10:31,220
85 zero and seven and it's normally what

00:10:26,870 --> 00:10:32,660
happens is that we will put some bug

00:10:31,220 --> 00:10:34,699
fixes all the way back to the early

00:10:32,660 --> 00:10:37,730
support exertion and it comes down to a

00:10:34,699 --> 00:10:41,240
judgment call as to how severe the bug

00:10:37,730 --> 00:10:43,069
is versus what fixing it might do to

00:10:41,240 --> 00:10:44,390
somebody who thought they're on a nice

00:10:43,069 --> 00:10:47,000
stable release that wasn't going to

00:10:44,390 --> 00:10:48,380
change everything we'll get anything

00:10:47,000 --> 00:10:53,329
that supported will always get security

00:10:48,380 --> 00:10:56,209
fixes so there's no hard and fast rule

00:10:53,329 --> 00:10:59,569
and actually it's getting easier to back

00:10:56,209 --> 00:11:01,339
port stuff a lot of it depends on

00:10:59,569 --> 00:11:03,320
whether the code needs to be back ported

00:11:01,339 --> 00:11:05,510
has gone through a refactoring

00:11:03,320 --> 00:11:07,190
if it's interconnected it's horrible if

00:11:05,510 --> 00:11:10,790
it's anywhere else if you it's named

00:11:07,190 --> 00:11:12,700
fine and the using 76 was lark was

00:11:10,790 --> 00:11:15,830
potentially horrible in lots of places

00:11:12,700 --> 00:11:19,190
that's gone away now the prank the main

00:11:15,830 --> 00:11:21,230
area of difficulty is going from 8 5 to

00:11:19,190 --> 00:11:23,300
8 around the connectors because of all

00:11:21,230 --> 00:11:24,650
of the refactoring we have to do but if

00:11:23,300 --> 00:11:26,120
you don't want to backport all the

00:11:24,650 --> 00:11:31,390
refactoring to aids because that will

00:11:26,120 --> 00:11:31,390
create a different set of problems yes

00:11:45,280 --> 00:11:52,310
it's highly likely not by us that but

00:11:49,610 --> 00:11:55,900
but the imaginative manual we will be

00:11:52,310 --> 00:11:58,280
back faulting stuff from 85 to 8 because

00:11:55,900 --> 00:12:00,170
because said that is still being

00:11:58,280 --> 00:12:02,360
supported actually it might actually

00:12:00,170 --> 00:12:06,500
easy to take fixes from 7th and 8th 5

00:12:02,360 --> 00:12:07,880
depending on the area of the code so we

00:12:06,500 --> 00:12:12,730
have a tomcat emitter that's plugged

00:12:07,880 --> 00:12:12,730
into that so that should happen

00:12:18,269 --> 00:12:23,639
we are not supporting their problem so

00:12:20,850 --> 00:12:27,889
they want that for our passion is to

00:12:23,639 --> 00:12:27,889
layer their fruity so

00:12:32,170 --> 00:12:37,390
what we've said is we will we will

00:12:34,670 --> 00:12:40,640
always give at least 12 months notice of

00:12:37,390 --> 00:12:42,170
end-of-life of the nature version but

00:12:40,640 --> 00:12:45,110
we've never been we've never made any

00:12:42,170 --> 00:12:46,850
promise over and above that and we'll

00:12:45,110 --> 00:12:48,260
try and do more and we'll try and do

00:12:46,850 --> 00:13:08,180
better but that's what we said we will

00:12:48,260 --> 00:13:09,920
we will do yeah hey what if we if we

00:13:08,180 --> 00:13:12,250
call it stable that's what that's that's

00:13:09,920 --> 00:13:17,960
what we consider production ready

00:13:12,250 --> 00:13:19,790
it tends to be have we I want my

00:13:17,960 --> 00:13:22,940
personal yardstick is something along

00:13:19,790 --> 00:13:27,140
the lines of have we had two or three

00:13:22,940 --> 00:13:33,200
releases in a row without any bugs that

00:13:27,140 --> 00:13:36,800
make me go pale or any sort of

00:13:33,200 --> 00:13:40,520
regressions that have caused hassles and

00:13:36,800 --> 00:13:41,900
it's a sense of yet actually that we've

00:13:40,520 --> 00:13:43,580
had those three releases out there lots

00:13:41,900 --> 00:13:45,920
of users are using and we haven't had

00:13:43,580 --> 00:13:47,900
we've just had the steady trickle of

00:13:45,920 --> 00:13:50,150
bugs that people stumbled across and

00:13:47,900 --> 00:13:51,350
have been in the code base for years and

00:13:50,150 --> 00:13:54,260
years and years and they just happen to

00:13:51,350 --> 00:13:57,140
have stumbled across them if we've still

00:13:54,260 --> 00:13:58,850
got the Oh two or three major bugs being

00:13:57,140 --> 00:14:00,710
reported on each release and they're

00:13:58,850 --> 00:14:02,450
related to code that's changed in then

00:14:00,710 --> 00:14:04,430
that we think no that's not saving it

00:14:02,450 --> 00:14:08,960
but there's no hard and fast rule it

00:14:04,430 --> 00:14:11,089
certainly yes it's definitely and to be

00:14:08,960 --> 00:14:13,040
honest I'd be close to calling nine

00:14:11,089 --> 00:14:15,200
stable if it wasn't fact that the API

00:14:13,040 --> 00:14:19,160
wasn't stabilized and it could go from

00:14:15,200 --> 00:14:21,589
milestone to stable very quickly but it

00:14:19,160 --> 00:14:23,570
needs three committed so three PMC

00:14:21,589 --> 00:14:27,680
members to all consider it stable before

00:14:23,570 --> 00:14:30,260
it will get a and that there needs to be

00:14:27,680 --> 00:14:34,400
a majority of more people thinking it's

00:14:30,260 --> 00:14:36,260
stable repeater so it's a PMC decision

00:14:34,400 --> 00:14:38,600
and we will take feedback from the

00:14:36,260 --> 00:14:40,459
community as I said before and I will

00:14:38,600 --> 00:14:42,480
quite happily if we have a release

00:14:40,459 --> 00:14:44,070
that's got ten PMC votes

00:14:42,480 --> 00:14:45,540
one user pipes up and says hang on this

00:14:44,070 --> 00:14:47,760
is broken so maybe that's enough to kill

00:14:45,540 --> 00:14:49,019
the release yeah if we stick to the

00:14:47,760 --> 00:14:51,810
Apache rules we don't actually we could

00:14:49,019 --> 00:14:54,660
release it anyway but 99 times out of a

00:14:51,810 --> 00:14:56,820
hundred also gets signed will listen to

00:14:54,660 --> 00:14:59,190
that that's valuable feedback you've

00:14:56,820 --> 00:15:00,690
gone to the trouble of testing it we

00:14:59,190 --> 00:15:06,690
wanted you to test its know-how you've

00:15:00,690 --> 00:15:08,399
told us we're going to listen so yet

00:15:06,690 --> 00:15:10,560
when Tomcat SEVIS end-of-life is a

00:15:08,399 --> 00:15:13,889
little bit of a guessing game at the

00:15:10,560 --> 00:15:17,370
moment so if we go back to the other end

00:15:13,889 --> 00:15:20,910
and Tomcat 10 what do I think might be

00:15:17,370 --> 00:15:22,320
in that for the server expect is fairly

00:15:20,910 --> 00:15:24,060
easy because that's all the stuff that

00:15:22,320 --> 00:15:26,160
got punted out a servlet for that we

00:15:24,060 --> 00:15:30,300
decided we didn't have time to do so

00:15:26,160 --> 00:15:33,300
request cancellation was lucid in HTTP

00:15:30,300 --> 00:15:35,600
to the container knows if the client has

00:15:33,300 --> 00:15:38,100
said I don't want that question anymore

00:15:35,600 --> 00:15:40,560
and potentially we could pass that

00:15:38,100 --> 00:15:43,949
information on to the app via some form

00:15:40,560 --> 00:15:46,110
of listener so there's something there

00:15:43,949 --> 00:15:49,350
that will be discussed for server for

00:15:46,110 --> 00:15:52,019
point next async parameter processing

00:15:49,350 --> 00:15:54,029
you can process request bodies and write

00:15:52,019 --> 00:15:56,220
responsible is using async code but you

00:15:54,029 --> 00:15:57,899
can't actually read form parameters in

00:15:56,220 --> 00:15:59,970
an async manner you have to wait the

00:15:57,899 --> 00:16:01,699
whole body to turn up so that was

00:15:59,970 --> 00:16:04,170
discussed as something we could do and

00:16:01,699 --> 00:16:07,500
overlays goes all the way back to server

00:16:04,170 --> 00:16:10,769
3 and back when people were talking

00:16:07,500 --> 00:16:12,269
about forget what the magic phrase or it

00:16:10,769 --> 00:16:15,660
was something to do with clothes and

00:16:12,269 --> 00:16:17,639
multi-tenancy and there was some lovely

00:16:15,660 --> 00:16:20,480
phrase that was all over Java EE and

00:16:17,639 --> 00:16:24,000
then got forgotten in about six months

00:16:20,480 --> 00:16:26,370
but here the idea is that if you're

00:16:24,000 --> 00:16:27,990
deploying the same app multiple times

00:16:26,370 --> 00:16:29,550
with slight tweaks for different

00:16:27,990 --> 00:16:32,370
customers different departments whatever

00:16:29,550 --> 00:16:34,019
then you can have one common app and

00:16:32,370 --> 00:16:35,670
then you have an overlay for each of

00:16:34,019 --> 00:16:37,410
those customers that have the specific

00:16:35,670 --> 00:16:39,300
customizations for that particular

00:16:37,410 --> 00:16:40,949
deployment and then when you wanted to

00:16:39,300 --> 00:16:43,649
update it you just don't update it the

00:16:40,949 --> 00:16:45,779
master copy and the multiple instances

00:16:43,649 --> 00:16:47,069
all picks up those updates in one go so

00:16:45,779 --> 00:16:49,709
all you had to do was update one war

00:16:47,069 --> 00:16:51,839
leave the overlays alone and updates for

00:16:49,709 --> 00:16:54,350
in that particular scenario were easier

00:16:51,839 --> 00:16:56,510
the good news is all the code

00:16:54,350 --> 00:16:58,400
we need to do that is implemented ready

00:16:56,510 --> 00:17:00,650
to go in Tomcat and have been since

00:16:58,400 --> 00:17:01,970
servlet three because I went and

00:17:00,650 --> 00:17:04,490
implemented it when we thought we were

00:17:01,970 --> 00:17:05,959
doing it and literally the week after

00:17:04,490 --> 00:17:10,040
I'd finished implementing it it got

00:17:05,959 --> 00:17:12,500
dropped from the spec I wasn't overly

00:17:10,040 --> 00:17:14,870
happy but it was actually it was a it

00:17:12,500 --> 00:17:18,290
did have some other side benefits

00:17:14,870 --> 00:17:19,839
because it it forced us to rewrite the

00:17:18,290 --> 00:17:24,020
resources handling that was getting

00:17:19,839 --> 00:17:25,940
incredibly spaghetti-like so it's a lot

00:17:24,020 --> 00:17:28,700
better

00:17:25,940 --> 00:17:30,500
JSP unified expression and Jasmine I'm

00:17:28,700 --> 00:17:31,610
not aware of anything that's

00:17:30,500 --> 00:17:35,620
particularly going to happen so I think

00:17:31,610 --> 00:17:40,580
they'll just be in maintenance WebSocket

00:17:35,620 --> 00:17:43,910
the one big ticket item there is a cast

00:17:40,580 --> 00:17:47,120
and 'red API for WebSocket extensions so

00:17:43,910 --> 00:17:48,590
the minute tom cat has the compression

00:17:47,120 --> 00:17:49,820
extension jesse has a compression

00:17:48,590 --> 00:17:51,710
extension I think they've also got a

00:17:49,820 --> 00:17:53,750
multiplexing extension but they're all

00:17:51,710 --> 00:17:55,550
written to our own internal API you

00:17:53,750 --> 00:17:57,350
can't chop and change them it would be

00:17:55,550 --> 00:17:58,970
nice if there was a standard API for

00:17:57,350 --> 00:18:01,750
extensions that you could then just plug

00:17:58,970 --> 00:18:05,150
in to the WebSocket implementation

00:18:01,750 --> 00:18:07,100
having said that it might not be the

00:18:05,150 --> 00:18:09,200
easiest that API might not be the

00:18:07,100 --> 00:18:11,600
easiest thing to write because to get

00:18:09,200 --> 00:18:13,040
those extensions working efficiently you

00:18:11,600 --> 00:18:15,920
really need to be plugging into some of

00:18:13,040 --> 00:18:17,690
the low-level processing so the write

00:18:15,920 --> 00:18:19,040
API then potentially depends on how

00:18:17,690 --> 00:18:21,410
you've actually done the implementation

00:18:19,040 --> 00:18:23,270
and I just don't know whether we'll be

00:18:21,410 --> 00:18:27,640
able to get to sort of a common agreed

00:18:23,270 --> 00:18:29,960
sensible API amongst all of the

00:18:27,640 --> 00:18:32,900
WebSocket implementers but that's what

00:18:29,960 --> 00:18:35,600
the expert groups thought if it starts

00:18:32,900 --> 00:18:37,070
up again and if it's agreed that

00:18:35,600 --> 00:18:41,080
extensions is the way to go then that's

00:18:37,070 --> 00:18:45,220
what we'd be working on Jack is the

00:18:41,080 --> 00:18:52,780
authorization so yes the authorization

00:18:45,220 --> 00:18:52,780
component or how did we do that

00:18:53,509 --> 00:18:59,580
that what that wasn't my plan right yet

00:18:57,090 --> 00:19:03,259
Jack is the authorization counterpart to

00:18:59,580 --> 00:19:05,849
jazz Peck so that's the Java

00:19:03,259 --> 00:19:08,940
authorization contracts trainers

00:19:05,849 --> 00:19:10,979
I think this has been on my list of

00:19:08,940 --> 00:19:12,629
things to do to look at for a long time

00:19:10,979 --> 00:19:15,090
the main reason for look at wanting to

00:19:12,629 --> 00:19:18,960
look at it is if it provides a standard

00:19:15,090 --> 00:19:21,389
API that apps can then use to do things

00:19:18,960 --> 00:19:23,159
like add users remove users update users

00:19:21,389 --> 00:19:25,649
passwords that would be a useful thing

00:19:23,159 --> 00:19:27,359
to have I don't know whether it does or

00:19:25,649 --> 00:19:29,820
not I want to go and have a look we'll

00:19:27,359 --> 00:19:34,339
see if it does great if it doesn't then

00:19:29,820 --> 00:19:34,339
the usefulness of it becomes rather less

00:19:34,940 --> 00:19:43,259
other things for tomcat 10 this is a

00:19:39,089 --> 00:19:46,409
theory that I have mooted several times

00:19:43,259 --> 00:19:49,279
and it I must stress it in my personal

00:19:46,409 --> 00:19:51,690
thinking it is absolutely in no way

00:19:49,279 --> 00:19:54,719
should be taken as the consensus view of

00:19:51,690 --> 00:19:57,239
the project so thinking goes the main

00:19:54,719 --> 00:19:59,909
reason for having a PR native was that

00:19:57,239 --> 00:20:04,049
you could use open SSL so TLS was a lot

00:19:59,909 --> 00:20:05,399
faster well we don't need the APR native

00:20:04,049 --> 00:20:09,779
connector now because we can integrate

00:20:05,399 --> 00:20:11,549
open SSL with the NI own and IO two

00:20:09,779 --> 00:20:13,769
connectors so potentially we could drop

00:20:11,549 --> 00:20:15,659
a TR native all together now that would

00:20:13,769 --> 00:20:17,489
be a nice thing because there are some

00:20:15,659 --> 00:20:19,259
annoying bugs and a PR native that are

00:20:17,489 --> 00:20:21,419
really difficult to track down and when

00:20:19,259 --> 00:20:25,169
you hit them the JVM crashes it would be

00:20:21,419 --> 00:20:26,789
nice to just make all of that go away so

00:20:25,169 --> 00:20:30,479
oK we've got the paper on native well

00:20:26,789 --> 00:20:33,629
hey I've started to a mental carry on do

00:20:30,479 --> 00:20:35,279
we need n io and n is N and there aren't

00:20:33,629 --> 00:20:37,109
any particular performance differences

00:20:35,279 --> 00:20:39,149
between the two then wander in

00:20:37,109 --> 00:20:41,369
particularly easier to integrate than

00:20:39,149 --> 00:20:43,769
the other if anything n io 2 is a little

00:20:41,369 --> 00:20:45,570
bit more complicated do we still need

00:20:43,769 --> 00:20:47,879
could we just have the ni o connector

00:20:45,570 --> 00:20:50,099
okay

00:20:47,879 --> 00:20:52,309
in anything ever happen with HTTP next

00:20:50,099 --> 00:20:54,359
maybe and discussions are happening

00:20:52,309 --> 00:20:55,589
whether anything will happen in the

00:20:54,359 --> 00:20:59,999
Tomcat tens time frame

00:20:55,589 --> 00:21:02,940
I don't know reactive that's a Rossum

00:20:59,999 --> 00:21:05,860
talks about that yesterday and we talked

00:21:02,940 --> 00:21:08,320
about it more at the Meetup

00:21:05,860 --> 00:21:10,600
tonight there is definately interest

00:21:08,320 --> 00:21:13,330
from people who want to be able to write

00:21:10,600 --> 00:21:15,970
reactive style apps directly to a

00:21:13,330 --> 00:21:17,950
reactive API rather than going via the

00:21:15,970 --> 00:21:19,480
server API because it's a little bit

00:21:17,950 --> 00:21:24,760
clunky

00:21:19,480 --> 00:21:27,700
could we put that in SSI is anybody

00:21:24,760 --> 00:21:29,920
still using server-side includes if I

00:21:27,700 --> 00:21:32,559
drop if we dropped that package would

00:21:29,920 --> 00:21:35,760
anybody even notice that might be a

00:21:32,559 --> 00:21:39,940
question for the users list but I

00:21:35,760 --> 00:21:43,720
suspect it's not that widely used signed

00:21:39,940 --> 00:21:46,809
code on at the minute we sign all of the

00:21:43,720 --> 00:21:48,640
windows we saw the windows install and

00:21:46,809 --> 00:21:50,350
we signed the windows uninstaller so you

00:21:48,640 --> 00:21:54,280
don't get nasty error messages when you

00:21:50,350 --> 00:21:56,080
sort on windows but nobody's actually

00:21:54,280 --> 00:21:58,690
notice what if they haven't complained a

00:21:56,080 --> 00:21:59,740
few releases we haven't signed because

00:21:58,690 --> 00:22:02,650
we're having problems with the code

00:21:59,740 --> 00:22:04,150
signing service so I'm wondering you

00:22:02,650 --> 00:22:07,600
know how much do people actually care

00:22:04,150 --> 00:22:08,140
about that and taking it going the other

00:22:07,600 --> 00:22:10,120
way

00:22:08,140 --> 00:22:14,410
and we have the option that we could

00:22:10,120 --> 00:22:16,390
sign every single jar the only people

00:22:14,410 --> 00:22:17,830
that the only people I know that if you

00:22:16,390 --> 00:22:19,960
sign jars have turned around and said

00:22:17,830 --> 00:22:22,450
that's lovely but it doesn't help us in

00:22:19,960 --> 00:22:24,070
our particular scenario because every

00:22:22,450 --> 00:22:25,360
jar we ship has to be signed with the

00:22:24,070 --> 00:22:26,620
same certificate so we strip out

00:22:25,360 --> 00:22:29,140
anything they do and read it ourselves

00:22:26,620 --> 00:22:31,150
anyway and that's to do with running

00:22:29,140 --> 00:22:39,580
Java in the browser it has to work that

00:22:31,150 --> 00:22:41,460
way so maybe if we talk about more sort

00:22:39,580 --> 00:22:43,690
of project development to type things

00:22:41,460 --> 00:22:47,650
moving to get I think is just a matter

00:22:43,690 --> 00:22:49,210
of time isn't it there was general

00:22:47,650 --> 00:22:51,220
consensus amongst the developers

00:22:49,210 --> 00:22:53,799
probably about a year ago that yes we

00:22:51,220 --> 00:22:56,890
want to move to get it just needs

00:22:53,799 --> 00:22:59,470
somebody to find the time to run through

00:22:56,890 --> 00:23:01,179
the process make sure it works and find

00:22:59,470 --> 00:23:02,590
some answers to some of our Sdn

00:23:01,179 --> 00:23:07,540
integration questions but I think it's

00:23:02,590 --> 00:23:10,030
all doable so that I think is going to

00:23:07,540 --> 00:23:11,669
happen at some point and periodically we

00:23:10,030 --> 00:23:14,280
get asked to be able to move to maven

00:23:11,669 --> 00:23:16,570
this came up again over lunch today

00:23:14,280 --> 00:23:19,250
again this is a personal view I think

00:23:16,570 --> 00:23:23,450
maven is unlike

00:23:19,250 --> 00:23:27,320
I think there there are always costs

00:23:23,450 --> 00:23:31,240
associated with with that change and I

00:23:27,320 --> 00:23:33,770
haven't yet seen anybody articulate

00:23:31,240 --> 00:23:36,950
benefits sufficient to justify the

00:23:33,770 --> 00:23:40,910
associated costs moving to something

00:23:36,950 --> 00:23:42,380
that isn't ant but that I could believe

00:23:40,910 --> 00:23:43,940
would happen if a compelling argument

00:23:42,380 --> 00:23:44,870
came fall into something that if

00:23:43,940 --> 00:23:47,890
somebody could come up with a compelling

00:23:44,870 --> 00:23:49,490
argument for maven I think we move I

00:23:47,890 --> 00:23:51,800
personally think it's fairly unlikely

00:23:49,490 --> 00:23:53,990
that that was happened given where the

00:23:51,800 --> 00:23:56,300
community is at the moment something

00:23:53,990 --> 00:23:57,890
other than that quite possibly great a

00:23:56,300 --> 00:24:04,490
lot mooted at lunchtime I think about

00:23:57,890 --> 00:24:09,460
that that could happen maybe Chris I'm

00:24:04,490 --> 00:24:09,460
done weird Bacchus gone

00:24:27,680 --> 00:24:33,720
yes I point Janice 1.3 that should be in

00:24:30,720 --> 00:24:37,220
this also interesting maybe not

00:24:33,720 --> 00:24:42,030
personally doing it but if somebody is

00:24:37,220 --> 00:24:53,370
motivated to see if they get our net

00:24:42,030 --> 00:25:00,810
worth theoretically the odds are it's

00:24:53,370 --> 00:25:03,780
going to require some that sounds like a

00:25:00,810 --> 00:25:05,400
job for Rana tonight and his his area of

00:25:03,780 --> 00:25:07,650
expertise is certainly not mine but if

00:25:05,400 --> 00:25:09,000
there's anybody in the room or you know

00:25:07,650 --> 00:25:11,040
anybody that's interested in it then

00:25:09,000 --> 00:25:12,600
yeah happily if there's a patch to do

00:25:11,040 --> 00:25:18,420
that we can build with like a half we

00:25:12,600 --> 00:25:22,230
take it so other things that are being

00:25:18,420 --> 00:25:24,380
talked about possibly some form of

00:25:22,230 --> 00:25:27,690
community based on cat training course

00:25:24,380 --> 00:25:29,850
I've managed to persuade my employer to

00:25:27,690 --> 00:25:31,530
donate their old Tomcat training

00:25:29,850 --> 00:25:33,540
material it's a bit out of date but it's

00:25:31,530 --> 00:25:36,360
possible starting point somebody else

00:25:33,540 --> 00:25:37,830
has indicated on the via the wiki that

00:25:36,360 --> 00:25:39,510
they've been in a similar situation

00:25:37,830 --> 00:25:41,700
they've got some material they might be

00:25:39,510 --> 00:25:44,430
able to contribute the idea is that we

00:25:41,700 --> 00:25:45,780
put together an outline of the course on

00:25:44,430 --> 00:25:47,820
the user's they fit like we did for this

00:25:45,780 --> 00:25:49,770
conference and then put together a bunch

00:25:47,820 --> 00:25:51,210
of modules that you could then pick and

00:25:49,770 --> 00:25:53,310
choose from to build a training course

00:25:51,210 --> 00:25:54,780
and then community members could then

00:25:53,310 --> 00:25:56,640
give that training course whether it's

00:25:54,780 --> 00:25:57,840
committers or or anybody it will be it

00:25:56,640 --> 00:25:59,880
will be there and we could potentially

00:25:57,840 --> 00:26:01,020
do webinars on individual modules that

00:25:59,880 --> 00:26:01,950
there are all sorts of things we could

00:26:01,020 --> 00:26:05,700
do with it but there would be this

00:26:01,950 --> 00:26:07,320
community training resource I'd like to

00:26:05,700 --> 00:26:09,720
do try this and more things with user

00:26:07,320 --> 00:26:12,570
groups and meetups but these tend to be

00:26:09,720 --> 00:26:14,940
local things so this is something you'd

00:26:12,570 --> 00:26:16,410
like to see in your area speak up feel

00:26:14,940 --> 00:26:18,660
free to use the users list to try and

00:26:16,410 --> 00:26:19,980
organize it feel free to use the use of

00:26:18,660 --> 00:26:21,720
this to try and badger at least one

00:26:19,980 --> 00:26:24,090
committer to turn up to if you'd like

00:26:21,720 --> 00:26:25,440
them to feel free to use the using this

00:26:24,090 --> 00:26:26,460
to tell the committers to stay the heck

00:26:25,440 --> 00:26:29,790
away

00:26:26,460 --> 00:26:31,200
as as you wish but getting the community

00:26:29,790 --> 00:26:33,450
get together having those neat ups I

00:26:31,200 --> 00:26:35,070
think is a useful thing to do please

00:26:33,450 --> 00:26:36,330
take advantage of the community

00:26:35,070 --> 00:26:38,430
resources it says anything the

00:26:36,330 --> 00:26:43,190
foundation can do to help let us know

00:26:38,430 --> 00:26:43,190
what it is we will do our best

00:26:43,230 --> 00:26:46,770
other things there's plenty of

00:26:44,850 --> 00:26:49,830
opportunity to get involved and just

00:26:46,770 --> 00:26:52,890
talked about training course the meetups

00:26:49,830 --> 00:26:54,690
it isn't just bug fixing the website is

00:26:52,890 --> 00:26:58,710
desperately in need of an overhaul and

00:26:54,690 --> 00:26:59,970
has been for a while if you want if you

00:26:58,710 --> 00:27:02,580
want to help with that please do

00:26:59,970 --> 00:27:05,580
documentation help just simply cleaning

00:27:02,580 --> 00:27:06,960
up the code and there are lots of areas

00:27:05,580 --> 00:27:08,010
indicated where it's just somebody going

00:27:06,960 --> 00:27:10,980
through and doing a bit of cleanup would

00:27:08,010 --> 00:27:15,150
actually be a big help so you don't have

00:27:10,980 --> 00:27:18,150
to fix the big nasty complicated bug we

00:27:15,150 --> 00:27:19,590
do try and leave the simpler bugs open

00:27:18,150 --> 00:27:20,880
for a while to give people a chance but

00:27:19,590 --> 00:27:22,650
want to get involved to pick them up and

00:27:20,880 --> 00:27:24,540
run with them if you'd like to give it a

00:27:22,650 --> 00:27:26,070
go and you want to ask some housing your

00:27:24,540 --> 00:27:28,410
where should I start with this what do I

00:27:26,070 --> 00:27:29,670
need to look at then feel free to ask on

00:27:28,410 --> 00:27:32,280
the dev list will happily give you

00:27:29,670 --> 00:27:35,420
pointers about what to set up where to

00:27:32,280 --> 00:27:35,420
look how to go about it

00:27:41,120 --> 00:27:47,669
possibly yes yes okay yeah we could do

00:27:45,509 --> 00:27:51,059
that that and yes because it is a

00:27:47,669 --> 00:27:52,620
support tag so and that the is some ways

00:27:51,059 --> 00:27:54,330
one of the good things about some guy

00:27:52,620 --> 00:27:56,340
she causes us problems there in that

00:27:54,330 --> 00:27:58,320
because I like to go and close all the

00:27:56,340 --> 00:28:00,330
open bugs before release then the

00:27:58,320 --> 00:28:03,210
low-hanging fruit doesn't hang around so

00:28:00,330 --> 00:28:05,539
very long it's almost worth considering

00:28:03,210 --> 00:28:20,600
leaving the low-hanging fruit for longer

00:28:05,539 --> 00:28:20,600
but then it's a trade off so yeah yeah

00:28:25,279 --> 00:28:33,269
cool cool and if not we've got enough

00:28:31,559 --> 00:28:36,539
uglier items on the project credits so

00:28:33,269 --> 00:28:38,940
cool okay so that brings me to the end

00:28:36,539 --> 00:28:50,509
of what I wanted to talk about any more

00:28:38,940 --> 00:28:50,509
questions right yes how

00:28:51,530 --> 00:29:06,950
I walk almost I've the only that the

00:29:02,060 --> 00:29:09,200
only difference is will be things like

00:29:06,950 --> 00:29:11,060
Tomcat 9 doesn't send the reason phrase

00:29:09,200 --> 00:29:14,540
and doesn't give you an option to send

00:29:11,060 --> 00:29:17,660
the reason phrase the option to have the

00:29:14,540 --> 00:29:19,760
request line validation be a little more

00:29:17,660 --> 00:29:21,710
lenient doesn't exist in nine it forces

00:29:19,760 --> 00:29:22,970
you to expect can flow more select can

00:29:21,710 --> 00:29:24,890
find it's actually still slightly

00:29:22,970 --> 00:29:28,750
lenient and that might get tightened up

00:29:24,890 --> 00:29:30,800
further at some point but otherwise I

00:29:28,750 --> 00:29:32,450
look times I've gone through and I've

00:29:30,800 --> 00:29:33,800
actually done this between 85 and nine

00:29:32,450 --> 00:29:35,390
and copied stuff across just to make

00:29:33,800 --> 00:29:36,920
sure that it means there is their

00:29:35,390 --> 00:29:40,010
instinct as much as they realistically

00:29:36,920 --> 00:29:41,480
can be bar some underlying refactoring

00:29:40,010 --> 00:29:42,770
the public API that's what they do is

00:29:41,480 --> 00:29:48,320
you'd be using the behavior should be

00:29:42,770 --> 00:29:50,390
the same no job right Tomcat nine will

00:29:48,320 --> 00:29:54,440
require Java right Tomcat 8 5 requires

00:29:50,390 --> 00:29:55,220
Java 7 yet that's fine except it all

00:29:54,440 --> 00:29:56,990
later all right

00:29:55,220 --> 00:29:58,550
yeah it's always all it's always all

00:29:56,990 --> 00:30:05,050
eight it's a middle of Java version so

00:29:58,550 --> 00:30:05,050
yeah that will be fine yes

00:30:09,940 --> 00:30:17,830
actually China there are how many

00:30:13,600 --> 00:30:17,830
develop that will

00:30:19,330 --> 00:30:27,879
actually there are volunteers that have

00:30:24,470 --> 00:30:27,879
been translated

00:30:28,520 --> 00:30:49,940
yeah definitely well we'll take it what

00:30:47,120 --> 00:30:51,920
where we would be more than happy to put

00:30:49,940 --> 00:30:55,580
translation translated versions of the

00:30:51,920 --> 00:30:57,790
docs on the website what historically

00:30:55,580 --> 00:31:00,980
what we just need to be careful of is

00:30:57,790 --> 00:31:01,370
obviously we we can't keep them

00:31:00,980 --> 00:31:03,110
up-to-date

00:31:01,370 --> 00:31:06,830
unless we happen to speak the language

00:31:03,110 --> 00:31:08,300
in question which I certainly don't so

00:31:06,830 --> 00:31:11,480
there is an issue of keeping the

00:31:08,300 --> 00:31:13,760
oxidation keeping them in sync but I

00:31:11,480 --> 00:31:15,679
think that there are ways around that

00:31:13,760 --> 00:31:17,090
and part of that a website overhaul

00:31:15,679 --> 00:31:18,890
could perhaps even look at other ways

00:31:17,090 --> 00:31:22,250
that we could we could structure things

00:31:18,890 --> 00:31:24,260
that would handle that better and the

00:31:22,250 --> 00:31:28,130
whole lot sir through HT 3d so in theory

00:31:24,260 --> 00:31:29,480
we could have it also negotiate and pick

00:31:28,130 --> 00:31:32,390
the right language based on the user's

00:31:29,480 --> 00:31:34,190
brains or if we've got it if we wanted

00:31:32,390 --> 00:31:37,070
to be really clever about it but

00:31:34,190 --> 00:31:39,200
certainly as a starting point if it

00:31:37,070 --> 00:31:40,940
exists and it would be useful on the

00:31:39,200 --> 00:31:42,140
website then yeah let's get it on there

00:31:40,940 --> 00:31:44,740
and get it done

00:31:42,140 --> 00:31:44,740
definitely

00:31:48,000 --> 00:31:57,180
anymore in which case thank you very

00:31:53,260 --> 00:31:57,180
much and safe travel home everybody

00:31:57,850 --> 00:32:00,260

YouTube URL: https://www.youtube.com/watch?v=kpJVTp2kfmk


