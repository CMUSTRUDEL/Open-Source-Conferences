Title: Let's Encrypt ActiveMQ and Karaf! - Alexandru Zbarcea
Publication date: 2017-05-18
Playlist: ApacheCon 2017 - Miami
Description: 
	Let's Encrypt ActiveMQ and Karaf! - Alexandru Zbarcea

Security in today's environment is a mandatory, implied feature of any production ready system. Securing a system happens at many levels, starting with the users and securing their identities, securing the endpoint via digital certificates, going all the way to securing backups and audit logs. All this is complemented by managing secrets at scale, updating and revoking certificates at runtime all while maintainging 100% uptime. This talk presents how we used "Let's Encrypt" a Linux Foundation collaborative project to complement ActiveMQ and Karaf security features to implements a secure, production ready messaging service.

About Alexandru Zbarcea
Alex is a senior integration and devops engineer with over 12 years experience mostly in the financial industry. He specializes in implementing and managing distributed applications at scale. In the past few years, Alex developed a passion for continuous delivery pipelines to reduce turnaround from development to production. Alex is an Apache log4cxx committer and contributed to many other opensource projects.
Captions: 
	00:00:00,030 --> 00:00:07,350
so this presentation is about let's

00:00:04,080 --> 00:00:10,769
encrypt and how is going to be applied

00:00:07,350 --> 00:00:14,940
to an infrastructure of messaging

00:00:10,769 --> 00:00:18,800
brokers based on active and queue which

00:00:14,940 --> 00:00:18,800
are deployed in corrupt containers

00:00:22,380 --> 00:00:28,890
um first a little bit about me I'm Alex

00:00:28,170 --> 00:00:32,450
Bart ow

00:00:28,890 --> 00:00:35,430
I'm an Apache commuter I have

00:00:32,450 --> 00:00:37,320
contributions to patchy logging but

00:00:35,430 --> 00:00:41,700
mostly I have contributions to other

00:00:37,320 --> 00:00:49,770
open-source technologies like Jenkins or

00:00:41,700 --> 00:00:52,190
gate I'm here to talk from the

00:00:49,770 --> 00:00:57,449
operations perspective of managing

00:00:52,190 --> 00:01:00,800
activemq infrastructure and I hope you

00:00:57,449 --> 00:01:02,940
will find the information useful a

00:01:00,800 --> 00:01:06,360
little bit about the context and the

00:01:02,940 --> 00:01:09,570
problem definition if you have been to

00:01:06,360 --> 00:01:14,909
the previous sessions you probably heard

00:01:09,570 --> 00:01:17,840
this already it's about a way to scale

00:01:14,909 --> 00:01:21,770
an active and cue messaging

00:01:17,840 --> 00:01:25,549
infrastructure and have multiple

00:01:21,770 --> 00:01:27,659
networks integrated in a way that

00:01:25,549 --> 00:01:34,110
management of this infrastructure is

00:01:27,659 --> 00:01:38,820
done seamless I'm going to talk more

00:01:34,110 --> 00:01:41,009
lately about the different broker but

00:01:38,820 --> 00:01:47,420
the main feature of this infrastructure

00:01:41,009 --> 00:01:47,420
was to be secure at first

00:01:48,270 --> 00:01:54,470
we gather a lot of requirements from

00:01:51,510 --> 00:01:57,630
previous customers and we wanted to have

00:01:54,470 --> 00:02:00,080
like best practices of how to deploy

00:01:57,630 --> 00:02:02,550
this type of infrastructure and it

00:02:00,080 --> 00:02:08,990
started modeled as a playground and

00:02:02,550 --> 00:02:08,990
eventually grew into multi and

00:02:09,739 --> 00:02:17,340
configuration of active and cute that

00:02:12,600 --> 00:02:22,530
was also scalable and highly secure we

00:02:17,340 --> 00:02:26,280
focused also on governance of the queues

00:02:22,530 --> 00:02:29,580
and and topics to be able to have

00:02:26,280 --> 00:02:31,380
multiple applications being able to talk

00:02:29,580 --> 00:02:34,140
to each other that the biggest problem

00:02:31,380 --> 00:02:36,630
that we saw was not on the first

00:02:34,140 --> 00:02:39,739
deployment of an agency infrastructure

00:02:36,630 --> 00:02:42,030
but was more on the maintenance

00:02:39,739 --> 00:02:44,730
different teams produced different

00:02:42,030 --> 00:02:47,640
applications and most of the time when

00:02:44,730 --> 00:02:50,100
they need to install a new version of

00:02:47,640 --> 00:02:52,620
the application they will reinstall the

00:02:50,100 --> 00:02:54,540
whole broker suite or they log the

00:02:52,620 --> 00:02:58,260
brokers related to an application and

00:02:54,540 --> 00:03:00,390
it's very hard at least in a big company

00:02:58,260 --> 00:03:02,970
where you have multiple teams developing

00:03:00,390 --> 00:03:07,680
multiple apps to be able even to talk to

00:03:02,970 --> 00:03:10,019
each other or even ugly so we saw that

00:03:07,680 --> 00:03:17,400
the biggest concern are actually related

00:03:10,019 --> 00:03:19,590
to configuration patches and then when

00:03:17,400 --> 00:03:21,900
we realize that we have a lot of brokers

00:03:19,590 --> 00:03:24,930
we have to think about topology and how

00:03:21,900 --> 00:03:28,430
to make it reliable they're in excellent

00:03:24,930 --> 00:03:32,430
queue there are mainly two types of

00:03:28,430 --> 00:03:36,670
liabilities active passive

00:03:32,430 --> 00:03:43,260
active-active which is moulting master

00:03:36,670 --> 00:03:50,410
or master slave we chose the later one

00:03:43,260 --> 00:03:55,090
monkey master and this is because we saw

00:03:50,410 --> 00:03:58,170
that our infrastructure being large and

00:03:55,090 --> 00:04:02,980
addresses multiple availability zones

00:03:58,170 --> 00:04:07,750
you need fail that failover between

00:04:02,980 --> 00:04:12,010
between all those so get into the

00:04:07,750 --> 00:04:14,560
operations part of it today the

00:04:12,010 --> 00:04:21,090
technology trends are towards micro

00:04:14,560 --> 00:04:23,710
services which try to make small

00:04:21,090 --> 00:04:26,950
application smooth deployment as a

00:04:23,710 --> 00:04:30,340
consequence but many of them so you

00:04:26,950 --> 00:04:34,990
manage them independently and their

00:04:30,340 --> 00:04:36,970
upgrades are less riskier all the

00:04:34,990 --> 00:04:38,800
operational aspects actually are related

00:04:36,970 --> 00:04:41,020
more to risk management and to the

00:04:38,800 --> 00:04:44,070
business side then to technological side

00:04:41,020 --> 00:04:46,120
so when we talk about a large academic

00:04:44,070 --> 00:04:49,150
infrastructure to talk about more about

00:04:46,120 --> 00:04:55,630
risk management the DevOps principles

00:04:49,150 --> 00:04:59,979
were incorporating development behavior

00:04:55,630 --> 00:05:02,080
like versioning your code into

00:04:59,979 --> 00:05:06,160
operations meaning versioning your

00:05:02,080 --> 00:05:09,460
infrastructure now and being able to

00:05:06,160 --> 00:05:13,180
work together and both teams development

00:05:09,460 --> 00:05:17,039
operations feel the same pain continued

00:05:13,180 --> 00:05:19,419
delivery relied more on on continuous

00:05:17,039 --> 00:05:22,000
packaging and delivering the application

00:05:19,419 --> 00:05:24,880
and having the ability to have the

00:05:22,000 --> 00:05:28,870
feedback loop from the operation side

00:05:24,880 --> 00:05:31,770
vector to development people when they

00:05:28,870 --> 00:05:34,570
talk about clouds they usually refer to

00:05:31,770 --> 00:05:36,610
having the capability to request

00:05:34,570 --> 00:05:41,199
resources on demand so related

00:05:36,610 --> 00:05:46,210
to ActiveMQ on in our problem statement

00:05:41,199 --> 00:05:48,879
we said that it's normal to just request

00:05:46,210 --> 00:05:54,400
a new broker on demand or demand based

00:05:48,879 --> 00:05:57,849
on load or based on on health so these

00:05:54,400 --> 00:06:00,069
are the aspects that define the

00:05:57,849 --> 00:06:03,009
construction in operations you need to

00:06:00,069 --> 00:06:05,050
have high velocity and with more driven

00:06:03,009 --> 00:06:13,110
by business because any code that's

00:06:05,050 --> 00:06:17,469
nothing in production is basically waste

00:06:13,110 --> 00:06:19,029
consistency is when you manage an

00:06:17,469 --> 00:06:21,069
infrastructure you cannot have a lot of

00:06:19,029 --> 00:06:22,870
complexity you cannot manage each

00:06:21,069 --> 00:06:25,060
service in a different way so you need

00:06:22,870 --> 00:06:30,490
to have a consistent way of managing all

00:06:25,060 --> 00:06:33,069
the all the brokers in this case that's

00:06:30,490 --> 00:06:36,250
why most of the clients that we saw have

00:06:33,069 --> 00:06:38,259
the same broker configuration or the

00:06:36,250 --> 00:06:44,699
brokers behaving in the same way

00:06:38,259 --> 00:06:47,560
although we saw that the reason need for

00:06:44,699 --> 00:06:50,490
brokers to have different behavior I

00:06:47,560 --> 00:06:57,930
will talk a little bit later about this

00:06:50,490 --> 00:07:00,250
scaling so another requirement was

00:06:57,930 --> 00:07:03,819
because everything was built on the

00:07:00,250 --> 00:07:06,610
cloud to be able to scale out anytime

00:07:03,819 --> 00:07:08,379
you want on-demand to create new brokers

00:07:06,610 --> 00:07:10,810
that automatically interconnects with

00:07:08,379 --> 00:07:15,159
the other brokers and and so the network

00:07:10,810 --> 00:07:19,569
of workers grows and the main topic of

00:07:15,159 --> 00:07:22,870
this presentation is about securing and

00:07:19,569 --> 00:07:26,529
how when you bring the new broker online

00:07:22,870 --> 00:07:28,250
you can qualify that that broker is the

00:07:26,529 --> 00:07:34,110
right broker to talk

00:07:28,250 --> 00:07:37,289
so for the solution we choose two

00:07:34,110 --> 00:07:40,199
containers the craft container and the

00:07:37,289 --> 00:07:41,370
docker container any containers what we

00:07:40,199 --> 00:07:43,650
do first you go first

00:07:41,370 --> 00:07:46,530
isolation failover and scalability

00:07:43,650 --> 00:07:49,229
usually that those are the main reasons

00:07:46,530 --> 00:07:53,280
for for any containerization solution

00:07:49,229 --> 00:07:55,440
but people when they talk infrastructure

00:07:53,280 --> 00:07:58,919
well wouldn't docker solve all the

00:07:55,440 --> 00:08:02,069
problems well it kind of doesn't because

00:07:58,919 --> 00:08:05,280
when we saw the infrastructure with

00:08:02,069 --> 00:08:07,110
different types of brokers we understood

00:08:05,280 --> 00:08:09,509
that we have not only a problem of

00:08:07,110 --> 00:08:12,270
structure but we have also a problem of

00:08:09,509 --> 00:08:15,409
the behavior of the system that we have

00:08:12,270 --> 00:08:19,860
to manage both of them and docker

00:08:15,409 --> 00:08:24,210
infrastructure they do not manage the

00:08:19,860 --> 00:08:26,460
behavior they manage more the the

00:08:24,210 --> 00:08:31,979
structure of it of how many containers

00:08:26,460 --> 00:08:37,709
you can spin or it's very limited the

00:08:31,979 --> 00:08:40,200
the behavioral effort so you can change

00:08:37,709 --> 00:08:42,089
how elective and queue brokers behave by

00:08:40,200 --> 00:08:45,500
changing this configuration and craft

00:08:42,089 --> 00:08:49,130
provided these hard deployment where

00:08:45,500 --> 00:08:51,779
features and considerations can be

00:08:49,130 --> 00:08:54,959
updated on the fly and you can change

00:08:51,779 --> 00:08:58,940
the behavior of the broker without need

00:08:54,959 --> 00:09:02,690
to bring down the program

00:08:58,940 --> 00:09:06,100
it offers also advanced logging with the

00:09:02,690 --> 00:09:11,660
canter it integrates with elastic search

00:09:06,100 --> 00:09:14,990
the dynamic configuration you can also

00:09:11,660 --> 00:09:18,769
change it remotely either through SSH or

00:09:14,990 --> 00:09:22,449
through the edge between URL and you

00:09:18,769 --> 00:09:26,240
have secure framers through through jazz

00:09:22,449 --> 00:09:31,970
now docker containers are offer a

00:09:26,240 --> 00:09:36,190
different aspect of the advantages is

00:09:31,970 --> 00:09:36,190
invested there are more related to

00:09:36,759 --> 00:09:42,610
standardization and bring in consistency

00:09:39,920 --> 00:09:46,850
to your infrastructure

00:09:42,610 --> 00:09:50,180
it also offers load balancing but in

00:09:46,850 --> 00:09:52,459
this case we use the failover effective

00:09:50,180 --> 00:09:54,560
and queue so forth exactly it's going to

00:09:52,459 --> 00:09:58,160
brokers within need but we need load

00:09:54,560 --> 00:10:00,560
balancing for a special type of service

00:09:58,160 --> 00:10:04,130
which be the central configuration of

00:10:00,560 --> 00:10:06,949
the exocomp you brokers

00:10:04,130 --> 00:10:10,160
it offers how to scaling the on demand

00:10:06,949 --> 00:10:12,199
and also you have versioning of the

00:10:10,160 --> 00:10:16,069
images and versioning of the containers

00:10:12,199 --> 00:10:19,730
and probably the most important aspect

00:10:16,069 --> 00:10:24,319
that we choose dr. for was to easily

00:10:19,730 --> 00:10:25,519
upgrade the patches or do a so one of

00:10:24,319 --> 00:10:28,699
the things that we saw in the

00:10:25,519 --> 00:10:30,470
infrastructure that we configured that

00:10:28,699 --> 00:10:32,750
people when they deploy the brokers they

00:10:30,470 --> 00:10:34,339
don't touch them if the team that

00:10:32,750 --> 00:10:35,930
developed the application leaves or

00:10:34,339 --> 00:10:38,630
something happens that knowledge

00:10:35,930 --> 00:10:40,550
completely gets lost some other

00:10:38,630 --> 00:10:42,350
application comes with a different

00:10:40,550 --> 00:10:45,050
configuration that usually do not want

00:10:42,350 --> 00:10:50,240
to interconnect because of the risk of

00:10:45,050 --> 00:10:55,420
something fails so patch or or new

00:10:50,240 --> 00:10:55,420
upgrades are very difficult in current

00:10:56,180 --> 00:11:04,740
this is the cross architecture and few

00:11:01,319 --> 00:11:07,769
of the reasons we took it I want to in

00:11:04,740 --> 00:11:11,540
face that docker doesn't solve all the

00:11:07,769 --> 00:11:13,740
problems you need for different layer of

00:11:11,540 --> 00:11:17,160
containerization you have different

00:11:13,740 --> 00:11:19,769
aspects that you need to manage or take

00:11:17,160 --> 00:11:22,620
into consideration I always like the

00:11:19,769 --> 00:11:25,560
analogy that in a container you usually

00:11:22,620 --> 00:11:30,019
do not have the merchandise as it is for

00:11:25,560 --> 00:11:34,350
example if you have to transfer some

00:11:30,019 --> 00:11:36,600
wine the wines were being crates and the

00:11:34,350 --> 00:11:41,750
crates will be in the container you do

00:11:36,600 --> 00:11:41,750
not have just the wine in a container

00:11:42,259 --> 00:11:51,899
getting back to our problem definition

00:11:45,860 --> 00:11:56,149
we realize that we have a different life

00:11:51,899 --> 00:11:59,279
cycle for different types of brokers and

00:11:56,149 --> 00:12:04,949
as I said in current configurations

00:11:59,279 --> 00:12:09,790
brokers have a long life cycle they last

00:12:04,949 --> 00:12:12,269
for four years and

00:12:09,790 --> 00:12:15,329
[Music]

00:12:12,269 --> 00:12:19,290
we saw that the best approach is

00:12:15,329 --> 00:12:22,889
actually to try to limit the lifecycle

00:12:19,290 --> 00:12:27,569
and I will explain the reasons why when

00:12:22,889 --> 00:12:30,149
you have a new broker spinning up you

00:12:27,569 --> 00:12:33,449
need to be able to to trust the

00:12:30,149 --> 00:12:37,889
communication with that broker and the

00:12:33,449 --> 00:12:43,019
best way is to use a https TLS

00:12:37,889 --> 00:12:48,420
certificate and in order to provide that

00:12:43,019 --> 00:12:53,670
certificate you need a CA most companies

00:12:48,420 --> 00:12:57,899
deploy their own CA and other companies

00:12:53,670 --> 00:13:00,420
that are not so experienced they have so

00:12:57,899 --> 00:13:01,860
signed certificate for the CA or for

00:13:00,420 --> 00:13:05,040
their intermediate CA

00:13:01,860 --> 00:13:07,759
meaning that now the brokers would need

00:13:05,040 --> 00:13:11,910
to have a different configuration and

00:13:07,759 --> 00:13:15,449
every time you deploying a broker you

00:13:11,910 --> 00:13:17,999
need to accept that certificate you need

00:13:15,449 --> 00:13:20,040
to talk with the CA the result

00:13:17,999 --> 00:13:22,709
communication there and it's impossible

00:13:20,040 --> 00:13:27,079
to manage so sign certificates at scale

00:13:22,709 --> 00:13:31,410
even when you have a CA in the

00:13:27,079 --> 00:13:35,600
corporation and it is trusted there are

00:13:31,410 --> 00:13:39,480
constraints to to interoperate using

00:13:35,600 --> 00:13:43,829
wildcards CA is not costly efficient if

00:13:39,480 --> 00:13:46,439
you use a trusted CA or trust with

00:13:43,829 --> 00:13:52,589
intermediate get to thousands of of

00:13:46,439 --> 00:13:53,410
dollars at least so that's why we took a

00:13:52,589 --> 00:13:58,480
look

00:13:53,410 --> 00:14:00,490
- lets in quick so we understood that

00:13:58,480 --> 00:14:04,120
some brokers are a little bit

00:14:00,490 --> 00:14:06,220
long-lasting at the edges where clients

00:14:04,120 --> 00:14:08,889
connect - but we understand the Sun

00:14:06,220 --> 00:14:11,649
broker saw can be optimized in terms of

00:14:08,889 --> 00:14:13,689
storage for persistence they manage the

00:14:11,649 --> 00:14:17,319
advisory so they can manage the route in

00:14:13,689 --> 00:14:22,720
the failover they can have processing

00:14:17,319 --> 00:14:26,050
and so on so then we are talking about

00:14:22,720 --> 00:14:28,540
two layers of orchestration why it's for

00:14:26,050 --> 00:14:34,569
docker containers itself and the other

00:14:28,540 --> 00:14:42,449
is for the arm ActiveMQ or or carafe

00:14:34,569 --> 00:14:46,420
depends on how you want it um but these

00:14:42,449 --> 00:14:50,290
have two responsibilities one the dock

00:14:46,420 --> 00:14:52,540
one is for orchestrating the structure

00:14:50,290 --> 00:14:57,880
and the availability of brokers in

00:14:52,540 --> 00:15:02,649
different regions failover for different

00:14:57,880 --> 00:15:06,370
data centers or clusters and the active

00:15:02,649 --> 00:15:08,709
and queues central or distributed and

00:15:06,370 --> 00:15:13,389
central configuration would be more for

00:15:08,709 --> 00:15:19,569
the behavior of the brokers itself also

00:15:13,389 --> 00:15:26,889
it allows us to have a topology that is

00:15:19,569 --> 00:15:29,190
reactive to load or to health of the

00:15:26,889 --> 00:15:34,509
whole system

00:15:29,190 --> 00:15:36,100
so this is how we started to take a deep

00:15:34,509 --> 00:15:38,440
dive into lettin creep let's increase

00:15:36,100 --> 00:15:41,740
study at the project in 2012 but it

00:15:38,440 --> 00:15:46,240
eventually became available only last

00:15:41,740 --> 00:15:50,100
year about a year ago it is now a

00:15:46,240 --> 00:15:54,310
project under aliens foundation umbrella

00:15:50,100 --> 00:15:56,740
it's a standard that is a draft is in

00:15:54,310 --> 00:16:00,639
progress it is considered to be released

00:15:56,740 --> 00:16:03,630
in September this year and although it

00:16:00,639 --> 00:16:08,459
is a draft on let's encrypt is also a

00:16:03,630 --> 00:16:16,740
service that is available in April so it

00:16:08,459 --> 00:16:20,440
works pretty stable it provides free arm

00:16:16,740 --> 00:16:29,290
TLS certificates free as in every year

00:16:20,440 --> 00:16:31,240
and it has a little bit more about just

00:16:29,290 --> 00:16:33,370
generating the certificate it has also a

00:16:31,240 --> 00:16:35,410
way to integrate with your current

00:16:33,370 --> 00:16:40,720
infrastructure and ultimate your process

00:16:35,410 --> 00:16:46,389
and it relates to your TLS generation

00:16:40,720 --> 00:16:48,610
process so first client was a third pod

00:16:46,389 --> 00:16:54,250
it used to be part of the elect and

00:16:48,610 --> 00:16:57,519
click now it's taken out but it's still

00:16:54,250 --> 00:17:01,120
the default and recommended client for

00:16:57,519 --> 00:17:03,490
for let's encrypt it doesn't let's

00:17:01,120 --> 00:17:05,260
encrypt doesn't allow wildcards is very

00:17:03,490 --> 00:17:08,260
important to understand that you will

00:17:05,260 --> 00:17:08,809
not be able to get intermediate thing

00:17:08,260 --> 00:17:10,399
and

00:17:08,809 --> 00:17:12,980
and from that moment on generate your

00:17:10,399 --> 00:17:15,529
own certificate every time you need a

00:17:12,980 --> 00:17:23,899
certificate for domain or subdomain you

00:17:15,529 --> 00:17:27,439
need to talk to let's encrypt and let

00:17:23,899 --> 00:17:30,679
the method manages both the creation

00:17:27,439 --> 00:17:34,249
renewal and revocation of of a

00:17:30,679 --> 00:17:42,080
certificate it follows a protocol is

00:17:34,249 --> 00:17:43,840
called Agni is the first arm of many

00:17:42,080 --> 00:17:47,690
certificate arm

00:17:43,840 --> 00:17:51,649
management environment and the basic

00:17:47,690 --> 00:17:53,899
idea behind it is that when you request

00:17:51,649 --> 00:17:55,730
a certificate usually the company that

00:17:53,899 --> 00:17:59,090
gives you the certificate also validates

00:17:55,730 --> 00:18:00,110
that your company is a true company you

00:17:59,090 --> 00:18:01,879
have the right address

00:18:00,110 --> 00:18:03,980
in this case they cannot validate more

00:18:01,879 --> 00:18:09,610
than the fact that you own the DNS

00:18:03,980 --> 00:18:12,350
server so DNS server becomes a very

00:18:09,610 --> 00:18:15,830
common operations point of view as a

00:18:12,350 --> 00:18:18,379
constraint it is a critical system so

00:18:15,830 --> 00:18:22,730
you need to take care of the security

00:18:18,379 --> 00:18:27,759
how to manage the DNS so the excess tape

00:18:22,730 --> 00:18:27,759
is not tampered with

00:18:28,530 --> 00:18:39,230
so let's encrypt validates that you own

00:18:33,420 --> 00:18:39,230
the BNs and the way how it works is you

00:18:39,950 --> 00:18:45,960
create a request to let encrypt they ask

00:18:43,200 --> 00:18:48,060
you to provide the token on the DMS they

00:18:45,960 --> 00:18:52,200
validate the token is there and say

00:18:48,060 --> 00:18:53,970
hooray you have the access to DNS oh

00:18:52,200 --> 00:18:57,150
please here's the let's encrypt the

00:18:53,970 --> 00:19:00,480
default presentations and configurations

00:18:57,150 --> 00:19:07,650
that you might see is about integration

00:19:00,480 --> 00:19:09,300
with apache or nginx or web root or

00:19:07,650 --> 00:19:12,660
standalone what those means is that you

00:19:09,300 --> 00:19:19,530
need to have a long-running process like

00:19:12,660 --> 00:19:22,140
a web web server where let's encrypt

00:19:19,530 --> 00:19:26,880
will issue the request to make sure that

00:19:22,140 --> 00:19:28,410
you also own the server so the you make

00:19:26,880 --> 00:19:30,930
a request to that and create the Latin

00:19:28,410 --> 00:19:33,690
clip says here is the nonsense and

00:19:30,930 --> 00:19:36,660
please sign these nouns with your key

00:19:33,690 --> 00:19:38,310
and put it somewhere on a web server

00:19:36,660 --> 00:19:41,010
you put it on somewhere and then let's

00:19:38,310 --> 00:19:44,400
encrypt based on the DNS goes to your

00:19:41,010 --> 00:19:47,910
server not based on IP based on DNS and

00:19:44,400 --> 00:19:51,090
then checks rivers Guinness was as well

00:19:47,910 --> 00:19:53,670
that you own that server and if you've

00:19:51,090 --> 00:19:55,290
been to some presentations hearing at a

00:19:53,670 --> 00:19:57,090
Chacon they talk only about those

00:19:55,290 --> 00:19:59,520
scenarios I find those scenarios

00:19:57,090 --> 00:20:01,620
actually to be less useful when you

00:19:59,520 --> 00:20:03,690
ultimate the infrastructure the most

00:20:01,620 --> 00:20:06,060
useful is actually the manual one and

00:20:03,690 --> 00:20:11,730
you many one I would have called

00:20:06,060 --> 00:20:12,680
automatic one but instead of using the

00:20:11,730 --> 00:20:16,820
DNS

00:20:12,680 --> 00:20:18,500
ay-ay-ay or cname records it uses the

00:20:16,820 --> 00:20:21,780
text entries

00:20:18,500 --> 00:20:24,390
meaning that you can issue a certificate

00:20:21,780 --> 00:20:28,250
without needing even to have a server

00:20:24,390 --> 00:20:28,250
and that's what I'm going to present

00:20:28,500 --> 00:20:41,790
so in manual plug-in I would say the DNS

00:20:36,720 --> 00:20:48,710
and DNS one acne protocol and goes like

00:20:41,790 --> 00:20:52,740
this you have a a script or a program

00:20:48,710 --> 00:20:55,620
that means to manage your or your TLS

00:20:52,740 --> 00:20:57,570
certificates and you make a request to

00:20:55,620 --> 00:20:59,940
let's encrypt and let's encrypt says

00:20:57,570 --> 00:21:04,050
okay please prove that you're authorized

00:20:59,940 --> 00:21:07,680
to do this put this token in your DNS

00:21:04,050 --> 00:21:14,460
text records and sign it with your

00:21:07,680 --> 00:21:18,150
wizard and you provision that DNS text

00:21:14,460 --> 00:21:21,930
record and then let's encrypt will

00:21:18,150 --> 00:21:24,780
validate only against the DNS provider

00:21:21,930 --> 00:21:28,440
so in this case you do not need to have

00:21:24,780 --> 00:21:31,290
a web server at all and you can generate

00:21:28,440 --> 00:21:34,740
as many certificates as you want even if

00:21:31,290 --> 00:21:36,600
you do not have the servers online this

00:21:34,740 --> 00:21:38,870
is very useful for few reasons one is

00:21:36,600 --> 00:21:41,790
that you can provision certificates

00:21:38,870 --> 00:21:44,700
before you even have the service

00:21:41,790 --> 00:21:49,680
available as a consequence when you have

00:21:44,700 --> 00:21:52,320
the ActiveMQ brokers life you can

00:21:49,680 --> 00:21:55,790
provision the certificate without

00:21:52,320 --> 00:21:59,780
needing to have a process even on that

00:21:55,790 --> 00:22:03,330
infrastructure that you just requested

00:21:59,780 --> 00:22:06,000
so let's say you you request some some

00:22:03,330 --> 00:22:08,100
host on Amazon you can pre provision the

00:22:06,000 --> 00:22:11,960
certificate before your your even

00:22:08,100 --> 00:22:11,960
infrastructure to get available

00:22:12,240 --> 00:22:19,190
and then verifies and any any debt

00:22:14,760 --> 00:22:22,950
relief certificate the problem is that

00:22:19,190 --> 00:22:26,190
if that would be the whole problem would

00:22:22,950 --> 00:22:27,870
be nice and simple but it gets a little

00:22:26,190 --> 00:22:31,830
bit more complicated when you have

00:22:27,870 --> 00:22:33,270
different orchestration layers as I said

00:22:31,830 --> 00:22:35,190
you have the orchestration photocurrent

00:22:33,270 --> 00:22:39,270
you have the orchestration for it event

00:22:35,190 --> 00:22:40,800
given and rough and any operations

00:22:39,270 --> 00:22:43,430
because they need to standardize them in

00:22:40,800 --> 00:22:52,250
to make inventories of those

00:22:43,430 --> 00:22:52,250
certificates and your secrets and

00:22:53,060 --> 00:23:00,450
eventually it needs to get to crop and

00:22:56,900 --> 00:23:02,790
kuratas any other Java process mainly

00:23:00,450 --> 00:23:05,490
they use Jacob which is typically what

00:23:02,790 --> 00:23:08,190
they use JK so you need to create a

00:23:05,490 --> 00:23:10,230
certificate you need to convert the

00:23:08,190 --> 00:23:13,500
certificate between from the Pam format

00:23:10,230 --> 00:23:18,170
to the JK's you need to get the JK s to

00:23:13,500 --> 00:23:22,860
the cross container and you need to

00:23:18,170 --> 00:23:26,900
reload the clock with with excellent

00:23:22,860 --> 00:23:29,900
unix or use the hard deployment too

00:23:26,900 --> 00:23:29,900
risky

00:23:30,880 --> 00:23:39,740
so this is a rather complex arm process

00:23:36,050 --> 00:23:46,010
and if you would need to code yourself

00:23:39,740 --> 00:23:49,940
and meaning to manage this aside would

00:23:46,010 --> 00:23:52,850
be would be hard but unfortunately let's

00:23:49,940 --> 00:23:58,490
increase make it easier and when you

00:23:52,850 --> 00:24:01,900
manage the infrastructure at scale even

00:23:58,490 --> 00:24:04,850
have some convention over configuration

00:24:01,900 --> 00:24:07,460
they have a very good convention for

00:24:04,850 --> 00:24:09,170
managing certificates and this is the

00:24:07,460 --> 00:24:12,320
folder structure that you would see in

00:24:09,170 --> 00:24:17,150
any con any computer that manages those

00:24:12,320 --> 00:24:18,980
certificates so in order to have a

00:24:17,150 --> 00:24:20,660
software like a certificate manager what

00:24:18,980 --> 00:24:23,870
you would need is to install the client

00:24:20,660 --> 00:24:26,210
the set of clients on your host can be

00:24:23,870 --> 00:24:30,880
in a docker container or can be on a

00:24:26,210 --> 00:24:34,640
dedicated computer inside of your

00:24:30,880 --> 00:24:37,490
network not publicly available so if you

00:24:34,640 --> 00:24:40,130
think of security your secrets you do

00:24:37,490 --> 00:24:42,950
not want to expose them on a host that's

00:24:40,130 --> 00:24:46,850
publicly available you want to be behind

00:24:42,950 --> 00:24:50,270
the firewall so that I what I would

00:24:46,850 --> 00:24:54,010
recommend and the inventory of the

00:24:50,270 --> 00:24:58,100
certificates look something like this

00:24:54,010 --> 00:25:02,210
the account is mainly for your let's

00:24:58,100 --> 00:25:05,030
encrypt account you have all the history

00:25:02,210 --> 00:25:07,100
and all the inventory of all the

00:25:05,030 --> 00:25:12,170
interactions that you had with let's

00:25:07,100 --> 00:25:19,580
encrypt and you have both for CSR and

00:25:12,170 --> 00:25:21,380
for keys and for all the chain and food

00:25:19,580 --> 00:25:24,310
chain which is the intermediate State

00:25:21,380 --> 00:25:24,310
with with the full

00:25:24,730 --> 00:25:30,350
it's awesome for other things

00:25:27,200 --> 00:25:32,540
it's awesome to know easily that nobody

00:25:30,350 --> 00:25:36,590
tempered with your DNA especially if you

00:25:32,540 --> 00:25:41,020
have a dedicated zone where you are

00:25:36,590 --> 00:25:45,400
allowed to create your subdomain and

00:25:41,020 --> 00:25:48,020
have the brokers isolated in that way

00:25:45,400 --> 00:25:49,880
and that's why I put the CSR and keep

00:25:48,020 --> 00:25:53,270
there to see that you have all the

00:25:49,880 --> 00:25:59,750
history with left hand clips in regards

00:25:53,270 --> 00:26:03,020
to to that third born infant now if you

00:25:59,750 --> 00:26:07,130
you serve out you will use you will see

00:26:03,020 --> 00:26:10,220
in live and in archives the certificates

00:26:07,130 --> 00:26:12,530
which is the cert the chain the food

00:26:10,220 --> 00:26:16,690
chain and the private key you will not

00:26:12,530 --> 00:26:20,330
see the p12 files or the Jacobs

00:26:16,690 --> 00:26:22,970
but we love the convention of let's

00:26:20,330 --> 00:26:25,790
encrypt and we said okay after you

00:26:22,970 --> 00:26:27,860
create the term certificate you need to

00:26:25,790 --> 00:26:32,059
have some conversions to other formats

00:26:27,860 --> 00:26:35,540
of of search and in this case what was

00:26:32,059 --> 00:26:39,100
Jacob so let's have the concept of

00:26:35,540 --> 00:26:39,100
plugins and

00:26:41,140 --> 00:26:51,940
you can plug in your EMS provider or you

00:26:45,520 --> 00:26:54,610
can plug in other types of our saying

00:26:51,940 --> 00:26:58,410
integration points for your certificate

00:26:54,610 --> 00:27:00,520
management and this is what I'm going to

00:26:58,410 --> 00:27:07,360
demo

00:27:00,520 --> 00:27:09,940
besides the plugins that it provides

00:27:07,360 --> 00:27:12,850
out-of-the-box it has also the hooks

00:27:09,940 --> 00:27:16,360
which are very similar to get hooks that

00:27:12,850 --> 00:27:21,160
help you automate the processes around

00:27:16,360 --> 00:27:25,840
pre and post creation or pre and post

00:27:21,160 --> 00:27:28,510
renewal or deletion so this is a set bot

00:27:25,840 --> 00:27:31,360
command where you can integrate that

00:27:28,510 --> 00:27:38,170
command with your certificate and you

00:27:31,360 --> 00:27:43,440
basically do it in one shot so let me

00:27:38,170 --> 00:27:43,440
have the demo real

00:27:54,840 --> 00:28:09,899
so for the first layer of configuration

00:28:00,360 --> 00:28:11,980
we the rancher with all the text leaves

00:28:09,899 --> 00:28:14,940
RB

00:28:11,980 --> 00:28:14,940
containers

00:28:15,190 --> 00:28:20,430
some 100 of them only on on staging the

00:28:18,850 --> 00:28:26,100
violence yep

00:28:20,430 --> 00:28:26,100
but what I wanted to show you is the

00:28:30,380 --> 00:28:37,630
the certificate

00:28:32,770 --> 00:28:40,660
so another aspect of inventory is that

00:28:37,630 --> 00:28:42,309
most of the time you don't have only one

00:28:40,660 --> 00:28:45,059
inventory you have multiple types of

00:28:42,309 --> 00:28:46,960
inventory you have inventory for your

00:28:45,059 --> 00:28:50,230
jars and worse you have

00:28:46,960 --> 00:28:53,940
inventories of your docker images you

00:28:50,230 --> 00:28:58,030
have inventories of secrets and the

00:28:53,940 --> 00:29:01,360
orchestrator of your daughter

00:28:58,030 --> 00:29:04,300
infrastructure or the package for you

00:29:01,360 --> 00:29:07,559
how you would like to call it will have

00:29:04,300 --> 00:29:10,120
its own inventory to manage those

00:29:07,559 --> 00:29:13,179
services at a certain point moment in

00:29:10,120 --> 00:29:18,610
time so it's the snapshot of life and

00:29:13,179 --> 00:29:23,110
use certificates what I'm going to do

00:29:18,610 --> 00:29:27,130
now I'm going to issue a new certificate

00:29:23,110 --> 00:29:29,910
for a subdomain that I would suggest you

00:29:27,130 --> 00:29:29,910
still propose

00:29:37,600 --> 00:29:42,059
if the network helps me

00:29:54,120 --> 00:29:58,370
so the only thing that you would need

00:30:05,950 --> 00:30:08,550
sure

00:30:08,850 --> 00:30:14,419
we need to regulate a bit because I

00:30:11,130 --> 00:30:14,419
didn't want see they're very well

00:30:22,550 --> 00:30:25,510
at this point

00:30:31,280 --> 00:30:34,030
that's fine

00:30:34,160 --> 00:30:41,190
okay so the only thing that you would

00:30:37,500 --> 00:30:50,850
need is to do a git clone of this third

00:30:41,190 --> 00:30:52,260
box one thing to notice about this menu

00:30:50,850 --> 00:30:54,120
infrastructure we care about is that

00:30:52,260 --> 00:30:56,970
every time you run it it will try to

00:30:54,120 --> 00:30:58,350
update itself it uses the Python virtual

00:30:56,970 --> 00:31:01,260
environment and it will try to update

00:30:58,350 --> 00:31:03,600
all the libraries to make it not only

00:31:01,260 --> 00:31:05,820
compliant with the latest changes of the

00:31:03,600 --> 00:31:08,970
acne protocol but also to have the

00:31:05,820 --> 00:31:13,410
latest Python updates security a beauty

00:31:08,970 --> 00:31:15,180
food like that's why the third box that

00:31:13,410 --> 00:31:17,940
you have embedded in your boot or other

00:31:15,180 --> 00:31:20,040
distributions they're always old most of

00:31:17,940 --> 00:31:22,740
the time you will try to execute it will

00:31:20,040 --> 00:31:24,420
not work the best way to use it is using

00:31:22,740 --> 00:31:29,070
either from a docker container that you

00:31:24,420 --> 00:31:31,260
are just rebuild it or run third board

00:31:29,070 --> 00:31:36,570
with students so it's update itself and

00:31:31,260 --> 00:31:40,380
then run it again so this is a trick

00:31:36,570 --> 00:31:42,480
that is important to know so as I said

00:31:40,380 --> 00:31:44,430
in a double container you just clone

00:31:42,480 --> 00:31:48,600
this one if you like but if I would do

00:31:44,430 --> 00:31:58,740
that you wouldn't see much and let's

00:31:48,600 --> 00:32:01,280
become a domain action are to Miami okay

00:31:58,740 --> 00:32:01,280
so

00:32:04,350 --> 00:32:08,809
first to make sure it's not there

00:32:14,990 --> 00:32:18,640
Eck not to those money

00:32:23,230 --> 00:32:25,919
so

00:32:28,179 --> 00:32:33,389
nothing is there let's try to

00:32:37,270 --> 00:32:41,380
the most attorneys you will see instead

00:32:39,909 --> 00:32:43,659
observe both outer you will see only

00:32:41,380 --> 00:32:46,149
server the difference is that when you

00:32:43,659 --> 00:32:48,880
package server they replace or without

00:32:46,149 --> 00:32:51,460
the server is pretty much the same it's

00:32:48,880 --> 00:32:54,490
beauty an alias or symlink into the user

00:32:51,460 --> 00:32:56,850
beam so it's exactly one and the same

00:32:54,490 --> 00:32:56,850
binary

00:33:01,350 --> 00:33:05,030
as I said Manuel

00:33:20,750 --> 00:33:32,660
and now you would need to provide your

00:33:24,290 --> 00:33:34,370
basic hooks we created the we want to

00:33:32,660 --> 00:33:39,140
take a look to what plugins exist there

00:33:34,370 --> 00:33:43,870
is binding for varnish Heroku other DNS

00:33:39,140 --> 00:33:46,160
providers but we wanted to have one for

00:33:43,870 --> 00:33:49,490
GoDaddy because it doesn't exist in

00:33:46,160 --> 00:33:52,030
nitrogen everybody or a little majority

00:33:49,490 --> 00:33:52,030
uses that

00:33:58,670 --> 00:34:08,930
this code is publicly available on

00:34:04,200 --> 00:34:08,930
github epic vocal let's encrypt extra

00:34:20,630 --> 00:34:22,660
ah

00:34:28,480 --> 00:34:32,129
I think it's better to just

00:34:34,810 --> 00:34:40,500
copy/paste from someone just changed

00:34:37,240 --> 00:34:40,500
command so

00:34:54,070 --> 00:35:03,160
so congratulations you have your first

00:34:56,880 --> 00:35:05,890
certificate now you have structure that

00:35:03,160 --> 00:35:08,290
I sent with short pants and chain man

00:35:05,890 --> 00:35:13,420
what you do not see is the JK is fun and

00:35:08,290 --> 00:35:16,270
the reason is I didn't use the cook for

00:35:13,420 --> 00:35:20,640
the generation of it let's do it right

00:35:16,270 --> 00:35:20,640
now it will work something like this

00:35:25,319 --> 00:35:27,380
Oh

00:35:28,210 --> 00:35:32,880
I try to give you the steps so you

00:35:38,140 --> 00:35:43,049
so I have a coach to but

00:35:45,830 --> 00:35:53,200
I generated the district ticket for

00:35:57,360 --> 00:36:05,630
that's what happens with life of course

00:36:01,790 --> 00:36:05,630
have a misspelled

00:36:19,860 --> 00:36:24,810
okay that sounds better it's Miami used

00:36:23,310 --> 00:36:29,670
to be another domain if you paid

00:36:24,810 --> 00:36:33,530
attention so I will renew the

00:36:29,670 --> 00:36:33,530
certificate which is how renewal works

00:36:44,320 --> 00:36:49,810
so it has been added to the keystore by

00:36:47,260 --> 00:36:57,040
default any output that you have from

00:36:49,810 --> 00:37:01,000
your script are to error output not be

00:36:57,040 --> 00:37:03,490
standard output so the key to what is

00:37:01,000 --> 00:37:12,360
going to generate using only error

00:37:03,490 --> 00:37:17,010
output and now if we take a look at the

00:37:12,360 --> 00:37:17,010
list we will see the jksz

00:37:23,170 --> 00:37:32,650
the mutual friend Hank Jacobs and now

00:37:28,680 --> 00:37:38,160
the last who would run something like

00:37:32,650 --> 00:37:38,160
this so if we integrate both these

00:37:46,260 --> 00:37:48,980
sure

00:37:55,860 --> 00:38:06,350
so now you integrated with your rent or

00:38:04,110 --> 00:38:09,150
with whatever

00:38:06,350 --> 00:38:13,610
Orchestrator engine you have you have

00:38:09,150 --> 00:38:13,610
your certificate and your

00:38:27,520 --> 00:38:30,120
so

00:38:32,030 --> 00:38:38,770
basically this is it

00:38:48,070 --> 00:38:55,180
by default it has all these plugins the

00:38:51,520 --> 00:38:57,880
plugins are are split in two types

00:38:55,180 --> 00:39:00,870
authenticators and installers that's why

00:38:57,880 --> 00:39:04,090
I recommend using the Emmanuel the

00:39:00,870 --> 00:39:06,580
installers in Apache will install the

00:39:04,090 --> 00:39:12,730
certificate in Apache so if you have a

00:39:06,580 --> 00:39:15,430
battery and top get behind it and if

00:39:12,730 --> 00:39:21,490
you're doing the TLS termination it

00:39:15,430 --> 00:39:26,170
doesn't much matter but if you use jks

00:39:21,490 --> 00:39:32,470
in your tomcat for whatever reason then

00:39:26,170 --> 00:39:37,630
it won't install it there so this is a

00:39:32,470 --> 00:39:40,110
what I wanted to do demo are any

00:39:37,630 --> 00:39:40,110
questions

00:39:44,420 --> 00:39:47,410
- quick

00:39:58,200 --> 00:40:00,830
yeah

00:40:02,510 --> 00:40:12,500
so it's based on on tinker pop it's a

00:40:05,930 --> 00:40:13,670
graph database where all the so exci

00:40:12,500 --> 00:40:16,820
thank you by default takes the

00:40:13,670 --> 00:40:20,150
configurations from file and usually the

00:40:16,820 --> 00:40:25,130
URL that you give is how based our URL

00:40:20,150 --> 00:40:28,910
but not many people know that you can

00:40:25,130 --> 00:40:31,820
actually use a URL and then that

00:40:28,910 --> 00:40:37,900
configuration is actually taken out from

00:40:31,820 --> 00:40:37,900
whatever that URL will give

00:41:11,990 --> 00:41:19,270
anytime you want to cancel however our

00:41:16,310 --> 00:41:19,270
deejay

00:41:23,270 --> 00:41:28,920
times

00:41:26,170 --> 00:41:28,920
you can change

00:41:33,920 --> 00:41:38,380
so for the license

00:41:42,570 --> 00:41:49,740
honors who can pay compensation of again

00:41:52,480 --> 00:41:59,070
that's why you use the fire dead drop

00:41:55,930 --> 00:41:59,070
everything and go

00:42:06,430 --> 00:42:13,029
so he stopped to take one

00:42:17,749 --> 00:42:21,739
when appropriate comes up

00:42:33,490 --> 00:42:36,600
but how

00:42:38,229 --> 00:42:43,420
database let's all settle filters and

00:42:41,179 --> 00:42:43,420
sorry

00:42:48,780 --> 00:42:56,820
defiant talking the blocker generated

00:42:51,610 --> 00:42:56,820
information 43:10 a famous rock

00:43:00,720 --> 00:43:08,130
little develops defeated the way suppose

00:43:05,130 --> 00:43:08,130
so

00:43:18,260 --> 00:43:23,100
and not only you yes but for that

00:43:21,450 --> 00:43:26,550
configuration we need high availability

00:43:23,100 --> 00:43:29,400
it can be not only one central post it

00:43:26,550 --> 00:43:39,150
but actually can be multiple central

00:43:29,400 --> 00:43:42,300
positive emails or four regions yeah and

00:43:39,150 --> 00:43:44,010
there I think too few level so you have

00:43:42,300 --> 00:43:45,960
to react both one load but you have to

00:43:44,010 --> 00:43:48,780
react on health issues of your system

00:43:45,960 --> 00:43:52,530
and health issues in are two types of it

00:43:48,780 --> 00:43:54,330
one is on the availability of the

00:43:52,530 --> 00:43:56,640
service which you mainly see in the

00:43:54,330 --> 00:43:59,820
docker and you have the healthcare

00:43:56,640 --> 00:44:01,910
service for each cluster engine if we

00:43:59,820 --> 00:44:05,720
use Ranger because you can use either

00:44:01,910 --> 00:44:08,369
form or lettuce or Cooper natives as

00:44:05,720 --> 00:44:10,230
clustering engine for your containers so

00:44:08,369 --> 00:44:13,380
you have that health check and you also

00:44:10,230 --> 00:44:17,100
have the health check based on the

00:44:13,380 --> 00:44:20,990
traffic messages and you can always take

00:44:17,100 --> 00:44:20,990
the decision to Rotten new croaker

00:44:38,060 --> 00:44:45,470
any other questions

00:44:40,710 --> 00:44:45,470
anybody uses less encrypted right now

00:44:45,680 --> 00:44:51,830
you use it in the manual with hooks or

00:44:49,109 --> 00:44:51,830
without

00:44:58,770 --> 00:45:05,849
thank you very much

00:45:00,530 --> 00:45:05,849

YouTube URL: https://www.youtube.com/watch?v=BnZ_vyPss9M


