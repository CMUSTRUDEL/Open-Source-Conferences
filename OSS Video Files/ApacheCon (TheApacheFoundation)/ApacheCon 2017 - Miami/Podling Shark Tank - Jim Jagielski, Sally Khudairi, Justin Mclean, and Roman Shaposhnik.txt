Title: Podling Shark Tank - Jim Jagielski, Sally Khudairi, Justin Mclean, and Roman Shaposhnik
Publication date: 2017-05-17
Playlist: ApacheCon 2017 - Miami
Description: 
	Podling Shark Tank - Jim Jagielski, Capital One; Sally Khudairi, ASF; Justin Mclean, Class Software; Roman Shaposhnik, Pivotal Inc.

Is it a panel? Is it a talk? It is a Podling Shark Tank! Back by popular demand with even sharkier judges! What is it, you ask? Well, this is just like Shark Tank TV show (think speed dating between entrepreneurs and investors) but instead of Squirrel Boss and Man Candle (don't forget to look those up!) you'll be hearing pitches for Apache Incubator projects. Also instead of Mark Cuban and Kevin O'Leary you'll be pitching to the panel of ASF elders (trying to convince them that your project is worthy of their esteemed attention and endorsement). There will be snark, there will be prizes, there will be reciting of Apache Way creed. But most of all there will be fun. We guarantee that!

About Roman Shaposhnik
Roman Shaposhnik is a Director of Open Source at Pivotal Inc and VP of Technology for ODPi at Linux Foundation. He is a committer on Apache Hadoop, co-creator of Apache Bigtop and contributor to various other Hadoop ecosystem projects. He is also an ASF member and a former Chair of Apache Incubator. In his copious free time he managed to co-author "Practical Graph Analytics with Apache Giraph" and he also posts to twitter as @rhatr. Roman has been involved in Open Source software for more than a decade and hacked projects ranging from Linux kernel to FFmpeg multimedia library. He loves good beer and fights against American led IPA invasion one seidla at a time.

About Sally Khudairi
Sally Khudairi is Vice President of Marketing & Publicity at The Apache Software Foundation (ASF) where, in 2002, she was elected its first female and non-technical Member. She is responsible for elevating the ASF’s visibility, and counsels 350+ Apache projects and initiatives in the areas of messaging, outreach, and engagement. Over her 24-year career in the Web, Khudairi has been lauded as a dynamic communications strategist and expert in next-generation innovations, and has played an integral role in building campaigns for some of the industry’s most prominent standards and organizations. Prior to launching the ASF in 1999, Khudairi was deputy to Sir Tim Berners-Lee as Head of Communications at the World Wide Web Consortium (W3C), overseeing the launch of 17 specifications that include PNG, CSS, RDF, HTML4, and XML. She is Managing Director and Luxury & Technology Practice lead at HALO Worldwide.

About Justin Mclean
Justin Mclean has more than 25 years experience in developing web based applications and is involved in the open source hardware movement. He runs his own consulting company Class Software and has spoken at numerous conferences in Australia and overseas including previous ApacheCon conferences. In his free time he's active in the Apache Flex and Apache Incubator projects and mentor for a number of projects. He's also co-author of a book on Android mobile development, a casual academic at the University of NSW and runs the IoT (internet of things) meetup in Sydney.
Captions: 
	00:00:00,000 --> 00:00:06,230
hello everyone hey how is everybody

00:00:02,550 --> 00:00:10,769
doing first day of a better con right

00:00:06,230 --> 00:00:13,259
well it's time to do Shark Tank ah which

00:00:10,769 --> 00:00:15,120
is basically our way of introducing

00:00:13,259 --> 00:00:17,880
whole bunch of bottlings and subjecting

00:00:15,120 --> 00:00:20,189
them to the wrath of the panel you are

00:00:17,880 --> 00:00:23,699
about to introduce so first on the panel

00:00:20,189 --> 00:00:24,350
is Sally Sally stand up and sit on one

00:00:23,699 --> 00:00:27,369
of those chairs

00:00:24,350 --> 00:00:27,369
[Music]

00:00:27,949 --> 00:00:32,579
unfortunately unfortunately we have a

00:00:30,150 --> 00:00:34,140
little bit of an issue with a V so I

00:00:32,579 --> 00:00:35,850
will let the panel members introduce

00:00:34,140 --> 00:00:37,950
themselves but once I am done sort of

00:00:35,850 --> 00:00:40,559
like calling them out so Jim is the next

00:00:37,950 --> 00:00:43,530
one on the panel Jim stand up and get on

00:00:40,559 --> 00:00:45,239
the panel and last but not least Justin

00:00:43,530 --> 00:00:47,309
and we will start with small

00:00:45,239 --> 00:00:52,559
introduction from every single one of

00:00:47,309 --> 00:00:54,300
them I am Sally canary I am the vice

00:00:52,559 --> 00:00:56,430
president marketing publicity at the

00:00:54,300 --> 00:01:00,090
Apache Software Foundation I know a lot

00:00:56,430 --> 00:01:02,850
of paddling's who has graduated top

00:01:00,090 --> 00:01:06,180
level projects okay hello so we work

00:01:02,850 --> 00:01:08,180
together and whomever is coming up watch

00:01:06,180 --> 00:01:14,310
out

00:01:08,180 --> 00:01:16,200
Jim Jagielski graybeard kijun lots of

00:01:14,310 --> 00:01:20,850
historical knowledge of absolutely no

00:01:16,200 --> 00:01:22,530
birth whatsoever hi Justin mcclain I'm

00:01:20,850 --> 00:01:24,030
nice tend to hang out on the incubate a

00:01:22,530 --> 00:01:26,450
list where I've reviewed a couple of

00:01:24,030 --> 00:01:26,450
releases

00:01:28,990 --> 00:01:33,040
thank you guys so much we have four

00:01:31,780 --> 00:01:36,280
exciting pom links for you to judge

00:01:33,040 --> 00:01:38,860
today so be gentle on them but if you

00:01:36,280 --> 00:01:40,810
spot anybody who is not worthy of Apache

00:01:38,860 --> 00:01:42,850
Incubator just let them know I mean cuz

00:01:40,810 --> 00:01:45,250
that's what they here for and with that

00:01:42,850 --> 00:01:47,500
we I will explain just a few rules

00:01:45,250 --> 00:01:54,729
so each bottling gets exactly ten

00:01:47,500 --> 00:01:58,960
minutes I five minutes left

00:01:54,729 --> 00:02:01,210
one minute left stop and this is not one

00:01:58,960 --> 00:02:03,009
of those you know fluffy talks where you

00:02:01,210 --> 00:02:04,720
get to go when I say stop you stop

00:02:03,009 --> 00:02:06,610
because we have a lot of you to go

00:02:04,720 --> 00:02:08,649
through and then panel gets five minutes

00:02:06,610 --> 00:02:11,620
to ask any kind of questions they feel

00:02:08,649 --> 00:02:13,870
are interesting necessary useful or just

00:02:11,620 --> 00:02:17,200
entertaining you have to answer all them

00:02:13,870 --> 00:02:19,720
and you have to convince them and the

00:02:17,200 --> 00:02:21,640
rest of us that you are worthy so with

00:02:19,720 --> 00:02:28,510
that let's go with Apache mine use our

00:02:21,640 --> 00:02:32,830
first bombing understand so I did

00:02:28,510 --> 00:02:32,830
[Applause]

00:02:40,379 --> 00:02:48,579
well I hope I have loud enough voice can

00:02:43,810 --> 00:02:50,859
you hear me at the back okay my name is

00:02:48,579 --> 00:02:54,730
Aditi Hilbert a product manager at

00:02:50,859 --> 00:02:59,109
run-time and we come up with solutions

00:02:54,730 --> 00:03:02,950
to manage devices remotely and these

00:02:59,109 --> 00:03:05,499
devices are small devices these are

00:03:02,950 --> 00:03:08,859
32-bit microcontrollers devices so

00:03:05,499 --> 00:03:12,879
nothing that can run Linux or Linux like

00:03:08,859 --> 00:03:15,519
operating systems so what we contribute

00:03:12,879 --> 00:03:17,469
heavily into is we Apache my new project

00:03:15,519 --> 00:03:20,760
and that's what I'm very excited about

00:03:17,469 --> 00:03:20,760
and here to talk about it

00:03:24,840 --> 00:03:30,250
so Apache minut is an open-source

00:03:27,519 --> 00:03:33,250
operating system for these 32-bit

00:03:30,250 --> 00:03:35,129
microcontrollers it is a full-fledged

00:03:33,250 --> 00:03:37,840
operating system so there is a kernel

00:03:35,129 --> 00:03:40,090
real-time operating system kernel that

00:03:37,840 --> 00:03:41,979
is pre-emptive multi-threaded you know

00:03:40,090 --> 00:03:43,120
has the scheduler and everything but it

00:03:41,979 --> 00:03:46,150
also has a lot of middleware

00:03:43,120 --> 00:03:48,060
and utilities that brings the Linux like

00:03:46,150 --> 00:03:52,269
utilities that we love so much

00:03:48,060 --> 00:03:54,609
functionality that to these small

00:03:52,269 --> 00:03:57,370
devices so what do I mean by this metal

00:03:54,609 --> 00:04:00,579
middleware I mean things like secure

00:03:57,370 --> 00:04:02,829
boot loader something that can verify

00:04:00,579 --> 00:04:04,509
the image that is running on your small

00:04:02,829 --> 00:04:07,840
devices and by small devices I mean

00:04:04,509 --> 00:04:10,650
things like variables smart jewelry you

00:04:07,840 --> 00:04:13,090
know maybe some industrial IOT devices

00:04:10,650 --> 00:04:18,190
monitoring some power somewhere part

00:04:13,090 --> 00:04:19,479
line so there is the secure boot loader

00:04:18,190 --> 00:04:21,039
that can verify the image that is

00:04:19,479 --> 00:04:23,320
running on these devices there are

00:04:21,039 --> 00:04:25,150
different hardware abstraction layers

00:04:23,320 --> 00:04:27,430
that make it easy for the application

00:04:25,150 --> 00:04:28,570
developers to write applications without

00:04:27,430 --> 00:04:30,490
worrying about all the underlying

00:04:28,570 --> 00:04:32,919
hardware details

00:04:30,490 --> 00:04:35,320
there's task logging that you can

00:04:32,919 --> 00:04:37,449
collect remotely and that's what device

00:04:35,320 --> 00:04:39,729
management people love so we want to see

00:04:37,449 --> 00:04:41,560
how is the device functioning because

00:04:39,729 --> 00:04:42,840
otherwise the data you cannot trust the

00:04:41,560 --> 00:04:47,469
data that you're getting from these

00:04:42,840 --> 00:04:49,120
devices you have configuration options

00:04:47,469 --> 00:04:49,780
because you want to make change things

00:04:49,120 --> 00:04:52,960
while

00:04:49,780 --> 00:04:54,820
working in the network and doing field

00:04:52,960 --> 00:04:56,139
apply once you have field deployments

00:04:54,820 --> 00:04:57,760
sending people out there is very

00:04:56,139 --> 00:05:00,070
expensive so you want to be able to

00:04:57,760 --> 00:05:01,750
remotely manage all these things so of

00:05:00,070 --> 00:05:03,820
course to do all these things remotely

00:05:01,750 --> 00:05:06,970
you need network connectivity and so we

00:05:03,820 --> 00:05:15,340
provide open source network stacks we

00:05:06,970 --> 00:05:19,530
started with Bluetooth stack we started

00:05:15,340 --> 00:05:25,060
with Bluetooth stack and we are also now

00:05:19,530 --> 00:05:28,060
investing in Laura and 802 15 4G mesh we

00:05:25,060 --> 00:05:32,830
also already have ipv4 and ipv6 support

00:05:28,060 --> 00:05:37,330
so there's a choice of network protocols

00:05:32,830 --> 00:05:39,730
for you so the minut project comes with

00:05:37,330 --> 00:05:41,979
not just the operating system but also a

00:05:39,730 --> 00:05:47,020
very cool build and package management

00:05:41,979 --> 00:05:49,900
tool and that is called newt so we have

00:05:47,020 --> 00:05:52,150
a family of Anu it's basically so that's

00:05:49,900 --> 00:05:54,580
called new tool and it is a very clever

00:05:52,150 --> 00:05:58,210
built-in package management tool it

00:05:54,580 --> 00:06:00,070
brings sanity and organization to your

00:05:58,210 --> 00:06:01,690
project when you are especially when

00:06:00,070 --> 00:06:04,240
you're collaborating and managing large

00:06:01,690 --> 00:06:06,280
data code bases because it allows you to

00:06:04,240 --> 00:06:08,650
have components mix-and-match them

00:06:06,280 --> 00:06:11,140
optimize them test them as separate

00:06:08,650 --> 00:06:12,550
modules and then when you want have the

00:06:11,140 --> 00:06:14,560
hardware in front of you which is called

00:06:12,550 --> 00:06:16,750
the target you want to build an image

00:06:14,560 --> 00:06:20,410
that is exactly right for that target

00:06:16,750 --> 00:06:22,270
the newt can smartly build all these

00:06:20,410 --> 00:06:23,490
different attached you know combined

00:06:22,270 --> 00:06:26,080
stitch together these different

00:06:23,490 --> 00:06:27,910
components and build you the image that

00:06:26,080 --> 00:06:32,169
you want and that will enable the

00:06:27,910 --> 00:06:34,530
application that you want so of course

00:06:32,169 --> 00:06:37,240
it helps you debug and it helps you

00:06:34,530 --> 00:06:39,370
transition from your prototype to

00:06:37,240 --> 00:06:42,610
manufacturing because the new tool can

00:06:39,370 --> 00:06:45,160
do for example create images so images

00:06:42,610 --> 00:06:47,380
that are signed images that have

00:06:45,160 --> 00:06:49,150
manufacturing information because you

00:06:47,380 --> 00:06:50,770
want after 20 years you want to find out

00:06:49,150 --> 00:06:52,570
Oh what was the default image that came

00:06:50,770 --> 00:06:54,490
with it and when was it built you know

00:06:52,570 --> 00:06:56,530
what did it have what packages packages

00:06:54,490 --> 00:06:59,080
does it have so it has all that

00:06:56,530 --> 00:07:00,550
information and noot can keep track and

00:06:59,080 --> 00:07:03,190
build all that into a manufacturing

00:07:00,550 --> 00:07:05,890
image and then finally

00:07:03,190 --> 00:07:07,990
because new to smart and can keep track

00:07:05,890 --> 00:07:10,690
of all these dependencies between

00:07:07,990 --> 00:07:13,900
packages and can allows you to version

00:07:10,690 --> 00:07:17,620
all the packages it actually enables

00:07:13,900 --> 00:07:19,840
collaboration and and you can work in

00:07:17,620 --> 00:07:22,060
different repositories and then you can

00:07:19,840 --> 00:07:24,220
release tests and release them and then

00:07:22,060 --> 00:07:25,930
connect to them as you need to think of

00:07:24,220 --> 00:07:28,030
them as connecting all these libraries

00:07:25,930 --> 00:07:30,370
while working on them set on them

00:07:28,030 --> 00:07:37,540
separately and newt is the intelligent

00:07:30,370 --> 00:07:39,430
tool that helps you do that so we're not

00:07:37,540 --> 00:07:41,830
done yet where there's something else

00:07:39,430 --> 00:07:44,140
there's newt manager that's the device

00:07:41,830 --> 00:07:47,980
management protocol that is also part of

00:07:44,140 --> 00:07:50,500
the new manager minut project and that

00:07:47,980 --> 00:07:52,870
is an application protocol that allows

00:07:50,500 --> 00:07:56,530
you to remotely connect to the device

00:07:52,870 --> 00:08:01,930
and configure or do these operations on

00:07:56,530 --> 00:08:06,760
the device the basic implementation was

00:08:01,930 --> 00:08:09,610
in go and but we have had contributors

00:08:06,760 --> 00:08:11,650
in the community who one of them

00:08:09,610 --> 00:08:13,810
actually implemented it in JavaScript

00:08:11,650 --> 00:08:17,860
and has a runtime nodejs

00:08:13,810 --> 00:08:23,440
for it so tomorrow yes so you can

00:08:17,860 --> 00:08:27,040
actually upgrade a device over ble using

00:08:23,440 --> 00:08:31,660
from your browser for example and that's

00:08:27,040 --> 00:08:35,500
powerful so again we try to incorporate

00:08:31,660 --> 00:08:37,479
as many implementations and we want to

00:08:35,500 --> 00:08:40,120
offer choices to the product

00:08:37,479 --> 00:08:42,969
manufacturer so besides newt manager you

00:08:40,120 --> 00:08:46,620
could also go say for something standard

00:08:42,969 --> 00:08:50,589
atma protocol such as a restful core

00:08:46,620 --> 00:08:52,780
constrained format constrained restful

00:08:50,589 --> 00:08:56,460
environment or you could just go for

00:08:52,780 --> 00:08:59,530
co-op ok essentially where the device

00:08:56,460 --> 00:09:02,410
advertisers or announces publishes the

00:08:59,530 --> 00:09:04,600
URI for all the resources that is that

00:09:02,410 --> 00:09:08,020
it has so for example if it's a light

00:09:04,600 --> 00:09:10,000
resource or if it's a sensor it can have

00:09:08,020 --> 00:09:14,530
a URI for that particular sensor and

00:09:10,000 --> 00:09:17,020
then a back-end service can discover

00:09:14,530 --> 00:09:21,070
that you are I can query the device

00:09:17,020 --> 00:09:26,890
can collect data delete basically manage

00:09:21,070 --> 00:09:28,120
the device so this so these are the

00:09:26,890 --> 00:09:33,399
different options that you have for

00:09:28,120 --> 00:09:35,020
device management I also wanted to

00:09:33,399 --> 00:09:37,209
highlight some of the community

00:09:35,020 --> 00:09:38,920
contributions that we have had and it

00:09:37,209 --> 00:09:42,130
kind of shows you the range of things

00:09:38,920 --> 00:09:44,529
that are possible in this project so we

00:09:42,130 --> 00:09:46,779
have a real Hardware agnostic this

00:09:44,529 --> 00:09:49,930
operating system so we although we work

00:09:46,779 --> 00:09:52,570
with cortex-m arm cortex-m architecture

00:09:49,930 --> 00:09:55,060
we support MIPS architecture we are also

00:09:52,570 --> 00:09:56,380
going to support risk 5 architecture so

00:09:55,060 --> 00:09:58,870
somebody in the community has already

00:09:56,380 --> 00:10:01,060
done on it support for example you know

00:09:58,870 --> 00:10:05,529
the pic32 microchip pic 32 what is

00:10:01,060 --> 00:10:06,880
supported Bluetooth 5 so we talked about

00:10:05,529 --> 00:10:09,880
the Bluetooth stack we started with

00:10:06,880 --> 00:10:12,459
Bluetooth ble 4.2 now we have ble 5

00:10:09,880 --> 00:10:14,620
support people work in a sense of

00:10:12,459 --> 00:10:16,240
framework to make life easier

00:10:14,620 --> 00:10:18,220
if you want to integrate some standard

00:10:16,240 --> 00:10:21,790
sensors temperature sensor accelerometer

00:10:18,220 --> 00:10:25,300
or you know a humidity sensor then it is

00:10:21,790 --> 00:10:26,829
easy to plug in new sensors and plug in

00:10:25,300 --> 00:10:28,660
the drivers because there is a hardware

00:10:26,829 --> 00:10:31,959
abstraction layer and for writing

00:10:28,660 --> 00:10:34,029
applications that actually configure and

00:10:31,959 --> 00:10:37,660
collect data from these sensors is much

00:10:34,029 --> 00:10:40,450
easier ok people also worked on console

00:10:37,660 --> 00:10:42,610
and shell improvements somebody added an

00:10:40,450 --> 00:10:44,529
I squared C protocol and that's you know

00:10:42,610 --> 00:10:46,510
how you connect on the board Hardware

00:10:44,529 --> 00:10:48,399
you can have a serial connection SPI

00:10:46,510 --> 00:10:50,740
connection somebody added an I squared C

00:10:48,399 --> 00:10:52,959
port protocol and as I said mentioned

00:10:50,740 --> 00:10:56,290
before somebody wrote news manager in

00:10:52,959 --> 00:10:58,630
nodejs so we've had different kinds of

00:10:56,290 --> 00:11:01,329
contributions and we are hoping for more

00:10:58,630 --> 00:11:05,560
and more and this so at Apache con I'm

00:11:01,329 --> 00:11:07,660
here to pitch this project and hope to

00:11:05,560 --> 00:11:13,029
generate some interest and networking

00:11:07,660 --> 00:11:14,620
and collaboration it's just a some

00:11:13,029 --> 00:11:19,420
interesting use cases that people have

00:11:14,620 --> 00:11:22,180
put my new to use minut for the first

00:11:19,420 --> 00:11:25,060
one that we I became aware off with a

00:11:22,180 --> 00:11:26,860
quack slider and that was I think used

00:11:25,060 --> 00:11:28,750
more than a year back and there's a

00:11:26,860 --> 00:11:30,579
picture of that it's a little duck which

00:11:28,750 --> 00:11:33,910
is basically a conference badge

00:11:30,579 --> 00:11:35,949
as well as a clicker to advance slides

00:11:33,910 --> 00:11:40,449
and this was used at a security

00:11:35,949 --> 00:11:43,149
conference and then people optimize the

00:11:40,449 --> 00:11:46,540
code and put it into really small

00:11:43,149 --> 00:11:48,489
footprint 128 kilobytes a whole OS with

00:11:46,540 --> 00:11:53,920
Bluetooth stack as well as a management

00:11:48,489 --> 00:11:56,110
protocol 128 kilobytes some ble

00:11:53,920 --> 00:11:57,790
peripheral you know connections of many

00:11:56,110 --> 00:12:03,189
types can cut many concurrent

00:11:57,790 --> 00:12:04,899
connections and so on and then finally I

00:12:03,189 --> 00:12:06,249
just wanted to highlight that there was

00:12:04,899 --> 00:12:08,819
has been a lot of activity in this

00:12:06,249 --> 00:12:10,689
project and we have too many committers

00:12:08,819 --> 00:12:14,670
different affiliations with different

00:12:10,689 --> 00:12:18,489
companies 39 contributors so far and

00:12:14,670 --> 00:12:21,610
over 5,000 permits just just earlier

00:12:18,489 --> 00:12:26,739
today somebody ecstatic and 4ps folks

00:12:21,610 --> 00:12:29,860
they said that they allowed it mean that

00:12:26,739 --> 00:12:33,519
we were 30 number 13 in the number of

00:12:29,860 --> 00:12:35,439
commits so far so yeah so we are doing

00:12:33,519 --> 00:12:37,749
great as far as activity is concerned

00:12:35,439 --> 00:12:40,959
and a lot of forks and lots of stalls

00:12:37,749 --> 00:12:43,839
and likes and email activity lots of

00:12:40,959 --> 00:12:47,319
discussion and we have really focused on

00:12:43,839 --> 00:12:49,089
putting ideas force and discussing how

00:12:47,319 --> 00:12:51,329
you know and people come up with

00:12:49,089 --> 00:12:53,980
proposals and there's a lot of healthy

00:12:51,329 --> 00:12:55,480
community discussion I think and then we

00:12:53,980 --> 00:12:58,809
created lots of tickets we've addressed

00:12:55,480 --> 00:13:03,879
most of them and so we are going full

00:12:58,809 --> 00:13:11,529
steam ahead and that is times up and my

00:13:03,879 --> 00:13:12,160
tops up to don't go anywhere yet not

00:13:11,529 --> 00:13:14,169
just yet

00:13:12,160 --> 00:13:15,399
that was a great pitch as far as I'm

00:13:14,169 --> 00:13:19,319
concerned the project is ready to

00:13:15,399 --> 00:13:19,319
graduate but what do the judges think

00:13:22,120 --> 00:13:27,620
see I was right about the curmudgeon

00:13:24,350 --> 00:13:29,269
part and gives it to me first okay

00:13:27,620 --> 00:13:32,089
assuming I know nothing at all about

00:13:29,269 --> 00:13:34,040
real-time operating systems what is it

00:13:32,089 --> 00:13:37,120
about Newt that makes it so special I

00:13:34,040 --> 00:13:41,980
mean you told me a lot about what it is

00:13:37,120 --> 00:13:44,720
but okay what's what what makes it

00:13:41,980 --> 00:13:47,839
different from other options out there

00:13:44,720 --> 00:13:50,570
why should I spend my my contributor

00:13:47,839 --> 00:13:59,870
talents on my Newt rather than something

00:13:50,570 --> 00:14:02,180
else sure there are other operating

00:13:59,870 --> 00:14:03,980
systems out there but this is the one

00:14:02,180 --> 00:14:07,250
with the most permissive license so

00:14:03,980 --> 00:14:11,000
thank you yes F and so that's one reason

00:14:07,250 --> 00:14:13,730
and then the other reason is that we

00:14:11,000 --> 00:14:16,790
actually have thought about the

00:14:13,730 --> 00:14:19,040
commercial aspects meaning that this OS

00:14:16,790 --> 00:14:21,589
is meant to be in production okay so

00:14:19,040 --> 00:14:25,250
it's not just a development OS not like

00:14:21,589 --> 00:14:26,870
FreeRTOS which you know so or some other

00:14:25,250 --> 00:14:29,180
artosis that are out there which are

00:14:26,870 --> 00:14:34,519
more academic in nature so this is meant

00:14:29,180 --> 00:14:38,899
to actually enable product manufacturers

00:14:34,519 --> 00:14:42,170
to not spend upfront and yet build a

00:14:38,899 --> 00:14:44,390
product that can be taken to market so

00:14:42,170 --> 00:14:46,250
and as you've heard a lot about device

00:14:44,390 --> 00:14:48,560
management as well so we are thinking

00:14:46,250 --> 00:14:50,329
long term and making sure that this

00:14:48,560 --> 00:14:52,940
managed and the device that is built on

00:14:50,329 --> 00:14:55,940
this operating system is actually

00:14:52,940 --> 00:14:58,790
something that will be successful and we

00:14:55,940 --> 00:15:02,810
able be able to function long term in an

00:14:58,790 --> 00:15:08,839
actual deployment it seems like Sally

00:15:02,810 --> 00:15:10,519
has a question okay as the resident non

00:15:08,839 --> 00:15:12,800
technologists I'm going to ask questions

00:15:10,519 --> 00:15:14,750
that may seem odd but I'm curious tell

00:15:12,800 --> 00:15:15,890
me about the security regarding this if

00:15:14,750 --> 00:15:23,350
anyone can use it

00:15:15,890 --> 00:15:23,350
what's going on with security wise yeah

00:15:29,629 --> 00:15:36,389
so security-wise we are building

00:15:33,089 --> 00:15:39,779
insecurity in all the different

00:15:36,389 --> 00:15:40,980
components that constitute minut so you

00:15:39,779 --> 00:15:42,990
heard me talk about the secure boot

00:15:40,980 --> 00:15:45,779
loader that is basically making sure

00:15:42,990 --> 00:15:48,959
that a firmware that is authorized and

00:15:45,779 --> 00:15:51,209
authenticated it boots up the device

00:15:48,959 --> 00:15:52,620
okay so that's the first thing the

00:15:51,209 --> 00:15:55,529
second thing is when we are talking

00:15:52,620 --> 00:15:56,730
about communicating with the device you

00:15:55,529 --> 00:15:59,910
want to make sure that the communication

00:15:56,730 --> 00:16:01,559
channels are protected so we have

00:15:59,910 --> 00:16:04,110
implemented all the standard protocol so

00:16:01,559 --> 00:16:06,149
for example you know if we have UDP

00:16:04,110 --> 00:16:10,410
protocols we have DTLS support for DTLS

00:16:06,149 --> 00:16:12,420
TLS for IP connections ble comes with

00:16:10,410 --> 00:16:14,550
security we have made sure that that is

00:16:12,420 --> 00:16:16,290
not optional that is mandatory so we

00:16:14,550 --> 00:16:18,990
support all the security profiles and

00:16:16,290 --> 00:16:21,870
you know security manager in Bluetooth

00:16:18,990 --> 00:16:24,120
so so protocol wise also we are covered

00:16:21,870 --> 00:16:27,149
and then as far as the code is concerned

00:16:24,120 --> 00:16:29,699
we are also you know doing regular

00:16:27,149 --> 00:16:30,930
checks in and one of the good things

00:16:29,699 --> 00:16:33,389
about open source is there are so many

00:16:30,930 --> 00:16:35,730
eyes on it and people are looking at it

00:16:33,389 --> 00:16:39,529
so security wise that's one of the

00:16:35,730 --> 00:16:42,389
better options that is out there and so

00:16:39,529 --> 00:16:44,490
we also for example we run Coverity

00:16:42,389 --> 00:16:46,949
scans and we are running in a

00:16:44,490 --> 00:16:49,170
vulnerability checks regularly to make

00:16:46,949 --> 00:16:51,600
sure that the code quality is good so we

00:16:49,170 --> 00:16:53,279
are taking steps to make sure that

00:16:51,600 --> 00:16:57,809
security is very much a part of the

00:16:53,279 --> 00:16:59,250
project another question that comes up a

00:16:57,809 --> 00:17:01,350
lot especially when you're ready to

00:16:59,250 --> 00:17:03,029
graduate is who uses you so are there I

00:17:01,350 --> 00:17:06,480
see some use cases but are there

00:17:03,029 --> 00:17:08,459
actually organizations that use you yes

00:17:06,480 --> 00:17:10,740
there are organizations that use us

00:17:08,459 --> 00:17:13,939
without naming any particular

00:17:10,740 --> 00:17:16,289
organization I can say that there are

00:17:13,939 --> 00:17:19,199
things like lock manufactures for

00:17:16,289 --> 00:17:20,459
example presence detect detectors in a

00:17:19,199 --> 00:17:21,240
conference room how many people are

00:17:20,459 --> 00:17:23,339
there

00:17:21,240 --> 00:17:26,280
there are athletic wear you know where

00:17:23,339 --> 00:17:30,140
the monetary our different heart rate

00:17:26,280 --> 00:17:32,490
and other characteristics there are

00:17:30,140 --> 00:17:35,400
rehabilitation services that actually

00:17:32,490 --> 00:17:38,070
monitor how you are moving

00:17:35,400 --> 00:17:40,400
then what else so yes there are several

00:17:38,070 --> 00:17:43,710
I could go on view one more

00:17:40,400 --> 00:17:45,840
so in these productions yes some of them

00:17:43,710 --> 00:17:52,920
are in production and some of them are

00:17:45,840 --> 00:18:02,250
being tested okay if it's short why

00:17:52,920 --> 00:18:05,010
haven't you graduated yet we a couple of

00:18:02,250 --> 00:18:07,230
things I think we took our Vic took time

00:18:05,010 --> 00:18:09,900
to understand the governance and make

00:18:07,230 --> 00:18:12,870
sure that multiple people knew it in the

00:18:09,900 --> 00:18:15,120
community not just one person and so we

00:18:12,870 --> 00:18:17,220
so for example when we did our releases

00:18:15,120 --> 00:18:19,530
we took turns in doing the releases and

00:18:17,220 --> 00:18:21,360
going through the licenses because we

00:18:19,530 --> 00:18:23,550
don't want to just depend on one or two

00:18:21,360 --> 00:18:25,679
people so that takes time and but I

00:18:23,550 --> 00:18:29,570
think that is time well spent so that's

00:18:25,679 --> 00:18:32,460
one reason and then the second is we are

00:18:29,570 --> 00:18:34,350
trying to document each and everything

00:18:32,460 --> 00:18:40,080
that we do including all the maturity

00:18:34,350 --> 00:18:41,850
and the steps that we have taken and yes

00:18:40,080 --> 00:18:45,660
so that is taking a little time but I

00:18:41,850 --> 00:18:47,700
think again that will help us in the

00:18:45,660 --> 00:18:50,850
future as well so we're ready to

00:18:47,700 --> 00:18:54,630
graduate I think we are we want to send

00:18:50,850 --> 00:19:15,120
out the resolution Charter and I think

00:18:54,630 --> 00:19:15,480
this week or next week so keep up the

00:19:15,120 --> 00:19:17,370
good work

00:19:15,480 --> 00:19:20,790
sometimes after graduation paddling's

00:19:17,370 --> 00:19:26,640
get lackadaisical and lazy keep as much

00:19:20,790 --> 00:19:30,179
effort going forward and keep attracting

00:19:26,640 --> 00:19:30,480
new committers your presentation was

00:19:30,179 --> 00:19:32,700
great

00:19:30,480 --> 00:19:35,809
so make sure there's more people in your

00:19:32,700 --> 00:19:35,809
community that can do that too

00:19:37,100 --> 00:19:40,339
[Applause]

00:19:37,240 --> 00:19:40,339
[Music]

00:19:42,470 --> 00:19:53,600
will will be telling us about edge naps

00:19:45,950 --> 00:19:55,430
so they go okay hi everyone my name is

00:19:53,600 --> 00:19:58,790
will Marshall I am a committer and

00:19:55,430 --> 00:20:01,100
contributor to Apache agent dodgy agent

00:19:58,790 --> 00:20:02,750
has been incubating at the Apache

00:20:01,100 --> 00:20:04,490
Software Foundation for the last year

00:20:02,750 --> 00:20:07,130
but the name was changed from quarks

00:20:04,490 --> 00:20:11,500
about eight months ago so for those who

00:20:07,130 --> 00:20:14,030
know it as quarks it is a now agent the

00:20:11,500 --> 00:20:15,680
to explain a gent I think it might first

00:20:14,030 --> 00:20:18,890
help to talk a little bit about data

00:20:15,680 --> 00:20:21,470
streaming so data streaming FM is best

00:20:18,890 --> 00:20:24,140
described as the way data is consumed

00:20:21,470 --> 00:20:27,410
from sources that might run forever

00:20:24,140 --> 00:20:29,060
for example a connected temperature

00:20:27,410 --> 00:20:32,570
sensor which produces temperature

00:20:29,060 --> 00:20:34,720
readings you can't wait until you have

00:20:32,570 --> 00:20:37,790
all of the readings to process them

00:20:34,720 --> 00:20:41,330
since you know might never turn off so

00:20:37,790 --> 00:20:43,490
the data needs to be processed as soon

00:20:41,330 --> 00:20:46,940
as it is ingested into the system and

00:20:43,490 --> 00:20:49,190
any application which is processing data

00:20:46,940 --> 00:20:51,500
needs to be written with that principle

00:20:49,190 --> 00:20:53,860
in mind and so there needs to be a

00:20:51,500 --> 00:20:59,570
framework which is also created with

00:20:53,860 --> 00:21:02,210
that principle in mind the way that this

00:20:59,570 --> 00:21:03,530
is solved nowadays with a number of

00:21:02,210 --> 00:21:06,440
different streaming technologies is that

00:21:03,530 --> 00:21:08,510
let's say you have some sensors at the

00:21:06,440 --> 00:21:10,250
edge if you have the GPS device on a

00:21:08,510 --> 00:21:13,160
phone or if you have a temperature

00:21:10,250 --> 00:21:15,230
sensor like I said something measuring

00:21:13,160 --> 00:21:16,910
the temperature of the fluid in tank of

00:21:15,230 --> 00:21:18,290
your car's engine or the humidity of

00:21:16,910 --> 00:21:20,900
your house you could have many many

00:21:18,290 --> 00:21:24,110
different sensors this is a common

00:21:20,900 --> 00:21:26,300
pattern that we see typically the data

00:21:24,110 --> 00:21:29,390
is sent to a cluster where it is

00:21:26,300 --> 00:21:33,110
analyzed by a system for example spark

00:21:29,390 --> 00:21:35,990
or flink or any any number of different

00:21:33,110 --> 00:21:38,960
data processing systems and the issue

00:21:35,990 --> 00:21:41,450
with this is that this could potentially

00:21:38,960 --> 00:21:44,450
be a lot of data and this is problematic

00:21:41,450 --> 00:21:47,990
for two reasons one a lot of edge

00:21:44,450 --> 00:21:49,380
devices external systems use 3G or 4G

00:21:47,990 --> 00:21:52,230
network connectivity

00:21:49,380 --> 00:21:54,240
to communicate their data and you are

00:21:52,230 --> 00:21:56,660
paying for every kilobyte that you send

00:21:54,240 --> 00:22:02,120
and this can be very expensive

00:21:56,660 --> 00:22:05,280
additionally yeah there might be

00:22:02,120 --> 00:22:07,770
bandwidth caps in addition to that there

00:22:05,280 --> 00:22:09,720
are also latency issues if the backend

00:22:07,770 --> 00:22:13,440
system determines that some action needs

00:22:09,720 --> 00:22:15,870
to be taken then the action has

00:22:13,440 --> 00:22:17,760
round-trip latency associated with it

00:22:15,870 --> 00:22:20,850
which might prove to be too much for

00:22:17,760 --> 00:22:24,210
some applications and the takeaway from

00:22:20,850 --> 00:22:26,790
this is that we need to send less

00:22:24,210 --> 00:22:29,430
information from edge devices when you

00:22:26,790 --> 00:22:32,700
need to make sure that only interesting

00:22:29,430 --> 00:22:34,530
data is sent so back to the example of

00:22:32,700 --> 00:22:35,970
temperature of an engine if you know

00:22:34,530 --> 00:22:38,820
that the standard operating temperature

00:22:35,970 --> 00:22:41,760
is between 50 and 70 degrees Celsius

00:22:38,820 --> 00:22:43,650
then maybe your application doesn't need

00:22:41,760 --> 00:22:47,160
to send those values it's only when it

00:22:43,650 --> 00:22:48,870
starts to go above that range that you

00:22:47,160 --> 00:22:51,570
want to start monitoring that more

00:22:48,870 --> 00:22:53,690
closely from the backend and as such

00:22:51,570 --> 00:22:56,100
this kind of these streaming operations

00:22:53,690 --> 00:23:00,840
that process data on the edge they need

00:22:56,100 --> 00:23:04,440
to happen on the device and so to to

00:23:00,840 --> 00:23:06,780
perform data reduction so this is

00:23:04,440 --> 00:23:09,360
exactly what the problem that edge until

00:23:06,780 --> 00:23:12,000
thing it is it is doing streaming

00:23:09,360 --> 00:23:19,110
analytics at the edge and edge and is a

00:23:12,000 --> 00:23:21,420
community to promote that it is written

00:23:19,110 --> 00:23:23,790
in Java and we chose Java because it

00:23:21,420 --> 00:23:26,610
struck a good balance between how

00:23:23,790 --> 00:23:28,590
quickly we could you know get something

00:23:26,610 --> 00:23:31,560
out into the hands of the developers but

00:23:28,590 --> 00:23:33,630
and and the actual performance of the

00:23:31,560 --> 00:23:36,600
system but additionally because it runs

00:23:33,630 --> 00:23:38,970
on a JVM any system which runs in a JVM

00:23:36,600 --> 00:23:41,810
can also likely support agent for

00:23:38,970 --> 00:23:44,690
example Android phones raspberry PI's

00:23:41,810 --> 00:23:50,280
things things of that nature

00:23:44,690 --> 00:23:53,610
Ejim is modular in the sense that its

00:23:50,280 --> 00:23:56,820
core runtime and the features that it

00:23:53,610 --> 00:24:00,090
has is composed by a number of different

00:23:56,820 --> 00:24:01,890
jar files and if you are using MQTT to

00:24:00,090 --> 00:24:02,330
communicate to your back-end from a

00:24:01,890 --> 00:24:05,149
phone

00:24:02,330 --> 00:24:09,019
our other device you might not need a

00:24:05,149 --> 00:24:11,840
casket connector which is you know using

00:24:09,019 --> 00:24:14,120
up extra space and so for devices which

00:24:11,840 --> 00:24:16,760
are constrained especially this might be

00:24:14,120 --> 00:24:18,950
very beneficial the runtime is also

00:24:16,760 --> 00:24:21,200
extensible in the sense that while we

00:24:18,950 --> 00:24:23,450
were writing it we had in mind the

00:24:21,200 --> 00:24:24,919
thought that someone might come along

00:24:23,450 --> 00:24:28,039
and say this is great but it doesn't

00:24:24,919 --> 00:24:29,570
quite suit our needs and so we tried to

00:24:28,039 --> 00:24:32,419
make it easy for another developer to

00:24:29,570 --> 00:24:36,399
come along and improve upon it and

00:24:32,419 --> 00:24:39,679
extend our interfaces hopefully

00:24:36,399 --> 00:24:42,710
relatively easily so just to back up for

00:24:39,679 --> 00:24:44,570
a sec we for Java we chose Java but

00:24:42,710 --> 00:24:46,940
ultimately the decision for what

00:24:44,570 --> 00:24:51,409
language to choose should come from the

00:24:46,940 --> 00:24:52,610
community because it's possible that

00:24:51,409 --> 00:24:58,010
there should be a different language

00:24:52,610 --> 00:25:01,220
which should be prioritized so here are

00:24:58,010 --> 00:25:03,470
a few applications the first two are

00:25:01,220 --> 00:25:06,679
once which have actually been written so

00:25:03,470 --> 00:25:09,470
monitoring remote temperature sensors if

00:25:06,679 --> 00:25:12,860
you were at our earlier talk today you

00:25:09,470 --> 00:25:16,340
have seen a face detection application

00:25:12,860 --> 00:25:19,340
which only sent frames to a back-end if

00:25:16,340 --> 00:25:20,840
it detected faces in the image which

00:25:19,340 --> 00:25:23,779
drastically reduced the amount of data

00:25:20,840 --> 00:25:27,260
which was sent listening to a microphone

00:25:23,779 --> 00:25:30,950
and only sending the sound intervals

00:25:27,260 --> 00:25:33,139
which contains somebody speaking if the

00:25:30,950 --> 00:25:34,820
decibel level is high enough so these

00:25:33,139 --> 00:25:38,210
are the types of applications which

00:25:34,820 --> 00:25:40,539
might play well with our framework with

00:25:38,210 --> 00:25:40,539
edges

00:25:41,029 --> 00:25:44,840
so we've been incubating for about a

00:25:43,399 --> 00:25:49,070
year and there are many things that have

00:25:44,840 --> 00:25:51,169
gone well for our our community one is

00:25:49,070 --> 00:25:53,029
that we do have a fair amount of

00:25:51,169 --> 00:25:57,549
functionality the runtime is well tested

00:25:53,029 --> 00:26:01,899
we put emphasis on that and is

00:25:57,549 --> 00:26:04,669
relatively mature for how young it is in

00:26:01,899 --> 00:26:07,100
my opinion 10 we have a good release

00:26:04,669 --> 00:26:09,220
cadence we released the first version

00:26:07,100 --> 00:26:12,350
which was made public about a year ago

00:26:09,220 --> 00:26:14,899
four months ago we released another

00:26:12,350 --> 00:26:15,380
version and about two months ago we had

00:26:14,899 --> 00:26:17,540
yet

00:26:15,380 --> 00:26:21,820
versions so we are continuing to release

00:26:17,540 --> 00:26:24,590
and provide improvements to edge n't and

00:26:21,820 --> 00:26:25,970
lastly we're taking big steps to

00:26:24,590 --> 00:26:29,180
integrate with other frameworks it's

00:26:25,970 --> 00:26:31,850
very important that edge incinerate with

00:26:29,180 --> 00:26:34,370
whatever system needs to communicate

00:26:31,850 --> 00:26:36,800
with an edge device and this can be

00:26:34,370 --> 00:26:38,990
databases Kafka and I've mentioned this

00:26:36,800 --> 00:26:40,700
that also like rest and WebSockets and

00:26:38,990 --> 00:26:46,310
there there's so many ways of talking to

00:26:40,700 --> 00:26:48,530
to applications on the edge and cons

00:26:46,310 --> 00:26:51,170
might be a little hard it might say wait

00:26:48,530 --> 00:26:54,110
isn't improving but we need more

00:26:51,170 --> 00:26:55,940
contributors we need to garner more

00:26:54,110 --> 00:26:58,120
interest we've focused a lot on the

00:26:55,940 --> 00:27:00,410
actual tech but not necessarily on

00:26:58,120 --> 00:27:03,050
publicity and that that is something

00:27:00,410 --> 00:27:05,090
that needs needs to be focused on and

00:27:03,050 --> 00:27:09,050
also diversity among committers right

00:27:05,090 --> 00:27:14,060
now there are eight committers and seven

00:27:09,050 --> 00:27:15,770
of them work for IBM so focusing on that

00:27:14,060 --> 00:27:17,990
aspect as well but hopefully that should

00:27:15,770 --> 00:27:20,120
come along with publicity and getting

00:27:17,990 --> 00:27:22,270
more community interest but a journal I

00:27:20,120 --> 00:27:24,950
think agenda is very well positioned

00:27:22,270 --> 00:27:29,240
Internet of Things is something which

00:27:24,950 --> 00:27:31,430
gathers interest right now and I see a

00:27:29,240 --> 00:27:32,720
lot of applications for it so hopefully

00:27:31,430 --> 00:27:36,320
this served as a good introduction to

00:27:32,720 --> 00:27:46,310
edge in our community and take it away

00:27:36,320 --> 00:27:48,170
judges another exciting IT project

00:27:46,310 --> 00:27:54,050
another great pitch but what do the

00:27:48,170 --> 00:27:56,480
judges think okay well so I ot is hot

00:27:54,050 --> 00:27:57,920
and sexy and everyone's talking about it

00:27:56,480 --> 00:28:01,240
and that's fantastic and great

00:27:57,920 --> 00:28:03,830
presentation why so few could do theirs

00:28:01,240 --> 00:28:07,610
like I mentioned we focus more on the

00:28:03,830 --> 00:28:09,860
actual implementation of the releases

00:28:07,610 --> 00:28:13,280
and getting the functionality out there

00:28:09,860 --> 00:28:14,840
and haven't done as much marketing or

00:28:13,280 --> 00:28:16,880
outreach as much as we could we were

00:28:14,840 --> 00:28:20,480
starting doing meetups and places like

00:28:16,880 --> 00:28:22,130
San Francisco and Boston and hopefully

00:28:20,480 --> 00:28:24,170
that will get some more interest that's

00:28:22,130 --> 00:28:26,330
really the biggest problem that that we

00:28:24,170 --> 00:28:29,619
see right now so that's

00:28:26,330 --> 00:28:29,619
also part of life here

00:28:32,989 --> 00:28:38,239
your initial design driver was as I

00:28:36,259 --> 00:28:41,299
understood correctly basically that

00:28:38,239 --> 00:28:43,879
Communications is expensive and or slow

00:28:41,299 --> 00:28:46,999
or the combination of both if history's

00:28:43,879 --> 00:28:48,739
shown is anything that usually is a

00:28:46,999 --> 00:28:51,830
problem that doesn't last for a long

00:28:48,739 --> 00:28:54,999
period of time some wondering do you

00:28:51,830 --> 00:28:57,559
have a second option or a pivot

00:28:54,999 --> 00:28:59,299
considering that if those restrictions

00:28:57,559 --> 00:29:02,539
which you're really really focused on

00:28:59,299 --> 00:29:11,869
the design driver behind it are no

00:29:02,539 --> 00:29:13,789
longer restrictions anymore I mentioned

00:29:11,869 --> 00:29:15,529
that there were two main draws to

00:29:13,789 --> 00:29:18,589
etchant one of them is data reduction

00:29:15,529 --> 00:29:19,789
and the other one is if you have a

00:29:18,589 --> 00:29:21,589
streaming service running on the device

00:29:19,789 --> 00:29:24,709
then you don't incur a round-trip

00:29:21,589 --> 00:29:26,059
latency going to a back-end and so while

00:29:24,709 --> 00:29:27,889
you wouldn't use this for like a control

00:29:26,059 --> 00:29:29,779
system and like a car for certain

00:29:27,889 --> 00:29:32,209
applications you might want to write it

00:29:29,779 --> 00:29:35,179
in Java and just not have to worry about

00:29:32,209 --> 00:29:36,799
you know 200 millisecond round-trip so

00:29:35,179 --> 00:29:40,339
that's like one aspect of it that's sort

00:29:36,799 --> 00:29:43,459
of a technical thing but I guess other

00:29:40,339 --> 00:29:47,629
than that this was sort of brought up

00:29:43,459 --> 00:29:51,200
earlier today if you imagine just you

00:29:47,629 --> 00:29:55,609
have streaming applications running on a

00:29:51,200 --> 00:29:59,499
lot of edge devices and we have a

00:29:55,609 --> 00:29:59,499
publish/subscribe network between them

00:29:59,709 --> 00:30:03,409
yeah I actually don't know where I'm

00:30:01,969 --> 00:30:05,239
going with that but I would say the

00:30:03,409 --> 00:30:08,889
first census yeah are you thinking like

00:30:05,239 --> 00:30:11,889
a multiplexing kind of implementation or

00:30:08,889 --> 00:30:11,889
yeah

00:30:15,860 --> 00:30:21,090
so do you think you might be able to

00:30:17,880 --> 00:30:22,860
attract more committers if you targeted

00:30:21,090 --> 00:30:26,180
more constrained devices rather than

00:30:22,860 --> 00:30:26,180
just just working on the JVM

00:30:27,290 --> 00:30:31,320
to target more constrained devices it

00:30:30,240 --> 00:30:32,790
would be likely that we'd have to

00:30:31,320 --> 00:30:35,310
re-implement engine and something which

00:30:32,790 --> 00:30:40,680
is not Java which is something that we

00:30:35,310 --> 00:30:42,090
have talked about but like I said that

00:30:40,680 --> 00:30:43,590
decision is something that ideally would

00:30:42,090 --> 00:30:45,570
come from the community we want before

00:30:43,590 --> 00:30:47,400
we take the time to completely

00:30:45,570 --> 00:30:49,710
reimplemented in a different language we

00:30:47,400 --> 00:30:52,440
want someone to point at an application

00:30:49,710 --> 00:30:55,020
and say hey this is really cool but it

00:30:52,440 --> 00:30:58,230
would be better if it were in Swift or

00:30:55,020 --> 00:31:01,200
go or something else and so I think part

00:30:58,230 --> 00:31:04,560
of that comes from having a larger

00:31:01,200 --> 00:31:06,360
discussion about it and from that might

00:31:04,560 --> 00:31:08,100
come oh yes

00:31:06,360 --> 00:31:09,720
actually we want this to run on a micro

00:31:08,100 --> 00:31:13,770
processor we need it to be at a lower

00:31:09,720 --> 00:31:20,400
level and that would be a great

00:31:13,770 --> 00:31:39,150
discussion who uses you are you deployed

00:31:20,400 --> 00:31:40,830
in real life anywhere no look we just

00:31:39,150 --> 00:31:44,340
have one case where it was used there

00:31:40,830 --> 00:31:47,790
was a festival in Germany and people had

00:31:44,340 --> 00:31:50,760
little our food chips in their badges I

00:31:47,790 --> 00:31:53,370
think and every room every like place in

00:31:50,760 --> 00:31:54,780
the festival had a like sensor so you

00:31:53,370 --> 00:31:57,570
could sort of track where people were

00:31:54,780 --> 00:31:59,580
going in real time I didn't work on that

00:31:57,570 --> 00:32:00,960
application myself but that was an

00:31:59,580 --> 00:32:02,730
actual application but we haven't heard

00:32:00,960 --> 00:32:10,170
from them since and so I guess it went

00:32:02,730 --> 00:32:12,840
well yeah just keep up the good work and

00:32:10,170 --> 00:32:16,080
you'll get in the erratic

00:32:12,840 --> 00:32:18,210
yeah I I definitely think I I'm also

00:32:16,080 --> 00:32:19,470
with with selling I don't understand why

00:32:18,210 --> 00:32:22,470
you're not putting in more people

00:32:19,470 --> 00:32:26,850
because it really is an incredibly cool

00:32:22,470 --> 00:32:29,700
project the space itself is is very very

00:32:26,850 --> 00:32:32,100
interesting but also just the technology

00:32:29,700 --> 00:32:34,110
behind it is the kind of stuff that

00:32:32,100 --> 00:32:36,149
people really really like playing around

00:32:34,110 --> 00:32:38,879
with so take advantage of whatever

00:32:36,149 --> 00:32:42,330
opportunities the a set has to promote

00:32:38,879 --> 00:32:43,980
the project because it's I have a

00:32:42,330 --> 00:32:45,600
feeling is going to be like a dam break

00:32:43,980 --> 00:32:58,230
and all of a sudden you have a crowd of

00:32:45,600 --> 00:33:03,679
people coming in what Jim said this is

00:32:58,230 --> 00:33:03,679
amazing so next stop is open whisk so

00:33:08,659 --> 00:33:14,490
it's my first time in patchak on and I

00:33:12,690 --> 00:33:17,009
was key I might not want to give my

00:33:14,490 --> 00:33:18,809
presentation now I've seen those two my

00:33:17,009 --> 00:33:23,039
my frame of reference was a YouTube

00:33:18,809 --> 00:33:26,190
video with a cow horse I thought this

00:33:23,039 --> 00:33:28,019
was a different type of presentation my

00:33:26,190 --> 00:33:28,649
mind should be quick my name is Carlos

00:33:28,019 --> 00:33:31,679
Santana

00:33:28,649 --> 00:33:35,279
no guitar jokes I don't play the guitar

00:33:31,679 --> 00:33:38,850
I only have ten minutes so I'm going to

00:33:35,279 --> 00:33:40,950
be talking about open whisk if I don't

00:33:38,850 --> 00:33:42,809
cover or something here we have two

00:33:40,950 --> 00:33:46,049
talks on Thursday so if you can you can

00:33:42,809 --> 00:33:49,679
learn more about that open whisk is a

00:33:46,049 --> 00:33:51,360
server less platform take around server

00:33:49,679 --> 00:33:54,629
list also known as function as a service

00:33:51,360 --> 00:33:58,879
or event-driven programming language or

00:33:54,629 --> 00:34:01,860
programming model and anyone also

00:33:58,879 --> 00:34:05,190
competitors also known as Amazon lambda

00:34:01,860 --> 00:34:07,679
does kind of rewrite functions but let's

00:34:05,190 --> 00:34:13,190
get to the meat of it convince these

00:34:07,679 --> 00:34:16,020
three people that we are awesome anyway

00:34:13,190 --> 00:34:17,760
with open whisk since we are server

00:34:16,020 --> 00:34:18,899
layers we use less energy right so

00:34:17,760 --> 00:34:21,030
that's how we're going to save the

00:34:18,899 --> 00:34:23,010
planet my pitch today is like will you

00:34:21,030 --> 00:34:25,010
go open with you go green we go green we

00:34:23,010 --> 00:34:26,730
save the planet

00:34:25,010 --> 00:34:29,580
let's I'll serve

00:34:26,730 --> 00:34:32,149
right way less less energy wasted so the

00:34:29,580 --> 00:34:34,230
trick with open waste as a

00:34:32,149 --> 00:34:36,419
implementation of it this multi-tenant

00:34:34,230 --> 00:34:39,119
is to get as many functions as possible

00:34:36,419 --> 00:34:40,830
running concurrently or a single VM now

00:34:39,119 --> 00:34:43,020
that you're not in charge of the VMS a

00:34:40,830 --> 00:34:45,810
as a programmer we the platform owner

00:34:43,020 --> 00:34:48,030
are in charge of VMs and those are not

00:34:45,810 --> 00:34:53,840
infinite here me again those are not

00:34:48,030 --> 00:34:56,250
infinite so the more we utilize servers

00:34:53,840 --> 00:34:58,350
fill them with function so that the

00:34:56,250 --> 00:35:00,750
challenge as a committer of your if

00:34:58,350 --> 00:35:02,460
you're joining open with is that you

00:35:00,750 --> 00:35:05,100
think everyday it's like how to can feed

00:35:02,460 --> 00:35:07,230
more functions into a single VM right in

00:35:05,100 --> 00:35:11,070
an efficient way in a sandbox way in a

00:35:07,230 --> 00:35:14,550
secure way so my pitches to to commuters

00:35:11,070 --> 00:35:16,080
in that way but for programmers that

00:35:14,550 --> 00:35:17,640
don't want to deal with infrastructure

00:35:16,080 --> 00:35:19,859
or localhost:8080

00:35:17,640 --> 00:35:21,240
or how many VM so I need they just we

00:35:19,859 --> 00:35:25,530
just tell them write functions don't

00:35:21,240 --> 00:35:28,590
know not servers in terms of a

00:35:25,530 --> 00:35:30,390
programmer you go back to basics basics

00:35:28,590 --> 00:35:32,430
like browser remember your first

00:35:30,390 --> 00:35:34,380
JavaScript web application maybe you

00:35:32,430 --> 00:35:36,510
started with HTML file a Phi for a

00:35:34,380 --> 00:35:39,030
JavaScript we're using a handle an event

00:35:36,510 --> 00:35:41,220
this is the same paradigm we go to that

00:35:39,030 --> 00:35:43,320
simplicity of abstraction in the cloud

00:35:41,220 --> 00:35:45,210
right now handles an event there's a

00:35:43,320 --> 00:35:48,240
function behind it

00:35:45,210 --> 00:35:50,160
like I said functions that handle events

00:35:48,240 --> 00:35:53,880
remember on click who doesn't remember

00:35:50,160 --> 00:35:55,230
and click right it's the same thing of

00:35:53,880 --> 00:35:56,910
the cloud in the cloud there's things

00:35:55,230 --> 00:36:00,510
happening in the like IOT space

00:35:56,910 --> 00:36:03,270
bow-bow applications back in databases

00:36:00,510 --> 00:36:04,710
it's an event and an HTTP request is an

00:36:03,270 --> 00:36:07,619
event so you handle it with a function

00:36:04,710 --> 00:36:10,109
so the idea of server is get with

00:36:07,619 --> 00:36:12,119
functions functions as a service we want

00:36:10,109 --> 00:36:14,070
to go in that term but in terms of

00:36:12,119 --> 00:36:15,390
you're dealing with functions and yes

00:36:14,070 --> 00:36:17,640
there will be a lot of functions that

00:36:15,390 --> 00:36:21,630
you have to manage so DevOps is not

00:36:17,640 --> 00:36:23,670
going away it's getting more fun I'm

00:36:21,630 --> 00:36:26,090
doing more time this is a simple

00:36:23,670 --> 00:36:29,310
scenario was a jerk emitter of the core

00:36:26,090 --> 00:36:31,619
open with platform if you're we're

00:36:29,310 --> 00:36:33,450
concentrating on always maximizing

00:36:31,619 --> 00:36:35,160
direct realization so we have functions

00:36:33,450 --> 00:36:37,890
so instead of having functions just

00:36:35,160 --> 00:36:40,470
idling they're wasting energy not saving

00:36:37,890 --> 00:36:42,540
the planet you get all those fins

00:36:40,470 --> 00:36:46,200
working to get into it into a single VM

00:36:42,540 --> 00:36:48,270
so we maximization the idea is if you

00:36:46,200 --> 00:36:50,670
have an application that is maximizing

00:36:48,270 --> 00:36:52,560
utilization on a VM that's okay leave it

00:36:50,670 --> 00:36:54,599
as the non server less application which

00:36:52,560 --> 00:36:56,099
does okay people you don't have to use

00:36:54,599 --> 00:36:57,780
the hot thing like right now because

00:36:56,099 --> 00:36:59,970
everybody's using it right but if you

00:36:57,780 --> 00:37:02,400
may have these cases where you need to

00:36:59,970 --> 00:37:06,170
maximize that that VM to use multiple

00:37:02,400 --> 00:37:09,570
functions this is this is a graph so

00:37:06,170 --> 00:37:12,180
every good chart right as a graph so

00:37:09,570 --> 00:37:17,090
this is this shows you like as we go

00:37:12,180 --> 00:37:17,090
forward the planet gets better right

00:37:17,750 --> 00:37:23,130
things that we can build with serverless

00:37:19,830 --> 00:37:26,250
right mobile applications message queues

00:37:23,130 --> 00:37:28,200
with Kafka those type of events web

00:37:26,250 --> 00:37:31,400
application and HTTP single page app

00:37:28,200 --> 00:37:34,400
REST API we can build it with serverless

00:37:31,400 --> 00:37:38,720
iot we talk about oil tea during data

00:37:34,400 --> 00:37:40,770
analytics what else these processes so

00:37:38,720 --> 00:37:42,540
something that gets inserted into a

00:37:40,770 --> 00:37:44,609
database you want to react to it maybe

00:37:42,540 --> 00:37:46,560
you want to run things in parallel maybe

00:37:44,609 --> 00:37:48,690
you have to board a burst of data

00:37:46,560 --> 00:37:51,690
entries into a database and you need to

00:37:48,690 --> 00:37:53,160
process them and then pass two weeks and

00:37:51,690 --> 00:37:54,750
nothing happens you don't pay for it so

00:37:53,160 --> 00:37:57,960
that's kind of the benefits also as of

00:37:54,750 --> 00:38:00,540
serverless instead third one is you pay

00:37:57,960 --> 00:38:02,700
as you go in terms of in open source you

00:38:00,540 --> 00:38:04,950
don't pay but but it's open which is

00:38:02,700 --> 00:38:05,520
hosted on a on a platform then you pay

00:38:04,950 --> 00:38:07,890
as you go

00:38:05,520 --> 00:38:09,390
tourniquet about mobile applications and

00:38:07,890 --> 00:38:12,180
when I'm here I'm looking for

00:38:09,390 --> 00:38:13,470
investments right so we're going to

00:38:12,180 --> 00:38:14,490
build a mobile app and we're going to

00:38:13,470 --> 00:38:17,490
put in the App Store

00:38:14,490 --> 00:38:19,410
and we're going to call it whiskers save

00:38:17,490 --> 00:38:21,089
the planet and whiskers is the term that

00:38:19,410 --> 00:38:23,910
we call itself to commuters working in

00:38:21,089 --> 00:38:28,890
open risk which is not about cooking

00:38:23,910 --> 00:38:30,450
right or whiskers five minutes so the

00:38:28,890 --> 00:38:35,520
idea is that we're going to build a

00:38:30,450 --> 00:38:37,440
mobile app as any other any hot app out

00:38:35,520 --> 00:38:38,849
there you're going to play a game so

00:38:37,440 --> 00:38:42,930
it's going to be a game you earn points

00:38:38,849 --> 00:38:44,490
and your challenge will be you know will

00:38:42,930 --> 00:38:47,040
be fun because if you become a committer

00:38:44,490 --> 00:38:49,320
open with your challenges is how can I

00:38:47,040 --> 00:38:51,780
feed more functions concurrently into a

00:38:49,320 --> 00:38:54,160
single VM so your challenge is that game

00:38:51,780 --> 00:38:58,839
so we came up with that with that game

00:38:54,160 --> 00:39:00,609
actually last night so so you get points

00:38:58,839 --> 00:39:02,289
right so any any good mobile app you

00:39:00,609 --> 00:39:05,740
just points to directed your friends or

00:39:02,289 --> 00:39:09,220
buy buy clothes or build rooms or things

00:39:05,740 --> 00:39:13,180
like that you can donate to to a to a

00:39:09,220 --> 00:39:16,030
foundation to serve the earth I don't

00:39:13,180 --> 00:39:18,579
know who added that last one there's a

00:39:16,030 --> 00:39:21,280
guy you know in the infrared room always

00:39:18,579 --> 00:39:24,190
saying like hey you frag keep stop

00:39:21,280 --> 00:39:26,289
giving VMs to TL top-level projects

00:39:24,190 --> 00:39:28,480
right there waste grateful let's create

00:39:26,289 --> 00:39:30,039
let's take a few VMS and create a open

00:39:28,480 --> 00:39:32,530
with serverless platform and just give

00:39:30,039 --> 00:39:34,809
people account so they can write

00:39:32,530 --> 00:39:38,680
functions to build a website to build to

00:39:34,809 --> 00:39:41,410
build a medium of they have being a PMC

00:39:38,680 --> 00:39:43,660
for Apache Cordova and I hate - I really

00:39:41,410 --> 00:39:45,130
hate managing my VM I don't like to

00:39:43,660 --> 00:39:46,960
patch it with kernels I don't get I

00:39:45,130 --> 00:39:48,309
don't like to get that email from infra

00:39:46,960 --> 00:39:50,380
saying here you have a security hole

00:39:48,309 --> 00:39:52,539
somebody hacked you last night like okay

00:39:50,380 --> 00:39:54,630
okay again just give me give me give me

00:39:52,539 --> 00:39:57,010
something where I can put in OGS or go

00:39:54,630 --> 00:39:58,599
snippet of code that handles a website

00:39:57,010 --> 00:40:00,730
and just serves a website whenever will

00:39:58,599 --> 00:40:03,400
uses uses that that application or or

00:40:00,730 --> 00:40:06,099
DevOps like if we have a we have to do

00:40:03,400 --> 00:40:08,410
Cir CD just just write functions so

00:40:06,099 --> 00:40:10,599
that's best idea so if we can convince

00:40:08,410 --> 00:40:12,760
you in Fred you get bonus points my

00:40:10,599 --> 00:40:14,829
design so that's what I'm looking for

00:40:12,760 --> 00:40:17,289
investment this is not tetris at all

00:40:14,829 --> 00:40:19,059
this is not the truth I didn't I didn't

00:40:17,289 --> 00:40:21,369
copy these from servers that the

00:40:19,059 --> 00:40:24,369
challenge of the game is to whisker safe

00:40:21,369 --> 00:40:25,510
to planet this is this is a single VM

00:40:24,369 --> 00:40:27,069
that you need to feed all these

00:40:25,510 --> 00:40:29,200
functions we have Java functions we have

00:40:27,069 --> 00:40:30,880
JavaScript we have Python we have go and

00:40:29,200 --> 00:40:32,260
all of them are running at the same time

00:40:30,880 --> 00:40:34,569
everybody wants to run their functions

00:40:32,260 --> 00:40:35,890
and we have to need to manage to how how

00:40:34,569 --> 00:40:38,470
to code you with all these docker

00:40:35,890 --> 00:40:40,510
containers right at the same time while

00:40:38,470 --> 00:40:43,990
passing passing sums and running some

00:40:40,510 --> 00:40:46,119
others and make it a secure so if you

00:40:43,990 --> 00:40:48,190
you feel the adrenalin playing this game

00:40:46,119 --> 00:40:49,869
you can be a awesome commuter in our

00:40:48,190 --> 00:40:53,740
project because that's what we live

00:40:49,869 --> 00:40:56,170
every day funding so we do have to have

00:40:53,740 --> 00:40:58,240
we have to have we built to two ways of

00:40:56,170 --> 00:41:01,230
funding so you can give us a calculator

00:40:58,240 --> 00:41:03,700
like $5,000 for one day a designer

00:41:01,230 --> 00:41:05,890
because we need a designer and then a

00:41:03,700 --> 00:41:07,510
one week at developers to enough to

00:41:05,890 --> 00:41:10,570
build a mobile app so well

00:41:07,510 --> 00:41:12,850
or-or-or beer is anyway I the other

00:41:10,570 --> 00:41:14,590
option which I like better is you can be

00:41:12,850 --> 00:41:18,400
a contributor to our projects you can

00:41:14,590 --> 00:41:20,680
start from using it like any commuter

00:41:18,400 --> 00:41:22,120
that it's working on a project it's

00:41:20,680 --> 00:41:24,030
because he said user first I think

00:41:22,120 --> 00:41:27,280
that's the thing that I learned first

00:41:24,030 --> 00:41:29,110
and then you can you can be a computer a

00:41:27,280 --> 00:41:32,800
contributor just helping with the docks

00:41:29,110 --> 00:41:35,800
or opening an issue I started like that

00:41:32,800 --> 00:41:39,130
when I before I was at PMC in in Cordova

00:41:35,800 --> 00:41:41,770
I started just opening issues I was a

00:41:39,130 --> 00:41:44,440
user and I start opening issues and then

00:41:41,770 --> 00:41:46,210
the community was very welcoming and I

00:41:44,440 --> 00:41:48,670
started like fixing things and I pick

00:41:46,210 --> 00:41:50,590
sin ducks and I help with the blog until

00:41:48,670 --> 00:41:51,880
I got into the code and then I was the

00:41:50,590 --> 00:41:54,280
one that opened the slack and then

00:41:51,880 --> 00:41:59,500
answered Oh answer the questions so you

00:41:54,280 --> 00:42:01,120
start small so yeah contribution is it's

00:41:59,500 --> 00:42:04,510
one way you've want to give us something

00:42:01,120 --> 00:42:07,690
that's okay also we need a designer I'm

00:42:04,510 --> 00:42:10,180
not very good in designers and and go

00:42:07,690 --> 00:42:12,280
back to the incubating so I open with

00:42:10,180 --> 00:42:14,800
using incubating we just started I hear

00:42:12,280 --> 00:42:17,070
people many months December I think

00:42:14,800 --> 00:42:21,120
November December we did the proposal

00:42:17,070 --> 00:42:24,580
Adobe and IBM are mostly the commuters

00:42:21,120 --> 00:42:31,260
we openly we have their mailing list we

00:42:24,580 --> 00:42:35,400
have been doing the hour in front of

00:42:31,260 --> 00:42:37,960
getting the PMC voting some commuters

00:42:35,400 --> 00:42:41,410
what else I've been working with infra

00:42:37,960 --> 00:42:44,200
to move our 28 github repositories to

00:42:41,410 --> 00:42:47,190
get books I'm growing will be talk

00:42:44,200 --> 00:42:50,890
yesterday tomorrow Thursday about that

00:42:47,190 --> 00:42:52,240
in terms of community I think I put a a

00:42:50,890 --> 00:42:54,490
green dot there I think you'll be

00:42:52,240 --> 00:42:58,180
smarter yellow what we're missing for

00:42:54,490 --> 00:43:02,740
for graduating is attracting independent

00:42:58,180 --> 00:43:04,150
commuters or the companies to to help so

00:43:02,740 --> 00:43:07,180
I think that's where were missing

00:43:04,150 --> 00:43:09,070
missing and other stuff is start doing

00:43:07,180 --> 00:43:12,070
releases and getting that cadence and

00:43:09,070 --> 00:43:14,430
automation where we're big about

00:43:12,070 --> 00:43:16,960
automation so I heard somebody like

00:43:14,430 --> 00:43:19,090
documenting the process I prefer the

00:43:16,960 --> 00:43:20,420
documented with with code so anyone can

00:43:19,090 --> 00:43:22,790
do a release and he

00:43:20,420 --> 00:43:24,700
and get into that cadence of what does

00:43:22,790 --> 00:43:27,620
it mean to do in a passive way I think

00:43:24,700 --> 00:43:30,110
folks that are doing Apache know what

00:43:27,620 --> 00:43:33,740
that means folks are not did just need

00:43:30,110 --> 00:43:37,160
to be helped and we be one team I think

00:43:33,740 --> 00:43:44,930
that's that's that stuff so I think

00:43:37,160 --> 00:43:47,690
that's it and I don't know about the

00:43:44,930 --> 00:43:49,760
rest of you but if you need anybody on

00:43:47,690 --> 00:43:52,370
the IP into to ever review your releases

00:43:49,760 --> 00:44:00,920
you just got the guy it was that was

00:43:52,370 --> 00:44:04,160
awesome but back to judge's so I've got

00:44:00,920 --> 00:44:07,130
a great idea that what we do is we

00:44:04,160 --> 00:44:09,770
remove containers we remove VMs and

00:44:07,130 --> 00:44:13,810
instead we write everything as one large

00:44:09,770 --> 00:44:16,880
monolithic program on a single server

00:44:13,810 --> 00:44:19,640
that would seem to alleviate all the

00:44:16,880 --> 00:44:22,220
kind of problems that open wisk

00:44:19,640 --> 00:44:24,320
is trying to solve how would you respond

00:44:22,220 --> 00:44:31,100
to someone with that sort of backward

00:44:24,320 --> 00:44:35,270
thinking mentality I think if you have

00:44:31,100 --> 00:44:37,370
have one server on one VM and that VM is

00:44:35,270 --> 00:44:42,200
big enough to serve all your users and

00:44:37,370 --> 00:44:42,680
all the data that comes in that's a good

00:44:42,200 --> 00:44:44,840
choice

00:44:42,680 --> 00:44:46,460
it is the opposite you have a lot of

00:44:44,840 --> 00:44:49,490
data that comes in and you don't know

00:44:46,460 --> 00:44:53,600
when and you don't have as big of a

00:44:49,490 --> 00:44:56,060
server or a budget or the complexity and

00:44:53,600 --> 00:44:59,380
the learning of of doing DevOps maybe up

00:44:56,060 --> 00:44:59,380
in we see say it's a starting point

00:45:06,110 --> 00:45:09,830
great presentation by the way I

00:45:07,570 --> 00:45:19,310
certainly like the game that's not

00:45:09,830 --> 00:45:21,830
Tetris I was just thinking along Jim's

00:45:19,310 --> 00:45:23,120
lines if you're just writing

00:45:21,830 --> 00:45:24,230
applications with a whole series of

00:45:23,120 --> 00:45:26,330
functions how do you make something

00:45:24,230 --> 00:45:27,650
that's more complex than just a whole

00:45:26,330 --> 00:45:29,360
lot of separate functions how do you

00:45:27,650 --> 00:45:29,750
modulized it how do you put it all

00:45:29,360 --> 00:45:35,990
together

00:45:29,750 --> 00:45:39,440
is there any features inside yeah so

00:45:35,990 --> 00:45:41,660
that's that's why we decided to to take

00:45:39,440 --> 00:45:43,520
it in to up with it's been in github in

00:45:41,660 --> 00:45:45,440
our for a year so that doesn't that's

00:45:43,520 --> 00:45:48,410
not open source right everybody knows

00:45:45,440 --> 00:45:49,100
that that's just source open I guess

00:45:48,410 --> 00:45:51,620
right

00:45:49,100 --> 00:45:53,120
but in that's what we're building in the

00:45:51,620 --> 00:45:55,760
open source community to get feedback

00:45:53,120 --> 00:46:00,620
from the users and right now what open

00:45:55,760 --> 00:46:03,560
which has is I would say the basic

00:46:00,620 --> 00:46:05,510
programming model where you can declare

00:46:03,560 --> 00:46:09,470
a sequence so you can create a sequence

00:46:05,510 --> 00:46:12,080
of actions and you don't you don't get

00:46:09,470 --> 00:46:14,330
penalized for the things that think time

00:46:12,080 --> 00:46:17,060
so you can stitch together a chain of

00:46:14,330 --> 00:46:18,920
actions but we're working on to see if

00:46:17,060 --> 00:46:21,710
we can create kind of a step function

00:46:18,920 --> 00:46:24,080
type of programming model where we can

00:46:21,710 --> 00:46:27,230
create a DSL so you can build at that

00:46:24,080 --> 00:46:28,940
application but on the flip side since

00:46:27,230 --> 00:46:30,590
we're talking about mono leaks you're

00:46:28,940 --> 00:46:32,660
going to micro services this is more

00:46:30,590 --> 00:46:34,520
nano services so what happens when you

00:46:32,660 --> 00:46:35,930
have a lot of things too that are doing

00:46:34,520 --> 00:46:37,910
stuff and you don't know where they are

00:46:35,930 --> 00:46:40,730
and when if they work or didn't work we

00:46:37,910 --> 00:46:42,080
cons monitoring and logging so you're

00:46:40,730 --> 00:46:44,660
not getting away from that so we're

00:46:42,080 --> 00:46:45,590
trying to build things that you we have

00:46:44,660 --> 00:46:47,630
a programming model where you have

00:46:45,590 --> 00:46:49,670
triggers and rules so you can define

00:46:47,630 --> 00:46:51,860
triggers and rules were under actions

00:46:49,670 --> 00:46:53,360
and those actions can be sequences but

00:46:51,860 --> 00:46:56,180
as you can see it gets it gets kind of

00:46:53,360 --> 00:46:57,470
kind of complex so we want to build up

00:46:56,180 --> 00:46:58,850
with the community so the community can

00:46:57,470 --> 00:47:00,560
come with the answers and build a

00:46:58,850 --> 00:47:02,240
solution together as we try things and

00:47:00,560 --> 00:47:06,100
build things and that's where kind of

00:47:02,240 --> 00:47:06,100
early in the process of this project

00:47:07,090 --> 00:47:12,980
okay so you had a fun presentation it's

00:47:10,940 --> 00:47:14,450
exciting and again we like the games and

00:47:12,980 --> 00:47:16,460
all that's great and you mentioned

00:47:14,450 --> 00:47:18,050
simplicity and I think a lot of people

00:47:16,460 --> 00:47:19,580
agree that simple elegant design is

00:47:18,050 --> 00:47:23,450
definitely the way to go

00:47:19,580 --> 00:47:27,680
how are you finding the projects in

00:47:23,450 --> 00:47:29,480
terms of attraction users I know there's

00:47:27,680 --> 00:47:31,550
some media about it but that's not an

00:47:29,480 --> 00:47:33,800
Apache thing and since we're very

00:47:31,550 --> 00:47:37,040
closely associated for a lot of people

00:47:33,800 --> 00:47:38,600
psychologically with servers are people

00:47:37,040 --> 00:47:40,220
understanding your concept affiliate or

00:47:38,600 --> 00:47:41,900
are they able to gravitate towards it

00:47:40,220 --> 00:47:44,530
and what's happening in terms of how

00:47:41,900 --> 00:47:48,890
people are being able to use it

00:47:44,530 --> 00:47:53,060
yeah so I think we are getting good at

00:47:48,890 --> 00:47:56,540
traction of developers building apps

00:47:53,060 --> 00:47:59,330
simple apps right effusion it runs right

00:47:56,540 --> 00:48:02,270
through your iran's where we're missing

00:47:59,330 --> 00:48:05,480
attractions is commuters part of the

00:48:02,270 --> 00:48:06,830
systems are kind of complex actually

00:48:05,480 --> 00:48:09,860
they're complex because they're solving

00:48:06,830 --> 00:48:12,770
hard problems we're using a lot of

00:48:09,860 --> 00:48:17,869
components which is we have docker we

00:48:12,770 --> 00:48:20,450
have Casca we have SCADA system with a

00:48:17,869 --> 00:48:22,130
KK things that may not be familiar to a

00:48:20,450 --> 00:48:23,810
lot of people to be you know

00:48:22,130 --> 00:48:26,020
contributing and helping with the source

00:48:23,810 --> 00:48:29,030
code what we've seen is an adoption of

00:48:26,020 --> 00:48:30,740
users that are starting to use it on

00:48:29,030 --> 00:48:32,600
this time pieces helping other users

00:48:30,740 --> 00:48:34,940
answering questions so in that respect

00:48:32,600 --> 00:48:36,710
we see that that but how do we turn that

00:48:34,940 --> 00:48:38,720
around and turn those users into

00:48:36,710 --> 00:48:42,650
commuter cycle was saying every commuter

00:48:38,720 --> 00:48:45,619
starts as a user so we need to provide

00:48:42,650 --> 00:48:47,990
more like documentation or steps on how

00:48:45,619 --> 00:48:50,690
to do your first PR how to test that how

00:48:47,990 --> 00:48:53,930
to set up your environment because right

00:48:50,690 --> 00:48:56,420
now is optimized for people like Adobe

00:48:53,930 --> 00:48:59,440
and IBM that are deploying this in my

00:48:56,420 --> 00:49:02,840
skin mask in a scale multi-tenant

00:48:59,440 --> 00:49:08,470
enterprise ready but not commit or radio

00:49:02,840 --> 00:49:13,310
will say yeah we have around 15

00:49:08,470 --> 00:49:15,890
commuters PMC more than 15 but most of

00:49:13,310 --> 00:49:18,230
our demo BM so we're trying to attract

00:49:15,890 --> 00:49:19,820
people that are independent that can

00:49:18,230 --> 00:49:22,070
like to sustain this and also we're in

00:49:19,820 --> 00:49:23,960
production so we have a best best

00:49:22,070 --> 00:49:25,940
interest but that's not the patchy way

00:49:23,960 --> 00:49:27,859
why well I want to see the project that

00:49:25,940 --> 00:49:29,990
is one of the big companies leave the

00:49:27,859 --> 00:49:32,720
project that project consistent goes

00:49:29,990 --> 00:49:35,240
forward as a community so

00:49:32,720 --> 00:49:37,730
I don't know people are heard but I were

00:49:35,240 --> 00:49:39,170
to have where my company has and I'm

00:49:37,730 --> 00:49:41,570
worried about you had so sometimes

00:49:39,170 --> 00:49:46,060
people get confused to where which one

00:49:41,570 --> 00:49:46,060
which had them worrying so my Apache had

00:49:49,570 --> 00:49:55,280
keep at it

00:49:51,170 --> 00:49:57,020
good work so far but keep going as a

00:49:55,280 --> 00:49:58,730
developer I was never really super

00:49:57,020 --> 00:50:00,740
excited about docker containers p.m.

00:49:58,730 --> 00:50:03,380
stuff like that never really made my job

00:50:00,740 --> 00:50:06,560
as a developer easier this does very

00:50:03,380 --> 00:50:08,360
cool thank you if you can only find a

00:50:06,560 --> 00:50:16,940
way to turn those users into commuters I

00:50:08,360 --> 00:50:18,470
think you'll have no problem at all and

00:50:16,940 --> 00:50:23,140
now last but definitely not least

00:50:18,470 --> 00:50:26,780
traffic control so mark take it away

00:50:23,140 --> 00:50:27,890
all right all right thank you I'm marked

00:50:26,780 --> 00:50:30,650
for lumpkey I'm here to talk about

00:50:27,890 --> 00:50:32,860
traffic control your first question is

00:50:30,650 --> 00:50:36,020
no doubt what is what is traffic control

00:50:32,860 --> 00:50:38,600
and then the answer to that is it's a

00:50:36,020 --> 00:50:40,000
CDN control plane open source of course

00:50:38,600 --> 00:50:42,920
we're in the Apache Software Foundation

00:50:40,000 --> 00:50:45,620
your second question is probably what is

00:50:42,920 --> 00:50:48,590
the CDN control plane the answer to that

00:50:45,620 --> 00:50:50,360
is is everything the set of software or

00:50:48,590 --> 00:50:52,400
everything that is that is needed

00:50:50,360 --> 00:50:56,240
besides a caching proxy or besides the

00:50:52,400 --> 00:50:58,970
cache to build a CDN CDN can still have

00:50:56,240 --> 00:51:00,440
several different meanings with several

00:50:58,970 --> 00:51:02,740
different versions depending on who you

00:51:00,440 --> 00:51:05,810
are and what your specific use cases are

00:51:02,740 --> 00:51:08,950
traffic control and a cache like traffic

00:51:05,810 --> 00:51:11,840
server makes up a glass exceeding like

00:51:08,950 --> 00:51:15,650
Akamai level 3 limelight CloudFront

00:51:11,840 --> 00:51:17,540
CloudFlare so yes using using a cache

00:51:15,650 --> 00:51:19,010
using traffic server and traffic control

00:51:17,540 --> 00:51:22,610
you can you can build a CDN a

00:51:19,010 --> 00:51:24,170
world-class CDN actually that rivals on

00:51:22,610 --> 00:51:28,160
some of these vendors that you can buy

00:51:24,170 --> 00:51:30,290
seeding as a service from this is the

00:51:28,160 --> 00:51:34,580
the obligatory up into the right graph

00:51:30,290 --> 00:51:37,040
number one this shows the total internet

00:51:34,580 --> 00:51:39,800
traffic to delivered in a month this

00:51:37,040 --> 00:51:41,600
this graph ends in 2014 but the trend

00:51:39,800 --> 00:51:44,570
has certainly continues has certainly

00:51:41,600 --> 00:51:45,530
continued and and CDNs are really the

00:51:44,570 --> 00:51:48,080
technology

00:51:45,530 --> 00:51:50,480
enable the this traffic to keep crawling

00:51:48,080 --> 00:51:52,220
you know as we as we push if we push

00:51:50,480 --> 00:51:55,610
media we push content closer and closer

00:51:52,220 --> 00:51:59,000
to the user we don't have to infinitely

00:51:55,610 --> 00:52:00,500
scale our our backbone networks this is

00:51:59,000 --> 00:52:04,580
obligatory open to the right graph

00:52:00,500 --> 00:52:07,250
number two the the the green line is is

00:52:04,580 --> 00:52:09,200
an average hour the blue line is a busy

00:52:07,250 --> 00:52:12,560
hour if certainly as we as we consume

00:52:09,200 --> 00:52:15,110
more and more media the focus on the

00:52:12,560 --> 00:52:17,600
content per user becomes a lot higher

00:52:15,110 --> 00:52:21,440
and and again the the news first beneath

00:52:17,600 --> 00:52:24,200
proceeding accelerates a quick a quick

00:52:21,440 --> 00:52:26,510
history of traffic control and the work

00:52:24,200 --> 00:52:29,630
on it January 2012 what we started this

00:52:26,510 --> 00:52:31,670
and in Comcast nine months later we did

00:52:29,630 --> 00:52:34,310
our first production deployment it was

00:52:31,670 --> 00:52:36,880
it was very beta II but we got the job

00:52:34,310 --> 00:52:39,680
done two and a half years later we

00:52:36,880 --> 00:52:42,140
cleaned up the code we may wrote a lot

00:52:39,680 --> 00:52:44,120
of amazing documentation and we got all

00:52:42,140 --> 00:52:46,060
the legal approvals to to open source it

00:52:44,120 --> 00:52:50,090
which was a really big step for Comcast

00:52:46,060 --> 00:52:52,070
and then a year and some change later we

00:52:50,090 --> 00:52:55,100
were accepted into the Apache Incubator

00:52:52,070 --> 00:52:57,860
and then February of this year we we got

00:52:55,100 --> 00:53:02,270
a first release through thanks JDI

00:52:57,860 --> 00:53:03,470
thanks Justin others back to the project

00:53:02,270 --> 00:53:05,960
a little bit we don't we don't have a

00:53:03,470 --> 00:53:07,130
ton of time but you know potentially we

00:53:05,960 --> 00:53:08,960
can have a hallway conversation or

00:53:07,130 --> 00:53:11,420
something about these things we see a

00:53:08,960 --> 00:53:13,430
CDN as having these five components

00:53:11,420 --> 00:53:15,380
we've we've lifted out caches a little

00:53:13,430 --> 00:53:19,160
bit because again those are typically

00:53:15,380 --> 00:53:21,590
separate projects but we have the the

00:53:19,160 --> 00:53:22,940
other four pieces we have software we

00:53:21,590 --> 00:53:25,400
have what we sort of considered to be

00:53:22,940 --> 00:53:27,740
top-level components to cover the other

00:53:25,400 --> 00:53:29,510
four pieces between analytics

00:53:27,740 --> 00:53:31,700
configuration management has a health

00:53:29,510 --> 00:53:38,150
protocol and a content router a traffic

00:53:31,700 --> 00:53:40,100
router and a quick a quick note about

00:53:38,150 --> 00:53:41,780
the the breakdown of the code in the

00:53:40,100 --> 00:53:44,480
repo and I think it's I think it's a

00:53:41,780 --> 00:53:46,790
little bit important to to highlight

00:53:44,480 --> 00:53:48,890
that the languages that we use we

00:53:46,790 --> 00:53:51,710
certainly have a good chunk of of web II

00:53:48,890 --> 00:53:53,750
sort of languages we have a good chunk

00:53:51,710 --> 00:53:55,299
of Perl as any good CDN control plane

00:53:53,750 --> 00:53:58,569
does

00:53:55,299 --> 00:54:00,909
we have we of course we run a massive

00:53:58,569 --> 00:54:03,339
highly concurrent CDN so we have we have

00:54:00,909 --> 00:54:06,399
a good chunk of go and and Java is also

00:54:03,339 --> 00:54:10,089
sort of our workhorse on a lot of stuff

00:54:06,399 --> 00:54:12,219
but but also do do not be do not be do

00:54:10,089 --> 00:54:13,479
not be afraid of our documentation or do

00:54:12,219 --> 00:54:16,209
not be afraid of the investment we've

00:54:13,479 --> 00:54:20,849
made our documentation 22,000 lines of

00:54:16,209 --> 00:54:23,649
our st files is certainly nothing to to

00:54:20,849 --> 00:54:27,219
be frown face or any way 200 lines

00:54:23,649 --> 00:54:28,929
200,000 lines of stuff for reference

00:54:27,219 --> 00:54:31,419
traffic server you know the traffic

00:54:28,929 --> 00:54:36,880
server in which we wrap is is around

00:54:31,419 --> 00:54:39,249
500,000 lines of c and c++ find its

00:54:36,880 --> 00:54:43,019
finest on flack we we feel like we're

00:54:39,249 --> 00:54:46,509
we're very good about about bringing new

00:54:43,019 --> 00:54:49,419
new community members into and to our

00:54:46,509 --> 00:54:51,519
ecosystem if you're if you're beginning

00:54:49,419 --> 00:54:53,649
if you want to just get traffic control

00:54:51,519 --> 00:54:56,799
up and going you will probably have a

00:54:53,649 --> 00:54:58,779
set of questions and and typically slack

00:54:56,799 --> 00:55:00,189
is is the place to find us where we're

00:54:58,779 --> 00:55:03,519
we're typically very lot

00:55:00,189 --> 00:55:05,079
reliable and and helpful there however

00:55:03,519 --> 00:55:06,759
if you have if we have design

00:55:05,079 --> 00:55:09,189
discussions if you want to if you want

00:55:06,759 --> 00:55:10,449
to if you want to talk about roadmap any

00:55:09,189 --> 00:55:11,619
of those things they must happen on the

00:55:10,449 --> 00:55:13,630
mailing list if it doesn't happen on the

00:55:11,619 --> 00:55:18,909
mailing list it doesn't happen we know

00:55:13,630 --> 00:55:21,009
that and a quick one quick a couple of

00:55:18,909 --> 00:55:24,279
quick notes about about the activity of

00:55:21,009 --> 00:55:28,239
the project this is the number of

00:55:24,279 --> 00:55:30,399
commits per week for every Apache repo

00:55:28,239 --> 00:55:33,699
over the last six months and the the

00:55:30,399 --> 00:55:35,289
orange line is traffic control find me

00:55:33,699 --> 00:55:39,699
later if you want some of the details

00:55:35,289 --> 00:55:42,669
here and and yes the the my new folks

00:55:39,699 --> 00:55:45,039
were worth were 13th on this total list

00:55:42,669 --> 00:55:46,299
taking something they the area under

00:55:45,039 --> 00:55:48,099
those curves or summing all of those

00:55:46,299 --> 00:55:51,579
commits again under the under over the

00:55:48,099 --> 00:55:53,409
last six months puts us like 15th I

00:55:51,579 --> 00:55:55,779
think which which you know we totally

00:55:53,409 --> 00:55:57,609
understand commits is not is not a way

00:55:55,779 --> 00:56:00,219
to measure how active your project is

00:55:57,609 --> 00:56:02,649
and in fact it really highlights one of

00:56:00,219 --> 00:56:04,749
our one of our struggles which is we we

00:56:02,649 --> 00:56:06,699
have we have lots of people we have lots

00:56:04,749 --> 00:56:08,890
of interest in solving our technical

00:56:06,699 --> 00:56:10,720
problems but we

00:56:08,890 --> 00:56:12,580
have a lot of interest we don't have a

00:56:10,720 --> 00:56:14,830
lot of interest so far in solving our

00:56:12,580 --> 00:56:18,670
non technical problems and independence

00:56:14,830 --> 00:56:20,650
community involvement the things and

00:56:18,670 --> 00:56:21,700
things like that so said another way

00:56:20,650 --> 00:56:23,110
that those are those are the hard

00:56:21,700 --> 00:56:25,750
problems for us so the easy problems

00:56:23,110 --> 00:56:28,030
what we feel like are the technology and

00:56:25,750 --> 00:56:31,170
again we understand commits is not is

00:56:28,030 --> 00:56:35,680
not really that accurate of a measure

00:56:31,170 --> 00:56:51,550
and that is that is all answered

00:56:35,680 --> 00:56:55,510
questions and thanks yeah there seems to

00:56:51,550 --> 00:56:57,460
be a a tight almost dependency on an

00:56:55,510 --> 00:56:57,940
apache traffic server i was just

00:56:57,460 --> 00:57:01,030
wondering

00:56:57,940 --> 00:57:02,800
basically two things are the hooks and

00:57:01,030 --> 00:57:05,050
scars in there enough that you can use

00:57:02,800 --> 00:57:07,090
basically almost anything as a cache

00:57:05,050 --> 00:57:08,710
that's question number one and question

00:57:07,090 --> 00:57:11,230
number two is how much cross-pollination

00:57:08,710 --> 00:57:14,110
have you seen between traffic control

00:57:11,230 --> 00:57:14,860
and traffic server as far as commits and

00:57:14,110 --> 00:57:18,660
things like that

00:57:14,860 --> 00:57:21,910
or contributions two fantastic questions

00:57:18,660 --> 00:57:25,930
the the tight coupling with with traffic

00:57:21,910 --> 00:57:27,250
traffic server is obvious we would first

00:57:25,930 --> 00:57:28,930
we would love to support a number of

00:57:27,250 --> 00:57:31,270
caches you know certainly that there's a

00:57:28,930 --> 00:57:32,680
lot that there was a lot of effort so

00:57:31,270 --> 00:57:35,200
there's a lot of engagement within

00:57:32,680 --> 00:57:37,000
genetic varnish on some of the others on

00:57:35,200 --> 00:57:40,390
the other caching proxies you know we've

00:57:37,000 --> 00:57:41,890
we we always we always keep that in mind

00:57:40,390 --> 00:57:43,660
when we make decisions you know it's

00:57:41,890 --> 00:57:45,430
always it's always top of mind to us if

00:57:43,660 --> 00:57:46,870
you look at our logo we didn't want to

00:57:45,430 --> 00:57:48,220
copy the traffic server logo because we

00:57:46,870 --> 00:57:50,470
didn't we didn't want that side coupling

00:57:48,220 --> 00:57:51,850
if you look at our our words a lot of

00:57:50,470 --> 00:57:53,980
our diagrams or documentation those

00:57:51,850 --> 00:57:55,990
things that they they they are not

00:57:53,980 --> 00:57:58,630
they're not similar we did not model

00:57:55,990 --> 00:58:00,760
after traffic service so our our hearts

00:57:58,630 --> 00:58:02,980
is there's always top of mind we just

00:58:00,760 --> 00:58:07,360
haven't gotten there yet the second

00:58:02,980 --> 00:58:10,090
question I always think was relatively

00:58:07,360 --> 00:58:12,040
yeah so yeah another great question

00:58:10,090 --> 00:58:13,600
another thing that's very much top of

00:58:12,040 --> 00:58:15,970
mind the Sunday and Monday this week

00:58:13,600 --> 00:58:18,130
Mother's Day and Monday this week we had

00:58:15,970 --> 00:58:21,670
with a two-day summit right next door to

00:58:18,130 --> 00:58:22,690
the traffic server folks and and it was

00:58:21,670 --> 00:58:24,430
it was good

00:58:22,690 --> 00:58:26,680
of the traffic control folks we're able

00:58:24,430 --> 00:58:28,450
to spend an hour or so in the sessions

00:58:26,680 --> 00:58:30,490
for traffic server and certainly the

00:58:28,450 --> 00:58:32,349
other way around happens I happen to

00:58:30,490 --> 00:58:35,470
sufficient amounts you know getting some

00:58:32,349 --> 00:58:37,569
nods yeah you know it's a it's it's the

00:58:35,470 --> 00:58:39,400
top of minds it's um these are big

00:58:37,569 --> 00:58:43,329
systems that we're building they're they

00:58:39,400 --> 00:58:50,200
do take some efforts but I think I think

00:58:43,329 --> 00:58:51,579
our heart is there so why should I use

00:58:50,200 --> 00:58:55,270
this city and over some of the others

00:58:51,579 --> 00:58:58,240
you just mentioned great yeah CDN yeah

00:58:55,270 --> 00:59:00,280
why why DIY versus when you can you can

00:58:58,240 --> 00:59:02,680
fairly economically by um a vendor

00:59:00,280 --> 00:59:04,660
that's a great question you know if

00:59:02,680 --> 00:59:06,790
you're if you're building if you're

00:59:04,660 --> 00:59:09,010
building if you're building if you work

00:59:06,790 --> 00:59:13,960
for a large enterprise or if you have a

00:59:09,010 --> 00:59:14,950
large enterprise such as Apache we think

00:59:13,960 --> 00:59:16,869
it's worth it you know you you always

00:59:14,950 --> 00:59:19,440
need to run the numbers which which way

00:59:16,869 --> 00:59:21,280
is our investment in the the people and

00:59:19,440 --> 00:59:23,560
you know the documentation the

00:59:21,280 --> 00:59:25,690
monitoring potentially worth it versus

00:59:23,560 --> 00:59:28,060
you know just writing a check

00:59:25,690 --> 00:59:30,720
I don't know folks other traffic control

00:59:28,060 --> 00:59:30,720
folks you have anything

00:59:37,490 --> 00:59:47,750
here we go so why Apache why did you

00:59:45,890 --> 00:59:50,089
guys come here you've been in existence

00:59:47,750 --> 00:59:53,990
for a while what made you come to us and

00:59:50,089 --> 00:59:55,720
now you can expand your group yeah I'll

00:59:53,990 --> 01:00:11,540
probably lean on Yann again for this one

00:59:55,720 --> 01:00:13,070
you know yeah h-he has a lot of good

01:00:11,540 --> 01:00:14,630
facilities forward for teaching us so

01:00:13,070 --> 01:00:17,180
the right way to do to do open source

01:00:14,630 --> 01:00:27,500
and we're learning a lot we're loving

01:00:17,180 --> 01:00:30,890
those facilities yep I love to see it

01:00:27,500 --> 01:00:33,530
when one ASF project is able to like

01:00:30,890 --> 01:00:37,130
incubate or create a space for other

01:00:33,530 --> 01:00:39,410
open source projects fantastic CDNs are

01:00:37,130 --> 01:00:40,970
like mojo magic' that people really

01:00:39,410 --> 01:00:43,730
don't appreciate as much as they should

01:00:40,970 --> 01:00:45,380
so the Trudeau is fantastic and I

01:00:43,730 --> 01:00:48,410
realize it was a must-have in a major

01:00:45,380 --> 01:00:50,869
effort for Comcast to actually take this

01:00:48,410 --> 01:00:53,410
an open source and kudos to that as well

01:00:50,869 --> 01:00:58,790
that's major thank you

01:00:53,410 --> 01:01:01,310
what Jim said so how far do you guys

01:00:58,790 --> 01:01:03,140
think that you'll be continuing on on

01:01:01,310 --> 01:01:06,290
the information path because we believe

01:01:03,140 --> 01:01:08,510
that there's a way to go right we do

01:01:06,290 --> 01:01:10,580
think it's a way to go like I said we

01:01:08,510 --> 01:01:12,740
are learning a lot even though it's been

01:01:10,580 --> 01:01:14,530
it's been almost nine months we sort of

01:01:12,740 --> 01:01:17,960
feel like we're just getting started

01:01:14,530 --> 01:01:22,330
again our mentors are helpful certainly

01:01:17,960 --> 01:01:24,859
Justin a JDI helpful on the DI PNC I

01:01:22,330 --> 01:01:27,260
would be surprised if we graduated

01:01:24,859 --> 01:01:30,560
inside of inside of the next year but

01:01:27,260 --> 01:01:33,490
you know maybe they similar to - a year

01:01:30,560 --> 01:01:33,490
from now it's probably good call

01:01:35,100 --> 01:01:41,630
[Applause]

01:01:38,620 --> 01:01:44,960
and that was it for today so for amazing

01:01:41,630 --> 01:01:46,940
presentations three brilliant judges and

01:01:44,960 --> 01:01:49,400
let's think how judges once again thank

01:01:46,940 --> 01:01:49,890
you for coming and thank you all for

01:01:49,400 --> 01:01:52,219
coming

01:01:49,890 --> 01:01:52,219

YouTube URL: https://www.youtube.com/watch?v=-vqcGDltQLo


