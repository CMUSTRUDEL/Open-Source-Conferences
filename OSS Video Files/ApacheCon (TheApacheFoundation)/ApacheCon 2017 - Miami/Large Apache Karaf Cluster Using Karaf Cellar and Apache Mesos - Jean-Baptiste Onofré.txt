Title: Large Apache Karaf Cluster Using Karaf Cellar and Apache Mesos - Jean-Baptiste Onofré
Publication date: 2017-05-17
Playlist: ApacheCon 2017 - Miami
Description: 
	Large Apache Karaf Cluster Using Karaf Cellar and Apache Mesos - Jean-Baptiste Onofré, Apache Software Foundation

Apache Karaf Container is a lightweight micro-services and applications container. Karaf modules provide additional functionalities, especially Apache Karaf Cellar which bring cluster management and synchronization of Karaf containers.

Combining Cellar with Apache Mesos provides an easy way to bootstrap new Karaf containers to provide a scalable micro-services platform.

About Jean-Baptiste Onofré
JB is PMC member for Apache Beam. He is a long-tenured Apache member, serving on PMC/committer for about 15 projects that range from integration to big data.
Captions: 
	00:00:00,149 --> 00:00:10,349
so welcome and so I have some questions

00:00:05,250 --> 00:00:15,059
for you who's using Care authority more

00:00:10,349 --> 00:00:15,750
than 10 character instances or not yeah

00:00:15,059 --> 00:00:19,320
okay

00:00:15,750 --> 00:00:22,140
so V stock actually is more discussion

00:00:19,320 --> 00:00:25,080
elana talk it's about how to set up and

00:00:22,140 --> 00:00:28,439
manage a large number of care expenses

00:00:25,080 --> 00:00:32,790
by large number I mean something like

00:00:28,439 --> 00:00:34,710
more than 20 50 or 100 instances and how

00:00:32,790 --> 00:00:37,110
we can bootstrap these instances and

00:00:34,710 --> 00:00:39,660
sync all together so we're going to

00:00:37,110 --> 00:00:41,640
discuss about Kara quickly what is Kara

00:00:39,660 --> 00:00:45,450
and what's the different solution we

00:00:41,640 --> 00:00:48,090
have to set up this kind of cluster so

00:00:45,450 --> 00:00:51,899
that means I'm JB probably easier than

00:00:48,090 --> 00:00:52,890
my full name because I'm so it's pretty

00:00:51,899 --> 00:00:56,070
hard for you I guess

00:00:52,890 --> 00:00:57,719
and so for archetypes Italian remember

00:00:56,070 --> 00:01:00,030
we Apache Software Foundation and I'm

00:00:57,719 --> 00:01:02,640
working on on some Apache project so

00:01:00,030 --> 00:01:05,250
from big data to integration and

00:01:02,640 --> 00:01:10,890
container so especially on Kara's beam

00:01:05,250 --> 00:01:13,260
and so on so Cara Maria's Carris is a

00:01:10,890 --> 00:01:15,150
container is an application container

00:01:13,260 --> 00:01:16,770
its container where you can deploy any

00:01:15,150 --> 00:01:19,170
kind of application could be web

00:01:16,770 --> 00:01:22,229
application could be spring application

00:01:19,170 --> 00:01:25,560
could be a API application extra so you

00:01:22,229 --> 00:01:29,549
decide what you want to to deploy its

00:01:25,560 --> 00:01:32,820
lightweight I guess I hope now it's less

00:01:29,549 --> 00:01:34,890
than 20 megabytes just start to in care

00:01:32,820 --> 00:01:37,680
of and it depends what you're going to

00:01:34,890 --> 00:01:40,079
deploy on Kara of course but by itself

00:01:37,680 --> 00:01:42,240
kara is pretty light and it's Enterprise

00:01:40,079 --> 00:01:45,720
really interpret is really by the

00:01:42,240 --> 00:01:46,890
features it provides you we got to take

00:01:45,720 --> 00:01:50,430
a look at all the different services

00:01:46,890 --> 00:01:52,680
provided by carafe but thanks to this

00:01:50,430 --> 00:01:56,759
feature you can implement you enterprise

00:01:52,680 --> 00:01:59,820
application I think the great runtime

00:01:56,759 --> 00:02:03,390
for services and micro services platform

00:01:59,820 --> 00:02:06,090
but also for IOT platform I guess most

00:02:03,390 --> 00:02:08,879
of you use carafe maybe to deploy some

00:02:06,090 --> 00:02:12,510
cameras on it maybe to deploy web

00:02:08,879 --> 00:02:13,530
applications may be too deep or let's

00:02:12,510 --> 00:02:15,420
say small

00:02:13,530 --> 00:02:16,560
services applications race applications

00:02:15,420 --> 00:02:19,980
telegram

00:02:16,560 --> 00:02:24,630
so if thanks to the fact is like water

00:02:19,980 --> 00:02:26,850
under pressure ad you can combine this

00:02:24,630 --> 00:02:29,700
different feature and exactly design the

00:02:26,850 --> 00:02:31,970
container you need and if we take a look

00:02:29,700 --> 00:02:36,750
about the services you provide

00:02:31,970 --> 00:02:39,000
obviously you need a Vig iframe oh okay

00:02:36,750 --> 00:02:39,660
it's but it basically is completely idle

00:02:39,000 --> 00:02:42,510
for you

00:02:39,660 --> 00:02:43,319
it probably provided it's provided by by

00:02:42,510 --> 00:02:45,900
character itself

00:02:43,319 --> 00:02:48,000
and thanks to veggie can leverage all

00:02:45,900 --> 00:02:50,400
the feature probably provided by viz

00:02:48,000 --> 00:02:53,160
or your framework if you want you don't

00:02:50,400 --> 00:02:56,040
have to on top of that you're the

00:02:53,160 --> 00:02:58,350
feature resolver again it's something

00:02:56,040 --> 00:03:00,530
completely items for you but when you

00:02:58,350 --> 00:03:02,970
deploy your new application care of

00:03:00,530 --> 00:03:05,069
automatically carers can install all the

00:03:02,970 --> 00:03:09,920
application in needs for your

00:03:05,069 --> 00:03:13,769
application let's say you deploy Tony

00:03:09,920 --> 00:03:16,650
you are not like let's say you want to

00:03:13,769 --> 00:03:18,680
deploy a red services in cars maybe you

00:03:16,650 --> 00:03:21,890
want to use the access to do that

00:03:18,680 --> 00:03:25,560
involve Kate without being able to

00:03:21,890 --> 00:03:27,269
without installing cxf by its own your

00:03:25,560 --> 00:03:30,000
feature your application can

00:03:27,269 --> 00:03:33,630
automatically install ticks as well so

00:03:30,000 --> 00:03:36,299
it's very convenient on top of that you

00:03:33,630 --> 00:03:38,040
have some let's say ready to use

00:03:36,299 --> 00:03:40,200
programming model you can use in new

00:03:38,040 --> 00:03:41,700
application your application new spring

00:03:40,200 --> 00:03:44,160
not a big deal

00:03:41,700 --> 00:03:48,299
spring is already spotted by car you

00:03:44,160 --> 00:03:51,510
want to use here so ODS which is a noisy

00:03:48,299 --> 00:03:52,230
i way of deploying services you can do

00:03:51,510 --> 00:03:55,620
that as well

00:03:52,230 --> 00:03:58,170
you want to use blueprint which is a XML

00:03:55,620 --> 00:04:00,540
description of your services you can do

00:03:58,170 --> 00:04:03,600
do that as well and you can combine all

00:04:00,540 --> 00:04:07,109
these different way of setting it your

00:04:03,600 --> 00:04:09,750
services inside the same container and

00:04:07,109 --> 00:04:14,160
more than that we have some in the blue

00:04:09,750 --> 00:04:17,100
boxes are services provided by default

00:04:14,160 --> 00:04:19,140
by car so of course you can remove these

00:04:17,100 --> 00:04:21,840
services if you do not want to use it

00:04:19,140 --> 00:04:26,430
but in the standard car distribution you

00:04:21,840 --> 00:04:27,110
are video so you have configuration most

00:04:26,430 --> 00:04:28,490
of the time when you

00:04:27,110 --> 00:04:30,560
design an application you need some

00:04:28,490 --> 00:04:33,650
configuration where my database is

00:04:30,560 --> 00:04:36,349
located where I don't know my rest

00:04:33,650 --> 00:04:38,210
services like it's located and most of

00:04:36,349 --> 00:04:41,479
the time you know we are all developers

00:04:38,210 --> 00:04:43,219
so maybe my friend developer has the

00:04:41,479 --> 00:04:45,229
idea to put the configuration in the con

00:04:43,219 --> 00:04:47,900
folder and I never want to perch in the

00:04:45,229 --> 00:04:48,319
config folder and another one it's a

00:04:47,900 --> 00:04:50,870
mess

00:04:48,319 --> 00:04:52,580
so very quickly in Kara we decided to

00:04:50,870 --> 00:04:56,719
put all the configuration in the same

00:04:52,580 --> 00:04:58,610
folder is the EDC folder and I know you

00:04:56,719 --> 00:05:00,860
can decide to change veetc folder to

00:04:58,610 --> 00:05:03,110
another name but basically you know that

00:05:00,860 --> 00:05:06,319
all applications configuration are

00:05:03,110 --> 00:05:08,509
located there and dynamic it means that

00:05:06,319 --> 00:05:10,909
I change the configuration on the fly

00:05:08,509 --> 00:05:12,319
curve will update the configuration and

00:05:10,909 --> 00:05:14,870
new application so that's very

00:05:12,319 --> 00:05:17,150
interesting and census is the way that

00:05:14,870 --> 00:05:19,039
you can create internal instances of

00:05:17,150 --> 00:05:23,659
carriers inside anemic and existing

00:05:19,039 --> 00:05:25,699
instead the the purpose of this is to do

00:05:23,659 --> 00:05:27,919
some kind of snapshot system so let's

00:05:25,699 --> 00:05:29,479
say you have an air running incense it

00:05:27,919 --> 00:05:32,060
runs fine and you want to deploy a new

00:05:29,479 --> 00:05:33,469
application in the in this instance you

00:05:32,060 --> 00:05:35,180
don't want to pollute your existing

00:05:33,469 --> 00:05:38,509
instance because you know it is a good

00:05:35,180 --> 00:05:40,879
one so instead of creating a new let's

00:05:38,509 --> 00:05:42,529
say folder docker and whatever you can

00:05:40,879 --> 00:05:44,599
just create a new instance in Kara

00:05:42,529 --> 00:05:47,120
deploy your application validate it's ok

00:05:44,599 --> 00:05:50,270
and if it's not you just destroy the

00:05:47,120 --> 00:05:52,759
instance and if it's ok you can merge

00:05:50,270 --> 00:05:54,919
your configuration and your application

00:05:52,759 --> 00:05:57,979
to the existing instances but springy

00:05:54,919 --> 00:06:01,159
communi logging out deployment are going

00:05:57,979 --> 00:06:05,029
to be very fast on this ok don't want to

00:06:01,159 --> 00:06:08,449
provide all the details maybe what I saw

00:06:05,029 --> 00:06:10,669
before what I say before is tariffs is

00:06:08,449 --> 00:06:16,580
enterprise ready and you can see here

00:06:10,669 --> 00:06:18,379
VDC Jan di generous GTA J's here so for

00:06:16,580 --> 00:06:21,020
example for Jade here you need a trailer

00:06:18,379 --> 00:06:23,960
you need to deal with transaction and

00:06:21,020 --> 00:06:25,699
you want to use with a best sense let's

00:06:23,960 --> 00:06:28,909
say I don't know I donate

00:06:25,699 --> 00:06:32,659
open JP or whatever you don't have to

00:06:28,909 --> 00:06:35,630
setup your your persistence XML and all

00:06:32,659 --> 00:06:37,969
these stuff multiple times you just

00:06:35,630 --> 00:06:40,580
deploy the entity manager one time as a

00:06:37,969 --> 00:06:42,860
service and all the application

00:06:40,580 --> 00:06:46,189
and all part of your applications that

00:06:42,860 --> 00:06:49,060
use the these pests and service will

00:06:46,189 --> 00:06:52,460
directly leverage what you deploy before

00:06:49,060 --> 00:06:54,919
and more than that so the blue one are

00:06:52,460 --> 00:06:58,219
provided by Kara the modern value can

00:06:54,919 --> 00:07:01,520
extend care up with all the project like

00:06:58,219 --> 00:07:04,759
Tamil like cxs likes encode a bunch of

00:07:01,520 --> 00:07:07,879
all the project provides features but

00:07:04,759 --> 00:07:10,159
you can directly deploy in cars so it

00:07:07,879 --> 00:07:12,680
means that you can extend for example

00:07:10,159 --> 00:07:16,190
this afternoon we we able to talk about

00:07:12,680 --> 00:07:20,090
ActiveMQ you can deploy actual

00:07:16,190 --> 00:07:23,900
implementation so you can meet different

00:07:20,090 --> 00:07:30,349
let's say topology and and purposes of

00:07:23,900 --> 00:07:33,110
your container but this is good for one

00:07:30,349 --> 00:07:35,690
kind of consensus but pretty let's say

00:07:33,110 --> 00:07:38,120
pretty soon we want more than one cars

00:07:35,690 --> 00:07:40,520
in sense and the reason there are

00:07:38,120 --> 00:07:43,250
different reasons why the first reason

00:07:40,520 --> 00:07:45,349
is maybe isolation I mean you want to

00:07:43,250 --> 00:07:48,319
dedicate your Carson sense to one

00:07:45,349 --> 00:07:50,360
specific purpose maybe you want to

00:07:48,319 --> 00:07:54,289
deploy these kind of common roads only

00:07:50,360 --> 00:07:57,319
on one part of your instances you want

00:07:54,289 --> 00:07:59,690
to be to use one instances for an

00:07:57,319 --> 00:08:02,150
academic broker you want to deploy

00:07:59,690 --> 00:08:04,490
another instances just for your web part

00:08:02,150 --> 00:08:07,699
of your web application so the first

00:08:04,490 --> 00:08:10,419
thing is insulation the second thing the

00:08:07,699 --> 00:08:13,729
second reason is failover

00:08:10,419 --> 00:08:14,120
for any reason if my car instances is

00:08:13,729 --> 00:08:17,029
failing

00:08:14,120 --> 00:08:21,289
I would like to recover as soon as I can

00:08:17,029 --> 00:08:24,949
to limit the downtime and pretty soon we

00:08:21,289 --> 00:08:27,229
want also scalability so this instance

00:08:24,949 --> 00:08:29,629
this application what did you finally on

00:08:27,229 --> 00:08:32,300
the unique CAF instance it will be

00:08:29,629 --> 00:08:35,690
spread to a bunch of cars it senses and

00:08:32,300 --> 00:08:41,240
I can use any let's say pile of

00:08:35,690 --> 00:08:44,029
instances in my enterprise platform it

00:08:41,240 --> 00:08:47,329
depends of your use cases and it depends

00:08:44,029 --> 00:08:49,339
of your applications okay maybe most of

00:08:47,329 --> 00:08:51,529
the time you're going to mix isolation

00:08:49,339 --> 00:08:54,110
and scalability

00:08:51,529 --> 00:08:56,720
maybe you will have a cluster of 20

00:08:54,110 --> 00:08:59,420
instances and maybe ten for camel roads

00:08:56,720 --> 00:09:00,829
and ten for web application why not but

00:08:59,420 --> 00:09:06,290
you want to manage all in the Sun

00:09:00,829 --> 00:09:08,600
platform so failure maybe you know that

00:09:06,290 --> 00:09:10,880
in Kara's by itself you have a failover

00:09:08,600 --> 00:09:12,860
mechanism available based on a log

00:09:10,880 --> 00:09:15,079
system you don't have to install

00:09:12,860 --> 00:09:18,200
anything else you just start Cara's and

00:09:15,079 --> 00:09:21,320
you have just set up this and you will

00:09:18,200 --> 00:09:23,269
have a failover system so instead of a

00:09:21,320 --> 00:09:25,279
system is out of the box and it's based

00:09:23,269 --> 00:09:28,029
on unlock this lock could be on a side

00:09:25,279 --> 00:09:30,110
system or it could be on a database

00:09:28,029 --> 00:09:32,470
basically how it works the first

00:09:30,110 --> 00:09:36,320
instance let's start take the lock and

00:09:32,470 --> 00:09:39,260
become a master the other instances try

00:09:36,320 --> 00:09:42,920
to acquire the same lock that we are in

00:09:39,260 --> 00:09:46,610
slave mode okay and even for any reason

00:09:42,920 --> 00:09:48,350
the lock is released by the master the

00:09:46,610 --> 00:09:48,920
slave will take a lock and become a new

00:09:48,350 --> 00:09:51,680
master

00:09:48,920 --> 00:09:54,050
so you don't lose anything all

00:09:51,680 --> 00:09:56,750
configuration all application you deploy

00:09:54,050 --> 00:10:01,820
on your master I also deploy on the

00:09:56,750 --> 00:10:05,120
slaves and pretty soon as soon as the

00:10:01,820 --> 00:10:07,279
lock is released or lost then a slave

00:10:05,120 --> 00:10:11,480
will become the new master and you will

00:10:07,279 --> 00:10:14,390
recover all your your application to do

00:10:11,480 --> 00:10:16,970
that is very easy to set up you have one

00:10:14,390 --> 00:10:19,250
side to change in the system in veggie

00:10:16,970 --> 00:10:21,769
folder you are one filename system that

00:10:19,250 --> 00:10:23,839
properties and if you take a look at the

00:10:21,769 --> 00:10:25,399
bottom of this file you will see some

00:10:23,839 --> 00:10:27,970
comments about the log system and

00:10:25,399 --> 00:10:30,800
basically it's where you store your log

00:10:27,970 --> 00:10:32,930
so if you use a file system it means

00:10:30,800 --> 00:10:36,320
that all your character instances as to

00:10:32,930 --> 00:10:41,290
share the same file system using an SS

00:10:36,320 --> 00:10:44,240
CSS or whatever okay so that's the only

00:10:41,290 --> 00:10:45,769
the only requirement when you solve a

00:10:44,240 --> 00:10:49,070
first instance you will see in the low

00:10:45,769 --> 00:10:51,320
envelope file info local boy it means

00:10:49,070 --> 00:10:55,100
that the lock has been acquired and this

00:10:51,320 --> 00:10:58,519
instance of Kara is a master if the one

00:10:55,100 --> 00:11:00,199
you're going to use and if you start

00:10:58,519 --> 00:11:02,810
another instance you will see in the

00:11:00,199 --> 00:11:05,600
laws trying to lock so it means he is

00:11:02,810 --> 00:11:07,250
waiting for the lock is a slave okay

00:11:05,600 --> 00:11:10,430
they are not limiting

00:11:07,250 --> 00:11:14,150
of slaves you can set up 10 20 slaves

00:11:10,430 --> 00:11:14,810
you want the instances are all sing

00:11:14,150 --> 00:11:17,210
together

00:11:14,810 --> 00:11:19,760
so if I deploy an application on my

00:11:17,210 --> 00:11:23,120
master this application will be deployed

00:11:19,760 --> 00:11:25,190
on the slaves as well if the master

00:11:23,120 --> 00:11:26,600
fails again the lock is released and the

00:11:25,190 --> 00:11:29,960
slave will become a master

00:11:26,600 --> 00:11:32,870
the only drawback of this approach is an

00:11:29,960 --> 00:11:37,220
active status passive system so if you

00:11:32,870 --> 00:11:40,460
set up five slaves with these five

00:11:37,220 --> 00:11:41,330
slaves are completely passive you cannot

00:11:40,460 --> 00:11:43,880
login on it

00:11:41,330 --> 00:11:46,580
you cannot do anything on it so it's

00:11:43,880 --> 00:11:48,680
really only the master is active so

00:11:46,580 --> 00:11:50,570
active passive is not maybe what you

00:11:48,680 --> 00:11:55,520
want but for failover is pretty easy to

00:11:50,570 --> 00:11:58,640
setup so never seen what you can do is

00:11:55,520 --> 00:12:01,370
instead of having a cheap passives you

00:11:58,640 --> 00:12:03,560
want to do active active so you want to

00:12:01,370 --> 00:12:06,200
set a bunch of types instances all I

00:12:03,560 --> 00:12:08,780
keep together and to sing the state of

00:12:06,200 --> 00:12:11,870
the caffeine senses on the fly so if I

00:12:08,780 --> 00:12:13,970
deploy an application on one instance I

00:12:11,870 --> 00:12:17,180
would like to see this application

00:12:13,970 --> 00:12:19,730
deployed on all other instances this

00:12:17,180 --> 00:12:23,300
time is not prided by default in karate

00:12:19,730 --> 00:12:27,650
you have to install a new feature on top

00:12:23,300 --> 00:12:32,180
of cars the name is Scarcella so Silla

00:12:27,650 --> 00:12:32,990
is a sub-project of tariffs it provides

00:12:32,180 --> 00:12:35,960
to you

00:12:32,990 --> 00:12:39,760
the synchronization discover discovery

00:12:35,960 --> 00:12:43,700
and active active setup of your cluster

00:12:39,760 --> 00:12:46,250
it were powered by a dual cast so it

00:12:43,700 --> 00:12:48,110
means that any action you're going to do

00:12:46,250 --> 00:12:50,930
on one node will be sent to another

00:12:48,110 --> 00:12:53,420
local data grid share by all other nodes

00:12:50,930 --> 00:12:56,350
so the state of the cluster is Tory

00:12:53,420 --> 00:12:59,000
nozzle that it's very easy to install

00:12:56,350 --> 00:13:01,250
feature install cellar I'm not kidding

00:12:59,000 --> 00:13:03,980
injustice you start your graph instances

00:13:01,250 --> 00:13:06,320
you do feature in Tulsa is done Sarah is

00:13:03,980 --> 00:13:08,660
ready to be used there are no single

00:13:06,320 --> 00:13:11,120
point of failure because the other

00:13:08,660 --> 00:13:14,030
scales instances embedded in each

00:13:11,120 --> 00:13:16,190
kerosene sense so it means that if I

00:13:14,030 --> 00:13:18,560
lose one instance the cluster state is

00:13:16,190 --> 00:13:20,690
still in sync because I have my özil

00:13:18,560 --> 00:13:23,570
cache instances running and

00:13:20,690 --> 00:13:26,000
sing together so I need at least one

00:13:23,570 --> 00:13:29,090
node just to maintain my cluster its

00:13:26,000 --> 00:13:32,030
predominant you have different way of

00:13:29,090 --> 00:13:34,760
discover the nodes in your cluster so

00:13:32,030 --> 00:13:38,420
when a new you start a new cars instance

00:13:34,760 --> 00:13:40,670
to discover this node you have different

00:13:38,420 --> 00:13:43,220
mechanism the first one is really cast

00:13:40,670 --> 00:13:45,200
so when a carrot instant start in

00:13:43,220 --> 00:13:48,860
sentiment occurs message to on the

00:13:45,200 --> 00:13:52,520
network and we exist in calais instances

00:13:48,860 --> 00:13:55,700
running seller can get with notification

00:13:52,520 --> 00:13:57,410
and update the cluster but if mellitus

00:13:55,700 --> 00:13:59,870
multicast is not available of the

00:13:57,410 --> 00:14:01,430
network because your network

00:13:59,870 --> 00:14:04,100
administrator is a little paranoid

00:14:01,430 --> 00:14:07,100
paranoiacs instance you can use static

00:14:04,100 --> 00:14:09,920
IP addresses so you just leave via the

00:14:07,100 --> 00:14:11,990
net mask and the IP addresses where your

00:14:09,920 --> 00:14:14,870
car's instance is running but you can

00:14:11,990 --> 00:14:19,100
also mix instances running locally on

00:14:14,870 --> 00:14:22,250
your unfinished cluster with instances

00:14:19,100 --> 00:14:24,530
running on amazon for instance in other

00:14:22,250 --> 00:14:27,440
cars you can send broadcast messages

00:14:24,530 --> 00:14:31,370
with a ws for example and so you can

00:14:27,440 --> 00:14:34,310
discover miss nodes running on on Amazon

00:14:31,370 --> 00:14:36,980
another thing that is not very liked by

00:14:34,310 --> 00:14:40,190
other cars but party by seller you can

00:14:36,980 --> 00:14:41,900
use Cuba niches so it means value if you

00:14:40,190 --> 00:14:46,040
are the port you can discover your nodes

00:14:41,900 --> 00:14:47,840
using key relatives etcd as well so we

00:14:46,040 --> 00:14:50,300
are different discovery mechanism and

00:14:47,840 --> 00:14:53,270
you can extend and implement your own

00:14:50,300 --> 00:14:58,150
mechanism and so on it just one service

00:14:53,270 --> 00:15:02,390
to implement pretty easy the core

00:14:58,150 --> 00:15:04,610
purpose of seller is to synchronize the

00:15:02,390 --> 00:15:06,890
character instances all together but we

00:15:04,610 --> 00:15:10,130
are also provide additional features

00:15:06,890 --> 00:15:12,380
like GUI GI distributed over here it

00:15:10,130 --> 00:15:15,560
means that one service is located on car

00:15:12,380 --> 00:15:19,130
one care instance can be used remotely

00:15:15,560 --> 00:15:21,800
by all the instances we also provide XP

00:15:19,130 --> 00:15:24,440
balancer so means value to deploy web

00:15:21,800 --> 00:15:27,950
application or servlet in one calcium

00:15:24,440 --> 00:15:30,290
sense we select and be available on the

00:15:27,950 --> 00:15:32,270
whole cluster even if you don't give the

00:15:30,290 --> 00:15:33,619
fly everywhere thanks to the load

00:15:32,270 --> 00:15:38,839
balancer

00:15:33,619 --> 00:15:42,059
bye-bye Sara so how it works pretty easy

00:15:38,839 --> 00:15:43,860
we have a data grid this one favored by

00:15:42,059 --> 00:15:47,699
other cuts is where we store the cluster

00:15:43,860 --> 00:15:51,839
and in each size census we are basically

00:15:47,699 --> 00:15:53,730
for call feature the 3v3 one I enabled

00:15:51,839 --> 00:15:56,040
by default and another one is visible

00:15:53,730 --> 00:15:58,529
let's take a look so here are my house

00:15:56,040 --> 00:16:01,079
instance my car instance I installed

00:15:58,529 --> 00:16:03,689
cellar feature and when I install dinner

00:16:01,079 --> 00:16:05,720
I have three pieces installed the

00:16:03,689 --> 00:16:08,910
producer the consume analyst in Canada

00:16:05,720 --> 00:16:10,290
what's the purpose of so the data grid

00:16:08,910 --> 00:16:13,259
again is where I store my cluster

00:16:10,290 --> 00:16:16,439
no-brainer is pretty easy the producer

00:16:13,259 --> 00:16:19,230
is the the pieces of Sara that send an

00:16:16,439 --> 00:16:21,119
event to the other nodes let's say you

00:16:19,230 --> 00:16:24,119
is you in from an application on one

00:16:21,119 --> 00:16:26,399
node you have to notify the others but

00:16:24,119 --> 00:16:30,389
you install this application locally and

00:16:26,399 --> 00:16:32,959
we have to do the same the producer send

00:16:30,389 --> 00:16:34,139
a cluster event from one node to another

00:16:32,959 --> 00:16:37,529
okay

00:16:34,139 --> 00:16:39,480
and of course if I have a producer on

00:16:37,529 --> 00:16:42,389
one hand I have a consumer on the other

00:16:39,480 --> 00:16:45,239
so on the other node I have a consumer

00:16:42,389 --> 00:16:47,369
but we see the cluster hidden and react

00:16:45,239 --> 00:16:49,439
accordingly in running your application

00:16:47,369 --> 00:16:53,910
in seinem your configuration whatever

00:16:49,439 --> 00:16:56,879
and I have one consumer but I have

00:16:53,910 --> 00:16:59,879
multiple endless and the reason is I

00:16:56,879 --> 00:17:03,869
have different cluster events depending

00:16:59,879 --> 00:17:07,679
of if it's a configuration if it's an

00:17:03,869 --> 00:17:09,569
application if it's a feature for one

00:17:07,679 --> 00:17:12,720
who knows what is the feature in Kara's

00:17:09,569 --> 00:17:15,689
it's different clusters so I have

00:17:12,720 --> 00:17:19,110
different angle and the synchronizer are

00:17:15,689 --> 00:17:21,419
used when a new node G on a cluster he

00:17:19,110 --> 00:17:24,329
has to synchronize the state of a

00:17:21,419 --> 00:17:27,079
cluster with its local state and here

00:17:24,329 --> 00:17:29,820
you can define different think policies

00:17:27,079 --> 00:17:32,279
so for instance you can decide to do a

00:17:29,820 --> 00:17:34,260
merge so I will create from a cluster

00:17:32,279 --> 00:17:37,110
and so I update my configuration locally

00:17:34,260 --> 00:17:39,750
and then I push from my local node to

00:17:37,110 --> 00:17:41,940
the cluster or you can decide but the

00:17:39,750 --> 00:17:43,529
cluster is only the master so I

00:17:41,940 --> 00:17:46,470
retrieved from the state from the

00:17:43,529 --> 00:17:49,350
cluster and I override my configuration

00:17:46,470 --> 00:17:51,419
my application locally on my node but I

00:17:49,350 --> 00:17:53,429
don't press anything on the on the

00:17:51,419 --> 00:17:55,620
cluster all on the other hand you can

00:17:53,429 --> 00:17:57,510
decide the node is my master and in that

00:17:55,620 --> 00:18:00,870
case you will override the cluster state

00:17:57,510 --> 00:18:03,299
with a local node state so this is

00:18:00,870 --> 00:18:05,940
possible just by configuration you can

00:18:03,299 --> 00:18:09,600
decide the simplest you want the

00:18:05,940 --> 00:18:11,760
listener last thing they are disabled by

00:18:09,600 --> 00:18:14,549
default but you can enable if you want

00:18:11,760 --> 00:18:16,830
is when when you have a local event

00:18:14,549 --> 00:18:19,380
let's say you change the configuration

00:18:16,830 --> 00:18:21,720
in your invitation folder you can decide

00:18:19,380 --> 00:18:25,230
to broadcast this change to the cluster

00:18:21,720 --> 00:18:28,169
owners by default it's not okay but you

00:18:25,230 --> 00:18:29,730
can enable it it means by default when

00:18:28,169 --> 00:18:32,100
you want to install an application on

00:18:29,730 --> 00:18:35,100
the cluster you have to use a dedicated

00:18:32,100 --> 00:18:38,400
cluster common cluster bundle install

00:18:35,100 --> 00:18:40,740
cluster feature installs instance if you

00:18:38,400 --> 00:18:43,500
enable the listener a simple feature in

00:18:40,740 --> 00:18:45,510
style bundle install is enough then you

00:18:43,500 --> 00:18:50,429
will be brokered broadcast into the

00:18:45,510 --> 00:18:52,409
cluster this is a different resources

00:18:50,429 --> 00:18:54,690
seller can sing for you

00:18:52,409 --> 00:18:59,760
so first the features who knows the Kara

00:18:54,690 --> 00:19:02,480
feature so for the others a feature in

00:18:59,760 --> 00:19:06,090
Kara's is a descriptor of an application

00:19:02,480 --> 00:19:08,429
so basically a feature is a list of

00:19:06,090 --> 00:19:11,010
application components plus the

00:19:08,429 --> 00:19:12,840
configuration plus optionally some other

00:19:11,010 --> 00:19:18,590
feature that can be used in your own

00:19:12,840 --> 00:19:22,830
feature okay vendors is the OSGi

00:19:18,590 --> 00:19:25,799
component and configuration optionally

00:19:22,830 --> 00:19:27,570
you have OVR and even admin support is

00:19:25,799 --> 00:19:30,179
not enabled by default is very

00:19:27,570 --> 00:19:34,049
simplistic ad and again you have

00:19:30,179 --> 00:19:37,309
different options like geo geo HTTP

00:19:34,049 --> 00:19:37,309
balance ernst a blogger

00:19:37,430 --> 00:19:42,650
and another feature that you can use in

00:19:39,740 --> 00:19:45,920
cellar is the cluster group so let's say

00:19:42,650 --> 00:19:48,590
I have a D cluster of 50 instances and

00:19:45,920 --> 00:19:51,470
again I would like to mix my cluster

00:19:48,590 --> 00:19:54,740
with some isolation so I would like to

00:19:51,470 --> 00:19:56,690
deploy my application only on five nodes

00:19:54,740 --> 00:19:59,390
in my cluster and I would like to

00:19:56,690 --> 00:20:01,490
dedicate time of a nodes for let's say I

00:19:59,390 --> 00:20:03,770
don't know he TX I've read services

00:20:01,490 --> 00:20:05,600
finds that in that case you can use

00:20:03,770 --> 00:20:08,750
cluster groups so in class or group you

00:20:05,600 --> 00:20:12,140
decide ok within my cluster group Apache

00:20:08,750 --> 00:20:14,809
con one and I containing with five nodes

00:20:12,140 --> 00:20:17,480
and I have another cluster group Apache

00:20:14,809 --> 00:20:19,160
come to you containing 20 nuts and when

00:20:17,480 --> 00:20:21,770
you deploy an application you target

00:20:19,160 --> 00:20:23,840
your specific cluster group by default

00:20:21,770 --> 00:20:27,410
you have a unique cluster group named

00:20:23,840 --> 00:20:29,390
default containing all instances all

00:20:27,410 --> 00:20:34,730
nodes but you can dedicate some

00:20:29,390 --> 00:20:36,970
deployment you can also a node can be

00:20:34,730 --> 00:20:39,500
part of multiple cluster group's fewer

00:20:36,970 --> 00:20:42,309
okay so it could be for instance you can

00:20:39,500 --> 00:20:44,840
deploy to application in the same node

00:20:42,309 --> 00:20:47,360
even though this part of a queue cluster

00:20:44,840 --> 00:20:52,190
with the purple is just target and is

00:20:47,360 --> 00:20:55,880
related with deployment so Scylla is

00:20:52,190 --> 00:20:58,460
good but you need a manual action test

00:20:55,880 --> 00:21:01,390
it means that first before using Sara I

00:20:58,460 --> 00:21:04,670
have to install my Kara's instance and

00:21:01,390 --> 00:21:08,240
then log on my cart instance and do

00:21:04,670 --> 00:21:12,920
feature installed Sarah not very dynamic

00:21:08,240 --> 00:21:16,820
and more than that all the preparation

00:21:12,920 --> 00:21:21,710
all we set up as to be done by hand so

00:21:16,820 --> 00:21:25,340
what we want is to provide a ready to

00:21:21,710 --> 00:21:28,429
use curve instance embedding already and

00:21:25,340 --> 00:21:31,370
bending Sarah package as a docker image

00:21:28,429 --> 00:21:34,220
and be able to automatically bootstrap

00:21:31,370 --> 00:21:36,679
this so it's one approach I don't I

00:21:34,220 --> 00:21:40,910
don't say is the only one that is we

00:21:36,679 --> 00:21:42,500
have the approach I propose here so here

00:21:40,910 --> 00:21:45,530
we're going to mix two things we're

00:21:42,500 --> 00:21:48,230
going to be darker and marathon to

00:21:45,530 --> 00:21:49,820
bootstrap the the instances plus Ella to

00:21:48,230 --> 00:21:51,440
synchronize all instances all together

00:21:49,820 --> 00:21:54,230
so we mix

00:21:51,440 --> 00:21:56,559
technologies the first thing we're going

00:21:54,230 --> 00:21:59,419
to do is to create the chaos

00:21:56,559 --> 00:22:01,700
distribution curve distribution is

00:21:59,419 --> 00:22:05,450
basically cars plus some application and

00:22:01,700 --> 00:22:08,809
set up so I am they cut off and set all

00:22:05,450 --> 00:22:10,639
together by default and I created my

00:22:08,809 --> 00:22:13,370
custom distribution so if here you can

00:22:10,639 --> 00:22:15,080
add your own application if you want and

00:22:13,370 --> 00:22:17,690
should you write in Cara we have a

00:22:15,080 --> 00:22:20,269
carrot maven plugin but allows you to

00:22:17,690 --> 00:22:25,070
create very easily a custom distribution

00:22:20,269 --> 00:22:27,440
so to the work here are some the only

00:22:25,070 --> 00:22:30,220
thing I defined in the dependencies is

00:22:27,440 --> 00:22:32,750
the location of my feature axonal and

00:22:30,220 --> 00:22:35,090
the location of my applications

00:22:32,750 --> 00:22:38,899
basically and of course Allah by itself

00:22:35,090 --> 00:22:41,210
and then I justify this is the butch

00:22:38,899 --> 00:22:43,509
feature that I would like so the good

00:22:41,210 --> 00:22:46,340
feature is as soon as I start Cara's

00:22:43,509 --> 00:22:49,159
these applications will be started

00:22:46,340 --> 00:22:50,899
automatically so as a good picture here

00:22:49,159 --> 00:22:53,809
you can see setup because I would like

00:22:50,899 --> 00:22:57,500
to stop Sarah as soon as I start my calf

00:22:53,809 --> 00:22:59,990
instances and so I just run mvn clean

00:22:57,500 --> 00:23:01,789
install and at the NIR the deep file in

00:22:59,990 --> 00:23:05,149
the tarball containing my calf

00:23:01,789 --> 00:23:08,269
distribution plus lr+ eventually all my

00:23:05,149 --> 00:23:11,210
applications that I want first step so I

00:23:08,269 --> 00:23:13,909
have my custom care of distribution and

00:23:11,210 --> 00:23:17,210
bathing cell on my application we are

00:23:13,909 --> 00:23:19,519
good but is not enough now we would like

00:23:17,210 --> 00:23:22,340
to package my cus this custom

00:23:19,519 --> 00:23:24,860
distribution of the docker image to do

00:23:22,340 --> 00:23:30,440
that we create is also 5 so these are

00:23:24,860 --> 00:23:33,159
the files they endure and get my setup

00:23:30,440 --> 00:23:38,090
my distribution of carrot patella and

00:23:33,159 --> 00:23:41,059
installing the docker image ok then do a

00:23:38,090 --> 00:23:44,509
Molly similar I have to do is go to

00:23:41,059 --> 00:23:46,789
build so the doctor drill will say about

00:23:44,509 --> 00:23:50,990
my dacha file and you would create a

00:23:46,789 --> 00:23:54,139
docker image containing the Java based

00:23:50,990 --> 00:23:56,389
image plus my custom card distribution

00:23:54,139 --> 00:23:59,330
containing cinnamon and my application

00:23:56,389 --> 00:24:02,880
and here on earth

00:23:59,330 --> 00:24:06,450
Sara instance we are good but now we

00:24:02,880 --> 00:24:09,450
actually with trav this docker image ok

00:24:06,450 --> 00:24:11,100
first thing to do that is to do docker

00:24:09,450 --> 00:24:13,350
run again and again in the value of

00:24:11,100 --> 00:24:16,920
nodes not what we want when we want

00:24:13,350 --> 00:24:20,630
something more dynamic first we're we're

00:24:16,920 --> 00:24:24,810
going to introduce Meadows the measures

00:24:20,630 --> 00:24:28,140
support docker and so you can describe

00:24:24,810 --> 00:24:31,440
the doctor images for you and its

00:24:28,140 --> 00:24:34,170
methods first marathon so we have to use

00:24:31,440 --> 00:24:38,580
this to do some kind of dynamic

00:24:34,170 --> 00:24:41,130
bootstrapping to set up your measure

00:24:38,580 --> 00:24:45,000
from marathon you have to approach the

00:24:41,130 --> 00:24:47,160
first easy way is to use the US so with

00:24:45,000 --> 00:24:49,140
the US you have all embarrassed

00:24:47,160 --> 00:24:51,570
so it's pride by method sir you have

00:24:49,140 --> 00:24:53,880
measures plus marathon all together it's

00:24:51,570 --> 00:24:57,660
pretty easy to bootstrap and to start

00:24:53,880 --> 00:25:00,150
with another approach you can do your

00:24:57,660 --> 00:25:02,970
own made this us if you want so

00:25:00,150 --> 00:25:04,080
basically you compile in some errors you

00:25:02,970 --> 00:25:07,410
start your zookeeper

00:25:04,080 --> 00:25:11,940
you saw the Middle Ages use Amazon and

00:25:07,410 --> 00:25:14,280
you some happen it really easy it could

00:25:11,940 --> 00:25:17,160
belong to reboots travel to see you and

00:25:14,280 --> 00:25:20,460
make depending of your machine but it

00:25:17,160 --> 00:25:24,630
works okay so it is up to you at the end

00:25:20,460 --> 00:25:28,680
it's exactly the same and after that we

00:25:24,630 --> 00:25:31,800
create a marathon JSON configuration for

00:25:28,680 --> 00:25:35,280
Oracle application so basically what I

00:25:31,800 --> 00:25:39,240
do here is lightly my name of my

00:25:35,280 --> 00:25:42,300
distribution is a Kara Kara Sarah my my

00:25:39,240 --> 00:25:45,300
face the number of CPU memory and the

00:25:42,300 --> 00:25:48,960
number of references that's my initial

00:25:45,300 --> 00:25:51,750
setup so it means that here I will start

00:25:48,960 --> 00:25:53,990
with three essentials of my custom

00:25:51,750 --> 00:25:53,990
cabinetry

00:25:54,090 --> 00:25:59,610
a different location so I see doctor

00:25:56,940 --> 00:26:04,650
this is the location of my docker image

00:25:59,610 --> 00:26:06,780
and this is the phone number and the way

00:26:04,650 --> 00:26:09,300
I expose my phone number okay

00:26:06,780 --> 00:26:14,070
nothing special that we only thing to

00:26:09,300 --> 00:26:18,740
remember is the number three and after

00:26:14,070 --> 00:26:21,110
that I start my DCOs marathon dashboard

00:26:18,740 --> 00:26:26,070
so this is the initial status

00:26:21,110 --> 00:26:28,770
so let's see cpu available on my posture

00:26:26,070 --> 00:26:31,230
I have seven together gigabytes of

00:26:28,770 --> 00:26:34,100
memory and for now I don't have any

00:26:31,230 --> 00:26:39,900
services so I'm in an empty let's say

00:26:34,100 --> 00:26:43,380
soup space now we deploy or carob

00:26:39,900 --> 00:26:46,170
distribution so imagine again is a my

00:26:43,380 --> 00:26:49,350
case is character salami but imagine you

00:26:46,170 --> 00:26:52,260
also add your application to do that I

00:26:49,350 --> 00:26:54,600
do a render this and I provide my JSON

00:26:52,260 --> 00:27:00,890
configuration the one I show you before

00:26:54,600 --> 00:27:03,650
and so here you are recap about all that

00:27:00,890 --> 00:27:06,840
we set up so especially the number

00:27:03,650 --> 00:27:10,470
instantly is number of CPU so instances

00:27:06,840 --> 00:27:12,330
the gives you the docker image CPU and

00:27:10,470 --> 00:27:15,680
all this stuff when I'm ready I just

00:27:12,330 --> 00:27:19,590
click on run and here you can see

00:27:15,680 --> 00:27:21,480
deploying three instances so it means

00:27:19,590 --> 00:27:25,290
that it's gonna take my daughter image

00:27:21,480 --> 00:27:28,380
and boots Travis images on different

00:27:25,290 --> 00:27:30,240
machines so imagine your mark and setup

00:27:28,380 --> 00:27:33,480
contain London I don't know maybe ten

00:27:30,240 --> 00:27:34,950
machines or whatever then you will be it

00:27:33,480 --> 00:27:38,490
will spread the deployment on free

00:27:34,950 --> 00:27:40,470
machine again remember we use Sarah so I

00:27:38,490 --> 00:27:42,570
mean that these instances will be seen

00:27:40,470 --> 00:27:45,410
together from a Karass perspective

00:27:42,570 --> 00:27:45,410
thanks to Sarah

00:27:46,770 --> 00:27:52,860
and now we have a new test running

00:27:49,710 --> 00:27:54,960
containing multiple instances so you can

00:27:52,860 --> 00:27:59,670
see a different use it and stuff like

00:27:54,960 --> 00:28:01,650
that but now we want to scare so we

00:27:59,670 --> 00:28:03,480
started with with three instances and we

00:28:01,650 --> 00:28:05,550
want to bootstrap let's say ten

00:28:03,480 --> 00:28:07,500
instances or twenty and sensing for

00:28:05,550 --> 00:28:10,140
instance your user is Black Friday you

00:28:07,500 --> 00:28:12,570
know we go we gonna you're gonna have a

00:28:10,140 --> 00:28:14,130
lot of load during Black Friday and you

00:28:12,570 --> 00:28:17,660
want to put some new incentives very

00:28:14,130 --> 00:28:21,210
quickly so is what we we gonna do using

00:28:17,660 --> 00:28:22,980
using marathon so in marathon you can go

00:28:21,210 --> 00:28:25,800
on the dashboard in the service and you

00:28:22,980 --> 00:28:28,440
can click on scale and define the new

00:28:25,800 --> 00:28:31,890
number of instances you want so you can

00:28:28,440 --> 00:28:35,220
go from three to ten or from ten to two

00:28:31,890 --> 00:28:37,290
five whatever you want will you knows

00:28:35,220 --> 00:28:40,320
the key scenes the new nodes are pretty

00:28:37,290 --> 00:28:43,050
important they are single together again

00:28:40,320 --> 00:28:46,250
with sella it means that if I change a

00:28:43,050 --> 00:28:48,960
configuration in one node all nodes

00:28:46,250 --> 00:28:51,300
whatever is new nodes or not it doesn't

00:28:48,960 --> 00:28:53,220
really matter these nodes will be synced

00:28:51,300 --> 00:28:55,860
together all together in terms of

00:28:53,220 --> 00:28:59,250
configuration and application so let's

00:28:55,860 --> 00:29:04,440
do that so I do on my service and I

00:28:59,250 --> 00:29:07,860
click on scale yeah and then I add a two

00:29:04,440 --> 00:29:11,070
five new instances so I go from three to

00:29:07,860 --> 00:29:13,559
five so it means that now you can see it

00:29:11,070 --> 00:29:15,929
is growing up I am more instances

00:29:13,559 --> 00:29:20,580
running and again this thing senses are

00:29:15,929 --> 00:29:22,530
seeing all together so it means that we

00:29:20,580 --> 00:29:24,870
implemented dynamic scalability my

00:29:22,530 --> 00:29:26,970
dynamic means that of course you still

00:29:24,870 --> 00:29:29,880
have a manual action to do is the number

00:29:26,970 --> 00:29:31,410
of instances but you don't care about if

00:29:29,880 --> 00:29:33,390
the application are deployed if a

00:29:31,410 --> 00:29:35,730
configuration are seemed altogether we

00:29:33,390 --> 00:29:38,030
don't care the only thing that you

00:29:35,730 --> 00:29:41,700
manage you is the number of instances

00:29:38,030 --> 00:29:44,670
increase or decrease okay it means that

00:29:41,700 --> 00:29:47,010
you you may have one team dedicated for

00:29:44,670 --> 00:29:51,030
let's say your platform management and

00:29:47,010 --> 00:29:54,190
another team dedicated on that a Karass

00:29:51,030 --> 00:29:57,860
management the the configuration or what

00:29:54,190 --> 00:30:00,140
means that one one thing but it's really

00:29:57,860 --> 00:30:03,409
interesting inside as well is you can

00:30:00,140 --> 00:30:05,000
logon on one instance or another one it

00:30:03,409 --> 00:30:06,890
doesn't really matter all actually we're

00:30:05,000 --> 00:30:08,929
going to do on one will be spread to the

00:30:06,890 --> 00:30:11,990
others there are no notion of cluster

00:30:08,929 --> 00:30:16,309
manager whatever any instances is a

00:30:11,990 --> 00:30:18,500
manager of the cluster but now we can we

00:30:16,309 --> 00:30:21,830
can go forward I mean we can go further

00:30:18,500 --> 00:30:24,470
in term of what we can provide in seller

00:30:21,830 --> 00:30:27,710
we plan to provide a marathon scheduler

00:30:24,470 --> 00:30:31,789
by its own it means that you don't have

00:30:27,710 --> 00:30:34,190
to set up the number of instances by

00:30:31,789 --> 00:30:37,429
hand you can define a polishing center

00:30:34,190 --> 00:30:40,220
that automatically deals with marathon

00:30:37,429 --> 00:30:43,309
to say I need three more instances

00:30:40,220 --> 00:30:46,340
depending on the load for instance okay

00:30:43,309 --> 00:30:48,860
so it's something that we solid Intel is

00:30:46,340 --> 00:30:52,700
not yet released it will be including in

00:30:48,860 --> 00:30:55,789
the next cell releases but it's a nice

00:30:52,700 --> 00:30:58,130
and killer and the purpose is again to

00:30:55,789 --> 00:31:01,730
your automatic automatically change the

00:30:58,130 --> 00:31:04,730
number of instantly another thing that

00:31:01,730 --> 00:31:07,100
we can we plan it to provide an official

00:31:04,730 --> 00:31:09,470
docker image we have some care of docker

00:31:07,100 --> 00:31:10,520
images but now not official and the down

00:31:09,470 --> 00:31:13,460
debates era

00:31:10,520 --> 00:31:16,190
so we want we want we time to provide

00:31:13,460 --> 00:31:18,860
two means two docker images one is

00:31:16,190 --> 00:31:24,080
basically different version of cars and

00:31:18,860 --> 00:31:26,840
one is Calais Priscilla and afters as we

00:31:24,080 --> 00:31:29,450
can leverage this us in the u.s. you

00:31:26,840 --> 00:31:31,610
have universe so the universe in the

00:31:29,450 --> 00:31:33,919
u.s. is packages but you can easily

00:31:31,610 --> 00:31:38,299
bootstrap an insult we plan to provide

00:31:33,919 --> 00:31:41,480
the instances of this universe for this

00:31:38,299 --> 00:31:44,840
us for the one who knows we're going to

00:31:41,480 --> 00:31:47,179
do you you are the charms in juju is

00:31:44,840 --> 00:31:51,190
exactly the same and it's already done

00:31:47,179 --> 00:31:51,190
for juju is not yet done for this us

00:31:53,279 --> 00:32:13,889
do you have any questions yes but not

00:32:11,199 --> 00:32:19,809
exactly this on purpose

00:32:13,889 --> 00:32:21,339
it should I mean let's talk about storm

00:32:19,809 --> 00:32:23,979
or beam or whatever because I'm also

00:32:21,339 --> 00:32:27,879
working on being they provide a on let's

00:32:23,979 --> 00:32:32,769
say providing system if you plan to

00:32:27,879 --> 00:32:35,199
deploy some json or ignite whatever

00:32:32,769 --> 00:32:36,819
interest then it makes sense that is not

00:32:35,199 --> 00:32:41,709
the first purpose the first purpose of

00:32:36,819 --> 00:32:45,190
this is multi boot strap non applique

00:32:41,709 --> 00:32:49,589
this tributed application to to to kind

00:32:45,190 --> 00:32:49,589
of platform yes

00:32:55,650 --> 00:33:04,770
nah he's really each other yeah

00:33:00,780 --> 00:33:04,770
there's another question over there

00:33:15,720 --> 00:33:20,509
and then the second one what makes

00:33:20,900 --> 00:33:29,170
ah that's a good question first point

00:33:26,090 --> 00:33:29,170
why doctor

00:33:29,440 --> 00:33:34,520
honestly we I remember I think it was

00:33:32,570 --> 00:33:38,330
two years ago we held a lot of

00:33:34,520 --> 00:33:40,040
discussion between why why do you need

00:33:38,330 --> 00:33:41,990
doctor when you use cars

00:33:40,040 --> 00:33:44,750
I mean character each song is a

00:33:41,990 --> 00:33:47,059
container so it means that deploy a

00:33:44,750 --> 00:33:50,360
container is the container maybe doesn't

00:33:47,059 --> 00:33:55,429
make sense but why doctor is just

00:33:50,360 --> 00:33:58,429
leverage the existing like say ecosystem

00:33:55,429 --> 00:34:00,260
like the swamp like a medicine marathon

00:33:58,429 --> 00:34:04,250
and all vistas that's the only reason

00:34:00,260 --> 00:34:07,309
why they are no strong I mean by itself

00:34:04,250 --> 00:34:10,840
cars could be a container by and it was

00:34:07,309 --> 00:34:10,840
what we did at the beginning

00:34:15,589 --> 00:34:22,129
and it works you can do the same hopeful

00:34:18,649 --> 00:34:24,259
4 vs the reason why is simply because

00:34:22,129 --> 00:34:26,599
docker image is very convenient just to

00:34:24,259 --> 00:34:28,989
package all together but mostly the

00:34:26,599 --> 00:34:34,969
reason and now the second point is why

00:34:28,989 --> 00:34:38,119
measures more than two bandages for two

00:34:34,969 --> 00:34:41,809
reasons first reason is I take my Apache

00:34:38,119 --> 00:34:44,979
cart and I prefer battery project but

00:34:41,809 --> 00:34:48,739
not technical decision that now honestly

00:34:44,979 --> 00:34:51,139
one of the reason we support kubernetes

00:34:48,739 --> 00:34:52,879
in Serra and sarra we are the kubernetes

00:34:51,139 --> 00:34:56,059
pod ready for discovery and

00:34:52,879 --> 00:34:59,059
bootstrapping all this time so the

00:34:56,059 --> 00:35:02,719
reason why measures is simply because we

00:34:59,059 --> 00:35:04,880
are this marathon schedule available and

00:35:02,719 --> 00:35:07,519
ultimately will have been to use Apache

00:35:04,880 --> 00:35:10,339
war for instance just to boost up the

00:35:07,519 --> 00:35:14,839
character instances but what we did that

00:35:10,339 --> 00:35:19,489
can exactly work with we with kubernetes

00:35:14,839 --> 00:35:22,369
and I know Bob is using communities in

00:35:19,489 --> 00:35:26,689
his project again this is not something

00:35:22,369 --> 00:35:29,869
it's just an example then not nothing I

00:35:26,689 --> 00:35:32,449
mean nothing is are coded in sell our

00:35:29,869 --> 00:35:36,410
cars to use only methods you of course

00:35:32,449 --> 00:35:41,979
you can switch to DNS G to etcd chica

00:35:36,410 --> 00:35:41,979
vanities whatever yeah

00:35:43,320 --> 00:35:49,080
part of this question with using kind of

00:35:47,580 --> 00:35:51,240
the immutable infrastructure that you

00:35:49,080 --> 00:35:53,220
get by building your own customization

00:35:51,240 --> 00:35:56,670
or customize the distribution of morale

00:35:53,220 --> 00:35:59,010
how do you go through and decide so this

00:35:56,670 --> 00:36:04,410
is a dynamic feature and this is

00:35:59,010 --> 00:36:08,220
something that I want to build but yeah

00:36:04,410 --> 00:36:10,770
interesting point my in this approach

00:36:08,220 --> 00:36:13,470
the minimum piece in the custom

00:36:10,770 --> 00:36:17,190
distribution it just brings Sela as part

00:36:13,470 --> 00:36:19,440
of the core let's say platform you don't

00:36:17,190 --> 00:36:23,160
have to package your application inside

00:36:19,440 --> 00:36:25,530
your custom distribution maybe and it's

00:36:23,160 --> 00:36:28,440
basically what I am doing I just would

00:36:25,530 --> 00:36:30,120
try to Sara and then I use one instance

00:36:28,440 --> 00:36:32,820
in my cluster just to inside my

00:36:30,120 --> 00:36:34,860
application and then this application

00:36:32,820 --> 00:36:36,570
will be deployed on the cluster and the

00:36:34,860 --> 00:36:39,210
big advantage of doing that is just you

00:36:36,570 --> 00:36:41,430
update because when I do cluster feature

00:36:39,210 --> 00:36:43,080
update when you will update my features

00:36:41,430 --> 00:36:46,530
of my application in all nodes in my

00:36:43,080 --> 00:36:48,750
cluster that 411's approach to do not

00:36:46,530 --> 00:36:50,550
amazing your application in your current

00:36:48,750 --> 00:36:55,260
distribution even if it's pretty

00:36:50,550 --> 00:36:58,170
convenient but it means that a team has

00:36:55,260 --> 00:37:01,380
to be dedicated for the installation of

00:36:58,170 --> 00:37:02,930
your applications the big advantage of

00:37:01,380 --> 00:37:05,400
using this approach and custom

00:37:02,930 --> 00:37:06,360
distribution it just provides the

00:37:05,400 --> 00:37:10,380
dockerfile

00:37:06,360 --> 00:37:14,070
of the Tarble and the people who

00:37:10,380 --> 00:37:16,140
actually deploy the the images on your

00:37:14,070 --> 00:37:18,720
on the cluster they don't care about

00:37:16,140 --> 00:37:20,430
what what's the configuration what your

00:37:18,720 --> 00:37:23,640
application what's the version which is

00:37:20,430 --> 00:37:28,530
deployed and that's also I mean it's

00:37:23,640 --> 00:37:31,170
let's say some decisions you take while

00:37:28,530 --> 00:37:33,000
I'm doing myself and package and while

00:37:31,170 --> 00:37:35,850
I'm letting the other team to you and

00:37:33,000 --> 00:37:40,070
update for configuration for example it

00:37:35,850 --> 00:37:40,070
could be some time problematic so

00:37:41,440 --> 00:37:46,359
maybe a bit hands off of this employment

00:37:44,200 --> 00:37:51,400
process it might be better yes more

00:37:46,359 --> 00:37:56,680
evaporation abilities you're comfortable

00:37:51,400 --> 00:37:58,990
with it exactly I mean the key point is

00:37:56,680 --> 00:38:04,119
your DevOps team I mean if you're DevOps

00:37:58,990 --> 00:38:05,980
team is a bit focus on carat and your

00:38:04,119 --> 00:38:08,020
application and knows how to change the

00:38:05,980 --> 00:38:09,910
configuration and what what's a feature

00:38:08,020 --> 00:38:12,670
and stuff like that then you as a

00:38:09,910 --> 00:38:15,220
development team you only focus on the

00:38:12,670 --> 00:38:19,569
feature you provide and battle if you're

00:38:15,220 --> 00:38:22,810
develop scheme is more my my purple than

00:38:19,569 --> 00:38:25,510
my goal just deploy on what I received

00:38:22,810 --> 00:38:26,770
from the dev team in verticals you as

00:38:25,510 --> 00:38:28,839
the dev team you have to provide a

00:38:26,770 --> 00:38:31,390
package ready to roll to Turin and the

00:38:28,839 --> 00:38:37,500
dev ops team doesn't care about what's

00:38:31,390 --> 00:38:37,500
the content of the image yes

00:38:39,420 --> 00:38:50,069
I looked into the job but I think in the

00:38:47,190 --> 00:38:52,680
descent what Kurata if it's an

00:38:50,069 --> 00:38:56,579
environment where the probable can

00:38:52,680 --> 00:38:59,010
easily write applications in scarlet I'm

00:38:56,579 --> 00:39:01,920
the dollar point but I don't understand

00:38:59,010 --> 00:39:04,290
what gravitation what protein provides

00:39:01,920 --> 00:39:08,640
to the developer

00:39:04,290 --> 00:39:11,940
okay so yeah but that's a good question

00:39:08,640 --> 00:39:16,290
so basically the question is what why

00:39:11,940 --> 00:39:21,530
tariffs maybe wait come from and what

00:39:16,290 --> 00:39:21,530
the usage of carat for a developer I

00:39:23,030 --> 00:39:29,040
don't like to say that but I gotta say

00:39:25,710 --> 00:39:33,059
that Karis is an OID a container so it

00:39:29,040 --> 00:39:36,420
doesn't mean a AGI is a prime model in

00:39:33,059 --> 00:39:38,549
Java allows you to deploy services so

00:39:36,420 --> 00:39:40,290
some components deploy services and

00:39:38,549 --> 00:39:43,170
other components can use these services

00:39:40,290 --> 00:39:46,829
so if you kind of SOA platform but very

00:39:43,170 --> 00:39:49,770
loaded okay I don't like to do to say

00:39:46,829 --> 00:39:51,990
that because for a long time carrot was

00:39:49,770 --> 00:39:54,000
only considered as no AJ container and

00:39:51,990 --> 00:39:57,839
actually is more than that because you

00:39:54,000 --> 00:40:01,380
can deploy anything a large code of

00:39:57,839 --> 00:40:05,809
application in care what character

00:40:01,380 --> 00:40:08,220
spriting to you is an environment

00:40:05,809 --> 00:40:09,990
providing services but you cannot

00:40:08,220 --> 00:40:11,849
directly lever leverage in your

00:40:09,990 --> 00:40:14,460
application you want to do logging in

00:40:11,849 --> 00:40:16,980
your application then normally let's

00:40:14,460 --> 00:40:18,329
let's take a concrete example you want

00:40:16,980 --> 00:40:21,059
to do some logging in your application

00:40:18,329 --> 00:40:24,030
means you have to use and define a

00:40:21,059 --> 00:40:25,670
dependency to blogging platform SL f oj

00:40:24,030 --> 00:40:27,960
comments logging log for do whatever

00:40:25,670 --> 00:40:29,609
then you have to define the

00:40:27,960 --> 00:40:32,970
configuration of your logging system

00:40:29,609 --> 00:40:37,430
what my offender what my category was my

00:40:32,970 --> 00:40:37,430
different a logger and all this base

00:40:48,739 --> 00:40:54,299
it's a good description actually it's

00:40:51,449 --> 00:41:01,349
like an application server like we are

00:40:54,299 --> 00:41:04,589
in the bus exactly so it's a mix between

00:41:01,349 --> 00:41:07,469
a container as you said and we're all

00:41:04,589 --> 00:41:09,779
tie like say application server like we

00:41:07,469 --> 00:41:12,119
are in the past WebLogic WebSphere and

00:41:09,779 --> 00:41:13,469
all the stuff that is more let's say

00:41:12,119 --> 00:41:15,329
services on Angie

00:41:13,469 --> 00:41:17,160
but yeah it's a container prodding to

00:41:15,329 --> 00:41:19,439
you something but you can use and

00:41:17,160 --> 00:41:21,630
connect us as you said and it's a glue

00:41:19,439 --> 00:41:24,180
between the different part of your Java

00:41:21,630 --> 00:41:28,349
component as I said is a good platform

00:41:24,180 --> 00:41:30,959
for service and micro services

00:41:28,349 --> 00:41:32,640
application because each part of your

00:41:30,959 --> 00:41:35,160
application can share and expose

00:41:32,640 --> 00:41:37,519
services all together so yeah it's a

00:41:35,160 --> 00:41:37,519
container

00:41:54,930 --> 00:42:00,250
so yeah there are different looking

00:41:57,280 --> 00:42:05,350
mechanism priority by configuration so

00:42:00,250 --> 00:42:09,490
you have a file which is a five based on

00:42:05,350 --> 00:42:12,280
the shared file system you are JDBC you

00:42:09,490 --> 00:42:17,670
are su keeper and you are as well cut as

00:42:12,280 --> 00:42:17,670
well so it means that the load can be on

00:42:17,700 --> 00:42:23,740
yeah yeah for familiar example a human

00:42:20,800 --> 00:42:25,120
another yeah and if you take a look in

00:42:23,740 --> 00:42:35,530
the configuration side you will see

00:42:25,120 --> 00:42:42,550
different implementation yet yeah since

00:42:35,530 --> 00:42:45,700
thanks is yeah so this one so this body

00:42:42,550 --> 00:42:48,280
is basically when you start Kara you

00:42:45,700 --> 00:42:49,930
have what we need the root instance okay

00:42:48,280 --> 00:42:52,210
it's the default one is where you can

00:42:49,930 --> 00:42:55,170
interact you can type some comments

00:42:52,210 --> 00:42:58,000
because you have a complete shell format

00:42:55,170 --> 00:43:01,390
where you can type your your

00:42:58,000 --> 00:43:04,030
configuration on your extraction then

00:43:01,390 --> 00:43:07,630
what you can do is to do instant clone

00:43:04,030 --> 00:43:10,240
or instance create so instance create

00:43:07,630 --> 00:43:14,170
created completely fresh new instances

00:43:10,240 --> 00:43:16,630
so in the new JVM so it's not a new JVM

00:43:14,170 --> 00:43:19,270
with a dedicated file system so it is

00:43:16,630 --> 00:43:22,270
dedicated directories where the files

00:43:19,270 --> 00:43:23,890
will be located if you decide to clone

00:43:22,270 --> 00:43:26,290
then you're going to take an existing

00:43:23,890 --> 00:43:28,990
class instances for instance the root

00:43:26,290 --> 00:43:31,540
and completely duplicate the same

00:43:28,990 --> 00:43:34,120
instance changing the phone number and

00:43:31,540 --> 00:43:36,730
stuff like that and then we create new

00:43:34,120 --> 00:43:39,520
JVM again where you can run your

00:43:36,730 --> 00:43:42,700
application so it's exactly instead of

00:43:39,520 --> 00:43:45,190
using this another alternative you on

00:43:42,700 --> 00:43:47,860
your machine is just copy the existing

00:43:45,190 --> 00:43:52,440
directory into a new directory changing

00:43:47,860 --> 00:43:52,440
the phone number and it sorry

00:43:56,670 --> 00:44:06,719
No yeah it's a new Paris instance inside

00:44:00,309 --> 00:44:07,930
your same operating system contains yeah

00:44:06,719 --> 00:44:10,200
okay

00:44:07,930 --> 00:44:15,099
you okay with a Christian you're done

00:44:10,200 --> 00:44:18,660
yeah okay another one and Alex I mean I

00:44:15,099 --> 00:44:18,660
will get back to you yeah

00:44:24,800 --> 00:44:29,950
so that swamp you get have well packaged

00:44:27,170 --> 00:44:29,950
applications

00:44:38,890 --> 00:44:45,650
seller is more I mean swamp or marathon

00:44:43,130 --> 00:44:49,070
is when you have an existing doctor

00:44:45,650 --> 00:44:51,920
image seller is more inside the doctor

00:44:49,070 --> 00:44:57,110
image the synchronization so let me take

00:44:51,920 --> 00:45:00,440
a concrete example in your docker image

00:44:57,110 --> 00:45:02,420
you package Sara and battle you would

00:45:00,440 --> 00:45:05,140
strategy mask on so you create three

00:45:02,420 --> 00:45:08,630
instances or ten instances whatever of

00:45:05,140 --> 00:45:11,960
your daughter image on your cluster and

00:45:08,630 --> 00:45:13,850
then your DevOps team goes in one

00:45:11,960 --> 00:45:16,850
instance and you configured it and

00:45:13,850 --> 00:45:19,280
change football to through order in a

00:45:16,850 --> 00:45:21,950
configuration then this configuration

00:45:19,280 --> 00:45:23,960
change is not related to swarm or to

00:45:21,950 --> 00:45:25,760
swamp or Doki or whatever it's like

00:45:23,960 --> 00:45:28,220
internally to your application and

00:45:25,760 --> 00:45:31,130
internally to doc we were together in

00:45:28,220 --> 00:45:35,840
that case with the purpose of Sara to

00:45:31,130 --> 00:45:39,310
see this change to all of instances okay

00:45:35,840 --> 00:45:39,310
so that's where the different meaning

00:45:42,150 --> 00:45:48,749
oh yeah it happens a lot I mean in

00:45:45,529 --> 00:45:50,819
micro-services platform it happens a lot

00:45:48,749 --> 00:45:52,890
if I would like to change the number of

00:45:50,819 --> 00:45:55,049
thread or if I would like to change the

00:45:52,890 --> 00:45:57,079
location of my date at my elasticsearch

00:45:55,049 --> 00:45:59,759
a Cassandra database for instance

00:45:57,079 --> 00:46:02,160
because I I don't know I maybe set up

00:45:59,759 --> 00:46:04,049
new instances whatever then you can set

00:46:02,160 --> 00:46:06,480
up on your cluster group and do the

00:46:04,049 --> 00:46:08,670
change yeah it's exactly the same

00:46:06,480 --> 00:46:12,839
pressure in front from Bob I mean it

00:46:08,670 --> 00:46:15,420
depends what the the let's say what your

00:46:12,839 --> 00:46:17,160
DevOps team can do or not if you

00:46:15,420 --> 00:46:18,720
consider your daughter image as a

00:46:17,160 --> 00:46:21,630
standalone and you cannot change that

00:46:18,720 --> 00:46:23,940
then you're right that is close you it

00:46:21,630 --> 00:46:27,749
really useful but if you consider your

00:46:23,940 --> 00:46:29,910
dev up team is able to change the

00:46:27,749 --> 00:46:35,329
location the number of red or stuff like

00:46:29,910 --> 00:46:35,329
that in one posture group then serozha

00:46:43,349 --> 00:46:49,300
yes seller actually is very low low

00:46:46,240 --> 00:46:51,460
interest so if you deploy your your

00:46:49,300 --> 00:46:54,820
family role is basically packet as a

00:46:51,460 --> 00:46:57,790
bundle or blueprint under or feature

00:46:54,820 --> 00:46:59,890
whatever and so in that case as soon as

00:46:57,790 --> 00:47:02,770
you install your camera roll so bender

00:46:59,890 --> 00:47:04,180
low feature in one in car consent when

00:47:02,770 --> 00:47:10,410
seller will be able to spray the

00:47:04,180 --> 00:47:10,410
deployment no problem you know yeah

00:47:28,780 --> 00:47:34,110
featherbed can't you learn mind soul

00:47:35,550 --> 00:47:43,050
before there are static in the doctor

00:47:40,470 --> 00:47:46,710
image but they can be exposed

00:47:43,050 --> 00:47:51,390
dynamically with me with Marisa it's not

00:47:46,710 --> 00:47:54,360
because I have inverted 81-81 here he

00:47:51,390 --> 00:47:56,760
could be dynamic and managed by mouse

00:47:54,360 --> 00:47:58,320
bye-bye marathon actually that's why

00:47:56,760 --> 00:48:01,560
Martha is pretty interesting and

00:47:58,320 --> 00:48:04,230
cumulative and swamp you eight does

00:48:01,560 --> 00:48:06,870
exactly the same so we are set your

00:48:04,230 --> 00:48:12,870
right buttock involved okay met but

00:48:06,870 --> 00:48:22,290
dynamic from the cluster yes zero means

00:48:12,870 --> 00:48:24,740
it's dynamic love expression now thank

00:48:22,290 --> 00:48:24,740

YouTube URL: https://www.youtube.com/watch?v=Q-lreKSZMCs


