Title: ActiveMQ Artemis 2.0 - Clebert Suconic, Red Hat
Publication date: 2017-05-17
Playlist: ApacheCon 2017 - Miami
Description: 
	ActiveMQ Artemis 2.0 - Clebert Suconic, Red Hat

Apache ActiveMQ Artemis has evolved to a very mature broker over the last year. High performance, high available and supporting huge workloads, from 50K messages / second on single producers to highly distributed consumers.

This presentation will show these improvements and how you could achieve such workloads, and what features have been introduced on Artemis.

About Clebert Suconic
Apache Committer on the ActiveMQ Artemis Project, have been involved with messaging systems since 2007. Was active participant of the JMS2 specification and is constantly involved with Messaging and Messaging as a Service Systems.
Captions: 
	00:00:00,030 --> 00:00:07,319
hi my name is Claire its iconic I work

00:00:02,669 --> 00:00:12,030
for redhead and I'm on the axiom kill

00:00:07,319 --> 00:00:17,460
PNC I'm one of the commuters on accident

00:00:12,030 --> 00:00:20,189
killed Artemis I have been pretty much

00:00:17,460 --> 00:00:24,000
involved with messaging for the last I

00:00:20,189 --> 00:00:25,890
don't know like the last ten years so I

00:00:24,000 --> 00:00:29,400
have been working with a lot of

00:00:25,890 --> 00:00:32,730
messaging products on RedHat beyond of

00:00:29,400 --> 00:00:36,120
the hype of doing Hornet Q at the time

00:00:32,730 --> 00:00:38,969
like a refactoring JBoss messaging as

00:00:36,120 --> 00:00:40,350
hornet keel and later on i have been

00:00:38,969 --> 00:00:45,510
involved with artemis which is pretty

00:00:40,350 --> 00:00:46,289
much a continuation of not much a

00:00:45,510 --> 00:00:51,260
continuation

00:00:46,289 --> 00:00:55,289
that's what was kicking in a few minutes

00:00:51,260 --> 00:00:58,579
so when it submitted to talk i was i

00:00:55,289 --> 00:01:03,120
wrote as artemis chill oh it's already

00:00:58,579 --> 00:01:06,770
she one right now so it's like at the

00:01:03,120 --> 00:01:11,420
stream of religious brinkley active and

00:01:06,770 --> 00:01:14,369
there is a lot of stuff going on artemis

00:01:11,420 --> 00:01:19,409
i'm going to be speaking about oranges

00:01:14,369 --> 00:01:23,220
and how artists started doing a features

00:01:19,409 --> 00:01:25,229
and doing a overall of everything you

00:01:23,220 --> 00:01:27,240
had we have a short audience like

00:01:25,229 --> 00:01:29,430
actually I'm competing with Kafka right

00:01:27,240 --> 00:01:33,780
now next door so is not really far fair

00:01:29,430 --> 00:01:35,700
fun for me like a Kafka has more a lot

00:01:33,780 --> 00:01:39,150
more people are interesting that so this

00:01:35,700 --> 00:01:40,829
is a message broker and as Adrian said

00:01:39,150 --> 00:01:44,119
in the previous presentation message

00:01:40,829 --> 00:01:47,399
brokers becoming more commoditized so

00:01:44,119 --> 00:01:49,140
it's actually pretty hard space to

00:01:47,399 --> 00:01:51,960
compete on it's like a really

00:01:49,140 --> 00:01:55,619
complicated together work and it's

00:01:51,960 --> 00:01:58,979
taking me a lot of time to time in QE

00:01:55,619 --> 00:02:01,770
and quality engineering running tests

00:01:58,979 --> 00:02:04,640
and doing a lot of stuff on that so

00:02:01,770 --> 00:02:08,850
Artemis

00:02:04,640 --> 00:02:10,320
so you guys like a lot of I don't like

00:02:08,850 --> 00:02:12,030
much of the showing hands but takes we

00:02:10,320 --> 00:02:13,110
have a lot of short audience looks and

00:02:12,030 --> 00:02:15,420
by the way like I said I have any

00:02:13,110 --> 00:02:17,460
questions don't wait to the end I

00:02:15,420 --> 00:02:20,220
consider myself a bad presenter so I

00:02:17,460 --> 00:02:24,270
have kind of questions will actually be

00:02:20,220 --> 00:02:26,310
more interactive be easier ultimate is a

00:02:24,270 --> 00:02:29,400
message broker

00:02:26,310 --> 00:02:32,790
it has yours neon Hornet skills so it

00:02:29,400 --> 00:02:35,610
has a lot of we it used to be pretty

00:02:32,790 --> 00:02:41,220
much a JMS broker it's a little beyond

00:02:35,610 --> 00:02:45,360
that now it's messages are streamed to

00:02:41,220 --> 00:02:48,390
being memory or like we always favor

00:02:45,360 --> 00:02:52,310
like a defense delivery and with

00:02:48,390 --> 00:02:52,310
warranties of deliver so messages are

00:02:52,670 --> 00:02:59,910
acknowledgment and guaranteed delivery

00:02:55,070 --> 00:03:03,000
and we have a lot of we have a like a

00:02:59,910 --> 00:03:06,570
pretty strong paging system like when

00:03:03,000 --> 00:03:10,470
you are running out of consumers or if

00:03:06,570 --> 00:03:16,130
consumers are running behind Hornet

00:03:10,470 --> 00:03:16,130
queue started in October 2014

00:03:16,640 --> 00:03:22,650
horn kill it's actually held it's really

00:03:19,800 --> 00:03:24,560
old history already so it's starting J

00:03:22,650 --> 00:03:27,360
both and kill like I have we had a

00:03:24,560 --> 00:03:31,080
really heavy refactoring to JBoss

00:03:27,360 --> 00:03:36,120
messaging JBoss messaging were having a

00:03:31,080 --> 00:03:42,239
lot of JDBC dependencies like a lot of

00:03:36,120 --> 00:03:44,070
like up JMS and was really heavy on on

00:03:42,239 --> 00:03:47,670
another penis with the application

00:03:44,070 --> 00:03:51,450
server so Hornet kill we did a lot more

00:03:47,670 --> 00:03:54,110
stuff into making it stand alone but

00:03:51,450 --> 00:04:02,850
still the main use case for Hornet qsq

00:03:54,110 --> 00:04:06,480
world fly and and JBoss 7 and more

00:04:02,850 --> 00:04:09,080
recently with Artemis it became more

00:04:06,480 --> 00:04:12,150
like a standalone product and it's

00:04:09,080 --> 00:04:15,670
actually the foundation for

00:04:12,150 --> 00:04:19,959
j-bot n q7 we read her just did the

00:04:15,670 --> 00:04:22,420
announcement of a few weeks ago and and

00:04:19,959 --> 00:04:24,250
and I'm going to be speaking about the

00:04:22,420 --> 00:04:28,050
open-source version and what can you do

00:04:24,250 --> 00:04:31,030
with Artemis even though this is a

00:04:28,050 --> 00:04:33,730
foundation for MQ I have seen lots of

00:04:31,030 --> 00:04:36,100
users like using just the bits from

00:04:33,730 --> 00:04:38,650
local scripted the open source training

00:04:36,100 --> 00:04:42,640
so it's even the open-source version is

00:04:38,650 --> 00:04:45,550
pretty mature in the production ready I

00:04:42,640 --> 00:04:47,200
have seen customers doing like a

00:04:45,550 --> 00:04:50,800
billions of messages a day like laying

00:04:47,200 --> 00:04:55,300
with look at the large farms and it's a

00:04:50,800 --> 00:05:00,850
pretty it's a really a a a stable

00:04:55,300 --> 00:05:04,660
product of saravana so the reason for

00:05:00,850 --> 00:05:11,910
doing for moving from Hornet queue to

00:05:04,660 --> 00:05:11,910
active and kill was first of all like

00:05:12,540 --> 00:05:20,980
Red Hat had contributed and for active

00:05:18,580 --> 00:05:24,550
in queue and was also doing Hornet kill

00:05:20,980 --> 00:05:27,790
and also inside active Aquila Hadassah

00:05:24,550 --> 00:05:33,580
project called Apollo because a lot of

00:05:27,790 --> 00:05:37,060
of what he needed to bring ActiveMQ

00:05:33,580 --> 00:05:39,040
beyond on performance would require a

00:05:37,060 --> 00:05:42,790
new infrastructure like a lot of in a

00:05:39,040 --> 00:05:46,750
euro code and and it was not very easy

00:05:42,790 --> 00:05:50,290
to develop actinic you into that so they

00:05:46,750 --> 00:05:51,760
tried to up to Apollo and Apollo didn't

00:05:50,290 --> 00:05:56,800
really succeed and then we'll start with

00:05:51,760 --> 00:05:59,530
Artemis and and we have had a lot of lot

00:05:56,800 --> 00:06:04,150
of streaming on the community a lot of

00:05:59,530 --> 00:06:05,890
and things we started have over like

00:06:04,150 --> 00:06:11,050
three thousand commits things we joined

00:06:05,890 --> 00:06:12,910
as a bunch of about academic you one of

00:06:11,050 --> 00:06:16,630
the good things about that is like a

00:06:12,910 --> 00:06:19,810
good get features from both acted and Q

00:06:16,630 --> 00:06:26,580
so now we have open water support

00:06:19,810 --> 00:06:30,130
Artemis you have also a very strong XA

00:06:26,580 --> 00:06:33,070
one of the weaknesses on Nocturne

00:06:30,130 --> 00:06:35,650
Achilles was known for was it's like XA

00:06:33,070 --> 00:06:40,480
Lexus is need like a trans axis it's an

00:06:35,650 --> 00:06:45,610
application server Artemis has a really

00:06:40,480 --> 00:06:50,860
good support for that we also have like

00:06:45,610 --> 00:06:59,040
a West GI and things that came from both

00:06:50,860 --> 00:07:07,030
sides right and as the foundation for

00:06:59,040 --> 00:07:10,990
for form Jake JBoss then kill we had

00:07:07,030 --> 00:07:13,570
improved a lot be mqt support so it's

00:07:10,990 --> 00:07:15,520
really high performance I could get I

00:07:13,570 --> 00:07:18,910
could run actually right now into my

00:07:15,520 --> 00:07:20,580
laptop cupid typically clients in

00:07:18,910 --> 00:07:22,990
generate seventy thousand messages

00:07:20,580 --> 00:07:28,510
non-persistent messages a second on the

00:07:22,990 --> 00:07:31,180
laptop even even on ntp and this this

00:07:28,510 --> 00:07:34,450
benchmark here is called quiver

00:07:31,180 --> 00:07:38,350
it was developed from one of my

00:07:34,450 --> 00:07:41,440
co-workers Justin Ross and it could use

00:07:38,350 --> 00:07:48,550
that to to measure the performance on

00:07:41,440 --> 00:07:50,229
different protocols and if you're in you

00:07:48,550 --> 00:07:52,030
guys are using Artemis when I've

00:07:50,229 --> 00:07:57,220
technical here recommend you guys are

00:07:52,030 --> 00:08:16,270
using JMS no John at thank you

00:07:57,220 --> 00:08:18,120
okay what version had to played so I'm

00:08:16,270 --> 00:08:23,260
going to speak a little bit more about

00:08:18,120 --> 00:08:25,180
why we became with Artemis instead of

00:08:23,260 --> 00:08:27,280
like a changing act until we had some

00:08:25,180 --> 00:08:33,030
talks about what would be required to

00:08:27,280 --> 00:08:36,250
make accident cue niño and more reactive

00:08:33,030 --> 00:08:39,880
right and it wasn't so easy to change

00:08:36,250 --> 00:08:43,920
the code and so as I said like a

00:08:39,880 --> 00:08:48,550
barnacle donated to to actually kill and

00:08:43,920 --> 00:08:51,250
we had this idea that you could do a

00:08:48,550 --> 00:08:54,460
synchronous responses writing into the

00:08:51,250 --> 00:08:57,280
server so whenever you get a client

00:08:54,460 --> 00:08:59,110
talking to the server things will go

00:08:57,280 --> 00:09:01,630
through what we call internally in a

00:08:59,110 --> 00:09:05,110
political operation context so that the

00:09:01,630 --> 00:09:08,290
server never blocks a thread to help the

00:09:05,110 --> 00:09:10,330
client to serve the client so that's

00:09:08,290 --> 00:09:14,190
actually the main difference and why we

00:09:10,330 --> 00:09:17,230
actually while we wrote Artemis from the

00:09:14,190 --> 00:09:21,220
that why we brought Artemis City to

00:09:17,230 --> 00:09:22,690
depth in queue community so it doesn't

00:09:21,220 --> 00:09:26,560
mean different lecture like say if you

00:09:22,690 --> 00:09:30,190
are writing to the journal like I say

00:09:26,560 --> 00:09:31,870
sending a message on accent cue and you

00:09:30,190 --> 00:09:34,570
write to the journal you will have a

00:09:31,870 --> 00:09:37,180
thread blocking on our kim kyu-jong

00:09:34,570 --> 00:09:39,790
artemis you fire forget and you

00:09:37,180 --> 00:09:42,339
basically on this class that you call a

00:09:39,790 --> 00:09:45,100
cooperation context we just set up a

00:09:42,339 --> 00:09:47,500
runnable and whenever the IO or the

00:09:45,100 --> 00:09:49,270
replication is done it will send back to

00:09:47,500 --> 00:09:51,960
the client the client you think we are

00:09:49,270 --> 00:09:54,970
blocking because you need like

00:09:51,960 --> 00:09:56,589
warranties that the message was st. and

00:09:54,970 --> 00:09:58,870
was accepted by the broker before he can

00:09:56,589 --> 00:10:00,280
unblock the client so the client who

00:09:58,870 --> 00:10:03,190
think the server is blocking but you

00:10:00,280 --> 00:10:08,040
won't have never a thread waiting to be

00:10:03,190 --> 00:10:08,040
blocking the server so so I think

00:10:09,419 --> 00:10:14,889
yeah yes yeah so deeply so from the

00:10:13,479 --> 00:10:18,369
clients point of view nothing changed

00:10:14,889 --> 00:10:21,729
but on the server it changes a lot

00:10:18,369 --> 00:10:24,519
because it's actually interesting

00:10:21,729 --> 00:10:26,799
because when we came up with death like

00:10:24,519 --> 00:10:29,979
a server like a doing development things

00:10:26,799 --> 00:10:34,239
the server was not scaling to what we

00:10:29,979 --> 00:10:37,359
needed and just by replacing a blocking

00:10:34,239 --> 00:10:42,100
thread - this kind of thing made the

00:10:37,359 --> 00:10:44,919
server scale and be a lot faster and it

00:10:42,100 --> 00:10:47,319
was a few years ago but that's when we

00:10:44,919 --> 00:10:49,509
could get like a spec JMS numbers like

00:10:47,319 --> 00:10:51,729
really high and we actually broke the

00:10:49,509 --> 00:10:54,279
benchmark somebody used ever since

00:10:51,729 --> 00:11:00,639
because it came so fast that nobody ever

00:10:54,279 --> 00:11:05,669
did like a JMS after that we select with

00:11:00,639 --> 00:11:09,970
geo i nqp became so so well maintained

00:11:05,669 --> 00:11:14,109
that for a while it was something like

00:11:09,970 --> 00:11:17,109
it was there but it wasn't really the

00:11:14,109 --> 00:11:18,970
main focus on development but like I say

00:11:17,109 --> 00:11:22,779
insert images 0

00:11:18,970 --> 00:11:26,039
ine KT is becoming really strong it's to

00:11:22,779 --> 00:11:29,769
support the Hornet keel and Artemis

00:11:26,039 --> 00:11:31,479
client is actually stood the fastest so

00:11:29,769 --> 00:11:35,619
if you need just like a Java client

00:11:31,479 --> 00:11:37,299
sending messages JMS or even look at the

00:11:35,619 --> 00:11:38,739
quality rights to the fastest way it's

00:11:37,299 --> 00:11:40,119
just saying like ok insane like a maybe

00:11:38,739 --> 00:11:44,499
like a two hundred thousand measures our

00:11:40,119 --> 00:11:46,359
second easily on on Java but if you need

00:11:44,499 --> 00:11:50,859
something like a for different client is

00:11:46,359 --> 00:11:52,720
like a nqp will provide you two better

00:11:50,859 --> 00:11:54,489
than I have a laser pointer but then

00:11:52,720 --> 00:11:58,029
keep you provide a lots of clients as

00:11:54,489 --> 00:12:02,079
for that we also have n ket P stomping

00:11:58,029 --> 00:12:05,470
and open warrior for for legacy support

00:12:02,079 --> 00:12:10,839
with all the activity action q5 clients

00:12:05,470 --> 00:12:13,149
and indirect the last three years we

00:12:10,839 --> 00:12:15,249
have been doing a lot of testing on this

00:12:13,149 --> 00:12:16,740
to make sure it's stable and working and

00:12:15,249 --> 00:12:19,560
uh

00:12:16,740 --> 00:12:21,720
I can see a lot of going on the

00:12:19,560 --> 00:12:24,500
community for that like a lot of

00:12:21,720 --> 00:12:24,500
discussions on

00:12:30,870 --> 00:12:36,530
so we're talking about the producer side

00:12:44,510 --> 00:12:50,850
when we did the yes I'm trying to

00:12:49,130 --> 00:12:53,880
interested the class but I'm trying to

00:12:50,850 --> 00:12:57,930
repeat the question it so you're asking

00:12:53,880 --> 00:13:01,370
is using synchronous on the service that

00:12:57,930 --> 00:13:01,370
improve the performance on the client

00:13:02,540 --> 00:13:12,360
yeah when you use non-blocking we are

00:13:08,460 --> 00:13:14,250
not blocked so so I'm talking about so

00:13:12,360 --> 00:13:15,660
the question is when you use no blocking

00:13:14,250 --> 00:13:19,280
if that improve the performance of the

00:13:15,660 --> 00:13:22,320
client especially from the producer side

00:13:19,280 --> 00:13:24,270
it did it didn't improve the performance

00:13:22,320 --> 00:13:26,550
if you had a single producer because you

00:13:24,270 --> 00:13:30,540
would have like a single thread on the

00:13:26,550 --> 00:13:33,270
server but for the general cases where

00:13:30,540 --> 00:13:37,350
you have like a many producers it's it

00:13:33,270 --> 00:13:40,050
is scaled quite a lot because because

00:13:37,350 --> 00:13:43,440
you could like a say to have like a ten

00:13:40,050 --> 00:13:48,090
producers signing to the server right so

00:13:43,440 --> 00:13:50,640
so we don't flush on every request so we

00:13:48,090 --> 00:13:52,170
have on the operation context and we

00:13:50,640 --> 00:13:55,740
have something that called kind buffers

00:13:52,170 --> 00:13:57,900
we wait a few nanoseconds before we

00:13:55,740 --> 00:14:00,480
flush out right to the disk so if you

00:13:57,900 --> 00:14:04,500
have like a tenth producer sending to

00:14:00,480 --> 00:14:06,480
the server we will listen for all the

00:14:04,500 --> 00:14:09,780
time producers before we do a flush to

00:14:06,480 --> 00:14:14,490
this so you have like a you reuse the

00:14:09,780 --> 00:14:16,980
right time between multiple producers

00:14:14,490 --> 00:14:19,710
and for doing that kind of nao improves

00:14:16,980 --> 00:14:22,070
really really well so so up to the point

00:14:19,710 --> 00:14:24,660
that if you had one producer saying okay

00:14:22,070 --> 00:14:26,490
when you send like a persistent messages

00:14:24,660 --> 00:14:29,040
especially if you are requesting to sync

00:14:26,490 --> 00:14:31,740
on disk so you cannot sink faster than

00:14:29,040 --> 00:14:33,930
the disk is capable of sinking right so

00:14:31,740 --> 00:14:35,700
like up for having two producers you

00:14:33,930 --> 00:14:38,580
would still have the same rate because

00:14:35,700 --> 00:14:41,490
we are using thinking for multiple

00:14:38,580 --> 00:14:45,150
producers and that's and that's when we

00:14:41,490 --> 00:14:49,170
were able to scale a lot more that was

00:14:45,150 --> 00:14:52,140
one of the one of the benefits of doing

00:14:49,170 --> 00:14:54,390
under your own Artemis for being able to

00:14:52,140 --> 00:14:56,250
scale for multiple

00:14:54,390 --> 00:14:57,959
producers or even consumers when the

00:14:56,250 --> 00:15:03,990
acknowledging prices you have to write

00:14:57,959 --> 00:15:06,839
to the disk and but also the contact

00:15:03,990 --> 00:15:11,490
switch and the server was minimized and

00:15:06,839 --> 00:15:15,060
also you cut the memory on using a lot

00:15:11,490 --> 00:15:17,430
of threads was wood required like we had

00:15:15,060 --> 00:15:19,769
cases during development even before

00:15:17,430 --> 00:15:22,980
releasing that if she didn't have kind

00:15:19,769 --> 00:15:24,660
of silica context in place we would run

00:15:22,980 --> 00:15:28,050
out of memory quite easily dependent the

00:15:24,660 --> 00:15:29,459
number of clients so if you have like

00:15:28,050 --> 00:15:32,070
limitations from the server and

00:15:29,459 --> 00:15:36,720
everything like everything else right so

00:15:32,070 --> 00:15:41,240
but we could use a lot of more hard work

00:15:36,720 --> 00:15:41,240
by the indica three

00:15:58,950 --> 00:16:04,290
so if that remains the same with the

00:16:00,930 --> 00:16:06,270
consumer I think it not I think it this

00:16:04,290 --> 00:16:08,760
certainly does because the consumers

00:16:06,270 --> 00:16:10,620
will also be doing acknowledgement right

00:16:08,760 --> 00:16:13,650
so the acknowledgement to also have to

00:16:10,620 --> 00:16:15,450
translate into a right to the disk right

00:16:13,650 --> 00:16:20,040
and you have like a multiple consumers

00:16:15,450 --> 00:16:22,560
acknowledging if the question really

00:16:20,040 --> 00:16:26,250
depends on how you're consuming so if

00:16:22,560 --> 00:16:28,410
you are consuming I forgot the name of

00:16:26,250 --> 00:16:32,270
the trimming GM s like we need to

00:16:28,410 --> 00:16:34,530
consume like a no arc where you just

00:16:32,270 --> 00:16:37,700
acknowledgement lately it's probably not

00:16:34,530 --> 00:16:42,180
much a difference because it just right

00:16:37,700 --> 00:16:44,330
but but the factor to head like fast

00:16:42,180 --> 00:16:47,370
storage like it improved the

00:16:44,330 --> 00:16:51,360
acknowledgement time from the from the

00:16:47,370 --> 00:16:53,340
server to the client so it's it it

00:16:51,360 --> 00:16:56,100
definitely proved not not as directly as

00:16:53,340 --> 00:16:59,000
you can see in the producer but it did

00:16:56,100 --> 00:16:59,000
it certainly did

00:17:00,020 --> 00:17:11,870
so for mqt clients we have QP JM s this

00:17:09,180 --> 00:17:15,270
is about this light here is actually old

00:17:11,870 --> 00:17:22,220
it's a very supporting JM s cheese o or

00:17:15,270 --> 00:17:25,710
two one now you have like a C++ for and

00:17:22,220 --> 00:17:29,220
Python fash actually do need to read

00:17:25,710 --> 00:17:33,990
that but like a one thing I recently did

00:17:29,220 --> 00:17:37,230
some testing is even on nursery or mkp

00:17:33,990 --> 00:17:41,570
dotnet it works quite quite nicely like

00:17:37,230 --> 00:17:41,570
even with a armed with dotnet

00:17:44,430 --> 00:17:52,090
recently on Artemis to all that was one

00:17:49,810 --> 00:17:56,140
of the latest changes that we did before

00:17:52,090 --> 00:18:01,420
releasing Artemis to all was changing

00:17:56,140 --> 00:18:04,170
how messages are treated internally but

00:18:01,420 --> 00:18:07,950
until recently a message would be

00:18:04,170 --> 00:18:09,130
converted like a say three leading with

00:18:07,950 --> 00:18:13,510
mqp

00:18:09,130 --> 00:18:15,940
on Artemis up until recently we would

00:18:13,510 --> 00:18:18,220
convert the streaming from the message

00:18:15,940 --> 00:18:21,250
from the encrypted message into a core

00:18:18,220 --> 00:18:23,110
message because it was a core broker had

00:18:21,250 --> 00:18:27,250
its own protocol its own message format

00:18:23,110 --> 00:18:30,640
before and recently we changed that to

00:18:27,250 --> 00:18:33,370
be totally agnostic so if you're sending

00:18:30,640 --> 00:18:35,830
an QT message the encrypted message is

00:18:33,370 --> 00:18:37,600
say and it's format the entire lifecycle

00:18:35,830 --> 00:18:41,440
so there is no conversions when deciding

00:18:37,600 --> 00:18:44,020
to decline to send mqt server will keep

00:18:41,440 --> 00:18:46,270
an image as an activity message and when

00:18:44,020 --> 00:18:48,760
delivers to the consumer is just like a

00:18:46,270 --> 00:18:53,140
transfer Linda Bartz 2d to the consumer

00:18:48,760 --> 00:18:58,030
so and so that means that Artemis now is

00:18:53,140 --> 00:19:01,500
more like a pure MTP broker actually

00:18:58,030 --> 00:19:04,060
agnostic we didn't do that to MQTT yet

00:19:01,500 --> 00:19:05,830
but advocate ET actually does not

00:19:04,060 --> 00:19:07,570
require a lot of transformations for

00:19:05,830 --> 00:19:10,510
transforming between a core message and

00:19:07,570 --> 00:19:12,730
MQTT so it doesn't really impact a lot

00:19:10,510 --> 00:19:21,220
on performance but it's something that

00:19:12,730 --> 00:19:22,480
we can do pretty soon and and this kind

00:19:21,220 --> 00:19:25,300
of thing

00:19:22,480 --> 00:19:28,150
there is another sub project inside a

00:19:25,300 --> 00:19:34,020
party called Cupid let us have seen

00:19:28,150 --> 00:19:38,260
Cupid you can use libraries from Cupid

00:19:34,020 --> 00:19:40,270
The Dispatch broker I have a slide about

00:19:38,260 --> 00:19:42,130
it where you can do like an interesting

00:19:40,270 --> 00:19:44,830
bridges than your data center for

00:19:42,130 --> 00:19:47,980
networking and like having this is a

00:19:44,830 --> 00:19:49,360
pure entity or pure core like a depend

00:19:47,980 --> 00:19:52,080
on how the send message really made a

00:19:49,360 --> 00:19:52,080
lot of differences

00:19:52,930 --> 00:19:58,870
another limitation that we had for

00:19:55,300 --> 00:20:01,000
between 1x and Chivo

00:19:58,870 --> 00:20:03,850
this was actually something that

00:20:01,000 --> 00:20:07,180
inherited from Hornet kill is like we

00:20:03,850 --> 00:20:08,700
had a prefix on every destination so

00:20:07,180 --> 00:20:10,810
like whenever you created that

00:20:08,700 --> 00:20:12,850
especially if you were dealing with GMS

00:20:10,810 --> 00:20:15,000
like a key would be like a JMS that

00:20:12,850 --> 00:20:18,520
queue and whatever name you choose and

00:20:15,000 --> 00:20:21,250
or JMS topic whatever name you choose

00:20:18,520 --> 00:20:23,170
now we don't have a prefix anymore but

00:20:21,250 --> 00:20:26,320
we have like a different types of

00:20:23,170 --> 00:20:31,180
addresses so we can have a look at any

00:20:26,320 --> 00:20:34,600
caste and multicast it is QB internally

00:20:31,180 --> 00:20:37,540
mapped to either you could map in GMS

00:20:34,600 --> 00:20:40,600
terms between topics and queues but it's

00:20:37,540 --> 00:20:45,340
just a more generic term you can do a

00:20:40,600 --> 00:20:48,730
few tricks now like determining how many

00:20:45,340 --> 00:20:50,500
maximum consumers you can have those are

00:20:48,730 --> 00:20:54,130
a few interesting features that we have

00:20:50,500 --> 00:20:57,310
on on Artemis right now because of the

00:20:54,130 --> 00:20:59,830
addressing mode this to us this tooth

00:20:57,310 --> 00:21:04,240
changes actually new the new addressing

00:20:59,830 --> 00:21:06,640
model and Artemis being able to do the

00:21:04,240 --> 00:21:11,950
replica mkp is where actually what drove

00:21:06,640 --> 00:21:16,780
us to to split the one X into 2x so it

00:21:11,950 --> 00:21:19,810
was the if wasn't for those changes to

00:21:16,780 --> 00:21:22,060
be just like another major one seven one

00:21:19,810 --> 00:21:25,620
eight release so when it did that hatch

00:21:22,060 --> 00:21:25,620
is jammed for forages

00:21:28,610 --> 00:21:35,429
in the serving component terms we have

00:21:32,400 --> 00:21:37,530
like a clients from different protocols

00:21:35,429 --> 00:21:42,000
we have our own internal client which is

00:21:37,530 --> 00:21:45,690
a core client the networking we are

00:21:42,000 --> 00:21:48,960
dealing with Neddie Neddie actually

00:21:45,690 --> 00:21:50,789
started trusting a Norman were working

00:21:48,960 --> 00:21:52,500
at Red Hat at the time that they were

00:21:50,789 --> 00:21:54,570
writing Neddie

00:21:52,500 --> 00:21:57,870
so like a hornet kill was actually the

00:21:54,570 --> 00:22:00,240
project where nearly started it came

00:21:57,870 --> 00:22:03,240
independently after death and actually

00:22:00,240 --> 00:22:09,570
the left Red Hat and they're doing a lot

00:22:03,240 --> 00:22:12,360
of higher slides now but it's it's

00:22:09,570 --> 00:22:13,049
really tight coupled with like it was

00:22:12,360 --> 00:22:16,169
buted

00:22:13,049 --> 00:22:20,010
Nettie and around the persistence the

00:22:16,169 --> 00:22:22,620
way we do it persistence we have a

00:22:20,010 --> 00:22:25,140
protocol manager connected directly with

00:22:22,620 --> 00:22:28,919
the networking and to the broker and we

00:22:25,140 --> 00:22:30,870
can do we can plug protocols quite

00:22:28,919 --> 00:22:33,059
easily it's quite easy to develop a new

00:22:30,870 --> 00:22:36,600
protocol especially after now that we

00:22:33,059 --> 00:22:42,780
internally can do special messages in

00:22:36,600 --> 00:22:48,600
there the protocol format just going a

00:22:42,780 --> 00:22:52,980
little bit more in detail on how we get

00:22:48,600 --> 00:22:55,919
contact switching works inside Artemis

00:22:52,980 --> 00:23:02,390
on the application on the application

00:22:55,919 --> 00:23:05,610
context that we have whenever you add

00:23:02,390 --> 00:23:08,640
some information to the journal we also

00:23:05,610 --> 00:23:12,409
add what's called the it's not actually

00:23:08,640 --> 00:23:16,470
a runnable is actually a real task and

00:23:12,409 --> 00:23:22,130
it could be doing into three types of

00:23:16,470 --> 00:23:26,490
journals that we have once natively bio

00:23:22,130 --> 00:23:31,230
label is like a native API from actually

00:23:26,490 --> 00:23:34,470
is quite at the kernel level liberal

00:23:31,230 --> 00:23:36,780
it's it's like when you write something

00:23:34,470 --> 00:23:39,289
to the journal you're writing something

00:23:36,780 --> 00:23:39,289
into

00:23:40,010 --> 00:23:45,090
it's a map from directly from the memory

00:23:43,170 --> 00:23:48,060
directly to the kernel it's quite fast

00:23:45,090 --> 00:23:52,110
and it uses a lot of less CPU it's quite

00:23:48,060 --> 00:23:57,510
low in CPU we also have like a regular

00:23:52,110 --> 00:23:59,940
Java ni o for like a regular files it's

00:23:57,510 --> 00:24:02,670
too fast it can use a little bit more

00:23:59,940 --> 00:24:04,470
CPU because of the memory memory copy

00:24:02,670 --> 00:24:09,720
between the buffer and the kernel when

00:24:04,470 --> 00:24:14,040
you wrote a message and recently on 2 0

00:24:09,720 --> 00:24:21,330
and 2 1 we are the map a map or memory

00:24:14,040 --> 00:24:24,780
memory mapped file and it performance

00:24:21,330 --> 00:24:27,720
the numbers are going quite well a lot

00:24:24,780 --> 00:24:30,470
lots of even faster than what we did

00:24:27,720 --> 00:24:30,470
with horn skill

00:24:38,400 --> 00:24:43,730
what happens with the talk to them to

00:24:40,620 --> 00:24:43,730
activity crashes

00:24:48,220 --> 00:24:50,880
huh

00:24:58,890 --> 00:25:01,890
like

00:25:02,539 --> 00:25:07,279
the yo-yo task where will be what will

00:25:05,779 --> 00:25:10,549
happen to the arrow tactic the server

00:25:07,279 --> 00:25:13,130
crashes up to this point is the same as

00:25:10,549 --> 00:25:17,840
if you had like a thread blocking right

00:25:13,130 --> 00:25:19,820
so it doesn't change much from that

00:25:17,840 --> 00:25:22,640
point of view right so if you had a

00:25:19,820 --> 00:25:24,169
thread blocking on the server waiting

00:25:22,640 --> 00:25:25,700
for the arrow to happen before it

00:25:24,169 --> 00:25:28,220
response back to the client

00:25:25,700 --> 00:25:30,289
it doesn't change much so if the server

00:25:28,220 --> 00:25:35,539
crashes those are your tasks will be

00:25:30,289 --> 00:25:38,630
gone right so the client will receive a

00:25:35,539 --> 00:25:45,200
signal that the server crashed and it

00:25:38,630 --> 00:25:48,770
will then perform a heavy H a action

00:25:45,200 --> 00:25:50,450
will connect you to a back up to what

00:25:48,770 --> 00:25:54,580
you try to reconnect to the server and

00:25:50,450 --> 00:25:54,580
the server is restarted

00:25:58,410 --> 00:26:00,890
huh

00:26:03,370 --> 00:26:12,250
so so when we just look just help me

00:26:10,210 --> 00:26:15,280
reproduce request in the city cook if

00:26:12,250 --> 00:26:42,040
it's the server in a traditional way to

00:26:15,280 --> 00:26:43,900
be blocking yeah yeah so it the

00:26:42,040 --> 00:26:46,600
cementery because it's to the same as if

00:26:43,900 --> 00:26:48,880
you had a blocking or non blocking so

00:26:46,600 --> 00:26:51,940
I'm not I'm never telling the client

00:26:48,880 --> 00:26:54,400
that the message was synced into it was

00:26:51,940 --> 00:26:56,440
actually synced so it's the same

00:26:54,400 --> 00:26:59,080
symmetric but instead of having a thread

00:26:56,440 --> 00:27:01,060
waiting I have like a data structure

00:26:59,080 --> 00:27:06,040
somewhere with a callback for as soon as

00:27:01,060 --> 00:27:07,540
the data has written to the disk front

00:27:06,040 --> 00:27:09,070
from this point of views it's actually

00:27:07,540 --> 00:27:09,660
exactly the same semantics doesn't

00:27:09,070 --> 00:27:14,380
change anything

00:27:09,660 --> 00:27:15,970
so so if you are looking into so it is

00:27:14,380 --> 00:27:18,610
the same thing if you think what will

00:27:15,970 --> 00:27:20,470
happen to the thread if the structure is

00:27:18,610 --> 00:27:22,090
really server crashed forever the thread

00:27:20,470 --> 00:27:24,340
will go away what will happen to diario

00:27:22,090 --> 00:27:28,450
task it's the server crashed it will go

00:27:24,340 --> 00:27:30,910
away but if if this what what could

00:27:28,450 --> 00:27:33,940
happen then if the server crashed is

00:27:30,910 --> 00:27:37,150
like a whenever the information is is

00:27:33,940 --> 00:27:39,190
persisted then you confirm back to the

00:27:37,150 --> 00:27:40,810
client but then you have the same

00:27:39,190 --> 00:27:42,340
semantics if you are blocking or not

00:27:40,810 --> 00:27:45,070
because then you could write to the disk

00:27:42,340 --> 00:27:46,240
and you could have a crash at the time

00:27:45,070 --> 00:27:48,790
that you are going to send the

00:27:46,240 --> 00:27:52,900
information back to the client now the

00:27:48,790 --> 00:27:55,810
client has to do some duplication check

00:27:52,900 --> 00:27:58,510
XA or to make sure that the information

00:27:55,810 --> 00:28:00,460
was stored there before it does it like

00:27:58,510 --> 00:28:02,080
a the fact that you are doing this

00:28:00,460 --> 00:28:04,980
synchronous doesn't change absolutely

00:28:02,080 --> 00:28:04,980
nothing okay

00:28:09,059 --> 00:28:12,390
if it's too is it general how often

00:28:11,580 --> 00:28:17,340
flushes yes

00:28:12,390 --> 00:28:21,029
it is when you I'm planning to do a to

00:28:17,340 --> 00:28:23,360
create a to do a little demo I'm not

00:28:21,029 --> 00:28:33,480
going to do much but it shows the show

00:28:23,360 --> 00:28:39,750
what is done and if there isn't

00:28:33,480 --> 00:28:43,919
consequence you order how no there is no

00:28:39,750 --> 00:28:46,230
consequence for doing it is yeah with

00:28:43,919 --> 00:28:48,539
with lib yes there is any cost across

00:28:46,230 --> 00:28:52,470
the ordering yeah it happens in order

00:28:48,539 --> 00:28:54,980
because we the are your task is actually

00:28:52,470 --> 00:29:00,659
going to the world is never answering a

00:28:54,980 --> 00:29:02,909
question no no yeah it goes it goes

00:29:00,659 --> 00:29:06,210
through a list it doesn't pull us out of

00:29:02,909 --> 00:29:10,889
the list there is one internal thing

00:29:06,210 --> 00:29:12,480
with Libya because when you write we

00:29:10,889 --> 00:29:15,419
using liberal liberal you it's it's

00:29:12,480 --> 00:29:17,399
sending a signal so there is a library

00:29:15,419 --> 00:29:19,799
in Linux cod-liver oil but it's

00:29:17,399 --> 00:29:22,590
everything that's done is just sending a

00:29:19,799 --> 00:29:24,659
signal to the kernel it's really it's

00:29:22,590 --> 00:29:27,149
really shallow that it doesn't do much

00:29:24,659 --> 00:29:32,100
and the colonel may decided should write

00:29:27,149 --> 00:29:36,899
out of order and but then on the

00:29:32,100 --> 00:29:39,240
structure of the journal I have under

00:29:36,899 --> 00:29:42,840
structure I have to go and see that the

00:29:39,240 --> 00:29:45,659
whole set of the transaction is is there

00:29:42,840 --> 00:29:50,039
before I think I can reuse the the

00:29:45,659 --> 00:29:54,350
information actually if if you if you if

00:29:50,039 --> 00:30:01,169
you look at the journal internal format

00:29:54,350 --> 00:30:04,010
we have like ads and delete in a file as

00:30:01,169 --> 00:30:07,500
soon as the file is is it's full

00:30:04,010 --> 00:30:12,210
we actually with pre-allocate a file the

00:30:07,500 --> 00:30:15,350
default size is 10 Meg's you can you can

00:30:12,210 --> 00:30:19,620
configure that to whatever side you have

00:30:15,350 --> 00:30:20,970
as soon as that's so you have records

00:30:19,620 --> 00:30:23,190
and files you

00:30:20,970 --> 00:30:26,759
add updates and then you have a like a

00:30:23,190 --> 00:30:30,269
delete right so as soon as you delete

00:30:26,759 --> 00:30:34,289
the whole file the file will be ready to

00:30:30,269 --> 00:30:37,409
be reclaimed and when we reclaim a file

00:30:34,289 --> 00:30:40,590
we don't delete the file we just set a

00:30:37,409 --> 00:30:42,779
header with with an ID instead of like a

00:30:40,590 --> 00:30:45,629
filling up with zeros then like the

00:30:42,779 --> 00:30:47,659
whole file gets back to the GD videos so

00:30:45,629 --> 00:30:52,440
that's why we can do like a very fast

00:30:47,659 --> 00:30:53,970
writing on the files and there are few

00:30:52,440 --> 00:30:57,840
other internal things are ready to put

00:30:53,970 --> 00:31:00,450
in the picture but on as part of those

00:30:57,840 --> 00:31:01,080
ads you have like a transaction ID for

00:31:00,450 --> 00:31:04,259
each record

00:31:01,080 --> 00:31:05,999
so whenever like even when you're not

00:31:04,259 --> 00:31:09,690
saying in transaction the broker might

00:31:05,999 --> 00:31:11,580
may write with an internal transaction

00:31:09,690 --> 00:31:13,979
because you don't want to have like a

00:31:11,580 --> 00:31:16,619
message and not have the add to the

00:31:13,979 --> 00:31:19,139
queue eventually like because you write

00:31:16,619 --> 00:31:21,419
store the message then you add reference

00:31:19,139 --> 00:31:22,919
to the queue and then sometimes we do

00:31:21,419 --> 00:31:25,229
like internal transactions even though

00:31:22,919 --> 00:31:28,950
they are not supposed to the to the

00:31:25,229 --> 00:31:30,989
client and then like if if because of

00:31:28,950 --> 00:31:36,450
the kernel and later you decided to

00:31:30,989 --> 00:31:37,769
write in different order we may we want

00:31:36,450 --> 00:31:42,259
to make sure that everything is there

00:31:37,769 --> 00:31:42,259
before we actually read okay

00:31:46,270 --> 00:31:52,510
if you never got compacted there is a

00:31:51,220 --> 00:31:56,580
situation where the journal gets

00:31:52,510 --> 00:32:00,370
compacted with those odds and deletes

00:31:56,580 --> 00:32:02,530
eventually that you could have like what

00:32:00,370 --> 00:32:05,020
we call like a linked list effect are

00:32:02,530 --> 00:32:06,730
delete are delete ability and like if

00:32:05,020 --> 00:32:10,000
you have one record hanging at the

00:32:06,730 --> 00:32:14,860
beginning it will hold a whole list of

00:32:10,000 --> 00:32:18,490
files so what we do is so it's the fire

00:32:14,860 --> 00:32:23,650
gets too big we recall affecting and we

00:32:18,490 --> 00:32:26,380
and with the broker running with we copy

00:32:23,650 --> 00:32:32,010
to a new set of files and start start

00:32:26,380 --> 00:32:32,010
fresh and it so yeah

00:32:40,299 --> 00:32:44,589
okay do you know that yeah so it is so

00:32:42,999 --> 00:33:02,830
the question if it's differently action

00:32:44,589 --> 00:33:05,499
kill yeah yeah yeah yeah it is it's

00:33:02,830 --> 00:33:07,589
different but we have one right now we

00:33:05,499 --> 00:33:10,450
have one Journal for the entire broker

00:33:07,589 --> 00:33:13,269
so like all the messages are stored in

00:33:10,450 --> 00:33:16,539
single journal unless you're paging like

00:33:13,269 --> 00:33:24,579
I'm going to speak about paging and it's

00:33:16,539 --> 00:33:26,679
in a bit so we actually saw a joke one

00:33:24,579 --> 00:33:31,119
thing own internet saying like oh right

00:33:26,679 --> 00:33:33,579
only devices that never read so actually

00:33:31,119 --> 00:33:35,409
as the other brokers running it it's

00:33:33,579 --> 00:33:39,009
right only and ever and ever read from

00:33:35,409 --> 00:33:40,809
the journal so it's it's built for for

00:33:39,009 --> 00:33:45,070
first recovering case of the bridges of

00:33:40,809 --> 00:33:49,570
the broker crashing this is actually why

00:33:45,070 --> 00:33:51,339
you want a message persisting in the

00:33:49,570 --> 00:33:54,399
messaging broker just to recover from

00:33:51,339 --> 00:33:58,179
disk in case of crash so for that the

00:33:54,399 --> 00:34:01,389
message you stay it's not really never

00:33:58,179 --> 00:34:04,450
read from the journal so unless you

00:34:01,389 --> 00:34:07,839
restart the broker right and there are

00:34:04,450 --> 00:34:12,399
and its first writing it's different

00:34:07,839 --> 00:34:15,940
from paging paging I was actually

00:34:12,399 --> 00:34:17,919
reading on Kafka this this was written

00:34:15,940 --> 00:34:21,849
many years ago but Kafka has like the

00:34:17,919 --> 00:34:25,089
partitions right so we call little page

00:34:21,849 --> 00:34:27,669
files so you write your page file keep

00:34:25,089 --> 00:34:29,849
growing a page file in case you are

00:34:27,669 --> 00:34:32,409
writing beyond the capacity that

00:34:29,849 --> 00:34:38,819
capacity that you configure then starts

00:34:32,409 --> 00:34:42,460
using the partitions or page files to

00:34:38,819 --> 00:34:46,179
just to go beyond what would be capable

00:34:42,460 --> 00:34:48,819
of the memory we do reading cache that

00:34:46,179 --> 00:34:51,789
case when they read something from

00:34:48,819 --> 00:34:53,560
paging I read the whole file so like

00:34:51,789 --> 00:34:56,140
safe I'm reading

00:34:53,560 --> 00:34:56,860
ten mega files then the whole file will

00:34:56,140 --> 00:35:02,680
be memory

00:34:56,860 --> 00:35:04,150
I think I'd keep up to two page pages in

00:35:02,680 --> 00:35:06,180
memory that's configurable while

00:35:04,150 --> 00:35:08,350
depending on how many consumers you have

00:35:06,180 --> 00:35:12,670
right

00:35:08,350 --> 00:35:14,980
if you don't use transactions this works

00:35:12,670 --> 00:35:17,800
really well it's there is no limit for

00:35:14,980 --> 00:35:21,160
that if you do however is using

00:35:17,800 --> 00:35:24,490
transaction and paging there is a limit

00:35:21,160 --> 00:35:31,600
because transactions is still need to be

00:35:24,490 --> 00:35:33,760
stored in the journal it's I mean you

00:35:31,600 --> 00:35:36,550
can go it can go really far with

00:35:33,760 --> 00:35:39,160
transactions but if you're signing one

00:35:36,550 --> 00:35:41,980
transaction for every message used to

00:35:39,160 --> 00:35:44,920
using a lot of used to using a lot of

00:35:41,980 --> 00:35:47,130
data structuring in memory for for

00:35:44,920 --> 00:35:50,320
keeping up with the transaction so yeah

00:35:47,130 --> 00:35:53,590
so if you plan to use messaging as a

00:35:50,320 --> 00:35:56,820
data base or to string a lot of stuff be

00:35:53,590 --> 00:35:59,010
careful with the transactions on aging

00:35:56,820 --> 00:36:01,360
[Music]

00:35:59,010 --> 00:36:07,270
so basically a transaction being

00:36:01,360 --> 00:36:09,310
required to stay in the journal I think

00:36:07,270 --> 00:36:12,340
this slide here already talked about

00:36:09,310 --> 00:36:16,090
with Brett so when you when the clients

00:36:12,340 --> 00:36:17,710
saying something to the context the

00:36:16,090 --> 00:36:22,360
context will be take care of like a

00:36:17,710 --> 00:36:24,520
writing to the disk it will also write

00:36:22,360 --> 00:36:28,810
the context will also be responsible to

00:36:24,520 --> 00:36:33,790
to talk to the to the replicas in case

00:36:28,810 --> 00:36:36,100
you're using H a and replicas the the

00:36:33,790 --> 00:36:38,350
replicas whenever you start a new a new

00:36:36,100 --> 00:36:40,180
replica it will catch up with this

00:36:38,350 --> 00:36:42,970
server it will copy everything to the

00:36:40,180 --> 00:36:46,990
server so the to the new replicas to the

00:36:42,970 --> 00:36:49,210
backup and it will then start doing a

00:36:46,990 --> 00:36:50,830
synchronous right so you write to the

00:36:49,210 --> 00:36:52,900
disk you right to the replicas but you

00:36:50,830 --> 00:36:55,630
never you don't need to write to wait a

00:36:52,900 --> 00:36:57,790
sink here right you just need to

00:36:55,630 --> 00:37:03,130
guarantee that it was accepted by by the

00:36:57,790 --> 00:37:04,780
backup right and it's on a lot of tests

00:37:03,130 --> 00:37:07,030
that I have done

00:37:04,780 --> 00:37:12,070
it has a minimum delaying path to the

00:37:07,030 --> 00:37:13,930
master it's doing it will add some in

00:37:12,070 --> 00:37:16,030
create a little bit of latency but it's

00:37:13,930 --> 00:37:22,270
not it doesn't affect much in the

00:37:16,030 --> 00:37:29,650
throughput right it's really it's pretty

00:37:22,270 --> 00:37:32,560
well behaving at this point it doesn't

00:37:29,650 --> 00:37:35,590
ignore some clock now it will which I

00:37:32,560 --> 00:37:37,630
don't so that it does not acknowledge in

00:37:35,590 --> 00:37:42,430
classic case for progressive Africa yes

00:37:37,630 --> 00:37:44,020
we we don't we don't st. a confirmation

00:37:42,430 --> 00:37:46,300
back to the Crichton - it was written to

00:37:44,020 --> 00:37:49,060
the graphical however I don't need to

00:37:46,300 --> 00:37:50,920
wait a sink on the disk for the replica

00:37:49,060 --> 00:37:56,290
I just need to read think for the disk

00:37:50,920 --> 00:37:58,930
here because in the replica it will be

00:37:56,290 --> 00:38:01,540
written to the disk but will be on the

00:37:58,930 --> 00:38:04,619
memory for the the I mean it could be

00:38:01,540 --> 00:38:04,619
the cache for the disk

00:38:05,160 --> 00:38:10,480
yeah because whenever the server crashed

00:38:07,900 --> 00:38:12,130
you have to close the file before you

00:38:10,480 --> 00:38:15,430
activate the server so you don't need to

00:38:12,130 --> 00:38:19,150
wait for a for a sink in the back that

00:38:15,430 --> 00:38:24,400
would be too much going on if it were

00:38:19,150 --> 00:38:26,920
the case for frog rip for our high

00:38:24,400 --> 00:38:29,619
availability we have replication as I

00:38:26,920 --> 00:38:31,990
said we have some split brain protection

00:38:29,619 --> 00:38:34,420
based on things we have a component that

00:38:31,990 --> 00:38:37,420
is call like a network health check you

00:38:34,420 --> 00:38:40,000
can specify a ping a list of being

00:38:37,420 --> 00:38:41,770
addresses in case you want to mix in

00:38:40,000 --> 00:38:43,690
case once you configure what you do in

00:38:41,770 --> 00:38:49,690
case you pull up the cable of the

00:38:43,690 --> 00:38:51,099
replica right action q5 actually what at

00:38:49,690 --> 00:38:53,830
the replicas that you had like if you

00:38:51,099 --> 00:38:58,240
lost the connectivity with the live live

00:38:53,830 --> 00:39:00,520
with the stop itself right but what to

00:38:58,240 --> 00:39:05,109
do is the replica crashed and not a

00:39:00,520 --> 00:39:09,099
server then you lost both nodes right so

00:39:05,109 --> 00:39:12,160
so what we did is two different ratios

00:39:09,099 --> 00:39:15,250
between if the replicas craft or if the

00:39:12,160 --> 00:39:16,120
live crashed we we can do we can check

00:39:15,250 --> 00:39:18,460
enough

00:39:16,120 --> 00:39:23,740
given AP just if the network is to

00:39:18,460 --> 00:39:28,210
available before you can actually enable

00:39:23,740 --> 00:39:32,050
or activate backup activity replicas and

00:39:28,210 --> 00:39:35,650
and the other way it's the best is using

00:39:32,050 --> 00:39:40,560
more than three notes using using a

00:39:35,650 --> 00:39:43,230
forum right now we do our own quorum we

00:39:40,560 --> 00:39:46,180
we have been talking about using

00:39:43,230 --> 00:39:48,400
zookeeper in the short term for future

00:39:46,180 --> 00:39:52,480
but right now is to using our own quorum

00:39:48,400 --> 00:39:54,840
voting credit and another option that we

00:39:52,480 --> 00:39:57,840
have is like a business shared storage

00:39:54,840 --> 00:39:57,840
right

00:40:06,240 --> 00:40:15,930
if I would keep if if I would keep the

00:40:09,119 --> 00:40:19,079
internal Cody yeah oh yeah I'm not I'm

00:40:15,930 --> 00:40:22,200
talking as a developer I I wouldn't I

00:40:19,079 --> 00:40:25,500
wouldn't drop the code I would add as an

00:40:22,200 --> 00:40:28,109
option to do keep or not and not are not

00:40:25,500 --> 00:40:30,450
looking to remove the code for for the

00:40:28,109 --> 00:40:36,359
core we may improve the code whenever

00:40:30,450 --> 00:40:39,000
remove it so I think see the way I look

00:40:36,359 --> 00:40:40,529
the code whenever I'm refactoring to

00:40:39,000 --> 00:40:43,500
user zookeeper and pretty sure that

00:40:40,529 --> 00:40:45,000
we'll find different ways and but it

00:40:43,500 --> 00:40:54,559
will keep the same semantics and what

00:40:45,000 --> 00:40:54,559
you have now yeah

00:40:55,200 --> 00:41:04,569
okay so we have with Artemis - now we

00:41:00,970 --> 00:41:06,609
have two ways of clustering one is the

00:41:04,569 --> 00:41:08,829
internal clustering based on bridges or

00:41:06,609 --> 00:41:16,119
what we would call a network of brokers

00:41:08,829 --> 00:41:17,710
1985 but with the Artemis - and we were

00:41:16,119 --> 00:41:22,990
dealing with him keeping out that there

00:41:17,710 --> 00:41:27,150
is one interesting project in in Cupid

00:41:22,990 --> 00:41:29,920
called dispatch router this is actually

00:41:27,150 --> 00:41:34,990
if you guys look up from the

00:41:29,920 --> 00:41:37,779
documentation around J balls MQ is what

00:41:34,990 --> 00:41:41,970
it's called interconnect on and keys

00:41:37,779 --> 00:41:45,520
it's actually the same the same thing

00:41:41,970 --> 00:41:48,339
basically whenever you don't connect a

00:41:45,520 --> 00:41:51,720
client directly to the broker you have

00:41:48,339 --> 00:41:56,049
clients connecting to to the router

00:41:51,720 --> 00:41:58,450
using MTP protocol and if you could have

00:41:56,049 --> 00:42:01,200
like a pretty extensive pictures on this

00:41:58,450 --> 00:42:04,539
right you could have like a many routers

00:42:01,200 --> 00:42:07,119
it can do actually quite complex setups

00:42:04,539 --> 00:42:10,920
with this thinking about like a big

00:42:07,119 --> 00:42:13,299
networking and supporting like a

00:42:10,920 --> 00:42:15,190
millions of connections on Nyota

00:42:13,299 --> 00:42:18,339
scenarios that's kind of thing that this

00:42:15,190 --> 00:42:21,730
is this would go after right so like a

00:42:18,339 --> 00:42:28,839
cupids patch will actually improve quite

00:42:21,730 --> 00:42:30,460
a lot on the next slide actually this is

00:42:28,839 --> 00:42:35,559
my last slide after this I'm going to do

00:42:30,460 --> 00:42:39,490
some running a broker it is actually

00:42:35,559 --> 00:42:45,010
quite recently we have been using we

00:42:39,490 --> 00:42:49,450
have been using nary for forever and we

00:42:45,010 --> 00:42:51,190
now using the food buffers for

00:42:49,450 --> 00:42:52,779
everything internally like when you

00:42:51,190 --> 00:42:56,460
write your application when you write to

00:42:52,779 --> 00:42:59,559
the disk only writes to - paging and

00:42:56,460 --> 00:43:02,859
that it creates quite a lot of the

00:42:59,559 --> 00:43:05,230
garbage collection pressure and the next

00:43:02,859 --> 00:43:06,910
step that we are doing now is like when

00:43:05,230 --> 00:43:07,730
we have the message the message you also

00:43:06,910 --> 00:43:10,250
have a ball

00:43:07,730 --> 00:43:12,560
the server that body will also be using

00:43:10,250 --> 00:43:14,840
a pool buffer and that will I'm sure

00:43:12,560 --> 00:43:17,480
that will improve quite a lot of things

00:43:14,840 --> 00:43:20,680
it's a it's actually what I'm working

00:43:17,480 --> 00:43:22,760
now it's all this this step right now

00:43:20,680 --> 00:43:25,910
there are the things that we have to

00:43:22,760 --> 00:43:31,430
improve like we were still looking to do

00:43:25,910 --> 00:43:34,310
a admin console and we have only we have

00:43:31,430 --> 00:43:37,840
one on internal for Red Hat that we need

00:43:34,310 --> 00:43:40,940
to to bring one for for actually even

00:43:37,840 --> 00:43:44,690
active and queue files with the refacing

00:43:40,940 --> 00:43:46,900
on the admin console and the websites of

00:43:44,690 --> 00:43:46,900
course

00:43:57,640 --> 00:44:01,630
this would be a bit challenging for me

00:43:59,290 --> 00:44:04,140
because I have to look at the screen as

00:44:01,630 --> 00:44:04,140
I do this

00:44:15,690 --> 00:44:23,220
when you when you download Artemis you

00:44:18,640 --> 00:44:26,950
have this little being executor here

00:44:23,220 --> 00:44:32,260
where you can create a broker so if I'm

00:44:26,950 --> 00:44:36,010
going to call Artemis create I'm going

00:44:32,260 --> 00:44:40,000
to create a broker at my presentation

00:44:36,010 --> 00:44:44,680
work my presentation what's happening

00:44:40,000 --> 00:44:48,460
here is asking me a user a password if I

00:44:44,680 --> 00:44:50,410
allow animals animals access pretty much

00:44:48,460 --> 00:44:53,400
a very clear to the broker but what you

00:44:50,410 --> 00:44:58,810
see here is a auto-tuning in the journal

00:44:53,400 --> 00:45:02,970
so it's saying that my my disk can do 25

00:44:58,810 --> 00:45:05,440
rights per millisecond this is actually

00:45:02,970 --> 00:45:10,240
calculated the most optimal value for

00:45:05,440 --> 00:45:12,880
the time flush for the disk so so the

00:45:10,240 --> 00:45:16,360
the time out for the journal time of

00:45:12,880 --> 00:45:18,070
here will be 40,000 nanoseconds so so

00:45:16,360 --> 00:45:20,230
that means that this the broker will

00:45:18,070 --> 00:45:23,410
issue a right to the discovery forty

00:45:20,230 --> 00:45:28,740
thousand and the seconds so if I go to

00:45:23,410 --> 00:45:28,740
my presentation

00:45:30,020 --> 00:45:35,470
I can start the broker

00:45:37,240 --> 00:45:47,940
and there are a few tools on the CLI one

00:45:43,990 --> 00:45:50,170
that I liked a lot is the producer

00:45:47,940 --> 00:45:56,050
so it's sound like a thousand messages

00:45:50,170 --> 00:45:58,720
in 648 milliseconds if I do again this

00:45:56,050 --> 00:46:00,940
probably low probably be like a 500

00:45:58,720 --> 00:46:05,800
milliseconds for this much and if I do

00:46:00,940 --> 00:46:07,330
consumer it received look at all these

00:46:05,800 --> 00:46:10,660
tools and that's it this is actually

00:46:07,330 --> 00:46:12,790
pretty fast and it's too boring feeling

00:46:10,660 --> 00:46:18,700
like a boring thing making warranties

00:46:12,790 --> 00:46:23,110
about the acknowledgments on and on the

00:46:18,700 --> 00:46:27,910
ATC you see the broker configurations if

00:46:23,110 --> 00:46:29,320
you want to like to change sales who

00:46:27,910 --> 00:46:31,930
ever change the hardware you could

00:46:29,320 --> 00:46:35,890
change like at the time rights and a

00:46:31,930 --> 00:46:40,180
bunch of stuff here and the last thing I

00:46:35,890 --> 00:46:43,170
wanted to show on this crash

00:46:40,180 --> 00:46:43,170
demonstration

00:46:48,640 --> 00:47:00,180
there are lots of examples here and all

00:46:55,330 --> 00:47:00,180
of them are runnable so say if I go to

00:47:01,080 --> 00:47:12,490
topic if I just type maven verify it

00:47:08,080 --> 00:47:14,890
will run the broker and run the server

00:47:12,490 --> 00:47:17,560
and do everything so all these examples

00:47:14,890 --> 00:47:20,290
are runnable and you can use them to

00:47:17,560 --> 00:47:23,410
debug or making sure you understand the

00:47:20,290 --> 00:47:28,690
broker so just to conclude Artemis is

00:47:23,410 --> 00:47:31,450
very rich in features it takes makes a

00:47:28,690 --> 00:47:36,430
lot easier in the client so it's not

00:47:31,450 --> 00:47:40,630
just JMS and I hope you guys enjoy good

00:47:36,430 --> 00:47:42,990
get from finish to this any any more

00:47:40,630 --> 00:47:42,990
questions

00:47:43,810 --> 00:47:50,850
I saw the like console a console

00:47:57,910 --> 00:48:04,010
yes if the about the question about the

00:48:01,160 --> 00:48:05,510
question is if we have enough and a

00:48:04,010 --> 00:48:10,460
constant we don't have a console right

00:48:05,510 --> 00:48:12,800
now but we had some mishaps with the

00:48:10,460 --> 00:48:16,040
community about like the way that we

00:48:12,800 --> 00:48:19,040
were going to do a console and and now

00:48:16,040 --> 00:48:20,960
we think we believer to zero to one we

00:48:19,040 --> 00:48:24,320
can dedicate some time into that forum

00:48:20,960 --> 00:48:27,890
it it is on the world map it isn't what

00:48:24,320 --> 00:48:29,900
matters right well I'm not sure if it's

00:48:27,890 --> 00:48:32,390
on the public road map but it's I'm

00:48:29,900 --> 00:48:34,760
definitely other developer I'm looking

00:48:32,390 --> 00:48:36,920
myself and doing that it's just like

00:48:34,760 --> 00:48:40,490
it's so much being done on just

00:48:36,920 --> 00:48:43,390
refactoring our n2p was a lot of working

00:48:40,490 --> 00:48:43,390
to do like that

00:48:51,230 --> 00:48:54,220
what

00:48:59,050 --> 00:49:01,080
Oh

00:49:01,230 --> 00:49:10,500
how difficult the immigration for

00:49:03,089 --> 00:49:12,720
Artemus if you're not using I think I

00:49:10,500 --> 00:49:14,579
think the only thing that's talking some

00:49:12,720 --> 00:49:16,829
people from moving is what they call a

00:49:14,579 --> 00:49:19,890
virtual digital topics that you don't

00:49:16,829 --> 00:49:21,780
need with with JMS to because it in

00:49:19,890 --> 00:49:24,660
having you can have different ways of

00:49:21,780 --> 00:49:26,250
creating consumers but if you're not

00:49:24,660 --> 00:49:28,680
using anything special like that is

00:49:26,250 --> 00:49:31,349
pretty easy just JMS makes that easy

00:49:28,680 --> 00:49:34,770
like even the supportive interacting

00:49:31,349 --> 00:49:42,630
with clients with open work lines and so

00:49:34,770 --> 00:49:45,359
it's not very difficult it'll data for

00:49:42,630 --> 00:49:47,849
teens there is an exported that was just

00:49:45,359 --> 00:49:50,690
released from activity five became

00:49:47,849 --> 00:49:50,690
important Artemis

00:49:53,420 --> 00:49:58,080
so I mean thank you guys that's just

00:49:56,750 --> 00:50:02,190
sick

00:49:58,080 --> 00:50:02,190

YouTube URL: https://www.youtube.com/watch?v=qF1Op1ZNBAk


