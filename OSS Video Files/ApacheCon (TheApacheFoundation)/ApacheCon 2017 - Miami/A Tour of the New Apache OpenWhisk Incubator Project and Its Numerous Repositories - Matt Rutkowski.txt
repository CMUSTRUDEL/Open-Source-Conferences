Title: A Tour of the New Apache OpenWhisk Incubator Project and Its Numerous Repositories - Matt Rutkowski
Publication date: 2017-05-19
Playlist: ApacheCon 2017 - Miami
Description: 
	A Tour of the New Apache OpenWhisk Incubator Project and Its Numerous Repositories - Matt Rutkowski, IBM Open Technologies

The OpenWhisk project was accepted as an Incubator project in late November last year. You may know it as a Serverless or Function-as-a-Service platform, but did you know the project itself is comprised of, as of today's count, 30 repositories and growing. These repos. comprise what I call the OpenWhisk ecosystem; it includes not only a built-in Catalog of system actions, but also numerous Command Line Interface (CLI) bindings, Packages (of Actions, Triggers and Feeds), Orchestration tooling for manifest-based deplyments, Developer Tooling, SDKs, Docker language and blackbox Runtimes and most importantly a complete API Gateway that enables its own pluggable framework for securely connect and routing to the platform. This session aims to take you on a tour of what is there (with occasional semi-deep dives) to use, integrate with and hopefully contribute to as we grow our new community.

About Matt Rutkowski
My amorphous job and tile within IBM encompass engaging with and progressing all manner of open source and stds. projects, basically anything that is “born on,” connects to, or touches cloud (e.g., data, services, fabric, distributed platforms, IoT, etc.). Currently, I am leading ecosystem development for the Apache OpenWhisk project which is being used by IBM Cloud Functions (Serverless) platform while still working in the OASIS TOSCA std., and previously various OpenStack projects.
Captions: 
	00:00:00,030 --> 00:00:09,290
well let's get started my name is Matt

00:00:03,149 --> 00:00:11,700
Rakowski I work at IBM in cloud area

00:00:09,290 --> 00:00:14,910
specifically work in open technologies

00:00:11,700 --> 00:00:18,930
which involves both open source and open

00:00:14,910 --> 00:00:21,810
standards it's my goal to make sure we

00:00:18,930 --> 00:00:26,220
create healthy open-source ecosystems

00:00:21,810 --> 00:00:31,309
around open standards were possible and

00:00:26,220 --> 00:00:35,579
open wisk is ripe for collaboration and

00:00:31,309 --> 00:00:37,710
involvement to improve and advocate for

00:00:35,579 --> 00:00:42,480
serverless computing event-driven

00:00:37,710 --> 00:00:45,390
programming so my job here today is that

00:00:42,480 --> 00:00:47,879
if you saw Carlos's last session you

00:00:45,390 --> 00:00:50,879
understand the workings of open with to

00:00:47,879 --> 00:00:53,070
some degree and I want to try to take

00:00:50,879 --> 00:00:55,410
you through the many repositories that

00:00:53,070 --> 00:00:59,910
make up what I call the open life's

00:00:55,410 --> 00:01:02,340
project ecosystem and entice you to try

00:00:59,910 --> 00:01:04,710
to connect the work that you're doing or

00:01:02,340 --> 00:01:06,510
your interest areas to some aspect of

00:01:04,710 --> 00:01:09,000
the project to get YouTube to think

00:01:06,510 --> 00:01:12,240
about contributing if nothing else your

00:01:09,000 --> 00:01:15,540
ideas hopefully some some code and

00:01:12,240 --> 00:01:19,320
integrations and we can towards becoming

00:01:15,540 --> 00:01:22,439
active committers who can carry forward

00:01:19,320 --> 00:01:30,570
and improve service computing for

00:01:22,439 --> 00:01:32,100
everybody so to level-set open with so

00:01:30,570 --> 00:01:36,079
make sure in the correct room for people

00:01:32,100 --> 00:01:36,079
who did not attend the last session is

00:01:36,619 --> 00:01:43,619
you know open risk is up as a service

00:01:39,180 --> 00:01:46,649
platform so whisk is a cooking term I

00:01:43,619 --> 00:01:49,200
have a little graphic I created where we

00:01:46,649 --> 00:01:50,729
want to bring together the the

00:01:49,200 --> 00:01:52,500
functional components of applications

00:01:50,729 --> 00:01:56,189
from many different sources wherever you

00:01:52,500 --> 00:01:57,270
have events wherever they come from we

00:01:56,189 --> 00:02:00,210
want to be able to bring those together

00:01:57,270 --> 00:02:05,450
through surrealists whether it be from

00:02:00,210 --> 00:02:09,330
IOT mobile traditional data storage

00:02:05,450 --> 00:02:10,530
stateful data cognitive analytics we

00:02:09,330 --> 00:02:12,540
want them to come together through

00:02:10,530 --> 00:02:13,680
server lists because it makes sense it's

00:02:12,540 --> 00:02:14,730
highly efficient

00:02:13,680 --> 00:02:16,829
and it removes in a lot of the

00:02:14,730 --> 00:02:19,049
complexity you'll see each of these

00:02:16,829 --> 00:02:20,670
areas is removed if you can approach it

00:02:19,049 --> 00:02:27,360
from a service

00:02:20,670 --> 00:02:29,700
functional standpoint again why we take

00:02:27,360 --> 00:02:31,769
the tour we've got a lot of repos I have

00:02:29,700 --> 00:02:34,439
28 plus or minus luckily I put plus or

00:02:31,769 --> 00:02:39,060
minus because I added two refills

00:02:34,439 --> 00:02:42,090
yesterday so and I'll touch upon those

00:02:39,060 --> 00:02:44,099
where appropriate again spark your

00:02:42,090 --> 00:02:46,650
interest one of those you know we don't

00:02:44,099 --> 00:02:48,329
want is we have a platform some aspects

00:02:46,650 --> 00:02:51,239
are rather imposing there might be and

00:02:48,329 --> 00:02:54,180
languages you don't want to learn but

00:02:51,239 --> 00:02:55,680
there are many areas for integration on

00:02:54,180 --> 00:03:00,450
the periphery for tooling and

00:02:55,680 --> 00:03:02,609
integration I want to explain where the

00:03:00,450 --> 00:03:05,340
code relatives the architecture where it

00:03:02,609 --> 00:03:07,200
lives in each of the repos and I want to

00:03:05,340 --> 00:03:08,790
highlight the functional aspects of

00:03:07,200 --> 00:03:11,310
what's going on the code and provide

00:03:08,790 --> 00:03:12,870
some call-to-action give you some ideas

00:03:11,310 --> 00:03:15,239
of things that we've talked about

00:03:12,870 --> 00:03:18,359
I have Carlos and others have talked

00:03:15,239 --> 00:03:20,609
about where we would like to expand new

00:03:18,359 --> 00:03:26,699
feature sets and to see if these things

00:03:20,609 --> 00:03:30,120
resonate with everyone here so this is

00:03:26,699 --> 00:03:32,129
my echo system view of open wisk so

00:03:30,120 --> 00:03:35,040
again we have the core which Carlos took

00:03:32,129 --> 00:03:36,599
you through in the last session and that

00:03:35,040 --> 00:03:39,810
larger lives in one repository I'll

00:03:36,599 --> 00:03:43,409
cover we have a set up we have a

00:03:39,810 --> 00:03:46,739
command-line family of things that

00:03:43,409 --> 00:03:50,220
interact through RESTful API we have

00:03:46,739 --> 00:03:53,519
tooling which I'll cover each of those

00:03:50,220 --> 00:03:56,159
areas as well we have a catalog which we

00:03:53,519 --> 00:03:57,569
split out last year from open with to

00:03:56,159 --> 00:04:00,019
try and we have things that are called

00:03:57,569 --> 00:04:02,579
system actions which are shared actions

00:04:00,019 --> 00:04:04,440
basic connectors so anything that should

00:04:02,579 --> 00:04:07,319
be intrinsic in the catalog when you

00:04:04,440 --> 00:04:10,379
load open whisks you compose with we

00:04:07,319 --> 00:04:14,940
want to put into a common catalog we

00:04:10,379 --> 00:04:18,389
have external resources education

00:04:14,940 --> 00:04:22,229
materials playground hackathon materials

00:04:18,389 --> 00:04:26,340
things like that workshops we have our

00:04:22,229 --> 00:04:27,420
website which is that which is still so

00:04:26,340 --> 00:04:30,810
I should say

00:04:27,420 --> 00:04:32,520
thank Dan McGrew know and also Carlos

00:04:30,810 --> 00:04:35,850
for working there the last two weeks to

00:04:32,520 --> 00:04:38,160
take all of the repos I've been I'll be

00:04:35,850 --> 00:04:40,680
referencing here into Apache

00:04:38,160 --> 00:04:42,210
organization from open Mis org the only

00:04:40,680 --> 00:04:43,380
one stand out is still our website is

00:04:42,210 --> 00:04:45,660
still in the old org

00:04:43,380 --> 00:04:50,060
but we need to create some we needs help

00:04:45,660 --> 00:04:52,950
there too to take the Jekyll Jekyll

00:04:50,060 --> 00:04:56,730
compilation and get it moved and pushed

00:04:52,950 --> 00:04:57,990
over to its home and Apache so once we

00:04:56,730 --> 00:04:59,760
get that automation through Jenkins or

00:04:57,990 --> 00:05:01,950
something that you know we'd love to

00:04:59,760 --> 00:05:04,170
have that moved over as well we have

00:05:01,950 --> 00:05:06,390
packages so you know we have this

00:05:04,170 --> 00:05:08,610
catalog of some actions and some smaller

00:05:06,390 --> 00:05:10,890
packages getting started some helper

00:05:08,610 --> 00:05:12,870
thing but when we have full-blown

00:05:10,890 --> 00:05:15,000
integrations we have something called a

00:05:12,870 --> 00:05:17,460
package concept if you have actions and

00:05:15,000 --> 00:05:19,620
feeds and triggers and the things that

00:05:17,460 --> 00:05:21,690
allow you to connect these external data

00:05:19,620 --> 00:05:23,610
sources and int sources we want them to

00:05:21,690 --> 00:05:26,130
have their own top-level packages and

00:05:23,610 --> 00:05:27,150
you know the questions the end of the

00:05:26,130 --> 00:05:29,610
last session we're about what about

00:05:27,150 --> 00:05:32,880
impute ET and other things well we want

00:05:29,610 --> 00:05:36,090
packages we want packages that we curate

00:05:32,880 --> 00:05:39,000
and we have top-level repos that

00:05:36,090 --> 00:05:41,010
encourage integrations and we have

00:05:39,000 --> 00:05:45,510
samples so as we bring some of these

00:05:41,010 --> 00:05:48,990
workflows together if you come to our

00:05:45,510 --> 00:05:51,330
booth you see things like part ordering

00:05:48,990 --> 00:05:53,690
or check processing we'd love to have

00:05:51,330 --> 00:05:57,270
samples that show people how they can

00:05:53,690 --> 00:06:00,690
deploy with one-click using our one of

00:05:57,270 --> 00:06:03,210
our tools to get people started to show

00:06:00,690 --> 00:06:05,250
a meaningful sample application that

00:06:03,210 --> 00:06:06,750
perhaps speaks to workflow they have in

00:06:05,250 --> 00:06:09,390
their in their company that they can use

00:06:06,750 --> 00:06:13,140
or or use as a derived from a basic

00:06:09,390 --> 00:06:14,900
example and customized to their knees so

00:06:13,140 --> 00:06:18,930
these are the areas all going to you

00:06:14,900 --> 00:06:21,240
so with core so it's most of its core

00:06:18,930 --> 00:06:24,170
the controller specifically it's written

00:06:21,240 --> 00:06:26,460
in Scala if you look into the repository

00:06:24,170 --> 00:06:29,130
primarily why I think of that it's it's

00:06:26,460 --> 00:06:31,470
besides the controller which manages all

00:06:29,130 --> 00:06:34,620
the wisk entities the actions the tours

00:06:31,470 --> 00:06:38,070
of feeds with the stateful databases and

00:06:34,620 --> 00:06:40,889
works and has the configurations that it

00:06:38,070 --> 00:06:43,319
uses in the console store

00:06:40,889 --> 00:06:45,930
that I viewed as a big deployment build

00:06:43,319 --> 00:06:47,819
deployment repos so all this all the

00:06:45,930 --> 00:06:50,449
things you need to run risk and get

00:06:47,819 --> 00:06:53,610
going or in the core ansible scripts

00:06:50,449 --> 00:06:56,129
Gradle build stuff and things of that

00:06:53,610 --> 00:06:58,139
nature and all of its towards container

00:06:56,129 --> 00:07:00,449
izing each of these components so these

00:06:58,139 --> 00:07:04,199
are things you'll find in the core I'm

00:07:00,449 --> 00:07:06,960
not a Scala person I'll admit it I only

00:07:04,199 --> 00:07:08,099
rudimental a basic things about ansible

00:07:06,960 --> 00:07:10,259
to get things going and how things

00:07:08,099 --> 00:07:13,229
deploy so I spend most my time on the

00:07:10,259 --> 00:07:14,879
periphery not in this area myself but if

00:07:13,229 --> 00:07:16,289
this is what you want to work on the

00:07:14,879 --> 00:07:19,650
things like Charles is talking about

00:07:16,289 --> 00:07:21,389
we're doing integration trying to do

00:07:19,650 --> 00:07:24,360
with elasticsearch to try and create a

00:07:21,389 --> 00:07:25,889
generic like lumberjack MT output from

00:07:24,360 --> 00:07:28,050
all of the containers and all the

00:07:25,889 --> 00:07:30,270
componentry so you can gather that data

00:07:28,050 --> 00:07:34,439
and analyze it however you want

00:07:30,270 --> 00:07:37,039
we need help there documentation is

00:07:34,439 --> 00:07:40,560
always key we have lots of deployments

00:07:37,039 --> 00:07:42,509
different deployment target environments

00:07:40,560 --> 00:07:45,150
and things like that we'd love to add

00:07:42,509 --> 00:07:46,949
Moore's as Carlos is saying we'd like to

00:07:45,150 --> 00:07:50,849
improve the documentation for them the

00:07:46,949 --> 00:07:52,800
testing for them those things we've

00:07:50,849 --> 00:07:55,529
talked about things like replacing you

00:07:52,800 --> 00:07:58,199
know replacing our QL cellular so making

00:07:55,529 --> 00:08:00,389
bomb this was Peter I can't remember who

00:07:58,199 --> 00:08:02,069
it was you know can we have if we run

00:08:00,389 --> 00:08:06,659
this in kubernetes can we how can we

00:08:02,069 --> 00:08:08,009
plug in a TD as a source of truth so

00:08:06,659 --> 00:08:12,149
these things you know we'd love to have

00:08:08,009 --> 00:08:14,189
help with in the core repository and

00:08:12,149 --> 00:08:15,750
also Message Queuing know how could we

00:08:14,189 --> 00:08:17,909
replace Kafka we replace it with a

00:08:15,750 --> 00:08:20,759
different queuing mechanism is our need

00:08:17,909 --> 00:08:22,139
to we'd like to question the system we'd

00:08:20,759 --> 00:08:24,689
like people to come to us and question

00:08:22,139 --> 00:08:26,370
the system and engage us and our slack

00:08:24,689 --> 00:08:29,009
channels our dev lists and things like

00:08:26,370 --> 00:08:31,919
that and get answers and document those

00:08:29,009 --> 00:08:33,120
answers and come to consensus of what we

00:08:31,919 --> 00:08:35,690
might want to do in terms of

00:08:33,120 --> 00:08:35,690
architecture

00:08:38,130 --> 00:08:45,370
so I started talking ahead to myself so

00:08:43,479 --> 00:08:49,570
in terms of what we have in ansible we

00:08:45,370 --> 00:08:52,630
have local distributed mac with local we

00:08:49,570 --> 00:08:55,300
have we support windows the boon to make

00:08:52,630 --> 00:08:57,820
the native installations you can have

00:08:55,300 --> 00:09:00,880
your your touch DB is what we have in

00:08:57,820 --> 00:09:03,040
the open source offering as your store

00:09:00,880 --> 00:09:06,580
for all your objects your entities or

00:09:03,040 --> 00:09:08,440
state you know replace that if you want

00:09:06,580 --> 00:09:10,330
see if we can have some general TV

00:09:08,440 --> 00:09:13,510
connector to store in your database of

00:09:10,330 --> 00:09:16,660
choice recent activities we added

00:09:13,510 --> 00:09:18,339
support for web actions which was

00:09:16,660 --> 00:09:21,370
different it should be a header variance

00:09:18,339 --> 00:09:23,080
mime types we separated out the command

00:09:21,370 --> 00:09:25,060
line that's still ongoing work I hope it

00:09:23,080 --> 00:09:27,580
would been completed by now but we're

00:09:25,060 --> 00:09:29,980
still working on that so we want to

00:09:27,580 --> 00:09:31,779
basically make the command line more

00:09:29,980 --> 00:09:34,750
configurable pluggable maybe look at

00:09:31,779 --> 00:09:37,480
other command line frameworks we use for

00:09:34,750 --> 00:09:39,550
future interesting the logging log med

00:09:37,480 --> 00:09:41,260
is a source that we want to work towards

00:09:39,550 --> 00:09:43,870
but the mechanism for getting data to

00:09:41,260 --> 00:09:47,020
elasticsearch is through some sort

00:09:43,870 --> 00:09:49,029
through some open source projects so be

00:09:47,020 --> 00:09:52,180
able to hook in hook hook in there is a

00:09:49,029 --> 00:09:54,339
possibility for other target and just

00:09:52,180 --> 00:09:56,850
general help wanted I mentioned document

00:09:54,339 --> 00:09:59,980
we'd love to have performance testing I

00:09:56,850 --> 00:10:02,500
didn't list we have a performance test

00:09:59,980 --> 00:10:04,150
Suites in IBM we'd love to move out to

00:10:02,500 --> 00:10:06,040
open but we need to figure out how to

00:10:04,150 --> 00:10:08,320
stage those tests how do we automate

00:10:06,040 --> 00:10:10,060
those tests in the Apache infrastructure

00:10:08,320 --> 00:10:14,560
people have experience with that we love

00:10:10,060 --> 00:10:16,060
help the UI I miss Ashley audience we

00:10:14,560 --> 00:10:19,000
have we have the command line that's

00:10:16,060 --> 00:10:22,930
great but when you look at commercial

00:10:19,000 --> 00:10:26,410
offerings from like asher or even Amazon

00:10:22,930 --> 00:10:28,390
they have a web UI in public we'd love

00:10:26,410 --> 00:10:30,160
to have somebody with who's excited

00:10:28,390 --> 00:10:32,410
about taking our command line experience

00:10:30,160 --> 00:10:35,170
and things like our debugger and making

00:10:32,410 --> 00:10:36,610
them available in a open web user

00:10:35,170 --> 00:10:38,860
interface that people can use and

00:10:36,610 --> 00:10:43,540
customize as well drag-and-drop

00:10:38,860 --> 00:10:45,370
composition from our catalog and always

00:10:43,540 --> 00:10:47,079
it's about performance and hardening of

00:10:45,370 --> 00:10:48,750
the code improves security

00:10:47,079 --> 00:10:51,160
how does improbably make it easier for

00:10:48,750 --> 00:10:51,700
taking our namespacing model and

00:10:51,160 --> 00:10:53,770
applying

00:10:51,700 --> 00:10:55,690
maybe other security models too it may

00:10:53,770 --> 00:10:57,490
be our naming system main spacing model

00:10:55,690 --> 00:11:00,400
for putting entities into the system it

00:10:57,490 --> 00:11:01,780
needs to be challenged who knows people

00:11:00,400 --> 00:11:04,030
who are dealing a security or applying

00:11:01,780 --> 00:11:05,920
this to different target platforms you

00:11:04,030 --> 00:11:13,090
need to come to us engage us and help

00:11:05,920 --> 00:11:16,330
with how we improve those things the CLI

00:11:13,090 --> 00:11:20,380
this is pretty pretty simple

00:11:16,330 --> 00:11:23,860
again HP rust calls for mending all the

00:11:20,380 --> 00:11:26,290
risk entities and SDKs we have SDKs

00:11:23,860 --> 00:11:28,840
which will solution you'll see we have

00:11:26,290 --> 00:11:30,730
multiple language variants so if you

00:11:28,840 --> 00:11:33,130
want to integrate which we do for

00:11:30,730 --> 00:11:34,180
different tooling different ID es or

00:11:33,130 --> 00:11:39,520
whatever might be we have different

00:11:34,180 --> 00:11:42,460
languages swift Python JavaScript the

00:11:39,520 --> 00:11:46,390
language that we primarily look to

00:11:42,460 --> 00:11:47,500
support is go language in terms of being

00:11:46,390 --> 00:11:50,440
the starting point for adding these

00:11:47,500 --> 00:11:54,340
functionality new API and the other

00:11:50,440 --> 00:11:58,210
repos are kind of are kind of after the

00:11:54,340 --> 00:12:00,030
go the go stuff API gateway support

00:11:58,210 --> 00:12:03,360
that's an example of recent activities

00:12:00,030 --> 00:12:06,340
Adobe and and IBM worked in

00:12:03,360 --> 00:12:09,010
collaboration with others to create an

00:12:06,340 --> 00:12:11,500
API Gateway project under the OPA most

00:12:09,010 --> 00:12:14,950
family and Carlos demonstrated some of

00:12:11,500 --> 00:12:17,050
that and we'll get into specifics about

00:12:14,950 --> 00:12:18,970
needs there but we you know that

00:12:17,050 --> 00:12:21,640
functionality was experimental in AP is

00:12:18,970 --> 00:12:24,550
until a few weeks ago and it took a lot

00:12:21,640 --> 00:12:27,000
of effort to go through the code to make

00:12:24,550 --> 00:12:29,650
sure that that the naming and the

00:12:27,000 --> 00:12:31,630
experimental tag for that left the

00:12:29,650 --> 00:12:34,180
system and they became a full full-blown

00:12:31,630 --> 00:12:35,590
X integrated function I guess that

00:12:34,180 --> 00:12:36,790
reminds me that something that we've

00:12:35,590 --> 00:12:38,920
been talking about Carlos and I this

00:12:36,790 --> 00:12:40,810
week is about releases a lot of our

00:12:38,920 --> 00:12:42,790
focus the last two days and attending

00:12:40,810 --> 00:12:46,270
sessions here at Apache you know we need

00:12:42,790 --> 00:12:48,580
a ated release mechanism for open whisk

00:12:46,270 --> 00:12:50,770
and we were debating what things and how

00:12:48,580 --> 00:12:52,240
we do it and which things we include in

00:12:50,770 --> 00:12:53,860
a release and how we version those

00:12:52,240 --> 00:12:55,390
things so these are things we help for

00:12:53,860 --> 00:12:57,490
people in a patch you have done these

00:12:55,390 --> 00:13:00,670
things for larger projects especially we

00:12:57,490 --> 00:13:04,180
love we love help with now we'd love to

00:13:00,670 --> 00:13:04,990
when we had took the experimental off of

00:13:04,180 --> 00:13:06,940
it we'd love to

00:13:04,990 --> 00:13:09,450
created a point version and push diviner

00:13:06,940 --> 00:13:14,020
out someplace and notified people and

00:13:09,450 --> 00:13:16,839
and those things we want more plug

00:13:14,020 --> 00:13:20,230
ability in the api's we right now we use

00:13:16,839 --> 00:13:22,120
a Cobra framework we've and we'd love

00:13:20,230 --> 00:13:24,399
more SDKs figure out how we make a

00:13:22,120 --> 00:13:26,980
generic SDK more pluggable and less

00:13:24,399 --> 00:13:29,050
write less code when we when we adopt a

00:13:26,980 --> 00:13:30,670
new SDK is there need for other

00:13:29,050 --> 00:13:32,320
languages what's the value of that

00:13:30,670 --> 00:13:35,320
should we reduce our languages for that

00:13:32,320 --> 00:13:38,589
matter who knows we want people to work

00:13:35,320 --> 00:13:41,500
where it's important or do we have it

00:13:38,589 --> 00:13:44,740
anyone using Python I don't know who's

00:13:41,500 --> 00:13:46,720
using Python so should we support it so

00:13:44,740 --> 00:13:48,970
those questions we want the community to

00:13:46,720 --> 00:13:55,149
tell us and but if there's need for

00:13:48,970 --> 00:13:56,529
other tooling we want to add it so again

00:13:55,149 --> 00:13:58,839
I talked about the Cobra framework

00:13:56,529 --> 00:14:01,600
that's the basis of most of the language

00:13:58,839 --> 00:14:04,720
specific things they basically compose

00:14:01,600 --> 00:14:07,779
the actual format of the SHP rest call

00:14:04,720 --> 00:14:09,730
the actual command line that you see and

00:14:07,779 --> 00:14:12,899
with the help and the feedback and the

00:14:09,730 --> 00:14:16,149
prompting the interactive prompting that

00:14:12,899 --> 00:14:21,370
is in the base CLI component so the open

00:14:16,149 --> 00:14:22,930
wisk CLI repository we then again we're

00:14:21,370 --> 00:14:25,450
doing the separation we're authoring

00:14:22,930 --> 00:14:26,800
lots of integration tests it's been

00:14:25,450 --> 00:14:28,450
interesting because you know it was very

00:14:26,800 --> 00:14:30,579
convenient for us in our automated

00:14:28,450 --> 00:14:33,070
integration testing and open wisk where

00:14:30,579 --> 00:14:35,110
the CLI and help us lived together that

00:14:33,070 --> 00:14:37,300
we could want the CLI was installed in

00:14:35,110 --> 00:14:39,279
Travis or Jenkins or whatever but we'd

00:14:37,300 --> 00:14:40,600
be able to run lots of cool integration

00:14:39,279 --> 00:14:42,480
tests and things like that but now

00:14:40,600 --> 00:14:47,190
they're separated it complicates things

00:14:42,480 --> 00:14:49,140
in terms of cloning the repos and and

00:14:47,190 --> 00:14:54,130
installation orders and things like that

00:14:49,140 --> 00:14:56,160
so again documentation is always a need

00:14:54,130 --> 00:15:01,240
for any project also here specifically

00:14:56,160 --> 00:15:03,850
as our API is change or interrogate our

00:15:01,240 --> 00:15:05,620
help we output when you enter a command

00:15:03,850 --> 00:15:07,390
that's wrong you know maybe our health

00:15:05,620 --> 00:15:08,740
needs to be better we'd love to have

00:15:07,390 --> 00:15:11,050
better interactive prompting but the big

00:15:08,740 --> 00:15:12,579
thing for me is interactive debugger we

00:15:11,050 --> 00:15:15,310
have a debugger project that we'd love

00:15:12,579 --> 00:15:17,680
to become part of our existing command

00:15:15,310 --> 00:15:20,680
line and be able to work not just

00:15:17,680 --> 00:15:22,960
locally but maybe work remotely that's

00:15:20,680 --> 00:15:25,110
going to that would be significant step

00:15:22,960 --> 00:15:27,820
forward in something that I've seen from

00:15:25,110 --> 00:15:28,960
Microsoft Azure their cloud function

00:15:27,820 --> 00:15:30,490
project they not have integrated

00:15:28,960 --> 00:15:32,680
debugging from the client so they're

00:15:30,490 --> 00:15:34,000
back in platform so our fees things that

00:15:32,680 --> 00:15:35,890
interest to you from up from the outside

00:15:34,000 --> 00:15:38,560
end what do we need to enable on the

00:15:35,890 --> 00:15:48,870
backend to do debugging those type of

00:15:38,560 --> 00:15:51,610
things catalog I mentioned that so so so

00:15:48,870 --> 00:15:54,310
what's the value of we have a catalog

00:15:51,610 --> 00:16:00,540
repo which has basically it's a like I

00:15:54,310 --> 00:16:04,630
said a day a list that we obturated

00:16:00,540 --> 00:16:07,390
actions and basic feeds and things for

00:16:04,630 --> 00:16:11,830
some services you'll see like things

00:16:07,390 --> 00:16:15,310
like a forwarders retry we have some get

00:16:11,830 --> 00:16:18,190
stuff slack no but they're very basic so

00:16:15,310 --> 00:16:20,290
you know do these long edge in our

00:16:18,190 --> 00:16:22,930
catalog do they need more curation do

00:16:20,290 --> 00:16:24,880
they need more attention like the

00:16:22,930 --> 00:16:26,950
weather one I mean that API I said is

00:16:24,880 --> 00:16:29,230
quite large we only support a small set

00:16:26,950 --> 00:16:31,209
of the API is there so and those API is

00:16:29,230 --> 00:16:34,080
changed maybe it needs to be elevated to

00:16:31,209 --> 00:16:36,820
its own package is a top older repo

00:16:34,080 --> 00:16:38,950
which things you know should be built

00:16:36,820 --> 00:16:41,200
into the system to the whisk system are

00:16:38,950 --> 00:16:43,779
there other types of basic things you

00:16:41,200 --> 00:16:46,029
might not want to do for security checks

00:16:43,779 --> 00:16:50,350
or who knows what needs to be deployed

00:16:46,029 --> 00:16:54,910
into the system catalog if you will it's

00:16:50,350 --> 00:16:56,500
not been a lot of activity here again we

00:16:54,910 --> 00:16:58,990
have a lot of samples a lot of modern

00:16:56,500 --> 00:17:00,430
Java so a lot of these things people

00:16:58,990 --> 00:17:02,140
might want written in a different

00:17:00,430 --> 00:17:05,470
language so we'd loved it for anything

00:17:02,140 --> 00:17:08,020
the catalog we'd love to have not

00:17:05,470 --> 00:17:09,610
available in JavaScript but have

00:17:08,020 --> 00:17:11,500
examples for all these things that they

00:17:09,610 --> 00:17:14,110
choose use Python or whatever language

00:17:11,500 --> 00:17:15,100
we'd like to have it won an equivalent

00:17:14,110 --> 00:17:16,240
for each of the language we have a

00:17:15,100 --> 00:17:19,540
subdirectory structure that supports

00:17:16,240 --> 00:17:22,059
that and of course documentation for

00:17:19,540 --> 00:17:25,319
each of the individual individual

00:17:22,059 --> 00:17:25,319
actions and packages

00:17:25,509 --> 00:17:30,440
I'd love to have this use with deploy so

00:17:28,549 --> 00:17:33,470
again we have a new packaging spec and

00:17:30,440 --> 00:17:35,659
and that takes a manifest all these

00:17:33,470 --> 00:17:39,139
could be enabled to use single click

00:17:35,659 --> 00:17:40,639
deployment and conditional deployment so

00:17:39,139 --> 00:17:42,860
maybe there's some interact when people

00:17:40,639 --> 00:17:45,080
go to install the catalog you're perhaps

00:17:42,860 --> 00:17:46,490
have a way to say which packages you

00:17:45,080 --> 00:17:47,750
want to in which pictures you don't want

00:17:46,490 --> 00:17:50,389
for target installation make it

00:17:47,750 --> 00:17:55,519
interactive so those are some some ideas

00:17:50,389 --> 00:17:59,179
even for this repository API gateway

00:17:55,519 --> 00:18:01,610
what's inside basically we Sapa Gateway

00:17:59,179 --> 00:18:03,200
guys what it is basically a giant build

00:18:01,610 --> 00:18:05,210
thing that's kinda like a view open wisk

00:18:03,200 --> 00:18:09,559
it's how you build all these modules

00:18:05,210 --> 00:18:12,889
that comprise a framework for foreign

00:18:09,559 --> 00:18:15,799
api gateway set of services leverages

00:18:12,889 --> 00:18:21,289
existing 15 technologies in terms of

00:18:15,799 --> 00:18:25,519
recent activity a lot to support CORS

00:18:21,289 --> 00:18:27,139
support cross origin stuff profiling

00:18:25,519 --> 00:18:30,950
tools and performance measurements were

00:18:27,139 --> 00:18:32,779
added recently Help Wanted the focus is

00:18:30,950 --> 00:18:34,580
performance so the tooling was just

00:18:32,779 --> 00:18:36,799
added but we need really focus and

00:18:34,580 --> 00:18:37,639
tooling and instrumentation to help

00:18:36,799 --> 00:18:40,759
figure out where we can improve

00:18:37,639 --> 00:18:45,470
performance we want more Olaf providers

00:18:40,759 --> 00:18:47,590
supported and and we relaxed some of the

00:18:45,470 --> 00:18:51,799
web of deployments like ku-band mesas

00:18:47,590 --> 00:18:54,710
they don't include API gateway currently

00:18:51,799 --> 00:18:56,899
so we need support for adding the docker

00:18:54,710 --> 00:18:58,730
ization containerization of these of api

00:18:56,899 --> 00:19:01,059
gateway service as part of those

00:18:58,730 --> 00:19:03,950
deployment scripts those ansible scripts

00:19:01,059 --> 00:19:06,799
and I forgot configurable caching for

00:19:03,950 --> 00:19:09,019
web action so adding some caching

00:19:06,799 --> 00:19:12,370
support intelligent caching support at

00:19:09,019 --> 00:19:12,370
the edge so

00:19:13,890 --> 00:19:17,580
with deploy I love to spend a lot of

00:19:15,930 --> 00:19:21,150
time this because what I have a small

00:19:17,580 --> 00:19:23,850
team working on so it's so basically we

00:19:21,150 --> 00:19:26,550
want people to be able to incorporate

00:19:23,850 --> 00:19:29,730
service computing and this programming

00:19:26,550 --> 00:19:31,560
model into larger level applications so

00:19:29,730 --> 00:19:34,020
if you if you went to other sessions

00:19:31,560 --> 00:19:36,360
there's no terraform if you work in

00:19:34,020 --> 00:19:38,040
Amazon there's cloud formation we'd love

00:19:36,360 --> 00:19:39,780
to have when we have a manifest that

00:19:38,040 --> 00:19:42,360
describes open wisk

00:19:39,780 --> 00:19:44,370
entities as resources and our

00:19:42,360 --> 00:19:46,710
compositions how we create sequences and

00:19:44,370 --> 00:19:47,880
how we how we take outputs of one action

00:19:46,710 --> 00:19:49,380
put them into another action we can

00:19:47,880 --> 00:19:51,630
describe and all the properties of

00:19:49,380 --> 00:19:55,080
configurations can be described in a

00:19:51,630 --> 00:19:57,330
yellow format which I'll I can show you

00:19:55,080 --> 00:19:59,880
a little snippet of to get an idea but

00:19:57,330 --> 00:20:02,160
this is how we automate so the command

00:19:59,880 --> 00:20:03,990
line is not great again ask for a UI

00:20:02,160 --> 00:20:05,970
that'd be great but you know for

00:20:03,990 --> 00:20:08,850
automation for large-scale deployments

00:20:05,970 --> 00:20:10,710
to different target platforms a gamma

00:20:08,850 --> 00:20:12,660
based manifest is desirable because you

00:20:10,710 --> 00:20:14,820
can plug these things into a terraform

00:20:12,660 --> 00:20:17,400
you can plug them into something like a

00:20:14,820 --> 00:20:21,180
cloud formation so it's essential and

00:20:17,400 --> 00:20:23,100
also automatic so we want to I'll touch

00:20:21,180 --> 00:20:26,760
upon this maybe a little bit but I'd

00:20:23,100 --> 00:20:28,740
love to be able to work on a registry

00:20:26,760 --> 00:20:31,260
where we actually have people just have

00:20:28,740 --> 00:20:33,510
repos of whisk enable packages and we

00:20:31,260 --> 00:20:35,700
could just point to that repo find the

00:20:33,510 --> 00:20:40,230
manifest and be able to have some people

00:20:35,700 --> 00:20:42,330
just we can zip up the that that package

00:20:40,230 --> 00:20:44,700
there to determine the dependencies that

00:20:42,330 --> 00:20:46,460
package has for whatever language target

00:20:44,700 --> 00:20:48,750
languages what JavaScript JavaScript

00:20:46,460 --> 00:20:50,640
packages are need a Python packages are

00:20:48,750 --> 00:20:53,010
needed zip them all up

00:20:50,640 --> 00:20:55,710
send them in one fell swoop to that

00:20:53,010 --> 00:21:00,780
hasn't deployed to an open whisk

00:20:55,710 --> 00:21:04,470
platform server help-wanted tool chains

00:21:00,780 --> 00:21:05,670
so as as we zip these things up we want

00:21:04,470 --> 00:21:07,710
to figure out what other things we need

00:21:05,670 --> 00:21:09,150
to do for different language constructs

00:21:07,710 --> 00:21:11,220
we have we want to have a generic tool

00:21:09,150 --> 00:21:13,920
chain that we invoke so if we know for

00:21:11,220 --> 00:21:15,900
working it in JavaScript we run npm

00:21:13,920 --> 00:21:19,350
install and we have to we have

00:21:15,900 --> 00:21:20,580
consideration for binary support so we

00:21:19,350 --> 00:21:22,080
need to run these things perhaps and

00:21:20,580 --> 00:21:24,540
docker containers on the target for the

00:21:22,080 --> 00:21:25,800
target binary what tools you need to do

00:21:24,540 --> 00:21:28,590
to be able to

00:21:25,800 --> 00:21:30,390
in all the dependencies compile them if

00:21:28,590 --> 00:21:32,190
necessary and for the correct

00:21:30,390 --> 00:21:33,590
environment pull the correct packages

00:21:32,190 --> 00:21:35,940
for the correct target environment and

00:21:33,590 --> 00:21:40,230
create a zip file without the user

00:21:35,940 --> 00:21:41,940
having to to do anything so that's I'm

00:21:40,230 --> 00:21:44,610
asking personally for that help my team

00:21:41,940 --> 00:21:46,950
is working on that integration with the

00:21:44,610 --> 00:21:50,250
with CLI that's a goal for us in the

00:21:46,950 --> 00:21:52,800
next month or so we'd love help in that

00:21:50,250 --> 00:21:54,780
area again in determining how we make

00:21:52,800 --> 00:21:57,270
the CLI more pluggable and how we

00:21:54,780 --> 00:21:59,670
integrate things like with deploy into

00:21:57,270 --> 00:22:01,580
it and perhaps we how we make the CLI

00:21:59,670 --> 00:22:04,230
and was to play available to things like

00:22:01,580 --> 00:22:06,840
terraform or other orchestration tools

00:22:04,230 --> 00:22:12,480
even like the aria Tosca project which

00:22:06,840 --> 00:22:14,270
got incubated last September so are we

00:22:12,480 --> 00:22:18,960
doing on time

00:22:14,270 --> 00:22:21,690
not bad so what's deploy again we have a

00:22:18,960 --> 00:22:24,480
specification so we'd love to

00:22:21,690 --> 00:22:26,420
collaborate on the specification as well

00:22:24,480 --> 00:22:28,740
I think that there's a lot of

00:22:26,420 --> 00:22:29,970
standardization around cereals some

00:22:28,740 --> 00:22:32,070
discussions happening I know it's a

00:22:29,970 --> 00:22:33,630
cloud native computing foundation with

00:22:32,070 --> 00:22:37,590
Google there's other than other server

00:22:33,630 --> 00:22:39,720
lists proposals for projects there I

00:22:37,590 --> 00:22:41,610
think that the standardization can

00:22:39,720 --> 00:22:44,250
happen at many levels you know open West

00:22:41,610 --> 00:22:46,590
has a programming model around actions

00:22:44,250 --> 00:22:48,720
triggers and rules I think that's a very

00:22:46,590 --> 00:22:50,100
robust model I think that a starting

00:22:48,720 --> 00:22:51,750
point would be creating a working

00:22:50,100 --> 00:22:53,430
expectation on triggers and events I

00:22:51,750 --> 00:22:56,010
think if I talk to people like Stax

00:22:53,430 --> 00:22:58,620
storm and and other people who have

00:22:56,010 --> 00:23:01,740
similar service concepts Adobe our

00:22:58,620 --> 00:23:03,300
partners in Apache we'd love to be able

00:23:01,740 --> 00:23:05,460
to standardize on what an event

00:23:03,300 --> 00:23:06,630
description is and a triggered trigger

00:23:05,460 --> 00:23:09,120
description is and how we formulate

00:23:06,630 --> 00:23:11,370
rules from those two things if we can

00:23:09,120 --> 00:23:14,100
define at the edge when events what how

00:23:11,370 --> 00:23:16,440
we can consume events and a packaging a

00:23:14,100 --> 00:23:19,470
basic packaging format around that we

00:23:16,440 --> 00:23:21,500
could actually have this packaging

00:23:19,470 --> 00:23:22,890
format or standard be used

00:23:21,500 --> 00:23:25,710
cross-platform

00:23:22,890 --> 00:23:28,590
even for those who don't use open risk

00:23:25,710 --> 00:23:33,060
as their source code target their

00:23:28,590 --> 00:23:35,580
running source code target yes I try to

00:23:33,060 --> 00:23:38,490
put a little sample manifest here so

00:23:35,580 --> 00:23:39,450
hello world so basically if you it's

00:23:38,490 --> 00:23:41,639
also about versioning

00:23:39,450 --> 00:23:43,049
well so if we the tooling is for

00:23:41,639 --> 00:23:46,049
unemployment so we want to be able to do

00:23:43,049 --> 00:23:48,750
update and under ploy overtime so we

00:23:46,049 --> 00:23:50,309
actually traverse all your actions and

00:23:48,750 --> 00:23:52,289
all your packages and we create a graph

00:23:50,309 --> 00:23:53,039
that's underway right now the codes on

00:23:52,289 --> 00:23:54,929
our way right now

00:23:53,039 --> 00:23:57,600
and when you want to underplay you can

00:23:54,929 --> 00:24:00,510
actually traverse the graph and a nun

00:23:57,600 --> 00:24:02,370
deploy or your event based application a

00:24:00,510 --> 00:24:05,190
lot of people ask about complexities

00:24:02,370 --> 00:24:07,320
applications the complexity is removed

00:24:05,190 --> 00:24:09,299
through descriptions like in this

00:24:07,320 --> 00:24:12,960
package manifest and can be visualized

00:24:09,299 --> 00:24:15,960
in the UI somehow and again how do we

00:24:12,960 --> 00:24:17,580
compose this is the only way now to

00:24:15,960 --> 00:24:19,440
describe your inputs and outputs so if

00:24:17,580 --> 00:24:21,809
you want to compose an output of one

00:24:19,440 --> 00:24:24,210
action to another action this is how you

00:24:21,809 --> 00:24:26,399
make sure we do validation so the tool

00:24:24,210 --> 00:24:27,630
be able to tell you this action can be

00:24:26,399 --> 00:24:29,940
composed of direction because the

00:24:27,630 --> 00:24:32,880
outputs and inputs match each other the

00:24:29,940 --> 00:24:34,590
data types of things so I think this is

00:24:32,880 --> 00:24:36,899
an exciting direction for how we build

00:24:34,590 --> 00:24:40,110
out an application ecosystem and get

00:24:36,899 --> 00:24:42,389
some be able to manage more complex

00:24:40,110 --> 00:24:52,070
systems based upon this event-driven

00:24:42,389 --> 00:24:57,360
model a debugger help help with debugger

00:24:52,070 --> 00:25:00,000
was a great was I said was it is a great

00:24:57,360 --> 00:25:03,059
tool but at some point in the recent

00:25:00,000 --> 00:25:04,529
past it stopped working and I haven't

00:25:03,059 --> 00:25:05,840
had time to look at it I don't know when

00:25:04,529 --> 00:25:08,159
our teammates had time to look at it

00:25:05,840 --> 00:25:09,659
debugging is your thing this is all

00:25:08,159 --> 00:25:12,330
about local debugging so this is about

00:25:09,659 --> 00:25:14,309
taking your action debugging it locally

00:25:12,330 --> 00:25:15,779
before you deploy to a server and

00:25:14,309 --> 00:25:18,179
there's probably something very small

00:25:15,779 --> 00:25:21,840
that needs to be fixed but documentation

00:25:18,179 --> 00:25:24,120
there is no documentation so we have

00:25:21,840 --> 00:25:26,429
some very smart people who created a few

00:25:24,120 --> 00:25:27,480
smart people crazy bugger they they're

00:25:26,429 --> 00:25:29,220
off doing other things and other

00:25:27,480 --> 00:25:30,389
projects and we'd love to have so I

00:25:29,220 --> 00:25:32,789
picked this up and again like I said

00:25:30,389 --> 00:25:36,059
integrate this into our command line so

00:25:32,789 --> 00:25:38,220
if you know nodejs and you can and you

00:25:36,059 --> 00:25:40,649
can go through the code and help us fix

00:25:38,220 --> 00:25:42,120
that we'd love that help fixing that I

00:25:40,649 --> 00:25:44,419
think there's some small thing that's

00:25:42,120 --> 00:25:44,419
missing

00:25:46,080 --> 00:25:50,879
what's inside Deadpool's

00:25:48,629 --> 00:25:52,229
so dev tools is another person on my

00:25:50,879 --> 00:25:55,499
teams from working on dev tools

00:25:52,229 --> 00:25:58,200
basically this is kind of like the if

00:25:55,499 --> 00:26:00,570
you have an idea for a deployment or

00:25:58,200 --> 00:26:03,239
some tool some integration to some IDE

00:26:00,570 --> 00:26:04,440
or some other clients or something this

00:26:03,239 --> 00:26:05,820
is where we get you started evil say

00:26:04,440 --> 00:26:08,909
well create a subdirectory under this

00:26:05,820 --> 00:26:11,399
repository and you can go currently it

00:26:08,909 --> 00:26:14,399
primarily houses the doctor compose and

00:26:11,399 --> 00:26:16,590
kubernetes work we've been doing I said

00:26:14,399 --> 00:26:18,330
I created a new - new Reapers yes - repo

00:26:16,590 --> 00:26:20,820
yesterday what are most for kubernetes

00:26:18,330 --> 00:26:22,889
so we've gotten to a point where our

00:26:20,820 --> 00:26:24,450
kubernetes work under dev tools has

00:26:22,889 --> 00:26:27,119
reached a point where we believe we want

00:26:24,450 --> 00:26:28,919
to promote a top-level repository so the

00:26:27,119 --> 00:26:30,749
community stuff is going to go to the

00:26:28,919 --> 00:26:32,940
top of repositories so the people who

00:26:30,749 --> 00:26:35,190
want to find kubernetes they see a

00:26:32,940 --> 00:26:36,330
repository named kubernetes and know

00:26:35,190 --> 00:26:38,820
that's where the works being done we

00:26:36,330 --> 00:26:41,729
create dedicated documentation for for

00:26:38,820 --> 00:26:41,999
that effort docker compose needs some

00:26:41,729 --> 00:26:45,840
help

00:26:41,999 --> 00:26:47,970
dougies been kind of leading the charge

00:26:45,840 --> 00:26:49,919
on that on that work but I know that we

00:26:47,970 --> 00:26:52,739
that the developers there would love

00:26:49,919 --> 00:26:54,779
some help as well better documentation

00:26:52,739 --> 00:26:57,090
and we'd love to promote that as well as

00:26:54,779 --> 00:26:59,419
kubernetes - a top-level repo in the

00:26:57,090 --> 00:26:59,419
future

00:27:01,129 --> 00:27:08,070
playground xcode so basically these are

00:27:06,450 --> 00:27:13,289
again tooling integrations with with

00:27:08,070 --> 00:27:14,609
different developer client tools xcode

00:27:13,289 --> 00:27:16,320
source editor extension so it's

00:27:14,609 --> 00:27:17,580
extension so you actually can code and

00:27:16,320 --> 00:27:21,509
have interaction with the command line

00:27:17,580 --> 00:27:25,499
and a familiarity with the format's and

00:27:21,509 --> 00:27:28,559
syntax in your favorite IDE client-side

00:27:25,499 --> 00:27:29,580
tool development tooling it's still

00:27:28,559 --> 00:27:31,919
experimental

00:27:29,580 --> 00:27:34,229
I mean we had some very good good people

00:27:31,919 --> 00:27:36,869
who to develop the code got it working

00:27:34,229 --> 00:27:38,970
but as far as keeping it going version

00:27:36,869 --> 00:27:41,190
updated with what's current in open

00:27:38,970 --> 00:27:44,549
which as we add new things open wisk new

00:27:41,190 --> 00:27:46,289
parameters new api's new things we need

00:27:44,549 --> 00:27:48,179
somebody to keep these things maintained

00:27:46,289 --> 00:27:49,739
if these if these targets the vs for

00:27:48,179 --> 00:27:53,519
both the s code next code if you have

00:27:49,739 --> 00:27:55,019
target developer tooling that you want

00:27:53,519 --> 00:27:56,999
that you feel strongly about supporting

00:27:55,019 --> 00:27:58,260
we'd love to have your help making sure

00:27:56,999 --> 00:28:02,490
this stuff is kept

00:27:58,260 --> 00:28:05,280
in general at general advocacy for this

00:28:02,490 --> 00:28:08,580
tooling stuff vs code I kind of touched

00:28:05,280 --> 00:28:11,880
upon that already same same thinking but

00:28:08,580 --> 00:28:13,380
for visual studio update Doc's we need

00:28:11,880 --> 00:28:14,960
to again developer owner for this to

00:28:13,380 --> 00:28:17,400
keep it going if we have code your thing

00:28:14,960 --> 00:28:19,470
and integration testing I you know I

00:28:17,400 --> 00:28:20,700
guess that tells true for both Xcode and

00:28:19,470 --> 00:28:22,500
all the things all these toolings

00:28:20,700 --> 00:28:25,050
we don't have really have integration

00:28:22,500 --> 00:28:26,970
testing before so when things don't work

00:28:25,050 --> 00:28:28,950
or things fall out scope or we select

00:28:26,970 --> 00:28:30,300
support for something we'd love to have

00:28:28,950 --> 00:28:32,700
integration test tell us that we'd love

00:28:30,300 --> 00:28:34,680
to have Travis or Jenkins tell us this

00:28:32,700 --> 00:28:36,600
not working anymore with open this

00:28:34,680 --> 00:28:38,070
change and open with so these are things

00:28:36,600 --> 00:28:40,250
we'd love to add that if you're familiar

00:28:38,070 --> 00:28:42,720
with you know testing and automation

00:28:40,250 --> 00:28:44,520
that you could help us with greatly to

00:28:42,720 --> 00:28:46,110
let us know hey guys this needs some

00:28:44,520 --> 00:28:50,780
attention it's not it's not the kept

00:28:46,110 --> 00:28:50,780
current it no longer works so help there

00:28:51,170 --> 00:28:57,650
so packages so when packages reach a

00:28:55,800 --> 00:29:00,270
status where where they get a lot of

00:28:57,650 --> 00:29:04,350
discussion on the dev list or in slack

00:29:00,270 --> 00:29:05,940
and then there's they have different

00:29:04,350 --> 00:29:07,830
people using it for different purposes

00:29:05,940 --> 00:29:10,440
we want it elevated to a top level

00:29:07,830 --> 00:29:12,510
package again every package I I talked

00:29:10,440 --> 00:29:14,190
about we don't have we don't have a

00:29:12,510 --> 00:29:16,650
manifest torso we have the list deploy

00:29:14,190 --> 00:29:18,930
tool and we'd love to add manifests for

00:29:16,650 --> 00:29:20,250
all these things that described all the

00:29:18,930 --> 00:29:21,930
things that get installed as part of the

00:29:20,250 --> 00:29:23,790
package right now they all have bash

00:29:21,930 --> 00:29:26,640
scripts to install which call the

00:29:23,790 --> 00:29:27,930
command line HP rust calls directly we'd

00:29:26,640 --> 00:29:31,430
love to have it just deployed through

00:29:27,930 --> 00:29:34,380
one-click and out of the repo directly

00:29:31,430 --> 00:29:36,990
so cron jobs all the scheduling stuff

00:29:34,380 --> 00:29:39,060
fast jobs that's where you have alarms

00:29:36,990 --> 00:29:41,190
we've been talking about you know making

00:29:39,060 --> 00:29:44,580
this part of the default install with

00:29:41,190 --> 00:29:48,510
the CAD log so again I my hope is the

00:29:44,580 --> 00:29:49,980
catalog becomes just a more of a what

00:29:48,510 --> 00:29:52,500
I'm working towards a distributed

00:29:49,980 --> 00:29:54,300
registry so the catalog would project it

00:29:52,500 --> 00:29:56,730
might become more of a a registry

00:29:54,300 --> 00:29:59,370
project much like in the sense of NPM

00:29:56,730 --> 00:30:01,650
where we actually have people submit

00:29:59,370 --> 00:30:04,200
packages and the packages can actually

00:30:01,650 --> 00:30:05,640
live elsewhere and we actually maybe and

00:30:04,200 --> 00:30:07,230
we take that we actually run integration

00:30:05,640 --> 00:30:09,930
tests on that they submit it to our

00:30:07,230 --> 00:30:12,150
registry and they have a whisk deployed

00:30:09,930 --> 00:30:14,490
manifest and we can actually

00:30:12,150 --> 00:30:18,540
on some integration tests against the

00:30:14,490 --> 00:30:19,800
package automate those and and version

00:30:18,540 --> 00:30:21,990
them and making sure that they work with

00:30:19,800 --> 00:30:25,050
the current version of of open with I'd

00:30:21,990 --> 00:30:27,150
love to have registries of packages

00:30:25,050 --> 00:30:28,740
provided by other companies for

00:30:27,150 --> 00:30:31,170
different target applications or

00:30:28,740 --> 00:30:35,040
environments I see this as a key growth

00:30:31,170 --> 00:30:38,220
area in general so so instead of having

00:30:35,040 --> 00:30:40,080
to worry about promoting packages or

00:30:38,220 --> 00:30:42,060
demanding packages of the catalog we

00:30:40,080 --> 00:30:43,320
have a registry and distributed registry

00:30:42,060 --> 00:30:45,930
we don't worry about that anymore at all

00:30:43,320 --> 00:30:48,090
and it's all and through testing and

00:30:45,930 --> 00:30:50,250
tooling we know which packages are well

00:30:48,090 --> 00:30:57,120
tested and version and work with which

00:30:50,250 --> 00:30:59,970
which open with platform releases Kafka

00:30:57,120 --> 00:31:03,000
again Carlos touched upon that I think

00:30:59,970 --> 00:31:05,040
that of all the things I would ask for

00:31:03,000 --> 00:31:09,990
from from people at this conference I

00:31:05,040 --> 00:31:11,460
heard MQTT I want multi want - I want

00:31:09,990 --> 00:31:14,160
support from people from multiple we

00:31:11,460 --> 00:31:16,920
called multipliers I want for people who

00:31:14,160 --> 00:31:18,990
have data sources data stores databases

00:31:16,920 --> 00:31:21,210
different types of databases we need

00:31:18,990 --> 00:31:22,230
packages dedicated packages that

00:31:21,210 --> 00:31:24,870
integrate with more and more data

00:31:22,230 --> 00:31:26,490
sources and queues that's the future

00:31:24,870 --> 00:31:27,720
even data sources I talk to you in

00:31:26,490 --> 00:31:29,220
service environments platform

00:31:27,720 --> 00:31:30,510
environments they're being offered in

00:31:29,220 --> 00:31:32,130
cloud what they're doing is they're

00:31:30,510 --> 00:31:35,190
dumping all their events in some cue or

00:31:32,130 --> 00:31:36,510
another and it's up to you and they're

00:31:35,190 --> 00:31:37,980
basically saying you subscribe to the

00:31:36,510 --> 00:31:39,990
events we're dumping every single event

00:31:37,980 --> 00:31:42,420
into the queue on every database change

00:31:39,990 --> 00:31:45,300
every document change every field change

00:31:42,420 --> 00:31:47,480
every index change you figure it out so

00:31:45,300 --> 00:31:50,130
I'd love to have even more intelligent

00:31:47,480 --> 00:31:52,200
packages that maybe build on top of

00:31:50,130 --> 00:31:55,620
queueing packages that can filter out

00:31:52,200 --> 00:31:57,630
events and be able to when I compose my

00:31:55,620 --> 00:32:00,380
applications I'm getting millions

00:31:57,630 --> 00:32:03,150
literally millions of events per second

00:32:00,380 --> 00:32:04,950
how do I filter this out just the events

00:32:03,150 --> 00:32:07,230
I need for my database for the my

00:32:04,950 --> 00:32:09,470
specific action those are things that

00:32:07,230 --> 00:32:12,150
would love to have generic packages for

00:32:09,470 --> 00:32:13,740
before we fire and so we can find the

00:32:12,150 --> 00:32:15,660
correct action make sure they get just

00:32:13,740 --> 00:32:18,870
the data they need and we don't waste a

00:32:15,660 --> 00:32:22,580
lot of of time sitting axe events to

00:32:18,870 --> 00:32:22,580
actions that they they can't use

00:32:23,740 --> 00:32:32,870
push notification this is this is cool

00:32:28,400 --> 00:32:33,799
you know this is another example of of a

00:32:32,870 --> 00:32:35,929
common multiplier

00:32:33,799 --> 00:32:37,790
everyone wants but you know chatbots are

00:32:35,929 --> 00:32:40,640
popular of course slack we have support

00:32:37,790 --> 00:32:43,280
for that and the cab in the catalog

00:32:40,640 --> 00:32:44,360
repository but here's your the package

00:32:43,280 --> 00:32:45,770
for push notification of course of

00:32:44,360 --> 00:32:48,110
supports always started platforms of

00:32:45,770 --> 00:32:49,549
again we need integration test how do we

00:32:48,110 --> 00:32:51,500
enter creation test these things without

00:32:49,549 --> 00:32:53,510
the devices can we do have simulators we

00:32:51,500 --> 00:32:57,049
can use I don't know we need integration

00:32:53,510 --> 00:33:01,309
test are there other target for push if

00:32:57,049 --> 00:33:03,350
you know if Google or Apple change their

00:33:01,309 --> 00:33:05,390
their toolkits how do we test for that

00:33:03,350 --> 00:33:07,900
how do we make sure we're current those

00:33:05,390 --> 00:33:07,900
types of things

00:33:09,710 --> 00:33:16,220
JIRA you know gay JIRA I'd love to have

00:33:14,299 --> 00:33:18,490
some more work you know documentation is

00:33:16,220 --> 00:33:20,630
lacking integration testing is always

00:33:18,490 --> 00:33:22,490
developer owner but I'd love to create

00:33:20,630 --> 00:33:24,470
some samples around this with with

00:33:22,490 --> 00:33:26,780
deploy we can actually create some cool

00:33:24,470 --> 00:33:28,130
integrations and you know we talked

00:33:26,780 --> 00:33:30,620
about Carlson will be talking about how

00:33:28,130 --> 00:33:32,900
do we get the dev list working with

00:33:30,620 --> 00:33:35,450
slack or slack Channel well what about

00:33:32,900 --> 00:33:37,730
JIRA if you have you know for Apache can

00:33:35,450 --> 00:33:39,470
we create a simple event-driven thing

00:33:37,730 --> 00:33:42,860
where if Jared comes in we notify people

00:33:39,470 --> 00:33:45,530
on slack or start you know notify a

00:33:42,860 --> 00:33:46,880
specific person who owns a given based

00:33:45,530 --> 00:33:47,990
upon the the ticket that comes in the

00:33:46,880 --> 00:33:49,520
information the ticket we route it to

00:33:47,990 --> 00:33:52,820
some place and send it to their favorite

00:33:49,520 --> 00:33:54,710
a notification system creating some

00:33:52,820 --> 00:33:56,179
samples some reusable samples that are

00:33:54,710 --> 00:34:04,580
configurable would be really cool in

00:33:56,179 --> 00:34:08,149
this area RSS we had a guy who started

00:34:04,580 --> 00:34:09,980
playing and it was an intern in IBM last

00:34:08,149 --> 00:34:12,080
year he's like he wasn't even any of our

00:34:09,980 --> 00:34:13,669
groups he's like hey I thought I found

00:34:12,080 --> 00:34:16,220
open when I was really cool I crazy RSS

00:34:13,669 --> 00:34:18,770
package so we accepted it and it does

00:34:16,220 --> 00:34:20,119
have some integration tests and we'd

00:34:18,770 --> 00:34:23,020
love if people wanted to expand this

00:34:20,119 --> 00:34:26,000
it's not it's not very configurable so

00:34:23,020 --> 00:34:28,220
about to have some better configuration

00:34:26,000 --> 00:34:29,990
options for filtering out different

00:34:28,220 --> 00:34:33,110
different feeds and based upon the

00:34:29,990 --> 00:34:40,500
values in the feed data

00:34:33,110 --> 00:34:42,840
yep Cloudant this is you know if you

00:34:40,500 --> 00:34:46,919
don't what cloud it is it's Spacely the

00:34:42,840 --> 00:34:49,440
commercial version of CouchDB I'd love

00:34:46,919 --> 00:34:51,510
to have a generic couchdb package again

00:34:49,440 --> 00:34:53,700
this toxin multipliers wherever there's

00:34:51,510 --> 00:34:55,860
a data store I'd love to have a package

00:34:53,700 --> 00:34:58,140
and it's very simple you have examples

00:34:55,860 --> 00:35:01,170
already and all we need something that

00:34:58,140 --> 00:35:04,230
knows how to listen for events either

00:35:01,170 --> 00:35:05,960
it's either a cue integration for the

00:35:04,230 --> 00:35:08,190
events coming off of specific database

00:35:05,960 --> 00:35:10,740
that leverages cost gar what are we have

00:35:08,190 --> 00:35:13,350
already and is able to create a feed

00:35:10,740 --> 00:35:15,780
that hat is able to configure the data

00:35:13,350 --> 00:35:20,060
coming in from that event source create

00:35:15,780 --> 00:35:20,060
hooks for us basically hooks don't exist

00:35:22,070 --> 00:35:29,430
general wish wish list if I haven't

00:35:25,740 --> 00:35:32,550
covered them already more packages we

00:35:29,430 --> 00:35:34,620
had a Twilio package somebody started to

00:35:32,550 --> 00:35:36,390
work on it never and for some reason

00:35:34,620 --> 00:35:40,260
abandoned it so we basically deleted the

00:35:36,390 --> 00:35:43,020
repo I'd love to have more packages so

00:35:40,260 --> 00:35:44,280
we can create repos no problem

00:35:43,020 --> 00:35:45,570
we'll create a repo for you work on it

00:35:44,280 --> 00:35:47,730
you know we might start your dev tools

00:35:45,570 --> 00:35:50,160
someplace else but you know start it in

00:35:47,730 --> 00:35:51,270
your own github repo maybe we can you

00:35:50,160 --> 00:35:53,730
can help us work with the registry and

00:35:51,270 --> 00:35:55,020
so can remotely bring it in those type

00:35:53,730 --> 00:35:56,850
of things

00:35:55,020 --> 00:35:59,040
the registry I talked about you know

00:35:56,850 --> 00:36:00,660
that's just an idea it's getting started

00:35:59,040 --> 00:36:02,400
I hope to start working on it you know

00:36:00,660 --> 00:36:04,790
sometime next month when we finish our

00:36:02,400 --> 00:36:07,500
current work in the Wyss deploy tool

00:36:04,790 --> 00:36:10,980
which is which is the foundation for the

00:36:07,500 --> 00:36:12,780
registry now if you have experience with

00:36:10,980 --> 00:36:15,090
with the NPM registry glad to have you

00:36:12,780 --> 00:36:16,500
work with us you know they use CouchDB

00:36:15,090 --> 00:36:18,060
as a backing you know how do we create a

00:36:16,500 --> 00:36:20,250
distributed registry what's the correct

00:36:18,060 --> 00:36:24,480
API set do we use we just reuse

00:36:20,250 --> 00:36:27,210
something do we take the NPM HTTP

00:36:24,480 --> 00:36:28,890
standard for the registry and adapt it

00:36:27,210 --> 00:36:32,130
for our use what's the correct what's

00:36:28,890 --> 00:36:33,480
the correct approach more composition so

00:36:32,130 --> 00:36:35,160
I know that we have people have been

00:36:33,480 --> 00:36:37,440
talking on our mailing list about how do

00:36:35,160 --> 00:36:39,390
we do things other than sequences you

00:36:37,440 --> 00:36:41,970
know how do we do different types of

00:36:39,390 --> 00:36:43,560
programming constructs if-then-else

00:36:41,970 --> 00:36:46,119
blocks to write this act and run this

00:36:43,560 --> 00:36:47,859
action how do we automate perhaps in

00:36:46,119 --> 00:36:49,839
sort of embedding some of the testing of

00:36:47,859 --> 00:36:51,999
the data inside the actions

00:36:49,839 --> 00:36:54,309
move it external now maybe we have a

00:36:51,999 --> 00:36:56,680
maybe we can create an action that does

00:36:54,309 --> 00:36:57,400
the test for you a generic test action

00:36:56,680 --> 00:36:59,829
or something

00:36:57,400 --> 00:37:01,660
switch statement you know how do we how

00:36:59,829 --> 00:37:02,589
do we how do we codify these things how

00:37:01,660 --> 00:37:04,869
we make them part of our standard

00:37:02,589 --> 00:37:07,809
catalog and how do we represent them in

00:37:04,869 --> 00:37:10,599
the manifest how in a how you say create

00:37:07,809 --> 00:37:13,259
a basically a pseudo connector in our

00:37:10,599 --> 00:37:16,029
and our manifest format to to going to

00:37:13,259 --> 00:37:19,599
conditionally execute actions based upon

00:37:16,029 --> 00:37:20,980
some input values web action you know

00:37:19,599 --> 00:37:22,960
I'd love to have more examples of web

00:37:20,980 --> 00:37:25,269
actions we have we have no out of box

00:37:22,960 --> 00:37:28,210
samples we have F web actions are so

00:37:25,269 --> 00:37:29,710
cool how do we support more mime types

00:37:28,210 --> 00:37:34,690
how we support you know different you

00:37:29,710 --> 00:37:36,670
know different headers maybe there's

00:37:34,690 --> 00:37:38,470
some variants London web actions for

00:37:36,670 --> 00:37:41,499
different protocols and I just think

00:37:38,470 --> 00:37:44,230
about that now node-red was mentioned

00:37:41,499 --> 00:37:46,029
there's no dread work but I know people

00:37:44,230 --> 00:37:48,039
approached me about no dread but we've

00:37:46,029 --> 00:37:49,990
had no conversations on the Douglas if

00:37:48,039 --> 00:37:50,680
you use no dread there's a natural fit

00:37:49,990 --> 00:37:53,980
with serverless

00:37:50,680 --> 00:37:56,470
and open with the idea that it's flooded

00:37:53,980 --> 00:37:58,299
to me and I need to know if I don't want

00:37:56,470 --> 00:37:59,440
to start the conversation and trying to

00:37:58,299 --> 00:38:01,269
get people to talk about it on the dev

00:37:59,440 --> 00:38:02,650
list is can we take you already have

00:38:01,269 --> 00:38:04,029
sequences and things and graphical

00:38:02,650 --> 00:38:05,619
conversations and no dread if you're

00:38:04,029 --> 00:38:07,660
using job no Jess

00:38:05,619 --> 00:38:10,960
we can put we can create a container

00:38:07,660 --> 00:38:14,049
that can run those entire node or node

00:38:10,960 --> 00:38:16,630
read sequence or sort of jobs inside of

00:38:14,049 --> 00:38:18,730
Open whisk and container that could be

00:38:16,630 --> 00:38:20,559
an invoker container and other way if

00:38:18,730 --> 00:38:24,670
that's if that's if you're working in

00:38:20,559 --> 00:38:26,980
node in node read work with us come work

00:38:24,670 --> 00:38:28,869
with us super node work notebooks

00:38:26,980 --> 00:38:32,880
ironically the people next to us and IBM

00:38:28,869 --> 00:38:36,369
boots are doing super notebook stuff so

00:38:32,880 --> 00:38:39,249
I'd love to have people basically if we

00:38:36,369 --> 00:38:41,799
can MapReduce a set of data and run

00:38:39,249 --> 00:38:43,869
functional stuff on that data that

00:38:41,799 --> 00:38:45,309
server list so you have to worry about

00:38:43,869 --> 00:38:48,519
considering all these servers all these

00:38:45,309 --> 00:38:50,680
things you know that you do currently

00:38:48,519 --> 00:38:52,299
with these notebooks open which does it

00:38:50,680 --> 00:38:54,460
for you all you need to do is point us

00:38:52,299 --> 00:38:56,079
to the data create an event saying this

00:38:54,460 --> 00:38:58,089
data is ready for your function to

00:38:56,079 --> 00:38:59,470
compute on and you basically you're done

00:38:58,089 --> 00:39:01,030
you notify some aggregate

00:38:59,470 --> 00:39:03,130
that the data is available after I've

00:39:01,030 --> 00:39:04,420
done applied my function to it these are

00:39:03,130 --> 00:39:09,460
some really cool things we can do with

00:39:04,420 --> 00:39:12,070
with other Apache projects so those are

00:39:09,460 --> 00:39:13,660
kind of like my stimulating ideas of

00:39:12,070 --> 00:39:15,910
things that word like I like to go there

00:39:13,660 --> 00:39:17,530
are many many more in fact Carlos I have

00:39:15,910 --> 00:39:19,540
been talking about starting some lists

00:39:17,530 --> 00:39:21,520
for these ideas starting a low-hanging

00:39:19,540 --> 00:39:23,349
fruit type of thing for people want to

00:39:21,520 --> 00:39:25,180
start with our projects you know you

00:39:23,349 --> 00:39:27,490
know point them to issues and things we

00:39:25,180 --> 00:39:29,320
have open or feature sets where to get

00:39:27,490 --> 00:39:31,750
started you know based upon their skill

00:39:29,320 --> 00:39:32,440
sets so we hope to do that in the next

00:39:31,750 --> 00:39:34,720
few weeks

00:39:32,440 --> 00:39:38,890
perhaps our C week C wiki and on our

00:39:34,720 --> 00:39:40,480
link to our org website and that's about

00:39:38,890 --> 00:39:45,130
all I had for today

00:39:40,480 --> 00:39:47,619
I mean vital statistics I grabbed that

00:39:45,130 --> 00:39:50,020
Monday I think that number of stars we

00:39:47,619 --> 00:39:54,340
grow 10 to 20 for a week we've got we

00:39:50,020 --> 00:39:59,740
have the forks have gone up so we have

00:39:54,340 --> 00:40:00,760
around 300 contribution gracias Liga

00:39:59,740 --> 00:40:02,470
table you can use all the things there

00:40:00,760 --> 00:40:05,470
to figure out house but basically any

00:40:02,470 --> 00:40:07,780
contributors you know across all the

00:40:05,470 --> 00:40:10,750
repos so we'd love to grow that I think

00:40:07,780 --> 00:40:12,900
that these ecosystem mentality we should

00:40:10,750 --> 00:40:15,700
have many many more contributors

00:40:12,900 --> 00:40:19,349
especially in the integration space with

00:40:15,700 --> 00:40:21,760
with data databases queues and packages

00:40:19,349 --> 00:40:24,780
package implementations for for other

00:40:21,760 --> 00:40:27,490
services so I'd love to see that grow

00:40:24,780 --> 00:40:29,730
that's why this whole session was given

00:40:27,490 --> 00:40:29,730
to that

00:40:32,960 --> 00:40:38,610
more information all this is from our

00:40:36,780 --> 00:40:41,640
org site so if you want to know how to

00:40:38,610 --> 00:40:43,770
contact us obviously devilish we have a

00:40:41,640 --> 00:40:45,540
public slack channel you click on the

00:40:43,770 --> 00:40:47,040
org site it will be auto invited through

00:40:45,540 --> 00:40:50,490
action it's written actually we're

00:40:47,040 --> 00:40:52,050
trying to use what we promote so we were

00:40:50,490 --> 00:40:55,140
excited about trying to figure out how

00:40:52,050 --> 00:40:56,460
we host an open Wisc platform in patch

00:40:55,140 --> 00:40:58,830
you can do the things we talked about

00:40:56,460 --> 00:41:02,280
how to to actually use service action

00:40:58,830 --> 00:41:03,930
and maximize Apache infrastructure to do

00:41:02,280 --> 00:41:05,940
connect these things together to connect

00:41:03,930 --> 00:41:07,890
our our processes and workflows and

00:41:05,940 --> 00:41:11,070
tooling together so we can better

00:41:07,890 --> 00:41:13,320
communicate and work together we try to

00:41:11,070 --> 00:41:15,780
add blog I mean if you do things in the

00:41:13,320 --> 00:41:17,340
open Wisc we'd love to know about it we

00:41:15,780 --> 00:41:21,120
can add it to our medium blog site

00:41:17,340 --> 00:41:24,210
videos we have a video category for open

00:41:21,120 --> 00:41:26,310
with Stack Overflow of course we respond

00:41:24,210 --> 00:41:30,060
to you and of course things that we have

00:41:26,310 --> 00:41:31,650
we are monitoring all these things

00:41:30,060 --> 00:41:33,630
through through slacks a lot of these

00:41:31,650 --> 00:41:35,610
channels come in we get notified in

00:41:33,630 --> 00:41:37,260
slack if you submit a poor request we

00:41:35,610 --> 00:41:39,060
get notified in slack that the floor

00:41:37,260 --> 00:41:40,500
press has been issued and that if it's

00:41:39,060 --> 00:41:42,750
if it's not been reviewed for several

00:41:40,500 --> 00:41:44,580
days we get get another alert saying

00:41:42,750 --> 00:41:47,220
this pull request is not in review so we

00:41:44,580 --> 00:41:51,420
try to use open risk in our DevOps

00:41:47,220 --> 00:41:52,770
on a day to day basis and so it every

00:41:51,420 --> 00:41:54,150
day not a day goes by where we can't

00:41:52,770 --> 00:41:56,880
think of how we could use up most we

00:41:54,150 --> 00:41:59,550
just lack the contributors to showcase

00:41:56,880 --> 00:42:07,250
these are sample applications that other

00:41:59,550 --> 00:42:07,250
people can use so any questions yes

00:42:15,320 --> 00:42:20,040
yeah I'm almost since I haven't

00:42:18,660 --> 00:42:21,390
refreshed myself on node-red for a

00:42:20,040 --> 00:42:24,120
couple months I'll probably miss using

00:42:21,390 --> 00:42:25,740
semantics but in in node-red you have

00:42:24,120 --> 00:42:28,010
graphical so I know there's a graphical

00:42:25,740 --> 00:42:30,840
interface we can create compositions of

00:42:28,010 --> 00:42:33,690
their node red nodes I guess they're

00:42:30,840 --> 00:42:35,880
nodes so so so you can actually

00:42:33,690 --> 00:42:40,770
encapsulate the entire sequence of node

00:42:35,880 --> 00:42:43,530
red nodes and their flows their data

00:42:40,770 --> 00:42:47,130
flows and package them up and run them

00:42:43,530 --> 00:42:51,270
in node red packaged as as a single

00:42:47,130 --> 00:42:54,000
invoker in under open whisk and that's

00:42:51,270 --> 00:42:56,880
actually the author that comes straight

00:42:54,000 --> 00:42:59,970
from the creator of node red with an IBM

00:42:56,880 --> 00:43:03,150
and in the UK that's our starting point

00:42:59,970 --> 00:43:05,670
that would be our starting point but the

00:43:03,150 --> 00:43:07,410
graphical UI I mean they have a

00:43:05,670 --> 00:43:10,200
graphical UI we don't I mean that's why

00:43:07,410 --> 00:43:12,630
shadows in the audience I think that you

00:43:10,200 --> 00:43:14,520
know different consumers of this

00:43:12,630 --> 00:43:16,110
technology and the ideas and the

00:43:14,520 --> 00:43:18,690
community and necklaces will only be

00:43:16,110 --> 00:43:24,690
generated once we have not just command

00:43:18,690 --> 00:43:28,340
line but a UI as well so yeah good

00:43:24,690 --> 00:43:31,730
question thanks any other questions

00:43:28,340 --> 00:43:31,730

YouTube URL: https://www.youtube.com/watch?v=4PS7LObFcDc


