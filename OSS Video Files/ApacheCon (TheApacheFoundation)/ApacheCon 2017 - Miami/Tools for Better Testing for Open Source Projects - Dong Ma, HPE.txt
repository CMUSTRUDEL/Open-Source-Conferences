Title: Tools for Better Testing for Open Source Projects - Dong Ma, HPE
Publication date: 2017-05-18
Playlist: ApacheCon 2017 - Miami
Description: 
	Tools for Better Testing for Open Source Projects - Dong Ma, HPE

Quality is most important for Open Source projects, but a lot of Open Source projects do not put much focus on testing upstream. There are real benefits to having a dedicated QA effort on an Open Source project. This talk will use OpenStack as an example to introduce the approach and tooling used by OpenStack Community for testing, and to explore how an Open Source project do QA in upstream, how open source projects can use tooling to improve their QA process and the potential benefits it can provide.

About Dong Ma
Dong Ma has worked at Hewlett Packard Enterprise as Software/System Engineer since 2007. He worked on the Open Source FOSSology(www.fossology.org) project from 2009, with a focus on the Continues Integration and Delivery system. He's been an active technical contributor to OpenStack since the Liberty release. He now works on the HPE's OpenStack team, focusing on Jenkins, OpenStackCI and QA.He has previously been a speaker at LCA2017, LinuxCon Japan, FOSSCON and the other open source related conference.
Captions: 
	00:00:00,000 --> 00:00:07,890
hello Iran and thanks for drawing my

00:00:03,120 --> 00:00:12,269
session today today I will talk about

00:00:07,890 --> 00:00:17,220
the tools for better testing for open

00:00:12,269 --> 00:00:20,820
source projects and in this talk I

00:00:17,220 --> 00:00:24,810
values OpenStack as a example to

00:00:20,820 --> 00:00:27,619
introduce the approach and tools use the

00:00:24,810 --> 00:00:33,239
for OpenStack community for testing and

00:00:27,619 --> 00:00:37,020
to explore how I open source project can

00:00:33,239 --> 00:00:41,010
do QA in upstream and how open source

00:00:37,020 --> 00:00:45,329
projects can use tools until improve

00:00:41,010 --> 00:00:56,340
their QA process and the potential

00:00:45,329 --> 00:01:03,629
benefit it can provide firstly introduce

00:00:56,340 --> 00:01:07,770
my self Dhamma currently living living

00:01:03,629 --> 00:01:10,460
in Beijing China I'm working for the

00:01:07,770 --> 00:01:14,490
petrol enterprise as software engineer

00:01:10,460 --> 00:01:16,020
many focus on the free and open source

00:01:14,490 --> 00:01:23,250
software development

00:01:16,020 --> 00:01:29,450
I have been active technical contributor

00:01:23,250 --> 00:01:34,530
to OpenStack project since the OpenStack

00:01:29,450 --> 00:01:37,770
liability release circle I'm also the

00:01:34,530 --> 00:01:41,729
code reviewer of the OpenStack sub you

00:01:37,770 --> 00:01:45,320
needed to so-called project currently

00:01:41,729 --> 00:01:49,460
I'm working for Cole Bergeron Perez

00:01:45,320 --> 00:01:53,909
office tag team many focus on the

00:01:49,460 --> 00:02:00,229
drinking's OpenStack CI and secure it

00:01:53,909 --> 00:02:03,560
heart the upstream contribution I also

00:02:00,229 --> 00:02:07,619
work for the Fotolia project as a

00:02:03,560 --> 00:02:10,690
contributor before it's a open source

00:02:07,619 --> 00:02:13,840
net lessons an artist wars

00:02:10,690 --> 00:02:13,840
[Music]

00:02:18,530 --> 00:02:23,220
mmm

00:02:19,710 --> 00:02:24,980
click click review what I want to talk

00:02:23,220 --> 00:02:29,340
today

00:02:24,980 --> 00:02:34,110
first I will click introduce the what's

00:02:29,340 --> 00:02:39,660
a QA and why I the important for open

00:02:34,110 --> 00:02:45,230
house project and second novel introduce

00:02:39,660 --> 00:02:48,930
what the OpenStack QA and the next to

00:02:45,230 --> 00:02:52,530
introduce some tools for better testing

00:02:48,930 --> 00:02:56,430
in OpenStack at the last I will

00:02:52,530 --> 00:03:06,620
introduce how to leverage the OpenStack

00:02:56,430 --> 00:03:11,820
begin your open source projects okay

00:03:06,620 --> 00:03:14,340
what QA I think most of the software

00:03:11,820 --> 00:03:18,870
developer or engineer is very familiar

00:03:14,340 --> 00:03:24,299
this work the QA is short for the

00:03:18,870 --> 00:03:28,280
Quality Assurance it's a way of

00:03:24,299 --> 00:03:32,730
preventing mistakes or defects in the

00:03:28,280 --> 00:03:38,630
manufacturer products and to avoiding

00:03:32,730 --> 00:03:42,980
some problems then deliver some

00:03:38,630 --> 00:03:48,810
solutions or service to the customers

00:03:42,980 --> 00:03:51,060
which the ISO 9000 defines as part of

00:03:48,810 --> 00:03:54,450
the quality management focus on

00:03:51,060 --> 00:03:58,440
providing confidence that have quality

00:03:54,450 --> 00:04:02,000
requirements will be fulfilled and for

00:03:58,440 --> 00:04:07,290
the software development

00:04:02,000 --> 00:04:12,860
most of the QA is mainly for the testing

00:04:07,290 --> 00:04:16,560
things like our kind of tests unitized

00:04:12,860 --> 00:04:18,930
integrated test functional tests also

00:04:16,560 --> 00:04:22,550
for the tools and the process to

00:04:18,930 --> 00:04:27,630
automated testing and the tools to

00:04:22,550 --> 00:04:32,250
analysis and the repository

00:04:27,630 --> 00:04:38,280
so why the queue is important for open

00:04:32,250 --> 00:04:42,870
celled project so for the conditional

00:04:38,280 --> 00:04:48,810
kill to a software development it makes

00:04:42,870 --> 00:04:53,100
like commercial software in stable and

00:04:48,810 --> 00:04:56,310
rapid successful under the transitional

00:04:53,100 --> 00:05:00,750
software development models of the

00:04:56,310 --> 00:05:04,770
Quality Assurance is to constitute the

00:05:00,750 --> 00:05:11,100
set of systemic activities providing

00:05:04,770 --> 00:05:14,190
evidence of the ability of software to

00:05:11,100 --> 00:05:20,480
generate the software per product that

00:05:14,190 --> 00:05:28,170
is fit to use I think the traditional

00:05:20,480 --> 00:05:36,540
toy is dedicated with the one-man team

00:05:28,170 --> 00:05:41,010
or group to work on that and talk them

00:05:36,540 --> 00:05:44,480
how a to investigate the infective needs

00:05:41,010 --> 00:05:50,300
of the reviews and the English

00:05:44,480 --> 00:05:54,210
insurgency of the test technicals

00:05:50,300 --> 00:06:00,890
however for the Quality Assurance in the

00:05:54,210 --> 00:06:08,040
open source project it's not abundant or

00:06:00,890 --> 00:06:12,480
not well supported and for the open

00:06:08,040 --> 00:06:17,990
cloud project all the source code is

00:06:12,480 --> 00:06:24,260
available for all the contributors to

00:06:17,990 --> 00:06:29,330
developing writing or debugging for the

00:06:24,260 --> 00:06:32,550
rapid evolution so in most of the

00:06:29,330 --> 00:06:38,070
software so the most of open source

00:06:32,550 --> 00:06:41,990
projects they didn't do too much about

00:06:38,070 --> 00:06:41,990
the QA e apps tree

00:06:42,199 --> 00:06:52,530
sometimes sometimes up the up scream

00:06:45,210 --> 00:07:01,800
codebase may not very stable or stable

00:06:52,530 --> 00:07:06,840
or easy for user to to use them so

00:07:01,800 --> 00:07:10,669
actually the gold QA process will make

00:07:06,840 --> 00:07:20,659
the open-source project more stable and

00:07:10,669 --> 00:07:27,000
rapid development so what's the

00:07:20,659 --> 00:07:32,430
OpenStack QE the ovince actually defined

00:07:27,000 --> 00:07:36,000
as developed intent and initiate tools

00:07:32,430 --> 00:07:39,289
and price to ensure upstream stability

00:07:36,000 --> 00:07:43,199
and the quality of OpenStack and its

00:07:39,289 --> 00:07:47,460
release readiness that I mean any point

00:07:43,199 --> 00:07:51,889
during the release so call the OpenStack

00:07:47,460 --> 00:07:57,089
QA project team is made of multiple

00:07:51,889 --> 00:08:00,900
projects which each run independently

00:07:57,089 --> 00:08:08,940
toward the goal of the product team to

00:08:00,900 --> 00:08:12,180
make the OpenStack more stable so to

00:08:08,940 --> 00:08:16,349
understand was the OpenStack ue i first

00:08:12,180 --> 00:08:21,449
introduced the OpenStack CI a continuous

00:08:16,349 --> 00:08:25,169
integration workflow to how to support

00:08:21,449 --> 00:08:28,279
the QA process and what happened when

00:08:25,169 --> 00:08:35,159
you to code changes in OpenStack

00:08:28,279 --> 00:08:38,190
projects you know boot stack there is it

00:08:35,159 --> 00:08:42,750
used a score code review cyst review

00:08:38,190 --> 00:08:46,279
system instead and directly submit code

00:08:42,750 --> 00:08:50,160
to the washing control system and

00:08:46,279 --> 00:08:52,680
developer versus I made the code include

00:08:50,160 --> 00:08:57,029
the code the review system

00:08:52,680 --> 00:09:02,580
and then it will trigger the the check

00:08:57,029 --> 00:09:08,430
test and the check test pipeline is to

00:09:02,580 --> 00:09:17,270
some like unit has a functional test to

00:09:08,430 --> 00:09:20,580
score the code changes if get the field

00:09:17,270 --> 00:09:23,910
feedback we will get back to the

00:09:20,580 --> 00:09:27,570
developer as soon as possible to to

00:09:23,910 --> 00:09:31,709
check the log would would have long in

00:09:27,570 --> 00:09:35,580
the code changes if it passed it will go

00:09:31,709 --> 00:09:39,540
next for the Kyle code reviewer to

00:09:35,580 --> 00:09:45,630
review the code only cuts the check test

00:09:39,540 --> 00:09:48,839
pass of is +1 and the call code more

00:09:45,630 --> 00:09:54,990
than true call code reviewer has passed

00:09:48,839 --> 00:10:02,640
to score and the code also ready to be

00:09:54,990 --> 00:10:08,070
merge then it will trigger the gate type

00:10:02,640 --> 00:10:12,450
line test and the gate test refer to the

00:10:08,070 --> 00:10:18,510
process of running tests before develops

00:10:12,450 --> 00:10:21,209
page side is merged and the intent of

00:10:18,510 --> 00:10:24,360
running the test is to validate that as

00:10:21,209 --> 00:10:28,550
new changes they are not introduced new

00:10:24,360 --> 00:10:32,370
box also to some regression testing

00:10:28,550 --> 00:10:38,700
indicate which to make sure that such

00:10:32,370 --> 00:10:41,760
changes merging the not change the

00:10:38,700 --> 00:10:48,029
behavior since that has was lots of

00:10:41,760 --> 00:10:52,649
running in the check test also some

00:10:48,029 --> 00:10:59,399
projects also to some additional tests

00:10:52,649 --> 00:11:02,970
indicate queue after the skated has to

00:10:59,399 --> 00:11:04,260
pass and the new code changes will be

00:11:02,970 --> 00:11:10,089
more to the

00:11:04,260 --> 00:11:13,500
control system after that there will be

00:11:10,089 --> 00:11:19,450
also some process in the post school I

00:11:13,500 --> 00:11:22,720
didn't show it in this diagram once the

00:11:19,450 --> 00:11:26,770
code land to the ocean color system the

00:11:22,720 --> 00:11:32,610
postcode to something like to publish

00:11:26,770 --> 00:11:32,610
the documentation to the live website

00:11:37,740 --> 00:11:47,290
also to implement that workflow the

00:11:42,460 --> 00:11:55,390
OpenStack instructor consistent base the

00:11:47,290 --> 00:11:58,779
workflow showing the picture first that

00:11:55,390 --> 00:12:02,380
developer you will submitted the changes

00:11:58,779 --> 00:12:05,800
there as a get review coming aligned to

00:12:02,380 --> 00:12:12,310
the code review system we call it a

00:12:05,800 --> 00:12:15,190
carrot and the carrot is a connective is

00:12:12,310 --> 00:12:17,230
a git repository in over tag the

00:12:15,190 --> 00:12:24,520
creative poultry is measured under

00:12:17,230 --> 00:12:26,700
github and crystal observe the oak when

00:12:24,520 --> 00:12:35,860
the change is summoned to the carrot

00:12:26,700 --> 00:12:39,459
carrot there's also a trigger the check

00:12:35,860 --> 00:12:43,480
and the gate Patra is managed by the to

00:12:39,459 --> 00:12:47,680
do is also a tool to manage the key

00:12:43,480 --> 00:12:52,440
check pipeline in OpenStack and the tool

00:12:47,680 --> 00:12:52,440
is communication with the Jenkins master

00:12:53,370 --> 00:13:01,300
through the Gilman server to start the

00:12:58,120 --> 00:13:07,570
job and the jobs is running on the

00:13:01,300 --> 00:13:12,070
jinking flavor it's managed by another

00:13:07,570 --> 00:13:15,180
tool called so called notable no deploy

00:13:12,070 --> 00:13:20,220
the server is used by the OpenStack to

00:13:15,180 --> 00:13:23,310
managed manage and deploy a port of

00:13:20,220 --> 00:13:29,300
devstack images on the real cloud server

00:13:23,310 --> 00:13:29,300
is used to use for the OpenStack testing

00:13:35,870 --> 00:13:45,300
so based on the design of the OpenStack

00:13:40,020 --> 00:13:49,170
CI workflow the Q it has seen is

00:13:45,300 --> 00:13:53,030
ultimately the trigger by the check and

00:13:49,170 --> 00:13:57,060
gate pipeline when you submit a patch

00:13:53,030 --> 00:14:04,160
into the code review system so what kind

00:13:57,060 --> 00:14:04,160
of tests running in the gate peplau

00:14:04,400 --> 00:14:13,460
there is a bunch of testing jobs running

00:14:08,730 --> 00:14:17,940
in indicate testing first is the Tizen

00:14:13,460 --> 00:14:21,750
unit tasks they separate the unitary

00:14:17,940 --> 00:14:28,560
base many enticing environment Wersching

00:14:21,750 --> 00:14:35,580
lang mm mm and the Pisan 3-5 we also

00:14:28,560 --> 00:14:40,710
have some stale rules and checker to

00:14:35,580 --> 00:14:46,710
verify the code styles and also the

00:14:40,710 --> 00:14:51,440
biggest part is called the biggest part

00:14:46,710 --> 00:14:51,440
is called the devs deck and tempest

00:14:52,130 --> 00:14:58,980
which is too hot to type of test is

00:14:56,670 --> 00:15:03,360
running on the real OpenStack cloud

00:14:58,980 --> 00:15:08,450
environment to verify the OpenStack

00:15:03,360 --> 00:15:08,450
function and the API works

00:15:11,570 --> 00:15:19,370
to employment the OpenStack QE testing

00:15:16,230 --> 00:15:22,590
process there's a lot of cool projects

00:15:19,370 --> 00:15:29,220
maintained under the OpenStack you a

00:15:22,590 --> 00:15:32,310
repository the tundish that is the

00:15:29,220 --> 00:15:36,270
OpenStack integration testing suit and

00:15:32,310 --> 00:15:39,360
the dev stake is a series of extensible

00:15:36,270 --> 00:15:44,940
script used it'll click bring up

00:15:39,360 --> 00:15:50,970
complete OpenStack environment based on

00:15:44,940 --> 00:15:56,550
the latest the worship of the everything

00:15:50,970 --> 00:15:58,500
in the gate matter also hacking is for

00:15:56,550 --> 00:16:05,070
OpenStack style guide guidance

00:15:58,500 --> 00:16:08,940
guidelines granite granite is a testing

00:16:05,070 --> 00:16:12,240
Harnett harness to excuse the OpenStack

00:16:08,940 --> 00:16:15,840
upgrade process between different ladies

00:16:12,240 --> 00:16:19,530
and it is Deb stag to perform the

00:16:15,840 --> 00:16:26,060
initial OpenStack install and then walk

00:16:19,530 --> 00:16:29,880
through the upgrade for each project

00:16:26,060 --> 00:16:35,580
also the OpenStack sales and stack

00:16:29,880 --> 00:16:40,550
weight is our water light tools to show

00:16:35,580 --> 00:16:40,550
the test result and hazard test status

00:16:43,460 --> 00:16:51,990
ok next I will give some quickly

00:16:48,780 --> 00:17:00,180
introduce of the most important tools we

00:16:51,990 --> 00:17:04,290
used ye OpenStack QA and C is for the

00:17:00,180 --> 00:17:06,920
beta testing I will introduce 14 test

00:17:04,290 --> 00:17:11,150
tools the devstack

00:17:06,920 --> 00:17:15,860
tempest sub unity circle of slag sales

00:17:11,150 --> 00:17:15,860
elastic recheck and stack weight

00:17:19,260 --> 00:17:28,240
[Music]

00:17:20,920 --> 00:17:31,400
for the devstack devstack is a series of

00:17:28,240 --> 00:17:35,570
extensible scripts used to quickly bring

00:17:31,400 --> 00:17:37,970
up complete OpenStack environment based

00:17:35,570 --> 00:17:43,990
on the latest version of everything from

00:17:37,970 --> 00:17:49,610
gate master it is used in activity as a

00:17:43,990 --> 00:17:52,460
development environment also as much of

00:17:49,610 --> 00:17:56,360
the OpenStack projects functional

00:17:52,460 --> 00:18:01,580
testing and the dev sacks mission is to

00:17:56,360 --> 00:18:07,600
provide and maintain and tools use the

00:18:01,580 --> 00:18:07,600
for the installation of the OpenStack

00:18:08,230 --> 00:18:16,210
from the sauce and it's suitable for the

00:18:16,600 --> 00:18:25,840
development and for the QA testing the

00:18:22,220 --> 00:18:30,830
flag has a bunch of comfortable scripts

00:18:25,840 --> 00:18:34,220
you can adjust the install it with the

00:18:30,830 --> 00:18:38,380
simple configuration for some sanity

00:18:34,220 --> 00:18:43,370
testing also you can with a large

00:18:38,380 --> 00:18:47,950
configuration to deploy a black

00:18:43,370 --> 00:18:47,950
OpenStack Carter

00:18:55,190 --> 00:19:04,320
in August actually the devstack is a

00:19:00,059 --> 00:19:11,220
base of to create a real OpenStack

00:19:04,320 --> 00:19:14,820
environment for testing I think most of

00:19:11,220 --> 00:19:22,740
the opens our QA testing is based on the

00:19:14,820 --> 00:19:27,660
dev stick and the next attempt see

00:19:22,740 --> 00:19:33,780
tempest tempest is a set of integration

00:19:27,660 --> 00:19:38,520
tests suit against live open star

00:19:33,780 --> 00:19:43,040
cluster templates had a lot of paths for

00:19:38,520 --> 00:19:46,890
the OpenStack API validation and

00:19:43,040 --> 00:19:51,860
scenario testing also I had other

00:19:46,890 --> 00:19:58,590
specific it has useful to validating

00:19:51,860 --> 00:20:01,110
OpenStack deployment a commission the

00:19:58,590 --> 00:20:04,440
devstack is to deploy OpenStack

00:20:01,110 --> 00:20:08,850
environment and the tab page is running

00:20:04,440 --> 00:20:14,670
tests based on the dev stick to almost a

00:20:08,850 --> 00:20:18,710
QA team deployment item intend the core

00:20:14,670 --> 00:20:24,090
contains the library and the plugins

00:20:18,710 --> 00:20:30,240
also some call OpenStack service test

00:20:24,090 --> 00:20:33,090
cases like Noah neutral our other

00:20:30,240 --> 00:20:35,970
OpenStack service projects meantime by

00:20:33,090 --> 00:20:44,880
their own it has cases in their own

00:20:35,970 --> 00:20:50,390
tests repository Nashua is the OpenStack

00:20:44,880 --> 00:20:55,140
health officer health is a dashboard for

00:20:50,390 --> 00:21:01,760
authorizing the has a result of the open

00:20:55,140 --> 00:21:05,040
sexy eye jobs there are currently about

00:21:01,760 --> 00:21:11,670
12,000 jobs

00:21:05,040 --> 00:21:15,000
in the Czech get pipeline daily so it's

00:21:11,670 --> 00:21:21,390
a big number of jobs for for the

00:21:15,000 --> 00:21:25,440
developer to just to to check the log so

00:21:21,390 --> 00:21:29,910
it's very important for developers to

00:21:25,440 --> 00:21:36,870
use water lies to us to check the job

00:21:29,910 --> 00:21:44,010
status OpenStack has two part first one

00:21:36,870 --> 00:21:48,090
is some python db-api to query the tesla

00:21:44,010 --> 00:21:51,570
results from the database and another

00:21:48,090 --> 00:22:00,330
way is from fun and javascript to

00:21:51,570 --> 00:22:05,220
generate some chart and diagram the

00:22:00,330 --> 00:22:08,220
opens exhales this is the result of

00:22:05,220 --> 00:22:15,830
observe how s-- is from the sub unit

00:22:08,220 --> 00:22:15,830
circle and the elastic reserve we check

00:22:19,310 --> 00:22:29,340
sub Union to circle is the toss for

00:22:24,440 --> 00:22:31,670
storing the test result date in a local

00:22:29,340 --> 00:22:36,060
database

00:22:31,670 --> 00:22:41,390
it used the folder opens exhales to

00:22:36,060 --> 00:22:44,670
cleaner it ate the visualize result also

00:22:41,390 --> 00:22:50,360
Sabrina to circle provides a DB schema

00:22:44,670 --> 00:22:54,330
and applies MPI for interacting with

00:22:50,360 --> 00:22:57,720
database and currently is almost a

00:22:54,330 --> 00:23:00,630
constructor team intern my school

00:22:57,720 --> 00:23:05,250
database server and the auto test trees

00:23:00,630 --> 00:23:10,470
result is during the MySQL server and is

00:23:05,250 --> 00:23:14,810
also public to query the result it only

00:23:10,470 --> 00:23:14,810
me ten the six months test result

00:23:19,460 --> 00:23:26,330
this card is shows how the sub unit

00:23:22,309 --> 00:23:30,669
circle works as a mission in the open

00:23:26,330 --> 00:23:33,889
stack say I woke flow that has an

00:23:30,669 --> 00:23:37,669
individual test is running on the pink

00:23:33,889 --> 00:23:42,440
enslaver or note and the drinking's

00:23:37,669 --> 00:23:47,559
matter so the ssh to gets the test

00:23:42,440 --> 00:23:51,169
result and starting the logged server

00:23:47,559 --> 00:23:59,509
when it has finished it will trigger the

00:23:51,169 --> 00:24:03,950
gilman server and the gilman the subunit

00:23:59,509 --> 00:24:07,190
worker we are worried that the subunit

00:24:03,950 --> 00:24:09,049
test result and the converse and into

00:24:07,190 --> 00:24:13,179
the circle

00:24:09,049 --> 00:24:22,450
strolling to the muscular database so

00:24:13,179 --> 00:24:27,049
opens ourselves to use next is electric

00:24:22,450 --> 00:24:29,899
recheck letter elastic recheck is

00:24:27,049 --> 00:24:37,960
designed to answer the question have you

00:24:29,899 --> 00:24:41,539
seen these packs or errors recently

00:24:37,960 --> 00:24:48,649
italy reached elastic search to identify

00:24:41,539 --> 00:24:52,119
the feeders with known fingerprints it

00:24:48,649 --> 00:24:56,210
contains a repository of elastic search

00:24:52,119 --> 00:25:00,859
queries with knowing failures it had two

00:24:56,210 --> 00:25:05,210
parts wise boat which can watch the

00:25:00,859 --> 00:25:10,599
changes and reports to identify the

00:25:05,210 --> 00:25:16,279
failures by the title friend

00:25:10,599 --> 00:25:21,799
fingerprints and report to the keratin

00:25:16,279 --> 00:25:24,820
RSA another one has a dashboard which

00:25:21,799 --> 00:25:27,820
shows the failures by the category

00:25:24,820 --> 00:25:27,820
station

00:25:31,090 --> 00:25:42,230
this is a dashboard of the electric

00:25:35,769 --> 00:25:50,960
recheck your VOCs increase the frequency

00:25:42,230 --> 00:25:56,779
of the fitting of those packs for

00:25:50,960 --> 00:26:04,100
example this park is eight fields in the

00:25:56,779 --> 00:26:14,360
last 24 hours and 22 fields in the last

00:26:04,100 --> 00:26:19,399
certain base another one is a tool

00:26:14,360 --> 00:26:24,740
called the stack base we have this tool

00:26:19,399 --> 00:26:29,630
is to utilize the individuals that has a

00:26:24,740 --> 00:26:33,710
result the high level is true the test

00:26:29,630 --> 00:26:38,510
droves running time and how many enticed

00:26:33,710 --> 00:26:41,750
cases is is true I and how many fields

00:26:38,510 --> 00:26:45,559
how many escaped also you can go into

00:26:41,750 --> 00:26:51,710
the each tester to check each test click

00:26:45,559 --> 00:26:54,580
each test case running time and which

00:26:51,710 --> 00:26:54,580
why the field

00:26:59,039 --> 00:27:08,629
I have a quick demo to show how

00:27:02,219 --> 00:27:17,729
insecurely to monitor the the test

00:27:08,629 --> 00:27:22,609
Staters it can be accessed by anyone you

00:27:17,729 --> 00:27:22,609
can check this website link

00:27:31,000 --> 00:27:44,750
this is a website of the state earth

00:27:37,240 --> 00:27:52,640
that opens that talk there is a lot a

00:27:44,750 --> 00:27:58,010
lot of things first why is a tool so so

00:27:52,640 --> 00:28:02,299
is the management of the about the check

00:27:58,010 --> 00:28:06,740
and gauge and opposed pipeline you can

00:28:02,299 --> 00:28:13,870
see all the tech tests Staters and geek

00:28:06,740 --> 00:28:17,010
tests tasers from this page also

00:28:13,870 --> 00:28:17,010
[Music]

00:28:21,010 --> 00:28:33,159
so this one is the latter it protects I

00:28:28,010 --> 00:28:40,450
mentioned in the slides and they said

00:28:33,159 --> 00:28:40,450
alive state hers also say this park is

00:28:41,110 --> 00:28:54,769
shooing blinking delay in this is time

00:28:48,309 --> 00:28:59,500
next our mission is open step sales over

00:28:54,769 --> 00:29:07,159
Sam's house is a dashboard that shows a

00:28:59,500 --> 00:29:10,029
test result of the epitaxial jobs it's

00:29:07,159 --> 00:29:18,789
implemented by the JavaScript so you can

00:29:10,029 --> 00:29:25,220
check some data on the chart also

00:29:18,789 --> 00:29:27,669
there's a bunch of job filters by the

00:29:25,220 --> 00:29:27,669
rate

00:29:31,070 --> 00:29:40,650
that that that is a most of the

00:29:35,960 --> 00:29:43,370
OpenStack u8 team to monitor the test

00:29:40,650 --> 00:29:43,370
results

00:30:06,800 --> 00:30:17,250
next part I will give some tips about

00:30:12,420 --> 00:30:20,730
how to leverage the OpenStack way in

00:30:17,250 --> 00:30:24,690
your own open cell project first tips is

00:30:20,730 --> 00:30:27,180
try to understand the importance of the

00:30:24,690 --> 00:30:32,210
collating the open-source project I

00:30:27,180 --> 00:30:37,640
think some of the opens I'll talk the

00:30:32,210 --> 00:30:41,010
project didn't care too much about

00:30:37,640 --> 00:30:44,730
testing in the upstream it's very

00:30:41,010 --> 00:30:49,170
important for the project it can made

00:30:44,730 --> 00:30:54,240
the code base very stable also the next

00:30:49,170 --> 00:30:58,860
one is all the CI and QA process in the

00:30:54,240 --> 00:31:04,050
OpenStack is also open source this kind

00:30:58,860 --> 00:31:07,260
of tools and process you can all get

00:31:04,050 --> 00:31:11,790
from the open track website you can use

00:31:07,260 --> 00:31:19,560
it for your own open source projects

00:31:11,790 --> 00:31:20,430
next is a tools I mentioned or a o.o is

00:31:19,560 --> 00:31:23,490
open source

00:31:20,430 --> 00:31:29,010
I think the devstack and the tempest is

00:31:23,490 --> 00:31:34,320
most specific for the OpenStack things

00:31:29,010 --> 00:31:40,430
but the other tools now non specific to

00:31:34,320 --> 00:31:43,430
the OpenStack it can be used to other

00:31:40,430 --> 00:31:43,430
projects

00:31:46,500 --> 00:31:55,110
yes that is all my talk today this is

00:31:53,159 --> 00:31:59,159
all the things you can get from the

00:31:55,110 --> 00:32:05,580
website about QE OpenStack and this is

00:31:59,159 --> 00:32:12,830
my contact information the email and RSA

00:32:05,580 --> 00:32:17,240
freenode nickname okay thank you

00:32:12,830 --> 00:32:17,240
and questions

00:32:18,540 --> 00:32:23,049

YouTube URL: https://www.youtube.com/watch?v=GgsEdnPm0Gc


