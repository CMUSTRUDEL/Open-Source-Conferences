Title: The Forgotten Route: Making Apache Camel Work for You - John Saboe, Rogue Wave Software
Publication date: 2017-05-19
Playlist: ApacheCon 2017 - Miami
Description: 
	The Forgotten Route: Making Apache Camel Work for You - John Saboe, Rogue Wave Software

Apache Camel is eight years old, and some say it's effectiveness as the glue between components has diminished. John Saboe says, "Not so!"

This is a classic example of older technology not being used to its fullest, which John proves by walking through little known configuration and optimization tricks that get data flowing reliably and efficiently - even for today's complexity and scale. This session covers:
Camel basics, understanding Exchanges, Routes, and how to implement EIPs with them
Examples of real implementations of common EIPs like Content Based Routers and Recipient Lists
Integration of Camel with common endpoints, like JMS, FTP, and HTTP

About John Saboe
Enterprise Architect, Rogue Wave Software
Captions: 
	00:00:00,000 --> 00:00:05,220
hi I'm John Tsavo I'm with rogue wave

00:00:02,250 --> 00:00:10,410
software and I'm going to be presenting

00:00:05,220 --> 00:00:11,790
on apache camel let's say up I'm

00:00:10,410 --> 00:00:14,540
apparently at the end of my presentation

00:00:11,790 --> 00:00:19,470
when I get back to the right spot here

00:00:14,540 --> 00:00:22,619
here we go now we got it okay um and

00:00:19,470 --> 00:00:25,109
making Apache cam will work for you

00:00:22,619 --> 00:00:28,250
so I'm a Enterprise Architect with the

00:00:25,109 --> 00:00:33,360
OSS support team at rogue wave software

00:00:28,250 --> 00:00:36,450
we support a big variety of open source

00:00:33,360 --> 00:00:38,129
products I personally do a lot of work

00:00:36,450 --> 00:00:41,190
with apache activemq

00:00:38,129 --> 00:00:45,989
pachi camel and then also work with

00:00:41,190 --> 00:00:53,250
tomcat other web servers that kind of

00:00:45,989 --> 00:00:55,910
thing anyways a camel is an open source

00:00:53,250 --> 00:00:58,739
message oriented middleware language

00:00:55,910 --> 00:01:03,180
developed by apache it's based on

00:00:58,739 --> 00:01:06,270
enterprise integration patterns there's

00:01:03,180 --> 00:01:08,520
a book by Gregor hope and Bobby Wolfe

00:01:06,270 --> 00:01:13,110
called enterprise integration patterns

00:01:08,520 --> 00:01:16,710
it's a wonderful book it has about 60

00:01:13,110 --> 00:01:18,270
plus common patterns that you would

00:01:16,710 --> 00:01:23,400
commonly use enterprise integration

00:01:18,270 --> 00:01:28,560
projects this includes things like you

00:01:23,400 --> 00:01:31,200
know uh let's see of blanking right now

00:01:28,560 --> 00:01:32,970
but it lots of patterns yeah

00:01:31,200 --> 00:01:36,390
distributing messages across different

00:01:32,970 --> 00:01:37,560
processors doing transformations at such

00:01:36,390 --> 00:01:38,210
well get into that later in the

00:01:37,560 --> 00:01:41,369
presentation

00:01:38,210 --> 00:01:43,500
it defines these patterns in a

00:01:41,369 --> 00:01:46,500
vendor-neutral way these are things you

00:01:43,500 --> 00:01:48,869
want to do commonly in any message

00:01:46,500 --> 00:01:52,290
oriented environment and enterprise

00:01:48,869 --> 00:01:54,509
Kamel aims to provide a language to

00:01:52,290 --> 00:01:56,549
implement these patterns in a

00:01:54,509 --> 00:01:57,810
standardized way you know they're

00:01:56,549 --> 00:02:00,659
implemented correctly all that

00:01:57,810 --> 00:02:03,119
boilerplate is already there it's very

00:02:00,659 --> 00:02:05,219
simple to use and get you up and running

00:02:03,119 --> 00:02:09,000
very quickly and sufficient at it too

00:02:05,219 --> 00:02:10,700
it's modeled after the unix pipeline so

00:02:09,000 --> 00:02:14,280
everything has an input and an output

00:02:10,700 --> 00:02:16,920
it's all based around messaging

00:02:14,280 --> 00:02:18,420
camels a huge topic there's a lot of

00:02:16,920 --> 00:02:20,400
inputs and outputs so you can use with

00:02:18,420 --> 00:02:22,920
it a lot of different processors

00:02:20,400 --> 00:02:24,600
available you can even code your own so

00:02:22,920 --> 00:02:28,710
we're just going to scratch the surface

00:02:24,600 --> 00:02:31,830
here and just barely kind of do a demo

00:02:28,710 --> 00:02:32,580
talk about what it can do and kind of

00:02:31,830 --> 00:02:34,740
get you going

00:02:32,580 --> 00:02:37,950
to where you can start investigating it

00:02:34,740 --> 00:02:42,120
yourself how does it work

00:02:37,950 --> 00:02:45,210
camel uses this concept of processor and

00:02:42,120 --> 00:02:48,540
message objects in a group called in

00:02:45,210 --> 00:02:51,810
exchange so how that works there's an

00:02:48,540 --> 00:02:53,310
end message there is a processor and

00:02:51,810 --> 00:02:55,130
then an owl message the processor

00:02:53,310 --> 00:02:58,410
performs whatever transformations

00:02:55,130 --> 00:03:01,020
filters whatever you want to do on that

00:02:58,410 --> 00:03:03,780
message as it comes in and then outputs

00:03:01,020 --> 00:03:06,810
it into an outage you know same

00:03:03,780 --> 00:03:10,440
semantics so you have a in message

00:03:06,810 --> 00:03:14,100
processor and an out message because

00:03:10,440 --> 00:03:15,900
this is you know it's consistent you can

00:03:14,100 --> 00:03:18,540
chain these together as much as you want

00:03:15,900 --> 00:03:22,520
you can generate a change of chain of

00:03:18,540 --> 00:03:26,520
processors here to transform message

00:03:22,520 --> 00:03:30,800
grab content from another source to add

00:03:26,520 --> 00:03:34,140
to that message decorate it you can then

00:03:30,800 --> 00:03:36,870
you know distribute that message perform

00:03:34,140 --> 00:03:40,350
filtering on it basically whatever you

00:03:36,870 --> 00:03:43,170
need to do to transform this just like a

00:03:40,350 --> 00:03:45,120
UNIX pipeline so you know just like

00:03:43,170 --> 00:03:47,400
you'd pipe things to UNIX pipeline you

00:03:45,120 --> 00:03:51,780
might you know T something out to a file

00:03:47,400 --> 00:03:55,500
etc camel does this to messages and for

00:03:51,780 --> 00:03:58,440
enterprise integration the lab will

00:03:55,500 --> 00:04:01,560
actually be a content based router kind

00:03:58,440 --> 00:04:05,160
of based on this the out message from

00:04:01,560 --> 00:04:08,010
your previous exchange becomes in

00:04:05,160 --> 00:04:13,820
message for your next exchange or you

00:04:08,010 --> 00:04:17,669
you know shoot it out to another file a

00:04:13,820 --> 00:04:21,840
HP endpoint JSON you know anything you

00:04:17,669 --> 00:04:23,580
want it can go to another message bus so

00:04:21,840 --> 00:04:25,200
these changes they chain together pretty

00:04:23,580 --> 00:04:28,640
consistently here you have a pipeline

00:04:25,200 --> 00:04:28,640
it's like Lego about Lego blocks

00:04:29,520 --> 00:04:35,640
the magical part here is that the

00:04:32,910 --> 00:04:38,850
processor can be anything that you want

00:04:35,640 --> 00:04:42,060
it to be you can create your own

00:04:38,850 --> 00:04:44,700
processors to do whatever you need to do

00:04:42,060 --> 00:04:46,830
in your business if you have some sort

00:04:44,700 --> 00:04:50,760
of custom processing you need to do you

00:04:46,830 --> 00:04:55,470
can do that you can have there's an FTP

00:04:50,760 --> 00:04:59,250
processor that can either grab from an

00:04:55,470 --> 00:05:01,740
FTP site or you can and initiate that

00:04:59,250 --> 00:05:05,910
session to pull something you can also

00:05:01,740 --> 00:05:08,250
output to FTP same way SMTP you can you

00:05:05,910 --> 00:05:09,900
can grab you know mail messages or you

00:05:08,250 --> 00:05:12,090
can send mail messages these are all

00:05:09,900 --> 00:05:14,430
things you can do so basically it's in

00:05:12,090 --> 00:05:17,160
input from anything output to anything

00:05:14,430 --> 00:05:20,940
else it can be triggered or it can be on

00:05:17,160 --> 00:05:22,350
a timer however you need to do this it

00:05:20,940 --> 00:05:24,990
can be triggered by another message

00:05:22,350 --> 00:05:27,510
coming in coming in and then triggering

00:05:24,990 --> 00:05:31,410
it to you know triggering the processor

00:05:27,510 --> 00:05:33,720
to pull from another source or to

00:05:31,410 --> 00:05:36,420
combine it with another message there's

00:05:33,720 --> 00:05:38,100
a lot of built-in patterns mentioned you

00:05:36,420 --> 00:05:41,310
know some of these here load balancing

00:05:38,100 --> 00:05:43,260
you can you can load balance a certain

00:05:41,310 --> 00:05:46,320
type of message across any number of

00:05:43,260 --> 00:05:48,650
outputs you can multicast so you can

00:05:46,320 --> 00:05:50,970
brought you know bro multi cats out to

00:05:48,650 --> 00:05:53,970
several different endpoints you want it

00:05:50,970 --> 00:05:58,170
you want to send to you can create data

00:05:53,970 --> 00:05:59,850
sets with aggregation and there's a ton

00:05:58,170 --> 00:06:01,980
of these components that are just built

00:05:59,850 --> 00:06:03,300
in like I said there's 60 plus

00:06:01,980 --> 00:06:07,230
integration patterns it's probably a

00:06:03,300 --> 00:06:10,080
hundred plus components and let me let

00:06:07,230 --> 00:06:13,440
me actually look at and bring this up

00:06:10,080 --> 00:06:16,680
here just so you can see this is this is

00:06:13,440 --> 00:06:19,670
the list on camel site of all the

00:06:16,680 --> 00:06:23,280
components available just out of the box

00:06:19,670 --> 00:06:28,410
so we can we can look through here you

00:06:23,280 --> 00:06:35,709
can you know Adam integration AWS simple

00:06:28,410 --> 00:06:42,879
VB email service you can do let's see

00:06:35,709 --> 00:06:48,879
Kassandra couchdb cxf for web services

00:06:42,879 --> 00:06:51,319
you can do losing my cursor here docker

00:06:48,879 --> 00:06:54,639
can you can communicate back and forth

00:06:51,319 --> 00:06:58,959
through your doctor instances Dropbox

00:06:54,639 --> 00:07:05,329
elasticsearch at CD for configuration

00:06:58,959 --> 00:07:08,629
process spring events is get hooks let's

00:07:05,329 --> 00:07:10,849
see what else is in here you keep chat

00:07:08,629 --> 00:07:12,979
you can do integration with chat as well

00:07:10,849 --> 00:07:15,139
so if you want to process you know if

00:07:12,979 --> 00:07:16,969
message comes in you want to throw it on

00:07:15,139 --> 00:07:19,249
to your your chat client so that you can

00:07:16,969 --> 00:07:21,679
display it in chat where it's relevant

00:07:19,249 --> 00:07:24,139
you can do that for alerting or things

00:07:21,679 --> 00:07:30,469
like that based on certain messages IMAP

00:07:24,139 --> 00:07:31,339
IRC jbpm JMX so you can you can monitor

00:07:30,469 --> 00:07:37,099
certain JMX

00:07:31,339 --> 00:07:42,039
entities using this JDBC so you can you

00:07:37,099 --> 00:07:45,229
can pull from and push into databases

00:07:42,039 --> 00:07:48,169
let's see kubernetes you can interact

00:07:45,229 --> 00:07:50,839
with that Kafka so you can use Kafka

00:07:48,169 --> 00:07:54,709
message brokers ActiveMQ is in there too

00:07:50,839 --> 00:07:58,129
I mean you so you get the idea is like

00:07:54,709 --> 00:08:02,229
inputs and outputs everything PDF open

00:07:58,129 --> 00:08:07,339
open shift pop quartz RabbitMQ rest

00:08:02,229 --> 00:08:10,099
anyways way too much in any case so

00:08:07,339 --> 00:08:13,759
there's a ton of components that are

00:08:10,099 --> 00:08:15,800
built into camel this is a cropped

00:08:13,759 --> 00:08:19,459
picture it doesn't actually it stops a

00:08:15,800 --> 00:08:21,379
Scalla here but yes so inputs and

00:08:19,459 --> 00:08:24,349
outputs from almost anything out of the

00:08:21,379 --> 00:08:26,989
box and you can always a code your own

00:08:24,349 --> 00:08:30,289
if there's something that isn't in there

00:08:26,989 --> 00:08:31,789
already for some reason so camel is

00:08:30,289 --> 00:08:34,189
pretty awesome input and output

00:08:31,789 --> 00:08:37,250
transformation message transformation

00:08:34,189 --> 00:08:39,620
for many input and output it provides a

00:08:37,250 --> 00:08:42,860
lot of benefits for enterprise messaging

00:08:39,620 --> 00:08:45,860
applications there's a whole over 100

00:08:42,860 --> 00:08:47,630
integration components and framework

00:08:45,860 --> 00:08:49,150
that's pretty easy to create your own

00:08:47,630 --> 00:08:50,560
components if

00:08:49,150 --> 00:08:51,940
the out-of-the-box stuff doesn't do

00:08:50,560 --> 00:08:53,650
exactly what you want

00:08:51,940 --> 00:08:55,830
it's very configurable so you can do

00:08:53,650 --> 00:08:58,330
almost anything there you can do

00:08:55,830 --> 00:09:02,500
Campbell does have visual debugging now

00:08:58,330 --> 00:09:03,820
similar to Jay ppm or BPEL that's a

00:09:02,500 --> 00:09:05,730
newer feature wasn't there at the

00:09:03,820 --> 00:09:08,290
beginning

00:09:05,730 --> 00:09:11,560
camel cuts down on boilerplate code

00:09:08,290 --> 00:09:14,890
because you can express very concisely

00:09:11,560 --> 00:09:18,340
in its spring based integration

00:09:14,890 --> 00:09:19,870
components you know different

00:09:18,340 --> 00:09:21,400
transformations so if you have simple

00:09:19,870 --> 00:09:22,330
transformations and processors and

00:09:21,400 --> 00:09:25,480
change that you want to implement

00:09:22,330 --> 00:09:28,480
there's a spring based DSL that is

00:09:25,480 --> 00:09:31,480
extremely compact for expressing most of

00:09:28,480 --> 00:09:33,850
these patterns each one implement it is

00:09:31,480 --> 00:09:36,580
sauce it's under their Apache 2 license

00:09:33,850 --> 00:09:42,040
obviously we're at Apache con so in it

00:09:36,580 --> 00:09:44,410
is an Apache product our project it they

00:09:42,040 --> 00:09:47,700
continue and work on underlying spring

00:09:44,410 --> 00:09:52,320
library so you know spring advances

00:09:47,700 --> 00:09:55,270
camels expressiveness increases as well

00:09:52,320 --> 00:09:58,630
it's pretty easy to understand and has a

00:09:55,270 --> 00:10:02,260
low learning curve to implement I'll

00:09:58,630 --> 00:10:04,840
show a few common AIPS enterprise

00:10:02,260 --> 00:10:11,410
integration patterns that camel includes

00:10:04,840 --> 00:10:15,010
out of the box here let's see over here

00:10:11,410 --> 00:10:16,600
so first one dynamic router you might

00:10:15,010 --> 00:10:19,150
want to route different messages to

00:10:16,600 --> 00:10:23,590
different end points based on message

00:10:19,150 --> 00:10:25,350
criteria so safer this is actually why

00:10:23,590 --> 00:10:28,630
I'm writer what I'm going to do lab on

00:10:25,350 --> 00:10:31,270
and say you you know have two different

00:10:28,630 --> 00:10:35,620
types of messages coming in one needs to

00:10:31,270 --> 00:10:38,140
be processed by one of one processor and

00:10:35,620 --> 00:10:40,540
other by another one so you know this

00:10:38,140 --> 00:10:42,490
example you have a widget and widgets

00:10:40,540 --> 00:10:44,020
and gadgets and you keep track of the

00:10:42,490 --> 00:10:45,850
inventory in those in two different

00:10:44,020 --> 00:10:48,100
systems you have all your inventory

00:10:45,850 --> 00:10:49,750
coming into this from the order this

00:10:48,100 --> 00:10:51,940
content-based router is splitting out

00:10:49,750 --> 00:10:55,210
those orders up automatically into

00:10:51,940 --> 00:10:56,710
widgets and gadgets so pretty

00:10:55,210 --> 00:10:59,260
straightforward there it's a common

00:10:56,710 --> 00:11:03,520
enterprise integration pattern content

00:10:59,260 --> 00:11:06,279
enricher so in this example

00:11:03,520 --> 00:11:09,600
you have a basic message it's pretty

00:11:06,279 --> 00:11:11,980
bare-bones say you know for that order

00:11:09,600 --> 00:11:14,680
for the last one maybe it just has a

00:11:11,980 --> 00:11:18,550
part number inequality but before you

00:11:14,680 --> 00:11:20,440
display it to your user you need to pull

00:11:18,550 --> 00:11:23,230
the you know what where the image

00:11:20,440 --> 00:11:25,620
resource for it is and the name of it

00:11:23,230 --> 00:11:29,170
so this enricher will pull that

00:11:25,620 --> 00:11:32,050
inventory number ping a database to find

00:11:29,170 --> 00:11:34,149
out you know what what the long

00:11:32,050 --> 00:11:35,740
description of the item is maybe some

00:11:34,149 --> 00:11:37,990
additional resources attached to that

00:11:35,740 --> 00:11:40,390
attach it to that message the message

00:11:37,990 --> 00:11:43,560
coming out of that has been enriched

00:11:40,390 --> 00:11:46,080
with that extra content at that point

00:11:43,560 --> 00:11:49,380
let's see

00:11:46,080 --> 00:11:53,140
recipient list so recipient list

00:11:49,380 --> 00:11:55,209
broadcast message comes in you broadcast

00:11:53,140 --> 00:11:58,779
it to end channels based on the message

00:11:55,209 --> 00:12:00,850
criteria if you broadcast it to all this

00:11:58,779 --> 00:12:03,760
would be multicast so that's the kind of

00:12:00,850 --> 00:12:06,399
degenerate case here of broadcasting to

00:12:03,760 --> 00:12:08,410
all as multicast but say you might want

00:12:06,399 --> 00:12:10,720
to select only certain endpoints or

00:12:08,410 --> 00:12:14,579
channels but then this message gets

00:12:10,720 --> 00:12:17,230
routed to so recipient list will do that

00:12:14,579 --> 00:12:21,520
here's another really powerful one is

00:12:17,230 --> 00:12:23,649
scatter gather so this one normally this

00:12:21,520 --> 00:12:26,079
is something you end up with a lot of

00:12:23,649 --> 00:12:28,390
code to do out of the box is pretty

00:12:26,079 --> 00:12:31,630
simple though you take in say quote

00:12:28,390 --> 00:12:33,940
request you need to pull information

00:12:31,630 --> 00:12:36,070
from multiple vendors this would be an

00:12:33,940 --> 00:12:40,240
example of like a travel booking website

00:12:36,070 --> 00:12:43,660
where you're comparing the prices for a

00:12:40,240 --> 00:12:45,880
certain of flight route from multiple

00:12:43,660 --> 00:12:47,770
vendors or hotel prices or something

00:12:45,880 --> 00:12:49,779
like that so what you want to do is you

00:12:47,770 --> 00:12:52,120
want to take this one request of you

00:12:49,779 --> 00:12:53,920
know this hotel this night and I'm going

00:12:52,120 --> 00:12:56,680
to split out to you know three different

00:12:53,920 --> 00:12:59,470
vendors and get the pricing from those

00:12:56,680 --> 00:13:01,720
three vendors ina grab those quotes I'm

00:12:59,470 --> 00:13:04,180
going to then take it in and put it into

00:13:01,720 --> 00:13:05,890
an aggregator that then does a max on

00:13:04,180 --> 00:13:08,200
those quotes that I'm getting back and

00:13:05,890 --> 00:13:10,120
then from that I get a best quote and

00:13:08,200 --> 00:13:13,420
then that's what I end up presenting to

00:13:10,120 --> 00:13:15,640
the user and this is extremely simple to

00:13:13,420 --> 00:13:18,550
do with camel this is a few lines

00:13:15,640 --> 00:13:19,900
you specify you message what you want to

00:13:18,550 --> 00:13:22,540
filter out of it

00:13:19,900 --> 00:13:26,770
where you're querying based on that

00:13:22,540 --> 00:13:28,960
filtered data those quotes that come in

00:13:26,770 --> 00:13:32,290
what you want to filter out of those you

00:13:28,960 --> 00:13:36,720
aggregate you find the max and then you

00:13:32,290 --> 00:13:40,270
have an output of your end result here

00:13:36,720 --> 00:13:43,630
so let's see let's let's go ahead and

00:13:40,270 --> 00:13:47,260
dive in coding in camel so how do you do

00:13:43,630 --> 00:13:49,450
how do you implement this let's see how

00:13:47,260 --> 00:13:51,640
are we doing in time here okay

00:13:49,450 --> 00:13:53,410
camel routes there's a lot of different

00:13:51,640 --> 00:13:55,960
ways you can express camel routes it's

00:13:53,410 --> 00:13:59,980
fairly flexible based on how you want to

00:13:55,960 --> 00:14:02,260
work they can be coded in Java pojos so

00:13:59,980 --> 00:14:05,440
if you like working in code and that's

00:14:02,260 --> 00:14:07,960
how you like to implement things if

00:14:05,440 --> 00:14:10,300
pretty simple to do this this is an

00:14:07,960 --> 00:14:13,390
example of a camel route right here it's

00:14:10,300 --> 00:14:16,560
extremely concise and extremely powerful

00:14:13,390 --> 00:14:19,630
what we're doing here is we're taking

00:14:16,560 --> 00:14:23,260
messages from the Foo queue on our

00:14:19,630 --> 00:14:25,890
ActiveMQ broker we are consuming from

00:14:23,260 --> 00:14:28,630
that food queue we're applying a filter

00:14:25,890 --> 00:14:30,940
with that filled in that filter we're

00:14:28,630 --> 00:14:33,610
looking for an ex Cory

00:14:30,940 --> 00:14:36,100
so we're filtering on - so we're

00:14:33,610 --> 00:14:38,880
immediately we're getting XML messages

00:14:36,100 --> 00:14:41,320
we're filtering them based on an X query

00:14:38,880 --> 00:14:43,660
based on the messages that match that

00:14:41,320 --> 00:14:46,210
we're then forwarding those messages on

00:14:43,660 --> 00:14:50,740
that match that x query filter into a

00:14:46,210 --> 00:14:53,590
separate ActiveMQ q bar on our ActiveMQ

00:14:50,740 --> 00:14:57,450
instance this is it's like a one-liner

00:14:53,590 --> 00:14:59,650
in camel if you're coding this manually

00:14:57,450 --> 00:15:02,140
it'd probably be a little bit more

00:14:59,650 --> 00:15:07,200
involved and probably wouldn't be as

00:15:02,140 --> 00:15:09,940
concise and understandable you can also

00:15:07,200 --> 00:15:12,340
do this very simply and if you're

00:15:09,940 --> 00:15:14,020
prototyping and if you're just trying to

00:15:12,340 --> 00:15:17,110
play around with this and even in

00:15:14,020 --> 00:15:19,300
production this is a great way to do

00:15:17,110 --> 00:15:22,090
things because it's so easy you can use

00:15:19,300 --> 00:15:23,779
the spring DSL built into camel to

00:15:22,090 --> 00:15:25,810
implement these

00:15:23,779 --> 00:15:29,329
these different integration patterns and

00:15:25,810 --> 00:15:32,540
message crossing in straight-up XML

00:15:29,329 --> 00:15:35,480
files just when configuration and update

00:15:32,540 --> 00:15:39,829
these as you need to so here is a

00:15:35,480 --> 00:15:43,490
another example of a camel route so we

00:15:39,829 --> 00:15:46,040
have our camel route here spring we're

00:15:43,490 --> 00:15:48,680
calling it timer client so what we're

00:15:46,040 --> 00:15:51,529
going to do here is in you know a couple

00:15:48,680 --> 00:15:55,279
lines here so we have the same structure

00:15:51,529 --> 00:15:57,079
we have from of our you know just like

00:15:55,279 --> 00:16:00,319
anything else in camel its input

00:15:57,079 --> 00:16:02,720
processor output so here's from we're

00:16:00,319 --> 00:16:06,519
instantiating in this one line here

00:16:02,720 --> 00:16:10,009
we're creating a timer and this timer is

00:16:06,519 --> 00:16:12,319
going to repeat 10,000 times and it's

00:16:10,009 --> 00:16:16,430
going to repeat once every 10 seconds so

00:16:12,319 --> 00:16:19,730
in this one line we are created where in

00:16:16,430 --> 00:16:22,699
Sanji ating courts were telling it every

00:16:19,730 --> 00:16:24,949
10 seconds to trigger every 10 seconds

00:16:22,699 --> 00:16:28,069
we are triggering the production out of

00:16:24,949 --> 00:16:31,910
an active MQ message we're calling this

00:16:28,069 --> 00:16:34,129
act a MQ load timer and we're doing this

00:16:31,910 --> 00:16:35,509
10,000 times in this one line so we're

00:16:34,129 --> 00:16:39,290
generating load is basically what we're

00:16:35,509 --> 00:16:42,079
doing from here the time we're setting

00:16:39,290 --> 00:16:44,139
the body of these messages to this is a

00:16:42,079 --> 00:16:47,269
test GMs message so we're just basically

00:16:44,139 --> 00:16:50,660
generating a bunch of messages to this

00:16:47,269 --> 00:16:53,300
ActiveMQ queue with the content this is

00:16:50,660 --> 00:16:55,730
the test for EMS message we're then

00:16:53,300 --> 00:16:59,870
sending those messages to an output of

00:16:55,730 --> 00:17:03,250
our action mqq test act am ActiveMQ

00:16:59,870 --> 00:17:05,809
route inc link you

00:17:03,250 --> 00:17:07,339
that's our ID there's time a client in

00:17:05,809 --> 00:17:09,049
queue producers that can be useful when

00:17:07,339 --> 00:17:12,110
you're then looking at how this is

00:17:09,049 --> 00:17:14,480
acting this is a great way using a timer

00:17:12,110 --> 00:17:17,270
like this when you're testing out routes

00:17:14,480 --> 00:17:19,130
if you're even if even if you're not

00:17:17,270 --> 00:17:21,110
using camel if you have a messaging

00:17:19,130 --> 00:17:23,899
system and you need to decorate some

00:17:21,110 --> 00:17:26,120
test load using a timer and camel like

00:17:23,899 --> 00:17:28,429
this is a extremely wet easy way to do

00:17:26,120 --> 00:17:30,649
that it takes one line there's no

00:17:28,429 --> 00:17:33,970
compliation step you stick this in the

00:17:30,649 --> 00:17:37,090
in your camel route configuration and

00:17:33,970 --> 00:17:38,620
start it and there you have 10,000

00:17:37,090 --> 00:17:42,429
messages going into your message queue

00:17:38,620 --> 00:17:46,330
for test purposes so it's pretty simple

00:17:42,429 --> 00:17:49,480
there now let's see this Java pojo up

00:17:46,330 --> 00:17:52,649
there all this is implementing you're

00:17:49,480 --> 00:17:55,750
using the route builder class for that

00:17:52,649 --> 00:17:58,779
you cannot the one drawback to the Java

00:17:55,750 --> 00:18:01,059
pojos is you can't render these routes

00:17:58,779 --> 00:18:03,129
graphically in Henao

00:18:01,059 --> 00:18:05,649
which is extremely useful when you're

00:18:03,129 --> 00:18:09,639
debugging routes and transformations

00:18:05,649 --> 00:18:12,549
with this string DSL as you're mocking

00:18:09,639 --> 00:18:14,830
these things up you can actually see the

00:18:12,549 --> 00:18:19,809
the messages propagate through your your

00:18:14,830 --> 00:18:21,669
chain of transformations and debug them

00:18:19,809 --> 00:18:24,129
that way so it's a very useful tool tool

00:18:21,669 --> 00:18:25,360
once you get a production or want it you

00:18:24,129 --> 00:18:26,830
know speed things up or do something

00:18:25,360 --> 00:18:30,100
more custom things you can always do the

00:18:26,830 --> 00:18:35,309
pojos as well see and we'll have a demo

00:18:30,100 --> 00:18:38,470
is that on that as well let's see this

00:18:35,309 --> 00:18:39,879
yep so this is our example spring dsl

00:18:38,470 --> 00:18:45,399
camel route I just talked through it

00:18:39,879 --> 00:18:48,759
back there we send 10,000 messages every

00:18:45,399 --> 00:18:53,649
10 seconds per message and we're sending

00:18:48,759 --> 00:18:56,049
into an active mqq in hot io when we

00:18:53,649 --> 00:18:57,600
when we want to view this graphically

00:18:56,049 --> 00:19:02,950
this is what it ends up looking like

00:18:57,600 --> 00:19:05,909
we'll see a box here for our from we are

00:19:02,950 --> 00:19:09,639
our source is this timer source and

00:19:05,909 --> 00:19:12,370
we're calling a mq load timer the

00:19:09,639 --> 00:19:16,139
message contents is this is a test JMS

00:19:12,370 --> 00:19:19,899
message and then it shows us - and our

00:19:16,139 --> 00:19:23,409
sink here is our axiom QQ test

00:19:19,899 --> 00:19:26,259
activemq route in queue and that counter

00:19:23,409 --> 00:19:27,639
up in the top there as you can see 15 10

00:19:26,259 --> 00:19:30,309
that's just the number of messages that

00:19:27,639 --> 00:19:37,120
have gone through at this point in the

00:19:30,309 --> 00:19:39,460
GUI view let's see the developers on

00:19:37,120 --> 00:19:41,259
that on the camel project overlap a lot

00:19:39,460 --> 00:19:44,320
with activemq so that's part of the

00:19:41,259 --> 00:19:46,580
reason why a lot of the demos are using

00:19:44,320 --> 00:19:50,150
academic view it's actually compatible

00:19:46,580 --> 00:19:51,410
with any JMS provider though a kyurem

00:19:50,150 --> 00:19:53,780
queue is just the one that they they

00:19:51,410 --> 00:19:55,520
tend to use for demos and as I showed

00:19:53,780 --> 00:19:59,840
you you know it's compatible with other

00:19:55,520 --> 00:20:03,320
message buses and things as well okay

00:19:59,840 --> 00:20:06,170
message Anatomy so camel is based around

00:20:03,320 --> 00:20:09,920
messages it's very similar to the

00:20:06,170 --> 00:20:11,090
anatomy of a JMS message that's that's

00:20:09,920 --> 00:20:14,180
kind of how it represents things

00:20:11,090 --> 00:20:19,070
internally it's a normalized message

00:20:14,180 --> 00:20:22,700
router so that's not very surprising the

00:20:19,070 --> 00:20:25,430
normalized part is because they change

00:20:22,700 --> 00:20:27,290
patterns all operate with the same

00:20:25,430 --> 00:20:30,620
structure there's an end message there

00:20:27,290 --> 00:20:33,470
is an out message and a processor the

00:20:30,620 --> 00:20:36,470
message part is the fact the messages of

00:20:33,470 --> 00:20:38,360
the payload so messages can be anything

00:20:36,470 --> 00:20:40,790
camel doesn't even have to understand

00:20:38,360 --> 00:20:43,490
the contents of a message as long as

00:20:40,790 --> 00:20:45,110
you're not you know the processors might

00:20:43,490 --> 00:20:46,940
understand the contents of a message but

00:20:45,110 --> 00:20:50,570
fundamentally camel doesn't care what's

00:20:46,940 --> 00:20:52,730
in the message it's a payload so doesn't

00:20:50,570 --> 00:20:54,410
matter you know if it's it's something

00:20:52,730 --> 00:20:58,760
that you know camel doesn't understand

00:20:54,410 --> 00:21:00,370
you can still process it and here's kind

00:20:58,760 --> 00:21:03,290
of what the message structure looks like

00:21:00,370 --> 00:21:07,400
there's a message ID there's headers

00:21:03,290 --> 00:21:13,630
properties payload very similar to JMS

00:21:07,400 --> 00:21:16,460
messages embedded processors so camel

00:21:13,630 --> 00:21:20,090
contains a bunch of embedded script

00:21:16,460 --> 00:21:20,780
languages we saw the you know the spring

00:21:20,090 --> 00:21:23,420
DSL

00:21:20,780 --> 00:21:25,730
but it ain't contains a number of

00:21:23,420 --> 00:21:27,620
embedded script languages that you can

00:21:25,730 --> 00:21:31,100
use to create your own processors

00:21:27,620 --> 00:21:34,370
without even have to go outside a camel

00:21:31,100 --> 00:21:38,630
the simplest one ironically enough is

00:21:34,370 --> 00:21:41,780
called simple it's a very simple query

00:21:38,630 --> 00:21:45,410
language you can use it to introspect on

00:21:41,780 --> 00:21:47,150
message headers payloads properties it's

00:21:45,410 --> 00:21:51,260
very useful for routing messages based

00:21:47,150 --> 00:21:55,670
on their content it's limited to looking

00:21:51,260 --> 00:21:59,120
up you know contents of those different

00:21:55,670 --> 00:22:00,440
message pieces it can do some amount of

00:21:59,120 --> 00:22:02,900
filtering

00:22:00,440 --> 00:22:04,330
it can do operations but only single

00:22:02,900 --> 00:22:08,480
operations it's not a full-fledged

00:22:04,330 --> 00:22:11,600
expression language it is limited but it

00:22:08,480 --> 00:22:12,770
makes it extremely simple to read quick

00:22:11,600 --> 00:22:16,730
to implement if you're just trying to

00:22:12,770 --> 00:22:20,120
filter on something simple it's great a

00:22:16,730 --> 00:22:22,670
little bit more complex XPath so you saw

00:22:20,120 --> 00:22:26,120
in the POJO Java example there was a

00:22:22,670 --> 00:22:28,760
XPath query language option you can use

00:22:26,120 --> 00:22:31,520
XPath to reverse xml structures inside

00:22:28,760 --> 00:22:32,600
your messages if they're xml messages as

00:22:31,520 --> 00:22:35,030
much as you want

00:22:32,600 --> 00:22:36,980
so full-featured XPath you can filter

00:22:35,030 --> 00:22:39,950
based on anything you normally filter on

00:22:36,980 --> 00:22:44,450
an XPath make decisions based on the

00:22:39,950 --> 00:22:46,340
next path query JSON path same thing but

00:22:44,450 --> 00:22:50,060
for JSON structured messages so if your

00:22:46,340 --> 00:22:51,140
messages contain JSON a go you know have

00:22:50,060 --> 00:22:53,080
fun with that

00:22:51,140 --> 00:22:56,000
they you can filter based on that too

00:22:53,080 --> 00:22:58,460
groovy as well so groovy is also another

00:22:56,000 --> 00:23:01,250
scripting language available for camel

00:22:58,460 --> 00:23:02,900
and you can do pretty much anything you

00:23:01,250 --> 00:23:05,210
want with that because it's groovy and

00:23:02,900 --> 00:23:06,620
it's fully featured and you can do

00:23:05,210 --> 00:23:09,560
pretty much anything you need to with

00:23:06,620 --> 00:23:11,420
that you can also use javascript so if

00:23:09,560 --> 00:23:14,540
you want to run JavaScript inside of

00:23:11,420 --> 00:23:16,220
your camel you can do that you can write

00:23:14,540 --> 00:23:19,460
your own processors in JavaScript to not

00:23:16,220 --> 00:23:22,730
even have a compile step and you know

00:23:19,460 --> 00:23:24,620
you're good to go so I'm going to do a

00:23:22,730 --> 00:23:25,790
quick demo here of a content-based

00:23:24,620 --> 00:23:27,620
router

00:23:25,790 --> 00:23:29,840
we'll use the simple query language

00:23:27,620 --> 00:23:32,030
change respect to JMS header in a

00:23:29,840 --> 00:23:34,220
message and route it to a destination

00:23:32,030 --> 00:23:36,830
based on the contents of that header

00:23:34,220 --> 00:23:39,140
we'll use camel to plot deployed

00:23:36,830 --> 00:23:41,480
directly into ActiveMQ xmq actually is

00:23:39,140 --> 00:23:44,090
bundled with the camel corps

00:23:41,480 --> 00:23:45,950
distribution it's already embedded in

00:23:44,090 --> 00:23:48,230
the academic you distribution that you

00:23:45,950 --> 00:23:52,360
download so we're going to use a clean

00:23:48,230 --> 00:23:56,110
activemq in full from scratch and let's

00:23:52,360 --> 00:23:56,110
get that up here

00:23:57,750 --> 00:24:11,160
so I'm going to extract my clean

00:24:06,840 --> 00:24:14,060
ActiveMQ distribution here and then we

00:24:11,160 --> 00:24:14,060
all get to work on it

00:24:19,960 --> 00:24:26,110
okay so this is this is completely clean

00:24:23,100 --> 00:24:28,390
ActiveMQ 514 five is the latest version

00:24:26,110 --> 00:24:31,300
and if you look in the example

00:24:28,390 --> 00:24:34,300
configurations there is a camel XML here

00:24:31,300 --> 00:24:39,250
I'm going to copy that into the conf

00:24:34,300 --> 00:24:48,720
directory and then we have that already

00:24:39,250 --> 00:24:48,720
let's see let's give this up here and

00:24:49,260 --> 00:24:58,090
okay so here's our activemq XML I'm

00:24:53,410 --> 00:25:00,540
going to just add in a reference to

00:24:58,090 --> 00:25:00,540
camel

00:25:07,510 --> 00:25:15,010
and so now we've included our camel

00:25:10,180 --> 00:25:18,610
config file here now I'm going to open

00:25:15,010 --> 00:25:22,270
up the camel can say here and since I've

00:25:18,610 --> 00:25:23,560
already done this I'm going to just

00:25:22,270 --> 00:25:31,450
paste it in because I think we're

00:25:23,560 --> 00:25:34,660
running a little low on time here we go

00:25:31,450 --> 00:25:34,660
[Music]

00:25:35,280 --> 00:25:43,000
okay so what I'm going to do here is

00:25:39,180 --> 00:25:44,890
let's see I'm going to change the broker

00:25:43,000 --> 00:25:49,720
URL so the broker I'm connecting to I'm

00:25:44,890 --> 00:25:53,590
going to connect to localhost and then

00:25:49,720 --> 00:25:56,050
over here there is a example route in

00:25:53,590 --> 00:26:00,190
here already it just knows sends

00:25:56,050 --> 00:26:04,690
messages that are in a queue a on our

00:26:00,190 --> 00:26:06,160
activemq instance 2qb so instead I'm

00:26:04,690 --> 00:26:10,900
going to do something a little fancier

00:26:06,160 --> 00:26:12,640
with a content-based router and with

00:26:10,900 --> 00:26:15,730
this content-based router I'm calling it

00:26:12,640 --> 00:26:17,830
CV RQ it's content-based router it is

00:26:15,730 --> 00:26:21,000
going to filter there's a choice

00:26:17,830 --> 00:26:24,070
structure in the spring DSL for camel

00:26:21,000 --> 00:26:27,460
this choice structure is kind of your

00:26:24,070 --> 00:26:29,980
if-then-else for camel you can't you

00:26:27,460 --> 00:26:31,900
have wind clauses I'm using the simple

00:26:29,980 --> 00:26:35,980
query language here that we talked about

00:26:31,900 --> 00:26:39,580
I'm filtering on my JMS type header so

00:26:35,980 --> 00:26:44,740
the type for the message and I'm looking

00:26:39,580 --> 00:26:47,950
if to see if it's type 1 type 2 or fall

00:26:44,740 --> 00:26:50,920
through and otherwise then depending on

00:26:47,950 --> 00:26:52,570
which type it is I'm going to either - I

00:26:50,920 --> 00:26:55,660
have another - statement in here and

00:26:52,570 --> 00:26:59,230
this - statement is either going to send

00:26:55,660 --> 00:27:02,530
that message along to type 1 QQ type 2 Q

00:26:59,230 --> 00:27:05,500
or exception Q so let's go ahead and

00:27:02,530 --> 00:27:11,970
save this here and then I will start up

00:27:05,500 --> 00:27:11,970
ActiveMQ and let's say you here

00:27:14,760 --> 00:27:19,690
so if you look here this is a plain

00:27:17,950 --> 00:27:21,850
vanila ActiveMQ insulation I've done

00:27:19,690 --> 00:27:27,670
nothing to other than editing those two

00:27:21,850 --> 00:27:32,260
files and of course my syntax is off so

00:27:27,670 --> 00:27:33,730
I will fix that here so what happens

00:27:32,260 --> 00:27:37,600
when you paste in looking over your

00:27:33,730 --> 00:27:43,450
shoulder let's see so let's try that

00:27:37,600 --> 00:27:47,440
again so we're waiting here for ActiveMQ

00:27:43,450 --> 00:27:50,590
to start up camel if you recall is

00:27:47,440 --> 00:27:52,720
actually the core is built in to the

00:27:50,590 --> 00:27:55,330
ActiveMQ distribution so I didn't have

00:27:52,720 --> 00:27:57,490
to add anything else to this it already

00:27:55,330 --> 00:28:08,110
has this just said to make a camel

00:27:57,490 --> 00:28:14,140
config file okay so starting up and then

00:28:08,110 --> 00:28:18,210
I look over here see wait for it to

00:28:14,140 --> 00:28:18,210
start up almost started

00:28:28,320 --> 00:28:39,070
lochia okay getting there take a little

00:28:34,900 --> 00:28:42,300
while to start up and as soon as this

00:28:39,070 --> 00:28:45,970
starts up here okay now we have our

00:28:42,300 --> 00:28:48,520
academic you console so what we can see

00:28:45,970 --> 00:28:51,280
here this is just the default acumen cue

00:28:48,520 --> 00:28:56,080
console it's running on port 80 161 on

00:28:51,280 --> 00:28:59,800
my machine can open up my ax mq broker I

00:28:56,080 --> 00:29:03,340
see because camels here and I set up

00:28:59,800 --> 00:29:05,260
those queues it already has a CV RQ so

00:29:03,340 --> 00:29:07,809
as you can see there's nothing in it

00:29:05,260 --> 00:29:10,960
right now there are a couple consumers

00:29:07,809 --> 00:29:13,300
those were based on those those two

00:29:10,960 --> 00:29:15,490
processors that I implemented there in

00:29:13,300 --> 00:29:17,260
the one clause so there's not no

00:29:15,490 --> 00:29:21,520
messages in here right now if I want to

00:29:17,260 --> 00:29:24,640
I can send a message I'm going to make

00:29:21,520 --> 00:29:28,540
my message type one here and I'm going

00:29:24,640 --> 00:29:30,970
to send it into my CV RQ okay so went

00:29:28,540 --> 00:29:33,580
through now if i refresh here I now have

00:29:30,970 --> 00:29:36,700
a type 1 queue and inside that queue I

00:29:33,580 --> 00:29:41,550
have my message so camel just routed

00:29:36,700 --> 00:29:45,130
that message for me and let's see here

00:29:41,550 --> 00:29:46,960
gained that and actually I can see it in

00:29:45,130 --> 00:29:52,390
the console as well so I send that

00:29:46,960 --> 00:29:55,960
message in and it let's see I don't have

00:29:52,390 --> 00:29:59,440
debug down but yeah so anyways you can

00:29:55,960 --> 00:30:06,940
see that if I go into queues and I send

00:29:59,440 --> 00:30:12,150
here I can do a type 2 message that will

00:30:06,940 --> 00:30:12,150
end up in my type to queue I have

00:30:13,080 --> 00:30:18,790
message of some random type that ends up

00:30:15,940 --> 00:30:21,780
in my exception queue so that's that's

00:30:18,790 --> 00:30:25,170
pretty straightforward there let's see

00:30:21,780 --> 00:30:31,090
how am i doing on time here

00:30:25,170 --> 00:30:34,960
pretty good okay let's go back to the

00:30:31,090 --> 00:30:38,140
slide deck here okay

00:30:34,960 --> 00:30:40,929
camel deployment camel can be deployed

00:30:38,140 --> 00:30:42,220
in a bunch of different ways it can be

00:30:40,929 --> 00:30:44,789
redeployed as part of a

00:30:42,220 --> 00:30:47,260
a web app using spring or POJO

00:30:44,789 --> 00:30:50,020
stand-alone camel routes can be deployed

00:30:47,260 --> 00:30:53,260
using maven and camel so you can you can

00:30:50,020 --> 00:30:55,780
deploy with maven spring boot can launch

00:30:53,260 --> 00:30:58,929
camel routes it can be embedded in other

00:30:55,780 --> 00:31:01,690
Java applications it can be embedded

00:30:58,929 --> 00:31:05,140
within dedi tomcat JBoss wildfly

00:31:01,690 --> 00:31:07,210
whatever you want action queue contains

00:31:05,140 --> 00:31:08,860
the camel core libraries like I

00:31:07,210 --> 00:31:11,799
mentioned so you can launch and deploy

00:31:08,860 --> 00:31:13,390
camel routes right active that the right

00:31:11,799 --> 00:31:16,630
out of the standard ActiveMQ

00:31:13,390 --> 00:31:20,710
distribution OSGi containers like carafe

00:31:16,630 --> 00:31:25,200
or serves max which includes a qmq camel

00:31:20,710 --> 00:31:29,700
and cxf can also launch camel realms

00:31:25,200 --> 00:31:32,440
major IDs like eclipse and out IntelliJ

00:31:29,700 --> 00:31:34,630
actually it can allow you to exceed the

00:31:32,440 --> 00:31:37,090
routes within the ID there are

00:31:34,630 --> 00:31:40,650
comprehensive in line tools as of kampl

00:31:37,090 --> 00:31:44,020
camel 2.16 that you can auto complete

00:31:40,650 --> 00:31:46,750
list any parameter available on these

00:31:44,020 --> 00:31:48,100
different different components so you

00:31:46,750 --> 00:31:48,970
know here's an example of a file

00:31:48,100 --> 00:31:51,309
component

00:31:48,970 --> 00:31:53,799
here's autocomplete you know how often

00:31:51,309 --> 00:31:58,419
you want to check that file location at

00:31:53,799 --> 00:32:02,770
what time unit if you're logging level

00:31:58,419 --> 00:32:04,750
scheduler etc icy hot io is probably the

00:32:02,770 --> 00:32:07,240
easiest and quickest way to prototype

00:32:04,750 --> 00:32:08,710
with camel though lets you do visual

00:32:07,240 --> 00:32:11,320
debugging of routes I kind of showed you

00:32:08,710 --> 00:32:13,960
an example that earlier tracing the

00:32:11,320 --> 00:32:16,240
message lifecycle and lets you diagram

00:32:13,960 --> 00:32:17,770
your development as well as monitoring

00:32:16,240 --> 00:32:21,190
so when you have an active system

00:32:17,770 --> 00:32:22,659
running camel you can run hot io and see

00:32:21,190 --> 00:32:25,630
any of these routes we've created it

00:32:22,659 --> 00:32:32,789
using this spring DSL this is an example

00:32:25,630 --> 00:32:37,929
here so let's see that's here yep so I

00:32:32,789 --> 00:32:40,140
will do a quick demo of that get this up

00:32:37,929 --> 00:32:40,140
and running

00:32:45,620 --> 00:32:48,520
there we go

00:32:50,480 --> 00:32:55,970
so I'm going to run a new terminal here

00:32:53,150 --> 00:32:58,450
I already have hot IO in here so I'm

00:32:55,970 --> 00:33:00,820
you're just going to run it Java jar

00:32:58,450 --> 00:33:07,030
let's see

00:33:00,820 --> 00:33:07,030
get it in here let's check yeah

00:33:13,910 --> 00:33:17,320
why is an O

00:33:24,070 --> 00:33:30,759
there we go so I'm starting up hot io

00:33:27,100 --> 00:33:32,080
now and this takes a little while and as

00:33:30,759 --> 00:33:39,570
soon as it starts it's going to auto

00:33:32,080 --> 00:33:39,570
launch a web console here

00:33:45,910 --> 00:33:51,640
let's see so hot I Oh is great I'm not

00:33:48,520 --> 00:33:54,550
if you haven't used it before it loves

00:33:51,640 --> 00:33:58,230
you introspect on JMX you can view your

00:33:54,550 --> 00:34:01,840
ActiveMQ instances and queues and

00:33:58,230 --> 00:34:07,360
wonderfully it lets you view your camel

00:34:01,840 --> 00:34:11,730
routes graphically as soon as it comes

00:34:07,360 --> 00:34:17,190
up here okay here we go

00:34:11,730 --> 00:34:17,190
so still kind of coming up here but

00:34:20,669 --> 00:34:24,729
good

00:34:21,659 --> 00:34:24,729
[Music]

00:34:34,420 --> 00:34:37,440
slow bit slow

00:34:45,590 --> 00:34:52,700
okay so here's hotteok so as you can see

00:34:49,880 --> 00:34:56,180
in here this is our local acts mq

00:34:52,700 --> 00:34:58,670
instance it has all of our cues that are

00:34:56,180 --> 00:35:01,250
in the instance right here this is great

00:34:58,670 --> 00:35:05,060
for if you ever are running action MQ

00:35:01,250 --> 00:35:08,270
you can debug what's going on you can

00:35:05,060 --> 00:35:12,110
see you know it's much nicer looking

00:35:08,270 --> 00:35:16,160
than the axiom cue wet built-in web

00:35:12,110 --> 00:35:18,830
console a little fancier and stuff see

00:35:16,160 --> 00:35:21,950
diagrams here of what L is going on with

00:35:18,830 --> 00:35:24,110
your academic use but what you can do in

00:35:21,950 --> 00:35:26,840
here is if you go to the camel tab over

00:35:24,110 --> 00:35:30,200
here it has a diagram of the route we

00:35:26,840 --> 00:35:33,020
just made in our XML so what we can see

00:35:30,200 --> 00:35:36,170
here is you know we have our CBR cue

00:35:33,020 --> 00:35:38,840
input we have a choice statement here it

00:35:36,170 --> 00:35:40,460
tells us that three messages have

00:35:38,840 --> 00:35:42,200
already gone through and you can I can

00:35:40,460 --> 00:35:44,570
even see the message statistics of how

00:35:42,200 --> 00:35:47,870
long they took to process about seven

00:35:44,570 --> 00:35:49,370
milliseconds here and then the three

00:35:47,870 --> 00:35:53,450
different outputs here were you know we

00:35:49,370 --> 00:35:57,440
have choice or when clauses based on the

00:35:53,450 --> 00:35:59,630
three different simple filters we're

00:35:57,440 --> 00:36:02,930
looking for type 1 type 2 or our

00:35:59,630 --> 00:36:05,150
otherwise fall through and we can see

00:36:02,930 --> 00:36:07,640
here we had three messages go through

00:36:05,150 --> 00:36:11,210
the choice block and one ended up in

00:36:07,640 --> 00:36:14,210
each of the the two two blocks here now

00:36:11,210 --> 00:36:20,090
what's really neat here is I can debug

00:36:14,210 --> 00:36:28,490
this so I can go right here and we're

00:36:20,090 --> 00:36:32,720
debug here where to go oh there it is

00:36:28,490 --> 00:36:35,650
yep so start debugging I'm going to add

00:36:32,720 --> 00:36:38,330
a breakpoint on my choice block here so

00:36:35,650 --> 00:36:42,230
you see a little dot shows up there at a

00:36:38,330 --> 00:36:45,710
breakpoint let me send another message

00:36:42,230 --> 00:36:48,890
into my cue here another type one

00:36:45,710 --> 00:36:52,910
message and obviously this would work

00:36:48,890 --> 00:36:56,990
for much more complex change as well so

00:36:52,910 --> 00:36:59,700
sent one in now my debugger has stopped

00:36:56,990 --> 00:37:02,760
on my breakpoint and I now see that

00:36:59,700 --> 00:37:04,109
this message and its name is kind of

00:37:02,760 --> 00:37:06,270
funny because I haven't really been

00:37:04,109 --> 00:37:09,510
doing anything nice with the names like

00:37:06,270 --> 00:37:12,089
I do in a real application it has the

00:37:09,510 --> 00:37:16,109
message I just sent now if I want I can

00:37:12,089 --> 00:37:17,760
step into it so now I'm M the choice and

00:37:16,109 --> 00:37:20,160
then actually there's only one step here

00:37:17,760 --> 00:37:23,400
so ends up in two so it just showed me

00:37:20,160 --> 00:37:28,050
that that message ended up in my my

00:37:23,400 --> 00:37:31,109
first to Klaus filtered on type 1 if I

00:37:28,050 --> 00:37:38,880
do another message here it will do the

00:37:31,109 --> 00:37:40,500
same thing say type of something else so

00:37:38,880 --> 00:37:48,119
it should end up in the exception queue

00:37:40,500 --> 00:37:50,099
and right here let's say start and okay

00:37:48,119 --> 00:37:52,260
so here's my next message so I've gotten

00:37:50,099 --> 00:37:57,000
four messages to this choice block here

00:37:52,260 --> 00:37:59,430
I can view the message down here and you

00:37:57,000 --> 00:38:02,760
go ahead and let it go through and now I

00:37:59,430 --> 00:38:06,470
have two messages down here so I can I'm

00:38:02,760 --> 00:38:11,640
going to disable this breakpoint now and

00:38:06,470 --> 00:38:12,859
so we're done debugging now what's

00:38:11,640 --> 00:38:15,690
really cool here

00:38:12,859 --> 00:38:24,569
additionally is there's also this trace

00:38:15,690 --> 00:38:25,980
function lost my cursor here and it's

00:38:24,569 --> 00:38:27,810
not showing here because the monitor is

00:38:25,980 --> 00:38:30,329
a little too small but I have traced

00:38:27,810 --> 00:38:32,460
right here so I can start tracing and

00:38:30,329 --> 00:38:40,170
what I can do I can just send anything

00:38:32,460 --> 00:38:42,089
into here and let's do type two here now

00:38:40,170 --> 00:38:50,069
so I did that now the trace function

00:38:42,089 --> 00:38:53,599
here should show me the trace looks like

00:38:50,069 --> 00:38:53,599
I'm having some issues based on the

00:38:53,690 --> 00:39:01,369
screen size here what that should be

00:38:58,680 --> 00:39:01,369
doing here

00:39:06,110 --> 00:39:09,710
yeah for some reason it's not working

00:39:07,580 --> 00:39:11,600
with the screen size it wants a larger

00:39:09,710 --> 00:39:14,180
screen size normally what you'd be

00:39:11,600 --> 00:39:17,210
seeing here is a really cool trace of

00:39:14,180 --> 00:39:20,960
the messages in flight on each step of

00:39:17,210 --> 00:39:23,240
this route so you'd see it come in to

00:39:20,960 --> 00:39:27,200
the CVR queue you'd see the choice block

00:39:23,240 --> 00:39:31,430
you'd see it hit the filter for type 2

00:39:27,200 --> 00:39:37,010
and then you'd see it end up in the type

00:39:31,430 --> 00:39:44,570
2 Q but it's not like in the screen size

00:39:37,010 --> 00:39:45,470
right now so it's not showing that let's

00:39:44,570 --> 00:39:49,100
see

00:39:45,470 --> 00:39:50,780
to continue on here so I think we're

00:39:49,100 --> 00:39:53,960
running low on time

00:39:50,780 --> 00:39:56,300
kamo laundering camel has a bunch of JMX

00:39:53,960 --> 00:39:57,380
information instrumentation beans they

00:39:56,300 --> 00:39:59,210
can be looked at to gain more

00:39:57,380 --> 00:40:02,120
information on the route as you could

00:39:59,210 --> 00:40:04,400
see in hot io it tracks things light

00:40:02,120 --> 00:40:06,980
latency maximum time minimum time

00:40:04,400 --> 00:40:10,160
average time on how how your routes are

00:40:06,980 --> 00:40:12,230
doing any JMX capable enterprise

00:40:10,160 --> 00:40:13,400
monitoring solution is good fit for

00:40:12,230 --> 00:40:17,090
monitoring this so if you're

00:40:13,400 --> 00:40:20,840
implementing your routes in camel you

00:40:17,090 --> 00:40:22,700
can monitor what your load is like you

00:40:20,840 --> 00:40:27,170
know here's here's an example just

00:40:22,700 --> 00:40:29,780
looking with big visual VM looking into

00:40:27,170 --> 00:40:33,110
the different you know statistics

00:40:29,780 --> 00:40:35,420
available for each route and actually I

00:40:33,110 --> 00:40:38,440
jumped the gun here I went and did that

00:40:35,420 --> 00:40:41,480
hot a on camel demo there I showed you

00:40:38,440 --> 00:40:43,670
setting breakpoints inspecting message

00:40:41,480 --> 00:40:46,040
at that breakpoint and the trace

00:40:43,670 --> 00:40:48,770
function which I guess you need a

00:40:46,040 --> 00:40:53,810
slightly larger resolution monitor to

00:40:48,770 --> 00:40:56,180
view that effectively in conclusion this

00:40:53,810 --> 00:41:01,640
is just like scraping the surface of

00:40:56,180 --> 00:41:04,520
camel we only used one processor and one

00:41:01,640 --> 00:41:08,450
message source we're only using academic

00:41:04,520 --> 00:41:10,640
you here there's a bunch of powerful

00:41:08,450 --> 00:41:13,750
aggregation saturdays that you can use

00:41:10,640 --> 00:41:16,730
to combine large multi-threaded

00:41:13,750 --> 00:41:18,380
multi-process datasets together this is

00:41:16,730 --> 00:41:19,759
you know camel running on one instance

00:41:18,380 --> 00:41:23,029
if you had a truly

00:41:19,759 --> 00:41:25,789
large environment that you're trying to

00:41:23,029 --> 00:41:27,949
do this in process large numbers of

00:41:25,789 --> 00:41:29,779
messages that volume you might have more

00:41:27,949 --> 00:41:31,519
than one camel instance running across

00:41:29,779 --> 00:41:33,799
your servers you know this is just kind

00:41:31,519 --> 00:41:36,999
of debugging here you might have a multi

00:41:33,799 --> 00:41:39,289
multi server farm message queue servers

00:41:36,999 --> 00:41:41,929
you know that messages are being

00:41:39,289 --> 00:41:44,239
ingested into with a farm of you know

00:41:41,929 --> 00:41:45,819
camel servers on your input and then

00:41:44,239 --> 00:41:48,349
more camel servers on your output

00:41:45,819 --> 00:41:50,539
depending but you know to get started

00:41:48,349 --> 00:41:53,209
you can run just action queue with its

00:41:50,539 --> 00:41:54,919
embedded camel instance it has all sorts

00:41:53,209 --> 00:41:59,449
of capabilities for message

00:41:54,919 --> 00:42:03,559
transformation using s XLT velocity free

00:41:59,449 --> 00:42:06,709
marker more advanced foreign conversion

00:42:03,559 --> 00:42:08,239
libraries like Pio I or PDF box you know

00:42:06,709 --> 00:42:10,249
this is all kind of out of the box for

00:42:08,239 --> 00:42:13,099
camel and you can make your own as well

00:42:10,249 --> 00:42:15,079
and the best thing is just start playing

00:42:13,099 --> 00:42:20,359
with it it's really easy to play with

00:42:15,079 --> 00:42:22,519
you saw the XML the spring DSL and yeah

00:42:20,359 --> 00:42:24,079
it takes literally two minutes to get

00:42:22,519 --> 00:42:26,149
get going with it you just download

00:42:24,079 --> 00:42:28,639
acting and cue start playing with it

00:42:26,149 --> 00:42:31,609
download audio separately if you want to

00:42:28,639 --> 00:42:33,889
see things visually the camel community

00:42:31,609 --> 00:42:36,559
is pretty active and friendly they have

00:42:33,889 --> 00:42:40,099
an IRC channel on freenode and of course

00:42:36,559 --> 00:42:42,349
the community page and that's camel um

00:42:40,099 --> 00:42:45,079
does anyone have any questions or

00:42:42,349 --> 00:42:46,059
anything about camel I can view anything

00:42:45,079 --> 00:42:52,399
else

00:42:46,059 --> 00:42:57,919
yes um so it's it's a little bit

00:42:52,399 --> 00:43:00,380
different just in terms of it I haven't

00:42:57,919 --> 00:43:02,149
used bring an iteration as much but it's

00:43:00,380 --> 00:43:03,799
it's meant to be a kind of a

00:43:02,149 --> 00:43:05,959
self-contained integration pattern

00:43:03,799 --> 00:43:07,189
library so you can do in input and

00:43:05,959 --> 00:43:09,889
output from anything it's supposed to be

00:43:07,189 --> 00:43:13,279
infinitely flexible you could use along

00:43:09,889 --> 00:43:17,259
with that I'm sure do you have this

00:43:13,279 --> 00:43:17,259
specific use case you're looking for

00:43:17,499 --> 00:43:20,499
okay

00:43:25,970 --> 00:43:30,960
yes and actually I'd say I think I'd

00:43:29,610 --> 00:43:32,190
have to look I don't remember a spring

00:43:30,960 --> 00:43:33,660
an integration actually does anything

00:43:32,190 --> 00:43:36,330
with camel

00:43:33,660 --> 00:43:50,730
I don't remember it's been a while since

00:43:36,330 --> 00:44:23,400
I've touched it yes well you can you can

00:43:50,730 --> 00:44:26,250
write pojos with camel yeah yes well yes

00:44:23,400 --> 00:44:27,690
so that the nice thing about camel and

00:44:26,250 --> 00:44:29,490
it's kind of like that you know actually

00:44:27,690 --> 00:44:31,530
interior things as you gain more load

00:44:29,490 --> 00:44:34,680
you you add more servers you expand

00:44:31,530 --> 00:44:36,900
horizontally is since everything is

00:44:34,680 --> 00:44:38,910
messages it should be fairly easy to do

00:44:36,900 --> 00:44:40,650
that that's why you've camel routes that

00:44:38,910 --> 00:44:52,070
allow you to do things like load balance

00:44:40,650 --> 00:44:52,070
and things like that um yeah

00:44:58,110 --> 00:45:01,169
[Music]

00:45:05,340 --> 00:45:10,480
so what hot i/o is actually doing is

00:45:08,140 --> 00:45:13,420
it's just looking at the JMX parameters

00:45:10,480 --> 00:45:17,530
available to camel so can't camels keeps

00:45:13,420 --> 00:45:20,080
track of your message processing time in

00:45:17,530 --> 00:45:23,020
flight time your averages your maxes all

00:45:20,080 --> 00:45:25,200
of that hot io provides a very nice

00:45:23,020 --> 00:45:27,880
interface to view that graphically

00:45:25,200 --> 00:45:29,380
whereas you know oftentimes if you had

00:45:27,880 --> 00:45:31,660
that you know you might have a framework

00:45:29,380 --> 00:45:34,930
that has a bunch of JMX available to it

00:45:31,660 --> 00:45:36,970
but you know it's relatively opaque I

00:45:34,930 --> 00:45:38,260
mean yes you can go and view it but it's

00:45:36,970 --> 00:45:38,410
not going to show all this stuff you

00:45:38,260 --> 00:45:40,690
know

00:45:38,410 --> 00:45:42,190
hey what's what's my route doing and

00:45:40,690 --> 00:45:43,660
then you know just see you know be able

00:45:42,190 --> 00:45:44,890
to trace through you actually have to

00:45:43,660 --> 00:45:45,850
start looking through all the names and

00:45:44,890 --> 00:45:49,450
all that hot IO

00:45:45,850 --> 00:45:51,220
presents it graphically so it's very

00:45:49,450 --> 00:45:53,410
nice for being able to drill down your

00:45:51,220 --> 00:45:55,510
routes and you're processing chains and

00:45:53,410 --> 00:45:57,700
see where your bottlenecks are and then

00:45:55,510 --> 00:46:00,340
you can optimize it better as you kind

00:45:57,700 --> 00:46:04,780
of saw as eyes let me bring up hata yoga

00:46:00,340 --> 00:46:07,390
in here and yeah so if you saw on this

00:46:04,780 --> 00:46:10,870
like when I'm just moused over here it's

00:46:07,390 --> 00:46:14,530
telling me what my my mean men max and

00:46:10,870 --> 00:46:17,170
last processing time was now the max and

00:46:14,530 --> 00:46:20,380
mean here and stuff is is crazy high

00:46:17,170 --> 00:46:21,580
because I was tracing it so I I was

00:46:20,380 --> 00:46:23,950
doing some interesting stuff here but

00:46:21,580 --> 00:46:26,260
it's very easy you can connect this to

00:46:23,950 --> 00:46:27,520
any system it's pretty simple you want

00:46:26,260 --> 00:46:29,740
you don't want to run trace on

00:46:27,520 --> 00:46:31,030
production but if you just want to start

00:46:29,740 --> 00:46:33,400
looking into your routes and their

00:46:31,030 --> 00:46:34,570
statistics and say like hey at this

00:46:33,400 --> 00:46:36,430
point in the route you know my

00:46:34,570 --> 00:46:38,200
processing time is this it's looking

00:46:36,430 --> 00:46:40,840
like this you know I can start looking

00:46:38,200 --> 00:46:42,370
at that very quickly to drill down you

00:46:40,840 --> 00:46:45,840
know you mentioned performance concerns

00:46:42,370 --> 00:46:47,800
and when I going to scale so this

00:46:45,840 --> 00:46:50,320
graphically is very simple way to do

00:46:47,800 --> 00:46:52,120
that once you get more established in

00:46:50,320 --> 00:46:54,370
what processing you're doing obviously

00:46:52,120 --> 00:46:56,620
you'd probably end up integrating that

00:46:54,370 --> 00:46:58,270
into your own jmx monitoring solutions

00:46:56,620 --> 00:47:01,420
monitoring the routes that you normally

00:46:58,270 --> 00:47:03,370
run but you know as you're prototyping

00:47:01,420 --> 00:47:06,150
and trying to determine your load this

00:47:03,370 --> 00:47:06,150
is very useful

00:47:07,210 --> 00:47:14,600
so other questions see I think we're

00:47:14,050 --> 00:47:19,190
good yeah

00:47:14,600 --> 00:47:19,190

YouTube URL: https://www.youtube.com/watch?v=7r183fGwllg


