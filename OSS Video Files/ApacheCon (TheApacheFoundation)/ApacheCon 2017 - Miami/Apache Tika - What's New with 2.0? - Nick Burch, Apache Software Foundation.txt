Title: Apache Tika - What's New with 2.0? - Nick Burch, Apache Software Foundation
Publication date: 2017-05-18
Playlist: ApacheCon 2017 - Miami
Description: 
	Apache Tika - What's New with 2.0? - Nick Burch, Apache Software Foundation

Apache Tika detects and extracts metadata and text from a huge range of file formats and types. From Search to Big Data, single file to internet scale, if you've got files, Tika can help you get out useful information!

Apache Tika has been around for nearly 10 years now, and with the passage of all that time, plus the new 2.0 release, a lot has changed. Not only has there been a huge increase in the number of supported formats, but the ways of using Tika have expanded, and some of the philosophies on the best way to handle things have altered with experience. Tika has gained support for a wide range of programming languages to, and more recently, Big-Data scale support.

Whether you're an old-hand with Tika looking to know what's hot or different with 2.0, or someone new looking to learn more about the power of Tika, this talk will have something in it for you!

About Nick Burch
Nick began contributing to Apache projects in 2003, and hasn't looked back since! He's mostly involved in "Content" projects like Apache POI, Apache Tika and Apache Chemistry, as well as foundation-wide activities like Conferences and Travel Assistance.

Nick is CTO at Quanticate, a Clinical Research Organisation (CRO) with a strong focus on data and statistics.

Nick has spoken at most ApacheCons since 2007, and as well as many industry events on Apache topics + others.
Captions: 
	00:00:00,000 --> 00:00:05,339
okay and so I can get a sense of which

00:00:02,850 --> 00:00:10,759
bits to focus on and which bits to skip

00:00:05,339 --> 00:00:15,809
over and Hugh here has used tika before

00:00:10,759 --> 00:00:17,279
okay and just so you all know hands up

00:00:15,809 --> 00:00:19,560
if you're currently a committer on tika

00:00:17,279 --> 00:00:23,609
so you know who to bug afterwards

00:00:19,560 --> 00:00:25,710
against and I'm for you guys using TK

00:00:23,609 --> 00:00:27,390
would you say hands up if you feel

00:00:25,710 --> 00:00:32,099
you're kind of an advanced user on the

00:00:27,390 --> 00:00:33,450
latest stuff okay right so I'll try and

00:00:32,099 --> 00:00:35,309
focus a bit more on some of the new

00:00:33,450 --> 00:00:37,140
things we've put in and some of the

00:00:35,309 --> 00:00:40,020
changes with making some of the things

00:00:37,140 --> 00:00:46,890
that we are about to break on to all

00:00:40,020 --> 00:00:48,899
that sort of stuff so and TK we kind of

00:00:46,890 --> 00:00:51,480
like to think of it as a Babel Fish for

00:00:48,899 --> 00:00:54,420
content help you figure out what the

00:00:51,480 --> 00:00:56,489
hell this file is then how to get some

00:00:54,420 --> 00:00:59,160
metadata rel how to get some text out

00:00:56,489 --> 00:01:01,859
and how to avoid the complexity that

00:00:59,160 --> 00:01:04,110
normally goes along with getting useful

00:01:01,859 --> 00:01:07,799
stuff out of hundred different kinds of

00:01:04,110 --> 00:01:11,130
files and Kiki's been in news recently

00:01:07,799 --> 00:01:15,960
so Panama papers hopefully everyone

00:01:11,130 --> 00:01:19,049
heard about those some nods yeah so the

00:01:15,960 --> 00:01:22,229
guys who did all the investigation on

00:01:19,049 --> 00:01:24,479
the Panama papers use tika for their

00:01:22,229 --> 00:01:27,390
text message a tree extraction they used

00:01:24,479 --> 00:01:30,030
Apache Solr for the indexing and then

00:01:27,390 --> 00:01:33,180
they used neo4j for finding some of the

00:01:30,030 --> 00:01:35,159
links and it's really cool what we'd

00:01:33,180 --> 00:01:38,060
love is if they would share with us the

00:01:35,159 --> 00:01:40,020
most common stack traces of the failures

00:01:38,060 --> 00:01:42,600
but at the moment they're being a little

00:01:40,020 --> 00:01:45,930
bit sensitive even on that and then

00:01:42,600 --> 00:01:49,530
mimics is a DARPA funded project to try

00:01:45,930 --> 00:01:52,470
and increase the ability of indexing and

00:01:49,530 --> 00:01:55,229
finding things on the dark web and I

00:01:52,470 --> 00:01:57,509
think what they thought they were buying

00:01:55,229 --> 00:01:59,640
in the procurement and what they

00:01:57,509 --> 00:02:01,049
actually got aren't quite the same so

00:01:59,640 --> 00:02:03,000
there's been an awful lot of work on

00:02:01,049 --> 00:02:05,460
indexing new kinds of scientific data

00:02:03,000 --> 00:02:07,200
sets that definitely increases the

00:02:05,460 --> 00:02:08,750
percentage of the dark web index that

00:02:07,200 --> 00:02:10,679
maybe wasn't quite what they had in mind

00:02:08,750 --> 00:02:12,960
but there's also some really cool stuff

00:02:10,679 --> 00:02:17,310
that I mentioned later about

00:02:12,960 --> 00:02:20,940
to index videos and index images and

00:02:17,310 --> 00:02:23,520
work out what's in those and also need

00:02:20,940 --> 00:02:26,520
to shout out that tomorrow Tim is going

00:02:23,520 --> 00:02:29,490
to be talking a lot more on the ticket

00:02:26,520 --> 00:02:31,260
eval stuff which is on the whole did

00:02:29,490 --> 00:02:33,420
this get better or worse when I applied

00:02:31,260 --> 00:02:34,620
a patch so I'm going to skip some of the

00:02:33,420 --> 00:02:37,050
slides I would normally have done on

00:02:34,620 --> 00:02:39,810
that and direct you to go to Tim's talk

00:02:37,050 --> 00:02:42,870
or otherwise and at exactly the same

00:02:39,810 --> 00:02:44,880
time sadly we've got David North talking

00:02:42,870 --> 00:02:46,920
on some of the work that's been going on

00:02:44,880 --> 00:02:48,570
with Apache boy especially a lot of the

00:02:46,920 --> 00:02:52,460
work that Teague has been doing that's

00:02:48,570 --> 00:02:55,290
come back into POI to support it so

00:02:52,460 --> 00:02:59,070
first up a little bit of history why -

00:02:55,290 --> 00:03:00,930
Tiki even exists so who remembers

00:02:59,070 --> 00:03:05,340
building their own web spider from

00:03:00,930 --> 00:03:08,670
scratch in about 2003 2004 2005 it was

00:03:05,340 --> 00:03:10,920
awesome wasn't it and now how you'd kind

00:03:08,670 --> 00:03:13,020
of just go on some wiki and find the

00:03:10,920 --> 00:03:15,630
snippet of Java code that might or might

00:03:13,020 --> 00:03:17,790
not work with word and then you try and

00:03:15,630 --> 00:03:20,010
get it to compile on the right version

00:03:17,790 --> 00:03:22,440
of something and then you possibly like

00:03:20,010 --> 00:03:24,210
why I cannot find my slides you'd be

00:03:22,440 --> 00:03:26,340
like well because that's PowerPoint and

00:03:24,210 --> 00:03:28,560
that's different and there was just

00:03:26,340 --> 00:03:31,590
there just like snippets of code on

00:03:28,560 --> 00:03:34,110
mailing list posts and on wiki's some of

00:03:31,590 --> 00:03:37,800
them relating to leucine and old bugs

00:03:34,110 --> 00:03:39,840
and it was just absolute nightmare and

00:03:37,800 --> 00:03:42,270
alternately you could have gone out and

00:03:39,840 --> 00:03:44,460
bought something for a massive pile of

00:03:42,270 --> 00:03:46,590
cash that would have fallen over quite a

00:03:44,460 --> 00:03:48,810
lot and not scaled and probably had most

00:03:46,590 --> 00:03:51,480
of the same bugs in and so there's a lot

00:03:48,810 --> 00:03:55,400
of reinventing of the wheel badly with

00:03:51,480 --> 00:03:57,990
three sides and yeah generally mess and

00:03:55,400 --> 00:04:01,290
to be approaching much project who were

00:03:57,990 --> 00:04:03,570
trying to do the web scale indexing and

00:04:01,290 --> 00:04:07,230
searching who also went on to invent to

00:04:03,570 --> 00:04:10,140
dupe and were just as fed up as everyone

00:04:07,230 --> 00:04:11,430
else with this state of affairs but they

00:04:10,140 --> 00:04:14,940
were in a slightly better position to

00:04:11,430 --> 00:04:18,239
fix it so they teamed up with the Apache

00:04:14,940 --> 00:04:21,900
License Group and took a lot of these

00:04:18,239 --> 00:04:24,870
snippets of round a bits of code and a

00:04:21,900 --> 00:04:26,460
bit of code from another project called

00:04:24,870 --> 00:04:29,970
Luis and then produce

00:04:26,460 --> 00:04:32,039
teeka as a way of hiding that complexity

00:04:29,970 --> 00:04:34,199
and having a stable place in subversion

00:04:32,039 --> 00:04:37,139
where you go to fix which is a lot

00:04:34,199 --> 00:04:41,220
easier than trying to post bug fix to a

00:04:37,139 --> 00:04:44,430
piece of code on a mailing list post so

00:04:41,220 --> 00:04:47,520
the project was founded in 2007 and went

00:04:44,430 --> 00:04:50,660
into the incubator graduated in 2008

00:04:47,520 --> 00:04:54,270
version one in 2011 and we're now in

00:04:50,660 --> 00:04:56,460
2017 six years later so project has

00:04:54,270 --> 00:04:58,139
moved on a long way in that time it's

00:04:56,460 --> 00:05:03,780
quite a lot of people out there we find

00:04:58,139 --> 00:05:05,669
she used tika not nine 101.1 and like

00:05:03,780 --> 00:05:07,410
cents is quite good doesn't quite do

00:05:05,669 --> 00:05:09,000
everything I need and then they

00:05:07,410 --> 00:05:11,940
sometimes come back to the projects and

00:05:09,000 --> 00:05:16,380
say what the hell has happened why is

00:05:11,940 --> 00:05:17,849
the jar file grown what do you call this

00:05:16,380 --> 00:05:20,360
stuff that's turned up so that's what

00:05:17,849 --> 00:05:23,039
I'm going to try and cover today and

00:05:20,360 --> 00:05:25,740
also if anyone knows how to get a really

00:05:23,039 --> 00:05:29,490
good graph in OpenOffice where one of

00:05:25,740 --> 00:05:30,990
the axes goes past 1.9 I'd love to know

00:05:29,490 --> 00:05:34,380
but this kind of gives you an idea of

00:05:30,990 --> 00:05:37,650
the the releases we've done they keep

00:05:34,380 --> 00:05:39,240
coming out 1.15 probably going to start

00:05:37,650 --> 00:05:42,030
in another day or two I think we've all

00:05:39,240 --> 00:05:43,620
agreed that the regressions are minor

00:05:42,030 --> 00:05:48,860
enough that we can go ahead and do that

00:05:43,620 --> 00:05:51,180
so maybe you'll see that next week so

00:05:48,860 --> 00:05:53,280
some of the supported formats you know

00:05:51,180 --> 00:05:55,409
we've got the usual kind of easy ones

00:05:53,280 --> 00:05:57,840
the text-based ones then we've got all

00:05:55,409 --> 00:06:00,539
the Microsoft Office ones we've got open

00:05:57,840 --> 00:06:02,310
document we've got a works we've got

00:06:00,539 --> 00:06:04,560
loads of compression formats we've got

00:06:02,310 --> 00:06:07,800
publishing formats we've got audio we've

00:06:04,560 --> 00:06:09,900
got image most of the things you're

00:06:07,800 --> 00:06:12,990
going to want to work with and its

00:06:09,900 --> 00:06:15,900
features detection working out what the

00:06:12,990 --> 00:06:17,340
hell's something is and so that can be

00:06:15,900 --> 00:06:19,440
based on the farm name it could be based

00:06:17,340 --> 00:06:21,240
on start of the file it can be based on

00:06:19,440 --> 00:06:24,169
opening the file up and peeking inside

00:06:21,240 --> 00:06:27,030
it and combining all those together you

00:06:24,169 --> 00:06:29,340
may say well surely I know what this

00:06:27,030 --> 00:06:32,340
file that I created on my computer is

00:06:29,340 --> 00:06:36,240
and you probably but not always be right

00:06:32,340 --> 00:06:40,210
as anyone who's dealt with a XLS file

00:06:36,240 --> 00:06:42,669
that had been renamed from a CSV a file

00:06:40,210 --> 00:06:45,060
one else created on your computer or

00:06:42,669 --> 00:06:48,400
created on your company shared drive

00:06:45,060 --> 00:06:52,840
less so a file from the internet

00:06:48,400 --> 00:06:54,490
probably no hope so we have to do this

00:06:52,840 --> 00:06:58,210
dissection to work out what this thing

00:06:54,490 --> 00:06:59,889
is and then you can do that just and

00:06:58,210 --> 00:07:01,690
alone so I know that some of the digital

00:06:59,889 --> 00:07:03,280
forensics people and also some of the

00:07:01,690 --> 00:07:05,710
people doing male scanning used to give

00:07:03,280 --> 00:07:08,259
that and they just say this thing that

00:07:05,710 --> 00:07:10,599
says it's a Word document is it a word

00:07:08,259 --> 00:07:14,380
document or a word document with macros

00:07:10,599 --> 00:07:17,530
or a screensaver and you can say well

00:07:14,380 --> 00:07:19,090
it's a Windows executable probably not

00:07:17,530 --> 00:07:21,580
what you wanted to pass through in this

00:07:19,090 --> 00:07:22,060
mail attachment so if you can use it for

00:07:21,580 --> 00:07:25,810
that

00:07:22,060 --> 00:07:26,860
and so metadata describing the file yeah

00:07:25,810 --> 00:07:28,960
who wrote it

00:07:26,860 --> 00:07:32,080
what's the title of it where was it

00:07:28,960 --> 00:07:35,409
created what location is it what is it

00:07:32,080 --> 00:07:37,509
describing and what teeka tries to do

00:07:35,409 --> 00:07:40,240
here is hide that complexity so you

00:07:37,509 --> 00:07:43,150
don't need to know that it's created out

00:07:40,240 --> 00:07:46,210
or created on or first created timestamp

00:07:43,150 --> 00:07:49,300
or the last entry in a created modified

00:07:46,210 --> 00:07:51,460
stream teeka hide that from you tries to

00:07:49,300 --> 00:07:53,259
keep you back something that says the

00:07:51,460 --> 00:07:59,440
thing that's logically described by

00:07:53,259 --> 00:08:01,300
dublin core creator Tim and ticking give

00:07:59,440 --> 00:08:04,810
you back the plaintext for most of the

00:08:01,300 --> 00:08:05,919
file formats and and it wraps up all the

00:08:04,810 --> 00:08:08,199
different libraries all the different

00:08:05,919 --> 00:08:10,840
executables hides all that from you so

00:08:08,199 --> 00:08:13,870
that's really aimed at things like for

00:08:10,840 --> 00:08:15,669
text indexing for this thing I've got

00:08:13,870 --> 00:08:21,219
give me something like and give to

00:08:15,669 --> 00:08:24,729
leucine and then can also give you XHTML

00:08:21,219 --> 00:08:29,560
this is not the same as word save as

00:08:24,729 --> 00:08:32,260
HTML is simplified and aims to be

00:08:29,560 --> 00:08:35,229
semantically meaningful so we will throw

00:08:32,260 --> 00:08:38,110
away an awful lot of stuff and hopefully

00:08:35,229 --> 00:08:40,390
keep just the things you care about this

00:08:38,110 --> 00:08:43,630
is a div that is a heading with some

00:08:40,390 --> 00:08:47,320
text in this is a div that has some text

00:08:43,630 --> 00:08:50,470
and an image it can be used for simple

00:08:47,320 --> 00:08:52,839
previews but that's kind of it and but

00:08:50,470 --> 00:08:54,040
the idea is that you can say for this

00:08:52,839 --> 00:08:55,899
document I don't

00:08:54,040 --> 00:08:59,740
care about the header and footer show me

00:08:55,899 --> 00:09:01,420
what's left for this document and is

00:08:59,740 --> 00:09:03,009
there a table of contents if so can we

00:09:01,420 --> 00:09:05,050
grab the table of contents so that you

00:09:03,009 --> 00:09:07,120
can work out roughly what's in it and

00:09:05,050 --> 00:09:09,279
get the bits that you want but not to

00:09:07,120 --> 00:09:13,440
have a really high fidelity web preview

00:09:09,279 --> 00:09:15,459
of the document and so our kind of

00:09:13,440 --> 00:09:18,490
architecture or sort of mission

00:09:15,459 --> 00:09:21,009
statement is to hide the complexity to

00:09:18,490 --> 00:09:24,550
hide the difference to try and pick the

00:09:21,009 --> 00:09:27,490
best library code snippet executables

00:09:24,550 --> 00:09:30,160
for you to work with upstream for you to

00:09:27,490 --> 00:09:32,410
fix bugs and get enhancements done and

00:09:30,160 --> 00:09:36,639
to generally come with batteries

00:09:32,410 --> 00:09:39,519
included except where that would cause

00:09:36,639 --> 00:09:41,709
you massive surprises and then to come

00:09:39,519 --> 00:09:43,480
with batteries nearby so when we're

00:09:41,709 --> 00:09:45,519
looking at a new formats new libraries

00:09:43,480 --> 00:09:48,639
we say what's that going to do to the

00:09:45,519 --> 00:09:51,069
jar size and if the answer is it's going

00:09:48,639 --> 00:09:54,130
to go up from 50 megabytes to 2

00:09:51,069 --> 00:09:56,319
terabytes we say maybe guys we should

00:09:54,130 --> 00:09:59,440
put that machine learning data set in a

00:09:56,319 --> 00:10:01,810
rest service and just ship a very thin

00:09:59,440 --> 00:10:04,149
shim that will let you talk to it where

00:10:01,810 --> 00:10:07,120
you can opt in to that massive training

00:10:04,149 --> 00:10:08,589
data set and it's like oh well it's

00:10:07,120 --> 00:10:11,319
going to add half a megabyte ok well

00:10:08,589 --> 00:10:13,329
we'll probably cut it in line so most

00:10:11,319 --> 00:10:16,029
things are going to be supported out of

00:10:13,329 --> 00:10:18,550
the box the other things there's going

00:10:16,029 --> 00:10:21,010
to be a way to turn on the big chunky

00:10:18,550 --> 00:10:24,610
things if you want them but not on by

00:10:21,010 --> 00:10:28,170
default we try and support the JVM users

00:10:24,610 --> 00:10:31,750
and the non JVM users as near equals and

00:10:28,170 --> 00:10:34,209
if we get it wrong tell us and we'll fix

00:10:31,750 --> 00:10:35,470
it if you say hey I think this thing

00:10:34,209 --> 00:10:36,220
should be in a standard and it doesn't

00:10:35,470 --> 00:10:38,740
have big impact

00:10:36,220 --> 00:10:39,550
great we'll do it if you say hey you

00:10:38,740 --> 00:10:41,949
said you were going to hide the

00:10:39,550 --> 00:10:44,949
complexity but I've just seen this nasty

00:10:41,949 --> 00:10:49,269
PDF artifact turning up well we'll try

00:10:44,949 --> 00:10:51,579
and fix that so let us know so what's

00:10:49,269 --> 00:10:53,529
new the biggest thing for those of you

00:10:51,579 --> 00:10:55,630
not used tika for a while is the number

00:10:53,529 --> 00:11:00,069
of file formats that we support number

00:10:55,630 --> 00:11:02,649
of classes so we've got HTML XML

00:11:00,069 --> 00:11:05,649
Microsoft Office we've now got Word

00:11:02,649 --> 00:11:07,900
PowerPoint all Excel versions since

00:11:05,649 --> 00:11:10,660
version 2

00:11:07,900 --> 00:11:14,770
video-out look we've got all the weird

00:11:10,660 --> 00:11:16,510
XML formats that were pre oxm l tim has

00:11:14,770 --> 00:11:18,610
done a lot of work getting those in to

00:11:16,510 --> 00:11:20,530
the word ml spreadsheet ml kind of stuff

00:11:18,610 --> 00:11:24,250
and we now even have support for locked

00:11:20,530 --> 00:11:26,830
files clearly who lock the file then

00:11:24,250 --> 00:11:28,150
we've got ODF but I works we've got

00:11:26,830 --> 00:11:31,540
WordPerfect in there now

00:11:28,150 --> 00:11:33,220
PDF RTF and we work with Commons

00:11:31,540 --> 00:11:35,410
compress and every time I do this slide

00:11:33,220 --> 00:11:37,840
the list of supported compression and

00:11:35,410 --> 00:11:39,400
archive formats gets longer and I worry

00:11:37,840 --> 00:11:41,860
that on the next one it's not even going

00:11:39,400 --> 00:11:43,090
to fit on one line and but they're doing

00:11:41,860 --> 00:11:46,870
some really great work and we've been

00:11:43,090 --> 00:11:50,080
working with them recently and we do

00:11:46,870 --> 00:11:54,100
help we do a lot of audio formats now so

00:11:50,080 --> 00:11:56,380
we've got mp3 mp4 of raw bespeak fiora's

00:11:54,100 --> 00:11:58,600
so most of those ones we're only able to

00:11:56,380 --> 00:12:05,170
get the metadata out we don't do any

00:11:58,600 --> 00:12:07,270
audio trans literary am sort of a s RTF

00:12:05,170 --> 00:12:10,600
we don't do that but we can say hey this

00:12:07,270 --> 00:12:14,860
is an mp3 of a talk given by Dave

00:12:10,600 --> 00:12:16,720
Fischer in 2011 and it's in 16-bit Mon

00:12:14,860 --> 00:12:21,010
I've give you all that kind of thing

00:12:16,720 --> 00:12:22,690
um images support for almost all the

00:12:21,010 --> 00:12:25,330
images you can think of to get the

00:12:22,690 --> 00:12:28,720
metadata and also we're supported we can

00:12:25,330 --> 00:12:30,190
do OCR and then for the video we can do

00:12:28,720 --> 00:12:31,600
the metadata and we can also do some

00:12:30,190 --> 00:12:35,140
histograms if you want for some

00:12:31,600 --> 00:12:38,500
similarity stuff source code all the

00:12:35,140 --> 00:12:41,500
major email formats and lots and lots of

00:12:38,500 --> 00:12:43,060
scientific formats we can do executables

00:12:41,500 --> 00:12:45,850
and we'll tell you hey this is an

00:12:43,060 --> 00:12:50,280
executable for 64-bit windows or this is

00:12:45,850 --> 00:12:53,560
next cutable for linux on 64-bit arm

00:12:50,280 --> 00:12:56,410
little-endian shared libraries all that

00:12:53,560 --> 00:12:57,730
kind of thing which is interesting if

00:12:56,410 --> 00:13:01,090
you want to know what the thing is and

00:12:57,730 --> 00:13:03,190
also should I let this through and we've

00:13:01,090 --> 00:13:05,890
got some crypto formats in there now and

00:13:03,190 --> 00:13:09,270
we've got a number of database formats

00:13:05,890 --> 00:13:16,370
that we're able to get the data out of

00:13:09,270 --> 00:13:19,380
so OCR um if you've got an image

00:13:16,370 --> 00:13:22,080
you might want to find the things in it

00:13:19,380 --> 00:13:24,360
and if it's just an image that's going

00:13:22,080 --> 00:13:26,280
to be kind of hard so OCR comes to the

00:13:24,360 --> 00:13:28,700
rescue here and the thing we work with

00:13:26,280 --> 00:13:31,250
is an open source tool called tesseract

00:13:28,700 --> 00:13:34,560
anyone come across this right before

00:13:31,250 --> 00:13:36,780
it's not quite as fast as some of the

00:13:34,560 --> 00:13:39,660
commercial toolkits because they've

00:13:36,780 --> 00:13:43,470
optimized the code for readability

00:13:39,660 --> 00:13:45,150
understand ability and ability for PhD

00:13:43,470 --> 00:13:47,250
students to work on adding cool new

00:13:45,150 --> 00:13:49,050
features so there's a few bits where

00:13:47,250 --> 00:13:51,960
people work on hey can I rewrite this

00:13:49,050 --> 00:13:55,590
chunk in assembler so it's faster and

00:13:51,960 --> 00:13:57,750
they've gone no what we care about is

00:13:55,590 --> 00:13:59,760
the next PhD student to come in can do

00:13:57,750 --> 00:14:00,840
some really cool new stuff without us

00:13:59,760 --> 00:14:02,790
having to go back to you to get

00:14:00,840 --> 00:14:04,260
rewritten and assembler so it's not as

00:14:02,790 --> 00:14:06,660
fast to some of the commercial toolkits

00:14:04,260 --> 00:14:08,850
but it is moving on a pretty good pace

00:14:06,660 --> 00:14:10,290
so new version of tesseract that's come

00:14:08,850 --> 00:14:13,590
out has just done a whole load of new

00:14:10,290 --> 00:14:15,270
detection things that come in so teak

00:14:13,590 --> 00:14:18,870
has got a parser that will call out to

00:14:15,270 --> 00:14:22,170
tesseract at the moment Tico will

00:14:18,870 --> 00:14:24,840
silently use tesseract if it finds it

00:14:22,170 --> 00:14:26,310
which can call surprises because if

00:14:24,840 --> 00:14:28,440
you've got a French document and you've

00:14:26,310 --> 00:14:30,030
got default tesseract install it's going

00:14:28,440 --> 00:14:32,460
to run really slowly to no benefit

00:14:30,030 --> 00:14:34,470
because by default it won't have that

00:14:32,460 --> 00:14:37,710
language pack so we are currently

00:14:34,470 --> 00:14:39,810
debating changing that default to avoid

00:14:37,710 --> 00:14:43,230
surprise the trade-off between a void

00:14:39,810 --> 00:14:46,890
surprise and batteries included but it's

00:14:43,230 --> 00:14:50,430
there it's very easy to turn on and the

00:14:46,890 --> 00:14:51,780
one thing that we are still deciding the

00:14:50,430 --> 00:14:53,910
best way to do and we're hopefully

00:14:51,780 --> 00:14:57,060
fixing to do is make it easier for you

00:14:53,910 --> 00:14:59,850
to say I want to have the metadata from

00:14:57,060 --> 00:15:01,440
this image parser and I want to have it

00:14:59,850 --> 00:15:03,480
go through tesseract to get the text out

00:15:01,440 --> 00:15:05,400
and by the way I also want this to

00:15:03,480 --> 00:15:07,710
happen when it's an image embedded in a

00:15:05,400 --> 00:15:09,740
PDF for some of those things with with

00:15:07,710 --> 00:15:13,610
trying to get a little bit better

00:15:09,740 --> 00:15:16,320
container formats a really fun one here

00:15:13,610 --> 00:15:19,500
you do detection you say it's a zip file

00:15:16,320 --> 00:15:22,710
so that could just be a zip but maybe

00:15:19,500 --> 00:15:25,200
that's an ODF file which is stored

00:15:22,710 --> 00:15:27,240
within as it may be it's a PowerPoint

00:15:25,200 --> 00:15:28,860
pptx files

00:15:27,240 --> 00:15:30,089
maybe it's an ePub there's loads of

00:15:28,860 --> 00:15:32,360
different file formats

00:15:30,089 --> 00:15:34,379
that live inside these containers

00:15:32,360 --> 00:15:37,740
equally you can have a look at something

00:15:34,379 --> 00:15:38,399
and say well this is a this is an a/v

00:15:37,740 --> 00:15:40,709
container

00:15:38,399 --> 00:15:45,749
okay well that's probably going to be

00:15:40,709 --> 00:15:47,430
video okay what about if it is the OGG

00:15:45,749 --> 00:15:49,079
framing format well is that going to be

00:15:47,430 --> 00:15:51,569
all for this or is that going to be

00:15:49,079 --> 00:15:53,249
cieaura or is that going to be the weird

00:15:51,569 --> 00:15:55,800
thing where you get the audio and the

00:15:53,249 --> 00:15:56,879
text for karaoke icon and all that one's

00:15:55,800 --> 00:15:58,439
called but you know there's all these

00:15:56,879 --> 00:16:01,410
different things that can live within

00:15:58,439 --> 00:16:03,569
these containers that makes detection

00:16:01,410 --> 00:16:05,759
hard because you're saying is this audio

00:16:03,569 --> 00:16:07,769
or video or something else

00:16:05,759 --> 00:16:10,050
kickers got to actually unpack the

00:16:07,769 --> 00:16:12,779
container and peek inside and say well

00:16:10,050 --> 00:16:14,699
it's OGG and it's got a stream of

00:16:12,779 --> 00:16:16,620
metadata and a stream of audio okay

00:16:14,699 --> 00:16:19,680
that's probably an audio file or look

00:16:16,620 --> 00:16:21,660
inside and say hey this is a this is a

00:16:19,680 --> 00:16:24,089
zip file but I found a content types

00:16:21,660 --> 00:16:25,920
file and I found the word subdirectory

00:16:24,089 --> 00:16:27,930
this is probably going to be a word doc

00:16:25,920 --> 00:16:33,360
X file but that's a more expensive

00:16:27,930 --> 00:16:35,699
process to do the detection and but

00:16:33,360 --> 00:16:37,620
often that's going to be what you want

00:16:35,699 --> 00:16:39,600
to have you don't want to just say well

00:16:37,620 --> 00:16:41,480
it's as if then it ends in docx I'm

00:16:39,600 --> 00:16:44,610
going to trust that that's a docx

00:16:41,480 --> 00:16:46,290
especially if you indeed text passing or

00:16:44,610 --> 00:16:47,879
you want to do any digital forensics you

00:16:46,290 --> 00:16:52,920
actually care what it is not what it

00:16:47,879 --> 00:16:55,589
looks like databases we've got support

00:16:52,920 --> 00:16:58,189
for a surprising number of the database

00:16:55,589 --> 00:17:00,509
systems have a single file mode and

00:16:58,189 --> 00:17:02,749
teachers not currently able to work on

00:17:00,509 --> 00:17:05,699
the thing where you say this disk

00:17:02,749 --> 00:17:09,240
contains my Microsoft sequel server

00:17:05,699 --> 00:17:11,069
database strewn across 3,000 files

00:17:09,240 --> 00:17:14,520
Teek is not going to be able to help

00:17:11,069 --> 00:17:16,079
there that's a sequel light for access

00:17:14,520 --> 00:17:18,299
for some of those things where there's a

00:17:16,079 --> 00:17:20,189
single file you can give that to taker

00:17:18,299 --> 00:17:22,079
and take you can give you back the

00:17:20,189 --> 00:17:23,880
textual content of that database so that

00:17:22,079 --> 00:17:27,360
you can index it and find things in it

00:17:23,880 --> 00:17:29,460
and still having a bit of debate about

00:17:27,360 --> 00:17:32,820
the best way to represent the contents

00:17:29,460 --> 00:17:34,110
of those databases in XHTML such that

00:17:32,820 --> 00:17:37,980
they make sense and they're easier to

00:17:34,110 --> 00:17:39,120
search for and generally for all of

00:17:37,980 --> 00:17:41,280
these file formats you're going to have

00:17:39,120 --> 00:17:43,200
to drop an extra a jar or an extra

00:17:41,280 --> 00:17:43,860
library on your class path to make it

00:17:43,200 --> 00:17:45,630
active

00:17:43,860 --> 00:17:48,059
because those tend to be pretty chunky

00:17:45,630 --> 00:17:50,519
ones and people get a bit grumpy if the

00:17:48,059 --> 00:17:52,500
tikka jar file jumps by 200 megabytes

00:17:50,519 --> 00:17:58,610
worth of shared libraries for four

00:17:52,500 --> 00:18:01,140
different platforms TK config.xml is

00:17:58,610 --> 00:18:03,779
relatively new in the current way of

00:18:01,140 --> 00:18:06,720
working but it just lets you say hey I

00:18:03,779 --> 00:18:09,269
want to turn off these passes and I want

00:18:06,720 --> 00:18:10,769
to turn on this language translation and

00:18:09,269 --> 00:18:13,919
I want to tweak the priority of these

00:18:10,769 --> 00:18:16,230
things so you can say what passes to use

00:18:13,919 --> 00:18:18,840
what detectors to use what passes not to

00:18:16,230 --> 00:18:21,480
use you can manually wire in some extra

00:18:18,840 --> 00:18:24,059
mind types to passes and you can do it

00:18:21,480 --> 00:18:26,309
explicitly and you can do it implicitly

00:18:24,059 --> 00:18:29,309
with the default so you say I want

00:18:26,309 --> 00:18:33,809
default TK config except that I want to

00:18:29,309 --> 00:18:35,850
turn off OCR and that's easy and if you

00:18:33,809 --> 00:18:37,950
use the ticket app it can tell you what

00:18:35,850 --> 00:18:39,090
your config currently is and it can

00:18:37,950 --> 00:18:43,679
translate between the different modes

00:18:39,090 --> 00:18:46,260
you can say TK app take my custom config

00:18:43,679 --> 00:18:49,740
file here and tell me explicitly what it

00:18:46,260 --> 00:18:51,960
resolved into or TK tell me what the

00:18:49,740 --> 00:18:53,250
default one is in explicit mode so I can

00:18:51,960 --> 00:18:57,570
then go through and manually turn some

00:18:53,250 --> 00:19:00,690
bits off and it looks kind of like this

00:18:57,570 --> 00:19:04,130
fairly boring but hopefully you can read

00:19:00,690 --> 00:19:09,419
through it and see what's going on

00:19:04,130 --> 00:19:11,820
embedded resources are a fun one and if

00:19:09,419 --> 00:19:14,909
you've got a zip file that has three

00:19:11,820 --> 00:19:17,519
files in you know three images okay well

00:19:14,909 --> 00:19:19,289
so the file is the zip and the embedded

00:19:17,519 --> 00:19:21,539
resources are these three separate

00:19:19,289 --> 00:19:27,750
images in it that's relatively clear and

00:19:21,539 --> 00:19:29,730
if you've got a PDF that's scammed to

00:19:27,750 --> 00:19:31,230
you as a user you say well the thing

00:19:29,730 --> 00:19:33,179
I've got is a PDF and it's got three

00:19:31,230 --> 00:19:36,000
pages and then we look it and go well

00:19:33,179 --> 00:19:39,929
you've got a PDF with no text and you've

00:19:36,000 --> 00:19:42,139
got three embedded images okay if you've

00:19:39,929 --> 00:19:45,240
got a PowerPoint file with a graph

00:19:42,139 --> 00:19:48,720
that's normally a PowerPoint file with

00:19:45,240 --> 00:19:51,809
an embedded excel file and a quick

00:19:48,720 --> 00:19:54,899
rendered version of that excel file adds

00:19:51,809 --> 00:19:56,130
the graph so is that a PowerPoint file

00:19:54,899 --> 00:19:57,210
or is that a PowerPoint file with an

00:19:56,130 --> 00:19:59,730
image or is that a powerful

00:19:57,210 --> 00:20:01,409
file with an image and an excel file if

00:19:59,730 --> 00:20:03,299
they're both representing the same thing

00:20:01,409 --> 00:20:06,450
but one is a preview and one's the

00:20:03,299 --> 00:20:08,820
original which ones you care about the

00:20:06,450 --> 00:20:10,620
ticker approach is to say here's what

00:20:08,820 --> 00:20:13,980
I've got tell me which ones you care

00:20:10,620 --> 00:20:16,260
about and the default is often just to

00:20:13,980 --> 00:20:18,360
give you everything but be aware that

00:20:16,260 --> 00:20:20,700
teeka sometimes doesn't have a really

00:20:18,360 --> 00:20:22,770
easy answer and has to tempt you and say

00:20:20,700 --> 00:20:24,450
I've got some stuff and I'm not sure

00:20:22,770 --> 00:20:26,190
which ones you're going to be interested

00:20:24,450 --> 00:20:31,429
in you tell me what you want and I'll

00:20:26,190 --> 00:20:34,559
carry on with those the ticket app is a

00:20:31,429 --> 00:20:37,549
single runnable jars and I think is what

00:20:34,559 --> 00:20:39,690
it's about 60 mega at the moment and

00:20:37,549 --> 00:20:42,630
mostly batteries included and you can

00:20:39,690 --> 00:20:44,520
say tikka what is this thing and it will

00:20:42,630 --> 00:20:46,649
run tell you the detection get the

00:20:44,520 --> 00:20:49,620
metadata you can get the text content

00:20:46,649 --> 00:20:51,570
out and it also has a nice little GUI

00:20:49,620 --> 00:20:53,130
mode that you can use for testing just

00:20:51,570 --> 00:20:56,309
drag and drop a file onto it and see

00:20:53,130 --> 00:20:59,100
what you get out it's really easy to get

00:20:56,309 --> 00:21:02,340
started with it's really easy to use

00:20:59,100 --> 00:21:05,730
from non jvm languages but you're

00:21:02,340 --> 00:21:07,710
spawning a new JVM every time so there's

00:21:05,730 --> 00:21:09,840
going to be some scaling issues so use

00:21:07,710 --> 00:21:13,260
it for testing use it for demos use it

00:21:09,840 --> 00:21:14,669
for one-offs probably don't bake it into

00:21:13,260 --> 00:21:17,669
the middle of your high production

00:21:14,669 --> 00:21:21,960
pipeline we've got the tikka server for

00:21:17,669 --> 00:21:24,899
that which is a restful server that you

00:21:21,960 --> 00:21:27,659
can just talk to you say tikka I want

00:21:24,899 --> 00:21:30,390
the meta data is the upload file back

00:21:27,659 --> 00:21:32,130
here at the metadata and it's also if

00:21:30,390 --> 00:21:33,480
you go to it in a web browser it will

00:21:32,130 --> 00:21:35,340
tell you all of the different endpoints

00:21:33,480 --> 00:21:36,840
it supports and then we've got some

00:21:35,340 --> 00:21:39,450
really nice browser documentation on the

00:21:36,840 --> 00:21:42,149
websites that you can see and on the

00:21:39,450 --> 00:21:45,539
whole we think all of the things you

00:21:42,149 --> 00:21:48,690
might want to do with tika in Java are

00:21:45,539 --> 00:21:50,250
exposed through the server we think if

00:21:48,690 --> 00:21:52,080
there's something that you're trying to

00:21:50,250 --> 00:21:53,669
do that the server doesn't support let

00:21:52,080 --> 00:21:55,289
us know and we can generally really

00:21:53,669 --> 00:21:57,870
quickly add in another endpoint to

00:21:55,289 --> 00:22:00,840
expose that but if you're talking to t

00:21:57,870 --> 00:22:03,090
curve from another language that's not

00:22:00,840 --> 00:22:05,700
JVM based this is definitely the way to

00:22:03,090 --> 00:22:09,210
go and sometimes even from Java you

00:22:05,700 --> 00:22:11,690
might want to go with this OS joy any

00:22:09,210 --> 00:22:15,570
OSGi users in the house

00:22:11,690 --> 00:22:16,800
okay we have bundles that man there to

00:22:15,570 --> 00:22:25,080
make sure they're awesome

00:22:16,800 --> 00:22:28,200
talk to him afterwards tikka match an

00:22:25,080 --> 00:22:31,110
easy way to run tika across a large

00:22:28,200 --> 00:22:34,200
number of files and it's multi-threaded

00:22:31,110 --> 00:22:36,330
and it's not yet who dupe enabled we're

00:22:34,200 --> 00:22:38,040
currently talking about whether we want

00:22:36,330 --> 00:22:39,900
to take all the advice currently on the

00:22:38,040 --> 00:22:41,880
wiki on how to make tika run well on

00:22:39,900 --> 00:22:43,290
Zoop and do a third it version or

00:22:41,880 --> 00:22:45,179
whether we're going to do some cool

00:22:43,290 --> 00:22:47,040
stuff with docker containers and

00:22:45,179 --> 00:22:49,290
kubernetes and just spin up a whole

00:22:47,040 --> 00:22:51,809
bunch of instances of it to run but the

00:22:49,290 --> 00:22:55,530
basic idea is starting from a directory

00:22:51,809 --> 00:22:57,090
of stuff run out best you can give me

00:22:55,530 --> 00:22:57,600
the metadata give me the embedded

00:22:57,090 --> 00:23:00,110
resources

00:22:57,600 --> 00:23:03,900
give me the text tell me what failed and

00:23:00,110 --> 00:23:06,929
so record the failures it will respawn

00:23:03,900 --> 00:23:08,850
things that that died it will kill

00:23:06,929 --> 00:23:11,340
things to avoid out memories and memory

00:23:08,850 --> 00:23:12,900
leaks all that kind of stuff so it just

00:23:11,340 --> 00:23:15,840
kind of run through and says this is

00:23:12,900 --> 00:23:19,800
what I could get and this is what failed

00:23:15,840 --> 00:23:21,960
and you can then if you want import that

00:23:19,800 --> 00:23:23,070
so if you've got a massive bunch of

00:23:21,960 --> 00:23:24,870
documents that you're going to want to

00:23:23,070 --> 00:23:27,210
ingest in you can use take a batch to

00:23:24,870 --> 00:23:29,670
process and then grab all the text load

00:23:27,210 --> 00:23:31,230
it in or you can use it with Kiko eval

00:23:29,670 --> 00:23:34,410
which Tim's talking about tomorrow to

00:23:31,230 --> 00:23:38,820
say on the whole did this patch make

00:23:34,410 --> 00:23:42,510
things better or worse named entity

00:23:38,820 --> 00:23:45,090
recognition and anyone done any natural

00:23:42,510 --> 00:23:47,370
language processing any of that stuff so

00:23:45,090 --> 00:23:51,990
teak has got some plugins for that where

00:23:47,370 --> 00:23:54,300
you can say this piece of text does it

00:23:51,990 --> 00:23:56,010
talk about anyone and it will say okay

00:23:54,300 --> 00:23:58,800
so this piece of text here it's talking

00:23:56,010 --> 00:24:03,120
about Nick birch and so it can grab bits

00:23:58,800 --> 00:24:04,980
of text and turn them into metadata so

00:24:03,120 --> 00:24:07,530
rather than you then go well here's this

00:24:04,980 --> 00:24:10,410
text the talk it can say well the title

00:24:07,530 --> 00:24:12,450
was what's new in Apache tikka even

00:24:10,410 --> 00:24:13,770
though it wasn't putting the explicit

00:24:12,450 --> 00:24:15,720
method data we've managed to pull out

00:24:13,770 --> 00:24:17,700
that the author is Nick Burch and the

00:24:15,720 --> 00:24:21,900
location is Miami Florida and all these

00:24:17,700 --> 00:24:23,700
things and one specific batteries

00:24:21,900 --> 00:24:24,330
included version if this is grub it

00:24:23,700 --> 00:24:27,330
which is a

00:24:24,330 --> 00:24:29,100
scientific papers and and so it's based

00:24:27,330 --> 00:24:31,289
on natural language processing main

00:24:29,100 --> 00:24:34,769
entity recognition machine learning and

00:24:31,289 --> 00:24:38,669
a hefty training data set and the idea

00:24:34,769 --> 00:24:41,100
is that you can give it a PDF of a

00:24:38,669 --> 00:24:43,350
scientific paper a technical paper and

00:24:41,100 --> 00:24:46,470
it knows how to pull out the citations

00:24:43,350 --> 00:24:49,260
the author's the titles all that kind of

00:24:46,470 --> 00:24:51,090
stuff as metadata so that you can give

00:24:49,260 --> 00:24:53,070
it a PDF and back will come all that

00:24:51,090 --> 00:24:56,130
information is metadata available these

00:24:53,070 --> 00:24:58,919
index feature search on and that's all

00:24:56,130 --> 00:25:00,330
done via a REST API because the size of

00:24:58,919 --> 00:25:04,080
it was too big with that training data

00:25:00,330 --> 00:25:06,630
set but if you're interested all that

00:25:04,080 --> 00:25:09,419
Robert and the second one explains how

00:25:06,630 --> 00:25:12,480
to turn it on how to grab the GABAA data

00:25:09,419 --> 00:25:15,570
set and how to turn on the rest api geo

00:25:12,480 --> 00:25:17,730
entity lookup is quite a fun one and if

00:25:15,570 --> 00:25:20,370
you take the text here this was written

00:25:17,730 --> 00:25:23,519
in seville spain in november it can then

00:25:20,370 --> 00:25:26,039
spot that seville spain is a place and

00:25:23,519 --> 00:25:28,470
look up the latitude and longitude so

00:25:26,039 --> 00:25:30,419
that you could take a piece of text that

00:25:28,470 --> 00:25:33,510
doesn't have latitude along with you the

00:25:30,419 --> 00:25:36,240
same way that a geotag image does and do

00:25:33,510 --> 00:25:39,029
a lookup and work out that this document

00:25:36,240 --> 00:25:41,700
is describing a place and get the

00:25:39,029 --> 00:25:44,250
intimus data and that's powered by an

00:25:41,700 --> 00:25:48,809
apache lee scene and the geonames

00:25:44,250 --> 00:25:51,120
database if you were thinking of doing

00:25:48,809 --> 00:25:53,820
some sort of cool named entity

00:25:51,120 --> 00:25:55,559
recognition stuff and lookups have a

00:25:53,820 --> 00:25:57,809
look at the source code for this it's

00:25:55,559 --> 00:26:00,450
actually a really good template for how

00:25:57,809 --> 00:26:03,600
can i okay in the named entity

00:26:00,450 --> 00:26:06,690
recognition and also some quick lookups

00:26:03,600 --> 00:26:08,010
and get useful stuff out so if you were

00:26:06,690 --> 00:26:10,909
going to do custom things that would be

00:26:08,010 --> 00:26:16,559
my recommendation of a place to start

00:26:10,909 --> 00:26:18,000
image object recognition this is stolen

00:26:16,559 --> 00:26:20,220
straight out of one of chris macness

00:26:18,000 --> 00:26:25,590
papers and but the idea is that you use

00:26:20,220 --> 00:26:28,049
image recognition on images or stills or

00:26:25,590 --> 00:26:30,269
videos and you try and work out through

00:26:28,049 --> 00:26:32,850
machine learning what the image is

00:26:30,269 --> 00:26:35,730
talking about and then pull them out

00:26:32,850 --> 00:26:37,679
into metadata or into text so that you

00:26:35,730 --> 00:26:38,309
can do searching for it so rather than

00:26:37,679 --> 00:26:41,389
say

00:26:38,309 --> 00:26:45,239
I've got an image it was taken in Miami

00:26:41,389 --> 00:26:48,239
it's 600 pixels wide you can say I've

00:26:45,239 --> 00:26:49,379
got an image that 600 pixel wide taken

00:26:48,239 --> 00:26:52,859
in Miami Florida

00:26:49,379 --> 00:26:55,049
it is about a beach and then you can do

00:26:52,859 --> 00:26:57,840
searching and say I want things within

00:26:55,049 --> 00:27:00,749
500 miles of Orlando that feature Beach

00:26:57,840 --> 00:27:03,840
okay here's this image or if you're in

00:27:00,749 --> 00:27:06,599
law enforcement I want images taken

00:27:03,840 --> 00:27:11,279
within 500 miles of cobble featuring

00:27:06,599 --> 00:27:13,320
weapons I want YouTube videos where at

00:27:11,279 --> 00:27:18,359
least one of the stills seems to

00:27:13,320 --> 00:27:22,200
reference Afghanistan and guns so it's

00:27:18,359 --> 00:27:23,429
all powered by some pretty cool machine

00:27:22,200 --> 00:27:28,080
learning stuff to do the image

00:27:23,429 --> 00:27:30,570
recognition it's quite slow and but it

00:27:28,080 --> 00:27:32,129
does work that's the paper reference

00:27:30,570 --> 00:27:35,940
down there that I've stolen all this

00:27:32,129 --> 00:27:38,070
stuff from and if you're going to be

00:27:35,940 --> 00:27:41,219
doing on videos it's often recommended

00:27:38,070 --> 00:27:44,070
to do some video analysis and find

00:27:41,219 --> 00:27:46,169
stable points and then only process

00:27:44,070 --> 00:27:47,849
those stable points rather than trying

00:27:46,169 --> 00:27:49,769
to do every single frame of the video

00:27:47,849 --> 00:27:51,539
where things are moving around maybe

00:27:49,769 --> 00:27:53,369
just wait till the camera stops and hope

00:27:51,539 --> 00:27:54,929
is that something important process one

00:27:53,369 --> 00:27:58,409
of those and wait until it moves on

00:27:54,929 --> 00:28:00,509
again which feeds into the text

00:27:58,409 --> 00:28:03,539
searchable video and one of the things

00:28:00,509 --> 00:28:06,719
is the pull time series analysis that

00:28:03,539 --> 00:28:09,210
decomposes it into an object space and a

00:28:06,719 --> 00:28:11,039
histogram space and little hand wavy I

00:28:09,210 --> 00:28:13,950
saw a talk on it but I didn't fully

00:28:11,039 --> 00:28:18,269
understand it the idea is to be able to

00:28:13,950 --> 00:28:21,869
find similar videos find me videos that

00:28:18,269 --> 00:28:25,849
are like this one find me videos that

00:28:21,869 --> 00:28:28,320
have a section a bit like this section

00:28:25,849 --> 00:28:31,080
so if you're doing some the dark web

00:28:28,320 --> 00:28:33,389
stuff I have a video here of someone I'm

00:28:31,080 --> 00:28:35,009
quite interested in can you see if you

00:28:33,389 --> 00:28:38,700
can find some other videos that feature

00:28:35,009 --> 00:28:40,889
this person or you can do it for

00:28:38,700 --> 00:28:45,029
recommendation stuff hazing user really

00:28:40,889 --> 00:28:47,759
liked this short clip it's too short to

00:28:45,029 --> 00:28:49,589
have any more data in maybe we haven't

00:28:47,759 --> 00:28:51,370
got enough viewers to do the Netflix

00:28:49,589 --> 00:28:53,080
similarity stuff but

00:28:51,370 --> 00:28:55,360
can you find the other videos like this

00:28:53,080 --> 00:28:56,800
because maybe it's my kids favorite TV

00:28:55,360 --> 00:28:58,870
character and I want to know other

00:28:56,800 --> 00:29:02,470
videos that feature this same character

00:28:58,870 --> 00:29:05,020
and it does matrix transformation stuff

00:29:02,470 --> 00:29:07,000
and it does some decomposition into text

00:29:05,020 --> 00:29:10,750
to do the similarity and if you're

00:29:07,000 --> 00:29:12,280
interested and you can read that paper

00:29:10,750 --> 00:29:14,050
or if you want something with more

00:29:12,280 --> 00:29:15,850
friendly see the talk that Chris gave

00:29:14,050 --> 00:29:19,360
two years ago when you started working a

00:29:15,850 --> 00:29:23,620
lot of this stuff anyone do stuff with

00:29:19,360 --> 00:29:25,320
medical or pharmaceutical okay Apache

00:29:23,620 --> 00:29:28,570
see takes is a really interesting

00:29:25,320 --> 00:29:31,180
project that tries to be a batteries

00:29:28,570 --> 00:29:33,190
included example of all the natural

00:29:31,180 --> 00:29:36,130
language processing named entity

00:29:33,190 --> 00:29:42,190
recognition work most of what they ship

00:29:36,130 --> 00:29:45,040
is a pre computed training data set for

00:29:42,190 --> 00:29:46,600
the natural language processing and most

00:29:45,040 --> 00:29:48,760
of the work they do is writing the code

00:29:46,600 --> 00:29:51,490
that is used to generate these data sets

00:29:48,760 --> 00:29:53,170
and then teacher can hook into that so

00:29:51,490 --> 00:29:56,500
that you've got your text that says I

00:29:53,170 --> 00:29:58,480
took some aspirin and my headache went

00:29:56,500 --> 00:30:00,580
away and it can say okay you're talking

00:29:58,480 --> 00:30:02,950
about this specific drug here and you're

00:30:00,580 --> 00:30:05,080
talking about this medical condition and

00:30:02,950 --> 00:30:08,200
this effect and the sentiment was

00:30:05,080 --> 00:30:11,530
positive not negative not saying I took

00:30:08,200 --> 00:30:15,070
some aspirin and things got worse so if

00:30:11,530 --> 00:30:17,050
you're interested in doing any analysis

00:30:15,070 --> 00:30:18,760
on medical or pharmaceutical stuff then

00:30:17,050 --> 00:30:20,740
the see takes integration it's really

00:30:18,760 --> 00:30:22,150
good because it takes the text and pulls

00:30:20,740 --> 00:30:24,420
out the metadata and tells you more

00:30:22,150 --> 00:30:27,570
about what's going on in the document

00:30:24,420 --> 00:30:33,400
pachi camel we've got any kernel users

00:30:27,570 --> 00:30:34,750
okay you want to upgrade to 2.19 and Bob

00:30:33,400 --> 00:30:36,250
did some work in the last couple of

00:30:34,750 --> 00:30:38,260
weeks on getting the integration in

00:30:36,250 --> 00:30:40,870
there so that you can send your files

00:30:38,260 --> 00:30:44,020
and directories through into tika and

00:30:40,870 --> 00:30:47,310
get the information back out have a chat

00:30:44,020 --> 00:30:52,510
with him after he'll tell you rocks and

00:30:47,310 --> 00:30:55,210
translation kickers now got hooks into a

00:30:52,510 --> 00:30:57,550
number of different translation services

00:30:55,210 --> 00:30:59,920
it's not baked into tika it's a hook out

00:30:57,550 --> 00:31:04,210
to various rest based services but you

00:30:59,920 --> 00:31:05,260
can say tika if you find documents that

00:31:04,210 --> 00:31:07,450
are in Spanish

00:31:05,260 --> 00:31:09,940
can you please get the metadata

00:31:07,450 --> 00:31:12,130
translated for me into English so TK

00:31:09,940 --> 00:31:14,650
knows that this thing here is a title

00:31:12,130 --> 00:31:16,330
and it knows that it's in Spanish and it

00:31:14,650 --> 00:31:17,980
says okay well I'll go off and contact

00:31:16,330 --> 00:31:19,630
on these translation services and get

00:31:17,980 --> 00:31:22,240
the metadata translated or the content

00:31:19,630 --> 00:31:26,110
translated so then when you're saying I

00:31:22,240 --> 00:31:30,429
want to find documents where the title

00:31:26,110 --> 00:31:34,179
is talking about and what's going to be

00:31:30,429 --> 00:31:36,460
a good example London then it will pick

00:31:34,179 --> 00:31:39,250
up document that was in Spanish talking

00:31:36,460 --> 00:31:40,900
about London s even though that's not

00:31:39,250 --> 00:31:42,790
the same word because you've got the

00:31:40,900 --> 00:31:44,590
translation so if you're dealing with

00:31:42,790 --> 00:31:46,780
lots of documents in languages that you

00:31:44,590 --> 00:31:49,510
don't you yourself don't speak and

00:31:46,780 --> 00:31:51,100
you're trying to find things and then

00:31:49,510 --> 00:31:52,900
that can be really handy if it's your

00:31:51,100 --> 00:31:54,309
users who speak that language searching

00:31:52,900 --> 00:31:56,350
for it it doesn't matter your Spanish

00:31:54,309 --> 00:31:57,940
users will be searching for London s not

00:31:56,350 --> 00:31:59,710
London so they'll find that original

00:31:57,940 --> 00:32:01,750
Spanish document but if you're dealing

00:31:59,710 --> 00:32:03,490
with documents where you don't speak

00:32:01,750 --> 00:32:05,470
where you want to find things then

00:32:03,490 --> 00:32:07,809
cooking in this translation stuff gives

00:32:05,470 --> 00:32:11,679
you an easy way batteries included to

00:32:07,809 --> 00:32:13,530
find out what's going on and needed for

00:32:11,679 --> 00:32:17,470
that is the language detection stuff

00:32:13,530 --> 00:32:20,770
this piece of text what is it in and if

00:32:17,470 --> 00:32:23,290
you want to play with this do not type

00:32:20,770 --> 00:32:25,929
HelloWorld almost all the language

00:32:23,290 --> 00:32:29,669
detection stuff is statistical based and

00:32:25,929 --> 00:32:32,380
it needs a certain length of document

00:32:29,669 --> 00:32:34,210
one or two words not going enough to

00:32:32,380 --> 00:32:35,440
work out the language several paragraphs

00:32:34,210 --> 00:32:38,320
it's going to be great

00:32:35,440 --> 00:32:40,480
so please try two paragraphs worth of

00:32:38,320 --> 00:32:42,570
email not two words if you want to test

00:32:40,480 --> 00:32:44,260
how well we're going to do on it and

00:32:42,570 --> 00:32:45,580
teachers now I've got a couple of

00:32:44,260 --> 00:32:48,070
different ones that you can play with

00:32:45,580 --> 00:32:51,190
and for the detection that's all

00:32:48,070 --> 00:32:53,110
configurable another thing we've done

00:32:51,190 --> 00:32:56,669
recently to try and help you all is

00:32:53,110 --> 00:32:59,470
troubleshooting go to this wiki page

00:32:56,669 --> 00:33:01,150
start and it describes all the common

00:32:59,470 --> 00:33:03,760
problems and then it walks you through

00:33:01,150 --> 00:33:06,790
the process of figuring out what's gone

00:33:03,760 --> 00:33:08,380
wrong and that certain point says please

00:33:06,790 --> 00:33:10,299
tell the main list please open a bug

00:33:08,380 --> 00:33:12,820
you've hit a real thing but often it

00:33:10,299 --> 00:33:14,919
just says you're not going any text I'll

00:33:12,820 --> 00:33:16,390
try doing this try single passes you've

00:33:14,919 --> 00:33:17,539
got make sure that you've got the passes

00:33:16,390 --> 00:33:19,940
you expect it

00:33:17,539 --> 00:33:22,159
okay you've not got a pastor go here see

00:33:19,940 --> 00:33:26,059
how the configuration works see how to

00:33:22,159 --> 00:33:28,399
get that pastor configured in hopefully

00:33:26,059 --> 00:33:32,899
covers most the main queries if not we

00:33:28,399 --> 00:33:34,820
can do it and then if you're writing

00:33:32,899 --> 00:33:37,100
passes we've tried to document a bit

00:33:34,820 --> 00:33:45,739
more about how pastors should work when

00:33:37,100 --> 00:33:50,330
things go wrong so the last couple of

00:33:45,739 --> 00:33:51,769
releases in 1.12 we did some work to

00:33:50,330 --> 00:33:55,359
make the two different PowerPoint

00:33:51,769 --> 00:33:58,460
formats behave more similarly so that

00:33:55,359 --> 00:34:00,019
the XHTML you got back for two identical

00:33:58,460 --> 00:34:01,759
documents in two formats was closer

00:34:00,019 --> 00:34:04,070
which makes it easier if you're trying

00:34:01,759 --> 00:34:07,780
to make sense of them we've done a whole

00:34:04,070 --> 00:34:11,780
load of work on the named entities stuff

00:34:07,780 --> 00:34:13,970
then in 1.13 loads and loads above loads

00:34:11,780 --> 00:34:15,649
loads of upgrades for bug fixes we did a

00:34:13,970 --> 00:34:18,319
lot of new scientific formats for

00:34:15,649 --> 00:34:20,210
detection and then we made it easier for

00:34:18,319 --> 00:34:25,639
you to do the config loading then and

00:34:20,210 --> 00:34:27,409
dumping 1.14 we started to do some more

00:34:25,639 --> 00:34:29,990
work on giving you the macros back from

00:34:27,409 --> 00:34:33,069
documents so you can see what what's in

00:34:29,990 --> 00:34:35,960
the the macros get access to them and

00:34:33,069 --> 00:34:38,649
started to do the integration with the

00:34:35,960 --> 00:34:42,200
tensorflow for the object identification

00:34:38,649 --> 00:34:44,030
and then we re enabled something that we

00:34:42,200 --> 00:34:46,490
disabled long ago for security which was

00:34:44,030 --> 00:34:48,230
a way to say take your server on the

00:34:46,490 --> 00:34:51,079
machine you're currently running there

00:34:48,230 --> 00:34:52,549
is this file please process it off by

00:34:51,079 --> 00:34:54,829
default for security reasons otherwise

00:34:52,549 --> 00:34:57,589
you'd be like Kati cut on your current

00:34:54,829 --> 00:35:01,760
server can you try passing etc password

00:34:57,589 --> 00:35:03,380
and give me the text back Thanks so it

00:35:01,760 --> 00:35:04,579
gives you a big warning but if you know

00:35:03,380 --> 00:35:09,680
what you're doing you can turn that one

00:35:04,579 --> 00:35:12,530
on 1.15 and we've got support for some

00:35:09,680 --> 00:35:15,380
new JPEG formats got some more PDF box

00:35:12,530 --> 00:35:17,450
upgrades and Tim's done some great work

00:35:15,380 --> 00:35:22,359
adding in some more of the old Microsoft

00:35:17,450 --> 00:35:25,299
Office formats but WordPerfect WMS e-m-f

00:35:22,359 --> 00:35:30,270
improvements in language detection and

00:35:25,299 --> 00:35:32,100
and ongoing preparations for ticket to

00:35:30,270 --> 00:35:33,420
and and then when we did a call-out for

00:35:32,100 --> 00:35:35,610
mailing list for some of the cool stuff

00:35:33,420 --> 00:35:38,220
going on this is what I got back so if

00:35:35,610 --> 00:35:39,720
you're interested in the image

00:35:38,220 --> 00:35:42,540
recognition natural language processing

00:35:39,720 --> 00:35:44,550
all that kind of stuff these are the

00:35:42,540 --> 00:35:46,530
wiki pages of the things that are still

00:35:44,550 --> 00:35:53,040
in progress and have just been finished

00:35:46,530 --> 00:35:57,920
you can have a look into so tika - first

00:35:53,040 --> 00:36:01,080
release 2007 one that I release 2011

00:35:57,920 --> 00:36:04,020
fairly often since then people have said

00:36:01,080 --> 00:36:06,750
hey let's do a 2.0 release so we can do

00:36:04,020 --> 00:36:09,180
some breaking changes and someone else

00:36:06,750 --> 00:36:11,610
is usually said you know what guys we

00:36:09,180 --> 00:36:14,400
can actually do that without a breaking

00:36:11,610 --> 00:36:16,260
change we've been really good at

00:36:14,400 --> 00:36:18,510
maintaining backwards-compatibility in

00:36:16,260 --> 00:36:20,640
the api's and we've been able to

00:36:18,510 --> 00:36:23,460
shoehorn in a surprisingly large amount

00:36:20,640 --> 00:36:25,260
of new features without having to do

00:36:23,460 --> 00:36:31,830
that breaking change the API for the

00:36:25,260 --> 00:36:35,790
2-day release and so if you do want to

00:36:31,830 --> 00:36:39,330
upgrade - - which is coming out and make

00:36:35,790 --> 00:36:42,000
sure that you compile against 1.14 or

00:36:39,330 --> 00:36:43,050
1.15 and fix all the deprecated bits

00:36:42,000 --> 00:36:45,090
because everything that's currently

00:36:43,050 --> 00:36:47,490
deprecated in 114 and 115 will be

00:36:45,090 --> 00:36:49,500
dropped into so things that might bite

00:36:47,490 --> 00:36:50,820
you is the really old arm SH keys

00:36:49,500 --> 00:36:53,220
especially if you're on very old version

00:36:50,820 --> 00:36:55,230
- tika we used to just do simple strings

00:36:53,220 --> 00:36:57,750
for the metadata keys they've now been

00:36:55,230 --> 00:36:59,520
swapped out for properties where for a

00:36:57,750 --> 00:37:01,530
property will say this is the Dublin

00:36:59,520 --> 00:37:04,200
core title and this is a single string

00:37:01,530 --> 00:37:07,080
this is the Dublin core created at and

00:37:04,200 --> 00:37:08,880
it is a single date so you know more

00:37:07,080 --> 00:37:11,280
about what those metadata things are

00:37:08,880 --> 00:37:12,450
describing so make sure you drop out the

00:37:11,280 --> 00:37:17,220
old deprecated ones move to the

00:37:12,450 --> 00:37:20,240
properties metadata storage it's still

00:37:17,220 --> 00:37:24,810
up for debate at the moment it is just

00:37:20,240 --> 00:37:28,560
string string which is really flexible

00:37:24,810 --> 00:37:30,570
but sometimes surprising and lots of

00:37:28,560 --> 00:37:33,300
people keep talking about richer models

00:37:30,570 --> 00:37:35,550
and nothing has been accepted but there

00:37:33,300 --> 00:37:38,060
is talk of the underlying metadata

00:37:35,550 --> 00:37:41,910
models being made something that will

00:37:38,060 --> 00:37:43,610
support more structured types and we

00:37:41,910 --> 00:37:46,790
have nice issue homes some of them in

00:37:43,610 --> 00:37:50,720
just by putting slashes and brackets in

00:37:46,790 --> 00:37:53,210
the string keys work surprisingly well

00:37:50,720 --> 00:37:55,340
and lots of people don't like it this so

00:37:53,210 --> 00:37:56,150
that may change but I suspect we'll

00:37:55,340 --> 00:37:59,450
still keep the backwards compatibility

00:37:56,150 --> 00:38:01,340
onto the strings if you need them the

00:37:59,450 --> 00:38:04,310
metadata for video is tricky though if

00:38:01,340 --> 00:38:07,220
you've got the DVD video where you've

00:38:04,310 --> 00:38:10,280
got the main video stream and the

00:38:07,220 --> 00:38:13,070
alternate directors video stream and

00:38:10,280 --> 00:38:16,010
you've got English English directors

00:38:13,070 --> 00:38:19,790
commentary English audio impaired or

00:38:16,010 --> 00:38:23,270
visually impaired French Spanish South

00:38:19,790 --> 00:38:25,870
American Spanish subtitles in English

00:38:23,270 --> 00:38:30,110
French Spanish simplified Chinese

00:38:25,870 --> 00:38:31,550
they're all logically this one video but

00:38:30,110 --> 00:38:33,440
there's all this different stuff that

00:38:31,550 --> 00:38:35,890
actually goes into making up and you

00:38:33,440 --> 00:38:39,890
might say I'm interested in knowing if

00:38:35,890 --> 00:38:42,350
the French is in to channel or four

00:38:39,890 --> 00:38:45,320
channel or surround sounds I'm

00:38:42,350 --> 00:38:48,080
interested in knowing if the Chinese

00:38:45,320 --> 00:38:51,320
text is all there I'm interested in

00:38:48,080 --> 00:38:53,660
knowing if the directors track has a

00:38:51,320 --> 00:38:55,940
different sampling rate but they're all

00:38:53,660 --> 00:38:57,680
still the same logical block so we're

00:38:55,940 --> 00:39:00,530
trying to figure out what's the least

00:38:57,680 --> 00:39:01,880
surprising way to show you all of the

00:39:00,530 --> 00:39:03,890
different metadata of all of the

00:39:01,880 --> 00:39:06,650
different things that go into this one

00:39:03,890 --> 00:39:09,500
logical thing of here the video when

00:39:06,650 --> 00:39:13,130
it's lots of different things and that's

00:39:09,500 --> 00:39:17,000
blocking a lot of the extra metadata

00:39:13,130 --> 00:39:19,670
coming through from the over Vorbis and

00:39:17,000 --> 00:39:21,650
OGG formats we got the data but we're

00:39:19,670 --> 00:39:23,600
just not sure how to expose that to you

00:39:21,650 --> 00:39:26,120
the end user without really surprising

00:39:23,600 --> 00:39:29,750
you so if you have ideas please let us

00:39:26,120 --> 00:39:32,510
know and the big one that a lot of

00:39:29,750 --> 00:39:35,900
people have been asking for is packaging

00:39:32,510 --> 00:39:39,920
of the passes at the moment with tikka

00:39:35,900 --> 00:39:43,700
you get no passes or 60 megabytes of

00:39:39,920 --> 00:39:47,540
letter passes as long as mavens behaving

00:39:43,700 --> 00:39:49,190
and in the new ones we have much more

00:39:47,540 --> 00:39:51,020
modular passes where you have a group of

00:39:49,190 --> 00:39:52,910
passes for one logical area and you can

00:39:51,020 --> 00:39:55,250
say I still want all the passes or I'm

00:39:52,910 --> 00:39:56,340
in dealing with text formats just just

00:39:55,250 --> 00:40:00,420
give me the simple set

00:39:56,340 --> 00:40:02,370
relating to those and it means at the

00:40:00,420 --> 00:40:03,930
moment we're currently you say T car I

00:40:02,370 --> 00:40:05,580
want tikka passes but I want to then

00:40:03,930 --> 00:40:07,620
exclude all of these complicated

00:40:05,580 --> 00:40:09,600
dependencies to only get the things I'm

00:40:07,620 --> 00:40:12,810
interested in you can just say tikka

00:40:09,600 --> 00:40:15,510
pass to PDF that's all I want so these

00:40:12,810 --> 00:40:17,880
are the sets that we currently support

00:40:15,510 --> 00:40:19,500
on the 2-point x branch so if you're

00:40:17,880 --> 00:40:21,540
interested you can go ahead and and use

00:40:19,500 --> 00:40:27,270
those to just pull in specific bits

00:40:21,540 --> 00:40:29,070
Atika that you're interested in I don't

00:40:27,270 --> 00:40:29,810
know what Bob's taking a photo consider

00:40:29,070 --> 00:40:34,840
self

00:40:29,810 --> 00:40:34,840
[Laughter]

00:40:34,850 --> 00:40:43,380
logging is all moving to SL f4j and in

00:40:39,900 --> 00:40:45,330
the one point X branch there's a whole

00:40:43,380 --> 00:40:47,400
bunch of different logging depending on

00:40:45,330 --> 00:40:52,230
the path of being used to personally

00:40:47,400 --> 00:40:55,500
wrote it the age of the code so pretty

00:40:52,230 --> 00:40:56,970
much so and constants they've been doing

00:40:55,500 --> 00:40:58,980
some great work to go through and get it

00:40:56,970 --> 00:41:02,640
all using a single unified logging

00:40:58,980 --> 00:41:05,220
framework and config some of this has

00:41:02,640 --> 00:41:07,260
been done on the 1.15 as well but making

00:41:05,220 --> 00:41:10,730
sure that everything can be easily

00:41:07,260 --> 00:41:13,320
configured explicitly configured and

00:41:10,730 --> 00:41:15,210
consistent there's still some stuff at

00:41:13,320 --> 00:41:17,520
the moment where some of the passes will

00:41:15,210 --> 00:41:19,140
run off of properties files and some of

00:41:17,520 --> 00:41:21,390
the stuff will be done from the C

00:41:19,140 --> 00:41:23,700
config.xml we want to make sure there's

00:41:21,390 --> 00:41:27,270
just one place that you go to see your

00:41:23,700 --> 00:41:29,360
config make changes your config and make

00:41:27,270 --> 00:41:32,010
sure that the defaults are sensible

00:41:29,360 --> 00:41:33,950
documented and no surprises so we don't

00:41:32,010 --> 00:41:36,720
have the thing where someone says I

00:41:33,950 --> 00:41:40,830
didn't apt-get upgrade and tika got

00:41:36,720 --> 00:41:45,240
slower and we're like ah yeah you just

00:41:40,830 --> 00:41:47,610
got tesseract didn't you Alex but but

00:41:45,240 --> 00:41:49,830
how did he could get slower and we're

00:41:47,610 --> 00:41:52,230
like yeah so maybe that's not the best

00:41:49,830 --> 00:41:53,670
default to have so working through some

00:41:52,230 --> 00:41:55,800
of those things where the trade-off

00:41:53,670 --> 00:42:02,630
between batteries included and sensible

00:41:55,800 --> 00:42:02,630
no surprises something we're still yep

00:42:03,460 --> 00:42:11,800
Levine barley she's a fast grr

00:42:08,369 --> 00:42:15,819
yep so one issue we've got the moment is

00:42:11,800 --> 00:42:19,089
it's not easy to set fallback classes

00:42:15,819 --> 00:42:22,059
and different preferences we'd like to

00:42:19,089 --> 00:42:25,000
be able to say hey and try this pasture

00:42:22,059 --> 00:42:27,910
if it fails try this one try this

00:42:25,000 --> 00:42:29,170
pasture then take the metadata merge in

00:42:27,910 --> 00:42:31,540
with the text that you get back from

00:42:29,170 --> 00:42:32,859
this one and if they both fail then try

00:42:31,540 --> 00:42:35,950
this one but if only one of them fails

00:42:32,859 --> 00:42:37,630
then consider it a good job it's not

00:42:35,950 --> 00:42:39,460
very easy to do at the moment so we want

00:42:37,630 --> 00:42:42,400
to make is if you to configure that in

00:42:39,460 --> 00:42:43,660
without surprising you and then yeah the

00:42:42,400 --> 00:42:45,490
multiple passwords if there's two

00:42:43,660 --> 00:42:47,170
different ones and Allah format how do

00:42:45,490 --> 00:42:49,809
you say which one to try how do you

00:42:47,170 --> 00:42:51,910
merge the output of them especially if

00:42:49,809 --> 00:42:53,920
they both output some text and you like

00:42:51,910 --> 00:42:54,970
well I've got two different passes that

00:42:53,920 --> 00:42:57,460
say they think they've given me the

00:42:54,970 --> 00:43:02,619
header block how do I kind of deal with

00:42:57,460 --> 00:43:04,630
deal with that and then the pasture

00:43:02,619 --> 00:43:06,700
discover in loading at the moment it's a

00:43:04,630 --> 00:43:08,859
little bit magic you just drop an extra

00:43:06,700 --> 00:43:11,109
jar on the classpath ticker finds it

00:43:08,859 --> 00:43:14,440
particular to pasture take a stop using

00:43:11,109 --> 00:43:19,329
it and and it doesn't tell you if you've

00:43:14,440 --> 00:43:20,799
got half a parser by default so we I

00:43:19,329 --> 00:43:23,770
think we're going to set the default

00:43:20,799 --> 00:43:27,010
onto to be warned we're at least says

00:43:23,770 --> 00:43:28,690
hey I've got half of the word parser and

00:43:27,010 --> 00:43:29,980
none of the dependencies so I'm not

00:43:28,690 --> 00:43:34,540
going to use it but I thought you should

00:43:29,980 --> 00:43:37,780
know rather than just going okay sorry

00:43:34,540 --> 00:43:39,309
no text for you and probably don't want

00:43:37,780 --> 00:43:41,170
to set it to error but you can do this

00:43:39,309 --> 00:43:43,119
already in the config you can just do a

00:43:41,170 --> 00:43:44,619
two line ticket config file that says

00:43:43,119 --> 00:43:47,470
for my service loader

00:43:44,619 --> 00:43:49,599
I want error do not start ticket if

00:43:47,470 --> 00:43:54,970
stuff is missing or warned just tell me

00:43:49,599 --> 00:43:58,359
what's going on so you the audience uses

00:43:54,970 --> 00:44:01,930
what we need your input on one of them

00:43:58,359 --> 00:44:04,119
is ticker gives text through a content

00:44:01,930 --> 00:44:08,470
handler and there's no easy way to

00:44:04,119 --> 00:44:11,589
rewind that and say hey you know how 10

00:44:08,470 --> 00:44:13,359
minutes ago I gave you some HTML as now

00:44:11,589 --> 00:44:14,920
run it through the language detection

00:44:13,359 --> 00:44:15,890
and I want to say that the title is in

00:44:14,920 --> 00:44:18,690
Spanish

00:44:15,890 --> 00:44:21,590
you can't you can't rewind the content

00:44:18,690 --> 00:44:23,850
handler to go back and augment that

00:44:21,590 --> 00:44:26,880
particular snippet of text with a

00:44:23,850 --> 00:44:28,950
language or go back and say that bit of

00:44:26,880 --> 00:44:30,720
text that's talking about a place that's

00:44:28,950 --> 00:44:34,890
in Miami with these latitude longitude

00:44:30,720 --> 00:44:36,720
and we can't say hey I gave three pages

00:44:34,890 --> 00:44:38,580
worth of text and then the parser died

00:44:36,720 --> 00:44:40,260
so I'm going to try another parser can

00:44:38,580 --> 00:44:43,650
we just throw all that stuff away and

00:44:40,260 --> 00:44:45,690
try again if you know of really good

00:44:43,650 --> 00:44:48,450
models for doing this sort of stuff that

00:44:45,690 --> 00:44:50,670
other people have solved tell us we

00:44:48,450 --> 00:44:52,410
don't want to reinvent the wheel but

00:44:50,670 --> 00:44:54,930
it's currently looking like we may have

00:44:52,410 --> 00:44:56,940
to because we'd like to know if there's

00:44:54,930 --> 00:45:00,240
other ways of doing a sort of streaming

00:44:56,940 --> 00:45:05,040
sax like Bing but also get go back and

00:45:00,240 --> 00:45:07,410
change things later then when we've got

00:45:05,040 --> 00:45:09,450
that sorted we can try and do some of

00:45:07,410 --> 00:45:11,790
the content enhancement nicer things

00:45:09,450 --> 00:45:14,130
like when you've when you're processing

00:45:11,790 --> 00:45:15,930
this text I want you to go through

00:45:14,130 --> 00:45:18,930
looking for place names when we're

00:45:15,930 --> 00:45:20,910
processing this PDF text I want you to

00:45:18,930 --> 00:45:24,810
more easily run it through robin and

00:45:20,910 --> 00:45:26,670
annotate things and then also do the

00:45:24,810 --> 00:45:28,770
translations can't really say when

00:45:26,670 --> 00:45:31,280
processing this I want you to do for

00:45:28,770 --> 00:45:38,820
each line do the Spanish and the English

00:45:31,280 --> 00:45:40,860
and metadata I think mostly we're okay

00:45:38,820 --> 00:45:43,290
there now with all the Dublin cool stuff

00:45:40,860 --> 00:45:44,370
and but if there's other metadata

00:45:43,290 --> 00:45:46,980
standards you think we should be

00:45:44,370 --> 00:45:48,780
supporting let us know the big thing

00:45:46,980 --> 00:45:51,390
we're still wondering about is the

00:45:48,780 --> 00:45:53,430
richer metadata how we handle things

00:45:51,390 --> 00:45:58,350
like that video case with the multiple

00:45:53,430 --> 00:45:59,940
streams and I'm almost out of time so

00:45:58,350 --> 00:46:01,800
the slides are going to go up in a

00:45:59,940 --> 00:46:04,260
minute if you're interested got a whole

00:46:01,800 --> 00:46:06,360
bunch of slides here on how to make tika

00:46:04,260 --> 00:46:10,350
scale and the kind of things that go

00:46:06,360 --> 00:46:12,720
wrong when you run tika on significant

00:46:10,350 --> 00:46:14,700
portions of the Internet and dealing

00:46:12,720 --> 00:46:16,380
with all the failures that crop up so

00:46:14,700 --> 00:46:22,350
into some that have a look through those

00:46:16,380 --> 00:46:25,320
slides and yeah tomorrow 2:40 brickle

00:46:22,350 --> 00:46:28,680
which is the one just over there hit him

00:46:25,320 --> 00:46:29,670
talking about the Tiki eval making sense

00:46:28,680 --> 00:46:31,290
of

00:46:29,670 --> 00:46:36,920
two terabytes worth of data and

00:46:31,290 --> 00:46:59,220
comparisons lunch starts in two minutes

00:46:36,920 --> 00:47:13,859
okay at the moment no we just hand off

00:46:59,220 --> 00:47:15,890
the raw image I didn't know monsters but

00:47:13,859 --> 00:47:18,270
the tesseract is getting better

00:47:15,890 --> 00:47:21,299
they're throwing redundant arrays of

00:47:18,270 --> 00:47:25,859
graduate students at tesseract some of

00:47:21,299 --> 00:47:26,790
that stuff that yeah so rather than you

00:47:25,859 --> 00:47:28,260
having to do a lot of these

00:47:26,790 --> 00:47:36,869
pre-processing steps in place then it's

00:47:28,260 --> 00:47:38,549
now getting easier to happen um tell

00:47:36,869 --> 00:47:48,299
DARPA that they want it and will

00:47:38,549 --> 00:47:52,619
probably get it for free yeah so I think

00:47:48,299 --> 00:47:55,859
the issue is that there's no free good

00:47:52,619 --> 00:47:57,299
libraries available and so it's going to

00:47:55,859 --> 00:48:01,500
have to be one of these machine learning

00:47:57,299 --> 00:48:04,559
things and and that that's more than a

00:48:01,500 --> 00:48:06,660
week's work so we need to find a keen

00:48:04,559 --> 00:48:08,069
graduate student get them set up on one

00:48:06,660 --> 00:48:09,930
of these things build the training data

00:48:08,069 --> 00:48:13,260
set the same way that we've done with

00:48:09,930 --> 00:48:14,790
the image recognition but if we've

00:48:13,260 --> 00:48:16,740
missed the really obvious library please

00:48:14,790 --> 00:48:19,440
tell us them we can add it in quickly

00:48:16,740 --> 00:48:21,390
but a lot of this stuff it it does take

00:48:19,440 --> 00:48:22,799
a lot of work to build those training

00:48:21,390 --> 00:48:25,980
datasets build those training tools

00:48:22,799 --> 00:48:27,210
build model and then it's quite easy to

00:48:25,980 --> 00:48:30,089
hook you in particular once you've got

00:48:27,210 --> 00:48:33,000
that model and most of the existing

00:48:30,089 --> 00:48:34,230
models exist our proprietary I don't

00:48:33,000 --> 00:48:36,450
think we can really bring that Apple and

00:48:34,230 --> 00:48:39,000
say hey can we have your Siri language

00:48:36,450 --> 00:48:41,980
training set and then a little bit

00:48:39,000 --> 00:48:44,950
tetchy about that for commercial reasons

00:48:41,980 --> 00:49:01,690
so we end up having to do do our own

00:48:44,950 --> 00:49:04,540
training and do it that way no shouldn't

00:49:01,690 --> 00:49:09,180
be it's all pure Java fully we

00:49:04,540 --> 00:49:11,380
implemented so there there could be

00:49:09,180 --> 00:49:13,920
there could be issues with it

00:49:11,380 --> 00:49:16,780
causing ticker to run out of memory if

00:49:13,920 --> 00:49:18,700
you can craft the right attachment that

00:49:16,780 --> 00:49:21,490
triggers the right bug in the underlying

00:49:18,700 --> 00:49:24,550
libraries you can get an out of memory

00:49:21,490 --> 00:49:27,040
and or make it run really slowly so

00:49:24,550 --> 00:49:31,060
that's why we often suggest that if

00:49:27,040 --> 00:49:34,690
you're taking in untrusted files you

00:49:31,060 --> 00:49:38,589
have some sort of watchdog or retry and

00:49:34,690 --> 00:49:40,270
if you're doing on Hadoop and yarn and

00:49:38,589 --> 00:49:43,270
things like that being aware of the

00:49:40,270 --> 00:49:46,359
default there is to say oh the GA VMs

00:49:43,270 --> 00:49:48,250
died I think it's the server okay let's

00:49:46,359 --> 00:49:50,400
stop using that server and go and find

00:49:48,250 --> 00:49:53,440
another server and give it today like Oh

00:49:50,400 --> 00:49:55,960
died dinner it must be a dodgy rack let

00:49:53,440 --> 00:49:59,109
me go and try another rack oh one of our

00:49:55,960 --> 00:50:01,720
servers here so you maybe need to kind

00:49:59,109 --> 00:50:04,119
of teach that that if something fails

00:50:01,720 --> 00:50:10,140
twice it's probably not the machine it's

00:50:04,119 --> 00:50:10,140
the input it's like it is bad one Mabel

00:50:15,869 --> 00:50:22,980
serialization vulnerability also

00:50:18,700 --> 00:50:22,980
identity those are both people on board

00:50:25,750 --> 00:50:32,160
okay everyone hungry shall we go

00:50:28,840 --> 00:50:36,490
okay well thank you for coming

00:50:32,160 --> 00:50:36,490

YouTube URL: https://www.youtube.com/watch?v=BNqecSYIS6A


