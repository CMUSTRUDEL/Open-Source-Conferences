Title: Another backend storage solution for the APM system
Publication date: 2020-10-16
Playlist: ApacheCon @Home 2020: Observability
Description: 
	Another backend storage solution for the APM system
Juan Pan

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

The APM system provides the tracing or metrics for distributed systems or microservice architectures. Back to APM themselves, they always need backend storage to store the necessary massive data. What are the features required for backend storage? Simple, fewer dependencies, widely used query language, and the efficiency could be into your consideration. Based on that, traditional SQL databases (like MySQL) or NoSQL databases would be better choices. However, this topic will present another backend storage solution for the APM system viewing from NewSQL. Taking Apache Skywalking for instance, this talking will share how to make use of Apache ShardingSphere, a distributed database middleware ecosystem to extend the APM system's storage capability.

As a senior DBA worked at JD.com, the responsibility is to develop the distributed database and middleware, and the automated management platform for database clusters. As a PMC of Apache ShardingSphere, I am willing to contribute to the OS community and explore the area of distributed databases and NewSQL.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:26,400 --> 00:00:30,800
um

00:00:27,199 --> 00:00:34,160
hello everyone and i'm not sure it

00:00:30,800 --> 00:00:34,160
works well or not

00:00:35,680 --> 00:00:47,680
okay so

00:00:44,000 --> 00:00:50,640
so let's start my uh talking

00:00:47,680 --> 00:00:51,199
today uh i want to give my talking to

00:00:50,640 --> 00:00:54,239
about

00:00:51,199 --> 00:00:55,920
another viking story solution for the

00:00:54,239 --> 00:01:00,239
apm system

00:00:55,920 --> 00:01:03,520
uh here is the biography about myself

00:01:00,239 --> 00:01:07,520
and pension you can call me chista

00:01:03,520 --> 00:01:11,200
and now i worked at jd.com

00:01:07,520 --> 00:01:12,080
in china as a senior dba and my

00:01:11,200 --> 00:01:15,200
professional

00:01:12,080 --> 00:01:16,400
it's about distributed database

00:01:15,200 --> 00:01:19,680
middlewire

00:01:16,400 --> 00:01:20,720
and distribute database in open source

00:01:19,680 --> 00:01:24,320
community

00:01:20,720 --> 00:01:27,680
i got involved in

00:01:24,320 --> 00:01:31,200
apache community as the sharing sofia

00:01:27,680 --> 00:01:34,479
pmc okay this

00:01:31,200 --> 00:01:37,680
is a brave introduction about

00:01:34,479 --> 00:01:41,040
myself i will give my

00:01:37,680 --> 00:01:44,640
talking this talking will contain four

00:01:41,040 --> 00:01:48,960
parts first one will give the

00:01:44,640 --> 00:01:53,119
apm overview it will introduce the

00:01:48,960 --> 00:01:56,159
basic process of apm system

00:01:53,119 --> 00:02:00,320
the part two it's about icann

00:01:56,159 --> 00:02:03,920
storage uh we will analyze that

00:02:00,320 --> 00:02:07,040
the what's the requirements or needs for

00:02:03,920 --> 00:02:10,000
bike and storage um part three

00:02:07,040 --> 00:02:11,280
it's about apartheid sharing sofia we

00:02:10,000 --> 00:02:14,879
can consider

00:02:11,280 --> 00:02:19,120
whether we can use it as one option

00:02:14,879 --> 00:02:23,200
for viking storage for the apm system

00:02:19,120 --> 00:02:26,400
so the last one will give the details

00:02:23,200 --> 00:02:29,120
about this solution okay

00:02:26,400 --> 00:02:29,680
so let's get straight down with the part

00:02:29,120 --> 00:02:33,440
one

00:02:29,680 --> 00:02:37,440
apm overview um here is the

00:02:33,440 --> 00:02:41,200
diagram and you can see here generally

00:02:37,440 --> 00:02:44,879
the apm system will provide

00:02:41,200 --> 00:02:45,599
like the agent which will connect the

00:02:44,879 --> 00:02:48,879
data

00:02:45,599 --> 00:02:52,319
from the application and

00:02:48,879 --> 00:02:55,519
send this application to the server

00:02:52,319 --> 00:02:56,239
the connector of the server will receive

00:02:55,519 --> 00:03:00,480
the data

00:02:56,239 --> 00:03:03,120
and push them into the backend storage

00:03:00,480 --> 00:03:04,159
therefore if we want to show you there's

00:03:03,120 --> 00:03:07,519
some uh

00:03:04,159 --> 00:03:11,120
interesting information like a

00:03:07,519 --> 00:03:14,640
dashboard or like um tracing view

00:03:11,120 --> 00:03:18,080
or topology on the ui then

00:03:14,640 --> 00:03:20,319
the aggregator of the server will

00:03:18,080 --> 00:03:21,360
send some acquirings to the biker

00:03:20,319 --> 00:03:24,879
storage

00:03:21,360 --> 00:03:28,239
and do some calculation prepare the

00:03:24,879 --> 00:03:31,519
readout for the ui so um

00:03:28,239 --> 00:03:35,680
this is the basic precise for popular

00:03:31,519 --> 00:03:39,519
atm system but today we will focus on

00:03:35,680 --> 00:03:44,640
the back-end storage as you know it's

00:03:39,519 --> 00:03:48,239
essential for most of apm system

00:03:44,640 --> 00:03:52,080
after i looking into different

00:03:48,239 --> 00:03:55,599
uh popular apm system

00:03:52,080 --> 00:03:59,040
that i found most of them

00:03:55,599 --> 00:04:04,080
will use the following solutions

00:03:59,040 --> 00:04:04,080
like elasticsearch concentrate

00:04:04,159 --> 00:04:12,000
mysql and h2 for test

00:04:07,599 --> 00:04:15,439
environment so the question is here that

00:04:12,000 --> 00:04:19,840
why do this popular apm status

00:04:15,439 --> 00:04:23,360
system use these solutions

00:04:19,840 --> 00:04:27,520
i will give a quick answer because

00:04:23,360 --> 00:04:31,759
these solutions meet the requirements

00:04:27,520 --> 00:04:35,919
like these first capability

00:04:31,759 --> 00:04:37,440
audio every minute the apm system will

00:04:35,919 --> 00:04:41,199
connect

00:04:37,440 --> 00:04:44,160
massive data from the application

00:04:41,199 --> 00:04:45,600
therefore if this solution can have this

00:04:44,160 --> 00:04:50,000
capability

00:04:45,600 --> 00:04:53,520
or can have a huge space or capacity

00:04:50,000 --> 00:04:56,560
the apm system we don't worry that the

00:04:53,520 --> 00:05:00,479
data connected reach

00:04:56,560 --> 00:05:03,520
the space limit as quickly as possible

00:05:00,479 --> 00:05:06,720
right so the second one it's about

00:05:03,520 --> 00:05:10,080
simple acquiring um because

00:05:06,720 --> 00:05:13,360
when we hand over to the relationship of

00:05:10,080 --> 00:05:14,160
two applications we'll consider that

00:05:13,360 --> 00:05:16,960
this

00:05:14,160 --> 00:05:17,759
application can provide can this

00:05:16,960 --> 00:05:21,120
application

00:05:17,759 --> 00:05:25,120
provide simple query api

00:05:21,120 --> 00:05:28,720
for us to use especially for sql

00:05:25,120 --> 00:05:31,840
because most of developers are similar

00:05:28,720 --> 00:05:35,759
with this language which will

00:05:31,840 --> 00:05:39,039
simplify the programming work

00:05:35,759 --> 00:05:42,320
the next one is reliability

00:05:39,039 --> 00:05:44,720
i think it's a common factor when we

00:05:42,320 --> 00:05:47,680
decide to use a product

00:05:44,720 --> 00:05:48,000
we will consider that this project have

00:05:47,680 --> 00:05:51,199
a

00:05:48,000 --> 00:05:52,080
activity community if i have any

00:05:51,199 --> 00:05:55,039
questions

00:05:52,080 --> 00:05:55,600
i need some help i get my answer or

00:05:55,039 --> 00:05:59,440
helps

00:05:55,600 --> 00:06:02,479
as quickly as possible or does this

00:05:59,440 --> 00:06:06,240
uh if this product popular in the

00:06:02,479 --> 00:06:09,759
industry if so we will consider

00:06:06,240 --> 00:06:13,360
or it reflects this product

00:06:09,759 --> 00:06:17,120
is relatively reliable right

00:06:13,360 --> 00:06:20,720
okay so the last one is tgl

00:06:17,120 --> 00:06:23,759
which means time to leave

00:06:20,720 --> 00:06:28,160
this is some specific factor for

00:06:23,759 --> 00:06:28,960
apm system because the data or recourse

00:06:28,160 --> 00:06:32,400
connected

00:06:28,960 --> 00:06:35,440
from the agent will always have them

00:06:32,400 --> 00:06:38,560
in properties like datatime

00:06:35,440 --> 00:06:42,639
or data and the

00:06:38,560 --> 00:06:43,120
application will do fewer acquirings for

00:06:42,639 --> 00:06:46,720
this

00:06:43,120 --> 00:06:50,240
history data therefore we hope

00:06:46,720 --> 00:06:53,280
that the solution can help us to remove

00:06:50,240 --> 00:06:56,800
or delete this history or

00:06:53,280 --> 00:07:00,319
steal data from the system

00:06:56,800 --> 00:07:01,120
if this if this database cannot do those

00:07:00,319 --> 00:07:04,240
things

00:07:01,120 --> 00:07:07,599
then the apm system have to do it

00:07:04,240 --> 00:07:10,479
by themselves so from

00:07:07,599 --> 00:07:11,199
this solution list we can found that

00:07:10,479 --> 00:07:14,840
there are

00:07:11,199 --> 00:07:18,000
three no sql solutions

00:07:14,840 --> 00:07:21,919
elasticsearch consignor hbase

00:07:18,000 --> 00:07:25,199
and mysql is traditional dbms

00:07:21,919 --> 00:07:28,240
the last one h2 is for test environment

00:07:25,199 --> 00:07:31,599
but today i want to introduce an

00:07:28,240 --> 00:07:34,800
institution with new sql

00:07:31,599 --> 00:07:39,280
technique so

00:07:34,800 --> 00:07:43,280
um new sql also called is also called

00:07:39,280 --> 00:07:44,080
scalable sql the main purpose of this

00:07:43,280 --> 00:07:47,520
concept

00:07:44,080 --> 00:07:50,319
is to make the traditional dbms

00:07:47,520 --> 00:07:52,479
with this capability or make the

00:07:50,319 --> 00:07:55,919
traditional database clusters

00:07:52,479 --> 00:08:00,080
have a very huge or enormous

00:07:55,919 --> 00:08:04,319
capacity and

00:08:00,080 --> 00:08:07,360
there are three type of base concept

00:08:04,319 --> 00:08:10,479
first new architecture which means

00:08:07,360 --> 00:08:13,440
you create a distributed database

00:08:10,479 --> 00:08:14,319
from the scratch the second one is

00:08:13,440 --> 00:08:17,360
transparent

00:08:14,319 --> 00:08:20,879
shirting of like convenience or

00:08:17,360 --> 00:08:24,400
sitters or a partitioning sofia and

00:08:20,879 --> 00:08:27,199
in this this speak of this implement

00:08:24,400 --> 00:08:28,319
you also need a traditional database

00:08:27,199 --> 00:08:31,680
cluster

00:08:28,319 --> 00:08:35,599
but you will build or create

00:08:31,680 --> 00:08:36,320
a middlewire to help the applications or

00:08:35,599 --> 00:08:40,479
users

00:08:36,320 --> 00:08:42,800
to manage the database clusters

00:08:40,479 --> 00:08:44,159
uh the last one is database other

00:08:42,800 --> 00:08:47,279
service as you know

00:08:44,159 --> 00:08:51,360
like um amazon website surveys

00:08:47,279 --> 00:08:54,480
it provides the database other services

00:08:51,360 --> 00:08:58,080
some cloud vendor or database vendor

00:08:54,480 --> 00:09:01,360
will do such things for the users

00:08:58,080 --> 00:09:04,480
no matter which it is the basic

00:09:01,360 --> 00:09:09,200
purpose of them is that to make

00:09:04,480 --> 00:09:13,200
it as a single logic db

00:09:09,200 --> 00:09:16,399
so um we will focus on the

00:09:13,200 --> 00:09:17,760
uh the second one like you can see

00:09:16,399 --> 00:09:20,480
transparent shirting

00:09:17,760 --> 00:09:21,360
because apache sharing sofia is one

00:09:20,480 --> 00:09:24,959
implement

00:09:21,360 --> 00:09:28,240
of this type uh we will consider

00:09:24,959 --> 00:09:31,839
that certain sofia can be

00:09:28,240 --> 00:09:35,200
a backhand storage solution for the apm

00:09:31,839 --> 00:09:38,720
system so this is some

00:09:35,200 --> 00:09:42,080
brave introduction about sharing sofia

00:09:38,720 --> 00:09:45,760
as you can see it's the webpage

00:09:42,080 --> 00:09:49,600
and github status and also

00:09:45,760 --> 00:09:53,360
it defined itself as um

00:09:49,600 --> 00:09:56,399
distributes database ecosystem

00:09:53,360 --> 00:09:59,680
so why does it define itself

00:09:56,399 --> 00:10:03,120
as an ecosystem not a simple

00:09:59,680 --> 00:10:07,120
database and a middle wire i think

00:10:03,120 --> 00:10:10,560
the next life will give us the answer

00:10:07,120 --> 00:10:13,920
this is a diagram about its architecture

00:10:10,560 --> 00:10:16,480
you can see um

00:10:13,920 --> 00:10:17,279
apart from the shirting feature it also

00:10:16,480 --> 00:10:19,600
provides

00:10:17,279 --> 00:10:20,880
other features like distributed

00:10:19,600 --> 00:10:23,519
transaction

00:10:20,880 --> 00:10:24,480
or encryption you can contact data

00:10:23,519 --> 00:10:28,079
masking

00:10:24,480 --> 00:10:32,800
or shadow or database governments

00:10:28,079 --> 00:10:36,240
it provides user a lot of features

00:10:32,800 --> 00:10:37,600
plus it also provides two clients for

00:10:36,240 --> 00:10:42,000
you to choose

00:10:37,600 --> 00:10:45,600
first product is called shorting gdbc

00:10:42,000 --> 00:10:49,600
it's a lightweight java framework

00:10:45,600 --> 00:10:51,279
and it can provide them extra service or

00:10:49,600 --> 00:10:53,839
functions like i size

00:10:51,279 --> 00:10:55,360
sharing distributed transaction in the

00:10:53,839 --> 00:10:58,399
gdbc liar

00:10:55,360 --> 00:11:01,519
so i think it's very friendly for

00:10:58,399 --> 00:11:04,640
java developers another

00:11:01,519 --> 00:11:08,240
project is called sharing proxy

00:11:04,640 --> 00:11:11,440
showing proxy it's um you you

00:11:08,240 --> 00:11:14,480
you need to deploy it independently

00:11:11,440 --> 00:11:17,920
and the user use it as they use

00:11:14,480 --> 00:11:21,360
a advanced mysql server

00:11:17,920 --> 00:11:25,360
or post-degree sql server so

00:11:21,360 --> 00:11:29,440
we call it advanced mysql server

00:11:25,360 --> 00:11:30,640
because it provide them mysql basic

00:11:29,440 --> 00:11:33,760
functions

00:11:30,640 --> 00:11:34,880
also provide sharing distributed

00:11:33,760 --> 00:11:38,079
transaction

00:11:34,880 --> 00:11:41,360
encryption feature and governance

00:11:38,079 --> 00:11:42,240
but today we only focus on the shutting

00:11:41,360 --> 00:11:45,680
proxy

00:11:42,240 --> 00:11:49,040
with the shirting feature to consider

00:11:45,680 --> 00:11:53,279
whether we can use this product to be

00:11:49,040 --> 00:11:56,560
one option for backhand storage

00:11:53,279 --> 00:11:57,920
but before i introducing the details

00:11:56,560 --> 00:12:01,440
about the solution

00:11:57,920 --> 00:12:04,959
we can get a little or

00:12:01,440 --> 00:12:08,079
brief introduction understanding

00:12:04,959 --> 00:12:11,519
about shirting here

00:12:08,079 --> 00:12:14,720
maybe at first you have um

00:12:11,519 --> 00:12:18,000
mysql instance and a single

00:12:14,720 --> 00:12:20,399
mysql instance and that's enough but

00:12:18,000 --> 00:12:21,120
along with the time that you found the

00:12:20,399 --> 00:12:24,320
datum

00:12:21,120 --> 00:12:27,680
storage is reaching the

00:12:24,320 --> 00:12:31,519
capacity therefore you have two ways

00:12:27,680 --> 00:12:34,880
to solve this issue first one you split

00:12:31,519 --> 00:12:37,440
um the instance into different ones

00:12:34,880 --> 00:12:38,000
including different tables the second

00:12:37,440 --> 00:12:41,120
that

00:12:38,000 --> 00:12:44,240
you create replica for your

00:12:41,120 --> 00:12:48,160
primary nodes and these replicas

00:12:44,240 --> 00:12:51,440
help to lighten the burden

00:12:48,160 --> 00:12:55,279
of the for the primary nodes

00:12:51,440 --> 00:12:56,560
another efficient way is you use the two

00:12:55,279 --> 00:12:59,040
ways together

00:12:56,560 --> 00:13:00,639
therefore the relationship among

00:12:59,040 --> 00:13:03,680
different

00:13:00,639 --> 00:13:05,360
primary nodes and directly cast will

00:13:03,680 --> 00:13:09,839
become very

00:13:05,360 --> 00:13:13,279
complicated in this case

00:13:09,839 --> 00:13:16,320
we can import database middleware

00:13:13,279 --> 00:13:19,040
therefore we can the database

00:13:16,320 --> 00:13:20,560
middleware can help user to manage the

00:13:19,040 --> 00:13:23,120
database clusters

00:13:20,560 --> 00:13:24,560
and for your application you just to

00:13:23,120 --> 00:13:28,800
send your acquirings

00:13:24,560 --> 00:13:31,920
to this middlewire so it will very easy

00:13:28,800 --> 00:13:35,680
right uh the sharing proxy will help you

00:13:31,920 --> 00:13:39,199
help user do such things you can see

00:13:35,680 --> 00:13:42,240
this is the initial solution

00:13:39,199 --> 00:13:42,880
but then when we import sharing proxy it

00:13:42,240 --> 00:13:46,240
will help

00:13:42,880 --> 00:13:47,600
further manage database clusters or you

00:13:46,240 --> 00:13:50,639
can see

00:13:47,600 --> 00:13:53,760
the sharing proxy help make this

00:13:50,639 --> 00:13:57,600
database cluster has the

00:13:53,760 --> 00:13:57,600
uh capability

00:13:57,839 --> 00:14:04,240
um today i will take the

00:14:00,880 --> 00:14:04,720
apache sky walking for instance to give

00:14:04,240 --> 00:14:07,839
the

00:14:04,720 --> 00:14:09,279
details about the solution because now

00:14:07,839 --> 00:14:13,519
i'm working in this

00:14:09,279 --> 00:14:13,519
issue sorry for that

00:14:14,320 --> 00:14:18,639
here is the changing view of the apache

00:14:17,199 --> 00:14:21,680
sky working

00:14:18,639 --> 00:14:23,360
um when i decide to start this issue i

00:14:21,680 --> 00:14:27,440
will consider

00:14:23,360 --> 00:14:31,519
doesn't apache shooting sofia

00:14:27,440 --> 00:14:35,040
fit fit this apm system

00:14:31,519 --> 00:14:38,560
after i do some investigation that i

00:14:35,040 --> 00:14:42,880
found that there are two um

00:14:38,560 --> 00:14:45,920
main uh requirements for

00:14:42,880 --> 00:14:49,120
for the bikini storage of apache

00:14:45,920 --> 00:14:52,160
skywalking first is massive

00:14:49,120 --> 00:14:54,800
volume because like i said before

00:14:52,160 --> 00:14:56,160
every minute apache skywalking will

00:14:54,800 --> 00:14:59,279
connect

00:14:56,160 --> 00:15:02,560
massive data from the agents

00:14:59,279 --> 00:15:03,839
therefore um they need the help the

00:15:02,560 --> 00:15:06,800
storage can

00:15:03,839 --> 00:15:07,760
have this capability or cap have

00:15:06,800 --> 00:15:11,040
enormous

00:15:07,760 --> 00:15:14,399
capacity uh even in

00:15:11,040 --> 00:15:17,760
even there is so massive records

00:15:14,399 --> 00:15:18,720
in the storage uh skywalking also hope

00:15:17,760 --> 00:15:21,920
that they can

00:15:18,720 --> 00:15:25,199
gather results as quickly as possible

00:15:21,920 --> 00:15:26,720
which means query efficiency the second

00:15:25,199 --> 00:15:30,880
one is that

00:15:26,720 --> 00:15:33,600
sql acquiring because in some scenario

00:15:30,880 --> 00:15:34,000
sky working will do some queries with

00:15:33,600 --> 00:15:37,279
this

00:15:34,000 --> 00:15:42,000
language based on these two

00:15:37,279 --> 00:15:45,440
requirements that i found shorting sofia

00:15:42,000 --> 00:15:49,839
fits the shirting sky working

00:15:45,440 --> 00:15:53,759
so i started this work or this issue

00:15:49,839 --> 00:15:57,120
the very first and most important step

00:15:53,759 --> 00:16:00,240
is to review all the tables

00:15:57,120 --> 00:16:03,519
and queries of sky

00:16:00,240 --> 00:16:06,639
walking because i need to find

00:16:03,519 --> 00:16:10,079
the sharding table starting key and

00:16:06,639 --> 00:16:13,839
shirting algorithm a shirting table

00:16:10,079 --> 00:16:18,320
means the target table that you need to

00:16:13,839 --> 00:16:22,240
shard sharing key like the global unique

00:16:18,320 --> 00:16:25,360
id we will assign

00:16:22,240 --> 00:16:29,120
the specific record to one table by

00:16:25,360 --> 00:16:32,560
sharing key or by means of sharing key

00:16:29,120 --> 00:16:36,240
we can get them without

00:16:32,560 --> 00:16:39,600
expected so the sharing algorithm

00:16:36,240 --> 00:16:42,720
like how we split or

00:16:39,600 --> 00:16:45,839
chart or tables and instance

00:16:42,720 --> 00:16:49,040
um like you can use module

00:16:45,839 --> 00:16:52,480
algorithm uh other records

00:16:49,040 --> 00:16:56,480
with other even sharing key

00:16:52,480 --> 00:16:59,519
will be signed one table all the records

00:16:56,480 --> 00:17:02,959
within odd sharing key

00:16:59,519 --> 00:17:04,959
will be routed to another table or maybe

00:17:02,959 --> 00:17:08,240
if you want to store some

00:17:04,959 --> 00:17:09,679
a long records you can make the shirting

00:17:08,240 --> 00:17:13,520
algorithm like

00:17:09,679 --> 00:17:16,640
one day one shirting table so

00:17:13,520 --> 00:17:19,520
after these reviews the

00:17:16,640 --> 00:17:19,919
next steps will become very easy you

00:17:19,520 --> 00:17:22,720
just

00:17:19,919 --> 00:17:23,280
need to deploy the shirting proxy

00:17:22,720 --> 00:17:26,319
prepare

00:17:23,280 --> 00:17:30,480
the complication based on

00:17:26,319 --> 00:17:34,160
three important items

00:17:30,480 --> 00:17:37,919
and uh test test it

00:17:34,160 --> 00:17:41,440
right so here is a brave example

00:17:37,919 --> 00:17:45,360
to prove that how should in sofia

00:17:41,440 --> 00:17:48,799
improve the query efficiency

00:17:45,360 --> 00:17:52,720
um maybe at first there is some

00:17:48,799 --> 00:17:56,720
like poster sql database and

00:17:52,720 --> 00:17:59,440
this query is sent to the instance

00:17:56,720 --> 00:18:00,000
which means the application will gather

00:17:59,440 --> 00:18:03,200
it out

00:18:00,000 --> 00:18:06,559
from 10 million records

00:18:03,200 --> 00:18:10,240
but when sharing props you receive this

00:18:06,559 --> 00:18:11,600
same requiring it to do some analyte

00:18:10,240 --> 00:18:14,720
that i found maybe

00:18:11,600 --> 00:18:15,840
this sql just to just need to be

00:18:14,720 --> 00:18:19,039
executed

00:18:15,840 --> 00:18:20,080
in two charts which means you will

00:18:19,039 --> 00:18:23,840
gather it out

00:18:20,080 --> 00:18:26,320
from two millings what's more

00:18:23,840 --> 00:18:27,600
shooting plus will parallelize the

00:18:26,320 --> 00:18:31,200
execution

00:18:27,600 --> 00:18:33,840
so it will improve the query efficiency

00:18:31,200 --> 00:18:33,840
furthermore

00:18:34,960 --> 00:18:38,559
but here is another important target the

00:18:37,919 --> 00:18:41,840
topic

00:18:38,559 --> 00:18:44,960
about this solution because maybe

00:18:41,840 --> 00:18:48,320
your system is online already therefore

00:18:44,960 --> 00:18:52,480
if you want to import the sharing proxy

00:18:48,320 --> 00:18:55,919
you need to navigate your history data

00:18:52,480 --> 00:18:59,360
to the new data database cluster

00:18:55,919 --> 00:19:00,240
namely shooting proxy trading sphere

00:18:59,360 --> 00:19:03,520
provides

00:19:00,240 --> 00:19:07,120
a migration tool called sharing

00:19:03,520 --> 00:19:10,400
scaling it will help user to

00:19:07,120 --> 00:19:13,600
migrate data from the original one

00:19:10,400 --> 00:19:16,320
to the new database cluster it

00:19:13,600 --> 00:19:17,520
will first it will migrate the history

00:19:16,320 --> 00:19:20,880
data

00:19:17,520 --> 00:19:24,000
and then as you know

00:19:20,880 --> 00:19:27,039
the original database will receive

00:19:24,000 --> 00:19:31,039
the changes or modifications

00:19:27,039 --> 00:19:34,320
while we migrate the history data

00:19:31,039 --> 00:19:37,520
therefore the next step is for us is to

00:19:34,320 --> 00:19:38,559
handle the incremental data streaming

00:19:37,520 --> 00:19:41,760
skilling will

00:19:38,559 --> 00:19:42,799
subscribe the battery lock and transform

00:19:41,760 --> 00:19:46,160
this log

00:19:42,799 --> 00:19:50,240
into actual sql and apply this

00:19:46,160 --> 00:19:54,000
xql into to the new database cluster

00:19:50,240 --> 00:19:56,799
and then in a specific time you

00:19:54,000 --> 00:19:58,400
need your application stop writing or

00:19:56,799 --> 00:20:00,880
reading or querying

00:19:58,400 --> 00:20:03,120
and changing application to connect a

00:20:00,880 --> 00:20:07,440
new database cluster

00:20:03,120 --> 00:20:10,240
then all sites so

00:20:07,440 --> 00:20:10,720
here is the to-do list i prepared for

00:20:10,240 --> 00:20:14,080
you

00:20:10,720 --> 00:20:17,200
if you want to import starting

00:20:14,080 --> 00:20:21,840
a proxy as one option

00:20:17,200 --> 00:20:21,840
of your back-end storage

00:20:23,600 --> 00:20:29,919
the next slide slide it's about a

00:20:27,120 --> 00:20:30,799
brave comparison about shorting sofia

00:20:29,919 --> 00:20:34,240
and other

00:20:30,799 --> 00:20:37,440
solutions but i want to say that

00:20:34,240 --> 00:20:40,880
each solution has its props and counts

00:20:37,440 --> 00:20:44,159
uh we will always focus on the

00:20:40,880 --> 00:20:47,440
cons for shorting sofia the first

00:20:44,159 --> 00:20:50,640
invention currently ttl feature

00:20:47,440 --> 00:20:54,799
is unsupported and the

00:20:50,640 --> 00:20:58,240
next one is that so-called sql limits

00:20:54,799 --> 00:21:01,440
maybe in the original database your

00:20:58,240 --> 00:21:04,720
query rings works well but some

00:21:01,440 --> 00:21:08,080
sql cannot work well or cannot sport it

00:21:04,720 --> 00:21:08,640
in uh shutting proxy therefore you need

00:21:08,080 --> 00:21:11,840
to do

00:21:08,640 --> 00:21:11,840
some modification

00:21:12,880 --> 00:21:16,320
uh the last one last slide it's about

00:21:15,760 --> 00:21:19,679
the

00:21:16,320 --> 00:21:22,320
uterus and if you worry that

00:21:19,679 --> 00:21:23,600
does this product have an activity

00:21:22,320 --> 00:21:26,799
community

00:21:23,600 --> 00:21:30,320
or uh does it does this

00:21:26,799 --> 00:21:34,159
production have many others then i think

00:21:30,320 --> 00:21:34,159
this slide will tell you the answer

00:21:35,280 --> 00:21:41,200
okay so you can contact

00:21:38,640 --> 00:21:42,720
us by the following ways if you want to

00:21:41,200 --> 00:21:49,039
learn more information

00:21:42,720 --> 00:21:49,039
about it stands for aries listening

00:21:51,840 --> 00:21:56,640
so does anyone have any questions

00:21:57,360 --> 00:21:59,840
thank you

00:22:18,799 --> 00:22:20,880

YouTube URL: https://www.youtube.com/watch?v=OazS_3r3NM4


