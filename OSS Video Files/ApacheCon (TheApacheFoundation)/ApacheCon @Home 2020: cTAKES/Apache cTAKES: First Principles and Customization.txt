Title: Apache cTAKES: First Principles and Customization
Publication date: 2020-10-14
Playlist: ApacheCon @Home 2020: cTAKES
Description: 
	Apache cTAKES: First Principles and Customization
Sean Finan

A presentation from ApacheCon @Home 2020
https://apachecon.com/acah2020/

Built using Apache UIMA, Apache clinical Text Analysis and Knowledge Extraction System (cTAKES) is a modular and extensible tool for Natural Language Processing. This is a quick start tutorial on adding custom elements to cTAKES. We illustrate creating simple classes to input, process and output data. This involves a concise overview of Apache uimaFIT and the cTAKES type system, as well as building a UIMA pipeline using piper files.

Sean Finan is a software developer in the Natural Language Processing lab at Boston Children's Hospital. He has worked with Apache cTAKES for the past 8 years, contributing code and supporting the community.
Captions: 
	00:00:06,420 --> 00:00:10,640
[Music]

00:00:14,160 --> 00:00:17,230
[Music]

00:00:31,920 --> 00:00:35,200
okay

00:00:32,559 --> 00:00:35,600
so for everyone that's in the session so

00:00:35,200 --> 00:00:37,600
far

00:00:35,600 --> 00:00:40,160
can you hear me just uh answer in the

00:00:37,600 --> 00:00:40,160
chat please

00:00:42,320 --> 00:00:45,840
excellent thank you

00:01:02,559 --> 00:01:07,280
okay so according to my clock it's about

00:01:05,439 --> 00:01:11,360
12 15 which is the

00:01:07,280 --> 00:01:12,560
start time of this session before i get

00:01:11,360 --> 00:01:14,320
into my talk

00:01:12,560 --> 00:01:16,400
i'd just like to make a few

00:01:14,320 --> 00:01:19,680
announcements

00:01:16,400 --> 00:01:22,880
uh so questions and answers

00:01:19,680 --> 00:01:27,119
please type them into the chat box

00:01:22,880 --> 00:01:30,159
and uh gandhi rajen is

00:01:27,119 --> 00:01:31,200
going to be moderating this talk so he

00:01:30,159 --> 00:01:34,720
will

00:01:31,200 --> 00:01:36,960
review the questions and comments and uh

00:01:34,720 --> 00:01:38,880
hopefully i finish within half an hour

00:01:36,960 --> 00:01:41,840
and then we'll get to the

00:01:38,880 --> 00:01:41,840
questions

00:01:58,000 --> 00:02:04,719
so this talk might be kind of

00:02:01,200 --> 00:02:08,319
a whirlwind i've got a lot to go over

00:02:04,719 --> 00:02:11,599
and uh

00:02:08,319 --> 00:02:14,400
i hope that it's not too fast and

00:02:11,599 --> 00:02:16,400
confusing for anyone

00:02:14,400 --> 00:02:18,560
another thing to note is that these

00:02:16,400 --> 00:02:21,680
presentations are all recorded

00:02:18,560 --> 00:02:24,480
and you should be able to look them up

00:02:21,680 --> 00:02:25,760
afterwards on youtube or perhaps some

00:02:24,480 --> 00:02:29,360
other platform

00:02:25,760 --> 00:02:31,440
i will also be putting these slides on

00:02:29,360 --> 00:02:34,800
uh the cta's website so that you can

00:02:31,440 --> 00:02:34,800
view them later on

00:02:34,879 --> 00:02:39,440
okay all that being said here we go

00:02:38,239 --> 00:02:41,840
i'm going to talk about the first

00:02:39,440 --> 00:02:44,239
principles of

00:02:41,840 --> 00:02:45,200
not so much nlp or natural language

00:02:44,239 --> 00:02:48,800
processing

00:02:45,200 --> 00:02:50,560
but what c-takes does with it

00:02:48,800 --> 00:02:53,040
and after that i'm going to go through

00:02:50,560 --> 00:02:55,920
some very simple customization

00:02:53,040 --> 00:02:57,920
basically some code that you can write

00:02:55,920 --> 00:03:05,840
for a simple pipeline

00:02:57,920 --> 00:03:05,840
and put it together and run it

00:03:05,920 --> 00:03:10,879
okay so uh c takes is a natural language

00:03:09,360 --> 00:03:13,040
processing system

00:03:10,879 --> 00:03:15,280
it extracts information from electronic

00:03:13,040 --> 00:03:18,080
medical record clinical text

00:03:15,280 --> 00:03:18,480
top level open source project and it has

00:03:18,080 --> 00:03:21,280
a

00:03:18,480 --> 00:03:23,599
pretty large user base all over the

00:03:21,280 --> 00:03:23,599
globe

00:03:26,000 --> 00:03:30,239
okay so it has a lot of key features

00:03:28,480 --> 00:03:33,760
these are also listed on the c

00:03:30,239 --> 00:03:37,760
takes website the last slide in this

00:03:33,760 --> 00:03:40,879
presentation is a series of links to

00:03:37,760 --> 00:03:44,640
mail groups and the cdx website so

00:03:40,879 --> 00:03:44,640
you'll be able to see those later on

00:03:44,720 --> 00:03:48,000
okay so we're going to go through a

00:03:46,480 --> 00:03:50,799
sample pipeline

00:03:48,000 --> 00:03:51,440
and this is not the only pipeline that

00:03:50,799 --> 00:03:53,439
you can

00:03:51,440 --> 00:03:54,879
run with c takes he takes is extremely

00:03:53,439 --> 00:03:57,680
versatile and i'll

00:03:54,879 --> 00:03:59,360
talk about that a little later so we've

00:03:57,680 --> 00:04:00,720
got some text it's very simple the

00:03:59,360 --> 00:04:03,280
patient underwent a ct

00:04:00,720 --> 00:04:05,519
scan in april which did not reveal

00:04:03,280 --> 00:04:08,720
lesions in his liver

00:04:05,519 --> 00:04:10,799
this is our basic pipeline perhaps not

00:04:08,720 --> 00:04:12,799
so basic

00:04:10,799 --> 00:04:14,000
don't worry if this is allowed in one

00:04:12,799 --> 00:04:16,879
screen i'm going to go through

00:04:14,000 --> 00:04:16,879
it bit by bit

00:04:17,120 --> 00:04:21,519
okay so we have boundary detection uh

00:04:19,680 --> 00:04:23,840
and basically right now it's saying that

00:04:21,519 --> 00:04:26,160
this is all within a sentence perhaps

00:04:23,840 --> 00:04:27,360
some other boundaries like a section

00:04:26,160 --> 00:04:29,759
tokenization

00:04:27,360 --> 00:04:31,520
so it separates in this case all the

00:04:29,759 --> 00:04:34,320
words and you can see at the end

00:04:31,520 --> 00:04:35,520
uh the period is actually a token of its

00:04:34,320 --> 00:04:39,040
own

00:04:35,520 --> 00:04:41,520
normalization so here some words

00:04:39,040 --> 00:04:42,880
actually have a normalized form

00:04:41,520 --> 00:04:46,880
underwent is undergo

00:04:42,880 --> 00:04:47,440
dead is due etc and part of speech

00:04:46,880 --> 00:04:50,960
tagging

00:04:47,440 --> 00:04:54,240
basically this is going to indicate what

00:04:50,960 --> 00:04:57,919
part of speech in english each

00:04:54,240 --> 00:04:58,960
token belongs to so we have all that

00:04:57,919 --> 00:05:01,120
done

00:04:58,960 --> 00:05:02,479
and the next part is using all the

00:05:01,120 --> 00:05:05,840
things that were put together

00:05:02,479 --> 00:05:08,160
from those components we can

00:05:05,840 --> 00:05:10,160
recognize entities so in this sentence

00:05:08,160 --> 00:05:11,360
we can recognize the ct scan as a

00:05:10,160 --> 00:05:14,080
procedure

00:05:11,360 --> 00:05:16,160
a lesion as a disease disorder and the

00:05:14,080 --> 00:05:18,639
liver as an anatomical site

00:05:16,160 --> 00:05:19,680
now you'll notice at the bottom of these

00:05:18,639 --> 00:05:23,600
peach colored

00:05:19,680 --> 00:05:27,440
boxes it says umls id

00:05:23,600 --> 00:05:31,360
this is a kui it's a normalized

00:05:27,440 --> 00:05:35,759
id a unique identifier

00:05:31,360 --> 00:05:40,240
that belongs to clinical events

00:05:35,759 --> 00:05:43,840
and anatomical sites i will

00:05:40,240 --> 00:05:43,840
repeat this a little bit later

00:05:44,000 --> 00:05:47,440
okay so the next thing we can do is

00:05:46,880 --> 00:05:49,440
chunk

00:05:47,440 --> 00:05:50,800
and this is basically putting together

00:05:49,440 --> 00:05:55,840
different parts of speech

00:05:50,800 --> 00:05:59,520
into chunks constituency parsing

00:05:55,840 --> 00:06:02,720
it splits out a tree of all these things

00:05:59,520 --> 00:06:07,600
dependency parsing much the same

00:06:02,720 --> 00:06:09,440
and uh semantic role labeling

00:06:07,600 --> 00:06:11,199
again i'm not going to get into the

00:06:09,440 --> 00:06:14,319
actual nlp components

00:06:11,199 --> 00:06:16,639
too much so

00:06:14,319 --> 00:06:18,880
all of these things make it possible to

00:06:16,639 --> 00:06:20,000
get entity properties for instance the

00:06:18,880 --> 00:06:22,479
ct scan

00:06:20,000 --> 00:06:24,160
we can see is not negated and its

00:06:22,479 --> 00:06:27,520
subject is the patient

00:06:24,160 --> 00:06:31,039
however the lesions again if you

00:06:27,520 --> 00:06:32,400
look at the sentence the ct scan did not

00:06:31,039 --> 00:06:35,840
reveal lesions

00:06:32,400 --> 00:06:38,240
so the lesion was negated and again the

00:06:35,840 --> 00:06:38,240
patient

00:06:40,479 --> 00:06:47,280
okay we can also get umls relations

00:06:43,840 --> 00:06:48,880
i will tell you what the mls is later

00:06:47,280 --> 00:06:51,120
for instance in this case we're getting

00:06:48,880 --> 00:06:54,880
the location of the lesions

00:06:51,120 --> 00:06:57,919
being at the liver

00:06:54,880 --> 00:06:59,039
okay we can also get event and temporal

00:06:57,919 --> 00:07:01,840
expressions

00:06:59,039 --> 00:07:03,280
in this case ct scan is an event april a

00:07:01,840 --> 00:07:07,199
temporal expression

00:07:03,280 --> 00:07:09,680
reveal and lesions to more events

00:07:07,199 --> 00:07:10,400
we can get relations between these

00:07:09,680 --> 00:07:13,599
events

00:07:10,400 --> 00:07:14,960
and times for instance april contains

00:07:13,599 --> 00:07:17,919
the ct scan

00:07:14,960 --> 00:07:18,479
and the ct scan contains at the same

00:07:17,919 --> 00:07:21,520
time

00:07:18,479 --> 00:07:25,199
lesions co-references

00:07:21,520 --> 00:07:27,840
are basically when you say something

00:07:25,199 --> 00:07:28,800
in the sentence or document refers to

00:07:27,840 --> 00:07:32,400
the same

00:07:28,800 --> 00:07:36,639
single real world object in this case

00:07:32,400 --> 00:07:36,639
the patient is the same as his

00:07:36,880 --> 00:07:43,520
okay all of this in seats

00:07:40,319 --> 00:07:44,800
is put into a clinical element type

00:07:43,520 --> 00:07:47,680
system

00:07:44,800 --> 00:07:50,720
which in java has implemented through a

00:07:47,680 --> 00:07:53,919
series of classes

00:07:50,720 --> 00:07:58,400
you can see we have

00:07:53,919 --> 00:07:58,400
a series of kind of higher level

00:07:58,800 --> 00:08:04,319
attributes that belong to the clinical

00:08:01,840 --> 00:08:04,319
elements

00:08:04,479 --> 00:08:11,360
and notice each one has in bold

00:08:07,680 --> 00:08:16,720
and associated code this is the kui

00:08:11,360 --> 00:08:20,160
again a normalized unique identifier

00:08:16,720 --> 00:08:22,639
so c takes is built upon apache uema

00:08:20,160 --> 00:08:23,599
which is the unstructured information

00:08:22,639 --> 00:08:27,120
management

00:08:23,599 --> 00:08:29,120
for applications it's for

00:08:27,120 --> 00:08:31,599
software systems that analyze large

00:08:29,120 --> 00:08:33,440
volumes of unstructured information to

00:08:31,599 --> 00:08:36,959
discover knowledge

00:08:33,440 --> 00:08:40,080
that's mouthful but it is perfect for

00:08:36,959 --> 00:08:43,919
nlp and basically the idea

00:08:40,080 --> 00:08:45,120
is you build a pipeline everything runs

00:08:43,919 --> 00:08:47,040
in a pipeline

00:08:45,120 --> 00:08:48,640
pipeline is ordered components to

00:08:47,040 --> 00:08:52,080
perform the work

00:08:48,640 --> 00:08:54,720
uh and basically a pipeline consists of

00:08:52,080 --> 00:08:56,800
a collection reader which obtains notes

00:08:54,720 --> 00:08:57,920
from various sources these can be files

00:08:56,800 --> 00:09:01,360
databases

00:08:57,920 --> 00:09:03,279
a rest entry point

00:09:01,360 --> 00:09:04,880
the pipeline also has one or more

00:09:03,279 --> 00:09:08,480
annotation engines

00:09:04,880 --> 00:09:11,600
which you know detect and modify your

00:09:08,480 --> 00:09:13,440
information of interest and at least one

00:09:11,600 --> 00:09:17,440
writer

00:09:13,440 --> 00:09:20,839
to store information wherever you like

00:09:17,440 --> 00:09:23,839
okay continuing with

00:09:20,839 --> 00:09:26,640
uema the jks or

00:09:23,839 --> 00:09:28,399
java common analysis system is your

00:09:26,640 --> 00:09:30,640
basic data container

00:09:28,399 --> 00:09:31,680
which persists information throughout

00:09:30,640 --> 00:09:34,399
the pipeline

00:09:31,680 --> 00:09:36,399
this information is what is passed from

00:09:34,399 --> 00:09:40,000
the collection reader to each

00:09:36,399 --> 00:09:42,880
annotator to the writers

00:09:40,000 --> 00:09:44,160
so an annotation i've kind of mentioned

00:09:42,880 --> 00:09:47,200
entities events

00:09:44,160 --> 00:09:47,920
you know what have you annotations are

00:09:47,200 --> 00:09:51,519
in

00:09:47,920 --> 00:09:53,680
uima and the cta's type system

00:09:51,519 --> 00:09:56,080
simple data elements like words and

00:09:53,680 --> 00:09:56,080
numbers

00:09:56,399 --> 00:10:02,079
punctuation etc identified annotation

00:10:00,160 --> 00:10:04,640
these are the more advanced elements and

00:10:02,079 --> 00:10:06,880
include the clinical events

00:10:04,640 --> 00:10:08,720
for instance the procedures disease

00:10:06,880 --> 00:10:11,519
disorders etc

00:10:08,720 --> 00:10:14,320
the kui okay the concept unique

00:10:11,519 --> 00:10:16,880
identifier

00:10:14,320 --> 00:10:18,560
every clinical event an anatomical site

00:10:16,880 --> 00:10:20,640
has one

00:10:18,560 --> 00:10:23,040
they come from the unified medical

00:10:20,640 --> 00:10:27,120
language system or umls

00:10:23,040 --> 00:10:30,480
the umls is basically comprised of

00:10:27,120 --> 00:10:34,079
multiple medical clinical

00:10:30,480 --> 00:10:38,160
vocabularies for instance uh snomed

00:10:34,079 --> 00:10:39,760
ct rx norm low inc

00:10:38,160 --> 00:10:41,519
all of these vocabularies have

00:10:39,760 --> 00:10:46,160
contributed

00:10:41,519 --> 00:10:47,440
synonyms to the umls what umls does is

00:10:46,160 --> 00:10:50,320
it combines

00:10:47,440 --> 00:10:52,560
these synonyms and normalizes them with

00:10:50,320 --> 00:10:58,800
a kui

00:10:52,560 --> 00:11:01,920
so here we can see that c2139817

00:10:58,800 --> 00:11:05,040
is a normalized unique identifier for

00:11:01,920 --> 00:11:06,240
all of the synonyms below ct about left

00:11:05,040 --> 00:11:09,839
upper limb ct of

00:11:06,240 --> 00:11:13,279
left arm ct of left upper extremity

00:11:09,839 --> 00:11:16,560
okay so now let's get to some code

00:11:13,279 --> 00:11:20,880
and before that let me check on the time

00:11:16,560 --> 00:11:24,640
all right we're good so

00:11:20,880 --> 00:11:27,120
again a pipeline is consists of

00:11:24,640 --> 00:11:27,839
the collection reader one or more

00:11:27,120 --> 00:11:32,079
annotation

00:11:27,839 --> 00:11:35,839
engines and zero or more writers

00:11:32,079 --> 00:11:39,360
so we are actually going to look at and

00:11:35,839 --> 00:11:41,040
if you will create a collection reader

00:11:39,360 --> 00:11:44,480
that reads from files

00:11:41,040 --> 00:11:47,760
and modifies

00:11:44,480 --> 00:11:47,760
the content of the file

00:11:48,399 --> 00:11:54,399
to something that is more akin to

00:11:51,760 --> 00:11:56,079
a clinical document we're going to

00:11:54,399 --> 00:11:59,519
create a regular expression

00:11:56,079 --> 00:12:00,639
annotation engine a simple file writer

00:11:59,519 --> 00:12:03,519
that will

00:12:00,639 --> 00:12:03,519
spit out some

00:12:04,800 --> 00:12:08,160
information of interest and then we're

00:12:06,959 --> 00:12:10,320
going to

00:12:08,160 --> 00:12:12,880
see how a pipeline is created to tie

00:12:10,320 --> 00:12:16,320
them all together

00:12:12,880 --> 00:12:19,120
okay so the collection reader again

00:12:16,320 --> 00:12:20,320
it creates a document for processing

00:12:19,120 --> 00:12:23,680
reads data from

00:12:20,320 --> 00:12:24,560
wherever and is written in java so to

00:12:23,680 --> 00:12:27,600
the right

00:12:24,560 --> 00:12:28,240
i have basically a document as it would

00:12:27,600 --> 00:12:31,120
exist

00:12:28,240 --> 00:12:32,000
in a file now this could come from a

00:12:31,120 --> 00:12:35,360
very strange

00:12:32,000 --> 00:12:38,000
emr system who knows but

00:12:35,360 --> 00:12:41,279
at the left of each line is some kind of

00:12:38,000 --> 00:12:45,120
identifier for the contents of the line

00:12:41,279 --> 00:12:45,120
and this includes text

00:12:45,200 --> 00:12:49,600
now for nlp we probably are not

00:12:48,399 --> 00:12:52,079
interested in the

00:12:49,600 --> 00:12:52,959
type of the template the encounter name

00:12:52,079 --> 00:12:55,920
patient name

00:12:52,959 --> 00:12:57,760
provider we may but let's pretend that

00:12:55,920 --> 00:13:00,480
in this case we do not

00:12:57,760 --> 00:13:02,480
we are just interested in the contents

00:13:00,480 --> 00:13:05,760
of the clinical document

00:13:02,480 --> 00:13:07,680
which consists of the clinical history

00:13:05,760 --> 00:13:11,839
and the line this is a 50 year old

00:13:07,680 --> 00:13:13,519
perimenopausal female etc

00:13:11,839 --> 00:13:16,240
so what we're going to do is we're going

00:13:13,519 --> 00:13:20,399
to create a collection reader

00:13:16,240 --> 00:13:22,720
and this is going to

00:13:20,399 --> 00:13:23,920
basically strip out every line that does

00:13:22,720 --> 00:13:26,720
not start with

00:13:23,920 --> 00:13:28,000
text and with the lines that start with

00:13:26,720 --> 00:13:31,760
text it's going to strip

00:13:28,000 --> 00:13:34,000
out the word text so at the top

00:13:31,760 --> 00:13:34,880
the very first line of code we're going

00:13:34,000 --> 00:13:37,600
to call this

00:13:34,880 --> 00:13:39,839
the apache con demo reader and it

00:13:37,600 --> 00:13:43,279
extends a class

00:13:39,839 --> 00:13:45,920
in c tapes names the abstract file tree

00:13:43,279 --> 00:13:48,000
reader on the right i've written the

00:13:45,920 --> 00:13:51,040
abstract file tree reader handles most

00:13:48,000 --> 00:13:54,160
of the work okay good enough

00:13:51,040 --> 00:13:57,199
so now we only need to implement

00:13:54,160 --> 00:13:58,560
one method in the abstract file tree

00:13:57,199 --> 00:14:02,800
reader

00:13:58,560 --> 00:14:05,360
and that is the method named read file

00:14:02,800 --> 00:14:06,000
read file is going to be given the jpass

00:14:05,360 --> 00:14:09,279
which

00:14:06,000 --> 00:14:13,279
as you remember is the data container

00:14:09,279 --> 00:14:16,800
that is passed through the ctas pipeline

00:14:13,279 --> 00:14:20,160
read file has also passed a file

00:14:16,800 --> 00:14:24,000
which is a file

00:14:20,160 --> 00:14:26,320
all right so next

00:14:24,000 --> 00:14:28,399
we have the string document text we this

00:14:26,320 --> 00:14:31,040
is what we want to build up by reading

00:14:28,399 --> 00:14:34,079
the file now if you know

00:14:31,040 --> 00:14:37,440
java the next several lines should be

00:14:34,079 --> 00:14:40,079
obvious if you don't no worries i will

00:14:37,440 --> 00:14:44,000
try to make it

00:14:40,079 --> 00:14:47,040
clear so we have a stream

00:14:44,000 --> 00:14:48,079
of text and that comes from reading the

00:14:47,040 --> 00:14:51,199
file

00:14:48,079 --> 00:14:55,600
using a method named lines

00:14:51,199 --> 00:14:59,120
so files lines and you stick in the file

00:14:55,600 --> 00:15:00,240
path so this will build up the document

00:14:59,120 --> 00:15:03,440
text

00:15:00,240 --> 00:15:04,639
using the text stream we're going to

00:15:03,440 --> 00:15:07,360
filter

00:15:04,639 --> 00:15:08,639
out the lines that start with text we're

00:15:07,360 --> 00:15:12,000
going to

00:15:08,639 --> 00:15:14,959
map or basically change

00:15:12,000 --> 00:15:16,639
the contents of those lines into the

00:15:14,959 --> 00:15:19,760
substring

00:15:16,639 --> 00:15:22,480
five characters into the line and trim

00:15:19,760 --> 00:15:24,560
it basically that means we're taking out

00:15:22,480 --> 00:15:26,079
the word text

00:15:24,560 --> 00:15:27,680
and then we're going to collect it all

00:15:26,079 --> 00:15:31,519
into one document

00:15:27,680 --> 00:15:34,639
with new line characters at the end

00:15:31,519 --> 00:15:38,000
okay so now we're going to

00:15:34,639 --> 00:15:39,040
get a jks builder a j cast builder is

00:15:38,000 --> 00:15:42,399
another class

00:15:39,040 --> 00:15:45,839
in c takes and basically

00:15:42,399 --> 00:15:46,880
this is going to make our j cast easy to

00:15:45,839 --> 00:15:49,040
populate

00:15:46,880 --> 00:15:52,160
the j cast that was passed into read

00:15:49,040 --> 00:15:56,160
file is basically empty at this point

00:15:52,160 --> 00:15:56,160
but the j cast builder is going to

00:15:56,800 --> 00:16:00,560
basically do a lot of things for you

00:15:59,360 --> 00:16:02,639
such as

00:16:00,560 --> 00:16:05,279
enter the document id and things like

00:16:02,639 --> 00:16:07,839
that and then we can manually

00:16:05,279 --> 00:16:11,040
as you see below set the document text

00:16:07,839 --> 00:16:13,680
to the document text that we've built up

00:16:11,040 --> 00:16:16,240
then we call populate the jpass and

00:16:13,680 --> 00:16:16,240
we're done

00:16:16,959 --> 00:16:20,480
so what we've done so far is we've taken

00:16:19,279 --> 00:16:24,079
on the left

00:16:20,480 --> 00:16:25,519
this file and its contents and we've

00:16:24,079 --> 00:16:27,759
changed it into

00:16:25,519 --> 00:16:31,120
internal text for processing that we've

00:16:27,759 --> 00:16:33,440
stuck into the jks

00:16:31,120 --> 00:16:34,639
okay an analysis engine we're going to

00:16:33,440 --> 00:16:37,759
build this next

00:16:34,639 --> 00:16:38,160
it processes document text it can create

00:16:37,759 --> 00:16:41,279
and

00:16:38,160 --> 00:16:43,440
manipulate annotations and

00:16:41,279 --> 00:16:45,759
like most things in ctx it's written in

00:16:43,440 --> 00:16:48,560
java

00:16:45,759 --> 00:16:50,399
okay so we're going to make a class

00:16:48,560 --> 00:16:53,600
named apachecon demo

00:16:50,399 --> 00:16:58,480
engine and this one extends jks

00:16:53,600 --> 00:16:58,480
implementer annotator implement base

00:16:59,440 --> 00:17:03,120
just like the abstract file tree reader

00:17:02,160 --> 00:17:05,360
this class

00:17:03,120 --> 00:17:07,120
in c takes is going to do a lot of the

00:17:05,360 --> 00:17:10,240
work for us

00:17:07,120 --> 00:17:13,520
we only need to implement one method

00:17:10,240 --> 00:17:14,319
named process that method is given the

00:17:13,520 --> 00:17:16,720
jks

00:17:14,319 --> 00:17:19,919
as you recall the jks contains all the

00:17:16,720 --> 00:17:22,000
data that's passed through the pipeline

00:17:19,919 --> 00:17:23,199
so we want to build annotations and

00:17:22,000 --> 00:17:26,400
we're going to use the

00:17:23,199 --> 00:17:27,199
identified annotation builder another

00:17:26,400 --> 00:17:32,080
class in

00:17:27,199 --> 00:17:32,960
c takes that just makes things easy so

00:17:32,080 --> 00:17:35,039
this builder

00:17:32,960 --> 00:17:36,559
we're going to indicate that we want

00:17:35,039 --> 00:17:38,400
procedures

00:17:36,559 --> 00:17:40,160
so we're going to say we want the

00:17:38,400 --> 00:17:43,760
semantic group

00:17:40,160 --> 00:17:46,880
procedure and

00:17:43,760 --> 00:17:49,600
for this case we're going to be

00:17:46,880 --> 00:17:50,559
discovering by regular expression just

00:17:49,600 --> 00:17:53,840
one

00:17:50,559 --> 00:17:54,720
type of concept and that concept we're

00:17:53,840 --> 00:17:59,840
going to give

00:17:54,720 --> 00:18:02,240
the concept unique identifier ac 123.

00:17:59,840 --> 00:18:03,120
next we're going to use the regular

00:18:02,240 --> 00:18:06,720
expression

00:18:03,120 --> 00:18:08,000
span finder ok and we're going to give

00:18:06,720 --> 00:18:11,520
it the regular expression

00:18:08,000 --> 00:18:11,520
very simple biopsy

00:18:11,600 --> 00:18:16,160
the next lines are we tell the finder to

00:18:14,720 --> 00:18:20,000
find spans

00:18:16,160 --> 00:18:23,120
using the document text in the jcas

00:18:20,000 --> 00:18:24,799
for each of these spans we go back to

00:18:23,120 --> 00:18:27,280
the builder which

00:18:24,799 --> 00:18:28,640
as above is indicated the identified

00:18:27,280 --> 00:18:31,760
annotation builder

00:18:28,640 --> 00:18:35,280
we tell the builder this is a span

00:18:31,760 --> 00:18:40,400
now build the identified indication

00:18:35,280 --> 00:18:43,600
and stick it in the jks pretty easy

00:18:40,400 --> 00:18:45,280
okay so now we've got on the left

00:18:43,600 --> 00:18:47,360
the clinical document that was in the

00:18:45,280 --> 00:18:49,440
jks and

00:18:47,360 --> 00:18:50,559
on the right we've actually identified

00:18:49,440 --> 00:18:53,679
an annotation

00:18:50,559 --> 00:18:57,039
biopsy we've given the

00:18:53,679 --> 00:19:00,400
semantic group procedure and the unique

00:18:57,039 --> 00:19:02,480
identifier ac123

00:19:00,400 --> 00:19:04,160
well that was pretty simple but it

00:19:02,480 --> 00:19:07,360
doesn't do much for us

00:19:04,160 --> 00:19:10,240
so let's make the regular expression

00:19:07,360 --> 00:19:12,320
modifiable all right so we're going to

00:19:10,240 --> 00:19:13,120
use something called the configuration

00:19:12,320 --> 00:19:16,720
parameter

00:19:13,120 --> 00:19:20,000
which comes from c takes for

00:19:16,720 --> 00:19:24,799
uh in reality something that ctx uses

00:19:20,000 --> 00:19:27,200
in its framework called uema fit

00:19:24,799 --> 00:19:29,120
so each configuration parameter has a

00:19:27,200 --> 00:19:32,160
name we're going to call this one

00:19:29,120 --> 00:19:34,640
regex we can give it a description

00:19:32,160 --> 00:19:36,240
and the default value default value

00:19:34,640 --> 00:19:39,360
we're going to say biopsy just like we

00:19:36,240 --> 00:19:41,679
had previously and we put this value of

00:19:39,360 --> 00:19:44,720
the configuration parameter into

00:19:41,679 --> 00:19:46,960
regards the next configuration parameter

00:19:44,720 --> 00:19:48,400
we're going to call regex cooling

00:19:46,960 --> 00:19:50,799
and we're going to give it a default

00:19:48,400 --> 00:19:54,000
value that we used previously for biopsy

00:19:50,799 --> 00:19:57,120
we're going to call this in the code

00:19:54,000 --> 00:20:00,000
a parameter named regexcui

00:19:57,120 --> 00:20:01,120
okay so i will show you what this does

00:20:00,000 --> 00:20:03,280
in the pipeline

00:20:01,120 --> 00:20:04,960
in a moment but basically we're just

00:20:03,280 --> 00:20:07,360
going to take this

00:20:04,960 --> 00:20:08,640
process method that we had implemented

00:20:07,360 --> 00:20:11,520
previously

00:20:08,640 --> 00:20:13,440
and we throw in as the kui that we're

00:20:11,520 --> 00:20:16,360
going to set

00:20:13,440 --> 00:20:17,600
red x cui we're going to tell the

00:20:16,360 --> 00:20:21,039
regexpandfinder

00:20:17,600 --> 00:20:24,159
t to find what we put into the regex

00:20:21,039 --> 00:20:24,159
and the rest is the same

00:20:24,799 --> 00:20:30,640
so now on the left

00:20:28,000 --> 00:20:31,679
we have a clinical document and on the

00:20:30,640 --> 00:20:35,120
right

00:20:31,679 --> 00:20:37,120
we're going to look for diagnostic

00:20:35,120 --> 00:20:41,840
imaging

00:20:37,120 --> 00:20:45,679
and mris and we're going to assign those

00:20:41,840 --> 00:20:47,520
the cui ac456

00:20:45,679 --> 00:20:49,840
we're also going to keep looking for

00:20:47,520 --> 00:20:49,840
biopsy

00:20:50,240 --> 00:20:57,360
okay so a writer we can output the

00:20:53,840 --> 00:21:00,159
process data you can print it into a log

00:20:57,360 --> 00:21:01,600
save it to file put it in database

00:21:00,159 --> 00:21:04,159
etcetera

00:21:01,600 --> 00:21:05,600
basically anything you have access to

00:21:04,159 --> 00:21:06,640
and this goes for the collection reader

00:21:05,600 --> 00:21:08,960
too

00:21:06,640 --> 00:21:10,400
anything from which you can read data or

00:21:08,960 --> 00:21:12,320
write data

00:21:10,400 --> 00:21:16,159
you can write one of these collection

00:21:12,320 --> 00:21:19,440
readers or writers to use it

00:21:16,159 --> 00:21:22,720
previously this is written in java okay

00:21:19,440 --> 00:21:24,799
so our writer is going to

00:21:22,720 --> 00:21:26,159
we're going to call it apachecon demo

00:21:24,799 --> 00:21:29,840
writer

00:21:26,159 --> 00:21:33,360
and it extends abstract jks

00:21:29,840 --> 00:21:35,760
another thing that sits in ctx does most

00:21:33,360 --> 00:21:35,760
of the work

00:21:36,159 --> 00:21:41,919
we implement one method named write file

00:21:39,280 --> 00:21:42,720
i know these methods have strange names

00:21:41,919 --> 00:21:46,320
but you know

00:21:42,720 --> 00:21:48,480
we try to keep it simple into right file

00:21:46,320 --> 00:21:51,679
you pass the jks

00:21:48,480 --> 00:21:54,080
and an output directory document id

00:21:51,679 --> 00:21:54,880
file name again that is done for you all

00:21:54,080 --> 00:21:57,520
you have to do is

00:21:54,880 --> 00:21:58,799
implement the method so we're going to

00:21:57,520 --> 00:22:01,039
say okay

00:21:58,799 --> 00:22:02,559
we're going to make a new file to which

00:22:01,039 --> 00:22:04,320
we're going to write the information

00:22:02,559 --> 00:22:06,000
let's just make it out of the output

00:22:04,320 --> 00:22:10,400
directory the file name

00:22:06,000 --> 00:22:12,159
and we'll throw in apachecon.text

00:22:10,400 --> 00:22:14,559
so we're going to create a writer

00:22:12,159 --> 00:22:17,200
similar to what you would do in java

00:22:14,559 --> 00:22:17,840
again if you are familiar with java this

00:22:17,200 --> 00:22:20,880
is

00:22:17,840 --> 00:22:23,200
you know old hat if not it should look

00:22:20,880 --> 00:22:26,320
pretty simple

00:22:23,200 --> 00:22:30,080
now we're going to get some note specs

00:22:26,320 --> 00:22:33,520
note specs are a class in

00:22:30,080 --> 00:22:37,919
c takes and basically they make using

00:22:33,520 --> 00:22:40,640
metadata on the actual document itself

00:22:37,919 --> 00:22:42,000
not annotations and so forth but the

00:22:40,640 --> 00:22:46,559
actual document

00:22:42,000 --> 00:22:50,159
very easy note specs is built on the jks

00:22:46,559 --> 00:22:53,039
so we're going to write the document id

00:22:50,159 --> 00:22:53,600
we're going to write the document type

00:22:53,039 --> 00:22:58,000
and

00:22:53,600 --> 00:22:58,000
actually a patient name or id

00:22:58,559 --> 00:23:03,760
those are obtained from node space

00:23:01,600 --> 00:23:06,720
okay next we want to write the actual

00:23:03,760 --> 00:23:08,640
identified information

00:23:06,720 --> 00:23:10,960
so we're going to use event mention

00:23:08,640 --> 00:23:13,840
event mention is more specific type of

00:23:10,960 --> 00:23:16,559
identified annotation and it includes

00:23:13,840 --> 00:23:20,640
things such as procedures

00:23:16,559 --> 00:23:23,760
so we're going to get this from jks util

00:23:20,640 --> 00:23:24,640
and select these event mentions from the

00:23:23,760 --> 00:23:26,320
jks

00:23:24,640 --> 00:23:29,360
this is another thing that we inherit

00:23:26,320 --> 00:23:30,880
from uema fit

00:23:29,360 --> 00:23:32,799
and then we're going to write with the

00:23:30,880 --> 00:23:36,000
writer using

00:23:32,799 --> 00:23:39,120
the identified annotation util again

00:23:36,000 --> 00:23:40,799
something that comes with ct's the best

00:23:39,120 --> 00:23:43,919
semantic group

00:23:40,799 --> 00:23:45,760
from that event and its name

00:23:43,919 --> 00:23:46,960
and we're going to join all of the

00:23:45,760 --> 00:23:50,799
coolies

00:23:46,960 --> 00:23:52,960
for that identified annotation or event

00:23:50,799 --> 00:23:56,240
and then we're going to just spit out

00:23:52,960 --> 00:23:56,240
the text of the event

00:23:56,640 --> 00:24:01,840
okay so the writer we have this

00:23:59,919 --> 00:24:03,760
information that we identified on the

00:24:01,840 --> 00:24:06,960
left within the clinical document

00:24:03,760 --> 00:24:10,640
and then we're going to create a file

00:24:06,960 --> 00:24:14,080
that again lists document id type

00:24:10,640 --> 00:24:16,260
patient id and the procedures that we

00:24:14,080 --> 00:24:17,360
identified

00:24:16,260 --> 00:24:20,720
[Music]

00:24:17,360 --> 00:24:22,640
okay so a pipeline pipeline is a

00:24:20,720 --> 00:24:25,600
set of collection readers you can

00:24:22,640 --> 00:24:28,159
specify annotation engines and writers

00:24:25,600 --> 00:24:29,200
and importantly you have to order these

00:24:28,159 --> 00:24:32,400
components

00:24:29,200 --> 00:24:34,880
as you want them to be executed and it

00:24:32,400 --> 00:24:34,880
is written

00:24:35,440 --> 00:24:40,240
at least sometimes in what is called a

00:24:38,159 --> 00:24:44,080
piper file

00:24:40,240 --> 00:24:46,880
okay piper file is pretty simple

00:24:44,080 --> 00:24:49,039
you can set a reader and our readers the

00:24:46,880 --> 00:24:52,000
apache on demo reader

00:24:49,039 --> 00:24:54,000
you can add an annotation engine here

00:24:52,000 --> 00:24:55,279
we're going to add apache con demo

00:24:54,000 --> 00:24:57,760
engine

00:24:55,279 --> 00:24:59,120
and we're not going to give it any

00:24:57,760 --> 00:25:00,960
parameters

00:24:59,120 --> 00:25:05,120
as you remember if you don't enter a

00:25:00,960 --> 00:25:08,000
parameter the default is biopsy

00:25:05,120 --> 00:25:09,679
so now we're going to add the apache con

00:25:08,000 --> 00:25:11,679
demo engine again

00:25:09,679 --> 00:25:13,360
but this time we're going to say we've

00:25:11,679 --> 00:25:17,360
got a regex coin

00:25:13,360 --> 00:25:20,559
as ac456 and the regular expression

00:25:17,360 --> 00:25:24,080
is either diagnostic imaging or

00:25:20,559 --> 00:25:27,440
the text mri

00:25:24,080 --> 00:25:29,360
and then we just add our apache con demo

00:25:27,440 --> 00:25:31,679
writer

00:25:29,360 --> 00:25:34,799
the syntax of these piper files is

00:25:31,679 --> 00:25:37,200
really pretty simple

00:25:34,799 --> 00:25:38,240
so what this does is it runs the whole

00:25:37,200 --> 00:25:40,320
thing through

00:25:38,240 --> 00:25:42,880
we've got our original document on the

00:25:40,320 --> 00:25:44,320
left or file and then we've got the

00:25:42,880 --> 00:25:46,960
formatted output

00:25:44,320 --> 00:25:46,960
on the right

00:25:48,720 --> 00:25:55,760
okay so i hope all of that made sense

00:25:52,480 --> 00:25:57,600
uh and some useful classes as i

00:25:55,760 --> 00:25:59,279
showed you previously there are a lot of

00:25:57,600 --> 00:26:01,760
classes in ctakes that do

00:25:59,279 --> 00:26:02,880
a lot of work for you and they make

00:26:01,760 --> 00:26:06,320
implementation

00:26:02,880 --> 00:26:09,360
of you know these methods that

00:26:06,320 --> 00:26:12,799
are specialized to your pipeline

00:26:09,360 --> 00:26:13,840
very easy so the j cass util again this

00:26:12,799 --> 00:26:16,159
is from you

00:26:13,840 --> 00:26:17,200
fit and it will fetch annotations from

00:26:16,159 --> 00:26:20,080
jks

00:26:17,200 --> 00:26:22,080
the jks builder this is what you're

00:26:20,080 --> 00:26:25,279
going to put in a reader usually

00:26:22,080 --> 00:26:26,880
it creates and populates a jpas source

00:26:25,279 --> 00:26:30,960
metadata util

00:26:26,880 --> 00:26:32,480
is a more advanced version of the note

00:26:30,960 --> 00:26:35,520
specs that we used and

00:26:32,480 --> 00:26:37,279
you can use this to fetch metadata the

00:26:35,520 --> 00:26:39,200
configuration parameter

00:26:37,279 --> 00:26:40,880
i showed you that earlier it's very

00:26:39,200 --> 00:26:44,720
powerful

00:26:40,880 --> 00:26:47,520
and anytime you start to write advanced

00:26:44,720 --> 00:26:48,559
annotation engines you will end up using

00:26:47,520 --> 00:26:51,039
this

00:26:48,559 --> 00:26:53,360
the identified annotation builder that

00:26:51,039 --> 00:26:56,720
is i think the easiest way to build an

00:26:53,360 --> 00:26:59,120
identified annotation in c takes

00:26:56,720 --> 00:27:00,159
the ontology concept you tell will fetch

00:26:59,120 --> 00:27:02,720
annotations and

00:27:00,159 --> 00:27:04,880
concept information from the jks there

00:27:02,720 --> 00:27:09,039
are a lot of methods in this class

00:27:04,880 --> 00:27:11,200
uh again if you start writing

00:27:09,039 --> 00:27:12,720
annotation engines you will probably end

00:27:11,200 --> 00:27:15,679
up using this

00:27:12,720 --> 00:27:17,600
the identified annotation you tell fetch

00:27:15,679 --> 00:27:19,360
annotation attributes

00:27:17,600 --> 00:27:20,880
this makes it a lot easier than going

00:27:19,360 --> 00:27:22,080
through the type system that i showed

00:27:20,880 --> 00:27:26,240
you before

00:27:22,080 --> 00:27:30,080
and trying to figure out what method

00:27:26,240 --> 00:27:33,279
uh gets you information for

00:27:30,080 --> 00:27:36,880
or from an identified annotation

00:27:33,279 --> 00:27:38,000
semantic tui there are uh two e's and

00:27:36,880 --> 00:27:41,760
groups

00:27:38,000 --> 00:27:43,360
that are kind of confusing if you step

00:27:41,760 --> 00:27:47,279
into sea takes without

00:27:43,360 --> 00:27:50,240
any knowledge of the umls

00:27:47,279 --> 00:27:51,600
and semantics this class and another

00:27:50,240 --> 00:27:55,200
class romantic group

00:27:51,600 --> 00:27:58,480
they make it pretty obvious

00:27:55,200 --> 00:28:02,480
and lastly the piper file runner this

00:27:58,480 --> 00:28:05,200
is what is fed a piper file and executes

00:28:02,480 --> 00:28:05,200
that pipeline

00:28:05,919 --> 00:28:09,919
okay so i promised contacts and more

00:28:09,039 --> 00:28:11,840
information

00:28:09,919 --> 00:28:13,360
here you go you can write to the

00:28:11,840 --> 00:28:16,720
development list

00:28:13,360 --> 00:28:19,520
you can write to a users list

00:28:16,720 --> 00:28:20,720
all questions are fair questions nothing

00:28:19,520 --> 00:28:24,159
is too simple

00:28:20,720 --> 00:28:27,840
go for it the ctates website

00:28:24,159 --> 00:28:27,840
is seated.apache.org

00:28:28,799 --> 00:28:34,720
there is some interesting content there

00:28:32,320 --> 00:28:36,159
i have to say that it's going to be

00:28:34,720 --> 00:28:39,360
reworked

00:28:36,159 --> 00:28:40,320
very soon if anyone out there is an html

00:28:39,360 --> 00:28:44,320
expert

00:28:40,320 --> 00:28:46,320
or other you know web framework expert

00:28:44,320 --> 00:28:47,919
please contact me if you'd like to help

00:28:46,320 --> 00:28:51,039
the free building of this

00:28:47,919 --> 00:28:54,640
website all right and

00:28:51,039 --> 00:28:57,520
the last but not least the wiki

00:28:54,640 --> 00:28:58,080
for ctax has a lot of the information on

00:28:57,520 --> 00:29:01,279
how to do

00:28:58,080 --> 00:29:04,880
things what things look like

00:29:01,279 --> 00:29:08,640
some questions and answers etc

00:29:04,880 --> 00:29:09,120
okay so i think i still have some time

00:29:08,640 --> 00:29:13,440
for

00:29:09,120 --> 00:29:27,840
questions and comments uh gandhi

00:29:13,440 --> 00:29:27,840
do you want to take over here

00:29:39,600 --> 00:29:44,159
and i'm not sure what i'm supposed to do

00:29:41,600 --> 00:29:44,159
at this point

00:29:46,080 --> 00:29:54,240
okay uh so i guess this is the easiest

00:29:49,679 --> 00:29:58,799
thing to do sample code

00:29:54,240 --> 00:30:01,840
the apache ctx repository

00:29:58,799 --> 00:30:04,880
if you go to ctas.apache.org

00:30:01,840 --> 00:30:04,880
our main website

00:30:05,279 --> 00:30:09,520
you should be able to navigate to

00:30:08,159 --> 00:30:11,279
something that

00:30:09,520 --> 00:30:14,000
basically says download and you can

00:30:11,279 --> 00:30:14,880
download by their binary installations

00:30:14,000 --> 00:30:17,840
they're pre-built

00:30:14,880 --> 00:30:18,480
or you it shows you uh where you can

00:30:17,840 --> 00:30:22,480
check out

00:30:18,480 --> 00:30:24,559
using subversion the actual source code

00:30:22,480 --> 00:30:26,320
now the source code you can use

00:30:24,559 --> 00:30:27,600
basically anything in there as an

00:30:26,320 --> 00:30:30,799
example

00:30:27,600 --> 00:30:35,600
but a lot of things are not

00:30:30,799 --> 00:30:39,600
necessarily complemented but involved

00:30:35,600 --> 00:30:43,440
so we have made a module named

00:30:39,600 --> 00:30:45,760
see takes examples and that should be

00:30:43,440 --> 00:30:51,840
not only self-explanatory in its name

00:30:45,760 --> 00:30:51,840
but hopefully the contents

00:30:52,960 --> 00:31:19,840
are there any other questions

00:31:05,360 --> 00:31:19,840
wow you're an easy audience

00:31:26,080 --> 00:31:32,720
yes okay this is a good comment

00:31:30,640 --> 00:31:35,600
don't i want to mention that all the

00:31:32,720 --> 00:31:39,360
wonderful analysis engines are already

00:31:35,600 --> 00:31:42,559
built yes okay

00:31:39,360 --> 00:31:46,640
so the apache con demo

00:31:42,559 --> 00:31:46,640
collection reader that we created

00:31:46,720 --> 00:31:50,000
is really kind of a goofy thing and

00:31:49,440 --> 00:31:53,120
normally

00:31:50,000 --> 00:31:55,840
you will not need to

00:31:53,120 --> 00:31:55,840
utilize it

00:31:57,360 --> 00:32:00,799
instead you will use something that's

00:31:58,960 --> 00:32:03,760
called the file tree reader

00:32:00,799 --> 00:32:04,399
and it will you know load in a tree of

00:32:03,760 --> 00:32:08,159
files

00:32:04,399 --> 00:32:08,159
and do everything for you

00:32:09,200 --> 00:32:12,840
in my next presentation i am going to

00:32:11,600 --> 00:32:16,720
show you

00:32:12,840 --> 00:32:18,559
some analysis engines that exist that

00:32:16,720 --> 00:32:22,559
are not commonly used but

00:32:18,559 --> 00:32:22,559
do some really interesting things

00:32:24,000 --> 00:32:28,159
but there is what we call the default

00:32:26,399 --> 00:32:32,159
clinical pipeline

00:32:28,159 --> 00:32:33,840
and this performs most of the tasks that

00:32:32,159 --> 00:32:35,519
people want to see done with their

00:32:33,840 --> 00:32:38,720
documents and

00:32:35,519 --> 00:32:41,039
if you look at the piper file for that

00:32:38,720 --> 00:32:42,880
default clinical pipeline it will

00:32:41,039 --> 00:32:46,240
indicate

00:32:42,880 --> 00:32:48,559
all of the analysis engines that

00:32:46,240 --> 00:32:49,760
perform important work and then you can

00:32:48,559 --> 00:32:52,880
look at those

00:32:49,760 --> 00:32:54,840
classes to see you know how they're put

00:32:52,880 --> 00:32:56,960
together

00:32:54,840 --> 00:33:00,080
etc

00:32:56,960 --> 00:33:03,120
okay next question

00:33:00,080 --> 00:33:06,399
uh is ctakes a good fit for analyzing

00:33:03,120 --> 00:33:10,159
clinical trial data i would say

00:33:06,399 --> 00:33:13,279
it's a wonderful fit in fact that's

00:33:10,159 --> 00:33:16,640
pretty much what it's built for it is

00:33:13,279 --> 00:33:21,039
not really meant to be used

00:33:16,640 --> 00:33:25,840
at the bedside but instead

00:33:21,039 --> 00:33:25,840
for research

00:33:36,840 --> 00:33:40,720
okay

00:33:38,159 --> 00:33:42,320
okay uh yes here's a question further up

00:33:40,720 --> 00:33:44,159
in the chat that i couldn't see

00:33:42,320 --> 00:33:45,679
where does the natural language part

00:33:44,159 --> 00:33:48,799
come in

00:33:45,679 --> 00:33:52,320
i'm not really sure

00:33:48,799 --> 00:33:53,679
what that question means but the natural

00:33:52,320 --> 00:33:56,799
language

00:33:53,679 --> 00:33:59,519
processing is basically taking something

00:33:56,799 --> 00:34:00,720
that is unstructured in other words you

00:33:59,519 --> 00:34:03,360
know structured

00:34:00,720 --> 00:34:04,320
information is going to be in a table or

00:34:03,360 --> 00:34:06,320
a list

00:34:04,320 --> 00:34:07,600
or something that the computer or

00:34:06,320 --> 00:34:10,720
computer tool

00:34:07,600 --> 00:34:14,240
can easily understand

00:34:10,720 --> 00:34:17,119
the natural language is basically

00:34:14,240 --> 00:34:19,119
what you create when you write an email

00:34:17,119 --> 00:34:20,720
or

00:34:19,119 --> 00:34:22,960
you know what you see when you read a

00:34:20,720 --> 00:34:25,760
book or in this case

00:34:22,960 --> 00:34:26,720
clinical natural language processing

00:34:25,760 --> 00:34:28,560
deals with

00:34:26,720 --> 00:34:29,839
what you would read in a clinical

00:34:28,560 --> 00:34:33,599
document

00:34:29,839 --> 00:34:36,399
and a lot of our machine language

00:34:33,599 --> 00:34:37,359
trained library models are trained on

00:34:36,399 --> 00:34:39,919
clinical text

00:34:37,359 --> 00:34:41,440
and clinical text is not necessarily the

00:34:39,919 --> 00:34:43,200
same thing

00:34:41,440 --> 00:34:44,800
that you would read and say the new york

00:34:43,200 --> 00:34:49,839
times

00:34:44,800 --> 00:34:49,839
so it needs to be treated differently

00:34:50,800 --> 00:34:54,560
okay uh where's the natural language

00:34:53,839 --> 00:34:56,800
part come in

00:34:54,560 --> 00:34:58,960
as in sentence structure and parts of

00:34:56,800 --> 00:35:03,440
speech

00:34:58,960 --> 00:35:05,040
okay so um

00:35:03,440 --> 00:35:08,240
i'll give you the parts of speech

00:35:05,040 --> 00:35:08,240
because that's the easiest

00:35:09,680 --> 00:35:17,040
when you use the dictionary lookup

00:35:13,040 --> 00:35:20,400
module which finds the

00:35:17,040 --> 00:35:22,880
procedures and anatomical sites etc

00:35:20,400 --> 00:35:25,119
within a clinical document it identifies

00:35:22,880 --> 00:35:28,880
those and tags them with

00:35:25,119 --> 00:35:28,880
the concept unique identifiers

00:35:28,960 --> 00:35:36,640
it is assisted in its identification

00:35:32,560 --> 00:35:41,280
of these synonyms by the parts of speech

00:35:36,640 --> 00:35:41,280
of the words or tokens within those

00:35:42,839 --> 00:35:48,880
synonyms

00:35:45,359 --> 00:35:48,880
i hope that makes sense

00:35:53,599 --> 00:35:59,839
if not post in the window

00:35:56,720 --> 00:36:13,839
and i'll try to

00:35:59,839 --> 00:36:13,839
get some more into that

00:36:17,280 --> 00:36:32,960
okay how are we on time

00:36:27,440 --> 00:36:32,960
ah okay uema version three

00:36:33,599 --> 00:36:39,040
i being as lazy as i am have not

00:36:37,119 --> 00:36:39,680
actually looked at this beyond a little

00:36:39,040 --> 00:36:42,640
bit of

00:36:39,680 --> 00:36:44,160
documentation however one of my

00:36:42,640 --> 00:36:46,640
colleagues

00:36:44,160 --> 00:36:47,520
has and i think he's used a little bit

00:36:46,640 --> 00:36:50,800
and he's

00:36:47,520 --> 00:36:54,480
told me that it is much faster and

00:36:50,800 --> 00:36:59,359
easier to use than the version that

00:36:54,480 --> 00:36:59,359
is currently the framework for c takes

00:36:59,520 --> 00:37:06,000
there are not plans to

00:37:02,880 --> 00:37:08,640
upgrade right now however uh

00:37:06,000 --> 00:37:09,920
c takes is open source as is obvious by

00:37:08,640 --> 00:37:13,680
its presence in this

00:37:09,920 --> 00:37:16,720
apache conference and

00:37:13,680 --> 00:37:19,040
if anyone wants to

00:37:16,720 --> 00:37:21,040
take this upon themselves or put

00:37:19,040 --> 00:37:24,480
together a group to do it or

00:37:21,040 --> 00:37:26,960
you know even just push push push for it

00:37:24,480 --> 00:37:31,119
on one of the dev lists

00:37:26,960 --> 00:37:33,920
or the wiki or what um bug lists

00:37:31,119 --> 00:37:34,480
then we can push it up in priorities and

00:37:33,920 --> 00:37:37,839
you know

00:37:34,480 --> 00:37:37,839
see what happens

00:37:43,520 --> 00:37:50,400
ah okay are there any

00:37:47,119 --> 00:37:55,040
plans to support a jdk beyond

00:37:50,400 --> 00:37:58,640
eight so yes right now

00:37:55,040 --> 00:38:01,119
ctx uses java eight

00:37:58,640 --> 00:38:02,160
and i don't know if anyone here kind of

00:38:01,119 --> 00:38:05,839
follows

00:38:02,160 --> 00:38:10,000
the oracle java universe but they

00:38:05,839 --> 00:38:13,200
moved from releasing

00:38:10,000 --> 00:38:16,320
versions of java when there were

00:38:13,200 --> 00:38:16,320
major stable

00:38:17,200 --> 00:38:24,800
changes in the jvm

00:38:21,119 --> 00:38:26,240
to a model where they release it every

00:38:24,800 --> 00:38:30,560
six months

00:38:26,240 --> 00:38:35,200
and within this six month release cycle

00:38:30,560 --> 00:38:35,200
they have made a habit of

00:38:35,359 --> 00:38:38,480
putting in modifications that really

00:38:37,760 --> 00:38:42,640
break

00:38:38,480 --> 00:38:46,320
a lot of code that worked with java 8

00:38:42,640 --> 00:38:49,359
and as you can imagine

00:38:46,320 --> 00:38:53,119
constantly upgrading your own code

00:38:49,359 --> 00:38:56,160
to work with java 9 java 10 java 11

00:38:53,119 --> 00:38:59,200
java 12 every six months

00:38:56,160 --> 00:39:03,760
requires practically full time effort

00:38:59,200 --> 00:39:07,040
and i don't think that we've really got

00:39:03,760 --> 00:39:10,960
that available right now

00:39:07,040 --> 00:39:14,000
so will we grab a version

00:39:10,960 --> 00:39:18,640
in the future that seems to require

00:39:14,000 --> 00:39:22,640
few modifications to work with it from

00:39:18,640 --> 00:39:25,200
java 8 we might

00:39:22,640 --> 00:39:26,320
upgrade put that together and say okay

00:39:25,200 --> 00:39:29,680
now it works with

00:39:26,320 --> 00:39:33,040
you know java 826

00:39:29,680 --> 00:39:34,079
everyone should update to that otherwise

00:39:33,040 --> 00:39:37,520
i think java 8

00:39:34,079 --> 00:39:40,720
still is pretty standard among

00:39:37,520 --> 00:39:41,520
java applications so i'm not too worried

00:39:40,720 --> 00:39:57,839
about

00:39:41,520 --> 00:39:57,839
being left behind in the dust

00:39:58,160 --> 00:40:02,960
okay well put do we have plans to

00:40:01,440 --> 00:40:05,119
dockerize seats engine

00:40:02,960 --> 00:40:06,000
so that someone can just run the

00:40:05,119 --> 00:40:09,040
container

00:40:06,000 --> 00:40:11,040
by simply pulling it as and setting it

00:40:09,040 --> 00:40:14,079
up is a

00:40:11,040 --> 00:40:17,760
herculean task for many okay

00:40:14,079 --> 00:40:20,079
yes this is definitely true uh

00:40:17,760 --> 00:40:21,760
setting up c takes and setting up a

00:40:20,079 --> 00:40:22,720
pipeline if you're not really familiar

00:40:21,760 --> 00:40:25,839
with it

00:40:22,720 --> 00:40:27,839
is difficult uh

00:40:25,839 --> 00:40:30,079
i have to admit when i first started

00:40:27,839 --> 00:40:31,680
working with ctx it took me about two

00:40:30,079 --> 00:40:34,720
months to finally get it

00:40:31,680 --> 00:40:36,839
installed and running on my machine and

00:40:34,720 --> 00:40:40,560
that's

00:40:36,839 --> 00:40:44,000
unfriendly okay a docker container

00:40:40,560 --> 00:40:47,280
um i think we have a

00:40:44,000 --> 00:40:48,000
talk about a rest module in ctax that

00:40:47,280 --> 00:40:52,240
actually

00:40:48,000 --> 00:40:55,920
has a docker inside it a docker file

00:40:52,240 --> 00:40:57,920
there is also a

00:40:55,920 --> 00:40:59,040
little installation tool that i will be

00:40:57,920 --> 00:41:01,920
speaking about

00:40:59,040 --> 00:41:02,720
in another uh presentation called doc

00:41:01,920 --> 00:41:06,240
hand

00:41:02,720 --> 00:41:09,760
and doc hand will create a docker file

00:41:06,240 --> 00:41:12,800
for running c

00:41:09,760 --> 00:41:13,520
takes elsewhere and or in the docker

00:41:12,800 --> 00:41:16,560
container

00:41:13,520 --> 00:41:20,880
and it will also alternatively

00:41:16,560 --> 00:41:22,480
install ctax in its binary form locally

00:41:20,880 --> 00:41:24,880
or you can copy it elsewhere it doesn't

00:41:22,480 --> 00:41:24,880
matter

00:41:25,040 --> 00:41:30,160
for each of these it will allow you to

00:41:28,079 --> 00:41:33,119
create a simple pipeline just by

00:41:30,160 --> 00:41:34,960
clicking on a series of check boxes

00:41:33,119 --> 00:41:36,240
again i will be showing this in another

00:41:34,960 --> 00:41:39,040
presentation

00:41:36,240 --> 00:41:39,040
stay tuned

00:41:40,720 --> 00:41:44,960
ah so here's a comment and a suggestion

00:41:43,119 --> 00:41:47,760
and probably a good one

00:41:44,960 --> 00:41:48,000
uh maybe at least and this goes back to

00:41:47,760 --> 00:41:51,200
the

00:41:48,000 --> 00:41:52,480
support for anything beyond java 8 maybe

00:41:51,200 --> 00:41:56,480
at least support each

00:41:52,480 --> 00:41:56,480
lts release of java

00:41:57,839 --> 00:42:04,560
good idea again

00:42:01,280 --> 00:42:08,000
updating java so it works um or

00:42:04,560 --> 00:42:11,280
updating c takes so it works

00:42:08,000 --> 00:42:12,319
would need to be done by someone we're

00:42:11,280 --> 00:42:14,880
open source

00:42:12,319 --> 00:42:15,599
anyone is welcome to put forth the

00:42:14,880 --> 00:42:18,720
effort

00:42:15,599 --> 00:42:19,839
uh if you want it to be done again like

00:42:18,720 --> 00:42:22,880
everything else

00:42:19,839 --> 00:42:26,079
push for it on the dev list

00:42:22,880 --> 00:42:28,000
uh or you know hopefully do it yourself

00:42:26,079 --> 00:42:31,839
or grab a bunch of people that can

00:42:28,000 --> 00:42:31,839
do it

00:42:40,720 --> 00:42:45,680
okay um i think my 40 minutes is

00:42:44,800 --> 00:42:48,960
actually

00:42:45,680 --> 00:42:52,480
up yes just

00:42:48,960 --> 00:42:55,599
informed me of much so i believe

00:42:52,480 --> 00:42:58,880
our next talk will be

00:42:55,599 --> 00:43:01,119
coming up soon and uh

00:42:58,880 --> 00:43:01,920
gandhi thank you again for moderating

00:43:01,119 --> 00:43:03,520
this

00:43:01,920 --> 00:43:06,079
and collecting and vetting all the

00:43:03,520 --> 00:43:06,079
questions

00:43:06,160 --> 00:43:08,960
you're off the hook

00:43:11,680 --> 00:43:16,240
ah okay last one as a member of the uemo

00:43:14,880 --> 00:43:18,079
project team if you could wish for

00:43:16,240 --> 00:43:19,599
something from the um team what would it

00:43:18,079 --> 00:43:22,880
be

00:43:19,599 --> 00:43:26,000
oh good lord uh i think the

00:43:22,880 --> 00:43:26,960
first thing would be run through our

00:43:26,000 --> 00:43:29,920
code and

00:43:26,960 --> 00:43:30,800
tell us what could be done to quickly

00:43:29,920 --> 00:43:34,560
and easily

00:43:30,800 --> 00:43:34,560
upgrade to uema3

00:43:34,960 --> 00:43:39,599
you know that would be fantastic for

00:43:37,680 --> 00:43:43,280
anyone that knows the ins and outs of

00:43:39,599 --> 00:43:46,000
you ain't meant to do for us

00:43:43,280 --> 00:43:48,240
but really anything you want to do

00:43:46,000 --> 00:43:51,280
anything you are willing to do

00:43:48,240 --> 00:43:53,200
i would be more than grateful

00:43:51,280 --> 00:43:55,839
as with everyone else in the sea takes

00:43:53,200 --> 00:43:55,839
community i'm sure

00:43:57,839 --> 00:44:04,400
okay i'm going to

00:44:01,040 --> 00:44:09,839
give it up thank you everyone

00:44:04,400 --> 00:44:09,839
and i hope this was informative bye

00:44:22,319 --> 00:44:24,400

YouTube URL: https://www.youtube.com/watch?v=NLEak_9VMbQ


