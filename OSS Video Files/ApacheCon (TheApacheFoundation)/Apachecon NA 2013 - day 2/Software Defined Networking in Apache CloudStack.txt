Title: Software Defined Networking in Apache CloudStack
Publication date: 2013-10-17
Playlist: Apachecon NA 2013 - day 2
Description: 
	Chiradeep Vittal
ApacheCon NA 2013
Cloud Crowd
Captions: 
	00:00:00,500 --> 00:00:06,540
okay so this is what I'm going to talk

00:00:02,580 --> 00:00:11,460
about software-defined networking and

00:00:06,540 --> 00:00:13,740
apache cloudstack some of you might have

00:00:11,460 --> 00:00:16,830
seen me yesterday but as a

00:00:13,740 --> 00:00:20,130
reintroduction my name is charlie i work

00:00:16,830 --> 00:00:22,949
for a citrix and committed the apache

00:00:20,130 --> 00:00:25,289
cloudstack project and that's my Twitter

00:00:22,949 --> 00:00:29,789
handle in case you want to hear my

00:00:25,289 --> 00:00:34,070
occasional thoughts I'm going to be

00:00:29,789 --> 00:00:38,190
talking about what is cloud stack and

00:00:34,070 --> 00:00:39,750
what does is so for those of you who are

00:00:38,190 --> 00:00:42,149
already familiar with it bear with me

00:00:39,750 --> 00:00:44,910
their water software-defined networking

00:00:42,149 --> 00:00:48,180
and what is why does why do the two of

00:00:44,910 --> 00:00:51,570
the two mixed together why is sdn and is

00:00:48,180 --> 00:00:56,149
a good fit now to talk about how cloud

00:00:51,570 --> 00:00:56,149
stacks network model enables you to

00:00:57,949 --> 00:01:06,090
enables you to add more or different

00:01:01,109 --> 00:01:07,520
kinds of SDN into CloudStack and and

00:01:06,090 --> 00:01:10,250
then we describe some of the

00:01:07,520 --> 00:01:12,840
integrations already done in CloudStack

00:01:10,250 --> 00:01:15,570
finally we talked about cloud stacks

00:01:12,840 --> 00:01:18,240
native SDN controller and how that works

00:01:15,570 --> 00:01:25,650
and some of the features for CloudStack

00:01:18,240 --> 00:01:27,479
a nested apache cloudstack for those of

00:01:25,650 --> 00:01:30,540
you not familiar has been in the apache

00:01:27,479 --> 00:01:34,290
foundation since april last year it was

00:01:30,540 --> 00:01:36,030
open source before then and what sets it

00:01:34,290 --> 00:01:38,100
apart usually is that it's you know it's

00:01:36,030 --> 00:01:40,170
mature tube out tons of deployment and

00:01:38,100 --> 00:01:42,750
usually it's complete you really don't

00:01:40,170 --> 00:01:48,810
need much else to get started with Clark

00:01:42,750 --> 00:01:50,520
stack so this is how you know amazon is

00:01:48,810 --> 00:01:52,590
the east d cloud you know which

00:01:50,520 --> 00:01:54,390
everybody tries to follow and if you

00:01:52,590 --> 00:01:56,430
look at how Amazon try to build a cloud

00:01:54,390 --> 00:01:58,829
they start with some servers some

00:01:56,430 --> 00:02:02,490
storage and some networking usually

00:01:58,829 --> 00:02:04,950
commodity or we guess its commodity then

00:02:02,490 --> 00:02:06,450
they use open source then hypervisor to

00:02:04,950 --> 00:02:08,729
kind of stitch everything together and

00:02:06,450 --> 00:02:12,180
then they have their orchestration

00:02:08,729 --> 00:02:14,650
software which helps them manage

00:02:12,180 --> 00:02:17,950
the the physical resources the

00:02:14,650 --> 00:02:21,100
networking the hypervisor and Andy and

00:02:17,950 --> 00:02:24,100
the storage and then they give you this

00:02:21,100 --> 00:02:27,370
very nice API on top of it which enables

00:02:24,100 --> 00:02:31,870
anybody you and I to go off and create

00:02:27,370 --> 00:02:34,450
powerful topologies huge deployments at

00:02:31,870 --> 00:02:36,330
the click of a button right and then

00:02:34,450 --> 00:02:38,440
there's the e-commerce platform which

00:02:36,330 --> 00:02:40,600
vengeance that service to you you know

00:02:38,440 --> 00:02:43,720
charges mix you know gives you bills it

00:02:40,600 --> 00:02:47,470
sends you lets you use a credit card and

00:02:43,720 --> 00:02:49,420
so on so forth so how can you build your

00:02:47,470 --> 00:02:51,070
cloud you start with pretty much the

00:02:49,420 --> 00:02:53,290
same thing but you don't have to do

00:02:51,070 --> 00:02:56,739
absolute commodity servers networking

00:02:53,290 --> 00:03:00,070
and storage you you can use any

00:02:56,739 --> 00:03:02,620
hypervisor you want kvm rose n or vmware

00:03:00,070 --> 00:03:04,420
and this is where CloudStack comes in

00:03:02,620 --> 00:03:07,600
where orchestra class attacks

00:03:04,420 --> 00:03:09,220
orchestration software can manage all

00:03:07,600 --> 00:03:12,580
these elements in the data center for

00:03:09,220 --> 00:03:15,060
you and then you can use it and you can

00:03:12,580 --> 00:03:17,890
manage it this virtual infrastructure

00:03:15,060 --> 00:03:22,630
with either the clash tech APR or the

00:03:17,890 --> 00:03:25,140
amazon APA and usually people who deploy

00:03:22,630 --> 00:03:27,459
flaps tech and want to sell it to other

00:03:25,140 --> 00:03:29,860
customers like you know public cloud

00:03:27,459 --> 00:03:32,920
providers they build up optional portal

00:03:29,860 --> 00:03:36,180
which lets them sell these services to

00:03:32,920 --> 00:03:38,560
the end user so that's that's what

00:03:36,180 --> 00:03:45,630
CloudStack cloud roughly looks like and

00:03:38,560 --> 00:03:48,310
so whatever sdn sdn fundamentally it's a

00:03:45,630 --> 00:03:51,130
separation of the control plane which

00:03:48,310 --> 00:03:57,100
performs the the forwarding of the

00:03:51,130 --> 00:03:59,019
packets and the an actual the function

00:03:57,100 --> 00:04:01,480
that decides where the packet needs to

00:03:59,019 --> 00:04:03,660
go and the function that's actually

00:04:01,480 --> 00:04:08,410
doing the forwarding is separated into

00:04:03,660 --> 00:04:10,299
distinct layers and usually this means

00:04:08,410 --> 00:04:13,600
that the control plane is logically

00:04:10,299 --> 00:04:15,880
centralized if you look at the current

00:04:13,600 --> 00:04:18,209
Internet routing infrastructure instance

00:04:15,880 --> 00:04:20,019
that it consists of a bunch of routers

00:04:18,209 --> 00:04:23,410
talking to each other with routing

00:04:20,019 --> 00:04:25,540
protocols there is no central person or

00:04:23,410 --> 00:04:29,680
entity anywhere saying that

00:04:25,540 --> 00:04:32,320
if I send a packet from Portland of this

00:04:29,680 --> 00:04:34,780
hotel in portland to google com that it

00:04:32,320 --> 00:04:36,760
should take this route that kind of is

00:04:34,780 --> 00:04:38,590
an emergent property the internet so

00:04:36,760 --> 00:04:41,650
there's no central place which decides

00:04:38,590 --> 00:04:43,540
how these routes are calculated as the

00:04:41,650 --> 00:04:45,090
end tries to turn this owners hairy and

00:04:43,540 --> 00:04:47,140
saying it yeah if for some applications

00:04:45,090 --> 00:04:52,240
you need this kind of centralized

00:04:47,140 --> 00:04:53,980
control and some of the advantages are

00:04:52,240 --> 00:04:55,840
is that you know once you have a symptom

00:04:53,980 --> 00:04:58,240
control now it's easier for you to

00:04:55,840 --> 00:05:01,810
troubleshoot and maintain and setup your

00:04:58,240 --> 00:05:05,830
network because if I'm failing to set up

00:05:01,810 --> 00:05:10,240
send my packet from here to google data

00:05:05,830 --> 00:05:11,800
center in let's say London how do you

00:05:10,240 --> 00:05:14,010
figure out what's going on right and so

00:05:11,800 --> 00:05:18,400
having a central point of control is

00:05:14,010 --> 00:05:20,140
probably a easier way to go and the

00:05:18,400 --> 00:05:22,690
second our part is that if you look at

00:05:20,140 --> 00:05:24,190
traditional data set the state of data

00:05:22,690 --> 00:05:26,710
center networking today or any it

00:05:24,190 --> 00:05:29,080
working today usually you have to tell

00:05:26,710 --> 00:05:32,260
it into the box and run a bunch of these

00:05:29,080 --> 00:05:36,880
are direct commands and which only you

00:05:32,260 --> 00:05:39,370
would very few people now and it really

00:05:36,880 --> 00:05:42,340
doesn't translate into anything like oh

00:05:39,370 --> 00:05:47,350
I want to set up a flow of package from

00:05:42,340 --> 00:05:48,850
here to there right so so this box mode

00:05:47,350 --> 00:05:50,730
of configuration where you logging into

00:05:48,850 --> 00:05:53,470
each box and trying to configure it is

00:05:50,730 --> 00:05:55,930
is hard to do and it's error-prone

00:05:53,470 --> 00:05:57,970
because it doesn't directly translate

00:05:55,930 --> 00:05:59,950
into exactly what you're trying to do

00:05:57,970 --> 00:06:05,080
which is to set up a flow from point A

00:05:59,950 --> 00:06:07,930
to point B and then related to sdn you

00:06:05,080 --> 00:06:10,120
might hear that you know well you know

00:06:07,930 --> 00:06:14,770
is also their company X might claim I

00:06:10,120 --> 00:06:17,440
got a and sdn we already do sdn and so

00:06:14,770 --> 00:06:21,400
it turns out to be an API layer or

00:06:17,440 --> 00:06:24,040
collection of boxes and typically that

00:06:21,400 --> 00:06:27,970
doesn't give you the full functionality

00:06:24,040 --> 00:06:31,060
of SDN and then people also talk about

00:06:27,970 --> 00:06:34,180
open flow but open flow is just part of

00:06:31,060 --> 00:06:35,980
SD nor is just one way to do sdn and it

00:06:34,180 --> 00:06:37,870
is just a standard protocol for talking

00:06:35,980 --> 00:06:39,430
between the control plane and the

00:06:37,870 --> 00:06:42,620
forwarding plane

00:06:39,430 --> 00:06:44,090
and then you also talk find people

00:06:42,620 --> 00:06:45,830
talking about how well this over raised

00:06:44,090 --> 00:06:48,530
better than that overlay or I'm going to

00:06:45,830 --> 00:06:52,190
use this tunnel mechanism to implement

00:06:48,530 --> 00:06:56,480
my sdn and it's it's part is part very

00:06:52,190 --> 00:06:58,639
much part of SDN because these overlays

00:06:56,480 --> 00:07:00,110
are very flexible and then they help you

00:06:58,639 --> 00:07:03,020
to set up these pads I was talking about

00:07:00,110 --> 00:07:08,750
and typically a lot of the initial sdn

00:07:03,020 --> 00:07:10,760
implementations do use over lace so to

00:07:08,750 --> 00:07:13,370
put into into picture so you got this a

00:07:10,760 --> 00:07:16,550
bunch of machines that need to

00:07:13,370 --> 00:07:17,870
communicate with each other and the

00:07:16,550 --> 00:07:21,470
continent and they're interconnected

00:07:17,870 --> 00:07:24,770
with a bunch of boxes routers which is

00:07:21,470 --> 00:07:27,320
forwarding elements what I do right so

00:07:24,770 --> 00:07:31,270
here comes isn't SDN controller it's

00:07:27,320 --> 00:07:35,350
usually a cluster of computer servers

00:07:31,270 --> 00:07:38,210
connect and they usually have mice

00:07:35,350 --> 00:07:41,030
relational database or a scalable no SQL

00:07:38,210 --> 00:07:44,630
database backing their implementation

00:07:41,030 --> 00:07:49,330
and they also have an API in front of

00:07:44,630 --> 00:07:51,020
them and then they can talk to these

00:07:49,330 --> 00:07:53,060
bi-directionally to these forwarding

00:07:51,020 --> 00:07:55,400
elements using their own proprietary

00:07:53,060 --> 00:07:57,860
protocols or here's with open flow comes

00:07:55,400 --> 00:08:01,310
in or you know you can even talk SSH but

00:07:57,860 --> 00:08:02,990
the bottom line is that the control is

00:08:01,310 --> 00:08:05,180
being done at the top and the forwarding

00:08:02,990 --> 00:08:07,789
is being done at the bottom there and so

00:08:05,180 --> 00:08:12,320
now when the end user says in a set up a

00:08:07,789 --> 00:08:13,700
flow from this box with that box the SDN

00:08:12,320 --> 00:08:17,090
controller can decide to set it up that

00:08:13,700 --> 00:08:18,770
way and then when the second flow is

00:08:17,090 --> 00:08:20,360
desired to a different box now it can

00:08:18,770 --> 00:08:22,370
take an entirely different route even

00:08:20,360 --> 00:08:27,110
though the the beginning box and end box

00:08:22,370 --> 00:08:31,460
are the same right so this is the power

00:08:27,110 --> 00:08:33,530
that sdn gives you so well how is this

00:08:31,460 --> 00:08:34,820
Conrad with the IAS and I'm going to go

00:08:33,530 --> 00:08:38,240
quickly through this because I guess

00:08:34,820 --> 00:08:41,570
most of your views with cloud so this is

00:08:38,240 --> 00:08:43,610
all from Wikipedia so clouds define

00:08:41,570 --> 00:08:45,680
agility that means you know you've got a

00:08:43,610 --> 00:08:48,170
complex you know infrastructure you want

00:08:45,680 --> 00:08:51,320
to change it it's a matter of minutes

00:08:48,170 --> 00:08:52,070
not days there's an API which means that

00:08:51,320 --> 00:08:54,380
you can do

00:08:52,070 --> 00:08:56,360
art of automation it usually means

00:08:54,380 --> 00:08:57,950
virtualization which means that you know

00:08:56,360 --> 00:08:59,750
you can move your workload from place to

00:08:57,950 --> 00:09:01,760
place and then if you have a very

00:08:59,750 --> 00:09:04,760
powerful machine you can chop it up into

00:09:01,760 --> 00:09:06,170
small chunks multi-tenancy is also very

00:09:04,760 --> 00:09:07,580
important in the plot because you're

00:09:06,170 --> 00:09:11,800
sharing these resources with other

00:09:07,580 --> 00:09:14,000
tenants who you may or may not trust

00:09:11,800 --> 00:09:16,490
scalability is one of the defining

00:09:14,000 --> 00:09:19,400
features I mean if you look at cloud

00:09:16,490 --> 00:09:21,140
like Amazon anytime you make an API

00:09:19,400 --> 00:09:24,080
request to deploy a vm you're

00:09:21,140 --> 00:09:26,210
practically guaranteed to start up the

00:09:24,080 --> 00:09:30,080
vm it's like it has infinite capacity so

00:09:26,210 --> 00:09:33,740
you want to give that that illusion of

00:09:30,080 --> 00:09:35,720
infinite capacity and then there's

00:09:33,740 --> 00:09:37,730
elasticity so if you're not using any of

00:09:35,720 --> 00:09:39,560
the virtual machines you've started up

00:09:37,730 --> 00:09:42,500
you can kill them and get stopped

00:09:39,560 --> 00:09:44,810
getting charged for them and it's self

00:09:42,500 --> 00:09:47,420
service it is you're not calling the IT

00:09:44,810 --> 00:09:49,940
department to ask you to ask them to

00:09:47,420 --> 00:09:53,330
give you a server to provision a path or

00:09:49,940 --> 00:09:55,550
anything it's all through the API so how

00:09:53,330 --> 00:09:59,720
does it translate into a networking for

00:09:55,550 --> 00:10:01,790
the class right so it means that non

00:09:59,720 --> 00:10:04,000
network engineers are creating complex

00:10:01,790 --> 00:10:08,510
network topologies in the inside a cloud

00:10:04,000 --> 00:10:12,590
and in the needle API T in order to do

00:10:08,510 --> 00:10:14,630
this and and and and whatever solution

00:10:12,590 --> 00:10:16,850
we use for cloud networking has to work

00:10:14,630 --> 00:10:18,730
with virtualization because it's going

00:10:16,850 --> 00:10:20,630
to be involved not only programming

00:10:18,730 --> 00:10:24,110
hardware switches but also the

00:10:20,630 --> 00:10:27,290
hypervisor level switches and then it

00:10:24,110 --> 00:10:29,780
needs to scale which means that if you

00:10:27,290 --> 00:10:34,310
use a solution like VLANs which in we

00:10:29,780 --> 00:10:37,370
all know has maximum of 4000 vilines it

00:10:34,310 --> 00:10:39,070
usually you know that's a very strong

00:10:37,370 --> 00:10:43,610
limiting factor that you want to avoid

00:10:39,070 --> 00:10:45,200
and then elasticity so if you if

00:10:43,610 --> 00:10:48,080
somebody creates a load balancer today

00:10:45,200 --> 00:10:49,790
and then destroys it tomorrow you know

00:10:48,080 --> 00:10:51,500
you need to be able to take that load

00:10:49,790 --> 00:10:55,640
balance or out of service and not pay

00:10:51,500 --> 00:10:57,350
for it anymore and it's self service and

00:10:55,640 --> 00:10:59,330
these are real novices I mean you can't

00:10:57,350 --> 00:11:00,840
expect them to debug what hat what went

00:10:59,330 --> 00:11:02,670
wrong so if

00:11:00,840 --> 00:11:04,860
if the provision something in the packet

00:11:02,670 --> 00:11:06,300
doesn't go from A to B you need to be

00:11:04,860 --> 00:11:07,800
able to tell them why it's not going for

00:11:06,300 --> 00:11:09,570
me to be and give them a solution or

00:11:07,800 --> 00:11:13,500
workaround or tell them what did it

00:11:09,570 --> 00:11:15,810
wrong right and so you can see that you

00:11:13,500 --> 00:11:19,800
know the these two are made for each

00:11:15,810 --> 00:11:22,410
other so the SDN AP Act gives you this

00:11:19,800 --> 00:11:26,460
agility to make really easy and quick

00:11:22,410 --> 00:11:28,800
changes to the network and and then as

00:11:26,460 --> 00:11:30,870
these sdn products usually made to work

00:11:28,800 --> 00:11:35,370
with you know hypervisors and

00:11:30,870 --> 00:11:37,080
virtualization and the design goal for

00:11:35,370 --> 00:11:40,730
out of the box for all these sdn

00:11:37,080 --> 00:11:44,520
controllers for extremely large scale

00:11:40,730 --> 00:11:45,750
and it enables virtual networking and by

00:11:44,520 --> 00:11:48,480
a virtual networking I mean this

00:11:45,750 --> 00:11:50,550
illusion of isolated networks on top of

00:11:48,480 --> 00:11:54,660
shared physical infrastructure so you

00:11:50,550 --> 00:11:55,980
know Dave and Joe might have networks in

00:11:54,660 --> 00:11:58,650
the same cloud they don't trust each

00:11:55,980 --> 00:12:05,510
other but they believe they have the

00:11:58,650 --> 00:12:09,540
illusion of isolation in that cloud and

00:12:05,510 --> 00:12:12,630
and this is where actually the issue of

00:12:09,540 --> 00:12:15,450
what would later use and am I going to

00:12:12,630 --> 00:12:18,000
go too much into this but depending on

00:12:15,450 --> 00:12:20,310
how you solve this problem of well I

00:12:18,000 --> 00:12:22,230
have a virtual machine with this virtual

00:12:20,310 --> 00:12:23,550
address how do I map it to the physical

00:12:22,230 --> 00:12:26,910
location where I want to send this

00:12:23,550 --> 00:12:28,410
packet to that tends out turns out to be

00:12:26,910 --> 00:12:30,180
the main difference between any of these

00:12:28,410 --> 00:12:33,030
overlay technologies where you know the

00:12:30,180 --> 00:12:36,630
X land the hypervisor sends a multicast

00:12:33,030 --> 00:12:38,490
with GRE it's pre-programmed by the

00:12:36,630 --> 00:12:41,520
control plane and then if you use a

00:12:38,490 --> 00:12:43,260
technology called security groups there

00:12:41,520 --> 00:12:47,850
it turns out you don't need any mapping

00:12:43,260 --> 00:12:50,250
or discovery for that I'm going to skip

00:12:47,850 --> 00:12:54,720
through this so so what does the virtual

00:12:50,250 --> 00:12:58,650
network look like in an IAS cloud and I

00:12:54,720 --> 00:13:01,680
don't know why this is happening ah so

00:12:58,650 --> 00:13:03,210
you have about you know you deployed

00:13:01,680 --> 00:13:06,300
your network and let's say you have

00:13:03,210 --> 00:13:07,740
these four blue VMS running in there and

00:13:06,300 --> 00:13:09,900
it looks like a regular old network

00:13:07,740 --> 00:13:11,910
right it's it's running in the cloud but

00:13:09,900 --> 00:13:16,630
then it's Eva these are

00:13:11,910 --> 00:13:19,750
private IP addresses 10 11 12 to all the

00:13:16,630 --> 00:13:23,350
way to 10 11 5 and then they have a

00:13:19,750 --> 00:13:28,120
gateway which is 10 11 12 go out of the

00:13:23,350 --> 00:13:29,950
internet and and this edge device which

00:13:28,120 --> 00:13:33,790
gives them access to the Internet can do

00:13:29,950 --> 00:13:37,350
things like Matt and DHCP and load

00:13:33,790 --> 00:13:42,880
balancing and VPN and so on so forth and

00:13:37,350 --> 00:13:46,930
and then I know oops tenant the second

00:13:42,880 --> 00:13:50,170
turn comes in and and creates a very

00:13:46,930 --> 00:13:51,730
similar to apology and then he but he

00:13:50,170 --> 00:13:54,160
can choose a different set of services

00:13:51,730 --> 00:13:56,590
and you can notice that the set of IP

00:13:54,160 --> 00:14:00,070
addresses that he gets is exactly the

00:13:56,590 --> 00:14:01,930
same as the other tenant so that's the

00:14:00,070 --> 00:14:04,770
illusion of isolation that virtual

00:14:01,930 --> 00:14:04,770
networking gives you

00:14:09,490 --> 00:14:15,500
so cloud stacks network model it helps

00:14:12,860 --> 00:14:17,420
you you know map this virtual network

00:14:15,500 --> 00:14:21,410
concept on to the physical

00:14:17,420 --> 00:14:22,940
infrastructure so this is the physical

00:14:21,410 --> 00:14:28,250
infrastructure which is overlaid on top

00:14:22,940 --> 00:14:30,050
of that virtual infrastructure and so

00:14:28,250 --> 00:14:32,000
what lets you do is that it mapped lets

00:14:30,050 --> 00:14:34,310
you map virtual networks to physical

00:14:32,000 --> 00:14:36,920
infrastructure it lets you define and

00:14:34,310 --> 00:14:40,129
provision network services like load

00:14:36,920 --> 00:14:42,439
balancing and VPN and then it lets you

00:14:40,129 --> 00:14:46,029
helps you manage the elasticity and

00:14:42,439 --> 00:14:46,029
scale that you need for cloud networking

00:14:59,080 --> 00:15:06,640
so so I talked about network services

00:15:03,700 --> 00:15:10,030
and let me explain what that is if you

00:15:06,640 --> 00:15:15,100
look at this slide here you have these

00:15:10,030 --> 00:15:18,430
two guys Dave and joke Dave's got set of

00:15:15,100 --> 00:15:21,580
services it's got an ad DS P firewalling

00:15:18,430 --> 00:15:26,290
and load balancing but Joe's got all the

00:15:21,580 --> 00:15:28,450
VPN night and dhcp so each tenant or

00:15:26,290 --> 00:15:30,580
each network in the cloud tends to have

00:15:28,450 --> 00:15:32,980
a different set of metro or service

00:15:30,580 --> 00:15:35,980
requirements right and so we need to be

00:15:32,980 --> 00:15:42,190
able to provide that differentiation for

00:15:35,980 --> 00:15:44,080
each Network so if you look at the long

00:15:42,190 --> 00:15:46,870
list of services that people are used to

00:15:44,080 --> 00:15:48,550
in a data center the first thing is they

00:15:46,870 --> 00:15:52,270
want L to connectivity that they want

00:15:48,550 --> 00:15:55,890
you know your IP address space like in

00:15:52,270 --> 00:15:58,210
at your home where each each of your

00:15:55,890 --> 00:16:00,670
virtual machines isn't the same way to

00:15:58,210 --> 00:16:03,430
domain then they want to be able to

00:16:00,670 --> 00:16:06,370
address ein addresses to it and then

00:16:03,430 --> 00:16:08,800
look it up by dns name and then route it

00:16:06,370 --> 00:16:11,230
to the external internet and then maybe

00:16:08,800 --> 00:16:13,320
you want to be able to provide access

00:16:11,230 --> 00:16:15,790
control between the between the machines

00:16:13,320 --> 00:16:19,060
you want to be able to far wall of the

00:16:15,790 --> 00:16:20,440
internet and you want to give match so

00:16:19,060 --> 00:16:22,600
that you know you're even though you

00:16:20,440 --> 00:16:27,250
don't have a public IP address you can

00:16:22,600 --> 00:16:30,100
still access public IP services you want

00:16:27,250 --> 00:16:31,750
VPN to connect you know data centers

00:16:30,100 --> 00:16:35,530
together you want load-balancing to

00:16:31,750 --> 00:16:37,840
provide a scalable web service then you

00:16:35,530 --> 00:16:41,410
might even need things like intrusion

00:16:37,840 --> 00:16:46,270
detection and intrusion prevention in

00:16:41,410 --> 00:16:47,890
the cloud and in the state of the market

00:16:46,270 --> 00:16:50,280
today is that you can do this with

00:16:47,890 --> 00:16:53,460
number of different ways you can use

00:16:50,280 --> 00:16:56,230
Hardware firewalls which you know

00:16:53,460 --> 00:17:01,240
companies like cisco and juniper will

00:16:56,230 --> 00:17:03,100
gladly sell you you can use appliances

00:17:01,240 --> 00:17:05,350
which are virtual appliances to to do

00:17:03,100 --> 00:17:07,480
the same thing some of these tasks they

00:17:05,350 --> 00:17:09,070
can delegate to the hypervisor and some

00:17:07,480 --> 00:17:09,630
of these tasks there will be you know

00:17:09,070 --> 00:17:11,790
what

00:17:09,630 --> 00:17:13,740
or virtual routing functions inside the

00:17:11,790 --> 00:17:19,199
hardware which can provide that kind of

00:17:13,740 --> 00:17:21,510
isolation and then depending on the

00:17:19,199 --> 00:17:24,630
isolation technology you've chosen to

00:17:21,510 --> 00:17:27,150
isolate your tenants you can do this in

00:17:24,630 --> 00:17:29,040
in many different ways you can sometimes

00:17:27,150 --> 00:17:31,050
the cloud is deployed with no isolation

00:17:29,040 --> 00:17:33,120
sometimes it has VLAN isolation and

00:17:31,050 --> 00:17:35,880
sometimes it has overly isolation or

00:17:33,120 --> 00:17:38,370
maybe a mix of these things and so you

00:17:35,880 --> 00:17:41,610
want to be able to do network services

00:17:38,370 --> 00:17:45,150
with a bunch of different service

00:17:41,610 --> 00:17:46,830
providers are a bunch of different types

00:17:45,150 --> 00:17:50,010
of network topologies and so that's

00:17:46,830 --> 00:17:53,870
primarily the challenge which the trap

00:17:50,010 --> 00:17:58,560
stack networking model is trying to do

00:17:53,870 --> 00:18:01,370
and when it comes as DM controls the

00:17:58,560 --> 00:18:05,130
state of the art tends to be that the

00:18:01,370 --> 00:18:09,720
SDN controls can provide these kind of

00:18:05,130 --> 00:18:11,430
services typically not these and they

00:18:09,720 --> 00:18:19,410
typically work with villa and isolation

00:18:11,430 --> 00:18:21,470
and l2 end and overlays any questions so

00:18:19,410 --> 00:18:21,470
far

00:18:27,080 --> 00:18:32,779
so how does CloudStack you know give you

00:18:29,899 --> 00:18:34,700
that kind of flexibility so cloudstack

00:18:32,779 --> 00:18:37,130
has a Service Catalog and if you run a

00:18:34,700 --> 00:18:39,110
virtual machine in any cloud it

00:18:37,130 --> 00:18:40,549
typically asks you well what size of VM

00:18:39,110 --> 00:18:45,350
do you want and you want it small and

00:18:40,549 --> 00:18:47,179
you are an extra memory with it you know

00:18:45,350 --> 00:18:49,190
and so that's that's like its service

00:18:47,179 --> 00:18:51,070
catalog of CPU and memory offerings and

00:18:49,190 --> 00:18:55,669
so cloudstack takes a similar approach

00:18:51,070 --> 00:18:58,700
to to the network part of designing the

00:18:55,669 --> 00:19:00,860
network so the the end user is not

00:18:58,700 --> 00:19:02,450
exposed to the nature he doesn't know

00:19:00,860 --> 00:19:07,880
that his firewalling is being provided

00:19:02,450 --> 00:19:09,980
by Cisco device and has and that that

00:19:07,880 --> 00:19:12,110
his load balancers being provided by the

00:19:09,980 --> 00:19:14,149
netscaler or or any of those

00:19:12,110 --> 00:19:18,590
combinations right Ollie warrants is the

00:19:14,149 --> 00:19:20,299
the abstract service offered to him so

00:19:18,590 --> 00:19:24,049
the cloud operator would designs a

00:19:20,299 --> 00:19:26,149
service using cloud sites api's and then

00:19:24,049 --> 00:19:28,820
offers them to end-users and so let's

00:19:26,149 --> 00:19:31,429
see what that looks like so let's say

00:19:28,820 --> 00:19:33,470
he's got a so-called gold and then he

00:19:31,429 --> 00:19:36,950
tells cloudstack you notified the gold

00:19:33,470 --> 00:19:38,690
level of service you just use virtual

00:19:36,950 --> 00:19:40,880
appliances which are cheap and you know

00:19:38,690 --> 00:19:43,130
it doesn't cost me anything in license

00:19:40,880 --> 00:19:46,880
terms and but they don't give you that

00:19:43,130 --> 00:19:49,100
much throughput either so it offers you

00:19:46,880 --> 00:19:52,340
load balancing and firewalling using

00:19:49,100 --> 00:19:54,470
virtual appliances or then the designs a

00:19:52,340 --> 00:19:56,990
platform offering where you get these

00:19:54,470 --> 00:19:58,429
two services and pasta VPN but they all

00:19:56,990 --> 00:20:00,950
use in hardware appliances so it gives

00:19:58,429 --> 00:20:04,490
you that level of performance then you

00:20:00,950 --> 00:20:05,960
charge extra for that too and then you

00:20:04,490 --> 00:20:08,059
can mix and match so you can even say

00:20:05,960 --> 00:20:10,100
well I want to restrict the the rate to

00:20:08,059 --> 00:20:12,649
10 megabits per second and then use

00:20:10,100 --> 00:20:15,789
virtual appliances as well so and then

00:20:12,649 --> 00:20:15,789
charge you one less for that

00:20:20,930 --> 00:20:30,210
so here's an example of how this is

00:20:26,250 --> 00:20:32,220
realized so and this is the old virtual

00:20:30,210 --> 00:20:34,500
topology I showed you where you have

00:20:32,220 --> 00:20:37,890
these contiguous IP addresses and you

00:20:34,500 --> 00:20:39,630
got your for BMS and out of the box

00:20:37,890 --> 00:20:41,460
heart attack gives us this virtual

00:20:39,630 --> 00:20:43,800
appliance cuz the cloudstack virtual

00:20:41,460 --> 00:20:45,510
router which can give you a whole bunch

00:20:43,800 --> 00:20:49,710
of different network services anywhere

00:20:45,510 --> 00:20:51,300
from dhcp to a load-balancing to VPN and

00:20:49,710 --> 00:20:55,800
so let's say this is the gold offering

00:20:51,300 --> 00:20:58,680
very cheap it gives you access to a few

00:20:55,800 --> 00:21:03,270
public IP addresses and all these

00:20:58,680 --> 00:21:04,950
services right and and assuming that the

00:21:03,270 --> 00:21:09,090
service board has chosen via an

00:21:04,950 --> 00:21:11,880
isolation the crosstrack pics of free

00:21:09,090 --> 00:21:18,780
VLAN out of the pool of vlans and then

00:21:11,880 --> 00:21:20,490
allocates that to that customer or maybe

00:21:18,780 --> 00:21:22,440
this is the the platinum offering where

00:21:20,490 --> 00:21:25,290
you get the same set of services you get

00:21:22,440 --> 00:21:29,970
the DHCP and load balancing and VPN and

00:21:25,290 --> 00:21:32,490
that all the way but the the sauce

00:21:29,970 --> 00:21:35,030
offering is realized using the jr / sr

00:21:32,490 --> 00:21:37,560
firewall in the netscaler load balancer

00:21:35,030 --> 00:21:40,080
right and at the bottom there you see

00:21:37,560 --> 00:21:42,390
that this the cloudstack virtual rotor

00:21:40,080 --> 00:21:47,660
is still there but all it's doing is

00:21:42,390 --> 00:21:47,660
dhcp and dns right and so

00:21:49,570 --> 00:22:05,390
pardon me He sorry cook no not all it's

00:22:03,440 --> 00:22:08,059
doing is making sure that the VMS get

00:22:05,390 --> 00:22:09,980
their dhcp addresses method yeah so it's

00:22:08,059 --> 00:22:12,080
in that function it's not a virtual

00:22:09,980 --> 00:22:14,000
router but it is the same software image

00:22:12,080 --> 00:22:20,090
as that what we use in here that's all

00:22:14,000 --> 00:22:21,860
yeah so so this is the the magic

00:22:20,090 --> 00:22:26,330
orchestration that cloudstack does for

00:22:21,860 --> 00:22:28,970
you right and then I mean if you're a

00:22:26,330 --> 00:22:30,320
savvy service provider you want to hook

00:22:28,970 --> 00:22:32,450
your customers in with the cheap

00:22:30,320 --> 00:22:35,300
operator and then let them upgrade to

00:22:32,450 --> 00:22:36,920
the to the expense of offering once

00:22:35,300 --> 00:22:38,960
their service becomes successful and

00:22:36,920 --> 00:22:42,260
then you can offer them in a braid pad

00:22:38,960 --> 00:22:43,610
from each one one type of service

00:22:42,260 --> 00:22:47,150
offering to another type of service

00:22:43,610 --> 00:22:50,000
offering so that's something like you

00:22:47,150 --> 00:22:53,360
have an m1 small in your Amazon Cloud

00:22:50,000 --> 00:22:58,640
and it's it's doing fine suddenly you

00:22:53,360 --> 00:23:00,470
have been digged or whatever and then

00:22:58,640 --> 00:23:03,140
you know you certainly need bigger

00:23:00,470 --> 00:23:05,960
capacity so you upgrade to the m1 extra

00:23:03,140 --> 00:23:09,110
extra large too so that extra capacity

00:23:05,960 --> 00:23:11,950
and and and and it's all just an API

00:23:09,110 --> 00:23:11,950
call to do that

00:23:15,760 --> 00:23:21,220
and the important thing to note here is

00:23:17,620 --> 00:23:23,230
that the user calling making the API

00:23:21,220 --> 00:23:26,290
call has no idea what he's using whether

00:23:23,230 --> 00:23:29,590
it's the cs vishal rotor or whether it's

00:23:26,290 --> 00:23:31,900
the the hardware load balancer and in

00:23:29,590 --> 00:23:34,090
the juniper firewall so that kind of

00:23:31,900 --> 00:23:37,090
complexity that box level configuration

00:23:34,090 --> 00:23:40,060
is hidden from the end user and you

00:23:37,090 --> 00:23:45,520
could argue that this is also in an SDN

00:23:40,060 --> 00:23:47,380
but it kind of doesn't fit that current

00:23:45,520 --> 00:23:50,170
definition right now but it is a

00:23:47,380 --> 00:23:53,710
large-scale orchestration of service

00:23:50,170 --> 00:23:56,140
appliances and then you could do you

00:23:53,710 --> 00:23:58,840
want something like multi-tier so you

00:23:56,140 --> 00:24:01,990
want to have a traditional web tier apt

00:23:58,840 --> 00:24:03,490
your data based here and then trash

00:24:01,990 --> 00:24:06,370
stack will have to orchestrate that as

00:24:03,490 --> 00:24:11,020
well so you start up your web tier some

00:24:06,370 --> 00:24:13,120
VMS there some app tier and the data

00:24:11,020 --> 00:24:16,060
based here and now you can start

00:24:13,120 --> 00:24:20,530
defining access control rules saying

00:24:16,060 --> 00:24:22,060
that the actor or the web tier can't

00:24:20,530 --> 00:24:26,400
access the database chair but the apt

00:24:22,060 --> 00:24:30,370
here can access the database to you and

00:24:26,400 --> 00:24:35,290
then you can provision load balancers on

00:24:30,370 --> 00:24:38,620
the web tier hook them up to other data

00:24:35,290 --> 00:24:45,000
center services like mpls and even

00:24:38,620 --> 00:24:48,340
create an IPSec site-to-site VPN using

00:24:45,000 --> 00:24:50,410
sort of using IPSec to their remote

00:24:48,340 --> 00:24:54,070
premises so this is like a complete

00:24:50,410 --> 00:24:56,110
network solution in the cloud which

00:24:54,070 --> 00:24:59,940
gives you the functional equivalents of

00:24:56,110 --> 00:24:59,940
something like Amazon VPC

00:25:02,450 --> 00:25:09,780
and that that's the list of services

00:25:05,760 --> 00:25:13,130
that this single appliance gives you it

00:25:09,780 --> 00:25:17,130
gives you dhcp dns load-balancing

00:25:13,130 --> 00:25:19,440
site-to-site VPN static roads access

00:25:17,130 --> 00:25:26,580
controls an ad port forwarding and so on

00:25:19,440 --> 00:25:28,320
so forth so I have been talking a lot

00:25:26,580 --> 00:25:30,360
about orchestration and so let me define

00:25:28,320 --> 00:25:31,679
what that means and this is the

00:25:30,360 --> 00:25:33,600
definition from Wikipedia but

00:25:31,679 --> 00:25:37,470
essentially what you're doing is we're

00:25:33,600 --> 00:25:40,610
taking complex computer systems whether

00:25:37,470 --> 00:25:44,520
their network devices or hypo Wiser's or

00:25:40,610 --> 00:25:47,520
other services and in a step-by-step

00:25:44,520 --> 00:25:49,950
fashion we are orchestrating them in

00:25:47,520 --> 00:25:55,580
order to provide that into that service

00:25:49,950 --> 00:25:59,370
which the end user requires right and so

00:25:55,580 --> 00:26:02,940
if you look here literally when you

00:25:59,370 --> 00:26:05,990
create an Amazon VPC in CloudStack we go

00:26:02,940 --> 00:26:09,860
off and start the ritual appliance we

00:26:05,990 --> 00:26:15,120
allocate this VLAN for you carve it out

00:26:09,860 --> 00:26:18,059
we we interact with the hypervisors to

00:26:15,120 --> 00:26:23,520
place these via VMS mix on those on the

00:26:18,059 --> 00:26:25,710
on that VLAN we write rules into the

00:26:23,520 --> 00:26:29,840
virtual appliance to make sure that the

00:26:25,710 --> 00:26:32,700
access control rules are satisfied we do

00:26:29,840 --> 00:26:34,410
we install static routes into the

00:26:32,700 --> 00:26:37,429
virtual appliance so that you can access

00:26:34,410 --> 00:26:40,020
the Internet we will talk to the

00:26:37,429 --> 00:26:46,740
hardware load balancer or the witch load

00:26:40,020 --> 00:26:49,919
balancer spin it up spin it down put

00:26:46,740 --> 00:26:53,010
these mix make sure these Knicks are all

00:26:49,919 --> 00:26:55,919
hooked up together properly and even you

00:26:53,010 --> 00:26:57,510
know control or control the ipsec

00:26:55,919 --> 00:27:00,809
software in order to make sure that the

00:26:57,510 --> 00:27:02,940
the VPN works so that that's you know at

00:27:00,809 --> 00:27:05,660
the heart of work cloudstack does is

00:27:02,940 --> 00:27:05,660
orchestration

00:27:08,520 --> 00:27:14,020
so naturally trout stack has this

00:27:11,260 --> 00:27:16,540
orchestration core which has the great

00:27:14,020 --> 00:27:20,640
deal of this orchestration and in front

00:27:16,540 --> 00:27:22,780
of that orchestration core sorry and and

00:27:20,640 --> 00:27:24,730
because crushed rock has is always

00:27:22,780 --> 00:27:26,140
flexibility in talking to the number of

00:27:24,730 --> 00:27:27,990
different hypervisors talking to a

00:27:26,140 --> 00:27:30,580
number of different network appliances

00:27:27,990 --> 00:27:35,800
there is this plug-in framework which

00:27:30,580 --> 00:27:39,010
helps us to abstract this complexity and

00:27:35,800 --> 00:27:42,880
the plugins are broadly hypervisor the

00:27:39,010 --> 00:27:45,550
network allocator and and storage and

00:27:42,880 --> 00:27:47,470
the reason i put the storage in in

00:27:45,550 --> 00:27:50,230
dotted lines is because that's just knew

00:27:47,470 --> 00:27:57,580
it's just landed in in trunk couple of

00:27:50,230 --> 00:28:00,490
days ago so so 22 harrell the

00:27:57,580 --> 00:28:03,370
differences between xenserver vmware kvm

00:28:00,490 --> 00:28:07,480
and orbital there's plug-ins for each of

00:28:03,370 --> 00:28:09,820
them for if you wanted to do something

00:28:07,480 --> 00:28:11,500
fancy in the way you place your pm's on

00:28:09,820 --> 00:28:16,630
different hypervisors there's different

00:28:11,500 --> 00:28:19,150
algorithms for that and if you wanted to

00:28:16,630 --> 00:28:20,680
do use different kinds of SDN

00:28:19,150 --> 00:28:25,300
controllers you could write different

00:28:20,680 --> 00:28:27,280
plugins for that and so how does that

00:28:25,300 --> 00:28:29,770
work so here's here comes the user

00:28:27,280 --> 00:28:32,260
there's a bunch of API servers in front

00:28:29,770 --> 00:28:35,920
of the orchestration core user says give

00:28:32,260 --> 00:28:39,040
me a vm right and that that gets passed

00:28:35,920 --> 00:28:41,230
on to the orchestration core and at this

00:28:39,040 --> 00:28:43,150
point the service that is responsible

00:28:41,230 --> 00:28:44,860
for starting at the vm asked allocator

00:28:43,150 --> 00:28:49,690
you know which hypervisor should I

00:28:44,860 --> 00:28:51,520
landis vm on right and so once that has

00:28:49,690 --> 00:28:53,050
chosen it goes to the hypervisor plugin

00:28:51,520 --> 00:28:58,000
says you know I need to start this VM or

00:28:53,050 --> 00:28:59,920
traitors vm and so that so that message

00:28:58,000 --> 00:29:04,900
goes off to the actual hypervisor to

00:28:59,920 --> 00:29:06,640
actually start the vm and then you go to

00:29:04,900 --> 00:29:08,110
the network resource to the plug-in

00:29:06,640 --> 00:29:11,400
saying that you know i need to place the

00:29:08,110 --> 00:29:11,400
civilians neck on this network

00:29:12,330 --> 00:29:16,679
and same with the storage that you want

00:29:15,299 --> 00:29:18,929
to tell the storage in a cardboard to

00:29:16,679 --> 00:29:22,350
volume for this copy this template from

00:29:18,929 --> 00:29:27,090
from here into that volume and so that

00:29:22,350 --> 00:29:29,130
the vm can start and although I've shown

00:29:27,090 --> 00:29:31,320
this as a serial step you can actually

00:29:29,130 --> 00:29:32,850
imagine this you know as a set of

00:29:31,320 --> 00:29:36,299
parallel instructions that you know you

00:29:32,850 --> 00:29:37,799
could tell the network plug in and the

00:29:36,299 --> 00:29:42,570
storage plug in to work in Fargo for

00:29:37,799 --> 00:29:44,360
example so I guess the point I'm trying

00:29:42,570 --> 00:29:47,580
to make is that this is a set of

00:29:44,360 --> 00:29:51,409
orchestration steps with well-defined

00:29:47,580 --> 00:29:54,000
semantics you could fail at any of these

00:29:51,409 --> 00:29:55,500
steps and then CloudStack would still

00:29:54,000 --> 00:29:58,769
ensure that you have a consistent view

00:29:55,500 --> 00:30:00,720
of the system right if you created the

00:29:58,769 --> 00:30:03,120
vm traitor the network but you failed at

00:30:00,720 --> 00:30:05,760
the storage step cloudstack would roll

00:30:03,120 --> 00:30:08,899
roll roll that all back for you and make

00:30:05,760 --> 00:30:14,039
sure there is no resources left around

00:30:08,899 --> 00:30:17,450
which are half half mate right which is

00:30:14,039 --> 00:30:20,549
what any orchestration system should do

00:30:17,450 --> 00:30:22,019
so where does a harder CloudStack

00:30:20,549 --> 00:30:25,169
integrate with Software Defined

00:30:22,019 --> 00:30:29,690
Networking controllers so that comes in

00:30:25,169 --> 00:30:32,570
at the network bugging stage where the

00:30:29,690 --> 00:30:35,299
recent the software-defined controller

00:30:32,570 --> 00:30:39,510
software-defined networking controller

00:30:35,299 --> 00:30:42,149
is is that there is a glue which is

00:30:39,510 --> 00:30:45,299
written in the plug-in which glues cloud

00:30:42,149 --> 00:30:55,429
stacks networking model into the SDN

00:30:45,299 --> 00:30:55,429
networking so what we have today is

00:30:56,570 --> 00:30:59,929
integration with

00:31:02,480 --> 00:31:07,620
but let's sort of it nice and write V P

00:31:05,130 --> 00:31:10,320
and they use something called stt

00:31:07,620 --> 00:31:12,780
isolation and that's available in info

00:31:10,320 --> 00:31:15,870
rato and then the deer contributing

00:31:12,780 --> 00:31:19,260
source not in the logical router in for

00:31:15,870 --> 00:31:21,690
Doc to fix which has made a contribution

00:31:19,260 --> 00:31:24,060
the VLAN isolation is there in for that

00:31:21,690 --> 00:31:26,910
one and they're VLS isolation should be

00:31:24,060 --> 00:31:29,280
there in four are two middle crew is

00:31:26,910 --> 00:31:31,950
working on the l2 to l4 network

00:31:29,280 --> 00:31:36,090
virtualization rich in quinlan in 42 and

00:31:31,950 --> 00:31:39,720
then there's some built-in SDN

00:31:36,090 --> 00:31:41,400
controller in CloudStack encore called

00:31:39,720 --> 00:31:44,490
CloudStack native controller of the

00:31:41,400 --> 00:31:48,090
built-in controller and it's been there

00:31:44,490 --> 00:31:54,720
for almost a year now and what it

00:31:48,090 --> 00:31:58,980
requires and server so so let's see how

00:31:54,720 --> 00:32:01,110
that that can work so let's say the the

00:31:58,980 --> 00:32:05,160
end user says you know give me three BMS

00:32:01,110 --> 00:32:07,980
it's today is three API calls the

00:32:05,160 --> 00:32:12,230
allocate the hypervisors for those VMs

00:32:07,980 --> 00:32:19,650
and then we shoot out these laser beams

00:32:12,230 --> 00:32:24,780
sorry make the API calls laser beams are

00:32:19,650 --> 00:32:30,930
coming in six startup two startup these

00:32:24,780 --> 00:32:32,760
VMs right and so here you have these

00:32:30,930 --> 00:32:34,470
three beams require that which a writer

00:32:32,760 --> 00:32:37,800
to be staggered up so that start up

00:32:34,470 --> 00:32:41,580
first and then these three beams come in

00:32:37,800 --> 00:32:43,620
here and so how does the the native

00:32:41,580 --> 00:32:46,590
controller work so it needs to do this

00:32:43,620 --> 00:32:49,590
its networking part so if we use a

00:32:46,590 --> 00:32:51,540
technology or an overlay called GRE so

00:32:49,590 --> 00:32:55,590
what we do is we set up GRE tiles

00:32:51,540 --> 00:32:58,950
between these between these hypervisor

00:32:55,590 --> 00:33:02,190
hosts and then every time a ethernet

00:32:58,950 --> 00:33:04,530
frame comes out of this VM we take that

00:33:02,190 --> 00:33:07,350
ethernet frame and further into this GRE

00:33:04,530 --> 00:33:08,290
packet and then make sure that Jerry

00:33:07,350 --> 00:33:10,720
packet

00:33:08,290 --> 00:33:13,450
the destination VN because we know where

00:33:10,720 --> 00:33:16,450
the destination vm is and the

00:33:13,450 --> 00:33:18,160
destination that Jerry packet is taken

00:33:16,450 --> 00:33:23,110
and the ethernet frame is removed and

00:33:18,160 --> 00:33:25,960
then put into this destination vm so we

00:33:23,110 --> 00:33:27,820
and then so that each VM can talk to

00:33:25,960 --> 00:33:34,210
each other we create a full mesh of

00:33:27,820 --> 00:33:37,330
these GRE tones so there you go laser

00:33:34,210 --> 00:33:39,940
beam shooting up again and this obvious

00:33:37,330 --> 00:33:42,310
thing I show your is called the open V

00:33:39,940 --> 00:33:44,890
switch controller also the open V switch

00:33:42,310 --> 00:33:47,800
and that's a piece of technology it's a

00:33:44,890 --> 00:33:52,150
hypervisor virtual switch which is there

00:33:47,800 --> 00:33:56,230
in incense over and KDM and what the SDN

00:33:52,150 --> 00:34:01,420
controller does is actually just SSH is

00:33:56,230 --> 00:34:04,450
into the into the into the hypervisor to

00:34:01,420 --> 00:34:09,970
make calls into this ovs which will

00:34:04,450 --> 00:34:15,880
switch so now we have a full mesh of gr

00:34:09,970 --> 00:34:19,540
eight ounce what do we do with it so GRE

00:34:15,880 --> 00:34:25,870
has this attribute called a GRE key

00:34:19,540 --> 00:34:31,020
which which is 32 bit long and so we

00:34:25,870 --> 00:34:36,940
allocate a key to one of these networks

00:34:31,020 --> 00:34:39,400
so that so that each each network is

00:34:36,940 --> 00:34:45,190
able to see the the packet on that in

00:34:39,400 --> 00:34:48,429
that in that tag with that key and then

00:34:45,190 --> 00:34:50,980
if you have a new network or a new

00:34:48,429 --> 00:34:53,620
tenant coming in we just allocate a

00:34:50,980 --> 00:34:56,260
different set of keys for that talent

00:34:53,620 --> 00:34:58,030
and so they're able to share any GRE

00:34:56,260 --> 00:35:00,700
tones which are already been set up and

00:34:58,030 --> 00:35:03,060
they are differentiated with these GRE

00:35:00,700 --> 00:35:03,060
keys

00:35:06,050 --> 00:35:14,370
GRE yes Jerry or IP so this can be one

00:35:12,780 --> 00:35:16,860
one end of the day Center that can be a

00:35:14,370 --> 00:35:18,630
different end of the data center and all

00:35:16,860 --> 00:35:22,940
we are assuming is l3 connectivity

00:35:18,630 --> 00:35:22,940
between us proposal is it all right yeah

00:35:29,310 --> 00:35:37,120
so what makes this card stack native

00:35:34,780 --> 00:35:39,640
controller different firm any of the

00:35:37,120 --> 00:35:45,850
other guys the the the billion-dollar

00:35:39,640 --> 00:35:51,670
startups and the and a bunch of other

00:35:45,850 --> 00:35:53,860
games out there first thing is it was

00:35:51,670 --> 00:35:56,650
purpose-built for the application at

00:35:53,860 --> 00:36:00,520
hand it's it's it's purpose-built for an

00:35:56,650 --> 00:36:05,380
IAS scenario and specifically it was

00:36:00,520 --> 00:36:08,830
purpose-built to imitate how the Amazon

00:36:05,380 --> 00:36:11,140
VPC experiences built so it's not a

00:36:08,830 --> 00:36:13,300
general-purpose sdn solution where you

00:36:11,140 --> 00:36:15,280
can say that or I can just take out the

00:36:13,300 --> 00:36:16,900
bits from CloudStack and start running a

00:36:15,280 --> 00:36:22,750
general-purpose SDN controller it's not

00:36:16,900 --> 00:36:24,790
that it is built for tarts type the

00:36:22,750 --> 00:36:27,940
second differentiator is that it has a

00:36:24,790 --> 00:36:30,910
proactive are so by default when the

00:36:27,940 --> 00:36:34,840
virtual machine is on the network it

00:36:30,910 --> 00:36:37,900
will deny its all its flows are denied

00:36:34,840 --> 00:36:39,580
until the user comes in and programs of

00:36:37,900 --> 00:36:42,010
flossing that you know I want to allow

00:36:39,580 --> 00:36:44,020
this BM to talk to that vm at which

00:36:42,010 --> 00:36:47,890
point we will program a rule saying that

00:36:44,020 --> 00:36:50,500
or let this packet go through what the

00:36:47,890 --> 00:36:53,710
other sdn controllers do is that they

00:36:50,500 --> 00:36:55,690
have the same set of rules but as the

00:36:53,710 --> 00:36:57,100
packet gets out of the vm they say well

00:36:55,690 --> 00:36:58,210
i don't know what to do with this so

00:36:57,100 --> 00:37:01,030
they send it up to the central

00:36:58,210 --> 00:37:04,090
controller and the gatha's huge central

00:37:01,030 --> 00:37:05,770
controller which all the flows billions

00:37:04,090 --> 00:37:07,690
of flow is coming in a read every day

00:37:05,770 --> 00:37:09,820
and they're looking up frantically

00:37:07,690 --> 00:37:11,320
looking them up and trying to figure out

00:37:09,820 --> 00:37:13,630
well should we allow this packet or not

00:37:11,320 --> 00:37:16,120
so they decide well let us allow this

00:37:13,630 --> 00:37:19,810
packet then they send down under the

00:37:16,120 --> 00:37:21,490
message back to the to the to the to the

00:37:19,810 --> 00:37:24,070
hypervisor saying okay let this bracket

00:37:21,490 --> 00:37:26,770
through so it's a it's it's perfectly

00:37:24,070 --> 00:37:28,960
valid approach when it has problems with

00:37:26,770 --> 00:37:31,810
scaling and so with the proactive

00:37:28,960 --> 00:37:34,840
approach it tends to work a little bit

00:37:31,810 --> 00:37:37,000
or it right yeah you can see it working

00:37:34,840 --> 00:37:39,940
for you know tens of thousands of

00:37:37,000 --> 00:37:43,490
machines or tens of thousands of high

00:37:39,940 --> 00:37:47,570
and then finally as part of CloudStack

00:37:43,490 --> 00:37:50,330
is part of an ESF project and to provide

00:37:47,570 --> 00:37:52,790
the layer 3 2 layer 7 services today

00:37:50,330 --> 00:37:55,700
teaser 2 virtual rotor and that's

00:37:52,790 --> 00:37:57,470
primarily because if you try to use a

00:37:55,700 --> 00:38:00,230
traditional hardware device like a

00:37:57,470 --> 00:38:01,750
Juniper SRX or a net scale a little

00:38:00,230 --> 00:38:05,150
balance so they don't understand GRE

00:38:01,750 --> 00:38:07,940
right so so you need some something else

00:38:05,150 --> 00:38:11,150
to dekap slate that Jerry to an ethernet

00:38:07,940 --> 00:38:13,790
frame and that you could do that but

00:38:11,150 --> 00:38:19,220
that's expensive so Saturday it only

00:38:13,790 --> 00:38:22,880
works with the virtual route but that

00:38:19,220 --> 00:38:26,330
could change for instance because you

00:38:22,880 --> 00:38:29,180
have so much control of how a packet can

00:38:26,330 --> 00:38:32,570
go from A to B if you want to send a

00:38:29,180 --> 00:38:33,950
packet from one subject to another you

00:38:32,570 --> 00:38:37,280
could send it directly without setting

00:38:33,950 --> 00:38:39,940
into the West order and let me explain

00:38:37,280 --> 00:38:39,940
that a little bit

00:38:46,410 --> 00:38:52,430
yeah ok so imagine this is this

00:38:49,680 --> 00:38:56,130
three-tier network where you have

00:38:52,430 --> 00:38:59,940
instead of vlans you got different GRE

00:38:56,130 --> 00:39:02,640
keys to handle that to handle that kind

00:38:59,940 --> 00:39:04,559
of isolation now if the valve Ian what

00:39:02,640 --> 00:39:06,059
struggled at the end you could say that

00:39:04,559 --> 00:39:08,579
while he has to go through the virtual

00:39:06,059 --> 00:39:11,630
appliance which is another virtual

00:39:08,579 --> 00:39:14,280
machine or you could say that well I

00:39:11,630 --> 00:39:15,750
know that he wants to talk to the appium

00:39:14,280 --> 00:39:17,880
so instead of bothering to send it

00:39:15,750 --> 00:39:20,700
through the virtual appliance I can set

00:39:17,880 --> 00:39:26,010
up a demo from here to there directly

00:39:20,700 --> 00:39:28,680
and then just deliver the package they

00:39:26,010 --> 00:39:30,359
are tricky yeah so what I'm saying is

00:39:28,680 --> 00:39:34,280
instead of using the vlans I would just

00:39:30,359 --> 00:39:36,869
use the Jerry he oh yeah all right yeah

00:39:34,280 --> 00:39:39,059
yeah yeah so I could just use the Jerry

00:39:36,869 --> 00:39:41,789
key there and then set up a brand new

00:39:39,059 --> 00:39:43,799
towel between these two hypervisors and

00:39:41,789 --> 00:39:45,990
then you know just bypass the butcher

00:39:43,799 --> 00:39:49,530
rotor entirely right so it gives you

00:39:45,990 --> 00:39:51,150
that kind of scale because the virtual

00:39:49,530 --> 00:39:53,160
rotor is no longer bottleneck is just

00:39:51,150 --> 00:40:00,839
direct hypervisor to hypervisor

00:39:53,160 --> 00:40:02,220
communications yeah exactly so just to

00:40:00,839 --> 00:40:06,309
put this in context in my own brain

00:40:02,220 --> 00:40:09,579
maybe a lot of others so i just upgraded

00:40:06,309 --> 00:40:13,269
I have a bring your own device I brought

00:40:09,579 --> 00:40:19,380
my own cloud or would I really did I

00:40:13,269 --> 00:40:24,699
have a simple anyone that I just I just

00:40:19,380 --> 00:40:28,059
use a clear device roped into a plate of

00:40:24,699 --> 00:40:32,529
my router and I have a cisco VPN the

00:40:28,059 --> 00:40:35,739
bottom line cisco VPN and I protect my

00:40:32,529 --> 00:40:39,640
us west zone here in Portland to us east

00:40:35,739 --> 00:40:44,430
zone of my client Minneapolis and I have

00:40:39,640 --> 00:40:47,799
my little dent sandbox yeah just the

00:40:44,430 --> 00:40:51,759
butt so i just recently operated from

00:40:47,799 --> 00:40:54,009
four out of four one I'm literally

00:40:51,759 --> 00:40:57,729
building oh ok and then i have my own

00:40:54,009 --> 00:41:00,339
debian repository anyway but the point

00:40:57,729 --> 00:41:02,410
is i upgraded it to pull in these new

00:41:00,339 --> 00:41:04,119
features and suddenly st okay oh nine

00:41:02,410 --> 00:41:06,759
with virtual router all this and i see

00:41:04,119 --> 00:41:08,769
this thing that's the burfi pc yeah

00:41:06,759 --> 00:41:11,219
that's what we got this is the bpc guys

00:41:08,769 --> 00:41:14,499
done yeah kind of play with you yet

00:41:11,219 --> 00:41:17,920
thank you what's the hypervisor overhead

00:41:14,499 --> 00:41:21,579
for effectively becoming the robber and

00:41:17,920 --> 00:41:24,429
having to Ralph Ralph at various titles

00:41:21,579 --> 00:41:28,749
because we're essentially going to have

00:41:24,429 --> 00:41:32,049
you could have in number of times yeah

00:41:28,749 --> 00:41:33,969
so tunnel a tunnel Israelis don't think

00:41:32,049 --> 00:41:36,249
of it like a TCP connection where is

00:41:33,969 --> 00:41:39,390
your maintaining state it is just an

00:41:36,249 --> 00:41:41,709
entry in the database it just says that

00:41:39,390 --> 00:41:43,809
are those packets coming in well where's

00:41:41,709 --> 00:41:46,239
the destination IP address and then it

00:41:43,809 --> 00:41:52,529
just forms like the GRE header and sends

00:41:46,239 --> 00:41:52,529
it out yeah

00:41:53,840 --> 00:41:57,150
but that's that's a very good

00:41:55,590 --> 00:41:59,600
optimization which we need to do

00:41:57,150 --> 00:42:02,400
otherwise because then it get lets you

00:41:59,600 --> 00:42:06,120
those three subtypes are showing you it

00:42:02,400 --> 00:42:09,860
lets you go from data center to data

00:42:06,120 --> 00:42:19,640
center for instance right if otherwise

00:42:09,860 --> 00:42:26,700
pardon me well it's 32 bit so we manage

00:42:19,640 --> 00:42:28,350
like you know four billion networks but

00:42:26,700 --> 00:42:30,410
we assuming that this is like within a

00:42:28,350 --> 00:42:43,200
trade center so maybe a million bm's

00:42:30,410 --> 00:42:45,720
should do technologies and have created

00:42:43,200 --> 00:42:47,970
a PC from across the u.s. western US

00:42:45,720 --> 00:42:49,650
visa zone not yet but yeah but that's

00:42:47,970 --> 00:42:51,330
where it's going yeah which is really

00:42:49,650 --> 00:42:53,220
one of these that means when I you know

00:42:51,330 --> 00:42:55,890
I will work every other week in a

00:42:53,220 --> 00:42:58,800
different location so I'm very important

00:42:55,890 --> 00:43:00,960
one yep be working on VMS that are local

00:42:58,800 --> 00:43:02,380
doing but I want to still be able to

00:43:00,960 --> 00:43:05,380
access them right after I get off

00:43:02,380 --> 00:43:11,820
playing you know yep so that's that's

00:43:05,380 --> 00:43:21,450
pretty that's interesting so laser beams

00:43:11,820 --> 00:43:21,450
yeah yeah

00:43:24,859 --> 00:43:34,759
it is yes but it's but for any given

00:43:33,049 --> 00:43:37,700
pair of hypervisors there's only one

00:43:34,759 --> 00:43:38,930
town right and the JRE key inside the

00:43:37,700 --> 00:43:48,200
tunnel is what differentiates the

00:43:38,930 --> 00:43:52,640
network's not necessarily that's

00:43:48,200 --> 00:43:54,950
assuming a million hosts that this VM is

00:43:52,640 --> 00:43:58,099
trying to order the hyper while the VMS

00:43:54,950 --> 00:43:59,509
of this hypervisor are talking to VMS on

00:43:58,099 --> 00:44:02,239
a million different other hypervisor

00:43:59,509 --> 00:44:04,489
yeah so these these towels are created

00:44:02,239 --> 00:44:06,849
on demand only when you need them we

00:44:04,489 --> 00:44:06,849
created

00:44:17,940 --> 00:44:25,829
so yeah and some of the future things

00:44:23,430 --> 00:44:28,200
that we are looking at is you know fully

00:44:25,829 --> 00:44:30,660
of VPC semantics like security groups

00:44:28,200 --> 00:44:34,140
and ackles which are not there on the on

00:44:30,660 --> 00:44:38,130
the tunnel implementation we can

00:44:34,140 --> 00:44:42,660
optimize our pan dhcp responses so what

00:44:38,130 --> 00:44:46,079
what i mean by that is today if vm1 send

00:44:42,660 --> 00:44:48,450
an ARP we have to do some complicated

00:44:46,079 --> 00:44:51,030
programming on each of the coasts so

00:44:48,450 --> 00:44:53,130
that because whether it's a full mesh

00:44:51,030 --> 00:44:54,780
you don't want packed the broadcast

00:44:53,130 --> 00:44:57,210
packet to come in and get repeated and

00:44:54,780 --> 00:45:00,480
creative in and create a flood so we

00:44:57,210 --> 00:45:04,700
have to do some complicated programming

00:45:00,480 --> 00:45:07,940
on these on this OV esto no es which is

00:45:04,700 --> 00:45:10,710
instead you could run an art demon

00:45:07,940 --> 00:45:13,740
locally on each of these hosts because

00:45:10,710 --> 00:45:16,829
we know charge stack knows the mapping

00:45:13,740 --> 00:45:20,160
between IP enma and mac address so it

00:45:16,829 --> 00:45:22,950
can a priority program these entries in

00:45:20,160 --> 00:45:27,599
there and avoid that whole broadcast

00:45:22,950 --> 00:45:31,800
dilemma and then same thing with dhcp

00:45:27,599 --> 00:45:34,740
where you want to get an IP address that

00:45:31,800 --> 00:45:37,410
broadcast which is the watcher over but

00:45:34,740 --> 00:45:44,460
you can prevent that by running a dhcp

00:45:37,410 --> 00:45:47,970
server on each on each hypervisor so

00:45:44,460 --> 00:45:50,839
that was the optimization and I think

00:45:47,970 --> 00:45:50,839
that was the end of my presentation

00:45:53,280 --> 00:45:57,510
yeah and then the sorry across all

00:45:55,200 --> 00:45:59,730
networks which are talking about which

00:45:57,510 --> 00:46:02,060
allows us to optimize intersubject

00:45:59,730 --> 00:46:02,060
routing

00:46:06,789 --> 00:46:16,979
okay that was my presentation any

00:46:09,369 --> 00:46:16,979
questions more about sorry

00:46:36,050 --> 00:46:54,150
pretty good yeah introduction start here

00:46:49,760 --> 00:46:57,510
experience so my experience was at first

00:46:54,150 --> 00:47:00,080
the learning curve was seem steep but I

00:46:57,510 --> 00:47:03,240
think it was just my realization that I

00:47:00,080 --> 00:47:05,730
may be getting infused coming literally

00:47:03,240 --> 00:47:08,670
in from google because there were a lot

00:47:05,730 --> 00:47:11,460
of older pages Google would pop up that

00:47:08,670 --> 00:47:12,870
were from the CIA side once I got that

00:47:11,460 --> 00:47:15,840
sorted out in my head that I wanted to

00:47:12,870 --> 00:47:18,170
look close with lately Akashi yeah wiki

00:47:15,840 --> 00:47:21,980
site than that you know that night

00:47:18,170 --> 00:47:27,020
and then the other part was following

00:47:21,980 --> 00:47:31,190
the mailing lists for both deaf and for

00:47:27,020 --> 00:47:33,260
you use a cloud stack and literally

00:47:31,190 --> 00:47:35,420
going day by day and check on new things

00:47:33,260 --> 00:47:38,780
we're coming up you know i'm building a

00:47:35,420 --> 00:47:41,630
leading edge I'm literally doing the

00:47:38,780 --> 00:47:44,450
snapshots the night to go building my

00:47:41,630 --> 00:47:47,540
own cloud staff creating deadly and

00:47:44,450 --> 00:47:50,360
modules there's about 40 no equipment in

00:47:47,540 --> 00:47:52,100
a Debian package manager you know

00:47:50,360 --> 00:47:55,130
repository that I remotely and then

00:47:52,100 --> 00:47:57,830
updating my class back Cloud Controller

00:47:55,130 --> 00:48:02,570
from that but I found all that just for

00:47:57,830 --> 00:48:05,900
looking to the sites and they or Jessica

00:48:02,570 --> 00:48:16,010
Jessica our docs person or she's the

00:48:05,900 --> 00:48:19,180
primary documentation contributor so

00:48:16,010 --> 00:48:19,180
that was a trick question I think

00:48:24,110 --> 00:48:31,520
so there's the MVP plugin guy parameter

00:48:27,650 --> 00:48:33,320
that gives in to the NY operation yeah I

00:48:31,520 --> 00:48:37,040
mean there's a lot of theory of child

00:48:33,320 --> 00:48:38,780
here interior but I guess when we expect

00:48:37,040 --> 00:48:44,660
people to land on the CloudStack page

00:48:38,780 --> 00:48:51,200
they know something already so you guys

00:48:44,660 --> 00:48:54,500
I did the one complete sir yes it does

00:48:51,200 --> 00:48:57,220
here you may take this slideshare here

00:48:54,500 --> 00:49:02,840
I'm alone for about three hours about

00:48:57,220 --> 00:49:09,520
necessary and I mean quite certain it

00:49:02,840 --> 00:49:09,520
was 3 hours 3 40 so that's like

00:49:16,140 --> 00:49:24,450
why don't we use stt stt today requires

00:49:20,710 --> 00:49:29,829
a i think a proprietary plug in from

00:49:24,450 --> 00:49:31,630
right Sarah yes for OBS yeah from sure

00:49:29,829 --> 00:49:35,970
the intern to contributed but I'm not

00:49:31,630 --> 00:49:35,970
sure when sure

00:49:46,700 --> 00:49:48,760
Oh

00:49:53,880 --> 00:50:01,110
so it isn't the graphical user interface

00:49:56,610 --> 00:50:04,650
in 41 I mean for for adult all you do is

00:50:01,110 --> 00:50:08,130
when you create the network offering you

00:50:04,650 --> 00:50:10,310
just choose stt in the as the isolation

00:50:08,130 --> 00:50:13,200
technology and that's all there is to it

00:50:10,310 --> 00:50:16,470
and that should be it for dot 0 for 4

00:50:13,200 --> 00:50:30,480
art one again there's nothing nicer a

00:50:16,470 --> 00:50:34,970
specific except from the admin yeah yes

00:50:30,480 --> 00:50:34,970
yours or 14 to it

00:50:45,970 --> 00:51:01,440
yeah yeah I think it might be four door

00:50:51,099 --> 00:51:01,440

YouTube URL: https://www.youtube.com/watch?v=DD9LXoO05BA


