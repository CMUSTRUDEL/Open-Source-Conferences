Title: The Good, the Bad and the Ugly: Security Vulnerability Reports from the Apache Tomcat Project
Publication date: 2013-10-17
Playlist: Apachecon NA 2013 - day 2
Description: 
	Mark Thomas
ApacheCon NA 2013
How Secure?
Captions: 
	00:00:00,000 --> 00:00:06,629
okay so the good the bad and the ugly so

00:00:04,380 --> 00:00:08,300
they're quick introduction and then i

00:00:06,629 --> 00:00:10,380
will look at three different examples of

00:00:08,300 --> 00:00:13,469
vulnerability reports that were received

00:00:10,380 --> 00:00:15,120
by the apache tomcat project and how

00:00:13,469 --> 00:00:16,590
they've been handled and as you might

00:00:15,120 --> 00:00:18,240
guess they start off being handled

00:00:16,590 --> 00:00:21,740
pretty well and it gets worse and worse

00:00:18,240 --> 00:00:25,050
and worse not all of it was our fault

00:00:21,740 --> 00:00:26,760
I'll got some reflections at the ends of

00:00:25,050 --> 00:00:28,080
lessons that we've learned things that

00:00:26,760 --> 00:00:29,880
we're going to do differently in terms

00:00:28,080 --> 00:00:31,529
of questions we'll keep a little block

00:00:29,880 --> 00:00:34,380
alive of time for questions at the end

00:00:31,529 --> 00:00:38,640
but feel free to ask any questions as we

00:00:34,380 --> 00:00:40,440
go along so for those of you that

00:00:38,640 --> 00:00:42,360
weren't in the last session my name's

00:00:40,440 --> 00:00:45,660
mark thomas i'm a committer on the

00:00:42,360 --> 00:00:47,730
apache tomcat project and additionally i

00:00:45,660 --> 00:00:49,950
help out in the infrastructure team i'm

00:00:47,730 --> 00:00:52,440
a member of the s a SF wide security

00:00:49,950 --> 00:00:55,110
team and a member of the asf in addition

00:00:52,440 --> 00:00:57,480
to dabbling in various other projects

00:00:55,110 --> 00:01:00,359
around as well my day job is as a staff

00:00:57,480 --> 00:01:01,890
engineer at vmware where they basically

00:01:00,359 --> 00:01:04,140
let just let me get on and do tomcat

00:01:01,890 --> 00:01:06,000
development which i love what I'm not

00:01:04,140 --> 00:01:07,860
doing that then I lead this spring

00:01:06,000 --> 00:01:09,479
source security team which handles all

00:01:07,860 --> 00:01:11,790
of the vulnerability reports in the

00:01:09,479 --> 00:01:13,770
spring source family of products and i

00:01:11,790 --> 00:01:15,570
work on VMware's TC server product which

00:01:13,770 --> 00:01:18,150
is essentially built on top of apache

00:01:15,570 --> 00:01:19,950
tomcat so we're going to start off with

00:01:18,150 --> 00:01:21,930
the good which is really high security

00:01:19,950 --> 00:01:25,140
vulnerability reporting and handling is

00:01:21,930 --> 00:01:27,330
meant to work and and this really does

00:01:25,140 --> 00:01:29,880
apply to the vast majority of the tomcat

00:01:27,330 --> 00:01:32,369
reports we get between 5 and 20 grand

00:01:29,880 --> 00:01:33,659
reports a year I went back over the last

00:01:32,369 --> 00:01:35,250
six or seven years trying to see if

00:01:33,659 --> 00:01:38,070
there's a trend going up or going down

00:01:35,250 --> 00:01:40,560
and no not really they just seem to come

00:01:38,070 --> 00:01:42,150
in fits and starts um a tomcat

00:01:40,560 --> 00:01:44,430
vulnerability usually applies to

00:01:42,150 --> 00:01:46,590
multiple versions so it's unusual for

00:01:44,430 --> 00:01:48,299
something just to apply to tomcat 7 or

00:01:46,590 --> 00:01:49,860
just to apply to tomcat 6 because they

00:01:48,299 --> 00:01:51,420
share so much common carried between the

00:01:49,860 --> 00:01:52,649
versions if it applies to one the

00:01:51,420 --> 00:01:55,530
chances are it's going to apply to all

00:01:52,649 --> 00:01:57,540
of the others as well looking at the

00:01:55,530 --> 00:01:59,219
tomcat 7 runner abilities that have been

00:01:57,540 --> 00:02:02,219
announced to date we haven't had any

00:01:59,219 --> 00:02:03,450
critical ones yet which is good we've

00:02:02,219 --> 00:02:06,010
actually had more important than

00:02:03,450 --> 00:02:10,060
anything else a couple of moderates and

00:02:06,010 --> 00:02:13,150
a few lows it usually takes us months to

00:02:10,060 --> 00:02:15,190
get from disclosure to us to a formal

00:02:13,150 --> 00:02:17,020
announcement and the main reason for

00:02:15,190 --> 00:02:19,780
that is because it affects multiple

00:02:17,020 --> 00:02:21,130
versions then we need to get releases

00:02:19,780 --> 00:02:22,750
out of all of the older versions as well

00:02:21,130 --> 00:02:24,910
and the older versions are on a much

00:02:22,750 --> 00:02:27,940
slower release cycle typically every

00:02:24,910 --> 00:02:29,620
four to six months so if a bit if we get

00:02:27,940 --> 00:02:30,910
a vulnerability report just after the

00:02:29,620 --> 00:02:32,290
previous release then it's going to be

00:02:30,910 --> 00:02:34,210
another four to six months until we do

00:02:32,290 --> 00:02:36,340
another release it's a bit of a red flag

00:02:34,210 --> 00:02:38,290
to people if we do it to tomcat six

00:02:36,340 --> 00:02:39,640
releases in a week it normally suggest

00:02:38,290 --> 00:02:42,640
there might be something wrong with the

00:02:39,640 --> 00:02:44,140
first one so we don't know we'd do that

00:02:42,640 --> 00:02:47,890
if it was a really serious issue but

00:02:44,140 --> 00:02:51,370
generally we don't so the good example

00:02:47,890 --> 00:02:54,040
I'm going to discuss is CVE 2012 27 33

00:02:51,370 --> 00:02:57,360
and this was a problem that just

00:02:54,040 --> 00:03:01,870
affected the niño HTTP connector and

00:02:57,360 --> 00:03:03,580
what had happened was some time ago we

00:03:01,870 --> 00:03:06,220
put in some code basically limits the

00:03:03,580 --> 00:03:08,410
size of the HTTP headers that Tomcat

00:03:06,220 --> 00:03:10,630
will accept in a request the reason for

00:03:08,410 --> 00:03:12,370
that is the servlet spec requires us to

00:03:10,630 --> 00:03:14,770
keep all of those headers in memory so

00:03:12,370 --> 00:03:16,780
the user can query them later so if you

00:03:14,770 --> 00:03:18,220
allow an infinite size of headers then

00:03:16,780 --> 00:03:20,110
you have to be able to allocate in an

00:03:18,220 --> 00:03:21,820
infinite amount of memory and you're

00:03:20,110 --> 00:03:23,590
very rapidly heading towards a potential

00:03:21,820 --> 00:03:25,269
denial of service attack if somebody

00:03:23,590 --> 00:03:27,820
sends a really large set of headers in a

00:03:25,269 --> 00:03:30,040
request so Tomcat limits those headers

00:03:27,820 --> 00:03:32,680
and by default it limits them to 8k that

00:03:30,040 --> 00:03:34,870
didn't see tiny little problem we've

00:03:32,680 --> 00:03:37,060
made in the niño connector was we did

00:03:34,870 --> 00:03:38,380
check the size of the headers but only

00:03:37,060 --> 00:03:41,410
after we'd read them and loaded them

00:03:38,380 --> 00:03:43,540
into memory so obviously you still

00:03:41,410 --> 00:03:44,860
upload in a very large header you still

00:03:43,540 --> 00:03:46,690
causing out of memory error and you can

00:03:44,860 --> 00:03:48,850
still cause the top hat to fall over so

00:03:46,690 --> 00:03:51,010
slight technical error on our part there

00:03:48,850 --> 00:03:53,709
and that was reported to us on the

00:03:51,010 --> 00:03:56,170
fourth of June last year well it was

00:03:53,709 --> 00:03:57,580
reported to the actually was reported to

00:03:56,170 --> 00:03:59,290
the Tomcat team but due to some

00:03:57,580 --> 00:04:00,880
infrastructure issues around the way

00:03:59,290 --> 00:04:02,739
that security lists were working at the

00:04:00,880 --> 00:04:04,360
time it didn't actually get through to

00:04:02,739 --> 00:04:07,360
the Tomcat team but it did get through

00:04:04,360 --> 00:04:08,830
to the security team asf why'd they

00:04:07,360 --> 00:04:11,230
forwarded it to the Tomcat seen the

00:04:08,830 --> 00:04:13,750
following day who acknowledged it to the

00:04:11,230 --> 00:04:15,459
original reporter straightaway so that

00:04:13,750 --> 00:04:17,410
will work really well a couple of days

00:04:15,459 --> 00:04:18,950
later we've got the test case written a

00:04:17,410 --> 00:04:20,750
few days after that we've got

00:04:18,950 --> 00:04:23,390
his patch so we then got in touch with

00:04:20,750 --> 00:04:24,830
the Opie again it's look yet it's

00:04:23,390 --> 00:04:28,190
confirmed it's definitely a problem

00:04:24,830 --> 00:04:30,170
here's the proposed patch we've asked

00:04:28,190 --> 00:04:32,180
for a CVA this is the CV we've got this

00:04:30,170 --> 00:04:33,740
is how we going to refer to it how do

00:04:32,180 --> 00:04:35,720
you want to be referred to in the

00:04:33,740 --> 00:04:38,420
announcement and then a couple of days

00:04:35,720 --> 00:04:41,300
after that the 70 28 release happened

00:04:38,420 --> 00:04:45,200
and then a few months later the 60 36

00:04:41,300 --> 00:04:48,200
release and because 60 36 release took

00:04:45,200 --> 00:04:49,910
so long we didn't have to worry about 55

00:04:48,200 --> 00:04:54,140
because 55 is already out of support by

00:04:49,910 --> 00:04:55,820
that point it this one did affect 55 and

00:04:54,140 --> 00:04:58,730
we knew it affected 55 but we didn't

00:04:55,820 --> 00:05:01,280
actually do a release so on the 19th

00:04:58,730 --> 00:05:03,020
once 60 36 was released we drafted the

00:05:01,280 --> 00:05:04,520
vulnerability notes but sent that to the

00:05:03,020 --> 00:05:07,910
open said this is what we're planning on

00:05:04,520 --> 00:05:10,040
saying are you happy they came back and

00:05:07,910 --> 00:05:11,720
said yet fine that's great and on the

00:05:10,040 --> 00:05:13,640
fifth of November we actually sent the

00:05:11,720 --> 00:05:17,090
announcement out so that's how things

00:05:13,640 --> 00:05:20,090
are meant to happen what I should say is

00:05:17,090 --> 00:05:23,450
every time we sent an email about this

00:05:20,090 --> 00:05:26,600
vulnerability we made sure it was copied

00:05:23,450 --> 00:05:27,740
to the security list our own project

00:05:26,600 --> 00:05:30,230
security that's the way the lists are

00:05:27,740 --> 00:05:32,450
set up is any project wide security list

00:05:30,230 --> 00:05:34,820
automatically gets cop any message that

00:05:32,450 --> 00:05:37,550
list automatically gets copied to the

00:05:34,820 --> 00:05:39,500
asf wide security list so one thing you

00:05:37,550 --> 00:05:41,240
don't need to do if it's got security at

00:05:39,500 --> 00:05:42,740
tom cat dog actually dog in the list you

00:05:41,240 --> 00:05:44,570
don't need to put security at apache to

00:05:42,740 --> 00:05:45,830
organ as well otherwise you just end up

00:05:44,570 --> 00:05:48,290
with two copies of the message and it's

00:05:45,830 --> 00:05:49,820
mildly irritating so you just if you're

00:05:48,290 --> 00:05:51,620
sending it to a projects list it's

00:05:49,820 --> 00:05:55,730
automatically going to the SF whitelist

00:05:51,620 --> 00:05:58,010
as well when you send an email to at the

00:05:55,730 --> 00:06:00,830
opie or to any other organization make

00:05:58,010 --> 00:06:03,230
sure you see see the security list so a

00:06:00,830 --> 00:06:06,140
the asf has a record that the email was

00:06:03,230 --> 00:06:07,700
sent and be the S the security team can

00:06:06,140 --> 00:06:09,680
see that you are actually talking to the

00:06:07,700 --> 00:06:12,710
original reporter because otherwise if

00:06:09,680 --> 00:06:15,080
we sent if we've sent of a message to

00:06:12,710 --> 00:06:16,790
you as a project to action and we don't

00:06:15,080 --> 00:06:18,020
see any emails going after a couple of

00:06:16,790 --> 00:06:19,460
days we're going to start hassling you

00:06:18,020 --> 00:06:21,620
to say why haven't you dealt with this

00:06:19,460 --> 00:06:22,760
yet and if the answer is olya we dealt

00:06:21,620 --> 00:06:23,990
with that days ago we sent them a

00:06:22,760 --> 00:06:25,850
message or say yeah that's great could

00:06:23,990 --> 00:06:27,440
we have a copy of it please so just make

00:06:25,850 --> 00:06:28,790
sure you copy the security list on any

00:06:27,440 --> 00:06:31,760
messages you send so we've got a full

00:06:28,790 --> 00:06:34,700
record of what's going on so that was

00:06:31,760 --> 00:06:37,190
27 33 and how it went bad how it went

00:06:34,700 --> 00:06:39,620
well next it's the bad and this is

00:06:37,190 --> 00:06:42,140
really the many many many ways that I've

00:06:39,620 --> 00:06:44,270
managed to make a mistake and there are

00:06:42,140 --> 00:06:45,560
quite a few and hopefully you'll be able

00:06:44,270 --> 00:06:48,440
to learn from these and not make the

00:06:45,560 --> 00:06:52,130
same mistakes yourself so first of all

00:06:48,440 --> 00:06:54,140
with 4431 fundamentally every security

00:06:52,130 --> 00:06:56,900
vulnerability is going to start with a

00:06:54,140 --> 00:06:58,850
coding error hey whoever's written that

00:06:56,900 --> 00:07:00,260
bit of code has got the vulnerability

00:06:58,850 --> 00:07:04,760
has made a mistake and yeah I've done

00:07:00,260 --> 00:07:06,080
that loads of times all you can really

00:07:04,760 --> 00:07:07,760
do is try it when you're doing your

00:07:06,080 --> 00:07:09,560
coding is just try and do it with with

00:07:07,760 --> 00:07:10,390
with sort of a security mindset and

00:07:09,560 --> 00:07:12,320
think about what you're doing

00:07:10,390 --> 00:07:15,200
particularly for doing security related

00:07:12,320 --> 00:07:16,700
code as I was here try and think about

00:07:15,200 --> 00:07:19,280
all of the edge cases and make sure you

00:07:16,700 --> 00:07:20,930
cover them all this particular problem

00:07:19,280 --> 00:07:23,870
was I had forgotten one of the two cover

00:07:20,930 --> 00:07:26,330
one of the edge cases I was writing a

00:07:23,870 --> 00:07:29,120
cross-site request for request forgery

00:07:26,330 --> 00:07:32,270
prevention filter and I hadn't taken

00:07:29,120 --> 00:07:34,010
account of what happens if a request was

00:07:32,270 --> 00:07:37,040
made to what should be a protected

00:07:34,010 --> 00:07:38,330
resource before a session exists and the

00:07:37,040 --> 00:07:40,280
answer is it should have been refused

00:07:38,330 --> 00:07:42,590
but it wasn't it just bypass the filter

00:07:40,280 --> 00:07:44,090
and carried on so that was a mistake on

00:07:42,590 --> 00:07:46,010
my part that actually one of the other

00:07:44,090 --> 00:07:50,930
khatam can't commit has picked up and we

00:07:46,010 --> 00:07:53,780
got that fixed the next one is awfully

00:07:50,930 --> 00:07:55,790
easy to do 3439 that's when somebody

00:07:53,780 --> 00:07:59,930
sends you a report you look at it and

00:07:55,790 --> 00:08:03,680
think uh tur nonsense now barely worth

00:07:59,930 --> 00:08:04,820
responding to it so bad when actually

00:08:03,680 --> 00:08:08,840
there's something in there that's right

00:08:04,820 --> 00:08:12,800
and and this one was a weakness in the

00:08:08,840 --> 00:08:14,990
digest authentication and what really

00:08:12,800 --> 00:08:17,060
started me in the wrong direction here

00:08:14,990 --> 00:08:19,700
was the report itself can start it off

00:08:17,060 --> 00:08:22,750
with a three or four statements and the

00:08:19,700 --> 00:08:25,550
first three were blatantly inaccurate

00:08:22,750 --> 00:08:27,770
clearly demonstrably complete and utter

00:08:25,550 --> 00:08:29,780
nonsense which government I dismissed

00:08:27,770 --> 00:08:34,160
the fourth one and the fourth one was

00:08:29,780 --> 00:08:36,140
right and the fourth one was saying you

00:08:34,160 --> 00:08:37,430
using the wrong nantes in this bit you

00:08:36,140 --> 00:08:38,810
should be using a server nonce rather

00:08:37,430 --> 00:08:40,430
than the client nonce or vice versa so I

00:08:38,810 --> 00:08:42,500
forget exactly what I did wrong but

00:08:40,430 --> 00:08:44,960
essentially I'd misread the RFC and

00:08:42,500 --> 00:08:45,680
hadn't implemented it properly and this

00:08:44,960 --> 00:08:47,270
report I had

00:08:45,680 --> 00:08:49,550
correctly identified that but because of

00:08:47,270 --> 00:08:52,420
the first three statements were were so

00:08:49,550 --> 00:08:56,000
wrong I dismissed the fourth fortunately

00:08:52,420 --> 00:08:58,940
I wasn't too dismissive when i sent the

00:08:56,000 --> 00:09:01,430
response back so the the original

00:08:58,940 --> 00:09:04,130
reporter was nice enough to say yeah

00:09:01,430 --> 00:09:05,630
actually I think yet fair point fair

00:09:04,130 --> 00:09:07,250
point fair point but not i think this

00:09:05,630 --> 00:09:09,680
point still valid and then we had a

00:09:07,250 --> 00:09:11,600
little bit of back and forth i rechecked

00:09:09,680 --> 00:09:13,160
the spec realized i've made a mistake

00:09:11,600 --> 00:09:16,930
help hand up and then we carried on and

00:09:13,160 --> 00:09:19,610
fixed it but it's awfully easy to do um

00:09:16,930 --> 00:09:20,600
so I think you do need to be careful

00:09:19,610 --> 00:09:24,110
when you're looking at these on

00:09:20,600 --> 00:09:25,730
referrals even if they look uh turn on

00:09:24,110 --> 00:09:27,800
sense you need to look at each bit and

00:09:25,730 --> 00:09:29,000
check that each one really is utter

00:09:27,800 --> 00:09:30,680
nonsense rather than just just

00:09:29,000 --> 00:09:34,310
dismissing all of it based on how you

00:09:30,680 --> 00:09:39,230
read the first few lines the next one

00:09:34,310 --> 00:09:40,910
was 4534 and that was a place of not

00:09:39,230 --> 00:09:42,500
spotting or not thinking about the

00:09:40,910 --> 00:09:45,560
security implications we had a bug

00:09:42,500 --> 00:09:47,660
report it was an infinite loop in a

00:09:45,560 --> 00:09:49,550
particular use case if a client was

00:09:47,660 --> 00:09:51,470
connecting over SSL and sending some

00:09:49,550 --> 00:09:53,990
data and they disconnected before they

00:09:51,470 --> 00:09:56,390
finish sending the data then the CPU

00:09:53,990 --> 00:09:58,700
entered in infinite loop you only needed

00:09:56,390 --> 00:10:00,890
one client for every CPU call you had to

00:09:58,700 --> 00:10:03,709
do that and you had absolutely no cpu

00:10:00,890 --> 00:10:06,950
left and that's obviously a denial of

00:10:03,709 --> 00:10:09,170
service and we didn't spot it or we

00:10:06,950 --> 00:10:11,980
didn't we do we either didn't think

00:10:09,170 --> 00:10:14,750
denial of service or we just thought oh

00:10:11,980 --> 00:10:16,160
too much hassle to create get a CV for

00:10:14,750 --> 00:10:17,870
this we'll just fix it it's a public bug

00:10:16,160 --> 00:10:19,400
anyway it's fine it's in the changelog

00:10:17,870 --> 00:10:21,500
and what we really should have done is

00:10:19,400 --> 00:10:23,300
got a CV at that point I can't honestly

00:10:21,500 --> 00:10:26,330
remember whether we just didn't think or

00:10:23,300 --> 00:10:28,220
we actively chose not to but that should

00:10:26,330 --> 00:10:30,079
have had a CVE and then a few months

00:10:28,220 --> 00:10:32,570
later our good friends at Red Hat came

00:10:30,079 --> 00:10:34,220
along and said excuse me this bug report

00:10:32,570 --> 00:10:36,709
here and that looks like a denial of

00:10:34,220 --> 00:10:39,050
service so shouldn't it have a CVM we

00:10:36,709 --> 00:10:42,020
had to get yeah you're right sorry about

00:10:39,050 --> 00:10:45,320
that mark we have a cv reference please

00:10:42,020 --> 00:10:47,930
so we then did that and sent out the

00:10:45,320 --> 00:10:50,110
announcements and updated the security

00:10:47,930 --> 00:10:50,110
pages

00:10:53,000 --> 00:10:59,160
something else that can wasn't really

00:10:55,950 --> 00:11:03,930
our fault this is going back a few years

00:10:59,160 --> 00:11:06,930
now 2938 in 2008 you can get

00:11:03,930 --> 00:11:08,670
coordination headaches particularly when

00:11:06,930 --> 00:11:11,760
the vulnerability is in something as

00:11:08,670 --> 00:11:13,110
widespread as the jvm and all of a

00:11:11,760 --> 00:11:15,870
sudden you've gone from what started

00:11:13,110 --> 00:11:17,880
officer yet tom cat doesn't handle utf-8

00:11:15,870 --> 00:11:19,890
properly or it doesn't handle invalid

00:11:17,880 --> 00:11:21,960
utf-8 properly and that can lead to

00:11:19,890 --> 00:11:23,280
directory traversal and what should have

00:11:21,960 --> 00:11:24,810
happened is the utf-8 should have just

00:11:23,280 --> 00:11:27,840
been rejected in the whole whole thing

00:11:24,810 --> 00:11:29,160
should just had a 400 response and the

00:11:27,840 --> 00:11:32,660
opie thought they'd found a tomcat

00:11:29,160 --> 00:11:35,490
problem and we looked it and thought ah

00:11:32,660 --> 00:11:38,100
that's not a tomcat problem that's a JVM

00:11:35,490 --> 00:11:42,300
problem we're using the JVM decoder and

00:11:38,100 --> 00:11:44,430
it's not handling this properly that

00:11:42,300 --> 00:11:47,190
means lots of other web containers have

00:11:44,430 --> 00:11:49,470
probably got the same problem it poss

00:11:47,190 --> 00:11:51,000
given that all of the JVM vendors start

00:11:49,470 --> 00:11:52,950
off at least start with their code

00:11:51,000 --> 00:11:54,690
starts with Oracle you know they'll

00:11:52,950 --> 00:11:56,010
tweak it themselves and do some platform

00:11:54,690 --> 00:11:58,500
specific stuff a fundamentally it all

00:11:56,010 --> 00:12:01,620
starts with Oracle chances are all the

00:11:58,500 --> 00:12:05,220
JVM vendors are involved as well this is

00:12:01,620 --> 00:12:07,830
going to be fun and it was it didn't

00:12:05,220 --> 00:12:10,200
help that Sun didn't accept that it was

00:12:07,830 --> 00:12:12,090
a security vulnerability and that

00:12:10,200 --> 00:12:14,760
arguably they're up they're probably

00:12:12,090 --> 00:12:17,040
right it was just a bug but it meant

00:12:14,760 --> 00:12:20,940
they didn't move particularly quickly to

00:12:17,040 --> 00:12:23,790
fix it an information started to leak

00:12:20,940 --> 00:12:25,890
out and lots of vendors were rapidly

00:12:23,790 --> 00:12:28,950
patching their application service to

00:12:25,890 --> 00:12:30,570
work around the problem and meanwhile we

00:12:28,950 --> 00:12:33,420
published this vulnerability yet it's a

00:12:30,570 --> 00:12:35,250
tomcat vulnerability yeah we didn't

00:12:33,420 --> 00:12:37,500
handle this properly blah blah blah and

00:12:35,250 --> 00:12:39,540
then once the JD games were fixed then

00:12:37,500 --> 00:12:41,700
that's when we actually updated the

00:12:39,540 --> 00:12:44,460
update Internet's not really a tomcat

00:12:41,700 --> 00:12:47,040
problem it was a JVM bug and provided

00:12:44,460 --> 00:12:48,810
some more details and bill actually did

00:12:47,040 --> 00:12:50,550
a lot of the coordination amongst the

00:12:48,810 --> 00:12:54,400
the JVM vendors for that and it wasn't

00:12:50,550 --> 00:12:57,160
fun was it not

00:12:54,400 --> 00:12:59,950
and this is what we'll talk about this a

00:12:57,160 --> 00:13:01,780
little later but one thing server

00:12:59,950 --> 00:13:04,540
designs to be permissive in what you

00:13:01,780 --> 00:13:07,330
accept and search when we send and this

00:13:04,540 --> 00:13:10,660
is one more example where that bike

00:13:07,330 --> 00:13:12,700
cheap yeah yeah and there was actually a

00:13:10,660 --> 00:13:16,300
second problem with this one which was

00:13:12,700 --> 00:13:18,040
entirely my fault I've got a draft

00:13:16,300 --> 00:13:20,080
vulnerability or prepare and it's all

00:13:18,040 --> 00:13:22,320
prepared and I sent it to the users list

00:13:20,080 --> 00:13:26,890
for review rather than the security list

00:13:22,320 --> 00:13:29,320
oops so it was published a little bit

00:13:26,890 --> 00:13:30,880
sooner than I was intending but

00:13:29,320 --> 00:13:33,400
fortunately nobody objected to the draft

00:13:30,880 --> 00:13:41,410
so we just resent it properly but that

00:13:33,400 --> 00:13:43,300
that is awfully easy to do sorry no well

00:13:41,410 --> 00:13:45,220
that it was all fixed it was all just

00:13:43,300 --> 00:13:48,570
everything was ready to go it was just

00:13:45,220 --> 00:13:50,920
effectively premature announcement and

00:13:48,570 --> 00:13:52,810
the thing that you particularly need to

00:13:50,920 --> 00:13:56,950
watch out for is email clients that

00:13:52,810 --> 00:13:59,340
handily autocomplete addresses or show

00:13:56,950 --> 00:14:02,350
real names rather than email addresses

00:13:59,340 --> 00:14:05,800
you have to be incredibly careful where

00:14:02,350 --> 00:14:10,000
you're sending this stuff too okay yet

00:14:05,800 --> 00:14:13,000
the ugly this this was probably the

00:14:10,000 --> 00:14:14,770
worst security vulnerability we've ever

00:14:13,000 --> 00:14:17,350
had a deal with with tomcat in terms of

00:14:14,770 --> 00:14:19,810
just how the handling process went I

00:14:17,350 --> 00:14:21,040
will I'm still sufficiently annoyed

00:14:19,810 --> 00:14:22,600
about what went wrong that there was

00:14:21,040 --> 00:14:25,060
steam coming out of my ears when i was

00:14:22,600 --> 00:14:26,320
typing these slides I'll try and hold it

00:14:25,060 --> 00:14:28,780
together for the presentation but

00:14:26,320 --> 00:14:31,900
forgive me if I lose it a bit it was

00:14:28,780 --> 00:14:36,820
just a complete mess by the end of it so

00:14:31,900 --> 00:14:40,450
how did it all happen this is CV 00 22

00:14:36,820 --> 00:14:46,420
from 2012 and it started with a hash

00:14:40,450 --> 00:14:48,910
collision problem in Java and if you put

00:14:46,420 --> 00:14:50,770
a whole pile of valleys into a Java hash

00:14:48,910 --> 00:14:52,980
table that all had the same hash then

00:14:50,770 --> 00:14:57,400
the performance just fell off a cliff

00:14:52,980 --> 00:14:59,770
and it was affected Tomcat because we

00:14:57,400 --> 00:15:02,350
passed HTTP parameters and we put them

00:14:59,770 --> 00:15:04,870
into a hash so both the names and the

00:15:02,350 --> 00:15:06,730
values are user controlled so the user

00:15:04,870 --> 00:15:08,980
could construct

00:15:06,730 --> 00:15:11,860
collisions very easily which then caused

00:15:08,980 --> 00:15:13,209
a performance problem for tomcat again

00:15:11,860 --> 00:15:16,149
Oracle didn't treat this one as a

00:15:13,209 --> 00:15:17,410
vulnerability I'm still sort of on the

00:15:16,149 --> 00:15:19,720
fence as to whether they should or

00:15:17,410 --> 00:15:21,910
whether they shouldn't that probably

00:15:19,720 --> 00:15:25,269
they were right in not because it was

00:15:21,910 --> 00:15:28,839
really Tomcats fault for not using the

00:15:25,269 --> 00:15:30,970
hash table safely or correctly although

00:15:28,839 --> 00:15:33,040
arguably other other vendors that

00:15:30,970 --> 00:15:34,959
provide sort of JVM equivalents have

00:15:33,040 --> 00:15:37,889
fixed the equivalent hash table

00:15:34,959 --> 00:15:40,449
implementations in their products but

00:15:37,889 --> 00:15:42,660
yeah it's it's one of those borderline

00:15:40,449 --> 00:15:45,880
cases that really could go either way

00:15:42,660 --> 00:15:47,709
throughout this I have changed the names

00:15:45,880 --> 00:15:49,990
of the guilty parties in order to

00:15:47,709 --> 00:15:51,940
protect their identities it's actually

00:15:49,990 --> 00:15:53,500
not that hard to pierce the protection

00:15:51,940 --> 00:15:56,980
if you really want to i'll leave it up

00:15:53,500 --> 00:16:00,519
to you if you want to do that and what i

00:15:56,980 --> 00:16:02,350
will say is that as a project tomcat has

00:16:00,519 --> 00:16:05,110
dealt with security vulnerabilities from

00:16:02,350 --> 00:16:07,120
a wide range of reporters some directly

00:16:05,110 --> 00:16:09,040
some through one of the various

00:16:07,120 --> 00:16:11,350
coordination agencies there are around

00:16:09,040 --> 00:16:14,290
the world and the vast majority of those

00:16:11,350 --> 00:16:16,630
have been professional helpful

00:16:14,290 --> 00:16:19,870
knowledgeable and absolutely no hassle

00:16:16,630 --> 00:16:22,060
at all in these slides I'm going to use

00:16:19,870 --> 00:16:23,319
org X to refer to the organization

00:16:22,060 --> 00:16:25,480
actually passed this particular

00:16:23,319 --> 00:16:27,639
vulnerability to us and in terms of time

00:16:25,480 --> 00:16:33,399
scales we're looking at autumn 2012 so

00:16:27,639 --> 00:16:35,500
in 2011 too early 2012 so it starts off

00:16:33,399 --> 00:16:37,420
with a couple of reports to the Apache

00:16:35,500 --> 00:16:38,829
wide security list the first one says

00:16:37,420 --> 00:16:41,380
yep there's a problem with hash

00:16:38,829 --> 00:16:43,149
collisions in Apache Geronimo and the

00:16:41,380 --> 00:16:45,220
second one says there's problems with

00:16:43,149 --> 00:16:46,630
hash collisions in an unnamed asf

00:16:45,220 --> 00:16:49,420
project it just says your project

00:16:46,630 --> 00:16:51,069
doesn't tell us which one it is so the

00:16:49,420 --> 00:16:52,810
first thing the asf security chilean do

00:16:51,069 --> 00:16:55,690
say yeah we've got about 100 of these

00:16:52,810 --> 00:16:56,920
things which project were you referred

00:16:55,690 --> 00:16:59,019
to suspecting they were going to say

00:16:56,920 --> 00:17:01,029
tomcat because if it affects Geronimo

00:16:59,019 --> 00:17:03,670
and it's to do with HTTP well that's

00:17:01,029 --> 00:17:06,819
that's going to be tomcat and they did

00:17:03,670 --> 00:17:08,679
indeed identify Tomcat as the project

00:17:06,819 --> 00:17:12,870
with the potential problem and they

00:17:08,679 --> 00:17:17,049
passed on a metasploit proof of concept

00:17:12,870 --> 00:17:19,949
which the op's had written it this is

00:17:17,049 --> 00:17:19,949
just sort of one of mine

00:17:20,370 --> 00:17:26,439
so pet hates really the chances of a

00:17:24,309 --> 00:17:30,669
project using exactly the same tool

00:17:26,439 --> 00:17:33,880
chain as you are slim to none if you

00:17:30,669 --> 00:17:35,260
have if you want to provide a taking Tom

00:17:33,880 --> 00:17:38,019
classic or any other servlet container

00:17:35,260 --> 00:17:39,700
if you want to provide something as ace

00:17:38,019 --> 00:17:41,500
of a working example that they can work

00:17:39,700 --> 00:17:42,940
with for a certain content of the most

00:17:41,500 --> 00:17:45,039
useful thing you can do is provide a war

00:17:42,940 --> 00:17:48,730
file because that is guaranteed by the

00:17:45,039 --> 00:17:50,440
specification to actually run as it

00:17:48,730 --> 00:17:52,360
happened i didn't have metasploit setup

00:17:50,440 --> 00:17:55,600
I didn't even haven't downloaded never

00:17:52,360 --> 00:17:57,789
used it before so it took time to to get

00:17:55,600 --> 00:17:59,740
that up and running and the same with

00:17:57,789 --> 00:18:01,029
bug reports you know somebody sends me a

00:17:59,740 --> 00:18:02,470
maven project where first thing actually

00:18:01,029 --> 00:18:05,409
after do is install maven because I

00:18:02,470 --> 00:18:07,750
don't use it so those sorts of things

00:18:05,409 --> 00:18:10,299
can slow things down if there is an

00:18:07,750 --> 00:18:11,830
obvious common standard way to provide a

00:18:10,299 --> 00:18:13,480
proof of concept to a project you want

00:18:11,830 --> 00:18:15,820
to report something to use that standard

00:18:13,480 --> 00:18:17,470
way it'll help everyone anyway

00:18:15,820 --> 00:18:21,789
metasploit wasn't that difficult to get

00:18:17,470 --> 00:18:22,929
up and running but it did just take a

00:18:21,789 --> 00:18:25,240
little bit of time the other thing they

00:18:22,929 --> 00:18:26,470
told us was that the embargo date for

00:18:25,240 --> 00:18:28,870
this particular vulnerability was going

00:18:26,470 --> 00:18:32,830
to be the 27th of December which struck

00:18:28,870 --> 00:18:35,740
me as a monumentally bad choice it's the

00:18:32,830 --> 00:18:37,630
middle of the holiday period the chances

00:18:35,740 --> 00:18:39,130
of IT departments actually being fully

00:18:37,630 --> 00:18:42,940
staffed or you know anything above

00:18:39,130 --> 00:18:44,649
barely staffed is slim to none he's

00:18:42,940 --> 00:18:46,299
really the last time you want to

00:18:44,649 --> 00:18:49,269
announce something that looks like a

00:18:46,299 --> 00:18:51,940
very easy to exploit remote denial of

00:18:49,269 --> 00:18:53,799
service but they were presenting at a

00:18:51,940 --> 00:18:55,210
conference so they couldn't bring it

00:18:53,799 --> 00:18:57,190
forward and they wouldn't push it any

00:18:55,210 --> 00:19:00,429
further back so there was nothing we

00:18:57,190 --> 00:19:02,409
could do about that just had an live

00:19:00,429 --> 00:19:04,929
with it that would that was a minor

00:19:02,409 --> 00:19:07,419
annoyance anyway so we took this proof

00:19:04,929 --> 00:19:09,580
of concept they sent us and we started

00:19:07,419 --> 00:19:11,980
running it and what we found Tomcats

00:19:09,580 --> 00:19:14,950
parameter passing was horribly horribly

00:19:11,980 --> 00:19:18,659
inefficient it would do things like

00:19:14,950 --> 00:19:21,429
store all the parameters in an array

00:19:18,659 --> 00:19:23,590
okay but it would start off with array

00:19:21,429 --> 00:19:25,179
of size one and then if it got another

00:19:23,590 --> 00:19:27,010
parameter it would create a tray of size

00:19:25,179 --> 00:19:28,779
to copy the previous array into it and

00:19:27,010 --> 00:19:29,889
add new one and then when the next one

00:19:28,779 --> 00:19:31,570
came in it would create an array of size

00:19:29,889 --> 00:19:34,010
three copy the previous parameters into

00:19:31,570 --> 00:19:36,020
it and add so that was fine when you had

00:19:34,010 --> 00:19:38,330
sort of tens of parameters not so good

00:19:36,020 --> 00:19:39,950
with thousands or tens of thousands or

00:19:38,330 --> 00:19:41,570
hundreds of thousands and there were

00:19:39,950 --> 00:19:43,160
lots and lots of issues like that I

00:19:41,570 --> 00:19:47,480
think about five or six problems all

00:19:43,160 --> 00:19:48,920
told so we fixed all of those and none

00:19:47,480 --> 00:19:51,020
of them were related to hash collision

00:19:48,920 --> 00:19:54,020
there was not a hash collision in sight

00:19:51,020 --> 00:19:55,940
at this point and so with all of those

00:19:54,020 --> 00:19:58,520
fix we then ran the proof of concept and

00:19:55,940 --> 00:20:00,230
tom cat went yeah and it was fine there

00:19:58,520 --> 00:20:03,740
was no denial of service there was no

00:20:00,230 --> 00:20:05,480
excessive CPU it was completely in line

00:20:03,740 --> 00:20:11,750
with what you'd expect for dealing with

00:20:05,480 --> 00:20:13,370
a request of that size so okay so we've

00:20:11,750 --> 00:20:14,840
got the fix for these unrelated denial

00:20:13,370 --> 00:20:17,240
of service issues and at the same time

00:20:14,840 --> 00:20:19,490
if it well there might be something to

00:20:17,240 --> 00:20:21,800
this hash collision thing so the prudent

00:20:19,490 --> 00:20:23,810
thing to do will be to limit the number

00:20:21,800 --> 00:20:26,360
of parameters will actually let a user

00:20:23,810 --> 00:20:28,280
send and because we could know see how

00:20:26,360 --> 00:20:29,570
Tomcat responded to large numbers of

00:20:28,280 --> 00:20:32,090
parameters we will actually if we set

00:20:29,570 --> 00:20:33,770
the limit at 10,000 that's way more than

00:20:32,090 --> 00:20:36,130
anybody is ever going to want to send

00:20:33,770 --> 00:20:38,930
but it's way below the point where even

00:20:36,130 --> 00:20:40,370
without all of these silly errors fixed

00:20:38,930 --> 00:20:42,290
in Tom Tom Cote would actually quite

00:20:40,370 --> 00:20:44,270
happily handle 10,000 parameters even

00:20:42,290 --> 00:20:45,920
with all of these performance issues not

00:20:44,270 --> 00:20:49,700
fixed so that seems like a reasonable

00:20:45,920 --> 00:20:52,370
put that limit in as well so now we have

00:20:49,700 --> 00:20:53,600
to go oh sorry we got a CVA for all of

00:20:52,370 --> 00:20:55,220
the denial of service issues because

00:20:53,600 --> 00:20:57,830
they were denial of service problems in

00:20:55,220 --> 00:21:00,020
the parameter parsing problems no we had

00:20:57,830 --> 00:21:01,460
to go back to all decks and say yeah

00:21:00,020 --> 00:21:03,890
that proof of concept you sent us

00:21:01,460 --> 00:21:05,750
doesn't work but we couldn't just say

00:21:03,890 --> 00:21:07,250
that because clearly it did but it

00:21:05,750 --> 00:21:09,110
worked because of a completely different

00:21:07,250 --> 00:21:10,670
problem so we had to explain to them

00:21:09,110 --> 00:21:12,530
that now we've identified a number of

00:21:10,670 --> 00:21:16,070
denial of services using the parameter

00:21:12,530 --> 00:21:18,800
parsing we've allocated CVE 40 84 to

00:21:16,070 --> 00:21:20,420
those issues but with those fixed we

00:21:18,800 --> 00:21:24,920
cannot reproduce the hash collision

00:21:20,420 --> 00:21:26,990
problem so we left it as that and we

00:21:24,920 --> 00:21:30,080
started committing the patches for 4084

00:21:26,990 --> 00:21:32,600
I guess the next thing that happened

00:21:30,080 --> 00:21:34,040
prop might perhaps should have been sort

00:21:32,600 --> 00:21:38,180
the first warning that things weren't

00:21:34,040 --> 00:21:40,070
going to go quite to plan when we got an

00:21:38,180 --> 00:21:43,100
email back from all decks indicated they

00:21:40,070 --> 00:21:44,690
really hadn't understood that no the

00:21:43,100 --> 00:21:45,860
hash collisions didn't work there's a

00:21:44,690 --> 00:21:47,210
complete there were a completely

00:21:45,860 --> 00:21:49,669
separate set of issues

00:21:47,210 --> 00:21:51,169
we had to fix so we have send another

00:21:49,669 --> 00:21:53,390
clarifying issue trying to get the

00:21:51,169 --> 00:21:55,159
message across right hash collision not

00:21:53,390 --> 00:21:56,659
a problem parameter passing

00:21:55,159 --> 00:22:00,559
denial-of-service whole bunch of

00:21:56,659 --> 00:22:03,890
problems 4084 we fixed we are in the

00:22:00,559 --> 00:22:06,710
process of fixing them all so that day I

00:22:03,890 --> 00:22:08,659
make one of my far too frequent errors

00:22:06,710 --> 00:22:10,820
and I actually accidentally commit all

00:22:08,659 --> 00:22:12,049
of the performance tests in the unit

00:22:10,820 --> 00:22:14,419
tests I've been using to prove that

00:22:12,049 --> 00:22:17,539
these denial of service issues exist to

00:22:14,419 --> 00:22:23,090
the unit tests nobody really notices we

00:22:17,539 --> 00:22:25,460
get away with it so the next day all gex

00:22:23,090 --> 00:22:27,830
asks permission to pass on the patches

00:22:25,460 --> 00:22:30,080
that we've we've told them about for

00:22:27,830 --> 00:22:32,779
these unrelated issues to some

00:22:30,080 --> 00:22:35,450
unspecified vendor list we don't

00:22:32,779 --> 00:22:37,270
actually reply my permanent what my

00:22:35,450 --> 00:22:40,580
personal feeling was absolutely no way

00:22:37,270 --> 00:22:42,260
but I didn't want to sort of if somebody

00:22:40,580 --> 00:22:43,669
else on the PMC felt strongly enough to

00:22:42,260 --> 00:22:45,559
say yes we think they should be

00:22:43,669 --> 00:22:47,059
distributed I wasn't going to stand in

00:22:45,559 --> 00:22:48,679
the way of that but we actually never

00:22:47,059 --> 00:22:50,539
did get around to replying to that

00:22:48,679 --> 00:22:53,120
question one way or the other so to my

00:22:50,539 --> 00:22:54,890
point of view that that was affecting it

00:22:53,120 --> 00:22:56,809
wasn't know if we didn't if we don't say

00:22:54,890 --> 00:22:58,429
yes then you definitely don't distribute

00:22:56,809 --> 00:23:00,860
information as you've been passed you in

00:22:58,429 --> 00:23:04,760
confidence but we actually didn't

00:23:00,860 --> 00:23:06,950
respond to that question meanwhile we

00:23:04,760 --> 00:23:08,539
spot a couple of other fixes that are

00:23:06,950 --> 00:23:09,649
required for the parameter count limit

00:23:08,539 --> 00:23:11,450
to make sure it applies in all

00:23:09,649 --> 00:23:15,440
circumstances we catch a few more edge

00:23:11,450 --> 00:23:17,779
cases we do a bit more analysis and come

00:23:15,440 --> 00:23:21,710
early November we've got all of the

00:23:17,779 --> 00:23:24,770
fixes in place in tomcat 70 X trunk to

00:23:21,710 --> 00:23:28,100
fix the denial of service problems that

00:23:24,770 --> 00:23:30,470
we found a little bit late which we

00:23:28,100 --> 00:23:32,929
start working on tomcat six again we're

00:23:30,470 --> 00:23:35,179
trying to do all of this relatively

00:23:32,929 --> 00:23:37,100
under the radar we haven't said anything

00:23:35,179 --> 00:23:40,029
publicly about this I think it was just

00:23:37,100 --> 00:23:42,590
build as improving parameter parsing or

00:23:40,029 --> 00:23:45,950
refactoring or something equally an

00:23:42,590 --> 00:23:47,510
oculus on the sixteenth of December we

00:23:45,950 --> 00:23:50,270
get copied in on an email where all

00:23:47,510 --> 00:23:52,700
guess X has requested a CV for the hash

00:23:50,270 --> 00:23:55,039
collision issue in tomcat to which we

00:23:52,700 --> 00:23:56,630
respond fairly probably excuse me we

00:23:55,039 --> 00:23:59,240
told you we couldn't reproduce that

00:23:56,630 --> 00:24:00,500
that's not valid why are you requesting

00:23:59,240 --> 00:24:03,170
a CVA

00:24:00,500 --> 00:24:04,850
and again alarm bells maybe should have

00:24:03,170 --> 00:24:06,230
rung a little bit more lady that do they

00:24:04,850 --> 00:24:12,170
perhaps really understand what we've

00:24:06,230 --> 00:24:13,520
been telling them so all gex finally

00:24:12,170 --> 00:24:17,390
puts this in direct contact with the

00:24:13,520 --> 00:24:21,350
original reporter the original reporter

00:24:17,390 --> 00:24:22,760
says they've done some testing with our

00:24:21,350 --> 00:24:24,800
latest code and they've got some

00:24:22,760 --> 00:24:26,540
problems with max perimeter count where

00:24:24,800 --> 00:24:27,770
it's not applying and they're having all

00:24:26,540 --> 00:24:31,220
sorts of problem we just can't reproduce

00:24:27,770 --> 00:24:33,410
it so at this point my confidence in the

00:24:31,220 --> 00:24:36,140
quality of this report is a little bit

00:24:33,410 --> 00:24:37,430
undermined really not sure what's going

00:24:36,140 --> 00:24:39,050
on there and to this day I don't

00:24:37,430 --> 00:24:40,480
understand why they had the problems

00:24:39,050 --> 00:24:43,940
that they said they were having I

00:24:40,480 --> 00:24:45,560
suspect they hadn't actually they

00:24:43,940 --> 00:24:46,790
weren't using the latest code that they

00:24:45,560 --> 00:24:49,160
thought they were using they're using an

00:24:46,790 --> 00:24:52,670
old svn tag or something but still not

00:24:49,160 --> 00:24:54,350
entirely sure anyway after a little bit

00:24:52,670 --> 00:24:56,210
of discussion between us and them say

00:24:54,350 --> 00:24:58,700
well your motor spoink proof-of-concept

00:24:56,210 --> 00:25:02,060
didn't work listen that's strange anyway

00:24:58,700 --> 00:25:03,380
here's an updated one we run it and it

00:25:02,060 --> 00:25:06,350
did actually demonstrate the hash

00:25:03,380 --> 00:25:07,550
collision issue in tomcat and so tom cat

00:25:06,350 --> 00:25:11,420
was vulnerable to this particular

00:25:07,550 --> 00:25:13,270
problem so we get back to the opie and

00:25:11,420 --> 00:25:15,410
say thank you very much that's great we

00:25:13,270 --> 00:25:19,430
reproduce it see we're coming from now

00:25:15,410 --> 00:25:22,220
no problem we'll handle this through all

00:25:19,430 --> 00:25:23,510
the X as you've requested so we tell all

00:25:22,220 --> 00:25:25,640
the X that we can now reproduce the

00:25:23,510 --> 00:25:26,990
problem and we also tell them that the

00:25:25,640 --> 00:25:28,550
max parameter count that we've already

00:25:26,990 --> 00:25:31,670
introduced sort of as a safety measure

00:25:28,550 --> 00:25:34,250
does actually address the issue so as

00:25:31,670 --> 00:25:35,240
far as Tomcats concerned yeah we

00:25:34,250 --> 00:25:36,770
confirmed that is actually a

00:25:35,240 --> 00:25:40,660
vulnerability but we'd already put a

00:25:36,770 --> 00:25:40,660
mitigation in place so we're good to go

00:25:40,870 --> 00:25:46,700
again we get a clarification email from

00:25:44,300 --> 00:25:49,220
all the X asking which CVA we went to be

00:25:46,700 --> 00:25:54,680
using for which issue so we try to make

00:25:49,220 --> 00:25:57,260
clear again that 4084 is for the Tomcat

00:25:54,680 --> 00:26:00,020
parameter parsing problems and whichever

00:25:57,260 --> 00:26:02,840
CVE they'd like to issue us with is for

00:26:00,020 --> 00:26:05,510
the hash collision problems and then on

00:26:02,840 --> 00:26:07,010
the twenty-eighth the opie having done

00:26:05,510 --> 00:26:09,710
that security conference actually

00:26:07,010 --> 00:26:12,410
announces the issue and we think that's

00:26:09,710 --> 00:26:17,270
pretty much all you know we wait until

00:26:12,410 --> 00:26:18,410
I sooner we announce our work around max

00:26:17,270 --> 00:26:19,970
perimeter count at the same time

00:26:18,410 --> 00:26:21,110
effective in response to the

00:26:19,970 --> 00:26:22,850
announcement to the hash collision

00:26:21,110 --> 00:26:24,770
problem and now we're okay everything's

00:26:22,850 --> 00:26:26,810
all done and dusted we just need to wait

00:26:24,770 --> 00:26:29,270
we've got a tomcat 6 release then we can

00:26:26,810 --> 00:26:31,040
announce 4084 and tell the world about

00:26:29,270 --> 00:26:33,950
all of the other non-cash collision

00:26:31,040 --> 00:26:37,970
problems that we found and then on the

00:26:33,950 --> 00:26:39,680
third of January we discover I forget

00:26:37,970 --> 00:26:42,710
how I think by just looking something up

00:26:39,680 --> 00:26:46,220
on mitre or no tell like a question came

00:26:42,710 --> 00:26:48,230
in from Red Hat about what's 4084 all

00:26:46,220 --> 00:26:50,780
about which are resources how on earth

00:26:48,230 --> 00:26:52,760
do you know about that and I'm wondering

00:26:50,780 --> 00:26:54,560
well I know mark Cox who leads the

00:26:52,760 --> 00:26:56,780
security team works for Red Hat but he's

00:26:54,560 --> 00:26:58,580
pretty good and I don't think he would

00:26:56,780 --> 00:27:00,890
have told his team about this issue but

00:26:58,580 --> 00:27:03,350
maybe he didn't if he did them a little

00:27:00,890 --> 00:27:05,000
bit annoyed but wonder what's going on

00:27:03,350 --> 00:27:07,520
here and then we do a bit more digging

00:27:05,000 --> 00:27:10,670
and we look immitis website and we find

00:27:07,520 --> 00:27:13,490
out that under CV 4084 what it should

00:27:10,670 --> 00:27:15,290
say is this CV has been reserved what it

00:27:13,490 --> 00:27:17,330
actually says is a full description of

00:27:15,290 --> 00:27:18,950
all of the parameter parsing problems

00:27:17,330 --> 00:27:21,020
and tomcat that we haven't announced yet

00:27:18,950 --> 00:27:22,280
along with a statement on the bottom

00:27:21,020 --> 00:27:24,590
that oh and hash collisions were a

00:27:22,280 --> 00:27:26,210
problem as well so we're thinking what

00:27:24,590 --> 00:27:29,710
on earth is going on here it's like the

00:27:26,210 --> 00:27:29,710
two issues of somehow been merged

00:27:29,950 --> 00:27:34,310
clearly somebody has leaked something

00:27:32,450 --> 00:27:35,480
I'm information that shouldn't be in the

00:27:34,310 --> 00:27:37,370
public domain is in the public domain

00:27:35,480 --> 00:27:39,830
and frankly I want to know how it got

00:27:37,370 --> 00:27:41,870
there so I send an email out to

00:27:39,830 --> 00:27:44,900
everybody we've ever communicated with

00:27:41,870 --> 00:27:49,550
which is basically tomcat security team

00:27:44,900 --> 00:27:51,500
the Apache security team the folks at

00:27:49,550 --> 00:27:53,510
Red Hat that reported us this to us in

00:27:51,500 --> 00:27:56,810
the first place the original reporters

00:27:53,510 --> 00:28:00,560
and all X saying information about this

00:27:56,810 --> 00:28:02,120
is leaked the asf is not happy with the

00:28:00,560 --> 00:28:05,840
person who did this please own up and

00:28:02,120 --> 00:28:08,540
explain what was going on at the same

00:28:05,840 --> 00:28:11,060
time because there's no this confused

00:28:08,540 --> 00:28:13,730
mix-up between the parameter parsing

00:28:11,060 --> 00:28:15,680
issues and the hash collision issues we

00:28:13,730 --> 00:28:17,450
take the decision actually 4084 we're

00:28:15,680 --> 00:28:18,950
just going to abandon it and we're going

00:28:17,450 --> 00:28:20,900
to get a noose we've got we've already

00:28:18,950 --> 00:28:22,280
got the CVE that all gex gave us the

00:28:20,900 --> 00:28:23,730
hash collision we're going to get

00:28:22,280 --> 00:28:25,350
another one from up for

00:28:23,730 --> 00:28:26,910
parameter passing issues and we will

00:28:25,350 --> 00:28:32,000
keep the two separate so at that point

00:28:26,910 --> 00:28:34,830
we get the new cve which is 2012 00 22

00:28:32,000 --> 00:28:36,120
in response to that email i sent

00:28:34,830 --> 00:28:40,410
accurately saying what on earth is going

00:28:36,120 --> 00:28:43,050
on i got a private email back from mark

00:28:40,410 --> 00:28:45,720
cox the red hat security guy also lead

00:28:43,050 --> 00:28:47,490
to our team saying um yeah all get sent

00:28:45,720 --> 00:28:49,230
out information to one of the vendor

00:28:47,490 --> 00:28:52,470
security lists about this a few weeks

00:28:49,230 --> 00:28:56,250
ago here's a copy of the email which I

00:28:52,470 --> 00:28:59,340
wasn't they did what color me very

00:28:56,250 --> 00:29:02,190
unimpressed but I've got a copy of the

00:28:59,340 --> 00:29:05,970
email so I know I'm pretty sure I know

00:29:02,190 --> 00:29:08,580
what happened or is where the

00:29:05,970 --> 00:29:11,280
information came from at the same time

00:29:08,580 --> 00:29:12,600
we discover that when org X did their

00:29:11,280 --> 00:29:15,690
announcement of the hash collision

00:29:12,600 --> 00:29:18,030
vulnerability they used the wrong CVE

00:29:15,690 --> 00:29:20,430
rather using the CV that they'd

00:29:18,030 --> 00:29:22,230
requested for hash collisions they used

00:29:20,430 --> 00:29:25,290
the cve that we'd requested for the

00:29:22,230 --> 00:29:27,510
parameter parsing so they put out two

00:29:25,290 --> 00:29:30,660
separate notices one that said Oh tom

00:29:27,510 --> 00:29:31,890
cat has got this CVE 4084 which is a

00:29:30,660 --> 00:29:33,690
bunch of issues with parameter parsing

00:29:31,890 --> 00:29:35,790
and then a little bit later they sent

00:29:33,690 --> 00:29:37,140
out another message that says Tomcats

00:29:35,790 --> 00:29:43,410
called a hash collision vulnerability

00:29:37,140 --> 00:29:45,590
reference 4084 so what happened was the

00:29:43,410 --> 00:29:48,720
mitre who received both of those emails

00:29:45,590 --> 00:29:50,340
match them up match the CVE references

00:29:48,720 --> 00:29:51,660
did exactly what you'd expect them to do

00:29:50,340 --> 00:29:53,100
given that they're meant to refer to the

00:29:51,660 --> 00:29:54,990
same things oh right okay this

00:29:53,100 --> 00:29:57,060
information is now been public this

00:29:54,990 --> 00:29:58,590
stuff we got privately before we can now

00:29:57,060 --> 00:30:00,360
make public and they basically merged

00:29:58,590 --> 00:30:02,220
murthy information and published it on

00:30:00,360 --> 00:30:05,310
their website and I don't blame mitre

00:30:02,220 --> 00:30:06,960
for doing that at all they acted based

00:30:05,310 --> 00:30:12,510
on the information they've been they'd

00:30:06,960 --> 00:30:15,330
received yeah it was a it was an error

00:30:12,510 --> 00:30:16,560
but it wasn't of their making they were

00:30:15,330 --> 00:30:18,720
told they were given information about

00:30:16,560 --> 00:30:20,790
4084 and then they were told that 4084

00:30:18,720 --> 00:30:24,750
was public so they published it that's

00:30:20,790 --> 00:30:27,120
fair enough also that day I got an email

00:30:24,750 --> 00:30:28,620
from org X quite strenuously denying

00:30:27,120 --> 00:30:30,270
that they've been the source of the leak

00:30:28,620 --> 00:30:31,830
almost as if I'd accused them of it

00:30:30,270 --> 00:30:34,410
which will no Todd actually sent the

00:30:31,830 --> 00:30:37,080
email actor everybody involved and it

00:30:34,410 --> 00:30:39,009
was only all gex I got the denial for

00:30:37,080 --> 00:30:42,940
they also said they didn't think they

00:30:39,009 --> 00:30:46,419
needed to apologize for anything so

00:30:42,940 --> 00:30:48,460
after retyping the same email about five

00:30:46,419 --> 00:30:50,889
or six times before I was able to tone

00:30:48,460 --> 00:30:53,860
it down to a level where is appropriate

00:30:50,889 --> 00:30:55,539
to send I sent them an email suggesting

00:30:53,860 --> 00:30:56,980
that they might want to check again

00:30:55,539 --> 00:30:59,409
because I've got a copy of the email

00:30:56,980 --> 00:31:04,419
that they deny sending perhaps they want

00:30:59,409 --> 00:31:06,580
to look in there out boxes so they

00:31:04,419 --> 00:31:08,110
respond to that so oh no no no no we

00:31:06,580 --> 00:31:11,320
only ever sent the information to the

00:31:08,110 --> 00:31:13,419
original reporters so I send one back

00:31:11,320 --> 00:31:15,639
st. look okay here's a quote from the

00:31:13,419 --> 00:31:18,700
email that you sent maybe now you'll be

00:31:15,639 --> 00:31:21,429
able to find it so they they respond

00:31:18,700 --> 00:31:25,139
that they finally oh you mean that email

00:31:21,429 --> 00:31:29,529
oh that wasn't a leak and they basically

00:31:25,139 --> 00:31:32,500
denied apps not our fault gov no we

00:31:29,529 --> 00:31:34,720
didn't do anything wrong when what I'd

00:31:32,500 --> 00:31:35,940
triggered all of this was a than sending

00:31:34,720 --> 00:31:39,549
out the information in the first place

00:31:35,940 --> 00:31:42,070
we'd given them information about 4084

00:31:39,549 --> 00:31:44,710
in confidence and we needed to do that

00:31:42,070 --> 00:31:46,149
to explain why we thought the hash

00:31:44,710 --> 00:31:47,679
collision vulnerability didn't apply to

00:31:46,149 --> 00:31:49,179
us even though the proof of concept

00:31:47,679 --> 00:31:50,500
suggested that it did and we had to

00:31:49,179 --> 00:31:52,990
provide that information in order to

00:31:50,500 --> 00:31:54,279
justify our position they then sent that

00:31:52,990 --> 00:31:58,919
out to a whole bunch of people without

00:31:54,279 --> 00:32:01,779
asking us that is a fundamental no no if

00:31:58,919 --> 00:32:03,490
you receive any information about a

00:32:01,779 --> 00:32:06,250
security vulnerability you do not pass

00:32:03,490 --> 00:32:07,750
it on to anybody without the explicit

00:32:06,250 --> 00:32:09,759
permission of the person that gave it to

00:32:07,750 --> 00:32:13,019
you in the first place and they broke

00:32:09,759 --> 00:32:14,679
that rule so I was not happy secondly by

00:32:13,019 --> 00:32:16,750
announcing the hash collision

00:32:14,679 --> 00:32:18,070
vulnerability with the wrong cve that's

00:32:16,750 --> 00:32:19,929
what triggered the publication of the

00:32:18,070 --> 00:32:23,980
information so that was again definitely

00:32:19,929 --> 00:32:26,529
their mistake and yeah they basically

00:32:23,980 --> 00:32:28,990
denied it and refused to apologize and

00:32:26,529 --> 00:32:31,360
the asf told them quite politely that we

00:32:28,990 --> 00:32:32,320
disagreed with that view and left it

00:32:31,360 --> 00:32:35,919
there because there really wasn't

00:32:32,320 --> 00:32:38,559
anything else we could do what we did

00:32:35,919 --> 00:32:40,779
have to do was clear up the mess that it

00:32:38,559 --> 00:32:42,429
left behind so we had a talk to miter

00:32:40,779 --> 00:32:44,619
and basically get them to just kill off

00:32:42,429 --> 00:32:47,049
4084 and just look it's a complete mess

00:32:44,619 --> 00:32:52,330
get rid of it

00:32:47,049 --> 00:32:53,619
and references in to 2012 22 which has

00:32:52,330 --> 00:32:55,570
got the right information about the

00:32:53,619 --> 00:32:57,399
parameter parsing and whatever the CVE

00:32:55,570 --> 00:33:01,659
was for the hash collisions which number

00:32:57,399 --> 00:33:03,429
the number of which I forget once about

00:33:01,659 --> 00:33:07,059
the same for the time we completed the

00:33:03,429 --> 00:33:09,129
patches for tomcat six and it just so

00:33:07,059 --> 00:33:10,299
happens that we held off on the last few

00:33:09,129 --> 00:33:12,820
things until we were ready to do the

00:33:10,299 --> 00:33:15,669
Tomcat 6 release and those we could have

00:33:12,820 --> 00:33:17,200
got this done months ago but tom cat 60s

00:33:15,669 --> 00:33:19,869
wasn't ready till early January so

00:33:17,200 --> 00:33:22,509
that's when we put the last few patches

00:33:19,869 --> 00:33:23,950
in we got the Tomcat 6 release out and

00:33:22,509 --> 00:33:27,549
then on the seventeenth we formally

00:33:23,950 --> 00:33:31,299
announced all of the parameter parsing

00:33:27,549 --> 00:33:35,559
issues that we discovered and as I say I

00:33:31,299 --> 00:33:37,419
was more than a little bit displeased so

00:33:35,559 --> 00:33:39,940
some reflections not keep this very

00:33:37,419 --> 00:33:41,769
quick we have as I said tom cat has a

00:33:39,940 --> 00:33:43,179
potential problem with the time to

00:33:41,769 --> 00:33:44,590
report from announcement and that's to

00:33:43,179 --> 00:33:46,450
do with how to backport it to older

00:33:44,590 --> 00:33:49,149
releases that don't get released so

00:33:46,450 --> 00:33:53,019
often and that that tends to drive our

00:33:49,149 --> 00:33:54,759
announcement schedule it's all it comes

00:33:53,019 --> 00:33:56,499
down to we end up balancing how severe

00:33:54,759 --> 00:33:57,879
is the issue when's the next release you

00:33:56,499 --> 00:34:00,700
and it's a judgment call and it's one

00:33:57,879 --> 00:34:02,549
the PMC makes as a whole poor quality

00:34:00,700 --> 00:34:05,109
report you have to take them seriously

00:34:02,549 --> 00:34:07,059
even if the first 20 lines are utter

00:34:05,109 --> 00:34:10,929
nonsense the 21st might be really useful

00:34:07,059 --> 00:34:12,399
so however frustrating and annoying it

00:34:10,929 --> 00:34:15,309
is to deal with these things you have to

00:34:12,399 --> 00:34:16,690
read them all bug reports whenever

00:34:15,309 --> 00:34:18,159
you're looking at a bit like one of your

00:34:16,690 --> 00:34:19,720
coding whenever you looking at a bug

00:34:18,159 --> 00:34:21,549
report look at it with the security hat

00:34:19,720 --> 00:34:22,990
on as well you know is there a denial of

00:34:21,549 --> 00:34:24,909
service issue here if they're an

00:34:22,990 --> 00:34:26,379
information disclosure issue here should

00:34:24,909 --> 00:34:30,940
you be doing something more like issuing

00:34:26,379 --> 00:34:32,520
a CVA as well yeah double check your is

00:34:30,940 --> 00:34:34,780
resti list before you send it

00:34:32,520 --> 00:34:37,720
particularly if it's displaying real

00:34:34,780 --> 00:34:39,220
names rather than addresses I did have a

00:34:37,720 --> 00:34:42,520
problem for a while where for some

00:34:39,220 --> 00:34:44,349
reason the Tomcat security list was

00:34:42,520 --> 00:34:45,819
showing up as the Apache security list

00:34:44,349 --> 00:34:47,500
because somehow in my address book and

00:34:45,819 --> 00:34:49,270
it's auto completion auto filling thing

00:34:47,500 --> 00:34:51,460
it had got confused it's likely going

00:34:49,270 --> 00:34:54,220
clear that act and coordination

00:34:51,460 --> 00:34:58,180
authorities the vast majority of the

00:34:54,220 --> 00:34:59,980
time they are incredibly useful there

00:34:58,180 --> 00:35:01,150
were like any large organisation

00:34:59,980 --> 00:35:02,920
a large group of people there will be a

00:35:01,150 --> 00:35:04,330
couple of bad apples the problem is you

00:35:02,920 --> 00:35:07,570
don't know who they are until it's too

00:35:04,330 --> 00:35:09,820
late we snuck the Tomcat team in this

00:35:07,570 --> 00:35:10,960
case started off from trusting all X and

00:35:09,820 --> 00:35:14,050
knowing that they knew how to do their

00:35:10,960 --> 00:35:16,690
job and they were doing it properly that

00:35:14,050 --> 00:35:18,220
cost us that's what you know had we

00:35:16,690 --> 00:35:21,100
taken a very paranoid view of things

00:35:18,220 --> 00:35:24,369
then maybe this might not have been as

00:35:21,100 --> 00:35:26,320
big a mess as it is and unfortunately I

00:35:24,369 --> 00:35:28,330
personally no default are not trusting

00:35:26,320 --> 00:35:30,040
them until I've actually dealt with them

00:35:28,330 --> 00:35:31,540
a few times and they've demonstrated

00:35:30,040 --> 00:35:33,400
that they know what they're doing they

00:35:31,540 --> 00:35:34,570
know how to do it properly and that's

00:35:33,400 --> 00:35:36,580
perhaps the bad thing because that

00:35:34,570 --> 00:35:41,230
that's the less coordination less

00:35:36,580 --> 00:35:43,630
cooperation but my primary concern is

00:35:41,230 --> 00:35:45,070
the security of the Tomcat users and to

00:35:43,630 --> 00:35:46,150
keep them secure I have to keep

00:35:45,070 --> 00:35:48,190
information about security

00:35:46,150 --> 00:35:50,010
vulnerabilities private and that means I

00:35:48,190 --> 00:35:52,240
can't share it with people I don't trust

00:35:50,010 --> 00:35:53,920
and whilst these coordination

00:35:52,240 --> 00:35:57,010
authorities should be vetting the people

00:35:53,920 --> 00:35:59,890
they employ experience suggests that

00:35:57,010 --> 00:36:01,540
doesn't always work so my personal views

00:35:59,890 --> 00:36:05,740
I now take a much more paranoid approach

00:36:01,540 --> 00:36:07,720
to these things okay so we've got about

00:36:05,740 --> 00:36:12,609
five or a little bit more than five

00:36:07,720 --> 00:36:14,590
minutes for questions yes well it's

00:36:12,609 --> 00:36:24,640
right here are you expecting there are

00:36:14,590 --> 00:36:26,980
teams whatever they yes the question is

00:36:24,640 --> 00:36:29,140
if a team internally identifies a

00:36:26,980 --> 00:36:31,090
security vulnerability and fixes it does

00:36:29,140 --> 00:36:33,940
that team need to go and get a CV and

00:36:31,090 --> 00:36:35,260
announcing the answer is yes you've got

00:36:33,940 --> 00:36:37,660
a lot more control over when you

00:36:35,260 --> 00:36:39,190
announce it and how you fix it but yet

00:36:37,660 --> 00:36:40,690
if it's a vulnerability it needs to have

00:36:39,190 --> 00:36:42,720
a CVA and it needs to be announced

00:36:40,690 --> 00:36:42,720
publicly

00:36:46,070 --> 00:37:08,820
any other questions yes over there okay

00:37:06,780 --> 00:37:10,650
so the question is why is why in a

00:37:08,820 --> 00:37:12,960
number of those examples did it take a

00:37:10,650 --> 00:37:15,480
couple of months from receiving the

00:37:12,960 --> 00:37:18,150
report to actually having a patch in the

00:37:15,480 --> 00:37:20,910
code base and what it comes back to is

00:37:18,150 --> 00:37:23,880
that as soon as we commit a patch that

00:37:20,910 --> 00:37:25,320
information is public and it's trying to

00:37:23,880 --> 00:37:26,940
balance when there's going to be when

00:37:25,320 --> 00:37:28,830
the when is the next release going to be

00:37:26,940 --> 00:37:29,970
and getting the patch in there to the

00:37:28,830 --> 00:37:33,540
next release without having the patch

00:37:29,970 --> 00:37:36,560
there for too long to announcer to eat

00:37:33,540 --> 00:37:40,830
you end up sort of trying to balance

00:37:36,560 --> 00:37:42,480
when's the next release going to be how

00:37:40,830 --> 00:37:45,330
obvious is the patch the its security

00:37:42,480 --> 00:37:46,650
related and how frequently does that

00:37:45,330 --> 00:37:48,540
particular tom cat version have a

00:37:46,650 --> 00:37:51,750
release and for tomcat 7 it's really not

00:37:48,540 --> 00:37:53,040
a problem we release every month so if

00:37:51,750 --> 00:37:54,600
we get a security vulnerability in the

00:37:53,040 --> 00:37:55,950
middle of the middle of the month pretty

00:37:54,600 --> 00:37:58,230
much certain the next release is going

00:37:55,950 --> 00:38:00,690
is going to include the fix the problem

00:37:58,230 --> 00:38:02,220
is the older releases that because they

00:38:00,690 --> 00:38:04,530
take you know they're typically released

00:38:02,220 --> 00:38:05,880
every four to six months then it will

00:38:04,530 --> 00:38:07,340
when we do the patch then and we

00:38:05,880 --> 00:38:12,270
obviously don't want to announce until

00:38:07,340 --> 00:38:15,030
after all of the releases of God's I've

00:38:12,270 --> 00:38:16,440
got patches in them now that that's a

00:38:15,030 --> 00:38:18,660
strong argument for we know we should be

00:38:16,440 --> 00:38:19,980
releasing tomcat six more often you know

00:38:18,660 --> 00:38:22,490
if we had talked about six on a monthly

00:38:19,980 --> 00:38:25,100
release cycle as well problem goes away

00:38:22,490 --> 00:38:28,560
that's simply a question of resources I

00:38:25,100 --> 00:38:29,700
can keep on top of exam two Tomcats 7

00:38:28,560 --> 00:38:33,000
release manager I can keep on top of

00:38:29,700 --> 00:38:34,470
reaching Tomcat once a month if I was

00:38:33,000 --> 00:38:36,750
having to release tomcat 6 once a month

00:38:34,470 --> 00:38:38,100
as well I'd be doing rather less work my

00:38:36,750 --> 00:38:41,310
boss who SAT over there and he wouldn't

00:38:38,100 --> 00:38:44,100
be too happy with me so it's always a

00:38:41,310 --> 00:38:45,600
balance so we do look at the severity if

00:38:44,100 --> 00:38:47,520
it's a really severe issue then we'll do

00:38:45,600 --> 00:38:50,820
release quite quickly but at the same

00:38:47,520 --> 00:38:51,660
time that does potentially flag two

00:38:50,820 --> 00:38:53,460
people there's something interesting

00:38:51,660 --> 00:38:54,780
going on that oh hang on it there's a

00:38:53,460 --> 00:38:56,790
there's only been a month between tom

00:38:54,780 --> 00:38:59,010
cat six releases why is that and that's

00:38:56,790 --> 00:39:01,080
one will start looking for excuses

00:38:59,010 --> 00:39:02,550
be it oh well there's a regression in

00:39:01,080 --> 00:39:04,020
that library we want to update to the

00:39:02,550 --> 00:39:05,550
latest version or well that's a

00:39:04,020 --> 00:39:08,160
particularly nasty bug that one of my

00:39:05,550 --> 00:39:09,390
clients is having problems with so you

00:39:08,160 --> 00:39:11,850
know work is pressuring me to do a

00:39:09,390 --> 00:39:15,230
tomcat 6 release or so just make up some

00:39:11,850 --> 00:39:15,230
excuse for why we're doing the release

00:39:26,270 --> 00:39:30,810
what I think we rarely accelerate

00:39:29,280 --> 00:39:35,550
releases because we rarely have critical

00:39:30,810 --> 00:39:39,240
vulnerabilities for important ones we

00:39:35,550 --> 00:39:41,670
tend to think that actually it's if

00:39:39,240 --> 00:39:42,780
there was an active exploit then we

00:39:41,670 --> 00:39:44,730
discuss it publicly and talk about

00:39:42,780 --> 00:39:46,530
workarounds and probably get a really

00:39:44,730 --> 00:39:47,940
set fairly quickly and that again that's

00:39:46,530 --> 00:39:53,280
one of the factors that would drive us

00:39:47,940 --> 00:39:54,900
to to do an earlier release yeah it's

00:39:53,280 --> 00:39:56,010
it's one of those kind of judgment calls

00:39:54,900 --> 00:39:57,090
and we're looking we're looking at with

00:39:56,010 --> 00:39:58,650
trying to balance all of the things

00:39:57,090 --> 00:40:00,540
we're trying to do bearing in mind that

00:39:58,650 --> 00:40:02,490
we're a volunteer organization you know

00:40:00,540 --> 00:40:03,960
even those of us that are paid to work

00:40:02,490 --> 00:40:05,790
on it we're still you know from the SS

00:40:03,960 --> 00:40:09,300
point of view were all volunteers so

00:40:05,790 --> 00:40:10,860
it's it's it's a balancing act you know

00:40:09,300 --> 00:40:12,360
ideally I'd like to be able to get you

00:40:10,860 --> 00:40:14,220
know more releases out more frequently

00:40:12,360 --> 00:40:15,600
for all sorts of reasons it just comes

00:40:14,220 --> 00:40:18,240
down to not the project as a whole just

00:40:15,600 --> 00:40:19,680
not having the resources to do that as

00:40:18,240 --> 00:40:21,740
it happens I think getting release at

00:40:19,680 --> 00:40:24,210
once a month to tomcat 7 is pretty good

00:40:21,740 --> 00:40:26,100
that's probably better than most Apache

00:40:24,210 --> 00:40:28,910
projects manage certainly long as I'm

00:40:26,100 --> 00:40:28,910
involved in any way

00:40:29,870 --> 00:40:33,320
release managers of the only bottom line

00:40:31,970 --> 00:40:36,350
because we don't you know at least code

00:40:33,320 --> 00:40:38,720
until three other until three project

00:40:36,350 --> 00:40:41,120
members have voted to approve that

00:40:38,720 --> 00:40:44,000
release oh wait we run into this every

00:40:41,120 --> 00:40:46,370
once in a while at httpd where if you

00:40:44,000 --> 00:40:49,910
know something is less interest some

00:40:46,370 --> 00:40:52,370
module is less interest we may you may

00:40:49,910 --> 00:40:54,020
text while to get enough dollars if we

00:40:52,370 --> 00:40:56,450
were to try this every two weeks every

00:40:54,020 --> 00:40:59,270
month it's not right yeah and the other

00:40:56,450 --> 00:41:01,960
thing because of the way tom cat runs

00:40:59,270 --> 00:41:05,000
its releases internally tomcat six is

00:41:01,960 --> 00:41:06,560
review then commit so you need three pmc

00:41:05,000 --> 00:41:07,940
members to say yes that patch is

00:41:06,560 --> 00:41:11,210
acceptable before you can put it in the

00:41:07,940 --> 00:41:12,470
code base and if there aren't 3pm see

00:41:11,210 --> 00:41:14,360
members that are particularly bothered

00:41:12,470 --> 00:41:16,310
about that security vulnerability then

00:41:14,360 --> 00:41:17,900
it can take a little bit longer and if

00:41:16,310 --> 00:41:19,880
its security related it's normally that

00:41:17,900 --> 00:41:23,660
not that hard to get some interest

00:41:19,880 --> 00:41:25,250
together but that can cause things to

00:41:23,660 --> 00:41:26,180
take a little bit longer as well and

00:41:25,250 --> 00:41:27,950
then if you're going to do a release

00:41:26,180 --> 00:41:29,690
then you really need to fix all that at

00:41:27,950 --> 00:41:31,100
least the bugs is there in the status

00:41:29,690 --> 00:41:32,630
file as well so that needs a few more

00:41:31,100 --> 00:41:34,250
votes people need to find time to review

00:41:32,630 --> 00:41:38,540
the patches and it just slows things

00:41:34,250 --> 00:41:39,770
down a bit now tomcat 7 is still commit

00:41:38,540 --> 00:41:45,710
then review which means we can move a

00:41:39,770 --> 00:41:48,500
little bit faster okay I think we're

00:41:45,710 --> 00:41:50,090
just about out of time so if anyone else

00:41:48,500 --> 00:41:51,500
have you got any more questions feel

00:41:50,090 --> 00:41:54,370
free to come and find me afterwards but

00:41:51,500 --> 00:41:54,370

YouTube URL: https://www.youtube.com/watch?v=SMSR3ahdPfU


