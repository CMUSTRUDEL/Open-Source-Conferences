Title: Reining in Security Sprawl: Certificate & Key Management for Big Data
Publication date: 2013-10-17
Playlist: Apachecon NA 2013 - day 2
Description: 
	Dustin Kirkland
ApacheCon NA 2013
How Secure?
Captions: 
	00:00:00,000 --> 00:00:05,220
so my name is Dustin Kirkland I work for

00:00:02,580 --> 00:00:07,170
a small start-up in Austin Texas called

00:00:05,220 --> 00:00:11,040
bezang I'll talk a little bit about them

00:00:07,170 --> 00:00:13,679
toward the end but here I'm here to talk

00:00:11,040 --> 00:00:17,430
about reining in security sprawl this

00:00:13,679 --> 00:00:19,680
talk is really directed at ad architects

00:00:17,430 --> 00:00:22,650
of solutions developers of solutions

00:00:19,680 --> 00:00:24,210
that are probably built on top of you

00:00:22,650 --> 00:00:29,699
know any one of a number of Apache

00:00:24,210 --> 00:00:32,520
patchy projects start out with the a bit

00:00:29,699 --> 00:00:35,340
of justification about this and this is

00:00:32,520 --> 00:00:37,860
about compromises I've been in the

00:00:35,340 --> 00:00:39,600
security track all morning I listened to

00:00:37,860 --> 00:00:43,320
a couple of interesting presentations

00:00:39,600 --> 00:00:45,210
about CVS and vulnerabilities in the

00:00:43,320 --> 00:00:47,190
software and perhaps that's where some

00:00:45,210 --> 00:00:49,860
of these some of these leaks come from

00:00:47,190 --> 00:00:52,199
but from from this perspective I just

00:00:49,860 --> 00:00:55,230
want to look at some hard statistics

00:00:52,199 --> 00:00:57,809
from this is from the US Department of

00:00:55,230 --> 00:01:00,210
Health and Human Services over three

00:00:57,809 --> 00:01:04,739
over three year period between 2009 and

00:01:00,210 --> 00:01:06,720
2012 21 million Americans health records

00:01:04,739 --> 00:01:09,330
have been exposed at 21 million

00:01:06,720 --> 00:01:12,540
different people that's over six percent

00:01:09,330 --> 00:01:14,010
of the United States there were a total

00:01:12,540 --> 00:01:16,380
of four hundred and eighty reported

00:01:14,010 --> 00:01:19,740
breaches and out of those breaches I did

00:01:16,380 --> 00:01:22,430
some analytics on the on the there you

00:01:19,740 --> 00:01:25,200
can actually grab a CSV file of the data

00:01:22,430 --> 00:01:28,619
almost seventy two percent of those

00:01:25,200 --> 00:01:31,170
compromises consisted of theft of

00:01:28,619 --> 00:01:33,780
physical medium lost devices tapes

00:01:31,170 --> 00:01:35,610
drives or media and improper disposal of

00:01:33,780 --> 00:01:39,509
that media this is information that

00:01:35,610 --> 00:01:41,930
leaked out about people real people and

00:01:39,509 --> 00:01:46,170
it leaked because the media was not

00:01:41,930 --> 00:01:47,880
taken care of at least that seventy two

00:01:46,170 --> 00:01:50,820
percent is trivially solved by

00:01:47,880 --> 00:01:52,649
encryption of data at rest and I'll talk

00:01:50,820 --> 00:01:54,030
about that in a second the other twenty

00:01:52,649 --> 00:01:55,920
eight percent there you know there's a

00:01:54,030 --> 00:01:58,590
bunch of different problems that need to

00:01:55,920 --> 00:02:00,840
be solved that the Shero talk a few

00:01:58,590 --> 00:02:03,090
minutes ago I think could address quite

00:02:00,840 --> 00:02:04,920
a bit of the rest of that in terms of

00:02:03,090 --> 00:02:07,610
protecting through authentication

00:02:04,920 --> 00:02:10,369
authorization that data

00:02:07,610 --> 00:02:13,940
you know at runtime looking at a

00:02:10,369 --> 00:02:15,710
different vertical student records this

00:02:13,940 --> 00:02:18,230
this information came from privacy

00:02:15,710 --> 00:02:20,590
rights org three million students have

00:02:18,230 --> 00:02:23,960
had their student records compromised

00:02:20,590 --> 00:02:25,490
due to very similar attacks that the

00:02:23,960 --> 00:02:27,650
statistics were compiled in a slightly

00:02:25,490 --> 00:02:30,400
different manner but what is important

00:02:27,650 --> 00:02:33,200
is that these are real people the entire

00:02:30,400 --> 00:02:36,110
socials the entire student body at

00:02:33,200 --> 00:02:38,260
University of North Florida everyone's

00:02:36,110 --> 00:02:42,410
social security numbers were breached

00:02:38,260 --> 00:02:44,720
the same thing at actually a Eugene

00:02:42,410 --> 00:02:47,060
Oregon School District nearby 16,000

00:02:44,720 --> 00:02:51,380
Social Security numbers birth dates and

00:02:47,060 --> 00:02:55,610
student IDs were leaked and you know

00:02:51,380 --> 00:02:57,350
this this just goes on all this

00:02:55,610 --> 00:03:00,940
fundamentally comes down to the fact

00:02:57,350 --> 00:03:03,350
that a paradigm is changing is evolving

00:03:00,940 --> 00:03:08,239
specifically security in the cloud is a

00:03:03,350 --> 00:03:11,120
very different landscape than then our

00:03:08,239 --> 00:03:12,890
traditional behind the firewall style of

00:03:11,120 --> 00:03:15,320
computing and I think this crowd the

00:03:12,890 --> 00:03:19,549
Apache crowd has as much appreciation

00:03:15,320 --> 00:03:22,000
for that as anyone in the cloud your

00:03:19,549 --> 00:03:25,430
security gets outsourced and distributed

00:03:22,000 --> 00:03:27,590
not just your computing resources but

00:03:25,430 --> 00:03:29,930
your actual security you give up some of

00:03:27,590 --> 00:03:34,150
the usual physical and logical barriers

00:03:29,930 --> 00:03:36,470
that protect your of your data from a

00:03:34,150 --> 00:03:37,850
automation and orchestration perspective

00:03:36,470 --> 00:03:40,810
cloud means you've got to automate

00:03:37,850 --> 00:03:43,400
things and that previously maybe were

00:03:40,810 --> 00:03:45,470
able to be handled manually you could

00:03:43,400 --> 00:03:48,280
type a couple of passwords on the couple

00:03:45,470 --> 00:03:50,750
of machines when they need it to boot

00:03:48,280 --> 00:03:52,910
boonton you know mount an encrypted

00:03:50,750 --> 00:03:54,470
volume when you're talking about cloud

00:03:52,910 --> 00:03:58,190
computing you can't do that you have to

00:03:54,470 --> 00:04:00,110
automate an orchestrate that means quite

00:03:58,190 --> 00:04:01,690
a bit of non-interactive non password

00:04:00,110 --> 00:04:04,420
and automating the authentication

00:04:01,690 --> 00:04:07,040
processes from a numbers game

00:04:04,420 --> 00:04:09,260
perspective there's just an exponential

00:04:07,040 --> 00:04:11,299
increase in the number of systems that

00:04:09,260 --> 00:04:14,180
are under management and the amount of

00:04:11,299 --> 00:04:17,000
data under management and then finally

00:04:14,180 --> 00:04:18,709
just a pet peeve of mine the the fact

00:04:17,000 --> 00:04:19,549
that there's really a lack of quality

00:04:18,709 --> 00:04:21,680
randomness

00:04:19,549 --> 00:04:24,340
in many cloud computing environments a

00:04:21,680 --> 00:04:26,979
lack of entropy and that can yield

00:04:24,340 --> 00:04:29,240
insecure keys insecure key generation

00:04:26,979 --> 00:04:31,940
I've got a whole other presentation

00:04:29,240 --> 00:04:34,039
dedicated to to entropy in ways to solve

00:04:31,940 --> 00:04:35,960
that in cloud computing come talk to me

00:04:34,039 --> 00:04:39,319
if you're interested in that but that's

00:04:35,960 --> 00:04:40,699
you know just one small piece of this so

00:04:39,319 --> 00:04:43,490
similar question but what's different

00:04:40,699 --> 00:04:45,289
about security in big data environments

00:04:43,490 --> 00:04:47,720
cloud big data they kind of go hand in

00:04:45,289 --> 00:04:50,419
hand these days but there are a couple

00:04:47,720 --> 00:04:53,030
of nuances with respect Ruth respect to

00:04:50,419 --> 00:04:55,129
security first of all big data is

00:04:53,030 --> 00:04:59,780
exploding I mean we're talking petabytes

00:04:55,129 --> 00:05:01,969
scale storage systems that's just you

00:04:59,780 --> 00:05:04,340
know inconceivable a decade ago and

00:05:01,969 --> 00:05:06,620
that's just kind of the ticket to ride

00:05:04,340 --> 00:05:08,360
now when it comes to a real big data

00:05:06,620 --> 00:05:10,849
deployment that someone's going to take

00:05:08,360 --> 00:05:13,909
seriously but along with the data that's

00:05:10,849 --> 00:05:16,280
actually exploding and you know growing

00:05:13,909 --> 00:05:18,440
exponentially so are the keys and

00:05:16,280 --> 00:05:22,310
certificates that are used to manage and

00:05:18,440 --> 00:05:24,319
protect that data the other thing about

00:05:22,310 --> 00:05:26,779
big data is that there's often diverse

00:05:24,319 --> 00:05:28,580
projects and organizations and many of

00:05:26,779 --> 00:05:31,039
the companies we deal with there are

00:05:28,580 --> 00:05:32,810
multiple big data so called Big Data

00:05:31,039 --> 00:05:34,250
projects spread throughout an

00:05:32,810 --> 00:05:36,529
organization you get into an

00:05:34,250 --> 00:05:38,919
organization that has 10,000 you know

00:05:36,529 --> 00:05:41,750
people or a hundred thousand or more

00:05:38,919 --> 00:05:43,159
they may have a dozen Big Data projects

00:05:41,750 --> 00:05:45,199
and very different standards by which

00:05:43,159 --> 00:05:47,509
each of those those projects are managed

00:05:45,199 --> 00:05:48,949
and hence and this is where I think

00:05:47,509 --> 00:05:50,990
hopefully we finally got into the

00:05:48,949 --> 00:05:53,440
premise of this presentation the

00:05:50,990 --> 00:05:55,639
security itself sprawls out of control

00:05:53,440 --> 00:05:57,409
policies in place the guide that

00:05:55,639 --> 00:05:59,919
security of those projects often don't

00:05:57,409 --> 00:06:03,050
exist and that can cause real problems

00:05:59,919 --> 00:06:09,169
managing that data and that's often how

00:06:03,050 --> 00:06:11,870
these sorts of breaches happen so what I

00:06:09,169 --> 00:06:13,699
have our couple case studies across

00:06:11,870 --> 00:06:16,789
several verticals real customers of ours

00:06:13,699 --> 00:06:19,090
and how we're helping them address that

00:06:16,789 --> 00:06:23,659
health care education finance ass

00:06:19,090 --> 00:06:25,909
vendors first thing to understand is

00:06:23,659 --> 00:06:27,440
that the sensitive data itself is

00:06:25,909 --> 00:06:30,259
proliferating there are more and more

00:06:27,440 --> 00:06:31,639
operating system environments out there

00:06:30,259 --> 00:06:33,590
each each node

00:06:31,639 --> 00:06:36,939
each instance be it in infrastructure as

00:06:33,590 --> 00:06:40,639
a service or a platform as a service

00:06:36,939 --> 00:06:43,159
environment there are numerous private

00:06:40,639 --> 00:06:46,669
Keys configuration files log files

00:06:43,159 --> 00:06:49,400
application data user data passwords

00:06:46,669 --> 00:06:51,110
machine data just the DNA that makes a

00:06:49,400 --> 00:06:52,879
machine unique makes that cloud instance

00:06:51,110 --> 00:06:55,759
once the cloud instance boots and takes

00:06:52,879 --> 00:06:57,860
on its own identity you know what is

00:06:55,759 --> 00:06:59,389
that machine that's the machines DNA and

00:06:57,860 --> 00:07:01,069
sometimes that information isn't

00:06:59,389 --> 00:07:04,129
necessarily a password or a certificate

00:07:01,069 --> 00:07:06,020
but it is information that someone could

00:07:04,129 --> 00:07:10,659
use to clone that instance and perhaps

00:07:06,020 --> 00:07:13,759
launch a viable man-in-the-middle attack

00:07:10,659 --> 00:07:16,819
so what can you do and I'll go into each

00:07:13,759 --> 00:07:19,490
of these in great detail but there's

00:07:16,819 --> 00:07:21,889
sort of four tenants that I that tend to

00:07:19,490 --> 00:07:24,620
preach to our customers one always

00:07:21,889 --> 00:07:26,360
encrypt the local data at rest and I'll

00:07:24,620 --> 00:07:29,029
show you some best practices how to do

00:07:26,360 --> 00:07:31,930
that always also encrypt the network

00:07:29,029 --> 00:07:33,889
data while it's in motion or in transit

00:07:31,930 --> 00:07:35,270
you can do all the encryption in the

00:07:33,889 --> 00:07:36,949
world you want to do but if you don't

00:07:35,270 --> 00:07:39,229
protect the keys and certificates that

00:07:36,949 --> 00:07:41,060
guard that that encryption you really

00:07:39,229 --> 00:07:42,520
haven't solved a problem yet so you need

00:07:41,060 --> 00:07:44,479
to protect the keys and certificates

00:07:42,520 --> 00:07:47,719
appropriately and then finally

00:07:44,479 --> 00:07:49,789
monitoring logging meticulously the the

00:07:47,719 --> 00:07:53,810
network events and what what's coming

00:07:49,789 --> 00:07:56,539
and going so in terms of local data at

00:07:53,810 --> 00:07:58,250
rest unfortunately disks do disappear

00:07:56,539 --> 00:08:02,330
that's how seventy two percent of those

00:07:58,250 --> 00:08:04,969
those 21 million healthcare records just

00:08:02,330 --> 00:08:09,560
the disks disappeared and that causes

00:08:04,969 --> 00:08:11,629
compromises some industries are required

00:08:09,560 --> 00:08:13,219
by law to encrypt data at rest we see

00:08:11,629 --> 00:08:15,949
that quite a bit in health and finance

00:08:13,219 --> 00:08:19,189
and academia other industries are self

00:08:15,949 --> 00:08:21,770
regulating PCI for instance is a it's a

00:08:19,189 --> 00:08:23,389
standards body that is run by the credit

00:08:21,770 --> 00:08:25,490
card agencies and they require people

00:08:23,389 --> 00:08:27,770
who take visas and mastercards and

00:08:25,490 --> 00:08:30,020
American Express to abide by a certain

00:08:27,770 --> 00:08:32,240
set of policies some of which include

00:08:30,020 --> 00:08:33,800
encrypting those credit card numbers if

00:08:32,240 --> 00:08:35,870
it ever you know gets stored on a disk

00:08:33,800 --> 00:08:37,729
that's not regulated by the government

00:08:35,870 --> 00:08:39,790
that's regulated by private industry

00:08:37,729 --> 00:08:42,400
because it's expensive when they have

00:08:39,790 --> 00:08:44,320
promise' in any case you know there's a

00:08:42,400 --> 00:08:45,850
number of verticals where this practice

00:08:44,320 --> 00:08:47,440
is actually required and I think there

00:08:45,850 --> 00:08:49,930
are more and more that that are that

00:08:47,440 --> 00:08:52,230
will be following suit encryption at

00:08:49,930 --> 00:08:55,930
rest can take a number of different

00:08:52,230 --> 00:08:57,880
number of different forms the two that I

00:08:55,930 --> 00:09:00,640
mentioned here are at the file level and

00:08:57,880 --> 00:09:03,280
at the block level I've mentioned here

00:09:00,640 --> 00:09:05,380
to file systems built into linux ones

00:09:03,280 --> 00:09:07,150
equipped FS and the other is DM crypt

00:09:05,380 --> 00:09:11,020
actually DM crypt is up as a block

00:09:07,150 --> 00:09:13,120
driver layer a crypt FS is it's a

00:09:11,020 --> 00:09:15,250
virtual file system I'm actually one of

00:09:13,120 --> 00:09:18,250
the authors and maintainer zuv equipped

00:09:15,250 --> 00:09:20,230
FS and have been for some time decrypt

00:09:18,250 --> 00:09:22,330
FS is a file system in the linux kernel

00:09:20,230 --> 00:09:24,340
it's a layered file system you melt one

00:09:22,330 --> 00:09:26,740
directory on top of another directory

00:09:24,340 --> 00:09:28,630
and you specify the passphrase and the

00:09:26,740 --> 00:09:31,360
salt and the initialization vector and

00:09:28,630 --> 00:09:33,250
so forth but what you end up with is a

00:09:31,360 --> 00:09:36,580
mount point where there's an upper

00:09:33,250 --> 00:09:38,500
directory that is a decrypted view of

00:09:36,580 --> 00:09:40,630
those files it they don't actually exist

00:09:38,500 --> 00:09:42,670
in any decrypt that view except in the

00:09:40,630 --> 00:09:45,370
Colonel's memory but applications can

00:09:42,670 --> 00:09:48,790
read and write data to those files as if

00:09:45,370 --> 00:09:50,350
they're real files like I said they're

00:09:48,790 --> 00:09:52,210
just that's just a representation of

00:09:50,350 --> 00:09:54,490
those files in memory the way they

00:09:52,210 --> 00:09:56,380
actually exist are as encrypted data on

00:09:54,490 --> 00:09:57,670
the lower filesystem I said there's two

00:09:56,380 --> 00:09:59,890
directories you meant one on top of

00:09:57,670 --> 00:10:02,530
another it's kind of like NFS you melt

00:09:59,890 --> 00:10:05,950
you mount this NFS you know IP address

00:10:02,530 --> 00:10:07,180
colon mount point to another directory

00:10:05,950 --> 00:10:08,890
and then you read and write data from

00:10:07,180 --> 00:10:10,510
that directory but there's no files that

00:10:08,890 --> 00:10:12,640
actually live in that directory on the

00:10:10,510 --> 00:10:14,770
local system equipped FS works the exact

00:10:12,640 --> 00:10:19,120
same way there's a lower directory in an

00:10:14,770 --> 00:10:20,980
up or directory at the block level Linux

00:10:19,120 --> 00:10:22,360
support something called DM crypt DM

00:10:20,980 --> 00:10:25,090
crypt stands for device mapper

00:10:22,360 --> 00:10:26,890
encryption with the M crypt you can

00:10:25,090 --> 00:10:29,110
actually encrypt entire block devices

00:10:26,890 --> 00:10:32,590
that can be a disk that can be a

00:10:29,110 --> 00:10:35,260
partition that can be a volume if you're

00:10:32,590 --> 00:10:37,060
using lvm or something like that DM

00:10:35,260 --> 00:10:39,010
krypton equipped FS complement one

00:10:37,060 --> 00:10:41,350
another and what they do they each solve

00:10:39,010 --> 00:10:43,240
problems at a different layer DM crypt

00:10:41,350 --> 00:10:45,520
at a much lower layer closer to the

00:10:43,240 --> 00:10:49,570
hardware and DM crypt is quite a bit

00:10:45,520 --> 00:10:51,110
faster with with with Intel's a ESN i

00:10:49,570 --> 00:10:54,320
acceleration built in someone

00:10:51,110 --> 00:10:58,040
some of the modern CPUs damn crib can

00:10:54,320 --> 00:10:59,570
actually offload that is a cryptographer

00:10:58,040 --> 00:11:02,060
cryptographic operations to the

00:10:59,570 --> 00:11:04,100
coprocessor on the CPU and really

00:11:02,060 --> 00:11:07,459
accelerate how quickly that encryption

00:11:04,100 --> 00:11:09,800
and decryption is happening but DM crypt

00:11:07,459 --> 00:11:11,930
is a very blunt object is a very blunt

00:11:09,800 --> 00:11:13,700
tool compared to e crypt FS with the

00:11:11,930 --> 00:11:15,740
crypt FS you can be pretty surgical

00:11:13,700 --> 00:11:17,420
about you want to encrypt just this

00:11:15,740 --> 00:11:20,209
directory you want to encrypt just this

00:11:17,420 --> 00:11:22,160
file you want to encrypt these files but

00:11:20,209 --> 00:11:24,560
not these other files you want to use

00:11:22,160 --> 00:11:26,360
one key for for this file and a

00:11:24,560 --> 00:11:27,829
different key for this directory the

00:11:26,360 --> 00:11:29,779
encrypt is a single key for the entire

00:11:27,829 --> 00:11:31,899
mount point and it's sort of all or

00:11:29,779 --> 00:11:34,579
nothing you also have to set up DM crypt

00:11:31,899 --> 00:11:36,890
at the time before you format the

00:11:34,579 --> 00:11:38,570
filesystem right so you set up the

00:11:36,890 --> 00:11:40,880
encrypt on the volume and then you

00:11:38,570 --> 00:11:42,230
format the filesystem and then you've

00:11:40,880 --> 00:11:45,320
got a mount point that you can use

00:11:42,230 --> 00:11:49,250
equipped FS works on top of file systems

00:11:45,320 --> 00:11:51,110
such as EXT or XFS or butter FS or

00:11:49,250 --> 00:11:53,360
actually any of the Linux file systems

00:11:51,110 --> 00:11:55,850
it'll work with what that means is that

00:11:53,360 --> 00:11:58,070
you can actually set up a crypt FS long

00:11:55,850 --> 00:11:59,480
after you format at the file system it's

00:11:58,070 --> 00:12:01,490
it's something that you can do on a

00:11:59,480 --> 00:12:03,440
running or legacy system for instance

00:12:01,490 --> 00:12:06,350
where as DM crypt you need to provision

00:12:03,440 --> 00:12:07,970
the entire disk and decide to encrypt it

00:12:06,350 --> 00:12:10,730
at the time at which you initially

00:12:07,970 --> 00:12:12,769
format that file system in either case

00:12:10,730 --> 00:12:17,329
both of these tools are freely available

00:12:12,769 --> 00:12:21,949
in any any Linux distribution since 2006

00:12:17,329 --> 00:12:24,790
probably used at length in especially in

00:12:21,949 --> 00:12:27,680
appliances and in purpose-built systems

00:12:24,790 --> 00:12:30,140
every Google Chromebook that ships

00:12:27,680 --> 00:12:31,850
actually uses equipped FS to encrypt the

00:12:30,140 --> 00:12:33,860
what little local data is stored on the

00:12:31,850 --> 00:12:36,740
system your browser cache and stuff and

00:12:33,860 --> 00:12:38,630
such every Google Chromebook that's ever

00:12:36,740 --> 00:12:42,079
shipped uses e crypt FS at that level

00:12:38,630 --> 00:12:44,209
there are a couple of nas network

00:12:42,079 --> 00:12:46,490
attached storage manufacturer Seagate is

00:12:44,209 --> 00:12:48,680
one of them whether they actually use

00:12:46,490 --> 00:12:50,899
equipped FS embedded in the controller

00:12:48,680 --> 00:12:54,620
to encrypt the disk or encrypt the data

00:12:50,899 --> 00:12:56,839
as it's written to disk the encrypt as

00:12:54,620 --> 00:12:59,839
well you will find in a number of

00:12:56,839 --> 00:13:02,360
different places android smartphones as

00:12:59,839 --> 00:13:04,190
of the Ice Cream Sandwich release has

00:13:02,360 --> 00:13:05,150
then encrypt this device option which

00:13:04,190 --> 00:13:06,890
will actually

00:13:05,150 --> 00:13:09,890
kate's in space and encrypt that space

00:13:06,890 --> 00:13:12,560
using using the M crypt so both of these

00:13:09,890 --> 00:13:14,420
technologies are used at scale you know

00:13:12,560 --> 00:13:16,460
quite a bit on the consumer side quite a

00:13:14,420 --> 00:13:19,970
bit on the on the enterprise side Oh

00:13:16,460 --> 00:13:21,440
Andy crypt FS also is used by Ubuntu if

00:13:19,970 --> 00:13:23,810
you choose to encrypt your home

00:13:21,440 --> 00:13:26,180
directory you know the 11 click encrypt

00:13:23,810 --> 00:13:29,600
my home directory option that's a crypt

00:13:26,180 --> 00:13:32,150
FS at work the company I work for Kazan

00:13:29,600 --> 00:13:36,680
has actually built us a wrapper for

00:13:32,150 --> 00:13:38,840
these two tools a set of basically

00:13:36,680 --> 00:13:41,510
management utilities that can help set

00:13:38,840 --> 00:13:43,910
this up in a very consistent way across

00:13:41,510 --> 00:13:46,010
an enterprise deploy that at scale and

00:13:43,910 --> 00:13:48,950
interface with a with a enterprise key

00:13:46,010 --> 00:13:50,900
manager we call that Z encrypt but it

00:13:48,950 --> 00:13:52,520
supports both decrypt FS and DM crypt

00:13:50,900 --> 00:13:55,820
it's essentially commercial support for

00:13:52,520 --> 00:13:58,640
these two encrypted file systems from a

00:13:55,820 --> 00:14:00,830
performance perspective if if you're

00:13:58,640 --> 00:14:03,140
leveraging asni for hardware

00:14:00,830 --> 00:14:06,770
acceleration the performances negligible

00:14:03,140 --> 00:14:10,040
it's less than 1% impact on you know it

00:14:06,770 --> 00:14:11,960
whatever your workload might be if you

00:14:10,040 --> 00:14:13,580
don't use asni it's typically in the

00:14:11,960 --> 00:14:15,500
three to five percent range it really

00:14:13,580 --> 00:14:18,860
depends on the workload and how fast the

00:14:15,500 --> 00:14:21,140
physical media is backing the the file

00:14:18,860 --> 00:14:23,900
systems the faster the media the more

00:14:21,140 --> 00:14:25,490
you'll see the impact of encryption the

00:14:23,900 --> 00:14:28,100
slower the media the less you'll see the

00:14:25,490 --> 00:14:30,350
impact of encryption basically the the

00:14:28,100 --> 00:14:32,810
mathematical process of encrypting and

00:14:30,350 --> 00:14:34,880
decrypting data can usually fit within

00:14:32,810 --> 00:14:36,710
the i/o weight of fetching the next

00:14:34,880 --> 00:14:38,800
block from disk when you have a really

00:14:36,710 --> 00:14:41,870
fast disk an SSD or something like that

00:14:38,800 --> 00:14:43,730
you're fetching the data as fast as you

00:14:41,870 --> 00:14:46,460
go you can actually fetch the data

00:14:43,730 --> 00:14:50,720
sometimes faster than the crypto that

00:14:46,460 --> 00:14:52,520
the math can happen so the second part

00:14:50,720 --> 00:14:55,580
of this is encrypting the the data in

00:14:52,520 --> 00:14:57,950
motion network data particularly in

00:14:55,580 --> 00:15:01,430
Apache projects most Apache products

00:14:57,950 --> 00:15:04,000
have native SSL or TLS support built in

00:15:01,430 --> 00:15:09,600
to the to the to the server you know

00:15:04,000 --> 00:15:14,579
anything from HTTP to Hadoop or

00:15:09,600 --> 00:15:16,380
have ssl available within the source

00:15:14,579 --> 00:15:17,819
code it's a matter of hooking a handful

00:15:16,380 --> 00:15:20,130
of functions especially the network

00:15:17,819 --> 00:15:23,279
facing functions to be able to make the

00:15:20,130 --> 00:15:26,550
appropriate library calls to TLS or RSS

00:15:23,279 --> 00:15:28,290
oh but actually in practice and I do

00:15:26,550 --> 00:15:30,180
quite a bit of work in business and

00:15:28,290 --> 00:15:33,149
enterprise it's actually pretty rare to

00:15:30,180 --> 00:15:35,790
see this see you know especially Apache

00:15:33,149 --> 00:15:37,860
projects deployed with SSL enabled it's

00:15:35,790 --> 00:15:40,259
there but it's it's too often it's just

00:15:37,860 --> 00:15:41,910
it's not even enabled and there's a good

00:15:40,259 --> 00:15:43,769
reason for that oh there is a reason for

00:15:41,910 --> 00:15:45,899
that and that's that the certificate

00:15:43,769 --> 00:15:49,980
management is actually really hard it's

00:15:45,899 --> 00:15:52,110
hard to get right you can do it a number

00:15:49,980 --> 00:15:53,670
of ways the most expensive ways by

00:15:52,110 --> 00:15:55,649
buying a commercial see a signed

00:15:53,670 --> 00:15:57,990
certificate for everything but you know

00:15:55,649 --> 00:15:59,399
when we're talking about a massive you

00:15:57,990 --> 00:16:01,980
know I do cluster or something like that

00:15:59,399 --> 00:16:04,279
that's just that's just impractical it

00:16:01,980 --> 00:16:06,540
doesn't scale it doesn't scale very well

00:16:04,279 --> 00:16:08,399
you can also use self-signed

00:16:06,540 --> 00:16:10,230
certificates and you know you can do it

00:16:08,399 --> 00:16:11,550
in an insecure way which says yeah just

00:16:10,230 --> 00:16:13,079
ignore the certificate as long as I'm

00:16:11,550 --> 00:16:15,600
doing encryption sure I'll take it

00:16:13,079 --> 00:16:18,509
that's that's not good for for obvious

00:16:15,600 --> 00:16:20,910
reasons men in the middle attacks become

00:16:18,509 --> 00:16:23,009
very easy there if you ignore the

00:16:20,910 --> 00:16:24,779
certificate and just say sure whatever's

00:16:23,009 --> 00:16:26,490
our ticket certificate you have I'm

00:16:24,779 --> 00:16:27,930
going to take that that's you know

00:16:26,490 --> 00:16:30,389
that's the process you go through and

00:16:27,930 --> 00:16:32,610
your browser when you accept a you know

00:16:30,389 --> 00:16:35,069
this hold on this certificate doesn't

00:16:32,610 --> 00:16:36,750
look valid do you want this if you just

00:16:35,069 --> 00:16:38,699
click accept everything you're doing

00:16:36,750 --> 00:16:40,560
there is encrypted but you don't know

00:16:38,699 --> 00:16:42,779
who you're encrypting this data to and

00:16:40,560 --> 00:16:45,750
from you actually can do self-signed

00:16:42,779 --> 00:16:47,970
certificates and be secure what you'd

00:16:45,750 --> 00:16:50,519
have to do though is pre share your own

00:16:47,970 --> 00:16:52,589
certificate authority Authority on each

00:16:50,519 --> 00:16:55,410
node at deployment so you could add

00:16:52,589 --> 00:16:57,120
yourself to the to the route chain on

00:16:55,410 --> 00:17:00,829
those systems but you need to put that

00:16:57,120 --> 00:17:04,409
into the at-sea sslc a certificate cert

00:17:00,829 --> 00:17:06,839
at deployment time and that can be done

00:17:04,409 --> 00:17:08,130
and we've done this before using puppet

00:17:06,839 --> 00:17:12,510
or chef or you know whatever your

00:17:08,130 --> 00:17:14,939
orchestration mechanism is for for

00:17:12,510 --> 00:17:18,299
provisioning systems if you can you know

00:17:14,939 --> 00:17:18,740
establish that early in the brain up of

00:17:18,299 --> 00:17:21,230
the

00:17:18,740 --> 00:17:24,949
of the cluster it can be done and you

00:17:21,230 --> 00:17:26,300
know your systems will never get if you

00:17:24,949 --> 00:17:29,570
do it right your systems will never get

00:17:26,300 --> 00:17:31,760
the invalid certificate type errors what

00:17:29,570 --> 00:17:33,320
this all means is that effectively pki

00:17:31,760 --> 00:17:35,000
is essential it's essential to getting

00:17:33,320 --> 00:17:38,210
this right it's hard to do if not

00:17:35,000 --> 00:17:41,690
impossible to do SSL and TLS without a

00:17:38,210 --> 00:17:43,910
pki a public key infrastructure and

00:17:41,690 --> 00:17:45,530
finally and this is you know back to the

00:17:43,910 --> 00:17:47,330
previous pet peeve you have to make sure

00:17:45,530 --> 00:17:49,370
you have sufficient entropy to generate

00:17:47,330 --> 00:17:51,950
quality certificates without sufficient

00:17:49,370 --> 00:17:53,809
entropy your certificates could be you

00:17:51,950 --> 00:17:56,330
know scarily similar to another

00:17:53,809 --> 00:17:58,929
certificate generated by another very

00:17:56,330 --> 00:18:01,880
similar virtual machine or node that

00:17:58,929 --> 00:18:06,160
that that that could be reproduced at

00:18:01,880 --> 00:18:08,900
some time later by an attacker so

00:18:06,160 --> 00:18:10,820
following on on that protecting the keys

00:18:08,900 --> 00:18:13,610
and certificates there's two pieces of

00:18:10,820 --> 00:18:15,800
the pki ones that the public peace you

00:18:13,610 --> 00:18:18,290
know how do you share public keys and

00:18:15,800 --> 00:18:20,840
selling public keys what this slot is

00:18:18,290 --> 00:18:22,880
about is how to share our how to protect

00:18:20,840 --> 00:18:24,440
private keys and private certificates

00:18:22,880 --> 00:18:26,090
and that's really at the heart of the

00:18:24,440 --> 00:18:28,010
root of trust if you don't have

00:18:26,090 --> 00:18:32,330
sufficient protection on the the private

00:18:28,010 --> 00:18:34,190
keys you know that that the integrity of

00:18:32,330 --> 00:18:36,800
that data is is really not guaranteed

00:18:34,190 --> 00:18:39,080
it's essential to store those keys

00:18:36,800 --> 00:18:41,570
separate from the encrypted data and

00:18:39,080 --> 00:18:44,450
maybe that goes without saying but it's

00:18:41,570 --> 00:18:47,120
very difficult to do in practice that

00:18:44,450 --> 00:18:48,350
means you've got to have that you've got

00:18:47,120 --> 00:18:49,850
to keep the key separate from your

00:18:48,350 --> 00:18:51,679
encrypted data but you need to have

00:18:49,850 --> 00:18:54,710
access to the key at the time at which

00:18:51,679 --> 00:18:56,300
you need decrypted access to that data

00:18:54,710 --> 00:18:58,670
and perhaps it's at Mount Tom if you're

00:18:56,300 --> 00:19:00,740
mounting a file system or at a backup

00:18:58,670 --> 00:19:03,110
time if you're creating backups of

00:19:00,740 --> 00:19:05,990
backups snapshots of a database or

00:19:03,110 --> 00:19:08,660
something like that the best practice

00:19:05,990 --> 00:19:11,059
here is to always avoid storing those

00:19:08,660 --> 00:19:12,860
keys and certificates on the disk and

00:19:11,059 --> 00:19:14,390
that's something that is really

00:19:12,860 --> 00:19:17,030
difficult to do in web servers where

00:19:14,390 --> 00:19:19,100
they need a private you know SSL you

00:19:17,030 --> 00:19:20,840
know mod ssl needs a private SSL

00:19:19,100 --> 00:19:22,970
certificate so that it can launch and

00:19:20,840 --> 00:19:26,360
load so where do you put it well you you

00:19:22,970 --> 00:19:28,340
put it in at sea SSL if you're if you're

00:19:26,360 --> 00:19:30,169
of the mindset you can password protect

00:19:28,340 --> 00:19:31,230
it but that means an admin has to be

00:19:30,169 --> 00:19:33,299
ready to type that

00:19:31,230 --> 00:19:35,370
password every time you boot your your

00:19:33,299 --> 00:19:38,250
apache server maybe that works okay for

00:19:35,370 --> 00:19:39,840
your your one server but it sure doesn't

00:19:38,250 --> 00:19:41,280
work for a cluster machines and it

00:19:39,840 --> 00:19:44,880
certainly doesn't work if you need to

00:19:41,280 --> 00:19:46,919
maximize uptime the other thing that you

00:19:44,880 --> 00:19:48,030
know happens from time to time is hard

00:19:46,919 --> 00:19:49,770
coding those within an application

00:19:48,030 --> 00:19:51,090
writing you know a password or

00:19:49,770 --> 00:19:54,090
passphrase there's private certificate

00:19:51,090 --> 00:19:55,860
directly into the to the app and frankly

00:19:54,090 --> 00:19:58,799
that's that's no better than storing it

00:19:55,860 --> 00:20:00,270
on disk so as I said the best practice

00:19:58,799 --> 00:20:02,790
here is to retrieve those keys and

00:20:00,270 --> 00:20:05,280
certificates dynamically at the time of

00:20:02,790 --> 00:20:07,260
use the tou and then discard them

00:20:05,280 --> 00:20:11,120
immediately and make sure that you put

00:20:07,260 --> 00:20:14,160
them into secure memory M lock and

00:20:11,120 --> 00:20:15,299
discard when done what this means though

00:20:14,160 --> 00:20:17,190
is that you've got Institute the

00:20:15,299 --> 00:20:22,169
policies that guard the retrieval of

00:20:17,190 --> 00:20:24,200
those keys okay so you know your

00:20:22,169 --> 00:20:26,520
policies it would be what would guard

00:20:24,200 --> 00:20:28,950
those keys from being retrieved by your

00:20:26,520 --> 00:20:30,600
attacker right your attacker wants to

00:20:28,950 --> 00:20:32,640
retrieve that key in the same manner

00:20:30,600 --> 00:20:34,049
that that you retrieve the key but the

00:20:32,640 --> 00:20:36,179
policy would need to distinguish between

00:20:34,049 --> 00:20:39,690
a legitimate request for the key and an

00:20:36,179 --> 00:20:42,929
illegitimate request so once again this

00:20:39,690 --> 00:20:44,490
is a the other piece of what what Kazan

00:20:42,929 --> 00:20:46,620
provides to our customers and that's a

00:20:44,490 --> 00:20:50,730
product called Z trustee it's a rest

00:20:46,620 --> 00:20:52,380
based web service for four key retrieval

00:20:50,730 --> 00:20:54,450
authenticated key retrieval there's a Z

00:20:52,380 --> 00:20:56,669
trustee server there are many z trustee

00:20:54,450 --> 00:20:59,640
clients the clients authenticate to the

00:20:56,669 --> 00:21:02,370
server and request keys by handle or

00:20:59,640 --> 00:21:05,070
universally unique identifiers each

00:21:02,370 --> 00:21:07,049
request for a key or we call them opaque

00:21:05,070 --> 00:21:08,580
objects deposits it could be a key it

00:21:07,049 --> 00:21:10,980
could be a file it could be a directory

00:21:08,580 --> 00:21:12,780
it could be gigabytes of data it could

00:21:10,980 --> 00:21:15,270
be a short password or passphrase it

00:21:12,780 --> 00:21:17,850
really doesn't matter it's that's opaque

00:21:15,270 --> 00:21:19,410
to the Z trustee server but what the

00:21:17,850 --> 00:21:21,929
client does is it authenticates to that

00:21:19,410 --> 00:21:23,940
server and the server checks the the

00:21:21,929 --> 00:21:26,460
authentication of that client are you a

00:21:23,940 --> 00:21:29,730
valid client do you have access to the

00:21:26,460 --> 00:21:33,480
key you're requesting is is are you

00:21:29,730 --> 00:21:35,340
expired is that deposit expired can you

00:21:33,480 --> 00:21:37,860
meet all the policies necessary to

00:21:35,340 --> 00:21:42,110
retrieve this and the policies include a

00:21:37,860 --> 00:21:44,990
TTL on keys keys can expire after

00:21:42,110 --> 00:21:48,140
you know in seconds or days or weeks or

00:21:44,990 --> 00:21:50,780
months or years is the number of times

00:21:48,140 --> 00:21:53,150
that that Keys that deposit has been

00:21:50,780 --> 00:21:54,410
retrieved of is it below the retrieval

00:21:53,150 --> 00:21:56,510
limit so you can have keys that are

00:21:54,410 --> 00:21:58,850
retrievable exactly once or twice or

00:21:56,510 --> 00:22:01,490
three times those are called nonces so

00:21:58,850 --> 00:22:03,559
we can put a nonce on uncertain keys or

00:22:01,490 --> 00:22:06,230
certificates and rotate them accordingly

00:22:03,559 --> 00:22:08,570
and then the the most unique aspect of Z

00:22:06,230 --> 00:22:10,640
trustee is the trustee aspect you can

00:22:08,570 --> 00:22:12,950
actually name trustees which are either

00:22:10,640 --> 00:22:15,860
humans or processes who guard the

00:22:12,950 --> 00:22:17,840
release of that key and this is a person

00:22:15,860 --> 00:22:20,470
who has to sign off on the release of a

00:22:17,840 --> 00:22:23,059
key and signing off could mean either

00:22:20,470 --> 00:22:25,730
clicking a yes or no in an encrypted

00:22:23,059 --> 00:22:27,350
signed email that badman would get and

00:22:25,730 --> 00:22:31,040
the server would put the client in a

00:22:27,350 --> 00:22:33,350
waiting pole until the trustee releases

00:22:31,040 --> 00:22:35,690
that key or we've actually got mobile

00:22:33,350 --> 00:22:37,580
apps to do that as well so then the

00:22:35,690 --> 00:22:39,260
trustee never actually has access to the

00:22:37,580 --> 00:22:41,750
to the key of their certificate or the

00:22:39,260 --> 00:22:43,580
private data they only have the right

00:22:41,750 --> 00:22:45,530
and responsibility to authorize the

00:22:43,580 --> 00:22:47,870
release of it so this is the way to get

00:22:45,530 --> 00:22:50,390
around the are this is the secure

00:22:47,870 --> 00:22:52,910
solution we believe to the password

00:22:50,390 --> 00:22:55,669
protecting your your SSL certificate in

00:22:52,910 --> 00:22:57,740
mod ssl at load time so what would you

00:22:55,669 --> 00:22:59,750
you know would set this up and then your

00:22:57,740 --> 00:23:01,400
sis admin one or more sis admins trust

00:22:59,750 --> 00:23:04,280
you would name its trustees you can name

00:23:01,400 --> 00:23:06,500
five admins as trustees and require that

00:23:04,280 --> 00:23:09,590
two out of five or any number out of the

00:23:06,500 --> 00:23:11,000
five release that key are authorizing

00:23:09,590 --> 00:23:12,500
the release of that key and they never

00:23:11,000 --> 00:23:15,260
actually have access to the private

00:23:12,500 --> 00:23:18,350
certificate itself but what they have is

00:23:15,260 --> 00:23:20,900
the ability to click authorize or you

00:23:18,350 --> 00:23:26,210
know go out of band and legitimize that

00:23:20,900 --> 00:23:27,980
request and then the final piece of the

00:23:26,210 --> 00:23:29,600
this advice from a you know an

00:23:27,980 --> 00:23:30,890
architectural standpoint is to ensure

00:23:29,600 --> 00:23:34,220
that you're always monitoring and

00:23:30,890 --> 00:23:35,990
logging and doing that meticulously some

00:23:34,220 --> 00:23:37,280
services have native logging tools

00:23:35,990 --> 00:23:39,679
others you may need third-party

00:23:37,280 --> 00:23:41,419
applications like a Splunk or something

00:23:39,679 --> 00:23:44,450
like that almost any application

00:23:41,419 --> 00:23:46,970
especially the apache applications do a

00:23:44,450 --> 00:23:50,000
fabulous job of you know putting out

00:23:46,970 --> 00:23:52,930
quality exhaust just application exhaust

00:23:50,000 --> 00:23:55,900
and then you know being able to

00:23:52,930 --> 00:23:58,600
I accumulate those into an appropriate

00:23:55,900 --> 00:24:00,640
data store and then analyze them

00:23:58,600 --> 00:24:02,290
appropriately analyzing them as

00:24:00,640 --> 00:24:04,150
essential audit in the logs it's only

00:24:02,290 --> 00:24:05,860
does so much good too and what does

00:24:04,150 --> 00:24:08,230
little to no good to have logs you

00:24:05,860 --> 00:24:10,120
really have to be able to audit them to

00:24:08,230 --> 00:24:12,460
do it live and in real time can really

00:24:10,120 --> 00:24:15,130
help thwart you know the worst live

00:24:12,460 --> 00:24:19,360
attacks but even analytics after the

00:24:15,130 --> 00:24:20,650
fact can detect aberrations it's nice to

00:24:19,360 --> 00:24:22,360
do that when you can do in real time

00:24:20,650 --> 00:24:25,210
there should be you know some some

00:24:22,360 --> 00:24:27,910
checks in real time others are more you

00:24:25,210 --> 00:24:31,420
know post-mortem knowing what's going on

00:24:27,910 --> 00:24:34,270
after the fact so right now we're

00:24:31,420 --> 00:24:36,550
protecting customers running each of

00:24:34,270 --> 00:24:39,460
these apache projects accumulo cassandra

00:24:36,550 --> 00:24:42,220
couch hadoop and friends tomcat and

00:24:39,460 --> 00:24:44,800
solar as well as other non apache

00:24:42,220 --> 00:24:47,260
projects cluster FS mongodb mysql

00:24:44,800 --> 00:24:50,200
postgres and react we've got customers

00:24:47,260 --> 00:24:52,270
in production that have critical data

00:24:50,200 --> 00:24:55,480
some healthcare some finance some

00:24:52,270 --> 00:24:58,420
student records some not critic not you

00:24:55,480 --> 00:25:01,360
know regulated data but data that these

00:24:58,420 --> 00:25:04,150
customers feel a need to protect and in

00:25:01,360 --> 00:25:06,460
all of these cases the the Vic using

00:25:04,150 --> 00:25:08,350
encryption and key management slide and

00:25:06,460 --> 00:25:09,880
underneath their data running in these

00:25:08,350 --> 00:25:11,770
applications and the applications are

00:25:09,880 --> 00:25:13,600
essentially it's transparent in them

00:25:11,770 --> 00:25:16,350
they don't even need to know that

00:25:13,600 --> 00:25:19,560
there's encryption happening underneath

00:25:16,350 --> 00:25:22,090
so a couple of case studies one and I'll

00:25:19,560 --> 00:25:25,780
leave you guessing who these these

00:25:22,090 --> 00:25:27,970
companies are one is a global mobile

00:25:25,780 --> 00:25:31,030
device company cell phone manufacturer

00:25:27,970 --> 00:25:33,850
they're streaming and storing user

00:25:31,030 --> 00:25:35,740
credential data from the handsets to

00:25:33,850 --> 00:25:39,250
their to their data center their their

00:25:35,740 --> 00:25:42,990
cloud so to speak every single one of

00:25:39,250 --> 00:25:44,860
those every object that they stream

00:25:42,990 --> 00:25:47,110
necessarily includes personally

00:25:44,860 --> 00:25:50,140
identifiable information about the the

00:25:47,110 --> 00:25:55,420
person who's handset this is this is

00:25:50,140 --> 00:25:57,820
retrieving that information from they

00:25:55,420 --> 00:25:59,620
use a suite of applications to analyze

00:25:57,820 --> 00:26:02,020
and operate on this data in fact it's

00:25:59,620 --> 00:26:05,799
it's quite a bit of cassandra among

00:26:02,020 --> 00:26:07,480
others to the to the user this

00:26:05,799 --> 00:26:09,940
a benefit of being able to backup and

00:26:07,480 --> 00:26:11,499
restore the device state at some point

00:26:09,940 --> 00:26:14,049
so to be able to replace the device and

00:26:11,499 --> 00:26:16,600
restore its state somewhere else but

00:26:14,049 --> 00:26:19,269
they also run analytics to determine

00:26:16,600 --> 00:26:22,330
maps and traffic patterns and produce

00:26:19,269 --> 00:26:24,610
some targeted advertising this company

00:26:22,330 --> 00:26:26,980
uses our software to protect their all

00:26:24,610 --> 00:26:29,559
of the data at rest it's a cassandra +

00:26:26,980 --> 00:26:31,840
Hadoop and that this happens inside of

00:26:29,559 --> 00:26:33,909
their own data center so you know this

00:26:31,840 --> 00:26:35,529
there are similar protections that need

00:26:33,909 --> 00:26:38,769
to happen whether it's a public cloud or

00:26:35,529 --> 00:26:41,590
private cloud or a hybrid in this case

00:26:38,769 --> 00:26:44,859
this is an on-premises data center at

00:26:41,590 --> 00:26:46,509
the very lowest level there's there's

00:26:44,859 --> 00:26:48,399
encryption happening but before this

00:26:46,509 --> 00:26:51,850
data goes to disk there's a whole suite

00:26:48,399 --> 00:26:54,100
of access policies sitting on top of

00:26:51,850 --> 00:26:55,899
that but what we can do is ensure that

00:26:54,100 --> 00:27:00,970
they meet their regulatory compliance to

00:26:55,899 --> 00:27:03,669
encrypt the the PII information in a

00:27:00,970 --> 00:27:06,609
second use case there's a SAS vendor

00:27:03,669 --> 00:27:11,019
someone who is running an application in

00:27:06,609 --> 00:27:15,669
in a public cloud an Amazon Cloud they

00:27:11,019 --> 00:27:18,580
do identity management they are what

00:27:15,669 --> 00:27:20,109
would they found what they're there you

00:27:18,580 --> 00:27:21,820
know internal processes found was that

00:27:20,109 --> 00:27:24,100
they had this massive security sprawl

00:27:21,820 --> 00:27:25,929
without management or policy about the

00:27:24,100 --> 00:27:28,090
passwords and operating system data in

00:27:25,929 --> 00:27:29,679
their cluster itself and they really

00:27:28,090 --> 00:27:31,299
wanted to centralize the keys and

00:27:29,679 --> 00:27:34,359
certificates and the password and the

00:27:31,299 --> 00:27:36,940
management of that they used us in their

00:27:34,359 --> 00:27:39,970
their SAS application which is another

00:27:36,940 --> 00:27:43,149
you know Cassandra and friends sort of

00:27:39,970 --> 00:27:46,749
application to encrypt that data you

00:27:43,149 --> 00:27:50,859
know in a public cloud their unique in

00:27:46,749 --> 00:27:52,929
that they're using the API directly our

00:27:50,859 --> 00:27:56,590
Java API directly to talk to the key

00:27:52,929 --> 00:27:59,710
manager and that's a I think a pretty

00:27:56,590 --> 00:28:01,869
interesting use case and then finally a

00:27:59,710 --> 00:28:04,720
similar you know to all three of these

00:28:01,869 --> 00:28:06,879
are similar in that they're protecting

00:28:04,720 --> 00:28:09,220
data at rest but this one's a health

00:28:06,879 --> 00:28:10,989
care SAS vendor patient records

00:28:09,220 --> 00:28:13,509
literally patient records demographic

00:28:10,989 --> 00:28:15,309
information billing they run analytics

00:28:13,509 --> 00:28:17,619
for physicians and health plan

00:28:15,309 --> 00:28:19,539
administrators we help them meet their

00:28:17,619 --> 00:28:22,479
hip and their pci

00:28:19,539 --> 00:28:24,609
requirements by encrypting the data at

00:28:22,479 --> 00:28:26,799
rest and the key management their unique

00:28:24,609 --> 00:28:28,899
in that they've got a public-private

00:28:26,799 --> 00:28:30,940
hybrid model they run some information

00:28:28,899 --> 00:28:35,229
in a public cloud and other stuff they

00:28:30,940 --> 00:28:37,330
do behind their own firewall from a from

00:28:35,229 --> 00:28:38,649
a from a compliance perspective this is

00:28:37,330 --> 00:28:40,509
interesting and that they want to use

00:28:38,649 --> 00:28:42,729
the public cloud more because it's it's

00:28:40,509 --> 00:28:44,799
more economically feasible but they

00:28:42,729 --> 00:28:46,239
couldn't do that before without

00:28:44,799 --> 00:28:49,090
encrypting that data and that wasn't a

00:28:46,239 --> 00:28:51,759
solution that they had in place at the

00:28:49,090 --> 00:28:53,950
time so encrypting their data enabled

00:28:51,759 --> 00:28:56,080
them to to actually use a public cloud

00:28:53,950 --> 00:29:00,940
where they were previously not not able

00:28:56,080 --> 00:29:04,119
to yeah so I just wanted to and I'll

00:29:00,940 --> 00:29:07,210
make a brief but public you know thank

00:29:04,119 --> 00:29:09,220
you to Apache for each of these projects

00:29:07,210 --> 00:29:11,019
these are projects that that we use and

00:29:09,220 --> 00:29:13,389
we depend on that our customers use and

00:29:11,019 --> 00:29:15,429
depend on every day I've met some of the

00:29:13,389 --> 00:29:18,820
developers around here it's it's pretty

00:29:15,429 --> 00:29:22,179
cool but Cassandra of course Commons

00:29:18,820 --> 00:29:25,119
Hadoop HTTP maven tiles were I'm sure I

00:29:22,179 --> 00:29:27,279
missed some in here but a quick graph of

00:29:25,119 --> 00:29:30,009
our infrastructure turn these up pretty

00:29:27,279 --> 00:29:32,950
easily so we're headquartered in Austin

00:29:30,009 --> 00:29:34,359
Texas venture-funded corruption key

00:29:32,950 --> 00:29:37,809
management and we help our customers

00:29:34,359 --> 00:29:39,429
meet their compliance requirements I

00:29:37,809 --> 00:29:41,619
maintain a number of open source

00:29:39,429 --> 00:29:46,119
projects equipped FS just being one of

00:29:41,619 --> 00:29:49,989
them but fairly active in open source

00:29:46,119 --> 00:29:52,749
communities I'm a little bit new to the

00:29:49,989 --> 00:29:56,289
Apache world so I appreciate the open

00:29:52,749 --> 00:29:58,779
arms here but I've been around lenox and

00:29:56,289 --> 00:30:03,479
open source for a long time any

00:29:58,779 --> 00:30:03,479
questions yes sir

00:30:04,330 --> 00:30:11,419
yeah great question so we use asymmetric

00:30:07,279 --> 00:30:13,309
encryption actually gpg a new PG every

00:30:11,419 --> 00:30:15,669
message that's sent from a client to a

00:30:13,309 --> 00:30:18,169
server and a server to a client is

00:30:15,669 --> 00:30:20,630
signed and encrypted and inside of that

00:30:18,169 --> 00:30:23,690
sign encrypted packet is a JSON data

00:30:20,630 --> 00:30:25,549
blob key value pairs that you know the

00:30:23,690 --> 00:30:29,659
server uses to operate on the client

00:30:25,549 --> 00:30:30,740
uses top rate on that that public key

00:30:29,659 --> 00:30:33,950
encryption that asymmetric encryption

00:30:30,740 --> 00:30:35,750
means that it's encrypted which means no

00:30:33,950 --> 00:30:37,340
one else can read the data except for

00:30:35,750 --> 00:30:39,649
the intended recipient and it's also

00:30:37,340 --> 00:30:40,970
signed so that the server knows who it's

00:30:39,649 --> 00:30:43,610
talking to and the client knows that

00:30:40,970 --> 00:30:45,260
only the server it sent it to could see

00:30:43,610 --> 00:30:48,559
that now there's a second piece to that

00:30:45,260 --> 00:30:50,330
which is the there's a there's a

00:30:48,559 --> 00:30:52,399
sequence number there's a rotating token

00:30:50,330 --> 00:30:55,880
that once the client the server have

00:30:52,399 --> 00:30:58,580
established a trust they each increment

00:30:55,880 --> 00:31:01,370
they perform an increment type

00:30:58,580 --> 00:31:03,260
operations it's actually a hash sequence

00:31:01,370 --> 00:31:07,059
but if that ever gets out of sync if

00:31:03,260 --> 00:31:09,380
someone were to grab the the

00:31:07,059 --> 00:31:11,240
configuration data from a client try to

00:31:09,380 --> 00:31:12,590
move it somewhere else that would get

00:31:11,240 --> 00:31:14,149
out of sync immediately in the server

00:31:12,590 --> 00:31:17,720
would would be able to cease

00:31:14,149 --> 00:31:21,470
communication we also add have a layer

00:31:17,720 --> 00:31:24,529
where clients can have their public keys

00:31:21,470 --> 00:31:26,659
signed and authorized by the server and

00:31:24,529 --> 00:31:28,820
servers can be signed and authorized by

00:31:26,659 --> 00:31:32,210
clients and we respect signatures on

00:31:28,820 --> 00:31:36,769
those keys if a particular deposit

00:31:32,210 --> 00:31:38,419
requires a signed key that signature can

00:31:36,769 --> 00:31:40,510
be enforced and if that signatures ever

00:31:38,419 --> 00:31:43,700
revoked the server will respect that

00:31:40,510 --> 00:31:45,830
it's really built on top of the public

00:31:43,700 --> 00:31:48,679
key infrastructure we have a side

00:31:45,830 --> 00:31:52,010
project for a replacement for a new

00:31:48,679 --> 00:31:53,960
essentially a new public key server it's

00:31:52,010 --> 00:31:55,610
called hockey pockets and it's a that is

00:31:53,960 --> 00:31:57,919
an open source project that bezang works

00:31:55,610 --> 00:32:00,919
on we just released it earlier this year

00:31:57,919 --> 00:32:03,529
hockey puck is a replacement for SKS

00:32:00,919 --> 00:32:06,440
synchronizing key server similar to like

00:32:03,529 --> 00:32:10,480
a pgp MIT edu or any one of the public

00:32:06,440 --> 00:32:13,250
key servers this one is a much faster

00:32:10,480 --> 00:32:15,620
asynchronous key server than the current

00:32:13,250 --> 00:32:16,610
implementations I thought maybe was a

00:32:15,620 --> 00:32:20,090
little more than you were looking for

00:32:16,610 --> 00:32:30,740
did that answer your question okay what

00:32:20,090 --> 00:32:33,050
else what else yeah so that that is a

00:32:30,740 --> 00:32:35,930
piece of it would call it a session key

00:32:33,050 --> 00:32:38,090
and that ultimately is stored locally so

00:32:35,930 --> 00:32:41,690
that's yet another key to manage from

00:32:38,090 --> 00:32:43,850
this perspective it's a it's a cookie

00:32:41,690 --> 00:32:45,710
and it expires it doesn't it doesn't

00:32:43,850 --> 00:32:47,060
last forever you've got to

00:32:45,710 --> 00:32:49,070
re-authenticate the sequence number

00:32:47,060 --> 00:32:50,180
tries to keep it in sync fundamentally

00:32:49,070 --> 00:32:53,360
there's something that you've got to

00:32:50,180 --> 00:32:55,760
have that identifies you and the the

00:32:53,360 --> 00:32:57,560
goal is to store the big secrets the

00:32:55,760 --> 00:32:59,150
permanent ones the long-term ones on the

00:32:57,560 --> 00:33:00,860
server and then authenticate and

00:32:59,150 --> 00:33:04,910
retrieve them use them and discard them

00:33:00,860 --> 00:33:08,780
when you know when possible it's the

00:33:04,910 --> 00:33:11,170
best I can tell you Thanks any other

00:33:08,780 --> 00:33:11,170
questions

00:33:18,990 --> 00:33:26,210

YouTube URL: https://www.youtube.com/watch?v=7VqpA7mqg3E


