Title: DjangoCon 2020 | A Pythonic Full-Text Search - Paolo Melchiorre
Publication date: 2020-10-14
Playlist: DjangoCon Europe 2020 (Virtual)
Description: 
	DjangoCon Europe 2020 (Virtual)
September 18-19, 2020 - Bonus Talk

"A Pythonic Full-Text Search" by Paolo Melchiorre

Keeping in mind the pythonic principle that “simple is better than complex” we’ll see how to implement full-text search in a web service using only latest versions of Django and PostgreSQL and we’ll analyze the advantages compared to more complex solutions based on external services.
Captions: 
	00:00:03,760 --> 00:00:07,919
hello everyone

00:00:05,120 --> 00:00:10,240
this is my first prerecorded talk but

00:00:07,919 --> 00:00:12,719
i'm very happy to be here with you at

00:00:10,240 --> 00:00:14,880
changocon europe 2020.

00:00:12,719 --> 00:00:17,600
i want to tell all the organizers for

00:00:14,880 --> 00:00:22,000
making this online edition possible

00:00:17,600 --> 00:00:22,000
and now let's start with the torque

00:00:24,880 --> 00:00:28,560
if you are asking yourself what is a

00:00:26,800 --> 00:00:31,840
phytonic for the search

00:00:28,560 --> 00:00:31,840
i'll show you an example

00:00:32,320 --> 00:00:36,000
this is the search function in the

00:00:34,239 --> 00:00:38,239
dragon website

00:00:36,000 --> 00:00:39,840
how many of you have searched for

00:00:38,239 --> 00:00:42,399
information on it

00:00:39,840 --> 00:00:42,879
i did it a lot of time the search

00:00:42,399 --> 00:00:45,600
function

00:00:42,879 --> 00:00:46,719
is based only on postgres and django

00:00:45,600 --> 00:00:50,000
itself

00:00:46,719 --> 00:00:54,719
and i was the one who beat it

00:00:50,000 --> 00:00:54,719
so the next question is who am i

00:00:56,960 --> 00:01:01,280
i'm paulo mccurry and i'm the cto of

00:00:59,920 --> 00:01:04,640
20th

00:01:01,280 --> 00:01:08,080
platonic software company based in rome

00:01:04,640 --> 00:01:11,280
for which i work remotely

00:01:08,080 --> 00:01:14,560
i'm a software engineer and a long

00:01:11,280 --> 00:01:16,720
python backend developer

00:01:14,560 --> 00:01:20,799
after using django for a few years i

00:01:16,720 --> 00:01:20,799
became a contributor to the project

00:01:20,960 --> 00:01:24,000
and now i want to tell

00:01:24,240 --> 00:01:28,240
and now i want to try to explain a bit

00:01:26,159 --> 00:01:31,840
more about the title of this talk

00:01:28,240 --> 00:01:31,840
a pythonic full text search

00:01:33,040 --> 00:01:36,240
i think you can read the definition of

00:01:35,040 --> 00:01:39,439
platonic

00:01:36,240 --> 00:01:41,840
by entering import these in the python

00:01:39,439 --> 00:01:41,840
interpreter

00:01:42,960 --> 00:01:48,399
these are only the first principle of

00:01:45,280 --> 00:01:48,399
the xenopython

00:01:51,200 --> 00:01:54,640
the most important for me is the third

00:01:53,280 --> 00:01:58,320
one and i think it's

00:01:54,640 --> 00:01:58,320
also the most difficult to follow

00:02:00,880 --> 00:02:05,680
photo search refer to the technique for

00:02:04,000 --> 00:02:09,840
searching a computer store

00:02:05,680 --> 00:02:09,840
document in a full text data database

00:02:10,399 --> 00:02:16,239
there are a lot of search engines that

00:02:12,640 --> 00:02:16,239
already provide a full text search

00:02:19,440 --> 00:02:22,879
the most popular search engine library

00:02:21,680 --> 00:02:25,760
is apache

00:02:22,879 --> 00:02:28,080
lucine an open source software written

00:02:25,760 --> 00:02:30,640
in java

00:02:28,080 --> 00:02:32,160
based on lucy there are two very popular

00:02:30,640 --> 00:02:36,319
search engine

00:02:32,160 --> 00:02:38,080
that i used in the past solar

00:02:36,319 --> 00:02:39,360
which is part of the apache software

00:02:38,080 --> 00:02:42,400
foundation

00:02:39,360 --> 00:02:45,040
and elasticsearch a product of the

00:02:42,400 --> 00:02:47,280
elastic company

00:02:45,040 --> 00:02:48,480
the last big project where i used one of

00:02:47,280 --> 00:02:51,680
them is

00:02:48,480 --> 00:02:51,680
docs italian

00:02:53,920 --> 00:02:57,519
docs italia is an italian government

00:02:56,319 --> 00:03:00,640
website

00:02:57,519 --> 00:03:02,800
where to find public documents

00:03:00,640 --> 00:03:05,840
i worked in this project to improve the

00:03:02,800 --> 00:03:05,840
search function

00:03:08,159 --> 00:03:13,040
under the hood docxitania is a fork of

00:03:11,360 --> 00:03:15,840
the open source project

00:03:13,040 --> 00:03:15,840
read the docs

00:03:16,239 --> 00:03:21,280
so has the original project is a

00:03:18,720 --> 00:03:25,360
jungle-based platform

00:03:21,280 --> 00:03:28,560
and it required a lot of python packages

00:03:25,360 --> 00:03:33,120
to access the elasticsearch instance

00:03:28,560 --> 00:03:35,440
asking for results

00:03:33,120 --> 00:03:36,400
the search function is working very well

00:03:35,440 --> 00:03:40,400
but we can

00:03:36,400 --> 00:03:40,400
consider this a simple solution

00:03:43,120 --> 00:03:47,280
we can say various things about external

00:03:45,440 --> 00:03:50,640
engines

00:03:47,280 --> 00:03:53,120
on the good side they are very popular

00:03:50,640 --> 00:03:55,200
they have a lot of features and you can

00:03:53,120 --> 00:03:59,200
find a lot of online resources

00:03:55,200 --> 00:04:01,840
about them on the bedside

00:03:59,200 --> 00:04:03,439
you always need a driver to use them

00:04:01,840 --> 00:04:05,360
from django

00:04:03,439 --> 00:04:07,760
you have to use their specific query

00:04:05,360 --> 00:04:11,200
language and it's common to have

00:04:07,760 --> 00:04:11,200
synchronization problems

00:04:12,560 --> 00:04:19,199
oh no this is embarrassing joke aside

00:04:16,799 --> 00:04:20,160
this is something similar or what

00:04:19,199 --> 00:04:22,880
happened

00:04:20,160 --> 00:04:25,520
in an e-commerce website when you find a

00:04:22,880 --> 00:04:28,160
product in the search results

00:04:25,520 --> 00:04:30,639
but it's not available anymore when you

00:04:28,160 --> 00:04:33,199
click on it

00:04:30,639 --> 00:04:34,080
this happen because search results are

00:04:33,199 --> 00:04:37,440
feed from

00:04:34,080 --> 00:04:43,600
the search engine which is not already

00:04:37,440 --> 00:04:46,560
synchronized with database

00:04:43,600 --> 00:04:48,320
so why don't we search directly on the

00:04:46,560 --> 00:04:53,360
database

00:04:48,320 --> 00:04:53,360
maybe a big one and with a lasting

00:04:54,840 --> 00:04:59,919
memory

00:04:57,120 --> 00:05:02,560
postgres is a very popular a long-lived

00:04:59,919 --> 00:05:02,560
database

00:05:03,039 --> 00:05:09,600
it added full text search years ago

00:05:06,320 --> 00:05:10,639
with specific data types and special

00:05:09,600 --> 00:05:14,240
indexes

00:05:10,639 --> 00:05:18,240
and since then many useful new features

00:05:14,240 --> 00:05:21,520
have been added every year

00:05:18,240 --> 00:05:21,520
until the last version

00:05:23,680 --> 00:05:26,880
the main concept of vortex search in

00:05:25,919 --> 00:05:29,840
postgres

00:05:26,880 --> 00:05:29,840
is documents

00:05:30,240 --> 00:05:35,360
a document is the unit of searching in a

00:05:33,199 --> 00:05:39,120
full text system

00:05:35,360 --> 00:05:43,280
for example a magazine article

00:05:39,120 --> 00:05:43,280
or the union of its parts

00:05:43,759 --> 00:05:49,840
the title the abstract the body text

00:05:47,039 --> 00:05:49,840
and so on

00:05:51,360 --> 00:05:55,600
implementing a web search function

00:05:53,840 --> 00:05:58,800
directly on the database

00:05:55,600 --> 00:06:01,919
can be a very low level task

00:05:58,800 --> 00:06:05,360
to do this we can use a web framework

00:06:01,919 --> 00:06:09,120
maybe one of the best and you already

00:06:05,360 --> 00:06:09,120
know which one

00:06:10,080 --> 00:06:14,560
django had it for the search a few years

00:06:12,800 --> 00:06:17,919
ago

00:06:14,560 --> 00:06:21,360
uh in the jungle country

00:06:17,919 --> 00:06:25,360
oscar smaller with specific

00:06:21,360 --> 00:06:28,479
fields expression

00:06:25,360 --> 00:06:31,199
and function since then

00:06:28,479 --> 00:06:32,880
many new useful features have been added

00:06:31,199 --> 00:06:36,720
every year

00:06:32,880 --> 00:06:36,720
until the latest version

00:06:39,840 --> 00:06:44,960
the django documentation define a

00:06:42,560 --> 00:06:49,039
document based search

00:06:44,960 --> 00:06:53,199
as a folder search with advantages

00:06:49,039 --> 00:06:57,520
feature weighting categorization

00:06:53,199 --> 00:06:59,919
highlighting multiple language

00:06:57,520 --> 00:07:03,840
and we can implement all of them with

00:06:59,919 --> 00:07:03,840
django itself

00:07:04,639 --> 00:07:09,280
but to better understand how the full

00:07:06,880 --> 00:07:11,759
text search in django works

00:07:09,280 --> 00:07:12,319
we're going to see how to perform some

00:07:11,759 --> 00:07:16,560
queries

00:07:12,319 --> 00:07:19,919
from the basic one to the more complex

00:07:16,560 --> 00:07:23,120
we can perform well also with

00:07:19,919 --> 00:07:23,120
big amount of data

00:07:27,280 --> 00:07:33,440
we can use the blog models as defined in

00:07:30,080 --> 00:07:33,440
the jungle documentation

00:07:33,520 --> 00:07:36,880
here we have three classes with few

00:07:35,759 --> 00:07:40,080
fields

00:07:36,880 --> 00:07:44,240
a blog an author

00:07:40,080 --> 00:07:47,280
and an entry connected with both of them

00:07:44,240 --> 00:07:47,280
with our foreign key

00:07:50,240 --> 00:07:57,440
we can perform basic queries using

00:07:53,360 --> 00:07:58,080
field lookup for example we can search

00:07:57,440 --> 00:08:02,160
an outdoor

00:07:58,080 --> 00:08:02,160
using part of his name

00:08:07,280 --> 00:08:13,840
performing a case insensitive query we

00:08:10,240 --> 00:08:13,840
can have more results

00:08:16,879 --> 00:08:24,240
to find words with accented letters

00:08:20,000 --> 00:08:24,240
we have to activate the an accent

00:08:24,840 --> 00:08:30,240
extension

00:08:26,400 --> 00:08:33,200
after that we can search an outer

00:08:30,240 --> 00:08:34,080
also if we don't know exactly all the

00:08:33,200 --> 00:08:41,839
accented

00:08:34,080 --> 00:08:41,839
letters on its name

00:08:43,680 --> 00:08:48,399
to every results also if you don't

00:08:47,279 --> 00:08:51,360
remember

00:08:48,399 --> 00:08:55,839
well the elders name we have to activate

00:08:51,360 --> 00:08:55,839
that free gram extension

00:08:56,800 --> 00:09:00,959
searching for an outdoor we can have

00:08:58,800 --> 00:09:09,680
results with similar

00:09:00,959 --> 00:09:13,120
but not identical name

00:09:09,680 --> 00:09:14,959
to use the above feature we have to add

00:09:13,120 --> 00:09:19,360
the postgres module

00:09:14,959 --> 00:09:23,040
in the install adapts in settings

00:09:19,360 --> 00:09:23,600
after that we will be also able to

00:09:23,040 --> 00:09:27,760
perform

00:09:23,600 --> 00:09:30,880
a vortex search on a single field

00:09:27,760 --> 00:09:32,880
for example we can search for a word in

00:09:30,880 --> 00:09:37,839
the plural form

00:09:32,880 --> 00:09:37,839
and have results in the singular form

00:09:39,760 --> 00:09:44,480
to search a text in more than one field

00:09:42,640 --> 00:09:46,720
we have to use the search vector

00:09:44,480 --> 00:09:50,480
function

00:09:46,720 --> 00:09:51,360
we can define our documents as the union

00:09:50,480 --> 00:09:57,200
of

00:09:51,360 --> 00:09:57,200
the entry body and the related blog name

00:09:57,440 --> 00:10:05,839
after that we can search for a word and

00:09:59,760 --> 00:10:05,839
have more accurate results

00:10:06,880 --> 00:10:14,079
to search using more complex text we

00:10:10,000 --> 00:10:17,440
have to use the search query expression

00:10:14,079 --> 00:10:20,079
we can also use command search syntax

00:10:17,440 --> 00:10:22,800
directly in the query text using the web

00:10:20,079 --> 00:10:22,800
search type

00:10:23,680 --> 00:10:28,000
after that for example we can search for

00:10:27,200 --> 00:10:31,200
two words

00:10:28,000 --> 00:10:33,839
at the same time having potentially more

00:10:31,200 --> 00:10:33,839
results

00:10:36,079 --> 00:10:39,519
to perform a full text search in a

00:10:37,839 --> 00:10:41,519
specific language

00:10:39,519 --> 00:10:43,600
we have to use the search config

00:10:41,519 --> 00:10:46,079
expression

00:10:43,600 --> 00:10:46,800
we can specify the language in both the

00:10:46,079 --> 00:10:49,920
document

00:10:46,800 --> 00:10:53,839
and the query after that

00:10:49,920 --> 00:10:53,839
we can have more precise results than

00:10:58,839 --> 00:11:02,880
before

00:11:00,000 --> 00:11:03,360
list relevant results first we have to

00:11:02,880 --> 00:11:06,720
use

00:11:03,360 --> 00:11:09,200
search rank function

00:11:06,720 --> 00:11:10,640
based on the query text and the document

00:11:09,200 --> 00:11:14,320
django with accurate

00:11:10,640 --> 00:11:17,279
and rank

00:11:14,320 --> 00:11:19,920
we can order and filter our result using

00:11:17,279 --> 00:11:19,920
this rank

00:11:24,720 --> 00:11:28,240
to perform a fine-grained full-text

00:11:27,200 --> 00:11:30,880
search

00:11:28,240 --> 00:11:33,519
we have to use the search vector weights

00:11:30,880 --> 00:11:33,519
attributes

00:11:34,000 --> 00:11:38,079
for example we can decide that words in

00:11:36,959 --> 00:11:43,839
the headline

00:11:38,079 --> 00:11:43,839
are more relevant than in the body text

00:11:44,640 --> 00:11:48,880
after that we will see a new rank in our

00:11:47,680 --> 00:11:53,120
result

00:11:48,880 --> 00:11:53,120
also performing the same search than

00:11:54,839 --> 00:12:00,240
before

00:11:57,760 --> 00:12:03,519
to highlight results we have to use the

00:12:00,240 --> 00:12:03,519
searched line function

00:12:03,920 --> 00:12:10,639
we have to specify the highlighted field

00:12:07,519 --> 00:12:14,800
and after that we will see

00:12:10,639 --> 00:12:14,800
results with tags on it

00:12:18,639 --> 00:12:21,680
to speed up the search and simplify the

00:12:20,959 --> 00:12:25,839
queries

00:12:21,680 --> 00:12:25,839
we have to use the search vector field

00:12:26,560 --> 00:12:33,839
we have to manually update our search

00:12:30,079 --> 00:12:33,839
before running a query

00:12:35,519 --> 00:12:39,279
after that we will have the same results

00:12:38,320 --> 00:12:42,639
as before

00:12:39,279 --> 00:12:42,639
but way more quickly

00:12:45,920 --> 00:12:49,920
i started using the footer search in

00:12:47,920 --> 00:12:52,480
django 1.10

00:12:49,920 --> 00:12:56,560
and i searched fragrantly the django

00:12:52,480 --> 00:12:59,120
documentation for information on it

00:12:56,560 --> 00:13:01,440
after a while i started asking myself

00:12:59,120 --> 00:13:07,440
how was implemented the search function

00:13:01,440 --> 00:13:10,079
in the jungle side itself

00:13:07,440 --> 00:13:12,959
i noticed that the search was performed

00:13:10,079 --> 00:13:12,959
early in english

00:13:13,279 --> 00:13:19,360
and in some cases there was tag in

00:13:16,800 --> 00:13:21,839
results

00:13:19,360 --> 00:13:23,600
i studied the jungle besides source code

00:13:21,839 --> 00:13:25,839
and i found out

00:13:23,600 --> 00:13:28,000
that the documentation was generated

00:13:25,839 --> 00:13:31,839
with sphinx

00:13:28,000 --> 00:13:34,800
all the data was stored on postgres

00:13:31,839 --> 00:13:37,920
but searches was performed in an

00:13:34,800 --> 00:13:40,639
external search engine

00:13:37,920 --> 00:13:43,920
so i proposed to fix that on the django

00:13:40,639 --> 00:13:43,920
developer mailing list

00:13:45,519 --> 00:13:49,600
a lot of developers share different

00:13:47,839 --> 00:13:53,440
opinions about the proposed

00:13:49,600 --> 00:13:56,160
updates the dapps were

00:13:53,440 --> 00:13:58,959
the amount of work to be done the

00:13:56,160 --> 00:14:00,839
equivalence of search feature

00:13:58,959 --> 00:14:03,199
and the increase of workload on the

00:14:00,839 --> 00:14:06,320
database

00:14:03,199 --> 00:14:09,440
the save things were less maintenance

00:14:06,320 --> 00:14:16,560
a lighter setup and the exclusive

00:14:09,440 --> 00:14:20,000
use of django on its own website

00:14:16,560 --> 00:14:24,240
so i organized a django sprint

00:14:20,000 --> 00:14:27,120
during the euro python 2017 in rimini

00:14:24,240 --> 00:14:31,279
and some developers join me to work on

00:14:27,120 --> 00:14:34,240
the search updates

00:14:31,279 --> 00:14:35,279
in a spring day we created a draft of a

00:14:34,240 --> 00:14:38,480
possible

00:14:35,279 --> 00:14:40,959
based footage search but we also

00:14:38,480 --> 00:14:42,079
spent a lot of time trying to set up the

00:14:40,959 --> 00:14:45,519
django website

00:14:42,079 --> 00:14:48,000
on our pc to replicate the elasticsearch

00:14:45,519 --> 00:14:48,000
function

00:14:50,880 --> 00:14:54,959
in the mods following i wrote an

00:14:53,519 --> 00:14:57,199
official pull request

00:14:54,959 --> 00:14:59,680
with a complete version of the full text

00:14:57,199 --> 00:15:02,000
search for django

00:14:59,680 --> 00:15:03,199
i received a lot of suggestions from

00:15:02,000 --> 00:15:05,920
other developers

00:15:03,199 --> 00:15:07,040
and maintenance and after a lot of

00:15:05,920 --> 00:15:13,839
comments

00:15:07,040 --> 00:15:13,839
and comments they merged my pull request

00:15:14,240 --> 00:15:18,880
so today the django website full text

00:15:16,480 --> 00:15:18,880
search

00:15:19,360 --> 00:15:27,920
is multilingual is based on postgres

00:15:24,560 --> 00:15:31,199
and return clear results

00:15:27,920 --> 00:15:34,399
is a low maintenance solution and easier

00:15:31,199 --> 00:15:34,399
to set up than before

00:15:37,440 --> 00:15:41,120
as already saved new full-text social

00:15:40,160 --> 00:15:44,000
features

00:15:41,120 --> 00:15:46,880
are released every day every year sorry

00:15:44,000 --> 00:15:49,519
in both postgres and django

00:15:46,880 --> 00:15:50,800
and i hope to add them on the django

00:15:49,519 --> 00:15:54,240
website search

00:15:50,800 --> 00:15:58,959
like spelling support

00:15:54,240 --> 00:16:02,480
search suggestion highlighted results

00:15:58,959 --> 00:16:09,839
web search syntax and search

00:16:02,480 --> 00:16:09,839
statistics and i'm working on it

00:16:10,560 --> 00:16:15,440
i want to share some useful tips with

00:16:13,279 --> 00:16:17,360
you

00:16:15,440 --> 00:16:20,720
read the documentation in the jungle

00:16:17,360 --> 00:16:25,040
website it's full of information

00:16:20,720 --> 00:16:25,040
about all the full text search features

00:16:26,000 --> 00:16:30,320
read the details about full text search

00:16:28,240 --> 00:16:32,720
in the postgres website

00:16:30,320 --> 00:16:33,440
it helps you to understand how things

00:16:32,720 --> 00:16:36,720
work

00:16:33,440 --> 00:16:40,160
at lower level read

00:16:36,720 --> 00:16:41,839
the source code of bot project in github

00:16:40,160 --> 00:16:45,040
because there is something you can learn

00:16:41,839 --> 00:16:45,040
only from the code

00:16:45,839 --> 00:16:51,120
search for question on stack overflow

00:16:48,480 --> 00:16:53,519
but try to answer them

00:16:51,120 --> 00:16:55,360
and you will go to the next level in

00:16:53,519 --> 00:16:57,920
using full text search with january

00:16:55,360 --> 00:16:57,920
postgres

00:16:58,959 --> 00:17:02,399
last but not least you can also study

00:17:01,199 --> 00:17:04,400
this presentation

00:17:02,399 --> 00:17:07,439
because it is released with a creative

00:17:04,400 --> 00:17:07,439
commons license

00:17:09,600 --> 00:17:14,160
i hope i have been able to show you how

00:17:11,839 --> 00:17:15,199
it's possible to develop a more complete

00:17:14,160 --> 00:17:18,400
full text search

00:17:15,199 --> 00:17:21,280
using less software in the stack

00:17:18,400 --> 00:17:23,360
doing more with less is the motto of 20

00:17:21,280 --> 00:17:27,439
tab

00:17:23,360 --> 00:17:27,439
is our version of pytonic

00:17:28,640 --> 00:17:32,000
you can find more about our open source

00:17:31,360 --> 00:17:34,559
project

00:17:32,000 --> 00:17:37,039
and our platonic works using this

00:17:34,559 --> 00:17:37,039
context

00:17:40,640 --> 00:17:44,400
to find out more about my works with

00:17:43,280 --> 00:17:47,840
python and jango

00:17:44,400 --> 00:17:47,840
use all my contacts

00:17:49,039 --> 00:17:53,039
using this qr code you can download this

00:17:52,160 --> 00:17:57,440
presentation

00:17:53,039 --> 00:18:01,840
on my website thanks again for having me

00:17:57,440 --> 00:18:01,840
enjoy the next talk in the conference

00:18:09,120 --> 00:18:13,440
thank you for watching my recorded

00:18:10,799 --> 00:18:15,200
presentation despite it being the first

00:18:13,440 --> 00:18:17,360
i ever recorded

00:18:15,200 --> 00:18:18,320
during the conference i'm still online

00:18:17,360 --> 00:18:20,720
and available

00:18:18,320 --> 00:18:23,120
to answer your questions about footage

00:18:20,720 --> 00:18:29,840
search in django with postgres

00:18:23,120 --> 00:18:31,919
so see you

00:18:29,840 --> 00:18:31,919

YouTube URL: https://www.youtube.com/watch?v=kOKwEDHeBX4


