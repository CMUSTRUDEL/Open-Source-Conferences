Title: DjangoCon 2020 | C is for Cookie 🍪 - Russell Keith-Magee
Publication date: 2020-09-30
Playlist: DjangoCon Europe 2020 (Virtual)
Description: 
	DjangoCon Europe 2020 (Virtual)
September 18, 2020 - 09h55 (GMT+1)

“C is for Cookie” by Russell Keith-Magee 

"This site uses cookies"... no kidding! Every site uses cookies! Cookies are a much maligned, but essential part of the web experience. But what actually *are* cookies? Why are they needed? How do they work? How are they used? How are they misused? And how have they changed as the modern web as evolved?
Captions: 
	00:00:06,080 --> 00:00:09,599
well hello internet

00:00:07,359 --> 00:00:11,679
uh my name is russell keith mcgee i am

00:00:09,599 --> 00:00:13,599
speaking to you today from wajok noongar

00:00:11,679 --> 00:00:15,440
budja otherwise known as perth western

00:00:13,599 --> 00:00:17,119
australia and i'd like to begin by

00:00:15,440 --> 00:00:18,720
recognizing the wanjukunga as the

00:00:17,119 --> 00:00:20,160
traditional owners of the land where i'm

00:00:18,720 --> 00:00:21,680
presenting today

00:00:20,160 --> 00:00:23,920
and to pay my respects to their elders

00:00:21,680 --> 00:00:26,080
past and present

00:00:23,920 --> 00:00:28,320
i have been a long-term fixture at

00:00:26,080 --> 00:00:30,400
djangocon i joined the django core team

00:00:28,320 --> 00:00:32,079
way back in 2006.

00:00:30,400 --> 00:00:34,000
now at one level there have been a lot

00:00:32,079 --> 00:00:34,719
of changes to the web over those 14

00:00:34,000 --> 00:00:37,040
years

00:00:34,719 --> 00:00:38,719
we've seen websites become more dynamic

00:00:37,040 --> 00:00:40,239
rise in the importance of javascript in

00:00:38,719 --> 00:00:42,399
front end development

00:00:40,239 --> 00:00:43,760
front-end frameworks have risen and

00:00:42,399 --> 00:00:44,640
fallen we've seen the emergence of

00:00:43,760 --> 00:00:46,559
serverless

00:00:44,640 --> 00:00:48,960
in short the web of today doesn't look a

00:00:46,559 --> 00:00:51,600
lot like the web of 14 years ago

00:00:48,960 --> 00:00:52,399
but on another level there are some

00:00:51,600 --> 00:00:54,719
things that

00:00:52,399 --> 00:00:56,079
really haven't changed at all and i'd

00:00:54,719 --> 00:00:56,960
like to talk about one of those things

00:00:56,079 --> 00:01:00,239
today

00:00:56,960 --> 00:01:02,320
cookies cookies pre-date django by

00:01:00,239 --> 00:01:03,879
over 10 years and although there have

00:01:02,320 --> 00:01:06,400
been some changes over the years

00:01:03,879 --> 00:01:08,640
fundamentally the cookies that existed

00:01:06,400 --> 00:01:11,040
10 years ago or even 25 years ago

00:01:08,640 --> 00:01:13,439
are the same cookies that we have today

00:01:11,040 --> 00:01:15,040
that said the changes that have occurred

00:01:13,439 --> 00:01:17,119
are very important and there are some

00:01:15,040 --> 00:01:18,799
more changes on the horizon that as

00:01:17,119 --> 00:01:20,240
practitioners of web technology we

00:01:18,799 --> 00:01:22,960
should be aware of

00:01:20,240 --> 00:01:24,320
so today i'm going to talk through the

00:01:22,960 --> 00:01:26,000
history of cookies

00:01:24,320 --> 00:01:27,680
dive deep into what a cookie is how

00:01:26,000 --> 00:01:30,960
they're used how they're abused

00:01:27,680 --> 00:01:31,680
and what the future holds so what is a

00:01:30,960 --> 00:01:34,400
cookie well

00:01:31,680 --> 00:01:36,320
at its core a cookie is a neat hack

00:01:34,400 --> 00:01:37,280
layered over the original design of the

00:01:36,320 --> 00:01:39,280
web

00:01:37,280 --> 00:01:40,320
the web that tim berners-lee developed

00:01:39,280 --> 00:01:42,240
in 1989

00:01:40,320 --> 00:01:43,920
is a very different web to the one we

00:01:42,240 --> 00:01:44,880
have today berners-lee was working at

00:01:43,920 --> 00:01:46,479
cern

00:01:44,880 --> 00:01:48,399
where he was working on a document

00:01:46,479 --> 00:01:50,320
sharing platform it was a way for one

00:01:48,399 --> 00:01:52,560
researcher an academic or academic to

00:01:50,320 --> 00:01:55,280
share their research with another

00:01:52,560 --> 00:01:56,240
researcher and academic back then a

00:01:55,280 --> 00:01:58,960
document

00:01:56,240 --> 00:02:00,479
was a single standalone html page marked

00:01:58,960 --> 00:02:00,960
up with headings and paragraphs and so

00:02:00,479 --> 00:02:02,719
on

00:02:00,960 --> 00:02:04,159
the really revolutionary thing that tim

00:02:02,719 --> 00:02:05,680
berners-lee added

00:02:04,159 --> 00:02:07,600
uh was that anyone in the world could

00:02:05,680 --> 00:02:08,000
see the document any document could link

00:02:07,600 --> 00:02:09,920
to any

00:02:08,000 --> 00:02:11,440
other document either on your own server

00:02:09,920 --> 00:02:12,959
or on someone else's server

00:02:11,440 --> 00:02:15,360
and those documents could link to other

00:02:12,959 --> 00:02:18,879
documents building this world wide web

00:02:15,360 --> 00:02:21,599
of documents but every web request was

00:02:18,879 --> 00:02:22,319
completely stateless you ask give me the

00:02:21,599 --> 00:02:25,760
document

00:02:22,319 --> 00:02:28,080
research 2019 emerging pandemic.html

00:02:25,760 --> 00:02:29,360
and it will return a single document and

00:02:28,080 --> 00:02:30,000
if you followed a link to another

00:02:29,360 --> 00:02:31,840
document

00:02:30,000 --> 00:02:34,239
that request was completely detached

00:02:31,840 --> 00:02:36,560
from the first request

00:02:34,239 --> 00:02:37,760
but once you move beyond displaying

00:02:36,560 --> 00:02:41,599
static documents

00:02:37,760 --> 00:02:43,280
you need state now let's imagine i'm

00:02:41,599 --> 00:02:44,959
visiting a hardware store where all of

00:02:43,280 --> 00:02:45,599
the interactions are completely

00:02:44,959 --> 00:02:47,519
stateless

00:02:45,599 --> 00:02:48,879
i walk up to the sales assistant the

00:02:47,519 --> 00:02:52,000
server if you will

00:02:48,879 --> 00:02:53,599
and i say i'd like to buy a shovel

00:02:52,000 --> 00:02:55,440
and the sales assistant turns to b and

00:02:53,599 --> 00:02:58,000
says ah they're over in aisle three

00:02:55,440 --> 00:02:59,360
and so i wander over to while three and

00:02:58,000 --> 00:03:00,640
i don't find what i want to know so i

00:02:59,360 --> 00:03:02,080
come back to the server and i say

00:03:00,640 --> 00:03:04,159
i was hoping for something with a longer

00:03:02,080 --> 00:03:04,879
handle and the sales assistant comes to

00:03:04,159 --> 00:03:07,040
me and says

00:03:04,879 --> 00:03:09,200
a what with a longer handle and i say a

00:03:07,040 --> 00:03:11,040
shovel and the sustainable system says

00:03:09,200 --> 00:03:13,120
well they're over in aisle three

00:03:11,040 --> 00:03:14,640
at which point my table flip in

00:03:13,120 --> 00:03:16,879
frustration

00:03:14,640 --> 00:03:18,000
the moral of this story is that complex

00:03:16,879 --> 00:03:20,560
interactions over

00:03:18,000 --> 00:03:22,159
time require preservation of state when

00:03:20,560 --> 00:03:23,840
i asked that second question

00:03:22,159 --> 00:03:25,840
the sales assistant didn't have the

00:03:23,840 --> 00:03:26,319
context of the first question that i'd

00:03:25,840 --> 00:03:28,080
asked

00:03:26,319 --> 00:03:29,840
so they weren't able to provide a useful

00:03:28,080 --> 00:03:31,040
answer

00:03:29,840 --> 00:03:33,040
now it's important to remember though

00:03:31,040 --> 00:03:34,959
that the web stateless nature is also

00:03:33,040 --> 00:03:37,200
one of its greatest strengths

00:03:34,959 --> 00:03:39,280
because each request is stateless every

00:03:37,200 --> 00:03:41,440
request can be handled independently and

00:03:39,280 --> 00:03:43,840
that is incredibly powerful

00:03:41,440 --> 00:03:45,440
for web load balancing going back to our

00:03:43,840 --> 00:03:47,280
original shops as shoppers in the shop

00:03:45,440 --> 00:03:48,000
assistant example imagine a hardware

00:03:47,280 --> 00:03:50,400
store

00:03:48,000 --> 00:03:52,159
only had one shop assistant and

00:03:50,400 --> 00:03:53,760
thousands of customers appear

00:03:52,159 --> 00:03:55,200
most customers are going to be waiting a

00:03:53,760 --> 00:03:55,760
long time to get a response to their

00:03:55,200 --> 00:03:57,680
question

00:03:55,760 --> 00:03:59,840
but because this is a stateless system

00:03:57,680 --> 00:04:02,400
we can fix the problem by adding more

00:03:59,840 --> 00:04:03,760
sales assistance by adding more servers

00:04:02,400 --> 00:04:05,200
now that doesn't improve the quality of

00:04:03,760 --> 00:04:06,959
the answers but it does mean we can

00:04:05,200 --> 00:04:09,040
ensure that everybody is satisfied in a

00:04:06,959 --> 00:04:11,280
timely fashion we have a built-in

00:04:09,040 --> 00:04:12,720
scaling mechanism no matter how many

00:04:11,280 --> 00:04:14,959
people come to the store

00:04:12,720 --> 00:04:16,799
so we don't want to lose that benefit if

00:04:14,959 --> 00:04:18,479
we made the store stateful every

00:04:16,799 --> 00:04:20,239
customer who had a question would need

00:04:18,479 --> 00:04:21,040
to go back to exactly the same sales

00:04:20,239 --> 00:04:22,639
assistant

00:04:21,040 --> 00:04:24,560
and you'd and very easily end up with

00:04:22,639 --> 00:04:26,080
one sales assistant being flooded

00:04:24,560 --> 00:04:27,759
uh with follow-up queries while others

00:04:26,080 --> 00:04:30,320
sat around idle

00:04:27,759 --> 00:04:31,680
so what we need to do really is to make

00:04:30,320 --> 00:04:32,639
our shop assistant a little bit more

00:04:31,680 --> 00:04:35,040
helpful

00:04:32,639 --> 00:04:36,400
so how do we do that well one approach

00:04:35,040 --> 00:04:38,000
and of the approach that was actually

00:04:36,400 --> 00:04:39,919
first done before the time of cookies

00:04:38,000 --> 00:04:40,560
was to use a token to represent the

00:04:39,919 --> 00:04:42,800
person

00:04:40,560 --> 00:04:43,600
and encode that token into the request

00:04:42,800 --> 00:04:45,759
itself

00:04:43,600 --> 00:04:47,440
and store the state for each person

00:04:45,759 --> 00:04:48,960
keyed to that token

00:04:47,440 --> 00:04:50,960
let's go back to our hardware store the

00:04:48,960 --> 00:04:52,639
exchange now looks something like this

00:04:50,960 --> 00:04:54,400
i walk up and i walk up to the server

00:04:52,639 --> 00:04:55,520
and i say hi i'm russell and i'd like to

00:04:54,400 --> 00:04:57,120
buy a shovel

00:04:55,520 --> 00:04:59,040
sales assistant looks up the history

00:04:57,120 --> 00:05:00,720
finds nothing for russell

00:04:59,040 --> 00:05:02,240
in his records and says ah go over to

00:05:00,720 --> 00:05:04,000
aisle three

00:05:02,240 --> 00:05:05,680
i then walk over to aisle three discover

00:05:04,000 --> 00:05:07,759
that there's no shovel there that i want

00:05:05,680 --> 00:05:09,440
i come back to the server and say hi i'm

00:05:07,759 --> 00:05:10,800
russell i was hoping for something with

00:05:09,440 --> 00:05:12,720
a longer handle

00:05:10,800 --> 00:05:14,320
the sales assistant can now look up the

00:05:12,720 --> 00:05:16,320
history associated with

00:05:14,320 --> 00:05:18,080
russell find that i've previously been

00:05:16,320 --> 00:05:19,600
asked about asking about shovels and say

00:05:18,080 --> 00:05:20,960
ah okay you want to go over to aisle

00:05:19,600 --> 00:05:22,639
seven then

00:05:20,960 --> 00:05:25,360
everything you know every request in

00:05:22,639 --> 00:05:27,440
this interaction also includes a token

00:05:25,360 --> 00:05:28,800
that identifies me as the person

00:05:27,440 --> 00:05:30,240
making the request and that provides

00:05:28,800 --> 00:05:32,160
something that the sales assistant or

00:05:30,240 --> 00:05:35,280
the server can use to identify me

00:05:32,160 --> 00:05:37,840
and dust my historical requests

00:05:35,280 --> 00:05:40,000
more importantly it allows any sales

00:05:37,840 --> 00:05:41,680
assistant to satisfy the second request

00:05:40,000 --> 00:05:43,440
there's nothing about this request that

00:05:41,680 --> 00:05:44,080
is tied to the sales assistant who

00:05:43,440 --> 00:05:47,280
served me

00:05:44,080 --> 00:05:48,960
it's tied to my token as a user

00:05:47,280 --> 00:05:51,199
now since this is the web the obvious

00:05:48,960 --> 00:05:52,880
place to put this token is in the url

00:05:51,199 --> 00:05:54,720
every request contains a little bit of

00:05:52,880 --> 00:05:56,160
content that identifies the state

00:05:54,720 --> 00:05:58,400
in this case the person making the

00:05:56,160 --> 00:06:00,319
request customer equals russell

00:05:58,400 --> 00:06:01,680
however if you do this the token being

00:06:00,319 --> 00:06:03,919
passed around to identify

00:06:01,680 --> 00:06:05,600
me is public there's no difference

00:06:03,919 --> 00:06:07,600
between me making a request with

00:06:05,600 --> 00:06:09,600
customer equals russell as an argument

00:06:07,600 --> 00:06:11,600
and an attacker making a request with

00:06:09,600 --> 00:06:13,280
customer equals russell as an argument

00:06:11,600 --> 00:06:14,800
anyone looking over my shoulder can see

00:06:13,280 --> 00:06:15,680
that token and they can start making

00:06:14,800 --> 00:06:17,680
requests

00:06:15,680 --> 00:06:19,680
with the same token it doesn't even

00:06:17,680 --> 00:06:21,600
necessarily have to be malicious i could

00:06:19,680 --> 00:06:23,440
copy the url from my browser send it to

00:06:21,600 --> 00:06:25,600
my friend and now my friend is making

00:06:23,440 --> 00:06:26,960
requests as if they were me

00:06:25,600 --> 00:06:28,560
now in this case you know who cares

00:06:26,960 --> 00:06:28,880
we're looking at long-handled shovels

00:06:28,560 --> 00:06:30,319
but

00:06:28,880 --> 00:06:31,840
imagine i was looking at my medical

00:06:30,319 --> 00:06:32,400
records now my attacker can see

00:06:31,840 --> 00:06:34,400
everything

00:06:32,400 --> 00:06:36,319
see everything about my history or if i

00:06:34,400 --> 00:06:38,400
was buying a limited edition

00:06:36,319 --> 00:06:40,160
gold-plated shovel the attacker could

00:06:38,400 --> 00:06:41,759
get in before me and buy that shovel

00:06:40,160 --> 00:06:45,280
that i had previously been looking at my

00:06:41,759 --> 00:06:48,319
session can be hijacked by someone else

00:06:45,280 --> 00:06:50,720
so the concept of a token works but

00:06:48,319 --> 00:06:53,039
putting it into the url is a problem so

00:06:50,720 --> 00:06:54,800
where else can we put it well instead of

00:06:53,039 --> 00:06:56,560
the actual request let's

00:06:54,800 --> 00:06:59,039
let's use the unspoken conventions

00:06:56,560 --> 00:07:01,599
around the the conversation itself

00:06:59,039 --> 00:07:02,960
let's go back to our hardware store i go

00:07:01,599 --> 00:07:04,000
up to the hardware store and i say i'd

00:07:02,960 --> 00:07:06,000
like to buy a shovel

00:07:04,000 --> 00:07:07,280
the sales assistant says ah that's all

00:07:06,000 --> 00:07:09,440
over in il3

00:07:07,280 --> 00:07:10,400
and hands me a plastic tag with a number

00:07:09,440 --> 00:07:11,919
on it

00:07:10,400 --> 00:07:13,680
i go over to while three discover the

00:07:11,919 --> 00:07:15,599
shovel that i want isn't there and i

00:07:13,680 --> 00:07:16,000
come back to the server waving the tag

00:07:15,599 --> 00:07:17,599
saying

00:07:16,000 --> 00:07:19,759
i was hoping for something with a longer

00:07:17,599 --> 00:07:20,319
handle the sales assistant can look at

00:07:19,759 --> 00:07:22,319
the tag

00:07:20,319 --> 00:07:24,400
look up the history associated with that

00:07:22,319 --> 00:07:27,280
tag find my previous request

00:07:24,400 --> 00:07:28,240
and then say okay you want hile7 then

00:07:27,280 --> 00:07:30,479
this time

00:07:28,240 --> 00:07:31,360
i'm not verbally identifying myself with

00:07:30,479 --> 00:07:33,680
every request

00:07:31,360 --> 00:07:35,520
the first request is just a request but

00:07:33,680 --> 00:07:37,360
in the response the server gives me a

00:07:35,520 --> 00:07:38,080
token in return and if i present that

00:07:37,360 --> 00:07:40,400
token

00:07:38,080 --> 00:07:41,120
with subsequent requests without saying

00:07:40,400 --> 00:07:43,440
anything

00:07:41,120 --> 00:07:45,440
the server can identify who i am and the

00:07:43,440 --> 00:07:47,199
history of my requests

00:07:45,440 --> 00:07:49,280
and that information is tied to the way

00:07:47,199 --> 00:07:51,039
that i'm interacting with the server

00:07:49,280 --> 00:07:52,720
not the content of the question that i'm

00:07:51,039 --> 00:07:54,479
asking in order to impersonate me an

00:07:52,720 --> 00:07:55,120
attacker needs to get a copy of the

00:07:54,479 --> 00:07:58,240
token

00:07:55,120 --> 00:08:01,120
that the server gave me and that's

00:07:58,240 --> 00:08:03,039
all a cookie is cookies were originally

00:08:01,120 --> 00:08:04,319
originally invented by lou montouli who

00:08:03,039 --> 00:08:05,599
was one of the founding engineers at

00:08:04,319 --> 00:08:07,759
netscape

00:08:05,599 --> 00:08:09,520
quick sidebar lou montouli has another

00:08:07,759 --> 00:08:11,680
claim to fame he was one of the authors

00:08:09,520 --> 00:08:13,280
of lynx which is the oldest web browser

00:08:11,680 --> 00:08:15,599
that is still maintained and

00:08:13,280 --> 00:08:16,879
in use today for the youth in the

00:08:15,599 --> 00:08:18,639
audience who have never heard of links

00:08:16,879 --> 00:08:21,199
links is a browser that you can run

00:08:18,639 --> 00:08:22,240
in your terminal in text mode why is

00:08:21,199 --> 00:08:24,240
this interesting well

00:08:22,240 --> 00:08:25,360
montuli wrote links while he was at

00:08:24,240 --> 00:08:28,800
university

00:08:25,360 --> 00:08:30,000
the university of kansas lawrence a city

00:08:28,800 --> 00:08:32,880
that 12 years later

00:08:30,000 --> 00:08:35,360
was the birthplace of django lawrence

00:08:32,880 --> 00:08:38,560
really is one hell of a town

00:08:35,360 --> 00:08:40,399
but back to cookies cookies are formerly

00:08:38,560 --> 00:08:42,159
part of the http specification they're

00:08:40,399 --> 00:08:43,760
included as part of the metadata

00:08:42,159 --> 00:08:46,880
that accompanies a request and a

00:08:43,760 --> 00:08:48,560
response in terms of the formal standard

00:08:46,880 --> 00:08:51,760
cookies were originally formalized in

00:08:48,560 --> 00:08:56,320
1994 in rfc 2109

00:08:51,760 --> 00:09:00,320
the rfc was revised in 2000 as rfc 2965

00:08:56,320 --> 00:09:03,200
and again in april 2011 as rfc 6265.

00:09:00,320 --> 00:09:04,959
the w3c is currently working on a

00:09:03,200 --> 00:09:08,720
revision to the cookie standard the most

00:09:04,959 --> 00:09:11,200
recent draft is called rfc 6265 biso 5.

00:09:08,720 --> 00:09:11,760
now in practice most browsers today

00:09:11,200 --> 00:09:13,760
implement

00:09:11,760 --> 00:09:15,279
something somewhere between the formal

00:09:13,760 --> 00:09:17,519
6265 spec

00:09:15,279 --> 00:09:18,959
and the bis-5 variant that's because web

00:09:17,519 --> 00:09:21,440
standards are a little bit weird

00:09:18,959 --> 00:09:23,200
implementations often precede the formal

00:09:21,440 --> 00:09:26,080
standardization process

00:09:23,200 --> 00:09:27,440
if you read rfc 6265 which is the last

00:09:26,080 --> 00:09:29,519
ratified standard it's what's referred

00:09:27,440 --> 00:09:30,800
to as a proposed standard even though

00:09:29,519 --> 00:09:31,839
it's the thing that pretty much everyone

00:09:30,800 --> 00:09:34,160
uses

00:09:31,839 --> 00:09:36,560
however the core of this standard hasn't

00:09:34,160 --> 00:09:38,480
changed that much since 1994.

00:09:36,560 --> 00:09:39,680
so what does a cookie look like in

00:09:38,480 --> 00:09:41,120
practice well

00:09:39,680 --> 00:09:42,880
let's look at our interaction with the

00:09:41,120 --> 00:09:44,880
hardware store and replace our human

00:09:42,880 --> 00:09:46,880
server with an actual computer server

00:09:44,880 --> 00:09:48,839
our original request is for a specific

00:09:46,880 --> 00:09:51,839
url http

00:09:48,839 --> 00:09:52,800
hardwarestore.com purchase we make that

00:09:51,839 --> 00:09:54,399
original request

00:09:52,800 --> 00:09:56,000
on the hardware stores web server we

00:09:54,399 --> 00:09:56,640
name the page that we want slash

00:09:56,000 --> 00:09:58,080
purchase

00:09:56,640 --> 00:09:59,760
the host we're requesting and the

00:09:58,080 --> 00:10:01,120
content uh some information about the

00:09:59,760 --> 00:10:02,560
browser we're using to make the request

00:10:01,120 --> 00:10:04,000
the content that we're happy to accept

00:10:02,560 --> 00:10:06,480
as a response

00:10:04,000 --> 00:10:07,440
and in a stateless world the response

00:10:06,480 --> 00:10:09,120
from the server

00:10:07,440 --> 00:10:10,720
would look something like this it gives

00:10:09,120 --> 00:10:12,640
the server response code

00:10:10,720 --> 00:10:14,880
a time spent for timestamp for the

00:10:12,640 --> 00:10:16,720
response and details about the content

00:10:14,880 --> 00:10:19,120
that's going to be returned and then

00:10:16,720 --> 00:10:20,959
the actual html content if we want to

00:10:19,120 --> 00:10:22,079
make this a stateful response and

00:10:20,959 --> 00:10:24,160
include a cookie

00:10:22,079 --> 00:10:26,880
we add one line to the header header of

00:10:24,160 --> 00:10:28,880
the response we add a set cookie header

00:10:26,880 --> 00:10:30,399
and the cookie itself is then key equals

00:10:28,880 --> 00:10:31,279
value in this case we're setting a

00:10:30,399 --> 00:10:33,519
cookie

00:10:31,279 --> 00:10:35,760
sid a session id and we're setting it to

00:10:33,519 --> 00:10:37,360
a value of six seven eight nine

00:10:35,760 --> 00:10:39,360
we could if we wanted to set multiple

00:10:37,360 --> 00:10:40,079
cookies by including multiple set cookie

00:10:39,360 --> 00:10:41,760
lines

00:10:40,079 --> 00:10:43,760
in our header so here we set a second a

00:10:41,760 --> 00:10:45,120
second cookie for favorite color equals

00:10:43,760 --> 00:10:47,279
red

00:10:45,120 --> 00:10:48,240
then in subsequent requests we include

00:10:47,279 --> 00:10:50,399
the cookies

00:10:48,240 --> 00:10:51,839
as part of the request header so if

00:10:50,399 --> 00:10:52,640
there are multiple cookies the key value

00:10:51,839 --> 00:10:55,120
pairs are then

00:10:52,640 --> 00:10:56,399
separated by semicolons subsequent

00:10:55,120 --> 00:10:58,320
server responses can then

00:10:56,399 --> 00:10:59,519
update the value of cookies that have

00:10:58,320 --> 00:11:01,600
already been sent

00:10:59,519 --> 00:11:03,120
so in the next response we might return

00:11:01,600 --> 00:11:05,200
favorite color equals blue

00:11:03,120 --> 00:11:06,720
the cookie store on my browser is then

00:11:05,200 --> 00:11:09,839
updated to reflect that

00:11:06,720 --> 00:11:12,000
fundamentally that's all a cookie is the

00:11:09,839 --> 00:11:12,959
key and the value could be any printable

00:11:12,000 --> 00:11:15,519
ascii character

00:11:12,959 --> 00:11:16,320
excluding comma the semicolon and white

00:11:15,519 --> 00:11:18,800
space

00:11:16,320 --> 00:11:20,320
or including excluding semicolon comma

00:11:18,800 --> 00:11:22,640
semicolon and white space

00:11:20,320 --> 00:11:23,600
equals is valid in the value but not in

00:11:22,640 --> 00:11:26,320
the key

00:11:23,600 --> 00:11:27,760
strictly speaking rfc 2965 is a little

00:11:26,320 --> 00:11:29,120
bit more restrictive than this but in

00:11:27,760 --> 00:11:30,399
practice browsers don't

00:11:29,120 --> 00:11:31,600
actually implement most of those

00:11:30,399 --> 00:11:34,160
restrictions so you're generally good

00:11:31,600 --> 00:11:37,040
with any printable ascii

00:11:34,160 --> 00:11:38,240
the value can be anything up to 4096

00:11:37,040 --> 00:11:40,160
characters in length

00:11:38,240 --> 00:11:42,240
nothing will stop you from trying to

00:11:40,160 --> 00:11:43,120
send a cookie that's longer than 4096

00:11:42,240 --> 00:11:45,279
characters though

00:11:43,120 --> 00:11:46,959
and some browsers will even return

00:11:45,279 --> 00:11:48,000
longer cookies but it's not guaranteed

00:11:46,959 --> 00:11:49,680
by the specs so it's

00:11:48,000 --> 00:11:52,399
generally not a good idea to rely on

00:11:49,680 --> 00:11:54,240
that now the examples that i've given so

00:11:52,399 --> 00:11:56,240
far are the simplest possible form of a

00:11:54,240 --> 00:11:58,160
cookie that's called a session cookie

00:11:56,240 --> 00:12:00,399
they disappear as soon as you close your

00:11:58,160 --> 00:12:01,839
browser now that distinction has become

00:12:00,399 --> 00:12:03,519
a little bit more hazy with browsers

00:12:01,839 --> 00:12:05,839
that restore sessions

00:12:03,519 --> 00:12:07,920
after after you close the browser but in

00:12:05,839 --> 00:12:09,279
principle session cookies ads are only

00:12:07,920 --> 00:12:10,560
supposed to last once

00:12:09,279 --> 00:12:12,720
until the browser is closed once you

00:12:10,560 --> 00:12:14,639
close the browser the cookie goes away

00:12:12,720 --> 00:12:16,480
but there are other keywords you can

00:12:14,639 --> 00:12:18,480
include on the cookie definition that

00:12:16,480 --> 00:12:20,000
will modify the behavior of the cookie

00:12:18,480 --> 00:12:21,120
and i'm going although i'm going to talk

00:12:20,000 --> 00:12:22,880
about them one at a time they're not

00:12:21,120 --> 00:12:25,360
mutually exclusive you can set

00:12:22,880 --> 00:12:26,959
all of these values on a single cookie

00:12:25,360 --> 00:12:29,040
if you wanted to

00:12:26,959 --> 00:12:30,880
a permanent cookie is a cookie that has

00:12:29,040 --> 00:12:32,320
an expiration day a cookie is stored in

00:12:30,880 --> 00:12:33,680
your browser and will persist

00:12:32,320 --> 00:12:35,839
even if you shut down your browser and

00:12:33,680 --> 00:12:38,240
reopen it it's expected that the browser

00:12:35,839 --> 00:12:39,920
will include that cookie on all requests

00:12:38,240 --> 00:12:41,920
up until that expiration time at which

00:12:39,920 --> 00:12:44,160
point the cookie is then discarded

00:12:41,920 --> 00:12:46,320
the standard has since the very first

00:12:44,160 --> 00:12:48,079
cookie roc allowed two ways to specify

00:12:46,320 --> 00:12:50,560
this expiration date expires

00:12:48,079 --> 00:12:52,560
specified as a date time and max age

00:12:50,560 --> 00:12:53,680
specified as the number of seconds into

00:12:52,560 --> 00:12:55,440
the future

00:12:53,680 --> 00:12:57,360
if the date is set into the past or the

00:12:55,440 --> 00:12:59,680
max age is zero the cookie

00:12:57,360 --> 00:13:01,920
is supposed to be deleted however

00:12:59,680 --> 00:13:03,600
internet explorer didn't honour max age

00:13:01,920 --> 00:13:05,200
until 2016

00:13:03,600 --> 00:13:06,560
which does raise an interesting point

00:13:05,200 --> 00:13:08,480
all this cookie behavior that i'm

00:13:06,560 --> 00:13:10,000
talking about is entirely up to the

00:13:08,480 --> 00:13:12,160
client to honor it

00:13:10,000 --> 00:13:13,600
it's entirely up to the browser to honor

00:13:12,160 --> 00:13:16,639
these cookie settings

00:13:13,600 --> 00:13:19,200
and this will come up again later

00:13:16,639 --> 00:13:21,120
now by default cookies are bound to the

00:13:19,200 --> 00:13:22,079
domain of the originally originating

00:13:21,120 --> 00:13:23,440
request

00:13:22,079 --> 00:13:25,120
so you can't set a cookie for someone

00:13:23,440 --> 00:13:27,680
else's domain however you can

00:13:25,120 --> 00:13:29,440
apply a scope to a cookie so that scope

00:13:27,680 --> 00:13:31,440
can be a domain or a path

00:13:29,440 --> 00:13:33,360
or both so if you want to set a cookie

00:13:31,440 --> 00:13:34,160
for a specific sub domain for example

00:13:33,360 --> 00:13:35,839
you can specify

00:13:34,160 --> 00:13:37,279
the subdomain that you want the cookie

00:13:35,839 --> 00:13:39,279
to apply for

00:13:37,279 --> 00:13:41,600
in recent standards cookies can be read

00:13:39,279 --> 00:13:42,639
by any sub-domain of the domain which

00:13:41,600 --> 00:13:44,480
they were set however

00:13:42,639 --> 00:13:46,160
all the standards required you to use a

00:13:44,480 --> 00:13:46,959
dot prefix if you wanted a cookie to be

00:13:46,160 --> 00:13:48,959
explicitly

00:13:46,959 --> 00:13:50,399
visible on subdomains so you know

00:13:48,959 --> 00:13:51,519
arguable it might be a good idea to keep

00:13:50,399 --> 00:13:54,240
using that

00:13:51,519 --> 00:13:55,839
dot prefix this isn't completely

00:13:54,240 --> 00:13:56,880
open-ended though the domain that you

00:13:55,839 --> 00:13:58,800
set the cookie for

00:13:56,880 --> 00:14:00,839
needs to match the domain that was

00:13:58,800 --> 00:14:03,519
serving the page that was requested so

00:14:00,839 --> 00:14:04,160
hardwarestore.com can't set a cookie for

00:14:03,519 --> 00:14:07,600
domain

00:14:04,160 --> 00:14:09,120
equals cheese cheeseshop.com

00:14:07,600 --> 00:14:11,440
path level scoping allows you to

00:14:09,120 --> 00:14:12,800
restrict the the cookie even further so

00:14:11,440 --> 00:14:15,519
you can restrict a cookie to

00:14:12,800 --> 00:14:16,000
only be applicable to paths under the

00:14:15,519 --> 00:14:18,399
for example

00:14:16,000 --> 00:14:20,079
here slash purchase path including all

00:14:18,399 --> 00:14:20,720
the subparts of slash purchase but if

00:14:20,079 --> 00:14:22,480
you went to

00:14:20,720 --> 00:14:24,480
a slash account the cookie wouldn't

00:14:22,480 --> 00:14:26,639
apply in this case and you can then

00:14:24,480 --> 00:14:28,320
uh combine domain and path on the same

00:14:26,639 --> 00:14:29,920
cookie

00:14:28,320 --> 00:14:32,399
you can also mark a cookie as being

00:14:29,920 --> 00:14:34,639
secure now you need to be careful here

00:14:32,399 --> 00:14:36,000
marking a cookie is secure doesn't

00:14:34,639 --> 00:14:38,560
actually provide

00:14:36,000 --> 00:14:39,920
any real security around the cookie

00:14:38,560 --> 00:14:41,600
itself it doesn't do any extra

00:14:39,920 --> 00:14:42,160
encryption or protection of the cookie

00:14:41,600 --> 00:14:44,320
value

00:14:42,160 --> 00:14:46,639
it is purely a flag that says this

00:14:44,320 --> 00:14:47,360
cookie should not be sent over insecure

00:14:46,639 --> 00:14:49,360
channels

00:14:47,360 --> 00:14:50,399
so if the cookies flag is secure it

00:14:49,360 --> 00:14:52,399
won't be sent

00:14:50,399 --> 00:14:54,240
over http it will only be sent over

00:14:52,399 --> 00:14:55,440
https

00:14:54,240 --> 00:14:57,440
this is also a good time to point out

00:14:55,440 --> 00:14:58,079
that cookies are ultimately user

00:14:57,440 --> 00:14:59,600
provided

00:14:58,079 --> 00:15:01,680
content this means you need to treat

00:14:59,600 --> 00:15:03,920
them as hostile content

00:15:01,680 --> 00:15:05,839
store data in cookies but verify that

00:15:03,920 --> 00:15:08,480
data but definitely don't put

00:15:05,839 --> 00:15:09,600
code or executable objects like pickles

00:15:08,480 --> 00:15:11,440
in cookie

00:15:09,600 --> 00:15:12,880
in a cookie firstly who would put

00:15:11,440 --> 00:15:15,199
pickles in a cookie but

00:15:12,880 --> 00:15:16,880
more often more importantly than that

00:15:15,199 --> 00:15:18,000
the end user could send you malicious

00:15:16,880 --> 00:15:19,600
content and cookie

00:15:18,000 --> 00:15:21,360
prickles are executable content at the

00:15:19,600 --> 00:15:23,680
end of the day so be careful about what

00:15:21,360 --> 00:15:25,760
you put in your cookie

00:15:23,680 --> 00:15:27,440
something that does does provide some

00:15:25,760 --> 00:15:29,759
security is the http

00:15:27,440 --> 00:15:31,279
only flag now this flags of the cookie

00:15:29,759 --> 00:15:32,959
should not be visible

00:15:31,279 --> 00:15:34,959
to javascript requests now this is

00:15:32,959 --> 00:15:36,720
useful because it prevents javascript on

00:15:34,959 --> 00:15:38,480
a page from reading a cookie which is

00:15:36,720 --> 00:15:39,120
probably the easiest way to exfiltrate a

00:15:38,480 --> 00:15:41,040
cookie from

00:15:39,120 --> 00:15:43,120
from a site either intentionally or

00:15:41,040 --> 00:15:44,480
unintentionally

00:15:43,120 --> 00:15:46,240
the last cookie option i want to talk

00:15:44,480 --> 00:15:48,800
about is the same site flag and this is

00:15:46,240 --> 00:15:50,639
an option that isn't in the rfc 6265

00:15:48,800 --> 00:15:53,040
spec it's in the best five revisions

00:15:50,639 --> 00:15:55,199
but it is already in wide use and the

00:15:53,040 --> 00:15:56,880
landscape around this flag is changing

00:15:55,199 --> 00:15:59,120
it all relates to what is probably the

00:15:56,880 --> 00:16:00,800
highest impact change to cookies

00:15:59,120 --> 00:16:02,160
since they were first introduced but to

00:16:00,800 --> 00:16:02,800
explain what's going on i need to give a

00:16:02,160 --> 00:16:05,199
little bit of

00:16:02,800 --> 00:16:06,959
context and background so far we've been

00:16:05,199 --> 00:16:08,880
talking about hardware stores website as

00:16:06,959 --> 00:16:10,959
if it was a single standalone site

00:16:08,880 --> 00:16:12,079
as a user you visit hardwarestore.com

00:16:10,959 --> 00:16:14,320
all the content is served by

00:16:12,079 --> 00:16:17,120
hardwarestore.com servers

00:16:14,320 --> 00:16:18,000
however in the real world you probably

00:16:17,120 --> 00:16:19,839
want to include

00:16:18,000 --> 00:16:22,000
content that's hosted on other sites my

00:16:19,839 --> 00:16:23,759
home page for hardwarestore.com

00:16:22,000 --> 00:16:26,000
might include static image content

00:16:23,759 --> 00:16:27,920
served from static.hardwarestore.com

00:16:26,000 --> 00:16:29,120
it might include framework code coming

00:16:27,920 --> 00:16:31,600
from a cdn

00:16:29,120 --> 00:16:33,120
bootstrap jquery fonts and it might

00:16:31,600 --> 00:16:34,120
include a reference to some analytics or

00:16:33,120 --> 00:16:36,480
an ad server

00:16:34,120 --> 00:16:37,839
hardwarestore.com is my code served off

00:16:36,480 --> 00:16:40,000
my server

00:16:37,839 --> 00:16:41,279
the static content is my content

00:16:40,000 --> 00:16:43,440
possibly served by a completely

00:16:41,279 --> 00:16:45,279
different server or an s3 bucket

00:16:43,440 --> 00:16:47,120
frameworks analytics and ad content will

00:16:45,279 --> 00:16:49,600
be served by those respective companies

00:16:47,120 --> 00:16:52,639
servers or cdns

00:16:49,600 --> 00:16:53,519
every asset that is served is a unique

00:16:52,639 --> 00:16:56,560
request

00:16:53,519 --> 00:16:58,079
and each request can set a cookie but it

00:16:56,560 --> 00:17:00,480
can only set a cookie for the domain

00:16:58,079 --> 00:17:03,240
from which it is served

00:17:00,480 --> 00:17:04,480
if request if i request content from

00:17:03,240 --> 00:17:05,600
hardwarestore.com

00:17:04,480 --> 00:17:07,839
and it sets a cookie for

00:17:05,600 --> 00:17:08,959
hardwarestore.com that's called a first

00:17:07,839 --> 00:17:10,919
party cookie

00:17:08,959 --> 00:17:12,319
but if i request content from

00:17:10,919 --> 00:17:14,480
hardwarestore.com

00:17:12,319 --> 00:17:16,559
which in turn requests content from a

00:17:14,480 --> 00:17:18,720
cdn or an analytics site or a server

00:17:16,559 --> 00:17:20,400
or any server that is a different site

00:17:18,720 --> 00:17:23,039
to the one i originally requested

00:17:20,400 --> 00:17:24,640
that's called a third party cookie now

00:17:23,039 --> 00:17:25,280
to be clear this is purely about the

00:17:24,640 --> 00:17:26,959
context

00:17:25,280 --> 00:17:28,960
in which the request for the content

00:17:26,959 --> 00:17:29,840
occurs it's nothing about the content

00:17:28,960 --> 00:17:31,919
itself

00:17:29,840 --> 00:17:34,000
content that is a third party request on

00:17:31,919 --> 00:17:35,600
one site would be first party

00:17:34,000 --> 00:17:37,520
if it was directly requested by the

00:17:35,600 --> 00:17:40,000
browser and when i say

00:17:37,520 --> 00:17:41,440
site i'm generally talking about the

00:17:40,000 --> 00:17:43,360
first part of the name that you could

00:17:41,440 --> 00:17:46,840
actually go to a domain register

00:17:43,360 --> 00:17:48,280
domain registrar and and reserve

00:17:46,840 --> 00:17:49,760
www.hardwarestore.com and

00:17:48,280 --> 00:17:50,160
static.hardwarestore.com are both the

00:17:49,760 --> 00:17:52,799
same

00:17:50,160 --> 00:17:54,640
site in that context however there are

00:17:52,799 --> 00:17:58,200
some notable exceptions

00:17:54,640 --> 00:17:59,360
for example mysite.github.io and your

00:17:58,200 --> 00:18:02,240
site.github.io

00:17:59,360 --> 00:18:04,240
are not treated as the same site even

00:18:02,240 --> 00:18:06,480
though github.io would under normal

00:18:04,240 --> 00:18:07,520
circumstances be the base site for both

00:18:06,480 --> 00:18:09,120
you know it's the name that

00:18:07,520 --> 00:18:10,880
you could or would have registered if

00:18:09,120 --> 00:18:12,640
you hadn't got in before github

00:18:10,880 --> 00:18:14,160
this is because github.io is on

00:18:12,640 --> 00:18:16,400
something called the public suffix

00:18:14,160 --> 00:18:17,280
list the public suffix list is a cross

00:18:16,400 --> 00:18:19,200
vendor project

00:18:17,280 --> 00:18:21,520
that's around to give an accurate list

00:18:19,200 --> 00:18:22,880
of the true domain name suffixes

00:18:21,520 --> 00:18:24,640
and this is essentially a security

00:18:22,880 --> 00:18:26,480
measure because github.io

00:18:24,640 --> 00:18:28,240
is a well-known hosting site that anyone

00:18:26,480 --> 00:18:30,160
can publish on i don't want

00:18:28,240 --> 00:18:33,919
your website on github.io to be able to

00:18:30,160 --> 00:18:36,160
set cookies for my website

00:18:33,919 --> 00:18:38,000
okay so back to the same site cookie

00:18:36,160 --> 00:18:40,400
option when you set a cookie you can set

00:18:38,000 --> 00:18:41,600
the context in which that cookie will be

00:18:40,400 --> 00:18:44,000
returned

00:18:41,600 --> 00:18:46,080
same site equals none means the cookie

00:18:44,000 --> 00:18:47,919
is allowed in third party requests

00:18:46,080 --> 00:18:50,000
that is essentially cookie behavior as

00:18:47,919 --> 00:18:52,080
of 2010 allow the cookie no matter the

00:18:50,000 --> 00:18:54,720
context generating the quest

00:18:52,080 --> 00:18:55,120
same site equals lacks means that there

00:18:54,720 --> 00:18:56,640
are

00:18:55,120 --> 00:18:59,360
the cookies are restricted to first

00:18:56,640 --> 00:18:59,840
party by default however cookies will be

00:18:59,360 --> 00:19:02,960
allowed

00:18:59,840 --> 00:19:05,039
on safe requests to third-party sites so

00:19:02,960 --> 00:19:07,919
for example if i'm on hardwarestore.com

00:19:05,039 --> 00:19:10,240
and you follow a link to cheatshop.com

00:19:07,919 --> 00:19:12,559
that is a third-party request

00:19:10,240 --> 00:19:13,919
but as long as the request is a get or a

00:19:12,559 --> 00:19:14,640
head request what's called a safe

00:19:13,919 --> 00:19:17,200
request

00:19:14,640 --> 00:19:19,200
samesite.lacs will allow cheatshop.com

00:19:17,200 --> 00:19:21,760
cookies to be sent

00:19:19,200 --> 00:19:23,600
same site equals strict is the extreme

00:19:21,760 --> 00:19:24,559
version of lacks it will only include

00:19:23,600 --> 00:19:27,520
the cookie if it is

00:19:24,559 --> 00:19:29,360
strictly first party no exceptions now

00:19:27,520 --> 00:19:31,760
as part of a broader effort to encourage

00:19:29,360 --> 00:19:32,400
developers to adopt https the same site

00:19:31,760 --> 00:19:36,720
attribute could

00:19:32,400 --> 00:19:38,400
only be used if you also set secure

00:19:36,720 --> 00:19:40,000
same site is a good example of where

00:19:38,400 --> 00:19:41,360
browser behavior really matters remember

00:19:40,000 --> 00:19:42,720
when i said earlier that adherence to

00:19:41,360 --> 00:19:43,520
cookie behavior is in the hound of the

00:19:42,720 --> 00:19:45,039
browser well

00:19:43,520 --> 00:19:47,440
browsers have been changing their

00:19:45,039 --> 00:19:48,080
defaults starting in february of this

00:19:47,440 --> 00:19:50,960
year

00:19:48,080 --> 00:19:52,640
chrome's changed the default behavior of

00:19:50,960 --> 00:19:55,039
same site so that you don't

00:19:52,640 --> 00:19:57,120
if you don't explicitly specify a same

00:19:55,039 --> 00:19:58,400
site your cookie will be interpreted as

00:19:57,120 --> 00:20:00,000
same side equals lacks

00:19:58,400 --> 00:20:02,640
which effectively means that your cookie

00:20:00,000 --> 00:20:05,679
won't be served on third party requests

00:20:02,640 --> 00:20:07,200
unless you explicitly request it what

00:20:05,679 --> 00:20:10,159
about other browsers well that's a more

00:20:07,200 --> 00:20:11,760
complex story and i'll come back to that

00:20:10,159 --> 00:20:13,360
okay so so far i've been talking in the

00:20:11,760 --> 00:20:15,360
abstract about the cookie standard about

00:20:13,360 --> 00:20:17,280
the rfc how do cookies actually interact

00:20:15,360 --> 00:20:19,280
with django well at the low level there

00:20:17,280 --> 00:20:20,159
are three methods on a http response

00:20:19,280 --> 00:20:22,080
object

00:20:20,159 --> 00:20:23,919
for setting cookies there's set cookie

00:20:22,080 --> 00:20:25,039
sell signed cookie a set signed cookie

00:20:23,919 --> 00:20:26,480
and delete cookie

00:20:25,039 --> 00:20:28,000
why are there two methods to set a

00:20:26,480 --> 00:20:29,679
cookie well because although the server

00:20:28,000 --> 00:20:32,159
sets the cookie the client

00:20:29,679 --> 00:20:34,080
sends it so if my server is using a

00:20:32,159 --> 00:20:35,760
cookie to store anything sensitive like

00:20:34,080 --> 00:20:36,240
a user identifier or permissions for

00:20:35,760 --> 00:20:37,919
example

00:20:36,240 --> 00:20:40,000
i want to make sure the cookie that you

00:20:37,919 --> 00:20:42,640
receive or that i receive as the server

00:20:40,000 --> 00:20:44,080
hasn't been tampered with by the user to

00:20:42,640 --> 00:20:45,360
do that cookie allows you to

00:20:44,080 --> 00:20:47,200
sign a cookie you can attach a

00:20:45,360 --> 00:20:49,280
cryptographic signature to the cookie

00:20:47,200 --> 00:20:50,720
value that can then be verified on

00:20:49,280 --> 00:20:52,240
subsequent requests

00:20:50,720 --> 00:20:53,679
that doesn't stop the user from

00:20:52,240 --> 00:20:56,400
modifying the cookie after all the

00:20:53,679 --> 00:20:58,080
cookie is completely user provided value

00:20:56,400 --> 00:20:59,840
but it will identify if a cookie has

00:20:58,080 --> 00:21:00,880
been modified because the signature

00:20:59,840 --> 00:21:03,600
won't match

00:21:00,880 --> 00:21:05,120
if they have modified it other than that

00:21:03,600 --> 00:21:05,919
the parameters on set cookie and set

00:21:05,120 --> 00:21:07,919
signed cookie

00:21:05,919 --> 00:21:09,200
match directly to the rfc so they did

00:21:07,919 --> 00:21:10,960
one to one correspondence with the

00:21:09,200 --> 00:21:12,480
with the the arguments that i was just

00:21:10,960 --> 00:21:14,799
been describing

00:21:12,480 --> 00:21:16,400
when you delete a cookie the path domain

00:21:14,799 --> 00:21:18,080
and same site attribute need to match

00:21:16,400 --> 00:21:19,440
the values that were originally used to

00:21:18,080 --> 00:21:21,840
set the cookie or else the cookie may

00:21:19,440 --> 00:21:23,120
not actually be deleted

00:21:21,840 --> 00:21:24,960
on the other side how do you read the

00:21:23,120 --> 00:21:25,520
cookie well if it's a simple unsigned

00:21:24,960 --> 00:21:27,120
cookie

00:21:25,520 --> 00:21:28,559
the value is returned in the cookies

00:21:27,120 --> 00:21:29,200
dictionary attribute on the request

00:21:28,559 --> 00:21:31,600
object

00:21:29,200 --> 00:21:32,799
if it is a signed cookie you can't get

00:21:31,600 --> 00:21:34,400
at it through the cookies attribute but

00:21:32,799 --> 00:21:35,760
you just get the raw payload with the

00:21:34,400 --> 00:21:37,840
signature attached

00:21:35,760 --> 00:21:39,679
to to do that signature process you can

00:21:37,840 --> 00:21:42,159
say request dot get signed cookie

00:21:39,679 --> 00:21:43,520
provide the uh the cookie and the salt

00:21:42,159 --> 00:21:46,159
was used to sign it

00:21:43,520 --> 00:21:47,600
by default this will raise bad signature

00:21:46,159 --> 00:21:48,799
if the signature doesn't match

00:21:47,600 --> 00:21:50,720
alternatively you can provide the

00:21:48,799 --> 00:21:51,440
default value that will be returned

00:21:50,720 --> 00:21:53,840
instead

00:21:51,440 --> 00:21:55,120
if instead of an exception you can also

00:21:53,840 --> 00:21:57,200
ask for the age of the cookie to be

00:21:55,120 --> 00:21:58,880
checked at this point as well

00:21:57,200 --> 00:22:00,480
there are a number of other areas of

00:21:58,880 --> 00:22:02,240
django that use cookies

00:22:00,480 --> 00:22:04,400
uh django has cookies that will that it

00:22:02,240 --> 00:22:05,679
will use in various consequences

00:22:04,400 --> 00:22:07,840
situations depending upon how it's

00:22:05,679 --> 00:22:09,440
configured django's session framework

00:22:07,840 --> 00:22:10,000
will store the session id in a cookie uh

00:22:09,440 --> 00:22:12,000
the name

00:22:10,000 --> 00:22:13,440
max age domain all the other cookie

00:22:12,000 --> 00:22:15,120
flags all those properties of cookies

00:22:13,440 --> 00:22:17,440
have settings to control them

00:22:15,120 --> 00:22:19,360
the csrf token is stored at a cookie as

00:22:17,440 --> 00:22:21,360
well so is your language setting and

00:22:19,360 --> 00:22:22,000
again there are settings matching all of

00:22:21,360 --> 00:22:24,799
the

00:22:22,000 --> 00:22:26,000
the cookie specification flags that you

00:22:24,799 --> 00:22:28,720
can then use to control

00:22:26,000 --> 00:22:30,960
how your csrf token uh or your language

00:22:28,720 --> 00:22:32,240
setting uh con

00:22:30,960 --> 00:22:35,120
your language setting cookies are

00:22:32,240 --> 00:22:36,559
configured however for all these users

00:22:35,120 --> 00:22:38,240
you don't actually need to care

00:22:36,559 --> 00:22:39,600
that much oh sorry the the one last

00:22:38,240 --> 00:22:41,280
place the django might be using cookies

00:22:39,600 --> 00:22:42,720
is in your session data i say might

00:22:41,280 --> 00:22:44,080
because it depends how you've configured

00:22:42,720 --> 00:22:46,240
your session backend

00:22:44,080 --> 00:22:48,320
cookie storage and fallback storage

00:22:46,240 --> 00:22:49,440
session storage both use cookies as the

00:22:48,320 --> 00:22:51,840
way they persist

00:22:49,440 --> 00:22:53,120
that session information however for all

00:22:51,840 --> 00:22:54,799
these users you don't really need to

00:22:53,120 --> 00:22:56,799
care that much the cookies will

00:22:54,799 --> 00:22:58,159
just work the only time you need to

00:22:56,799 --> 00:22:59,200
fiddle with those settings is if you do

00:22:58,159 --> 00:23:00,559
want to change

00:22:59,200 --> 00:23:02,159
like the domain where someone needs to

00:23:00,559 --> 00:23:03,679
log in or retain cookies across

00:23:02,159 --> 00:23:04,960
sub-domains or improve this

00:23:03,679 --> 00:23:07,760
improve the security or make sure the

00:23:04,960 --> 00:23:11,039
cookies aren't being sent over https

00:23:07,760 --> 00:23:12,320
so what what are the future of cookies

00:23:11,039 --> 00:23:13,919
well cookies have gotten a lot of

00:23:12,320 --> 00:23:14,400
attention in recent years almost all

00:23:13,919 --> 00:23:17,440
because of

00:23:14,400 --> 00:23:19,120
one issue user privacy let's say we need

00:23:17,440 --> 00:23:20,320
some extra revenue for our hardware

00:23:19,120 --> 00:23:22,400
store so we

00:23:20,320 --> 00:23:24,400
insert ads provided by adserver.com a

00:23:22,400 --> 00:23:26,400
user visits our site

00:23:24,400 --> 00:23:27,679
that page includes an ad from

00:23:26,400 --> 00:23:29,679
adserver.com

00:23:27,679 --> 00:23:31,760
the user's browser requests the server

00:23:29,679 --> 00:23:34,320
the ad from adserver.com the ad server

00:23:31,760 --> 00:23:36,000
sets a cookie to identify the user now

00:23:34,320 --> 00:23:38,000
days later the user visits

00:23:36,000 --> 00:23:39,360
cheeseshop.com which also has ads from

00:23:38,000 --> 00:23:41,039
adserver.com

00:23:39,360 --> 00:23:43,039
when the user's browser requests that

00:23:41,039 --> 00:23:45,200
add content the cookie that was set

00:23:43,039 --> 00:23:47,520
during their visit to hardwarestore.com

00:23:45,200 --> 00:23:48,960
will be passed back to the ad server

00:23:47,520 --> 00:23:50,880
and as a result of this interaction

00:23:48,960 --> 00:23:53,279
adserver.com now knows that you are

00:23:50,880 --> 00:23:54,720
interested in both hardware and cheese

00:23:53,279 --> 00:23:56,480
and if they've been clever they don't

00:23:54,720 --> 00:23:57,840
just know the site you visited they know

00:23:56,480 --> 00:23:58,640
things about the specific content you

00:23:57,840 --> 00:24:01,039
were looking at

00:23:58,640 --> 00:24:02,320
because of the referrer that sent the

00:24:01,039 --> 00:24:05,440
the request to the ad

00:24:02,320 --> 00:24:07,600
server in the first place and they can

00:24:05,440 --> 00:24:09,360
use this to shape the ads you are served

00:24:07,600 --> 00:24:10,640
based upon what they know about your

00:24:09,360 --> 00:24:12,720
browsing history

00:24:10,640 --> 00:24:14,480
and in the case where the ad server is a

00:24:12,720 --> 00:24:16,320
first party provider as well

00:24:14,480 --> 00:24:17,679
so google and facebook being the two

00:24:16,320 --> 00:24:19,520
major ones here

00:24:17,679 --> 00:24:21,200
they can shape the content that they

00:24:19,520 --> 00:24:23,279
show you as well

00:24:21,200 --> 00:24:25,120
this means that ad servers and any other

00:24:23,279 --> 00:24:26,960
user tracking sites now have a lot of

00:24:25,120 --> 00:24:27,919
information about users and the evidence

00:24:26,960 --> 00:24:30,480
is that they're

00:24:27,919 --> 00:24:32,080
not always using it responsibly now

00:24:30,480 --> 00:24:33,039
there have been a couple of responses to

00:24:32,080 --> 00:24:35,360
this challenge

00:24:33,039 --> 00:24:38,080
one has been legal uh the eu passed eu

00:24:35,360 --> 00:24:39,120
directive 2009 136 ec as a direct

00:24:38,080 --> 00:24:41,120
response to this problem

00:24:39,120 --> 00:24:43,279
this has led to the introduction of many

00:24:41,120 --> 00:24:45,600
many annoying banners on every website

00:24:43,279 --> 00:24:47,279
but hasn't had any appreciable change to

00:24:45,600 --> 00:24:49,200
the problematic behavior it was trying

00:24:47,279 --> 00:24:50,720
to address

00:24:49,200 --> 00:24:52,400
there have been some standardization

00:24:50,720 --> 00:24:53,120
efforts though in addition to stay the

00:24:52,400 --> 00:24:55,200
same site

00:24:53,120 --> 00:24:56,159
uh as a same site as a cookie change

00:24:55,200 --> 00:24:57,520
there was an effort around

00:24:56,159 --> 00:24:59,279
effort around this thing called the do

00:24:57,520 --> 00:25:00,640
not track header uh something that

00:24:59,279 --> 00:25:02,559
browsers could inject into their

00:25:00,640 --> 00:25:04,240
requests to tell servers that their user

00:25:02,559 --> 00:25:05,919
was opting out of all tracking

00:25:04,240 --> 00:25:07,360
that standardization effort didn't

00:25:05,919 --> 00:25:09,120
really change anything though

00:25:07,360 --> 00:25:10,640
it wasn't widely implemented by browsers

00:25:09,120 --> 00:25:13,919
and wasn't widely honored by servers and

00:25:10,640 --> 00:25:15,120
so that effectively died out last year

00:25:13,919 --> 00:25:16,880
what has brought about

00:25:15,120 --> 00:25:18,080
change is public opinion and pressure

00:25:16,880 --> 00:25:20,080
that's been brought on browser

00:25:18,080 --> 00:25:23,279
manufacturers to protect users against

00:25:20,080 --> 00:25:25,279
bad actors uh in the in the web

00:25:23,279 --> 00:25:27,360
in the web world apple started this back

00:25:25,279 --> 00:25:28,960
in 2017 introducing something called

00:25:27,360 --> 00:25:30,159
intelligent tracking protect prevention

00:25:28,960 --> 00:25:32,240
or itp

00:25:30,159 --> 00:25:34,480
initially itp limited the context in

00:25:32,240 --> 00:25:36,000
which third-party cookies will be served

00:25:34,480 --> 00:25:37,840
in the most recent iteration of itp

00:25:36,000 --> 00:25:39,600
launched yesterday two days ago

00:25:37,840 --> 00:25:42,080
essentially means that no third-party

00:25:39,600 --> 00:25:44,960
cookie on any browser on ios 14

00:25:42,080 --> 00:25:45,600
will ever be on it firefox started

00:25:44,960 --> 00:25:48,799
blocking

00:25:45,600 --> 00:25:50,480
blocking third-party cookies in 2019 and

00:25:48,799 --> 00:25:52,000
earlier this year chrome announced they

00:25:50,480 --> 00:25:52,960
were going to kill third-party cookies

00:25:52,000 --> 00:25:55,360
entirely

00:25:52,960 --> 00:25:56,720
in 2022. this has caused a bit of a

00:25:55,360 --> 00:25:58,799
flurry in advertising circles because

00:25:56,720 --> 00:26:00,000
user tracking is at the core of how

00:25:58,799 --> 00:26:02,799
modern advertising

00:26:00,000 --> 00:26:03,279
works and while it's very easy to say

00:26:02,799 --> 00:26:05,520
huh

00:26:03,279 --> 00:26:06,880
you know good i hate web ads anyway this

00:26:05,520 --> 00:26:09,120
will have a big impact

00:26:06,880 --> 00:26:10,080
now while when ads aren't targeted they

00:26:09,120 --> 00:26:12,240
become less effective

00:26:10,080 --> 00:26:13,679
and as a result the the price the rate

00:26:12,240 --> 00:26:16,320
that advertisers are willing to pay

00:26:13,679 --> 00:26:17,279
also drops how much does it drop uh

00:26:16,320 --> 00:26:19,360
google's estimate

00:26:17,279 --> 00:26:20,559
um they did a study and published some

00:26:19,360 --> 00:26:21,200
results of a study they did where they

00:26:20,559 --> 00:26:24,320
said that

00:26:21,200 --> 00:26:26,960
uh removing targeted ads would

00:26:24,320 --> 00:26:28,720
possibly have or or more than half the

00:26:26,960 --> 00:26:31,840
revenue of the top 500

00:26:28,720 --> 00:26:33,440
publishers out there and putting ads on

00:26:31,840 --> 00:26:36,320
there on their websites

00:26:33,440 --> 00:26:38,720
and ads pay for a lot of the modern web

00:26:36,320 --> 00:26:40,240
in particular the news news sites are

00:26:38,720 --> 00:26:41,760
already struggling and losing

00:26:40,240 --> 00:26:43,120
50 percent of what little revenue

00:26:41,760 --> 00:26:44,080
they've been able to generate through

00:26:43,120 --> 00:26:45,279
advertising

00:26:44,080 --> 00:26:47,840
could be the death of a lot of

00:26:45,279 --> 00:26:49,440
journalism that's a problem for modern

00:26:47,840 --> 00:26:51,840
civil society

00:26:49,440 --> 00:26:53,760
and because of that impact of the cookie

00:26:51,840 --> 00:26:55,760
upper lips is so profound the ad tech

00:26:53,760 --> 00:26:57,760
have been working on proposals that will

00:26:55,760 --> 00:26:59,600
allow target advertising to continue

00:26:57,760 --> 00:27:00,400
even though the cook third-party cookies

00:26:59,600 --> 00:27:01,919
go away

00:27:00,400 --> 00:27:03,120
google's advertising department has been

00:27:01,919 --> 00:27:04,960
furiously churning out technical

00:27:03,120 --> 00:27:07,440
proposals which for some reason are all

00:27:04,960 --> 00:27:09,600
acronyms based on bird names private

00:27:07,440 --> 00:27:12,080
interest groups including noise pigeon

00:27:09,600 --> 00:27:15,039
two uncorrelated requests then locally

00:27:12,080 --> 00:27:16,640
executed decision on victory turtledove

00:27:15,039 --> 00:27:18,399
these proposals are designed to allow

00:27:16,640 --> 00:27:19,919
advertisers to determine that you belong

00:27:18,399 --> 00:27:21,279
to a target group without allowing an

00:27:19,919 --> 00:27:23,840
advertiser to identify

00:27:21,279 --> 00:27:24,799
you specifically they're complex it's

00:27:23,840 --> 00:27:26,880
not clear

00:27:24,799 --> 00:27:28,159
if any of them will end up being

00:27:26,880 --> 00:27:30,320
widespread standards or

00:27:28,159 --> 00:27:32,080
being implemented at all the other

00:27:30,320 --> 00:27:33,679
approach is changes in the advertising

00:27:32,080 --> 00:27:35,120
industry itself returning to contextual

00:27:33,679 --> 00:27:37,200
advertising rather than micro

00:27:35,120 --> 00:27:38,720
targeting uh internet era ad tech has

00:27:37,200 --> 00:27:40,159
been overwhelmingly based on micro

00:27:38,720 --> 00:27:41,760
targeting finding individual user

00:27:40,159 --> 00:27:42,559
behaviors to determine what ads get

00:27:41,760 --> 00:27:44,880
displayed

00:27:42,559 --> 00:27:46,399
however before the internet all ads were

00:27:44,880 --> 00:27:48,080
contextual the value of an ad was

00:27:46,399 --> 00:27:49,279
determined by where it was on the page

00:27:48,080 --> 00:27:50,640
and the content it was going to be

00:27:49,279 --> 00:27:52,159
placed next to

00:27:50,640 --> 00:27:53,679
that sales approach requires no

00:27:52,159 --> 00:27:55,520
information about the user and so it

00:27:53,679 --> 00:27:56,880
might actually be a salvation

00:27:55,520 --> 00:27:58,399
and there's been some suggestion that it

00:27:56,880 --> 00:27:59,120
could actually increase revenue for news

00:27:58,399 --> 00:28:01,120
sites

00:27:59,120 --> 00:28:03,120
eric culture's ethical ads framework is

00:28:01,120 --> 00:28:05,279
is a version of this it's contextual

00:28:03,120 --> 00:28:07,679
advertising

00:28:05,279 --> 00:28:08,880
so that's cookies they have been a

00:28:07,679 --> 00:28:10,480
cornerstone of the web

00:28:08,880 --> 00:28:11,840
since almost the beginning they are have

00:28:10,480 --> 00:28:13,120
there are some changes in the works but

00:28:11,840 --> 00:28:15,039
from the perspective of a django

00:28:13,120 --> 00:28:16,240
developer building a site that only has

00:28:15,039 --> 00:28:17,679
first party cookies

00:28:16,240 --> 00:28:19,200
those changes won't really affect you

00:28:17,679 --> 00:28:20,720
you should still understand how cookies

00:28:19,200 --> 00:28:22,159
work though because they are fundamental

00:28:20,720 --> 00:28:24,000
to how the web works

00:28:22,159 --> 00:28:25,760
and because you've all been such good

00:28:24,000 --> 00:28:28,720
boys girls and babies listening along

00:28:25,760 --> 00:28:30,399
today now you get a cookie of your own

00:28:28,720 --> 00:28:32,000
but because this djangocon is online

00:28:30,399 --> 00:28:34,559
it's a do-it-yourself cookie

00:28:32,000 --> 00:28:35,840
um this is my family choc chip cookie

00:28:34,559 --> 00:28:38,080
recipe

00:28:35,840 --> 00:28:39,200
i say it's my family recipe uh it's

00:28:38,080 --> 00:28:40,320
actually from this book called the

00:28:39,200 --> 00:28:41,840
cookies egg by

00:28:40,320 --> 00:28:44,000
clifford stoll it's a book written about

00:28:41,840 --> 00:28:45,440
1990 about a physics grad student who

00:28:44,000 --> 00:28:46,399
was recycled into the computer science

00:28:45,440 --> 00:28:49,520
department and

00:28:46,399 --> 00:28:51,760
goes on a very true very real

00:28:49,520 --> 00:28:53,279
fascinating adventure it's a fun read

00:28:51,760 --> 00:28:54,720
from a time well before cookies before

00:28:53,279 --> 00:28:56,840
even browsers

00:28:54,720 --> 00:28:58,320
and the cookies are also delicious and

00:28:56,840 --> 00:28:59,840
amazing

00:28:58,320 --> 00:29:01,440
thanks i'll be around for as long as i

00:28:59,840 --> 00:29:02,080
can it's coming into the evening here in

00:29:01,440 --> 00:29:03,520
perth

00:29:02,080 --> 00:29:05,679
i look forward to seeing you all around

00:29:03,520 --> 00:29:12,080
for as long as i can stay awake tonight

00:29:05,679 --> 00:29:15,919
thanks very much

00:29:12,080 --> 00:29:15,919
so i can see a lot of people in the room

00:29:17,039 --> 00:29:24,960
um looks like everyone is muted so

00:29:21,120 --> 00:29:25,520
going through q a uh adam johnson says

00:29:24,960 --> 00:29:27,919
the public

00:29:25,520 --> 00:29:29,279
suffix list feels like a hack is it part

00:29:27,919 --> 00:29:30,799
of a standard is there anything going is

00:29:29,279 --> 00:29:33,679
anything going to supplant it

00:29:30,799 --> 00:29:34,960
um so yes it is a hack but then again so

00:29:33,679 --> 00:29:38,159
is the entire web

00:29:34,960 --> 00:29:40,080
um it is a hack that seems to be widely

00:29:38,159 --> 00:29:40,480
supported by everybody and that's kind

00:29:40,080 --> 00:29:45,279
of

00:29:40,480 --> 00:29:45,279
the way the web works um

00:29:45,360 --> 00:29:48,480
yeah i i'm not aware of anything that's

00:29:47,039 --> 00:29:49,679
going to formally start it i certainly

00:29:48,480 --> 00:29:50,799
wouldn't be surprised if something does

00:29:49,679 --> 00:29:53,760
though because it's

00:29:50,799 --> 00:29:55,440
you know the the net changes and

00:29:53,760 --> 00:29:56,880
everybody

00:29:55,440 --> 00:29:58,240
you know when someone discovers a new

00:29:56,880 --> 00:29:58,799
way of doing something technically and

00:29:58,240 --> 00:30:00,240
they and

00:29:58,799 --> 00:30:01,039
they adopt that new standard so i'm not

00:30:00,240 --> 00:30:02,960
aware of anything that's going to

00:30:01,039 --> 00:30:04,640
supplant it yes it is a nasty hack

00:30:02,960 --> 00:30:06,559
but it's also like it is basically a

00:30:04,640 --> 00:30:08,960
nasty hack that works so

00:30:06,559 --> 00:30:10,640
you know at that level does it matter if

00:30:08,960 --> 00:30:15,039
it's a hack

00:30:10,640 --> 00:30:16,399
um anonymous asks can't tracking trading

00:30:15,039 --> 00:30:17,919
information by cookies

00:30:16,399 --> 00:30:19,360
uh be substituted by different

00:30:17,919 --> 00:30:20,320
techniques like sending cookie data to

00:30:19,360 --> 00:30:21,919
services

00:30:20,320 --> 00:30:23,679
using the first party backend yes yeah

00:30:21,919 --> 00:30:25,600
so yes it can uh however it requires a

00:30:23,679 --> 00:30:28,080
lot more coordination to do that

00:30:25,600 --> 00:30:29,440
um and the sort of the the

00:30:28,080 --> 00:30:30,240
infrastructure that's been set up at the

00:30:29,440 --> 00:30:32,559
moment the

00:30:30,240 --> 00:30:33,279
ad ads need the response times are not

00:30:32,559 --> 00:30:36,399
particularly

00:30:33,279 --> 00:30:39,120
well disposed to ads going through

00:30:36,399 --> 00:30:40,640
third party servers the the technique

00:30:39,120 --> 00:30:41,520
that's actually much more likely to be

00:30:40,640 --> 00:30:44,080
adopted and is

00:30:41,520 --> 00:30:45,840
is to some extent already being adopted

00:30:44,080 --> 00:30:48,799
is going to ip address because you can't

00:30:45,840 --> 00:30:48,799
mask an ip address

00:30:49,520 --> 00:30:53,200
you your your request comes from an ip

00:30:51,360 --> 00:30:54,720
and your the ip for your house is

00:30:53,200 --> 00:30:56,799
remarkably consistent

00:30:54,720 --> 00:30:58,720
uh and there are databases available of

00:30:56,799 --> 00:31:00,159
these are all the ip addresses across

00:30:58,720 --> 00:31:01,200
the continental united states that are

00:31:00,159 --> 00:31:04,000
households

00:31:01,200 --> 00:31:05,919
um so yeah there are definitely other

00:31:04,000 --> 00:31:09,600
ways of performing tracking

00:31:05,919 --> 00:31:10,080
um they are variously improved or not

00:31:09,600 --> 00:31:12,480
improved

00:31:10,080 --> 00:31:13,279
depending upon um so it won't go again

00:31:12,480 --> 00:31:14,960
uh

00:31:13,279 --> 00:31:16,799
the removing cookies won't remove

00:31:14,960 --> 00:31:19,360
tracking um

00:31:16,799 --> 00:31:20,240
it will change tracking um and we can we

00:31:19,360 --> 00:31:22,720
can hope that

00:31:20,240 --> 00:31:23,600
there are you know even ips aren't

00:31:22,720 --> 00:31:26,640
perfect

00:31:23,600 --> 00:31:27,039
um the the issue is with cookies is just

00:31:26,640 --> 00:31:28,799
sort of

00:31:27,039 --> 00:31:30,240
the the ease with which they are able to

00:31:28,799 --> 00:31:32,640
be gathered

00:31:30,240 --> 00:31:34,159
and tracked um there's such a such a

00:31:32,640 --> 00:31:35,919
small identifier and you can

00:31:34,159 --> 00:31:37,600
you can gather so much information along

00:31:35,919 --> 00:31:39,279
the way

00:31:37,600 --> 00:31:41,200
i mentioned european laws about explicit

00:31:39,279 --> 00:31:42,480
cookie consent uh if i have to do it

00:31:41,200 --> 00:31:43,200
what are good resources to making it

00:31:42,480 --> 00:31:44,880
right

00:31:43,200 --> 00:31:48,080
this is one where i have to defer

00:31:44,880 --> 00:31:50,080
because i have very little

00:31:48,080 --> 00:31:52,159
expert knowledge about european law in

00:31:50,080 --> 00:31:53,600
this case and in the process of putting

00:31:52,159 --> 00:31:57,440
together this talk

00:31:53,600 --> 00:31:58,720
uh it became very clear that even inside

00:31:57,440 --> 00:32:01,519
europe there's wide and varied

00:31:58,720 --> 00:32:04,960
regulations and how it gets applied is

00:32:01,519 --> 00:32:06,640
weird and somewhat inconsistent so

00:32:04,960 --> 00:32:08,240
i will definitely plead the fifth on

00:32:06,640 --> 00:32:10,799
this one and say

00:32:08,240 --> 00:32:12,720
consult your gdpr specialist about

00:32:10,799 --> 00:32:15,840
exactly what you have to do here

00:32:12,720 --> 00:32:16,960
um yeah i will i will definitely defer

00:32:15,840 --> 00:32:20,720
to anyone

00:32:16,960 --> 00:32:23,360
who's uh got more knowledge on that one

00:32:20,720 --> 00:32:26,799
if only because i'm not european and not

00:32:23,360 --> 00:32:26,799
subject to your laws directly

00:32:27,440 --> 00:32:36,320
um another question uh most of the apis

00:32:32,640 --> 00:32:37,600
use header based or vera jwt basic uh

00:32:36,320 --> 00:32:39,200
how do you think about having cookie

00:32:37,600 --> 00:32:40,840
based session horse with an api compared

00:32:39,200 --> 00:32:43,840
to token auth

00:32:40,840 --> 00:32:43,840
um

00:32:44,399 --> 00:32:47,600
so if if you are validating against your

00:32:47,120 --> 00:32:49,679
own

00:32:47,600 --> 00:32:50,720
server then first party could the change

00:32:49,679 --> 00:32:52,240
there are no changes the first

00:32:50,720 --> 00:32:54,840
the first part of cookies are going to

00:32:52,240 --> 00:32:57,840
continue to exist you won't be affected

00:32:54,840 --> 00:32:57,840
um

00:33:02,480 --> 00:33:05,519
token yeah i don't know that's that's an

00:33:04,240 --> 00:33:06,480
interesting question i would need to sit

00:33:05,519 --> 00:33:07,840
down and think about that one a little

00:33:06,480 --> 00:33:08,960
bit more and i would definitely defer to

00:33:07,840 --> 00:33:12,159
people who know more about

00:33:08,960 --> 00:33:13,039
security in this particular context i am

00:33:12,159 --> 00:33:17,279
aware that

00:33:13,039 --> 00:33:17,279
the jots jwts have

00:33:17,360 --> 00:33:20,960
security issues but i'm not clear

00:33:19,440 --> 00:33:23,760
entirely whether that is

00:33:20,960 --> 00:33:25,440
because of the way jot has implemented

00:33:23,760 --> 00:33:29,760
them or something fundamental about

00:33:25,440 --> 00:33:33,039
about that bearer bearer token type um

00:33:29,760 --> 00:33:34,799
type access um

00:33:33,039 --> 00:33:36,320
yeah i will defer on that one i don't

00:33:34,799 --> 00:33:37,519
have any strong opinions one way or the

00:33:36,320 --> 00:33:39,840
other

00:33:37,519 --> 00:33:42,320
or expert knowledge in particular in

00:33:39,840 --> 00:33:46,559
that space

00:33:42,320 --> 00:33:48,640
um this is very weird in that

00:33:46,559 --> 00:33:50,840
i'm talking to a room full of no cameras

00:33:48,640 --> 00:33:54,720
and mutes

00:33:50,840 --> 00:33:58,480
um so

00:33:54,720 --> 00:34:01,360
do i have friends hello russell yes

00:33:58,480 --> 00:34:07,039
you have many friends yeah i'm not sure

00:34:01,360 --> 00:34:11,919
this is less weird

00:34:07,039 --> 00:34:11,919
by the way thank you thank you um hi

00:34:12,720 --> 00:34:16,560
you've got to run to the other one now

00:34:14,960 --> 00:34:18,639
oh yes um

00:34:16,560 --> 00:34:20,560
yes i don't want to don't steal anyone

00:34:18,639 --> 00:34:22,960
away from another another excellent talk

00:34:20,560 --> 00:34:22,960
um

00:34:26,240 --> 00:34:37,359
thank you

00:34:34,399 --> 00:34:38,960
thank you very much i will i will hang

00:34:37,359 --> 00:34:40,560
around in this room if anybody wants to

00:34:38,960 --> 00:34:41,520
wants to continue to chat and already

00:34:40,560 --> 00:34:45,040
knows everything they

00:34:41,520 --> 00:34:45,040
need to know about maps um

00:34:45,359 --> 00:34:50,159
thank you oh yes very very welcome and i

00:34:48,960 --> 00:34:51,599
highly recommend that one and i

00:34:50,159 --> 00:34:52,000
recommend the book the book the book is

00:34:51,599 --> 00:34:54,399
also

00:34:52,000 --> 00:34:55,760
a very very light read but a deeply

00:34:54,399 --> 00:35:00,160
amusing read

00:34:55,760 --> 00:35:00,160
um and you'll note it does not include

00:35:00,839 --> 00:35:03,839
pickles

00:35:12,240 --> 00:35:17,839
great exodus

00:35:23,280 --> 00:35:31,839
who is left

00:35:42,839 --> 00:35:45,839
hmm

00:35:52,480 --> 00:36:01,040
all right well

00:35:59,440 --> 00:36:02,560
looks like people are slowly

00:36:01,040 --> 00:36:05,599
disappearing

00:36:02,560 --> 00:36:08,880
um if there's

00:36:05,599 --> 00:36:10,480
no other questions i guess i'll um

00:36:08,880 --> 00:36:12,800
slide quietly out of this room and move

00:36:10,480 --> 00:36:16,000
back to the main chat room

00:36:12,800 --> 00:36:19,920
um i will try to be around um

00:36:16,000 --> 00:36:21,839
as long as i can nice to see you all

00:36:19,920 --> 00:36:24,560
um and i hope i see you all in person in

00:36:21,839 --> 00:36:38,880
portugal next year

00:36:24,560 --> 00:36:38,880

YouTube URL: https://www.youtube.com/watch?v=dinuA2KM3B4


