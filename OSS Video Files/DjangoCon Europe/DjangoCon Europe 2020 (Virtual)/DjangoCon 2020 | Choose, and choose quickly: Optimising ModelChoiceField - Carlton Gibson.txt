Title: DjangoCon 2020 | Choose, and choose quickly: Optimising ModelChoiceField - Carlton Gibson
Publication date: 2020-09-30
Playlist: DjangoCon Europe 2020 (Virtual)
Description: 
	DjangoCon Europe 2020 (Virtual)
September 19, 2020 - 15h50 (GMT+1)

"Choose, and choose quickly: Optimising ModelChoiceField" by Carlton Gibson

Ever had a ModelForm, a DRF Serializer, a FilterSet grind to a halt rendering a choice field? Of course you have. Ever given up on it and resorted to raw ids? -- No don't answer that. We're going to look at how you can get a grip on ModelChoiceField when you're dealing with lots of related objects, and when you need to offer that choice again and again and again, without needing to put the kettle on.
Captions: 
	00:00:06,820 --> 00:00:08,800
[Music]

00:00:08,080 --> 00:00:10,960
hey

00:00:08,800 --> 00:00:12,240
thanks for joining me welcome to my home

00:00:10,960 --> 00:00:14,719
like it's

00:00:12,240 --> 00:00:16,080
funny funny experience funny situation

00:00:14,719 --> 00:00:18,160
normally i'd be looking out at stage at

00:00:16,080 --> 00:00:20,000
you and i'd see you all and

00:00:18,160 --> 00:00:22,080
be able to see your smiling faces but i

00:00:20,000 --> 00:00:23,279
can't so i can just see my slides

00:00:22,080 --> 00:00:25,519
that's okay though cause i've got a row

00:00:23,279 --> 00:00:26,320
of teddies lined up they're my audience

00:00:25,519 --> 00:00:28,000
they're you or

00:00:26,320 --> 00:00:30,320
you're them whichever i don't mind which

00:00:28,000 --> 00:00:32,640
um anyway thanks for joining me

00:00:30,320 --> 00:00:33,840
this is me i'm carlton gibson carlton

00:00:32,640 --> 00:00:35,920
gibson on um

00:00:33,840 --> 00:00:37,680
github and twitter you can find me there

00:00:35,920 --> 00:00:39,360
nothing at all to do with this talk but

00:00:37,680 --> 00:00:41,120
i do a podcast on django with my co-host

00:00:39,360 --> 00:00:42,320
will vincent called django chat

00:00:41,120 --> 00:00:43,600
essentially we have guests from around

00:00:42,320 --> 00:00:45,200
the community we chat about django if

00:00:43,600 --> 00:00:48,640
you haven't already you should check out

00:00:45,200 --> 00:00:49,680
the podcast djangochat.com this talk is

00:00:48,640 --> 00:00:51,520
called

00:00:49,680 --> 00:00:53,280
choose and choose quickly it's about

00:00:51,520 --> 00:00:54,960
optimizing model choice field

00:00:53,280 --> 00:00:56,879
it's a topic that i think of as one of

00:00:54,960 --> 00:00:58,559
the first ports of call of everyday

00:00:56,879 --> 00:01:01,120
django optimization

00:00:58,559 --> 00:01:02,480
i see a lot of issue reports i'm lucky

00:01:01,120 --> 00:01:04,720
enough along with my colleague marius

00:01:02,480 --> 00:01:06,640
feliciak to be a django fellow

00:01:04,720 --> 00:01:08,960
the django fellows marist and i are

00:01:06,640 --> 00:01:10,320
contracted by the dsf django software

00:01:08,960 --> 00:01:12,400
foundation to do the day-to-day

00:01:10,320 --> 00:01:15,360
maintenance that keeps the project going

00:01:12,400 --> 00:01:16,400
we handle things like treat ticket

00:01:15,360 --> 00:01:19,280
triage we do

00:01:16,400 --> 00:01:21,040
patch review we do security issues we

00:01:19,280 --> 00:01:22,479
handle the releases right it's the kind

00:01:21,040 --> 00:01:23,920
of stuff that on a project the size of

00:01:22,479 --> 00:01:24,720
django's just otherwise wouldn't get

00:01:23,920 --> 00:01:26,960
done

00:01:24,720 --> 00:01:29,119
and as a fellow i see a lot of tickets

00:01:26,960 --> 00:01:32,000
we get three to five new tickets a day

00:01:29,119 --> 00:01:32,880
every single day and then when i'm not

00:01:32,000 --> 00:01:34,479
being a fellow

00:01:32,880 --> 00:01:36,400
i help maintain various packages in the

00:01:34,479 --> 00:01:37,200
django ecosystem and for this talk the

00:01:36,400 --> 00:01:39,600
relev

00:01:37,200 --> 00:01:40,240
one's a django rest framework and django

00:01:39,600 --> 00:01:43,200
filter

00:01:40,240 --> 00:01:44,240
and they have a lot of tickets too on

00:01:43,200 --> 00:01:46,560
all three

00:01:44,240 --> 00:01:48,159
i see frequent issues come on come in

00:01:46,560 --> 00:01:51,280
and there's some variation

00:01:48,159 --> 00:01:54,560
on model choice field is slow

00:01:51,280 --> 00:01:55,600
django's slow or the admin slow or form

00:01:54,560 --> 00:01:57,759
rendering slow

00:01:55,600 --> 00:01:59,119
or the browseable api slow or django

00:01:57,759 --> 00:02:00,880
filter is slow

00:01:59,119 --> 00:02:02,399
and when i say day to day i mean it

00:02:00,880 --> 00:02:03,520
literally while just while i was

00:02:02,399 --> 00:02:05,680
preparing this talk

00:02:03,520 --> 00:02:07,759
there was a thread on twitter enabling

00:02:05,680 --> 00:02:09,360
the browser api took rendering from one

00:02:07,759 --> 00:02:11,280
second to 20 seconds

00:02:09,360 --> 00:02:12,640
how do i disable that can i do the same

00:02:11,280 --> 00:02:14,879
for django filter

00:02:12,640 --> 00:02:15,760
right another issue on drf django rest

00:02:14,879 --> 00:02:17,760
framework again

00:02:15,760 --> 00:02:19,360
whilst i was preparing this talk

00:02:17,760 --> 00:02:21,840
enabling filtering on foreign keys

00:02:19,360 --> 00:02:24,000
slowed down rendering by 10 times

00:02:21,840 --> 00:02:25,440
another issue on django filter again

00:02:24,000 --> 00:02:26,800
while preparing this talk

00:02:25,440 --> 00:02:29,280
form rendering is making too many

00:02:26,800 --> 00:02:30,319
database queries the point is that i see

00:02:29,280 --> 00:02:31,760
a lot of these

00:02:30,319 --> 00:02:34,480
they're really common and they affect

00:02:31,760 --> 00:02:37,120
everyone it's not quote a beginner issue

00:02:34,480 --> 00:02:38,800
so that's what we're going to look at

00:02:37,120 --> 00:02:39,360
we're going to set up a simple django

00:02:38,800 --> 00:02:40,560
project

00:02:39,360 --> 00:02:42,959
and then we're going to show three

00:02:40,560 --> 00:02:45,040
examples of how how slow performance

00:02:42,959 --> 00:02:47,280
with model choice field can arise

00:02:45,040 --> 00:02:49,040
finally we'll see three strategies for

00:02:47,280 --> 00:02:50,400
addressing that slow performance

00:02:49,040 --> 00:02:52,080
my hope is that the next time you're

00:02:50,400 --> 00:02:54,080
working with a model choice field maybe

00:02:52,080 --> 00:02:54,640
in the admin or with drf or django

00:02:54,080 --> 00:02:56,879
filter

00:02:54,640 --> 00:02:57,760
you'll know how to make it behave so

00:02:56,879 --> 00:03:00,159
let's go

00:02:57,760 --> 00:03:01,360
let's start with a simple django project

00:03:00,159 --> 00:03:02,720
we're going to have a couple of models

00:03:01,360 --> 00:03:04,480
first of all an author

00:03:02,720 --> 00:03:05,840
it's just got a name field nothing else

00:03:04,480 --> 00:03:06,239
then obviously we've got an author we

00:03:05,840 --> 00:03:08,480
need

00:03:06,239 --> 00:03:10,640
we need books a book field has just a

00:03:08,480 --> 00:03:13,280
name again and then it has a foreign key

00:03:10,640 --> 00:03:14,480
to the author let's set that up to use

00:03:13,280 --> 00:03:16,000
with restaurant

00:03:14,480 --> 00:03:17,599
framework we'll have a couple of rest

00:03:16,000 --> 00:03:19,440
framework serializers so we have an

00:03:17,599 --> 00:03:20,080
author serializer which just serializes

00:03:19,440 --> 00:03:22,000
the name

00:03:20,080 --> 00:03:23,760
and then we'll have a book serializer

00:03:22,000 --> 00:03:25,519
which serializes

00:03:23,760 --> 00:03:27,120
the name of the book but also the

00:03:25,519 --> 00:03:28,720
foreign key to the author

00:03:27,120 --> 00:03:30,879
then we need a couple of views we'll

00:03:28,720 --> 00:03:33,760
have a book list

00:03:30,879 --> 00:03:35,040
which is a list create api view which is

00:03:33,760 --> 00:03:36,560
one of the generic views that rest

00:03:35,040 --> 00:03:38,400
framework provides and we'll just give

00:03:36,560 --> 00:03:39,120
that the query set of all the book

00:03:38,400 --> 00:03:40,959
objects

00:03:39,120 --> 00:03:42,799
and we'll give it the book serializer to

00:03:40,959 --> 00:03:44,159
to use and then we'll have an author

00:03:42,799 --> 00:03:47,280
detail view where we can

00:03:44,159 --> 00:03:48,640
drill through to that and um we'll give

00:03:47,280 --> 00:03:49,680
that all the authors and we'll use the

00:03:48,640 --> 00:03:51,840
author serial

00:03:49,680 --> 00:03:53,120
serializer if we root all that up and

00:03:51,840 --> 00:03:54,959
give it give

00:03:53,120 --> 00:03:56,879
the the django rest framework will give

00:03:54,959 --> 00:03:58,319
us the browseable api that we perhaps

00:03:56,879 --> 00:03:58,799
used to you must i'm hoping you've seen

00:03:58,319 --> 00:04:01,760
this

00:03:58,799 --> 00:04:03,760
we get a nice list of books um shows all

00:04:01,760 --> 00:04:05,040
of them it gives a hyperlink there to

00:04:03,760 --> 00:04:07,439
the author detail view

00:04:05,040 --> 00:04:08,319
and down at the bottom we get a nice

00:04:07,439 --> 00:04:10,400
generated

00:04:08,319 --> 00:04:14,560
form to create a new book with a drop

00:04:10,400 --> 00:04:16,320
down to pick the author

00:04:14,560 --> 00:04:18,239
and this drop down is our model choice

00:04:16,320 --> 00:04:21,120
field where there's a foreign key

00:04:18,239 --> 00:04:21,759
it will enable you to choose which which

00:04:21,120 --> 00:04:24,080
object

00:04:21,759 --> 00:04:25,520
is the one you want to uh populate the

00:04:24,080 --> 00:04:27,040
foreign key with now in this one it's

00:04:25,520 --> 00:04:28,639
rest frameworks it's not strictly model

00:04:27,040 --> 00:04:30,400
choice field it's model framework it's

00:04:28,639 --> 00:04:32,160
rest frameworks version of that

00:04:30,400 --> 00:04:34,160
because rest framework uses serializers

00:04:32,160 --> 00:04:34,720
not forms but for our purposes it's the

00:04:34,160 --> 00:04:36,400
same

00:04:34,720 --> 00:04:39,360
the important important point here is

00:04:36,400 --> 00:04:39,360
that there's two s

00:04:41,600 --> 00:04:44,800
nice and quick it's 100 milliseconds to

00:04:44,000 --> 00:04:47,360
render or something

00:04:44,800 --> 00:04:48,080
like that for reference here's the

00:04:47,360 --> 00:04:51,120
author detail

00:04:48,080 --> 00:04:54,400
view and that's got one sql query

00:04:51,120 --> 00:04:56,240
so what's the problem well there are two

00:04:54,400 --> 00:04:57,919
the problem with this with model choice

00:04:56,240 --> 00:05:00,080
field is that if you give it lots of

00:04:57,919 --> 00:05:01,520
data i've only got 10 authors but most

00:05:00,080 --> 00:05:02,400
production data sets have a few more

00:05:01,520 --> 00:05:04,320
than 10 rows

00:05:02,400 --> 00:05:06,240
if you get give it lots of data it can

00:05:04,320 --> 00:05:08,639
slow down the second part of that

00:05:06,240 --> 00:05:10,000
is his problem too when it does lazy

00:05:08,639 --> 00:05:10,400
related object lookups that's where

00:05:10,000 --> 00:05:11,520
you've got

00:05:10,400 --> 00:05:12,639
the book in hand so you've already

00:05:11,520 --> 00:05:14,560
fetched the book but then you want the

00:05:12,639 --> 00:05:16,560
author and so the django rrm has to go

00:05:14,560 --> 00:05:19,680
back to the database and request

00:05:16,560 --> 00:05:21,280
the author object for you so we're going

00:05:19,680 --> 00:05:22,960
to see that in action and here

00:05:21,280 --> 00:05:25,600
for these examples i want to thank andy

00:05:22,960 --> 00:05:27,120
eide for a lovely data set which is of

00:05:25,600 --> 00:05:28,800
australian suburbs

00:05:27,120 --> 00:05:30,560
so let's look at those first of all we

00:05:28,800 --> 00:05:32,320
have states australian states we have a

00:05:30,560 --> 00:05:33,039
state model queensland new south wales

00:05:32,320 --> 00:05:35,199
and so on

00:05:33,039 --> 00:05:36,080
we've got a name which is like qld or

00:05:35,199 --> 00:05:37,440
nsw

00:05:36,080 --> 00:05:39,120
a long name which is the full name

00:05:37,440 --> 00:05:40,880
queensland um

00:05:39,120 --> 00:05:42,400
and then a couple of other properties

00:05:40,880 --> 00:05:44,240
then we have a suburb

00:05:42,400 --> 00:05:46,320
the suburb is just a name and a postcode

00:05:44,240 --> 00:05:48,080
and then a foreign key to the state

00:05:46,320 --> 00:05:49,600
now the first thing the first thing here

00:05:48,080 --> 00:05:52,639
is that there are 17

00:05:49,600 --> 00:05:53,520
000 of these suburbs that's a lot and

00:05:52,639 --> 00:05:55,039
then the second

00:05:53,520 --> 00:05:57,440
is that in the string representation

00:05:55,039 --> 00:06:01,120
here we've got this self self

00:05:57,440 --> 00:06:03,360
self.state reference because

00:06:01,120 --> 00:06:04,479
every state's got a red hill so you need

00:06:03,360 --> 00:06:06,000
so you need red hill

00:06:04,479 --> 00:06:08,080
new south wales otherwise you're going

00:06:06,000 --> 00:06:10,160
to get lost now this is going to get let

00:06:08,080 --> 00:06:11,600
us see the lazy related object look up

00:06:10,160 --> 00:06:13,919
in action right

00:06:11,600 --> 00:06:15,520
now the example itself might be a bit

00:06:13,919 --> 00:06:16,960
contrived but the point is you can't get

00:06:15,520 --> 00:06:18,639
rid of these relationships these foreign

00:06:16,960 --> 00:06:20,479
key relationships in your models

00:06:18,639 --> 00:06:22,639
so let's put these models in place and

00:06:20,479 --> 00:06:24,479
we'll see we'll see three examples of

00:06:22,639 --> 00:06:25,840
the issue in action

00:06:24,479 --> 00:06:27,280
the three examples first we're going to

00:06:25,840 --> 00:06:28,080
look at a django rest framework

00:06:27,280 --> 00:06:30,160
serializer

00:06:28,080 --> 00:06:32,000
rendering its form then we're going to

00:06:30,160 --> 00:06:32,960
look at a regular django form using

00:06:32,000 --> 00:06:34,000
django filter

00:06:32,960 --> 00:06:36,319
and then we're going to look at the

00:06:34,000 --> 00:06:38,479
django admin with list editable so let's

00:06:36,319 --> 00:06:40,479
get straight on

00:06:38,479 --> 00:06:41,570
example one django rest framework

00:06:40,479 --> 00:06:42,720
serializer form

00:06:41,570 --> 00:06:45,199
[Music]

00:06:42,720 --> 00:06:47,199
let's extend our author model okay so we

00:06:45,199 --> 00:06:48,639
give it a new relation to the suburb

00:06:47,199 --> 00:06:51,199
which is this foreign key that we've

00:06:48,639 --> 00:06:53,039
this is the new model we've created then

00:06:51,199 --> 00:06:54,639
if we update our serializer and all we

00:06:53,039 --> 00:06:56,319
have to do is add in the second field

00:06:54,639 --> 00:06:59,280
here the new suburb field

00:06:56,319 --> 00:07:01,039
and we can refresh we get our author

00:06:59,280 --> 00:07:02,240
detail view and we get with the extra

00:07:01,039 --> 00:07:04,160
suburb fields

00:07:02,240 --> 00:07:06,319
rendered and we get the form there at

00:07:04,160 --> 00:07:07,919
the bottom and if we click on that form

00:07:06,319 --> 00:07:08,560
we get our drop down with our foreign

00:07:07,919 --> 00:07:12,960
key up

00:07:08,560 --> 00:07:15,520
options but we we've got 1002

00:07:12,960 --> 00:07:16,319
sql queries we went from one query on

00:07:15,520 --> 00:07:18,479
this view

00:07:16,319 --> 00:07:20,880
now why the cut off why only a thousand

00:07:18,479 --> 00:07:23,520
they were meant to be 17 000 suburbs

00:07:20,880 --> 00:07:25,120
well django rest framework knows that

00:07:23,520 --> 00:07:26,560
you don't want to render 17 000

00:07:25,120 --> 00:07:28,080
it has this cut off you can set that to

00:07:26,560 --> 00:07:28,639
whatever you want but by default it's a

00:07:28,080 --> 00:07:30,319
thousand

00:07:28,639 --> 00:07:32,319
so we did all that work we did that

00:07:30,319 --> 00:07:33,280
thousand sql queries and we still didn't

00:07:32,319 --> 00:07:35,120
get the full

00:07:33,280 --> 00:07:37,120
full choice this rendered we'll come

00:07:35,120 --> 00:07:38,639
back to that but regardless a thousand

00:07:37,120 --> 00:07:41,280
queries is not good

00:07:38,639 --> 00:07:43,840
so the a the browseable api is slow goes

00:07:41,280 --> 00:07:46,160
the complaint

00:07:43,840 --> 00:07:47,759
example two is a regular django form

00:07:46,160 --> 00:07:50,800
using django filter

00:07:47,759 --> 00:07:52,800
so let's go to our book list

00:07:50,800 --> 00:07:55,280
what we have to do here to use to use

00:07:52,800 --> 00:07:57,759
filtering

00:07:55,280 --> 00:07:58,400
is to add a filter back end argument to

00:07:57,759 --> 00:07:59,599
the

00:07:58,400 --> 00:08:02,080
to the view list so we give it the

00:07:59,599 --> 00:08:03,599
django filter back end and we specify

00:08:02,080 --> 00:08:05,440
the filter set fields that we want to

00:08:03,599 --> 00:08:08,240
filter on so let's filter on author

00:08:05,440 --> 00:08:09,039
and the author's suburb then when we

00:08:08,240 --> 00:08:11,199
reload

00:08:09,039 --> 00:08:13,280
we get our same nice book list and this

00:08:11,199 --> 00:08:14,639
is that there's this cute little filters

00:08:13,280 --> 00:08:17,039
button up at the top

00:08:14,639 --> 00:08:19,039
if we click on that we get our drop down

00:08:17,039 --> 00:08:19,680
with the suburbs and it's all of this

00:08:19,039 --> 00:08:21,840
time

00:08:19,680 --> 00:08:23,520
all of them this time all 17 000 our

00:08:21,840 --> 00:08:24,960
browser browser might lag a bit

00:08:23,520 --> 00:08:28,759
displaying that full list

00:08:24,960 --> 00:08:31,919
but it's there however there were 17

00:08:28,759 --> 00:08:34,080
871 sql queries ouch

00:08:31,919 --> 00:08:35,440
right django filter uses a regular

00:08:34,080 --> 00:08:37,519
django form which doesn't have the

00:08:35,440 --> 00:08:38,959
cutoff that the rf puts in so it just

00:08:37,519 --> 00:08:40,560
keeps on fetching

00:08:38,959 --> 00:08:42,399
now if you happen to have say debug

00:08:40,560 --> 00:08:42,719
toolbars sql tracing on when you run

00:08:42,399 --> 00:08:45,040
this

00:08:42,719 --> 00:08:46,959
this kind of query it will take an age

00:08:45,040 --> 00:08:48,560
that's one reason to keep debug toolbar

00:08:46,959 --> 00:08:50,000
sql tracing on in development because

00:08:48,560 --> 00:08:51,440
you're going to notice them

00:08:50,000 --> 00:08:53,040
likely you don't want it on your tests

00:08:51,440 --> 00:08:56,080
though but regardless

00:08:53,040 --> 00:08:58,080
17 000 queries is way too many so django

00:08:56,080 --> 00:09:01,519
filter is slow

00:08:58,080 --> 00:09:04,160
onward example three the django admin

00:09:01,519 --> 00:09:06,560
would list editable

00:09:04,160 --> 00:09:08,000
so this time let's extend our book model

00:09:06,560 --> 00:09:09,839
here we're going to add foreign keys to

00:09:08,000 --> 00:09:11,120
simple publisher and topic models they

00:09:09,839 --> 00:09:11,760
just have a name field they're nothing

00:09:11,120 --> 00:09:13,920
to them

00:09:11,760 --> 00:09:15,839
okay then with our with our book model

00:09:13,920 --> 00:09:17,839
extended we're going to add an

00:09:15,839 --> 00:09:19,680
admin so we put list display we want the

00:09:17,839 --> 00:09:20,240
id the name the author the publisher and

00:09:19,680 --> 00:09:22,240
the topic

00:09:20,240 --> 00:09:24,640
brilliant let's load it up and there's

00:09:22,240 --> 00:09:26,000
our nice admin and look it's django 3.1

00:09:24,640 --> 00:09:28,800
so it's got a nice sidebar

00:09:26,000 --> 00:09:30,480
all looking good and then we're browsing

00:09:28,800 --> 00:09:32,240
in the admin docs what we're trying to

00:09:30,480 --> 00:09:34,880
remember one of the billion admin

00:09:32,240 --> 00:09:36,000
api options and then we see this list

00:09:34,880 --> 00:09:38,160
editable

00:09:36,000 --> 00:09:40,720
what could possibly go wrong well let's

00:09:38,160 --> 00:09:44,240
add that then to our admin

00:09:40,720 --> 00:09:45,680
we put the

00:09:44,240 --> 00:09:47,839
publisher and topic the foreign key

00:09:45,680 --> 00:09:49,360
fields and we reload our ammo and we get

00:09:47,839 --> 00:09:51,680
this nice list view with a

00:09:49,360 --> 00:09:52,720
nice form and it's got options for each

00:09:51,680 --> 00:09:54,240
of the foreign keys

00:09:52,720 --> 00:09:57,040
so the ingredient the no starch the

00:09:54,240 --> 00:10:00,480
symphony to start django the flask there

00:09:57,040 --> 00:10:01,600
here we had 35 queries now that may not

00:10:00,480 --> 00:10:04,720
look like a knot

00:10:01,600 --> 00:10:05,760
a lot certainly not compared to 17 871

00:10:04,720 --> 00:10:08,320
queries it's not

00:10:05,760 --> 00:10:10,079
but let's go back to the screenshot like

00:10:08,320 --> 00:10:13,040
for each row here

00:10:10,079 --> 00:10:14,720
for each of the foreign keys the the the

00:10:13,040 --> 00:10:17,120
choice field is doing a lookup

00:10:14,720 --> 00:10:19,519
i've only got 10 rows here but the admin

00:10:17,120 --> 00:10:21,120
by default will show you 100 rows a page

00:10:19,519 --> 00:10:22,560
and then for each of the foreign keys

00:10:21,120 --> 00:10:24,480
i've only got 10 records

00:10:22,560 --> 00:10:26,079
but you might have hundreds of records

00:10:24,480 --> 00:10:28,000
you might have thousands of records and

00:10:26,079 --> 00:10:30,000
then that soon starts adding up

00:10:28,000 --> 00:10:32,000
if then on top of that the string

00:10:30,000 --> 00:10:33,920
representation that goes into the select

00:10:32,000 --> 00:10:35,839
box there the ingrid the no starch the

00:10:33,920 --> 00:10:38,000
symphony the django if that involves a

00:10:35,839 --> 00:10:39,519
lazy reference to a related object like

00:10:38,000 --> 00:10:41,440
it does with our suburb model

00:10:39,519 --> 00:10:43,120
then you're going to be in trouble i was

00:10:41,440 --> 00:10:43,760
going to put a foreign key in here to

00:10:43,120 --> 00:10:45,519
the suburbs

00:10:43,760 --> 00:10:47,040
showing you how slow it goes but it was

00:10:45,519 --> 00:10:49,360
just too slow it took a couple of

00:10:47,040 --> 00:10:52,640
minutes or so without sql tracing on

00:10:49,360 --> 00:10:54,079
with it with sql tracing on it for some

00:10:52,640 --> 00:10:55,760
value i've never finished it literally

00:10:54,079 --> 00:10:57,600
never finished i put it on go for dinner

00:10:55,760 --> 00:10:59,360
come back still not done

00:10:57,600 --> 00:11:01,040
the point is that people enable list

00:10:59,360 --> 00:11:02,560
editable against the production data set

00:11:01,040 --> 00:11:03,360
and then the admin effect effectively

00:11:02,560 --> 00:11:05,440
freezes

00:11:03,360 --> 00:11:06,399
well that's not good enough so the admin

00:11:05,440 --> 00:11:09,600
is slow

00:11:06,399 --> 00:11:10,959
right so those were three examples right

00:11:09,600 --> 00:11:13,760
the rest framework form

00:11:10,959 --> 00:11:15,360
the regular form with django filter and

00:11:13,760 --> 00:11:17,519
the admin with list editable

00:11:15,360 --> 00:11:18,959
they show up they show the main ways i

00:11:17,519 --> 00:11:19,519
see the problems with model choice field

00:11:18,959 --> 00:11:21,519
coming up

00:11:19,519 --> 00:11:22,800
time and time and time again you do

00:11:21,519 --> 00:11:24,560
something simple

00:11:22,800 --> 00:11:26,560
it works fine with a small amount of

00:11:24,560 --> 00:11:28,000
data in development then you put it into

00:11:26,560 --> 00:11:31,360
production with a decent amount of data

00:11:28,000 --> 00:11:31,920
and boom suddenly it's slow so what can

00:11:31,360 --> 00:11:34,399
you do

00:11:31,920 --> 00:11:35,279
well for three problems we've got three

00:11:34,399 --> 00:11:37,680
strategies

00:11:35,279 --> 00:11:39,600
let's look at do strategy one do less

00:11:37,680 --> 00:11:41,279
strategy two don't repeat worker 23 do

00:11:39,600 --> 00:11:44,320
the work early let's look at those

00:11:41,279 --> 00:11:46,079
31 do less the issue is all these sql

00:11:44,320 --> 00:11:47,519
queries so each time we're trying to

00:11:46,079 --> 00:11:49,519
generate a choice for a suburb we have

00:11:47,519 --> 00:11:51,920
to go off and fetch the related state

00:11:49,519 --> 00:11:53,440
we do that 17 000 times well there are

00:11:51,920 --> 00:11:54,560
only nine states and that's essentially

00:11:53,440 --> 00:11:56,560
2 000 identical

00:11:54,560 --> 00:11:58,560
sql queries per state the thought is

00:11:56,560 --> 00:12:00,320
well if only we could cut that down

00:11:58,560 --> 00:12:01,600
well we can django comes with two great

00:12:00,320 --> 00:12:03,279
tools to help us here

00:12:01,600 --> 00:12:05,360
select related which is more or less for

00:12:03,279 --> 00:12:06,560
foreign keys and prefix related which is

00:12:05,360 --> 00:12:08,560
for many to many

00:12:06,560 --> 00:12:10,000
both of these allow you to say hey i'm

00:12:08,560 --> 00:12:11,600
going to want that later please go and

00:12:10,000 --> 00:12:13,279
get it for me now so that we don't have

00:12:11,600 --> 00:12:15,279
to go back to the database and

00:12:13,279 --> 00:12:16,639
next time i'm not going to focus on the

00:12:15,279 --> 00:12:18,079
details of these there's lots of good

00:12:16,639 --> 00:12:19,839
stuff out there about select related

00:12:18,079 --> 00:12:21,920
prefetch related not least in the django

00:12:19,839 --> 00:12:24,399
docs query set reference that goes into

00:12:21,920 --> 00:12:26,000
some detail instead i want to show you

00:12:24,399 --> 00:12:27,279
how can use these in our forms

00:12:26,000 --> 00:12:29,360
here i'm just going to use select

00:12:27,279 --> 00:12:32,800
related so let's return

00:12:29,360 --> 00:12:34,320
to our rest framework author detail view

00:12:32,800 --> 00:12:35,920
all we have to do is update the

00:12:34,320 --> 00:12:37,360
serializer instead of letting the

00:12:35,920 --> 00:12:39,120
serializer auto

00:12:37,360 --> 00:12:41,120
the suburb field we declare it manually

00:12:39,120 --> 00:12:43,120
so suburb is equal to a primary

00:12:41,120 --> 00:12:45,720
related field and then we give it the

00:12:43,120 --> 00:12:47,519
query set so we give it subject

00:12:45,720 --> 00:12:48,720
suburb.objects.org that's the default

00:12:47,519 --> 00:12:50,959
query set for the

00:12:48,720 --> 00:12:52,160
suburb model and then we say select

00:12:50,959 --> 00:12:54,480
related state

00:12:52,160 --> 00:12:56,160
right please go and get the related

00:12:54,480 --> 00:12:57,440
states when you get these objects so

00:12:56,160 --> 00:12:58,560
that we don't have to go back to the

00:12:57,440 --> 00:13:01,040
database later

00:12:58,560 --> 00:13:01,680
then we refresh we still get the author

00:13:01,040 --> 00:13:03,200
details

00:13:01,680 --> 00:13:05,120
view rendered exactly the same it's got

00:13:03,200 --> 00:13:06,000
the extra suburb field it's still got

00:13:05,120 --> 00:13:07,760
the form at the bottom

00:13:06,000 --> 00:13:09,680
if we click on the form we still get our

00:13:07,760 --> 00:13:11,040
drop down with our foreign key options

00:13:09,680 --> 00:13:13,200
but

00:13:11,040 --> 00:13:15,519
we're back down to four sql queries that

00:13:13,200 --> 00:13:16,959
was from a thousand and two remember

00:13:15,519 --> 00:13:18,959
we still have to decide what we're going

00:13:16,959 --> 00:13:20,399
to do about that cutoff of drf of django

00:13:18,959 --> 00:13:22,240
rest frameworks with 17

00:13:20,399 --> 00:13:23,360
000 pro records that's probably too many

00:13:22,240 --> 00:13:24,399
to put in a drop down so we're going to

00:13:23,360 --> 00:13:26,240
need to do something

00:13:24,399 --> 00:13:27,839
but at least now we're not knocked out

00:13:26,240 --> 00:13:29,519
of the game just by doing the default at

00:13:27,839 --> 00:13:30,880
least now it's still speedy

00:13:29,519 --> 00:13:32,560
let's do the same for filtering let's

00:13:30,880 --> 00:13:33,200
look at the same there django breast

00:13:32,560 --> 00:13:35,279
framework has

00:13:33,200 --> 00:13:36,959
generic filter back-ends that detach the

00:13:35,279 --> 00:13:39,040
filtering logic from the view

00:13:36,959 --> 00:13:40,320
so generic api view which is the

00:13:39,040 --> 00:13:42,800
superclass of all

00:13:40,320 --> 00:13:44,880
all your views your list api view your

00:13:42,800 --> 00:13:46,880
create retrieve api view

00:13:44,880 --> 00:13:48,000
they're all subclasses of generic api

00:13:46,880 --> 00:13:51,199
view and that defines

00:13:48,000 --> 00:13:52,720
this filter query set method what filter

00:13:51,199 --> 00:13:54,240
query set does is it goes through a list

00:13:52,720 --> 00:13:54,880
of filter backends that are defined on

00:13:54,240 --> 00:13:56,880
the view

00:13:54,880 --> 00:13:58,480
it instantiates each one and then it

00:13:56,880 --> 00:14:00,079
passes it this it calls its

00:13:58,480 --> 00:14:02,639
filter query set method to actually

00:14:00,079 --> 00:14:04,480
filter the query set so in order to use

00:14:02,639 --> 00:14:05,680
this we have to subclass the django

00:14:04,480 --> 00:14:07,440
filter back end so

00:14:05,680 --> 00:14:08,880
custom filter back ends subclass of

00:14:07,440 --> 00:14:10,959
django filter back end

00:14:08,880 --> 00:14:13,279
and we implement this get to filter set

00:14:10,959 --> 00:14:14,639
method um

00:14:13,279 --> 00:14:16,480
first of all we call super to get the

00:14:14,639 --> 00:14:18,160
filter set now what is a filter set

00:14:16,480 --> 00:14:20,480
a django filter filter set does two

00:14:18,160 --> 00:14:22,160
things first of all it creates a form to

00:14:20,480 --> 00:14:23,440
pull the parameters you want to filter

00:14:22,160 --> 00:14:26,320
on from the query string

00:14:23,440 --> 00:14:28,160
and then it uses those those uses the

00:14:26,320 --> 00:14:29,760
clean data from that form to apply the

00:14:28,160 --> 00:14:31,760
filter calls to the query tip

00:14:29,760 --> 00:14:33,600
so we get the filter set and then we get

00:14:31,760 --> 00:14:35,040
its form and then we get its author

00:14:33,600 --> 00:14:35,760
suburb field which is the one we're

00:14:35,040 --> 00:14:38,000
interested in

00:14:35,760 --> 00:14:40,880
and we set the query set on that to the

00:14:38,000 --> 00:14:45,839
suburb dot objects.select related state

00:14:40,880 --> 00:14:45,839
which is exactly the same

00:14:47,040 --> 00:14:50,720
it's all the suburbs but please go and

00:14:48,959 --> 00:14:52,399
pre-fetch or pre-order select the

00:14:50,720 --> 00:14:53,680
related states so we don't have to go

00:14:52,399 --> 00:14:55,440
back for them later

00:14:53,680 --> 00:14:57,600
next we update our view there we just

00:14:55,440 --> 00:14:59,040
set the filter back in to be our custom

00:14:57,600 --> 00:14:59,360
filter back end rather than the default

00:14:59,040 --> 00:15:00,959
one

00:14:59,360 --> 00:15:03,120
the default angle filter back in and

00:15:00,959 --> 00:15:03,920
then that's it the filter set fields are

00:15:03,120 --> 00:15:06,880
exactly the same

00:15:03,920 --> 00:15:07,279
we refresh again we still get our book

00:15:06,880 --> 00:15:09,120
list

00:15:07,279 --> 00:15:10,639
we still get our nice little filters

00:15:09,120 --> 00:15:12,320
button there if we click that

00:15:10,639 --> 00:15:14,320
we still get our drop down of options

00:15:12,320 --> 00:15:15,760
all 17 000 of them again the browser

00:15:14,320 --> 00:15:18,720
might feel a bit laggy here

00:15:15,760 --> 00:15:21,040
but we're rendering those but we only

00:15:18,720 --> 00:15:21,920
had six sql queries now that's much more

00:15:21,040 --> 00:15:24,240
like it

00:15:21,920 --> 00:15:25,600
because we used select we related we

00:15:24,240 --> 00:15:27,680
were able to render any

00:15:25,600 --> 00:15:29,440
even far too much data we were able to

00:15:27,680 --> 00:15:32,240
render that data quickly

00:15:29,440 --> 00:15:35,680
so that's strategy one do less it's

00:15:32,240 --> 00:15:35,680
probably the most important

00:15:35,839 --> 00:15:39,360
the trick is that you tell model choice

00:15:38,880 --> 00:15:41,839
field

00:15:39,360 --> 00:15:43,040
exactly what to go and fetch strategy

00:15:41,839 --> 00:15:44,639
two is don't repeat

00:15:43,040 --> 00:15:47,680
pete work and here we're gonna look at

00:15:44,639 --> 00:15:47,680
the admin example

00:15:47,759 --> 00:15:51,040
remember that we had each for each row

00:15:50,480 --> 00:15:53,279
we had

00:15:51,040 --> 00:15:54,800
a query make for each foreign key we

00:15:53,279 --> 00:15:56,399
were going to for each of the

00:15:54,800 --> 00:15:57,920
the 10 rows there's three foreign keys

00:15:56,399 --> 00:15:59,279
and we have basically 30 queries

00:15:57,920 --> 00:16:01,519
fetching each of the data

00:15:59,279 --> 00:16:02,800
what we want to do is reuse the same

00:16:01,519 --> 00:16:05,199
query set one

00:16:02,800 --> 00:16:06,880
one per foreign key but we could so that

00:16:05,199 --> 00:16:08,000
it's only fetch once but we can't quite

00:16:06,880 --> 00:16:10,000
do that because model choice

00:16:08,000 --> 00:16:12,079
field does everything it can to install

00:16:10,000 --> 00:16:13,279
assure that query sets aren't stale so

00:16:12,079 --> 00:16:13,920
if you pass it a query set the first

00:16:13,279 --> 00:16:15,440
thing it does is

00:16:13,920 --> 00:16:17,120
clone it and then the next time you try

00:16:15,440 --> 00:16:18,240
and access it it'll clone it again so

00:16:17,120 --> 00:16:20,320
that it's fresh the only thing that's

00:16:18,240 --> 00:16:22,639
worse than slow data is wrong data

00:16:20,320 --> 00:16:24,399
so instead of setting the query set we

00:16:22,639 --> 00:16:25,600
have to set the choices directly on the

00:16:24,399 --> 00:16:26,959
form field

00:16:25,600 --> 00:16:29,279
so in order to do this we're going to

00:16:26,959 --> 00:16:31,680
create a form set now a form set is

00:16:29,279 --> 00:16:33,600
responsible for managing a list of forms

00:16:31,680 --> 00:16:35,680
the table that the admin presents to us

00:16:33,600 --> 00:16:36,399
that's a form set with one form for each

00:16:35,680 --> 00:16:38,639
row

00:16:36,399 --> 00:16:40,240
so here in the unit method we get we set

00:16:38,639 --> 00:16:42,720
some properties on the form set we say

00:16:40,240 --> 00:16:44,560
self.author choices and then we

00:16:42,720 --> 00:16:47,279
instantiate a model choice field

00:16:44,560 --> 00:16:48,480
and we give it all the author objects

00:16:47,279 --> 00:16:51,199
and then we call choices

00:16:48,480 --> 00:16:52,800
and then we're casting that to a list so

00:16:51,199 --> 00:16:54,399
because choices gives us an iterator and

00:16:52,800 --> 00:16:54,639
we want to reuse it so we have to turn

00:16:54,399 --> 00:16:56,800
it

00:16:54,639 --> 00:16:58,240
into a list so we get the author choices

00:16:56,800 --> 00:17:00,639
then we get the publisher choices

00:16:58,240 --> 00:17:01,920
then we get the topic choices then we

00:17:00,639 --> 00:17:03,440
need to

00:17:01,920 --> 00:17:05,360
implement a method called get form

00:17:03,440 --> 00:17:07,839
keyword args which is is how

00:17:05,360 --> 00:17:09,439
a form set can communicate with its form

00:17:07,839 --> 00:17:11,199
for each form that instantiates it's

00:17:09,439 --> 00:17:12,240
going to pass the keyword args that we

00:17:11,199 --> 00:17:14,400
that we return here

00:17:12,240 --> 00:17:15,919
so in the key we get the super we call

00:17:14,400 --> 00:17:16,319
the super method to get the base keyword

00:17:15,919 --> 00:17:19,199
args

00:17:16,319 --> 00:17:21,199
and then we add our choices in author

00:17:19,199 --> 00:17:21,919
choices publisher choices topic choices

00:17:21,199 --> 00:17:23,520
there

00:17:21,919 --> 00:17:25,919
then with the form set in place we

00:17:23,520 --> 00:17:26,640
create a form this looks for the keyword

00:17:25,919 --> 00:17:29,919
args that

00:17:26,640 --> 00:17:31,440
the if they're said so author choices

00:17:29,919 --> 00:17:33,679
if if all of the choices are in there

00:17:31,440 --> 00:17:34,799
we'll have them if published choices are

00:17:33,679 --> 00:17:35,760
in there we'll have them if topic

00:17:34,799 --> 00:17:36,960
choices are in there

00:17:35,760 --> 00:17:38,960
then it calls the super method to

00:17:36,960 --> 00:17:40,880
instantiate the form and then once the

00:17:38,960 --> 00:17:42,720
form set up

00:17:40,880 --> 00:17:44,240
if the if the keyword articles were

00:17:42,720 --> 00:17:45,440
provided we set them on the relevant

00:17:44,240 --> 00:17:47,919
fields

00:17:45,440 --> 00:17:49,840
note we're not setting the query set

00:17:47,919 --> 00:17:51,600
we're setting the actual calculated

00:17:49,840 --> 00:17:53,919
choices so when the field is rendered

00:17:51,600 --> 00:17:56,320
they don't have to be generated again

00:17:53,919 --> 00:17:57,840
then we go back to our admin and we have

00:17:56,320 --> 00:17:59,600
to update our admin to

00:17:57,840 --> 00:18:01,760
to and tell to use it so there's two

00:17:59,600 --> 00:18:03,360
methods first get change list form

00:18:01,760 --> 00:18:05,360
which tells it which if we provide the

00:18:03,360 --> 00:18:06,400
form keyword arc there it will use our

00:18:05,360 --> 00:18:08,000
custom form

00:18:06,400 --> 00:18:09,520
then we have get change this form set

00:18:08,000 --> 00:18:09,840
which we have to do exactly the same

00:18:09,520 --> 00:18:11,919
thing

00:18:09,840 --> 00:18:13,039
and tell it to use our custom form set

00:18:11,919 --> 00:18:15,840
then with that in place

00:18:13,039 --> 00:18:17,360
we can refresh and we still get our form

00:18:15,840 --> 00:18:17,919
set with the drop downs and all the rest

00:18:17,360 --> 00:18:20,880
of it

00:18:17,919 --> 00:18:23,360
but we did there were only 11 sql

00:18:20,880 --> 00:18:25,440
queries and that's down from 35 remember

00:18:23,360 --> 00:18:27,440
so instead of doing the work each time

00:18:25,440 --> 00:18:29,600
for each foreign key for each row

00:18:27,440 --> 00:18:32,799
we do it once at the form set level and

00:18:29,600 --> 00:18:36,400
then pass that data down into the form

00:18:32,799 --> 00:18:39,520
that's strategy two don't repeat work

00:18:36,400 --> 00:18:40,559
strategy three do the work early well

00:18:39,520 --> 00:18:43,039
our suburbs

00:18:40,559 --> 00:18:44,640
are totally static they don't change

00:18:43,039 --> 00:18:46,480
maybe you know they might change

00:18:44,640 --> 00:18:48,400
once in a decade i don't know we don't

00:18:46,480 --> 00:18:49,520
have to fetch them on every single

00:18:48,400 --> 00:18:52,160
request

00:18:49,520 --> 00:18:53,919
instead we could calculate the choices

00:18:52,160 --> 00:18:55,360
up front like we have at the top here so

00:18:53,919 --> 00:18:56,000
the author choices we could just put

00:18:55,360 --> 00:18:58,960
those in straight

00:18:56,000 --> 00:19:00,559
into a variable the publisher choices

00:18:58,960 --> 00:19:03,039
topic choices oh we've got

00:19:00,559 --> 00:19:04,640
suburb choices we're calculating as well

00:19:03,039 --> 00:19:06,240
this is the same code that we had in our

00:19:04,640 --> 00:19:08,320
form set at the moment ago but

00:19:06,240 --> 00:19:09,840
we've extracted it and then having done

00:19:08,320 --> 00:19:11,840
that we can put those values into a

00:19:09,840 --> 00:19:13,919
cache and i'm just using file cache here

00:19:11,840 --> 00:19:15,360
and the none value says never expire it

00:19:13,919 --> 00:19:17,120
i think i can manually

00:19:15,360 --> 00:19:19,360
i can manually expire if this ever

00:19:17,120 --> 00:19:21,360
changes i i put this code in a cache

00:19:19,360 --> 00:19:23,360
choices script that i ran from the ipad

00:19:21,360 --> 00:19:25,120
from my python width from the shell but

00:19:23,360 --> 00:19:27,440
we if we do this

00:19:25,120 --> 00:19:29,039
then in our form set we can update that

00:19:27,440 --> 00:19:30,880
to use the cache values

00:19:29,039 --> 00:19:32,640
instead of generating the query sets

00:19:30,880 --> 00:19:34,559
each time the form sets instantiated

00:19:32,640 --> 00:19:35,919
so here in init we fetch from the cache

00:19:34,559 --> 00:19:36,480
values rather than calculating the

00:19:35,919 --> 00:19:38,640
choices

00:19:36,480 --> 00:19:40,480
everything else is exactly the same

00:19:38,640 --> 00:19:42,960
again we refresh

00:19:40,480 --> 00:19:43,840
again everything is exactly the same but

00:19:42,960 --> 00:19:46,460
now

00:19:43,840 --> 00:19:47,600
we have five

00:19:46,460 --> 00:19:50,640
[Music]

00:19:47,600 --> 00:19:52,960
sql queries hit which is

00:19:50,640 --> 00:19:54,720
which is okay now here it didn't make

00:19:52,960 --> 00:19:56,720
too much difference in terms of speed

00:19:54,720 --> 00:19:58,160
sql light is pretty quick and file paced

00:19:56,720 --> 00:20:00,640
cache is file based

00:19:58,160 --> 00:20:02,400
cache which i used is pretty slow but if

00:20:00,640 --> 00:20:03,679
your choices aren't changing quickly and

00:20:02,400 --> 00:20:04,880
they're expensive to calculate then

00:20:03,679 --> 00:20:07,039
throwing them in the catch can be

00:20:04,880 --> 00:20:08,320
a really good way to speed everything up

00:20:07,039 --> 00:20:11,200
so that's strategy three

00:20:08,320 --> 00:20:11,200
do the work early

00:20:12,480 --> 00:20:15,600
so let's sum up apparently model choice

00:20:15,360 --> 00:20:18,640
for

00:20:15,600 --> 00:20:20,880
this field is slow well we saw

00:20:18,640 --> 00:20:23,120
three examples of how it's slow we used

00:20:20,880 --> 00:20:24,159
a django rest framework serializer and

00:20:23,120 --> 00:20:26,320
saw how that rendered

00:20:24,159 --> 00:20:27,679
we saw we saw a regular a regular django

00:20:26,320 --> 00:20:29,360
former django filter and how that

00:20:27,679 --> 00:20:30,720
rendered and we saw the django admin

00:20:29,360 --> 00:20:32,320
with list editable

00:20:30,720 --> 00:20:34,080
for those three problems we saw three

00:20:32,320 --> 00:20:35,760
strategies how you can deal with that

00:20:34,080 --> 00:20:37,520
do less work that's the most important

00:20:35,760 --> 00:20:39,679
one don't repeat work

00:20:37,520 --> 00:20:41,280
and do the work early the take home

00:20:39,679 --> 00:20:43,039
message here is that really that model

00:20:41,280 --> 00:20:44,880
choice field is not slow at all

00:20:43,039 --> 00:20:46,799
but you do have to be aware of the work

00:20:44,880 --> 00:20:48,640
it's doing and you do have to give it a

00:20:46,799 --> 00:20:50,240
chance to be performed

00:20:48,640 --> 00:20:51,840
that's it as i said at the beginning i

00:20:50,240 --> 00:20:53,760
think of the this is one of the first

00:20:51,840 --> 00:20:54,640
ports of call in everyday django

00:20:53,760 --> 00:20:56,240
optimization

00:20:54,640 --> 00:20:58,240
you need to be able to set the query set

00:20:56,240 --> 00:20:59,039
on a model choice field or if necessary

00:20:58,240 --> 00:21:02,240
the choices

00:20:59,039 --> 00:21:03,840
on a model choice film i'm carlton

00:21:02,240 --> 00:21:05,039
gibson i'm your friendly django fella

00:21:03,840 --> 00:21:06,960
i'm at colton gibson on

00:21:05,039 --> 00:21:08,640
gib github and on twitter you can find

00:21:06,960 --> 00:21:10,240
me there if you haven't listened already

00:21:08,640 --> 00:21:12,320
do check out the podcast at django

00:21:10,240 --> 00:21:13,840
jack.com i hope you enjoyed the talk i

00:21:12,320 --> 00:21:15,360
hope the next time you're using a model

00:21:13,840 --> 00:21:17,360
choice field you'll teach who's boss

00:21:15,360 --> 00:21:30,320
if you've got any questions do let me go

00:21:17,360 --> 00:21:34,000
thanks for joining me

00:21:30,320 --> 00:21:37,120
recording is on uh yeah

00:21:34,000 --> 00:21:39,679
um so that's that uh

00:21:37,120 --> 00:21:40,880
adding select related perpetual related

00:21:39,679 --> 00:21:44,000
thing is something

00:21:40,880 --> 00:21:47,200
like after you do once you

00:21:44,000 --> 00:21:50,799
you get used to to doing all the time uh

00:21:47,200 --> 00:21:54,559
so it's kind of a standard uh have you

00:21:50,799 --> 00:21:58,720
considered in django to

00:21:54,559 --> 00:22:02,320
like find a way that it's

00:21:58,720 --> 00:22:05,919
automatically added like in just like a

00:22:02,320 --> 00:22:08,720
list view or something like that

00:22:05,919 --> 00:22:09,760
yes so there's various talk about this

00:22:08,720 --> 00:22:12,320
um

00:22:09,760 --> 00:22:14,559
so there's a package by uh simon

00:22:12,320 --> 00:22:17,039
shirette who's one of the

00:22:14,559 --> 00:22:17,919
main main contributors to the orm that

00:22:17,039 --> 00:22:19,520
does this already

00:22:17,919 --> 00:22:21,120
it's called something adam help me out

00:22:19,520 --> 00:22:23,600
with it's called what's it called

00:22:21,120 --> 00:22:24,320
uh simon's package is django sealant

00:22:23,600 --> 00:22:27,120
that's it

00:22:24,320 --> 00:22:28,720
raises a warning on the lazy foreign

00:22:27,120 --> 00:22:30,799
keys

00:22:28,720 --> 00:22:32,320
it's the package i maintain with gordon

00:22:30,799 --> 00:22:34,320
that does the automatic adding of

00:22:32,320 --> 00:22:35,840
prefetch and select relatives

00:22:34,320 --> 00:22:37,600
there you are yeah so there you are

00:22:35,840 --> 00:22:41,840
what's the old one call them

00:22:37,600 --> 00:22:41,840
django auto prefetch

00:22:44,080 --> 00:22:47,840
there's also some talk about this um

00:22:47,039 --> 00:22:51,760
around the whole

00:22:47,840 --> 00:22:54,240
async orm project because

00:22:51,760 --> 00:22:54,880
this lazy prefetching or this lazy

00:22:54,240 --> 00:22:57,600
attribute

00:22:54,880 --> 00:22:57,919
look up that will never work with async

00:22:57,600 --> 00:22:59,440
so

00:22:57,919 --> 00:23:01,840
if you do that you're always going to

00:22:59,440 --> 00:23:03,919
hear a problem so if you are going to

00:23:01,840 --> 00:23:06,240
if we are going to have an async

00:23:03,919 --> 00:23:08,960
iterator of a query set

00:23:06,240 --> 00:23:10,159
then you're going to have to have used

00:23:08,960 --> 00:23:11,840
related or

00:23:10,159 --> 00:23:13,679
um prefetch related to get whatever

00:23:11,840 --> 00:23:15,360
models you want need to instantiate

00:23:13,679 --> 00:23:16,960
when rendering that when it's releasing

00:23:15,360 --> 00:23:18,720
that query set so

00:23:16,960 --> 00:23:20,240
there's going to be a better story about

00:23:18,720 --> 00:23:22,000
it whether that's in core

00:23:20,240 --> 00:23:23,679
third party packages or i can't say but

00:23:22,000 --> 00:23:27,280
there's adam's package there's simon's

00:23:23,679 --> 00:23:27,280
package which are all great

00:23:27,360 --> 00:23:36,159
thanks and yeah i'd like those names

00:23:31,919 --> 00:23:38,000
later okay of course before i forget

00:23:36,159 --> 00:23:40,640
well adam can type him into the chat

00:23:38,000 --> 00:23:43,360
here now can't man

00:23:40,640 --> 00:23:44,799
thank you no worries don't worry let's

00:23:43,360 --> 00:23:46,320
have a look i'm just trying to get back

00:23:44,799 --> 00:23:48,480
into my talk thing on the

00:23:46,320 --> 00:23:50,480
um loud swarm to see if there were any

00:23:48,480 --> 00:23:53,840
questions in the chat box there

00:23:50,480 --> 00:23:53,840
i'm just scrolling down let's see

00:24:00,720 --> 00:24:04,960
yeah so adam's actually put that in the

00:24:02,840 --> 00:24:07,360
um

00:24:04,960 --> 00:24:09,360
he's put adam's put a link to the django

00:24:07,360 --> 00:24:11,600
auto prefetch in the slack by the looks

00:24:09,360 --> 00:24:11,600
of it

00:24:14,720 --> 00:24:22,320
well another thing on that topic um

00:24:19,120 --> 00:24:25,520
what about only queries

00:24:22,320 --> 00:24:26,400
uh i mean normally when you define a

00:24:25,520 --> 00:24:29,679
serializer

00:24:26,400 --> 00:24:32,880
and you choose the fields you want

00:24:29,679 --> 00:24:35,200
uh they could also be automatically

00:24:32,880 --> 00:24:37,840
added to only queries so you don't have

00:24:35,200 --> 00:24:40,080
to fetch the whole table

00:24:37,840 --> 00:24:42,000
for that so is there any solution for

00:24:40,080 --> 00:24:45,120
that

00:24:42,000 --> 00:24:47,039
to be honest no not not built not

00:24:45,120 --> 00:24:48,880
like django's not like the orm can't be

00:24:47,039 --> 00:24:52,640
psychic right

00:24:48,880 --> 00:24:54,799
it does you know in a sense

00:24:52,640 --> 00:24:56,159
you build a view you look at the queries

00:24:54,799 --> 00:24:57,200
you see what data you're going to use

00:24:56,159 --> 00:24:58,880
you know your data

00:24:57,200 --> 00:25:00,960
set if you need to put any deferred

00:24:58,880 --> 00:25:02,559
fields in there so i only escape only

00:25:00,960 --> 00:25:04,880
these fields or defer is to say

00:25:02,559 --> 00:25:06,000
exclude these fields it's like um the

00:25:04,880 --> 00:25:09,520
fields and exclude

00:25:06,000 --> 00:25:11,520
arguments on not on a model form

00:25:09,520 --> 00:25:13,600
but like equivalent at the rm level the

00:25:11,520 --> 00:25:18,880
fetch level

00:25:13,600 --> 00:25:20,960
to i i don't think that it's a

00:25:18,880 --> 00:25:23,039
big ask for the developer to have to

00:25:20,960 --> 00:25:25,760
specify those fields themselves

00:25:23,039 --> 00:25:26,240
is what would be my kind of first take

00:25:25,760 --> 00:25:29,840
on that

00:25:26,240 --> 00:25:29,840
i think

00:25:30,320 --> 00:25:33,520
maybe there's some optimizer out there

00:25:32,000 --> 00:25:35,200
that can magically

00:25:33,520 --> 00:25:36,320
you know read your code and understand

00:25:35,200 --> 00:25:38,240
it and know it and maybe that will

00:25:36,320 --> 00:25:39,840
happen with you know

00:25:38,240 --> 00:25:41,279
ai going the way it is or machine

00:25:39,840 --> 00:25:42,480
learning going the way it is maybe in

00:25:41,279 --> 00:25:43,120
the future that'll happen but i think at

00:25:42,480 --> 00:25:46,480
this stage

00:25:43,120 --> 00:25:48,880
of the of the art a developer needs to

00:25:46,480 --> 00:25:50,720
optimize their queries yeah i mean i'm

00:25:48,880 --> 00:25:51,360
not i'm not a massive old ram expert so

00:25:50,720 --> 00:25:57,840
i

00:25:51,360 --> 00:25:57,840
that's just but that's just my feeling

00:26:04,720 --> 00:26:09,760
adam i can't hear you i see your lips

00:26:06,320 --> 00:26:09,760
moving but i can't actually hear you

00:26:09,840 --> 00:26:15,279
yeah let's do it in mine

00:26:20,400 --> 00:26:30,080
wait i'm gone

00:26:24,720 --> 00:26:30,080
any other questions thoughts anyone

00:26:33,440 --> 00:26:38,960
yeah if you if you did have a list with

00:26:36,480 --> 00:26:42,159
17 000 choices in there yes

00:26:38,960 --> 00:26:44,320
have you got any good uh options to

00:26:42,159 --> 00:26:45,840
navigate your way through that no that's

00:26:44,320 --> 00:26:48,559
an awesome question because

00:26:45,840 --> 00:26:50,240
my actual kind of preference here is to

00:26:48,559 --> 00:26:52,559
render the select

00:26:50,240 --> 00:26:54,799
list even though it's got 17 000 in it

00:26:52,559 --> 00:26:57,039
and it's far too many is to render it

00:26:54,799 --> 00:26:57,919
into the html and then progressively

00:26:57,039 --> 00:26:59,840
enhance it

00:26:57,919 --> 00:27:01,919
in on this client side with a little bit

00:26:59,840 --> 00:27:05,360
of javascript to add

00:27:01,919 --> 00:27:06,080
you know a search box or whatever you

00:27:05,360 --> 00:27:07,840
want

00:27:06,080 --> 00:27:09,600
um so an auto complete because the

00:27:07,840 --> 00:27:11,919
trouble with so the django admin

00:27:09,600 --> 00:27:12,960
has autocomplete fields so the worst

00:27:11,919 --> 00:27:15,919
option is raw

00:27:12,960 --> 00:27:17,360
id fields right so back in the day we

00:27:15,919 --> 00:27:18,320
the django had admin has had this

00:27:17,360 --> 00:27:20,880
problem forever

00:27:18,320 --> 00:27:22,320
in that you've got 17 000 records and

00:27:20,880 --> 00:27:24,000
you can't possibly deal with that in the

00:27:22,320 --> 00:27:25,360
select box so what you do use raw

00:27:24,000 --> 00:27:26,799
id fields where you have to type in the

00:27:25,360 --> 00:27:28,480
number but then you have to go and look

00:27:26,799 --> 00:27:29,840
in the database find the id

00:27:28,480 --> 00:27:31,760
and then put it into the field that's

00:27:29,840 --> 00:27:33,600
not sustainable so

00:27:31,760 --> 00:27:35,120
a few versions ago they added auto

00:27:33,600 --> 00:27:37,360
complete fields which is great

00:27:35,120 --> 00:27:39,440
it's like this nice select to widgety

00:27:37,360 --> 00:27:41,360
thing and you type in and it will

00:27:39,440 --> 00:27:42,799
dynamically go and make these ajax

00:27:41,360 --> 00:27:45,120
requests back to the

00:27:42,799 --> 00:27:46,240
um back to the admin looking up the

00:27:45,120 --> 00:27:48,320
records and find you

00:27:46,240 --> 00:27:50,640
ones that match it works really well but

00:27:48,320 --> 00:27:53,919
you've got this constant overhead of

00:27:50,640 --> 00:27:56,000
um the the network calls

00:27:53,919 --> 00:27:57,760
when you could the most query set you

00:27:56,000 --> 00:27:58,720
could just rent you could just render

00:27:57,760 --> 00:28:01,120
the choices

00:27:58,720 --> 00:28:02,399
and then use keep it totally client-side

00:28:01,120 --> 00:28:03,760
that so that's my preference my

00:28:02,399 --> 00:28:07,200
preference is to

00:28:03,760 --> 00:28:09,600
um is to use some kind of javascript

00:28:07,200 --> 00:28:11,279
to take the select widget and

00:28:09,600 --> 00:28:12,559
progressively enhance it into something

00:28:11,279 --> 00:28:13,760
that's more user-friendly when you've

00:28:12,559 --> 00:28:15,919
got lots of records

00:28:13,760 --> 00:28:17,120
right if you can't send it all to the

00:28:15,919 --> 00:28:20,080
client then yeah you have to

00:28:17,120 --> 00:28:20,480
you have to back that with an extra api

00:28:20,080 --> 00:28:23,520
call

00:28:20,480 --> 00:28:24,159
of some kind but you know an api call

00:28:23,520 --> 00:28:26,720
that goes back

00:28:24,159 --> 00:28:27,840
and fetches the data live so an auto

00:28:26,720 --> 00:28:30,480
live auto complete

00:28:27,840 --> 00:28:31,440
so they're the two main options and then

00:28:30,480 --> 00:28:32,799
you know maybe there are different

00:28:31,440 --> 00:28:34,880
patterns but

00:28:32,799 --> 00:28:36,080
if your list is alphabetically sorted

00:28:34,880 --> 00:28:37,440
like i said for countries

00:28:36,080 --> 00:28:38,880
you quite often you've had to do

00:28:37,440 --> 00:28:39,679
checkout forms so you've had to fill in

00:28:38,880 --> 00:28:41,279
your country

00:28:39,679 --> 00:28:42,640
and you pick it from a big long list

00:28:41,279 --> 00:28:44,399
it's like you know it's it's long

00:28:42,640 --> 00:28:46,000
there's a lot of countries but it's not

00:28:44,399 --> 00:28:47,120
too hard to find yours because you can

00:28:46,000 --> 00:28:49,279
open the select box

00:28:47,120 --> 00:28:50,720
you can press s for spain and you get

00:28:49,279 --> 00:28:52,720
down to the s's and then you've only got

00:28:50,720 --> 00:28:56,000
half a dozen essays to click through

00:28:52,720 --> 00:28:58,159
so for me it depends on your data set

00:28:56,000 --> 00:28:59,679
but i'd always start with a with a drop

00:28:58,159 --> 00:29:01,679
down if you can why because if your

00:28:59,679 --> 00:29:04,000
javascript fails to load it still works

00:29:01,679 --> 00:29:04,720
it might not be great but it still works

00:29:04,000 --> 00:29:06,159
whereas

00:29:04,720 --> 00:29:07,520
other solutions which require the

00:29:06,159 --> 00:29:09,200
javascript if your javascript doesn't

00:29:07,520 --> 00:29:11,120
load load then

00:29:09,200 --> 00:29:13,840
your site's broken yeah i know the

00:29:11,120 --> 00:29:15,520
mobile connections are all the rest

00:29:13,840 --> 00:29:17,039
you user can't use your site at that

00:29:15,520 --> 00:29:18,640
point so that's my view that's that's my

00:29:17,039 --> 00:29:20,960
answer

00:29:18,640 --> 00:29:22,480
great thanks no thank you great great

00:29:20,960 --> 00:29:23,679
talk as well really enjoyed it and

00:29:22,480 --> 00:29:25,600
looking through the slides will be

00:29:23,679 --> 00:29:27,279
really useful so thank you yeah okay

00:29:25,600 --> 00:29:28,720
i'll put i will make sure i put those up

00:29:27,279 --> 00:29:41,840
i'll print them off as bff and put it in

00:29:28,720 --> 00:29:41,840
the slack because that's brilliant

00:29:43,200 --> 00:29:45,279

YouTube URL: https://www.youtube.com/watch?v=e52S1SjuUeM


