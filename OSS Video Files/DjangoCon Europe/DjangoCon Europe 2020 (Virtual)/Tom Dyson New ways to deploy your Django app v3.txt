Title: Tom Dyson New ways to deploy your Django app v3
Publication date: 2020-10-21
Playlist: DjangoCon Europe 2020 (Virtual)
Description: 
	
Captions: 
	00:00:04,640 --> 00:00:08,720
hi everyone

00:00:05,600 --> 00:00:10,880
i think i'm on and this is started i'm

00:00:08,720 --> 00:00:12,160
tom dyson i'm very happy to be here i'm

00:00:10,880 --> 00:00:15,040
going to talk to you today

00:00:12,160 --> 00:00:16,480
about alternative approaches for hosting

00:00:15,040 --> 00:00:19,680
sorry tom tom sorry

00:00:16,480 --> 00:00:21,920
you will have to restart again sorry

00:00:19,680 --> 00:00:24,080
when i tell you okay cool just tell me

00:00:21,920 --> 00:00:28,480
when

00:00:24,080 --> 00:00:30,480
start hi everybody i'm tom dyson

00:00:28,480 --> 00:00:32,160
and i'm here to talk to you about

00:00:30,480 --> 00:00:33,840
alternative approaches for hosting your

00:00:32,160 --> 00:00:37,280
django projects

00:00:33,840 --> 00:00:37,280
uh let me share my screen

00:00:42,079 --> 00:00:47,760
great so i'm from torchbox

00:00:45,600 --> 00:00:48,640
uh we're um an agency in the uk we've

00:00:47,760 --> 00:00:50,320
been using

00:00:48,640 --> 00:00:51,360
uh django for uh almost since the

00:00:50,320 --> 00:00:52,320
beginning pretty much since the

00:00:51,360 --> 00:00:54,320
beginning

00:00:52,320 --> 00:00:55,520
uh we're we're also the agency behind

00:00:54,320 --> 00:00:56,800
whitetail the open source content

00:00:55,520 --> 00:00:59,440
management system that i hope

00:00:56,800 --> 00:01:02,239
many of you are familiar with but i'm

00:00:59,440 --> 00:01:05,680
not talking about wagtail today

00:01:02,239 --> 00:01:07,280
uh i would encourage some of you to or

00:01:05,680 --> 00:01:08,080
any of you to follow along with this

00:01:07,280 --> 00:01:10,000
talk

00:01:08,080 --> 00:01:11,439
using the link here tomdi.org forward

00:01:10,000 --> 00:01:12,720
slash deploy

00:01:11,439 --> 00:01:14,799
most of this talk is going to be a live

00:01:12,720 --> 00:01:16,159
demo and um the the

00:01:14,799 --> 00:01:17,920
the steps that i'm going to be going

00:01:16,159 --> 00:01:20,720
through are exactly

00:01:17,920 --> 00:01:22,320
the same ones on those notes and uh it

00:01:20,720 --> 00:01:22,720
may be helpful for you to go along with

00:01:22,320 --> 00:01:24,640
those

00:01:22,720 --> 00:01:26,080
you will just need a few things in order

00:01:24,640 --> 00:01:27,520
to complete all the steps the most

00:01:26,080 --> 00:01:28,799
important one is a computer with python

00:01:27,520 --> 00:01:29,600
on it which i would guess most of you

00:01:28,799 --> 00:01:30,880
have

00:01:29,600 --> 00:01:33,280
uh and then it would be useful to have a

00:01:30,880 --> 00:01:34,880
github account some sort of disposable

00:01:33,280 --> 00:01:37,040
linux virtual machine

00:01:34,880 --> 00:01:38,079
and i've put some links in in these

00:01:37,040 --> 00:01:41,280
notes

00:01:38,079 --> 00:01:43,280
with some a couple of sites that have

00:01:41,280 --> 00:01:44,320
credit 100 credit to get you started if

00:01:43,280 --> 00:01:47,759
you don't have one already

00:01:44,320 --> 00:01:48,240
and a google account so the the purpose

00:01:47,759 --> 00:01:50,799
of this

00:01:48,240 --> 00:01:51,920
talk is to kind of address this question

00:01:50,799 --> 00:01:54,960
that i see a lot

00:01:51,920 --> 00:01:56,240
in django support forums um we see it a

00:01:54,960 --> 00:01:57,280
lot in fact in the whitetail support

00:01:56,240 --> 00:01:58,799
forums as well but

00:01:57,280 --> 00:02:00,719
i think it's it's more particularly

00:01:58,799 --> 00:02:02,240
around django generally and

00:02:00,719 --> 00:02:04,479
it's people who who've gone through the

00:02:02,240 --> 00:02:06,560
chango tutorial who've worked out how to

00:02:04,479 --> 00:02:08,239
to build a site and then they get stuck

00:02:06,560 --> 00:02:10,160
about then the next step is making it

00:02:08,239 --> 00:02:13,440
live and they get stuck there

00:02:10,160 --> 00:02:15,920
um and you see a lot a lot of people

00:02:13,440 --> 00:02:17,680
making you know asking for help like

00:02:15,920 --> 00:02:19,040
this and they often kind of apologize

00:02:17,680 --> 00:02:20,239
which i think is a shame because you

00:02:19,040 --> 00:02:20,959
know they shouldn't have to apologize

00:02:20,239 --> 00:02:22,879
for this

00:02:20,959 --> 00:02:24,319
the skills for deploying sites are

00:02:22,879 --> 00:02:27,440
pretty different to the skills to

00:02:24,319 --> 00:02:29,360
create sites and i feel like i really

00:02:27,440 --> 00:02:30,640
like this last point here where someone

00:02:29,360 --> 00:02:33,200
replies to somebody else who's been

00:02:30,640 --> 00:02:34,480
struggling where they say um

00:02:33,200 --> 00:02:36,959
i'm just good to know i'm not the only

00:02:34,480 --> 00:02:38,879
one going to keep on struggling until i

00:02:36,959 --> 00:02:40,319
don't realize it's a struggle and that's

00:02:38,879 --> 00:02:42,160
it's funny and it's nicely written but

00:02:40,319 --> 00:02:45,200
it's also i think it's a shame

00:02:42,160 --> 00:02:47,599
because um i think it's true for

00:02:45,200 --> 00:02:48,640
and for those of us who have um who have

00:02:47,599 --> 00:02:52,319
deployed

00:02:48,640 --> 00:02:53,200
django sites using nginx and or apache

00:02:52,319 --> 00:02:55,360
and unicorn

00:02:53,200 --> 00:02:57,280
supervisor or worked out how to use

00:02:55,360 --> 00:02:59,280
heroku or these other systems then if

00:02:57,280 --> 00:03:01,200
you do it enough times then then

00:02:59,280 --> 00:03:02,800
you know it's hard to remember how much

00:03:01,200 --> 00:03:03,280
of a mountain it is to climb for people

00:03:02,800 --> 00:03:05,440
who have

00:03:03,280 --> 00:03:07,519
just learned django and are suddenly

00:03:05,440 --> 00:03:09,599
presented with all these options

00:03:07,519 --> 00:03:11,440
and i should be clear that there are

00:03:09,599 --> 00:03:12,959
lots of fantastic options for

00:03:11,440 --> 00:03:14,400
deploying sites as you become more

00:03:12,959 --> 00:03:16,159
familiar with it so there's the

00:03:14,400 --> 00:03:17,440
do-it-yourself approach like the one i

00:03:16,159 --> 00:03:19,519
described where you

00:03:17,440 --> 00:03:21,120
you have your own linux servers and you

00:03:19,519 --> 00:03:24,480
install nginx

00:03:21,120 --> 00:03:25,280
and unicorn or usb and so on um and then

00:03:24,480 --> 00:03:28,000
there are kind of

00:03:25,280 --> 00:03:29,760
great platforms like divio where um a

00:03:28,000 --> 00:03:30,319
lot of this and they provide 24 7

00:03:29,760 --> 00:03:33,599
support

00:03:30,319 --> 00:03:35,120
and a lot of this is handled for you so

00:03:33,599 --> 00:03:37,680
but but what i want to talk about today

00:03:35,120 --> 00:03:38,319
is the three options that um are not so

00:03:37,680 --> 00:03:40,640
well known

00:03:38,319 --> 00:03:42,480
and that i think could be really a good

00:03:40,640 --> 00:03:44,159
useful starting point for people who

00:03:42,480 --> 00:03:46,159
who have just built their first django

00:03:44,159 --> 00:03:48,720
site and uh

00:03:46,159 --> 00:03:50,480
quickest ways of of making it live the

00:03:48,720 --> 00:03:52,319
first one is called doku

00:03:50,480 --> 00:03:54,720
and uh the way a way you could think

00:03:52,319 --> 00:03:58,799
about doku is like a really simple

00:03:54,720 --> 00:04:01,200
open source heroku so it's actually a

00:03:58,799 --> 00:04:02,879
long bash script that manages docker

00:04:01,200 --> 00:04:04,000
containers on a linux server but you

00:04:02,879 --> 00:04:06,080
don't really need to

00:04:04,000 --> 00:04:07,680
know how it works you just need to know

00:04:06,080 --> 00:04:09,280
the two lines to install it

00:04:07,680 --> 00:04:11,760
and then how to push your site to it to

00:04:09,280 --> 00:04:12,720
make it live the second one is static

00:04:11,760 --> 00:04:14,640
site generation

00:04:12,720 --> 00:04:16,000
and this feels a bit like back to the

00:04:14,640 --> 00:04:18,079
future when i was

00:04:16,000 --> 00:04:21,040
first building websites in the late 90s

00:04:18,079 --> 00:04:23,120
i would uh hand craft html files and um

00:04:21,040 --> 00:04:24,639
ftp them to uh to a shared server

00:04:23,120 --> 00:04:25,919
somewhere and this is kind of going it

00:04:24,639 --> 00:04:26,560
feels a bit like going back to that

00:04:25,919 --> 00:04:28,479
because your

00:04:26,560 --> 00:04:29,759
your building sites out of static html

00:04:28,479 --> 00:04:31,120
pages

00:04:29,759 --> 00:04:33,120
but with a very different tooling

00:04:31,120 --> 00:04:34,800
approach and there turned out to be

00:04:33,120 --> 00:04:36,960
quite a lot of benefits to this which

00:04:34,800 --> 00:04:38,720
i'll go through towards the end and the

00:04:36,960 --> 00:04:39,120
last one is a relatively new product

00:04:38,720 --> 00:04:42,320
from

00:04:39,120 --> 00:04:44,479
google called cloud run uh which is like

00:04:42,320 --> 00:04:46,080
you you take your docking containers and

00:04:44,479 --> 00:04:48,960
as they say in their marketing somewhere

00:04:46,080 --> 00:04:50,320
they convert containers into urls and

00:04:48,960 --> 00:04:51,280
there are a few rough edges around this

00:04:50,320 --> 00:04:53,440
but i think

00:04:51,280 --> 00:04:55,040
the model this kind of serverless model

00:04:53,440 --> 00:04:56,720
of serverless containers that sounds

00:04:55,040 --> 00:04:58,320
like really

00:04:56,720 --> 00:05:01,199
jargony but i think this serverless

00:04:58,320 --> 00:05:03,680
model is a really interesting one and i

00:05:01,199 --> 00:05:06,320
predict it's going to become the the

00:05:03,680 --> 00:05:07,919
standard way of deploying applications

00:05:06,320 --> 00:05:09,440
so it's interesting to to see how that's

00:05:07,919 --> 00:05:11,919
working now

00:05:09,440 --> 00:05:13,039
all right the the most part of this talk

00:05:11,919 --> 00:05:13,840
is going to be a live demo and i'm going

00:05:13,039 --> 00:05:15,440
to try and do

00:05:13,840 --> 00:05:16,720
a lot of these steps in the time we've

00:05:15,440 --> 00:05:18,240
got available it's going to be a bit of

00:05:16,720 --> 00:05:20,560
a race against time

00:05:18,240 --> 00:05:21,840
um so you have to forgive me if it

00:05:20,560 --> 00:05:23,120
doesn't go perfectly and we don't get

00:05:21,840 --> 00:05:24,479
through everything

00:05:23,120 --> 00:05:26,400
and i hope some of you will be able to

00:05:24,479 --> 00:05:29,440
follow along too using that

00:05:26,400 --> 00:05:31,039
link tom d slash dot org deploy which

00:05:29,440 --> 00:05:33,840
will take you to here

00:05:31,039 --> 00:05:35,759
so we are going to start with providing

00:05:33,840 --> 00:05:39,039
we have something some of these things

00:05:35,759 --> 00:05:41,039
by building a wagtail site locally um

00:05:39,039 --> 00:05:42,560
and this and i've i've said i've used

00:05:41,039 --> 00:05:43,520
whitetail here this can be any django

00:05:42,560 --> 00:05:45,280
app um

00:05:43,520 --> 00:05:47,360
whitetail is just a kind of is an

00:05:45,280 --> 00:05:49,919
example of a fully featured

00:05:47,360 --> 00:05:51,199
django app that's quite quick to install

00:05:49,919 --> 00:05:52,720
so that's why i've used it here but this

00:05:51,199 --> 00:05:56,479
is none of this is specific to

00:05:52,720 --> 00:05:58,560
wagtail so in my local environment here

00:05:56,479 --> 00:05:59,919
i would create environment and install

00:05:58,560 --> 00:06:00,400
wagtail i've done those first three

00:05:59,919 --> 00:06:03,360
steps

00:06:00,400 --> 00:06:07,199
so you don't have to watch the that

00:06:03,360 --> 00:06:10,240
scrolling pass but i'm now going to

00:06:07,199 --> 00:06:11,520
start a new wagtail site and go into

00:06:10,240 --> 00:06:12,960
that directory

00:06:11,520 --> 00:06:15,440
and the next thing i'm going to do is

00:06:12,960 --> 00:06:18,160
install a package that actually i wrote

00:06:15,440 --> 00:06:19,360
about a month or so ago called whitetail

00:06:18,160 --> 00:06:22,800
fake news

00:06:19,360 --> 00:06:24,319
which is um a way to create a lot of

00:06:22,800 --> 00:06:25,759
dummy content on your site i did it

00:06:24,319 --> 00:06:26,720
really for testing particularly for

00:06:25,759 --> 00:06:30,000
testing

00:06:26,720 --> 00:06:31,440
um volume so

00:06:30,000 --> 00:06:33,840
see how well it kind of scales when you

00:06:31,440 --> 00:06:35,600
have more volume so we add that and put

00:06:33,840 --> 00:06:36,720
it in our requirements.txt

00:06:35,600 --> 00:06:39,280
and then we're going to add it to our

00:06:36,720 --> 00:06:41,520
installed uh apps in settings so

00:06:39,280 --> 00:06:42,960
uh of course there are more elegant ways

00:06:41,520 --> 00:06:44,479
of doing this but um

00:06:42,960 --> 00:06:47,199
i'm just going to push that line to the

00:06:44,479 --> 00:06:50,319
bottom of my settings file

00:06:47,199 --> 00:06:51,840
and and the next step is to run

00:06:50,319 --> 00:06:53,120
migrate so this is common again this is

00:06:51,840 --> 00:06:54,720
a standard thing that as a django

00:06:53,120 --> 00:06:57,360
developer you'll be used to so

00:06:54,720 --> 00:06:59,120
creating all the tables that django

00:06:57,360 --> 00:06:59,599
needs and then that wagtail needs and

00:06:59,120 --> 00:07:02,880
that

00:06:59,599 --> 00:07:03,599
wagtail fake news needs and that's all

00:07:02,880 --> 00:07:06,080
done

00:07:03,599 --> 00:07:06,880
and now we have this new management

00:07:06,080 --> 00:07:11,039
command

00:07:06,880 --> 00:07:12,800
and copy that correctly um

00:07:11,039 --> 00:07:14,319
make fake items so this is the one that

00:07:12,800 --> 00:07:15,120
comes from whitetail fake news and this

00:07:14,319 --> 00:07:19,280
is going to create

00:07:15,120 --> 00:07:20,639
50 fake news pages each and 50 images

00:07:19,280 --> 00:07:21,759
and it's going to associate images with

00:07:20,639 --> 00:07:23,039
each one

00:07:21,759 --> 00:07:25,120
that happens pretty quickly seven

00:07:23,039 --> 00:07:28,639
seconds and uh

00:07:25,120 --> 00:07:30,800
one last little step um wagtower has a

00:07:28,639 --> 00:07:31,919
default home page which we don't want so

00:07:30,800 --> 00:07:33,280
we're just going to overwrite that

00:07:31,919 --> 00:07:34,960
template

00:07:33,280 --> 00:07:36,560
quickly with that line and then we're

00:07:34,960 --> 00:07:39,039
going to run the server

00:07:36,560 --> 00:07:39,599
so most of this now is hopefully feeling

00:07:39,039 --> 00:07:43,360
quite

00:07:39,599 --> 00:07:46,560
familiar for uh for django sites

00:07:43,360 --> 00:07:49,120
so um now i'm running my server and

00:07:46,560 --> 00:07:49,840
let's check see how that's worked so in

00:07:49,120 --> 00:07:54,879
a new

00:07:49,840 --> 00:07:54,879
browser tab i am

00:07:55,759 --> 00:08:02,720
checking here that um

00:07:58,879 --> 00:08:04,160
uh this news is linked and i just want

00:08:02,720 --> 00:08:06,479
to check something actually in the slack

00:08:04,160 --> 00:08:07,759
to make sure that my

00:08:06,479 --> 00:08:09,599
i'm not seeing anything that's like i'm

00:08:07,759 --> 00:08:10,879
just hoping my screen share is working i

00:08:09,599 --> 00:08:12,319
guess otherwise someone would have told

00:08:10,879 --> 00:08:13,280
me that i'm just not seeing the screen

00:08:12,319 --> 00:08:16,080
share

00:08:13,280 --> 00:08:17,440
indication of my screen right so now we

00:08:16,080 --> 00:08:21,039
are seeing

00:08:17,440 --> 00:08:23,360
uh can someone just like give me a

00:08:21,039 --> 00:08:24,240
positive sign in the general channel on

00:08:23,360 --> 00:08:27,840
slack

00:08:24,240 --> 00:08:27,840
just to say that you can see my screen

00:08:31,039 --> 00:08:34,880
working fine thank you darren jones a

00:08:33,279 --> 00:08:37,440
little moment of panic there

00:08:34,880 --> 00:08:38,159
okay so we can see now that this my site

00:08:37,440 --> 00:08:41,200
is running

00:08:38,159 --> 00:08:42,560
um and that's great so that's like i

00:08:41,200 --> 00:08:44,159
don't know how far we in now

00:08:42,560 --> 00:08:45,600
five minutes and we've got our local

00:08:44,159 --> 00:08:48,080
django site running

00:08:45,600 --> 00:08:50,560
that's basically you know just credit to

00:08:48,080 --> 00:08:52,000
django for making that site really easy

00:08:50,560 --> 00:08:54,000
the next step now we're getting on to

00:08:52,000 --> 00:08:57,600
deploying so now we are going

00:08:54,000 --> 00:09:00,640
to install doku on a linux server

00:08:57,600 --> 00:09:02,880
and um i would generally use one

00:09:00,640 --> 00:09:04,800
service like digitalocean or volta and

00:09:02,880 --> 00:09:09,680
so i would create something like

00:09:04,800 --> 00:09:12,320
um let me see if that's gonna log me in

00:09:09,680 --> 00:09:14,240
uh create a new server on volta or

00:09:12,320 --> 00:09:17,920
digitalocean one of these services

00:09:14,240 --> 00:09:19,760
um so go here and cloud compute and then

00:09:17,920 --> 00:09:22,240
i can choose my location

00:09:19,760 --> 00:09:23,920
i usually like i always feel like

00:09:22,240 --> 00:09:25,279
servers in paris a little bit more

00:09:23,920 --> 00:09:28,399
stylish than anywhere else

00:09:25,279 --> 00:09:30,800
um so and then get the latest debian

00:09:28,399 --> 00:09:32,640
the small one is fine as long as you've

00:09:30,800 --> 00:09:36,160
got about a gigabyte of memory

00:09:32,640 --> 00:09:38,320
and add your ssh key to it and probably

00:09:36,160 --> 00:09:41,200
give it a name and hit deploy now

00:09:38,320 --> 00:09:42,880
i'm not going to do deploy now because

00:09:41,200 --> 00:09:44,160
i've already done one and it just takes

00:09:42,880 --> 00:09:46,399
a couple of seconds but

00:09:44,160 --> 00:09:48,959
you might have done something a bit like

00:09:46,399 --> 00:09:52,240
that as i was talking

00:09:48,959 --> 00:09:53,760
so here is my the server i've created

00:09:52,240 --> 00:09:56,160
and then i'm going to log into that one

00:09:53,760 --> 00:09:57,839
so here in this tab with a black

00:09:56,160 --> 00:10:00,800
background i've logged into

00:09:57,839 --> 00:10:02,399
this that server and the next thing to

00:10:00,800 --> 00:10:04,959
do would be to install

00:10:02,399 --> 00:10:06,640
doku which is these two lines so it gets

00:10:04,959 --> 00:10:08,320
the bootstrap.sh

00:10:06,640 --> 00:10:10,000
and then runs it i've done that already

00:10:08,320 --> 00:10:11,839
it takes about two minutes so i didn't

00:10:10,000 --> 00:10:14,160
you don't need to see that running up my

00:10:11,839 --> 00:10:14,160
screen

00:10:14,320 --> 00:10:17,839
once that's done then you go to your

00:10:15,760 --> 00:10:21,279
server's ip address in a browser

00:10:17,839 --> 00:10:24,000
so if i get the ip address

00:10:21,279 --> 00:10:25,040
here and make a new tab and go to the

00:10:24,000 --> 00:10:28,240
browser

00:10:25,040 --> 00:10:29,360
that loads this initial docupage so docu

00:10:28,240 --> 00:10:31,519
doesn't have

00:10:29,360 --> 00:10:33,120
a web interface generally apart from

00:10:31,519 --> 00:10:35,200
this initial screen

00:10:33,120 --> 00:10:36,560
where you just check you can provide

00:10:35,200 --> 00:10:38,720
your ssh key

00:10:36,560 --> 00:10:40,320
and give it a host name i'm just going

00:10:38,720 --> 00:10:43,200
to use the same ip address

00:10:40,320 --> 00:10:44,800
and tell it to start that's done and

00:10:43,200 --> 00:10:46,480
then it's just going to redirect me away

00:10:44,800 --> 00:10:47,839
to the docky docks which i

00:10:46,480 --> 00:10:50,720
don't need so i'm going to close that

00:10:47,839 --> 00:10:52,320
tab okay so doku's installed

00:10:50,720 --> 00:10:53,920
the next thing i need to do is create an

00:10:52,320 --> 00:10:57,120
app on the server so

00:10:53,920 --> 00:10:58,800
if you use heroku this will seem pretty

00:10:57,120 --> 00:11:01,200
familiar this um

00:10:58,800 --> 00:11:02,880
a lot of the commands are quite similar

00:11:01,200 --> 00:11:04,720
to you could say they've been inspired

00:11:02,880 --> 00:11:07,040
by heroku so we've created the app

00:11:04,720 --> 00:11:08,480
and now we're going to install the doku

00:11:07,040 --> 00:11:11,120
postgres plugin

00:11:08,480 --> 00:11:12,720
so docu has a concept of plugins and

00:11:11,120 --> 00:11:13,279
most of them i think they probably all

00:11:12,720 --> 00:11:15,920
are

00:11:13,279 --> 00:11:17,519
themselves docker containers again you

00:11:15,920 --> 00:11:19,519
don't really need to know that

00:11:17,519 --> 00:11:21,600
um but they're ways of providing

00:11:19,519 --> 00:11:21,920
different services on your docu instance

00:11:21,600 --> 00:11:24,480
so

00:11:21,920 --> 00:11:25,839
postgres1 is probably one of the most

00:11:24,480 --> 00:11:28,560
popular ones

00:11:25,839 --> 00:11:29,519
and that means that we now have postgres

00:11:28,560 --> 00:11:32,560
11.6

00:11:29,519 --> 00:11:34,880
running on our doku instance

00:11:32,560 --> 00:11:35,920
um once that has finished which

00:11:34,880 --> 00:11:38,320
shouldn't take

00:11:35,920 --> 00:11:39,120
much longer uh we can create our first

00:11:38,320 --> 00:11:41,120
database

00:11:39,120 --> 00:11:43,120
so we now get this postgres create

00:11:41,120 --> 00:11:45,680
command that didn't exist before

00:11:43,120 --> 00:11:47,279
because we've installed the plugin so

00:11:45,680 --> 00:11:51,760
that's going to create a database called

00:11:47,279 --> 00:11:54,639
demo hyphen db which will take a second

00:11:51,760 --> 00:11:56,480
and then we're going to link that demodb

00:11:54,639 --> 00:11:57,680
to your new app so we created an

00:11:56,480 --> 00:11:59,920
app called demo app and we're going to

00:11:57,680 --> 00:12:01,519
link the database to it and again this

00:11:59,920 --> 00:12:05,120
is a bit like um

00:12:01,519 --> 00:12:08,480
how how heroku works

00:12:05,120 --> 00:12:11,519
where you make these variables like the

00:12:08,480 --> 00:12:14,560
database url available to your apps

00:12:11,519 --> 00:12:16,320
okay so that's all done um

00:12:14,560 --> 00:12:17,839
something worth knowing about docu and

00:12:16,320 --> 00:12:18,480
in fact lots of these kind of modern

00:12:17,839 --> 00:12:20,160
services

00:12:18,480 --> 00:12:21,760
and heroku similar anything where you're

00:12:20,160 --> 00:12:23,200
using docker generally

00:12:21,760 --> 00:12:24,959
is that they are ephemeral that means

00:12:23,200 --> 00:12:26,560
that every time you deploy them they are

00:12:24,959 --> 00:12:28,079
recreated from scratch

00:12:26,560 --> 00:12:30,399
which feels a bit weird when you're used

00:12:28,079 --> 00:12:30,800
to it um but it turns out to be a good

00:12:30,399 --> 00:12:32,639
thing

00:12:30,800 --> 00:12:34,800
and it helps you design your your

00:12:32,639 --> 00:12:35,120
application in i think in a correct way

00:12:34,800 --> 00:12:38,000
so

00:12:35,120 --> 00:12:39,680
uh follows this this set of rules

00:12:38,000 --> 00:12:41,120
principles called the 12-factor design

00:12:39,680 --> 00:12:41,760
which you may have come across i i

00:12:41,120 --> 00:12:44,560
recommend

00:12:41,760 --> 00:12:46,399
looking about but it means that uh if

00:12:44,560 --> 00:12:48,240
you for example if your app has

00:12:46,399 --> 00:12:50,079
user content you are you have a content

00:12:48,240 --> 00:12:53,120
management system and you're uploading

00:12:50,079 --> 00:12:54,720
images then um they're going to be lost

00:12:53,120 --> 00:12:56,000
every time you redeploy which is no good

00:12:54,720 --> 00:12:57,760
so we need to have some sort of

00:12:56,000 --> 00:12:59,040
persistent storage

00:12:57,760 --> 00:13:01,200
so one approach might be used something

00:12:59,040 --> 00:13:03,600
like s3 but um

00:13:01,200 --> 00:13:04,399
doku has a an option for this as well so

00:13:03,600 --> 00:13:06,320
you

00:13:04,399 --> 00:13:09,440
will create a directory and then we're

00:13:06,320 --> 00:13:09,440
going to mount it

00:13:09,600 --> 00:13:15,920
inside doku giving it the name

00:13:12,800 --> 00:13:18,639
and we again we're going to make that

00:13:15,920 --> 00:13:19,920
available as a variable called media

00:13:18,639 --> 00:13:20,800
root which our application is going to

00:13:19,920 --> 00:13:22,720
need to listen

00:13:20,800 --> 00:13:24,240
on right our application that we've

00:13:22,720 --> 00:13:25,040
built so far so this is going back into

00:13:24,240 --> 00:13:28,560
the white

00:13:25,040 --> 00:13:31,279
tab where we built our application

00:13:28,560 --> 00:13:32,240
that because it's a like a jagger app

00:13:31,279 --> 00:13:36,079
doesn't

00:13:32,240 --> 00:13:37,680
use by default so we need to make sure

00:13:36,079 --> 00:13:41,440
the postgres is installed

00:13:37,680 --> 00:13:44,959
and uh that it's in our requirements.txt

00:13:41,440 --> 00:13:48,800
and then we need to tell our

00:13:44,959 --> 00:13:51,839
app using settings

00:13:48,800 --> 00:13:53,440
to use

00:13:51,839 --> 00:13:55,199
these variables that are now available

00:13:53,440 --> 00:13:56,560
so we now have this database url and

00:13:55,199 --> 00:14:00,000
media root

00:13:56,560 --> 00:14:01,279
available so i'm going to add those just

00:14:00,000 --> 00:14:02,560
plonk them at the bottom of the file

00:14:01,279 --> 00:14:04,160
which isn't really best practice but

00:14:02,560 --> 00:14:07,440
it's fine for now

00:14:04,160 --> 00:14:09,920
okay so we now have our app and we

00:14:07,440 --> 00:14:11,440
have installed doku now we're going to

00:14:09,920 --> 00:14:15,120
do our first deploy so

00:14:11,440 --> 00:14:16,720
deployments in doku are all about git

00:14:15,120 --> 00:14:18,399
so we're going to create our git

00:14:16,720 --> 00:14:22,079
repository add everything to it

00:14:18,399 --> 00:14:22,079
first commit and then we're going to

00:14:22,639 --> 00:14:26,639
make a new remote and i need to put in

00:14:25,120 --> 00:14:30,320
the ip address of our

00:14:26,639 --> 00:14:33,120
server which should be somewhere in my

00:14:30,320 --> 00:14:34,720
clipboard history there we go and adding

00:14:33,120 --> 00:14:38,079
a new remote called doku

00:14:34,720 --> 00:14:40,480
and then the final step is to get push

00:14:38,079 --> 00:14:41,920
to doku this is the bit that's going to

00:14:40,480 --> 00:14:43,519
take a minute or two

00:14:41,920 --> 00:14:45,199
and while that's happening i can just

00:14:43,519 --> 00:14:46,399
kind of recap a bit on what we've got to

00:14:45,199 --> 00:14:48,399
do so far

00:14:46,399 --> 00:14:50,000
um and i've got actually some slides to

00:14:48,399 --> 00:14:52,399
kind of help us think about this so

00:14:50,000 --> 00:14:54,000
we made a simple django site we

00:14:52,399 --> 00:14:57,360
installed doku on a vm

00:14:54,000 --> 00:14:58,079
using those two lines we enabled

00:14:57,360 --> 00:15:00,079
postgres

00:14:58,079 --> 00:15:02,480
in that docker instance we added

00:15:00,079 --> 00:15:05,519
persistent storage

00:15:02,480 --> 00:15:08,720
and we just ran git push to deploy

00:15:05,519 --> 00:15:09,440
so the um the the making a simple django

00:15:08,720 --> 00:15:11,360
site is what you do

00:15:09,440 --> 00:15:13,600
normally installing doku and the

00:15:11,360 --> 00:15:15,839
postgres things are one time only

00:15:13,600 --> 00:15:17,600
um after that and and the persistent

00:15:15,839 --> 00:15:18,959
storage is probably for each app and

00:15:17,600 --> 00:15:19,519
then the git push to deploy is what you

00:15:18,959 --> 00:15:22,240
do for

00:15:19,519 --> 00:15:23,120
for all your apps afterwards so we can

00:15:22,240 --> 00:15:26,079
see what's happening

00:15:23,120 --> 00:15:26,720
now we push that up to doku and doku

00:15:26,079 --> 00:15:29,120
immediately

00:15:26,720 --> 00:15:29,759
saw the docker file that existed in our

00:15:29,120 --> 00:15:32,320
in our

00:15:29,759 --> 00:15:33,920
app and uh so understood what to do with

00:15:32,320 --> 00:15:35,839
it so it um

00:15:33,920 --> 00:15:36,959
it's following the instructions in the

00:15:35,839 --> 00:15:38,560
docker file it's

00:15:36,959 --> 00:15:40,880
currently now installing all the

00:15:38,560 --> 00:15:41,839
contents of requirements.txt

00:15:40,880 --> 00:15:44,880
so all those things are going to be

00:15:41,839 --> 00:15:44,880
available to our app

00:15:45,040 --> 00:15:51,920
it will link up the

00:15:48,959 --> 00:15:53,440
postgres database hopefully and make

00:15:51,920 --> 00:15:55,199
that available to our app

00:15:53,440 --> 00:15:58,399
and once it's happy that everything's

00:15:55,199 --> 00:16:00,959
there it will deploy it

00:15:58,399 --> 00:16:02,399
and one of the things that doku does is

00:16:00,959 --> 00:16:02,959
check that everything's working before

00:16:02,399 --> 00:16:07,920
it makes the

00:16:02,959 --> 00:16:11,040
before it deploys it live which is um a

00:16:07,920 --> 00:16:12,720
really a valuable step but it does

00:16:11,040 --> 00:16:14,399
slightly slow things down and you can do

00:16:12,720 --> 00:16:14,800
it in a more intelligent way if you like

00:16:14,399 --> 00:16:18,639
by

00:16:14,800 --> 00:16:18,639
creating your own custom checks

00:16:21,279 --> 00:16:24,399
this isn't the most interesting part

00:16:23,199 --> 00:16:26,959
while it's just uh

00:16:24,399 --> 00:16:28,079
waiting to see what the installation

00:16:26,959 --> 00:16:30,800
part is

00:16:28,079 --> 00:16:31,759
um and then but now it's doing the

00:16:30,800 --> 00:16:33,920
deployment so

00:16:31,759 --> 00:16:35,519
uh these steps will look familiar to

00:16:33,920 --> 00:16:39,199
anyone who's done

00:16:35,519 --> 00:16:40,880
docker before um and maybe this is just

00:16:39,199 --> 00:16:42,480
well this takes another 30 seconds i

00:16:40,880 --> 00:16:45,600
could just start talking a bit about

00:16:42,480 --> 00:16:47,120
docker which is um

00:16:45,600 --> 00:16:48,800
we don't have time in this talk to kind

00:16:47,120 --> 00:16:51,519
of go into information on

00:16:48,800 --> 00:16:52,639
to kind of full background on docker but

00:16:51,519 --> 00:16:55,279
docker is a

00:16:52,639 --> 00:16:56,320
a way of packaging up your your

00:16:55,279 --> 00:16:58,880
applications

00:16:56,320 --> 00:17:00,560
um you know it's a in a like a very

00:16:58,880 --> 00:17:02,240
lightweight virtual machine

00:17:00,560 --> 00:17:04,559
and it's increasingly becoming a

00:17:02,240 --> 00:17:04,959
standard for deploying your applications

00:17:04,559 --> 00:17:08,400
across

00:17:04,959 --> 00:17:10,480
lots of different systems and it

00:17:08,400 --> 00:17:11,760
also can be used useful for local

00:17:10,480 --> 00:17:13,280
development

00:17:11,760 --> 00:17:15,439
so when you create a wagtail site it

00:17:13,280 --> 00:17:16,640
creates a simple docker file for you

00:17:15,439 --> 00:17:18,000
but there are other ways of doing that

00:17:16,640 --> 00:17:19,439
so if you have a django app if you

00:17:18,000 --> 00:17:20,720
follow for example one of the cookie

00:17:19,439 --> 00:17:23,280
cutter steps

00:17:20,720 --> 00:17:24,720
then the the cookie cutter the django

00:17:23,280 --> 00:17:25,199
cookie cutter then you'll also get a doc

00:17:24,720 --> 00:17:26,799
file

00:17:25,199 --> 00:17:28,480
so that's now finished and it's telling

00:17:26,799 --> 00:17:31,440
us that our application is deployed

00:17:28,480 --> 00:17:32,400
on a live server and we hold our breaths

00:17:31,440 --> 00:17:35,120
type it in

00:17:32,400 --> 00:17:35,919
and that that's live so we've built our

00:17:35,120 --> 00:17:39,360
site

00:17:35,919 --> 00:17:41,919
we have uh installed docker doku

00:17:39,360 --> 00:17:44,160
we have uh deployed a site to docu and

00:17:41,919 --> 00:17:45,200
it's now live however there are no news

00:17:44,160 --> 00:17:47,360
items on it

00:17:45,200 --> 00:17:48,320
because we haven't created any content

00:17:47,360 --> 00:17:50,000
on that one yet

00:17:48,320 --> 00:17:51,679
so we're going to need to run a couple

00:17:50,000 --> 00:17:53,600
of tasks

00:17:51,679 --> 00:17:55,120
and this is back on the server we're

00:17:53,600 --> 00:17:57,120
going to run a management task and you

00:17:55,120 --> 00:17:58,880
can see the syntax for this is

00:17:57,120 --> 00:18:00,880
pretty much like the normal manage.pi

00:17:58,880 --> 00:18:02,720
but you you start it with doku run and

00:18:00,880 --> 00:18:07,440
then you specify the name of the app

00:18:02,720 --> 00:18:07,440
takes a few seconds um longer than

00:18:08,080 --> 00:18:11,520
uh than a normal management task because

00:18:09,840 --> 00:18:13,840
it has to spin up a container

00:18:11,520 --> 00:18:15,679
quickly in order to make that available

00:18:13,840 --> 00:18:18,559
and then similarly we're going to

00:18:15,679 --> 00:18:20,160
create some fake items just like we did

00:18:18,559 --> 00:18:23,039
before but this time we're running it on

00:18:20,160 --> 00:18:24,640
doku so again a few seconds for it to

00:18:23,039 --> 00:18:27,200
mount the container and then it

00:18:24,640 --> 00:18:29,360
starts creating all those fake items so

00:18:27,200 --> 00:18:32,799
now if we look again

00:18:29,360 --> 00:18:36,320
in on that one but on our live server

00:18:32,799 --> 00:18:38,480
and go to fake index we see

00:18:36,320 --> 00:18:40,480
all our site and all the pages that have

00:18:38,480 --> 00:18:41,440
been created and just to confirm that

00:18:40,480 --> 00:18:44,880
the admin

00:18:41,440 --> 00:18:46,320
user worked i can hopefully

00:18:44,880 --> 00:18:47,919
log in now using the details i just

00:18:46,320 --> 00:18:51,360
created

00:18:47,919 --> 00:18:54,960
and browse through wagtail

00:18:51,360 --> 00:18:59,280
and let's edit a page

00:18:54,960 --> 00:19:01,840
maybe this first one box last resource

00:18:59,280 --> 00:19:03,679
let's check this is working explanation

00:19:01,840 --> 00:19:08,640
mark we'll change that

00:19:03,679 --> 00:19:08,640
image to audience democratic modern

00:19:08,840 --> 00:19:14,960
and bolden some of that and preview it

00:19:12,640 --> 00:19:16,960
and that all looks good i must say i

00:19:14,960 --> 00:19:19,600
find these uh

00:19:16,960 --> 00:19:20,080
i find these randomly generated content

00:19:19,600 --> 00:19:25,360
really

00:19:20,080 --> 00:19:27,600
intriguing and uh makes me think

00:19:25,360 --> 00:19:29,039
sometimes it is to kind of sound really

00:19:27,600 --> 00:19:31,679
weirdly profound

00:19:29,039 --> 00:19:34,640
never direction what price might sell

00:19:31,679 --> 00:19:36,640
rate really positive

00:19:34,640 --> 00:19:38,559
sometimes feel like who needs artificial

00:19:36,640 --> 00:19:39,200
intelligence when randomness is this

00:19:38,559 --> 00:19:42,320
good

00:19:39,200 --> 00:19:44,480
okay so to recap on where we've got to

00:19:42,320 --> 00:19:45,760
uh we have good push to deploy we now

00:19:44,480 --> 00:19:47,760
have a live site

00:19:45,760 --> 00:19:49,200
production ready running on our five

00:19:47,760 --> 00:19:52,799
dollar instance

00:19:49,200 --> 00:19:55,919
this could handle probably five or six

00:19:52,799 --> 00:19:57,760
reasonable sized django apps and for

00:19:55,919 --> 00:20:00,320
five dollars a month and you could

00:19:57,760 --> 00:20:02,320
get push to deploy and it's a you know

00:20:00,320 --> 00:20:05,039
pretty pretty quick process so far

00:20:02,320 --> 00:20:06,000
okay next up is static site generation

00:20:05,039 --> 00:20:07,760
there are quite a few ways

00:20:06,000 --> 00:20:09,440
of generating a static version of your

00:20:07,760 --> 00:20:11,679
site the one i'm going to use is based

00:20:09,440 --> 00:20:13,520
on django bakery which is open sourced

00:20:11,679 --> 00:20:16,240
by the la times

00:20:13,520 --> 00:20:17,679
um in fact we're going to use wagtail

00:20:16,240 --> 00:20:20,240
bakery which is

00:20:17,679 --> 00:20:21,520
just a sort of a bit of a wrapper around

00:20:20,240 --> 00:20:24,960
django bakery that does some more

00:20:21,520 --> 00:20:28,320
convenient things for wagtail sites

00:20:24,960 --> 00:20:30,480
so install that editor requirements.txt

00:20:28,320 --> 00:20:32,159
and then make a few changes to our

00:20:30,480 --> 00:20:35,679
settings again

00:20:32,159 --> 00:20:38,159
demo settings based or pi add it to the

00:20:35,679 --> 00:20:38,159
bottom

00:20:38,559 --> 00:20:42,240
um so we are adding bakery in whitetail

00:20:41,200 --> 00:20:44,559
bakery

00:20:42,240 --> 00:20:45,520
we're telling it to build out to temp

00:20:44,559 --> 00:20:47,120
slash dist

00:20:45,520 --> 00:20:48,799
and we're saying that we want all our

00:20:47,120 --> 00:20:50,240
published pages those are going to be

00:20:48,799 --> 00:20:53,200
the pages that we want

00:20:50,240 --> 00:20:55,760
to be live and this gives us a new

00:20:53,200 --> 00:20:58,880
management command

00:20:55,760 --> 00:21:01,280
build and build will

00:20:58,880 --> 00:21:03,440
take that view and create published

00:21:01,280 --> 00:21:05,760
versions of all those pages

00:21:03,440 --> 00:21:07,919
uh usually takes about five or six when

00:21:05,760 --> 00:21:11,520
they said that can sit in nine seconds

00:21:07,919 --> 00:21:15,600
um and so if i now uh

00:21:11,520 --> 00:21:18,799
check in my uh what do we say

00:21:15,600 --> 00:21:21,440
temp slash dist

00:21:18,799 --> 00:21:22,159
uh there we can see we have it's created

00:21:21,440 --> 00:21:24,480
some

00:21:22,159 --> 00:21:27,120
pages and we can see for each of those

00:21:24,480 --> 00:21:30,240
pages it's created a directory

00:21:27,120 --> 00:21:32,080
and a page inside it so it's got we now

00:21:30,240 --> 00:21:33,919
have static content for all those pages

00:21:32,080 --> 00:21:35,360
which is great but it's just running on

00:21:33,919 --> 00:21:36,720
our laptop still on our development

00:21:35,360 --> 00:21:37,280
environment so now we need to publish

00:21:36,720 --> 00:21:40,480
that

00:21:37,280 --> 00:21:41,520
for that i'm going to use netlify and

00:21:40,480 --> 00:21:43,440
there are lots of other ways we could do

00:21:41,520 --> 00:21:45,919
this but netlify

00:21:43,440 --> 00:21:47,360
is uh would never has a lot of benefits

00:21:45,919 --> 00:21:49,520
so it's an excellent service

00:21:47,360 --> 00:21:50,799
and you you can install the command line

00:21:49,520 --> 00:21:53,520
version like this

00:21:50,799 --> 00:21:54,480
i've done that already but uh you can do

00:21:53,520 --> 00:21:55,039
that it'll just take you a couple of

00:21:54,480 --> 00:21:58,240
minutes

00:21:55,039 --> 00:22:01,200
and um now i'm going to

00:21:58,240 --> 00:22:02,799
go into that directory so this is the

00:22:01,200 --> 00:22:03,760
one with all the statically generated

00:22:02,799 --> 00:22:06,960
content

00:22:03,760 --> 00:22:08,240
and i'm going to run netify init so

00:22:06,960 --> 00:22:09,440
the first time you do this you'll

00:22:08,240 --> 00:22:10,840
probably need to authenticate and you

00:22:09,440 --> 00:22:12,880
can do that against your github

00:22:10,840 --> 00:22:13,919
credentials i've done it already so i

00:22:12,880 --> 00:22:17,039
can just go ahead

00:22:13,919 --> 00:22:20,960
like this choose my team

00:22:17,039 --> 00:22:23,200
uh hello con

00:22:20,960 --> 00:22:26,240
you hope no one has used that before yes

00:22:23,200 --> 00:22:29,520
so that insight has now been created

00:22:26,240 --> 00:22:29,520
but now i need to deploy

00:22:29,760 --> 00:22:33,360
so the first one was just creating the

00:22:31,760 --> 00:22:34,240
site i'm going to do from this current

00:22:33,360 --> 00:22:36,480
directory

00:22:34,240 --> 00:22:37,919
it's going to check and see if there any

00:22:36,480 --> 00:22:39,360
files exist or up there

00:22:37,919 --> 00:22:40,880
so already and they don't because it's

00:22:39,360 --> 00:22:43,120
the first time we've done it and then

00:22:40,880 --> 00:22:46,159
it's going to push all those files up

00:22:43,120 --> 00:22:48,799
and once that's done it is hopefully

00:22:46,159 --> 00:22:50,240
going to deploy them and this is

00:22:48,799 --> 00:22:52,480
normally super quick

00:22:50,240 --> 00:22:53,600
uh waiting for deploy to go live just

00:22:52,480 --> 00:22:55,360
while that's going i'll show you what

00:22:53,600 --> 00:22:58,640
the ui looks like

00:22:55,360 --> 00:23:02,000
in netlify on the web ui

00:22:58,640 --> 00:23:03,520
so here i'm now seeing the manual deploy

00:23:02,000 --> 00:23:05,120
so that's now being created

00:23:03,520 --> 00:23:07,679
the site has not been deployed as we

00:23:05,120 --> 00:23:09,280
know um

00:23:07,679 --> 00:23:12,240
this is sort of hanging at that last

00:23:09,280 --> 00:23:14,559
minute so i'm going to do the classic

00:23:12,240 --> 00:23:15,280
turn off and turn it on again stop it

00:23:14,559 --> 00:23:16,480
and try and

00:23:15,280 --> 00:23:17,440
start again this i'm going to do prod

00:23:16,480 --> 00:23:18,480
which is going to make it go live

00:23:17,440 --> 00:23:20,720
straight away it's

00:23:18,480 --> 00:23:23,200
usually a separate step but uh this time

00:23:20,720 --> 00:23:25,440
i'm just going to do it one day

00:23:23,200 --> 00:23:26,720
this time we're getting some nice emojis

00:23:25,440 --> 00:23:29,200
that we didn't get last time which is a

00:23:26,720 --> 00:23:29,200
bit odd

00:23:29,840 --> 00:23:34,720
um and this step uh once it goes live

00:23:33,039 --> 00:23:36,880
should give us a static version of the

00:23:34,720 --> 00:23:40,400
site hosted on netlify which

00:23:36,880 --> 00:23:42,799
has its own collection of

00:23:40,400 --> 00:23:44,080
cdns and works across clouds and has a

00:23:42,799 --> 00:23:45,120
lot of other interesting features

00:23:44,080 --> 00:23:48,000
particularly around

00:23:45,120 --> 00:23:48,880
things like serverless functions and

00:23:48,000 --> 00:23:51,039
authentication

00:23:48,880 --> 00:23:52,799
and so on um which we're not going to go

00:23:51,039 --> 00:23:54,000
into in this talk

00:23:52,799 --> 00:23:56,000
i'm hoping that's going to finish a

00:23:54,000 --> 00:23:58,720
minute i can do a bit kind of uh

00:23:56,000 --> 00:24:00,080
celebratory ta-da if it doesn't i'm

00:23:58,720 --> 00:24:02,960
going to have to wait

00:24:00,080 --> 00:24:04,320
and go back to a previous one to show

00:24:02,960 --> 00:24:08,159
that it is working so

00:24:04,320 --> 00:24:10,640
this is one i did just slightly before

00:24:08,159 --> 00:24:13,279
and uh click on it here and you can see

00:24:10,640 --> 00:24:16,880
now this is running on netlify.app

00:24:13,279 --> 00:24:18,080
and all these pages are available so the

00:24:16,880 --> 00:24:20,240
content of our django

00:24:18,080 --> 00:24:21,840
site the output of our django site is

00:24:20,240 --> 00:24:23,600
now running on netlife you can see on

00:24:21,840 --> 00:24:24,240
netflight app netlife knows nothing

00:24:23,600 --> 00:24:27,360
about

00:24:24,240 --> 00:24:29,200
django or python or databases

00:24:27,360 --> 00:24:30,400
it's hosting the static pages but it's

00:24:29,200 --> 00:24:32,640
doing them in a very

00:24:30,400 --> 00:24:34,240
efficient way and it also interests me a

00:24:32,640 --> 00:24:35,600
very cheap way

00:24:34,240 --> 00:24:37,120
that one hasn't gone live so i was lucky

00:24:35,600 --> 00:24:39,120
i had that back up for me hopefully it

00:24:37,120 --> 00:24:42,000
will do before the end of my talk

00:24:39,120 --> 00:24:42,799
so you'll believe me okay so where have

00:24:42,000 --> 00:24:45,679
we got to

00:24:42,799 --> 00:24:46,000
uh live demo two we generated our static

00:24:45,679 --> 00:24:48,559
pages

00:24:46,000 --> 00:24:49,679
we used um we used django bakery but

00:24:48,559 --> 00:24:50,880
there's a few other approaches we could

00:24:49,679 --> 00:24:54,320
have used too we installed

00:24:50,880 --> 00:24:56,960
netlify and we deployed to netlify and

00:24:54,320 --> 00:24:57,919
uh great next one then the final one of

00:24:56,960 --> 00:25:00,320
this demo

00:24:57,919 --> 00:25:01,360
is using google cloud so like i said

00:25:00,320 --> 00:25:03,520
before this is a

00:25:01,360 --> 00:25:05,200
new product newish product recently come

00:25:03,520 --> 00:25:07,520
out of beta from google

00:25:05,200 --> 00:25:09,600
and called cloud run and you have to

00:25:07,520 --> 00:25:12,880
start by installing the google cloud

00:25:09,600 --> 00:25:14,559
sdk which i have already but

00:25:12,880 --> 00:25:16,320
you could do doesn't take too long

00:25:14,559 --> 00:25:17,600
cancel that one now so we can go through

00:25:16,320 --> 00:25:19,760
this

00:25:17,600 --> 00:25:21,360
um and then you have to create so google

00:25:19,760 --> 00:25:24,640
cloud has this concept of

00:25:21,360 --> 00:25:25,600
projects um so you can kind of group all

00:25:24,640 --> 00:25:26,960
your stuff together in different

00:25:25,600 --> 00:25:27,840
projects so

00:25:26,960 --> 00:25:30,400
this is what it looks like in the

00:25:27,840 --> 00:25:32,400
console here i've created a

00:25:30,400 --> 00:25:33,760
project called deploytalk which has that

00:25:32,400 --> 00:25:36,799
id

00:25:33,760 --> 00:25:42,159
um so i i need to

00:25:36,799 --> 00:25:44,960
tell google cloud

00:25:42,159 --> 00:25:44,960
the name of my

00:25:46,000 --> 00:25:51,039
project um and

00:25:49,120 --> 00:25:53,279
then i you have to enable the minimum

00:25:51,039 --> 00:25:53,679
apis which i've done already that says

00:25:53,279 --> 00:25:56,080
which

00:25:53,679 --> 00:25:57,919
what bits of google cloud we want to use

00:25:56,080 --> 00:25:59,200
you have to set your project id in

00:25:57,919 --> 00:26:01,200
region that's going to be useful for

00:25:59,200 --> 00:26:03,840
some uh

00:26:01,200 --> 00:26:05,120
shell scripts later and we're going to

00:26:03,840 --> 00:26:06,559
it's this approach is going to be a

00:26:05,120 --> 00:26:10,000
little bit similar to

00:26:06,559 --> 00:26:12,960
how to the docu one where we get a

00:26:10,000 --> 00:26:13,520
docker docker image and we we submit it

00:26:12,960 --> 00:26:15,840
so

00:26:13,520 --> 00:26:17,440
now from our app this is kind of there's

00:26:15,840 --> 00:26:18,000
two key steps for this the first most of

00:26:17,440 --> 00:26:19,760
it is kind of

00:26:18,000 --> 00:26:21,360
boilerplate really this is the first key

00:26:19,760 --> 00:26:22,400
step where we're going to take our

00:26:21,360 --> 00:26:23,279
current app actually we're not going to

00:26:22,400 --> 00:26:26,799
do this now because i'm in the wrong

00:26:23,279 --> 00:26:26,799
place i need to go back to my

00:26:26,880 --> 00:26:31,679
uh demo app

00:26:30,480 --> 00:26:34,320
and we're going to take this current

00:26:31,679 --> 00:26:36,400
directory and submit it

00:26:34,320 --> 00:26:38,960
as a submit a build for it so it's going

00:26:36,400 --> 00:26:40,720
to create a docker image based on the

00:26:38,960 --> 00:26:42,480
contents of my directory

00:26:40,720 --> 00:26:44,080
which apparently i've got about 19

00:26:42,480 --> 00:26:47,440
gigabytes in total

00:26:44,080 --> 00:26:50,559
and it's going to push all that up to to

00:26:47,440 --> 00:26:52,559
google cloud's image storage and

00:26:50,559 --> 00:26:54,559
make it available for other services to

00:26:52,559 --> 00:26:57,840
use

00:26:54,559 --> 00:26:59,440
um we had this first step called

00:26:57,840 --> 00:27:01,039
use can eco which is quite a recent

00:26:59,440 --> 00:27:03,200
feature uh it's

00:27:01,039 --> 00:27:04,080
a strange name but it basically enables

00:27:03,200 --> 00:27:06,640
caching

00:27:04,080 --> 00:27:08,480
of your build step so you can see in

00:27:06,640 --> 00:27:09,919
some of the lines coming up here that

00:27:08,480 --> 00:27:12,720
uh this build is quicker than it would

00:27:09,919 --> 00:27:14,640
have been otherwise because uh it's

00:27:12,720 --> 00:27:16,720
i've done it once before and uh

00:27:14,640 --> 00:27:19,440
everything that hasn't changed in my app

00:27:16,720 --> 00:27:21,760
can just be reused from the cached

00:27:19,440 --> 00:27:23,840
layers

00:27:21,760 --> 00:27:24,880
so having done all that and run

00:27:23,840 --> 00:27:28,000
manage.pi

00:27:24,880 --> 00:27:30,559
it's creating that uh

00:27:28,000 --> 00:27:31,520
adding all this to the cache and it's

00:27:30,559 --> 00:27:33,120
going to put the

00:27:31,520 --> 00:27:35,440
the whole image make the whole image

00:27:33,120 --> 00:27:37,840
available for us to deploy

00:27:35,440 --> 00:27:38,799
there we go done took 48 seconds so it's

00:27:37,840 --> 00:27:41,520
created this

00:27:38,799 --> 00:27:42,240
image and the final step is to deploy

00:27:41,520 --> 00:27:45,440
that image

00:27:42,240 --> 00:27:46,640
so i'm going to paste this in and then

00:27:45,440 --> 00:27:48,960
and run it and then i'm going to tell

00:27:46,640 --> 00:27:51,360
you what it means so

00:27:48,960 --> 00:27:52,080
we are saying gcloud is the general term

00:27:51,360 --> 00:27:54,240
run is

00:27:52,080 --> 00:27:56,320
because this is about um google cloud

00:27:54,240 --> 00:27:58,799
run the action is deploy

00:27:56,320 --> 00:28:00,799
and demo app cloud run is the name of

00:27:58,799 --> 00:28:02,960
the service that we want to deploy

00:28:00,799 --> 00:28:04,480
and it's going to deploy a service from

00:28:02,960 --> 00:28:06,480
this image which is the one that we just

00:28:04,480 --> 00:28:07,120
uploaded before so we created an image

00:28:06,480 --> 00:28:10,559
for demo

00:28:07,120 --> 00:28:13,200
image and we're now deploying it

00:28:10,559 --> 00:28:13,760
and this should be fairly quick because

00:28:13,200 --> 00:28:17,279
uh

00:28:13,760 --> 00:28:19,840
google run service just needs to to

00:28:17,279 --> 00:28:21,360
fetch that image from locally from

00:28:19,840 --> 00:28:24,240
elsewhere on google cloud

00:28:21,360 --> 00:28:24,720
and create a revision for it and that is

00:28:24,240 --> 00:28:27,200
now

00:28:24,720 --> 00:28:28,480
done so and it a bit like netflix

00:28:27,200 --> 00:28:32,799
assigns you

00:28:28,480 --> 00:28:33,360
a um a new url and paste that in and hit

00:28:32,799 --> 00:28:34,960
enter

00:28:33,360 --> 00:28:36,399
and then one thing you'll notice here is

00:28:34,960 --> 00:28:40,399
that this is slow

00:28:36,399 --> 00:28:42,480
and um this is there's the

00:28:40,399 --> 00:28:44,080
this is because of one of the issues

00:28:42,480 --> 00:28:47,360
with serverlessness generally

00:28:44,080 --> 00:28:48,320
is this so-called cold starts and cold

00:28:47,360 --> 00:28:50,480
starts are because

00:28:48,320 --> 00:28:52,320
in this case when we the first time we

00:28:50,480 --> 00:28:55,600
request the app it has to

00:28:52,320 --> 00:28:57,360
uh has to start that container

00:28:55,600 --> 00:28:58,880
and this container is a rather

00:28:57,360 --> 00:29:02,720
inefficient container

00:28:58,880 --> 00:29:04,159
because um uh the way that the docker

00:29:02,720 --> 00:29:05,520
file works

00:29:04,159 --> 00:29:07,520
in that you get out of the box in

00:29:05,520 --> 00:29:08,880
wagtail it runs a migration just to make

00:29:07,520 --> 00:29:09,679
sure that your database is up to date

00:29:08,880 --> 00:29:10,960
which you don't

00:29:09,679 --> 00:29:12,640
you really don't want to run all your

00:29:10,960 --> 00:29:13,679
migrations the first time anyone

00:29:12,640 --> 00:29:16,960
requests your

00:29:13,679 --> 00:29:19,200
site of course it's uh then and there's

00:29:16,960 --> 00:29:20,880
a lot you can do to optimize that so

00:29:19,200 --> 00:29:22,480
that's not kind of best practice for

00:29:20,880 --> 00:29:23,600
production docker files and actually you

00:29:22,480 --> 00:29:27,440
should move that

00:29:23,600 --> 00:29:28,720
that step out of your docker file which

00:29:27,440 --> 00:29:30,640
and there's lots of good documentation

00:29:28,720 --> 00:29:33,520
on on how to do that

00:29:30,640 --> 00:29:34,320
once you once it is up and running then

00:29:33,520 --> 00:29:35,760
uh

00:29:34,320 --> 00:29:37,520
google cloud does a really good job of

00:29:35,760 --> 00:29:39,039
preventing cold starts afterwards but

00:29:37,520 --> 00:29:40,880
for that first one

00:29:39,039 --> 00:29:43,039
you want to find ways of reducing that

00:29:40,880 --> 00:29:44,960
cold start so we now have

00:29:43,039 --> 00:29:46,720
our set that same app running in i think

00:29:44,960 --> 00:29:49,600
three different places we have it on

00:29:46,720 --> 00:29:50,159
doku we have it on netlify and we have

00:29:49,600 --> 00:29:53,360
it on

00:29:50,159 --> 00:29:56,960
cloud run let me just quickly show you

00:29:53,360 --> 00:29:58,480
how that looks on cloud run in their ui

00:29:56,960 --> 00:30:00,720
um this is a couple of interesting

00:29:58,480 --> 00:30:02,880
things about the setup here

00:30:00,720 --> 00:30:05,360
also i find that this ui quite slow

00:30:02,880 --> 00:30:05,360
sometimes

00:30:05,919 --> 00:30:08,720
that'd be a shame if that doesn't come

00:30:07,120 --> 00:30:09,200
up quickly while it's going i'm just

00:30:08,720 --> 00:30:11,039
going to

00:30:09,200 --> 00:30:12,720
recap on what we've done we installed

00:30:11,039 --> 00:30:14,480
the g cloud cli that made this possible

00:30:12,720 --> 00:30:17,039
we built an image

00:30:14,480 --> 00:30:17,760
by and we pushed it up to google cloud

00:30:17,039 --> 00:30:20,840
storage

00:30:17,760 --> 00:30:22,159
and then we deployed it to google cloud

00:30:20,840 --> 00:30:25,279
run

00:30:22,159 --> 00:30:26,080
this is still loading sometimes you just

00:30:25,279 --> 00:30:29,919
give it a little

00:30:26,080 --> 00:30:30,799
tweak the thing i wanted to show you

00:30:29,919 --> 00:30:34,640
here

00:30:30,799 --> 00:30:36,320
is um how uh you can configure your

00:30:34,640 --> 00:30:38,080
the scaling of your instances which i

00:30:36,320 --> 00:30:39,120
think is the really interesting thing

00:30:38,080 --> 00:30:40,559
about

00:30:39,120 --> 00:30:42,960
google cloud run is the way that it

00:30:40,559 --> 00:30:46,720
scales not just

00:30:42,960 --> 00:30:49,279
upwards so you can scale to

00:30:46,720 --> 00:30:50,960
a thousand by default it's a thousand

00:30:49,279 --> 00:30:51,760
instances of your container each one of

00:30:50,960 --> 00:30:56,159
which

00:30:51,760 --> 00:30:57,679
by default um can handle 80 concurrent

00:30:56,159 --> 00:31:00,159
requests

00:30:57,679 --> 00:31:01,760
but also it scales to zero so here's the

00:31:00,159 --> 00:31:03,519
revision i just created

00:31:01,760 --> 00:31:04,880
for my next one i could set some other

00:31:03,519 --> 00:31:06,240
variables like

00:31:04,880 --> 00:31:07,679
how much memory so this is currently

00:31:06,240 --> 00:31:08,799
running on a tiny amount of memory so

00:31:07,679 --> 00:31:10,880
i'd probably want more like

00:31:08,799 --> 00:31:12,320
half a gig and i could change the number

00:31:10,880 --> 00:31:14,240
of cpus

00:31:12,320 --> 00:31:15,519
uh and i could say how many requests i

00:31:14,240 --> 00:31:16,640
have but this is i think the really

00:31:15,519 --> 00:31:18,960
interesting part

00:31:16,640 --> 00:31:20,480
so this will currently scale up to a

00:31:18,960 --> 00:31:21,840
thousand instances if

00:31:20,480 --> 00:31:23,760
you need them without you having to do

00:31:21,840 --> 00:31:25,919
anything just as your traffic increases

00:31:23,760 --> 00:31:27,679
it will create new instances when it

00:31:25,919 --> 00:31:28,399
needs them but also it will scale down

00:31:27,679 --> 00:31:30,480
to zero

00:31:28,399 --> 00:31:31,519
and i gave a talk about serverlessness

00:31:30,480 --> 00:31:33,200
in in

00:31:31,519 --> 00:31:34,720
florence i think three years ago was it

00:31:33,200 --> 00:31:36,640
two or three years ago and

00:31:34,720 --> 00:31:37,840
i talked about this idea of turning the

00:31:36,640 --> 00:31:39,279
lights off when you leave the room which

00:31:37,840 --> 00:31:42,320
i think is one of the most interesting

00:31:39,279 --> 00:31:43,760
aspects of serverlessness that um when

00:31:42,320 --> 00:31:46,399
people aren't on your site

00:31:43,760 --> 00:31:47,120
it's kind of not financial or ecological

00:31:46,399 --> 00:31:49,039
sense

00:31:47,120 --> 00:31:50,320
to keep that server running and that's

00:31:49,039 --> 00:31:52,000
that's what i like about this sort of

00:31:50,320 --> 00:31:54,080
service approach is that

00:31:52,000 --> 00:31:55,840
you are only paying when people are

00:31:54,080 --> 00:31:57,279
hitting your site in this and this the

00:31:55,840 --> 00:31:58,240
servers are even only alive when you're

00:31:57,279 --> 00:31:59,840
hitting them

00:31:58,240 --> 00:32:02,000
so i think scaling to zero is a kind of

00:31:59,840 --> 00:32:03,360
really interesting component of all this

00:32:02,000 --> 00:32:05,279
all right i want to talk very in the

00:32:03,360 --> 00:32:06,399
last remaining minutes very briefly

00:32:05,279 --> 00:32:07,679
about the pros and cons of these

00:32:06,399 --> 00:32:10,320
different approaches so

00:32:07,679 --> 00:32:11,600
doku i think this is the easiest way of

00:32:10,320 --> 00:32:13,279
getting your site into production so we

00:32:11,600 --> 00:32:15,120
did it i think in under 10 minutes this

00:32:13,279 --> 00:32:16,720
is a standard django site

00:32:15,120 --> 00:32:18,880
you can go live in 10 minutes if you

00:32:16,720 --> 00:32:21,519
have a linux box available a five dollar

00:32:18,880 --> 00:32:23,600
linux box it also encourages good coding

00:32:21,519 --> 00:32:25,120
practices so this that 12 factor design

00:32:23,600 --> 00:32:26,320
i talked about before and it's super

00:32:25,120 --> 00:32:28,399
cheap you can run

00:32:26,320 --> 00:32:29,840
a few django sites are for five dollars

00:32:28,399 --> 00:32:31,360
a month and these are like you know that

00:32:29,840 --> 00:32:33,279
you can do this in production and we've

00:32:31,360 --> 00:32:34,799
done this successfully at torchbox

00:32:33,279 --> 00:32:36,799
on the other hand doku doesn't have

00:32:34,799 --> 00:32:38,880
horizontal scaling so

00:32:36,799 --> 00:32:41,039
if you need to handle if you need more

00:32:38,880 --> 00:32:44,640
instances you can't you can't have lots

00:32:41,039 --> 00:32:45,840
of doku instances let next to each other

00:32:44,640 --> 00:32:47,519
and in a similar way there's no

00:32:45,840 --> 00:32:49,279
redundancy if the hard disk dies on your

00:32:47,519 --> 00:32:52,159
machine then all your sites will go

00:32:49,279 --> 00:32:53,039
the infrastructure is on you static site

00:32:52,159 --> 00:32:55,039
generation

00:32:53,039 --> 00:32:56,640
the pros are pretty convincing it's the

00:32:55,039 --> 00:32:58,799
cheapest way to host your site it's the

00:32:56,640 --> 00:33:00,880
you cannot be faster than a static

00:32:58,799 --> 00:33:02,080
site and you cannot hack a static site

00:33:00,880 --> 00:33:03,679
so it's you know it's

00:33:02,080 --> 00:33:05,840
it's pretty compelling for all these

00:33:03,679 --> 00:33:07,519
reasons um

00:33:05,840 --> 00:33:09,120
on the other hand you get this build

00:33:07,519 --> 00:33:10,320
time delay so if you have a really big

00:33:09,120 --> 00:33:11,519
site and you have to generate static

00:33:10,320 --> 00:33:12,640
version each time then there's a there

00:33:11,519 --> 00:33:14,159
can be a pause between

00:33:12,640 --> 00:33:15,519
making the content and having it live

00:33:14,159 --> 00:33:17,760
there are more moving parts because you

00:33:15,519 --> 00:33:19,279
need a django server and a static site

00:33:17,760 --> 00:33:21,279
server like netlify

00:33:19,279 --> 00:33:22,399
and it may not suit your app so it works

00:33:21,279 --> 00:33:24,799
well for

00:33:22,399 --> 00:33:25,760
uh kind of static like a content manager

00:33:24,799 --> 00:33:27,200
type sites

00:33:25,760 --> 00:33:28,880
but if you need personalization where

00:33:27,200 --> 00:33:29,840
you have logins or lots of forms then

00:33:28,880 --> 00:33:31,360
it's probably not going to be the

00:33:29,840 --> 00:33:34,480
approach for you

00:33:31,360 --> 00:33:34,799
on the google run side it scales forever

00:33:34,480 --> 00:33:37,039
not

00:33:34,799 --> 00:33:38,640
quite forever but if you have if you

00:33:37,039 --> 00:33:39,760
need more than a thousand instances

00:33:38,640 --> 00:33:41,600
handling 80

00:33:39,760 --> 00:33:43,679
concurrent users each then you've got

00:33:41,600 --> 00:33:44,720
bigger problems it scales to zero as i

00:33:43,679 --> 00:33:45,919
mentioned before i think that's really

00:33:44,720 --> 00:33:48,480
important and

00:33:45,919 --> 00:33:49,600
it's the future that's a bit glib but i

00:33:48,480 --> 00:33:53,120
do think this model

00:33:49,600 --> 00:33:55,440
is is in is the way that uh

00:33:53,120 --> 00:33:56,640
that app hosting is gonna go on the

00:33:55,440 --> 00:33:57,279
other hand you have to deal with cold

00:33:56,640 --> 00:33:59,039
starts

00:33:57,279 --> 00:34:00,480
it's still complicated so i showed you

00:33:59,039 --> 00:34:01,840
the easy parts but once you want once

00:34:00,480 --> 00:34:02,960
you get into connecting databases and

00:34:01,840 --> 00:34:03,919
persistent storage

00:34:02,960 --> 00:34:05,200
there's some more complicated

00:34:03,919 --> 00:34:06,399
instructions which i've linked to at the

00:34:05,200 --> 00:34:08,560
bottom of my notes

00:34:06,399 --> 00:34:10,320
and finally databases are not serverless

00:34:08,560 --> 00:34:11,919
so you

00:34:10,320 --> 00:34:14,079
there are some sort of serverless

00:34:11,919 --> 00:34:17,520
database products an aurora

00:34:14,079 --> 00:34:19,040
on aws serverless is one but it's

00:34:17,520 --> 00:34:20,560
it's not i think it's just really hard

00:34:19,040 --> 00:34:21,839
for a relation database to be available

00:34:20,560 --> 00:34:24,560
as a service model so

00:34:21,839 --> 00:34:24,879
it's um it's it's currently still feels

00:34:24,560 --> 00:34:26,639
like

00:34:24,879 --> 00:34:28,560
a bit hybrid but i do think that this is

00:34:26,639 --> 00:34:31,119
the way that increasing the apps will be

00:34:28,560 --> 00:34:32,240
posted okay if you need to deploy it

00:34:31,119 --> 00:34:34,240
quickly as possible

00:34:32,240 --> 00:34:35,839
then i think docu is a good approach if

00:34:34,240 --> 00:34:37,359
your site is mainly about information

00:34:35,839 --> 00:34:38,320
then static site generation gives you

00:34:37,359 --> 00:34:41,359
that speed

00:34:38,320 --> 00:34:42,480
and robustness and it's super cheap if

00:34:41,359 --> 00:34:44,720
you have to scale

00:34:42,480 --> 00:34:45,839
then i think a cloud run type approach

00:34:44,720 --> 00:34:48,159
is the way to go

00:34:45,839 --> 00:34:48,879
that is it i am sorry for going on so

00:34:48,159 --> 00:34:51,679
long

00:34:48,879 --> 00:34:53,200
and i'm going to stop now but i'm really

00:34:51,679 --> 00:34:53,760
happy to answer questions either on

00:34:53,200 --> 00:34:57,359
slack

00:34:53,760 --> 00:35:03,839
or in the in the q a section afterwards

00:34:57,359 --> 00:35:03,839
thank you all very much

00:35:04,320 --> 00:35:10,000
uh recording is on

00:35:08,480 --> 00:35:12,160
uh hopefully some people are able to

00:35:10,000 --> 00:35:14,400
follow along a bit um did anyone

00:35:12,160 --> 00:35:16,400
did anyone try to uh to do the steps as

00:35:14,400 --> 00:35:19,599
i was talking

00:35:16,400 --> 00:35:20,400
i tried to but i got uh slightly

00:35:19,599 --> 00:35:23,359
stitched up by

00:35:20,400 --> 00:35:24,400
vault because there was a point where

00:35:23,359 --> 00:35:28,400
pip didn't work

00:35:24,400 --> 00:35:28,400
so that was when i died

00:35:28,800 --> 00:35:32,160
i just looked at the page as soon as you

00:35:30,720 --> 00:35:33,920
loaded it up and knew there wouldn't be

00:35:32,160 --> 00:35:34,560
enough time to follow along with having

00:35:33,920 --> 00:35:36,960
to

00:35:34,560 --> 00:35:38,880
register and get up these instances of

00:35:36,960 --> 00:35:41,920
the droplet type things that that looked

00:35:38,880 --> 00:35:41,920
like some heavy lifting

00:35:42,800 --> 00:35:45,920
yeah i think in retrospect it would have

00:35:44,079 --> 00:35:47,119
been good if i'd uh

00:35:45,920 --> 00:35:48,480
just have shared those instructions a

00:35:47,119 --> 00:35:49,200
bit more beforehand but anyway hopefully

00:35:48,480 --> 00:35:51,040
some people can

00:35:49,200 --> 00:35:53,920
can try afterwards and and ping me if

00:35:51,040 --> 00:35:55,680
they uh if it works or it doesn't work

00:35:53,920 --> 00:35:57,280
yeah it definitely will do when i when

00:35:55,680 --> 00:35:58,480
it's not it was just time pressure was

00:35:57,280 --> 00:35:59,839
it was a bit too much i thought it was

00:35:58,480 --> 00:36:00,560
better just to watch at that point

00:35:59,839 --> 00:36:03,280
rather than

00:36:00,560 --> 00:36:03,280
miss it also

00:36:05,280 --> 00:36:08,720
it's super exciting to try out and it's

00:36:07,359 --> 00:36:11,119
nice to see that

00:36:08,720 --> 00:36:12,800
the heart of the the google cloud run

00:36:11,119 --> 00:36:14,800
thing is pretty simple because every

00:36:12,800 --> 00:36:16,800
time i've looked at that documentation

00:36:14,800 --> 00:36:19,440
i just said this will be five hours work

00:36:16,800 --> 00:36:21,200
and i'm not ready for it

00:36:19,440 --> 00:36:22,800
yeah i think that's right and i think

00:36:21,200 --> 00:36:23,440
they're missing a trick there because

00:36:22,800 --> 00:36:25,359
actually

00:36:23,440 --> 00:36:26,880
the like you say the heart of it is is

00:36:25,359 --> 00:36:28,960
straightforward it's those two commands

00:36:26,880 --> 00:36:31,839
to build the image and then deploy it

00:36:28,960 --> 00:36:32,560
but um the all the stuff that's around

00:36:31,839 --> 00:36:34,000
it and

00:36:32,560 --> 00:36:36,160
actually someone's written some really

00:36:34,000 --> 00:36:38,160
detailed instructions on how to

00:36:36,160 --> 00:36:39,520
get wagtail working on google cloud but

00:36:38,160 --> 00:36:40,880
um the

00:36:39,520 --> 00:36:43,040
the bits around the edges are quite

00:36:40,880 --> 00:36:46,560
painful and i think they could

00:36:43,040 --> 00:36:48,400
they could if they kind of think hard

00:36:46,560 --> 00:36:50,560
about simplifying some of those steps

00:36:48,400 --> 00:36:55,839
um then i think this it becomes a very

00:36:50,560 --> 00:36:55,839
attractive model

00:37:04,720 --> 00:37:09,359
tom i have a question regarding the the

00:37:07,130 --> 00:37:12,079
[Music]

00:37:09,359 --> 00:37:12,640
scaling you know like at some point you

00:37:12,079 --> 00:37:14,720
said that

00:37:12,640 --> 00:37:15,760
like it can also go to zero turning the

00:37:14,720 --> 00:37:18,480
lights off

00:37:15,760 --> 00:37:20,640
and and how does that factor in with the

00:37:18,480 --> 00:37:22,640
cold start that you mentioned earlier

00:37:20,640 --> 00:37:24,560
like i was i'm like a bit confused with

00:37:22,640 --> 00:37:28,079
that so you don't want that right

00:37:24,560 --> 00:37:30,720
as a as a as a product developer

00:37:28,079 --> 00:37:33,040
you don't want your uh you don't want

00:37:30,720 --> 00:37:34,839
bad ux for instance your user experience

00:37:33,040 --> 00:37:37,839
so maybe you can say something about

00:37:34,839 --> 00:37:40,000
that

00:37:37,839 --> 00:37:41,760
you do you want both right you want it

00:37:40,000 --> 00:37:42,800
to scale to zero because um you don't

00:37:41,760 --> 00:37:44,560
want to be paying for it

00:37:42,800 --> 00:37:46,240
when no one's using it but when people

00:37:44,560 --> 00:37:48,000
start using it you want to uh you want

00:37:46,240 --> 00:37:49,359
it to come on quickly so

00:37:48,000 --> 00:37:51,280
people kind of try to work around this

00:37:49,359 --> 00:37:52,560
and one thing people do is they like uh

00:37:51,280 --> 00:37:54,640
they look at that traffic and then they

00:37:52,560 --> 00:37:56,560
might just kind of ping the service at

00:37:54,640 --> 00:37:58,560
busy times to make sure it comes up but

00:37:56,560 --> 00:37:59,760
i think i think that's

00:37:58,560 --> 00:38:02,480
i don't think that's the right approach

00:37:59,760 --> 00:38:04,079
i think that you need to

00:38:02,480 --> 00:38:06,000
hope that google and amazon and these

00:38:04,079 --> 00:38:07,359
other services are going to get better

00:38:06,000 --> 00:38:09,440
and better at doing cold starts

00:38:07,359 --> 00:38:10,560
and actually google's one is is pretty

00:38:09,440 --> 00:38:12,079
good

00:38:10,560 --> 00:38:13,839
and then you need to think about ways of

00:38:12,079 --> 00:38:17,359
optimizing your site to

00:38:13,839 --> 00:38:19,040
make it work well for cold starts and um

00:38:17,359 --> 00:38:20,480
uh i that definitely isn't the case from

00:38:19,040 --> 00:38:21,040
for that simple demo application which

00:38:20,480 --> 00:38:24,160
as i said

00:38:21,040 --> 00:38:25,520
runs manage.pi migrate you know this

00:38:24,160 --> 00:38:27,520
when a container starts which is crazy

00:38:25,520 --> 00:38:28,960
so you you you would you would do that

00:38:27,520 --> 00:38:30,720
as a standalone step

00:38:28,960 --> 00:38:32,000
and then reduce the startup time as much

00:38:30,720 --> 00:38:34,160
as possible and then you can get

00:38:32,000 --> 00:38:35,280
it down to it should be like less than a

00:38:34,160 --> 00:38:37,359
second for a cold start

00:38:35,280 --> 00:38:39,200
which is still you know you want you

00:38:37,359 --> 00:38:41,359
really want your

00:38:39,200 --> 00:38:43,119
your your general request to be under

00:38:41,359 --> 00:38:46,720
maybe like 250 million seconds

00:38:43,119 --> 00:38:49,040
but um i feel like that gap is closing

00:38:46,720 --> 00:38:49,040
thanks

00:38:50,960 --> 00:38:56,800
does docu um work as

00:38:54,000 --> 00:38:57,280
easily with compose files as it does

00:38:56,800 --> 00:39:00,880
with

00:38:57,280 --> 00:39:03,920
just draw docker files

00:39:00,880 --> 00:39:06,400
yeah i haven't uh uh

00:39:03,920 --> 00:39:06,960
i we've i've used mainly with docker

00:39:06,400 --> 00:39:08,960
files

00:39:06,960 --> 00:39:11,440
um so i'm not sure about compose files

00:39:08,960 --> 00:39:13,440
it also works well with just like plain

00:39:11,440 --> 00:39:14,560
python applications so it will detect if

00:39:13,440 --> 00:39:16,160
it's if there's no dockerfile it will

00:39:14,560 --> 00:39:16,960
detect if it's a python application or

00:39:16,160 --> 00:39:20,560
ruby or

00:39:16,960 --> 00:39:23,680
javascript um uh i don't know so much

00:39:20,560 --> 00:39:23,680
about dockercompose but

00:39:24,079 --> 00:39:27,119
that would be interesting to name

00:39:27,280 --> 00:39:29,839
thanks

00:39:37,599 --> 00:39:41,119
um any any performance issues was

00:39:40,079 --> 00:39:44,160
running dokku

00:39:41,119 --> 00:39:46,640
inside a very small vm

00:39:44,160 --> 00:39:47,200
um docker engine running because like

00:39:46,640 --> 00:39:50,320
there's

00:39:47,200 --> 00:39:50,320
1gb of memory

00:39:50,480 --> 00:39:57,119
it seems it seems that um on linux that

00:39:54,079 --> 00:39:58,560
there's very little overhead so um i

00:39:57,119 --> 00:40:01,359
haven't done any really

00:39:58,560 --> 00:40:02,240
careful benchmarking but um i've

00:40:01,359 --> 00:40:04,960
certainly

00:40:02,240 --> 00:40:07,200
you know run some some reasonable size

00:40:04,960 --> 00:40:08,079
sites on doku on a one or two gigabyte

00:40:07,200 --> 00:40:11,680
vm

00:40:08,079 --> 00:40:13,760
with uh you know with one or two v cpus

00:40:11,680 --> 00:40:16,000
and uh performance seems really good and

00:40:13,760 --> 00:40:18,880
i would say like

00:40:16,000 --> 00:40:21,200
on a par with like a or even maybe even

00:40:18,880 --> 00:40:25,520
slightly better than a 25

00:40:21,200 --> 00:40:27,760
heroku dino

00:40:25,520 --> 00:40:27,760
thanks

00:40:33,040 --> 00:40:40,560
is zapper uh not your cup of tea

00:40:36,960 --> 00:40:45,440
uh no i like i like zappa and um

00:40:40,560 --> 00:40:45,440
i uh i just um

00:40:45,839 --> 00:40:49,440
we've had a couple of projects where we

00:40:47,520 --> 00:40:51,839
we've used zappa for in production

00:40:49,440 --> 00:40:54,000
and um just as soon as you start getting

00:40:51,839 --> 00:40:55,040
into kind of setting up vpcs between

00:40:54,000 --> 00:40:57,680
zapper and the

00:40:55,040 --> 00:40:59,040
uh you know rds then it just starts

00:40:57,680 --> 00:41:00,720
feeling horribly complicated to me and

00:40:59,040 --> 00:41:02,720
that's that's the point of which

00:41:00,720 --> 00:41:04,160
you know and i'm not a professional

00:41:02,720 --> 00:41:06,720
devops person but that's the point of

00:41:04,160 --> 00:41:09,839
which i sort of uh

00:41:06,720 --> 00:41:11,359
glaze over but

00:41:09,839 --> 00:41:13,119
um oh yeah i really like zapf and

00:41:11,359 --> 00:41:15,280
there's some amazing like

00:41:13,119 --> 00:41:16,960
you know magic tricks in there and this

00:41:15,280 --> 00:41:18,560
is really this is cool project that this

00:41:16,960 --> 00:41:22,000
same guy did which is related to

00:41:18,560 --> 00:41:25,520
zappa where you can use sqlite database

00:41:22,000 --> 00:41:26,400
on an s3 instance and so you know as as

00:41:25,520 --> 00:41:27,920
your

00:41:26,400 --> 00:41:29,599
as your database backend which seems

00:41:27,920 --> 00:41:30,240
crazy so every time you make a do a

00:41:29,599 --> 00:41:32,240
query

00:41:30,240 --> 00:41:34,880
it will load up the sqlite instance from

00:41:32,240 --> 00:41:35,680
s3 and query and then save it back again

00:41:34,880 --> 00:41:37,119
which is obviously

00:41:35,680 --> 00:41:38,880
it's not going to work well for like

00:41:37,119 --> 00:41:40,160
really heavy multi-user stuff but does

00:41:38,880 --> 00:41:42,240
work surprisingly well

00:41:40,160 --> 00:41:44,240
for kind of mainly read-only data and

00:41:42,240 --> 00:41:46,319
that is like a server-less database

00:41:44,240 --> 00:41:48,079
um so there's a lot of amazing magic in

00:41:46,319 --> 00:41:50,079
zapper i think it doesn't

00:41:48,079 --> 00:41:52,240
i haven't looked recently but uh i got

00:41:50,079 --> 00:41:54,640
the impression that it wasn't being

00:41:52,240 --> 00:41:56,000
super well maintained or like really

00:41:54,640 --> 00:41:56,560
heavily maintained recently which is a

00:41:56,000 --> 00:41:58,960
shame

00:41:56,560 --> 00:42:01,599
i've had issues i've had issues with um

00:41:58,960 --> 00:42:02,319
upgrading python from 3.6 to v17 with

00:42:01,599 --> 00:42:06,160
zapper

00:42:02,319 --> 00:42:06,160
no right i probably shouldn't talk about

00:42:14,839 --> 00:42:20,560
that how did you get to

00:42:17,359 --> 00:42:21,839
do selecting a doco and that did the

00:42:20,560 --> 00:42:25,200
whole approach

00:42:21,839 --> 00:42:31,680
did it was uh was it like a part of the

00:42:25,200 --> 00:42:33,119
the most issue or something like that

00:42:31,680 --> 00:42:36,319
i'm sorry your audio broke up a little

00:42:33,119 --> 00:42:36,319
bit could you just say one more time

00:42:42,560 --> 00:42:46,640
did anybody else here and can can repeat

00:42:44,560 --> 00:42:46,640
it

00:42:54,240 --> 00:42:59,599
sorry i've just seen a couple questions

00:42:56,079 --> 00:43:01,520
in chat as well um

00:42:59,599 --> 00:43:02,800
general cost of google cloud run for a

00:43:01,520 --> 00:43:06,480
typical small site

00:43:02,800 --> 00:43:10,160
uh generally i can't remember what the

00:43:06,480 --> 00:43:11,760
uh you get a pretty high number of um

00:43:10,160 --> 00:43:14,720
free requests it might be a million or

00:43:11,760 --> 00:43:16,560
something i should check into that but

00:43:14,720 --> 00:43:19,760
for a typical small website you might

00:43:16,560 --> 00:43:22,720
find that google cloud one is free

00:43:19,760 --> 00:43:24,960
um and can you recommend to estimate

00:43:22,720 --> 00:43:28,319
actual cost it's pretty hard to estimate

00:43:24,960 --> 00:43:29,440
on google cloud run um and it depends a

00:43:28,319 --> 00:43:31,839
bit on your

00:43:29,440 --> 00:43:33,200
in your site but for the main the sites

00:43:31,839 --> 00:43:35,040
that we make which are mainly

00:43:33,200 --> 00:43:36,319
content manager sites like wagtail type

00:43:35,040 --> 00:43:38,480
sites we

00:43:36,319 --> 00:43:39,920
uh a lot of the load is generally

00:43:38,480 --> 00:43:41,520
handled by a cdn something like

00:43:39,920 --> 00:43:43,839
cloudflare or cloudfront

00:43:41,520 --> 00:43:46,000
which can mean that um that most of the

00:43:43,839 --> 00:43:48,240
activity to the back end is editorial

00:43:46,000 --> 00:43:50,079
uh which is often within the free limits

00:43:48,240 --> 00:43:52,640
anyway so you can um

00:43:50,079 --> 00:43:53,359
uh if you if you have a cdn to handle

00:43:52,640 --> 00:43:55,680
your

00:43:53,359 --> 00:44:09,760
front content then it can mean that it's

00:43:55,680 --> 00:44:12,400
extremely cheap or even free

00:44:09,760 --> 00:44:14,480
um it's up off topic a little bit but uh

00:44:12,400 --> 00:44:15,200
have you ever tried to create a vm out

00:44:14,480 --> 00:44:20,720
of a

00:44:15,200 --> 00:44:20,720
docker container in google cloud

00:44:21,200 --> 00:44:26,480
no i don't think i have have you i i i

00:44:24,560 --> 00:44:29,839
saw there's such a

00:44:26,480 --> 00:44:33,440
feature like uh they you can give a

00:44:29,839 --> 00:44:36,079
container from registry from vcr oh yeah

00:44:33,440 --> 00:44:37,040
but i couldn't manage to make it work i

00:44:36,079 --> 00:44:39,200
couldn't find any

00:44:37,040 --> 00:44:40,240
more documentation as well right yeah

00:44:39,200 --> 00:44:42,160
actually interesting i

00:44:40,240 --> 00:44:43,280
i came across that last night as well

00:44:42,160 --> 00:44:45,760
because i did think

00:44:43,280 --> 00:44:47,839
maybe better for people to create their

00:44:45,760 --> 00:44:49,520
their vms for docu on

00:44:47,839 --> 00:44:51,040
google cloud using the compute and then

00:44:49,520 --> 00:45:05,839
i noticed that feature but i haven't

00:44:51,040 --> 00:45:05,839
tried it

00:45:09,839 --> 00:45:13,680
um would you would you consider adding

00:45:12,160 --> 00:45:17,040
kubernetes

00:45:13,680 --> 00:45:20,720
as a fourth option we

00:45:17,040 --> 00:45:23,839
uh i think even i think if you um

00:45:20,720 --> 00:45:25,520
if you if your skills are developed

00:45:23,839 --> 00:45:27,520
enough to use kubernetes then you

00:45:25,520 --> 00:45:28,800
this this talk probably not relevant for

00:45:27,520 --> 00:45:32,319
you we

00:45:28,800 --> 00:45:35,440
at torchbox used we adopted kubernetes

00:45:32,319 --> 00:45:38,319
about three years ago and um

00:45:35,440 --> 00:45:39,520
uh it was a mistake for us and i feel

00:45:38,319 --> 00:45:41,440
like

00:45:39,520 --> 00:45:43,440
unless thing i mean maybe it's changed

00:45:41,440 --> 00:45:46,000
but um at the time it felt like it's

00:45:43,440 --> 00:45:47,359
it's obviously a tool that's great for

00:45:46,000 --> 00:45:49,440
google or any kind of

00:45:47,359 --> 00:45:50,720
big product that needs to be able to

00:45:49,440 --> 00:45:52,240
scale really quickly and have full

00:45:50,720 --> 00:45:53,920
control over that but for us

00:45:52,240 --> 00:45:55,440
it really was the wrong level of

00:45:53,920 --> 00:45:57,839
abstraction and

00:45:55,440 --> 00:45:59,440
uh we found that just you know the

00:45:57,839 --> 00:46:00,079
developer experience was was really

00:45:59,440 --> 00:46:03,359
tough

00:46:00,079 --> 00:46:04,480
so um we we kind of went full in for it

00:46:03,359 --> 00:46:06,480
and adopted it and then

00:46:04,480 --> 00:46:08,800
and then backed out about six months

00:46:06,480 --> 00:46:08,800
later

00:46:10,960 --> 00:46:14,640
i think you know behind the scenes then

00:46:12,560 --> 00:46:15,280
i'm sure a lot of these services are

00:46:14,640 --> 00:46:17,280
using

00:46:15,280 --> 00:46:18,880
kubernetes and uh and probably cloud run

00:46:17,280 --> 00:46:20,160
is is

00:46:18,880 --> 00:46:21,920
some kubernetes type thing in the

00:46:20,160 --> 00:46:25,040
background but i think it's uh

00:46:21,920 --> 00:46:26,960
for most people i think the

00:46:25,040 --> 00:46:29,839
i don't think it's the right level of

00:46:26,960 --> 00:46:29,839
detail

00:46:30,400 --> 00:46:34,480
yeah i'm i'm keen to see the next start

00:46:32,880 --> 00:46:36,240
the next talk so i'm going to

00:46:34,480 --> 00:46:38,160
join then but i'm really happy to answer

00:46:36,240 --> 00:46:41,680
questions on slack um

00:46:38,160 --> 00:46:43,040
or dm me thanks all for for watching and

00:46:41,680 --> 00:46:57,839
talking

00:46:43,040 --> 00:46:57,839
bye thank you thank you thank you

00:46:59,119 --> 00:47:01,200

YouTube URL: https://www.youtube.com/watch?v=S09KbOQZCt8


