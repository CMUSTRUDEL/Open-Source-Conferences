Title: DjangoCon 2020 | Creating a Spotify-like personal streaming service - Emma Delescolle
Publication date: 2020-09-30
Playlist: DjangoCon Europe 2020 (Virtual)
Description: 
	DjangoCon Europe 2020 (Virtual)
September 18, 2020 - 15h10 (GMT+1)

"Creating a spotify-like personal streaming service with Django and Vue: Lessons learned" by Emma Delescolle

In today's web, working with a frontend framework or library is becoming the norm. Vue is one of the most popular ones but how does it play with Django, what are the advantages and caveats? We'll use a practical example to explore some of those, ranging from getting the 2 frameworks to "just" work together to data exchange through a DRF API, authentication and websockets.
Captions: 
	00:00:06,640 --> 00:00:11,599
hello and welcome to this

00:00:08,960 --> 00:00:12,880
free movie talk for djangocon europe

00:00:11,599 --> 00:00:15,360
2020.

00:00:12,880 --> 00:00:16,960
um today we will be talking about my

00:00:15,360 --> 00:00:19,520
experience trying to

00:00:16,960 --> 00:00:20,800
create a spotify like a streaming

00:00:19,520 --> 00:00:24,720
service

00:00:20,800 --> 00:00:28,480
for personal use with django and vue

00:00:24,720 --> 00:00:31,679
so first of all who am i my name is emma

00:00:28,480 --> 00:00:34,239
i am the the co-founder of a small

00:00:31,679 --> 00:00:36,960
company in belgium called levitt

00:00:34,239 --> 00:00:37,760
and i'm the maintainer of the our schema

00:00:36,960 --> 00:00:40,800
adapter

00:00:37,760 --> 00:00:43,600
as well as embassy like qualities and

00:00:40,800 --> 00:00:46,559
other libraries

00:00:43,600 --> 00:00:47,920
so if you've known me and seen me at

00:00:46,559 --> 00:00:50,239
other conferences

00:00:47,920 --> 00:00:52,320
you might be wondering are you sure you

00:00:50,239 --> 00:00:53,600
want to talk about you you usually talk

00:00:52,320 --> 00:00:56,960
about amber

00:00:53,600 --> 00:01:00,480
but yeah i've been submitting talks

00:00:56,960 --> 00:01:03,039
about about amber for a few years now

00:01:00,480 --> 00:01:03,760
and uh they always get rejected so i

00:01:03,039 --> 00:01:05,600
thought hey

00:01:03,760 --> 00:01:07,200
let's try something else and let's drive

00:01:05,600 --> 00:01:10,400
you but

00:01:07,200 --> 00:01:14,320
all that said uh i will be at some

00:01:10,400 --> 00:01:14,320
time comparing view to amber

00:01:14,479 --> 00:01:19,520
so first i to get started and being a

00:01:17,600 --> 00:01:20,400
full stack developer i like to have my

00:01:19,520 --> 00:01:23,200
front end

00:01:20,400 --> 00:01:24,159
in the same repository as my back end so

00:01:23,200 --> 00:01:26,640
to do that i

00:01:24,159 --> 00:01:27,600
i wanted to have my front end at the

00:01:26,640 --> 00:01:29,439
same level as

00:01:27,600 --> 00:01:30,640
any django application that would be in

00:01:29,439 --> 00:01:32,479
my project

00:01:30,640 --> 00:01:34,720
and this is what we have on the screen

00:01:32,479 --> 00:01:37,200
here

00:01:34,720 --> 00:01:38,320
to get to that point all i had to do was

00:01:37,200 --> 00:01:42,159
to install

00:01:38,320 --> 00:01:42,560
a view cli which is the cli tool for

00:01:42,159 --> 00:01:46,159
view

00:01:42,560 --> 00:01:48,799
we'll talk more about it later and

00:01:46,159 --> 00:01:49,680
once that was done i just had to uh type

00:01:48,799 --> 00:01:52,320
view create

00:01:49,680 --> 00:01:54,720
front front being the the name of my

00:01:52,320 --> 00:01:57,200
front-end application

00:01:54,720 --> 00:01:58,640
and this is what i got so in the front

00:01:57,200 --> 00:02:00,479
you see there are three directories

00:01:58,640 --> 00:02:04,399
through source to stats

00:02:00,479 --> 00:02:07,200
and there is public public is for

00:02:04,399 --> 00:02:08,239
any resources like images and things

00:02:07,200 --> 00:02:11,599
like that

00:02:08,239 --> 00:02:14,160
um sort is where the main

00:02:11,599 --> 00:02:16,480
code will be and test of course is for

00:02:14,160 --> 00:02:16,480
tests

00:02:16,720 --> 00:02:22,879
so the first issue i encountered was to

00:02:20,720 --> 00:02:24,080
try to have the two servers to talk

00:02:22,879 --> 00:02:25,680
nicely together

00:02:24,080 --> 00:02:28,000
because django has its own development

00:02:25,680 --> 00:02:28,560
server but vue also has a development

00:02:28,000 --> 00:02:31,680
server

00:02:28,560 --> 00:02:32,800
with uh autry load and other nice

00:02:31,680 --> 00:02:36,400
features

00:02:32,800 --> 00:02:39,599
so to do that you can see that you have

00:02:36,400 --> 00:02:42,080
a config file for view in which you can

00:02:39,599 --> 00:02:43,519
specify some information that config

00:02:42,080 --> 00:02:46,879
file is used for view

00:02:43,519 --> 00:02:49,200
and it is later transformed to be used

00:02:46,879 --> 00:02:52,319
by webpack as well

00:02:49,200 --> 00:02:53,760
so the the server is actually not

00:02:52,319 --> 00:02:55,280
directly from view

00:02:53,760 --> 00:02:58,480
and you can see here that we are

00:02:55,280 --> 00:03:02,319
proxying every request

00:02:58,480 --> 00:03:04,720
to django every api request to django

00:03:02,319 --> 00:03:05,780
and also every web circuit request to

00:03:04,720 --> 00:03:07,680
tango as well

00:03:05,780 --> 00:03:10,959
[Music]

00:03:07,680 --> 00:03:14,000
so the other way around i'm used with

00:03:10,959 --> 00:03:15,519
amber and the amber development server

00:03:14,000 --> 00:03:17,040
whenever you make a modification it

00:03:15,519 --> 00:03:20,959
recompiles everything

00:03:17,040 --> 00:03:22,159
and writes files to disk so

00:03:20,959 --> 00:03:24,720
the only thing that you have to do on

00:03:22,159 --> 00:03:25,360
the django site is to create a template

00:03:24,720 --> 00:03:28,640
view

00:03:25,360 --> 00:03:30,640
that will just fetch the index.html that

00:03:28,640 --> 00:03:34,000
is created by amber

00:03:30,640 --> 00:03:36,400
this is not the case with view view

00:03:34,000 --> 00:03:38,159
um creates all the files all the

00:03:36,400 --> 00:03:40,400
temporary files in memory

00:03:38,159 --> 00:03:41,440
and serves those files directly from

00:03:40,400 --> 00:03:44,000
memory

00:03:41,440 --> 00:03:44,879
this means that there is no way from for

00:03:44,000 --> 00:03:47,760
django

00:03:44,879 --> 00:03:50,159
to go fetch the file and display this as

00:03:47,760 --> 00:03:54,000
a template view so an alternative

00:03:50,159 --> 00:03:57,040
uh to be at ease in development

00:03:54,000 --> 00:04:00,000
is to uh just redirect every

00:03:57,040 --> 00:04:00,560
avocado url in your django urls and

00:04:00,000 --> 00:04:03,599
redirect

00:04:00,560 --> 00:04:06,879
everything that is not known towards the

00:04:03,599 --> 00:04:06,879
view development server

00:04:08,640 --> 00:04:14,159
after that i wanted some tools to be

00:04:12,239 --> 00:04:17,440
able to to work with you

00:04:14,159 --> 00:04:20,720
and one of the major tools that i

00:04:17,440 --> 00:04:23,040
found was the browser extension

00:04:20,720 --> 00:04:24,320
which is available for firefox as well

00:04:23,040 --> 00:04:27,520
as chrome

00:04:24,320 --> 00:04:30,800
um there is a similar tool for

00:04:27,520 --> 00:04:32,000
tool for amber react angular so i knew

00:04:30,800 --> 00:04:35,680
something like that existed

00:04:32,000 --> 00:04:39,280
you can go and get it from the

00:04:35,680 --> 00:04:42,320
web store for chrome or for firefox

00:04:39,280 --> 00:04:45,440
and you can see here on the screen that

00:04:42,320 --> 00:04:48,160
it shows you every single component

00:04:45,440 --> 00:04:50,160
that is rendered in view if you focus on

00:04:48,160 --> 00:04:51,280
a component in particular you can have

00:04:50,160 --> 00:04:53,520
its properties

00:04:51,280 --> 00:04:54,560
its data everything like that there are

00:04:53,520 --> 00:04:57,600
several tabs

00:04:54,560 --> 00:04:59,080
to look at what happens in

00:04:57,600 --> 00:05:00,880
different parts of you

00:04:59,080 --> 00:05:02,639
[Music]

00:05:00,880 --> 00:05:04,720
the next thing that i found really

00:05:02,639 --> 00:05:08,720
really useful was the cheat sheet

00:05:04,720 --> 00:05:12,000
there is this pdf that's two pages long

00:05:08,720 --> 00:05:14,000
and that as all the life cycles of all

00:05:12,000 --> 00:05:16,320
the components how to

00:05:14,000 --> 00:05:17,919
pass properties all the syntax you have

00:05:16,320 --> 00:05:20,639
to use and all that

00:05:17,919 --> 00:05:22,320
and the cheat sheet is available at url

00:05:20,639 --> 00:05:24,880
that you see on your screen

00:05:22,320 --> 00:05:26,400
and it is honestly one of the most

00:05:24,880 --> 00:05:29,600
useful tool that you can

00:05:26,400 --> 00:05:31,759
have if you're either new to view

00:05:29,600 --> 00:05:33,680
or if you have not used you for a long

00:05:31,759 --> 00:05:36,000
time or even if you use

00:05:33,680 --> 00:05:36,800
view along other front-end frameworks

00:05:36,000 --> 00:05:39,440
because it's

00:05:36,800 --> 00:05:39,820
easy to get confused between one and the

00:05:39,440 --> 00:05:41,919
other

00:05:39,820 --> 00:05:43,520
[Music]

00:05:41,919 --> 00:05:45,840
and finally the next thing that is

00:05:43,520 --> 00:05:48,880
really useful is the cli tool

00:05:45,840 --> 00:05:50,479
so it's like managed by for django you

00:05:48,880 --> 00:05:53,280
can use it to

00:05:50,479 --> 00:05:54,080
create new project to build your project

00:05:53,280 --> 00:05:56,880
to

00:05:54,080 --> 00:05:58,319
launch a development server you can add

00:05:56,880 --> 00:06:02,160
new tasks

00:05:58,319 --> 00:06:05,280
you can also add some

00:06:02,160 --> 00:06:06,560
some blueprints to your project so for

00:06:05,280 --> 00:06:08,400
example if you

00:06:06,560 --> 00:06:10,080
didn't select this and you want to add

00:06:08,400 --> 00:06:11,840
tests you can add tests

00:06:10,080 --> 00:06:13,600
on the fly to the projects and things

00:06:11,840 --> 00:06:15,420
like that so

00:06:13,600 --> 00:06:17,520
once again very very useful

00:06:15,420 --> 00:06:20,560
[Music]

00:06:17,520 --> 00:06:21,919
so before we go any further let me give

00:06:20,560 --> 00:06:24,960
you a few basics

00:06:21,919 --> 00:06:26,479
of view for someone who is coming from

00:06:24,960 --> 00:06:29,680
the django world

00:06:26,479 --> 00:06:31,120
so um there are two ways to use view you

00:06:29,680 --> 00:06:33,759
can either

00:06:31,120 --> 00:06:34,800
include the javascript of you in any

00:06:33,759 --> 00:06:37,600
regular

00:06:34,800 --> 00:06:39,120
django server rendered view and it will

00:06:37,600 --> 00:06:42,560
load like any

00:06:39,120 --> 00:06:45,600
any other js like bootstrap for example

00:06:42,560 --> 00:06:48,400
but in this case i wanted a single page

00:06:45,600 --> 00:06:49,840
app so this means that my application my

00:06:48,400 --> 00:06:52,319
front-end application

00:06:49,840 --> 00:06:52,880
is going to have different routes and

00:06:52,319 --> 00:06:56,199
for that

00:06:52,880 --> 00:07:00,080
i do have a file that's called

00:06:56,199 --> 00:07:01,840
router.js or rotor index.js

00:07:00,080 --> 00:07:04,319
and this is basically the same as the

00:07:01,840 --> 00:07:07,520
urls.buy it's going to

00:07:04,319 --> 00:07:11,360
match the url and send it to the correct

00:07:07,520 --> 00:07:16,240
uh view component

00:07:11,360 --> 00:07:19,199
next we have app.view app.view is

00:07:16,240 --> 00:07:20,479
very similar to your template's base

00:07:19,199 --> 00:07:22,800
html

00:07:20,479 --> 00:07:24,240
this is the the shell of your

00:07:22,800 --> 00:07:25,759
application this is where you're going

00:07:24,240 --> 00:07:27,840
to put your menus

00:07:25,759 --> 00:07:30,080
your headers your footers everything

00:07:27,840 --> 00:07:32,319
that has to always be on the page

00:07:30,080 --> 00:07:34,319
this is where it's going to go and

00:07:32,319 --> 00:07:36,720
finally you have two components

00:07:34,319 --> 00:07:37,360
components if you want to compare to

00:07:36,720 --> 00:07:41,280
something

00:07:37,360 --> 00:07:43,840
in django are like super

00:07:41,280 --> 00:07:45,520
inclusion tags there are inclusion tags

00:07:43,840 --> 00:07:48,639
that are used everywhere

00:07:45,520 --> 00:07:52,000
every single page is usually a component

00:07:48,639 --> 00:07:55,280
so it's top level uh

00:07:52,000 --> 00:07:59,599
is going to be included

00:07:55,280 --> 00:08:01,599
inside your app.html

00:07:59,599 --> 00:08:02,639
so let's look a little bit deeper in

00:08:01,599 --> 00:08:05,759
those files

00:08:02,639 --> 00:08:08,960
so as i mentioned router.js or

00:08:05,759 --> 00:08:11,680
router index.js is the same thing

00:08:08,960 --> 00:08:12,639
as far as javascript is concerned it's a

00:08:11,680 --> 00:08:16,080
bit like

00:08:12,639 --> 00:08:19,039
if you have uh some module dot pi

00:08:16,080 --> 00:08:20,000
uh or if you have some model some module

00:08:19,039 --> 00:08:22,479
and inside

00:08:20,000 --> 00:08:23,120
the directory you have then there init

00:08:22,479 --> 00:08:26,639
under

00:08:23,120 --> 00:08:29,280
dot pi that's exactly the same technique

00:08:26,639 --> 00:08:30,400
um if you look at this file you can see

00:08:29,280 --> 00:08:33,120
that the urls

00:08:30,400 --> 00:08:33,839
are defined pretty similarly to django

00:08:33,120 --> 00:08:37,760
so there is

00:08:33,839 --> 00:08:40,399
a path this is uh to match the url

00:08:37,760 --> 00:08:41,120
there is a name which is optional and

00:08:40,399 --> 00:08:44,959
there is

00:08:41,120 --> 00:08:48,000
a component which in django would be

00:08:44,959 --> 00:08:50,000
associated to the view function that's

00:08:48,000 --> 00:08:52,839
going to be

00:08:50,000 --> 00:08:55,680
actually rendering the content of your

00:08:52,839 --> 00:08:58,959
page

00:08:55,680 --> 00:09:01,360
and then there is this app.view file so

00:08:58,959 --> 00:09:02,160
first of all what is a dot view file

00:09:01,360 --> 00:09:04,720
that's

00:09:02,160 --> 00:09:06,320
that's something we don't know it's a

00:09:04,720 --> 00:09:09,680
file extension that is

00:09:06,320 --> 00:09:12,880
specific to view and

00:09:09,680 --> 00:09:15,519
it's a bit messy in the way that it has

00:09:12,880 --> 00:09:17,120
html inside of a template tag it's got

00:09:15,519 --> 00:09:20,160
javascript inside of a

00:09:17,120 --> 00:09:21,519
script tag and it's got some css or a

00:09:20,160 --> 00:09:25,440
css inside

00:09:21,519 --> 00:09:28,720
of a style tag

00:09:25,440 --> 00:09:30,560
but we don't like that in in django

00:09:28,720 --> 00:09:32,399
in the django world we like to have

00:09:30,560 --> 00:09:34,640
things clean in different files

00:09:32,399 --> 00:09:36,320
so one way to fix that is to keep using

00:09:34,640 --> 00:09:38,959
the dodge view application

00:09:36,320 --> 00:09:40,000
and have really really simple dot view

00:09:38,959 --> 00:09:42,959
files

00:09:40,000 --> 00:09:43,440
that have three tags one template that

00:09:42,959 --> 00:09:46,480
loads

00:09:43,440 --> 00:09:47,760
an html file one script tag that loads a

00:09:46,480 --> 00:09:51,600
javascript file

00:09:47,760 --> 00:09:53,230
and one style tag that loads either css

00:09:51,600 --> 00:09:55,120
or an scss file

00:09:53,230 --> 00:09:57,760
[Music]

00:09:55,120 --> 00:09:58,800
here on the screen you can also see on

00:09:57,760 --> 00:10:02,839
the bottom left

00:09:58,800 --> 00:10:06,240
the html for this

00:10:02,839 --> 00:10:08,399
app.view and uh inside it's

00:10:06,240 --> 00:10:09,600
html there are two important things

00:10:08,399 --> 00:10:12,720
there is the first

00:10:09,600 --> 00:10:15,680
uh div that's the id app

00:10:12,720 --> 00:10:17,920
this is where view will know it has to

00:10:15,680 --> 00:10:18,800
render it will replace the diff with the

00:10:17,920 --> 00:10:22,399
id

00:10:18,800 --> 00:10:25,279
on the ide app and inside of that you

00:10:22,399 --> 00:10:29,680
can see that you have

00:10:25,279 --> 00:10:32,000
a router view the router view is where

00:10:29,680 --> 00:10:33,920
the rest of your page that corresponds

00:10:32,000 --> 00:10:35,680
to the url that you have been loading

00:10:33,920 --> 00:10:37,120
the rest of your approach is going to be

00:10:35,680 --> 00:10:39,200
rendered inside

00:10:37,120 --> 00:10:40,399
that deck so those are the two most

00:10:39,200 --> 00:10:43,600
important tags

00:10:40,399 --> 00:10:43,600
in the view application

00:10:45,519 --> 00:10:52,240
now there's a component.js um

00:10:49,040 --> 00:10:54,320
it comes with uh some some information

00:10:52,240 --> 00:10:55,600
so you have properties properties of

00:10:54,320 --> 00:10:59,120
things that are passed

00:10:55,600 --> 00:11:01,360
to the component um usually from

00:10:59,120 --> 00:11:02,640
another component that a parent

00:11:01,360 --> 00:11:05,440
component that calls

00:11:02,640 --> 00:11:06,560
a child component and passes some

00:11:05,440 --> 00:11:09,680
variables

00:11:06,560 --> 00:11:14,480
uh once again same principle as a

00:11:09,680 --> 00:11:17,920
template an inclusion template type

00:11:14,480 --> 00:11:19,680
you have some data the data is local to

00:11:17,920 --> 00:11:23,040
the component

00:11:19,680 --> 00:11:26,000
and you have some actions

00:11:23,040 --> 00:11:27,279
actions you have some methods methods

00:11:26,000 --> 00:11:29,279
are being called from inside the

00:11:27,279 --> 00:11:31,920
component they can modify

00:11:29,279 --> 00:11:33,680
the data of the component itself and

00:11:31,920 --> 00:11:36,079
finally you have computed properties

00:11:33,680 --> 00:11:38,640
computed properties are used

00:11:36,079 --> 00:11:39,120
so that you don't have to do complex

00:11:38,640 --> 00:11:41,760
logic

00:11:39,120 --> 00:11:44,320
in code so for example here we have two

00:11:41,760 --> 00:11:45,040
computed properties that are going to be

00:11:44,320 --> 00:11:48,160
dependent

00:11:45,040 --> 00:11:51,200
on the uh sbz

00:11:48,160 --> 00:11:53,519
data and when the spc data

00:11:51,200 --> 00:11:56,560
changes those two computed properties

00:11:53,519 --> 00:11:59,200
will also change

00:11:56,560 --> 00:12:00,240
and so if we look at the html for the

00:11:59,200 --> 00:12:03,440
template for that

00:12:00,240 --> 00:12:06,880
uh for that component

00:12:03,440 --> 00:12:10,959
uh you can see that we do use the data

00:12:06,880 --> 00:12:14,000
is busy and we also use um

00:12:10,959 --> 00:12:17,839
some of the computative properties so

00:12:14,000 --> 00:12:20,959
you can see here we are using columns uh

00:12:17,839 --> 00:12:24,320
column um disabled so this

00:12:20,959 --> 00:12:27,920
is an assignment to an html property

00:12:24,320 --> 00:12:29,360
and so this means that the disabled

00:12:27,920 --> 00:12:33,040
property is going to come

00:12:29,360 --> 00:12:36,639
from a javascript we have an add

00:12:33,040 --> 00:12:38,800
click at is4 events so when

00:12:36,639 --> 00:12:40,320
the button is clicked it's going to be

00:12:38,800 --> 00:12:43,440
calling uh

00:12:40,320 --> 00:12:47,279
the method that is uh

00:12:43,440 --> 00:12:49,440
listed here which is download and then

00:12:47,279 --> 00:12:50,399
underneath we have some other

00:12:49,440 --> 00:12:54,480
assignments

00:12:50,399 --> 00:12:54,480
with the computed properties

00:12:55,279 --> 00:12:58,320
so now that we've gone through the

00:12:56,720 --> 00:13:01,200
basics of you

00:12:58,320 --> 00:13:02,560
we can look at something more

00:13:01,200 --> 00:13:06,240
interesting like

00:13:02,560 --> 00:13:09,440
how can we get data from django to hue

00:13:06,240 --> 00:13:11,680
so in this case in a

00:13:09,440 --> 00:13:14,079
single page application there is no way

00:13:11,680 --> 00:13:16,000
to have django pre-render the data

00:13:14,079 --> 00:13:16,880
somewhere in a javascript variable or

00:13:16,000 --> 00:13:20,160
something

00:13:16,880 --> 00:13:22,959
so you have to call an api and so

00:13:20,160 --> 00:13:24,000
as most django projects when you want to

00:13:22,959 --> 00:13:26,160
have an api

00:13:24,000 --> 00:13:27,120
you are going to want to use django rest

00:13:26,160 --> 00:13:29,920
framework

00:13:27,120 --> 00:13:32,480
so these are examples for serializer and

00:13:29,920 --> 00:13:34,399
a few set for django best framework

00:13:32,480 --> 00:13:37,360
but since i mentioned i was the

00:13:34,399 --> 00:13:40,399
maintainer of the era schema adapter

00:13:37,360 --> 00:13:40,959
i'm going to use a diary schema adapter

00:13:40,399 --> 00:13:43,680
and so

00:13:40,959 --> 00:13:46,000
here is an endpoint that does exactly

00:13:43,680 --> 00:13:49,519
the same as the two previous

00:13:46,000 --> 00:13:50,320
view set and serializer plus a few extra

00:13:49,519 --> 00:13:54,399
features

00:13:50,320 --> 00:13:54,399
like searching and filtering

00:13:55,920 --> 00:13:59,199
now on the view side

00:13:59,680 --> 00:14:03,680
there are different ways to do things

00:14:01,920 --> 00:14:06,720
the way i found was

00:14:03,680 --> 00:14:09,519
the most familiar to me

00:14:06,720 --> 00:14:11,440
as a django developer or an amber

00:14:09,519 --> 00:14:15,360
developer was to use

00:14:11,440 --> 00:14:18,720
a series of things first of all axios

00:14:15,360 --> 00:14:21,440
axios is a library that does http

00:14:18,720 --> 00:14:23,120
requests it can be used with view it can

00:14:21,440 --> 00:14:25,770
also be used with react

00:14:23,120 --> 00:14:27,199
or it can even be used standalone

00:14:25,770 --> 00:14:30,560
[Music]

00:14:27,199 --> 00:14:31,600
axis just needs to be initialized uh it

00:14:30,560 --> 00:14:35,199
takes a url

00:14:31,600 --> 00:14:38,000
to uh start with and here you can see

00:14:35,199 --> 00:14:39,839
also the two last lines that are the

00:14:38,000 --> 00:14:42,880
configuration for the x

00:14:39,839 --> 00:14:45,839
uh srf uh token and

00:14:42,880 --> 00:14:47,519
header this is really useful if you're

00:14:45,839 --> 00:14:50,720
serving your front end

00:14:47,519 --> 00:14:52,880
from the same server as your back end

00:14:50,720 --> 00:14:54,480
and from the same domain this means that

00:14:52,880 --> 00:14:57,600
you're going to be using

00:14:54,480 --> 00:14:58,800
uh django's all of django's security

00:14:57,600 --> 00:15:01,440
features

00:14:58,800 --> 00:15:02,639
including but not limited to c serve

00:15:01,440 --> 00:15:06,560
tokens

00:15:02,639 --> 00:15:09,199
um so you have to specify those

00:15:06,560 --> 00:15:10,720
information in the connection and axios

00:15:09,199 --> 00:15:14,000
is going to handle that

00:15:10,720 --> 00:15:14,000
completely transparently

00:15:14,240 --> 00:15:18,320
next to axios who are going to be uh

00:15:16,720 --> 00:15:22,639
using vue xor m

00:15:18,320 --> 00:15:25,040
few xor m is an rm like tango's arm

00:15:22,639 --> 00:15:26,320
the difference is that it's going to be

00:15:25,040 --> 00:15:30,079
storing some data

00:15:26,320 --> 00:15:32,800
inside your browser's database

00:15:30,079 --> 00:15:33,279
and it's every time you add some data

00:15:32,800 --> 00:15:35,600
from

00:15:33,279 --> 00:15:38,079
the api or from somewhere else it's

00:15:35,600 --> 00:15:39,199
going to to create basically a sql

00:15:38,079 --> 00:15:42,320
database

00:15:39,199 --> 00:15:44,240
just in memory in your browser um

00:15:42,320 --> 00:15:45,360
which is really useful for example if

00:15:44,240 --> 00:15:48,720
you already have

00:15:45,360 --> 00:15:51,440
loaded a bunch of artists and you need

00:15:48,720 --> 00:15:52,880
uh to look up an artist in particular

00:15:51,440 --> 00:15:54,880
you can just

00:15:52,880 --> 00:15:56,240
first checking memory if you have that

00:15:54,880 --> 00:15:59,199
artist before doing

00:15:56,240 --> 00:15:59,680
an api call to the back end uh you can

00:15:59,199 --> 00:16:02,560
do

00:15:59,680 --> 00:16:05,120
um requests like you would do in sql

00:16:02,560 --> 00:16:05,440
with words statements and things like

00:16:05,120 --> 00:16:06,839
that

00:16:05,440 --> 00:16:09,680
[Music]

00:16:06,839 --> 00:16:13,519
um and uh

00:16:09,680 --> 00:16:17,120
here you can see how you um

00:16:13,519 --> 00:16:18,240
you register a view xrm what you need to

00:16:17,120 --> 00:16:20,560
do is you need to have

00:16:18,240 --> 00:16:22,000
a model definition for all your models

00:16:20,560 --> 00:16:25,040
and then you simply register

00:16:22,000 --> 00:16:25,040
them to the database

00:16:25,279 --> 00:16:28,560
the last thing we are going to be

00:16:26,480 --> 00:16:33,040
looking at is ux

00:16:28,560 --> 00:16:36,160
ux is a state management

00:16:33,040 --> 00:16:39,519
storage for a view it is

00:16:36,160 --> 00:16:42,959
used by ux forum since it's in the name

00:16:39,519 --> 00:16:46,040
it's also the standards used with view

00:16:42,959 --> 00:16:47,600
um and here is the

00:16:46,040 --> 00:16:50,160
[Music]

00:16:47,600 --> 00:16:51,120
the configuration to to have it

00:16:50,160 --> 00:16:54,000
installed

00:16:51,120 --> 00:16:55,680
and as you see you can register plugins

00:16:54,000 --> 00:16:59,279
and in this case the plugin that we want

00:16:55,680 --> 00:16:59,279
to register is the rm

00:17:00,959 --> 00:17:05,760
and finally as far as the data exchange

00:17:04,520 --> 00:17:08,959
is

00:17:05,760 --> 00:17:11,039
concerned we have the models

00:17:08,959 --> 00:17:13,280
uh this is the artist model and as you

00:17:11,039 --> 00:17:15,199
can see it is very similar to a django

00:17:13,280 --> 00:17:16,799
model so you what you do is that you

00:17:15,199 --> 00:17:19,600
list the properties

00:17:16,799 --> 00:17:21,360
uh the fields of that model of course

00:17:19,600 --> 00:17:23,919
you don't have as many choices

00:17:21,360 --> 00:17:24,959
as you have in django you basically have

00:17:23,919 --> 00:17:28,480
a string

00:17:24,959 --> 00:17:32,320
number date boolean uh

00:17:28,480 --> 00:17:35,600
and undesigned which is the dot adder

00:17:32,320 --> 00:17:38,880
but you do have interesting things like

00:17:35,600 --> 00:17:40,640
uh one too many relationships so for

00:17:38,880 --> 00:17:44,640
example if you look here you see that

00:17:40,640 --> 00:17:47,919
the artist has many songs um

00:17:44,640 --> 00:17:50,799
and this is a relationship uh works the

00:17:47,919 --> 00:17:54,400
same way as a django relationship

00:17:50,799 --> 00:17:57,200
um or anything else you can just

00:17:54,400 --> 00:17:58,640
access it with the dot notation you can

00:17:57,200 --> 00:17:58,960
see at the beginning of the file that

00:17:58,640 --> 00:18:02,080
i'm

00:17:58,960 --> 00:18:05,120
imitating from a base.js file

00:18:02,080 --> 00:18:06,240
so this is a snippet from the base.js

00:18:05,120 --> 00:18:09,039
file

00:18:06,240 --> 00:18:10,320
it's uh it's got some methods uh that

00:18:09,039 --> 00:18:13,679
are used everywhere

00:18:10,320 --> 00:18:14,880
like factual fetch by the filter things

00:18:13,679 --> 00:18:18,240
like that

00:18:14,880 --> 00:18:19,679
um since this is

00:18:18,240 --> 00:18:21,360
something that you're going to be using

00:18:19,679 --> 00:18:24,160
with all your models

00:18:21,360 --> 00:18:24,640
i like to have it in the base.js but if

00:18:24,160 --> 00:18:28,160
you're

00:18:24,640 --> 00:18:31,200
using the arrow schema adapter you can

00:18:28,160 --> 00:18:33,280
export all your endpoints

00:18:31,200 --> 00:18:35,120
your backend endpoints directly to

00:18:33,280 --> 00:18:36,799
front-end models and it will write the

00:18:35,120 --> 00:18:39,360
best.js for you

00:18:36,799 --> 00:18:43,840
and it will write your models also with

00:18:39,360 --> 00:18:43,840
every property and so on

00:18:49,440 --> 00:18:56,960
so accessing the data in the front end

00:18:53,760 --> 00:18:59,919
in the template as i mentioned

00:18:56,960 --> 00:19:01,360
uh you can it works exactly like like

00:18:59,919 --> 00:19:03,600
django you can

00:19:01,360 --> 00:19:04,799
use the dot notation so for example if

00:19:03,600 --> 00:19:08,080
you look into

00:19:04,799 --> 00:19:08,960
this one we have a list and it's gonna

00:19:08,080 --> 00:19:12,240
loop over

00:19:08,960 --> 00:19:14,080
the artist dot songs so all the songs of

00:19:12,240 --> 00:19:17,120
the artist

00:19:14,080 --> 00:19:18,730
and once we have the song we can use

00:19:17,120 --> 00:19:21,120
the song dot

00:19:18,730 --> 00:19:23,760
[Music]

00:19:21,120 --> 00:19:25,360
song dot file to get the file for

00:19:23,760 --> 00:19:28,640
example

00:19:25,360 --> 00:19:30,160
and but you have to be careful

00:19:28,640 --> 00:19:32,559
in order to be able to use the dot

00:19:30,160 --> 00:19:35,039
notation you have to

00:19:32,559 --> 00:19:35,760
warn the orm that you want to load the

00:19:35,039 --> 00:19:38,960
artist

00:19:35,760 --> 00:19:39,600
with the song so if you look at the js

00:19:38,960 --> 00:19:41,919
codes

00:19:39,600 --> 00:19:42,640
uh at the bottom of the screen you will

00:19:41,919 --> 00:19:45,919
see that

00:19:42,640 --> 00:19:50,400
it is specifying that it loads with

00:19:45,919 --> 00:19:52,960
song it also has a work statement to um

00:19:50,400 --> 00:19:53,840
to filter the results and if you don't

00:19:52,960 --> 00:19:56,720
use that

00:19:53,840 --> 00:19:57,520
with uh it will not have access to the

00:19:56,720 --> 00:20:00,720
songs

00:19:57,520 --> 00:20:04,000
and you will run into trouble um

00:20:00,720 --> 00:20:07,039
this is a nice way to um avoid

00:20:04,000 --> 00:20:10,240
things like n plus one requests

00:20:07,039 --> 00:20:13,520
this is uh this can be

00:20:10,240 --> 00:20:16,559
seen either as a blessing or a curse but

00:20:13,520 --> 00:20:16,559
it's how it works

00:20:18,000 --> 00:20:22,799
next uh if you want to write a single

00:20:20,799 --> 00:20:24,559
page application nowadays

00:20:22,799 --> 00:20:26,640
uh most likely you are going to be

00:20:24,559 --> 00:20:28,799
having some live data

00:20:26,640 --> 00:20:29,760
so for example uh in this application

00:20:28,799 --> 00:20:31,919
which is

00:20:29,760 --> 00:20:33,520
a streaming service you want to update

00:20:31,919 --> 00:20:36,000
the currently playing song

00:20:33,520 --> 00:20:36,640
you want to update the list of coming up

00:20:36,000 --> 00:20:39,440
next

00:20:36,640 --> 00:20:41,039
songs and all that so for that you need

00:20:39,440 --> 00:20:44,240
a websocket

00:20:41,039 --> 00:20:47,280
for django on the django site i picked

00:20:44,240 --> 00:20:48,000
django channels and here's the the

00:20:47,280 --> 00:20:51,360
configuration

00:20:48,000 --> 00:20:54,240
for django channels it's a very standard

00:20:51,360 --> 00:20:55,039
django channels configuration uh note

00:20:54,240 --> 00:20:57,600
that

00:20:55,039 --> 00:20:59,440
we are using the authentication stack in

00:20:57,600 --> 00:21:03,679
here which

00:20:59,440 --> 00:21:07,120
is always a nice thing

00:21:03,679 --> 00:21:09,280
and on the view side uh there is a

00:21:07,120 --> 00:21:10,480
there is a package that's called view

00:21:09,280 --> 00:21:12,790
native sockets

00:21:10,480 --> 00:21:14,320
which is really handy

00:21:12,790 --> 00:21:16,080
[Music]

00:21:14,320 --> 00:21:17,760
what you have to do is to declare the

00:21:16,080 --> 00:21:20,559
circuit with um

00:21:17,760 --> 00:21:21,600
the url is going to connect to uh some

00:21:20,559 --> 00:21:25,760
properties

00:21:21,600 --> 00:21:29,120
and then the socket is going to

00:21:25,760 --> 00:21:32,640
be emitting some events and

00:21:29,120 --> 00:21:36,170
once an event is emitted it's going to

00:21:32,640 --> 00:21:37,280
uh call a transform

00:21:36,170 --> 00:21:40,960
[Music]

00:21:37,280 --> 00:21:41,760
or a mutation so uh here for example

00:21:40,960 --> 00:21:45,760
when

00:21:41,760 --> 00:21:49,200
the connection is open the mutation

00:21:45,760 --> 00:21:51,039
socket on open is called and it's going

00:21:49,200 --> 00:21:54,640
and you can perform things

00:21:51,039 --> 00:21:57,360
on open on message on things like that

00:21:54,640 --> 00:21:58,000
mutations is a concept which is really

00:21:57,360 --> 00:22:00,480
important

00:21:58,000 --> 00:22:01,840
in view it's about the same concept it

00:22:00,480 --> 00:22:03,840
is in react

00:22:01,840 --> 00:22:06,400
this is how you change data you cannot

00:22:03,840 --> 00:22:08,960
just simply take some data and change it

00:22:06,400 --> 00:22:10,559
in like in django you have to go through

00:22:08,960 --> 00:22:13,120
mutation which is

00:22:10,559 --> 00:22:14,880
a concept that i'm not going to explain

00:22:13,120 --> 00:22:18,080
today because i don't have the time

00:22:14,880 --> 00:22:21,200
but if you're going to be using react or

00:22:18,080 --> 00:22:24,400
view you really need to go in there and

00:22:21,200 --> 00:22:24,400
understand mutations

00:22:25,039 --> 00:22:28,720
next step is authentication and it is

00:22:28,080 --> 00:22:32,159
useful

00:22:28,720 --> 00:22:34,080
since um i want to be able to create my

00:22:32,159 --> 00:22:36,640
playlist i don't want to

00:22:34,080 --> 00:22:37,520
see my partner's playlist and things

00:22:36,640 --> 00:22:39,760
like that so it's

00:22:37,520 --> 00:22:41,039
important that my application has some

00:22:39,760 --> 00:22:43,200
authentication

00:22:41,039 --> 00:22:45,280
so authentication there are basically

00:22:43,200 --> 00:22:48,400
two ways to do that for a front-end

00:22:45,280 --> 00:22:50,720
uh a single page application either you

00:22:48,400 --> 00:22:51,360
can go with token which is the preferred

00:22:50,720 --> 00:22:53,039
way

00:22:51,360 --> 00:22:54,400
to do things if your front-end

00:22:53,039 --> 00:22:57,360
application is served

00:22:54,400 --> 00:22:58,159
from another sub-domain then your main

00:22:57,360 --> 00:23:00,880
application

00:22:58,159 --> 00:23:02,960
uh if you are using a cdn or something

00:23:00,880 --> 00:23:06,400
like that to serve your front-end

00:23:02,960 --> 00:23:09,600
you will want to use tokens but since

00:23:06,400 --> 00:23:11,520
i this is a personal project and since

00:23:09,600 --> 00:23:14,400
i'm a full stack developer

00:23:11,520 --> 00:23:15,520
i want i like to use the session

00:23:14,400 --> 00:23:17,600
authentication

00:23:15,520 --> 00:23:20,559
because that way i can once again

00:23:17,600 --> 00:23:22,720
leverage all the security

00:23:20,559 --> 00:23:24,799
tools that django provides out of the

00:23:22,720 --> 00:23:26,880
box

00:23:24,799 --> 00:23:28,159
so to have a section authentication

00:23:26,880 --> 00:23:30,080
working

00:23:28,159 --> 00:23:31,679
on the django site you don't need much

00:23:30,080 --> 00:23:34,880
you just need a login

00:23:31,679 --> 00:23:36,159
and a logout view that are going to be

00:23:34,880 --> 00:23:38,320
logging for you is going to take a

00:23:36,159 --> 00:23:42,039
username a password it's going to

00:23:38,320 --> 00:23:45,120
check it using the regular

00:23:42,039 --> 00:23:46,980
djangocontrib.org tool and

00:23:45,120 --> 00:23:49,440
it's going to return a user

00:23:46,980 --> 00:23:52,720
[Music]

00:23:49,440 --> 00:23:54,159
uh on the view side a little bit more

00:23:52,720 --> 00:23:57,600
code is needed

00:23:54,159 --> 00:24:00,400
but uh not that much uh you

00:23:57,600 --> 00:24:02,080
have we have here some actions that are

00:24:00,400 --> 00:24:03,840
designed in the store

00:24:02,080 --> 00:24:06,240
so we have been seeing a lot of code

00:24:03,840 --> 00:24:09,919
that is in the store so the store

00:24:06,240 --> 00:24:13,120
is what has to do with all the data

00:24:09,919 --> 00:24:16,240
that fish that view receives or view

00:24:13,120 --> 00:24:17,200
handles in one way or another so here in

00:24:16,240 --> 00:24:20,400
the store we

00:24:17,200 --> 00:24:21,279
have two actions which are login and log

00:24:20,400 --> 00:24:23,279
out

00:24:21,279 --> 00:24:25,039
and upon a successful login we are

00:24:23,279 --> 00:24:28,799
calling a mutation

00:24:25,039 --> 00:24:30,960
which is old success and that whole

00:24:28,799 --> 00:24:34,320
success is going to

00:24:30,960 --> 00:24:34,640
update the user that is starting memory

00:24:34,320 --> 00:24:37,919
in

00:24:34,640 --> 00:24:39,600
um in view so one once again

00:24:37,919 --> 00:24:42,240
this is a mutation this is really

00:24:39,600 --> 00:24:45,440
important to use mutations

00:24:42,240 --> 00:24:46,720
um but that's that's the the gist of it

00:24:45,440 --> 00:24:49,440
so

00:24:46,720 --> 00:24:51,520
login function logout function and then

00:24:49,440 --> 00:24:54,880
in mutation to be able to update your

00:24:51,520 --> 00:24:54,880
user on the front end

00:24:55,760 --> 00:24:59,039
and once your user is updated in the

00:24:57,760 --> 00:25:02,320
front end you can

00:24:59,039 --> 00:25:03,120
use it in a lot of locations one of the

00:25:02,320 --> 00:25:05,360
most

00:25:03,120 --> 00:25:06,320
useful location is in the router for

00:25:05,360 --> 00:25:08,960
example

00:25:06,320 --> 00:25:10,080
so here you can see a route like the

00:25:08,960 --> 00:25:13,120
ones that we saw

00:25:10,080 --> 00:25:16,720
in the beginning but this one has a

00:25:13,120 --> 00:25:18,320
meta information this is

00:25:16,720 --> 00:25:19,840
which means require login

00:25:18,320 --> 00:25:22,960
[Music]

00:25:19,840 --> 00:25:24,400
which is called recovery login and so uh

00:25:22,960 --> 00:25:26,400
you can see at the bottom of the screen

00:25:24,400 --> 00:25:30,159
there is this code that is from before

00:25:26,400 --> 00:25:32,960
each transition from one uh route

00:25:30,159 --> 00:25:34,720
to to another route and it will check if

00:25:32,960 --> 00:25:36,640
that route needs authentication

00:25:34,720 --> 00:25:39,360
and if the verb needs authentication

00:25:36,640 --> 00:25:41,760
will check if the user is authenticated

00:25:39,360 --> 00:25:42,960
and if the user is not authenticated it

00:25:41,760 --> 00:25:45,360
will redirect

00:25:42,960 --> 00:25:46,880
the user to the login page instead of

00:25:45,360 --> 00:25:49,120
showing them the page

00:25:46,880 --> 00:25:51,919
that they were s that were they were

00:25:49,120 --> 00:25:51,919
asking to see

00:25:52,799 --> 00:25:59,369
so now we are going to be doing a demo

00:25:56,070 --> 00:25:59,369
[Music]

00:26:01,520 --> 00:26:03,760
and

00:26:05,039 --> 00:26:11,279
here we have our application it's got

00:26:08,840 --> 00:26:14,720
a queue of

00:26:11,279 --> 00:26:18,960
things that are playing uh and this cue

00:26:14,720 --> 00:26:22,559
is uh always uh set to a stream

00:26:18,960 --> 00:26:26,320
so if i click play right now

00:26:22,559 --> 00:26:26,320
i will be connecting to the stream

00:26:32,559 --> 00:26:36,960
which is if if you recognize the song it

00:26:35,520 --> 00:26:40,720
is the one that is

00:26:36,960 --> 00:26:42,559
playing so what why did i want to stream

00:26:40,720 --> 00:26:45,440
i wanted to stream so i can be listening

00:26:42,559 --> 00:26:48,240
to a playlist on my computer and then

00:26:45,440 --> 00:26:50,159
go to the living room and switch on my

00:26:48,240 --> 00:26:52,320
media player and

00:26:50,159 --> 00:26:53,279
retrieve the stream or where it was

00:26:52,320 --> 00:26:56,320
playing

00:26:53,279 --> 00:26:59,360
uh no this is not this is of course not

00:26:56,320 --> 00:26:59,919
the only thing that's uh this thing do

00:26:59,360 --> 00:27:03,039
you can

00:26:59,919 --> 00:27:03,679
uh search for information so i just

00:27:03,039 --> 00:27:06,960
search for

00:27:03,679 --> 00:27:10,000
girl i got an artist i got several

00:27:06,960 --> 00:27:11,120
songs with these songs i can just add

00:27:10,000 --> 00:27:14,720
them

00:27:11,120 --> 00:27:15,360
to the playlist for example if i go

00:27:14,720 --> 00:27:18,399
looking

00:27:15,360 --> 00:27:19,520
at an artist this one doesn't have any

00:27:18,399 --> 00:27:22,559
songs

00:27:19,520 --> 00:27:24,320
but if i go look at madonna i see that i

00:27:22,559 --> 00:27:27,440
have two songs from madonna

00:27:24,320 --> 00:27:32,880
i also have our full biography

00:27:27,440 --> 00:27:36,000
which comes from last femme

00:27:32,880 --> 00:27:38,720
since this is for personal use

00:27:36,000 --> 00:27:40,159
something else i wanted uh was to be

00:27:38,720 --> 00:27:44,880
able to uh

00:27:40,159 --> 00:27:44,880
download things from um

00:27:45,760 --> 00:27:49,200
from youtube so i can make a search on

00:27:48,240 --> 00:27:52,080
youtube

00:27:49,200 --> 00:27:53,039
and here is that i've got my youtube

00:27:52,080 --> 00:27:55,520
search results

00:27:53,039 --> 00:27:57,440
once i have them i can download one of

00:27:55,520 --> 00:28:00,480
the songs

00:27:57,440 --> 00:28:02,159
this is going to take a minute or two

00:28:00,480 --> 00:28:03,600
and once the song is going to be

00:28:02,159 --> 00:28:06,080
downloaded

00:28:03,600 --> 00:28:07,400
uh it's going to be available in my

00:28:06,080 --> 00:28:08,480
playlist

00:28:07,400 --> 00:28:11,120
[Music]

00:28:08,480 --> 00:28:13,039
and this is the demo effect this one

00:28:11,120 --> 00:28:16,960
didn't download

00:28:13,039 --> 00:28:19,679
let me try to download another one

00:28:16,960 --> 00:28:21,039
maybe all my adventures is being taken

00:28:19,679 --> 00:28:24,080
by the stream

00:28:21,039 --> 00:28:27,440
uh from the from the conference

00:28:24,080 --> 00:28:30,399
i'm not sure let's see what happens

00:28:27,440 --> 00:28:31,840
here yes the song has been downloaded

00:28:30,399 --> 00:28:36,880
and now i can just

00:28:31,840 --> 00:28:36,880
click play and here is my song playing

00:28:40,559 --> 00:28:43,919
so this is playing completely

00:28:42,320 --> 00:28:46,399
independently from this

00:28:43,919 --> 00:28:48,720
from the from the stream and if i want

00:28:46,399 --> 00:28:52,720
to go back to the stream i can just

00:28:48,720 --> 00:28:57,200
reconnect to the stream and

00:28:52,720 --> 00:29:01,039
and get back to my regular stream

00:28:57,200 --> 00:29:04,320
this um works completely independently

00:29:01,039 --> 00:29:06,799
and uh yeah here is the stream that's

00:29:04,320 --> 00:29:06,799
back up

00:29:08,960 --> 00:29:17,840
it is still playing the same song

00:29:12,960 --> 00:29:17,840
and i guess that's about it for the demo

00:29:24,399 --> 00:29:27,840
so now uh let's move to uh the

00:29:26,640 --> 00:29:30,960
conclusion so

00:29:27,840 --> 00:29:31,760
uh the conclusion is that uh streaming

00:29:30,960 --> 00:29:35,200
is hard

00:29:31,760 --> 00:29:38,640
uh the major issue i got with this

00:29:35,200 --> 00:29:39,200
um uh with this application is that i

00:29:38,640 --> 00:29:42,960
thought

00:29:39,200 --> 00:29:45,679
i thought i could just uh push every mp3

00:29:42,960 --> 00:29:46,880
song to the stream and it would work

00:29:45,679 --> 00:29:49,279
correctly

00:29:46,880 --> 00:29:50,000
and it happens that it doesn't work

00:29:49,279 --> 00:29:53,520
correctly

00:29:50,000 --> 00:29:56,159
it just works correctly with one

00:29:53,520 --> 00:29:57,760
player which is kodi because cody does

00:29:56,159 --> 00:30:00,880
every something

00:29:57,760 --> 00:30:04,640
of the stream before playing it locally

00:30:00,880 --> 00:30:06,799
other stream players have difficulties

00:30:04,640 --> 00:30:06,799
with

00:30:06,960 --> 00:30:11,600
having the stream uh when changing from

00:30:09,840 --> 00:30:14,559
one mp3 to the next

00:30:11,600 --> 00:30:15,840
changing bit rates or changing encoding

00:30:14,559 --> 00:30:18,640
or things like that

00:30:15,840 --> 00:30:20,159
so the the stream finally is the is the

00:30:18,640 --> 00:30:23,440
worst part of it

00:30:20,159 --> 00:30:25,919
uh right now um it's still

00:30:23,440 --> 00:30:27,440
um it's still not working properly

00:30:25,919 --> 00:30:30,720
except on kodi

00:30:27,440 --> 00:30:35,279
uh which is an issue uh but

00:30:30,720 --> 00:30:38,080
uh yeah uh unless i ask django to do the

00:30:35,279 --> 00:30:39,279
same work as kodi and resample

00:30:38,080 --> 00:30:42,559
everything before

00:30:39,279 --> 00:30:43,840
streaming i don't see that there's a

00:30:42,559 --> 00:30:46,960
good solution to that

00:30:43,840 --> 00:30:49,200
except free encoding all my mp3s

00:30:46,960 --> 00:30:50,320
myself to make sure that they are of the

00:30:49,200 --> 00:30:54,399
same

00:30:50,320 --> 00:30:56,559
uh the same bit rate and everything

00:30:54,399 --> 00:30:57,760
the next conclusion is that as you've

00:30:56,559 --> 00:31:01,039
seen view

00:30:57,760 --> 00:31:02,880
is not that different from django um

00:31:01,039 --> 00:31:04,799
if you are using the tools that i showed

00:31:02,880 --> 00:31:07,919
you

00:31:04,799 --> 00:31:09,679
you can easily go from django to view

00:31:07,919 --> 00:31:12,159
yes it's javascript it's another

00:31:09,679 --> 00:31:14,960
language but it really uses the same

00:31:12,159 --> 00:31:18,880
concepts as django

00:31:14,960 --> 00:31:22,000
and another thing you have to be

00:31:18,880 --> 00:31:24,640
uh looking at of course is

00:31:22,000 --> 00:31:25,519
uh the data don't forget that while

00:31:24,640 --> 00:31:28,720
we'll using

00:31:25,519 --> 00:31:32,000
of ux orm you are going to be

00:31:28,720 --> 00:31:34,240
um using local data and the local data

00:31:32,000 --> 00:31:35,440
is not always the same as the data in

00:31:34,240 --> 00:31:37,279
the backend so

00:31:35,440 --> 00:31:38,310
you have to make sure to refresh that

00:31:37,279 --> 00:31:39,600
data often

00:31:38,310 --> 00:31:42,640
[Music]

00:31:39,600 --> 00:31:45,360
and finally mutations

00:31:42,640 --> 00:31:46,159
mutation is a concept that is completely

00:31:45,360 --> 00:31:48,640
uh

00:31:46,159 --> 00:31:50,640
referring to django developer maybe you

00:31:48,640 --> 00:31:54,080
can try to think about it

00:31:50,640 --> 00:31:56,320
like um if you are changing

00:31:54,080 --> 00:31:57,360
information on the model in your view on

00:31:56,320 --> 00:32:00,480
django

00:31:57,360 --> 00:32:02,799
uh it will not um

00:32:00,480 --> 00:32:04,640
it will not be in the database

00:32:02,799 --> 00:32:05,679
accessible to another view until you

00:32:04,640 --> 00:32:08,880
purchase if

00:32:05,679 --> 00:32:10,240
you call the safe method so that's a

00:32:08,880 --> 00:32:13,360
mutation

00:32:10,240 --> 00:32:16,880
and i've run a little bit over time so

00:32:13,360 --> 00:32:19,760
we can go to the q a

00:32:16,880 --> 00:32:20,960
and um that's it for the talk thank you

00:32:19,760 --> 00:32:24,000
for listening

00:32:20,960 --> 00:32:25,360
thank you to the organizers who did a

00:32:24,000 --> 00:32:27,360
really wonderful job

00:32:25,360 --> 00:32:30,399
and were really understanding of

00:32:27,360 --> 00:32:30,399
technical issues

00:32:34,159 --> 00:32:40,080
okay so uh

00:32:37,440 --> 00:32:40,080
next one

00:32:40,559 --> 00:32:47,120
yeah uh i have some about the

00:32:43,679 --> 00:32:49,840
rm uh like i never

00:32:47,120 --> 00:32:50,480
worked with that so no i don't much idea

00:32:49,840 --> 00:32:53,840
how

00:32:50,480 --> 00:32:57,120
how this rm in the front end works

00:32:53,840 --> 00:32:59,679
uh but i su suspect is

00:32:57,120 --> 00:33:00,159
it should be more like efficient or some

00:32:59,679 --> 00:33:02,799
way

00:33:00,159 --> 00:33:03,440
uh uh instead of using like a store i

00:33:02,799 --> 00:33:05,919
guess the

00:33:03,440 --> 00:33:07,200
view store is something similar with the

00:33:05,919 --> 00:33:10,240
the store

00:33:07,200 --> 00:33:13,440
uh we use in react i mean

00:33:10,240 --> 00:33:16,000
it's like a huge uh data

00:33:13,440 --> 00:33:16,559
object with like all the the data you

00:33:16,000 --> 00:33:20,240
have

00:33:16,559 --> 00:33:24,799
uh in memory so like do you have

00:33:20,240 --> 00:33:27,600
any idea of like uh

00:33:24,799 --> 00:33:28,720
a guideline to choose between like i i

00:33:27,600 --> 00:33:32,320
want us

00:33:28,720 --> 00:33:36,960
this data of mine stored in this

00:33:32,320 --> 00:33:41,200
or i am in the front end or as a

00:33:36,960 --> 00:33:44,320
uh like in the store objects uh

00:33:41,200 --> 00:33:47,840
yeah crm the organ is

00:33:44,320 --> 00:33:50,159
part of the store object um so

00:33:47,840 --> 00:33:52,480
uh if you're using drm you're going to

00:33:50,159 --> 00:33:56,960
be using the store uh

00:33:52,480 --> 00:34:00,399
it is um it's a double-edged sword

00:33:56,960 --> 00:34:01,360
so if you start loading a bunch of data

00:34:00,399 --> 00:34:03,120
if you load your

00:34:01,360 --> 00:34:05,600
entire back-end database in the

00:34:03,120 --> 00:34:07,360
front-end your browser is going to be

00:34:05,600 --> 00:34:08,320
slow it's going to be using a lot of

00:34:07,360 --> 00:34:11,200
memory

00:34:08,320 --> 00:34:12,159
and that's not going to be good uh

00:34:11,200 --> 00:34:15,679
although

00:34:12,159 --> 00:34:17,040
if you look at most postgres databases

00:34:15,679 --> 00:34:20,079
for example

00:34:17,040 --> 00:34:22,879
uh a lot of them could actually be

00:34:20,079 --> 00:34:24,079
running in memory on most computers

00:34:22,879 --> 00:34:26,720
nowadays

00:34:24,079 --> 00:34:27,599
uh if you are using chrome anyway you

00:34:26,720 --> 00:34:30,720
are using

00:34:27,599 --> 00:34:34,639
uh four or eight gigs of ram just

00:34:30,720 --> 00:34:36,720
just for chrome uh so it's it's

00:34:34,639 --> 00:34:37,679
it might not be that much of a problem

00:34:36,720 --> 00:34:39,599
because that

00:34:37,679 --> 00:34:41,040
story is going to be removed whenever

00:34:39,599 --> 00:34:44,320
you close the page

00:34:41,040 --> 00:34:47,119
now if you really uh don't want to use

00:34:44,320 --> 00:34:48,240
that all that memory you can directly

00:34:47,119 --> 00:34:51,119
use axios

00:34:48,240 --> 00:34:52,159
which is the the part that does http

00:34:51,119 --> 00:34:55,280
requests

00:34:52,159 --> 00:34:58,400
you can just directly use axios in your

00:34:55,280 --> 00:34:59,280
view component to load the data not put

00:34:58,400 --> 00:35:01,599
it in the store

00:34:59,280 --> 00:35:03,599
and use it directly in your component

00:35:01,599 --> 00:35:06,720
that way it's not going to be stored

00:35:03,599 --> 00:35:08,480
uh inside that store but this means that

00:35:06,720 --> 00:35:09,280
every time you will need that data you

00:35:08,480 --> 00:35:12,720
will have to do

00:35:09,280 --> 00:35:16,079
a back-end request which is uh

00:35:12,720 --> 00:35:19,680
going to be taking a lot more resources

00:35:16,079 --> 00:35:20,960
than just uh going back to the store if

00:35:19,680 --> 00:35:25,680
this is something that you

00:35:20,960 --> 00:35:25,680
already have loaded uh in a previous

00:35:28,839 --> 00:35:33,760
request

00:35:30,480 --> 00:35:37,200
so if that answers your question uh

00:35:33,760 --> 00:35:41,680
i don't know who's next

00:35:37,200 --> 00:35:44,560
well i have a question yes

00:35:41,680 --> 00:35:47,520
yes hello i'm jens from the pacifiers

00:35:44,560 --> 00:35:47,520
institute we are also

00:35:48,160 --> 00:35:54,800
going to implement the

00:35:51,280 --> 00:35:58,560
js together with jungle

00:35:54,800 --> 00:36:01,839
and but now we are going

00:35:58,560 --> 00:36:04,160
for graphql do you have any

00:36:01,839 --> 00:36:07,119
idea or why did you choose jungle rest

00:36:04,160 --> 00:36:10,000
framework of a graphql or do you

00:36:07,119 --> 00:36:11,200
do you have any tips on that or what

00:36:10,000 --> 00:36:14,640
should be different

00:36:11,200 --> 00:36:16,079
different i do not have some tips on

00:36:14,640 --> 00:36:19,280
graphql

00:36:16,079 --> 00:36:22,240
my personal take on graphql is that

00:36:19,280 --> 00:36:24,240
i do not like it the reason i do not

00:36:22,240 --> 00:36:27,520
like it is that it's

00:36:24,240 --> 00:36:30,880
really easy for anybody to uh

00:36:27,520 --> 00:36:33,839
forge a request in graphql that

00:36:30,880 --> 00:36:35,359
will just uh completely kill your

00:36:33,839 --> 00:36:39,119
back-end server

00:36:35,359 --> 00:36:40,240
uh it is possible in graphql to ask from

00:36:39,119 --> 00:36:42,160
some data to

00:36:40,240 --> 00:36:43,920
to to force the back-end to make some

00:36:42,160 --> 00:36:47,520
joints on the database

00:36:43,920 --> 00:36:48,720
and you if if you craft uh if you look

00:36:47,520 --> 00:36:52,000
at the requests

00:36:48,720 --> 00:36:54,880
that go by in the browser and you craft

00:36:52,000 --> 00:36:56,240
uh something you can request the whole

00:36:54,880 --> 00:36:58,720
database at once

00:36:56,240 --> 00:37:00,960
with graphql this is there are

00:36:58,720 --> 00:37:04,079
mechanisms in graphql to uh

00:37:00,960 --> 00:37:06,839
prevent that from happening uh but

00:37:04,079 --> 00:37:08,160
in graphql if you're writing your api in

00:37:06,839 --> 00:37:10,240
graphql

00:37:08,160 --> 00:37:11,440
you do have to always have that

00:37:10,240 --> 00:37:14,320
information in mind

00:37:11,440 --> 00:37:16,320
that security uh concerns you always

00:37:14,320 --> 00:37:18,000
have to have that in mind

00:37:16,320 --> 00:37:19,359
which is something that you don't need

00:37:18,000 --> 00:37:22,240
to have in mind

00:37:19,359 --> 00:37:22,640
with a django rest framework because you

00:37:22,240 --> 00:37:24,880
can

00:37:22,640 --> 00:37:25,920
the the user can only request whatever

00:37:24,880 --> 00:37:28,720
you

00:37:25,920 --> 00:37:29,119
say that they can request uh so this is

00:37:28,720 --> 00:37:31,839
why

00:37:29,119 --> 00:37:33,520
i usually go for uh restrangers

00:37:31,839 --> 00:37:37,040
framework and not graphql

00:37:33,520 --> 00:37:40,079
so i've not looked into the graphql

00:37:37,040 --> 00:37:42,400
options and i'm sure there are some

00:37:40,079 --> 00:37:45,440
perfectly nice libraries in view to use

00:37:42,400 --> 00:37:47,280
graphql but i cannot help you with that

00:37:45,440 --> 00:37:50,160
okay thank you but it's also good

00:37:47,280 --> 00:37:50,720
information well i've also experienced

00:37:50,160 --> 00:37:53,760
with

00:37:50,720 --> 00:37:55,680
jungle rest framework okay then we can

00:37:53,760 --> 00:38:00,000
think about it okay thank you very much

00:37:55,680 --> 00:38:00,000
for this information you're welcome

00:38:02,160 --> 00:38:05,839
next person

00:38:08,480 --> 00:38:14,079
uh i see adam is next on my screen

00:38:15,520 --> 00:38:21,280
i think everyone's questions are good

00:38:18,960 --> 00:38:21,280
okay

00:38:22,079 --> 00:38:33,839
uh next on my screen is zerina

00:38:34,790 --> 00:38:39,119
[Music]

00:38:36,640 --> 00:38:39,119
muted

00:38:40,420 --> 00:38:47,040
[Music]

00:38:43,359 --> 00:38:49,920
okay so no question from the aina next

00:38:47,040 --> 00:38:49,920
is telmo

00:38:56,400 --> 00:39:01,839
okay no question from delmar

00:39:03,359 --> 00:39:07,599
no i didn't really have a question um i

00:39:06,480 --> 00:39:09,839
was interested

00:39:07,599 --> 00:39:12,000
actually in the theme that you were in

00:39:09,839 --> 00:39:12,000
my

00:39:12,200 --> 00:39:15,280
synchronization with the with the back

00:39:14,640 --> 00:39:18,640
end

00:39:15,280 --> 00:39:21,280
um but i think the

00:39:18,640 --> 00:39:22,560
yeah the base model is coming right now

00:39:21,280 --> 00:39:25,680
answering that

00:39:22,560 --> 00:39:28,960
okay so thank you

00:39:25,680 --> 00:39:32,720
welcome um i'm sorry

00:39:28,960 --> 00:39:34,240
and it was for i thought you said walter

00:39:32,720 --> 00:39:38,000
which is my name

00:39:34,240 --> 00:39:41,920
oh don't worry it's okay

00:39:38,000 --> 00:39:42,640
i i'm fine as long as i get one question

00:39:41,920 --> 00:39:46,560
okay

00:39:42,640 --> 00:39:48,480
may i it's um i was too slow to

00:39:46,560 --> 00:39:50,880
unmute my microphone

00:39:48,480 --> 00:39:51,839
um i have a question with regards to the

00:39:50,880 --> 00:39:54,960
view xorm

00:39:51,839 --> 00:39:57,839
and the local forage plug-in

00:39:54,960 --> 00:39:58,480
the local forage plugin allows to use

00:39:57,839 --> 00:40:01,119
the

00:39:58,480 --> 00:40:02,400
indexed db in the browser for offline

00:40:01,119 --> 00:40:05,599
storage

00:40:02,400 --> 00:40:08,000
do you have any experience with

00:40:05,599 --> 00:40:09,440
storing offline data using this

00:40:08,000 --> 00:40:12,720
combination

00:40:09,440 --> 00:40:15,599
uh yes most of the time the data

00:40:12,720 --> 00:40:17,599
i want to store offline is the user

00:40:15,599 --> 00:40:21,520
information

00:40:17,599 --> 00:40:22,640
so um as i said when you log in you

00:40:21,520 --> 00:40:25,920
receive the info

00:40:22,640 --> 00:40:26,400
the user information so uh something i

00:40:25,920 --> 00:40:29,520
do

00:40:26,400 --> 00:40:32,960
is that i store the user information

00:40:29,520 --> 00:40:35,520
locally in the browser so next time uh

00:40:32,960 --> 00:40:37,520
and offline so next time you use you you

00:40:35,520 --> 00:40:39,839
open that page

00:40:37,520 --> 00:40:41,359
i look into the information i say oh we

00:40:39,839 --> 00:40:45,040
already have a user so

00:40:41,359 --> 00:40:45,839
let me just try to make a request to the

00:40:45,040 --> 00:40:49,440
back end

00:40:45,839 --> 00:40:49,440
and see if we're still authenticated

00:40:49,920 --> 00:40:53,040
since we're using session authentication

00:40:51,839 --> 00:40:56,880
so if there is

00:40:53,040 --> 00:40:59,040
uh i have an endpoint that is called me

00:40:56,880 --> 00:41:00,480
and so what i do is that with this

00:40:59,040 --> 00:41:04,000
information i make an

00:41:00,480 --> 00:41:07,200
uh a call to the back end uh to that

00:41:04,000 --> 00:41:08,400
end point uh either i get a 4 3 response

00:41:07,200 --> 00:41:10,079
which means that

00:41:08,400 --> 00:41:13,599
i'm not authenticated on the back end

00:41:10,079 --> 00:41:15,520
anymore either i'd get a 200 response if

00:41:13,599 --> 00:41:17,839
i get a 200 response

00:41:15,520 --> 00:41:19,280
and the data from that response is

00:41:17,839 --> 00:41:20,640
different from the user that i have

00:41:19,280 --> 00:41:24,480
stored in the

00:41:20,640 --> 00:41:28,400
offline storage i will log out the user

00:41:24,480 --> 00:41:28,960
and if the if the the data is the same i

00:41:28,400 --> 00:41:33,040
will

00:41:28,960 --> 00:41:37,280
keep the user on and so that user

00:41:33,040 --> 00:41:40,000
can be usually i've got a user model

00:41:37,280 --> 00:41:43,040
and i'm storing the the user model from

00:41:40,000 --> 00:41:46,640
the view xrm

00:41:43,040 --> 00:41:50,560
data okay that's quite nice

00:41:46,640 --> 00:41:53,839
do you use um token authentication in

00:41:50,560 --> 00:41:53,839
any project that you do

00:41:54,160 --> 00:41:59,040
i do use token authentication but not

00:41:57,130 --> 00:42:02,640
[Music]

00:41:59,040 --> 00:42:06,160
not in any view project currently

00:42:02,640 --> 00:42:09,119
oh sorry but it's okay

00:42:06,160 --> 00:42:11,520
i'm probably going to use one uh

00:42:09,119 --> 00:42:14,880
starting next week

00:42:11,520 --> 00:42:16,560
but so far i've been using

00:42:14,880 --> 00:42:18,079
a token authentication on another

00:42:16,560 --> 00:42:21,200
project that we're using

00:42:18,079 --> 00:42:23,280
angular react and amber but

00:42:21,200 --> 00:42:24,480
i don't think i've ever done one with uh

00:42:23,280 --> 00:42:26,560
with you

00:42:24,480 --> 00:42:29,040
it's pretty similar from what i've read

00:42:26,560 --> 00:42:32,160
it's pretty similar to to any other

00:42:29,040 --> 00:42:35,200
front-end authentication

00:42:32,160 --> 00:42:38,800
framework so there are libraries

00:42:35,200 --> 00:42:40,880
for using us for example or if you are

00:42:38,800 --> 00:42:44,240
using

00:42:40,880 --> 00:42:45,760
the django rest framework token so the

00:42:44,240 --> 00:42:50,400
permanent token

00:42:45,760 --> 00:42:53,520
uh you can use that i'm going to go back

00:42:50,400 --> 00:42:55,760
yes yes i i do

00:42:53,520 --> 00:42:56,960
use token-based authentication in a

00:42:55,760 --> 00:43:00,960
project

00:42:56,960 --> 00:43:03,920
yes so if you are in uh in an exchange

00:43:00,960 --> 00:43:05,040
beside this web conference right now

00:43:03,920 --> 00:43:09,200
then uh you can

00:43:05,040 --> 00:43:09,200
contact me on slack okay

00:43:11,359 --> 00:43:16,480
django knox because the base

00:43:14,800 --> 00:43:18,400
token authentication of django rest

00:43:16,480 --> 00:43:19,359
framework allows only for one token and

00:43:18,400 --> 00:43:22,480
that is not

00:43:19,359 --> 00:43:24,880
encrypted in the database and so we

00:43:22,480 --> 00:43:26,960
changed to django rest box in this case

00:43:24,880 --> 00:43:29,520
because there can be multiple tokens and

00:43:26,960 --> 00:43:33,040
they are encrypted in the database

00:43:29,520 --> 00:43:36,720
okay that's nice okay

00:43:33,040 --> 00:43:41,839
okay thank you

00:43:36,720 --> 00:43:41,839
and so

00:43:50,319 --> 00:43:52,400

YouTube URL: https://www.youtube.com/watch?v=BFAWt7YGiKs


