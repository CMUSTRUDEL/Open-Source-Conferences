Title: DjangoCon 2020 | New ways to deploy your Django app - Tom Dyson
Publication date: 2020-09-30
Playlist: DjangoCon Europe 2020 (Virtual)
Description: 
	DjangoCon Europe 2020 (Virtual)
September 18, 2020 - 13h15 (GMT+1)

“New ways to deploy your Django app” by Tom Dyson 

For many people, deploying their site is still the hardest part of being a Django developer. This talk will demonstrate three modern, low-cost alternatives to the standard approaches. I'll show how to deploy the same app three times, using self-hosted Docker, Google Cloud Run and static site generation, outlining the trade-offs with each approach.
Captions: 
	00:00:07,839 --> 00:00:12,240
hi everybody i'm tom dyson

00:00:10,240 --> 00:00:13,840
and i'm here to talk to you about

00:00:12,240 --> 00:00:15,839
alternative approaches for hosting your

00:00:13,840 --> 00:00:18,960
django projects

00:00:15,839 --> 00:00:18,960
let me share my screen

00:00:23,760 --> 00:00:29,599
great so i'm from torchbox

00:00:27,599 --> 00:00:32,079
we're an agency in the uk we've been

00:00:29,599 --> 00:00:33,040
using django for uh almost since the

00:00:32,079 --> 00:00:34,000
beginning pretty much since the

00:00:33,040 --> 00:00:36,000
beginning

00:00:34,000 --> 00:00:37,200
uh we're we're also the agency behind

00:00:36,000 --> 00:00:38,559
whitetail the open source content

00:00:37,200 --> 00:00:41,120
management system that i hope

00:00:38,559 --> 00:00:44,719
many of you are familiar with but i'm

00:00:41,120 --> 00:00:47,760
not talking about wagtail today uh

00:00:44,719 --> 00:00:49,760
i would encourage some of you to or any

00:00:47,760 --> 00:00:51,680
of you to follow along with this talk

00:00:49,760 --> 00:00:53,120
using the link here tomdi.org forward

00:00:51,680 --> 00:00:54,399
slash deploy

00:00:53,120 --> 00:00:56,480
most of this talk is going to be a live

00:00:54,399 --> 00:00:57,760
demo and the

00:00:56,480 --> 00:00:59,600
the steps that i'm going to be going

00:00:57,760 --> 00:01:02,399
through are exactly

00:00:59,600 --> 00:01:04,080
the same ones on those notes and uh it

00:01:02,399 --> 00:01:04,400
may be helpful for you to go along with

00:01:04,080 --> 00:01:06,320
those

00:01:04,400 --> 00:01:07,760
you will just need a few things in order

00:01:06,320 --> 00:01:09,200
to complete all the steps the most

00:01:07,760 --> 00:01:10,479
important one is a computer with python

00:01:09,200 --> 00:01:11,600
on it which i would guess most of you

00:01:10,479 --> 00:01:12,960
have

00:01:11,600 --> 00:01:15,360
and then it'd be useful to have a github

00:01:12,960 --> 00:01:16,560
account some sort of disposable linux

00:01:15,360 --> 00:01:18,720
virtual machine

00:01:16,560 --> 00:01:19,840
and um i've put some links in in these

00:01:18,720 --> 00:01:22,960
notes

00:01:19,840 --> 00:01:24,960
with some a couple of sites that have

00:01:22,960 --> 00:01:26,000
credit 100 credit to get you started if

00:01:24,960 --> 00:01:29,439
you don't have one already

00:01:26,000 --> 00:01:29,920
and a google account so the the purpose

00:01:29,439 --> 00:01:32,479
of this

00:01:29,920 --> 00:01:33,600
talk is to kind of address this question

00:01:32,479 --> 00:01:36,640
that i see a lot

00:01:33,600 --> 00:01:37,920
in django support forums um we see it a

00:01:36,640 --> 00:01:38,960
lot in fact in the whitetail support

00:01:37,920 --> 00:01:40,479
forums as well but

00:01:38,960 --> 00:01:42,399
i think it's it's more particularly

00:01:40,479 --> 00:01:43,920
around django generally and

00:01:42,399 --> 00:01:46,159
it's people who who've gone through the

00:01:43,920 --> 00:01:48,320
django tutorial who've worked out how to

00:01:46,159 --> 00:01:49,840
to build a site and then they get stuck

00:01:48,320 --> 00:01:51,840
about and then the next step is making

00:01:49,840 --> 00:01:55,119
it live and they get stuck there

00:01:51,840 --> 00:01:57,600
um and you see a lot a lot of people

00:01:55,119 --> 00:01:59,439
making you know asking for help like

00:01:57,600 --> 00:02:00,719
this and they often kind of apologize

00:01:59,439 --> 00:02:01,920
which i think is a shame because you

00:02:00,719 --> 00:02:02,640
know they shouldn't have to apologize

00:02:01,920 --> 00:02:04,560
for this

00:02:02,640 --> 00:02:06,000
the skills for deploying sites are

00:02:04,560 --> 00:02:09,119
pretty different to the skills to

00:02:06,000 --> 00:02:11,039
create sites and i feel like i really

00:02:09,119 --> 00:02:12,319
like this last point here where someone

00:02:11,039 --> 00:02:14,239
replies to somebody else who's been

00:02:12,319 --> 00:02:15,920
struggling where they say um

00:02:14,239 --> 00:02:18,480
uh i'm just good to know i'm not the

00:02:15,920 --> 00:02:19,920
only one gonna keep on struggling until

00:02:18,480 --> 00:02:21,680
i don't realize it's a struggle

00:02:19,920 --> 00:02:23,120
and that's it's funny and it's nicely

00:02:21,680 --> 00:02:23,840
written but it was also i think it's

00:02:23,120 --> 00:02:26,879
it's a shame

00:02:23,840 --> 00:02:29,280
because um i think it's true for

00:02:26,879 --> 00:02:30,319
and for those of us who have um who have

00:02:29,280 --> 00:02:34,000
deployed

00:02:30,319 --> 00:02:34,879
django sites using nginx and or apache

00:02:34,000 --> 00:02:37,040
and unicorn

00:02:34,879 --> 00:02:38,959
supervisor or worked out how to use

00:02:37,040 --> 00:02:40,959
heroku or these other systems then if

00:02:38,959 --> 00:02:42,879
you do it enough times then then

00:02:40,959 --> 00:02:44,480
you know it's hard to remember how much

00:02:42,879 --> 00:02:44,959
of a mountain it is to climb for people

00:02:44,480 --> 00:02:47,120
who have

00:02:44,959 --> 00:02:49,200
just learned django and are suddenly

00:02:47,120 --> 00:02:51,280
presented with all these options

00:02:49,200 --> 00:02:53,120
and i should be clear that there are

00:02:51,280 --> 00:02:54,640
lots of fantastic options for

00:02:53,120 --> 00:02:56,080
deploying sites as you become more

00:02:54,640 --> 00:02:57,840
familiar with it so there's the

00:02:56,080 --> 00:02:59,120
do-it-yourself approach like the one i

00:02:57,840 --> 00:03:01,200
described where you

00:02:59,120 --> 00:03:02,800
you have your own linux servers and you

00:03:01,200 --> 00:03:06,159
install nginx

00:03:02,800 --> 00:03:06,959
and unicorn or usb and so on um and then

00:03:06,159 --> 00:03:09,680
there are kind of

00:03:06,959 --> 00:03:10,239
great platforms like divio where um a

00:03:09,680 --> 00:03:12,319
lot of this

00:03:10,239 --> 00:03:14,400
and they provide 24 7 support and a lot

00:03:12,319 --> 00:03:16,480
of this is handled for you

00:03:14,400 --> 00:03:18,080
so but but what i want to talk about

00:03:16,480 --> 00:03:20,480
today is the three options

00:03:18,080 --> 00:03:21,680
that are not so well known and that i

00:03:20,480 --> 00:03:23,440
think could be

00:03:21,680 --> 00:03:25,200
really a good useful starting point for

00:03:23,440 --> 00:03:26,720
people who who have just built their

00:03:25,200 --> 00:03:28,959
first django site and uh

00:03:26,720 --> 00:03:30,239
and i want to find quickest ways of of

00:03:28,959 --> 00:03:33,040
making it live

00:03:30,239 --> 00:03:34,720
the first one is called doku and uh the

00:03:33,040 --> 00:03:35,040
way a way you could think about doku is

00:03:34,720 --> 00:03:38,239
like

00:03:35,040 --> 00:03:41,040
a really simple open source heroku

00:03:38,239 --> 00:03:42,560
so it's actually a become a long bash

00:03:41,040 --> 00:03:44,400
script that manages

00:03:42,560 --> 00:03:45,680
docker containers on a linux server but

00:03:44,400 --> 00:03:47,840
you don't really need to

00:03:45,680 --> 00:03:49,360
know how it works you just need to know

00:03:47,840 --> 00:03:50,959
the two lines to install it

00:03:49,360 --> 00:03:53,439
and then how to push your site to it to

00:03:50,959 --> 00:03:55,680
make it live the second one is static

00:03:53,439 --> 00:03:57,920
site generation and this feels a bit

00:03:55,680 --> 00:04:00,000
like back to the future when i was first

00:03:57,920 --> 00:04:03,200
building websites in the late 90s i

00:04:00,000 --> 00:04:03,599
would uh hand craft html files and ftp

00:04:03,200 --> 00:04:05,840
them

00:04:03,599 --> 00:04:07,200
to a shared server somewhere and this is

00:04:05,840 --> 00:04:08,319
kind of go it feels a bit like going

00:04:07,200 --> 00:04:10,159
back to that because you're

00:04:08,319 --> 00:04:11,439
you're building sites out of static html

00:04:10,159 --> 00:04:12,879
pages

00:04:11,439 --> 00:04:14,799
but with a very different tooling

00:04:12,879 --> 00:04:16,479
approach and there turned out to be

00:04:14,799 --> 00:04:18,639
quite a lot of benefits to this which

00:04:16,479 --> 00:04:20,479
i'll go through towards the end and the

00:04:18,639 --> 00:04:23,680
last one is a relatively new product

00:04:20,479 --> 00:04:24,000
from google called cloud run which is

00:04:23,680 --> 00:04:26,160
like

00:04:24,000 --> 00:04:27,759
you you take your docking containers and

00:04:26,160 --> 00:04:30,639
as they say in their marketing somewhere

00:04:27,759 --> 00:04:32,080
they convert containers into urls and

00:04:30,639 --> 00:04:32,960
there are a few rough edges around this

00:04:32,080 --> 00:04:35,120
but i think

00:04:32,960 --> 00:04:36,720
the model this kind of serverless model

00:04:35,120 --> 00:04:38,000
of serverless containers that sounds

00:04:36,720 --> 00:04:40,000
like really

00:04:38,000 --> 00:04:41,199
uh jargony but i think this serverless

00:04:40,000 --> 00:04:42,880
model

00:04:41,199 --> 00:04:44,880
is a really interesting one and i

00:04:42,880 --> 00:04:47,520
predict it's going to become

00:04:44,880 --> 00:04:49,040
the the standard way of deploying

00:04:47,520 --> 00:04:51,199
applications so it's interesting to to

00:04:49,040 --> 00:04:53,600
see how that's working now

00:04:51,199 --> 00:04:54,720
all right the the most part of this talk

00:04:53,600 --> 00:04:56,639
is going to be a live demo and i'm going

00:04:54,720 --> 00:04:58,000
to try and do a lot of these steps in

00:04:56,639 --> 00:05:00,000
the time we've got available it's going

00:04:58,000 --> 00:05:02,240
to be a bit of a race against time

00:05:00,000 --> 00:05:03,520
um so you have to forgive me if it

00:05:02,240 --> 00:05:04,800
doesn't go perfectly and we don't get

00:05:03,520 --> 00:05:06,160
through everything

00:05:04,800 --> 00:05:08,080
and i hope some of you will be able to

00:05:06,160 --> 00:05:10,960
follow along too using that

00:05:08,080 --> 00:05:12,720
link tom d slash dot org slash deploy

00:05:10,960 --> 00:05:15,039
which will take you to here

00:05:12,720 --> 00:05:16,560
so we are going to start uh with

00:05:15,039 --> 00:05:17,440
providing we have something some of

00:05:16,560 --> 00:05:20,720
these things

00:05:17,440 --> 00:05:22,720
by building a wagtail site locally um

00:05:20,720 --> 00:05:24,320
and this and i've i've said i've used

00:05:22,720 --> 00:05:25,280
whitetail here this can be any django

00:05:24,320 --> 00:05:26,960
app um

00:05:25,280 --> 00:05:29,039
whitetail is just a kind of is an

00:05:26,960 --> 00:05:31,600
example of a fully featured

00:05:29,039 --> 00:05:32,880
django app that's quite quick to install

00:05:31,600 --> 00:05:34,400
so that's why i've used it here but this

00:05:32,880 --> 00:05:38,160
is none of this is specific to

00:05:34,400 --> 00:05:40,320
wagtail so in my local environment here

00:05:38,160 --> 00:05:41,680
i would create environment and install

00:05:40,320 --> 00:05:42,080
wagtail i've done those first three

00:05:41,680 --> 00:05:45,039
steps

00:05:42,080 --> 00:05:48,639
so you don't have to watch the that

00:05:45,039 --> 00:05:48,639
scrolling pass but i'm now going to

00:05:48,880 --> 00:05:53,199
start a new wagtail site and go into

00:05:51,919 --> 00:05:54,720
that directory

00:05:53,199 --> 00:05:57,120
and the next thing i'm going to do is

00:05:54,720 --> 00:05:59,919
install a package that actually i wrote

00:05:57,120 --> 00:06:01,039
about a month or so ago called whitetail

00:05:59,919 --> 00:06:04,479
fake news

00:06:01,039 --> 00:06:06,000
which is um a way to create a lot of

00:06:04,479 --> 00:06:07,440
dummy content on your site i did it

00:06:06,000 --> 00:06:08,400
really for testing particularly for

00:06:07,440 --> 00:06:11,680
testing

00:06:08,400 --> 00:06:13,120
um volume so

00:06:11,680 --> 00:06:15,520
see how well it kind of scales when you

00:06:13,120 --> 00:06:17,280
have more volume so we add that and put

00:06:15,520 --> 00:06:18,400
it in our requirements.txt

00:06:17,280 --> 00:06:21,919
and then we're going to add it to our

00:06:18,400 --> 00:06:23,280
installed apps in settings so

00:06:21,919 --> 00:06:25,360
of course there are more elegant ways of

00:06:23,280 --> 00:06:27,199
doing this but um i'm just going to

00:06:25,360 --> 00:06:28,880
push that line to the bottom of my

00:06:27,199 --> 00:06:32,000
settings file

00:06:28,880 --> 00:06:33,520
and and the next step is to run

00:06:32,000 --> 00:06:34,800
migrate so this is common again this is

00:06:33,520 --> 00:06:36,400
a standard thing that as a django

00:06:34,800 --> 00:06:39,039
developer you'll be used to so

00:06:36,400 --> 00:06:40,880
creating all the tables that django

00:06:39,039 --> 00:06:41,280
needs and then that wagtail needs and

00:06:40,880 --> 00:06:44,560
that

00:06:41,280 --> 00:06:45,280
wagtail fake news needs and that's all

00:06:44,560 --> 00:06:47,759
done

00:06:45,280 --> 00:06:48,560
and now we have this new management

00:06:47,759 --> 00:06:52,720
command

00:06:48,560 --> 00:06:54,479
and copy that correctly um

00:06:52,720 --> 00:06:56,000
make fake items so this is the one that

00:06:54,479 --> 00:06:56,800
comes from whitetail fake news and this

00:06:56,000 --> 00:07:00,080
is going to create

00:06:56,800 --> 00:07:01,280
50 fake news pages each

00:07:00,080 --> 00:07:03,440
and 50 images and it's going to

00:07:01,280 --> 00:07:04,720
associate images with each one

00:07:03,440 --> 00:07:06,800
that happens pretty quickly seven

00:07:04,720 --> 00:07:10,319
seconds and uh

00:07:06,800 --> 00:07:12,479
one last little step um my toe has a

00:07:10,319 --> 00:07:13,599
default home page which we don't want so

00:07:12,479 --> 00:07:14,960
we're just going to overwrite that

00:07:13,599 --> 00:07:16,639
template

00:07:14,960 --> 00:07:18,240
quickly with that line and then we're

00:07:16,639 --> 00:07:20,720
going to run the server

00:07:18,240 --> 00:07:21,280
so most of this now is hopefully feeling

00:07:20,720 --> 00:07:25,039
quite

00:07:21,280 --> 00:07:28,240
familiar for uh for django sites

00:07:25,039 --> 00:07:30,800
so um now i'm running my server and

00:07:28,240 --> 00:07:31,520
let's check see how that's worked so in

00:07:30,800 --> 00:07:36,639
a new

00:07:31,520 --> 00:07:36,639
browser tab i am

00:07:37,520 --> 00:07:43,680
checking here that um

00:07:40,639 --> 00:07:45,039
uh this news is linked

00:07:43,680 --> 00:07:46,479
and i just want to check something

00:07:45,039 --> 00:07:48,160
actually in the slack to make sure that

00:07:46,479 --> 00:07:49,520
my

00:07:48,160 --> 00:07:51,280
i'm not seeing anything that's like i'm

00:07:49,520 --> 00:07:52,560
just hoping my screen share is working i

00:07:51,280 --> 00:07:54,000
guess otherwise someone would have told

00:07:52,560 --> 00:07:54,960
me that i'm just not seeing the screen

00:07:54,000 --> 00:07:57,759
share

00:07:54,960 --> 00:07:59,120
indication of my screen right so now we

00:07:57,759 --> 00:08:02,720
are seeing

00:07:59,120 --> 00:08:05,039
uh can someone just like give me a

00:08:02,720 --> 00:08:05,919
positive sign in the general channel on

00:08:05,039 --> 00:08:12,720
slack

00:08:05,919 --> 00:08:14,960
just to say that you can see my screen

00:08:12,720 --> 00:08:16,560
working fine thank you darren james a

00:08:14,960 --> 00:08:18,800
little moment of panic there

00:08:16,560 --> 00:08:19,840
okay so we can see now that this uh my

00:08:18,800 --> 00:08:22,879
site is running

00:08:19,840 --> 00:08:24,240
um and that's great so that's like i

00:08:22,879 --> 00:08:26,240
don't know how far are we in now

00:08:24,240 --> 00:08:27,280
five minutes we've got our local django

00:08:26,240 --> 00:08:29,759
site running

00:08:27,280 --> 00:08:32,240
that's basically you know just credit to

00:08:29,759 --> 00:08:33,760
django for making that site really easy

00:08:32,240 --> 00:08:36,399
the next step now we're getting onto

00:08:33,760 --> 00:08:36,959
deploying so now we are going to install

00:08:36,399 --> 00:08:40,320
doku

00:08:36,959 --> 00:08:42,640
on a linux server and um

00:08:40,320 --> 00:08:44,399
i would generally use one up service

00:08:42,640 --> 00:08:48,880
like digitalocean or volta

00:08:44,399 --> 00:08:48,880
and so i would create something like um

00:08:48,959 --> 00:08:53,279
let me see if that's going to log me in

00:08:51,600 --> 00:08:54,880
create a new server on

00:08:53,279 --> 00:08:56,720
volta or digitalocean one of these

00:08:54,880 --> 00:08:59,680
services

00:08:56,720 --> 00:09:01,519
so go here and cloud compute and then i

00:08:59,680 --> 00:09:03,920
can choose my location

00:09:01,519 --> 00:09:05,600
i usually like i always feel like

00:09:03,920 --> 00:09:06,959
servers in paris a little bit more

00:09:05,600 --> 00:09:10,080
stylish than anywhere else

00:09:06,959 --> 00:09:12,480
um so and then get the latest debian

00:09:10,080 --> 00:09:14,320
the small one is fine as long as you've

00:09:12,480 --> 00:09:17,600
got about a gigabyte of memory

00:09:14,320 --> 00:09:19,120
and uh add your ssh key to it and

00:09:17,600 --> 00:09:20,000
probably give it a name and hit deploy

00:09:19,120 --> 00:09:22,959
now

00:09:20,000 --> 00:09:24,640
i'm not going to do deploy now because

00:09:22,959 --> 00:09:25,839
i've already done one and it just takes

00:09:24,640 --> 00:09:28,080
a couple of seconds but

00:09:25,839 --> 00:09:30,160
you might have done something a bit like

00:09:28,080 --> 00:09:33,920
that as i was talking

00:09:30,160 --> 00:09:35,440
um so here is my the server i've created

00:09:33,920 --> 00:09:37,839
and then i'm going to log into that one

00:09:35,440 --> 00:09:38,480
so here in this tab with a black

00:09:37,839 --> 00:09:41,920
background

00:09:38,480 --> 00:09:44,080
i've logged into this that server and

00:09:41,920 --> 00:09:46,640
the next thing to do would be to install

00:09:44,080 --> 00:09:47,240
doku which is these two lines so it gets

00:09:46,640 --> 00:09:49,600
the

00:09:47,240 --> 00:09:50,880
bootstrap.sh and then runs it i've done

00:09:49,600 --> 00:09:51,680
that already it takes about two minutes

00:09:50,880 --> 00:09:53,360
so i didn't

00:09:51,680 --> 00:09:55,839
you didn't need to see that running up

00:09:53,360 --> 00:09:55,839
my screen

00:09:56,000 --> 00:09:59,519
once that's done then you go to your

00:09:57,440 --> 00:10:02,959
server's ip address in a browser

00:09:59,519 --> 00:10:05,680
so if i get the ip address

00:10:02,959 --> 00:10:06,720
here and make a new tab and go to the

00:10:05,680 --> 00:10:09,600
browser

00:10:06,720 --> 00:10:11,120
that loads this um initial docupage the

00:10:09,600 --> 00:10:13,200
docu doesn't have

00:10:11,120 --> 00:10:14,800
a web interface generally apart from

00:10:13,200 --> 00:10:16,880
this initial screen

00:10:14,800 --> 00:10:18,240
where you just check you can provide

00:10:16,880 --> 00:10:20,320
your ssh key

00:10:18,240 --> 00:10:22,000
and um give it a host name i'm just

00:10:20,320 --> 00:10:24,880
going to use the same ip address

00:10:22,000 --> 00:10:26,480
and tell it to start that's done and

00:10:24,880 --> 00:10:28,240
then it's just going to redirect me away

00:10:26,480 --> 00:10:29,600
to the docky docks which i

00:10:28,240 --> 00:10:32,480
don't need so i'm going to close that

00:10:29,600 --> 00:10:34,000
tab okay so doku is installed

00:10:32,480 --> 00:10:35,680
the next thing i need to do is create an

00:10:34,000 --> 00:10:38,640
app on the server so

00:10:35,680 --> 00:10:40,959
if you've used heroku this will seem

00:10:38,640 --> 00:10:42,959
pretty familiar this um

00:10:40,959 --> 00:10:44,560
a lot of the commands are quite similar

00:10:42,959 --> 00:10:46,399
to you could say they've been inspired

00:10:44,560 --> 00:10:48,720
by heroku so we've created the app

00:10:46,399 --> 00:10:50,160
and now we're going to install the doku

00:10:48,720 --> 00:10:52,800
postgres plugin

00:10:50,160 --> 00:10:54,480
so docu has a concept of plugins and

00:10:52,800 --> 00:10:57,519
most of them i think they probably all

00:10:54,480 --> 00:10:59,760
are themselves docker containers again

00:10:57,519 --> 00:11:01,519
you don't really need to know that

00:10:59,760 --> 00:11:03,600
but they're ways of providing different

00:11:01,519 --> 00:11:05,519
services on your docu instance so

00:11:03,600 --> 00:11:07,519
postgres one is probably the one of the

00:11:05,519 --> 00:11:10,240
most popular ones

00:11:07,519 --> 00:11:11,200
and that means that we now have postgres

00:11:10,240 --> 00:11:15,279
11.6

00:11:11,200 --> 00:11:17,120
running on our doku instance

00:11:15,279 --> 00:11:18,880
once that has finished which shouldn't

00:11:17,120 --> 00:11:21,440
take much longer

00:11:18,880 --> 00:11:22,560
we can create our first database so we

00:11:21,440 --> 00:11:24,800
now get this postgres

00:11:22,560 --> 00:11:26,320
create command that didn't exist before

00:11:24,800 --> 00:11:28,079
because we've installed the

00:11:26,320 --> 00:11:31,200
plugin so that's going to create a

00:11:28,079 --> 00:11:33,680
database called demo hyphen db

00:11:31,200 --> 00:11:34,959
uh which will take a second and then

00:11:33,680 --> 00:11:37,600
we're going to link

00:11:34,959 --> 00:11:38,160
that demodb to your new app so we

00:11:37,600 --> 00:11:39,360
created an

00:11:38,160 --> 00:11:41,600
app called demo app and we're going to

00:11:39,360 --> 00:11:43,200
link the database to it and again this

00:11:41,600 --> 00:11:46,800
is a bit like

00:11:43,200 --> 00:11:50,160
how how heroku works

00:11:46,800 --> 00:11:51,120
where you make these variables like the

00:11:50,160 --> 00:11:54,399
database url

00:11:51,120 --> 00:11:55,519
available to your apps okay so that's

00:11:54,399 --> 00:11:57,839
all done

00:11:55,519 --> 00:11:59,519
um something worth knowing about doku

00:11:57,839 --> 00:12:00,160
and in fact lots of these kind of modern

00:11:59,519 --> 00:12:01,839
services

00:12:00,160 --> 00:12:03,440
and heroku similar anything where you're

00:12:01,839 --> 00:12:04,880
using docker generally

00:12:03,440 --> 00:12:06,639
is that they are ephemeral that means

00:12:04,880 --> 00:12:08,240
that every time you deploy them they're

00:12:06,639 --> 00:12:09,760
recreated from scratch

00:12:08,240 --> 00:12:12,160
which feels a bit weird when you're used

00:12:09,760 --> 00:12:14,079
to it um but it turns out to be a good

00:12:12,160 --> 00:12:16,240
thing and it helps you design your

00:12:14,079 --> 00:12:17,519
your application in i think in a correct

00:12:16,240 --> 00:12:19,680
way so uh

00:12:17,519 --> 00:12:21,360
follows this this set of rules

00:12:19,680 --> 00:12:22,800
principles called the 12-factor design

00:12:21,360 --> 00:12:23,440
which you may have come across i i

00:12:22,800 --> 00:12:26,240
recommend

00:12:23,440 --> 00:12:28,079
looking about um but it means that uh if

00:12:26,240 --> 00:12:29,920
you for example if your app has

00:12:28,079 --> 00:12:31,760
user content you are you have a content

00:12:29,920 --> 00:12:34,800
management system and you're uploading

00:12:31,760 --> 00:12:36,480
images then um they're going to be lost

00:12:34,800 --> 00:12:37,680
every time you redeploy which is no good

00:12:36,480 --> 00:12:39,440
so we need to have some sort of

00:12:37,680 --> 00:12:40,720
persistent storage

00:12:39,440 --> 00:12:42,880
so one approach might be used something

00:12:40,720 --> 00:12:45,279
like s3 but um

00:12:42,880 --> 00:12:46,079
doku has a an option for this as well so

00:12:45,279 --> 00:12:48,079
you

00:12:46,079 --> 00:12:51,120
will create a directory and then we're

00:12:48,079 --> 00:12:51,120
going to mount it

00:12:51,279 --> 00:12:57,600
inside doku giving it the name

00:12:54,480 --> 00:13:00,320
um and we again we're going to make that

00:12:57,600 --> 00:13:01,600
available as a variable called media

00:13:00,320 --> 00:13:02,480
root which our application is going to

00:13:01,600 --> 00:13:04,399
need to listen

00:13:02,480 --> 00:13:05,920
on right our application that we've

00:13:04,399 --> 00:13:06,720
built so far so this is going back into

00:13:05,920 --> 00:13:10,240
the white

00:13:06,720 --> 00:13:12,959
tab where we built our application um

00:13:10,240 --> 00:13:13,920
that because it's a like a jagger app

00:13:12,959 --> 00:13:17,440
doesn't

00:13:13,920 --> 00:13:19,360
use postgres by default so we need to

00:13:17,440 --> 00:13:23,120
make sure the postgres is installed

00:13:19,360 --> 00:13:26,639
and that it's in our requirements.txt

00:13:23,120 --> 00:13:30,000
and then we need to tell our

00:13:26,639 --> 00:13:30,000
app using settings

00:13:30,480 --> 00:13:35,200
to use

00:13:33,519 --> 00:13:36,880
these variables that are now available

00:13:35,200 --> 00:13:38,240
so we now have this database url and

00:13:36,880 --> 00:13:41,680
media root

00:13:38,240 --> 00:13:42,959
available so i'm going to add those just

00:13:41,680 --> 00:13:44,240
plonk them at the bottom of the file

00:13:42,959 --> 00:13:45,839
which isn't really best practice but

00:13:44,240 --> 00:13:49,120
it's fine for now

00:13:45,839 --> 00:13:51,680
okay so we now have our app and we

00:13:49,120 --> 00:13:53,120
have installed doku now we're going to

00:13:51,680 --> 00:13:56,800
do our first deploy so

00:13:53,120 --> 00:13:58,399
deployments in doku are all about git

00:13:56,800 --> 00:14:00,079
so we're going to create our git

00:13:58,399 --> 00:14:03,839
repository add everything to it

00:14:00,079 --> 00:14:03,839
first commit and then we're going to

00:14:04,320 --> 00:14:08,320
make a new remote and i need to put in

00:14:06,800 --> 00:14:12,000
the ip address of our

00:14:08,320 --> 00:14:14,880
server which should be somewhere in my

00:14:12,000 --> 00:14:16,399
clipboard history there we go and adding

00:14:14,880 --> 00:14:19,760
a new remote called doku

00:14:16,399 --> 00:14:22,160
and then the final step is to get push

00:14:19,760 --> 00:14:23,600
to doku this is the bit that's going to

00:14:22,160 --> 00:14:25,199
take a minute or two

00:14:23,600 --> 00:14:26,880
and while that's happening i can just

00:14:25,199 --> 00:14:28,480
kind of recap a bit on what we've got to

00:14:26,880 --> 00:14:30,079
do so far

00:14:28,480 --> 00:14:31,680
and i've got actually some slides to

00:14:30,079 --> 00:14:34,160
kind of help us think about this so

00:14:31,680 --> 00:14:34,720
we made a simple django site we

00:14:34,160 --> 00:14:38,079
installed

00:14:34,720 --> 00:14:40,480
doku on a vm using those two lines

00:14:38,079 --> 00:14:41,360
we enabled postgres in that docker

00:14:40,480 --> 00:14:45,040
instance

00:14:41,360 --> 00:14:45,440
we added persistent storage and we just

00:14:45,040 --> 00:14:49,040
ran

00:14:45,440 --> 00:14:50,720
git push to deploy so the um

00:14:49,040 --> 00:14:52,720
the the making it simple jango site is

00:14:50,720 --> 00:14:54,399
what you do normally installing doku

00:14:52,720 --> 00:14:55,760
and the postgres things are one time

00:14:54,399 --> 00:14:57,519
only um

00:14:55,760 --> 00:14:59,279
after that and and the persistent

00:14:57,519 --> 00:15:00,639
storage is probably for each app and

00:14:59,279 --> 00:15:01,199
then the git push to deploy is what you

00:15:00,639 --> 00:15:04,000
do for

00:15:01,199 --> 00:15:04,800
for all your apps afterwards so we can

00:15:04,000 --> 00:15:07,760
see what's happening

00:15:04,800 --> 00:15:08,399
now we pushed that up to doku and doku

00:15:07,760 --> 00:15:10,800
immediately

00:15:08,399 --> 00:15:11,440
saw the docker file that existed in our

00:15:10,800 --> 00:15:14,000
in our

00:15:11,440 --> 00:15:15,600
app and uh so understood what to do with

00:15:14,000 --> 00:15:17,519
it so it um

00:15:15,600 --> 00:15:18,639
it's following the instructions in the

00:15:17,519 --> 00:15:20,240
docker file it's

00:15:18,639 --> 00:15:22,560
currently now installing all the

00:15:20,240 --> 00:15:23,519
contents of requirements.txt

00:15:22,560 --> 00:15:26,720
so all those things are going to be

00:15:23,519 --> 00:15:30,639
available to our app

00:15:26,720 --> 00:15:33,600
it will link up the

00:15:30,639 --> 00:15:35,120
postgres database hopefully and make

00:15:33,600 --> 00:15:36,959
that available to our app

00:15:35,120 --> 00:15:40,079
and once it's happy that everything's

00:15:36,959 --> 00:15:42,639
there it will deploy it

00:15:40,079 --> 00:15:44,079
and one of the things that doku does is

00:15:42,639 --> 00:15:44,639
check that everything's working before

00:15:44,079 --> 00:15:49,680
it makes the

00:15:44,639 --> 00:15:52,720
before it deploys it live which is um

00:15:49,680 --> 00:15:54,480
really a valuable step but it does

00:15:52,720 --> 00:15:56,079
slightly slow things down and you can do

00:15:54,480 --> 00:15:56,560
it in a more intelligent way if you like

00:15:56,079 --> 00:16:00,320
by

00:15:56,560 --> 00:16:03,680
creating your own custom checks

00:16:00,320 --> 00:16:05,120
um this

00:16:03,680 --> 00:16:07,279
isn't the most interesting part while

00:16:05,120 --> 00:16:10,560
it's just uh waiting to see

00:16:07,279 --> 00:16:12,560
what the installation part is um

00:16:10,560 --> 00:16:14,160
and then but now it's doing the

00:16:12,560 --> 00:16:16,000
deployment so uh

00:16:14,160 --> 00:16:17,199
these steps will look familiar to anyone

00:16:16,000 --> 00:16:20,880
who's done

00:16:17,199 --> 00:16:22,560
docker before um and maybe this is just

00:16:20,880 --> 00:16:24,160
well this takes another 30 seconds i

00:16:22,560 --> 00:16:28,079
could just start talking a bit about

00:16:24,160 --> 00:16:29,600
docker which is um uh we don't have time

00:16:28,079 --> 00:16:31,199
in this talk to kind of go into

00:16:29,600 --> 00:16:32,959
information on just kind of full

00:16:31,199 --> 00:16:35,680
background on docker

00:16:32,959 --> 00:16:36,399
but docker is a a way of packaging up

00:16:35,680 --> 00:16:39,680
your

00:16:36,399 --> 00:16:41,440
your applications um you know it's a

00:16:39,680 --> 00:16:43,519
in a like a very lightweight virtual

00:16:41,440 --> 00:16:45,040
machine and uh it's increasingly

00:16:43,519 --> 00:16:46,880
becoming a standard for

00:16:45,040 --> 00:16:48,959
deploying your applications across lots

00:16:46,880 --> 00:16:51,839
of different systems

00:16:48,959 --> 00:16:53,440
uh and it also can be used useful for

00:16:51,839 --> 00:16:54,959
local development

00:16:53,440 --> 00:16:57,120
so when you create a wagtail site it

00:16:54,959 --> 00:16:58,320
creates a simple dockerfile for you

00:16:57,120 --> 00:16:59,680
but there are other ways of doing that

00:16:58,320 --> 00:17:01,120
so if you have a django app if you

00:16:59,680 --> 00:17:02,399
follow for example one of the cookie

00:17:01,120 --> 00:17:04,959
cutter steps

00:17:02,399 --> 00:17:06,400
then the the cookie cutter the django

00:17:04,959 --> 00:17:06,959
cookie cutter then you'll also get a doc

00:17:06,400 --> 00:17:08,559
file

00:17:06,959 --> 00:17:10,160
so that's now finished and it's telling

00:17:08,559 --> 00:17:13,120
us that our application is deployed

00:17:10,160 --> 00:17:14,079
on a live server and we hold our breaths

00:17:13,120 --> 00:17:16,799
type it in

00:17:14,079 --> 00:17:17,600
and that that's live so we've built our

00:17:16,799 --> 00:17:21,039
site

00:17:17,600 --> 00:17:23,600
we have uh installed docker doku

00:17:21,039 --> 00:17:25,839
we have uh deployed a site to docu and

00:17:23,600 --> 00:17:26,880
it's now live however there are no news

00:17:25,839 --> 00:17:29,039
items on it

00:17:26,880 --> 00:17:30,080
because we haven't created any content

00:17:29,039 --> 00:17:31,679
on that one yet

00:17:30,080 --> 00:17:33,360
so we're going to need to run a couple

00:17:31,679 --> 00:17:35,280
of tasks

00:17:33,360 --> 00:17:36,880
and this is back on the server we're

00:17:35,280 --> 00:17:38,799
going to run a management task and you

00:17:36,880 --> 00:17:40,640
can see the syntax for this is

00:17:38,799 --> 00:17:42,559
pretty much like the normal manager pi

00:17:40,640 --> 00:17:44,400
but you you start it with doku run and

00:17:42,559 --> 00:17:49,120
then you specify the name of the app

00:17:44,400 --> 00:17:49,120
it takes a few seconds um longer than

00:17:49,760 --> 00:17:53,200
uh than a normal management task because

00:17:51,520 --> 00:17:55,520
it has to spin up a container

00:17:53,200 --> 00:17:57,440
quickly in order to make that available

00:17:55,520 --> 00:18:00,240
and then similarly we're gonna

00:17:57,440 --> 00:18:01,840
create some fake items just like we did

00:18:00,240 --> 00:18:04,799
before but this time we're running it on

00:18:01,840 --> 00:18:06,320
doku so again a few seconds for it to be

00:18:04,799 --> 00:18:08,880
out the container and then it

00:18:06,320 --> 00:18:11,120
starts creating all those fake items so

00:18:08,880 --> 00:18:14,480
now if we look again

00:18:11,120 --> 00:18:18,000
in on that one but on our live server

00:18:14,480 --> 00:18:20,160
and go to fake index we see

00:18:18,000 --> 00:18:22,160
all our site and all the pages that have

00:18:20,160 --> 00:18:23,120
been created and just to confirm that

00:18:22,160 --> 00:18:26,559
the admin

00:18:23,120 --> 00:18:28,000
user worked i can hopefully

00:18:26,559 --> 00:18:29,600
log in now using the details i just

00:18:28,000 --> 00:18:33,039
created

00:18:29,600 --> 00:18:36,640
and browse through wagtail

00:18:33,039 --> 00:18:40,960
and let's edit a page um

00:18:36,640 --> 00:18:43,600
maybe this first one box last resource

00:18:40,960 --> 00:18:45,360
let's check this is working explanation

00:18:43,600 --> 00:18:49,120
mark we'll change that

00:18:45,360 --> 00:18:53,120
image to audience democratic modern

00:18:49,120 --> 00:18:54,320
and uh bolden some of that and preview

00:18:53,120 --> 00:18:56,640
it

00:18:54,320 --> 00:18:58,720
and that all looks good i must say i

00:18:56,640 --> 00:19:01,280
find these uh

00:18:58,720 --> 00:19:01,760
i find these randomly generated content

00:19:01,280 --> 00:19:06,880
really

00:19:01,760 --> 00:19:06,880
intriguing and uh it makes me think

00:19:07,120 --> 00:19:10,720
sometimes it is to kind of sound really

00:19:09,280 --> 00:19:13,360
weirdly profound

00:19:10,720 --> 00:19:16,320
never direction what price might sell

00:19:13,360 --> 00:19:18,320
rate really positive

00:19:16,320 --> 00:19:20,240
sometimes feel like who needs artificial

00:19:18,320 --> 00:19:20,880
intelligence when randomness is this

00:19:20,240 --> 00:19:24,400
good

00:19:20,880 --> 00:19:26,559
okay so to recap on where we've got to

00:19:24,400 --> 00:19:27,440
we have good pusher deploy we now have a

00:19:26,559 --> 00:19:29,440
live site

00:19:27,440 --> 00:19:30,880
production ready running on our five

00:19:29,440 --> 00:19:34,480
dollar instance

00:19:30,880 --> 00:19:37,600
this could handle probably five or six

00:19:34,480 --> 00:19:39,440
reasonable sized django apps and for

00:19:37,600 --> 00:19:42,000
five dollars a month and you could

00:19:39,440 --> 00:19:44,000
get push to deploy and it's a you know

00:19:42,000 --> 00:19:46,720
pretty pretty quick process so far

00:19:44,000 --> 00:19:48,240
okay next up is static site generation

00:19:46,720 --> 00:19:50,000
there are quite a few ways of um

00:19:48,240 --> 00:19:51,280
generating a static version of your site

00:19:50,000 --> 00:19:53,600
the one i'm going to use is based on

00:19:51,280 --> 00:19:55,200
django bakery which is open sourced by

00:19:53,600 --> 00:19:57,919
the la times

00:19:55,200 --> 00:19:59,360
um in fact we're going to use wagtail

00:19:57,919 --> 00:20:01,919
bakery which is

00:19:59,360 --> 00:20:03,200
just a sort of a bit of a wrapper around

00:20:01,919 --> 00:20:06,640
django bakery that does some more

00:20:03,200 --> 00:20:10,080
convenient things for wagtail sites

00:20:06,640 --> 00:20:12,159
so install that editor requirements.txt

00:20:10,080 --> 00:20:13,840
and then make a few changes to our

00:20:12,159 --> 00:20:18,840
settings again

00:20:13,840 --> 00:20:20,240
demo settings based on pi add it to the

00:20:18,840 --> 00:20:22,960
bottom

00:20:20,240 --> 00:20:23,919
um so we're adding bakery in whitetail

00:20:22,960 --> 00:20:26,240
bakery

00:20:23,919 --> 00:20:27,200
we're telling it to build out to temp

00:20:26,240 --> 00:20:28,799
slash dist

00:20:27,200 --> 00:20:30,559
and we're saying that we want all our

00:20:28,799 --> 00:20:32,000
published pages those are going to be

00:20:30,559 --> 00:20:34,880
the pages that we want

00:20:32,000 --> 00:20:37,440
to be live and this um gives us a new

00:20:34,880 --> 00:20:40,559
management command

00:20:37,440 --> 00:20:42,960
build and build will

00:20:40,559 --> 00:20:45,120
take that view and create published

00:20:42,960 --> 00:20:47,520
versions of all those pages

00:20:45,120 --> 00:20:49,600
uh usually takes about five or six when

00:20:47,520 --> 00:20:53,200
they said that could sit nine seconds

00:20:49,600 --> 00:20:57,280
um and so if i now uh

00:20:53,200 --> 00:21:00,559
check in my uh what do we say

00:20:57,280 --> 00:21:00,559
temp slash dist

00:21:00,720 --> 00:21:03,840
there we can see we have it's created

00:21:03,120 --> 00:21:06,159
some

00:21:03,840 --> 00:21:08,799
pages and we can see for each of those

00:21:06,159 --> 00:21:11,919
pages it's created a directory

00:21:08,799 --> 00:21:13,760
and a page inside it so it's got we now

00:21:11,919 --> 00:21:15,600
have static content for all those pages

00:21:13,760 --> 00:21:17,039
which is great but it's just running on

00:21:15,600 --> 00:21:18,400
our laptop still on our development

00:21:17,039 --> 00:21:18,960
environment so now we need to publish

00:21:18,400 --> 00:21:22,159
that

00:21:18,960 --> 00:21:23,200
for that i'm going to use netlify and

00:21:22,159 --> 00:21:25,120
there are lots of other ways we could do

00:21:23,200 --> 00:21:27,679
this but netlify

00:21:25,120 --> 00:21:29,760
is uh would neglifies a lot of benefits

00:21:27,679 --> 00:21:31,919
so it's an excellent service and you

00:21:29,760 --> 00:21:34,400
you can install the command line version

00:21:31,919 --> 00:21:35,760
like this i've done that already

00:21:34,400 --> 00:21:38,559
but you can do that it'll just take you

00:21:35,760 --> 00:21:42,400
a couple of minutes and um

00:21:38,559 --> 00:21:43,679
now i'm going to go into that directory

00:21:42,400 --> 00:21:45,440
so this is the one with all the

00:21:43,679 --> 00:21:48,640
statically generated content

00:21:45,440 --> 00:21:49,919
and i'm going to run netlify init so

00:21:48,640 --> 00:21:51,120
the first time you do this you'll

00:21:49,919 --> 00:21:52,240
probably need to authenticate and you

00:21:51,120 --> 00:21:53,280
can do that against your github

00:21:52,240 --> 00:21:55,120
credentials

00:21:53,280 --> 00:21:56,720
uh i've done it already so i can just go

00:21:55,120 --> 00:22:01,679
ahead like this

00:21:56,720 --> 00:22:04,720
choose my team uh hello

00:22:01,679 --> 00:22:07,280
con you hope no one has used that before

00:22:04,720 --> 00:22:07,919
yes so that insight has now been created

00:22:07,280 --> 00:22:11,200
um

00:22:07,919 --> 00:22:11,200
but now i need to deploy

00:22:11,440 --> 00:22:15,039
so the first one was just creating the

00:22:13,440 --> 00:22:16,000
site i'm going to do from this current

00:22:15,039 --> 00:22:18,000
directory

00:22:16,000 --> 00:22:19,600
it's going to check and see if there are

00:22:18,000 --> 00:22:21,039
any files exist out there

00:22:19,600 --> 00:22:22,640
so already and they don't because it's

00:22:21,039 --> 00:22:24,799
the first time we've done it and then

00:22:22,640 --> 00:22:27,840
it's going to push all those files up

00:22:24,799 --> 00:22:30,480
and once that's done it is hopefully

00:22:27,840 --> 00:22:31,919
going to deploy them and this is

00:22:30,480 --> 00:22:34,159
normally super quick

00:22:31,919 --> 00:22:35,360
uh waiting for deploy to go live just

00:22:34,159 --> 00:22:37,039
while that's going i'll show you what

00:22:35,360 --> 00:22:40,320
the ui looks like

00:22:37,039 --> 00:22:43,679
in netlify on the web ui

00:22:40,320 --> 00:22:45,200
so here i'm now seeing the manual deploy

00:22:43,679 --> 00:22:47,919
so that's now being created

00:22:45,200 --> 00:22:49,360
the site's not being deployed as we know

00:22:47,919 --> 00:22:50,960
um

00:22:49,360 --> 00:22:53,919
this is sort of hanging at that last

00:22:50,960 --> 00:22:55,760
minute so i'm going to do the classic

00:22:53,919 --> 00:22:57,600
turn off and turn it on again

00:22:55,760 --> 00:22:58,640
stop it and try and start again this i'm

00:22:57,600 --> 00:23:00,159
going to do prod which is going to make

00:22:58,640 --> 00:23:02,400
it go live straight away it's

00:23:00,159 --> 00:23:04,880
usually a separate step but uh this time

00:23:02,400 --> 00:23:07,200
i'm just going to do it one grade

00:23:04,880 --> 00:23:08,400
this time we're getting some nice emojis

00:23:07,200 --> 00:23:10,880
that we didn't get last time which is a

00:23:08,400 --> 00:23:10,880
bit odd

00:23:11,520 --> 00:23:16,400
um and this step uh once it goes live

00:23:14,799 --> 00:23:18,559
should give us a static version of the

00:23:16,400 --> 00:23:22,080
site hosted on netlify which

00:23:18,559 --> 00:23:24,480
has its own collection of um

00:23:22,080 --> 00:23:25,840
cdns and works across clouds and has a

00:23:24,480 --> 00:23:27,840
lot of other interesting features

00:23:25,840 --> 00:23:29,360
particularly around things like um

00:23:27,840 --> 00:23:32,159
serverless functions

00:23:29,360 --> 00:23:34,480
and authentication and so on um which

00:23:32,159 --> 00:23:35,679
we're not going to go into in this talk

00:23:34,480 --> 00:23:37,679
i'm hoping that's going to finish a

00:23:35,679 --> 00:23:40,400
minute i can do a bit kind of uh

00:23:37,679 --> 00:23:41,760
celebratory ta-da if it doesn't i'm

00:23:40,400 --> 00:23:44,080
going to have to wait

00:23:41,760 --> 00:23:46,000
and go back to a previous one to show

00:23:44,080 --> 00:23:49,840
that i that it is working so

00:23:46,000 --> 00:23:50,960
this is one i did just slightly before

00:23:49,840 --> 00:23:52,559
and uh

00:23:50,960 --> 00:23:54,960
click on it here and you can see now

00:23:52,559 --> 00:23:58,480
this is running on netlify.app

00:23:54,960 --> 00:24:00,240
and all these pages are available so

00:23:58,480 --> 00:24:01,840
the content of our django site the

00:24:00,240 --> 00:24:03,520
output of our django site

00:24:01,840 --> 00:24:05,919
is now running on netlife you can see on

00:24:03,520 --> 00:24:08,960
netflight app netify knows nothing about

00:24:05,919 --> 00:24:10,960
django or python or databases

00:24:08,960 --> 00:24:12,080
it's hosting the static pages but it's

00:24:10,960 --> 00:24:14,320
doing them in a very

00:24:12,080 --> 00:24:15,919
efficient way and it also interests me a

00:24:14,320 --> 00:24:17,279
very cheap way

00:24:15,919 --> 00:24:18,799
that one hasn't gone live so it's lucky

00:24:17,279 --> 00:24:20,799
i had that back up for me hopefully it

00:24:18,799 --> 00:24:23,679
will do before the end of my talk

00:24:20,799 --> 00:24:24,480
so you'll believe me okay so where have

00:24:23,679 --> 00:24:27,360
we got to

00:24:24,480 --> 00:24:28,640
uh live demo two we generated our static

00:24:27,360 --> 00:24:30,640
pages we used um

00:24:28,640 --> 00:24:31,919
we used django bakery but there's a few

00:24:30,640 --> 00:24:33,679
other approaches we could have used too

00:24:31,919 --> 00:24:36,799
we installed netlify

00:24:33,679 --> 00:24:38,640
and we deployed to netlify and uh

00:24:36,799 --> 00:24:40,640
great next one then the final one of

00:24:38,640 --> 00:24:42,480
this demo is using

00:24:40,640 --> 00:24:43,840
google cloud so like i said before this

00:24:42,480 --> 00:24:45,760
is a new product

00:24:43,840 --> 00:24:46,880
newish product recently come out of beta

00:24:45,760 --> 00:24:49,279
from google

00:24:46,880 --> 00:24:49,919
and called cloud run and you have to

00:24:49,279 --> 00:24:52,960
start by

00:24:49,919 --> 00:24:55,039
installing the google cloud sdk

00:24:52,960 --> 00:24:56,240
which i have already but you could do

00:24:55,039 --> 00:24:58,000
doesn't take too long

00:24:56,240 --> 00:24:59,760
cancel that one now so we can go through

00:24:58,000 --> 00:25:01,440
this

00:24:59,760 --> 00:25:03,039
and then you have to create so google

00:25:01,440 --> 00:25:06,320
cloud has this concept of

00:25:03,039 --> 00:25:07,279
projects um so you can kind of group all

00:25:06,320 --> 00:25:08,720
your stuff together in different

00:25:07,279 --> 00:25:09,520
projects so

00:25:08,720 --> 00:25:12,080
this is what it looks like in the

00:25:09,520 --> 00:25:14,080
console here i've created a

00:25:12,080 --> 00:25:15,440
project called deploytalk which has that

00:25:14,080 --> 00:25:18,480
id

00:25:15,440 --> 00:25:21,840
um so i i need to

00:25:18,480 --> 00:25:21,840
tell google cloud

00:25:23,840 --> 00:25:26,640
the name of my

00:25:27,039 --> 00:25:32,320
your project um

00:25:30,320 --> 00:25:34,400
and then i you have to enable the

00:25:32,320 --> 00:25:35,360
minimum apis which i've done already

00:25:34,400 --> 00:25:37,760
that says which

00:25:35,360 --> 00:25:39,600
what bits of google cloud we want to use

00:25:37,760 --> 00:25:40,880
you have to set your project id in

00:25:39,600 --> 00:25:42,880
region that's going to be useful for

00:25:40,880 --> 00:25:45,520
some uh

00:25:42,880 --> 00:25:46,799
shell scripts later and we're going to

00:25:45,520 --> 00:25:48,240
it's this approach is going to be a

00:25:46,799 --> 00:25:51,679
little bit similar to

00:25:48,240 --> 00:25:54,640
how to the docu one where we get a

00:25:51,679 --> 00:25:55,200
docker docker image and we we submit it

00:25:54,640 --> 00:25:57,520
so

00:25:55,200 --> 00:25:59,120
now from our app this is kind of there's

00:25:57,520 --> 00:25:59,679
two key steps for this the first most of

00:25:59,120 --> 00:26:01,520
it is kind of

00:25:59,679 --> 00:26:03,039
boilerplate really this is the first key

00:26:01,520 --> 00:26:04,080
step where we're going to take our

00:26:03,039 --> 00:26:04,960
current app actually we're not going to

00:26:04,080 --> 00:26:08,480
do this now because i'm in the wrong

00:26:04,960 --> 00:26:08,480
place i need to go back to my

00:26:08,840 --> 00:26:13,360
uh demo app

00:26:11,840 --> 00:26:16,000
uh and we're gonna take this current

00:26:13,360 --> 00:26:18,640
directory and submit it

00:26:16,000 --> 00:26:20,000
as a submit a build for it so it's gonna

00:26:18,640 --> 00:26:22,400
create a docker image

00:26:20,000 --> 00:26:24,240
based on the contents of my directory

00:26:22,400 --> 00:26:25,760
which apparently i've got about 19

00:26:24,240 --> 00:26:29,200
gigabytes in total

00:26:25,760 --> 00:26:32,240
and it's going to push all that up to to

00:26:29,200 --> 00:26:34,320
google cloud's image storage and

00:26:32,240 --> 00:26:36,559
make it available for other services to

00:26:34,320 --> 00:26:36,559
use

00:26:37,600 --> 00:26:42,080
we had this first step called use can

00:26:40,000 --> 00:26:44,480
eco which is quite a recent feature

00:26:42,080 --> 00:26:45,760
uh it's a strange name but it basically

00:26:44,480 --> 00:26:48,400
enables caching

00:26:45,760 --> 00:26:50,159
of your build step so you can see in

00:26:48,400 --> 00:26:51,600
some of the lines coming up here that

00:26:50,159 --> 00:26:53,440
uh this build is quicker than it would

00:26:51,600 --> 00:26:56,320
have been otherwise because uh

00:26:53,440 --> 00:26:58,400
it's i've done it once before and uh

00:26:56,320 --> 00:27:01,120
everything that hasn't changed in my app

00:26:58,400 --> 00:27:03,039
can just be reused from the cached

00:27:01,120 --> 00:27:05,520
layers

00:27:03,039 --> 00:27:06,559
um so having done all that and run

00:27:05,520 --> 00:27:09,679
manage.pi

00:27:06,559 --> 00:27:12,240
it's creating that uh

00:27:09,679 --> 00:27:13,200
adding all this to the cache and uh it's

00:27:12,240 --> 00:27:14,799
gonna put the

00:27:13,200 --> 00:27:17,120
the whole image make the whole image

00:27:14,799 --> 00:27:19,520
available for us to deploy

00:27:17,120 --> 00:27:20,480
there we go done took 48 seconds so it's

00:27:19,520 --> 00:27:23,200
created this

00:27:20,480 --> 00:27:23,919
image and the final step is to deploy

00:27:23,200 --> 00:27:27,120
that image

00:27:23,919 --> 00:27:28,320
so i'm going to paste this in and then

00:27:27,120 --> 00:27:30,640
and run it and then i'm going to tell

00:27:28,320 --> 00:27:33,120
you what it means so

00:27:30,640 --> 00:27:35,440
we are saying gcloud is the general term

00:27:33,120 --> 00:27:38,000
run is because this is about

00:27:35,440 --> 00:27:38,640
google cloud run the action is deploy

00:27:38,000 --> 00:27:40,640
and

00:27:38,640 --> 00:27:42,480
demo app cloud run is the name of the

00:27:40,640 --> 00:27:44,640
service that we want to deploy

00:27:42,480 --> 00:27:46,240
and it's going to deploy a service from

00:27:44,640 --> 00:27:48,159
this image which is the one that we just

00:27:46,240 --> 00:27:48,799
uploaded before so we created an image

00:27:48,159 --> 00:27:52,240
for demo

00:27:48,799 --> 00:27:54,880
image and we're now deploying it

00:27:52,240 --> 00:27:55,440
and this should be fairly quick because

00:27:54,880 --> 00:27:58,960
uh

00:27:55,440 --> 00:28:01,520
google run service just needs to to

00:27:58,960 --> 00:28:03,120
fetch that image from locally from

00:28:01,520 --> 00:28:05,919
elsewhere in the google cloud

00:28:03,120 --> 00:28:06,399
and create a revision for it and that is

00:28:05,919 --> 00:28:09,279
now

00:28:06,399 --> 00:28:10,159
done so and it a bit like netflix signs

00:28:09,279 --> 00:28:14,080
you

00:28:10,159 --> 00:28:15,840
a new url and paste that in

00:28:14,080 --> 00:28:17,200
and hit enter and then one thing you'll

00:28:15,840 --> 00:28:20,240
notice here is that this

00:28:17,200 --> 00:28:23,120
is slow and um

00:28:20,240 --> 00:28:23,600
this is there's the this is because of

00:28:23,120 --> 00:28:25,200
um

00:28:23,600 --> 00:28:26,720
one of the issues with serverlessness

00:28:25,200 --> 00:28:29,440
generally is this

00:28:26,720 --> 00:28:30,080
so-called cold starts and cold starts

00:28:29,440 --> 00:28:32,159
are because

00:28:30,080 --> 00:28:34,080
in this case when we the first time we

00:28:32,159 --> 00:28:37,279
request the app it has to

00:28:34,080 --> 00:28:39,120
uh has to start that container

00:28:37,279 --> 00:28:40,559
and this container is a rather

00:28:39,120 --> 00:28:44,080
inefficient container

00:28:40,559 --> 00:28:46,799
because um uh the way that the

00:28:44,080 --> 00:28:48,799
docker file works in that you get out of

00:28:46,799 --> 00:28:50,080
the box in wagtail it runs a migration

00:28:48,799 --> 00:28:51,360
just to make sure that your database is

00:28:50,080 --> 00:28:52,640
up to date which you don't

00:28:51,360 --> 00:28:54,320
you really don't want to run all your

00:28:52,640 --> 00:28:55,360
migrations the first time anyone

00:28:54,320 --> 00:28:58,640
requests your

00:28:55,360 --> 00:29:00,880
site of course it's uh then and there's

00:28:58,640 --> 00:29:02,559
a lot you can do to optimize that so

00:29:00,880 --> 00:29:04,159
that's not kind of best practice for

00:29:02,559 --> 00:29:05,279
production docker files and actually you

00:29:04,159 --> 00:29:07,919
should move that

00:29:05,279 --> 00:29:09,120
that step out of your uh docker file

00:29:07,919 --> 00:29:10,399
which um

00:29:09,120 --> 00:29:12,320
and there's lots of good documentation

00:29:10,399 --> 00:29:15,279
on on how to do that

00:29:12,320 --> 00:29:16,000
once you once it is up and running then

00:29:15,279 --> 00:29:17,440
uh

00:29:16,000 --> 00:29:19,279
google cloud does a really good job of

00:29:17,440 --> 00:29:20,480
preventing cold starts afterwards but

00:29:19,279 --> 00:29:22,320
for that first one

00:29:20,480 --> 00:29:23,600
uh you want to find ways of reducing

00:29:22,320 --> 00:29:25,919
that cold start

00:29:23,600 --> 00:29:27,120
so we now have our set that same app

00:29:25,919 --> 00:29:28,399
running in i think three different

00:29:27,120 --> 00:29:31,279
places we have it on

00:29:28,399 --> 00:29:31,840
doku we have it on netlify and we have

00:29:31,279 --> 00:29:35,120
it on

00:29:31,840 --> 00:29:38,960
cloud run let me just quickly show you

00:29:35,120 --> 00:29:40,559
how that looks on cloud run in their ui

00:29:38,960 --> 00:29:42,399
this is a couple of interesting things

00:29:40,559 --> 00:29:44,640
about uh the setup here

00:29:42,399 --> 00:29:46,640
also i find that this ui quite slow

00:29:44,640 --> 00:29:48,640
sometimes um

00:29:46,640 --> 00:29:50,240
uh that'd be a shame if that doesn't

00:29:48,640 --> 00:29:50,880
come up quickly while it's going i'm

00:29:50,240 --> 00:29:52,720
just gonna

00:29:50,880 --> 00:29:54,399
recap on what we've done we installed

00:29:52,720 --> 00:29:55,840
the gcloud cli that made this possible

00:29:54,399 --> 00:29:58,399
we built an image

00:29:55,840 --> 00:29:59,440
uh by and we pushed it up to google

00:29:58,399 --> 00:30:01,440
cloud storage

00:29:59,440 --> 00:30:03,360
and then we deployed it to google cloud

00:30:01,440 --> 00:30:06,799
run

00:30:03,360 --> 00:30:10,159
and this is still loading sometimes you

00:30:06,799 --> 00:30:10,159
just give it a little tweak

00:30:10,480 --> 00:30:13,600
the thing i wanted to show you here is

00:30:12,799 --> 00:30:16,480
um

00:30:13,600 --> 00:30:18,159
how uh you can configure your the

00:30:16,480 --> 00:30:19,120
scaling of your instances which i think

00:30:18,159 --> 00:30:21,600
is the really

00:30:19,120 --> 00:30:23,360
interesting thing about google cloud run

00:30:21,600 --> 00:30:27,679
is the way that it scales

00:30:23,360 --> 00:30:30,960
not just upwards so you can scale to

00:30:27,679 --> 00:30:32,640
uh a thousand by default it's a thousand

00:30:30,960 --> 00:30:35,120
instances of your container each one of

00:30:32,640 --> 00:30:39,360
which by default

00:30:35,120 --> 00:30:41,840
um can handle 80 concurrent requests

00:30:39,360 --> 00:30:43,520
but also it scales to zero so here's the

00:30:41,840 --> 00:30:45,200
revision i just created

00:30:43,520 --> 00:30:46,559
for my next one i could set some other

00:30:45,200 --> 00:30:47,919
variables like

00:30:46,559 --> 00:30:49,279
how much memory so this is currently

00:30:47,919 --> 00:30:50,480
running on a tiny amount of memory so

00:30:49,279 --> 00:30:52,559
i'd probably want more like

00:30:50,480 --> 00:30:54,000
half a gig and i could change the number

00:30:52,559 --> 00:30:56,080
of cpus

00:30:54,000 --> 00:30:57,200
uh and like say how many requests i have

00:30:56,080 --> 00:30:58,320
but this is i think the really

00:30:57,200 --> 00:31:00,640
interesting part

00:30:58,320 --> 00:31:02,080
so this will currently scale up to a

00:31:00,640 --> 00:31:03,360
thousand instances

00:31:02,080 --> 00:31:04,559
if you need them without you having to

00:31:03,360 --> 00:31:05,440
do anything just as your traffic

00:31:04,559 --> 00:31:07,600
increases

00:31:05,440 --> 00:31:09,440
it will create new instances when it

00:31:07,600 --> 00:31:10,080
needs them but also it will scale down

00:31:09,440 --> 00:31:12,240
to zero

00:31:10,080 --> 00:31:13,279
and i gave a talk about serverlessness

00:31:12,240 --> 00:31:14,880
in in

00:31:13,279 --> 00:31:16,399
florence i think three years ago was it

00:31:14,880 --> 00:31:18,320
two or three years ago and

00:31:16,399 --> 00:31:19,519
i talked about this idea of turning the

00:31:18,320 --> 00:31:20,960
lights off when you leave the room which

00:31:19,519 --> 00:31:23,840
i think is one of the most interesting

00:31:20,960 --> 00:31:25,440
aspects of of serverlessness that um

00:31:23,840 --> 00:31:28,080
when people aren't on your site

00:31:25,440 --> 00:31:28,799
it's kind of not financial or ecological

00:31:28,080 --> 00:31:30,720
sense

00:31:28,799 --> 00:31:32,080
to keep that server running and that's

00:31:30,720 --> 00:31:33,679
that's what i like about this sort of

00:31:32,080 --> 00:31:35,840
service approach is that

00:31:33,679 --> 00:31:37,120
you are only paying when people are

00:31:35,840 --> 00:31:38,720
hitting your site in this and

00:31:37,120 --> 00:31:40,320
this the servers are even only alive

00:31:38,720 --> 00:31:41,760
when you're hitting them so i think

00:31:40,320 --> 00:31:43,679
scaling to zero is a kind of really

00:31:41,760 --> 00:31:45,039
interesting component of all this

00:31:43,679 --> 00:31:46,960
all right i want to talk very in the

00:31:45,039 --> 00:31:48,159
last remaining minutes very briefly

00:31:46,960 --> 00:31:49,360
about the pros and cons of these

00:31:48,159 --> 00:31:52,000
different approaches so

00:31:49,360 --> 00:31:53,279
doku i think this is the easiest way of

00:31:52,000 --> 00:31:54,960
getting your site into production so we

00:31:53,279 --> 00:31:56,799
did it i think in under 10 minutes this

00:31:54,960 --> 00:31:58,480
is a standard django site

00:31:56,799 --> 00:32:00,640
you can go live in 10 minutes if you

00:31:58,480 --> 00:32:03,200
have a linux box available a five dollar

00:32:00,640 --> 00:32:04,960
linux box it also encourages good coding

00:32:03,200 --> 00:32:06,480
practices so this is that 12 factor

00:32:04,960 --> 00:32:08,000
design i talked about before and it's

00:32:06,480 --> 00:32:10,159
super cheap you can run

00:32:08,000 --> 00:32:11,519
a few django sites for five dollars a

00:32:10,159 --> 00:32:13,039
month and these are like you know that

00:32:11,519 --> 00:32:15,039
you can do this in production and we've

00:32:13,039 --> 00:32:16,480
done this successfully at torchbox

00:32:15,039 --> 00:32:18,559
on the other hand doku doesn't have

00:32:16,480 --> 00:32:20,559
horizontal scaling so

00:32:18,559 --> 00:32:22,720
if you need to handle if you need more

00:32:20,559 --> 00:32:23,600
instances you can't you can't have lots

00:32:22,720 --> 00:32:26,640
of doku

00:32:23,600 --> 00:32:27,279
instances left next to each other and in

00:32:26,640 --> 00:32:28,880
a similar way

00:32:27,279 --> 00:32:30,559
it's no redundancy if the hard disk dies

00:32:28,880 --> 00:32:30,960
on your machine then all your sites will

00:32:30,559 --> 00:32:33,840
go

00:32:30,960 --> 00:32:34,720
the infrastructure is on you static site

00:32:33,840 --> 00:32:36,720
generation

00:32:34,720 --> 00:32:38,320
the pros are pretty convincing it's the

00:32:36,720 --> 00:32:40,480
cheapest way to host your site it's the

00:32:38,320 --> 00:32:42,640
you cannot be faster than a static

00:32:40,480 --> 00:32:43,760
site and you cannot hack a static site

00:32:42,640 --> 00:32:45,360
so it's you know it's

00:32:43,760 --> 00:32:47,600
it's pretty compelling for all these

00:32:45,360 --> 00:32:49,200
reasons um

00:32:47,600 --> 00:32:50,799
on the other hand you get this build

00:32:49,200 --> 00:32:52,000
time delay so if you have a really big

00:32:50,799 --> 00:32:53,200
site and you have to generate static

00:32:52,000 --> 00:32:54,320
version each time then there's a there

00:32:53,200 --> 00:32:55,840
can be a pause between

00:32:54,320 --> 00:32:57,200
making the content and having it live

00:32:55,840 --> 00:32:59,440
there are more moving parts because you

00:32:57,200 --> 00:33:00,960
need a django server and a static site

00:32:59,440 --> 00:33:02,960
server like netlify

00:33:00,960 --> 00:33:04,480
and it may not suit your app so it works

00:33:02,960 --> 00:33:06,480
well for

00:33:04,480 --> 00:33:08,240
kind of static like a content manager

00:33:06,480 --> 00:33:09,600
type sites but if you need

00:33:08,240 --> 00:33:11,200
personalization where you have logins or

00:33:09,600 --> 00:33:13,039
lots of forms then it's probably not

00:33:11,200 --> 00:33:16,240
going to be the approach for you

00:33:13,039 --> 00:33:18,720
on the google run side it scales forever

00:33:16,240 --> 00:33:20,320
not quite forever but if you have if you

00:33:18,720 --> 00:33:21,440
need more than a thousand instances

00:33:20,320 --> 00:33:23,279
handling 80

00:33:21,440 --> 00:33:25,440
concurrent users each then you've got

00:33:23,279 --> 00:33:26,399
bigger problems it scales to zero as i

00:33:25,440 --> 00:33:27,600
mentioned before i think that's really

00:33:26,399 --> 00:33:30,159
important and

00:33:27,600 --> 00:33:31,279
it's the future that's a bit glib but i

00:33:30,159 --> 00:33:34,799
do think this model

00:33:31,279 --> 00:33:37,120
is is in is the way that uh

00:33:34,799 --> 00:33:38,320
that app hosting is gonna go on the

00:33:37,120 --> 00:33:38,960
other hand you have to deal with cold

00:33:38,320 --> 00:33:40,720
starts

00:33:38,960 --> 00:33:42,159
it's still complicated so i showed you

00:33:40,720 --> 00:33:43,519
the easy parts but once you want once

00:33:42,159 --> 00:33:44,640
you get into connecting databases and

00:33:43,519 --> 00:33:45,600
persistent storage

00:33:44,640 --> 00:33:46,880
there's some more complicated

00:33:45,600 --> 00:33:48,080
instructions which i've linked to at the

00:33:46,880 --> 00:33:50,240
bottom of my notes

00:33:48,080 --> 00:33:52,080
and finally databases are not serverless

00:33:50,240 --> 00:33:53,600
so you

00:33:52,080 --> 00:33:55,760
there are some sort of serverless

00:33:53,600 --> 00:33:59,200
database products an aurora

00:33:55,760 --> 00:34:00,720
on um aws serverless is one but it's

00:33:59,200 --> 00:34:02,240
it's not i think it's just really hard

00:34:00,720 --> 00:34:03,519
for a relation database to be available

00:34:02,240 --> 00:34:06,240
as a service model so

00:34:03,519 --> 00:34:06,559
it's um it's it's currently still feels

00:34:06,240 --> 00:34:08,399
like

00:34:06,559 --> 00:34:10,240
a bit hybrid but i do think that this is

00:34:08,399 --> 00:34:12,800
the way that increasing the apps will be

00:34:10,240 --> 00:34:13,919
posted okay if you need to deploy as

00:34:12,800 --> 00:34:15,760
quickly as possible

00:34:13,919 --> 00:34:17,520
then i think docker is a good approach

00:34:15,760 --> 00:34:19,040
if your site is mainly about information

00:34:17,520 --> 00:34:20,000
then static site generation gives you

00:34:19,040 --> 00:34:23,040
that speed

00:34:20,000 --> 00:34:24,159
and robustness and it's super cheap if

00:34:23,040 --> 00:34:26,399
you have to scale

00:34:24,159 --> 00:34:27,520
then i think a cloud-run type approach

00:34:26,399 --> 00:34:29,839
is the way to go

00:34:27,520 --> 00:34:30,560
that is it i am sorry for going on so

00:34:29,839 --> 00:34:33,359
long

00:34:30,560 --> 00:34:34,879
and i'm going to stop now but i'm really

00:34:33,359 --> 00:34:35,440
happy to answer questions either on

00:34:34,879 --> 00:34:39,119
slack

00:34:35,440 --> 00:34:49,359
or in the in the q a section afterwards

00:34:39,119 --> 00:34:51,440
thank you all very much

00:34:49,359 --> 00:34:51,440

YouTube URL: https://www.youtube.com/watch?v=SiTat1-sknU


