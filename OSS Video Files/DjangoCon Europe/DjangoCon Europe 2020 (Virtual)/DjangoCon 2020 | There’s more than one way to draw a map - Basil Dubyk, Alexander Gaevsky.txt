Title: DjangoCon 2020 | There’s more than one way to draw a map - Basil Dubyk, Alexander Gaevsky
Publication date: 2020-09-30
Playlist: DjangoCon Europe 2020 (Virtual)
Description: 
	DjangoCon Europe 2020 (Virtual)
September 18, 2020 - 10h35 (GMT+1)

“There’s more than one way to draw a map - lessons learned after the Google Maps SDK became unaffordable” by Basil Dubyk, Alexander Gaevsky

The Google Maps SDK: well-known, powerful, and extremely popular - and after July 2018, suddenly unaffordable. We needed to find an alternative for Django geospatial projects. This is the story of our search and what we found, and the lessons that we’d like to share from the experience. The good news is: we returned with new knowledge from our wanderings, and were able to migrate our existing projects successfully.
Captions: 
	00:00:04,720 --> 00:00:08,559
hello everyone

00:00:05,759 --> 00:00:10,240
uh our talk is uh there's uh more than

00:00:08,559 --> 00:00:13,519
one way to draw a map

00:00:10,240 --> 00:00:14,799
uh we're a meta class agency uh i'm

00:00:13,519 --> 00:00:18,080
alexandro gayevsky

00:00:14,799 --> 00:00:20,560
this is my colleague basel dubek hi

00:00:18,080 --> 00:00:21,279
uh we're developing custom solutions for

00:00:20,560 --> 00:00:24,400
e-commerce

00:00:21,279 --> 00:00:27,279
fintech and other domains using python3

00:00:24,400 --> 00:00:27,920
django and also flask and fast api in

00:00:27,279 --> 00:00:31,119
our spar

00:00:27,920 --> 00:00:34,559
us per time we contribute to the

00:00:31,119 --> 00:00:34,880
open source um projects like genghos

00:00:34,559 --> 00:00:38,640
core

00:00:34,880 --> 00:00:40,559
and jungle this year we're giving a talk

00:00:38,640 --> 00:00:41,680
from my living room not for the

00:00:40,559 --> 00:00:44,640
conference

00:00:41,680 --> 00:00:46,480
call and this is kind of a great

00:00:44,640 --> 00:00:48,640
experience

00:00:46,480 --> 00:00:50,800
uh third party uh special services are

00:00:48,640 --> 00:00:52,000
key parts of their overs platforms in

00:00:50,800 --> 00:00:54,160
different domains

00:00:52,000 --> 00:00:56,480
and traveling that delivery appear to

00:00:54,160 --> 00:00:58,879
appear a marketplace is transportation

00:00:56,480 --> 00:01:01,280
and google recommended itself as a

00:00:58,879 --> 00:01:04,400
reliable and solid provider and

00:01:01,280 --> 00:01:08,720
making itself practically irreplaceable

00:01:04,400 --> 00:01:11,840
part of those services and

00:01:08,720 --> 00:01:12,320
as time goes by and special integration

00:01:11,840 --> 00:01:15,360
because

00:01:12,320 --> 00:01:15,920
became more and more tight we were busy

00:01:15,360 --> 00:01:19,600
shipping

00:01:15,920 --> 00:01:23,759
uh features for uh the client project

00:01:19,600 --> 00:01:26,560
and when in early fall of 2018

00:01:23,759 --> 00:01:29,200
our client approached us since the bill

00:01:26,560 --> 00:01:32,400
for the google maps api

00:01:29,200 --> 00:01:36,640
dramatically grew until

00:01:32,400 --> 00:01:39,840
july year 16 2018

00:01:36,640 --> 00:01:40,479
1000 additional requests after initial

00:01:39,840 --> 00:01:44,079
quote of

00:01:40,479 --> 00:01:47,600
25 um associate of requests cost

00:01:44,079 --> 00:01:50,159
50 cents and it grew to seven dollars

00:01:47,600 --> 00:01:51,600
afterwards uh not that we weren't

00:01:50,159 --> 00:01:56,079
satisfied by the

00:01:51,600 --> 00:01:56,079
google maps but then

00:01:57,680 --> 00:02:01,600
but the estimated costs exceed the

00:02:00,079 --> 00:02:04,880
client expectations

00:02:01,600 --> 00:02:08,000
and our budget so we started to seek for

00:02:04,880 --> 00:02:09,440
the solutions and

00:02:08,000 --> 00:02:12,160
probably this broad existence of

00:02:09,440 --> 00:02:15,760
full-fledged uh flexible and powerful

00:02:12,160 --> 00:02:18,959
alternative of uh google maps which

00:02:15,760 --> 00:02:21,120
django spatial project could use

00:02:18,959 --> 00:02:22,080
and also the current price bike not only

00:02:21,120 --> 00:02:23,920
made us to

00:02:22,080 --> 00:02:25,480
start looking for a placement but also

00:02:23,920 --> 00:02:27,680
to re

00:02:25,480 --> 00:02:28,560
re-evaluate the whole approach of

00:02:27,680 --> 00:02:31,360
external

00:02:28,560 --> 00:02:32,720
api usage and pre-take the limits more

00:02:31,360 --> 00:02:36,239
carefully

00:02:32,720 --> 00:02:39,680
so but before we go and

00:02:36,239 --> 00:02:44,480
review alternatives uh let's see what

00:02:39,680 --> 00:02:47,599
um special uh um and button service

00:02:44,480 --> 00:02:48,239
consists of so first of all it's tile

00:02:47,599 --> 00:02:51,440
server

00:02:48,239 --> 00:02:55,040
um which renders uh

00:02:51,440 --> 00:02:59,120
map tiles and uh serves them

00:02:55,040 --> 00:03:02,800
um also it's js or other frontend

00:02:59,120 --> 00:03:06,080
um library which allows to

00:03:02,800 --> 00:03:10,319
read the whole map uh out of the tiles

00:03:06,080 --> 00:03:13,599
and uh display in the browser and

00:03:10,319 --> 00:03:17,360
geocoding api which allows you to

00:03:13,599 --> 00:03:21,840
um get the place uh

00:03:17,360 --> 00:03:21,840
get the location coordinates and other

00:03:22,239 --> 00:03:27,519
geodata and um also

00:03:25,519 --> 00:03:28,879
reverse geocoding which allows vice

00:03:27,519 --> 00:03:32,159
versa

00:03:28,879 --> 00:03:35,680
get their location name

00:03:32,159 --> 00:03:39,280
uh from the um coordinates

00:03:35,680 --> 00:03:41,760
um basically nowadays there are open

00:03:39,280 --> 00:03:42,879
source uh components which allows you to

00:03:41,760 --> 00:03:46,879
build

00:03:42,879 --> 00:03:49,280
all of the parts of the special

00:03:46,879 --> 00:03:50,959
service uh for the tile server you could

00:03:49,280 --> 00:03:55,760
just tigala

00:03:50,959 --> 00:04:00,239
open my tiles or you could use os to pgl

00:03:55,760 --> 00:04:03,599
component to buy open street maps uh

00:04:00,239 --> 00:04:06,640
multi-tile for the apache

00:04:03,599 --> 00:04:09,360
or custom solution by um

00:04:06,640 --> 00:04:10,319
for the flask to render the tool to

00:04:09,360 --> 00:04:14,640
serve the

00:04:10,319 --> 00:04:18,000
tiles and mapnik to

00:04:14,640 --> 00:04:21,440
render the tiles of the server

00:04:18,000 --> 00:04:25,600
there are also plenty js map libraries

00:04:21,440 --> 00:04:28,639
decent ones like leaflet js

00:04:25,600 --> 00:04:32,080
open layers and box gel

00:04:28,639 --> 00:04:33,120
i would mention those ones also there

00:04:32,080 --> 00:04:37,040
are

00:04:33,120 --> 00:04:41,120
geocoding api servers like

00:04:37,040 --> 00:04:41,120
pillias and nominated

00:04:41,759 --> 00:04:49,520
let's um see what alternatives

00:04:44,880 --> 00:04:52,400
we have um uh opens maps my box tom tom

00:04:49,520 --> 00:04:53,520
here maps location thank you rockhopper

00:04:52,400 --> 00:04:57,600
joke

00:04:53,520 --> 00:05:01,680
andy so um

00:04:57,600 --> 00:05:02,639
um first of all uh the criteria of the

00:05:01,680 --> 00:05:05,600
service was

00:05:02,639 --> 00:05:06,080
a reasonable pricing and uh sufficiently

00:05:05,600 --> 00:05:11,280
free

00:05:06,080 --> 00:05:14,639
yeah um and the

00:05:11,280 --> 00:05:17,199
map used uh customizable markers and

00:05:14,639 --> 00:05:19,120
informational model which could display

00:05:17,199 --> 00:05:21,280
some

00:05:19,120 --> 00:05:22,400
additional data when you click on the

00:05:21,280 --> 00:05:25,600
marker

00:05:22,400 --> 00:05:27,360
and we had a plenty of market markers on

00:05:25,600 --> 00:05:28,479
the map already so we needed to group

00:05:27,360 --> 00:05:31,840
them um

00:05:28,479 --> 00:05:33,840
into the cluster which we already had in

00:05:31,840 --> 00:05:36,880
the google maps

00:05:33,840 --> 00:05:38,080
uh as for the geocoding we needed both

00:05:36,880 --> 00:05:40,610
foreign and

00:05:38,080 --> 00:05:42,400
reverse geocoding

00:05:40,610 --> 00:05:46,240
[Music]

00:05:42,400 --> 00:05:49,120
last but not least we use

00:05:46,240 --> 00:05:50,000
location autocomplete and it would be

00:05:49,120 --> 00:05:53,520
nice to have

00:05:50,000 --> 00:05:54,000
a similar one uh on this new service as

00:05:53,520 --> 00:05:57,280
well

00:05:54,000 --> 00:05:58,800
and uh native python sdk would be cool

00:05:57,280 --> 00:06:03,520
as well

00:05:58,800 --> 00:06:07,600
uh also also um

00:06:03,520 --> 00:06:11,280
our client platform focuses on the

00:06:07,600 --> 00:06:14,880
clients in germany and austria so we

00:06:11,280 --> 00:06:17,440
wanted that the special data for those

00:06:14,880 --> 00:06:21,120
locations

00:06:17,440 --> 00:06:24,479
is a maximum accurate and

00:06:21,120 --> 00:06:27,600
also we needed all

00:06:24,479 --> 00:06:28,800
labels and everything to be localized in

00:06:27,600 --> 00:06:32,800
german

00:06:28,800 --> 00:06:33,360
and we already had 10 000 of markers in

00:06:32,800 --> 00:06:36,720
the maps

00:06:33,360 --> 00:06:41,360
so rendering clusters also

00:06:36,720 --> 00:06:44,160
needed a good performance otherwise

00:06:41,360 --> 00:06:44,160
customers would be

00:06:44,960 --> 00:06:48,880
frustrated and when the map followers

00:06:47,680 --> 00:06:52,000
too

00:06:48,880 --> 00:06:55,919
slow so openstreetmaps is a

00:06:52,000 --> 00:07:00,400
good is a decent service which uses

00:06:55,919 --> 00:07:03,680
open data and it's also open source

00:07:00,400 --> 00:07:06,000
and it has free pricing already has the

00:07:03,680 --> 00:07:06,880
python is the kgs map csdk compatible

00:07:06,000 --> 00:07:10,000
with it

00:07:06,880 --> 00:07:13,280
and the restful api and on the

00:07:10,000 --> 00:07:16,479
own uh dataset which is

00:07:13,280 --> 00:07:19,680
uh crowdsourced by uh

00:07:16,479 --> 00:07:22,880
by the users and it has localization

00:07:19,680 --> 00:07:26,160
uh the only con is that the data

00:07:22,880 --> 00:07:29,199
is open and free but uh

00:07:26,160 --> 00:07:30,240
a server is not a services usage is not

00:07:29,199 --> 00:07:33,280
free

00:07:30,240 --> 00:07:36,720
and then their services

00:07:33,280 --> 00:07:38,960
are running on donated um resources and

00:07:36,720 --> 00:07:41,520
they have limited capacities so

00:07:38,960 --> 00:07:41,520
basically

00:07:43,120 --> 00:07:47,520
you as soon as you reach the quote which

00:07:45,680 --> 00:07:50,960
is they don't have a hard quote

00:07:47,520 --> 00:07:52,960
but as soon as you um utilize their

00:07:50,960 --> 00:07:56,400
services

00:07:52,960 --> 00:08:00,240
to heart they would block requests

00:07:56,400 --> 00:08:04,000
and they suggest you to uh deploy your

00:08:00,240 --> 00:08:08,800
your own uh tile server using uh

00:08:04,000 --> 00:08:12,960
for instance uh open my updates

00:08:08,800 --> 00:08:12,960
so um the next

00:08:13,280 --> 00:08:16,639
navigator manufacturer uh which is

00:08:15,360 --> 00:08:20,160
widely used in the ua

00:08:16,639 --> 00:08:22,960
and european union and the north america

00:08:20,160 --> 00:08:24,560
and um navigation the master software

00:08:22,960 --> 00:08:27,599
producer

00:08:24,560 --> 00:08:31,520
it has a um three tier

00:08:27,599 --> 00:08:35,120
uh for 2500 requests per day

00:08:31,520 --> 00:08:38,399
which is 75 000 requests per month

00:08:35,120 --> 00:08:39,039
uh and a limitation of five requests per

00:08:38,399 --> 00:08:42,959
second

00:08:39,039 --> 00:08:46,160
for a non-tile based apis and 1000 for

00:08:42,959 --> 00:08:49,440
type tile based apis

00:08:46,160 --> 00:08:54,080
and the flexible pricing

00:08:49,440 --> 00:08:57,360
you can pay as you grow more quests um

00:08:54,080 --> 00:09:00,560
more costs uh although there are

00:08:57,360 --> 00:09:04,160
some um um

00:09:00,560 --> 00:09:06,839
debates here um uh one or one requests

00:09:04,160 --> 00:09:09,040
equals one transactions but not always

00:09:06,839 --> 00:09:12,160
except um

00:09:09,040 --> 00:09:15,519
traffic api tiles and so on and so on

00:09:12,160 --> 00:09:19,279
they have a native sdk for android

00:09:15,519 --> 00:09:22,480
ios um and web

00:09:19,279 --> 00:09:25,600
and it supports marcus and markers

00:09:22,480 --> 00:09:25,600
clusterization um

00:09:27,279 --> 00:09:31,040
restful api um has um forward and

00:09:30,640 --> 00:09:33,440
therefore

00:09:31,040 --> 00:09:34,480
reverse video code in a search and the

00:09:33,440 --> 00:09:37,839
dedicated um

00:09:34,480 --> 00:09:41,360
endpoint for after complete and it has a

00:09:37,839 --> 00:09:46,480
localization and

00:09:41,360 --> 00:09:46,480
uses own data set

00:09:47,440 --> 00:09:54,160
ma box allows to use

00:09:50,640 --> 00:09:58,320
uh a map for 50

00:09:54,160 --> 00:10:02,079
000 times for free and

00:09:58,320 --> 00:10:03,519
it allows to do 100 000 requests to the

00:10:02,079 --> 00:10:07,040
temporary geocoding api

00:10:03,519 --> 00:10:10,320
and 500 000 up to

00:10:07,040 --> 00:10:11,839
500 000 requests to permanently acquire

00:10:10,320 --> 00:10:15,200
an api

00:10:11,839 --> 00:10:16,640
uh it has python sdk but it's not

00:10:15,200 --> 00:10:21,279
completely developed

00:10:16,640 --> 00:10:25,040
and for now it has mobile sdk

00:10:21,279 --> 00:10:29,440
for is android it has

00:10:25,040 --> 00:10:32,640
augmented reality sdk and

00:10:29,440 --> 00:10:35,360
it has a restful api with both forward

00:10:32,640 --> 00:10:38,160
reverse geocoding and autocomplete and

00:10:35,360 --> 00:10:41,519
it has localization as well

00:10:38,160 --> 00:10:44,640
here map hear maps it's a

00:10:41,519 --> 00:10:46,560
service run by

00:10:44,640 --> 00:10:47,920
hero technologies which is a

00:10:46,560 --> 00:10:49,839
netherland-based international

00:10:47,920 --> 00:10:54,160
technology company previously

00:10:49,839 --> 00:10:58,480
it was nokia maps or

00:10:54,160 --> 00:11:02,560
ob maps it's now owned by a group of

00:10:58,480 --> 00:11:07,600
companies which are mainly automotive

00:11:02,560 --> 00:11:11,680
such as audi bmw and einer

00:11:07,600 --> 00:11:15,839
here maps were used by facebook

00:11:11,680 --> 00:11:18,959
and buy yeah microsoft maps

00:11:15,839 --> 00:11:24,320
so the pricing is

00:11:18,959 --> 00:11:24,320
200 000 a transaction per month

00:11:24,640 --> 00:11:31,279
it has five four thousand

00:11:28,079 --> 00:11:34,880
uh mobile sdk mostly active users

00:11:31,279 --> 00:11:38,480
uh and um it it doesn't have a mobile

00:11:34,880 --> 00:11:42,320
uh native uh native python sdk it has

00:11:38,480 --> 00:11:46,240
uh uh javascript sdk for building

00:11:42,320 --> 00:11:49,279
maps um and extensive restful

00:11:46,240 --> 00:11:52,639
api here for allocation discovery and

00:11:49,279 --> 00:11:56,079
geocoding back both

00:11:52,639 --> 00:11:56,800
forward and reverse out suggest location

00:11:56,079 --> 00:12:00,880
browsing

00:11:56,800 --> 00:12:03,600
lookup id and reverse geocoding and

00:12:00,880 --> 00:12:03,600
localization

00:12:03,920 --> 00:12:11,360
graph hopper graph hopper is a

00:12:08,160 --> 00:12:15,440
german service uh for a road planning

00:12:11,360 --> 00:12:16,800
and optimization uh and um

00:12:15,440 --> 00:12:18,720
it's main focus focus on this

00:12:16,800 --> 00:12:21,760
functionality

00:12:18,720 --> 00:12:25,040
um it has um

00:12:21,760 --> 00:12:27,519
free tier of 500

00:12:25,040 --> 00:12:29,519
crits per day but only for

00:12:27,519 --> 00:12:32,399
non-commercial use

00:12:29,519 --> 00:12:33,839
it has limited rate account per minute

00:12:32,399 --> 00:12:38,079
and

00:12:33,839 --> 00:12:40,639
cannot use flexible mode um

00:12:38,079 --> 00:12:42,160
it doesn't have native python stick it

00:12:40,639 --> 00:12:46,000
doesn't have

00:12:42,160 --> 00:12:49,600
much usdk and it doesn't have

00:12:46,000 --> 00:12:53,519
a dedicated at the complete endpoint

00:12:49,600 --> 00:12:57,120
at the is provided by

00:12:53,519 --> 00:12:58,399
multiple sources and it depends on the

00:12:57,120 --> 00:13:00,480
source

00:12:58,399 --> 00:13:02,560
you will be built a different different

00:13:00,480 --> 00:13:06,000
amount of

00:13:02,560 --> 00:13:09,040
credits allocation eq

00:13:06,000 --> 00:13:12,160
uh location queue and has

00:13:09,040 --> 00:13:15,440
a um uh free tier of

00:13:12,160 --> 00:13:18,560
uh ten thousand requests per day

00:13:15,440 --> 00:13:22,560
or uh two requests per second or

00:13:18,560 --> 00:13:25,920
sixty requests per minute which leads to

00:13:22,560 --> 00:13:28,000
300 000 requests per month

00:13:25,920 --> 00:13:29,839
and it has limited commercial uses so

00:13:28,000 --> 00:13:32,959
you need to add the link

00:13:29,839 --> 00:13:36,560
to the location qcom site in the

00:13:32,959 --> 00:13:40,079
application or on your or on your site

00:13:36,560 --> 00:13:43,600
so um it has um and

00:13:40,079 --> 00:13:46,720
it has a bunch of uh native uh

00:13:43,600 --> 00:13:47,519
software development kits for uh python

00:13:46,720 --> 00:13:50,800
it's a c

00:13:47,519 --> 00:13:54,480
dart ruby objective c pearl uh

00:13:50,800 --> 00:13:57,760
kotlin uh php swift scala

00:13:54,480 --> 00:14:01,360
rust java uh haskell are

00:13:57,760 --> 00:14:02,639
go c plus plus enclosure it doesn't have

00:14:01,360 --> 00:14:05,519
own um

00:14:02,639 --> 00:14:06,480
a maps uh javascript sdk and mobile

00:14:05,519 --> 00:14:08,410
successful

00:14:06,480 --> 00:14:09,760
although it has um

00:14:08,410 --> 00:14:11,839
[Music]

00:14:09,760 --> 00:14:12,959
uh forward and rusty accordion and

00:14:11,839 --> 00:14:16,160
location search

00:14:12,959 --> 00:14:18,320
and dedicated um endpoint for after

00:14:16,160 --> 00:14:21,120
complete

00:14:18,320 --> 00:14:23,279
it has localization but since uh it

00:14:21,120 --> 00:14:27,920
depends on the

00:14:23,279 --> 00:14:27,920
external data providers

00:14:28,160 --> 00:14:36,320
like open street map um

00:14:31,920 --> 00:14:40,240
if the uh if the data provider uh

00:14:36,320 --> 00:14:42,959
translated uh a particular uh geodata

00:14:40,240 --> 00:14:43,680
into the local language uh it will be

00:14:42,959 --> 00:14:45,920
translated

00:14:43,680 --> 00:14:47,600
on the local uh location like you as

00:14:45,920 --> 00:14:49,519
well um

00:14:47,600 --> 00:14:52,399
but they don't uh guarantee that all

00:14:49,519 --> 00:14:56,800
results will be translated

00:14:52,399 --> 00:14:56,800
uh andy nd is a um

00:14:57,040 --> 00:15:03,920
dutch uh service uh it has a

00:15:00,800 --> 00:15:05,199
free free trial of ten thousand requests

00:15:03,920 --> 00:15:09,120
per month

00:15:05,199 --> 00:15:13,279
uh it doesn't have uh any sdks but

00:15:09,120 --> 00:15:15,199
it has um powerful and dedicated uh map

00:15:13,279 --> 00:15:18,160
tile server

00:15:15,199 --> 00:15:19,360
and restful api for a forward and

00:15:18,160 --> 00:15:22,160
replace your coding

00:15:19,360 --> 00:15:25,279
but uh doesn't have um dedicated

00:15:22,160 --> 00:15:29,440
component for uh after complete

00:15:25,279 --> 00:15:32,800
uh joke uh joke maps um

00:15:29,440 --> 00:15:34,720
is a french service uh which does not

00:15:32,800 --> 00:15:37,440
have a um

00:15:34,720 --> 00:15:38,399
uh which has free pricing only for uh

00:15:37,440 --> 00:15:41,759
commercially

00:15:38,399 --> 00:15:44,800
on only for non-commercial use

00:15:41,759 --> 00:15:48,399
uh it's a 50

00:15:44,800 --> 00:15:52,000
000 map use um

00:15:48,399 --> 00:15:56,000
10 000 aesthetic maps view and

00:15:52,000 --> 00:15:59,199
10 000 place search request

00:15:56,000 --> 00:16:02,240
uh does not have any sdks natively

00:15:59,199 --> 00:16:05,120
um restful api has

00:16:02,240 --> 00:16:05,759
a forward reverse geocoding allocation

00:16:05,120 --> 00:16:08,399
search

00:16:05,759 --> 00:16:09,120
and dedicated endpoint for after

00:16:08,399 --> 00:16:12,720
complete

00:16:09,120 --> 00:16:12,720
and localization the data set

00:16:13,920 --> 00:16:20,320
they are using is from openstreetmaps

00:16:17,199 --> 00:16:22,100
open addresses and usernames

00:16:20,320 --> 00:16:23,759
so the reciprocation that

00:16:22,100 --> 00:16:26,160
[Music]

00:16:23,759 --> 00:16:27,680
the credits and transactions and

00:16:26,160 --> 00:16:29,519
requests it's not all the same

00:16:27,680 --> 00:16:32,160
when you choose the service you need to

00:16:29,519 --> 00:16:35,120
carefully read the

00:16:32,160 --> 00:16:35,519
agreement and the terms of use because

00:16:35,120 --> 00:16:38,079
uh

00:16:35,519 --> 00:16:38,720
some of the requests to the apis uh

00:16:38,079 --> 00:16:42,639
would

00:16:38,720 --> 00:16:45,920
cost a few credits and

00:16:42,639 --> 00:16:48,639
consequently they will be built

00:16:45,920 --> 00:16:49,279
not just one quest but as multiple

00:16:48,639 --> 00:16:52,720
finally

00:16:49,279 --> 00:16:56,399
uh we uh select hear maps

00:16:52,720 --> 00:16:59,440
as the replacement of the google maps

00:16:56,399 --> 00:17:02,639
uh first of all because it has a

00:16:59,440 --> 00:17:05,919
uh a built-in market

00:17:02,639 --> 00:17:10,400
marker clustering which would

00:17:05,919 --> 00:17:16,480
allow us quickly to switch to the

00:17:10,400 --> 00:17:16,480
ear maps and to save our clusters

00:17:16,559 --> 00:17:23,600
it has uh generous free gear

00:17:19,679 --> 00:17:25,919
um and it has a dedicated autocomplete

00:17:23,600 --> 00:17:27,760
api endpoint which we use in two places

00:17:25,919 --> 00:17:33,039
in our platform and

00:17:27,760 --> 00:17:35,830
uh dedicated endpoints allow you to

00:17:33,039 --> 00:17:37,039
fetch results um

00:17:35,830 --> 00:17:41,440
[Music]

00:17:37,039 --> 00:17:42,720
only to fish results and only receive

00:17:41,440 --> 00:17:45,600
the

00:17:42,720 --> 00:17:46,559
full location names and location ideas

00:17:45,600 --> 00:17:50,880
just the minimum

00:17:46,559 --> 00:17:54,720
amount of information and to

00:17:50,880 --> 00:17:58,160
later on retrieve the

00:17:54,720 --> 00:18:02,080
details of this particular allocation

00:17:58,160 --> 00:18:05,200
so um also based on the uh

00:18:02,080 --> 00:18:08,160
counterpoint uh research company um

00:18:05,200 --> 00:18:09,280
here technologies uh was named as the

00:18:08,160 --> 00:18:13,120
world's number one

00:18:09,280 --> 00:18:16,880
uh location platform uh and it has

00:18:13,120 --> 00:18:20,960
a leading position uh during the last

00:18:16,880 --> 00:18:25,760
three years uh your maps um

00:18:20,960 --> 00:18:30,799
uh has 80 000 sources of data

00:18:25,760 --> 00:18:34,880
and the provides maps in 190 countries

00:18:30,799 --> 00:18:34,880
in the world so

00:18:35,360 --> 00:18:44,799
finally those combination of their

00:18:40,320 --> 00:18:48,480
criteria made us choose their earmarks

00:18:44,799 --> 00:18:52,799
so um um yeah and

00:18:48,480 --> 00:18:58,080
uh yeah we could now proceed with the

00:18:52,799 --> 00:19:01,760
uh immigration and my colleague would

00:18:58,080 --> 00:19:03,919
tell you about it as you may know with

00:19:01,760 --> 00:19:04,880
google adding address autocompletion is

00:19:03,919 --> 00:19:06,640
quite easy

00:19:04,880 --> 00:19:09,280
since you just need to include their

00:19:06,640 --> 00:19:11,120
javascript library into your html and

00:19:09,280 --> 00:19:14,880
provide some callback

00:19:11,120 --> 00:19:16,559
for when the selected address is changed

00:19:14,880 --> 00:19:18,320
this is general everything that you need

00:19:16,559 --> 00:19:20,559
to do to make it

00:19:18,320 --> 00:19:21,919
work i mean that you are fine with the

00:19:20,559 --> 00:19:25,039
default timing

00:19:21,919 --> 00:19:26,799
but this is not the case with hear maps

00:19:25,039 --> 00:19:28,880
they do not provide ready to use

00:19:26,799 --> 00:19:32,080
javascript library for these

00:19:28,880 --> 00:19:34,400
and so since we already use a view

00:19:32,080 --> 00:19:36,320
framework in many places in the project

00:19:34,400 --> 00:19:38,000
we decided to implement up to completion

00:19:36,320 --> 00:19:41,200
with view means like making

00:19:38,000 --> 00:19:42,960
requests show and drop down etc for this

00:19:41,200 --> 00:19:46,000
as you can see on the

00:19:42,960 --> 00:19:47,600
slide we use simple input to get

00:19:46,000 --> 00:19:49,039
the place required by the user for the

00:19:47,600 --> 00:19:51,039
charge and

00:19:49,039 --> 00:19:53,200
initial value for it will be rendered by

00:19:51,039 --> 00:19:56,000
the chango and not by view

00:19:53,200 --> 00:19:57,200
in the request uh in general in the

00:19:56,000 --> 00:20:00,240
query string

00:19:57,200 --> 00:20:02,480
in the request for the here maps api

00:20:00,240 --> 00:20:04,960
it's possible to set many different

00:20:02,480 --> 00:20:08,320
settings that required by a project

00:20:04,960 --> 00:20:10,080
and res for example like result results

00:20:08,320 --> 00:20:11,440
language and the countries that will be

00:20:10,080 --> 00:20:15,280
used for the search

00:20:11,440 --> 00:20:18,000
and the marks result and similar thing

00:20:15,280 --> 00:20:19,679
and also as i think is very important

00:20:18,000 --> 00:20:22,799
you can indicate

00:20:19,679 --> 00:20:26,559
what html tag will be used to highlight

00:20:22,799 --> 00:20:31,760
the to highlight the

00:20:26,559 --> 00:20:35,840
results with places that match

00:20:31,760 --> 00:20:35,840
text typed by the user

00:20:36,000 --> 00:20:39,840
here you can see the example of

00:20:38,000 --> 00:20:42,799
suggestions from the

00:20:39,840 --> 00:20:43,120
here maps api from here in general we

00:20:42,799 --> 00:20:46,559
use

00:20:43,120 --> 00:20:49,440
just label to show in the drop down and

00:20:46,559 --> 00:20:50,240
location id that we use to get

00:20:49,440 --> 00:20:53,520
coordinates

00:20:50,240 --> 00:20:56,720
of the place when

00:20:53,520 --> 00:20:59,840
when the user adds their equipment

00:20:56,720 --> 00:21:02,320
to the platform they can use

00:20:59,840 --> 00:21:03,600
address after completion to select like

00:21:02,320 --> 00:21:06,880
concrete address

00:21:03,600 --> 00:21:08,799
but when we use of the completion

00:21:06,880 --> 00:21:10,720
for searching equipment in desirable

00:21:08,799 --> 00:21:13,919
areas we limit the results

00:21:10,720 --> 00:21:16,000
to the ones where only the city

00:21:13,919 --> 00:21:17,600
matches with the text entered by the

00:21:16,000 --> 00:21:21,280
user and you can see this

00:21:17,600 --> 00:21:23,679
filtering on the slide now we are

00:21:21,280 --> 00:21:26,720
talking about

00:21:23,679 --> 00:21:29,840
how we draw

00:21:26,720 --> 00:21:32,400
and use markers

00:21:29,840 --> 00:21:34,080
as you know google maps as well as hear

00:21:32,400 --> 00:21:37,200
maps allow you to use custom

00:21:34,080 --> 00:21:40,080
images for the markers so the

00:21:37,200 --> 00:21:43,360
the simplest uh what we can do for the

00:21:40,080 --> 00:21:45,360
start we just use the same image

00:21:43,360 --> 00:21:47,280
for the icon that we used previously was

00:21:45,360 --> 00:21:51,520
google maps we used the same

00:21:47,280 --> 00:21:53,760
for the uh here maps

00:21:51,520 --> 00:21:54,960
but we found that performance is not

00:21:53,760 --> 00:21:58,159
quite

00:21:54,960 --> 00:22:01,520
good because we use like fancy png

00:21:58,159 --> 00:22:02,640
with transparency and other so we

00:22:01,520 --> 00:22:08,080
decided to

00:22:02,640 --> 00:22:08,080
use svg instead of png

00:22:08,320 --> 00:22:15,840
and additionally uh and additionally

00:22:12,640 --> 00:22:19,600
here now we start to

00:22:15,840 --> 00:22:22,799
set the marker size and

00:22:19,600 --> 00:22:26,080
other other things

00:22:22,799 --> 00:22:29,039
the time we that time we decided to

00:22:26,080 --> 00:22:30,799
use svg instead of png to improve the

00:22:29,039 --> 00:22:34,000
performance of market rendering

00:22:30,799 --> 00:22:35,200
and with svg icons for markers we

00:22:34,000 --> 00:22:38,400
started to indicate

00:22:35,200 --> 00:22:40,000
needed marker size and anchor point now

00:22:38,400 --> 00:22:42,720
the size of markers

00:22:40,000 --> 00:22:43,600
depends on the user browser's pixel

00:22:42,720 --> 00:22:45,840
ratio

00:22:43,600 --> 00:22:47,280
and this is very useful to show markers

00:22:45,840 --> 00:22:51,200
in correct size on

00:22:47,280 --> 00:22:53,600
high dpi and retina displays

00:22:51,200 --> 00:22:54,480
to show additional info when a user is

00:22:53,600 --> 00:22:57,120
clicking

00:22:54,480 --> 00:22:58,400
on the marker it's possible to use info

00:22:57,120 --> 00:23:02,320
bubbles

00:22:58,400 --> 00:23:05,600
for it you just need to provide the

00:23:02,320 --> 00:23:08,640
the coordinates and the html content

00:23:05,600 --> 00:23:12,000
and here's example of an info bubble

00:23:08,640 --> 00:23:14,000
is very simple but it showed that you

00:23:12,000 --> 00:23:15,120
can display all data related to the

00:23:14,000 --> 00:23:17,600
clicked point

00:23:15,120 --> 00:23:20,240
on the map in our case we show a photo

00:23:17,600 --> 00:23:23,760
of the equipment user's profile picture

00:23:20,240 --> 00:23:26,000
and score price etc

00:23:23,760 --> 00:23:27,360
it's possible to style content in the

00:23:26,000 --> 00:23:30,799
info bubbles by

00:23:27,360 --> 00:23:32,960
updating cc's classes added by

00:23:30,799 --> 00:23:33,840
info bubble automatically and by styling

00:23:32,960 --> 00:23:38,880
custom

00:23:33,840 --> 00:23:38,880
ccs classes inside the info bubble

00:23:40,080 --> 00:23:44,240
and additionally to you you can

00:23:43,279 --> 00:23:47,039
customize

00:23:44,240 --> 00:23:48,400
your map during utilization by setting

00:23:47,039 --> 00:23:50,559
needing tiles

00:23:48,400 --> 00:23:51,760
and we think that this is very

00:23:50,559 --> 00:23:54,480
customizable so

00:23:51,760 --> 00:23:57,200
probably can be used in any range of

00:23:54,480 --> 00:23:57,200
requirements

00:23:58,080 --> 00:24:01,760
however after the first part was

00:24:00,000 --> 00:24:04,720
finished a trickier

00:24:01,760 --> 00:24:06,159
one popped up markers clusterization

00:24:04,720 --> 00:24:09,200
this model allows to

00:24:06,159 --> 00:24:10,960
group markers of one location hide

00:24:09,200 --> 00:24:14,159
single markers and show a group

00:24:10,960 --> 00:24:16,880
of markers instead for the given scale

00:24:14,159 --> 00:24:17,200
when the user scrolls down group breaks

00:24:16,880 --> 00:24:20,240
down

00:24:17,200 --> 00:24:21,279
into the other groups or to the separate

00:24:20,240 --> 00:24:24,080
markers

00:24:21,279 --> 00:24:26,320
google maps provide a ready ready-to-use

00:24:24,080 --> 00:24:29,120
javascript library in the official repo

00:24:26,320 --> 00:24:31,360
and a couple of examples how you can use

00:24:29,120 --> 00:24:34,159
it and integrate

00:24:31,360 --> 00:24:35,360
our successor hear maps luckily has

00:24:34,159 --> 00:24:37,919
built-in markers

00:24:35,360 --> 00:24:38,960
clusterization under the hood and three

00:24:37,919 --> 00:24:42,400
different

00:24:38,960 --> 00:24:44,640
algorithms or strategies powering it

00:24:42,400 --> 00:24:45,840
it's fast grid grid and dynamic grid for

00:24:44,640 --> 00:24:49,440
different

00:24:45,840 --> 00:24:52,720
for different data sets say sizes

00:24:49,440 --> 00:24:52,720
and we can compare them

00:24:52,880 --> 00:24:56,080
the fast grid is an efficient way to

00:24:55,440 --> 00:24:58,559
cluster

00:24:56,080 --> 00:25:00,640
large sets of data points and we use it

00:24:58,559 --> 00:25:03,200
for the pages where we show

00:25:00,640 --> 00:25:04,480
search results not related to some like

00:25:03,200 --> 00:25:07,760
concrete place

00:25:04,480 --> 00:25:08,720
or when we show all the markers on the

00:25:07,760 --> 00:25:11,279
map

00:25:08,720 --> 00:25:12,640
and grid strategy is slower but has

00:25:11,279 --> 00:25:15,520
greater precision

00:25:12,640 --> 00:25:16,480
we use it for maps on the user's profile

00:25:15,520 --> 00:25:20,320
pages

00:25:16,480 --> 00:25:23,200
and dynamic grid clustering

00:25:20,320 --> 00:25:24,960
uses the same algorithm of clustering as

00:25:23,200 --> 00:25:29,600
the grid but clusters

00:25:24,960 --> 00:25:31,919
on the viewport basis it was suited for

00:25:29,600 --> 00:25:33,840
for data sets that are subject to

00:25:31,919 --> 00:25:36,880
frequent updates

00:25:33,840 --> 00:25:39,840
and we don't use it in our project

00:25:36,880 --> 00:25:41,039
since we do not make uh updates to the

00:25:39,840 --> 00:25:44,159
map since we

00:25:41,039 --> 00:25:48,159
put all the needed markers to the maps

00:25:44,159 --> 00:25:51,039
once we made our own comparison

00:25:48,159 --> 00:25:53,200
for the different strategies and we can

00:25:51,039 --> 00:25:56,320
see that

00:25:53,200 --> 00:25:58,320
fastgrid strategy a lot for a lot of

00:25:56,320 --> 00:25:59,600
markers clusters appear on the

00:25:58,320 --> 00:26:04,240
initialized map

00:25:59,600 --> 00:26:04,240
much faster than with grid strategy

00:26:05,039 --> 00:26:09,279
last but not least we have multiple

00:26:08,159 --> 00:26:12,320
different equipment

00:26:09,279 --> 00:26:13,840
items tied to the same address so that

00:26:12,320 --> 00:26:15,919
previously we plug it

00:26:13,840 --> 00:26:17,919
in an additional javascript library

00:26:15,919 --> 00:26:18,960
which renders markers within the same

00:26:17,919 --> 00:26:22,159
location

00:26:18,960 --> 00:26:25,760
as a literal web of markers with

00:26:22,159 --> 00:26:26,400
spider fire we used markers in the open

00:26:25,760 --> 00:26:29,279
cluster

00:26:26,400 --> 00:26:30,159
as single markers on click we show an

00:26:29,279 --> 00:26:33,440
info

00:26:30,159 --> 00:26:35,919
window since here

00:26:33,440 --> 00:26:37,360
does not provide the same functionality

00:26:35,919 --> 00:26:40,320
as spider fire

00:26:37,360 --> 00:26:41,679
this time we used a different strategy

00:26:40,320 --> 00:26:44,799
we just decided to

00:26:41,679 --> 00:26:46,400
display only one marker and show

00:26:44,799 --> 00:26:49,120
available gear

00:26:46,400 --> 00:26:50,720
in the informational pop-up which

00:26:49,120 --> 00:26:53,520
appears when the user clicks

00:26:50,720 --> 00:26:54,799
on a marker now in the info window for

00:26:53,520 --> 00:26:58,320
the cluster

00:26:54,799 --> 00:27:01,600
the user will be able to review all the

00:26:58,320 --> 00:27:03,600
gears by using just arrows we found this

00:27:01,600 --> 00:27:06,640
solution even better

00:27:03,600 --> 00:27:07,279
than what we had with spider fire since

00:27:06,640 --> 00:27:10,400
uh

00:27:07,279 --> 00:27:13,440
previously users can accidentally skip

00:27:10,400 --> 00:27:15,440
some markers in the open spider fire

00:27:13,440 --> 00:27:16,559
if there are many of them they are all

00:27:15,440 --> 00:27:20,640
the same in

00:27:16,559 --> 00:27:22,720
general and now this is not possible

00:27:20,640 --> 00:27:24,320
and additionally we can say that it's

00:27:22,720 --> 00:27:26,880
possible to

00:27:24,320 --> 00:27:28,000
use custom cluster icon in general

00:27:26,880 --> 00:27:30,399
cluster icons

00:27:28,000 --> 00:27:31,200
can be the same as the marker icons but

00:27:30,399 --> 00:27:35,200
since

00:27:31,200 --> 00:27:37,200
cluster groups a couple of

00:27:35,200 --> 00:27:38,880
markers it's useful to show a number of

00:27:37,200 --> 00:27:41,279
markers in the group

00:27:38,880 --> 00:27:42,880
and we have achieved this by putting

00:27:41,279 --> 00:27:46,559
just text part into

00:27:42,880 --> 00:27:46,559
our svg template

00:27:47,520 --> 00:27:51,600
uh now that we have finished with the uh

00:27:50,480 --> 00:27:54,720
frontend migration

00:27:51,600 --> 00:27:56,799
we can look at the uh backend

00:27:54,720 --> 00:27:58,080
uh on the back end we were using native

00:27:56,799 --> 00:28:01,360
python sdk for

00:27:58,080 --> 00:28:04,640
google maps and now we obviously

00:28:01,360 --> 00:28:06,480
is a replacement for hear maps uh it

00:28:04,640 --> 00:28:09,760
doesn't have a python is the key

00:28:06,480 --> 00:28:12,480
but it's not necessary after all

00:28:09,760 --> 00:28:13,520
we can quickly wrap around the restful

00:28:12,480 --> 00:28:16,880
api

00:28:13,520 --> 00:28:17,840
since we only need three points for a

00:28:16,880 --> 00:28:21,279
geocoding

00:28:17,840 --> 00:28:23,919
uh reversible coding and location lookup

00:28:21,279 --> 00:28:26,320
also there is a nice look in this third

00:28:23,919 --> 00:28:29,360
party package called here pi

00:28:26,320 --> 00:28:30,080
uh which is also suitable for uh the

00:28:29,360 --> 00:28:33,440
creation

00:28:30,080 --> 00:28:35,520
also we use only three endpoints

00:28:33,440 --> 00:28:36,559
which doesn't seem enough for bringing

00:28:35,520 --> 00:28:39,840
bringing in

00:28:36,559 --> 00:28:40,720
another dependence on board as stated

00:28:39,840 --> 00:28:43,440
before

00:28:40,720 --> 00:28:44,240
auto suggesting point basically returns

00:28:43,440 --> 00:28:46,559
only location

00:28:44,240 --> 00:28:47,520
ids and has minimum information about

00:28:46,559 --> 00:28:50,559
the location

00:28:47,520 --> 00:28:53,120
obviously due to the um

00:28:50,559 --> 00:28:55,279
performance reasons so we can later on

00:28:53,120 --> 00:28:57,840
retro location details separately

00:28:55,279 --> 00:28:59,520
naturally there are popular locations

00:28:57,840 --> 00:29:03,120
big cities like berlin

00:28:59,520 --> 00:29:06,480
colonia uh munich which customers often

00:29:03,120 --> 00:29:10,399
look for equipment around and

00:29:06,480 --> 00:29:14,720
in order to utilize attack what

00:29:10,399 --> 00:29:18,320
more wisely we could a cache

00:29:14,720 --> 00:29:21,440
allocation data for those

00:29:18,320 --> 00:29:24,640
locations and

00:29:21,440 --> 00:29:27,200
you can see on the slide this

00:29:24,640 --> 00:29:29,279
occasional implementation in the lookup

00:29:27,200 --> 00:29:34,320
method

00:29:29,279 --> 00:29:37,840
uh now we could review some advanced

00:29:34,320 --> 00:29:41,039
features like spatial search

00:29:37,840 --> 00:29:44,159
for the jungle project uh

00:29:41,039 --> 00:29:45,440
we can have a similar one on our

00:29:44,159 --> 00:29:49,039
platform as well

00:29:45,440 --> 00:29:52,240
so um two chances to implement

00:29:49,039 --> 00:29:55,120
uh uh full full text uh at the same time

00:29:52,240 --> 00:29:57,160
full text and spatial search

00:29:55,120 --> 00:29:58,720
in the django project and

00:29:57,160 --> 00:30:01,120
[Music]

00:29:58,720 --> 00:30:01,760
you could use postproceedl as the

00:30:01,120 --> 00:30:06,799
database

00:30:01,760 --> 00:30:06,799
engine or elasticsearch

00:30:06,840 --> 00:30:12,559
so for the possibility

00:30:09,279 --> 00:30:15,760
of the post uh as well scale

00:30:12,559 --> 00:30:18,799
you would need post geese

00:30:15,760 --> 00:30:22,559
and obviously uh

00:30:18,799 --> 00:30:25,760
jiojianga and um

00:30:22,559 --> 00:30:27,120
uh on the slide you see that we outlined

00:30:25,760 --> 00:30:30,640
the simple model and

00:30:27,120 --> 00:30:32,000
implemented a um a simple endpoint for

00:30:30,640 --> 00:30:35,039
the agent rest

00:30:32,000 --> 00:30:39,840
uh framework uh which uh is

00:30:35,039 --> 00:30:43,120
doing um queries in the search

00:30:39,840 --> 00:30:47,200
filter and also

00:30:43,120 --> 00:30:50,399
special search using uh

00:30:47,200 --> 00:30:53,679
division filter

00:30:50,399 --> 00:30:57,760
uh the implementation for the elastic

00:30:53,679 --> 00:31:01,919
uh it requires also a django stack

00:30:57,760 --> 00:31:06,000
and on slide you see that we outline the

00:31:01,919 --> 00:31:09,440
index class for the agency stack and

00:31:06,000 --> 00:31:13,919
the integration for the general

00:31:09,440 --> 00:31:17,600
framework it looks quite similar

00:31:13,919 --> 00:31:20,960
except the query set

00:31:17,600 --> 00:31:24,399
we use a separate method uh

00:31:20,960 --> 00:31:26,080
d within not not filter and the

00:31:24,399 --> 00:31:29,760
parameters

00:31:26,080 --> 00:31:29,760
are quite similar

00:31:30,840 --> 00:31:35,679
um uh all in all um

00:31:33,440 --> 00:31:36,960
we don't stick to the term ups as the

00:31:35,679 --> 00:31:39,600
ideal solution

00:31:36,960 --> 00:31:41,039
since there are plenty of distant

00:31:39,600 --> 00:31:44,720
products available

00:31:41,039 --> 00:31:44,720
and uh we can't avoid

00:31:44,960 --> 00:31:51,919
mapbox who built special

00:31:48,799 --> 00:31:55,120
javascript library a super super cluster

00:31:51,919 --> 00:31:57,519
uh which shows quite

00:31:55,120 --> 00:31:59,039
uh distant performance with millions of

00:31:57,519 --> 00:32:02,240
points in the dataset

00:31:59,039 --> 00:32:05,440
also the leaflet has

00:32:02,240 --> 00:32:05,440
a marker cluster

00:32:05,519 --> 00:32:12,559
module which also allows to build a uh

00:32:08,799 --> 00:32:12,559
cluster for the

00:32:12,840 --> 00:32:15,840
markers

00:32:18,799 --> 00:32:25,200
thank you very much for listening uh

00:32:21,919 --> 00:32:28,399
you can ask your questions or uh

00:32:25,200 --> 00:32:38,399
contact us uh in the tour there or

00:32:28,399 --> 00:32:38,399

YouTube URL: https://www.youtube.com/watch?v=1j7KptyNmS8


