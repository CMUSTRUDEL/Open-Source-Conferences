Title: DjangoCon 2020 | How to Hack a Django Website - Adam Johnson
Publication date: 2020-10-07
Playlist: DjangoCon Europe 2020 (Virtual)
Description: 
	DjangoCon Europe 2020 (Virtual)
September 18, 2020 - 17h10 (GMT+1)

"How to Hack a Django Website" by Adam Johnson

Why did Facebook have a public Django-based site that got hacked? What was the flaw discovered in GitHub's password reset mechanism that was also found to affect Django auth? Are your projects vulnerable? I'll walk you through some stories of common web vulnerabilities, and what they mean for Django. I've had the pleasure of working on over 50 Django projects so far, so I've seen some patterns emerge.
Captions: 
	00:00:05,440 --> 00:00:09,360
hello djangocon europe

00:00:07,279 --> 00:00:10,400
uh it's lovely to join you here in

00:00:09,360 --> 00:00:12,320
virtual porto

00:00:10,400 --> 00:00:14,000
i'm adam johnson and today i'm going to

00:00:12,320 --> 00:00:17,600
talk to you about how to hack

00:00:14,000 --> 00:00:19,680
a django website this talk is organized

00:00:17,600 --> 00:00:20,880
around four stories of sites getting

00:00:19,680 --> 00:00:23,519
hacked

00:00:20,880 --> 00:00:26,480
the first one comes from facebook it was

00:00:23,519 --> 00:00:27,599
a pickle remote code execution attack

00:00:26,480 --> 00:00:29,519
don't worry about what that means we'll

00:00:27,599 --> 00:00:31,279
find out in a little bit and

00:00:29,519 --> 00:00:33,360
this wasn't facebook itself but this was

00:00:31,279 --> 00:00:34,160
a django based site that facebook was

00:00:33,360 --> 00:00:37,360
running

00:00:34,160 --> 00:00:38,640
uh it was a instance of century the

00:00:37,360 --> 00:00:41,440
second

00:00:38,640 --> 00:00:42,320
story comes to us from github and github

00:00:41,440 --> 00:00:44,399
also doesn't run

00:00:42,320 --> 00:00:45,440
django but it's based on ruby on rails

00:00:44,399 --> 00:00:48,079
but the same problem

00:00:45,440 --> 00:00:50,239
existed inside django this was something

00:00:48,079 --> 00:00:51,600
we'd call a unicode case collision

00:00:50,239 --> 00:00:53,199
account takeover

00:00:51,600 --> 00:00:55,360
even longer term but don't worry we'll

00:00:53,199 --> 00:00:57,120
unpack that when we get to it

00:00:55,360 --> 00:00:59,199
the third story comes from somewhere i

00:00:57,120 --> 00:01:01,760
used to work called y plan

00:00:59,199 --> 00:01:02,559
where we had an html injection attack in

00:01:01,760 --> 00:01:04,559
the admin

00:01:02,559 --> 00:01:05,760
this is also sometimes known as a cross

00:01:04,559 --> 00:01:08,400
site scripting

00:01:05,760 --> 00:01:09,360
and so this would be my personal story

00:01:08,400 --> 00:01:12,159
in here

00:01:09,360 --> 00:01:15,280
and then the fourth one is from many

00:01:12,159 --> 00:01:18,400
different sites that i've looked at

00:01:15,280 --> 00:01:19,920
a specific form of html injection

00:01:18,400 --> 00:01:23,759
that can occur when you're templating

00:01:19,920 --> 00:01:27,920
javascript so let's get started

00:01:23,759 --> 00:01:29,840
story one facebook this is from a 2018

00:01:27,920 --> 00:01:31,119
blog post by a security researcher

00:01:29,840 --> 00:01:34,240
called blacklist

00:01:31,119 --> 00:01:36,320
who detailed everything in this

00:01:34,240 --> 00:01:37,840
small attack that led them to collect a

00:01:36,320 --> 00:01:40,479
bug bounty

00:01:37,840 --> 00:01:43,280
and they thankfully gave us a lot of

00:01:40,479 --> 00:01:45,439
details that we can expand upon

00:01:43,280 --> 00:01:48,240
the first step that blacklist took was

00:01:45,439 --> 00:01:50,479
to scan the facebook ip range

00:01:48,240 --> 00:01:52,720
since they've got their own data centers

00:01:50,479 --> 00:01:54,240
they've bought an ip range to host all

00:01:52,720 --> 00:01:57,280
their public servers in

00:01:54,240 --> 00:01:59,439
this is public knowledge who owns which

00:01:57,280 --> 00:02:01,040
sets of ips so it's quite easy to find

00:01:59,439 --> 00:02:03,280
out

00:02:01,040 --> 00:02:04,560
which servers to scan if you're trying

00:02:03,280 --> 00:02:07,680
to look into

00:02:04,560 --> 00:02:10,080
looking at facebook whilst doing this

00:02:07,680 --> 00:02:10,720
they made http requests to all these ips

00:02:10,080 --> 00:02:13,040
and found

00:02:10,720 --> 00:02:14,400
an instance of sentry running this is a

00:02:13,040 --> 00:02:17,440
django based

00:02:14,400 --> 00:02:20,400
bug tracking tool and it looked like

00:02:17,440 --> 00:02:21,760
facebook had set it up as a prototype

00:02:20,400 --> 00:02:22,560
and they thought this was kind of

00:02:21,760 --> 00:02:24,959
interesting

00:02:22,560 --> 00:02:26,560
sentry tends to include information

00:02:24,959 --> 00:02:27,680
about the applications it's tracking

00:02:26,560 --> 00:02:30,239
bugs for

00:02:27,680 --> 00:02:30,879
so uh there could be other information

00:02:30,239 --> 00:02:33,840
to find

00:02:30,879 --> 00:02:34,959
a vector for attack whilst browsing

00:02:33,840 --> 00:02:36,879
around sentry

00:02:34,959 --> 00:02:38,400
blacklist found that it was running with

00:02:36,879 --> 00:02:41,440
debug set to true

00:02:38,400 --> 00:02:44,000
that's django's debug setting and uh

00:02:41,440 --> 00:02:45,760
it didn't take long to find a bug in

00:02:44,000 --> 00:02:48,879
sentry itself that led to

00:02:45,760 --> 00:02:50,160
an exception back trace this is probably

00:02:48,879 --> 00:02:51,840
something they could even find from the

00:02:50,160 --> 00:02:54,800
century bug tracker

00:02:51,840 --> 00:02:58,080
and from this debug page that django

00:02:54,800 --> 00:03:00,800
outputs they could read all the settings

00:02:58,080 --> 00:03:02,239
so django when it debugs the settings it

00:03:00,800 --> 00:03:03,519
actually tries and filters out the

00:03:02,239 --> 00:03:05,760
sensitive ones

00:03:03,519 --> 00:03:06,640
but it doesn't stop a combination of

00:03:05,760 --> 00:03:08,720
sensitive

00:03:06,640 --> 00:03:10,560
of non-sensitive data becoming something

00:03:08,720 --> 00:03:12,640
that an attacker can use

00:03:10,560 --> 00:03:14,959
in this case three particular settings

00:03:12,640 --> 00:03:16,400
combined to allow a remote code

00:03:14,959 --> 00:03:18,080
execution attack

00:03:16,400 --> 00:03:19,680
these three settings were the session

00:03:18,080 --> 00:03:22,080
serializer setting

00:03:19,680 --> 00:03:23,360
and this was set to pickle serializer so

00:03:22,080 --> 00:03:25,920
being able to read this was

00:03:23,360 --> 00:03:27,519
a useful piece of information the second

00:03:25,920 --> 00:03:30,400
was that the session engine

00:03:27,519 --> 00:03:31,760
used was the signed cookies one rather

00:03:30,400 --> 00:03:34,080
than storing the session

00:03:31,760 --> 00:03:35,680
sessions in the database on the server

00:03:34,080 --> 00:03:37,280
they were being sent to the client

00:03:35,680 --> 00:03:40,239
in a cookie and the client would send

00:03:37,280 --> 00:03:43,280
back that session data with each request

00:03:40,239 --> 00:03:46,560
and the third slightly unfortunate step

00:03:43,280 --> 00:03:48,720
was the debugging of the secret key

00:03:46,560 --> 00:03:51,120
django does filter out the secret key

00:03:48,720 --> 00:03:52,480
setting but sentry provides a way to

00:03:51,120 --> 00:03:54,560
override it with its own

00:03:52,480 --> 00:03:56,480
internal setting and sentry options and

00:03:54,560 --> 00:03:57,360
so the same secret key was repeated

00:03:56,480 --> 00:03:58,879
there

00:03:57,360 --> 00:04:01,280
and because the secret key is used to

00:03:58,879 --> 00:04:04,080
encrypt the sessions this is what

00:04:01,280 --> 00:04:04,080
allowed the attack

00:04:04,720 --> 00:04:08,480
so with those three pieces of

00:04:06,319 --> 00:04:10,640
information blacklist was able to run

00:04:08,480 --> 00:04:12,400
a piece of python code locally with

00:04:10,640 --> 00:04:15,519
their own copy of django

00:04:12,400 --> 00:04:19,040
to load change and save

00:04:15,519 --> 00:04:22,079
the cookie that they were using

00:04:19,040 --> 00:04:24,080
they could call the django core

00:04:22,079 --> 00:04:25,360
signing function to load the signed

00:04:24,080 --> 00:04:26,880
cookie data

00:04:25,360 --> 00:04:28,479
and they were able to do this because

00:04:26,880 --> 00:04:30,320
they had the secret key

00:04:28,479 --> 00:04:32,320
and they knew that the serializer was

00:04:30,320 --> 00:04:35,120
pickle serializer which was where the

00:04:32,320 --> 00:04:37,280
main vulnerability came from

00:04:35,120 --> 00:04:39,520
they could then change something inside

00:04:37,280 --> 00:04:41,600
this data dictionary that got loaded

00:04:39,520 --> 00:04:42,800
and adding data into the session

00:04:41,600 --> 00:04:45,199
basically

00:04:42,800 --> 00:04:47,040
and here they've used a custom class

00:04:45,199 --> 00:04:48,400
called pickle rce that we'll see in a

00:04:47,040 --> 00:04:51,600
second

00:04:48,400 --> 00:04:53,120
and then they could uh dump it back out

00:04:51,600 --> 00:04:55,040
into a byte string

00:04:53,120 --> 00:04:56,800
print that to the terminal copy that

00:04:55,040 --> 00:04:58,479
into their browser's cookies

00:04:56,800 --> 00:05:01,520
send it to the server and the server

00:04:58,479 --> 00:05:03,360
would do the same kind of steps

00:05:01,520 --> 00:05:04,800
on each request to load and check the

00:05:03,360 --> 00:05:06,479
session data

00:05:04,800 --> 00:05:09,520
and the unfortunate things comes from

00:05:06,479 --> 00:05:12,720
the pickle rce class

00:05:09,520 --> 00:05:16,000
so pickle is a serialization

00:05:12,720 --> 00:05:16,639
uh module built into the standard

00:05:16,000 --> 00:05:18,560
library

00:05:16,639 --> 00:05:20,160
but unfortunately it's not really a pure

00:05:18,560 --> 00:05:23,280
data module

00:05:20,160 --> 00:05:25,680
it actually is code and something

00:05:23,280 --> 00:05:26,960
that you may not know if you're using it

00:05:25,680 --> 00:05:29,919
somewhere inside your system

00:05:26,960 --> 00:05:30,960
is that it actually runs an interpreter

00:05:29,919 --> 00:05:33,840
on load

00:05:30,960 --> 00:05:35,120
to uh like a mini coding language inside

00:05:33,840 --> 00:05:37,759
python

00:05:35,120 --> 00:05:38,639
and you can customize what will run on

00:05:37,759 --> 00:05:41,440
load

00:05:38,639 --> 00:05:42,320
so that pickle rce class that blacklist

00:05:41,440 --> 00:05:44,720
implemented

00:05:42,320 --> 00:05:46,240
it looked like this it had only a

00:05:44,720 --> 00:05:49,440
reduced method

00:05:46,240 --> 00:05:52,479
and this is called by the pickle

00:05:49,440 --> 00:05:55,039
serialization method to figure out what

00:05:52,479 --> 00:05:57,039
functions should be imported and called

00:05:55,039 --> 00:05:59,600
to load this object back on the other

00:05:57,039 --> 00:06:02,080
end when deserializing

00:05:59,600 --> 00:06:02,639
in this case the class returned os dot

00:06:02,080 --> 00:06:05,680
system

00:06:02,639 --> 00:06:06,800
and sleep 30 so it says to to retrieve

00:06:05,680 --> 00:06:09,680
this object

00:06:06,800 --> 00:06:11,840
call this function with these arguments

00:06:09,680 --> 00:06:14,000
well we can see this won't return

00:06:11,840 --> 00:06:16,639
any useful object but it will execute a

00:06:14,000 --> 00:06:18,639
command on the server

00:06:16,639 --> 00:06:20,400
when we dump this into a series of bytes

00:06:18,639 --> 00:06:23,680
which is what made its way

00:06:20,400 --> 00:06:25,520
into the session and you can see that

00:06:23,680 --> 00:06:27,600
the posix part of the

00:06:25,520 --> 00:06:28,720
os module is being used there's the

00:06:27,600 --> 00:06:31,280
system

00:06:28,720 --> 00:06:32,240
and string that refers to loading that

00:06:31,280 --> 00:06:34,160
system function

00:06:32,240 --> 00:06:35,280
and then here's the command to pass to

00:06:34,160 --> 00:06:37,600
it so

00:06:35,280 --> 00:06:38,400
if we call pickle.loads on this byte

00:06:37,600 --> 00:06:42,000
string

00:06:38,400 --> 00:06:43,840
and it runs the sleep 30 command

00:06:42,000 --> 00:06:46,080
you can get pixel to do whatever you

00:06:43,840 --> 00:06:48,639
like you could make it

00:06:46,080 --> 00:06:50,720
create http requests delete data dump

00:06:48,639 --> 00:06:51,759
the database and upload it to a server

00:06:50,720 --> 00:06:54,800
you control

00:06:51,759 --> 00:06:56,720
pretty much anything you want

00:06:54,800 --> 00:06:58,720
the pickle module does come with a

00:06:56,720 --> 00:07:01,440
warning saying it's not secure

00:06:58,720 --> 00:07:02,960
only on pick or data that you trust and

00:07:01,440 --> 00:07:04,800
in this case

00:07:02,960 --> 00:07:06,639
technically the data was trusted because

00:07:04,800 --> 00:07:08,000
it was signed with the secret key but

00:07:06,639 --> 00:07:09,120
unfortunately the secret key had been

00:07:08,000 --> 00:07:13,919
given away

00:07:09,120 --> 00:07:13,919
and so it was like a two-step weakness

00:07:14,880 --> 00:07:19,039
after doing all this blacklist was made

00:07:17,680 --> 00:07:21,599
able to claim the bounty

00:07:19,039 --> 00:07:24,160
facebook responded very quickly they

00:07:21,599 --> 00:07:26,880
took only 18 hours to patch the system

00:07:24,160 --> 00:07:27,759
and paid out the bounty two hours after

00:07:26,880 --> 00:07:30,240
that

00:07:27,759 --> 00:07:32,160
um as far as their bounty program goes

00:07:30,240 --> 00:07:33,199
this was a relatively this was a lower

00:07:32,160 --> 00:07:36,319
tier bounty

00:07:33,199 --> 00:07:38,319
and if any user data had been at risk if

00:07:36,319 --> 00:07:40,479
this wasn't a prototype sentry instance

00:07:38,319 --> 00:07:43,599
they would pay more

00:07:40,479 --> 00:07:47,440
so what can we learn as uh aspiring

00:07:43,599 --> 00:07:47,440
django website hackers from this

00:07:47,759 --> 00:07:53,280
well there's really a few things

00:07:50,800 --> 00:07:54,240
to take away here first we can try and

00:07:53,280 --> 00:07:56,879
look for the

00:07:54,240 --> 00:07:57,280
debug mode being set an easy way to do

00:07:56,879 --> 00:07:59,440
that

00:07:57,280 --> 00:08:01,039
is to try and browse to urls that you're

00:07:59,440 --> 00:08:03,120
pretty sure don't exist

00:08:01,039 --> 00:08:06,160
and if you get back a 404 page that

00:08:03,120 --> 00:08:08,800
would be django's debug 404 page

00:08:06,160 --> 00:08:10,160
and then you might also want to try and

00:08:08,800 --> 00:08:13,280
force a crash

00:08:10,160 --> 00:08:15,280
um by pushing untested data and then get

00:08:13,280 --> 00:08:18,080
a 500 which will output all of the

00:08:15,280 --> 00:08:20,240
settings that you'd like to inspect

00:08:18,080 --> 00:08:21,919
uh it's also worth looking for things

00:08:20,240 --> 00:08:23,919
that seem to be using pickle

00:08:21,919 --> 00:08:25,520
anywhere pickle is used there will be

00:08:23,919 --> 00:08:29,440
maybe some kind of

00:08:25,520 --> 00:08:32,000
in and and you can also build

00:08:29,440 --> 00:08:34,080
more evil pickle payloads in the case of

00:08:32,000 --> 00:08:36,719
this hack blacklist only used the sleep

00:08:34,080 --> 00:08:38,640
31 to prove the vulnerability

00:08:36,719 --> 00:08:40,560
but you could build more interesting

00:08:38,640 --> 00:08:41,599
ones that um

00:08:40,560 --> 00:08:43,919
if you don't control when the

00:08:41,599 --> 00:08:45,440
deserialization happens they could ping

00:08:43,919 --> 00:08:46,560
you on your remote server and you could

00:08:45,440 --> 00:08:48,959
find out

00:08:46,560 --> 00:08:49,680
when that happened if you put on our

00:08:48,959 --> 00:08:52,399
other hats

00:08:49,680 --> 00:08:53,279
about defending against these attacks

00:08:52,399 --> 00:08:55,279
well the

00:08:53,279 --> 00:08:56,399
main lesson here is never deploy a debug

00:08:55,279 --> 00:08:58,080
true like

00:08:56,399 --> 00:08:59,440
this is something that the django docs

00:08:58,080 --> 00:09:01,360
highly recommend against

00:08:59,440 --> 00:09:03,519
and we also have the system check

00:09:01,360 --> 00:09:05,680
framework to guard against it

00:09:03,519 --> 00:09:08,959
which you should run on every deployment

00:09:05,680 --> 00:09:11,279
using manage.pi check dash dash deploy

00:09:08,959 --> 00:09:13,680
and this will actually exit with a

00:09:11,279 --> 00:09:14,480
failure code if any setting like debug

00:09:13,680 --> 00:09:17,519
is set

00:09:14,480 --> 00:09:18,480
when it shouldn't be and we should also

00:09:17,519 --> 00:09:21,120
try and

00:09:18,480 --> 00:09:23,200
avoid using pickle as much as possible

00:09:21,120 --> 00:09:26,480
there isn't a safe mode for it

00:09:23,200 --> 00:09:28,640
um there are attempts out there to

00:09:26,480 --> 00:09:30,480
tighten it and prevent it from running

00:09:28,640 --> 00:09:32,080
completely arbitrary commands but i

00:09:30,480 --> 00:09:34,959
think there's normally a way around it

00:09:32,080 --> 00:09:37,680
thanks to the dynamism of python

00:09:34,959 --> 00:09:39,760
and finally we should look into

00:09:37,680 --> 00:09:40,480
deprecating the pickle serializer from

00:09:39,760 --> 00:09:42,320
django

00:09:40,480 --> 00:09:44,080
there is an open ticket for this it

00:09:42,320 --> 00:09:45,839
would just require a little more work to

00:09:44,080 --> 00:09:51,839
figure out some corner cases

00:09:45,839 --> 00:09:51,839
in the sessions framework

00:09:52,240 --> 00:09:55,519
now for story two

00:09:56,320 --> 00:10:02,320
this one comes from github

00:09:59,360 --> 00:10:04,720
and it was summarized nicely by the

00:10:02,320 --> 00:10:07,839
person who found it in a blog post

00:10:04,720 --> 00:10:11,279
john gracie okay it was um

00:10:07,839 --> 00:10:13,760
announced at the end of last year and

00:10:11,279 --> 00:10:15,120
um they found a way to take over

00:10:13,760 --> 00:10:18,320
someone's account

00:10:15,120 --> 00:10:20,959
using some features of unicode

00:10:18,320 --> 00:10:22,800
so the first step here was case

00:10:20,959 --> 00:10:25,839
collisions

00:10:22,800 --> 00:10:29,040
and what is a case collision

00:10:25,839 --> 00:10:31,200
so a new code all of the letters

00:10:29,040 --> 00:10:32,320
from all of the scripts that humans use

00:10:31,200 --> 00:10:36,160
are represented

00:10:32,320 --> 00:10:38,399
or are planned to be represented and

00:10:36,160 --> 00:10:39,839
uppercase and lowercase are not simple

00:10:38,399 --> 00:10:41,120
concepts they're not a one-to-one

00:10:39,839 --> 00:10:44,320
mapping

00:10:41,120 --> 00:10:45,040
so you might see on the left here we

00:10:44,320 --> 00:10:48,160
have two

00:10:45,040 --> 00:10:51,440
lowercase versions of the string github

00:10:48,160 --> 00:10:54,240
that would uppercase to the same github

00:10:51,440 --> 00:10:55,040
uppercase github on the right and the

00:10:54,240 --> 00:10:57,760
first one

00:10:55,040 --> 00:10:59,279
uses an i without a dot this is a

00:10:57,760 --> 00:11:02,640
turkish letter

00:10:59,279 --> 00:11:04,640
and the one on the bottom uses the

00:11:02,640 --> 00:11:06,480
latin i with a dot that we're used to

00:11:04,640 --> 00:11:08,480
using in english

00:11:06,480 --> 00:11:10,000
both these strings map to the same

00:11:08,480 --> 00:11:12,240
uppercase string

00:11:10,000 --> 00:11:14,000
so there's some potential for confusion

00:11:12,240 --> 00:11:16,880
there especially if the code

00:11:14,000 --> 00:11:18,399
we're investigating uh does a case in

00:11:16,880 --> 00:11:21,600
sensitive comparison

00:11:18,399 --> 00:11:22,320
and performs that by uppercasing or one

00:11:21,600 --> 00:11:23,839
string

00:11:22,320 --> 00:11:25,760
uppercasing the two strings that it's

00:11:23,839 --> 00:11:28,640
comparing

00:11:25,760 --> 00:11:29,519
in english there aren't that many case

00:11:28,640 --> 00:11:32,079
collisions

00:11:29,519 --> 00:11:33,760
this is thought to be an exhaustive list

00:11:32,079 --> 00:11:37,040
of all of the ligatures

00:11:33,760 --> 00:11:39,120
and letters in unicode that would

00:11:37,040 --> 00:11:41,600
collide with some english letters

00:11:39,120 --> 00:11:43,120
but we can see there's quite quite a few

00:11:41,600 --> 00:11:44,880
combinations still

00:11:43,120 --> 00:11:46,320
and so if we're trying to find a

00:11:44,880 --> 00:11:46,720
collision with a string that features a

00:11:46,320 --> 00:11:49,920
double

00:11:46,720 --> 00:11:52,399
s an i or an s a double f an

00:11:49,920 --> 00:11:53,600
s t then there are these letters and

00:11:52,399 --> 00:11:55,920
ligatures on the

00:11:53,600 --> 00:11:57,600
left that would collide the dotless eye

00:11:55,920 --> 00:12:01,279
from turkish the shellfish s

00:11:57,600 --> 00:12:01,279
from german and so on

00:12:02,560 --> 00:12:05,600
having found one of these case

00:12:03,680 --> 00:12:08,079
collisions and john

00:12:05,600 --> 00:12:08,839
gracie managed to register a domain

00:12:08,079 --> 00:12:12,639
which was

00:12:08,839 --> 00:12:15,440
github.com without the dot on the eye

00:12:12,639 --> 00:12:17,279
and when you uh all unicode domains are

00:12:15,440 --> 00:12:19,600
available for registration now

00:12:17,279 --> 00:12:21,040
it depends on the top level provider as

00:12:19,600 --> 00:12:23,519
to how much they support but

00:12:21,040 --> 00:12:24,639
com seems to support most of them and

00:12:23,519 --> 00:12:27,760
they're supported with

00:12:24,639 --> 00:12:31,680
a system called puny code which is a an

00:12:27,760 --> 00:12:33,920
ascii based encoding of unicode

00:12:31,680 --> 00:12:36,160
because some of the dns system does not

00:12:33,920 --> 00:12:38,720
support actual unicode underneath

00:12:36,160 --> 00:12:41,279
so this is the technical domain that was

00:12:38,720 --> 00:12:43,920
actually registered

00:12:41,279 --> 00:12:44,959
and and the bug that john gracie had

00:12:43,920 --> 00:12:47,120
found was that

00:12:44,959 --> 00:12:48,639
you could get a password reset for the

00:12:47,120 --> 00:12:50,880
wrong email address

00:12:48,639 --> 00:12:52,000
which allows complete a takeover by just

00:12:50,880 --> 00:12:54,800
changing the password on that

00:12:52,000 --> 00:12:56,800
account so if you went to the github's

00:12:54,800 --> 00:13:01,440
password reset form and you entered

00:12:56,800 --> 00:13:03,839
john at dotlessi github.com

00:13:01,440 --> 00:13:05,519
it would search in the database for that

00:13:03,839 --> 00:13:09,920
string uppercased

00:13:05,519 --> 00:13:12,079
it would find john dotted i github.com

00:13:09,920 --> 00:13:14,000
and say okay that account exists but

00:13:12,079 --> 00:13:15,040
then it would reuse the email address

00:13:14,000 --> 00:13:18,880
input in the form

00:13:15,040 --> 00:13:20,480
to send the actual password reset so

00:13:18,880 --> 00:13:22,320
you could take over the account of

00:13:20,480 --> 00:13:25,360
someone

00:13:22,320 --> 00:13:26,959
at github.com or anyone whose

00:13:25,360 --> 00:13:29,519
email address had a case collision

00:13:26,959 --> 00:13:29,519
effectively

00:13:29,839 --> 00:13:33,120
once you've reset the password you get

00:13:31,680 --> 00:13:35,360
in their account you unleash

00:13:33,120 --> 00:13:37,279
whatever chaos you want to do you could

00:13:35,360 --> 00:13:38,320
export all their data so you can look

00:13:37,279 --> 00:13:41,279
for it later

00:13:38,320 --> 00:13:42,160
delete the account pretend to be them

00:13:41,279 --> 00:13:46,399
make

00:13:42,160 --> 00:13:46,399
high profile commits etc

00:13:46,720 --> 00:13:49,839
this bug was in github which is in ruby

00:13:48,880 --> 00:13:53,440
on rails but

00:13:49,839 --> 00:13:56,240
it also existed in django contrib off

00:13:53,440 --> 00:13:57,440
and it was spotted by technical board

00:13:56,240 --> 00:14:00,399
member simon charette

00:13:57,440 --> 00:14:02,000
after he'd read about github's exploit

00:14:00,399 --> 00:14:04,560
he checked inside

00:14:02,000 --> 00:14:06,560
django country both and there it was so

00:14:04,560 --> 00:14:08,079
the fix for this went out on december

00:14:06,560 --> 00:14:09,600
18th last year

00:14:08,079 --> 00:14:14,160
and it's only in these versions of

00:14:09,600 --> 00:14:14,160
django and three one as well that it is

00:14:14,839 --> 00:14:18,480
fixed

00:14:16,000 --> 00:14:20,720
what lessons can we take away here for

00:14:18,480 --> 00:14:22,959
hacking django websites

00:14:20,720 --> 00:14:25,199
well first we can look for targets with

00:14:22,959 --> 00:14:27,120
unicode case collisions

00:14:25,199 --> 00:14:28,480
if we're trying to hack a website that

00:14:27,120 --> 00:14:30,399
has an eye in it

00:14:28,480 --> 00:14:32,639
then we already know that there's a case

00:14:30,399 --> 00:14:34,720
collision if not perhaps we want to look

00:14:32,639 --> 00:14:36,160
inside user names for double s's

00:14:34,720 --> 00:14:39,279
eyes and anything else that was in that

00:14:36,160 --> 00:14:40,959
table and it would also be expanded if

00:14:39,279 --> 00:14:42,639
you weren't looking in english there's

00:14:40,959 --> 00:14:45,839
probably other case collisions

00:14:42,639 --> 00:14:48,160
in with letters in different languages

00:14:45,839 --> 00:14:49,600
it's also worth knowing other freaky

00:14:48,160 --> 00:14:52,079
features of unicode

00:14:49,600 --> 00:14:52,800
that programmers tend not to account for

00:14:52,079 --> 00:14:54,079
um

00:14:52,800 --> 00:14:55,760
for example there are a lot of

00:14:54,079 --> 00:14:57,279
characters that look the same and these

00:14:55,760 --> 00:14:57,839
have been used in a number of attacks

00:14:57,279 --> 00:14:59,600
like

00:14:57,839 --> 00:15:01,839
phishing domains that seem to be from

00:14:59,600 --> 00:15:04,480
your bank but aren't actually

00:15:01,839 --> 00:15:06,240
and and since there this is a known

00:15:04,480 --> 00:15:09,839
vulnerability that affects

00:15:06,240 --> 00:15:11,519
uh django and we could find out

00:15:09,839 --> 00:15:13,519
and we know which django versions it

00:15:11,519 --> 00:15:15,440
affects if we could detect

00:15:13,519 --> 00:15:16,800
a site we're trying to attacks django

00:15:15,440 --> 00:15:18,560
version then

00:15:16,800 --> 00:15:20,320
we could uh figure out whether this

00:15:18,560 --> 00:15:23,279
attack would work

00:15:20,320 --> 00:15:24,800
without much effort there are some tools

00:15:23,279 --> 00:15:26,720
out there for doing this

00:15:24,800 --> 00:15:28,959
and called like django version detection

00:15:26,720 --> 00:15:32,079
etc and the main way they work

00:15:28,959 --> 00:15:34,160
is by accessing a known file like the

00:15:32,079 --> 00:15:36,720
admin css file

00:15:34,160 --> 00:15:38,800
and checking for strings in it that were

00:15:36,720 --> 00:15:40,240
known to be added or deleted in specific

00:15:38,800 --> 00:15:42,079
django versions

00:15:40,240 --> 00:15:45,360
this can normally fingerprint the

00:15:42,079 --> 00:15:47,759
version of django quite accurately

00:15:45,360 --> 00:15:48,800
if we put on a defense hat what can we

00:15:47,759 --> 00:15:51,839
do here

00:15:48,800 --> 00:15:52,320
well i think the main lesson to take

00:15:51,839 --> 00:15:57,040
away

00:15:52,320 --> 00:16:00,000
is to upgrade django and this kind of

00:15:57,040 --> 00:16:01,120
weird obscure attack that nobody really

00:16:00,000 --> 00:16:02,800
predicted

00:16:01,120 --> 00:16:04,800
that affects even the best sites in the

00:16:02,800 --> 00:16:07,120
world and

00:16:04,800 --> 00:16:08,720
you can't proactively defend against it

00:16:07,120 --> 00:16:09,680
but if you keep on the latest version of

00:16:08,720 --> 00:16:12,160
django

00:16:09,680 --> 00:16:14,240
you will have all of the accumulated

00:16:12,160 --> 00:16:16,480
wisdom and defense against these

00:16:14,240 --> 00:16:18,000
so definitely it's worth subscribing to

00:16:16,480 --> 00:16:23,120
the django web blog

00:16:18,000 --> 00:16:26,160
and keeping track of the latest version

00:16:23,120 --> 00:16:30,480
my third story uh comes courtesy of

00:16:26,160 --> 00:16:33,759
y plan my employer from 2014 to 16.

00:16:30,480 --> 00:16:35,839
we were an events e-commerce app and

00:16:33,759 --> 00:16:37,040
we had several of the usual features

00:16:35,839 --> 00:16:40,399
that you'd expect

00:16:37,040 --> 00:16:42,000
like accounts ability to set your name

00:16:40,399 --> 00:16:43,839
purchase things and see your purchase

00:16:42,000 --> 00:16:46,240
list etc

00:16:43,839 --> 00:16:48,160
my colleague tom granger figured out

00:16:46,240 --> 00:16:50,399
that if he added html

00:16:48,160 --> 00:16:52,240
to his name in the app it would get

00:16:50,399 --> 00:16:55,040
rendered in the admin

00:16:52,240 --> 00:16:57,120
so his first step was to open the app

00:16:55,040 --> 00:16:58,959
and set his name to tom

00:16:57,120 --> 00:17:00,639
and then a script tag that included

00:16:58,959 --> 00:17:04,880
alert catface

00:17:00,639 --> 00:17:06,880
emoji then he just needed to wait

00:17:04,880 --> 00:17:08,880
whenever a staff member would browse the

00:17:06,880 --> 00:17:12,079
admin then

00:17:08,880 --> 00:17:15,120
his cat emoji face would appear and

00:17:12,079 --> 00:17:18,160
we would get complaints uh

00:17:15,120 --> 00:17:20,240
what was the problem here

00:17:18,160 --> 00:17:21,600
well the main problem was within our

00:17:20,240 --> 00:17:23,679
custom admin code

00:17:21,600 --> 00:17:25,120
and we'd use this mark save function

00:17:23,679 --> 00:17:29,919
which is decidedly

00:17:25,120 --> 00:17:32,080
not safe our user admin class

00:17:29,919 --> 00:17:33,679
said to list a few fields one of these

00:17:32,080 --> 00:17:36,000
was called full name

00:17:33,679 --> 00:17:37,679
which we defined on the admin class as

00:17:36,000 --> 00:17:38,880
the concatenation of the first name and

00:17:37,679 --> 00:17:41,120
last name

00:17:38,880 --> 00:17:42,240
and for some reason we wanted some html

00:17:41,120 --> 00:17:44,720
wrapping that

00:17:42,240 --> 00:17:45,600
so we added the html inside that

00:17:44,720 --> 00:17:47,440
function

00:17:45,600 --> 00:17:48,960
and when we called mark safe on the

00:17:47,440 --> 00:17:52,160
resulting string

00:17:48,960 --> 00:17:54,480
and mark save is needed for this html

00:17:52,160 --> 00:17:55,280
to not get escaped and show us actual

00:17:54,480 --> 00:17:57,200
literal

00:17:55,280 --> 00:17:58,720
less than greater than science in the

00:17:57,200 --> 00:18:00,880
html

00:17:58,720 --> 00:18:01,840
and unfortunately this meant that we're

00:18:00,880 --> 00:18:04,480
implicitly

00:18:01,840 --> 00:18:06,880
trusting all of the data that users

00:18:04,480 --> 00:18:08,720
could set in their first and last names

00:18:06,880 --> 00:18:11,360
which meant anyone putting a script tag

00:18:08,720 --> 00:18:14,400
in there would get that script executed

00:18:11,360 --> 00:18:16,880
from within the admin page all of the

00:18:14,400 --> 00:18:19,919
html that users provided was basically

00:18:16,880 --> 00:18:22,400
unsafely injected into the admin

00:18:19,919 --> 00:18:23,039
this is what we'd call an html injection

00:18:22,400 --> 00:18:24,880
attack or

00:18:23,039 --> 00:18:26,640
some kind sometimes called cross-site

00:18:24,880 --> 00:18:27,120
scripting because you can include a

00:18:26,640 --> 00:18:29,840
script

00:18:27,120 --> 00:18:29,840
from another site

00:18:30,480 --> 00:18:33,840
the solution here is to use a helper

00:18:32,559 --> 00:18:36,960
function from within

00:18:33,840 --> 00:18:39,679
django it's called format html

00:18:36,960 --> 00:18:40,799
and this can take your trusted piece of

00:18:39,679 --> 00:18:44,000
html

00:18:40,799 --> 00:18:47,200
with format tags similar to how

00:18:44,000 --> 00:18:50,640
a string.format works and

00:18:47,200 --> 00:18:53,679
safely add the untrusted user data

00:18:50,640 --> 00:18:55,600
in at the appropriate points if we are

00:18:53,679 --> 00:18:56,000
doing a list of things together we could

00:18:55,600 --> 00:18:59,919
also use

00:18:56,000 --> 00:18:59,919
the format html drawing function

00:19:06,559 --> 00:19:10,240
what lessons can we take away as hackers

00:19:08,640 --> 00:19:13,039
from this

00:19:10,240 --> 00:19:13,760
well we can try adding html to every

00:19:13,039 --> 00:19:17,679
field

00:19:13,760 --> 00:19:19,679
that we have control over it's

00:19:17,679 --> 00:19:23,840
quite common that there'll be some kind

00:19:19,679 --> 00:19:26,559
of injection vulnerability unfortunately

00:19:23,840 --> 00:19:28,240
moreover it only needs to be in one

00:19:26,559 --> 00:19:31,760
field that we have control over

00:19:28,240 --> 00:19:33,679
for it to work uh even if the developer

00:19:31,760 --> 00:19:35,600
gets 99 out of 100 correct

00:19:33,679 --> 00:19:38,080
the one broken one would allow us to

00:19:35,600 --> 00:19:39,520
execute whatever html we like on their

00:19:38,080 --> 00:19:41,280
website

00:19:39,520 --> 00:19:43,520
uh one way to keep a track of this is to

00:19:41,280 --> 00:19:46,320
use the beacon resources

00:19:43,520 --> 00:19:47,600
if we had uh script tags with the source

00:19:46,320 --> 00:19:50,480
or images

00:19:47,600 --> 00:19:52,240
that referred to um different urls for

00:19:50,480 --> 00:19:54,240
each field that we put them in

00:19:52,240 --> 00:19:56,080
and the first one that we see get an

00:19:54,240 --> 00:19:56,799
actual hips that could be the one that

00:19:56,080 --> 00:19:59,039
we know

00:19:56,799 --> 00:20:00,080
um that lets us know which fields are

00:19:59,039 --> 00:20:02,000
vulnerable

00:20:00,080 --> 00:20:03,679
and this is especially important for

00:20:02,000 --> 00:20:04,480
things like the context we're looking at

00:20:03,679 --> 00:20:07,679
here

00:20:04,480 --> 00:20:10,240
where the uh actual execution

00:20:07,679 --> 00:20:11,200
that of the html was in the admin area

00:20:10,240 --> 00:20:15,520
that we would never

00:20:11,200 --> 00:20:18,159
be able to access as a pure customer

00:20:15,520 --> 00:20:19,840
putting on our protection hat well i

00:20:18,159 --> 00:20:23,120
think the first lesson is not to

00:20:19,840 --> 00:20:25,039
copy any code with mark safe and

00:20:23,120 --> 00:20:27,679
i think there must be a tutorial out

00:20:25,039 --> 00:20:29,760
there that we copied the admin code from

00:20:27,679 --> 00:20:31,440
and because i've seen the same pattern

00:20:29,760 --> 00:20:32,559
appear in several other admin classes

00:20:31,440 --> 00:20:35,440
since

00:20:32,559 --> 00:20:37,280
and one thing that has been discussed

00:20:35,440 --> 00:20:39,679
several times on django developers

00:20:37,280 --> 00:20:41,200
is to rename the mark save function

00:20:39,679 --> 00:20:43,120
because it isn't safe

00:20:41,200 --> 00:20:44,640
and and perhaps the name is leading

00:20:43,120 --> 00:20:47,760
people to think that it is

00:20:44,640 --> 00:20:50,880
it's safe to use um

00:20:47,760 --> 00:20:52,559
arbitrarily and the third defense

00:20:50,880 --> 00:20:54,880
will be through this security header

00:20:52,559 --> 00:20:57,600
called content security policy

00:20:54,880 --> 00:20:59,120
and this ties into my talk last year on

00:20:57,600 --> 00:21:01,600
security headers

00:20:59,120 --> 00:21:03,440
and with content security policy you can

00:21:01,600 --> 00:21:06,000
tell the browser a policy

00:21:03,440 --> 00:21:07,760
for blocking resources in scripts and

00:21:06,000 --> 00:21:11,200
images etc that you

00:21:07,760 --> 00:21:13,520
don't trust so that would allow you to

00:21:11,200 --> 00:21:15,679
basically ban the inline script tag that

00:21:13,520 --> 00:21:18,640
tom had used alert like cad emoji

00:21:15,679 --> 00:21:19,360
and any other sources that you don't

00:21:18,640 --> 00:21:22,799
trust

00:21:19,360 --> 00:21:22,799
and it would never be a problem

00:21:23,760 --> 00:21:27,760
and now for our fourth story this one

00:21:26,000 --> 00:21:28,960
has happened on lots of sites that i've

00:21:27,760 --> 00:21:31,120
looked into

00:21:28,960 --> 00:21:33,280
as a solo consultant one of the first

00:21:31,120 --> 00:21:36,000
things i do on a project is run a short

00:21:33,280 --> 00:21:36,880
audit and in pretty much every site i've

00:21:36,000 --> 00:21:39,120
looked into

00:21:36,880 --> 00:21:41,440
over the past year year and a half i

00:21:39,120 --> 00:21:44,080
found some variant of this

00:21:41,440 --> 00:21:45,360
and it depends on it does vary how

00:21:44,080 --> 00:21:48,799
exploitable it is

00:21:45,360 --> 00:21:50,960
but it's a recurring theme

00:21:48,799 --> 00:21:52,400
it's a bit of a variant on the last one

00:21:50,960 --> 00:21:55,120
and

00:21:52,400 --> 00:21:56,559
again we'd include some html in a field

00:21:55,120 --> 00:21:59,600
that we control

00:21:56,559 --> 00:22:00,400
and and we'd see this html get injected

00:21:59,600 --> 00:22:02,880
later

00:22:00,400 --> 00:22:03,600
but in this case the key is that um the

00:22:02,880 --> 00:22:06,320
html

00:22:03,600 --> 00:22:07,919
starts with a closing script tag and

00:22:06,320 --> 00:22:10,320
we'll see why this is important in a

00:22:07,919 --> 00:22:10,320
second

00:22:10,960 --> 00:22:14,880
normally there's a view that does

00:22:13,039 --> 00:22:17,919
something like this

00:22:14,880 --> 00:22:18,880
so there'd be some structure of data to

00:22:17,919 --> 00:22:21,840
be passed through

00:22:18,880 --> 00:22:22,880
to the javascript that runs on the page

00:22:21,840 --> 00:22:24,960
and that could be

00:22:22,880 --> 00:22:26,640
like this dictionary here that includes

00:22:24,960 --> 00:22:29,039
the user's name

00:22:26,640 --> 00:22:30,559
and this is being turned into json here

00:22:29,039 --> 00:22:32,559
adjacent string

00:22:30,559 --> 00:22:35,600
pass through to the template in this

00:22:32,559 --> 00:22:38,240
user.json variable

00:22:35,600 --> 00:22:40,640
and then the template in lines the json

00:22:38,240 --> 00:22:43,840
inside a piece of javascript

00:22:40,640 --> 00:22:46,799
so here we have it happening

00:22:43,840 --> 00:22:48,480
json is a subset of javascript so this

00:22:46,799 --> 00:22:51,520
looks like it would be safe

00:22:48,480 --> 00:22:54,480
and and that's and the pipe safe

00:22:51,520 --> 00:22:55,200
is needed here pipe safe is that

00:22:54,480 --> 00:22:58,400
function

00:22:55,200 --> 00:23:01,679
we saw earlier mark safe just by another

00:22:58,400 --> 00:23:03,280
name that's the template filter version

00:23:01,679 --> 00:23:06,240
well you might have guessed that the

00:23:03,280 --> 00:23:08,080
safe is not safe here

00:23:06,240 --> 00:23:11,600
because we would get that cat alert

00:23:08,080 --> 00:23:11,600
appearing from my name

00:23:13,200 --> 00:23:17,520
the problem here is that the html parses

00:23:16,000 --> 00:23:20,240
first

00:23:17,520 --> 00:23:22,159
so this is the output from that template

00:23:20,240 --> 00:23:24,880
fragment we were looking at

00:23:22,159 --> 00:23:26,080
and at first glance this looks like a

00:23:24,880 --> 00:23:28,640
script tag

00:23:26,080 --> 00:23:30,240
a single script tag that contains a

00:23:28,640 --> 00:23:31,919
valid piece of javascript in the middle

00:23:30,240 --> 00:23:34,000
that sets the user with a name

00:23:31,919 --> 00:23:35,919
and then there's a some stuff inside the

00:23:34,000 --> 00:23:38,960
string but this is all a valid

00:23:35,919 --> 00:23:41,520
javascript string so it should be fine

00:23:38,960 --> 00:23:42,320
unfortunately the first impression is

00:23:41,520 --> 00:23:44,720
wrong

00:23:42,320 --> 00:23:47,760
the browser when it's parsing the html

00:23:44,720 --> 00:23:51,120
does not pass the javascript within it

00:23:47,760 --> 00:23:52,080
so this first script tag starts a

00:23:51,120 --> 00:23:53,919
context

00:23:52,080 --> 00:23:56,320
whilst the html parses running that's

00:23:53,919 --> 00:23:59,360
simply looking for a closing script tag

00:23:56,320 --> 00:24:01,279
and so it ends at this point so this

00:23:59,360 --> 00:24:03,279
first script tag

00:24:01,279 --> 00:24:05,360
has basically a fragment of javascript

00:24:03,279 --> 00:24:06,880
and when this gets executed it would be

00:24:05,360 --> 00:24:09,600
a syntax error because there's an

00:24:06,880 --> 00:24:11,360
unfinished string here

00:24:09,600 --> 00:24:12,720
then there's this second script tag that

00:24:11,360 --> 00:24:14,799
i'd entered in my name

00:24:12,720 --> 00:24:16,799
and the javascript within this is

00:24:14,799 --> 00:24:17,520
perfectly valid it's a call to alert a

00:24:16,799 --> 00:24:20,400
cat face

00:24:17,520 --> 00:24:21,360
so that's what we get and then there's a

00:24:20,400 --> 00:24:24,000
trailing piece

00:24:21,360 --> 00:24:25,760
of code with a closing script tag and i

00:24:24,000 --> 00:24:28,400
think most browsers would simply

00:24:25,760 --> 00:24:31,679
ignore this and because they try and

00:24:28,400 --> 00:24:35,200
parse html in a very lenient way

00:24:31,679 --> 00:24:35,200
so what's the solution here

00:24:35,279 --> 00:24:39,279
and the solution is a filter that's

00:24:37,279 --> 00:24:42,320
actually built into django since

00:24:39,279 --> 00:24:43,919
version two called jsonscript the way

00:24:42,320 --> 00:24:44,799
we'd use this is we'd pass our

00:24:43,919 --> 00:24:46,640
dictionary

00:24:44,799 --> 00:24:49,520
without json encoding through to the

00:24:46,640 --> 00:24:51,760
template in the variable user here

00:24:49,520 --> 00:24:53,200
and then we'd use the filter json script

00:24:51,760 --> 00:24:55,440
with some string

00:24:53,200 --> 00:24:57,279
as an identifier for the element that

00:24:55,440 --> 00:24:59,520
should generate

00:24:57,279 --> 00:25:01,520
then our script becomes completely

00:24:59,520 --> 00:25:05,440
static it could even be moved to

00:25:01,520 --> 00:25:07,279
an a separate file and

00:25:05,440 --> 00:25:08,960
and what this does is it retrieves the

00:25:07,279 --> 00:25:14,000
contents of this script tag

00:25:08,960 --> 00:25:15,840
using the um dom api get element by id

00:25:14,000 --> 00:25:17,440
when this is rendered it looks like this

00:25:15,840 --> 00:25:20,000
which can make it a little bit more

00:25:17,440 --> 00:25:20,880
easier to understand so that first

00:25:20,000 --> 00:25:23,760
script tag

00:25:20,880 --> 00:25:25,679
coming from the json script filter um it

00:25:23,760 --> 00:25:29,279
declares its type is json

00:25:25,679 --> 00:25:32,720
it has the id that we passed it and

00:25:29,279 --> 00:25:35,200
within that there's this uh json

00:25:32,720 --> 00:25:36,799
dictionary that we that we passed

00:25:35,200 --> 00:25:40,000
through

00:25:36,799 --> 00:25:42,960
but most importantly the script

00:25:40,000 --> 00:25:45,360
the html that defined the script tags

00:25:42,960 --> 00:25:47,679
has been turned into

00:25:45,360 --> 00:25:48,720
unicode element ids in the javascript

00:25:47,679 --> 00:25:51,440
string

00:25:48,720 --> 00:25:53,039
so these will no longer be parsed by the

00:25:51,440 --> 00:25:55,600
browser as html

00:25:53,039 --> 00:25:56,880
they'll simply be seen later by the

00:25:55,600 --> 00:25:58,640
javascript parser

00:25:56,880 --> 00:26:01,039
and turn back into the corresponding

00:25:58,640 --> 00:26:01,039
elements

00:26:01,679 --> 00:26:07,039
the code is using getelement ident by id

00:26:04,960 --> 00:26:08,720
to look up that script tag it look up

00:26:07,039 --> 00:26:11,840
the text content within it

00:26:08,720 --> 00:26:13,440
and then pause that with jason and i

00:26:11,840 --> 00:26:14,400
wrote a blog post on this because it's

00:26:13,440 --> 00:26:17,760
so important

00:26:14,400 --> 00:26:17,760
so you could go check that out

00:26:18,320 --> 00:26:21,679
as hackers what extra can we learn here

00:26:20,960 --> 00:26:23,679
and

00:26:21,679 --> 00:26:25,679
the first thing is to look through the

00:26:23,679 --> 00:26:28,320
generated pages on a site

00:26:25,679 --> 00:26:30,400
for inline script tags that seem to be

00:26:28,320 --> 00:26:32,880
passing data through

00:26:30,400 --> 00:26:36,159
anything that contains some data is

00:26:32,880 --> 00:26:36,159
potentially exploitable

00:26:36,320 --> 00:26:41,200
and uh similarly to looking for other

00:26:39,520 --> 00:26:43,840
html injection attacks

00:26:41,200 --> 00:26:44,720
we can try using a closing script tag at

00:26:43,840 --> 00:26:47,039
the start of

00:26:44,720 --> 00:26:49,760
html that we stuff into fields that we

00:26:47,039 --> 00:26:52,320
have control over

00:26:49,760 --> 00:26:53,039
for protection while we can use json

00:26:52,320 --> 00:26:55,279
script

00:26:53,039 --> 00:26:56,960
or other solutions that don't exist

00:26:55,279 --> 00:26:59,840
within django

00:26:56,960 --> 00:27:01,360
and we can also use our friend content

00:26:59,840 --> 00:27:04,840
security policy again

00:27:01,360 --> 00:27:07,840
to block any resources that we don't

00:27:04,840 --> 00:27:07,840
trust

00:27:13,120 --> 00:27:17,520
i'm going to squeeze in a quick bonus

00:27:14,799 --> 00:27:19,039
here for the talk after these stories

00:27:17,520 --> 00:27:21,039
so if you are concerned about your

00:27:19,039 --> 00:27:23,159
site's security there's a

00:27:21,039 --> 00:27:24,720
standard out that's fairly new called

00:27:23,159 --> 00:27:27,440
security.txt

00:27:24,720 --> 00:27:29,039
the idea here is that you serve up a

00:27:27,440 --> 00:27:32,159
file a well-known url

00:27:29,039 --> 00:27:34,480
on your site with a machine readable

00:27:32,159 --> 00:27:36,399
format for your contact information if

00:27:34,480 --> 00:27:38,960
there is a security vulnerability

00:27:36,399 --> 00:27:39,760
and this allows researchers who might

00:27:38,960 --> 00:27:41,840
just happening

00:27:39,760 --> 00:27:43,600
to be scanning all the websites that

00:27:41,840 --> 00:27:46,840
they're going to get access to

00:27:43,600 --> 00:27:48,720
and to report issues that they find to

00:27:46,840 --> 00:27:50,960
you

00:27:48,720 --> 00:27:52,960
and to serve this out of django it

00:27:50,960 --> 00:27:54,960
doesn't take very much code

00:27:52,960 --> 00:27:56,279
here's an example review that serves the

00:27:54,960 --> 00:27:58,720
bare minimum

00:27:56,279 --> 00:28:01,279
security.txt that has a single line in

00:27:58,720 --> 00:28:03,679
it that has an email address

00:28:01,279 --> 00:28:06,080
and i wrote a blog post on serving

00:28:03,679 --> 00:28:08,159
well-known urls that uses security.txt

00:28:06,080 --> 00:28:11,600
as an example

00:28:08,159 --> 00:28:13,760
you can go a bit more advanced and

00:28:11,600 --> 00:28:15,200
here's the for example here's the one on

00:28:13,760 --> 00:28:18,480
my own website which

00:28:15,200 --> 00:28:20,159
shows that it was signed with my pgp key

00:28:18,480 --> 00:28:22,720
and contains several different forms of

00:28:20,159 --> 00:28:24,960
content

00:28:22,720 --> 00:28:27,039
nothing remains but for me to say thank

00:28:24,960 --> 00:28:29,200
you very much for listening to my talk

00:28:27,039 --> 00:28:30,640
i'm adam johnson and these are my

00:28:29,200 --> 00:28:32,640
contact details

00:28:30,640 --> 00:28:34,720
the slides for this talk will go up in

00:28:32,640 --> 00:28:37,120
this github repository

00:28:34,720 --> 00:28:37,120
thank you

00:28:40,640 --> 00:28:45,200
i was thinking during a i was thinking

00:28:44,559 --> 00:28:48,080
during

00:28:45,200 --> 00:28:49,760
your talk if something like you find

00:28:48,080 --> 00:28:53,200
another

00:28:49,760 --> 00:28:57,039
website is still in

00:28:53,200 --> 00:29:00,399
for example the django admin

00:28:57,039 --> 00:29:04,000
code in the html part or

00:29:00,399 --> 00:29:09,279
if someone have scanned

00:29:04,000 --> 00:29:09,279
the html code in django itself

00:29:09,360 --> 00:29:14,279
so uh tom granger who i mentioned with

00:29:12,480 --> 00:29:16,080
the cat emojis actually back in like

00:29:14,279 --> 00:29:18,240
2015 or something

00:29:16,080 --> 00:29:20,880
he moved to django admin to be fully

00:29:18,240 --> 00:29:24,399
content security policy compatible

00:29:20,880 --> 00:29:26,640
so it's very unlikely there are any um

00:29:24,399 --> 00:29:28,640
major flaws in there anymore like the

00:29:26,640 --> 00:29:30,240
thing with html injection when passing

00:29:28,640 --> 00:29:32,559
to javascript

00:29:30,240 --> 00:29:34,640
and there's definitely a possibility

00:29:32,559 --> 00:29:36,240
like maybe some

00:29:34,640 --> 00:29:38,000
function in django is using mark safe

00:29:36,240 --> 00:29:39,200
when it shouldn't but i think these are

00:29:38,000 --> 00:29:40,960
generally

00:29:39,200 --> 00:29:44,480
it's it's pretty searched through like

00:29:40,960 --> 00:29:47,120
we have a lot of security fixes

00:29:44,480 --> 00:29:47,120
hopefully not

00:29:48,080 --> 00:29:55,840
okay thank you

00:30:30,720 --> 00:30:40,320
ah hello pascal marius

00:30:36,159 --> 00:30:40,320
great talk thank you very much thank you

00:30:45,120 --> 00:30:50,640
yes the same for me it was a great talk

00:30:48,080 --> 00:30:53,840
content security policies are

00:30:50,640 --> 00:30:57,360
really complicated do you have any

00:30:53,840 --> 00:30:58,159
advice or tips for uh at least a small

00:30:57,360 --> 00:31:00,399
set of

00:30:58,159 --> 00:31:01,840
must-haves that you should contain in

00:31:00,399 --> 00:31:03,600
them

00:31:01,840 --> 00:31:06,480
uh i think they're complicated because

00:31:03,600 --> 00:31:09,600
they act like an allow list mechanism

00:31:06,480 --> 00:31:12,000
and you can get away by like

00:31:09,600 --> 00:31:12,720
you can still allow like inline scripts

00:31:12,000 --> 00:31:15,360
and like

00:31:12,720 --> 00:31:16,880
still limit like the sources for your

00:31:15,360 --> 00:31:18,159
remote script tags

00:31:16,880 --> 00:31:19,919
but that doesn't really add much

00:31:18,159 --> 00:31:23,519
protection

00:31:19,919 --> 00:31:24,880
um so yeah it's kind of annoying to set

00:31:23,519 --> 00:31:27,760
it up

00:31:24,880 --> 00:31:29,120
there is a firefox extension that you

00:31:27,760 --> 00:31:31,519
can browse through a site

00:31:29,120 --> 00:31:32,159
and it will recommend a content security

00:31:31,519 --> 00:31:34,960
policy over

00:31:32,159 --> 00:31:36,480
out of everything that got loaded and

00:31:34,960 --> 00:31:38,880
that can be a good first step

00:31:36,480 --> 00:31:39,840
there's also it's report only mode so

00:31:38,880 --> 00:31:42,080
you can deploy

00:31:39,840 --> 00:31:44,840
a content security policy and have it

00:31:42,080 --> 00:31:47,600
report to a third party

00:31:44,840 --> 00:31:49,360
server uh whenever it gets uh whenever a

00:31:47,600 --> 00:31:51,120
browser detects something

00:31:49,360 --> 00:31:52,720
was loaded but it shouldn't have been

00:31:51,120 --> 00:31:56,159
and that can help you form

00:31:52,720 --> 00:31:57,840
uh a good csp there like a couple

00:31:56,159 --> 00:31:58,480
services that do this i think sentry

00:31:57,840 --> 00:32:02,080
does

00:31:58,480 --> 00:32:05,120
and um one by scott helm

00:32:02,080 --> 00:32:08,159
called uh report

00:32:05,120 --> 00:32:10,080
report uri yeah exactly yeah

00:32:08,159 --> 00:32:13,200
i don't know pascal might also have some

00:32:10,080 --> 00:32:13,200
experience setting this up

00:32:13,360 --> 00:32:16,720
i'm just annoyed by it i'm deeply

00:32:15,440 --> 00:32:19,919
disappointed

00:32:16,720 --> 00:32:21,600
i i tried to do it for my website but i

00:32:19,919 --> 00:32:23,200
it's still in the report only state

00:32:21,600 --> 00:32:25,919
because i

00:32:23,200 --> 00:32:27,679
included google maps and there's no

00:32:25,919 --> 00:32:30,159
point in activating it if you have

00:32:27,679 --> 00:32:30,799
google maps allowed because their jsonp

00:32:30,159 --> 00:32:34,320
endpoint

00:32:30,799 --> 00:32:35,440
just allows to for anyone to execute

00:32:34,320 --> 00:32:37,039
arbitrary

00:32:35,440 --> 00:32:38,480
javascript and i'm really annoyed it was

00:32:37,039 --> 00:32:40,080
very complicated to get google maps

00:32:38,480 --> 00:32:43,279
running in the first place

00:32:40,080 --> 00:32:44,080
and it's upsetting yes it's surprising

00:32:43,279 --> 00:32:47,519
isn't it

00:32:44,080 --> 00:32:47,519
yes come on google

00:32:50,320 --> 00:32:54,880
thanks as you can see my kids are here

00:32:52,320 --> 00:32:57,120
so it's hard to ask questions

00:32:54,880 --> 00:32:57,120
thanks

00:33:08,720 --> 00:33:16,640
the use of um json script tag

00:33:13,840 --> 00:33:18,960
and the one i tried to suggest to

00:33:16,640 --> 00:33:23,120
password before but i think is

00:33:18,960 --> 00:33:27,200
the main ca the casey provides to

00:33:23,120 --> 00:33:30,159
to show to us it was a bit different

00:33:27,200 --> 00:33:30,720
uh i don't know if there is some

00:33:30,159 --> 00:33:34,880
something

00:33:30,720 --> 00:33:34,880
not good in uh inline javascript

00:33:34,960 --> 00:33:41,919
in the html page

00:33:38,559 --> 00:33:41,919
if there's something not good

00:33:42,080 --> 00:33:48,640
yeah because you mean in my example yeah

00:33:45,360 --> 00:33:48,880
so just not to use inline javascript in

00:33:48,640 --> 00:33:51,760
the

00:33:48,880 --> 00:33:53,679
html i don't know if something in

00:33:51,760 --> 00:33:55,519
general

00:33:53,679 --> 00:33:57,360
that is that is good advice if you're

00:33:55,519 --> 00:33:59,120
using content security policy

00:33:57,360 --> 00:34:01,679
you'll want to activate its feature that

00:33:59,120 --> 00:34:04,960
disables inline scripts

00:34:01,679 --> 00:34:09,119
because they're normally uh

00:34:04,960 --> 00:34:12,480
emblematic of um an xss attack

00:34:09,119 --> 00:34:14,240
um like this injection thing so like in

00:34:12,480 --> 00:34:15,679
my example i was just keeping it simple

00:34:14,240 --> 00:34:19,280
but yes i it would have been better that

00:34:15,679 --> 00:34:19,280
i used a separate script file

00:34:19,760 --> 00:34:35,839
okay thank you now i think i recommend

00:34:21,839 --> 00:34:35,839
my blog post

00:34:57,520 --> 00:35:01,920
uh pascal i was wondering if you have

00:34:59,200 --> 00:35:04,960
security txt files file setup

00:35:01,920 --> 00:35:07,520
on your site no i did not

00:35:04,960 --> 00:35:08,320
actually i just learned from your talk

00:35:07,520 --> 00:35:09,599
about that

00:35:08,320 --> 00:35:12,320
that's really cool i think it's still

00:35:09,599 --> 00:35:14,000
pretty pretty new and unpublished

00:35:12,320 --> 00:35:15,359
it's it's really cool and that's

00:35:14,000 --> 00:35:17,280
definitely something i'm going to share

00:35:15,359 --> 00:35:20,000
with my colleagues

00:35:17,280 --> 00:35:20,880
that's definitely a takeaway and it's

00:35:20,000 --> 00:35:23,119
really cool

00:35:20,880 --> 00:35:24,320
i will i will do that for sure i think

00:35:23,119 --> 00:35:26,400
i've received one

00:35:24,320 --> 00:35:27,599
notification so far from someone

00:35:26,400 --> 00:35:29,040
scanning the web

00:35:27,599 --> 00:35:31,520
and they're talking like i don't have a

00:35:29,040 --> 00:35:35,520
dmarc record set up for my email

00:35:31,520 --> 00:35:39,040
oh i was just like i'll go do it i guess

00:35:35,520 --> 00:35:39,040
but it was a bit spammy

00:35:39,520 --> 00:35:43,440
but cool yeah i was very impressed with

00:35:42,160 --> 00:35:46,480
it so that i will

00:35:43,440 --> 00:35:46,480
i will for sure with it

00:35:50,079 --> 00:35:53,200
there is something missing from the

00:35:51,960 --> 00:35:56,480
djangoproject.com

00:35:53,200 --> 00:35:59,920
website what

00:35:56,480 --> 00:36:03,040
i scared scary txt this security

00:35:59,920 --> 00:36:04,160
maybe we can add it yep that that should

00:36:03,040 --> 00:36:13,839
be an issue

00:36:04,160 --> 00:36:13,839
django project

00:36:33,440 --> 00:36:38,240
so i think your talk was the last one of

00:36:36,320 --> 00:36:40,400
the day

00:36:38,240 --> 00:36:42,560
indeed yeah i think it's time to go join

00:36:40,400 --> 00:36:46,000
the closing remarks

00:36:42,560 --> 00:36:49,440
in like one minute okay

00:36:46,000 --> 00:36:55,839
so thanks again for the

00:36:49,440 --> 00:36:55,839

YouTube URL: https://www.youtube.com/watch?v=bvLJTNRpnt8


