Title: DjangoCon 2018 - An Intro to Docker for Djangonauts
Publication date: 2018-05-25
Playlist: DjangoCon Europe 2018 in Heidelberg
Description: 
	https://media.ccc.de/v/hd-14-an-intro-to-docker-for-djangonauts



If you've never used it before, Docker can be a little overwhelming. There is new vocabulary to learn, new commands to memorize, and new files to add to each project. Most resources fall into one of two camps: they teach you the bare bones of Docker but still leave you with too many questions to comfortably try it on your own, or they throw you into the deep end by assuming you're more familiar with Docker than you are.

In this talk, you will find that middle ground: a talk that doesn't assume you're familiar with Docker and so keeps everything simple, but leaves you with enough information that you can get started as soon as you leave the room. Together, we will step through the parts of a Dockerfile and learn what they do. Then, I'll introduce you to Docker Compose and explain why using it to run multiple containers is helpful. Finally, you will learn to run commands and execute scripts from the command line using Docker, how to enter a container and why you might need to, and what to do before you go home for the day.

This talk is for Djangonauts who are curious about Docker, need to learn to use it for work or personal projects, or who seek a better understanding of containers in general. Audience members might be beginners to Python/Django or not, but they are definitely beginners to containerizing all the things. 

The audience should be familiar with basic Python concepts such as variables and running things from the command line. Some basic familiarity with Django would be helpful, as the sample project I will demo is a Django app, but beginner Djangonauts will be able to follow along. 

1. Introduction - Who am I? (1 minute) 
2. What is Docker? Why use it? (3 min) 
  - Eliminates "it works on my machine" problems 
  - Never install anything globally ever again 
  - Great for working with teams 
3. Docker definitions (4 min) 
  - Image 
  - Container 
  - Dockerfile 
  - Where do virtual environments fit in? 
4. Dockerfile (5 min) 
  - Go through parts: Python image, setting environment variables, dealing with requirements.txt, set working directory of /code/, expose port 
5. Docker Compose 
  - What is Docker Compose? (3 min) 
    - Allows you to run more than one container in a Docker application
    - Useful for running multiple services like your web server, database, Redis, etc. in separate containers as part of one Docker application 
   - docker-compose.yml (6 min) 
    - Version 
    - Define services (db and web for this presentation)
    - Explain volumes 
    - Run commands from services, like runserver 
    - Define dependencies 
6. Docker on the Command Line (8 min) 
  - docker-compose up
  - manage.py commands (docker-compose run web ./manage.py [command]) 
  - running tests (docker-compose run web py.test [or ./runtests.py]) 
  - opening a shell (docker-compose run web bash) 
  - viewing containers (docker ps) and entering a container (see where the /code/ dir is that we created in the Dockerfile) 
  - docker-compose down 
7. Q&A (any remaining time)

Lacey Williams Henschel
Captions: 
	00:00:06,390 --> 00:00:09,990
all right I have my speaker notes today

00:00:08,639 --> 00:00:11,760
which is wonderful

00:00:09,990 --> 00:00:13,830
good morning we're we're moving from

00:00:11,760 --> 00:00:17,369
Daniella is wonderful beautiful talk

00:00:13,830 --> 00:00:19,050
about art and naivete and we're moving

00:00:17,369 --> 00:00:22,410
from from those concepts to things that

00:00:19,050 --> 00:00:24,179
are very very more practical so I hope

00:00:22,410 --> 00:00:25,499
that this change of pace is comfortable

00:00:24,179 --> 00:00:27,390
for everyone I'm gonna try to make it a

00:00:25,499 --> 00:00:29,369
little bit whimsical too so we still get

00:00:27,390 --> 00:00:32,759
to keep a little bit of that spirit that

00:00:29,369 --> 00:00:36,690
Daniele has left us with oh I have to

00:00:32,759 --> 00:00:38,579
turn this on there we go

00:00:36,690 --> 00:00:40,289
so you've probably figured out by now

00:00:38,579 --> 00:00:43,020
that my name is Lacey and I'm one of the

00:00:40,289 --> 00:00:44,640
organizers of Django con us I also work

00:00:43,020 --> 00:00:47,219
for a company called rebus we're a

00:00:44,640 --> 00:00:49,079
Django consultancy based in Kansas in

00:00:47,219 --> 00:00:51,359
the United States I work remotely full

00:00:49,079 --> 00:00:54,120
time but yeah so if you'd like to talk

00:00:51,359 --> 00:00:55,769
to me later today about about Django or

00:00:54,120 --> 00:00:57,660
Django con or the work that we do at

00:00:55,769 --> 00:00:59,250
Reve says please seek me out I won't be

00:00:57,660 --> 00:01:00,719
taking questions at the end of this talk

00:00:59,250 --> 00:01:02,699
but I would really love to chat with you

00:01:00,719 --> 00:01:04,680
at the break or at lunch or some other

00:01:02,699 --> 00:01:07,230
time really about anything that you

00:01:04,680 --> 00:01:09,020
would like to talk to me about but right

00:01:07,230 --> 00:01:11,670
now we're going to talk about docker and

00:01:09,020 --> 00:01:13,920
docker is is a little bit confusing for

00:01:11,670 --> 00:01:15,930
people and so I I'm really happy that

00:01:13,920 --> 00:01:17,340
Daniela used some images from this same

00:01:15,930 --> 00:01:19,320
comic because I've used it a couple too

00:01:17,340 --> 00:01:22,079
but the the punch line from this

00:01:19,320 --> 00:01:25,009
particular slide is that someone wants

00:01:22,079 --> 00:01:27,420
to create this this this side-by-side

00:01:25,009 --> 00:01:28,680
display but this you know this this

00:01:27,420 --> 00:01:31,290
tablet that they're using doesn't have

00:01:28,680 --> 00:01:33,020
split screen support so they say I

00:01:31,290 --> 00:01:35,670
downloaded the SDK and the IDE

00:01:33,020 --> 00:01:37,890
registered as a developer and started

00:01:35,670 --> 00:01:39,780
reading the languages Docs and then I

00:01:37,890 --> 00:01:42,299
realized it would be way easier to just

00:01:39,780 --> 00:01:44,219
get to smaller phones and glue them

00:01:42,299 --> 00:01:46,320
together and on that day I achieved

00:01:44,219 --> 00:01:47,820
software enlightenment and then their

00:01:46,320 --> 00:01:50,100
friend says but you never learned to

00:01:47,820 --> 00:01:52,229
write software and the original person

00:01:50,100 --> 00:01:53,759
says no I just learned how to glue

00:01:52,229 --> 00:01:57,240
together stuff that I don't understand

00:01:53,759 --> 00:01:59,460
and this is this is kind of how a lot of

00:01:57,240 --> 00:02:01,289
people feel about docker at its core

00:01:59,460 --> 00:02:03,659
docker feels a lot like magic and

00:02:01,289 --> 00:02:05,820
whenever you take tutorials on docker a

00:02:03,659 --> 00:02:07,890
lot of those tutorials consist of all

00:02:05,820 --> 00:02:09,660
right just copy this file and put it at

00:02:07,890 --> 00:02:11,250
the top of your project and then run

00:02:09,660 --> 00:02:13,560
this command and you're good to go and

00:02:11,250 --> 00:02:15,450
that will get you through a hello world

00:02:13,560 --> 00:02:17,370
app but once you start actually using

00:02:15,450 --> 00:02:19,739
docker it doesn't leave you with enough

00:02:17,370 --> 00:02:20,250
information to feel confident debugging

00:02:19,739 --> 00:02:22,230
to make

00:02:20,250 --> 00:02:23,760
changes that you need to whenever your

00:02:22,230 --> 00:02:27,000
just told to copy and paste a chunk of

00:02:23,760 --> 00:02:29,130
code you you aren't empowered to with

00:02:27,000 --> 00:02:31,980
the information to to do other things

00:02:29,130 --> 00:02:33,330
with that so that's part of what we're

00:02:31,980 --> 00:02:36,390
gonna do today is we're going to get

00:02:33,330 --> 00:02:38,340
very detailed and get kind of a micro

00:02:36,390 --> 00:02:39,930
level of what the things that you're

00:02:38,340 --> 00:02:41,970
copying and pasting in these tutorials

00:02:39,930 --> 00:02:44,310
are doing in the hope that that leaves

00:02:41,970 --> 00:02:48,030
you with the ability to go forth on your

00:02:44,310 --> 00:02:51,120
own and and do more things with docker

00:02:48,030 --> 00:02:52,200
so one of the things that docker does is

00:02:51,120 --> 00:02:54,600
it allows you to separate your

00:02:52,200 --> 00:02:56,550
dependencies from one another especially

00:02:54,600 --> 00:02:58,230
in different projects which is this

00:02:56,550 --> 00:02:59,640
similar thing that virtual environments

00:02:58,230 --> 00:03:01,550
do but docker handles it a little bit

00:02:59,640 --> 00:03:04,350
differently and we'll talk about that

00:03:01,550 --> 00:03:06,570
separately or differently from a virtual

00:03:04,350 --> 00:03:08,730
environment docker shares your operating

00:03:06,570 --> 00:03:10,739
system a virtual environment usually

00:03:08,730 --> 00:03:12,900
builds its own guest operating system on

00:03:10,739 --> 00:03:14,489
top of yours docker just shares yours

00:03:12,900 --> 00:03:17,280
and goes up from there so it's a little

00:03:14,489 --> 00:03:18,690
bit lighter weight in that way but one

00:03:17,280 --> 00:03:20,850
of the things I really really love about

00:03:18,690 --> 00:03:23,190
docker is that it puts everyone on the

00:03:20,850 --> 00:03:24,570
same page on your team so whenever

00:03:23,190 --> 00:03:25,920
you're using a virtual environment you

00:03:24,570 --> 00:03:28,110
still have to have your own system

00:03:25,920 --> 00:03:29,910
Python and you and your teammates might

00:03:28,110 --> 00:03:31,739
have slightly different minor versions

00:03:29,910 --> 00:03:33,660
or even very different major versions

00:03:31,739 --> 00:03:35,519
and that might work on some of your

00:03:33,660 --> 00:03:37,470
projects but you'll you'll run into bugs

00:03:35,519 --> 00:03:39,810
and you you get into that situation

00:03:37,470 --> 00:03:41,820
where you're having a problem and your

00:03:39,810 --> 00:03:44,850
coworker pulls down your code and they

00:03:41,820 --> 00:03:45,870
run it and it works on their machine you

00:03:44,850 --> 00:03:47,070
know so that's you don't you're not

00:03:45,870 --> 00:03:49,350
really left with very much with that

00:03:47,070 --> 00:03:51,299
with docker you're defining everything

00:03:49,350 --> 00:03:53,220
down to the Python version very very

00:03:51,299 --> 00:03:55,320
specifically so all of your co-workers

00:03:53,220 --> 00:03:56,489
will be running things in the same

00:03:55,320 --> 00:03:58,230
environment all of those will be

00:03:56,489 --> 00:03:59,400
identical and it makes you it makes it a

00:03:58,230 --> 00:04:02,190
lot easier for you to help each other

00:03:59,400 --> 00:04:03,840
and the other thing that I love is that

00:04:02,190 --> 00:04:05,790
you don't actually need to have a system

00:04:03,840 --> 00:04:07,739
Python installed at all with docker you

00:04:05,790 --> 00:04:09,299
can just download docker and docker

00:04:07,739 --> 00:04:11,340
takes care of everything else so you

00:04:09,299 --> 00:04:12,540
don't have to have anything on your

00:04:11,340 --> 00:04:15,750
machine anymore which is really

00:04:12,540 --> 00:04:17,459
wonderful but the thing that is a little

00:04:15,750 --> 00:04:20,190
bit tough about docker is that it does

00:04:17,459 --> 00:04:23,040
have a pretty steep learning curve and I

00:04:20,190 --> 00:04:24,570
know because it took me a while to feel

00:04:23,040 --> 00:04:27,060
really comfortable with it I only

00:04:24,570 --> 00:04:28,590
started using docker about six or seven

00:04:27,060 --> 00:04:30,479
months ago and I said yesterday in my

00:04:28,590 --> 00:04:32,760
lightning talk that the best person to

00:04:30,479 --> 00:04:34,050
give a talk on a given topic is the

00:04:32,760 --> 00:04:36,150
person who was most recently

00:04:34,050 --> 00:04:37,800
confused by that topic and that's me

00:04:36,150 --> 00:04:40,650
that's the spirit in which I proposed

00:04:37,800 --> 00:04:42,509
this talk is that I was frustrated and

00:04:40,650 --> 00:04:43,889
it took me a while to to get my feet

00:04:42,509 --> 00:04:46,050
under me and feel like I knew what I was

00:04:43,889 --> 00:04:48,479
doing and I'm hoping to save you from a

00:04:46,050 --> 00:04:50,159
little bit of that pain I will say

00:04:48,479 --> 00:04:52,229
though that if you consider yourself a

00:04:50,159 --> 00:04:54,539
docker expert if you if you use docker a

00:04:52,229 --> 00:04:56,729
day in and day out you might not learn

00:04:54,539 --> 00:04:58,259
anything new in this talk but I hope

00:04:56,729 --> 00:05:00,060
that you maybe will have an idea about

00:04:58,259 --> 00:05:02,340
the the things about docker that are

00:05:00,060 --> 00:05:05,970
confusing so you're able to help your

00:05:02,340 --> 00:05:07,229
co-workers and people later on and so I

00:05:05,970 --> 00:05:09,240
did talk a little bit about virtual

00:05:07,229 --> 00:05:11,039
environments and I'm not asking you to

00:05:09,240 --> 00:05:12,750
abandon virtual environments I still

00:05:11,039 --> 00:05:15,180
like them I have a system Python

00:05:12,750 --> 00:05:17,039
installed I use virtual and wrapper I

00:05:15,180 --> 00:05:19,949
really love that work on command it's

00:05:17,039 --> 00:05:22,110
very very convenient but there's another

00:05:19,949 --> 00:05:24,090
xkcd comic that kind of shows the

00:05:22,110 --> 00:05:26,009
different paths that our our Python

00:05:24,090 --> 00:05:28,169
environments can take and the punchline

00:05:26,009 --> 00:05:30,479
for this one is my Python environment

00:05:28,169 --> 00:05:32,360
has become so degraded that my laptop

00:05:30,479 --> 00:05:34,319
has been declared a Superfund site and

00:05:32,360 --> 00:05:37,500
I've definitely been in that place

00:05:34,319 --> 00:05:39,419
before too so the way that we're gonna

00:05:37,500 --> 00:05:40,889
talk about docker today is by talking

00:05:39,419 --> 00:05:44,370
about Harry Potter because that's a

00:05:40,889 --> 00:05:46,620
completely natural thing to do to talk

00:05:44,370 --> 00:05:48,690
about the the concepts of images and

00:05:46,620 --> 00:05:50,340
containers which is a docker concept

00:05:48,690 --> 00:05:52,650
we'll be talking about Polyjuice potion

00:05:50,340 --> 00:05:54,000
and if you're not familiar with the

00:05:52,650 --> 00:05:55,979
Harry Potter books or with this specific

00:05:54,000 --> 00:05:58,050
potion the way that Polyjuice potion

00:05:55,979 --> 00:06:00,479
works is you you brew this potion and

00:05:58,050 --> 00:06:01,710
then you get someone else's hair a hair

00:06:00,479 --> 00:06:03,599
of someone that you would like to

00:06:01,710 --> 00:06:06,210
impersonate and you add it to that

00:06:03,599 --> 00:06:08,639
potion then you drink that potion and

00:06:06,210 --> 00:06:10,650
you look like that person and you get to

00:06:08,639 --> 00:06:14,190
impersonate them and get up to all kinds

00:06:10,650 --> 00:06:16,259
of hijinks so in this situation docker

00:06:14,190 --> 00:06:19,699
is the potion docker is the vessel

00:06:16,259 --> 00:06:23,370
through which everything happens and

00:06:19,699 --> 00:06:26,819
then the docker image the the thing that

00:06:23,370 --> 00:06:29,069
you want to turn into is sorry docker

00:06:26,819 --> 00:06:30,690
the image is the person that you want to

00:06:29,069 --> 00:06:33,479
turn into so whenever you start a

00:06:30,690 --> 00:06:36,900
project in docker you start by defining

00:06:33,479 --> 00:06:38,969
your image the image is it defines the

00:06:36,900 --> 00:06:40,409
basic software of your project the

00:06:38,969 --> 00:06:42,449
docker Doc's say that it is the

00:06:40,409 --> 00:06:45,990
executive all that contains all of the

00:06:42,449 --> 00:06:47,889
packages that your software needs docker

00:06:45,990 --> 00:06:50,800
also has this concept called a content

00:06:47,889 --> 00:06:52,629
and the container is you like whenever

00:06:50,800 --> 00:06:53,979
you're you're drinking this potion and

00:06:52,629 --> 00:06:56,259
you're running around looking like

00:06:53,979 --> 00:06:57,909
somebody else you are running an image

00:06:56,259 --> 00:06:59,560
in a container right like you're not

00:06:57,909 --> 00:07:02,409
actually that other person you just look

00:06:59,560 --> 00:07:03,759
like them for a little bit so docker

00:07:02,409 --> 00:07:06,370
would say that the container is the

00:07:03,759 --> 00:07:08,349
runtime instance of the image but like I

00:07:06,370 --> 00:07:10,449
said you never actually run the image

00:07:08,349 --> 00:07:13,990
itself you run a little copy of the

00:07:10,449 --> 00:07:15,460
image inside of a container and this is

00:07:13,990 --> 00:07:16,900
a pretty important concept to understand

00:07:15,460 --> 00:07:19,569
so I'm going to put it up here one more

00:07:16,900 --> 00:07:21,340
time the image is the executive ol with

00:07:19,569 --> 00:07:23,500
all of the packages of your project it

00:07:21,340 --> 00:07:25,419
gets your project ready to run the

00:07:23,500 --> 00:07:28,689
container is the thing that actually

00:07:25,419 --> 00:07:30,969
runs it's the runtime copy of your image

00:07:28,689 --> 00:07:33,969
that you've defined but how do you

00:07:30,969 --> 00:07:36,189
define your image so in Tucker there's

00:07:33,969 --> 00:07:37,689
this file that you add to the the

00:07:36,189 --> 00:07:39,939
project level the same level as your

00:07:37,689 --> 00:07:42,370
managed PI and it's just called docker

00:07:39,939 --> 00:07:44,860
file its docker with a capital D there

00:07:42,370 --> 00:07:47,289
is no file extension and that's where

00:07:44,860 --> 00:07:49,629
you define all of the specifics about

00:07:47,289 --> 00:07:51,669
your project so you can think about the

00:07:49,629 --> 00:07:53,349
docker file as the DNA that's that

00:07:51,669 --> 00:07:55,270
person's hair that you would like to

00:07:53,349 --> 00:07:58,449
turn into that's the the definition of

00:07:55,270 --> 00:08:00,009
your project and in the docker file you

00:07:58,449 --> 00:08:01,719
specify a lot of different things you

00:08:00,009 --> 00:08:02,889
specify the version of Python that you

00:08:01,719 --> 00:08:05,889
want to use you can set environment

00:08:02,889 --> 00:08:07,629
variables you can install specific

00:08:05,889 --> 00:08:10,000
requirements and things like that and

00:08:07,629 --> 00:08:11,069
we'll get into more detail about that in

00:08:10,000 --> 00:08:12,879
just a moment

00:08:11,069 --> 00:08:14,589
so again I'm going to have these

00:08:12,879 --> 00:08:15,789
definitions up here just because these

00:08:14,589 --> 00:08:18,279
are these are concepts that are pretty

00:08:15,789 --> 00:08:20,319
important to know so just to repeat the

00:08:18,279 --> 00:08:23,020
image is the definition of your project

00:08:20,319 --> 00:08:24,909
the container is what your project is

00:08:23,020 --> 00:08:27,310
actually running in based on your image

00:08:24,909 --> 00:08:29,229
and the docker file is the file that

00:08:27,310 --> 00:08:32,500
defines what your image is going to look

00:08:29,229 --> 00:08:34,060
like and so this is where this analogy

00:08:32,500 --> 00:08:35,469
kind of comes into play and so if you're

00:08:34,060 --> 00:08:36,640
familiar with Harry Potter then you can

00:08:35,469 --> 00:08:39,250
you can kind of look at this a little

00:08:36,640 --> 00:08:41,469
bit you use the hair to tell this

00:08:39,250 --> 00:08:43,719
particular potion how to change into

00:08:41,469 --> 00:08:45,910
somebody else and then you drink it to

00:08:43,719 --> 00:08:48,490
actually turn into that potion with

00:08:45,910 --> 00:08:50,440
docker you use the docker file to tell

00:08:48,490 --> 00:08:52,029
docker how to build your image and then

00:08:50,440 --> 00:08:53,440
you run your project in a container so

00:08:52,029 --> 00:08:57,339
that's kind of where this metaphor comes

00:08:53,440 --> 00:09:00,300
from and I'm gonna take a quick moment

00:08:57,339 --> 00:09:00,300
here and grab some water

00:09:13,100 --> 00:09:18,890
okay so this is the basic layout of a

00:09:16,670 --> 00:09:20,420
docker file you will see docker files

00:09:18,890 --> 00:09:22,220
that look more complicated than this

00:09:20,420 --> 00:09:24,470
there are concepts called multistage

00:09:22,220 --> 00:09:26,900
builds that we won't get into so your

00:09:24,470 --> 00:09:28,580
production docker file whenever you

00:09:26,900 --> 00:09:29,900
start using docker will probably look a

00:09:28,580 --> 00:09:32,570
little bit different than this it will

00:09:29,900 --> 00:09:34,310
create contain more lines but this is

00:09:32,570 --> 00:09:35,900
this is all that you need to get started

00:09:34,310 --> 00:09:37,580
with docker this will this will get you

00:09:35,900 --> 00:09:40,160
up and going and then you can explore

00:09:37,580 --> 00:09:41,990
the more complicated things so we're

00:09:40,160 --> 00:09:43,190
going to go through this quickly line by

00:09:41,990 --> 00:09:45,680
line just to make sure that we

00:09:43,190 --> 00:09:48,830
understand this from statement from

00:09:45,680 --> 00:09:50,240
Python 3.6 you probably guess correctly

00:09:48,830 --> 00:09:52,460
that this means that we want to use

00:09:50,240 --> 00:09:54,230
Python 3.6 that's the version that we

00:09:52,460 --> 00:09:56,900
want to use and the reason that we get

00:09:54,230 --> 00:09:59,510
to do this is because python publishes

00:09:56,900 --> 00:10:02,600
all of their versions as images on

00:09:59,510 --> 00:10:04,790
docker so just like whenever you're born

00:10:02,600 --> 00:10:07,550
you inherit DNA from your parents and

00:10:04,790 --> 00:10:09,350
just like in Python classes we can

00:10:07,550 --> 00:10:12,200
inherit from one another we can base

00:10:09,350 --> 00:10:14,300
images on top of other images so we get

00:10:12,200 --> 00:10:15,740
to say in our docker file I want to grab

00:10:14,300 --> 00:10:18,080
everything that's in this other image

00:10:15,740 --> 00:10:22,430
that's published on the docker hub and I

00:10:18,080 --> 00:10:24,140
want to make use of that this is an

00:10:22,430 --> 00:10:25,400
environment variable that basically says

00:10:24,140 --> 00:10:27,410
that you want to be able to see your

00:10:25,400 --> 00:10:29,150
output in the console and so if you want

00:10:27,410 --> 00:10:32,270
to see what you're doing this is a handy

00:10:29,150 --> 00:10:34,100
line to have now we talked about

00:10:32,270 --> 00:10:35,540
containers about how your project is

00:10:34,100 --> 00:10:37,940
going to be running in its own container

00:10:35,540 --> 00:10:40,070
and what that means is that your

00:10:37,940 --> 00:10:42,200
container doesn't really have access to

00:10:40,070 --> 00:10:44,630
the code as it lives on your machine so

00:10:42,200 --> 00:10:46,670
you have to tell the container hey my

00:10:44,630 --> 00:10:48,620
code is here and I want you to have that

00:10:46,670 --> 00:10:50,270
so in this line we're taking the

00:10:48,620 --> 00:10:52,340
requirements file that's in our current

00:10:50,270 --> 00:10:54,440
directory and we're telling docker I

00:10:52,340 --> 00:10:57,380
want you to copy that requirements file

00:10:54,440 --> 00:10:59,330
into a directory called code that is

00:10:57,380 --> 00:11:00,470
going to be in the container now at this

00:10:59,330 --> 00:11:02,690
point the container doesn't actually

00:11:00,470 --> 00:11:04,550
have that directory the copy statement

00:11:02,690 --> 00:11:06,800
will automatically create the directory

00:11:04,550 --> 00:11:10,760
if it doesn't already exist and then

00:11:06,800 --> 00:11:12,620
copy now we want to actually install our

00:11:10,760 --> 00:11:14,180
requirements because again we're running

00:11:12,620 --> 00:11:15,650
in a container we're not running in a

00:11:14,180 --> 00:11:17,750
virtual environment so we have to tell

00:11:15,650 --> 00:11:19,940
the container you know these are called

00:11:17,750 --> 00:11:21,590
the image that whenever we run our

00:11:19,940 --> 00:11:24,080
container we're going to want all of our

00:11:21,590 --> 00:11:26,300
dependencies and after that we copy the

00:11:24,080 --> 00:11:26,750
rest of our code into that directory

00:11:26,300 --> 00:11:29,870
call

00:11:26,750 --> 00:11:31,340
code that lives on the container and you

00:11:29,870 --> 00:11:32,690
don't necessarily have to do these

00:11:31,340 --> 00:11:35,180
things separately like you could just

00:11:32,690 --> 00:11:37,370
copy everything into code and then you

00:11:35,180 --> 00:11:39,200
know run pip install to install your

00:11:37,370 --> 00:11:41,000
requirements but it's nice to separate

00:11:39,200 --> 00:11:42,590
that so that if you're getting an error

00:11:41,000 --> 00:11:46,460
you get to isolate that a little bit

00:11:42,590 --> 00:11:48,440
more easily now whenever you're using

00:11:46,460 --> 00:11:50,030
docker you can still do things like run

00:11:48,440 --> 00:11:51,470
management commands and I think that

00:11:50,030 --> 00:11:54,380
most of us are used to running things

00:11:51,470 --> 00:11:56,720
like dot slash managed by shell or

00:11:54,380 --> 00:11:58,550
something like that but now that we have

00:11:56,720 --> 00:12:01,010
all of our code in the container in this

00:11:58,550 --> 00:12:04,220
extra directory called code we would

00:12:01,010 --> 00:12:06,860
have to type slash code slash manage PI

00:12:04,220 --> 00:12:08,720
etc and that's a little bit annoying so

00:12:06,860 --> 00:12:10,880
we can get rid of that annoyance by

00:12:08,720 --> 00:12:12,860
setting our working directory as that

00:12:10,880 --> 00:12:14,480
code directory in the container so

00:12:12,860 --> 00:12:16,220
whenever our container starts it will

00:12:14,480 --> 00:12:17,870
automatically stick us in that directory

00:12:16,220 --> 00:12:21,290
and then we can run commands the way

00:12:17,870 --> 00:12:23,780
that we're used to we want to expose our

00:12:21,290 --> 00:12:25,700
port so that we're able to to see that

00:12:23,780 --> 00:12:28,490
port 8000 that we need whenever we're

00:12:25,700 --> 00:12:30,200
running the server and then we can put

00:12:28,490 --> 00:12:32,210
our Python command right there in the

00:12:30,200 --> 00:12:35,000
docker file so we can say hey you know I

00:12:32,210 --> 00:12:36,800
want to run my server whenever my image

00:12:35,000 --> 00:12:38,420
is created whenever my container starts

00:12:36,800 --> 00:12:41,810
I want my server to go ahead and start

00:12:38,420 --> 00:12:44,720
running for me so now we have the the

00:12:41,810 --> 00:12:47,390
DNA for our project we have our docker

00:12:44,720 --> 00:12:49,130
file we're ready to build our image so

00:12:47,390 --> 00:12:51,740
we have this file but the file itself

00:12:49,130 --> 00:12:53,660
doesn't create the image we have to tell

00:12:51,740 --> 00:12:57,020
docker hey I want you to create this

00:12:53,660 --> 00:12:58,970
image now so to brew that potion we run

00:12:57,020 --> 00:13:00,380
this command this docker build dot

00:12:58,970 --> 00:13:02,690
docker build everything that's in this

00:13:00,380 --> 00:13:05,270
directory and whenever you run that

00:13:02,690 --> 00:13:07,550
command you'll see a lot of output I

00:13:05,270 --> 00:13:10,280
have bolded the ones that are kind of

00:13:07,550 --> 00:13:11,990
important but you run docker build and

00:13:10,280 --> 00:13:14,240
then you see that it's it's you know

00:13:11,990 --> 00:13:15,860
sending the bill to a context it's going

00:13:14,240 --> 00:13:17,750
through all of these steps and then the

00:13:15,860 --> 00:13:20,420
very last line if everything has gone

00:13:17,750 --> 00:13:23,420
well will be successfully built some

00:13:20,420 --> 00:13:25,339
kind of random name and that name is the

00:13:23,420 --> 00:13:26,600
name of your image and that doesn't

00:13:25,339 --> 00:13:28,130
really make a lot of sense right like

00:13:26,600 --> 00:13:29,510
that's that's just a random string of

00:13:28,130 --> 00:13:32,270
letters and numbers that that's not

00:13:29,510 --> 00:13:34,700
meaningful to us so docker provides us

00:13:32,270 --> 00:13:36,050
with a way to give our images a name so

00:13:34,700 --> 00:13:39,080
that we can keep track of them more

00:13:36,050 --> 00:13:40,680
easily if you add that T flag then you

00:13:39,080 --> 00:13:42,420
can tell docker hey I want you to

00:13:40,680 --> 00:13:44,550
to give this image a name so that I can

00:13:42,420 --> 00:13:46,620
access it more easily and that way you

00:13:44,550 --> 00:13:48,870
don't have to tell docker to show you

00:13:46,620 --> 00:13:50,970
all of your images scroll through find

00:13:48,870 --> 00:13:53,700
the right one copy it and then use that

00:13:50,970 --> 00:13:54,990
that docker ID you can just use the name

00:13:53,700 --> 00:13:59,040
of your project or a name that's

00:13:54,990 --> 00:14:00,839
meaningful to you and we can see this

00:13:59,040 --> 00:14:02,010
this paradigm before right like if we go

00:14:00,839 --> 00:14:04,860
back we can see that it says

00:14:02,010 --> 00:14:06,750
successfully tagged Hogwarts : latest

00:14:04,860 --> 00:14:09,180
that's not the the first time that we've

00:14:06,750 --> 00:14:11,100
actually seen that paradigm when we when

00:14:09,180 --> 00:14:14,910
we created our docker file our very top

00:14:11,100 --> 00:14:17,580
line was from Python : 3.6 that's

00:14:14,910 --> 00:14:19,170
because that's how docker names things

00:14:17,580 --> 00:14:20,130
right so whenever you create an image

00:14:19,170 --> 00:14:21,930
docker

00:14:20,130 --> 00:14:24,240
automatically assigns that image of

00:14:21,930 --> 00:14:25,950
version if you don't assign it a

00:14:24,240 --> 00:14:27,720
specific version that version will just

00:14:25,950 --> 00:14:30,300
be called latest it's the most recent

00:14:27,720 --> 00:14:32,730
version for Python Python has published

00:14:30,300 --> 00:14:34,830
all kinds of versions of its images so

00:14:32,730 --> 00:14:36,510
you have the specific Python images for

00:14:34,830 --> 00:14:38,880
the different versions but you can also

00:14:36,510 --> 00:14:40,950
download smaller Python images if you

00:14:38,880 --> 00:14:43,620
don't need all of Python so you can make

00:14:40,950 --> 00:14:45,720
your your image lighter weight but the

00:14:43,620 --> 00:14:48,209
way that you'll see that is the image a

00:14:45,720 --> 00:14:51,810
colon and then the tag and another word

00:14:48,209 --> 00:14:54,720
for tag is basically version so now we

00:14:51,810 --> 00:14:57,660
get into the concept of layers docker is

00:14:54,720 --> 00:15:00,900
layered which is a pretty important

00:14:57,660 --> 00:15:02,610
concept to grasp and you can you can

00:15:00,900 --> 00:15:04,410
kind of get a sense of this layered miss

00:15:02,610 --> 00:15:06,660
whenever you ran that docker build

00:15:04,410 --> 00:15:08,670
command you saw that docker was building

00:15:06,660 --> 00:15:10,890
step one out of eight step two out of

00:15:08,670 --> 00:15:12,839
eight every line in your docker file

00:15:10,890 --> 00:15:15,390
every single line that has anything in

00:15:12,839 --> 00:15:19,500
it is its own layer in your image so

00:15:15,390 --> 00:15:21,510
docker builds those one at a time so the

00:15:19,500 --> 00:15:24,900
very first time through docker builds

00:15:21,510 --> 00:15:26,880
each layer by hand so it's going through

00:15:24,900 --> 00:15:28,770
its crafting everything it just builds

00:15:26,880 --> 00:15:30,810
everything by hand but the second time

00:15:28,770 --> 00:15:32,279
through if nothing has changed docker

00:15:30,810 --> 00:15:34,410
knows it doesn't need to rebuild it from

00:15:32,279 --> 00:15:36,300
scratch right so it just goes ahead and

00:15:34,410 --> 00:15:40,589
uses a cache it will run very quickly

00:15:36,300 --> 00:15:43,230
and that works really well but if you

00:15:40,589 --> 00:15:45,209
change something docker will use a cache

00:15:43,230 --> 00:15:47,399
until it gets to the thing that has

00:15:45,209 --> 00:15:49,050
changed and then it can't use a cache

00:15:47,399 --> 00:15:50,880
anymore at all so if you change

00:15:49,050 --> 00:15:52,740
something in the middle it will use a

00:15:50,880 --> 00:15:54,449
cache until that you get to that middle

00:15:52,740 --> 00:15:56,489
and then everything after that

00:15:54,449 --> 00:15:58,019
it's rebuilt by hand again and the

00:15:56,489 --> 00:15:59,939
reason that this matters is because that

00:15:58,019 --> 00:16:02,489
can impact some performance things it

00:15:59,939 --> 00:16:04,199
can take longer so it's just good to

00:16:02,489 --> 00:16:06,869
know that whenever you change something

00:16:04,199 --> 00:16:10,139
about your dockerfile you might run into

00:16:06,869 --> 00:16:12,179
this and with that in mind it's also

00:16:10,139 --> 00:16:14,309
good to whenever you're creating your

00:16:12,179 --> 00:16:16,739
docker file to do things in an order

00:16:14,309 --> 00:16:18,689
that lets you put the things that are

00:16:16,739 --> 00:16:20,189
least likely to change at the top and

00:16:18,689 --> 00:16:27,779
then things that you might be fiddling

00:16:20,189 --> 00:16:31,769
with more frequently at the bottom so we

00:16:27,779 --> 00:16:34,139
can actually see this happen I I added a

00:16:31,769 --> 00:16:36,689
requirement to my requirements file so I

00:16:34,139 --> 00:16:39,089
didn't actually change my docker file I

00:16:36,689 --> 00:16:40,739
changed the requirements file but

00:16:39,089 --> 00:16:43,019
because I'm telling docker hey I want

00:16:40,739 --> 00:16:44,939
you to copy my requirements file docker

00:16:43,019 --> 00:16:46,889
knows Oh something about this

00:16:44,939 --> 00:16:48,629
requirements file changed and so at the

00:16:46,889 --> 00:16:50,790
top we can see that in step two it's

00:16:48,629 --> 00:16:52,499
using a cache but then we get down to

00:16:50,790 --> 00:16:54,299
step 4 where we're running our

00:16:52,499 --> 00:16:57,089
requirements and we're downloading

00:16:54,299 --> 00:16:58,889
Django fresh the last image that we used

00:16:57,089 --> 00:17:01,230
already had Django it could have used a

00:16:58,889 --> 00:17:02,939
cache but since I added a new library

00:17:01,230 --> 00:17:04,799
maybe I added requests or something it

00:17:02,939 --> 00:17:09,870
has to download Django from scratch all

00:17:04,799 --> 00:17:12,299
over again and then keep going so that's

00:17:09,870 --> 00:17:13,620
the docker file so just to recap and I

00:17:12,299 --> 00:17:14,639
you're probably going to get annoyed

00:17:13,620 --> 00:17:17,970
with me saying this but I'll say it

00:17:14,639 --> 00:17:19,860
again the image is the executive ol that

00:17:17,970 --> 00:17:21,899
contains all of the packages for your

00:17:19,860 --> 00:17:24,149
project so it's it's the basically the

00:17:21,899 --> 00:17:26,459
person that you want to turn into the

00:17:24,149 --> 00:17:27,779
container is the runtime instance of

00:17:26,459 --> 00:17:30,630
your image it's the thing that actually

00:17:27,779 --> 00:17:32,399
is running your project so that's you

00:17:30,630 --> 00:17:35,220
once you've once you've drunk the potion

00:17:32,399 --> 00:17:36,809
and the Ducker file is the DNA of your

00:17:35,220 --> 00:17:38,399
project that's the definition that says

00:17:36,809 --> 00:17:41,039
this is what I want my project to look

00:17:38,399 --> 00:17:42,779
like this is what it needs so now that

00:17:41,039 --> 00:17:46,289
we've we've had potions class we're

00:17:42,779 --> 00:17:48,000
gonna move on to charms and so let's

00:17:46,289 --> 00:17:49,620
talk about the the different commands

00:17:48,000 --> 00:17:51,299
that you can use to get docker to give

00:17:49,620 --> 00:17:53,789
you some information about your project

00:17:51,299 --> 00:17:55,830
so you can tell you can ask docker hey

00:17:53,789 --> 00:17:57,090
what images do I have and the way that

00:17:55,830 --> 00:17:58,950
you do this is with just the docker

00:17:57,090 --> 00:18:00,480
images command and docker gives you some

00:17:58,950 --> 00:18:02,909
helpful information so it gives you the

00:18:00,480 --> 00:18:05,580
repository that your image is in the tag

00:18:02,909 --> 00:18:08,159
that that is that it has the image ID

00:18:05,580 --> 00:18:08,360
when it was created and also the size of

00:18:08,159 --> 00:18:09,980
your

00:18:08,360 --> 00:18:11,809
image and when you're using docker and

00:18:09,980 --> 00:18:14,630
production that's the size of that image

00:18:11,809 --> 00:18:16,549
gets pretty important a few I think

00:18:14,630 --> 00:18:19,309
months ago now Rev says published it's

00:18:16,549 --> 00:18:21,470
its own version of Python that is

00:18:19,309 --> 00:18:23,380
smaller than some of the others and so

00:18:21,470 --> 00:18:25,220
it makes the images build a lot faster

00:18:23,380 --> 00:18:26,840
but that's not something that you need

00:18:25,220 --> 00:18:28,429
to worry about for your your first time

00:18:26,840 --> 00:18:29,990
out in docker but as you get further

00:18:28,429 --> 00:18:32,990
along in docker you'll probably want to

00:18:29,990 --> 00:18:34,850
explore some of the smaller images you

00:18:32,990 --> 00:18:36,710
can also ask docker to reveal your

00:18:34,850 --> 00:18:38,960
containers with the with the command

00:18:36,710 --> 00:18:41,210
docker container LS you can also use

00:18:38,960 --> 00:18:42,799
docker PS there's a cheat sheet at the

00:18:41,210 --> 00:18:44,419
end that I'll link to and you are not

00:18:42,799 --> 00:18:47,179
expected to memorize all of these I

00:18:44,419 --> 00:18:48,980
certainly haven't so but you can see

00:18:47,179 --> 00:18:51,140
here that we you know where docker is

00:18:48,980 --> 00:18:52,460
expecting to give us a container ID the

00:18:51,140 --> 00:18:54,290
image that container is based on

00:18:52,460 --> 00:18:57,080
commands it's running and some other

00:18:54,290 --> 00:18:58,790
data but nothing is there and the reason

00:18:57,080 --> 00:19:00,679
that nothing is there is because so far

00:18:58,790 --> 00:19:02,270
we've built our image but we haven't

00:19:00,679 --> 00:19:04,790
actually started running our containers

00:19:02,270 --> 00:19:08,690
containers don't exist until you ask

00:19:04,790 --> 00:19:10,280
them to so let's ask our us ask our

00:19:08,690 --> 00:19:12,559
image to give us a container and we do

00:19:10,280 --> 00:19:15,580
that with the docker run command you run

00:19:12,559 --> 00:19:19,250
docker run - P which stands for publish

00:19:15,580 --> 00:19:21,679
8000 : 8000 which stands for hey take

00:19:19,250 --> 00:19:23,809
you know the containers port 8000 and

00:19:21,679 --> 00:19:26,000
publish it to my local machines port

00:19:23,809 --> 00:19:27,470
8000 so that I can still use localhost

00:19:26,000 --> 00:19:29,510
in my browser the way that I'm used to

00:19:27,470 --> 00:19:31,520
and then the name of the image that you

00:19:29,510 --> 00:19:33,080
want your container to be based on later

00:19:31,520 --> 00:19:34,700
on I'll show you an easier way to do

00:19:33,080 --> 00:19:36,140
this but if you wanted to start just

00:19:34,700 --> 00:19:38,480
with docker this is how you would run a

00:19:36,140 --> 00:19:39,919
container specifically for a Django

00:19:38,480 --> 00:19:41,690
project not all containers will need the

00:19:39,919 --> 00:19:43,820
ports for a Django project you need that

00:19:41,690 --> 00:19:45,410
port and we can we can prove to

00:19:43,820 --> 00:19:47,900
ourselves once our container is running

00:19:45,410 --> 00:19:49,280
if we open up a new console tab and we

00:19:47,900 --> 00:19:51,110
ask docker to tell us about our

00:19:49,280 --> 00:19:53,510
containers again so then we get the

00:19:51,110 --> 00:19:55,520
container ID the image the commands that

00:19:53,510 --> 00:19:57,350
it's running status some other

00:19:55,520 --> 00:19:59,390
information about it and then that name

00:19:57,350 --> 00:20:01,669
there you see the the names on the

00:19:59,390 --> 00:20:03,500
bottom right that's a kind of a nonsense

00:20:01,669 --> 00:20:05,120
name that docker gives your container I

00:20:03,500 --> 00:20:06,860
didn't name the container for event

00:20:05,120 --> 00:20:08,480
Allen I don't know what it means docker

00:20:06,860 --> 00:20:10,610
just puts two words together with an

00:20:08,480 --> 00:20:14,480
underscore which is I think a little fun

00:20:10,610 --> 00:20:16,820
in whimsical you can also hop into your

00:20:14,480 --> 00:20:18,620
container and poke around you do that

00:20:16,820 --> 00:20:20,480
with the docker exec command

00:20:18,620 --> 00:20:22,340
and learning how to exec into your

00:20:20,480 --> 00:20:23,929
container can be a little bit painful

00:20:22,340 --> 00:20:25,360
whenever you start to google it the

00:20:23,929 --> 00:20:27,350
people have kind of different strategies

00:20:25,360 --> 00:20:31,700
but this is the one that works pretty

00:20:27,350 --> 00:20:33,769
well for me so docker exec - IT the ID

00:20:31,700 --> 00:20:35,990
of your container which remember you get

00:20:33,769 --> 00:20:38,570
by running docker container LS so just

00:20:35,990 --> 00:20:41,360
copy that container ID and then paste it

00:20:38,570 --> 00:20:43,490
and then shell and you can actually see

00:20:41,360 --> 00:20:45,980
that we wind up in the code directory

00:20:43,490 --> 00:20:48,440
right so whenever we set that working

00:20:45,980 --> 00:20:50,299
directory in our docker file we can

00:20:48,440 --> 00:20:52,639
prove that that docker is doing that for

00:20:50,299 --> 00:20:54,230
us so whenever we enter our container we

00:20:52,639 --> 00:20:56,629
are immediately where we expect to be

00:20:54,230 --> 00:20:59,299
and we can prove that to ourselves by

00:20:56,629 --> 00:21:01,730
asking the container - just using a

00:20:59,299 --> 00:21:03,679
regular bash command asking it to list

00:21:01,730 --> 00:21:05,299
all of its file so we see our managed PI

00:21:03,679 --> 00:21:08,690
file our requirements file and our

00:21:05,299 --> 00:21:11,149
docker file the way that we expect to we

00:21:08,690 --> 00:21:12,830
can also go up a level and then list the

00:21:11,149 --> 00:21:15,440
directories that are there so we see our

00:21:12,830 --> 00:21:17,210
code directory is the second one but we

00:21:15,440 --> 00:21:18,769
also see all of these other directories

00:21:17,210 --> 00:21:20,720
and we don't really need to worry about

00:21:18,769 --> 00:21:22,009
those right now and you'll you'll get to

00:21:20,720 --> 00:21:23,929
a point where you might need to worry

00:21:22,009 --> 00:21:25,159
about them but for today we don't it's

00:21:23,929 --> 00:21:27,289
good to know that they're there though

00:21:25,159 --> 00:21:28,940
the container is doing its own thing it

00:21:27,289 --> 00:21:31,129
has a bunch of its own things installed

00:21:28,940 --> 00:21:32,690
in one of these directories you can

00:21:31,129 --> 00:21:34,879
actually you know go into it go down a

00:21:32,690 --> 00:21:36,830
few levels and see all the packages that

00:21:34,879 --> 00:21:38,480
you've installed in another one of these

00:21:36,830 --> 00:21:40,789
directories you can drill down into it

00:21:38,480 --> 00:21:42,889
and you can see your where your database

00:21:40,789 --> 00:21:44,960
lives so it's good to know that this is

00:21:42,889 --> 00:21:49,100
there we won't go into it today that's a

00:21:44,960 --> 00:21:51,110
little bit advanced charms for us to get

00:21:49,100 --> 00:21:52,759
out of your container you control D the

00:21:51,110 --> 00:21:55,100
reason I have this slide is it took me

00:21:52,759 --> 00:21:56,509
forever to learn this this is a keyboard

00:21:55,100 --> 00:21:58,039
shortcut that probably everyone in the

00:21:56,509 --> 00:22:00,350
room knew than me but just in case

00:21:58,039 --> 00:22:03,590
there's two of you that didn't there you

00:22:00,350 --> 00:22:05,299
go and then we can see though once we've

00:22:03,590 --> 00:22:07,190
hopped into the container and hopped out

00:22:05,299 --> 00:22:08,990
we never asked our container to stop

00:22:07,190 --> 00:22:10,399
running so it's still running we can ask

00:22:08,990 --> 00:22:12,440
docker to tell us the containers that

00:22:10,399 --> 00:22:14,299
exist and just because we hopped into a

00:22:12,440 --> 00:22:15,950
container and hopped out the container

00:22:14,299 --> 00:22:19,789
didn't change it's still chugging along

00:22:15,950 --> 00:22:22,070
doing what we asked it to do we can stop

00:22:19,789 --> 00:22:23,570
our container if we don't want it to be

00:22:22,070 --> 00:22:26,059
running for a little bit if we want to

00:22:23,570 --> 00:22:27,679
you know change something or or test

00:22:26,059 --> 00:22:30,559
something out we can stop it with just

00:22:27,679 --> 00:22:32,269
docker stop in the container ID and if

00:22:30,559 --> 00:22:32,509
we're using docker stop we can bring it

00:22:32,269 --> 00:22:34,399
back

00:22:32,509 --> 00:22:35,749
pretty easily with docker start so it

00:22:34,399 --> 00:22:37,519
doesn't have to rebuild anything it

00:22:35,749 --> 00:22:39,739
doesn't have to retrieve the image the

00:22:37,519 --> 00:22:40,969
container is is still there we had

00:22:39,739 --> 00:22:45,529
basically just paused it

00:22:40,969 --> 00:22:48,139
so stop really means pause we can kill

00:22:45,529 --> 00:22:50,029
the container entirely so if you run

00:22:48,139 --> 00:22:52,009
docker kill this means I want to blow

00:22:50,029 --> 00:22:52,369
this container away I never want to see

00:22:52,009 --> 00:22:54,619
it again

00:22:52,369 --> 00:22:56,779
now remember your image is still there

00:22:54,619 --> 00:22:59,029
but once you've run docker kill you'll

00:22:56,779 --> 00:23:00,829
have to run the docker run command to

00:22:59,029 --> 00:23:03,279
get your container back if you kill your

00:23:00,829 --> 00:23:07,269
container and try to start it again

00:23:03,279 --> 00:23:11,719
nothing will happen because it's dead

00:23:07,269 --> 00:23:13,669
okay now advanced potions docker compose

00:23:11,719 --> 00:23:16,699
I told you that I would show you an

00:23:13,669 --> 00:23:18,409
easier way to start your container this

00:23:16,699 --> 00:23:22,159
is the command that we know about so far

00:23:18,409 --> 00:23:24,649
right docker run - P 8000 : 8000 the

00:23:22,159 --> 00:23:26,629
name of our image and it's not like a

00:23:24,649 --> 00:23:28,579
huge command but it's a little bit more

00:23:26,629 --> 00:23:29,869
complicated than you know manage top I

00:23:28,579 --> 00:23:31,190
run server right like it's a lot to

00:23:29,869 --> 00:23:33,289
remember you have to remember the port

00:23:31,190 --> 00:23:35,749
the name of your image and that's a

00:23:33,289 --> 00:23:38,019
little bit annoying and so then we get

00:23:35,749 --> 00:23:40,249
to docker compose which is a tool that

00:23:38,019 --> 00:23:43,429
that lets us do things a little bit more

00:23:40,249 --> 00:23:45,499
easily it's free when you download

00:23:43,429 --> 00:23:47,690
docker if you're on a Mac and docker

00:23:45,499 --> 00:23:50,619
compose comes with docker if you don't

00:23:47,690 --> 00:23:53,649
have a Mac then it is an extra download

00:23:50,619 --> 00:23:55,669
but again it's free so that's fine and

00:23:53,649 --> 00:23:58,069
the biggest thing that docker compose

00:23:55,669 --> 00:24:01,039
gets you is the ability to run more than

00:23:58,069 --> 00:24:02,690
one container at once so my favorite

00:24:01,039 --> 00:24:04,699
feature of compose is just that it's

00:24:02,690 --> 00:24:06,829
easier to type but the second favorite

00:24:04,699 --> 00:24:08,539
feature is that I can identify several

00:24:06,829 --> 00:24:10,149
containers which we'll talk about why

00:24:08,539 --> 00:24:12,649
that's useful in just a moment and

00:24:10,149 --> 00:24:15,559
finally I can relate those containers to

00:24:12,649 --> 00:24:17,869
each other so I can I can say you know I

00:24:15,559 --> 00:24:19,309
if I if I identify a database container

00:24:17,869 --> 00:24:21,739
I can say I don't want to start my

00:24:19,309 --> 00:24:24,079
webserver until I have my database up

00:24:21,739 --> 00:24:25,849
and that's exactly what we'll do so you

00:24:24,079 --> 00:24:27,739
can think about docker compose as that

00:24:25,849 --> 00:24:29,569
magical bag that Hermione has in the

00:24:27,739 --> 00:24:31,459
very last Harry Potter movie the

00:24:29,569 --> 00:24:33,079
character Hermione has this this bag

00:24:31,459 --> 00:24:36,469
whenever they're on the run from the law

00:24:33,079 --> 00:24:38,719
and it's it's pretty small but it holds

00:24:36,469 --> 00:24:40,819
essentially an infinite amount of stuff

00:24:38,719 --> 00:24:42,379
so you'll see her reaching her arm into

00:24:40,819 --> 00:24:43,999
this tiny bag and it's all the way up to

00:24:42,379 --> 00:24:45,929
her shoulder and she's pulling out

00:24:43,999 --> 00:24:47,399
potions and books and a ten

00:24:45,929 --> 00:24:49,110
I mean all kinds of stuff comes out of

00:24:47,399 --> 00:24:51,360
this bag and that's kind of what docker

00:24:49,110 --> 00:24:53,610
composes it lets you put all of these

00:24:51,360 --> 00:24:55,409
containers identify them to find them in

00:24:53,610 --> 00:24:57,600
this one file and then you have access

00:24:55,409 --> 00:24:59,369
to them by just running one command you

00:24:57,600 --> 00:25:03,450
don't have to run several containers

00:24:59,369 --> 00:25:05,909
individually so docker compose comes

00:25:03,450 --> 00:25:08,220
with its own file that also goes at the

00:25:05,909 --> 00:25:10,169
the wherever your manage PI is wherever

00:25:08,220 --> 00:25:12,059
your docker file is it's written in

00:25:10,169 --> 00:25:13,619
Hamel if you've not written in Yambol

00:25:12,059 --> 00:25:15,899
before that syntax is pretty

00:25:13,619 --> 00:25:17,879
well-documented and it's a relatively

00:25:15,899 --> 00:25:19,769
straightforward syntax it relies on that

00:25:17,879 --> 00:25:24,110
that nesting that we like so much about

00:25:19,769 --> 00:25:27,059
Python so we'll go through this one too

00:25:24,110 --> 00:25:29,279
the version is just a version of compose

00:25:27,059 --> 00:25:31,649
that you're using 3 is the most recent

00:25:29,279 --> 00:25:33,690
version right now so the version that

00:25:31,649 --> 00:25:36,960
you're using will impact the the syntax

00:25:33,690 --> 00:25:38,940
that composes expecting from you and

00:25:36,960 --> 00:25:41,970
then you identify your containers so

00:25:38,940 --> 00:25:44,190
services is basically another word for

00:25:41,970 --> 00:25:47,490
containers and docker compose parlance

00:25:44,190 --> 00:25:50,820
so I'm identifying a DB a database

00:25:47,490 --> 00:25:52,830
container and also a web container and

00:25:50,820 --> 00:25:54,419
this is also one of my other favorite

00:25:52,830 --> 00:25:56,309
features about docker compose is you can

00:25:54,419 --> 00:25:57,779
do things like use Postgres without

00:25:56,309 --> 00:25:59,399
having to download Postgres on your

00:25:57,779 --> 00:26:01,110
machine and the reason that this is

00:25:59,399 --> 00:26:03,240
wonderful is because two or three years

00:26:01,110 --> 00:26:04,499
ago I tried to download Postgres and get

00:26:03,240 --> 00:26:06,869
it configured so that I could work on a

00:26:04,499 --> 00:26:08,669
particular open source project and I

00:26:06,869 --> 00:26:09,779
couldn't get it to work like I I didn't

00:26:08,669 --> 00:26:12,659
have the right permissions on my machine

00:26:09,779 --> 00:26:14,549
or sound like I gave up but now I can

00:26:12,659 --> 00:26:17,129
just say hey like just like in my docker

00:26:14,549 --> 00:26:19,529
file I said I want to base this image on

00:26:17,129 --> 00:26:22,110
this particular version of Python

00:26:19,529 --> 00:26:24,720
I can tell docker compose I want to base

00:26:22,110 --> 00:26:26,759
my database on this image of Postgres

00:26:24,720 --> 00:26:27,749
that's published now I just have post

00:26:26,759 --> 00:26:29,879
Chris here so it's going to

00:26:27,749 --> 00:26:32,159
automatically get the latest version but

00:26:29,879 --> 00:26:33,899
you could add that : and a specific tag

00:26:32,159 --> 00:26:36,840
to specify the version of post Chris

00:26:33,899 --> 00:26:38,070
that you want to use and of course

00:26:36,840 --> 00:26:39,480
whenever you're making changes about

00:26:38,070 --> 00:26:41,159
your database you'll want to update your

00:26:39,480 --> 00:26:43,529
settings not pi in the ways that you're

00:26:41,159 --> 00:26:44,789
used to to tell Django to expect a

00:26:43,529 --> 00:26:48,119
different kind of database than the one

00:26:44,789 --> 00:26:50,129
that it ships with in your web container

00:26:48,119 --> 00:26:52,259
you have to do a little bit more you

00:26:50,129 --> 00:26:53,220
have to have to tell docker about a few

00:26:52,259 --> 00:26:56,490
more things so that it will work

00:26:53,220 --> 00:26:58,470
properly you can run this command I

00:26:56,490 --> 00:26:59,789
usually have mine set up to go ahead and

00:26:58,470 --> 00:27:02,580
run migrations but

00:26:59,789 --> 00:27:04,289
it starts my server there are some pros

00:27:02,580 --> 00:27:07,049
and cons to that you probably don't want

00:27:04,289 --> 00:27:08,519
to have compose make your migrations

00:27:07,049 --> 00:27:10,970
but having composed go ahead and run

00:27:08,519 --> 00:27:13,529
them can save you a little bit of time

00:27:10,970 --> 00:27:17,070
you also create this concept called a

00:27:13,529 --> 00:27:19,019
code volume a volume is just a way for

00:27:17,070 --> 00:27:21,359
docker to keep track of a particular

00:27:19,019 --> 00:27:24,419
chunk of data or files between your

00:27:21,359 --> 00:27:26,039
coding sessions and then you can go

00:27:24,419 --> 00:27:28,409
ahead and publish those ports right so

00:27:26,039 --> 00:27:29,999
this is the same concept as whenever we

00:27:28,409 --> 00:27:32,129
were using the docker run command we're

00:27:29,999 --> 00:27:34,229
telling compose I want to take the

00:27:32,129 --> 00:27:36,149
containers port 8000 and publish it to

00:27:34,229 --> 00:27:40,080
my machines port 8000 so that I can

00:27:36,149 --> 00:27:41,759
access my website in my browser and then

00:27:40,080 --> 00:27:43,799
finally I told you before that we could

00:27:41,759 --> 00:27:45,539
relate containers to one another that's

00:27:43,799 --> 00:27:48,450
what we're doing here we're saying this

00:27:45,539 --> 00:27:50,970
web container depends on the database

00:27:48,450 --> 00:27:53,129
container so I don't want my web

00:27:50,970 --> 00:27:55,409
container to start until my database

00:27:53,129 --> 00:27:56,460
container is up and running and a few

00:27:55,409 --> 00:27:58,769
other things that you can do with

00:27:56,460 --> 00:28:01,349
composes you can add services for like

00:27:58,769 --> 00:28:03,299
your caching service like Redis or your

00:28:01,349 --> 00:28:05,700
tasks service like celery and if you

00:28:03,299 --> 00:28:07,080
have for example a a celery tacit is

00:28:05,700 --> 00:28:09,090
supposed to run every five minutes and

00:28:07,080 --> 00:28:10,710
it has a lot of console output that can

00:28:09,090 --> 00:28:12,720
get really really annoying it kind of

00:28:10,710 --> 00:28:14,099
clogs up your console so one of the

00:28:12,720 --> 00:28:15,929
really nice things that you can do is

00:28:14,099 --> 00:28:18,809
you can you can start your project and

00:28:15,929 --> 00:28:21,419
then you can stop just that celery tasks

00:28:18,809 --> 00:28:23,519
like that celery service so your your

00:28:21,419 --> 00:28:25,019
celery tasks just won't run if you're

00:28:23,519 --> 00:28:26,970
working on something else which which is

00:28:25,019 --> 00:28:28,919
a little bit handy I like that that

00:28:26,970 --> 00:28:30,239
saves you from having to like change

00:28:28,919 --> 00:28:31,889
your celery beet settings in your

00:28:30,239 --> 00:28:33,599
settings file or something you know

00:28:31,889 --> 00:28:37,019
which you might forget to unchanged

00:28:33,599 --> 00:28:38,759
later on and what this means since you

00:28:37,019 --> 00:28:40,830
know you noticed here that we have that

00:28:38,759 --> 00:28:42,479
command line where we're going ahead and

00:28:40,830 --> 00:28:44,279
running our server we don't actually

00:28:42,479 --> 00:28:46,369
need to do that from our Ducker file

00:28:44,279 --> 00:28:50,460
anymore so we can just get rid of that

00:28:46,369 --> 00:28:54,029
and now instead of having to run docker

00:28:50,460 --> 00:28:56,879
run - P 8000 colon 8000 Hogwarts we can

00:28:54,029 --> 00:28:58,649
just run docker compose up and if if

00:28:56,879 --> 00:29:00,599
docker has never seen this image before

00:28:58,649 --> 00:29:02,940
it's never built it before docker

00:29:00,599 --> 00:29:05,849
compose up knows to build that image

00:29:02,940 --> 00:29:07,889
before it starts to run a container if

00:29:05,849 --> 00:29:09,149
you need to rebuild your image you need

00:29:07,889 --> 00:29:11,239
to make sure that your image gets

00:29:09,149 --> 00:29:13,510
rebuilt you can just add the build flag

00:29:11,239 --> 00:29:15,550
and whenever you run docker

00:29:13,510 --> 00:29:16,960
compose up if you already if you don't

00:29:15,550 --> 00:29:18,550
already have the image you'll see all

00:29:16,960 --> 00:29:20,440
that output where it's creating the

00:29:18,550 --> 00:29:21,370
image but if you already have your image

00:29:20,440 --> 00:29:23,140
you'll see some output that looks

00:29:21,370 --> 00:29:25,450
something like this and so you'll see

00:29:23,140 --> 00:29:27,490
that we're creating a date a DB SERP

00:29:25,450 --> 00:29:29,050
service and we're also creating a web

00:29:27,490 --> 00:29:30,970
service and we're seeing that we're

00:29:29,050 --> 00:29:33,190
attaching that database service to that

00:29:30,970 --> 00:29:34,600
web service so compose is doing what we

00:29:33,190 --> 00:29:36,820
told it to it's creating the database

00:29:34,600 --> 00:29:38,260
service first then it's creating the web

00:29:36,820 --> 00:29:40,330
service and then it's relating them

00:29:38,260 --> 00:29:41,770
together and then we can see that it's

00:29:40,330 --> 00:29:43,510
running the migrations just like we

00:29:41,770 --> 00:29:45,520
asked it to and then it's starting our

00:29:43,510 --> 00:29:48,340
server and if we go to localhost on our

00:29:45,520 --> 00:29:50,440
on our in our browser we will have

00:29:48,340 --> 00:29:54,070
access to our website the way that we're

00:29:50,440 --> 00:29:55,900
used to and if we open a new tab and we

00:29:54,070 --> 00:29:57,880
run that docker container LS command

00:29:55,900 --> 00:29:59,110
again we can actually see that we are

00:29:57,880 --> 00:30:01,240
definitely running more than one

00:29:59,110 --> 00:30:04,300
container now so we see that web

00:30:01,240 --> 00:30:06,220
container like we expect but we also see

00:30:04,300 --> 00:30:10,030
this new Postgres container that

00:30:06,220 --> 00:30:12,610
contains our database and then you can

00:30:10,030 --> 00:30:15,310
do things like run management commands

00:30:12,610 --> 00:30:18,040
using docker compose so you just prefix

00:30:15,310 --> 00:30:19,900
everything with docker compose run and

00:30:18,040 --> 00:30:21,910
instead of having to have the the

00:30:19,900 --> 00:30:24,910
container ID like you have to you know

00:30:21,910 --> 00:30:26,260
go and like copy that that those weird

00:30:24,910 --> 00:30:28,240
strings that don't make any sense you

00:30:26,260 --> 00:30:30,670
can just specify the name of the service

00:30:28,240 --> 00:30:33,010
that you defined and compose and then

00:30:30,670 --> 00:30:35,110
after that it's you know dot slash

00:30:33,010 --> 00:30:37,420
manage spy whatever the way that you're

00:30:35,110 --> 00:30:40,720
used to and you've probably noticed this

00:30:37,420 --> 00:30:43,060
this - - RM flag whenever you run a

00:30:40,720 --> 00:30:45,820
docker compose run command that will

00:30:43,060 --> 00:30:48,100
create a new container that it can run

00:30:45,820 --> 00:30:50,830
that particular command in but you don't

00:30:48,100 --> 00:30:52,240
actually need that container once once

00:30:50,830 --> 00:30:54,520
it's finished doing the tasks that you

00:30:52,240 --> 00:30:57,700
ask it to do so you can tell docker hey

00:30:54,520 --> 00:30:59,410
you know run make migrations in a new

00:30:57,700 --> 00:31:00,580
container but then just trash that

00:30:59,410 --> 00:31:02,980
container because I won't need it

00:31:00,580 --> 00:31:07,750
anymore and kind of like magic docker

00:31:02,980 --> 00:31:08,800
will will go ahead and I saw my time

00:31:07,750 --> 00:31:12,850
warning and I lost my train of thought

00:31:08,800 --> 00:31:14,620
oh yeah but so so docker will will will

00:31:12,850 --> 00:31:16,330
go ahead and tell your first web

00:31:14,620 --> 00:31:18,340
container about the changes that were

00:31:16,330 --> 00:31:20,650
made in the second container which is

00:31:18,340 --> 00:31:22,390
which is pretty handy as well you can

00:31:20,650 --> 00:31:23,650
hop into the shell in the same way

00:31:22,390 --> 00:31:26,680
Katie taught us about the shell

00:31:23,650 --> 00:31:27,470
yesterday with the same technique docker

00:31:26,680 --> 00:31:29,270
compose

00:31:27,470 --> 00:31:30,679
web managed by shell and then you have

00:31:29,270 --> 00:31:32,330
access to the shell just the way that

00:31:30,679 --> 00:31:34,299
you're used to and again you can see

00:31:32,330 --> 00:31:36,590
that you have that that database

00:31:34,299 --> 00:31:38,960
container that's that's getting created

00:31:36,590 --> 00:31:40,460
and being confirmed before you hop into

00:31:38,960 --> 00:31:42,200
the shell so that whenever you're trying

00:31:40,460 --> 00:31:44,630
to access the data in your models you

00:31:42,200 --> 00:31:46,700
get those pretty easily and then you can

00:31:44,630 --> 00:31:48,049
stop and start containers pretty

00:31:46,700 --> 00:31:50,600
similarly to the way that you do that

00:31:48,049 --> 00:31:52,640
with with vanilla docker you just use

00:31:50,600 --> 00:31:54,409
docker compose instead of docker and

00:31:52,640 --> 00:31:56,690
again instead of having to get that

00:31:54,409 --> 00:31:58,220
container ID that nonsense string you

00:31:56,690 --> 00:32:00,679
just use the name of your service so you

00:31:58,220 --> 00:32:02,480
can start and stop your web containers

00:32:00,679 --> 00:32:03,799
which is pretty handy because my

00:32:02,480 --> 00:32:05,990
experience is that sometimes whenever

00:32:03,799 --> 00:32:07,490
you make changes in a template Django

00:32:05,990 --> 00:32:09,500
kind of likes you to stop and restart

00:32:07,490 --> 00:32:11,179
the server which gets a little bit

00:32:09,500 --> 00:32:13,370
annoying but it happens sometimes and so

00:32:11,179 --> 00:32:15,620
this is a simpler way than having to

00:32:13,370 --> 00:32:17,809
copy and paste that container ID to get

00:32:15,620 --> 00:32:19,220
that to happen at the end of the day

00:32:17,809 --> 00:32:21,409
when you're ready to go to sleep you run

00:32:19,220 --> 00:32:23,179
docker compose down docker will very

00:32:21,409 --> 00:32:24,740
gracefully remove your containers and

00:32:23,179 --> 00:32:25,669
shut down its system so that you're

00:32:24,740 --> 00:32:28,640
ready to go home

00:32:25,669 --> 00:32:30,049
and I've created a little sample project

00:32:28,640 --> 00:32:32,059
for you on github that you should be

00:32:30,049 --> 00:32:33,980
able to check out download docker

00:32:32,059 --> 00:32:36,710
download docker compose and just run

00:32:33,980 --> 00:32:38,210
there are some instructions there and of

00:32:36,710 --> 00:32:39,770
course feel free to ask me any questions

00:32:38,210 --> 00:32:41,799
I put it together last night at about

00:32:39,770 --> 00:32:44,270
1:00 in the morning so if there are any

00:32:41,799 --> 00:32:46,150
any errors please let me know when I

00:32:44,270 --> 00:32:50,210
would love to correct those I was I was

00:32:46,150 --> 00:32:51,530
not at my freshest at that point and so

00:32:50,210 --> 00:32:53,419
I want to close with a quote from Albus

00:32:51,530 --> 00:32:54,770
Dumbledore Albus Dumbledore the greatest

00:32:53,419 --> 00:32:57,230
headmaster that Hogwarts has ever known

00:32:54,770 --> 00:32:59,299
said it is the unknown we fear when we

00:32:57,230 --> 00:33:01,190
look upon docker and nothing more and

00:32:59,299 --> 00:33:03,500
what he meant was that docker can be a

00:33:01,190 --> 00:33:05,179
little bit intimidating there's a lot to

00:33:03,500 --> 00:33:07,280
learn there's new vocabulary there's new

00:33:05,179 --> 00:33:10,159
commands but at the end of the day it's

00:33:07,280 --> 00:33:12,200
a it's a really wonderful tool to use I

00:33:10,159 --> 00:33:13,850
am a complete convert to it it was

00:33:12,200 --> 00:33:16,159
pretty pretty intimidating to me at

00:33:13,850 --> 00:33:18,650
first but now I'm very much in love with

00:33:16,159 --> 00:33:19,909
docker and there's it has so many more

00:33:18,650 --> 00:33:22,990
capabilities than what I've gone into

00:33:19,909 --> 00:33:26,330
here and I've given you just many many

00:33:22,990 --> 00:33:28,130
resources and again I will put my I'll

00:33:26,330 --> 00:33:30,679
put my slides up these will be clickable

00:33:28,130 --> 00:33:33,020
so you will know but there there are so

00:33:30,679 --> 00:33:35,929
many resources available to you some are

00:33:33,020 --> 00:33:37,399
better than others but that that docker

00:33:35,929 --> 00:33:39,230
cheat sheet that's like third from the

00:33:37,399 --> 00:33:41,180
bottom that is done is just a lifesaver

00:33:39,230 --> 00:33:42,830
it has the full list of docker

00:33:41,180 --> 00:33:45,320
commands and a pretty easy to digest

00:33:42,830 --> 00:33:47,090
format and I think I've used just about

00:33:45,320 --> 00:33:48,290
all of my time so that's all I have for

00:33:47,090 --> 00:33:57,839
today thank you

00:33:48,290 --> 00:33:57,839

YouTube URL: https://www.youtube.com/watch?v=v5jfDDg55xs


