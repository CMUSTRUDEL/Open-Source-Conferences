Title: DjangoCon 2018 - Can packaging improve Django deployments?
Publication date: 2018-05-23
Playlist: DjangoCon Europe 2018 in Heidelberg
Description: 
	https://media.ccc.de/v/hd-117-can-packaging-improve-django-deployments-



How can packaging Django projects make deployments easier, faster and more reliable?

Deployments of Django projects can be a challenging task. Beside the Python source code itself you usually have to handle a lot of other stuff:

* Installing Python dependencies
* Shipping JavaScript code and installing it's dependencies
* Compiling SCSS to CSS
* Collecting static files
* Building documentation
* Compiling translations
* …

And of course you want a deployment approach that is independent of a specific hosting solution.

Also you have to think about the scalability of your deployment when the number of servers you operate increases.

This usually means that `git pull` is not the best way to deal with these tasks.

So I will discuss different ways to package your Django project like

* Wheels
* JavaScript packages
* Operating system packages
* Containers

Some of these concepts will hopefully help you to make your deployment process easier, faster and more reliable.

Markus Zapke-Gründemann
Captions: 
	00:00:06,439 --> 00:00:13,140
yeah my name is Marcus are excited to be

00:00:10,559 --> 00:00:15,320
here today to give

00:00:13,140 --> 00:00:17,610
I also want to thank the organizers for

00:00:15,320 --> 00:00:22,810
doing such a great job organizing this

00:00:17,610 --> 00:00:24,080
conference here so it's great to be here

00:00:22,810 --> 00:00:27,210
[Music]

00:00:24,080 --> 00:00:30,360
just we've note before I start my slides

00:00:27,210 --> 00:00:32,220
are online I will show the you are at

00:00:30,360 --> 00:00:34,400
the end of my talk so you don't have to

00:00:32,220 --> 00:00:36,050
write on everything if it's one slides

00:00:34,400 --> 00:00:40,470
okay

00:00:36,050 --> 00:00:43,680
so few words about me I started creating

00:00:40,470 --> 00:00:45,360
websites at the end of the 90s because I

00:00:43,680 --> 00:00:48,350
was fascinated by communication

00:00:45,360 --> 00:00:51,210
possibilities that Dean's then provided

00:00:48,350 --> 00:00:54,809
so I started with Perl and CGI

00:00:51,210 --> 00:00:58,970
moved to PHP JavaScript and finally he

00:00:54,809 --> 00:01:02,670
discovered Python and later Django

00:00:58,970 --> 00:01:04,530
because I call myself like an

00:01:02,670 --> 00:01:07,280
open-source software developer this is

00:01:04,530 --> 00:01:09,299
because I never visited university

00:01:07,280 --> 00:01:13,200
didn't really work out with me and the

00:01:09,299 --> 00:01:15,750
university never got there and one of

00:01:13,200 --> 00:01:16,950
the main motivations for me to be active

00:01:15,750 --> 00:01:20,579
in this community is to give something

00:01:16,950 --> 00:01:24,810
back so that people that also can't

00:01:20,579 --> 00:01:28,770
follow the usual path of learning um can

00:01:24,810 --> 00:01:30,509
we can all learn from each other I'm a

00:01:28,770 --> 00:01:32,189
member of the Leipzig pythons a group so

00:01:30,509 --> 00:01:36,479
I'm from Leipzig which is a city here in

00:01:32,189 --> 00:01:38,520
South East Germany and I want to give a

00:01:36,479 --> 00:01:41,670
huge shout out to the folks over there

00:01:38,520 --> 00:01:43,289
because I was able to give a preview of

00:01:41,670 --> 00:01:44,820
my talk over there and they happen a lot

00:01:43,289 --> 00:01:47,399
with their feedback to improve the talk

00:01:44,820 --> 00:01:50,820
so yeah thank you very much over there

00:01:47,399 --> 00:01:52,950
in Leipzig I'm also founding member of

00:01:50,820 --> 00:01:56,159
the Jenkins German Django Association

00:01:52,950 --> 00:01:58,499
which was founded to do the jingle corn

00:01:56,159 --> 00:02:03,270
2010 in Berlin first Community Edition

00:01:58,499 --> 00:02:06,749
and I'm also active jangled supporter it

00:02:03,270 --> 00:02:08,250
like work from yesterday and I'm a open

00:02:06,749 --> 00:02:11,970
knowledge lab founding member which is

00:02:08,250 --> 00:02:13,460
something about open data and yeah I'm

00:02:11,970 --> 00:02:16,350
getting people to learn more about

00:02:13,460 --> 00:02:17,819
coding and finally I'm the CTO of

00:02:16,350 --> 00:02:20,160
feature pipe it's a company that is

00:02:17,819 --> 00:02:22,480
offering some services around video

00:02:20,160 --> 00:02:27,260
submission encoding and streaming

00:02:22,480 --> 00:02:29,750
yeah so that's a question today how can

00:02:27,260 --> 00:02:34,000
packaging make deployments easier faster

00:02:29,750 --> 00:02:36,670
and more reliable but before I start

00:02:34,000 --> 00:02:40,609
discussing the question I have to

00:02:36,670 --> 00:02:42,079
explain three things first this talk is

00:02:40,609 --> 00:02:44,150
not about publishing a giant project

00:02:42,079 --> 00:02:46,099
with EB Pais and packaging index it's

00:02:44,150 --> 00:02:48,680
just about the deployment but using

00:02:46,099 --> 00:02:52,209
these tools for that second I'm not a

00:02:48,680 --> 00:02:54,409
paging expert so these are just my

00:02:52,209 --> 00:02:59,170
personal experience with these tools and

00:02:54,409 --> 00:03:01,790
what idea to end what worked for me but

00:02:59,170 --> 00:03:06,440
I'm still very happy about any feedback

00:03:01,790 --> 00:03:08,689
after my talk so yeah key topics I'm

00:03:06,440 --> 00:03:12,500
going to talk about first thing is like

00:03:08,689 --> 00:03:15,560
the quest second thing is packaging a

00:03:12,500 --> 00:03:19,010
tinkerer project installing a packaged

00:03:15,560 --> 00:03:21,920
jingle project and after we fix it then

00:03:19,010 --> 00:03:25,340
a quick comparison of packaging tools

00:03:21,920 --> 00:03:33,620
and finally a short summary of what I

00:03:25,340 --> 00:03:36,859
have shown so yeah the press is that I

00:03:33,620 --> 00:03:43,669
start with a short story about my first

00:03:36,859 --> 00:03:47,859
Python project this was in 2007 I had to

00:03:43,669 --> 00:03:50,449
build a phone book by publication with a

00:03:47,859 --> 00:03:54,400
web application construction kit code

00:03:50,449 --> 00:03:57,290
novo does anyone know it or has used it

00:03:54,400 --> 00:04:00,139
no okay it's something that has bit on

00:03:57,290 --> 00:04:02,959
top of twisted and it was the first

00:04:00,139 --> 00:04:05,389
experience for me was was pison and back

00:04:02,959 --> 00:04:10,129
was very interesting and the phone book

00:04:05,389 --> 00:04:14,479
was hooked up to an LDAP server and it

00:04:10,129 --> 00:04:17,690
was deployed on a Windows Server and the

00:04:14,479 --> 00:04:21,580
thing I bought was bundled together in a

00:04:17,690 --> 00:04:23,810
single installer so that you can simply

00:04:21,580 --> 00:04:25,849
install the single installer it also

00:04:23,810 --> 00:04:27,970
installs the service runs the server's

00:04:25,849 --> 00:04:30,409
all the time and it can run behind an

00:04:27,970 --> 00:04:35,320
Internet Information server Windows

00:04:30,409 --> 00:04:37,290
Server and this was a really exciting

00:04:35,320 --> 00:04:41,560
experience for me because before that I

00:04:37,290 --> 00:04:42,850
just deployed code VII FTP and you never

00:04:41,560 --> 00:04:45,610
had any idea what happened on the other

00:04:42,850 --> 00:04:50,370
side and if everything is like you would

00:04:45,610 --> 00:04:52,270
have it like to be and so my quest for

00:04:50,370 --> 00:04:55,980
reproducible and deterministic

00:04:52,270 --> 00:04:55,980
deployments began

00:04:56,280 --> 00:05:05,500
okay so let's have a look at general

00:04:59,230 --> 00:05:12,070
projects and how it looks like if it's

00:05:05,500 --> 00:05:18,010
modified to be packaged so this is more

00:05:12,070 --> 00:05:19,360
or less what most people know but has

00:05:18,010 --> 00:05:21,970
been a little bit modified so that it

00:05:19,360 --> 00:05:24,070
can be packaged using setup tools there

00:05:21,970 --> 00:05:27,550
are a few important changes first thing

00:05:24,070 --> 00:05:31,900
is that there is a manifest file there

00:05:27,550 --> 00:05:35,230
at the top there see the new doesn't

00:05:31,900 --> 00:05:38,040
work here yeah and then there is also a

00:05:35,230 --> 00:05:43,900
set of cgn setup PI file here at the

00:05:38,040 --> 00:05:46,420
bottom and then our apps have been moved

00:05:43,900 --> 00:05:48,130
into a separate directory many people do

00:05:46,420 --> 00:05:52,510
that but here it's done in a way that

00:05:48,130 --> 00:05:54,730
everything is Python packages and all

00:05:52,510 --> 00:06:01,170
the configuration files have been moved

00:05:54,730 --> 00:06:03,880
into a directory called config and yeah

00:06:01,170 --> 00:06:06,760
so let's have a look at these files and

00:06:03,880 --> 00:06:10,030
how they look now this is more or less

00:06:06,760 --> 00:06:14,790
your standard managed by fire the only

00:06:10,030 --> 00:06:18,150
difference is the 9:6 here at the end

00:06:14,790 --> 00:06:20,920
this doesn't really work here okay

00:06:18,150 --> 00:06:22,690
that's good ok so it's at the end of

00:06:20,920 --> 00:06:25,690
that line 6 you can see it says my

00:06:22,690 --> 00:06:28,990
project config settings normally it says

00:06:25,690 --> 00:06:30,850
just my project settings and this is saw

00:06:28,990 --> 00:06:33,820
that it so can pick up this opportunity

00:06:30,850 --> 00:06:38,160
rings file and the WHI PI file has been

00:06:33,820 --> 00:06:41,410
updated accordingly so small change

00:06:38,160 --> 00:06:47,110
these are the changes that have to be

00:06:41,410 --> 00:06:48,550
made and settings 5 it shows only the

00:06:47,110 --> 00:06:48,940
settings that have been updated so of

00:06:48,550 --> 00:06:50,170
course

00:06:48,940 --> 00:06:51,400
by a little bit bigger and has more

00:06:50,170 --> 00:06:54,700
settings but it's only the stuff that

00:06:51,400 --> 00:06:57,280
needs to be updated so you can see the

00:06:54,700 --> 00:07:01,410
app that is being installed also uses

00:06:57,280 --> 00:07:06,550
this my project Apps namespace now and

00:07:01,410 --> 00:07:08,850
the ulq and wsgi application settings

00:07:06,550 --> 00:07:17,050
also use the my project config

00:07:08,850 --> 00:07:19,110
namespaces then you could in create a

00:07:17,050 --> 00:07:22,000
few more directories.for example

00:07:19,110 --> 00:07:27,490
translations for static files and for

00:07:22,000 --> 00:07:29,320
templates there are no media or static

00:07:27,490 --> 00:07:32,140
group directories you could create them

00:07:29,320 --> 00:07:33,910
if you want to but it doesn't make so

00:07:32,140 --> 00:07:38,190
much sense because if you later deploy

00:07:33,910 --> 00:07:40,360
that you can't collect your static files

00:07:38,190 --> 00:07:43,960
where you install that package and you

00:07:40,360 --> 00:07:46,540
also can't bring your user uploads where

00:07:43,960 --> 00:07:48,910
you install that package because when

00:07:46,540 --> 00:07:50,560
you deploy again or will be raised and

00:07:48,910 --> 00:07:54,630
so all the user content will be erased

00:07:50,560 --> 00:07:54,630
and this is not what you really want

00:07:56,010 --> 00:08:02,080
yeah settings has been up to be updated

00:08:00,850 --> 00:08:04,930
again after we added these three

00:08:02,080 --> 00:08:08,410
directories so that these directories

00:08:04,930 --> 00:08:11,940
are in the appropriate settings for

00:08:08,410 --> 00:08:15,280
locates static files and templates

00:08:11,940 --> 00:08:17,230
it's just joining the base pass that is

00:08:15,280 --> 00:08:19,240
already provided by settings by with the

00:08:17,230 --> 00:08:25,390
directory names or some nothing so fancy

00:08:19,240 --> 00:08:27,970
so far so usually people use

00:08:25,390 --> 00:08:29,680
requirements txt files to define the

00:08:27,970 --> 00:08:32,919
dependencies for project I think most of

00:08:29,680 --> 00:08:34,990
the people here do this and set up I and

00:08:32,919 --> 00:08:38,830
set of gez files are used for packaging

00:08:34,990 --> 00:08:41,650
libraries so if you publish a generic

00:08:38,830 --> 00:08:43,419
Python library or a Django episode you

00:08:41,650 --> 00:08:46,200
want to be installed in two different

00:08:43,419 --> 00:08:54,610
projects usually set upon a set of Gigi

00:08:46,200 --> 00:08:57,910
but why not use that fyn set of gfg for

00:08:54,610 --> 00:08:59,310
bows so for dependency is n for

00:08:57,910 --> 00:09:02,850
packaging

00:08:59,310 --> 00:09:08,610
and usually a setup I looks a little bit

00:09:02,850 --> 00:09:09,930
like this you have a few functions some

00:09:08,610 --> 00:09:11,190
code at the top and then you have this

00:09:09,930 --> 00:09:13,920
you'd set a function with all the

00:09:11,190 --> 00:09:17,820
arguments there and usually these

00:09:13,920 --> 00:09:19,110
functions are used to fetch some

00:09:17,820 --> 00:09:25,010
information from somewhere else and

00:09:19,110 --> 00:09:28,320
inject it into the setup function call

00:09:25,010 --> 00:09:30,420
but yeah the code is so small because

00:09:28,320 --> 00:09:32,340
it's not really interesting it's not

00:09:30,420 --> 00:09:37,590
what we want to do want to do something

00:09:32,340 --> 00:09:40,590
else because in December 2016 setup

00:09:37,590 --> 00:09:42,990
tools 30.3 dot 0 has been released and

00:09:40,590 --> 00:09:45,930
it has support for putting all that

00:09:42,990 --> 00:09:51,330
metadata into a set of CG it's not used

00:09:45,930 --> 00:09:53,520
by so many people because the people

00:09:51,330 --> 00:09:55,230
that want to install your package have

00:09:53,520 --> 00:09:58,800
to have the right setup to its version

00:09:55,230 --> 00:10:00,540
and so the price and packaging Authority

00:09:58,800 --> 00:10:05,820
people do not announce as widely to use

00:10:00,540 --> 00:10:07,980
it but I'm using it and it works and as

00:10:05,820 --> 00:10:10,140
you can see everything is much more

00:10:07,980 --> 00:10:11,760
readable than before you don't have any

00:10:10,140 --> 00:10:19,620
code here that is being executed any

00:10:11,760 --> 00:10:22,290
longer and yeah so it's a nice

00:10:19,620 --> 00:10:25,680
alternative to having this setup PI file

00:10:22,290 --> 00:10:28,080
and it also brings a few interesting

00:10:25,680 --> 00:10:30,120
features here you have you see the long

00:10:28,080 --> 00:10:31,589
description you can say 5 : week me

00:10:30,120 --> 00:10:33,089
hours T and minutes reading the content

00:10:31,589 --> 00:10:35,070
from that meat we are see and it's

00:10:33,089 --> 00:10:36,360
putting it into the long description so

00:10:35,070 --> 00:10:39,030
you still have this feature that you

00:10:36,360 --> 00:10:42,200
before roll busy everyone have their own

00:10:39,030 --> 00:10:42,200
function and set up five

00:10:43,430 --> 00:10:50,430
so I'm know before there was this

00:10:47,940 --> 00:10:51,930
metadata section and because not

00:10:50,430 --> 00:10:54,210
everything did fell on sings night I had

00:10:51,930 --> 00:10:56,760
a things right here which has the

00:10:54,210 --> 00:10:59,460
options part which defines a few more

00:10:56,760 --> 00:11:01,380
options to include the package data

00:10:59,460 --> 00:11:03,480
which would be templates under the stuff

00:11:01,380 --> 00:11:06,390
in case of Django it also defines the

00:11:03,480 --> 00:11:10,560
name of the package which is your my

00:11:06,390 --> 00:11:12,240
project just for the demo the

00:11:10,560 --> 00:11:15,180
interesting thing is you can

00:11:12,240 --> 00:11:19,770
fine or the installing fire zero and you

00:11:15,180 --> 00:11:26,010
could even pin them because we are not

00:11:19,770 --> 00:11:27,660
relying or we are not our project is not

00:11:26,010 --> 00:11:31,680
used by another project we are like the

00:11:27,660 --> 00:11:34,550
the end of the of the chain and so we

00:11:31,680 --> 00:11:37,350
can pin dependencies as we want because

00:11:34,550 --> 00:11:38,970
yeah nobody else will get trouble of

00:11:37,350 --> 00:11:40,230
this this will be a library you

00:11:38,970 --> 00:11:42,720
shouldn't do this this way but if you

00:11:40,230 --> 00:11:44,520
have a by jingo project

00:11:42,720 --> 00:11:47,940
it helps you a lot to get reproducible

00:11:44,520 --> 00:11:49,640
and deterministic installations you can

00:11:47,940 --> 00:11:53,459
also use Python requires at the bottom

00:11:49,640 --> 00:11:56,610
to limit the price inversions this can

00:11:53,459 --> 00:11:58,080
be used with so it would refuse to

00:11:56,610 --> 00:12:02,279
install if you have a different price

00:11:58,080 --> 00:12:04,770
inversion and the set up I now looks

00:12:02,279 --> 00:12:07,020
like this nice isn't it

00:12:04,770 --> 00:12:08,520
it's just importing setup function and

00:12:07,020 --> 00:12:11,430
calling it and all the other stuff comes

00:12:08,520 --> 00:12:14,730
from state of TV fights so the days of

00:12:11,430 --> 00:12:15,089
having nasty code in setup I are finally

00:12:14,730 --> 00:12:18,630
over

00:12:15,089 --> 00:12:20,720
and as I said I'm really using this for

00:12:18,630 --> 00:12:26,670
Jenga projects and it really works

00:12:20,720 --> 00:12:28,980
look sleep strange but so if you're

00:12:26,670 --> 00:12:31,829
doing stuff like this there's one tool I

00:12:28,980 --> 00:12:35,279
can recommend which is pump version it's

00:12:31,829 --> 00:12:38,040
a two to pump versions and it can also

00:12:35,279 --> 00:12:39,480
be configured in setup CFG so you can

00:12:38,040 --> 00:12:41,430
put the configuration of vamp version

00:12:39,480 --> 00:12:43,560
into a setup CFG so learning of a single

00:12:41,430 --> 00:12:45,270
configuration file for everything and it

00:12:43,560 --> 00:12:50,910
makes it very easy to pump that version

00:12:45,270 --> 00:12:53,310
of your package what else you would need

00:12:50,910 --> 00:12:54,720
what you have seen in that directory

00:12:53,310 --> 00:12:57,300
listing at the beginning is a manifest

00:12:54,720 --> 00:13:00,270
file the manifest file is used to

00:12:57,300 --> 00:13:02,010
control which fights beside the price

00:13:00,270 --> 00:13:04,440
and source code go into the distribution

00:13:02,010 --> 00:13:06,180
and the important thing here is that

00:13:04,440 --> 00:13:10,950
it's evaluated from top to bottom

00:13:06,180 --> 00:13:12,660
so if you like include some stuff at the

00:13:10,950 --> 00:13:14,220
top and then later deleted at the bottom

00:13:12,660 --> 00:13:16,320
it will not in the inside the package

00:13:14,220 --> 00:13:19,140
there you have to think a little bit

00:13:16,320 --> 00:13:21,329
about the ordering of the stuff and what

00:13:19,140 --> 00:13:24,449
we do here is like we include our rst

00:13:21,329 --> 00:13:26,700
files slow stuff like wheat me rst with

00:13:24,449 --> 00:13:29,500
graph we say

00:13:26,700 --> 00:13:32,470
roughly Horan take the whole project

00:13:29,500 --> 00:13:34,300
directory and take all the data files

00:13:32,470 --> 00:13:37,240
that we find inside there like templates

00:13:34,300 --> 00:13:41,350
and I don't know Jason fires with some

00:13:37,240 --> 00:13:44,230
pictures or other stuff images but we

00:13:41,350 --> 00:13:50,020
say prune media and static route in case

00:13:44,230 --> 00:13:52,030
of someone had left after development

00:13:50,020 --> 00:13:56,020
some fights error so that these files

00:13:52,030 --> 00:13:57,430
not go into the package so we take

00:13:56,020 --> 00:13:59,800
everything as hippies to drag the reefs

00:13:57,430 --> 00:14:01,090
and reacts to modify it because usually

00:13:59,800 --> 00:14:02,530
you have like a lot of Yemen finds

00:14:01,090 --> 00:14:04,750
hanging around by the route of the arrow

00:14:02,530 --> 00:14:06,970
I'm project we also exclude the managed

00:14:04,750 --> 00:14:08,440
by file because it makes no sense to

00:14:06,970 --> 00:14:13,680
have a managed by a file inside a

00:14:08,440 --> 00:14:21,430
package and we exclude the cached

00:14:13,680 --> 00:14:25,780
bytecode files and directories a nice

00:14:21,430 --> 00:14:27,730
tool if you packaging stuff also for

00:14:25,780 --> 00:14:29,590
other reasons and having a manifest file

00:14:27,730 --> 00:14:32,140
is check manifest because check manifest

00:14:29,590 --> 00:14:33,610
it looks at yo good repository and looks

00:14:32,140 --> 00:14:35,020
at your manifest file and tells you if

00:14:33,610 --> 00:14:37,540
there if there's something in your

00:14:35,020 --> 00:14:41,080
repository that is not being taken care

00:14:37,540 --> 00:14:43,420
of with the manifest file so that you

00:14:41,080 --> 00:14:45,340
don't buy and by accident do not have

00:14:43,420 --> 00:14:49,990
stuff inside your package that you want

00:14:45,340 --> 00:14:52,510
don't want have it inside so what about

00:14:49,990 --> 00:14:55,990
manage v usually you need managed by to

00:14:52,510 --> 00:14:58,150
do all the execute all the commands and

00:14:55,990 --> 00:15:02,310
we have just excluded it in the manifest

00:14:58,150 --> 00:15:06,640
in so the answer is you can add a

00:15:02,310 --> 00:15:09,520
options entry points section to the

00:15:06,640 --> 00:15:11,950
setup CFG file entry points were also

00:15:09,520 --> 00:15:15,160
possible instead of pi so it's nothing

00:15:11,950 --> 00:15:16,870
reading you and you can define a command

00:15:15,160 --> 00:15:19,060
called for example side up men but you

00:15:16,870 --> 00:15:21,820
can name it like whatever you want and

00:15:19,060 --> 00:15:24,190
it simply quotes the same function that

00:15:21,820 --> 00:15:26,110
managed by calls and all the rest is

00:15:24,190 --> 00:15:27,580
only environment so it's the same

00:15:26,110 --> 00:15:30,070
functionality that you have managed by

00:15:27,580 --> 00:15:31,660
but the bonus here is you can in this X

00:15:30,070 --> 00:15:33,130
cube wherever you are because instance

00:15:31,660 --> 00:15:34,750
inside the past and you don't have to be

00:15:33,130 --> 00:15:35,800
inside the director we have a managed -

00:15:34,750 --> 00:15:38,460
or you don't have to remember I

00:15:35,800 --> 00:15:38,460
mentioned by Wars

00:15:39,140 --> 00:15:46,019
yeah so I'm bidding this package is one

00:15:43,140 --> 00:15:48,720
simple command vice and setup I be just

00:15:46,019 --> 00:15:52,589
wheel and then you get a wheel archive

00:15:48,720 --> 00:15:58,260
we select the RV modern way of packaging

00:15:52,589 --> 00:16:00,209
Python distributions and this would look

00:15:58,260 --> 00:16:02,550
long than like lists you have eight this

00:16:00,209 --> 00:16:05,640
directory you are already a widgets are

00:16:02,550 --> 00:16:08,610
all shortened and because our project

00:16:05,640 --> 00:16:13,730
was named my project and it is the

00:16:08,610 --> 00:16:18,750
version 1.0 the name is my portrait

00:16:13,730 --> 00:16:23,399
1.2.0 and because we have had this

00:16:18,750 --> 00:16:25,490
universal true setting in the setup CFG

00:16:23,399 --> 00:16:28,140
that's also for python versions and

00:16:25,490 --> 00:16:29,550
platforms but you could configure this

00:16:28,140 --> 00:16:31,800
differently if you would have the need

00:16:29,550 --> 00:16:37,260
but usually jingle stuff is not with any

00:16:31,800 --> 00:16:40,110
c code also inside not much okay so how

00:16:37,260 --> 00:16:41,610
to install this stuff now if you have

00:16:40,110 --> 00:16:45,750
packages a stringer project now and have

00:16:41,610 --> 00:16:48,329
the we have lying around somewhere what

00:16:45,750 --> 00:16:52,010
i've been using for a long time is pip

00:16:48,329 --> 00:16:57,089
tools i know that there nowadays like

00:16:52,010 --> 00:17:01,070
modern more modern tools but i think at

00:16:57,089 --> 00:17:01,070
the moment these more modern tools are

00:17:01,760 --> 00:17:07,439
not really ready to be use at least not

00:17:05,100 --> 00:17:09,780
from my perspective especially because

00:17:07,439 --> 00:17:13,770
if you use some kind of surface to

00:17:09,780 --> 00:17:17,309
upgrade your dependencies then you will

00:17:13,770 --> 00:17:20,309
very quickly we recognize that these

00:17:17,309 --> 00:17:25,589
services don't vaporware with stuff like

00:17:20,309 --> 00:17:27,929
pip file so yeah pip tool has a few

00:17:25,589 --> 00:17:32,640
commands the first command you can run

00:17:27,929 --> 00:17:35,130
is PIP compile and if you set up compile

00:17:32,640 --> 00:17:37,830
it looks at your setups try and set up

00:17:35,130 --> 00:17:39,570
CFG files and looks at all the

00:17:37,830 --> 00:17:41,790
dependencies and compiles a complete

00:17:39,570 --> 00:17:44,000
dependency tree from that and we put

00:17:41,790 --> 00:17:47,400
this into a 5-week or constraints txt

00:17:44,000 --> 00:17:50,160
you can even do that with hashes so in

00:17:47,400 --> 00:17:52,110
this case pip compiler hashes every

00:17:50,160 --> 00:17:52,710
package is finds and puts the hash also

00:17:52,110 --> 00:17:56,340
in the equals

00:17:52,710 --> 00:17:58,169
rains file but then you also would have

00:17:56,340 --> 00:17:59,370
to hash your own package as well because

00:17:58,169 --> 00:18:01,649
if you a hash you have to hash

00:17:59,370 --> 00:18:03,950
everything you install otherwise nothing

00:18:01,649 --> 00:18:09,240
can be ash so it's a take-it-or-leave-it

00:18:03,950 --> 00:18:13,649
approach and it has a pip sink command

00:18:09,240 --> 00:18:17,309
which can be used with the constraints

00:18:13,649 --> 00:18:18,779
or requirements 60 fire to install

00:18:17,309 --> 00:18:20,820
everything that is inside it and

00:18:18,779 --> 00:18:22,169
uninstalled everything which is not

00:18:20,820 --> 00:18:25,230
inside it which is inside a virtual

00:18:22,169 --> 00:18:27,090
environment or even somewhere else but

00:18:25,230 --> 00:18:29,850
maybe it is not such a good way to

00:18:27,090 --> 00:18:33,770
execute this in your like your OS

00:18:29,850 --> 00:18:35,820
installation and this is how I

00:18:33,770 --> 00:18:40,940
constraints txt file looks like

00:18:35,820 --> 00:18:49,590
and the interesting difference here to a

00:18:40,940 --> 00:18:52,200
requirement 65 generated by IP freeze is

00:18:49,590 --> 00:18:54,929
that you have all these comments so you

00:18:52,200 --> 00:18:57,120
can clearly see what were your project

00:18:54,929 --> 00:18:58,740
dependencies and what are transitive

00:18:57,120 --> 00:19:01,070
dependencies that have been brought in

00:18:58,740 --> 00:19:03,870
by other packages that you are using and

00:19:01,070 --> 00:19:05,789
I have tried to choose a few libraries

00:19:03,870 --> 00:19:08,190
here that have multiple dependencies so

00:19:05,789 --> 00:19:12,830
you can even see that requests or 6 is

00:19:08,190 --> 00:19:12,830
used by several of these packages

00:19:15,770 --> 00:19:23,100
so how do you install this you simply

00:19:19,800 --> 00:19:27,480
call pip install and say there see

00:19:23,100 --> 00:19:29,850
constraints txt - II dot because we want

00:19:27,480 --> 00:19:32,430
to install for development so that she

00:19:29,850 --> 00:19:34,620
means editable so that you don't install

00:19:32,430 --> 00:19:36,360
deep package you just install the source

00:19:34,620 --> 00:19:38,250
code that you have so if you change it

00:19:36,360 --> 00:19:44,750
you can still use that source code and

00:19:38,250 --> 00:19:47,760
the - C option of pip is something that

00:19:44,750 --> 00:19:50,940
I don't know how long they have it but

00:19:47,760 --> 00:19:54,600
is fairly new and the difference between

00:19:50,940 --> 00:20:07,830
- are and requirements file is that a

00:19:54,600 --> 00:20:10,140
constraints file is only yeah deciding

00:20:07,830 --> 00:20:11,700
which version is installed so if the

00:20:10,140 --> 00:20:13,530
package which is inside the constraints

00:20:11,700 --> 00:20:16,290
file it's not a stored at all it also

00:20:13,530 --> 00:20:18,300
won't be installed so it just helps you

00:20:16,290 --> 00:20:19,950
if some package says ok I want to

00:20:18,300 --> 00:20:22,620
install this what the other package

00:20:19,950 --> 00:20:25,380
should be and because the requirements

00:20:22,620 --> 00:20:28,020
were defined them set up its CFG but if

00:20:25,380 --> 00:20:30,960
it would install something else and that

00:20:28,020 --> 00:20:33,180
what want to store for example a new

00:20:30,960 --> 00:20:34,770
jingle version then we would still stick

00:20:33,180 --> 00:20:37,800
to the jingle version that every we have

00:20:34,770 --> 00:20:39,870
to find and constraints txt so even if

00:20:37,800 --> 00:20:42,000
we have a package at the end of our

00:20:39,870 --> 00:20:43,770
packages that wants to have a very new

00:20:42,000 --> 00:20:52,110
jingle version we still would stick with

00:20:43,770 --> 00:20:54,720
that Oh jingle version and so you maybe

00:20:52,110 --> 00:20:56,370
think about what what about development

00:20:54,720 --> 00:20:57,960
tools what we in hand our only

00:20:56,370 --> 00:21:02,160
production requirements in our for

00:20:57,960 --> 00:21:04,740
application and here you can use another

00:21:02,160 --> 00:21:06,900
set of TFG section which is called

00:21:04,740 --> 00:21:08,340
options x require and there you can

00:21:06,900 --> 00:21:12,030
define sections and you can quite a

00:21:08,340 --> 00:21:14,240
section called F and put a few black

00:21:12,030 --> 00:21:16,180
piece you want to install in there or

00:21:14,240 --> 00:21:19,810
distributions

00:21:16,180 --> 00:21:22,270
and maybe because it's development stuff

00:21:19,810 --> 00:21:23,890
you don't even pin it and then you

00:21:22,270 --> 00:21:26,100
install it simply have a like this so

00:21:23,890 --> 00:21:29,080
behind the dot you simply put in

00:21:26,100 --> 00:21:30,250
breakfast the name of the section you

00:21:29,080 --> 00:21:32,710
have there and you can even have

00:21:30,250 --> 00:21:37,870
multiple sections and separate these

00:21:32,710 --> 00:21:39,880
sections with the comma if you wanted so

00:21:37,870 --> 00:21:41,920
question is now we have talked about

00:21:39,880 --> 00:21:44,110
developments of row so how serve this

00:21:41,920 --> 00:21:46,330
package and how to get it really to the

00:21:44,110 --> 00:21:49,390
systems you want to do you want it to be

00:21:46,330 --> 00:21:50,650
deployed so one thing you could do you

00:21:49,390 --> 00:21:52,630
could simply install it from the file

00:21:50,650 --> 00:21:53,980
system Pipkin is all packages from the

00:21:52,630 --> 00:21:56,590
file system so if you can copy that

00:21:53,980 --> 00:21:59,560
package to somewhere where it's visible

00:21:56,590 --> 00:22:01,210
on the target server you could simply

00:21:59,560 --> 00:22:03,880
install it this way you could also use

00:22:01,210 --> 00:22:06,340
any HTTP server that serves a directory

00:22:03,880 --> 00:22:09,010
which contains or your packages or you

00:22:06,340 --> 00:22:12,210
could use a tool like the F pile so the

00:22:09,010 --> 00:22:16,060
thing there is a link to the website and

00:22:12,210 --> 00:22:18,520
deft is a project which can host your

00:22:16,060 --> 00:22:20,710
own packages and also mirror the PI

00:22:18,520 --> 00:22:22,930
server so that you have like the best of

00:22:20,710 --> 00:22:26,650
both worlds and you can even cascade def

00:22:22,930 --> 00:22:28,540
PI instances they're interesting too and

00:22:26,650 --> 00:22:30,910
if you were to install that on server

00:22:28,540 --> 00:22:32,950
now this will be the approach you would

00:22:30,910 --> 00:22:35,520
take for installing it from the file

00:22:32,950 --> 00:22:38,790
system if you're in the same directory

00:22:35,520 --> 00:22:41,890
this will be the approach to install it

00:22:38,790 --> 00:22:46,480
from a different path somewhere else on

00:22:41,890 --> 00:22:49,750
the file system and if you have this

00:22:46,480 --> 00:22:51,900
extra index URL option then you could

00:22:49,750 --> 00:22:54,190
use the tool like the F Phi which is

00:22:51,900 --> 00:22:56,710
really behaving like a packaging index

00:22:54,190 --> 00:22:58,780
and so you could say okay install all

00:22:56,710 --> 00:23:00,910
the other stuff from PI API but install

00:22:58,780 --> 00:23:03,430
my package from the extra index you are

00:23:00,910 --> 00:23:04,930
or if you used F Phi you could even use

00:23:03,430 --> 00:23:09,070
it alone because it will remember all

00:23:04,930 --> 00:23:11,650
the packages from PI pi so how to change

00:23:09,070 --> 00:23:14,110
settings now because after we installed

00:23:11,650 --> 00:23:16,600
this package all the code is in sight

00:23:14,110 --> 00:23:18,040
packages directory it's inside of a PI's

00:23:16,600 --> 00:23:19,600
and installation and of course we can't

00:23:18,040 --> 00:23:23,080
go there and filter all the settings

00:23:19,600 --> 00:23:25,890
files so the best way to go there is use

00:23:23,080 --> 00:23:28,140
environment variables for that

00:23:25,890 --> 00:23:30,630
except for the secrets so if you have a

00:23:28,140 --> 00:23:33,690
vote you should these use this if it's

00:23:30,630 --> 00:23:35,330
possible if not and use everything use

00:23:33,690 --> 00:23:38,480
environmental variables for everything

00:23:35,330 --> 00:23:42,600
and there are a few nice Python and

00:23:38,480 --> 00:23:46,290
Django solutions to manage environment

00:23:42,600 --> 00:23:48,450
variables and video which is keeping all

00:23:46,290 --> 00:23:52,740
the stuff in a directory in single files

00:23:48,450 --> 00:23:54,810
jingle configurations which allows you

00:23:52,740 --> 00:23:57,270
to write very nice jingle configuration

00:23:54,810 --> 00:23:59,430
files which can inherit start from

00:23:57,270 --> 00:24:02,930
environment variables and then paths and

00:23:59,430 --> 00:24:05,370
environ conflict also help you to cast

00:24:02,930 --> 00:24:07,170
start from the environment into specific

00:24:05,370 --> 00:24:08,760
types because if you use an OS

00:24:07,170 --> 00:24:10,500
environment you have usually a problem

00:24:08,760 --> 00:24:12,180
with this everything is a string and

00:24:10,500 --> 00:24:13,620
sometimes you need an integer or

00:24:12,180 --> 00:24:14,850
something else and the cells all been

00:24:13,620 --> 00:24:18,510
done here so you don't have to reinvent

00:24:14,850 --> 00:24:21,260
the wheel here and finally mining this

00:24:18,510 --> 00:24:24,810
wins a WSGI servers also fairly simple

00:24:21,260 --> 00:24:27,330
because it's inside the pison paths you

00:24:24,810 --> 00:24:31,110
simply have to say gonna corn my project

00:24:27,330 --> 00:24:36,390
config WSGI and then it's starting up

00:24:31,110 --> 00:24:43,500
and your application is wine so quick

00:24:36,390 --> 00:24:45,780
comparison of packaging tools you could

00:24:43,500 --> 00:24:47,550
or should use NPM or yarn for all your

00:24:45,780 --> 00:24:49,760
JavaScript dependency management so all

00:24:47,550 --> 00:24:54,960
the stuff that you do in the front end

00:24:49,760 --> 00:24:56,460
because especially yarn is very good

00:24:54,960 --> 00:24:58,530
with this and you shouldn't try to

00:24:56,460 --> 00:25:00,030
reinvent the wheel here and if you use

00:24:58,530 --> 00:25:02,340
JavaScript stuff then you solve to

00:25:00,030 --> 00:25:04,920
handle this and in the end you could

00:25:02,340 --> 00:25:13,110
simply plate bundles of the two like web

00:25:04,920 --> 00:25:14,580
map or other tools and then the the

00:25:13,110 --> 00:25:20,070
bundle that you create you simply put

00:25:14,580 --> 00:25:22,500
into the district directory pison

00:25:20,070 --> 00:25:27,930
packagers arm something like the lowest

00:25:22,500 --> 00:25:30,240
common denominator because not all picot

00:25:27,930 --> 00:25:31,860
and all platforms have pick managers but

00:25:30,240 --> 00:25:34,200
all platforms have Python because we

00:25:31,860 --> 00:25:36,660
want to run Django there so Python will

00:25:34,200 --> 00:25:38,880
be installed so also people will be

00:25:36,660 --> 00:25:39,330
installed and so it was very easy for us

00:25:38,880 --> 00:25:42,480
to install

00:25:39,330 --> 00:25:45,060
stuff and now that we have a Python

00:25:42,480 --> 00:25:46,920
package we can even go further and use

00:25:45,060 --> 00:25:49,680
it in other environments for example you

00:25:46,920 --> 00:25:52,170
could use Kandra Kandra is something

00:25:49,680 --> 00:25:56,820
from the scientific community but the

00:25:52,170 --> 00:25:58,470
good thing about Congress that picketers

00:25:56,820 --> 00:26:01,860
can also be installed without having

00:25:58,470 --> 00:26:03,480
tyson installed and you can even install

00:26:01,860 --> 00:26:06,990
a non-price independence you just corner

00:26:03,480 --> 00:26:09,810
so it can heck with it or you could use

00:26:06,990 --> 00:26:12,390
tools like pecs or snap crafts which

00:26:09,810 --> 00:26:13,860
create also like standalone pricing

00:26:12,390 --> 00:26:17,250
applications but I haven't used it with

00:26:13,860 --> 00:26:19,410
Django or you could use the platform

00:26:17,250 --> 00:26:21,750
package managers if this is necessary

00:26:19,410 --> 00:26:25,020
because your organization depends on rpm

00:26:21,750 --> 00:26:28,440
or DPN packages and it's very easy to

00:26:25,020 --> 00:26:31,500
convert a Python package into a platform

00:26:28,440 --> 00:26:34,130
specific package and of course you could

00:26:31,500 --> 00:26:37,920
you also use docker if it's necessary

00:26:34,130 --> 00:26:39,240
because every docker container avetis

00:26:37,920 --> 00:26:46,020
equipped with spice and can install

00:26:39,240 --> 00:26:48,300
Python packages so summary if you take

00:26:46,020 --> 00:26:50,100
it your jingle application as a Python

00:26:48,300 --> 00:26:52,080
package your hosting solution

00:26:50,100 --> 00:26:55,020
independent because every hosting

00:26:52,080 --> 00:26:56,520
solution that hosts is Django has Python

00:26:55,020 --> 00:26:58,200
so you can install your package and you

00:26:56,520 --> 00:27:02,700
don't have to rely on the tools that

00:26:58,200 --> 00:27:06,360
they provide to you you use tools you

00:27:02,700 --> 00:27:09,660
already know and that you use to install

00:27:06,360 --> 00:27:12,270
other dependencies and you also try not

00:27:09,660 --> 00:27:15,000
to get into this not invented here

00:27:12,270 --> 00:27:16,380
syndrome so that you build tools just

00:27:15,000 --> 00:27:19,610
because you think it's better and

00:27:16,380 --> 00:27:22,080
someone else has already done this and

00:27:19,610 --> 00:27:24,330
it improves also D deployment are many

00:27:22,080 --> 00:27:25,890
servers because you don't have to do all

00:27:24,330 --> 00:27:27,690
the work on each server again you just

00:27:25,890 --> 00:27:32,310
ship the package server and install it

00:27:27,690 --> 00:27:34,440
and that's it and the same release is

00:27:32,310 --> 00:27:37,530
also used everywhere you could build

00:27:34,440 --> 00:27:38,820
this package on a CI server and after

00:27:37,530 --> 00:27:41,490
that runs the unit tests on the size

00:27:38,820 --> 00:27:43,650
server with a package then you could use

00:27:41,490 --> 00:27:45,210
that package and the staging server and

00:27:43,650 --> 00:27:46,800
if that's also going Val you could use

00:27:45,210 --> 00:27:48,090
an infraction server and it's not going

00:27:46,800 --> 00:27:49,740
forward you could use this package no

00:27:48,090 --> 00:27:50,760
definite vironment to figure out what's

00:27:49,740 --> 00:27:52,820
really the problem with that and not

00:27:50,760 --> 00:27:55,680
have to rebuild everything again

00:27:52,820 --> 00:27:57,000
and of course it's easy to do robic

00:27:55,680 --> 00:27:58,950
because you just have to install the

00:27:57,000 --> 00:28:00,780
other package again it's already there

00:27:58,950 --> 00:28:04,800
everything is compiled so nothing to be

00:28:00,780 --> 00:28:07,770
done and a built distribution requires

00:28:04,800 --> 00:28:09,390
no bit steps so if you have such things

00:28:07,770 --> 00:28:11,310
like see dependencies or other stuff

00:28:09,390 --> 00:28:13,770
that takes time to compile it's already

00:28:11,310 --> 00:28:15,900
done so if you pip install this it's

00:28:13,770 --> 00:28:19,290
simply put into the platform and

00:28:15,900 --> 00:28:20,220
requires no compiler and so you avoid to

00:28:19,290 --> 00:28:22,620
have tools like it

00:28:20,220 --> 00:28:24,270
GCC get hex nodejs and all the other

00:28:22,620 --> 00:28:25,770
stuff on your production and staging

00:28:24,270 --> 00:28:27,030
systems because you just need it on the

00:28:25,770 --> 00:28:30,090
build system where you put that package

00:28:27,030 --> 00:28:33,630
and after that you simply have this

00:28:30,090 --> 00:28:35,480
artifact and ship around so thank you

00:28:33,630 --> 00:28:36,000
very much for listening to my talk

00:28:35,480 --> 00:28:40,329
[Music]

00:28:36,000 --> 00:28:40,329
[Applause]

00:28:41,730 --> 00:28:48,030
as promised these lights are at the yule

00:28:45,150 --> 00:28:51,720
at the top they are also on my github

00:28:48,030 --> 00:28:55,500
account these are ways you can reach me

00:28:51,720 --> 00:28:57,240
and of course I would love feedback on

00:28:55,500 --> 00:28:58,890
the ideas I've presented here because as

00:28:57,240 --> 00:29:00,720
I said as only what what I've been doing

00:28:58,890 --> 00:29:02,310
so far and I'm not sure if is like the

00:29:00,720 --> 00:29:03,390
best way to do it or what other people

00:29:02,310 --> 00:29:05,490
think about it every day

00:29:03,390 --> 00:29:08,780
a good way other people would also use

00:29:05,490 --> 00:29:11,070
so come and find me and talk to me about

00:29:08,780 --> 00:29:15,080
the stuff I have presented here I would

00:29:11,070 --> 00:29:16,910
love your feedback thank you Marcus

00:29:15,080 --> 00:29:17,560
another round of applause

00:29:16,910 --> 00:29:21,640
[Applause]

00:29:17,560 --> 00:29:21,640

YouTube URL: https://www.youtube.com/watch?v=Gt3Pkgsd0Tk


