Title: DjangoCon 2018 - Slow Food Digests Better - or how to maintain a 8.5 year old Python project without
Publication date: 2018-05-24
Playlist: DjangoCon Europe 2018 in Heidelberg
Description: 
	https://media.ccc.de/v/hd-23-slow-food-digests-better-or-how-to-maintain-a-8-5-year-old-python-project-without-getting-lost



AMO - https://addons.mozilla.org/ was originally written as a PHP web application, ported to Python / Django 1.1 in 2010, more or less maintained over time and only recently got much more traction because of Firefox Quantum and Mozilla's move to WebExtensions.

The talk will show our approach to maintaining very old code, handling refactoring, adding new features as well as feature/code removal while slowly upgrading our way to a Python 3 and Django 2.0 ecosystem and why we chose that approach over a rewrite.



Christopher Grebs
Captions: 
	00:00:06,279 --> 00:00:11,860
the next talk is again describing

00:00:10,030 --> 00:00:14,559
something that

00:00:11,860 --> 00:00:18,369
gone through in the past if you've used

00:00:14,559 --> 00:00:21,310
Django for a bit or if you've started on

00:00:18,369 --> 00:00:23,950
a Django project that has been written

00:00:21,310 --> 00:00:25,720
some time ago you may have run into the

00:00:23,950 --> 00:00:28,540
issue of reading the Django

00:00:25,720 --> 00:00:30,219
documentation and seeing some solution

00:00:28,540 --> 00:00:33,579
to your problems and starting to use

00:00:30,219 --> 00:00:35,940
that solution only to notice that you

00:00:33,579 --> 00:00:38,410
were accidentally bro browsing the

00:00:35,940 --> 00:00:40,719
incredibly version Django documentation

00:00:38,410 --> 00:00:43,840
at the latest version but the project is

00:00:40,719 --> 00:00:45,190
some ancient version from like two years

00:00:43,840 --> 00:00:48,310
ago or something

00:00:45,190 --> 00:00:48,940
and so this incredible solution won't

00:00:48,310 --> 00:00:52,390
work

00:00:48,940 --> 00:00:55,090
or you had to upgrade Django to the next

00:00:52,390 --> 00:00:57,010
version and while Django helps you a lot

00:00:55,090 --> 00:00:59,399
by providing a very detailed changelog

00:00:57,010 --> 00:01:02,440
this isn't exactly Pleasant either

00:00:59,399 --> 00:01:05,770
Christopher is going to tell us about a

00:01:02,440 --> 00:01:08,159
very old Django project and how they at

00:01:05,770 --> 00:01:11,220
Mozza Bell worked with it thank you

00:01:08,159 --> 00:01:11,220
thank you

00:01:13,970 --> 00:01:25,010
all righty so hey I'm Chris I'm here to

00:01:20,480 --> 00:01:27,950
talk about a very very old Python

00:01:25,010 --> 00:01:29,450
project that originally was a PHP

00:01:27,950 --> 00:01:33,230
project but let's start a little bit

00:01:29,450 --> 00:01:36,490
with a introduction I'm a software

00:01:33,230 --> 00:01:40,670
developer for almost 10 years now and

00:01:36,490 --> 00:01:43,760
during that time I worked with many

00:01:40,670 --> 00:01:46,580
smaller and bigger companies startups

00:01:43,760 --> 00:01:49,280
fully grown companies and have been

00:01:46,580 --> 00:01:52,340
working with many many code bases as

00:01:49,280 --> 00:01:55,580
probably a few other people here I have

00:01:52,340 --> 00:01:58,390
as well and notice that over time while

00:01:55,580 --> 00:02:00,650
also while adding new features and

00:01:58,390 --> 00:02:06,050
employing the menteng that new cool

00:02:00,650 --> 00:02:11,750
icing stuff and other things can be very

00:02:06,050 --> 00:02:14,840
exciting or and accelerating its I was

00:02:11,750 --> 00:02:18,680
more torn towards old ancient big

00:02:14,840 --> 00:02:23,620
project and had funny enough lots of fun

00:02:18,680 --> 00:02:26,060
to tackle them touch them work with them

00:02:23,620 --> 00:02:28,400
create proper linting create proper

00:02:26,060 --> 00:02:31,160
dependency management continuous

00:02:28,400 --> 00:02:35,750
integration tests and kind of trying to

00:02:31,160 --> 00:02:38,000
modernize those projects one of the

00:02:35,750 --> 00:02:40,040
projects that have been working on now

00:02:38,000 --> 00:02:43,810
since October 2015

00:02:40,040 --> 00:02:47,330
on or Mozilla is addons.mozilla.org

00:02:43,810 --> 00:02:51,050
which is actually one of the most or one

00:02:47,330 --> 00:02:53,750
of the oldest websites at Mozilla and

00:02:51,050 --> 00:02:57,950
has been around for approximately 13

00:02:53,750 --> 00:03:02,600
years now Adams of mozilla.org has gone

00:02:57,950 --> 00:03:07,010
through a huge transition from a quickly

00:03:02,600 --> 00:03:09,769
hacked together PHP project to a now

00:03:07,010 --> 00:03:12,410
almost modern django application and

00:03:09,769 --> 00:03:16,190
we'll be heading towards Python 3 and

00:03:12,410 --> 00:03:20,590
Django to hopefully sometime in 2019 and

00:03:16,190 --> 00:03:20,590
maybe starting already in 2018

00:03:21,640 --> 00:03:26,880
a few more numbers edited Melissa

00:03:24,240 --> 00:03:30,640
addons.mozilla.org serves approximately

00:03:26,880 --> 00:03:32,910
three million unique users per week and

00:03:30,640 --> 00:03:34,810
the code base is something around

00:03:32,910 --> 00:03:38,800
250,000 lines of code

00:03:34,810 --> 00:03:42,880
counting Python JavaScript CSS and SQL

00:03:38,800 --> 00:03:47,980
migrations so let's start with a little

00:03:42,880 --> 00:03:50,580
history lesson that is not complete at

00:03:47,980 --> 00:03:54,160
all because that would take far too long

00:03:50,580 --> 00:03:55,720
so in 2005 mozilla.org okay that

00:03:54,160 --> 00:04:00,420
screenshot is not good

00:03:55,720 --> 00:04:03,850
anyhow started with flat HTML files and

00:04:00,420 --> 00:04:05,440
sprinkled with a with PHP code and if

00:04:03,850 --> 00:04:09,910
you died database cover is here and

00:04:05,440 --> 00:04:13,030
there so basically just exactly like

00:04:09,910 --> 00:04:17,919
everyone told you even back then not to

00:04:13,030 --> 00:04:22,660
do it it was a beta though so nobody

00:04:17,919 --> 00:04:25,570
cared it has been redesigned over the

00:04:22,660 --> 00:04:29,260
years many many times so here's a new

00:04:25,570 --> 00:04:31,979
fresh mozilla design that kind of

00:04:29,260 --> 00:04:35,620
focused on the idea of being of

00:04:31,979 --> 00:04:37,870
promoting customization and customer

00:04:35,620 --> 00:04:42,010
because some customization in firefox

00:04:37,870 --> 00:04:44,320
through Firefox add-ons the PHP

00:04:42,010 --> 00:04:47,460
application grew more and more complex

00:04:44,320 --> 00:04:52,690
over time and so it has been rewritten

00:04:47,460 --> 00:04:55,900
to be based on a PHP framework cakephp

00:04:52,690 --> 00:04:58,960
in version 1.1 which as far as I

00:04:55,900 --> 00:05:02,620
researched wasn't that mature or mature

00:04:58,960 --> 00:05:05,770
back then and only version 1.2 made it

00:05:02,620 --> 00:05:08,620
much easier so as it happens in life you

00:05:05,770 --> 00:05:10,950
settle on the wrong technology or it was

00:05:08,620 --> 00:05:15,160
probably a very good decision back then

00:05:10,950 --> 00:05:17,560
but it turns out later that it isn't so

00:05:15,160 --> 00:05:22,990
you have to stick with it and have to

00:05:17,560 --> 00:05:24,880
work with it over time even using a more

00:05:22,990 --> 00:05:27,610
professional PHP work

00:05:24,880 --> 00:05:31,699
web framework the whole application got

00:05:27,610 --> 00:05:35,430
more and more complex over time

00:05:31,699 --> 00:05:39,240
now we're in 2009 the whole page is

00:05:35,430 --> 00:05:43,370
still using PHP but after general one

00:05:39,240 --> 00:05:47,250
point 1.0 got released in September 2008

00:05:43,370 --> 00:05:50,940
a few people inside Mozilla started to

00:05:47,250 --> 00:05:54,740
promote Python and Django as the new

00:05:50,940 --> 00:05:58,530
technology to move forward and try to

00:05:54,740 --> 00:05:59,940
port many of our projects to Python and

00:05:58,530 --> 00:06:02,330
Django

00:05:59,940 --> 00:06:06,810
it started with smaller websites and

00:06:02,330 --> 00:06:11,880
eventually got also towards projects

00:06:06,810 --> 00:06:14,370
like amo the transitioning time or

00:06:11,880 --> 00:06:16,740
though yes the transitioning time from

00:06:14,370 --> 00:06:20,300
the PHP version to a Python and Django

00:06:16,740 --> 00:06:23,159
version took approximately 16 months

00:06:20,300 --> 00:06:26,250
plus a little bit of transitioning time

00:06:23,159 --> 00:06:28,580
going live going back and forth having

00:06:26,250 --> 00:06:32,340
lots of down times and stuff like that

00:06:28,580 --> 00:06:34,469
the whole 16-month were very stressful

00:06:32,340 --> 00:06:36,870
for the users obviously because the site

00:06:34,469 --> 00:06:38,610
was unreal reliable they just wanted to

00:06:36,870 --> 00:06:40,889
search for an add-on wanted to install

00:06:38,610 --> 00:06:43,440
it wanted to be happy but that didn't

00:06:40,889 --> 00:06:46,050
work and there were bugs maybe some

00:06:43,440 --> 00:06:48,630
translation errors stuff like that it

00:06:46,050 --> 00:06:51,870
was also very stressful for the QA team

00:06:48,630 --> 00:06:54,000
and management obviously because well

00:06:51,870 --> 00:06:57,199
issues arise things take longer than you

00:06:54,000 --> 00:07:00,180
expect because you can't just rewrite

00:06:57,199 --> 00:07:03,840
one code to the other and expect to just

00:07:00,180 --> 00:07:05,639
type it down and it works you have to

00:07:03,840 --> 00:07:07,800
implement new features you have to work

00:07:05,639 --> 00:07:10,800
with the data that you originally had

00:07:07,800 --> 00:07:12,810
ended it in the database and you have to

00:07:10,800 --> 00:07:17,250
migrate to the whole new system so that

00:07:12,810 --> 00:07:19,440
is a very error-prone and there's only a

00:07:17,250 --> 00:07:23,009
few ways to that you can use to actually

00:07:19,440 --> 00:07:24,539
test that and the best way to do that is

00:07:23,009 --> 00:07:29,090
manual testing and that's very

00:07:24,539 --> 00:07:31,680
error-prone as well so in January 2010

00:07:29,090 --> 00:07:33,389
plus a few more months transitioning

00:07:31,680 --> 00:07:36,120
time the whole system got pushed into

00:07:33,389 --> 00:07:40,080
the live system

00:07:36,120 --> 00:07:43,529
the big advantage of the rewrite to

00:07:40,080 --> 00:07:44,030
Django was that during that time or to

00:07:43,529 --> 00:07:46,910
Python in

00:07:44,030 --> 00:07:50,300
during that time lots of new unit tests

00:07:46,910 --> 00:07:53,360
got added which simply didn't exist

00:07:50,300 --> 00:07:56,110
before doesn't have a hundred percent

00:07:53,360 --> 00:08:00,800
coverage but it was close enough and

00:07:56,110 --> 00:08:05,330
yeah lots of new features did happen and

00:08:00,800 --> 00:08:07,700
a few bug fixes and wrongly design

00:08:05,330 --> 00:08:12,310
features in the PHP version but were

00:08:07,700 --> 00:08:15,080
also corrected as much as possible so

00:08:12,310 --> 00:08:20,510
almost six years before I enjoyed

00:08:15,080 --> 00:08:25,250
Mozilla and yeah the whole porting

00:08:20,510 --> 00:08:28,610
process started and this holes or the

00:08:25,250 --> 00:08:30,080
new version Python django version was

00:08:28,610 --> 00:08:32,600
called Zamboni

00:08:30,080 --> 00:08:35,060
now Canadians were involved Canadians

00:08:32,600 --> 00:08:36,500
love their ice hockey so that's isn't

00:08:35,060 --> 00:08:40,070
bony for everyone who doesn't know about

00:08:36,500 --> 00:08:41,840
that what that is it's one of these ice

00:08:40,070 --> 00:08:45,470
machines that make sure the ice is

00:08:41,840 --> 00:08:52,760
perfectly clean and yeah works like

00:08:45,470 --> 00:08:54,350
expected so between 2013 and 2015 a few

00:08:52,760 --> 00:08:58,460
more redesigns on the left-hand side you

00:08:54,350 --> 00:09:01,760
see the result basically after the

00:08:58,460 --> 00:09:06,380
website get ported to Python and Django

00:09:01,760 --> 00:09:08,780
and yeah over those two years two or

00:09:06,380 --> 00:09:12,080
three designs happened which is

00:09:08,780 --> 00:09:14,120
basically the one thing a most famous

00:09:12,080 --> 00:09:18,320
for every new year gets in your design

00:09:14,120 --> 00:09:21,740
because why not the whole side wasn't

00:09:18,320 --> 00:09:24,080
too special actually so it was primarily

00:09:21,740 --> 00:09:27,200
using Django it was sprinkled with lots

00:09:24,080 --> 00:09:30,140
of raw SQL as it was before but it had

00:09:27,200 --> 00:09:32,690
some cool new things like celery and

00:09:30,140 --> 00:09:39,890
rabbitmq for asynchronous task

00:09:32,690 --> 00:09:42,560
management and yeah one problem right

00:09:39,890 --> 00:09:45,590
after that port basically and between

00:09:42,560 --> 00:09:47,540
2013 and 2015 was that most of the

00:09:45,590 --> 00:09:51,650
development resources weren't working on

00:09:47,540 --> 00:09:54,200
a MOS so it kind of got passed during

00:09:51,650 --> 00:09:57,589
the development or the development get

00:09:54,200 --> 00:10:00,980
passed on amo and it was left in that

00:09:57,589 --> 00:10:04,249
state that it was it was rewritten from

00:10:00,980 --> 00:10:09,040
scratch maybe if you work around were

00:10:04,249 --> 00:10:11,810
there and essentially many of the old

00:10:09,040 --> 00:10:14,930
entries and the old schema of the

00:10:11,810 --> 00:10:19,279
database back from the PHP world was

00:10:14,930 --> 00:10:21,259
still there so as a psyche note the page

00:10:19,279 --> 00:10:24,050
was build around or the new page was

00:10:21,259 --> 00:10:28,220
build around the existing database so

00:10:24,050 --> 00:10:30,139
that was cool or not so much that was

00:10:28,220 --> 00:10:33,339
because during that time Firefox

00:10:30,139 --> 00:10:37,009
marketplace happened which is now not

00:10:33,339 --> 00:10:39,589
there or was discontinued and many of

00:10:37,009 --> 00:10:42,879
the AML resources were working on the

00:10:39,589 --> 00:10:46,990
Firefox marketplace site and making sure

00:10:42,879 --> 00:10:52,189
that IMO was ready for Firefox OS and

00:10:46,990 --> 00:10:55,790
their apps so that Firefox OS could use

00:10:52,189 --> 00:10:57,529
the marketplace to or users of Firefox

00:10:55,790 --> 00:10:59,569
OS could use the marketplace to search

00:10:57,529 --> 00:11:02,509
one app install that app just like

00:10:59,569 --> 00:11:06,379
everyone knows Android or iOS or any

00:11:02,509 --> 00:11:09,589
other mobile system works and the

00:11:06,379 --> 00:11:11,660
interesting part here was that the

00:11:09,589 --> 00:11:16,459
Firefox marketplace actually was derived

00:11:11,660 --> 00:11:18,439
from the am of work and initially the

00:11:16,459 --> 00:11:21,500
same codebase tried to be both Firefox

00:11:18,439 --> 00:11:24,829
marketplace and amo so we had funny

00:11:21,500 --> 00:11:29,360
hacks like there was a model from add-on

00:11:24,829 --> 00:11:32,839
and that add-on model changed depending

00:11:29,360 --> 00:11:35,449
on a setting and was either an app or an

00:11:32,839 --> 00:11:41,240
atom depending on the site that was

00:11:35,449 --> 00:11:43,160
running on zamboni on the other hand so

00:11:41,240 --> 00:11:46,160
the system that's now working or running

00:11:43,160 --> 00:11:49,189
Firefox marketplace get cleaned up a lot

00:11:46,160 --> 00:11:53,240
and implemented a completely new front

00:11:49,189 --> 00:11:55,519
and based on react is adding lots and

00:11:53,240 --> 00:11:57,230
lots of new functionality and pushing

00:11:55,519 --> 00:12:00,379
more and more functionally towards

00:11:57,230 --> 00:12:02,379
elasticsearch for performance reasons we

00:12:00,379 --> 00:12:05,059
do that because our database clusters

00:12:02,379 --> 00:12:09,290
are very performant can serve a lot of

00:12:05,059 --> 00:12:11,390
queries but there are there is a huge

00:12:09,290 --> 00:12:14,960
amount of just static data on our

00:12:11,390 --> 00:12:17,360
site and yeah performance tests have

00:12:14,960 --> 00:12:20,450
shown that elasticsearch can conserve

00:12:17,360 --> 00:12:22,340
the data that we need much faster than

00:12:20,450 --> 00:12:24,950
our database cluster which is also used

00:12:22,340 --> 00:12:27,440
for some statistical data so the data

00:12:24,950 --> 00:12:34,280
isn't stored in the perfect way that we

00:12:27,440 --> 00:12:37,550
need it now all that changed again 2015

00:12:34,280 --> 00:12:41,330
and Olympia was born also again a

00:12:37,550 --> 00:12:44,050
Zamboni but a super cool shiny new

00:12:41,330 --> 00:12:46,880
version of a Zamboni named Olympia

00:12:44,050 --> 00:12:49,580
around the time a new team that formed

00:12:46,880 --> 00:12:54,350
including myself a few long-term amo

00:12:49,580 --> 00:12:57,110
developers marketplace developers and we

00:12:54,350 --> 00:13:02,330
all got faced with a very difficult task

00:12:57,110 --> 00:13:09,710
to use the old addons.mozilla.org code

00:13:02,330 --> 00:13:14,780
and Riaan we yep kind of use that code

00:13:09,710 --> 00:13:18,650
and implement or reanimate that code

00:13:14,780 --> 00:13:22,670
basically and had a huge list of

00:13:18,650 --> 00:13:24,290
features that we wanted to add and also

00:13:22,670 --> 00:13:27,080
know they needed to make sure that that

00:13:24,290 --> 00:13:33,350
code will be living in the next few

00:13:27,080 --> 00:13:36,020
years so the code back then was ancient

00:13:33,350 --> 00:13:38,510
it was barely using Jing 1.6 in every

00:13:36,020 --> 00:13:42,680
attempt to port to newer Jango version

00:13:38,510 --> 00:13:46,130
before 1.6 was kind of like it's

00:13:42,680 --> 00:13:49,220
installing 1.6 making short tests run

00:13:46,130 --> 00:13:50,900
making sure the side run and that's

00:13:49,220 --> 00:13:52,670
basically is pushing that that's

00:13:50,900 --> 00:13:55,360
basically it push that to the live

00:13:52,670 --> 00:13:59,060
system as soon as possible and

00:13:55,360 --> 00:14:02,360
deprecated features or things that will

00:13:59,060 --> 00:14:06,350
be eventually removed in Jango largely

00:14:02,360 --> 00:14:09,290
weren't touched so it was running Jing

00:14:06,350 --> 00:14:13,720
of 1.6 but many of the old internal

00:14:09,290 --> 00:14:13,720
internal api's were still used

00:14:14,300 --> 00:14:20,850
we had essentially no unit tests for our

00:14:18,300 --> 00:14:23,640
JavaScript code and the site was very

00:14:20,850 --> 00:14:27,120
JavaScript heavy we have super awesome

00:14:23,640 --> 00:14:30,480
shiny install buttons that have 20

00:14:27,120 --> 00:14:32,940
something different states we have the

00:14:30,480 --> 00:14:35,100
whole add-on developer upload system

00:14:32,940 --> 00:14:39,060
that's running asynchronous JavaScript

00:14:35,100 --> 00:14:43,680
and accessing some api's and all that

00:14:39,060 --> 00:14:46,170
code was tested by hand manually but

00:14:43,680 --> 00:14:47,480
didn't have any unit tests at all so

00:14:46,170 --> 00:14:50,970
that was very error-prone

00:14:47,480 --> 00:14:53,310
our CSS also was very massive it had

00:14:50,970 --> 00:14:57,480
been through many many redesigns over

00:14:53,310 --> 00:15:00,870
the time and and we had points yes yes

00:14:57,480 --> 00:15:02,610
we had s CSS we had some less code and

00:15:00,870 --> 00:15:05,490
some stylus code just to name a few

00:15:02,610 --> 00:15:07,440
systems that were used and were actually

00:15:05,490 --> 00:15:13,560
running in production to style the page

00:15:07,440 --> 00:15:15,630
so that was painful to see we had to

00:15:13,560 --> 00:15:17,490
make a few hard decisions whether or not

00:15:15,630 --> 00:15:22,320
we want to rewrite the whole thing

00:15:17,490 --> 00:15:25,340
completely from scratch again or if we

00:15:22,320 --> 00:15:29,870
want to improve incrementally we

00:15:25,340 --> 00:15:32,760
essentially decided to improve to

00:15:29,870 --> 00:15:36,300
improve incrementally the dictor code

00:15:32,760 --> 00:15:38,520
and system over time because we're

00:15:36,300 --> 00:15:42,230
writing from stretch for us was almost

00:15:38,520 --> 00:15:44,580
impossible we were a very small team and

00:15:42,230 --> 00:15:46,380
unable to maintain two different

00:15:44,580 --> 00:15:48,540
versions at the same time because you

00:15:46,380 --> 00:15:50,010
have to write then your version you have

00:15:48,540 --> 00:15:51,870
to maintain the existing version and

00:15:50,010 --> 00:15:54,290
then again you have to transition

00:15:51,870 --> 00:15:59,130
between both versions back and forth

00:15:54,290 --> 00:16:02,130
also the existing version had a huge

00:15:59,130 --> 00:16:04,710
amount of features that many of us knew

00:16:02,130 --> 00:16:08,460
but never had seen since quite some time

00:16:04,710 --> 00:16:10,590
in the past collections support for

00:16:08,460 --> 00:16:13,020
Firefox support for Thunderbirds see

00:16:10,590 --> 00:16:16,680
monkey themes different types of add-ons

00:16:13,020 --> 00:16:20,880
and still some legacy code when the code

00:16:16,680 --> 00:16:23,000
was used for both Firefox marketplace

00:16:20,880 --> 00:16:26,029
and amo

00:16:23,000 --> 00:16:29,810
so a rewrite from scratch wasn't

00:16:26,029 --> 00:16:32,839
possible and yeah we decided to

00:16:29,810 --> 00:16:35,629
incrementally improve the whole system

00:16:32,839 --> 00:16:37,939
another factor was that we had thousands

00:16:35,629 --> 00:16:41,000
of unit tests that might be meant that

00:16:37,939 --> 00:16:45,620
made demand maintenance much easier and

00:16:41,000 --> 00:16:47,750
at least got us some peaceful nights

00:16:45,620 --> 00:16:50,120
when we pushed some some code life and

00:16:47,750 --> 00:16:54,620
our tests were running or some of the

00:16:50,120 --> 00:16:59,029
existing tests didn't break so over the

00:16:54,620 --> 00:17:03,549
time we had been tasked to port the

00:16:59,029 --> 00:17:07,939
whole system to jenga 1.8 during 2016 to

00:17:03,549 --> 00:17:09,530
2016 and 17 removed old Colt code or

00:17:07,939 --> 00:17:14,000
possible restructured the whole

00:17:09,530 --> 00:17:15,860
repository at a proper dependency

00:17:14,000 --> 00:17:20,110
management used much more of Travis

00:17:15,860 --> 00:17:23,089
moved to github for our issue tracking

00:17:20,110 --> 00:17:26,919
involve the community much more added

00:17:23,089 --> 00:17:30,080
more documentation and also had to work

00:17:26,919 --> 00:17:32,539
towards the bigger goal of Mozilla to

00:17:30,080 --> 00:17:36,309
move towards the new add-on system which

00:17:32,539 --> 00:17:39,950
is active web extensions which is using

00:17:36,309 --> 00:17:42,679
html5 JavaScript and other technologies

00:17:39,950 --> 00:17:49,159
to build your extension or add-on in the

00:17:42,679 --> 00:17:51,260
browser so that happened and we also had

00:17:49,159 --> 00:17:55,250
to redesign because we do that every

00:17:51,260 --> 00:17:58,299
year and that was a one of the bigger

00:17:55,250 --> 00:18:01,760
challenges back then and we kind of

00:17:58,299 --> 00:18:04,280
ended up with one new file that was

00:18:01,760 --> 00:18:06,610
called restyle dot less which

00:18:04,280 --> 00:18:11,059
essentially took all the pull the old

00:18:06,610 --> 00:18:14,059
styles change thing back back and forth

00:18:11,059 --> 00:18:16,580
so that the Restall good but all that

00:18:14,059 --> 00:18:18,289
never ended up actually touching the

00:18:16,580 --> 00:18:21,049
existing styles that we had in the code

00:18:18,289 --> 00:18:23,330
and there in the repository because that

00:18:21,049 --> 00:18:25,190
would have been way too complex and

00:18:23,330 --> 00:18:28,120
error-prone because we didn't properly

00:18:25,190 --> 00:18:32,150
know where they're used

00:18:28,120 --> 00:18:34,010
so we ended up writing a completely new

00:18:32,150 --> 00:18:37,900
front end from scratch

00:18:34,010 --> 00:18:41,930
based on react and as a single page app

00:18:37,900 --> 00:18:45,170
which is accessing the add-on server via

00:18:41,930 --> 00:18:48,830
a new REST API much more functionality

00:18:45,170 --> 00:18:53,080
got moved to elasticsearch and api's so

00:18:48,830 --> 00:18:56,660
that the front-end could use them and we

00:18:53,080 --> 00:19:02,300
started with a small experiment were

00:18:56,660 --> 00:19:04,280
during one of our All Hands which today

00:19:02,300 --> 00:19:07,130
yeah very small experiment that used

00:19:04,280 --> 00:19:11,030
react as a single page app with

00:19:07,130 --> 00:19:13,370
server-side rendering and implemented a

00:19:11,030 --> 00:19:15,440
very small amount of our page which

00:19:13,370 --> 00:19:18,790
which is the discovery pane that you see

00:19:15,440 --> 00:19:21,830
here when you go in your Firefox browser

00:19:18,790 --> 00:19:25,700
to the add-ons page or about add-ons and

00:19:21,830 --> 00:19:28,570
see recommendations of add-ons that you

00:19:25,700 --> 00:19:32,420
can install simply by swiping that

00:19:28,570 --> 00:19:34,940
button to the right hand side and that

00:19:32,420 --> 00:19:36,380
worked out nicely was pushed to

00:19:34,940 --> 00:19:39,710
production after a few months of

00:19:36,380 --> 00:19:43,070
development and kind of later or set the

00:19:39,710 --> 00:19:49,040
groundwork for future development of amo

00:19:43,070 --> 00:19:52,390
and the front-end itself so we rewrote

00:19:49,040 --> 00:19:58,400
the whole front end from scratch as well

00:19:52,390 --> 00:20:00,500
this work got released in November 2006

00:19:58,400 --> 00:20:05,900
seventeen and this is how the page is

00:20:00,500 --> 00:20:07,790
looking or was looking in December yeah

00:20:05,900 --> 00:20:10,430
the whole word got released right before

00:20:07,790 --> 00:20:13,820
a Firefox 57 or Firefox quantum got

00:20:10,430 --> 00:20:16,580
released and had the luxury of focusing

00:20:13,820 --> 00:20:21,830
entirely on web extensions and themes

00:20:16,580 --> 00:20:25,130
and a few other pieces and so

00:20:21,830 --> 00:20:27,650
essentially we did both with amo we

00:20:25,130 --> 00:20:30,380
incrementally improved the backend of

00:20:27,650 --> 00:20:32,720
our side and on server over time because

00:20:30,380 --> 00:20:36,670
we had lots of unit tests but a very

00:20:32,720 --> 00:20:38,970
very complex system to maintain and had

00:20:36,670 --> 00:20:41,820
the or mate

00:20:38,970 --> 00:20:44,970
decision to completely rewrite our

00:20:41,820 --> 00:20:47,900
front-end from scratch because we didn't

00:20:44,970 --> 00:20:50,880
have the luxury of unit tests and other

00:20:47,900 --> 00:20:54,600
maintenance helpers for the front-end

00:20:50,880 --> 00:20:57,450
and essentially needed something very

00:20:54,600 --> 00:21:04,679
clean and ended up writing something

00:20:57,450 --> 00:21:09,150
from scratch so that now leaves us with

00:21:04,679 --> 00:21:12,990
a completely completely new system and

00:21:09,150 --> 00:21:17,039
we're slowly deprecating features on the

00:21:12,990 --> 00:21:18,990
old side for example when we launch new

00:21:17,039 --> 00:21:21,330
replacement sites for apps like

00:21:18,990 --> 00:21:24,480
Thunderbird sea monkey for example we

00:21:21,330 --> 00:21:25,830
can get rid of lots of new code which

00:21:24,480 --> 00:21:27,650
will make the maintenance of our

00:21:25,830 --> 00:21:32,400
back-end much much easier and

00:21:27,650 --> 00:21:34,409
potentially allow us to move towards

00:21:32,400 --> 00:21:36,690
more recent younger versions and

00:21:34,409 --> 00:21:38,970
dependencies and implement new features

00:21:36,690 --> 00:21:43,289
much much more quicker not much much

00:21:38,970 --> 00:21:45,900
quicker so what did we learn we are

00:21:43,289 --> 00:21:47,850
heavy users of feature flags and

00:21:45,900 --> 00:21:52,020
switches and are using Jenga waffle for

00:21:47,850 --> 00:21:54,990
that we try or usually try to develop

00:21:52,020 --> 00:21:58,020
new features that art it sit behind a

00:21:54,990 --> 00:22:02,220
waffle flag so that we can push them to

00:21:58,020 --> 00:22:06,659
production once new things are finished

00:22:02,220 --> 00:22:08,190
and we have a QA team that can test them

00:22:06,659 --> 00:22:14,070
on our development and staging system

00:22:08,190 --> 00:22:15,630
systems and have our UX and UI team look

00:22:14,070 --> 00:22:19,320
at the features that we implemented and

00:22:15,630 --> 00:22:21,929
have them give us the go when things

00:22:19,320 --> 00:22:26,400
look good again and then we just have to

00:22:21,929 --> 00:22:30,210
flip the switch so that makes it much

00:22:26,400 --> 00:22:32,250
easier to push in your code make sure it

00:22:30,210 --> 00:22:34,080
runs on your development staging systems

00:22:32,250 --> 00:22:37,049
also push that code to production

00:22:34,080 --> 00:22:38,460
without putting it live but also making

00:22:37,049 --> 00:22:42,030
sure that you didn't break any other

00:22:38,460 --> 00:22:44,549
systems that you rely on and that makes

00:22:42,030 --> 00:22:48,149
it much easier to revert any broken

00:22:44,549 --> 00:22:49,560
deployments obviously because you only

00:22:48,149 --> 00:22:52,980
have to flip back

00:22:49,560 --> 00:22:55,890
which that can be or is usually very

00:22:52,980 --> 00:22:57,540
easy but depends on your feature and if

00:22:55,890 --> 00:23:00,060
you need any database migrations for

00:22:57,540 --> 00:23:06,660
example so if you have that you need to

00:23:00,060 --> 00:23:10,380
take some special gear so another

00:23:06,660 --> 00:23:11,090
learning that we recently made or almost

00:23:10,380 --> 00:23:14,900
a year now

00:23:11,090 --> 00:23:18,360
or maybe since almost year now is

00:23:14,900 --> 00:23:22,380
third-party dependencies can be a huge

00:23:18,360 --> 00:23:24,120
pain have been always since we moved

00:23:22,380 --> 00:23:27,360
from Ginga one point six to one point

00:23:24,120 --> 00:23:30,950
seven and one point eight with a huge

00:23:27,360 --> 00:23:33,870
were very old date code basis ours and

00:23:30,950 --> 00:23:39,120
using many many internal functionality

00:23:33,870 --> 00:23:40,800
of Django that was a huge pain and the

00:23:39,120 --> 00:23:43,380
move from one point six to one point

00:23:40,800 --> 00:23:48,110
eight alone cost us around three months

00:23:43,380 --> 00:23:48,110
of more or less full-time development

00:23:49,790 --> 00:23:55,470
also while dependencies and

00:23:52,910 --> 00:23:57,720
semi-automatic upgrades by PI up or

00:23:55,470 --> 00:24:02,670
greenkeeper are awesome and they usually

00:23:57,720 --> 00:24:05,970
work on the onion server we have often

00:24:02,670 --> 00:24:08,100
the problem on our front-end that we get

00:24:05,970 --> 00:24:09,900
swamped with the JavaScript dependency

00:24:08,100 --> 00:24:13,740
upgrades every now and then and it's

00:24:09,900 --> 00:24:16,170
very hard to keep on top of them so be

00:24:13,740 --> 00:24:19,290
aware of that you don't have to be on

00:24:16,170 --> 00:24:23,520
the bleeding edge but also make sure

00:24:19,290 --> 00:24:27,690
you're subscribed to the correct mailing

00:24:23,520 --> 00:24:30,810
lists and project back trackers so they

00:24:27,690 --> 00:24:33,840
can be aware of any security issues or

00:24:30,810 --> 00:24:39,390
bug fixes that are eventually in fact

00:24:33,840 --> 00:24:40,860
impacting your site also upgrading

00:24:39,390 --> 00:24:42,410
ancient dependencies can be very

00:24:40,860 --> 00:24:45,240
daunting and very time-consuming and

00:24:42,410 --> 00:24:50,660
it's often hard to find the right

00:24:45,240 --> 00:24:53,670
balance between doing the upgrade and

00:24:50,660 --> 00:24:57,030
knowing how long that'll take experience

00:24:53,670 --> 00:25:00,060
obviously helps but what also helps is a

00:24:57,030 --> 00:25:01,830
very time boxed work window and

00:25:00,060 --> 00:25:03,929
experimental branch that you just start

00:25:01,830 --> 00:25:06,480
up give you

00:25:03,929 --> 00:25:09,299
two hours or three hours and work on

00:25:06,480 --> 00:25:13,049
that see what breaks and make a list of

00:25:09,299 --> 00:25:16,200
things that you think will happen or

00:25:13,049 --> 00:25:18,350
must happen so that the upgrade can

00:25:16,200 --> 00:25:23,429
happen

00:25:18,350 --> 00:25:28,259
it also helps adding new dependencies to

00:25:23,429 --> 00:25:30,840
your continuous integration system while

00:25:28,259 --> 00:25:33,059
working on the system as well so that

00:25:30,840 --> 00:25:35,669
you have both running at the same time

00:25:33,059 --> 00:25:37,950
that makes sure for example if you're

00:25:35,669 --> 00:25:43,259
upgrading Gengo that your codebase can

00:25:37,950 --> 00:25:45,899
run for example both versions and then

00:25:43,259 --> 00:25:47,850
essentially you only have to flip over

00:25:45,899 --> 00:25:49,230
to for example from jingle one point

00:25:47,850 --> 00:25:52,919
eight to one point eleven in your

00:25:49,230 --> 00:25:57,259
production system and essentially can

00:25:52,919 --> 00:26:02,820
remove the old waffle Flags or flags and

00:25:57,259 --> 00:26:05,549
code and workarounds from your one point

00:26:02,820 --> 00:26:10,169
eight times that's something we didn't

00:26:05,549 --> 00:26:14,519
do for our upgrade from 1.8 1.7 and that

00:26:10,169 --> 00:26:16,320
bit us a bit and cost us many many

00:26:14,519 --> 00:26:19,080
months were actually a year of work

00:26:16,320 --> 00:26:20,580
during that upgrade because we ran into

00:26:19,080 --> 00:26:23,970
lots and lots of third-party

00:26:20,580 --> 00:26:28,080
dependencies that were broken and

00:26:23,970 --> 00:26:30,450
maintained because we use many or bacon

00:26:28,080 --> 00:26:33,059
days many of the dependencies that we

00:26:30,450 --> 00:26:34,649
used were written by Mozilla maintained

00:26:33,059 --> 00:26:37,259
by Mozilla but over time the people

00:26:34,649 --> 00:26:40,649
changed positions and the projects are

00:26:37,259 --> 00:26:43,799
unmaintained now and we had to operate

00:26:40,649 --> 00:26:45,570
them step by step or get rid of them so

00:26:43,799 --> 00:26:48,360
that's very time consuming and daunting

00:26:45,570 --> 00:26:51,360
so make sure the dependencies that

00:26:48,360 --> 00:26:54,600
you're using are up-to-date or well

00:26:51,360 --> 00:26:59,519
maintained or also make sure that you're

00:26:54,600 --> 00:27:00,720
on top of them and yeah know how to how

00:26:59,519 --> 00:27:02,220
to handle them and if they're

00:27:00,720 --> 00:27:05,639
unmaintained make sure that you get rid

00:27:02,220 --> 00:27:09,659
of them or replace them or contribute to

00:27:05,639 --> 00:27:11,000
them on time before you run into any

00:27:09,659 --> 00:27:20,030
problems

00:27:11,000 --> 00:27:27,110
I actually can't stress this enough a Qi

00:27:20,030 --> 00:27:29,810
IQ 18 actually saves lives while unit

00:27:27,110 --> 00:27:32,360
tests are awesome

00:27:29,810 --> 00:27:35,300
automated selenium UI tests are awesome

00:27:32,360 --> 00:27:37,640
as well but having a QA team that

00:27:35,300 --> 00:27:42,710
manually tests your system and also

00:27:37,640 --> 00:27:44,600
makes sure that edge cases are covered

00:27:42,710 --> 00:27:50,840
that the whole new features that you add

00:27:44,600 --> 00:27:54,770
are working ice expected is a huge time

00:27:50,840 --> 00:27:59,570
saver because often if you're using for

00:27:54,770 --> 00:28:01,250
example mocks you not often but if

00:27:59,570 --> 00:28:05,450
you're using mocks and if you use them

00:28:01,250 --> 00:28:07,520
too much for example you can end up not

00:28:05,450 --> 00:28:10,160
actually testing the right system so

00:28:07,520 --> 00:28:13,720
having a QA team that has a clear list

00:28:10,160 --> 00:28:15,890
of things that need to be tested helps

00:28:13,720 --> 00:28:18,980
pushing your features upgrades

00:28:15,890 --> 00:28:21,970
dependency upgrades and even migrations

00:28:18,980 --> 00:28:25,010
makes all that work much much easier

00:28:21,970 --> 00:28:26,990
also explaining what you did and how to

00:28:25,010 --> 00:28:29,390
test it to someone else makes it much

00:28:26,990 --> 00:28:32,410
easier to reason over the code and then

00:28:29,390 --> 00:28:35,150
functionally did that you implement it

00:28:32,410 --> 00:28:39,290
yeah it's a reason about that or makes

00:28:35,150 --> 00:28:45,200
yourself reason about that and allows

00:28:39,290 --> 00:28:48,550
you to see any potential edge cases that

00:28:45,200 --> 00:28:48,550
you might have forgotten over time

00:28:50,320 --> 00:28:54,770
implement features incrementally and

00:28:52,580 --> 00:28:58,100
flip the switch to that feature once

00:28:54,770 --> 00:29:01,570
they're ready it's not often as simple

00:28:58,100 --> 00:29:03,830
as that but if you can't do that do that

00:29:01,570 --> 00:29:06,920
because it helps having that code

00:29:03,830 --> 00:29:09,860
interpret in production sooner rather

00:29:06,920 --> 00:29:16,510
than later and catch any potential

00:29:09,860 --> 00:29:18,800
errors one time also don't panic

00:29:16,510 --> 00:29:20,420
usually you're there for the long run

00:29:18,800 --> 00:29:24,280
and you have to make sure the project

00:29:20,420 --> 00:29:24,280
works for quite some time

00:29:24,480 --> 00:29:29,020
if you see some code that really doesn't

00:29:28,210 --> 00:29:31,809
look that great

00:29:29,020 --> 00:29:34,809
it usually that usually was a reason for

00:29:31,809 --> 00:29:38,470
the code when back when it was written

00:29:34,809 --> 00:29:43,419
like that and no one actually wanted to

00:29:38,470 --> 00:29:45,400
do something bad because yeah when you

00:29:43,419 --> 00:29:49,480
write your code you use your best

00:29:45,400 --> 00:29:53,530
judgment and go for it with that

00:29:49,480 --> 00:29:55,990
so that was my talk thanks a lot for

00:29:53,530 --> 00:29:59,520
listening you can find me on github

00:29:55,990 --> 00:30:02,409
twitter and there's also the awesome

00:29:59,520 --> 00:30:03,820
mozilla.org arounds blog where you can

00:30:02,409 --> 00:30:08,169
find a lot more technical information

00:30:03,820 --> 00:30:12,010
about amo and yeah the stuff that we do

00:30:08,169 --> 00:30:16,110
and if you have any questions just find

00:30:12,010 --> 00:30:16,480
me after the talk and yeah thank you

00:30:16,110 --> 00:30:19,340
[Applause]

00:30:16,480 --> 00:30:22,540
[Music]

00:30:19,340 --> 00:30:22,540

YouTube URL: https://www.youtube.com/watch?v=yqpn31vLqEs


