Title: DjangoCon 2018 - ORM: The Sequel
Publication date: 2018-05-24
Playlist: DjangoCon Europe 2018 in Heidelberg
Description: 
	https://media.ccc.de/v/hd-13-orm-the-sequel



This summer... a story of learning. She came from a different world, and must understand her new surrounds. Follow her on a journey of self discovery as she learns about... the Django ORM, via SQL.

Django tutorials often use the perspective of a complete newcomer to Python and web development, and while they provide a good practical on-ramp for brand new developers, they are often not quite right for developers from other backgrounds.

The common backbone of MVC development, no matter the base language, is the database and the language specifically for it's manipulation: Structured Query Language (SQL). But Django hides this behind it's amazing drawcard, the Object Relational Model (ORM).

But how can a developer already familiar with SQL get a handle on the ORM?

This talk endeavours to introduce the ORM using shared SQL and relational database concepts, showcasing the features the ORM uses to make database querying and manipulation a joy, rather than a burden, to the polyglot developer.

Katie McLaughlin
Captions: 
	00:00:06,420 --> 00:00:11,590
hello everyone and welcome to our second

00:00:09,220 --> 00:00:13,270
set of talks for this morning it is my

00:00:11,590 --> 00:00:15,910
distinct pleasure this morning to

00:00:13,270 --> 00:00:17,500
introduce you to Katy Katy has worn many

00:00:15,910 --> 00:00:19,360
hats over the years she's been a

00:00:17,500 --> 00:00:21,460
software developer for many languages a

00:00:19,360 --> 00:00:23,770
systems administrator for multiple

00:00:21,460 --> 00:00:26,170
operating systems and a speaker on many

00:00:23,770 --> 00:00:27,850
topics and many continents when she's

00:00:26,170 --> 00:00:30,220
not changing the world she enjoys making

00:00:27,850 --> 00:00:32,410
tapestries cooking and seeing just how

00:00:30,220 --> 00:00:34,809
well various application stacks handle

00:00:32,410 --> 00:00:48,450
emoji here prett presenting her talk o

00:00:34,809 --> 00:00:48,450
RM the sequel KT good noggin django con

00:00:48,780 --> 00:00:57,399
g'day mates

00:00:52,079 --> 00:01:00,039
hi I'm Katie I do a lot of stuff in

00:00:57,399 --> 00:01:03,699
Django I've spoken before at Django Con

00:01:00,039 --> 00:01:06,700
Europe in Budapest in 2016 I spoke and

00:01:03,699 --> 00:01:09,460
was a mentor at django con us last year

00:01:06,700 --> 00:01:12,240
I also organized django con Australia

00:01:09,460 --> 00:01:14,470
last year we had really cool t-shirts um

00:01:12,240 --> 00:01:16,750
currently I am a site reliability

00:01:14,470 --> 00:01:19,689
engineer at D vo the wonderful people

00:01:16,750 --> 00:01:21,670
that brought you our live captioning

00:01:19,689 --> 00:01:24,729
they're also the ones behind Django CMS

00:01:21,670 --> 00:01:27,189
I'm also currently serving as a director

00:01:24,729 --> 00:01:32,350
of the Django Software Foundation and I

00:01:27,189 --> 00:01:35,170
don't know Django yet um I'm an absolute

00:01:32,350 --> 00:01:38,079
novice and I am not afraid to admit it I

00:01:35,170 --> 00:01:40,329
still see the admin and go oh my god

00:01:38,079 --> 00:01:43,540
what kind of magic is this that makes it

00:01:40,329 --> 00:01:45,430
all go it's just like you you started up

00:01:43,540 --> 00:01:47,409
and there's all this stuff that's just

00:01:45,430 --> 00:01:51,250
there and it works and there's filtering

00:01:47,409 --> 00:01:53,020
out of the box and it's cool but just

00:01:51,250 --> 00:01:55,299
because I same a beginner at Django

00:01:53,020 --> 00:01:58,630
doesn't mean I'm a beginner at tech or

00:01:55,299 --> 00:02:01,479
at programming in general I've got oh

00:01:58,630 --> 00:02:03,280
gosh over a decade's worth of experience

00:02:01,479 --> 00:02:06,549
in software development just not in

00:02:03,280 --> 00:02:09,880
Python before I started doing Python and

00:02:06,549 --> 00:02:12,940
Django I worked with Haskell and rails

00:02:09,880 --> 00:02:15,099
and Ruby and before that back in the day

00:02:12,940 --> 00:02:18,340
around the time that the magic was being

00:02:15,099 --> 00:02:19,600
removed from Django I was working on

00:02:18,340 --> 00:02:21,310
eighth

00:02:19,600 --> 00:02:23,410
better software that probably no one in

00:02:21,310 --> 00:02:25,660
this room has ever heard of Oracle

00:02:23,410 --> 00:02:31,660
application Express who here has heard

00:02:25,660 --> 00:02:34,150
of Oracle app x4 wonderful um it's this

00:02:31,660 --> 00:02:35,860
wonderful bit of software that runs for

00:02:34,150 --> 00:02:38,040
free if you have the free version of

00:02:35,860 --> 00:02:40,300
Oracle XE and there's this wonderful

00:02:38,040 --> 00:02:42,190
administration page that no other bit of

00:02:40,300 --> 00:02:43,720
software ever has where you can go in

00:02:42,190 --> 00:02:46,090
and you can define your models and your

00:02:43,720 --> 00:02:47,650
queries and your filters and it's all

00:02:46,090 --> 00:02:51,400
just magic and it works

00:02:47,650 --> 00:02:53,020
nothing like Django at all um I I may

00:02:51,400 --> 00:02:54,910
have done this a little bit so much that

00:02:53,020 --> 00:02:59,440
I was a technical reviewer on a book for

00:02:54,910 --> 00:03:03,100
it um but this is going back a while now

00:02:59,440 --> 00:03:05,380
so even though I haven't used Oracle or

00:03:03,100 --> 00:03:09,190
application Express for years there's

00:03:05,380 --> 00:03:11,500
one thing I still remember SQL who here

00:03:09,190 --> 00:03:12,820
knows SQL great you're in the right talk

00:03:11,500 --> 00:03:16,360
um

00:03:12,820 --> 00:03:18,520
SQL structured query language is a way

00:03:16,360 --> 00:03:22,570
that you can talk to databases in a

00:03:18,520 --> 00:03:25,030
structured query language and given that

00:03:22,570 --> 00:03:27,190
SQL is one of the first base level

00:03:25,030 --> 00:03:30,430
technologies that I ever used and keep

00:03:27,190 --> 00:03:31,960
using I still look at systems today and

00:03:30,430 --> 00:03:33,910
go I'll can't I just but I want to like

00:03:31,960 --> 00:03:38,110
Clause it would make my life so much

00:03:33,910 --> 00:03:40,960
easier but getting back to Django I'm

00:03:38,110 --> 00:03:43,480
still getting my head around how Django

00:03:40,960 --> 00:03:46,120
works I mean for a sufficiently setup

00:03:43,480 --> 00:03:47,920
Django project it should be easy for

00:03:46,120 --> 00:03:50,740
someone coming in as a user into the

00:03:47,920 --> 00:03:53,230
admin section to just get it to work but

00:03:50,740 --> 00:03:55,870
if you were to try to tell me how things

00:03:53,230 --> 00:03:58,830
worked underneath I would just get this

00:03:55,870 --> 00:04:01,390
fog of war thing going on where I can't

00:03:58,830 --> 00:04:02,770
tell you what's going on if you tell me

00:04:01,390 --> 00:04:04,900
I'll look at the models look at this

00:04:02,770 --> 00:04:08,170
look at that I'm like what do you mean

00:04:04,900 --> 00:04:10,390
and even worse when it's like I want to

00:04:08,170 --> 00:04:13,990
debug something I just get told oh just

00:04:10,390 --> 00:04:15,790
use the shell what is the shell well

00:04:13,990 --> 00:04:19,989
what am I doing here what is that

00:04:15,790 --> 00:04:23,020
concept that this is only recently being

00:04:19,989 --> 00:04:25,060
filled with information so it was a

00:04:23,020 --> 00:04:26,920
couple of weeks ago just an empty space

00:04:25,060 --> 00:04:30,189
when someone just said use the shell I'm

00:04:26,920 --> 00:04:34,789
like see shelf

00:04:30,189 --> 00:04:36,919
but the ORM is this wonderful thing that

00:04:34,789 --> 00:04:39,770
lives in this magic shell and that's the

00:04:36,919 --> 00:04:42,349
object relational mapper and it's the

00:04:39,770 --> 00:04:43,689
not magic it's not magic I'm not allowed

00:04:42,349 --> 00:04:47,360
to call it magic it's the technology

00:04:43,689 --> 00:04:50,589
that makes Django go but outside of

00:04:47,360 --> 00:04:56,330
context what does that even mean and

00:04:50,589 --> 00:04:58,580
context is so very important but let's

00:04:56,330 --> 00:05:00,289
step away from the normal way that these

00:04:58,580 --> 00:05:02,270
talks kind of go where you start with a

00:05:00,289 --> 00:05:04,969
blank slate and you create a new project

00:05:02,270 --> 00:05:06,529
and everything else that's great for

00:05:04,969 --> 00:05:08,120
first time developers that's great for

00:05:06,529 --> 00:05:11,060
people that haven't done haitch tml

00:05:08,120 --> 00:05:13,400
before know the concept of the blog but

00:05:11,060 --> 00:05:15,319
want to make their own but it's not

00:05:13,400 --> 00:05:17,479
helpful for developers who have done

00:05:15,319 --> 00:05:20,930
that so many times in so many frameworks

00:05:17,479 --> 00:05:22,969
that they want to start using something

00:05:20,930 --> 00:05:24,439
that exists all they need to debug

00:05:22,969 --> 00:05:26,689
something that already exists for their

00:05:24,439 --> 00:05:29,089
job they don't have time to go make a

00:05:26,689 --> 00:05:30,649
blog and then come back to working on

00:05:29,089 --> 00:05:34,729
the production issue that's setting

00:05:30,649 --> 00:05:39,259
fires everywhere so what I want to do is

00:05:34,729 --> 00:05:41,569
I want to be a bug hunter I want to be a

00:05:39,259 --> 00:05:44,680
noisy miner and Australian native bird

00:05:41,569 --> 00:05:47,509
and I want to go around this field of

00:05:44,680 --> 00:05:49,580
intrinsically intricate kale with all

00:05:47,509 --> 00:05:51,499
its viven Archie spirals and I want to

00:05:49,580 --> 00:05:53,449
be able to get my beak right down into

00:05:51,499 --> 00:05:56,810
there and work out where all the bugs

00:05:53,449 --> 00:05:58,389
are so for this context we're not going

00:05:56,810 --> 00:06:00,800
to do a blog we're not gonna do a news

00:05:58,389 --> 00:06:01,569
portal or whatever the cool kids are

00:06:00,800 --> 00:06:04,490
doing nowadays

00:06:01,569 --> 00:06:06,110
instead we're gonna use a sample

00:06:04,490 --> 00:06:11,389
application for something that's near

00:06:06,110 --> 00:06:13,639
and dear to my heart emoji so here is

00:06:11,389 --> 00:06:16,339
our application and if you've seen my

00:06:13,639 --> 00:06:18,169
talk from Django Khan in Budapest you

00:06:16,339 --> 00:06:21,830
would be familiar with something like

00:06:18,169 --> 00:06:24,529
this I call this Unicode X and it is a

00:06:21,830 --> 00:06:26,569
project where I can list a couple of

00:06:24,529 --> 00:06:28,189
different types of emoji here we have

00:06:26,569 --> 00:06:30,289
the official conference emoji the

00:06:28,189 --> 00:06:32,089
European Council also sparkles and

00:06:30,289 --> 00:06:34,759
unicorns because it's a Jenga conference

00:06:32,089 --> 00:06:36,979
and what we do is if we click one of

00:06:34,759 --> 00:06:38,779
these we get to see the list of how

00:06:36,979 --> 00:06:40,579
these different emoji appear on

00:06:38,779 --> 00:06:43,340
different mobiles laptops and the rest

00:06:40,579 --> 00:06:44,810
so if I click on the sparkles I can see

00:06:43,340 --> 00:06:49,070
there's the windows and the Android and

00:06:44,810 --> 00:06:50,530
the oh one of them is not working that's

00:06:49,070 --> 00:06:56,240
that's embarrassing

00:06:50,530 --> 00:07:01,330
so how would I fix that well I just used

00:06:56,240 --> 00:07:03,770
the shell right well that's the thing

00:07:01,330 --> 00:07:07,190
just using the shell is actually what

00:07:03,770 --> 00:07:09,229
you do but the context is important

00:07:07,190 --> 00:07:10,910
because when someone just says just use

00:07:09,229 --> 00:07:13,970
the shell and you happen to be talking

00:07:10,910 --> 00:07:15,590
about Django what they mean is this what

00:07:13,970 --> 00:07:17,180
they mean is you want to navigate into

00:07:15,590 --> 00:07:19,100
your project which you've helpfully

00:07:17,180 --> 00:07:21,740
already got local a local copy of your

00:07:19,100 --> 00:07:25,070
code and you want to run manage pie

00:07:21,740 --> 00:07:28,280
shell and what you get is you get an

00:07:25,070 --> 00:07:30,350
interactive console where the path and

00:07:28,280 --> 00:07:32,389
environment information has already been

00:07:30,350 --> 00:07:36,020
loaded so you can start interacting with

00:07:32,389 --> 00:07:38,570
your Django project and from here you

00:07:36,020 --> 00:07:42,850
can use the show but how do I use the

00:07:38,570 --> 00:07:46,160
show well I'm an SQL dev I deal in

00:07:42,850 --> 00:07:47,990
databases so if I get into a project and

00:07:46,160 --> 00:07:50,150
I know that there's a database hiding

00:07:47,990 --> 00:07:51,950
behind there somewhere the first thing I

00:07:50,150 --> 00:07:55,220
want to do is I want to be able to find

00:07:51,950 --> 00:07:57,530
all the tables this is the bare basis of

00:07:55,220 --> 00:08:00,620
what any database programmer would want

00:07:57,530 --> 00:08:03,289
to do they want to know the schema so if

00:08:00,620 --> 00:08:06,830
you're using MySQL you'd use show tables

00:08:03,289 --> 00:08:11,690
Postgres /dt in Oracle just like star

00:08:06,830 --> 00:08:14,990
from DBA tables in the ORM there's no

00:08:11,690 --> 00:08:17,120
good way to do this out of the box now I

00:08:14,990 --> 00:08:18,830
made the mistake of discussing some of

00:08:17,120 --> 00:08:19,789
these two content beforehand and I was

00:08:18,830 --> 00:08:21,830
told that there was this thing called

00:08:19,789 --> 00:08:25,250
Django extensions that may or may not

00:08:21,830 --> 00:08:28,010
solve this out of the box but I don't

00:08:25,250 --> 00:08:30,740
know how to install that I don't know

00:08:28,010 --> 00:08:33,110
how to add that in all I have is a shell

00:08:30,740 --> 00:08:35,000
I just want a copy paste some content

00:08:33,110 --> 00:08:37,279
from Stack Overflow and I want to get a

00:08:35,000 --> 00:08:39,650
list of tables so here's some I prepared

00:08:37,279 --> 00:08:41,570
earlier with the help of some wonderful

00:08:39,650 --> 00:08:42,680
core developers I was told that this is

00:08:41,570 --> 00:08:46,910
the way you can do that

00:08:42,680 --> 00:08:49,910
so we import from django django apps and

00:08:46,910 --> 00:08:52,250
then we do a nested loop over all the

00:08:49,910 --> 00:08:53,870
apps that are configured and then for

00:08:52,250 --> 00:08:56,120
all those apps what models are

00:08:53,870 --> 00:08:56,700
configured and then we print out and

00:08:56,120 --> 00:09:00,300
nicely

00:08:56,700 --> 00:09:02,820
formatted from something models import

00:09:00,300 --> 00:09:04,470
something else and this is something you

00:09:02,820 --> 00:09:06,990
can just copy and paste and dump into

00:09:04,470 --> 00:09:07,800
your terminal and you can start getting

00:09:06,990 --> 00:09:11,760
the ball rolling

00:09:07,800 --> 00:09:13,470
so back in your terminal I just copy and

00:09:11,760 --> 00:09:15,690
paste this information in like a good

00:09:13,470 --> 00:09:17,430
programmer does and what I get is a

00:09:15,690 --> 00:09:20,670
whole bunch of import statements and

00:09:17,430 --> 00:09:21,600
this is useful to me because it tells me

00:09:20,670 --> 00:09:23,940
okay

00:09:21,600 --> 00:09:26,640
I've got some Django stuff in there

00:09:23,940 --> 00:09:29,490
there's some contributors stuff oh yeah

00:09:26,640 --> 00:09:31,950
that's the thing with the the users and

00:09:29,490 --> 00:09:33,810
stuff I've seen that before um there's

00:09:31,950 --> 00:09:36,000
this thing called Aldrin oh yeah that's

00:09:33,810 --> 00:09:38,250
right this is running on a Divi Oh cloud

00:09:36,000 --> 00:09:39,690
if you want to know more about dbo cloud

00:09:38,250 --> 00:09:41,610
we're holding a workshop on Saturday

00:09:39,690 --> 00:09:44,190
afternoon come talk to me at lunch um

00:09:41,610 --> 00:09:45,720
but the tables I'm really interested in

00:09:44,190 --> 00:09:48,030
is the stuff at the bottom which has

00:09:45,720 --> 00:09:49,200
been helpfully named unicode X which

00:09:48,030 --> 00:09:51,960
also happens to be the name of my

00:09:49,200 --> 00:09:54,510
project so that's probably very useful

00:09:51,960 --> 00:09:58,050
to me so what we've got is we've got

00:09:54,510 --> 00:10:03,750
code points vendors vendor versions and

00:09:58,050 --> 00:10:05,790
designs so what we can also do is we can

00:10:03,750 --> 00:10:08,130
for any of those models find the literal

00:10:05,790 --> 00:10:09,750
table that's associated to it in the

00:10:08,130 --> 00:10:11,250
database and this is gonna help me later

00:10:09,750 --> 00:10:14,250
when I want to start running SQL

00:10:11,250 --> 00:10:16,380
statements because I know databases I

00:10:14,250 --> 00:10:19,020
still don't know what a model is or what

00:10:16,380 --> 00:10:20,730
an app is or really what Django is or

00:10:19,020 --> 00:10:22,170
why there's a pony but not a pony but

00:10:20,730 --> 00:10:24,990
we're not allowed to say there's a pony

00:10:22,170 --> 00:10:29,520
because it's not real um so what I can

00:10:24,990 --> 00:10:33,270
do is if I have a model I can call it

00:10:29,520 --> 00:10:36,360
and just go meta thing and then I can

00:10:33,270 --> 00:10:38,340
ask it for the database table this meta

00:10:36,360 --> 00:10:39,780
stuff is really cool I don't yet

00:10:38,340 --> 00:10:41,310
understand it but apparently there's

00:10:39,780 --> 00:10:43,860
people here that helped write it so I'm

00:10:41,310 --> 00:10:46,890
gonna be asking you later so I can fill

00:10:43,860 --> 00:10:50,460
in that yet bit because I don't know

00:10:46,890 --> 00:10:53,970
Django yet just ask me again whether I

00:10:50,460 --> 00:10:56,910
know Django after the sprints so back in

00:10:53,970 --> 00:10:58,110
my terminal I can copy and paste that

00:10:56,910 --> 00:11:00,540
import statement like a good little

00:10:58,110 --> 00:11:02,940
developer and I can import the code

00:11:00,540 --> 00:11:05,490
point model and I don't get any errors

00:11:02,940 --> 00:11:07,290
which is really good um and then I can

00:11:05,490 --> 00:11:10,380
run this statement that I had before and

00:11:07,290 --> 00:11:10,920
I can see that there's a table this is

00:11:10,380 --> 00:11:13,139
useful

00:11:10,920 --> 00:11:15,420
because what I want to do is I want to

00:11:13,139 --> 00:11:17,550
see all the table columns because I know

00:11:15,420 --> 00:11:20,370
the tables now I want to know what's in

00:11:17,550 --> 00:11:23,760
those tables so I can do this again with

00:11:20,370 --> 00:11:24,269
the meta stuff I don't even know what

00:11:23,760 --> 00:11:26,070
it's called

00:11:24,269 --> 00:11:27,440
it's just meta somebody will tell me

00:11:26,070 --> 00:11:30,750
later but I'm not taking questions

00:11:27,440 --> 00:11:33,660
because I don't want to know yet I want

00:11:30,750 --> 00:11:36,570
to do this as a beginner still so we run

00:11:33,660 --> 00:11:38,490
get fields and back in our terminal we

00:11:36,570 --> 00:11:41,699
run this and we get a whole bunch of

00:11:38,490 --> 00:11:43,589
fields so this is this is familiar to me

00:11:41,699 --> 00:11:45,810
as an SQL developer I can see that

00:11:43,589 --> 00:11:49,410
there's a automatically generated ID

00:11:45,810 --> 00:11:52,889
there's a name a description at a

00:11:49,410 --> 00:11:56,490
current point I don't have to do this

00:11:52,889 --> 00:11:59,339
fire the ORM what I could do is I can

00:11:56,490 --> 00:12:01,350
get it all by this other useful shell

00:11:59,339 --> 00:12:03,029
interface called DB shell where

00:12:01,350 --> 00:12:04,829
depending on what database I'm using I

00:12:03,029 --> 00:12:07,350
get dumped directly into a shell for

00:12:04,829 --> 00:12:09,510
that database and I can see right there

00:12:07,350 --> 00:12:11,370
that it says P SQL and I know that that

00:12:09,510 --> 00:12:13,410
means Postgres which means I can use the

00:12:11,370 --> 00:12:16,350
/dt from before and I can get all my

00:12:13,410 --> 00:12:18,510
tables and I can see that very usefully

00:12:16,350 --> 00:12:20,459
there is all these old tables and then

00:12:18,510 --> 00:12:22,100
there is the unicode x stuff which is

00:12:20,459 --> 00:12:25,470
the stuff that I'm interested in

00:12:22,100 --> 00:12:27,540
so from here any good database developer

00:12:25,470 --> 00:12:31,949
would go okay I want to select star from

00:12:27,540 --> 00:12:36,300
a table so in the RM we do that by going

00:12:31,949 --> 00:12:38,339
our model dot objects dot all and that

00:12:36,300 --> 00:12:39,690
just lists them all out I'd really

00:12:38,339 --> 00:12:40,860
appreciate if people stopped talking

00:12:39,690 --> 00:12:45,209
while I'm trying to talk I've got the

00:12:40,860 --> 00:12:48,209
microphone thank you back in our console

00:12:45,209 --> 00:12:50,550
if I copy and paste this statement

00:12:48,209 --> 00:12:53,190
before and then I learned it and nothing

00:12:50,550 --> 00:12:55,470
breaks which is great and then if I run

00:12:53,190 --> 00:12:58,890
this I get a list of all my code point

00:12:55,470 --> 00:13:00,750
objects and this maps directly to the

00:12:58,890 --> 00:13:01,769
three that I saw on my homepage earlier

00:13:00,750 --> 00:13:05,100
so I know I'm in the right application

00:13:01,769 --> 00:13:07,110
which is really useful to know that

00:13:05,100 --> 00:13:10,079
you're in the right place so this is a

00:13:07,110 --> 00:13:12,060
set of objects and it's not a list it's

00:13:10,079 --> 00:13:14,790
a set because it says query sets there

00:13:12,060 --> 00:13:17,490
and sets are important so if I want to

00:13:14,790 --> 00:13:19,709
show the contents of the particular

00:13:17,490 --> 00:13:21,750
table and searches going star

00:13:19,709 --> 00:13:23,150
I need a where clause so if I wanted to

00:13:21,750 --> 00:13:25,250
go

00:13:23,150 --> 00:13:27,830
just show everything that sparkles what

00:13:25,250 --> 00:13:29,330
I would do is I would add a filter so I

00:13:27,830 --> 00:13:32,480
want to filter on the name where the

00:13:29,330 --> 00:13:35,360
name is smuggles so put that into my

00:13:32,480 --> 00:13:39,170
terminal and I get a query set of one

00:13:35,360 --> 00:13:42,170
element of sparkles but if I want to get

00:13:39,170 --> 00:13:44,240
a specific record not a set what I need

00:13:42,170 --> 00:13:46,130
to use instead of filter is use get

00:13:44,240 --> 00:13:49,220
which will return one record and one

00:13:46,130 --> 00:13:52,400
record only and if you try to tell it to

00:13:49,220 --> 00:13:53,870
get more than one record it explodes but

00:13:52,400 --> 00:13:56,510
it helpfully tells you why it exploded

00:13:53,870 --> 00:13:58,880
and to let you know that oh I actually

00:13:56,510 --> 00:14:00,680
returned three and this is really useful

00:13:58,880 --> 00:14:04,010
when you're still trying to get your

00:14:00,680 --> 00:14:07,640
head around the ORM and now we come to

00:14:04,010 --> 00:14:09,830
the fun bit joins I've forgotten more

00:14:07,640 --> 00:14:15,010
about how inner joins and outer joins

00:14:09,830 --> 00:14:18,440
work with explained plans on oracle 9i

00:14:15,010 --> 00:14:20,540
then I care to remember but thankfully

00:14:18,440 --> 00:14:22,250
the ORM makes this really easy and I

00:14:20,540 --> 00:14:25,670
don't have to remember how to do all

00:14:22,250 --> 00:14:27,740
that stuff and that makes me happy so if

00:14:25,670 --> 00:14:32,000
I wanted to join something where I

00:14:27,740 --> 00:14:34,340
wanted to say get all the designs for

00:14:32,000 --> 00:14:36,050
sparkles I would have to join the code

00:14:34,340 --> 00:14:40,100
point of the design table together in

00:14:36,050 --> 00:14:43,250
the ORM all I have to do is run a filter

00:14:40,100 --> 00:14:45,350
where I go code point double underscore

00:14:43,250 --> 00:14:47,900
name equals sparkles okay well what's

00:14:45,350 --> 00:14:50,860
that double underscore doing this is

00:14:47,900 --> 00:14:53,720
still not magic but it's pretty close so

00:14:50,860 --> 00:14:56,860
new terminal dumping all the code that I

00:14:53,720 --> 00:15:01,880
have and then I get a list of sparkles

00:14:56,860 --> 00:15:03,410
this is a where's my notes say I'm still

00:15:01,880 --> 00:15:06,470
not sure what all these things mean I'm

00:15:03,410 --> 00:15:08,090
a beginner um we have a whole bunch of

00:15:06,470 --> 00:15:12,140
fields that are separated by double

00:15:08,090 --> 00:15:14,330
underscores that end in a lookup so back

00:15:12,140 --> 00:15:16,760
when we had all the fields on our model

00:15:14,330 --> 00:15:18,830
table which we can pull up again with

00:15:16,760 --> 00:15:21,020
get fields we saw that we had a vendor

00:15:18,830 --> 00:15:24,260
version a code point and an image for

00:15:21,020 --> 00:15:26,930
this is now design so what I can do is I

00:15:24,260 --> 00:15:29,390
can check with my other tables as well

00:15:26,930 --> 00:15:30,800
okay I've got the the name the

00:15:29,390 --> 00:15:32,870
description in the code point that's

00:15:30,800 --> 00:15:35,210
great so what I can do is I can

00:15:32,870 --> 00:15:36,529
concatenate all these fields with double

00:15:35,210 --> 00:15:38,660
underscores and I can start

00:15:36,529 --> 00:15:41,089
walking through my models if they're

00:15:38,660 --> 00:15:42,860
joined properly which is still something

00:15:41,089 --> 00:15:44,749
I have no idea how it's done but right

00:15:42,860 --> 00:15:46,100
now this is all I need to do to try to

00:15:44,749 --> 00:15:50,060
find that bug from right at the

00:15:46,100 --> 00:15:51,980
beginning of the presentation so we can

00:15:50,060 --> 00:15:54,199
connect all these things together but

00:15:51,980 --> 00:15:56,209
the documentation says it goes field

00:15:54,199 --> 00:15:58,160
field field lookup and this is because

00:15:56,209 --> 00:16:00,589
by default if you don't specify anything

00:15:58,160 --> 00:16:03,499
it's an exact lookup which makes sense

00:16:00,589 --> 00:16:05,870
and it's also really cool because if you

00:16:03,499 --> 00:16:08,329
remember back from earlier we had this

00:16:05,870 --> 00:16:11,329
slide you can see that there's a double

00:16:08,329 --> 00:16:12,800
underscore exact up there in the URL so

00:16:11,329 --> 00:16:14,029
we've been using this all along we just

00:16:12,800 --> 00:16:16,670
haven't understood what it actually

00:16:14,029 --> 00:16:18,319
meant and it's like oh my goodness it's

00:16:16,670 --> 00:16:20,029
doing the thing in the admin this must

00:16:18,319 --> 00:16:20,600
mean it works because it's using itself

00:16:20,029 --> 00:16:24,230
yay

00:16:20,600 --> 00:16:27,319
I'm on the right path so back to our

00:16:24,230 --> 00:16:28,850
terminal we can take all our models and

00:16:27,319 --> 00:16:31,129
all our fields and work out whether

00:16:28,850 --> 00:16:32,389
joins are and we can keep on going for

00:16:31,129 --> 00:16:33,860
as long as we can until we start

00:16:32,389 --> 00:16:36,829
scrolling around our terminal because

00:16:33,860 --> 00:16:39,559
that sounds like fun so we clear our

00:16:36,829 --> 00:16:41,389
terminal and this time I want to import

00:16:39,559 --> 00:16:45,170
from vendor version let's see how far we

00:16:41,389 --> 00:16:46,790
can walk along this one so I can get the

00:16:45,170 --> 00:16:49,670
fields and I can check okay we've got a

00:16:46,790 --> 00:16:51,860
name and we've got a vendor ah so this

00:16:49,670 --> 00:16:55,459
is vendor version when a version has a

00:16:51,860 --> 00:16:58,819
vendor so let's check vendor vendor has

00:16:55,459 --> 00:17:01,069
a name Ihnen and an ID and it links back

00:16:58,819 --> 00:17:04,280
to vendor version so that's cool so what

00:17:01,069 --> 00:17:06,589
we can do is we can go design objects

00:17:04,280 --> 00:17:09,289
filter and then we can go what's going

00:17:06,589 --> 00:17:11,539
to be the longest names here our vendor

00:17:09,289 --> 00:17:13,939
version double underscore vendor SS core

00:17:11,539 --> 00:17:16,939
name double underscore contains because

00:17:13,939 --> 00:17:19,189
that's a really long one Micro there you

00:17:16,939 --> 00:17:22,220
go a really really really long filter

00:17:19,189 --> 00:17:24,500
and we get a list of all the designs

00:17:22,220 --> 00:17:25,909
that have a vendor version connected to

00:17:24,500 --> 00:17:28,280
a vendor connected to a name that

00:17:25,909 --> 00:17:31,640
contains the word micro so we happen to

00:17:28,280 --> 00:17:32,840
get all the Microsoft emoji and we can

00:17:31,640 --> 00:17:34,309
do a whole lot of different field

00:17:32,840 --> 00:17:38,090
lookups here we don't just have to use

00:17:34,309 --> 00:17:40,610
contains we can use ranges and nulls and

00:17:38,090 --> 00:17:42,350
begins with and starts with and all this

00:17:40,610 --> 00:17:44,510
other kind of fun and there's really

00:17:42,350 --> 00:17:47,179
useful documentation if you want to look

00:17:44,510 --> 00:17:49,580
up our queries had field lookups which

00:17:47,179 --> 00:17:50,360
is super helpful to know the term query

00:17:49,580 --> 00:17:51,890
set the

00:17:50,360 --> 00:17:53,270
look ups because if you don't know that

00:17:51,890 --> 00:17:54,950
term you don't know what to search for

00:17:53,270 --> 00:17:56,660
in the documentation and the

00:17:54,950 --> 00:17:58,840
documentation is really useful but only

00:17:56,660 --> 00:18:01,429
when you know what to search for so

00:17:58,840 --> 00:18:04,040
here's my really long thing can I make

00:18:01,429 --> 00:18:06,740
it longer allegedly yes because I can

00:18:04,040 --> 00:18:08,890
just add another filter on to this I can

00:18:06,740 --> 00:18:12,140
go code point double underscore name

00:18:08,890 --> 00:18:14,270
ends with corn and I can get the

00:18:12,140 --> 00:18:17,450
Microsoft unicorn emoji and that's great

00:18:14,270 --> 00:18:20,179
um but so far we've been dealing with

00:18:17,450 --> 00:18:23,809
ants I want this and this and this and

00:18:20,179 --> 00:18:25,669
this but we can do other stuff we can

00:18:23,809 --> 00:18:30,919
use this wonderful thing that I learnt

00:18:25,669 --> 00:18:33,169
about 24 days ago today called Q not the

00:18:30,919 --> 00:18:36,410
race from Star Trek next generation a

00:18:33,169 --> 00:18:39,970
very good sequel and but Q as in query

00:18:36,410 --> 00:18:43,040
so what we can do is instead of having

00:18:39,970 --> 00:18:45,230
this filter with the double underscores

00:18:43,040 --> 00:18:49,190
and the keyword arguments or whatever it

00:18:45,230 --> 00:18:51,710
is what we can do is we can have a query

00:18:49,190 --> 00:18:53,120
like before so for this one we're going

00:18:51,710 --> 00:18:55,070
to be querying where the name is

00:18:53,120 --> 00:18:57,710
sparkles and the description is shining

00:18:55,070 --> 00:19:00,320
and the equivalent SQL for this would be

00:18:57,710 --> 00:19:02,030
select staff from the code point table

00:19:00,320 --> 00:19:04,400
where the name is sparkles in the

00:19:02,030 --> 00:19:06,770
description is shining we learned before

00:19:04,400 --> 00:19:09,020
that unless we have a look up what we're

00:19:06,770 --> 00:19:12,200
implying is double underscore exact and

00:19:09,020 --> 00:19:16,100
that's the exact same SQL what we can

00:19:12,200 --> 00:19:18,620
also do is we don't have to have all our

00:19:16,100 --> 00:19:20,270
filters in one go we can go filter and

00:19:18,620 --> 00:19:21,950
then filter in our query sets again

00:19:20,270 --> 00:19:23,690
because query sets can be chained

00:19:21,950 --> 00:19:25,820
together so you can run a filter on a

00:19:23,690 --> 00:19:28,160
query set and then keep going

00:19:25,820 --> 00:19:29,960
we don't have to do that though what we

00:19:28,160 --> 00:19:32,929
can do is we can wrap it up in a queue

00:19:29,960 --> 00:19:35,270
and that means something I guess I'm

00:19:32,929 --> 00:19:36,890
still new to Python I'm sure old hit an

00:19:35,270 --> 00:19:39,350
error and work out what's going on in a

00:19:36,890 --> 00:19:41,720
couple of slides so I can wrap this

00:19:39,350 --> 00:19:43,580
around this queue and wrap it around and

00:19:41,720 --> 00:19:46,070
then I can send a couple of arguments to

00:19:43,580 --> 00:19:49,520
filter and I have the same SQL happening

00:19:46,070 --> 00:19:52,610
I can also instead of using a comma use

00:19:49,520 --> 00:19:55,610
and apparently um not sure how that

00:19:52,610 --> 00:19:58,040
works but it's an end and it's still the

00:19:55,610 --> 00:20:00,650
same SQL and what I can also do is

00:19:58,040 --> 00:20:03,330
optionally wrapping queue and it still

00:20:00,650 --> 00:20:05,190
generates the same SQL

00:20:03,330 --> 00:20:06,840
and I don't have to do that what I can

00:20:05,190 --> 00:20:09,210
do is I can also do it instead of the

00:20:06,840 --> 00:20:14,100
first one being wrapped I can wrap the

00:20:09,210 --> 00:20:16,800
nut wait how come I can't wrap the

00:20:14,100 --> 00:20:18,390
second one what does this eres a syntax

00:20:16,800 --> 00:20:21,930
error positional argument Fuller's

00:20:18,390 --> 00:20:24,720
keyword oh we're in Python we have to

00:20:21,930 --> 00:20:28,610
like follow Python syntax laws that

00:20:24,720 --> 00:20:31,980
sucks okay um so for this particular one

00:20:28,610 --> 00:20:34,110
the top one is a keyword argument the

00:20:31,980 --> 00:20:35,400
bottom one is a positional argument you

00:20:34,110 --> 00:20:38,700
can't have it in that order because

00:20:35,400 --> 00:20:42,150
pythons rude like that so let's undo

00:20:38,700 --> 00:20:44,820
that change um so what we could do of

00:20:42,150 --> 00:20:47,460
course is instead of doing it this way

00:20:44,820 --> 00:20:48,780
what we could do is uh I don't want to

00:20:47,460 --> 00:20:51,360
just search for description anymore I

00:20:48,780 --> 00:20:55,020
want to search for unicorns and sparkles

00:20:51,360 --> 00:20:57,210
and oh yeah sorry Python again um you

00:20:55,020 --> 00:20:59,910
can't repeat keyword arguments because

00:20:57,210 --> 00:21:01,650
Python doesn't let you say that two

00:20:59,910 --> 00:21:02,960
things that have the same name because

00:21:01,650 --> 00:21:05,670
they're never gonna have the same name

00:21:02,960 --> 00:21:08,220
which is annoying so how am I gonna get

00:21:05,670 --> 00:21:09,960
around that well I can wrap everything

00:21:08,220 --> 00:21:13,410
up in this queue again and then what I

00:21:09,960 --> 00:21:15,420
can do is up I don't want to see both

00:21:13,410 --> 00:21:19,140
unicorns and sparkles what I want to do

00:21:15,420 --> 00:21:22,230
is see not ant but or so what I can do

00:21:19,140 --> 00:21:23,490
is I can use a pipe and that pipe it

00:21:22,230 --> 00:21:25,830
looks like an oar

00:21:23,490 --> 00:21:30,900
because you've got Anders and and pipe

00:21:25,830 --> 00:21:32,730
is or so how does that work well turns

00:21:30,900 --> 00:21:34,740
out that there's this actual magic in

00:21:32,730 --> 00:21:37,320
Python and I refuse to ever call a

00:21:34,740 --> 00:21:40,860
technology it's actually magic where you

00:21:37,320 --> 00:21:43,560
can do things like overload how

00:21:40,860 --> 00:21:44,580
operators work underneath and it's

00:21:43,560 --> 00:21:48,150
called metaprogramming

00:21:44,580 --> 00:21:50,130
and it's amazing so to start off with

00:21:48,150 --> 00:21:51,630
this pipe an ampersand that we were

00:21:50,130 --> 00:21:53,900
seeing before what we're doing here is

00:21:51,630 --> 00:21:56,700
bitwise operations quick review a

00:21:53,900 --> 00:21:58,530
bitwise operation if I declare a whole

00:21:56,700 --> 00:22:01,200
bunch of ones and zeros so once everyone

00:21:58,530 --> 00:22:02,490
0 1 0 and then I declare a whole bunch

00:22:01,200 --> 00:22:05,040
of ones and a whole bunch of zeros what

00:22:02,490 --> 00:22:08,580
I can do is a bit mask so if I ask it to

00:22:05,040 --> 00:22:11,220
show me x and y it'll only show me

00:22:08,580 --> 00:22:14,160
things where both of the numbers lining

00:22:11,220 --> 00:22:16,290
up is 1 and if I did or it's where

00:22:14,160 --> 00:22:18,060
either/or is 1

00:22:16,290 --> 00:22:20,580
so what I can do is I can use that

00:22:18,060 --> 00:22:23,490
concept and start building SQL

00:22:20,580 --> 00:22:26,340
statements like Venn diagrams where I go

00:22:23,490 --> 00:22:30,300
I want this and this or I want this or

00:22:26,340 --> 00:22:32,520
this and it's really quite clever um

00:22:30,300 --> 00:22:35,910
because we're doing these operations on

00:22:32,520 --> 00:22:37,830
query objects so what happens in the

00:22:35,910 --> 00:22:40,500
back of Django is it literally does

00:22:37,830 --> 00:22:42,840
these operations where it says I have

00:22:40,500 --> 00:22:45,210
this Curie object and this query object

00:22:42,840 --> 00:22:47,460
and because syntactical flavor I'm going

00:22:45,210 --> 00:22:50,310
to use the pipe operator and I can do

00:22:47,460 --> 00:22:52,950
that in Python because the next slide is

00:22:50,310 --> 00:22:55,530
actual raw Django code it's not scary I

00:22:52,950 --> 00:22:56,940
promise this is actual Django code

00:22:55,530 --> 00:23:02,700
that's been in there for like 10 years

00:22:56,940 --> 00:23:04,860
and was written by Australians so in the

00:23:02,700 --> 00:23:06,840
class queue we define a double

00:23:04,860 --> 00:23:09,450
underscore or double underscore or also

00:23:06,840 --> 00:23:11,760
known as dunder or method where what

00:23:09,450 --> 00:23:14,070
it's doing is if it sees to query

00:23:11,760 --> 00:23:16,100
objects it's literally overriding what

00:23:14,070 --> 00:23:18,660
happens when it sees that bitwise

00:23:16,100 --> 00:23:21,090
operator in Python which means that you

00:23:18,660 --> 00:23:22,710
can declare interesting things based on

00:23:21,090 --> 00:23:24,660
how you want your different objects to

00:23:22,710 --> 00:23:26,820
interact which means that we can

00:23:24,660 --> 00:23:28,880
overload how Python works with these

00:23:26,820 --> 00:23:32,520
particular objects and we can start

00:23:28,880 --> 00:23:34,110
making code that makes sense to a human

00:23:32,520 --> 00:23:36,780
as well as to a computer which is really

00:23:34,110 --> 00:23:38,910
really cool and it's magic and I will

00:23:36,780 --> 00:23:41,580
defend them my use of the word magic to

00:23:38,910 --> 00:23:46,740
said to define this because it is magic

00:23:41,580 --> 00:23:49,740
I come from Ruby so this is cool um so

00:23:46,740 --> 00:23:51,780
as well as ant and as well as or we can

00:23:49,740 --> 00:23:55,250
also do negation which is really useful

00:23:51,780 --> 00:23:59,010
so like before we can just do say I want

00:23:55,250 --> 00:24:01,830
things that are sparkles or not unicorns

00:23:59,010 --> 00:24:04,020
so I can put a tilde in front of my Q

00:24:01,830 --> 00:24:08,670
and I can start building these really

00:24:04,020 --> 00:24:10,830
useful complex filters without having to

00:24:08,670 --> 00:24:15,260
remember how to do inner joins which is

00:24:10,830 --> 00:24:17,940
really useful um but consider we want

00:24:15,260 --> 00:24:20,730
code points where we want to start

00:24:17,940 --> 00:24:22,470
filtering things so instead of just

00:24:20,730 --> 00:24:25,260
saying I want named unicorn named

00:24:22,470 --> 00:24:29,100
sparkles what I want is designs they

00:24:25,260 --> 00:24:30,179
contain PNG and starts with design so if

00:24:29,100 --> 00:24:31,799
I copy this in

00:24:30,179 --> 00:24:34,409
to my terminal like a good little road

00:24:31,799 --> 00:24:37,980
programmer I am I import my code point I

00:24:34,409 --> 00:24:40,320
copy in my stuff and I get a whole lot

00:24:37,980 --> 00:24:42,809
of results that seems like too many

00:24:40,320 --> 00:24:45,090
results that also seems like the results

00:24:42,809 --> 00:24:46,889
are being truncated which is a really

00:24:45,090 --> 00:24:48,960
useful feature of the ORM because

00:24:46,889 --> 00:24:51,059
allegedly somebody tried to do a select

00:24:48,960 --> 00:24:53,610
star on a million point table once and

00:24:51,059 --> 00:24:55,470
wondered why everything was breaking so

00:24:53,610 --> 00:24:58,470
it truncates it for you which is super

00:24:55,470 --> 00:24:59,669
useful um so what we can do instead of

00:24:58,470 --> 00:25:01,710
printing out all the results we can

00:24:59,669 --> 00:25:04,230
count them which is another super useful

00:25:01,710 --> 00:25:06,899
SQL thing so we can see that there are

00:25:04,230 --> 00:25:10,710
44 results okay that probably makes

00:25:06,899 --> 00:25:14,220
sense um so with this count what would

00:25:10,710 --> 00:25:17,549
be the SQL for that well what we can do

00:25:14,220 --> 00:25:20,789
is we can ask Jango what the SQL is that

00:25:17,549 --> 00:25:23,460
are just ran by importing our connection

00:25:20,789 --> 00:25:26,460
from Jango DB and then checking the

00:25:23,460 --> 00:25:28,230
queries list so like a good little road

00:25:26,460 --> 00:25:31,799
program right copy and paste this in and

00:25:28,230 --> 00:25:34,409
I can check the most recent query and I

00:25:31,799 --> 00:25:38,340
can see that there's SQL I know this

00:25:34,409 --> 00:25:40,350
it's like a UNIX system um and because I

00:25:38,340 --> 00:25:42,600
like formatted code let's throw this up

00:25:40,350 --> 00:25:44,759
and format it so what we're doing select

00:25:42,600 --> 00:25:47,639
count from table join on this other

00:25:44,759 --> 00:25:49,499
table where the IDS are the same okay

00:25:47,639 --> 00:25:51,149
that's good we're not going to have like

00:25:49,499 --> 00:25:53,779
Cartesian products that we don't want

00:25:51,149 --> 00:25:56,879
and we've got our filters which is great

00:25:53,779 --> 00:25:59,220
except when we start chaining together

00:25:56,879 --> 00:26:02,429
these filters you have to be careful

00:25:59,220 --> 00:26:05,100
because if I was to filter things and

00:26:02,429 --> 00:26:07,889
filter things and filter things what I

00:26:05,100 --> 00:26:10,289
would end up with is if I run this and

00:26:07,889 --> 00:26:12,600
check the count I get seven hundred and

00:26:10,289 --> 00:26:13,919
twelve and from my database days I know

00:26:12,600 --> 00:26:15,830
that I've done something wrong what I

00:26:13,919 --> 00:26:18,960
haven't joined stuff together properly

00:26:15,830 --> 00:26:22,110
so let's check the query and let's look

00:26:18,960 --> 00:26:23,909
what's happening here and ah I've got

00:26:22,110 --> 00:26:26,100
design in there twice and I'm not

00:26:23,909 --> 00:26:30,090
linking them together so that's useful

00:26:26,100 --> 00:26:31,919
to know so we know how to filter we know

00:26:30,090 --> 00:26:34,350
how to do ends and ORS we know how to do

00:26:31,919 --> 00:26:36,090
query sad lookups we know how to not

00:26:34,350 --> 00:26:38,609
make Python yell at us because we've got

00:26:36,090 --> 00:26:40,649
syntax errors so let's go back to the

00:26:38,609 --> 00:26:44,429
field of kale and let's go bug hunting

00:26:40,649 --> 00:26:46,139
this is where I get my laptop out so

00:26:44,429 --> 00:26:49,049
we had an issue here where we had a

00:26:46,139 --> 00:26:51,899
broken image and it looks like it's

00:26:49,049 --> 00:26:54,480
associated to whatever Twitter 1.0 is so

00:26:51,899 --> 00:26:56,879
we know that these are designs and

00:26:54,480 --> 00:26:58,549
designs have images attached so what we

00:26:56,879 --> 00:27:01,200
want to do is we want to find whatever

00:26:58,549 --> 00:27:05,039
image is attached to that particular

00:27:01,200 --> 00:27:08,399
design object so I go into my terminal I

00:27:05,039 --> 00:27:10,440
load up the shelf and I want to import

00:27:08,399 --> 00:27:11,999
well I really want to import everything

00:27:10,440 --> 00:27:13,889
so let's just import everything because

00:27:11,999 --> 00:27:16,919
import star is useful to me because I'm

00:27:13,889 --> 00:27:19,169
just trying to make this work so I want

00:27:16,919 --> 00:27:21,840
to filter by designs and I want to

00:27:19,169 --> 00:27:24,690
filter by okay our code name equal

00:27:21,840 --> 00:27:27,269
sparkles okay and then what else could I

00:27:24,690 --> 00:27:30,419
add that she saw I get a vendor version

00:27:27,269 --> 00:27:32,549
vendor the name is Twitter yeah okay

00:27:30,419 --> 00:27:35,369
cool I have two results so I want to get

00:27:32,549 --> 00:27:37,830
just one of these what I could do is I

00:27:35,369 --> 00:27:40,350
could assign that yeah okay I'll sign

00:27:37,830 --> 00:27:41,789
this to the variable D and then clear my

00:27:40,350 --> 00:27:44,999
terminal so you can see what's going on

00:27:41,789 --> 00:27:46,559
and then I've got my crew set so I could

00:27:44,999 --> 00:27:48,749
just get the first element because I'm

00:27:46,559 --> 00:27:52,139
lazy or I could do something better

00:27:48,749 --> 00:27:55,049
where I filter properly by what's going

00:27:52,139 --> 00:27:58,080
on here one point overs two point four

00:27:55,049 --> 00:27:59,970
so let's check the one point oh yeah so

00:27:58,080 --> 00:28:02,129
I've got one query set and because I

00:27:59,970 --> 00:28:04,049
know that get exists and I have one

00:28:02,129 --> 00:28:07,139
result I can change the filter forget

00:28:04,049 --> 00:28:10,350
and I can get one result great now I

00:28:07,139 --> 00:28:12,059
want to inspect this object okay I have

00:28:10,350 --> 00:28:14,399
this object and what was I doing again

00:28:12,059 --> 00:28:17,009
oh yeah let's just check the medicate

00:28:14,399 --> 00:28:19,139
fields and okay so we got the thing oh

00:28:17,009 --> 00:28:20,879
yeah it's a huh

00:28:19,139 --> 00:28:23,549
foul field that's cool wonder how that

00:28:20,879 --> 00:28:30,139
works so let's get this thing and let's

00:28:23,549 --> 00:28:30,139
check the image and oh there's a bug I

00:28:30,470 --> 00:28:37,379
should really fix that up to my talk

00:28:32,610 --> 00:28:40,350
anyway so that's the ORM that was the RM

00:28:37,379 --> 00:28:43,700
in practice so what happens if the ORM

00:28:40,350 --> 00:28:48,119
doesn't do what you want well allegedly

00:28:43,700 --> 00:28:49,830
you could use raw but you really really

00:28:48,119 --> 00:28:52,499
really really really should check what

00:28:49,830 --> 00:28:54,029
rod does and if you look at the

00:28:52,499 --> 00:28:56,279
documentation there's like all these

00:28:54,029 --> 00:28:58,770
warnings and notices and stuff before it

00:28:56,279 --> 00:29:02,370
tells you actually what happens

00:28:58,770 --> 00:29:03,809
and as far as I'm aware you really

00:29:02,370 --> 00:29:07,710
shouldn't be using that unless you have

00:29:03,809 --> 00:29:09,270
no other choice but Janko tells us this

00:29:07,710 --> 00:29:10,950
really cool stuff where I don't care

00:29:09,270 --> 00:29:13,470
whether you're running Postgres or

00:29:10,950 --> 00:29:15,720
Oracle behind the scenes if I use the RM

00:29:13,470 --> 00:29:19,350
it doesn't matter but if you start using

00:29:15,720 --> 00:29:22,650
bra your database matters but sometimes

00:29:19,350 --> 00:29:25,320
the sequel's are better like Star Trek

00:29:22,650 --> 00:29:27,690
next generation is arguably better than

00:29:25,320 --> 00:29:31,530
the original series the whole point of

00:29:27,690 --> 00:29:33,809
the ORM is to make 80% of things easier

00:29:31,530 --> 00:29:36,690
and more useful but if you have to drop

00:29:33,809 --> 00:29:39,870
down into raw SQL to get around your day

00:29:36,690 --> 00:29:42,960
to make things a little bit faster yeah

00:29:39,870 --> 00:29:46,049
do it but just consider the portability

00:29:42,960 --> 00:29:48,450
of your application outwards you can

00:29:46,049 --> 00:29:50,429
discover more about the ORM yourself

00:29:48,450 --> 00:29:51,059
I've barely scratched the surface here

00:29:50,429 --> 00:29:53,580
today

00:29:51,059 --> 00:29:55,799
there's creating objects which

00:29:53,580 --> 00:29:58,110
apparently that's the thing you have to

00:29:55,799 --> 00:30:01,110
do to be able to query objects they have

00:29:58,110 --> 00:30:03,299
to first exist allegedly different types

00:30:01,110 --> 00:30:05,309
of fields like there's file fields it

00:30:03,299 --> 00:30:07,200
does magic stuff and does things for you

00:30:05,309 --> 00:30:09,030
which is useful and also the

00:30:07,200 --> 00:30:11,160
relationships between things so we were

00:30:09,030 --> 00:30:12,840
traversing one way down you can do the

00:30:11,160 --> 00:30:15,120
other way with like many-to-many or

00:30:12,840 --> 00:30:16,919
something anyway there's a whole bunch

00:30:15,120 --> 00:30:20,100
of documentation that is super useful

00:30:16,919 --> 00:30:23,640
and you should definitely read up more

00:30:20,100 --> 00:30:25,350
and find what's useful for you um one

00:30:23,640 --> 00:30:27,210
thing before I go because I've got like

00:30:25,350 --> 00:30:30,419
less than a minute if you're going to be

00:30:27,210 --> 00:30:32,850
doing this stuff add ipython as a

00:30:30,419 --> 00:30:35,880
requirement in your project because it

00:30:32,850 --> 00:30:39,150
means you can take stuff like what I had

00:30:35,880 --> 00:30:42,630
before with the interactive console and

00:30:39,150 --> 00:30:45,809
turn it into a ipython environment which

00:30:42,630 --> 00:30:48,809
means you get auto completion which is

00:30:45,809 --> 00:30:51,660
so very helpful and it negates the use

00:30:48,809 --> 00:30:54,030
of me having to like go through meta

00:30:51,660 --> 00:30:57,559
stuff and generate all this things to do

00:30:54,030 --> 00:31:01,290
it for me this just makes it work so

00:30:57,559 --> 00:31:04,440
hopefully now you are a very capable

00:31:01,290 --> 00:31:06,540
little noisy miner and you can use your

00:31:04,440 --> 00:31:08,580
wonderfully curved beak and go get the

00:31:06,540 --> 00:31:11,620
little morsels of bugs that you have in

00:31:08,580 --> 00:31:14,690
your Jango applications and

00:31:11,620 --> 00:31:17,270
it might be a new stack to you if you're

00:31:14,690 --> 00:31:19,970
a new Django developer but if you have

00:31:17,270 --> 00:31:22,190
experience in other systems you can

00:31:19,970 --> 00:31:24,860
build from that you never start from

00:31:22,190 --> 00:31:27,740
zero I've been doing database stuff for

00:31:24,860 --> 00:31:29,600
gosh knows how long and once I realized

00:31:27,740 --> 00:31:34,700
that the ORM was just interfacing on a

00:31:29,600 --> 00:31:36,470
database it was like and it's really

00:31:34,700 --> 00:31:39,800
cool because I love to learn all this

00:31:36,470 --> 00:31:42,830
stuff plus noisy mine is really cute

00:31:39,800 --> 00:31:45,100
um and that's all I had thank you for

00:31:42,830 --> 00:31:45,100
your time

00:31:52,700 --> 00:31:58,050
just-just-just by the by LaCie have you

00:31:55,530 --> 00:32:00,030
had about ginger cotton you know I think

00:31:58,050 --> 00:32:01,290
I have I I feel like I I know that

00:32:00,030 --> 00:32:03,540
there's one here in Europe somewhere

00:32:01,290 --> 00:32:05,310
isn't there one in Australia - there is

00:32:03,540 --> 00:32:07,410
one an Australia we happen to have our

00:32:05,310 --> 00:32:09,390
call for papers open right now I think

00:32:07,410 --> 00:32:10,500
there's one in America too you know now

00:32:09,390 --> 00:32:12,330
that you mentioned and I think there is

00:32:10,500 --> 00:32:14,760
and I think that our call for papers is

00:32:12,330 --> 00:32:16,470
open right now - oh my goodness we

00:32:14,760 --> 00:32:18,270
should also bid to other pythons you

00:32:16,470 --> 00:32:20,460
should yeah thank you so much for this

00:32:18,270 --> 00:32:21,130
talk everyone let's get Katie one more

00:32:20,460 --> 00:32:28,519
round of applause

00:32:21,130 --> 00:32:28,519

YouTube URL: https://www.youtube.com/watch?v=AIke7IZdVJI


