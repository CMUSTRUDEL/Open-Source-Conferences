Title: DjangoCon 2018 - Automated spell-checking in Django projects
Publication date: 2018-05-24
Playlist: DjangoCon Europe 2018 in Heidelberg
Description: 
	https://media.ccc.de/v/hd-63-automated-spell-checking-in-django-projects



I'm aiming to show how avoid spelling errors by showing ways to implement automated spell-checking.

Nearly all Django applications have two main textual bodies that users come in touch with: First, any text in the application and its translation, second the documentation. Since both are usually written by humans, they will contain spelling errors.
This is considered harmful and can from time to time hinder the user trying to understand what to do.
Therefore, an automated spell-checking tool should be a part of any CI-cyle.

For spell-checking documentation, I will give a short demonstration on how to use the "sphinxcontrib-spelling"-tool written by Doug Hellmann, the problems we had and how we overcame them.
For spell-checking text in the application and its translations that are usually found in .po-files, I have implemented a small tool called "potypo" (name and development in progress).
I will present this tool and show challenges and problems on the way to implementing automated spell checking for .po-files.

Jakob Schnell
Captions: 
	00:00:06,460 --> 00:00:12,129
our next speaker will be Jakob schnell

00:00:09,010 --> 00:00:14,850
and he will be talking about automated

00:00:12,129 --> 00:00:14,850
spell checking

00:00:38,039 --> 00:00:51,239
alright ok please welcome Jakob hello

00:00:48,659 --> 00:00:53,789
everybody my name is Jakob some of you

00:00:51,239 --> 00:00:55,649
might know me by my nickname kuba I'm a

00:00:53,789 --> 00:00:58,769
maths and computer science student

00:00:55,649 --> 00:01:01,260
currently on an erasmus year in Milan in

00:00:58,769 --> 00:01:03,659
Italy but originally studying at the

00:01:01,260 --> 00:01:06,840
University of Heidelberg this is my

00:01:03,659 --> 00:01:09,450
first talk at any Django Khan or Python

00:01:06,840 --> 00:01:12,630
or whatsoever so I thought as an

00:01:09,450 --> 00:01:15,690
introduction it might be fair to just

00:01:12,630 --> 00:01:18,300
have a few words about why I am here

00:01:15,690 --> 00:01:22,440
and it all starts back in October last

00:01:18,300 --> 00:01:25,259
year I was sitting in a database class I

00:01:22,440 --> 00:01:28,110
think and compared to Katie's talk from

00:01:25,259 --> 00:01:31,979
earlier it was boring at least to me and

00:01:28,110 --> 00:01:34,830
so I decided to do something worthy of

00:01:31,979 --> 00:01:36,690
my time and the front of me a Raphael

00:01:34,830 --> 00:01:38,940
that has just introduced me has a

00:01:36,690 --> 00:01:40,170
project called predicts that you might

00:01:38,940 --> 00:01:42,450
know that you all bought your ticket

00:01:40,170 --> 00:01:46,379
from and so I decided to start hacking

00:01:42,450 --> 00:01:49,050
on critics and I fired up the the

00:01:46,379 --> 00:01:51,629
program and after a few seconds I

00:01:49,050 --> 00:01:54,569
discovered a typo somewhere in the code

00:01:51,629 --> 00:01:56,910
and I was like wow great cool I can just

00:01:54,569 --> 00:01:59,220
search for this wrong word and I can fix

00:01:56,910 --> 00:02:00,959
it and I can submit a PR and it will be

00:01:59,220 --> 00:02:03,360
great and I will be doing something

00:02:00,959 --> 00:02:06,239
useful and I will be doing good stuff

00:02:03,360 --> 00:02:08,239
with my time and so I did that and that

00:02:06,239 --> 00:02:10,950
worked fairly well and then I figured

00:02:08,239 --> 00:02:15,209
maybe there are more typos than just

00:02:10,950 --> 00:02:18,540
this one and so I fired up a spell

00:02:15,209 --> 00:02:20,760
checker I think I spell and spoiler

00:02:18,540 --> 00:02:22,379
alert there were more typos and so I

00:02:20,760 --> 00:02:27,540
fixed them all or all of them I could

00:02:22,379 --> 00:02:29,640
find and I asked whether maybe automated

00:02:27,540 --> 00:02:31,890
spell checking would be something that

00:02:29,640 --> 00:02:35,250
protects would like or that the jangle

00:02:31,890 --> 00:02:38,640
world could use and Rafa the answer was

00:02:35,250 --> 00:02:40,230
yes of course please do so and now you

00:02:38,640 --> 00:02:42,599
might be wondering well but I am typing

00:02:40,230 --> 00:02:44,959
my text and I'm typing good and

00:02:42,599 --> 00:02:50,700
perfectly and here are some examples of

00:02:44,959 --> 00:02:51,600
wrong words that that were fixed there

00:02:50,700 --> 00:02:54,810
are two

00:02:51,600 --> 00:02:59,400
found in that were found in the protects

00:02:54,810 --> 00:03:01,290
project and I think since all the texts

00:02:59,400 --> 00:03:03,420
that we write is written by us by humans

00:03:01,290 --> 00:03:05,430
we can all agree on the fact that it

00:03:03,420 --> 00:03:07,470
will contain errors and a friend of mine

00:03:05,430 --> 00:03:09,720
even goes as far as saying whenever you

00:03:07,470 --> 00:03:12,060
publish anything be it a book or a

00:03:09,720 --> 00:03:13,830
thesis or an article or whatsoever once

00:03:12,060 --> 00:03:15,990
it is published once you handed it in

00:03:13,830 --> 00:03:17,970
you can open your thesis your book at

00:03:15,990 --> 00:03:20,850
whatever page and the first thing you

00:03:17,970 --> 00:03:21,450
will find is a typo and this will never

00:03:20,850 --> 00:03:23,040
change

00:03:21,450 --> 00:03:27,840
oh yeah the audience agrees with me too

00:03:23,040 --> 00:03:29,970
and for most of these typos it's not too

00:03:27,840 --> 00:03:34,680
bad because most of us are just so used

00:03:29,970 --> 00:03:37,800
to reading all the time that they will

00:03:34,680 --> 00:03:39,330
just skip those typos but if you are not

00:03:37,800 --> 00:03:40,920
an English native speaker or if you have

00:03:39,330 --> 00:03:43,590
trouble with the language altogether

00:03:40,920 --> 00:03:46,310
then you might stumble across some of

00:03:43,590 --> 00:03:49,230
these titles and every now and then

00:03:46,310 --> 00:03:51,330
there might be typos that wouldn't even

00:03:49,230 --> 00:03:53,490
be well let's say could have common

00:03:51,330 --> 00:03:55,740
compliant for example I encountered a

00:03:53,490 --> 00:03:59,360
typo in the word account where the

00:03:55,740 --> 00:04:04,080
second C and the O were switched and

00:03:59,360 --> 00:04:06,570
that's why it's not on the slide and yes

00:04:04,080 --> 00:04:08,400
so obviously we need spell checking

00:04:06,570 --> 00:04:10,500
because we can't find those errors all

00:04:08,400 --> 00:04:14,370
by ourselves and some of them will slip

00:04:10,500 --> 00:04:18,900
past us and computers are just better at

00:04:14,370 --> 00:04:22,950
doing so in general there are two places

00:04:18,900 --> 00:04:26,130
where we need spell checking in a Django

00:04:22,950 --> 00:04:28,440
project one first is the documentation

00:04:26,130 --> 00:04:31,550
and the second is the code itself or the

00:04:28,440 --> 00:04:34,650
user interface that we provide and the

00:04:31,550 --> 00:04:36,450
code is the much more complicated part

00:04:34,650 --> 00:04:39,780
and I'll come to that in about five

00:04:36,450 --> 00:04:42,630
minutes I think so I first want to talk

00:04:39,780 --> 00:04:46,440
about documentation for documentation

00:04:42,630 --> 00:04:51,000
spell checking is rather easy that is

00:04:46,440 --> 00:04:53,190
because a all of your documentation is

00:04:51,000 --> 00:04:56,010
usually in one place right you have one

00:04:53,190 --> 00:04:58,020
or one folder called Docs and it

00:04:56,010 --> 00:05:00,419
contains all of your all of your

00:04:58,020 --> 00:05:03,810
documentation it's usually large text

00:05:00,419 --> 00:05:05,430
files that are easily checkable usually

00:05:03,810 --> 00:05:07,560
you only provide documentation

00:05:05,430 --> 00:05:11,820
in one language so you only need one

00:05:07,560 --> 00:05:13,710
spell checker for that language and in

00:05:11,820 --> 00:05:16,910
the Python world documentation is sorry

00:05:13,710 --> 00:05:20,820
usually done with syncs with the Sphinx

00:05:16,910 --> 00:05:21,389
project package whatever and first

00:05:20,820 --> 00:05:23,729
things

00:05:21,389 --> 00:05:26,940
fortunately spell checking already does

00:05:23,729 --> 00:05:30,150
exist and it's a package called things

00:05:26,940 --> 00:05:31,770
contrib blood spelling and if the usage

00:05:30,150 --> 00:05:33,570
is it was written by doc Hellman the

00:05:31,770 --> 00:05:35,490
usage is quite simple you fire up

00:05:33,570 --> 00:05:38,870
strings - build and with the directive

00:05:35,490 --> 00:05:42,060
alright so I can look up here not there

00:05:38,870 --> 00:05:43,229
you fired up vias things - built - be

00:05:42,060 --> 00:05:45,870
spelling then you put all your other

00:05:43,229 --> 00:05:50,340
other options that you need and then you

00:05:45,870 --> 00:05:52,860
specify in what folder your your output

00:05:50,340 --> 00:05:54,960
should should be and usually that will

00:05:52,860 --> 00:05:57,330
be something like underscore build slash

00:05:54,960 --> 00:05:59,280
spelling the requirements are fairly

00:05:57,330 --> 00:06:01,410
easy that you can just install things

00:05:59,280 --> 00:06:02,940
come from - spelling Avaya pip and it

00:06:01,410 --> 00:06:06,660
needs PI enchant which I will talk about

00:06:02,940 --> 00:06:08,280
in a few minutes so those are readily

00:06:06,660 --> 00:06:10,800
available you can just add those two

00:06:08,280 --> 00:06:13,530
lines to your requirements that txt file

00:06:10,800 --> 00:06:16,590
or whatever if you are using Travis you

00:06:13,530 --> 00:06:20,310
can easily implement those things build

00:06:16,590 --> 00:06:22,919
thingy by just adding the enchant

00:06:20,310 --> 00:06:26,820
package that is needed for pi enchant in

00:06:22,919 --> 00:06:31,020
your Travis setup and you can generally

00:06:26,820 --> 00:06:33,500
easily integrate it into your CI by just

00:06:31,020 --> 00:06:36,330
checking whether after the build is done

00:06:33,500 --> 00:06:37,919
the file output the txt in the directory

00:06:36,330 --> 00:06:40,260
underscore build slash spelling does

00:06:37,919 --> 00:06:42,690
exist and if it does then you have some

00:06:40,260 --> 00:06:44,130
errors and you should go fix them and if

00:06:42,690 --> 00:06:47,250
it does not then everything is fine and

00:06:44,130 --> 00:06:49,440
you can just move on so this is this is

00:06:47,250 --> 00:06:52,440
fairly straightforward this is nice it

00:06:49,440 --> 00:06:54,990
works just fine it has been working for

00:06:52,440 --> 00:06:59,280
projects for I don't know let's say four

00:06:54,990 --> 00:07:00,780
or five months now and it's great it

00:06:59,280 --> 00:07:03,780
needs a bit of configuration of course

00:07:00,780 --> 00:07:07,320
first of all your things config income

00:07:03,780 --> 00:07:09,330
stop I need to have strings country but

00:07:07,320 --> 00:07:12,030
spelling as an extension then you should

00:07:09,330 --> 00:07:14,969
specify a spelling language which I

00:07:12,030 --> 00:07:17,219
guess will be en underscore US for most

00:07:14,969 --> 00:07:19,300
of our applications since your

00:07:17,219 --> 00:07:21,850
application will probably contain

00:07:19,300 --> 00:07:24,310
some words that are valid for your

00:07:21,850 --> 00:07:26,410
application but not for the English

00:07:24,310 --> 00:07:28,480
language in general for example in the

00:07:26,410 --> 00:07:30,730
projects project this is projects as a

00:07:28,480 --> 00:07:32,440
word itself it will obviously come up in

00:07:30,730 --> 00:07:34,300
the documentation but it is not a word

00:07:32,440 --> 00:07:39,250
to be found in an English dictionary I

00:07:34,300 --> 00:07:41,500
think you you need a so called word list

00:07:39,250 --> 00:07:45,520
that just lists all these words that are

00:07:41,500 --> 00:07:47,260
not found anywhere in in a dictionary

00:07:45,520 --> 00:07:49,510
but in your documentation and that are

00:07:47,260 --> 00:07:52,960
correctly spelled and you can just

00:07:49,510 --> 00:07:54,430
specify a word list via the spelling

00:07:52,960 --> 00:07:57,310
underscored underscore list underscore

00:07:54,430 --> 00:07:58,870
file name directive and if you want you

00:07:57,310 --> 00:08:02,740
can ask the strings country blood

00:07:58,870 --> 00:08:04,810
spelling to show suggestions for things

00:08:02,740 --> 00:08:06,760
that you misspelled which makes it even

00:08:04,810 --> 00:08:10,500
easier for you to fix all those

00:08:06,760 --> 00:08:19,210
Spelling's and this is easy and nice and

00:08:10,500 --> 00:08:23,140
works great for code everything gets a

00:08:19,210 --> 00:08:25,840
little bit more complicated this is

00:08:23,140 --> 00:08:27,580
because in general wherever you interact

00:08:25,840 --> 00:08:28,300
the second part where you interact with

00:08:27,580 --> 00:08:30,190
your users

00:08:28,300 --> 00:08:32,410
apart from documentation or manuals or

00:08:30,190 --> 00:08:36,610
handbooks or whatsoever is your user

00:08:32,410 --> 00:08:39,130
interface either usually in in some kind

00:08:36,610 --> 00:08:42,790
of graphical user interface or text user

00:08:39,130 --> 00:08:45,880
interface and actually most duis contain

00:08:42,790 --> 00:08:47,530
a lot of text and if you want to fix all

00:08:45,880 --> 00:08:50,230
the errors that are there then you would

00:08:47,530 --> 00:08:52,200
have to parse Python code you would have

00:08:50,230 --> 00:08:55,570
to parse HTML code you'd have to pooris

00:08:52,200 --> 00:08:57,730
CSS probably and extract all the strings

00:08:55,570 --> 00:08:59,290
and then it's unclear what strings

00:08:57,730 --> 00:09:02,680
should be translated and watching

00:08:59,290 --> 00:09:04,420
strings shouldn't be translated and to

00:09:02,680 --> 00:09:07,810
be fair I have no clue on how you would

00:09:04,420 --> 00:09:09,940
do this but there is one thing that

00:09:07,810 --> 00:09:12,370
makes it very very easy for us as a

00:09:09,940 --> 00:09:15,510
developer to indeed check all those

00:09:12,370 --> 00:09:18,130
strings and that thing is translation

00:09:15,510 --> 00:09:20,590
once your project scaled beyond a

00:09:18,130 --> 00:09:22,960
certain point you probably want to

00:09:20,590 --> 00:09:25,480
translate it in another language for

00:09:22,960 --> 00:09:29,590
example for myself I am German so

00:09:25,480 --> 00:09:31,450
English is not my my mother tongue so I

00:09:29,590 --> 00:09:32,950
would probably develop my application in

00:09:31,450 --> 00:09:34,300
English since it should be

00:09:32,950 --> 00:09:36,330
there's a little more than just the

00:09:34,300 --> 00:09:40,180
German and german-speaking population

00:09:36,330 --> 00:09:42,400
but I would probably want to have a

00:09:40,180 --> 00:09:44,710
German translation because it is easier

00:09:42,400 --> 00:09:47,740
for me and for my probably for my use

00:09:44,710 --> 00:09:49,720
cases to work with the product it is

00:09:47,740 --> 00:09:52,660
easier for me to sell it to other people

00:09:49,720 --> 00:09:55,090
and so I want that translation even if

00:09:52,660 --> 00:09:56,290
you are an English native speaker then

00:09:55,090 --> 00:09:58,390
you might still want translation because

00:09:56,290 --> 00:09:59,740
you want to sell your product to other

00:09:58,390 --> 00:10:01,330
people you might want to translate it

00:09:59,740 --> 00:10:03,600
into Spanish which is a which is a

00:10:01,330 --> 00:10:06,340
language that many many people speak and

00:10:03,600 --> 00:10:10,780
once we have translation it makes it

00:10:06,340 --> 00:10:13,660
quite easy for us to automate our spell

00:10:10,780 --> 00:10:16,410
checking because translation gathers all

00:10:13,660 --> 00:10:18,820
those strings and there are there is a a

00:10:16,410 --> 00:10:23,260
system that does this for us that I will

00:10:18,820 --> 00:10:24,880
present in a minute and since we now

00:10:23,260 --> 00:10:27,670
have all of our strings gathered in one

00:10:24,880 --> 00:10:31,720
place we can check them for spelling

00:10:27,670 --> 00:10:33,490
errors rather easily and basically what

00:10:31,720 --> 00:10:36,640
the project I want to present to you

00:10:33,490 --> 00:10:38,410
today is is it combines the pure library

00:10:36,640 --> 00:10:41,410
for translation and Pancham for spell

00:10:38,410 --> 00:10:45,040
checking into one program called PO

00:10:41,410 --> 00:10:46,330
typos and of course it's not just those

00:10:45,040 --> 00:10:49,180
two components but it's also a lot of

00:10:46,330 --> 00:10:51,670
sweat and tears and work and glue code

00:10:49,180 --> 00:10:53,290
wrapped around stuff to bring this all

00:10:51,670 --> 00:10:55,210
together so let's talk about the two

00:10:53,290 --> 00:10:59,220
components that go together

00:10:55,210 --> 00:11:01,200
the first is get text get text is a

00:10:59,220 --> 00:11:05,550
localization and internationalization

00:11:01,200 --> 00:11:07,900
system that is I think the standard for

00:11:05,550 --> 00:11:10,660
translation for internationalization for

00:11:07,900 --> 00:11:16,150
localization of things that handle text

00:11:10,660 --> 00:11:20,520
and it is based on so called dot peel

00:11:16,150 --> 00:11:23,680
files this is an example of such a file

00:11:20,520 --> 00:11:25,120
it has some metadata in the top like the

00:11:23,680 --> 00:11:28,300
creation date the date of the last

00:11:25,120 --> 00:11:31,060
revision whoever was the last translator

00:11:28,300 --> 00:11:33,520
and most importantly what language we

00:11:31,060 --> 00:11:35,740
are translating into in a language tag

00:11:33,520 --> 00:11:39,040
that is written up there and then some

00:11:35,740 --> 00:11:41,380
more metadata on the top and then it has

00:11:39,040 --> 00:11:43,230
a bunch of entries that all basically

00:11:41,380 --> 00:11:46,630
look like as well as three lines here

00:11:43,230 --> 00:11:50,050
the first is word where does this

00:11:46,630 --> 00:11:53,310
text appear in my project for example in

00:11:50,050 --> 00:11:56,410
this sample Pio file an appeal file the

00:11:53,310 --> 00:11:58,630
first message would appear in the file

00:11:56,410 --> 00:12:04,510
jungak on slash talk slash introduc I

00:11:58,630 --> 00:12:06,760
dot PI in line 1 and every entry has a

00:12:04,510 --> 00:12:09,670
message ID that is the string that is

00:12:06,760 --> 00:12:11,440
there in your code which would be hello

00:12:09,670 --> 00:12:13,990
Django Khan I am so happy to be here I

00:12:11,440 --> 00:12:16,300
truly am and the second would be the

00:12:13,990 --> 00:12:18,430
message string which is the translation

00:12:16,300 --> 00:12:21,430
of that code into the language that is

00:12:18,430 --> 00:12:24,460
given above and the usage of this system

00:12:21,430 --> 00:12:27,400
in general is fairly simple as well you

00:12:24,460 --> 00:12:29,320
can just import Piggott text and you get

00:12:27,400 --> 00:12:31,900
text from Django doc utils dot

00:12:29,320 --> 00:12:35,110
translation not t9 and but otherwise it

00:12:31,900 --> 00:12:37,600
wouldn't fit and you would for example

00:12:35,110 --> 00:12:40,780
have the the two statements print

00:12:37,600 --> 00:12:44,140
underscore open brackets my name is name

00:12:40,780 --> 00:12:45,760
closing brackets and the underscore is

00:12:44,140 --> 00:12:47,860
then the call to you get text and you

00:12:45,760 --> 00:12:50,290
would have for example a call like print

00:12:47,860 --> 00:12:54,520
bigger text sorbic sizes venti

00:12:50,290 --> 00:12:56,890
and if you now let get text do its thing

00:12:54,520 --> 00:12:58,870
on the files and gather all those

00:12:56,890 --> 00:13:01,390
message IDs for you then this would

00:12:58,870 --> 00:13:03,910
render as something like the following

00:13:01,390 --> 00:13:05,500
dot Pio file you see we have the file

00:13:03,910 --> 00:13:07,720
Django come slash talk slash prototype

00:13:05,500 --> 00:13:10,390
it appeared at py and in the third line

00:13:07,720 --> 00:13:14,800
we have the my name is name in curly

00:13:10,390 --> 00:13:16,840
brackets message ID and the comment that

00:13:14,800 --> 00:13:18,700
we gave before this which is leave name

00:13:16,840 --> 00:13:21,870
as is the code will handle it gets

00:13:18,700 --> 00:13:24,790
automatically drawn into the doppio file

00:13:21,870 --> 00:13:28,330
it adds that this is the python brace

00:13:24,790 --> 00:13:30,250
format which is a thing that tells get

00:13:28,330 --> 00:13:32,020
text that this is a special or existing

00:13:30,250 --> 00:13:33,850
in curly brackets a special it shouldn't

00:13:32,020 --> 00:13:35,650
handle this and you can add a message

00:13:33,850 --> 00:13:37,030
string or a translation for this in

00:13:35,650 --> 00:13:41,230
german this would be hi sir

00:13:37,030 --> 00:13:44,710
name and what the PG a-- tex thing does

00:13:41,230 --> 00:13:48,370
is the first string is a context for

00:13:44,710 --> 00:13:50,800
your application so usually a translator

00:13:48,370 --> 00:13:52,030
wouldn't wouldn't i don't i don't think

00:13:50,800 --> 00:13:53,860
you would be able to handle the word

00:13:52,030 --> 00:13:55,780
twenty but once you add the context oh

00:13:53,860 --> 00:13:57,970
it's about starbucks sizes and then of

00:13:55,780 --> 00:13:59,920
course the translation or the meaning is

00:13:57,970 --> 00:14:04,629
large and it translates to go

00:13:59,920 --> 00:14:06,790
in Germany so this is a fairly easy or

00:14:04,629 --> 00:14:09,939
fairly very simple to to handle we can

00:14:06,790 --> 00:14:12,220
use the appeal library to extract the

00:14:09,939 --> 00:14:14,199
message IDs and the message strings and

00:14:12,220 --> 00:14:15,970
then we can check them separately for

00:14:14,199 --> 00:14:19,809
errors and since we have a base language

00:14:15,970 --> 00:14:22,089
given we know what our message ID IDs

00:14:19,809 --> 00:14:24,549
language is and since we have a language

00:14:22,089 --> 00:14:27,279
tagging our doppio file we know what the

00:14:24,549 --> 00:14:30,609
message string languages and we can

00:14:27,279 --> 00:14:33,720
check for errors in both of these in

00:14:30,609 --> 00:14:37,269
both of these languages quite easily the

00:14:33,720 --> 00:14:40,119
second part that goes into PO typos is a

00:14:37,269 --> 00:14:41,889
pion chant and if you're working with

00:14:40,119 --> 00:14:43,859
spell checking then you will probably

00:14:41,889 --> 00:14:46,359
have encountered some of those words and

00:14:43,859 --> 00:14:49,509
I will try to give a short overview of

00:14:46,359 --> 00:14:51,249
what they are and it all starts with I

00:14:49,509 --> 00:14:54,279
spell which is a spell checker that is

00:14:51,249 --> 00:14:58,299
really old it was written in 1971 if I'm

00:14:54,279 --> 00:15:00,429
not mistaken originally for the English

00:14:58,299 --> 00:15:03,699
language it works quite well even today

00:15:00,429 --> 00:15:07,600
it is sort of the de facto standard but

00:15:03,699 --> 00:15:09,699
Along Came utf-8 and with that well I

00:15:07,600 --> 00:15:14,679
spell wasn't really able to handle that

00:15:09,699 --> 00:15:16,569
so they so a spell was created and to

00:15:14,679 --> 00:15:18,360
this day I think I spell is the best

00:15:16,569 --> 00:15:21,160
spell checker for the English language

00:15:18,360 --> 00:15:23,559
when the OpenOffice office project came

00:15:21,160 --> 00:15:26,049
along they wrote they they implemented

00:15:23,559 --> 00:15:28,899
their own spell checker my spell as part

00:15:26,049 --> 00:15:31,360
of their a B word word processor and

00:15:28,899 --> 00:15:34,379
that has work that has replaced a spell

00:15:31,360 --> 00:15:37,239
as a spell checker in OpenOffice and

00:15:34,379 --> 00:15:40,989
later hum spell was developed originally

00:15:37,239 --> 00:15:43,569
for the Hungarian language and it has by

00:15:40,989 --> 00:15:47,169
now replaced my spell as a spell checker

00:15:43,569 --> 00:15:48,549
and from my point of view a spell is the

00:15:47,169 --> 00:15:50,889
spell checker that you want if you a

00:15:48,549 --> 00:15:52,629
spell check English text and a hung

00:15:50,889 --> 00:15:56,289
spell is the spell checker that you want

00:15:52,629 --> 00:15:58,749
to use whenever you would check other

00:15:56,289 --> 00:16:00,970
European languages and for non or

00:15:58,749 --> 00:16:02,559
European languages I'm very sorry but I

00:16:00,970 --> 00:16:08,110
have no idea I don't encounter them

00:16:02,559 --> 00:16:10,209
frequently in general this year there

00:16:08,110 --> 00:16:12,519
was this massive spell checkers produces

00:16:10,209 --> 00:16:13,360
kind of a problem because we would have

00:16:12,519 --> 00:16:15,040
to implement

00:16:13,360 --> 00:16:17,260
all or we would have to handle them all

00:16:15,040 --> 00:16:19,029
and they all work sort of the same

00:16:17,260 --> 00:16:20,980
because they all take text and then they

00:16:19,029 --> 00:16:23,170
tell you what is wrong in the text but

00:16:20,980 --> 00:16:26,560
they also all works sort of differently

00:16:23,170 --> 00:16:29,589
and that is why the enchant project

00:16:26,560 --> 00:16:33,870
exists the lib enchant is a library that

00:16:29,589 --> 00:16:37,240
wraps all of those spell checkers and

00:16:33,870 --> 00:16:40,000
provides you as a developer and API with

00:16:37,240 --> 00:16:41,440
which you can easily check all the

00:16:40,000 --> 00:16:43,300
things and it handles all the

00:16:41,440 --> 00:16:45,130
specifications of the spell checkers for

00:16:43,300 --> 00:16:48,279
you and even if they don't implement

00:16:45,130 --> 00:16:51,010
some functionality but others do enchant

00:16:48,279 --> 00:16:53,140
will try to emulate the functionality

00:16:51,010 --> 00:16:57,640
that other spell checkers have for you

00:16:53,140 --> 00:17:00,100
and it is very convenient as a developer

00:16:57,640 --> 00:17:02,640
to just have an 1:1 framework that you

00:17:00,100 --> 00:17:04,990
need to know when you don't need to

00:17:02,640 --> 00:17:08,559
interface with a spell or enhance Bell

00:17:04,990 --> 00:17:11,079
or finish spell checkers or H spell for

00:17:08,559 --> 00:17:12,669
the Hebrew language or whatnot there is

00:17:11,079 --> 00:17:13,959
a list on Wikipedia go look it up it's

00:17:12,669 --> 00:17:19,150
huge

00:17:13,959 --> 00:17:21,480
and there exists a pion chant written by

00:17:19,150 --> 00:17:25,089
Ryan Kelly which is currently

00:17:21,480 --> 00:17:27,819
unfortunately unmaintained which wraps

00:17:25,089 --> 00:17:30,460
the live enchant and gives you Python

00:17:27,819 --> 00:17:35,500
bindings so it's quite nice to interface

00:17:30,460 --> 00:17:39,130
with pan shot alright these are the two

00:17:35,500 --> 00:17:42,730
main components that go into a prototype

00:17:39,130 --> 00:17:45,130
oh and I will now talk about how you

00:17:42,730 --> 00:17:48,190
would use a prototype o in your project

00:17:45,130 --> 00:17:50,650
and how you would set this up but first

00:17:48,190 --> 00:17:52,830
I will have a short drink with some

00:17:50,650 --> 00:17:52,830
water

00:18:00,140 --> 00:18:03,349
[Music]

00:18:07,080 --> 00:18:15,020
yes

00:18:09,500 --> 00:18:18,049
alright the usage is the usage of Po Tai

00:18:15,020 --> 00:18:21,580
Po is fairly simple you just fire up a

00:18:18,049 --> 00:18:24,470
PO typo in your directory where your

00:18:21,580 --> 00:18:26,330
setup but CFG lives I will talk about

00:18:24,470 --> 00:18:28,460
this in a second

00:18:26,330 --> 00:18:31,429
the requirements are fairly simple

00:18:28,460 --> 00:18:35,780
potahto itself is install via pip

00:18:31,429 --> 00:18:38,870
install prototype oh and you of course

00:18:35,780 --> 00:18:44,120
need a PI enchant and maybe the P

00:18:38,870 --> 00:18:45,830
library as a as requirements for PO typo

00:18:44,120 --> 00:18:48,700
but if you use translation you have the

00:18:45,830 --> 00:18:53,630
Pope of APO library installed anyways

00:18:48,700 --> 00:18:56,390
you will then have to have packages for

00:18:53,630 --> 00:18:59,600
every language that you want to check

00:18:56,390 --> 00:19:01,100
your spelling in so for a German and

00:18:59,600 --> 00:19:04,130
English project you would install

00:19:01,100 --> 00:19:06,049
something like a spell - en for English

00:19:04,130 --> 00:19:07,789
dictionaries for a spell and you

00:19:06,049 --> 00:19:10,520
wouldn't saw something like my spell - D

00:19:07,789 --> 00:19:11,750
- D for dictionaries for the German

00:19:10,520 --> 00:19:13,340
language or actually you would install

00:19:11,750 --> 00:19:15,440
an spell but I haven't checked whether

00:19:13,340 --> 00:19:19,520
hunt spell is as good as my spell it

00:19:15,440 --> 00:19:22,520
should be but I don't know so again it

00:19:19,520 --> 00:19:28,100
is fairly easy it is fairly easy to use

00:19:22,520 --> 00:19:31,429
and the configuration is compliant with

00:19:28,100 --> 00:19:33,559
the setup dot CFG file format so you

00:19:31,429 --> 00:19:35,240
have one one part where you configure

00:19:33,559 --> 00:19:37,130
prototype oh and your setup the CFG

00:19:35,240 --> 00:19:40,640
where you also configure if like 8 and

00:19:37,130 --> 00:19:42,710
other Django and Python thingies and you

00:19:40,640 --> 00:19:44,990
first of course specify a default

00:19:42,710 --> 00:19:48,530
language which is the language that

00:19:44,990 --> 00:19:49,730
everything will be translated from so

00:19:48,530 --> 00:19:54,650
it's basically the language of your

00:19:49,730 --> 00:19:57,650
message IDs in your dot Pio file then

00:19:54,650 --> 00:19:59,750
you specify where your local where your

00:19:57,650 --> 00:20:02,750
dot peel files live usually they will

00:19:59,750 --> 00:20:07,880
live in a local directory like jungle -

00:20:02,750 --> 00:20:10,870
project slash locale or somewhere and Po

00:20:07,880 --> 00:20:15,190
Tai Po handles the finding of all those

00:20:10,870 --> 00:20:18,110
dot Pio files by itself

00:20:15,190 --> 00:20:22,290
currently it just assumes that you

00:20:18,110 --> 00:20:23,550
follow the structure that is a given

00:20:22,290 --> 00:20:27,240
in the left that I will explain in a

00:20:23,550 --> 00:20:30,630
second but it may add some magic to find

00:20:27,240 --> 00:20:32,940
your dot P Oh files automatically then

00:20:30,630 --> 00:20:37,020
of course you can specify languages for

00:20:32,940 --> 00:20:39,450
which you do not want a PO typo to to

00:20:37,020 --> 00:20:41,250
fail or to report any errors for example

00:20:39,450 --> 00:20:43,650
if you are just in the process of

00:20:41,250 --> 00:20:46,410
translating your application into Danish

00:20:43,650 --> 00:20:50,100
then you might of course want PO typos

00:20:46,410 --> 00:20:52,050
to report what errors there are in the

00:20:50,100 --> 00:20:55,440
translation into Danish but you do not

00:20:52,050 --> 00:20:57,180
want these errors to to break your

00:20:55,440 --> 00:20:59,400
continuous integration process or to

00:20:57,180 --> 00:21:02,490
break your Travis bill and this is why

00:20:59,400 --> 00:21:05,820
the no fail directive exists and then of

00:21:02,490 --> 00:21:07,290
course as before we need a word list for

00:21:05,820 --> 00:21:08,970
words that are present in our

00:21:07,290 --> 00:21:12,330
application that are not present in an

00:21:08,970 --> 00:21:15,000
English dictionary and do you have

00:21:12,330 --> 00:21:17,220
basically two ways of handling these of

00:21:15,000 --> 00:21:19,530
implementing this the first is you can

00:21:17,220 --> 00:21:22,290
put them all in a word list directory if

00:21:19,530 --> 00:21:24,450
you do so you should specify the WL

00:21:22,290 --> 00:21:27,090
underscore doer variable and you should

00:21:24,450 --> 00:21:30,090
give the directory that your word list

00:21:27,090 --> 00:21:32,910
live in and if you have that then they

00:21:30,090 --> 00:21:35,250
should be named language tag dot txt

00:21:32,910 --> 00:21:38,250
which is the example on the right here

00:21:35,250 --> 00:21:40,470
you would have an in your Django project

00:21:38,250 --> 00:21:42,030
you would have a folder word list and

00:21:40,470 --> 00:21:45,000
then it for every language you would

00:21:42,030 --> 00:21:47,340
have a file data.txt and dot txt and so

00:21:45,000 --> 00:21:49,830
on and so forth if you don't like this

00:21:47,340 --> 00:21:53,460
then you can also put them in various

00:21:49,830 --> 00:21:55,500
places in the local directory and

00:21:53,460 --> 00:21:57,630
usually in your local directory you have

00:21:55,500 --> 00:21:59,520
one directory for every language that

00:21:57,630 --> 00:22:01,440
you're translating into one directory

00:21:59,520 --> 00:22:05,280
for Danish one for a directory for

00:22:01,440 --> 00:22:08,640
German and so on and so forth and in

00:22:05,280 --> 00:22:10,290
those directories you have directory LC

00:22:08,640 --> 00:22:10,860
underscore messages and in that

00:22:10,290 --> 00:22:13,800
directory

00:22:10,860 --> 00:22:16,410
live your doppio files and you can just

00:22:13,800 --> 00:22:20,100
put your word list dot txt in this case

00:22:16,410 --> 00:22:22,110
called word list dot txt in this LC

00:22:20,100 --> 00:22:24,240
messages folder or in the folder above

00:22:22,110 --> 00:22:27,120
in the folder for German or for Danish

00:22:24,240 --> 00:22:29,550
or for whatsoever and for your base

00:22:27,120 --> 00:22:31,230
language for your default language you

00:22:29,550 --> 00:22:35,830
would just put a file called word list

00:22:31,230 --> 00:22:38,830
dot txt into your into your local folder

00:22:35,830 --> 00:22:40,779
those are the two ways that word lists

00:22:38,830 --> 00:22:44,250
are currently handled if you have any

00:22:40,779 --> 00:22:46,929
other ideas or if you think wow this is

00:22:44,250 --> 00:22:49,120
not as nice as I wanted I want this

00:22:46,929 --> 00:22:50,409
another way please come talk to me and

00:22:49,120 --> 00:22:54,820
we can figure something out

00:22:50,409 --> 00:22:57,570
but for now this works quite well now

00:22:54,820 --> 00:23:00,100
there are a few exceptions to simply

00:22:57,570 --> 00:23:03,490
using word list or to just a spell

00:23:00,100 --> 00:23:06,399
checking and the first are what I call

00:23:03,490 --> 00:23:09,909
edge case words and these are words that

00:23:06,399 --> 00:23:14,559
contain punctuation or that contain a

00:23:09,909 --> 00:23:16,960
mix of numbers and letters this is

00:23:14,559 --> 00:23:19,899
because of the way that a pine chant

00:23:16,960 --> 00:23:22,059
works it basically splits your text by

00:23:19,899 --> 00:23:25,750
white space and then strips punctuation

00:23:22,059 --> 00:23:28,809
from your text and so the word add-ons

00:23:25,750 --> 00:23:33,429
would be split into a part ad and a part

00:23:28,809 --> 00:23:37,330
ons and well AD is an English word ons

00:23:33,429 --> 00:23:41,250
is not or not really and it would report

00:23:37,330 --> 00:23:43,809
an error for that or for example for the

00:23:41,250 --> 00:23:45,940
for translate that pretty easily you it

00:23:43,809 --> 00:23:49,450
would report an error because it would

00:23:45,940 --> 00:23:52,059
split it into translate pre takes any

00:23:49,450 --> 00:23:53,529
you and it probably won't be able to

00:23:52,059 --> 00:23:55,450
handle those and so all those words that

00:23:53,529 --> 00:23:57,700
contain punctuation all the words that

00:23:55,450 --> 00:24:00,789
contain a mix of numbers and letters

00:23:57,700 --> 00:24:03,909
like for example 214 which is a part of

00:24:00,789 --> 00:24:08,380
an address I think you can specify them

00:24:03,909 --> 00:24:12,220
and then it will just escape those words

00:24:08,380 --> 00:24:13,809
across all of your text and you would

00:24:12,220 --> 00:24:16,450
not want to add them to your word list

00:24:13,809 --> 00:24:18,279
because again they are not the the part

00:24:16,450 --> 00:24:21,190
the single parts are not really words

00:24:18,279 --> 00:24:23,049
empty 940 is not really an English word

00:24:21,190 --> 00:24:27,130
so you would not want it in here in your

00:24:23,049 --> 00:24:28,000
English word list but it's correct it

00:24:27,130 --> 00:24:30,220
should be spelled that way

00:24:28,000 --> 00:24:33,220
and so we just tell a pro title please

00:24:30,220 --> 00:24:37,299
skip this word and the next thing that

00:24:33,220 --> 00:24:40,899
is somewhat different is what I called

00:24:37,299 --> 00:24:42,850
phrases and the phrase is something that

00:24:40,899 --> 00:24:45,130
is present in your text although it

00:24:42,850 --> 00:24:47,649
doesn't technically belong for example

00:24:45,130 --> 00:24:49,630
ticketing powered by is a text that

00:24:47,649 --> 00:24:50,920
might be used in a German application

00:24:49,630 --> 00:24:53,070
and German people probably would

00:24:50,920 --> 00:24:55,810
understand it because the ticket in

00:24:53,070 --> 00:24:58,360
English is a ticket in German so

00:24:55,810 --> 00:25:00,580
ticketing works and powered by it will

00:24:58,360 --> 00:25:03,040
buy and the German will buy our car with

00:25:00,580 --> 00:25:06,610
quite similar and also powered would be

00:25:03,040 --> 00:25:08,770
understandable so you can you can use

00:25:06,610 --> 00:25:11,980
the phrase ticketing powered by in a

00:25:08,770 --> 00:25:13,600
German in a German text but neither

00:25:11,980 --> 00:25:16,150
we're ticketing nor the word powered nor

00:25:13,600 --> 00:25:17,740
the word by our German words so you have

00:25:16,150 --> 00:25:20,770
to you would have to put them in your

00:25:17,740 --> 00:25:23,860
word list if you do not want them to pop

00:25:20,770 --> 00:25:25,900
up as errors which is bad because by

00:25:23,860 --> 00:25:29,350
might be a misspelling of the German

00:25:25,900 --> 00:25:30,760
word by which is written bei because you

00:25:29,350 --> 00:25:33,520
are typing English and German parallel

00:25:30,760 --> 00:25:35,260
and so you want this to be an error but

00:25:33,520 --> 00:25:39,400
you do not want the phrase ticketing

00:25:35,260 --> 00:25:44,680
powered by by itself to be an error so

00:25:39,400 --> 00:25:49,210
this is also handled by phrases those

00:25:44,680 --> 00:25:52,150
are the two the two main things that you

00:25:49,210 --> 00:25:54,460
have to filter out when you are checking

00:25:52,150 --> 00:25:56,710
for your code if you encounter any other

00:25:54,460 --> 00:25:59,050
things where another educate words nor

00:25:56,710 --> 00:26:00,520
phrases are enough for you to spellcheck

00:25:59,050 --> 00:26:03,460
your application in the way that you

00:26:00,520 --> 00:26:06,310
want to I'm very happy to to see more

00:26:03,460 --> 00:26:08,940
edge cases and to find a way to work

00:26:06,310 --> 00:26:14,950
around them and then last but not least

00:26:08,940 --> 00:26:17,560
you might have some HTML code in your in

00:26:14,950 --> 00:26:19,660
your code somewhere that will be chunked

00:26:17,560 --> 00:26:21,130
out by an HTML chunker which is provided

00:26:19,660 --> 00:26:23,590
by near the enchant project and then you

00:26:21,130 --> 00:26:25,540
have some filters that filter of a

00:26:23,590 --> 00:26:28,720
Python brace format from before or that

00:26:25,540 --> 00:26:32,470
filter URLs or that filter HTML from

00:26:28,720 --> 00:26:35,770
from your code and those are are fairly

00:26:32,470 --> 00:26:38,500
easy to use you might write your own it

00:26:35,770 --> 00:26:42,240
is quite nice and this is the complete

00:26:38,500 --> 00:26:47,140
feature set of power typos to this point

00:26:42,240 --> 00:26:49,330
the project is is not that old it's

00:26:47,140 --> 00:26:53,530
quite new it's still working project

00:26:49,330 --> 00:26:55,480
work in progress but it is already used

00:26:53,530 --> 00:26:57,550
in one application which is pre takes

00:26:55,480 --> 00:26:59,140
one's Rafael is done organizing this

00:26:57,550 --> 00:27:01,120
conference and gets around merging pull

00:26:59,140 --> 00:27:02,790
requests which I totally cannot blame

00:27:01,120 --> 00:27:05,559
him for

00:27:02,790 --> 00:27:07,210
if you have any wishes on features that

00:27:05,559 --> 00:27:09,460
you think you might use if you want to

00:27:07,210 --> 00:27:11,530
use this project you are very welcome to

00:27:09,460 --> 00:27:14,200
open issues and we can discuss about it

00:27:11,530 --> 00:27:16,750
if you think oh wow this is something

00:27:14,200 --> 00:27:18,580
that I can use then please do so please

00:27:16,750 --> 00:27:21,610
come to me please talk to me

00:27:18,580 --> 00:27:24,640
I will however gladly help you set all

00:27:21,610 --> 00:27:26,970
of this up as I said this is still

00:27:24,640 --> 00:27:31,990
work-in-progress there might be things

00:27:26,970 --> 00:27:33,700
that change this is my my contact

00:27:31,990 --> 00:27:35,799
information also where you can find the

00:27:33,700 --> 00:27:38,500
slides and the github repository and

00:27:35,799 --> 00:27:40,419
before I finish I want to thank three

00:27:38,500 --> 00:27:44,080
entities first and foremost I want to

00:27:40,419 --> 00:27:46,840
thank Rafael for his many many times

00:27:44,080 --> 00:27:48,940
that he has provided help for me while

00:27:46,840 --> 00:27:50,919
going through the process of writing a

00:27:48,940 --> 00:27:53,590
Python project and publishing it and so

00:27:50,919 --> 00:27:55,450
on and so forth he has been super super

00:27:53,590 --> 00:27:57,190
helpful and is in general an awesome

00:27:55,450 --> 00:27:59,620
person and the second I would like to

00:27:57,190 --> 00:28:01,840
thank Mattias Ferguson for the

00:27:59,620 --> 00:28:04,450
metropolis Bimmer theme that I have used

00:28:01,840 --> 00:28:07,059
to create this presentation and third I

00:28:04,450 --> 00:28:09,610
want to thank you as my audience for

00:28:07,059 --> 00:28:13,480
your time and for your attention if you

00:28:09,610 --> 00:28:15,220
have any feedback please go to the pre

00:28:13,480 --> 00:28:16,929
talked system click on this talk to the

00:28:15,220 --> 00:28:18,160
schedule click on this talk and give me

00:28:16,929 --> 00:28:22,380
some feedback and you have questions

00:28:18,160 --> 00:28:22,380
please go thank you

00:28:28,520 --> 00:28:34,710
okay we've got a question of the

00:28:30,750 --> 00:28:37,049
microphone in the middle I have one

00:28:34,710 --> 00:28:39,600
question regarding the documentation do

00:28:37,049 --> 00:28:42,780
you have actually an example of what

00:28:39,600 --> 00:28:49,650
kind of documentation we can validate

00:28:42,780 --> 00:28:53,940
and run the winery to dispel true and

00:28:49,650 --> 00:28:57,150
spell checking I don't know if I got you

00:28:53,940 --> 00:29:00,419
a question right but any any kind of

00:28:57,150 --> 00:29:02,610
documentation basically that is that is

00:29:00,419 --> 00:29:04,770
using things to document it's stuff you

00:29:02,610 --> 00:29:07,200
can use this things contribute spelling

00:29:04,770 --> 00:29:09,179
project to spell check your

00:29:07,200 --> 00:29:13,980
documentation does this answer your

00:29:09,179 --> 00:29:17,970
question okay and another one is you

00:29:13,980 --> 00:29:19,770
showed actually how to spell check the

00:29:17,970 --> 00:29:23,909
strings representation that we show to

00:29:19,770 --> 00:29:29,340
the user can use this on the specific

00:29:23,909 --> 00:29:31,380
code pieces as I said if you do not have

00:29:29,340 --> 00:29:32,909
translations so if you're all of the

00:29:31,380 --> 00:29:34,679
strings that should be spell checked are

00:29:32,909 --> 00:29:36,690
scattered throughout your project in

00:29:34,679 --> 00:29:41,039
Python files and HTML files and CSS

00:29:36,690 --> 00:29:45,419
files then I don't know on how to how to

00:29:41,039 --> 00:29:47,070
spell check those if you want to use to

00:29:45,419 --> 00:29:48,720
translate your project into any other

00:29:47,070 --> 00:29:50,850
languages then you would probably use

00:29:48,720 --> 00:29:52,590
the gap text system and in that case

00:29:50,850 --> 00:29:54,390
you're a Tokyo file and you can use PO

00:29:52,590 --> 00:29:56,549
typo to spellcheck but in the other case

00:29:54,390 --> 00:29:59,190
unfortunately I have no idea on how to

00:29:56,549 --> 00:30:01,400
do this okay thank you okay next

00:29:59,190 --> 00:30:03,960
question from the microphone in the back

00:30:01,400 --> 00:30:05,850
yeah so thank you for the talk and for

00:30:03,960 --> 00:30:08,580
the project as my spelling is

00:30:05,850 --> 00:30:10,710
notoriously bad and one of the biggest

00:30:08,580 --> 00:30:12,510
source of frustrations for my reviewers

00:30:10,710 --> 00:30:15,240
I think I will have plenty of need for

00:30:12,510 --> 00:30:18,630
that but one of the things I'm bit

00:30:15,240 --> 00:30:20,539
unclear is docstrings so if you use it

00:30:18,630 --> 00:30:23,580
for automated documentation of your code

00:30:20,539 --> 00:30:25,830
clearly all your class names your

00:30:23,580 --> 00:30:28,289
function names all this stuff is not

00:30:25,830 --> 00:30:28,740
spelled according to regular syntax

00:30:28,289 --> 00:30:31,260
rules

00:30:28,740 --> 00:30:34,500
what I have to maintain all these things

00:30:31,260 --> 00:30:36,750
in the edge case list or is there a

00:30:34,500 --> 00:30:37,860
different procedure to handle doc

00:30:36,750 --> 00:30:39,390
strings and

00:30:37,860 --> 00:30:43,980
function names and class names and

00:30:39,390 --> 00:30:47,130
they'll be it spelling um well class

00:30:43,980 --> 00:30:50,820
names and function names are spelled

00:30:47,130 --> 00:30:53,700
correctly by default I would say because

00:30:50,820 --> 00:30:56,010
you really can't cannot kind of I don't

00:30:53,700 --> 00:30:57,690
know spell spell them wrong if you if

00:30:56,010 --> 00:30:58,950
you know what I mean because example one

00:30:57,690 --> 00:31:01,649
of the projects I had I had the

00:30:58,950 --> 00:31:04,799
misfortune to name the controller with

00:31:01,649 --> 00:31:06,960
one L which is quite annoying and of

00:31:04,799 --> 00:31:08,789
course this was something that was not

00:31:06,960 --> 00:31:10,679
just a mistake I made when naming the

00:31:08,789 --> 00:31:12,870
class but all the documentation that

00:31:10,679 --> 00:31:15,240
I've wrote referring to this very class

00:31:12,870 --> 00:31:17,880
so obviously one spot if it's easy to

00:31:15,240 --> 00:31:19,500
rectify but it would so how would how

00:31:17,880 --> 00:31:23,000
would I approach this particular problem

00:31:19,500 --> 00:31:26,899
okay these things contribute spelling

00:31:23,000 --> 00:31:30,059
project does not say it only checks for

00:31:26,899 --> 00:31:31,500
errors in the pros that you write to

00:31:30,059 --> 00:31:33,360
document your process and not in

00:31:31,500 --> 00:31:35,519
function names or anything else if your

00:31:33,360 --> 00:31:38,010
ink if you use the word controller for

00:31:35,519 --> 00:31:39,750
example with only one L in pros to refer

00:31:38,010 --> 00:31:42,029
to a controller then it will all of

00:31:39,750 --> 00:31:45,210
course tell you this is wrong but it

00:31:42,029 --> 00:31:47,279
doesn't check function names or I don't

00:31:45,210 --> 00:31:50,880
know methods or whatever thank you

00:31:47,279 --> 00:31:52,380
welcome wonderful if we don't have any

00:31:50,880 --> 00:31:55,340
further questions thank you very much

00:31:52,380 --> 00:31:55,340
Jakob for the talk

00:31:58,119 --> 00:32:00,179

YouTube URL: https://www.youtube.com/watch?v=oPX7LtMNBto


