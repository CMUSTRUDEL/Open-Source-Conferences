Title: DjangoCon 2018 - GraphQL in Python and Django
Publication date: 2018-05-25
Playlist: DjangoCon Europe 2018 in Heidelberg
Description: 
	https://media.ccc.de/v/hd-37-graphql-in-python-and-django



In this talk, I’ll talk about GraphQL, a data query language created by Facebook as an alternative to the widely used REST. I’ll list the key differences between the twos and pros and cons of GraphQL over a “traditional” REST API.

I’ll tell why GraphQL has been created, what problems does it solve and how to create GraphQL APIs with Python with an additional follow up on how to use it with Django, one of the most popular web framework. If we have enough time I’ll touch on advanced topics like authentication, caching, security and real-time.

Takeaway: the objective of the talk is to have an introduction on GraphQL, understand why and when to use it and, finally, how to use it Python.

Audience: the talk is for web developers with some experience building web APIs.



Patrick Arminio
Captions: 
	00:00:09,040 --> 00:00:13,980
okay happy one money

00:00:15,980 --> 00:00:21,110
ah developer things to do which is

00:00:18,230 --> 00:00:24,110
a creative agency in London based in

00:00:21,110 --> 00:00:28,340
London and you can find me as project 91

00:00:24,110 --> 00:00:30,680
online more or less so everywhere being

00:00:28,340 --> 00:00:33,290
a full-stack developer in agency it's

00:00:30,680 --> 00:00:36,410
it's quite nice because you tend up to

00:00:33,290 --> 00:00:39,290
do short project so you easily can try a

00:00:36,410 --> 00:00:41,180
new technology quite often and today I'm

00:00:39,290 --> 00:00:43,820
gonna talk about a new technology that

00:00:41,180 --> 00:00:47,329
I've been using over the last year or so

00:00:43,820 --> 00:00:49,730
and first let me explain why it's being

00:00:47,329 --> 00:00:51,289
created so as you all know the the old

00:00:49,730 --> 00:00:52,730
web was more or less like a collection

00:00:51,289 --> 00:00:54,469
of documents where the user could

00:00:52,730 --> 00:00:56,960
interact with the pages just by clicking

00:00:54,469 --> 00:00:58,640
links or using forms and you will

00:00:56,960 --> 00:01:01,070
usually have just one single server

00:00:58,640 --> 00:01:03,620
that's gonna return all the pages like

00:01:01,070 --> 00:01:05,210
the pages could be ready dynamically or

00:01:03,620 --> 00:01:07,490
not but that's not the point

00:01:05,210 --> 00:01:11,020
but as the web the world being what we

00:01:07,490 --> 00:01:13,520
can call the modern web or the web 2.0

00:01:11,020 --> 00:01:15,560
the requirements have changed we now

00:01:13,520 --> 00:01:17,890
have applications that run on mobile

00:01:15,560 --> 00:01:20,060
devices like smart watches phones

00:01:17,890 --> 00:01:23,240
desktop devices like laptop or even

00:01:20,060 --> 00:01:25,039
fridges for example and also we have

00:01:23,240 --> 00:01:27,020
more complex data structure so we have

00:01:25,039 --> 00:01:31,069
different data sources for example could

00:01:27,020 --> 00:01:34,369
be a process DB elasticsearch server and

00:01:31,069 --> 00:01:37,130
so on and so we used to build like

00:01:34,369 --> 00:01:39,830
gateways to to have to get all this

00:01:37,130 --> 00:01:42,200
information to one single API that can

00:01:39,830 --> 00:01:47,739
be used by all those different devices

00:01:42,200 --> 00:01:50,330
and we mainly use REST API s which is

00:01:47,739 --> 00:01:54,950
it's not a standard so it's more like a

00:01:50,330 --> 00:01:56,869
design concept that basically says our

00:01:54,950 --> 00:02:00,289
API is a collection of resources and you

00:01:56,869 --> 00:02:02,770
can use HTTP works to to do operation on

00:02:00,289 --> 00:02:05,330
them so you can get resource delete them

00:02:02,770 --> 00:02:07,759
edit and so on

00:02:05,330 --> 00:02:09,770
Burress is not perfect you may have seen

00:02:07,759 --> 00:02:11,510
the talk two days ago about rest there

00:02:09,770 --> 00:02:14,330
are some some pitfalls that you have to

00:02:11,510 --> 00:02:17,000
consider when you're creating an an API

00:02:14,330 --> 00:02:22,610
with it I'm going to go through a couple

00:02:17,000 --> 00:02:24,680
of a couple of them so first one is

00:02:22,610 --> 00:02:27,480
might be too many of your goals for

00:02:24,680 --> 00:02:30,490
example we have an API

00:02:27,480 --> 00:02:32,860
returns a user so you do get requests to

00:02:30,490 --> 00:02:36,130
user slash ad in this case last one and

00:02:32,860 --> 00:02:38,290
then you can get a response like list

00:02:36,130 --> 00:02:40,150
where you can say there is a name a list

00:02:38,290 --> 00:02:41,380
of friends and a letter and this is

00:02:40,150 --> 00:02:42,790
quite nice because it's using the

00:02:41,380 --> 00:02:47,470
building blocks of the web so you see

00:02:42,790 --> 00:02:50,110
we're using links so but it's nice but

00:02:47,470 --> 00:02:51,640
what if you need to get the the list of

00:02:50,110 --> 00:02:54,400
the friends and then their names for

00:02:51,640 --> 00:02:57,459
example you need to do an API call for

00:02:54,400 --> 00:02:58,989
each of them and one of the workarounds

00:02:57,459 --> 00:03:00,670
you can see is to create another end

00:02:58,989 --> 00:03:02,380
point where I can say I want the user

00:03:00,670 --> 00:03:04,600
with the list of friends expanded for

00:03:02,380 --> 00:03:09,730
example and so you get something like

00:03:04,600 --> 00:03:11,530
this but what if what if you need to to

00:03:09,730 --> 00:03:13,330
get the list of friends and images so

00:03:11,530 --> 00:03:15,700
you you might end up to create another

00:03:13,330 --> 00:03:18,880
end point and same if you just need the

00:03:15,700 --> 00:03:20,350
user with their in the avatar and what

00:03:18,880 --> 00:03:21,970
if you have to create a mobile

00:03:20,350 --> 00:03:24,190
application where you just just need to

00:03:21,970 --> 00:03:25,540
serve smaller images because having like

00:03:24,190 --> 00:03:28,690
a big image is not a good user

00:03:25,540 --> 00:03:30,940
experience and this goes on and on if

00:03:28,690 --> 00:03:34,239
you have to create other other pages and

00:03:30,940 --> 00:03:36,100
so on and this is a huge problem if you

00:03:34,239 --> 00:03:37,780
have like a complex application or if

00:03:36,100 --> 00:03:40,630
you have many devices so if you have

00:03:37,780 --> 00:03:43,450
different pages for example Coursera

00:03:40,630 --> 00:03:45,370
which is now migrating to the graphic

00:03:43,450 --> 00:03:48,420
well at some point that more than one

00:03:45,370 --> 00:03:53,200
thousand different points which is a

00:03:48,420 --> 00:03:54,940
hell of a lot and you can imagine trying

00:03:53,200 --> 00:03:56,620
to maintain this codebase it's really

00:03:54,940 --> 00:03:58,540
hard especially feel for example if you

00:03:56,620 --> 00:04:00,519
hire a new developer you have to get

00:03:58,540 --> 00:04:01,630
them up to speed and takes a lot of time

00:04:00,519 --> 00:04:03,340
and those we have to maintain

00:04:01,630 --> 00:04:05,140
documentation because if you have to use

00:04:03,340 --> 00:04:07,090
this API on a mobile application you

00:04:05,140 --> 00:04:10,840
need to know all the different endpoints

00:04:07,090 --> 00:04:12,790
and the way you can fetch data so you

00:04:10,840 --> 00:04:15,010
might say oh I have a simple API so I

00:04:12,790 --> 00:04:18,130
just can return all the data so you end

00:04:15,010 --> 00:04:20,500
up doing requests that are like

00:04:18,130 --> 00:04:23,110
returning too many in for too much

00:04:20,500 --> 00:04:24,850
information and can this is just a

00:04:23,110 --> 00:04:27,419
simple example but for example if we

00:04:24,850 --> 00:04:29,860
have we merged the previous API to have

00:04:27,419 --> 00:04:32,560
something that returns everything by

00:04:29,860 --> 00:04:34,870
default you having a bad user

00:04:32,560 --> 00:04:36,460
experience and also developer experience

00:04:34,870 --> 00:04:39,260
because you are returning data that's

00:04:36,460 --> 00:04:43,220
not needed by your

00:04:39,260 --> 00:04:47,360
clients usually and and this is this is

00:04:43,220 --> 00:04:50,300
a waste of bandwidth as well so can we

00:04:47,360 --> 00:04:52,520
do better you would say yes we can

00:04:50,300 --> 00:04:55,190
extend rest for example the Restonic

00:04:52,520 --> 00:04:58,070
there were some examples in the couple

00:04:55,190 --> 00:04:59,960
of days ago for example you cannot get

00:04:58,070 --> 00:05:02,410
parameters to say oh I want to expand

00:04:59,960 --> 00:05:04,520
these fields I want to show a different

00:05:02,410 --> 00:05:06,710
shape of the response based on the

00:05:04,520 --> 00:05:08,900
device I mean but since it's not a

00:05:06,710 --> 00:05:10,640
standard it's everyone is going to do it

00:05:08,900 --> 00:05:12,980
differently I used to love to document

00:05:10,640 --> 00:05:15,470
it which is one of the pain points think

00:05:12,980 --> 00:05:17,330
at least for me especially if I've to

00:05:15,470 --> 00:05:21,080
work with other front-end developers

00:05:17,330 --> 00:05:24,230
where I have to end over the API so Jeff

00:05:21,080 --> 00:05:27,200
curl the curve was created to resolve

00:05:24,230 --> 00:05:29,420
some of those issues and others it's

00:05:27,200 --> 00:05:32,420
being created by Facebook around 2012

00:05:29,420 --> 00:05:35,840
and it's been released as open source in

00:05:32,420 --> 00:05:37,910
2015 and it's been adopted by major

00:05:35,840 --> 00:05:40,220
companies like github Twitter of course

00:05:37,910 --> 00:05:44,150
Facebook as one and cursor as you can

00:05:40,220 --> 00:05:45,890
seen before so what is it so first of

00:05:44,150 --> 00:05:48,080
all even if there is graph in the name

00:05:45,890 --> 00:05:51,740
is not really about graph database is

00:05:48,080 --> 00:05:53,390
just a way to create the data so the one

00:05:51,740 --> 00:05:55,340
of the main definition is a query

00:05:53,390 --> 00:05:58,180
language for API which basically means

00:05:55,340 --> 00:06:02,210
that you have a language that you can

00:05:58,180 --> 00:06:06,230
request data and I'm going to show you

00:06:02,210 --> 00:06:08,120
some examples but first let me tell you

00:06:06,230 --> 00:06:10,990
that graphical is a specification that

00:06:08,120 --> 00:06:14,330
so there is no default implementation

00:06:10,990 --> 00:06:16,700
the base implementation is using HTTP

00:06:14,330 --> 00:06:20,030
but you can use any other protocol if

00:06:16,700 --> 00:06:22,880
you want the HCP implementation usually

00:06:20,030 --> 00:06:25,040
use one single endpoint which is usually

00:06:22,880 --> 00:06:28,820
slash graphical if you do a post request

00:06:25,040 --> 00:06:31,340
where you can send your your queries but

00:06:28,820 --> 00:06:33,140
what do you send to two graphic UL you

00:06:31,340 --> 00:06:35,510
basically send documents in this form

00:06:33,140 --> 00:06:38,120
which is more or less similar to a JSON

00:06:35,510 --> 00:06:40,220
it's like adjacent without the the

00:06:38,120 --> 00:06:42,770
actual values to basically in this case

00:06:40,220 --> 00:06:44,990
you are saying return me the results for

00:06:42,770 --> 00:06:49,190
the user with their name their email and

00:06:44,990 --> 00:06:50,660
the friends name and the API is gonna

00:06:49,190 --> 00:06:54,820
respond like this basically is gonna

00:06:50,660 --> 00:06:54,820
return only the data that you actually

00:06:55,400 --> 00:06:59,000
and something that's quite nice as well

00:06:57,110 --> 00:07:00,500
is the ability to have types

00:06:59,000 --> 00:07:03,100
so everything in graphical it's gotta

00:07:00,500 --> 00:07:05,360
types which is really important because

00:07:03,100 --> 00:07:08,780
for example you can have a build step

00:07:05,360 --> 00:07:10,250
where you can say or check this qui if

00:07:08,780 --> 00:07:12,950
the plea is not valid you're not gonna

00:07:10,250 --> 00:07:15,320
build the the API deduplication which is

00:07:12,950 --> 00:07:16,760
quite quite handy and also gives you

00:07:15,320 --> 00:07:20,540
allows you to create the comment issue

00:07:16,760 --> 00:07:21,920
without really bothering about it you

00:07:20,540 --> 00:07:25,430
can have different types you have

00:07:21,920 --> 00:07:29,360
integer float strings boolean and any

00:07:25,430 --> 00:07:31,540
other user defined type which like the

00:07:29,360 --> 00:07:34,820
basic type is called this color and you

00:07:31,540 --> 00:07:37,880
can for example in the Python library

00:07:34,820 --> 00:07:39,200
there is date/time as a type which is

00:07:37,880 --> 00:07:41,030
quite handy so you know there are for

00:07:39,200 --> 00:07:43,310
example the type the date is always in

00:07:41,030 --> 00:07:45,940
that format and also you have object

00:07:43,310 --> 00:07:49,070
types which is basically a collection of

00:07:45,940 --> 00:07:51,230
fields and types for example in our

00:07:49,070 --> 00:07:53,570
previous API we can have the type user

00:07:51,230 --> 00:07:55,250
the objective user that's got a string

00:07:53,570 --> 00:07:56,450
that's required an email that's required

00:07:55,250 --> 00:07:57,620
and then a list of friends that's

00:07:56,450 --> 00:08:00,200
reference and then there is another

00:07:57,620 --> 00:08:04,670
object path which is friend which has

00:08:00,200 --> 00:08:07,280
got only a name and yet the power of

00:08:04,670 --> 00:08:09,920
having types plus the introspection

00:08:07,280 --> 00:08:12,170
which basically every graphical API by

00:08:09,920 --> 00:08:16,160
default as introspection enabled allows

00:08:12,170 --> 00:08:18,980
you to explore the API without having to

00:08:16,160 --> 00:08:21,200
dig into the code for example the this

00:08:18,980 --> 00:08:24,050
an idea is called graphical which allows

00:08:21,200 --> 00:08:26,330
you to test your quiz in the browser

00:08:24,050 --> 00:08:27,590
without having to open the documentation

00:08:26,330 --> 00:08:30,260
and as you can see there is also

00:08:27,590 --> 00:08:34,970
complete documentation and everything in

00:08:30,260 --> 00:08:38,120
just one tool which is quite handy so so

00:08:34,970 --> 00:08:41,480
far we only have seen queries so we can

00:08:38,120 --> 00:08:45,130
only generally fetch data if you want to

00:08:41,480 --> 00:08:47,870
do other operations we we need to use

00:08:45,130 --> 00:08:50,240
one of those three of main operations so

00:08:47,870 --> 00:08:51,650
we're that we already seen which is

00:08:50,240 --> 00:08:53,750
basically with request data to the

00:08:51,650 --> 00:08:56,960
server then yet mutation which is a way

00:08:53,750 --> 00:08:58,820
to modify data that's not really emitted

00:08:56,960 --> 00:09:01,310
to modifying data you can also for

00:08:58,820 --> 00:09:03,080
example is a mutation to create to run a

00:09:01,310 --> 00:09:04,880
task or something else which is quite

00:09:03,080 --> 00:09:07,490
handy and then you have subscription

00:09:04,880 --> 00:09:09,170
which is way similar to two queries by

00:09:07,490 --> 00:09:14,810
it's in real time it's usually using

00:09:09,170 --> 00:09:16,460
WebSocket so this is like a shortcut for

00:09:14,810 --> 00:09:20,750
for a query since it's a common

00:09:16,460 --> 00:09:22,340
operation they provided I a way to do

00:09:20,750 --> 00:09:27,020
query without having to type too much

00:09:22,340 --> 00:09:28,820
the actual syntax is this one see the

00:09:27,020 --> 00:09:30,920
extended syntax so you have the

00:09:28,820 --> 00:09:32,180
operation name on top and then there's a

00:09:30,920 --> 00:09:34,250
Korean name which is only used for

00:09:32,180 --> 00:09:36,350
debugging it's mainly used for debugging

00:09:34,250 --> 00:09:38,120
for example if you need 12 logs on the

00:09:36,350 --> 00:09:40,460
server you can just add a query name and

00:09:38,120 --> 00:09:42,500
then on the server you can find them by

00:09:40,460 --> 00:09:44,840
using this name then you can also have

00:09:42,500 --> 00:09:47,210
parameters and then you have the list of

00:09:44,840 --> 00:09:49,160
fields that you wanna do you wanna

00:09:47,210 --> 00:09:52,070
create this is quite interesting that

00:09:49,160 --> 00:09:53,420
you can have arguments for each field so

00:09:52,070 --> 00:09:55,400
for example in this case we can limit

00:09:53,420 --> 00:09:57,920
the number of fans that we can fetch but

00:09:55,400 --> 00:10:00,200
we can also for example if we have like

00:09:57,920 --> 00:10:02,300
different languages we can create by

00:10:00,200 --> 00:10:05,780
language or we can change the unit or

00:10:02,300 --> 00:10:08,060
measurement which is really helpful then

00:10:05,780 --> 00:10:10,550
mutation it's please pretty much similar

00:10:08,060 --> 00:10:12,740
so you still have to field the fields

00:10:10,550 --> 00:10:14,810
and then you have the name of the

00:10:12,740 --> 00:10:18,590
operation and the rest of this index is

00:10:14,810 --> 00:10:20,600
the same you can still like ask for the

00:10:18,590 --> 00:10:26,000
fields that you need to and then we have

00:10:20,600 --> 00:10:27,590
subscription it is the same so we have a

00:10:26,000 --> 00:10:29,540
Python conference obviously we want to

00:10:27,590 --> 00:10:32,990
use this with Python and we can there is

00:10:29,540 --> 00:10:34,640
a library called graphene and you can

00:10:32,990 --> 00:10:37,220
install it like this just so people

00:10:34,640 --> 00:10:41,780
store graphene and then you can use it

00:10:37,220 --> 00:10:44,000
import it and then you create a class

00:10:41,780 --> 00:10:46,310
for the query as I said everything is a

00:10:44,000 --> 00:10:48,560
knob it's typed in graphical so even the

00:10:46,310 --> 00:10:50,930
route cui is a type so you have object

00:10:48,560 --> 00:10:53,630
type in this case we have a quiz only

00:10:50,930 --> 00:10:54,890
has one field which is hello and then

00:10:53,630 --> 00:10:58,280
for each field you have to create a

00:10:54,890 --> 00:11:01,700
resolver function or method that

00:10:58,280 --> 00:11:03,620
basically is it's it's the code that's

00:11:01,700 --> 00:11:05,390
returning the data it's fetching a

00:11:03,620 --> 00:11:07,160
returning the data frame so for example

00:11:05,390 --> 00:11:09,110
in this case we have a field that's

00:11:07,160 --> 00:11:11,360
called alloy that's a string and then

00:11:09,110 --> 00:11:13,790
the function is going to return hello hi

00:11:11,360 --> 00:11:15,810
Django Khan and then we get the schema

00:11:13,790 --> 00:11:18,430
passing in the quiz to the

00:11:15,810 --> 00:11:19,870
schema constructor and then we this case

00:11:18,430 --> 00:11:22,930
we're just executing in the scheme and

00:11:19,870 --> 00:11:26,440
here that big obvious we can use a post

00:11:22,930 --> 00:11:29,020
request but we are a jungle con so can

00:11:26,440 --> 00:11:31,180
we use this free jungle can we use we

00:11:29,020 --> 00:11:32,140
use our own models and forms with jungle

00:11:31,180 --> 00:11:34,210
yes we can

00:11:32,140 --> 00:11:37,090
the same people that built Govinda made

00:11:34,210 --> 00:11:39,880
graph in jungle library which has got

00:11:37,090 --> 00:11:41,440
quite few interesting tool so you can

00:11:39,880 --> 00:11:43,810
install like that and then you have to

00:11:41,440 --> 00:11:45,460
install but to added to install apps

00:11:43,810 --> 00:11:48,130
mainly for the static files for the ID

00:11:45,460 --> 00:11:50,890
and then you need to point out the the

00:11:48,130 --> 00:11:54,370
schema then you need to add the path to

00:11:50,890 --> 00:11:56,080
your urls and you can add the graphical

00:11:54,370 --> 00:11:59,920
view and you can also enable the ID

00:11:56,080 --> 00:12:02,110
division we ever seen before then you

00:11:59,920 --> 00:12:03,790
can create your object type and there is

00:12:02,110 --> 00:12:05,650
junk object ID that's gonna create an

00:12:03,790 --> 00:12:08,200
object type based on a model for example

00:12:05,650 --> 00:12:09,490
then you return the query setting your

00:12:08,200 --> 00:12:11,320
resolver I'm going to show you this in

00:12:09,490 --> 00:12:14,370
more detail in a second there's also

00:12:11,320 --> 00:12:17,710
rest framework integration which is

00:12:14,370 --> 00:12:21,370
quite handy if you already have rest

00:12:17,710 --> 00:12:23,410
frame analyzer it's similar to the to

00:12:21,370 --> 00:12:25,690
the jungle object type but only works

00:12:23,410 --> 00:12:26,980
for mutation for now this is something I

00:12:25,690 --> 00:12:30,430
would like to work on maybe in this

00:12:26,980 --> 00:12:31,720
point or in our next one but I use it

00:12:30,430 --> 00:12:33,550
like this and then you can use your

00:12:31,720 --> 00:12:35,980
sterilizer if you have some custom logic

00:12:33,550 --> 00:12:38,740
there so instead of building the

00:12:35,980 --> 00:12:41,830
mutation benefit by hand so let's make a

00:12:38,740 --> 00:12:43,390
simple API suppose that's suppose then

00:12:41,830 --> 00:12:46,210
we have these two models so we have a

00:12:43,390 --> 00:12:47,980
holter model just with us with a name

00:12:46,210 --> 00:12:52,180
and then we have a post with title body

00:12:47,980 --> 00:12:54,100
and a foreign key to water one what we

00:12:52,180 --> 00:12:56,230
have to do first is to create the object

00:12:54,100 --> 00:12:57,910
types which is quite simple with your

00:12:56,230 --> 00:12:59,680
graph in jungle because just to create a

00:12:57,910 --> 00:13:02,860
couple of class and specify the

00:12:59,680 --> 00:13:05,920
the modeling the meta and that's it so

00:13:02,860 --> 00:13:07,840
you already have the object types then

00:13:05,920 --> 00:13:09,700
we have to create the query so create a

00:13:07,840 --> 00:13:12,040
simple class that extends object type

00:13:09,700 --> 00:13:14,200
and then we define the post field which

00:13:12,040 --> 00:13:15,940
is a list of possibly a type and then we

00:13:14,200 --> 00:13:20,260
create a resolver that's going to return

00:13:15,940 --> 00:13:24,570
the post object all the objects in the

00:13:20,260 --> 00:13:24,570
database so let's quickly test this

00:13:27,220 --> 00:13:33,410
so this is the idea shown you before and

00:13:29,870 --> 00:13:36,980
it's quite crazy to test this so we can

00:13:33,410 --> 00:13:38,540
do posts then we can fetch for example

00:13:36,980 --> 00:13:39,830
for the title I can do the request and I

00:13:38,540 --> 00:13:43,010
can see what the post I have in the

00:13:39,830 --> 00:13:45,140
database but for example if I need to

00:13:43,010 --> 00:13:46,850
get the author and the author name I can

00:13:45,140 --> 00:13:49,430
just ask for it and it's gonna return it

00:13:46,850 --> 00:13:57,010
without me having to do any any other

00:13:49,430 --> 00:13:59,990
thing just client me okay

00:13:57,010 --> 00:14:02,420
so let's create the single post query as

00:13:59,990 --> 00:14:03,649
well it's pretty pretty much similar the

00:14:02,420 --> 00:14:05,959
only difference that in this case we

00:14:03,649 --> 00:14:07,640
have an argument because every every

00:14:05,959 --> 00:14:09,470
field can have an argument and the

00:14:07,640 --> 00:14:11,660
arguments propagated to the e resolver

00:14:09,470 --> 00:14:12,050
function I'm gonna show you maybe this

00:14:11,660 --> 00:14:14,930
later

00:14:12,050 --> 00:14:16,160
between the how it works in the 8id but

00:14:14,930 --> 00:14:19,700
yeah this is what you have to do for

00:14:16,160 --> 00:14:21,649
example to do a simple query of course

00:14:19,700 --> 00:14:24,320
he also want to to allow the user to

00:14:21,649 --> 00:14:26,839
create posts for example and you do it

00:14:24,320 --> 00:14:28,970
using a mutation you create mutation

00:14:26,839 --> 00:14:30,920
extending graph in the mutation you

00:14:28,970 --> 00:14:33,910
still have to define the the fields that

00:14:30,920 --> 00:14:36,200
this mutation can return so you can

00:14:33,910 --> 00:14:38,330
allow the user for example to return the

00:14:36,200 --> 00:14:39,920
post title or other information and then

00:14:38,330 --> 00:14:41,570
you have to define the arguments which

00:14:39,920 --> 00:14:43,400
are basically the argument an invitation

00:14:41,570 --> 00:14:45,440
you can consider a mutation like it's

00:14:43,400 --> 00:14:47,029
simple function and then we have a

00:14:45,440 --> 00:14:48,650
method function then this case is going

00:14:47,029 --> 00:14:51,230
to create an author if doesn't exist and

00:14:48,650 --> 00:14:52,700
then it's been returned the post post

00:14:51,230 --> 00:14:54,800
mutation with the post object that we

00:14:52,700 --> 00:14:56,660
are just created and then we have to

00:14:54,800 --> 00:14:58,220
create a mutation object with all the

00:14:56,660 --> 00:15:00,380
invitation fields in this case it is

00:14:58,220 --> 00:15:03,920
only create post then you pass it to the

00:15:00,380 --> 00:15:06,040
schema done let's test this quite

00:15:03,920 --> 00:15:06,040
quickly

00:15:14,130 --> 00:15:21,210
so as I said mutation it you need to

00:15:16,830 --> 00:15:23,340
pass the operation name then the field

00:15:21,210 --> 00:15:24,780
you can pass the title everything as I

00:15:23,340 --> 00:15:27,390
said this is also completed so it's

00:15:24,780 --> 00:15:29,400
quite and you could say I did this like

00:15:27,390 --> 00:15:34,140
in five minutes and already remember

00:15:29,400 --> 00:15:36,450
what I did then you can get the post and

00:15:34,140 --> 00:15:39,740
you can get the title then you can get

00:15:36,450 --> 00:15:42,210
the author for example and the reading

00:15:39,740 --> 00:15:49,380
so if I do this it's going to create a

00:15:42,210 --> 00:15:52,220
new post and whoops you can see in the

00:15:49,380 --> 00:15:52,220
list of the posts

00:15:55,010 --> 00:15:59,810
it's probably someone yeah it's over -

00:15:57,350 --> 00:16:02,030
she's quite handy and as I said we can

00:15:59,810 --> 00:16:05,060
also propose by deed so for example I

00:16:02,030 --> 00:16:07,400
can create the post with ID 1 and

00:16:05,060 --> 00:16:09,550
something I wanted to show you that I

00:16:07,400 --> 00:16:11,930
didn't really like a first is that

00:16:09,550 --> 00:16:13,340
graphing by default or even any

00:16:11,930 --> 00:16:15,650
graphical implementation of the language

00:16:13,340 --> 00:16:17,210
they catch the errors for you so if you

00:16:15,650 --> 00:16:20,510
have a server error this error it's

00:16:17,210 --> 00:16:22,760
gonna come up in the in the front end

00:16:20,510 --> 00:16:23,900
which I'm not sure if it's nice but

00:16:22,760 --> 00:16:29,030
sometimes it's really helpful for

00:16:23,900 --> 00:16:30,410
example if I'm trying to do trying to

00:16:29,030 --> 00:16:32,090
fetch a post that doesn't exist I'm

00:16:30,410 --> 00:16:33,530
gonna get an error so you have a list of

00:16:32,090 --> 00:16:37,730
errors there and then you still have the

00:16:33,530 --> 00:16:39,860
data but the post is none so something I

00:16:37,730 --> 00:16:41,570
liked this day if for example you can do

00:16:39,860 --> 00:16:44,050
multiple queries or for example if you

00:16:41,570 --> 00:16:44,050
do first

00:16:55,930 --> 00:17:01,090
so if you do multiple quiz in a single

00:16:58,770 --> 00:17:04,360
single request you still can get the

00:17:01,090 --> 00:17:06,940
data that came through so for example

00:17:04,360 --> 00:17:08,260
you can see that there is a first is

00:17:06,940 --> 00:17:09,820
null because there was an error that

00:17:08,260 --> 00:17:11,770
doesn't exist and then you still have

00:17:09,820 --> 00:17:14,440
the second title which is quite handy if

00:17:11,770 --> 00:17:16,500
you have loads of data for example in a

00:17:14,440 --> 00:17:18,940
project that we are doing a work we have

00:17:16,500 --> 00:17:21,040
we have different components in the page

00:17:18,940 --> 00:17:23,890
like Corona tank components and we

00:17:21,040 --> 00:17:25,810
bought all the queries so we don't we

00:17:23,890 --> 00:17:28,089
only do one query like every 100

00:17:25,810 --> 00:17:30,310
milliseconds and if the anything fails

00:17:28,089 --> 00:17:32,080
is not gonna break the app only death

00:17:30,310 --> 00:17:38,130
the partner field it's not going to show

00:17:32,080 --> 00:17:38,130
up which is quite handy yep

00:17:40,030 --> 00:17:45,080
okay this is cool at least on from my

00:17:43,070 --> 00:17:46,549
front of you but you still have to

00:17:45,080 --> 00:17:48,530
consider that this is a new technology

00:17:46,549 --> 00:17:51,350
especially in the fighter world so the

00:17:48,530 --> 00:17:55,220
library is stable but there might be

00:17:51,350 --> 00:18:00,610
some some gotchas so one of the main

00:17:55,220 --> 00:18:03,350
things this is security one of the

00:18:00,610 --> 00:18:05,030
frequent ask question on the list on

00:18:03,350 --> 00:18:08,150
ether based authentication are can I do

00:18:05,030 --> 00:18:10,640
an authentication with graph QL well we

00:18:08,150 --> 00:18:13,100
are using HTTP so you can use it you use

00:18:10,640 --> 00:18:14,570
the HTTP blocks so you can use for

00:18:13,100 --> 00:18:18,770
example jungle session which is quite

00:18:14,570 --> 00:18:20,660
easy to just say well you don't really

00:18:18,770 --> 00:18:22,549
have to do anything with for using

00:18:20,660 --> 00:18:24,559
session you can create a mutation to

00:18:22,549 --> 00:18:26,929
login the user you can use a form to

00:18:24,559 --> 00:18:28,250
login them and then you have to say e to

00:18:26,929 --> 00:18:31,460
the front and not send the cookie as

00:18:28,250 --> 00:18:33,260
well when you do the request and that's

00:18:31,460 --> 00:18:36,290
really easy or you can use either so you

00:18:33,260 --> 00:18:38,240
can use GWT tokens or you can use basic

00:18:36,290 --> 00:18:41,330
hosts and then you can also use

00:18:38,240 --> 00:18:45,559
parameters for example if we if we in

00:18:41,330 --> 00:18:47,240
the indicate post mutation we could

00:18:45,559 --> 00:18:49,820
could add another field for example

00:18:47,240 --> 00:18:52,100
instead of having just create post lobby

00:18:49,820 --> 00:18:56,809
title and body we can also pass a token

00:18:52,100 --> 00:18:58,520
for example we could we could have

00:18:56,809 --> 00:19:02,360
indicated user using the parameter this

00:18:58,520 --> 00:19:03,470
is handy if you have for example just a

00:19:02,360 --> 00:19:06,140
few mutation that require user

00:19:03,470 --> 00:19:07,970
authentication like you don't really

00:19:06,140 --> 00:19:12,740
have you don't really want to user to

00:19:07,970 --> 00:19:15,740
deal with others on stuff yeah and then

00:19:12,740 --> 00:19:17,840
there is also permissions there is no

00:19:15,740 --> 00:19:20,750
built-in featuring in graphene yet for

00:19:17,840 --> 00:19:24,500
permission so you cannot reuse jungle

00:19:20,750 --> 00:19:26,299
permissions for now at least but one one

00:19:24,500 --> 00:19:27,919
of the interesting thing of graphical is

00:19:26,299 --> 00:19:31,309
that you can have permission on single

00:19:27,919 --> 00:19:34,580
fields for example if I'm authenticated

00:19:31,309 --> 00:19:37,970
user as if I'm an admin I can for

00:19:34,580 --> 00:19:40,010
example return at email and not show the

00:19:37,970 --> 00:19:41,960
email to unlike normal users which is

00:19:40,010 --> 00:19:43,730
quite handy but you have to do this

00:19:41,960 --> 00:19:45,410
manually because for now it's not be

00:19:43,730 --> 00:19:47,919
there's no way to do it

00:19:45,410 --> 00:19:50,720
like with decorators or any other

00:19:47,919 --> 00:19:51,570
specifics and syntax and also where you

00:19:50,720 --> 00:19:57,389
can have you

00:19:51,570 --> 00:19:59,519
public and private fields for example

00:19:57,389 --> 00:20:01,710
guitar visiting this they have a single

00:19:59,519 --> 00:20:03,479
graph QL API that's public and private

00:20:01,710 --> 00:20:05,609
at the same time but the fields that are

00:20:03,479 --> 00:20:09,149
unavailable for internal development

00:20:05,609 --> 00:20:10,679
it's it's private so it's no it's not

00:20:09,149 --> 00:20:13,049
showing up human documentation it's

00:20:10,679 --> 00:20:15,419
quite handy just also interesting for me

00:20:13,049 --> 00:20:17,309
and then you can have manage you you

00:20:15,419 --> 00:20:20,460
have problem lis managed to squeeze and

00:20:17,309 --> 00:20:23,399
crushing so my shoe squeeze we are

00:20:20,460 --> 00:20:25,830
giving the declines so much power

00:20:23,399 --> 00:20:27,720
because you can say oh I want all these

00:20:25,830 --> 00:20:30,029
fields and I can also nest all of them

00:20:27,720 --> 00:20:33,450
for example you can nest it like this

00:20:30,029 --> 00:20:36,539
which is maybe a bit worrying if you for

00:20:33,450 --> 00:20:38,330
example do posts then you get the author

00:20:36,539 --> 00:20:41,190
and then you have the post at the new

00:20:38,330 --> 00:20:44,340
then you do something like this it can

00:20:41,190 --> 00:20:45,809
go on and on and it's not going to

00:20:44,340 --> 00:20:48,330
complain it's gonna do the qui anyway

00:20:45,809 --> 00:20:49,950
but yeah you might not want this

00:20:48,330 --> 00:20:51,869
especially if you have complex for you

00:20:49,950 --> 00:20:53,909
so you have someone that really wants to

00:20:51,869 --> 00:20:57,629
break your website so they can mess it

00:20:53,909 --> 00:21:00,450
like one under Li levels deep and

00:20:57,629 --> 00:21:04,019
caching as well so one of the way that

00:21:00,450 --> 00:21:06,239
you can fix this these issues one could

00:21:04,019 --> 00:21:07,590
be to use timeouts so for example if you

00:21:06,239 --> 00:21:10,049
have requesters taking more than one

00:21:07,590 --> 00:21:12,239
second again drop it this is something

00:21:10,049 --> 00:21:13,769
that Facebook is doing they do if the

00:21:12,239 --> 00:21:16,710
request is taking more than one one

00:21:13,769 --> 00:21:18,090
second we just drop it because it's not

00:21:16,710 --> 00:21:21,590
a good user experience and probably

00:21:18,090 --> 00:21:23,940
someone doing something wrong Oh anyways

00:21:21,590 --> 00:21:25,559
and you can also have a limit of the

00:21:23,940 --> 00:21:27,899
nesting so for example you can check

00:21:25,559 --> 00:21:29,729
with the query so if there is a field

00:21:27,899 --> 00:21:31,139
that's more than three levels deep don't

00:21:29,729 --> 00:21:33,599
do the quiz so just return an error

00:21:31,139 --> 00:21:35,309
she's interesting as well and then there

00:21:33,599 --> 00:21:37,649
is another one that ether B is doing is

00:21:35,309 --> 00:21:40,799
called cui costs so you can calculate

00:21:37,649 --> 00:21:45,029
the cost of a queen so you can give a to

00:21:40,799 --> 00:21:47,099
each field a a coefficient so you can

00:21:45,029 --> 00:21:49,379
say oh this field cost one this field

00:21:47,099 --> 00:21:50,940
cost and and so on so you can calculate

00:21:49,379 --> 00:21:53,789
how much displeased

00:21:50,940 --> 00:21:57,570
costing to you and you can say oh I can

00:21:53,789 --> 00:21:59,429
only do with less than five hundred for

00:21:57,570 --> 00:22:01,649
example and also you can have static

00:21:59,429 --> 00:22:04,770
quiz and this is going to also help you

00:22:01,649 --> 00:22:07,890
with caching so the quiz is a way to

00:22:04,770 --> 00:22:10,230
to a quiz that cannot be changed by the

00:22:07,890 --> 00:22:11,640
user so for example in imagine if you

00:22:10,230 --> 00:22:13,410
have a website that's only used by you

00:22:11,640 --> 00:22:15,420
you can have a build step where you

00:22:13,410 --> 00:22:17,760
fetch will decrease them are done by the

00:22:15,420 --> 00:22:21,390
client and you can save them and then

00:22:17,760 --> 00:22:22,790
you can instead of doing a post request

00:22:21,390 --> 00:22:25,950
to the server you can do a get request

00:22:22,790 --> 00:22:28,290
say oh I want to do a query with this ID

00:22:25,950 --> 00:22:30,240
and then the backend is going to get the

00:22:28,290 --> 00:22:32,430
query for you and gonna return the data

00:22:30,240 --> 00:22:34,530
and it it's easily it's easy to catch

00:22:32,430 --> 00:22:35,790
because the quiz not gonna change it's

00:22:34,530 --> 00:22:38,130
only gonna change if you do another

00:22:35,790 --> 00:22:41,790
deploy or so which is quite handy and

00:22:38,130 --> 00:22:43,800
also if you only have static quiz you

00:22:41,790 --> 00:22:46,500
won't have any problem we like nesting

00:22:43,800 --> 00:22:49,170
or malicious quiz because the quiz are

00:22:46,500 --> 00:22:50,700
limited to what you have and I think

00:22:49,170 --> 00:22:52,110
this is something that histogram is

00:22:50,700 --> 00:22:55,410
doing because I was checking the code

00:22:52,110 --> 00:22:56,910
and they basically they send like

00:22:55,410 --> 00:23:00,300
request to graph to the graphical

00:22:56,910 --> 00:23:02,160
endpoint passing an ID which is a longer

00:23:00,300 --> 00:23:07,190
D with the equally query and the

00:23:02,160 --> 00:23:09,630
variables as well some consideration

00:23:07,190 --> 00:23:11,430
I've been using graphical I think more

00:23:09,630 --> 00:23:14,340
less for a year and a couple of projects

00:23:11,430 --> 00:23:18,450
and we are using on other other products

00:23:14,340 --> 00:23:20,460
are still being built and it's I think

00:23:18,450 --> 00:23:24,500
it's quite handy especially if you have

00:23:20,460 --> 00:23:26,520
to work with many developers because I

00:23:24,500 --> 00:23:28,140
really love the fact that you have the

00:23:26,520 --> 00:23:29,670
commutation between for example I was

00:23:28,140 --> 00:23:31,920
working on an internal project that we

00:23:29,670 --> 00:23:34,350
have many different mutation every time

00:23:31,920 --> 00:23:36,900
I was finishing some mutation I was

00:23:34,350 --> 00:23:39,660
turning into the like front end person

00:23:36,900 --> 00:23:42,120
that was going to be in the form of the

00:23:39,660 --> 00:23:45,000
like front-end part say oh I've done

00:23:42,120 --> 00:23:46,980
this mutation and it was okay and I was

00:23:45,000 --> 00:23:49,440
checking the documentation by a by

00:23:46,980 --> 00:23:51,930
itself without having asking me to not

00:23:49,440 --> 00:23:56,640
change something or how something worked

00:23:51,930 --> 00:23:58,680
which is quite handy yeah I think it's

00:23:56,640 --> 00:24:00,900
quite nice it's probably still early in

00:23:58,680 --> 00:24:04,410
the Python world because this is a

00:24:00,900 --> 00:24:06,930
strategy that's mainly used by big

00:24:04,410 --> 00:24:09,210
companies where they use a JavaScript

00:24:06,930 --> 00:24:12,540
place backend technology

00:24:09,210 --> 00:24:15,540
and so we see left to we probably we can

00:24:12,540 --> 00:24:17,340
improve the library quite a lot but yeah

00:24:15,540 --> 00:24:18,620
I really would like to see people using

00:24:17,340 --> 00:24:21,870
this and

00:24:18,620 --> 00:24:24,450
and improving the library so if you have

00:24:21,870 --> 00:24:25,610
any question you can feel free to ask me

00:24:24,450 --> 00:24:26,410
thank you

00:24:25,610 --> 00:24:30,900
[Applause]

00:24:26,410 --> 00:24:32,960
[Music]

00:24:30,900 --> 00:24:36,099
[Applause]

00:24:32,960 --> 00:24:36,099
[Music]

00:24:37,580 --> 00:24:45,830
Thank You Patrick I want to take

00:24:41,370 --> 00:24:49,710
questions I assume yes okay

00:24:45,830 --> 00:24:52,110
hi Patrick thanks for your talk and I

00:24:49,710 --> 00:24:56,370
knew graphically also it's a nice

00:24:52,110 --> 00:25:00,120
introduction for me and um why do prefer

00:24:56,370 --> 00:25:04,400
or I mean what's the things that you

00:25:00,120 --> 00:25:06,000
prefer a graph QL instead of REST API

00:25:04,400 --> 00:25:07,740
mm-hmm

00:25:06,000 --> 00:25:09,150
I really like the syntax and the fact

00:25:07,740 --> 00:25:11,760
that I don't really have to worry about

00:25:09,150 --> 00:25:13,500
endpoints anymore for example I had some

00:25:11,760 --> 00:25:15,240
issues with that one of the front-end

00:25:13,500 --> 00:25:17,130
developers that they were complaining

00:25:15,240 --> 00:25:21,120
about the way I named some stuff in the

00:25:17,130 --> 00:25:26,100
endpoint so for example I had quits /id

00:25:21,120 --> 00:25:27,480
/ townsville / ID I was with problematic

00:25:26,100 --> 00:25:30,419
well for example graph Cal you can just

00:25:27,480 --> 00:25:32,880
create a mutation that covers answer

00:25:30,419 --> 00:25:36,980
quiz for example in Cisco and it's much

00:25:32,880 --> 00:25:39,450
much easier like this the syntax and to

00:25:36,980 --> 00:25:48,120
exchange information between life

00:25:39,450 --> 00:25:50,160
developers thank you hi thank you I have

00:25:48,120 --> 00:25:52,950
a question do you can you recommend any

00:25:50,160 --> 00:25:55,860
client libraries for JavaScript that are

00:25:52,950 --> 00:25:57,780
help you using graph GL oh definitely

00:25:55,860 --> 00:25:59,669
you saw Apollo Apollo is probably the

00:25:57,780 --> 00:26:01,620
best library so far there are two

00:25:59,669 --> 00:26:03,660
libraries I mean mainly two libraries

00:26:01,620 --> 00:26:06,390
really that's done by Facebook and then

00:26:03,660 --> 00:26:08,520
we support Felicity community one I

00:26:06,390 --> 00:26:13,770
would say and it's really amazing it's

00:26:08,520 --> 00:26:16,730
probably the best one there's time for

00:26:13,770 --> 00:26:16,730
few more questions

00:26:16,820 --> 00:26:23,380
going once twice thank you

00:26:22,500 --> 00:26:29,140
you

00:26:23,380 --> 00:26:29,140

YouTube URL: https://www.youtube.com/watch?v=ix_DSdxgoK0


