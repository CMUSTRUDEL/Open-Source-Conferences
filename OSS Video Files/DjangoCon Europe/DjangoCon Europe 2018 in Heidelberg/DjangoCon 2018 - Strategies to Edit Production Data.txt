Title: DjangoCon 2018 - Strategies to Edit Production Data
Publication date: 2018-05-24
Playlist: DjangoCon Europe 2018 in Heidelberg
Description: 
	https://media.ccc.de/v/hd-45-strategies-to-edit-production-data



Editing data in a production database is sometimes necessary. However, mistakes in running these queries can be disastrous. In this talk, you will learn strategies for making edits to a production database with examples from a Python stack that increase safety and auditability.

At some point, we all find ourselves at a SQL prompt making edits to the production database. We know it’s a bad practice and we always intend to put in place safer infrastructure before we need to do it again — what does a better system actually look like?

This talk progresses through 5 strategies for teams using a Python stack to do SQL writes against a database, to achieve increasing safety and auditability:

(1) Develop a process for raw SQL edits (2) Run scripts locally (3) Run scripts on an existing server (4) Use a task runner (5) Build a Script Runner service

We’ll talk about the pros and cons of each strategy and help you determine which one is right for your specific needs.

By the end of this talk you’ll be ready to start upgrading your infrastructure for making changes to your production database safely!

Julie Qiu
Captions: 
	00:00:07,109 --> 00:00:14,260
welcome back after the break please find

00:00:10,660 --> 00:00:16,779
your seats and we'll continue with a

00:00:14,260 --> 00:00:20,140
topic that is close to many of us who

00:00:16,779 --> 00:00:23,140
have actually run projects in production

00:00:20,140 --> 00:00:26,380
I am sure many of us know the feeling of

00:00:23,140 --> 00:00:31,060
having incorrect data in a production

00:00:26,380 --> 00:00:33,480
database and just fixing it by accessing

00:00:31,060 --> 00:00:37,570
the database via Django or via and

00:00:33,480 --> 00:00:40,240
database shell and running a django or

00:00:37,570 --> 00:00:44,710
sequel command and before hitting enter

00:00:40,240 --> 00:00:47,110
having that feeling of I could remove

00:00:44,710 --> 00:00:50,020
drop or delete all the data in there

00:00:47,110 --> 00:00:52,600
right now oh god I hope I'm okay

00:00:50,020 --> 00:00:54,550
Judy is an engineering manager at spring

00:00:52,600 --> 00:01:04,780
and is going to tell us how we should

00:00:54,550 --> 00:01:07,900
deal with those situations thank you hi

00:01:04,780 --> 00:01:10,750
everyone my name is Julie Q and I spent

00:01:07,900 --> 00:01:12,490
a lot of time working of databases most

00:01:10,750 --> 00:01:14,230
of you have probably run across the

00:01:12,490 --> 00:01:17,680
issue that I'm gonna talk about today

00:01:14,230 --> 00:01:20,650
which is that sometime we all need to

00:01:17,680 --> 00:01:22,000
edit data in production and there's a

00:01:20,650 --> 00:01:24,280
lot of ways that we can go about doing

00:01:22,000 --> 00:01:27,250
this editing some of which are going to

00:01:24,280 --> 00:01:29,080
be better than others so today I'm here

00:01:27,250 --> 00:01:31,600
to share with you the evolution of

00:01:29,080 --> 00:01:34,270
processes that I've helped develop at my

00:01:31,600 --> 00:01:36,520
company hopefully the strategies that

00:01:34,270 --> 00:01:38,320
I'm about to share will make editing

00:01:36,520 --> 00:01:42,430
production data safer at your

00:01:38,320 --> 00:01:45,220
organization - a little bit about me I'm

00:01:42,430 --> 00:01:46,930
an engineering lead at Spring for those

00:01:45,220 --> 00:01:49,810
of you who haven't heard of spring

00:01:46,930 --> 00:01:51,729
before spring is a fashion ecommerce

00:01:49,810 --> 00:01:54,220
marketplace that integrates with

00:01:51,729 --> 00:01:57,610
thousands of different brands at spring

00:01:54,220 --> 00:01:59,440
I lead the catalog team which is one of

00:01:57,610 --> 00:02:01,930
the engineering teams that build out a

00:01:59,440 --> 00:02:04,570
product catalog so this means that I

00:02:01,930 --> 00:02:07,659
spend a lot of time thinking about how

00:02:04,570 --> 00:02:10,090
data gets into our systems and over the

00:02:07,659 --> 00:02:12,939
last few years more often than I would

00:02:10,090 --> 00:02:15,280
like to admit I found myself behind the

00:02:12,939 --> 00:02:17,590
sequel prompt needing to make edits to

00:02:15,280 --> 00:02:20,380
production data

00:02:17,590 --> 00:02:22,270
and after being in that situation a

00:02:20,380 --> 00:02:26,740
couple of times I started to ask myself

00:02:22,270 --> 00:02:29,020
why we're all told that editing data in

00:02:26,740 --> 00:02:34,330
our readwrite database is bad practice

00:02:29,020 --> 00:02:37,120
so why do we all do it anyways well for

00:02:34,330 --> 00:02:39,160
me the first reason is often because the

00:02:37,120 --> 00:02:42,370
internal tools that I need to edit that

00:02:39,160 --> 00:02:44,739
data it's just not available I would

00:02:42,370 --> 00:02:48,520
have used a better method but it doesn't

00:02:44,739 --> 00:02:51,190
exist the second reason is that I ran

00:02:48,520 --> 00:02:53,200
into an edge case so sometimes we

00:02:51,190 --> 00:02:56,200
actually did take the time to build out

00:02:53,200 --> 00:02:58,030
a user interface but it doesn't allow us

00:02:56,200 --> 00:03:00,930
to do all the things that we wanted to

00:02:58,030 --> 00:03:04,720
do or need it to do

00:03:00,930 --> 00:03:06,720
and lastly sometimes you just have to

00:03:04,720 --> 00:03:09,069
make a time-sensitive change and

00:03:06,720 --> 00:03:11,830
connecting to a remote database and

00:03:09,069 --> 00:03:13,830
making an edit can oftentimes just be

00:03:11,830 --> 00:03:16,660
the fastest and the easiest solution

00:03:13,830 --> 00:03:20,069
it's really easy to get behind that

00:03:16,660 --> 00:03:23,049
sequel prompt and execute a query and

00:03:20,069 --> 00:03:24,730
usually if we think about it there's not

00:03:23,049 --> 00:03:28,870
really that much of a problem with it

00:03:24,730 --> 00:03:32,530
either for example let's say I want to

00:03:28,870 --> 00:03:34,480
run this query so I want to update the

00:03:32,530 --> 00:03:36,519
name of the first product in our

00:03:34,480 --> 00:03:40,060
products table to mean name julie's

00:03:36,519 --> 00:03:42,190
product and usually what I need to do

00:03:40,060 --> 00:03:44,079
this before I would do that I would have

00:03:42,190 --> 00:03:47,620
a co-worker look over my shoulder and

00:03:44,079 --> 00:03:51,359
double-check my query but let's just say

00:03:47,620 --> 00:03:53,920
this time it's Friday afternoon and

00:03:51,359 --> 00:03:57,190
someone on the marketing team comes up

00:03:53,920 --> 00:03:59,560
to me and is like Julie I need you to

00:03:57,190 --> 00:04:01,030
make this change the we promise to

00:03:59,560 --> 00:04:02,880
brands would get this in before the

00:04:01,030 --> 00:04:05,170
weekend and they're one of our highest

00:04:02,880 --> 00:04:06,880
performing brands and if you don't do it

00:04:05,170 --> 00:04:10,840
they're going to pull themselves off the

00:04:06,880 --> 00:04:13,600
spring platform so of course I go ahead

00:04:10,840 --> 00:04:15,700
and I write this query and when I'm done

00:04:13,600 --> 00:04:19,660
I realize that everyone has really left

00:04:15,700 --> 00:04:21,789
for the weekend so at this point I could

00:04:19,660 --> 00:04:24,039
you know send a slack message to someone

00:04:21,789 --> 00:04:25,539
on the engineering team reach out to

00:04:24,039 --> 00:04:28,360
them ask them to spot-check me

00:04:25,539 --> 00:04:29,919
but then again I'm thinking I've worked

00:04:28,360 --> 00:04:31,590
at spraying for two years

00:04:29,919 --> 00:04:34,160
I run the catalog team

00:04:31,590 --> 00:04:37,050
I've done this a million times before

00:04:34,160 --> 00:04:42,420
what is the worst thing that's gonna

00:04:37,050 --> 00:04:45,260
happen so I go ahead and I run the query

00:04:42,420 --> 00:04:48,210
I go to the kitchen get some water and

00:04:45,260 --> 00:04:52,350
come back to my desk look down at my

00:04:48,210 --> 00:05:00,510
laptop and I realized this is what I

00:04:52,350 --> 00:05:03,510
actually ran um for those of you who

00:05:00,510 --> 00:05:06,150
aren't familiar with sequel the rest of

00:05:03,510 --> 00:05:08,760
the audience is laughing because they

00:05:06,150 --> 00:05:10,890
realized that I just updated every

00:05:08,760 --> 00:05:25,350
single product in our table to be named

00:05:10,890 --> 00:05:26,790
Julie's product so uh I'm sure that some

00:05:25,350 --> 00:05:29,040
of us are laughing or maybe even

00:05:26,790 --> 00:05:31,320
cringing because we've actually had

00:05:29,040 --> 00:05:33,810
disaster stories similar to the one that

00:05:31,320 --> 00:05:35,880
I just described so before we end up in

00:05:33,810 --> 00:05:39,150
this situation let's talk about some

00:05:35,880 --> 00:05:40,320
strategies for safer editing today we're

00:05:39,150 --> 00:05:43,500
gonna talk through five different

00:05:40,320 --> 00:05:45,360
strategies these include strategies for

00:05:43,500 --> 00:05:48,210
maintaining a raw sequel spreadsheet

00:05:45,360 --> 00:05:50,940
running scripts locally running scripts

00:05:48,210 --> 00:05:53,220
on existing server using a task runner

00:05:50,940 --> 00:05:55,440
and building out a fully fledged script

00:05:53,220 --> 00:05:57,750
runner service we're gonna walk through

00:05:55,440 --> 00:05:59,370
each of these strategies in order of the

00:05:57,750 --> 00:06:01,170
amount of effort it takes for that

00:05:59,370 --> 00:06:03,540
strategy to be implemented at your

00:06:01,170 --> 00:06:05,100
organization and we'll also plot them in

00:06:03,540 --> 00:06:08,430
terms of the benefits that you'll

00:06:05,100 --> 00:06:11,100
receive for each strategy we'll talk

00:06:08,430 --> 00:06:13,530
about three things how that strategy

00:06:11,100 --> 00:06:15,990
works and an example of how to implement

00:06:13,530 --> 00:06:20,040
it what's great about the strategy and

00:06:15,990 --> 00:06:21,690
also what's not so great the examples

00:06:20,040 --> 00:06:24,060
that I'm gonna use in this talk involve

00:06:21,690 --> 00:06:25,920
a Python stack and a sequel database but

00:06:24,060 --> 00:06:28,650
these strategies will actually work for

00:06:25,920 --> 00:06:31,800
any stack of your choice so let's dive

00:06:28,650 --> 00:06:34,020
in the first strategy we're going to

00:06:31,800 --> 00:06:36,300
talk about is relatively simple

00:06:34,020 --> 00:06:38,540
it doesn't require any new code to be

00:06:36,300 --> 00:06:41,490
written or infrastructure to be built

00:06:38,540 --> 00:06:44,040
rather it's simply developing a process

00:06:41,490 --> 00:06:44,880
for making sure that we get spot-checked

00:06:44,040 --> 00:06:47,040
when we make

00:06:44,880 --> 00:06:50,550
it's to production so what does this

00:06:47,040 --> 00:06:52,320
process look like well let's go back to

00:06:50,550 --> 00:06:54,660
that query that I had wanted to run for

00:06:52,320 --> 00:06:57,390
the marketing team I want to update the

00:06:54,660 --> 00:06:59,880
product with ID 1 to be named Julie's

00:06:57,390 --> 00:07:02,190
product and what I did a few slides ago

00:06:59,880 --> 00:07:05,310
was I just went ahead and I edited that

00:07:02,190 --> 00:07:06,930
field without any supervision so we all

00:07:05,310 --> 00:07:09,990
kind of saw that that was a pretty

00:07:06,930 --> 00:07:11,600
dangerous situation to be in so well we

00:07:09,990 --> 00:07:14,070
didn't my company is we started

00:07:11,600 --> 00:07:16,110
maintaining a Google spreadsheet to

00:07:14,070 --> 00:07:18,300
actually record manual sequel queries

00:07:16,110 --> 00:07:19,770
against production this Google

00:07:18,300 --> 00:07:21,990
spreadsheet allowed us to collaborate

00:07:19,770 --> 00:07:24,660
and review each other's queries before

00:07:21,990 --> 00:07:26,310
they got executed it also gave us a

00:07:24,660 --> 00:07:28,470
checklist for what needed to be done

00:07:26,310 --> 00:07:30,450
before running a query against

00:07:28,470 --> 00:07:33,630
production so here's what that checklist

00:07:30,450 --> 00:07:36,290
looks like the first step would be for

00:07:33,630 --> 00:07:39,030
me to add a record to the spreadsheet

00:07:36,290 --> 00:07:42,540
some information I dropped down include

00:07:39,030 --> 00:07:44,550
my name the date a description what the

00:07:42,540 --> 00:07:46,560
query is and then I would actually write

00:07:44,550 --> 00:07:49,200
down who I wanted to review the query

00:07:46,560 --> 00:07:51,150
the query the reviewer would then take a

00:07:49,200 --> 00:07:54,600
look and either approve or request some

00:07:51,150 --> 00:07:56,790
changes the next step after we go back

00:07:54,600 --> 00:07:58,260
and forth a couple of times is for the

00:07:56,790 --> 00:08:03,300
reviewer to go ahead and actually

00:07:58,260 --> 00:08:06,360
approve the query so once you get those

00:08:03,300 --> 00:08:10,260
two thumbs up the next step is to run

00:08:06,360 --> 00:08:12,210
the query we remind everyone to always

00:08:10,260 --> 00:08:14,280
run the query inside our transaction

00:08:12,210 --> 00:08:16,440
that way if anything bad happened they

00:08:14,280 --> 00:08:19,830
can just go ahead and roll back so

00:08:16,440 --> 00:08:21,750
what's great about the system well the

00:08:19,830 --> 00:08:24,450
first is that it's really easy to

00:08:21,750 --> 00:08:26,640
implement you could get this process up

00:08:24,450 --> 00:08:28,890
and running right before the party at

00:08:26,640 --> 00:08:30,840
the end of the day all you have to do is

00:08:28,890 --> 00:08:34,289
make a spreadsheet and write an email

00:08:30,840 --> 00:08:37,250
and describe it to your team but the

00:08:34,289 --> 00:08:40,289
effects can be really powerful and

00:08:37,250 --> 00:08:42,870
that's because this strategy provides us

00:08:40,289 --> 00:08:45,030
with an audit trail so after we

00:08:42,870 --> 00:08:47,430
implemented this process we went from

00:08:45,030 --> 00:08:49,320
having ad hoc queries that we hoped

00:08:47,430 --> 00:08:51,090
people were getting spot-checked to

00:08:49,320 --> 00:08:53,640
having a log of everything that was

00:08:51,090 --> 00:08:56,070
being run against production and who had

00:08:53,640 --> 00:08:57,600
looked at it this audit trail not only

00:08:56,070 --> 00:08:58,130
gave us information about who was

00:08:57,600 --> 00:09:00,470
running

00:08:58,130 --> 00:09:02,270
queries what they were running but also

00:09:00,470 --> 00:09:04,370
information on why they were running

00:09:02,270 --> 00:09:06,350
these queries and this led us to a lot

00:09:04,370 --> 00:09:08,090
of discussions about where maybe we

00:09:06,350 --> 00:09:10,310
should really be investing in internal

00:09:08,090 --> 00:09:14,570
tools or overhauling and rebuilding a

00:09:10,310 --> 00:09:17,270
system entirely and lastly this process

00:09:14,570 --> 00:09:19,220
works to promote the right behaviors so

00:09:17,270 --> 00:09:21,200
it helps to not only encourage everyone

00:09:19,220 --> 00:09:23,090
to be more careful but it also teaches

00:09:21,200 --> 00:09:27,740
engineers what the right things are to

00:09:23,090 --> 00:09:29,540
do and so right now we have a strategy

00:09:27,740 --> 00:09:32,060
that gives us the benefit of data

00:09:29,540 --> 00:09:34,580
editing it requires very little upfront

00:09:32,060 --> 00:09:36,830
investment and we've also implemented a

00:09:34,580 --> 00:09:39,320
manual version of a code review process

00:09:36,830 --> 00:09:42,260
and an audit trail this is great because

00:09:39,320 --> 00:09:44,720
at your average startup raw sequel edits

00:09:42,260 --> 00:09:47,660
are probably not going to go away we

00:09:44,720 --> 00:09:49,790
still use this spreadsheet today but

00:09:47,660 --> 00:09:51,920
this process have made it so that we are

00:09:49,790 --> 00:09:53,750
empowering engineers to avoid mistakes

00:09:51,920 --> 00:09:56,420
by making sure that they get spot

00:09:53,750 --> 00:09:58,640
checked introducing this process also

00:09:56,420 --> 00:10:00,170
made it just slightly more painful for

00:09:58,640 --> 00:10:02,030
people to run queries that they needed

00:10:00,170 --> 00:10:04,460
so then we're encouraged to build better

00:10:02,030 --> 00:10:07,970
tools so what are some things that we're

00:10:04,460 --> 00:10:10,550
not yet getting with this process well

00:10:07,970 --> 00:10:13,040
the first is that it's still pretty easy

00:10:10,550 --> 00:10:14,870
to make mistakes after all we're

00:10:13,040 --> 00:10:16,460
assuming that people are copy and

00:10:14,870 --> 00:10:18,320
pasting the queries that they need from

00:10:16,460 --> 00:10:20,540
the Google spreadsheet to the sequel

00:10:18,320 --> 00:10:23,240
prompt but that might not be true and

00:10:20,540 --> 00:10:26,900
even so errors can happen when we're

00:10:23,240 --> 00:10:29,630
copy and pasting this audit trail is

00:10:26,900 --> 00:10:31,330
also being maintained manually so this

00:10:29,630 --> 00:10:33,860
opens up some room for error

00:10:31,330 --> 00:10:35,360
after all there's really nothing prevent

00:10:33,860 --> 00:10:39,350
something someone from running an

00:10:35,360 --> 00:10:41,510
unchecked query and lastly while it's

00:10:39,350 --> 00:10:44,000
relatively easy to update the names of

00:10:41,510 --> 00:10:46,430
one product it can be difficult to

00:10:44,000 --> 00:10:48,560
execute long and complex logic with raw

00:10:46,430 --> 00:10:50,750
sequel and so if your query takes a

00:10:48,560 --> 00:10:55,280
really long time to run it's gonna time

00:10:50,750 --> 00:10:57,530
out for example let's go back to that

00:10:55,280 --> 00:10:59,870
query that we had been trying to run and

00:10:57,530 --> 00:11:01,630
let's say we want to run some variation

00:10:59,870 --> 00:11:04,130
of it that's a little bit more complex

00:11:01,630 --> 00:11:07,240
what did the marketing team hadn't given

00:11:04,130 --> 00:11:07,240
me a product ID

00:11:07,360 --> 00:11:13,009
what is instead they have come to me and

00:11:09,829 --> 00:11:15,559
said hey Julie we have this brand it's

00:11:13,009 --> 00:11:17,509
called Julie store and right now there's

00:11:15,559 --> 00:11:19,790
a bunch of products in it and we need

00:11:17,509 --> 00:11:21,889
you to update every product that doesn't

00:11:19,790 --> 00:11:24,410
currently have a name but as active to

00:11:21,889 --> 00:11:26,299
be named Julie's product so we can see

00:11:24,410 --> 00:11:30,290
how the queries can get pretty complex

00:11:26,299 --> 00:11:32,449
really quickly so this brings us to our

00:11:30,290 --> 00:11:36,019
next strategy which is writing scripts

00:11:32,449 --> 00:11:38,420
and running them locally to run scripts

00:11:36,019 --> 00:11:42,049
locally we first start by writing the

00:11:38,420 --> 00:11:43,790
script to do this now you would take

00:11:42,049 --> 00:11:46,369
your sequel logic and actually convert

00:11:43,790 --> 00:11:49,429
it to code in your programming language

00:11:46,369 --> 00:11:50,989
of choice mine of course is Python and I

00:11:49,429 --> 00:11:52,910
would usually also add an argument

00:11:50,989 --> 00:11:55,040
parser to my scripts to make them

00:11:52,910 --> 00:11:57,290
reusable especially if I plan to use

00:11:55,040 --> 00:12:00,079
this logic again in the future for

00:11:57,290 --> 00:12:04,339
example say to update product two to

00:12:00,079 --> 00:12:06,139
Julie's other product next we're going

00:12:04,339 --> 00:12:09,410
to form a connection to the production

00:12:06,139 --> 00:12:14,269
database you can use this using a VPN or

00:12:09,410 --> 00:12:15,559
an SSH gateway and lastly you'll go

00:12:14,269 --> 00:12:18,619
ahead and run the script from your

00:12:15,559 --> 00:12:22,040
terminal in Python this is what that

00:12:18,619 --> 00:12:23,660
command would look like and I often like

00:12:22,040 --> 00:12:25,819
to write my scripts in such a way so

00:12:23,660 --> 00:12:28,249
that I can actually add a dry run flag

00:12:25,819 --> 00:12:30,079
that way I can preview the results

00:12:28,249 --> 00:12:32,629
before actually committing changes to

00:12:30,079 --> 00:12:36,350
production so what do we like about the

00:12:32,629 --> 00:12:37,579
strategy well the first thing is that

00:12:36,350 --> 00:12:40,910
scripts

00:12:37,579 --> 00:12:42,679
unlike raw sequel are reusable so you

00:12:40,910 --> 00:12:44,089
only need to write the script once and

00:12:42,679 --> 00:12:46,929
then you can just pass in different

00:12:44,089 --> 00:12:49,399
arguments in the future

00:12:46,929 --> 00:12:51,350
additionally if you need to manipulate

00:12:49,399 --> 00:12:53,689
the outputs of the script it's really

00:12:51,350 --> 00:12:55,809
easy to take it pipe it into a text file

00:12:53,689 --> 00:12:59,660
or another script you might want to run

00:12:55,809 --> 00:13:02,059
and lastly writing a script gives you

00:12:59,660 --> 00:13:04,699
access to all the rest of the code in

00:13:02,059 --> 00:13:06,559
your repository it's easy to import

00:13:04,699 --> 00:13:10,189
functions from common code and reuse

00:13:06,559 --> 00:13:12,799
logic that already exists so looking at

00:13:10,189 --> 00:13:15,199
our journey we now have a strategy that

00:13:12,799 --> 00:13:17,689
gives us two benefits the ability to

00:13:15,199 --> 00:13:20,250
edit and the ability to execute somewhat

00:13:17,689 --> 00:13:22,650
complex logic at this point we

00:13:20,250 --> 00:13:24,390
need to set up any infrastructure so the

00:13:22,650 --> 00:13:27,900
upfront investment is still relatively

00:13:24,390 --> 00:13:30,360
low so a bit higher than just running

00:13:27,900 --> 00:13:34,020
queries we're all sequel what don't we

00:13:30,360 --> 00:13:36,480
get with this process though the first

00:13:34,020 --> 00:13:38,850
is that code review isn't being strictly

00:13:36,480 --> 00:13:41,420
enforced so someone can write and run a

00:13:38,850 --> 00:13:44,190
script without any form of code review

00:13:41,420 --> 00:13:46,620
the outputs of the script are also only

00:13:44,190 --> 00:13:48,450
available on the user's machine and will

00:13:46,620 --> 00:13:51,990
go away as soon as they exit out of the

00:13:48,450 --> 00:13:54,330
terminal and lastly we can run into

00:13:51,990 --> 00:13:56,520
network connectivity issues so the

00:13:54,330 --> 00:13:59,400
script is gonna stop running if say the

00:13:56,520 --> 00:14:01,800
internet dies out or if the user closes

00:13:59,400 --> 00:14:04,800
their computer which kind of begs the

00:14:01,800 --> 00:14:07,670
question what do we do if our scripts

00:14:04,800 --> 00:14:10,290
take a really long time to run for

00:14:07,670 --> 00:14:14,370
example what if I wanted to run this

00:14:10,290 --> 00:14:17,160
query many times in fact that's spring

00:14:14,370 --> 00:14:19,560
we have over 50 million products in our

00:14:17,160 --> 00:14:25,050
database so what if I wanted to update a

00:14:19,560 --> 00:14:27,180
field on all 50 million products well

00:14:25,050 --> 00:14:28,589
usually when I first started working at

00:14:27,180 --> 00:14:31,470
spraying what I would do is I would just

00:14:28,589 --> 00:14:33,960
come to work really early I would get

00:14:31,470 --> 00:14:35,850
there open up my laptop and just let the

00:14:33,960 --> 00:14:37,560
script run and make sure that my laptop

00:14:35,850 --> 00:14:38,130
is plugged in and everything is working

00:14:37,560 --> 00:14:40,980
right

00:14:38,130 --> 00:14:44,040
and this was until one day I was sitting

00:14:40,980 --> 00:14:46,710
there and waiting and waiting and by the

00:14:44,040 --> 00:14:49,710
end of the day only about 25% of the

00:14:46,710 --> 00:14:51,870
table had been processed so I talked to

00:14:49,710 --> 00:14:54,450
my manager at the time and we started

00:14:51,870 --> 00:14:56,940
brainstorming wouldn't it be great if

00:14:54,450 --> 00:14:58,980
there was just a computer out there and

00:14:56,940 --> 00:15:01,620
it was just like my computer and had all

00:14:58,980 --> 00:15:03,810
the configurations I needed except

00:15:01,620 --> 00:15:05,610
unlike my computer we could guarantee

00:15:03,810 --> 00:15:07,410
that it was always connected to the

00:15:05,610 --> 00:15:10,980
Internet and that we didn't have to

00:15:07,410 --> 00:15:13,470
worry about its battery power well

00:15:10,980 --> 00:15:15,930
luckily for us we actually do have a lot

00:15:13,470 --> 00:15:18,030
of ec2 instances running which do just

00:15:15,930 --> 00:15:22,860
that because after all that is how our

00:15:18,030 --> 00:15:24,089
web app and stays up all the time so the

00:15:22,860 --> 00:15:26,580
next strategy we're gonna talk about

00:15:24,089 --> 00:15:28,830
today is how to run the scripts on an

00:15:26,580 --> 00:15:30,310
existing server here's how this will

00:15:28,830 --> 00:15:32,540
work

00:15:30,310 --> 00:15:35,330
similar to running scripts locally I

00:15:32,540 --> 00:15:38,480
would start by writing my migration

00:15:35,330 --> 00:15:41,360
script because we're running the script

00:15:38,480 --> 00:15:43,250
on a server the second step here is we

00:15:41,360 --> 00:15:45,649
actually need to get the script onto the

00:15:43,250 --> 00:15:48,020
server there's a variety of strategies

00:15:45,649 --> 00:15:49,880
for doing this you could deploy or

00:15:48,020 --> 00:15:51,890
effect a copy of the repository the

00:15:49,880 --> 00:15:54,740
script is in or you can upload our

00:15:51,890 --> 00:15:57,500
transfer the script we compile code

00:15:54,740 --> 00:15:59,450
before deploying an application so what

00:15:57,500 --> 00:16:02,330
I would usually do is actually copy the

00:15:59,450 --> 00:16:04,339
script onto the remote server I often

00:16:02,330 --> 00:16:06,050
use Jenkins as the server for which to

00:16:04,339 --> 00:16:07,520
run my scripts on because it's the

00:16:06,050 --> 00:16:11,589
server that we like to run automated

00:16:07,520 --> 00:16:14,330
tasks on such as our deployments and

00:16:11,589 --> 00:16:16,430
after the code exists on the server the

00:16:14,330 --> 00:16:19,060
last step is to just SSH into the server

00:16:16,430 --> 00:16:21,350
and run the script inside a session in

00:16:19,060 --> 00:16:23,390
general this method of running scripts

00:16:21,350 --> 00:16:25,850
on Jenkins has worked really well for me

00:16:23,390 --> 00:16:30,830
and gotten me through some really major

00:16:25,850 --> 00:16:32,839
projects this was until one day I happen

00:16:30,830 --> 00:16:38,270
to notice this message show up in our

00:16:32,839 --> 00:16:40,700
engineering slack channel our uncle

00:16:38,270 --> 00:16:43,070
engineer Maya happened to notice that

00:16:40,700 --> 00:16:45,970
Jenkins was down and so she pinged our

00:16:43,070 --> 00:16:49,370
DevOps leave Justin to let him know and

00:16:45,970 --> 00:16:51,170
I'm a really responsible engineer so of

00:16:49,370 --> 00:16:54,140
course I took the responsible thing and

00:16:51,170 --> 00:16:57,500
also checked and was like yeah hey

00:16:54,140 --> 00:17:00,680
Justin it is down and then I went back

00:16:57,500 --> 00:17:04,040
to doing my work and two minutes later I

00:17:00,680 --> 00:17:09,890
had a realization I think I shut down

00:17:04,040 --> 00:17:12,050
Jenkins ah and my hunch was right it

00:17:09,890 --> 00:17:14,030
turns out that the script that I had

00:17:12,050 --> 00:17:17,660
been running on Jenkins was eating up

00:17:14,030 --> 00:17:19,699
all of the CPU and as a result Jenkins

00:17:17,660 --> 00:17:24,189
was down and none of the engineers could

00:17:19,699 --> 00:17:24,189
actually run their deployments

00:17:30,100 --> 00:17:35,420
it was a really easy fix though all Maya

00:17:33,230 --> 00:17:38,030
had to do was just reboot the server and

00:17:35,420 --> 00:17:40,540
then Jenkins was backup which means that

00:17:38,030 --> 00:17:43,100
this is actually a pretty good strategy

00:17:40,540 --> 00:17:45,740
still from a lot of large projects

00:17:43,100 --> 00:17:47,870
especially if you monitor your code just

00:17:45,740 --> 00:17:50,060
a little bit better than I did

00:17:47,870 --> 00:17:51,890
and also if a little bit of downtime on

00:17:50,060 --> 00:17:54,530
that server isn't the worst thing in the

00:17:51,890 --> 00:17:56,780
world but it definitely I've triggered

00:17:54,530 --> 00:18:01,090
me to start thinking about looking into

00:17:56,780 --> 00:18:03,920
better systems so before we talk about

00:18:01,090 --> 00:18:05,600
improvements to the system what's great

00:18:03,920 --> 00:18:09,440
about running scripts from an existing

00:18:05,600 --> 00:18:11,930
server well the main thing is that you

00:18:09,440 --> 00:18:14,000
can now run long scripts or really any

00:18:11,930 --> 00:18:16,310
scripts without needing to leave your

00:18:14,000 --> 00:18:18,050
computer on you can run your script

00:18:16,310 --> 00:18:21,800
inside a session and then come back and

00:18:18,050 --> 00:18:23,420
just check on it later similarly because

00:18:21,800 --> 00:18:25,970
we're running the script on a remote

00:18:23,420 --> 00:18:28,190
server we have the benefit of a much

00:18:25,970 --> 00:18:29,570
more reliable network connection we

00:18:28,190 --> 00:18:32,630
don't have to worry about things like

00:18:29,570 --> 00:18:35,210
the Wi-Fi getting disconnected and

00:18:32,630 --> 00:18:37,190
lastly you're gonna get all the benefits

00:18:35,210 --> 00:18:38,630
of running scripts on a server and we

00:18:37,190 --> 00:18:41,630
haven't needed to build any new

00:18:38,630 --> 00:18:44,210
infrastructure so when we look at this

00:18:41,630 --> 00:18:46,310
strategy and comparison to raw sequel

00:18:44,210 --> 00:18:48,740
and running local scripts the main

00:18:46,310 --> 00:18:50,210
benefit that we see is that we can now

00:18:48,740 --> 00:18:53,240
run scripts for a really long time

00:18:50,210 --> 00:18:55,820
without worrying that our laptops are

00:18:53,240 --> 00:18:58,490
gonna shut off the script has putting a

00:18:55,820 --> 00:19:00,530
low investment cost there's some DevOps

00:18:58,490 --> 00:19:02,120
configuration involved which makes the

00:19:00,530 --> 00:19:04,220
investment higher than just running the

00:19:02,120 --> 00:19:07,460
script locally but it's still a

00:19:04,220 --> 00:19:11,300
relatively easy system to rely on what

00:19:07,460 --> 00:19:13,700
does in this strategy get us though well

00:19:11,300 --> 00:19:15,800
first this strategy of running scripts

00:19:13,700 --> 00:19:18,380
can affect the resources on the server

00:19:15,800 --> 00:19:20,780
so in my case we used up too much CPU

00:19:18,380 --> 00:19:25,700
but scripts can also consume too much

00:19:20,780 --> 00:19:27,740
memory second the need to actually copy

00:19:25,700 --> 00:19:30,380
the scripts onto the remote server

00:19:27,740 --> 00:19:32,510
SSH into that server and in start a

00:19:30,380 --> 00:19:34,610
screen session it's really not the most

00:19:32,510 --> 00:19:38,540
user-friendly experience and it opens up

00:19:34,610 --> 00:19:40,460
a lot of room for error and lastly we

00:19:38,540 --> 00:19:41,500
still don't have a persistent audit

00:19:40,460 --> 00:19:43,390
trail

00:19:41,500 --> 00:19:45,309
there's logs being outputted onto the

00:19:43,390 --> 00:19:47,650
server but they're proud of gonna get

00:19:45,309 --> 00:19:49,419
lost once the session ends and most

00:19:47,650 --> 00:19:52,059
likely only the engineer running the

00:19:49,419 --> 00:19:54,640
script can actually see them so we can

00:19:52,059 --> 00:19:56,470
do better let's talk about a strategy

00:19:54,640 --> 00:19:59,200
next that is a lot more user-friendly

00:19:56,470 --> 00:20:02,679
for our engineers and has a persistent

00:19:59,200 --> 00:20:05,169
audit trail the next strategy we're

00:20:02,679 --> 00:20:07,630
gonna talk about is using a task runner

00:20:05,169 --> 00:20:09,580
a task runner is something that lets us

00:20:07,630 --> 00:20:12,640
automate the tasks involved in running a

00:20:09,580 --> 00:20:14,350
script so this involves SSH into the

00:20:12,640 --> 00:20:17,440
server setting up a virtual environment

00:20:14,350 --> 00:20:19,659
getting a copy of the code all the

00:20:17,440 --> 00:20:21,940
repetitive things that we had to do when

00:20:19,659 --> 00:20:25,480
we were using an existing server but

00:20:21,940 --> 00:20:27,070
best of all logging is also built-in so

00:20:25,480 --> 00:20:28,929
we set up a test run around Jenkins

00:20:27,070 --> 00:20:30,549
because we use it as our continuous

00:20:28,929 --> 00:20:32,950
integration server for builds and

00:20:30,549 --> 00:20:35,169
deployments Jenkins also lets you write

00:20:32,950 --> 00:20:37,299
code and register our arbitrary jobs and

00:20:35,169 --> 00:20:40,929
the Jenkins build page provided us with

00:20:37,299 --> 00:20:42,700
a free user interface so similar to the

00:20:40,929 --> 00:20:45,280
last out of gee we'll start by writing

00:20:42,700 --> 00:20:48,120
the script then we're gonna get the

00:20:45,280 --> 00:20:51,280
script code review tested and merged and

00:20:48,120 --> 00:20:53,799
lastly now instead of having to SSH into

00:20:51,280 --> 00:20:55,510
the server in order to run the script

00:20:53,799 --> 00:20:58,780
we'll instead just run it from the

00:20:55,510 --> 00:21:00,940
Jenkins interface so to do this you

00:20:58,780 --> 00:21:02,400
would go to the project type the file

00:21:00,940 --> 00:21:04,720
path of the script you want to run

00:21:02,400 --> 00:21:08,500
select the argument that you want to use

00:21:04,720 --> 00:21:10,210
and then click build Jenkins will then

00:21:08,500 --> 00:21:12,070
take care of all the things like setting

00:21:10,210 --> 00:21:14,140
up a virtual environment connecting to

00:21:12,070 --> 00:21:16,270
the remote database and running a script

00:21:14,140 --> 00:21:19,570
with the arguments you input it and you

00:21:16,270 --> 00:21:21,429
can just watch it all happen this

00:21:19,570 --> 00:21:23,350
strategy is great because it's the first

00:21:21,429 --> 00:21:26,140
one we've seen that gives us detailed

00:21:23,350 --> 00:21:28,059
audit logs the logs make it a lot easier

00:21:26,140 --> 00:21:31,380
to monitor the progress of the script

00:21:28,059 --> 00:21:34,570
which is really useful for long scripts

00:21:31,380 --> 00:21:36,370
because the first step of our task

00:21:34,570 --> 00:21:38,860
Runner is to fetch the latest version of

00:21:36,370 --> 00:21:40,419
master all code being run on the task

00:21:38,860 --> 00:21:43,059
runner has to be code reviewed and

00:21:40,419 --> 00:21:44,710
merged into the repository so this means

00:21:43,059 --> 00:21:46,870
that we're now able to enforce code

00:21:44,710 --> 00:21:49,150
review and provide the ability to write

00:21:46,870 --> 00:21:50,680
automated tests before the scripts are

00:21:49,150 --> 00:21:52,690
run

00:21:50,680 --> 00:21:54,610
and lastly we can now run all our

00:21:52,690 --> 00:21:56,770
scripts from a user interface as opposed

00:21:54,610 --> 00:22:00,520
to needing to SSH into a server which

00:21:56,770 --> 00:22:03,040
minimizes room for error and we've come

00:22:00,520 --> 00:22:05,350
pretty far on our journey now at this

00:22:03,040 --> 00:22:08,140
point we have a process for code review

00:22:05,350 --> 00:22:11,140
for a running automated test an audit

00:22:08,140 --> 00:22:13,360
trail and the user interface setting up

00:22:11,140 --> 00:22:15,880
a task runner does take a bit of time

00:22:13,360 --> 00:22:18,070
but when I think about the amount of

00:22:15,880 --> 00:22:20,080
time that our team of 50 engineers has

00:22:18,070 --> 00:22:22,810
been able to save because we don't need

00:22:20,080 --> 00:22:25,480
to do things like manually copy code

00:22:22,810 --> 00:22:27,250
onto a server or figure out how to

00:22:25,480 --> 00:22:30,340
correct mistakes from scripts with no

00:22:27,250 --> 00:22:33,010
logs the upfront investment seems pretty

00:22:30,340 --> 00:22:35,080
worth it there's still some reasons

00:22:33,010 --> 00:22:37,200
though that it's not exactly what we

00:22:35,080 --> 00:22:39,790
want

00:22:37,200 --> 00:22:42,010
mainly if you think about it

00:22:39,790 --> 00:22:43,680
inputting command-line arguments every

00:22:42,010 --> 00:22:47,170
single time you want to run a script

00:22:43,680 --> 00:22:49,300
starts to get pretty annoying it also

00:22:47,170 --> 00:22:51,490
makes managing credentials really hard

00:22:49,300 --> 00:22:54,280
and this is particularly true if you

00:22:51,490 --> 00:22:56,020
have a lot of credentials for us this

00:22:54,280 --> 00:22:58,780
was the main driver to look into better

00:22:56,020 --> 00:23:01,330
solutions after our task runner had been

00:22:58,780 --> 00:23:03,490
launched I found that one engineer was

00:23:01,330 --> 00:23:05,830
still running long scripts by copying

00:23:03,490 --> 00:23:07,930
them onto an existing server and it was

00:23:05,830 --> 00:23:10,600
simply because his script just had over

00:23:07,930 --> 00:23:12,340
30 credentials it was just easier for

00:23:10,600 --> 00:23:14,800
him to store all of his credentials in a

00:23:12,340 --> 00:23:17,410
file on the server and piped them into a

00:23:14,800 --> 00:23:19,090
script when he needed to run it and then

00:23:17,410 --> 00:23:20,740
type in a bunch of configs and other

00:23:19,090 --> 00:23:24,820
than type in a bunch of configs into the

00:23:20,740 --> 00:23:27,190
tasks run or UI there's also not a clear

00:23:24,820 --> 00:23:29,020
separation of environment here so I

00:23:27,190 --> 00:23:30,460
could easily use the database string

00:23:29,020 --> 00:23:31,990
from our dev environment and

00:23:30,460 --> 00:23:36,280
accidentally use credentials from

00:23:31,990 --> 00:23:38,740
production that's not great and lastly

00:23:36,280 --> 00:23:40,720
there's no system in place for us to

00:23:38,740 --> 00:23:44,110
verify the arguments being passed into

00:23:40,720 --> 00:23:46,600
the script for example if I have a

00:23:44,110 --> 00:23:48,940
script to update the name of product 1

00:23:46,600 --> 00:23:51,220
to julie's product no one's there to

00:23:48,940 --> 00:23:53,590
make sure I'm updating product 1 instead

00:23:51,220 --> 00:23:56,410
of product 2 by accident or spelling

00:23:53,590 --> 00:23:58,930
Julie correctly and all of these really

00:23:56,410 --> 00:24:01,140
annoying problems they started to get me

00:23:58,930 --> 00:24:01,140
thinking

00:24:02,040 --> 00:24:07,470
we have all these problems we're dealing

00:24:04,630 --> 00:24:10,390
with configuration management logging

00:24:07,470 --> 00:24:13,390
separating environments haven't we

00:24:10,390 --> 00:24:16,090
solved all these problems before after

00:24:13,390 --> 00:24:18,610
all all of our existing applications do

00:24:16,090 --> 00:24:20,530
this so why have I been trying to

00:24:18,610 --> 00:24:22,150
reinvent the wheel instead of just

00:24:20,530 --> 00:24:25,660
building something with the tools that

00:24:22,150 --> 00:24:28,570
we're already using and so that's what I

00:24:25,660 --> 00:24:30,880
did next I decided to use our existing

00:24:28,570 --> 00:24:33,400
tools to build an application to run

00:24:30,880 --> 00:24:34,930
scripts on our own internal script

00:24:33,400 --> 00:24:36,580
runner service and it would be

00:24:34,930 --> 00:24:38,620
architected like the rest of our Python

00:24:36,580 --> 00:24:42,100
applications so here's the what that

00:24:38,620 --> 00:24:44,050
architecture looks like an application

00:24:42,100 --> 00:24:46,780
server was set up for each environment

00:24:44,050 --> 00:24:48,580
to run scripts each server had access to

00:24:46,780 --> 00:24:50,980
credentials that we stored in high era

00:24:48,580 --> 00:24:53,290
which are common to all the other ec2

00:24:50,980 --> 00:24:55,180
instances in its environment the

00:24:53,290 --> 00:24:57,310
application was set up to connect to the

00:24:55,180 --> 00:24:59,380
database in its respective environment

00:24:57,310 --> 00:25:01,600
and the steps were running the script

00:24:59,380 --> 00:25:04,300
are really similar to that with using a

00:25:01,600 --> 00:25:07,060
task runner so first we'd start by

00:25:04,300 --> 00:25:10,330
writing the script then we get a code

00:25:07,060 --> 00:25:13,030
review tested and merged and then lastly

00:25:10,330 --> 00:25:13,840
and the key difference here between the

00:25:13,030 --> 00:25:16,120
invar

00:25:13,840 --> 00:25:18,970
this strategy and the test Runner is

00:25:16,120 --> 00:25:21,220
that the user no longer needed to input

00:25:18,970 --> 00:25:23,170
a series of command-line arguments all

00:25:21,220 --> 00:25:24,610
they needed to do was select the

00:25:23,170 --> 00:25:26,800
environment they wanted to run the

00:25:24,610 --> 00:25:30,730
scripted and this is what it looks like

00:25:26,800 --> 00:25:33,880
to run a script with this UI so the user

00:25:30,730 --> 00:25:35,590
would go to the user interface type in

00:25:33,880 --> 00:25:37,960
the file path the script they wanted to

00:25:35,590 --> 00:25:40,360
run select the environment and then

00:25:37,960 --> 00:25:42,070
click build and all the command-line

00:25:40,360 --> 00:25:44,530
arguments that we have to manually input

00:25:42,070 --> 00:25:46,300
before they're now available just as

00:25:44,530 --> 00:25:48,790
environment variables on the script on

00:25:46,300 --> 00:25:50,830
our server which brings us to some of

00:25:48,790 --> 00:25:53,890
the key benefits of the script in our

00:25:50,830 --> 00:25:56,410
service the first of which is a

00:25:53,890 --> 00:25:58,180
centralized configuration management so

00:25:56,410 --> 00:26:00,730
we now have a system for using

00:25:58,180 --> 00:26:02,890
credentials in our script that is a lot

00:26:00,730 --> 00:26:06,550
more organized than selecting a bunch of

00:26:02,890 --> 00:26:08,350
dropdowns from command lines the second

00:26:06,550 --> 00:26:09,970
is that the strategy allows us to

00:26:08,350 --> 00:26:11,100
maintain a clear separation of

00:26:09,970 --> 00:26:14,399
environment

00:26:11,100 --> 00:26:16,830
and lastly this strategy is the most

00:26:14,399 --> 00:26:19,200
user-friendly of all the strategies that

00:26:16,830 --> 00:26:21,269
we've seen and the amazing thing about

00:26:19,200 --> 00:26:22,710
the script under service though is that

00:26:21,269 --> 00:26:26,700
it doesn't have to stop there

00:26:22,710 --> 00:26:28,919
there's even more that we can do so for

00:26:26,700 --> 00:26:31,620
example as we're trying to grow our

00:26:28,919 --> 00:26:33,720
engineering team if a lot of engineers

00:26:31,620 --> 00:26:35,190
need to run scripts at the same time we

00:26:33,720 --> 00:26:38,789
can just paralyze and scare our

00:26:35,190 --> 00:26:40,259
instances to make that possible if we

00:26:38,789 --> 00:26:42,149
wanted to preview the effects of our

00:26:40,259 --> 00:26:44,549
scripts on the database before

00:26:42,149 --> 00:26:46,620
committing changes we could build that

00:26:44,549 --> 00:26:50,370
preview mode functionality into script

00:26:46,620 --> 00:26:52,919
runner and ultimately in the end it's up

00:26:50,370 --> 00:26:54,600
to you on to decide how you want to

00:26:52,919 --> 00:26:59,159
customize your own version of script

00:26:54,600 --> 00:27:01,379
Runner so we've seen today a spectrum of

00:26:59,159 --> 00:27:04,200
the tools that you can use for editing

00:27:01,379 --> 00:27:08,750
production data so some of you might

00:27:04,200 --> 00:27:11,519
want to know which strategy should I use

00:27:08,750 --> 00:27:14,309
well ultimately that depends on the

00:27:11,519 --> 00:27:16,470
needs of your team and your organization

00:27:14,309 --> 00:27:18,600
so if your organization is small and

00:27:16,470 --> 00:27:20,580
things like speed is really important

00:27:18,600 --> 00:27:23,129
and making mistakes once in a while

00:27:20,580 --> 00:27:25,830
isn't the worst thing raw sequel edits

00:27:23,129 --> 00:27:28,799
might make the most sense for you but if

00:27:25,830 --> 00:27:31,289
your team is larger and as your team is

00:27:28,799 --> 00:27:33,120
growing you might need more important

00:27:31,289 --> 00:27:34,769
functionality and want to think about

00:27:33,120 --> 00:27:38,220
investing and building out a script on

00:27:34,769 --> 00:27:40,799
our service you can't have 50 engineers

00:27:38,220 --> 00:27:42,210
jumping into a Google spreadsheet every

00:27:40,799 --> 00:27:45,899
single time that they need to make an

00:27:42,210 --> 00:27:47,669
edit to production so for us as our

00:27:45,899 --> 00:27:49,500
engineering team was growing building

00:27:47,669 --> 00:27:52,169
out a script on our service made a lot

00:27:49,500 --> 00:27:53,820
of sense but the key here is that as you

00:27:52,169 --> 00:27:55,529
think about growing your business and

00:27:53,820 --> 00:27:57,929
growing the size of engineering team

00:27:55,529 --> 00:27:59,639
make sure that you are also thinking

00:27:57,929 --> 00:28:01,769
about building out the internal tools

00:27:59,639 --> 00:28:05,279
needed to support them and allow them to

00:28:01,769 --> 00:28:08,490
do their best work which kind of brings

00:28:05,279 --> 00:28:10,139
me to a key learning that I had in the

00:28:08,490 --> 00:28:13,080
course of building out these tools for

00:28:10,139 --> 00:28:14,580
my team and the first is that when

00:28:13,080 --> 00:28:17,490
you're building out tools for your team

00:28:14,580 --> 00:28:19,980
it's important to not think to not only

00:28:17,490 --> 00:28:22,740
think about safety but also think about

00:28:19,980 --> 00:28:24,930
speed and usability because after all

00:28:22,740 --> 00:28:27,300
that's why we all get behind the seat

00:28:24,930 --> 00:28:29,370
prompt in the first place in the same

00:28:27,300 --> 00:28:30,840
way that it's important to think about

00:28:29,370 --> 00:28:33,210
the end-user when you're building out

00:28:30,840 --> 00:28:34,650
consumer applications it's also the

00:28:33,210 --> 00:28:36,330
thing important to think about making

00:28:34,650 --> 00:28:38,580
something usable for your engineers

00:28:36,330 --> 00:28:42,450
because after all engineers are also

00:28:38,580 --> 00:28:44,390
people and on the flip side of that a

00:28:42,450 --> 00:28:47,250
lot of times we find ourselves doing

00:28:44,390 --> 00:28:49,740
things that we all know that we

00:28:47,250 --> 00:28:51,540
shouldn't be doing we're all guilty of

00:28:49,740 --> 00:28:53,550
sort of looking at something thinking

00:28:51,540 --> 00:28:55,980
about it and then being like you know

00:28:53,550 --> 00:28:57,810
what we really shouldn't do it like this

00:28:55,980 --> 00:28:59,640
like I really shouldn't just be editing

00:28:57,810 --> 00:29:01,770
production data without any supervision

00:28:59,640 --> 00:29:04,080
and then two seconds later turning

00:29:01,770 --> 00:29:06,660
around and then doing it anyways

00:29:04,080 --> 00:29:09,240
you should think about taking the time

00:29:06,660 --> 00:29:12,480
to invest the effort upfront to build

00:29:09,240 --> 00:29:15,210
the tools you need ideally before you

00:29:12,480 --> 00:29:18,690
edit the names of 50 million products to

00:29:15,210 --> 00:29:21,090
Julie's product thank you all for

00:29:18,690 --> 00:29:22,050
listening and if you have any questions

00:29:21,090 --> 00:29:23,640
I'll be here for the rest of the

00:29:22,050 --> 00:29:26,680
conference or you can reach out to me on

00:29:23,640 --> 00:29:27,690
twitter @ JQ 25 thank you

00:29:26,680 --> 00:29:30,880
[Applause]

00:29:27,690 --> 00:29:30,880
[Music]

00:29:33,580 --> 00:29:38,649
thank you very much that was a very very

00:29:36,350 --> 00:29:41,570
interesting talk and I think we can all

00:29:38,649 --> 00:29:43,880
well very many of us can relate to the

00:29:41,570 --> 00:29:46,630
problems and solutions you brought us

00:29:43,880 --> 00:29:46,630

YouTube URL: https://www.youtube.com/watch?v=z27t32_qwt8


