Title: DjangoCon 2019 - Reduce, Reuse, Recycle - Persisting WebSocket connections with SharedWorkers
Publication date: 2019-04-23
Playlist: DjangoCon Europe 2019 in Copenhagen
Description: 
	https://2019.djangocon.eu/talks/reduce-reuse-recycle-persisting-websocket-connecti/

By Aaron Basset: https://twitter.com/aaronbassett
Captions: 
	00:00:00,000 --> 00:00:06,240
[Applause]

00:00:03,770 --> 00:00:07,170
yes this is this is kind of Union it's

00:00:06,240 --> 00:00:09,330
the first time I'm being on a stage with

00:00:07,170 --> 00:00:11,340
like proper spotlights so I can't

00:00:09,330 --> 00:00:12,809
actually see anybody I'm not decided yet

00:00:11,340 --> 00:00:13,620
if I like this or if this is a good

00:00:12,809 --> 00:00:15,179
thing or a bad thing

00:00:13,620 --> 00:00:18,150
but yeah I think you for an objection so

00:00:15,179 --> 00:00:21,420
I'm I'm our ambassador my talk is on

00:00:18,150 --> 00:00:24,590
reduce reuse recycle it's actually gonna

00:00:21,420 --> 00:00:27,180
be a byte WebSockets and how we can

00:00:24,590 --> 00:00:29,099
persist and reuse WebSockets using local

00:00:27,180 --> 00:00:30,240
shared workers so what that's going to

00:00:29,099 --> 00:00:32,850
do with Django is we're going to be

00:00:30,240 --> 00:00:36,690
using Django channels to actually create

00:00:32,850 --> 00:00:38,940
our WebSocket server as well so my name

00:00:36,690 --> 00:00:40,620
again Aaron Bassett you can find me most

00:00:38,940 --> 00:00:41,940
places as iron Bassett I am NOT

00:00:40,620 --> 00:00:44,850
imaginative that's my twitter and my

00:00:41,940 --> 00:00:46,710
github and everything else um if you do

00:00:44,850 --> 00:00:51,059
follow me on Twitter I normally tweet

00:00:46,710 --> 00:00:54,180
about - travel pictures hi idiotic

00:00:51,059 --> 00:00:55,410
brexit as usual kind of stuff I will be

00:00:54,180 --> 00:00:57,329
tweeting later on today they will buy

00:00:55,410 --> 00:00:58,980
all the code and things that I've

00:00:57,329 --> 00:01:01,140
written for this talk so if you would

00:00:58,980 --> 00:01:02,820
like to have a deeper dive into the code

00:01:01,140 --> 00:01:05,070
itself or to give the demos a try

00:01:02,820 --> 00:01:08,729
yourself and you'll find out all on my

00:01:05,070 --> 00:01:12,299
my Twitter later on this afternoon so I

00:01:08,729 --> 00:01:13,680
am a developer advocate for anybody

00:01:12,299 --> 00:01:15,540
who's never heard the term developer

00:01:13,680 --> 00:01:17,280
advocate before it's basically a

00:01:15,540 --> 00:01:18,390
recovering software engineer who knows

00:01:17,280 --> 00:01:21,180
spends a lot of time writing and

00:01:18,390 --> 00:01:23,939
sleeping on airplanes I work for a

00:01:21,180 --> 00:01:27,780
company called maximal check out this

00:01:23,939 --> 00:01:30,840
noisy branding we've been a sponsor here

00:01:27,780 --> 00:01:33,060
of Django coin for for 30 years now I

00:01:30,840 --> 00:01:34,950
think which is basically the length of

00:01:33,060 --> 00:01:39,450
time our developer relations team is in

00:01:34,950 --> 00:01:41,220
existence we do ap is for telephone and

00:01:39,450 --> 00:01:43,860
SMS and all kind of stuff I'm not gonna

00:01:41,220 --> 00:01:45,299
go into that now if you want to talk to

00:01:43,860 --> 00:01:47,189
us about it we have the Biff they're

00:01:45,299 --> 00:01:49,290
there come speak to us but Django coin

00:01:47,189 --> 00:01:50,759
is is one of our favorites conferences

00:01:49,290 --> 00:01:52,500
it's it's personally one of my favorites

00:01:50,759 --> 00:01:53,939
as well it's actually the conference

00:01:52,500 --> 00:01:56,159
where I give my first ever conference

00:01:53,939 --> 00:02:02,460
talk was a Django coin Europe back in

00:01:56,159 --> 00:02:04,799
2015 in Cardiff for years I had that

00:02:02,460 --> 00:02:06,509
talk I was actually weirdly talking

00:02:04,799 --> 00:02:08,160
about WebSockets as well there's a

00:02:06,509 --> 00:02:10,860
number talk about doing effortless

00:02:08,160 --> 00:02:13,980
real-time apps in Django and I at that

00:02:10,860 --> 00:02:15,870
time in order to do WebSockets in Django

00:02:13,980 --> 00:02:21,980
the real-time apps it was a little bit

00:02:15,870 --> 00:02:24,629
more complexities today so slightly so

00:02:21,980 --> 00:02:27,060
yeah so that was a good kind of 45

00:02:24,629 --> 00:02:29,670
minute talk on basically how you could

00:02:27,060 --> 00:02:31,890
mangle together jangle and tornado and

00:02:29,670 --> 00:02:35,069
Redis to to allow you to have WebSocket

00:02:31,890 --> 00:02:35,879
connections I'm my first conference talk

00:02:35,069 --> 00:02:37,319
I was quite proud of it

00:02:35,879 --> 00:02:38,940
I was quite looking forward to becoming

00:02:37,319 --> 00:02:40,410
one of these speakers he throws the

00:02:38,940 --> 00:02:43,140
world you know giving the same talk over

00:02:40,410 --> 00:02:46,140
and over again and then after my talk I

00:02:43,140 --> 00:02:47,310
went to one of the breaks and a

00:02:46,140 --> 00:02:49,769
gentleman one of the core developers

00:02:47,310 --> 00:02:51,299
that I'm beside me I was with a very

00:02:49,769 --> 00:02:53,340
interesting conversation on what they

00:02:51,299 --> 00:02:56,400
felt the the direction for Django should

00:02:53,340 --> 00:02:57,090
be with async a person was Andrew hey

00:02:56,400 --> 00:03:00,120
Andrew

00:02:57,090 --> 00:03:01,590
I'm basically two weeks to the day after

00:03:00,120 --> 00:03:04,410
my talk this email alighted on the

00:03:01,590 --> 00:03:05,519
Django developers mailing list so if

00:03:04,410 --> 00:03:07,709
it's too small for people to read

00:03:05,519 --> 00:03:10,470
basically this is Andrea and I'm Ching

00:03:07,709 --> 00:03:17,879
channels and completely making my entire

00:03:10,470 --> 00:03:19,650
talk obsolete so nice i i know

00:03:17,879 --> 00:03:21,780
technology has a shelf life and things

00:03:19,650 --> 00:03:23,250
move on and like if you're watching a

00:03:21,780 --> 00:03:25,410
conference video or writing a blog post

00:03:23,250 --> 00:03:26,790
you know a couple years later you expect

00:03:25,410 --> 00:03:32,940
things to be slightly different but two

00:03:26,790 --> 00:03:34,200
weeks but yeah i kind of better as you

00:03:32,940 --> 00:03:36,750
saw from that the graph i had at the

00:03:34,200 --> 00:03:38,609
start there things were very very

00:03:36,750 --> 00:03:41,549
complicated before channels came along i

00:03:38,609 --> 00:03:43,109
did an entire 45 minute talk basically

00:03:41,549 --> 00:03:44,940
just and how you get WebSockets working

00:03:43,109 --> 00:03:47,519
in django i think in this talk i'm

00:03:44,940 --> 00:03:49,940
setting up at our channel consumers is

00:03:47,519 --> 00:03:53,819
going to be maybe like four slides so

00:03:49,940 --> 00:03:55,680
yeah as much as as it pained me to have

00:03:53,819 --> 00:03:59,099
to stop giving that talk after its first

00:03:55,680 --> 00:04:00,359
starting and it's we've really have

00:03:59,099 --> 00:04:03,139
moved a long way with channels and

00:04:00,359 --> 00:04:05,489
andrew deserves a lot of kudos for that

00:04:03,139 --> 00:04:10,199
so I keep talking about WebSockets and

00:04:05,489 --> 00:04:12,930
what our WebSockets so if we go back to

00:04:10,199 --> 00:04:19,079
the the prehistoric days of browsers

00:04:12,930 --> 00:04:20,820
yeah all the way back to 1997 back then

00:04:19,079 --> 00:04:22,950
if you if you decline come to you and

00:04:20,820 --> 00:04:24,960
wanted to have any kind of real time and

00:04:22,950 --> 00:04:27,390
their applications say their their kids

00:04:24,960 --> 00:04:28,250
are constantly on this new AOL Instant

00:04:27,390 --> 00:04:30,380
Messenger

00:04:28,250 --> 00:04:33,140
you know they want to add chat to their

00:04:30,380 --> 00:04:35,060
website as well you basically only had

00:04:33,140 --> 00:04:38,210
one tool available to you and that was

00:04:35,060 --> 00:04:39,530
iframes you know 1997 iframes weren't

00:04:38,210 --> 00:04:41,330
just Internet Explorer and that was the

00:04:39,530 --> 00:04:44,390
first time you could actually update a

00:04:41,330 --> 00:04:45,740
partial part of the page before that

00:04:44,390 --> 00:04:47,360
point if you wanted to update anything

00:04:45,740 --> 00:04:49,610
in a web browser you had to issue a new

00:04:47,360 --> 00:04:50,840
full Rizzo refresh or full request to

00:04:49,610 --> 00:04:52,640
the server and do the whole request

00:04:50,840 --> 00:04:53,840
response cycle again with the

00:04:52,640 --> 00:04:55,820
introduction of iframes we could now

00:04:53,840 --> 00:04:58,370
start to update just partial parts of

00:04:55,820 --> 00:05:00,530
the page or if you use a technique

00:04:58,370 --> 00:05:03,740
called forever frames then essentially

00:05:00,530 --> 00:05:05,660
you got your server to send a header

00:05:03,740 --> 00:05:09,260
which says that the transfer encoding is

00:05:05,660 --> 00:05:11,540
chunked so chunked means that the server

00:05:09,260 --> 00:05:14,090
doesn't actually know how big the file

00:05:11,540 --> 00:05:16,160
is going to be so ask the browser to

00:05:14,090 --> 00:05:18,940
essentially can continue downloading the

00:05:16,160 --> 00:05:22,760
file until the server tells at the stop

00:05:18,940 --> 00:05:24,560
so whenever you've got a forever frame

00:05:22,760 --> 00:05:27,380
open like that then your server can

00:05:24,560 --> 00:05:30,280
start pushing out script tags to it so

00:05:27,380 --> 00:05:33,800
essentially what we have here is the

00:05:30,280 --> 00:05:35,930
size of the chunk and then a script tag

00:05:33,800 --> 00:05:37,040
with some JavaScript in it so your

00:05:35,930 --> 00:05:38,720
server could continuously push out new

00:05:37,040 --> 00:05:40,460
script tags and in this the JavaScript

00:05:38,720 --> 00:05:43,820
get executed within the iframe on the

00:05:40,460 --> 00:05:46,910
site and until you basically send a

00:05:43,820 --> 00:05:48,320
chunk of a0 size then that frame would

00:05:46,910 --> 00:05:50,570
just keep trying to load for as long as

00:05:48,320 --> 00:05:52,280
it could that allowed you to essentially

00:05:50,570 --> 00:05:54,740
push I and things we rendered in the

00:05:52,280 --> 00:05:56,690
browser any kind of real-time fashion I

00:05:54,740 --> 00:05:58,100
only worked because JavaScript so the

00:05:56,690 --> 00:05:59,480
browser renders JavaScript as soon as it

00:05:58,100 --> 00:06:01,010
received it it wouldn't wait for the

00:05:59,480 --> 00:06:02,840
entire page to unload before I would

00:06:01,010 --> 00:06:05,140
execute the JavaScript and this became

00:06:02,840 --> 00:06:07,880
the basis of a technique known as comet

00:06:05,140 --> 00:06:09,530
now I comment went through a couple of

00:06:07,880 --> 00:06:12,590
variations you know it started off we're

00:06:09,530 --> 00:06:14,150
using iframes flash made an appearance

00:06:12,590 --> 00:06:16,130
for a while as well you could do comment

00:06:14,150 --> 00:06:18,410
with flashy there was comment using

00:06:16,130 --> 00:06:21,740
ActiveX controls or Java applets

00:06:18,410 --> 00:06:23,780
eventually moved on to JavaScript where

00:06:21,740 --> 00:06:26,420
we're using the XML HTTP request objects

00:06:23,780 --> 00:06:29,630
or Ajax which was the really cool thing

00:06:26,420 --> 00:06:31,010
like five years ago and in Ajax this

00:06:29,630 --> 00:06:33,350
example here is using a technique called

00:06:31,010 --> 00:06:35,240
long polling so essentially in long

00:06:33,350 --> 00:06:37,520
polling you're opening up a Ajax

00:06:35,240 --> 00:06:39,320
connection to the server and it's just

00:06:37,520 --> 00:06:41,600
keeping that connection open for I think

00:06:39,320 --> 00:06:42,020
this one's like 60 seconds now at

00:06:41,600 --> 00:06:44,030
anymore

00:06:42,020 --> 00:06:45,410
in turn at 60 seconds if the browser has

00:06:44,030 --> 00:06:47,629
some new information to provide to the

00:06:45,410 --> 00:06:50,569
client and it sends information through

00:06:47,629 --> 00:06:52,759
the on success handler fires and we

00:06:50,569 --> 00:06:55,190
started a new polling back to the server

00:06:52,759 --> 00:06:57,590
again or if the server doesn't have any

00:06:55,190 --> 00:07:00,020
information within before the time I the

00:06:57,590 --> 00:07:02,180
time is reached then we fire our on

00:07:00,020 --> 00:07:03,800
failure Handler and we start a new pool

00:07:02,180 --> 00:07:06,080
again so it's just we're constantly

00:07:03,800 --> 00:07:08,060
pulling information server for new

00:07:06,080 --> 00:07:11,810
information now there's a few problems

00:07:08,060 --> 00:07:13,099
with this the first is it's a hack you

00:07:11,810 --> 00:07:14,270
know this is not the way this technology

00:07:13,099 --> 00:07:15,530
was supposed to be used it's not how it

00:07:14,270 --> 00:07:17,870
was envisioned that was going to be used

00:07:15,530 --> 00:07:19,460
so it turned ideas pretty brittle you

00:07:17,870 --> 00:07:20,889
know there were a different ways in

00:07:19,460 --> 00:07:24,770
which different browsers dealt with

00:07:20,889 --> 00:07:26,270
certain time I'd set cetera and yeah it

00:07:24,770 --> 00:07:28,130
was something you could never really

00:07:26,270 --> 00:07:29,840
depend upon and that's why a lot of the

00:07:28,130 --> 00:07:31,280
different combat frameworks would have

00:07:29,840 --> 00:07:33,380
multiple different ways of doing this

00:07:31,280 --> 00:07:35,930
you know ones might fall back to iframes

00:07:33,380 --> 00:07:38,120
or what might have ActiveX controls that

00:07:35,930 --> 00:07:39,409
fall back to flash and etc etc etc you

00:07:38,120 --> 00:07:40,879
know we had to have all these different

00:07:39,409 --> 00:07:42,590
kind of feel overs and different methods

00:07:40,879 --> 00:07:44,569
and each one had its own limitations and

00:07:42,590 --> 00:07:48,469
of like having different rims and from

00:07:44,569 --> 00:07:50,389
and it was just a mess the second

00:07:48,469 --> 00:07:53,030
problem with is the server's not really

00:07:50,389 --> 00:07:55,819
designed to hold open connections for

00:07:53,030 --> 00:07:57,469
this length of time you know web servers

00:07:55,819 --> 00:07:59,360
at the time we're essentially designed

00:07:57,469 --> 00:08:01,490
that whenever a request comes through

00:07:59,360 --> 00:08:02,840
that it would get the answer to that

00:08:01,490 --> 00:08:05,330
request as quick as I could and send it

00:08:02,840 --> 00:08:06,949
as a response so you could have a single

00:08:05,330 --> 00:08:09,169
process like you know could be dealing

00:08:06,949 --> 00:08:11,090
with multiple people because a lower the

00:08:09,169 --> 00:08:13,490
process the actual requests are queued

00:08:11,090 --> 00:08:14,569
each request is finishing quickly enough

00:08:13,490 --> 00:08:15,979
that you can just cool long straight to

00:08:14,569 --> 00:08:18,169
the next request and keep answering them

00:08:15,979 --> 00:08:20,090
that way whenever we got to long polling

00:08:18,169 --> 00:08:22,340
we're holding the connection open for

00:08:20,090 --> 00:08:24,560
you know multiple seconds a minute maybe

00:08:22,340 --> 00:08:26,840
more then you can very quickly start to

00:08:24,560 --> 00:08:30,050
use up your server resources and if

00:08:26,840 --> 00:08:32,300
third issue actually is file size so

00:08:30,050 --> 00:08:34,070
whenever you're making HTTP requests

00:08:32,300 --> 00:08:37,640
there's a lot of information gets passed

00:08:34,070 --> 00:08:40,070
around in headers so this is a h-2b

00:08:37,640 --> 00:08:41,479
request to the Django clang your website

00:08:40,070 --> 00:08:42,919
it's very typical to sell requests it's

00:08:41,479 --> 00:08:44,390
actually smaller than a lot of them

00:08:42,919 --> 00:08:45,709
because I don't have any cookie

00:08:44,390 --> 00:08:47,390
information I don't believe in that one

00:08:45,709 --> 00:08:48,440
so cookies can obviously take up a lot

00:08:47,390 --> 00:08:49,550
of information as well and they're

00:08:48,440 --> 00:08:50,600
passed back and forward in each request

00:08:49,550 --> 00:08:52,370
you've got all the things there but

00:08:50,600 --> 00:08:55,130
which languages I'm willing to accept

00:08:52,370 --> 00:08:55,790
what type of character encodings I can

00:08:55,130 --> 00:08:59,390
accept

00:08:55,790 --> 00:09:02,180
etc etc so with the response as well

00:08:59,390 --> 00:09:04,130
responses reasonably large you know it's

00:09:02,180 --> 00:09:06,320
gonna be telling me things like when the

00:09:04,130 --> 00:09:08,480
file was last updated and etc cetera et

00:09:06,320 --> 00:09:11,360
cetera so with these kind of things then

00:09:08,480 --> 00:09:13,640
it might only have add up to a couple

00:09:11,360 --> 00:09:16,010
hundred bytes when you compare it to a

00:09:13,640 --> 00:09:17,780
WebSocket request and a WebSocket

00:09:16,010 --> 00:09:20,090
response there's obviously a huge

00:09:17,780 --> 00:09:21,020
difference in size so that different

00:09:20,090 --> 00:09:23,570
size I said probably only a couple

00:09:21,020 --> 00:09:24,500
hundred bytes doesn't start Megan you

00:09:23,570 --> 00:09:26,120
should mind in the grand scheme of

00:09:24,500 --> 00:09:28,340
things and it's not if you only have

00:09:26,120 --> 00:09:28,880
like maybe one or two connections so

00:09:28,340 --> 00:09:30,650
that's fine

00:09:28,880 --> 00:09:34,220
you know but as the number of people

00:09:30,650 --> 00:09:36,530
trying to like access your web site

00:09:34,220 --> 00:09:39,200
increases then obviously you're going to

00:09:36,530 --> 00:09:40,670
that a couple hundred bytes or five six

00:09:39,200 --> 00:09:43,280
hundred bytes he's going to I've set the

00:09:40,670 --> 00:09:45,890
build up in fact if you have a hundred

00:09:43,280 --> 00:09:48,740
thousand users pulling once every second

00:09:45,890 --> 00:09:51,770
with a header size so if I think like

00:09:48,740 --> 00:09:52,970
760 bytes or so that Justin headers

00:09:51,770 --> 00:09:56,570
information just information you don't

00:09:52,970 --> 00:09:57,170
actually require is 660 megabytes per

00:09:56,570 --> 00:09:59,300
second

00:09:57,170 --> 00:10:02,180
now if you compare that to 100,000 users

00:09:59,300 --> 00:10:05,330
over WebSockets again pushing data every

00:10:02,180 --> 00:10:07,700
second that is 1.5 megabytes per second

00:10:05,330 --> 00:10:09,440
you know the sorts of saving of only for

00:10:07,700 --> 00:10:10,970
only 100,000 users that's the saving of

00:10:09,440 --> 00:10:13,760
over like six hundred Meg's per second

00:10:10,970 --> 00:10:15,800
you know it becomes substantial uhm and

00:10:13,760 --> 00:10:17,120
I'm looking over here to my Australian

00:10:15,800 --> 00:10:18,290
friends as I'm saying which this stuff

00:10:17,120 --> 00:10:20,810
because obviously if you're dealing with

00:10:18,290 --> 00:10:22,070
countries I have data caps pushing any

00:10:20,810 --> 00:10:24,140
additional information that you don't

00:10:22,070 --> 00:10:26,390
need to send as I see really detrimental

00:10:24,140 --> 00:10:28,910
to your users as well as your your own

00:10:26,390 --> 00:10:30,140
kind of bandwidth usage one of the other

00:10:28,910 --> 00:10:32,750
benefits of WebSockets is they are

00:10:30,140 --> 00:10:34,790
bi-directional so in all the examples I

00:10:32,750 --> 00:10:36,230
had there of long polling we could only

00:10:34,790 --> 00:10:38,000
receive information from the server

00:10:36,230 --> 00:10:39,140
we couldn't I see send information back

00:10:38,000 --> 00:10:41,420
to the server with flights starting

00:10:39,140 --> 00:10:43,040
another request you know so if in the

00:10:41,420 --> 00:10:44,810
middle of our long polling session if we

00:10:43,040 --> 00:10:46,400
suddenly the user and there's some input

00:10:44,810 --> 00:10:48,110
or we have something else we want to

00:10:46,400 --> 00:10:49,760
send the server we need to start a new

00:10:48,110 --> 00:10:50,390
request for it with WebSockets it's

00:10:49,760 --> 00:10:51,650
bi-directional

00:10:50,390 --> 00:10:55,190
we can send the data back and forward

00:10:51,650 --> 00:10:56,540
all the time also WebSockets you don't

00:10:55,190 --> 00:10:58,310
need to just transfer text back and

00:10:56,540 --> 00:11:02,680
forward they can take binary information

00:10:58,310 --> 00:11:05,750
as well so in this example this is a

00:11:02,680 --> 00:11:06,350
recording of a workshop I've given a

00:11:05,750 --> 00:11:08,600
couple of times

00:11:06,350 --> 00:11:09,120
Python workshop and it's actually taking

00:11:08,600 --> 00:11:11,850
the

00:11:09,120 --> 00:11:12,809
audio of a telephone call and sending

00:11:11,850 --> 00:11:16,769
that over a WebSocket

00:11:12,809 --> 00:11:18,689
we take that audio data we send it to

00:11:16,769 --> 00:11:19,980
IBM they do some magic with it and they

00:11:18,689 --> 00:11:22,110
send the spikes and the sentiment

00:11:19,980 --> 00:11:24,449
analysis off the audio so the things

00:11:22,110 --> 00:11:28,319
getting graphed here is whether the

00:11:24,449 --> 00:11:30,449
person is happy sad fearful disgusted or

00:11:28,319 --> 00:11:31,709
joyful and it's all getting done in real

00:11:30,449 --> 00:11:33,600
time and that's all getting pushed over

00:11:31,709 --> 00:11:35,999
WebSockets so the audio data goes

00:11:33,600 --> 00:11:37,410
through to IBM over WebSocket and the

00:11:35,999 --> 00:11:39,240
deity that we send to the browser is

00:11:37,410 --> 00:11:40,529
going over another WebSocket so there

00:11:39,240 --> 00:11:41,910
could be pretty useful for some

00:11:40,529 --> 00:11:43,829
situations you may not it's not just

00:11:41,910 --> 00:11:45,120
like old chat applications and stock

00:11:43,829 --> 00:11:47,699
tickers or things you can do with it as

00:11:45,120 --> 00:11:49,800
well okay before you into the actual

00:11:47,699 --> 00:11:50,910
code there's a few terms that we need to

00:11:49,800 --> 00:11:51,449
know make things a lot easier to

00:11:50,910 --> 00:11:54,480
understand

00:11:51,449 --> 00:11:56,939
WebSockets are event-driven so all these

00:11:54,480 --> 00:11:58,649
are like events that we need to handle

00:11:56,939 --> 00:12:00,300
but so these events can occur pretty

00:11:58,649 --> 00:12:02,040
much at any time it's not like a request

00:12:00,300 --> 00:12:03,779
response where you have a request and

00:12:02,040 --> 00:12:04,860
you have a response to know this an

00:12:03,779 --> 00:12:06,959
event can be triggered and we need to

00:12:04,860 --> 00:12:08,939
have a handler for that so first one is

00:12:06,959 --> 00:12:11,430
on open you know is whenever we create

00:12:08,939 --> 00:12:12,230
our WebSocket connection we have an

00:12:11,430 --> 00:12:14,189
on-message

00:12:12,230 --> 00:12:16,379
now because WebSockets are

00:12:14,189 --> 00:12:17,819
bi-directional this message could be it

00:12:16,379 --> 00:12:19,319
could be triggered on the server or on

00:12:17,819 --> 00:12:21,809
the client depending upon which one is

00:12:19,319 --> 00:12:24,120
sending information we have on error

00:12:21,809 --> 00:12:26,069
which as it sounds like is if there's

00:12:24,120 --> 00:12:28,350
any kind of error in the connection and

00:12:26,069 --> 00:12:29,519
we have on close again on close is

00:12:28,350 --> 00:12:33,569
probably only really ever going to get

00:12:29,519 --> 00:12:35,429
fired normally by the on the server

00:12:33,569 --> 00:12:37,290
whenever the client kills a connection

00:12:35,429 --> 00:12:39,540
but it's possible for it be on the

00:12:37,290 --> 00:12:41,459
client as well the server terminates it

00:12:39,540 --> 00:12:43,350
for whatever reason normally you don't

00:12:41,459 --> 00:12:44,670
need to worry about like actually

00:12:43,350 --> 00:12:46,829
triggering the on close event yourself

00:12:44,670 --> 00:12:49,439
if you close a tab or the browser window

00:12:46,829 --> 00:12:51,120
whatever it'll trigger for you we have a

00:12:49,439 --> 00:12:53,189
couple methods we have our sand method

00:12:51,120 --> 00:12:54,899
this is Harvey send information back and

00:12:53,189 --> 00:12:56,879
forward along that that bi-directional

00:12:54,899 --> 00:12:58,319
WebSocket and let me have our clothes

00:12:56,879 --> 00:12:59,579
which I mentioned we don't really need

00:12:58,319 --> 00:13:00,569
to worry about too much normally

00:12:59,579 --> 00:13:02,699
whenever we're dealing with it and

00:13:00,569 --> 00:13:04,889
browser contacts they'll send the the

00:13:02,699 --> 00:13:07,170
close event for you okay

00:13:04,889 --> 00:13:08,699
so some code so this is the channels

00:13:07,170 --> 00:13:11,730
code die I kind of promised would look

00:13:08,699 --> 00:13:13,050
at to worry I'm gonna blue eye on the

00:13:11,730 --> 00:13:16,439
side so hopefully it's worth but easier

00:13:13,050 --> 00:13:18,389
to see so which channels are very much

00:13:16,439 --> 00:13:21,149
this are very similar to class-based

00:13:18,389 --> 00:13:23,890
views in Django we have a routing file

00:13:21,149 --> 00:13:28,750
which points a your

00:13:23,890 --> 00:13:31,150
one of our consumers and our consumer

00:13:28,750 --> 00:13:34,930
center set up as classes here you can

00:13:31,150 --> 00:13:39,400
see we have a async WebSocket consumer

00:13:34,930 --> 00:13:41,260
class but instead of we're on our class

00:13:39,400 --> 00:13:43,690
based views we would have a gap method

00:13:41,260 --> 00:13:46,030
to handle a get request here we have a

00:13:43,690 --> 00:13:49,450
connect method to handle on connection

00:13:46,030 --> 00:13:50,980
event so interconnect method all this

00:13:49,450 --> 00:13:53,170
consumer is going to do all our

00:13:50,980 --> 00:13:56,640
WebSocket server is going to do is count

00:13:53,170 --> 00:13:58,690
how many clients are connected to it and

00:13:56,640 --> 00:14:00,070
return that information to all the

00:13:58,690 --> 00:14:02,350
clients that connected so when we see

00:14:00,070 --> 00:14:04,000
the demo we can see every time I open a

00:14:02,350 --> 00:14:06,250
new browser contacts it's going to

00:14:04,000 --> 00:14:07,780
increase the number of connections so to

00:14:06,250 --> 00:14:10,510
do that we just store the connections in

00:14:07,780 --> 00:14:11,950
Redis so I have a connections value here

00:14:10,510 --> 00:14:15,340
that I'm incrementing also storing the

00:14:11,950 --> 00:14:16,960
time with last connection and then

00:14:15,340 --> 00:14:18,520
whenever there is a new connection I'm

00:14:16,960 --> 00:14:20,620
going to tell all of the connected

00:14:18,520 --> 00:14:22,150
clients that there's a new connection so

00:14:20,620 --> 00:14:27,280
we can see this update and our browser's

00:14:22,150 --> 00:14:29,290
etc our disconnect handler pretty much

00:14:27,280 --> 00:14:30,730
the same idea you know except in this

00:14:29,290 --> 00:14:32,500
instances of increment in that value

00:14:30,730 --> 00:14:34,450
we're going to decrement that value and

00:14:32,500 --> 00:14:36,280
then we're gonna push that eye again to

00:14:34,450 --> 00:14:38,710
everything that's connected so every

00:14:36,280 --> 00:14:40,870
time there's a new client connects we

00:14:38,710 --> 00:14:43,480
increment the value every time we get

00:14:40,870 --> 00:14:45,160
this connect event we decrease the value

00:14:43,480 --> 00:14:46,300
and we update everything that's

00:14:45,160 --> 00:14:50,080
connected so we can see that happening

00:14:46,300 --> 00:14:52,750
in real time so that's the the

00:14:50,080 --> 00:14:54,100
Channelside code as I said last my give

00:14:52,750 --> 00:14:58,300
this talk about WebSockets it took like

00:14:54,100 --> 00:14:59,620
45 minutes to get to that point so yeah

00:14:58,300 --> 00:15:02,770
thank you so much and really made an

00:14:59,620 --> 00:15:05,170
awful lot easier but yeah so let's look

00:15:02,770 --> 00:15:09,070
at some of the browser side so in the

00:15:05,170 --> 00:15:11,380
browser and we have our chat or

00:15:09,070 --> 00:15:13,600
WebSocket connection so here we're

00:15:11,380 --> 00:15:16,660
creating a connection to the WebSocket

00:15:13,600 --> 00:15:18,670
server and then we have this on message

00:15:16,660 --> 00:15:20,230
event so essentially this is what's

00:15:18,670 --> 00:15:21,760
triggered anytime there is new data

00:15:20,230 --> 00:15:23,620
being sent from the server to the client

00:15:21,760 --> 00:15:26,080
and in this case all that data is going

00:15:23,620 --> 00:15:28,060
to be is a the current connection kinds

00:15:26,080 --> 00:15:30,520
how many clients are connected to our

00:15:28,060 --> 00:15:33,070
server as well as when the last

00:15:30,520 --> 00:15:35,829
connection was we also have a non closed

00:15:33,070 --> 00:15:38,199
so if there is for every and a

00:15:35,829 --> 00:15:39,519
connections is killed that we didn't

00:15:38,199 --> 00:15:40,059
mean to them we'll be notified of that

00:15:39,519 --> 00:15:41,649
as well

00:15:40,059 --> 00:15:44,290
and this is what the demo kind of looks

00:15:41,649 --> 00:15:46,209
like so every time I click this Add

00:15:44,290 --> 00:15:47,639
button what it's going to do is it's

00:15:46,209 --> 00:15:50,139
going to add a new I freedom to the page

00:15:47,639 --> 00:15:51,459
so we can see there as each new I

00:15:50,139 --> 00:15:53,410
freedom is added to the page that's a

00:15:51,459 --> 00:15:55,809
new browser context that creates a new

00:15:53,410 --> 00:15:58,420
connection to our web socket server okay

00:15:55,809 --> 00:15:59,619
as I remove iframes in the page again

00:15:58,420 --> 00:16:01,989
it's going to reduce the number of

00:15:59,619 --> 00:16:03,639
connections to that server so we're back

00:16:01,989 --> 00:16:04,929
in this like two mini cat situation here

00:16:03,639 --> 00:16:07,989
you know every time somebody opens a new

00:16:04,929 --> 00:16:09,369
browser tab or we've got a freedom on

00:16:07,989 --> 00:16:11,290
the page whatever else ripping another

00:16:09,369 --> 00:16:13,410
connection to a WebSocket server as we

00:16:11,290 --> 00:16:16,470
become problematic if you're using a

00:16:13,410 --> 00:16:19,779
likes of pusher which is a service for

00:16:16,470 --> 00:16:21,309
busy offering WebSockets as a service

00:16:19,779 --> 00:16:24,819
and because they charge per connection

00:16:21,309 --> 00:16:26,290
so if you have a customer who's opened

00:16:24,819 --> 00:16:27,879
up pant abs as a browsing your site

00:16:26,290 --> 00:16:29,980
you're paying ten times as much that

00:16:27,879 --> 00:16:31,149
customers you could be and if you're

00:16:29,980 --> 00:16:33,339
doing something we're transferring lots

00:16:31,149 --> 00:16:35,860
of data like the demo I had of doing a

00:16:33,339 --> 00:16:37,720
audio over WebSockets and you've got

00:16:35,860 --> 00:16:38,920
customers get four or five tabs open

00:16:37,720 --> 00:16:40,389
then you're pushing out four or five

00:16:38,920 --> 00:16:44,769
times you might have via that you need

00:16:40,389 --> 00:16:45,249
to be so shared web workers to the

00:16:44,769 --> 00:16:47,829
rescue

00:16:45,249 --> 00:16:50,170
so shared web worker is essentially well

00:16:47,829 --> 00:16:52,899
it's a web worker that's shared what's a

00:16:50,170 --> 00:16:54,369
web worker so web worker is a piece of

00:16:52,899 --> 00:16:57,699
JavaScript that can run outside of the

00:16:54,369 --> 00:16:58,809
main browser context so normally workers

00:16:57,699 --> 00:17:01,269
would be used if you have something

00:16:58,809 --> 00:17:02,980
that's very CPU intensive that you can

00:17:01,269 --> 00:17:04,779
hand off the computation of it to

00:17:02,980 --> 00:17:07,209
essentially a background task a

00:17:04,779 --> 00:17:09,250
different fred with the locking up your

00:17:07,209 --> 00:17:11,139
main browser context so your site is

00:17:09,250 --> 00:17:12,789
still responsive a shared web worker is

00:17:11,139 --> 00:17:15,459
the same idea except it's shared between

00:17:12,789 --> 00:17:18,579
any pages that are on the same origin so

00:17:15,459 --> 00:17:21,909
see him ports same hosts same protocol

00:17:18,579 --> 00:17:26,919
and this is essentially our shared web

00:17:21,909 --> 00:17:28,899
worker so here we have an on connect

00:17:26,919 --> 00:17:31,000
event this is not the on connect event

00:17:28,899 --> 00:17:33,220
for our web sockets this is on connect

00:17:31,000 --> 00:17:35,080
event for our web worker this is a bit

00:17:33,220 --> 00:17:36,549
that tripped me up the most when trying

00:17:35,080 --> 00:17:38,260
to get my head around these concepts as

00:17:36,549 --> 00:17:41,529
they share so many terms that are the

00:17:38,260 --> 00:17:42,880
same so here we are client is not

00:17:41,529 --> 00:17:44,500
connecting to a WebSocket we don't have

00:17:42,880 --> 00:17:46,570
a WebSocket connection yet it's

00:17:44,500 --> 00:17:49,210
connecting to the web worker the shared

00:17:46,570 --> 00:17:51,940
web worker whatever it connects we

00:17:49,210 --> 00:17:53,620
this event this past route has a port on

00:17:51,940 --> 00:17:55,660
it and that's support that we can use

00:17:53,620 --> 00:17:57,160
then to communicate with the browser

00:17:55,660 --> 00:17:59,580
context with the different pages of

00:17:57,160 --> 00:18:02,410
different tabs different frames these

00:17:59,580 --> 00:18:03,610
ports are very much like the WebSocket

00:18:02,410 --> 00:18:05,470
connection itself in that they're

00:18:03,610 --> 00:18:07,180
bi-directional so we can send

00:18:05,470 --> 00:18:09,250
information from our shared worker to

00:18:07,180 --> 00:18:11,020
our page and from our page back to our

00:18:09,250 --> 00:18:13,030
shared worker so we're gonna store a

00:18:11,020 --> 00:18:14,200
list of all of the workers that are

00:18:13,030 --> 00:18:17,560
sorry all of the pages that are

00:18:14,200 --> 00:18:18,970
connected to our worker then we're going

00:18:17,560 --> 00:18:21,460
to check to see if we currently have a

00:18:18,970 --> 00:18:23,200
WebSocket connection if we don't have a

00:18:21,460 --> 00:18:25,300
WebSocket connection then we create it

00:18:23,200 --> 00:18:27,400
and this is WebSocket connection and it

00:18:25,300 --> 00:18:29,920
will be persisted and be used by all of

00:18:27,400 --> 00:18:33,550
the browser contacts that connect to our

00:18:29,920 --> 00:18:36,070
shared worker then finally we have this

00:18:33,550 --> 00:18:37,540
a little bit so this isn't it's

00:18:36,070 --> 00:18:39,670
confusing again so I'm gonna break it

00:18:37,540 --> 00:18:42,910
down like line by line so here we have

00:18:39,670 --> 00:18:44,680
our shared WebSocket on message so this

00:18:42,910 --> 00:18:47,440
is anytime we receive a message on our

00:18:44,680 --> 00:18:50,020
web socket not our web worker but the

00:18:47,440 --> 00:18:51,670
web socket so anytime some new data

00:18:50,020 --> 00:18:54,490
essentially is getting passed from the

00:18:51,670 --> 00:18:56,500
server to our browser as a whole so all

00:18:54,490 --> 00:18:57,760
of our contexts so anything coming from

00:18:56,500 --> 00:19:00,970
the browser to the server it's gonna be

00:18:57,760 --> 00:19:02,800
this on message event then we have our

00:19:00,970 --> 00:19:04,360
connections so this is the connections

00:19:02,800 --> 00:19:06,400
object that we were adding all of our

00:19:04,360 --> 00:19:07,780
browser context to so we're going to

00:19:06,400 --> 00:19:09,280
loop over each of these connections and

00:19:07,780 --> 00:19:11,290
these connections are the browser

00:19:09,280 --> 00:19:13,810
contexts that are connected to our

00:19:11,290 --> 00:19:15,520
shared web worker they're not WebSocket

00:19:13,810 --> 00:19:18,130
connections they are the browser

00:19:15,520 --> 00:19:20,740
contacts connected to our web worker as

00:19:18,130 --> 00:19:22,660
we iterate over each of those then we're

00:19:20,740 --> 00:19:24,610
going to use the send message to send

00:19:22,660 --> 00:19:26,500
the data that we've just received over

00:19:24,610 --> 00:19:28,810
the WebSocket server to each of the

00:19:26,500 --> 00:19:31,420
browser contexts so essentially we're

00:19:28,810 --> 00:19:34,420
using the shared web workers essentially

00:19:31,420 --> 00:19:36,580
a proxy to all of our browser contacts

00:19:34,420 --> 00:19:39,820
so our server has a single point of

00:19:36,580 --> 00:19:40,990
contact which will then disseminate all

00:19:39,820 --> 00:19:42,850
the information to all the browser

00:19:40,990 --> 00:19:44,550
contexts you know so we only have one

00:19:42,850 --> 00:19:47,520
WebSocket connection

00:19:44,550 --> 00:19:51,160
Malta's many browser context as we wish

00:19:47,520 --> 00:19:54,010
so this is what it kind of looks like

00:19:51,160 --> 00:19:55,810
all together then and this is what we

00:19:54,010 --> 00:19:58,600
change on the bright on the browser side

00:19:55,810 --> 00:20:01,330
so before instead of having our

00:19:58,600 --> 00:20:02,510
WebSocket connection we now have our web

00:20:01,330 --> 00:20:04,130
worker connection

00:20:02,510 --> 00:20:05,690
so essentially it's just the location of

00:20:04,130 --> 00:20:09,980
the javascript file they want to execute

00:20:05,690 --> 00:20:13,190
as a web worker and again we have this

00:20:09,980 --> 00:20:14,780
on message now this is not as I said

00:20:13,190 --> 00:20:16,040
they use so much of the similar language

00:20:14,780 --> 00:20:18,230
it can be so easy to get tripped up

00:20:16,040 --> 00:20:20,090
these messages are not messages are

00:20:18,230 --> 00:20:22,160
coming from the WebSocket connection

00:20:20,090 --> 00:20:24,260
their messages are coming from the

00:20:22,160 --> 00:20:26,000
shared web worker so whenever we

00:20:24,260 --> 00:20:27,290
iterated over all those web worker

00:20:26,000 --> 00:20:29,780
connections so we saw in the previous

00:20:27,290 --> 00:20:31,880
couple of slides go and we use that push

00:20:29,780 --> 00:20:33,169
message this is the event that that's

00:20:31,880 --> 00:20:34,250
going to end up triggering so these this

00:20:33,169 --> 00:20:36,200
is running in each of our browser

00:20:34,250 --> 00:20:37,390
context so each of those iframes as you

00:20:36,200 --> 00:20:39,559
get connection to that shared web worker

00:20:37,390 --> 00:20:41,210
that share where workers and opening up

00:20:39,559 --> 00:20:43,130
the communication channel bi-directional

00:20:41,210 --> 00:20:45,919
communication channel and it's can then

00:20:43,130 --> 00:20:47,809
push messages from the worker back into

00:20:45,919 --> 00:20:50,270
the browser context so we have the

00:20:47,809 --> 00:20:52,520
server pushing messages to a worker over

00:20:50,270 --> 00:20:54,290
a WebSocket connection and then we have

00:20:52,520 --> 00:20:57,980
the worker pushing messages to all of

00:20:54,290 --> 00:21:00,830
our browser contexts for ED support and

00:20:57,980 --> 00:21:02,270
what it looks like is this so now you

00:21:00,830 --> 00:21:04,850
can see as I'm clicking the Add button

00:21:02,270 --> 00:21:06,650
we have a connection but as I add more

00:21:04,850 --> 00:21:08,299
and more iframes the number of

00:21:06,650 --> 00:21:10,520
connections doesn't increase it stays

00:21:08,299 --> 00:21:13,970
the same so each of these iframes

00:21:10,520 --> 00:21:16,160
are using that same shared worker one

00:21:13,970 --> 00:21:18,020
thing to note however you can't really

00:21:16,160 --> 00:21:19,850
see in the demo is that shared worker

00:21:18,020 --> 00:21:21,919
will only exist as long as there's at

00:21:19,850 --> 00:21:24,650
least one browser context connected to

00:21:21,919 --> 00:21:26,270
it the second that you close that that

00:21:24,650 --> 00:21:28,910
last project context that workers killed

00:21:26,270 --> 00:21:30,830
as well so you can't start a worker

00:21:28,910 --> 00:21:33,290
doing something in the background close

00:21:30,830 --> 00:21:35,210
your laptop goatees are close your

00:21:33,290 --> 00:21:36,350
browser go do something else come back

00:21:35,210 --> 00:21:38,030
and a couple hires and open the browser

00:21:36,350 --> 00:21:39,290
and reconnect to that worker again that

00:21:38,030 --> 00:21:41,990
worker is gone it's been killed as soon

00:21:39,290 --> 00:21:43,610
as you close your browser so as long as

00:21:41,990 --> 00:21:45,049
you have but as long as you have one at

00:21:43,610 --> 00:21:47,270
least one connection to the worker and

00:21:45,049 --> 00:21:49,070
then that way you can persist it and you

00:21:47,270 --> 00:21:51,559
can connect multiple browser context to

00:21:49,070 --> 00:21:54,440
it it also only works within the same

00:21:51,559 --> 00:21:56,660
browser so in this one on the top is

00:21:54,440 --> 00:21:59,990
Chrome on the bottom is Firefox Firefox

00:21:56,660 --> 00:22:01,820
opens I'm connected to the the same

00:21:59,990 --> 00:22:03,080
WebSocket connection and as you see

00:22:01,820 --> 00:22:05,510
whenever I start adding them then it

00:22:03,080 --> 00:22:07,130
then jumps to two connections but as I

00:22:05,510 --> 00:22:10,309
add more in chrome it doesn't increase

00:22:07,130 --> 00:22:13,280
beyond two so it has one connection per

00:22:10,309 --> 00:22:14,540
browser but you can have as many

00:22:13,280 --> 00:22:16,169
connections in the same browser and I'll

00:22:14,540 --> 00:22:18,359
still use that same shared worker there

00:22:16,169 --> 00:22:25,649
shared between visors speaking of

00:22:18,359 --> 00:22:28,830
browsers browser support is okay um no

00:22:25,649 --> 00:22:31,919
support in an IE reg which is so

00:22:28,830 --> 00:22:34,200
surprising I've not actually had an

00:22:31,919 --> 00:22:36,690
opportunity yet to check it and the

00:22:34,200 --> 00:22:39,029
latest version often next for the one is

00:22:36,690 --> 00:22:41,960
basing chromium I'm assuming it will

00:22:39,029 --> 00:22:45,480
work in that because it works for chrome

00:22:41,960 --> 00:22:47,730
but does not work in IE works in chrome

00:22:45,480 --> 00:22:52,739
works in Firefox it did work in Safari

00:22:47,730 --> 00:22:54,359
and then they removed it which is

00:22:52,739 --> 00:22:55,710
unfortunate because fights memory from

00:22:54,359 --> 00:22:57,809
Safari it's also not supported on iOS

00:22:55,710 --> 00:23:00,840
and it could be pretty useful in iOS I

00:22:57,809 --> 00:23:03,330
wouldn't hold my breath by ever getting

00:23:00,840 --> 00:23:04,559
support again in Safari and this is one

00:23:03,330 --> 00:23:06,629
of the Safari developers whenever they

00:23:04,559 --> 00:23:09,210
were asked about whether or not we'll be

00:23:06,629 --> 00:23:12,119
coming back into Safari um

00:23:09,210 --> 00:23:14,179
the it's unfortunate it's not more

00:23:12,119 --> 00:23:17,759
widely supported and essentially Chrome

00:23:14,179 --> 00:23:20,220
Firefox and opera but you can use object

00:23:17,759 --> 00:23:21,330
detection on it so as you saw I didn't

00:23:20,220 --> 00:23:23,129
need to make any changes to my

00:23:21,330 --> 00:23:25,289
server-side code at all my channel's

00:23:23,129 --> 00:23:26,940
code remained exactly the same for my

00:23:25,289 --> 00:23:28,350
client-side code the code was more or

00:23:26,940 --> 00:23:29,609
less to see him I just abstracted part

00:23:28,350 --> 00:23:31,109
of it away into the worker but the

00:23:29,609 --> 00:23:34,159
actual on message events remained

00:23:31,109 --> 00:23:36,389
exactly the same so while having

00:23:34,159 --> 00:23:38,249
available two browsers that do have

00:23:36,389 --> 00:23:39,809
support for shared web workers while

00:23:38,249 --> 00:23:41,340
also supporting older prices is not an

00:23:39,809 --> 00:23:43,980
issue at all it just means that any of

00:23:41,340 --> 00:23:45,389
your users that have a browser that

00:23:43,980 --> 00:23:48,210
supports it their Ellison going to be

00:23:45,389 --> 00:23:50,309
using it's gonna be more responsive or

00:23:48,210 --> 00:23:52,049
sorry they'll have less latency and it's

00:23:50,309 --> 00:23:54,919
gonna be using less resources for you so

00:23:52,049 --> 00:23:57,480
it's kind of a win-win for both so

00:23:54,919 --> 00:23:59,580
that's pretty much everything I have

00:23:57,480 --> 00:24:01,049
audience I'm gonna stick this slide up

00:23:59,580 --> 00:24:03,299
again so people can follow me and stuff

00:24:01,049 --> 00:24:05,940
I wanted to leave a few minutes for

00:24:03,299 --> 00:24:09,299
questions I'm also going to be on the

00:24:05,940 --> 00:24:11,639
the before the rest today um so if you

00:24:09,299 --> 00:24:14,039
do have any want to talk about it and

00:24:11,639 --> 00:24:15,749
detail or you want to ask me anything

00:24:14,039 --> 00:24:20,039
about channels that I'll just point it

00:24:15,749 --> 00:24:22,730
and Ringo but yeah anybody got any

00:24:20,039 --> 00:24:22,730
questions nein

00:24:29,680 --> 00:24:39,310
oh you guys spotlight as well it's

00:24:35,140 --> 00:24:42,640
awesome okay I'm going to ask two

00:24:39,310 --> 00:24:45,280
questions actually first he said for

00:24:42,640 --> 00:24:48,100
each browser is opening a new connection

00:24:45,280 --> 00:24:48,400
what about incognito mode oh good

00:24:48,100 --> 00:24:50,260
question

00:24:48,400 --> 00:24:52,450
I've not actually tried that to be

00:24:50,260 --> 00:24:55,320
honest so I'm assuming because it's in

00:24:52,450 --> 00:24:58,600
it's another browser context that

00:24:55,320 --> 00:25:00,310
whenever your if this is my assumptions

00:24:58,600 --> 00:25:02,440
I need to verify this I would assume

00:25:00,310 --> 00:25:05,470
that it will treat Ankeny a mode to see

00:25:02,440 --> 00:25:07,450
him as a separate browser so the browser

00:25:05,470 --> 00:25:11,050
contexts within and canítö mode can

00:25:07,450 --> 00:25:12,460
probably share one web worker but they

00:25:11,050 --> 00:25:14,340
won't be able to share it with tabs or

00:25:12,460 --> 00:25:17,110
outside of and creamy mode would be my

00:25:14,340 --> 00:25:22,420
kind of my gut reaction to this I'll

00:25:17,110 --> 00:25:26,080
need to double check though you said

00:25:22,420 --> 00:25:29,890
like okay we close our laptop and the

00:25:26,080 --> 00:25:32,710
connection got closed as value and then

00:25:29,890 --> 00:25:35,020
we open it back but the web page is

00:25:32,710 --> 00:25:40,210
there probably the I don't know I framed

00:25:35,020 --> 00:25:45,130
chat screen yeah okay but if ready we go

00:25:40,210 --> 00:25:46,570
from there to is display or no I can

00:25:45,130 --> 00:25:49,450
just start up again what what I meant

00:25:46,570 --> 00:25:51,970
was if you have and say you're running a

00:25:49,450 --> 00:25:55,420
long computational process and a web

00:25:51,970 --> 00:25:56,740
worker if you close your tab that will

00:25:55,420 --> 00:25:58,120
kill the process so you couldn't like

00:25:56,740 --> 00:26:01,000
started doing some major number

00:25:58,120 --> 00:26:02,530
crunching and then like close out your

00:26:01,000 --> 00:26:05,020
tabs go do something else come back

00:26:02,530 --> 00:26:06,360
later revisit the page and expect it to

00:26:05,020 --> 00:26:08,800
connect back to that same worker

00:26:06,360 --> 00:26:12,160
whenever you close that tab that worker

00:26:08,800 --> 00:26:14,290
is closed as well so what's the shared

00:26:12,160 --> 00:26:15,610
workers obviously they'll remain open as

00:26:14,290 --> 00:26:18,130
long as there's at least one tab or

00:26:15,610 --> 00:26:19,150
further context open for it but as soon

00:26:18,130 --> 00:26:21,790
as you close that it's going to kill the

00:26:19,150 --> 00:26:23,860
worker so whenever you come back

00:26:21,790 --> 00:26:25,240
obviously it can start a new worker can

00:26:23,860 --> 00:26:27,100
start a new WebSocket connection that's

00:26:25,240 --> 00:26:28,900
all fine that a problem there but it

00:26:27,100 --> 00:26:31,570
won't be the same worker that you left

00:26:28,900 --> 00:26:33,100
so any additional data that you've

00:26:31,570 --> 00:26:34,600
stored in the worker any kind of like

00:26:33,100 --> 00:26:36,700
context that you've made available etc

00:26:34,600 --> 00:26:37,900
and that'll all be gone as well so

00:26:36,700 --> 00:26:38,830
you'll need to have some other kind of

00:26:37,900 --> 00:26:40,240
storage whether it be the browser

00:26:38,830 --> 00:26:40,990
storage et cetera that you can populate

00:26:40,240 --> 00:26:45,190
that from

00:26:40,990 --> 00:26:48,309
thank you welcome so some companies have

00:26:45,190 --> 00:26:51,190
the tendency to lock long-running HTTP

00:26:48,309 --> 00:26:52,899
requests and by extension than WebSocket

00:26:51,190 --> 00:26:55,929
since you can proxy every single white

00:26:52,899 --> 00:26:58,029
what do you think would be possible fall

00:26:55,929 --> 00:26:59,590
backs in that regard if you have to

00:26:58,029 --> 00:27:01,600
assume that the WebSocket will get

00:26:59,590 --> 00:27:02,279
killed like after five seconds or

00:27:01,600 --> 00:27:05,740
something

00:27:02,279 --> 00:27:06,970
so we be disappointing if they were

00:27:05,740 --> 00:27:09,159
calling WebSocket connections because

00:27:06,970 --> 00:27:10,539
they're not a long-running HTTP request

00:27:09,159 --> 00:27:12,700
essentially they're a new type of

00:27:10,539 --> 00:27:15,070
connection and they're running over

00:27:12,700 --> 00:27:16,630
their own port it should be easy to

00:27:15,070 --> 00:27:18,220
identify that something is a WebSocket

00:27:16,630 --> 00:27:18,580
connection rather than a regular HTTP

00:27:18,220 --> 00:27:20,890
first

00:27:18,580 --> 00:27:23,380
no no important sorry the scarred-up it

00:27:20,890 --> 00:27:25,059
was easy to detect with something as a

00:27:23,380 --> 00:27:27,549
WebSocket connection rather than a

00:27:25,059 --> 00:27:29,409
regular HTTP connection so in that

00:27:27,549 --> 00:27:31,510
instance it's really dying to whoever is

00:27:29,409 --> 00:27:33,640
configuring the the actual rules for the

00:27:31,510 --> 00:27:36,309
networks you know they should be aware

00:27:33,640 --> 00:27:38,049
that this is not a runaway connection

00:27:36,309 --> 00:27:42,190
you know it's not something that is

00:27:38,049 --> 00:27:44,230
timing it-- or that is not as behaving

00:27:42,190 --> 00:27:46,029
irregularly this is how this is designed

00:27:44,230 --> 00:27:47,919
to behave and I would say that's I see a

00:27:46,029 --> 00:27:49,210
configuration problem with them rather

00:27:47,919 --> 00:27:53,500
than something that we should trying to

00:27:49,210 --> 00:27:56,080
work around with WebSockets enjoyed your

00:27:53,500 --> 00:27:59,529
talk and I'm curious about how this

00:27:56,080 --> 00:28:02,440
changes when after we're using HTTP 1.1

00:27:59,529 --> 00:28:04,750
right now but HTTP 2 is coming down the

00:28:02,440 --> 00:28:06,460
line at all and if it's a long answer I

00:28:04,750 --> 00:28:08,289
can I'm happy but like how does it

00:28:06,460 --> 00:28:11,890
change when all the browsers start using

00:28:08,289 --> 00:28:13,419
HTTP 2 or something like that um I don't

00:28:11,890 --> 00:28:15,070
have to answer that I'm sorry it's not

00:28:13,419 --> 00:28:16,510
something I've looked into I mean but

00:28:15,070 --> 00:28:21,159
yeah I'd be happy to talk about it later

00:28:16,510 --> 00:28:23,409
on hello this it would be possible to

00:28:21,159 --> 00:28:26,200
have a JavaScript library that would

00:28:23,409 --> 00:28:28,090
seamlessly implement it in a web worker

00:28:26,200 --> 00:28:30,760
and if not available

00:28:28,090 --> 00:28:33,700
like in Safari it would fall back to the

00:28:30,760 --> 00:28:35,590
WebSocket and potentially what I think

00:28:33,700 --> 00:28:37,090
probably would be easier to do is to

00:28:35,590 --> 00:28:39,149
switch out whether you're using a shared

00:28:37,090 --> 00:28:41,380
web worker or just a regular web worker

00:28:39,149 --> 00:28:43,809
so most the browser's have good support

00:28:41,380 --> 00:28:45,580
for web workers so really it would be

00:28:43,809 --> 00:28:50,620
changing what your your import was

00:28:45,580 --> 00:28:53,260
essentially thank you very much Aaron

00:28:50,620 --> 00:28:59,829
can we get another big round of applause

00:28:53,260 --> 00:28:59,829

YouTube URL: https://www.youtube.com/watch?v=Z9aLkfgfrW4


