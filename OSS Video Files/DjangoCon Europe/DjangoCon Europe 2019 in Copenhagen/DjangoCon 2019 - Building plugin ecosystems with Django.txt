Title: DjangoCon 2019 - Building plugin ecosystems with Django
Publication date: 2019-04-23
Playlist: DjangoCon Europe 2019 in Copenhagen
Description: 
	NB - Audio missing the first 22 seconds

https://2019.djangocon.eu/talks/building-plugin-ecosystems-with-django/

By Raphael Michel: https://twitter.com/_rami_
Captions: 
	00:00:20,960 --> 00:00:26,869
forretress who of you in this room has

00:00:24,289 --> 00:00:29,180
ever used WordPress in the career okay

00:00:26,869 --> 00:00:30,970
that's what I thought even though we're

00:00:29,180 --> 00:00:33,980
the Python developer conference it's

00:00:30,970 --> 00:00:36,500
half of the audience and let's no

00:00:33,980 --> 00:00:40,159
surprise because WordPress is powering a

00:00:36,500 --> 00:00:42,890
third of the web which i think is hugely

00:00:40,159 --> 00:00:44,989
impressive and it's something where one

00:00:42,890 --> 00:00:47,390
obviously needs to ask why that is and

00:00:44,989 --> 00:00:50,659
how a single platform a single sufferer

00:00:47,390 --> 00:00:52,430
can be can be so successful and one part

00:00:50,659 --> 00:00:56,420
of this is obviously that it's very easy

00:00:52,430 --> 00:00:58,429
to install WordPress on a commodity web

00:00:56,420 --> 00:01:00,920
space that you get for a dollar a month

00:00:58,429 --> 00:01:04,399
everywhere but I think for the most part

00:01:00,920 --> 00:01:06,440
it's because of this there's over 50,000

00:01:04,399 --> 00:01:08,060
plugins you can extend WordPress with

00:01:06,440 --> 00:01:10,729
most of them free some of them

00:01:08,060 --> 00:01:13,310
commercial and and they range from very

00:01:10,729 --> 00:01:15,200
simple things like embedding videos

00:01:13,310 --> 00:01:17,119
easier into your block pairs to very

00:01:15,200 --> 00:01:19,729
complex things example would be

00:01:17,119 --> 00:01:22,159
WooCommerce which is a wordpress plugin

00:01:19,729 --> 00:01:24,800
and at the same time the most successful

00:01:22,159 --> 00:01:29,240
the the most popular e-commerce shop

00:01:24,800 --> 00:01:30,979
system on the web which lives inside

00:01:29,240 --> 00:01:32,509
WordPress WordPress is a lot more than a

00:01:30,979 --> 00:01:36,070
content management system nowadays it's

00:01:32,509 --> 00:01:38,990
an application platform if you like and

00:01:36,070 --> 00:01:40,310
you can like that or not like I'm not

00:01:38,990 --> 00:01:41,240
sure if it's a good idea to put a shop

00:01:40,310 --> 00:01:44,479
system into your content management

00:01:41,240 --> 00:01:47,719
system and but it's possible and it made

00:01:44,479 --> 00:01:50,600
WordPress usually successful I'm the

00:01:47,719 --> 00:01:52,399
founder and main developer of pre tix

00:01:50,600 --> 00:01:55,310
which is both a company and an

00:01:52,399 --> 00:01:57,680
open-source a project it's a ticket shop

00:01:55,310 --> 00:01:59,149
application for for events to sell event

00:01:57,680 --> 00:02:01,100
tickets and it's based on Python and

00:01:59,149 --> 00:02:03,439
Django and from the very beginning in

00:02:01,100 --> 00:02:06,829
2014 when I started this project the key

00:02:03,439 --> 00:02:09,470
design goal was to be extensible to not

00:02:06,829 --> 00:02:12,049
make people fork or patch or monkey

00:02:09,470 --> 00:02:13,760
patch or modify the software when they

00:02:12,049 --> 00:02:15,739
want to run it because events are vastly

00:02:13,760 --> 00:02:17,450
different they have different needs but

00:02:15,739 --> 00:02:20,600
I've seen it in our other project what

00:02:17,450 --> 00:02:23,269
happens if if versions diverge and if

00:02:20,600 --> 00:02:24,769
nobody is able to upgrade anymore and I

00:02:23,269 --> 00:02:28,010
didn't want to run into this situation

00:02:24,769 --> 00:02:29,930
and there's lots of ideas how you can

00:02:28,010 --> 00:02:31,820
extend the software in a similar way on

00:02:29,930 --> 00:02:33,949
how to how you could extend WordPress

00:02:31,820 --> 00:02:34,730
for example in a shop system you might

00:02:33,949 --> 00:02:36,530
want to add

00:02:34,730 --> 00:02:39,349
no payment methods or you want to add

00:02:36,530 --> 00:02:41,299
additional export formats for weird

00:02:39,349 --> 00:02:43,250
accounting software in your country or

00:02:41,299 --> 00:02:45,049
you want to add in completely different

00:02:43,250 --> 00:02:46,400
features for example instead of putting

00:02:45,049 --> 00:02:48,560
it shopping system into content

00:02:46,400 --> 00:02:50,000
management system we could put a content

00:02:48,560 --> 00:02:54,980
management system into a shop system and

00:02:50,000 --> 00:02:57,500
we did so how do we go about building

00:02:54,980 --> 00:03:01,010
such a plugin system and how can we use

00:02:57,500 --> 00:03:03,079
it and I want to talk about some things

00:03:01,010 --> 00:03:05,420
that Django has in store first and some

00:03:03,079 --> 00:03:07,610
things that we need to add ourselves see

00:03:05,420 --> 00:03:12,500
Django has a concept that you might all

00:03:07,610 --> 00:03:14,959
know that is called apps and the Django

00:03:12,500 --> 00:03:16,970
documentation defines apps as a Python

00:03:14,959 --> 00:03:20,480
package that provides set of features

00:03:16,970 --> 00:03:23,030
but it's very vague and it goes on and

00:03:20,480 --> 00:03:25,040
says applications may be reused in

00:03:23,030 --> 00:03:26,930
various projects so most of you have

00:03:25,040 --> 00:03:28,730
probably one or rather multiple

00:03:26,930 --> 00:03:30,349
applications in your Django projects

00:03:28,730 --> 00:03:34,180
with you that you built on your own that

00:03:30,349 --> 00:03:38,540
are probably tightly intertwined and

00:03:34,180 --> 00:03:40,400
your might be using a couple of apps

00:03:38,540 --> 00:03:43,609
from from other authors that you

00:03:40,400 --> 00:03:45,859
actually reused but it's not that simple

00:03:43,609 --> 00:03:48,109
reusable doesn't mean pluggable most

00:03:45,859 --> 00:03:49,310
Django apps out there like let's take is

00:03:48,109 --> 00:03:51,470
a very simple example the pawls

00:03:49,310 --> 00:03:53,419
application that you built when you

00:03:51,470 --> 00:03:56,090
follow the official Django tutorial and

00:03:53,419 --> 00:03:58,880
you can of course add them into multiple

00:03:56,090 --> 00:04:02,120
different websites but it's complex to

00:03:58,880 --> 00:04:03,709
install and integrate them and you need

00:04:02,120 --> 00:04:05,919
to add them to your installed apps you

00:04:03,709 --> 00:04:09,200
need to setup your else you need to

00:04:05,919 --> 00:04:11,450
somehow override templates to make sure

00:04:09,200 --> 00:04:13,970
they fit into your page and you can link

00:04:11,450 --> 00:04:15,260
between them back and forth and they're

00:04:13,970 --> 00:04:16,910
meant for developers and the fuse

00:04:15,260 --> 00:04:19,280
they're fine they can save you a lot of

00:04:16,910 --> 00:04:21,889
time but it's not something that a user

00:04:19,280 --> 00:04:23,870
of your software bore by user I mean

00:04:21,889 --> 00:04:27,770
someone he installs yourself for on a

00:04:23,870 --> 00:04:29,720
server might be able to do so django

00:04:27,770 --> 00:04:32,210
apps are mostly great for functionality

00:04:29,720 --> 00:04:36,169
that coexists but it's only loosely

00:04:32,210 --> 00:04:39,590
integrated like having a news Journal

00:04:36,169 --> 00:04:42,969
website that has a pole section you add

00:04:39,590 --> 00:04:45,800
in that third party polls module there

00:04:42,969 --> 00:04:46,560
but it's not it's not a plugin system

00:04:45,800 --> 00:04:49,300
already

00:04:46,560 --> 00:04:51,069
the other thing that we have in Django

00:04:49,300 --> 00:04:53,979
is signals and if you have never heard

00:04:51,069 --> 00:04:55,210
of signals you can signals are a thing

00:04:53,979 --> 00:04:58,030
that works like this you basically

00:04:55,210 --> 00:04:59,729
define a signal signal is some event

00:04:58,030 --> 00:05:03,819
that happens and you define it by

00:04:59,729 --> 00:05:05,770
instantiating the signal class and then

00:05:03,819 --> 00:05:07,270
you define receivers which are functions

00:05:05,770 --> 00:05:10,599
that will be called whenever the signal

00:05:07,270 --> 00:05:12,039
is fired and then you fire the signal by

00:05:10,599 --> 00:05:13,539
calling the dot send method on the

00:05:12,039 --> 00:05:15,520
signal and behind the scenes it's

00:05:13,539 --> 00:05:17,680
basically a list of functions say

00:05:15,520 --> 00:05:19,930
whenever you use that dot receiver

00:05:17,680 --> 00:05:21,849
decorator it adds a function to the list

00:05:19,930 --> 00:05:23,770
of functions whenever you do the send

00:05:21,849 --> 00:05:25,720
call it calls every function in that

00:05:23,770 --> 00:05:27,430
list and collects responses and gives

00:05:25,720 --> 00:05:29,199
them back to you if you talk about to

00:05:27,430 --> 00:05:30,849
people around here they will tell you

00:05:29,199 --> 00:05:32,740
signals are bad and evil and you

00:05:30,849 --> 00:05:36,430
shouldn't use them and I tell you that

00:05:32,740 --> 00:05:38,229
for a reason because signals when used

00:05:36,430 --> 00:05:39,610
wrongly make your code paths are to

00:05:38,229 --> 00:05:43,569
follow make it hard to debug your

00:05:39,610 --> 00:05:45,370
software and therefore often discouraged

00:05:43,569 --> 00:05:47,169
especially to new users of Jango that

00:05:45,370 --> 00:05:49,000
you shouldn't overuse them and I agree

00:05:47,169 --> 00:05:50,979
you shouldn't overuse them but there are

00:05:49,000 --> 00:05:52,449
some very valid use case especially when

00:05:50,979 --> 00:05:54,159
you try to integrate parts of

00:05:52,449 --> 00:05:56,680
applications that are controlled by

00:05:54,159 --> 00:06:00,639
different entities developing the

00:05:56,680 --> 00:06:03,070
software which we will be end up with so

00:06:00,639 --> 00:06:05,259
what we basically want to do is use

00:06:03,070 --> 00:06:07,840
those concepts we have in Django if Epps

00:06:05,259 --> 00:06:09,460
and signals and bring use them to bring

00:06:07,840 --> 00:06:11,380
them closer together and make it easier

00:06:09,460 --> 00:06:18,789
for people to write plug-ins to your

00:06:11,380 --> 00:06:22,509
software and one of the thing I want to

00:06:18,789 --> 00:06:24,849
add for that is auto-discovery if I've

00:06:22,509 --> 00:06:26,919
plugins an easy installation so what we

00:06:24,849 --> 00:06:31,030
do is in every plugin we haven't under

00:06:26,919 --> 00:06:34,840
in it apply file and it contains an app

00:06:31,030 --> 00:06:37,240
config like modern django apps do it

00:06:34,840 --> 00:06:40,020
looks like any other django app config

00:06:37,240 --> 00:06:41,860
but we we insert an inner class the

00:06:40,020 --> 00:06:43,599
thousands of other ways you could do

00:06:41,860 --> 00:06:46,210
this but we do it like the meta classes

00:06:43,599 --> 00:06:48,219
and models where we specify ok this

00:06:46,210 --> 00:06:50,319
django app is a plug-in and should

00:06:48,219 --> 00:06:52,509
behave like our plugin mechanism does

00:06:50,319 --> 00:06:56,770
and we can add additional metadata like

00:06:52,509 --> 00:06:58,750
name or versioning or whatever and then

00:06:56,770 --> 00:06:59,740
we define already function because one

00:06:58,750 --> 00:07:02,080
thing you need to

00:06:59,740 --> 00:07:04,270
about women using signals that the file

00:07:02,080 --> 00:07:06,300
where your receivers already find

00:07:04,270 --> 00:07:08,560
actually gets imported so that

00:07:06,300 --> 00:07:10,000
decorators actually being executed in

00:07:08,560 --> 00:07:13,000
the functions actually added to the list

00:07:10,000 --> 00:07:15,880
of functions and so that's the common

00:07:13,000 --> 00:07:17,740
source of error and if we define that as

00:07:15,880 --> 00:07:20,590
the default app config for that Python

00:07:17,740 --> 00:07:23,770
module it's fine

00:07:20,590 --> 00:07:25,300
so in itself this does nothing but when

00:07:23,770 --> 00:07:28,419
we combined with a few other things it

00:07:25,300 --> 00:07:30,699
will be and one of those things is the

00:07:28,419 --> 00:07:33,810
setup life all of our plugins or plugins

00:07:30,699 --> 00:07:36,280
are all installable pip packages and

00:07:33,810 --> 00:07:39,099
they have a set up top py file which

00:07:36,280 --> 00:07:42,250
defines the the peckish metadata and

00:07:39,099 --> 00:07:44,620
they have a user feature of the

00:07:42,250 --> 00:07:46,599
packaging ecosystem that is called entry

00:07:44,620 --> 00:07:49,870
points entry points are basically a

00:07:46,599 --> 00:07:52,270
plug-in system on the level of paper of

00:07:49,870 --> 00:07:55,690
the Python packaging ecosystem and when

00:07:52,270 --> 00:07:58,150
you can define a package in your you can

00:07:55,690 --> 00:07:59,680
define an entry point in your package

00:07:58,150 --> 00:08:02,050
definition which basically says I'm

00:07:59,680 --> 00:08:04,690
providing this feature and later you can

00:08:02,050 --> 00:08:06,159
query the package system to get you give

00:08:04,690 --> 00:08:09,849
you all packages you implement that

00:08:06,159 --> 00:08:10,840
feature the syntax is a bit weird and

00:08:09,849 --> 00:08:13,389
ignore that for now

00:08:10,840 --> 00:08:15,490
and then in in our main application in

00:08:13,389 --> 00:08:17,500
our core application we can go into your

00:08:15,490 --> 00:08:21,430
settings file and we can just iterate

00:08:17,500 --> 00:08:23,919
over all of the install packages that

00:08:21,430 --> 00:08:25,780
have said ok I'm the plug-in I provide

00:08:23,919 --> 00:08:27,490
those functionality and we can just add

00:08:25,780 --> 00:08:30,669
them to our install apps automatically

00:08:27,490 --> 00:08:32,200
so now installation of those plugins is

00:08:30,669 --> 00:08:33,909
easy it's something that every system

00:08:32,200 --> 00:08:36,339
administrator can do it's basically pip

00:08:33,909 --> 00:08:38,079
install the plugin and then migrate you

00:08:36,339 --> 00:08:39,490
cannot really do the migrate thing

00:08:38,079 --> 00:08:40,659
automatically because you might want to

00:08:39,490 --> 00:08:42,130
do it in a different environment with

00:08:40,659 --> 00:08:45,220
different database settings and so on

00:08:42,130 --> 00:08:47,890
but everything else you can you can put

00:08:45,220 --> 00:08:49,390
away basically and you might wanna do

00:08:47,890 --> 00:08:51,220
some collect static stuff or anything

00:08:49,390 --> 00:08:55,870
but you can integrate that if you want

00:08:51,220 --> 00:08:57,820
um say so that's nice we can now easily

00:08:55,870 --> 00:08:58,270
install plug-in without changing any

00:08:57,820 --> 00:09:00,430
code

00:08:58,270 --> 00:09:02,050
however the they are still what the apps

00:09:00,430 --> 00:09:04,209
are still not talking to each other and

00:09:02,050 --> 00:09:06,430
the the plugins are still not doing

00:09:04,209 --> 00:09:09,070
anything so the next thing we do is we

00:09:06,430 --> 00:09:11,199
want to do URL routing automatically we

00:09:09,070 --> 00:09:12,580
want to make it possible for the plugins

00:09:11,199 --> 00:09:14,560
to register views

00:09:12,580 --> 00:09:16,750
but it can actually be used so we just

00:09:14,560 --> 00:09:19,510
put in your L stop I file into the

00:09:16,750 --> 00:09:21,420
plugin looks like any other Django

00:09:19,510 --> 00:09:24,190
application nothing special to it at all

00:09:21,420 --> 00:09:29,560
but in the URLs file of your main

00:09:24,190 --> 00:09:31,959
application we iterate over all apps in

00:09:29,560 --> 00:09:34,029
our Django project filter out the ones

00:09:31,959 --> 00:09:37,029
that have said okay I want to be part of

00:09:34,029 --> 00:09:39,640
this plugin mechanism in check if they

00:09:37,029 --> 00:09:43,360
have an URL sub module if so imported

00:09:39,640 --> 00:09:45,970
and then include those URL patterns and

00:09:43,360 --> 00:09:48,550
then we include this list again into

00:09:45,970 --> 00:09:50,890
your main URL patterns and this way we

00:09:48,550 --> 00:09:54,010
automatically have name spacing like we

00:09:50,890 --> 00:09:55,600
automatically assign a namespace based

00:09:54,010 --> 00:09:57,279
on the name of the plug-in to all URLs

00:09:55,600 --> 00:09:59,920
so your plugin authors don't need to

00:09:57,279 --> 00:10:02,410
think about clashing names with other

00:09:59,920 --> 00:10:04,480
plugins and can just easily define their

00:10:02,410 --> 00:10:05,740
views and if you want to be do something

00:10:04,480 --> 00:10:07,899
more advanced and want to be more fancy

00:10:05,740 --> 00:10:11,529
you could do things like automatically

00:10:07,899 --> 00:10:14,560
wrapping all those views in a decorator

00:10:11,529 --> 00:10:18,300
you just define a function that works

00:10:14,560 --> 00:10:20,529
through a URL tree or a URL table and

00:10:18,300 --> 00:10:22,630
attaches the decorator tree every view

00:10:20,529 --> 00:10:25,120
and then then call that function when

00:10:22,630 --> 00:10:27,610
you include it so for example this in

00:10:25,120 --> 00:10:29,740
this case you would make sure that all

00:10:27,610 --> 00:10:31,240
views registered by plugins are only

00:10:29,740 --> 00:10:32,709
accessible by logged in users but it

00:10:31,240 --> 00:10:34,810
could be any permission checks you like

00:10:32,709 --> 00:10:37,180
or any other checks which makes it

00:10:34,810 --> 00:10:39,430
harder for authors of plugins to screw

00:10:37,180 --> 00:10:43,480
things up especially when things changed

00:10:39,430 --> 00:10:45,070
in the main application and and allow

00:10:43,480 --> 00:10:48,250
you to enforce certain constraints

00:10:45,070 --> 00:10:50,260
unless on those views the other thing

00:10:48,250 --> 00:10:52,870
that we need apart from URLs is a way to

00:10:50,260 --> 00:10:56,140
make those views accessible we need to

00:10:52,870 --> 00:10:58,000
make sure that somehow the link to the

00:10:56,140 --> 00:10:59,620
custom view if your plugin ends up in

00:10:58,000 --> 00:11:02,410
the global navigation of your main

00:10:59,620 --> 00:11:05,140
application so we need to make it

00:11:02,410 --> 00:11:06,760
convenient to send signals in places

00:11:05,140 --> 00:11:09,010
where they can be really useful for

00:11:06,760 --> 00:11:12,430
simple things for example we use a

00:11:09,010 --> 00:11:15,040
custom template a tag that sends out a

00:11:12,430 --> 00:11:17,500
signal and collects all the responses

00:11:15,040 --> 00:11:19,480
and just outputs the the responses as

00:11:17,500 --> 00:11:20,860
HTML so you could have something like

00:11:19,480 --> 00:11:22,480
that in your navigation that just

00:11:20,860 --> 00:11:24,370
collects HTML snippets for the

00:11:22,480 --> 00:11:26,529
navigation from from every plugin and

00:11:24,370 --> 00:11:27,819
puts them together

00:11:26,529 --> 00:11:29,769
and the implementation of the staggers

00:11:27,819 --> 00:11:32,949
it's pretty straight for it's mostly

00:11:29,769 --> 00:11:34,660
concerned with importing the signal that

00:11:32,949 --> 00:11:37,240
is specified as a string so that's not

00:11:34,660 --> 00:11:39,420
not really interesting then it iterates

00:11:37,240 --> 00:11:42,129
over all the responses but it gets

00:11:39,420 --> 00:11:44,709
attaches to them to you a list of HTML

00:11:42,129 --> 00:11:46,720
snippets and outputs that do the to the

00:11:44,709 --> 00:11:49,329
template so this way it's it's easy for

00:11:46,720 --> 00:11:51,309
both you and the plugin author to extend

00:11:49,329 --> 00:11:53,620
certain parts of your page for example

00:11:51,309 --> 00:11:55,389
the dashboard or the navigation or cut

00:11:53,620 --> 00:11:57,490
additional things into you the the

00:11:55,389 --> 00:12:02,709
header to include additional CSS files

00:11:57,490 --> 00:12:04,389
and so on whatever you need and with our

00:12:02,709 --> 00:12:06,399
building blocks we already got

00:12:04,389 --> 00:12:08,230
everything to build pretty effective

00:12:06,399 --> 00:12:10,209
plugin system that makes it possibility

00:12:08,230 --> 00:12:11,699
to easily inject additional

00:12:10,209 --> 00:12:15,269
functionality into your main application

00:12:11,699 --> 00:12:18,129
without making it completely messy and

00:12:15,269 --> 00:12:20,019
unable to I'm maintainable and we've

00:12:18,129 --> 00:12:23,410
done this for a few years and some of

00:12:20,019 --> 00:12:24,870
the lessons that we learned is for

00:12:23,410 --> 00:12:27,939
example that's really good to use

00:12:24,870 --> 00:12:30,730
signals like there and Django for simple

00:12:27,939 --> 00:12:34,209
useful things like inserting some HTML

00:12:30,730 --> 00:12:36,160
to dashboard doing an action after some

00:12:34,209 --> 00:12:37,449
business logic event happened like doing

00:12:36,160 --> 00:12:39,959
something after an order was placed

00:12:37,449 --> 00:12:42,490
doing something after an email was sent

00:12:39,959 --> 00:12:44,230
but it doesn't make sense to use signals

00:12:42,490 --> 00:12:46,449
for complex interfaces for some one of

00:12:44,230 --> 00:12:49,629
the more complex things that plugins do

00:12:46,449 --> 00:12:52,360
in prefixes and payment providers like

00:12:49,629 --> 00:12:54,100
if you want it add Bitcoin in there you

00:12:52,360 --> 00:12:57,189
can create a Bitcoin payment provider

00:12:54,100 --> 00:12:59,199
through Apple again and we provide a

00:12:57,189 --> 00:13:00,610
class-based interfaces that we expect

00:12:59,199 --> 00:13:02,379
payment providers to implement with a

00:13:00,610 --> 00:13:04,149
base class that has some utilities and

00:13:02,379 --> 00:13:06,129
defines the interface and plugins are

00:13:04,149 --> 00:13:09,220
supposed to subclass that interface and

00:13:06,129 --> 00:13:13,050
and and implement their custom methods

00:13:09,220 --> 00:13:15,399
and then we just use signals as a way to

00:13:13,050 --> 00:13:17,769
collect those classes and to discover

00:13:15,399 --> 00:13:19,779
them there were other methods to

00:13:17,769 --> 00:13:21,370
discover them you could use meta classes

00:13:19,779 --> 00:13:23,259
or you could use decorators on the class

00:13:21,370 --> 00:13:25,839
or whatever but we decided to have

00:13:23,259 --> 00:13:31,870
signals as the as the single point of

00:13:25,839 --> 00:13:34,600
communication inside the plugins so yeah

00:13:31,870 --> 00:13:36,550
and the other thing that we learned is

00:13:34,600 --> 00:13:38,679
that if you do such a thing you really

00:13:36,550 --> 00:13:40,400
need to write documentation because if

00:13:38,679 --> 00:13:44,990
you don't nobody will ever

00:13:40,400 --> 00:13:46,670
right a plugin for your system another

00:13:44,990 --> 00:13:48,260
thing that but comes in really handy is

00:13:46,670 --> 00:13:49,820
providing a cookie cutter template if

00:13:48,260 --> 00:13:52,760
you've never heard of cookie cutter it's

00:13:49,820 --> 00:13:55,339
basically a way to specify templates for

00:13:52,760 --> 00:13:57,980
for circuit projects or any projects of

00:13:55,339 --> 00:14:00,320
that matter you can basically it's it's

00:13:57,980 --> 00:14:03,140
a template engine for folders so you can

00:14:00,320 --> 00:14:06,170
you can specify all the boilerplate code

00:14:03,140 --> 00:14:12,290
that you need every time and that can

00:14:06,170 --> 00:14:14,000
can easily be included again I'm kind of

00:14:12,290 --> 00:14:15,230
running through this because I mean ever

00:14:14,000 --> 00:14:19,490
since speaking quickly so we have time

00:14:15,230 --> 00:14:21,320
for an advanced topic that is nice our

00:14:19,490 --> 00:14:24,410
application is is a multi-tenant

00:14:21,320 --> 00:14:25,820
application and both of you self hosted

00:14:24,410 --> 00:14:28,610
and if you read the surfer it's the

00:14:25,820 --> 00:14:30,260
service thing and so we have very

00:14:28,610 --> 00:14:32,050
different clients using the application

00:14:30,260 --> 00:14:35,660
and they all share one django instance

00:14:32,050 --> 00:14:38,810
and what we do is we provide them with a

00:14:35,660 --> 00:14:41,150
list of plugins that are available and

00:14:38,810 --> 00:14:43,460
we allow them to turn them on or off Pro

00:14:41,150 --> 00:14:45,529
client and this is really really useful

00:14:43,460 --> 00:14:46,910
for a number of reasons first of all it

00:14:45,529 --> 00:14:48,350
keeps your user interface simple if you

00:14:46,910 --> 00:14:50,209
have a customer who doesn't need a

00:14:48,350 --> 00:14:52,580
certain feature you can just switch it

00:14:50,209 --> 00:14:54,589
off completely you just switch it off in

00:14:52,580 --> 00:14:55,850
that case no signals of that plugin will

00:14:54,589 --> 00:14:57,800
be called for that customer and

00:14:55,850 --> 00:14:59,650
functional has just gone and if they

00:14:57,800 --> 00:15:03,050
need it you can just turn it on again

00:14:59,650 --> 00:15:04,400
you can use that this this approach even

00:15:03,050 --> 00:15:05,900
if you're not building an open-source

00:15:04,400 --> 00:15:07,640
application where other people write

00:15:05,900 --> 00:15:09,800
plugins you could also use it in closed

00:15:07,640 --> 00:15:11,900
source offered to you for example easily

00:15:09,800 --> 00:15:14,779
hide things behind a feature flag you

00:15:11,900 --> 00:15:16,640
could use it to easily implement pricing

00:15:14,779 --> 00:15:20,000
tiers if you Spurs have specific

00:15:16,640 --> 00:15:22,400
functionality that's only available to

00:15:20,000 --> 00:15:24,920
customers who paid a certain amount you

00:15:22,400 --> 00:15:26,959
could just use a similar mechanism to

00:15:24,920 --> 00:15:30,950
just turn if part of your functionally

00:15:26,959 --> 00:15:32,930
completely for them and yet it's it's

00:15:30,950 --> 00:15:35,510
very really offers and the way you

00:15:32,930 --> 00:15:37,790
implement it is basically you need to

00:15:35,510 --> 00:15:40,070
somehow store the list of plugins that

00:15:37,790 --> 00:15:43,370
are enabled for a client or a tenant and

00:15:40,070 --> 00:15:46,220
in our case which is store a comma

00:15:43,370 --> 00:15:49,280
separated list of strings because it's

00:15:46,220 --> 00:15:51,500
simple and then we roll our own version

00:15:49,280 --> 00:15:54,520
of signal which is subclass of Gengo

00:15:51,500 --> 00:16:00,250
signals and it works the same

00:15:54,520 --> 00:16:02,650
except that it there only that it

00:16:00,250 --> 00:16:04,750
requires the client object to be passed

00:16:02,650 --> 00:16:06,790
as a sender sender is kind of weird

00:16:04,750 --> 00:16:08,770
concept of Django signals signals summer

00:16:06,790 --> 00:16:10,660
expect that there's a special argument

00:16:08,770 --> 00:16:13,060
to the signal which is the center which

00:16:10,660 --> 00:16:15,340
makes sense in some cases but not in

00:16:13,060 --> 00:16:19,660
others but it's in there so we reuse it

00:16:15,340 --> 00:16:22,330
here and only if the the sick the

00:16:19,660 --> 00:16:25,320
plug-in is active for that sender we

00:16:22,330 --> 00:16:25,320
actually send out the signal

00:16:25,500 --> 00:16:32,260
so how deciding that again is lots of an

00:16:29,920 --> 00:16:34,480
interesting character getting the Python

00:16:32,260 --> 00:16:37,780
module of a function and then searching

00:16:34,480 --> 00:16:39,580
if it's in that list but you get you

00:16:37,780 --> 00:16:41,170
probably get the basic idea and then we

00:16:39,580 --> 00:16:43,600
use the approach that I talked earlier

00:16:41,170 --> 00:16:45,670
bit I'm automatically applying a

00:16:43,600 --> 00:16:47,620
decorator to all views if a plugin to

00:16:45,670 --> 00:16:49,870
make sure only views are only accessible

00:16:47,620 --> 00:16:55,720
if that plugin is enabled for that

00:16:49,870 --> 00:16:57,460
client say ok that's a plugin system it

00:16:55,720 --> 00:17:00,070
works really well for a couple of years

00:16:57,460 --> 00:17:02,080
now we there's on github and in our

00:17:00,070 --> 00:17:05,319
internal repository there's around 50

00:17:02,080 --> 00:17:07,209
plug-ins for our surfer so the

00:17:05,319 --> 00:17:08,920
approaches proven to do to actually work

00:17:07,209 --> 00:17:14,020
and other people where plugins and

00:17:08,920 --> 00:17:15,760
extended functionality and there's not a

00:17:14,020 --> 00:17:18,280
lot missing there's one thing missing

00:17:15,760 --> 00:17:20,680
that people often asked for and it's if

00:17:18,280 --> 00:17:23,230
you if you think WordPress you think

00:17:20,680 --> 00:17:24,790
logging in to your web interface and

00:17:23,230 --> 00:17:28,660
installing your plugin through the web

00:17:24,790 --> 00:17:30,910
interface and I would say yeah let's

00:17:28,660 --> 00:17:32,770
just not do that and it works really

00:17:30,910 --> 00:17:34,390
really badly with modern deployment

00:17:32,770 --> 00:17:36,400
strategies in a containerized

00:17:34,390 --> 00:17:38,500
environment you cannot modify the source

00:17:36,400 --> 00:17:40,600
code or you shouldn't really modify the

00:17:38,500 --> 00:17:44,950
source code of the application that's

00:17:40,600 --> 00:17:46,870
currently running and it works badly if

00:17:44,950 --> 00:17:49,840
you run on multiple application server

00:17:46,870 --> 00:17:52,330
so it's basically remote code execution

00:17:49,840 --> 00:17:58,990
by a network it's not really something

00:17:52,330 --> 00:18:00,700
you want to do ok I think I have a lot

00:17:58,990 --> 00:18:02,050
of time left for questions and even if

00:18:00,700 --> 00:18:04,240
those questions are please show that

00:18:02,050 --> 00:18:07,090
slide again for longer because it was a

00:18:04,240 --> 00:18:07,430
quick thank you very much and I'm happy

00:18:07,090 --> 00:18:09,790
to talk

00:18:07,430 --> 00:18:09,790
- you ready

00:18:15,950 --> 00:18:20,850
thank you indeed we have a bunch of time

00:18:18,360 --> 00:18:23,970
for questions so please line up at the

00:18:20,850 --> 00:18:28,520
microphone here or ask questions online

00:18:23,970 --> 00:18:33,000
on slack or IRC or Twitter which is

00:18:28,520 --> 00:18:36,750
ringer con QA hi thank you for the great

00:18:33,000 --> 00:18:39,300
talk I probably have like a bunch of

00:18:36,750 --> 00:18:41,160
questions and I might want to talk to

00:18:39,300 --> 00:18:45,870
you after so that I don't bore everybody

00:18:41,160 --> 00:18:49,410
else but my question is with a plugin

00:18:45,870 --> 00:18:52,860
system have you ever run into a case

00:18:49,410 --> 00:18:56,550
where you wanted to add a field to an

00:18:52,860 --> 00:18:58,860
existing model and did you resort to

00:18:56,550 --> 00:19:02,760
contribute to class or did you find

00:18:58,860 --> 00:19:05,640
another way to do it you mean like that

00:19:02,760 --> 00:19:07,650
a plug-in extends an existing model from

00:19:05,640 --> 00:19:10,410
the base application yes yeah and we

00:19:07,650 --> 00:19:12,840
have always avoided to do that in that

00:19:10,410 --> 00:19:13,920
case we would create a separate model in

00:19:12,840 --> 00:19:19,140
the plug-in and have a one-to-one

00:19:13,920 --> 00:19:21,720
relationship because you would end up

00:19:19,140 --> 00:19:24,390
with really weird compatibility problems

00:19:21,720 --> 00:19:26,010
probably if you use contributor class or

00:19:24,390 --> 00:19:29,820
something like that

00:19:26,010 --> 00:19:31,140
I haven't actually explored it I think I

00:19:29,820 --> 00:19:35,400
wouldn't like it from a design

00:19:31,140 --> 00:19:37,080
perspective okay but if you use one to

00:19:35,400 --> 00:19:39,300
one relationship are you are you not

00:19:37,080 --> 00:19:43,670
afraid to end up with really long

00:19:39,300 --> 00:19:46,130
queries that like link 5 models together

00:19:43,670 --> 00:19:52,500
because there are five fun to us

00:19:46,130 --> 00:19:55,650
relationships it's so far not since the

00:19:52,500 --> 00:19:57,540
basic equation doesn't know about the

00:19:55,650 --> 00:20:01,140
plugins the only way such a long career

00:19:57,540 --> 00:20:03,030
could exist is from the plugin and it

00:20:01,140 --> 00:20:05,220
doesn't happen that often that a plugin

00:20:03,030 --> 00:20:08,040
goes through different plugins to build

00:20:05,220 --> 00:20:09,840
a query just didn't occur it it's not a

00:20:08,040 --> 00:20:14,610
problem in practice so far I see your

00:20:09,840 --> 00:20:17,400
point oh okay thank you welcome so first

00:20:14,610 --> 00:20:19,430
of amazing approach to enable and

00:20:17,400 --> 00:20:22,530
disable plugins based on the tenant

00:20:19,430 --> 00:20:24,420
because I was assuming installation in

00:20:22,530 --> 00:20:26,340
your case means activation because you

00:20:24,420 --> 00:20:29,049
also added two installed applications

00:20:26,340 --> 00:20:31,869
but nicely done there on that

00:20:29,049 --> 00:20:34,860
theme and other question what could

00:20:31,869 --> 00:20:36,879
Jenga do to make your plug-in

00:20:34,860 --> 00:20:39,909
infrastructure any easier is there

00:20:36,879 --> 00:20:42,340
something we could add and following

00:20:39,909 --> 00:20:45,100
that what would be needed that this

00:20:42,340 --> 00:20:46,840
plug-in approach because it's probably

00:20:45,100 --> 00:20:49,779
not that much code but still a little

00:20:46,840 --> 00:20:52,600
bit of code to put this into a separate

00:20:49,779 --> 00:20:56,619
application and open source it I'm not

00:20:52,600 --> 00:20:59,019
sure so the thing is it's the system is

00:20:56,619 --> 00:21:01,119
very opinionated on one part so I'm not

00:20:59,019 --> 00:21:03,190
sure it would be something that everyone

00:21:01,119 --> 00:21:07,629
agrees on is the right way to do this

00:21:03,190 --> 00:21:10,299
the other thing is that it's not a lot

00:21:07,629 --> 00:21:13,169
of code and a lot of that code depends

00:21:10,299 --> 00:21:16,330
on your special case for example this

00:21:13,169 --> 00:21:18,009
multi-tenant thing I shared with the

00:21:16,330 --> 00:21:19,960
client model but for us it's it's

00:21:18,009 --> 00:21:23,230
tightly integrated with our customer

00:21:19,960 --> 00:21:25,239
model and yeah it's it's we thought

00:21:23,230 --> 00:21:27,309
about moving it out into separate

00:21:25,239 --> 00:21:28,899
repository and there's someone there was

00:21:27,309 --> 00:21:30,940
a threat and Django developers a couple

00:21:28,899 --> 00:21:33,100
of months ago on this topic I think the

00:21:30,940 --> 00:21:34,480
subject is dynamic dynamic uploading or

00:21:33,100 --> 00:21:37,149
something like that and somebody on that

00:21:34,480 --> 00:21:40,059
red thread implemented a different

00:21:37,149 --> 00:21:41,499
approach to the same problem that he put

00:21:40,059 --> 00:21:42,639
out as a separate library so that's

00:21:41,499 --> 00:21:44,379
something that you might want to check

00:21:42,639 --> 00:21:48,129
out a little bit different but the basic

00:21:44,379 --> 00:21:51,190
idea is the same so I think Django

00:21:48,129 --> 00:21:52,960
shouldn't do a lot about it but just not

00:21:51,190 --> 00:21:55,179
deprecating signals which some people

00:21:52,960 --> 00:21:59,950
asked for at some point so that would be

00:21:55,179 --> 00:22:02,529
nice Hey hi I'm wondering if you could

00:21:59,950 --> 00:22:04,600
tell me if your plugin system is

00:22:02,529 --> 00:22:07,570
pluggable in the sense that I could use

00:22:04,600 --> 00:22:13,629
it in another project where I would like

00:22:07,570 --> 00:22:16,299
to have plugins so basically the code

00:22:13,629 --> 00:22:19,359
examples that I showed are simplified a

00:22:16,299 --> 00:22:22,899
little but they are all working and it's

00:22:19,359 --> 00:22:24,519
not much more going on so it's basically

00:22:22,899 --> 00:22:26,350
the same answers to the previous

00:22:24,519 --> 00:22:29,799
question yes it's it's heart it you pull

00:22:26,350 --> 00:22:31,570
it out it's easy to transfer to another

00:22:29,799 --> 00:22:35,409
application the person standing in line

00:22:31,570 --> 00:22:36,940
in line after you has copied it to two

00:22:35,409 --> 00:22:39,710
other applications so we know it works

00:22:36,940 --> 00:22:44,750
in multiplications

00:22:39,710 --> 00:22:47,240
thanks sorry it's alright

00:22:44,750 --> 00:22:50,570
can you speak to managing dependencies

00:22:47,240 --> 00:22:53,240
and conflicts with your plugins like

00:22:50,570 --> 00:22:56,810
plugins might only work with a certain

00:22:53,240 --> 00:22:59,180
version of critics of the base system or

00:22:56,810 --> 00:23:01,400
might maybe conflict with other plugins

00:22:59,180 --> 00:23:02,870
or even depend on and the plugins that's

00:23:01,400 --> 00:23:06,890
one of the pain points at the moment we

00:23:02,870 --> 00:23:08,480
haven't solved blood yet because plugins

00:23:06,890 --> 00:23:10,280
can currently not specify if they're

00:23:08,480 --> 00:23:12,740
specific to a certain version of the

00:23:10,280 --> 00:23:14,780
base application and we would laugh to

00:23:12,740 --> 00:23:16,730
eat eat we have that checked at pip

00:23:14,780 --> 00:23:19,610
install time it would be easy to check

00:23:16,730 --> 00:23:22,010
it at at run time but that might be too

00:23:19,610 --> 00:23:24,260
late to trigger an error if there is

00:23:22,010 --> 00:23:26,050
something that yeah imports something

00:23:24,260 --> 00:23:29,210
that doesn't exist anymore a sound and

00:23:26,050 --> 00:23:31,700
we're currently avoiding that problem by

00:23:29,210 --> 00:23:34,280
all plugins maintained by us are being

00:23:31,700 --> 00:23:35,960
released on the same date as the

00:23:34,280 --> 00:23:37,790
releases of the of the main project

00:23:35,960 --> 00:23:40,220
which is not a long-term viable solution

00:23:37,790 --> 00:23:44,990
and we're still looking for a good idea

00:23:40,220 --> 00:23:47,000
they're a really great approach if you

00:23:44,990 --> 00:23:49,550
could tell me in terms of migration like

00:23:47,000 --> 00:23:52,490
in admin area when you enable disable

00:23:49,550 --> 00:23:55,040
plugin can me migration can be done on

00:23:52,490 --> 00:23:57,680
that side so we don't need to do on a

00:23:55,040 --> 00:24:00,310
kind of terminal level you are you

00:23:57,680 --> 00:24:03,350
talking about database migrations or

00:24:00,310 --> 00:24:05,840
database migrations come pretty much

00:24:03,350 --> 00:24:08,240
automatically in this approach because

00:24:05,840 --> 00:24:10,640
every plugin has their own and you can

00:24:08,240 --> 00:24:13,580
just run migrate and it does the right

00:24:10,640 --> 00:24:16,610
thing because it's django apps basically

00:24:13,580 --> 00:24:18,590
okay and did you explore a bit off for

00:24:16,610 --> 00:24:21,470
django app registration because some of

00:24:18,590 --> 00:24:23,630
the like a code that can be used so is

00:24:21,470 --> 00:24:26,750
there any kind of disadvantage compared

00:24:23,630 --> 00:24:28,850
to some of the like signaling lengua

00:24:26,750 --> 00:24:31,160
preju stration i've never heard of what

00:24:28,850 --> 00:24:33,080
as the names you might not know the

00:24:31,160 --> 00:24:38,630
project that you're talking about okay i

00:24:33,080 --> 00:24:41,890
know happy to take a look at it sure one

00:24:38,630 --> 00:24:44,330
more question you said that you'd

00:24:41,890 --> 00:24:48,320
purposefully do not support one of

00:24:44,330 --> 00:24:51,740
wordpress main advantages that is just

00:24:48,320 --> 00:24:52,940
hitting click on a plugin and having it

00:24:51,740 --> 00:24:56,660
installed which i

00:24:52,940 --> 00:24:59,600
remote code execution isn't fun but have

00:24:56,660 --> 00:25:02,330
you considered having a plugin registry

00:24:59,600 --> 00:25:05,510
where people can at least search for

00:25:02,330 --> 00:25:07,520
plugins even if they cannot install them

00:25:05,510 --> 00:25:10,010
directly without help of their systems

00:25:07,520 --> 00:25:11,510
administrator yes I have considered that

00:25:10,010 --> 00:25:15,230
I haven't found the time to build it

00:25:11,510 --> 00:25:16,940
this and not the nice thing about open

00:25:15,230 --> 00:25:19,490
source project is someone just a couple

00:25:16,940 --> 00:25:21,620
of weeks ago created and like the base

00:25:19,490 --> 00:25:23,990
github repositories awesome dot anything

00:25:21,620 --> 00:25:27,230
for for plugins to predict so I'm just

00:25:23,990 --> 00:25:32,530
referring to that one for now yeah there

00:25:27,230 --> 00:25:36,380
will be something like that thank you

00:25:32,530 --> 00:25:40,600
how can someone discover new plugins

00:25:36,380 --> 00:25:46,220
something like for example in WordPress

00:25:40,600 --> 00:25:48,860
something like a marketplace where one

00:25:46,220 --> 00:25:52,010
can see a list of plugins yeah let's

00:25:48,860 --> 00:25:53,180
well that's basically something the same

00:25:52,010 --> 00:25:54,710
answer to the previous question we

00:25:53,180 --> 00:25:58,100
currently don't have a good way for that

00:25:54,710 --> 00:26:01,750
I'd love to have a way yeah I'd love to

00:25:58,100 --> 00:26:04,490
do this in a way that's also like it's

00:26:01,750 --> 00:26:06,350
doing this it's not so much code it's

00:26:04,490 --> 00:26:09,020
maybe not worth that you pulled it into

00:26:06,350 --> 00:26:10,910
library but if more projects use this

00:26:09,020 --> 00:26:12,590
approach it might be or similar purchase

00:26:10,910 --> 00:26:14,750
it might be worth we have an application

00:26:12,590 --> 00:26:17,720
for such plug-in marketplaces that is

00:26:14,750 --> 00:26:19,640
reusable across projects and I want to

00:26:17,720 --> 00:26:22,390
build that for years I just don't get

00:26:19,640 --> 00:26:25,040
around to do it so if anyone wants to

00:26:22,390 --> 00:26:30,170
talk about that at the sprints feel free

00:26:25,040 --> 00:26:34,100
to approach me thank you okay they don't

00:26:30,170 --> 00:26:36,300
seem to be any questions online Thank

00:26:34,100 --> 00:26:40,819
You Raphael and the answer

00:26:36,300 --> 00:26:40,819

YouTube URL: https://www.youtube.com/watch?v=QbitxAEEZjI


