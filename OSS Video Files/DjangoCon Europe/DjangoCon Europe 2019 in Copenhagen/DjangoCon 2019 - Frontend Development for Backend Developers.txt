Title: DjangoCon 2019 - Frontend Development for Backend Developers
Publication date: 2019-04-23
Playlist: DjangoCon Europe 2019 in Copenhagen
Description: 
	https://2019.djangocon.eu/talks/frontend-development-for-backend-developers

by Robert Townley: https://twitter.com/roberttownley
Captions: 
	00:00:00,000 --> 00:00:02,450
[Applause]

00:00:03,920 --> 00:00:09,389
okay everybody yeah I think a lot of

00:00:07,859 --> 00:00:12,780
people don't feel super good about the

00:00:09,389 --> 00:00:17,340
front end card and that's what I'm here

00:00:12,780 --> 00:00:34,680
today to talk about cool let me see if I

00:00:17,340 --> 00:00:38,790
can get this oh okay speakers they're

00:00:34,680 --> 00:00:40,860
cool okay

00:00:38,790 --> 00:00:44,030
hi everybody how are you how are y'all

00:00:40,860 --> 00:00:47,010
doing today like collectively you know

00:00:44,030 --> 00:00:49,890
it's sufficient levels of caffeination

00:00:47,010 --> 00:00:51,510
in the room people you know feeling

00:00:49,890 --> 00:00:55,980
reasonably spongy in their brains right

00:00:51,510 --> 00:00:57,989
now okay um so my name is Robert Ellie I

00:00:55,980 --> 00:01:00,600
am a senior web developer for Atlantic

00:00:57,989 --> 00:01:02,579
media in Washington DC and for the next

00:01:00,600 --> 00:01:04,110
half hour I will be talking to you about

00:01:02,579 --> 00:01:06,720
front-end development for back-end

00:01:04,110 --> 00:01:08,460
developers this talk is of course a

00:01:06,720 --> 00:01:10,860
follow-up to my other wildly successful

00:01:08,460 --> 00:01:16,380
presentations including swimming for

00:01:10,860 --> 00:01:18,360
birds bicycling for fish and of course

00:01:16,380 --> 00:01:24,540
creative writing for professional

00:01:18,360 --> 00:01:26,850
wrestlers I am a I'm very grateful to

00:01:24,540 --> 00:01:28,890
Django Khan for you for giving me the

00:01:26,850 --> 00:01:31,049
chance to give this presentation and I

00:01:28,890 --> 00:01:33,659
am even more grateful to all of you for

00:01:31,049 --> 00:01:35,000
coming out to hear me speak it is a huge

00:01:33,659 --> 00:01:36,990
vote of confidence that over the next

00:01:35,000 --> 00:01:38,549
half hour to an hour I'll be able to

00:01:36,990 --> 00:01:40,680
fill your brains with something useful

00:01:38,549 --> 00:01:42,799
and I promise I will do my best to live

00:01:40,680 --> 00:01:47,159
up to that promise

00:01:42,799 --> 00:01:48,450
this presentation is sorry this

00:01:47,159 --> 00:01:51,240
presentation is geared towards a

00:01:48,450 --> 00:01:53,189
reasonably narrow band a band of people

00:01:51,240 --> 00:01:56,640
if you're not yet super familiar with

00:01:53,189 --> 00:01:57,630
HTML CSS and JavaScript this is there's

00:01:56,640 --> 00:02:00,149
gonna be parts that are going to be

00:01:57,630 --> 00:02:02,549
confusing for you if you're a core

00:02:00,149 --> 00:02:04,140
contributor to reactor view you are

00:02:02,549 --> 00:02:05,880
going to be extremely bored and I will

00:02:04,140 --> 00:02:08,099
not blame it you if you want to go grab

00:02:05,880 --> 00:02:10,110
a cup of coffee or go across the street

00:02:08,099 --> 00:02:11,710
next door to go grab a cool a skateboard

00:02:10,110 --> 00:02:15,550
break

00:02:11,710 --> 00:02:17,560
totally reasonable - personally I put

00:02:15,550 --> 00:02:19,480
myself somewhere in the middle I've had

00:02:17,560 --> 00:02:20,230
some successes building out different

00:02:19,480 --> 00:02:21,640
web applications

00:02:20,230 --> 00:02:24,430
I built reasonably complicated web

00:02:21,640 --> 00:02:26,380
applications with few recently just

00:02:24,430 --> 00:02:29,010
deployed my first reactive mobile

00:02:26,380 --> 00:02:32,110
application and at work I've helped

00:02:29,010 --> 00:02:34,420
incorporate a couple of reasonably to

00:02:32,110 --> 00:02:38,500
moderately advanced build processes for

00:02:34,420 --> 00:02:40,300
some of our Jango applications but it's

00:02:38,500 --> 00:02:44,890
been hard it's been a very sticky

00:02:40,300 --> 00:02:46,360
process it reminded me of back before I

00:02:44,890 --> 00:02:48,940
became Jango developer I was doing most

00:02:46,360 --> 00:02:50,740
my work with PHP and learning Django

00:02:48,940 --> 00:02:53,470
just felt like having something fall

00:02:50,740 --> 00:02:56,010
into place model template view

00:02:53,470 --> 00:02:58,240
architecture just made fundamental sense

00:02:56,010 --> 00:03:00,280
the RM was so much better than writing

00:02:58,240 --> 00:03:01,630
Ross sequel you could get something

00:03:00,280 --> 00:03:04,810
close to peace of mind when it came to

00:03:01,630 --> 00:03:06,280
database migrations using Django I the

00:03:04,810 --> 00:03:10,510
better way of doing doing things just

00:03:06,280 --> 00:03:12,070
clicked it wasn't that way when years

00:03:10,510 --> 00:03:13,840
later I was trying to move beyond jQuery

00:03:12,070 --> 00:03:16,180
into the world of modern front-end

00:03:13,840 --> 00:03:17,860
development I was bashing my head

00:03:16,180 --> 00:03:20,710
against a react node and web pack

00:03:17,860 --> 00:03:22,750
tutorials month after month really smart

00:03:20,710 --> 00:03:23,950
people were telling me you know smart

00:03:22,750 --> 00:03:26,410
people who I trusted were telling me

00:03:23,950 --> 00:03:27,820
that these tools weren't all just hype

00:03:26,410 --> 00:03:29,050
that at the end of it at the end of this

00:03:27,820 --> 00:03:31,060
process I was going to come out of it

00:03:29,050 --> 00:03:33,640
being able to build some truly cool fun

00:03:31,060 --> 00:03:35,560
stuff but I just couldn't see it I

00:03:33,640 --> 00:03:38,350
didn't get what's what's wrong with

00:03:35,560 --> 00:03:41,620
jQuery why do I need these 10 different

00:03:38,350 --> 00:03:43,840
random libraries to perfectly have them

00:03:41,620 --> 00:03:46,930
move in a line to play nicely with each

00:03:43,840 --> 00:03:48,460
other do I need to give up Django if I'm

00:03:46,930 --> 00:03:49,930
going to just become a node developer if

00:03:48,460 --> 00:03:52,560
you know what JavaScript is now on the

00:03:49,930 --> 00:03:55,120
back end - all these are really

00:03:52,560 --> 00:03:57,100
confusing thoughts and I think they

00:03:55,120 --> 00:04:02,830
stymied my process because I was trying

00:03:57,100 --> 00:04:04,630
to eat an elephant all in one bite the

00:04:02,830 --> 00:04:06,730
goal of my talk is not to make you

00:04:04,630 --> 00:04:09,070
friend develop experts but to answer

00:04:06,730 --> 00:04:11,170
these questions that developers are

00:04:09,070 --> 00:04:13,210
trying to modernize their front-end

00:04:11,170 --> 00:04:15,400
skills might encounter and to give you

00:04:13,210 --> 00:04:18,250
ways of doing it within the familiar

00:04:15,400 --> 00:04:21,730
stable and powerful context of a django

00:04:18,250 --> 00:04:23,530
application so today we are going to

00:04:21,730 --> 00:04:25,710
talk about some ways to integrate some

00:04:23,530 --> 00:04:28,199
of these tools into a django project

00:04:25,710 --> 00:04:32,729
and as we do so I'm going to introduce

00:04:28,199 --> 00:04:36,900
you to a man named Will Rogers sorry

00:04:32,729 --> 00:04:39,240
let's get that slide I got married a few

00:04:36,900 --> 00:04:42,150
a few months ago to a woman from Tulsa

00:04:39,240 --> 00:04:44,789
Oklahoma for those of you who have never

00:04:42,150 --> 00:04:46,110
heard of Tulsa or Oklahoma if you were

00:04:44,789 --> 00:04:50,120
looking a map of the United States it is

00:04:46,110 --> 00:04:52,590
directly square in the middle of it the

00:04:50,120 --> 00:04:54,630
airport in Tulsa Oklahoma is named after

00:04:52,590 --> 00:04:59,250
one of Oklahoma's most famous citizens

00:04:54,630 --> 00:05:02,070
Will Rogers not to be confused with Fred

00:04:59,250 --> 00:05:04,669
Rogers the man who was behind mr. Rogers

00:05:02,070 --> 00:05:09,810
neighborhood Will Rogers was a cowboy

00:05:04,669 --> 00:05:12,270
philosopher he didn't perform he got on

00:05:09,810 --> 00:05:15,150
horses and spun glasses and performed

00:05:12,270 --> 00:05:17,340
and did tricks while just stream of

00:05:15,150 --> 00:05:21,210
conscience talking about what was on his

00:05:17,340 --> 00:05:22,410
mind and eventually people started just

00:05:21,210 --> 00:05:23,880
listening to the things that he had to

00:05:22,410 --> 00:05:29,580
say and he didn't really have to get up

00:05:23,880 --> 00:05:32,190
on the horse anymore he was the kind man

00:05:29,580 --> 00:05:34,740
he was funny he cared about people he

00:05:32,190 --> 00:05:37,169
cared about ideas mental models and the

00:05:34,740 --> 00:05:38,820
quality of thought he did he cared about

00:05:37,169 --> 00:05:51,990
learning and he didn't care where that

00:05:38,820 --> 00:05:53,940
learning came from so okay much that

00:05:51,990 --> 00:05:58,830
that instantly sounds much better thank

00:05:53,940 --> 00:06:00,900
you thank you anyway I thought of him

00:05:58,830 --> 00:06:05,159
when it came time to give this talk

00:06:00,900 --> 00:06:07,260
because the idea of a thinking cowboy I

00:06:05,159 --> 00:06:09,120
think he would like this place where a

00:06:07,260 --> 00:06:11,639
bunch of curious people gather in a

00:06:09,120 --> 00:06:14,120
strange building to discuss things that

00:06:11,639 --> 00:06:14,120
excite them

00:06:17,190 --> 00:06:21,550
this is the application that we'll be

00:06:19,569 --> 00:06:26,530
working with I have on my local run

00:06:21,550 --> 00:06:28,750
server over here he's great I have this

00:06:26,530 --> 00:06:30,940
a application running on my local run

00:06:28,750 --> 00:06:32,740
server which we will that the

00:06:30,940 --> 00:06:34,389
application serves up will rogers quotes

00:06:32,740 --> 00:06:36,190
and we will be over the course of the

00:06:34,389 --> 00:06:37,750
next little while incrementally

00:06:36,190 --> 00:06:47,590
improving it with some modern tools and

00:06:37,750 --> 00:06:49,360
front-end techniques okay so let's get

00:06:47,590 --> 00:06:52,360
started on looking at the actual Django

00:06:49,360 --> 00:06:54,849
project the app itself is pretty simple

00:06:52,360 --> 00:06:58,210
it has one app called quotes which

00:06:54,849 --> 00:07:04,240
contains a model representing each quote

00:06:58,210 --> 00:07:06,970
a view that serves up the model and an

00:07:04,240 --> 00:07:10,750
admin page that lets users add remove or

00:07:06,970 --> 00:07:13,120
edit quotes the view go back to the view

00:07:10,750 --> 00:07:15,430
the view itself retrieves a random

00:07:13,120 --> 00:07:17,580
object in the database and pass it into

00:07:15,430 --> 00:07:20,560
the template context before rendering

00:07:17,580 --> 00:07:24,789
the template itself makes reference to

00:07:20,560 --> 00:07:25,870
three static assets we have a custom CSS

00:07:24,789 --> 00:07:27,400
style sheet to make the app look a

00:07:25,870 --> 00:07:30,810
little bit better we have the CDN

00:07:27,400 --> 00:07:33,159
supplied jQuery and we have a javascript

00:07:30,810 --> 00:07:36,520
file that contains all of our user

00:07:33,159 --> 00:07:37,810
interactions the interactions within

00:07:36,520 --> 00:07:41,409
that javascript file are relatively

00:07:37,810 --> 00:07:43,750
simple the app ensures that a user is

00:07:41,409 --> 00:07:45,729
paying enough attention to one quote

00:07:43,750 --> 00:07:48,610
before move allowing it to move on to

00:07:45,729 --> 00:07:50,409
the next one if you have not waited ten

00:07:48,610 --> 00:07:52,389
seconds then you receive an obnoxious

00:07:50,409 --> 00:07:55,539
alert ass telling you to please wait

00:07:52,389 --> 00:07:57,819
more for in the next the next update if

00:07:55,539 --> 00:07:59,469
the user has waited then window dot

00:07:57,819 --> 00:08:02,550
location or reload is called and these

00:07:59,469 --> 00:08:06,849
are gets a new randomly generated quote

00:08:02,550 --> 00:08:10,120
pretty something pretty simple and it's

00:08:06,849 --> 00:08:11,500
going to be fun to remake it this is my

00:08:10,120 --> 00:08:12,909
favorite quote good judgment comes from

00:08:11,500 --> 00:08:15,090
experience and experience comes from bad

00:08:12,909 --> 00:08:15,090
judgment

00:08:21,180 --> 00:08:25,120
they're first the first thing that I

00:08:23,860 --> 00:08:29,560
want to mention about this app is that

00:08:25,120 --> 00:08:31,690
this app is perfect it there's there's

00:08:29,560 --> 00:08:33,370
nothing wrong with this app every we're

00:08:31,690 --> 00:08:35,530
gonna be going through five steps to

00:08:33,370 --> 00:08:38,140
make it incorporate five different tools

00:08:35,530 --> 00:08:40,150
each one of those is absolutely

00:08:38,140 --> 00:08:42,550
over-engineering and total overkill and

00:08:40,150 --> 00:08:44,830
I'm not just saying that because this is

00:08:42,550 --> 00:08:46,630
a dummy proxy app that I made for the

00:08:44,830 --> 00:08:49,060
conference you're going to encounter

00:08:46,630 --> 00:08:50,410
apps throughout your daily life where

00:08:49,060 --> 00:08:51,700
someone is going to come across and say

00:08:50,410 --> 00:08:54,010
like yeah we really need to add view

00:08:51,700 --> 00:08:56,080
into this or geez that I really should

00:08:54,010 --> 00:08:58,600
be handled by a build process and the

00:08:56,080 --> 00:09:01,090
answer is not necessarily yes the answer

00:08:58,600 --> 00:09:03,280
is going to be oftentimes it works

00:09:01,090 --> 00:09:04,660
totally fine that is added complexity

00:09:03,280 --> 00:09:07,600
and mental overhead and we should not

00:09:04,660 --> 00:09:09,490
have to think about it part of learning

00:09:07,600 --> 00:09:11,680
these tools is figuring out where they

00:09:09,490 --> 00:09:13,540
directly apply so my hope is that by

00:09:11,680 --> 00:09:16,180
giving you as a taste into some of these

00:09:13,540 --> 00:09:18,460
tools that you will better learn where

00:09:16,180 --> 00:09:19,630
to apply them and also maybe have some

00:09:18,460 --> 00:09:21,430
ammunition in your pocket when an

00:09:19,630 --> 00:09:23,620
overzealous person on your team decides

00:09:21,430 --> 00:09:29,170
they really must have the the latest

00:09:23,620 --> 00:09:31,990
shiniest toy okay the first thing we're

00:09:29,170 --> 00:09:34,350
gonna do is add a front-end package

00:09:31,990 --> 00:09:36,870
manager to the app we are gonna add NPM

00:09:34,350 --> 00:09:39,910
MPM stands for the node package manager

00:09:36,870 --> 00:09:41,710
note is the front-end runtime sorry the

00:09:39,910 --> 00:09:44,830
back in runtime environment that makes

00:09:41,710 --> 00:09:47,650
back in JavaScript possible NPM is the

00:09:44,830 --> 00:09:49,690
package manager for node it's pretty

00:09:47,650 --> 00:09:51,820
directly comparable to pip in the Python

00:09:49,690 --> 00:09:53,860
world and in that it's used to download

00:09:51,820 --> 00:09:56,980
and install and keep track of external

00:09:53,860 --> 00:09:58,480
dependencies for that reason I think

00:09:56,980 --> 00:10:00,580
this is an easier sell for a lot of

00:09:58,480 --> 00:10:02,590
Django developers if you're only

00:10:00,580 --> 00:10:06,010
front-end is a dependency as jQuery

00:10:02,590 --> 00:10:08,710
similar with packages and apps that

00:10:06,010 --> 00:10:11,140
you're developing in the future even if

00:10:08,710 --> 00:10:13,810
you aren't using between for animation

00:10:11,140 --> 00:10:16,630
moment js4 time and Axios for making

00:10:13,810 --> 00:10:19,510
asynchronous requests having a having a

00:10:16,630 --> 00:10:22,360
package.json file in your project does a

00:10:19,510 --> 00:10:23,980
lot to give new new contributors to your

00:10:22,360 --> 00:10:26,850
project and understanding of what it is

00:10:23,980 --> 00:10:26,850
that you'll be doing

00:10:27,070 --> 00:10:31,250
okay so how to use it to get started

00:10:29,930 --> 00:10:32,960
with it you have to first have an

00:10:31,250 --> 00:10:34,460
upstate version of node installed on

00:10:32,960 --> 00:10:36,770
your computer or a server and then you

00:10:34,460 --> 00:10:39,470
initialize it from the project directory

00:10:36,770 --> 00:10:41,930
with NPM in it from then on any commands

00:10:39,470 --> 00:10:43,400
you run to install the library install

00:10:41,930 --> 00:10:46,670
libraries are contained within package

00:10:43,400 --> 00:10:48,050
JSON and package lock JSON files you

00:10:46,670 --> 00:10:49,460
don't have to run the equivalent of pip

00:10:48,050 --> 00:10:51,590
freeze because dependencies are

00:10:49,460 --> 00:10:53,090
automatically saved to package JSON as

00:10:51,590 --> 00:10:59,270
soon as you save the file as soon as you

00:10:53,090 --> 00:11:00,680
run the command okay so let's add a

00:10:59,270 --> 00:11:02,450
couple of dependencies into our project

00:11:00,680 --> 00:11:04,520
first first we know we're gonna be using

00:11:02,450 --> 00:11:06,410
jQuery so we install that by running NPM

00:11:04,520 --> 00:11:08,320
install jQuery once I finishes

00:11:06,410 --> 00:11:11,240
downloading you can see that our a

00:11:08,320 --> 00:11:16,700
package.json file has been modified

00:11:11,240 --> 00:11:18,950
I don't include that sorry has been

00:11:16,700 --> 00:11:20,960
modified and that we have now generated

00:11:18,950 --> 00:11:23,300
a new folder called node modules which

00:11:20,960 --> 00:11:25,390
contains the actual files that you've

00:11:23,300 --> 00:11:27,440
downloaded through the package manager

00:11:25,390 --> 00:11:29,390
adding in another library called

00:11:27,440 --> 00:11:34,730
normalized CSS we will be incorporating

00:11:29,390 --> 00:11:37,520
both those into the project let's see

00:11:34,730 --> 00:11:39,020
looking inside of node modules you can

00:11:37,520 --> 00:11:44,300
see if that that is where the actual

00:11:39,020 --> 00:11:46,130
jQuery installs have taken place this is

00:11:44,300 --> 00:11:49,430
kind of a quick and dirty way of getting

00:11:46,130 --> 00:11:52,520
node modules into a Django application

00:11:49,430 --> 00:11:54,980
and a lot of my teammates who are better

00:11:52,520 --> 00:11:57,680
front-end developers and I have are

00:11:54,980 --> 00:11:59,000
totally aghast by this the idea here is

00:11:57,680 --> 00:12:00,800
that you're taking the entirety of the

00:11:59,000 --> 00:12:02,570
node modules directory and treating it

00:12:00,800 --> 00:12:05,000
as a static applicant as a static folder

00:12:02,570 --> 00:12:06,830
in doing so you're collect static is

00:12:05,000 --> 00:12:08,510
going to be gigantic you are going to

00:12:06,830 --> 00:12:10,250
suddenly be moving thousands of files

00:12:08,510 --> 00:12:13,580
into your collect static directory and

00:12:10,250 --> 00:12:14,839
this is a step that once you have become

00:12:13,580 --> 00:12:18,980
a little bit more comfortable with web

00:12:14,839 --> 00:12:21,650
pack is not the right way to do it but

00:12:18,980 --> 00:12:24,740
in the meantime if you are just hoping

00:12:21,650 --> 00:12:28,400
to get some dip your toes into front

00:12:24,740 --> 00:12:32,510
into keeping track of your packages

00:12:28,400 --> 00:12:35,060
within packet within NPM this is as good

00:12:32,510 --> 00:12:36,470
of a stepping stone as I had found so

00:12:35,060 --> 00:12:39,790
within second stop hi we declare node

00:12:36,470 --> 00:12:39,790
modules as a static directory

00:12:39,850 --> 00:12:45,230
having done this now we can within our

00:12:43,070 --> 00:12:46,790
templates reference files that are

00:12:45,230 --> 00:12:49,610
contained within the node modules folder

00:12:46,790 --> 00:12:51,830
you can see here that we are now

00:12:49,610 --> 00:12:54,380
referencing normalized CSS within the

00:12:51,830 --> 00:12:56,090
template and we have replaced the script

00:12:54,380 --> 00:12:59,180
tag that was referencing the CDN hosted

00:12:56,090 --> 00:13:00,650
jQuery with now our self hosted jQuery

00:12:59,180 --> 00:13:04,940
that is served up from the node modules

00:13:00,650 --> 00:13:06,170
directory okay and with that newbies who

00:13:04,940 --> 00:13:08,480
are coming into the project will be able

00:13:06,170 --> 00:13:10,010
to understand the different JavaScript

00:13:08,480 --> 00:13:11,770
dependencies that you're using you're

00:13:10,010 --> 00:13:14,570
keeping track of them for yourself and

00:13:11,770 --> 00:13:15,590
you have more independence for later on

00:13:14,570 --> 00:13:17,420
pursuing the different parts of the

00:13:15,590 --> 00:13:19,790
project we have successfully

00:13:17,420 --> 00:13:27,080
incorporated node modules and NPM into

00:13:19,790 --> 00:13:28,640
this already perfect app alright next

00:13:27,080 --> 00:13:31,670
step is we're gonna take the CSS file

00:13:28,640 --> 00:13:33,710
and we're going to pass it through CSS

00:13:31,670 --> 00:13:37,670
preprocessors for this one we're going

00:13:33,710 --> 00:13:41,690
to be using sass the other common ones

00:13:37,670 --> 00:13:44,540
less is um the syntax of less if you've

00:13:41,690 --> 00:13:47,140
learned sass or less learning the other

00:13:44,540 --> 00:13:49,430
one it will be minutes of reference

00:13:47,140 --> 00:13:50,870
stylist a little bit a little bit

00:13:49,430 --> 00:13:53,870
different but still very similar

00:13:50,870 --> 00:13:56,210
concepts basically just all three of

00:13:53,870 --> 00:13:59,300
these are very smart person having

00:13:56,210 --> 00:14:00,860
decided how they want what capabilities

00:13:59,300 --> 00:14:03,380
should have initially been built into

00:14:00,860 --> 00:14:07,130
CSS and then writing programs to enable

00:14:03,380 --> 00:14:09,620
that sort of syntax let's look at our

00:14:07,130 --> 00:14:12,410
initial CSS file you don't actually have

00:14:09,620 --> 00:14:14,780
to read it here but I've divided up the

00:14:12,410 --> 00:14:17,480
file into two different parts you can

00:14:14,780 --> 00:14:18,920
kind of see that there because it's such

00:14:17,480 --> 00:14:21,950
a limited file there aren't too many

00:14:18,920 --> 00:14:24,980
issues with it but we can maybe see some

00:14:21,950 --> 00:14:27,380
areas for improvement our selectors for

00:14:24,980 --> 00:14:29,810
the button we have a whole host of

00:14:27,380 --> 00:14:32,720
different items that are referencing

00:14:29,810 --> 00:14:34,490
button button hover button Moses you

00:14:32,720 --> 00:14:37,510
know focus ever button image button

00:14:34,490 --> 00:14:39,140
button text same thing over there to

00:14:37,510 --> 00:14:42,910
referencing different parts within

00:14:39,140 --> 00:14:45,590
rapper rapper h1 and rapper attribution

00:14:42,910 --> 00:14:48,770
the ability to nest those would be kind

00:14:45,590 --> 00:14:50,690
of nice another thing that for example

00:14:48,770 --> 00:14:53,300
were reference we are referencing colors

00:14:50,690 --> 00:14:56,149
in multiple places

00:14:53,300 --> 00:14:59,630
you can see up there the BVD dff as well

00:14:56,149 --> 00:15:02,089
as over in the button:hover state we use

00:14:59,630 --> 00:15:03,170
the same color it would be less

00:15:02,089 --> 00:15:08,000
error-prone if we can store those in

00:15:03,170 --> 00:15:12,320
variables okay so how do you do it first

00:15:08,000 --> 00:15:16,430
oh yes sir that's why you might want to

00:15:12,320 --> 00:15:19,060
do this having a rewritten to file

00:15:16,430 --> 00:15:21,440
within sass syntax it will look

00:15:19,060 --> 00:15:22,579
relatively similar to the point to the

00:15:21,440 --> 00:15:24,740
point where someone who hasn't taken the

00:15:22,579 --> 00:15:26,750
time to learn sass but still be able to

00:15:24,740 --> 00:15:29,240
pick up on what it's doing the main

00:15:26,750 --> 00:15:31,940
focus here is on nested selectors you

00:15:29,240 --> 00:15:35,480
can see that the button element on the

00:15:31,940 --> 00:15:37,269
right side is taking away from the need

00:15:35,480 --> 00:15:40,570
to reference button hover button most

00:15:37,269 --> 00:15:44,000
focus inner button image and button text

00:15:40,570 --> 00:15:45,829
and you can also see that we're now

00:15:44,000 --> 00:15:54,860
using a light blue variable which we

00:15:45,829 --> 00:15:57,410
declare higher up and file okay once

00:15:54,860 --> 00:15:59,570
once you have run once you've created

00:15:57,410 --> 00:16:02,240
this the or even before you've created

00:15:59,570 --> 00:16:04,310
this one very useful thing about CSS

00:16:02,240 --> 00:16:06,320
preprocessors is that anything that has

00:16:04,310 --> 00:16:09,890
valid CSS is also going to be valid sass

00:16:06,320 --> 00:16:12,230
or valid less you can pass your normal

00:16:09,890 --> 00:16:15,170
CSS files through a preprocessor and if

00:16:12,230 --> 00:16:18,230
you so desire the if you wanted to do

00:16:15,170 --> 00:16:20,240
nothing but pass it through for practice

00:16:18,230 --> 00:16:22,610
or pass it through because we wanted a

00:16:20,240 --> 00:16:24,560
very indirect way of minifying your CSS

00:16:22,610 --> 00:16:30,560
file those are totally valid ways of

00:16:24,560 --> 00:16:32,180
doing so okay I said in the beginning

00:16:30,560 --> 00:16:34,100
that jumping into front-end development

00:16:32,180 --> 00:16:36,040
doesn't have to be an all-or-nothing

00:16:34,100 --> 00:16:38,149
thing adding these tools in one by one

00:16:36,040 --> 00:16:40,360
and recognizing the pain points that

00:16:38,149 --> 00:16:44,990
they bring you can be a very modular

00:16:40,360 --> 00:16:48,949
process this next one is a good example

00:16:44,990 --> 00:16:52,010
that browsers Inc is a utility that the

00:16:48,949 --> 00:16:53,690
react and view and angular world they

00:16:52,010 --> 00:16:56,959
take advantage of that we can have

00:16:53,690 --> 00:16:59,899
within the Django world as well I'll see

00:16:56,959 --> 00:17:02,180
if I can get this up and running I'll

00:16:59,899 --> 00:17:04,940
show you a nice little example of hot

00:17:02,180 --> 00:17:09,380
module reloading here

00:17:04,940 --> 00:17:32,470
do you do it's old furniture Malone

00:17:09,380 --> 00:17:35,570
Tesco there we go I forgot my flags pool

00:17:32,470 --> 00:17:43,580
so let's grab this command that I was

00:17:35,570 --> 00:17:46,370
running earlier today I started the run

00:17:43,580 --> 00:17:48,560
server ok and just for fun

00:17:46,370 --> 00:18:03,790
now let's crack open another terminal

00:17:48,560 --> 00:18:03,790
here there isn't even and let's set it

00:18:07,490 --> 00:18:11,640
so what we're doing right here is you

00:18:10,050 --> 00:18:14,370
can see we're running on port 3000

00:18:11,640 --> 00:18:17,130
instead of port 8000 I also have for at

00:18:14,370 --> 00:18:19,950
8,000 running that is the default django

00:18:17,130 --> 00:18:21,570
run server but the lowest impact way I

00:18:19,950 --> 00:18:23,970
found to get browsers thinkin hot module

00:18:21,570 --> 00:18:25,890
reloading which it's not technically

00:18:23,970 --> 00:18:29,430
what we're doing here but getting faster

00:18:25,890 --> 00:18:31,710
reloading into your projects is to run

00:18:29,430 --> 00:18:34,920
browser sync within a proxy flag so when

00:18:31,710 --> 00:18:38,310
we do that now if for example I were to

00:18:34,920 --> 00:18:42,150
take this CSS file and let's say I just

00:18:38,310 --> 00:18:42,570
wanted to make it change to change the

00:18:42,150 --> 00:18:45,420
color

00:18:42,570 --> 00:18:50,070
I saved the CSS I change the CSS I

00:18:45,420 --> 00:18:57,000
changed the CSS file I don't change the

00:18:50,070 --> 00:18:58,200
CSS pal I miss my keyboard guys and you

00:18:57,000 --> 00:19:00,480
don't need to reload the page anymore

00:18:58,200 --> 00:19:03,630
this can be a very useful tool for kind

00:19:00,480 --> 00:19:04,770
of iterative development if you decided

00:19:03,630 --> 00:19:07,110
well let's see how the page would look

00:19:04,770 --> 00:19:08,670
with maybe a little bit more padding do

00:19:07,110 --> 00:19:13,830
I like that yeah let's see how we like

00:19:08,670 --> 00:19:15,330
it look even more padding you know it

00:19:13,830 --> 00:19:19,530
makes me for an end development process

00:19:15,330 --> 00:19:22,970
quite a bit faster so nice not not a

00:19:19,530 --> 00:19:22,970
game changer a nice little tool to have

00:19:23,630 --> 00:19:28,640
okay let me get back to my presentation

00:19:35,630 --> 00:19:41,220
okay

00:19:38,570 --> 00:19:44,310
next thing we are gonna add web pack

00:19:41,220 --> 00:19:47,040
into this project web pack is a build

00:19:44,310 --> 00:19:48,120
process manager it accomplishes similar

00:19:47,040 --> 00:19:49,740
goals that you would see with in

00:19:48,120 --> 00:19:54,300
something like browsers it browserify

00:19:49,740 --> 00:19:55,800
gulp or grunt like the more basic

00:19:54,300 --> 00:19:58,590
libraries that we were using earlier it

00:19:55,800 --> 00:20:00,060
is installed by NPM what it is useful

00:19:58,590 --> 00:20:02,820
for is it bundles different front-end

00:20:00,060 --> 00:20:04,320
assets together so for example you can

00:20:02,820 --> 00:20:05,700
divide up your javascript files into

00:20:04,320 --> 00:20:08,040
separate files which is what we'll be

00:20:05,700 --> 00:20:10,080
doing as part of this step here it also

00:20:08,040 --> 00:20:11,520
helps you manage your non code

00:20:10,080 --> 00:20:14,100
dependencies you can keep track of your

00:20:11,520 --> 00:20:15,750
font files your images different

00:20:14,100 --> 00:20:18,030
resources that are maintained by the

00:20:15,750 --> 00:20:20,600
front end of the application and gives

00:20:18,030 --> 00:20:22,460
you a nice way of model of

00:20:20,600 --> 00:20:26,330
layering what happens when you're

00:20:22,460 --> 00:20:28,130
building out your project one of things

00:20:26,330 --> 00:20:30,980
that always bothered me when I was

00:20:28,130 --> 00:20:32,540
writing JavaScript in the old way was

00:20:30,980 --> 00:20:34,730
the global declar declaration of

00:20:32,540 --> 00:20:37,040
variables if I wanted to break my code

00:20:34,730 --> 00:20:39,920
up into multiple files I needed to write

00:20:37,040 --> 00:20:42,340
my code with keeping in mind the

00:20:39,920 --> 00:20:46,040
ordering of script tags rather than

00:20:42,340 --> 00:20:47,840
keeping track of what delineations and

00:20:46,040 --> 00:20:50,510
breaks within my code made sense to me

00:20:47,840 --> 00:20:52,780
that struck me as a limitation imposed

00:20:50,510 --> 00:20:57,490
by the browser and it is something that

00:20:52,780 --> 00:21:00,980
webpack makes a little bit easier the

00:20:57,490 --> 00:21:04,760
the appeal to a Python developer is also

00:21:00,980 --> 00:21:05,690
pretty basic here where in Python

00:21:04,760 --> 00:21:08,180
everything that we're going to be

00:21:05,690 --> 00:21:11,480
importing into a file is everything that

00:21:08,180 --> 00:21:14,300
we want to use in the file is imported

00:21:11,480 --> 00:21:16,610
at the top of the file our imports

00:21:14,300 --> 00:21:18,320
become authoritative trustworthy sources

00:21:16,610 --> 00:21:20,030
of truth on where different piece

00:21:18,320 --> 00:21:21,680
different pieces of code are being used

00:21:20,030 --> 00:21:23,930
throughout the codebase if we're not

00:21:21,680 --> 00:21:26,540
sure if a library is in use we can

00:21:23,930 --> 00:21:28,340
search our code for the imports if all

00:21:26,540 --> 00:21:30,290
of your JavaScript code is built out

00:21:28,340 --> 00:21:32,270
with JavaScript imports managed and

00:21:30,290 --> 00:21:33,380
bundled through webpack then you get the

00:21:32,270 --> 00:21:35,060
same peace of mind within your own

00:21:33,380 --> 00:21:36,710
project you no longer have to worry

00:21:35,060 --> 00:21:39,260
about breaking something when moving

00:21:36,710 --> 00:21:42,010
around script tags because your

00:21:39,260 --> 00:21:44,510
JavaScript has independent sources with

00:21:42,010 --> 00:21:46,010
because each of your JavaScript files is

00:21:44,510 --> 00:21:51,800
an independent source of information

00:21:46,010 --> 00:21:55,370
that has everything that it needs I will

00:21:51,800 --> 00:21:58,490
say what I mentioned before about adding

00:21:55,370 --> 00:22:01,070
different different front-end utilities

00:21:58,490 --> 00:22:04,760
to a project applies maybe 20 times for

00:22:01,070 --> 00:22:08,270
web pack if you are concerned about the

00:22:04,760 --> 00:22:10,760
complexity for a new for a person who's

00:22:08,270 --> 00:22:12,500
new to front-end development evaluate

00:22:10,760 --> 00:22:15,950
within your project whether web pack is

00:22:12,500 --> 00:22:18,950
right for you the benefits are you know

00:22:15,950 --> 00:22:21,770
can can be great it is added complexity

00:22:18,950 --> 00:22:23,480
and we'll walk through the example of

00:22:21,770 --> 00:22:25,970
how to incorporate this into our much

00:22:23,480 --> 00:22:28,700
smaller app for those of you who have

00:22:25,970 --> 00:22:31,370
for example say hypothetically if you

00:22:28,700 --> 00:22:34,250
had like 3000 line jQuery files that

00:22:31,370 --> 00:22:36,310
you're too afraid to touch at work that

00:22:34,250 --> 00:22:41,000
you can maybe see how this be this wee

00:22:36,310 --> 00:22:42,410
problematic that was a personal

00:22:41,000 --> 00:22:44,240
experience we are currently sorting

00:22:42,410 --> 00:22:45,620
through a three thousand line jQuery

00:22:44,240 --> 00:22:52,160
file that we're also to override to

00:22:45,620 --> 00:22:54,380
touch because it is used by everyone so

00:22:52,160 --> 00:22:56,750
how do we use it the first thing we do

00:22:54,380 --> 00:22:59,690
is we make a web pack config dot J's

00:22:56,750 --> 00:23:01,160
file this was the simplest one that I

00:22:59,690 --> 00:23:02,780
can think to write what we're doing

00:23:01,160 --> 00:23:06,080
right here is we are taking a single

00:23:02,780 --> 00:23:08,060
file called index tag is contained

00:23:06,080 --> 00:23:09,590
within a service directory and we are

00:23:08,060 --> 00:23:12,080
outputting it to a file called bundle

00:23:09,590 --> 00:23:13,880
that is which is going to live at the

00:23:12,080 --> 00:23:14,980
root of our project within a folder that

00:23:13,880 --> 00:23:18,320
we are calling dist

00:23:14,980 --> 00:23:20,690
both the convention of storing your

00:23:18,320 --> 00:23:22,850
output within dist and keeping all of

00:23:20,690 --> 00:23:26,270
your source files within a folder called

00:23:22,850 --> 00:23:27,830
SRC are conventions that we are

00:23:26,270 --> 00:23:33,500
borrowing graciously from the node

00:23:27,830 --> 00:23:34,700
community okay first step is you've

00:23:33,500 --> 00:23:38,570
installed web pack as well as the

00:23:34,700 --> 00:23:40,990
command-line interface through NPM you

00:23:38,570 --> 00:23:43,450
find a vulnerability and you're good

00:23:40,990 --> 00:23:45,620
while doing no development you do get

00:23:43,450 --> 00:23:47,300
scarily good at ignoring different

00:23:45,620 --> 00:23:48,650
warnings but I've been told by very

00:23:47,300 --> 00:23:53,300
smart people that this one is totally

00:23:48,650 --> 00:23:55,610
fine for me to ignore once we've done

00:23:53,300 --> 00:23:59,420
once we've done that we can look at our

00:23:55,610 --> 00:24:01,520
package JSON file which contains new

00:23:59,420 --> 00:24:05,000
references to the web pack and the web

00:24:01,520 --> 00:24:06,380
pack CLI dev dependencies while you can

00:24:05,000 --> 00:24:08,150
instruct while you can structure a

00:24:06,380 --> 00:24:11,600
requirements a text file in Python

00:24:08,150 --> 00:24:12,950
however you'd like it's not everyone

00:24:11,600 --> 00:24:15,260
follows the convention of dividing up

00:24:12,950 --> 00:24:17,360
dependencies into requirements and test

00:24:15,260 --> 00:24:21,590
requirements or requirements and dev and

00:24:17,360 --> 00:24:23,870
statement requirements in the in the NPM

00:24:21,590 --> 00:24:27,740
world that is a little bit more clearly

00:24:23,870 --> 00:24:29,240
delineated where you are where if you

00:24:27,740 --> 00:24:30,620
install things but the dev flag they are

00:24:29,240 --> 00:24:32,510
installed into a totally separate

00:24:30,620 --> 00:24:34,970
dependency and the advantage of that is

00:24:32,510 --> 00:24:36,800
that then node is able to figure NPM is

00:24:34,970 --> 00:24:38,000
able to figure out while you're sorry

00:24:36,800 --> 00:24:39,830
web pack is able to figure out why

00:24:38,000 --> 00:24:42,320
you're bundling up your project whether

00:24:39,830 --> 00:24:45,010
or not which projects to incorporate

00:24:42,320 --> 00:24:45,010
into the bundle

00:24:45,910 --> 00:24:50,560
the other thing that I'll reference over

00:24:47,320 --> 00:24:52,110
here is that in NPM land the

00:24:50,560 --> 00:24:56,170
command-line utility gives you access to

00:24:52,110 --> 00:24:59,860
NPM run blank if you are if you add

00:24:56,170 --> 00:25:00,700
anything into this scripts JSON part of

00:24:59,860 --> 00:25:03,190
the JSON right here

00:25:00,700 --> 00:25:06,310
these become commands that are aliased

00:25:03,190 --> 00:25:08,590
out to different parts of to whatever

00:25:06,310 --> 00:25:10,420
system commands you might want to run so

00:25:08,590 --> 00:25:12,220
this gives you a very nice nifty

00:25:10,420 --> 00:25:13,510
interface for being able to specify all

00:25:12,220 --> 00:25:16,870
the commands that you're running as part

00:25:13,510 --> 00:25:19,600
of your project in this example when we

00:25:16,870 --> 00:25:22,360
run npm run build what i really wanted

00:25:19,600 --> 00:25:25,930
to do is to run web pack with the flag

00:25:22,360 --> 00:25:28,390
of mode set to production and you can

00:25:25,930 --> 00:25:30,010
all see a test flag there i have not

00:25:28,390 --> 00:25:35,290
incorporated any test coverage into this

00:25:30,010 --> 00:25:37,240
app and i'm very sorry about that so

00:25:35,290 --> 00:25:38,800
let's see how this works in the

00:25:37,240 --> 00:25:42,430
beginning of this you can see that i do

00:25:38,800 --> 00:25:46,150
not have a dist folder i run npm run

00:25:42,430 --> 00:25:52,000
build web pack does wonderful magic for

00:25:46,150 --> 00:25:55,450
me which takes in which takes in my

00:25:52,000 --> 00:26:00,490
source index j s file and it outputs it

00:25:55,450 --> 00:26:03,630
into the disk older as a precursor to

00:26:00,490 --> 00:26:06,100
that process I have copied over my

00:26:03,630 --> 00:26:08,440
JavaScript from the original app the

00:26:06,100 --> 00:26:09,970
quote is one that very helpfully and

00:26:08,440 --> 00:26:11,140
informative Li tells people that they

00:26:09,970 --> 00:26:13,690
have not looked at the quote for long

00:26:11,140 --> 00:26:17,200
enough and moved it into this source

00:26:13,690 --> 00:26:21,580
directory which now lives in the distant

00:26:17,200 --> 00:26:22,780
directory because web pack the next part

00:26:21,580 --> 00:26:25,240
of incorporating this into my Django

00:26:22,780 --> 00:26:27,040
project is that I listed as a static

00:26:25,240 --> 00:26:30,130
file directory now everything that lives

00:26:27,040 --> 00:26:30,760
within our final build directory aka

00:26:30,130 --> 00:26:32,740
dist

00:26:30,760 --> 00:26:35,190
is going to be reference able to be

00:26:32,740 --> 00:26:37,000
referenced from within static files I

00:26:35,190 --> 00:26:40,630
can then incorporate that into my

00:26:37,000 --> 00:26:43,630
template I can replace the both the

00:26:40,630 --> 00:26:46,900
reference to our self host in jQuery and

00:26:43,630 --> 00:26:49,120
my custom quote is a Java Script with a

00:26:46,900 --> 00:26:51,280
single tag for bundle digest because now

00:26:49,120 --> 00:26:55,650
bundled ojs contains everything that I

00:26:51,280 --> 00:26:57,809
need if you care about you know and

00:26:55,650 --> 00:26:59,210
some sent everyone should care the if

00:26:57,809 --> 00:27:01,289
you care about the size of the

00:26:59,210 --> 00:27:03,390
JavaScript that your application is

00:27:01,289 --> 00:27:05,039
generating because you're in an

00:27:03,390 --> 00:27:07,350
environment where people don't have time

00:27:05,039 --> 00:27:10,110
to wait around for you know plus one

00:27:07,350 --> 00:27:11,700
second for the page to load this is a

00:27:10,110 --> 00:27:15,419
great way to bring down the size of your

00:27:11,700 --> 00:27:18,059
assets and can be compartmentalized to

00:27:15,419 --> 00:27:19,740
divvy up via the JavaScript files so

00:27:18,059 --> 00:27:23,400
that they're only downloaded when

00:27:19,740 --> 00:27:24,779
they're needed and then if not if you

00:27:23,400 --> 00:27:27,179
don't if you truly don't care about the

00:27:24,779 --> 00:27:30,480
download size and performance of your

00:27:27,179 --> 00:27:32,279
front-end application as far as making

00:27:30,480 --> 00:27:35,130
big files isn't earned this is still a

00:27:32,279 --> 00:27:36,990
better way to develop you are no longer

00:27:35,130 --> 00:27:39,390
relying on globally scope variables

00:27:36,990 --> 00:27:41,549
scored within stored within the web

00:27:39,390 --> 00:27:43,200
browser you don't have to worry about if

00:27:41,549 --> 00:27:44,909
in some random file you decide to

00:27:43,200 --> 00:27:48,210
declare a dollar sign as a variable that

00:27:44,909 --> 00:27:49,890
jQuery would break it opens up to a

00:27:48,210 --> 00:27:51,539
little bit more security that on the

00:27:49,890 --> 00:27:55,740
back ends out of things we take for it

00:27:51,539 --> 00:27:57,320
rented talking about how I break up

00:27:55,740 --> 00:27:59,190
break apart this file this is the

00:27:57,320 --> 00:28:00,570
function that I had previously that

00:27:59,190 --> 00:28:03,960
tells me whether or not a user has

00:28:00,570 --> 00:28:06,419
waited for a long enough it is a pretty

00:28:03,960 --> 00:28:08,429
basic function that just takes in the

00:28:06,419 --> 00:28:11,909
time that the user loaded up the page

00:28:08,429 --> 00:28:14,760
figures out the JavaScript equivalent of

00:28:11,909 --> 00:28:16,529
a date time time Delta and then returns

00:28:14,760 --> 00:28:18,840
back whether that has it has been 10

00:28:16,529 --> 00:28:20,760
seconds the interesting part here is

00:28:18,840 --> 00:28:26,610
this export on the other side of things

00:28:20,760 --> 00:28:29,909
that is a newer part of JavaScript that

00:28:26,610 --> 00:28:33,600
is incorporated within both web pack and

00:28:29,909 --> 00:28:35,340
node itself to be able to enable you to

00:28:33,600 --> 00:28:37,740
split your files up across different

00:28:35,340 --> 00:28:40,020
imports by declaring an export on an

00:28:37,740 --> 00:28:41,370
individual function right here within

00:28:40,020 --> 00:28:43,830
this next function I'd be able to use

00:28:41,370 --> 00:28:46,940
JavaScript import syntax to specify that

00:28:43,830 --> 00:28:49,919
I want the bat function to be imported

00:28:46,940 --> 00:28:52,950
I'm also saying that I am going to

00:28:49,919 --> 00:28:54,630
request jQuery as available at the

00:28:52,950 --> 00:28:57,450
dollar sign variable so that I can keep

00:28:54,630 --> 00:28:59,970
most of my code to be similar having

00:28:57,450 --> 00:29:01,919
done this you can see that my code is it

00:28:59,970 --> 00:29:05,899
was never unmanageable now it is even

00:29:01,919 --> 00:29:05,899
more manageable so nice to have

00:29:07,020 --> 00:29:10,920
let's look at this now that my

00:29:08,690 --> 00:29:13,770
JavaScript lives across two different

00:29:10,920 --> 00:29:16,200
files you can see it that what and what

00:29:13,770 --> 00:29:18,150
web pack is doing when I build this when

00:29:16,200 --> 00:29:21,890
I build this together is it is taking

00:29:18,150 --> 00:29:26,550
both my index KS and my utility is and

00:29:21,890 --> 00:29:30,390
one mysterious hidden module which it's

00:29:26,550 --> 00:29:32,690
jQuery dude you know it's jQuery and it

00:29:30,390 --> 00:29:35,760
is I'm putting all that into bundles as

00:29:32,690 --> 00:29:38,940
the end result is that I have a bundle

00:29:35,760 --> 00:29:40,950
yes that is basically the exact size of

00:29:38,940 --> 00:29:45,090
minified jQuery plus a little bit for

00:29:40,950 --> 00:29:47,220
the code that I've written the end

00:29:45,090 --> 00:29:49,290
result is a smaller and faster download

00:29:47,220 --> 00:29:54,960
for the end user and a better safer

00:29:49,290 --> 00:29:56,940
development experience for us okay all

00:29:54,960 --> 00:29:58,650
right last tool that we're gonna be

00:29:56,940 --> 00:30:00,090
incorporating as part of this I'm going

00:29:58,650 --> 00:30:03,150
to show you how to put a little react

00:30:00,090 --> 00:30:04,470
component into our app because I was

00:30:03,150 --> 00:30:07,950
worried that anyone thought that we had

00:30:04,470 --> 00:30:10,440
not over engineered this enough that the

00:30:07,950 --> 00:30:15,090
I think I wish it showing you the

00:30:10,440 --> 00:30:17,220
avinash yet but basically if you have

00:30:15,090 --> 00:30:20,720
the app running no look it's we got nice

00:30:17,220 --> 00:30:23,610
beautiful pink back right now instead

00:30:20,720 --> 00:30:25,800
the the app or at load ZUP a different

00:30:23,610 --> 00:30:26,100
one and then if I click give me another

00:30:25,800 --> 00:30:27,780
one

00:30:26,100 --> 00:30:31,200
it tells me this very irritating

00:30:27,780 --> 00:30:33,000
aggravating message so you Mississippi

00:30:31,200 --> 00:30:38,430
three Mississippi four Mississippi five

00:30:33,000 --> 00:30:43,950
Mississippi I was missing okay now it

00:30:38,430 --> 00:30:45,570
gets me another quote that's right he

00:30:43,950 --> 00:30:50,610
was a contemporary of Einstein though I

00:30:45,570 --> 00:30:52,440
lived in the early 1900s anyway so this

00:30:50,610 --> 00:30:54,450
button right here the give me another

00:30:52,440 --> 00:30:56,880
cowboy button is the one that we are

00:30:54,450 --> 00:31:02,070
going to be replacing with a react

00:30:56,880 --> 00:31:05,240
component at this point most people have

00:31:02,070 --> 00:31:07,950
heard about react it is fancy it's nice

00:31:05,240 --> 00:31:11,160
it is a live it's a JavaScript library

00:31:07,950 --> 00:31:14,179
we're building user interfaces it is

00:31:11,160 --> 00:31:17,049
written using an HTML Javascript e

00:31:14,179 --> 00:31:19,090
hybrid syntax called JSX

00:31:17,049 --> 00:31:22,210
and it works by creating different

00:31:19,090 --> 00:31:26,080
components that live on a webpage a

00:31:22,210 --> 00:31:29,529
react app begins by having one single

00:31:26,080 --> 00:31:30,909
root document for each part of the react

00:31:29,529 --> 00:31:32,440
app that you're going to have for

00:31:30,909 --> 00:31:34,779
example you could have two different

00:31:32,440 --> 00:31:36,820
divs on your page with different IDs and

00:31:34,779 --> 00:31:38,590
load two totally separate react

00:31:36,820 --> 00:31:42,970
applications and two either of those but

00:31:38,590 --> 00:31:45,610
the way that react declares itself is

00:31:42,970 --> 00:31:48,279
that you just specify I'm giving you a

00:31:45,610 --> 00:31:51,009
div on the page react this is your job

00:31:48,279 --> 00:31:53,889
this is everything else outside of the

00:31:51,009 --> 00:31:56,489
page don't worry about it all you have

00:31:53,889 --> 00:32:01,179
to do is make sure that that thing looks

00:31:56,489 --> 00:32:05,549
looks contains and behaves according to

00:32:01,179 --> 00:32:05,549
user interactions exactly as expected

00:32:05,970 --> 00:32:13,629
let's see if react if you are evaluating

00:32:11,409 --> 00:32:16,480
whether to put reacting to your project

00:32:13,629 --> 00:32:19,019
I will say that there are a couple of

00:32:16,480 --> 00:32:21,309
signs for when react might be a good fit

00:32:19,019 --> 00:32:23,259
if you user is doing something on the

00:32:21,309 --> 00:32:26,799
page that is changing five different

00:32:23,259 --> 00:32:28,840
values and each of those has a different

00:32:26,799 --> 00:32:31,149
Donella JavaScript or jQuery function

00:32:28,840 --> 00:32:32,649
that you've written keeping track of

00:32:31,149 --> 00:32:38,109
those using the react might be a little

00:32:32,649 --> 00:32:39,549
bit more efficient if you are trying to

00:32:38,109 --> 00:32:41,169
do an incredibly complicated user

00:32:39,549 --> 00:32:42,970
interaction you know you need to keep

00:32:41,169 --> 00:32:46,720
track of the state that beti user has

00:32:42,970 --> 00:32:49,499
done with and with that the state of all

00:32:46,720 --> 00:32:53,019
the things that a user has done then

00:32:49,499 --> 00:32:56,320
react or angular or view personally I

00:32:53,019 --> 00:33:00,009
like view you as my favorite UI

00:32:56,320 --> 00:33:01,629
framework those can be those are pretty

00:33:00,009 --> 00:33:03,159
good signs for when you might want to

00:33:01,629 --> 00:33:09,519
incorporate reactant to your project and

00:33:03,159 --> 00:33:12,850
then finally if you can maintain pretty

00:33:09,519 --> 00:33:13,419
much everything using API calls back to

00:33:12,850 --> 00:33:15,519
the server

00:33:13,419 --> 00:33:17,980
every user interaction is stored is

00:33:15,519 --> 00:33:20,769
stored on the server and then either you

00:33:17,980 --> 00:33:22,480
know django json views or totally

00:33:20,769 --> 00:33:25,929
rear-ended content can be returned from

00:33:22,480 --> 00:33:28,480
API endpoints those are all totally fine

00:33:25,929 --> 00:33:29,990
ways to build at your application but if

00:33:28,480 --> 00:33:33,590
you are

00:33:29,990 --> 00:33:36,379
struggling to maintain the state of a

00:33:33,590 --> 00:33:39,379
user's interactions upon page-load one

00:33:36,379 --> 00:33:41,240
potential solution to this could be to

00:33:39,379 --> 00:33:43,759
do away with the very concept of page

00:33:41,240 --> 00:33:46,249
loads and make it so that your react app

00:33:43,759 --> 00:33:48,259
is aware and benevolently keeping track

00:33:46,249 --> 00:33:54,379
of your users interactions at any given

00:33:48,259 --> 00:33:57,049
point but also maybe not react is not

00:33:54,379 --> 00:33:58,999
intuitive react as hard to learn and

00:33:57,049 --> 00:34:02,929
that applies for most library most UI

00:33:58,999 --> 00:34:04,639
libraries out there we that we had

00:34:02,929 --> 00:34:07,100
backbone installed on an app at work for

00:34:04,639 --> 00:34:08,240
a while and we everyone just kind of

00:34:07,100 --> 00:34:10,639
avoided it like the plague

00:34:08,240 --> 00:34:13,069
you know we've thought every time it's

00:34:10,639 --> 00:34:14,659
working we don't go near it we and

00:34:13,069 --> 00:34:18,470
people just didn't want to take the time

00:34:14,659 --> 00:34:21,409
to learn how to use it it is mental and

00:34:18,470 --> 00:34:26,149
cognitive overhead and it may not suit

00:34:21,409 --> 00:34:29,030
your purposes properly that applies so

00:34:26,149 --> 00:34:30,559
many times over to the concept of an app

00:34:29,030 --> 00:34:34,159
that just displays a random Will Rogers

00:34:30,559 --> 00:34:36,379
quote this is very much an overkill app

00:34:34,159 --> 00:34:39,020
and it would be totally silly to build a

00:34:36,379 --> 00:34:42,889
react component do that but I like silly

00:34:39,020 --> 00:34:44,240
things so we're gonna do that we are

00:34:42,889 --> 00:34:49,129
going to replace that little button on

00:34:44,240 --> 00:34:50,659
the bottom with a react component first

00:34:49,129 --> 00:34:53,299
thing we're gonna do is install two

00:34:50,659 --> 00:34:54,649
libraries the first is react which is

00:34:53,299 --> 00:34:56,149
the actual library that we'll be

00:34:54,649 --> 00:34:59,210
building out our components with and the

00:34:56,149 --> 00:35:00,920
second is react Dom which is the library

00:34:59,210 --> 00:35:03,200
that react uses for latching on to

00:35:00,920 --> 00:35:05,299
different parts of the of the Dom the

00:35:03,200 --> 00:35:10,220
document object model used within your

00:35:05,299 --> 00:35:15,109
browser we are going to be writing this

00:35:10,220 --> 00:35:17,869
using that HTML ejs me weird language

00:35:15,109 --> 00:35:19,460
JSX that i was talking about before your

00:35:17,869 --> 00:35:21,859
browser doesn't know how to read JSX so

00:35:19,460 --> 00:35:23,359
this is going to we're gonna need to

00:35:21,859 --> 00:35:26,329
also install them another library called

00:35:23,359 --> 00:35:28,700
Babel which is and accompanying

00:35:26,329 --> 00:35:31,250
libraries for tying it into react all of

00:35:28,700 --> 00:35:33,170
the above our utilities for making it so

00:35:31,250 --> 00:35:34,819
that when web pack encounters a

00:35:33,170 --> 00:35:37,010
JavaScript file written with written

00:35:34,819 --> 00:35:39,319
with a react it is a is going to be able

00:35:37,010 --> 00:35:40,720
to process that into our disk told ur

00:35:39,319 --> 00:35:44,829
and produce something that our browser

00:35:40,720 --> 00:35:44,829
is actually able to understand

00:35:45,840 --> 00:35:49,200
this is what our new webpack

00:35:47,010 --> 00:35:53,220
configuration looks like the everything

00:35:49,200 --> 00:35:54,420
below line eight is new here the way

00:35:53,220 --> 00:35:56,430
that we've configured web pack in this

00:35:54,420 --> 00:36:00,810
instance is to say that anything

00:35:56,430 --> 00:36:02,070
containing je s or JSX is going except

00:36:00,810 --> 00:36:04,640
for things in the node modules directory

00:36:02,070 --> 00:36:08,400
is going to encounter the following roll

00:36:04,640 --> 00:36:11,310
send it through the program known as

00:36:08,400 --> 00:36:13,500
Babel loader with the preset of react

00:36:11,310 --> 00:36:16,080
that is us saying every time you hit a

00:36:13,500 --> 00:36:21,450
JSX file send it through Babel with

00:36:16,080 --> 00:36:23,700
react let's see the next thing we do is

00:36:21,450 --> 00:36:25,050
we go back into our template and we wipe

00:36:23,700 --> 00:36:28,920
away everything that we had there

00:36:25,050 --> 00:36:31,320
previously for the button this line 20

00:36:28,920 --> 00:36:33,060
is now the exclusive insult domain of

00:36:31,320 --> 00:36:35,490
react react is going to be helping

00:36:33,060 --> 00:36:38,700
maintain the state and the display of

00:36:35,490 --> 00:36:40,710
this at any given time and we don't

00:36:38,700 --> 00:36:43,520
Django templates are no longer and have

00:36:40,710 --> 00:36:46,230
to worry about whatever is not in there

00:36:43,520 --> 00:36:49,560
and this is what a react component looks

00:36:46,230 --> 00:36:51,690
like this is we are importing react

00:36:49,560 --> 00:36:54,600
using the similar syntax that we saw

00:36:51,690 --> 00:36:59,090
before in our newly modularized

00:36:54,600 --> 00:37:01,560
JavaScript we are creating if for

00:36:59,090 --> 00:37:03,840
passover the export default for a moment

00:37:01,560 --> 00:37:05,910
and this looks almost a little bit

00:37:03,840 --> 00:37:08,670
pythonic to say we are we have a class

00:37:05,910 --> 00:37:10,730
that is extending another class and then

00:37:08,670 --> 00:37:13,710
it contains the following attributes

00:37:10,730 --> 00:37:17,790
export default just enables us to load

00:37:13,710 --> 00:37:21,390
this in from a different file then the

00:37:17,790 --> 00:37:23,430
every a component is initialized with a

00:37:21,390 --> 00:37:25,590
state which we are declaring here we're

00:37:23,430 --> 00:37:28,860
telling it that you're gonna start off

00:37:25,590 --> 00:37:32,460
with a state equal to a javascript

00:37:28,860 --> 00:37:36,660
object containing the a's a key of start

00:37:32,460 --> 00:37:39,510
and a value of when the date object for

00:37:36,660 --> 00:37:42,180
when the object was created and we are

00:37:39,510 --> 00:37:45,230
going to tell react that you are going

00:37:42,180 --> 00:37:48,540
to be using a method called handle click

00:37:45,230 --> 00:37:50,850
within the render function we this is

00:37:48,540 --> 00:37:53,640
what JSX looks like you can see it's

00:37:50,850 --> 00:37:55,670
almost almost entirely HTML the main

00:37:53,640 --> 00:37:59,930
differences are that because we are

00:37:55,670 --> 00:38:02,630
going to be using using the click

00:37:59,930 --> 00:38:04,849
keyword op we're not able to actually

00:38:02,630 --> 00:38:08,630
use on click because it is a reserved

00:38:04,849 --> 00:38:12,140
keyword we are instead declaring it with

00:38:08,630 --> 00:38:14,150
this kind of bumpy syntax and then we

00:38:12,140 --> 00:38:16,099
are able to actually pass in what is a

00:38:14,150 --> 00:38:19,099
an expression that is evaluated as

00:38:16,099 --> 00:38:21,829
JavaScript here anything within curly

00:38:19,099 --> 00:38:25,010
braces in a rack component is understood

00:38:21,829 --> 00:38:26,180
to be JavaScript so that's kind of a you

00:38:25,010 --> 00:38:28,640
know I think when you're working in the

00:38:26,180 --> 00:38:30,589
Django templating language this idea of

00:38:28,640 --> 00:38:33,410
being able to or you know Django

00:38:30,589 --> 00:38:35,930
template or PHP or really any handlebars

00:38:33,410 --> 00:38:38,210
in JavaScript being able to drop into

00:38:35,930 --> 00:38:40,609
code is something that we take for

00:38:38,210 --> 00:38:43,369
granted but it is nice to be able to

00:38:40,609 --> 00:38:44,750
have one way of doing it and react as

00:38:43,369 --> 00:38:47,119
well as view components and angular

00:38:44,750 --> 00:38:50,780
components all give you a really nifty

00:38:47,119 --> 00:38:53,059
hint syntax for doing so and then

00:38:50,780 --> 00:38:55,099
finally we are declaring I'm I have

00:38:53,059 --> 00:38:56,809
declared this react component as a

00:38:55,099 --> 00:38:59,839
class-based component so it has a method

00:38:56,809 --> 00:39:01,700
called handle click when this button is

00:38:59,839 --> 00:39:03,260
clicked the handle click method is

00:39:01,700 --> 00:39:05,000
called what is the handle click method

00:39:03,260 --> 00:39:09,980
it's basically the same thing as we were

00:39:05,000 --> 00:39:12,500
seeing before the end result here the

00:39:09,980 --> 00:39:14,839
end result here is that we have a

00:39:12,500 --> 00:39:18,380
component that does exactly the same

00:39:14,839 --> 00:39:23,200
thing and I think the only thing that I

00:39:18,380 --> 00:39:23,200
did not properly show you there

00:39:42,940 --> 00:39:48,970
the other thing I forgot to show you

00:39:44,960 --> 00:39:52,030
here is within our source index.js file

00:39:48,970 --> 00:39:55,520
how we are using the react Dom method

00:39:52,030 --> 00:39:58,400
the our initial file we were able to

00:39:55,520 --> 00:39:59,750
comment out the event listeners which

00:39:58,400 --> 00:40:01,310
would have otherwise made the event

00:39:59,750 --> 00:40:04,130
trigger twice because it does still have

00:40:01,310 --> 00:40:06,470
the ID so we commented all that out and

00:40:04,130 --> 00:40:08,119
then we import react both react and

00:40:06,470 --> 00:40:11,390
react dumb at the top of the file and

00:40:08,119 --> 00:40:13,400
then tell react dumb I have made

00:40:11,390 --> 00:40:17,540
something called a Next button component

00:40:13,400 --> 00:40:20,240
and I want you to load that into the

00:40:17,540 --> 00:40:23,359
element note with the ID of next button

00:40:20,240 --> 00:40:26,599
which if you'll remember from and quote

00:40:23,359 --> 00:40:28,940
simply is this thing that we have told

00:40:26,599 --> 00:40:31,400
it to stop caring about right here so

00:40:28,940 --> 00:40:40,010
that is how we tie in our Django

00:40:31,400 --> 00:40:41,450
templates into a react component because

00:40:40,010 --> 00:40:45,410
I've been talking about about react

00:40:41,450 --> 00:40:46,700
because it's a useful way of getting

00:40:45,410 --> 00:40:49,250
people excited about friend development

00:40:46,700 --> 00:40:50,900
I have not mentioned view quite as much

00:40:49,250 --> 00:40:53,180
but if you were here is about how to

00:40:50,900 --> 00:40:56,920
build this app as a view component it

00:40:53,180 --> 00:41:00,349
would look like so their view has a

00:40:56,920 --> 00:41:03,650
weird definition of separation of

00:41:00,349 --> 00:41:06,050
concerns with react everything kind of

00:41:03,650 --> 00:41:08,030
lives jumbled together in view

00:41:06,050 --> 00:41:09,859
everything also lives jumbled together

00:41:08,030 --> 00:41:12,109
in the same file but within separate

00:41:09,859 --> 00:41:13,970
tags you can see that that template tag

00:41:12,109 --> 00:41:18,320
at the top of the file is analogous to

00:41:13,970 --> 00:41:21,560
an HTML import or to an the HTML portion

00:41:18,320 --> 00:41:24,140
of your file the script tag is analogous

00:41:21,560 --> 00:41:26,869
to the user user experience in the

00:41:24,140 --> 00:41:29,240
JavaScript of your file and that very

00:41:26,869 --> 00:41:31,880
tiny non-existent style tag at the

00:41:29,240 --> 00:41:35,300
bottom of the file is useful is where

00:41:31,880 --> 00:41:37,730
you could put your CSS rules I like that

00:41:35,300 --> 00:41:39,530
this allows you to store all of your

00:41:37,730 --> 00:41:44,710
component everything about a component

00:41:39,530 --> 00:41:49,050
within one set package I don't have

00:41:44,710 --> 00:41:52,440
great internal memory my head

00:41:49,050 --> 00:41:56,760
keep things in it very long so the

00:41:52,440 --> 00:41:58,650
ability to think of my code as you have

00:41:56,760 --> 00:42:00,840
this big application and it's made of

00:41:58,650 --> 00:42:02,580
littler stuff that happens here and you

00:42:00,840 --> 00:42:06,090
don't have to worry about bleed over

00:42:02,580 --> 00:42:08,220
from those is valuable to me so what I

00:42:06,090 --> 00:42:10,980
like about the single line single file

00:42:08,220 --> 00:42:13,470
view component is that this is my button

00:42:10,980 --> 00:42:17,970
there are many like it but this is my

00:42:13,470 --> 00:42:21,930
button and yeah you can see kind of the

00:42:17,970 --> 00:42:25,080
syntax is uh not something to ative you

00:42:21,930 --> 00:42:27,240
have to learn it but once you do and now

00:42:25,080 --> 00:42:29,010
get to be that person who tells you you

00:42:27,240 --> 00:42:30,720
know if you have not done any front-end

00:42:29,010 --> 00:42:34,190
development for like trust me on the

00:42:30,720 --> 00:42:34,190
other end of it it it does make sense

00:42:34,370 --> 00:42:38,570
all right let me kill my presentation

00:42:46,640 --> 00:42:50,610
you know the last thing you had was a

00:42:48,450 --> 00:42:53,900
thank you slide anyway so no I'm gonna

00:42:50,610 --> 00:42:53,900
I'm gonna make this my thank-you slide

00:42:58,089 --> 00:43:06,140
thank you Robert this was really

00:43:04,250 --> 00:43:08,299
impressive and not over engineering at

00:43:06,140 --> 00:43:10,160
all I really like this this is I could

00:43:08,299 --> 00:43:16,250
follow it along and this was really

00:43:10,160 --> 00:43:17,410
helpful thank you other questions going

00:43:16,250 --> 00:43:26,059
once

00:43:17,410 --> 00:43:27,859
yes this is not really a question could

00:43:26,059 --> 00:43:29,900
I ask you if it's a comment or something

00:43:27,859 --> 00:43:32,150
could I ask you to sort this out after

00:43:29,900 --> 00:43:37,250
it I unless you have a question actually

00:43:32,150 --> 00:43:53,930
question okay if you can jeopardy afire

00:43:37,250 --> 00:43:55,490
please sorry about that I had the

00:43:53,930 --> 00:43:57,559
pleasure of over-engineering my first

00:43:55,490 --> 00:44:01,430
react up because the first engineer

00:43:57,559 --> 00:44:04,670
chose Redux for like a chart based small

00:44:01,430 --> 00:44:09,500
app and it was a huge laying down that

00:44:04,670 --> 00:44:11,359
whole but how do you figure out when

00:44:09,500 --> 00:44:15,460
that over-engineering point is

00:44:11,359 --> 00:44:17,599
applicable and then state management

00:44:15,460 --> 00:44:19,579
there's so many options for like all

00:44:17,599 --> 00:44:22,119
these different things so it's without

00:44:19,579 --> 00:44:26,859
the experience it's really hard to tell

00:44:22,119 --> 00:44:30,680
yeah definitely so the the question was

00:44:26,859 --> 00:44:32,450
when regarding specifically the concept

00:44:30,680 --> 00:44:34,790
of state management when do you figure

00:44:32,450 --> 00:44:36,160
out if over-engineer if you are over

00:44:34,790 --> 00:44:39,589
engineering it by incorporating

00:44:36,160 --> 00:44:44,240
additional libraries for example Redux

00:44:39,589 --> 00:44:47,210
or view X or I guess you can use Lowe's

00:44:44,240 --> 00:44:51,079
with angular oh cool thank you yeah mob

00:44:47,210 --> 00:44:52,760
X when is it over engineering to

00:44:51,079 --> 00:44:56,329
incorporate those into your project

00:44:52,760 --> 00:45:00,020
I didn't I deliberately did not talk

00:44:56,329 --> 00:45:02,450
about Redux during this it is an

00:45:00,020 --> 00:45:05,180
incredibly useful concept basically the

00:45:02,450 --> 00:45:07,640
idea is that your components not they do

00:45:05,180 --> 00:45:08,150
manage their own state but they also are

00:45:07,640 --> 00:45:09,319
have

00:45:08,150 --> 00:45:11,779
way of interacting with your

00:45:09,319 --> 00:45:13,190
applications global state so for example

00:45:11,779 --> 00:45:16,279
like if you think of Facebook to go to

00:45:13,190 --> 00:45:18,589
example is someone checks checks a

00:45:16,279 --> 00:45:20,480
message and then suddenly the counter of

00:45:18,589 --> 00:45:22,670
number of unread messages needs to

00:45:20,480 --> 00:45:24,589
decrement by one and the message needs

00:45:22,670 --> 00:45:26,089
to show a different CSS class and on the

00:45:24,589 --> 00:45:28,960
other side of the page that message

00:45:26,089 --> 00:45:31,369
needs to no longer be bolded those all

00:45:28,960 --> 00:45:32,809
had to be would otherwise have to be

00:45:31,369 --> 00:45:35,990
passed back and forth between different

00:45:32,809 --> 00:45:39,170
components keeping a global state's

00:45:35,990 --> 00:45:40,910
store can be a very useful way of having

00:45:39,170 --> 00:45:44,450
one single source of truth for what has

00:45:40,910 --> 00:45:46,390
happened in your application my answer

00:45:44,450 --> 00:45:49,910
for the over-engineering aspect is one

00:45:46,390 --> 00:45:53,690
practice comes with experience go for it

00:45:49,910 --> 00:45:56,119
but two if you are if you have anything

00:45:53,690 --> 00:45:58,460
where the user can get themselves into a

00:45:56,119 --> 00:46:00,319
state where there are a lot of things

00:45:58,460 --> 00:46:02,150
going on on the page that's probably a

00:46:00,319 --> 00:46:07,180
good candidate for a state management

00:46:02,150 --> 00:46:09,740
library cool thanks

00:46:07,180 --> 00:46:13,579
hello thank you very much this was very

00:46:09,740 --> 00:46:15,589
enlightening you have been the third

00:46:13,579 --> 00:46:20,740
speaker today I believe to mention

00:46:15,589 --> 00:46:24,440
webpack as a tool for managing note

00:46:20,740 --> 00:46:26,569
building dependencies you have been the

00:46:24,440 --> 00:46:28,789
first as far as I noticed to notice that

00:46:26,569 --> 00:46:35,049
it wasn't the first such tool that soars

00:46:28,789 --> 00:46:38,480
Granton gulp and other things and as a

00:46:35,049 --> 00:46:40,869
primarily back-end developer who shines

00:46:38,480 --> 00:46:43,789
away mostly from the front end because

00:46:40,869 --> 00:46:46,730
the landscape there keeps changing all

00:46:43,789 --> 00:46:56,420
the time I have to ask how with there it

00:46:46,730 --> 00:46:58,039
is web back in I one thing that I

00:46:56,420 --> 00:47:00,230
neglected to mention throughout this

00:46:58,039 --> 00:47:02,240
whole talk is that the biggest asset for

00:47:00,230 --> 00:47:04,940
me has been that on my team

00:47:02,240 --> 00:47:06,200
we hired a senior front-end developer

00:47:04,940 --> 00:47:08,599
who has been an incredible learning

00:47:06,200 --> 00:47:11,480
resource and he is a huge advocate of

00:47:08,599 --> 00:47:15,349
using gulp as the build process manager

00:47:11,480 --> 00:47:17,579
I think I don't think it's I don't think

00:47:15,349 --> 00:47:20,159
it's a there yet thing I think it is a

00:47:17,579 --> 00:47:24,329
code versus configuration thing if you

00:47:20,159 --> 00:47:26,339
prefer to have a standardized set a way

00:47:24,329 --> 00:47:28,409
of specifying within your web pack file

00:47:26,339 --> 00:47:30,809
these are the things that I want to do

00:47:28,409 --> 00:47:33,299
and I want it to be one JSON file and I

00:47:30,809 --> 00:47:34,979
want it to hat I want there to be a

00:47:33,299 --> 00:47:36,269
right way of doing things and please

00:47:34,979 --> 00:47:38,939
don't make me think about this anymore

00:47:36,269 --> 00:47:40,829
and let me go back to coding then web

00:47:38,939 --> 00:47:43,409
pack is a good answer for that if you do

00:47:40,829 --> 00:47:44,969
want to dive deep down into the way that

00:47:43,409 --> 00:47:47,549
your build process operates and maybe

00:47:44,969 --> 00:47:50,579
even add some custom configuration using

00:47:47,549 --> 00:47:54,899
JavaScript that then gulp is a great

00:47:50,579 --> 00:47:57,059
tool for that I say that reluctantly

00:47:54,899 --> 00:47:59,099
because it is truly confusing to have so

00:47:57,059 --> 00:48:02,699
many tools out there but for me

00:47:59,099 --> 00:48:05,249
personally I fall into the school of I

00:48:02,699 --> 00:48:06,659
just need I have other things that I'd

00:48:05,249 --> 00:48:09,359
like to be thinking about and web pack

00:48:06,659 --> 00:48:11,009
works totally great it's the one that

00:48:09,359 --> 00:48:15,869
you get by default with great rack tap

00:48:11,009 --> 00:48:16,979
and it plays nicely with view so I get

00:48:15,869 --> 00:48:20,519
that my fall endorsement

00:48:16,979 --> 00:48:22,889
thank you very much I'm just curious is

00:48:20,519 --> 00:48:23,909
grunt actually like an alternative to

00:48:22,889 --> 00:48:27,749
web pack because from my understanding

00:48:23,909 --> 00:48:30,869
web peg does bundle up JavaScript and

00:48:27,749 --> 00:48:32,849
images and CSS files and grunt is like a

00:48:30,869 --> 00:48:36,359
task rocker so it's usually used to

00:48:32,849 --> 00:48:38,669
execute web pack are there like what

00:48:36,359 --> 00:48:40,819
other projects are that are a real

00:48:38,669 --> 00:48:44,729
alternative to epic and not just like

00:48:40,819 --> 00:48:46,979
used to run it that's true web pack does

00:48:44,729 --> 00:48:49,409
one of the main selling points of web

00:48:46,979 --> 00:48:51,029
pack is that it does say we will not

00:48:49,409 --> 00:48:52,559
only be managing your JavaScript we'll

00:48:51,029 --> 00:48:55,009
be managing all of your front-end assets

00:48:52,559 --> 00:48:58,709
your SIA your CSS your images your fonts

00:48:55,009 --> 00:49:01,889
and sending those through a standardized

00:48:58,709 --> 00:49:04,289
pipeline there are there are tools that

00:49:01,889 --> 00:49:06,389
you would then incorporate into gulp

00:49:04,289 --> 00:49:08,609
that allow and I'm sorry I've never

00:49:06,389 --> 00:49:11,130
worked with grunts I'm not going to talk

00:49:08,609 --> 00:49:14,159
about grunt so much but you can

00:49:11,130 --> 00:49:16,559
incorporate parts of different tools

00:49:14,159 --> 00:49:19,139
into gulp so you're no longer building

00:49:16,559 --> 00:49:20,759
out a full-on monolithic solution for

00:49:19,139 --> 00:49:23,549
how you can manage your dependencies

00:49:20,759 --> 00:49:26,869
start your build process instead you're

00:49:23,549 --> 00:49:29,940
telling from this gulp file

00:49:26,869 --> 00:49:31,470
conditionally run this different command

00:49:29,940 --> 00:49:34,609
if you're looking for the one shop

00:49:31,470 --> 00:49:37,499
solution which i think is is not a

00:49:34,609 --> 00:49:40,680
disparaging thing one stop one stop

00:49:37,499 --> 00:49:42,869
shops are great then web pack is a

00:49:40,680 --> 00:49:44,819
pretty good solution fat but there I

00:49:42,869 --> 00:49:48,170
have not encountered something that a

00:49:44,819 --> 00:49:48,170
smart person couldn't also do and go

00:49:48,739 --> 00:49:53,759
thank you for your excellent

00:49:50,999 --> 00:49:55,589
presentation imagine that you are able

00:49:53,759 --> 00:49:58,710
to make me understand it it's

00:49:55,589 --> 00:50:01,470
extraordinary however even your

00:49:58,710 --> 00:50:03,930
extraordinary work in bringing all of

00:50:01,470 --> 00:50:07,319
that front-end tools to Django you

00:50:03,930 --> 00:50:11,069
maintain the approach of the monolithic

00:50:07,319 --> 00:50:15,019
jungle what's your view on decoupling

00:50:11,069 --> 00:50:18,599
the back end of Django using an API

00:50:15,019 --> 00:50:22,319
interface and using react or whatsoever

00:50:18,599 --> 00:50:25,349
has a completely different approach yeah

00:50:22,319 --> 00:50:30,390
the the dirty secret of this

00:50:25,349 --> 00:50:31,650
presentation is I deleted it never and I

00:50:30,390 --> 00:50:34,999
had some I had some Django rest

00:50:31,650 --> 00:50:34,999
framework sterilizers in here as well

00:50:35,660 --> 00:50:43,859
it's when I first started doing this I

00:50:40,440 --> 00:50:49,410
almost felt a little dirty for not doing

00:50:43,859 --> 00:50:53,369
things the Django way if you the the

00:50:49,410 --> 00:50:55,710
question is using react and view it is

00:50:53,369 --> 00:50:57,690
possible to decouple your applications

00:50:55,710 --> 00:51:00,450
such that you no longer need the Django

00:50:57,690 --> 00:51:03,869
templating language you don't need to

00:51:00,450 --> 00:51:05,190
use Django routing anymore and you you

00:51:03,869 --> 00:51:06,839
basically just turn Django into a

00:51:05,190 --> 00:51:09,029
headless system for billing out api's

00:51:06,839 --> 00:51:11,549
and then you build at your application

00:51:09,029 --> 00:51:16,380
with reactant view or rat review or

00:51:11,549 --> 00:51:19,230
angular that architecture makes a lot of

00:51:16,380 --> 00:51:21,599
sense in a lot of places the Django

00:51:19,230 --> 00:51:24,989
templating language is incredible and it

00:51:21,599 --> 00:51:26,369
is great for many tasks and I would

00:51:24,989 --> 00:51:28,920
evaluate whether the additional

00:51:26,369 --> 00:51:33,059
complexity of reactor view especially

00:51:28,920 --> 00:51:33,900
for us people who know Django is worth

00:51:33,059 --> 00:51:35,849
it

00:51:33,900 --> 00:51:39,210
and the answer to that is going to

00:51:35,849 --> 00:51:41,069
oftentimes be no but you can maybe

00:51:39,210 --> 00:51:42,490
imagine an app that has very complicated

00:51:41,069 --> 00:51:46,490
user experience

00:51:42,490 --> 00:51:48,079
intricacies to it in which case we don't

00:51:46,490 --> 00:51:50,359
have to give up our full stack luckily

00:51:48,079 --> 00:51:54,050
Django is the best way I've encountered

00:51:50,359 --> 00:51:55,849
for building out an API you know doesn't

00:51:54,050 --> 00:51:56,240
and by there doesn't have to be a REST

00:51:55,849 --> 00:51:58,010
API

00:51:56,240 --> 00:52:00,349
Django graphene is a great way of

00:51:58,010 --> 00:52:02,300
building out graph QL API endpoints that

00:52:00,349 --> 00:52:07,460
react developers just seem to love for

00:52:02,300 --> 00:52:11,150
some reason but I think that it's the

00:52:07,460 --> 00:52:12,440
decision to decouple your app is one

00:52:11,150 --> 00:52:13,820
that adds a lot of complexity to your

00:52:12,440 --> 00:52:16,460
project and should be taken with a grain

00:52:13,820 --> 00:52:18,290
of salt but it is a totally viable one

00:52:16,460 --> 00:52:22,099
and once you are if you are comfortable

00:52:18,290 --> 00:52:24,740
with a front-end development library and

00:52:22,099 --> 00:52:26,869
you're comfortable with a back-end web

00:52:24,740 --> 00:52:30,460
framework then you know world's your

00:52:26,869 --> 00:52:30,460
oyster you can go you can build anything

00:52:31,930 --> 00:52:38,990
all right I'll take more questions in

00:52:35,450 --> 00:52:41,200
the room or on the map No then thank you

00:52:38,990 --> 00:52:41,200

YouTube URL: https://www.youtube.com/watch?v=wXlMal4BR2Y


