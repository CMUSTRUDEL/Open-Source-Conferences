Title: DjangoCon 2019 - Take the goRe out of a DjangoReact stack
Publication date: 2019-04-23
Playlist: DjangoCon Europe 2019 in Copenhagen
Description: 
	https://2019.djangocon.eu/talks/take-the-gore-out-of-a-djangoreact-stack

By Nathan Gaberel - https://twitter.com/n4ng5l
Captions: 
	00:00:00,260 --> 00:00:09,150
hi hello okay so my name is Nathan and

00:00:06,600 --> 00:00:14,219
I'm going to be talking about building

00:00:09,150 --> 00:00:16,740
and architecture in Django alongside

00:00:14,219 --> 00:00:19,650
JavaScript applications so I'm a

00:00:16,740 --> 00:00:22,109
full-stack developer I work with Django

00:00:19,650 --> 00:00:26,490
and reacts on most of the projects I

00:00:22,109 --> 00:00:28,619
work on however and despite not so funny

00:00:26,490 --> 00:00:31,529
name of this talk after a few months I

00:00:28,619 --> 00:00:34,680
really start to dislike it so despite

00:00:31,529 --> 00:00:37,110
the name it's not a very act most of

00:00:34,680 --> 00:00:39,719
what I'm going to say is what exactly

00:00:37,110 --> 00:00:43,290
the same if you're using angular view or

00:00:39,719 --> 00:00:45,059
ember any modern framework if anything

00:00:43,290 --> 00:00:50,219
it's maybe about web pack but we'll come

00:00:45,059 --> 00:00:52,350
back to this okay so just to get started

00:00:50,219 --> 00:00:55,230
by by show of hands who here uses a

00:00:52,350 --> 00:00:58,559
similar stack with a Bodhi tree as

00:00:55,230 --> 00:01:01,469
framework alongside Django okay so quite

00:00:58,559 --> 00:01:03,750
a few of you so I don't know about you

00:01:01,469 --> 00:01:05,939
guys but I really find this exercise of

00:01:03,750 --> 00:01:09,240
setting up a JS framework alongside

00:01:05,939 --> 00:01:12,119
Django to really not being a trivial

00:01:09,240 --> 00:01:16,460
exercise I think the main reason is

00:01:12,119 --> 00:01:16,460
there's no standard documented

00:01:17,150 --> 00:01:24,869
implementation guidelines or even

00:01:19,460 --> 00:01:27,500
architectural guidelines so I think it's

00:01:24,869 --> 00:01:30,570
something that we still can improve on

00:01:27,500 --> 00:01:31,979
in the Django community so it's

00:01:30,570 --> 00:01:34,409
something I've done quite a few projects

00:01:31,979 --> 00:01:36,930
and my golf of this talk is to take you

00:01:34,409 --> 00:01:39,030
through some of the design decisions

00:01:36,930 --> 00:01:41,640
that we can make to try and build such

00:01:39,030 --> 00:01:45,509
an application how is going to work in

00:01:41,640 --> 00:01:46,850
development and production and and in

00:01:45,509 --> 00:01:50,420
this talk I'll also try and show you

00:01:46,850 --> 00:01:53,670
what it ends up looking like in the code

00:01:50,420 --> 00:01:58,110
so before I start the quick catch up

00:01:53,670 --> 00:02:00,509
whoa I'm right quick ketchup and Jays

00:01:58,110 --> 00:02:02,610
tool chain I'm not I'm gonna show

00:02:00,509 --> 00:02:06,500
everyone knows about this so very

00:02:02,610 --> 00:02:09,599
quickly NPM is the main JavaScript

00:02:06,500 --> 00:02:12,060
package repository it's it's both it's

00:02:09,599 --> 00:02:13,590
actually both the repository and

00:02:12,060 --> 00:02:17,520
try out for the repository so it's

00:02:13,590 --> 00:02:20,610
equivalent to both by PI and pip webpack

00:02:17,520 --> 00:02:22,410
is the main build tool for more than

00:02:20,610 --> 00:02:25,200
just applications so it's what produces

00:02:22,410 --> 00:02:26,730
the bundle that's the JavaScript source

00:02:25,200 --> 00:02:27,330
code that's ends up being shipped to the

00:02:26,730 --> 00:02:28,950
browser

00:02:27,330 --> 00:02:30,360
there's no direct equivalent for this in

00:02:28,950 --> 00:02:33,120
Python because we can just run the

00:02:30,360 --> 00:02:35,700
Python code and web pack dev server is a

00:02:33,120 --> 00:02:38,310
wrapper and web pack that much like the

00:02:35,700 --> 00:02:40,440
Django hotel reloader looks for changes

00:02:38,310 --> 00:02:43,430
in the source code recompiles and

00:02:40,440 --> 00:02:47,130
celtuce file on the saga

00:02:43,430 --> 00:02:49,860
right so in this first part I'm going to

00:02:47,130 --> 00:02:51,989
go through Jing quick recap of Django's

00:02:49,860 --> 00:02:54,239
history and the tools we've had to

00:02:51,989 --> 00:02:56,580
handle javascript source choice

00:02:54,239 --> 00:02:58,769
compliance and the goal here is also to

00:02:56,580 --> 00:03:01,700
set up a common vocabulary so we can all

00:02:58,769 --> 00:03:07,049
be talking about the same thing

00:03:01,700 --> 00:03:10,860
so when django came out in 2005 the main

00:03:07,049 --> 00:03:14,610
use for JS back then was to sprinkle on

00:03:10,860 --> 00:03:20,250
top of HTML pages that were otherwise

00:03:14,610 --> 00:03:21,989
generated by the back end and for this

00:03:20,250 --> 00:03:23,940
we had tools like Django pipeline and

00:03:21,989 --> 00:03:27,540
Django compressor who came out in twenty

00:03:23,940 --> 00:03:30,510
thousand eight thousand nine and their

00:03:27,540 --> 00:03:32,970
main goal was to take this JavaScript

00:03:30,510 --> 00:03:36,260
source code that usually lived in the

00:03:32,970 --> 00:03:39,750
static folders of Django minify its

00:03:36,260 --> 00:03:42,950
general render a script tag in the in

00:03:39,750 --> 00:03:42,950
the template and that was it

00:03:43,070 --> 00:03:47,459
and a few days later Django Unchained

00:03:45,750 --> 00:03:49,049
came out and they really messed up my

00:03:47,459 --> 00:03:53,519
chart so if you were wondering whether

00:03:49,049 --> 00:03:56,040
the spec is let's check our chain or at

00:03:53,519 --> 00:03:58,709
the same time you can see the red and

00:03:56,040 --> 00:04:01,230
the blue lines it's angular and then a

00:03:58,709 --> 00:04:03,569
couple years after our react so the the

00:04:01,230 --> 00:04:04,920
Moody on the frameworks that the most

00:04:03,569 --> 00:04:10,440
common version from well started coming

00:04:04,920 --> 00:04:13,010
out in 2012 714 I think and those two

00:04:10,440 --> 00:04:16,289
those frameworks need much more potent

00:04:13,010 --> 00:04:20,010
build pipelines they need integration

00:04:16,289 --> 00:04:22,049
with the J's packages they need to pull

00:04:20,010 --> 00:04:28,470
in abundances from NPM

00:04:22,049 --> 00:04:32,280
they need to be able to work with image

00:04:28,470 --> 00:04:34,560
files font files CSS etc and so that's

00:04:32,280 --> 00:04:37,250
where django pipeline and joe compressor

00:04:34,560 --> 00:04:39,509
weren't enough anymore and the front end

00:04:37,250 --> 00:04:41,639
community came up with something called

00:04:39,509 --> 00:04:45,020
web pack which solves all of this

00:04:41,639 --> 00:04:45,020
problem sorry

00:04:49,910 --> 00:04:56,159
as soon as they turn 2015 django web

00:04:54,060 --> 00:05:00,889
pack leader came out and it's the first

00:04:56,159 --> 00:05:06,300
set up at integrating web pack and

00:05:00,889 --> 00:05:09,080
django together so the goal here was to

00:05:06,300 --> 00:05:12,930
really separate the responsibilities of

00:05:09,080 --> 00:05:15,990
building the javascript for for the

00:05:12,930 --> 00:05:17,310
browser and serving it before that new

00:05:15,990 --> 00:05:19,650
pipeline they go compressor and

00:05:17,310 --> 00:05:22,440
equivalent we're doing all of this from

00:05:19,650 --> 00:05:24,360
now on we would leave Laidback web pack

00:05:22,440 --> 00:05:27,090
in charge of building this bundle and

00:05:24,360 --> 00:05:30,120
and django in charge of just generating

00:05:27,090 --> 00:05:31,409
a script tag that links to it and so

00:05:30,120 --> 00:05:34,320
transform the development environment

00:05:31,409 --> 00:05:36,270
from a single process where django is in

00:05:34,320 --> 00:05:39,599
challenge of serving and generating the

00:05:36,270 --> 00:05:41,669
HTML and the JS to draw environment

00:05:39,599 --> 00:05:44,400
where we have both web pack engine go

00:05:41,669 --> 00:05:46,919
running and django would still be in

00:05:44,400 --> 00:05:48,630
charge of generating the HTML but then

00:05:46,919 --> 00:05:53,490
point to web pack which would serve the

00:05:48,630 --> 00:05:56,880
js so something else I want to mention

00:05:53,490 --> 00:05:59,699
this section is Emily coca stones blog

00:05:56,880 --> 00:06:01,440
article series from last year because

00:05:59,699 --> 00:06:03,900
they really helped me out and bit on

00:06:01,440 --> 00:06:06,569
formulating a lot of what I've been

00:06:03,900 --> 00:06:09,800
thinking about so his blog articles

00:06:06,569 --> 00:06:11,610
about series of formalization of the

00:06:09,800 --> 00:06:13,169
requirements for building a language

00:06:11,610 --> 00:06:16,469
August applications which is very much

00:06:13,169 --> 00:06:19,099
linked to when I'm talking about and the

00:06:16,469 --> 00:06:19,099
main thing I

00:06:19,270 --> 00:06:26,740
I I remembered from this is he is

00:06:24,580 --> 00:06:28,689
taxonomy of J's applications there's

00:06:26,740 --> 00:06:30,279
basically two kinds of J's applications

00:06:28,689 --> 00:06:32,529
taught to add two kinds of architecture

00:06:30,279 --> 00:06:35,409
the single page application then in

00:06:32,529 --> 00:06:38,560
repeat applications and I come back to

00:06:35,409 --> 00:06:41,020
this in a couple slides and in in in his

00:06:38,560 --> 00:06:44,740
blog he also talks about production the

00:06:41,020 --> 00:06:46,539
priority authentication cause CSRF etc

00:06:44,740 --> 00:06:48,849
so I really recommend going them going

00:06:46,539 --> 00:06:54,099
down I've if you're working on genuine

00:06:48,849 --> 00:06:55,779
JavaScript so in in a mixed economy a

00:06:54,099 --> 00:06:58,659
single page application is an

00:06:55,779 --> 00:07:02,349
application where the ad HTML is purely

00:06:58,659 --> 00:07:04,120
static and never changes so it's not

00:07:02,349 --> 00:07:05,949
rendered by Django it can be a static

00:07:04,120 --> 00:07:09,849
file that self by an joining some Apache

00:07:05,949 --> 00:07:11,770
alongside the two J's files and in this

00:07:09,849 --> 00:07:13,990
context Django is purely used as an API

00:07:11,770 --> 00:07:17,379
and so typically in the production

00:07:13,990 --> 00:07:19,300
setting the browser would end up making

00:07:17,379 --> 00:07:21,009
requests to to two different origins the

00:07:19,300 --> 00:07:26,439
front end where I would all the static

00:07:21,009 --> 00:07:28,120
files HTML CSS J's images and the back

00:07:26,439 --> 00:07:31,000
end will jump around so as the airplane

00:07:28,120 --> 00:07:34,899
and the counterpart is the Hebrew

00:07:31,000 --> 00:07:38,740
application where the HTML itself by

00:07:34,899 --> 00:07:40,360
Django and potentially as the template

00:07:38,740 --> 00:07:42,520
rendered by the Django definition engine

00:07:40,360 --> 00:07:45,490
and so you end up with an application

00:07:42,520 --> 00:07:47,409
running where the dung is a mix of the

00:07:45,490 --> 00:07:51,330
HTML that was generated by Django and

00:07:47,409 --> 00:07:53,620
whatever the JavaScript framework

00:07:51,330 --> 00:07:58,120
whatever changes it brought to this done

00:07:53,620 --> 00:08:01,419
I mean typically in the inhibit

00:07:58,120 --> 00:08:04,419
application the the browser and that

00:08:01,419 --> 00:08:06,159
only talking to one origin would first

00:08:04,419 --> 00:08:08,770
load the HTML which will be around at

00:08:06,159 --> 00:08:10,110
Freud and then load the chains and API

00:08:08,770 --> 00:08:13,270
calls of course

00:08:10,110 --> 00:08:16,149
so both infrastructures have pros and

00:08:13,270 --> 00:08:19,599
cons there is no silver bullet of course

00:08:16,149 --> 00:08:21,639
and even even once you be able to pick

00:08:19,599 --> 00:08:22,960
between single page application and real

00:08:21,639 --> 00:08:24,689
application depending on what's right

00:08:22,960 --> 00:08:26,889
for you there's still a lot of

00:08:24,689 --> 00:08:29,430
implementation details that will vary

00:08:26,889 --> 00:08:31,300
between between implementation

00:08:29,430 --> 00:08:34,360
still have a lot more of design

00:08:31,300 --> 00:08:37,930
decisions so now that's exactly what I

00:08:34,360 --> 00:08:39,820
won't go through from designing

00:08:37,930 --> 00:08:43,570
designing a language of architecture

00:08:39,820 --> 00:08:46,240
together so before we go and start

00:08:43,570 --> 00:08:47,709
making random design decisions it's

00:08:46,240 --> 00:08:49,420
probably better that we're growing a set

00:08:47,709 --> 00:08:52,690
of requirements first on what we want to

00:08:49,420 --> 00:08:54,100
application to be able to achieve so of

00:08:52,690 --> 00:08:56,860
course those requirements will vary a

00:08:54,100 --> 00:08:58,269
lot between projects and the example I

00:08:56,860 --> 00:09:02,890
have here it's something that's very

00:08:58,269 --> 00:09:06,760
typical for the project I work on but

00:09:02,890 --> 00:09:09,820
the the by no mean they may not apply to

00:09:06,760 --> 00:09:13,079
yo use case right for example I think a

00:09:09,820 --> 00:09:17,380
typical requirement that I don't have is

00:09:13,079 --> 00:09:18,700
around having to having to separate the

00:09:17,380 --> 00:09:20,589
codebase between the front end and back

00:09:18,700 --> 00:09:21,760
end having separate also deployment flow

00:09:20,589 --> 00:09:24,490
between front end and back end

00:09:21,760 --> 00:09:26,350
I work in team where everyone is full

00:09:24,490 --> 00:09:27,670
stack so that's fine for me but I know

00:09:26,350 --> 00:09:28,779
lots of companies out there are have

00:09:27,670 --> 00:09:30,490
different teams for front-end and

00:09:28,779 --> 00:09:31,810
back-end and I think if that was a

00:09:30,490 --> 00:09:35,740
requirement for you you would end up

00:09:31,810 --> 00:09:37,660
with a very different solution but

00:09:35,740 --> 00:09:39,459
hopefully I think the the reasoning

00:09:37,660 --> 00:09:41,589
shell will apply whatever your use case

00:09:39,459 --> 00:09:47,640
and we should be able to use this on

00:09:41,589 --> 00:09:47,640
your own projects so sorry

00:09:48,269 --> 00:09:54,339
my requirements are I want environment

00:09:52,149 --> 00:09:55,720
independent builds so I'll come back to

00:09:54,339 --> 00:09:57,640
when I mean exactly for each of them in

00:09:55,720 --> 00:09:59,980
a minute I want hot reloading in

00:09:57,640 --> 00:10:03,010
development and I want development and

00:09:59,980 --> 00:10:05,050
production parity so for undermines

00:10:03,010 --> 00:10:08,829
independent builds first what do I mean

00:10:05,050 --> 00:10:11,290
by build build I mean what about code

00:10:08,829 --> 00:10:13,839
artifact you ship to a server when you

00:10:11,290 --> 00:10:18,220
deploy it could be a file archive a

00:10:13,839 --> 00:10:21,250
docker image a binary bit in conversion

00:10:18,220 --> 00:10:23,949
any person that commits in in a git

00:10:21,250 --> 00:10:25,720
repository for example and why this is

00:10:23,949 --> 00:10:27,399
some way this is important to me is

00:10:25,720 --> 00:10:29,560
because it allows me to do version

00:10:27,399 --> 00:10:31,000
promotion when I've heard a version

00:10:29,560 --> 00:10:32,920
running in one environment for a while

00:10:31,000 --> 00:10:35,050
and I know it fixes the problem I

00:10:32,920 --> 00:10:38,290
intended to solve and I can take this

00:10:35,050 --> 00:10:41,600
exact build this exact set of code and

00:10:38,290 --> 00:10:43,400
then send it to a different environment

00:10:41,600 --> 00:10:45,170
this is something that I discovered on

00:10:43,400 --> 00:10:49,940
Heroku a while back and it really stuck

00:10:45,170 --> 00:10:51,620
with me so yes that brings it brings a

00:10:49,940 --> 00:10:52,700
lot of trust in when I'm about to deploy

00:10:51,620 --> 00:10:55,340
and I know I'm they're going to break

00:10:52,700 --> 00:11:00,740
the next environment down the line so

00:10:55,340 --> 00:11:04,100
how might I achieve this the the first

00:11:00,740 --> 00:11:06,200
the obvious answer is to not have any

00:11:04,100 --> 00:11:09,170
environment specific values are coded in

00:11:06,200 --> 00:11:11,360
in the code and the main way to do this

00:11:09,170 --> 00:11:14,120
is to use environment variables the

00:11:11,360 --> 00:11:15,950
domain domain when I'm talking about

00:11:14,120 --> 00:11:17,600
this section is very related to the 12

00:11:15,950 --> 00:11:19,130
factor app so if you don't know about

00:11:17,600 --> 00:11:21,710
this I really recommend you go and read

00:11:19,130 --> 00:11:23,650
read the 12 pages on 12 fact on that net

00:11:21,710 --> 00:11:25,970
it's it's very interesting

00:11:23,650 --> 00:11:27,440
so environment variables they are really

00:11:25,970 --> 00:11:29,030
easy to use in Jango that's not a

00:11:27,440 --> 00:11:31,010
problem at all in the backend we can

00:11:29,030 --> 00:11:32,330
read them anywhere on the code and read

00:11:31,010 --> 00:11:34,790
them in the settings and then read the

00:11:32,330 --> 00:11:37,160
settings so Jango is really easy to

00:11:34,790 --> 00:11:38,240
write engine environment in abundant way

00:11:37,160 --> 00:11:42,020
as long as you have access to

00:11:38,240 --> 00:11:43,550
environment variables on your saga but

00:11:42,020 --> 00:11:46,160
in JavaScript it's a bit of a different

00:11:43,550 --> 00:11:48,350
story never feels a bit harder typically

00:11:46,160 --> 00:11:50,510
the the main bit of config you would

00:11:48,350 --> 00:11:53,600
need in the java application is the api

00:11:50,510 --> 00:11:56,030
endpoint where am i going to send my

00:11:53,600 --> 00:11:57,980
request for example in production i may

00:11:56,030 --> 00:12:00,470
want to connect to api at example.com

00:11:57,980 --> 00:12:02,120
over https while in development i'm

00:12:00,470 --> 00:12:07,730
going to connect to local host on port

00:12:02,120 --> 00:12:09,230
8000 or HTTP and so of course javascript

00:12:07,730 --> 00:12:10,400
doesn't have a concept of on Grauman

00:12:09,230 --> 00:12:15,680
viable we can't set environment

00:12:10,400 --> 00:12:17,180
variables in our users browsers so as

00:12:15,680 --> 00:12:20,060
far as I can tell that leaves us with

00:12:17,180 --> 00:12:22,070
two options either we find a way to load

00:12:20,060 --> 00:12:24,860
the config when the application starts

00:12:22,070 --> 00:12:27,140
from somewhere that probably means an

00:12:24,860 --> 00:12:30,230
API call and if we're making an API call

00:12:27,140 --> 00:12:31,040
to what endpoints it's kind of snake

00:12:30,230 --> 00:12:34,160
eating its own tail

00:12:31,040 --> 00:12:36,410
it's a that's probably going to work the

00:12:34,160 --> 00:12:38,960
alternative I can see is to inject the

00:12:36,410 --> 00:12:41,540
configuration inside of the HTML during

00:12:38,960 --> 00:12:44,360
rendering in so in Django

00:12:41,540 --> 00:12:46,040
so that means that our HTML has to be a

00:12:44,360 --> 00:12:49,220
go template so that means we're using a

00:12:46,040 --> 00:12:51,610
hybrid application in in August on

00:12:49,220 --> 00:12:51,610
taxonomy

00:12:51,990 --> 00:12:57,480
and one way you might with this crew

00:12:54,990 --> 00:12:59,670
translates in in the template if this is

00:12:57,480 --> 00:13:02,190
the template for your java application

00:12:59,670 --> 00:13:04,140
you might want to write a global config

00:13:02,190 --> 00:13:06,360
variable in JavaScript with the set of

00:13:04,140 --> 00:13:08,430
this is an example but I'm sitting for

00:13:06,360 --> 00:13:11,400
example an API endpoint that's actually

00:13:08,430 --> 00:13:13,260
just a context variable in Django

00:13:11,400 --> 00:13:15,000
templates then also although our

00:13:13,260 --> 00:13:18,960
business logic values that's actually

00:13:15,000 --> 00:13:23,460
coming from the database right okay so

00:13:18,960 --> 00:13:27,120
that was environment independence next

00:13:23,460 --> 00:13:31,950
hot reloading in development so hot

00:13:27,120 --> 00:13:33,779
reloading is this very powerful front

00:13:31,950 --> 00:13:37,580
end development feature that's very much

00:13:33,779 --> 00:13:40,260
like django Django is filled provides

00:13:37,580 --> 00:13:42,480
it's based on web pack dev server and as

00:13:40,260 --> 00:13:44,130
soon as I make a change in my JavaScript

00:13:42,480 --> 00:13:46,110
source code and my frontin room my

00:13:44,130 --> 00:13:48,120
browser refreshes and I can see the

00:13:46,110 --> 00:13:49,680
change immediately in my browser so it

00:13:48,120 --> 00:13:52,410
really shortens the feedback loop from

00:13:49,680 --> 00:13:56,190
writing a code and potentially a bug and

00:13:52,410 --> 00:13:57,930
then detecting it so this feature relies

00:13:56,190 --> 00:13:59,490
on web pack - neurons and just said and

00:13:57,930 --> 00:14:02,339
there's actually two levels to it

00:13:59,490 --> 00:14:04,260
there's live reloading where as soon as

00:14:02,339 --> 00:14:06,810
I make a change in my source code and

00:14:04,260 --> 00:14:09,210
it's getting picked up and my brother

00:14:06,810 --> 00:14:11,660
refreshes so that means I do see the

00:14:09,210 --> 00:14:14,700
change in my brother but I lose all the

00:14:11,660 --> 00:14:16,589
variables values I lose all my context

00:14:14,700 --> 00:14:18,930
when I was an application etc so it's a

00:14:16,589 --> 00:14:20,640
start with no great and then the hot

00:14:18,930 --> 00:14:23,280
reloading is the next step

00:14:20,640 --> 00:14:25,200
it's where instead of triggering a

00:14:23,280 --> 00:14:27,870
refresh of the page web packet of server

00:14:25,200 --> 00:14:30,570
is going to send the new rebuild chunk

00:14:27,870 --> 00:14:32,780
of a WebSocket to the browser and the

00:14:30,570 --> 00:14:35,040
browser is going to replace it in place

00:14:32,780 --> 00:14:36,450
with a trigger a refresh so I get to

00:14:35,040 --> 00:14:40,410
keep my variable where I was in the

00:14:36,450 --> 00:14:42,390
application etc right so let's start

00:14:40,410 --> 00:14:46,290
with hot hot reading actually and it's

00:14:42,390 --> 00:14:47,670
going to be quick so hot reloading uses

00:14:46,290 --> 00:14:49,980
WebSockets on my pack their server and

00:14:47,670 --> 00:14:51,570
as I just described the way it looks

00:14:49,980 --> 00:14:52,970
like is in development should load the

00:14:51,570 --> 00:14:55,410
HTML from Django

00:14:52,970 --> 00:14:56,910
which would then point to the static

00:14:55,410 --> 00:14:58,380
files in my pack them server and then

00:14:56,910 --> 00:15:00,630
every time you make a change to my

00:14:58,380 --> 00:15:02,730
JavaScript source code then web pack is

00:15:00,630 --> 00:15:03,870
going to ship those how to updates of

00:15:02,730 --> 00:15:07,080
our web socket and my

00:15:03,870 --> 00:15:08,279
occation is going to update itself so

00:15:07,080 --> 00:15:11,040
I've got one big problem with hot

00:15:08,279 --> 00:15:13,140
reloading and it's because I'm using

00:15:11,040 --> 00:15:15,870
create reactive which is the main

00:15:13,140 --> 00:15:18,089
reactor plate out there and it's broken

00:15:15,870 --> 00:15:20,750
I won't go into why if you're interested

00:15:18,089 --> 00:15:23,970
then we can discuss this after the talk

00:15:20,750 --> 00:15:26,490
when I'm waiting for feedback from the

00:15:23,970 --> 00:15:29,480
the folks at Facebook if you are not

00:15:26,490 --> 00:15:32,339
using trade react app and you're using

00:15:29,480 --> 00:15:35,279
vanilla or a custom setup of web pack

00:15:32,339 --> 00:15:37,320
devs I found and I may just walk so

00:15:35,279 --> 00:15:38,820
taking a step back and let's take it a

00:15:37,320 --> 00:15:43,680
step back and just aim for life

00:15:38,820 --> 00:15:45,240
reloading for our leveraging to walk all

00:15:43,680 --> 00:15:47,070
I need is to make sure that my

00:15:45,240 --> 00:15:52,020
JavaScript source code is coming from

00:15:47,070 --> 00:15:54,270
webpack dev summer so that leaves us

00:15:52,020 --> 00:15:56,279
again with two options either when the

00:15:54,270 --> 00:15:58,620
application when when I load the page on

00:15:56,279 --> 00:16:00,480
my browser it's able to tell which files

00:15:58,620 --> 00:16:02,100
I need when web pack dev server and

00:16:00,480 --> 00:16:05,100
dynamically looked at load them in the

00:16:02,100 --> 00:16:06,870
page or Django is able to render all of

00:16:05,100 --> 00:16:08,940
those scripts in the page for Midway at

00:16:06,870 --> 00:16:13,680
render time and serve the HTML to my

00:16:08,940 --> 00:16:16,830
process I'd lose the files and both of

00:16:13,680 --> 00:16:19,560
them or both of them are fine and twelve

00:16:16,830 --> 00:16:22,140
is designed between those two solution

00:16:19,560 --> 00:16:24,750
when we do is look at the cell criteria

00:16:22,140 --> 00:16:26,190
development protein parity so what is

00:16:24,750 --> 00:16:27,900
this going to look like in production

00:16:26,190 --> 00:16:31,800
well in production we won't have web

00:16:27,900 --> 00:16:35,760
active server running of course so we

00:16:31,800 --> 00:16:38,459
will have to use we will have to be able

00:16:35,760 --> 00:16:43,830
to render script tags with the right

00:16:38,459 --> 00:16:45,029
urls in the HTML and for for the

00:16:43,830 --> 00:16:46,500
development production priority

00:16:45,029 --> 00:16:52,020
requirement work then we should probably

00:16:46,500 --> 00:16:53,459
pick the same thing in development so

00:16:52,020 --> 00:16:54,959
now I have to be very honest with you

00:16:53,459 --> 00:16:56,790
and tell you that I've been doing

00:16:54,959 --> 00:17:00,900
solution one for a long time for

00:16:56,790 --> 00:17:02,279
absolutely no good reason and just for

00:17:00,900 --> 00:17:04,380
the sake of completeness I'm going to

00:17:02,279 --> 00:17:05,730
show you what that looks like so it's

00:17:04,380 --> 00:17:07,790
probably not readable from the found

00:17:05,730 --> 00:17:10,410
don't worry I'll just skim through it

00:17:07,790 --> 00:17:12,660
which you've got good as you can see

00:17:10,410 --> 00:17:14,520
several if debug if not the black et

00:17:12,660 --> 00:17:16,800
cetera

00:17:14,520 --> 00:17:19,679
so that's very bad for the refraction

00:17:16,800 --> 00:17:21,270
parity and this this big chunk in the

00:17:19,679 --> 00:17:23,400
middle here is actually manually

00:17:21,270 --> 00:17:26,390
fetching a manifest with the list of all

00:17:23,400 --> 00:17:31,100
the files in webpack dev server and

00:17:26,390 --> 00:17:32,850
dynamically adding them to document here

00:17:31,100 --> 00:17:35,400
so it's very dirty

00:17:32,850 --> 00:17:37,620
and and I mentioned Django webpack

00:17:35,400 --> 00:17:41,220
earlier and I think that's why I go back

00:17:37,620 --> 00:17:45,630
to the could help a lot we could

00:17:41,220 --> 00:17:47,160
transform this and nice animations we

00:17:45,630 --> 00:17:50,940
could replace all of this with just two

00:17:47,160 --> 00:17:52,740
lines render a bundle for CSS and

00:17:50,940 --> 00:17:54,630
renderable from J's and this would work

00:17:52,740 --> 00:17:59,059
both in production and in development

00:17:54,630 --> 00:18:02,429
removing the need for the if and else's

00:17:59,059 --> 00:18:04,950
and also the need for dynamically

00:18:02,429 --> 00:18:06,870
loading all of this so as I've said I

00:18:04,950 --> 00:18:09,840
haven't tried this method yet it's on my

00:18:06,870 --> 00:18:11,130
to-do list for the very short term so I

00:18:09,840 --> 00:18:17,070
can't gr T this is going to work we

00:18:11,130 --> 00:18:18,809
think this is the right way to go right

00:18:17,070 --> 00:18:20,700
and about development proficient parity

00:18:18,809 --> 00:18:24,140
it's actually very difficult to achieve

00:18:20,700 --> 00:18:26,250
100% parity especially between

00:18:24,140 --> 00:18:29,100
development and any other environment

00:18:26,250 --> 00:18:32,880
actually if you think about it my my

00:18:29,100 --> 00:18:35,220
requirement around product development

00:18:32,880 --> 00:18:38,370
sorry environment independent build is

00:18:35,220 --> 00:18:41,309
kind of UHE versus production parity or

00:18:38,370 --> 00:18:42,510
staging versus portion parity because I

00:18:41,309 --> 00:18:44,670
want to make sure that they are exactly

00:18:42,510 --> 00:18:46,650
the same development is different

00:18:44,670 --> 00:18:51,420
because you're always using different

00:18:46,650 --> 00:18:52,650
different tools different servers so

00:18:51,420 --> 00:18:54,300
it's difficult which one will put some

00:18:52,650 --> 00:18:57,320
parity but it's to something that's

00:18:54,300 --> 00:18:57,320
different she was aiming from

00:18:58,340 --> 00:19:04,920
alright so now that we've gone through

00:19:03,480 --> 00:19:07,590
these requirements and we've got the

00:19:04,920 --> 00:19:10,020
original list of design decision we've

00:19:07,590 --> 00:19:13,440
made let's look at what it looks like in

00:19:10,020 --> 00:19:15,720
the code so this is all set up at least

00:19:13,440 --> 00:19:19,590
in development and the main piece of

00:19:15,720 --> 00:19:22,080
integration between Django and

00:19:19,590 --> 00:19:25,940
JavaScript now resides in the template

00:19:22,080 --> 00:19:31,279
for the HTML that's one done by Django

00:19:25,940 --> 00:19:33,289
and and so here we end up with the the

00:19:31,279 --> 00:19:35,809
main block here setting the the the

00:19:33,289 --> 00:19:39,320
config for the java application that's

00:19:35,809 --> 00:19:42,110
actually rather by Django we have the to

00:19:39,320 --> 00:19:43,759
render bundled tags on the for CSS in

00:19:42,110 --> 00:19:48,590
the top and andreas at the bottom and

00:19:43,759 --> 00:19:50,840
that's coming from our hot reloading

00:19:48,590 --> 00:19:54,909
requirement and the repression parity

00:19:50,840 --> 00:19:57,500
requirement and that's it so you this is

00:19:54,909 --> 00:19:59,960
built for react so there's a there's a

00:19:57,500 --> 00:20:03,370
deal with IG app you could will

00:19:59,960 --> 00:20:05,120
definitely adapt this to whatever

00:20:03,370 --> 00:20:08,120
frameworks are using and you could

00:20:05,120 --> 00:20:10,159
actually you could actually build many

00:20:08,120 --> 00:20:13,700
other things pre pre built into the HTML

00:20:10,159 --> 00:20:15,289
and just load the JS JS application in a

00:20:13,700 --> 00:20:17,629
tiny part of the page that's also an

00:20:15,289 --> 00:20:19,490
option here because we're using hybrid

00:20:17,629 --> 00:20:22,879
application it gives us this flexibility

00:20:19,490 --> 00:20:24,860
around how much content do I want to be

00:20:22,879 --> 00:20:27,710
generated by Django and how much content

00:20:24,860 --> 00:20:32,210
I want to be taken care of by a

00:20:27,710 --> 00:20:33,830
JavaScript so of course once we have

00:20:32,210 --> 00:20:36,200
this template we need a view to render

00:20:33,830 --> 00:20:39,019
it I thought I just showed this just to

00:20:36,200 --> 00:20:41,809
show where I set the way I define the

00:20:39,019 --> 00:20:43,490
context valuable for ordering I'm in

00:20:41,809 --> 00:20:46,789
this example I'm reading both from the

00:20:43,490 --> 00:20:48,830
settings and from models in the database

00:20:46,789 --> 00:20:50,450
but you can pull in the information to

00:20:48,830 --> 00:20:53,710
configure your front-end application

00:20:50,450 --> 00:20:56,509
form we're gonna make sense in your face

00:20:53,710 --> 00:21:00,470
and finally we need to mount this view

00:20:56,509 --> 00:21:03,169
on the URL which needs to be generic

00:21:00,470 --> 00:21:06,049
enough so that we're going to set serve

00:21:03,169 --> 00:21:08,389
this HTML for every page of our

00:21:06,049 --> 00:21:11,110
JavaScript application I really are the

00:21:08,389 --> 00:21:16,009
supported by your JavaScript application

00:21:11,110 --> 00:21:17,210
right and in the front end it's even

00:21:16,009 --> 00:21:18,710
simpler in the front end there is no

00:21:17,210 --> 00:21:21,320
need to make any change to our

00:21:18,710 --> 00:21:23,600
JavaScript at least do one tiny change

00:21:21,320 --> 00:21:26,899
then we need to make is to make sure

00:21:23,600 --> 00:21:30,649
that our web pack configuration is able

00:21:26,899 --> 00:21:32,360
to output a manifest so a list of all

00:21:30,649 --> 00:21:34,429
the files that it just outputted last

00:21:32,360 --> 00:21:35,779
time in run so that the Django can then

00:21:34,429 --> 00:21:37,639
read this and

00:21:35,779 --> 00:21:42,679
and link to all the files in the nation

00:21:37,639 --> 00:21:46,669
so there's this one line here the window

00:21:42,679 --> 00:21:50,570
tracker plugin and finally I thought I'd

00:21:46,669 --> 00:21:52,309
show you what my deployment looked like

00:21:50,570 --> 00:21:53,869
so I used ocular but if you do something

00:21:52,309 --> 00:21:56,269
similar you still have the main steps

00:21:53,869 --> 00:22:00,729
which are first building the JavaScript

00:21:56,269 --> 00:22:00,729
application so you output a set of

00:22:00,759 --> 00:22:06,049
JavaScript CSS images whatever and also

00:22:04,070 --> 00:22:08,809
a manifest file which contains a list of

00:22:06,049 --> 00:22:11,019
all of those other things then copying

00:22:08,809 --> 00:22:13,070
this over to a static directory that's

00:22:11,019 --> 00:22:14,749
controlled by Django which Danko has

00:22:13,070 --> 00:22:18,320
access to and then finally run incorrect

00:22:14,749 --> 00:22:19,879
static and from here you know that the

00:22:18,320 --> 00:22:21,710
Select files are available to be served

00:22:19,879 --> 00:22:25,429
and Django a package and we'll know what

00:22:21,710 --> 00:22:30,830
to get those files from so he can links

00:22:25,429 --> 00:22:32,139
to them and that's it so that's it's

00:22:30,830 --> 00:22:34,909
[Music]

00:22:32,139 --> 00:22:36,859
it's not but it's by far not a complete

00:22:34,909 --> 00:22:38,239
example there's many other things that

00:22:36,859 --> 00:22:39,679
we probably would need to go through

00:22:38,239 --> 00:22:41,179
when designing a Django Jeff's

00:22:39,679 --> 00:22:45,049
application

00:22:41,179 --> 00:22:47,179
things like authentication cause yes

00:22:45,049 --> 00:22:49,099
arrived although I wouldn't say that do

00:22:47,179 --> 00:22:51,379
the last two interesting topics but

00:22:49,099 --> 00:22:57,200
they're in the list anyway SEO

00:22:51,379 --> 00:22:58,669
progressive web app support etc and this

00:22:57,200 --> 00:23:02,080
is that most of these are actually

00:22:58,669 --> 00:23:04,399
topics that were covered by Augustine

00:23:02,080 --> 00:23:06,499
article series so if your interest into

00:23:04,399 --> 00:23:10,429
this I again recommend highly recommend

00:23:06,499 --> 00:23:13,700
reading him that's it for me I think in

00:23:10,429 --> 00:23:16,570
conclusion I'd say that we can still

00:23:13,700 --> 00:23:18,950
improve the state of the documentation

00:23:16,570 --> 00:23:19,429
on how to integrate JavaScript and

00:23:18,950 --> 00:23:22,729
Django

00:23:19,429 --> 00:23:24,259
I don't think that Django is missing any

00:23:22,729 --> 00:23:28,070
feature to make this for apparently it's

00:23:24,259 --> 00:23:30,379
more about building the documenting the

00:23:28,070 --> 00:23:32,779
the known state of the art for this to

00:23:30,379 --> 00:23:38,059
work and and giving examples for both

00:23:32,779 --> 00:23:39,589
code and architecture patterns right and

00:23:38,059 --> 00:23:41,210
I'm also really curious to know how you

00:23:39,589 --> 00:23:42,979
guys manage your own JavaScript engine

00:23:41,210 --> 00:23:46,749
and Django application so feel free to

00:23:42,979 --> 00:23:46,749
commit to me after work Thanks

00:23:52,120 --> 00:23:56,960
Thank You Nathan and do we have any

00:23:54,799 --> 00:24:05,600
questions from the audience as usual

00:23:56,960 --> 00:24:10,490
please line up anybody no all right

00:24:05,600 --> 00:24:12,169
Thank You Nathan thank you oh wait one

00:24:10,490 --> 00:24:14,289
question we have questions from the

00:24:12,169 --> 00:24:14,289
internet

00:24:37,830 --> 00:24:43,770
well I think we go now we got my god no

00:24:42,220 --> 00:24:45,910
I step one okay there we go

00:24:43,770 --> 00:24:49,000
if you open the floor for questions is

00:24:45,910 --> 00:24:51,640
always a question in your example code

00:24:49,000 --> 00:24:54,100
there the where you had the settings

00:24:51,640 --> 00:24:56,350
being rendered in Django and then the

00:24:54,100 --> 00:25:00,400
rest being done is hot or reloading yeah

00:24:56,350 --> 00:25:01,950
one of the pieces is in there is list of

00:25:00,400 --> 00:25:05,950
opening hours or something like that

00:25:01,950 --> 00:25:07,330
term in this yes that's the one yeah

00:25:05,950 --> 00:25:08,290
you've got you have your opening hours

00:25:07,330 --> 00:25:09,700
being rendered as something from

00:25:08,290 --> 00:25:12,490
template yep

00:25:09,700 --> 00:25:14,680
that's not going to play well with the

00:25:12,490 --> 00:25:17,170
hot reloading I would assume is there is

00:25:14,680 --> 00:25:19,450
that it's like an example of something

00:25:17,170 --> 00:25:22,300
that you maybe want to try do an API or

00:25:19,450 --> 00:25:26,370
is they and that I don't see why you

00:25:22,300 --> 00:25:29,050
wouldn't so this set of variables are

00:25:26,370 --> 00:25:31,150
zooming out reading on everything sorry

00:25:29,050 --> 00:25:33,880
live reloading sorry everything so only

00:25:31,150 --> 00:25:36,430
everything every time I every time the

00:25:33,880 --> 00:25:38,200
browser is refreshed in the HTML would

00:25:36,430 --> 00:25:40,030
be really recombined and rerun so this

00:25:38,200 --> 00:25:41,980
variable will be reset every time and

00:25:40,030 --> 00:25:44,440
janggu just free Monday on the same

00:25:41,980 --> 00:25:45,730
exact time plate every time right so I

00:25:44,440 --> 00:25:47,800
don't think this would be a problem okay

00:25:45,730 --> 00:25:50,340
but if and then so on the JavaScript on

00:25:47,800 --> 00:25:52,870
the hot reloading

00:25:50,340 --> 00:25:54,130
that's like once the page renders once

00:25:52,870 --> 00:25:55,960
the settings are only ever done on the

00:25:54,130 --> 00:25:58,270
page reload but you can modify the

00:25:55,960 --> 00:26:00,610
JavaScript amend that yeah that won't

00:25:58,270 --> 00:26:01,600
pick up any changes there so I don't

00:26:00,610 --> 00:26:03,160
think it creates problem with this

00:26:01,600 --> 00:26:06,160
because this variable is never reset

00:26:03,160 --> 00:26:10,890
it's always defined globally but it does

00:26:06,160 --> 00:26:13,030
create problem especially I think it's

00:26:10,890 --> 00:26:14,350
especially it's so hot reading works

00:26:13,030 --> 00:26:16,330
very well for react components for

00:26:14,350 --> 00:26:19,960
example everything visual is perfectly

00:26:16,330 --> 00:26:22,480
fine it works less well when you change

00:26:19,960 --> 00:26:25,630
a bit of logic somewhere I couldn't

00:26:22,480 --> 00:26:29,380
explain you why I'm not an expert by far

00:26:25,630 --> 00:26:30,880
and I'm not reading there was any

00:26:29,380 --> 00:26:32,980
particular guidelines about what you

00:26:30,880 --> 00:26:34,630
keeping what you can put in that country

00:26:32,980 --> 00:26:36,850
I think I think this is fairly flexible

00:26:34,630 --> 00:26:38,140
and I'm pretty confident that this is

00:26:36,850 --> 00:26:41,740
not going to be reset by either

00:26:38,140 --> 00:26:43,630
everything or hot reloading you can just

00:26:41,740 --> 00:26:44,200
see this as the main configuration

00:26:43,630 --> 00:26:47,380
object for

00:26:44,200 --> 00:26:53,799
duplication and and and put anything you

00:26:47,380 --> 00:26:55,450
want in there very quick question first

00:26:53,799 --> 00:26:58,419
of all I'm not a full stack just I

00:26:55,450 --> 00:27:02,639
became an engineer but our team has some

00:26:58,419 --> 00:27:09,309
had some problems previously about the

00:27:02,639 --> 00:27:18,179
local server not running over HTTP did

00:27:09,309 --> 00:27:18,179
do you have anything to with HTTP yes

00:27:20,700 --> 00:27:26,409
and no I'm not sure sailors anything

00:27:24,909 --> 00:27:29,220
about she's I'm not sure what exactly

00:27:26,409 --> 00:27:29,220
was your issue

00:27:31,019 --> 00:27:37,419
we couldn't serve the drone server or

00:27:33,880 --> 00:27:42,190
HTTPS and rats at some point has some

00:27:37,419 --> 00:27:44,799
problems maybe yeah I don't know in

00:27:42,190 --> 00:27:46,299
development I don't use HTTP in

00:27:44,799 --> 00:27:48,490
development and this has never been a

00:27:46,299 --> 00:27:52,149
problem to me

00:27:48,490 --> 00:27:54,460
web active server runs over HTTP and

00:27:52,149 --> 00:27:55,779
when once you're in production the web

00:27:54,460 --> 00:27:57,250
active server doesn't matter anymore

00:27:55,779 --> 00:27:58,809
because you just can't put a set of

00:27:57,250 --> 00:28:05,019
static files that are always going to be

00:27:58,809 --> 00:28:06,370
served so I create a nginx container for

00:28:05,019 --> 00:28:09,250
them manually and they are serve the

00:28:06,370 --> 00:28:13,360
right place so maybe your issues could

00:28:09,250 --> 00:28:15,460
be around request acknowledged it appear

00:28:13,360 --> 00:28:17,740
resources from a page that's some of the

00:28:15,460 --> 00:28:20,409
worst place and there are limitations

00:28:17,740 --> 00:28:25,510
and in browsers around this may be

00:28:20,409 --> 00:28:26,889
probably thank you look all right that

00:28:25,510 --> 00:28:29,760
was it for the questions Thank You

00:28:26,889 --> 00:28:29,760
Nathan thank you

00:28:30,540 --> 00:28:32,600

YouTube URL: https://www.youtube.com/watch?v=aMg5b2lWG_Q


