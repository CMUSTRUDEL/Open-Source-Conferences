Title: DjangoCon 2019 - Pentesting your Django apps
Publication date: 2019-04-23
Playlist: DjangoCon Europe 2019 in Copenhagen
Description: 
	https://2019.djangocon.eu/talks/pentesting-your-django-apps/

By Keira and Sky: https://twitter.com/RedAndBlackTech
Captions: 
	00:00:00,530 --> 00:00:04,680
anyway without further ado I would like

00:00:03,060 --> 00:00:06,270
to invite our next speakers to the stage

00:00:04,680 --> 00:00:09,690
we have a pair of speakers on this one

00:00:06,270 --> 00:00:11,759
Kira and Kira and Skye talking about

00:00:09,690 --> 00:00:21,270
pentesting django applications everyone

00:00:11,759 --> 00:00:22,650
please welcome to the stage okay so hi

00:00:21,270 --> 00:00:25,289
I'm Kira

00:00:22,650 --> 00:00:27,539
this is Skye and we're both django

00:00:25,289 --> 00:00:31,859
developers but today we're here to talk

00:00:27,539 --> 00:00:34,920
to you about pen testing so we want to

00:00:31,859 --> 00:00:39,120
tell you how to ordinary completely

00:00:34,920 --> 00:00:41,010
ungifted self-taught developers can get

00:00:39,120 --> 00:00:44,129
into pen testing and why we think you

00:00:41,010 --> 00:00:46,860
should try - before we move on the

00:00:44,129 --> 00:00:48,809
slides are up on our github for anyone

00:00:46,860 --> 00:00:54,090
who needs to follow on on their end of

00:00:48,809 --> 00:00:55,559
us so we care about security we we think

00:00:54,090 --> 00:00:59,460
it's interesting we worry about our

00:00:55,559 --> 00:01:02,370
users but more than that Skye and I need

00:00:59,460 --> 00:01:04,470
to care about security because in our

00:01:02,370 --> 00:01:07,650
own time for love we run a free

00:01:04,470 --> 00:01:10,290
not-for-profit zero budget application

00:01:07,650 --> 00:01:12,720
that supports activist groups so we need

00:01:10,290 --> 00:01:15,270
to and we think this is a pretty common

00:01:12,720 --> 00:01:17,460
problem across Django and across other

00:01:15,270 --> 00:01:22,670
communities so we wanted to share our

00:01:17,460 --> 00:01:24,960
solution so before we do a few caveats

00:01:22,670 --> 00:01:29,610
we're not security professionals

00:01:24,960 --> 00:01:32,579
we're just developers and we can't make

00:01:29,610 --> 00:01:34,170
you a security professional either so I

00:01:32,579 --> 00:01:35,549
hope you get something out of the talk

00:01:34,170 --> 00:01:39,750
but don't go updating your LinkedIn

00:01:35,549 --> 00:01:41,280
profile just yet okay and we don't want

00:01:39,750 --> 00:01:43,619
to talk anybody out of using

00:01:41,280 --> 00:01:45,869
professional security services so if you

00:01:43,619 --> 00:01:49,590
have access to professional securities

00:01:45,869 --> 00:01:52,280
either in a prevention team in a local

00:01:49,590 --> 00:01:55,530
team or as pen testers please use them

00:01:52,280 --> 00:01:56,700
but we don't all have access and so we

00:01:55,530 --> 00:02:00,630
think it's pretty valuable for

00:01:56,700 --> 00:02:04,409
developers to learn anyway so what the

00:02:00,630 --> 00:02:06,320
next 20 minutes will look like I'm gonna

00:02:04,409 --> 00:02:08,700
tell you what penetration testing is

00:02:06,320 --> 00:02:10,590
this guy's going to tell you why we

00:02:08,700 --> 00:02:12,690
think you should learn it we'll both

00:02:10,590 --> 00:02:15,330
show you what it looks like to

00:02:12,690 --> 00:02:17,130
use it with a Django up in a beta date s

00:02:15,330 --> 00:02:21,390
way and we'll tell you a little bit

00:02:17,130 --> 00:02:24,030
about how you can start learning so what

00:02:21,390 --> 00:02:27,480
is it so it's short for penetration

00:02:24,030 --> 00:02:30,120
testing and like any other tech issue

00:02:27,480 --> 00:02:32,610
there are a lot of opinions there's a

00:02:30,120 --> 00:02:34,260
lot of different definitions we're going

00:02:32,610 --> 00:02:36,870
to be talking about it at its most basic

00:02:34,260 --> 00:02:40,110
and what we generally agree on is that

00:02:36,870 --> 00:02:42,210
includes these four things so a scan of

00:02:40,110 --> 00:02:44,400
your application for vulnerabilities

00:02:42,210 --> 00:02:46,410
this can be automated or a code review

00:02:44,400 --> 00:02:53,310
or a mixture of both but it includes the

00:02:46,410 --> 00:02:55,290
skin this is giving a head attacking to

00:02:53,310 --> 00:02:56,970
exploit those vulnerabilities and prove

00:02:55,290 --> 00:03:00,420
that they exist because you can get some

00:02:56,970 --> 00:03:03,540
false positives with the purpose of

00:03:00,420 --> 00:03:06,050
securing your app and with the

00:03:03,540 --> 00:03:08,640
permission of the owner of the app and

00:03:06,050 --> 00:03:10,860
those last two are really important

00:03:08,640 --> 00:03:12,770
you've already heard a few labs if you

00:03:10,860 --> 00:03:15,480
don't have those you're just hacking

00:03:12,770 --> 00:03:17,280
it's probably illegal there will

00:03:15,480 --> 00:03:19,680
probably be consequences

00:03:17,280 --> 00:03:22,860
you'll probably get caught just don't do

00:03:19,680 --> 00:03:25,350
that and the last thing to keep in mind

00:03:22,860 --> 00:03:27,750
with the definition is what it isn't so

00:03:25,350 --> 00:03:30,510
it's not perfect it's not a security

00:03:27,750 --> 00:03:31,190
panacea especially when done by an

00:03:30,510 --> 00:03:35,489
amateur

00:03:31,190 --> 00:03:37,440
however enthusiastic so if so be careful

00:03:35,489 --> 00:03:40,920
and there's a really good quote I like

00:03:37,440 --> 00:03:46,350
that explains this so I'll let you read

00:03:40,920 --> 00:03:48,480
them so for anyone who can't quite see

00:03:46,350 --> 00:03:50,040
it it says if you fail a penetration

00:03:48,480 --> 00:03:52,739
test you know you have a very bad

00:03:50,040 --> 00:03:55,200
problem indeed if you pass a penetration

00:03:52,739 --> 00:03:58,830
test you don't know that you don't have

00:03:55,200 --> 00:04:00,480
a very bad problem that aside we think

00:03:58,830 --> 00:04:03,200
it's absolutely worth doing and sky's

00:04:00,480 --> 00:04:03,200
going to tell you why

00:04:03,270 --> 00:04:06,319
[Music]

00:04:07,280 --> 00:04:14,000
so why should we as developers learn

00:04:09,950 --> 00:04:15,410
contest developer unemployment is low

00:04:14,000 --> 00:04:17,209
pretty much every developer who's

00:04:15,410 --> 00:04:19,850
looking for a job minister finds manages

00:04:17,209 --> 00:04:21,709
to find one fairly easily generally

00:04:19,850 --> 00:04:24,410
speaking we have more work to do than we

00:04:21,709 --> 00:04:26,210
have time to do it in and our tech is

00:04:24,410 --> 00:04:28,280
constantly changing we're constantly

00:04:26,210 --> 00:04:30,530
having to learn about new taking

00:04:28,280 --> 00:04:32,830
existing tech as it changes just to stay

00:04:30,530 --> 00:04:35,690
relevant in the jobs that we do and

00:04:32,830 --> 00:04:37,670
because we're so busy our clients and

00:04:35,690 --> 00:04:39,740
our bosses really aren't pushing us at

00:04:37,670 --> 00:04:42,590
the moment to learn pentesting all these

00:04:39,740 --> 00:04:44,330
sorts of security skills so why is it

00:04:42,590 --> 00:04:47,540
worth our time to put in the effort to

00:04:44,330 --> 00:04:49,040
learn yet another new thing well we

00:04:47,540 --> 00:04:52,070
think there are a lot of really good

00:04:49,040 --> 00:04:54,470
reasons to do this and the first is

00:04:52,070 --> 00:04:57,890
knowledge so knowing about what

00:04:54,470 --> 00:04:59,500
vulnerabilities are how they work how

00:04:57,890 --> 00:05:01,820
they're exploited what they look like

00:04:59,500 --> 00:05:02,990
puts us in a really good position not to

00:05:01,820 --> 00:05:05,540
create them in the first place as

00:05:02,990 --> 00:05:08,110
developers when we write code Jango does

00:05:05,540 --> 00:05:09,680
a great job of protecting us from

00:05:08,110 --> 00:05:11,300
introducing most sorts of

00:05:09,680 --> 00:05:13,130
vulnerabilities into our code at least

00:05:11,300 --> 00:05:15,710
when we're doing the fairly sort of

00:05:13,130 --> 00:05:17,990
vanilla basic tasks but the more complex

00:05:15,710 --> 00:05:18,979
our code gets the less able Jango is to

00:05:17,990 --> 00:05:21,380
protect us from every single

00:05:18,979 --> 00:05:22,700
vulnerability that we can introduce so

00:05:21,380 --> 00:05:24,560
if we know what the vulnerabilities are

00:05:22,700 --> 00:05:26,540
what they look like we're in a much

00:05:24,560 --> 00:05:32,780
better position not to introduce them

00:05:26,540 --> 00:05:34,160
into our code and there's budgets so we

00:05:32,780 --> 00:05:35,810
all know that there's a lot of money

00:05:34,160 --> 00:05:38,300
floating around in tech right at the

00:05:35,810 --> 00:05:42,440
moment but like the rest of society that

00:05:38,300 --> 00:05:46,310
money is not evenly distributed outside

00:05:42,440 --> 00:05:47,630
the Hutt startups and the unicorns the

00:05:46,310 --> 00:05:51,260
rest of the internet runs on a budget

00:05:47,630 --> 00:05:53,570
and most of those budgets don't include

00:05:51,260 --> 00:05:58,250
as much money for security as they

00:05:53,570 --> 00:05:59,720
possibly could and so if as developers

00:05:58,250 --> 00:06:02,030
we can pick up some pen testing tools

00:05:59,720 --> 00:06:04,460
some pen testing skills we're in a

00:06:02,030 --> 00:06:06,350
position to improve the security of our

00:06:04,460 --> 00:06:11,270
code without necessarily being able to

00:06:06,350 --> 00:06:14,030
control the budgets and this funnel so

00:06:11,270 --> 00:06:15,510
just ask any little kid breaking stuff

00:06:14,030 --> 00:06:17,910
is fun

00:06:15,510 --> 00:06:19,920
and at its most basic that's what pen

00:06:17,910 --> 00:06:21,960
testing is about it's about breaking

00:06:19,920 --> 00:06:26,430
stuff so it's a lot of fun and it's

00:06:21,960 --> 00:06:27,180
interesting as well and then on the flip

00:06:26,430 --> 00:06:30,510
side of fun

00:06:27,180 --> 00:06:32,640
we've got fear so who here wants to be

00:06:30,510 --> 00:06:34,800
responsible for a data breach on a

00:06:32,640 --> 00:06:36,030
project or an app that you work on and

00:06:34,800 --> 00:06:39,630
of course that's a rhetorical question

00:06:36,030 --> 00:06:41,700
because none of us want to be so learn

00:06:39,630 --> 00:06:45,690
some pen testing do some pen testing and

00:06:41,700 --> 00:06:47,670
can relax a little bit more about the

00:06:45,690 --> 00:06:51,750
quality of the code when it comes to the

00:06:47,670 --> 00:06:53,640
security perspective one of the

00:06:51,750 --> 00:06:55,350
unexpected consequences that we found of

00:06:53,640 --> 00:06:57,090
learning pen testing was that it

00:06:55,350 --> 00:07:00,270
actually improved the overall quality

00:06:57,090 --> 00:07:03,720
and cleanliness of our code so pen

00:07:00,270 --> 00:07:05,760
testing tools interact with your app in

00:07:03,720 --> 00:07:07,740
ways that US developers and we as

00:07:05,760 --> 00:07:10,440
developers wouldn't expect they do

00:07:07,740 --> 00:07:13,680
things that ordinary human users just

00:07:10,440 --> 00:07:15,780
wouldn't think to do and so as a result

00:07:13,680 --> 00:07:17,070
they turn up not just security

00:07:15,780 --> 00:07:18,810
vulnerabilities and security issues but

00:07:17,070 --> 00:07:21,630
they turn up just plain boring bugs as

00:07:18,810 --> 00:07:25,290
well so when we run pin testing tools

00:07:21,630 --> 00:07:28,080
over a code it crashes it which is great

00:07:25,290 --> 00:07:30,270
because when you know about a bug you

00:07:28,080 --> 00:07:32,250
can fix a bug and you can fix it at a

00:07:30,270 --> 00:07:33,360
time that's convenient to you rather

00:07:32,250 --> 00:07:34,380
than at a time when it pops up

00:07:33,360 --> 00:07:37,050
unexpectedly

00:07:34,380 --> 00:07:39,420
so pen testing not just gives us more

00:07:37,050 --> 00:07:43,950
secure code but it gives us better

00:07:39,420 --> 00:07:45,930
quality cleaner code as well and then as

00:07:43,950 --> 00:07:49,470
empathy because we care about our

00:07:45,930 --> 00:07:51,420
clients and our users sure they're the

00:07:49,470 --> 00:07:55,770
ones that find weird ways to break our

00:07:51,420 --> 00:07:57,870
apps but they're also the people that

00:07:55,770 --> 00:07:59,850
pay our wages and they're the reasons

00:07:57,870 --> 00:08:02,700
that we have the jobs that we have so

00:07:59,850 --> 00:08:05,300
when we talk about security we're really

00:08:02,700 --> 00:08:08,490
talking about the security of our users

00:08:05,300 --> 00:08:09,660
because it's the users whose accounts

00:08:08,490 --> 00:08:12,360
are compromised when something goes

00:08:09,660 --> 00:08:15,630
wrong it's the users whose data and

00:08:12,360 --> 00:08:17,520
credentials leak and in the worst cases

00:08:15,630 --> 00:08:20,070
it's the users whose identities are

00:08:17,520 --> 00:08:20,490
stolen and whose computers are

00:08:20,070 --> 00:08:22,770
ransomware

00:08:20,490 --> 00:08:25,140
so they're the reasons that we do what

00:08:22,770 --> 00:08:26,939
we do and we want to make sure that bad

00:08:25,140 --> 00:08:30,639
things don't happen to them

00:08:26,939 --> 00:08:33,099
and then we get responsibility which is

00:08:30,639 --> 00:08:36,250
the main motivation for Kyra and I in

00:08:33,099 --> 00:08:41,370
terms of learning and testing so it's

00:08:36,250 --> 00:08:44,350
2019 and software is infrastructure now

00:08:41,370 --> 00:08:46,360
before we were developers I was in

00:08:44,350 --> 00:08:48,850
construction engineering Kyra worked in

00:08:46,360 --> 00:08:51,130
the public sector when we look at

00:08:48,850 --> 00:08:54,880
software we look at it the same way that

00:08:51,130 --> 00:08:56,829
we look at a bridge or a government our

00:08:54,880 --> 00:09:00,250
lives and our societies rely so heavily

00:08:56,829 --> 00:09:03,070
on software and we're the people that

00:09:00,250 --> 00:09:05,980
build it and so we have a really good

00:09:03,070 --> 00:09:08,649
possibly a unique perspective on how

00:09:05,980 --> 00:09:10,690
important it is that basic you are which

00:09:08,649 --> 00:09:12,430
means that we need to act before

00:09:10,690 --> 00:09:15,040
necessarily anyone else is telling us

00:09:12,430 --> 00:09:18,310
that we need to to try and make our

00:09:15,040 --> 00:09:20,079
software as secure as we can and Bruce

00:09:18,310 --> 00:09:23,920
Schneier has a quote it puts it really

00:09:20,079 --> 00:09:26,440
well and he says this is bigger than

00:09:23,920 --> 00:09:28,389
computer security technology now

00:09:26,440 --> 00:09:31,269
permeates society in a way it didn't

00:09:28,389 --> 00:09:33,490
just a couple of decades ago that means

00:09:31,269 --> 00:09:35,050
that technologists now are relevant to

00:09:33,490 --> 00:09:37,480
all sorts of areas that they had no

00:09:35,050 --> 00:09:41,130
traditional connection to climate change

00:09:37,480 --> 00:09:48,579
food safety future of work Public Health

00:09:41,130 --> 00:09:50,649
bioengineering and there are more so

00:09:48,579 --> 00:09:52,209
what does it look like hopefully you're

00:09:50,649 --> 00:09:54,220
convinced that you want to go do it but

00:09:52,209 --> 00:09:56,529
what does it actually look like to use

00:09:54,220 --> 00:09:59,740
pen testing tools with an angle app so

00:09:56,529 --> 00:10:01,390
it can be using something manually and

00:09:59,740 --> 00:10:03,190
there's a lot of tools you can increase

00:10:01,390 --> 00:10:04,810
integrate it with your BDD test it's

00:10:03,190 --> 00:10:06,640
just what we do or you can even

00:10:04,810 --> 00:10:12,069
integrate it with C ICD if you've got

00:10:06,640 --> 00:10:13,390
that going on so for us we are using SAP

00:10:12,069 --> 00:10:17,230
which I'll explain in a second

00:10:13,390 --> 00:10:18,279
integrated with BDD tests and to show

00:10:17,230 --> 00:10:20,589
you what it looks like we've actually

00:10:18,279 --> 00:10:23,769
built an intentionally vulnerable Jango

00:10:20,589 --> 00:10:26,800
app which we'll show you at the end that

00:10:23,769 --> 00:10:29,139
you can use to test it that includes the

00:10:26,800 --> 00:10:32,529
BDD tests and the integration tools that

00:10:29,139 --> 00:10:35,110
you need to get that working okay

00:10:32,529 --> 00:10:37,230
so introducing zap or Zed attack proxy

00:10:35,110 --> 00:10:39,360
so it's a free open source

00:10:37,230 --> 00:10:43,590
tall from a wasp which is the open web

00:10:39,360 --> 00:10:45,840
application security project we like it

00:10:43,590 --> 00:10:48,900
because it fits nicely with automated

00:10:45,840 --> 00:10:51,120
BDD tests it gives clear actionable

00:10:48,900 --> 00:10:53,280
alerts it's quite easy to see what it is

00:10:51,120 --> 00:10:55,200
that's gone wrong and we're busy and it

00:10:53,280 --> 00:10:59,490
saves us time from learning a full set

00:10:55,200 --> 00:11:00,930
of manual red teaming skills so we'll

00:10:59,490 --> 00:11:03,990
get to how it works in a second but what

00:11:00,930 --> 00:11:06,480
does it actually do so it scans your app

00:11:03,990 --> 00:11:08,070
it does a spider it finds all the URLs

00:11:06,480 --> 00:11:10,170
it checks the code over for

00:11:08,070 --> 00:11:14,100
vulnerabilities and then it attacks your

00:11:10,170 --> 00:11:16,230
code and so it pretends to be a user it

00:11:14,100 --> 00:11:19,170
puts in all sorts of weird input and you

00:11:16,230 --> 00:11:21,020
get alerts so the alerts look like this

00:11:19,170 --> 00:11:23,790
you probably can't read it that's fine

00:11:21,020 --> 00:11:25,320
but it has color coding for the severity

00:11:23,790 --> 00:11:27,300
of each alert and if you were to click

00:11:25,320 --> 00:11:30,060
on one of those it shows you what the

00:11:27,300 --> 00:11:32,370
issue is the request in response where

00:11:30,060 --> 00:11:33,810
the issue is generated the HTML that was

00:11:32,370 --> 00:11:36,900
generated when it happened so you can

00:11:33,810 --> 00:11:39,210
check that it really did happen and it

00:11:36,900 --> 00:11:41,010
also has links back to Oh operate a wasp

00:11:39,210 --> 00:11:44,400
resources so you can understand how to

00:11:41,010 --> 00:11:46,470
remedy the problem and if you get to the

00:11:44,400 --> 00:11:48,480
end of a scan it also puts all of these

00:11:46,470 --> 00:11:50,160
alerts together in one document so that

00:11:48,480 --> 00:11:51,600
you've got a report of all of the

00:11:50,160 --> 00:11:54,720
problems so that's pretty useful in a

00:11:51,600 --> 00:11:56,700
team if you need to share it and so how

00:11:54,720 --> 00:12:00,780
does it work so it's an intercepting

00:11:56,700 --> 00:12:03,090
proxy so for those who aren't always

00:12:00,780 --> 00:12:04,980
across it when someone's using the

00:12:03,090 --> 00:12:07,170
internet it looks a bit like this so

00:12:04,980 --> 00:12:08,550
there's a user using a browser the

00:12:07,170 --> 00:12:11,510
browser is communicating with the server

00:12:08,550 --> 00:12:14,160
the service serving the apps content and

00:12:11,510 --> 00:12:17,130
that goes in between as a proxy between

00:12:14,160 --> 00:12:18,600
the browser and the server so it can see

00:12:17,130 --> 00:12:20,910
and analyze all of the traffic between

00:12:18,600 --> 00:12:21,900
the browser and the server and when it's

00:12:20,910 --> 00:12:22,980
doing that it's looking for

00:12:21,900 --> 00:12:25,620
vulnerabilities and it's called a

00:12:22,980 --> 00:12:27,750
passive scan but it can also run active

00:12:25,620 --> 00:12:29,850
scans or attacks and that looks like

00:12:27,750 --> 00:12:31,440
this so when it's running active scans

00:12:29,850 --> 00:12:34,550
it's impersonating a user and it's

00:12:31,440 --> 00:12:37,200
cutting the browser out of the picture

00:12:34,550 --> 00:12:39,330
ok and again you can't read this you're

00:12:37,200 --> 00:12:42,000
not supposed to this is just to explain

00:12:39,330 --> 00:12:44,490
it's really powerful and it's fairly

00:12:42,000 --> 00:12:47,880
complex it has a lot of options it has

00:12:44,490 --> 00:12:50,190
menus sub menus sub sub menus it's

00:12:47,880 --> 00:12:51,000
extremely configurable but do they

00:12:50,190 --> 00:12:54,030
credit they've also

00:12:51,000 --> 00:12:56,640
it really easy to use as a person with

00:12:54,030 --> 00:13:00,180
no prior experience so you can use it

00:12:56,640 --> 00:13:02,460
through the going and that's as simple

00:13:00,180 --> 00:13:04,770
as giving it a URL pressing the attack

00:13:02,460 --> 00:13:08,880
button and waiting for your report it's

00:13:04,770 --> 00:13:10,800
really very simple which is great and if

00:13:08,880 --> 00:13:12,540
you want to go further than that further

00:13:10,800 --> 00:13:15,270
than a manual you can do what we've done

00:13:12,540 --> 00:13:18,840
and it has Python bindings so you can

00:13:15,270 --> 00:13:20,100
script it pretty easily and a quick note

00:13:18,840 --> 00:13:22,200
for this section we're going to be

00:13:20,100 --> 00:13:23,880
talking about testing if you don't know

00:13:22,200 --> 00:13:25,650
anything about testing don't stress

00:13:23,880 --> 00:13:30,000
we'll get back to more beginner content

00:13:25,650 --> 00:13:31,830
at the end okay so for those who do know

00:13:30,000 --> 00:13:35,070
this is a pretty ordinary testing

00:13:31,830 --> 00:13:37,770
workflow so we used behave it starts the

00:13:35,070 --> 00:13:39,360
test it runs the BDD tests selenium is

00:13:37,770 --> 00:13:41,490
running our webdriver it's around

00:13:39,360 --> 00:13:44,460
webdriver sorry writing Firefox and

00:13:41,490 --> 00:13:46,590
we're using G unicorn and so we just

00:13:44,460 --> 00:13:50,520
slips up in between Firefox and G

00:13:46,590 --> 00:13:52,920
unicorn we started with behave and we

00:13:50,520 --> 00:13:54,330
started in as a proxy it's really

00:13:52,920 --> 00:13:57,150
important to know you need to start it

00:13:54,330 --> 00:13:59,700
before you run the BDD tests that's a

00:13:57,150 --> 00:14:01,920
important tip because that learns about

00:13:59,700 --> 00:14:03,270
your app wallet watches the traffic so

00:14:01,920 --> 00:14:05,370
you want to show it what your app does

00:14:03,270 --> 00:14:07,050
and where all the pages are it will

00:14:05,370 --> 00:14:10,170
spider but we get a lot better results

00:14:07,050 --> 00:14:12,839
if you let it watch your tests and the

00:14:10,170 --> 00:14:14,339
last thing is we serve it over HTTP so

00:14:12,839 --> 00:14:16,980
what's one of the reasons we're using

00:14:14,339 --> 00:14:19,170
jewnicorn here because you want to test

00:14:16,980 --> 00:14:22,110
your app as close as it is to production

00:14:19,170 --> 00:14:23,850
so that's one reason but also because

00:14:22,110 --> 00:14:27,860
you get a lot of false positives in your

00:14:23,850 --> 00:14:31,410
zap alerts if you are testing on HTTP

00:14:27,860 --> 00:14:32,610
okay so it's not trivial to get it set

00:14:31,410 --> 00:14:34,800
up but it's not too difficult either

00:14:32,610 --> 00:14:36,990
it's mostly about connecting things up

00:14:34,800 --> 00:14:39,240
so this is the part where we're reaching

00:14:36,990 --> 00:14:42,350
forward those developer tools the string

00:14:39,240 --> 00:14:42,350
the duct tape the copy-paste

00:14:45,430 --> 00:14:50,240
so I'm going to talk about how you bring

00:14:47,480 --> 00:14:52,699
zap into an existing BDD test we white

00:14:50,240 --> 00:14:56,600
the one we've just shown you the Django

00:14:52,699 --> 00:14:58,310
Go app the Kiera mentioned houses app

00:14:56,600 --> 00:15:00,290
coming in in a single commune so what I

00:14:58,310 --> 00:15:02,540
mean by that is that we built it so that

00:15:00,290 --> 00:15:05,000
we had a Django app with a set of either

00:15:02,540 --> 00:15:06,680
D tests and then in a single commit on

00:15:05,000 --> 00:15:09,800
top of that we brought in everything

00:15:06,680 --> 00:15:12,110
that brings in zap into your app so

00:15:09,800 --> 00:15:13,579
we're essentially trying to sort of give

00:15:12,110 --> 00:15:15,350
people something that is a bit of a

00:15:13,579 --> 00:15:17,449
template for the projects that you might

00:15:15,350 --> 00:15:20,720
have to show you exactly how to bring

00:15:17,449 --> 00:15:21,649
zap in in one sort of easy movement and

00:15:20,720 --> 00:15:24,079
we're about to show you some code

00:15:21,649 --> 00:15:26,360
snippets which based on the Django go

00:15:24,079 --> 00:15:27,829
that but they're simplified down quite a

00:15:26,360 --> 00:15:30,290
bit so that they fit on the projector

00:15:27,829 --> 00:15:34,129
screen we don't have to explain them in

00:15:30,290 --> 00:15:36,410
too much detail behave has an

00:15:34,129 --> 00:15:38,360
environment dot PI file which gives it

00:15:36,410 --> 00:15:41,509
instructions for how to run BDD tests

00:15:38,360 --> 00:15:43,160
and what to do before and after and in

00:15:41,509 --> 00:15:46,250
that environment dot PI file you'll find

00:15:43,160 --> 00:15:47,540
I've had before all function if you're

00:15:46,250 --> 00:15:49,639
familiar with behave at all then you're

00:15:47,540 --> 00:15:52,009
probably already using this to start up

00:15:49,639 --> 00:15:53,180
your browser automation and you can see

00:15:52,009 --> 00:15:55,430
on the last line there that's what we're

00:15:53,180 --> 00:15:57,410
doing we're starting Firefox but we also

00:15:55,430 --> 00:16:00,019
slot zapping just before that you can

00:15:57,410 --> 00:16:01,279
see the start zap function so that's the

00:16:00,019 --> 00:16:03,019
first thing we need to do we need to

00:16:01,279 --> 00:16:07,250
start it up up and here's how we do it

00:16:03,019 --> 00:16:09,230
it's really simple two lines so we use

00:16:07,250 --> 00:16:12,379
pythons sub process module two kicks up

00:16:09,230 --> 00:16:14,720
off that's there's a proxy command that

00:16:12,379 --> 00:16:16,550
you can see there you can pass it in

00:16:14,720 --> 00:16:20,000
with or without the daemon flag that you

00:16:16,550 --> 00:16:21,199
can see second in that list to start

00:16:20,000 --> 00:16:23,059
with it's probably a good idea to leave

00:16:21,199 --> 00:16:24,889
that off because then you can see

00:16:23,059 --> 00:16:26,839
there's that window running and you can

00:16:24,889 --> 00:16:27,889
see exactly what it's doing but once

00:16:26,839 --> 00:16:29,779
you've got everything tuned up and

00:16:27,889 --> 00:16:31,339
working well then you might as well take

00:16:29,779 --> 00:16:34,279
that out so that it gives you all gives

00:16:31,339 --> 00:16:36,970
you a zero screen the second line there

00:16:34,279 --> 00:16:41,059
you can see a sleep statement because

00:16:36,970 --> 00:16:42,740
this isn't this zap doesn't block winner

00:16:41,059 --> 00:16:44,240
damn when it starts running so we just

00:16:42,740 --> 00:16:45,470
need to give it a few seconds to get

00:16:44,240 --> 00:16:48,819
started before we kick off the next

00:16:45,470 --> 00:16:51,470
process which is our browser automation

00:16:48,819 --> 00:16:53,120
so this is a start Firefox function and

00:16:51,470 --> 00:16:53,570
it's probably similar to one that you've

00:16:53,120 --> 00:16:54,860
got

00:16:53,570 --> 00:16:56,750
in your bidding to test already if

00:16:54,860 --> 00:16:58,699
you're doing that but there's a

00:16:56,750 --> 00:16:59,959
difference and that's that's the the

00:16:58,699 --> 00:17:02,600
comment in the middle that you can see

00:16:59,959 --> 00:17:05,720
there that says proxy confit yeah

00:17:02,600 --> 00:17:08,990
so because Firefox has to proxy through

00:17:05,720 --> 00:17:10,780
SAP we need to we need to add in the

00:17:08,990 --> 00:17:13,040
proxy settings the way we've done there

00:17:10,780 --> 00:17:15,169
there's a bit to them so we've cut it

00:17:13,040 --> 00:17:17,209
out from this slide but if you go to the

00:17:15,169 --> 00:17:21,140
gen Go Go app you'll see exactly how we

00:17:17,209 --> 00:17:23,540
do it and so that's all we need to do to

00:17:21,140 --> 00:17:26,000
get to get things running before the BDD

00:17:23,540 --> 00:17:27,530
tests so we've got this up running we've

00:17:26,000 --> 00:17:29,929
got a Firefox startup actually I should

00:17:27,530 --> 00:17:31,669
mention there's um there's a lot of

00:17:29,929 --> 00:17:34,549
instructions on the web for the old way

00:17:31,669 --> 00:17:35,750
to set up for proxying with selenium and

00:17:34,549 --> 00:17:38,030
a lot of those won't work now with

00:17:35,750 --> 00:17:40,070
Firefox so you need to do it the way

00:17:38,030 --> 00:17:41,360
that we do it in Django go just check

00:17:40,070 --> 00:17:44,600
out the code there and you can see some

00:17:41,360 --> 00:17:47,090
function code so once this all starts up

00:17:44,600 --> 00:17:49,610
is up runs the behave tests the BDD

00:17:47,090 --> 00:17:53,809
tests rather and then once they finish

00:17:49,610 --> 00:17:56,360
it goes looking behave goes looking for

00:17:53,809 --> 00:17:59,780
the after all function and this is where

00:17:56,360 --> 00:18:02,059
we kick off the zaps can this is much

00:17:59,780 --> 00:18:03,620
oversimplified but it shows you the key

00:18:02,059 --> 00:18:05,990
points of what we're doing when we

00:18:03,620 --> 00:18:06,980
starts up up so the first couple of

00:18:05,990 --> 00:18:08,960
lines there you can see we're just

00:18:06,980 --> 00:18:11,210
connecting dessert using the Python

00:18:08,960 --> 00:18:13,940
bindings and giving it the URL of our

00:18:11,210 --> 00:18:18,590
app and then we kick off zap spider

00:18:13,940 --> 00:18:19,940
so our Bailey DS tests have run and zaps

00:18:18,590 --> 00:18:21,950
been watching them ago so it's got a

00:18:19,940 --> 00:18:25,340
pretty good idea of what the URLs are

00:18:21,950 --> 00:18:27,790
for our app but our BDD tests may not

00:18:25,340 --> 00:18:30,919
have had every single URL in the app and

00:18:27,790 --> 00:18:32,750
so we get this app to run the spider and

00:18:30,919 --> 00:18:35,570
the spider just picks up any loose ends

00:18:32,750 --> 00:18:38,960
any URLs that it didn't see as the BDD

00:18:35,570 --> 00:18:41,150
tests for running and then we run the

00:18:38,960 --> 00:18:45,940
active scan there's that active scan and

00:18:41,150 --> 00:18:48,539
this is kind of the heart of apps

00:18:45,940 --> 00:18:50,889
functionality so it's essentially

00:18:48,539 --> 00:18:52,749
impersonating a malicious user and

00:18:50,889 --> 00:18:54,820
trying to break your app and the active

00:18:52,749 --> 00:18:56,979
scan will run for anywhere between a few

00:18:54,820 --> 00:18:59,489
minutes and a few hours depending on the

00:18:56,979 --> 00:19:03,190
size of your app and depending on how

00:18:59,489 --> 00:19:05,829
aggressive the settings are for the scan

00:19:03,190 --> 00:19:07,299
so then you'll see the last couple of

00:19:05,829 --> 00:19:09,429
lines we're just writing out a report

00:19:07,299 --> 00:19:11,979
once the active scan finishes and that's

00:19:09,429 --> 00:19:14,379
it and that's the tests finished so

00:19:11,979 --> 00:19:14,950
let's have a quick look now at your

00:19:14,379 --> 00:19:16,959
unicorn

00:19:14,950 --> 00:19:19,989
because as Kyra mentioned we set that up

00:19:16,959 --> 00:19:21,429
to run over HTTPS and luckily it's a

00:19:19,989 --> 00:19:22,919
pretty simple thing to do so you can do

00:19:21,429 --> 00:19:25,690
it in two lines the first line there

00:19:22,919 --> 00:19:27,849
generates the self-signed SSL cert and

00:19:25,690 --> 00:19:29,950
key and then the second line passes it

00:19:27,849 --> 00:19:31,509
into the unicorn once that's done you'll

00:19:29,950 --> 00:19:37,149
have your upper you'll have your app up

00:19:31,509 --> 00:19:40,179
and running over HTTPS now looking in

00:19:37,149 --> 00:19:42,789
zap so zap is not built specifically for

00:19:40,179 --> 00:19:44,529
Django or for only framework and that

00:19:42,789 --> 00:19:45,729
means that to use it with Django we need

00:19:44,529 --> 00:19:47,469
to sort of cheat a little bit with a

00:19:45,729 --> 00:19:49,749
couple of customization scripts and

00:19:47,469 --> 00:19:51,399
we've written these and saved them into

00:19:49,749 --> 00:19:54,639
the Django project where you can look at

00:19:51,399 --> 00:19:56,829
them there's essentially two things that

00:19:54,639 --> 00:19:59,200
we need to customize one is the way that

00:19:56,829 --> 00:20:01,690
this app handles authentication so the

00:19:59,200 --> 00:20:03,459
first script does that for Django and

00:20:01,690 --> 00:20:06,219
the second is the way that it handles

00:20:03,459 --> 00:20:08,289
CSRF and interaction with forms and

00:20:06,219 --> 00:20:09,789
that's what the second script does we

00:20:08,289 --> 00:20:11,679
don't have time to go into exactly how

00:20:09,789 --> 00:20:13,450
those script to work at the moment but

00:20:11,679 --> 00:20:15,159
but they're there in the Django goat

00:20:13,450 --> 00:20:18,219
project for you to look at and that

00:20:15,159 --> 00:20:19,899
brings us to the next point which is

00:20:18,219 --> 00:20:22,619
that you don't need to reinvent the

00:20:19,899 --> 00:20:25,269
wheel to bring that into your projects

00:20:22,619 --> 00:20:27,579
it's taken us a fair bit of time and

00:20:25,269 --> 00:20:28,479
research and trial and error to get all

00:20:27,579 --> 00:20:30,339
this to work properly

00:20:28,479 --> 00:20:32,200
but we've distilled down everything that

00:20:30,339 --> 00:20:34,749
we've learned into the Django go test

00:20:32,200 --> 00:20:36,940
suite and so everything there is

00:20:34,749 --> 00:20:38,859
connected together and working well and

00:20:36,940 --> 00:20:41,320
it's there on github for you to use as

00:20:38,859 --> 00:20:42,909
an example or sort of a template so that

00:20:41,320 --> 00:20:45,659
you can know how to bring zap into your

00:20:42,909 --> 00:20:45,659
existing test suite

00:20:46,580 --> 00:20:55,370
ooh runway so where do you get started

00:20:52,630 --> 00:20:57,230
first we want to talk about when you

00:20:55,370 --> 00:20:59,210
want to get started if you plan to do

00:20:57,230 --> 00:21:02,480
this the time to get started is now or

00:20:59,210 --> 00:21:04,220
as soon to now as possible the last

00:21:02,480 --> 00:21:05,870
thing you want to do is have to do

00:21:04,220 --> 00:21:08,720
something like this and learn all of the

00:21:05,870 --> 00:21:10,820
extras just after a breach because

00:21:08,720 --> 00:21:13,370
somebody is tasked you with finding what

00:21:10,820 --> 00:21:18,440
happened so do it now when it's just a

00:21:13,370 --> 00:21:20,930
normal level of dysfunction it's true so

00:21:18,440 --> 00:21:22,520
and how how do you should you start so

00:21:20,930 --> 00:21:25,100
if you haven't already seen them before

00:21:22,520 --> 00:21:27,920
we highly recommend reading the OWASP

00:21:25,100 --> 00:21:29,780
top 10 so for anyone who hasn't heard of

00:21:27,920 --> 00:21:32,600
it it comes out every few years the most

00:21:29,780 --> 00:21:34,700
recent one was 2017 and they do a review

00:21:32,600 --> 00:21:37,460
of the web and they tell you the top 10

00:21:34,700 --> 00:21:39,860
most common vulnerabilities in web

00:21:37,460 --> 00:21:42,230
applications includes things like sequel

00:21:39,860 --> 00:21:45,260
injection and cross-site scripting a

00:21:42,230 --> 00:21:48,380
whole bunch of others eight others hey

00:21:45,260 --> 00:21:50,810
what's useful if it goes into detail

00:21:48,380 --> 00:21:52,310
about what that looks like how to work

00:21:50,810 --> 00:21:54,500
out whether your application might be

00:21:52,310 --> 00:21:58,130
vulnerable to it and how you might fix

00:21:54,500 --> 00:21:59,960
it it's all pretty great obviously we

00:21:58,130 --> 00:22:02,330
also recommend a wasp's said attack

00:21:59,960 --> 00:22:04,370
proxy if you are going to start that on

00:22:02,330 --> 00:22:06,470
your own we also suggest that you use

00:22:04,370 --> 00:22:08,270
the video tutorials they are a lot

00:22:06,470 --> 00:22:10,430
easier to follow than some of the

00:22:08,270 --> 00:22:12,860
written documentation it's good but the

00:22:10,430 --> 00:22:15,110
videos are easier and in particular you

00:22:12,860 --> 00:22:19,310
should look up Simon Bennett's these are

00:22:15,110 --> 00:22:21,410
the clearest and the testing guide so

00:22:19,310 --> 00:22:23,780
anyone in charge of tests if you plan on

00:22:21,410 --> 00:22:26,840
integrating any height above penetration

00:22:23,780 --> 00:22:28,550
testing into your existing si ICD we

00:22:26,840 --> 00:22:31,370
definitely suggest reading the testing

00:22:28,550 --> 00:22:33,500
guide it's 224 pages it's not exactly a

00:22:31,370 --> 00:22:35,870
quick read but it does go through all of

00:22:33,500 --> 00:22:37,370
the different testing methodologies that

00:22:35,870 --> 00:22:39,290
you might use and why you would

00:22:37,370 --> 00:22:43,060
integrate tests into certain parts of

00:22:39,290 --> 00:22:43,060
your life cycles so it's worth doing

00:22:43,450 --> 00:22:50,930
okay and you can try our app so so it is

00:22:48,170 --> 00:22:54,320
at our github we'll put the link on at

00:22:50,930 --> 00:22:56,450
the end it has a broken branch and a

00:22:54,320 --> 00:22:58,250
fixed branch so you can see what we've

00:22:56,450 --> 00:22:59,059
done and we've added each vulnerability

00:22:58,250 --> 00:23:00,620
in a single commit

00:22:59,059 --> 00:23:03,980
so you can actually see what we broke

00:23:00,620 --> 00:23:06,649
and it has all the integration tests so

00:23:03,980 --> 00:23:09,080
we invite you to have a look at it run

00:23:06,649 --> 00:23:11,419
scans on it see what you're doing mine

00:23:09,080 --> 00:23:13,370
it for code whatever you like and

00:23:11,419 --> 00:23:15,860
something to know it explains each

00:23:13,370 --> 00:23:17,419
vulnerability you know amount of detail

00:23:15,860 --> 00:23:19,399
it tells you where in the code we broke

00:23:17,419 --> 00:23:21,289
something and it links itself back to

00:23:19,399 --> 00:23:23,480
the our top-10 documentation and

00:23:21,289 --> 00:23:24,740
sometimes to the django documentation

00:23:23,480 --> 00:23:27,289
where it's relevant so you can see what

00:23:24,740 --> 00:23:28,820
we've done and it has instructions we

00:23:27,289 --> 00:23:30,499
think it's beginner friendly and junior

00:23:28,820 --> 00:23:33,309
friendly if you have any trouble though

00:23:30,499 --> 00:23:35,690
just get in contact we're available and

00:23:33,309 --> 00:23:37,279
come to our workshop so we're running a

00:23:35,690 --> 00:23:41,659
workshop that teaches you how to do this

00:23:37,279 --> 00:23:43,669
hands-on on Sunday right here and just

00:23:41,659 --> 00:23:45,830
as a coincidence our next two slides are

00:23:43,669 --> 00:23:48,379
almost exactly the same as Carlton's

00:23:45,830 --> 00:23:51,590
from yesterday we didn't rip them off

00:23:48,379 --> 00:23:54,769
it's just great minds thinking alike so

00:23:51,590 --> 00:23:57,740
you are good enough we really do think

00:23:54,769 --> 00:23:59,720
so we are self taught we are not special

00:23:57,740 --> 00:24:01,850
we're not even specialist developers

00:23:59,720 --> 00:24:03,710
we're not gifted and we've managed to

00:24:01,850 --> 00:24:07,759
learn how to do this you are good enough

00:24:03,710 --> 00:24:08,200
you can learn how to do this you can do

00:24:07,759 --> 00:24:10,970
it

00:24:08,200 --> 00:24:13,269
nope interesting that is although

00:24:10,970 --> 00:24:15,799
probably you could a lot of other things

00:24:13,269 --> 00:24:18,769
so that's it so you can contact us via

00:24:15,799 --> 00:24:21,679
Twitter we are red and black Tech this

00:24:18,769 --> 00:24:23,779
is out github we only have two projects

00:24:21,679 --> 00:24:26,029
you will find Django goat and also the

00:24:23,779 --> 00:24:28,190
conference slides if you'd like them and

00:24:26,029 --> 00:24:35,180
so that's it we'd like to say thank you

00:24:28,190 --> 00:24:35,180
[Applause]

00:24:37,240 --> 00:24:41,030
thank you very much Kira and Skyy we

00:24:39,440 --> 00:24:42,350
have time for a little a few a couple of

00:24:41,030 --> 00:24:44,240
questions so if you do have questions

00:24:42,350 --> 00:24:45,530
find your way to the microphone or if

00:24:44,240 --> 00:24:47,270
there are any any on the internet you

00:24:45,530 --> 00:24:49,670
don't want to ask the question yourself

00:24:47,270 --> 00:24:52,100
you can jump on a slack channel or you

00:24:49,670 --> 00:24:53,120
can jump on it on Twitter but it looks

00:24:52,100 --> 00:25:04,040
like we're gonna have someone at the

00:24:53,120 --> 00:25:07,280
microphone so here we go yeah thanks for

00:25:04,040 --> 00:25:09,880
the talk I wanted to ask how do you run

00:25:07,280 --> 00:25:13,420
it on iterative manner like in

00:25:09,880 --> 00:25:16,760
continuous integration because it could

00:25:13,420 --> 00:25:21,320
took a lot of time to perform all this

00:25:16,760 --> 00:25:36,140
chicken scanning etc so some points

00:25:21,320 --> 00:25:37,280
about this okay if you've already go we

00:25:36,140 --> 00:25:39,230
sort of we make the assumption that

00:25:37,280 --> 00:25:42,380
there's already an existing PD date this

00:25:39,230 --> 00:25:44,059
week that you have and so presumably

00:25:42,380 --> 00:25:45,800
that runs through UCI and you just

00:25:44,059 --> 00:25:47,630
integrate it with that it just bolts

00:25:45,800 --> 00:25:50,150
directly into your existing video tests

00:25:47,630 --> 00:25:51,410
that's it so we don't use Jenkins but we

00:25:50,150 --> 00:25:54,080
understand that there are Jenkins

00:25:51,410 --> 00:25:57,559
there's a Jenkins integration tool box

00:25:54,080 --> 00:26:04,820
somewhere so sorry does that answer your

00:25:57,559 --> 00:26:06,710
question yeah hi there I would like to

00:26:04,820 --> 00:26:10,340
know the following I would of course

00:26:06,710 --> 00:26:11,920
want to do the penetration test to my

00:26:10,340 --> 00:26:15,740
own system

00:26:11,920 --> 00:26:17,270
the production system is secure but on

00:26:15,740 --> 00:26:28,100
the other hand penetration testing is it

00:26:17,270 --> 00:26:30,020
on like so our answer to that is if you

00:26:28,100 --> 00:26:31,820
need a penetration test on your real

00:26:30,020 --> 00:26:35,240
production database leave that to the

00:26:31,820 --> 00:26:36,620
experts we would not recommend using an

00:26:35,240 --> 00:26:38,390
automated tool because among other

00:26:36,620 --> 00:26:40,610
things it does attack it might drop

00:26:38,390 --> 00:26:42,620
tables it might inject all sorts of

00:26:40,610 --> 00:26:45,559
stuff it will create users it makes a

00:26:42,620 --> 00:26:46,820
huge mess so and actually if you come to

00:26:45,559 --> 00:26:48,830
the workshop we'll go into it but two

00:26:46,820 --> 00:26:50,690
things to note just briefly yes don't

00:26:48,830 --> 00:26:53,090
use it on a production server don't use

00:26:50,690 --> 00:26:54,770
it on anyone elses server so we run it

00:26:53,090 --> 00:26:57,110
locally we run it on localhost that's

00:26:54,770 --> 00:27:00,110
what we suggest you do if you have a

00:26:57,110 --> 00:27:01,549
test server feel free but even then and

00:27:00,110 --> 00:27:03,710
the most important thing is you need to

00:27:01,549 --> 00:27:05,690
use a proxy if you set it up manually if

00:27:03,710 --> 00:27:07,850
you set it up with our script it's fine

00:27:05,690 --> 00:27:09,980
if you use it manually make sure you're

00:27:07,850 --> 00:27:13,240
using a proxy on your browser or your IP

00:27:09,980 --> 00:27:17,179
will be banned from your service and

00:27:13,240 --> 00:27:18,890
potentially from all of CloudFlare so be

00:27:17,179 --> 00:27:22,030
careful so yeah don't don't do it on

00:27:18,890 --> 00:27:22,030
your direct production database

00:27:25,690 --> 00:27:28,799
[Music]

00:27:29,340 --> 00:27:34,030
no no so it's not it's no it's not

00:27:32,080 --> 00:27:35,230
comparable no and I think if you're

00:27:34,030 --> 00:27:39,780
really worried that's where we need to

00:27:35,230 --> 00:27:39,780
pay for people who don't have any budget

00:28:07,650 --> 00:28:14,640
in which side land the responsibility

00:28:11,860 --> 00:28:14,640
for the pen

00:28:14,950 --> 00:28:18,160
[Music]

00:28:24,320 --> 00:28:27,430
[Music]

00:28:28,919 --> 00:28:33,850
so I'm not sure we think it should be

00:28:30,940 --> 00:28:34,929
developers responsibility I think if

00:28:33,850 --> 00:28:36,429
you're in a big enough place where

00:28:34,929 --> 00:28:39,460
you've got a QA team I think this is

00:28:36,429 --> 00:28:40,630
fairly clearly in their wheelhouse and

00:28:39,460 --> 00:28:42,640
if you've got a security team it's

00:28:40,630 --> 00:28:44,140
obviously theirs but I think part of our

00:28:42,640 --> 00:28:46,690
argument is that it's worth learning

00:28:44,140 --> 00:28:48,669
anyway just for your own skill

00:28:46,690 --> 00:28:51,160
development because you see things that

00:28:48,669 --> 00:28:52,660
you maybe only hear about theoretically

00:28:51,160 --> 00:28:54,520
otherwise but it's and it's also quite

00:28:52,660 --> 00:28:56,080
fun you actually get to conduct yourself

00:28:54,520 --> 00:29:01,540
a sequel injection attack see if it

00:28:56,080 --> 00:29:03,640
works it's pretty good out of time now

00:29:01,540 --> 00:29:05,170
so thank you very much and thank you

00:29:03,640 --> 00:29:07,829
Ciaran sky thank you

00:29:05,170 --> 00:29:07,829

YouTube URL: https://www.youtube.com/watch?v=nqR5pOgkmbk


