Title: DjangoCon 2019 - Maintaning a Django codebase after 10k commits
Publication date: 2019-04-23
Playlist: DjangoCon Europe 2019 in Copenhagen
Description: 
	https://2019.djangocon.eu/talks/maintaning-a-django-codebase-after-10k-commits/

Joachim Jablon: https://twitter.com/Ewjoachim
StÃ©phane "Twidi" Angel: https://twitter.com/twidi
Captions: 
	00:00:00,030 --> 00:00:08,519
so maintaining a jungle project after

00:00:03,030 --> 00:00:10,650
10,000 commits let go so who are we well

00:00:08,519 --> 00:00:13,349
I'll start with myself I'm Yura Kim

00:00:10,650 --> 00:00:16,560
currently working at people dock I have

00:00:13,349 --> 00:00:19,529
6 years of professional experience using

00:00:16,560 --> 00:00:21,840
Python and jungle I've worked on two big

00:00:19,529 --> 00:00:35,370
cut bases and I had the opportunity to

00:00:21,840 --> 00:00:39,149
see a third one from up close I worked

00:00:35,370 --> 00:00:42,809
on so many bases of that with my old age

00:00:39,149 --> 00:00:47,280
I couldn't I'm a freelancer I'm the

00:00:42,809 --> 00:00:51,300
founder of the same design and before we

00:00:47,280 --> 00:00:54,449
start we have a confession the title is

00:00:51,300 --> 00:00:57,239
a bit of lie if you have a huge cut base

00:00:54,449 --> 00:00:59,010
and it's completely broken and you're

00:00:57,239 --> 00:01:01,829
still pressured into delivering features

00:00:59,010 --> 00:01:04,589
every day well there's no real magic

00:01:01,829 --> 00:01:06,439
trick there will be some work to do but

00:01:04,589 --> 00:01:10,200
please don't leave the room right away

00:01:06,439 --> 00:01:12,510
this hope and the ideas that we will

00:01:10,200 --> 00:01:14,700
present might help if you're able to

00:01:12,510 --> 00:01:18,110
make some time to refactor your current

00:01:14,700 --> 00:01:21,720
project or maybe for your next project

00:01:18,110 --> 00:01:24,600
so we'll be talking about a project this

00:01:21,720 --> 00:01:27,750
is any big project it could be your big

00:01:24,600 --> 00:01:32,430
project and this is our fictional big

00:01:27,750 --> 00:01:34,740
project it's called monolith for a

00:01:32,430 --> 00:01:39,119
fictional project for today we deliver

00:01:34,740 --> 00:01:41,880
huge rocks into people garden the

00:01:39,119 --> 00:01:45,960
monolith project started 8 years ago

00:01:41,880 --> 00:01:47,630
today the tests take 1 however to run in

00:01:45,960 --> 00:01:51,689
the CI it has more than a hundred

00:01:47,630 --> 00:01:55,020
dependencies and rediff models more than

00:01:51,689 --> 00:01:58,979
a thousand fills some tables are bigger

00:01:55,020 --> 00:02:02,219
than 1 million 100 million rows in

00:01:58,979 --> 00:02:04,530
production according to the statistics

00:02:02,219 --> 00:02:07,920
in terms of commits and lines of code

00:02:04,530 --> 00:02:10,860
our project is bigger than jungle itself

00:02:07,920 --> 00:02:13,459
so maybe we should have the conference

00:02:10,860 --> 00:02:13,459
for this project

00:02:13,659 --> 00:02:18,819
so a quick show of hands to just get the

00:02:16,450 --> 00:02:22,510
the idea who's been working on similar

00:02:18,819 --> 00:02:25,239
projects in the room okay so that's

00:02:22,510 --> 00:02:28,840
about let's say 10% of the room okay

00:02:25,239 --> 00:02:32,650
thank you so in the beginning

00:02:28,840 --> 00:02:35,530
Manolis was just an app there were a few

00:02:32,650 --> 00:02:38,590
views running on some server that which

00:02:35,530 --> 00:02:40,989
time the project became more mature and

00:02:38,590 --> 00:02:43,150
there were different aspects of the app

00:02:40,989 --> 00:02:47,530
that we had to add or that involuntary

00:02:43,150 --> 00:02:49,890
found their way into the code so testing

00:02:47,530 --> 00:02:53,140
monitoring reporting packaging

00:02:49,890 --> 00:02:56,709
translating communicating developing and

00:02:53,140 --> 00:02:59,799
sadly a little bit of suffering to today

00:02:56,709 --> 00:03:03,640
it's just not an app anymore it has

00:02:59,799 --> 00:03:07,659
become huge another thing is that with

00:03:03,640 --> 00:03:10,019
time that passes the environment changes

00:03:07,659 --> 00:03:15,069
and that's what happened with monolith

00:03:10,019 --> 00:03:17,079
first turnover with 10-15 percent annual

00:03:15,069 --> 00:03:19,750
turnover in the industry it's no

00:03:17,079 --> 00:03:22,200
surprise that no one working on it today

00:03:19,750 --> 00:03:26,049
knows the full history of the project

00:03:22,200 --> 00:03:28,720
also we pivoted in the beginning we

00:03:26,049 --> 00:03:30,819
delivered pebbles now bigger rocks so

00:03:28,720 --> 00:03:33,239
the underlying code of course is the

00:03:30,819 --> 00:03:36,099
same that it has to go through many

00:03:33,239 --> 00:03:39,549
adaptations but we were successful in

00:03:36,099 --> 00:03:42,340
that so much that there are three

00:03:39,549 --> 00:03:44,139
distinct teams working on this and we

00:03:42,340 --> 00:03:46,870
had to split the cut bait in three parts

00:03:44,139 --> 00:03:50,410
of course the complexity of the project

00:03:46,870 --> 00:03:53,500
and he grew with time so it makes adding

00:03:50,410 --> 00:03:56,560
new features harder and harder and bugs

00:03:53,500 --> 00:03:59,459
are more insidious and finally we had to

00:03:56,560 --> 00:04:02,980
go through multiple jungle versions

00:03:59,459 --> 00:04:06,519
because we started with jungle 1.4 LTS

00:04:02,980 --> 00:04:08,410
and a lot of third parties that we used

00:04:06,519 --> 00:04:12,940
whenever upgraded so we had to remove

00:04:08,410 --> 00:04:14,440
them so monolith has become old these

00:04:12,940 --> 00:04:16,900
are all things that we can't really

00:04:14,440 --> 00:04:20,049
control but there are ways to reduce

00:04:16,900 --> 00:04:21,940
their effect on our project so we're

00:04:20,049 --> 00:04:23,740
going to leave monolith on the side and

00:04:21,940 --> 00:04:26,860
talk more into

00:04:23,740 --> 00:04:29,350
our subject for today will see four

00:04:26,860 --> 00:04:31,419
aspects in which where we will be able

00:04:29,350 --> 00:04:34,810
to give you a little bit of advice

00:04:31,419 --> 00:04:36,819
hopefully the first is the burro rings

00:04:34,810 --> 00:04:39,160
of your codes that's the third part is

00:04:36,819 --> 00:04:42,340
the things done by other people that you

00:04:39,160 --> 00:04:44,860
put in your code then the heart of your

00:04:42,340 --> 00:04:48,069
code of our code that's business logic

00:04:44,860 --> 00:04:51,099
where you create value then the boxes of

00:04:48,069 --> 00:04:52,900
our codes that will be architecture so

00:04:51,099 --> 00:04:55,990
how we finish efficiently we divide our

00:04:52,900 --> 00:04:59,050
system into subsystems and then the

00:04:55,990 --> 00:05:01,509
trials of our code that's the tests how

00:04:59,050 --> 00:05:05,550
you code may prove brave and trustworthy

00:05:01,509 --> 00:05:05,550
before we task it with production

00:05:17,340 --> 00:05:25,690
someone else you paid for oh you someone

00:05:23,139 --> 00:05:28,509
else call someone else cut you don't pay

00:05:25,690 --> 00:05:32,889
for like open source just goodie

00:05:28,509 --> 00:05:36,130
even if even if you pay for it one way

00:05:32,889 --> 00:05:37,840
or another so this is all we can

00:05:36,130 --> 00:05:40,330
basically define a third-party

00:05:37,840 --> 00:05:43,509
components some external code used by

00:05:40,330 --> 00:05:46,120
your project whether is something huge

00:05:43,509 --> 00:05:48,550
that will save you a lot of time or just

00:05:46,120 --> 00:05:51,460
a small library with with a single

00:05:48,550 --> 00:05:55,419
function say less but yes some drugs

00:05:51,460 --> 00:05:57,370
never get old in our context in general

00:05:55,419 --> 00:06:03,099
fight on package you will start via

00:05:57,370 --> 00:06:05,560
peepin style related to Django or not we

00:06:03,099 --> 00:06:08,320
could also consider external API to be

00:06:05,560 --> 00:06:10,270
some sort of properties but let's keep

00:06:08,320 --> 00:06:15,280
the API is aasaiya and focus on

00:06:10,270 --> 00:06:18,400
third-party packages so why do we want

00:06:15,280 --> 00:06:21,009
to use third-party dependencies using so

00:06:18,400 --> 00:06:23,110
that we can reduce the effort so the

00:06:21,009 --> 00:06:26,409
time and throw the cost to internal

00:06:23,110 --> 00:06:28,750
something to reduce to reduce the risk

00:06:26,409 --> 00:06:31,830
smarter people already did the brain

00:06:28,750 --> 00:06:31,830
works of the corner

00:06:31,890 --> 00:06:38,140
but everything else downside in the real

00:06:35,890 --> 00:06:40,090
world the third party could increase the

00:06:38,140 --> 00:06:43,230
efforts of the time and so the cost in

00:06:40,090 --> 00:06:48,930
the long term and increase the risk

00:06:43,230 --> 00:06:52,420
let's see why first security updates

00:06:48,930 --> 00:06:55,050
smaller libraries won't have many eyes

00:06:52,420 --> 00:06:58,290
trying to find security issues issues

00:06:55,050 --> 00:07:02,070
usually this means bags may stay longer

00:06:58,290 --> 00:07:05,110
it's important to remember some by

00:07:02,070 --> 00:07:07,360
adding dependency the expert surface

00:07:05,110 --> 00:07:09,430
exposed surface of your project is not

00:07:07,360 --> 00:07:12,520
just your food anymore but records from

00:07:09,430 --> 00:07:14,860
many other people you don't know not

00:07:12,520 --> 00:07:17,680
saying that they have lower standards

00:07:14,860 --> 00:07:19,840
work with respect to security but it's

00:07:17,680 --> 00:07:24,610
just a fact you're not in control and

00:07:19,840 --> 00:07:27,550
 happens also you do not control the

00:07:24,610 --> 00:07:30,040
directions application with date maybe

00:07:27,550 --> 00:07:32,710
they'll talk so as always change the

00:07:30,040 --> 00:07:35,650
world behavior or will simply break the

00:07:32,710 --> 00:07:38,140
API or just introduce step till channels

00:07:35,650 --> 00:07:41,830
I could break that could break your

00:07:38,140 --> 00:07:44,710
scales you think you can rely on

00:07:41,830 --> 00:07:47,440
rationals of that but not everybody

00:07:44,710 --> 00:07:51,370
follows semantic versioning even when

00:07:47,440 --> 00:07:54,190
the Savior you may also encounter bugs

00:07:51,370 --> 00:07:57,250
need to add a feature or simply upgrade

00:07:54,190 --> 00:07:59,380
to version of tango you use and jungle

00:07:57,250 --> 00:08:02,770
change fast and yes I'm the scale of big

00:07:59,380 --> 00:08:04,180
project jungle change fast so when you

00:08:02,770 --> 00:08:07,300
upgrade you want to be sure that your

00:08:04,180 --> 00:08:09,300
dependencies are ready the problem is

00:08:07,300 --> 00:08:12,910
that the evolution of a next time an

00:08:09,300 --> 00:08:14,830
external app can be very slow new issues

00:08:12,910 --> 00:08:18,360
are for requests and take a very long

00:08:14,830 --> 00:08:18,360
time to be taken into consideration

00:08:18,520 --> 00:08:23,840
or now you can just ignore your request

00:08:21,319 --> 00:08:28,340
and we are totally free to do so you may

00:08:23,840 --> 00:08:30,080
not agree but and even worse on this

00:08:28,340 --> 00:08:33,950
honor homage I've just abandoned the

00:08:30,080 --> 00:08:37,700
application for anywhere you know as I

00:08:33,950 --> 00:08:40,279
said happens just before going to

00:08:37,700 --> 00:08:43,849
the solutions it with another thing we

00:08:40,279 --> 00:08:46,640
need to think about do you need the full

00:08:43,849 --> 00:08:49,190
application as it comes maybe develop it

00:08:46,640 --> 00:08:52,459
for a lot of you stages so a lot of

00:08:49,190 --> 00:08:55,910
people or maybe you need just a small

00:08:52,459 --> 00:09:01,040
part or even worse than me but with some

00:08:55,910 --> 00:09:04,100
acts to make it fit your needs so here

00:09:01,040 --> 00:09:07,550
is our first advice never forget the

00:09:04,100 --> 00:09:09,709
hidden cast of atoms or puzzles in the

00:09:07,550 --> 00:09:12,829
room brain it's almost never tread deep

00:09:09,709 --> 00:09:14,690
in style and add to instead adapts shot

00:09:12,829 --> 00:09:17,829
integration time now could lead to

00:09:14,690 --> 00:09:21,110
longer maintenance later

00:09:17,829 --> 00:09:22,070
so now we'll see oh we can do what we

00:09:21,110 --> 00:09:27,230
can do to get over

00:09:22,070 --> 00:09:29,270
for Jace's room first there are some

00:09:27,230 --> 00:09:32,690
external dependencies you use just as

00:09:29,270 --> 00:09:34,160
there are and it's ok it's ok for an app

00:09:32,690 --> 00:09:37,610
developed internally in your company

00:09:34,160 --> 00:09:40,190
you're in control it's ok when the apps

00:09:37,610 --> 00:09:42,560
are well known problem with letter

00:09:40,190 --> 00:09:46,940
complexity that about reverse

00:09:42,560 --> 00:09:50,720
cryptography etc it's OK for official

00:09:46,940 --> 00:09:52,640
packages of external API it's okay when

00:09:50,720 --> 00:09:54,890
jongo provides a back-end system like

00:09:52,640 --> 00:09:58,160
authentication storage and so up is a

00:09:54,890 --> 00:10:00,079
well-known became and it's ok when the

00:09:58,160 --> 00:10:03,680
legitimacy of the apps makes it roll

00:10:00,079 --> 00:10:08,070
over and over like for example

00:10:03,680 --> 00:10:11,279
so for all the this kind of apps let's

00:10:08,070 --> 00:10:17,339
admit it rotates but for the others what

00:10:11,279 --> 00:10:19,850
can we do first you need to know when

00:10:17,339 --> 00:10:22,680
the next update will break your code

00:10:19,850 --> 00:10:24,480
it's a good idea to test the latest

00:10:22,680 --> 00:10:27,449
versions of all your dependencies in

00:10:24,480 --> 00:10:31,649
continuous integration this way you will

00:10:27,449 --> 00:10:33,449
be one when something breaks no need to

00:10:31,649 --> 00:10:35,970
fix it right away but at least you know

00:10:33,449 --> 00:10:39,660
this will be an issue later and tooling

00:10:35,970 --> 00:10:42,180
exists to help you on this when the

00:10:39,660 --> 00:10:45,029
program is sound you can ask the owner

00:10:42,180 --> 00:10:47,190
for elder by creating an issue or even

00:10:45,029 --> 00:10:50,149
provides a fix yourself this may be a

00:10:47,190 --> 00:10:55,709
good way of contributing back and please

00:10:50,149 --> 00:10:57,600
when you report an issue be nice but as

00:10:55,709 --> 00:10:59,850
we've seen in some cases the

00:10:57,600 --> 00:11:02,940
communication is broken and unique you

00:10:59,850 --> 00:11:05,220
need to take back control the first way

00:11:02,940 --> 00:11:08,639
to take ownership is to create your own

00:11:05,220 --> 00:11:13,709
public fault of course if the licensing

00:11:08,639 --> 00:11:15,750
allows it then be ready to become the

00:11:13,709 --> 00:11:18,480
owner of an external dependency your

00:11:15,750 --> 00:11:23,040
supply Potter as we sing with big power

00:11:18,480 --> 00:11:25,110
comes big responsibility if you don't

00:11:23,040 --> 00:11:27,899
want to go public on this you can

00:11:25,110 --> 00:11:32,310
maintain your own private fault or even

00:11:27,899 --> 00:11:36,959
even integrate it in your own project as

00:11:32,310 --> 00:11:39,449
a world or neither party unit but don't

00:11:36,959 --> 00:11:44,880
forget that run or service consumer of

00:11:39,449 --> 00:11:47,370
security updates etc of course the

00:11:44,880 --> 00:11:49,050
ultimate way to get rid of orders or

00:11:47,370 --> 00:11:52,500
party dependency problems is to

00:11:49,050 --> 00:11:55,699
implement yourself the parts you need no

00:11:52,500 --> 00:11:55,699
dependency is no problem

00:11:56,740 --> 00:12:02,110
if you can't or don't want to take

00:11:59,840 --> 00:12:04,700
ownership thirsty one thing you can do

00:12:02,110 --> 00:12:06,770
you could build an adapter your own

00:12:04,700 --> 00:12:09,110
abstraction layer with the rest of your

00:12:06,770 --> 00:12:12,530
project only call in this layer instead

00:12:09,110 --> 00:12:15,110
of the external library don't easy take

00:12:12,530 --> 00:12:17,120
to actually to forbid the import of your

00:12:15,110 --> 00:12:20,360
external dependency anywhere else than

00:12:17,120 --> 00:12:22,630
in your adapter your abstraction layer

00:12:20,360 --> 00:12:26,570
will need to explicitly define

00:12:22,630 --> 00:12:29,270
everything you use isolating the

00:12:26,570 --> 00:12:31,520
packaged apps a lot for updates or if

00:12:29,270 --> 00:12:35,810
you need to switch to another pet

00:12:31,520 --> 00:12:44,960
generator for example so here's our

00:12:35,810 --> 00:12:46,790
second advice evil age of to finish a

00:12:44,960 --> 00:12:49,670
third party dependencies I do a brief

00:12:46,790 --> 00:12:51,620
apart here about John Doe models one

00:12:49,670 --> 00:12:54,230
thing you really want is to have the

00:12:51,620 --> 00:12:56,270
entire ownership of your database and by

00:12:54,230 --> 00:12:59,630
this admin your general migrations and

00:12:56,270 --> 00:13:01,940
so your John Doe models so if an

00:12:59,630 --> 00:13:04,340
external app you don't own provides

00:13:01,940 --> 00:13:07,970
comfort models my advice is to not use

00:13:04,340 --> 00:13:11,660
it and find I think of a way to address

00:13:07,970 --> 00:13:13,700
leave your in your own project if this

00:13:11,660 --> 00:13:15,710
app provides abstract models it's

00:13:13,700 --> 00:13:18,050
different but you're releasing few tries

00:13:15,710 --> 00:13:19,400
you are still not in control and don't

00:13:18,050 --> 00:13:21,980
forget that the direction in this

00:13:19,400 --> 00:13:28,370
application may not be the one you

00:13:21,980 --> 00:13:36,400
expect so do not let anyone define your

00:13:28,370 --> 00:13:38,960
model my last advice for this part

00:13:36,400 --> 00:13:41,589
whatever you do try to contribute back

00:13:38,960 --> 00:13:52,009
to open source

00:13:41,589 --> 00:13:54,199
that but could you imagine it disappears

00:13:52,009 --> 00:13:57,229
the question like jungle itself is a

00:13:54,199 --> 00:13:59,899
third party to your application so does

00:13:57,229 --> 00:14:02,029
everything that treaty said just now

00:13:59,899 --> 00:14:06,439
mean something about the way we should

00:14:02,029 --> 00:14:11,389
use Django within our code so this leads

00:14:06,439 --> 00:14:14,659
us to business logic so this will be the

00:14:11,389 --> 00:14:16,879
heart of your code and before really

00:14:14,659 --> 00:14:21,529
starting I'm going to just define what I

00:14:16,879 --> 00:14:23,509
understand has business logic it's all

00:14:21,529 --> 00:14:26,239
the different parts of your codes and

00:14:23,509 --> 00:14:30,319
the ideas and constraints behind it that

00:14:26,239 --> 00:14:33,039
will still hold true if you were to

00:14:30,319 --> 00:14:38,209
replace John go with flask for example

00:14:33,039 --> 00:14:41,119
could do that so an example for this

00:14:38,209 --> 00:14:43,969
logic and the structure behind would be

00:14:41,119 --> 00:14:46,069
for example when a user is created they

00:14:43,969 --> 00:14:49,009
get to welcome email or only premium

00:14:46,069 --> 00:14:51,079
users can access this page on a course

00:14:49,009 --> 00:14:55,029
they started the stop date must be

00:14:51,079 --> 00:15:00,079
before the end state so whenever you see

00:14:55,029 --> 00:15:02,059
something that you would want to yeah

00:15:00,079 --> 00:15:06,739
whenever you express something you would

00:15:02,059 --> 00:15:09,229
want to and to do independently from the

00:15:06,739 --> 00:15:11,179
technology and the actions who can do

00:15:09,229 --> 00:15:13,699
them and the consequences you're really

00:15:11,179 --> 00:15:16,579
defining business logic and the problem

00:15:13,699 --> 00:15:19,219
is the that today in a standard Django

00:15:16,579 --> 00:15:21,699
application the business logic and the

00:15:19,219 --> 00:15:24,679
jungle code are kind of like this

00:15:21,699 --> 00:15:29,719
completely intertwined in a spaghetti

00:15:24,679 --> 00:15:31,849
bowl impossible to disentangle and yeah

00:15:29,719 --> 00:15:34,669
the business logic is sometime in the

00:15:31,849 --> 00:15:36,889
templates that's very very wrong and in

00:15:34,669 --> 00:15:38,749
the forms and thus realizes and the

00:15:36,889 --> 00:15:41,029
views and the models and the managers

00:15:38,749 --> 00:15:43,009
and the problem is that each part of

00:15:41,029 --> 00:15:45,379
this in a standard Django application

00:15:43,009 --> 00:15:48,799
are already here for another reason not

00:15:45,379 --> 00:15:50,989
to hold your business logic so if you

00:15:48,799 --> 00:15:53,149
were to change the business logic you

00:15:50,989 --> 00:15:53,740
never actually know where you want to go

00:15:53,149 --> 00:15:56,800
to

00:15:53,740 --> 00:15:59,740
to find it and if you change something

00:15:56,800 --> 00:16:01,480
in a viewer or a forum or something it's

00:15:59,740 --> 00:16:04,870
really easy to break the view the

00:16:01,480 --> 00:16:07,690
business logic result realizing it we

00:16:04,870 --> 00:16:09,430
tend to think that any code that we

00:16:07,690 --> 00:16:12,340
write in a jungle project should fit

00:16:09,430 --> 00:16:16,090
into one of jungles bass viol that it's

00:16:12,340 --> 00:16:19,620
not true we can write code that's in

00:16:16,090 --> 00:16:19,620
module that jungler doesn't know about

00:16:19,920 --> 00:16:26,830
so a nice way of doing this is through

00:16:23,890 --> 00:16:29,530
service layers that's an idea that's

00:16:26,830 --> 00:16:32,320
been around for several years now I fell

00:16:29,530 --> 00:16:34,630
first encountered this idea when I

00:16:32,320 --> 00:16:37,900
attending Hana Cola stork avoiding

00:16:34,630 --> 00:16:41,050
monolith in John Buchan Europe 2015 my

00:16:37,900 --> 00:16:44,290
first john buchan it was expanded

00:16:41,050 --> 00:16:46,510
recently in Redis left Joseph's jungle

00:16:44,290 --> 00:16:50,290
structure for scale and longevity at

00:16:46,510 --> 00:16:53,380
Euro Python 2018 and I'll be exploring

00:16:50,290 --> 00:16:55,810
this idea a bit starting and read of a

00:16:53,380 --> 00:16:58,000
rebus labs version and I'll leave you

00:16:55,810 --> 00:17:00,280
folks to see the talks if you want more

00:16:58,000 --> 00:17:03,760
info so in this particular way of

00:17:00,280 --> 00:17:08,200
writing jungle software you add two

00:17:03,760 --> 00:17:11,470
files in your jungle application one is

00:17:08,200 --> 00:17:14,500
a service module that will be providing

00:17:11,470 --> 00:17:16,860
simple functions test quiz object

00:17:14,500 --> 00:17:18,670
creation modification and deletion and

00:17:16,860 --> 00:17:20,620
establishing and maintaining the

00:17:18,670 --> 00:17:22,690
constraints of your business logic and

00:17:20,620 --> 00:17:25,030
the second one is a selectors module

00:17:22,690 --> 00:17:27,690
that will also provide simple functions

00:17:25,030 --> 00:17:30,400
but this time to retrieve objects

00:17:27,690 --> 00:17:33,430
according to your business rules and the

00:17:30,400 --> 00:17:35,980
permissions and the rule is that any

00:17:33,430 --> 00:17:38,080
object manipulation should be done

00:17:35,980 --> 00:17:41,800
through your service and selector layer

00:17:38,080 --> 00:17:46,810
banning the idea of forms and views that

00:17:41,800 --> 00:17:50,350
would be accessing directly DRM so that

00:17:46,810 --> 00:17:52,030
would make our diagram look something

00:17:50,350 --> 00:17:54,940
like this

00:17:52,030 --> 00:17:57,040
jungle code is now mostly isolated from

00:17:54,940 --> 00:18:00,970
your business logic and nothing from the

00:17:57,040 --> 00:18:02,860
web can find its way to your models

00:18:00,970 --> 00:18:06,580
without passing through your service

00:18:02,860 --> 00:18:06,930
layer the business logic with the LP of

00:18:06,580 --> 00:18:11,600
the

00:18:06,930 --> 00:18:14,760
is now properly isolated and in charge

00:18:11,600 --> 00:18:17,100
this might be enough in many cases and

00:18:14,760 --> 00:18:20,820
you don't really have to go beyond that

00:18:17,100 --> 00:18:24,690
but as a thought experiment I'd like to

00:18:20,820 --> 00:18:28,800
continue this idea a bit further if we

00:18:24,690 --> 00:18:30,540
try to integrate also the the ORM the

00:18:28,800 --> 00:18:34,050
way we would integrate a third party

00:18:30,540 --> 00:18:36,240
like presented by treaty so this would

00:18:34,050 --> 00:18:38,400
mean your business logic would now be

00:18:36,240 --> 00:18:39,900
implemented completely independently

00:18:38,400 --> 00:18:42,390
from Django

00:18:39,900 --> 00:18:46,950
it's let's same pure Python code as

00:18:42,390 --> 00:18:49,860
opposed to jumbo Python code so your RAM

00:18:46,950 --> 00:18:53,580
code would be the the adapter between

00:18:49,860 --> 00:18:56,580
your code your business logic and zero

00:18:53,580 --> 00:18:59,280
Ram and with a little bit of class

00:18:56,580 --> 00:19:02,130
interfacing you could even transform it

00:18:59,280 --> 00:19:07,590
to adapt it to any or Rama or even any

00:19:02,130 --> 00:19:09,960
persistent service so note that for this

00:19:07,590 --> 00:19:10,590
you would need two distinct classes for

00:19:09,960 --> 00:19:13,500
your medals

00:19:10,590 --> 00:19:15,810
one classic jungle model class and a

00:19:13,500 --> 00:19:19,740
pure Python class so let's call it an

00:19:15,810 --> 00:19:23,310
entity and we can continue this madness

00:19:19,740 --> 00:19:26,070
beyond with the third experiment your

00:19:23,310 --> 00:19:27,080
business logic could now be completely

00:19:26,070 --> 00:19:29,910
free of trongo

00:19:27,080 --> 00:19:32,610
yeah but for now it still lives in the

00:19:29,910 --> 00:19:34,890
service and select all files in jungle

00:19:32,610 --> 00:19:36,870
well there's no real reason in the end

00:19:34,890 --> 00:19:39,030
it could live in dependency from John go

00:19:36,870 --> 00:19:40,890
in your own Khan base but on a whole

00:19:39,030 --> 00:19:44,790
different module outside of the jungle

00:19:40,890 --> 00:19:48,090
architecture so if we take a look at

00:19:44,790 --> 00:19:50,280
this graph and try to look it from a

00:19:48,090 --> 00:19:51,990
little further it looks like it's kind

00:19:50,280 --> 00:19:54,930
of symmetrical with things in the

00:19:51,990 --> 00:19:58,560
outside and things in the inside so I'd

00:19:54,930 --> 00:20:01,740
like to just reshape it this way to have

00:19:58,560 --> 00:20:06,240
an idea so yeah it looks a little

00:20:01,740 --> 00:20:08,520
strange and I'm I'm really sure I'm not

00:20:06,240 --> 00:20:10,350
sure anyone really took this idea so far

00:20:08,520 --> 00:20:12,570
with jungle but I would sure like to

00:20:10,350 --> 00:20:14,630
know if they did and how it worked for

00:20:12,570 --> 00:20:18,150
them

00:20:14,630 --> 00:20:20,620
so my if we take the most important

00:20:18,150 --> 00:20:22,600
thing from this idea it would be to

00:20:20,620 --> 00:20:25,600
split your business logic your jungle

00:20:22,600 --> 00:20:28,420
views and the Urim and when I think

00:20:25,600 --> 00:20:29,740
about it it's probably some advice that

00:20:28,420 --> 00:20:35,140
we've heard before

00:20:29,740 --> 00:20:37,030
with different words so I guess I can

00:20:35,140 --> 00:20:41,500
hear the question that some of you are

00:20:37,030 --> 00:20:44,370
wondering as of now if we put layers and

00:20:41,500 --> 00:20:48,130
layers and layers of code in the kind of

00:20:44,370 --> 00:20:52,380
yeah indicate of lasagna that many

00:20:48,130 --> 00:20:56,290
people identify with a huge enterprise

00:20:52,380 --> 00:21:01,800
languages like Java and.net so is this

00:20:56,290 --> 00:21:04,960
Java are we java eating in our code and

00:21:01,800 --> 00:21:06,730
well if java is the term we want to put

00:21:04,960 --> 00:21:08,770
in front of keeping ourselves from

00:21:06,730 --> 00:21:12,160
touching everything over well yeah maybe

00:21:08,770 --> 00:21:14,410
yes this we could call this java but i

00:21:12,160 --> 00:21:16,150
think the real point is that there's

00:21:14,410 --> 00:21:20,080
this common idea that with java you have

00:21:16,150 --> 00:21:22,750
too many layers and we stronger maybe we

00:21:20,080 --> 00:21:24,429
are missing some layer maybe we would be

00:21:22,750 --> 00:21:27,640
lacking a bit of software architecture

00:21:24,429 --> 00:21:30,910
and using genres own software

00:21:27,640 --> 00:21:35,530
architecture as if it was enough for the

00:21:30,910 --> 00:21:40,150
whole project we have so let's talk

00:21:35,530 --> 00:21:43,270
about software architecture in this part

00:21:40,150 --> 00:21:45,429
I'll be advertising a lot of ideas and

00:21:43,270 --> 00:21:47,440
work from other people there are

00:21:45,429 --> 00:21:49,780
concepts that I wished I had known

00:21:47,440 --> 00:21:54,360
before and that would have eased a few

00:21:49,780 --> 00:21:57,070
decision design decisions I had to take

00:21:54,360 --> 00:21:59,710
so we're talking about architecture so

00:21:57,070 --> 00:22:02,260
what exactly are we talking about my

00:21:59,710 --> 00:22:06,010
take would be that it's about boxes

00:22:02,260 --> 00:22:08,170
there's small boxes big boxes and how

00:22:06,010 --> 00:22:10,420
you decide what goes in which box how

00:22:08,170 --> 00:22:12,640
you labelled your boxes and how you help

00:22:10,420 --> 00:22:18,309
things go from run box to another box

00:22:12,640 --> 00:22:21,429
etc so we'll be introducing three boxing

00:22:18,309 --> 00:22:24,330
patterns today from a very practical one

00:22:21,429 --> 00:22:27,520
to a much theoretical on high-level view

00:22:24,330 --> 00:22:30,310
and as much as I'd like to make sure

00:22:27,520 --> 00:22:33,820
experts in those concepts each one would

00:22:30,310 --> 00:22:39,370
be worth a full line stalk so when

00:22:33,820 --> 00:22:41,350
for talks today so our first concept is

00:22:39,370 --> 00:22:43,030
from Gary Bernhardt

00:22:41,350 --> 00:22:46,840
it's called functional core and

00:22:43,030 --> 00:22:49,780
imperative cell and the idea is that in

00:22:46,840 --> 00:22:52,540
your code you should always separate the

00:22:49,780 --> 00:22:55,150
logic where the decisions are made from

00:22:52,540 --> 00:23:00,130
the glue that fits the logic input and

00:22:55,150 --> 00:23:02,920
do things with the output so the logic

00:23:00,130 --> 00:23:05,020
should be expressed using functional

00:23:02,920 --> 00:23:07,360
code which means code without side

00:23:05,020 --> 00:23:09,840
effect which mean that they don't modify

00:23:07,360 --> 00:23:13,090
an object attribute and they don't call

00:23:09,840 --> 00:23:16,059
an external system like read a file or

00:23:13,090 --> 00:23:19,000
write in your database etc and there's a

00:23:16,059 --> 00:23:22,600
very very nice thing with functional

00:23:19,000 --> 00:23:26,400
code which is that it's easier to unit

00:23:22,600 --> 00:23:29,830
test it only depends on its input and

00:23:26,400 --> 00:23:32,920
the only thing to check is the output so

00:23:29,830 --> 00:23:35,050
you can extensively check you can ask

00:23:32,920 --> 00:23:39,100
extensively unit test your logic this

00:23:35,050 --> 00:23:42,280
way and really go and find all the

00:23:39,100 --> 00:23:44,920
possible corner cases of your logic but

00:23:42,280 --> 00:23:47,980
then if you don't have any side effects

00:23:44,920 --> 00:23:50,140
you're producing nothing a system needs

00:23:47,980 --> 00:23:52,270
side effects like reading and writing

00:23:50,140 --> 00:23:54,100
HTTP packets and reading and writing

00:23:52,270 --> 00:23:59,050
your database otherwise it's just

00:23:54,100 --> 00:24:02,170
producing heat so that's the role of the

00:23:59,050 --> 00:24:06,130
imperative shell that surrounds your

00:24:02,170 --> 00:24:07,210
functional cause it has as little logic

00:24:06,130 --> 00:24:10,120
as possible

00:24:07,210 --> 00:24:13,030
but it conveys the information from your

00:24:10,120 --> 00:24:17,080
program input to the logic to the output

00:24:13,030 --> 00:24:20,140
and because the imperative shell has no

00:24:17,080 --> 00:24:22,900
logic or little logic you don't have to

00:24:20,140 --> 00:24:26,830
write many tests to make sure that it

00:24:22,900 --> 00:24:29,620
works but it's deeply linked to many

00:24:26,830 --> 00:24:32,170
parts of the system so you want those

00:24:29,620 --> 00:24:36,250
tests to be integration tests and you

00:24:32,170 --> 00:24:39,460
want to avoid mocking you can think of

00:24:36,250 --> 00:24:41,260
it as a kind of a factory where your

00:24:39,460 --> 00:24:43,090
functional course would be the machines

00:24:41,260 --> 00:24:45,010
they take something in and spit

00:24:43,090 --> 00:24:46,809
something out and the imperative shell

00:24:45,010 --> 00:24:49,990
would be the conveyor belt that is

00:24:46,809 --> 00:24:54,639
with making each machines output linked

00:24:49,990 --> 00:24:58,240
to another machines input I'll take an

00:24:54,639 --> 00:25:01,779
example both of these snippets right

00:24:58,240 --> 00:25:05,799
here are parsing etc' hosts and printing

00:25:01,779 --> 00:25:13,860
each line ignoring comments and left

00:25:05,799 --> 00:25:17,590
side we have a nice function it's yes so

00:25:13,860 --> 00:25:19,440
the function pass host would be doing

00:25:17,590 --> 00:25:23,559
all the work and then it's probably

00:25:19,440 --> 00:25:26,879
uncaps elated exposed you don't need to

00:25:23,559 --> 00:25:30,639
know a lot of different parameters and

00:25:26,879 --> 00:25:32,110
it really eases the way to read the main

00:25:30,639 --> 00:25:34,749
function because you don't have to know

00:25:32,110 --> 00:25:38,440
all the details and then on the right

00:25:34,749 --> 00:25:42,269
one it's completely splitted in two

00:25:38,440 --> 00:25:48,009
different parts where the our pass host

00:25:42,269 --> 00:25:51,879
function is just reading lines in in

00:25:48,009 --> 00:25:54,129
this argument and then applying the rule

00:25:51,879 --> 00:25:56,799
for executing commands and then yielding

00:25:54,129 --> 00:26:00,340
different lines and then the main part

00:25:56,799 --> 00:26:03,129
is tasked with opening the ETCs file

00:26:00,340 --> 00:26:05,649
infringing the line so the the pass host

00:26:03,129 --> 00:26:09,610
is not even reading it is a host anymore

00:26:05,649 --> 00:26:13,269
so as let's do a show of hands who think

00:26:09,610 --> 00:26:16,330
the left one is cleaner who thinks the

00:26:13,269 --> 00:26:18,039
right one is cleaner okay all the hands

00:26:16,330 --> 00:26:21,730
that were lifted were on the right one

00:26:18,039 --> 00:26:25,019
and you're completely right the one from

00:26:21,730 --> 00:26:28,299
my point of view the one on the left is

00:26:25,019 --> 00:26:29,950
mixing IO and logic the one on the right

00:26:28,299 --> 00:26:32,710
is separating them into a functional

00:26:29,950 --> 00:26:34,990
core that's pass hosts and an imperative

00:26:32,710 --> 00:26:38,399
shell which is main a very nice

00:26:34,990 --> 00:26:40,749
consequence of doing things this way

00:26:38,399 --> 00:26:44,289
let's say that now everything has

00:26:40,749 --> 00:26:46,659
changed and impressed by the ability our

00:26:44,289 --> 00:26:48,879
ability to pass the host file our

00:26:46,659 --> 00:26:51,190
customer and I wanted to read the host

00:26:48,879 --> 00:26:55,570
file from an api pass it and write it to

00:26:51,190 --> 00:26:57,759
a local file so on the left and the

00:26:55,570 --> 00:26:59,710
right the code before and after we

00:26:57,759 --> 00:27:00,610
changed for the requirement we can see

00:26:59,710 --> 00:27:03,640
that

00:27:00,610 --> 00:27:06,250
we were able to change completely the

00:27:03,640 --> 00:27:09,340
piping without touching anything about

00:27:06,250 --> 00:27:11,260
our logic the password function estate

00:27:09,340 --> 00:27:13,870
completely the same and all the unit

00:27:11,260 --> 00:27:18,130
tests that we wrote for it are still

00:27:13,870 --> 00:27:20,980
applying so if we generalize this idea

00:27:18,130 --> 00:27:23,260
it means that the i/o so the file or

00:27:20,980 --> 00:27:24,850
network interactions should always live

00:27:23,260 --> 00:27:29,980
up in your stack

00:27:24,850 --> 00:27:30,519
hence the hoist but yeah if you bury the

00:27:29,980 --> 00:27:33,220
i/os

00:27:30,519 --> 00:27:34,960
at the the bottom of your stack it's

00:27:33,220 --> 00:27:39,190
going to be harder to modify your code

00:27:34,960 --> 00:27:41,830
and to test it and to delegate so this

00:27:39,190 --> 00:27:45,190
had been presented by Brandon Rhodes in

00:27:41,830 --> 00:27:50,649
a talk named hoisting your high your iOS

00:27:45,190 --> 00:27:54,730
I really recommend it but let's go back

00:27:50,649 --> 00:27:58,090
to Gary Bernhard for a second one of is

00:27:54,730 --> 00:28:01,000
inspirations for the functional

00:27:58,090 --> 00:28:03,850
imperative shell was something called

00:28:01,000 --> 00:28:04,360
the execute architecture by alistair

00:28:03,850 --> 00:28:06,580
cockburn

00:28:04,360 --> 00:28:08,740
which describes a way to organize

00:28:06,580 --> 00:28:13,240
software with layers and how these

00:28:08,740 --> 00:28:17,320
layers should communicate so in this way

00:28:13,240 --> 00:28:20,799
of organizing things the innermost layer

00:28:17,320 --> 00:28:22,690
is the the domain that's the business

00:28:20,799 --> 00:28:25,320
let's say the business logic of your

00:28:22,690 --> 00:28:28,029
application then the application itself

00:28:25,320 --> 00:28:34,120
so in green four people can see colors

00:28:28,029 --> 00:28:38,559
and then yeah the application itself

00:28:34,120 --> 00:28:41,769
it's job is to adapt the object of the

00:28:38,559 --> 00:28:44,980
domain to the real world and then in the

00:28:41,769 --> 00:28:48,370
outermost layer it's the real world the

00:28:44,980 --> 00:28:50,559
database is HTTP etc and one of the

00:28:48,370 --> 00:28:53,080
important rule is that objects in the

00:28:50,559 --> 00:28:57,909
inside should never know about objects

00:28:53,080 --> 00:29:00,039
in the outside so for the outside to

00:28:57,909 --> 00:29:02,139
call the inside so that would be a view

00:29:00,039 --> 00:29:04,330
that's calling business logic which is

00:29:02,139 --> 00:29:07,360
thing that you can expect will happen

00:29:04,330 --> 00:29:09,100
often you just have to make it a direct

00:29:07,360 --> 00:29:13,990
call because the exterior can know about

00:29:09,100 --> 00:29:15,550
the interior but for the inside to call

00:29:13,990 --> 00:29:17,950
the outside that would be for example

00:29:15,550 --> 00:29:22,030
business logic that needs to make a

00:29:17,950 --> 00:29:25,090
database call this has an i/o actually

00:29:22,030 --> 00:29:27,670
one of the ways to do it is through

00:29:25,090 --> 00:29:29,679
something called dependency inversion so

00:29:27,670 --> 00:29:32,200
for example you could implement it as an

00:29:29,679 --> 00:29:34,809
an abstract interface that will be

00:29:32,200 --> 00:29:38,890
defined by the domain which knows that

00:29:34,809 --> 00:29:40,450
it has to store the object and then it

00:29:38,890 --> 00:29:43,300
will be implemented by the application

00:29:40,450 --> 00:29:49,000
which knows that storing means betting

00:29:43,300 --> 00:29:50,770
in the database using the John Gorham so

00:29:49,000 --> 00:29:52,420
this way the domain can communicate with

00:29:50,770 --> 00:29:55,080
the application without actually knowing

00:29:52,420 --> 00:29:57,340
anything about it so if I

00:29:55,080 --> 00:29:59,380
recontextualize all these concepts in

00:29:57,340 --> 00:30:01,570
junga terms we will domed up with

00:29:59,380 --> 00:30:03,700
something like this which as far as I

00:30:01,570 --> 00:30:05,860
can tell from our research looks like

00:30:03,700 --> 00:30:09,190
classical software architecture pattern

00:30:05,860 --> 00:30:12,309
and I've thin I I think I've already

00:30:09,190 --> 00:30:18,490
seen this diagram before and that I

00:30:12,309 --> 00:30:23,470
can't say when well so it's interesting

00:30:18,490 --> 00:30:25,690
to note that brundin roads of a very

00:30:23,470 --> 00:30:28,150
similar view install the cleaner

00:30:25,690 --> 00:30:29,980
architecture in Python which looks at

00:30:28,150 --> 00:30:32,470
another pattern called the clean

00:30:29,980 --> 00:30:34,120
architecture which is very similar and

00:30:32,470 --> 00:30:38,080
inspired from the exact you know

00:30:34,120 --> 00:30:41,710
architecture I just presented now to a

00:30:38,080 --> 00:30:43,960
last architectural topic for today what

00:30:41,710 --> 00:30:46,030
if I told you that there is a systematic

00:30:43,960 --> 00:30:49,059
approach that can help you split your

00:30:46,030 --> 00:30:53,880
system into subsystems in ways that

00:30:49,059 --> 00:30:56,559
minimizes friction and coupling it's

00:30:53,880 --> 00:30:59,679
domain driven design which is an idea

00:30:56,559 --> 00:31:02,200
from Eric Evans and it embodies a lot of

00:30:59,679 --> 00:31:06,160
different advices from higher to lower

00:31:02,200 --> 00:31:10,179
level and some of it is about code and

00:31:06,160 --> 00:31:13,350
much of this more importantly is not the

00:31:10,179 --> 00:31:18,700
primary idea of the main driven design

00:31:13,350 --> 00:31:21,850
is as the title says that software

00:31:18,700 --> 00:31:24,400
design should owe as much as possible be

00:31:21,850 --> 00:31:26,559
driven by the actual knowledge from the

00:31:24,400 --> 00:31:28,390
domain or business or trade if you

00:31:26,559 --> 00:31:30,490
prefer

00:31:28,390 --> 00:31:35,470
so there are three important concepts

00:31:30,490 --> 00:31:37,150
that embody this idea of modeling for

00:31:35,470 --> 00:31:40,090
example a person in your application

00:31:37,150 --> 00:31:42,220
even if it's the same person we'd be

00:31:40,090 --> 00:31:44,170
done in completely different ways

00:31:42,220 --> 00:31:45,970
whether you're modeling your person as a

00:31:44,170 --> 00:31:48,840
friend if you work at Facebook or a

00:31:45,970 --> 00:31:51,130
recruit if you work at LinkedIn or

00:31:48,840 --> 00:31:53,890
contributor if you work at github or

00:31:51,130 --> 00:31:56,200
teammate at slack etc so a good model

00:31:53,890 --> 00:31:58,630
can be created by being curious about

00:31:56,200 --> 00:32:03,970
your domain rules and links and

00:31:58,630 --> 00:32:06,429
constraints secondly when deciding how

00:32:03,970 --> 00:32:09,190
to split your domain into subdomains

00:32:06,429 --> 00:32:12,340
that will communicate together there is

00:32:09,190 --> 00:32:14,950
a rule of thumb that you could use which

00:32:12,340 --> 00:32:18,730
be to follow the way that the business

00:32:14,950 --> 00:32:21,670
urine has divided the domain into

00:32:18,730 --> 00:32:24,670
subdomains or it's usually called

00:32:21,670 --> 00:32:26,500
bounded contexts so try to identify the

00:32:24,670 --> 00:32:31,240
different bounded context and work

00:32:26,500 --> 00:32:32,860
within them in your software but for in

00:32:31,240 --> 00:32:35,679
order to understand the domain the first

00:32:32,860 --> 00:32:39,700
step is to speak its language you must

00:32:35,679 --> 00:32:41,920
learn and use the same words for the

00:32:39,700 --> 00:32:44,500
same business concepts whether you're a

00:32:41,920 --> 00:32:47,080
technical person or not it's called the

00:32:44,500 --> 00:32:49,390
ubiquitous language so for example if

00:32:47,080 --> 00:32:52,000
you notice that the project people talk

00:32:49,390 --> 00:32:54,340
about a shopping cart and then the

00:32:52,000 --> 00:32:57,040
support people talk about shopping

00:32:54,340 --> 00:32:58,990
baskets and the developers what they

00:32:57,040 --> 00:33:02,830
have implemented is something called an

00:32:58,990 --> 00:33:04,510
order and you realize that they're all

00:33:02,830 --> 00:33:06,130
talking about the same thing then

00:33:04,510 --> 00:33:09,220
there's probably a problem at this point

00:33:06,130 --> 00:33:11,410
you really need to try to unify everyone

00:33:09,220 --> 00:33:15,160
around the same language - for everyone

00:33:11,410 --> 00:33:17,050
to understand each other so I'll take an

00:33:15,160 --> 00:33:20,559
example of domain driven design that I

00:33:17,050 --> 00:33:25,420
shamelessly stole from Sylmar which is

00:33:20,559 --> 00:33:28,300
blessing let's say this is our customer

00:33:25,420 --> 00:33:31,929
model or entity if you prefer but

00:33:28,300 --> 00:33:35,890
there's a problem here we have a

00:33:31,929 --> 00:33:37,540
delivery address but people might have

00:33:35,890 --> 00:33:39,690
two different addresses a shipping

00:33:37,540 --> 00:33:43,749
address and a billing address

00:33:39,690 --> 00:33:45,610
so first the first reaction let's add

00:33:43,749 --> 00:33:47,919
everything to the customer model but

00:33:45,610 --> 00:33:50,080
then the problem of doing this is that

00:33:47,919 --> 00:33:53,499
soon enough model with it will be

00:33:50,080 --> 00:33:55,299
exploding with hundreds of fields so we

00:33:53,499 --> 00:33:59,019
can do it another way an address in the

00:33:55,299 --> 00:34:01,360
end is an address is an address so now

00:33:59,019 --> 00:34:03,999
we have an address model another

00:34:01,360 --> 00:34:06,480
customer model that's nice but from the

00:34:03,999 --> 00:34:10,240
business point of view is this address

00:34:06,480 --> 00:34:12,970
concept really a thing of its own well

00:34:10,240 --> 00:34:16,740
we went and asked the the billing

00:34:12,970 --> 00:34:16,740
department and the shipping department

00:34:18,629 --> 00:34:22,750
yeah you're right maybe we could have

00:34:21,669 --> 00:34:26,050
split it this way

00:34:22,750 --> 00:34:33,550
with shipping model shipping address

00:34:26,050 --> 00:34:35,740
model and a billing address model oh the

00:34:33,550 --> 00:34:37,359
shoulders that the the person we send

00:34:35,740 --> 00:34:40,149
stuff to is not called the shipping

00:34:37,359 --> 00:34:41,919
address but a recipient and the billing

00:34:40,149 --> 00:34:43,359
department they told us that the entity

00:34:41,919 --> 00:34:48,310
that we bill is not called the billing

00:34:43,359 --> 00:34:50,829
address but an account well actually yes

00:34:48,310 --> 00:34:53,560
the shipping departments they said that

00:34:50,829 --> 00:34:55,510
well we were there it would be very nice

00:34:53,560 --> 00:34:57,250
if we could store the building code and

00:34:55,510 --> 00:34:58,920
the delivery how else so that the

00:34:57,250 --> 00:35:01,960
delivery could be more successful and

00:34:58,920 --> 00:35:03,730
the billing folks they told us that they

00:35:01,960 --> 00:35:05,829
need to know the accounts tax code and

00:35:03,730 --> 00:35:13,950
also the currency may be using Jang

00:35:05,829 --> 00:35:17,790
Germany who'sa so there's that yeah

00:35:13,950 --> 00:35:20,220
as you see answering decimals was not

00:35:17,790 --> 00:35:22,349
too hard with software architecture this

00:35:20,220 --> 00:35:24,690
way and how do you think we would have

00:35:22,349 --> 00:35:30,569
done if we have had kept our original

00:35:24,690 --> 00:35:33,809
split so the conclusion for this will be

00:35:30,569 --> 00:35:36,869
that we're not just building a web app

00:35:33,809 --> 00:35:40,470
and as much as we are software software

00:35:36,869 --> 00:35:42,390
professionals we also have to become

00:35:40,470 --> 00:35:45,420
invested in the field of our company

00:35:42,390 --> 00:35:47,280
because it will definitely help us drive

00:35:45,420 --> 00:35:52,650
better design decisions

00:35:47,280 --> 00:35:55,380
a quick note I've cited a bunch of folks

00:35:52,650 --> 00:35:56,910
and their talks or works it's

00:35:55,380 --> 00:35:59,970
interesting to know that they all

00:35:56,910 --> 00:36:01,740
inspired themselves from one another in

00:35:59,970 --> 00:36:03,990
this graph you can see direct reference

00:36:01,740 --> 00:36:07,819
in people's talk or blog posts to other

00:36:03,990 --> 00:36:11,069
people's work so it's really a matter of

00:36:07,819 --> 00:36:12,839
standing on the shoulders of giants or

00:36:11,069 --> 00:36:17,579
in this case maybe just taller folks but

00:36:12,839 --> 00:36:18,960
it's already good so yeah well if we've

00:36:17,579 --> 00:36:21,000
seen that it's very important to be

00:36:18,960 --> 00:36:23,910
careful when you take other people's

00:36:21,000 --> 00:36:28,980
code don't hesitate to listen to other

00:36:23,910 --> 00:36:35,190
people's ideas but a project is not a

00:36:28,980 --> 00:36:38,940
new test before we start give you a

00:36:35,190 --> 00:36:42,270
reminder of the testing parent it shows

00:36:38,940 --> 00:36:46,380
three level of tests at the bottom is a

00:36:42,270 --> 00:36:48,809
unique test the test for example a

00:36:46,380 --> 00:36:52,230
single function without our use database

00:36:48,809 --> 00:36:54,240
access networking etc generally you want

00:36:52,230 --> 00:36:56,700
to have many of these tests covering

00:36:54,240 --> 00:36:59,849
auto-connect edges and so you want them

00:36:56,700 --> 00:37:02,579
to be fast away first then the

00:36:59,849 --> 00:37:04,650
integration test the don't test the

00:37:02,579 --> 00:37:07,770
logic but whereas the different apps

00:37:04,650 --> 00:37:10,230
worked well together like a few that

00:37:07,770 --> 00:37:13,140
will use permission business logic and

00:37:10,230 --> 00:37:16,920
so on they may have the same AF side

00:37:13,140 --> 00:37:19,740
effects and will be longer to run but so

00:37:16,920 --> 00:37:23,069
you should not have too many of them and

00:37:19,740 --> 00:37:25,240
finally functional tests the test

00:37:23,069 --> 00:37:28,480
business requirement of the

00:37:25,240 --> 00:37:31,420
project engineer is spread over several

00:37:28,480 --> 00:37:34,650
parts each for example you are wanting

00:37:31,420 --> 00:37:38,740
to do a specific action on your website

00:37:34,650 --> 00:37:42,300
this test can easily be way longer but

00:37:38,740 --> 00:37:45,340
you generally have a lot less of them

00:37:42,300 --> 00:37:48,850
one kind that is not on this slide are

00:37:45,340 --> 00:37:51,460
m2n tests because they can be seen as an

00:37:48,850 --> 00:37:55,840
extension of functional tests are

00:37:51,460 --> 00:37:58,240
available that may involve browser here

00:37:55,840 --> 00:38:01,810
is an example of all the tests could be

00:37:58,240 --> 00:38:05,200
separated for a jumbo view you can see

00:38:01,810 --> 00:38:06,910
that our level tests include things that

00:38:05,200 --> 00:38:09,400
have already been tested at a lower

00:38:06,910 --> 00:38:14,290
level of course but they don't test all

00:38:09,400 --> 00:38:16,720
the corner cases only the main ones if

00:38:14,290 --> 00:38:20,350
all the parts are well covered by unit

00:38:16,720 --> 00:38:24,010
test and if integration tests unsure or

00:38:20,350 --> 00:38:26,380
all work well together then the

00:38:24,010 --> 00:38:31,840
functional test all the functional tests

00:38:26,380 --> 00:38:34,630
you need are just end-to-end tests this

00:38:31,840 --> 00:38:37,810
is an important advice right tests yes

00:38:34,630 --> 00:38:40,050
but the right test and only the right

00:38:37,810 --> 00:38:40,050
ones

00:38:45,290 --> 00:38:49,400
when writing your test the other thing

00:38:47,480 --> 00:38:51,320
you must keep in mind you don't write

00:38:49,400 --> 00:38:54,050
your test like to venture like you write

00:38:51,320 --> 00:38:56,690
your code a test should be easy to read

00:38:54,050 --> 00:38:58,990
and to understand at first sight it was

00:38:56,690 --> 00:39:02,390
test one thing and one thing only

00:38:58,990 --> 00:39:04,850
using dry don't repeat yourself seems

00:39:02,390 --> 00:39:07,280
like a good idea at the beginning but I

00:39:04,850 --> 00:39:11,870
can assure you that sooner or later your

00:39:07,280 --> 00:39:13,940
abilities generally forbid defining

00:39:11,870 --> 00:39:17,270
thousands of things in the setup of the

00:39:13,940 --> 00:39:21,350
bestest class never try to define smart

00:39:17,270 --> 00:39:21,860
functions with a lot of magic in your

00:39:21,350 --> 00:39:24,520
test

00:39:21,860 --> 00:39:27,710
aim for the simplest to read and write

00:39:24,520 --> 00:39:30,200
if a test fails you don't want to pass a

00:39:27,710 --> 00:39:32,360
math ability of your time trying to

00:39:30,200 --> 00:39:32,870
understand what it does you want to look

00:39:32,360 --> 00:39:35,960
at it

00:39:32,870 --> 00:39:37,130
and understudied right away and you want

00:39:35,960 --> 00:39:38,780
to be sure that if you change something

00:39:37,130 --> 00:39:44,240
in the test it won't break any other

00:39:38,780 --> 00:39:45,650
tests here are some things that can get

00:39:44,240 --> 00:39:49,340
complicated in the wrong way

00:39:45,650 --> 00:39:51,620
first mixing there are black boxes that

00:39:49,340 --> 00:39:55,790
can do some magic the opposite of what

00:39:51,620 --> 00:39:58,250
we want so in tests avoid them as much

00:39:55,790 --> 00:40:00,200
as possible and you've if you really

00:39:58,250 --> 00:40:06,560
need one make sure it doesn't depend on

00:40:00,200 --> 00:40:08,240
another then the test client in unit

00:40:06,560 --> 00:40:10,670
tests you should not need to call review

00:40:08,240 --> 00:40:12,770
so no test plans in a credit in

00:40:10,670 --> 00:40:15,440
integration test you should not need to

00:40:12,770 --> 00:40:19,520
call the test client more than once for

00:40:15,440 --> 00:40:22,280
a given you your choice check image URL

00:40:19,520 --> 00:40:24,440
is okay if you need more integration

00:40:22,280 --> 00:40:25,940
test four of you call it directly

00:40:24,440 --> 00:40:30,260
because in the end it's just a call

00:40:25,940 --> 00:40:33,110
about fortunate from a functional test

00:40:30,260 --> 00:40:37,070
if it's of course okay to test to use a

00:40:33,110 --> 00:40:40,460
display on and finally fixed fix your

00:40:37,070 --> 00:40:43,250
files because nobody wants to edit a big

00:40:40,460 --> 00:40:45,440
JSON file every time a model change and

00:40:43,250 --> 00:40:46,820
also because it acts tough stuff you

00:40:45,440 --> 00:40:48,849
cannot see when reading your test

00:40:46,820 --> 00:40:54,430
exactly like a long chat

00:40:48,849 --> 00:40:56,890
Buster's class a good way to avoid all

00:40:54,430 --> 00:40:59,440
rested forces to stop using unit test

00:40:56,890 --> 00:41:01,859
hundreds jungle era and to use pile test

00:40:59,440 --> 00:41:04,869
instead with spice textile functions

00:41:01,859 --> 00:41:07,029
it's dead simple functions that take

00:41:04,869 --> 00:41:08,829
fixtures that are functions to as

00:41:07,029 --> 00:41:11,319
arguments and where you do your

00:41:08,829 --> 00:41:14,680
assertions by using the simple Python

00:41:11,319 --> 00:41:19,269
assert statement no need to wonder what

00:41:14,680 --> 00:41:23,039
a submitter to use regarding the problem

00:41:19,269 --> 00:41:27,279
of creating test objects with a model

00:41:23,039 --> 00:41:30,279
instances or say entities a very nice

00:41:27,279 --> 00:41:32,440
tool a very nice tool is factorable it

00:41:30,279 --> 00:41:35,710
allows you to create objects by

00:41:32,440 --> 00:41:38,410
specifying the attributes and only the

00:41:35,710 --> 00:41:40,269
one you need for a specific test all the

00:41:38,410 --> 00:41:44,410
other attributes will be generated a

00:41:40,269 --> 00:41:46,509
random realistic actually this removes

00:41:44,410 --> 00:41:48,549
the need for secure files in a very

00:41:46,509 --> 00:41:50,430
clean way and make yourself a new test

00:41:48,549 --> 00:41:53,289
Marsteller

00:41:50,430 --> 00:41:55,029
and better you can even use it in your

00:41:53,289 --> 00:41:56,619
unit test creating model instance

00:41:55,029 --> 00:42:00,579
without eating the database

00:41:56,619 --> 00:42:02,440
I know briefly introduce you to some

00:42:00,579 --> 00:42:05,670
topics about tests that are thought to

00:42:02,440 --> 00:42:10,839
be particularly useful in large projects

00:42:05,670 --> 00:42:12,930
first we have your driven development it

00:42:10,839 --> 00:42:16,349
was inspired by test-driven development

00:42:12,930 --> 00:42:19,029
but instead of writing your test Oscar

00:42:16,349 --> 00:42:22,599
the way you write them as scenarios in

00:42:19,029 --> 00:42:25,089
plain English so little show of hands

00:42:22,599 --> 00:42:30,579
who has ever worked with VR driven

00:42:25,089 --> 00:42:33,029
development and amongst you who has

00:42:30,579 --> 00:42:33,029
liked it

00:42:35,210 --> 00:42:43,800
just a few so it's been English but of

00:42:40,290 --> 00:42:47,790
course it must follow a few rules yeah

00:42:43,800 --> 00:42:51,440
you see a future blog with one of its

00:42:47,790 --> 00:42:55,080
many scenarios yes publishing the Africa

00:42:51,440 --> 00:42:58,050
scenario is composed of steps first the

00:42:55,080 --> 00:43:02,160
context given I'm the new toy user and I

00:42:58,050 --> 00:43:05,460
have an Africa then the action when I go

00:43:02,160 --> 00:43:07,820
to the article page and I press the

00:43:05,460 --> 00:43:11,930
publish button and then the accession

00:43:07,820 --> 00:43:14,250
then the article should be published you

00:43:11,930 --> 00:43:15,780
can then transpose everything into

00:43:14,250 --> 00:43:18,270
Python using one of the few existing

00:43:15,780 --> 00:43:20,700
libraries in this example we'll use PI

00:43:18,270 --> 00:43:23,880
test BDD that use a bi test ecosystem

00:43:20,700 --> 00:43:26,040
including the fixture but they all work

00:43:23,880 --> 00:43:28,070
the same way the step is represented by

00:43:26,040 --> 00:43:30,750
a function yeah you can see the scenario

00:43:28,070 --> 00:43:32,760
which is a test that would be acquitted

00:43:30,750 --> 00:43:37,590
by PI tests and all the steps as

00:43:32,760 --> 00:43:39,660
functions using features present big

00:43:37,590 --> 00:43:42,720
advantage to this assuming there are

00:43:39,660 --> 00:43:45,060
toads the world any 100 project can

00:43:42,720 --> 00:43:47,280
write the scenarios for example project

00:43:45,060 --> 00:43:48,780
owner and not only the developer we

00:43:47,280 --> 00:43:51,780
still have to convert the steps into

00:43:48,780 --> 00:43:54,030
Pentonville of course when this is done

00:43:51,780 --> 00:43:55,950
everywhere in your project it can be a

00:43:54,030 --> 00:43:58,320
very nice way to document all your

00:43:55,950 --> 00:44:00,480
features in one place which can be a

00:43:58,320 --> 00:44:03,060
lifesaver for the new teammate intervene

00:44:00,480 --> 00:44:05,360
your big project and you have a solid

00:44:03,060 --> 00:44:09,210
link between your project and your card

00:44:05,360 --> 00:44:10,890
but sometimes you you can describe the

00:44:09,210 --> 00:44:12,600
behavior you want for example you want

00:44:10,890 --> 00:44:15,000
to check that something is right but you

00:44:12,600 --> 00:44:17,490
you don't know how to define this right

00:44:15,000 --> 00:44:20,490
in this case you can try to snapshot

00:44:17,490 --> 00:44:22,260
testing it involves comparing the output

00:44:20,490 --> 00:44:25,920
of something with a previously saved

00:44:22,260 --> 00:44:31,400
output so so and who has done snapshot

00:44:25,920 --> 00:44:33,960
testing before unbelievable just a few

00:44:31,400 --> 00:44:36,900
the most common is testing the rendering

00:44:33,960 --> 00:44:39,180
of a web page via a screenshots but at

00:44:36,900 --> 00:44:39,930
lower level it can be used to compare

00:44:39,180 --> 00:44:42,450
the rescue

00:44:39,930 --> 00:44:45,720
where is the equity during a test or to

00:44:42,450 --> 00:44:48,770
compare with HTML return by view or even

00:44:45,720 --> 00:44:52,200
the output of an API to the imaginary

00:44:48,770 --> 00:44:54,450
includes ways to generate fresh fresh

00:44:52,200 --> 00:44:57,869
snapshots for a new testaments machine

00:44:54,450 --> 00:44:59,849
change having the snapshots and where

00:44:57,869 --> 00:45:01,770
updates in your version control system

00:44:59,849 --> 00:45:04,950
allows the reviewer and the rest of the

00:45:01,770 --> 00:45:08,970
team to see wegend and oh it evolved in

00:45:04,950 --> 00:45:11,069
time so to submit this part I urge you

00:45:08,970 --> 00:45:14,250
to make test the prime part of your

00:45:11,069 --> 00:45:16,470
process if it's not already the case do

00:45:14,250 --> 00:45:18,390
it and you'll thank me later because

00:45:16,470 --> 00:45:21,630
it's realized allow you to trust your

00:45:18,390 --> 00:45:27,539
herd to need less human QA time and to

00:45:21,630 --> 00:45:29,400
achieve continuous delivery so yeah it's

00:45:27,539 --> 00:45:31,710
time to wrap things up sass our

00:45:29,400 --> 00:45:34,049
wonderful Master of Ceremonies making

00:45:31,710 --> 00:45:37,619
big signs to make me understand so just

00:45:34,049 --> 00:45:40,440
a few closing words we know that quite a

00:45:37,619 --> 00:45:42,270
few things we've said are things that we

00:45:40,440 --> 00:45:44,160
haven't seen a lot in the Python

00:45:42,270 --> 00:45:46,140
community which means that either we

00:45:44,160 --> 00:45:47,180
visionaries or we're completely out of

00:45:46,140 --> 00:45:49,829
debt

00:45:47,180 --> 00:45:51,720
remember that just because two guys on a

00:45:49,829 --> 00:45:53,400
stage told you something with yourself a

00:45:51,720 --> 00:45:55,380
short tone doesn't mean that it's the

00:45:53,400 --> 00:45:57,119
absolute truth there are other good and

00:45:55,380 --> 00:46:00,539
valid ways of achieving equivalent

00:45:57,119 --> 00:46:02,730
results but if you apply just 10% of

00:46:00,539 --> 00:46:05,220
what we've said here we are convinced

00:46:02,730 --> 00:46:08,849
that you're in a better state than most

00:46:05,220 --> 00:46:10,529
of the cut bases we've seen so if you

00:46:08,849 --> 00:46:12,240
even if you don't don't feel guilty

00:46:10,529 --> 00:46:15,329
about it now you know that these

00:46:12,240 --> 00:46:17,730
patterns exist obviously it's a really

00:46:15,329 --> 00:46:19,619
broad subject so this well this talk was

00:46:17,730 --> 00:46:22,980
just an appetizer but we've left plenty

00:46:19,619 --> 00:46:25,920
of breadcrumbs towards other talks that

00:46:22,980 --> 00:46:26,910
are more in-depth for you to fall so

00:46:25,920 --> 00:46:29,369
stay curious

00:46:26,910 --> 00:46:35,780
try things and think before your code

00:46:29,369 --> 00:46:37,730
and final finally thank you

00:46:35,780 --> 00:46:40,980
[Applause]

00:46:37,730 --> 00:46:40,980

YouTube URL: https://www.youtube.com/watch?v=_DIlE-yc9ZQ


