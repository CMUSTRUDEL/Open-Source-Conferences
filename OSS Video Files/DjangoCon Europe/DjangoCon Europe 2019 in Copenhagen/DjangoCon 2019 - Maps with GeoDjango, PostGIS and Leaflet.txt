Title: DjangoCon 2019 - Maps with GeoDjango, PostGIS and Leaflet
Publication date: 2019-04-23
Playlist: DjangoCon Europe 2019 in Copenhagen
Description: 
	https://2019.djangocon.eu/talks/maps-with-geodjango-postgis-and-leaflet/

By Paolo Melchiorre: https://twitter.com/pauloxnet
Captions: 
	00:00:01,209 --> 00:00:08,349
I have the pleasure of announcing Paolo Melchiorre. I did ... I practiced.

00:00:10,070 --> 00:00:13,480
Maps with GeoDjango, PostGIS and Leaflet.

00:00:15,740 --> 00:00:17,740
Thank you

00:00:21,890 --> 00:00:23,949
Hello everyone, and thanks for having me.

00:00:24,500 --> 00:00:26,889
I'm here to talk to you about maps.

00:00:26,889 --> 00:00:32,640
I'm not a GIS expert but I'm talking about maps from the point of view of a Django developer.

00:00:35,380 --> 00:00:40,680
It's snowing outside so I want to start with this picture I took in a beautiful place in Europe in the summer.

00:00:41,500 --> 00:00:44,280
Who can tell me in which country this photo was taken?

00:00:45,380 --> 00:00:47,380
Someone?

00:00:47,690 --> 00:00:49,430
No one, okay,

00:00:49,430 --> 00:00:52,629
I'll tell you, it's Italy, and to be more specific

00:00:52,730 --> 00:00:58,090
I took this photo in a natural reserve in Abruzzo, the region where I live and work.

00:00:59,000 --> 00:01:04,149
But first a little bit about myself, and what this picture has in common with maps.

00:01:05,900 --> 00:01:10,929
I'm Paolo Melchiorre, I'm Italian, and as you can see I like the sea.

00:01:11,570 --> 00:01:17,439
I took this photo in the very same place of the previous one. I've always liked taking photos

00:01:18,590 --> 00:01:20,590
in my travels.

00:01:22,460 --> 00:01:30,070
I'm a computer science engineer and my thesis was about Free Software. I discovered Free Software when I was at university.

00:01:31,159 --> 00:01:36,609
The first Free Software I started using and contributing was a photo organizer.

00:01:37,220 --> 00:01:41,709
I was able to share photos with my friend like a static web album.

00:01:42,380 --> 00:01:44,380
I could also

00:01:44,390 --> 00:01:51,759
upload a scanned image of a map and put manually some photos in a specific point on the map.

00:01:52,460 --> 00:01:56,769
It was my first web map, a bit basic, but it worked.

00:01:58,040 --> 00:02:04,959
I forgot to mention that all of these happened in the pre-GoogleMap era, so long time ago.

00:02:06,350 --> 00:02:12,219
After university I started using Python in my first job. We developed website

00:02:13,189 --> 00:02:19,539
with Plone. Plone is a content management system, built on top of Zope

00:02:21,500 --> 00:02:25,990
and on top its ZODB, the object-oriented database.

00:02:28,220 --> 00:02:29,900
Then I needed to store

00:02:29,900 --> 00:02:37,750
data in a relational database like Postgres and I started searching for a Python web framework with support for Postgres.

00:02:41,780 --> 00:02:44,780
I found that the best choice for me was Django.

00:02:45,000 --> 00:02:46,200
In my researches

00:02:46,460 --> 00:02:53,559
about Django I read its documentation and I tried also the GeoDjango tutorial.

00:02:55,220 --> 00:02:59,680
In the meantime I started working remotely as a Django developer

00:02:59,920 --> 00:03:04,140
And the last few years I've been working at 20tab as a senior developer.

00:03:05,860 --> 00:03:10,280
20tab is a software company based in Rome with some remote workers.

00:03:10,540 --> 00:03:16,420
As a company we attend and support some local meetups and conferences, like this one.

00:03:17,150 --> 00:03:22,000
Then in 20tab we use Agile and Lean methods and Growth marketing approach.

00:03:23,660 --> 00:03:25,660
The main part of our work is

00:03:25,910 --> 00:03:32,139
Software development with technologies like Python, Django, React JS and uWSGI.

00:03:34,160 --> 00:03:41,649
Some months ago an our customer asked to us to add a dynamic map on their website because they wanted to show their data

00:03:41,650 --> 00:03:43,190
on the map.

00:03:43,190 --> 00:03:46,280
I started studying again the

00:03:46,480 --> 00:03:53,880
GeoDjango documentation to find a simple way to integrate a web map in a Django project.

00:03:57,280 --> 00:04:00,440
Okay! Now our goal is clear and

00:04:01,010 --> 00:04:03,039
let's see the main topics of this talk.

00:04:03,380 --> 00:04:08,799
We are talking about maps, but we are also going to travel all around the Europe.

00:04:09,890 --> 00:04:15,040
We will start from Abruzzo, the region where I come from, and we will speak about GeoDjango.

00:04:15,919 --> 00:04:17,919
Then we'll go to Rome

00:04:18,169 --> 00:04:23,049
The city where 20tab is based, and we will see all the PostGIS features.

00:04:24,410 --> 00:04:31,840
We'll go south to Sicily, the region where our frontend colleague, Carmelo, come from, to speak about Leaflet JS.

00:04:32,690 --> 00:04:38,560
After that, we will come here to Copenhagen to see a basic web map built from scratch.

00:04:40,040 --> 00:04:42,249
And at the end we will go to the south of France

00:04:43,280 --> 00:04:51,540
where our customer is located, to see a Use case of a web map in a Django project already deployed in production.

00:04:54,800 --> 00:04:59,560
Let's talk about web map. A web map in general is

00:05:00,830 --> 00:05:08,109
something that allows users to view and search data in a spatial way and it is common to add one in your project.

00:05:09,980 --> 00:05:16,720
Usually a web map is delivered by a Geographic Information System and it can be static or dynamic.

00:05:17,630 --> 00:05:21,400
You can interact with it, or maybe you can only view it.

00:05:23,090 --> 00:05:27,999
The map can use raster or vector tiles to represent the surface.

00:05:29,750 --> 00:05:33,250
Usually the data is stored in a spatial database.

00:05:33,590 --> 00:05:38,079
And a web map will use a JavaScript library to show data on your web pages.

00:05:41,150 --> 00:05:45,970
We've already talked about GeoDjango, but what's GeoDjango ?

00:05:47,450 --> 00:05:52,180
GeoDjango is a contrib module that transform Django into a geographic web framework.

00:05:53,090 --> 00:05:58,720
It provides new spatial field types, that you can use on your models.

00:06:00,890 --> 00:06:07,990
GeoDjango adds spatial queries to the Django ORM. For example, you can find a particular point in an area.

00:06:10,490 --> 00:06:16,359
GeoDjango extends the Django's admins with support for editing geometry fields.

00:06:17,330 --> 00:06:22,030
And finally GeoDjango provides, now, four spatial database backends.

00:06:25,850 --> 00:06:29,899
As you can imagine we needed a backend to manage all this

00:06:30,180 --> 00:06:35,720
geographical data and our choice was PostGIS because we already use

00:06:36,150 --> 00:06:38,390
Postgres in all our projects.

00:06:39,480 --> 00:06:41,310
But besides that,

00:06:41,310 --> 00:06:44,210
PostGIS is also the most complete GeoDjango backend.

00:06:45,870 --> 00:06:51,080
It is an extension of Postgres and it integrates spatial data in it.

00:06:52,800 --> 00:06:54,940
PostGIS adds new spatial datatypes

00:06:55,380 --> 00:06:57,700
and specific indexes

00:06:57,750 --> 00:07:01,640
that speed up the spatial functions you can use in your data.

00:07:04,530 --> 00:07:08,059
Leaflet JS is one of the most used JavaScript

00:07:08,910 --> 00:07:12,649
libraries for web maps. It's Free Software

00:07:13,410 --> 00:07:15,710
and it's both desktop and mobile friendly.

00:07:17,070 --> 00:07:23,629
It's very light. It weights less than 40 kilobytes of gzipped javascript.

00:07:25,800 --> 00:07:29,539
It has a very good documentation that you can read online.

00:07:30,780 --> 00:07:34,640
And it's also simple to use and it performs very well.

00:07:37,530 --> 00:07:42,110
Now we are going to see an example of a map integrated in a Django project.

00:07:42,810 --> 00:07:45,260
We will use a basic Django project

00:07:45,690 --> 00:07:50,869
that everyone maybe know and I took it from the official documentation

00:07:52,590 --> 00:07:58,790
We are seeing an extract from a blog application in the "Making Queries" section of the documentation.

00:07:59,460 --> 00:08:03,919
I read it a lot of time and I think also you read it a lot of time.

00:08:05,280 --> 00:08:08,390
We have a blog model, very simple,

00:08:09,750 --> 00:08:11,750
another model for Authors

00:08:15,240 --> 00:08:17,240
and then we have an Entry model.

00:08:17,520 --> 00:08:21,529
The Entry model has a headline, it's connected to a Blog

00:08:22,280 --> 00:08:24,540
and it's related to one or more Authors.

00:08:28,080 --> 00:08:31,300
After installing all the required system packages

00:08:31,300 --> 00:08:35,360
the first step to add the web map in the blog project is

00:08:35,800 --> 00:08:39,700
is to configure the settings file

00:08:40,160 --> 00:08:44,420
We need only to add the GeoDjango module in the installed apps.

00:08:47,720 --> 00:08:54,400
Then we have to update the default database engine and use PostGIS instead of Postgres.

00:08:59,960 --> 00:09:02,260
But to use PostGIS

00:09:02,260 --> 00:09:07,460
it's necessary to create its extension on your Postgres database.

00:09:09,560 --> 00:09:14,740
To do that we can simply generate an empty migration file for the blog application.

00:09:17,760 --> 00:09:25,189
Then we can use the Create Extension function from the Postgres contrib module, as you can see here.

00:09:29,340 --> 00:09:33,200
Ok, now we are working on models.

00:09:33,200 --> 00:09:35,840
After the PostGIS activation

00:09:36,420 --> 00:09:41,240
We can add a point field in our Entry model to store a valid location.

00:09:41,240 --> 00:09:45,260
I omitted the other fields we saw before.

00:09:47,600 --> 00:09:52,460
I also added the Lat/Lng property to the model

00:09:52,660 --> 00:09:59,700
because it's useful to have a coordinates of our location in a list form when you work with Leaflet JS.

00:10:03,260 --> 00:10:06,460
We can add a location to our entries using the admin.

00:10:08,460 --> 00:10:15,530
We are going to use a different class than usual, it's the OpenStreetMap Geo Admin.

00:10:16,260 --> 00:10:19,400
imported from GeoDjango.

00:10:21,060 --> 00:10:26,520
We have defined an admin section of our Entry model as you can see here.

00:10:27,740 --> 00:10:31,660
We have set only the default values for latitude, longitude

00:10:32,160 --> 00:10:34,340
and for the default zoom level

00:10:36,600 --> 00:10:38,600
Ok. After doing that

00:10:39,540 --> 00:10:41,930
a very nice map will show up in your admin page

00:10:44,540 --> 00:10:51,520
It's very useful and you can use it to edit your map and also to edit an area

00:10:51,640 --> 00:10:54,680
or going around, zooming and so on.

00:10:59,880 --> 00:11:06,080
Okay, now we have added a lot of points in our project using the admin

00:11:08,010 --> 00:11:14,210
When we have a lot of entries with points we can show them in our web map page.

00:11:14,820 --> 00:11:18,739
And to do that we are going to use a generic class-based view from Django.

00:11:21,000 --> 00:11:26,809
We need a List view with a filter that returns only entries having a valid point.

00:11:29,190 --> 00:11:32,929
And then we can connect this view to our URL path.

00:11:36,870 --> 00:11:41,960
Finally, to show the map we need a simple HTML page with basic tags.

00:11:43,170 --> 00:11:45,710
We have to link the Leaflet stylesheet

00:11:46,380 --> 00:11:49,400
and the Leaflet JavaScript file to the header section.

00:11:52,650 --> 00:11:57,319
The other mandatory step is to add a DIV with a specific ID.

00:11:57,959 --> 00:12:04,759
If you want, you can specify some style rules like width or height, add some titles and so on.

00:12:06,480 --> 00:12:11,480
We have an empty JavaScript section, but we will see it in a bit.

00:12:13,890 --> 00:12:20,749
Here you can see the JavaScript code that completes our page and draws our map.

00:12:23,370 --> 00:12:29,419
We only have to define our map by setting the default latitude and longitude and the some level.

00:12:30,080 --> 00:12:32,720
This is the point for Copenhagen.

00:12:33,860 --> 00:12:40,300
Then we have to add the tile layer and here we are using the one from Open Street Map.

00:12:41,970 --> 00:12:43,970
As a final step

00:12:44,910 --> 00:12:50,719
We cycle on all the entries that we received from the views

00:12:51,440 --> 00:12:54,600
and we create a marker on the map for each of them.

00:12:57,980 --> 00:13:02,380
We've used the Entry's string representation in the marker popup message.

00:13:03,570 --> 00:13:07,479
You can add also other things, but that's the basic step you can do.

00:13:08,480 --> 00:13:11,140
After doing all this code

00:13:12,110 --> 00:13:14,110
This is the final result

00:13:15,320 --> 00:13:20,679
It's a basic map page and as you can see we have two markers

00:13:22,040 --> 00:13:28,700
One for the location of this conference and other one for the location of the Sprints with the pop-up opened.

00:13:30,800 --> 00:13:36,220
Okay, now we have reached the Goal of adding a web map in a small Django project

00:13:36,740 --> 00:13:39,780
in this case the Django project was the

00:13:39,880 --> 00:13:42,640
the Blog app from the Django documentation

00:13:44,200 --> 00:13:51,000
But, what can we do when the project is bigger and maybe it's already deployed in production.

00:13:52,610 --> 00:13:54,610
Let's see

00:13:55,550 --> 00:14:00,729
In our case, in 20tab, the already deployed website was

00:14:01,480 --> 00:14:03,940
"Mer et Demeures" (French). Sorry for my french.

00:14:04,980 --> 00:14:11,340
It's an international real estate website that advertise coastal properties close to the sea

00:14:11,990 --> 00:14:13,990
both for sale and rental.

00:14:15,560 --> 00:14:20,919
The website has been online since 2014 and it's translated in 8 languages.

00:14:21,620 --> 00:14:23,710
At the moment it contains almost

00:14:25,130 --> 00:14:31,570
100,000 active advertisement in about 40 countries spread over 6 continents.

00:14:35,660 --> 00:14:40,929
This is the screenshot of the mobile version when we start working on the project

00:14:42,770 --> 00:14:45,879
Its first version was developed with

00:14:46,520 --> 00:14:51,520
Django 1.6 and it runs on Python 2.7

00:14:52,220 --> 00:14:58,360
The data are stored in Postgres 9.3 and there was only one location field in the database

00:14:59,980 --> 00:15:02,320
Unfortunately, it's stored as a text field.

00:15:04,580 --> 00:15:10,260
Leaflet JS 1.0 was used to show a static data and wiew-only map

00:15:11,500 --> 00:15:14,100
There is no user interaction at all

00:15:17,360 --> 00:15:23,380
That one is the screenshot of the mobile version after the introduction of the interactive map.

00:15:24,160 --> 00:15:30,900
It was developed with Django 2.1, GeoDjango and Python 3.6

00:15:32,060 --> 00:15:37,820
The data is stored in Postgres 10 and the spatial data is stored in geographic fields

00:15:38,090 --> 00:15:40,209
Thanks to PostGIS 2.4

00:15:41,330 --> 00:15:48,280
Leaflet JS 1.4 was used to allow user to display and interact with dynamic map.

00:15:52,720 --> 00:15:55,440
This is some code from our project.

00:15:55,840 --> 00:15:59,940
This is only an extract of two models from our project

00:16:01,360 --> 00:16:04,880
We have imported 2 fields from GeoDjango

00:16:05,140 --> 00:16:10,560
In the City model we used a multi polygon field to store the borders data.

00:16:12,260 --> 00:16:19,689
In the Ad model, we referenced the City with a foreign key and added a point field to store our location.

00:16:21,280 --> 00:16:28,460
The real models has other fields but is not necessary to show there for our goal.

00:16:34,160 --> 00:16:36,920
We see before a basic approach

00:16:37,160 --> 00:16:38,560
but in our project

00:16:39,040 --> 00:16:43,920
we needed a more complex approach to serve spatial data because we have a lot of

00:16:44,480 --> 00:16:47,560
points and a lot of coastal properties

00:16:48,230 --> 00:16:52,240
We decided to build a RESTful API with Django REST framework.

00:16:53,690 --> 00:17:01,030
As addons we used Django REST framework GIS for geographical support and Django filter for filtering support.

00:17:02,330 --> 00:17:06,489
After the installation, we needed to add them to the installed apps in setting.

00:17:09,040 --> 00:17:14,040
The first step to build our API is to write a serializer.

00:17:15,380 --> 00:17:22,940
We inherited it from Geo Feature Model Serializer, it's imported from Django Rest framework GIS.

00:17:25,280 --> 00:17:30,459
In order to define our serializer we had to specify the model,

00:17:34,260 --> 00:17:36,260
The geo field in our model

00:17:37,530 --> 00:17:42,319
and the additional fields we want to add in the final GeoJSON result.

00:17:46,620 --> 00:17:48,920
Now we need to write the view.

00:17:49,890 --> 00:17:54,259
We imported the read-only model viewset for Django REST framework

00:17:55,260 --> 00:17:57,260
And also the serializer we wrote before

00:18:00,630 --> 00:18:08,359
Our viewset inherit from the first one and in the queryset we filtered all the ads with a location

00:18:11,960 --> 00:18:18,340
The boundbox filter and the filter backend allow us to filter the API using a bound box.

00:18:20,280 --> 00:18:22,180
But what's a box ?

00:18:22,460 --> 00:18:26,840
In this case the bound box is the map area

00:18:27,300 --> 00:18:31,400
The bound box is an area defined by two latitudes and longitudes

00:18:33,920 --> 00:18:40,380
and it permits you to do more requests when you move your map

00:18:40,580 --> 00:18:44,540
because you are changing the latitude and longitude.

00:18:46,880 --> 00:18:48,880
Okay now the last step

00:18:51,780 --> 00:18:59,660
After the viewset definition we imported the default Django REST framework router to register our markers path.

00:19:02,670 --> 00:19:10,639
As I said before, we will get data from the API in the path every time we will we will move our map and Leaflet

00:19:12,000 --> 00:19:15,410
are sending us the new bound box

00:19:17,280 --> 00:19:19,910
defined by you, moving on the map.

00:19:24,000 --> 00:19:28,189
At the end of the step, calling our API

00:19:28,530 --> 00:19:32,269
You will receive our GeoJSON data

00:19:34,800 --> 00:19:38,599
This is a very small extract of a GeoJSON with one point

00:19:40,140 --> 00:19:44,180
You can see only its coordinates, its ID and no additional properties

00:19:44,400 --> 00:19:52,780
but in the real project you can see a lot of them and you can add also a lot of properties to

00:19:53,660 --> 00:19:55,660
customize your pop-up in your map

00:19:58,370 --> 00:20:05,500
After the coding part I'd like to show you a screencast of the interactions with the map

00:20:06,860 --> 00:20:10,660
because the new version of the website is not deployed yet

00:20:12,710 --> 00:20:14,710
Let's see if it works

00:20:17,660 --> 00:20:19,660
Okay, it started

00:20:20,780 --> 00:20:23,829
As you can see we have a list of properties

00:20:25,970 --> 00:20:31,180
We have clusters in the left, on the map and they are connected because they highlight when you

00:20:32,090 --> 00:20:34,209
move your cursor over it

00:20:35,000 --> 00:20:41,440
At the same time you can filter all your properties and you can filter using different

00:20:43,310 --> 00:20:45,310
things, like the type

00:20:46,850 --> 00:20:49,000
like the distance from the coast

00:20:51,410 --> 00:20:55,899
as you can see the cluster are updating, also the number

00:20:56,540 --> 00:20:59,019
in the top of the list are updating

00:21:01,700 --> 00:21:03,700
and the list itself

00:21:05,630 --> 00:21:09,729
Everything is done with Leaflet that are calling our API

00:21:15,800 --> 00:21:19,779
The list is still connected with our maps and you can

00:21:20,090 --> 00:21:24,699
reset all the filters and you can hide it to use another approach

00:21:25,400 --> 00:21:30,160
You can use our auto-complete input, that start after the

00:21:30,710 --> 00:21:34,030
third characters you add to it and you can change

00:21:34,700 --> 00:21:36,700
your location on the map

00:21:38,300 --> 00:21:41,019
We've went in Sardinia

00:21:41,720 --> 00:21:46,030
as you can see the list is updated and also this is the

00:21:46,670 --> 00:21:48,670
custom pop-up

00:21:51,050 --> 00:21:57,699
You can also move your map or zooming out and you start seeing all the cluster

00:21:58,420 --> 00:22:00,420
showing up

00:22:17,900 --> 00:22:20,120
Now I want to show you again this photo

00:22:21,260 --> 00:22:26,440
It show a typical building on the Abruzzo coast and its name is Trabocco.

00:22:26,740 --> 00:22:31,180
I choose this photo because starting from photo like that,

00:22:31,600 --> 00:22:37,260
I developed my interest in web mapping and also because in our Use case project

00:22:38,730 --> 00:22:42,410
our use case project was about coastal properties

00:22:43,740 --> 00:22:47,260
But now let's summarize what I've shown you

00:22:49,560 --> 00:22:56,240
It's possible to have an out-of-the-box web map with GeoDjango, PostGIS and Lefalet JS.

00:22:56,820 --> 00:23:02,390
It's possible to execute spatial queries and relational queries at the same time.

00:23:03,270 --> 00:23:05,599
as we saw in the in the screencast

00:23:07,890 --> 00:23:12,229
Your stack will be composed by Django and Postgre only

00:23:15,809 --> 00:23:23,149
Thanks to this solution we are able to implement also advanced features like backend clusterization

00:23:25,200 --> 00:23:28,580
Administrative levels and dynamic spatial entity.

00:23:33,120 --> 00:23:39,859
I want to share with you all the resources that I used to prepare this talk and to develop the web map.

00:23:41,660 --> 00:23:45,140
Whenever possible we referred the official documentation and

00:23:46,760 --> 00:23:52,160
with the documentation of all packages: GeoDjango, PostGIS and Leaflet.

00:23:52,920 --> 00:23:56,180
and we also referred to the code repository itself.

00:24:00,140 --> 00:24:02,120
Now some acknowledgments

00:24:02,320 --> 00:24:09,500
I would like to thank Mer et Demeures for trusting us to refactor and improve their website.

00:24:10,110 --> 00:24:15,620
I would like to thank 20tab for giving me the opportunity to be with you all.

00:24:16,559 --> 00:24:22,219
By the way, they are looking for a Django developer. So you can apply using their email address.

00:24:24,780 --> 00:24:26,780
At the end

00:24:27,620 --> 00:24:32,200
You can use this QR code to visit the talk section of my website

00:24:33,420 --> 00:24:38,940
You can find there the slides, that are already uploaded

00:24:39,560 --> 00:24:41,560
you can find the code sample

00:24:42,630 --> 00:24:45,950
and all the resources URLs

00:24:49,170 --> 00:24:56,509
I ask you to add some comments or questions about this topic or about the talk itself.

00:24:59,820 --> 00:25:10,300
Both the slides and the content on my website are released under Creative Commons License so you can use it and share with everyone.

00:25:11,360 --> 00:25:15,880
Thank you, you can contact me on my website or on my Twitter account.

00:25:24,240 --> 00:25:29,060
Thank you so much we have two minutes for questions that could be about ...

00:25:33,800 --> 00:25:39,660
Submit questions online at #djangoconqa

00:25:39,840 --> 00:25:43,980
and I are see you on the IRC

00:25:44,240 --> 00:25:46,240
at #djangocon

00:25:48,740 --> 00:25:52,040
We can do there we go got one question

00:26:05,720 --> 00:26:10,870
Thanks for your talk. I just wanted to know entering data are you using exclusively

00:26:11,510 --> 00:26:13,989
Django admin or did you write your own

00:26:14,660 --> 00:26:22,119
editor based on Leflet JS, because the Django admin doesn't use internally Lefalet JS

00:26:23,240 --> 00:26:28,059
Our customer have a lot of sources for the data. So they have a lot of

00:26:29,630 --> 00:26:32,319
importing commands that they used to

00:26:33,400 --> 00:26:37,040
take the data from other customers.

00:26:37,580 --> 00:26:41,740
I show you only the admin

00:26:41,980 --> 00:26:52,680
section because it's easy to fix some points. A lot of time customer send misplaced point and then

00:26:53,060 --> 00:26:55,060
the operator have to

00:26:55,100 --> 00:27:03,580
go there and fix it with the very exact point but you can import your data in many ways.

00:27:05,120 --> 00:27:12,460
It's only a normal field so you can import it like JSON, CSV, everything.

00:27:13,180 --> 00:27:15,180

YouTube URL: https://www.youtube.com/watch?v=aEivCtavw-I


