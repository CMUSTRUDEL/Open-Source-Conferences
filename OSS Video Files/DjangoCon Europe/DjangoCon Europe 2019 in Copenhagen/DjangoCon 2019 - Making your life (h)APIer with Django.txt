Title: DjangoCon 2019 - Making your life (h)APIer with Django
Publication date: 2019-04-23
Playlist: DjangoCon Europe 2019 in Copenhagen
Description: 
	https://2019.djangocon.eu/talks/making-your-life-hapier-with-django/

By Emma Delescolle - https://twitter.com/EmmaDelescolle

Audio glitches in this video: The first 3 videos of the conference had audio quality glitches (small sound skips), which were fixed in subsequent talks. We apologise.
Captions: 
	00:00:00,000 --> 00:00:05,490
for lunch and that will start at 12:45

00:00:03,319 --> 00:00:06,000
so now for the first talk of this

00:00:05,490 --> 00:00:09,330
segment

00:00:06,000 --> 00:00:22,740
we have Emma del skull with making your

00:00:09,330 --> 00:00:28,710
life a PIR with Django okay I'm going to

00:00:22,740 --> 00:00:30,060
wait for the slide Steve so yeah that's

00:00:28,710 --> 00:00:31,830
crazy it's all the way to you to

00:00:30,060 --> 00:00:34,559
pronounce the title because I honestly

00:00:31,830 --> 00:00:35,010
had no idea how to pronounce it it looks

00:00:34,559 --> 00:00:37,829
good

00:00:35,010 --> 00:00:40,430
written down but I was not sure how to

00:00:37,829 --> 00:00:40,430
pronounce that

00:00:45,020 --> 00:00:51,329
okay so making your wife happy hour with

00:00:47,940 --> 00:00:55,079
Django first of all who am i my name is

00:00:51,329 --> 00:00:58,680
Emma I am a co-founder of a small

00:00:55,079 --> 00:01:04,049
Belgian company named Levitt and

00:00:58,680 --> 00:01:06,110
I should is this better okay I've had

00:01:04,049 --> 00:01:09,720
the honor to be chosen it's a DSF

00:01:06,110 --> 00:01:12,750
individual member not too long ago

00:01:09,720 --> 00:01:14,850
I'm also the maintainer of these two

00:01:12,750 --> 00:01:16,350
projects the our schema adapter that

00:01:14,850 --> 00:01:21,750
we're going to be talking about today

00:01:16,350 --> 00:01:26,009
and I'm your CLI equalities so making

00:01:21,750 --> 00:01:27,780
your life a PIR I guess you all know

00:01:26,009 --> 00:01:31,439
that we are going to be talking about

00:01:27,780 --> 00:01:35,880
API today but first of all what is an

00:01:31,439 --> 00:01:42,000
API so according to Wikipedia this is

00:01:35,880 --> 00:01:43,500
what an API is so in short it is a set

00:01:42,000 --> 00:01:46,140
of clearly defined methods of

00:01:43,500 --> 00:01:50,009
communication among various components

00:01:46,140 --> 00:01:52,170
of a software it could mean it can make

00:01:50,009 --> 00:01:56,130
development easier if it is well written

00:01:52,170 --> 00:01:58,950
and it does not only apply to the web

00:01:56,130 --> 00:02:02,430
although today works mainly going to be

00:01:58,950 --> 00:02:03,730
talking about the web so when we talk

00:02:02,430 --> 00:02:07,480
about the web and

00:02:03,730 --> 00:02:10,660
api's we talk about usually rest api's

00:02:07,480 --> 00:02:14,860
there was recently things like graphic

00:02:10,660 --> 00:02:17,050
you'll that have been introduced to the

00:02:14,860 --> 00:02:21,940
scene but here we're here to talk about

00:02:17,050 --> 00:02:24,580
first api's with django and usually what

00:02:21,940 --> 00:02:27,220
does the rest api with Django and Django

00:02:24,580 --> 00:02:32,950
rest framework look it looks like well

00:02:27,220 --> 00:02:35,350
it's set of views one set for

00:02:32,950 --> 00:02:39,040
collections where you can get and post

00:02:35,350 --> 00:02:41,890
so for example here we have endpoint for

00:02:39,040 --> 00:02:44,950
products so slash API slash project you

00:02:41,890 --> 00:02:47,050
can get do a get coal on that and you

00:02:44,950 --> 00:02:48,880
will get a list of products or you can

00:02:47,050 --> 00:02:51,730
do a post one on that to create a new

00:02:48,880 --> 00:02:54,340
products you also have a second few

00:02:51,730 --> 00:02:58,750
which is the detailed view similar to

00:02:54,340 --> 00:03:01,810
Django detailed view for just displaying

00:02:58,750 --> 00:03:04,300
web page and on this detail view

00:03:01,810 --> 00:03:08,620
so it's slash API slash products slash

00:03:04,300 --> 00:03:11,080
the ID and you usually have four methods

00:03:08,620 --> 00:03:13,150
on that yet that will give you the

00:03:11,080 --> 00:03:17,380
details of the product all the

00:03:13,150 --> 00:03:21,070
information but that is used to update

00:03:17,380 --> 00:03:24,070
the entire product so all the fields of

00:03:21,070 --> 00:03:26,980
the products patch which is used to

00:03:24,070 --> 00:03:30,940
update only certain fields of that item

00:03:26,980 --> 00:03:33,940
or delete which is used to be do to

00:03:30,940 --> 00:03:38,200
delete the item if you talk to people

00:03:33,940 --> 00:03:40,870
who like restaurants and they want you

00:03:38,200 --> 00:03:43,000
to ask what they grow a RESTful API

00:03:40,870 --> 00:03:45,670
they will also tell you that it's very

00:03:43,000 --> 00:03:50,620
important that your API is discoverable

00:03:45,670 --> 00:03:53,320
we will come back to that a bit later so

00:03:50,620 --> 00:03:55,330
why do we need REST API says Django

00:03:53,320 --> 00:03:57,700
project after all what we want to do is

00:03:55,330 --> 00:04:01,330
display web page we don't want the APNs

00:03:57,700 --> 00:04:03,680
well you kind of to you use sometimes

00:04:01,330 --> 00:04:06,769
wrong to api's to add advanced

00:04:03,680 --> 00:04:08,599
components on your page or you want to

00:04:06,769 --> 00:04:13,030
make your data available to third-party

00:04:08,599 --> 00:04:15,859
applications that's usually that's been

00:04:13,030 --> 00:04:19,130
for a long time the first reason why

00:04:15,859 --> 00:04:21,829
people made api's for their products for

00:04:19,130 --> 00:04:25,220
the website like for example if you have

00:04:21,829 --> 00:04:27,680
a weather website and you have a basic

00:04:25,220 --> 00:04:29,930
website where you can enter city and the

00:04:27,680 --> 00:04:32,810
website will tell you the weather in

00:04:29,930 --> 00:04:36,560
your city that's really nice but if they

00:04:32,810 --> 00:04:38,630
have an API if this an API does open you

00:04:36,560 --> 00:04:41,599
can what you can do is you can make

00:04:38,630 --> 00:04:44,360
requests to that API and for example at

00:04:41,599 --> 00:04:47,120
the local weather to your favorite shell

00:04:44,360 --> 00:04:49,340
and so you always waste know what

00:04:47,120 --> 00:04:51,590
weather it is it is outside without

00:04:49,340 --> 00:04:55,130
having to look through the window this

00:04:51,590 --> 00:05:00,110
is why people are laughing but I know

00:04:55,130 --> 00:05:05,509
people we've done that but more recently

00:05:00,110 --> 00:05:09,139
there's been other uses for api's mobile

00:05:05,509 --> 00:05:12,380
devices has made api s-- much more

00:05:09,139 --> 00:05:14,919
popular and needed because in whether

00:05:12,380 --> 00:05:18,650
you have an android or you have an

00:05:14,919 --> 00:05:20,630
iphone these are two completely separate

00:05:18,650 --> 00:05:23,080
client two different kinds that need to

00:05:20,630 --> 00:05:26,030
interact i lost

00:05:23,080 --> 00:05:28,400
let me interact is the same set of data

00:05:26,030 --> 00:05:31,220
and be able to retrieve the same data

00:05:28,400 --> 00:05:34,099
update the same data and so if you have

00:05:31,220 --> 00:05:37,580
a nice api you will be able to use the

00:05:34,099 --> 00:05:40,610
same api with both clients something

00:05:37,580 --> 00:05:45,320
that is also fairly new its web

00:05:40,610 --> 00:05:49,639
front-end JavaScript frameworks

00:05:45,320 --> 00:05:52,900
libraries like react you amber

00:05:49,639 --> 00:05:57,190
and those are also making use of api's

00:05:52,900 --> 00:05:59,930
and also we want to use api's and this

00:05:57,190 --> 00:06:02,659
client-server interaction because we

00:05:59,930 --> 00:06:05,449
know it works we've been using that for

00:06:02,659 --> 00:06:07,490
years somebody else unfortunately I

00:06:05,449 --> 00:06:10,159
don't remember the name but in another

00:06:07,490 --> 00:06:11,479
conference state that's working with

00:06:10,159 --> 00:06:14,990
computers in

00:06:11,479 --> 00:06:17,870
it's a bit like a pendulum at some point

00:06:14,990 --> 00:06:22,159
at the in the 70s we had mainframe like

00:06:17,870 --> 00:06:25,370
the IBM as/400 and you had one mainframe

00:06:22,159 --> 00:06:28,159
one big computer on the under premises

00:06:25,370 --> 00:06:31,520
and everybody would have terminals would

00:06:28,159 --> 00:06:34,129
have ten clients will switch they would

00:06:31,520 --> 00:06:37,279
connect to the to the server and then we

00:06:34,129 --> 00:06:39,349
we kind of went the other way and

00:06:37,279 --> 00:06:40,909
everybody had a desktop computer and

00:06:39,349 --> 00:06:45,219
you're hanging in the middle and we are

00:06:40,909 --> 00:06:45,219
going to maybe find some balance

00:06:45,849 --> 00:06:52,819
but yeah so API was Django so when we

00:06:49,639 --> 00:06:59,029
talk about API with Django we usually

00:06:52,819 --> 00:07:03,139
talk about Django rest framework Django

00:06:59,029 --> 00:07:05,749
rest framework is a special place in the

00:07:03,139 --> 00:07:09,229
Django ecosystem because it is one of

00:07:05,749 --> 00:07:12,499
the only applications that is recognized

00:07:09,229 --> 00:07:16,430
that is recognized by the core team as

00:07:12,499 --> 00:07:22,249
being part of Django even if slightly

00:07:16,430 --> 00:07:24,979
outside and right now most people would

00:07:22,249 --> 00:07:27,110
not think about using something else but

00:07:24,979 --> 00:07:30,620
in the beginning there was also tasty

00:07:27,110 --> 00:07:35,149
pie so I don't know how many of you know

00:07:30,620 --> 00:07:39,409
about this to buy a few hands yeah so

00:07:35,149 --> 00:07:41,029
tasty pie used to be in concurrence with

00:07:39,409 --> 00:07:45,039
Django rest framework

00:07:41,029 --> 00:07:49,069
it seems built differently it's built

00:07:45,039 --> 00:07:53,539
similarly to you some rest api for other

00:07:49,069 --> 00:07:55,759
frameworks like rails and one of the

00:07:53,539 --> 00:07:58,069
reasons that it's might have been

00:07:55,759 --> 00:08:02,870
popular at some point that is that it

00:07:58,069 --> 00:08:05,240
was easy to prototype things with it's

00:08:02,870 --> 00:08:09,529
required less code and it was faster to

00:08:05,240 --> 00:08:11,149
prototype things so what does the code

00:08:09,529 --> 00:08:16,909
for an API with Django rest framework

00:08:11,149 --> 00:08:20,990
look like it looks like this so for

00:08:16,909 --> 00:08:22,320
starters you usually don't skip to the

00:08:20,990 --> 00:08:25,290
next slide

00:08:22,320 --> 00:08:28,470
you usually have for each model you

00:08:25,290 --> 00:08:31,830
usually have to create a serializer and

00:08:28,470 --> 00:08:34,140
tell tell its what model your

00:08:31,830 --> 00:08:36,630
serializing what feels you have this is

00:08:34,140 --> 00:08:39,870
the minimal information you also need

00:08:36,630 --> 00:08:41,610
few sets well you don't need to view

00:08:39,870 --> 00:08:44,730
said this is a way to do it you could

00:08:41,610 --> 00:08:47,850
have a set of different different views

00:08:44,730 --> 00:08:50,040
but one way to do it the minimal way is

00:08:47,850 --> 00:08:52,529
to have a view set and provide that view

00:08:50,040 --> 00:08:57,029
set with a query set and a serializer

00:08:52,529 --> 00:09:03,570
and then you are left with registering

00:08:57,029 --> 00:09:07,800
that view set in the urls if we want to

00:09:03,570 --> 00:09:09,710
just for information sake compared to

00:09:07,800 --> 00:09:12,779
what you would have been doing with

00:09:09,710 --> 00:09:15,990
testify with testify you would just have

00:09:12,779 --> 00:09:18,390
had to declare a resource per model and

00:09:15,990 --> 00:09:23,060
then a register that resource in the

00:09:18,390 --> 00:09:26,040
urls it's less code but it's also

00:09:23,060 --> 00:09:32,040
sometimes perceived as a bit more magic

00:09:26,040 --> 00:09:34,709
and less flexible but yeah I love Django

00:09:32,040 --> 00:09:36,660
rest framework but one day I found

00:09:34,709 --> 00:09:38,940
myself in the position of having to

00:09:36,660 --> 00:09:42,690
write a new application this application

00:09:38,940 --> 00:09:47,339
at about 50 models that I took the time

00:09:42,690 --> 00:09:50,520
to write and to prepare and we needed to

00:09:47,339 --> 00:09:53,520
create an API because this was an API

00:09:50,520 --> 00:09:57,270
based application and I really didn't

00:09:53,520 --> 00:09:57,930
want to write 50 serializers 50 view

00:09:57,270 --> 00:10:01,680
sets

00:09:57,930 --> 00:10:07,589
50 URLs and I'm a bit lazy that way so I

00:10:01,680 --> 00:10:10,860
started thinking well what if I could do

00:10:07,589 --> 00:10:13,980
that with what is I could just get away

00:10:10,860 --> 00:10:15,630
with Django admin I mean with Django

00:10:13,980 --> 00:10:17,820
admin you want to create an admin for

00:10:15,630 --> 00:10:21,150
model all you have to do is to

00:10:17,820 --> 00:10:25,350
registered that model you can do either

00:10:21,150 --> 00:10:28,080
you can create a class with a decorator

00:10:25,350 --> 00:10:29,790
or you can just register directly the

00:10:28,080 --> 00:10:30,630
model just don't say anything this is a

00:10:29,790 --> 00:10:32,490
minimal thing

00:10:30,630 --> 00:10:34,440
do one of the great thing about the

00:10:32,490 --> 00:10:36,960
admin is that I don't have to create a

00:10:34,440 --> 00:10:39,360
different URL for each model that I want

00:10:36,960 --> 00:10:41,910
to expose I just need to expose the URL

00:10:39,360 --> 00:10:44,880
for the admin and everything is done and

00:10:41,910 --> 00:10:47,700
if I'm really being really really lazy I

00:10:44,880 --> 00:10:50,610
could just import the the models module

00:10:47,700 --> 00:10:53,850
from my application and just loop

00:10:50,610 --> 00:10:56,160
through all the things it exposes look

00:10:53,850 --> 00:10:57,960
if it's a bubble and just register that

00:10:56,160 --> 00:11:00,540
and and don't do anything else that's

00:10:57,960 --> 00:11:03,300
relying of God I would I would be really

00:11:00,540 --> 00:11:07,350
happy to you to be able to you to do

00:11:03,300 --> 00:11:11,430
that and so this is the our schema

00:11:07,350 --> 00:11:14,190
adapter of started the ideas for the

00:11:11,430 --> 00:11:18,420
earth schema adapter started I wanted to

00:11:14,190 --> 00:11:22,320
be able to register to create some API

00:11:18,420 --> 00:11:25,680
as fast as I would have been able to

00:11:22,320 --> 00:11:27,710
create some evidence and so this is the

00:11:25,680 --> 00:11:31,830
code that you would need to write to

00:11:27,710 --> 00:11:35,430
create Django rest framework API with

00:11:31,830 --> 00:11:38,070
the our schema adapter this works very

00:11:35,430 --> 00:11:40,170
similarly to the admin as you can

00:11:38,070 --> 00:11:43,140
register a model either by using a

00:11:40,170 --> 00:11:45,990
decorator or on the special class or you

00:11:43,140 --> 00:11:50,100
can just register a model directly on

00:11:45,990 --> 00:11:53,250
the router and you just need to add this

00:11:50,100 --> 00:11:56,940
rotor once in the URL and then you have

00:11:53,250 --> 00:11:59,280
a fully working basic API that will do

00:11:56,940 --> 00:12:01,680
crud for all those models no

00:11:59,280 --> 00:12:03,690
customizations all fields are exposed

00:12:01,680 --> 00:12:05,910
everything is writable this is not what

00:12:03,690 --> 00:12:08,070
you want for production it for

00:12:05,910 --> 00:12:11,970
production application but it can get

00:12:08,070 --> 00:12:15,720
you started really quickly now of course

00:12:11,970 --> 00:12:19,020
fast prototyping is nice but you need to

00:12:15,720 --> 00:12:21,900
be able to customize that this was one

00:12:19,020 --> 00:12:24,420
of the problems I went mentioned with my

00:12:21,900 --> 00:12:27,930
apparently people were not seeing

00:12:24,420 --> 00:12:30,090
clearly how how to customize dirting it

00:12:27,930 --> 00:12:33,870
was easier to do with Django rest

00:12:30,090 --> 00:12:35,850
framework but so here with the endpoint

00:12:33,870 --> 00:12:37,100
class that I've been using to to

00:12:35,850 --> 00:12:39,470
register my my

00:12:37,100 --> 00:12:43,220
points I can do some customizations to

00:12:39,470 --> 00:12:46,400
and that customization looks a lot like

00:12:43,220 --> 00:12:48,740
what it would be working with Nachman

00:12:46,400 --> 00:12:53,240
class over familiar with that it also

00:12:48,740 --> 00:12:57,490
uses the same terms as the s Django rest

00:12:53,240 --> 00:12:57,490
framework uses in some of its classes

00:12:58,330 --> 00:13:07,240
but yes what this n1 class it's it's not

00:13:03,560 --> 00:13:14,120
just that it also hides some factories

00:13:07,240 --> 00:13:16,160
so what what you can do is because when

00:13:14,120 --> 00:13:17,930
you look at a sphere eliezer for example

00:13:16,160 --> 00:13:19,700
when you want to write a Django rest

00:13:17,930 --> 00:13:21,860
framework serializer the first thing you

00:13:19,700 --> 00:13:23,660
have to say if a this is a serializable

00:13:21,860 --> 00:13:26,330
for that what all I want to expose those

00:13:23,660 --> 00:13:29,390
fields and you have those details that

00:13:26,330 --> 00:13:31,370
are a bit we don't and sometimes it can

00:13:29,390 --> 00:13:34,670
feel a bit redundant and that could be

00:13:31,370 --> 00:13:37,640
replaced by a factory so for example

00:13:34,670 --> 00:13:40,070
here to create an STD realizer I'm using

00:13:37,640 --> 00:13:44,960
a serializer factory that just takes the

00:13:40,070 --> 00:13:46,910
models and the domain serializer does

00:13:44,960 --> 00:13:51,170
not have this information of what model

00:13:46,910 --> 00:13:54,620
it is for what field it exposes because

00:13:51,170 --> 00:14:00,020
this is this factory is going to be set

00:13:54,620 --> 00:14:07,610
into my endpoint class I think I skipped

00:14:00,020 --> 00:14:09,770
a slide here in my product endpoint I've

00:14:07,610 --> 00:14:11,960
got a base to rely so this is going to

00:14:09,770 --> 00:14:14,000
be fed into a factory that's going to

00:14:11,960 --> 00:14:19,220
fill in everything that I did not bother

00:14:14,000 --> 00:14:21,380
to fill in myself also this this

00:14:19,220 --> 00:14:25,810
endpoint class is is that it's not

00:14:21,380 --> 00:14:28,520
really magic it's just a wrapper around

00:14:25,810 --> 00:14:32,300
Django rest framework in a series of

00:14:28,520 --> 00:14:35,000
factories and those factories do very

00:14:32,300 --> 00:14:39,040
basic things like filling in the blanks

00:14:35,000 --> 00:14:39,040
that I was too lazy to fill in myself

00:14:39,500 --> 00:14:45,740
there was this base realizer there's

00:14:41,990 --> 00:14:47,180
also a base you set that you can provide

00:14:45,740 --> 00:14:51,110
to the endpoint

00:14:47,180 --> 00:14:53,900
and bass uses our work with the same

00:14:51,110 --> 00:14:55,790
principle as bass utilizers those are a

00:14:53,900 --> 00:14:58,730
few cells that I wanted to customize I

00:14:55,790 --> 00:15:00,650
wanted to customize method on the views

00:14:58,730 --> 00:15:03,170
that I wanted to do something special

00:15:00,650 --> 00:15:05,089
but I didn't want to bother to filling

00:15:03,170 --> 00:15:07,910
the information that I thought were

00:15:05,089 --> 00:15:08,630
obvious like the query set or the

00:15:07,910 --> 00:15:18,110
serializer

00:15:08,630 --> 00:15:20,990
I was going to be using and also fast

00:15:18,110 --> 00:15:25,460
prototyping for fast prototyping I was

00:15:20,990 --> 00:15:29,120
really looking forward to not having to

00:15:25,460 --> 00:15:30,980
write one URL per model that I wanted to

00:15:29,120 --> 00:15:34,070
expose because I still had those 50

00:15:30,980 --> 00:15:35,450
models - I wanted to expose so I wanted

00:15:34,070 --> 00:15:39,320
to have something where I could just

00:15:35,450 --> 00:15:41,750
stick one URL photo from my API and then

00:15:39,320 --> 00:15:45,230
everything else would be done

00:15:41,750 --> 00:15:47,690
automatically for me so since the admin

00:15:45,230 --> 00:15:49,820
was already doing that I decided that I

00:15:47,690 --> 00:15:52,580
wanted to do the same as the admin and

00:15:49,820 --> 00:15:56,630
he was do to discourage angle auto

00:15:52,580 --> 00:15:58,550
discovery processes so if you create in

00:15:56,630 --> 00:16:03,459
your application and endpoints the pie

00:15:58,550 --> 00:16:08,660
file it will be automatically loaded and

00:16:03,459 --> 00:16:10,459
register all your endpoints just as you

00:16:08,660 --> 00:16:13,370
would if you create it and then in the

00:16:10,459 --> 00:16:15,230
PI file and every admin class that is in

00:16:13,370 --> 00:16:27,830
there is going to get automatically

00:16:15,230 --> 00:16:30,040
added to your admin but remember we

00:16:27,830 --> 00:16:32,930
talked earlier about discoverability

00:16:30,040 --> 00:16:35,420
thus what what were we trying to do when

00:16:32,930 --> 00:16:37,610
when I was creating this application the

00:16:35,420 --> 00:16:40,760
this API based application the idea was

00:16:37,610 --> 00:16:43,250
to have a ten clients that didn't know

00:16:40,760 --> 00:16:46,670
anything about my application just knew

00:16:43,250 --> 00:16:48,740
how to log in and to access the API and

00:16:46,670 --> 00:16:50,720
I wanted this claim to be able to do

00:16:48,740 --> 00:16:58,100
everything so my API needed to be

00:16:50,720 --> 00:17:00,180
discoverable and so I was I needed to be

00:16:58,100 --> 00:17:05,100
able to expose some some more

00:17:00,180 --> 00:17:07,230
information and one way would usually

00:17:05,100 --> 00:17:10,439
when people talk about discoverability

00:17:07,230 --> 00:17:11,640
for an API what what there are the kind

00:17:10,439 --> 00:17:14,939
of things that they are expecting to see

00:17:11,640 --> 00:17:18,270
is this if you look here and you see for

00:17:14,939 --> 00:17:21,140
the category field we don't have just an

00:17:18,270 --> 00:17:25,679
ID we have a full URL to be able to

00:17:21,140 --> 00:17:29,400
access the API for that category and if

00:17:25,679 --> 00:17:31,620
we click on that well we will see the

00:17:29,400 --> 00:17:34,710
JSON for the category that this product

00:17:31,620 --> 00:17:37,890
belongs to which is nice it's very

00:17:34,710 --> 00:17:40,710
readable for humans no on the other side

00:17:37,890 --> 00:17:43,260
of the screen you have another example

00:17:40,710 --> 00:17:45,059
which is a to many relationship it could

00:17:43,260 --> 00:17:47,220
be one-to-many many-to-many it doesn't

00:17:45,059 --> 00:17:49,740
matter and we see here that we are

00:17:47,220 --> 00:17:52,590
starting to have a bit of a problem it's

00:17:49,740 --> 00:17:57,120
starting to be quite rebels because we

00:17:52,590 --> 00:17:59,970
have these five lengths to products the

00:17:57,120 --> 00:18:02,640
lengths are basically the same it's just

00:17:59,970 --> 00:18:05,280
one thing that changes it's the ID so

00:18:02,640 --> 00:18:08,130
maybe we could have something different

00:18:05,280 --> 00:18:11,040
like having some information about that

00:18:08,130 --> 00:18:15,090
field that we add the address for this

00:18:11,040 --> 00:18:17,250
API is slash API v1 slash category

00:18:15,090 --> 00:18:21,270
search products and then just have the

00:18:17,250 --> 00:18:23,730
ID which you can have in your Django

00:18:21,270 --> 00:18:26,730
rest framework API if you just choose a

00:18:23,730 --> 00:18:30,929
regular relationship field and not a

00:18:26,730 --> 00:18:33,510
hyperlink relationship fields and this

00:18:30,929 --> 00:18:36,210
kind of information there's already a

00:18:33,510 --> 00:18:37,920
place to get it in Django rest framework

00:18:36,210 --> 00:18:40,640
there is this thing that's called a

00:18:37,920 --> 00:18:45,990
metadata class and metadata class is

00:18:40,640 --> 00:18:48,000
what what writes the information that

00:18:45,990 --> 00:18:52,440
you will see when you do an options call

00:18:48,000 --> 00:18:54,750
to your end point to to the base URL of

00:18:52,440 --> 00:18:56,970
your endpoint so here this is the

00:18:54,750 --> 00:19:01,070
information we get for the products and

00:18:56,970 --> 00:19:04,500
as you can see we have some names

00:19:01,070 --> 00:19:07,500
description what it's accept what it

00:19:04,500 --> 00:19:10,320
birth we also have at the bottom of the

00:19:07,500 --> 00:19:12,630
screen a list of actions and for each of

00:19:10,320 --> 00:19:13,980
those actions we have a list of fields

00:19:12,630 --> 00:19:16,230
that didn't fit

00:19:13,980 --> 00:19:19,200
on the screen but the field I wanted to

00:19:16,230 --> 00:19:20,750
show is this one this one I wanted to

00:19:19,200 --> 00:19:24,240
show this Vil to you because

00:19:20,750 --> 00:19:28,440
unfortunately I don't find that really

00:19:24,240 --> 00:19:30,960
useful this tells me that my field is

00:19:28,440 --> 00:19:33,990
the fields for category that is the

00:19:30,960 --> 00:19:37,790
other type of field wow this is a

00:19:33,990 --> 00:19:40,350
surprise it's it's it's a field ok and

00:19:37,790 --> 00:19:43,049
well at least I know that it's required

00:19:40,350 --> 00:19:46,440
that it's not read-only and I have the

00:19:43,049 --> 00:19:48,450
label but I don't really have much

00:19:46,440 --> 00:19:51,030
useful information what what is this

00:19:48,450 --> 00:19:52,830
field what does it represent can I can I

00:19:51,030 --> 00:19:58,520
put some string in there can should I

00:19:52,830 --> 00:20:00,960
put some integer what what is it so I

00:19:58,520 --> 00:20:03,809
wanna treat you tomorrow wanted to

00:20:00,960 --> 00:20:07,320
expose more details so I started writing

00:20:03,809 --> 00:20:10,410
something else and right about now I

00:20:07,320 --> 00:20:12,780
have to make this disclaimer my personal

00:20:10,410 --> 00:20:15,330
framework front-end framework of choices

00:20:12,780 --> 00:20:18,419
amber so there are going to be some

00:20:15,330 --> 00:20:21,059
mentions of ember.js in the next few

00:20:18,419 --> 00:20:25,230
slides if you don't like amber it's ok

00:20:21,059 --> 00:20:27,030
what I'm going to say is valid for any

00:20:25,230 --> 00:20:29,850
other framework it's just that I have

00:20:27,030 --> 00:20:35,160
concrete examples with amber and not

00:20:29,850 --> 00:20:38,340
with other frameworks so as I was saying

00:20:35,160 --> 00:20:41,190
I wanted to write to create some some

00:20:38,340 --> 00:20:43,470
metadata and I wanted to be able to

00:20:41,190 --> 00:20:48,260
expose some different data in different

00:20:43,470 --> 00:20:53,280
circumstances so the or schema adapter

00:20:48,260 --> 00:20:57,000
provides this thing this is a metadata

00:20:53,280 --> 00:20:58,740
class and this metadata class can use

00:20:57,000 --> 00:21:01,049
different adapters and you can have a

00:20:58,740 --> 00:21:03,299
default adapter but from the command

00:21:01,049 --> 00:21:06,090
line or from different URLs or things

00:21:03,299 --> 00:21:09,059
you can decide to expose different types

00:21:06,090 --> 00:21:10,679
of the metadata at the same time so for

00:21:09,059 --> 00:21:13,049
example you could be exposing some

00:21:10,679 --> 00:21:15,120
metadata for an Amber application but

00:21:13,049 --> 00:21:16,830
you could also be at the same time with

00:21:15,120 --> 00:21:21,929
a different URL be exposing some

00:21:16,830 --> 00:21:26,340
metadata for react application and so

00:21:21,929 --> 00:21:29,370
since this data here is some me today

00:21:26,340 --> 00:21:32,279
for ember which is a full MVC framework

00:21:29,370 --> 00:21:36,679
so it has this notion of models and

00:21:32,279 --> 00:21:39,960
foreign keys and relationship I can

00:21:36,679 --> 00:21:43,350
provide this data and I can say hey this

00:21:39,960 --> 00:21:45,510
is not just the field the widget for

00:21:43,350 --> 00:21:48,330
this field should be a foreign key

00:21:45,510 --> 00:21:52,140
I also have the extra information of

00:21:48,330 --> 00:21:55,020
this related model and the name of the

00:21:52,140 --> 00:21:56,480
model so by putting the base API address

00:21:55,020 --> 00:21:58,830
plus the name of the model together

00:21:56,480 --> 00:22:02,309
amber is going to be able to get a list

00:21:58,830 --> 00:22:03,929
of categories so if I want to for

00:22:02,309 --> 00:22:06,360
example provide a drop-down of

00:22:03,929 --> 00:22:08,250
categories to front-end application

00:22:06,360 --> 00:22:10,649
would know were to get a list of

00:22:08,250 --> 00:22:15,510
categories it needs to populate the

00:22:10,649 --> 00:22:17,580
drop-down since it also knows that it's

00:22:15,510 --> 00:22:19,620
a foreign key when is going to get the

00:22:17,580 --> 00:22:22,020
JSON with the data for that record is

00:22:19,620 --> 00:22:24,600
going to see that the category ID is one

00:22:22,020 --> 00:22:27,149
and so it's knows that inside dragged

00:22:24,600 --> 00:22:39,350
and the category to be selected is the

00:22:27,149 --> 00:22:42,120
one with ID one so once again back to

00:22:39,350 --> 00:22:45,929
the reason I start this application

00:22:42,120 --> 00:22:50,100
service team adapter is that I want an

00:22:45,929 --> 00:22:53,130
API based application so exposing models

00:22:50,100 --> 00:22:55,200
with cred functionalities is great but

00:22:53,130 --> 00:22:58,080
that's not an application usually you

00:22:55,200 --> 00:23:01,350
need to do something else for example if

00:22:58,080 --> 00:23:03,330
you have an invoice you want in the list

00:23:01,350 --> 00:23:05,580
of invoice you might want to have a

00:23:03,330 --> 00:23:08,490
button next to an invoice to be able to

00:23:05,580 --> 00:23:12,149
download a PDF for that invoice or you

00:23:08,490 --> 00:23:14,760
want to have another button next to on

00:23:12,149 --> 00:23:17,090
that line that you can click and say hey

00:23:14,760 --> 00:23:23,399
my customer paid that invoice please

00:23:17,090 --> 00:23:26,429
mark it as paid and so we need some some

00:23:23,399 --> 00:23:29,789
way to expose that and as we have seen

00:23:26,429 --> 00:23:31,799
on the previous screen the default

00:23:29,789 --> 00:23:34,500
metadata for Django rest framework

00:23:31,799 --> 00:23:37,320
already it already tells you about some

00:23:34,500 --> 00:23:39,450
actions but it only gives you the

00:23:37,320 --> 00:23:41,010
actions for the current URL that you are

00:23:39,450 --> 00:23:44,070
using

00:23:41,010 --> 00:23:46,049
no there's only a limited set of methods

00:23:44,070 --> 00:23:50,130
that you can do one on a URL you can do

00:23:46,049 --> 00:23:52,679
options get post put patch if I have

00:23:50,130 --> 00:23:54,990
five different things first of all I

00:23:52,679 --> 00:23:58,620
don't have enough methods and second of

00:23:54,990 --> 00:24:01,559
all it would not be a great way to just

00:23:58,620 --> 00:24:03,450
do a different matter to print an

00:24:01,559 --> 00:24:06,659
invoice I would like to have a specific

00:24:03,450 --> 00:24:09,330
URL to print that invoice but then this

00:24:06,659 --> 00:24:11,909
is not discoverable in the basic

00:24:09,330 --> 00:24:16,590
metadata so I need some other way to

00:24:11,909 --> 00:24:19,020
expose that so once again using the

00:24:16,590 --> 00:24:22,770
Durov scheme adapter meter detect lies

00:24:19,020 --> 00:24:25,260
and your adapter of choice you can

00:24:22,770 --> 00:24:29,580
decide to expose some more methods and

00:24:25,260 --> 00:24:31,500
how do you tell Django rest framework

00:24:29,580 --> 00:24:34,289
and their scheme adapter that those

00:24:31,500 --> 00:24:36,390
methods needs to be exposed well there

00:24:34,289 --> 00:24:39,990
are two ways to do that you can either

00:24:36,390 --> 00:24:42,419
just pass it a dictionary with the

00:24:39,990 --> 00:24:44,340
available actions and all the

00:24:42,419 --> 00:24:46,350
information you want you give about

00:24:44,340 --> 00:24:48,539
these actions or you can use some

00:24:46,350 --> 00:24:50,789
decorators on some of the methods that

00:24:48,539 --> 00:24:53,700
you will be writing either on the

00:24:50,789 --> 00:24:56,010
endpoint or on the view set and for

00:24:53,700 --> 00:24:58,770
example here we have a pay method that

00:24:56,010 --> 00:25:02,880
is decorated I am sorry about the color

00:24:58,770 --> 00:25:04,890
this this gray it might not be readable

00:25:02,880 --> 00:25:07,799
for everybody but there is a decorator

00:25:04,890 --> 00:25:11,279
on top of the of the method that just

00:25:07,799 --> 00:25:15,390
says hey this is a custom action here is

00:25:11,279 --> 00:25:18,539
the text I want it to use and here is

00:25:15,390 --> 00:25:23,010
the the method if it needs to useful

00:25:18,539 --> 00:25:24,750
method has imposed and so their scheme

00:25:23,010 --> 00:25:27,299
editor is going to be looking through

00:25:24,750 --> 00:25:29,730
all your endpoints and looking for those

00:25:27,299 --> 00:25:31,940
decorators anything oh here's the

00:25:29,730 --> 00:25:35,640
collections of actions that you can do

00:25:31,940 --> 00:25:38,640
for these invoices and so it's going to

00:25:35,640 --> 00:25:41,429
provide a list of available actions so

00:25:38,640 --> 00:25:43,890
your clients can for example put a

00:25:41,429 --> 00:25:49,720
series of buttons next to each invoice

00:25:43,890 --> 00:25:52,149
of course

00:25:49,720 --> 00:25:54,370
as I said this is something that

00:25:52,149 --> 00:25:57,190
decision after that has been built for

00:25:54,370 --> 00:25:59,559
ember there are some other default

00:25:57,190 --> 00:26:02,620
adapters I'm going to start by talking

00:25:59,559 --> 00:26:05,350
about the JSON API adapter if you've

00:26:02,620 --> 00:26:07,990
never heard of it JSON API is this thing

00:26:05,350 --> 00:26:12,669
that seems to be great it does exactly

00:26:07,990 --> 00:26:14,620
what I want it with this and if the JSON

00:26:12,669 --> 00:26:16,509
API is JSON schema to the API is

00:26:14,620 --> 00:26:20,230
something totally different I'm sorry

00:26:16,509 --> 00:26:25,049
so Jesus keema if testing great there's

00:26:20,230 --> 00:26:27,340
supposed to be a way to describe fields

00:26:25,049 --> 00:26:29,860
and there are a lot of libraries that

00:26:27,340 --> 00:26:33,490
claim to be using JSON schema

00:26:29,860 --> 00:26:36,070
unfortunately treason schema is really

00:26:33,490 --> 00:26:37,809
small by itself and it doesn't have

00:26:36,070 --> 00:26:40,240
things like foreign keys and things like

00:26:37,809 --> 00:26:43,090
that so a lot of libraries that claim to

00:26:40,240 --> 00:26:45,909
be using JSON schema use JSON schema as

00:26:43,090 --> 00:26:48,429
a base but they all extend it with their

00:26:45,909 --> 00:26:51,039
own extension and all the extensions

00:26:48,429 --> 00:26:54,129
were different and usually not

00:26:51,039 --> 00:26:57,009
compatible so this is why there's an

00:26:54,129 --> 00:26:58,750
adapter for basic reason schema but

00:26:57,009 --> 00:27:03,399
there's also another adapter that is

00:26:58,750 --> 00:27:05,590
provided that is for some react reason

00:27:03,399 --> 00:27:09,250
schema because there is library in react

00:27:05,590 --> 00:27:11,440
that uses JSON schema which is not the

00:27:09,250 --> 00:27:15,700
basic reasons we might expect some other

00:27:11,440 --> 00:27:19,269
data we also have an adapter for angular

00:27:15,700 --> 00:27:22,779
and the firmly the firmly library that

00:27:19,269 --> 00:27:25,769
allows you to build forms we of course

00:27:22,779 --> 00:27:28,929
if an ember adapter which is the most

00:27:25,769 --> 00:27:31,600
fully fledged adapter that takes all the

00:27:28,929 --> 00:27:33,700
information that is available from your

00:27:31,600 --> 00:27:35,799
endpoint from your view set serializers

00:27:33,700 --> 00:27:38,019
all the fields all the actions that are

00:27:35,799 --> 00:27:41,529
Possible's it can do lace you can do

00:27:38,019 --> 00:27:44,860
forms it can do actions wizards

00:27:41,529 --> 00:27:46,779
everything but this is if you are not

00:27:44,860 --> 00:27:51,330
using amber this is probably not what

00:27:46,779 --> 00:27:54,879
you want so you can also build your own

00:27:51,330 --> 00:27:57,220
adapters and decide what information you

00:27:54,879 --> 00:27:59,769
want to provide and how you want to

00:27:57,220 --> 00:28:03,360
provide it there is a base adapter that

00:27:59,769 --> 00:28:05,950
you can extend and you can select

00:28:03,360 --> 00:28:12,639
everything that you want to expose our

00:28:05,950 --> 00:28:15,610
and how you want to expose it but yes

00:28:12,639 --> 00:28:18,820
since I opened the Pandora Box and

00:28:15,610 --> 00:28:21,309
started talking about amber there are

00:28:18,820 --> 00:28:25,240
other things that could be useful for my

00:28:21,309 --> 00:28:27,460
front end application and this is valid

00:28:25,240 --> 00:28:30,370
for amber this is valid if you're doing

00:28:27,460 --> 00:28:33,399
a gtk client it is valid for something

00:28:30,370 --> 00:28:36,850
so amber is a full MVC framework so it

00:28:33,399 --> 00:28:39,669
has this notion of model a model for my

00:28:36,850 --> 00:28:42,129
client what is the model for my client

00:28:39,669 --> 00:28:43,990
it's not going to connect directly to a

00:28:42,129 --> 00:28:47,139
database is going to connect to an API

00:28:43,990 --> 00:28:51,009
so the model for my client is a mirror

00:28:47,139 --> 00:28:53,619
of the serializer from my endpoint it

00:28:51,009 --> 00:28:56,200
just says the list of fields for which

00:28:53,619 --> 00:28:58,480
kind of models so this is something that

00:28:56,200 --> 00:29:00,639
I already know we already know in our

00:28:58,480 --> 00:29:02,200
back-end so this is also something this

00:29:00,639 --> 00:29:04,990
is the second part of your scheme

00:29:02,200 --> 00:29:08,230
adapter here's an exporter application

00:29:04,990 --> 00:29:10,360
that can be used to export some

00:29:08,230 --> 00:29:19,110
information so in this case it is

00:29:10,360 --> 00:29:23,200
exporting a very ugly j/s model for for

00:29:19,110 --> 00:29:26,499
this is a four segment or CRM segment it

00:29:23,200 --> 00:29:31,090
is exporting some information and I'm

00:29:26,499 --> 00:29:33,279
going to skip because I am running light

00:29:31,090 --> 00:29:35,679
and so I will have time for questions

00:29:33,279 --> 00:29:37,869
and so this is for example an example of

00:29:35,679 --> 00:29:40,509
a form that can be completely rendered

00:29:37,869 --> 00:29:43,809
just by extracting information from an

00:29:40,509 --> 00:29:46,299
API the front end that is rendering this

00:29:43,809 --> 00:29:48,340
application as absolutely no information

00:29:46,299 --> 00:29:50,529
about the backend it knows how to log in

00:29:48,340 --> 00:29:52,809
and how to get the information from the

00:29:50,529 --> 00:29:55,679
API and it is able to render this

00:29:52,809 --> 00:29:59,440
complex from just with that information

00:29:55,679 --> 00:30:01,869
since I'm running a bit over time if you

00:29:59,440 --> 00:30:04,149
have some more questions and you want

00:30:01,869 --> 00:30:06,279
some more information feel free to find

00:30:04,149 --> 00:30:10,269
me in the hallways or come find me at

00:30:06,279 --> 00:30:15,369
sprints and I will be polishing the link

00:30:10,269 --> 00:30:16,090
to the into these slides with the links

00:30:15,369 --> 00:30:20,080
at the end

00:30:16,090 --> 00:30:22,230
to the library and some examples thank

00:30:20,080 --> 00:30:22,230
you

00:30:28,310 --> 00:30:32,380

YouTube URL: https://www.youtube.com/watch?v=5i3fNnQM0sM


