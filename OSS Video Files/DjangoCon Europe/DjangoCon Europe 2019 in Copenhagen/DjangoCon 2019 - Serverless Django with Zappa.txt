Title: DjangoCon 2019 - Serverless Django with Zappa
Publication date: 2019-04-23
Playlist: DjangoCon Europe 2019 in Copenhagen
Description: 
	https://2019.djangocon.eu/talks/serverless-django-with-zappa/

By Neal Todd
Captions: 
	00:00:00,030 --> 00:00:06,480
okay good morning everyone when you

00:00:05,130 --> 00:00:09,480
start this morning with a look at

00:00:06,480 --> 00:00:12,000
running Django applications in a service

00:00:09,480 --> 00:00:15,719
environment and using zapper to do all

00:00:12,000 --> 00:00:17,580
the heavy work for us so what are we

00:00:15,719 --> 00:00:18,960
talking about we talk about service well

00:00:17,580 --> 00:00:20,670
it's definitely not the absence of

00:00:18,960 --> 00:00:22,760
service there definitely still lurking

00:00:20,670 --> 00:00:26,279
out there and we're going to need them

00:00:22,760 --> 00:00:27,869
it's about what runs on them when and

00:00:26,279 --> 00:00:29,460
where and point is we shouldn't really

00:00:27,869 --> 00:00:31,349
care about that too much what we care

00:00:29,460 --> 00:00:33,510
about is the code that we want to run on

00:00:31,349 --> 00:00:35,820
them so the key thing about want to key

00:00:33,510 --> 00:00:37,649
things about service is that we want to

00:00:35,820 --> 00:00:43,770
avoid having any permanent

00:00:37,649 --> 00:00:46,320
infrastructure we want it's perhaps

00:00:43,770 --> 00:00:49,340
better described as function function as

00:00:46,320 --> 00:00:54,660
a service rather than service its

00:00:49,340 --> 00:00:58,559
event-driven processes and these respond

00:00:54,660 --> 00:01:01,410
to events or requests coming in they do

00:00:58,559 --> 00:01:04,080
their job as much as needed when they're

00:01:01,410 --> 00:01:05,820
finished they disappear and this gives

00:01:04,080 --> 00:01:07,650
the notion of full utilization you're

00:01:05,820 --> 00:01:10,439
only really wanting to pay for the time

00:01:07,650 --> 00:01:12,990
that you're using your code needs to you

00:01:10,439 --> 00:01:14,909
use it and this leads then on to your

00:01:12,990 --> 00:01:17,369
costs being proportional to that

00:01:14,909 --> 00:01:18,900
execution time you only want to pay for

00:01:17,369 --> 00:01:21,330
it's there you don't want to pay for any

00:01:18,900 --> 00:01:22,740
idle time and also has the advantages

00:01:21,330 --> 00:01:26,509
the faster you can make your code run

00:01:22,740 --> 00:01:28,560
the cheaper it runs that's one key

00:01:26,509 --> 00:01:30,060
benefit people want to use service for

00:01:28,560 --> 00:01:31,979
the other one is scaling without

00:01:30,060 --> 00:01:34,799
intervention you don't want to worry

00:01:31,979 --> 00:01:38,040
about having to plan your scaling for

00:01:34,799 --> 00:01:40,530
expected peaks in demand and the worst

00:01:38,040 --> 00:01:43,409
ones the unexpected peaks of demand you

00:01:40,530 --> 00:01:47,149
want to be able to have stuff always

00:01:43,409 --> 00:01:50,009
available so with service if you have

00:01:47,149 --> 00:01:52,409
ten events ten requests you're going to

00:01:50,009 --> 00:01:54,030
have ten processes looking after them it

00:01:52,409 --> 00:01:56,520
jumps up to a thousand there's going to

00:01:54,030 --> 00:02:00,030
be a thousand running after them there's

00:01:56,520 --> 00:02:03,110
there's no idle time sitting there that

00:02:00,030 --> 00:02:03,110
you have to pay for

00:02:03,189 --> 00:02:09,200
why would we want to do this in Django

00:02:06,460 --> 00:02:10,840
well although this event driven

00:02:09,200 --> 00:02:12,800
processes we can sit a whisky

00:02:10,840 --> 00:02:14,390
request-response cycle on top of that

00:02:12,800 --> 00:02:17,450
and that's the something that Jack

00:02:14,390 --> 00:02:18,739
zapper is gonna help us with why well

00:02:17,450 --> 00:02:20,330
because it's there we're all here

00:02:18,739 --> 00:02:23,120
because we like sticking things together

00:02:20,330 --> 00:02:24,980
and making them work but particularly

00:02:23,120 --> 00:02:27,349
for low traffic experimental personal

00:02:24,980 --> 00:02:28,879
web websites it's relatively easy to

00:02:27,349 --> 00:02:30,920
deploy in this way get something up

00:02:28,879 --> 00:02:32,470
quickly doesn't have to be on all the

00:02:30,920 --> 00:02:34,430
time just when you want to use it

00:02:32,470 --> 00:02:36,980
relatively low running costs in that

00:02:34,430 --> 00:02:38,630
model but also then for bigger

00:02:36,980 --> 00:02:40,970
production sites you've got potential

00:02:38,630 --> 00:02:43,489
for lower running costs and that's one

00:02:40,970 --> 00:02:44,590
of the big draws of serverless it sounds

00:02:43,489 --> 00:02:46,819
very attractive from a cost perspective

00:02:44,590 --> 00:02:48,670
but also you've got this automatic

00:02:46,819 --> 00:02:51,680
scalability for peaks in demand

00:02:48,670 --> 00:02:53,630
particularly those unexpected ones now

00:02:51,680 --> 00:02:56,000
it's a truism that when your websites

00:02:53,630 --> 00:02:57,680
and most in demand that's also the time

00:02:56,000 --> 00:03:00,230
when it's low slightly fall over because

00:02:57,680 --> 00:03:01,640
of that demand and service there the

00:03:00,230 --> 00:03:05,329
idea is it it'll just automatically

00:03:01,640 --> 00:03:06,739
scale take care of it for you so the

00:03:05,329 --> 00:03:10,549
tool we're gonna be looking at today is

00:03:06,739 --> 00:03:12,290
zapper it's a Python package to a three

00:03:10,549 --> 00:03:13,400
or three-year-old active code base and

00:03:12,290 --> 00:03:16,519
it's got some integrated support

00:03:13,400 --> 00:03:22,519
specifically for Django all it does it

00:03:16,519 --> 00:03:24,170
takes API gateway requests in Amazon Web

00:03:22,519 --> 00:03:25,850
Services environment turns them into

00:03:24,170 --> 00:03:27,769
whiskey requests for you to pass on to

00:03:25,850 --> 00:03:30,920
lambda function lambda functional serve

00:03:27,769 --> 00:03:32,660
a request and pass it back so it looks

00:03:30,920 --> 00:03:35,150
for me out so I'd like a normal response

00:03:32,660 --> 00:03:36,859
request cycle so you can pick two then

00:03:35,150 --> 00:03:41,599
your website becomes this little series

00:03:36,859 --> 00:03:43,910
of ephemeral lambda functions firing off

00:03:41,599 --> 00:03:45,500
in the background there's almost as if

00:03:43,910 --> 00:03:46,790
your website is just distributed all

00:03:45,500 --> 00:03:49,160
across the world where it's needed and

00:03:46,790 --> 00:03:51,290
when it's needed we have a bit of

00:03:49,160 --> 00:03:53,660
database back persistence on that

00:03:51,290 --> 00:03:58,489
because we will see the lambda functions

00:03:53,660 --> 00:04:01,030
themselves are stateless so talked about

00:03:58,489 --> 00:04:04,160
Amazon Web Services there that is what

00:04:01,030 --> 00:04:06,769
Zappa sits on top of other services are

00:04:04,160 --> 00:04:09,139
available as Microsoft Azure Google

00:04:06,769 --> 00:04:10,549
cloud platform and as of literally

00:04:09,139 --> 00:04:13,370
Tuesday this week just before the

00:04:10,549 --> 00:04:14,730
conference cloud run from Google went

00:04:13,370 --> 00:04:18,810
into beta

00:04:14,730 --> 00:04:20,190
also provides a service stack what we're

00:04:18,810 --> 00:04:22,680
going to be looking at here is where

00:04:20,190 --> 00:04:25,200
Zappa integrates with some of the Amazon

00:04:22,680 --> 00:04:27,350
Web Services there are a lot of them as

00:04:25,200 --> 00:04:29,310
you've probably seen we're focusing on

00:04:27,350 --> 00:04:31,430
particular subsets today obviously

00:04:29,310 --> 00:04:35,700
lambda functions which is Amazon's

00:04:31,430 --> 00:04:38,870
implementation of functions of a service

00:04:35,700 --> 00:04:40,680
I am the identity and access management

00:04:38,870 --> 00:04:43,110
sections that's Ford's app is going to

00:04:40,680 --> 00:04:44,820
use in order to run all this stuff API

00:04:43,110 --> 00:04:47,130
gateway outside glue between the outside

00:04:44,820 --> 00:04:50,310
world and the lambda functions I'm using

00:04:47,130 --> 00:04:51,690
s3 for various bits of persistence will

00:04:50,310 --> 00:04:54,020
look at some other components that you

00:04:51,690 --> 00:04:56,760
would need in a full stack but not

00:04:54,020 --> 00:04:58,860
absolutely critical RDS for different

00:04:56,760 --> 00:05:00,389
kinds of database backing virtual

00:04:58,860 --> 00:05:03,540
private clouds we'll look at briefly

00:05:00,389 --> 00:05:05,490
mainly in terms of cost implications

00:05:03,540 --> 00:05:06,690
there we got things like route 53 and

00:05:05,490 --> 00:05:12,150
certificate manager if we want to put

00:05:06,690 --> 00:05:13,850
custom domains on that so to get you

00:05:12,150 --> 00:05:17,160
started if you want to do this

00:05:13,850 --> 00:05:19,770
experimental way a SS give you a free

00:05:17,160 --> 00:05:21,300
tier if you get a new sign up for new

00:05:19,770 --> 00:05:23,039
Amazon account you get 12 months of

00:05:21,300 --> 00:05:26,970
various free services to hook you into

00:05:23,039 --> 00:05:30,240
that ecosystem some of them are s3 and

00:05:26,970 --> 00:05:33,539
RDS give you sort of database micro

00:05:30,240 --> 00:05:36,120
instance an s3 storage the lambda is is

00:05:33,539 --> 00:05:38,100
the interesting one you get a million

00:05:36,120 --> 00:05:40,470
requests a month 400,000 gigabyte

00:05:38,100 --> 00:05:42,060
seconds so it's kind of measured in not

00:05:40,470 --> 00:05:43,620
only the amount of resource you use in

00:05:42,060 --> 00:05:46,760
terms of memory but also the time it

00:05:43,620 --> 00:05:48,930
runs that's available forever and that

00:05:46,760 --> 00:05:51,330
is probably where you are looking at

00:05:48,930 --> 00:05:54,330
this kind of zero cost part of running

00:05:51,330 --> 00:05:56,580
in a server stack because you take a 512

00:05:54,330 --> 00:05:58,410
megabyte lambda functions memory is

00:05:56,580 --> 00:06:01,080
allocated you can have up to a million

00:05:58,410 --> 00:06:04,110
eight hundred millisecond requests per

00:06:01,080 --> 00:06:05,640
month at zero cost and that sounds very

00:06:04,110 --> 00:06:06,600
attractive cuz you probably not you're

00:06:05,640 --> 00:06:09,030
doing well if you're chewing through

00:06:06,600 --> 00:06:11,700
over a million requests particularly on

00:06:09,030 --> 00:06:13,410
your personal sites but those will come

00:06:11,700 --> 00:06:15,090
see you need do need factor in other

00:06:13,410 --> 00:06:18,289
costs to work out whether this is a

00:06:15,090 --> 00:06:18,289
viable production stack

00:06:18,599 --> 00:06:23,069
so looking at lift and shift the idea

00:06:21,479 --> 00:06:25,770
that you should be changing your Django

00:06:23,069 --> 00:06:29,819
application too much itself you wanted

00:06:25,770 --> 00:06:31,879
more focus on just getting it out there

00:06:29,819 --> 00:06:34,349
and that should just be around

00:06:31,879 --> 00:06:35,789
configuration change is necessary and by

00:06:34,349 --> 00:06:38,580
and large in this device there aren't

00:06:35,789 --> 00:06:40,580
too many configuration changes to do the

00:06:38,580 --> 00:06:43,259
main focus then it is on zapper settings

00:06:40,580 --> 00:06:44,969
and that walks you through it produces a

00:06:43,259 --> 00:06:47,520
JSON or Y Amal file in your project

00:06:44,969 --> 00:06:49,469
directory and create that with zapper in

00:06:47,520 --> 00:06:52,169
it and it'll actually just steps you

00:06:49,469 --> 00:06:53,339
through and gets you set up and go and

00:06:52,169 --> 00:06:54,479
that's largely what we need to do other

00:06:53,339 --> 00:06:58,680
than the small bit of Django a

00:06:54,479 --> 00:07:01,169
configuration so let's look at it in

00:06:58,680 --> 00:07:04,800
action a bit I'm going to risk the live

00:07:01,169 --> 00:07:07,949
demo here we're going to create a site

00:07:04,800 --> 00:07:09,629
from scratch and deploy it into the

00:07:07,949 --> 00:07:11,729
lambda environment and hopefully by the

00:07:09,629 --> 00:07:14,459
next few slides it will be there so

00:07:11,729 --> 00:07:16,169
we're going to get a use wagtail content

00:07:14,459 --> 00:07:18,929
management systems bakery demo as a

00:07:16,169 --> 00:07:20,219
sample django application so very large

00:07:18,929 --> 00:07:23,099
and that's going to have some sort of

00:07:20,219 --> 00:07:25,169
content added to it as part of the part

00:07:23,099 --> 00:07:28,889
of the day it's demo we're going to use

00:07:25,169 --> 00:07:31,229
s3 bucket for our static assets using an

00:07:28,889 --> 00:07:33,659
s3 bucket to run sequel light database

00:07:31,229 --> 00:07:36,990
as the backend I'm going to apply a

00:07:33,659 --> 00:07:41,779
custom domain to it so what I'm gonna do

00:07:36,990 --> 00:07:41,779
is I'm going to set that off running and

00:07:44,719 --> 00:07:48,629
then go back and talk you through it in

00:07:47,099 --> 00:07:50,399
a bit more detail so we'll leave it

00:07:48,629 --> 00:07:53,519
running in the background so it's going

00:07:50,399 --> 00:07:56,899
to create this site fingers crossed to

00:07:53,519 --> 00:07:56,899
leave it chugging away for a few minutes

00:07:58,459 --> 00:08:01,969
and we're going to hop back

00:08:09,510 --> 00:08:12,510
frozen

00:08:19,650 --> 00:08:26,400
okay okay so that doesn't work there is

00:08:22,870 --> 00:08:29,860
one I made earlier you could check out

00:08:26,400 --> 00:08:31,510
okay so your NSA will see this at the

00:08:29,860 --> 00:08:33,849
back but it doesn't matter too much as

00:08:31,510 --> 00:08:36,700
this full online walkthrough of this

00:08:33,849 --> 00:08:37,960
this first bit of this scripts we're

00:08:36,700 --> 00:08:39,640
doing this is kind of barest minimum

00:08:37,960 --> 00:08:41,560
stuff we can get away with to set up

00:08:39,640 --> 00:08:43,750
this stack the only prerequisites we had

00:08:41,560 --> 00:08:46,960
was we had an Amazon account with an I

00:08:43,750 --> 00:08:48,400
am use already set up so what it's doing

00:08:46,960 --> 00:08:50,770
it's just creating a local virtual

00:08:48,400 --> 00:08:52,480
environment on my own server installing

00:08:50,770 --> 00:08:56,140
some of those APIs dependencies like

00:08:52,480 --> 00:08:57,339
zapper or cloning our bakery demo and

00:08:56,140 --> 00:08:59,380
then we're going to do a bit of like

00:08:57,339 --> 00:09:01,779
Django configuration on that so we're

00:08:59,380 --> 00:09:05,200
using zappers Django utils to provide us

00:09:01,779 --> 00:09:08,800
with a sequel Lite s3 sequel Lite

00:09:05,200 --> 00:09:11,740
backend regular django database

00:09:08,800 --> 00:09:14,170
configuration we're using Django

00:09:11,740 --> 00:09:17,650
storages to configure our static assets

00:09:14,170 --> 00:09:19,270
to go to the s3 bucket and we've got a

00:09:17,650 --> 00:09:21,279
little example here plucking off an

00:09:19,270 --> 00:09:25,510
environment variable as you're come to

00:09:21,279 --> 00:09:28,950
in the same so here the meat of it here

00:09:25,510 --> 00:09:31,029
is generating the zapper settings file

00:09:28,950 --> 00:09:32,740
normally you'd run that with zapper in

00:09:31,029 --> 00:09:34,990
it here I'm just creating it from

00:09:32,740 --> 00:09:37,300
scratch with with a few minimum settings

00:09:34,990 --> 00:09:38,890
so the key few key ones there if you've

00:09:37,300 --> 00:09:41,890
got Django settings just pointing it out

00:09:38,890 --> 00:09:44,230
our dev settings here we're telling it

00:09:41,890 --> 00:09:46,690
the profile name which I am user to use

00:09:44,230 --> 00:09:49,300
to do all its work and we're telling it

00:09:46,690 --> 00:09:51,190
to build this into a particular AWS

00:09:49,300 --> 00:09:52,930
region here the London London region

00:09:51,190 --> 00:09:54,550
then we're doing other bits of

00:09:52,930 --> 00:09:57,430
configuration about telling it what

00:09:54,550 --> 00:10:00,310
buckets to use and where what domain we

00:09:57,430 --> 00:10:01,690
want to custom domain we want to use and

00:10:00,310 --> 00:10:03,730
here's an example of being able to add

00:10:01,690 --> 00:10:05,589
something to the lambda functions

00:10:03,730 --> 00:10:08,950
environment variables in this case that

00:10:05,589 --> 00:10:10,089
debug thing that the Django settings

00:10:08,950 --> 00:10:12,940
will be able to pluck off at the other

00:10:10,089 --> 00:10:16,390
side and use here a builder

00:10:12,940 --> 00:10:17,890
configuration using just the AWS command

00:10:16,390 --> 00:10:19,750
line just to create our buckets and

00:10:17,890 --> 00:10:23,800
apply some policies to them and load

00:10:19,750 --> 00:10:25,779
some content to really may meet of it

00:10:23,800 --> 00:10:30,000
then is what zap is doing itself and

00:10:25,779 --> 00:10:32,139
that's very series of command-line tools

00:10:30,000 --> 00:10:36,040
the main one being

00:10:32,139 --> 00:10:37,660
zapper deploy and you probably saw

00:10:36,040 --> 00:10:38,829
before those there's various dev bits

00:10:37,660 --> 00:10:39,910
there that just means in your zapper

00:10:38,829 --> 00:10:41,739
settings file you can have multiple

00:10:39,910 --> 00:10:43,720
environments you can deploy to from the

00:10:41,739 --> 00:10:47,040
one project it might be staging or

00:10:43,720 --> 00:10:47,040
production you know we've just got a dev

00:10:47,459 --> 00:10:52,299
so this is deploy is doing all the heavy

00:10:49,809 --> 00:10:53,860
lifting for us it's going to take our

00:10:52,299 --> 00:10:55,959
virtual environment and our current

00:10:53,860 --> 00:10:57,929
project directory package all that up

00:10:55,959 --> 00:11:00,369
into a lambda compatible archive and

00:10:57,929 --> 00:11:01,720
replace various things like version

00:11:00,369 --> 00:11:04,089
dependencies with versions that were

00:11:01,720 --> 00:11:05,499
really pre compiled for lambda it'll set

00:11:04,089 --> 00:11:08,049
up various function handlers and the

00:11:05,499 --> 00:11:10,299
whiskey middleware it's going to upload

00:11:08,049 --> 00:11:12,009
that all to its own s3 bucket that we've

00:11:10,299 --> 00:11:13,720
told pointed it out and it's going to

00:11:12,009 --> 00:11:16,420
create all the various I am policies and

00:11:13,720 --> 00:11:18,759
roles it needs it's gonna register a new

00:11:16,420 --> 00:11:21,399
lambda function for us create the

00:11:18,759 --> 00:11:23,679
gateway to join up with the whiskey

00:11:21,399 --> 00:11:25,899
routes between the two and it's going to

00:11:23,679 --> 00:11:28,480
do then other little niceties for us

00:11:25,899 --> 00:11:29,860
like create a cloud watch event that's

00:11:28,480 --> 00:11:34,269
going to keep that lambda function warm

00:11:29,860 --> 00:11:35,499
for us so that's it's it never gets shut

00:11:34,269 --> 00:11:36,759
down completely and doesn't need to do a

00:11:35,499 --> 00:11:42,879
cold start which would slow down

00:11:36,759 --> 00:11:44,949
response times so once it's done that

00:11:42,879 --> 00:11:46,389
we're using certify here this is just

00:11:44,949 --> 00:11:49,629
for the custom domain part that's gonna

00:11:46,389 --> 00:11:52,089
glue our custom domain onto top of what

00:11:49,629 --> 00:11:54,879
what to the domain that Amazon would

00:11:52,089 --> 00:11:56,740
generate for us automatically and sort

00:11:54,879 --> 00:11:59,049
out all the HTTP certificates for that

00:11:56,740 --> 00:12:00,730
and then because we were operating in a

00:11:59,049 --> 00:12:02,410
lambda environment we don't have a

00:12:00,730 --> 00:12:04,329
command line to work on so you can't

00:12:02,410 --> 00:12:06,490
directly run your Django usual Django

00:12:04,329 --> 00:12:07,959
management commands so Zappa wraps up

00:12:06,490 --> 00:12:09,670
that for us and here we're just doing

00:12:07,959 --> 00:12:12,040
all the regular things we normally do

00:12:09,670 --> 00:12:13,600
when we were deploying a Django project

00:12:12,040 --> 00:12:15,309
we're going to collect our static stuff

00:12:13,600 --> 00:12:17,230
we're going to migrate our database and

00:12:15,309 --> 00:12:19,360
in this case for the demo we're going to

00:12:17,230 --> 00:12:21,610
load some initial data so you can wrap

00:12:19,360 --> 00:12:23,079
any of django zone management commands

00:12:21,610 --> 00:12:26,079
on your own management commands and run

00:12:23,079 --> 00:12:27,850
them locally via Zappa and it's a pass

00:12:26,079 --> 00:12:31,449
status there is it's going to tell us if

00:12:27,850 --> 00:12:33,699
it all worked and give us all domains to

00:12:31,449 --> 00:12:35,139
look at and then zapper updates not

00:12:33,699 --> 00:12:36,339
calling directly here but that's that's

00:12:35,139 --> 00:12:39,299
the step that if you were going to make

00:12:36,339 --> 00:12:41,829
some changes to your project you would

00:12:39,299 --> 00:12:43,629
commit those to your repository and then

00:12:41,829 --> 00:12:44,920
zapper update would then deploy those

00:12:43,629 --> 00:12:48,009
two existing lambda function

00:12:44,920 --> 00:12:48,429
and have your new version of your site

00:12:48,009 --> 00:12:50,379
ready

00:12:48,429 --> 00:12:51,850
so deploy itself is only used for that

00:12:50,379 --> 00:12:54,100
initial step of first creating your

00:12:51,850 --> 00:12:57,279
stack after that this is effectively

00:12:54,100 --> 00:13:01,389
your deploy command there's a quick quiz

00:12:57,279 --> 00:13:03,160
through all the details online there so

00:13:01,389 --> 00:13:06,699
with that amount of talking bit of luck

00:13:03,160 --> 00:13:10,209
we might see something that's looking

00:13:06,699 --> 00:13:12,429
good at this stage so we got the API

00:13:10,209 --> 00:13:14,559
gateway URL here this is the one amazon

00:13:12,429 --> 00:13:15,939
has generated for us and you can see

00:13:14,559 --> 00:13:17,679
it's got the slash devil on the end as

00:13:15,939 --> 00:13:18,759
the script name this is one of the

00:13:17,679 --> 00:13:20,169
reasons why it's nice to put your own

00:13:18,759 --> 00:13:21,279
domain name on so you don't have to have

00:13:20,169 --> 00:13:25,629
that on the end

00:13:21,279 --> 00:13:26,889
now if CloudFront is not too busy this

00:13:25,629 --> 00:13:28,929
morning it will have give us some a

00:13:26,889 --> 00:13:31,989
records which it hasn't at the moment

00:13:28,929 --> 00:13:34,779
normally we've got us so we won't be

00:13:31,989 --> 00:13:37,329
able to look at speedran directly on

00:13:34,779 --> 00:13:40,949
that domain probably by the end of the

00:13:37,329 --> 00:13:44,129
talk it will be ready but if I look at

00:13:40,949 --> 00:13:44,129
my mouse

00:13:58,380 --> 00:14:02,270
did anyone see a mouse there it is

00:14:04,520 --> 00:14:14,790
because that's the one I'm not gonna

00:14:06,600 --> 00:14:16,940
remember we're talking my hand creeping

00:14:14,790 --> 00:14:16,940
you

00:14:28,910 --> 00:14:43,070
you're thinking about it it's all

00:14:34,580 --> 00:14:45,250
tension hey we've got something yes

00:14:43,070 --> 00:14:48,230
please

00:14:45,250 --> 00:14:54,520
so that's a site if we do just prove we

00:14:48,230 --> 00:14:58,460
have got some Django behind the scenes

00:14:54,520 --> 00:14:59,930
happen yes definitely Django so so

00:14:58,460 --> 00:15:01,670
hopefully by the end of the talk

00:14:59,930 --> 00:15:03,230
cloud from will have got its act

00:15:01,670 --> 00:15:05,240
together and created those a records we

00:15:03,230 --> 00:15:15,830
need to do to look at that site on its

00:15:05,240 --> 00:15:17,570
actual custom domain right so a quick

00:15:15,830 --> 00:15:18,740
quick summary there I've kind of the

00:15:17,570 --> 00:15:20,120
workflow what it's doing its going from

00:15:18,740 --> 00:15:22,670
the virtual environment building all the

00:15:20,120 --> 00:15:24,080
bits for us leaving us front-end there

00:15:22,670 --> 00:15:27,770
with people that walk through the API

00:15:24,080 --> 00:15:29,210
gateway to these lambda functions I'm

00:15:27,770 --> 00:15:32,450
gonna rattle through this last bit there

00:15:29,210 --> 00:15:34,580
various other Zappa settings we can use

00:15:32,450 --> 00:15:36,320
there's a whole host of them like you

00:15:34,580 --> 00:15:38,660
can figure out things nicely there's

00:15:36,320 --> 00:15:40,010
various other Zappa commands that you

00:15:38,660 --> 00:15:41,240
can use because y'all got this command

00:15:40,010 --> 00:15:42,740
line to work directly on things like

00:15:41,240 --> 00:15:45,140
being able to tail the log to see what

00:15:42,740 --> 00:15:46,700
went wrong be able to invoke direct

00:15:45,140 --> 00:15:50,360
commands in the environment in the

00:15:46,700 --> 00:15:54,260
lambda function and then under ploy to

00:15:50,360 --> 00:15:55,790
tear your things down if you need to so

00:15:54,260 --> 00:15:57,530
all that's kind of stuff that's script

00:15:55,790 --> 00:16:01,660
work that could all be built into your

00:15:57,530 --> 00:16:01,660
normal CI workflow for deploying sites

00:16:03,040 --> 00:16:08,060
in terms of deploying stuff as a per

00:16:06,140 --> 00:16:10,130
leads quite a lot of access to various

00:16:08,060 --> 00:16:11,600
services and if you ever dealt with AWS

00:16:10,130 --> 00:16:12,620
roles and policies before you know

00:16:11,600 --> 00:16:14,780
there's a lot of them it's very

00:16:12,620 --> 00:16:16,610
fine-grained so fine-grained it's almost

00:16:14,780 --> 00:16:18,980
impossible to work out what you need so

00:16:16,610 --> 00:16:21,530
people often use administrator access

00:16:18,980 --> 00:16:23,240
which is basically a root user to do

00:16:21,530 --> 00:16:25,880
everything for you it's actually quite

00:16:23,240 --> 00:16:28,310
hard to work out exactly what DAPA needs

00:16:25,880 --> 00:16:30,700
at a minimum to tune down and you end up

00:16:28,310 --> 00:16:34,250
with very long policies that go on and

00:16:30,700 --> 00:16:36,350
on and on in fact doing that fully took

00:16:34,250 --> 00:16:39,860
me longer to get my head around and the

00:16:36,350 --> 00:16:42,830
rest of it so we looked in the example

00:16:39,860 --> 00:16:44,240
the site we built using sequel Lite on

00:16:42,830 --> 00:16:46,310
three and that scales pretty well for

00:16:44,240 --> 00:16:49,160
high reads it's surprising it's not

00:16:46,310 --> 00:16:51,170
great for high right concurrency because

00:16:49,160 --> 00:16:52,850
it's moving moving this database back as

00:16:51,170 --> 00:16:55,100
unfortunately s3 to the two lambda

00:16:52,850 --> 00:16:56,180
functions so something like a content

00:16:55,100 --> 00:16:57,950
management system where it's mostly

00:16:56,180 --> 00:16:59,600
reads possibly not too bad if your

00:16:57,950 --> 00:17:02,510
applications got high right you probably

00:16:59,600 --> 00:17:04,760
want something else so eight of us

00:17:02,510 --> 00:17:08,450
provides you a variety of your choice of

00:17:04,760 --> 00:17:10,370
a relational database service and you

00:17:08,450 --> 00:17:12,260
can get micro instances and starting

00:17:10,370 --> 00:17:13,610
some $14 a week so immediately there

00:17:12,260 --> 00:17:16,100
there's there's a cost on top of your

00:17:13,610 --> 00:17:19,160
zero nominal zero cost for lambda for

00:17:16,100 --> 00:17:20,839
service for experiments you get that

00:17:19,160 --> 00:17:22,850
free for first year and then we're gonna

00:17:20,839 --> 00:17:25,820
look at briefly as well Aurora service

00:17:22,850 --> 00:17:28,490
this is our service version of the

00:17:25,820 --> 00:17:32,630
Aurora database that's scales up and

00:17:28,490 --> 00:17:33,710
down on demand that's often being sort

00:17:32,630 --> 00:17:35,810
of tracked if you'll hear about and go

00:17:33,710 --> 00:17:39,610
all low I can reduce my costs again but

00:17:35,810 --> 00:17:39,610
we'll see that's not necessarily true

00:17:40,150 --> 00:17:44,600
so if you want to switch out

00:17:42,590 --> 00:17:47,030
Postgres it with lift and shifting there

00:17:44,600 --> 00:17:49,310
it's pretty straightforward we can

00:17:47,030 --> 00:17:53,480
create our database cluster and database

00:17:49,310 --> 00:17:56,270
and RDS gives us a database URL I'm

00:17:53,480 --> 00:17:58,460
familiar with and then tweaking our

00:17:56,270 --> 00:18:00,440
environment yes our configure is pretty

00:17:58,460 --> 00:18:03,590
straightforward we're just gonna install

00:18:00,440 --> 00:18:07,370
psycho PG dependence use date database

00:18:03,590 --> 00:18:09,200
URL to talk about database URL off our

00:18:07,370 --> 00:18:10,640
environment and configure our database

00:18:09,200 --> 00:18:13,550
for us and then we just need to remove

00:18:10,640 --> 00:18:17,330
we don't need the s3 bucket anymore for

00:18:13,550 --> 00:18:19,280
the database so you do that do your

00:18:17,330 --> 00:18:21,830
zapper updates your zapper manage

00:18:19,280 --> 00:18:23,750
migrate and you're good to go on a post

00:18:21,830 --> 00:18:26,020
Chris back database all my sequel or

00:18:23,750 --> 00:18:26,020
whatever

00:18:26,120 --> 00:18:31,790
Aurora service is slightly different

00:18:27,620 --> 00:18:35,870
beast it is tempting to go full service

00:18:31,790 --> 00:18:37,940
you've got your lout your your requests

00:18:35,870 --> 00:18:40,130
being run service Lee so it would be

00:18:37,940 --> 00:18:43,070
nice to run your database in service way

00:18:40,130 --> 00:18:47,540
as well but it's more suited for

00:18:43,070 --> 00:18:50,480
infrequent intermediate or unpredictable

00:18:47,540 --> 00:18:52,460
workloads and that's because you don't

00:18:50,480 --> 00:18:54,680
actually want it running all the time

00:18:52,460 --> 00:18:56,480
and when it goes quiet it takes a while

00:18:54,680 --> 00:18:58,220
to come up so it's good for

00:18:56,480 --> 00:19:01,160
occasional say you're a big reporting

00:18:58,220 --> 00:19:02,840
jobs or for dev you swear you don't mind

00:19:01,160 --> 00:19:05,180
having a little pause but it's not a

00:19:02,840 --> 00:19:06,770
great fit for real you know django

00:19:05,180 --> 00:19:08,690
applications that are they're open to

00:19:06,770 --> 00:19:11,630
the wider public because you don't want

00:19:08,690 --> 00:19:14,690
someone waiting for too long when you

00:19:11,630 --> 00:19:15,890
create one of these you it's the usage

00:19:14,690 --> 00:19:17,420
is measured in terms these Aurora

00:19:15,890 --> 00:19:19,940
compute units which is or function of

00:19:17,420 --> 00:19:22,370
memory and CPU usage and you set limits

00:19:19,940 --> 00:19:24,830
of the maximum and minimum you want

00:19:22,370 --> 00:19:27,140
those to run between and how long you

00:19:24,830 --> 00:19:28,970
want it to

00:19:27,140 --> 00:19:31,100
after what time you wanted to pause when

00:19:28,970 --> 00:19:32,150
it's had no requests come in on it an

00:19:31,100 --> 00:19:34,910
important thing when if you do

00:19:32,150 --> 00:19:37,220
experiment with this and create it is it

00:19:34,910 --> 00:19:40,180
defaults to to a CU minimum but there's

00:19:37,220 --> 00:19:42,260
no pause on it if you don't set a pause

00:19:40,180 --> 00:19:44,270
you're immediately in for a hundred

00:19:42,260 --> 00:19:46,160
dollars a month even if that never

00:19:44,270 --> 00:19:48,280
receives a request to it so it's pretty

00:19:46,160 --> 00:19:51,470
vital you set up pause say five minutes

00:19:48,280 --> 00:19:52,550
of inactivity it goes to sleep and

00:19:51,470 --> 00:19:54,380
that's the critical bit because as soon

00:19:52,550 --> 00:19:55,910
as it goes to sleep next request coming

00:19:54,380 --> 00:19:59,300
in you've got about 30 seconds with all

00:19:55,910 --> 00:20:01,340
that database spins back up so that's

00:19:59,300 --> 00:20:03,140
why it's not fantastic for running sort

00:20:01,340 --> 00:20:05,570
of front-end web sites but it's

00:20:03,140 --> 00:20:08,690
interesting for for devil of

00:20:05,570 --> 00:20:13,070
particularly occasional projects that

00:20:08,690 --> 00:20:14,270
need to run nothing the wrench I

00:20:13,070 --> 00:20:16,040
mentioned for about virtual private

00:20:14,270 --> 00:20:17,840
clouds people often won't put the

00:20:16,040 --> 00:20:19,460
everything into a virtual private cloud

00:20:17,840 --> 00:20:22,040
in fact with the raw of service you have

00:20:19,460 --> 00:20:23,720
to do that because it's the only place

00:20:22,040 --> 00:20:26,900
it runs in so it's isolated from the

00:20:23,720 --> 00:20:29,540
internet that means in order to talk to

00:20:26,900 --> 00:20:32,240
it your lambda function also has to be

00:20:29,540 --> 00:20:34,850
in a V PC and that has then immediately

00:20:32,240 --> 00:20:36,260
cut you off from the outside world the

00:20:34,850 --> 00:20:38,630
lambda function can't see it see the

00:20:36,260 --> 00:20:41,330
outside world anymore so if you need to

00:20:38,630 --> 00:20:43,550
connect contact your s3 bucket die the

00:20:41,330 --> 00:20:45,640
publishing static assets or use a user

00:20:43,550 --> 00:20:48,830
uploaded content that you want to store

00:20:45,640 --> 00:20:50,390
persistently you can use an s3 gateway

00:20:48,830 --> 00:20:54,170
that doesn't cost you anything so that's

00:20:50,390 --> 00:20:56,960
ok you can talk to s3 if you've got your

00:20:54,170 --> 00:20:58,520
application uses third party API is

00:20:56,960 --> 00:21:00,890
needs to talk to the outside world

00:20:58,520 --> 00:21:04,850
you're going to need to go through and

00:21:00,890 --> 00:21:07,470
that gateway to reach it in order having

00:21:04,850 --> 00:21:08,640
that gateway you need elastic IP address

00:21:07,470 --> 00:21:11,190
I wasn't happy sell you one of those

00:21:08,640 --> 00:21:13,100
four seemingly not too bad sounding five

00:21:11,190 --> 00:21:16,289
cents an hour until you realize that's

00:21:13,100 --> 00:21:17,700
$36 a month for an IP address and I

00:21:16,289 --> 00:21:18,750
guess be hard to justify that compared

00:21:17,700 --> 00:21:20,909
to think you know I can get a pretty big

00:21:18,750 --> 00:21:23,250
server for $35 a month and do whatever I

00:21:20,909 --> 00:21:24,900
want on it so in terms of costing when

00:21:23,250 --> 00:21:26,700
you come to service you have to take

00:21:24,900 --> 00:21:28,409
into account these various extra factors

00:21:26,700 --> 00:21:35,159
that aren't necessarily immediately

00:21:28,409 --> 00:21:36,270
apparent so I've got three sites running

00:21:35,159 --> 00:21:38,460
up at the moment so you can have a look

00:21:36,270 --> 00:21:40,080
at afterwards inks parent compare and

00:21:38,460 --> 00:21:41,520
contrast what what they feel like when

00:21:40,080 --> 00:21:42,929
they're running is we've got over the

00:21:41,520 --> 00:21:46,080
speedrun one we'll be there by now

00:21:42,929 --> 00:21:47,070
there's my backup one so that's on the

00:21:46,080 --> 00:21:49,289
s3 bucket

00:21:47,070 --> 00:21:52,890
you've got Postgres and we've got an

00:21:49,289 --> 00:21:56,610
Aurora serverless one terms of

00:21:52,890 --> 00:21:58,860
performance wise Postgres and or a

00:21:56,610 --> 00:22:00,419
service pretty similar this is this is a

00:21:58,860 --> 00:22:03,480
performance the front end under load

00:22:00,419 --> 00:22:05,070
with a locust swarm hitting it what

00:22:03,480 --> 00:22:07,460
would the interesting thing for me was a

00:22:05,070 --> 00:22:09,299
sequel on s3 actually wasn't too bad

00:22:07,460 --> 00:22:11,490
relative performance that was pretty

00:22:09,299 --> 00:22:13,169
good and so if you've got high writes

00:22:11,490 --> 00:22:15,450
that's quite a nice solution for

00:22:13,169 --> 00:22:19,950
certainly for experiment and personal

00:22:15,450 --> 00:22:24,840
project work I do have a few minutes

00:22:19,950 --> 00:22:26,159
left so Melanie so there's lots of other

00:22:24,840 --> 00:22:29,100
features that I haven't even covered yet

00:22:26,159 --> 00:22:33,030
but Zappa does for you in a nice way so

00:22:29,100 --> 00:22:35,190
we deployed the site to particular

00:22:33,030 --> 00:22:38,039
region London region you can also with a

00:22:35,190 --> 00:22:39,630
simple toggle get it to deploy to all

00:22:38,039 --> 00:22:42,120
available regions that it's capable of

00:22:39,630 --> 00:22:44,669
running in that support what it needs

00:22:42,120 --> 00:22:47,520
that's a nice way if you get global

00:22:44,669 --> 00:22:49,500
reach you've got then your response your

00:22:47,520 --> 00:22:51,270
latency is lower because people are

00:22:49,500 --> 00:22:53,970
hitting your lambda functions at the

00:22:51,270 --> 00:22:55,559
point closest to them in the world you

00:22:53,970 --> 00:22:57,919
can have scheduled functions so

00:22:55,559 --> 00:23:00,059
effectively running your own cron tasks

00:22:57,919 --> 00:23:03,480
in this environment usually wrapped

00:23:00,059 --> 00:23:05,039
around your own management tasks and

00:23:03,480 --> 00:23:06,809
that the uses those as I mentioned

00:23:05,039 --> 00:23:08,940
before but in order to keep these lambda

00:23:06,809 --> 00:23:11,669
functions warm it's got other things

00:23:08,940 --> 00:23:13,890
like rollback so if you've have to ploy

00:23:11,669 --> 00:23:15,929
something something's gone wrong you

00:23:13,890 --> 00:23:17,399
have to do a lot to one deploy and get

00:23:15,929 --> 00:23:19,230
back to the earlier version that you

00:23:17,399 --> 00:23:22,359
deployed

00:23:19,230 --> 00:23:23,499
few things to mention then building

00:23:22,359 --> 00:23:25,869
packages from a virtual environment

00:23:23,499 --> 00:23:27,190
slightly unusual I've when I first came

00:23:25,869 --> 00:23:28,269
to that you actually brought to be sort

00:23:27,190 --> 00:23:29,590
of quite careful that you haven't

00:23:28,269 --> 00:23:30,820
actually stuck anything else in your in

00:23:29,590 --> 00:23:32,200
virtual environment he didn't mean to

00:23:30,820 --> 00:23:34,299
there's gonna end up in this package

00:23:32,200 --> 00:23:36,789
that goes to the lambda function but if

00:23:34,299 --> 00:23:38,289
you're building from a clean continuous

00:23:36,789 --> 00:23:39,940
integration environment you're probably

00:23:38,289 --> 00:23:41,190
less like to hit any problems there

00:23:39,940 --> 00:23:43,029
because you will just be building

00:23:41,190 --> 00:23:45,340
whatever is defined through virtual

00:23:43,029 --> 00:23:47,590
environment package size limitations

00:23:45,340 --> 00:23:52,480
there's a 50 megabyte limit of a zip

00:23:47,590 --> 00:23:55,330
file when it goes up I've been able to

00:23:52,480 --> 00:23:58,989
deploy upload ones this fair bit bigger

00:23:55,330 --> 00:24:00,519
than that without any problems yet but

00:23:58,989 --> 00:24:02,049
if you did get to if you do they have a

00:24:00,519 --> 00:24:04,350
really massive application you can

00:24:02,049 --> 00:24:09,039
actually deploy it to an s3 bucket

00:24:04,350 --> 00:24:10,929
temporarily and then Zappa will load

00:24:09,039 --> 00:24:12,249
that from that bucket when the lambda

00:24:10,929 --> 00:24:14,139
functions are deployed which is slightly

00:24:12,249 --> 00:24:18,149
slower than DIF doing all in the in one

00:24:14,139 --> 00:24:21,009
go in brief inch and then timeouts and

00:24:18,149 --> 00:24:23,169
the slightly different so a pay our

00:24:21,009 --> 00:24:24,879
gateways I fault have 30 seconds timeout

00:24:23,169 --> 00:24:26,950
so your response has gotten sort of come

00:24:24,879 --> 00:24:28,299
back within 30 seconds although a lambda

00:24:26,950 --> 00:24:31,059
functions themselves can have much

00:24:28,299 --> 00:24:32,799
longer timeouts so you could you can run

00:24:31,059 --> 00:24:35,619
background tasks that take longer than

00:24:32,799 --> 00:24:37,119
30 seconds but if your end users you're

00:24:35,619 --> 00:24:39,039
restricted more by the the Gateway

00:24:37,119 --> 00:24:40,419
timeout of 30 seconds which hopefully

00:24:39,039 --> 00:24:45,340
should be enough if you're running a

00:24:40,419 --> 00:24:47,710
website quick mention of costs I don't

00:24:45,340 --> 00:24:50,220
want to take any note of the details on

00:24:47,710 --> 00:24:52,779
this it's more about pointing out that

00:24:50,220 --> 00:24:53,440
when you're talking about service and

00:24:52,779 --> 00:24:54,909
you're approaching it from the

00:24:53,440 --> 00:24:56,499
perspective of great this is going to

00:24:54,909 --> 00:24:59,019
cost me next to nothing or a few cents a

00:24:56,499 --> 00:25:01,450
year yes that is true

00:24:59,019 --> 00:25:03,279
for the lambda function component of

00:25:01,450 --> 00:25:06,190
itself you're gonna forget you've got

00:25:03,279 --> 00:25:09,480
enough free resource there to probably

00:25:06,190 --> 00:25:09,480
mean that will never cost you anything

00:25:10,019 --> 00:25:13,720
the database side of things is probably

00:25:12,279 --> 00:25:15,460
where you really need to look carefully

00:25:13,720 --> 00:25:17,409
about what the actual costs are and

00:25:15,460 --> 00:25:19,559
compare that to the costs of just

00:25:17,409 --> 00:25:22,690
running your own database elsewhere

00:25:19,559 --> 00:25:24,700
s3 you need to do a bit of a bit of

00:25:22,690 --> 00:25:26,019
analysis of how much throughput you're

00:25:24,700 --> 00:25:28,119
going to do that in terms of asset

00:25:26,019 --> 00:25:29,950
requests and how much you're storing in

00:25:28,119 --> 00:25:31,809
and out because that can be sort of

00:25:29,950 --> 00:25:33,879
non-trivial but again that's probably

00:25:31,809 --> 00:25:35,889
down to a few dollars worth a year maybe

00:25:33,879 --> 00:25:38,229
unless you got really high traffic and

00:25:35,889 --> 00:25:41,200
they're not the minor things like route

00:25:38,229 --> 00:25:44,440
53 so the idea is take a if you're gonna

00:25:41,200 --> 00:25:46,929
do this in a production way take it

00:25:44,440 --> 00:25:48,219
overall look at the costs AWS has got a

00:25:46,929 --> 00:25:49,599
quite good billing section actually

00:25:48,219 --> 00:25:52,029
keeps a good track of what all this is

00:25:49,599 --> 00:25:53,440
but it's quite hard to you don't

00:25:52,029 --> 00:26:01,239
necessarily discover at the start what

00:25:53,440 --> 00:26:03,759
all the costs are okay so I would say

00:26:01,239 --> 00:26:05,200
it's definitely worth giving a giving it

00:26:03,759 --> 00:26:07,389
goes up and makes it quite easy for you

00:26:05,200 --> 00:26:09,909
to deploy your personal projects into

00:26:07,389 --> 00:26:12,580
into a SS environment the free tier

00:26:09,909 --> 00:26:16,389
makes it pretty affordable zero cost for

00:26:12,580 --> 00:26:18,339
you to give it a whirl so why not and a

00:26:16,389 --> 00:26:21,330
reminder that just after this there's a

00:26:18,339 --> 00:26:23,349
workshop Adams got on building a Django

00:26:21,330 --> 00:26:26,670
serverless Django application if you

00:26:23,349 --> 00:26:34,660
want to learn a bit more thank you

00:26:26,670 --> 00:26:37,790
[Applause]

00:26:34,660 --> 00:26:40,730
thank you so much Neil Todd from torch

00:26:37,790 --> 00:26:43,430
box in UK and he'll be answering

00:26:40,730 --> 00:26:45,470
questions with the remaining time we

00:26:43,430 --> 00:26:48,290
have instructions on how to answer or

00:26:45,470 --> 00:26:51,110
ask a great question on on on our

00:26:48,290 --> 00:26:55,420
website and we look forward to hearing

00:26:51,110 --> 00:26:55,420
from people in the audience and online

00:27:09,140 --> 00:27:18,060
it's life all right Tom's just talking

00:27:12,090 --> 00:27:19,980
that's light is live now so I noticed

00:27:18,060 --> 00:27:23,490
you have a slide with a hamster in a

00:27:19,980 --> 00:27:25,770
treadmill is that a logo from something

00:27:23,490 --> 00:27:27,360
no that was that was just it was just I

00:27:25,770 --> 00:27:28,710
think I don't really care what this

00:27:27,360 --> 00:27:30,990
thing is I mean I did I did all the

00:27:28,710 --> 00:27:32,130
stuff with with zapper and got working

00:27:30,990 --> 00:27:33,870
on how to get it all to work and I

00:27:32,130 --> 00:27:36,120
thought actually I've got no idea what

00:27:33,870 --> 00:27:38,580
this process is how it works what it

00:27:36,120 --> 00:27:42,620
does I don't care could be hamsters in

00:27:38,580 --> 00:27:42,620
wheels for all excellent thanks

00:27:56,830 --> 00:28:00,370
okay I've got a question about things

00:27:58,960 --> 00:28:02,050
you have to do differently in

00:28:00,370 --> 00:28:04,720
structuring your application one of the

00:28:02,050 --> 00:28:06,580
advantages to having a monolithic server

00:28:04,720 --> 00:28:08,440
that you deploy is that the service

00:28:06,580 --> 00:28:10,750
starts it does all its warm up and then

00:28:08,440 --> 00:28:12,730
it is there and waiting zapper is based

00:28:10,750 --> 00:28:15,130
around the idea of running a function

00:28:12,730 --> 00:28:18,010
every time someone makes a request so if

00:28:15,130 --> 00:28:20,290
you have a even a relatively small

00:28:18,010 --> 00:28:23,290
warmup period before you conserve a

00:28:20,290 --> 00:28:25,720
request there is there's gonna be a lag

00:28:23,290 --> 00:28:27,520
in servicing every request is there

00:28:25,720 --> 00:28:28,810
anything you need to do in structuring

00:28:27,520 --> 00:28:31,990
your application particularly your

00:28:28,810 --> 00:28:34,690
Django application to make to make sure

00:28:31,990 --> 00:28:37,350
that that lead time is as small as

00:28:34,690 --> 00:28:39,190
possible yeah I think in terms of java

00:28:37,350 --> 00:28:41,830
application itself there's not much you

00:28:39,190 --> 00:28:43,900
can do in terms of that lead time as

00:28:41,830 --> 00:28:45,400
long as your functions kept warm at

00:28:43,900 --> 00:28:47,470
least my experience it feels pretty

00:28:45,400 --> 00:28:48,820
responsive once once it is warm looking

00:28:47,470 --> 00:28:52,660
three links doesn't feel like there's

00:28:48,820 --> 00:28:54,070
any lag where it does have an effect is

00:28:52,660 --> 00:28:56,620
I think it actually encourages you to

00:28:54,070 --> 00:28:57,880
look at your code itself and you're not

00:28:56,620 --> 00:29:01,180
saying well I've got this permanent

00:28:57,880 --> 00:29:02,890
infrastructure my request in run as long

00:29:01,180 --> 00:29:05,230
as it takes because it's I'm paying for

00:29:02,890 --> 00:29:07,690
that idle time anyway when you're paying

00:29:05,230 --> 00:29:09,760
for that cost time actually is it your

00:29:07,690 --> 00:29:11,260
incentive eyes to actually really focus

00:29:09,760 --> 00:29:13,780
on your application and get back get

00:29:11,260 --> 00:29:16,210
those times down so to reduce that

00:29:13,780 --> 00:29:19,300
overall latency to the end users to

00:29:16,210 --> 00:29:22,030
serve the requests and also reduces your

00:29:19,300 --> 00:29:26,500
costs if you can make your code run 20%

00:29:22,030 --> 00:29:28,290
faster normally you might 20% less cost

00:29:26,500 --> 00:29:30,880
as well so it's kind of a double benefit

00:29:28,290 --> 00:29:32,980
you mentioned that there is a way of

00:29:30,880 --> 00:29:34,960
keeping the things warm what how much of

00:29:32,980 --> 00:29:37,810
state or what state is kept warm in that

00:29:34,960 --> 00:29:40,020
in that context in essence I don't know

00:29:37,810 --> 00:29:45,010
exact details as far as I know some

00:29:40,020 --> 00:29:48,250
lambda angel' services will keep keep

00:29:45,010 --> 00:29:50,410
that function primed and ready to go on

00:29:48,250 --> 00:29:53,080
their servers wherever those servers are

00:29:50,410 --> 00:29:56,590
it hasn't had any response for a while

00:29:53,080 --> 00:29:57,780
kind of deep prioritizes it probably

00:29:56,590 --> 00:29:59,770
that's probably yeah you'll have

00:29:57,780 --> 00:30:01,540
billions of lambda functions out there

00:29:59,770 --> 00:30:04,420
that are not doing anything you never

00:30:01,540 --> 00:30:07,360
will so they get shut down so from a

00:30:04,420 --> 00:30:08,780
cold start there's a few second note a

00:30:07,360 --> 00:30:11,300
few hundred milliseconds lagged

00:30:08,780 --> 00:30:14,600
get back up but it's kept warm you are

00:30:11,300 --> 00:30:19,820
talking about sort of so 100 millisecond

00:30:14,600 --> 00:30:22,010
times to get the responses is there

00:30:19,820 --> 00:30:25,190
anything that we can do in django to

00:30:22,010 --> 00:30:27,140
improve this like warm-up face that

00:30:25,190 --> 00:30:29,990
anything specific for supper or for

00:30:27,140 --> 00:30:33,620
these function execute functions as a

00:30:29,990 --> 00:30:35,810
request don't think there's much you can

00:30:33,620 --> 00:30:37,430
do at the django layer that small doubt

00:30:35,810 --> 00:30:40,790
they've gone down to the implementation

00:30:37,430 --> 00:30:42,950
of the service the service level I guess

00:30:40,790 --> 00:30:44,630
different providers all have different

00:30:42,950 --> 00:30:45,350
ways of doing that and different but

00:30:44,630 --> 00:30:47,570
they were all they're all trying to

00:30:45,350 --> 00:30:49,100
drive those responses down and if they

00:30:47,570 --> 00:30:51,320
are pretty low particularly in the

00:30:49,100 --> 00:30:52,850
lambda1 Aurora service the database

00:30:51,320 --> 00:30:54,980
level is a kind of a entirely different

00:30:52,850 --> 00:30:57,140
beast the way that whole works that's

00:30:54,980 --> 00:30:58,670
yes we're not talking hundreds of

00:30:57,140 --> 00:31:01,190
milliseconds here we're talking 30

00:30:58,670 --> 00:31:13,750
seconds but everyone's trying to drive

00:31:01,190 --> 00:31:17,900
those starts down all right thanks aya

00:31:13,750 --> 00:31:19,160
so serverless the economic benefits of

00:31:17,900 --> 00:31:21,560
it are obviously going to be more

00:31:19,160 --> 00:31:24,110
pronounced when you've got this Dappy

00:31:21,560 --> 00:31:26,420
traffic and you've got areas where

00:31:24,110 --> 00:31:27,770
you're not getting any requests so you

00:31:26,420 --> 00:31:30,050
don't need to be paying for running it

00:31:27,770 --> 00:31:34,160
there what your thoughts on serverless

00:31:30,050 --> 00:31:36,380
you know for high-volume stuff or as

00:31:34,160 --> 00:31:39,890
you've built something that then becomes

00:31:36,380 --> 00:31:41,120
high-volume yeah that's that's an

00:31:39,890 --> 00:31:44,750
interesting one cuz a part I do

00:31:41,120 --> 00:31:46,610
partly did this because I'm gonna see

00:31:44,750 --> 00:31:48,440
whether it really works in this way so

00:31:46,610 --> 00:31:50,300
we had a client that was wanted to

00:31:48,440 --> 00:31:52,550
consolidate all their various sites onto

00:31:50,300 --> 00:31:54,620
one stack they chose Amazon Web Services

00:31:52,550 --> 00:31:56,990
and then thought ok we should try doing

00:31:54,620 --> 00:32:00,770
this service as well can we run our

00:31:56,990 --> 00:32:02,960
websites in this service way so we're

00:32:00,770 --> 00:32:04,730
attempting how about going to live

00:32:02,960 --> 00:32:06,830
launch next month so I'll probably know

00:32:04,730 --> 00:32:08,830
better better yeah that's that's gonna

00:32:06,830 --> 00:32:12,410
be interesting thing is can it handle

00:32:08,830 --> 00:32:15,050
that sort of high demand as the site's

00:32:12,410 --> 00:32:17,090
grow bigger are there any things we

00:32:15,050 --> 00:32:18,490
haven't fought about just because it's

00:32:17,090 --> 00:32:23,200
running in this

00:32:18,490 --> 00:32:25,929
surplice way are there any other factors

00:32:23,200 --> 00:32:29,619
about you know if it's being in a V PC

00:32:25,929 --> 00:32:30,369
are there any latency areas there in

00:32:29,619 --> 00:32:32,860
terms of talking to the database

00:32:30,369 --> 00:32:34,149
backwards and forwards so writing dental

00:32:32,860 --> 00:32:36,549
evidence if you do want to run in a

00:32:34,149 --> 00:32:37,990
virtual private cloud everything runs a

00:32:36,549 --> 00:32:42,100
little bit slower because it's talking

00:32:37,990 --> 00:32:43,929
over various elastic IPS so on the

00:32:42,100 --> 00:32:45,999
answer is I'm not 100% sure yet but I've

00:32:43,929 --> 00:32:48,419
got my fingers crossed the next month or

00:32:45,999 --> 00:32:51,129
two it thank you

00:32:48,419 --> 00:32:54,999
we have about a minute left maybe we can

00:32:51,129 --> 00:32:57,770
answer a quick question and if not we

00:32:54,999 --> 00:33:03,859
can get ready for the next speaker

00:32:57,770 --> 00:33:03,859

YouTube URL: https://www.youtube.com/watch?v=Kjee33g1z84


