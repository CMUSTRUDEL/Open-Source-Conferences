Title: DjangoCon 2019 - Fetching data from APIs using Django and GraphQl without hitting the rate li..
Publication date: 2019-04-23
Playlist: DjangoCon Europe 2019 in Copenhagen
Description: 
	Fetching data from APIs (GitHub) using Django and GraphQl without hitting the rate limits

https://2019.djangocon.eu/talks/fetching-data-from-apisgithub-using-django-and-gra/

By Manaswini Das: https://twitter.com/ManaswiniDas4
Captions: 
	00:00:00,030 --> 00:00:07,109
so hello world hello Django nuts

00:00:03,510 --> 00:00:09,059
hello netizens yeah I'm here to talk

00:00:07,109 --> 00:00:12,090
about fetching data from

00:00:09,059 --> 00:00:13,860
api's using Django and graph QL without

00:00:12,090 --> 00:00:17,160
hitting rate limits it's a pretty long

00:00:13,860 --> 00:00:19,520
title it's my first international talks

00:00:17,160 --> 00:00:23,100
so I mean I have to work on titles more

00:00:19,520 --> 00:00:26,279
so I'm Manish Anita's and I'm a student

00:00:23,100 --> 00:00:28,080
from computer science and engineering

00:00:26,279 --> 00:00:32,460
from college of engineering and

00:00:28,080 --> 00:00:35,340
technology from nature or de sandia so

00:00:32,460 --> 00:00:38,489
this is a project that I developed as a

00:00:35,340 --> 00:00:42,300
part of my RPG internship with Open

00:00:38,489 --> 00:00:45,239
Women's Foundation and 2018 so open

00:00:42,300 --> 00:00:48,210
humans platform provides a single

00:00:45,239 --> 00:00:50,760
platform for all the users to store

00:00:48,210 --> 00:00:53,699
their data including ancestry DNA

00:00:50,760 --> 00:00:57,840
23andme Fitbit all of that so my project

00:00:53,699 --> 00:01:00,180
proposal included including github and

00:00:57,840 --> 00:01:02,570
Twitter data sources to open humans so

00:01:00,180 --> 00:01:06,780
before moving on to that I would like to

00:01:02,570 --> 00:01:08,850
say Who am I so I'm a student I'm almost

00:01:06,780 --> 00:01:10,680
a graduate I'm almost there but since I

00:01:08,850 --> 00:01:14,820
haven't received my degree yet so I'm

00:01:10,680 --> 00:01:16,740
still an undergraduate I'm from I'm also

00:01:14,820 --> 00:01:19,350
processing foundation fellow 2000 I

00:01:16,740 --> 00:01:21,600
think that's going on now and a ghost

00:01:19,350 --> 00:01:27,240
route Summer of Code mentor and an RPG

00:01:21,600 --> 00:01:29,790
2018 alumna as well yeah so I had the

00:01:27,240 --> 00:01:32,549
liberty to choose api's to choose data

00:01:29,790 --> 00:01:35,210
sources so why did I choose github API

00:01:32,549 --> 00:01:38,220
and Twitter API is due to the fact that

00:01:35,210 --> 00:01:40,229
github API the data is already sorted

00:01:38,220 --> 00:01:42,180
and organized and which makes it an

00:01:40,229 --> 00:01:43,950
excellent source for visualization when

00:01:42,180 --> 00:01:45,509
you see all those green color you know

00:01:43,950 --> 00:01:47,340
contributions it gives you an

00:01:45,509 --> 00:01:52,079
inspiration to work more and to work for

00:01:47,340 --> 00:01:54,210
that darkest green and your profile then

00:01:52,079 --> 00:01:55,979
we have meticulous information regarding

00:01:54,210 --> 00:01:58,079
pull requests issues activities

00:01:55,979 --> 00:02:00,000
repository so yeah that's just a midi

00:01:58,079 --> 00:02:03,380
killers whole lot of data that you would

00:02:00,000 --> 00:02:05,460
like to see in your open hands account

00:02:03,380 --> 00:02:08,940
yes so moving on

00:02:05,460 --> 00:02:11,069
so I mentioned without hitting great

00:02:08,940 --> 00:02:13,560
limits so I need to cover what rate

00:02:11,069 --> 00:02:15,330
limits is all about so it is like

00:02:13,560 --> 00:02:17,130
amount of traffic outgoing and incoming

00:02:15,330 --> 00:02:20,459
to a particular network or a particular

00:02:17,130 --> 00:02:22,830
API so uh yeah so that's what rate

00:02:20,459 --> 00:02:25,230
limits are so you may have come across

00:02:22,830 --> 00:02:27,930
this request like it has already hit

00:02:25,230 --> 00:02:29,930
rate limits github EPA has 5,000

00:02:27,930 --> 00:02:33,209
requests per minute a Twitter API has

00:02:29,930 --> 00:02:36,330
616 requests per minute so that is rate

00:02:33,209 --> 00:02:39,599
limits it ensures better flow of data

00:02:36,330 --> 00:02:42,720
and increases a security and makes sure

00:02:39,599 --> 00:02:46,019
that you don't you know fetch a lot of

00:02:42,720 --> 00:02:49,170
data and that is not visible or not you

00:02:46,019 --> 00:02:51,900
know not able to organize very difficult

00:02:49,170 --> 00:02:54,390
to maintain so yeah so it increases a

00:02:51,900 --> 00:02:57,090
security in the way that it prevents

00:02:54,390 --> 00:02:59,069
DDoS attacks that is distributed denial

00:02:57,090 --> 00:03:02,220
of service attack that is not really for

00:02:59,069 --> 00:03:04,860
like it doesn't really pose a risk to

00:03:02,220 --> 00:03:06,810
this security risk but it renders a

00:03:04,860 --> 00:03:09,599
website or an online business and masa

00:03:06,810 --> 00:03:11,730
scible so it's it's dangerous it

00:03:09,599 --> 00:03:13,650
prevents users from making a net and to

00:03:11,730 --> 00:03:17,430
load on some information I covered that

00:03:13,650 --> 00:03:19,440
before so yeah moving on these are some

00:03:17,430 --> 00:03:21,930
of the challenges that I've faced while

00:03:19,440 --> 00:03:24,989
working with github API it uses rate

00:03:21,930 --> 00:03:27,299
limits so I had to respect that and they

00:03:24,989 --> 00:03:29,310
take care that if I fetch a lot of data

00:03:27,299 --> 00:03:31,829
that will not lead a lot of data but it

00:03:29,310 --> 00:03:33,989
will lead to a lot of errors so moving

00:03:31,829 --> 00:03:35,579
on we have a fetching data from a github

00:03:33,989 --> 00:03:36,930
takes time not because of the rate

00:03:35,579 --> 00:03:38,160
limits but it can be a lot of data

00:03:36,930 --> 00:03:40,799
depending upon your number of

00:03:38,160 --> 00:03:42,569
contributions we want to regularly

00:03:40,799 --> 00:03:44,190
update data and take into account data

00:03:42,569 --> 00:03:47,220
we already did upload to open humans

00:03:44,190 --> 00:03:49,590
yeah open humans has this ability to you

00:03:47,220 --> 00:03:54,840
know update the data that we already

00:03:49,590 --> 00:03:56,790
have since well you don't like stop

00:03:54,840 --> 00:03:58,920
contributing you just keep adding to

00:03:56,790 --> 00:04:03,840
your contributions so yeah it helps to

00:03:58,920 --> 00:04:06,109
update your data as well oh so so for

00:04:03,840 --> 00:04:09,630
rate limiting I used a salary and

00:04:06,109 --> 00:04:11,760
requests respectful for celery it's a

00:04:09,630 --> 00:04:13,290
simple flexible reliable distributed

00:04:11,760 --> 00:04:16,049
system to provide a fast amount of

00:04:13,290 --> 00:04:18,209
requests so it was it helped me a real

00:04:16,049 --> 00:04:20,100
lot and rate limiting apart from that we

00:04:18,209 --> 00:04:22,520
also have we also used a request

00:04:20,100 --> 00:04:25,229
respectful which is minimalist wrapper

00:04:22,520 --> 00:04:26,970
on requests to you know respect rate

00:04:25,229 --> 00:04:29,730
limits it helps helps

00:04:26,970 --> 00:04:32,430
a single threat single process or even a

00:04:29,730 --> 00:04:36,180
single machine at all so proxies HTTP

00:04:32,430 --> 00:04:38,280
requests for small code changes and it

00:04:36,180 --> 00:04:40,380
works with Python to run Python free as

00:04:38,280 --> 00:04:42,780
well you if you want to check you check

00:04:40,380 --> 00:04:45,390
it out it is link is in the description

00:04:42,780 --> 00:04:47,130
like github.com slash serpent di slice

00:04:45,390 --> 00:04:48,870
request respect foo you can just have a

00:04:47,130 --> 00:04:51,930
look there

00:04:48,870 --> 00:04:54,840
so I used craft cool so it was also upon

00:04:51,930 --> 00:04:58,290
me I fixed a lot of issues with REST API

00:04:54,840 --> 00:05:01,050
is well recipe as well touching data

00:04:58,290 --> 00:05:03,420
cause I had to fetch data from a number

00:05:01,050 --> 00:05:06,450
of VPS from multiple API so there was a

00:05:03,420 --> 00:05:09,210
risk of hitting rate limits so I shifted

00:05:06,450 --> 00:05:11,250
to graph QL graph QL is an open sourced

00:05:09,210 --> 00:05:13,830
server-side runtime specification

00:05:11,250 --> 00:05:15,990
developed by Facebook and it is as the

00:05:13,830 --> 00:05:19,710
name suggests its QL which is a query

00:05:15,990 --> 00:05:21,900
language to fetch and mutate query fetch

00:05:19,710 --> 00:05:27,150
and mutate data from leader searches is

00:05:21,900 --> 00:05:28,560
the logo for you yeah by graph cool yeah

00:05:27,150 --> 00:05:29,490
there are some reasons why I changed to

00:05:28,560 --> 00:05:31,080
graph cool

00:05:29,490 --> 00:05:33,810
the first reason being versioning

00:05:31,080 --> 00:05:35,880
recipes have a lot of versions taking

00:05:33,810 --> 00:05:38,940
into account github API REST API

00:05:35,880 --> 00:05:40,590
versions are Russian 1 2 & 3 but and

00:05:38,940 --> 00:05:42,570
graph you there is the single version if

00:05:40,590 --> 00:05:44,940
there is any updates that is to the

00:05:42,570 --> 00:05:47,640
single version itself so it make that

00:05:44,940 --> 00:05:51,000
version version anything really you know

00:05:47,640 --> 00:05:51,570
handy apart from that we have asked for

00:05:51,000 --> 00:05:56,910
what you need

00:05:51,570 --> 00:05:58,440
yeah the whatever you ask for like there

00:05:56,910 --> 00:06:00,600
is a specific format which is very

00:05:58,440 --> 00:06:02,370
similar to the JSON format if you are

00:06:00,600 --> 00:06:04,229
asking something and you don't want

00:06:02,370 --> 00:06:06,540
anything more or less than that so this

00:06:04,229 --> 00:06:09,900
is like a very to-the-point and concise

00:06:06,540 --> 00:06:16,350
a concise way to fetch data I don't know

00:06:09,900 --> 00:06:21,530
whether I can show you demo here let me

00:06:16,350 --> 00:06:21,530
say yeah I can I think

00:06:22,460 --> 00:06:38,169
oops I can't okay it's fine oh yeah I

00:06:34,460 --> 00:06:38,169
would like to show them at this screen

00:06:43,350 --> 00:06:48,250
okay so this is the demo this is the

00:06:46,390 --> 00:06:51,550
version 4 of gravity LAPI it has

00:06:48,250 --> 00:06:53,830
Explorer available to us you can see

00:06:51,550 --> 00:06:56,260
that this is the query on one side and

00:06:53,830 --> 00:06:59,770
this is the response on the other side

00:06:56,260 --> 00:07:03,280
whatever you asked for like a name with

00:06:59,770 --> 00:07:05,290
owner stargazers parts it just shows the

00:07:03,280 --> 00:07:06,910
exact data which is very similar to the

00:07:05,290 --> 00:07:08,740
query so what you can easily correlate

00:07:06,910 --> 00:07:13,510
if you are the best thing about

00:07:08,740 --> 00:07:16,030
explorers is that the thing is you can

00:07:13,510 --> 00:07:17,860
easily predict what will be your next

00:07:16,030 --> 00:07:20,080
node or what will be your next edge by

00:07:17,860 --> 00:07:22,150
simply clicking on control space so

00:07:20,080 --> 00:07:29,820
that's the best part about I get a

00:07:22,150 --> 00:07:29,820
gradual API reversion for I don't know

00:07:31,200 --> 00:07:38,170
yeah yeah so this was the demo then we

00:07:35,650 --> 00:07:40,330
have yet many EPA's response in a single

00:07:38,170 --> 00:07:42,940
request so that helped me a lot that

00:07:40,330 --> 00:07:45,460
helped me not Britt not hitting great

00:07:42,940 --> 00:07:47,620
limits and you know stitching a number

00:07:45,460 --> 00:07:49,720
of recipes and getting a single response

00:07:47,620 --> 00:07:51,670
out of that because graph QL provides a

00:07:49,720 --> 00:07:53,680
schema stitching which is really

00:07:51,670 --> 00:07:57,400
essential for querying from multiple

00:07:53,680 --> 00:08:01,180
recipients this is how graphical work

00:07:57,400 --> 00:08:03,400
works it has the client can work and

00:08:01,180 --> 00:08:05,740
operate wire you know any computer

00:08:03,400 --> 00:08:07,270
running any device then it sends a

00:08:05,740 --> 00:08:10,030
request to the graphic you will then

00:08:07,270 --> 00:08:12,790
graph you can fetch data from legacy

00:08:10,030 --> 00:08:14,620
systems micro-services our third party

00:08:12,790 --> 00:08:19,030
API engine produced you a single

00:08:14,620 --> 00:08:22,540
response so yeah this is a what I know

00:08:19,030 --> 00:08:24,910
all of you know a lot right you have

00:08:22,540 --> 00:08:27,970
heard about what I think how many feel

00:08:24,910 --> 00:08:29,860
know about what that's pretty lot of

00:08:27,970 --> 00:08:32,320
people but since this talk is for

00:08:29,860 --> 00:08:34,630
intermediate as well as beginner so I'd

00:08:32,320 --> 00:08:37,060
like to cover what it is we have almost

00:08:34,630 --> 00:08:39,400
come across this thing like sometimes

00:08:37,060 --> 00:08:42,460
ESP and asks to you know login with

00:08:39,400 --> 00:08:44,170
github and then you are sorry he's being

00:08:42,460 --> 00:08:47,800
asked whether you can log in with you

00:08:44,170 --> 00:08:48,970
know Facebook so you get to log in with

00:08:47,800 --> 00:08:50,950
Facebook without even entering your

00:08:48,970 --> 00:08:53,980
password so that is what a Werth is all

00:08:50,950 --> 00:08:56,860
about so this is how pretty much how

00:08:53,980 --> 00:09:00,430
what works first not ruined it was

00:08:56,860 --> 00:09:02,380
dissent then the resource una sends an

00:09:00,430 --> 00:09:04,390
authorization grant then the client

00:09:02,380 --> 00:09:06,540
sends an authorization granted the

00:09:04,390 --> 00:09:09,580
authorization server and then the

00:09:06,540 --> 00:09:12,370
transition server returns an access

00:09:09,580 --> 00:09:13,810
token and the access token is then

00:09:12,370 --> 00:09:15,580
returned to the resource server and then

00:09:13,810 --> 00:09:17,920
the protected resources so to the client

00:09:15,580 --> 00:09:22,150
so that is pretty how pretty much how or

00:09:17,920 --> 00:09:24,130
what works this is the workflow that I

00:09:22,150 --> 00:09:25,870
followed in a project that is first the

00:09:24,130 --> 00:09:29,170
user goes to the website provided by

00:09:25,870 --> 00:09:30,790
this report then authorizes the open

00:09:29,170 --> 00:09:32,170
humans you can also trace with a Google

00:09:30,790 --> 00:09:34,240
account so that is another or

00:09:32,170 --> 00:09:37,050
authentication taking place there then

00:09:34,240 --> 00:09:39,640
we have a redirect to the github page

00:09:37,050 --> 00:09:42,420
then you have to authorize with github

00:09:39,640 --> 00:09:45,580
that is again login with github and then

00:09:42,420 --> 00:09:47,530
utility is available as a file as a JSON

00:09:45,580 --> 00:09:50,290
file you can easily download that and

00:09:47,530 --> 00:09:52,330
yeah you can always click on the Update

00:09:50,290 --> 00:09:56,320
button and get regular updates of your

00:09:52,330 --> 00:09:59,560
own data there is an JSON format so demo

00:09:56,320 --> 00:10:03,100
time you can find this work and this

00:09:59,560 --> 00:10:05,230
link this is their management that says

00:10:03,100 --> 00:10:09,940
what o github source so you can go there

00:10:05,230 --> 00:10:14,320
and check so this is the video actually

00:10:09,940 --> 00:10:16,180
the thing is I was trying to run it in

00:10:14,320 --> 00:10:18,460
my own computer but there was some issue

00:10:16,180 --> 00:10:22,480
and it suddenly stopped working you you

00:10:18,460 --> 00:10:25,420
can relate to me right yeah so so I have

00:10:22,480 --> 00:10:27,490
somewhat managed to take you know a

00:10:25,420 --> 00:10:32,820
screen recording of that so I'd like to

00:10:27,490 --> 00:10:32,820
play it oh sorry

00:10:36,190 --> 00:10:39,460
I'm good

00:10:46,249 --> 00:10:49,749
I think it's not fine

00:10:55,300 --> 00:11:02,800
yeah so first first you have to start

00:11:00,220 --> 00:11:04,840
the server which is by me by typing

00:11:02,800 --> 00:11:07,330
Heroica local and your terminal are

00:11:04,840 --> 00:11:09,760
going to manage that by run server and

00:11:07,330 --> 00:11:12,850
then you have this app running at

00:11:09,760 --> 00:11:14,950
localhost 5,000 yes so just go on to

00:11:12,850 --> 00:11:17,200
localhost 5000 then you have this home

00:11:14,950 --> 00:11:19,180
screen which helps you integrate your

00:11:17,200 --> 00:11:20,980
github account to open humans and this

00:11:19,180 --> 00:11:25,110
is the home page so you have to click on

00:11:20,980 --> 00:11:26,620
start with open humans authorization

00:11:25,110 --> 00:11:30,550
yeah

00:11:26,620 --> 00:11:33,400
then it directly leads to the space but

00:11:30,550 --> 00:11:35,440
actually it skipped a water part you can

00:11:33,400 --> 00:11:38,140
sign in inside a sign up at the you know

00:11:35,440 --> 00:11:40,450
first thing then yeah so this is

00:11:38,140 --> 00:11:42,790
authorized github data upload then you

00:11:40,450 --> 00:11:49,750
have to authorize this app by clicking

00:11:42,790 --> 00:11:53,020
on that rice project then oh yeah so

00:11:49,750 --> 00:11:55,380
this leads to the redirect page that is

00:11:53,020 --> 00:12:06,760
for logging in into the tub and then

00:11:55,380 --> 00:12:09,460
yeah you have to login into the tub at

00:12:06,760 --> 00:12:11,530
first your data may not be visible but

00:12:09,460 --> 00:12:14,200
when you reload this your detail be

00:12:11,530 --> 00:12:17,730
visible yeah you can all see your data

00:12:14,200 --> 00:12:25,380
and in the terminal as well like this

00:12:17,730 --> 00:12:25,380
whole lot of data it's in JSON format so

00:12:25,950 --> 00:12:35,950
yeah just reload it and we get

00:12:32,370 --> 00:12:38,200
downloaded updater so new click on

00:12:35,950 --> 00:12:40,830
download you have that file available on

00:12:38,200 --> 00:12:40,830
your local system

00:12:45,549 --> 00:12:52,689
yeah so again that's pretty lot of data

00:12:48,439 --> 00:13:00,220
all the data will be as available yeah

00:12:52,689 --> 00:13:03,199
see so that's how I fetched data from

00:13:00,220 --> 00:13:06,019
from github API and made a visible to

00:13:03,199 --> 00:13:07,669
the open humans platform this data will

00:13:06,019 --> 00:13:22,549
be visible in your open humans account

00:13:07,669 --> 00:13:27,099
as well I think it's still loading it's

00:13:22,549 --> 00:13:27,099
boring okay let's switch next light

00:13:51,700 --> 00:13:59,620
yeah so this was all I had to say very I

00:13:57,190 --> 00:14:01,420
extend my heartfelt gratitude to Jango

00:13:59,620 --> 00:14:03,970
Khan Europe for organizing this awesome

00:14:01,420 --> 00:14:07,900
conference and having me speak my word

00:14:03,970 --> 00:14:10,240
out and I also have to give a huge

00:14:07,900 --> 00:14:11,830
shout-out to our preachy for giving me

00:14:10,240 --> 00:14:13,450
an opportunity to work with open humans

00:14:11,830 --> 00:14:16,060
organization I'd like also like to thank

00:14:13,450 --> 00:14:18,310
my mentor Mike Escalante Bastian and

00:14:16,060 --> 00:14:21,190
Matt price Paul for extending me to help

00:14:18,310 --> 00:14:22,750
them support and apart from that I'm

00:14:21,190 --> 00:14:25,150
very grateful to my parents and my

00:14:22,750 --> 00:14:29,790
friends for helping me reach where I am

00:14:25,150 --> 00:14:29,790
today so that's all I had thank you

00:14:37,630 --> 00:14:43,720
it was awesome thank you so much so we

00:14:40,670 --> 00:14:47,810
have a few minutes for some questions

00:14:43,720 --> 00:14:51,890
again we are using Jenko con QA online

00:14:47,810 --> 00:14:56,170
and you can also come up present in in

00:14:51,890 --> 00:14:56,170
the center if you are in the auditorium

00:14:59,260 --> 00:15:04,520
any questions I know it's already

00:15:02,390 --> 00:15:11,750
lunchtime but yeah we can answer

00:15:04,520 --> 00:15:14,630
questions did you use the actual was it

00:15:11,750 --> 00:15:18,590
only a test or did you actually use the

00:15:14,630 --> 00:15:23,780
ketchup data I I did I did use github

00:15:18,590 --> 00:15:26,860
data for what for for what like no I

00:15:23,780 --> 00:15:29,240
mean what what did you do with it like

00:15:26,860 --> 00:15:31,220
just yet upload it to the open humans

00:15:29,240 --> 00:15:32,810
platform and your data is visible like

00:15:31,220 --> 00:15:34,610
along with the other data sources that

00:15:32,810 --> 00:15:40,040
open windows provides such as 23andme

00:15:34,610 --> 00:15:41,630
and ancestry DNA and all of that at the

00:15:40,040 --> 00:15:43,210
next future scope is you know

00:15:41,630 --> 00:15:49,130
visualizing your data

00:15:43,210 --> 00:15:50,330
yeah thank you very much thank you hi so

00:15:49,130 --> 00:15:53,090
I've got a question for you in terms of

00:15:50,330 --> 00:15:55,820
the the practicalities of building a

00:15:53,090 --> 00:15:57,530
system like this graph QL is

00:15:55,820 --> 00:16:00,440
well-documented and have got its API is

00:15:57,530 --> 00:16:03,080
open a birthers document it has its

00:16:00,440 --> 00:16:04,850
api's but the actual mechanics of trying

00:16:03,080 --> 00:16:06,620
to get one to talk to the other and

00:16:04,850 --> 00:16:09,470
making all the pieces fit together can

00:16:06,620 --> 00:16:12,050
be complicated do you have any tips or

00:16:09,470 --> 00:16:14,600
suggestions for someone trying to debug

00:16:12,050 --> 00:16:16,400
why they're big system like this isn't

00:16:14,600 --> 00:16:18,350
working any tools or tips or tricks that

00:16:16,400 --> 00:16:21,920
were useful to you building this system

00:16:18,350 --> 00:16:25,130
okay a lot of my friends reached out to

00:16:21,920 --> 00:16:27,770
me I used like Stack Overflow was my

00:16:25,130 --> 00:16:30,290
home that time because I had to deal

00:16:27,770 --> 00:16:32,270
with a lot of you know errors there was

00:16:30,290 --> 00:16:33,770
a simple error like all of the that

00:16:32,270 --> 00:16:36,770
stuff was working all good and fine but

00:16:33,770 --> 00:16:40,100
suddenly Drita wasn't sewing so I just

00:16:36,770 --> 00:16:42,470
had to you know there was this tags so I

00:16:40,100 --> 00:16:44,810
just have to give github tag so that's

00:16:42,470 --> 00:16:46,220
that's what that's all I had to do there

00:16:44,810 --> 00:16:48,080
may be minor errors there may be major

00:16:46,220 --> 00:16:50,000
errors but it's better if you reach out

00:16:48,080 --> 00:16:54,820
and you know to forums I don't know

00:16:50,000 --> 00:16:57,950
answer your questions or not thank you

00:16:54,820 --> 00:17:00,080
hi thank you for your talk um I had a

00:16:57,950 --> 00:17:03,110
question about you mentioned as part of

00:17:00,080 --> 00:17:04,610
the open human project you need to with

00:17:03,110 --> 00:17:06,560
a certain number of requests that you

00:17:04,610 --> 00:17:11,020
can make before you get rate limited you

00:17:06,560 --> 00:17:13,670
need to figure out timely updates versus

00:17:11,020 --> 00:17:15,350
bringing in new records so if you're

00:17:13,670 --> 00:17:17,209
only working with without if you have

00:17:15,350 --> 00:17:19,550
millions of records but you only have a

00:17:17,209 --> 00:17:21,500
thousand API calls per minute how do you

00:17:19,550 --> 00:17:23,990
decide how many of those are going to be

00:17:21,500 --> 00:17:25,939
bringing in new records versus ham and

00:17:23,990 --> 00:17:28,820
trying to check and confirm that your

00:17:25,939 --> 00:17:31,040
historical records are still up to date

00:17:28,820 --> 00:17:33,950
I think grass graph Keable provides

00:17:31,040 --> 00:17:35,810
everything in a single API call so so

00:17:33,950 --> 00:17:38,690
that pretty much worked for me but I

00:17:35,810 --> 00:17:40,670
don't know whether I didn't have a

00:17:38,690 --> 00:17:47,450
chance to explore the limits thanks for

00:17:40,670 --> 00:17:50,710
the question is a question from the

00:17:47,450 --> 00:17:55,270
internet if there are any high profile

00:17:50,710 --> 00:17:59,810
graph QL API providers apart from github

00:17:55,270 --> 00:18:03,980
hi like are there any great most aps

00:17:59,810 --> 00:18:06,830
tend to be rest api's or xml stuff if

00:18:03,980 --> 00:18:12,230
there are any other graph QL API is that

00:18:06,830 --> 00:18:14,510
you're aware of that a rather large as

00:18:12,230 --> 00:18:17,690
well I was really lucky to find a

00:18:14,510 --> 00:18:19,850
gradual cohort for the recipe of github

00:18:17,690 --> 00:18:20,990
so I think it's pretty pretty most

00:18:19,850 --> 00:18:23,660
difficult if there is no documentation

00:18:20,990 --> 00:18:26,330
for graphical API is of different data

00:18:23,660 --> 00:18:31,040
sources but I was lucky to find that

00:18:26,330 --> 00:18:33,020
github covered thank you thank you thank

00:18:31,040 --> 00:18:34,660
you all for being with me any other

00:18:33,020 --> 00:18:37,960
questions

00:18:34,660 --> 00:18:41,849
it was awesome thank you so much

00:18:37,960 --> 00:18:41,849

YouTube URL: https://www.youtube.com/watch?v=IJ3qMXBRUXo


