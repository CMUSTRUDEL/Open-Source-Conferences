Title: DjangoCon 2019 -  Logging Rethought 2: The Actions of Frank Taylor Jr.
Publication date: 2019-04-23
Playlist: DjangoCon Europe 2019 in Copenhagen
Description: 
	https://2019.djangocon.eu/talks/logging-rethought-2-the-actions-of-frank-taylor-jr/

By Markus Holtermann - https://twitter.com/m_holtermann

Audio glitches in this video: The first 3 videos of the conference had audio quality glitches (small sound skips), which were fixed in subsequent talks. We apologise.
Captions: 
	00:00:06,740 --> 00:00:17,190
can I get his lights on there ah thank

00:00:12,120 --> 00:00:21,900
you all right good morning everybody

00:00:17,190 --> 00:00:24,119
morning thanks for being here thanks for

00:00:21,900 --> 00:00:26,760
the organizers for running this event

00:00:24,119 --> 00:00:29,640
cotton wherever you are this was amazing

00:00:26,760 --> 00:00:30,630
keynote thank you really inspiring there

00:00:29,640 --> 00:00:33,270
you are

00:00:30,630 --> 00:00:34,980
and also the venue give them a round of

00:00:33,270 --> 00:00:37,340
applause again because this is just

00:00:34,980 --> 00:00:37,340
fabulous

00:00:39,980 --> 00:00:47,520
right so today in human you're back good

00:00:44,040 --> 00:00:50,520
so today I want to talk to you about how

00:00:47,520 --> 00:00:51,600
lock information these days how we store

00:00:50,520 --> 00:00:54,600
information or have information

00:00:51,600 --> 00:00:58,770
available wendy run services in

00:00:54,600 --> 00:01:00,960
production and yeah Howie how I think

00:00:58,770 --> 00:01:03,090
that we can prove upon that and how we

00:01:00,960 --> 00:01:05,189
can turn that into something we can make

00:01:03,090 --> 00:01:11,460
gain more information from what we

00:01:05,189 --> 00:01:13,950
currently do and before I get into that

00:01:11,460 --> 00:01:16,560
let me briefly introduce myself I'm mice

00:01:13,950 --> 00:01:18,560
ottoman I'm trying a country with her

00:01:16,560 --> 00:01:20,939
even does not contribute to the core

00:01:18,560 --> 00:01:23,400
components for couple of years now

00:01:20,939 --> 00:01:25,799
I'm tend to be more on the security team

00:01:23,400 --> 00:01:28,920
and the general ops team these days in

00:01:25,799 --> 00:01:31,470
my day job I work at cryo which is the

00:01:28,920 --> 00:01:34,740
company behind database called cry TB

00:01:31,470 --> 00:01:36,299
which is for IOT settle data better

00:01:34,740 --> 00:01:39,240
action so if you want to talk about that

00:01:36,299 --> 00:01:43,829
stuff talk to me and find me I'm here

00:01:39,240 --> 00:01:46,860
until the end of the springs so let me

00:01:43,829 --> 00:01:48,780
talk about logging and the problems we

00:01:46,860 --> 00:01:51,899
are facing today we have applications

00:01:48,780 --> 00:01:53,970
that are run by or used by hundreds

00:01:51,899 --> 00:01:57,630
thousands maybe even millions of people

00:01:53,970 --> 00:02:01,110
and things are usually going smoothly

00:01:57,630 --> 00:02:04,710
and usually fine until down and then

00:02:01,110 --> 00:02:06,659
have problems and you have any years who

00:02:04,710 --> 00:02:10,560
need to figure out what is happening

00:02:06,659 --> 00:02:12,870
there and photos going wrong and well

00:02:10,560 --> 00:02:13,520
one of the things they do is they look

00:02:12,870 --> 00:02:16,340
at law

00:02:13,520 --> 00:02:19,220
messages and they look at what actually

00:02:16,340 --> 00:02:22,790
happened them and the log messages that

00:02:19,220 --> 00:02:26,390
we have is what we hardly what's yes

00:02:22,790 --> 00:02:30,680
currently come and the Cal State of

00:02:26,390 --> 00:02:32,360
logging I think is okay and I think this

00:02:30,680 --> 00:02:34,880
is a lot of good stuff happening there

00:02:32,360 --> 00:02:37,730
but it's also a lot of stuff but you can

00:02:34,880 --> 00:02:41,690
approve and that we can make that better

00:02:37,730 --> 00:02:43,640
and then we lock stuff these days it's

00:02:41,690 --> 00:02:46,130
probably gonna log look a bit like this

00:02:43,640 --> 00:02:48,500
we import the logging framework from

00:02:46,130 --> 00:02:52,850
person standard library we create a

00:02:48,500 --> 00:02:55,910
logger and then we have this text of pro

00:02:52,850 --> 00:02:56,420
text of what's happening like in this

00:02:55,910 --> 00:02:58,400
example

00:02:56,420 --> 00:02:59,960
logging felt because lock-in fail

00:02:58,400 --> 00:03:02,630
because in connection to the

00:02:59,960 --> 00:03:03,890
authentication provider something turned

00:03:02,630 --> 00:03:06,770
out and then we pass on the

00:03:03,890 --> 00:03:09,770
authentication provider and when this

00:03:06,770 --> 00:03:11,990
message ends up in the log files

00:03:09,770 --> 00:03:14,960
somewhere or in lock service it's gonna

00:03:11,990 --> 00:03:17,000
look like this like for somebody who has

00:03:14,960 --> 00:03:20,090
this enough English gate in English

00:03:17,000 --> 00:03:21,110
skills they can make assumptions and

00:03:20,090 --> 00:03:24,620
have an understanding of what's

00:03:21,110 --> 00:03:27,230
happening but it's up to them to

00:03:24,620 --> 00:03:29,480
actually understand what's happening at

00:03:27,230 --> 00:03:32,840
any time and because we look at log

00:03:29,480 --> 00:03:35,390
messages after the fact after something

00:03:32,840 --> 00:03:38,300
has happened maybe hours later because

00:03:35,390 --> 00:03:39,860
we didn't realize it in time it's really

00:03:38,300 --> 00:03:42,370
really hard to actually figure out what

00:03:39,860 --> 00:03:45,830
went wrong on that hat what happened and

00:03:42,370 --> 00:03:47,630
in this particular case for example the

00:03:45,830 --> 00:03:50,170
person the engineer who looks at this

00:03:47,630 --> 00:03:53,150
message and Stitch the son message and

00:03:50,170 --> 00:03:56,240
they can did use this well somebody

00:03:53,150 --> 00:03:59,030
probably try to login using some maybe

00:03:56,240 --> 00:04:02,060
Rolfe provider in this kid maybe or

00:03:59,030 --> 00:04:04,760
probably Google and something timed out

00:04:02,060 --> 00:04:06,530
because for whatever apparent reason

00:04:04,760 --> 00:04:08,600
nobody has frickin clue at that right

00:04:06,530 --> 00:04:09,920
here at that point in time because

00:04:08,600 --> 00:04:13,580
there's no additional information about

00:04:09,920 --> 00:04:16,160
that and yeah this after formation

00:04:13,580 --> 00:04:17,810
already provides a lot of or this log

00:04:16,160 --> 00:04:20,030
message or it provides a lot of context

00:04:17,810 --> 00:04:23,479
and information but it's not actually

00:04:20,030 --> 00:04:26,090
really helpful I think because I think

00:04:23,479 --> 00:04:27,030
it's at this point while working is

00:04:26,090 --> 00:04:30,390
broken

00:04:27,030 --> 00:04:32,310
and our locking is broken because when I

00:04:30,390 --> 00:04:33,780
see this lock marriage there's a bunch

00:04:32,310 --> 00:04:37,160
of questions that I would like to ask

00:04:33,780 --> 00:04:40,530
we're just not gonna get an answer on

00:04:37,160 --> 00:04:43,230
what was the IP address or the host that

00:04:40,530 --> 00:04:45,350
this server that the lock message was

00:04:43,230 --> 00:04:48,990
written on talk to

00:04:45,350 --> 00:04:52,620
what was the where did the that is try

00:04:48,990 --> 00:04:55,200
to connect you or what was hard limit

00:04:52,620 --> 00:04:57,690
was five milliseconds five minutes big

00:04:55,200 --> 00:05:00,060
five milliseconds for something external

00:04:57,690 --> 00:05:02,940
is probably far too short maybe it was a

00:05:00,060 --> 00:05:05,040
configuration medic or how many other

00:05:02,940 --> 00:05:07,230
attempts were there that were made to

00:05:05,040 --> 00:05:09,720
talk to the provider as it was an

00:05:07,230 --> 00:05:12,870
isolated incident or was it something

00:05:09,720 --> 00:05:16,350
that's like happens for hundreds of

00:05:12,870 --> 00:05:18,000
users easily and now even more

00:05:16,350 --> 00:05:20,550
importance are things like stuff like

00:05:18,000 --> 00:05:22,169
where whether outgoing connections of

00:05:20,550 --> 00:05:24,630
other outgoing connections affected as

00:05:22,169 --> 00:05:27,720
well or what is this connection to this

00:05:24,630 --> 00:05:30,200
one service which as an engineer could

00:05:27,720 --> 00:05:32,910
give you additional information about

00:05:30,200 --> 00:05:34,860
its main on their side or is it

00:05:32,910 --> 00:05:38,460
something on your side some routing

00:05:34,860 --> 00:05:40,200
that's broken and the other service

00:05:38,460 --> 00:05:42,150
affected was just this one server that

00:05:40,200 --> 00:05:45,900
failed or was it's like your whole fleet

00:05:42,150 --> 00:05:47,910
service and I think this information we

00:05:45,900 --> 00:05:51,780
could actually ask to those messages

00:05:47,910 --> 00:05:55,050
like you can have this message this says

00:05:51,780 --> 00:05:58,560
authentication to programs to hosts

00:05:55,050 --> 00:06:01,590
whatever at times this failed this like

00:05:58,560 --> 00:06:05,610
time at high mountain amount of whatever

00:06:01,590 --> 00:06:07,410
and then you have a five kilometers long

00:06:05,610 --> 00:06:08,880
log message that nobody is able to

00:06:07,410 --> 00:06:10,830
comprehend because they have all the

00:06:08,880 --> 00:06:14,490
information that you could possibly want

00:06:10,830 --> 00:06:16,950
in there at which point I think those

00:06:14,490 --> 00:06:19,169
prost all messages are just not gonna

00:06:16,950 --> 00:06:21,450
cut it and I'm not gonna help and I'm

00:06:19,169 --> 00:06:24,630
not really the thing we should be using

00:06:21,450 --> 00:06:26,130
these days anyway instead I think we

00:06:24,630 --> 00:06:27,780
should look into something that's more

00:06:26,130 --> 00:06:30,990
structured we should should add

00:06:27,780 --> 00:06:33,500
structure to the lock or to the log

00:06:30,990 --> 00:06:39,470
messages that we have these days

00:06:33,500 --> 00:06:42,300
for example look at this instead of

00:06:39,470 --> 00:06:44,590
using pythons

00:06:42,300 --> 00:06:46,930
framework on locking lottery we use a

00:06:44,590 --> 00:06:50,440
library called struck lock this is

00:06:46,930 --> 00:06:53,080
structured logging and we created logger

00:06:50,440 --> 00:06:57,160
similar to before and then instead of

00:06:53,080 --> 00:07:00,580
having this long text we have event this

00:06:57,160 --> 00:07:04,560
event is a string short string it's

00:07:00,580 --> 00:07:08,740
provided in very necess

00:07:04,560 --> 00:07:11,530
the very specific meaning that this that

00:07:08,740 --> 00:07:14,260
about what's happening and then you

00:07:11,530 --> 00:07:17,100
attach annotations or additional

00:07:14,260 --> 00:07:19,300
informations attributes to this event

00:07:17,100 --> 00:07:23,800
all the information you have at that

00:07:19,300 --> 00:07:26,770
point that you could remotely think that

00:07:23,800 --> 00:07:29,800
could be helpful to provide our name the

00:07:26,770 --> 00:07:31,390
IP the timeout if whatever couldn't come

00:07:29,800 --> 00:07:33,100
up with when you're right lock message

00:07:31,390 --> 00:07:35,050
and at the later stage when you realize

00:07:33,100 --> 00:07:37,180
oh actually this value would have been

00:07:35,050 --> 00:07:39,460
helpful at all start walking it as well

00:07:37,180 --> 00:07:42,940
it's easy to just add another value

00:07:39,460 --> 00:07:44,920
there and then in the lock messages that

00:07:42,940 --> 00:07:47,650
is you in your laptop it might look like

00:07:44,920 --> 00:07:51,340
this it looks obviously different than

00:07:47,650 --> 00:07:53,800
this text that we had before it still

00:07:51,340 --> 00:07:56,200
contains the time the error level or

00:07:53,800 --> 00:07:57,940
lockable it contains the event and like

00:07:56,200 --> 00:08:00,820
all the attributes that you said before

00:07:57,940 --> 00:08:02,950
and this is also the server because the

00:08:00,820 --> 00:08:06,130
when we configured straight lock added

00:08:02,950 --> 00:08:08,380
the server automatically and you can do

00:08:06,130 --> 00:08:12,370
have do other things automatically at

00:08:08,380 --> 00:08:14,650
automatically and now that we have some

00:08:12,370 --> 00:08:17,650
kind of structured data we can actually

00:08:14,650 --> 00:08:20,320
think about reusing that in some

00:08:17,650 --> 00:08:24,490
slightly different way than used to do

00:08:20,320 --> 00:08:27,100
before so I guess the most commonly used

00:08:24,490 --> 00:08:29,770
structured format these days in the

00:08:27,100 --> 00:08:31,600
modern world anyway and like losing XML

00:08:29,770 --> 00:08:35,440
out because that's kind of like the or

00:08:31,600 --> 00:08:38,710
thing it's probably Jason so we can have

00:08:35,440 --> 00:08:41,260
this structured thing log it as a JSON

00:08:38,710 --> 00:08:42,490
object into a file or into slabs and

00:08:41,260 --> 00:08:45,850
walk service or whatnot

00:08:42,490 --> 00:08:48,250
and then when we have structured data we

00:08:45,850 --> 00:08:50,470
can reuse that and throw it into a

00:08:48,250 --> 00:08:51,880
database occur it into the database like

00:08:50,470 --> 00:08:55,670
elastic search into a database like

00:08:51,880 --> 00:08:57,890
 or any of those that's

00:08:55,670 --> 00:09:00,650
deal with structure data but are not

00:08:57,890 --> 00:09:05,210
bound to necessary specifics specific

00:09:00,650 --> 00:09:07,940
schemas and then with that we can do

00:09:05,210 --> 00:09:10,730
something far more helpful than what we

00:09:07,940 --> 00:09:13,310
have and we look at a million records or

00:09:10,730 --> 00:09:16,130
million lines of work messages we can

00:09:13,310 --> 00:09:19,550
visualize what happens in our systems

00:09:16,130 --> 00:09:24,230
and when you think about that what you

00:09:19,550 --> 00:09:26,080
see is what you understand and thinking

00:09:24,230 --> 00:09:31,250
about this message that we had before

00:09:26,080 --> 00:09:34,250
let's show this graph have a brief look

00:09:31,250 --> 00:09:37,250
at it the green lines with the three

00:09:34,250 --> 00:09:39,260
spikes are the successful authentication

00:09:37,250 --> 00:09:43,670
provider communications and the yellow

00:09:39,260 --> 00:09:46,520
ones are the ones that held now the lock

00:09:43,670 --> 00:09:51,560
message that we saw before is about at

00:09:46,520 --> 00:09:53,750
this point now can you guess what now

00:09:51,560 --> 00:09:56,180
happened or can you think about some of

00:09:53,750 --> 00:09:59,270
questions that I asked earlier start

00:09:56,180 --> 00:10:01,880
like was it an identity incident well

00:09:59,270 --> 00:10:05,870
you look at graph and you can say no

00:10:01,880 --> 00:10:09,950
it's not because obviously for visually

00:10:05,870 --> 00:10:12,740
apparent reasons there are more cases of

00:10:09,950 --> 00:10:14,420
that error message of that message that

00:10:12,740 --> 00:10:17,620
event it failed

00:10:14,420 --> 00:10:21,230
where something failed and you can see

00:10:17,620 --> 00:10:25,580
that something one way or not the other

00:10:21,230 --> 00:10:28,190
way and I think this is all far more

00:10:25,580 --> 00:10:33,260
helpful than scored through million

00:10:28,190 --> 00:10:34,870
lines of log messages and I purchased as

00:10:33,260 --> 00:10:37,520
more than thousand words

00:10:34,870 --> 00:10:39,350
because very now correlate this graph

00:10:37,520 --> 00:10:43,070
with a different one for example this

00:10:39,350 --> 00:10:45,050
one then as an engineer you might who

00:10:43,070 --> 00:10:48,380
has understanding of the environment you

00:10:45,050 --> 00:10:54,020
might have a better understanding of the

00:10:48,380 --> 00:10:56,810
entire setup and the can have a good

00:10:54,020 --> 00:11:00,980
idea of what's happening on a large

00:10:56,810 --> 00:11:03,170
scale now these graphs show the total

00:11:00,980 --> 00:11:06,170
amount of what messages for a given

00:11:03,170 --> 00:11:08,360
level so the blue lines are the debug

00:11:06,170 --> 00:11:09,580
messages greenness info and writers

00:11:08,360 --> 00:11:13,130
error

00:11:09,580 --> 00:11:15,080
now the blue lock blue ones kind of

00:11:13,130 --> 00:11:17,240
followed the pattern that we had for the

00:11:15,080 --> 00:11:20,270
green default in the previous graph with

00:11:17,240 --> 00:11:23,600
three spots and it's fine that's kind of

00:11:20,270 --> 00:11:25,820
like I guess what you expected then the

00:11:23,600 --> 00:11:28,490
green graph which stays pretty much at

00:11:25,820 --> 00:11:32,390
the bottom has a few small spikes just

00:11:28,490 --> 00:11:35,420
like common in full lock message noise

00:11:32,390 --> 00:11:38,750
it's called it that and that's fine and

00:11:35,420 --> 00:11:40,430
then until the error messages on the

00:11:38,750 --> 00:11:44,930
kind of on the same level as green one

00:11:40,430 --> 00:11:48,800
because it's a lot of best random data

00:11:44,930 --> 00:11:50,720
set I generated here the red arrow is

00:11:48,800 --> 00:11:53,960
other error messages the error message

00:11:50,720 --> 00:11:57,410
account kind of briefly had inclined at

00:11:53,960 --> 00:12:02,450
12 p.m. now that can have all kinds of

00:11:57,410 --> 00:12:04,490
reasons because what you could really

00:12:02,450 --> 00:12:07,040
think about the other graph that error

00:12:04,490 --> 00:12:08,960
hadn't liked about at this big spike

00:12:07,040 --> 00:12:12,140
what could have happened here is that

00:12:08,960 --> 00:12:14,210
somebody started stole staged world and

00:12:12,140 --> 00:12:17,210
deployed the application on the

00:12:14,210 --> 00:12:20,270
configuration change to a set of servers

00:12:17,210 --> 00:12:22,520
a small set and that set of servers

00:12:20,270 --> 00:12:25,010
raised a couple of errors possibly not

00:12:22,520 --> 00:12:29,030
enough that triggers the whole province

00:12:25,010 --> 00:12:32,510
to to stop and because didn't saw that

00:12:29,030 --> 00:12:35,450
it went to the second stage which you

00:12:32,510 --> 00:12:36,980
can see here it's increased again I mean

00:12:35,450 --> 00:12:39,260
it's still not enough for the whole

00:12:36,980 --> 00:12:42,410
thing to fall over to stop

00:12:39,260 --> 00:12:44,750
so the deployment automation just went

00:12:42,410 --> 00:12:48,560
all ahead deployed the code to

00:12:44,750 --> 00:12:50,120
everything and well there you are with

00:12:48,560 --> 00:12:52,940
like your whole application failing and

00:12:50,120 --> 00:12:55,040
nothing working anymore now this is

00:12:52,940 --> 00:12:58,209
something you can see you look at this

00:12:55,040 --> 00:13:00,920
graph you can see something is wrong and

00:12:58,209 --> 00:13:02,830
you don't need to scroll through your

00:13:00,920 --> 00:13:06,920
little odds of four messages

00:13:02,830 --> 00:13:09,110
it is this knowledge engineer can gain

00:13:06,920 --> 00:13:11,660
by looking at something without spending

00:13:09,110 --> 00:13:14,450
hours of haim on figuring out what's

00:13:11,660 --> 00:13:16,520
happening especially when you have stuff

00:13:14,450 --> 00:13:19,820
like automating happen having the

00:13:16,520 --> 00:13:21,200
original in size in your software kind

00:13:19,820 --> 00:13:22,060
of provides a lot of valuable

00:13:21,200 --> 00:13:24,850
information

00:13:22,060 --> 00:13:29,020
I think and this is not really possible

00:13:24,850 --> 00:13:31,570
I mean to some degree sure but it's not

00:13:29,020 --> 00:13:35,910
really possible to do with like to

00:13:31,570 --> 00:13:39,670
modern-day the cold like postal messages

00:13:35,910 --> 00:13:42,520
now all the things we've talked about

00:13:39,670 --> 00:13:45,610
right now we're like this this system

00:13:42,520 --> 00:13:48,730
where you have your one application may

00:13:45,610 --> 00:13:53,890
be running a multiple service that bass

00:13:48,730 --> 00:13:55,510
things now think about the micro or

00:13:53,890 --> 00:13:59,310
macro service infrastructure that you

00:13:55,510 --> 00:14:01,600
have I think about the thousands of or

00:13:59,310 --> 00:14:03,730
maintenance but dozens or hundreds of

00:14:01,600 --> 00:14:06,730
services that talk to each other and

00:14:03,730 --> 00:14:08,290
it's this micro service framework or

00:14:06,730 --> 00:14:10,690
make Microsoft architecture that you

00:14:08,290 --> 00:14:13,420
build because your boss thought that

00:14:10,690 --> 00:14:15,720
like Microsoft is very cool idea and

00:14:13,420 --> 00:14:18,430
it's like the best idea ever

00:14:15,720 --> 00:14:20,230
who if you think that the micro services

00:14:18,430 --> 00:14:22,690
they or micro service or hyper service

00:14:20,230 --> 00:14:25,720
architecture they have actually is like

00:14:22,690 --> 00:14:27,640
stable and they have services that meant

00:14:25,720 --> 00:14:29,880
someone service fault of it doesn't like

00:14:27,640 --> 00:14:34,230
make the whole thing blow away blow up

00:14:29,880 --> 00:14:43,690
anybody as you want hand up the airbag

00:14:34,230 --> 00:14:46,210
good on you yeah I think that a lot of

00:14:43,690 --> 00:14:48,760
the information we currently have and we

00:14:46,210 --> 00:14:50,620
currently do blogging is not giving us

00:14:48,760 --> 00:14:53,830
actually the information that need in

00:14:50,620 --> 00:14:57,270
order to figure out what why when one

00:14:53,830 --> 00:14:59,740
stars falls over wire tree falls over

00:14:57,270 --> 00:15:01,270
because you have this one service that

00:14:59,740 --> 00:15:03,430
talks to another that talks to another I

00:15:01,270 --> 00:15:05,560
put something or EQ that it's done then

00:15:03,430 --> 00:15:06,340
worked on by some workers that do them

00:15:05,560 --> 00:15:10,150
something else

00:15:06,340 --> 00:15:12,280
if anything in this change fails how

00:15:10,150 --> 00:15:14,290
does the services dependent depend on

00:15:12,280 --> 00:15:19,330
that actually are able to deal with it

00:15:14,290 --> 00:15:23,410
and I think a very big part of that is

00:15:19,330 --> 00:15:26,950
not being certain how the events that

00:15:23,410 --> 00:15:29,740
happen in our systems actually correlate

00:15:26,950 --> 00:15:32,380
to each other so are you able to trace

00:15:29,740 --> 00:15:35,360
that's this one thing a user did on

00:15:32,380 --> 00:15:37,579
their on your front end actually

00:15:35,360 --> 00:15:40,540
we figure out that this thing caused

00:15:37,579 --> 00:15:44,240
this thing to not work in the back end

00:15:40,540 --> 00:15:47,269
somewhere maybe because they entered

00:15:44,240 --> 00:15:50,260
some value and we had email address with

00:15:47,269 --> 00:15:53,360
a whatever a plus sign in the before yet

00:15:50,260 --> 00:15:56,570
and all the sudden you're in higher

00:15:53,360 --> 00:16:00,110
billing process buys because you have

00:15:56,570 --> 00:16:02,390
some error handling area like if you if

00:16:00,110 --> 00:16:04,970
the service dies and you don't have any

00:16:02,390 --> 00:16:07,220
trading in there it's you you're gonna

00:16:04,970 --> 00:16:10,240
have very very very interesting time

00:16:07,220 --> 00:16:13,690
figuring this out and so the thing I'm

00:16:10,240 --> 00:16:16,760
wanted propitious to do something called

00:16:13,690 --> 00:16:19,760
event tracing so essentially the very

00:16:16,760 --> 00:16:20,450
first time you see a request come to

00:16:19,760 --> 00:16:23,089
your system

00:16:20,450 --> 00:16:26,209
you give it a unique ID pass on to your

00:16:23,089 --> 00:16:29,540
ID for for examples just quite

00:16:26,209 --> 00:16:32,480
sufficient for that unique it's pretty

00:16:29,540 --> 00:16:35,089
much globally unique you attach it to

00:16:32,480 --> 00:16:37,220
this first the request the first time

00:16:35,089 --> 00:16:41,660
frame comes in and then every single

00:16:37,220 --> 00:16:45,140
time you look anything ever you attach

00:16:41,660 --> 00:16:47,390
this trace ID to this lock and because

00:16:45,140 --> 00:16:52,399
you have structured long you can just

00:16:47,390 --> 00:16:54,860
add this attribute and you can even go

00:16:52,399 --> 00:16:57,829
further because then you pass this face

00:16:54,860 --> 00:16:59,750
ID on to the next service on to the next

00:16:57,829 --> 00:17:02,480
on to the next you put it in the queue

00:16:59,750 --> 00:17:04,640
the your celery worker is going to

00:17:02,480 --> 00:17:05,299
figure this out for you see oh there's a

00:17:04,640 --> 00:17:06,799
trace ID

00:17:05,299 --> 00:17:09,020
I should probably attach that to all the

00:17:06,799 --> 00:17:11,780
log messages alright as well and then

00:17:09,020 --> 00:17:13,839
when you see this one thing failing you

00:17:11,780 --> 00:17:16,549
see trace ID and then you can go and

00:17:13,839 --> 00:17:19,069
look at all the log messages and have

00:17:16,549 --> 00:17:22,579
this ready and then you can see the

00:17:19,069 --> 00:17:25,280
whole flow of how your whole data flow

00:17:22,579 --> 00:17:28,069
through your entire architecture with

00:17:25,280 --> 00:17:31,190
that you can actually understand why

00:17:28,069 --> 00:17:34,510
some service field because some but

00:17:31,190 --> 00:17:37,220
something happens somewhere else and

00:17:34,510 --> 00:17:40,700
well we a general con so I'd better show

00:17:37,220 --> 00:17:43,880
some code is related to Jenga so we have

00:17:40,700 --> 00:17:47,330
this actual library we have the logging

00:17:43,880 --> 00:17:49,700
frame or a structure and this is a

00:17:47,330 --> 00:17:52,130
middleware for but you just put

00:17:49,700 --> 00:17:54,919
middle there in the first first middle

00:17:52,130 --> 00:17:57,919
very in your in your settings and what

00:17:54,919 --> 00:18:00,769
it does attaches the trace ID to request

00:17:57,919 --> 00:18:03,710
to the request object and it either

00:18:00,769 --> 00:18:06,320
takes the request ID from a header extra

00:18:03,710 --> 00:18:09,409
ID or it generates new one

00:18:06,320 --> 00:18:12,500
so if request comes in from the outside

00:18:09,409 --> 00:18:14,750
world and you do proper filtering on

00:18:12,500 --> 00:18:18,080
headers like although Security's not as

00:18:14,750 --> 00:18:23,510
you know security thing you actually do

00:18:18,080 --> 00:18:26,240
it and then you became certain that it's

00:18:23,510 --> 00:18:29,210
not that the trace ID is generated by

00:18:26,240 --> 00:18:32,510
you by yourself or that when you talk to

00:18:29,210 --> 00:18:35,389
the service from other services in your

00:18:32,510 --> 00:18:38,480
back and then you can ascertain that

00:18:35,389 --> 00:18:41,090
this actually is one of your trace ID so

00:18:38,480 --> 00:18:42,740
you know a new one or some trace ID that

00:18:41,090 --> 00:18:45,850
comes from because it's the request from

00:18:42,740 --> 00:18:53,240
one of your albums other services you

00:18:45,850 --> 00:18:55,340
create a new Locker here in in the

00:18:53,240 --> 00:18:58,669
middleware that's some struct or

00:18:55,340 --> 00:19:02,539
internals it's local and behavior I

00:18:58,669 --> 00:19:04,760
guess and this one with this trace ID

00:19:02,539 --> 00:19:06,950
equals request ID yeah you will

00:19:04,760 --> 00:19:11,149
ascertain that everything that happens

00:19:06,950 --> 00:19:12,980
within this request will have this lock

00:19:11,149 --> 00:19:17,029
this trace ID attitude to it every

00:19:12,980 --> 00:19:18,590
single log message ever until the river

00:19:17,029 --> 00:19:20,899
starts terminate or the next weakest

00:19:18,590 --> 00:19:24,980
rather come in at which point it's gonna

00:19:20,899 --> 00:19:27,100
have a new treasure and then similarly

00:19:24,980 --> 00:19:29,240
you can put something after the

00:19:27,100 --> 00:19:34,309
authentication middleware for example

00:19:29,240 --> 00:19:36,649
and you bind the user ID on the logger

00:19:34,309 --> 00:19:39,710
so everything from that point onwards

00:19:36,649 --> 00:19:43,010
will include the current really the user

00:19:39,710 --> 00:19:46,669
ID of the currently logged in user or no

00:19:43,010 --> 00:19:52,880
trade yet or no user ID if the user is

00:19:46,669 --> 00:19:53,990
not authenticated now when the EU we

00:19:52,880 --> 00:19:56,120
have a whole bunch of interesting

00:19:53,990 --> 00:19:58,159
relations and think about Drago con last

00:19:56,120 --> 00:20:02,720
year there was this for later thing

00:19:58,159 --> 00:20:03,530
called EPR so logging data these days is

00:20:02,720 --> 00:20:05,450
actually pretty fun

00:20:03,530 --> 00:20:07,190
or actually pretties something you

00:20:05,450 --> 00:20:09,500
really want to think about what you do

00:20:07,190 --> 00:20:11,720
for example you never ever want unlock

00:20:09,500 --> 00:20:14,150
secrets hello Facebook hello github

00:20:11,720 --> 00:20:15,890
hello Peter if you want half your

00:20:14,150 --> 00:20:19,220
company's name next to that please do

00:20:15,890 --> 00:20:21,560
that and like what could users password

00:20:19,220 --> 00:20:22,160
or something I recommend you do down

00:20:21,560 --> 00:20:27,640
with it

00:20:22,160 --> 00:20:27,640
it's bad practically yes so I've heard

00:20:28,000 --> 00:20:33,140
also you kind of don't want to

00:20:31,010 --> 00:20:35,000
accidentally expose all the locks that

00:20:33,140 --> 00:20:40,400
you lock sure yeah to the outside world

00:20:35,000 --> 00:20:42,980
like static as three buckets are very

00:20:40,400 --> 00:20:45,020
very good at being publicly readable or

00:20:42,980 --> 00:20:47,390
possibly even writable it is really

00:20:45,020 --> 00:20:50,390
great idea I have that I'm still early

00:20:47,390 --> 00:20:54,290
to something holding one Ruby and which

00:20:50,390 --> 00:20:55,790
is like one of those and why but when

00:20:54,290 --> 00:20:58,340
you've read certain newsletters this is

00:20:55,790 --> 00:21:01,940
like every with this somebody else who

00:20:58,340 --> 00:21:04,580
had the publicly accessible MongoDB I

00:21:01,940 --> 00:21:07,640
mean I never say never but so far I've

00:21:04,580 --> 00:21:11,180
not had that I think something fell over

00:21:07,640 --> 00:21:12,620
them and then yeah be explicit about

00:21:11,180 --> 00:21:15,140
what do you log I guess that's the more

00:21:12,620 --> 00:21:18,380
important part about the the gdpr thing

00:21:15,140 --> 00:21:20,630
don't do the first one like such

00:21:18,380 --> 00:21:22,010
explicit attributes that you want to

00:21:20,630 --> 00:21:23,900
have that you want to look to your

00:21:22,010 --> 00:21:26,270
office and you have end up in your

00:21:23,900 --> 00:21:27,830
system down to the letter because you

00:21:26,270 --> 00:21:30,590
have no freaking idea what's actually on

00:21:27,830 --> 00:21:35,540
this object what it might not just work

00:21:30,590 --> 00:21:36,760
um right so with a bit less than ten

00:21:35,540 --> 00:21:42,200
minutes left

00:21:36,760 --> 00:21:43,970
who the heck is Frank Taylor jr. let me

00:21:42,200 --> 00:21:47,090
answer that with a slightly different

00:21:43,970 --> 00:21:49,240
question who here knows the movie catch

00:21:47,090 --> 00:21:52,550
me if you can

00:21:49,240 --> 00:21:55,790
okay everybody let me give you brief

00:21:52,550 --> 00:21:57,680
Rancher it's a the main character is a

00:21:55,790 --> 00:22:00,740
person called Frank William Abagnale and

00:21:57,680 --> 00:22:04,180
he figures out a bunch of cons where he

00:22:00,740 --> 00:22:09,020
wants banks airlines airports hotels

00:22:04,180 --> 00:22:10,340
like all those interesting companies and

00:22:09,020 --> 00:22:13,190
organizations where you can make money

00:22:10,340 --> 00:22:16,340
or can save money or other and the

00:22:13,190 --> 00:22:17,809
problem is that nobody's actually really

00:22:16,340 --> 00:22:21,950
able to trace him until

00:22:17,809 --> 00:22:24,649
point and one of that reason is that he

00:22:21,950 --> 00:22:27,200
why his nobody's able to trace him it's

00:22:24,649 --> 00:22:30,349
because you figured out how or he was

00:22:27,200 --> 00:22:33,200
smart enough to cover his tracks and he

00:22:30,349 --> 00:22:38,779
figured out how to like walk around the

00:22:33,200 --> 00:22:40,999
u.s. check routing new system by forging

00:22:38,779 --> 00:22:44,299
checks and having them routed through

00:22:40,999 --> 00:22:48,499
the whole country and the thing is that

00:22:44,299 --> 00:22:51,440
when you take this make example from the

00:22:48,499 --> 00:22:53,089
real world and apply to something to

00:22:51,440 --> 00:22:56,629
some make micro service architecture

00:22:53,089 --> 00:23:00,440
maybe then if you are able to trace

00:22:56,629 --> 00:23:02,359
events across your entire system you can

00:23:00,440 --> 00:23:06,320
actually figure out who did what and

00:23:02,359 --> 00:23:09,729
what happened and why and I think the

00:23:06,320 --> 00:23:12,889
key here is that with proper logging and

00:23:09,729 --> 00:23:17,179
more smarter logging that we currently

00:23:12,889 --> 00:23:22,460
do in most cases I think we can gain for

00:23:17,179 --> 00:23:25,609
more information and can get much yeah

00:23:22,460 --> 00:23:27,999
getting much more intelligence about our

00:23:25,609 --> 00:23:32,409
users about how our system is being used

00:23:27,999 --> 00:23:35,239
about the resilience of our services and

00:23:32,409 --> 00:23:37,549
yeah this is I think there's a lot of

00:23:35,239 --> 00:23:40,549
gain by going into a more structured

00:23:37,549 --> 00:23:44,330
logging approach and at this point I

00:23:40,549 --> 00:23:47,450
wanted to go with a more live demo but

00:23:44,330 --> 00:23:48,649
didn't actually have time to finish that

00:23:47,450 --> 00:23:52,729
so

00:23:48,649 --> 00:23:54,619
also I'm really out of live demo on

00:23:52,729 --> 00:23:56,989
stage and I'm promised myself never do

00:23:54,619 --> 00:23:59,690
that so I caught it with an example

00:23:56,989 --> 00:24:01,669
there's a cow on good lap if you want to

00:23:59,690 --> 00:24:04,549
run this thing it's a docker compose set

00:24:01,669 --> 00:24:07,759
up we just centrally

00:24:04,549 --> 00:24:09,070
replace this this catch me if you can

00:24:07,759 --> 00:24:12,979
thing a bit

00:24:09,070 --> 00:24:15,049
you have manigott nginx startup page in

00:24:12,979 --> 00:24:17,719
the next page that you can visit there

00:24:15,049 --> 00:24:20,570
comes up with a there's a there's two

00:24:17,719 --> 00:24:23,929
banks that you can deposit money and

00:24:20,570 --> 00:24:26,899
wire shacks and wire money from one

00:24:23,929 --> 00:24:30,930
person to another there's an airline

00:24:26,899 --> 00:24:32,940
where you can book flights there's a

00:24:30,930 --> 00:24:34,920
another spot where you can then see all

00:24:32,940 --> 00:24:38,220
the events that happen in this system

00:24:34,920 --> 00:24:41,790
with like how this wire transfer from

00:24:38,220 --> 00:24:44,910
one bank to another flew through the

00:24:41,790 --> 00:24:48,030
system or how this cheque that use used

00:24:44,910 --> 00:24:49,920
to pay for this flight and it at this

00:24:48,030 --> 00:24:51,960
Bank but because that's the local bank

00:24:49,920 --> 00:24:54,420
and then needed to go through the other

00:24:51,960 --> 00:24:56,910
side of the country and then like all

00:24:54,420 --> 00:24:59,550
those events this event rating kind of

00:24:56,910 --> 00:25:02,490
being bit mocked and like like

00:24:59,550 --> 00:25:04,410
abstracted here and then you can also go

00:25:02,490 --> 00:25:07,700
and like look at the raw data base you

00:25:04,410 --> 00:25:10,470
and like all the log roll log events and

00:25:07,700 --> 00:25:18,390
you have a look and see airplay around

00:25:10,470 --> 00:25:20,040
and yeah that's the example now I forgot

00:25:18,390 --> 00:25:25,350
what I wanted to do I actually wanted to

00:25:20,040 --> 00:25:27,990
make this repository public I can't do

00:25:25,350 --> 00:25:31,940
that right after the talk or while you

00:25:27,990 --> 00:25:31,940
prepare for your question thank you

00:25:39,350 --> 00:25:46,460
Jamarcus and do we have any questions

00:25:42,120 --> 00:25:46,460
again please line up at the microphone

00:25:52,860 --> 00:25:58,510
hello Marcus are in transfers

00:25:55,150 --> 00:26:00,160
interesting talk in a practical start we

00:25:58,510 --> 00:26:03,210
not only have our German education but

00:26:00,160 --> 00:26:06,510
also ingenious man who is he post mess

00:26:03,210 --> 00:26:08,740
how would we go back sharing or

00:26:06,510 --> 00:26:11,340
correlating the logs not leaves the

00:26:08,740 --> 00:26:13,870
trace ideas at the time such a way of

00:26:11,340 --> 00:26:16,630
having the same name for the same fields

00:26:13,870 --> 00:26:19,960
Oliver are you aware of any standards or

00:26:16,630 --> 00:26:27,570
initiatives to have consistent naming

00:26:19,960 --> 00:26:29,770
scheme for social laws or I think it's

00:26:27,570 --> 00:26:32,290
really you build your Microsoft

00:26:29,770 --> 00:26:35,290
architecture is it like one team or

00:26:32,290 --> 00:26:37,919
maybe a few very few teams that but the

00:26:35,290 --> 00:26:40,630
whole thing of 20 services or is it like

00:26:37,919 --> 00:26:44,230
50 individual teams that each have their

00:26:40,630 --> 00:26:46,240
own thing that where they publish an API

00:26:44,230 --> 00:26:48,820
and that's about it about communication

00:26:46,240 --> 00:26:51,220
between them in the formal sense you can

00:26:48,820 --> 00:26:53,140
probably go and like understand that

00:26:51,220 --> 00:26:56,890
this is what we hold in these fields or

00:26:53,140 --> 00:26:59,530
this is a best practice on how fears are

00:26:56,890 --> 00:27:01,900
caught for example always include an

00:26:59,530 --> 00:27:07,600
underscore ID if it's the ID of an

00:27:01,900 --> 00:27:10,900
object and yeah if it's the individual

00:27:07,600 --> 00:27:12,820
teams I think it's much harder to I mean

00:27:10,900 --> 00:27:16,360
you should still enforce certain things

00:27:12,820 --> 00:27:17,710
there's also if you have individual

00:27:16,360 --> 00:27:21,040
teams you don't wanna take too much of

00:27:17,710 --> 00:27:25,510
the independency off and away from them

00:27:21,040 --> 00:27:29,260
so this is I guess it depends it on the

00:27:25,510 --> 00:27:31,750
particular case of your organization it

00:27:29,260 --> 00:27:34,150
sounds and I guess at the whole internet

00:27:31,750 --> 00:27:37,169
committee leaf or nothing exists but

00:27:34,150 --> 00:27:37,169
you're worth yeah

00:27:39,300 --> 00:27:46,800
to expand a little bit on the previous

00:27:41,520 --> 00:27:50,309
question Jason and structured logging is

00:27:46,800 --> 00:27:52,559
like a little bit going in both

00:27:50,309 --> 00:27:55,710
directions because if you're saving

00:27:52,559 --> 00:27:57,750
Jason into a database what kind of

00:27:55,710 --> 00:28:01,470
structure do you have how can you still

00:27:57,750 --> 00:28:04,380
search in it with a whelping performant

00:28:01,470 --> 00:28:07,559
I mean you said you don't want to post

00:28:04,380 --> 00:28:11,280
too many rules but on the other hand if

00:28:07,559 --> 00:28:13,050
you have like 200 different log messages

00:28:11,280 --> 00:28:14,760
with different feeds how are you going

00:28:13,050 --> 00:28:19,500
to search in the how I going to find

00:28:14,760 --> 00:28:22,290
anything again so the output is more a

00:28:19,500 --> 00:28:24,300
thing to have a structured way to write

00:28:22,290 --> 00:28:25,650
it some way in the third in a log file

00:28:24,300 --> 00:28:29,010
or something that's then being picked up

00:28:25,650 --> 00:28:33,270
by whatever fluency or hobby or

00:28:29,010 --> 00:28:35,160
something it's thrown into a more or

00:28:33,270 --> 00:28:38,809
less schema-less database or databases

00:28:35,160 --> 00:28:41,790
can handle dynamic schemas I said it's I

00:28:38,809 --> 00:28:43,559
think it's a highly depend on the

00:28:41,790 --> 00:28:45,990
application of the environment very

00:28:43,559 --> 00:28:49,500
built in with your system you probably

00:28:45,990 --> 00:28:54,450
wanna have some enforcement's it's edges

00:28:49,500 --> 00:28:57,330
are at some point anyway but I think

00:28:54,450 --> 00:29:01,020
this also just a bunch of best practices

00:28:57,330 --> 00:29:04,410
that just exist that like you things

00:29:01,020 --> 00:29:07,620
like you call if it you call it what it

00:29:04,410 --> 00:29:09,870
is what you think it should be like if

00:29:07,620 --> 00:29:11,670
it's if it's an ID call it an ID if it's

00:29:09,870 --> 00:29:16,440
milliseconds call it a millisecond it's

00:29:11,670 --> 00:29:17,640
not something arbitrary like I guess

00:29:16,440 --> 00:29:19,920
it's if you're thinking about it from

00:29:17,640 --> 00:29:21,990
the when you look at more ops

00:29:19,920 --> 00:29:23,790
perspective like from users in that

00:29:21,990 --> 00:29:26,750
direction they have a couple of best

00:29:23,790 --> 00:29:30,270
practices on this and on the page how to

00:29:26,750 --> 00:29:33,120
name metrics like include base unit for

00:29:30,270 --> 00:29:35,370
example this is probably something that

00:29:33,120 --> 00:29:41,070
a good recommendation that you do but

00:29:35,370 --> 00:29:43,600
yeah guess highly dependent on Jason

00:29:41,070 --> 00:29:45,090
hi Marcus that was a very interesting

00:29:43,600 --> 00:29:47,890
talk

00:29:45,090 --> 00:29:51,580
it's a bit of a continuation to the

00:29:47,890 --> 00:29:53,950
previous question a lot of places we are

00:29:51,580 --> 00:29:57,450
where we use more than one server in

00:29:53,950 --> 00:30:00,250
parallel and if it's not micro services

00:29:57,450 --> 00:30:04,840
he used some sort of logging service a

00:30:00,250 --> 00:30:09,220
lot of those other using the lk stack

00:30:04,840 --> 00:30:11,970
and I was wondering if struck Lo has any

00:30:09,220 --> 00:30:18,160
integration with that that can make it

00:30:11,970 --> 00:30:21,850
be easier to use more place morale the

00:30:18,160 --> 00:30:24,190
role of a at quit replacement for the

00:30:21,850 --> 00:30:26,860
start items on that library and then you

00:30:24,190 --> 00:30:29,890
lock it to a file and have sub it or

00:30:26,860 --> 00:30:33,910
whatever us through NT and sort of in

00:30:29,890 --> 00:30:35,830
whatever status you have that's you

00:30:33,910 --> 00:30:37,750
wouldn't do that within the request for

00:30:35,830 --> 00:30:44,980
example you wouldn't handle like this

00:30:37,750 --> 00:30:47,429
right into data or as well do we have

00:30:44,980 --> 00:30:52,710
any questions from the internet Russell

00:30:47,429 --> 00:30:52,710
ok and that's it Thank You Marcus

00:30:56,560 --> 00:31:02,040

YouTube URL: https://www.youtube.com/watch?v=Y5eyEgyHLLo


