Title: DjangoCon 2019 - Django and Web Security Headers
Publication date: 2019-04-23
Playlist: DjangoCon Europe 2019 in Copenhagen
Description: 
	https://2019.djangocon.eu/talks/django-and-web-security-headers/

By Adam Johnson - https://twitter.com/AdamChainz
Captions: 
	00:00:05,240 --> 00:00:12,090
hello there weekend so security can

00:00:10,080 --> 00:00:13,769
often be considered a boring topic in

00:00:12,090 --> 00:00:15,630
fact two speakers today have already

00:00:13,769 --> 00:00:18,090
said that Marcus made a passing comment

00:00:15,630 --> 00:00:21,510
too boring security features in his talk

00:00:18,090 --> 00:00:23,340
and Nathan put up a list of interesting

00:00:21,510 --> 00:00:24,300
topics and then said oh no two of these

00:00:23,340 --> 00:00:26,750
aren't interesting

00:00:24,300 --> 00:00:30,029
they were the security features

00:00:26,750 --> 00:00:32,910
thankfully security is really quite easy

00:00:30,029 --> 00:00:34,620
to put in your Janko application and I'm

00:00:32,910 --> 00:00:36,809
going to talk through one specific part

00:00:34,620 --> 00:00:39,480
of security which is these security

00:00:36,809 --> 00:00:42,239
headers but first briefly about me

00:00:39,480 --> 00:00:45,510
I'm Adam Johnson I am one of the django

00:00:42,239 --> 00:00:47,610
core team and you can find me at github

00:00:45,510 --> 00:00:50,340
or twitter by the username

00:00:47,610 --> 00:00:53,520
Adam chains my email address is Mia Adam

00:00:50,340 --> 00:00:56,489
jdu and that's also my website Adam jdu

00:00:53,520 --> 00:00:58,590
on the 12th of April I may have to

00:00:56,489 --> 00:01:02,690
change my domain name because I will no

00:00:58,590 --> 00:01:05,479
longer be an EU citizen we'll find out

00:01:02,690 --> 00:01:09,360
so what are these web security headers

00:01:05,479 --> 00:01:12,990
so the web is a platform with a lot of

00:01:09,360 --> 00:01:14,490
backwards compatibility concerns and all

00:01:12,990 --> 00:01:18,119
the browsers are trying to keep all the

00:01:14,490 --> 00:01:20,189
websites working for all time so Tim

00:01:18,119 --> 00:01:22,530
berners-lee homepage the first website

00:01:20,189 --> 00:01:25,350
still needs to work and then the latest

00:01:22,530 --> 00:01:29,549
hotness with HTTP 3 or whatever needs to

00:01:25,350 --> 00:01:32,490
work as well as a result of this a lot

00:01:29,549 --> 00:01:37,259
of the problems we find in the web

00:01:32,490 --> 00:01:39,990
behavior and they cannot be instantly

00:01:37,259 --> 00:01:41,790
changed so there are lots of things

00:01:39,990 --> 00:01:44,729
where you need to opt-in to get the more

00:01:41,790 --> 00:01:46,170
secure behavior and a bunch of

00:01:44,729 --> 00:01:48,090
mechanisms that have been used over time

00:01:46,170 --> 00:01:50,549
but one that seems to have been settled

00:01:48,090 --> 00:01:53,159
on is setting headers so your server

00:01:50,549 --> 00:01:57,810
says in the HTTP header by the way

00:01:53,159 --> 00:01:59,490
browser you need to act like this and

00:01:57,810 --> 00:02:01,590
it's quite easy to check these there's a

00:01:59,490 --> 00:02:03,719
checker called security headers com

00:02:01,590 --> 00:02:05,130
you can point this at a URL it will tell

00:02:03,719 --> 00:02:08,459
you which headers are being set and give

00:02:05,130 --> 00:02:10,349
you a score from F to a plus and this is

00:02:08,459 --> 00:02:11,819
a great checker it's by a security

00:02:10,349 --> 00:02:12,750
researcher Scott helm who I'll talk

00:02:11,819 --> 00:02:14,760
about a bit more

00:02:12,750 --> 00:02:17,010
there's also one called Mozilla

00:02:14,760 --> 00:02:18,840
Observatory that will tell you a lot

00:02:17,010 --> 00:02:20,340
more problems with your website this one

00:02:18,840 --> 00:02:24,020
focuses just on headers so that's what

00:02:20,340 --> 00:02:27,390
I'm using it here here's what yahoo.com

00:02:24,020 --> 00:02:30,480
scores so they're getting an A+ so

00:02:27,390 --> 00:02:34,860
they're doing extremely well here's

00:02:30,480 --> 00:02:37,110
google.com scoring a C so I think this

00:02:34,860 --> 00:02:38,940
illustrates the first point is that you

00:02:37,110 --> 00:02:41,670
can be secure without turning these all

00:02:38,940 --> 00:02:44,340
on and but it's worth knowing about all

00:02:41,670 --> 00:02:48,180
of them and choosing which ones to turn

00:02:44,340 --> 00:02:50,760
on in which situations and maybe putting

00:02:48,180 --> 00:02:52,080
enough on to get that a plus score you

00:02:50,760 --> 00:02:57,150
can impress your boss and say hey look

00:02:52,080 --> 00:02:58,709
we're better than Google so this is the

00:02:57,150 --> 00:02:59,370
kind of listicle talk everyone loves

00:02:58,709 --> 00:03:01,680
listicles

00:02:59,370 --> 00:03:03,180
so my meatloaf more interesting these

00:03:01,680 --> 00:03:04,470
are all the headers I'm not going to

00:03:03,180 --> 00:03:06,660
read them out right now because I might

00:03:04,470 --> 00:03:08,340
stumble they're quite complicated and

00:03:06,660 --> 00:03:11,910
but we'll go through them one at a time

00:03:08,340 --> 00:03:14,040
the first for Django provides a feature

00:03:11,910 --> 00:03:16,709
for us to enable in the most secure

00:03:14,040 --> 00:03:18,390
manner the last three will install a

00:03:16,709 --> 00:03:22,970
third-party package to help configure

00:03:18,390 --> 00:03:26,910
them and I'll explain them one by one so

00:03:22,970 --> 00:03:30,720
X X s has protection try saying that ten

00:03:26,910 --> 00:03:33,959
times quickly XSS is cross-site

00:03:30,720 --> 00:03:36,500
scripting and it's not the best name for

00:03:33,959 --> 00:03:38,489
what's happening when this happens and

00:03:36,500 --> 00:03:41,760
it's really a kind of code injection

00:03:38,489 --> 00:03:43,110
attack initially it was you know code

00:03:41,760 --> 00:03:45,420
being included from other sites

00:03:43,110 --> 00:03:47,190
sometimes it can mean code being

00:03:45,420 --> 00:03:52,079
included from your own site or perhaps

00:03:47,190 --> 00:03:54,450
one of your other domains and this

00:03:52,079 --> 00:03:57,630
happens when you've got some bad code on

00:03:54,450 --> 00:04:01,950
your server that allows a user to inject

00:03:57,630 --> 00:04:03,450
their own code and onto the site perhaps

00:04:01,950 --> 00:04:06,780
by putting it in the database or by

00:04:03,450 --> 00:04:08,910
putting it through a URL parameter so

00:04:06,780 --> 00:04:12,030
that second one is kind of easy to catch

00:04:08,910 --> 00:04:15,299
and because of that browsers have built

00:04:12,030 --> 00:04:19,140
in these things called XSS auditors so

00:04:15,299 --> 00:04:20,579
the auditor is a little class function

00:04:19,140 --> 00:04:23,070
that's running on every single page

00:04:20,579 --> 00:04:24,120
request in the browser each of the

00:04:23,070 --> 00:04:25,840
browser's have built their own

00:04:24,120 --> 00:04:27,310
individual ones

00:04:25,840 --> 00:04:30,460
but they will work very similarly and

00:04:27,310 --> 00:04:33,310
they will try and spot an XSS attack in

00:04:30,460 --> 00:04:36,250
action and if they see that they will

00:04:33,310 --> 00:04:37,780
say actually let's not do that and so

00:04:36,250 --> 00:04:39,580
they're kind of like a guardrail that

00:04:37,780 --> 00:04:42,639
been put on the Internet they're not

00:04:39,580 --> 00:04:47,440
entirely backwards compatible and but

00:04:42,639 --> 00:04:50,139
they opted for a like midpoint so if an

00:04:47,440 --> 00:04:52,389
XSS attack happens I'll show you a demo

00:04:50,139 --> 00:04:55,840
in a second they will stop that one

00:04:52,389 --> 00:04:59,260
request but if you set this header X XSS

00:04:55,840 --> 00:05:00,340
protection and give the mode block you

00:04:59,260 --> 00:05:03,330
can actually have it block the whole

00:05:00,340 --> 00:05:06,790
page and you'd probably want to do this

00:05:03,330 --> 00:05:08,290
because if there's one thing going wrong

00:05:06,790 --> 00:05:10,270
it might be an indicator that the

00:05:08,290 --> 00:05:11,800
auditors managed to spot one corner of

00:05:10,270 --> 00:05:13,780
an attack and there's other things going

00:05:11,800 --> 00:05:17,740
on on the page so you don't want to harm

00:05:13,780 --> 00:05:20,710
your users here's a demo from that

00:05:17,740 --> 00:05:22,780
security researcher Scott helm and you

00:05:20,710 --> 00:05:24,190
can just google Scott helm X XSS

00:05:22,780 --> 00:05:27,160
protection if you want to try this

00:05:24,190 --> 00:05:30,190
so his site has the header set with this

00:05:27,160 --> 00:05:32,410
mode equals block flag and then he tells

00:05:30,190 --> 00:05:34,419
you try loading this page but with this

00:05:32,410 --> 00:05:37,030
different link and if we inspect the

00:05:34,419 --> 00:05:39,250
link you can see it's got a query

00:05:37,030 --> 00:05:40,210
parameter called foo that includes a

00:05:39,250 --> 00:05:43,960
script tag

00:05:40,210 --> 00:05:45,910
so the XSS auditor will scan that and

00:05:43,960 --> 00:05:47,560
see oh look there's a script tag on the

00:05:45,910 --> 00:05:50,470
page and the script tag was in the query

00:05:47,560 --> 00:05:52,180
parameter we should probably be not

00:05:50,470 --> 00:05:54,880
loading that script and because he has

00:05:52,180 --> 00:05:57,580
the header it gets blocked instead which

00:05:54,880 --> 00:05:59,680
looks like this and so the chrome just

00:05:57,580 --> 00:06:01,780
says there's pages I'm working there's

00:05:59,680 --> 00:06:03,910
nothing you can do to if I pass this and

00:06:01,780 --> 00:06:06,729
if we look like the error message says

00:06:03,910 --> 00:06:07,990
error blocked by XSS auditor so if

00:06:06,729 --> 00:06:13,419
someone sends your screenshot you can

00:06:07,990 --> 00:06:14,919
kind of figure out what's going on to

00:06:13,419 --> 00:06:17,320
activate this in Django it's quite

00:06:14,919 --> 00:06:19,030
simple it's built in and as with all

00:06:17,320 --> 00:06:21,729
these built-in ones as well if you run

00:06:19,030 --> 00:06:23,350
manage drop pie check - - deploy you'll

00:06:21,729 --> 00:06:26,289
get a warning that you haven't enabled

00:06:23,350 --> 00:06:28,120
it if you haven't so you simply have the

00:06:26,289 --> 00:06:30,370
security middleware in your middleware

00:06:28,120 --> 00:06:32,139
setting this is done in the default stop

00:06:30,370 --> 00:06:34,330
project template and then you switch

00:06:32,139 --> 00:06:37,350
this flag over to truth secure browser

00:06:34,330 --> 00:06:39,330
XSS filter equals true and

00:06:37,350 --> 00:06:41,400
would suppose this isn't in the default

00:06:39,330 --> 00:06:42,780
project template simply because Django

00:06:41,400 --> 00:06:46,920
projects themselves have to try and be

00:06:42,780 --> 00:06:50,010
backwards compatible this is quite an

00:06:46,920 --> 00:06:53,670
easy one to turn on the second one

00:06:50,010 --> 00:06:56,280
strict Transport Security this is a

00:06:53,670 --> 00:06:59,400
little more complicated so if you're

00:06:56,280 --> 00:07:01,740
surfing your site over HTTPS that's

00:06:59,400 --> 00:07:05,370
great that is what we want it's modern

00:07:01,740 --> 00:07:08,520
and if you're using HTTP 2 the only way

00:07:05,370 --> 00:07:10,740
to make that work is over HTTPS most web

00:07:08,520 --> 00:07:12,720
sites on the Internet are HTTPS now

00:07:10,740 --> 00:07:16,110
especially most web sites being launched

00:07:12,720 --> 00:07:19,260
and the one problem with doing this is

00:07:16,110 --> 00:07:22,920
that browsers will automatically ask for

00:07:19,260 --> 00:07:24,990
HTTP first and this redirect step is

00:07:22,920 --> 00:07:27,660
still insecure so if someone comes to

00:07:24,990 --> 00:07:29,670
your server asked for the HTTP mode of

00:07:27,660 --> 00:07:32,580
the website and you say no wait where

00:07:29,670 --> 00:07:34,980
HTTPS now they get a redirect but that

00:07:32,580 --> 00:07:36,990
first redirect if an attacker in the

00:07:34,980 --> 00:07:39,600
middle managed to serve different

00:07:36,990 --> 00:07:43,890
content to them because they know no our

00:07:39,600 --> 00:07:45,420
domain is now over here at Evo comm so

00:07:43,890 --> 00:07:47,880
if you set this header strict Transport

00:07:45,420 --> 00:07:50,400
Security the first time someone lose

00:07:47,880 --> 00:07:53,070
your site the browser remembers the

00:07:50,400 --> 00:07:56,850
header and says ok I'll never talk to

00:07:53,070 --> 00:07:59,730
you on HTTP again then in a week or a

00:07:56,850 --> 00:08:02,670
month and basically depending upon your

00:07:59,730 --> 00:08:04,560
choices this website operator and if

00:08:02,670 --> 00:08:06,450
they load the page again from a link or

00:08:04,560 --> 00:08:08,370
by typing into there you are over the

00:08:06,450 --> 00:08:11,280
browser will not make that initial HTTP

00:08:08,370 --> 00:08:13,290
request so it's great we can set it in a

00:08:11,280 --> 00:08:15,990
header and then there's this bonus of

00:08:13,290 --> 00:08:19,320
this preload database and this is a list

00:08:15,990 --> 00:08:21,990
maintained by Google that it's loaded

00:08:19,320 --> 00:08:23,700
into most browsers these days of all the

00:08:21,990 --> 00:08:26,400
websites that have not only set strict

00:08:23,700 --> 00:08:28,350
Transport Security but have also said we

00:08:26,400 --> 00:08:29,790
want to be in this preload list and that

00:08:28,350 --> 00:08:32,789
way the browser's will never ever make

00:08:29,790 --> 00:08:35,190
the initial HTTP request they load the

00:08:32,789 --> 00:08:36,690
local database built into the browser so

00:08:35,190 --> 00:08:39,840
your website can be on this list of the

00:08:36,690 --> 00:08:42,390
most secure domains here's what the

00:08:39,840 --> 00:08:44,400
preload list looks like you simply enter

00:08:42,390 --> 00:08:47,880
in your domain it has to be your top

00:08:44,400 --> 00:08:49,420
level one so example.com not sub domain

00:08:47,880 --> 00:08:51,459
example.com

00:08:49,420 --> 00:08:53,649
and that means that everything within

00:08:51,459 --> 00:08:57,010
your domain will be loaded by HTTPS only

00:08:53,649 --> 00:08:58,779
ever by all the browsers at least the

00:08:57,010 --> 00:09:03,940
versions that include you in the preload

00:08:58,779 --> 00:09:05,829
list again very easy to turn on in

00:09:03,940 --> 00:09:08,740
django we have a bunch of checks when

00:09:05,829 --> 00:09:10,630
you run check - cheshire poi and the

00:09:08,740 --> 00:09:14,019
first step you just need to take is to

00:09:10,630 --> 00:09:16,630
set this secure HSTs seconds so that's

00:09:14,019 --> 00:09:19,029
the countdown that says how long the

00:09:16,630 --> 00:09:26,800
browsers out there of your users should

00:09:19,029 --> 00:09:29,620
remember to load you over HTTP only this

00:09:26,800 --> 00:09:32,079
needs a lot of care and Django warning

00:09:29,620 --> 00:09:32,889
for one of these says puts it very

00:09:32,079 --> 00:09:35,740
nicely

00:09:32,889 --> 00:09:39,579
enabling HSCs err carelessly can cause

00:09:35,740 --> 00:09:41,139
serious irreversible problems if you set

00:09:39,579 --> 00:09:43,029
it on your top-level domain and

00:09:41,139 --> 00:09:45,070
somewhere else in your organization

00:09:43,029 --> 00:09:47,529
someone is running an application on a

00:09:45,070 --> 00:09:49,870
subdomain that's HTTP only you break it

00:09:47,529 --> 00:09:50,740
for them anyone who sees the header on

00:09:49,870 --> 00:09:53,139
the top-level domain

00:09:50,740 --> 00:09:54,579
their browser will not only make HTTP

00:09:53,139 --> 00:09:56,860
requests from that point onwards and

00:09:54,579 --> 00:10:00,760
they can never get to that application

00:09:56,860 --> 00:10:03,339
on our subdomain so I recommend you ramp

00:10:00,760 --> 00:10:05,980
up seconds gradually make a deploy with

00:10:03,339 --> 00:10:08,220
a 30-second timeout and a minute then an

00:10:05,980 --> 00:10:10,839
hour do this over a period of days

00:10:08,220 --> 00:10:13,570
whatever monitoring is appropriate to

00:10:10,839 --> 00:10:16,839
get feedback from your users and then

00:10:13,570 --> 00:10:18,940
these two flags which first push it push

00:10:16,839 --> 00:10:21,220
you down onto the subdomains and then

00:10:18,940 --> 00:10:23,470
this preload flag that allows you to be

00:10:21,220 --> 00:10:25,660
loaded into that database only set them

00:10:23,470 --> 00:10:29,890
when you're really quite sure that your

00:10:25,660 --> 00:10:33,399
whole domain is set up properly it's a

00:10:29,890 --> 00:10:36,660
lot easier to do this with some tio DS

00:10:33,399 --> 00:10:40,779
so Google have released a few and

00:10:36,660 --> 00:10:43,329
top-level domains recently app dev these

00:10:40,779 --> 00:10:44,860
are already HSTs pre-loaded so if you

00:10:43,329 --> 00:10:47,860
get one of these domains you cannot host

00:10:44,860 --> 00:10:49,420
HTTP content on them and similarly if

00:10:47,860 --> 00:10:50,920
you start at an organization that

00:10:49,420 --> 00:10:52,420
already has this on a top-level domain

00:10:50,920 --> 00:10:58,630
you're never going to have any problems

00:10:52,420 --> 00:11:01,569
okay the third header X content type

00:10:58,630 --> 00:11:02,860
options so there's another browser

00:11:01,569 --> 00:11:06,040
feature here at play

00:11:02,860 --> 00:11:09,820
called mine sniffing and this is a kind

00:11:06,040 --> 00:11:12,430
of a patch that is a bit regrettable in

00:11:09,820 --> 00:11:14,440
early web browsers people were browsing

00:11:12,430 --> 00:11:16,750
the internet coming across servers which

00:11:14,440 --> 00:11:19,300
have been misconfigured so the content

00:11:16,750 --> 00:11:21,760
type header would be set incorrectly so

00:11:19,300 --> 00:11:24,490
browsers mint browser vendor said hey

00:11:21,760 --> 00:11:28,110
look we can fix these websites for you

00:11:24,490 --> 00:11:30,370
and we'll just look at what's inside the

00:11:28,110 --> 00:11:34,180
content we download and try and guess

00:11:30,370 --> 00:11:36,820
what type it is this backfires and can

00:11:34,180 --> 00:11:38,260
backfire very badly for example if you

00:11:36,820 --> 00:11:40,000
have a function on your site to upload

00:11:38,260 --> 00:11:42,520
images and you serve them directly out

00:11:40,000 --> 00:11:45,250
your domain and the person manages to

00:11:42,520 --> 00:11:47,620
upload some HTML looking stuff it

00:11:45,250 --> 00:11:49,570
doesn't have to be pure HTML it might be

00:11:47,620 --> 00:11:51,700
enough to bypass your filters but then

00:11:49,570 --> 00:11:53,890
enough to trigger the browser's mind

00:11:51,700 --> 00:11:56,140
sniffing filters so then it gets

00:11:53,890 --> 00:11:58,270
interpreted as HTML suddenly they can

00:11:56,140 --> 00:12:00,160
host whatever the content they want on

00:11:58,270 --> 00:12:03,670
your domain they could put in a script

00:12:00,160 --> 00:12:05,770
that steals passwords etc so you simply

00:12:03,670 --> 00:12:08,440
set this header X content type of chance

00:12:05,770 --> 00:12:10,780
to this no sniff value and you say

00:12:08,440 --> 00:12:15,220
browsers don't try and sniff the mime

00:12:10,780 --> 00:12:17,380
type mine sniffing as I said was a bit

00:12:15,220 --> 00:12:19,690
different in every browser has recently

00:12:17,380 --> 00:12:22,720
been turned into a spec I had a brief

00:12:19,690 --> 00:12:24,130
look at the spec it is very very big you

00:12:22,720 --> 00:12:25,420
ideally don't want to have to think

00:12:24,130 --> 00:12:29,550
about this when you're developing your

00:12:25,420 --> 00:12:32,560
website so just try opting out instead

00:12:29,550 --> 00:12:36,100
again in Django we've got a warning

00:12:32,560 --> 00:12:37,600
telling you please opt out where you put

00:12:36,100 --> 00:12:39,880
the security middleware in you set a

00:12:37,600 --> 00:12:44,020
flag and you're sorted you don't need to

00:12:39,880 --> 00:12:46,960
think about it again now for the fourth

00:12:44,020 --> 00:12:50,710
one built into Django this is the click

00:12:46,960 --> 00:12:53,800
Genting a tank that you can prevent I'll

00:12:50,710 --> 00:12:56,050
demonstrate that briefly but basically

00:12:53,800 --> 00:12:58,590
clicking relies on putting your site

00:12:56,050 --> 00:13:01,630
inside a frame on another site and

00:12:58,590 --> 00:13:04,420
putting this header on your site you say

00:13:01,630 --> 00:13:07,240
browsers please don't include me in a in

00:13:04,420 --> 00:13:09,970
a frame on our sites or you can set an

00:13:07,240 --> 00:13:11,830
allow list they say only these sites can

00:13:09,970 --> 00:13:14,470
include me in a frame and

00:13:11,830 --> 00:13:18,150
if a trusted list perhaps those that are

00:13:14,470 --> 00:13:21,400
within your organization or some partner

00:13:18,150 --> 00:13:24,100
so this is the clickjacking attack I'm

00:13:21,400 --> 00:13:26,140
going to use Troy hunts blog post images

00:13:24,100 --> 00:13:27,640
here he's another security researcher

00:13:26,140 --> 00:13:30,880
that has worked on their security

00:13:27,640 --> 00:13:34,660
Heather's site so imagine we have one

00:13:30,880 --> 00:13:36,460
site called Winn iPad and look is a

00:13:34,660 --> 00:13:37,000
great deal they're giving away an iPad

00:13:36,460 --> 00:13:38,800
Mini

00:13:37,000 --> 00:13:42,160
ok the example might be a little dated

00:13:38,800 --> 00:13:46,660
but yeah and we just need to click that

00:13:42,160 --> 00:13:49,240
win button and it's ours over here we

00:13:46,660 --> 00:13:52,450
also logged in on website called my bank

00:13:49,240 --> 00:13:54,190
and it's got a transfer page and it

00:13:52,450 --> 00:13:56,290
simply has two buttons to invest it

00:13:54,190 --> 00:14:00,550
wisely or donate it all to you Kim calm

00:13:56,290 --> 00:14:03,100
the one behind mega well what you didn't

00:14:00,550 --> 00:14:06,910
realize and will make clear here is that

00:14:03,100 --> 00:14:10,930
when iPad actually has a framed version

00:14:06,910 --> 00:14:13,300
of the bank site and it was transparent

00:14:10,930 --> 00:14:14,830
so if we just fade it in a little you

00:14:13,300 --> 00:14:16,750
can see that the wind button is right

00:14:14,830 --> 00:14:20,800
over the donate the money to Kim comm

00:14:16,750 --> 00:14:22,980
and this is like a single click but some

00:14:20,800 --> 00:14:25,150
websites use like loads of dynamic

00:14:22,980 --> 00:14:26,890
things they make you click all these

00:14:25,150 --> 00:14:28,210
buttons that you think oh that's weird

00:14:26,890 --> 00:14:30,100
these buttons are all over the screen

00:14:28,210 --> 00:14:31,810
you don't realize you're logging into

00:14:30,100 --> 00:14:39,160
Google and sending all your money and

00:14:31,810 --> 00:14:41,380
your password again to opt out very

00:14:39,160 --> 00:14:43,690
simple you set this header and we again

00:14:41,380 --> 00:14:45,250
I have a middleware in Django to do it

00:14:43,690 --> 00:14:48,760
it's called the X frame options

00:14:45,250 --> 00:14:52,480
middleware and you change the option to

00:14:48,760 --> 00:14:55,030
deny deny is the most strict version and

00:14:52,480 --> 00:14:57,880
that means you can never be included in

00:14:55,030 --> 00:15:00,160
a frame there are other options where

00:14:57,880 --> 00:15:01,630
you whitelist particular sites as I

00:15:00,160 --> 00:15:04,210
explained they're all in the

00:15:01,630 --> 00:15:05,890
documentation and this is quite a

00:15:04,210 --> 00:15:08,110
complicated topic so it has its own

00:15:05,890 --> 00:15:10,150
middleware and its own documentation

00:15:08,110 --> 00:15:12,420
page compared to the others that were

00:15:10,150 --> 00:15:15,070
just in that vanilla security middleware

00:15:12,420 --> 00:15:18,130
but it is in the Start project template

00:15:15,070 --> 00:15:22,540
and there is a check telling you to go

00:15:18,130 --> 00:15:24,460
research it so now we move on to those

00:15:22,540 --> 00:15:25,490
that are not built into Django at least

00:15:24,460 --> 00:15:29,250
not yet

00:15:25,490 --> 00:15:31,200
the first is referral policy and we need

00:15:29,250 --> 00:15:33,930
to be a little bit careful there so

00:15:31,200 --> 00:15:35,100
every time you click through the web you

00:15:33,930 --> 00:15:37,440
are sending that you're passing this

00:15:35,100 --> 00:15:40,410
referer header to the next page you

00:15:37,440 --> 00:15:44,700
navigate to and that has one arm due to

00:15:40,410 --> 00:15:46,200
a typo in the original spec so you're

00:15:44,700 --> 00:15:48,990
basically telling every website you

00:15:46,200 --> 00:15:51,750
visit where you just came from and this

00:15:48,990 --> 00:15:53,520
is it sounds perfectly legitimate

00:15:51,750 --> 00:15:54,750
especially if you're browsing within the

00:15:53,520 --> 00:15:56,940
same website they might want to

00:15:54,750 --> 00:15:58,950
understand how traffic flows do people

00:15:56,940 --> 00:16:03,060
go from the login page to the user page

00:15:58,950 --> 00:16:05,100
something like that but and one thing

00:16:03,060 --> 00:16:07,470
that has become very clear across the

00:16:05,100 --> 00:16:10,020
history the web is that your eyes can

00:16:07,470 --> 00:16:12,390
leak information for example imagine if

00:16:10,020 --> 00:16:14,760
and I'm not saying this is the case that

00:16:12,390 --> 00:16:20,550
there's a web page on my site called

00:16:14,760 --> 00:16:22,650
Illuminati funding I may or may not be

00:16:20,550 --> 00:16:24,300
funded by the Illuminati but I

00:16:22,650 --> 00:16:26,850
definitely don't want to leak that

00:16:24,300 --> 00:16:29,370
information to the outside world other

00:16:26,850 --> 00:16:32,550
things get into URLs as well like

00:16:29,370 --> 00:16:34,860
parameters there might be private

00:16:32,550 --> 00:16:36,540
information of your customers and you

00:16:34,860 --> 00:16:38,820
might have like the email address of

00:16:36,540 --> 00:16:40,500
someone on a search field and you don't

00:16:38,820 --> 00:16:43,740
want this to get to you other parties

00:16:40,500 --> 00:16:46,800
that you might just happen to link to so

00:16:43,740 --> 00:16:48,900
this header could refer a policy with

00:16:46,800 --> 00:16:51,840
two hours in the middle correctly

00:16:48,900 --> 00:17:01,200
spelled confusingly controls who gets

00:16:51,840 --> 00:17:03,480
the referrer with one are got it so it's

00:17:01,200 --> 00:17:05,940
quite simple again we activate it in

00:17:03,480 --> 00:17:08,190
Django by installing a package that

00:17:05,940 --> 00:17:09,890
provides a middleware it's by another

00:17:08,190 --> 00:17:12,420
core developer called James Bennett and

00:17:09,890 --> 00:17:14,550
it's very well documented it's very

00:17:12,420 --> 00:17:17,940
straightforward it's the kind of thing

00:17:14,550 --> 00:17:20,040
I'd like to see merged in Django and you

00:17:17,940 --> 00:17:22,800
simply set this a referral policy to one

00:17:20,040 --> 00:17:25,890
of the values and that are possible

00:17:22,800 --> 00:17:29,100
according to the spec the one that you

00:17:25,890 --> 00:17:30,960
probably want is same origin so this

00:17:29,100 --> 00:17:33,960
means that whilst you're browsing around

00:17:30,960 --> 00:17:36,030
within that one domain then the referer

00:17:33,960 --> 00:17:36,670
header is set so you can understand

00:17:36,030 --> 00:17:38,530
traffic with

00:17:36,670 --> 00:17:40,680
your own website as soon as I click to

00:17:38,530 --> 00:17:43,000
another domain it's no longer seen and

00:17:40,680 --> 00:17:45,130
there isn't a way of specifying a

00:17:43,000 --> 00:17:47,640
whitelist so it's really kind of all or

00:17:45,130 --> 00:17:54,430
nothing on your domain or other domains

00:17:47,640 --> 00:17:59,440
etc and this this is the sixth header to

00:17:54,430 --> 00:18:01,930
talk about content security policy so we

00:17:59,440 --> 00:18:04,960
talked about XSS attacks before which is

00:18:01,930 --> 00:18:08,590
including content from other sites there

00:18:04,960 --> 00:18:10,540
are a bunch of related attacks and other

00:18:08,590 --> 00:18:12,910
problems you might not want to include

00:18:10,540 --> 00:18:14,410
content from other sites because it

00:18:12,910 --> 00:18:16,780
doesn't look good on you

00:18:14,410 --> 00:18:20,470
or allow some people to change things on

00:18:16,780 --> 00:18:22,600
you and so it could be images it could

00:18:20,470 --> 00:18:24,910
be videos it could be scripts that we're

00:18:22,600 --> 00:18:27,190
talking about and content security

00:18:24,910 --> 00:18:30,700
policy is the strongest way to prevent

00:18:27,190 --> 00:18:32,290
this whole ranges of attacks it is a

00:18:30,700 --> 00:18:34,980
huge topic and it could be a

00:18:32,290 --> 00:18:37,720
presentation in itself or perhaps a book

00:18:34,980 --> 00:18:40,030
there are 23 different directives you

00:18:37,720 --> 00:18:42,040
can set in this policy and a myriad of

00:18:40,030 --> 00:18:46,660
options for each of those I'm going to

00:18:42,040 --> 00:18:49,090
explain just basics this is an example

00:18:46,660 --> 00:18:52,090
policy and it's a series of these

00:18:49,090 --> 00:18:54,400
directives separated by semicolons this

00:18:52,090 --> 00:18:56,800
one and it simply says the default

00:18:54,400 --> 00:18:59,290
source for resources that our web pages

00:18:56,800 --> 00:19:01,060
can include is ourselves that means just

00:18:59,290 --> 00:19:02,860
the current domain it wouldn't even

00:19:01,060 --> 00:19:06,490
allow you to include from like static

00:19:02,860 --> 00:19:09,390
example.com but then we say but we don't

00:19:06,490 --> 00:19:12,400
mind including images from anywhere and

00:19:09,390 --> 00:19:14,410
we also allow scripts to be included

00:19:12,400 --> 00:19:18,760
from a demain called user scripts

00:19:14,410 --> 00:19:21,570
example.com so if this is set in the

00:19:18,760 --> 00:19:24,430
header content - security - policy and

00:19:21,570 --> 00:19:27,910
the browser will enforce this and every

00:19:24,430 --> 00:19:29,830
single script tag image tag anything

00:19:27,910 --> 00:19:31,990
that could reference external media will

00:19:29,830 --> 00:19:33,610
first pass through this policy and if

00:19:31,990 --> 00:19:36,880
it's not allowed you get a block message

00:19:33,610 --> 00:19:38,920
and and here's an example of those pop

00:19:36,880 --> 00:19:42,070
messages

00:19:38,920 --> 00:19:45,400
Scott Homer set this up on his CSP demo

00:19:42,070 --> 00:19:48,010
site he's tried to put a script tag that

00:19:45,400 --> 00:19:50,260
includes evil comm slash keylogger yes

00:19:48,010 --> 00:19:52,150
that doesn't sound great

00:19:50,260 --> 00:19:54,760
and you get this error in the

00:19:52,150 --> 00:19:57,160
development console it's saying look

00:19:54,760 --> 00:19:59,560
this has violated the CSP it was

00:19:57,160 --> 00:20:01,900
particularly this directive and you can

00:19:59,560 --> 00:20:04,740
see his real-world directive which

00:20:01,900 --> 00:20:09,520
allows scripts from a large number of

00:20:04,740 --> 00:20:11,800
locations is printed out in full for us

00:20:09,520 --> 00:20:15,430
so he's allowing self-disgust comm

00:20:11,800 --> 00:20:17,830
discuss CDN Instagram etc things that he

00:20:15,430 --> 00:20:23,020
trusts and allows us to embed content on

00:20:17,830 --> 00:20:25,330
his site so how do we put this into our

00:20:23,020 --> 00:20:28,660
Django Mozilla have a third-party

00:20:25,330 --> 00:20:31,150
package called Janko - CSP we install

00:20:28,660 --> 00:20:33,100
that we put the CSP middleware into the

00:20:31,150 --> 00:20:35,890
middleware and then when you set a bunch

00:20:33,100 --> 00:20:38,650
of settings to build up the policy for

00:20:35,890 --> 00:20:40,870
example CSP default source is the first

00:20:38,650 --> 00:20:42,430
one that I describe saying the default

00:20:40,870 --> 00:20:47,110
source and you might want to start off

00:20:42,430 --> 00:20:49,660
with the same self and again like like

00:20:47,110 --> 00:20:51,760
HSTs the strict Transport Security is

00:20:49,660 --> 00:20:56,350
quite hard to roll out especially if

00:20:51,760 --> 00:20:58,150
it's a big site and if you're starting

00:20:56,350 --> 00:21:00,280
off with a greenfield project brand new

00:20:58,150 --> 00:21:03,150
it's very easy just set a very

00:21:00,280 --> 00:21:06,040
restrictive policy to begin with and and

00:21:03,150 --> 00:21:07,600
just as you develop the site you'll find

00:21:06,040 --> 00:21:09,340
that this feature doesn't work or that

00:21:07,600 --> 00:21:11,170
feature doesn't work inspect the

00:21:09,340 --> 00:21:13,780
messages decide whether or not you want

00:21:11,170 --> 00:21:15,520
to embed content from say twitter.com or

00:21:13,780 --> 00:21:17,920
you want to figure out a solution or you

00:21:15,520 --> 00:21:20,350
don't depend on them if you've got an

00:21:17,920 --> 00:21:22,660
existing site very very hard because you

00:21:20,350 --> 00:21:24,430
might have thousands of pages with loads

00:21:22,660 --> 00:21:25,990
of content editors have worked on for

00:21:24,430 --> 00:21:28,780
years to include from all different

00:21:25,990 --> 00:21:30,700
places and maybe you want to reconsider

00:21:28,780 --> 00:21:32,560
whether or not you trust all these sites

00:21:30,700 --> 00:21:35,590
especially if they're someone like

00:21:32,560 --> 00:21:38,560
myspace or something that have gone out

00:21:35,590 --> 00:21:42,190
of fashion gone quite old badly

00:21:38,560 --> 00:21:44,350
maintained here's a resource that will

00:21:42,190 --> 00:21:47,170
help you start with a very strict policy

00:21:44,350 --> 00:21:50,080
if that's what floats your boat and the

00:21:47,170 --> 00:21:51,340
Google strict CSP page and one thing

00:21:50,080 --> 00:21:53,320
worth mentioning that helps with the

00:21:51,340 --> 00:21:55,600
rollout and with the maintenance of this

00:21:53,320 --> 00:21:58,600
is the report mode and there's also

00:21:55,600 --> 00:22:00,340
report only mode so the report reporting

00:21:58,600 --> 00:22:02,380
allows the browser to send you back a

00:22:00,340 --> 00:22:03,280
request every time they block it block

00:22:02,380 --> 00:22:05,890
something

00:22:03,280 --> 00:22:08,080
and report only means that the policy is

00:22:05,890 --> 00:22:10,510
not enforced but only ever sends these

00:22:08,080 --> 00:22:13,179
reports back so you can roll this out

00:22:10,510 --> 00:22:15,280
with the report only mode on get back a

00:22:13,179 --> 00:22:18,220
bunch of information about what uses a

00:22:15,280 --> 00:22:20,020
seeing that would be blocked change the

00:22:18,220 --> 00:22:22,480
policy and once you stop seeing reports

00:22:20,020 --> 00:22:26,799
that you think are legitimate then know

00:22:22,480 --> 00:22:29,049
that you can turn it on and the last one

00:22:26,799 --> 00:22:30,909
I'm going to talk about which is quite a

00:22:29,049 --> 00:22:35,080
bonus and it's not needed for this a

00:22:30,909 --> 00:22:37,960
plus rating is future policy and it's

00:22:35,080 --> 00:22:40,659
also very experimental so at the moment

00:22:37,960 --> 00:22:42,580
it's not enabled by default in browsers

00:22:40,659 --> 00:22:44,350
chrome is the browser with the most

00:22:42,580 --> 00:22:46,059
implementation and they're pushing this

00:22:44,350 --> 00:22:49,330
but you still need to enable the

00:22:46,059 --> 00:22:51,340
experimental Flags mode to get it on and

00:22:49,330 --> 00:22:54,159
what this does is it lets you disable

00:22:51,340 --> 00:22:57,520
browser features so rather than not just

00:22:54,159 --> 00:22:59,590
like distrusting code being pulled in it

00:22:57,520 --> 00:23:01,809
also says I'm not entirely trusting the

00:22:59,590 --> 00:23:04,900
code that I am running so let's not do

00:23:01,809 --> 00:23:07,980
some things that we don't want to do

00:23:04,900 --> 00:23:10,990
spec that we shouldn't need to do rather

00:23:07,980 --> 00:23:14,020
for example for you or for your iframes

00:23:10,990 --> 00:23:16,150
for example autoplay and I know Firefox

00:23:14,020 --> 00:23:17,740
just disable autoplay by default but

00:23:16,150 --> 00:23:19,330
this is a policy where you can say

00:23:17,740 --> 00:23:20,890
nothing on this website should ever

00:23:19,330 --> 00:23:22,720
autoplay if you're loading something

00:23:20,890 --> 00:23:25,960
that order plays just don't autoplay it

00:23:22,720 --> 00:23:28,000
and similarly you can block the

00:23:25,960 --> 00:23:29,799
geolocation feature nothing should be

00:23:28,000 --> 00:23:31,870
requesting from my users location

00:23:29,799 --> 00:23:35,049
nothing should be requesting to use the

00:23:31,870 --> 00:23:37,059
camera so if bad code ever does get onto

00:23:35,049 --> 00:23:42,190
your site it just can't do that much

00:23:37,059 --> 00:23:44,409
damage and the chrome team are pushing

00:23:42,190 --> 00:23:46,179
this they've got this demo app that you

00:23:44,409 --> 00:23:48,990
can go visit and browse around if you

00:23:46,179 --> 00:23:51,460
search for feature policy kitchen-sink

00:23:48,990 --> 00:23:53,950
here's an example page that blocks

00:23:51,460 --> 00:23:56,590
autoplay and you can browse around and

00:23:53,950 --> 00:23:58,780
turn it on and off and it also shows you

00:23:56,590 --> 00:24:02,440
what the header looks like future policy

00:23:58,780 --> 00:24:04,539
autoplay none or self again like a CSP

00:24:02,440 --> 00:24:07,870
you can say I'm allowed to autoplay but

00:24:04,539 --> 00:24:09,789
others on the way to turn this on and

00:24:07,870 --> 00:24:12,070
Django is still a library of built

00:24:09,789 --> 00:24:14,890
called Django future policy but it's

00:24:12,070 --> 00:24:16,040
middleware in very familiar and enable a

00:24:14,890 --> 00:24:18,140
setting

00:24:16,040 --> 00:24:20,300
it is very experimental I just didn't

00:24:18,140 --> 00:24:22,160
update the other week where chrome had

00:24:20,300 --> 00:24:24,140
changed a number of features and the

00:24:22,160 --> 00:24:26,450
names of them so if you're going to turn

00:24:24,140 --> 00:24:29,240
it on it's just like a treat as an extra

00:24:26,450 --> 00:24:33,650
bonus at this time and don't rely on it

00:24:29,240 --> 00:24:38,420
and once you've done the first six you

00:24:33,650 --> 00:24:40,760
get this a plus rating array it may or

00:24:38,420 --> 00:24:42,500
may not be worth it for you and it's

00:24:40,760 --> 00:24:44,450
definitely worth knowing about all of

00:24:42,500 --> 00:24:46,670
these and maybe switching on those that

00:24:44,450 --> 00:24:48,410
are built into Django but considering

00:24:46,670 --> 00:24:52,430
the others depending upon your

00:24:48,410 --> 00:24:55,310
organization's like posture and CSP is

00:24:52,430 --> 00:24:58,280
quite hard to roll out HSTs very hard to

00:24:55,310 --> 00:25:01,690
roll out in somewhere that has a lot of

00:24:58,280 --> 00:25:05,480
existing projects on the same domain and

00:25:01,690 --> 00:25:07,280
hopefully you're now well educated and

00:25:05,480 --> 00:25:08,930
thank you for listening to me and you

00:25:07,280 --> 00:25:10,990
can get my talk at the link at the

00:25:08,930 --> 00:25:10,990
bottom

00:25:15,720 --> 00:25:23,440
thing Thank You Adam this was wonderful

00:25:20,460 --> 00:25:39,610
are there questions yes there's at least

00:25:23,440 --> 00:25:41,920
one Tess I thank you for the important

00:25:39,610 --> 00:25:44,590
talk I'm relaying to questions from the

00:25:41,920 --> 00:25:47,080
sectional the first is do you see any

00:25:44,590 --> 00:25:48,880
upsides of downsides of doing this in

00:25:47,080 --> 00:25:51,160
Django as opposed to setting those

00:25:48,880 --> 00:25:53,890
headers in nginx or a similar front-end

00:25:51,160 --> 00:25:56,230
web server so the question is whether

00:25:53,890 --> 00:25:58,450
it's better to set them on a different

00:25:56,230 --> 00:26:01,720
layer to Django so you could do nginx

00:25:58,450 --> 00:26:04,120
you could do this at your CDN and it

00:26:01,720 --> 00:26:05,950
does depend on your application so you

00:26:04,120 --> 00:26:08,770
might be gluing together multiple parts

00:26:05,950 --> 00:26:10,330
on an engine it set up or a CDN you

00:26:08,770 --> 00:26:13,630
might be serving static media through

00:26:10,330 --> 00:26:14,770
nginx and although I'd say it's better

00:26:13,630 --> 00:26:16,300
to use something called white noise

00:26:14,770 --> 00:26:18,429
these days that serves them directly out

00:26:16,300 --> 00:26:19,780
of Django and there are definite

00:26:18,429 --> 00:26:22,300
benefits to putting it inside the

00:26:19,780 --> 00:26:23,620
application for example with CSP you

00:26:22,300 --> 00:26:25,690
might have a restrictive policy at the

00:26:23,620 --> 00:26:27,970
top domain and then on just a few views

00:26:25,690 --> 00:26:29,830
said a less restrictive policy that

00:26:27,970 --> 00:26:32,679
allows a third-party script around only

00:26:29,830 --> 00:26:34,780
on those views so the dynamic nature can

00:26:32,679 --> 00:26:37,090
be very useful there others that are

00:26:34,780 --> 00:26:41,980
just like a static flag perhaps like XSS

00:26:37,090 --> 00:26:44,530
X I say X XSS protection you might want

00:26:41,980 --> 00:26:46,030
to put on a top-level thing and but

00:26:44,530 --> 00:26:50,590
generally if they're built into Django

00:26:46,030 --> 00:26:52,000
just switch them on okay thanks and the

00:26:50,590 --> 00:26:54,580
other question is do you have any

00:26:52,000 --> 00:26:57,700
opinions on the defaults but Django does

00:26:54,580 --> 00:27:00,820
have or Django should have once you turn

00:26:57,700 --> 00:27:03,340
a debug to off do I have opinions on the

00:27:00,820 --> 00:27:06,520
defaults I think a couple of them can be

00:27:03,340 --> 00:27:08,380
switched like XSS protection but it's

00:27:06,520 --> 00:27:09,340
really a matter of depending on how much

00:27:08,380 --> 00:27:11,740
we want to break the backwards

00:27:09,340 --> 00:27:13,600
compatibility I think more important

00:27:11,740 --> 00:27:15,040
tasks is to merge in some of those

00:27:13,600 --> 00:27:16,960
features that are currently in

00:27:15,040 --> 00:27:23,140
third-party libraries so everyone gets

00:27:16,960 --> 00:27:26,110
them by default hi um I'm a pen tester

00:27:23,140 --> 00:27:26,520
so when people don't use these kinds of

00:27:26,110 --> 00:27:29,100
headers

00:27:26,520 --> 00:27:32,760
it makes me very happy and when they're

00:27:29,100 --> 00:27:35,820
not implemented yeah I have a very good

00:27:32,760 --> 00:27:37,230
day and quite often people don't

00:27:35,820 --> 00:27:40,740
implement them correctly but one of the

00:27:37,230 --> 00:27:42,360
things that I was that plays into this

00:27:40,740 --> 00:27:44,040
quite a bit that I was hoping you talk

00:27:42,360 --> 00:27:46,230
about a little bit with cookie flags as

00:27:44,040 --> 00:27:49,350
well because those get said on him we

00:27:46,230 --> 00:27:50,970
had it set for the cookie and I wondered

00:27:49,350 --> 00:27:53,130
if you could speak a bit about how

00:27:50,970 --> 00:27:55,620
cookie Flags work in Django because

00:27:53,130 --> 00:27:58,560
that's something that can interact with

00:27:55,620 --> 00:28:01,350
these headers as well yes and so cookie

00:27:58,560 --> 00:28:04,260
flags are a bunch of options similar to

00:28:01,350 --> 00:28:06,690
the headers that let you say this cookie

00:28:04,260 --> 00:28:07,770
should only be served over HTTP this

00:28:06,690 --> 00:28:11,760
cookie should not be readable by

00:28:07,770 --> 00:28:14,940
JavaScript etc Django has a bunch of

00:28:11,760 --> 00:28:17,100
these flags on by available by default

00:28:14,940 --> 00:28:18,600
some of them may be on by default and

00:28:17,100 --> 00:28:21,300
there's certainly warnings when you run

00:28:18,600 --> 00:28:24,720
the check - - deploy command so that

00:28:21,300 --> 00:28:26,400
they're there we recently most a patch I

00:28:24,720 --> 00:28:29,100
think merits much one around language

00:28:26,400 --> 00:28:31,640
settings as well so the next version of

00:28:29,100 --> 00:28:34,440
Django I guess 3.0 will have that and

00:28:31,640 --> 00:28:35,970
yes so that suddenly is built-in

00:28:34,440 --> 00:28:38,340
I just wanted to restrict the scope of

00:28:35,970 --> 00:28:39,930
the talk if you run that tool I discuss

00:28:38,340 --> 00:28:41,550
the pinning called Mozilla Observatory

00:28:39,930 --> 00:28:43,970
that will tell you about the cookie

00:28:41,550 --> 00:28:46,860
Flags as well as the security headers

00:28:43,970 --> 00:28:48,450
and I had a second question because I

00:28:46,860 --> 00:28:49,490
still have a lot of feelings about this

00:28:48,450 --> 00:28:53,310
topic

00:28:49,490 --> 00:28:56,490
excellent and that is that CSP is

00:28:53,310 --> 00:28:57,630
awesome and it's great and you're right

00:28:56,490 --> 00:29:00,120
that it's really hard to implement

00:28:57,630 --> 00:29:02,190
properly but I know that one of the

00:29:00,120 --> 00:29:03,870
things that can make CSP really hard to

00:29:02,190 --> 00:29:06,750
implement is the fact a lot of popular

00:29:03,870 --> 00:29:11,730
third-party JavaScript libraries require

00:29:06,750 --> 00:29:13,290
you to set insecure CSP defaults so even

00:29:11,730 --> 00:29:14,760
if your security scene team says please

00:29:13,290 --> 00:29:16,290
turn this on if you depend on something

00:29:14,760 --> 00:29:20,670
then it won't work and I was wondering

00:29:16,290 --> 00:29:22,110
if you knew any libraries that that do

00:29:20,670 --> 00:29:23,730
this kind of thing that who could to

00:29:22,110 --> 00:29:27,810
avoid if you're trying to marry your

00:29:23,730 --> 00:29:29,100
site with a CSP I don't know any of the

00:29:27,810 --> 00:29:30,140
top of my head I have to suddenly

00:29:29,100 --> 00:29:32,790
experience them

00:29:30,140 --> 00:29:34,500
I'd say it's best to always try and self

00:29:32,790 --> 00:29:36,690
host JavaScript although some partners

00:29:34,500 --> 00:29:38,110
force you to set it like include it from

00:29:36,690 --> 00:29:40,120
their domain and just trust

00:29:38,110 --> 00:29:42,490
that they won't get hacked and their

00:29:40,120 --> 00:29:45,780
code will be replaced with mad code yeah

00:29:42,490 --> 00:29:49,120
I can't speak anymore time I'm afraid

00:29:45,780 --> 00:29:50,830
hello a nice talk I was actually

00:29:49,120 --> 00:29:54,250
wondering in the beginning you mentioned

00:29:50,830 --> 00:29:55,960
the cross-site scripting header a no

00:29:54,250 --> 00:29:58,150
follow was interesting because it seemed

00:29:55,960 --> 00:30:00,100
to me that instead of trying to protect

00:29:58,150 --> 00:30:03,220
the user was preventing an attack like

00:30:00,100 --> 00:30:05,309
when the URL had a script in it is

00:30:03,220 --> 00:30:08,830
trying to prevent I was just wondering

00:30:05,309 --> 00:30:10,840
can you just go through that or pass

00:30:08,830 --> 00:30:12,960
that if you use a different browser or

00:30:10,840 --> 00:30:14,799
is there more to it than that

00:30:12,960 --> 00:30:19,020
certainly all the browser's have

00:30:14,799 --> 00:30:21,610
slightly different XSS auditors and the

00:30:19,020 --> 00:30:23,890
user might get to that page and try load

00:30:21,610 --> 00:30:25,480
in a different browser but is it's

00:30:23,890 --> 00:30:27,309
definitely protecting the user by

00:30:25,480 --> 00:30:29,230
blocking the page if something like that

00:30:27,309 --> 00:30:33,640
happens because it's normally a sign of

00:30:29,230 --> 00:30:35,380
a very bad runner ability and there is a

00:30:33,640 --> 00:30:36,910
reporting mode for that I believe as

00:30:35,380 --> 00:30:39,309
well so you can also get pinged back

00:30:36,910 --> 00:30:41,290
whenever that happens so you can

00:30:39,309 --> 00:30:46,150
discover in real time that it's

00:30:41,290 --> 00:30:49,840
happening on your site okay thanks hello

00:30:46,150 --> 00:30:52,720
those features are all very important

00:30:49,840 --> 00:30:56,559
and some of them as you just mentioned

00:30:52,720 --> 00:30:58,900
are being added gradually can you say

00:30:56,559 --> 00:31:01,320
something about which of these features

00:30:58,900 --> 00:31:04,360
are available in which Django versions

00:31:01,320 --> 00:31:06,549
so I believe all the first four I talked

00:31:04,360 --> 00:31:08,710
about came from security middleware

00:31:06,549 --> 00:31:12,669
which was made by Adrian hollow-body I

00:31:08,710 --> 00:31:16,630
think and that was merged in Django one

00:31:12,669 --> 00:31:18,910
eight one eight so and hopefully

00:31:16,630 --> 00:31:20,919
accessible to most Django users at this

00:31:18,910 --> 00:31:22,390
point if not you can install the package

00:31:20,919 --> 00:31:26,520
that they came from called Django -

00:31:22,390 --> 00:31:30,130
security one more question from myself

00:31:26,520 --> 00:31:33,100
and you talked about that many of these

00:31:30,130 --> 00:31:35,940
headers allowed to report back if there

00:31:33,100 --> 00:31:38,620
are any issues do you know of any

00:31:35,940 --> 00:31:41,799
ideally open serve self host will suffer

00:31:38,620 --> 00:31:45,429
to collect and evaluate those reports so

00:31:41,799 --> 00:31:47,470
I know of two that are able to do this

00:31:45,429 --> 00:31:49,660
one is not open source and it's good

00:31:47,470 --> 00:31:51,140
report - you are a comm that is by the

00:31:49,660 --> 00:31:54,590
security researchers I've told

00:31:51,140 --> 00:31:57,950
about Scott Hellman Roy hunt and in

00:31:54,590 --> 00:31:59,660
their century which you can pay for it's

00:31:57,950 --> 00:32:02,060
known for its error logging but they

00:31:59,660 --> 00:32:04,070
have some reporting features and that

00:32:02,060 --> 00:32:09,500
you can self host it is open source and

00:32:04,070 --> 00:32:11,450
it is also a Django application alright

00:32:09,500 --> 00:32:13,829
thank you thank you very much

00:32:11,450 --> 00:32:13,829

YouTube URL: https://www.youtube.com/watch?v=gvQW1vVNohg


