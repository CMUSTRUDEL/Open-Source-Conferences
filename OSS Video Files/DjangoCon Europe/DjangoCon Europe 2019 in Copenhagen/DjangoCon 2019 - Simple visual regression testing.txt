Title: DjangoCon 2019 - Simple visual regression testing
Publication date: 2019-04-23
Playlist: DjangoCon Europe 2019 in Copenhagen
Description: 
	https://2019.djangocon.eu/talks/simple-visual-regression-testing/

By Zelma Gist
Captions: 
	00:00:00,740 --> 00:00:08,220
hi everyone so today I'm going to talk

00:00:06,299 --> 00:00:10,800
about simple visual regression testing

00:00:08,220 --> 00:00:14,340
the emphasis here really is on simple

00:00:10,800 --> 00:00:16,350
simple specifically because this project

00:00:14,340 --> 00:00:18,570
this talk is really generated from an

00:00:16,350 --> 00:00:20,670
issue I was having at work I'm full

00:00:18,570 --> 00:00:23,580
stack engineer and so I was having

00:00:20,670 --> 00:00:25,260
issues with knowing that my CSS changes

00:00:23,580 --> 00:00:28,380
were rendered correctly and I needed a

00:00:25,260 --> 00:00:30,240
simple way to test so a little bit about

00:00:28,380 --> 00:00:32,700
me I work for a company called wealthy

00:00:30,240 --> 00:00:34,110
to new york-based company and what I've

00:00:32,700 --> 00:00:35,700
realized here now that I've been

00:00:34,110 --> 00:00:38,309
traveling in Europe for about a month or

00:00:35,700 --> 00:00:40,079
two now is we solve a problem that maybe

00:00:38,309 --> 00:00:42,540
is a bit unique to the United States so

00:00:40,079 --> 00:00:45,030
we work with families who are caregivers

00:00:42,540 --> 00:00:46,559
for people who are with chronic and

00:00:45,030 --> 00:00:48,120
aging loved ones and we provide them

00:00:46,559 --> 00:00:50,399
care coordinators to really help them

00:00:48,120 --> 00:00:51,719
manage their care unique to the US

00:00:50,399 --> 00:00:53,699
health care system we have a whole

00:00:51,719 --> 00:00:55,649
massive insurance market and negotiating

00:00:53,699 --> 00:00:57,690
that can be challenging especially for

00:00:55,649 --> 00:01:01,739
trying to manage a full-time job so we

00:00:57,690 --> 00:01:03,390
work with families for that so what is a

00:01:01,739 --> 00:01:04,650
full stack engineer so I decided to go

00:01:03,390 --> 00:01:06,600
ahead and start with this little comic

00:01:04,650 --> 00:01:08,610
here I think it does a good little

00:01:06,600 --> 00:01:10,530
summary of what is full stack there's

00:01:08,610 --> 00:01:13,020
different types of full stack engineers

00:01:10,530 --> 00:01:14,820
there's those who are more DevOps and

00:01:13,020 --> 00:01:16,950
they sometimes do some other things on

00:01:14,820 --> 00:01:19,229
the side there's back-end engineers who

00:01:16,950 --> 00:01:23,100
sometimes do some CSS occasionally

00:01:19,229 --> 00:01:24,330
there's those who are front-end and are

00:01:23,100 --> 00:01:27,090
occasionally forced to go into the

00:01:24,330 --> 00:01:28,560
backend and the little comic goes on to

00:01:27,090 --> 00:01:30,090
continue it's from commits trip it's a

00:01:28,560 --> 00:01:33,360
good little comic I recommend it it's

00:01:30,090 --> 00:01:36,390
super nerdy super fun and so looking at

00:01:33,360 --> 00:01:38,479
this I would say that I'm probably the

00:01:36,390 --> 00:01:41,040
top right I'm a full stack developer

00:01:38,479 --> 00:01:43,590
extremely comfortable on the backend so

00:01:41,040 --> 00:01:46,110
comfortable with Django I can work my

00:01:43,590 --> 00:01:48,000
way around HTML Javascript an old friend

00:01:46,110 --> 00:01:51,390
my first job was in Java so these are

00:01:48,000 --> 00:01:53,970
all friends but CSS is a bit of a

00:01:51,390 --> 00:01:55,680
mythical art and I respect all of you

00:01:53,970 --> 00:01:57,659
front-end engineers who are handling

00:01:55,680 --> 00:01:59,460
this well I respect you I value you

00:01:57,659 --> 00:02:02,040
we're hiring a front-end engineer just

00:01:59,460 --> 00:02:04,170
gonna throw that out there at which time

00:02:02,040 --> 00:02:06,840
maybe I'll go back into the backend and

00:02:04,170 --> 00:02:09,179
so considering now that I'm a front

00:02:06,840 --> 00:02:11,520
engineer I still have to work with CSS

00:02:09,179 --> 00:02:13,240
it's work needs to get done and so the

00:02:11,520 --> 00:02:15,220
problem I was having was I

00:02:13,240 --> 00:02:18,370
get some trying to answer this question

00:02:15,220 --> 00:02:20,980
how do you know your CSS changes don't

00:02:18,370 --> 00:02:24,400
have any unexpected side effects being

00:02:20,980 --> 00:02:25,840
that if I move change this class how do

00:02:24,400 --> 00:02:27,940
I know that there's no unexpected

00:02:25,840 --> 00:02:30,370
changes on another page that shares the

00:02:27,940 --> 00:02:32,500
same class perhaps one way is you know

00:02:30,370 --> 00:02:34,780
don't worry you CSS if it's all unique

00:02:32,500 --> 00:02:36,730
but then you end up with a massive code

00:02:34,780 --> 00:02:38,950
base that's unmanageable nobody wants to

00:02:36,730 --> 00:02:43,060
use and people like me will just avoid

00:02:38,950 --> 00:02:45,970
CSS even more alternatively you send it

00:02:43,060 --> 00:02:47,830
over to QA QA magically they do whatever

00:02:45,970 --> 00:02:49,660
they do and potentially they come back

00:02:47,830 --> 00:02:52,000
to you with the quest that this is off

00:02:49,660 --> 00:02:53,770
by a pixel but it's sometimes even for a

00:02:52,000 --> 00:02:55,990
human eye it's challenging to catch

00:02:53,770 --> 00:02:57,640
these differences that you see in to

00:02:55,990 --> 00:03:00,610
webpages especially as they click

00:02:57,640 --> 00:03:03,250
through so for example if you have

00:03:00,610 --> 00:03:05,140
something like this who can tell me

00:03:03,250 --> 00:03:08,500
what's the difference between these two

00:03:05,140 --> 00:03:11,650
images so for this demo I went ahead and

00:03:08,500 --> 00:03:12,880
just cut up a sample site I was being

00:03:11,650 --> 00:03:14,320
art through the other day so I took a

00:03:12,880 --> 00:03:17,740
picture out of park up some flowers and

00:03:14,320 --> 00:03:23,760
threw it on here and so it's subtle it's

00:03:17,740 --> 00:03:25,270
visible you can see any guesses yes

00:03:23,760 --> 00:03:28,570
exactly

00:03:25,270 --> 00:03:31,780
yeah so he's correct it's the padding

00:03:28,570 --> 00:03:34,030
here on the images are off and here

00:03:31,780 --> 00:03:35,980
there's not high contrast but you can

00:03:34,030 --> 00:03:38,950
still see it it's a border it's there

00:03:35,980 --> 00:03:40,900
and so he's right the padding's off a

00:03:38,950 --> 00:03:41,500
little bit this is running just off my

00:03:40,900 --> 00:03:44,260
localhost

00:03:41,500 --> 00:03:44,830
I spun up two instances once in a

00:03:44,260 --> 00:03:47,080
sub-domain

00:03:44,830 --> 00:03:49,440
calling that one staging and then I have

00:03:47,080 --> 00:03:52,810
my dev environment which is to mimic dev

00:03:49,440 --> 00:03:54,490
so when I have this problem I sometimes

00:03:52,810 --> 00:03:57,430
will catch it but to be honest sometimes

00:03:54,490 --> 00:04:00,100
I want and so rather than relying on QA

00:03:57,430 --> 00:04:01,900
or the person doing my code reviews to

00:04:00,100 --> 00:04:03,160
come up with these changes I decided to

00:04:01,900 --> 00:04:05,260
come up with solution to really solve

00:04:03,160 --> 00:04:06,640
this problem for me and it should be

00:04:05,260 --> 00:04:09,580
super simple the code is pretty

00:04:06,640 --> 00:04:11,950
straightforward it definitely could be

00:04:09,580 --> 00:04:14,140
architected more into something larger I

00:04:11,950 --> 00:04:15,910
was working on making part of this open

00:04:14,140 --> 00:04:18,910
source but did not get quite finished

00:04:15,910 --> 00:04:21,160
before this talk so coming soon but it's

00:04:18,910 --> 00:04:24,880
just being able to integrate this into

00:04:21,160 --> 00:04:27,130
your Python environment so to do this

00:04:24,880 --> 00:04:29,410
the requirements I needed

00:04:27,130 --> 00:04:32,800
did something that would compare the

00:04:29,410 --> 00:04:34,660
same page in two environments so really

00:04:32,800 --> 00:04:36,610
whether it's your dev environment versus

00:04:34,660 --> 00:04:38,700
staging staging versus prod I really

00:04:36,610 --> 00:04:41,350
just wanted to look at two images

00:04:38,700 --> 00:04:44,290
programmatically and let me know if it's

00:04:41,350 --> 00:04:46,480
different second I really wanted to know

00:04:44,290 --> 00:04:49,030
exactly what's different I don't need an

00:04:46,480 --> 00:04:50,530
error message that says your CSS is off

00:04:49,030 --> 00:04:52,750
what does that mean

00:04:50,530 --> 00:04:54,700
this color is wrong with spacing is

00:04:52,750 --> 00:04:55,810
wrong an image that should be there

00:04:54,700 --> 00:04:57,940
isn't there anymore because you broke

00:04:55,810 --> 00:05:01,090
everything just like fire like what does

00:04:57,940 --> 00:05:02,680
off me so I wanted a way to know that

00:05:01,090 --> 00:05:04,990
things were different and that's why I

00:05:02,680 --> 00:05:06,310
decided to go something visual that I

00:05:04,990 --> 00:05:08,560
could see if there's an error something

00:05:06,310 --> 00:05:11,220
that would return so clear what I've

00:05:08,560 --> 00:05:13,900
done wrong that way I can easily fix it

00:05:11,220 --> 00:05:15,630
for me the third requirement was I

00:05:13,900 --> 00:05:18,730
wanted to be able to run in my existing

00:05:15,630 --> 00:05:21,130
Django environment so that means being

00:05:18,730 --> 00:05:24,190
able to run the test locally before I

00:05:21,130 --> 00:05:26,400
commit being able to run the tests in

00:05:24,190 --> 00:05:28,180
our continuous integration tool I

00:05:26,400 --> 00:05:31,210
personally didn't feel it was necessary

00:05:28,180 --> 00:05:32,920
to run it between stage and prod that

00:05:31,210 --> 00:05:34,540
wasn't me choice it definitely can be

00:05:32,920 --> 00:05:37,270
done and so these were the requirements

00:05:34,540 --> 00:05:39,490
that I had when I started with this

00:05:37,270 --> 00:05:41,260
project and so I really started with

00:05:39,490 --> 00:05:44,310
something super simple it's just a basic

00:05:41,260 --> 00:05:47,650
set up function and I'm using web

00:05:44,310 --> 00:05:49,540
phantom j/s phantom I think they

00:05:47,650 --> 00:05:50,980
recently went to like they're not

00:05:49,540 --> 00:05:53,530
developing anymore so we'll see what

00:05:50,980 --> 00:05:55,120
that does long-term but the real

00:05:53,530 --> 00:05:56,770
rationale behind using as I wanted

00:05:55,120 --> 00:05:59,890
something headless I wanted something

00:05:56,770 --> 00:06:02,110
that would be fast to execute and as you

00:05:59,890 --> 00:06:03,280
can see this is super simple in the real

00:06:02,110 --> 00:06:05,230
world I have these broken up into

00:06:03,280 --> 00:06:07,900
functions but I just put all the lines

00:06:05,230 --> 00:06:09,550
there because it's so simple it's first

00:06:07,900 --> 00:06:11,020
we stopped with I called it pic viewer

00:06:09,550 --> 00:06:13,600
because why not

00:06:11,020 --> 00:06:15,490
and so the dev one is running on the

00:06:13,600 --> 00:06:18,790
depths of man all this is based in my

00:06:15,490 --> 00:06:21,310
localhost right now and so I have to get

00:06:18,790 --> 00:06:24,070
the fix with when I get the window then

00:06:21,310 --> 00:06:26,740
I go into the page and I save a

00:06:24,070 --> 00:06:28,870
screenshot really when you're starting

00:06:26,740 --> 00:06:32,380
up selenium depending on the page these

00:06:28,870 --> 00:06:33,790
pages have no validations but before you

00:06:32,380 --> 00:06:35,410
would really access these pages if you

00:06:33,790 --> 00:06:37,210
need validations you enter user name or

00:06:35,410 --> 00:06:37,700
whatever you need to do to actually

00:06:37,210 --> 00:06:39,950
access the

00:06:37,700 --> 00:06:42,020
pages and so I'm doing the exact same

00:06:39,950 --> 00:06:44,510
thing which is why I pasted it here for

00:06:42,020 --> 00:06:49,190
both for both staging and depth so in

00:06:44,510 --> 00:06:51,080
the end I should have two images so to

00:06:49,190 --> 00:06:52,490
make my life easier I made clearly

00:06:51,080 --> 00:06:54,710
different rather than the last screen

00:06:52,490 --> 00:06:57,440
shot where it was pixels off and so I

00:06:54,710 --> 00:07:00,940
have just a basic page once in dev ones

00:06:57,440 --> 00:07:03,440
and staging and it's an image viewer

00:07:00,940 --> 00:07:05,480
same image different borders so one's

00:07:03,440 --> 00:07:07,160
the one running in dev I made a CSS

00:07:05,480 --> 00:07:09,620
change clearly to just change the color

00:07:07,160 --> 00:07:11,900
so it should be blue because that's what

00:07:09,620 --> 00:07:14,780
it should be because I said so I don't

00:07:11,900 --> 00:07:16,430
know and the other one is red but the

00:07:14,780 --> 00:07:18,590
real challenge here that you're gonna

00:07:16,430 --> 00:07:21,500
have with this implementation that we

00:07:18,590 --> 00:07:24,710
ran into fairly quickly is the date so I

00:07:21,500 --> 00:07:27,770
just arbitrarily stuck 2019 on the top

00:07:24,710 --> 00:07:29,780
what happens in 2020 if this is a

00:07:27,770 --> 00:07:32,900
changing it's a daily thing like happy

00:07:29,780 --> 00:07:34,910
Monday or a fixed date that's a field

00:07:32,900 --> 00:07:36,500
that you know is going to change and so

00:07:34,910 --> 00:07:38,600
if you're running it's running seconds

00:07:36,500 --> 00:07:40,790
if it's running minutes when you're

00:07:38,600 --> 00:07:42,500
trying to process these images they will

00:07:40,790 --> 00:07:45,140
be different always and so you don't

00:07:42,500 --> 00:07:47,240
want a failure based on a time because

00:07:45,140 --> 00:07:49,430
you know the time should change at least

00:07:47,240 --> 00:07:51,590
in a regular fashion there's also the

00:07:49,430 --> 00:07:53,330
same issue with RSS feeds if you have a

00:07:51,590 --> 00:07:55,880
feed that's going into your site or

00:07:53,330 --> 00:07:58,550
things that update fairly regularly but

00:07:55,880 --> 00:08:00,920
you know can be different and having

00:07:58,550 --> 00:08:03,740
different content isn't wrong so to

00:08:00,920 --> 00:08:05,900
address that I simply wrote just a

00:08:03,740 --> 00:08:07,880
script that's executed once the Dom is

00:08:05,900 --> 00:08:10,190
rendered before I take the screenshot I

00:08:07,880 --> 00:08:12,370
literally just go in I have this class

00:08:10,190 --> 00:08:14,930
on there just for the demo as date and

00:08:12,370 --> 00:08:18,350
within our platform we do have fairly

00:08:14,930 --> 00:08:19,970
consistent CSS classes and so it's

00:08:18,350 --> 00:08:23,180
generally fairly predictable of what

00:08:19,970 --> 00:08:26,510
elements should change and I block it

00:08:23,180 --> 00:08:29,360
out so what I'll end up with is two

00:08:26,510 --> 00:08:30,590
screenshots like this so now we can see

00:08:29,360 --> 00:08:33,050
that the date has been just completely

00:08:30,590 --> 00:08:35,090
removed from it it's really more of a

00:08:33,050 --> 00:08:36,530
practical functional decision I think

00:08:35,090 --> 00:08:38,570
that there are better ways to handle

00:08:36,530 --> 00:08:42,080
dates if you do want to validate the

00:08:38,570 --> 00:08:43,729
content in the date perhaps you actually

00:08:42,080 --> 00:08:45,020
parse the job and you check the field

00:08:43,729 --> 00:08:48,320
when you're running the selenium test

00:08:45,020 --> 00:08:48,910
but for me I don't care if it's 2019 I

00:08:48,320 --> 00:08:51,640
don't care

00:08:48,910 --> 00:08:54,400
it's 1999 for this case I really just

00:08:51,640 --> 00:08:56,140
care about the CSS and did the changes

00:08:54,400 --> 00:08:58,180
get rendered because I have confidence

00:08:56,140 --> 00:09:00,610
perhaps I'm rendering the date from a

00:08:58,180 --> 00:09:02,740
view and their tests are T so I'm not so

00:09:00,610 --> 00:09:05,230
much worried about that field and so

00:09:02,740 --> 00:09:08,770
what I've done here is I got rid of the

00:09:05,230 --> 00:09:10,690
date so really what's happening from a

00:09:08,770 --> 00:09:14,500
functional perspective of how we're

00:09:10,690 --> 00:09:16,830
doing this is I just use Python image

00:09:14,500 --> 00:09:19,480
library and we're comparing pixels I

00:09:16,830 --> 00:09:20,920
kind of broke it out for this talk just

00:09:19,480 --> 00:09:23,020
so it's a little bit more visual as to

00:09:20,920 --> 00:09:25,900
what's happening but basically I take

00:09:23,020 --> 00:09:27,550
the two images and break it up into a

00:09:25,900 --> 00:09:30,370
grid and I just compare the brightness

00:09:27,550 --> 00:09:31,660
of the grid so we can the size of each

00:09:30,370 --> 00:09:33,700
image that we're comparing from the dev

00:09:31,660 --> 00:09:36,930
image in the staging image that can like

00:09:33,700 --> 00:09:39,280
vary yes but here this is just a simple

00:09:36,930 --> 00:09:41,320
going through and comparing and we

00:09:39,280 --> 00:09:43,930
create a grid and so just for visual

00:09:41,320 --> 00:09:46,570
purposes this is kind of what that grid

00:09:43,930 --> 00:09:48,610
ends up looking like so the top right

00:09:46,570 --> 00:09:50,650
they all that could have compared and

00:09:48,610 --> 00:09:53,560
generally what I'm running this in dev I

00:09:50,650 --> 00:09:55,570
don't print out this image because I

00:09:53,560 --> 00:09:58,210
find that there's no need for it really

00:09:55,570 --> 00:10:01,780
the next step here is comparing the two

00:09:58,210 --> 00:10:04,120
images or so it's top corner top corner

00:10:01,780 --> 00:10:06,370
and generally by comparing the

00:10:04,120 --> 00:10:07,960
brightness the image is theoretically

00:10:06,370 --> 00:10:12,070
should be the same I'm not brave enough

00:10:07,960 --> 00:10:14,290
to run live code on stage so I have it

00:10:12,070 --> 00:10:15,850
all set up and it all works but that's

00:10:14,290 --> 00:10:17,980
just really how it's working it's super

00:10:15,850 --> 00:10:22,990
simple super straightforward in terms of

00:10:17,980 --> 00:10:24,760
comparing the two images and so really

00:10:22,990 --> 00:10:27,510
just building out the same add grid

00:10:24,760 --> 00:10:30,550
function we have the images and

00:10:27,510 --> 00:10:31,960
generally in the tests I know the URLs

00:10:30,550 --> 00:10:34,870
and I've already had the images so I

00:10:31,960 --> 00:10:37,870
just throw it to the function and this

00:10:34,870 --> 00:10:39,250
function the rows and columns they can

00:10:37,870 --> 00:10:41,800
be smaller or larger

00:10:39,250 --> 00:10:43,720
yet again this is more of a functional

00:10:41,800 --> 00:10:45,100
tool and I'm just trying to build

00:10:43,720 --> 00:10:46,840
something that'll work they'll tell me

00:10:45,100 --> 00:10:49,090
what's different and so we just really

00:10:46,840 --> 00:10:52,300
go through we make columns and then we

00:10:49,090 --> 00:10:54,640
get the dimensions of the page or the

00:10:52,300 --> 00:10:56,530
each image which has been fixed when we

00:10:54,640 --> 00:10:58,390
originally take the screen shot and I

00:10:56,530 --> 00:11:00,880
really just go in and I compare the

00:10:58,390 --> 00:11:01,750
image and so for the case where the

00:11:00,880 --> 00:11:04,840
image is

00:11:01,750 --> 00:11:09,130
are different that's the real case when

00:11:04,840 --> 00:11:10,600
I go ahead and I draw the grid the real

00:11:09,130 --> 00:11:13,060
purpose of the grid is for me to

00:11:10,600 --> 00:11:15,340
visually see what's different so the

00:11:13,060 --> 00:11:16,300
image is the same and the same basic

00:11:15,340 --> 00:11:19,120
header is the same and all the

00:11:16,300 --> 00:11:21,760
whitespace around is the same but for me

00:11:19,120 --> 00:11:23,410
this allows me to see what's different

00:11:21,760 --> 00:11:25,210
and so what happens when I'm running my

00:11:23,410 --> 00:11:27,940
test cases I run my selenium tests

00:11:25,210 --> 00:11:30,250
generally locally first and things run

00:11:27,940 --> 00:11:35,080
and in the cleanup which I don't think I

00:11:30,250 --> 00:11:36,910
put tear down in the tear down there

00:11:35,080 --> 00:11:38,740
should be just a function I don't think

00:11:36,910 --> 00:11:40,780
I cleared it here but there should be a

00:11:38,740 --> 00:11:42,880
function to get rid of these images that

00:11:40,780 --> 00:11:44,560
have just been generated the reason

00:11:42,880 --> 00:11:46,420
behind that is if the test succeeds I

00:11:44,560 --> 00:11:48,970
don't need all these spare images just

00:11:46,420 --> 00:11:51,970
sitting on my local database or in some

00:11:48,970 --> 00:11:54,100
like heart like them storage that I'm

00:11:51,970 --> 00:11:56,860
using so I'll generally go ahead and

00:11:54,100 --> 00:11:58,900
delete that but for the test the case

00:11:56,860 --> 00:12:01,240
where the tests fail aka it generates

00:11:58,900 --> 00:12:04,060
this result for me it's really simple to

00:12:01,240 --> 00:12:06,430
see exactly what's gone wrong and that's

00:12:04,060 --> 00:12:08,860
really what I need especially when I'm

00:12:06,430 --> 00:12:11,530
dealing with CSS because my big

00:12:08,860 --> 00:12:12,880
challenge is maybe I'm not observant

00:12:11,530 --> 00:12:15,520
enough maybe I don't catch these things

00:12:12,880 --> 00:12:17,470
but it's a way to still do my job and

00:12:15,520 --> 00:12:20,530
execute it well without having to spend

00:12:17,470 --> 00:12:24,790
time clicking around on a site so once

00:12:20,530 --> 00:12:28,300
we have that the last most challenging

00:12:24,790 --> 00:12:31,900
part of this entire implementation is

00:12:28,300 --> 00:12:34,540
the continuous integration so all these

00:12:31,900 --> 00:12:36,339
things work so nicely on your local

00:12:34,540 --> 00:12:38,320
environment I'm running selenium it's

00:12:36,339 --> 00:12:40,750
headless life is good it's giving you

00:12:38,320 --> 00:12:42,370
this output document but what do you do

00:12:40,750 --> 00:12:44,380
when it's time to go continuous

00:12:42,370 --> 00:12:46,510
integration and someone else needs to

00:12:44,380 --> 00:12:48,670
validate that your code actually works

00:12:46,510 --> 00:12:51,400
and that the CSS changes you've made are

00:12:48,670 --> 00:12:52,960
fine so for me this is probably the

00:12:51,400 --> 00:12:57,040
biggest challenge of maybe this entire

00:12:52,960 --> 00:12:59,050
little project originally I was like oh

00:12:57,040 --> 00:13:00,220
we're using circle C I will just throw

00:12:59,050 --> 00:13:03,100
it up there and maybe we'll have a

00:13:00,220 --> 00:13:06,520
docker instance that's reading that URL

00:13:03,100 --> 00:13:09,220
but the real challenge here is running

00:13:06,520 --> 00:13:11,350
this instance separately without running

00:13:09,220 --> 00:13:13,570
it in the docker instance so for us

00:13:11,350 --> 00:13:15,160
we're using cross browser testing and

00:13:13,570 --> 00:13:19,300
cross browser testing a

00:13:15,160 --> 00:13:21,790
was us to take the screenshots of the

00:13:19,300 --> 00:13:23,529
different images and process them and

00:13:21,790 --> 00:13:25,029
what that really means is I just running

00:13:23,529 --> 00:13:26,649
my selenium tests in cross-browser

00:13:25,029 --> 00:13:29,019
testing and they have a built-in

00:13:26,649 --> 00:13:30,970
integration to circle CI which is really

00:13:29,019 --> 00:13:33,750
what I'm using all right

00:13:30,970 --> 00:13:42,750
I'm done and I think I spoke too quickly

00:13:33,750 --> 00:13:42,750
bit nervous sorry yeah

00:13:44,780 --> 00:13:51,860
no that was great so now we have some

00:13:48,800 --> 00:13:54,530
time for questions and if you'd like to

00:13:51,860 --> 00:13:58,790
ask questions either online using a

00:13:54,530 --> 00:14:11,690
hashtag Django QA or in the IRC channel

00:13:58,790 --> 00:14:13,520
and in person hi that was brilliant

00:14:11,690 --> 00:14:16,940
things he said you were gonna know

00:14:13,520 --> 00:14:17,720
open-source that so yes are you going to

00:14:16,940 --> 00:14:19,580
yes I am

00:14:17,720 --> 00:14:20,930
I am now yes there we learned even if

00:14:19,580 --> 00:14:22,700
it's not perfect we should put it out

00:14:20,930 --> 00:14:25,910
there I wasn't bold enough last night

00:14:22,700 --> 00:14:27,710
but yes I will definitely a really

00:14:25,910 --> 00:14:30,590
really cool I was wondering how you

00:14:27,710 --> 00:14:32,330
handle stuff like very iterative pages

00:14:30,590 --> 00:14:33,710
so you're working on something that

00:14:32,330 --> 00:14:36,800
hasn't been finished yet but just keep

00:14:33,710 --> 00:14:38,510
updating how do you go about did you

00:14:36,800 --> 00:14:40,730
just leave it out or that's actually a

00:14:38,510 --> 00:14:42,890
great question and I realize now that I

00:14:40,730 --> 00:14:46,100
omitted that so there are champ there

00:14:42,890 --> 00:14:48,080
are times when CSS changes are valid

00:14:46,100 --> 00:14:50,900
right I made an update and I do want

00:14:48,080 --> 00:14:53,960
every page to change and for those cases

00:14:50,900 --> 00:14:56,660
we have the process of we approve this

00:14:53,960 --> 00:14:58,130
change so it's do we acknowledge that so

00:14:56,660 --> 00:15:00,170
it's a warning is what I have running in

00:14:58,130 --> 00:15:02,420
circles see I and it's you acknowledge

00:15:00,170 --> 00:15:04,370
that warning and if that warning is

00:15:02,420 --> 00:15:06,290
sufficient by the code reviewer we go

00:15:04,370 --> 00:15:08,950
ahead and squash and merge and that way

00:15:06,290 --> 00:15:12,500
the next time it's run it will always

00:15:08,950 --> 00:15:15,020
it'll take a new image and so that's why

00:15:12,500 --> 00:15:18,140
in circles the ayats we try to merge

00:15:15,020 --> 00:15:20,000
integration or merge branches first and

00:15:18,140 --> 00:15:21,380
then run the test runner that way any

00:15:20,000 --> 00:15:22,940
new updates especially if you're in

00:15:21,380 --> 00:15:24,650
between like it's in staging but it's

00:15:22,940 --> 00:15:28,839
not in prod we'll all be able to get

00:15:24,650 --> 00:15:33,530
those changes as well okay cool thanks

00:15:28,839 --> 00:15:36,890
hi great honk thank you just a very good

00:15:33,530 --> 00:15:41,720
question what wasn't very clear to me so

00:15:36,890 --> 00:15:44,480
you normally had lots of selenium tests

00:15:41,720 --> 00:15:48,760
where you like test the behaviors of

00:15:44,480 --> 00:15:51,170
your pages and then all of them become

00:15:48,760 --> 00:15:52,050
screenshots automatically and then you

00:15:51,170 --> 00:15:54,780
can

00:15:52,050 --> 00:15:56,580
so we have them running separately so

00:15:54,780 --> 00:15:59,430
the image comparison one is run

00:15:56,580 --> 00:16:00,570
separately on really certain pages we

00:15:59,430 --> 00:16:02,700
don't have them running on every page

00:16:00,570 --> 00:16:05,070
because we're just parts of our site we

00:16:02,700 --> 00:16:07,170
don't use quite as often but we have

00:16:05,070 --> 00:16:09,210
broken them out as separate because the

00:16:07,170 --> 00:16:10,230
selenium tests for functionality I think

00:16:09,210 --> 00:16:12,990
of it a little bit different because

00:16:10,230 --> 00:16:15,330
you're testing functionality and there

00:16:12,990 --> 00:16:17,040
is some correlation as if I typed this

00:16:15,330 --> 00:16:19,020
does this render if I type this is this

00:16:17,040 --> 00:16:20,130
render there's a correlation there but

00:16:19,020 --> 00:16:22,800
generally we choose to run them

00:16:20,130 --> 00:16:25,110
separately perhaps over time this is

00:16:22,800 --> 00:16:30,000
going to become time-consuming but for

00:16:25,110 --> 00:16:33,180
now that's what we're doing hello thank

00:16:30,000 --> 00:16:35,220
you so much for this talk is there

00:16:33,180 --> 00:16:36,780
anything you've learned from having

00:16:35,220 --> 00:16:38,910
something automated like this I'm

00:16:36,780 --> 00:16:41,280
guessing a lot of changes you maybe

00:16:38,910 --> 00:16:43,680
didn't catch before are now caught by

00:16:41,280 --> 00:16:46,110
the machine is are there things about

00:16:43,680 --> 00:16:48,210
CSS and those differences between

00:16:46,110 --> 00:16:49,770
integration and production or like your

00:16:48,210 --> 00:16:51,660
dev environment and your integration

00:16:49,770 --> 00:16:54,000
environment that you've learned through

00:16:51,660 --> 00:16:56,880
having all this feedback I think we

00:16:54,000 --> 00:16:58,440
really learned it's we have a standard

00:16:56,880 --> 00:17:00,420
now so if I work at a start-up and we're

00:16:58,440 --> 00:17:03,090
very lean and we're trying our best to

00:17:00,420 --> 00:17:05,730
build an amazing product but we have now

00:17:03,090 --> 00:17:08,640
a CSS standard that's really helped me

00:17:05,730 --> 00:17:11,640
personally but it also helps as a team

00:17:08,640 --> 00:17:13,140
what class should we be using and we've

00:17:11,640 --> 00:17:15,420
been following that and that's really

00:17:13,140 --> 00:17:17,430
been the most valuable thing and to hear

00:17:15,420 --> 00:17:19,530
these changes and so that we're not just

00:17:17,430 --> 00:17:21,360
saying okay today it's a float alright

00:17:19,530 --> 00:17:23,930
now it's like blocking like whatever it

00:17:21,360 --> 00:17:25,920
is it's we're using the same

00:17:23,930 --> 00:17:32,550
consistently and so it's really cut back

00:17:25,920 --> 00:17:35,850
on all the issues thank you hi I was

00:17:32,550 --> 00:17:38,580
wondering to turn that into an or to use

00:17:35,850 --> 00:17:41,430
it for regression testing you need to

00:17:38,580 --> 00:17:44,550
have some like pace against which you're

00:17:41,430 --> 00:17:46,230
comparing your change how do you I

00:17:44,550 --> 00:17:49,710
because like in your demonstration you

00:17:46,230 --> 00:17:51,840
were comparing def and stage ring but I

00:17:49,710 --> 00:17:53,250
guess in like for regression testing you

00:17:51,840 --> 00:17:56,660
would compare the current state we'd

00:17:53,250 --> 00:17:59,310
like to suggest a change so to Utrecht

00:17:56,660 --> 00:18:01,860
current state in the case rest Pastore

00:17:59,310 --> 00:18:04,570
or so we do that the current state is

00:18:01,860 --> 00:18:06,130
really track based on prod

00:18:04,570 --> 00:18:07,659
releases and Prada a little bit more

00:18:06,130 --> 00:18:10,269
stable and it comes as a chunk of work

00:18:07,659 --> 00:18:13,450
and I mentioned that we're not currently

00:18:10,269 --> 00:18:14,889
doing the stage versus prod regression

00:18:13,450 --> 00:18:17,169
tests but I think that's where it should

00:18:14,889 --> 00:18:18,880
be done but it's the issue that we were

00:18:17,169 --> 00:18:20,980
having was the continuous integration as

00:18:18,880 --> 00:18:23,169
we're constantly deploying into

00:18:20,980 --> 00:18:25,059
integration and so the integration

00:18:23,169 --> 00:18:27,039
aprotic is really the next step of what

00:18:25,059 --> 00:18:29,289
we need to do to actually have proper

00:18:27,039 --> 00:18:29,679
regression testing but that's a work in

00:18:29,289 --> 00:18:32,279
progress

00:18:29,679 --> 00:18:32,279

YouTube URL: https://www.youtube.com/watch?v=yheY3yF7BTI


