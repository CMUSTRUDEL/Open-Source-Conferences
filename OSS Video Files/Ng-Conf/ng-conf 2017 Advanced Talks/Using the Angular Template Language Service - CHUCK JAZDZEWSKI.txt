Title: Using the Angular Template Language Service - CHUCK JAZDZEWSKI
Publication date: 2017-04-30
Playlist: ng-conf 2017 Advanced Talks
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,770 --> 00:00:07,350
[Applause]

00:00:03,920 --> 00:00:10,019
hi my name is Chuck Jesse as Christopher

00:00:07,350 --> 00:00:13,349
Walken I guess said I'm an engineer at

00:00:10,019 --> 00:00:15,750
Google I've got a long career I don't

00:00:13,349 --> 00:00:19,800
know if I worked at Microsoft and

00:00:15,750 --> 00:00:21,990
Borland I've done a lot of things but

00:00:19,800 --> 00:00:23,460
one of the things I like the best is

00:00:21,990 --> 00:00:25,080
actually simplifying the task of

00:00:23,460 --> 00:00:28,380
programming which is which is one of my

00:00:25,080 --> 00:00:30,840
tag lines and what I what I'm going to

00:00:28,380 --> 00:00:33,960
do is talk about the new angular

00:00:30,840 --> 00:00:35,790
language service now we made that public

00:00:33,960 --> 00:00:37,380
at the beginning of the conference and

00:00:35,790 --> 00:00:39,750
you can download it for visual studio

00:00:37,380 --> 00:00:41,850
code it also is available for webstorm

00:00:39,750 --> 00:00:43,260
and I will show you how to use it in any

00:00:41,850 --> 00:00:46,770
other any other browser that supports

00:00:43,260 --> 00:00:50,789
typescript so the first thing is what is

00:00:46,770 --> 00:00:53,100
this language service thing that we're

00:00:50,789 --> 00:00:56,640
talking about it's kind of an odd name

00:00:53,100 --> 00:01:02,750
but what the language surface is is a

00:00:56,640 --> 00:01:05,220
way to get completions ayres hints and

00:01:02,750 --> 00:01:08,130
navigation all the things you expect

00:01:05,220 --> 00:01:10,680
from a language inside your angular

00:01:08,130 --> 00:01:14,729
templates whether there are external in

00:01:10,680 --> 00:01:19,110
an HTML file or embedded into a into

00:01:14,729 --> 00:01:22,350
that the the annotations in a string you

00:01:19,110 --> 00:01:25,049
can get completions and intellisense and

00:01:22,350 --> 00:01:26,850
any of these LED red squiggles and

00:01:25,049 --> 00:01:30,180
things like that completion lists as it

00:01:26,850 --> 00:01:31,979
shows here and anything like that you

00:01:30,180 --> 00:01:34,020
can also do navigation which means you

00:01:31,979 --> 00:01:36,150
can if you find something you can

00:01:34,020 --> 00:01:38,159
actually go to the definition of it it

00:01:36,150 --> 00:01:44,250
can take you right there so that's

00:01:38,159 --> 00:01:47,939
basically what all this is so the first

00:01:44,250 --> 00:01:52,470
thing is how do you use it in your in

00:01:47,939 --> 00:01:53,939
your own development the first we're

00:01:52,470 --> 00:01:56,340
going to show you is it's pretty easy

00:01:53,939 --> 00:01:57,899
for visual studio code you just go to

00:01:56,340 --> 00:02:00,180
the marketplace and install it like you

00:01:57,899 --> 00:02:02,340
would any other extension you look for

00:02:00,180 --> 00:02:05,340
angular language service in the store

00:02:02,340 --> 00:02:07,590
and you just install it it will auto

00:02:05,340 --> 00:02:10,080
detect that you're actually opening a

00:02:07,590 --> 00:02:12,750
angular project and will start

00:02:10,080 --> 00:02:14,700
it'll read the TS config file find all

00:02:12,750 --> 00:02:17,220
the templates that you have in your

00:02:14,700 --> 00:02:19,110
application and then provide language

00:02:17,220 --> 00:02:21,150
services for any templates that you open

00:02:19,110 --> 00:02:25,080
another way to do it is you can just

00:02:21,150 --> 00:02:28,530
simply open the the the navigate bar and

00:02:25,080 --> 00:02:31,070
say install to install the ng template

00:02:28,530 --> 00:02:32,910
if you just want to do it through text

00:02:31,070 --> 00:02:37,740
so let me show you what that would look

00:02:32,910 --> 00:02:41,190
like once you have it installed so this

00:02:37,740 --> 00:02:44,580
is a small application let's let's zoom

00:02:41,190 --> 00:02:47,160
that a little bit this is a small

00:02:44,580 --> 00:02:49,620
application that is might be a little

00:02:47,160 --> 00:02:52,290
familiar to you which is the the hello

00:02:49,620 --> 00:02:55,560
world application that you would get if

00:02:52,290 --> 00:02:58,070
you installed the QuickStart here it's

00:02:55,560 --> 00:03:00,980
it's open inside of Visual Studio code

00:02:58,070 --> 00:03:03,810
what I've done is I went into the the

00:03:00,980 --> 00:03:05,220
store and I installed the angular

00:03:03,810 --> 00:03:10,290
language service which we can look at

00:03:05,220 --> 00:03:13,380
here and go back to this to here and I'm

00:03:10,290 --> 00:03:14,790
in a template what I can do is what if I

00:03:13,380 --> 00:03:16,440
hover over the template it tells me that

00:03:14,790 --> 00:03:19,110
this is a property of the app component

00:03:16,440 --> 00:03:21,750
so we can get a little information I can

00:03:19,110 --> 00:03:24,090
hit f12 and it goes directly to where

00:03:21,750 --> 00:03:25,590
the data is if you have like a

00:03:24,090 --> 00:03:28,170
definition like name it tells you that

00:03:25,590 --> 00:03:29,700
there's a name property of data and you

00:03:28,170 --> 00:03:31,320
can hit f12 and it goes to the name now

00:03:29,700 --> 00:03:32,489
that this was in a different file it

00:03:31,320 --> 00:03:34,680
would actually take you to the separate

00:03:32,489 --> 00:03:37,350
file as well so it's not just within the

00:03:34,680 --> 00:03:39,860
same file it also shows you completions

00:03:37,350 --> 00:03:44,520
like for example we could go add another

00:03:39,860 --> 00:03:48,270
interpolation here and we just say okay

00:03:44,520 --> 00:03:50,070
we want the name here and then it can

00:03:48,270 --> 00:03:54,360
give you completions or you can say and

00:03:50,070 --> 00:03:57,720
a dot n and then hit tab and then you

00:03:54,360 --> 00:04:02,370
get completions here too but it doesn't

00:03:57,720 --> 00:04:05,459
only only work with just inside of it

00:04:02,370 --> 00:04:07,739
inside of literals we can also go inside

00:04:05,459 --> 00:04:10,290
of templates this is another project

00:04:07,739 --> 00:04:14,580
this is an Ames Ames demonstration

00:04:10,290 --> 00:04:16,650
project we have what it shows inside of

00:04:14,580 --> 00:04:18,239
an HTML template here there's a little

00:04:16,650 --> 00:04:19,760
more complicated application you can do

00:04:18,239 --> 00:04:24,050
the same thing in the context here

00:04:19,760 --> 00:04:26,670
content title you can then take the

00:04:24,050 --> 00:04:29,190
navigation it can goes where great where

00:04:26,670 --> 00:04:31,410
that title is defined you can go back

00:04:29,190 --> 00:04:36,270
you can go where the content is defined

00:04:31,410 --> 00:04:38,700
whoops and you can go back you can eat

00:04:36,270 --> 00:04:41,730
them things you can even hover on on on

00:04:38,700 --> 00:04:42,990
things in the in the in here and we'll

00:04:41,730 --> 00:04:50,370
tell you where that is I'll tell you

00:04:42,990 --> 00:04:54,450
where href and insight and then there's

00:04:50,370 --> 00:04:55,710
also completions within the elements you

00:04:54,450 --> 00:04:58,080
have so any element they have is a

00:04:55,710 --> 00:05:00,990
component selector will show up in this

00:04:58,080 --> 00:05:09,960
list and will help you then you can do

00:05:00,990 --> 00:05:12,180
autocomplete or you can do card and so

00:05:09,960 --> 00:05:14,390
it gives you our auto completions that

00:05:12,180 --> 00:05:17,640
you would expect in any modern language

00:05:14,390 --> 00:05:20,130
in the language or in angular templates

00:05:17,640 --> 00:05:25,380
and this is just showing you what it

00:05:20,130 --> 00:05:27,690
would look like in vias code you can

00:05:25,380 --> 00:05:31,470
also get the language service if you use

00:05:27,690 --> 00:05:33,060
webstorm so let's go let's figure out to

00:05:31,470 --> 00:05:34,770
get into webstorm it's a little bit

00:05:33,060 --> 00:05:36,720
different than it's not quite as easy as

00:05:34,770 --> 00:05:39,960
individual studio code but it's not that

00:05:36,720 --> 00:05:43,890
bad you take a an application that you

00:05:39,960 --> 00:05:45,690
have that's a an angular application and

00:05:43,890 --> 00:05:48,060
you just install the language service

00:05:45,690 --> 00:05:51,510
locally into your project as a dev

00:05:48,060 --> 00:05:54,930
dependency when when webstorm sees that

00:05:51,510 --> 00:05:57,180
it will load the dev dependency and then

00:05:54,930 --> 00:05:59,870
provide the template the language

00:05:57,180 --> 00:06:01,680
service capabilities inside of webstorm

00:05:59,870 --> 00:06:08,750
so let's look at what that would look

00:06:01,680 --> 00:06:12,090
like in webstorm we say the same project

00:06:08,750 --> 00:06:13,590
that we had the hello world and here you

00:06:12,090 --> 00:06:15,300
can actually go you can you can go to

00:06:13,590 --> 00:06:17,790
the date the data you can then navigate

00:06:15,300 --> 00:06:19,919
to name which is what we did before it

00:06:17,790 --> 00:06:21,360
opens that webstorm also gives you other

00:06:19,919 --> 00:06:23,610
services on top of what we provide

00:06:21,360 --> 00:06:26,070
inside the language service they give

00:06:23,610 --> 00:06:29,100
you they give you color a colorization

00:06:26,070 --> 00:06:31,280
within the actual temple itself and they

00:06:29,100 --> 00:06:33,360
have a little bit nicer in the way of

00:06:31,280 --> 00:06:36,300
completions where they autocomplete the

00:06:33,360 --> 00:06:37,559
the end tags so there's a little bit

00:06:36,300 --> 00:06:39,599
nicer things in

00:06:37,559 --> 00:06:41,549
of the language service but it or inside

00:06:39,599 --> 00:06:48,029
of the language support for angular

00:06:41,549 --> 00:06:49,319
templates inside of webstorm okay so the

00:06:48,029 --> 00:06:52,439
one thing I would notice I'll show you

00:06:49,319 --> 00:06:54,119
is in the TS config file is that what

00:06:52,439 --> 00:06:56,639
this requires is that there's a dev

00:06:54,119 --> 00:06:59,669
dependency here and what I added was

00:06:56,639 --> 00:07:09,329
this line here and that's all it really

00:06:59,669 --> 00:07:11,099
was required an NPM install or yarn now

00:07:09,329 --> 00:07:14,099
it gets a little bit more tricky if you

00:07:11,099 --> 00:07:15,779
want to use any other language or any

00:07:14,099 --> 00:07:17,599
other editor that supports typescript so

00:07:15,779 --> 00:07:20,309
for example if you're using sublime

00:07:17,599 --> 00:07:21,779
there is a an extension to sublime that

00:07:20,309 --> 00:07:24,449
allows you to support typescript once

00:07:21,779 --> 00:07:26,999
you've installed that then it's actually

00:07:24,449 --> 00:07:28,439
a fairly reasonable process to get the

00:07:26,999 --> 00:07:30,689
language service working we're gonna

00:07:28,439 --> 00:07:32,549
make improvements to this working with

00:07:30,689 --> 00:07:34,979
the typescript team to make to make this

00:07:32,549 --> 00:07:36,539
a little easier to do but essentially

00:07:34,979 --> 00:07:38,609
what you would do is you install the at

00:07:36,539 --> 00:07:41,689
next version of typescript this will

00:07:38,609 --> 00:07:44,639
install the 2.3 version of typescript

00:07:41,689 --> 00:07:46,199
the 2.3 version type script has a

00:07:44,639 --> 00:07:48,569
language service plug-in model and

00:07:46,199 --> 00:07:52,349
that's what we actually pay it we will

00:07:48,569 --> 00:07:56,339
plug into the typescript language

00:07:52,349 --> 00:07:57,360
service so let's show you what that

00:07:56,339 --> 00:08:00,659
would look like I'm gonna be using

00:07:57,360 --> 00:08:03,449
sublime here is an example now what I

00:08:00,659 --> 00:08:08,129
did in sublime is there's this

00:08:03,449 --> 00:08:10,949
typescript T SDK variable that tells the

00:08:08,129 --> 00:08:12,269
typescript plug-in which version of type

00:08:10,949 --> 00:08:14,069
script or which version of the

00:08:12,269 --> 00:08:16,109
typescript language service to load and

00:08:14,069 --> 00:08:24,719
this one is I just installed it in this

00:08:16,109 --> 00:08:26,639
T s23 directory this allows me to do the

00:08:24,719 --> 00:08:31,099
same kind of navigation so I can have I

00:08:26,639 --> 00:08:33,229
can go to data I can go to name here

00:08:31,099 --> 00:08:37,249
oops

00:08:33,229 --> 00:08:37,249
then I can do things like

00:08:40,010 --> 00:08:46,950
and you can see completions inside of

00:08:44,010 --> 00:08:56,760
sublime the same thing the completions

00:08:46,950 --> 00:08:58,890
you expect inside of typescript so how

00:08:56,760 --> 00:09:01,500
does the language service work you don't

00:08:58,890 --> 00:09:03,030
really need to know this to use it it

00:09:01,500 --> 00:09:04,740
just actually just kind of figures

00:09:03,030 --> 00:09:06,420
things out as you go along and provides

00:09:04,740 --> 00:09:07,530
the completions but it might be a little

00:09:06,420 --> 00:09:09,690
bit interesting to figure out how our

00:09:07,530 --> 00:09:11,190
language service works this is actually

00:09:09,690 --> 00:09:12,840
a little bit not only how the language

00:09:11,190 --> 00:09:14,520
service works for angular but also a

00:09:12,840 --> 00:09:18,300
little bit of an idea of how language

00:09:14,520 --> 00:09:20,400
service works in general the topology of

00:09:18,300 --> 00:09:24,240
the language service is that you have an

00:09:20,400 --> 00:09:26,550
editor process and then it starts the

00:09:24,240 --> 00:09:28,920
editor will start a separate service or

00:09:26,550 --> 00:09:32,760
a separate process and it will speak to

00:09:28,920 --> 00:09:35,210
that process through an RPC and anytime

00:09:32,760 --> 00:09:38,010
you type inside of the editor it'll send

00:09:35,210 --> 00:09:40,890
information to the other process to

00:09:38,010 --> 00:09:42,570
maintain a common state about what is in

00:09:40,890 --> 00:09:44,280
the link what is part of your project

00:09:42,570 --> 00:09:46,140
what the current state of it is this

00:09:44,280 --> 00:09:48,180
means any changes you make to the file

00:09:46,140 --> 00:09:50,880
are going to be sent across this RPC and

00:09:48,180 --> 00:09:52,290
then any time it ask questions like what

00:09:50,880 --> 00:09:54,240
are the completion lists that I should

00:09:52,290 --> 00:09:56,280
show what are diagnostic error messages

00:09:54,240 --> 00:09:59,580
I should show those come across in the

00:09:56,280 --> 00:10:01,410
RPC right now there is a there's a

00:09:59,580 --> 00:10:05,010
problem in the current architecture for

00:10:01,410 --> 00:10:08,220
vias code is that there also is a

00:10:05,010 --> 00:10:10,740
separate process that is typescript

00:10:08,220 --> 00:10:11,940
doing exactly the same thing so when

00:10:10,740 --> 00:10:14,160
you're in a typescript file you're

00:10:11,940 --> 00:10:16,200
actually getting that same information

00:10:14,160 --> 00:10:17,850
being sent into a separate process it's

00:10:16,200 --> 00:10:20,460
also maintaining almost exactly the same

00:10:17,850 --> 00:10:22,590
information and so now you have two

00:10:20,460 --> 00:10:23,670
processes running that's what you would

00:10:22,590 --> 00:10:25,140
get if you use the current language

00:10:23,670 --> 00:10:29,430
service what we're working on in the

00:10:25,140 --> 00:10:33,240
future is a better model which is when

00:10:29,430 --> 00:10:34,470
we have 2.3 we will then run the

00:10:33,240 --> 00:10:36,600
language server at the angular language

00:10:34,470 --> 00:10:38,820
service as a plug-in and only have one

00:10:36,600 --> 00:10:41,040
process and one communication channel

00:10:38,820 --> 00:10:46,170
that's operating so that's what we'll do

00:10:41,040 --> 00:10:48,570
in the future let's look at what would

00:10:46,170 --> 00:10:52,110
happen what happens when you ask for a

00:10:48,570 --> 00:10:54,150
completion list within a template itself

00:10:52,110 --> 00:10:56,010
when you asked for the completion list

00:10:54,150 --> 00:10:57,390
you have a cursor that's in the middle

00:10:56,010 --> 00:11:00,360
let's see we're gonna have a cursor in

00:10:57,390 --> 00:11:02,580
the middle of a div here and we're

00:11:00,360 --> 00:11:04,320
asking okay what are the things that can

00:11:02,580 --> 00:11:06,060
go in here and then obviously what you

00:11:04,320 --> 00:11:07,860
want then is a list of the elements that

00:11:06,060 --> 00:11:10,680
can be inside of a div but how does it

00:11:07,860 --> 00:11:14,490
know that well first thing it does is it

00:11:10,680 --> 00:11:17,880
parses the the template into a HTML an

00:11:14,490 --> 00:11:20,130
HTML a SD this is okay now I have main I

00:11:17,880 --> 00:11:21,450
have the MB card and I have a div it

00:11:20,130 --> 00:11:23,550
doesn't really know what those are but

00:11:21,450 --> 00:11:27,360
that's essentially what those would look

00:11:23,550 --> 00:11:29,760
like in an HTML AST then the angular

00:11:27,360 --> 00:11:32,340
compiler gets involved and says okay

00:11:29,760 --> 00:11:34,200
let's try and interpret what from the

00:11:32,340 --> 00:11:36,540
context you're in what module your

00:11:34,200 --> 00:11:39,540
component is a part of all those cut

00:11:36,540 --> 00:11:41,100
what scope you're in what is the meaning

00:11:39,540 --> 00:11:42,660
of each one of these elements and we see

00:11:41,100 --> 00:11:43,710
that the the first element it doesn't

00:11:42,660 --> 00:11:45,180
really have an element associated with

00:11:43,710 --> 00:11:47,910
it it's a component

00:11:45,180 --> 00:11:51,030
it's just main but the the middle one is

00:11:47,910 --> 00:11:53,310
actually the MD card element MB card

00:11:51,030 --> 00:11:55,080
component and then inside the env car

00:11:53,310 --> 00:11:58,440
component is an element which is just a

00:11:55,080 --> 00:12:00,930
div now we need to figure out where the

00:11:58,440 --> 00:12:04,920
cursor is in the context of this HTML

00:12:00,930 --> 00:12:06,750
ast or this H the template ast

00:12:04,920 --> 00:12:08,970
so the first thing we say is is it

00:12:06,750 --> 00:12:11,250
within this element and yes it's within

00:12:08,970 --> 00:12:12,810
the main element that's good is it

00:12:11,250 --> 00:12:16,410
within any one of its children elements

00:12:12,810 --> 00:12:19,290
ah actually yes it actually is in the md

00:12:16,410 --> 00:12:21,480
card element that's good now we actually

00:12:19,290 --> 00:12:22,920
go down one more set is it any any one

00:12:21,480 --> 00:12:26,340
of his children and finally we get down

00:12:22,920 --> 00:12:27,600
to the div you say oh it's it's actually

00:12:26,340 --> 00:12:28,610
in the div the div doesn't have any

00:12:27,600 --> 00:12:31,950
children

00:12:28,610 --> 00:12:33,600
the actual location is with inside the

00:12:31,950 --> 00:12:35,960
div so we were expecting a child of the

00:12:33,600 --> 00:12:38,930
div so the question that we're asking is

00:12:35,960 --> 00:12:41,250
what can be a child of a div and then

00:12:38,930 --> 00:12:43,800
that's where it takes over and says oh

00:12:41,250 --> 00:12:45,600
I'll produce all of the elements in HTML

00:12:43,800 --> 00:12:47,940
and that can be part of the elements of

00:12:45,600 --> 00:12:51,000
a div as well of any component selector

00:12:47,940 --> 00:12:52,410
that can be part of a div and so that's

00:12:51,000 --> 00:12:54,620
where you get in the completion list so

00:12:52,410 --> 00:12:56,340
that's what it's going to asking you

00:12:54,620 --> 00:12:58,920
what might be a little bit more

00:12:56,340 --> 00:13:01,350
complicated is what if you're in an

00:12:58,920 --> 00:13:03,630
interpolation let's say that we put the

00:13:01,350 --> 00:13:04,860
interpolation inside that div and now we

00:13:03,630 --> 00:13:07,700
want to know

00:13:04,860 --> 00:13:12,000
what is the completion list after data

00:13:07,700 --> 00:13:14,190
okay so the first thing we do is realize

00:13:12,000 --> 00:13:17,070
that the HTML ast is not very helpful

00:13:14,190 --> 00:13:20,520
for us it just tells us that there's

00:13:17,070 --> 00:13:23,880
some text here that looks like has looks

00:13:20,520 --> 00:13:25,860
funny so and the cursor is probably

00:13:23,880 --> 00:13:28,350
somewhere after that dot okay so now we

00:13:25,860 --> 00:13:29,850
have to we have to then parse it this is

00:13:28,350 --> 00:13:31,380
where the expression a this prescient

00:13:29,850 --> 00:13:35,490
parser is part of the template component

00:13:31,380 --> 00:13:37,920
the template parser gets involved it

00:13:35,490 --> 00:13:39,540
produces an expression AST now I'm

00:13:37,920 --> 00:13:42,000
skipping a little bit the the there's

00:13:39,540 --> 00:13:43,980
also the the template ast is part of the

00:13:42,000 --> 00:13:46,230
template AAC there's also an expression

00:13:43,980 --> 00:13:48,090
AST which is subpart this is what the

00:13:46,230 --> 00:13:50,120
ast would look like for this expression

00:13:48,090 --> 00:13:52,560
and it's what the compiler turns it into

00:13:50,120 --> 00:13:54,150
every time you type an interpellation

00:13:52,560 --> 00:13:56,250
expression so we have an interpolation

00:13:54,150 --> 00:13:58,620
at the top says that we were doing we're

00:13:56,250 --> 00:14:03,050
inside of interpolation we're in this

00:13:58,620 --> 00:14:05,670
read we're reading data from something

00:14:03,050 --> 00:14:09,150
and we're reading the data property from

00:14:05,670 --> 00:14:10,860
implicit but the missing the thing is

00:14:09,150 --> 00:14:14,310
missing here is that there's there's no

00:14:10,860 --> 00:14:16,350
value here for missing and that's

00:14:14,310 --> 00:14:18,150
because we do err corruption if we this

00:14:16,350 --> 00:14:20,100
is not syntactically correct but we

00:14:18,150 --> 00:14:21,690
still need to produce an AST so that we

00:14:20,100 --> 00:14:24,060
can actually interpret it so we just

00:14:21,690 --> 00:14:26,280
insert something which in this case I'll

00:14:24,060 --> 00:14:27,750
just say missing whatever doesn't really

00:14:26,280 --> 00:14:31,260
matter what's there because it's not

00:14:27,750 --> 00:14:33,060
there now we go through the same process

00:14:31,260 --> 00:14:37,410
which is is it inside the interpolation

00:14:33,060 --> 00:14:38,970
yes is it inside the read for this

00:14:37,410 --> 00:14:42,150
missing and it says yes that's where the

00:14:38,970 --> 00:14:45,060
cursor is but it actually is stops there

00:14:42,150 --> 00:14:46,260
says oh where we are is in this read of

00:14:45,060 --> 00:14:50,340
a missing expression we want to know

00:14:46,260 --> 00:14:52,260
what can be here in the AST that's what

00:14:50,340 --> 00:14:54,590
we're asking for this is where

00:14:52,260 --> 00:14:57,180
typescript gets involved so this is why

00:14:54,590 --> 00:14:59,910
the language service the angular

00:14:57,180 --> 00:15:01,020
language servers uses typescript so we

00:14:59,910 --> 00:15:03,060
have a version of the typescript

00:15:01,020 --> 00:15:05,190
language service inside the angular

00:15:03,060 --> 00:15:08,190
language service inside of our process

00:15:05,190 --> 00:15:11,670
and what we're asking for is what's the

00:15:08,190 --> 00:15:14,220
data property of dollar implicit now

00:15:11,670 --> 00:15:16,170
dollar implicit is a special property or

00:15:14,220 --> 00:15:17,820
a special name that we have that means

00:15:16,170 --> 00:15:18,630
whatever context the template is

00:15:17,820 --> 00:15:20,280
executing in when

00:15:18,630 --> 00:15:22,650
in this case it's the component itself

00:15:20,280 --> 00:15:26,640
so it's asking what the data property of

00:15:22,650 --> 00:15:29,370
the component is in return type scrip

00:15:26,640 --> 00:15:30,570
returns back a symbol says the that the

00:15:29,370 --> 00:15:33,660
data properties represented by this

00:15:30,570 --> 00:15:35,280
symbol then you say okay well I actually

00:15:33,660 --> 00:15:38,010
I don't really need to know what that

00:15:35,280 --> 00:15:39,510
data property is I want to know what the

00:15:38,010 --> 00:15:41,220
members of the data property is because

00:15:39,510 --> 00:15:43,110
that's what can be following the dot and

00:15:41,220 --> 00:15:44,670
so what you get back from type for the

00:15:43,110 --> 00:15:46,860
type script is a list of the members of

00:15:44,670 --> 00:15:48,630
data and that's where we generate our

00:15:46,860 --> 00:15:50,160
list and so that's basically how the

00:15:48,630 --> 00:15:51,900
type the language service does we hit

00:15:50,160 --> 00:15:56,130
dot now this happens a lot quicker than

00:15:51,900 --> 00:15:57,660
I can talk fortunately so this will then

00:15:56,130 --> 00:16:01,410
bring down a list so that's what's

00:15:57,660 --> 00:16:02,610
happening when you hit data dot now this

00:16:01,410 --> 00:16:04,770
part I'm going to say what does it take

00:16:02,610 --> 00:16:06,090
to roll your own editor integration now

00:16:04,770 --> 00:16:07,890
I don't expect I'm talking to very many

00:16:06,090 --> 00:16:10,260
people here but if you have your own

00:16:07,890 --> 00:16:12,330
editor let's say you have vim and you

00:16:10,260 --> 00:16:13,740
really are excited about it

00:16:12,330 --> 00:16:15,570
and you really do all your angular

00:16:13,740 --> 00:16:17,370
development in vim and you really like

00:16:15,570 --> 00:16:18,540
this angular language service thing what

00:16:17,370 --> 00:16:19,890
would you do well the first thing I

00:16:18,540 --> 00:16:24,750
would do is wait for someone to write an

00:16:19,890 --> 00:16:27,830
extension for me but if you're if you're

00:16:24,750 --> 00:16:29,940
that person this is what you would do

00:16:27,830 --> 00:16:32,040
you would have to implement this

00:16:29,940 --> 00:16:34,470
interface this is the language service

00:16:32,040 --> 00:16:35,760
host interface this is all of the

00:16:34,470 --> 00:16:37,620
information you need to provide to the

00:16:35,760 --> 00:16:40,530
angular language service for it to be

00:16:37,620 --> 00:16:41,790
able to do its job that's a lot of stuff

00:16:40,530 --> 00:16:43,050
it's actually really come more

00:16:41,790 --> 00:16:45,360
complicated because some of these types

00:16:43,050 --> 00:16:46,440
are pretty big well the way the reason

00:16:45,360 --> 00:16:48,090
why you have to implement this is

00:16:46,440 --> 00:16:49,860
because the language service is divided

00:16:48,090 --> 00:16:51,780
into two parts it's divided into the

00:16:49,860 --> 00:16:53,940
actual language service itself and it

00:16:51,780 --> 00:16:57,510
delegates out to the host the host

00:16:53,940 --> 00:16:58,830
actually uses typescript to determine to

00:16:57,510 --> 00:17:00,210
answer all the questions that we had

00:16:58,830 --> 00:17:02,160
there so those all those methods are

00:17:00,210 --> 00:17:04,589
actually it's using typescript to do

00:17:02,160 --> 00:17:06,660
that so really if you're gonna roll your

00:17:04,589 --> 00:17:09,600
own editor integration you really don't

00:17:06,660 --> 00:17:13,050
need to do this what you need to do is

00:17:09,600 --> 00:17:15,209
just create your however you're creating

00:17:13,050 --> 00:17:17,040
your typescript host you just need to

00:17:15,209 --> 00:17:19,439
then create the angular language service

00:17:17,040 --> 00:17:21,689
so you pass in the host that you're

00:17:19,439 --> 00:17:23,730
using four types typescript service and

00:17:21,689 --> 00:17:25,680
the surface itself and you get back a

00:17:23,730 --> 00:17:27,689
language service host then you say

00:17:25,680 --> 00:17:28,980
create language service passing in the

00:17:27,689 --> 00:17:30,510
host and now you get back to language

00:17:28,980 --> 00:17:31,780
service and you can ask things like get

00:17:30,510 --> 00:17:33,940
diagnostics for a file

00:17:31,780 --> 00:17:36,190
or you can actually giving a source

00:17:33,940 --> 00:17:37,930
position give me what the completion

00:17:36,190 --> 00:17:39,580
lists at this location and you get back

00:17:37,930 --> 00:17:41,860
a list of completions and so that's what

00:17:39,580 --> 00:17:44,800
you would do so if you already have an

00:17:41,860 --> 00:17:46,330
integration for typescript the angular

00:17:44,800 --> 00:17:48,190
language service fits in pretty well in

00:17:46,330 --> 00:17:49,690
fact you can actually just wrap the

00:17:48,190 --> 00:17:52,450
language Suranga learning or the

00:17:49,690 --> 00:17:54,820
typescript language service you can wrap

00:17:52,450 --> 00:17:56,170
the angular language service and make it

00:17:54,820 --> 00:17:57,310
look like a typescript language service

00:17:56,170 --> 00:18:02,020
which is what the plug-in architecture

00:17:57,310 --> 00:18:03,670
does so the one thing I you're doing

00:18:02,020 --> 00:18:05,140
rolling your own editor integration the

00:18:03,670 --> 00:18:07,270
one thing that we do that's that's

00:18:05,140 --> 00:18:08,620
suspicious of specific to angular

00:18:07,270 --> 00:18:10,420
language service that typescript doesn't

00:18:08,620 --> 00:18:12,870
do is it provides completions and

00:18:10,420 --> 00:18:16,510
diagnostics in spite of an HTML file

00:18:12,870 --> 00:18:19,150
what HTML files you might ask which ones

00:18:16,510 --> 00:18:20,800
like I don't want to provide completions

00:18:19,150 --> 00:18:22,690
inside of HTML files that are doing part

00:18:20,800 --> 00:18:24,160
of the bootstrap process I only want to

00:18:22,690 --> 00:18:26,110
provide it in templates how do I know

00:18:24,160 --> 00:18:28,990
the difference well that's what this one

00:18:26,110 --> 00:18:31,060
comes in so once you have a language

00:18:28,990 --> 00:18:35,080
service host you can ask the host for

00:18:31,060 --> 00:18:36,370
all of the all of the HTML files that

00:18:35,080 --> 00:18:38,380
are part of the project that are

00:18:36,370 --> 00:18:40,570
templates and that's what this guy does

00:18:38,380 --> 00:18:42,490
so every time you ask that at what Ghost

00:18:40,570 --> 00:18:48,280
it'll make sure it has an update list

00:18:42,490 --> 00:18:50,350
and then we return you that list so now

00:18:48,280 --> 00:18:52,420
you know how to yeah it's from now you

00:18:50,350 --> 00:18:53,560
know how to roll your own however that

00:18:52,420 --> 00:18:54,790
happens wherever you integrated

00:18:53,560 --> 00:18:57,610
typescript then you can integrate

00:18:54,790 --> 00:18:58,840
angular language surface as well the one

00:18:57,610 --> 00:19:00,850
thing I want to do is talk about what

00:18:58,840 --> 00:19:04,600
the future is for the language service

00:19:00,850 --> 00:19:06,460
the future is right now we have a I

00:19:04,600 --> 00:19:07,540
would say experimental or beta version

00:19:06,460 --> 00:19:09,640
of the language service there's still

00:19:07,540 --> 00:19:10,870
some issues that we need to work out and

00:19:09,640 --> 00:19:13,720
there's a lot of features that I want to

00:19:10,870 --> 00:19:15,340
implement some of the features we want

00:19:13,720 --> 00:19:16,990
to do is the one I talked about or write

00:19:15,340 --> 00:19:19,210
right now is the unification of the

00:19:16,990 --> 00:19:22,420
typescript language service with 2.3 so

00:19:19,210 --> 00:19:23,320
once 2.3 is available shortly after that

00:19:22,420 --> 00:19:26,080
the language service will be available

00:19:23,320 --> 00:19:27,130
that will be a unified architecture the

00:19:26,080 --> 00:19:28,720
other thing I want to do is once the

00:19:27,130 --> 00:19:30,370
unified architecture we can do find all

00:19:28,720 --> 00:19:32,770
references because I'll have I'll be

00:19:30,370 --> 00:19:35,050
able to answer questions when you say

00:19:32,770 --> 00:19:36,160
find all references to name within

00:19:35,050 --> 00:19:38,290
typescript you'll actually get

00:19:36,160 --> 00:19:39,910
references into the template which is

00:19:38,290 --> 00:19:42,780
currently not possible with the split

00:19:39,910 --> 00:19:45,020
version I want to do rename refactoring

00:19:42,780 --> 00:19:46,040
a unified version

00:19:45,020 --> 00:19:47,660
I want to start taking advantage of

00:19:46,040 --> 00:19:50,770
quick fixes and prove the diagnostic

00:19:47,660 --> 00:19:53,960
error messages which people love so much

00:19:50,770 --> 00:19:55,640
and I almost I want to add support well

00:19:53,960 --> 00:19:57,920
that's where you guys come in add

00:19:55,640 --> 00:19:59,690
support for more editors so anyone who

00:19:57,920 --> 00:20:03,170
wants to add a support for an editor

00:19:59,690 --> 00:20:07,430
come see me and then we can get on tell

00:20:03,170 --> 00:20:09,530
you what what the process is so summary

00:20:07,430 --> 00:20:11,030
is that if you want to use webstorm go

00:20:09,530 --> 00:20:13,670
to the website you want to use this

00:20:11,030 --> 00:20:15,950
visual Co code go to visual studio code

00:20:13,670 --> 00:20:17,900
site go to there go to there the

00:20:15,950 --> 00:20:19,610
marketplace and install it any other

00:20:17,900 --> 00:20:21,350
editors and then you want to make sure

00:20:19,610 --> 00:20:23,390
you're using typescript the next version

00:20:21,350 --> 00:20:27,000
a 2.3 and then you want to install the

00:20:23,390 --> 00:20:33,300
language service into that thank you

00:20:27,000 --> 00:20:33,300
[Applause]

00:20:38,020 --> 00:20:40,080

YouTube URL: https://www.youtube.com/watch?v=ez3R0Gi4z5A


