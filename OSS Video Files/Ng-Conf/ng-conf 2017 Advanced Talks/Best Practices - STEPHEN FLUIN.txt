Title: Best Practices - STEPHEN FLUIN
Publication date: 2017-04-30
Playlist: ng-conf 2017 Advanced Talks
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:01,970 --> 00:00:06,180
all right so this is about a 20-minute

00:00:04,350 --> 00:00:08,220
talk and we've got about 10 minutes left

00:00:06,180 --> 00:00:09,420
so I'm going to go fast if you raise

00:00:08,220 --> 00:00:11,519
your hand and ask me to slow down I'll

00:00:09,420 --> 00:00:13,139
probably ignore you so I'm Stephen

00:00:11,519 --> 00:00:14,400
fluent developer advocate at Google on

00:00:13,139 --> 00:00:16,529
angular we're here to talk about best

00:00:14,400 --> 00:00:19,619
practices we can't talk about all of

00:00:16,529 --> 00:00:20,850
them I'm sorry so here's a link check

00:00:19,619 --> 00:00:22,050
out our style guide if you want to know

00:00:20,850 --> 00:00:24,210
how to write your components how to

00:00:22,050 --> 00:00:25,619
format your code we figured out most of

00:00:24,210 --> 00:00:27,689
that stuff and put the things that we've

00:00:25,619 --> 00:00:30,090
figured out onto the website you can

00:00:27,689 --> 00:00:31,740
also just find this on angular io there

00:00:30,090 --> 00:00:33,329
you might also just see that pop up on

00:00:31,740 --> 00:00:36,480
your Android phone because there's a

00:00:33,329 --> 00:00:37,980
beacon floating around in my pocket Wow

00:00:36,480 --> 00:00:41,250
so the part that I do want to talk about

00:00:37,980 --> 00:00:42,930
is top tips for smaller bundles so how

00:00:41,250 --> 00:00:44,730
do we take the applications that we

00:00:42,930 --> 00:00:46,559
actually build and then we want to

00:00:44,730 --> 00:00:47,700
distribute those out to our users we

00:00:46,559 --> 00:00:49,770
want to take it and make it something

00:00:47,700 --> 00:00:51,989
useful that runs in the browser in a

00:00:49,770 --> 00:00:53,850
very great user experience for our users

00:00:51,989 --> 00:00:55,559
right we want to ship something small

00:00:53,850 --> 00:00:57,149
and fast for users so if you're using

00:00:55,559 --> 00:00:58,710
the CLI you're going to see something

00:00:57,149 --> 00:01:00,359
that looks a lot like this you're going

00:00:58,710 --> 00:01:01,980
to have an index.html you're going to

00:01:00,359 --> 00:01:04,229
any of your assets then you're going to

00:01:01,980 --> 00:01:05,790
have a few bundle files and so this is

00:01:04,229 --> 00:01:08,790
all the bits that you've written in

00:01:05,790 --> 00:01:11,100
typescript boiled-down minified and

00:01:08,790 --> 00:01:13,020
ready to ship down to the user which is

00:01:11,100 --> 00:01:16,049
in general exactly what we want to do

00:01:13,020 --> 00:01:17,610
and it's going to be great because what

00:01:16,049 --> 00:01:19,590
ends up happening is if you have a small

00:01:17,610 --> 00:01:21,900
bundle if you put a lot of care into the

00:01:19,590 --> 00:01:23,280
way that you build your application your

00:01:21,900 --> 00:01:25,890
application will be faster for users

00:01:23,280 --> 00:01:27,509
which means your app load better better

00:01:25,890 --> 00:01:28,799
conversions I love the the quotes that

00:01:27,509 --> 00:01:31,650
Rob was sharing earlier this morning

00:01:28,799 --> 00:01:33,750
about how making small fast applications

00:01:31,650 --> 00:01:35,100
really ends up driving forward all of

00:01:33,750 --> 00:01:36,689
your business results that you're hoping

00:01:35,100 --> 00:01:38,729
for and so this is actually a flame

00:01:36,689 --> 00:01:40,259
chart from chrome where a lot of people

00:01:38,729 --> 00:01:41,850
don't know this but the slowest part

00:01:40,259 --> 00:01:44,070
about booting any sort of library or

00:01:41,850 --> 00:01:46,320
framework especially right now with

00:01:44,070 --> 00:01:48,630
angular is actually the parse time for

00:01:46,320 --> 00:01:50,040
your JavaScript and so it's not

00:01:48,630 --> 00:01:51,570
necessarily the change detection

00:01:50,040 --> 00:01:53,040
anything like that it runs upfront it's

00:01:51,570 --> 00:01:54,810
all that parse time how does the browser

00:01:53,040 --> 00:01:56,850
ingest all the JavaScript that you're

00:01:54,810 --> 00:02:00,630
writing and so if you make smaller

00:01:56,850 --> 00:02:02,490
bundles you will see a direct impact on

00:02:00,630 --> 00:02:04,909
everything you do in terms of speed for

00:02:02,490 --> 00:02:04,909
your users

00:02:05,189 --> 00:02:09,690
disclaimer so I'm going to talk about

00:02:06,780 --> 00:02:11,520
file size of the lots here I'm putting

00:02:09,690 --> 00:02:12,510
uncompressed sizes so don't necessarily

00:02:11,520 --> 00:02:13,440
be afraid so if you see something that

00:02:12,510 --> 00:02:16,410
says like 300

00:02:13,440 --> 00:02:18,480
14k that's not actually sending 300 14k

00:02:16,410 --> 00:02:20,340
over the wire that should be around 70 K

00:02:18,480 --> 00:02:24,750
if you have your server configured to

00:02:20,340 --> 00:02:27,360
use gzip compression so tip number one

00:02:24,750 --> 00:02:28,800
measure your bundles there's a really

00:02:27,360 --> 00:02:30,840
great tool on NPM right now called

00:02:28,800 --> 00:02:32,400
source map Explorer there's a number of

00:02:30,840 --> 00:02:33,600
tools that people are working on to make

00:02:32,400 --> 00:02:34,920
this better and to create better

00:02:33,600 --> 00:02:36,840
experiences but this is the best one

00:02:34,920 --> 00:02:38,880
that I've seen so far relatively easy to

00:02:36,840 --> 00:02:39,900
install with a single NPM command and

00:02:38,880 --> 00:02:41,730
then what you do is you're going to do a

00:02:39,900 --> 00:02:44,730
production build and you're going to

00:02:41,730 --> 00:02:46,080
store this - SM flag in the command line

00:02:44,730 --> 00:02:47,280
and what that will do is it will

00:02:46,080 --> 00:02:48,810
generate all the files that you would

00:02:47,280 --> 00:02:51,180
normally ship to production but it will

00:02:48,810 --> 00:02:52,380
also generate source map files and what

00:02:51,180 --> 00:02:54,540
that will do is it'll and that allow us

00:02:52,380 --> 00:02:56,730
to look at the original code that you

00:02:54,540 --> 00:02:58,620
wrote and then map that into what

00:02:56,730 --> 00:03:00,000
actually shipped in the bundle using the

00:02:58,620 --> 00:03:01,680
same sort of technology that we use to

00:03:00,000 --> 00:03:03,810
throw really nice errors using source

00:03:01,680 --> 00:03:05,610
maps and then you just say source map

00:03:03,810 --> 00:03:07,940
Explorer and you point it at one of your

00:03:05,610 --> 00:03:10,440
bundles and so if you did this with a

00:03:07,940 --> 00:03:12,870
basic hello world application from the

00:03:10,440 --> 00:03:14,010
CLI this is what you're going to see so

00:03:12,870 --> 00:03:16,290
you're going to see things like core

00:03:14,010 --> 00:03:17,730
which is the core of angular the CLI

00:03:16,290 --> 00:03:19,560
projects the seed that it comes with

00:03:17,730 --> 00:03:22,620
scaffolds of forms for you to scaffold

00:03:19,560 --> 00:03:23,970
out common HTTP and by looking at these

00:03:22,620 --> 00:03:26,220
source Maps you're going to get a really

00:03:23,970 --> 00:03:28,380
good understanding of what is filling up

00:03:26,220 --> 00:03:30,600
the bundle and what is making it the

00:03:28,380 --> 00:03:31,920
size that it is and so understanding

00:03:30,600 --> 00:03:34,620
these things is really important because

00:03:31,920 --> 00:03:37,170
you can really easily make some mistakes

00:03:34,620 --> 00:03:38,610
here and so I this is a stock CLI

00:03:37,170 --> 00:03:41,700
project that I've added basically three

00:03:38,610 --> 00:03:43,290
lines to I did import rxjs I've added

00:03:41,700 --> 00:03:45,600
material module and I've added

00:03:43,290 --> 00:03:47,430
angularfire module and by adding those

00:03:45,600 --> 00:03:51,450
three things my bundle went from around

00:03:47,430 --> 00:03:53,880
300k to around 1.15 Meg that's too big

00:03:51,450 --> 00:03:56,610
right we don't want to be shipping 1.15

00:03:53,880 --> 00:03:58,860
Meg to the browser if we can help it and

00:03:56,610 --> 00:04:01,170
so understanding what you do and the

00:03:58,860 --> 00:04:04,650
impact that it has is what I'm going to

00:04:01,170 --> 00:04:06,090
help you walk through today so I showed

00:04:04,650 --> 00:04:07,170
in the first couple slides that there's

00:04:06,090 --> 00:04:09,420
actually a bunch of different bundles

00:04:07,170 --> 00:04:10,320
that are created so typically how it's

00:04:09,420 --> 00:04:11,670
going to work if any of your

00:04:10,320 --> 00:04:13,440
dependencies are going to end up in the

00:04:11,670 --> 00:04:15,060
vendor bundle any of the code that

00:04:13,440 --> 00:04:18,209
you're writing as part of your main

00:04:15,060 --> 00:04:20,669
wrote root or Rooter or whatever that

00:04:18,209 --> 00:04:21,960
solve is going to be in main and then if

00:04:20,669 --> 00:04:23,039
you're doing any sort of lazy loading

00:04:21,960 --> 00:04:24,300
which I'll talk about it in a little bit

00:04:23,039 --> 00:04:26,099
that's going to be putting it in one of

00:04:24,300 --> 00:04:28,990
these numbered

00:04:26,099 --> 00:04:31,720
so the second tip here is to use our

00:04:28,990 --> 00:04:33,370
head of time compiler so the CLI does

00:04:31,720 --> 00:04:35,560
this automatically for you by default if

00:04:33,370 --> 00:04:37,419
you're using - fraud but we still do see

00:04:35,560 --> 00:04:37,780
a small number of websites across the

00:04:37,419 --> 00:04:39,250
web

00:04:37,780 --> 00:04:41,410
there are shipping applications into

00:04:39,250 --> 00:04:43,539
production without doing ahead of time

00:04:41,410 --> 00:04:45,699
compilation and so here's an application

00:04:43,539 --> 00:04:48,789
that you might have built without a OT

00:04:45,699 --> 00:04:51,340
right so it's 664 KB and you'll see that

00:04:48,789 --> 00:04:54,250
the biggest piece there on the left side

00:04:51,340 --> 00:04:56,889
is actually the compiler so about half

00:04:54,250 --> 00:04:58,120
of that bundle is the compiler and so

00:04:56,889 --> 00:05:00,520
we're really trying to save you from

00:04:58,120 --> 00:05:02,770
shipping that compiler down because it's

00:05:00,520 --> 00:05:05,800
more than 2x the size of the rest of

00:05:02,770 --> 00:05:08,110
angular so what we really want to be

00:05:05,800 --> 00:05:09,430
seeing is you use äôt and what's going

00:05:08,110 --> 00:05:11,349
to be shipped to the browser instead of

00:05:09,430 --> 00:05:13,599
those that compiler bundle or that

00:05:11,349 --> 00:05:15,639
compiler piece you're going to see a lot

00:05:13,599 --> 00:05:17,530
of ng factory files so this is where

00:05:15,639 --> 00:05:19,150
we've taken all of the HTML templates

00:05:17,530 --> 00:05:21,220
all the styles that you've written we've

00:05:19,150 --> 00:05:22,360
converted them ahead of time into the

00:05:21,220 --> 00:05:24,490
JavaScript that's going to run very

00:05:22,360 --> 00:05:27,159
quickly in the browser and so anytime

00:05:24,490 --> 00:05:28,840
you see an NG factory file that's what

00:05:27,159 --> 00:05:30,190
that is it's we've taken your code your

00:05:28,840 --> 00:05:33,669
template and turned it into something

00:05:30,190 --> 00:05:35,979
that the browser can run very easily tip

00:05:33,669 --> 00:05:37,780
number three stay up to date so I think

00:05:35,979 --> 00:05:39,310
a lot of you have heard this message

00:05:37,780 --> 00:05:41,530
over and over and I want to talk about

00:05:39,310 --> 00:05:42,849
why this is important so when we release

00:05:41,530 --> 00:05:44,349
versions forward there was actually a

00:05:42,849 --> 00:05:45,669
smattering of tweets across the internet

00:05:44,349 --> 00:05:48,190
where people were like hey look at the

00:05:45,669 --> 00:05:50,500
size I got so these are a few of them

00:05:48,190 --> 00:05:52,300
just a small sample where basically they

00:05:50,500 --> 00:05:56,139
did an NPM install and their whole

00:05:52,300 --> 00:05:57,699
bundle got 25 49 % smaller and that's a

00:05:56,139 --> 00:05:59,110
really big deal and so we're going to

00:05:57,699 --> 00:06:01,180
keep pushing the boundaries in terms of

00:05:59,110 --> 00:06:02,380
what we do on angular and if you can

00:06:01,180 --> 00:06:04,030
just take advantage of that by staying

00:06:02,380 --> 00:06:06,340
up-to-date there's going to be other

00:06:04,030 --> 00:06:08,650
benefits for you and to give you another

00:06:06,340 --> 00:06:10,449
example about why you should stay up to

00:06:08,650 --> 00:06:11,940
date I'm going to tell you a short story

00:06:10,449 --> 00:06:14,500
about Igor Minar

00:06:11,940 --> 00:06:16,300
so Igor and I were sitting there talking

00:06:14,500 --> 00:06:18,190
about the current state of bundle size

00:06:16,300 --> 00:06:20,440
he was a little bit frustrated he was

00:06:18,190 --> 00:06:22,060
thinking hey how can we get creative and

00:06:20,440 --> 00:06:24,719
so when he goes thinking very creatively

00:06:22,060 --> 00:06:27,219
he can tend to get a little bit gangster

00:06:24,719 --> 00:06:29,139
but after he's gangster he gets very

00:06:27,219 --> 00:06:32,380
creative and so what he actually came up

00:06:29,139 --> 00:06:34,900
with was a way so he took a generated

00:06:32,380 --> 00:06:37,210
bundle from the CLI and went through it

00:06:34,900 --> 00:06:38,689
by hand and he wrote down all of the the

00:06:37,210 --> 00:06:39,889
things that he thought hey

00:06:38,689 --> 00:06:41,719
these are a little bit too big maybe we

00:06:39,889 --> 00:06:44,269
don't need all these pieces and you

00:06:41,719 --> 00:06:46,219
pulled them out and manually and then to

00:06:44,269 --> 00:06:47,989
use that list and he's starting to write

00:06:46,219 --> 00:06:49,939
a web pack loader they will

00:06:47,989 --> 00:06:51,799
automatically pull out all of those

00:06:49,939 --> 00:06:52,939
things from your bundle so this isn't

00:06:51,799 --> 00:06:54,379
available today but this is hopefully

00:06:52,939 --> 00:06:56,449
coming if you can stabilize it and

00:06:54,379 --> 00:06:59,029
actually make it work maybe pass some

00:06:56,449 --> 00:07:00,379
tests because we're Google then you will

00:06:59,029 --> 00:07:02,149
be able to take advantage of those sorts

00:07:00,379 --> 00:07:03,139
of kind of optimizations but you're only

00:07:02,149 --> 00:07:04,719
going to get those that you take

00:07:03,139 --> 00:07:07,869
advantage of it at the latest version

00:07:04,719 --> 00:07:14,599
there's a video here it's not playing

00:07:07,869 --> 00:07:17,029
all right we'll skip that no all right

00:07:14,599 --> 00:07:18,529
tip number four import carefully so you

00:07:17,029 --> 00:07:22,849
can ask me later for the funny videos of

00:07:18,529 --> 00:07:24,619
ego I've got like 50 import carefully so

00:07:22,849 --> 00:07:27,169
I should in the very beginning that if

00:07:24,619 --> 00:07:29,179
you import incorrectly or maybe not in

00:07:27,169 --> 00:07:30,619
the best or most optimal way it's very

00:07:29,179 --> 00:07:32,689
easy to take a bundle that was

00:07:30,619 --> 00:07:35,360
reasonable before and quickly make it

00:07:32,689 --> 00:07:36,919
unreasonable so a really great example

00:07:35,360 --> 00:07:39,529
of this and everyone in the community

00:07:36,919 --> 00:07:41,389
that works on rxjs and angular we know

00:07:39,529 --> 00:07:43,550
about this but if you import just rxjs

00:07:41,389 --> 00:07:45,949
bear you're going to get every single

00:07:43,550 --> 00:07:48,349
object in every single operator which

00:07:45,949 --> 00:07:49,879
adds about 190 KB to your application

00:07:48,349 --> 00:07:52,429
which is too big because you're probably

00:07:49,879 --> 00:07:54,769
not going to be using every single rxjs

00:07:52,429 --> 00:07:57,229
operator so what you should really do is

00:07:54,769 --> 00:07:59,539
if you see the top one import rxjs in

00:07:57,229 --> 00:08:01,339
your code get rid of it that should

00:07:59,539 --> 00:08:03,259
really just be hey I need observable

00:08:01,339 --> 00:08:05,629
maybe if I want the type of completion

00:08:03,259 --> 00:08:07,579
and all that understanding of what the

00:08:05,629 --> 00:08:09,349
types are of my observable objects and

00:08:07,579 --> 00:08:14,419
then I'm going to selectively add on

00:08:09,349 --> 00:08:16,489
operators to that the next tip here and

00:08:14,419 --> 00:08:18,769
where I'm going to actually see the same

00:08:16,489 --> 00:08:21,649
thing with angular material so we

00:08:18,769 --> 00:08:23,959
previously allowed you to import from

00:08:21,649 --> 00:08:25,300
material module and so what I would do

00:08:23,959 --> 00:08:27,800
is that would bring in the entire

00:08:25,300 --> 00:08:29,329
component library of material and embed

00:08:27,800 --> 00:08:31,429
it in your application in a way that's

00:08:29,329 --> 00:08:33,439
very hard for us to tree shape so it's

00:08:31,429 --> 00:08:35,029
much better and then this echo is a lot

00:08:33,439 --> 00:08:37,579
of what Jason said and is how to build

00:08:35,029 --> 00:08:39,889
angular libraries talk where if you just

00:08:37,579 --> 00:08:42,019
pull each component as you need it then

00:08:39,889 --> 00:08:43,219
we don't have to rely on free shaking to

00:08:42,019 --> 00:08:46,610
pull those things out so if you look at

00:08:43,219 --> 00:08:48,290
material that's about 331 KB and while

00:08:46,610 --> 00:08:49,850
each of these things individually is

00:08:48,290 --> 00:08:52,250
extremely valuable and probably worth

00:08:49,850 --> 00:08:54,380
the bundle size unless you're using the

00:08:52,250 --> 00:08:55,580
our suite of components it might not be

00:08:54,380 --> 00:09:00,560
desirable for you to have all those

00:08:55,580 --> 00:09:02,270
things so you might be using specular

00:09:00,560 --> 00:09:04,010
rxjs you might be using material design

00:09:02,270 --> 00:09:06,470
but you should also look at any of the

00:09:04,010 --> 00:09:08,210
other libraries and say hey using the

00:09:06,470 --> 00:09:10,070
source map Explorer can I see how big

00:09:08,210 --> 00:09:12,710
their how much code are they adding to

00:09:10,070 --> 00:09:14,150
my production minified bundle that I'm

00:09:12,710 --> 00:09:15,950
shipping down to the browser and say hey

00:09:14,150 --> 00:09:17,420
is there a better way that I can import

00:09:15,950 --> 00:09:19,040
this or maybe if they don't offer one

00:09:17,420 --> 00:09:21,230
ask for one say hey I only need this

00:09:19,040 --> 00:09:22,940
tiny little feature can you give me an

00:09:21,230 --> 00:09:25,880
import that I can do from that little

00:09:22,940 --> 00:09:27,770
peak feature a lot of people think that

00:09:25,880 --> 00:09:28,940
tree shaking will take care of this and

00:09:27,770 --> 00:09:31,220
if you're using something really

00:09:28,940 --> 00:09:33,290
advanced and a little bit complicated to

00:09:31,220 --> 00:09:35,390
use like closure compiler with advanced

00:09:33,290 --> 00:09:36,740
optimizations it can do that but in

00:09:35,390 --> 00:09:39,260
general the tools that we use everyday

00:09:36,740 --> 00:09:40,280
aren't capable of doing this but this is

00:09:39,260 --> 00:09:42,200
something that's going to continue to

00:09:40,280 --> 00:09:43,910
get better because the tools that we're

00:09:42,200 --> 00:09:45,890
using the web packets that are they're

00:09:43,910 --> 00:09:47,060
continuing to evolve and continue to

00:09:45,890 --> 00:09:49,430
understand what's happening in the real

00:09:47,060 --> 00:09:51,890
world so we do expect this to change and

00:09:49,430 --> 00:09:53,450
evolve and get better with time and this

00:09:51,890 --> 00:09:56,150
goes back to that egor project that I

00:09:53,450 --> 00:09:57,800
mentioned where if we can manually

00:09:56,150 --> 00:10:00,830
adjust kind of on the Flies we're

00:09:57,800 --> 00:10:03,280
loading things in how we used unused

00:10:00,830 --> 00:10:05,690
pure annotations are set on your

00:10:03,280 --> 00:10:07,490
application code we can actually pull

00:10:05,690 --> 00:10:08,930
some of those things out as well so the

00:10:07,490 --> 00:10:10,820
ideal world would be where you have

00:10:08,930 --> 00:10:12,500
great user experience because your

00:10:10,820 --> 00:10:14,089
bundles are small and fast and you have

00:10:12,500 --> 00:10:16,040
great developer experience because you

00:10:14,089 --> 00:10:18,260
can't make these kind of small mistakes

00:10:16,040 --> 00:10:19,190
that end up negatively affecting you so

00:10:18,260 --> 00:10:20,900
that's the world that we're trying to

00:10:19,190 --> 00:10:22,670
get into but I'm telling you how do you

00:10:20,900 --> 00:10:27,620
performance optimize an application kind

00:10:22,670 --> 00:10:29,240
of today all right tip number five lazy

00:10:27,620 --> 00:10:31,700
loading and so this is actually an

00:10:29,240 --> 00:10:33,620
interesting one because a lot of people

00:10:31,700 --> 00:10:35,150
don't know how easy it is to do lazy

00:10:33,620 --> 00:10:37,670
loading until you see it for the first

00:10:35,150 --> 00:10:38,780
time and so something that Rob and I

00:10:37,670 --> 00:10:40,780
have been considering and kind of

00:10:38,780 --> 00:10:43,640
hunting back and forth is should we take

00:10:40,780 --> 00:10:45,560
the sample code that or the generated

00:10:43,640 --> 00:10:46,910
code from the CLI and actually switch it

00:10:45,560 --> 00:10:48,380
over to lazy loading so that everyone is

00:10:46,910 --> 00:10:50,240
lazy loading out-of-the-box which I

00:10:48,380 --> 00:10:51,950
think would be kind of a cool idea but

00:10:50,240 --> 00:10:54,230
then it makes it forces this pattern on

00:10:51,950 --> 00:10:55,580
everybody but it is recommended for

00:10:54,230 --> 00:10:57,920
those of you that don't know lazy

00:10:55,580 --> 00:10:59,900
loading is really easy you take a module

00:10:57,920 --> 00:11:01,459
of your application and all of its

00:10:59,900 --> 00:11:03,230
dependencies and then instead of loading

00:11:01,459 --> 00:11:03,900
it synchronously by referring to it in

00:11:03,230 --> 00:11:05,460
your route

00:11:03,900 --> 00:11:07,170
you're going to refer to it by this

00:11:05,460 --> 00:11:09,720
string so you're going to say load

00:11:07,170 --> 00:11:11,700
children and then the path to the module

00:11:09,720 --> 00:11:14,850
that you want to lazy load and then the

00:11:11,700 --> 00:11:16,620
name of the module after a pound sign so

00:11:14,850 --> 00:11:18,000
it's really simple I've done demos of

00:11:16,620 --> 00:11:21,839
this all the time people are like oh wow

00:11:18,000 --> 00:11:23,040
I can do that in five minutes so when

00:11:21,839 --> 00:11:24,839
you're thinking about what you want to

00:11:23,040 --> 00:11:26,790
lazy load I always start with this kind

00:11:24,839 --> 00:11:28,650
of set of recommendation so one of the

00:11:26,790 --> 00:11:29,760
smallest and most important screens of

00:11:28,650 --> 00:11:31,350
your application is actually your home

00:11:29,760 --> 00:11:33,450
screen right this is that first user

00:11:31,350 --> 00:11:35,970
experience so most of the people that

00:11:33,450 --> 00:11:37,860
come to any sort of website more so than

00:11:35,970 --> 00:11:39,720
an application but website are going to

00:11:37,860 --> 00:11:41,250
hit the home screen and so can you lazy

00:11:39,720 --> 00:11:42,770
load just that home screen which maybe

00:11:41,250 --> 00:11:45,750
doesn't need a ton of functionality

00:11:42,770 --> 00:11:47,520
another great candidate for lazy loading

00:11:45,750 --> 00:11:49,290
is your admin section because often we

00:11:47,520 --> 00:11:51,210
add things like material design

00:11:49,290 --> 00:11:53,460
libraries forms because we want to do a

00:11:51,210 --> 00:11:54,570
much deeper interaction another example

00:11:53,460 --> 00:11:56,790
that I often add to my projects is

00:11:54,570 --> 00:11:57,720
firebase where I want for any someone

00:11:56,790 --> 00:11:59,370
that's going to be editing or

00:11:57,720 --> 00:12:01,230
interacting with the data of my

00:11:59,370 --> 00:12:02,820
application I want all that data to be

00:12:01,230 --> 00:12:04,830
coming in real time and propagated back

00:12:02,820 --> 00:12:07,140
to the server but maybe I don't need

00:12:04,830 --> 00:12:08,880
that in my root module I don't need that

00:12:07,140 --> 00:12:10,950
to load my homepage of my web

00:12:08,880 --> 00:12:12,660
application you can also load all of

00:12:10,950 --> 00:12:14,100
your content views right so if a user is

00:12:12,660 --> 00:12:15,870
pulling up a specific piece of content

00:12:14,100 --> 00:12:17,400
then they don't need all of the other

00:12:15,870 --> 00:12:18,540
pieces of your application they don't

00:12:17,400 --> 00:12:20,160
need all those dependencies and they

00:12:18,540 --> 00:12:22,290
don't want to pay that performance cost

00:12:20,160 --> 00:12:24,990
upfront so the net summer there is

00:12:22,290 --> 00:12:26,700
basically lazy load everything I've seen

00:12:24,990 --> 00:12:28,140
in many of the angular applications that

00:12:26,700 --> 00:12:30,959
are being built by the team internally

00:12:28,140 --> 00:12:32,880
they're actually lazy load every single

00:12:30,959 --> 00:12:35,630
route and so what this does is if you

00:12:32,880 --> 00:12:37,620
lazy load every route in your app module

00:12:35,630 --> 00:12:39,630
everything is taken out of the critical

00:12:37,620 --> 00:12:41,520
path and we can bootstrap angular very

00:12:39,630 --> 00:12:44,370
quickly we can start showing the app

00:12:41,520 --> 00:12:46,080
show we can defer all of that extra

00:12:44,370 --> 00:12:47,610
processing that has to happen to pull

00:12:46,080 --> 00:12:50,970
win those coat that the rest of that

00:12:47,610 --> 00:12:52,380
code in those dependencies so what you

00:12:50,970 --> 00:12:54,930
can do at the end of the day is if you

00:12:52,380 --> 00:12:56,940
have a really long list of routes where

00:12:54,930 --> 00:12:58,130
you've got so this is a conference

00:12:56,940 --> 00:13:00,240
website there so there were tickets

00:12:58,130 --> 00:13:02,640
sponsors all these kind of various

00:13:00,240 --> 00:13:05,459
concepts and we split it into a very

00:13:02,640 --> 00:13:08,130
simple thing right we have a path that

00:13:05,459 --> 00:13:09,660
is paths match fold so any just the

00:13:08,130 --> 00:13:10,890
empty string is going to match and I'm

00:13:09,660 --> 00:13:12,660
going to throw that off to my main

00:13:10,890 --> 00:13:14,280
module or my home module and then I'm

00:13:12,660 --> 00:13:16,260
going to match any string and that's

00:13:14,280 --> 00:13:17,379
going to go up to my main module and

00:13:16,260 --> 00:13:19,209
then I have the admin string and

00:13:17,379 --> 00:13:20,410
going to go off to my admin module so

00:13:19,209 --> 00:13:21,939
this is a very kind of nice way of

00:13:20,410 --> 00:13:24,160
splitting up my application that makes

00:13:21,939 --> 00:13:26,470
it faster for users to only pay for the

00:13:24,160 --> 00:13:28,869
pieces of my app that they need all

00:13:26,470 --> 00:13:31,029
right the last tip here is to polyfill

00:13:28,869 --> 00:13:32,470
responsibly and so this used to be

00:13:31,029 --> 00:13:34,809
really hard because we would look at the

00:13:32,470 --> 00:13:37,389
list of polyfills generated by the CLI

00:13:34,809 --> 00:13:38,529
and it would be really confusing right

00:13:37,389 --> 00:13:40,539
like well I don't know which of these

00:13:38,529 --> 00:13:43,239
polyfills I actually need for my users

00:13:40,539 --> 00:13:44,979
and so our recommendation is take a look

00:13:43,239 --> 00:13:46,720
at your user base take a look at their

00:13:44,979 --> 00:13:48,459
demographics their browsers make

00:13:46,720 --> 00:13:51,249
decisions about what browsers you need

00:13:48,459 --> 00:13:54,039
to support as a web developer and then

00:13:51,249 --> 00:13:56,229
go through our angular CLI generated

00:13:54,039 --> 00:13:57,939
polyfill file because we've done a lot

00:13:56,229 --> 00:14:00,489
of work to make this really configurable

00:13:57,939 --> 00:14:02,470
and so 90% of this file at this point is

00:14:00,489 --> 00:14:04,149
comments and so we've kind of built an

00:14:02,470 --> 00:14:06,970
integrated guide into the polyfill that

00:14:04,149 --> 00:14:09,039
TS file that says hey here's what we

00:14:06,970 --> 00:14:11,079
recommend by default and then depending

00:14:09,039 --> 00:14:13,479
on the browsers that you want to support

00:14:11,079 --> 00:14:14,949
you can add back in other polyfills to

00:14:13,479 --> 00:14:17,589
make it work on older versions of

00:14:14,949 --> 00:14:20,079
browsers and so this is a really nice

00:14:17,589 --> 00:14:21,519
guide that I hope we keep improving but

00:14:20,079 --> 00:14:23,169
one thing you can do that it's not in

00:14:21,519 --> 00:14:25,299
the guide yet and we'll probably get it

00:14:23,169 --> 00:14:27,429
in there after this talk is actually at

00:14:25,299 --> 00:14:29,619
the bottom so we have three polyfills in

00:14:27,429 --> 00:14:31,779
a default CLI generated project we have

00:14:29,619 --> 00:14:34,149
es6 reflect yes seven reflect and we

00:14:31,779 --> 00:14:36,579
have zones and so zones have not yet

00:14:34,149 --> 00:14:38,049
been standardized by the the tc39 body

00:14:36,579 --> 00:14:40,949
so we're still going to need to polyfill

00:14:38,049 --> 00:14:43,959
that but actually es6 and ef7 reflexed

00:14:40,949 --> 00:14:45,639
don't aren't needed in a OT mode and so

00:14:43,959 --> 00:14:48,009
if you're doing a production build you

00:14:45,639 --> 00:14:49,779
only need exactly one polyfill you can

00:14:48,009 --> 00:14:53,639
comment these out for your äôt builds

00:14:49,779 --> 00:14:55,569
they weren't won't work with any JIT

00:14:53,639 --> 00:14:56,949
applications and they won't work with

00:14:55,569 --> 00:14:59,199
any components that aren't following

00:14:56,949 --> 00:15:01,449
following the guides that we gave you

00:14:59,199 --> 00:15:02,949
guys a little bit earlier but this is

00:15:01,449 --> 00:15:04,600
just another polyfill that you can cut

00:15:02,949 --> 00:15:06,279
out to make your application just a

00:15:04,600 --> 00:15:07,899
little bit smaller and at this point

00:15:06,279 --> 00:15:10,419
we're really trying to find any sort of

00:15:07,899 --> 00:15:11,859
size that we can cut out because that at

00:15:10,419 --> 00:15:14,289
the end of the day makes users happier

00:15:11,859 --> 00:15:16,419
saves time saves money and makes life

00:15:14,289 --> 00:15:18,729
better for everyone so I'll just end

00:15:16,419 --> 00:15:21,279
here by saying first measure all of your

00:15:18,729 --> 00:15:22,599
applications understand the way that you

00:15:21,279 --> 00:15:23,889
write your code and the impact that it's

00:15:22,599 --> 00:15:25,629
having on all of your bundles and all of

00:15:23,889 --> 00:15:27,999
the code that your users have to consume

00:15:25,629 --> 00:15:30,220
and run make sure you're running your

00:15:27,999 --> 00:15:31,690
production application in a ot mode

00:15:30,220 --> 00:15:33,510
because ahead of time compilation it's

00:15:31,690 --> 00:15:35,230
going to be a net benefit to your user

00:15:33,510 --> 00:15:37,420
every time

00:15:35,230 --> 00:15:38,470
stay up to date so the latest version of

00:15:37,420 --> 00:15:39,940
angular we're always trying to push the

00:15:38,470 --> 00:15:41,650
boundary in terms of the size that we

00:15:39,940 --> 00:15:43,510
ship as well as the quality and the

00:15:41,650 --> 00:15:44,620
features make sure you're importing

00:15:43,510 --> 00:15:48,190
carefully especially if you're using

00:15:44,620 --> 00:15:50,620
things like rxjs or material lazy load

00:15:48,190 --> 00:15:52,060
not just your home run out not just your

00:15:50,620 --> 00:15:53,800
admin Rob but maybe all of your routes

00:15:52,060 --> 00:15:55,810
because it is going to be much better

00:15:53,800 --> 00:15:58,390
from a performance standpoint and lastly

00:15:55,810 --> 00:16:00,070
polyfill responsibly right understand

00:15:58,390 --> 00:16:01,600
your users and understand the impact

00:16:00,070 --> 00:16:03,180
that your polyfills are going to have on

00:16:01,600 --> 00:16:05,450
them from a bundle size perspective

00:16:03,180 --> 00:16:10,059
thank you guys so much

00:16:05,450 --> 00:16:10,059

YouTube URL: https://www.youtube.com/watch?v=hHNUohOPCCo


