Title: Kick Your Components up a Notch with Directives BAM!   Mike Brocchi
Publication date: 2017-04-30
Playlist: ng-conf 2017 Advanced Talks
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,000 --> 00:00:04,589
my name is Mike Brockie and I am here to

00:00:02,010 --> 00:00:08,340
tell you how to kick your components up

00:00:04,589 --> 00:00:09,719
a notch with directives BAM that's a

00:00:08,340 --> 00:00:11,190
plate too old-school

00:00:09,719 --> 00:00:13,650
I'm not in old school but I'm a little

00:00:11,190 --> 00:00:15,120
bit older too Food Network - Emeril

00:00:13,650 --> 00:00:18,090
Lagasse so that'll play it'll look to

00:00:15,120 --> 00:00:19,560
the talked a little bit so surprisingly

00:00:18,090 --> 00:00:22,769
I'm not here to talk about the CLI I'm

00:00:19,560 --> 00:00:24,570
here to talk about directives so as you

00:00:22,769 --> 00:00:27,480
start with your angular development

00:00:24,570 --> 00:00:29,369
career you jump right in and you first

00:00:27,480 --> 00:00:32,189
create your component and great and you

00:00:29,369 --> 00:00:34,140
get rolling and you want to build out

00:00:32,189 --> 00:00:36,870
your application so you keep on adding

00:00:34,140 --> 00:00:38,550
more components and you say alright wait

00:00:36,870 --> 00:00:40,070
this is great I don't know my component

00:00:38,550 --> 00:00:43,649
tray and then you add more components

00:00:40,070 --> 00:00:44,940
but where do you go from there so you

00:00:43,649 --> 00:00:47,460
have your component and you have some

00:00:44,940 --> 00:00:48,960
logic built within your component but

00:00:47,460 --> 00:00:51,149
you don't really you want to be able to

00:00:48,960 --> 00:00:53,579
reuse that logic so we all learned from

00:00:51,149 --> 00:00:56,129
with either an angularjs or once we got

00:00:53,579 --> 00:00:58,590
to angular to refactor that logic out

00:00:56,129 --> 00:01:01,620
into a service which is great cuz that

00:00:58,590 --> 00:01:04,430
we have reusable logic elsewhere not

00:01:01,620 --> 00:01:07,260
necessarily stored within your component

00:01:04,430 --> 00:01:09,210
but what happens in your component if

00:01:07,260 --> 00:01:11,549
you have some behaviors that you would

00:01:09,210 --> 00:01:13,500
like to be able to replicate and use

00:01:11,549 --> 00:01:15,360
things elsewhere you want to be able to

00:01:13,500 --> 00:01:17,369
refactor those things out but where do

00:01:15,360 --> 00:01:19,920
they go what do you do with them well

00:01:17,369 --> 00:01:21,659
the answer is directives I think

00:01:19,920 --> 00:01:24,600
directives aren't actually underused in

00:01:21,659 --> 00:01:26,250
angular with the current versions

00:01:24,600 --> 00:01:28,560
angularjs that were used quite heavily

00:01:26,250 --> 00:01:30,960
how you manipulated the Dom similar

00:01:28,560 --> 00:01:37,829
practice here but here we're going to

00:01:30,960 --> 00:01:39,990
focus on the angular versions so there's

00:01:37,829 --> 00:01:41,340
three different types of directives the

00:01:39,990 --> 00:01:43,680
first of which are attribute based

00:01:41,340 --> 00:01:45,710
directives for example ng class as an

00:01:43,680 --> 00:01:48,509
example you add an attribute to a

00:01:45,710 --> 00:01:50,759
element and you get additional behaviors

00:01:48,509 --> 00:01:53,939
to that element another one is

00:01:50,759 --> 00:01:56,579
structural so ng four and ng-if are good

00:01:53,939 --> 00:01:59,100
example examples of those and the last

00:01:56,579 --> 00:02:01,229
one is components components yes are

00:01:59,100 --> 00:02:03,990
actually built upon directives so

00:02:01,229 --> 00:02:06,000
everything that a director can do or a

00:02:03,990 --> 00:02:08,369
component can do a director can do sans

00:02:06,000 --> 00:02:09,929
the template but today we're just going

00:02:08,369 --> 00:02:11,400
to focus on the attribute based ones

00:02:09,929 --> 00:02:13,800
you'll see examples online if you want

00:02:11,400 --> 00:02:16,200
to see recreations of how do you really

00:02:13,800 --> 00:02:17,640
for how do you reimplementation which

00:02:16,200 --> 00:02:19,380
are great you can take a look at those

00:02:17,640 --> 00:02:21,240
and understand a little bit more of the

00:02:19,380 --> 00:02:23,310
under-the-hood scene of what's going on

00:02:21,240 --> 00:02:25,650
there but there's really no practical

00:02:23,310 --> 00:02:27,720
usage for that so we're going to focus

00:02:25,650 --> 00:02:29,700
on the attribute based ones that you can

00:02:27,720 --> 00:02:31,470
use and create within your applications

00:02:29,700 --> 00:02:34,830
and possibly share within your

00:02:31,470 --> 00:02:36,810
applications as well so we're just

00:02:34,830 --> 00:02:38,490
getting started with directives how do

00:02:36,810 --> 00:02:41,880
you actually declare them and how do you

00:02:38,490 --> 00:02:44,880
use them so I have some very very very

00:02:41,880 --> 00:02:48,300
very very basic examples of usage with

00:02:44,880 --> 00:02:51,300
directives so here I've created a blank

00:02:48,300 --> 00:02:53,490
directive oh yes we're bringing the

00:02:51,300 --> 00:02:55,140
blinked but not the blink tag a blank

00:02:53,490 --> 00:02:57,600
attribute back so you notice here with

00:02:55,140 --> 00:03:01,020
the selector it's based off of having an

00:02:57,600 --> 00:03:02,190
attribute of blink on an element and in

00:03:01,020 --> 00:03:04,260
here we use in something called host

00:03:02,190 --> 00:03:05,760
binding and what host funding does it

00:03:04,260 --> 00:03:08,400
gives you the ability to modify

00:03:05,760 --> 00:03:10,290
different properties on an element of

00:03:08,400 --> 00:03:14,160
the host element that you if I have

00:03:10,290 --> 00:03:15,630
applied your directive on to in this

00:03:14,160 --> 00:03:18,120
case here I'm looking at the hidden

00:03:15,630 --> 00:03:20,400
directive so I have this element here

00:03:18,120 --> 00:03:23,130
and I would like to blink because I want

00:03:20,400 --> 00:03:24,209
my application to be fancy so I just

00:03:23,130 --> 00:03:27,030
sprinkle that on there

00:03:24,209 --> 00:03:29,430
BAM and I got my blink tag or a blink

00:03:27,030 --> 00:03:31,080
attribute added to that tag and we just

00:03:29,430 --> 00:03:33,540
apply it by adding it onto the Dom

00:03:31,080 --> 00:03:36,090
element and there we see the happy

00:03:33,540 --> 00:03:38,400
little blinking text within our

00:03:36,090 --> 00:03:40,140
application so we've done nothing to the

00:03:38,400 --> 00:03:42,030
component itself in fact it wasn't even

00:03:40,140 --> 00:03:44,880
a component just a div tag and we've

00:03:42,030 --> 00:03:48,780
added behaviors on to that just by

00:03:44,880 --> 00:03:50,940
adding an attribute but that's great and

00:03:48,780 --> 00:03:52,260
we can use that but it doesn't really

00:03:50,940 --> 00:03:53,820
have a whole lot of practical usage

00:03:52,260 --> 00:03:55,800
unless of course you want blinky text on

00:03:53,820 --> 00:03:57,840
your screen you want to be able to pass

00:03:55,800 --> 00:04:00,959
values into that so how do we go about

00:03:57,840 --> 00:04:02,580
doing that with a directive so I've

00:04:00,959 --> 00:04:04,530
created another one called bling which

00:04:02,580 --> 00:04:07,709
will just be Eric

00:04:04,530 --> 00:04:10,620
yeah it's called bedazzle and it's

00:04:07,709 --> 00:04:12,300
activated by a bling attribute and it

00:04:10,620 --> 00:04:13,830
takes an input just like you would with

00:04:12,300 --> 00:04:16,019
the component again components are built

00:04:13,830 --> 00:04:18,140
on directives so we can specify an input

00:04:16,019 --> 00:04:20,370
in which case we're taking in color here

00:04:18,140 --> 00:04:23,280
and we're using the host binding except

00:04:20,370 --> 00:04:26,310
instead of binding to a a native element

00:04:23,280 --> 00:04:27,780
or native property it's a child element

00:04:26,310 --> 00:04:29,700
so on the style property

00:04:27,780 --> 00:04:32,370
we're accessing the color attribute

00:04:29,700 --> 00:04:34,260
there or property and anytime we return

00:04:32,370 --> 00:04:37,530
a value from this function it will

00:04:34,260 --> 00:04:40,710
overwrite the style color of the Dom

00:04:37,530 --> 00:04:42,419
element that it's applied to again it's

00:04:40,710 --> 00:04:46,230
returning the input that we're taking

00:04:42,419 --> 00:04:48,660
above to be able to set that value again

00:04:46,230 --> 00:04:50,970
we have just a few different Dom

00:04:48,660 --> 00:04:52,470
elements we sprinkle on our directive

00:04:50,970 --> 00:04:54,480
BAM

00:04:52,470 --> 00:04:57,660
and also the input values to be able to

00:04:54,480 --> 00:05:00,000
pull that in to set the values so we

00:04:57,660 --> 00:05:02,220
apply the attribute supply the values

00:05:00,000 --> 00:05:03,750
that we want to see within there and we

00:05:02,220 --> 00:05:10,260
see that those render the different

00:05:03,750 --> 00:05:11,550
colors into the UI and the browser so

00:05:10,260 --> 00:05:13,290
now we've looked at how do you activate

00:05:11,550 --> 00:05:16,650
them and also how do you get values in

00:05:13,290 --> 00:05:19,050
which is great except we wouldn't want

00:05:16,650 --> 00:05:20,520
some additional behaviors right so you

00:05:19,050 --> 00:05:23,850
want to be able to handle different

00:05:20,520 --> 00:05:27,090
events within your directives so I

00:05:23,850 --> 00:05:29,100
created another again a raw example

00:05:27,090 --> 00:05:30,600
called color cycle and what it's going

00:05:29,100 --> 00:05:33,630
to do is it's going to iterate different

00:05:30,600 --> 00:05:35,310
colors as you click on the elements so

00:05:33,630 --> 00:05:37,950
again we're using host binding to based

00:05:35,310 --> 00:05:40,290
off of style dot color and here it's

00:05:37,950 --> 00:05:41,970
using a method called set into text

00:05:40,290 --> 00:05:44,070
color but we're also have something

00:05:41,970 --> 00:05:46,500
called host listener so host binding

00:05:44,070 --> 00:05:48,600
allows you to get values out of

00:05:46,500 --> 00:05:49,860
different properties and host listener

00:05:48,600 --> 00:05:54,090
allows you to listen to different events

00:05:49,860 --> 00:05:57,630
on the element that you're binding to or

00:05:54,090 --> 00:05:59,340
your directive is applied to here we're

00:05:57,630 --> 00:06:01,380
listening to the click event with a

00:05:59,340 --> 00:06:04,020
function call on click and there's

00:06:01,380 --> 00:06:05,430
another I'll just shown here function in

00:06:04,020 --> 00:06:06,810
here called get next color which is just

00:06:05,430 --> 00:06:08,640
an implementation which will cycle

00:06:06,810 --> 00:06:11,460
through an array of colors defined

00:06:08,640 --> 00:06:12,720
somewhere else in the directive which is

00:06:11,460 --> 00:06:16,380
just going to set the text color and

00:06:12,720 --> 00:06:18,450
then that appears so we have that in

00:06:16,380 --> 00:06:20,220
here we want to cycle the colors on this

00:06:18,450 --> 00:06:22,620
element here sprinkle tired a little

00:06:20,220 --> 00:06:25,470
directive on here and bam

00:06:22,620 --> 00:06:27,990
that appears and we get to see as you

00:06:25,470 --> 00:06:31,860
click on an element it will just cycle

00:06:27,990 --> 00:06:34,650
through those colors so we've now

00:06:31,860 --> 00:06:36,360
applied different behaviors listen to

00:06:34,650 --> 00:06:38,490
events and being able to pass values in

00:06:36,360 --> 00:06:40,289
that just gives us just about everything

00:06:38,490 --> 00:06:41,370
we need to implement multiple different

00:06:40,289 --> 00:06:45,210
things

00:06:41,370 --> 00:06:47,610
externally two components the last piece

00:06:45,210 --> 00:06:50,040
is exposing events you want when things

00:06:47,610 --> 00:06:51,990
happen when you've applied a directive

00:06:50,040 --> 00:06:53,910
you'd like to maybe let the component or

00:06:51,990 --> 00:06:55,410
any other elements know that something

00:06:53,910 --> 00:06:58,500
has happened so we're going to take that

00:06:55,410 --> 00:07:00,270
color cycle directive that was on the

00:06:58,500 --> 00:07:02,580
previous slides and we're just going to

00:07:00,270 --> 00:07:04,830
extend that a little bit so in here I've

00:07:02,580 --> 00:07:06,240
added an event emitter which is based

00:07:04,830 --> 00:07:08,340
off of an output just as you would on a

00:07:06,240 --> 00:07:11,400
component again components are built on

00:07:08,340 --> 00:07:13,590
directives so the same principles apply

00:07:11,400 --> 00:07:14,990
so we're going to emit an event anytime

00:07:13,590 --> 00:07:18,270
that the color has changed so maybe

00:07:14,990 --> 00:07:20,580
whatever usage you have we're just

00:07:18,270 --> 00:07:24,240
letting the parent component know that

00:07:20,580 --> 00:07:27,000
something has happened so on in it again

00:07:24,240 --> 00:07:29,370
lifecycle events that we want to set

00:07:27,000 --> 00:07:30,630
this up on it initialization that we're

00:07:29,370 --> 00:07:32,729
just going to emit out the initial value

00:07:30,630 --> 00:07:37,190
so just spitting out the initial text

00:07:32,729 --> 00:07:37,190
color of the property of the directive

00:07:39,080 --> 00:07:44,100
we have a host listener we're going to

00:07:41,250 --> 00:07:46,530
handle whenever you click on the Dom

00:07:44,100 --> 00:07:47,970
element and here we're just also the

00:07:46,530 --> 00:07:49,770
only additional change within here is

00:07:47,970 --> 00:07:52,410
we're also going to remit that value out

00:07:49,770 --> 00:07:55,500
so the consumers of this directive can

00:07:52,410 --> 00:07:57,630
take advantage of that event so in here

00:07:55,500 --> 00:07:59,160
we have the HTML that is consuming it as

00:07:57,630 --> 00:08:02,039
well as a little bit of component code

00:07:59,160 --> 00:08:03,300
down below so we renamed the it's a kind

00:08:02,039 --> 00:08:04,560
of a copy because I'll just push up the

00:08:03,300 --> 00:08:07,080
repo for you guys to take a look at

00:08:04,560 --> 00:08:08,849
later on but the color cycle event is

00:08:07,080 --> 00:08:11,490
the attribute that it's based off of

00:08:08,849 --> 00:08:14,699
we've added an ax listener here to the

00:08:11,490 --> 00:08:16,919
color changed event and we are handling

00:08:14,699 --> 00:08:18,599
that event and just for simplicity

00:08:16,919 --> 00:08:20,190
rather than throwing it to a log where

00:08:18,599 --> 00:08:22,110
we can't too easily just binding and

00:08:20,190 --> 00:08:23,880
showing the color down below of what was

00:08:22,110 --> 00:08:25,680
emitted out and that's just handled in

00:08:23,880 --> 00:08:28,289
the component on the color changed event

00:08:25,680 --> 00:08:30,360
to set the color so as you can see in

00:08:28,289 --> 00:08:32,550
here you could click on the thumb

00:08:30,360 --> 00:08:34,110
element and as you click on it the

00:08:32,550 --> 00:08:36,990
colors change and you're getting the

00:08:34,110 --> 00:08:37,880
event passed out with the colors on

00:08:36,990 --> 00:08:39,990
there

00:08:37,880 --> 00:08:42,270
so now I think we've covered everything

00:08:39,990 --> 00:08:45,600
that we need we can add new behaviors

00:08:42,270 --> 00:08:50,190
take values in handle events internally

00:08:45,600 --> 00:08:52,260
and expose different events out which

00:08:50,190 --> 00:08:54,320
gives us a pretty powerful platform to

00:08:52,260 --> 00:08:57,860
do a lot of different things with with

00:08:54,320 --> 00:08:59,720
your application so these are all great

00:08:57,860 --> 00:09:02,270
little examples we've changed colors and

00:08:59,720 --> 00:09:04,340
we've made things blink but that's not

00:09:02,270 --> 00:09:06,350
really practical within our application

00:09:04,340 --> 00:09:07,790
we want to be able to do more so what's

00:09:06,350 --> 00:09:10,340
I've create an example and we'll walk

00:09:07,790 --> 00:09:12,440
through that but the example is I have a

00:09:10,340 --> 00:09:14,300
security service your authorization your

00:09:12,440 --> 00:09:16,400
authentication of what different roles a

00:09:14,300 --> 00:09:17,630
user would have and this is common in

00:09:16,400 --> 00:09:18,710
many different applications because

00:09:17,630 --> 00:09:21,200
people can do different things within

00:09:18,710 --> 00:09:22,280
your applications so typically what

00:09:21,200 --> 00:09:24,230
we'll do is it will take that security

00:09:22,280 --> 00:09:25,940
service and we need to use it within a

00:09:24,230 --> 00:09:28,370
component so we will use dependency

00:09:25,940 --> 00:09:30,530
injection to get that in there very

00:09:28,370 --> 00:09:34,730
common because we've refactored

00:09:30,530 --> 00:09:36,110
out our logic into a service but now in

00:09:34,730 --> 00:09:39,020
order to use that we need to have

00:09:36,110 --> 00:09:40,640
security and logic or security and logic

00:09:39,020 --> 00:09:43,910
so we need to know what permissions you

00:09:40,640 --> 00:09:49,160
need to use a bit a particular element

00:09:43,910 --> 00:09:51,200
and logic to how to I apply that the

00:09:49,160 --> 00:09:53,030
information from my security service to

00:09:51,200 --> 00:09:56,210
the Dom elements with inside that

00:09:53,030 --> 00:09:58,490
component but not only that we need to

00:09:56,210 --> 00:10:00,410
then replicate that same logic in all of

00:09:58,490 --> 00:10:02,930
our other components that have different

00:10:00,410 --> 00:10:06,230
behaviors to be able to turn different

00:10:02,930 --> 00:10:07,760
elements on and off so the better

00:10:06,230 --> 00:10:09,470
solution is instead of having the logic

00:10:07,760 --> 00:10:16,180
duplicated everywhere else let's use

00:10:09,470 --> 00:10:18,140
directives and let's quote for me so

00:10:16,180 --> 00:10:20,150
again we're going to take our security

00:10:18,140 --> 00:10:21,410
service as we've already created there

00:10:20,150 --> 00:10:22,940
really needs to be no different changes

00:10:21,410 --> 00:10:25,070
there because we've refactored out that

00:10:22,940 --> 00:10:27,620
logic so we have logic refactored out

00:10:25,070 --> 00:10:30,020
and we're going to inject that into a

00:10:27,620 --> 00:10:32,000
directive instead and then we can take

00:10:30,020 --> 00:10:33,950
that directive and apply it to your

00:10:32,000 --> 00:10:35,720
component without having that additional

00:10:33,950 --> 00:10:37,640
logic without having to worry about any

00:10:35,720 --> 00:10:40,300
of the other implementation details just

00:10:37,640 --> 00:10:42,560
drop it directive onto your component or

00:10:40,300 --> 00:10:44,050
multiple components and be able to use

00:10:42,560 --> 00:10:46,610
that same behavior in multiple

00:10:44,050 --> 00:10:48,650
components so let's take a look at how

00:10:46,610 --> 00:10:51,710
we actually go about doing this I've

00:10:48,650 --> 00:10:54,460
created a more practical directive here

00:10:51,710 --> 00:10:56,770
called lock down because it's going to

00:10:54,460 --> 00:11:00,710
be activated based off of the lockdown

00:10:56,770 --> 00:11:02,660
attribute here and also a few different

00:11:00,710 --> 00:11:05,990
local private properties I'm keeping

00:11:02,660 --> 00:11:08,150
track of a subscription to a observable

00:11:05,990 --> 00:11:10,820
and input to be able to pass in

00:11:08,150 --> 00:11:13,610
values to it and you'll notice here that

00:11:10,820 --> 00:11:16,030
the selector and the input are both

00:11:13,610 --> 00:11:18,680
named lockdown that is completely legal

00:11:16,030 --> 00:11:21,010
so you can pass values in based off of

00:11:18,680 --> 00:11:22,910
this selector that that activates your

00:11:21,010 --> 00:11:24,860
component especially for attributes

00:11:22,910 --> 00:11:26,570
classes not so much but with an

00:11:24,860 --> 00:11:29,110
attribute you can specify the value

00:11:26,570 --> 00:11:32,750
being the same thing as the selector and

00:11:29,110 --> 00:11:35,770
then I'm also injecting in my security

00:11:32,750 --> 00:11:38,300
service here via dependency injection

00:11:35,770 --> 00:11:40,850
inside that directive we have some

00:11:38,300 --> 00:11:42,500
lifecycle hooks to take care of on in it

00:11:40,850 --> 00:11:44,480
I am subscribing or I'm getting the

00:11:42,500 --> 00:11:46,400
rolls from the security service and I am

00:11:44,480 --> 00:11:49,520
setting to a local value or a variable

00:11:46,400 --> 00:11:51,110
inside of my user roles and then I am

00:11:49,520 --> 00:11:54,710
also destroying that in unsubscribing

00:11:51,110 --> 00:11:56,150
just to clean up some memory management

00:11:54,710 --> 00:12:00,380
to make sure that we unsubscribe to

00:11:56,150 --> 00:12:02,420
anything that we do subscribe to and we

00:12:00,380 --> 00:12:04,460
have a host binding and here I'm binding

00:12:02,420 --> 00:12:07,400
to the disabled property so buttons

00:12:04,460 --> 00:12:09,440
links and other elements within the Dom

00:12:07,400 --> 00:12:12,110
have the disabled property we're just

00:12:09,440 --> 00:12:13,910
basically overriding that and there's

00:12:12,110 --> 00:12:16,670
just logic in there that is going to go

00:12:13,910 --> 00:12:18,380
through and determine whether or not a

00:12:16,670 --> 00:12:21,980
user has a role that's being passed in

00:12:18,380 --> 00:12:24,170
it takes in an array of strings or

00:12:21,980 --> 00:12:26,690
actually a string array of different

00:12:24,170 --> 00:12:30,050
roles that the user has to have in order

00:12:26,690 --> 00:12:32,930
to utilize that and we're just returning

00:12:30,050 --> 00:12:34,880
out it's kind of a negation so disabled

00:12:32,930 --> 00:12:38,090
is if they don't have the role it will

00:12:34,880 --> 00:12:40,160
be disabled and bam we have that

00:12:38,090 --> 00:12:41,720
implementation there and I'm just going

00:12:40,160 --> 00:12:45,800
to go through real quick and I have that

00:12:41,720 --> 00:12:49,160
up and running here I didn't write any

00:12:45,800 --> 00:12:50,480
CSS for this as you can see all the

00:12:49,160 --> 00:12:53,030
other examples are here so this is all

00:12:50,480 --> 00:12:55,400
within the we'll be in the repo that

00:12:53,030 --> 00:12:56,750
I'll post up a lot later today but if we

00:12:55,400 --> 00:12:58,580
are assigning roles and that's just

00:12:56,750 --> 00:13:03,290
different component up here to be able

00:12:58,580 --> 00:13:05,090
to specify that we have the guest role

00:13:03,290 --> 00:13:08,540
you'll see that this one gets activated

00:13:05,090 --> 00:13:11,270
as well as the user as you give grant

00:13:08,540 --> 00:13:14,210
that role then the user role will get

00:13:11,270 --> 00:13:15,920
activated as well and then also the

00:13:14,210 --> 00:13:18,500
admin role and as you disable those

00:13:15,920 --> 00:13:20,170
those get in so we've now completely

00:13:18,500 --> 00:13:22,340
extracted that behavior of locking down

00:13:20,170 --> 00:13:25,370
different Dom elements

00:13:22,340 --> 00:13:26,990
based off of directives rather than

00:13:25,370 --> 00:13:29,420
having that logic completely within a

00:13:26,990 --> 00:13:30,740
component I think that didn't end up in

00:13:29,420 --> 00:13:35,480
my slide deck so I'm going to just show

00:13:30,740 --> 00:13:41,060
that right here and that is just right

00:13:35,480 --> 00:13:42,290
here so we have buttons and in order to

00:13:41,060 --> 00:13:44,540
lock down the guest action you're

00:13:42,290 --> 00:13:46,750
basically specifying that as long as you

00:13:44,540 --> 00:13:49,550
have the guest role that is being

00:13:46,750 --> 00:13:51,830
applied there now with no additional

00:13:49,550 --> 00:13:53,990
code in the component whatsoever it's

00:13:51,830 --> 00:13:58,880
already been refactored as a behavior

00:13:53,990 --> 00:14:00,920
outside of your components and what I

00:13:58,880 --> 00:14:03,500
want to leave you with today is the idea

00:14:00,920 --> 00:14:05,000
of most people I don't think are taking

00:14:03,500 --> 00:14:06,770
advantage of directives but there's a

00:14:05,000 --> 00:14:08,810
lot that you can do with them and I hope

00:14:06,770 --> 00:14:10,370
that you explore the different ideas of

00:14:08,810 --> 00:14:12,230
what you can do with directives with the

00:14:10,370 --> 00:14:14,030
examples you've seen today of how you

00:14:12,230 --> 00:14:16,010
can expand your logic and your behaviors

00:14:14,030 --> 00:14:18,610
in your application using them so thank

00:14:16,010 --> 00:14:18,610
you for your time today

00:14:21,649 --> 00:14:23,709

YouTube URL: https://www.youtube.com/watch?v=VkfHZiMqEd4


