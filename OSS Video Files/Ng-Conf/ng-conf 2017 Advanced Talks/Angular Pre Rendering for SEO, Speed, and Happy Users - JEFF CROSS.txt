Title: Angular Pre Rendering for SEO, Speed, and Happy Users - JEFF CROSS
Publication date: 2017-04-30
Playlist: ng-conf 2017 Advanced Talks
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,680 --> 00:00:06,720
thank you very much hello I'm Jeff cross

00:00:04,110 --> 00:00:08,700
I'm really happy to talk about this

00:00:06,720 --> 00:00:09,750
today this is an exciting topic of

00:00:08,700 --> 00:00:12,150
pre-rendering

00:00:09,750 --> 00:00:13,740
and pre-rendering is the word that maybe

00:00:12,150 --> 00:00:15,000
you don't know what it means or you have

00:00:13,740 --> 00:00:17,220
an idea of what it means it's different

00:00:15,000 --> 00:00:18,570
from what I mean of it and actually we

00:00:17,220 --> 00:00:20,670
talked about what is the right thing to

00:00:18,570 --> 00:00:22,680
call this if this Universal is this

00:00:20,670 --> 00:00:25,170
pre-rendering re-rendering lots of

00:00:22,680 --> 00:00:27,390
different words so like all scientific

00:00:25,170 --> 00:00:30,060
studies I took to Twitter to do a poll

00:00:27,390 --> 00:00:31,740
to see what we should call it and we had

00:00:30,060 --> 00:00:34,649
universal rendering pre-rendering or

00:00:31,740 --> 00:00:36,510
Patrick J essing that's honor Patrick J

00:00:34,649 --> 00:00:38,969
s who did the original universal

00:00:36,510 --> 00:00:40,980
implementation so as you can see Patrick

00:00:38,969 --> 00:00:43,680
J Ising one and so my talk today is

00:00:40,980 --> 00:00:47,010
actually angular Patrick J Ising for SEO

00:00:43,680 --> 00:00:48,660
speed and happy users so congratulations

00:00:47,010 --> 00:00:50,760
Patrick if you're watching you can be

00:00:48,660 --> 00:00:52,800
here today but I'll share these slides

00:00:50,760 --> 00:00:56,460
later I go really quickly through slides

00:00:52,800 --> 00:00:57,390
because my slides are my notes and you

00:00:56,460 --> 00:00:59,160
won't be able to take pictures of

00:00:57,390 --> 00:01:01,859
anything interesting so I'll tweet them

00:00:59,160 --> 00:01:02,910
later so you've got to follow me and get

00:01:01,859 --> 00:01:07,020
them there if you want to see anything

00:01:02,910 --> 00:01:08,790
again I'm on the co-founding team at

00:01:07,020 --> 00:01:10,320
Narwhal Dale used to be on the angular

00:01:08,790 --> 00:01:11,729
team I was the tech lead of angular

00:01:10,320 --> 00:01:13,799
mobile we worked on things like

00:01:11,729 --> 00:01:16,710
progressive web apps good tooling

00:01:13,799 --> 00:01:20,009
pre-rendering a lot of fun things alex

00:01:16,710 --> 00:01:22,799
hribal's now taking on that effort and

00:01:20,009 --> 00:01:24,390
now I'm in angular consultant at Narwhal

00:01:22,799 --> 00:01:27,270
with victor savkin who you met earlier

00:01:24,390 --> 00:01:28,799
today a couple of shameless plugs check

00:01:27,270 --> 00:01:31,079
out our website we blog a lot about

00:01:28,799 --> 00:01:32,460
angular or Twitter we tweet those things

00:01:31,079 --> 00:01:35,040
and we've got this book which is a great

00:01:32,460 --> 00:01:37,079
advance overview of what angular is and

00:01:35,040 --> 00:01:39,119
also we have a booth and we've sponsored

00:01:37,079 --> 00:01:41,909
the ng-conf this year so come and say hi

00:01:39,119 --> 00:01:44,369
to us the times which mean we're talking

00:01:41,909 --> 00:01:47,310
or doing something else and we are

00:01:44,369 --> 00:01:49,409
really nice people so we're going to

00:01:47,310 --> 00:01:50,880
talk about pre-rendering I know I said

00:01:49,409 --> 00:01:52,770
Patrick J Ising but I didn't have time

00:01:50,880 --> 00:01:53,850
to edit all my slides after after the

00:01:52,770 --> 00:01:55,890
results came and so we'll just say

00:01:53,850 --> 00:01:57,600
pre-rendering from now on I think most

00:01:55,890 --> 00:01:59,670
people like I think Alex Ricky Bahl

00:01:57,600 --> 00:02:02,520
would prefer to say Universal Universal

00:01:59,670 --> 00:02:04,619
rendering so take this as me calling it

00:02:02,520 --> 00:02:08,340
pre rendering and the official is to say

00:02:04,619 --> 00:02:09,479
Universal rendering going forward but

00:02:08,340 --> 00:02:11,200
we're going to talk in particular about

00:02:09,479 --> 00:02:13,330
angular 4x and what

00:02:11,200 --> 00:02:17,170
looks like in the latest release of

00:02:13,330 --> 00:02:20,110
angular and you may ask Jess what is

00:02:17,170 --> 00:02:21,760
pre-rendering and I've tried to get a

00:02:20,110 --> 00:02:23,260
succinct definition for what it means

00:02:21,760 --> 00:02:25,120
for my talk today but Google came up

00:02:23,260 --> 00:02:27,670
empty so let's come up with a common

00:02:25,120 --> 00:02:29,769
definition of what it is to render an

00:02:27,670 --> 00:02:31,959
angular application in whole or in part

00:02:29,769 --> 00:02:34,180
before sending the HTML document to the

00:02:31,959 --> 00:02:35,380
browser in other words I want to see

00:02:34,180 --> 00:02:37,660
what's on the left here where my

00:02:35,380 --> 00:02:39,700
document already has content and tags

00:02:37,660 --> 00:02:41,110
already figured out as if angular has

00:02:39,700 --> 00:02:42,459
already bootstrap my application but I

00:02:41,110 --> 00:02:44,380
want this to be what's returned when I

00:02:42,459 --> 00:02:47,049
request the document before angular

00:02:44,380 --> 00:02:49,120
actually bootstraps in the browser and

00:02:47,049 --> 00:02:50,709
you may also say just wasn't there

00:02:49,120 --> 00:02:52,780
already a project called universal that

00:02:50,709 --> 00:02:55,630
did angular pre-rendering and I would

00:02:52,780 --> 00:02:57,280
say yes there was a project called

00:02:55,630 --> 00:02:59,380
angular Universal led by some community

00:02:57,280 --> 00:03:01,420
members and this was going since angular

00:02:59,380 --> 00:03:03,549
was rather young they started in early

00:03:01,420 --> 00:03:05,920
betas I think of angular and this was

00:03:03,549 --> 00:03:07,319
led by a few folks patrick j/s who i

00:03:05,920 --> 00:03:11,349
mentioned earlier who is now a verb

00:03:07,319 --> 00:03:14,260
marked Isaac Jeff Whelpley was seen and

00:03:11,349 --> 00:03:16,840
whose v was oh I guess that'd happen to

00:03:14,260 --> 00:03:18,250
be v up contributor to universe I just

00:03:16,840 --> 00:03:20,620
chose v I didn't realize I was going to

00:03:18,250 --> 00:03:21,910
end up on my own slides but anyway there

00:03:20,620 --> 00:03:24,910
you go that was opposed to be a joke but

00:03:21,910 --> 00:03:28,030
no way laughs but I am I am the I am in

00:03:24,910 --> 00:03:29,440
the top five I was surprised to find but

00:03:28,030 --> 00:03:32,049
now it's the first-class part of angular

00:03:29,440 --> 00:03:33,400
which is awesome so it's it's been used

00:03:32,049 --> 00:03:35,680
so much and it's such an important

00:03:33,400 --> 00:03:37,329
project that developing outside of

00:03:35,680 --> 00:03:39,790
angular was getting difficult to keep it

00:03:37,329 --> 00:03:41,620
in sync and to keep up with new cool

00:03:39,790 --> 00:03:44,470
things in angular and so now it's been

00:03:41,620 --> 00:03:47,139
brought into core led by folks on the

00:03:44,470 --> 00:03:48,819
angular team Vikram and Alex and also

00:03:47,139 --> 00:03:49,989
Jason Jun from forums has been getting

00:03:48,819 --> 00:03:52,269
more involved in some of the

00:03:49,989 --> 00:03:53,859
integrations and testing with it

00:03:52,269 --> 00:03:56,079
okay so we've talked a bit a little bit

00:03:53,859 --> 00:03:57,849
about history defined pre-rendering but

00:03:56,079 --> 00:04:00,489
let's back up and talk about why it

00:03:57,849 --> 00:04:02,410
matters so we wanted to have a blog and

00:04:00,489 --> 00:04:03,790
this is just an illustration because our

00:04:02,410 --> 00:04:05,200
blog is actually just on medium we

00:04:03,790 --> 00:04:07,209
didn't actually build it ourselves but

00:04:05,200 --> 00:04:09,130
let's look at a blog as a common use

00:04:07,209 --> 00:04:11,230
case for an app that could benefit from

00:04:09,130 --> 00:04:12,790
pre-rendering we have this page where it

00:04:11,230 --> 00:04:15,180
lists our blog articles and then you

00:04:12,790 --> 00:04:19,209
dive in and you read a blog article on a

00:04:15,180 --> 00:04:20,859
detail page the things we care about for

00:04:19,209 --> 00:04:22,079
this blog are we wanted to load SAS

00:04:20,859 --> 00:04:24,000
because we want people

00:04:22,079 --> 00:04:26,280
to read our articles and not leave and

00:04:24,000 --> 00:04:28,620
get frustrated and Rob shared this in

00:04:26,280 --> 00:04:30,030
his keynote earlier but if your app

00:04:28,620 --> 00:04:32,699
takes long in three seconds to load

00:04:30,030 --> 00:04:34,439
about 53% of your users are going to get

00:04:32,699 --> 00:04:36,509
frustrated and abandoned on mobile and

00:04:34,439 --> 00:04:37,770
so that's it's not that easy to hit

00:04:36,509 --> 00:04:40,169
three seconds it's easy to get that

00:04:37,770 --> 00:04:41,939
wrong if you do some things incorrectly

00:04:40,169 --> 00:04:44,520
and there are some things we can do

00:04:41,939 --> 00:04:46,530
using pre loading free rendering that

00:04:44,520 --> 00:04:48,810
I'll talk about later to get us under

00:04:46,530 --> 00:04:51,150
that mark and second we wanted to be

00:04:48,810 --> 00:04:53,250
scraping so when people share our blog

00:04:51,150 --> 00:04:55,199
blog articles on Facebook we want

00:04:53,250 --> 00:04:56,909
everyone to see how pretty our graphics

00:04:55,199 --> 00:04:58,800
are and see the actual title of the

00:04:56,909 --> 00:05:01,949
content some description of the content

00:04:58,800 --> 00:05:04,979
we don't want it to just be some link

00:05:01,949 --> 00:05:07,020
that has no context and the same with

00:05:04,979 --> 00:05:10,169
Twitter and finally we want to be

00:05:07,020 --> 00:05:11,909
crawlable we want when people look for

00:05:10,169 --> 00:05:13,319
our blog articles written by us we want

00:05:11,909 --> 00:05:16,110
them to find them instead of seeing

00:05:13,319 --> 00:05:18,360
empty search results pages and so we've

00:05:16,110 --> 00:05:20,610
got these three priorities and you

00:05:18,360 --> 00:05:22,080
probably think well angular supposed to

00:05:20,610 --> 00:05:23,550
be good at these things right and yes

00:05:22,080 --> 00:05:24,539
angular is good at these things and

00:05:23,550 --> 00:05:27,870
actually mostly things you can

00:05:24,539 --> 00:05:29,639
accomplish with angular by itself but

00:05:27,870 --> 00:05:31,349
let's talk about some of the the

00:05:29,639 --> 00:05:33,060
priorities in more detail and where

00:05:31,349 --> 00:05:35,699
angular gets us and where there's still

00:05:33,060 --> 00:05:38,699
some room to improve

00:05:35,699 --> 00:05:41,250
one if we look at the download time and

00:05:38,699 --> 00:05:42,779
bootstrap time angular gives us a OT so

00:05:41,250 --> 00:05:44,879
we can do the work of compiling our

00:05:42,779 --> 00:05:46,830
application upfront which lets us shake

00:05:44,879 --> 00:05:48,060
a lot of size from our bundles that we

00:05:46,830 --> 00:05:49,979
put out and also a lot of work that

00:05:48,060 --> 00:05:52,080
would otherwise happen in the browser at

00:05:49,979 --> 00:05:54,240
runtime we can shift that to build set

00:05:52,080 --> 00:05:56,520
and then angular sports lazy loading

00:05:54,240 --> 00:05:58,169
down the box and so this lets us split

00:05:56,520 --> 00:05:59,550
up our application into several parts so

00:05:58,169 --> 00:06:02,009
you can only load what's needed when you

00:05:59,550 --> 00:06:05,039
need it and save some of that download

00:06:02,009 --> 00:06:07,050
and have a faster shopping experience

00:06:05,039 --> 00:06:09,360
but where can we make this a little bit

00:06:07,050 --> 00:06:11,879
better well the thing I want to focus on

00:06:09,360 --> 00:06:14,129
here is the time between the HTML

00:06:11,879 --> 00:06:16,589
loading so when when your first request

00:06:14,129 --> 00:06:18,210
actually returns an HTML page and the

00:06:16,589 --> 00:06:19,830
time when angular is done bootstrapping

00:06:18,210 --> 00:06:21,810
so there's this time the béchamel is

00:06:19,830 --> 00:06:25,199
loaded JavaScript starts executing and

00:06:21,810 --> 00:06:27,419
your bootstraps how can we make that

00:06:25,199 --> 00:06:28,830
better and so before I talk about how we

00:06:27,419 --> 00:06:31,050
make better let's talk about the metrics

00:06:28,830 --> 00:06:33,209
we want to see improved here there are

00:06:31,050 --> 00:06:34,409
two key metrics when I think about

00:06:33,209 --> 00:06:35,280
loading that I really want to get right

00:06:34,409 --> 00:06:37,139
the time to first

00:06:35,280 --> 00:06:39,450
we'll paint or when I see content I care

00:06:37,139 --> 00:06:41,040
about and then the time to interactive

00:06:39,450 --> 00:06:42,660
which is when I can start doing things

00:06:41,040 --> 00:06:46,650
with the application and it responds to

00:06:42,660 --> 00:06:49,260
me in the way I expect it to so let's

00:06:46,650 --> 00:06:51,270
look at comparing no pre rendering with

00:06:49,260 --> 00:06:54,750
pre-rendering how these things work so

00:06:51,270 --> 00:06:56,790
if I have if I have a typical cycle on

00:06:54,750 --> 00:06:58,470
the blue part is where I'm loading

00:06:56,790 --> 00:07:00,480
something over the network my HTML page

00:06:58,470 --> 00:07:02,130
and the green part is when that page is

00:07:00,480 --> 00:07:03,840
parsed and rendered and JavaScript

00:07:02,130 --> 00:07:06,450
starts executing an angular bootstraps

00:07:03,840 --> 00:07:09,000
eventually ending with my apps becoming

00:07:06,450 --> 00:07:10,890
interactive now with angular CLI you'll

00:07:09,000 --> 00:07:12,780
get a page like you see at the beginning

00:07:10,890 --> 00:07:14,010
here you'll have a loading indicator

00:07:12,780 --> 00:07:15,600
which you should replace with something

00:07:14,010 --> 00:07:17,700
better but the default is you have this

00:07:15,600 --> 00:07:19,830
loading text and then finally you see

00:07:17,700 --> 00:07:21,870
some content your page once angular's

00:07:19,830 --> 00:07:23,640
done bootstrap so that's not a great

00:07:21,870 --> 00:07:25,380
experience of the user if I load your

00:07:23,640 --> 00:07:29,910
content I'd like to your content sooner

00:07:25,380 --> 00:07:31,620
and so with pre-rendering we can we can

00:07:29,910 --> 00:07:33,750
actually shift the time the user sees

00:07:31,620 --> 00:07:35,070
something on the page so as soon as the

00:07:33,750 --> 00:07:37,919
document is loaded from the server

00:07:35,070 --> 00:07:39,600
because the markup and the CSS are

00:07:37,919 --> 00:07:40,860
already there and browser can render

00:07:39,600 --> 00:07:42,600
those statically without having to

00:07:40,860 --> 00:07:44,700
execute JavaScript I'll say in this

00:07:42,600 --> 00:07:46,110
chart the the time to load the HTML is

00:07:44,700 --> 00:07:47,310
the same that won't always be the case

00:07:46,110 --> 00:07:48,990
in the production if you're doing more

00:07:47,310 --> 00:07:51,240
computation on your server at request

00:07:48,990 --> 00:07:52,050
time to serve the document it's probably

00:07:51,240 --> 00:07:53,070
gonna be a little bit longer because

00:07:52,050 --> 00:07:55,410
you're doing some more work on the

00:07:53,070 --> 00:07:56,940
server but you'll still in most cases if

00:07:55,410 --> 00:07:59,130
you do it right you'll still have the

00:07:56,940 --> 00:08:03,240
first meaningful content far ahead of

00:07:59,130 --> 00:08:04,560
when angular's done bootstrapping so

00:08:03,240 --> 00:08:08,430
scrape the bowl

00:08:04,560 --> 00:08:10,020
so social scrapers they like to see some

00:08:08,430 --> 00:08:14,190
things on your page like specific meta

00:08:10,020 --> 00:08:15,539
tags the prominent scrapers they all

00:08:14,190 --> 00:08:16,950
want to see these their own kind of meta

00:08:15,539 --> 00:08:19,260
tags like Facebook and Twitter have meta

00:08:16,950 --> 00:08:20,640
tags they recommend you use although in

00:08:19,260 --> 00:08:22,020
some cases they look at the bodies to

00:08:20,640 --> 00:08:23,789
figure out what content there is so when

00:08:22,020 --> 00:08:25,380
somebody shares something to Facebook

00:08:23,789 --> 00:08:26,729
it'll show a little bit of a preview in

00:08:25,380 --> 00:08:29,580
the timeline of what what your content

00:08:26,729 --> 00:08:31,320
is another thing they like to see is

00:08:29,580 --> 00:08:33,060
canonical URLs so if you have the same

00:08:31,320 --> 00:08:34,710
content that can be accessed at

00:08:33,060 --> 00:08:36,510
different URLs they want to know what

00:08:34,710 --> 00:08:37,830
the single Authority of URL is for that

00:08:36,510 --> 00:08:40,860
and they want you to tell them that by

00:08:37,830 --> 00:08:42,599
using the link rel preload tact and they

00:08:40,860 --> 00:08:44,970
typically don't execute JavaScript so

00:08:42,599 --> 00:08:46,740
these meta tags and the link rel preload

00:08:44,970 --> 00:08:48,330
they want to see you need to have those

00:08:46,740 --> 00:08:49,170
in the document that's returned from the

00:08:48,330 --> 00:08:50,459
server when

00:08:49,170 --> 00:08:54,089
they're scrapers are requesting that

00:08:50,459 --> 00:08:55,440
page in parsing it so it's the for an

00:08:54,089 --> 00:08:57,180
example from Facebook they have their

00:08:55,440 --> 00:08:59,190
Open Graph specification and Twitter

00:08:57,180 --> 00:09:00,720
cards have their own specification for

00:08:59,190 --> 00:09:02,430
how you can tell them about your page so

00:09:00,720 --> 00:09:04,410
they'll pick the right photos the right

00:09:02,430 --> 00:09:05,790
description the right title when people

00:09:04,410 --> 00:09:09,420
are sharing it to your timelines and

00:09:05,790 --> 00:09:11,490
look nice like this instead of bad like

00:09:09,420 --> 00:09:12,839
this where just has the blog title and

00:09:11,490 --> 00:09:16,170
some link that you have no idea what's

00:09:12,839 --> 00:09:17,730
just been chair so that's how to make

00:09:16,170 --> 00:09:20,550
social scrapers happy but let's talk

00:09:17,730 --> 00:09:22,320
about how to make crawlers happy so

00:09:20,550 --> 00:09:23,610
surgeons and crawlers they have their

00:09:22,320 --> 00:09:25,290
own kind of requirements they like to

00:09:23,610 --> 00:09:27,269
see they want to see a page title just

00:09:25,290 --> 00:09:29,610
using a title tag they want to see a

00:09:27,269 --> 00:09:32,699
meta description and they also want to

00:09:29,610 --> 00:09:34,170
see canonical URLs they also look a lot

00:09:32,699 --> 00:09:35,010
more at page content because what

00:09:34,170 --> 00:09:36,510
they're trying to figure out is what

00:09:35,010 --> 00:09:37,680
your page actually means so they care a

00:09:36,510 --> 00:09:39,029
lot more about the context of your page

00:09:37,680 --> 00:09:41,220
in the scraper does which just wants to

00:09:39,029 --> 00:09:43,170
know how to show your page in a standard

00:09:41,220 --> 00:09:44,220
fashion when they want to win collars

00:09:43,170 --> 00:09:46,350
call your site they want to know how to

00:09:44,220 --> 00:09:47,699
show it for specific queries and those

00:09:46,350 --> 00:09:49,529
are different parts your content for

00:09:47,699 --> 00:09:51,300
different queries and they also use that

00:09:49,529 --> 00:09:53,820
to know how you should rank for certain

00:09:51,300 --> 00:09:55,079
queries as one of the factors the

00:09:53,820 --> 00:09:57,750
interesting thing about crawlers

00:09:55,079 --> 00:09:59,070
compared to scrapers is they tend to

00:09:57,750 --> 00:10:01,140
execute JavaScript and the Google

00:09:59,070 --> 00:10:02,610
crawler has particularly gotten really

00:10:01,140 --> 00:10:04,380
good at this at being able to render

00:10:02,610 --> 00:10:06,360
your application and run JavaScript and

00:10:04,380 --> 00:10:08,880
understand the dynamically rendered

00:10:06,360 --> 00:10:10,920
content your application but they still

00:10:08,880 --> 00:10:12,449
recommend that you pre render as a

00:10:10,920 --> 00:10:14,339
fallback in case the crawler is unable

00:10:12,449 --> 00:10:16,800
to understand your page rendered with

00:10:14,339 --> 00:10:18,120
JavaScript I actually started a blog

00:10:16,800 --> 00:10:20,010
series on this and I've given a couple

00:10:18,120 --> 00:10:22,050
talks on search engine optimization with

00:10:20,010 --> 00:10:25,470
angular in particular which you can find

00:10:22,050 --> 00:10:27,120
at non-audio slash SEO i've got a series

00:10:25,470 --> 00:10:30,000
like started and i'll continue adding to

00:10:27,120 --> 00:10:31,529
that in the future so we've talked about

00:10:30,000 --> 00:10:32,940
our priorities and specifically what

00:10:31,529 --> 00:10:34,920
things we need to get right to hit these

00:10:32,940 --> 00:10:36,360
priorities and let me with that

00:10:34,920 --> 00:10:38,880
introduce you to pre rendering in

00:10:36,360 --> 00:10:40,440
angular 4x and this is familiar to what

00:10:38,880 --> 00:10:42,779
Rob showed in the keynote this morning

00:10:40,440 --> 00:10:45,329
if you were there but let me quickly go

00:10:42,779 --> 00:10:48,480
over what how this works how you can do

00:10:45,329 --> 00:10:50,339
this in a really simple way so if you

00:10:48,480 --> 00:10:53,490
look at this code example here we see

00:10:50,339 --> 00:10:55,829
that we have this new function from from

00:10:53,490 --> 00:10:57,390
angular platform server which the

00:10:55,829 --> 00:10:58,500
platform server module has been there

00:10:57,390 --> 00:11:00,329
for a while but hasn't really been

00:10:58,500 --> 00:11:01,960
public API it's mostly been internal

00:11:00,329 --> 00:11:03,580
usage for testing and things like

00:11:01,960 --> 00:11:05,890
with English but now it's actually a

00:11:03,580 --> 00:11:07,510
package that you would use to do

00:11:05,890 --> 00:11:09,670
pre-rendering and we have a new function

00:11:07,510 --> 00:11:12,220
called render module Factory and what we

00:11:09,670 --> 00:11:14,170
can see in our example here is we just

00:11:12,220 --> 00:11:17,529
pass a module factory that's already

00:11:14,170 --> 00:11:19,779
been alt compiled and then we pass it an

00:11:17,529 --> 00:11:22,060
object that gives it a document of its

00:11:19,779 --> 00:11:24,370
just a string of our HTML page or source

00:11:22,060 --> 00:11:27,790
page and then the URL for which it

00:11:24,370 --> 00:11:30,130
should render and that returns a promise

00:11:27,790 --> 00:11:31,839
of our fully rendered HTML which you can

00:11:30,130 --> 00:11:33,640
do whatever you'd like with so this is a

00:11:31,839 --> 00:11:35,709
really simple building block you could

00:11:33,640 --> 00:11:37,570
use in any kind of either build script

00:11:35,709 --> 00:11:41,470
or runtime you could build a serving

00:11:37,570 --> 00:11:44,140
server around this and then the module

00:11:41,470 --> 00:11:45,850
we're bringing in is it's rather simple

00:11:44,140 --> 00:11:47,470
itself we basically take the app module

00:11:45,850 --> 00:11:50,350
that we've already built for application

00:11:47,470 --> 00:11:54,370
and then import it as well as a server

00:11:50,350 --> 00:11:56,730
module from a platform server and then

00:11:54,370 --> 00:11:59,709
we have a bootstrapper app component and

00:11:56,730 --> 00:12:00,910
this is all that we have to do and I'll

00:11:59,709 --> 00:12:03,550
talk a little bit more about that server

00:12:00,910 --> 00:12:05,230
module in just a minute and then if we

00:12:03,550 --> 00:12:06,610
look at the app module it's pretty close

00:12:05,230 --> 00:12:08,380
to what we would write if we were not

00:12:06,610 --> 00:12:10,450
doing pre rendering other than calling

00:12:08,380 --> 00:12:12,730
this method with server transition which

00:12:10,450 --> 00:12:15,190
just gives a string to angular so it can

00:12:12,730 --> 00:12:17,200
do things like CSS prefixing and other

00:12:15,190 --> 00:12:19,209
things properly between the transition

00:12:17,200 --> 00:12:24,910
of server and clients or that it's using

00:12:19,209 --> 00:12:26,440
some of the same naming so basically we

00:12:24,910 --> 00:12:28,029
have this kind of tree we have our app

00:12:26,440 --> 00:12:30,040
server module which is bringing in the

00:12:28,029 --> 00:12:31,570
server module from angular and it's also

00:12:30,040 --> 00:12:32,980
bringing in our own app module which is

00:12:31,570 --> 00:12:35,050
bringing in browser module for angular

00:12:32,980 --> 00:12:36,640
let's talk about the server module and

00:12:35,050 --> 00:12:39,610
what's special about that and why we

00:12:36,640 --> 00:12:42,010
need to have that what this does is

00:12:39,610 --> 00:12:43,120
overrides platform specific features for

00:12:42,010 --> 00:12:46,029
you so that you can write your

00:12:43,120 --> 00:12:47,020
application as if you weren't running on

00:12:46,029 --> 00:12:49,930
the server there are some things you

00:12:47,020 --> 00:12:51,760
should do differently and and you could

00:12:49,930 --> 00:12:54,160
do differently to optimize things on the

00:12:51,760 --> 00:12:55,420
server but for the most part you could

00:12:54,160 --> 00:12:58,180
just bring in server module and things

00:12:55,420 --> 00:13:00,190
like HTTP requests will work out a box

00:12:58,180 --> 00:13:03,579
because they've overrun it with a node

00:13:00,190 --> 00:13:06,220
specific HTTP library also location so

00:13:03,579 --> 00:13:08,620
you can do routing seamlessly on the

00:13:06,220 --> 00:13:11,920
server and also a Dom implementation so

00:13:08,620 --> 00:13:14,550
it knows how to render your dump so

00:13:11,920 --> 00:13:16,230
that's a little bit about what it is and

00:13:14,550 --> 00:13:17,760
and the new API but let's talk about

00:13:16,230 --> 00:13:19,230
what's actually having what's the

00:13:17,760 --> 00:13:21,660
lifecycle of pre-rendering

00:13:19,230 --> 00:13:23,640
and think about how you could think

00:13:21,660 --> 00:13:26,430
about what your strategy for preventing

00:13:23,640 --> 00:13:28,440
could or should be I've brought it into

00:13:26,430 --> 00:13:29,940
four steps that I think generally

00:13:28,440 --> 00:13:31,950
capture what pre-rendering looks like

00:13:29,940 --> 00:13:35,010
for folks rendering serving

00:13:31,950 --> 00:13:37,410
bootstrapping and replaying so let's

00:13:35,010 --> 00:13:39,089
talk about rendering so I've got a scary

00:13:37,410 --> 00:13:39,870
graph here but if we just take a moment

00:13:39,089 --> 00:13:42,440
to look at it

00:13:39,870 --> 00:13:44,730
I generally I generally break down the

00:13:42,440 --> 00:13:46,920
some of the decisions about how you pre

00:13:44,730 --> 00:13:48,000
render into two axes which is the

00:13:46,920 --> 00:13:50,190
completeness of what you're rendering

00:13:48,000 --> 00:13:52,350
and when it's rendered and we have two

00:13:50,190 --> 00:13:54,089
extremes for when it's rendered you can

00:13:52,350 --> 00:13:56,040
render everything at request time so a

00:13:54,089 --> 00:13:57,839
request comes in you completely render

00:13:56,040 --> 00:13:59,640
the document based on whatever variables

00:13:57,839 --> 00:14:01,260
you have for that request and then you

00:13:59,640 --> 00:14:02,910
serve it and the other extreme as you do

00:14:01,260 --> 00:14:04,589
it at Build time so you render your

00:14:02,910 --> 00:14:06,000
entire application or whatever you're

00:14:04,589 --> 00:14:08,160
going to preventer in a build step

00:14:06,000 --> 00:14:09,300
before you deploy and on the

00:14:08,160 --> 00:14:11,579
completeness spectrum you've got

00:14:09,300 --> 00:14:14,910
rendering a partial screen and then

00:14:11,579 --> 00:14:16,050
rendering an entire screen so if you

00:14:14,910 --> 00:14:17,279
look at the left end of the spectrum

00:14:16,050 --> 00:14:18,870
that doing things at build time you'll

00:14:17,279 --> 00:14:20,010
have the best runtime performance if you

00:14:18,870 --> 00:14:22,440
had pre render your entire application

00:14:20,010 --> 00:14:24,000
as part of a build set because then

00:14:22,440 --> 00:14:26,220
you're not having to do any work other

00:14:24,000 --> 00:14:29,310
than serving from a cache at runtime

00:14:26,220 --> 00:14:32,160
when requests are received but the

00:14:29,310 --> 00:14:34,050
trade-off is that at request time you

00:14:32,160 --> 00:14:35,700
can make everything dynamic you can look

00:14:34,050 --> 00:14:37,950
at the user you can look at their locale

00:14:35,700 --> 00:14:40,649
you can look at whatever fresh data you

00:14:37,950 --> 00:14:43,200
have and serve it with the request at

00:14:40,649 --> 00:14:45,420
request time at the cost of higher

00:14:43,200 --> 00:14:47,130
runtime cost you'll have to do more

00:14:45,420 --> 00:14:49,170
computation when serving each class so

00:14:47,130 --> 00:14:51,089
it's going to add more time between the

00:14:49,170 --> 00:14:52,350
when you're serving request is going to

00:14:51,089 --> 00:14:54,510
add more time to the user downloading

00:14:52,350 --> 00:14:56,820
that and then we if we look at the

00:14:54,510 --> 00:14:58,440
completeness the trade-offs are that

00:14:56,820 --> 00:15:00,029
it's simpler usually to render an entire

00:14:58,440 --> 00:15:01,529
screen because you can pretty much just

00:15:00,029 --> 00:15:03,270
take your existing cap and say when its

00:15:01,529 --> 00:15:05,480
route is done or when this route comes

00:15:03,270 --> 00:15:07,949
in render this screen for the route

00:15:05,480 --> 00:15:10,260
rather than rendering certain only

00:15:07,949 --> 00:15:12,510
certain components which which is less

00:15:10,260 --> 00:15:13,940
computation at runtime but requires you

00:15:12,510 --> 00:15:16,649
to think more about how you run your

00:15:13,940 --> 00:15:19,110
application also give some examples of

00:15:16,649 --> 00:15:20,430
like real-world cases app shell that Rob

00:15:19,110 --> 00:15:21,480
mentioned a little bit today like when

00:15:20,430 --> 00:15:23,520
you have as little of your app as

00:15:21,480 --> 00:15:25,050
possible that's pre-rendered then you

00:15:23,520 --> 00:15:27,329
would have like your header your title

00:15:25,050 --> 00:15:28,150
but maybe a loading indicator that falls

00:15:27,329 --> 00:15:29,230
on the corner

00:15:28,150 --> 00:15:30,850
spectrum where you're going to do it at

00:15:29,230 --> 00:15:32,290
Build time is probably build process to

00:15:30,850 --> 00:15:34,150
just build this chrome around it'll get

00:15:32,290 --> 00:15:36,130
served when user requests your site and

00:15:34,150 --> 00:15:37,840
it's also not very complete because it

00:15:36,130 --> 00:15:39,460
has very little of your actual

00:15:37,840 --> 00:15:40,870
application and if you take something

00:15:39,460 --> 00:15:42,610
like a blog post if you have a blog that

00:15:40,870 --> 00:15:44,530
size of ours you can very easily

00:15:42,610 --> 00:15:46,240
pre-render the whole thing at Build time

00:15:44,530 --> 00:15:48,880
because it doesn't have a lot of user

00:15:46,240 --> 00:15:51,460
specific or timely data we could

00:15:48,880 --> 00:15:52,390
actually we have tens of articles so we

00:15:51,460 --> 00:15:54,580
could actually prove into the whole

00:15:52,390 --> 00:15:56,860
thing pretty quickly and serve already

00:15:54,580 --> 00:15:59,680
generated HTML pages from a cache in

00:15:56,860 --> 00:16:01,540
production for for really fast serving

00:15:59,680 --> 00:16:03,700
but if you have something like a product

00:16:01,540 --> 00:16:05,200
page for e-commerce site there may be

00:16:03,700 --> 00:16:08,860
some things on that that are more timely

00:16:05,200 --> 00:16:10,600
like the prices change often and and you

00:16:08,860 --> 00:16:13,000
may want to render a good amount of the

00:16:10,600 --> 00:16:14,680
page like a lot of the content and stuff

00:16:13,000 --> 00:16:16,150
that matters for SEO but you probably

00:16:14,680 --> 00:16:19,180
won't render the entire screen like you

00:16:16,150 --> 00:16:21,280
could have shopping carts or or other

00:16:19,180 --> 00:16:24,280
user specific data that you could you

00:16:21,280 --> 00:16:25,690
could wait to render at runtime in the

00:16:24,280 --> 00:16:27,220
browser one thing you lose bootstrapping

00:16:25,690 --> 00:16:29,110
so you can save see the work on the

00:16:27,220 --> 00:16:31,570
server and you can actually cache that

00:16:29,110 --> 00:16:33,280
as you go and then the news article is

00:16:31,570 --> 00:16:35,200
kind of the same like it's more timely

00:16:33,280 --> 00:16:36,790
and at the extreme we have something

00:16:35,200 --> 00:16:38,680
like a big bank statement which is

00:16:36,790 --> 00:16:40,210
really user specific you're probably

00:16:38,680 --> 00:16:42,310
gonna want to catch that because it's

00:16:40,210 --> 00:16:44,140
it's got to be fresh I want to see my

00:16:42,310 --> 00:16:46,570
account balance from now not from

00:16:44,140 --> 00:16:48,760
yesterday and I want to see transactions

00:16:46,570 --> 00:16:49,780
and so it's probably something you want

00:16:48,760 --> 00:16:51,400
to cache and I can't really share

00:16:49,780 --> 00:16:54,640
between users so that's kind of the

00:16:51,400 --> 00:16:55,840
extreme of when you want to render so

00:16:54,640 --> 00:16:57,580
when thinking about how to incorporate

00:16:55,840 --> 00:16:59,020
it into your own process your the

00:16:57,580 --> 00:17:01,210
considerations you'll want to keep in

00:16:59,020 --> 00:17:03,310
mind the number of pages how much

00:17:01,210 --> 00:17:05,080
content do I have to pre render and how

00:17:03,310 --> 00:17:08,290
long is that going to take like how many

00:17:05,080 --> 00:17:10,690
products articles do I have do I want to

00:17:08,290 --> 00:17:13,510
prevent arevery localization of my

00:17:10,690 --> 00:17:15,100
content and do I want to do I need to

00:17:13,510 --> 00:17:17,050
have specific user data in what's

00:17:15,100 --> 00:17:18,910
pre-rendered or can I defer that after

00:17:17,050 --> 00:17:20,290
the page has been bootstrapped in the

00:17:18,910 --> 00:17:22,480
browser and then your content

00:17:20,290 --> 00:17:23,440
impressions requirements so if you need

00:17:22,480 --> 00:17:27,250
to have something that's up-to-date like

00:17:23,440 --> 00:17:29,350
a bank statement or yeah a blog or

00:17:27,250 --> 00:17:30,400
comments or Twitter timeline obviously

00:17:29,350 --> 00:17:32,830
that's not going to lend itself very

00:17:30,400 --> 00:17:35,080
well to build time pre-rendering and

00:17:32,830 --> 00:17:36,730
your frequency of application deployment

00:17:35,080 --> 00:17:39,240
so if you have a million pages you have

00:17:36,730 --> 00:17:41,230
to pre render and it takes you hours to

00:17:39,240 --> 00:17:41,840
render all that that's probably going to

00:17:41,230 --> 00:17:43,220
be something you

00:17:41,840 --> 00:17:45,710
want part of your continuous development

00:17:43,220 --> 00:17:47,720
process so we've covered the hardest

00:17:45,710 --> 00:17:49,520
part of this whole lifecycle which is

00:17:47,720 --> 00:17:52,600
the actual rendering and how and when

00:17:49,520 --> 00:17:55,700
you do it let's talk about serving

00:17:52,600 --> 00:17:57,049
server gets a request for a page and it

00:17:55,700 --> 00:17:59,360
serves a pre-rendered page from your

00:17:57,049 --> 00:18:01,190
cache if you pre built it or it lazily

00:17:59,360 --> 00:18:02,720
pre renders from a route and that's all

00:18:01,190 --> 00:18:03,919
you need to know about serving you can

00:18:02,720 --> 00:18:05,900
figure out the rest based on your own

00:18:03,919 --> 00:18:07,400
infrastructure but the ideal is that

00:18:05,900 --> 00:18:09,080
you've already got a page render to the

00:18:07,400 --> 00:18:10,460
map you just kick it back to the server

00:18:09,080 --> 00:18:12,919
and if you need to do some something

00:18:10,460 --> 00:18:14,510
else with it you can but that part is

00:18:12,919 --> 00:18:16,970
pretty simple compared to everything

00:18:14,510 --> 00:18:18,529
else here so the bootstrapping swap this

00:18:16,970 --> 00:18:21,500
is one of the areas that's a little bit

00:18:18,529 --> 00:18:24,140
more confusing it can be confusing I

00:18:21,500 --> 00:18:27,200
should say so in the process so I have

00:18:24,140 --> 00:18:28,429
this e-commerce site when I pre render

00:18:27,200 --> 00:18:30,679
something from the server this is what

00:18:28,429 --> 00:18:32,840
comes back it's an HTML page that no

00:18:30,679 --> 00:18:35,510
JavaScript has run in my browser yet to

00:18:32,840 --> 00:18:37,190
render it but I can see product details

00:18:35,510 --> 00:18:39,470
and I can see that i want to buy a

00:18:37,190 --> 00:18:41,240
narwhal but i see my shopping cart on

00:18:39,470 --> 00:18:43,610
the right it doesn't do anything right

00:18:41,240 --> 00:18:44,450
now it's just as loading and pay so this

00:18:43,610 --> 00:18:46,220
kind of goes to what I was saying

00:18:44,450 --> 00:18:48,830
earlier about partial rendering where

00:18:46,220 --> 00:18:50,480
you can render the key content but not

00:18:48,830 --> 00:18:52,130
the dynamic content you can put a

00:18:50,480 --> 00:18:54,110
placeholder there and let the browser

00:18:52,130 --> 00:18:55,730
take care of it and then when that's

00:18:54,110 --> 00:18:57,470
loaded angular loads and begins

00:18:55,730 --> 00:19:00,350
bootstrapping the app in the browser and

00:18:57,470 --> 00:19:01,940
when it's done pre loading in our when

00:19:00,350 --> 00:19:04,490
it's done bootstrapping then it will

00:19:01,940 --> 00:19:06,559
destroy the previous element that was

00:19:04,490 --> 00:19:08,270
returned from the server and then it

00:19:06,559 --> 00:19:10,070
will takeover with its own new element

00:19:08,270 --> 00:19:12,140
with completely pre-rendered interactive

00:19:10,070 --> 00:19:13,820
dynamic content and we can see my

00:19:12,140 --> 00:19:15,230
shopping cart is now active it took over

00:19:13,820 --> 00:19:17,779
where the old shopping cart was and it's

00:19:15,230 --> 00:19:19,850
got my dynamic data so that's the

00:19:17,779 --> 00:19:21,590
bootstrap process let's talk about

00:19:19,850 --> 00:19:24,110
replays a little bit more of an advanced

00:19:21,590 --> 00:19:25,760
topic so B the pre-rendered page if I

00:19:24,110 --> 00:19:27,409
get from the server it's just HTML and

00:19:25,760 --> 00:19:32,390
CSS with JavaScript that's going to

00:19:27,409 --> 00:19:33,529
start loading but you may wonder what

00:19:32,390 --> 00:19:36,770
happens if the user starts interacting

00:19:33,529 --> 00:19:39,260
like typing in an input and I may say

00:19:36,770 --> 00:19:42,159
I'm glad you asked there are two ways

00:19:39,260 --> 00:19:44,600
that you could deal with this situation

00:19:42,159 --> 00:19:47,000
you could not render interactive

00:19:44,600 --> 00:19:48,289
components just render components so

00:19:47,000 --> 00:19:50,330
that they can read that have data to

00:19:48,289 --> 00:19:53,570
look at or you could record and replay

00:19:50,330 --> 00:19:54,990
user events I like I like the way Google

00:19:53,570 --> 00:19:57,990
Docs handles this with their you

00:19:54,990 --> 00:19:59,730
when I start loading a Google Doc it has

00:19:57,990 --> 00:20:00,990
all these controls I can see but they

00:19:59,730 --> 00:20:02,940
don't actually work yet they're all

00:20:00,990 --> 00:20:04,200
disabled and so I kind of feel like

00:20:02,940 --> 00:20:06,059
something's happening I can see it

00:20:04,200 --> 00:20:07,500
working and then once the page is done

00:20:06,059 --> 00:20:09,330
bootstrapping everything becomes

00:20:07,500 --> 00:20:11,840
interactive I think it's a pretty good

00:20:09,330 --> 00:20:15,210
user experience it's a good trade-off

00:20:11,840 --> 00:20:18,059
that can most applications to drive

00:20:15,210 --> 00:20:20,190
strive for this kind of design the

00:20:18,059 --> 00:20:21,419
alternative is you can use pre boot j/s

00:20:20,190 --> 00:20:23,039
which is something Jeff Whelpley has

00:20:21,419 --> 00:20:24,899
been working on for some time

00:20:23,039 --> 00:20:26,190
so I think right now is there are some

00:20:24,899 --> 00:20:27,330
things we worked out with Universal

00:20:26,190 --> 00:20:29,100
looking at Alec Circuit ball for

00:20:27,330 --> 00:20:30,539
conformation again a couple of things

00:20:29,100 --> 00:20:31,860
work on with the new universal

00:20:30,539 --> 00:20:34,980
integration but basically how this works

00:20:31,860 --> 00:20:36,870
is it records user events on your page

00:20:34,980 --> 00:20:38,909
and the elements are associated with on

00:20:36,870 --> 00:20:40,470
the pre-rendered page and then once you

00:20:38,909 --> 00:20:42,840
have done bootstrapping in the client it

00:20:40,470 --> 00:20:44,070
will replay those on the the other

00:20:42,840 --> 00:20:47,399
elements that have been dynamically

00:20:44,070 --> 00:20:48,630
bootstrap this you don't want to assume

00:20:47,399 --> 00:20:49,830
that this will work automatically you

00:20:48,630 --> 00:20:50,850
want to be really careful about the

00:20:49,830 --> 00:20:52,950
interactive elements you're rendering

00:20:50,850 --> 00:20:54,149
and relying on pre-boot just because

00:20:52,950 --> 00:20:55,679
they're there things like if you're

00:20:54,149 --> 00:20:57,120
typing in forms it's not actually

00:20:55,679 --> 00:20:59,399
running validators while it's recording

00:20:57,120 --> 00:21:01,080
things and so the user may end up in a

00:20:59,399 --> 00:21:03,029
state of the pre-rendered application

00:21:01,080 --> 00:21:05,100
that wouldn't be possible to get into

00:21:03,029 --> 00:21:06,690
into the bootstrap application so you

00:21:05,100 --> 00:21:08,669
want to be conscious about how you're

00:21:06,690 --> 00:21:10,409
using that but that's an overview of

00:21:08,669 --> 00:21:12,390
what's actually how it's working with

00:21:10,409 --> 00:21:16,110
free rendering and now you understand

00:21:12,390 --> 00:21:18,240
pre-rendering with angular 4x and your

00:21:16,110 --> 00:21:20,789
final question maybe this sounds great

00:21:18,240 --> 00:21:24,090
should i pre render my app and how much

00:21:20,789 --> 00:21:25,710
will it cost me if these things mattered

00:21:24,090 --> 00:21:28,020
you you should do some sort of pre

00:21:25,710 --> 00:21:29,850
rendering if you care abouts a floating

00:21:28,020 --> 00:21:31,770
or making just happening something

00:21:29,850 --> 00:21:33,210
happening or some kind of progress you

00:21:31,770 --> 00:21:35,429
should at least have an app shell but it

00:21:33,210 --> 00:21:37,200
or or at least strive to have the

00:21:35,429 --> 00:21:39,090
above-the-fold or the key content of

00:21:37,200 --> 00:21:41,340
your page pre-rendered from the server

00:21:39,090 --> 00:21:44,909
and as angular is continuing to

00:21:41,340 --> 00:21:46,950
bootstrap but to get started with this

00:21:44,909 --> 00:21:48,390
you can go to angular Oh coming soon the

00:21:46,950 --> 00:21:50,309
docs team is really working hard on

00:21:48,390 --> 00:21:51,600
getting great Doc's for using pre

00:21:50,309 --> 00:21:53,010
rendering right now that's in progress

00:21:51,600 --> 00:21:56,399
so I want to make sure it's correct and

00:21:53,010 --> 00:21:57,990
good keep keep the track of all between

00:21:56,399 --> 00:22:00,090
about angular I'm sure will to get about

00:21:57,990 --> 00:22:02,820
as they come on board but yeah those

00:22:00,090 --> 00:22:04,950
Doc's will be online soon and you can go

00:22:02,820 --> 00:22:07,010
pre rent or something thank you

00:22:04,950 --> 00:22:07,010

YouTube URL: https://www.youtube.com/watch?v=oXt-d2qG2po


