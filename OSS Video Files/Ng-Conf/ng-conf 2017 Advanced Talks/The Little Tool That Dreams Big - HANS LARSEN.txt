Title: The Little Tool That Dreams Big - HANS LARSEN
Publication date: 2017-04-30
Playlist: ng-conf 2017 Advanced Talks
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,760 --> 00:00:02,979
[Applause]

00:00:04,970 --> 00:00:13,290
hi everybody my name is Hans and I work

00:00:09,809 --> 00:00:17,480
on the angular team at Google and mostly

00:00:13,290 --> 00:00:20,970
on I'm the lead for the angular CLI and

00:00:17,480 --> 00:00:22,619
when I started on the team really I

00:00:20,970 --> 00:00:26,039
started with material because I wanted

00:00:22,619 --> 00:00:28,680
to build to help people build great hats

00:00:26,039 --> 00:00:31,080
and so I started on the material project

00:00:28,680 --> 00:00:34,020
with Jeremy Elle born and the other

00:00:31,080 --> 00:00:36,840
folks there and it was really great but

00:00:34,020 --> 00:00:38,160
then I kind of realized that there was

00:00:36,840 --> 00:00:41,190
another problem that material was not

00:00:38,160 --> 00:00:45,059
solving which is really what happens

00:00:41,190 --> 00:00:48,000
before you can even use material and so

00:00:45,059 --> 00:00:50,070
I joined the matter the the CLI team and

00:00:48,000 --> 00:00:56,190
then I become I became the lead of the

00:00:50,070 --> 00:00:59,270
of the project and really it it's mostly

00:00:56,190 --> 00:01:02,129
because when you start out a new project

00:00:59,270 --> 00:01:04,350
it's really hard to keep track of all

00:01:02,129 --> 00:01:07,490
the configurations and all the boil

00:01:04,350 --> 00:01:10,830
plates and all the different tools that

00:01:07,490 --> 00:01:12,390
you have and really it shouldn't it

00:01:10,830 --> 00:01:15,930
shouldn't be that complex it should be

00:01:12,390 --> 00:01:18,030
simple or at least simpler and that's

00:01:15,930 --> 00:01:19,500
why that's why we really created the

00:01:18,030 --> 00:01:23,850
team that's why we created the angular

00:01:19,500 --> 00:01:26,430
CLI because it was a good idea and we

00:01:23,850 --> 00:01:29,159
built it and we built this tool so that

00:01:26,430 --> 00:01:31,710
it works it just works and that's really

00:01:29,159 --> 00:01:33,750
important for you guys and that that's

00:01:31,710 --> 00:01:35,909
what matters for us you shouldn't have

00:01:33,750 --> 00:01:38,420
to you know configure anything or think

00:01:35,909 --> 00:01:40,920
too hard about it it should just work

00:01:38,420 --> 00:01:47,250
and you don't you don't need to tell it

00:01:40,920 --> 00:01:49,439
what to do and really it is inside

00:01:47,250 --> 00:01:57,180
Google but in general it's it's kind of

00:01:49,439 --> 00:02:00,719
a it's it's it's a small tool but it

00:01:57,180 --> 00:02:03,570
dreams big somebody came to me earlier

00:02:00,719 --> 00:02:10,349
this week bunny came to me earlier this

00:02:03,570 --> 00:02:11,140
week and she told me basically this

00:02:10,349 --> 00:02:19,750
thing

00:02:11,140 --> 00:02:22,510
work the seal is smart and it makes me

00:02:19,750 --> 00:02:24,700
look smart it allows me to do in a few

00:02:22,510 --> 00:02:27,550
minutes what could take me hours to do

00:02:24,700 --> 00:02:30,190
and this is this is a general sentiment

00:02:27,550 --> 00:02:33,070
among a lot of people that talk to us is

00:02:30,190 --> 00:02:37,180
it's it's like oh my god I was losing

00:02:33,070 --> 00:02:41,020
hours weeks over like nights and tired

00:02:37,180 --> 00:02:43,510
nights working on configs and

00:02:41,020 --> 00:02:44,920
now with the CLI we take care of

00:02:43,510 --> 00:02:48,550
everything for you we take care of this

00:02:44,920 --> 00:02:50,320
all for you it's it it's the whole idea

00:02:48,550 --> 00:02:56,350
of the CLI is that you should not have

00:02:50,320 --> 00:02:58,720
to worry about these things and really

00:02:56,350 --> 00:03:04,570
it's a small tool but it adds a lot of

00:02:58,720 --> 00:03:08,590
big ambitions it dreams big it looks at

00:03:04,570 --> 00:03:10,870
a large project or small projects it

00:03:08,590 --> 00:03:15,430
wants to fit the bill it wants to fit

00:03:10,870 --> 00:03:17,950
your need and I'm sure most of you have

00:03:15,430 --> 00:03:20,230
seen talked already about where how to

00:03:17,950 --> 00:03:22,690
use the CLI really so this talk is not

00:03:20,230 --> 00:03:24,070
going to be about how to use it this

00:03:22,690 --> 00:03:28,570
talk is going to be about something else

00:03:24,070 --> 00:03:30,900
because we're all engineers and we're we

00:03:28,570 --> 00:03:35,320
all want to know we're all curious about

00:03:30,900 --> 00:03:38,200
what is going on under the hood what is

00:03:35,320 --> 00:03:41,049
what happens once I you know let it do

00:03:38,200 --> 00:03:42,579
its magic well today we're going to I'm

00:03:41,049 --> 00:03:44,260
going to talk to you about like we're

00:03:42,579 --> 00:03:46,480
going to open the hood and we're going

00:03:44,260 --> 00:03:48,310
to look at what's going on inside of it

00:03:46,480 --> 00:03:54,280
and we're going to take a look most

00:03:48,310 --> 00:03:57,400
closely at the build system so the build

00:03:54,280 --> 00:04:00,310
system in angular CLI the first thing

00:03:57,400 --> 00:04:02,230
that it does is parse your flags and

00:04:00,310 --> 00:04:05,579
figure out if you want to run in

00:04:02,230 --> 00:04:08,609
developer mode development mode or

00:04:05,579 --> 00:04:11,650
production in a production environment

00:04:08,609 --> 00:04:14,470
and if it's in development mode what it

00:04:11,650 --> 00:04:16,840
does next is it's going to run static

00:04:14,470 --> 00:04:19,690
analysis on your project to discover

00:04:16,840 --> 00:04:21,519
your lazy routes and it's going to keep

00:04:19,690 --> 00:04:23,500
a track of your lazy routes for you

00:04:21,519 --> 00:04:25,060
wherever they are they can be in your

00:04:23,500 --> 00:04:27,450
project or they can be in your dip

00:04:25,060 --> 00:04:31,480
tendencies in your npm node modules

00:04:27,450 --> 00:04:34,120
dependencies and libraries and once want

00:04:31,480 --> 00:04:37,720
to figure that out it keeps it in memory

00:04:34,120 --> 00:04:40,389
and then it runs typescript compiler to

00:04:37,720 --> 00:04:42,639
compile down the typescript to the

00:04:40,389 --> 00:04:44,800
JavaScript for some it performs a little

00:04:42,639 --> 00:04:46,090
bit more stepped it with actors a little

00:04:44,800 --> 00:04:49,030
bit of your apps we're going to talk

00:04:46,090 --> 00:04:51,730
about this later and once that's done it

00:04:49,030 --> 00:04:55,300
passes the JavaScript and the lazy

00:04:51,730 --> 00:04:59,440
routes down to web pack so that

00:04:55,300 --> 00:05:00,700
can do the bundling and at the end the

00:04:59,440 --> 00:05:07,479
code is ready to ship through your

00:05:00,700 --> 00:05:10,360
browser now this is what happens in

00:05:07,479 --> 00:05:11,950
development mode the only difference

00:05:10,360 --> 00:05:15,639
between development mode in production

00:05:11,950 --> 00:05:18,840
mode happens in the refactoring and also

00:05:15,639 --> 00:05:22,479
that we do ahead of time compilation

00:05:18,840 --> 00:05:24,250
with your code we generate your

00:05:22,479 --> 00:05:26,889
factories your we generate your

00:05:24,250 --> 00:05:29,320
factories from your templates and I'll

00:05:26,889 --> 00:05:31,390
put that as well before detecting lazy

00:05:29,320 --> 00:05:37,090
routing in typescript and running types

00:05:31,390 --> 00:05:39,490
of compiler and these parts happen

00:05:37,090 --> 00:05:41,260
entirely in what we call what we

00:05:39,490 --> 00:05:44,500
developed what we call the ng tools

00:05:41,260 --> 00:05:46,690
 plugin this is the plugin this

00:05:44,500 --> 00:05:49,150
is the heart this is the core of the CLI

00:05:46,690 --> 00:05:51,840
this is what builds your code and what

00:05:49,150 --> 00:05:54,490
take care of it for you and we made that

00:05:51,840 --> 00:05:58,650
plug-in available for all of you if you

00:05:54,490 --> 00:06:02,639
want to use it without the CLI you can

00:05:58,650 --> 00:06:05,919
but most people come to me and ask me

00:06:02,639 --> 00:06:08,110
okay what does the lazy route works

00:06:05,919 --> 00:06:11,979
because that's a really source of

00:06:08,110 --> 00:06:13,419
headaches and they also ask me what kind

00:06:11,979 --> 00:06:14,560
of refactoring are you talking about

00:06:13,419 --> 00:06:18,100
when you say that you do some

00:06:14,560 --> 00:06:20,410
refactoring before running typescript so

00:06:18,100 --> 00:06:23,320
we're going to go into more details into

00:06:20,410 --> 00:06:27,820
these two these two little boxes over

00:06:23,320 --> 00:06:30,250
there the first part is detecting the

00:06:27,820 --> 00:06:32,889
lazy routes so what happens there is

00:06:30,250 --> 00:06:36,280
that imagine that you have this NG

00:06:32,889 --> 00:06:38,270
module which is relatively simple what

00:06:36,280 --> 00:06:41,440
the CLI will look for

00:06:38,270 --> 00:06:45,080
the same static analysis then the

00:06:41,440 --> 00:06:47,539
angular compiler uses to understand your

00:06:45,080 --> 00:06:50,750
code and your metadata and so it goes

00:06:47,539 --> 00:06:53,180
into this and looks for the router the

00:06:50,750 --> 00:06:56,479
router module and everything that

00:06:53,180 --> 00:06:58,849
provides routes basically and then

00:06:56,479 --> 00:07:02,870
inside of that it takes the load

00:06:58,849 --> 00:07:05,120
children and keep that one in memory it

00:07:02,870 --> 00:07:09,110
resolves a string route to that module

00:07:05,120 --> 00:07:10,909
hashtag module 2 it resolves it to an

00:07:09,110 --> 00:07:12,710
actual class and verify that everything

00:07:10,909 --> 00:07:17,569
is in place and that everything is

00:07:12,710 --> 00:07:19,639
alright and it takes your normal

00:07:17,569 --> 00:07:24,099
dependencies your regular dependencies

00:07:19,639 --> 00:07:28,039
and then create two bundles with them

00:07:24,099 --> 00:07:29,810
your dependencies are going to be in the

00:07:28,039 --> 00:07:31,789
first bundle because they're directly

00:07:29,810 --> 00:07:34,130
related to my module and they cannot be

00:07:31,789 --> 00:07:36,440
loaded otherwise but the second

00:07:34,130 --> 00:07:39,069
dependency what we do with the low

00:07:36,440 --> 00:07:42,199
children is that we take it and we

00:07:39,069 --> 00:07:45,409
create what that calls a context module

00:07:42,199 --> 00:07:48,830
dependency and so we tell web pack we

00:07:45,409 --> 00:07:52,669
might need this but probably not or

00:07:48,830 --> 00:07:54,919
maybe later and so you can place it in a

00:07:52,669 --> 00:07:57,860
separate bundle and so we create a one

00:07:54,919 --> 00:07:59,840
bundle degeus that contains that module

00:07:57,860 --> 00:08:02,870
and maybe everything that's static

00:07:59,840 --> 00:08:05,960
inside of it and if you use the CLI to

00:08:02,870 --> 00:08:07,940
create multiple multiple lazy routes

00:08:05,960 --> 00:08:11,150
you'll notice that you get like a zero

00:08:07,940 --> 00:08:13,909
bundle in one bundle a to bundle etc etc

00:08:11,150 --> 00:08:16,669
these are all a 0tz

00:08:13,909 --> 00:08:19,610
routes that we told could be

00:08:16,669 --> 00:08:23,210
separated into separate files and so

00:08:19,610 --> 00:08:26,860
your 0 will be smaller because we remove

00:08:23,210 --> 00:08:26,860
the stuff that it doesn't need to run

00:08:27,130 --> 00:08:35,149
the second part that the web pack plugin

00:08:32,180 --> 00:08:39,320
does is running refactoring on your code

00:08:35,149 --> 00:08:42,829
so this is a little bit magical but

00:08:39,320 --> 00:08:45,560
basically we have a refactoring internal

00:08:42,829 --> 00:08:47,630
library that we use that let us modify

00:08:45,560 --> 00:08:48,730
your code before passing it to the

00:08:47,630 --> 00:08:52,240
browser

00:08:48,730 --> 00:08:56,050
and so one example that we do is let's

00:08:52,240 --> 00:08:57,580
take a look at this component for now so

00:08:56,050 --> 00:09:02,860
it contains a template you are all two

00:08:57,580 --> 00:09:07,030
styles and a injected service really

00:09:02,860 --> 00:09:10,120
simple so in development mode in engine

00:09:07,030 --> 00:09:11,860
JIT compilation basically what we do is

00:09:10,120 --> 00:09:15,490
we take the template URL in the Style

00:09:11,860 --> 00:09:17,770
URLs and looking at the tree at your

00:09:15,490 --> 00:09:20,770
actual code at the actual typescript

00:09:17,770 --> 00:09:24,760
representation of your code we change

00:09:20,770 --> 00:09:26,890
them to be using require calls so that

00:09:24,760 --> 00:09:31,240
web pack can understand them and include

00:09:26,890 --> 00:09:35,260
them in your bundle so we change them to

00:09:31,240 --> 00:09:37,900
be as if they were in line and because

00:09:35,260 --> 00:09:42,160
we use require that web pack understands

00:09:37,900 --> 00:09:45,970
and we use sass extensions and we have a

00:09:42,160 --> 00:09:48,630
set order in the CLI the the two styles

00:09:45,970 --> 00:09:51,490
that are there that are actually F CSS

00:09:48,630 --> 00:09:56,070
will be compiled down to CSS before

00:09:51,490 --> 00:10:00,250
being included in your file directly now

00:09:56,070 --> 00:10:04,000
that was for jibs äôt is a little bit

00:10:00,250 --> 00:10:07,660
different story in a OT in production

00:10:04,000 --> 00:10:09,370
mode what we do is that since we don't

00:10:07,660 --> 00:10:12,430
need since we generate the energy

00:10:09,370 --> 00:10:14,740
factories with your from your templates

00:10:12,430 --> 00:10:18,490
and your styles and your metadata we

00:10:14,740 --> 00:10:19,270
don't need the decorator anymore so we

00:10:18,490 --> 00:10:21,400
get rid of it

00:10:19,270 --> 00:10:23,860
and the other thing that we do is

00:10:21,400 --> 00:10:26,410
because there is no more decorators on

00:10:23,860 --> 00:10:28,660
it there is no there's no reflect

00:10:26,410 --> 00:10:30,670
metadata so for the dependency injection

00:10:28,660 --> 00:10:32,740
what we do is create a seat or

00:10:30,670 --> 00:10:35,890
parameters static property right there

00:10:32,740 --> 00:10:37,630
that contains the information that

00:10:35,890 --> 00:10:44,470
angular will need for dependency

00:10:37,630 --> 00:10:48,070
injection this is this is needed to to

00:10:44,470 --> 00:10:51,280
basically with this you don't need

00:10:48,070 --> 00:10:55,600
reflect metadata the reflect metadata

00:10:51,280 --> 00:10:57,670
police'll sorry and because there is no

00:10:55,600 --> 00:10:59,980
metadata everything that's referenced in

00:10:57,670 --> 00:11:01,930
the metadata can actually be removed

00:10:59,980 --> 00:11:06,399
from the end bundle and will

00:11:01,930 --> 00:11:10,560
be included in your code at all so

00:11:06,399 --> 00:11:17,230
everything in there can be three shaken

00:11:10,560 --> 00:11:20,050
properly bye-bye the other thing

00:11:17,230 --> 00:11:24,370
that we do is your bootstrapping code so

00:11:20,050 --> 00:11:25,779
if you coded if you used angular you you

00:11:24,370 --> 00:11:28,060
probably know about this code this is

00:11:25,779 --> 00:11:31,510
really simple it bootstrap angular

00:11:28,060 --> 00:11:33,970
within with an app module and then

00:11:31,510 --> 00:11:35,860
import the app module from app and if

00:11:33,970 --> 00:11:37,930
you notice this is for JIT this is just

00:11:35,860 --> 00:11:40,870
specific code so it has platform browser

00:11:37,930 --> 00:11:43,720
dynamic and it uses the app module

00:11:40,870 --> 00:11:46,300
instead of the app module ng factory so

00:11:43,720 --> 00:11:48,959
what the what the plugin does the

00:11:46,300 --> 00:11:53,350
 plugin what it does is actually

00:11:48,959 --> 00:11:56,800
use the refactoring tools that we

00:11:53,350 --> 00:11:58,029
created to change the same code before

00:11:56,800 --> 00:12:01,029
passing it the type of compilation

00:11:58,029 --> 00:12:03,940
without you having to do anything about

00:12:01,029 --> 00:12:06,400
it it but it uses the same code and

00:12:03,940 --> 00:12:09,490
refactor it into bootstrapping

00:12:06,400 --> 00:12:11,800
the proper ng factory so that angular

00:12:09,490 --> 00:12:14,740
knows that you're in a OT and so there

00:12:11,800 --> 00:12:17,620
is nothing there is nothing from JIT

00:12:14,740 --> 00:12:21,400
that remains and this is done entirely

00:12:17,620 --> 00:12:23,020
for free so what we do is get rid of the

00:12:21,400 --> 00:12:25,000
platform browser dynamic and replace it

00:12:23,020 --> 00:12:28,029
with the platform browser add the ng

00:12:25,000 --> 00:12:36,850
factory to your import and bootstrap the

00:12:28,029 --> 00:12:39,790
module factory instead so the the other

00:12:36,850 --> 00:12:42,520
thing is ng check the other thing that I

00:12:39,790 --> 00:12:47,230
wanted to talk about is a little bit its

00:12:42,520 --> 00:12:49,270
ng eject and we created eject because

00:12:47,230 --> 00:12:52,300
there are cases where the CLI just

00:12:49,270 --> 00:12:55,240
doesn't fit the bill and that's at that

00:12:52,300 --> 00:12:57,610
point you still want to use you still

00:12:55,240 --> 00:13:00,220
want to keep your your configuration

00:12:57,610 --> 00:13:02,470
your build but you want to manage it

00:13:00,220 --> 00:13:04,870
yourself the CLI doesn't fit your need

00:13:02,470 --> 00:13:07,720
at that point and you you've outgrown it

00:13:04,870 --> 00:13:12,209
which you know can happen and we still

00:13:07,720 --> 00:13:15,430
love people with checked by the way

00:13:12,209 --> 00:13:18,339
so when you run Angie eject it runs

00:13:15,430 --> 00:13:20,680
exactly what we just saw the old bit

00:13:18,339 --> 00:13:23,440
about creating the configuration and

00:13:20,680 --> 00:13:25,810
creating the the plug-in

00:13:23,440 --> 00:13:30,970
configuration and creates a

00:13:25,810 --> 00:13:35,560
config the GS and it that it parses like

00:13:30,970 --> 00:13:38,890
I said it parses the build arguments so

00:13:35,560 --> 00:13:40,899
what that does is you can pass what what

00:13:38,890 --> 00:13:43,360
that means is that you can pass any

00:13:40,899 --> 00:13:45,130
arguments that you would pass to ng

00:13:43,360 --> 00:13:46,899
build and it will create the config for

00:13:45,130 --> 00:13:49,930
that so if you want to take a look under

00:13:46,899 --> 00:13:51,220
the hood - you can always get commit to

00:13:49,930 --> 00:13:53,589
make sure that everything is in shape

00:13:51,220 --> 00:13:56,649
and then I don't know you want an NG

00:13:53,589 --> 00:14:00,579
eject with a ot on or maybe you want to

00:13:56,649 --> 00:14:03,310
use prod eject with a local to generate

00:14:00,579 --> 00:14:05,290
an internationalization build and in GE

00:14:03,310 --> 00:14:07,570
Jack would generate the proper what that

00:14:05,290 --> 00:14:10,930
config that handles this case and you

00:14:07,570 --> 00:14:18,810
can also ng inject multiple times - if

00:14:10,930 --> 00:14:26,440
you need and please inject responsibly

00:14:18,810 --> 00:14:27,820
this is this is not a joke so I just

00:14:26,440 --> 00:14:33,100
want to say like two weeks ago we

00:14:27,820 --> 00:14:37,529
release a CLI 1.0 0.0 final

00:14:33,100 --> 00:14:42,880
[Applause]

00:14:37,529 --> 00:14:50,860
all right Mike please please please sit

00:14:42,880 --> 00:14:55,120
down so CI 1.0 it's this is a big

00:14:50,860 --> 00:14:56,860
milestone but you know every journey

00:14:55,120 --> 00:14:59,350
starts with the first step right well

00:14:56,860 --> 00:15:01,480
that was zero point zero point one but

00:14:59,350 --> 00:15:03,550
you know at one point oh we we we

00:15:01,480 --> 00:15:07,180
finalized our quest of getting the

00:15:03,550 --> 00:15:08,820
milestone and we leveled up and but the

00:15:07,180 --> 00:15:12,700
truth is this is just the beginning

00:15:08,820 --> 00:15:16,089
there is so much more to do and so much

00:15:12,700 --> 00:15:18,760
more to come for example in one point

00:15:16,089 --> 00:15:20,170
we're going to have a 1.1 version at

00:15:18,760 --> 00:15:22,450
some point we're not just going to fix

00:15:20,170 --> 00:15:24,399
stuff we're going to improve it for you

00:15:22,450 --> 00:15:27,100
for all of you and we're going to keep

00:15:24,399 --> 00:15:28,510
the mantra that it just works this is

00:15:27,100 --> 00:15:30,760
really something I want to stress out

00:15:28,510 --> 00:15:33,130
because you guys should not have to

00:15:30,760 --> 00:15:35,950
worry how it works but you can be

00:15:33,130 --> 00:15:39,430
curious it should work for you whatever

00:15:35,950 --> 00:15:41,290
you try to do one of the first thing

00:15:39,430 --> 00:15:46,120
that we're going to focus on the one

00:15:41,290 --> 00:15:49,899
point X 1.1 1.2 1.3 I can promise 1.3

00:15:46,120 --> 00:15:51,790
but is working on the size so in our

00:15:49,899 --> 00:15:54,070
internal test we've been able to reduce

00:15:51,790 --> 00:15:55,839
the size of your bundles with more

00:15:54,070 --> 00:15:59,980
aggressive tree shaking in more

00:15:55,839 --> 00:16:01,720
aggressive algorithms by 20% we can't

00:15:59,980 --> 00:16:04,180
promise anything for your apps of course

00:16:01,720 --> 00:16:05,950
but this is a good metrics and every

00:16:04,180 --> 00:16:07,660
single advantage there will come

00:16:05,950 --> 00:16:10,930
directly to you without you having to do

00:16:07,660 --> 00:16:14,860
anything another thing that we want to

00:16:10,930 --> 00:16:17,529
do is right now development mode using

00:16:14,860 --> 00:16:20,140
JIT takes you know a small amount of

00:16:17,529 --> 00:16:23,620
time to build and rebuild and äôt is

00:16:20,140 --> 00:16:25,899
really really slower so we want to get

00:16:23,620 --> 00:16:28,660
that into like more of a manageable size

00:16:25,899 --> 00:16:31,000
so that you guys can run äôt even in

00:16:28,660 --> 00:16:33,610
development mode all the time we want to

00:16:31,000 --> 00:16:35,350
get to the point where you guys might

00:16:33,610 --> 00:16:37,329
notice the difference but will not mine

00:16:35,350 --> 00:16:38,470
about the difference between the two so

00:16:37,329 --> 00:16:40,600
that you can run your code your

00:16:38,470 --> 00:16:42,310
development in a ot and reduce the

00:16:40,600 --> 00:16:46,750
number of bugs when you actually release

00:16:42,310 --> 00:16:48,430
it to the public and the last thing that

00:16:46,750 --> 00:16:53,830
we want to work on in

00:16:48,430 --> 00:16:57,250
error messaging there is a lot of errors

00:16:53,830 --> 00:17:01,720
that could be better shown better to the

00:16:57,250 --> 00:17:04,270
user with actionable messages and direct

00:17:01,720 --> 00:17:05,650
direct message on what you need to do to

00:17:04,270 --> 00:17:08,140
solve these errors and right now we

00:17:05,650 --> 00:17:09,550
don't do as well as we could so we're

00:17:08,140 --> 00:17:16,060
going to improve on that as well

00:17:09,550 --> 00:17:21,120
and there's my via CLI 2.0 actually see

00:17:16,060 --> 00:17:25,050
them kind of said so that then still

00:17:21,120 --> 00:17:27,070
Steven Kenneth mentioned it this morning

00:17:25,050 --> 00:17:29,860
that it's going to be more like the

00:17:27,070 --> 00:17:32,680
worse than SDK where we're going to

00:17:29,860 --> 00:17:34,420
support like plugins that you guys that

00:17:32,680 --> 00:17:36,700
and your guys and your friends and your

00:17:34,420 --> 00:17:39,120
moms can actually develop for the CLI

00:17:36,700 --> 00:17:41,110
and we're going to support libraries

00:17:39,120 --> 00:17:43,060
it's going to know it's going to be a

00:17:41,110 --> 00:17:45,940
set of libraries that can be reused by

00:17:43,060 --> 00:17:49,630
other tools like IDs or even other still

00:17:45,940 --> 00:17:51,760
eyes and it's going to allow you to add

00:17:49,630 --> 00:17:53,830
like custom templates custom build

00:17:51,760 --> 00:17:56,740
systems if you don't like what we use

00:17:53,830 --> 00:17:58,420
you can you could replace it custom test

00:17:56,740 --> 00:18:00,490
frameworks if you don't like what we use

00:17:58,420 --> 00:18:05,410
for example we want to give you more

00:18:00,490 --> 00:18:07,330
options and let you pick and match what

00:18:05,410 --> 00:18:11,020
you want to do what you actually want to

00:18:07,330 --> 00:18:14,230
do and we want to keep it the same small

00:18:11,020 --> 00:18:16,350
interface really that we need you to

00:18:14,230 --> 00:18:19,750
understand that if you use a CLI today

00:18:16,350 --> 00:18:21,610
see light 2.0 will feel familiar if you

00:18:19,750 --> 00:18:23,350
keep using the CLI but it's going to

00:18:21,610 --> 00:18:24,970
integrate better with everything else

00:18:23,350 --> 00:18:28,150
that you use and that's really the

00:18:24,970 --> 00:18:31,290
important part so we want to keep the

00:18:28,150 --> 00:18:35,080
same small tool the same small interface

00:18:31,290 --> 00:18:38,350
but dream even bigger we want to go

00:18:35,080 --> 00:18:44,650
beyond what we can do right now and work

00:18:38,350 --> 00:18:47,410
it up from there a little addicted big

00:18:44,650 --> 00:18:50,160
thanks to all the team all the

00:18:47,410 --> 00:18:50,160
contributors to

00:18:50,640 --> 00:19:05,840
I just want to say this is 12 there is

00:19:02,820 --> 00:19:08,460
like I don't know hundreds of people

00:19:05,840 --> 00:19:12,120
contributed by creating issues by

00:19:08,460 --> 00:19:14,460
creating PRS by just talking to us on

00:19:12,120 --> 00:19:17,429
getter on Stack Overflow each other as

00:19:14,460 --> 00:19:20,809
you're all of you I've been doing really

00:19:17,429 --> 00:19:24,270
great we wouldn't be here without you

00:19:20,809 --> 00:19:27,919
personally and so I want also thanks all

00:19:24,270 --> 00:19:30,210
all of you all our users and just

00:19:27,919 --> 00:19:33,530
remember the best cure for JavaScript

00:19:30,210 --> 00:19:33,530
fatigue is to have a nap

00:19:33,810 --> 00:19:41,190

YouTube URL: https://www.youtube.com/watch?v=f9hhzDZXWPM


