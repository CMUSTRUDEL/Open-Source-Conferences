Title: The Memory Leak Brain Drain - JON BOYD
Publication date: 2017-04-30
Playlist: ng-conf 2017 Advanced Talks
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,270 --> 00:00:03,669
[Applause]

00:00:03,830 --> 00:00:09,679
hi I'm John I'm going to give you a

00:00:06,150 --> 00:00:12,870
quick talk on memory leaks I I'm a

00:00:09,679 --> 00:00:14,790
developer from Canada I'm based out of

00:00:12,870 --> 00:00:17,190
Kelowna at a little startup there I've

00:00:14,790 --> 00:00:21,180
been working with angular since the very

00:00:17,190 --> 00:00:24,930
first alpha releases so what is the

00:00:21,180 --> 00:00:28,140
memory leak at its most basic level it's

00:00:24,930 --> 00:00:30,210
just memory that is know what like your

00:00:28,140 --> 00:00:31,769
application requires the memory it's no

00:00:30,210 --> 00:00:33,630
longer needed and it's not correctly

00:00:31,769 --> 00:00:35,399
released back to your operating system

00:00:33,630 --> 00:00:38,399
and why do you need to care as a

00:00:35,399 --> 00:00:40,590
developer well memory leaks can lead to

00:00:38,399 --> 00:00:41,940
like significant performance issues

00:00:40,590 --> 00:00:43,320
you're going to have users starting out

00:00:41,940 --> 00:00:45,600
using laughs it's going to be running

00:00:43,320 --> 00:00:46,680
great and after time that performance is

00:00:45,600 --> 00:00:49,410
going to degrade and the user experience

00:00:46,680 --> 00:00:50,910
will get worse you could crash their

00:00:49,410 --> 00:00:52,260
browser in the worst case you might

00:00:50,910 --> 00:00:54,780
crash their tab in the middle of a

00:00:52,260 --> 00:00:56,250
critical task and those users probably

00:00:54,780 --> 00:00:59,039
pay for your salary so it's important to

00:00:56,250 --> 00:01:01,410
keep them happy so in my mind there's

00:00:59,039 --> 00:01:03,000
two types of memory leaks there's the

00:01:01,410 --> 00:01:03,510
contrived examples you see in every

00:01:03,000 --> 00:01:05,040
tutorial

00:01:03,510 --> 00:01:07,590
they don't really apply to what you

00:01:05,040 --> 00:01:09,150
actually find the real world and they're

00:01:07,590 --> 00:01:10,500
nice example of how to find a memory

00:01:09,150 --> 00:01:12,119
leak but they don't help you solve it

00:01:10,500 --> 00:01:13,590
and there's the real ones the ones

00:01:12,119 --> 00:01:15,360
you're going to find in your giant

00:01:13,590 --> 00:01:17,250
enterprise application you're working on

00:01:15,360 --> 00:01:21,450
that those examples didn't help you

00:01:17,250 --> 00:01:23,640
solve it all so with that said there are

00:01:21,450 --> 00:01:24,720
a couple easy to solve memory leaks that

00:01:23,640 --> 00:01:26,280
you're going to see in angular

00:01:24,720 --> 00:01:27,750
applications the first thing you should

00:01:26,280 --> 00:01:29,280
always do is just turn off the console

00:01:27,750 --> 00:01:30,960
API when you're trying to solve the

00:01:29,280 --> 00:01:31,290
memory leak when you're trying to track

00:01:30,960 --> 00:01:33,270
it down

00:01:31,290 --> 00:01:36,000
now basically anything you log to the

00:01:33,270 --> 00:01:38,460
console is going to stay in memory the

00:01:36,000 --> 00:01:39,930
second is long-lived observables so

00:01:38,460 --> 00:01:43,290
anything you subscribe to just make sure

00:01:39,930 --> 00:01:45,119
you unsubscribe as a general rule so

00:01:43,290 --> 00:01:46,590
what are the steps to handle a real leak

00:01:45,119 --> 00:01:48,420
when your boss comes to you the first

00:01:46,590 --> 00:01:49,350
thing I did freaked out a little bit

00:01:48,420 --> 00:01:51,659
because I don't really know what he's

00:01:49,350 --> 00:01:52,829
talking about I went to googled what is

00:01:51,659 --> 00:01:54,149
in memory leak so I can answer his

00:01:52,829 --> 00:01:56,490
question when he came back in an hour

00:01:54,149 --> 00:01:58,530
and then I just opened the chrome dev

00:01:56,490 --> 00:02:00,240
tools that's really all you need to do

00:01:58,530 --> 00:02:02,759
that's the only tool you should really

00:02:00,240 --> 00:02:03,829
need solve the issue of course if the

00:02:02,759 --> 00:02:06,090
leaks happening in a different browser

00:02:03,829 --> 00:02:07,409
you might have to use the tools in the

00:02:06,090 --> 00:02:09,119
different browser but the chrome dev

00:02:07,409 --> 00:02:11,640
tools are the best in my opinion

00:02:09,119 --> 00:02:13,020
so you open them up and the first thing

00:02:11,640 --> 00:02:16,920
I would recommend using is what

00:02:13,020 --> 00:02:18,030
timeline view gives you great insights

00:02:16,920 --> 00:02:20,780
into what's happening in your

00:02:18,030 --> 00:02:23,340
application for overall performance and

00:02:20,780 --> 00:02:25,350
memory specifically it will let you know

00:02:23,340 --> 00:02:28,530
is the memory leaking new JavaScript

00:02:25,350 --> 00:02:30,330
heap if you have Dom nodes leaking is it

00:02:28,530 --> 00:02:31,980
your event listeners when's the leak

00:02:30,330 --> 00:02:33,780
happening as you click through was it 5

00:02:31,980 --> 00:02:36,180
seconds in 10 seconds and maybe you can

00:02:33,780 --> 00:02:39,090
roughly isolate it to some certain event

00:02:36,180 --> 00:02:41,340
and how much memory is being leaked does

00:02:39,090 --> 00:02:42,810
it really tiny or is it gigantic are you

00:02:41,340 --> 00:02:47,490
going to crash your users app in 10

00:02:42,810 --> 00:02:49,050
seconds that wouldn't be great so after

00:02:47,490 --> 00:02:50,730
that if you need a more detailed view

00:02:49,050 --> 00:02:53,520
you can jump into the allocation

00:02:50,730 --> 00:02:55,410
timeline and in here you can break it

00:02:53,520 --> 00:02:56,940
down and you can look at specific chunks

00:02:55,410 --> 00:02:58,830
of your application and see exactly what

00:02:56,940 --> 00:03:02,880
memory was allocated there what memory

00:02:58,830 --> 00:03:04,680
was retained it's really going to help

00:03:02,880 --> 00:03:06,000
you notice if there's a certain view or

00:03:04,680 --> 00:03:07,590
screen in your application that's

00:03:06,000 --> 00:03:09,030
retaining a memory maybe a certain

00:03:07,590 --> 00:03:10,740
button you're clicking you'll be able to

00:03:09,030 --> 00:03:13,530
isolate it you might even see the exact

00:03:10,740 --> 00:03:16,020
component listed and that's really that

00:03:13,530 --> 00:03:17,430
would be fantastic and then if you need

00:03:16,020 --> 00:03:19,440
even more insights you can jump into

00:03:17,430 --> 00:03:20,850
heap snapshots and that's going to give

00:03:19,440 --> 00:03:22,590
you a snapshot of all the memory being

00:03:20,850 --> 00:03:27,120
used in your application at any specific

00:03:22,590 --> 00:03:28,500
time so outside of those tools what are

00:03:27,120 --> 00:03:30,720
you looking for or what are you even

00:03:28,500 --> 00:03:32,250
looking for in those tools you want to

00:03:30,720 --> 00:03:34,380
know what actions are causing the leak

00:03:32,250 --> 00:03:36,750
so is it constantly happening is it just

00:03:34,380 --> 00:03:38,700
happening on navigation is it happening

00:03:36,750 --> 00:03:40,230
on a certain event firing does it happen

00:03:38,700 --> 00:03:41,610
everywhere in your browser or only

00:03:40,230 --> 00:03:43,680
certain screen or everywhere in your

00:03:41,610 --> 00:03:45,480
only certain screen and does it happen

00:03:43,680 --> 00:03:48,390
in all browsers or maybe it's specific

00:03:45,480 --> 00:03:50,040
to one browser you want to test like a

00:03:48,390 --> 00:03:51,450
real user you're going to be sitting

00:03:50,040 --> 00:03:53,760
there in your development environment

00:03:51,450 --> 00:03:56,190
web packs rebuilding your application

00:03:53,760 --> 00:03:57,390
every minute but your real users are

00:03:56,190 --> 00:03:58,980
sitting on their office and they haven't

00:03:57,390 --> 00:04:00,300
turned their computer off for 30 days

00:03:58,980 --> 00:04:02,310
and they haven't closed the tab either

00:04:00,300 --> 00:04:04,950
so even the smallest memory leak can

00:04:02,310 --> 00:04:06,300
become an issue for them you can start

00:04:04,950 --> 00:04:08,340
removing code if you think there's

00:04:06,300 --> 00:04:10,080
anything that might be problematic if

00:04:08,340 --> 00:04:11,640
there's a certain third-party library

00:04:10,080 --> 00:04:15,239
maybe you think is problematic or a

00:04:11,640 --> 00:04:16,859
certain directive or component and if

00:04:15,239 --> 00:04:18,930
you can't remove whatever that is maybe

00:04:16,859 --> 00:04:21,780
it's a integral third party library

00:04:18,930 --> 00:04:23,220
build an app using just that or using

00:04:21,780 --> 00:04:24,630
what you think are the problem elements

00:04:23,220 --> 00:04:28,410
and see if the leak first

00:04:24,630 --> 00:04:30,210
they're still can't figure it out you

00:04:28,410 --> 00:04:31,950
just give up or you could come to my

00:04:30,210 --> 00:04:35,040
workshop tomorrow go into more detail

00:04:31,950 --> 00:04:36,630
and upgrade to angular 4 I would say out

00:04:35,040 --> 00:04:38,370
of everything I've worked with it really

00:04:36,630 --> 00:04:39,500
stops you from making the mistakes that

00:04:38,370 --> 00:04:42,000
cause memory leaks

00:04:39,500 --> 00:04:44,100
thanks for coming my talk if you want to

00:04:42,000 --> 00:04:44,760
see the slides and go there and my mom

00:04:44,100 --> 00:04:49,340
says hi

00:04:44,760 --> 00:04:49,340

YouTube URL: https://www.youtube.com/watch?v=cWHR-Eqe8q4


