Title: Keeping the Sand Out of Your Eyes  No Sandbox, No Problem - TIM EHAT
Publication date: 2017-04-30
Playlist: ng-conf 2017 Advanced Talks
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,000 --> 00:00:05,609
[Applause]

00:00:01,879 --> 00:00:07,529
alright so yeah thank you for letting me

00:00:05,609 --> 00:00:09,480
be here I had no idea what's gonna fall

00:00:07,529 --> 00:00:13,769
in g rap until I think a couple days ago

00:00:09,480 --> 00:00:16,109
and Wow no pressure right so I don't

00:00:13,769 --> 00:00:18,990
talk to you about something that's not

00:00:16,109 --> 00:00:22,050
wrapped but hopefully is very pertinent

00:00:18,990 --> 00:00:24,060
to you okay so first a little bit about

00:00:22,050 --> 00:00:25,949
me okay the intro just said a little bit

00:00:24,060 --> 00:00:29,369
I'm second lead over performance at domo

00:00:25,949 --> 00:00:30,599
what that means is I go and I try and

00:00:29,369 --> 00:00:33,360
make sure that dough moves fast whether

00:00:30,599 --> 00:00:35,850
it's our iOS app Android app desktop web

00:00:33,360 --> 00:00:37,260
mobile web you know from the UI layer

00:00:35,850 --> 00:00:39,149
all the way down into the depths of our

00:00:37,260 --> 00:00:40,620
back-end systems I'm trying to help

00:00:39,149 --> 00:00:41,760
debug it make sure that everyone's on

00:00:40,620 --> 00:00:44,129
top of that okay so that's what I do

00:00:41,760 --> 00:00:46,350
that's during the day but I also really

00:00:44,129 --> 00:00:47,789
like sometimes I get a little bored I go

00:00:46,350 --> 00:00:49,770
and I look for something that I can

00:00:47,789 --> 00:00:52,920
break right so I try and go find a

00:00:49,770 --> 00:00:54,539
security hole so Dave called me Timmy I

00:00:52,920 --> 00:00:57,180
don't usually go by Timmy it's usually

00:00:54,539 --> 00:00:58,859
Tim and occasionally cindy had put that

00:00:57,180 --> 00:01:00,480
together to get time hat so usually out

00:00:58,859 --> 00:01:02,190
some user name this time hat everywhere

00:01:00,480 --> 00:01:04,710
twitter has a little late on Twitter so

00:01:02,190 --> 00:01:06,450
got Tim underscore you have there when

00:01:04,710 --> 00:01:08,909
I'm not doing programming I'm hanging

00:01:06,450 --> 00:01:10,770
out with my wife and my four kids and I

00:01:08,909 --> 00:01:13,920
love those guys so grateful for them so

00:01:10,770 --> 00:01:17,549
I'm proud dad alright so what I'm going

00:01:13,920 --> 00:01:19,950
to talk about in New json' dot six the

00:01:17,549 --> 00:01:21,659
sandbox the angular expression sandbox

00:01:19,950 --> 00:01:23,549
is removed ok so we talk about what that

00:01:21,659 --> 00:01:25,170
means is that it's true vulnerability

00:01:23,549 --> 00:01:26,909
for you what do you need to know what do

00:01:25,170 --> 00:01:27,780
you need to do okay so where we're going

00:01:26,909 --> 00:01:30,299
first we're gonna have a little bit of

00:01:27,780 --> 00:01:31,740
review of what injection is reviewing

00:01:30,299 --> 00:01:33,720
the other expressions few details about

00:01:31,740 --> 00:01:36,180
that talk about what the sandbox was

00:01:33,720 --> 00:01:38,070
what is doing for you talk about why it

00:01:36,180 --> 00:01:39,540
was removed and then what do you need to

00:01:38,070 --> 00:01:41,880
do to recognize vulnerabilities within

00:01:39,540 --> 00:01:42,840
your own app and how do you fix those

00:01:41,880 --> 00:01:44,310
vulnerabilities and then we have a

00:01:42,840 --> 00:01:47,369
couple items food for thought at the NK

00:01:44,310 --> 00:01:50,250
so injection what does injection

00:01:47,369 --> 00:01:52,950
injection is when you let your users

00:01:50,250 --> 00:01:54,420
then advertently run code on your system

00:01:52,950 --> 00:01:56,610
okay they're on your back end or on your

00:01:54,420 --> 00:01:58,290
client side code you don't want your

00:01:56,610 --> 00:02:00,450
users to finding the code that you run

00:01:58,290 --> 00:02:02,700
right that runs on your site usually

00:02:00,450 --> 00:02:05,159
this happens because you have something

00:02:02,700 --> 00:02:07,500
that's yours right and you can catenate

00:02:05,159 --> 00:02:09,350
in something that's not yours and that

00:02:07,500 --> 00:02:13,640
results in bad stuff happens okay

00:02:09,350 --> 00:02:16,490
so I Justin user content is bad or even

00:02:13,640 --> 00:02:18,230
just more generally the potential of

00:02:16,490 --> 00:02:20,660
executing user content within your app

00:02:18,230 --> 00:02:21,950
is bad right you don't want your app

00:02:20,660 --> 00:02:23,630
executing code that you don't have

00:02:21,950 --> 00:02:25,550
control over that's that's not a good

00:02:23,630 --> 00:02:28,100
design pattern right so what does

00:02:25,550 --> 00:02:31,370
injection look like looks like little

00:02:28,100 --> 00:02:33,170
Bobby drop tables okay classic XKCD of

00:02:31,370 --> 00:02:35,630
course the joke there is sequel

00:02:33,170 --> 00:02:37,220
injection this is your back end code and

00:02:35,630 --> 00:02:39,920
you just concatenate in the username

00:02:37,220 --> 00:02:42,080
here and you're not using prepared

00:02:39,920 --> 00:02:45,200
statements or otherwise making that that

00:02:42,080 --> 00:02:47,420
text safe mom comes long moons or some

00:02:45,200 --> 00:02:49,430
little Bobby drop tables and suddenly

00:02:47,420 --> 00:02:52,280
this is your sequel statement right and

00:02:49,430 --> 00:02:53,950
of course dropping table students as bad

00:02:52,280 --> 00:02:57,800
stuff okay if you don't want to do that

00:02:53,950 --> 00:03:01,190
so in HTML maybe learned about it back

00:02:57,800 --> 00:03:02,620
when you're doing PHP see this PHP maybe

00:03:01,190 --> 00:03:04,880
you just echoed the post out only then

00:03:02,620 --> 00:03:06,590
HTML escape that right and so when your

00:03:04,880 --> 00:03:10,100
users came along decided that their post

00:03:06,590 --> 00:03:11,630
title is going to be this thing and now

00:03:10,100 --> 00:03:14,480
your template or your page that comes

00:03:11,630 --> 00:03:17,540
out the other end is this and you don't

00:03:14,480 --> 00:03:18,740
want that okay so that's the basics

00:03:17,540 --> 00:03:21,440
that's kind of the idea of injection

00:03:18,740 --> 00:03:22,340
right you might be thinking okay well my

00:03:21,440 --> 00:03:24,830
app doesn't really have anything

00:03:22,340 --> 00:03:26,000
vulnerable or anything or valuable

00:03:24,830 --> 00:03:28,130
anything that someone's going to want to

00:03:26,000 --> 00:03:29,630
steal or maybe I'm one of those ninety

00:03:28,130 --> 00:03:30,920
percent is what I think we heard this

00:03:29,630 --> 00:03:32,300
morning ninety percent of apps that's

00:03:30,920 --> 00:03:33,650
behind the firewall it's just an

00:03:32,300 --> 00:03:35,510
internal tool no one else is really

00:03:33,650 --> 00:03:37,190
using my app it's not public don't

00:03:35,510 --> 00:03:39,110
really have to worry about it well just

00:03:37,190 --> 00:03:41,900
remember that your app is part of an

00:03:39,110 --> 00:03:43,310
ecosystem right so in the last couple

00:03:41,900 --> 00:03:45,680
weeks have been a couple vulnerabilities

00:03:43,310 --> 00:03:47,600
reported in the last pass extension okay

00:03:45,680 --> 00:03:48,350
I use laptops maybe I shouldn't tell you

00:03:47,600 --> 00:03:52,420
that because you're all going to try and

00:03:48,350 --> 00:03:54,080
hack me now right but a lot of

00:03:52,420 --> 00:03:55,940
vulnerabilities these days are

00:03:54,080 --> 00:03:58,130
combinations of multiple weaknesses

00:03:55,940 --> 00:04:00,770
across an entire system that you combine

00:03:58,130 --> 00:04:02,480
those together and then you can you know

00:04:00,770 --> 00:04:04,190
delivery malicious payload or do what

00:04:02,480 --> 00:04:06,440
you want to do if you're an attacker so

00:04:04,190 --> 00:04:08,000
your apps doesn't live in isolation when

00:04:06,440 --> 00:04:09,070
your breath when your users come and use

00:04:08,000 --> 00:04:11,420
your app you know within your

00:04:09,070 --> 00:04:12,590
organization they have razors extensions

00:04:11,420 --> 00:04:14,750
installed so someone else in your

00:04:12,590 --> 00:04:16,730
organization wants to hack your users

00:04:14,750 --> 00:04:18,140
you don't want to be that weak link

00:04:16,730 --> 00:04:19,480
right even if it's in combination with

00:04:18,140 --> 00:04:22,180
something else

00:04:19,480 --> 00:04:23,800
so second piece review of angular

00:04:22,180 --> 00:04:25,360
expressions what are angular expressions

00:04:23,800 --> 00:04:27,580
if you like me you learned in your

00:04:25,360 --> 00:04:29,470
expressions from Davey itÃ­s all right

00:04:27,580 --> 00:04:32,020
and he taught you that you could do this

00:04:29,470 --> 00:04:33,640
and you put that in your template to

00:04:32,020 --> 00:04:36,640
curly braces on either side with one

00:04:33,640 --> 00:04:38,050
plus one and in your UI you get to and

00:04:36,640 --> 00:04:39,700
you're like hey that's really cool okay

00:04:38,050 --> 00:04:41,470
then the very next thing you learned is

00:04:39,700 --> 00:04:44,920
that you could access items within the

00:04:41,470 --> 00:04:46,570
scope so you have username and maybe on

00:04:44,920 --> 00:04:48,460
your scope you have a user object with

00:04:46,570 --> 00:04:50,410
attribute name and it's time hack

00:04:48,460 --> 00:04:52,510
because you're me or you're not mean I

00:04:50,410 --> 00:04:54,910
don't know and you get your username on

00:04:52,510 --> 00:04:56,890
the screen right maybe in the different

00:04:54,910 --> 00:04:58,060
context when your users is to decide to

00:04:56,890 --> 00:05:00,700
do something that's a little bit more

00:04:58,060 --> 00:05:02,380
malicious not what you want them to do

00:05:00,700 --> 00:05:03,550
right they've come in and they decided

00:05:02,380 --> 00:05:05,860
that they want to set their name to a

00:05:03,550 --> 00:05:08,560
script tags so what happens in that case

00:05:05,860 --> 00:05:11,740
in your UI you're going to get this

00:05:08,560 --> 00:05:13,840
right that is to say you're going to get

00:05:11,740 --> 00:05:15,610
this right it's going to be HTML empty

00:05:13,840 --> 00:05:18,160
encoded and you're just going to do that

00:05:15,610 --> 00:05:19,720
for you and you can get some ugly text

00:05:18,160 --> 00:05:21,520
on the screen but you're not going to

00:05:19,720 --> 00:05:23,940
execute user code okay so that's how the

00:05:21,520 --> 00:05:27,700
expressions work you're going to be good

00:05:23,940 --> 00:05:30,130
okay the expression sandbox what was the

00:05:27,700 --> 00:05:31,720
expression sandbox ok so that's what I'm

00:05:30,130 --> 00:05:33,640
talking about that's gone as of

00:05:31,720 --> 00:05:35,830
angularjs one dot six what does that

00:05:33,640 --> 00:05:37,810
mean for you you're maintaining an old

00:05:35,830 --> 00:05:40,750
application or you're migrating the

00:05:37,810 --> 00:05:42,490
angular or your RT on angular you know

00:05:40,750 --> 00:05:45,520
it's the same idea of template injection

00:05:42,490 --> 00:05:47,830
okay so let's go go through the sandbox

00:05:45,520 --> 00:05:49,360
was the sandbox limited what you could

00:05:47,830 --> 00:05:51,190
do with in an expression okay so you

00:05:49,360 --> 00:05:54,310
couldn't reference the prototype of an

00:05:51,190 --> 00:05:56,320
object she did that you get an error you

00:05:54,310 --> 00:05:58,000
can reference items on the global scope

00:05:56,320 --> 00:06:00,400
okay the window object or things you may

00:05:58,000 --> 00:06:02,380
have hung off of that to go read the

00:06:00,400 --> 00:06:04,060
blog post that the team put out when

00:06:02,380 --> 00:06:06,610
they announced the removal of a sandbox

00:06:04,060 --> 00:06:08,440
in one dot six you'll read you know they

00:06:06,610 --> 00:06:10,810
explained that the entire concept of the

00:06:08,440 --> 00:06:13,720
sandboxes to help you as an engineer so

00:06:10,810 --> 00:06:15,520
to help you write clean code testable

00:06:13,720 --> 00:06:17,380
code code that you can maintain it

00:06:15,520 --> 00:06:19,600
wasn't meant to be a security feature

00:06:17,380 --> 00:06:21,760
the fact that an expression could

00:06:19,600 --> 00:06:23,920
potentially do something dangerous well

00:06:21,760 --> 00:06:26,260
that's code yeah if you let someone else

00:06:23,920 --> 00:06:27,760
click code on your website that's your

00:06:26,260 --> 00:06:30,130
problem to begin with it's not that the

00:06:27,760 --> 00:06:32,320
sandbox maybe had some vulnerabilities

00:06:30,130 --> 00:06:33,310
or ways for people that were really

00:06:32,320 --> 00:06:35,860
creative to get out of

00:06:33,310 --> 00:06:38,650
sandbox ok so what your 1 dot six no

00:06:35,860 --> 00:06:40,540
more sandbox and use this meme again

00:06:38,650 --> 00:06:42,370
today you might think hey cool now i can

00:06:40,540 --> 00:06:44,080
access policies i can touch prototypes

00:06:42,370 --> 00:06:46,060
and global scope normal stuff but

00:06:44,080 --> 00:06:48,250
porcelain does not simply ignore best

00:06:46,060 --> 00:06:51,340
practices and expect their app to work

00:06:48,250 --> 00:06:53,560
really well right you maintain so ok so

00:06:51,340 --> 00:06:55,480
what happened white why did we get to

00:06:53,560 --> 00:06:57,400
this point why is the sandbox why was it

00:06:55,480 --> 00:06:58,990
removed in one dot six so creative

00:06:57,400 --> 00:07:02,680
people came along and they found out

00:06:58,990 --> 00:07:04,720
that yeah there's the sandbox but i can

00:07:02,680 --> 00:07:07,180
do these things and get out of that

00:07:04,720 --> 00:07:08,950
sandbox and so these were probably

00:07:07,180 --> 00:07:10,900
reported to security vulnerabilities and

00:07:08,950 --> 00:07:12,640
angular and you know everyone was

00:07:10,900 --> 00:07:14,230
looking at this on the team you know as

00:07:12,640 --> 00:07:16,840
these things reported would put patches

00:07:14,230 --> 00:07:18,940
in and figure out okay yeah let's make

00:07:16,840 --> 00:07:21,070
the sandbox little stronger fix that one

00:07:18,940 --> 00:07:22,300
fix that one and these strings kept

00:07:21,070 --> 00:07:23,890
coming through and they get more and

00:07:22,300 --> 00:07:25,870
more complex for each new version of

00:07:23,890 --> 00:07:27,700
angular right and patch and patch and

00:07:25,870 --> 00:07:31,080
patch eventually you look at one of

00:07:27,700 --> 00:07:33,160
these strings for one top five dot nine

00:07:31,080 --> 00:07:35,110
you know in a couple patch versions

00:07:33,160 --> 00:07:36,520
after that like imagine you're on the

00:07:35,110 --> 00:07:38,050
angular team and this comes through as a

00:07:36,520 --> 00:07:39,430
security vulnerability you know someone

00:07:38,050 --> 00:07:41,710
wants to tell you that it's a security

00:07:39,430 --> 00:07:43,270
vulnerability and your framework you

00:07:41,710 --> 00:07:45,130
have to understand what that's actually

00:07:43,270 --> 00:07:47,200
doing i look at this raw i have no clue

00:07:45,130 --> 00:07:49,390
right you have to understand what's

00:07:47,200 --> 00:07:51,220
doing you have to then figure out how to

00:07:49,390 --> 00:07:52,960
fix that and make the sandbox stronger

00:07:51,220 --> 00:07:55,450
and do that without breaking the world

00:07:52,960 --> 00:07:57,310
team just said look it's not security

00:07:55,450 --> 00:07:59,230
it's you know this wasn't meant to

00:07:57,310 --> 00:08:01,090
protect your app from injection this was

00:07:59,230 --> 00:08:02,800
going to help use engineers no more

00:08:01,090 --> 00:08:04,720
patches no more sandbox orden get rid of

00:08:02,800 --> 00:08:07,000
it so if you're you know if you're

00:08:04,720 --> 00:08:08,470
paying attention maybe you felt like the

00:08:07,000 --> 00:08:11,050
world was on fire with this announcement

00:08:08,470 --> 00:08:12,670
read the world not on fire or if it is

00:08:11,050 --> 00:08:15,190
on fire for other reasons right not give

00:08:12,670 --> 00:08:17,470
the hangar sandbox removal so maybe at

00:08:15,190 --> 00:08:19,240
least you felt like hey my apps on fire

00:08:17,470 --> 00:08:20,410
and i might feel like my apps on fire

00:08:19,240 --> 00:08:22,180
because hey angular's got all these

00:08:20,410 --> 00:08:24,580
exploits that people are posting online

00:08:22,180 --> 00:08:27,280
but that's not actually the case okay

00:08:24,580 --> 00:08:29,920
the real problem was that you're letting

00:08:27,280 --> 00:08:32,250
users to find things within your

00:08:29,920 --> 00:08:34,240
templates okay if you have this problem

00:08:32,250 --> 00:08:36,010
we're going to go over this i'm help you

00:08:34,240 --> 00:08:38,230
recognize that help you fix that k so

00:08:36,010 --> 00:08:41,500
that's where your fire would be as if

00:08:38,230 --> 00:08:44,039
your users or someone else is able to

00:08:41,500 --> 00:08:47,070
define an expression on

00:08:44,039 --> 00:08:48,420
your angular templates okay so what does

00:08:47,070 --> 00:08:50,370
an angular template injection look like

00:08:48,420 --> 00:08:53,279
I'm gonna give you two patterns there's

00:08:50,370 --> 00:08:56,759
the first one okay if you're using so

00:08:53,279 --> 00:08:58,829
this is an angularjs example so you have

00:08:56,759 --> 00:09:00,089
dollar sign compile and here's your

00:08:58,829 --> 00:09:03,990
template yeah let's string your

00:09:00,089 --> 00:09:06,420
concatenate in item name okay that

00:09:03,990 --> 00:09:07,949
probably knows who you probably look

00:09:06,420 --> 00:09:11,670
that immediately say hey that's not

00:09:07,949 --> 00:09:15,449
being escaped okay what's this let's

00:09:11,670 --> 00:09:17,279
escape item name well what happens to an

00:09:15,449 --> 00:09:19,769
expression of your user sets their name

00:09:17,279 --> 00:09:21,329
to neither expression that's just going

00:09:19,769 --> 00:09:24,110
to come through the curly braces aren't

00:09:21,329 --> 00:09:25,829
special HTML right so that expression

00:09:24,110 --> 00:09:29,220
potentially just going to flow right

00:09:25,829 --> 00:09:31,259
through your escape logic okay then give

00:09:29,220 --> 00:09:32,339
you another example the man will be

00:09:31,259 --> 00:09:34,860
building your angular template

00:09:32,339 --> 00:09:37,620
server-side right best practices don't

00:09:34,860 --> 00:09:40,170
do this okay so in this example I have

00:09:37,620 --> 00:09:42,990
my body tag at the ng upon so I'm gonna

00:09:40,170 --> 00:09:45,240
bootstrapping is around my body I've got

00:09:42,990 --> 00:09:47,040
item name my server-side templating

00:09:45,240 --> 00:09:49,170
engine is going to replace that with

00:09:47,040 --> 00:09:50,610
whatever the item name is and then later

00:09:49,170 --> 00:09:52,470
on maybe in my template I have an image

00:09:50,610 --> 00:09:55,589
with an energy source and I want to have

00:09:52,470 --> 00:09:56,970
that point to my avatar URL right so

00:09:55,589 --> 00:10:00,000
your attacker comes along and they say

00:09:56,970 --> 00:10:02,010
hey let me set item dot name to

00:10:00,000 --> 00:10:03,120
something malicious okay so I've got two

00:10:02,010 --> 00:10:05,040
different things here that look a little

00:10:03,120 --> 00:10:06,329
malicious a script tag and then this

00:10:05,040 --> 00:10:07,410
expression and you look at the

00:10:06,329 --> 00:10:10,319
expression what's it trying to do

00:10:07,410 --> 00:10:13,380
starting to set that avatar URL equal to

00:10:10,319 --> 00:10:15,180
a URL that's not under my control that's

00:10:13,380 --> 00:10:17,010
under the attackers control and then

00:10:15,180 --> 00:10:18,750
they're going to cap put into that URL

00:10:17,010 --> 00:10:21,420
the session token that they found

00:10:18,750 --> 00:10:23,430
somewhere on my root scope okay I don't

00:10:21,420 --> 00:10:24,990
want my user session tokens going out on

00:10:23,430 --> 00:10:27,389
this URL to someone else's website

00:10:24,990 --> 00:10:29,519
they're gonna log it going to attack my

00:10:27,389 --> 00:10:33,230
users I don't want that happen right so

00:10:29,519 --> 00:10:36,660
I don't got name comes along as that

00:10:33,230 --> 00:10:38,880
that gets HTML escapes by your

00:10:36,660 --> 00:10:40,500
templating engine on your server side so

00:10:38,880 --> 00:10:42,240
that's going to be output of the escape

00:10:40,500 --> 00:10:43,439
function combine that into your template

00:10:42,240 --> 00:10:46,079
here's what your template looks like now

00:10:43,439 --> 00:10:47,730
alright so I've got my h1 tag my script

00:10:46,079 --> 00:10:49,380
tag that's escaped that's fine that's

00:10:47,730 --> 00:10:52,290
going to show up as ugly text on the

00:10:49,380 --> 00:10:53,910
screen but no big deal right but look at

00:10:52,290 --> 00:10:55,040
that angular expression that came right

00:10:53,910 --> 00:10:58,730
through

00:10:55,040 --> 00:11:00,470
I have ng-app on the body there and so

00:10:58,730 --> 00:11:02,209
what's going to happen is English going

00:11:00,470 --> 00:11:03,800
to come along and it's going to do what

00:11:02,209 --> 00:11:06,350
you told it to do because you told it

00:11:03,800 --> 00:11:09,320
okay set after URL we pull do this thing

00:11:06,350 --> 00:11:10,910
and then ng source oh let me replace

00:11:09,320 --> 00:11:12,680
that but a source on the image and I'm

00:11:10,910 --> 00:11:14,019
gonna go your browser now is going to

00:11:12,680 --> 00:11:17,449
say hey I'm going to go load that image

00:11:14,019 --> 00:11:19,670
okay I didn't come up with us okay and

00:11:17,449 --> 00:11:22,639
oh one more thing real quick notice that

00:11:19,670 --> 00:11:24,800
this expression in the template that i

00:11:22,639 --> 00:11:26,630
injected into this template that's not

00:11:24,800 --> 00:11:28,220
using one of those sandbox exploits k

00:11:26,630 --> 00:11:30,769
there's no escaping the sandbox on that

00:11:28,220 --> 00:11:32,720
one k so i didn't come up with this if

00:11:30,769 --> 00:11:35,569
you want to learn more and you know get

00:11:32,720 --> 00:11:38,060
another review of that look at Ryan

00:11:35,569 --> 00:11:39,589
Hansen okay I got his website first it

00:11:38,060 --> 00:11:41,329
looks like its website went down last

00:11:39,589 --> 00:11:43,579
couple days but there's another version

00:11:41,329 --> 00:11:46,370
of his same article on this on the

00:11:43,579 --> 00:11:48,350
second link here so go google him he he

00:11:46,370 --> 00:11:51,529
demonstrated this attack against plunker

00:11:48,350 --> 00:11:53,480
okay so clunker had a vulnerability he

00:11:51,529 --> 00:11:55,699
figured out you poured it some they

00:11:53,480 --> 00:11:58,839
fixed it within an hour I think you said

00:11:55,699 --> 00:12:01,130
no really cool good job for those guys

00:11:58,839 --> 00:12:04,339
so again another look at the exploit

00:12:01,130 --> 00:12:06,889
string you look at it it's an expression

00:12:04,339 --> 00:12:08,060
it's not that the output of the

00:12:06,889 --> 00:12:10,130
expression is that it's that the

00:12:08,060 --> 00:12:12,170
expression itself is bad someone managed

00:12:10,130 --> 00:12:13,639
potentially someone could manage to put

00:12:12,170 --> 00:12:15,079
this expression into your angular

00:12:13,639 --> 00:12:18,350
templates you don't want them to be able

00:12:15,079 --> 00:12:20,329
to do that so again things dangerous

00:12:18,350 --> 00:12:22,970
expressions not the output of those

00:12:20,329 --> 00:12:25,370
expressions so if add user name is my

00:12:22,970 --> 00:12:27,560
expression my user comes along and puts

00:12:25,370 --> 00:12:29,899
their username to one of these nasty

00:12:27,560 --> 00:12:32,630
exploit strings well I think you're just

00:12:29,899 --> 00:12:34,940
going to treat that as user data and

00:12:32,630 --> 00:12:36,800
it's going to not look inside of that

00:12:34,940 --> 00:12:38,149
and trying parse it as an expression I'm

00:12:36,800 --> 00:12:40,850
just going to get this nasty thing in my

00:12:38,149 --> 00:12:42,860
browser that is ugly text but it's not

00:12:40,850 --> 00:12:46,399
executing in the browser okay just like

00:12:42,860 --> 00:12:49,579
we talked about so user name was this

00:12:46,399 --> 00:12:52,250
script tag got escaped and we were good

00:12:49,579 --> 00:12:54,139
ok so again the danger is in the

00:12:52,250 --> 00:12:56,360
expression itself if someone else has

00:12:54,139 --> 00:12:57,290
control over your templates not what

00:12:56,360 --> 00:12:59,509
comes out the other end of your

00:12:57,290 --> 00:13:02,019
expressions okay so that leads us to a

00:12:59,509 --> 00:13:04,579
guideline number one I lifted this

00:13:02,019 --> 00:13:06,199
straight off the angularjs documentation

00:13:04,579 --> 00:13:07,600
next slide straight off the angular

00:13:06,199 --> 00:13:10,250
documentation okay

00:13:07,600 --> 00:13:12,620
don't mix servers templates with your

00:13:10,250 --> 00:13:15,380
clients templates and also don't you

00:13:12,620 --> 00:13:18,500
don't use user content when you generate

00:13:15,380 --> 00:13:22,370
templates dynamically okay so the other

00:13:18,500 --> 00:13:24,860
part if we look at the angular

00:13:22,370 --> 00:13:26,779
documentation says English templates are

00:13:24,860 --> 00:13:28,190
the same as executable code never

00:13:26,779 --> 00:13:29,990
generate template source code by

00:13:28,190 --> 00:13:31,339
concatenating user input and templates

00:13:29,990 --> 00:13:33,950
okay so these are the ideas that

00:13:31,339 --> 00:13:36,230
excusing executing user content is bad

00:13:33,950 --> 00:13:38,330
and concatenate something that's not

00:13:36,230 --> 00:13:41,150
yours or something that is yours likely

00:13:38,330 --> 00:13:43,460
going to lead to bad stuff happens okay

00:13:41,150 --> 00:13:45,200
so what do I have to do how do I fix us

00:13:43,460 --> 00:13:48,050
I think through my app and fight yeah I

00:13:45,200 --> 00:13:49,610
put ng-app right on the body tag and

00:13:48,050 --> 00:13:51,890
yeah I have a few values that my server

00:13:49,610 --> 00:13:53,089
is replacing on my server sites in

00:13:51,890 --> 00:13:55,640
plenty of what do I have to do how do I

00:13:53,089 --> 00:13:57,320
fix us okay so a couple options here

00:13:55,640 --> 00:13:59,270
right you can stop mixing server and

00:13:57,320 --> 00:14:01,880
client site templates so that's our best

00:13:59,270 --> 00:14:03,620
practice stop doing those things another

00:14:01,880 --> 00:14:05,630
option you have is you can use the

00:14:03,620 --> 00:14:09,230
engine on bindable directives okay so

00:14:05,630 --> 00:14:11,540
angular Jas and also nebular so I'm

00:14:09,230 --> 00:14:14,540
taking my previous examples and show you

00:14:11,540 --> 00:14:15,800
what what that means so on this div so

00:14:14,540 --> 00:14:18,050
here's my template I'm passing the

00:14:15,800 --> 00:14:20,150
dollar compile on the divan but ng

00:14:18,050 --> 00:14:21,470
non-binding and I'm gonna make sure to

00:14:20,150 --> 00:14:23,420
escape user content right because I

00:14:21,470 --> 00:14:27,050
don't want my user to close that div tag

00:14:23,420 --> 00:14:29,089
so that now that element that has engine

00:14:27,050 --> 00:14:30,589
online valana is closed and then they

00:14:29,089 --> 00:14:32,060
can potentially put their expression

00:14:30,589 --> 00:14:34,370
right so make sure your scaping user

00:14:32,060 --> 00:14:39,080
content and use that in conjunction with

00:14:34,370 --> 00:14:41,330
Angie and unbind abul okay and then also

00:14:39,080 --> 00:14:46,070
the example on the server-side template

00:14:41,330 --> 00:14:49,760
or turn angular not angularjs use ng non

00:14:46,070 --> 00:14:51,800
mandible okay so summer I'd line number

00:14:49,760 --> 00:14:53,540
one don't let your users have control

00:14:51,800 --> 00:14:55,850
over your templates and then therefore

00:14:53,540 --> 00:14:58,279
the functions that executes was sending

00:14:55,850 --> 00:15:00,980
either another thing you need to know

00:14:58,279 --> 00:15:04,339
user content is dangerous in other

00:15:00,980 --> 00:15:06,500
places with sin a user as well okay so

00:15:04,339 --> 00:15:08,480
also from that block post or the team

00:15:06,500 --> 00:15:10,630
talks about removing the sandbox they

00:15:08,480 --> 00:15:13,580
call out all these different functions

00:15:10,630 --> 00:15:17,300
where if you passed user content is a

00:15:13,580 --> 00:15:19,670
string it could be interpreted as an

00:15:17,300 --> 00:15:21,650
expression or JavaScript code

00:15:19,670 --> 00:15:26,300
and you of course don't want that to

00:15:21,650 --> 00:15:31,100
happen so find this block dose on their

00:15:26,300 --> 00:15:32,090
block spot a page right and go look

00:15:31,100 --> 00:15:33,500
through your code look at how you're

00:15:32,090 --> 00:15:35,420
using these functions make sure that you

00:15:33,500 --> 00:15:38,060
don't have vulnerabilities where ya at

00:15:35,420 --> 00:15:40,580
meeting in user input but I've escaped

00:15:38,060 --> 00:15:41,870
it turns out that's not really enough i

00:15:40,580 --> 00:15:44,990
also have to use a sin gene online

00:15:41,870 --> 00:15:47,480
double so check for that so food for

00:15:44,990 --> 00:15:49,040
thought number one your templates might

00:15:47,480 --> 00:15:52,010
be more than you think I kind of covered

00:15:49,040 --> 00:15:54,860
this but it's the idea that i put ng app

00:15:52,010 --> 00:15:57,170
on my HTML or on my body tag right

00:15:54,860 --> 00:16:00,280
everything within my document or send my

00:15:57,170 --> 00:16:03,530
body if i do this is my angular template

00:16:00,280 --> 00:16:06,050
ok so anglers income wrongs and say ok

00:16:03,530 --> 00:16:07,640
here's where I bootstrap I'm going to

00:16:06,050 --> 00:16:09,920
scan everything within that and I'm

00:16:07,640 --> 00:16:11,450
going to find expressions and directives

00:16:09,920 --> 00:16:13,940
and things like that and I'm gonna do my

00:16:11,450 --> 00:16:16,220
job so bootstrapping good where you need

00:16:13,940 --> 00:16:17,780
it double check where you've

00:16:16,220 --> 00:16:19,640
bootstrapped it that everything was in

00:16:17,780 --> 00:16:21,410
there is under your control yes you're

00:16:19,640 --> 00:16:22,940
doing stuff on the server for

00:16:21,410 --> 00:16:24,890
server-side templating within that you

00:16:22,940 --> 00:16:28,910
got be very careful very cautious if I'm

00:16:24,890 --> 00:16:30,470
there ok Food for Thought number to the

00:16:28,910 --> 00:16:33,530
user consent might be a little bit more

00:16:30,470 --> 00:16:34,850
extensive than you think ok so I was

00:16:33,530 --> 00:16:37,790
thinking about a project I worked on a

00:16:34,850 --> 00:16:40,400
couple years ago and I thinking about

00:16:37,790 --> 00:16:42,290
the data model for one of our objects

00:16:40,400 --> 00:16:44,060
that we had and I thought about it's

00:16:42,290 --> 00:16:46,970
like yeah we have this type field and we

00:16:44,060 --> 00:16:48,860
we define what that is but you know I

00:16:46,970 --> 00:16:51,110
bet that stuff stored as a string on the

00:16:48,860 --> 00:16:53,600
server and I know the send point that I

00:16:51,110 --> 00:16:55,970
can call to update the model so maybe I

00:16:53,600 --> 00:17:01,430
can put a dangerous value in for the

00:16:55,970 --> 00:17:02,660
tight and this is old backbone code and

00:17:01,430 --> 00:17:04,280
this is what it looked like all right

00:17:02,660 --> 00:17:06,230
and so that script tag just came right

00:17:04,280 --> 00:17:07,490
through and hey I got an alert in my

00:17:06,230 --> 00:17:10,130
browser I thought oh that's not good

00:17:07,490 --> 00:17:12,080
right so things that you might not

00:17:10,130 --> 00:17:14,810
consider the User Content something that

00:17:12,080 --> 00:17:16,610
you store that you generate if you're

00:17:14,810 --> 00:17:19,880
not enforcing that on the server side

00:17:16,610 --> 00:17:21,290
it's not an enum right then you might

00:17:19,880 --> 00:17:22,850
have a vulnerability there and you might

00:17:21,290 --> 00:17:24,770
not expect that to use your content but

00:17:22,850 --> 00:17:27,080
it might actually be okay so make sure

00:17:24,770 --> 00:17:28,730
you're thinking that so that's guideline

00:17:27,080 --> 00:17:30,560
number three be suspicious okay don't

00:17:28,730 --> 00:17:31,790
take anything for granted especially if

00:17:30,560 --> 00:17:33,050
you're just working on the front end

00:17:31,790 --> 00:17:35,270
someone else is working on your back end

00:17:33,050 --> 00:17:37,400
you don't know if they've done what they

00:17:35,270 --> 00:17:39,650
should be doing in getting some strictly

00:17:37,400 --> 00:17:41,000
enforcing certain things so is you write

00:17:39,650 --> 00:17:42,710
your front-end code think about that

00:17:41,000 --> 00:17:45,170
think about what are all the different

00:17:42,710 --> 00:17:48,800
ways that this might not be what I would

00:17:45,170 --> 00:17:51,140
I expect it to be okay people that work

00:17:48,800 --> 00:17:54,080
with me know that on our dev instance of

00:17:51,140 --> 00:17:56,120
demo this was my username yeah I had an

00:17:54,080 --> 00:17:57,650
engineer reach out to me within the last

00:17:56,120 --> 00:17:59,570
year and say hey I was working on a

00:17:57,650 --> 00:18:01,910
feature and I gotten a little an alert

00:17:59,570 --> 00:18:04,640
in my browser and had your name in it

00:18:01,910 --> 00:18:05,960
and I guess this doesn't have my name it

00:18:04,640 --> 00:18:08,930
maybe I should put my name is so they

00:18:05,960 --> 00:18:10,940
know who to talk to but you know it

00:18:08,930 --> 00:18:12,770
saved them right they were able to find

00:18:10,940 --> 00:18:14,750
a vulnerability that was in the code

00:18:12,770 --> 00:18:15,830
they were actively working on and they

00:18:14,750 --> 00:18:18,200
were able to fix that before it ever

00:18:15,830 --> 00:18:21,230
went out to user so guideline number

00:18:18,200 --> 00:18:23,540
four tak your apps it's fun right I

00:18:21,230 --> 00:18:25,690
found a lot of vulnerabilities on things

00:18:23,540 --> 00:18:27,470
I've worked on don't do an introduction

00:18:25,690 --> 00:18:32,180
your employer is not going to like that

00:18:27,470 --> 00:18:33,950
a lot of problems with that k so hack

00:18:32,180 --> 00:18:35,780
your app have fun okay I think it's fun

00:18:33,950 --> 00:18:38,600
when I find these things it's kinda like

00:18:35,780 --> 00:18:40,880
hey I found something I gotta go you

00:18:38,600 --> 00:18:43,480
know be responsible talk to the parties

00:18:40,880 --> 00:18:47,990
involved but have fun I think it's fun

00:18:43,480 --> 00:18:50,510
so remember angular's on on fire sandbox

00:18:47,990 --> 00:18:52,550
is gone but the sandbox wasn't there to

00:18:50,510 --> 00:18:54,200
be security in the first place any

00:18:52,550 --> 00:18:55,790
there's not enough i just keep the

00:18:54,200 --> 00:18:58,010
injection vulnerabilities out of your

00:18:55,790 --> 00:19:00,650
apps use ng non-binding ol don't mix

00:18:58,010 --> 00:19:05,530
server and client templates and don't

00:19:00,650 --> 00:19:09,589
let your user set you on fire thank you

00:19:05,530 --> 00:19:09,589

YouTube URL: https://www.youtube.com/watch?v=Lkda4xNPi5M


