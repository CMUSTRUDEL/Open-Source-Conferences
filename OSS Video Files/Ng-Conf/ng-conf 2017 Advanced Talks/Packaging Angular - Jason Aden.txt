Title: Packaging Angular - Jason Aden
Publication date: 2017-04-30
Playlist: ng-conf 2017 Advanced Talks
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:02,230 --> 00:00:07,490
[Applause]

00:00:04,190 --> 00:00:11,969
all right thank you hello

00:00:07,490 --> 00:00:14,549
one person hello all right there we go

00:00:11,969 --> 00:00:16,590
so I'm Jason Aidan on the core team

00:00:14,549 --> 00:00:20,310
we're going to talk about packaging of

00:00:16,590 --> 00:00:23,160
angular libraries and to start this off

00:00:20,310 --> 00:00:24,630
we are an ecosystem we've got a lot of

00:00:23,160 --> 00:00:25,830
people here we're all part of the

00:00:24,630 --> 00:00:27,570
angular ecosystem we've got a lot of

00:00:25,830 --> 00:00:31,109
people on livestream a lot of people use

00:00:27,570 --> 00:00:36,149
angular and components are sort of the

00:00:31,109 --> 00:00:37,200
cornerstone of our ecosystem and what

00:00:36,149 --> 00:00:39,360
we're trying to do with an angular

00:00:37,200 --> 00:00:43,050
package format is establish a contract

00:00:39,360 --> 00:00:46,559
between the angular team library authors

00:00:43,050 --> 00:00:49,590
and application developers and if we all

00:00:46,559 --> 00:00:51,750
sort of conform to this contract our

00:00:49,590 --> 00:00:53,280
applications should be able to consume

00:00:51,750 --> 00:00:54,930
libraries easily we should be able to

00:00:53,280 --> 00:00:58,170
use the tools that we want to use and

00:00:54,930 --> 00:01:00,960
not have an issue so this recommendation

00:00:58,170 --> 00:01:04,379
attempts to support the tools being used

00:01:00,960 --> 00:01:06,840
today who uses one of these I'm sure

00:01:04,379 --> 00:01:09,750
many people use at least one right

00:01:06,840 --> 00:01:10,860
probably multiples so there's a lot of

00:01:09,750 --> 00:01:12,510
stuff out there right there's a lot of

00:01:10,860 --> 00:01:15,229
languages there's a lot of transpilers

00:01:12,510 --> 00:01:19,770
there's optimizers module loaders

00:01:15,229 --> 00:01:22,619
everything like that so let's start with

00:01:19,770 --> 00:01:25,409
what do a plication developers want out

00:01:22,619 --> 00:01:27,540
of out of a library an application

00:01:25,409 --> 00:01:33,270
developer would like to be able to npm

00:01:27,540 --> 00:01:35,610
install your library and then import

00:01:33,270 --> 00:01:38,820
your components into his application

00:01:35,610 --> 00:01:42,150
module and when he goes to build his

00:01:38,820 --> 00:01:44,100
application the application developer

00:01:42,150 --> 00:01:47,369
would like ideally to be able to run

00:01:44,100 --> 00:01:49,950
ahead of time compilation and get get an

00:01:47,369 --> 00:01:54,540
optimized bundle for their app and it

00:01:49,950 --> 00:01:56,579
also supports tree-shaking right so that

00:01:54,540 --> 00:01:58,860
kind of looks like this we have our

00:01:56,579 --> 00:02:02,040
little UI library and we import the

00:01:58,860 --> 00:02:05,009
button module and the forms module and

00:02:02,040 --> 00:02:07,409
we create an app module with ng module

00:02:05,009 --> 00:02:09,810
that imports those too so what if you

00:02:07,409 --> 00:02:12,120
had another 15 components in UGI library

00:02:09,810 --> 00:02:13,130
right we don't really want to distribute

00:02:12,120 --> 00:02:14,900
those too

00:02:13,130 --> 00:02:18,620
move to everybody that's consuming this

00:02:14,900 --> 00:02:23,480
application so this format will should

00:02:18,620 --> 00:02:25,460
help in achieving that goal one of the

00:02:23,480 --> 00:02:27,800
things that we found surveying some of

00:02:25,460 --> 00:02:29,870
the libraries out there is that they

00:02:27,800 --> 00:02:32,720
don't all publish the necessary assets

00:02:29,870 --> 00:02:35,720
in order to support a OT conflict

00:02:32,720 --> 00:02:38,210
compilation so one of the necessary

00:02:35,720 --> 00:02:40,010
assets is type definitions so taking a

00:02:38,210 --> 00:02:43,130
look at a library that might be

00:02:40,010 --> 00:02:47,480
published these look like this who knows

00:02:43,130 --> 00:02:49,100
DTS files okay most of us so the DTS

00:02:47,480 --> 00:02:53,510
files are basically the type definitions

00:02:49,100 --> 00:02:55,010
that align with your JavaScript and the

00:02:53,510 --> 00:02:59,360
other required assets that needs to be

00:02:55,010 --> 00:03:04,240
published is metadata files who has seen

00:02:59,360 --> 00:03:08,180
these before many fewer people okay so

00:03:04,240 --> 00:03:09,290
this was often the missing component in

00:03:08,180 --> 00:03:11,000
a lot of libraries that were being

00:03:09,290 --> 00:03:16,790
published and these come from the

00:03:11,000 --> 00:03:19,970
angular compiler so how do we produce

00:03:16,790 --> 00:03:21,830
the required assets basically the first

00:03:19,970 --> 00:03:26,270
requirement is that you use the angular

00:03:21,830 --> 00:03:30,110
compiler so you get it by NPM installing

00:03:26,270 --> 00:03:32,900
at angular slash compiler CLI okay in

00:03:30,110 --> 00:03:37,190
your node modules bin directory you'll

00:03:32,900 --> 00:03:38,990
have an NGC command and that's basically

00:03:37,190 --> 00:03:40,400
a drop-in replacement for the typescript

00:03:38,990 --> 00:03:42,170
compiler it essentially wraps the

00:03:40,400 --> 00:03:43,880
typescript compiler adding some

00:03:42,170 --> 00:03:45,920
additional options adding additional

00:03:43,880 --> 00:03:48,440
output to support ahead of time

00:03:45,920 --> 00:03:53,930
compilation and to support building the

00:03:48,440 --> 00:03:56,060
ng factory files ng style files so a

00:03:53,930 --> 00:03:58,040
very simplified version of the ng see

00:03:56,060 --> 00:04:00,560
angular compiler process you've got your

00:03:58,040 --> 00:04:02,270
type script source code it runs through

00:04:00,560 --> 00:04:04,160
the angular compiler the angular

00:04:02,270 --> 00:04:06,470
compiler delegate some of its work to

00:04:04,160 --> 00:04:09,680
the typescript compiler and the result

00:04:06,470 --> 00:04:13,850
is compiled JavaScript code metadata

00:04:09,680 --> 00:04:17,480
files and DTS files these are the

00:04:13,850 --> 00:04:19,880
required assets for libraries okay the

00:04:17,480 --> 00:04:22,430
angular compiler also does produce ng

00:04:19,880 --> 00:04:24,229
factory files and ng style files but you

00:04:22,430 --> 00:04:25,610
actually as a library author you don't

00:04:24,229 --> 00:04:28,610
want to publish those those are

00:04:25,610 --> 00:04:31,610
tied to the version of the compiler that

00:04:28,610 --> 00:04:33,889
you built them with and they're really

00:04:31,610 --> 00:04:37,900
they're an access that the application

00:04:33,889 --> 00:04:41,120
should be publishing not libraries okay

00:04:37,900 --> 00:04:45,319
so in order to produce those assets we

00:04:41,120 --> 00:04:48,169
have to jump into a TS config file type

00:04:45,319 --> 00:04:50,780
script reads this TS config file and the

00:04:48,169 --> 00:04:55,099
typescript compiler options live in key

00:04:50,780 --> 00:04:57,710
called compiler options and angular's

00:04:55,099 --> 00:04:59,029
compiler reads from a custom key that

00:04:57,710 --> 00:05:03,110
was added called angular compiler

00:04:59,029 --> 00:05:05,419
options let's just look at a few of the

00:05:03,110 --> 00:05:08,419
required items that you should be using

00:05:05,419 --> 00:05:11,360
in the TS config file so for your

00:05:08,419 --> 00:05:13,009
compiler options declaration what this

00:05:11,360 --> 00:05:15,650
is going to do is this is going to tell

00:05:13,009 --> 00:05:18,770
typescript to generate the DTS file so

00:05:15,650 --> 00:05:20,300
generate those types definitions and you

00:05:18,770 --> 00:05:22,729
want to make sure to take those and

00:05:20,300 --> 00:05:27,889
publish those along with your library to

00:05:22,729 --> 00:05:30,589
NPM the next key here that we recommend

00:05:27,889 --> 00:05:32,629
using is module es2015

00:05:30,589 --> 00:05:34,940
so when you're writing your typescript

00:05:32,629 --> 00:05:38,300
source you're using import and export

00:05:34,940 --> 00:05:41,000
statements right and those are es

00:05:38,300 --> 00:05:44,330
modules right those are part of the es

00:05:41,000 --> 00:05:47,810
module spec so if you add this key to

00:05:44,330 --> 00:05:49,879
the PS config then the compiled

00:05:47,810 --> 00:05:53,990
JavaScript will have import and export

00:05:49,879 --> 00:05:56,779
statements in it it doesn't tell you

00:05:53,990 --> 00:05:59,419
whether or not your classes and your

00:05:56,779 --> 00:06:06,199
federal functions are going to be trans

00:05:59,419 --> 00:06:08,449
filed down to es5 or es6 key target here

00:06:06,199 --> 00:06:10,330
we're using es 5 this is going to tell

00:06:08,449 --> 00:06:14,599
typescript to take your classes and

00:06:10,330 --> 00:06:20,029
basically rewrite them in an es 5 format

00:06:14,599 --> 00:06:22,000
right so then let's look at the angular

00:06:20,029 --> 00:06:24,680
compiler options these are two of the

00:06:22,000 --> 00:06:27,349
minimum T's that we would recommend

00:06:24,680 --> 00:06:29,810
using first strict committed metadata

00:06:27,349 --> 00:06:32,810
emit so what this does is it tells the

00:06:29,810 --> 00:06:35,300
angular compiler to halts throw an error

00:06:32,810 --> 00:06:38,389
when the metadata files that it would be

00:06:35,300 --> 00:06:39,340
generating would cause an error in an

00:06:38,389 --> 00:06:40,960
application

00:06:39,340 --> 00:06:43,750
okay so you pretty much always want to

00:06:40,960 --> 00:06:45,699
turn this on it's optional but as an

00:06:43,750 --> 00:06:46,720
author you should turn this on you don't

00:06:45,699 --> 00:06:50,949
want to produce stuff that's just going

00:06:46,720 --> 00:06:52,810
to break and skip template Cochin so

00:06:50,949 --> 00:06:55,150
what this does is it tells angular

00:06:52,810 --> 00:06:56,650
compiler not to generate the ng factory

00:06:55,150 --> 00:06:58,600
file to tilt it not to generate the ng

00:06:56,650 --> 00:07:00,940
style files it will only generate the

00:06:58,600 --> 00:07:04,840
pieces that are actually required before

00:07:00,940 --> 00:07:07,900
publishing your libraries all right

00:07:04,840 --> 00:07:08,949
let's take a look at this in action some

00:07:07,900 --> 00:07:11,350
of this I'm gonna have to move pretty

00:07:08,949 --> 00:07:13,960
quick because we're going to roll

00:07:11,350 --> 00:07:17,590
through a decent amount but what we're

00:07:13,960 --> 00:07:20,620
looking at here is a very small sample

00:07:17,590 --> 00:07:23,889
library and in the root of our library

00:07:20,620 --> 00:07:26,470
we have a package.json file we have our

00:07:23,889 --> 00:07:28,030
dev dependencies so as a library author

00:07:26,470 --> 00:07:29,860
these are the dependencies that we're

00:07:28,030 --> 00:07:33,720
using we're using angular core compiler

00:07:29,860 --> 00:07:38,020
CLI and those rely on things like rxjs

00:07:33,720 --> 00:07:41,320
typescript and zone we also have a TS

00:07:38,020 --> 00:07:43,539
config file this TS config file in this

00:07:41,320 --> 00:07:45,880
particular example is not used to build

00:07:43,539 --> 00:07:47,860
our library this gif config file is only

00:07:45,880 --> 00:07:52,229
used for the editor for the editor

00:07:47,860 --> 00:07:56,130
environment so in this case vs code

00:07:52,229 --> 00:07:59,139
let's look at the source of our library

00:07:56,130 --> 00:08:01,419
at the root of the source we have an

00:07:59,139 --> 00:08:04,300
export it's only one component in this

00:08:01,419 --> 00:08:08,590
in this library so we're Reax porting

00:08:04,300 --> 00:08:10,960
that component in an index file I've

00:08:08,590 --> 00:08:14,380
also got another package JSON file right

00:08:10,960 --> 00:08:15,400
and this also has a fancy of angular

00:08:14,380 --> 00:08:17,860
core rx

00:08:15,400 --> 00:08:19,960
and zone but in this case these are pure

00:08:17,860 --> 00:08:22,030
dependencies anybody ever written a peer

00:08:19,960 --> 00:08:24,550
dependency and you've ever seen when you

00:08:22,030 --> 00:08:26,020
npm install if you npm install at

00:08:24,550 --> 00:08:27,970
angular core for the first time it'll

00:08:26,020 --> 00:08:30,880
say pure dependencies not met because

00:08:27,970 --> 00:08:34,120
you didn't put Rx and zone in there so

00:08:30,880 --> 00:08:36,909
as a library when you publish you want

00:08:34,120 --> 00:08:38,979
to publish angular and rx and zone as a

00:08:36,909 --> 00:08:40,630
pure dependency meaning that the

00:08:38,979 --> 00:08:42,580
application developer is responsible for

00:08:40,630 --> 00:08:47,020
choosing the version of angular that he

00:08:42,580 --> 00:08:50,140
wants to use he or she wants to use then

00:08:47,020 --> 00:08:52,670
the other item of note in here is key

00:08:50,140 --> 00:08:55,310
called module

00:08:52,670 --> 00:08:58,160
so when you're producing your

00:08:55,310 --> 00:09:00,590
package.json file the module key the

00:08:58,160 --> 00:09:02,770
target of the module key is basically

00:09:00,590 --> 00:09:05,740
where you can find the root of

00:09:02,770 --> 00:09:08,990
everything that you are publishing and

00:09:05,740 --> 00:09:11,420
the the word module specifically means

00:09:08,990 --> 00:09:14,630
that this file has import and export

00:09:11,420 --> 00:09:17,570
statements in it okay if it didn't if it

00:09:14,630 --> 00:09:19,670
were in a different format like a UMD

00:09:17,570 --> 00:09:22,160
format or something else you might see

00:09:19,670 --> 00:09:25,520
something like Maine okay like Maine is

00:09:22,160 --> 00:09:27,650
supported by node out of the box module

00:09:25,520 --> 00:09:29,390
not necessarily supported by node out of

00:09:27,650 --> 00:09:31,850
the box but it is supported by tools

00:09:29,390 --> 00:09:35,240
like web pack so whose use web pack for

00:09:31,850 --> 00:09:37,850
their apps like a lot of us right

00:09:35,240 --> 00:09:43,310
so will read the module key and

00:09:37,850 --> 00:09:44,690
use use the value there all right and in

00:09:43,310 --> 00:09:47,540
our components we have a really simple

00:09:44,690 --> 00:09:51,860
box component that just makes a little

00:09:47,540 --> 00:09:53,900
border and we have an NG module that

00:09:51,860 --> 00:09:57,200
says that we are declaring the box

00:09:53,900 --> 00:10:00,350
component and we are exporting it into

00:09:57,200 --> 00:10:02,660
this class here the Box module all right

00:10:00,350 --> 00:10:03,920
so how do we build this everybody has a

00:10:02,660 --> 00:10:05,870
different opinion on how to actually

00:10:03,920 --> 00:10:07,970
build what we're going to look at is

00:10:05,870 --> 00:10:09,830
what are the assets that we're actually

00:10:07,970 --> 00:10:12,500
going to end up publishing what we're

00:10:09,830 --> 00:10:14,090
going to distribute so we're gonna start

00:10:12,500 --> 00:10:18,620
with a build file here it's just a build

00:10:14,090 --> 00:10:21,260
SH file so I don't forget later I'm

00:10:18,620 --> 00:10:24,110
going to put in here this so we're going

00:10:21,260 --> 00:10:26,360
to clean up our previous build and then

00:10:24,110 --> 00:10:29,120
we're going to get a handle on the

00:10:26,360 --> 00:10:33,860
angular compiler right so node modules

00:10:29,120 --> 00:10:38,320
dot bin slash bin NGC and all we're

00:10:33,860 --> 00:10:41,750
going to do is run NGC passing in a

00:10:38,320 --> 00:10:44,450
project - P says what project you want

00:10:41,750 --> 00:10:48,170
to use and we're going to pass in the GS

00:10:44,450 --> 00:10:49,370
config that we just took a look at the

00:10:48,170 --> 00:10:52,040
only other thing that we're doing in our

00:10:49,370 --> 00:10:54,500
build file right now is copying this

00:10:52,040 --> 00:10:58,930
package JSON file into the dist

00:10:54,500 --> 00:10:58,930
directory so hopefully this works

00:10:59,890 --> 00:11:07,440
all right now we have a disk and this

00:11:04,180 --> 00:11:10,110
this disk is contained sort of minimum

00:11:07,440 --> 00:11:12,370
items required in order to support

00:11:10,110 --> 00:11:14,410
application developers who want to a ot

00:11:12,370 --> 00:11:17,019
their code we want to edit on compiler

00:11:14,410 --> 00:11:21,010
code it's got the index metadata file

00:11:17,019 --> 00:11:22,990
it's got DTS files that each each file

00:11:21,010 --> 00:11:25,000
that exists in components has

00:11:22,990 --> 00:11:28,839
corresponding DTS files corresponding

00:11:25,000 --> 00:11:31,779
metadata files and the Java Script is

00:11:28,839 --> 00:11:34,510
built using import and export statements

00:11:31,779 --> 00:11:42,810
and our classes and decorators have been

00:11:34,510 --> 00:11:45,940
down levelled to es5 all right

00:11:42,810 --> 00:11:47,529
so real quick summary on those things we

00:11:45,940 --> 00:11:48,490
want to be we want to make sure that we

00:11:47,529 --> 00:11:49,810
are able to be ready when we're

00:11:48,490 --> 00:11:52,690
publishing library we want to make sure

00:11:49,810 --> 00:11:54,940
that we are not stopping an application

00:11:52,690 --> 00:11:58,720
developer from AO seeing their

00:11:54,940 --> 00:12:03,029
application we have to publish dps files

00:11:58,720 --> 00:12:05,860
and we have to publish metadata files

00:12:03,029 --> 00:12:08,560
all right but it can get better than

00:12:05,860 --> 00:12:10,209
that we can do some optimizations these

00:12:08,560 --> 00:12:12,550
optimizations and strategies really

00:12:10,209 --> 00:12:14,709
around the initial strategy is going to

00:12:12,550 --> 00:12:18,730
be around taking all of these separate

00:12:14,709 --> 00:12:22,660
JavaScript files and intelligently

00:12:18,730 --> 00:12:25,060
concatenated them into a single file so

00:12:22,660 --> 00:12:30,160
the idea is we want to publish fewer

00:12:25,060 --> 00:12:32,560
eken Script modules in total currently

00:12:30,160 --> 00:12:35,529
we suggest you use roll-up to do this so

00:12:32,560 --> 00:12:37,600
roll-up is a tool that will start at the

00:12:35,529 --> 00:12:40,390
root of your library and follow all the

00:12:37,600 --> 00:12:43,449
import statements and take all the

00:12:40,390 --> 00:12:45,100
generated code and create a single file

00:12:43,449 --> 00:12:46,329
out of all that generated code it will

00:12:45,100 --> 00:12:48,820
rewrite all the import and export

00:12:46,329 --> 00:12:53,860
statements for you and it doesn't it

00:12:48,820 --> 00:12:57,850
does a pretty good job of this and the

00:12:53,860 --> 00:13:01,510
result of running roll-up we call a flat

00:12:57,850 --> 00:13:07,920
Ekrem script module igor coined the word

00:13:01,510 --> 00:13:11,670
says 'm for it so flat flattened ESM ok

00:13:07,920 --> 00:13:14,040
the other optimization that

00:13:11,670 --> 00:13:15,990
would be great if you can do is in

00:13:14,040 --> 00:13:18,060
lining templates and styles so we don't

00:13:15,990 --> 00:13:20,610
have a we don't currently have a great

00:13:18,060 --> 00:13:22,980
tool for doing this out of the box if

00:13:20,610 --> 00:13:25,440
you look at a project like the material

00:13:22,980 --> 00:13:26,610
material - they've got to pass where

00:13:25,440 --> 00:13:28,680
they go through and they use the regex

00:13:26,610 --> 00:13:31,320
and they go and pluck files out and they

00:13:28,680 --> 00:13:34,110
inline all the templates in the CSS it's

00:13:31,320 --> 00:13:35,040
a little bit cumbersome hopefully we can

00:13:34,110 --> 00:13:39,390
do something about that in the future

00:13:35,040 --> 00:13:40,560
but if if you can put the effort into

00:13:39,390 --> 00:13:44,640
the build process it would be good to

00:13:40,560 --> 00:13:46,620
inline the templates and styles and for

00:13:44,640 --> 00:13:49,530
a little bit more information on why we

00:13:46,620 --> 00:13:51,480
say you should do this roll up there's a

00:13:49,530 --> 00:13:53,760
great article called cost of small

00:13:51,480 --> 00:13:57,150
modules and it actually gives there's a

00:13:53,760 --> 00:14:00,230
serious performance degradation as as

00:13:57,150 --> 00:14:02,490
the number of modules that you are

00:14:00,230 --> 00:14:04,440
bundling into your application bundle as

00:14:02,490 --> 00:14:06,630
that number increases there's a serious

00:14:04,440 --> 00:14:11,250
performance degradation and this article

00:14:06,630 --> 00:14:14,510
covers it pretty well all right one

00:14:11,250 --> 00:14:18,390
thing we now recommend you do not do is

00:14:14,510 --> 00:14:23,400
what we call a kitchen sink ng module so

00:14:18,390 --> 00:14:26,880
who here has used material - all right

00:14:23,400 --> 00:14:31,290
so you import from at angular slash

00:14:26,880 --> 00:14:35,100
material right and they are publishing a

00:14:31,290 --> 00:14:39,570
or they were publishing an NG module

00:14:35,100 --> 00:14:41,460
called angular material and essentially

00:14:39,570 --> 00:14:43,860
what it did was it was react sporting

00:14:41,460 --> 00:14:46,830
all of the angular material components

00:14:43,860 --> 00:14:49,590
into a single NG module the the problem

00:14:46,830 --> 00:14:50,820
with that is that we want to avoid it

00:14:49,590 --> 00:14:52,650
because it completely breaks tree

00:14:50,820 --> 00:14:54,810
shaking down the road as an app

00:14:52,650 --> 00:14:59,100
developer if the only component you use

00:14:54,810 --> 00:15:01,050
was a you know tooltip well you don't

00:14:59,100 --> 00:15:02,910
want all of material or all of the

00:15:01,050 --> 00:15:05,280
library included in your in your final

00:15:02,910 --> 00:15:07,830
bundle so these kitchen sink modules

00:15:05,280 --> 00:15:12,870
actually destroy the ability to do tree

00:15:07,830 --> 00:15:17,250
shaking as a library developer it kind

00:15:12,870 --> 00:15:21,300
of looks like this you would say we have

00:15:17,250 --> 00:15:24,990
only two components or two modules in

00:15:21,300 --> 00:15:28,410
our library foot box and highlight

00:15:24,990 --> 00:15:29,640
then we a kitchen sink energy module

00:15:28,410 --> 00:15:33,200
will look like this we would import them

00:15:29,640 --> 00:15:39,660
and directly re-export them so this is

00:15:33,200 --> 00:15:42,900
do not use all right quick note on

00:15:39,660 --> 00:15:46,730
library organization we're currently

00:15:42,900 --> 00:15:49,590
recommending an NG module per component

00:15:46,730 --> 00:15:51,990
so rather than kitchen sink just create

00:15:49,590 --> 00:15:53,550
one per component and export those from

00:15:51,990 --> 00:15:57,480
your library what this allows us to do

00:15:53,550 --> 00:15:59,400
eventually is a table tree-shaking okay

00:15:57,480 --> 00:16:01,320
so that all that all that code that's

00:15:59,400 --> 00:16:05,520
not actually used will be gone oh I'm

00:16:01,320 --> 00:16:08,070
going to run over alright so we import

00:16:05,520 --> 00:16:09,840
the Box component and we create an

00:16:08,070 --> 00:16:14,220
energy module that declares box Andry

00:16:09,840 --> 00:16:17,870
exports it as box module all right so

00:16:14,220 --> 00:16:23,040
let's take this little project here and

00:16:17,870 --> 00:16:24,570
go ahead and optimize it so the

00:16:23,040 --> 00:16:26,460
optimizations that we want to do we want

00:16:24,570 --> 00:16:29,340
to create a fez 'm right a flat

00:16:26,460 --> 00:16:32,460
ActionScript module and along with that

00:16:29,340 --> 00:16:35,790
we want to have only a single metadata

00:16:32,460 --> 00:16:37,620
file right in the example we looked at a

00:16:35,790 --> 00:16:40,890
second ago there's a metadata file for

00:16:37,620 --> 00:16:42,390
each DTS file and for each javascript

00:16:40,890 --> 00:16:43,770
file but if we're rolling everything up

00:16:42,390 --> 00:16:49,440
into a single javascript file we also

00:16:43,770 --> 00:16:50,570
want only a single metadata file so the

00:16:49,440 --> 00:16:52,920
first thing that I'm going to do is

00:16:50,570 --> 00:16:55,320
change our target so that we're not

00:16:52,920 --> 00:16:59,460
building to disk we're doing to or we're

00:16:55,320 --> 00:17:04,040
compiling to build and then there is a

00:16:59,460 --> 00:17:07,650
couple of new options as of angular 4 in

00:17:04,040 --> 00:17:10,770
angular compiler options so flat module

00:17:07,650 --> 00:17:15,930
out file and I'm going to go ahead and

00:17:10,770 --> 00:17:21,240
name this simple UI Lib is what this

00:17:15,930 --> 00:17:25,170
does is it says we are compiling the

00:17:21,240 --> 00:17:26,339
index to F and what the angular compiler

00:17:25,170 --> 00:17:29,130
is going to do is it's going to take

00:17:26,339 --> 00:17:30,690
that and produce a file called simple UI

00:17:29,130 --> 00:17:33,750
lived that basically is the same as the

00:17:30,690 --> 00:17:36,750
index but it will live alongside a

00:17:33,750 --> 00:17:39,910
flattened metadata file

00:17:36,750 --> 00:17:44,410
we also need to give it a module

00:17:39,910 --> 00:17:46,090
identifier so flat module ID and we are

00:17:44,410 --> 00:17:49,240
just going to call this by the name that

00:17:46,090 --> 00:17:53,230
is in our package JSON which is a simple

00:17:49,240 --> 00:17:55,270
UI lived all right

00:17:53,230 --> 00:18:03,490
so if we run now if we run the build

00:17:55,270 --> 00:18:10,450
script if we run the build script it

00:18:03,490 --> 00:18:16,630
won't work and all right so what we need

00:18:10,450 --> 00:18:22,870
to do now is we need to run roll-up so

00:18:16,630 --> 00:18:25,980
I'm going to add roll up here and roll

00:18:22,870 --> 00:18:31,380
up lives also in and node bundles bin

00:18:25,980 --> 00:18:40,750
and after we run NGC we are going to

00:18:31,380 --> 00:18:43,360
roll up build slash simple UI Lib KS and

00:18:40,750 --> 00:18:46,170
we are going to pass it an out file

00:18:43,360 --> 00:18:54,030
we're going to put this into dist slash

00:18:46,170 --> 00:18:54,030
simple UI live Dutch is all right

00:18:54,880 --> 00:18:59,620
should work now alright so there's a

00:18:58,059 --> 00:19:00,850
couple of warnings here we can

00:18:59,620 --> 00:19:03,669
completely ignore them for now they're

00:19:00,850 --> 00:19:05,259
only warnings so now we're just dis for

00:19:03,669 --> 00:19:08,740
bear doesn't have very much in it but we

00:19:05,259 --> 00:19:10,179
see that we have a fez 'm of flattened

00:19:08,740 --> 00:19:11,679
eco script module

00:19:10,179 --> 00:19:14,230
none of our source code actually

00:19:11,679 --> 00:19:16,509
imported both component and ng module in

00:19:14,230 --> 00:19:19,000
the same file but roll-ups intelligent

00:19:16,509 --> 00:19:21,490
enough to rewrite our import statements

00:19:19,000 --> 00:19:23,409
and say hey somewhere in the codebase it

00:19:21,490 --> 00:19:26,500
required these two files so to rewrite

00:19:23,409 --> 00:19:30,159
our imports for us if does the same

00:19:26,500 --> 00:19:31,809
thing with the exports and then the

00:19:30,159 --> 00:19:36,759
source code from all of our JavaScript

00:19:31,809 --> 00:19:39,820
files lives in this one file next thing

00:19:36,759 --> 00:19:43,240
we would need to do is copy from the

00:19:39,820 --> 00:19:44,740
build directory our metadata and DTS

00:19:43,240 --> 00:19:49,690
basically we want everything that's not

00:19:44,740 --> 00:19:57,730
a JavaScript file so we'll just run our

00:19:49,690 --> 00:20:00,580
sync with an exclude so rjs and we want

00:19:57,730 --> 00:20:04,409
to grab everything in build it's not a

00:20:00,580 --> 00:20:04,409
JavaScript file and put it into dist

00:20:06,870 --> 00:20:15,370
all right now now we have all the DTS

00:20:12,370 --> 00:20:17,559
files that we need they will live inside

00:20:15,370 --> 00:20:20,559
of components as well currently there's

00:20:17,559 --> 00:20:22,210
no good way to flatten the DTS files

00:20:20,559 --> 00:20:25,000
that may be coming from the typescript

00:20:22,210 --> 00:20:27,279
team but for now we're still gonna have

00:20:25,000 --> 00:20:31,269
to publish DTS files in a large file

00:20:27,279 --> 00:20:33,279
graph and and we have the JavaScript

00:20:31,269 --> 00:20:39,429
file and the metadata file so we we now

00:20:33,279 --> 00:20:42,659
support äôt alright so real quick

00:20:39,429 --> 00:20:45,789
summary we want to roll up into Fez UM's

00:20:42,659 --> 00:20:51,240
we want to ideally inline our HTML and

00:20:45,789 --> 00:20:54,610
CSS into the distribution JavaScript and

00:20:51,240 --> 00:20:56,889
we need to add these two keys to our for

00:20:54,610 --> 00:21:00,610
ng C we need add these two keys to the

00:20:56,889 --> 00:21:02,799
TS config all right a couple advanced

00:21:00,610 --> 00:21:06,909
optimizations I'll try to blitz through

00:21:02,799 --> 00:21:08,460
these but the advanced optimizations who

00:21:06,909 --> 00:21:10,350
anybody here ever used close

00:21:08,460 --> 00:21:16,080
Tyler if you're at Google put your hand

00:21:10,350 --> 00:21:17,160
down okay after that like five that

00:21:16,080 --> 00:21:20,310
might be more than I thought there would

00:21:17,160 --> 00:21:22,230
be it's great so closure has a mode

00:21:20,310 --> 00:21:24,690
where it can it can do a really good job

00:21:22,230 --> 00:21:27,060
of packaging your packaging files and

00:21:24,690 --> 00:21:29,850
getting rid of dead code but it's

00:21:27,060 --> 00:21:32,970
heavily optimized for es2015 sources

00:21:29,850 --> 00:21:37,560
okay so what we just built was es2015

00:21:32,970 --> 00:21:40,100
modules with es5 code okay so part of

00:21:37,560 --> 00:21:42,720
our recommendation would be to publish

00:21:40,100 --> 00:21:45,620
es2015 as well so we actually want to

00:21:42,720 --> 00:21:48,720
publish both we want to publish

00:21:45,620 --> 00:21:52,860
pheasants with es5 and pheasants with

00:21:48,720 --> 00:21:57,810
es2015 all right so we'll really quickly

00:21:52,860 --> 00:22:00,360
optimize this thing and the first thing

00:21:57,810 --> 00:22:02,220
that we can do is we come into our TS

00:22:00,360 --> 00:22:04,560
config build there's an additional

00:22:02,220 --> 00:22:12,810
option for the angular compiler which is

00:22:04,560 --> 00:22:14,970
called annotate for closure compiler and

00:22:12,810 --> 00:22:16,890
we'll set that to true anybody everybody

00:22:14,970 --> 00:22:21,380
was here for Brad's talk this morning he

00:22:16,890 --> 00:22:24,810
showed a closure uses these J's doc

00:22:21,380 --> 00:22:27,690
annotations right for method parameters

00:22:24,810 --> 00:22:31,530
and things like that so what this will

00:22:27,690 --> 00:22:38,880
do is it will force NGC to output those

00:22:31,530 --> 00:22:40,830
Jas doc annotations for you let me just

00:22:38,880 --> 00:22:42,330
see if I have one in here all right

00:22:40,830 --> 00:22:46,950
so in order to actually see one of those

00:22:42,330 --> 00:22:54,930
we're going to add a constructor public

00:22:46,950 --> 00:22:58,050
name string this is a useless property

00:22:54,930 --> 00:23:03,420
but the point is when we come into our

00:22:58,050 --> 00:23:07,380
JavaScript here when box was transpiled

00:23:03,420 --> 00:23:10,130
see we get this annotation on here so by

00:23:07,380 --> 00:23:13,980
default it will be essentially in any

00:23:10,130 --> 00:23:16,080
but this does allow closure to to take

00:23:13,980 --> 00:23:18,120
this and do its optimizations on your

00:23:16,080 --> 00:23:20,340
code and there's some additional options

00:23:18,120 --> 00:23:21,380
you can do to actually make this like

00:23:20,340 --> 00:23:24,230
string

00:23:21,380 --> 00:23:26,150
but we don't need to get into that all

00:23:24,230 --> 00:23:29,150
right and the next thing we need to do

00:23:26,150 --> 00:23:33,500
is build both es2015

00:23:29,150 --> 00:23:40,430
and es5 okay so target if we target yes

00:23:33,500 --> 00:23:43,330
2015 everything is going to work should

00:23:40,430 --> 00:23:47,690
work and now our rolled-up file has

00:23:43,330 --> 00:23:50,420
class keywords it has fat arrow

00:23:47,690 --> 00:23:51,500
functions it does not have decorators

00:23:50,420 --> 00:23:55,000
because they're not actually part of es

00:23:51,500 --> 00:23:58,580
2015 the part of the next version okay

00:23:55,000 --> 00:24:01,280
but we're not yet publishing in es5 so

00:23:58,580 --> 00:24:03,800
what we're going to do is a pretty naive

00:24:01,280 --> 00:24:06,050
implementation here you can feel free to

00:24:03,800 --> 00:24:07,430
to do a better one for yourselves but

00:24:06,050 --> 00:24:11,150
we're going to copy the TS config and

00:24:07,430 --> 00:24:13,010
call this one TF config es5 and we're

00:24:11,150 --> 00:24:18,020
going to change the target back to PS 5

00:24:13,010 --> 00:24:23,990
for this one and then in our build

00:24:18,020 --> 00:24:25,970
script we're just going to run NGC twice

00:24:23,990 --> 00:24:30,440
so the second time we're going to run it

00:24:25,970 --> 00:24:32,180
over the es 5 PS config and when we do

00:24:30,440 --> 00:24:39,200
our roll-up we're going to roll up into

00:24:32,180 --> 00:24:40,970
dot es 5 j s so the end result here

00:24:39,200 --> 00:24:43,130
should be that we have two files that

00:24:40,970 --> 00:24:47,360
are essentially the same thing but one

00:24:43,130 --> 00:24:48,650
has es2015 inside of it one has es 5 and

00:24:47,360 --> 00:24:52,490
the last thing we got to do is modify

00:24:48,650 --> 00:24:54,800
our package JSON so this module key by

00:24:52,490 --> 00:24:58,430
default is used by web pack web pack by

00:24:54,800 --> 00:24:59,990
default does not read es2016 okay so it

00:24:58,430 --> 00:25:02,210
reads modules but it doesn't read yes

00:24:59,990 --> 00:25:05,420
2016 it will error when it hits it hits

00:25:02,210 --> 00:25:07,910
a keyword class okay so what we want to

00:25:05,420 --> 00:25:12,560
do is we want to change this to simple

00:25:07,910 --> 00:25:13,970
UI lived es 5ks okay this makes it so

00:25:12,560 --> 00:25:16,310
that when an application developer pulls

00:25:13,970 --> 00:25:17,720
in your code that he's using webpack it

00:25:16,310 --> 00:25:19,340
will work out of the box doesn't need to

00:25:17,720 --> 00:25:26,210
add things like babel or anything like

00:25:19,340 --> 00:25:29,170
that to it we decided on a new key it's

00:25:26,210 --> 00:25:29,170
for package Jason

00:25:29,250 --> 00:25:36,179
oops which is just es2015 so specifying

00:25:33,150 --> 00:25:38,309
the language level in the package.json

00:25:36,179 --> 00:25:41,720
and that will point to a file that is in

00:25:38,309 --> 00:25:48,169
in that particular format all right

00:25:41,720 --> 00:25:52,280
hopefully this works now we get a disk

00:25:48,169 --> 00:25:54,750
and we have two copies of our library

00:25:52,280 --> 00:25:55,770
they won't be simultaneously used so

00:25:54,750 --> 00:25:58,470
it's okay

00:25:55,770 --> 00:26:01,169
es five looks just like we did just like

00:25:58,470 --> 00:26:05,250
it did at the very beginning and es 2016

00:26:01,169 --> 00:26:13,020
version has class and fed error

00:26:05,250 --> 00:26:16,049
functions all right so quick summary on

00:26:13,020 --> 00:26:19,230
that so we want to ship es 2015 code

00:26:16,049 --> 00:26:22,169
also ship es5 code if for legacy reasons

00:26:19,230 --> 00:26:24,960
you need to ship UMD bundles that's okay

00:26:22,169 --> 00:26:28,409
you would add it to the main key of your

00:26:24,960 --> 00:26:29,730
package jason but we're kind of trying

00:26:28,409 --> 00:26:31,590
to get away from that on the angular

00:26:29,730 --> 00:26:35,400
team it's not really necessary for for

00:26:31,590 --> 00:26:37,559
most of the modern tools go ahead and

00:26:35,400 --> 00:26:40,140
Nate and enable annotate for closure

00:26:37,559 --> 00:26:43,799
compiler this will help help your code

00:26:40,140 --> 00:26:48,809
to be help people to be able to do the

00:26:43,799 --> 00:26:51,990
best optimizations possible all right

00:26:48,809 --> 00:26:54,260
and in summary on this format this

00:26:51,990 --> 00:26:57,179
format does support web pack roll-up and

00:26:54,260 --> 00:26:59,280
lots of other tools sports IOT for

00:26:57,179 --> 00:27:00,840
application developers it allows for

00:26:59,280 --> 00:27:03,179
tree-shaking optimizations

00:27:00,840 --> 00:27:06,480
we've got more on that coming support

00:27:03,179 --> 00:27:09,809
for closure compiler and it optimizes

00:27:06,480 --> 00:27:11,610
for future tooling a couple of links we

00:27:09,809 --> 00:27:14,250
are publishing this as angular package

00:27:11,610 --> 00:27:17,120
format for when angular 5 comes out

00:27:14,250 --> 00:27:20,240
there will be some adjustments but

00:27:17,120 --> 00:27:23,850
version 4 will still work with angular 5

00:27:20,240 --> 00:27:27,440
on the packaging format there's a seed

00:27:23,850 --> 00:27:30,120
project by Philippe Silva link here as a

00:27:27,440 --> 00:27:34,110
demo the demo that we went through also

00:27:30,120 --> 00:27:36,210
linked Alex Roush Mayer just wrote a

00:27:34,110 --> 00:27:38,730
really interesting article on packaging

00:27:36,210 --> 00:27:41,110
he used what we did on the angular

00:27:38,730 --> 00:27:44,799
project as the sample of

00:27:41,110 --> 00:27:49,690
how to do this correctly which was quite

00:27:44,799 --> 00:27:52,600
interesting and material 25 minutes ago

00:27:49,690 --> 00:27:55,510
published beta 3 and they have

00:27:52,600 --> 00:27:57,750
implemented this format so give a hand

00:27:55,510 --> 00:28:03,099
of that thank you

00:27:57,750 --> 00:28:03,099

YouTube URL: https://www.youtube.com/watch?v=unICbsPGFIA


