Title: Thoughtful Component Design - JEREMY ELBOURN and MILES MALERBA
Publication date: 2017-04-30
Playlist: ng-conf 2017 Advanced Talks
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,000 --> 00:00:10,139
oh I was an old photo of me so hello

00:00:07,919 --> 00:00:11,670
everybody as the guest Dumbledore

00:00:10,139 --> 00:00:13,830
announced I don't know who that's

00:00:11,670 --> 00:00:16,139
supposed to be I'm Jeremy L born and I'm

00:00:13,830 --> 00:00:17,760
miles millar buck and we are members of

00:00:16,139 --> 00:00:19,830
the angular team work on angular

00:00:17,760 --> 00:00:21,300
material today's actually miles his

00:00:19,830 --> 00:00:23,279
first day on the angular team so I just

00:00:21,300 --> 00:00:24,720
pulled him up here to have some company

00:00:23,279 --> 00:00:27,779
while I was on the stage I didn't want

00:00:24,720 --> 00:00:30,510
to be alone so for those of you who are

00:00:27,779 --> 00:00:32,399
unfamiliar with angular material it is a

00:00:30,510 --> 00:00:34,890
project by the angular team with the aim

00:00:32,399 --> 00:00:37,260
of building a high quality set of UI

00:00:34,890 --> 00:00:39,960
components based on Google's material

00:00:37,260 --> 00:00:43,079
design spec that anyone can use in their

00:00:39,960 --> 00:00:44,730
applications and we aim to use best

00:00:43,079 --> 00:00:47,309
practices for angular and kind of serve

00:00:44,730 --> 00:00:49,020
as an example for the community and the

00:00:47,309 --> 00:00:52,920
project's been going on for about two

00:00:49,020 --> 00:00:57,120
and a half years spanning from angularjs

00:00:52,920 --> 00:00:59,190
many years ago to angular and today and

00:00:57,120 --> 00:01:00,989
over the course of all of those versions

00:00:59,190 --> 00:01:04,409
and the evolution of the framework it

00:01:00,989 --> 00:01:07,979
has built about 50 plus components tons

00:01:04,409 --> 00:01:11,010
of commits and over that time frame we

00:01:07,979 --> 00:01:13,409
have learned quite a lot about building

00:01:11,010 --> 00:01:15,810
components and we wanted to come up here

00:01:13,409 --> 00:01:18,659
today to talk about some of the design

00:01:15,810 --> 00:01:21,479
practices and philosophies that we've

00:01:18,659 --> 00:01:23,820
developed over time so that you can all

00:01:21,479 --> 00:01:25,470
take those and go back home and apply

00:01:23,820 --> 00:01:28,170
them to the your own components that

00:01:25,470 --> 00:01:29,990
you're building and so diving right in

00:01:28,170 --> 00:01:33,840
the first thing I want to talk about is

00:01:29,990 --> 00:01:36,570
having thoughtful use of custom elements

00:01:33,840 --> 00:01:38,820
for your angular components and more

00:01:36,570 --> 00:01:41,400
specifically when not to use custom

00:01:38,820 --> 00:01:43,259
elements hold on a second Jeremy I

00:01:41,400 --> 00:01:45,659
thought the whole point of components in

00:01:43,259 --> 00:01:47,280
angular is that we can wrap up a whole

00:01:45,659 --> 00:01:48,479
bunch of stuff inside of a custom

00:01:47,280 --> 00:01:49,860
element and then we could just kind of

00:01:48,479 --> 00:01:52,049
take that custom element and you know

00:01:49,860 --> 00:01:54,869
put it anywhere we want in our app well

00:01:52,049 --> 00:01:57,899
let me show you what I mean so if you

00:01:54,869 --> 00:02:00,420
look at a template like this input

00:01:57,899 --> 00:02:02,729
element button element you know exactly

00:02:00,420 --> 00:02:05,640
what's going on with this right hai-yah

00:02:02,729 --> 00:02:09,030
this is just normal HTML right so if I

00:02:05,640 --> 00:02:11,640
just add a little bit to this some some

00:02:09,030 --> 00:02:13,650
attributes some wrapping elements you

00:02:11,640 --> 00:02:17,459
still really know what's going on

00:02:13,650 --> 00:02:20,640
I see yeah since the the user still has

00:02:17,459 --> 00:02:22,319
access to the native element they cannot

00:02:20,640 --> 00:02:24,329
automatically have a feel for your API

00:02:22,319 --> 00:02:26,159
right away so for example if I wanted to

00:02:24,329 --> 00:02:28,860
add a placeholder to this input that you

00:02:26,159 --> 00:02:30,269
have here I know that I can just go

00:02:28,860 --> 00:02:32,099
ahead and add the placeholder attribute

00:02:30,269 --> 00:02:33,510
to that native in but I don't have to go

00:02:32,099 --> 00:02:35,040
through your Doc's to figure out how to

00:02:33,510 --> 00:02:38,129
do that exactly

00:02:35,040 --> 00:02:41,129
this gives the the user direct access to

00:02:38,129 --> 00:02:43,890
these Dom elements and we found that for

00:02:41,129 --> 00:02:46,470
some components that augmenting the

00:02:43,890 --> 00:02:49,829
native element like this is more

00:02:46,470 --> 00:02:51,599
preferable than hiding that element

00:02:49,829 --> 00:02:54,659
inside of the template in a custom

00:02:51,599 --> 00:02:57,000
element yeah so this is a cool trick for

00:02:54,659 --> 00:02:58,889
these simple elements like button and

00:02:57,000 --> 00:03:01,829
input but does this really apply to

00:02:58,889 --> 00:03:04,139
myself yes actually it's not just the

00:03:01,829 --> 00:03:06,540
very simple components like buttons and

00:03:04,139 --> 00:03:08,970
input somewhat more complex components

00:03:06,540 --> 00:03:11,189
can do this as well for example if you

00:03:08,970 --> 00:03:13,889
were to look at tabs you could see this

00:03:11,189 --> 00:03:16,889
as being a nav element that contains

00:03:13,889 --> 00:03:19,650
anchors and there are other cases where

00:03:16,889 --> 00:03:22,799
you could apply this same composition of

00:03:19,650 --> 00:03:24,540
native elements as well I see so yeah

00:03:22,799 --> 00:03:27,840
this could also work for things like

00:03:24,540 --> 00:03:32,760
headers and lists and list items okay I

00:03:27,840 --> 00:03:35,250
see it is pretty cool so that's me I

00:03:32,760 --> 00:03:36,750
like how we give the user access to an

00:03:35,250 --> 00:03:39,900
API like they already know how to use

00:03:36,750 --> 00:03:41,639
like we all know how to use HTML are

00:03:39,900 --> 00:03:44,340
there any other benefits that we get by

00:03:41,639 --> 00:03:46,079
doing this yeah absolutely so let me

00:03:44,340 --> 00:03:48,810
illustrate one of the benefits that you

00:03:46,079 --> 00:03:50,099
get by showing a counter example of what

00:03:48,810 --> 00:03:53,220
what would it be like if you didn't do

00:03:50,099 --> 00:03:55,139
this so if you were to create a material

00:03:53,220 --> 00:03:57,780
design button component the visual

00:03:55,139 --> 00:04:01,650
treatment for a button that handled both

00:03:57,780 --> 00:04:03,150
click actions and navigation links then

00:04:01,650 --> 00:04:05,310
the person who's consuming this

00:04:03,150 --> 00:04:06,930
component doesn't really know just by

00:04:05,310 --> 00:04:09,000
looking at it if it's doing the right

00:04:06,930 --> 00:04:11,940
thing for accessibility for screen

00:04:09,000 --> 00:04:14,370
reader users you would have to look at

00:04:11,940 --> 00:04:15,840
the source or inspect the elements and

00:04:14,370 --> 00:04:19,590
make sure it was setting the right roles

00:04:15,840 --> 00:04:20,909
and Aria attributes and this is kind of

00:04:19,590 --> 00:04:21,989
cumbersome if you want to make sure

00:04:20,909 --> 00:04:23,970
you're doing the right thing for

00:04:21,989 --> 00:04:26,340
accessibility okay okay

00:04:23,970 --> 00:04:28,470
you mean so if we had gone head and used

00:04:26,340 --> 00:04:30,690
the native button and anchor elements

00:04:28,470 --> 00:04:32,190
then it's immediately you know obvious

00:04:30,690 --> 00:04:34,260
to the user how this is going to

00:04:32,190 --> 00:04:35,880
interact with a screen reader and we

00:04:34,260 --> 00:04:37,170
know that it's going to be correct

00:04:35,880 --> 00:04:38,730
because the screen reader already knows

00:04:37,170 --> 00:04:41,100
how to handle these native elements

00:04:38,730 --> 00:04:42,330
without a you know special roles or area

00:04:41,100 --> 00:04:44,610
attributes or anything like that

00:04:42,330 --> 00:04:47,910
exactly and that's not the only benefit

00:04:44,610 --> 00:04:50,070
it also can help make your components

00:04:47,910 --> 00:04:52,230
simpler to and sell illustrate this with

00:04:50,070 --> 00:04:55,950
another counter example of what not to

00:04:52,230 --> 00:04:58,770
do so say we have an MD input element

00:04:55,950 --> 00:05:01,080
that wraps inside of it the the native

00:04:58,770 --> 00:05:02,130
input element hold on second I thought

00:05:01,080 --> 00:05:03,720
you said this was gonna be a counter

00:05:02,130 --> 00:05:06,990
example then we do this in angular

00:05:03,720 --> 00:05:08,760
material so yeah there was actually a

00:05:06,990 --> 00:05:11,430
period of time when in angular material

00:05:08,760 --> 00:05:13,770
we were doing something like this this

00:05:11,430 --> 00:05:16,530
is what our MD input API looks like and

00:05:13,770 --> 00:05:19,440
inside the template for that and the

00:05:16,530 --> 00:05:23,130
input component ah was something like

00:05:19,440 --> 00:05:26,540
this oh my god that is an awful template

00:05:23,130 --> 00:05:28,950
yeah so this is for wording like 20-plus

00:05:26,540 --> 00:05:31,740
attributes properties to the native

00:05:28,950 --> 00:05:33,780
Olymp native element from the component

00:05:31,740 --> 00:05:37,169
and that has all the corresponding input

00:05:33,780 --> 00:05:39,000
properties and this is making angular

00:05:37,169 --> 00:05:41,729
generate a lot of code run a lot of

00:05:39,000 --> 00:05:43,950
bindings when really you could avoid

00:05:41,729 --> 00:05:46,800
this whole thing if you simply give the

00:05:43,950 --> 00:05:50,130
user access to that native element and

00:05:46,800 --> 00:05:52,650
ultimately we changed our component to

00:05:50,130 --> 00:05:54,600
do that so now the user can simply

00:05:52,650 --> 00:05:57,120
interact directly with this native

00:05:54,600 --> 00:05:58,950
infidel iment and it's placed inside of

00:05:57,120 --> 00:06:01,620
this input container that applies the

00:05:58,950 --> 00:06:06,240
material design styling and behaviors

00:06:01,620 --> 00:06:08,220
that's certainly much nicer okay so I

00:06:06,240 --> 00:06:10,140
think I see a lot of benefits to what

00:06:08,220 --> 00:06:12,300
you're saying here yeah we get to you

00:06:10,140 --> 00:06:14,370
know give the users a familiar API that

00:06:12,300 --> 00:06:18,229
they already know how to work with it's

00:06:14,370 --> 00:06:20,100
like an accessibility win because the

00:06:18,229 --> 00:06:22,050
screen reader already knows how to

00:06:20,100 --> 00:06:23,880
handle these native elements and it even

00:06:22,050 --> 00:06:28,530
simplifies the implementation for us so

00:06:23,880 --> 00:06:29,729
great what do we do though in cases

00:06:28,530 --> 00:06:32,310
where we want to build a component where

00:06:29,729 --> 00:06:34,560
there's no corresponding native elements

00:06:32,310 --> 00:06:36,270
you know things like menus and date

00:06:34,560 --> 00:06:38,240
pickers and things like that right right

00:06:36,270 --> 00:06:40,729
so it's I'm really glad you

00:06:38,240 --> 00:06:43,729
this coincidentally is one of the things

00:06:40,729 --> 00:06:46,069
I wanted to talk about next this idea of

00:06:43,729 --> 00:06:48,560
having thoughtful component composition

00:06:46,069 --> 00:06:50,569
and to illustrate what I want to talk

00:06:48,560 --> 00:06:53,090
about here let's start by looking at a

00:06:50,569 --> 00:06:56,000
menu component and cheerio design menu

00:06:53,090 --> 00:06:58,190
it consists of two different parts there

00:06:56,000 --> 00:07:01,220
is the button that user interacts with

00:06:58,190 --> 00:07:03,889
and the panel that gets popped up once

00:07:01,220 --> 00:07:06,050
the user has done something and so I'll

00:07:03,889 --> 00:07:08,210
ask you how would you go about just off

00:07:06,050 --> 00:07:11,300
the top of your head coming up with an

00:07:08,210 --> 00:07:13,520
API template API for this yeah I think I

00:07:11,300 --> 00:07:16,610
could do that so I'd probably use

00:07:13,520 --> 00:07:20,060
something like this where I create this

00:07:16,610 --> 00:07:22,250
MD menu component and this will kind of

00:07:20,060 --> 00:07:24,680
you know generate the trigger and the

00:07:22,250 --> 00:07:26,870
panel for us and then inside of that we

00:07:24,680 --> 00:07:28,880
can specify these MD menu item

00:07:26,870 --> 00:07:30,919
components or we'll kind of list out all

00:07:28,880 --> 00:07:35,060
the things we want in our menu okay so

00:07:30,919 --> 00:07:36,979
this is encapsulating both the button in

00:07:35,060 --> 00:07:39,259
the panel part all within one thing

00:07:36,979 --> 00:07:42,680
mm-hmm so what if I wanted to say add a

00:07:39,259 --> 00:07:45,530
CSS class to that trigger okay yeah I

00:07:42,680 --> 00:07:47,990
can do that so I just add an attribute

00:07:45,530 --> 00:07:49,580
trigger class and then you can specify

00:07:47,990 --> 00:07:51,830
whatever class you want and apply the

00:07:49,580 --> 00:07:54,650
fancy style so that okay but what if I

00:07:51,830 --> 00:07:57,110
want to add another class to say that

00:07:54,650 --> 00:07:59,990
the panel part now and put on a very

00:07:57,110 --> 00:08:01,969
like custom shadow on there yeah of

00:07:59,990 --> 00:08:03,889
course easy I'll just add a panel class

00:08:01,969 --> 00:08:05,750
and then you can similarly do whatever

00:08:03,889 --> 00:08:08,389
you want to the penalty so do you kind

00:08:05,750 --> 00:08:10,880
of see where I'm going with this oh yeah

00:08:08,389 --> 00:08:14,210
I guess I can see after a while this

00:08:10,880 --> 00:08:15,590
might bloat the MD menu a bit every time

00:08:14,210 --> 00:08:17,719
I want to do something with a trigger or

00:08:15,590 --> 00:08:20,419
the panel I'm kind of stuck adding

00:08:17,719 --> 00:08:22,819
another attribute on there but how can I

00:08:20,419 --> 00:08:25,310
get around this right so what you can do

00:08:22,819 --> 00:08:27,020
is rather than having the gatekeeping

00:08:25,310 --> 00:08:29,000
for all of the different parts on one

00:08:27,020 --> 00:08:31,849
element is just split up the different

00:08:29,000 --> 00:08:33,349
parts and then connect them and this is

00:08:31,849 --> 00:08:35,810
what we're currently doing in angular

00:08:33,349 --> 00:08:37,550
material now where we have the separate

00:08:35,810 --> 00:08:40,010
button element that acts as the trigger

00:08:37,550 --> 00:08:42,740
and the menu panel and you connect them

00:08:40,010 --> 00:08:45,470
together via this menu trigger for

00:08:42,740 --> 00:08:48,270
directive and this is really nice for

00:08:45,470 --> 00:08:51,570
users because it allows you

00:08:48,270 --> 00:08:53,130
you swap out the button for a different

00:08:51,570 --> 00:08:54,690
button if you want to use it it allows

00:08:53,130 --> 00:08:56,100
you to swap out the menu panel for

00:08:54,690 --> 00:08:58,080
something else and still use it with the

00:08:56,100 --> 00:09:04,920
same trigger and ultimately it provides

00:08:58,080 --> 00:09:06,360
a lot more flexibility okay yes I can

00:09:04,920 --> 00:09:09,960
see that that's that's a pretty cool

00:09:06,360 --> 00:09:12,030
approach and you can reuse that for any

00:09:09,960 --> 00:09:14,460
kind of you know more complex component

00:09:12,030 --> 00:09:16,770
that's made up of interactions between

00:09:14,460 --> 00:09:19,100
smaller pieces so you know things like

00:09:16,770 --> 00:09:22,440
auto fleet they picker and data tip

00:09:19,100 --> 00:09:24,810
exactly so benefits we get from this are

00:09:22,440 --> 00:09:26,430
pretty nice so by breaking up your

00:09:24,810 --> 00:09:28,950
components you're making your code more

00:09:26,430 --> 00:09:31,800
clean by having everything very single

00:09:28,950 --> 00:09:33,330
responsibility each the trigger is just

00:09:31,800 --> 00:09:34,860
responsible for things related to the

00:09:33,330 --> 00:09:37,830
trigger II of the panel is just related

00:09:34,860 --> 00:09:39,600
for things related to the panel so code

00:09:37,830 --> 00:09:41,550
organization's better and as I mentioned

00:09:39,600 --> 00:09:44,760
it's much more flexible for the user and

00:09:41,550 --> 00:09:45,990
as you saw in our examples this is also

00:09:44,760 --> 00:09:47,970
very friendly so the first thing we

00:09:45,990 --> 00:09:50,310
talked about using native elements so

00:09:47,970 --> 00:09:51,630
now you can still surface those native

00:09:50,310 --> 00:09:55,080
elements when that's a part of your

00:09:51,630 --> 00:09:56,370
component API okay great thanks Jeremy I

00:09:55,080 --> 00:09:58,890
think this is really going to help me

00:09:56,370 --> 00:10:02,940
make you know better more flexible api's

00:09:58,890 --> 00:10:04,500
for my components but I still have a

00:10:02,940 --> 00:10:07,530
couple questions related to the

00:10:04,500 --> 00:10:10,980
implementation so I've been working on

00:10:07,530 --> 00:10:14,760
this slider component and I have the Dom

00:10:10,980 --> 00:10:17,040
for my slider and I'm finding that there

00:10:14,760 --> 00:10:18,840
are certain cases where I can't really

00:10:17,040 --> 00:10:22,250
think of any good solution other than to

00:10:18,840 --> 00:10:22,250
just directly touch the Dom

00:10:23,870 --> 00:10:30,420
so this is something that I'm sure many

00:10:28,020 --> 00:10:31,320
people in the audience have had to deal

00:10:30,420 --> 00:10:34,770
with as well

00:10:31,320 --> 00:10:38,040
which is why I wanted to talk about how

00:10:34,770 --> 00:10:40,350
we approach a thoughtful dom interaction

00:10:38,040 --> 00:10:42,750
when dealing with angular components and

00:10:40,350 --> 00:10:44,400
so as you know when you're building an

00:10:42,750 --> 00:10:46,860
angular application all of your user

00:10:44,400 --> 00:10:50,040
space code is interacting with angular

00:10:46,860 --> 00:10:52,890
xapi is and then angular abstracts away

00:10:50,040 --> 00:10:54,840
all of the Dom manipulation and the

00:10:52,890 --> 00:10:57,900
rendering so you don't have to deal with

00:10:54,840 --> 00:10:59,190
it and this is why we use a framework in

00:10:57,900 --> 00:11:01,520
the first place so we don't have to

00:10:59,190 --> 00:11:04,830
worry about these low-level concerns

00:11:01,520 --> 00:11:06,600
however you might still find yourself

00:11:04,830 --> 00:11:10,140
sometimes when you're stuck on a

00:11:06,600 --> 00:11:12,270
particular problem wanting to go through

00:11:10,140 --> 00:11:14,490
that level level of abstraction and

00:11:12,270 --> 00:11:17,280
start working directly against the web

00:11:14,490 --> 00:11:19,080
platform native API is okay but am I

00:11:17,280 --> 00:11:22,140
supposed to do this it feels like some

00:11:19,080 --> 00:11:24,120
kind of horrible hack so what we've kind

00:11:22,140 --> 00:11:26,310
of come to on angular material is that

00:11:24,120 --> 00:11:29,070
there are valid cases that when you want

00:11:26,310 --> 00:11:31,290
to do this so the first thing that comes

00:11:29,070 --> 00:11:34,230
up pretty commonly is when you want to

00:11:31,290 --> 00:11:36,450
do any kind of measuring sizing or

00:11:34,230 --> 00:11:39,450
positioning of elements this is

00:11:36,450 --> 00:11:41,910
particularly true when you need to do

00:11:39,450 --> 00:11:45,150
something around measuring like get

00:11:41,910 --> 00:11:46,860
bounding client rec which needs to have

00:11:45,150 --> 00:11:50,340
all of the CSS that's affecting that

00:11:46,860 --> 00:11:52,290
element already resolved okay yeah this

00:11:50,340 --> 00:11:55,110
is actually exactly the case I had with

00:11:52,290 --> 00:11:58,140
my slider so I wanted this you know fill

00:11:55,110 --> 00:11:59,400
the in portion of my slider to depend on

00:11:58,140 --> 00:12:01,140
the width of the whole thing but of

00:11:59,400 --> 00:12:03,480
course I needed to render it out first

00:12:01,140 --> 00:12:05,220
and have all the CSS applied so I'm glad

00:12:03,480 --> 00:12:06,740
to know that it's okay for me to go

00:12:05,220 --> 00:12:09,120
ahead and measure that using the Dom API

00:12:06,740 --> 00:12:10,530
are there any other circumstances where

00:12:09,120 --> 00:12:12,540
I might want to drop down and use the

00:12:10,530 --> 00:12:15,570
native Dom if yet yeah yeah there are a

00:12:12,540 --> 00:12:18,150
few places any of this is a really good

00:12:15,570 --> 00:12:20,160
job of encapsulating everything that it

00:12:18,150 --> 00:12:22,170
does within the angular application

00:12:20,160 --> 00:12:24,300
context and doesn't really deal with the

00:12:22,170 --> 00:12:26,430
things that are also happening to be on

00:12:24,300 --> 00:12:28,050
your page but there may be times as a

00:12:26,430 --> 00:12:30,570
component author as an application

00:12:28,050 --> 00:12:33,030
author when you want to go outside of

00:12:30,570 --> 00:12:35,510
that context to find maybe some more

00:12:33,030 --> 00:12:38,210
information so an example we have here

00:12:35,510 --> 00:12:39,800
is if you're writing a component that

00:12:38,210 --> 00:12:41,810
maybe needs to have a different behavior

00:12:39,800 --> 00:12:44,510
based on whether the layout is

00:12:41,810 --> 00:12:46,490
left-to-right or right-to-left it's

00:12:44,510 --> 00:12:48,290
pretty common for people to put this der

00:12:46,490 --> 00:12:50,780
attribute that sets this on either the

00:12:48,290 --> 00:12:53,180
root HTML element or on the body element

00:12:50,780 --> 00:12:55,760
and so you may find yourself wanting to

00:12:53,180 --> 00:12:57,380
peek outside of the angular app to read

00:12:55,760 --> 00:12:59,240
those things okay

00:12:57,380 --> 00:13:01,640
that makes a lot sense but I remember

00:12:59,240 --> 00:13:03,950
Stephen was talking in his keynote about

00:13:01,640 --> 00:13:06,140
rendering your pages on the server side

00:13:03,950 --> 00:13:08,420
and is this going to cause a problem for

00:13:06,140 --> 00:13:11,120
that yeah that's a really good concern

00:13:08,420 --> 00:13:13,160
so Stephen was mentioning this

00:13:11,120 --> 00:13:14,810
experimental angular universe a little

00:13:13,160 --> 00:13:16,850
bit during the keynote which is a tool

00:13:14,810 --> 00:13:19,430
that allows you to pre render your

00:13:16,850 --> 00:13:21,380
angular application on the server so

00:13:19,430 --> 00:13:24,410
that the user can see something on their

00:13:21,380 --> 00:13:26,480
browser very very quickly and the

00:13:24,410 --> 00:13:29,480
problem is you noted is that you don't

00:13:26,480 --> 00:13:31,040
actually have a Dom to interact with

00:13:29,480 --> 00:13:34,580
when you're on the server environment

00:13:31,040 --> 00:13:36,140
and this is the biggest thing that we

00:13:34,580 --> 00:13:39,470
are thinking about in angular material

00:13:36,140 --> 00:13:41,390
when we are considering whether or not

00:13:39,470 --> 00:13:43,400
we are going to interact with the Domino

00:13:41,390 --> 00:13:46,250
certain case or what we keeping in mind

00:13:43,400 --> 00:13:48,170
and we found in looking through all the

00:13:46,250 --> 00:13:51,170
components and what they're doing that

00:13:48,170 --> 00:13:53,890
times when we need to drop down to the

00:13:51,170 --> 00:13:56,450
native API is fall into two categories

00:13:53,890 --> 00:13:58,940
there's things that happen only in

00:13:56,450 --> 00:14:01,190
response to user interaction with the

00:13:58,940 --> 00:14:03,710
application and things that have to

00:14:01,190 --> 00:14:05,540
happen on the initial render of a

00:14:03,710 --> 00:14:07,310
component okay I think I see where

00:14:05,540 --> 00:14:09,980
you're going with this so if it happens

00:14:07,310 --> 00:14:11,090
in response to a user interaction that's

00:14:09,980 --> 00:14:13,280
never going to happen when we're

00:14:11,090 --> 00:14:15,680
rendering on the server right so it

00:14:13,280 --> 00:14:17,810
should be okay to just go ahead and do

00:14:15,680 --> 00:14:19,430
things inside there exactly the user is

00:14:17,810 --> 00:14:23,270
never going to be able to click a button

00:14:19,430 --> 00:14:25,130
or scroll the page while the application

00:14:23,270 --> 00:14:27,320
is pre rendering those can only happen

00:14:25,130 --> 00:14:30,140
once the application has been bootstraps

00:14:27,320 --> 00:14:31,790
and was running on the browser okay

00:14:30,140 --> 00:14:35,120
unfortunately something may be my slider

00:14:31,790 --> 00:14:36,800
case falls into the other category since

00:14:35,120 --> 00:14:39,080
I want that field in section 2 B you

00:14:36,800 --> 00:14:41,810
know correct right away right and so

00:14:39,080 --> 00:14:43,850
this is a little trickier in order to do

00:14:41,810 --> 00:14:45,560
something on an initial render ideally

00:14:43,850 --> 00:14:47,240
you want to avoid situations like this

00:14:45,560 --> 00:14:49,610
as much as possible but you may still

00:14:47,240 --> 00:14:52,070
find times when you absolutely

00:14:49,610 --> 00:14:53,000
have to do some Dom manipulation in

00:14:52,070 --> 00:14:55,360
order to get things to look exactly

00:14:53,000 --> 00:14:57,380
right on that initial render and

00:14:55,360 --> 00:14:59,630
measuring something that's affected by

00:14:57,380 --> 00:15:04,220
CSS is one of the most common cases for

00:14:59,630 --> 00:15:07,820
this and angular Universal will provide

00:15:04,220 --> 00:15:10,430
a way eventually to provide these very

00:15:07,820 --> 00:15:14,240
small JavaScript snippets that you'll be

00:15:10,430 --> 00:15:16,459
able to run on the client on top of your

00:15:14,240 --> 00:15:17,450
pre-rendered application that can do

00:15:16,459 --> 00:15:19,490
little fix-ups

00:15:17,450 --> 00:15:28,010
like this on top of the pre-rendered

00:15:19,490 --> 00:15:31,339
code where you need to measure so

00:15:28,010 --> 00:15:33,980
another thing that we really need to

00:15:31,339 --> 00:15:35,540
make clear before we go any further

00:15:33,980 --> 00:15:37,220
talking about DOM and especially in the

00:15:35,540 --> 00:15:40,160
context of the last talk that just came

00:15:37,220 --> 00:15:42,740
up is when you are dealing directly with

00:15:40,160 --> 00:15:44,870
Dom API you have to be very very careful

00:15:42,740 --> 00:15:48,050
about the types of interactions that you

00:15:44,870 --> 00:15:50,690
have angular has really good protections

00:15:48,050 --> 00:15:53,120
built into it to guard against XSS

00:15:50,690 --> 00:15:55,399
vectors in your application and if you

00:15:53,120 --> 00:15:56,930
circumvent angular's API s and start

00:15:55,399 --> 00:15:59,959
building large swaths of your

00:15:56,930 --> 00:16:02,570
application on your own then you open

00:15:59,959 --> 00:16:05,000
the door to all sorts of vulnerabilities

00:16:02,570 --> 00:16:07,940
in your application so you want to avoid

00:16:05,000 --> 00:16:10,310
trying to build out much of your app

00:16:07,940 --> 00:16:11,990
that way okay yeah that sounds kind of

00:16:10,310 --> 00:16:14,690
scary so I'll try to just stick to

00:16:11,990 --> 00:16:17,980
simple things like you know adding and

00:16:14,690 --> 00:16:22,459
removing styles and adding a man system

00:16:17,980 --> 00:16:23,300
so reiterating on this when it comes to

00:16:22,459 --> 00:16:25,550
dealing with dominating their

00:16:23,300 --> 00:16:29,209
applications avoid it when it's possible

00:16:25,550 --> 00:16:31,490
prefer using angular api's but you may

00:16:29,209 --> 00:16:33,589
still encounter some situations where

00:16:31,490 --> 00:16:35,470
it's necessary to use the the platform

00:16:33,589 --> 00:16:39,800
native API s and when you do find these

00:16:35,470 --> 00:16:43,310
situations be very careful watch out for

00:16:39,800 --> 00:16:44,779
XSS and be mindful of what you're doing

00:16:43,310 --> 00:16:48,140
and whether or not it is going to play

00:16:44,779 --> 00:16:50,990
nicely with tools like and universal for

00:16:48,140 --> 00:16:53,390
pre rendering well okay thanks Jeremy I

00:16:50,990 --> 00:16:55,670
think now I pretty much got everything I

00:16:53,390 --> 00:16:57,949
need to go start making us some great

00:16:55,670 --> 00:17:00,170
components right material well there is

00:16:57,949 --> 00:17:02,930
one more thing I wanted to talk about in

00:17:00,170 --> 00:17:05,630
this talk before we

00:17:02,930 --> 00:17:08,750
ran out of time it is the angular zone

00:17:05,630 --> 00:17:11,449
the water just in particular having

00:17:08,750 --> 00:17:14,600
thoughtful interactions with that

00:17:11,449 --> 00:17:15,380
angular zone so if you if you don't know

00:17:14,600 --> 00:17:17,720
what it is

00:17:15,380 --> 00:17:20,779
zone is something that you lured appends

00:17:17,720 --> 00:17:23,720
on it provides an asynchronous execution

00:17:20,779 --> 00:17:26,199
context for the angular application oh I

00:17:23,720 --> 00:17:29,419
literally have no idea what that means

00:17:26,199 --> 00:17:31,970
so you you don't really have to know the

00:17:29,419 --> 00:17:33,799
full story but what you can kind of see

00:17:31,970 --> 00:17:36,230
it as the zones are angular's way of

00:17:33,799 --> 00:17:38,539
knowing about everything that happens in

00:17:36,230 --> 00:17:41,210
your application are caused by your

00:17:38,539 --> 00:17:44,000
application even asynchronous things

00:17:41,210 --> 00:17:46,970
like set timeout and XML HTTP request

00:17:44,000 --> 00:17:48,980
and as component authors you're

00:17:46,970 --> 00:17:51,470
wondering what can you do with it the

00:17:48,980 --> 00:17:54,140
primary reason you would interact with

00:17:51,470 --> 00:17:56,779
the zone is to have some more control

00:17:54,140 --> 00:18:00,830
over when change detection runs since

00:17:56,779 --> 00:18:03,529
zones is what drives angular deciding to

00:18:00,830 --> 00:18:06,350
run change detection I see so then in

00:18:03,529 --> 00:18:08,480
that case could I use the the angular

00:18:06,350 --> 00:18:11,409
zone to disable change detection one I

00:18:08,480 --> 00:18:13,820
don't want it so for example maybe I'm

00:18:11,409 --> 00:18:15,320
repositioning a tooltip as I scroll and

00:18:13,820 --> 00:18:17,510
I just want to do this by you know

00:18:15,320 --> 00:18:18,890
directly updating the Dom and I don't

00:18:17,510 --> 00:18:21,350
want change detection or some way I

00:18:18,890 --> 00:18:23,000
could do that right so you can inject

00:18:21,350 --> 00:18:24,919
the ng zone into your component and it

00:18:23,000 --> 00:18:27,620
has this method on it run outside

00:18:24,919 --> 00:18:30,169
angular and anything that you run in

00:18:27,620 --> 00:18:31,970
here is going to run outside of the

00:18:30,169 --> 00:18:34,669
angular zone application context and

00:18:31,970 --> 00:18:36,169
this won't cause change detection so in

00:18:34,669 --> 00:18:38,360
the example that you were just talking

00:18:36,169 --> 00:18:41,149
about you could add an event listener in

00:18:38,360 --> 00:18:43,010
here for scroll to recenter your tooltip

00:18:41,149 --> 00:18:44,840
and whatever the scroll happens you're

00:18:43,010 --> 00:18:46,940
not going to be running change detection

00:18:44,840 --> 00:18:49,700
which obviously could slow down your

00:18:46,940 --> 00:18:51,710
application another really common case

00:18:49,700 --> 00:18:53,750
for doing this is if you are dealing

00:18:51,710 --> 00:18:56,179
with requestanimationframe and running

00:18:53,750 --> 00:18:57,140
some custom animation you definitely

00:18:56,179 --> 00:18:59,960
don't want to be running change

00:18:57,140 --> 00:19:02,840
detection on every frame of an animation

00:18:59,960 --> 00:19:07,000
so using this you can avoid that

00:19:02,840 --> 00:19:10,760
unintended slowdown on your application

00:19:07,000 --> 00:19:12,289
okay well now like I certainly know

00:19:10,760 --> 00:19:14,090
everything I need to get started I know

00:19:12,289 --> 00:19:15,649
to be thoughtful about my custom

00:19:14,090 --> 00:19:16,010
elements and when to use them when not

00:19:15,649 --> 00:19:20,270
to you

00:19:16,010 --> 00:19:22,310
them and I know to think carefully about

00:19:20,270 --> 00:19:25,970
how my elements compose and work

00:19:22,310 --> 00:19:29,000
together and I know to be careful with

00:19:25,970 --> 00:19:30,440
my Dom interaction if I'm gonna have to

00:19:29,000 --> 00:19:34,970
interact with it directly you know watch

00:19:30,440 --> 00:19:37,310
out for XSS watch out for angle

00:19:34,970 --> 00:19:38,390
Universal and then I know to be

00:19:37,310 --> 00:19:40,730
thoughtful about my use of the angular

00:19:38,390 --> 00:19:42,320
zone right well but there's a few more

00:19:40,730 --> 00:19:45,350
things you should probably know of about

00:19:42,320 --> 00:19:47,840
building applications but we don't have

00:19:45,350 --> 00:19:49,430
time to talk about those today so be

00:19:47,840 --> 00:19:52,430
sure to follow our progress on angular

00:19:49,430 --> 00:19:54,230
material where we are applying a lot of

00:19:52,430 --> 00:19:56,780
these practices and learning new ones as

00:19:54,230 --> 00:19:58,280
we go these slides are available at the

00:19:56,780 --> 00:20:00,230
shortlink and I will also mention it's

00:19:58,280 --> 00:20:02,060
not actually Myles his first day on the

00:20:00,230 --> 00:20:05,050
angular team that was a narrative device

00:20:02,060 --> 00:20:10,400
for the talk thank you

00:20:05,050 --> 00:20:10,400

YouTube URL: https://www.youtube.com/watch?v=0BikjL858OQ


