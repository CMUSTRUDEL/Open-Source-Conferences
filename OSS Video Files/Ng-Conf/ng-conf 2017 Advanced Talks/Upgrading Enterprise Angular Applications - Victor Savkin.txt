Title: Upgrading Enterprise Angular Applications - Victor Savkin
Publication date: 2017-04-30
Playlist: ng-conf 2017 Advanced Talks
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:01,790 --> 00:00:07,049
okay cool

00:00:03,500 --> 00:00:10,170
Hey so I'm Victor and I'm co-founder of

00:00:07,049 --> 00:00:11,340
Naruto where we help up large companies

00:00:10,170 --> 00:00:13,710
to make great stuff from English as

00:00:11,340 --> 00:00:16,080
angular and today I want to talk to you

00:00:13,710 --> 00:00:18,660
about upgrade in large enterprise

00:00:16,080 --> 00:00:20,340
applications to the latest and greatest

00:00:18,660 --> 00:00:22,260
version of angular the word Enterprise

00:00:20,340 --> 00:00:25,050
of course is not well defined so what I

00:00:22,260 --> 00:00:27,930
mean by enterprise is large ginormous

00:00:25,050 --> 00:00:30,359
apps written by multiple teams from

00:00:27,930 --> 00:00:31,590
multiple lines of business usually using

00:00:30,359 --> 00:00:33,960
different routers different state

00:00:31,590 --> 00:00:36,540
management strategies it's very hard to

00:00:33,960 --> 00:00:39,329
upgrade those at once often for business

00:00:36,540 --> 00:00:40,890
reasons so what you need to do gradually

00:00:39,329 --> 00:00:43,860
so step by step component by component

00:00:40,890 --> 00:00:46,980
and that's what I'm going to show you

00:00:43,860 --> 00:00:49,399
today so I used to be at Google on

00:00:46,980 --> 00:00:51,750
angular team we've worked on many things

00:00:49,399 --> 00:00:53,879
Cody I change detection font and the

00:00:51,750 --> 00:00:57,059
router and I used to blow cat be soft

00:00:53,879 --> 00:00:58,920
and calm so these days Jeff cross and I

00:00:57,059 --> 00:01:01,469
add narwhals we left Google a few months

00:00:58,920 --> 00:01:04,049
ago which is very sad to start our own

00:01:01,469 --> 00:01:05,970
company I quote Narva will help teams to

00:01:04,049 --> 00:01:07,770
do successful with angular and these

00:01:05,970 --> 00:01:10,290
days I blow get blocked at Melwood at

00:01:07,770 --> 00:01:12,090
i/o so if you check it out and check out

00:01:10,290 --> 00:01:14,250
our site to read up what we do and how

00:01:12,090 --> 00:01:16,170
we work check out our blog because when

00:01:14,250 --> 00:01:18,150
high quality angular content there and

00:01:16,170 --> 00:01:19,979
also check out our books we wrote two

00:01:18,150 --> 00:01:22,350
books one of them is about the router

00:01:19,979 --> 00:01:24,869
and the answer wanted about the angle of

00:01:22,350 --> 00:01:26,840
war and also probably one of the most

00:01:24,869 --> 00:01:28,829
advanced books you can find about

00:01:26,840 --> 00:01:31,110
angular on the market which is really

00:01:28,829 --> 00:01:33,030
cool and if you stick to the very end of

00:01:31,110 --> 00:01:36,180
the talk I will give you coupons so you

00:01:33,030 --> 00:01:37,740
can get all this for free ok very good

00:01:36,180 --> 00:01:39,299
I also have some hard copies of the

00:01:37,740 --> 00:01:41,070
router book like physical copies so if

00:01:39,299 --> 00:01:44,340
you grab me after the talk I will give

00:01:41,070 --> 00:01:46,140
you one all right the first version of

00:01:44,340 --> 00:01:48,540
the talk was very long like an hour long

00:01:46,140 --> 00:01:50,070
so it'll like a few days ago it was

00:01:48,540 --> 00:01:52,950
around an hour long so I was trying to

00:01:50,070 --> 00:01:55,049
cut it in half and then I found out it's

00:01:52,950 --> 00:01:59,430
only 20 minutes so it's more than a half

00:01:55,049 --> 00:02:01,770
so I have to go really fast so be

00:01:59,430 --> 00:02:03,719
prepared so if you miss a little bit you

00:02:01,770 --> 00:02:06,719
know here and there don't worry that's

00:02:03,719 --> 00:02:10,289
fine fine you know I will share my

00:02:06,719 --> 00:02:11,790
slides so you can examine the slides you

00:02:10,289 --> 00:02:12,880
know after the talk we can grab me after

00:02:11,790 --> 00:02:14,440
the talk and I'll help you

00:02:12,880 --> 00:02:16,270
resolve our issues or answer all your

00:02:14,440 --> 00:02:18,880
questions so that's what I'm going to

00:02:16,270 --> 00:02:21,190
cover I'm going to talk about ng upgrade

00:02:18,880 --> 00:02:22,390
first just a little bit just a little

00:02:21,190 --> 00:02:24,130
bit I'm not going to cover the whole

00:02:22,390 --> 00:02:25,600
library because Pete and Georgia given

00:02:24,130 --> 00:02:28,900
an excellent talk about it in a few

00:02:25,600 --> 00:02:30,430
hours so watch the talk I'm going to

00:02:28,900 --> 00:02:31,030
just touch and to make sure you're not

00:02:30,430 --> 00:02:33,850
lost

00:02:31,030 --> 00:02:35,800
okay then I'm going to talk about the

00:02:33,850 --> 00:02:37,630
two main ways to approach upgrade and

00:02:35,800 --> 00:02:40,870
I've chosen vertical slice and

00:02:37,630 --> 00:02:43,150
horizontal slicing and then I'm going to

00:02:40,870 --> 00:02:46,450
talk about even more like an interesting

00:02:43,150 --> 00:02:48,280
aspect of upgrade code managing URL URL

00:02:46,450 --> 00:02:50,050
is a global immutable resource so doing

00:02:48,280 --> 00:02:51,640
this is very tricky so I want to show

00:02:50,050 --> 00:02:54,670
you a few things that you can do to make

00:02:51,640 --> 00:02:57,760
it easier and finally I'm going to show

00:02:54,670 --> 00:02:59,230
you sort of tease you to share how to

00:02:57,760 --> 00:03:00,940
upgrade like a real pro like with lazy

00:02:59,230 --> 00:03:01,900
load in pre loading pre-boot strapping

00:03:00,940 --> 00:03:05,140
to make it super fast and super

00:03:01,900 --> 00:03:06,640
efficient alright upgrade so great in

00:03:05,140 --> 00:03:08,320
individual components is what you do in

00:03:06,640 --> 00:03:10,060
this small ok when you have one

00:03:08,320 --> 00:03:13,720
component written English and you want

00:03:10,060 --> 00:03:15,160
to upgrade to angular for now so we have

00:03:13,720 --> 00:03:16,750
a solution the angular team has a

00:03:15,160 --> 00:03:19,000
solution for this problem called ng

00:03:16,750 --> 00:03:21,700
upgrade and that word library does

00:03:19,000 --> 00:03:23,280
basically this is your angular

00:03:21,700 --> 00:03:26,050
application and angular application

00:03:23,280 --> 00:03:28,600
entity of components and each of this

00:03:26,050 --> 00:03:31,030
components has an injector ok and we

00:03:28,600 --> 00:03:32,530
also have an engine module corresponding

00:03:31,030 --> 00:03:34,540
to your application and it has its own

00:03:32,530 --> 00:03:35,680
injector and essentially what happens is

00:03:34,540 --> 00:03:37,720
when angular tries to dissolve a

00:03:35,680 --> 00:03:39,640
dependency if it cannot find it in your

00:03:37,720 --> 00:03:41,650
component tree it would get it from the

00:03:39,640 --> 00:03:42,850
module injector it's that simple and if

00:03:41,650 --> 00:03:44,470
you lazy loading is way more complicated

00:03:42,850 --> 00:03:45,820
but you know let's pretend that's not

00:03:44,470 --> 00:03:47,640
the case you know just pretend this is

00:03:45,820 --> 00:03:50,740
the only thing we need to worry about

00:03:47,640 --> 00:03:52,780
because otherwise life is too harsh so

00:03:50,740 --> 00:03:54,700
ng upgrade essentially what it does it

00:03:52,780 --> 00:03:56,500
bootstraps in angularjs application and

00:03:54,700 --> 00:03:58,450
English one application next to the

00:03:56,500 --> 00:04:00,700
angle application in a very specific way

00:03:58,450 --> 00:04:03,130
and set it up in such a way that you

00:04:00,700 --> 00:04:04,480
angularjs injector can see you ng module

00:04:03,130 --> 00:04:06,370
injector so they can see gels

00:04:04,480 --> 00:04:08,530
injectables and you can interleave

00:04:06,370 --> 00:04:11,500
freely your angularjs and your angular

00:04:08,530 --> 00:04:13,180
components in one application ok it's an

00:04:11,500 --> 00:04:14,560
example of how you can do it again don't

00:04:13,180 --> 00:04:16,660
worry about the code you know it's fine

00:04:14,560 --> 00:04:18,609
if you don't understand every single

00:04:16,660 --> 00:04:20,919
line the point here just to show you how

00:04:18,609 --> 00:04:22,510
simple it is ok so here at the very top

00:04:20,919 --> 00:04:24,669
we are defining our angularjs

00:04:22,510 --> 00:04:26,130
application our angular JS module with

00:04:24,669 --> 00:04:28,430
all the source and component

00:04:26,130 --> 00:04:31,080
then we define our route energy module

00:04:28,430 --> 00:04:32,310
but we are going to bootstrap and after

00:04:31,080 --> 00:04:33,870
we're done bootstrapping it we are going

00:04:32,310 --> 00:04:36,240
to bootstrap our angularjs one

00:04:33,870 --> 00:04:39,990
application but from that angle for

00:04:36,240 --> 00:04:41,760
application okay let's see the simplest

00:04:39,990 --> 00:04:43,560
thing you can do to bootstrap a hybrid

00:04:41,760 --> 00:04:45,060
tab not the best one so if you have an

00:04:43,560 --> 00:04:46,590
interesting application don't do that

00:04:45,060 --> 00:04:47,900
but if you google for you that's what

00:04:46,590 --> 00:04:49,980
you'll find online

00:04:47,900 --> 00:04:52,410
so basically owns worry about the code

00:04:49,980 --> 00:04:53,640
just like you know ignore it what's

00:04:52,410 --> 00:04:55,380
important here that we have this

00:04:53,640 --> 00:04:57,780
capability that we can mix and match

00:04:55,380 --> 00:04:59,550
angularjs and regular components and the

00:04:57,780 --> 00:05:02,220
interesting question here is that how

00:04:59,550 --> 00:05:04,170
can we use this capability to in the

00:05:02,220 --> 00:05:06,960
most advantageous way so what patterns

00:05:04,170 --> 00:05:08,910
and strategies we can use to make us our

00:05:06,960 --> 00:05:12,090
business is successful there are two

00:05:08,910 --> 00:05:13,890
main ways to approach you upgrade your

00:05:12,090 --> 00:05:15,900
application vertical slice and

00:05:13,890 --> 00:05:17,940
horizontal slicing Before we jump with

00:05:15,900 --> 00:05:19,620
ourselves I will show you one strategy

00:05:17,940 --> 00:05:21,750
that's use regardless of which way you

00:05:19,620 --> 00:05:24,270
choose and the strategy is called the I

00:05:21,750 --> 00:05:26,460
bread shell the way it works is like

00:05:24,270 --> 00:05:29,100
this so you take your angularjs one

00:05:26,460 --> 00:05:31,020
application and exists in one legacy app

00:05:29,100 --> 00:05:32,400
like sell an existing application and

00:05:31,020 --> 00:05:34,200
you take the route component to that

00:05:32,400 --> 00:05:36,120
application and you upgraded from

00:05:34,200 --> 00:05:36,630
angularjs to angular okay the rest stays

00:05:36,120 --> 00:05:38,130
the same

00:05:36,630 --> 00:05:39,960
oh if you don't have an existing

00:05:38,130 --> 00:05:41,820
component you introduce one so we need

00:05:39,960 --> 00:05:43,590
to have a route so the bulk of your

00:05:41,820 --> 00:05:46,260
application is still written in English

00:05:43,590 --> 00:05:47,160
just one there is nothing there to test

00:05:46,260 --> 00:05:48,960
that's written in angular

00:05:47,160 --> 00:05:51,150
everything is Steven angler just one but

00:05:48,960 --> 00:05:53,730
technically that's an angular for an

00:05:51,150 --> 00:05:56,550
angular application by the dotted line

00:05:53,730 --> 00:05:59,970
indicates a component that will be

00:05:56,550 --> 00:06:01,800
loaded by the router okay all right so

00:05:59,970 --> 00:06:03,330
there are many ways to implement the

00:06:01,800 --> 00:06:04,710
strategy that's just one of them

00:06:03,330 --> 00:06:07,740
so what I'm going to what I'm doing here

00:06:04,710 --> 00:06:10,440
is I'm I'm defining a route component

00:06:07,740 --> 00:06:12,780
that has a single element in it which

00:06:10,440 --> 00:06:15,630
has an energy few so basically our

00:06:12,780 --> 00:06:16,350
angular app our angular app just 300

00:06:15,630 --> 00:06:18,510
that ng-view

00:06:16,350 --> 00:06:21,660
and then bootstraps bootstraps angularjs

00:06:18,510 --> 00:06:23,430
one then angularjs and bootstraps its

00:06:21,660 --> 00:06:25,500
router the router find the view and

00:06:23,430 --> 00:06:28,290
basically takes put some stuff into the

00:06:25,500 --> 00:06:29,640
view okay so the whole logic of your

00:06:28,290 --> 00:06:32,280
application is still written English as

00:06:29,640 --> 00:06:33,960
one the only thing that angular form the

00:06:32,280 --> 00:06:37,920
new angular does is the renders one

00:06:33,960 --> 00:06:39,510
element okay all right now we know that

00:06:37,920 --> 00:06:42,270
we can wrap our existing application

00:06:39,510 --> 00:06:44,670
into this very thin shell you know very

00:06:42,270 --> 00:06:46,560
very thin shell the question is how can

00:06:44,670 --> 00:06:48,480
we approach the upgrade of the rest of

00:06:46,560 --> 00:06:50,400
our application and one high level

00:06:48,480 --> 00:06:52,860
strategy that I recommend to use good

00:06:50,400 --> 00:06:56,130
vertical slicing and the way it works is

00:06:52,860 --> 00:06:57,990
as follows so often is not feasible or

00:06:56,130 --> 00:07:01,260
not possible to upgrade the whole app at

00:06:57,990 --> 00:07:02,940
once but you can do it round by round of

00:07:01,260 --> 00:07:05,760
screen by screen or sort of feature by

00:07:02,940 --> 00:07:07,950
feature in this case if you if you look

00:07:05,760 --> 00:07:11,220
at the route it's either written fully

00:07:07,950 --> 00:07:13,050
in English s or in England and one

00:07:11,220 --> 00:07:15,060
implication one nice thing about it is

00:07:13,050 --> 00:07:17,400
that you always have to deal with one

00:07:15,060 --> 00:07:18,780
angular at a time and English a

00:07:17,400 --> 00:07:20,460
complicated Beast so you know given

00:07:18,780 --> 00:07:22,230
these two is just sometimes other bit

00:07:20,460 --> 00:07:23,880
too painful and also having one that you

00:07:22,230 --> 00:07:25,530
need to look at and troubleshoot and

00:07:23,880 --> 00:07:27,660
debug through it's actually a good thing

00:07:25,530 --> 00:07:29,640
okay so every time we go to any screen

00:07:27,660 --> 00:07:32,700
the screen is eyes of truly written

00:07:29,640 --> 00:07:34,380
English s or in England so another way

00:07:32,700 --> 00:07:36,480
to think about it a sort of like top

00:07:34,380 --> 00:07:38,220
bottom we're going to look at all top

00:07:36,480 --> 00:07:40,440
level rounds of your application or top

00:07:38,220 --> 00:07:42,750
level screens we're going to take one of

00:07:40,440 --> 00:07:44,700
them and upgrade everything that's

00:07:42,750 --> 00:07:47,730
needed by the troweled of that screen

00:07:44,700 --> 00:07:49,560
get from angularjs to angular and this

00:07:47,730 --> 00:07:52,140
is a way to visualize it so we can start

00:07:49,560 --> 00:07:54,630
with an angularjs app we upgrade the

00:07:52,140 --> 00:07:56,490
first route and at this point as you can

00:07:54,630 --> 00:07:58,620
see we have to have two copies of the

00:07:56,490 --> 00:08:01,260
same component 1 and angular for another

00:07:58,620 --> 00:08:03,540
one in English yes but as we go further

00:08:01,260 --> 00:08:06,140
and the whole application is migrate it

00:08:03,540 --> 00:08:08,370
was to pick that duplication goes away

00:08:06,140 --> 00:08:09,930
so the app science of the strategy a

00:08:08,370 --> 00:08:11,580
fairly straightforward yes we need to do

00:08:09,930 --> 00:08:13,290
with one angular at a time which is very

00:08:11,580 --> 00:08:16,110
nice with easier to debug and easier to

00:08:13,290 --> 00:08:18,390
understand how migration or upgrade is

00:08:16,110 --> 00:08:20,550
encapsulated twisting around so if you

00:08:18,390 --> 00:08:22,560
have an organization with multiple teams

00:08:20,550 --> 00:08:25,140
from mouth to lines of business trying

00:08:22,560 --> 00:08:27,270
to do that upgrade doing this in this

00:08:25,140 --> 00:08:29,340
way waits ever since encapsulated we can

00:08:27,270 --> 00:08:31,380
do it independently it's very useful

00:08:29,340 --> 00:08:33,210
often it's impossible to say I'm going

00:08:31,380 --> 00:08:35,099
to upgrade this button and I'm going to

00:08:33,210 --> 00:08:37,169
force all of you to use my button you

00:08:35,099 --> 00:08:39,540
know for obvious reasons you like you

00:08:37,169 --> 00:08:40,680
know it's off you know like I don't need

00:08:39,540 --> 00:08:42,690
to worry about right now yes I'm not

00:08:40,680 --> 00:08:44,280
worried about upgrade right now so it's

00:08:42,690 --> 00:08:46,550
easy to do it completely independently

00:08:44,280 --> 00:08:48,480
and this strategy allows you to do that

00:08:46,550 --> 00:08:50,580
finally it's faster like your

00:08:48,480 --> 00:08:52,230
applications are faster because often if

00:08:50,580 --> 00:08:53,010
you go to an upgrade part of your app

00:08:52,230 --> 00:08:55,560
you don't

00:08:53,010 --> 00:08:57,570
you need to load angularjs or upgrade or

00:08:55,560 --> 00:08:59,480
your legacy app you know you can just do

00:08:57,570 --> 00:09:02,190
within new part of your application the

00:08:59,480 --> 00:09:03,750
downsides are pretty clear as well the

00:09:02,190 --> 00:09:06,210
first one is that if you follow the

00:09:03,750 --> 00:09:08,010
strategy to the tea very closely you

00:09:06,210 --> 00:09:10,170
have to maintain two versions of same

00:09:08,010 --> 00:09:11,430
components from time to time that's a

00:09:10,170 --> 00:09:14,460
full period of time maybe four months

00:09:11,430 --> 00:09:15,840
and it's very coarse-grained so when

00:09:14,460 --> 00:09:17,760
you're trying to upgrade the toast route

00:09:15,840 --> 00:09:19,830
to the first feature it may take a month

00:09:17,760 --> 00:09:21,090
or maybe a couple of months which may

00:09:19,830 --> 00:09:23,850
not be acceptable you have for your

00:09:21,090 --> 00:09:26,460
organization the opposite of that

00:09:23,850 --> 00:09:28,080
strategy is how DiSanto slicing all the

00:09:26,460 --> 00:09:29,820
cup great usable components first or

00:09:28,080 --> 00:09:31,590
bottom up so we start with the very

00:09:29,820 --> 00:09:33,870
bottom and we work our way up to the

00:09:31,590 --> 00:09:35,970
root of our application this is how it

00:09:33,870 --> 00:09:37,620
works so we look at our app we look at

00:09:35,970 --> 00:09:39,390
all inputs and date pickers material

00:09:37,620 --> 00:09:41,910
component stuff like that and we upgrade

00:09:39,390 --> 00:09:43,500
those first then we look at components

00:09:41,910 --> 00:09:45,870
that use those components and we update

00:09:43,500 --> 00:09:47,970
those so we do it over and over again

00:09:45,870 --> 00:09:49,920
until we reach application components

00:09:47,970 --> 00:09:51,480
managed State and at some point we're

00:09:49,920 --> 00:09:53,190
going to eat the very top of our

00:09:51,480 --> 00:09:57,330
application and the whole app is an

00:09:53,190 --> 00:10:00,240
angel for the implication of course is

00:09:57,330 --> 00:10:02,190
that if you open any screen you will

00:10:00,240 --> 00:10:04,620
have to deal with two angular's action

00:10:02,190 --> 00:10:07,560
at the same time which is usually not

00:10:04,620 --> 00:10:09,660
problematic but you know may be

00:10:07,560 --> 00:10:11,760
problematic at times and this how you

00:10:09,660 --> 00:10:13,290
can visualize it so you have an app we

00:10:11,760 --> 00:10:15,090
upgrade the route and sort of you know

00:10:13,290 --> 00:10:17,910
input some date pickers or material

00:10:15,090 --> 00:10:20,850
stuff we go up up until the whole app is

00:10:17,910 --> 00:10:23,880
in England for the upsides and downsides

00:10:20,850 --> 00:10:25,770
of flipped I mean obviously so the app

00:10:23,880 --> 00:10:27,840
sites are that it's easy to get started

00:10:25,770 --> 00:10:30,090
with so I can upgrade a single component

00:10:27,840 --> 00:10:32,460
today and ship it to prod tomorrow so

00:10:30,090 --> 00:10:34,650
it's finer grained also there is no code

00:10:32,460 --> 00:10:37,380
duplication every single component it's

00:10:34,650 --> 00:10:40,320
either written in angular for angular or

00:10:37,380 --> 00:10:41,880
in English yes the downsides are clear

00:10:40,320 --> 00:10:44,370
as well it's harder to debug and

00:10:41,880 --> 00:10:47,010
understand it's more complex it's not

00:10:44,370 --> 00:10:48,930
encapsulated so if I create an input all

00:10:47,010 --> 00:10:50,750
of you will be you know affected by my

00:10:48,930 --> 00:10:53,280
change which may not be ideal

00:10:50,750 --> 00:10:56,130
then it hinders refactoring and tooling

00:10:53,280 --> 00:10:59,010
so angular for angular is designed in

00:10:56,130 --> 00:11:00,600
such a way to enable static refactorings

00:10:59,010 --> 00:11:02,580
you know all the static stuff that we

00:11:00,600 --> 00:11:04,170
enjoy that's why typescript that's why

00:11:02,580 --> 00:11:06,780
the templating language is the way it is

00:11:04,170 --> 00:11:08,310
so angularjs one is not like that

00:11:06,780 --> 00:11:10,500
so when you use the strategy when you

00:11:08,310 --> 00:11:12,480
upgrade usable components you increase

00:11:10,500 --> 00:11:14,670
the number of integration points between

00:11:12,480 --> 00:11:16,230
the two frameworks and the downside is

00:11:14,670 --> 00:11:17,580
you lose some type safety so if you

00:11:16,230 --> 00:11:19,790
start in factoring stuff left and right

00:11:17,580 --> 00:11:22,650
like give me a break clarification

00:11:19,790 --> 00:11:25,950
finally it may hinder performance what I

00:11:22,650 --> 00:11:27,330
mean by that is is that on any page no

00:11:25,950 --> 00:11:28,950
matter where you go you have to low to

00:11:27,330 --> 00:11:30,840
angular's you need to shoot more code to

00:11:28,950 --> 00:11:32,700
the client most life you have to ship

00:11:30,840 --> 00:11:34,740
your legacy at will you exist in app to

00:11:32,700 --> 00:11:37,520
the client angularjs 1 which is large

00:11:34,740 --> 00:11:40,920
framework to the client so it is slower

00:11:37,520 --> 00:11:42,810
all right so those are the two main

00:11:40,920 --> 00:11:44,970
approaches to upgrade vertical

00:11:42,810 --> 00:11:47,160
horizontal now let's talk about managing

00:11:44,970 --> 00:11:48,810
the URL and why it's tricky and it is

00:11:47,160 --> 00:11:51,030
shrieking mostly because the global

00:11:48,810 --> 00:11:53,190
mutable object that the user can

00:11:51,030 --> 00:11:55,920
interact with directly so when you have

00:11:53,190 --> 00:11:58,320
two actors like two angular two routers

00:11:55,920 --> 00:12:03,000
trying to you know update the URL you

00:11:58,320 --> 00:12:05,100
almost always in a lot of pain so there

00:12:03,000 --> 00:12:06,750
are two setups I see but when it comes

00:12:05,100 --> 00:12:08,790
to managing through the URL that I want

00:12:06,750 --> 00:12:11,400
to talk about the first one is single

00:12:08,790 --> 00:12:12,810
ownership or simplest so the way it

00:12:11,400 --> 00:12:16,440
works is as follows let's say we have an

00:12:12,810 --> 00:12:18,270
app with five routes okay and let's say

00:12:16,440 --> 00:12:20,490
we use the vertical slash and strategy

00:12:18,270 --> 00:12:22,830
to upgrade one of the routes from

00:12:20,490 --> 00:12:25,080
angularjs to angular so what will happen

00:12:22,830 --> 00:12:28,470
here if we use this single ownership

00:12:25,080 --> 00:12:30,600
setup is that every single URL or every

00:12:28,470 --> 00:12:32,640
single route will either be managed by

00:12:30,600 --> 00:12:35,339
angularjs and the angularjs router

00:12:32,640 --> 00:12:37,410
obeying glar or the new angular out

00:12:35,339 --> 00:12:40,580
every single route has a single owner

00:12:37,410 --> 00:12:43,050
and it simplifies a lot of sense okay

00:12:40,580 --> 00:12:46,260
there are many ways to implement it one

00:12:43,050 --> 00:12:48,330
of them is sibling out as a strategy

00:12:46,260 --> 00:12:50,610
that I like to recommend to the people I

00:12:48,330 --> 00:12:51,930
work with this is how it works

00:12:50,610 --> 00:12:55,260
so we start with our top level component

00:12:51,930 --> 00:12:56,910
and what it has is just two outlets the

00:12:55,260 --> 00:12:58,800
router outlet which is the outlet food

00:12:56,910 --> 00:13:00,450
angular for the new Engram work or for

00:12:58,800 --> 00:13:02,190
the new router and ng-view

00:13:00,450 --> 00:13:04,440
or if you use the you are at our UI view

00:13:02,190 --> 00:13:07,820
which corresponds the basic is an outlet

00:13:04,440 --> 00:13:10,680
for the UI router or the angle 1 router

00:13:07,820 --> 00:13:13,410
and the way it works is at any point in

00:13:10,680 --> 00:13:15,510
time only one router actually shown

00:13:13,410 --> 00:13:17,610
stuff is the only one outlet is actually

00:13:15,510 --> 00:13:18,959
you know present the other one is empty

00:13:17,610 --> 00:13:20,050
so you flip between the two when you

00:13:18,959 --> 00:13:22,089
navigate from the

00:13:20,050 --> 00:13:25,149
sipar to the app to the new part back in

00:13:22,089 --> 00:13:28,029
force so we defined our root component

00:13:25,149 --> 00:13:30,490
like this then what we do is we define

00:13:28,029 --> 00:13:32,980
the route floating migrate for the

00:13:30,490 --> 00:13:35,920
upgraded feature yeah as we do right now

00:13:32,980 --> 00:13:38,800
in Anglophone and then we need to tell

00:13:35,920 --> 00:13:40,750
the new router not to bother with the

00:13:38,800 --> 00:13:42,850
like with old URL but if you don't if

00:13:40,750 --> 00:13:44,620
you don't do that the new route or go

00:13:42,850 --> 00:13:46,570
try to like change the URL and it's

00:13:44,620 --> 00:13:48,670
going to be like a shitshow so you want

00:13:46,570 --> 00:13:51,040
to avoid that and it's easy to do is

00:13:48,670 --> 00:13:53,260
just define a custom URL handle strategy

00:13:51,040 --> 00:13:54,970
and you just turn the router hey if it

00:13:53,260 --> 00:13:56,890
starts with features to use a URL starts

00:13:54,970 --> 00:13:59,170
with feature to just you know handle if

00:13:56,890 --> 00:14:01,380
not unload everything you know someone

00:13:59,170 --> 00:14:03,459
else to take care of stuff all right

00:14:01,380 --> 00:14:05,260
again don't worry about the code too

00:14:03,459 --> 00:14:07,060
much the point here is very very simple

00:14:05,260 --> 00:14:09,300
to do and I will point you to a blog

00:14:07,060 --> 00:14:11,380
post it shows you how to do it in depth

00:14:09,300 --> 00:14:13,329
and all the legacy stuff is still

00:14:11,380 --> 00:14:14,980
defined in your angularjs one

00:14:13,329 --> 00:14:17,170
configuration all right

00:14:14,980 --> 00:14:19,060
so mixed-ownership set up the

00:14:17,170 --> 00:14:20,800
mixed-ownership syrup is a bit more

00:14:19,060 --> 00:14:24,220
complicated on a quite a bit more

00:14:20,800 --> 00:14:26,260
complicated so how does it work it works

00:14:24,220 --> 00:14:28,810
as follows so we have an application and

00:14:26,260 --> 00:14:32,020
we we managed to upgrade a part of it

00:14:28,810 --> 00:14:34,270
but if you look at our URLs we have URLs

00:14:32,020 --> 00:14:36,370
where one part of the URL is managed by

00:14:34,270 --> 00:14:38,740
the new router and the other part is

00:14:36,370 --> 00:14:40,899
managed by the angularjs one router and

00:14:38,740 --> 00:14:43,510
it can happen if you have the same app

00:14:40,899 --> 00:14:45,160
wish a lots of dialogues but the main

00:14:43,510 --> 00:14:49,450
app has been migrated but the dialogue

00:14:45,160 --> 00:14:50,770
16 angularjs 1 or vice versa in the

00:14:49,450 --> 00:14:52,329
interest of time because the talk is

00:14:50,770 --> 00:14:54,430
very short I'm not going to go into

00:14:52,329 --> 00:14:56,950
details but essentially it is finally

00:14:54,430 --> 00:14:59,620
now accustomed Yohanan strategy we

00:14:56,950 --> 00:15:02,949
defined the extract and merge methods

00:14:59,620 --> 00:15:04,660
and those allow you to pretend that the

00:15:02,949 --> 00:15:06,880
angular just one part of the URL doesn't

00:15:04,660 --> 00:15:08,440
exist so you extract the part you care

00:15:06,880 --> 00:15:10,420
about and then when you change it you

00:15:08,440 --> 00:15:11,890
merge it back so you just like close

00:15:10,420 --> 00:15:16,870
your eyes and pretend that last part is

00:15:11,890 --> 00:15:19,690
not that I'll write the URL it's a good

00:15:16,870 --> 00:15:21,579
thing but if if no case lot of pain for

00:15:19,690 --> 00:15:24,130
me personally because it's global and

00:15:21,579 --> 00:15:24,699
mutable and that's why managing is very

00:15:24,130 --> 00:15:26,949
hard

00:15:24,699 --> 00:15:28,660
there are many setups you can use in

00:15:26,949 --> 00:15:30,070
your application and them two main ones

00:15:28,660 --> 00:15:32,110
I single ownership and mixed ownership

00:15:30,070 --> 00:15:33,730
and obviously if you can do the single

00:15:32,110 --> 00:15:34,240
ownership one you should do that because

00:15:33,730 --> 00:15:36,490
it's

00:15:34,240 --> 00:15:38,589
simpler there are many strategies to

00:15:36,490 --> 00:15:41,470
implement those two setups and one I

00:15:38,589 --> 00:15:43,089
like to use is hidden outlets which

00:15:41,470 --> 00:15:46,089
actually worked for both of them from

00:15:43,089 --> 00:15:48,820
single and mixed and unsurprisingly

00:15:46,089 --> 00:15:51,070
because the Euro management is a subset

00:15:48,820 --> 00:15:52,899
of state management all the

00:15:51,070 --> 00:15:55,720
considerations we have regarding the URL

00:15:52,899 --> 00:15:57,490
apply to state management as well it's

00:15:55,720 --> 00:16:00,490
more nuanced so I'm not going to go into

00:15:57,490 --> 00:16:03,430
details right now but it's like it

00:16:00,490 --> 00:16:05,260
sounds similar finally have a few

00:16:03,430 --> 00:16:07,649
minutes left I want to show you sort of

00:16:05,260 --> 00:16:10,839
like a teaser of what you can do if you

00:16:07,649 --> 00:16:13,480
try to upgrade your app you know in a

00:16:10,839 --> 00:16:15,130
hardcore way in particularly what you

00:16:13,480 --> 00:16:16,800
need to do and what you should try to do

00:16:15,130 --> 00:16:19,089
is to do the following

00:16:16,800 --> 00:16:20,920
so usually when you look at upgrade

00:16:19,089 --> 00:16:22,959
examples online and there are very few

00:16:20,920 --> 00:16:24,130
of those but if you find those usually

00:16:22,959 --> 00:16:26,920
what happens there and what I showed you

00:16:24,130 --> 00:16:29,290
before is we bootstrap our angularjs

00:16:26,920 --> 00:16:29,680
application right after we bootstrap our

00:16:29,290 --> 00:16:33,160
angular

00:16:29,680 --> 00:16:35,560
okay so angularjs one angular four and G

00:16:33,160 --> 00:16:37,060
upgrade your legacy app you have is all

00:16:35,560 --> 00:16:39,070
together in one bundle that you shoot to

00:16:37,060 --> 00:16:41,860
decline unload okay which is not

00:16:39,070 --> 00:16:43,600
performant one of the coolest things

00:16:41,860 --> 00:16:45,399
about the new router is that what you

00:16:43,600 --> 00:16:47,350
can do is you can lazy load stuff

00:16:45,399 --> 00:16:48,970
transparently it works really well

00:16:47,350 --> 00:16:52,450
I do you like it people seem to like it

00:16:48,970 --> 00:16:54,430
a lot so what we can do we can put it

00:16:52,450 --> 00:16:56,050
legacy stuff ok the angular jet not

00:16:54,430 --> 00:16:58,690
legacy stuff exists and stuff exists

00:16:56,050 --> 00:17:00,700
enough angular just 1 and G upgrade you

00:16:58,690 --> 00:17:03,459
exist in app it's a separate bundle and

00:17:00,700 --> 00:17:07,390
not load that until the user actually

00:17:03,459 --> 00:17:09,400
navigates to a legacy part 3 app ok this

00:17:07,390 --> 00:17:11,740
is one way how you can do it's a naive

00:17:09,400 --> 00:17:13,059
way of course it's more nuanced so let's

00:17:11,740 --> 00:17:15,550
look at it real quick so you just have a

00:17:13,059 --> 00:17:16,780
feeling of how it can be implemented so

00:17:15,550 --> 00:17:18,730
what we're going to do here what we're

00:17:16,780 --> 00:17:20,199
doing here is we're defining a new route

00:17:18,730 --> 00:17:22,390
which is essentially like a sink

00:17:20,199 --> 00:17:24,250
an empty path empty path now it can act

00:17:22,390 --> 00:17:26,439
as a sink so everything that we cannot

00:17:24,250 --> 00:17:28,660
match we are going to assume will be

00:17:26,439 --> 00:17:30,550
handled by English as one like we didn't

00:17:28,660 --> 00:17:32,470
recognize the route it must be angularjs

00:17:30,550 --> 00:17:34,450
one okay so what we are going to do we

00:17:32,470 --> 00:17:37,270
are going to load an angular 1 module

00:17:34,450 --> 00:17:39,820
lazily and that module looks like this

00:17:37,270 --> 00:17:42,130
that module basically contains energy

00:17:39,820 --> 00:17:44,169
upgrade it glows angularjs 100 it

00:17:42,130 --> 00:17:45,970
contains angularjs one and it will boot

00:17:44,169 --> 00:17:47,890
strap your angularjs one application

00:17:45,970 --> 00:17:50,440
there and it will do it only once

00:17:47,890 --> 00:17:52,810
angularjs is almost impossible to undo

00:17:50,440 --> 00:17:54,490
trap okay so it will do it only once so

00:17:52,810 --> 00:17:56,200
when you navigate back and forth the app

00:17:54,490 --> 00:17:58,570
will be present in memory okay so it

00:17:56,200 --> 00:18:00,760
will work fine you can do it in this way

00:17:58,570 --> 00:18:02,950
and essentially what we did is we took

00:18:00,760 --> 00:18:05,110
our angularjs one framework our legacy

00:18:02,950 --> 00:18:07,290
app all the machinery for upgrading and

00:18:05,110 --> 00:18:09,940
we wrapped it into a thin layer of

00:18:07,290 --> 00:18:12,360
angular like at scene module which will

00:18:09,940 --> 00:18:15,250
load lazily so very beautiful

00:18:12,360 --> 00:18:17,980
all right so app science it's very fast

00:18:15,250 --> 00:18:20,110
yes we do you don't pay any any cost if

00:18:17,980 --> 00:18:21,940
you don't go to the legacy part yeah yes

00:18:20,110 --> 00:18:24,580
it's as fast isn't angular for app so

00:18:21,940 --> 00:18:26,350
you should it's very good another upside

00:18:24,580 --> 00:18:29,230
is that you don't have to download the

00:18:26,350 --> 00:18:30,940
angularjs one and G up great or your

00:18:29,230 --> 00:18:33,940
legacy app you only need to download

00:18:30,940 --> 00:18:35,460
what's required to render your upgrade

00:18:33,940 --> 00:18:38,200
part which is pretty cool

00:18:35,460 --> 00:18:40,480
what's better you can preload angle

00:18:38,200 --> 00:18:42,100
adjust one so the user can interact with

00:18:40,480 --> 00:18:43,690
an updated part with a new part of your

00:18:42,100 --> 00:18:45,580
app in the background we're going to

00:18:43,690 --> 00:18:47,320
preload angularjs one you'll your leggy

00:18:45,580 --> 00:18:49,300
existing app all this stuff all this

00:18:47,320 --> 00:18:50,620
machinery while the user is still

00:18:49,300 --> 00:18:52,840
looking at the upgrade part of the

00:18:50,620 --> 00:18:55,030
screen but we can do even better we can

00:18:52,840 --> 00:18:57,190
pre bootstrap it so we can load all this

00:18:55,030 --> 00:18:59,170
code we can bootstrap your angular just

00:18:57,190 --> 00:19:00,880
run up in the background so when the

00:18:59,170 --> 00:19:04,780
user actually navigate say it's super

00:19:00,880 --> 00:19:07,000
fast it's like instant one downside it

00:19:04,780 --> 00:19:09,520
needs to be thought through ok

00:19:07,000 --> 00:19:11,710
mostly because angularjs one allows you

00:19:09,520 --> 00:19:14,650
so much flexibility that at times it's

00:19:11,710 --> 00:19:17,080
hard to basically sometimes it's just

00:19:14,650 --> 00:19:19,270
hard you know so you need to think it

00:19:17,080 --> 00:19:22,210
through if you want to learn more check

00:19:19,270 --> 00:19:24,250
out our blog those are the two links you

00:19:22,210 --> 00:19:26,170
can use to get the books for free get

00:19:24,250 --> 00:19:29,110
those today the coupon would be valid

00:19:26,170 --> 00:19:30,610
today and tomorrow ok there is a blog

00:19:29,110 --> 00:19:33,150
post you can check out about upgrading

00:19:30,610 --> 00:19:35,800
angular apps you can look at that one

00:19:33,150 --> 00:19:37,270
also I decided to write the book on up

00:19:35,800 --> 00:19:40,900
breaking apps because I'm doing it more

00:19:37,270 --> 00:19:43,560
and more so if you go to that URL you

00:19:40,900 --> 00:19:46,540
can find out more info about that book

00:19:43,560 --> 00:19:48,340
also say hi to boost I have the books I

00:19:46,540 --> 00:19:49,060
can give away for free and in general

00:19:48,340 --> 00:19:51,870
I'm a nice guy

00:19:49,060 --> 00:19:51,870
alright thank you

00:19:56,150 --> 00:20:01,930

YouTube URL: https://www.youtube.com/watch?v=izpqQpD8RQ0


