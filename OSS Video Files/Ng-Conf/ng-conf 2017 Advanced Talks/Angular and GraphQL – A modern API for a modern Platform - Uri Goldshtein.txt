Title: Angular and GraphQL â€“ A modern API for a modern Platform - Uri Goldshtein
Publication date: 2017-04-30
Playlist: ng-conf 2017 Advanced Talks
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,660 --> 00:00:08,100
everyone I'm only from the polo team and

00:00:06,149 --> 00:00:12,300
we build grass QL open source

00:00:08,100 --> 00:00:14,520
infrastructure I've been I've built

00:00:12,300 --> 00:00:16,410
angular integration with rescue L and

00:00:14,520 --> 00:00:18,180
currently in the past few months have

00:00:16,410 --> 00:00:20,010
been building the graph your

00:00:18,180 --> 00:00:23,430
subscriptions libraries which that's

00:00:20,010 --> 00:00:24,240
what lets you use the real-time over

00:00:23,430 --> 00:00:27,780
WebSockets

00:00:24,240 --> 00:00:29,180
with your graph QL application so I hope

00:00:27,780 --> 00:00:31,579
to talk a little bit about that today

00:00:29,180 --> 00:00:34,409
but I'll start with a bit of like

00:00:31,579 --> 00:00:39,089
introduction and then hopefully jump

00:00:34,409 --> 00:00:41,280
into the code so usually you will see

00:00:39,089 --> 00:00:44,249
the word data in all of my talks and

00:00:41,280 --> 00:00:47,729
slides and the reason is because very

00:00:44,249 --> 00:00:50,069
early on when I started using angular it

00:00:47,729 --> 00:00:54,479
was 0.9 version or something I build

00:00:50,069 --> 00:00:58,739
mobile apps and this very soon I

00:00:54,479 --> 00:01:01,139
realized that in order to build in a

00:00:58,739 --> 00:01:03,539
build consumer-facing app so absolutely

00:01:01,139 --> 00:01:06,210
but like real regular users are using

00:01:03,539 --> 00:01:08,549
and very very fast I realized that yet

00:01:06,210 --> 00:01:11,310
there's the rendering stuff that hold us

00:01:08,549 --> 00:01:13,530
back but also it's just like part of

00:01:11,310 --> 00:01:15,869
actually two there's two parts of that

00:01:13,530 --> 00:01:17,310
story one is like the rendering and

00:01:15,869 --> 00:01:20,579
everything and the second thing is how

00:01:17,310 --> 00:01:23,030
we handle data and the network and this

00:01:20,579 --> 00:01:27,030
is sometimes even a bigger battle neck

00:01:23,030 --> 00:01:28,979
now so like lately it's even been the

00:01:27,030 --> 00:01:32,369
any critic biomech because the angular

00:01:28,979 --> 00:01:34,320
team keeps constantly like solving the

00:01:32,369 --> 00:01:36,750
rendering and the performance problems

00:01:34,320 --> 00:01:39,119
of our apps right every version they

00:01:36,750 --> 00:01:41,039
release it gets the bundle gets smaller

00:01:39,119 --> 00:01:44,460
the rendering gets faster and basically

00:01:41,039 --> 00:01:47,939
now we can build like super fast apps

00:01:44,460 --> 00:01:49,890
and this is no longer our our like this

00:01:47,939 --> 00:01:52,499
doesn't stop us from building those like

00:01:49,890 --> 00:01:55,979
really cool really slick apps but then

00:01:52,499 --> 00:01:58,950
there's the network now to show you just

00:01:55,979 --> 00:02:00,240
how critical this this part of your app

00:01:58,950 --> 00:02:02,429
is I'll just show you a few examples

00:02:00,240 --> 00:02:04,799
like really quick examples first thing

00:02:02,429 --> 00:02:07,140
is that you can see here just a regular

00:02:04,799 --> 00:02:09,810
form and some Vinny can you come comment

00:02:07,140 --> 00:02:12,090
to the forum and then I'm sending it to

00:02:09,810 --> 00:02:13,280
the server obviously it takes time to go

00:02:12,090 --> 00:02:15,440
to the network so and

00:02:13,280 --> 00:02:17,900
spinner or something on it that's fine

00:02:15,440 --> 00:02:21,500
the rendering here doesn't make it super

00:02:17,900 --> 00:02:23,480
fast everything is great but look at the

00:02:21,500 --> 00:02:26,720
other look at this left side of the

00:02:23,480 --> 00:02:28,970
example now we have actually the user

00:02:26,720 --> 00:02:31,730
submitting a comment even though it's

00:02:28,970 --> 00:02:34,310
the same it's the same network it's the

00:02:31,730 --> 00:02:36,200
same server it's the same app it gets

00:02:34,310 --> 00:02:38,720
instant feedback the user thinks it's

00:02:36,200 --> 00:02:40,550
instantly it feels like native and when

00:02:38,720 --> 00:02:42,920
you think about apps like Facebook when

00:02:40,550 --> 00:02:45,200
you click the like button or you submit

00:02:42,920 --> 00:02:48,320
a comment there's no spinner it happens

00:02:45,200 --> 00:02:51,140
instantly and those are and if your

00:02:48,320 --> 00:02:52,730
users expect that another thing that is

00:02:51,140 --> 00:02:55,570
funny you can look at this app and

00:02:52,730 --> 00:02:58,340
navigating back and forth between pages

00:02:55,570 --> 00:03:00,470
doesn't look like very like special

00:02:58,340 --> 00:03:03,200
thing but again let's compare the same

00:03:00,470 --> 00:03:06,200
app with some of the methods we can use

00:03:03,200 --> 00:03:09,470
in order to to make the network latency

00:03:06,200 --> 00:03:11,570
better so first thing that I do is when

00:03:09,470 --> 00:03:13,760
I'm like hovering over the comments and

00:03:11,570 --> 00:03:16,040
prefetching improve I'm sending the

00:03:13,760 --> 00:03:18,799
network a request before I even go to

00:03:16,040 --> 00:03:21,380
that page and when I go back I just use

00:03:18,799 --> 00:03:23,810
the cache in a data that are already got

00:03:21,380 --> 00:03:27,290
so you can see how big of a different is

00:03:23,810 --> 00:03:29,360
is and there's many more things around

00:03:27,290 --> 00:03:32,510
it right like also when we handle data

00:03:29,360 --> 00:03:34,100
and the network is not super easy and we

00:03:32,510 --> 00:03:35,780
should have a framework called library

00:03:34,100 --> 00:03:37,880
that handles that for us exactly like

00:03:35,780 --> 00:03:40,250
the angular team handles the rest of the

00:03:37,880 --> 00:03:42,019
rendering and the components for us so

00:03:40,250 --> 00:03:44,600
this is what we do in a polo in Apollo

00:03:42,019 --> 00:03:46,430
we basically we solve we give you a

00:03:44,600 --> 00:03:48,230
library in a framework to solve those

00:03:46,430 --> 00:03:51,620
network problems in the data management

00:03:48,230 --> 00:03:53,959
problems inside your apps so you can

00:03:51,620 --> 00:03:56,269
have like a consistent and open source

00:03:53,959 --> 00:03:57,950
way to do it and we work really closely

00:03:56,269 --> 00:03:59,600
with the angular team so we are always

00:03:57,950 --> 00:04:03,230
aligned with their needs and what

00:03:59,600 --> 00:04:05,750
they're we're missing that we're helping

00:04:03,230 --> 00:04:09,410
them like solving those parts they are

00:04:05,750 --> 00:04:11,150
not doing now I think that this app is

00:04:09,410 --> 00:04:13,190
the most iconic app that we can talk

00:04:11,150 --> 00:04:16,400
about to see that like what's the

00:04:13,190 --> 00:04:19,760
biggest thing that the best example for

00:04:16,400 --> 00:04:22,250
like giving good user experience in 2012

00:04:19,760 --> 00:04:24,770
or later 2011 Facebook released their

00:04:22,250 --> 00:04:26,060
first native mobile app and everyone is

00:04:24,770 --> 00:04:27,629
talked about the fact that they can

00:04:26,060 --> 00:04:30,300
switch from html5

00:04:27,629 --> 00:04:32,879
to native mobile which is the rendering

00:04:30,300 --> 00:04:34,710
part and that's true that means a lot of

00:04:32,879 --> 00:04:36,569
stuff but angular let's say with the

00:04:34,710 --> 00:04:38,849
recent version solve that problem for us

00:04:36,569 --> 00:04:42,960
but what people are forgetting is this

00:04:38,849 --> 00:04:46,189
app actually created graph QL graphical

00:04:42,960 --> 00:04:48,810
was created for this app and this was

00:04:46,189 --> 00:04:50,009
the second part of the story of why

00:04:48,810 --> 00:04:53,879
today this is the most successful

00:04:50,009 --> 00:04:56,789
consumer facing up in the world and

00:04:53,879 --> 00:04:58,379
today graph QL is used by all of

00:04:56,789 --> 00:05:02,129
Facebook in everywhere in facebook

00:04:58,379 --> 00:05:04,500
they're using graph tool and in 2011 a

00:05:02,129 --> 00:05:06,930
16 the open source region since then

00:05:04,500 --> 00:05:09,000
it's been using github internally and

00:05:06,930 --> 00:05:11,610
out in for the third party API and

00:05:09,000 --> 00:05:12,960
basically all the industry right now and

00:05:11,610 --> 00:05:15,629
I'm not saying all the imagery but a lot

00:05:12,960 --> 00:05:17,219
of like large consumer facing apps in

00:05:15,629 --> 00:05:20,370
the industry are moving into that and

00:05:17,219 --> 00:05:22,729
for us is like open source developers

00:05:20,370 --> 00:05:25,379
build infrastructure to have those

00:05:22,729 --> 00:05:27,839
companies some of them is our clients is

00:05:25,379 --> 00:05:31,759
really like humbling and really weird

00:05:27,839 --> 00:05:34,680
experience so today I'm gonna talk so I

00:05:31,759 --> 00:05:37,439
created like a demo app like a washed up

00:05:34,680 --> 00:05:40,080
clone chat app but I have like very

00:05:37,439 --> 00:05:42,060
little time so if you want to check out

00:05:40,080 --> 00:05:44,159
the full code and also creating like

00:05:42,060 --> 00:05:46,889
step by step tutorial you can check out

00:05:44,159 --> 00:05:51,089
this it's on my this is my github

00:05:46,889 --> 00:05:53,009
profile and the code is there yeah and

00:05:51,089 --> 00:05:55,319
another thing that I want to show to

00:05:53,009 --> 00:05:58,020
target to say is that I'm going to solve

00:05:55,319 --> 00:05:59,909
basically I'm going to solve a few of

00:05:58,020 --> 00:06:04,050
the things here there's more the stuff

00:05:59,909 --> 00:06:06,419
that we solve but first of all I just

00:06:04,050 --> 00:06:08,310
want you to think about data in the

00:06:06,419 --> 00:06:10,110
network when you create in your apps and

00:06:08,310 --> 00:06:12,870
the second thing that I want to say is

00:06:10,110 --> 00:06:14,370
that every lines over any bullet here

00:06:12,870 --> 00:06:16,169
that you solve in your apps will make

00:06:14,370 --> 00:06:19,020
your apps a bit better and that's enough

00:06:16,169 --> 00:06:20,849
so even if you just solve the truth

00:06:19,020 --> 00:06:22,889
triple bullets your app will be better

00:06:20,849 --> 00:06:25,349
if you solve the second one it's red or

00:06:22,889 --> 00:06:27,060
so I'm going to go pretty fast but you

00:06:25,349 --> 00:06:32,759
can always watch me on YouTube in slow

00:06:27,060 --> 00:06:34,649
motion me so let's so just I'm going to

00:06:32,759 --> 00:06:36,449
talk now about the first two pretty

00:06:34,649 --> 00:06:38,969
obvious things we can do with the

00:06:36,449 --> 00:06:41,030
network one is just send less requests

00:06:38,969 --> 00:06:43,100
right like sending a lot of requests

00:06:41,030 --> 00:06:45,980
so let's let's just spend less of them

00:06:43,100 --> 00:06:48,320
and the second thing were lesson just

00:06:45,980 --> 00:06:50,390
less data over the network instead of

00:06:48,320 --> 00:06:53,570
saying that sending like minimal amount

00:06:50,390 --> 00:06:56,120
of data so let's look at how we do it

00:06:53,570 --> 00:06:58,520
today we use rest probably most apps use

00:06:56,120 --> 00:07:02,840
red and then let's say I want to render

00:06:58,520 --> 00:07:06,350
this checklist I'll show you the app by

00:07:02,840 --> 00:07:08,450
the way I didn't show you the app ideal

00:07:06,350 --> 00:07:10,670
just so I can you can see that it's real

00:07:08,450 --> 00:07:13,250
app and I can show you that and cool so

00:07:10,670 --> 00:07:15,380
this is the white subclone app the chess

00:07:13,250 --> 00:07:17,600
contacts all those stuff will focus on

00:07:15,380 --> 00:07:19,400
the chat app now if we're looking at

00:07:17,600 --> 00:07:21,830
this page the main page you consider

00:07:19,400 --> 00:07:23,960
them basically I have chats here and for

00:07:21,830 --> 00:07:28,370
each set I need to render some kind of

00:07:23,960 --> 00:07:33,050
information so in order to do that in

00:07:28,370 --> 00:07:35,060
rest what do we do basically we first of

00:07:33,050 --> 00:07:35,720
all we call like an endpoint let's say

00:07:35,060 --> 00:07:38,600
the user

00:07:35,720 --> 00:07:41,320
/id slash the chat we get all the

00:07:38,600 --> 00:07:44,240
searches that the user has and then we

00:07:41,320 --> 00:07:46,820
bring the server for each of those set

00:07:44,240 --> 00:07:49,940
checks now that means that we're sending

00:07:46,820 --> 00:07:51,740
multiple requests for the server like a

00:07:49,940 --> 00:07:55,070
lot of requests even if more we have

00:07:51,740 --> 00:07:56,900
easier more chairs and also by the way

00:07:55,070 --> 00:07:58,850
like usually when we're called the

00:07:56,900 --> 00:08:01,460
chests endpoint for example it will give

00:07:58,850 --> 00:08:04,160
us all the other information that Beach

00:08:01,460 --> 00:08:06,830
this endpoint holds sometimes we don't

00:08:04,160 --> 00:08:09,229
need this all information so two

00:08:06,830 --> 00:08:12,140
features that are really powerful with

00:08:09,229 --> 00:08:14,660
graph QL are first as clients we

00:08:12,140 --> 00:08:16,669
describe what information we want and

00:08:14,660 --> 00:08:19,160
we'll get just this information on the

00:08:16,669 --> 00:08:21,350
field level if we need the hero's name

00:08:19,160 --> 00:08:24,140
we'll get just the hero's name if we

00:08:21,350 --> 00:08:26,270
need the hero's name and height will get

00:08:24,140 --> 00:08:28,070
also depth so this is one thing that we

00:08:26,270 --> 00:08:30,530
can do in the second thing is that

00:08:28,070 --> 00:08:33,919
doesn't matter how many resources we

00:08:30,530 --> 00:08:36,380
query for example our chat and messages

00:08:33,919 --> 00:08:39,169
and users and all of those and doesn't

00:08:36,380 --> 00:08:41,120
matter how deep the I our key is we will

00:08:39,169 --> 00:08:43,430
get everything in one single response

00:08:41,120 --> 00:08:46,250
and we will get it in the structure that

00:08:43,430 --> 00:08:48,260
we want we will need to now get all

00:08:46,250 --> 00:08:51,500
kinds of like messages from the rest

00:08:48,260 --> 00:08:54,140
server sink to make sure that all the

00:08:51,500 --> 00:08:54,850
requests cut and then somehow build this

00:08:54,140 --> 00:08:56,530
structure

00:08:54,850 --> 00:09:00,640
we want in order to render to our eyes

00:08:56,530 --> 00:09:03,010
it will happen instantly so let's just

00:09:00,640 --> 00:09:07,470
look how it looks like really really sad

00:09:03,010 --> 00:09:10,120
so we have our chat app here let's just

00:09:07,470 --> 00:09:14,170
open up there follow dev tools which is

00:09:10,120 --> 00:09:17,200
just here and what do we basically want

00:09:14,170 --> 00:09:21,820
to get from the server we want all the

00:09:17,200 --> 00:09:24,580
chats and for each set we want for

00:09:21,820 --> 00:09:29,550
example the ID so we'll go for the

00:09:24,580 --> 00:09:37,330
server and if everything works

00:09:29,550 --> 00:09:40,030
maybe I'll refresh the page I'll close

00:09:37,330 --> 00:09:43,000
this thing so it again

00:09:40,030 --> 00:09:46,360
I'm very risk you because I'm doing

00:09:43,000 --> 00:09:49,690
network requests over the in life demo

00:09:46,360 --> 00:09:51,940
but it works so I get just this thing I

00:09:49,690 --> 00:09:54,340
get just the ID now if I want other

00:09:51,940 --> 00:09:56,050
field like updated there I'll request

00:09:54,340 --> 00:09:58,120
this thing and I'll get only updated

00:09:56,050 --> 00:09:59,830
that and that's fine that means we solve

00:09:58,120 --> 00:10:01,480
one problem we saw with sending the

00:09:59,830 --> 00:10:04,060
minimum amount of data over the network

00:10:01,480 --> 00:10:06,430
our apps are faster they consume less

00:10:04,060 --> 00:10:07,960
data over the network but the next thing

00:10:06,430 --> 00:10:09,280
we want to do is actually we want to get

00:10:07,960 --> 00:10:12,760
another resource we want to get the

00:10:09,280 --> 00:10:14,650
messages of each share and for each

00:10:12,760 --> 00:10:17,650
message we want to get let's say the

00:10:14,650 --> 00:10:20,260
content what we actually wrote here and

00:10:17,650 --> 00:10:24,490
we want to get the author and the author

00:10:20,260 --> 00:10:26,770
name and ID so I'll request that and

00:10:24,490 --> 00:10:28,750
I'll get back the structure that I can

00:10:26,770 --> 00:10:30,730
just render I don't need now to

00:10:28,750 --> 00:10:33,340
manipulate this structure I don't need

00:10:30,730 --> 00:10:35,080
to wait or sync anything I just need to

00:10:33,340 --> 00:10:37,240
put it in my templates and it works and

00:10:35,080 --> 00:10:39,160
this is very powerful but there's more

00:10:37,240 --> 00:10:41,290
things I can do for example I don't need

00:10:39,160 --> 00:10:44,140
all the messages I did in this view just

00:10:41,290 --> 00:10:45,190
the left one so I can just I have

00:10:44,140 --> 00:10:48,760
variables here

00:10:45,190 --> 00:10:50,860
and I can just call the less one so I'm

00:10:48,760 --> 00:10:54,010
not I don't want to get with graphical

00:10:50,860 --> 00:10:55,990
it's very very easy to just get exactly

00:10:54,010 --> 00:10:58,840
what you want and optimize your network

00:10:55,990 --> 00:11:01,050
so we just now solve two problems but we

00:10:58,840 --> 00:11:03,430
didn't put it in our in our angular app

00:11:01,050 --> 00:11:06,190
what do we need to do is in order to put

00:11:03,430 --> 00:11:09,310
it in our angular app well

00:11:06,190 --> 00:11:10,330
just skip this prepared code and I'll do

00:11:09,310 --> 00:11:13,870
the same here

00:11:10,330 --> 00:11:16,390
light coding to them super cool so I can

00:11:13,870 --> 00:11:18,130
just call this dota follow or whatever

00:11:16,390 --> 00:11:19,960
other client that I'm using I'll talk

00:11:18,130 --> 00:11:23,590
about later but about that in a second

00:11:19,960 --> 00:11:26,280
and I'll just do watch query which query

00:11:23,590 --> 00:11:28,480
I'll just what I'll do is just tell

00:11:26,280 --> 00:11:30,790
sending the query and the query is a

00:11:28,480 --> 00:11:33,880
graphical query it's not like a very

00:11:30,790 --> 00:11:36,640
very specific string and I'll just paste

00:11:33,880 --> 00:11:38,980
the thing from there and that's it

00:11:36,640 --> 00:11:42,100
that's all I need to do in order to put

00:11:38,980 --> 00:11:44,800
it in I in my app this works and it

00:11:42,100 --> 00:11:46,900
actually returns me and observable so

00:11:44,800 --> 00:11:53,410
now I can first of all I can assigned it

00:11:46,900 --> 00:11:56,380
to like this dot chair-like

00:11:53,410 --> 00:11:57,760
chat can equal that and also I can money

00:11:56,380 --> 00:11:59,830
do whatever I want to do with an

00:11:57,760 --> 00:12:02,200
observable I can map over it

00:11:59,830 --> 00:12:05,100
you know like take the result and I

00:12:02,200 --> 00:12:11,920
don't know do whatever I want basically

00:12:05,100 --> 00:12:15,280
trick result is it big enough I can even

00:12:11,920 --> 00:12:17,230
make it bigger so that's it that's

00:12:15,280 --> 00:12:21,670
basically all I need to do in order to

00:12:17,230 --> 00:12:25,150
use graphical in my app it works now as

00:12:21,670 --> 00:12:28,000
you can see here even my IDE recognize

00:12:25,150 --> 00:12:31,210
you can see here the small abalone like

00:12:28,000 --> 00:12:33,910
sign which is cool it recognized this is

00:12:31,210 --> 00:12:36,280
not like any arbitrary string I can get

00:12:33,910 --> 00:12:37,900
actually auto completion here of the

00:12:36,280 --> 00:12:40,240
things that I can actually bring from

00:12:37,900 --> 00:12:43,330
the server and if I write like I'll make

00:12:40,240 --> 00:12:44,410
a mistake here then it will highlight

00:12:43,330 --> 00:12:46,750
these things for me

00:12:44,410 --> 00:12:49,630
now think about it we have in like

00:12:46,750 --> 00:12:52,600
angular solve brandon type scripts so we

00:12:49,630 --> 00:12:56,140
can find like errors inside our own app

00:12:52,600 --> 00:12:59,950
when we work a in development time this

00:12:56,140 --> 00:13:01,690
is errors with you and your server in

00:12:59,950 --> 00:13:03,880
development time you don't even need to

00:13:01,690 --> 00:13:06,130
know your back-end developers that you

00:13:03,880 --> 00:13:07,839
get this error instantly and you can

00:13:06,130 --> 00:13:10,750
also by the way market in one single

00:13:07,839 --> 00:13:13,360
line of code so it really separates like

00:13:10,750 --> 00:13:16,030
you and your back-end developers in a

00:13:13,360 --> 00:13:18,280
very easy way so I'll remove this code

00:13:16,030 --> 00:13:19,100
just so I really want break my app

00:13:18,280 --> 00:13:23,000
because I'm not come

00:13:19,100 --> 00:13:25,640
myself and I'll go back oh and there's

00:13:23,000 --> 00:13:27,980
another thing so yeah I can query the

00:13:25,640 --> 00:13:29,450
server but one thing that I also want to

00:13:27,980 --> 00:13:31,520
do when I'm working with the servers is

00:13:29,450 --> 00:13:34,940
actually changing data like sending a

00:13:31,520 --> 00:13:36,710
post request in red and so the

00:13:34,940 --> 00:13:38,690
interesting thing about that that yeah

00:13:36,710 --> 00:13:41,780
first of all obviously you can do that

00:13:38,690 --> 00:13:44,000
so I'm pasting here like it's called a

00:13:41,780 --> 00:13:45,530
mutation it's basically means that I'm

00:13:44,000 --> 00:13:47,120
calling this function on the server the

00:13:45,530 --> 00:13:49,340
server tells me those are the functions

00:13:47,120 --> 00:13:51,110
that you can call those are divided and

00:13:49,340 --> 00:13:54,110
I'm calling a function just like I would

00:13:51,110 --> 00:13:56,290
call a function on my local machine but

00:13:54,110 --> 00:13:59,720
then but the nice thing is about

00:13:56,290 --> 00:14:01,370
mutations in graphical is that I don't

00:13:59,720 --> 00:14:04,520
know usually when you call a rest

00:14:01,370 --> 00:14:06,550
endpoint you get to in order to post a

00:14:04,520 --> 00:14:12,740
message or send a new data you get back

00:14:06,550 --> 00:14:14,450
true or 1 or null or whatever the server

00:14:12,740 --> 00:14:17,120
developer decides to return you in that

00:14:14,450 --> 00:14:19,220
specific time which is weird it's hard

00:14:17,120 --> 00:14:20,120
and we need to somehow work around it

00:14:19,220 --> 00:14:21,920
but that's how it goes

00:14:20,120 --> 00:14:25,100
but with graph QL we can actually

00:14:21,920 --> 00:14:28,040
specify in a query what we want to get

00:14:25,100 --> 00:14:30,740
back so I can create a new message

00:14:28,040 --> 00:14:33,680
and then I can send variables here by

00:14:30,740 --> 00:14:36,050
the way like you can just put it here

00:14:33,680 --> 00:14:39,970
and put the answer and everything

00:14:36,050 --> 00:14:46,850
I prepared of also this in advance just

00:14:39,970 --> 00:14:50,510
here so I won't break my demos and then

00:14:46,850 --> 00:14:51,290
when I'm sending that mutation if it

00:14:50,510 --> 00:14:54,110
will work

00:14:51,290 --> 00:14:57,980
and again the network is crazy but

00:14:54,110 --> 00:15:00,320
basically when it will work I will get

00:14:57,980 --> 00:15:03,590
back the new message that I just created

00:15:00,320 --> 00:15:06,020
so I can decide on what to display to

00:15:03,590 --> 00:15:08,450
the user when the message is actually

00:15:06,020 --> 00:15:10,490
created and I can respond to that I

00:15:08,450 --> 00:15:15,370
don't need to query again the server or

00:15:10,490 --> 00:15:18,290
whatever it is that I need to do okay so

00:15:15,370 --> 00:15:21,280
so this is just I just oh and I how to

00:15:18,290 --> 00:15:28,570
do it in angular just so I can show you

00:15:21,280 --> 00:15:32,150
I'll do it quickly I'll take this

00:15:28,570 --> 00:15:32,900
mutation and I'll just put it into my

00:15:32,150 --> 00:15:35,839
home

00:15:32,900 --> 00:15:38,060
and again I had it before without just

00:15:35,839 --> 00:15:41,930
do this it's exactly the same thing I'm

00:15:38,060 --> 00:15:44,510
doing this dot a poll dot mutate and I

00:15:41,930 --> 00:15:47,000
just need to send it a mutation in

00:15:44,510 --> 00:15:52,480
exactly the same way just paste it here

00:15:47,000 --> 00:15:52,480
and that's it oh I forgot the hell wait

00:15:53,500 --> 00:16:03,920
yeah yeah and I get it here and again I

00:16:01,190 --> 00:16:06,650
get a promise I can hear like get a

00:16:03,920 --> 00:16:08,420
promise or an observable with the new

00:16:06,650 --> 00:16:10,610
result that I decided and respond in

00:16:08,420 --> 00:16:12,650
whatever ways I want to do and obviously

00:16:10,610 --> 00:16:15,050
I need to send variable so I can

00:16:12,650 --> 00:16:19,970
actually send those variables for my

00:16:15,050 --> 00:16:26,480
code so yeah I'll just know this is the

00:16:19,970 --> 00:16:29,150
variables for that yeah I'll just call

00:16:26,480 --> 00:16:31,580
like the check ID and the user ID and

00:16:29,150 --> 00:16:36,050
everything so again so I won't break my

00:16:31,580 --> 00:16:37,400
app this is already existing here so

00:16:36,050 --> 00:16:41,660
that's everything you need to do in

00:16:37,400 --> 00:16:42,920
order to call the quality server and get

00:16:41,660 --> 00:16:47,630
the things you want from the server

00:16:42,920 --> 00:16:50,900
optimized for it and and also change

00:16:47,630 --> 00:16:54,050
data so we already solved this first

00:16:50,900 --> 00:16:55,550
bullet point if you stop here then

00:16:54,050 --> 00:16:58,010
that's enough okay

00:16:55,550 --> 00:16:59,900
like and what those things that I showed

00:16:58,010 --> 00:17:02,300
you now how to do it with Apollo but you

00:16:59,900 --> 00:17:03,830
can actually use they the angular HTTP

00:17:02,300 --> 00:17:06,290
service you just need to send this

00:17:03,830 --> 00:17:09,559
string to your server and it will work

00:17:06,290 --> 00:17:10,910
so for and so you already solve a lot of

00:17:09,559 --> 00:17:12,920
the problems over the network

00:17:10,910 --> 00:17:17,030
but there's more things we can solve if

00:17:12,920 --> 00:17:20,270
we're looking at data so first thing is

00:17:17,030 --> 00:17:23,270
actually we will now Oliver is how we

00:17:20,270 --> 00:17:25,730
manage data inside our app so in our app

00:17:23,270 --> 00:17:27,829
we now everything is a component and

00:17:25,730 --> 00:17:30,080
component is important because we can

00:17:27,829 --> 00:17:32,240
actually reuse components and they're

00:17:30,080 --> 00:17:34,160
self-contained so we can change the

00:17:32,240 --> 00:17:36,230
component if you want affect the

00:17:34,160 --> 00:17:40,040
components outside of it and this is

00:17:36,230 --> 00:17:41,929
nice until we call the server and so we

00:17:40,040 --> 00:17:44,840
where do we actually put those queries

00:17:41,929 --> 00:17:46,160
to the server one thing that we can do a

00:17:44,840 --> 00:17:47,900
lot of people are doing is actually

00:17:46,160 --> 00:17:50,150
called the server from the parent

00:17:47,900 --> 00:17:52,550
component that we expose all the data

00:17:50,150 --> 00:17:54,950
all the way up and then we'll call the

00:17:52,550 --> 00:17:57,710
server from there and that's valid but

00:17:54,950 --> 00:17:59,570
then if some of the like if one

00:17:57,710 --> 00:18:02,300
component changes we need to to not

00:17:59,570 --> 00:18:05,570
change all the hierarchy on top of the

00:18:02,300 --> 00:18:07,160
of the parent component so it's not you

00:18:05,570 --> 00:18:09,350
know it's not componentized anymore

00:18:07,160 --> 00:18:11,990
another thing we like to do is to call a

00:18:09,350 --> 00:18:14,360
service which is also nice but then

00:18:11,990 --> 00:18:17,270
again if I'm changing the service or

00:18:14,360 --> 00:18:19,520
changing one component this service is a

00:18:17,270 --> 00:18:21,320
central place so now it can break

00:18:19,520 --> 00:18:23,390
actually other components that use the

00:18:21,320 --> 00:18:25,640
same thing so we lost all the all our

00:18:23,390 --> 00:18:28,070
benefits of using components another

00:18:25,640 --> 00:18:30,350
thing if we we can do is actually put it

00:18:28,070 --> 00:18:33,110
inside your components but then we might

00:18:30,350 --> 00:18:35,330
call too many times to the server but

00:18:33,110 --> 00:18:37,820
it's all ok so has like its pluses and

00:18:35,330 --> 00:18:40,520
benefits and then what we do is we use

00:18:37,820 --> 00:18:42,140
redux or ng Rx and then this is cool

00:18:40,520 --> 00:18:44,630
because each component gets his own

00:18:42,140 --> 00:18:45,980
things and we have central place and we

00:18:44,630 --> 00:18:48,380
call the server from there

00:18:45,980 --> 00:18:51,590
but then again Redux is like the central

00:18:48,380 --> 00:18:54,170
places we need to call to and veg that

00:18:51,590 --> 00:18:55,880
basically can break her out it's

00:18:54,170 --> 00:18:58,000
basically like again a central place and

00:18:55,880 --> 00:19:01,100
we lost all the components like the

00:18:58,000 --> 00:19:03,470
benefits of components so what we really

00:19:01,100 --> 00:19:05,540
want to do is to use those queries

00:19:03,470 --> 00:19:07,640
inside our components each component

00:19:05,540 --> 00:19:10,160
will just say what it needs like

00:19:07,640 --> 00:19:12,320
basically how we draw an app on paper is

00:19:10,160 --> 00:19:15,110
the same basic thing and then we have

00:19:12,320 --> 00:19:18,260
like a like a super Redux or a super ng

00:19:15,110 --> 00:19:20,960
rx that understands from each component

00:19:18,260 --> 00:19:23,480
what it needs call the server and then

00:19:20,960 --> 00:19:25,610
brings back the data from the server to

00:19:23,480 --> 00:19:27,470
the component and when the component

00:19:25,610 --> 00:19:31,280
changed that's the only thing we need to

00:19:27,470 --> 00:19:33,290
change so if we have a component the

00:19:31,280 --> 00:19:35,330
only thing we need to change and it's we

00:19:33,290 --> 00:19:38,240
add something to the template that's the

00:19:35,330 --> 00:19:41,030
only thing we need to change so how do

00:19:38,240 --> 00:19:42,679
we use that in our apps well this is

00:19:41,030 --> 00:19:44,419
pretty easy the only thing we need to do

00:19:42,679 --> 00:19:47,059
is just do the same thing that I've done

00:19:44,419 --> 00:19:49,580
but in each component so I already have

00:19:47,059 --> 00:19:52,700
that this is the I have a chat page

00:19:49,580 --> 00:19:55,090
chest page which we saw before which

00:19:52,700 --> 00:19:56,999
query just for the ID of the chest and

00:19:55,090 --> 00:19:59,969
then again I guess

00:19:56,999 --> 00:20:01,909
check page item that queries all the

00:19:59,969 --> 00:20:06,229
things that the item actually means oh

00:20:01,909 --> 00:20:09,959
and there's mountains and it's beautiful

00:20:06,229 --> 00:20:12,059
so then I have the inner component they

00:20:09,959 --> 00:20:14,429
describe what it needs so if now I want

00:20:12,059 --> 00:20:18,119
to grow for example is it big enough

00:20:14,429 --> 00:20:21,089
yeah okay if I now want to go back here

00:20:18,119 --> 00:20:24,709
and add the field for example chess dots

00:20:21,089 --> 00:20:24,709
oh this is not big enough

00:20:25,189 --> 00:20:32,609
check dot whatever I can just take this

00:20:29,339 --> 00:20:35,429
whatever and put it actually in my query

00:20:32,609 --> 00:20:36,899
now if I'll put it here it will scream

00:20:35,429 --> 00:20:38,909
at me because it knows that the server

00:20:36,899 --> 00:20:40,829
doesn't do that and I don't know that

00:20:38,909 --> 00:20:43,439
already in development I don't need to

00:20:40,829 --> 00:20:45,689
go into production or calm I wait for my

00:20:43,439 --> 00:20:48,089
server developers to build that and it

00:20:45,689 --> 00:20:49,559
just works so this is the first benefit

00:20:48,089 --> 00:20:52,679
that you get from actually using a polo

00:20:49,559 --> 00:20:54,629
and not just craft just graph QL so we

00:20:52,679 --> 00:20:56,819
thought also the way we manage data

00:20:54,629 --> 00:20:58,859
inside our app so not only how we call

00:20:56,819 --> 00:21:01,499
the server but we're building a

00:20:58,859 --> 00:21:04,079
real-time chat app so we actually need

00:21:01,499 --> 00:21:06,329
to get information from the server

00:21:04,079 --> 00:21:09,419
pushed to us and then push to the right

00:21:06,329 --> 00:21:11,419
component so in baskerville we have

00:21:09,419 --> 00:21:14,189
something very similar that's called

00:21:11,419 --> 00:21:16,409
subscriptions which there's I don't have

00:21:14,189 --> 00:21:17,999
time to talk about today like about what

00:21:16,409 --> 00:21:19,889
subscription is and how can you really

00:21:17,999 --> 00:21:22,079
there's many ways of doing real-time but

00:21:19,889 --> 00:21:25,439
this is the most common and scalable way

00:21:22,079 --> 00:21:27,809
to do real-time in short basically what

00:21:25,439 --> 00:21:29,969
I said is I say I want to subscribe to a

00:21:27,809 --> 00:21:33,359
channel or something happen for example

00:21:29,969 --> 00:21:35,759
I want to subscribe to a message edit

00:21:33,359 --> 00:21:40,169
and then every time the message added I

00:21:35,759 --> 00:21:43,559
as the client developer decides oh I

00:21:40,169 --> 00:21:46,169
want to send to get back this code and

00:21:43,559 --> 00:21:48,839
then in order to do that I'm really

00:21:46,169 --> 00:21:50,759
short in time so I'll just really do it

00:21:48,839 --> 00:21:55,339
really quickly the only thing that I

00:21:50,759 --> 00:22:02,999
need to do in that where do I do this

00:21:55,339 --> 00:22:05,609
mmm ah here okay so I'll just paste it

00:22:02,999 --> 00:22:08,510
here again like before but then I get an

00:22:05,609 --> 00:22:10,910
observable and this observable will

00:22:08,510 --> 00:22:14,090
every time this thing has happened and I

00:22:10,910 --> 00:22:16,010
just tell myself what to do with this

00:22:14,090 --> 00:22:18,200
thing so here I'm just pushing the new

00:22:16,010 --> 00:22:19,880
message to the local store and I'll get

00:22:18,200 --> 00:22:22,070
the new message but I can just query the

00:22:19,880 --> 00:22:24,290
server again but I can respond in

00:22:22,070 --> 00:22:26,030
real-time for stuff that are happening

00:22:24,290 --> 00:22:28,850
on the server which is very very

00:22:26,030 --> 00:22:29,980
powerful okay I'm going to finish really

00:22:28,850 --> 00:22:32,480
soon and promise

00:22:29,980 --> 00:22:35,510
so there's many more things that we can

00:22:32,480 --> 00:22:37,010
do with Apollo I optimistic UI for

00:22:35,510 --> 00:22:39,710
example I have an example here but I

00:22:37,010 --> 00:22:42,790
don't have time to show it but it's in

00:22:39,710 --> 00:22:44,900
the in the example app that I showed you

00:22:42,790 --> 00:22:46,040
which is optimistic you guys what I

00:22:44,900 --> 00:22:47,809
showed you before that I'm actually

00:22:46,040 --> 00:22:50,299
clicking on submitting a message and

00:22:47,809 --> 00:22:52,640
instantly it's saved into my local

00:22:50,299 --> 00:22:54,320
storage and then it goes back to the

00:22:52,640 --> 00:22:56,630
server into whatever it needs we take

00:22:54,320 --> 00:22:58,730
care of that for you cashing them

00:22:56,630 --> 00:23:00,830
prefetching like you saw before but

00:22:58,730 --> 00:23:03,230
there's many more things like Sajan

00:23:00,830 --> 00:23:04,790
ation and bringing more i'm when i'm

00:23:03,230 --> 00:23:07,280
doing that generation bring in more data

00:23:04,790 --> 00:23:10,220
but I want to reuse the data that are

00:23:07,280 --> 00:23:11,960
already have or when I want to do story

00:23:10,220 --> 00:23:14,600
adoration it means that I want to render

00:23:11,960 --> 00:23:17,720
fast so I want to spend the data with

00:23:14,600 --> 00:23:19,850
the HTML so again we can follow you can

00:23:17,720 --> 00:23:22,160
do it really easily and many other

00:23:19,850 --> 00:23:25,100
things that you want to have once you

00:23:22,160 --> 00:23:27,380
actually realize that you need to take

00:23:25,100 --> 00:23:29,179
care of the data and how it flows in

00:23:27,380 --> 00:23:34,400
your app and you need to take care of

00:23:29,179 --> 00:23:36,440
the network so just one a sentence about

00:23:34,400 --> 00:23:38,840
backends because this is the most common

00:23:36,440 --> 00:23:41,360
question do I need to have a graphical

00:23:38,840 --> 00:23:44,600
back-end in order to use graph QL the

00:23:41,360 --> 00:23:46,850
answer is no there's what few few

00:23:44,600 --> 00:23:50,660
possibilities one is you can actually

00:23:46,850 --> 00:23:52,940
run and I if you look at my data profile

00:23:50,660 --> 00:23:54,380
so that as well just Google how to use

00:23:52,940 --> 00:23:58,370
graphical with rest today

00:23:54,380 --> 00:24:01,790
you can run graphical server on your

00:23:58,370 --> 00:24:04,400
clients so we can actually query change

00:24:01,790 --> 00:24:06,950
nothing but the client itself and call

00:24:04,400 --> 00:24:08,480
the server with the rest endpoint and

00:24:06,950 --> 00:24:10,610
still get the benefit of graphical

00:24:08,480 --> 00:24:13,070
inside your apps today without touching

00:24:10,610 --> 00:24:15,260
the server at all but then you can also

00:24:13,070 --> 00:24:17,360
take it one step further and build the

00:24:15,260 --> 00:24:19,190
middleware which will actually show

00:24:17,360 --> 00:24:21,570
solve all the problems that I showed you

00:24:19,190 --> 00:24:23,610
today and and query any

00:24:21,570 --> 00:24:24,630
data sources you can acquire existing

00:24:23,610 --> 00:24:28,230
rest endpoints

00:24:24,630 --> 00:24:30,930
databases microservices everything you

00:24:28,230 --> 00:24:33,480
need basically the answer for each graph

00:24:30,930 --> 00:24:36,930
year working with X is always yes

00:24:33,480 --> 00:24:38,910
because every field is the function and

00:24:36,930 --> 00:24:40,800
the function can do whatever it wants

00:24:38,910 --> 00:24:43,530
call the server endpoints call it micro

00:24:40,800 --> 00:24:45,870
service anything else and the third

00:24:43,530 --> 00:24:47,880
option is actually to you there's also

00:24:45,870 --> 00:24:50,250
like if you want to set up like a

00:24:47,880 --> 00:24:54,420
graphical server instantly then you can

00:24:50,250 --> 00:24:56,750
actually just write your schema like

00:24:54,420 --> 00:24:59,220
this is just an example of a really cool

00:24:56,750 --> 00:25:01,680
website called scheme hub you can write

00:24:59,220 --> 00:25:04,080
your schema here it's cool to see the

00:25:01,680 --> 00:25:07,380
drawings but whatever but then you can

00:25:04,080 --> 00:25:09,060
just deploy it into grad school or

00:25:07,380 --> 00:25:13,290
scaffold which is basically like

00:25:09,060 --> 00:25:16,920
firebase for for graph QL so you can

00:25:13,290 --> 00:25:19,440
deploy get instance like graticule

00:25:16,920 --> 00:25:21,770
back-end as a service and then with time

00:25:19,440 --> 00:25:25,700
because graph QL is an open source

00:25:21,770 --> 00:25:27,600
protocol you can replace this cool

00:25:25,700 --> 00:25:30,930
out-of-the-box backend with your

00:25:27,600 --> 00:25:32,940
existing back-end so for this important

00:25:30,930 --> 00:25:35,010
question of is it working with whatever

00:25:32,940 --> 00:25:38,850
I have today the answer is always yes

00:25:35,010 --> 00:25:41,670
so just to read more you can check out

00:25:38,850 --> 00:25:43,590
the polar data dome it says all the

00:25:41,670 --> 00:25:46,890
information there and you can check out

00:25:43,590 --> 00:25:48,550
a lot of examples on my github profile

00:25:46,890 --> 00:25:51,790
thank you

00:25:48,550 --> 00:25:51,790

YouTube URL: https://www.youtube.com/watch?v=rb5i8Bs7-k0


