Title: Automatic Progressive Web Apps using the Angular Mobile Toolkit   Maxim Salnikov
Publication date: 2017-04-30
Playlist: ng-conf 2017 Advanced Talks
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,030 --> 00:00:09,540
dear angular heroes what if I tell you

00:00:04,950 --> 00:00:11,580
with one simple shall I count you will

00:00:09,540 --> 00:00:13,290
make the users of your angular

00:00:11,580 --> 00:00:17,130
application happy

00:00:13,290 --> 00:00:20,609
what about near-instant loading of your

00:00:17,130 --> 00:00:24,779
application regardless of the network

00:00:20,609 --> 00:00:27,930
speed even in offline mode what about

00:00:24,779 --> 00:00:35,149
super easy setup of push notifications

00:00:27,930 --> 00:00:39,210
does it sound exciting if you remember

00:00:35,149 --> 00:00:42,420
yesterday's keynote angular pw a

00:00:39,210 --> 00:00:47,520
progressive web applications support was

00:00:42,420 --> 00:00:50,610
one of the key points there my name is

00:00:47,520 --> 00:00:53,640
Maxim technicals and I'm here to

00:00:50,610 --> 00:00:57,360
introduce you the efforts of angular

00:00:53,640 --> 00:01:00,449
team regarding creating of automatic

00:00:57,360 --> 00:01:02,760
progressive web applications and the

00:01:00,449 --> 00:01:07,760
resulting product is called angular

00:01:02,760 --> 00:01:07,760
mobile toolkit or just mobile toolkit I

00:01:08,990 --> 00:01:16,350
really love to present about PWA and its

00:01:13,200 --> 00:01:19,080
ecosystem because this is cutting edge

00:01:16,350 --> 00:01:22,740
of web development at the moment and as

00:01:19,080 --> 00:01:24,900
a UI engineer of product from the future

00:01:22,740 --> 00:01:27,360
this is not a joke I really love to be

00:01:24,900 --> 00:01:27,829
on this edge and sometimes beyond this

00:01:27,360 --> 00:01:32,420
edge

00:01:27,829 --> 00:01:35,820
I'm Google developer expert in angular I

00:01:32,420 --> 00:01:38,549
organize local angular meetups in Oslo

00:01:35,820 --> 00:01:41,759
where I live and also I am the organizer

00:01:38,549 --> 00:01:44,610
of legendary and he wagons conference in

00:01:41,759 --> 00:01:48,000
Copenhagen this is my Twitter please

00:01:44,610 --> 00:01:50,820
follow me I just posted the big slice

00:01:48,000 --> 00:01:53,040
one minute ago so you can always find

00:01:50,820 --> 00:01:57,600
these slides and many other awesome

00:01:53,040 --> 00:02:01,380
stuff there before going to mobile

00:01:57,600 --> 00:02:06,719
toolkit let me introduce you the concept

00:02:01,380 --> 00:02:10,390
of PWA and it good point to start this

00:02:06,719 --> 00:02:15,870
the impact it makes to web

00:02:10,390 --> 00:02:15,870
Apryl system let's list some milestones

00:02:16,050 --> 00:02:22,750
mid-nineties we create my homepage

00:02:19,350 --> 00:02:27,190
static websites or web pages we are

00:02:22,750 --> 00:02:31,060
webmasters javascript came and we were

00:02:27,190 --> 00:02:36,610
happy to entertain our users with some

00:02:31,060 --> 00:02:41,800
snowflakes during Christmastime a Jack's

00:02:36,610 --> 00:02:46,330
Revolution and it was the sync it makes

00:02:41,800 --> 00:02:49,180
us possible to send HTTP request and

00:02:46,330 --> 00:02:52,090
receive responses and process responses

00:02:49,180 --> 00:02:56,489
right from our application without need

00:02:52,090 --> 00:02:59,860
to reload the page then media choirs

00:02:56,489 --> 00:03:00,940
introduced the way to build responsive

00:02:59,860 --> 00:03:05,050
web design

00:03:00,940 --> 00:03:07,269
now our applications look great on any

00:03:05,050 --> 00:03:11,650
device any platform any screen

00:03:07,269 --> 00:03:15,600
resolution now in 2015

00:03:11,650 --> 00:03:17,220
PW a progressive web applications came

00:03:15,600 --> 00:03:22,090
what is it

00:03:17,220 --> 00:03:25,269
let's refer to Wikipedia first this is a

00:03:22,090 --> 00:03:28,810
methodology this is not a platform not

00:03:25,269 --> 00:03:33,579
framework not library this is actually a

00:03:28,810 --> 00:03:36,660
collection of browser API and some

00:03:33,579 --> 00:03:41,620
practices connected with this API

00:03:36,660 --> 00:03:45,340
second this is a hybrid and as any

00:03:41,620 --> 00:03:48,430
hybrid it inherits the best part from

00:03:45,340 --> 00:03:51,840
its component in our case this is web

00:03:48,430 --> 00:03:55,660
platform and native mobile applications

00:03:51,840 --> 00:03:58,570
platforms but do not be confused by the

00:03:55,660 --> 00:04:01,600
term hybrid this is not about hybrid and

00:03:58,570 --> 00:04:05,799
wild vacations at all remember the ones

00:04:01,600 --> 00:04:07,959
we built with awesome ionic and by the

00:04:05,799 --> 00:04:12,220
way ionic have its own support for

00:04:07,959 --> 00:04:14,560
progressive web applications from the

00:04:12,220 --> 00:04:18,549
same page there are 10 characteristics

00:04:14,560 --> 00:04:21,760
of progressive web application I bet you

00:04:18,549 --> 00:04:24,070
use some of these characteristics right

00:04:21,760 --> 00:04:27,760
here right now today so you

00:04:24,070 --> 00:04:31,960
create responsive layouts you surf your

00:04:27,760 --> 00:04:34,780
application using HTTP to keep security

00:04:31,960 --> 00:04:38,980
I want to emphasize some of them sweet

00:04:34,780 --> 00:04:41,350
clicker precise serviceworker this is

00:04:38,980 --> 00:04:45,190
the heart of progressive web application

00:04:41,350 --> 00:04:48,240
concept and this gives us the

00:04:45,190 --> 00:04:51,520
possibility to have connectivity

00:04:48,240 --> 00:04:53,230
independent experience so in general in

00:04:51,520 --> 00:04:56,500
super simple this is a man-in-the-middle

00:04:53,230 --> 00:04:59,950
it's a JavaScript that sits between your

00:04:56,500 --> 00:05:02,250
application and network and it fits in

00:04:59,950 --> 00:05:05,680
clients browser

00:05:02,250 --> 00:05:09,400
thanks to serviceworker we can create

00:05:05,680 --> 00:05:13,240
app shell architecture what is it's just

00:05:09,400 --> 00:05:16,180
a set of static files all we have in our

00:05:13,240 --> 00:05:19,360
application depth on the first visit we

00:05:16,180 --> 00:05:23,140
can take and put into the cache into the

00:05:19,360 --> 00:05:25,750
client browser cache it's not the

00:05:23,140 --> 00:05:29,110
regular cash it's special storage called

00:05:25,750 --> 00:05:32,320
cache and we use cache API to work with

00:05:29,110 --> 00:05:34,090
this what's next

00:05:32,320 --> 00:05:36,220
why do we need it there on the next

00:05:34,090 --> 00:05:39,880
requests of this resources by the

00:05:36,220 --> 00:05:42,400
browser we can solve this assets

00:05:39,880 --> 00:05:46,690
straight from the cache by passing the

00:05:42,400 --> 00:05:51,160
network so this is how we create offline

00:05:46,690 --> 00:05:55,810
experience last but not least we can

00:05:51,160 --> 00:05:58,840
reengage our users and entertain them by

00:05:55,810 --> 00:06:00,970
internet sometimes and know them by push

00:05:58,840 --> 00:06:03,820
notifications and there are 280 is

00:06:00,970 --> 00:06:08,080
responsible for this they are separate

00:06:03,820 --> 00:06:14,290
but often they work together push API

00:06:08,080 --> 00:06:17,830
and notifications API good for your

00:06:14,290 --> 00:06:21,400
better understanding of collection term

00:06:17,830 --> 00:06:25,180
in PW definition I listed some of

00:06:21,400 --> 00:06:29,380
involved api's so this is real umbrella

00:06:25,180 --> 00:06:32,740
of of service of browser API and it's

00:06:29,380 --> 00:06:34,990
all based on promises it's all a

00:06:32,740 --> 00:06:36,070
synchronous like the modern web should

00:06:34,990 --> 00:06:39,160
be

00:06:36,070 --> 00:06:42,250
cool now we are experts in progressive

00:06:39,160 --> 00:06:45,640
applications right back to mobile

00:06:42,250 --> 00:06:49,260
toolkit you can find it on a special

00:06:45,640 --> 00:06:52,810
website called mobile dot angular dot IO

00:06:49,260 --> 00:06:57,430
unfortunately 90% of the documentation

00:06:52,810 --> 00:06:59,380
is hopelessly outdated this is why it

00:06:57,430 --> 00:07:05,260
makes sense to listen the rest of

00:06:59,380 --> 00:07:08,170
sessions very carefully number one

00:07:05,260 --> 00:07:12,070
question in issue tracker of this github

00:07:08,170 --> 00:07:16,470
wrapper is where is mobile flag of the

00:07:12,070 --> 00:07:20,440
CLI it was there some times before and

00:07:16,470 --> 00:07:25,240
yes now the answer is simple

00:07:20,440 --> 00:07:27,820
there is no mobile but please do not

00:07:25,240 --> 00:07:32,560
pack your belongings we still here let's

00:07:27,820 --> 00:07:35,200
go to NPM to check what's there there

00:07:32,560 --> 00:07:39,040
are two package connected to mobile

00:07:35,200 --> 00:07:43,180
toolkit serviceworker and app shell

00:07:39,040 --> 00:07:47,260
let's start from the second one actually

00:07:43,180 --> 00:07:50,590
this is extra level of performance of

00:07:47,260 --> 00:07:53,350
episode introducing server-side

00:07:50,590 --> 00:07:57,580
rendering for immediate show something

00:07:53,350 --> 00:08:01,150
to our users also it introduces really

00:07:57,580 --> 00:08:04,270
great developer experience by having to

00:08:01,150 --> 00:08:06,970
special directive shall render and shall

00:08:04,270 --> 00:08:09,640
no render this gives us control on the

00:08:06,970 --> 00:08:13,720
visibility of component we want to have

00:08:09,640 --> 00:08:16,330
during render time and runtime for

00:08:13,720 --> 00:08:19,780
example spinner

00:08:16,330 --> 00:08:21,570
some progress versus some list of

00:08:19,780 --> 00:08:24,910
dynamic content

00:08:21,570 --> 00:08:27,940
unfortunately this package is not yet

00:08:24,910 --> 00:08:32,590
integrated into July so we skip it for

00:08:27,940 --> 00:08:37,440
today no worries we will still have the

00:08:32,590 --> 00:08:39,170
application shell the general one using

00:08:37,440 --> 00:08:42,680
service worker

00:08:39,170 --> 00:08:49,420
in our case this will be angular

00:08:42,680 --> 00:08:54,260
serviceworker or its shortening and GSW

00:08:49,420 --> 00:08:59,420
if we check the report there are four

00:08:54,260 --> 00:09:01,100
main parts bundle this is angular

00:08:59,420 --> 00:09:03,860
serviceworker itself

00:09:01,100 --> 00:09:06,920
this is JavaScript file regular and

00:09:03,860 --> 00:09:10,880
minimized versions so we take this file

00:09:06,920 --> 00:09:15,220
we put it in our distributive folder of

00:09:10,880 --> 00:09:19,610
our application we register it and we go

00:09:15,220 --> 00:09:23,420
second set of plugins for build systems

00:09:19,610 --> 00:09:26,540
so now this is plugin these are plugins

00:09:23,420 --> 00:09:30,820
for golf and web pack and these plugins

00:09:26,540 --> 00:09:34,010
help us to automate this process A+

00:09:30,820 --> 00:09:39,010
introduces some extra nice functionality

00:09:34,010 --> 00:09:42,460
we'll look at it later companion small

00:09:39,010 --> 00:09:44,300
library that helps us to organize

00:09:42,460 --> 00:09:48,020
communication between angular

00:09:44,300 --> 00:09:51,230
serviceworker and our application last

00:09:48,020 --> 00:09:55,310
but not least source code of angular

00:09:51,230 --> 00:09:58,130
serviceworker it will help us to extend

00:09:55,310 --> 00:10:00,860
it by our own functionality it has

00:09:58,130 --> 00:10:05,570
really interesting plugins system we'll

00:10:00,860 --> 00:10:08,720
have a look it's a bit later no more

00:10:05,570 --> 00:10:11,780
reason to wait let's go for this magic

00:10:08,720 --> 00:10:17,840
comment but let's just install it first

00:10:11,780 --> 00:10:20,950
and here it's magic comment actually no

00:10:17,840 --> 00:10:23,840
magic at all what it does it just says

00:10:20,950 --> 00:10:27,590
serviceworker field equals true in

00:10:23,840 --> 00:10:28,810
angular CLI jason we can do it just by

00:10:27,590 --> 00:10:34,250
hand

00:10:28,810 --> 00:10:37,520
next let's build a lock and important

00:10:34,250 --> 00:10:40,340
notice angular service worker makes

00:10:37,520 --> 00:10:45,140
sense and works only in production mode

00:10:40,340 --> 00:10:48,800
so do not forget to put this - - prot ok

00:10:45,140 --> 00:10:51,199
we built it succeeded next

00:10:48,800 --> 00:10:54,739
let's check what happened and our

00:10:51,199 --> 00:10:56,749
index.html there is new line appeared

00:10:54,739 --> 00:10:59,360
and this is just a registration of one

00:10:56,749 --> 00:11:04,369
more JavaScript okay plus there are

00:10:59,360 --> 00:11:06,769
three new files in this folder first one

00:11:04,369 --> 00:11:09,670
this is registration script a tiny

00:11:06,769 --> 00:11:12,619
script that registers the service worker

00:11:09,670 --> 00:11:15,139
second service worker itself that copied

00:11:12,619 --> 00:11:21,110
from this bundle part of angular service

00:11:15,139 --> 00:11:25,999
worker and some manifest ok where is the

00:11:21,110 --> 00:11:28,009
magic now if you serve this application

00:11:25,999 --> 00:11:31,939
from this folder or deployed somewhere

00:11:28,009 --> 00:11:34,369
if you open it once and then you can go

00:11:31,939 --> 00:11:37,239
to offline mode for example using chrome

00:11:34,369 --> 00:11:39,949
dev tools and magic will happen

00:11:37,239 --> 00:11:42,399
applications will work in offline mode

00:11:39,949 --> 00:11:46,579
without internet

00:11:42,399 --> 00:11:48,739
how does possible thanks to static

00:11:46,579 --> 00:11:51,529
content caching plug-in of angular

00:11:48,739 --> 00:11:55,490
serviceworker let's have a look at this

00:11:51,529 --> 00:11:59,329
manifest important notice probably if

00:11:55,490 --> 00:12:02,809
you heard about PWA you already know

00:11:59,329 --> 00:12:05,389
there is some manifest jason jason file

00:12:02,809 --> 00:12:08,420
with some settings do not be confused

00:12:05,389 --> 00:12:11,959
this is different so this manifest

00:12:08,420 --> 00:12:16,100
called MGF W manifest is a setting file

00:12:11,959 --> 00:12:19,369
for angular service worker it's not the

00:12:16,100 --> 00:12:22,189
one we have like like regular manifest

00:12:19,369 --> 00:12:24,439
for our PW so we will have two manifests

00:12:22,189 --> 00:12:28,040
one for service worker second for

00:12:24,439 --> 00:12:33,639
application what they're just list of

00:12:28,040 --> 00:12:37,759
files generated by see li plus some hash

00:12:33,639 --> 00:12:38,119
okay now we probably understand how it

00:12:37,759 --> 00:12:41,029
works

00:12:38,119 --> 00:12:44,269
angular service worker on it start takes

00:12:41,029 --> 00:12:48,759
this list of file and put it into this

00:12:44,269 --> 00:12:51,649
special storage called cache next on

00:12:48,759 --> 00:12:54,290
request of this file it just take this

00:12:51,649 --> 00:12:58,720
file from the cache instead of going to

00:12:54,290 --> 00:13:02,199
the network offline experience voila

00:12:58,720 --> 00:13:06,019
why this hash is

00:13:02,199 --> 00:13:09,050
probably for keeping track on version of

00:13:06,019 --> 00:13:12,139
the file we updated the file we

00:13:09,050 --> 00:13:14,629
regenerated the hash and this is a

00:13:12,139 --> 00:13:18,110
signal to angular serviceworker to send

00:13:14,629 --> 00:13:21,949
some message to application that update

00:13:18,110 --> 00:13:24,980
process could be started of course we

00:13:21,949 --> 00:13:27,879
don't don't want to generate this list

00:13:24,980 --> 00:13:31,040
and calculate this hash by hand

00:13:27,879 --> 00:13:36,490
fortunately angular CLI does it for us

00:13:31,040 --> 00:13:41,089
so this is one part of this integration

00:13:36,490 --> 00:13:44,930
one small nuance if you open your

00:13:41,089 --> 00:13:49,879
application built this way in the web

00:13:44,930 --> 00:13:54,500
browser in offline mode and you will use

00:13:49,879 --> 00:13:58,220
just a flash instead of full index.html

00:13:54,500 --> 00:14:02,209
address you will see our old good friend

00:13:58,220 --> 00:14:05,930
of line Dinah but it will work this

00:14:02,209 --> 00:14:09,350
index.html why because angular service

00:14:05,930 --> 00:14:12,079
worker expects explicit list of the

00:14:09,350 --> 00:14:14,750
files to be served from cache but we can

00:14:12,079 --> 00:14:18,559
easily solve it using plugin called

00:14:14,750 --> 00:14:23,959
route redirection it's super simple to

00:14:18,559 --> 00:14:27,740
setup it's just routine key and where to

00:14:23,959 --> 00:14:32,329
route obviously its index.html and what

00:14:27,740 --> 00:14:35,120
route must have option is flash we just

00:14:32,329 --> 00:14:39,230
want to solve this addressed as well

00:14:35,120 --> 00:14:42,350
next we can take all all the routes of

00:14:39,230 --> 00:14:47,079
our application and we can specify them

00:14:42,350 --> 00:14:50,870
with the exact match or just using

00:14:47,079 --> 00:14:52,879
prefix field equals true say that ok

00:14:50,870 --> 00:14:56,769
everything that has this prefix will be

00:14:52,879 --> 00:15:02,059
redirected in terms of service worker to

00:14:56,769 --> 00:15:07,899
index.html good super simple but you can

00:15:02,059 --> 00:15:11,839
ask me we have this mg SW manifest

00:15:07,899 --> 00:15:13,910
auto-generated write by angular CLI how

00:15:11,839 --> 00:15:15,360
could we specify this extra settings

00:15:13,910 --> 00:15:18,630
because they will be over

00:15:15,360 --> 00:15:23,339
on the next build what simple mechanism

00:15:18,630 --> 00:15:25,380
you just create same file file zip file

00:15:23,339 --> 00:15:27,510
with the same name and GSW manifest in

00:15:25,380 --> 00:15:32,750
the root folder of your application and

00:15:27,510 --> 00:15:42,510
on the build these two will be merged

00:15:32,750 --> 00:15:46,709
right merged merged sorry oh yes they

00:15:42,510 --> 00:15:50,250
merged let's have a look at our

00:15:46,709 --> 00:15:53,399
application in offline mode let it be on

00:15:50,250 --> 00:15:59,910
some mobile device but to be honest it

00:15:53,399 --> 00:16:02,430
has to be Android device yes so thanks

00:15:59,910 --> 00:16:06,450
to static content cache plug-in we can

00:16:02,430 --> 00:16:15,720
create oh yes now all my clicks went

00:16:06,450 --> 00:16:17,610
there sorry it's a bit early yes so what

00:16:15,720 --> 00:16:20,760
could be in our app shell it could be

00:16:17,610 --> 00:16:23,070
nice toolbar or header logo pipe and

00:16:20,760 --> 00:16:25,949
probably some spinner to show that

00:16:23,070 --> 00:16:28,620
something will be loaded when we will

00:16:25,949 --> 00:16:31,649
get the network - we'll get the access

00:16:28,620 --> 00:16:34,500
to the network nice we can make it even

00:16:31,649 --> 00:16:38,699
nicer you know many of our applications

00:16:34,500 --> 00:16:42,300
use some static content but sort from

00:16:38,699 --> 00:16:47,670
external sources like fonts like like

00:16:42,300 --> 00:16:50,190
web fonts these icons special baigan

00:16:47,670 --> 00:16:51,000
called external content caching solves

00:16:50,190 --> 00:16:54,600
this problem

00:16:51,000 --> 00:16:57,240
super simple you justify the list of

00:16:54,600 --> 00:17:03,029
resources external ones to be cached

00:16:57,240 --> 00:17:05,520
during serviceworker start up good now

00:17:03,029 --> 00:17:09,600
we can introduce extra level of

00:17:05,520 --> 00:17:13,220
Awesomeness to our application very nice

00:17:09,600 --> 00:17:15,959
but it was all about static content

00:17:13,220 --> 00:17:20,240
local one external one but static

00:17:15,959 --> 00:17:24,410
what about optimizing dynamic content

00:17:20,240 --> 00:17:27,540
loading for example what it could be

00:17:24,410 --> 00:17:28,830
programmable we can if there is no

00:17:27,540 --> 00:17:32,070
access to network

00:17:28,830 --> 00:17:35,220
we can solve for example then use from

00:17:32,070 --> 00:17:38,010
this morning not not from not from this

00:17:35,220 --> 00:17:43,170
moment it it will work much better than

00:17:38,010 --> 00:17:47,250
showing offline die now okay there is

00:17:43,170 --> 00:17:50,670
one of plugin called dynamic and we

00:17:47,250 --> 00:17:54,840
configure it the similar way filled

00:17:50,670 --> 00:17:58,410
dynamic env define groups we give a name

00:17:54,840 --> 00:18:01,260
to the group and some extra settings

00:17:58,410 --> 00:18:04,290
like set of euros will follow some

00:18:01,260 --> 00:18:07,830
caching strategy described in cache

00:18:04,290 --> 00:18:14,490
field let's help little bit more

00:18:07,830 --> 00:18:18,900
detailed euros for example our back-end

00:18:14,490 --> 00:18:22,610
API match it could be prefix like it

00:18:18,900 --> 00:18:27,510
could be reg X it could be exact match

00:18:22,610 --> 00:18:31,290
there is impossible and cache the main

00:18:27,510 --> 00:18:32,940
switch here is optimized for and there

00:18:31,290 --> 00:18:37,950
are two options freshness and

00:18:32,940 --> 00:18:40,800
performance obviously for this kind of

00:18:37,950 --> 00:18:44,040
API like breaking news we go for

00:18:40,800 --> 00:18:46,650
freshness that means that service worker

00:18:44,040 --> 00:18:50,370
on the request of this API will go to

00:18:46,650 --> 00:18:53,340
check network trust and after some

00:18:50,370 --> 00:18:55,620
network timeout if this happen it will

00:18:53,340 --> 00:19:00,900
go to check if something in the cache

00:18:55,620 --> 00:19:03,240
okay for example for different kind of

00:19:00,900 --> 00:19:05,720
API of our application we can create

00:19:03,240 --> 00:19:08,310
another group and optimize it for

00:19:05,720 --> 00:19:10,740
performance what what it would be for

00:19:08,310 --> 00:19:14,940
example something like API slash

00:19:10,740 --> 00:19:18,060
archive slash 2016 no need to go check

00:19:14,940 --> 00:19:21,210
network each time so we can try to check

00:19:18,060 --> 00:19:25,560
cash our local cache first if something

00:19:21,210 --> 00:19:28,180
was already loaded there in addition to

00:19:25,560 --> 00:19:32,140
this strategy switch we

00:19:28,180 --> 00:19:36,150
have pretty scrupulous set of settings

00:19:32,140 --> 00:19:43,090
how to fine-tune this caching experience

00:19:36,150 --> 00:19:48,700
we can specify the time of age life for

00:19:43,090 --> 00:19:51,910
our cached assets we have the property

00:19:48,700 --> 00:19:54,730
to specify a maximum number of entries

00:19:51,910 --> 00:19:58,180
Victorian cash furthermore we can go

00:19:54,730 --> 00:20:00,670
even deeper and specify the strategy we

00:19:58,180 --> 00:20:06,190
invalidate cash so it's super

00:20:00,670 --> 00:20:08,140
fine-tuning nice unfortunately it's not

00:20:06,190 --> 00:20:11,770
in the master yet it's in separate

00:20:08,140 --> 00:20:18,220
branch but it will be merged and it will

00:20:11,770 --> 00:20:20,920
come really soon fine now we have full

00:20:18,220 --> 00:20:23,020
control on dynamic content really great

00:20:20,920 --> 00:20:28,150
so this is how application could look

00:20:23,020 --> 00:20:30,550
like in totally offline mode before

00:20:28,150 --> 00:20:32,500
introducing push I would like to say

00:20:30,550 --> 00:20:34,390
couple of words about this companion

00:20:32,500 --> 00:20:36,310
library remember the one that is

00:20:34,390 --> 00:20:39,370
responsible for communication between

00:20:36,310 --> 00:20:43,270
Service Worker and application how to

00:20:39,370 --> 00:20:47,620
start working with this all is angular

00:20:43,270 --> 00:20:50,800
way in our module we import

00:20:47,620 --> 00:20:56,890
corresponding module we put it in import

00:20:50,800 --> 00:20:59,350
section next in our component we import

00:20:56,890 --> 00:21:03,130
special class called mg service worker

00:20:59,350 --> 00:21:06,010
we inject it in constructor dependency

00:21:03,130 --> 00:21:10,660
injection angular style and it gives us

00:21:06,010 --> 00:21:14,620
an access to some really nice metals for

00:21:10,660 --> 00:21:20,260
example we could implement really gentle

00:21:14,620 --> 00:21:23,440
update flow what do I mean by this we

00:21:20,260 --> 00:21:28,210
can subscribe our application to listen

00:21:23,440 --> 00:21:32,050
to service worker updates and if the

00:21:28,210 --> 00:21:35,110
newer version of our application came it

00:21:32,050 --> 00:21:39,040
will issue the event with type panel

00:21:35,110 --> 00:21:41,400
what can we do on this moment we can ask

00:21:39,040 --> 00:21:44,370
user are you ok

00:21:41,400 --> 00:21:46,830
with updating the application to a newer

00:21:44,370 --> 00:21:48,360
version it's really good idea to ask

00:21:46,830 --> 00:21:52,590
because you know newer version of

00:21:48,360 --> 00:21:55,350
application can can have totally

00:21:52,590 --> 00:21:57,540
different experience design whatever it

00:21:55,350 --> 00:22:00,900
is just a new version of application if

00:21:57,540 --> 00:22:03,360
user asks Unferth yes we just call

00:22:00,900 --> 00:22:06,840
another method called activate update

00:22:03,360 --> 00:22:10,830
and then we'll receive the event with

00:22:06,840 --> 00:22:13,560
type activation here we can just go and

00:22:10,830 --> 00:22:19,050
reload the full application because

00:22:13,560 --> 00:22:21,980
newer version came now we are ready to

00:22:19,050 --> 00:22:26,520
have a closer look to push notifications

00:22:21,980 --> 00:22:30,150
both subscription and sending

00:22:26,520 --> 00:22:33,480
notification are multi-step processes

00:22:30,150 --> 00:22:39,510
involving some parties some obligatory

00:22:33,480 --> 00:22:43,680
bar and welcome to push notifications in

00:22:39,510 --> 00:22:44,750
1 minute and 30 seconds crash course ok

00:22:43,680 --> 00:22:48,420
let's start

00:22:44,750 --> 00:22:51,450
subscription our application calls for

00:22:48,420 --> 00:22:54,810
service or other term message service

00:22:51,450 --> 00:22:57,660
and this is always third-party one bound

00:22:54,810 --> 00:23:02,190
to specific browser in case of Chrome it

00:22:57,660 --> 00:23:06,090
will be firebase cloud messaging service

00:23:02,190 --> 00:23:08,550
returns us the special object called

00:23:06,090 --> 00:23:12,000
subscript subscription object with

00:23:08,550 --> 00:23:15,630
unique identifier of this client and

00:23:12,000 --> 00:23:19,200
actually this identifier goes in the

00:23:15,630 --> 00:23:21,470
form of euro it returns back to app and

00:23:19,200 --> 00:23:24,090
from the application after this

00:23:21,470 --> 00:23:24,750
successful process we send it to our

00:23:24,090 --> 00:23:27,930
back-end

00:23:24,750 --> 00:23:30,210
backend is must have in this flow and on

00:23:27,930 --> 00:23:33,930
the backend we keep track on all these

00:23:30,210 --> 00:23:36,540
subscriptions good send the notification

00:23:33,930 --> 00:23:39,890
we start everything from our back-end

00:23:36,540 --> 00:23:43,470
using this stored subscription

00:23:39,890 --> 00:23:46,320
identifier we send it to push service in

00:23:43,470 --> 00:23:49,920
addition to this subscription object we

00:23:46,320 --> 00:23:51,900
have to send a payload in general it's

00:23:49,920 --> 00:23:53,540
optional but in case of angular

00:23:51,900 --> 00:23:56,210
serviceworker we

00:23:53,540 --> 00:23:59,960
have to send it to keep all the full

00:23:56,210 --> 00:24:03,290
flow automatic and in this payload

00:23:59,960 --> 00:24:05,990
object by the convention we have to have

00:24:03,290 --> 00:24:07,850
a field called notification where we

00:24:05,990 --> 00:24:10,700
list all the properties of our

00:24:07,850 --> 00:24:13,220
notification like title taunted image

00:24:10,700 --> 00:24:17,390
there are many settings in notification

00:24:13,220 --> 00:24:19,880
API standard only them this push service

00:24:17,390 --> 00:24:23,440
which is third-party one for Chrome

00:24:19,880 --> 00:24:25,880
second for Firefox will send

00:24:23,440 --> 00:24:29,210
notification to our angular Service

00:24:25,880 --> 00:24:33,650
Worker it will it will have just a form

00:24:29,210 --> 00:24:36,560
of event with type push and only then

00:24:33,650 --> 00:24:39,760
service worker sent actual notification

00:24:36,560 --> 00:24:45,250
using this payload that came in

00:24:39,760 --> 00:24:46,490
notification field of payload object oh

00:24:45,250 --> 00:24:50,330
good

00:24:46,490 --> 00:24:53,120
so how to start this how to set this up

00:24:50,330 --> 00:24:55,460
in angular service worker using our old

00:24:53,120 --> 00:24:57,890
good friend mg SW manifest there is a

00:24:55,460 --> 00:25:00,620
special field called push we want to

00:24:57,890 --> 00:25:06,140
show notifications right but the second

00:25:00,620 --> 00:25:08,420
key is it's really interesting it's it

00:25:06,140 --> 00:25:11,930
gives us the possibility to be flexible

00:25:08,420 --> 00:25:14,180
in scenario when we show this balloons

00:25:11,930 --> 00:25:16,340
with notifications for example when our

00:25:14,180 --> 00:25:20,360
application in the ground mode or even

00:25:16,340 --> 00:25:23,030
the application tab is closed or if user

00:25:20,360 --> 00:25:24,920
is actually working with owl up we can

00:25:23,030 --> 00:25:26,990
avoid this app through this way for

00:25:24,920 --> 00:25:30,500
notification and for example just update

00:25:26,990 --> 00:25:34,550
say number of fresh message on somewhere

00:25:30,500 --> 00:25:35,810
on the badge on the message icon I know

00:25:34,550 --> 00:25:38,540
you you see this

00:25:35,810 --> 00:25:44,170
you've seen these interfaces how do we

00:25:38,540 --> 00:25:48,920
do this using our good friend companion

00:25:44,170 --> 00:25:53,320
import it's like regular injected like

00:25:48,920 --> 00:25:57,680
regular and now we have an access to

00:25:53,320 --> 00:26:00,520
method called subscribe what is does do

00:25:57,680 --> 00:26:03,380
not be confused with these many types of

00:26:00,520 --> 00:26:06,530
registration subscriptions this method

00:26:03,380 --> 00:26:06,940
subscribes our application to the events

00:26:06,530 --> 00:26:10,150
from

00:26:06,940 --> 00:26:13,360
Service Worker so once we once service

00:26:10,150 --> 00:26:16,720
worker received notification it brings

00:26:13,360 --> 00:26:19,480
to our app and in the app we are free to

00:26:16,720 --> 00:26:22,840
implement our own logic how to show this

00:26:19,480 --> 00:26:26,680
notification or totally ignore this in

00:26:22,840 --> 00:26:31,750
addition we have one more interesting

00:26:26,680 --> 00:26:36,450
method called register for push actually

00:26:31,750 --> 00:26:40,120
this is the one that goes first that

00:26:36,450 --> 00:26:44,190
causes that starts initiate the process

00:26:40,120 --> 00:26:46,300
of registration for push notifications

00:26:44,190 --> 00:26:49,120
unfortunately at the moment it

00:26:46,300 --> 00:26:51,420
implements only old-fashioned way to

00:26:49,120 --> 00:26:55,570
register for push notifications using

00:26:51,420 --> 00:27:00,160
this GCM sender ID in application

00:26:55,570 --> 00:27:03,460
manifest which is bound to Google Cloud

00:27:00,160 --> 00:27:06,130
messaging service but it's not a blocker

00:27:03,460 --> 00:27:08,920
for us at all we always can refer to

00:27:06,130 --> 00:27:11,680
Service Worker registration object which

00:27:08,920 --> 00:27:13,290
is available which is generic one and we

00:27:11,680 --> 00:27:17,530
can register for push notifications

00:27:13,290 --> 00:27:22,210
using this newest weighted method of

00:27:17,530 --> 00:27:27,430
authentication really nice we have this

00:27:22,210 --> 00:27:30,760
piece of puzzle on the place you

00:27:27,430 --> 00:27:32,350
remember that one day we have to extend

00:27:30,760 --> 00:27:35,740
the functionality of service worker

00:27:32,350 --> 00:27:38,950
because I listed all the plugins we have

00:27:35,740 --> 00:27:40,600
at the moment there what about the

00:27:38,950 --> 00:27:43,170
moment where we need to implement for

00:27:40,600 --> 00:27:46,840
example background organization some

00:27:43,170 --> 00:27:48,220
notification clicks initiation clause

00:27:46,840 --> 00:27:51,490
and there are many events in

00:27:48,220 --> 00:27:54,280
serviceworker API that are not yet in

00:27:51,490 --> 00:27:57,940
the form of plugins let's have a look at

00:27:54,280 --> 00:28:00,850
the source code of basic angular service

00:27:57,940 --> 00:28:04,600
worker it's pretty simple so it imports

00:28:00,850 --> 00:28:07,990
the plugins and bootstrap this way we

00:28:04,600 --> 00:28:09,310
can go for our own custom version of

00:28:07,990 --> 00:28:12,460
angular serviceworker

00:28:09,310 --> 00:28:16,090
we create our own plugin the bootstrap

00:28:12,460 --> 00:28:19,540
it while a new service worker with our

00:28:16,090 --> 00:28:20,860
own functionality is ready design

00:28:19,540 --> 00:28:23,470
document

00:28:20,860 --> 00:28:28,299
to do it is not on the documentation yet

00:28:23,470 --> 00:28:31,720
but you can go and check the source code

00:28:28,299 --> 00:28:33,580
of any available angular Service Worker

00:28:31,720 --> 00:28:35,040
plugin and you will get the idea how

00:28:33,580 --> 00:28:40,000
does it work

00:28:35,040 --> 00:28:43,690
nice so what did I mean by automatic in

00:28:40,000 --> 00:28:46,900
the very beginning of my session this we

00:28:43,690 --> 00:28:49,960
have this functionality with just

00:28:46,900 --> 00:28:52,270
specifying some settings in JSON files

00:28:49,960 --> 00:28:53,919
angular Service Worker does everything

00:28:52,270 --> 00:28:59,290
automatically for us

00:28:53,919 --> 00:29:05,770
what exactly does absol and really nice

00:28:59,290 --> 00:29:10,049
one full control on dynamic content push

00:29:05,770 --> 00:29:13,990
notifications and all done automatically

00:29:10,049 --> 00:29:16,690
really good the project is under active

00:29:13,990 --> 00:29:22,059
development up at the moment so please

00:29:16,690 --> 00:29:24,940
send your issues send your full quest to

00:29:22,059 --> 00:29:28,750
the report you are very welcome to do it

00:29:24,940 --> 00:29:32,100
and this is all from me for today thank

00:29:28,750 --> 00:29:32,100
you very much

00:29:36,450 --> 00:29:40,549

YouTube URL: https://www.youtube.com/watch?v=ecu1vAO23ZM


