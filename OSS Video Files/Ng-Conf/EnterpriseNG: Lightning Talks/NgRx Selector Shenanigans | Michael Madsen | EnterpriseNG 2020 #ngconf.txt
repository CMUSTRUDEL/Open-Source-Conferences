Title: NgRx Selector Shenanigans | Michael Madsen | EnterpriseNG 2020 #ngconf
Publication date: 2021-01-02
Playlist: EnterpriseNG: Lightning Talks
Description: 
	ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:04,710 --> 00:00:08,809
[Music]

00:00:13,920 --> 00:00:16,720
all right

00:00:14,559 --> 00:00:18,080
well welcome to selector shenanigans um

00:00:16,720 --> 00:00:20,720
i'm michael madsen

00:00:18,080 --> 00:00:22,400
uh my twitter handler handled is there

00:00:20,720 --> 00:00:25,920
in madison 87 and then also

00:00:22,400 --> 00:00:28,160
might get mgm 87. uh

00:00:25,920 --> 00:00:30,160
let's jump right in so we're talking

00:00:28,160 --> 00:00:32,320
about ngrx selectors

00:00:30,160 --> 00:00:33,600
and at the core of ngrx selectors is

00:00:32,320 --> 00:00:36,719
minimalization

00:00:33,600 --> 00:00:39,520
a brief explanation of minimalization is

00:00:36,719 --> 00:00:41,040
the same inputs will give you the same

00:00:39,520 --> 00:00:42,800
output

00:00:41,040 --> 00:00:44,480
so a memoize function will cache

00:00:42,800 --> 00:00:47,120
previous results

00:00:44,480 --> 00:00:47,120
of the function

00:00:48,239 --> 00:00:54,160
and then and then return the cache

00:00:50,800 --> 00:00:54,160
results if the inputs match

00:00:55,600 --> 00:01:00,800
in ngrx the default minimalization

00:00:58,000 --> 00:01:04,559
strategy is a strict quality check so

00:01:00,800 --> 00:01:04,960
does this do these inputs equal equal

00:01:04,559 --> 00:01:06,479
equal

00:01:04,960 --> 00:01:09,200
these inputs if they don't it runs a

00:01:06,479 --> 00:01:12,400
function if they do it returns

00:01:09,200 --> 00:01:13,360
the last computed result so what if

00:01:12,400 --> 00:01:15,119
that's not enough

00:01:13,360 --> 00:01:17,040
uh what if a strict quality check isn't

00:01:15,119 --> 00:01:19,119
what you need um you need to

00:01:17,040 --> 00:01:20,560
check something more deeply or check

00:01:19,119 --> 00:01:24,240
property or something

00:01:20,560 --> 00:01:26,080
and then in addition to that selectors

00:01:24,240 --> 00:01:27,520
have some more stuff on top of

00:01:26,080 --> 00:01:29,520
minimalization

00:01:27,520 --> 00:01:30,960
um so the question is if the result

00:01:29,520 --> 00:01:34,159
matches the previous result

00:01:30,960 --> 00:01:37,119
what do we do and we'll

00:01:34,159 --> 00:01:37,439
get into an example of that in a minute

00:01:37,119 --> 00:01:39,520
well

00:01:37,439 --> 00:01:40,880
ngrx can fix that they built it because

00:01:39,520 --> 00:01:41,360
they knew that this was going to be an

00:01:40,880 --> 00:01:42,960
issue

00:01:41,360 --> 00:01:46,479
so what i'm going to show you is

00:01:42,960 --> 00:01:46,479
something that's um

00:01:47,200 --> 00:01:50,320
accepted practice they provide

00:01:49,119 --> 00:01:52,880
functionality for it

00:01:50,320 --> 00:01:53,600
but it's not a super standard thing that

00:01:52,880 --> 00:01:56,719
you see everywhere

00:01:53,600 --> 00:01:58,399
so you'll use it when you need it so

00:01:56,719 --> 00:01:59,119
this is what it looks like um you might

00:01:58,399 --> 00:02:01,680
recognize

00:01:59,119 --> 00:02:02,799
this looks a little bit like a very

00:02:01,680 --> 00:02:05,040
selective function

00:02:02,799 --> 00:02:08,080
that you would use in ngrx but we're

00:02:05,040 --> 00:02:09,280
using create selector factory uh what

00:02:08,080 --> 00:02:11,760
this does is it lets us

00:02:09,280 --> 00:02:13,040
override the default minimalization that

00:02:11,760 --> 00:02:16,239
happens

00:02:13,040 --> 00:02:19,520
on the selector so it works

00:02:16,239 --> 00:02:23,040
if we look here i've circled

00:02:19,520 --> 00:02:24,319
the projector um when the selector is

00:02:23,040 --> 00:02:26,080
triggered it will run the projector

00:02:24,319 --> 00:02:29,040
function so you'll see

00:02:26,080 --> 00:02:29,680
um at the bottom of the statement that

00:02:29,040 --> 00:02:31,680
um

00:02:29,680 --> 00:02:33,519
it looks a lot like your normal selector

00:02:31,680 --> 00:02:34,959
so if you were converting a normal

00:02:33,519 --> 00:02:38,319
create selector function into a gray

00:02:34,959 --> 00:02:40,560
selector factory you'd basically

00:02:38,319 --> 00:02:41,599
put your selector your old crate

00:02:40,560 --> 00:02:44,800
selector code

00:02:41,599 --> 00:02:47,120
in parens and it just gets called after

00:02:44,800 --> 00:02:49,360
create selector factory

00:02:47,120 --> 00:02:51,040
so that's what the projector is we also

00:02:49,360 --> 00:02:53,599
have pre-check

00:02:51,040 --> 00:02:56,239
so if the pre-check passes then it will

00:02:53,599 --> 00:02:58,800
run the projector function

00:02:56,239 --> 00:02:59,920
and then there's also the post check so

00:02:58,800 --> 00:03:03,200
the post check

00:02:59,920 --> 00:03:06,480
passes we will return the values

00:03:03,200 --> 00:03:09,920
that your projector function computed

00:03:06,480 --> 00:03:11,360
to explain those our pre-check function

00:03:09,920 --> 00:03:13,120
is what we would call our minimalization

00:03:11,360 --> 00:03:15,360
function so this is

00:03:13,120 --> 00:03:17,360
what hgrs is doing the strict quality

00:03:15,360 --> 00:03:20,000
check on

00:03:17,360 --> 00:03:21,760
um so the way it works you might

00:03:20,000 --> 00:03:22,159
recognize this this is sort of like the

00:03:21,760 --> 00:03:23,440
way

00:03:22,159 --> 00:03:24,879
like a sorting function works or

00:03:23,440 --> 00:03:27,280
whatever you get the two arguments one

00:03:24,879 --> 00:03:28,640
is the old value one is the new value

00:03:27,280 --> 00:03:30,400
um and you can do whatever check you

00:03:28,640 --> 00:03:32,879
want in here like i said ngrx

00:03:30,400 --> 00:03:33,680
is a strict quality check so it's equal

00:03:32,879 --> 00:03:36,879
equal equal

00:03:33,680 --> 00:03:40,400
um we had a case for this where hey

00:03:36,879 --> 00:03:42,239
a new object is coming to us but

00:03:40,400 --> 00:03:44,080
all the properties on the object could

00:03:42,239 --> 00:03:46,319
be the same so we're actually

00:03:44,080 --> 00:03:47,519
being like okay is this object the

00:03:46,319 --> 00:03:49,120
expected object

00:03:47,519 --> 00:03:50,560
check the properties if there's a

00:03:49,120 --> 00:03:51,920
mission match on the properties we run

00:03:50,560 --> 00:03:53,680
the function if there's not a mismatch

00:03:51,920 --> 00:03:57,280
on the properties we just return

00:03:53,680 --> 00:03:59,200
the last computed result then we have

00:03:57,280 --> 00:04:00,879
the post check function

00:03:59,200 --> 00:04:02,480
the post check is a little bit different

00:04:00,879 --> 00:04:05,680
because the

00:04:02,480 --> 00:04:08,000
projector function always runs so um

00:04:05,680 --> 00:04:08,879
the function is going to run and now you

00:04:08,000 --> 00:04:10,879
have a result

00:04:08,879 --> 00:04:12,400
well is that result different than the

00:04:10,879 --> 00:04:13,840
old result a case for this

00:04:12,400 --> 00:04:15,519
is if you have a selection that's

00:04:13,840 --> 00:04:16,639
returning a list of things so like maybe

00:04:15,519 --> 00:04:21,199
you're filtering down

00:04:16,639 --> 00:04:22,560
an entity into a few selected entities

00:04:21,199 --> 00:04:24,639
uh well that list every time it's

00:04:22,560 --> 00:04:26,240
returned even if they

00:04:24,639 --> 00:04:27,440
are the same values in the list it's a

00:04:26,240 --> 00:04:28,320
separate list which means you're going

00:04:27,440 --> 00:04:31,120
to trigger

00:04:28,320 --> 00:04:32,080
trigger change detection and such so to

00:04:31,120 --> 00:04:36,560
avoid that

00:04:32,080 --> 00:04:39,600
um you can use the post check and

00:04:36,560 --> 00:04:42,479
and maybe check the ids of the values

00:04:39,600 --> 00:04:43,919
in the list or something like that

00:04:42,479 --> 00:04:46,160
anyway it works similarly

00:04:43,919 --> 00:04:48,000
if you return true it'll just return the

00:04:46,160 --> 00:04:50,320
old result if you return false

00:04:48,000 --> 00:04:51,360
it'll return your new result so that way

00:04:50,320 --> 00:04:56,080
you can control

00:04:51,360 --> 00:04:58,880
your change detection

00:04:56,080 --> 00:04:59,600
and uh that's about how it works um

00:04:58,880 --> 00:05:01,600
there's not a

00:04:59,600 --> 00:05:02,800
very good documentation for this on ng

00:05:01,600 --> 00:05:05,280
on the ngrx site

00:05:02,800 --> 00:05:06,479
um so you really gotta take to find out

00:05:05,280 --> 00:05:08,720
how it works i will be

00:05:06,479 --> 00:05:10,240
writing an article about this so you can

00:05:08,720 --> 00:05:12,800
have like

00:05:10,240 --> 00:05:14,000
in front of you how this all works but

00:05:12,800 --> 00:05:18,720
it's pretty simple you just

00:05:14,000 --> 00:05:25,840
use that uh price looking function and

00:05:18,720 --> 00:05:25,840
you're off you're ready to go

00:05:28,880 --> 00:05:30,960

YouTube URL: https://www.youtube.com/watch?v=pwN_sgdmkvU


