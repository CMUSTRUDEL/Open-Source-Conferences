Title: Getting Started with Deno | Preston Lamb | EnterpriseNG 2020 #ngconf
Publication date: 2021-01-02
Playlist: EnterpriseNG: Lightning Talks
Description: 
	ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:04,710 --> 00:00:08,809
[Music]

00:00:14,320 --> 00:00:16,880
yeah thank you brooke

00:00:15,599 --> 00:00:18,720
and thanks everyone for coming i'm

00:00:16,880 --> 00:00:21,760
excited to talk today so

00:00:18,720 --> 00:00:23,920
um i was talking to brooke about what

00:00:21,760 --> 00:00:25,039
i would present today and um i've been

00:00:23,920 --> 00:00:27,119
starting to kind of get him

00:00:25,039 --> 00:00:28,240
uh into the dental world a little bit

00:00:27,119 --> 00:00:30,080
and get uh

00:00:28,240 --> 00:00:31,760
and to learn a little bit about it so

00:00:30,080 --> 00:00:32,160
i'm going to try to show you in five

00:00:31,760 --> 00:00:34,239
minutes

00:00:32,160 --> 00:00:35,760
a couple of good things about deno and

00:00:34,239 --> 00:00:38,239
how you can run your first script with

00:00:35,760 --> 00:00:40,480
deno so for those of you who don't know

00:00:38,239 --> 00:00:42,239
deno is a modern and secure runtime for

00:00:40,480 --> 00:00:46,399
javascript and typescript

00:00:42,239 --> 00:00:47,120
um so it the the v1 was released earlier

00:00:46,399 --> 00:00:48,800
this year

00:00:47,120 --> 00:00:50,239
um but you've probably heard you may

00:00:48,800 --> 00:00:50,960
have heard a little bit about it over

00:00:50,239 --> 00:00:53,520
the last

00:00:50,960 --> 00:00:54,800
maybe 18 months or two years or so that

00:00:53,520 --> 00:00:57,680
um it's been announced

00:00:54,800 --> 00:00:59,039
um so that that's what it is is a modern

00:00:57,680 --> 00:01:02,079
and secure runtime

00:00:59,039 --> 00:01:04,000
um its goal is to be webc

00:01:02,079 --> 00:01:05,280
web compatible and to use modern

00:01:04,000 --> 00:01:07,680
features so

00:01:05,280 --> 00:01:09,680
anything that you run in a deno script

00:01:07,680 --> 00:01:12,640
the goal is that it would also run

00:01:09,680 --> 00:01:13,439
in a browser or something like that it

00:01:12,640 --> 00:01:16,960
runs

00:01:13,439 --> 00:01:19,119
on v8 so again that goes along with

00:01:16,960 --> 00:01:21,040
being able to use modern features and

00:01:19,119 --> 00:01:24,159
and being web compatible

00:01:21,040 --> 00:01:25,680
and it's built in rust some of the

00:01:24,159 --> 00:01:28,080
benefits of deno

00:01:25,680 --> 00:01:29,920
are that it is built with security

00:01:28,080 --> 00:01:31,759
turned on by default and that's like

00:01:29,920 --> 00:01:33,759
kind of one of the central core concepts

00:01:31,759 --> 00:01:36,720
is that it's secure

00:01:33,759 --> 00:01:37,200
um when you compile your code to be able

00:01:36,720 --> 00:01:39,520
to

00:01:37,200 --> 00:01:40,320
pass it around to other people or share

00:01:39,520 --> 00:01:43,920
it with people

00:01:40,320 --> 00:01:45,439
it can compile down to a single file

00:01:43,920 --> 00:01:47,439
it supports typescript right out of the

00:01:45,439 --> 00:01:50,079
box so all you need to do is

00:01:47,439 --> 00:01:52,079
have your your file be a dot ts

00:01:50,079 --> 00:01:53,439
extension and it will just run you don't

00:01:52,079 --> 00:01:57,200
have to do any

00:01:53,439 --> 00:01:58,560
extra setup steps or anything like that

00:01:57,200 --> 00:02:00,240
and it comes with a whole bunch of

00:01:58,560 --> 00:02:02,399
utilities

00:02:00,240 --> 00:02:04,320
that are provided directly by deno and

00:02:02,399 --> 00:02:07,680
there's also a lot of third-party

00:02:04,320 --> 00:02:10,080
modules that you can use as well so to

00:02:07,680 --> 00:02:12,000
get in uh to get started uh you just

00:02:10,080 --> 00:02:14,879
need to install it this is on

00:02:12,000 --> 00:02:16,319
on their homepage if you go to deno.land

00:02:14,879 --> 00:02:18,959
l-a-n-d

00:02:16,319 --> 00:02:20,319
then you can find the install section

00:02:18,959 --> 00:02:22,879
and you can install it

00:02:20,319 --> 00:02:24,080
um it's pretty they have made it pretty

00:02:22,879 --> 00:02:25,520
simple there's lots of different ways

00:02:24,080 --> 00:02:28,080
that you can install it

00:02:25,520 --> 00:02:30,319
for example i used homebrew on on my mac

00:02:28,080 --> 00:02:31,760
and installed it with just one command

00:02:30,319 --> 00:02:33,680
so there's a whole bunch of different

00:02:31,760 --> 00:02:35,840
ways that you can install it so

00:02:33,680 --> 00:02:36,800
that's the first step and then after you

00:02:35,840 --> 00:02:39,599
do that

00:02:36,800 --> 00:02:40,319
you're ready to run your first script so

00:02:39,599 --> 00:02:43,840
here

00:02:40,319 --> 00:02:47,200
is um just a simple script that i made

00:02:43,840 --> 00:02:49,599
that we will make an api call to

00:02:47,200 --> 00:02:52,560
the github api and we're going to get

00:02:49,599 --> 00:02:55,040
the information for the dental land user

00:02:52,560 --> 00:02:56,640
that we can see right here that's um

00:02:55,040 --> 00:02:58,640
that's the

00:02:56,640 --> 00:03:00,319
uh response that we're gonna we're gonna

00:02:58,640 --> 00:03:02,560
make um

00:03:00,319 --> 00:03:04,560
you can use fetch by default again this

00:03:02,560 --> 00:03:07,360
is like a an api that's in

00:03:04,560 --> 00:03:07,760
browsers that's kind of the standard for

00:03:07,360 --> 00:03:11,120
making

00:03:07,760 --> 00:03:13,599
api requests in deno um

00:03:11,120 --> 00:03:15,120
and then you can just chain dot then

00:03:13,599 --> 00:03:18,000
callbacks onto

00:03:15,120 --> 00:03:20,000
onto the the fetch call and that that

00:03:18,000 --> 00:03:23,200
part is not specific to deno

00:03:20,000 --> 00:03:25,360
um but we on line four i'm gonna

00:03:23,200 --> 00:03:26,640
transform the response into json and

00:03:25,360 --> 00:03:29,519
then on line five

00:03:26,640 --> 00:03:31,360
i'm going to log that uh to the console

00:03:29,519 --> 00:03:34,879
so if i run this script

00:03:31,360 --> 00:03:36,480
it's you use the deno which comes in the

00:03:34,879 --> 00:03:37,360
cli when you installed in on your

00:03:36,480 --> 00:03:41,360
computer

00:03:37,360 --> 00:03:44,879
run and then the next part is a flag

00:03:41,360 --> 00:03:48,400
the environment and network requests

00:03:44,879 --> 00:03:51,840
and file access those can only be done

00:03:48,400 --> 00:03:54,560
if you give specific permission to deno

00:03:51,840 --> 00:03:55,280
to have access to that so if i ran this

00:03:54,560 --> 00:03:58,400
script

00:03:55,280 --> 00:03:58,400
without this flag

00:03:59,519 --> 00:04:02,879
um then i'll get an error the permission

00:04:01,760 --> 00:04:05,439
denied network

00:04:02,879 --> 00:04:07,200
access um i don't have access to the

00:04:05,439 --> 00:04:08,080
network so i have to run it again with

00:04:07,200 --> 00:04:11,680
the dash dash

00:04:08,080 --> 00:04:14,959
allow net flag so if i run that

00:04:11,680 --> 00:04:16,479
then you can see the output here let me

00:04:14,959 --> 00:04:18,160
pull this up a little bit so it's a

00:04:16,479 --> 00:04:21,280
little taller

00:04:18,160 --> 00:04:25,440
and so i can print out the the

00:04:21,280 --> 00:04:28,960
information from that call in addition

00:04:25,440 --> 00:04:32,160
you can catch errors with the dot catch

00:04:28,960 --> 00:04:33,919
callback so if i run this again then

00:04:32,160 --> 00:04:37,360
this time i caught the error

00:04:33,919 --> 00:04:39,600
and uh this one it's an unknown url

00:04:37,360 --> 00:04:41,120
so i mean that's that's really all it

00:04:39,600 --> 00:04:43,520
takes to run

00:04:41,120 --> 00:04:44,400
a deno script you just get to write

00:04:43,520 --> 00:04:46,000
normal

00:04:44,400 --> 00:04:47,440
javascript or typescript like you're

00:04:46,000 --> 00:04:49,440
used to and then

00:04:47,440 --> 00:04:50,960
run it with the dinner run command the

00:04:49,440 --> 00:04:53,040
last thing that i want to show you is a

00:04:50,960 --> 00:04:56,320
pretty cool feature

00:04:53,040 --> 00:04:57,280
and that is uh that deno supports top

00:04:56,320 --> 00:04:59,520
level of weight

00:04:57,280 --> 00:05:02,320
and what that means you know a lot of us

00:04:59,520 --> 00:05:06,560
are used to writing async functions

00:05:02,320 --> 00:05:07,919
um where we can use the await keyword

00:05:06,560 --> 00:05:10,560
inside a function that's

00:05:07,919 --> 00:05:12,000
tagged with this async keyword like this

00:05:10,560 --> 00:05:15,360
but in deno you can just

00:05:12,000 --> 00:05:16,880
do it you can use a weight outside of a

00:05:15,360 --> 00:05:25,440
function

00:05:16,880 --> 00:05:29,280
so you could do like this

00:05:25,440 --> 00:05:30,080
and i think that um this is going to

00:05:29,280 --> 00:05:33,520
complain

00:05:30,080 --> 00:05:37,360
to me i did this earlier today

00:05:33,520 --> 00:05:38,720
but um you can use it like this and i'm

00:05:37,360 --> 00:05:41,620
not gonna run it because i think

00:05:38,720 --> 00:05:42,800
it's going to complain to me um

00:05:41,620 --> 00:05:45,840
[Music]

00:05:42,800 --> 00:05:46,240
but let's see if it does it oh it didn't

00:05:45,840 --> 00:05:48,880
okay

00:05:46,240 --> 00:05:50,560
it's just my my ide is telling me you

00:05:48,880 --> 00:05:54,720
can't do that but you really can

00:05:50,560 --> 00:05:57,759
so um i can do console.log

00:05:54,720 --> 00:06:01,680
and then you have to await the data.json

00:05:57,759 --> 00:06:04,479
call as well and so now if i run this

00:06:01,680 --> 00:06:05,360
file then you can see the data printed

00:06:04,479 --> 00:06:08,880
out again

00:06:05,360 --> 00:06:10,720
so you can use async await functions or

00:06:08,880 --> 00:06:11,199
you can just use top level await if you

00:06:10,720 --> 00:06:14,000
want

00:06:11,199 --> 00:06:15,680
that's also supported but basically

00:06:14,000 --> 00:06:17,360
anything that you

00:06:15,680 --> 00:06:18,800
that anything that you would write in

00:06:17,360 --> 00:06:21,039
javascript you can

00:06:18,800 --> 00:06:22,720
write in deno as well and run it it's a

00:06:21,039 --> 00:06:24,160
good replacement if you

00:06:22,720 --> 00:06:26,800
want to try something different from

00:06:24,160 --> 00:06:28,639
node then deno is a good option

00:06:26,800 --> 00:06:29,840
and it also can be a good replacement

00:06:28,639 --> 00:06:31,199
for bash scripts

00:06:29,840 --> 00:06:33,840
so if you have to do some sort of

00:06:31,199 --> 00:06:35,199
automation on your computer

00:06:33,840 --> 00:06:36,960
that you would normally do with a bash

00:06:35,199 --> 00:06:38,400
script then you could use deno to do

00:06:36,960 --> 00:06:41,039
that as well

00:06:38,400 --> 00:06:42,560
and it's it's pretty new and the

00:06:41,039 --> 00:06:44,400
community is growing so now is a good

00:06:42,560 --> 00:06:44,800
time to to go check it out and to learn

00:06:44,400 --> 00:06:46,720
it

00:06:44,800 --> 00:06:49,840
and that's all i have so thank you for

00:06:46,720 --> 00:06:49,840
letting me share this

00:06:52,290 --> 00:06:56,839

YouTube URL: https://www.youtube.com/watch?v=GZJMzieq3k0


