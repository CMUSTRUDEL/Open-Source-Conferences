Title: Automate Your Angular Workflow | Matt Vaughn | EnterpriseNG 2020 #ngconf
Publication date: 2021-02-01
Playlist: EnterpriseNG: Lightning Talks
Description: 
	ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:04,710 --> 00:00:08,809
[Music]

00:00:14,080 --> 00:00:18,240
okay

00:00:14,880 --> 00:00:20,960
well um i know as software developers

00:00:18,240 --> 00:00:21,760
application developers we want to be

00:00:20,960 --> 00:00:24,800
effective

00:00:21,760 --> 00:00:27,439
and efficient as possible not as a

00:00:24,800 --> 00:00:28,480
not only as an individual developer but

00:00:27,439 --> 00:00:31,119
as a team

00:00:28,480 --> 00:00:31,679
and these are probably some kind of

00:00:31,119 --> 00:00:35,040
basic

00:00:31,679 --> 00:00:37,760
things but they're good reminders and

00:00:35,040 --> 00:00:38,800
especially when you're working with a

00:00:37,760 --> 00:00:40,879
new team

00:00:38,800 --> 00:00:42,559
there might be things that could be

00:00:40,879 --> 00:00:44,480
improved in terms of

00:00:42,559 --> 00:00:46,079
being more effective so one of the

00:00:44,480 --> 00:00:48,079
things i wanted to talk about was

00:00:46,079 --> 00:00:49,600
how to be effective with like just some

00:00:48,079 --> 00:00:50,879
of the tooling that we have with visual

00:00:49,600 --> 00:00:53,920
studio code

00:00:50,879 --> 00:00:57,680
and by default if if you want to create

00:00:53,920 --> 00:01:01,359
uh elements in your your templates

00:00:57,680 --> 00:01:04,000
you can basically use uh built-in

00:01:01,359 --> 00:01:04,720
snippets that will do this for you now a

00:01:04,000 --> 00:01:07,439
lot of times

00:01:04,720 --> 00:01:08,880
i will uh create snippets like a

00:01:07,439 --> 00:01:12,400
container template

00:01:08,880 --> 00:01:15,200
uh pattern here where the container

00:01:12,400 --> 00:01:16,080
has something in it and then i use a

00:01:15,200 --> 00:01:19,600
async

00:01:16,080 --> 00:01:23,360
observable with ngif but then i also use

00:01:19,600 --> 00:01:26,640
ng if else with a template

00:01:23,360 --> 00:01:28,560
for the else implementation so for me to

00:01:26,640 --> 00:01:29,520
be able to remember how to do that over

00:01:28,560 --> 00:01:31,439
time

00:01:29,520 --> 00:01:32,960
kind of gets a little complicated or if

00:01:31,439 --> 00:01:34,560
you if you're not familiar with it you

00:01:32,960 --> 00:01:36,479
might wonder how to do it so

00:01:34,560 --> 00:01:38,159
with snippets you can just basically

00:01:36,479 --> 00:01:41,040
start

00:01:38,159 --> 00:01:42,399
typing in things like that and basically

00:01:41,040 --> 00:01:45,360
the templates will

00:01:42,399 --> 00:01:46,560
start aligning uh in your code for you

00:01:45,360 --> 00:01:47,600
and then you can just type in your

00:01:46,560 --> 00:01:49,920
expressions

00:01:47,600 --> 00:01:50,799
the name of templates uh there is

00:01:49,920 --> 00:01:54,399
there's even a

00:01:50,799 --> 00:01:54,880
template for a template right here so we

00:01:54,399 --> 00:01:57,920
can just

00:01:54,880 --> 00:02:01,439
click on that and there we have that so

00:01:57,920 --> 00:02:02,159
templates are or these snippets are very

00:02:01,439 --> 00:02:05,439
valuable

00:02:02,159 --> 00:02:08,879
in getting consistent code implemented

00:02:05,439 --> 00:02:10,640
in to your templates as well as uh

00:02:08,879 --> 00:02:12,080
just being more efficient and effective

00:02:10,640 --> 00:02:13,520
now there's a few different ways we can

00:02:12,080 --> 00:02:16,640
go around this we could

00:02:13,520 --> 00:02:19,599
simply use the templates given to us in

00:02:16,640 --> 00:02:21,280
our angular environment we can also

00:02:19,599 --> 00:02:24,160
download

00:02:21,280 --> 00:02:26,080
other extensions and install them like

00:02:24,160 --> 00:02:27,680
the angular snippets for version 9 from

00:02:26,080 --> 00:02:29,680
john papa

00:02:27,680 --> 00:02:32,239
there's some great snippets there and

00:02:29,680 --> 00:02:33,360
not only are snippets available for html

00:02:32,239 --> 00:02:35,760
but they're available for

00:02:33,360 --> 00:02:37,360
our typescript code as well so if

00:02:35,760 --> 00:02:38,560
there's certain type of statements or

00:02:37,360 --> 00:02:41,440
constructors

00:02:38,560 --> 00:02:42,800
that you want to implement consistently

00:02:41,440 --> 00:02:44,959
templates are really

00:02:42,800 --> 00:02:46,239
interesting or these snippets are an

00:02:44,959 --> 00:02:49,440
interesting way to go

00:02:46,239 --> 00:02:52,480
now one thing that we could do also

00:02:49,440 --> 00:02:53,680
is you can create your own libraries of

00:02:52,480 --> 00:02:57,680
snippets

00:02:53,680 --> 00:02:59,360
as a developer or as part of a team so

00:02:57,680 --> 00:03:03,120
if you do the command palette

00:02:59,360 --> 00:03:04,480
and just type in snip or for snippet

00:03:03,120 --> 00:03:07,200
you're going to see this preferences

00:03:04,480 --> 00:03:10,480
where it says configure user snippets

00:03:07,200 --> 00:03:12,000
now you have the capability here to

00:03:10,480 --> 00:03:14,159
configure snippets or even create

00:03:12,000 --> 00:03:18,080
snippets for html typescript

00:03:14,159 --> 00:03:21,200
react even but you can also create

00:03:18,080 --> 00:03:24,400
global snippets file or even a work

00:03:21,200 --> 00:03:26,720
space snippets file and those

00:03:24,400 --> 00:03:28,239
global files could be shared with a team

00:03:26,720 --> 00:03:31,440
as well so

00:03:28,239 --> 00:03:33,200
your team can organize specific snippets

00:03:31,440 --> 00:03:34,480
for the things that you develop so if

00:03:33,200 --> 00:03:35,280
you find something you're doing over and

00:03:34,480 --> 00:03:37,040
over again

00:03:35,280 --> 00:03:38,720
you can create a snippet for that and

00:03:37,040 --> 00:03:40,560
there's also other extensions

00:03:38,720 --> 00:03:42,080
that you can install that actually help

00:03:40,560 --> 00:03:45,120
you select code

00:03:42,080 --> 00:03:47,280
from html or typescript in your files

00:03:45,120 --> 00:03:48,799
and basically generate a snippet and

00:03:47,280 --> 00:03:51,519
then it puts that snippet

00:03:48,799 --> 00:03:53,040
in the specific uh snippets file that

00:03:51,519 --> 00:03:54,879
you have shared so that's a pretty cool

00:03:53,040 --> 00:03:57,360
way to do that

00:03:54,879 --> 00:03:58,080
didn't know if you uh if many of us are

00:03:57,360 --> 00:04:01,040
using this

00:03:58,080 --> 00:04:01,920
capability but it's there and you can

00:04:01,040 --> 00:04:04,319
really kind of

00:04:01,920 --> 00:04:05,760
expand that on that on your own and

00:04:04,319 --> 00:04:08,799
develop snippets

00:04:05,760 --> 00:04:09,519
to make you more efficient and effective

00:04:08,799 --> 00:04:11,040
and

00:04:09,519 --> 00:04:13,280
more consistent in how things are

00:04:11,040 --> 00:04:13,760
implemented one other thing that i

00:04:13,280 --> 00:04:16,639
thought

00:04:13,760 --> 00:04:18,720
was interesting is a lot of times a team

00:04:16,639 --> 00:04:22,000
will have a specific

00:04:18,720 --> 00:04:22,479
configuration for linting or how they

00:04:22,000 --> 00:04:25,520
want

00:04:22,479 --> 00:04:26,800
other code to look and such and when you

00:04:25,520 --> 00:04:28,400
have this you want to be able to make

00:04:26,800 --> 00:04:29,280
sure that your code complies as you

00:04:28,400 --> 00:04:31,680
develop it

00:04:29,280 --> 00:04:33,440
now you could you can ng-lent and then

00:04:31,680 --> 00:04:35,680
you can fix your lint problems

00:04:33,440 --> 00:04:37,759
and you can do it that way or you can do

00:04:35,680 --> 00:04:40,880
a few other things like

00:04:37,759 --> 00:04:41,840
automate the process of linting and

00:04:40,880 --> 00:04:45,840
fixing that

00:04:41,840 --> 00:04:49,120
with some packages that you can install

00:04:45,840 --> 00:04:52,320
you can install a husky package husky

00:04:49,120 --> 00:04:53,040
and pretty quick those two combined will

00:04:52,320 --> 00:04:57,280
actually

00:04:53,040 --> 00:05:01,280
with just a little configuration here

00:04:57,280 --> 00:05:04,400
will allow you to to basically have um

00:05:01,280 --> 00:05:06,080
on save or on a pre-commit hook before

00:05:04,400 --> 00:05:09,440
you check your code in

00:05:06,080 --> 00:05:11,520
it will actually verify and uh

00:05:09,440 --> 00:05:13,199
check and lint your code for you on a

00:05:11,520 --> 00:05:14,800
pre-commit so this is some really nice

00:05:13,199 --> 00:05:16,880
automation for you

00:05:14,800 --> 00:05:18,160
something that you can stop thinking

00:05:16,880 --> 00:05:20,160
about but

00:05:18,160 --> 00:05:22,240
it happens and it's a good thing because

00:05:20,160 --> 00:05:23,919
then it keeps your code in the format

00:05:22,240 --> 00:05:24,639
that's consistent with everyone else on

00:05:23,919 --> 00:05:27,440
the team

00:05:24,639 --> 00:05:29,600
and especially if you have lint checks

00:05:27,440 --> 00:05:31,360
enabled on your ci process

00:05:29,600 --> 00:05:33,280
then you'll want to be able to make sure

00:05:31,360 --> 00:05:35,919
you're not violating any of those

00:05:33,280 --> 00:05:39,440
linting rules and such and this is one

00:05:35,919 --> 00:05:41,759
way to do it it's just a very simple

00:05:39,440 --> 00:05:43,520
a couple of packages to install a little

00:05:41,759 --> 00:05:46,320
uh configuration to

00:05:43,520 --> 00:05:46,880
do that now for me uh we're we're

00:05:46,320 --> 00:05:50,479
linting

00:05:46,880 --> 00:05:53,919
uh json files and typescript files

00:05:50,479 --> 00:05:56,080
you can also lint html files as well so

00:05:53,919 --> 00:05:58,240
this little patterns glob here will help

00:05:56,080 --> 00:06:00,639
you define what files you want to target

00:05:58,240 --> 00:06:01,280
uh during that process so that's pretty

00:06:00,639 --> 00:06:02,960
cool

00:06:01,280 --> 00:06:04,960
um the last one of the last things i

00:06:02,960 --> 00:06:07,919
wanted to touch on about

00:06:04,960 --> 00:06:08,639
automation is your development and

00:06:07,919 --> 00:06:11,120
debugging

00:06:08,639 --> 00:06:12,000
environment now one thing i like to do

00:06:11,120 --> 00:06:13,600
is uh

00:06:12,000 --> 00:06:15,440
when i'm setting up a new environment is

00:06:13,600 --> 00:06:17,840
to make sure i have a launch json

00:06:15,440 --> 00:06:18,960
setup and configured if you're doing

00:06:17,840 --> 00:06:21,440
this for the first time you're going to

00:06:18,960 --> 00:06:23,120
have this ad configuration at the bottom

00:06:21,440 --> 00:06:24,560
and when you click that it's going to

00:06:23,120 --> 00:06:26,479
ask you what you want to

00:06:24,560 --> 00:06:28,000
create in terms of your configuration

00:06:26,479 --> 00:06:31,600
i'll usually just

00:06:28,000 --> 00:06:33,520
simply do a chrome launch and that way

00:06:31,600 --> 00:06:35,600
or you can do edge launch if you're on

00:06:33,520 --> 00:06:37,759
windows but what this is going to do

00:06:35,600 --> 00:06:39,520
is going to create this configuration

00:06:37,759 --> 00:06:42,800
that allows you to

00:06:39,520 --> 00:06:45,600
basically attach and debug

00:06:42,800 --> 00:06:46,240
within visual studio code which i think

00:06:45,600 --> 00:06:48,560
is

00:06:46,240 --> 00:06:50,880
a pretty cool way to do it for example

00:06:48,560 --> 00:06:54,240
i've already launched

00:06:50,880 --> 00:06:57,840
by going to my little debug area here

00:06:54,240 --> 00:07:00,560
on the left and then i click that

00:06:57,840 --> 00:07:01,039
f5 or to run and basically when you do

00:07:00,560 --> 00:07:05,360
that

00:07:01,039 --> 00:07:08,080
it will detach or attach to any

00:07:05,360 --> 00:07:10,000
debug markers that you put in your code

00:07:08,080 --> 00:07:11,520
and when it hits that line of code it'll

00:07:10,000 --> 00:07:13,039
actually stop and then you can go to

00:07:11,520 --> 00:07:15,919
visual studio

00:07:13,039 --> 00:07:16,560
and basically start using these tools

00:07:15,919 --> 00:07:18,720
here

00:07:16,560 --> 00:07:19,599
like the watch or even the call stack to

00:07:18,720 --> 00:07:21,440
determine

00:07:19,599 --> 00:07:22,639
you know what happened before you got to

00:07:21,440 --> 00:07:24,400
this line of code

00:07:22,639 --> 00:07:27,680
uh what is going on now so you can

00:07:24,400 --> 00:07:30,479
actually look at the things that are

00:07:27,680 --> 00:07:31,440
happening in the specific uh template or

00:07:30,479 --> 00:07:33,599
view here

00:07:31,440 --> 00:07:35,120
and you could see and look at all the

00:07:33,599 --> 00:07:38,319
different uh items

00:07:35,120 --> 00:07:40,319
on the in your debug area on

00:07:38,319 --> 00:07:42,479
visual studio code so these are really

00:07:40,319 --> 00:07:44,400
nice ways to kind of automate debugging

00:07:42,479 --> 00:07:49,440
uh use that launch file

00:07:44,400 --> 00:07:49,440
configure that and target whatever the

00:07:49,919 --> 00:07:54,000
browser that you want to work with and

00:07:52,319 --> 00:07:55,759
such that's pretty cool and then

00:07:54,000 --> 00:07:57,599
the last thing i wanted to touch on was

00:07:55,759 --> 00:08:01,039
a really cool extension

00:07:57,599 --> 00:08:02,479
from nx console so it's an extension

00:08:01,039 --> 00:08:05,599
called annex console

00:08:02,479 --> 00:08:08,319
and when you use this this is

00:08:05,599 --> 00:08:10,160
a kind of a gui or ui that sits on top

00:08:08,319 --> 00:08:11,759
of the angular cli

00:08:10,160 --> 00:08:13,360
so if you're uncomfortable or not

00:08:11,759 --> 00:08:16,080
familiar with all the options

00:08:13,360 --> 00:08:17,440
for things in the angular cli you want

00:08:16,080 --> 00:08:18,960
to start getting ready for

00:08:17,440 --> 00:08:20,560
with some of those library projects that

00:08:18,960 --> 00:08:22,000
we've talked about earlier today in the

00:08:20,560 --> 00:08:24,080
sessions this morning

00:08:22,000 --> 00:08:25,039
you can actually just type in library i

00:08:24,080 --> 00:08:27,599
want to create a

00:08:25,039 --> 00:08:28,240
an angular library and i'm using nx

00:08:27,599 --> 00:08:29,599
tools

00:08:28,240 --> 00:08:31,039
and what it's going to do is just bring

00:08:29,599 --> 00:08:33,519
this up and i'm going to create a new

00:08:31,039 --> 00:08:36,000
library and this is going to be my

00:08:33,519 --> 00:08:38,159
video library or such and you fill

00:08:36,000 --> 00:08:42,000
everything out

00:08:38,159 --> 00:08:45,040
using the form you can define

00:08:42,000 --> 00:08:47,200
if you want what style you want sas

00:08:45,040 --> 00:08:48,880
or just regular css and you just fill

00:08:47,200 --> 00:08:50,000
everything out and what happens is it

00:08:48,880 --> 00:08:53,279
will actually

00:08:50,000 --> 00:08:55,600
compile and run that cli command

00:08:53,279 --> 00:08:57,360
in your terminal for you that you could

00:08:55,600 --> 00:09:00,080
copy and paste and reuse

00:08:57,360 --> 00:09:01,040
but if you um don't want to use the

00:09:00,080 --> 00:09:02,640
terminal

00:09:01,040 --> 00:09:04,480
this is just another way to kind of

00:09:02,640 --> 00:09:05,680
automate that process and i find it a

00:09:04,480 --> 00:09:07,839
little easier to

00:09:05,680 --> 00:09:08,959
to do when you're doing more complex

00:09:07,839 --> 00:09:11,120
kind of things when you're trying to

00:09:08,959 --> 00:09:14,240
build out maybe even a module

00:09:11,120 --> 00:09:17,600
that has a a

00:09:14,240 --> 00:09:21,360
a component module with a routing setup

00:09:17,600 --> 00:09:22,480
with a lazy loaded configuration to a

00:09:21,360 --> 00:09:25,120
parent module

00:09:22,480 --> 00:09:26,399
and when you do that uh basically um it

00:09:25,120 --> 00:09:30,320
gets pretty complicated

00:09:26,399 --> 00:09:31,839
but when you use the nx console

00:09:30,320 --> 00:09:34,160
it writes it all out for you so you can

00:09:31,839 --> 00:09:34,959
just execute this it does it in a dry

00:09:34,160 --> 00:09:37,279
run so

00:09:34,959 --> 00:09:38,720
when you're ready to go with what you

00:09:37,279 --> 00:09:40,080
like in your output

00:09:38,720 --> 00:09:42,880
basically all you need to do is just

00:09:40,080 --> 00:09:46,959
click that run and you're often

00:09:42,880 --> 00:09:50,320
you've created a library so

00:09:46,959 --> 00:09:54,080
that's pretty much it for uh

00:09:50,320 --> 00:09:56,800
what i have to share in terms of

00:09:54,080 --> 00:09:57,839
the automation here but hopefully using

00:09:56,800 --> 00:10:00,000
snippets uh

00:09:57,839 --> 00:10:01,920
automating your linting process using

00:10:00,000 --> 00:10:05,519
the launch configuration for debugging

00:10:01,920 --> 00:10:07,839
and using nx console to quickly use

00:10:05,519 --> 00:10:10,079
the cli to create elements in your

00:10:07,839 --> 00:10:19,279
application so

00:10:10,079 --> 00:10:21,360
enjoy the rest of the conference thanks

00:10:19,279 --> 00:10:21,360

YouTube URL: https://www.youtube.com/watch?v=TjoA1qwcEGc


