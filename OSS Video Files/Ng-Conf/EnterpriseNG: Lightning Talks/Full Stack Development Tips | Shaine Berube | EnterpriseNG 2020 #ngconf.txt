Title: Full Stack Development Tips | Shaine Berube | EnterpriseNG 2020 #ngconf
Publication date: 2021-02-01
Playlist: EnterpriseNG: Lightning Talks
Description: 
	ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:04,710 --> 00:00:08,809
[Music]

00:00:15,040 --> 00:00:18,640
my name is shane berube

00:00:16,320 --> 00:00:20,720
um just wanted a little about me i am a

00:00:18,640 --> 00:00:22,080
true full stack developer

00:00:20,720 --> 00:00:24,240
um and i'm not going to take too much

00:00:22,080 --> 00:00:25,359
time to go into details about myself

00:00:24,240 --> 00:00:28,160
i've done

00:00:25,359 --> 00:00:29,039
ci cd database work back-end work

00:00:28,160 --> 00:00:32,079
front-end work

00:00:29,039 --> 00:00:34,160
um done a pretty extensive angular i did

00:00:32,079 --> 00:00:34,880
actually work with aaron frost at one

00:00:34,160 --> 00:00:37,280
point

00:00:34,880 --> 00:00:38,800
for a few months there when he wa i was

00:00:37,280 --> 00:00:41,040
one of the first employees with hero

00:00:38,800 --> 00:00:43,760
devs actually so

00:00:41,040 --> 00:00:44,480
um and so i'm just gonna kind of go over

00:00:43,760 --> 00:00:46,000
some

00:00:44,480 --> 00:00:47,680
just some tips about full stack

00:00:46,000 --> 00:00:49,280
development and especially in regards to

00:00:47,680 --> 00:00:52,559
angular because i know this is a

00:00:49,280 --> 00:00:52,559
it's an angular conference

00:00:52,960 --> 00:00:57,600
so some of the tips there's really just

00:00:55,920 --> 00:00:58,879
remembering to consider angular in terms

00:00:57,600 --> 00:01:01,039
of the full stack

00:00:58,879 --> 00:01:02,480
angular is really only it's really only

00:01:01,039 --> 00:01:04,559
a part of the picture

00:01:02,480 --> 00:01:06,560
and there's areas where it works well

00:01:04,559 --> 00:01:09,920
and there's really areas where

00:01:06,560 --> 00:01:12,159
you probably should do something else

00:01:09,920 --> 00:01:15,200
it's not that it doesn't work it's it's

00:01:12,159 --> 00:01:17,439
not the best option for that area

00:01:15,200 --> 00:01:18,960
um so if you're working on back end for

00:01:17,439 --> 00:01:21,040
instance it's

00:01:18,960 --> 00:01:22,799
i i find that it's useful to try and

00:01:21,040 --> 00:01:27,840
gather the data that front it needs

00:01:22,799 --> 00:01:27,840
to do is into a call um

00:01:29,119 --> 00:01:34,640
the data that the particular front-end

00:01:32,240 --> 00:01:36,400
is calling for make sure that gathered

00:01:34,640 --> 00:01:38,240
that all into one call rather than

00:01:36,400 --> 00:01:41,200
forcing the ui to make multiple calls to

00:01:38,240 --> 00:01:43,360
gather information

00:01:41,200 --> 00:01:45,119
including actually if so if you have a

00:01:43,360 --> 00:01:48,159
list of data

00:01:45,119 --> 00:01:50,479
try to package that into a call

00:01:48,159 --> 00:01:51,520
because i find that javascript actually

00:01:50,479 --> 00:01:53,200
goes because

00:01:51,520 --> 00:01:55,119
able to iterate through lists a lot more

00:01:53,200 --> 00:01:57,680
effectively than

00:01:55,119 --> 00:01:58,960
trying to ping back and forth to

00:01:57,680 --> 00:02:01,840
multiple different

00:01:58,960 --> 00:02:02,960
calls gathering chunks of the list and

00:02:01,840 --> 00:02:04,479
yeah it's like okay just

00:02:02,960 --> 00:02:06,240
send the whole list over and let

00:02:04,479 --> 00:02:08,399
javascript handle it

00:02:06,240 --> 00:02:10,879
unless of course it's a really really

00:02:08,399 --> 00:02:14,000
really big list

00:02:10,879 --> 00:02:15,360
so um in terms of the database uh trying

00:02:14,000 --> 00:02:16,080
to store things in such a way that

00:02:15,360 --> 00:02:18,879
allows

00:02:16,080 --> 00:02:19,280
for the dynamic nature of the data when

00:02:18,879 --> 00:02:22,879
i'm

00:02:19,280 --> 00:02:25,599
when i'm architecting a database i am

00:02:22,879 --> 00:02:27,280
more concerned about what the data looks

00:02:25,599 --> 00:02:29,520
like when it's stored

00:02:27,280 --> 00:02:30,800
than i am about what it's going to look

00:02:29,520 --> 00:02:33,840
like when it's displayed

00:02:30,800 --> 00:02:34,239
that makes sense there i mean there's a

00:02:33,840 --> 00:02:36,720
whole

00:02:34,239 --> 00:02:38,160
api and then you've got angular which

00:02:36,720 --> 00:02:40,400
has its own like

00:02:38,160 --> 00:02:42,160
section of logic before you actually get

00:02:40,400 --> 00:02:44,480
to the there's two layers

00:02:42,160 --> 00:02:47,599
before you actually get to the display

00:02:44,480 --> 00:02:49,440
so i'm less concerned about

00:02:47,599 --> 00:02:51,840
making sure the data looks nice when

00:02:49,440 --> 00:02:53,760
it's stored and more concerned about

00:02:51,840 --> 00:02:54,959
being able to store it dynamically and

00:02:53,760 --> 00:02:56,879
being able to

00:02:54,959 --> 00:02:58,800
handle all of that when it's in the

00:02:56,879 --> 00:03:00,560
database

00:02:58,800 --> 00:03:02,560
but then you know utilize the backend

00:03:00,560 --> 00:03:05,200
layer to put the data together

00:03:02,560 --> 00:03:06,480
for a call from the front end i would

00:03:05,200 --> 00:03:09,840
not recommend

00:03:06,480 --> 00:03:11,519
doing one call per page because

00:03:09,840 --> 00:03:14,319
what's the point you have multiple

00:03:11,519 --> 00:03:17,200
pieces multiple sections in the page

00:03:14,319 --> 00:03:18,319
you want to make sure that you can call

00:03:17,200 --> 00:03:20,959
and keep your whole

00:03:18,319 --> 00:03:22,159
site responsive and dynamic try to

00:03:20,959 --> 00:03:24,560
package you know

00:03:22,159 --> 00:03:26,080
calls to the back end in such a way that

00:03:24,560 --> 00:03:27,040
it makes it easier for the back end to

00:03:26,080 --> 00:03:28,319
process data

00:03:27,040 --> 00:03:30,840
so when you're calling from the front

00:03:28,319 --> 00:03:35,200
end into the back end

00:03:30,840 --> 00:03:37,200
um try to remember that the data

00:03:35,200 --> 00:03:39,040
i should say try to remember that

00:03:37,200 --> 00:03:41,920
back-end developers

00:03:39,040 --> 00:03:43,840
most of the time do not have a pretty ui

00:03:41,920 --> 00:03:46,319
where they can see everything changing

00:03:43,840 --> 00:03:47,920
neatly on the screen most of the time

00:03:46,319 --> 00:03:49,280
they're looking directly at the code or

00:03:47,920 --> 00:03:52,640
they're looking at a big fat

00:03:49,280 --> 00:03:54,000
block of json so

00:03:52,640 --> 00:03:55,680
try to package things in a way that

00:03:54,000 --> 00:03:57,200
makes a little easier for the back end

00:03:55,680 --> 00:03:57,519
guys to gather the data you're looking

00:03:57,200 --> 00:03:59,840
for

00:03:57,519 --> 00:04:03,040
or to process the data you send them so

00:03:59,840 --> 00:04:06,239
they can store it in the database

00:04:03,040 --> 00:04:09,360
it helps to structure the folders

00:04:06,239 --> 00:04:10,640
on the front end if you can structure

00:04:09,360 --> 00:04:11,599
them in the same way that the back end

00:04:10,640 --> 00:04:13,519
is structured

00:04:11,599 --> 00:04:15,200
so it assists any back-end developers in

00:04:13,519 --> 00:04:17,120
locating files and assisting front-end

00:04:15,200 --> 00:04:18,959
developers if they need to

00:04:17,120 --> 00:04:20,160
um it also assists on the other end

00:04:18,959 --> 00:04:21,600
where the front-end developer if you

00:04:20,160 --> 00:04:22,960
need to dig into the back-end they can

00:04:21,600 --> 00:04:24,720
actually locate things quickly and

00:04:22,960 --> 00:04:26,400
easily

00:04:24,720 --> 00:04:28,320
but that being said this is all

00:04:26,400 --> 00:04:30,560
dependent on your project and

00:04:28,320 --> 00:04:32,240
you know if your project calls for a

00:04:30,560 --> 00:04:34,240
really extensive

00:04:32,240 --> 00:04:36,639
detailed backend architecture and you

00:04:34,240 --> 00:04:40,240
have no need to do that on the front end

00:04:36,639 --> 00:04:42,400
don't do it don't rely too heavily on

00:04:40,240 --> 00:04:44,400
any one area of the stack

00:04:42,400 --> 00:04:46,000
i i get this this is probably a

00:04:44,400 --> 00:04:48,400
controversial opinion but

00:04:46,000 --> 00:04:49,840
i get this all the time i get like your

00:04:48,400 --> 00:04:52,000
database guides

00:04:49,840 --> 00:04:53,840
and they're all like the database should

00:04:52,000 --> 00:04:57,680
handle everything it does

00:04:53,840 --> 00:04:59,280
all the heavy lifting that's like no

00:04:57,680 --> 00:05:00,960
but then you get your back end guys

00:04:59,280 --> 00:05:02,720
you're all like the back end should do

00:05:00,960 --> 00:05:03,919
all your heavy lifting don't do anything

00:05:02,720 --> 00:05:04,880
at the front end don't do anything on

00:05:03,919 --> 00:05:07,120
the database

00:05:04,880 --> 00:05:07,919
back end back ends where it's at and

00:05:07,120 --> 00:05:10,240
then you got

00:05:07,919 --> 00:05:11,600
some of your front end guys are all like

00:05:10,240 --> 00:05:13,039
what the heck do i need the back end and

00:05:11,600 --> 00:05:14,960
the database for i got all my heavy

00:05:13,039 --> 00:05:18,000
lifting right here in the front end

00:05:14,960 --> 00:05:20,320
it's like okay no

00:05:18,000 --> 00:05:22,080
let the database handle the data and it

00:05:20,320 --> 00:05:24,000
does some things very

00:05:22,080 --> 00:05:25,280
quickly very easily and it's very good

00:05:24,000 --> 00:05:26,720
at doing some things but

00:05:25,280 --> 00:05:29,280
it's not the easiest thing to develop

00:05:26,720 --> 00:05:30,160
functions for whereas the back end is

00:05:29,280 --> 00:05:33,440
good with the logic

00:05:30,160 --> 00:05:35,199
and connecting different systems but it

00:05:33,440 --> 00:05:37,199
why would the back end handle display

00:05:35,199 --> 00:05:39,039
logic it shouldn't be handling that

00:05:37,199 --> 00:05:40,880
the front end is it's a piece that

00:05:39,039 --> 00:05:42,320
handles the display logic and receiving

00:05:40,880 --> 00:05:45,199
input from the user

00:05:42,320 --> 00:05:45,840
so but on the other hand the front end

00:05:45,199 --> 00:05:48,080
also does

00:05:45,840 --> 00:05:49,759
not have a ton of power that would be

00:05:48,080 --> 00:05:50,880
necessary to handle heavy data

00:05:49,759 --> 00:05:53,759
processing

00:05:50,880 --> 00:05:54,400
so try to keep those pieces in mind and

00:05:53,759 --> 00:05:57,199
try to

00:05:54,400 --> 00:05:58,240
try to balance the power is what i what

00:05:57,199 --> 00:06:00,400
i like to

00:05:58,240 --> 00:06:01,759
say balance the power let the database

00:06:00,400 --> 00:06:03,120
handle that section with the back and

00:06:01,759 --> 00:06:06,400
handle it section with the front end

00:06:03,120 --> 00:06:08,400
handling section

00:06:06,400 --> 00:06:10,160
um one thing i wanted to also briefly

00:06:08,400 --> 00:06:13,120
touch on is just making sure that you

00:06:10,160 --> 00:06:14,319
understand ci cd a little bit you know

00:06:13,120 --> 00:06:15,280
you don't need to go into totally

00:06:14,319 --> 00:06:17,440
everything that it

00:06:15,280 --> 00:06:19,360
it requires but you want to make sure

00:06:17,440 --> 00:06:20,160
that your code is testable and that it

00:06:19,360 --> 00:06:23,280
will easily

00:06:20,160 --> 00:06:25,199
fit into a pipeline and the ideal setup

00:06:23,280 --> 00:06:26,479
with continuous integration continuous

00:06:25,199 --> 00:06:28,400
development for anyone who doesn't know

00:06:26,479 --> 00:06:29,199
what cicd stands for it's continuous

00:06:28,400 --> 00:06:32,160
integration

00:06:29,199 --> 00:06:32,960
continuous development the ideal setup

00:06:32,160 --> 00:06:36,319
for that

00:06:32,960 --> 00:06:37,919
is that when you have finished testing

00:06:36,319 --> 00:06:40,880
your code and you

00:06:37,919 --> 00:06:42,479
put your pr up someone approves the pr

00:06:40,880 --> 00:06:45,039
it then goes through a series of

00:06:42,479 --> 00:06:47,039
automated steps in automated testing

00:06:45,039 --> 00:06:48,639
and assuming it passes everything it

00:06:47,039 --> 00:06:50,160
goes right into production

00:06:48,639 --> 00:06:51,840
without requiring any manual

00:06:50,160 --> 00:06:55,039
intervention

00:06:51,840 --> 00:06:56,960
so that's all i got just some quick

00:06:55,039 --> 00:06:58,720
tips on full stack development and just

00:06:56,960 --> 00:07:00,840
kind of in regards to how angular kind

00:06:58,720 --> 00:07:03,840
of fits into that whole picture of

00:07:00,840 --> 00:07:03,840
things

00:07:05,200 --> 00:07:09,760

YouTube URL: https://www.youtube.com/watch?v=8mLl2IKJJ2M


