Title: Keynote - Brad Green, Jules Kremer
Publication date: 2016-05-04
Playlist: ng-conf 2016
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:02,929 --> 00:00:08,550
good morning I'm a brad green I'm an

00:00:07,350 --> 00:00:10,170
engineering director at Google and I

00:00:08,550 --> 00:00:16,560
manage the angular team thank you so

00:00:10,170 --> 00:00:19,080
much for coming as I like to do we're

00:00:16,560 --> 00:00:20,160
gonna start off well click on my thing

00:00:19,080 --> 00:00:24,180
here hold on I'm sorry

00:00:20,160 --> 00:00:25,320
technology there we go I have to thank

00:00:24,180 --> 00:00:27,060
all of you in the community for being

00:00:25,320 --> 00:00:29,640
part of this it's the most exciting

00:00:27,060 --> 00:00:31,109
thing for us to work on angular when we

00:00:29,640 --> 00:00:33,989
get to work with all of you

00:00:31,109 --> 00:00:36,630
in learning new things and building some

00:00:33,989 --> 00:00:39,840
amazing applications when we presented

00:00:36,630 --> 00:00:42,420
last fall at angular connect in London

00:00:39,840 --> 00:00:45,920
we had announced that over 1.1 million

00:00:42,420 --> 00:00:55,050
of you come to our doc site every month

00:00:45,920 --> 00:00:58,190
if we fast forward to today over 1.3

00:00:55,050 --> 00:01:02,399
million of you are already are using so

00:00:58,190 --> 00:01:03,930
in the last six months over 200,000 of

00:01:02,399 --> 00:01:06,240
you have come to the angular 1 platform

00:01:03,930 --> 00:01:09,299
and though it's been in beta all this

00:01:06,240 --> 00:01:11,090
time 360 thousand of you are using

00:01:09,299 --> 00:01:13,320
angular 2 already and this is an amazing

00:01:11,090 --> 00:01:16,920
community that's been coming together

00:01:13,320 --> 00:01:18,689
now we're gonna talk a bit about angular

00:01:16,920 --> 00:01:21,330
1 in this conference but really are

00:01:18,689 --> 00:01:24,780
focused on all of the fantastic things

00:01:21,330 --> 00:01:26,100
that you can do in angular 2 and so I

00:01:24,780 --> 00:01:30,390
want to talk a little bit about this

00:01:26,100 --> 00:01:32,610
journey because it started right here at

00:01:30,390 --> 00:01:34,770
the first ng-conf over two years ago

00:01:32,610 --> 00:01:37,340
where we announced angular 2 maybe a

00:01:34,770 --> 00:01:37,340
little early

00:01:38,030 --> 00:01:45,420
we were very young back then we set out

00:01:42,659 --> 00:01:46,770
on a really big mission and something

00:01:45,420 --> 00:01:50,729
that was very different than what we had

00:01:46,770 --> 00:01:52,439
done for angular one because if I think

00:01:50,729 --> 00:01:55,229
about what we were trying to do angular

00:01:52,439 --> 00:01:56,759
1 it was very much just build a

00:01:55,229 --> 00:02:00,990
framework that makes things easier to

00:01:56,759 --> 00:02:05,039
use reduce the amount of work you have

00:02:00,990 --> 00:02:06,810
to do in doing testing data binding all

00:02:05,039 --> 00:02:09,209
of these little things and in angular 2

00:02:06,810 --> 00:02:11,190
we're really increasing the scope quite

00:02:09,209 --> 00:02:13,530
a bit to build a complete platform and

00:02:11,190 --> 00:02:15,440
so we've started with what we did an

00:02:13,530 --> 00:02:18,810
angular one with dependency injection

00:02:15,440 --> 00:02:20,430
but we've made it much simpler and much

00:02:18,810 --> 00:02:22,650
more capable because now it actually

00:02:20,430 --> 00:02:24,420
supports lazy loading so you can load

00:02:22,650 --> 00:02:26,459
just the parts of your application that

00:02:24,420 --> 00:02:28,379
your users need to view what they want

00:02:26,459 --> 00:02:30,750
to see we've also been working with the

00:02:28,379 --> 00:02:32,459
standards community on adding some bits

00:02:30,750 --> 00:02:34,310
to the web platform and JavaScript in

00:02:32,459 --> 00:02:36,629
particular we've been working with

00:02:34,310 --> 00:02:38,819
yahuda over on the Ember team on this

00:02:36,629 --> 00:02:40,170
feature called decorators and decorators

00:02:38,819 --> 00:02:41,970
is an extension to the JavaScript

00:02:40,170 --> 00:02:45,239
language that allows you to add metadata

00:02:41,970 --> 00:02:47,549
to your code and for us it gives us a

00:02:45,239 --> 00:02:48,840
really nice way on angular to specify a

00:02:47,549 --> 00:02:51,959
dependency injection and really how you

00:02:48,840 --> 00:02:53,690
create components in angular 2 we've

00:02:51,959 --> 00:02:55,829
also been working on a low-level

00:02:53,690 --> 00:02:57,410
JavaScript feature called zones and

00:02:55,829 --> 00:03:00,180
although you might not use it yourself

00:02:57,410 --> 00:03:02,069
this is something that lets angular and

00:03:00,180 --> 00:03:03,959
other frameworks schedule the painting

00:03:02,069 --> 00:03:05,880
the drawing that we do in a much more

00:03:03,959 --> 00:03:07,709
efficient way and so you get performance

00:03:05,880 --> 00:03:09,209
benefits out of it but if you're an

00:03:07,709 --> 00:03:11,790
angular 1 developer you can think of

00:03:09,209 --> 00:03:13,290
zones as the reason you're no longer

00:03:11,790 --> 00:03:15,919
going to have to call dollar sign apply

00:03:13,290 --> 00:03:15,919
ever again

00:03:21,099 --> 00:03:28,909
getting ahead of myself we've built on

00:03:25,459 --> 00:03:31,480
these core components a much improved

00:03:28,909 --> 00:03:35,090
compiler that's much much faster and

00:03:31,480 --> 00:03:38,299
that allows us to do offline compilation

00:03:35,090 --> 00:03:39,709
so that we can drop large parts of the

00:03:38,299 --> 00:03:42,079
framework and make the loading time

00:03:39,709 --> 00:03:44,239
faster as well we have a change detector

00:03:42,079 --> 00:03:46,519
that's over 10 times faster than what we

00:03:44,239 --> 00:03:48,409
built for angular 1 and we have a new

00:03:46,519 --> 00:03:50,260
rendering model that again is much

00:03:48,409 --> 00:03:52,669
faster than what we did in angular 1 and

00:03:50,260 --> 00:03:54,889
has an architecture that's pluggable and

00:03:52,669 --> 00:03:56,209
so we can render to the Dom like we've

00:03:54,889 --> 00:03:58,099
done in the past but we can also render

00:03:56,209 --> 00:03:59,599
in other scenarios like we can render

00:03:58,099 --> 00:04:02,389
where there's no browser available in

00:03:59,599 --> 00:04:06,639
the server side or we can render to

00:04:02,389 --> 00:04:06,639
native components on mobile and desktop

00:04:07,239 --> 00:04:10,909
on top of this we're building many of

00:04:09,680 --> 00:04:13,099
the libraries that you're going to need

00:04:10,909 --> 00:04:15,019
to put a real world application together

00:04:13,099 --> 00:04:16,400
we're building material design for

00:04:15,019 --> 00:04:19,870
angular 2 so you're gonna have a really

00:04:16,400 --> 00:04:22,430
nice crafted responsive application UI

00:04:19,870 --> 00:04:24,229
we're starting to invest in mobile and

00:04:22,430 --> 00:04:26,479
today we're gonna be we're actually

00:04:24,229 --> 00:04:29,240
announcing our first mobile toolkit

00:04:26,479 --> 00:04:31,220
we'll show some of that today we've also

00:04:29,240 --> 00:04:33,530
been working with some folks in the

00:04:31,220 --> 00:04:35,570
community on angular Universal which

00:04:33,530 --> 00:04:38,030
allows you to run angular on the server

00:04:35,570 --> 00:04:40,849
so that you can support search engine

00:04:38,030 --> 00:04:43,099
optimization but also really fast

00:04:40,849 --> 00:04:44,690
first rendering for your users so they

00:04:43,099 --> 00:04:48,500
can have a really quick experience

00:04:44,690 --> 00:04:50,840
loading your app so that you yourself

00:04:48,500 --> 00:04:52,280
can be productive we've invested in a

00:04:50,840 --> 00:04:53,479
bunch of tools again with a community

00:04:52,280 --> 00:04:55,520
we've been working on the angular

00:04:53,479 --> 00:04:57,320
command-line interface that really

00:04:55,520 --> 00:04:59,479
flattens the work you need to do to

00:04:57,320 --> 00:05:01,940
start a new application scaffold tasks

00:04:59,479 --> 00:05:04,460
build components do production builds

00:05:01,940 --> 00:05:05,449
all kinds of stuff makes it one command

00:05:04,460 --> 00:05:08,389
instead of a whole bunch of

00:05:05,449 --> 00:05:09,710
configuration and file creation we've

00:05:08,389 --> 00:05:11,150
been working with Microsoft and some

00:05:09,710 --> 00:05:13,340
other partners on a set of language

00:05:11,150 --> 00:05:16,849
services that gives you intelligent code

00:05:13,340 --> 00:05:18,500
completion and refactoring in any IDE

00:05:16,849 --> 00:05:20,120
we'll talk more about that mostly

00:05:18,500 --> 00:05:23,449
tomorrow and then we've been working

00:05:20,120 --> 00:05:26,529
with the team at wrangle on a chrome

00:05:23,449 --> 00:05:27,909
plugin to give you insight into

00:05:26,529 --> 00:05:30,849
running angular applications for

00:05:27,909 --> 00:05:33,249
debugging if you are already running

00:05:30,849 --> 00:05:35,769
angular one applications we've built

00:05:33,249 --> 00:05:37,359
this tool this service called ng upgrade

00:05:35,769 --> 00:05:39,939
that allows you to seamlessly mix

00:05:37,359 --> 00:05:41,979
angular 2 components and services into

00:05:39,939 --> 00:05:43,989
your existing angular 1 applications and

00:05:41,979 --> 00:05:46,569
that some of the API is we're building

00:05:43,989 --> 00:05:48,159
for angular 2 we've built in a way so

00:05:46,569 --> 00:05:50,709
that you can use them in existing

00:05:48,159 --> 00:05:53,859
angular 1 applications this includes the

00:05:50,709 --> 00:05:55,719
router animation itn and so that it can

00:05:53,859 --> 00:05:59,799
be a really easy transition from angular

00:05:55,719 --> 00:06:01,869
1 to angular 2 so largely we've built

00:05:59,799 --> 00:06:04,959
all the things that we set out to do and

00:06:01,869 --> 00:06:07,239
if you've been following along we've

00:06:04,959 --> 00:06:11,009
moved from the beta phase to our release

00:06:07,239 --> 00:06:11,009
candidates we're very happy about this

00:06:16,590 --> 00:06:21,430
and so what this means is we're now at

00:06:19,270 --> 00:06:23,980
the place where we think ah we've almost

00:06:21,430 --> 00:06:26,890
got it let's see if we've got it we

00:06:23,980 --> 00:06:28,750
don't have quite have it but I will

00:06:26,890 --> 00:06:30,880
explain the the gaps that we have and so

00:06:28,750 --> 00:06:36,160
these are our attempts at final through

00:06:30,880 --> 00:06:37,270
very very close so in the beta period we

00:06:36,160 --> 00:06:39,340
actually developed a bunch of

00:06:37,270 --> 00:06:41,710
applications inside Google and with

00:06:39,340 --> 00:06:44,860
partners with you guys you folks outside

00:06:41,710 --> 00:06:46,630
and during that time we actually did

00:06:44,860 --> 00:06:47,880
some surveys to figure out what our gaps

00:06:46,630 --> 00:06:51,220
and what do we need to really solve

00:06:47,880 --> 00:06:53,110
before we can mark this as final and so

00:06:51,220 --> 00:06:54,490
we worked with Jeff Whelpley and some of

00:06:53,110 --> 00:06:57,490
the other Google developer experts in

00:06:54,490 --> 00:06:59,080
the angular community what some of the

00:06:57,490 --> 00:07:00,280
things you guys said were you really

00:06:59,080 --> 00:07:01,900
wanted to make sure performance was

00:07:00,280 --> 00:07:03,250
going to be rock-solid across the board

00:07:01,900 --> 00:07:06,100
that you could rely on angular for

00:07:03,250 --> 00:07:08,830
anything that you were gonna use that

00:07:06,100 --> 00:07:10,810
you had a really good productivity story

00:07:08,830 --> 00:07:12,610
that you could build applications

00:07:10,810 --> 00:07:15,430
quickly and easily maintain them and

00:07:12,610 --> 00:07:17,980
scale them to big teams and that angular

00:07:15,430 --> 00:07:19,210
was going to be versatile enough to work

00:07:17,980 --> 00:07:21,490
on all the platforms that you need to

00:07:19,210 --> 00:07:24,790
deliver and work with many different

00:07:21,490 --> 00:07:26,740
roles in your organization so on

00:07:24,790 --> 00:07:28,030
performance we've talked about this a

00:07:26,740 --> 00:07:29,440
couple times in the past but our real

00:07:28,030 --> 00:07:31,780
our goal is that we wanted to be small

00:07:29,440 --> 00:07:33,520
and fast in all scenarios so you should

00:07:31,780 --> 00:07:35,860
never have to worry is angular 2 the

00:07:33,520 --> 00:07:41,770
tool that I should use yes it is the

00:07:35,860 --> 00:07:43,930
tool that actually is so on rendering

00:07:41,770 --> 00:07:46,870
speed we'd previously announced in the

00:07:43,930 --> 00:07:48,970
beta period that we had already been 2.5

00:07:46,870 --> 00:07:52,870
times faster on initial render than

00:07:48,970 --> 00:07:54,220
angular 1 and in rerender if we have the

00:07:52,870 --> 00:07:56,890
browser has already seen that view

00:07:54,220 --> 00:07:59,260
before it was 4.2 times faster and this

00:07:56,890 --> 00:08:01,570
was good but it kind of bothered us that

00:07:59,260 --> 00:08:02,890
these numbers were different and it

00:08:01,570 --> 00:08:04,780
bothered one of our clients inside

00:08:02,890 --> 00:08:07,900
Google AdWords said I was very nice but

00:08:04,780 --> 00:08:09,460
maybe faster would be nicer and so we

00:08:07,900 --> 00:08:11,560
went back and we did a bunch of research

00:08:09,460 --> 00:08:14,680
on techniques for improving that hold

00:08:11,560 --> 00:08:16,420
start rendering speed and the technique

00:08:14,680 --> 00:08:19,600
we settled on was this code generation

00:08:16,420 --> 00:08:22,960
of the compiler and so now across the

00:08:19,600 --> 00:08:25,690
board we have about 5 times faster than

00:08:22,960 --> 00:08:27,900
angular 1 rendering very happy about

00:08:25,690 --> 00:08:27,900
this

00:08:30,550 --> 00:08:34,940
the way this works is instead of

00:08:32,780 --> 00:08:37,460
shipping those HTML templates to the

00:08:34,940 --> 00:08:39,620
browser to be interpreted over there we

00:08:37,460 --> 00:08:41,360
have an offline compile step that

00:08:39,620 --> 00:08:44,060
instead of shipping those templates we

00:08:41,360 --> 00:08:45,620
just generate fully optimized JavaScript

00:08:44,060 --> 00:08:47,480
what what you would have written by hand

00:08:45,620 --> 00:08:49,400
if you were very good at building

00:08:47,480 --> 00:08:51,740
optimized JavaScript so you get the

00:08:49,400 --> 00:08:53,330
benefits of handwritten JavaScript with

00:08:51,740 --> 00:08:56,870
all the really nice features of having a

00:08:53,330 --> 00:08:58,880
framework this solved another problem

00:08:56,870 --> 00:09:01,010
for us or it will solve because this is

00:08:58,880 --> 00:09:05,000
the one thing that's not quite there for

00:09:01,010 --> 00:09:07,190
us where in angular 2 if you've been

00:09:05,000 --> 00:09:09,350
shipping if you've been shipping

00:09:07,190 --> 00:09:11,690
applications you may have seen that it's

00:09:09,350 --> 00:09:14,780
kind of big on the order of like about

00:09:11,690 --> 00:09:16,460
hundred 70 K for the library and it

00:09:14,780 --> 00:09:19,250
wouldn't compare this to the rather

00:09:16,460 --> 00:09:21,440
svelte angular one at about 56 K you're

00:09:19,250 --> 00:09:23,930
like well what's going on guys why why

00:09:21,440 --> 00:09:28,270
so big in the builds we have that we're

00:09:23,930 --> 00:09:32,290
gonna be demoing today we're now at 45 K

00:09:28,270 --> 00:09:32,290
actually smaller than angular 1

00:09:35,470 --> 00:09:39,530
and we're not gonna stop there we have

00:09:37,730 --> 00:09:41,360
some plans and goals to get dramatically

00:09:39,530 --> 00:09:44,330
smaller than this we'll talk about that

00:09:41,360 --> 00:09:46,970
more tomorrow not only do we want to be

00:09:44,330 --> 00:09:48,440
smaller but we want to make it possible

00:09:46,970 --> 00:09:50,900
for you to only deliver the minimal

00:09:48,440 --> 00:09:53,060
amount of code to your users so they can

00:09:50,900 --> 00:09:55,340
load that very quickly and render it

00:09:53,060 --> 00:09:57,440
almost immediately this is possible

00:09:55,340 --> 00:09:59,990
during the beta period through lazy

00:09:57,440 --> 00:10:02,360
loading that you manage yourself but

00:09:59,990 --> 00:10:04,580
this can be kind of a task it's an extra

00:10:02,360 --> 00:10:06,650
bit of overhead for you as developers we

00:10:04,580 --> 00:10:12,710
wanted to do help with this and so we

00:10:06,650 --> 00:10:15,710
came across a technique based on the

00:10:12,710 --> 00:10:17,900
router that splits this up because the

00:10:15,710 --> 00:10:20,630
route really declares all of the modules

00:10:17,900 --> 00:10:23,330
you're going to need to render a given

00:10:20,630 --> 00:10:24,320
route and so we can go pull those for a

00:10:23,330 --> 00:10:27,830
particular route so when the user

00:10:24,320 --> 00:10:29,360
requests the first route we just load

00:10:27,830 --> 00:10:32,360
the modules the code that's required for

00:10:29,360 --> 00:10:33,800
that one that requests the second route

00:10:32,360 --> 00:10:36,790
we just load that bit so usually can

00:10:33,800 --> 00:10:39,350
have a very fast loading experience

00:10:36,790 --> 00:10:42,470
we've also been as I mentioned working

00:10:39,350 --> 00:10:44,980
with some external partners on angular

00:10:42,470 --> 00:10:46,910
Universal which allows us to do

00:10:44,980 --> 00:10:48,970
server-side pre-rendering the way this

00:10:46,910 --> 00:10:50,810
works is when a user makes a request

00:10:48,970 --> 00:10:52,940
angular running on the server actually

00:10:50,810 --> 00:10:55,970
does a full rendering of what it would

00:10:52,940 --> 00:10:58,400
have done on the client side and sends

00:10:55,970 --> 00:10:59,720
that back in just HTML and CSS so it's

00:10:58,400 --> 00:11:01,340
very small compared to your full

00:10:59,720 --> 00:11:03,080
application and it can render almost

00:11:01,340 --> 00:11:05,510
instantaneously once it gets to the

00:11:03,080 --> 00:11:06,980
browser this is great for mobile in

00:11:05,510 --> 00:11:09,560
particular on 2g where they don't have

00:11:06,980 --> 00:11:11,240
much bandwidth at the same time as that

00:11:09,560 --> 00:11:13,790
first payload comes down and the user

00:11:11,240 --> 00:11:16,910
sees your application we start streaming

00:11:13,790 --> 00:11:19,490
down the full JavaScript for the running

00:11:16,910 --> 00:11:22,670
the live application you can also

00:11:19,490 --> 00:11:25,010
include an optional pre-boot script that

00:11:22,670 --> 00:11:27,200
will record any user action any user

00:11:25,010 --> 00:11:29,180
events that the user might have done

00:11:27,200 --> 00:11:31,040
while waiting for the download so that

00:11:29,180 --> 00:11:32,600
they can be replayed to your application

00:11:31,040 --> 00:11:35,570
and the user never loses any of their

00:11:32,600 --> 00:11:39,980
intentions this angular Universal is

00:11:35,570 --> 00:11:42,650
available now in node.js and on asp.net

00:11:39,980 --> 00:11:44,450
and we'll talk tomorrow about some of

00:11:42,650 --> 00:11:45,710
the other folks that we're working on so

00:11:44,450 --> 00:11:48,430
you can have this available in many many

00:11:45,710 --> 00:11:50,750
different types of servers

00:11:48,430 --> 00:11:52,250
in terms of responsiveness in your

00:11:50,750 --> 00:11:54,230
application this is kind of a general

00:11:52,250 --> 00:11:56,900
problem of just JavaScript apps in

00:11:54,230 --> 00:12:00,590
general in that javascript is single

00:11:56,900 --> 00:12:03,950
threaded and there has been a technique

00:12:00,590 --> 00:12:06,170
for moving some of that work off the

00:12:03,950 --> 00:12:08,450
main UI thread so that users don't see

00:12:06,170 --> 00:12:10,010
pauses or stutters called web workers

00:12:08,450 --> 00:12:12,050
but almost nobody uses it because it's

00:12:10,010 --> 00:12:13,370
really hard to figure out and it's hard

00:12:12,050 --> 00:12:15,170
because once you move your code into a

00:12:13,370 --> 00:12:17,420
web worker you no longer have access to

00:12:15,170 --> 00:12:18,770
the DOM and it's a little bit unclear

00:12:17,420 --> 00:12:22,580
how you would build the bridge between

00:12:18,770 --> 00:12:26,270
them on angular we've built a way to

00:12:22,580 --> 00:12:28,820
move all of the all of your code and

00:12:26,270 --> 00:12:31,610
most of angular into a web worker just

00:12:28,820 --> 00:12:33,830
by changing the one line of bootstrap

00:12:31,610 --> 00:12:36,080
configuration and so you get the ability

00:12:33,830 --> 00:12:37,520
to do even more work than you were doing

00:12:36,080 --> 00:12:39,410
today and data processing garbage

00:12:37,520 --> 00:12:41,270
collection whatever your app needs to do

00:12:39,410 --> 00:12:46,520
and not have to worry about it slowing

00:12:41,270 --> 00:12:49,850
down the user experience on to

00:12:46,520 --> 00:12:51,080
productivity I had mentioned that we've

00:12:49,850 --> 00:12:52,610
been working with the Wrangell team for

00:12:51,080 --> 00:12:54,890
quite some time we used to call this

00:12:52,610 --> 00:12:57,500
Batarang home but as it came along it's

00:12:54,890 --> 00:12:59,120
in be kind of a long name and the rail

00:12:57,500 --> 00:13:01,280
team decided a guru would be nice for

00:12:59,120 --> 00:13:03,020
this and so we've rebranded as angular a

00:13:01,280 --> 00:13:06,110
guru you can find it at augury

00:13:03,020 --> 00:13:08,210
angular do this is a chrome developer

00:13:06,110 --> 00:13:11,330
tool plugin that gives you insight into

00:13:08,210 --> 00:13:12,650
your live running applications and so if

00:13:11,330 --> 00:13:13,580
you've got an application maybe it looks

00:13:12,650 --> 00:13:16,580
something like this

00:13:13,580 --> 00:13:20,240
you can open the chrome dev tools and

00:13:16,580 --> 00:13:21,800
immediately see your component tree with

00:13:20,240 --> 00:13:25,270
all of its attributes you can inspect

00:13:21,800 --> 00:13:27,680
its inputs outputs the children and

00:13:25,270 --> 00:13:29,090
modify it state watches at state gets

00:13:27,680 --> 00:13:31,730
modified in your applications you can

00:13:29,090 --> 00:13:34,130
understand how the data binding is

00:13:31,730 --> 00:13:37,070
hooked up additionally they have very

00:13:34,130 --> 00:13:39,830
nice visualizations for the injection

00:13:37,070 --> 00:13:41,150
the injectors and the routing so you can

00:13:39,830 --> 00:13:43,400
again really understand the architecture

00:13:41,150 --> 00:13:45,050
of application whether it's just a big

00:13:43,400 --> 00:13:46,670
app you work on or maybe you're very new

00:13:45,050 --> 00:13:49,120
to this application dropping into it for

00:13:46,670 --> 00:13:49,120
the first time

00:13:49,500 --> 00:13:54,810
as angular one grew it kind of grew

00:13:52,200 --> 00:13:57,120
organically and so in angular 2 we

00:13:54,810 --> 00:13:59,570
really wanted to focus on simplicity of

00:13:57,120 --> 00:14:02,570
the whole system and there's one example

00:13:59,570 --> 00:14:04,800
in any other one there's something like

00:14:02,570 --> 00:14:07,080
43 are so different directives you just

00:14:04,800 --> 00:14:08,640
kind of need to learn to know how to use

00:14:07,080 --> 00:14:10,890
angular 1 these are things like ng-show

00:14:08,640 --> 00:14:13,890
and ng-hide energy cloak and all of the

00:14:10,890 --> 00:14:15,240
event-based ones in angular 2 you can

00:14:13,890 --> 00:14:16,650
just forget about it you don't have to

00:14:15,240 --> 00:14:20,850
remember them anymore because there's

00:14:16,650 --> 00:14:23,130
two simple pieces of syntax you learn to

00:14:20,850 --> 00:14:25,680
do data binding to properties use square

00:14:23,130 --> 00:14:27,120
brackets and to do binding to events we

00:14:25,680 --> 00:14:29,220
just use parentheses and they replace

00:14:27,120 --> 00:14:31,320
the functionality of all of those 43

00:14:29,220 --> 00:14:32,760
directives which is great for me as a

00:14:31,320 --> 00:14:34,830
developer but I think it's even better

00:14:32,760 --> 00:14:36,330
so I might think of my productivity as

00:14:34,830 --> 00:14:41,520
an individual developer but I'm probably

00:14:36,330 --> 00:14:43,260
one of many where I have to collaborate

00:14:41,520 --> 00:14:45,060
and there it's important that we've got

00:14:43,260 --> 00:14:46,530
sort of standardized idioms that we know

00:14:45,060 --> 00:14:47,910
what to expect how people are going to

00:14:46,530 --> 00:14:49,890
create components how the architect

00:14:47,910 --> 00:14:50,490
services how all of these things fit

00:14:49,890 --> 00:14:52,410
together

00:14:50,490 --> 00:14:54,390
I probably if I'm very successful I have

00:14:52,410 --> 00:14:56,580
a large team with multiple roles or I

00:14:54,390 --> 00:14:59,370
may have designers I may have test

00:14:56,580 --> 00:15:00,930
specialists release engineers who all

00:14:59,370 --> 00:15:03,210
would like to know what to expect when

00:15:00,930 --> 00:15:06,360
they come look at the code and so beyond

00:15:03,210 --> 00:15:07,980
the API is in the core system we wanted

00:15:06,360 --> 00:15:11,520
to have a style guide that came out with

00:15:07,980 --> 00:15:13,050
angular when it launched and so unlike

00:15:11,520 --> 00:15:14,310
angular 1 which thanks to John Papa we

00:15:13,050 --> 00:15:17,790
have a very nice style guide but it came

00:15:14,310 --> 00:15:19,980
years later in angular 2 we've launched

00:15:17,790 --> 00:15:23,010
this just last night you go to angular

00:15:19,980 --> 00:15:25,530
dial - style guide and it gives you

00:15:23,010 --> 00:15:27,240
really explicit guidance on the

00:15:25,530 --> 00:15:29,520
architecture for building your angular 2

00:15:27,240 --> 00:15:31,500
applications and the reasoning behind

00:15:29,520 --> 00:15:35,520
why you would or would not choose to

00:15:31,500 --> 00:15:38,070
pick up this piece of the style now if

00:15:35,520 --> 00:15:42,089
you're using typescript we can actually

00:15:38,070 --> 00:15:45,990
do one step better there's this guy make

00:15:42,089 --> 00:15:47,640
a gut chef who's built a tool called

00:15:45,990 --> 00:15:49,290
code Eliezer and Eliezer actually

00:15:47,640 --> 00:15:51,780
does static analysis on your code and

00:15:49,290 --> 00:15:52,980
matches it against the style guide to

00:15:51,780 --> 00:15:53,280
tell you if you're on the right track or

00:15:52,980 --> 00:15:55,200
not

00:15:53,280 --> 00:15:57,000
so as you're developing we can actually

00:15:55,200 --> 00:16:01,070
give you architectural feedback on your

00:15:57,000 --> 00:16:01,070
application pretty cool

00:16:06,279 --> 00:16:10,579
onto the CLI again this has been a big

00:16:09,259 --> 00:16:15,350
collaboration with folks in the

00:16:10,579 --> 00:16:18,319
community the CLI represents automation

00:16:15,350 --> 00:16:20,600
for all of those manual grungy tasks

00:16:18,319 --> 00:16:21,769
that we wish we didn't have to do I wish

00:16:20,600 --> 00:16:23,180
I could just focus on building an

00:16:21,769 --> 00:16:26,149
awesome application and that's what the

00:16:23,180 --> 00:16:28,309
CLI represents and so if you're building

00:16:26,149 --> 00:16:29,569
a normal application you probably do a

00:16:28,309 --> 00:16:31,069
workflow something like this I'm going

00:16:29,569 --> 00:16:32,839
to create my project directory generate

00:16:31,069 --> 00:16:34,279
some components I want to start up a dev

00:16:32,839 --> 00:16:36,050
server so I can see it I'm going to

00:16:34,279 --> 00:16:37,430
generate some routes I want the code to

00:16:36,050 --> 00:16:39,319
look nice so I'll run a linter in a

00:16:37,430 --> 00:16:41,569
formatter scaffold my tests and run them

00:16:39,319 --> 00:16:43,639
I want to do some pre-processing using

00:16:41,569 --> 00:16:45,439
sass or less or compass and I'll build

00:16:43,639 --> 00:16:47,720
up do an optimized build for deployment

00:16:45,439 --> 00:16:49,399
to finally deploy it and the folks

00:16:47,720 --> 00:16:52,069
working on the CLI have actually built

00:16:49,399 --> 00:16:54,350
commands that simplify all of these

00:16:52,069 --> 00:16:56,089
things and just to give you an example

00:16:54,350 --> 00:16:58,069
of how simple it can be

00:16:56,089 --> 00:16:59,720
previously on angular 2 to start a

00:16:58,069 --> 00:17:01,550
project you would create a project

00:16:59,720 --> 00:17:03,470
directory write a whole bunch of config

00:17:01,550 --> 00:17:05,480
files for your tools install the

00:17:03,470 --> 00:17:07,399
packages those tools that use the

00:17:05,480 --> 00:17:09,289
configs you'd write a whole bunch of

00:17:07,399 --> 00:17:10,959
files to build your start of your

00:17:09,289 --> 00:17:15,649
angular application and then hit start

00:17:10,959 --> 00:17:19,360
with the CLI it looks like this say do

00:17:15,649 --> 00:17:19,360
awesome apps and you start it

00:17:21,820 --> 00:17:26,630
pretty good all right on to versatility

00:17:25,400 --> 00:17:28,970
so we made a bunch of architectural

00:17:26,630 --> 00:17:32,810
decisions in angular2 so that we were

00:17:28,970 --> 00:17:35,090
not tightly coupled to the Dom and we

00:17:32,810 --> 00:17:36,410
loved the plot web platform there are

00:17:35,090 --> 00:17:37,970
many though there are many places we

00:17:36,410 --> 00:17:39,680
would like to take the web platform that

00:17:37,970 --> 00:17:44,540
we can't if we're tightly coupled to it

00:17:39,680 --> 00:17:46,490
and so we're investing first in mobile

00:17:44,540 --> 00:17:49,520
development and today we're announcing

00:17:46,490 --> 00:17:51,140
the launch of our mobile toolkit on

00:17:49,520 --> 00:17:53,240
angular you can get through it at mobile

00:17:51,140 --> 00:17:56,660
angular do and you can listen to Jeff

00:17:53,240 --> 00:17:58,340
and Alex talking about it later today in

00:17:56,660 --> 00:18:00,050
particular we're interested in

00:17:58,340 --> 00:18:01,640
supporting this type of new mobile

00:18:00,050 --> 00:18:04,100
application called progressive web apps

00:18:01,640 --> 00:18:06,140
where it's a web app but that becomes

00:18:04,100 --> 00:18:08,570
progressively more like an installed app

00:18:06,140 --> 00:18:11,060
as you use it and the reason we want to

00:18:08,570 --> 00:18:14,060
support this is because most developers

00:18:11,060 --> 00:18:15,620
find it's really hard to get people to

00:18:14,060 --> 00:18:17,060
find their app in the App Store or the

00:18:15,620 --> 00:18:18,890
Play Store and install it they're just a

00:18:17,060 --> 00:18:20,900
lot of friction to get that happen but

00:18:18,890 --> 00:18:22,220
they are being successful getting people

00:18:20,900 --> 00:18:24,080
to surf their web site and so the

00:18:22,220 --> 00:18:26,150
experience for users is something like

00:18:24,080 --> 00:18:28,010
this they surf to your web site on their

00:18:26,150 --> 00:18:29,660
phone it's just like they always do but

00:18:28,010 --> 00:18:31,670
in the background your app gets auto

00:18:29,660 --> 00:18:33,200
installed for them so that it's there

00:18:31,670 --> 00:18:35,750
when they come back and they get an

00:18:33,200 --> 00:18:39,440
option to install your icon to their

00:18:35,750 --> 00:18:40,970
home screen on their device behind the

00:18:39,440 --> 00:18:42,740
scenes we're taking advantage of some

00:18:40,970 --> 00:18:44,930
new web platform features we're using

00:18:42,740 --> 00:18:47,540
service workers to automatically cache

00:18:44,930 --> 00:18:50,240
your data and application code and then

00:18:47,540 --> 00:18:52,940
through server side push we can actually

00:18:50,240 --> 00:18:55,160
push down new versions of that code and

00:18:52,940 --> 00:18:57,560
data so that's ready for the user just

00:18:55,160 --> 00:18:59,930
like native applications do and so that

00:18:57,560 --> 00:19:01,310
it's also there if the user has

00:18:59,930 --> 00:19:02,630
intermittent connectivity or it just

00:19:01,310 --> 00:19:03,770
happens to be offline they can still

00:19:02,630 --> 00:19:04,520
have a great experience with your

00:19:03,770 --> 00:19:06,920
application

00:19:04,520 --> 00:19:09,890
we're supporting this particularly with

00:19:06,920 --> 00:19:12,200
angular with angular universal so they

00:19:09,890 --> 00:19:13,460
can have a really fast first render

00:19:12,200 --> 00:19:16,760
experience which is particularly

00:19:13,460 --> 00:19:18,800
critical on mobile on 2g so that they

00:19:16,760 --> 00:19:20,750
can have a really responsive experience

00:19:18,800 --> 00:19:22,580
we can use web workers and then bringing

00:19:20,750 --> 00:19:25,520
it all together so all of these pieces

00:19:22,580 --> 00:19:29,560
of architecture get a starter kit for

00:19:25,520 --> 00:19:29,560
you we can pull it together with the CLI

00:19:29,960 --> 00:19:34,200
for once you are successful attracting

00:19:32,700 --> 00:19:35,880
users to your platform you probably will

00:19:34,200 --> 00:19:39,990
want an installable after they can use

00:19:35,880 --> 00:19:41,280
you've got a couple examples here we've

00:19:39,990 --> 00:19:42,690
actually been working with the ionic

00:19:41,280 --> 00:19:44,789
team longer than almost any other

00:19:42,690 --> 00:19:46,950
partner that we've got actually at the

00:19:44,789 --> 00:19:48,659
beginning of angular 2 two years ago

00:19:46,950 --> 00:19:50,760
here we started working with them on

00:19:48,659 --> 00:19:51,990
building that next generation of angular

00:19:50,760 --> 00:19:54,510
to make sure it works well with ionic

00:19:51,990 --> 00:19:55,860
and what way ionic works is you work

00:19:54,510 --> 00:19:58,049
with web views and you can actually have

00:19:55,860 --> 00:19:59,970
a very nice transition using ionic to

00:19:58,049 --> 00:20:02,700
build your progressive web apps and then

00:19:59,970 --> 00:20:05,280
using that same code on the installed

00:20:02,700 --> 00:20:07,650
mobile version and what ionic does they

00:20:05,280 --> 00:20:11,280
give you a way to build UIs that look

00:20:07,650 --> 00:20:12,630
native on iOS Android and Windows but

00:20:11,280 --> 00:20:15,179
use web views like you're used to on the

00:20:12,630 --> 00:20:16,770
web but they also give you access to all

00:20:15,179 --> 00:20:22,650
the native features you're gonna want

00:20:16,770 --> 00:20:23,880
like the camera accelerometer GPS more

00:20:22,650 --> 00:20:25,260
recently we've been working with the

00:20:23,880 --> 00:20:26,850
team at native script and what native

00:20:25,260 --> 00:20:28,919
script does is they give us another

00:20:26,850 --> 00:20:32,870
renderer that actually uses the native

00:20:28,919 --> 00:20:36,240
UI elements on Android iOS and Windows

00:20:32,870 --> 00:20:38,309
so that you can build in JavaScript

00:20:36,240 --> 00:20:40,470
using all of the angular constructs that

00:20:38,309 --> 00:20:43,530
you're used to but having a fully native

00:20:40,470 --> 00:20:46,049
UI similarly we had started a project

00:20:43,530 --> 00:20:48,210
with the Facebook folks on react native

00:20:46,049 --> 00:20:50,460
we kind of dropped the ball but luckily

00:20:48,210 --> 00:20:51,870
some alert partners at Amadeus picked up

00:20:50,460 --> 00:20:53,909
the work that we've done and pulled it

00:20:51,870 --> 00:20:56,039
over the finish line and you can hear

00:20:53,909 --> 00:20:58,320
talks from all of these folks at the

00:20:56,039 --> 00:21:02,820
conference and there's some pretty cool

00:20:58,320 --> 00:21:03,900
stuff desktop is new for us and there's

00:21:02,820 --> 00:21:06,840
a couple of different ways you can get

00:21:03,900 --> 00:21:11,100
to desktop we've got starter kits for

00:21:06,840 --> 00:21:12,450
both Windows Universal and electron and

00:21:11,100 --> 00:21:13,890
I'm gonna walk you through the electron

00:21:12,450 --> 00:21:14,429
case because it's pretty similar in both

00:21:13,890 --> 00:21:16,380
scenarios

00:21:14,429 --> 00:21:18,570
so what electron does they give you the

00:21:16,380 --> 00:21:21,570
shell and electrons that it's a tool of

00:21:18,570 --> 00:21:24,559
toolkit from github if you've used

00:21:21,570 --> 00:21:26,940
something like slack on the desktop or

00:21:24,559 --> 00:21:28,740
vs code you've already been using an

00:21:26,940 --> 00:21:32,220
electron app what they do is they give

00:21:28,740 --> 00:21:34,740
you a pair of chrome to do rendering and

00:21:32,220 --> 00:21:37,649
node to do processing coupled in a

00:21:34,740 --> 00:21:41,280
package and so you can develop using

00:21:37,649 --> 00:21:42,500
HTML and JavaScript you get installers

00:21:41,280 --> 00:21:44,000
for Windows Mac and

00:21:42,500 --> 00:21:46,760
with auto operators and all the nice

00:21:44,000 --> 00:21:48,620
pieces that you would like and you get

00:21:46,760 --> 00:21:50,409
native menus and notifications to make

00:21:48,620 --> 00:21:52,789
it feel like a real desktop application

00:21:50,409 --> 00:21:54,980
if we look at this diagram though it

00:21:52,789 --> 00:21:56,570
looks suspiciously like my web workers

00:21:54,980 --> 00:21:59,630
diagram and we can perform that same

00:21:56,570 --> 00:22:03,110
trick here where we move angular into

00:21:59,630 --> 00:22:04,789
the nodejs process this has that same

00:22:03,110 --> 00:22:06,919
effect as we do on mobile where it's

00:22:04,789 --> 00:22:08,390
fast or snap here more responsive but I

00:22:06,919 --> 00:22:10,190
think more powerful than that is that

00:22:08,390 --> 00:22:13,370
you get direct access to all of the

00:22:10,190 --> 00:22:15,860
platform api's you can call on the

00:22:13,370 --> 00:22:17,780
authentication model for your OS the

00:22:15,860 --> 00:22:19,850
database hardware whatever you want

00:22:17,780 --> 00:22:22,250
directly without ever having to go over

00:22:19,850 --> 00:22:26,450
HTTP right within your service in an

00:22:22,250 --> 00:22:28,010
angular application the last big thing

00:22:26,450 --> 00:22:30,799
that folks had asked us for is that we

00:22:28,010 --> 00:22:32,539
wanted a really nice rich suite of UI

00:22:30,799 --> 00:22:34,760
elements that they can rely on without

00:22:32,539 --> 00:22:36,110
having to write them themselves and the

00:22:34,760 --> 00:22:38,539
thing that they called out most often

00:22:36,110 --> 00:22:40,820
was angular material and so yes we're

00:22:38,539 --> 00:22:43,549
building this for angular 2 but material

00:22:40,820 --> 00:22:44,990
is not the only game in town and so we

00:22:43,549 --> 00:22:48,620
wanted to bring our friends along with

00:22:44,990 --> 00:22:51,080
us and so we're building material to in

00:22:48,620 --> 00:22:53,059
a way that we can actually share not

00:22:51,080 --> 00:22:54,919
just some of the techniques but also

00:22:53,059 --> 00:22:57,830
architecture the core bits of

00:22:54,919 --> 00:23:02,720
infrastructure with our partners and so

00:22:57,830 --> 00:23:06,850
we have the start of material to the

00:23:02,720 --> 00:23:08,990
folks at wijmo have already released a

00:23:06,850 --> 00:23:13,580
rich suite of components that you can

00:23:08,990 --> 00:23:15,380
use already from the world of java the

00:23:13,580 --> 00:23:18,409
prime folks have released prime ng for

00:23:15,380 --> 00:23:20,000
angular 2 if you're building an

00:23:18,409 --> 00:23:22,190
application for Salesforce you can use

00:23:20,000 --> 00:23:26,330
ng lightning for a lightning themed

00:23:22,190 --> 00:23:28,549
component suite Vaadin has created a set

00:23:26,330 --> 00:23:30,770
of web components that will work with

00:23:28,549 --> 00:23:33,140
angular 2 today they're also rewriting

00:23:30,770 --> 00:23:35,690
this as natively implemented angular 2

00:23:33,140 --> 00:23:38,659
app components so that they could take

00:23:35,690 --> 00:23:42,470
advantage of web workers and server-side

00:23:38,659 --> 00:23:43,820
rendering with Universal telluric has

00:23:42,470 --> 00:23:47,030
said that they're going to rewrite the

00:23:43,820 --> 00:23:48,890
kendo UI this is in progress and you've

00:23:47,030 --> 00:23:51,049
just got a couple options for bootstrap

00:23:48,890 --> 00:23:53,179
ng bootstrap is one example over there

00:23:51,049 --> 00:23:54,500
I've probably missed a couple well we'll

00:23:53,179 --> 00:23:57,159
get you guys in our resources page

00:23:54,500 --> 00:23:57,159
pretty soon

00:23:58,900 --> 00:24:05,360
all right I now like to bring or invite

00:24:02,809 --> 00:24:07,730
Jules Kramer on stage Jules is in charge

00:24:05,360 --> 00:24:09,200
of her developer relations group on the

00:24:07,730 --> 00:24:10,880
angular team and she's going to tell us

00:24:09,200 --> 00:24:13,480
about some of the great things we've

00:24:10,880 --> 00:24:13,480
done with partners

00:24:20,220 --> 00:24:24,600
think I'm Jules and I've actually been

00:24:22,980 --> 00:24:26,850
with Google for a while I started off

00:24:24,600 --> 00:24:29,070
helping companies big and small make a

00:24:26,850 --> 00:24:31,350
transition from traditional IT systems

00:24:29,070 --> 00:24:33,389
into the cloud and while I was doing

00:24:31,350 --> 00:24:35,820
that I noticed that developer needs were

00:24:33,389 --> 00:24:37,950
also in transition and as someone who's

00:24:35,820 --> 00:24:39,629
always cared about developer problems

00:24:37,950 --> 00:24:40,860
and solving them I set out to see if

00:24:39,629 --> 00:24:43,590
there was something that Google could do

00:24:40,860 --> 00:24:45,659
and so last year I was actually here at

00:24:43,590 --> 00:24:47,580
ng-conf I didn't know anyone on the

00:24:45,659 --> 00:24:49,620
angular team not Eagle or not Brad not

00:24:47,580 --> 00:24:51,629
Naomi no one they didn't know me I

00:24:49,620 --> 00:24:54,210
actually won the ticket in an internal

00:24:51,629 --> 00:24:56,700
lottery my eternal gratitude to Igor for

00:24:54,210 --> 00:24:58,440
picking me I packed my bags I left out

00:24:56,700 --> 00:25:00,960
all of my google gear and I showed up

00:24:58,440 --> 00:25:04,110
here in stealth mode it's actually a

00:25:00,960 --> 00:25:05,789
thing and why would I do that

00:25:04,110 --> 00:25:07,230
well I did that because I wanted to sit

00:25:05,789 --> 00:25:08,639
out there with all of you I wanted to

00:25:07,230 --> 00:25:09,840
walk in the hallways I wanted to hear

00:25:08,639 --> 00:25:11,159
what people were saying and sort of

00:25:09,840 --> 00:25:13,500
catch the vibe without the Google badge

00:25:11,159 --> 00:25:15,570
attached to my belt and so last year I

00:25:13,500 --> 00:25:17,820
heard that you guys need more avenues

00:25:15,570 --> 00:25:19,440
for learning angular I heard that you

00:25:17,820 --> 00:25:21,299
need a sample code that's based in

00:25:19,440 --> 00:25:21,720
real-world scenarios bigger reference

00:25:21,299 --> 00:25:23,970
apps

00:25:21,720 --> 00:25:25,529
I heard that big companies have some

00:25:23,970 --> 00:25:28,080
very specific needs that we needed to

00:25:25,529 --> 00:25:30,840
address mostly I saw the power of open

00:25:28,080 --> 00:25:32,309
source of this community and a super

00:25:30,840 --> 00:25:34,379
deep love and respect for the angular

00:25:32,309 --> 00:25:36,750
engineering team in fact that was the

00:25:34,379 --> 00:25:40,230
first line of my ng Comp 2015 trip

00:25:36,750 --> 00:25:41,730
report a couple of months later I found

00:25:40,230 --> 00:25:43,320
myself in a Google conference room

00:25:41,730 --> 00:25:45,120
pitching the need to solve these

00:25:43,320 --> 00:25:47,279
developer problems - that guy Brad green

00:25:45,120 --> 00:25:49,049
whom I didn't know he brought along

00:25:47,279 --> 00:25:51,750
Naomi and after I walked him through

00:25:49,049 --> 00:25:53,220
some of the ideas I had they said why

00:25:51,750 --> 00:25:55,350
don't you come join us and do it here

00:25:53,220 --> 00:25:58,169
and a few short weeks later I was on the

00:25:55,350 --> 00:25:59,669
angular team getting to work I never

00:25:58,169 --> 00:26:01,289
imagined last year that I would be

00:25:59,669 --> 00:26:03,629
standing here at this keynote with you

00:26:01,289 --> 00:26:04,950
today so since then I've had the

00:26:03,629 --> 00:26:07,259
opportunity to talk to you so many of

00:26:04,950 --> 00:26:10,649
you all of our wonderful angular gdes

00:26:07,259 --> 00:26:12,659
and so many partners in our ecosystem

00:26:10,649 --> 00:26:15,269
and I've been actually pretty successful

00:26:12,659 --> 00:26:16,769
in taking your feedback and influencing

00:26:15,269 --> 00:26:18,690
product direction how we write our

00:26:16,769 --> 00:26:21,139
content how we write our social media

00:26:18,690 --> 00:26:23,190
and I hope you've all noticed that and

00:26:21,139 --> 00:26:26,730
along the way I've had the opportunity

00:26:23,190 --> 00:26:28,500
to meet all kinds of developers when I

00:26:26,730 --> 00:26:30,179
was first learning about observables I

00:26:28,500 --> 00:26:31,610
had the very good fortune to be

00:26:30,179 --> 00:26:38,120
introduced to Rob Wormald

00:26:31,610 --> 00:26:40,270
not only does he not only does he make

00:26:38,120 --> 00:26:42,560
streams look really easy and they're not

00:26:40,270 --> 00:26:44,330
but I knew instantly that he was an

00:26:42,560 --> 00:26:46,130
angular 2 expert that can help make all

00:26:44,330 --> 00:26:47,930
of us as developers way more successful

00:26:46,130 --> 00:26:50,150
and so I was thrilled when Google

00:26:47,930 --> 00:26:53,060
allowed me to bring him to Google as our

00:26:50,150 --> 00:26:54,680
first angular developer advocate while I

00:26:53,060 --> 00:26:57,230
was going through that process out of

00:26:54,680 --> 00:27:00,650
the blue a recruiter sent me the resume

00:26:57,230 --> 00:27:02,870
of Steven flew in I met Steven and for

00:27:00,650 --> 00:27:04,340
the after the first meeting I knew that

00:27:02,870 --> 00:27:05,900
his background with angular and his

00:27:04,340 --> 00:27:08,030
ability to relate to developers was

00:27:05,900 --> 00:27:09,590
second to none and so with Steven Rob

00:27:08,030 --> 00:27:11,870
and myself we now have an angular

00:27:09,590 --> 00:27:13,640
developer advocacy team and a huge shout

00:27:11,870 --> 00:27:16,100
out to david east who's actually the

00:27:13,640 --> 00:27:25,340
angular firebase developer advocate as

00:27:16,100 --> 00:27:27,050
well our job and our team is here to

00:27:25,340 --> 00:27:28,850
make all of you guys successful and by

00:27:27,050 --> 00:27:29,990
your success see angular grow and I'm

00:27:28,850 --> 00:27:31,340
super looking forward to what we're

00:27:29,990 --> 00:27:33,530
going to be able to accomplish this year

00:27:31,340 --> 00:27:34,970
but last year when I was here and when I

00:27:33,530 --> 00:27:36,800
joined the angular team I was new to

00:27:34,970 --> 00:27:38,780
open-source I had never seen the power

00:27:36,800 --> 00:27:40,330
of it and I've been blown away by what

00:27:38,780 --> 00:27:42,650
happens when you can bring so many

00:27:40,330 --> 00:27:45,470
people together working on disparate

00:27:42,650 --> 00:27:47,720
problems as Brad mentioned the CLI was

00:27:45,470 --> 00:27:49,940
largely written by you guys with just a

00:27:47,720 --> 00:27:52,220
couple of core team members involved the

00:27:49,940 --> 00:27:54,470
style guide Brad also mentioned while we

00:27:52,220 --> 00:27:57,020
had input as a team it was Minko John he

00:27:54,470 --> 00:27:58,370
Sue's and largely Ward who contributed

00:27:57,020 --> 00:28:00,830
to that and made it actually happen

00:27:58,370 --> 00:28:03,050
another great example is the work we did

00:28:00,830 --> 00:28:05,360
with the Drupal team a couple of angular

00:28:03,050 --> 00:28:07,190
contributors and guidance from Igor to

00:28:05,360 --> 00:28:09,290
get twig templates to work in angular 2

00:28:07,190 --> 00:28:10,910
if you happen to be going to Drupal con

00:28:09,290 --> 00:28:14,360
Steven will be doing a session on that

00:28:10,910 --> 00:28:16,070
project actually there and as always our

00:28:14,360 --> 00:28:18,170
partnership with Amadeus continues to

00:28:16,070 --> 00:28:20,090
grow and be a shining example of the

00:28:18,170 --> 00:28:21,500
value large companies can get by

00:28:20,090 --> 00:28:23,660
contributing back to an open-source

00:28:21,500 --> 00:28:25,430
framework their work on angular 2 and

00:28:23,660 --> 00:28:27,350
react native was really helpful and I

00:28:25,430 --> 00:28:29,470
hope you'll all help us make it even

00:28:27,350 --> 00:28:29,470
better

00:28:30,280 --> 00:28:35,120
so there's a lot of people and companies

00:28:32,660 --> 00:28:37,280
making angular great we work closely

00:28:35,120 --> 00:28:39,500
with Microsoft as you know it's not just

00:28:37,280 --> 00:28:41,630
about products either like vs code and

00:28:39,500 --> 00:28:43,250
dotnet and of course typescript but we

00:28:41,630 --> 00:28:45,020
get to do fun things like our angular

00:28:43,250 --> 00:28:47,480
engineers get to check in Coke to their

00:28:45,020 --> 00:28:48,890
repos and for me personally I got to

00:28:47,480 --> 00:28:50,360
share a stage with Anders which was a

00:28:48,890 --> 00:28:53,750
shining moment in my career at Microsoft

00:28:50,360 --> 00:28:55,610
Connect this year and even cooler I got

00:28:53,750 --> 00:28:56,780
to go to the MVP summit as an ex softie

00:28:55,610 --> 00:28:59,150
with a Google badge on and actually

00:28:56,780 --> 00:29:06,350
present in Redmond that was pretty

00:28:59,150 --> 00:29:07,880
awesome and as Brad mentioned there's a

00:29:06,350 --> 00:29:09,710
lot of people like the folks at

00:29:07,880 --> 00:29:11,090
grapecity who vote wijmo UI and our

00:29:09,710 --> 00:29:14,060
friends at meteor who work on data

00:29:11,090 --> 00:29:15,980
problems and a host of other people who

00:29:14,060 --> 00:29:17,630
provided feedback during the angular 2

00:29:15,980 --> 00:29:19,910
development cycle and that's literally

00:29:17,630 --> 00:29:21,590
just to name a couple there are so many

00:29:19,910 --> 00:29:23,570
people out there doing so many great

00:29:21,590 --> 00:29:25,070
things to make angular awesome that I

00:29:23,570 --> 00:29:26,990
couldn't possibly stand up here and

00:29:25,070 --> 00:29:29,660
recognize all of you or create a logo

00:29:26,990 --> 00:29:31,130
slide that was at all adequate so know

00:29:29,660 --> 00:29:35,260
that we know you're out there you guys

00:29:31,130 --> 00:29:35,260
are doing amazing things thank you

00:29:40,580 --> 00:29:44,480
Brad also referred to this resources

00:29:43,039 --> 00:29:45,799
page so one of the questions I was

00:29:44,480 --> 00:29:47,149
getting asked all the time when I would

00:29:45,799 --> 00:29:48,590
come out and talk to everybody in the

00:29:47,149 --> 00:29:50,480
community was how do I find all the

00:29:48,590 --> 00:29:52,340
great things that work with angular so

00:29:50,480 --> 00:29:54,409
today you can go to angular do slash

00:29:52,340 --> 00:29:56,269
resources and find all of those great

00:29:54,409 --> 00:29:57,740
things our community has built if we

00:29:56,269 --> 00:29:59,510
forgot your favorite library this is

00:29:57,740 --> 00:30:01,730
definitely a growing and immature list

00:29:59,510 --> 00:30:04,610
please use the link at the top and send

00:30:01,730 --> 00:30:06,500
it to us so enough about angular for now

00:30:04,610 --> 00:30:08,840
I'd like to invite some people on the

00:30:06,500 --> 00:30:11,269
stage to tell you about their successes

00:30:08,840 --> 00:30:12,919
and trials with angular so to start us

00:30:11,269 --> 00:30:14,539
off I'd like to invite the Kiva team to

00:30:12,919 --> 00:30:16,220
stage to tell us about a project we've

00:30:14,539 --> 00:30:27,320
been collaborating on to help solve

00:30:16,220 --> 00:30:30,679
world poverty thanks Jules hi I'm Kevin

00:30:27,320 --> 00:30:33,169
O'Brien CTO kiva.org here with Rangel

00:30:30,679 --> 00:30:35,809
and Hillary and I want to tell you guys

00:30:33,169 --> 00:30:38,059
about how we're embracing angular 2 but

00:30:35,809 --> 00:30:40,100
also about our mission of connecting

00:30:38,059 --> 00:30:42,710
people through learning to alleviate

00:30:40,100 --> 00:30:45,980
poverty and that started in East Africa

00:30:42,710 --> 00:30:48,380
with our founders Matt Jessica lending

00:30:45,980 --> 00:30:50,389
to seven people who were disconnected

00:30:48,380 --> 00:30:53,360
from the rest of the world no access to

00:30:50,389 --> 00:30:55,789
finance their only opportunity to grow

00:30:53,360 --> 00:30:58,850
their business a loan shark you could

00:30:55,789 --> 00:31:02,539
say the turning to the dark side of

00:30:58,850 --> 00:31:05,240
capitalism and instead they got this

00:31:02,539 --> 00:31:07,669
opportunity through crowdfunding to grow

00:31:05,240 --> 00:31:10,610
their business a woman Elizabeth a

00:31:07,669 --> 00:31:13,519
fishmonger she got a $500 loan she was

00:31:10,610 --> 00:31:16,370
able to grow her storefront

00:31:13,519 --> 00:31:18,620
increase her income and pay back her

00:31:16,370 --> 00:31:20,120
loan and then had enough income from

00:31:18,620 --> 00:31:24,200
that that she could send her seven kids

00:31:20,120 --> 00:31:28,340
to school to get an education and so

00:31:24,200 --> 00:31:30,500
that that connection that they built has

00:31:28,340 --> 00:31:32,389
been something they want to spread

00:31:30,500 --> 00:31:34,549
across the world and we have but we

00:31:32,389 --> 00:31:37,120
needed technology to help us do that and

00:31:34,549 --> 00:31:39,139
so from there we've we've connected

00:31:37,120 --> 00:31:41,299
millions of lenders to millions of

00:31:39,139 --> 00:31:44,149
borrowers 80 plus countries from rural

00:31:41,299 --> 00:31:47,779
Uganda to here photo booth rental

00:31:44,149 --> 00:31:51,260
business in Bountiful Utah and it's all

00:31:47,779 --> 00:31:52,940
about showing people that even if

00:31:51,260 --> 00:31:54,260
they're excluded from the finance system

00:31:52,940 --> 00:31:56,210
that there's an opportunity

00:31:54,260 --> 00:31:57,950
for them in the world to get connected

00:31:56,210 --> 00:31:59,420
to people like you who will crowd fund

00:31:57,950 --> 00:32:02,840
their loans as little as twenty five

00:31:59,420 --> 00:32:03,830
dollars at a time and show that you

00:32:02,840 --> 00:32:06,170
believe in them

00:32:03,830 --> 00:32:07,550
that's the spirit of Kiva is the human

00:32:06,170 --> 00:32:10,460
connection connecting to your fellow

00:32:07,550 --> 00:32:11,870
human beings showing them that the heart

00:32:10,460 --> 00:32:14,150
is there that you believe in their

00:32:11,870 --> 00:32:15,680
business and they can show you that

00:32:14,150 --> 00:32:17,810
through that belief they can prove that

00:32:15,680 --> 00:32:21,080
they can grow their business pay their

00:32:17,810 --> 00:32:23,510
loans back and show the world that we

00:32:21,080 --> 00:32:25,070
can make a better place but the

00:32:23,510 --> 00:32:27,440
technology behind that is often not

00:32:25,070 --> 00:32:29,570
simple you can imagine sending money

00:32:27,440 --> 00:32:32,630
around the world is complex at times

00:32:29,570 --> 00:32:35,030
that's where Rangel has helped us they

00:32:32,630 --> 00:32:37,340
have built our first mobile app to

00:32:35,030 --> 00:32:40,010
connect lenders to borrowers right here

00:32:37,340 --> 00:32:43,430
at home in the US your city or town

00:32:40,010 --> 00:32:45,410
local loans loans near you and you can

00:32:43,430 --> 00:32:47,030
now spark a connection that otherwise

00:32:45,410 --> 00:32:49,130
might not have ever happened and you can

00:32:47,030 --> 00:32:53,110
change the world and with that I turn it

00:32:49,130 --> 00:32:53,110
over to Rangel to show how they did it

00:32:58,610 --> 00:33:03,540
hi my name is Nick Van Wittenberg I'm

00:33:01,020 --> 00:33:05,490
the CEO of wrangle I oh and I'm

00:33:03,540 --> 00:33:07,170
extremely excited to be here we're at

00:33:05,490 --> 00:33:08,940
JavaScript only design and development

00:33:07,170 --> 00:33:10,590
shop we've been working with angular

00:33:08,940 --> 00:33:12,450
that was sort of our founding sort of

00:33:10,590 --> 00:33:14,190
reason to become a company and to be

00:33:12,450 --> 00:33:15,660
able to work with a company like Kiva on

00:33:14,190 --> 00:33:17,010
an app like this and the work with

00:33:15,660 --> 00:33:20,100
telluric has been a really exciting

00:33:17,010 --> 00:33:22,020
experience we only really got everything

00:33:20,100 --> 00:33:23,970
organized about four weeks ago so we

00:33:22,020 --> 00:33:26,430
only had about three weeks three and a

00:33:23,970 --> 00:33:28,680
half weeks to build this app and we put

00:33:26,430 --> 00:33:31,140
together a team adam Rafik owen mullings

00:33:28,680 --> 00:33:33,240
and pamela Charlevoix and they

00:33:31,140 --> 00:33:35,280
collaborated with the Kiva team and they

00:33:33,240 --> 00:33:37,050
got the big picture they understood what

00:33:35,280 --> 00:33:38,730
the goals were and then we went into a

00:33:37,050 --> 00:33:40,110
lean agile delivery model where we

00:33:38,730 --> 00:33:42,180
quickly built the first version of the

00:33:40,110 --> 00:33:43,770
app in about a week and then we just

00:33:42,180 --> 00:33:45,900
iterated on that till everyone was happy

00:33:43,770 --> 00:33:48,690
and we had the working app that proved

00:33:45,900 --> 00:33:50,790
out what sort of Kiva needed to do with

00:33:48,690 --> 00:33:56,690
their mobile app strategy and it was a

00:33:50,790 --> 00:33:59,700
great experience see if I got this right

00:33:56,690 --> 00:34:02,310
so things went really really well it was

00:33:59,700 --> 00:34:06,900
an awesome experience except for the

00:34:02,310 --> 00:34:08,340
slide so this app has 60 frames per

00:34:06,900 --> 00:34:10,409
second scrolling it's written in

00:34:08,340 --> 00:34:12,360
JavaScript it's cross-platform

00:34:10,409 --> 00:34:14,490
it runs on iOS and Android and we have

00:34:12,360 --> 00:34:16,669
60 frames per second scrolling that's

00:34:14,490 --> 00:34:19,440
really exciting

00:34:16,669 --> 00:34:20,880
it has native transitions so when you go

00:34:19,440 --> 00:34:22,290
through the app when you scroll and when

00:34:20,880 --> 00:34:23,399
you click on something and when you

00:34:22,290 --> 00:34:29,100
bring up the menu it's native

00:34:23,399 --> 00:34:31,800
transitions on both iOS and Android it

00:34:29,100 --> 00:34:33,929
has awesome native components and it has

00:34:31,800 --> 00:34:35,610
a single code base so we were able to

00:34:33,929 --> 00:34:38,880
build it we put in a list view and it

00:34:35,610 --> 00:34:40,770
worked as expected and that's what gives

00:34:38,880 --> 00:34:45,960
the 60 frames per second in the native

00:34:40,770 --> 00:34:47,040
transitions we use CSS to lay everything

00:34:45,960 --> 00:34:48,480
out so when you're building

00:34:47,040 --> 00:34:51,090
cross-platform to be able to use

00:34:48,480 --> 00:34:52,620
something like CSS that's amazing

00:34:51,090 --> 00:34:55,130
and it worked flawlessly with native

00:34:52,620 --> 00:34:55,130
components

00:34:57,369 --> 00:35:02,449
I'm good with JavaScript not slides

00:35:01,059 --> 00:35:04,279
there we go

00:35:02,449 --> 00:35:06,349
it uses a standard web development

00:35:04,279 --> 00:35:08,239
workflow I mean this is really exciting

00:35:06,349 --> 00:35:09,949
if you've ever built native apps it's a

00:35:08,239 --> 00:35:12,380
little bit painful but we had auto

00:35:09,949 --> 00:35:14,029
reload for both iOS and Android at the

00:35:12,380 --> 00:35:15,979
same time from a single codebase

00:35:14,029 --> 00:35:18,009
so our developers and designers could

00:35:15,979 --> 00:35:21,920
look at both simultaneously

00:35:18,009 --> 00:35:24,559
and finally we delivered simultaneously

00:35:21,920 --> 00:35:26,420
for iOS and Android and so every time we

00:35:24,559 --> 00:35:28,099
did a build that we wanted feedback on

00:35:26,420 --> 00:35:28,609
we could push it out to everybody on iOS

00:35:28,099 --> 00:35:30,170
and Android

00:35:28,609 --> 00:35:31,489
it wasn't like we built it on one and

00:35:30,170 --> 00:35:34,279
then we tried to catch up and get the

00:35:31,489 --> 00:35:36,049
other we did both at the same time so

00:35:34,279 --> 00:35:37,880
all in all it was really it was an

00:35:36,049 --> 00:35:40,190
amazing experience we built the app in

00:35:37,880 --> 00:35:41,959
about three three and a half weeks

00:35:40,190 --> 00:35:43,309
we helped Kiva validate their mobile

00:35:41,959 --> 00:35:45,529
strategy we're gonna be working with

00:35:43,309 --> 00:35:48,140
Kiva in the future on their mobile apps

00:35:45,529 --> 00:35:49,969
and we're gonna open-source this so

00:35:48,140 --> 00:35:51,769
Wrangell is going to open source it and

00:35:49,969 --> 00:35:53,180
it'll be there for people who want to

00:35:51,769 --> 00:35:54,739
look at how to use native script or who

00:35:53,180 --> 00:35:58,719
want to look at how to use Kiva's open

00:35:54,739 --> 00:36:01,900
api and with that I will pass it over

00:35:58,719 --> 00:36:01,900
thanks Nick

00:36:04,660 --> 00:36:08,740
was so exciting to watch wrangling and

00:36:07,210 --> 00:36:10,329
Kiva work together on building that

00:36:08,740 --> 00:36:13,329
mobile app native scriptures really cool

00:36:10,329 --> 00:36:15,549
stuff hi everybody my name is Bert and I

00:36:13,329 --> 00:36:17,650
work with the native script project at

00:36:15,549 --> 00:36:19,809
Tulare if you're not familiar with

00:36:17,650 --> 00:36:21,880
native script it is an open source

00:36:19,809 --> 00:36:25,299
framework for building cross-platform

00:36:21,880 --> 00:36:28,269
native mobile applications with

00:36:25,299 --> 00:36:31,240
JavaScript CSS and markup these

00:36:28,269 --> 00:36:33,519
applications are 100% native that means

00:36:31,240 --> 00:36:36,039
all of your UI components are native all

00:36:33,519 --> 00:36:38,529
of your code is a first-class citizen on

00:36:36,039 --> 00:36:42,069
the GPU and that means there is never

00:36:38,529 --> 00:36:43,690
any jank even on Aaron's six-year-old

00:36:42,069 --> 00:36:45,640
Android phone with a physical keyboard

00:36:43,690 --> 00:36:50,230
you got to upgrade that thing buddy that

00:36:45,640 --> 00:36:54,279
sucker is old about a year ago I got

00:36:50,230 --> 00:36:56,460
what's with this clicker have to be

00:36:54,279 --> 00:36:56,460
closed

00:36:57,119 --> 00:37:01,440
oh there we go so about a year ago I got

00:36:59,190 --> 00:37:03,930
this email which by the way Brad is it

00:37:01,440 --> 00:37:06,960
okay if I show this email okay so I got

00:37:03,930 --> 00:37:08,970
this email from Brad asking us if he

00:37:06,960 --> 00:37:10,619
thought or if we thought the native

00:37:08,970 --> 00:37:13,529
script and angular would be good

00:37:10,619 --> 00:37:15,420
together and we looked at angular 2 and

00:37:13,529 --> 00:37:18,109
because angular 2 was smart enough to

00:37:15,420 --> 00:37:21,869
remove the dependency on the renderer

00:37:18,109 --> 00:37:24,630
they're actually great together and so

00:37:21,869 --> 00:37:26,910
we are so excited today to announce that

00:37:24,630 --> 00:37:29,579
after a year of working on this because

00:37:26,910 --> 00:37:32,279
angular 2 changed just a little bit over

00:37:29,579 --> 00:37:34,920
last year thanks for that guys thank you

00:37:32,279 --> 00:37:37,950
so much we're announcing today native

00:37:34,920 --> 00:37:44,730
script 2.0 with full support for angular

00:37:37,950 --> 00:37:46,380
2 angular yes we're so excited about

00:37:44,730 --> 00:37:47,730
this it's been a long time coming we

00:37:46,380 --> 00:37:49,829
wanted to release it many times before

00:37:47,730 --> 00:37:51,869
but we wanted to get it right all of

00:37:49,829 --> 00:37:53,910
your gear angular 2 code is now a

00:37:51,869 --> 00:37:56,130
first-class integration inside of native

00:37:53,910 --> 00:37:58,049
script all of your services all your

00:37:56,130 --> 00:37:59,970
pipes all your component logic all your

00:37:58,049 --> 00:38:02,819
template and binding expressions all of

00:37:59,970 --> 00:38:04,739
that stuff now works inside of native

00:38:02,819 --> 00:38:06,599
script now we've been fortunate enough

00:38:04,739 --> 00:38:08,849
to work with some awesome companies

00:38:06,599 --> 00:38:10,410
right out of the gate including fidelity

00:38:08,849 --> 00:38:12,420
you can see a native script version of

00:38:10,410 --> 00:38:14,220
their app here who are doing some

00:38:12,420 --> 00:38:16,289
amazing things with angular 2 already

00:38:14,220 --> 00:38:17,910
and travell is actually here today maybe

00:38:16,289 --> 00:38:19,019
he'll come by the booth and and he can

00:38:17,910 --> 00:38:21,420
talk about some more of what they're

00:38:19,019 --> 00:38:23,130
doing their really cool stuff so in

00:38:21,420 --> 00:38:25,140
honor and celebration of all this we've

00:38:23,130 --> 00:38:27,900
set up this nifty site for you guys to

00:38:25,140 --> 00:38:29,279
go to where you can get started and if

00:38:27,900 --> 00:38:31,079
you're in the audience and you're like I

00:38:29,279 --> 00:38:33,029
know angular 1 but I don't know angular

00:38:31,079 --> 00:38:34,739
2 and I think I'm the only one trust me

00:38:33,029 --> 00:38:36,299
you're not look to your right look to

00:38:34,739 --> 00:38:38,920
your left those people don't know it

00:38:36,299 --> 00:38:40,990
either so if you don't know it

00:38:38,920 --> 00:38:41,980
you don't know it it's fine we've got a

00:38:40,990 --> 00:38:44,109
guide that will walk you through

00:38:41,980 --> 00:38:46,329
building your first native truly native

00:38:44,109 --> 00:38:49,260
mobile application and it will teach you

00:38:46,329 --> 00:38:50,950
angular 2 along the way as well

00:38:49,260 --> 00:38:52,869
everybody should have gotten one of

00:38:50,950 --> 00:38:54,309
these shirts when you came in today

00:38:52,869 --> 00:38:55,750
we've never given away a shirt to

00:38:54,309 --> 00:38:58,150
everybody at a conference before but

00:38:55,750 --> 00:38:59,890
this is a big deal for us and if you're

00:38:58,150 --> 00:39:01,359
watching on the live stream you also

00:38:59,890 --> 00:39:03,760
have an opportunity to get one of these

00:39:01,359 --> 00:39:05,530
shirts as well at that site and then

00:39:03,760 --> 00:39:07,930
lastly here's what I want everybody to

00:39:05,530 --> 00:39:10,059
do I want you to go home and next week I

00:39:07,930 --> 00:39:11,140
want you to watch living on a dollar on

00:39:10,059 --> 00:39:11,980
Netflix has anybody seen that

00:39:11,140 --> 00:39:14,140
documentary

00:39:11,980 --> 00:39:17,170
it's excellent I want you to watch it

00:39:14,140 --> 00:39:19,089
then I want you go to kiva.org and I

00:39:17,170 --> 00:39:21,369
want you to make a loan and I want you

00:39:19,089 --> 00:39:24,220
to change somebody's economic future

00:39:21,369 --> 00:39:26,770
forever because all this technology that

00:39:24,220 --> 00:39:28,750
we do that we work on Kiva is actually

00:39:26,770 --> 00:39:31,420
using it to change the world and that to

00:39:28,750 --> 00:39:33,599
us is incredibly exciting thank you so

00:39:31,420 --> 00:39:33,599
much

00:39:41,630 --> 00:39:45,780
okay so now I'd like to invite our

00:39:44,040 --> 00:39:47,070
friends at the Weather Channel's stage I

00:39:45,780 --> 00:39:48,780
mentioned that we did some work with the

00:39:47,070 --> 00:39:50,790
Drupal team so The Weather Channel has

00:39:48,780 --> 00:39:52,530
some unique challenges with the way they

00:39:50,790 --> 00:39:54,030
build weather calm and their affiliated

00:39:52,530 --> 00:39:55,110
websites so they're here to tell you

00:39:54,030 --> 00:40:04,800
about some unique ways they've also

00:39:55,110 --> 00:40:07,260
interacted with our team you go hello my

00:40:04,800 --> 00:40:09,210
name is Matt Davis and I'm a lead Drupal

00:40:07,260 --> 00:40:11,580
architect for a company called media

00:40:09,210 --> 00:40:13,950
current I'm joined today on the stage by

00:40:11,580 --> 00:40:15,330
Jeff Lew from the weather company with

00:40:13,950 --> 00:40:17,670
whom I've been collaborating for the

00:40:15,330 --> 00:40:18,600
last several months on our first angular

00:40:17,670 --> 00:40:21,180
2 project

00:40:18,600 --> 00:40:24,660
I'm also here today as a longtime member

00:40:21,180 --> 00:40:27,360
of the Drupal community for those of you

00:40:24,660 --> 00:40:29,790
who may not know Drupal is a PHP based

00:40:27,360 --> 00:40:32,070
content management framework that's been

00:40:29,790 --> 00:40:33,600
around for more than 15 years has an

00:40:32,070 --> 00:40:35,760
active developer community of over a

00:40:33,600 --> 00:40:38,310
hundred thousand people and is used by

00:40:35,760 --> 00:40:41,250
large enterprise sites as well as small

00:40:38,310 --> 00:40:43,860
mom-and-pop shops even Kiva who we just

00:40:41,250 --> 00:40:45,630
heard from uses Drupal as a back-end

00:40:43,860 --> 00:40:47,880
framework with powerful restful

00:40:45,630 --> 00:40:50,490
capabilities out of the box it's a great

00:40:47,880 --> 00:40:53,370
choice for specific use cases like sites

00:40:50,490 --> 00:40:55,620
requiring complex data models advanced

00:40:53,370 --> 00:40:59,520
SEO configurations or multilingual

00:40:55,620 --> 00:41:01,620
capabilities furthermore Drupal is

00:40:59,520 --> 00:41:03,720
actively evaluating the possibility of

00:41:01,620 --> 00:41:05,820
putting angular 2 into its core

00:41:03,720 --> 00:41:08,160
architecture enabling us to create more

00:41:05,820 --> 00:41:11,040
compelling back-end interfaces as well

00:41:08,160 --> 00:41:14,040
I actually met just last week with the

00:41:11,040 --> 00:41:15,780
creator of Drupal trees as his name to

00:41:14,040 --> 00:41:18,330
discuss the efforts at building more

00:41:15,780 --> 00:41:20,910
bridges both technical and personal with

00:41:18,330 --> 00:41:22,290
the JavaScript and angular worlds so I'm

00:41:20,910 --> 00:41:24,720
excited to be here on the angular

00:41:22,290 --> 00:41:26,850
community's turf to explore how we can

00:41:24,720 --> 00:41:28,800
foster a greater partnership and make

00:41:26,850 --> 00:41:31,290
Drupal more useful and accessible for

00:41:28,800 --> 00:41:33,270
your developers the angular team has

00:41:31,290 --> 00:41:35,250
also been very responsive to the Drupal

00:41:33,270 --> 00:41:37,830
community and has made changes to help

00:41:35,250 --> 00:41:39,780
our project go well so Drees had

00:41:37,830 --> 00:41:42,000
specifically asked me to thank the team

00:41:39,780 --> 00:41:44,180
for their collaboration with us so thank

00:41:42,000 --> 00:41:44,180
you

00:41:49,550 --> 00:41:54,000
I've been working on the Drupal side in

00:41:52,260 --> 00:41:54,920
partnership with the weather company for

00:41:54,000 --> 00:41:57,420
about two years now

00:41:54,920 --> 00:41:59,610
first I helped them build their flagship

00:41:57,420 --> 00:42:02,510
site weather.com which uses a

00:41:59,610 --> 00:42:05,820
combination of Drupal and angular 1.3

00:42:02,510 --> 00:42:07,860
instead of a fully decoupled back end we

00:42:05,820 --> 00:42:10,440
have Drupal serve the page wrapper and

00:42:07,860 --> 00:42:12,540
the most static pieces of content server

00:42:10,440 --> 00:42:14,730
side and then angular fills in the

00:42:12,540 --> 00:42:16,680
pieces of the page client side that have

00:42:14,730 --> 00:42:19,380
a lower time to live or need a richer

00:42:16,680 --> 00:42:21,420
user experience the presentation

00:42:19,380 --> 00:42:23,610
framework that we built allows

00:42:21,420 --> 00:42:25,290
JavaScript developers to write these

00:42:23,610 --> 00:42:28,230
pieces of angular functionality without

00:42:25,290 --> 00:42:30,780
needing to learn any Drupal each one is

00:42:28,230 --> 00:42:32,820
compartmentalized into its own directory

00:42:30,780 --> 00:42:35,430
that contains all the templates

00:42:32,820 --> 00:42:38,250
JavaScript and CSS assets that it needs

00:42:35,430 --> 00:42:40,440
as well as a small JSON formatted file

00:42:38,250 --> 00:42:42,870
that declares some metadata out to

00:42:40,440 --> 00:42:45,000
Drupal which is then processed by Drupal

00:42:42,870 --> 00:42:47,790
and made available for editorial teams

00:42:45,000 --> 00:42:49,500
to place on their pages this framework

00:42:47,790 --> 00:42:54,000
has served the weather company's needs

00:42:49,500 --> 00:42:56,820
very well however when their sister site

00:42:54,000 --> 00:42:59,190
whether underground or wonder ground com

00:42:56,820 --> 00:43:01,110
began moving on to this same platform

00:42:59,190 --> 00:43:03,320
one of the first things we started

00:43:01,110 --> 00:43:06,360
looking into was using angular 2 instead

00:43:03,320 --> 00:43:08,040
and as we started investigating we

00:43:06,360 --> 00:43:10,290
became really excited about some of the

00:43:08,040 --> 00:43:12,750
ways that angular 2 is actually a more

00:43:10,290 --> 00:43:15,150
natural fit for our platform like being

00:43:12,750 --> 00:43:17,870
completely component based and

00:43:15,150 --> 00:43:20,520
supporting component load on demand

00:43:17,870 --> 00:43:23,010
however we also encountered some unique

00:43:20,520 --> 00:43:24,960
challenges when we were architecting

00:43:23,010 --> 00:43:26,790
this out so here to speak a little bit

00:43:24,960 --> 00:43:29,790
more about those challenges and how we

00:43:26,790 --> 00:43:31,970
were able to solve them is Jeff thank

00:43:29,790 --> 00:43:31,970
you

00:43:33,430 --> 00:43:38,110
hi everyone again my name is Jeff Liu

00:43:36,280 --> 00:43:40,390
I'm software engineer at the Weather

00:43:38,110 --> 00:43:42,730
Channel and we are an IBM business a

00:43:40,390 --> 00:43:46,030
little background on why we chose

00:43:42,730 --> 00:43:47,980
angular and Drupal to be our platform as

00:43:46,030 --> 00:43:51,490
a company we were looking for ways to

00:43:47,980 --> 00:43:53,590
enable the editorial team the content

00:43:51,490 --> 00:43:56,230
creators and the product owners to be

00:43:53,590 --> 00:43:58,600
able to quickly and easily modify

00:43:56,230 --> 00:44:01,300
existing pages or even create a new

00:43:58,600 --> 00:44:03,280
pages at moment of notice without having

00:44:01,300 --> 00:44:05,710
to involve any developers of development

00:44:03,280 --> 00:44:08,410
work especially during severe weather

00:44:05,710 --> 00:44:10,330
events with the help of our tuba

00:44:08,410 --> 00:44:13,120
architect we were able to integrate

00:44:10,330 --> 00:44:15,550
angular components seamlessly into

00:44:13,120 --> 00:44:17,800
dooble UI framework here's a quick

00:44:15,550 --> 00:44:20,770
example on how the end users are able to

00:44:17,800 --> 00:44:22,720
pick and choose any color components and

00:44:20,770 --> 00:44:25,930
drop them into different containers on

00:44:22,720 --> 00:44:28,360
the page based on page layout in this

00:44:25,930 --> 00:44:30,580
example we have three different angular

00:44:28,360 --> 00:44:33,400
components in the header container and

00:44:30,580 --> 00:44:37,000
one home page component and the content

00:44:33,400 --> 00:44:39,100
Row one container when the user saves

00:44:37,000 --> 00:44:41,770
the updates the page the finished

00:44:39,100 --> 00:44:43,630
product will look like this as you can

00:44:41,770 --> 00:44:44,890
see our page consists of many angular

00:44:43,630 --> 00:44:48,220
components and they're scattered

00:44:44,890 --> 00:44:50,560
throughout the page The Weather Channel

00:44:48,220 --> 00:44:53,250
has been running on this model with

00:44:50,560 --> 00:44:56,920
angular 1.3 for about two years now

00:44:53,250 --> 00:44:59,220
performances for site like this is very

00:44:56,920 --> 00:44:59,220
apparent

00:45:00,940 --> 00:45:07,320
so we start our journey with an angular

00:45:03,520 --> 00:45:09,460
back in January we begin Polo typing

00:45:07,320 --> 00:45:12,100
architecting laying out the family Asian

00:45:09,460 --> 00:45:15,940
for this migration project immediately

00:45:12,100 --> 00:45:17,650
we ran into a couple of challenges as I

00:45:15,940 --> 00:45:20,320
mentioned in the earlier slide our

00:45:17,650 --> 00:45:23,170
pictures consists of many angular

00:45:20,320 --> 00:45:25,570
components however those components may

00:45:23,170 --> 00:45:27,430
be intermingle with other Dom elements

00:45:25,570 --> 00:45:30,520
that are being rendered server-side by

00:45:27,430 --> 00:45:32,080
Drupal so the traditional way of

00:45:30,520 --> 00:45:33,790
bootstrapping and angular app wasn't

00:45:32,080 --> 00:45:36,190
going to work for us we needed a way to

00:45:33,790 --> 00:45:38,770
be able to sew bootstrap adjust the

00:45:36,190 --> 00:45:41,080
top-level app as soon as we can and then

00:45:38,770 --> 00:45:44,020
dynamically bootstrap components on

00:45:41,080 --> 00:45:47,620
demand based on viewport or user actions

00:45:44,020 --> 00:45:49,960
such as scrolling down the windows so we

00:45:47,620 --> 00:45:52,470
did many Google searches and we can find

00:45:49,960 --> 00:45:54,760
a way to do what we were trying to do

00:45:52,470 --> 00:45:57,190
then we reach out to bread and the

00:45:54,760 --> 00:45:59,230
angular team explaining our use case and

00:45:57,190 --> 00:46:01,960
our requirement and it turns out there's

00:45:59,230 --> 00:46:04,540
a way to do what we want it it's just a

00:46:01,960 --> 00:46:06,460
single line of code will do the trick

00:46:04,540 --> 00:46:08,680
it's called a long form bootstrap

00:46:06,460 --> 00:46:11,320
because this was an internal API

00:46:08,680 --> 00:46:13,300
therefore it wasn't documented and this

00:46:11,320 --> 00:46:16,870
hasn't been done by anyone outside the

00:46:13,300 --> 00:46:19,180
angular team as brett indicated so with

00:46:16,870 --> 00:46:21,580
this feature we were able to dynamically

00:46:19,180 --> 00:46:25,930
low and which trap components as we need

00:46:21,580 --> 00:46:27,760
them however our pages consists of many

00:46:25,930 --> 00:46:30,340
angular components and also with

00:46:27,760 --> 00:46:34,000
multiple instances of the same component

00:46:30,340 --> 00:46:36,340
type such as the video component here so

00:46:34,000 --> 00:46:38,350
calling app that would strip API this

00:46:36,340 --> 00:46:39,880
way will always protect the first one it

00:46:38,350 --> 00:46:42,640
finds and this wasn't going to work for

00:46:39,880 --> 00:46:46,380
us either so with it we needed a way to

00:46:42,640 --> 00:46:49,990
be able to selectively bootstrap the

00:46:46,380 --> 00:46:51,520
particular instance of a component but

00:46:49,990 --> 00:46:53,440
this functionality didn't seem to be

00:46:51,520 --> 00:46:55,210
supported by the visitor of API so I

00:46:53,440 --> 00:46:57,610
found a ticket and reach out to your

00:46:55,210 --> 00:47:00,340
angular team in a few days angular team

00:46:57,610 --> 00:47:02,050
came back with a solution for us by

00:47:00,340 --> 00:47:04,840
calling this bootstrap with custom

00:47:02,050 --> 00:47:06,850
selector and person selected class our

00:47:04,840 --> 00:47:09,760
problem is solved and we were able to

00:47:06,850 --> 00:47:13,010
push forward with our project

00:47:09,760 --> 00:47:15,500
and at the moment we are still exploring

00:47:13,010 --> 00:47:17,930
different ways to improve pitch

00:47:15,500 --> 00:47:20,089
performance and here are a few things

00:47:17,930 --> 00:47:21,800
that we are experimenting with to

00:47:20,089 --> 00:47:24,470
optimize performance and we are working

00:47:21,800 --> 00:47:26,510
closely with the angular team throughout

00:47:24,470 --> 00:47:28,580
and I want to thank the angular team for

00:47:26,510 --> 00:47:30,920
their support and their hard work in

00:47:28,580 --> 00:47:32,839
making angular 2 an awesome framework

00:47:30,920 --> 00:47:36,460
thank you and come check out the weather

00:47:32,839 --> 00:47:36,460
is amazing out there thank you

00:47:41,150 --> 00:47:45,230
so one of the things that's important I

00:47:43,400 --> 00:47:47,630
think to call out about that

00:47:45,230 --> 00:47:49,279
presentation is that while we hope to

00:47:47,630 --> 00:47:51,529
solve all of the world's problems and we

00:47:49,279 --> 00:47:53,869
probably can't in this case we had an

00:47:51,529 --> 00:47:55,400
internal API that we had no idea anyone

00:47:53,869 --> 00:47:57,349
external to Google would actually need

00:47:55,400 --> 00:47:59,180
to use so don't be shy when you run into

00:47:57,349 --> 00:48:02,569
similar scenarios and hopefully we can

00:47:59,180 --> 00:48:04,190
help you get along the way too as I

00:48:02,569 --> 00:48:06,140
mentioned earlier my earlier career

00:48:04,190 --> 00:48:07,400
before the angular team in Google was

00:48:06,140 --> 00:48:09,109
actually with our Enterprise team

00:48:07,400 --> 00:48:10,369
helping a lot of big companies try to

00:48:09,109 --> 00:48:12,170
imagine how to move all of their

00:48:10,369 --> 00:48:14,779
workloads to this thing we call the web

00:48:12,170 --> 00:48:16,339
one of my favorite partners that I used

00:48:14,779 --> 00:48:18,980
to highlight to almost every big company

00:48:16,339 --> 00:48:20,990
is lucidchart I'll let them explain

00:48:18,980 --> 00:48:22,970
their app but I'm so excited for them to

00:48:20,990 --> 00:48:26,180
be here they recently rewrote their

00:48:22,970 --> 00:48:29,529
entire UI in angular 2 and they are here

00:48:26,180 --> 00:48:29,529
to tell you about the castle they built

00:48:39,369 --> 00:48:46,160
hi everyone I'm Ben Diltz co-founder and

00:48:43,700 --> 00:48:47,869
CTO at lucid software this is Ryan

00:48:46,160 --> 00:48:49,700
Stringham senior engineer at lucid

00:48:47,869 --> 00:48:52,390
software and also the lead of our

00:48:49,700 --> 00:48:52,390
angular 2 team

00:48:53,680 --> 00:48:57,829
for those who aren't aware lucidchart

00:48:55,970 --> 00:49:00,380
was one of the first major graphical

00:48:57,829 --> 00:49:02,509
applications launched on the web and

00:49:00,380 --> 00:49:05,809
it's all written in handwritten

00:49:02,509 --> 00:49:10,339
JavaScript over half a million lines of

00:49:05,809 --> 00:49:13,039
it now and it's a it has grown over time

00:49:10,339 --> 00:49:18,650
to be many times larger and more complex

00:49:13,039 --> 00:49:20,119
than we foresaw it becoming and what we

00:49:18,650 --> 00:49:23,869
thought that we had been building over

00:49:20,119 --> 00:49:26,049
the course of these several years was

00:49:23,869 --> 00:49:29,390
something like this where it's

00:49:26,049 --> 00:49:32,150
reassuring solid everyone who sees it

00:49:29,390 --> 00:49:34,819
immediately loves it and feels happy to

00:49:32,150 --> 00:49:37,339
be involved but after spending time with

00:49:34,819 --> 00:49:39,140
some of our users and watching them use

00:49:37,339 --> 00:49:40,940
it in the last year we discovered that

00:49:39,140 --> 00:49:45,230
what we've actually built was more like

00:49:40,940 --> 00:49:46,970
this where it felt sort of cobbled

00:49:45,230 --> 00:49:48,470
together I did grown organically over

00:49:46,970 --> 00:49:52,009
time every new feature that we had built

00:49:48,470 --> 00:49:52,970
had adoring users but no user was using

00:49:52,009 --> 00:49:57,290
all of it

00:49:52,970 --> 00:50:00,079
and and what our users actually wanted

00:49:57,290 --> 00:50:02,180
was more like this they wanted a simple

00:50:00,079 --> 00:50:04,940
easy way to get their particular job

00:50:02,180 --> 00:50:06,980
done and as we considered the scope of

00:50:04,940 --> 00:50:09,609
the problem in front of us and the

00:50:06,980 --> 00:50:12,440
amount of effort that would go into

00:50:09,609 --> 00:50:14,839
rewriting sort of the the chrome around

00:50:12,440 --> 00:50:17,000
our application we started looking

00:50:14,839 --> 00:50:19,160
around for frameworks to see what could

00:50:17,000 --> 00:50:20,750
help us to build this we considered

00:50:19,160 --> 00:50:23,540
several different frameworks including

00:50:20,750 --> 00:50:27,079
angular 1 and angular 2 and we settled

00:50:23,540 --> 00:50:28,520
on angular 2 for a couple of critical

00:50:27,079 --> 00:50:31,730
reasons and Ryan is going to walk you

00:50:28,520 --> 00:50:33,770
through a few of those so the first

00:50:31,730 --> 00:50:35,930
reason was that an angular 2 we have

00:50:33,770 --> 00:50:38,630
template code that is easy to read and

00:50:35,930 --> 00:50:41,089
easy to write new developers can easily

00:50:38,630 --> 00:50:44,420
understand what's going on in the view

00:50:41,089 --> 00:50:46,520
with the declarative syntax the one-way

00:50:44,420 --> 00:50:48,349
data-binding is expressive and you can

00:50:46,520 --> 00:50:50,750
tell what's a string and what's an

00:50:48,349 --> 00:50:52,910
expression you also get the benefits of

00:50:50,750 --> 00:50:54,650
things like pipes where you can format

00:50:52,910 --> 00:50:56,390
your data for example here we're

00:50:54,650 --> 00:50:58,690
formatting a date by passing it through

00:50:56,390 --> 00:51:01,339
to the date pipe

00:50:58,690 --> 00:51:03,349
another advantage we found in englert is

00:51:01,339 --> 00:51:05,839
that we can write very simple CSS

00:51:03,349 --> 00:51:07,490
because the Styles only apply to the

00:51:05,839 --> 00:51:10,520
components that are written for thanks

00:51:07,490 --> 00:51:12,890
to the shadow Dom emulation so we don't

00:51:10,520 --> 00:51:14,960
need to write deep nested complicated

00:51:12,890 --> 00:51:16,910
CSS selectors to style our application

00:51:14,960 --> 00:51:19,880
the Styles can live right with the

00:51:16,910 --> 00:51:22,849
components and at least a chart we've

00:51:19,880 --> 00:51:25,880
invested in using the closure compiler

00:51:22,849 --> 00:51:30,530
for type safety dependency management in

00:51:25,880 --> 00:51:31,819
Dead co2 removal using es5 when we tried

00:51:30,530 --> 00:51:33,589
using angular 1 with the closure

00:51:31,819 --> 00:51:36,680
compiler it required us to jump through

00:51:33,589 --> 00:51:39,170
a lot of Hoops and the compiler had to

00:51:36,680 --> 00:51:41,630
run it an additional special angular 1

00:51:39,170 --> 00:51:44,750
pass with a more magical dependency

00:51:41,630 --> 00:51:46,160
dependency injection with angular 2 it

00:51:44,750 --> 00:51:49,490
made it easy to incorporate the closure

00:51:46,160 --> 00:51:51,650
compiler when we're writing using es 5

00:51:49,490 --> 00:51:55,069
and we can still get the benefits of

00:51:51,650 --> 00:51:58,819
type safety in dependency management in

00:51:55,069 --> 00:52:02,300
angular 2 and finally within year two we

00:51:58,819 --> 00:52:03,800
have testable view components previously

00:52:02,300 --> 00:52:05,900
with our handwritten JavaScript it was

00:52:03,800 --> 00:52:09,619
difficult for us to test our view with

00:52:05,900 --> 00:52:11,150
out riding into end integration tests so

00:52:09,619 --> 00:52:12,740
now we have unit tests for all of our

00:52:11,150 --> 00:52:14,900
angular 2 components and we actually

00:52:12,740 --> 00:52:17,000
have a much higher code coverage with

00:52:14,900 --> 00:52:21,650
angular 2 components than the rest of

00:52:17,000 --> 00:52:25,220
our JavaScript so now everything but the

00:52:21,650 --> 00:52:29,500
WebGL canvas is built using angular 2 we

00:52:25,220 --> 00:52:29,500
have a little video to show off

00:53:24,349 --> 00:53:29,190
thank you that's been a labor of love

00:53:27,030 --> 00:53:33,569
for us for several months now and it's

00:53:29,190 --> 00:53:35,630
just reaching beta now we realized all

00:53:33,569 --> 00:53:38,670
of the advantages that we had foreseen

00:53:35,630 --> 00:53:41,819
with moving forward with angular 2 but

00:53:38,670 --> 00:53:44,609
there were a few that surprised us

00:53:41,819 --> 00:53:46,650
pleasantly surprised us as as we moved

00:53:44,609 --> 00:53:48,660
on with this project one was that

00:53:46,650 --> 00:53:52,079
because the view components are so

00:53:48,660 --> 00:53:54,119
concise and terse in angular 2 the

00:53:52,079 --> 00:53:58,140
weight of our UI code was actually

00:53:54,119 --> 00:54:01,109
dropped substantially there's at least a

00:53:58,140 --> 00:54:04,109
30% drop in the total lines of code in

00:54:01,109 --> 00:54:06,089
that UI chrome layer around the

00:54:04,109 --> 00:54:07,829
lucidchart application which is a

00:54:06,089 --> 00:54:10,050
tremendous benefit to developer

00:54:07,829 --> 00:54:13,950
efficiency and maintainability and also

00:54:10,050 --> 00:54:16,410
just code weight also because angular 2

00:54:13,950 --> 00:54:18,180
makes it trivially easy to remove

00:54:16,410 --> 00:54:23,069
elements from the Dom that are not

00:54:18,180 --> 00:54:25,950
visible at the time are the Dom that we

00:54:23,069 --> 00:54:29,339
present to the browser is actually three

00:54:25,950 --> 00:54:32,010
times smaller than it was for the same

00:54:29,339 --> 00:54:34,770
state of the application with the

00:54:32,010 --> 00:54:38,549
angular 2 version of our UI versus our

00:54:34,770 --> 00:54:41,089
handwritten JavaScript version there's

00:54:38,549 --> 00:54:43,200
also one unexpected advantage

00:54:41,089 --> 00:54:44,819
particularly over angular 1 we do have

00:54:43,200 --> 00:54:47,640
sections of our application written in

00:54:44,819 --> 00:54:49,799
angular 1 not there in our core editor

00:54:47,640 --> 00:54:51,690
experience but elsewhere and the change

00:54:49,799 --> 00:54:53,790
detector can in fact start to bog you

00:54:51,690 --> 00:54:56,190
down as the Dom becomes increasingly

00:54:53,790 --> 00:54:58,349
complex and we we were worried about

00:54:56,190 --> 00:55:01,589
that in the early days of development of

00:54:58,349 --> 00:55:04,500
our angular 2 version of our editor but

00:55:01,589 --> 00:55:06,270
we found that with a simple change to

00:55:04,500 --> 00:55:08,970
our components where we specify the

00:55:06,270 --> 00:55:10,230
change detection strategy is on push we

00:55:08,970 --> 00:55:12,329
could then use the information that we

00:55:10,230 --> 00:55:15,569
have easily on hand already about when

00:55:12,329 --> 00:55:17,670
our model is changing to inform the

00:55:15,569 --> 00:55:21,710
change detector in angular 2 which

00:55:17,670 --> 00:55:24,630
components need to be updated and this

00:55:21,710 --> 00:55:27,180
this individual change brought our

00:55:24,630 --> 00:55:29,549
change detection stepped down from over

00:55:27,180 --> 00:55:31,980
8 milliseconds on average down to a

00:55:29,549 --> 00:55:35,180
small fraction a tenth of a millisecond

00:55:31,980 --> 00:55:37,490
or less which was a tremendous gain

00:55:35,180 --> 00:55:40,480
we actually just posted a blog post

00:55:37,490 --> 00:55:42,590
about some of the the technical

00:55:40,480 --> 00:55:44,300
specifics about how we underwent that

00:55:42,590 --> 00:55:45,530
and some of the troubles we ran into on

00:55:44,300 --> 00:55:47,140
our tech blog if you guys want to check

00:55:45,530 --> 00:55:50,360
it out

00:55:47,140 --> 00:55:52,190
so that's that if you want to see the

00:55:50,360 --> 00:55:53,870
new version of the lucidchart editor you

00:55:52,190 --> 00:55:55,940
can always get to lucidchart comm slash

00:55:53,870 --> 00:55:57,740
ng-conf you will see that and a

00:55:55,940 --> 00:56:00,160
tremendous thank you to the angular team

00:55:57,740 --> 00:56:10,910
who I think have done a fantastic job in

00:56:00,160 --> 00:56:12,260
providing this incredible tool to us so

00:56:10,910 --> 00:56:14,300
you heard Brad talk about angular

00:56:12,260 --> 00:56:16,340
Universal and I'd like to now invite

00:56:14,300 --> 00:56:17,750
Michi from a company you might recognize

00:56:16,340 --> 00:56:20,480
to tell you about some early wins

00:56:17,750 --> 00:56:31,580
they've seen using angular and reversal

00:56:20,480 --> 00:56:32,690
in angular 2 all right I saw other

00:56:31,580 --> 00:56:35,300
people had problems with this I'm gonna

00:56:32,690 --> 00:56:38,510
stand right here alright so my name is

00:56:35,300 --> 00:56:39,890
Michi I'm from capital and I work on the

00:56:38,510 --> 00:56:42,320
home page team I'm a senior director

00:56:39,890 --> 00:56:44,480
there and I'm overseeing the team right

00:56:42,320 --> 00:56:46,790
now that is rear connecting the home

00:56:44,480 --> 00:56:48,710
page of Capital One comm which some of

00:56:46,790 --> 00:56:50,810
you may recognize it's quite a heavily

00:56:48,710 --> 00:56:52,190
trafficked web property and there's a

00:56:50,810 --> 00:56:55,220
lot of considerations that have to go

00:56:52,190 --> 00:56:57,800
into how you might select a technology

00:56:55,220 --> 00:56:59,840
platform that's specific to the

00:56:57,800 --> 00:57:01,370
enterprise especially for us because

00:56:59,840 --> 00:57:03,980
we're a bank so the first two items

00:57:01,370 --> 00:57:05,570
performance in SEO probably really

00:57:03,980 --> 00:57:09,260
obvious there's revenue ramifications to

00:57:05,570 --> 00:57:11,270
that traffic notifications accessibility

00:57:09,260 --> 00:57:12,950
is a little bit unique to us you can't

00:57:11,270 --> 00:57:15,020
really discriminate against blind people

00:57:12,950 --> 00:57:17,150
from using their money so that's

00:57:15,020 --> 00:57:18,530
actually a regulatory issue and then of

00:57:17,150 --> 00:57:20,270
course the company is actually quite

00:57:18,530 --> 00:57:22,250
distributed we've got dozens of offices

00:57:20,270 --> 00:57:23,840
even just in this country but also

00:57:22,250 --> 00:57:25,130
globally and so there's some issues

00:57:23,840 --> 00:57:29,210
there around the types of technologies

00:57:25,130 --> 00:57:31,220
that you use so we started with angular

00:57:29,210 --> 00:57:34,010
1 as you know as a point to look at

00:57:31,220 --> 00:57:35,450
because obviously there's a obvious

00:57:34,010 --> 00:57:37,100
performance benefits around angular 1

00:57:35,450 --> 00:57:38,840
but there's a problem with it

00:57:37,100 --> 00:57:41,150
which is around search engine

00:57:38,840 --> 00:57:42,530
optimization or the source code if you

00:57:41,150 --> 00:57:44,930
look at a typical angular application

00:57:42,530 --> 00:57:46,250
which you can see here basically have a

00:57:44,930 --> 00:57:48,140
bunch of boilerplate right I mean look

00:57:46,250 --> 00:57:49,250
at the source code of an angular app it

00:57:48,140 --> 00:57:52,730
doesn't tell you anything about what's

00:57:49,250 --> 00:57:54,200
on that page so if you're you know using

00:57:52,730 --> 00:57:56,240
an old browser or whatever you don't

00:57:54,200 --> 00:57:57,380
even know what's there and an example of

00:57:56,240 --> 00:57:59,750
where you might see this in action in

00:57:57,380 --> 00:58:01,580
real life is if you were to send someone

00:57:59,750 --> 00:58:03,680
an iamb over slack or something

00:58:01,580 --> 00:58:05,570
slack scrapes that page intent sends

00:58:03,680 --> 00:58:07,010
your preview right so imagine if you

00:58:05,570 --> 00:58:08,360
send someone an angular page that has

00:58:07,010 --> 00:58:11,180
something like this where the title is

00:58:08,360 --> 00:58:12,110
an angular variable and then you get

00:58:11,180 --> 00:58:14,210
something like this is actually a

00:58:12,110 --> 00:58:15,980
screenshot the URL has been changed but

00:58:14,210 --> 00:58:17,540
I don't want to embarrass anybody but

00:58:15,980 --> 00:58:20,780
you can see that the description isn't

00:58:17,540 --> 00:58:21,339
hydrated right it's just a variable and

00:58:20,780 --> 00:58:22,900
so this

00:58:21,339 --> 00:58:24,670
what a screen reader might see this is

00:58:22,900 --> 00:58:25,869
what a scrapers see maybe some of the

00:58:24,670 --> 00:58:28,359
search engines out there might see that

00:58:25,869 --> 00:58:30,400
and that's a big problem so what we

00:58:28,359 --> 00:58:32,680
really wish we can do is serve something

00:58:30,400 --> 00:58:35,829
like this where what the browser sees

00:58:32,680 --> 00:58:37,239
the end state is I like to call it is

00:58:35,829 --> 00:58:39,160
actually what is in the source code

00:58:37,239 --> 00:58:41,140
right and then angular whatever could

00:58:39,160 --> 00:58:42,519
resume on top of this and this is what

00:58:41,140 --> 00:58:44,109
you would look at and see if you looked

00:58:42,519 --> 00:58:45,519
at the inspector for your browser right

00:58:44,109 --> 00:58:47,890
so this is this is the ideal situation

00:58:45,519 --> 00:58:50,019
there's obvious big ramifications around

00:58:47,890 --> 00:58:51,400
search engine optimization for example

00:58:50,019 --> 00:58:55,359
because you know with 100% certainty

00:58:51,400 --> 00:58:57,969
what the search engine scraped right so

00:58:55,359 --> 00:58:59,529
we actually decided to try it building

00:58:57,969 --> 00:59:01,450
this ourselves right trying to get this

00:58:59,529 --> 00:59:03,039
benefit ourselves so we start with any

00:59:01,450 --> 00:59:05,829
other one and what we did is for every

00:59:03,039 --> 00:59:08,019
page that we wanted to port over to this

00:59:05,829 --> 00:59:10,719
new framework we made two versions of it

00:59:08,019 --> 00:59:12,670
one which was the partial that you might

00:59:10,719 --> 00:59:14,499
see when you're doing a regular angular

00:59:12,670 --> 00:59:16,479
application to the piece that's in the

00:59:14,499 --> 00:59:18,789
middle of the content the image is that

00:59:16,479 --> 00:59:20,710
kind of stuff and one that's the full

00:59:18,789 --> 00:59:22,299
page which is you know with the header

00:59:20,710 --> 00:59:25,180
the footer the menu that kind of thing

00:59:22,299 --> 00:59:27,369
and then we would serve to the user the

00:59:25,180 --> 00:59:29,589
bright piece based on the context so if

00:59:27,369 --> 00:59:31,029
that person was coming to the home page

00:59:29,589 --> 00:59:32,410
or something for the first time they

00:59:31,029 --> 00:59:33,819
would be shown the full page and then

00:59:32,410 --> 00:59:34,839
when they click around interact with the

00:59:33,819 --> 00:59:36,430
application we would switch out the

00:59:34,839 --> 00:59:38,440
route right via the route transitions

00:59:36,430 --> 00:59:40,140
and this isn't necessary an angular

00:59:38,440 --> 00:59:42,160
concept it could be react or whatever

00:59:40,140 --> 00:59:45,430
but of course there's a big limitation

00:59:42,160 --> 00:59:46,719
in that this renderer that we built only

00:59:45,430 --> 00:59:48,249
really dealt with the route right it

00:59:46,719 --> 00:59:50,109
doesn't deal with directives or if you

00:59:48,249 --> 00:59:51,219
had a filter on a variable it doesn't

00:59:50,109 --> 00:59:52,420
deal with that stuff right so it's a big

00:59:51,219 --> 00:59:54,190
limitation it's still an improvement

00:59:52,420 --> 00:59:55,839
right you're still getting some benefit

00:59:54,190 --> 00:59:57,849
but you're losing a lot of other things

00:59:55,839 --> 00:59:59,109
and so for example your menu wouldn't

00:59:57,849 --> 01:00:00,549
get indexed right so there's some big

00:59:59,109 --> 01:00:01,900
problems there and so we saw this and

01:00:00,549 --> 01:00:03,759
this is a worrying the other two comes

01:00:01,900 --> 01:00:05,019
in right and angular Universal and we've

01:00:03,759 --> 01:00:06,759
been working really closely with Patrick

01:00:05,019 --> 01:00:08,559
from England reversal on making this

01:00:06,759 --> 01:00:10,779
happen so shout-out to him

01:00:08,559 --> 01:00:13,809
so what angular Universal does it was

01:00:10,779 --> 01:00:15,969
briefly talked about it allows the

01:00:13,809 --> 01:00:18,219
angular engine sort of to run a

01:00:15,969 --> 01:00:20,319
server-side and so in this example that

01:00:18,219 --> 01:00:22,239
same example you would see it hydrated

01:00:20,319 --> 01:00:24,910
to the initial view that you might

01:00:22,239 --> 01:00:26,259
actually want to see in the DOM and in

01:00:24,910 --> 01:00:28,210
this case what we'll do is we capture

01:00:26,259 --> 01:00:29,950
this this string this output this HTML

01:00:28,210 --> 01:00:31,420
and we would upload it to that to the

01:00:29,950 --> 01:00:32,950
cloud just like we had in the previous

01:00:31,420 --> 01:00:34,500
step so nothing has changed in terms of

01:00:32,950 --> 01:00:35,730
the flow of application but

01:00:34,500 --> 01:00:37,290
everything that's there is fully

01:00:35,730 --> 01:00:39,180
hydrated all the direct is this the

01:00:37,290 --> 01:00:40,890
filters the services are running so

01:00:39,180 --> 01:00:42,690
that's a really big advantage and when

01:00:40,890 --> 01:00:44,040
you look at this from hope you can see

01:00:42,690 --> 01:00:47,340
this text it's kind of really hard to

01:00:44,040 --> 01:00:49,200
see actually on the left you've got sort

01:00:47,340 --> 01:00:51,630
of the angular one flow and what we're

01:00:49,200 --> 01:00:53,600
showing here is the time the first byte

01:00:51,630 --> 01:00:55,770
it then is like a loading placeholder

01:00:53,600 --> 01:00:57,510
it's downloading all the JavaScript code

01:00:55,770 --> 01:01:00,150
the framework has to initialize and

01:00:57,510 --> 01:01:01,920
finally the end state that is painted

01:01:00,150 --> 01:01:03,510
and the user can interact right on the

01:01:01,920 --> 01:01:05,940
right is the angular 2 Universal

01:01:03,510 --> 01:01:07,740
situation and what you have there is the

01:01:05,940 --> 01:01:09,630
HTML is downloaded and immediately it's

01:01:07,740 --> 01:01:11,550
painted right these we can start

01:01:09,630 --> 01:01:13,710
interacting with the page behind that

01:01:11,550 --> 01:01:15,300
the JavaScript code might download the

01:01:13,710 --> 01:01:16,560
the framework will initialize and then

01:01:15,300 --> 01:01:19,650
pre-boot which we talked about earlier

01:01:16,560 --> 01:01:21,180
with brad that would fire off and would

01:01:19,650 --> 01:01:23,820
replay all the events that the user may

01:01:21,180 --> 01:01:25,530
have done up to that point so you don't

01:01:23,820 --> 01:01:26,940
have any race conditions and the user

01:01:25,530 --> 01:01:28,500
the application essentially catches up

01:01:26,940 --> 01:01:29,430
right we're talking about quarter second

01:01:28,500 --> 01:01:31,470
or something so it's not a big deal

01:01:29,430 --> 01:01:34,230
either way but you don't have actions

01:01:31,470 --> 01:01:36,150
that are dropped finally there was this

01:01:34,230 --> 01:01:37,680
point about large distributed teams it's

01:01:36,150 --> 01:01:40,500
kind of the enterprise only situation

01:01:37,680 --> 01:01:42,450
but the website has many many dozens of

01:01:40,500 --> 01:01:44,550
developers that work on it and so

01:01:42,450 --> 01:01:47,190
typescript is actually really great and

01:01:44,550 --> 01:01:49,230
also angular 2's model so when you're

01:01:47,190 --> 01:01:50,610
using that stuff your dependencies are

01:01:49,230 --> 01:01:51,930
local you know you were explicit about

01:01:50,610 --> 01:01:53,580
them there's no more global dependencies

01:01:51,930 --> 01:01:55,110
and you don't step in each other

01:01:53,580 --> 01:01:56,790
you've got optional typing so you don't

01:01:55,110 --> 01:01:58,110
misuse someone else's functions or code

01:01:56,790 --> 01:01:59,550
that they wrote or the libraries right

01:01:58,110 --> 01:02:01,440
and that's and of course compiled time

01:01:59,550 --> 01:02:03,330
checking and this reduces and removes an

01:02:01,440 --> 01:02:04,740
entire set of types of errors that you

01:02:03,330 --> 01:02:05,940
see in production so all these are

01:02:04,740 --> 01:02:08,460
really big concerns for us because

01:02:05,940 --> 01:02:10,290
messing us up affects our business and

01:02:08,460 --> 01:02:11,370
our brand and so it's really important

01:02:10,290 --> 01:02:12,930
we get this right so these are really

01:02:11,370 --> 01:02:15,120
important considerations for us and I

01:02:12,930 --> 01:02:16,710
think the typescript much to it many

01:02:15,120 --> 01:02:19,080
people's dismay I think is a great first

01:02:16,710 --> 01:02:21,870
step towards getting enterprise to adopt

01:02:19,080 --> 01:02:24,030
things like angular and so you know just

01:02:21,870 --> 01:02:26,280
want us to conclude with thinking the

01:02:24,030 --> 01:02:27,720
angular 2 thing their team I guess with

01:02:26,280 --> 01:02:29,670
Engler too and also thinking Patrick on

01:02:27,720 --> 01:02:30,570
angular Universal and we look forward to

01:02:29,670 --> 01:02:33,350
seeing more developments in this

01:02:30,570 --> 01:02:33,350
community Thanks

01:02:39,020 --> 01:02:43,380
so that was all really cool stuff but

01:02:41,790 --> 01:02:45,170
we're at the end of our keynotes

01:02:43,380 --> 01:02:47,430
so I wanted to leave you with this

01:02:45,170 --> 01:02:49,020
shortly after I joined the angular team

01:02:47,430 --> 01:02:50,850
a couple weeks Brad walked into the

01:02:49,020 --> 01:02:52,980
office wearing this shirt that said you

01:02:50,850 --> 01:02:54,960
can sit with us you can see he's wearing

01:02:52,980 --> 01:02:59,130
it today he wears this shirt an awful

01:02:54,960 --> 01:03:01,590
lot after I saw it a few times I

01:02:59,130 --> 01:03:04,320
realized that his shirt really embodies

01:03:01,590 --> 01:03:08,100
the core value of the angular team so

01:03:04,320 --> 01:03:10,650
whether you're working dotnet PHP ember

01:03:08,100 --> 01:03:12,750
reacts yes IDs 6 or whatever could

01:03:10,650 --> 01:03:13,290
possibly come next we hope you'll come

01:03:12,750 --> 01:03:15,750
sit with us

01:03:13,290 --> 01:03:18,500
and keep making angular awesome have a

01:03:15,750 --> 01:03:18,500

YouTube URL: https://www.youtube.com/watch?v=gdlpE9vPQFs


