Title: Animations - Matias Niemela
Publication date: 2016-05-06
Playlist: ng-conf 2016
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:05,899 --> 00:00:12,120
just a second okay alrighty we're going

00:00:10,440 --> 00:00:15,360
to talk about animation just like last

00:00:12,120 --> 00:00:18,270
year but now about angular 2 and ng

00:00:15,360 --> 00:00:20,580
animate so my name is Matias I work at

00:00:18,270 --> 00:00:21,990
Google in California with the angular

00:00:20,580 --> 00:00:24,900
team and I've been working on the

00:00:21,990 --> 00:00:28,140
framework for about three years now that

00:00:24,900 --> 00:00:29,939
is a link to the slides so before I

00:00:28,140 --> 00:00:31,260
switch the slides be sure to copy that

00:00:29,939 --> 00:00:35,430
down that will be available at the end

00:00:31,260 --> 00:00:37,440
of the talk all right so let's talk

00:00:35,430 --> 00:00:39,180
about animation this is the big thing

00:00:37,440 --> 00:00:42,930
that I'm passionate about I love working

00:00:39,180 --> 00:00:44,850
on this feature for angular 2 so if we

00:00:42,930 --> 00:00:47,219
think about websites we think about four

00:00:44,850 --> 00:00:48,510
things when it comes to animate it these

00:00:47,219 --> 00:00:51,300
are the four things that will hop to you

00:00:48,510 --> 00:00:52,710
right away and this is really nice and

00:00:51,300 --> 00:00:54,930
cool that we have these features in the

00:00:52,710 --> 00:00:59,100
browser but there's certain trade-offs

00:00:54,930 --> 00:01:01,199
with each one so transitions it's nice

00:00:59,100 --> 00:01:03,660
because you can hop between classes and

00:01:01,199 --> 00:01:05,400
hover state stuff like that it's fair

00:01:03,660 --> 00:01:07,470
it's automatic the styles are picked up

00:01:05,400 --> 00:01:10,080
but anything programmatic and

00:01:07,470 --> 00:01:13,020
controllable is very difficult keyframes

00:01:10,080 --> 00:01:15,420
on the other hand are tricky because you

00:01:13,020 --> 00:01:18,390
do have more programmatic access but you

00:01:15,420 --> 00:01:19,560
have to know the style is upfront and

00:01:18,390 --> 00:01:22,140
this in turn is a little bit more

00:01:19,560 --> 00:01:24,360
performance than transitions and that

00:01:22,140 --> 00:01:26,330
leads us to web animations which is the

00:01:24,360 --> 00:01:28,409
JavaScript version of keyframes but

00:01:26,330 --> 00:01:31,590
what's tricky about this is we don't

00:01:28,409 --> 00:01:33,060
have access to the stylesheet so there

00:01:31,590 --> 00:01:36,270
really isn't one thing that sort of fits

00:01:33,060 --> 00:01:38,400
everything and the reason why I'm

00:01:36,270 --> 00:01:41,130
talking about this is because these

00:01:38,400 --> 00:01:44,130
three different things are combined in

00:01:41,130 --> 00:01:47,430
angular 2 but before we hop over to that

00:01:44,130 --> 00:01:49,799
let's talk about ng1 so angular one's

00:01:47,430 --> 00:01:51,540
approach to doing animations was to rely

00:01:49,799 --> 00:01:53,189
heavily on the browser you add a CSS

00:01:51,540 --> 00:01:55,829
class you wait for an event to happen

00:01:53,189 --> 00:01:57,270
the animation is done the framework

00:01:55,829 --> 00:02:00,869
really didn't know what was going on

00:01:57,270 --> 00:02:03,329
with the animations and with that in

00:02:00,869 --> 00:02:04,480
mind everything falls down to the Dom

00:02:03,329 --> 00:02:05,980
state

00:02:04,480 --> 00:02:09,130
if we were to have a different platform

00:02:05,980 --> 00:02:12,310
say native rendering we want to be able

00:02:09,130 --> 00:02:14,830
to do this in angular 1 so with that in

00:02:12,310 --> 00:02:16,840
mind angular 2 does it differently and

00:02:14,830 --> 00:02:19,240
we have to do it differently to support

00:02:16,840 --> 00:02:20,740
all this criteria and the biggest change

00:02:19,240 --> 00:02:23,260
is that we don't use transitions or

00:02:20,740 --> 00:02:25,780
keyframes at all now I don't let that

00:02:23,260 --> 00:02:27,790
scare you we still borrow the philosophy

00:02:25,780 --> 00:02:30,100
that keyframes and transitions bring to

00:02:27,790 --> 00:02:33,640
the table but we do it with web

00:02:30,100 --> 00:02:35,650
animations and this whole ecosystem

00:02:33,640 --> 00:02:37,660
gives us a timeline based animation

00:02:35,650 --> 00:02:42,760
system and everything is triggered from

00:02:37,660 --> 00:02:44,140
component states so before I start

00:02:42,760 --> 00:02:46,510
showing demos and start hopping into

00:02:44,140 --> 00:02:48,520
things if you go my github page and you

00:02:46,510 --> 00:02:50,020
look at the first link and the

00:02:48,520 --> 00:02:51,670
repositories you should see ng-conf

00:02:50,020 --> 00:02:54,940
demos there's instructions on how to run

00:02:51,670 --> 00:02:56,410
those one key thing is that we have the

00:02:54,940 --> 00:02:58,360
API that we're putting into angular 2

00:02:56,410 --> 00:03:00,280
and there's an older version of it that

00:02:58,360 --> 00:03:03,370
we're experimenting with that has demos

00:03:00,280 --> 00:03:04,900
forced s staggering in querying but all

00:03:03,370 --> 00:03:06,760
that will be available in the final

00:03:04,900 --> 00:03:09,990
product but the demos are in there and

00:03:06,760 --> 00:03:12,340
I'll go over them in the slides so

00:03:09,990 --> 00:03:16,120
animation in angular 2 let's go over the

00:03:12,340 --> 00:03:20,080
basics this is what it looks like you

00:03:16,120 --> 00:03:22,540
have some HTML elements and instead of

00:03:20,080 --> 00:03:25,630
attaching a property or a class or an

00:03:22,540 --> 00:03:29,590
event you are attaching an animation you

00:03:25,630 --> 00:03:32,680
I state and what this means is when the

00:03:29,590 --> 00:03:34,660
expression changes its value we can

00:03:32,680 --> 00:03:37,090
animate the arc in between so

00:03:34,660 --> 00:03:40,930
effectively we're setting states in our

00:03:37,090 --> 00:03:44,380
code and animations can be activated in

00:03:40,930 --> 00:03:47,760
between so we've named our animation my

00:03:44,380 --> 00:03:50,050
animation and inside of our components

00:03:47,760 --> 00:03:51,730
we referenced that my men at my

00:03:50,050 --> 00:03:53,920
animation code and we specify the

00:03:51,730 --> 00:03:56,320
transition between states so in this

00:03:53,920 --> 00:04:00,730
example we are animating from ana pacity

00:03:56,320 --> 00:04:01,930
of 0 to an opacity of one but you might

00:04:00,730 --> 00:04:03,520
be looking at this and might look like

00:04:01,930 --> 00:04:05,350
wondering this is actually a fair bit of

00:04:03,520 --> 00:04:06,970
code it's more complicated than CSS so

00:04:05,350 --> 00:04:08,590
bear with me you'll see the power of

00:04:06,970 --> 00:04:11,170
soon

00:04:08,590 --> 00:04:14,170
here for example we have an application

00:04:11,170 --> 00:04:16,000
that has this stuff working where we

00:04:14,170 --> 00:04:18,400
specify the my admission code and we've

00:04:16,000 --> 00:04:22,510
made it so when we click it's going to

00:04:18,400 --> 00:04:24,669
toggle from open to closed so we have

00:04:22,510 --> 00:04:26,320
the my animation code above and when

00:04:24,669 --> 00:04:28,090
that changes where they're going to be

00:04:26,320 --> 00:04:29,320
at the open in the closed state but

00:04:28,090 --> 00:04:31,000
we're going to animate the arc in

00:04:29,320 --> 00:04:33,040
between so both of these animations are

00:04:31,000 --> 00:04:35,530
going to happen for half a second in

00:04:33,040 --> 00:04:38,320
between and it's going to go from 0 to 1

00:04:35,530 --> 00:04:40,720
or 1 20 so you can already see that each

00:04:38,320 --> 00:04:42,729
animation ends in a UI States but we

00:04:40,720 --> 00:04:46,240
have total control the animation from

00:04:42,729 --> 00:04:50,560
one state to the other and the component

00:04:46,240 --> 00:04:53,229
itself is still the same so this brings

00:04:50,560 --> 00:04:54,850
us the component you I states like I

00:04:53,229 --> 00:04:57,160
said before we're using the at sign to

00:04:54,850 --> 00:04:59,860
declare those and what's nice about this

00:04:57,160 --> 00:05:01,539
is the styling is persisted unlike

00:04:59,860 --> 00:05:03,820
classes like ngn turn-ins you leave in

00:05:01,539 --> 00:05:05,229
angular 1 the classes were removed and

00:05:03,820 --> 00:05:07,419
the styling was removed from there as

00:05:05,229 --> 00:05:11,410
well here the styling stays if you

00:05:07,419 --> 00:05:13,110
specify an end state so that brings us

00:05:11,410 --> 00:05:16,780
our first demo let's take a look at this

00:05:13,110 --> 00:05:18,850
here we have an inbox for angular 2 we

00:05:16,780 --> 00:05:21,850
have some very important content in this

00:05:18,850 --> 00:05:24,690
inbox and as we jump between email

00:05:21,850 --> 00:05:26,860
messages we can see animations happening

00:05:24,690 --> 00:05:30,460
we're animating different parts of the

00:05:26,860 --> 00:05:31,990
page and things are moving smoothly and

00:05:30,460 --> 00:05:38,020
this once again this is in the demo repo

00:05:31,990 --> 00:05:40,660
code so sorry looking at this this is

00:05:38,020 --> 00:05:42,160
what the code looks like in that HTML

00:05:40,660 --> 00:05:44,139
template we have a left-hand column in a

00:05:42,160 --> 00:05:47,830
right-hand column and we're using the

00:05:44,139 --> 00:05:49,780
state value in the middle of the code to

00:05:47,830 --> 00:05:52,120
change the state whether an email

00:05:49,780 --> 00:05:54,250
becomes active or hidden and we do that

00:05:52,120 --> 00:05:58,330
again further down on the right-hand

00:05:54,250 --> 00:06:00,430
column and then our component then taps

00:05:58,330 --> 00:06:02,320
in to the state changes from being

00:06:00,430 --> 00:06:03,970
active to hidden and there's also

00:06:02,320 --> 00:06:05,979
something called a void state which is

00:06:03,970 --> 00:06:07,090
very useful when an element has been

00:06:05,979 --> 00:06:09,400
ripped out of the page so you think

00:06:07,090 --> 00:06:12,789
about ngf one it has been removed out of

00:06:09,400 --> 00:06:14,200
the page it's considered void so we've

00:06:12,789 --> 00:06:15,569
animated the transition from one state

00:06:14,200 --> 00:06:17,789
to the other

00:06:15,569 --> 00:06:18,809
and if you notice in the second

00:06:17,789 --> 00:06:20,939
transition we're actually adding

00:06:18,809 --> 00:06:25,199
additional styling and then we're doing

00:06:20,939 --> 00:06:27,240
the destination state animation so this

00:06:25,199 --> 00:06:29,159
brings to mind performance why do we do

00:06:27,240 --> 00:06:31,050
this new refactoring why do we have such

00:06:29,159 --> 00:06:33,419
a different system that deviates so far

00:06:31,050 --> 00:06:35,039
away from CSS well the biggest reason is

00:06:33,419 --> 00:06:36,179
we don't want to have to rely on the Dom

00:06:35,039 --> 00:06:37,889
we don't want to have to rely on get

00:06:36,179 --> 00:06:40,409
computed style because get compute style

00:06:37,889 --> 00:06:43,099
is tricky and it causes browser jank and

00:06:40,409 --> 00:06:46,830
we really want to use web animations

00:06:43,099 --> 00:06:48,569
finally having the ability to co gen

00:06:46,830 --> 00:06:50,129
this which basically means taking our

00:06:48,569 --> 00:06:52,499
complicated animation code and making

00:06:50,129 --> 00:06:54,419
simple render statements also yields a

00:06:52,499 --> 00:06:56,939
lot of performance and this all works

00:06:54,419 --> 00:06:59,399
with web workers so continuing forward

00:06:56,939 --> 00:07:01,379
then the only pendency you do need is

00:06:59,399 --> 00:07:04,050
the web animations polyfill now there is

00:07:01,379 --> 00:07:07,080
a w3c polyfill which does work and has

00:07:04,050 --> 00:07:08,159
been used and awesome we on the angular

00:07:07,080 --> 00:07:09,990
team are perpendicular lightweight

00:07:08,159 --> 00:07:12,029
polyfill which you can use directly with

00:07:09,990 --> 00:07:13,469
angular as well which is smaller and

00:07:12,029 --> 00:07:16,469
only has the code that we need for

00:07:13,469 --> 00:07:17,789
angular to work with web animations so

00:07:16,469 --> 00:07:21,569
let's talk about the styling

00:07:17,789 --> 00:07:23,159
capabilities of this new API how can we

00:07:21,569 --> 00:07:24,180
apply style you might be wondering what

00:07:23,159 --> 00:07:26,129
happened in class is what happened to

00:07:24,180 --> 00:07:28,080
keyframes how do we use those well the

00:07:26,129 --> 00:07:31,559
good news is that we have a CSS parser

00:07:28,080 --> 00:07:33,539
built in to the framework that means

00:07:31,559 --> 00:07:35,789
that we can define stuff in a stylesheet

00:07:33,539 --> 00:07:37,769
whether it be CSS classes or keyframes

00:07:35,789 --> 00:07:39,809
so if you're familiar with the animated

00:07:37,769 --> 00:07:41,849
CSS library that is a bunch of keyframes

00:07:39,809 --> 00:07:44,789
right so we reference them in our

00:07:41,849 --> 00:07:47,490
component that's how we would define an

00:07:44,789 --> 00:07:49,409
inline style and that's how we can

00:07:47,490 --> 00:07:51,240
actually use the CSS class directly in

00:07:49,409 --> 00:07:52,889
our code now this is really nice because

00:07:51,240 --> 00:07:53,939
you can have a completely external style

00:07:52,889 --> 00:07:56,039
shoe that has nothing to do if your

00:07:53,939 --> 00:07:59,099
angular app that you can tap into the

00:07:56,039 --> 00:08:03,719
CSS classes fully you can also use the

00:07:59,099 --> 00:08:05,430
key frames for animate CSS and we can

00:08:03,719 --> 00:08:07,079
also generate a keyframe directly within

00:08:05,430 --> 00:08:11,159
the API so this will generate a key

00:08:07,079 --> 00:08:13,360
frame with four steps but occur for one

00:08:11,159 --> 00:08:16,030
second

00:08:13,360 --> 00:08:18,849
we can also have a really cool feature

00:08:16,030 --> 00:08:21,879
called auto styling so the dreaded

00:08:18,849 --> 00:08:24,550
height auto thing has been resolved of

00:08:21,879 --> 00:08:28,000
angular 2 let's take a look at a demo

00:08:24,550 --> 00:08:29,889
that does this so here i have a few

00:08:28,000 --> 00:08:33,010
entries a few stars entries that copied

00:08:29,889 --> 00:08:35,620
some text from wikipedia and this is an

00:08:33,010 --> 00:08:38,140
accordion animation that inmates items

00:08:35,620 --> 00:08:39,550
out and in if i click on one animates

00:08:38,140 --> 00:08:41,829
one I click on another animates another

00:08:39,550 --> 00:08:44,229
now the animation itself isn't anything

00:08:41,829 --> 00:08:45,910
stellar but if I were to tell you that

00:08:44,229 --> 00:08:49,300
this is only about five lines of code

00:08:45,910 --> 00:08:52,180
just for the animation piece and it's

00:08:49,300 --> 00:08:53,980
fully able to detect the height so if I

00:08:52,180 --> 00:08:58,649
change it it's able to detect what the

00:08:53,980 --> 00:09:01,899
final height value is automatically and

00:08:58,649 --> 00:09:04,300
the way that it does that is with

00:09:01,899 --> 00:09:07,120
automatic styling so if you pass the CSS

00:09:04,300 --> 00:09:09,250
property with a star it will

00:09:07,120 --> 00:09:10,600
automatically pick up that value from

00:09:09,250 --> 00:09:12,279
get computed style you don't need to

00:09:10,600 --> 00:09:15,010
know the destination stuff so anything

00:09:12,279 --> 00:09:20,279
that expands contracts is far easier to

00:09:15,010 --> 00:09:20,279
do with Angie anime negative two so

00:09:25,400 --> 00:09:30,020
okay continuing forward so you might be

00:09:29,060 --> 00:09:31,850
wondering what happened to all the

00:09:30,020 --> 00:09:34,340
JavaScript code this is still css-based

00:09:31,850 --> 00:09:36,290
yes we have JavaScript for the

00:09:34,340 --> 00:09:37,490
sequencing and stuff like that well the

00:09:36,290 --> 00:09:39,470
thing I'm going to encourage you with is

00:09:37,490 --> 00:09:42,290
that the JavaScript quote isn't entirely

00:09:39,470 --> 00:09:44,600
necessary with this API because if you

00:09:42,290 --> 00:09:46,790
want to have dynamic properties so here

00:09:44,600 --> 00:09:48,140
for example we want to have a modal that

00:09:46,790 --> 00:09:50,450
shows up on the page but we want to be

00:09:48,140 --> 00:09:52,580
bound to the x and y coordinates you can

00:09:50,450 --> 00:09:54,410
register a transformation function that

00:09:52,580 --> 00:09:58,250
will figure out that dynamic styling and

00:09:54,410 --> 00:10:01,100
pass it directly into the animation also

00:09:58,250 --> 00:10:02,990
you can have and this isn't working just

00:10:01,100 --> 00:10:04,820
yet but we have plans to do this we'll

00:10:02,990 --> 00:10:06,200
be able to have component access so we

00:10:04,820 --> 00:10:08,660
can directly pull data from the

00:10:06,200 --> 00:10:12,290
component pass it into the style into

00:10:08,660 --> 00:10:13,940
the animation sequencing so what about

00:10:12,290 --> 00:10:16,160
cool stuff like querying and running

00:10:13,940 --> 00:10:19,330
animations in parallel performing easing

00:10:16,160 --> 00:10:21,710
well let's take a look at our third demo

00:10:19,330 --> 00:10:23,300
here we have a modal that's going to

00:10:21,710 --> 00:10:26,810
appear on page we click on the contact

00:10:23,300 --> 00:10:29,570
us and that has a bunch of elements

00:10:26,810 --> 00:10:31,040
within the modal animating and then

00:10:29,570 --> 00:10:34,490
animation is happening in parallel when

00:10:31,040 --> 00:10:37,940
we exit now what does this code look

00:10:34,490 --> 00:10:39,410
like here we have usage of query where

00:10:37,940 --> 00:10:44,240
we're selecting elements within the

00:10:39,410 --> 00:10:45,860
model or applying styles and then we are

00:10:44,240 --> 00:10:47,750
animating styles in parallel if you

00:10:45,860 --> 00:10:49,160
notice the group at the top we're

00:10:47,750 --> 00:10:53,870
animating the container and the inner

00:10:49,160 --> 00:10:55,430
items so what's next then staggering now

00:10:53,870 --> 00:10:57,710
this was a feature that wasn't angular 1

00:10:55,430 --> 00:10:59,420
but it was limited to what CSS can do a

00:10:57,710 --> 00:11:02,180
staggering which was tacked together

00:10:59,420 --> 00:11:04,520
with ng animated about with this one we

00:11:02,180 --> 00:11:06,350
have full support we can either use a

00:11:04,520 --> 00:11:09,410
collection of existing staggering

00:11:06,350 --> 00:11:12,200
capabilities we can even create our own

00:11:09,410 --> 00:11:14,120
staggering capabilities so let's see

00:11:12,200 --> 00:11:16,760
here for example i'm selecting all the

00:11:14,120 --> 00:11:18,230
ng fours that update on a page i'm going

00:11:16,760 --> 00:11:19,670
to set them all to be hidden and then

00:11:18,230 --> 00:11:21,830
i'm going to stagger over them and

00:11:19,670 --> 00:11:23,450
animate them in piece by piece to

00:11:21,830 --> 00:11:24,510
opacity that should actually be a pacity

00:11:23,450 --> 00:11:30,780
of one

00:11:24,510 --> 00:11:33,960
so here for example I've created my own

00:11:30,780 --> 00:11:36,150
custom stagger method that somehow

00:11:33,960 --> 00:11:38,550
figures out a duration of delay based on

00:11:36,150 --> 00:11:40,530
some environment settings in the Dom so

00:11:38,550 --> 00:11:42,540
if you think about a window our route

00:11:40,530 --> 00:11:44,160
you click on a route and you go the

00:11:42,540 --> 00:11:45,420
right-hand page you click and go to the

00:11:44,160 --> 00:11:47,580
left I'm page you could have a stagger

00:11:45,420 --> 00:11:51,180
that could correspond to what direction

00:11:47,580 --> 00:11:54,660
you're going in so this brings a so

00:11:51,180 --> 00:11:58,590
forth demo here we have a bunch of boxes

00:11:54,660 --> 00:12:01,200
that are all staggered with a special

00:11:58,590 --> 00:12:06,090
animation and this is available in the

00:12:01,200 --> 00:12:07,580
dump in the github code so component

00:12:06,090 --> 00:12:10,590
access this is a very powerful feature

00:12:07,580 --> 00:12:12,120
what what what would you say if I were

00:12:10,590 --> 00:12:13,620
to create an animation but I want to tap

00:12:12,120 --> 00:12:15,930
into when the done event happens in my

00:12:13,620 --> 00:12:20,490
component or I want to be able to

00:12:15,930 --> 00:12:23,340
control it frame by frame well you can

00:12:20,490 --> 00:12:25,590
inject well not inject but you can pass

00:12:23,340 --> 00:12:28,560
in an annotation into your class and

00:12:25,590 --> 00:12:31,020
have access directly to the animation so

00:12:28,560 --> 00:12:33,300
before when we define the my animation

00:12:31,020 --> 00:12:35,670
code enter in our annotation code we can

00:12:33,300 --> 00:12:37,260
ask for it directly in our component and

00:12:35,670 --> 00:12:41,040
we can tap into the done events and

00:12:37,260 --> 00:12:43,560
stuff like that and we can also control

00:12:41,040 --> 00:12:45,570
the animation frame by frame even if the

00:12:43,560 --> 00:12:48,060
animation is gigantic sequence it

00:12:45,570 --> 00:12:52,020
touches multiple elements so here we

00:12:48,060 --> 00:12:54,510
have a demo of that so let's refresh so

00:12:52,020 --> 00:12:56,580
i click bottom this box is moving around

00:12:54,510 --> 00:12:58,890
fighting my component i'm accessing it

00:12:56,580 --> 00:13:01,080
directly frame by frame and this is what

00:12:58,890 --> 00:13:02,280
web animations wants us to do and you do

00:13:01,080 --> 00:13:04,590
not have to do anything else besides

00:13:02,280 --> 00:13:06,990
asking for the animation getting the

00:13:04,590 --> 00:13:09,900
active player and setting its position

00:13:06,990 --> 00:13:12,060
percentage if you notice as I continue

00:13:09,900 --> 00:13:14,930
it continues where it is and then our

00:13:12,060 --> 00:13:17,930
done call back happens and we are ready

00:13:14,930 --> 00:13:17,930
alright

00:13:24,200 --> 00:13:27,660
so that was the animation that was

00:13:26,430 --> 00:13:29,820
happening there we had a keyframe

00:13:27,660 --> 00:13:33,090
animation spread across multiple steps

00:13:29,820 --> 00:13:34,920
and the web animations player was able

00:13:33,090 --> 00:13:38,070
to consume that and allow us to animate

00:13:34,920 --> 00:13:40,980
it piece by piece so let's talk about

00:13:38,070 --> 00:13:43,110
custom renders now custom rendering is a

00:13:40,980 --> 00:13:44,940
special feature in angular 2 where you

00:13:43,110 --> 00:13:49,800
can swap out the render code with a

00:13:44,940 --> 00:13:51,690
different API and the newer to do this

00:13:49,800 --> 00:13:54,810
we added an anime method directly into a

00:13:51,690 --> 00:13:56,070
render which looks like this that

00:13:54,810 --> 00:13:58,530
contains the elements and a bunch of

00:13:56,070 --> 00:14:00,030
other properties and all you have to do

00:13:58,530 --> 00:14:02,520
in your code is implement this and have

00:14:00,030 --> 00:14:04,710
an animated so all that stuff with

00:14:02,520 --> 00:14:06,990
animate this step and make this step all

00:14:04,710 --> 00:14:09,270
that choreography code is handled by

00:14:06,990 --> 00:14:11,070
angular all the CSS code is parsed by

00:14:09,270 --> 00:14:14,400
angular and it's all delivered to the

00:14:11,070 --> 00:14:16,290
platform so with the folks from native

00:14:14,400 --> 00:14:17,940
script or a nice enough to put a demo of

00:14:16,290 --> 00:14:20,730
this together or what they were doing

00:14:17,940 --> 00:14:22,320
was there using the animation code now

00:14:20,730 --> 00:14:23,790
note that this is the older version the

00:14:22,320 --> 00:14:28,800
ng animate code that was enough branch

00:14:23,790 --> 00:14:31,200
that I had and they're running an iOS

00:14:28,800 --> 00:14:33,330
and Android instance of this using these

00:14:31,200 --> 00:14:37,200
animations directly and running it on a

00:14:33,330 --> 00:14:38,550
native level but this is nice because

00:14:37,200 --> 00:14:40,110
you don't have to do animations in the

00:14:38,550 --> 00:14:41,850
way that iOS or Android do them you just

00:14:40,110 --> 00:14:44,660
do them in the way that you're used to

00:14:41,850 --> 00:14:44,660
using CSS

00:14:51,470 --> 00:14:55,560
so you might be wondering when is this

00:14:53,640 --> 00:14:57,810
coming out well we were trying really

00:14:55,560 --> 00:14:59,760
very hard to have is ready for RC 0 and

00:14:57,810 --> 00:15:01,860
it is very close to having the

00:14:59,760 --> 00:15:04,950
foundation in which involves the dynamic

00:15:01,860 --> 00:15:07,740
styling the CSS parser and the ability

00:15:04,950 --> 00:15:09,600
to sequence animations together so

00:15:07,740 --> 00:15:11,580
please wait a few weeks and we'll have

00:15:09,600 --> 00:15:13,490
this in here the API is final we know

00:15:11,580 --> 00:15:16,040
that this is definitely going in and

00:15:13,490 --> 00:15:18,480
it's going to be exciting once it's done

00:15:16,040 --> 00:15:19,890
thank you to each of these talented

00:15:18,480 --> 00:15:21,780
programmers you guys helped me a lot

00:15:19,890 --> 00:15:24,570
with this presentation next bunch to

00:15:21,780 --> 00:15:26,040
Robert he helped do the demos and Thomas

00:15:24,570 --> 00:15:28,290
and the three of us have been planning

00:15:26,040 --> 00:15:30,270
this API for a long time and a special

00:15:28,290 --> 00:15:31,980
thanks to Alexander from native script

00:15:30,270 --> 00:15:33,960
who helped put the video together in

00:15:31,980 --> 00:15:36,840
berk for hooking that up and also for

00:15:33,960 --> 00:15:39,240
tarot for including ng animate interior

00:15:36,840 --> 00:15:40,440
talks and the guy in the middle Martin

00:15:39,240 --> 00:15:42,450
is how it has been helping me put

00:15:40,440 --> 00:15:44,310
together the web animations polyfill so

00:15:42,450 --> 00:15:47,480
this is a collective effort and you guys

00:15:44,310 --> 00:15:47,480

YouTube URL: https://www.youtube.com/watch?v=Hr4IKlr9mhg


