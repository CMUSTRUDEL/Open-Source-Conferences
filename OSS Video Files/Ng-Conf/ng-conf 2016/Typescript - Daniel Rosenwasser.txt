Title: Typescript - Daniel Rosenwasser
Publication date: 2016-05-06
Playlist: ng-conf 2016
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:03,799 --> 00:00:08,970
good morning everybody I'm Daniel

00:00:06,990 --> 00:00:11,160
rosenwasser I'm a program manager on the

00:00:08,970 --> 00:00:12,900
typescript team and today I'm here to

00:00:11,160 --> 00:00:15,719
talk about typescript and angular and

00:00:12,900 --> 00:00:18,930
how the two are better together now I

00:00:15,719 --> 00:00:22,380
want us to face this reality this fact

00:00:18,930 --> 00:00:24,240
big JavaScript apps are hard and it's

00:00:22,380 --> 00:00:26,730
not even just big JavaScript apps it's

00:00:24,240 --> 00:00:28,890
small and medium-sized apps that slowly

00:00:26,730 --> 00:00:31,109
grow over time and accumulate more and

00:00:28,890 --> 00:00:33,719
more and after a while they become what

00:00:31,109 --> 00:00:36,870
we like to consider a read-only codebase

00:00:33,719 --> 00:00:38,250
right you kind of do you need to fix

00:00:36,870 --> 00:00:40,079
something you need to maintain and you

00:00:38,250 --> 00:00:41,489
just so you start like prodding and

00:00:40,079 --> 00:00:44,070
poking and you're not really sure where

00:00:41,489 --> 00:00:45,390
to start and then you're just not you

00:00:44,070 --> 00:00:46,950
don't even feel comfortable changing

00:00:45,390 --> 00:00:49,860
things because you know who knows what

00:00:46,950 --> 00:00:52,829
you might break so you becomes read-only

00:00:49,860 --> 00:00:56,039
and this is something that we ran into a

00:00:52,829 --> 00:00:57,390
lot at Microsoft actually I mean you you

00:00:56,039 --> 00:00:59,489
know it's a big company we're building a

00:00:57,390 --> 00:01:01,530
lot of JavaScript code and so even

00:00:59,489 --> 00:01:03,719
Visual Studio code the editor that we've

00:01:01,530 --> 00:01:07,770
released in the last year used to be a

00:01:03,719 --> 00:01:10,979
JavaScript fully a JavaScript app you

00:01:07,770 --> 00:01:13,140
know fully built in that and it after a

00:01:10,979 --> 00:01:15,000
certain point the complexity got to be a

00:01:13,140 --> 00:01:17,820
little bit too much it became hard to

00:01:15,000 --> 00:01:20,880
maintain and we knew that this was not a

00:01:17,820 --> 00:01:22,590
unique problem to people right for the

00:01:20,880 --> 00:01:24,869
most part other companies were starting

00:01:22,590 --> 00:01:26,670
to see this as well server-side

00:01:24,869 --> 00:01:29,180
JavaScript was becoming a thing at the

00:01:26,670 --> 00:01:31,350
time because well note had popped up and

00:01:29,180 --> 00:01:33,960
then if you just looked at the sheer

00:01:31,350 --> 00:01:36,329
complexity of apps yet we're growing on

00:01:33,960 --> 00:01:40,340
the internet it was getting heavier and

00:01:36,329 --> 00:01:43,110
hairier hard to maintain and so we said

00:01:40,340 --> 00:01:46,110
JavaScript on its own is not enough to

00:01:43,110 --> 00:01:49,079
make these hairy apps you know it's just

00:01:46,110 --> 00:01:51,450
getting to be difficult and we love

00:01:49,079 --> 00:01:53,360
JavaScript it's very expressive it

00:01:51,450 --> 00:01:55,649
allows us to create these apps that are

00:01:53,360 --> 00:01:57,270
you know just get something up and

00:01:55,649 --> 00:01:59,610
running really quickly and it's really

00:01:57,270 --> 00:02:00,840
powerful but the thing is that we knew

00:01:59,610 --> 00:02:03,270
that we'd had experience in other

00:02:00,840 --> 00:02:05,100
languages making more complex apps and

00:02:03,270 --> 00:02:06,630
we found ourselves missing things like

00:02:05,100 --> 00:02:08,319
modules to help us structure

00:02:06,630 --> 00:02:09,999
applications

00:02:08,319 --> 00:02:12,310
you classes and types to help establish

00:02:09,999 --> 00:02:14,739
contracts and behaviors between

00:02:12,310 --> 00:02:16,359
different parts of our programs and you

00:02:14,739 --> 00:02:18,219
know some of this stuff was coming with

00:02:16,359 --> 00:02:22,659
future versions of JavaScript like

00:02:18,219 --> 00:02:24,849
es2015 the s6 but it's not like you have

00:02:22,659 --> 00:02:27,250
an ESX engine just running everywhere

00:02:24,849 --> 00:02:30,670
right people are targeting ie8 which

00:02:27,250 --> 00:02:32,650
runs acma script 3 and this is like just

00:02:30,670 --> 00:02:34,540
something a part of JavaScript

00:02:32,650 --> 00:02:37,120
development you're not always targeting

00:02:34,540 --> 00:02:39,129
the newest platform at the same time we

00:02:37,120 --> 00:02:41,230
just knew we needed types to help us

00:02:39,129 --> 00:02:44,590
with tooling because JavaScript ruling

00:02:41,230 --> 00:02:46,959
was not necessarily at the best place so

00:02:44,590 --> 00:02:48,730
we said let's take this language that we

00:02:46,959 --> 00:02:51,370
actually like we like building apps and

00:02:48,730 --> 00:02:54,099
I had the things that we're missing so

00:02:51,370 --> 00:02:56,349
future JavaScript features as well as

00:02:54,099 --> 00:02:58,900
types and tooling to help us make

00:02:56,349 --> 00:03:01,329
JavaScript apps faster and that's how we

00:02:58,900 --> 00:03:04,199
ended up with typescript and typescript

00:03:01,329 --> 00:03:07,120
is an open-source cross-platform

00:03:04,199 --> 00:03:09,790
superset of JavaScript so if you have

00:03:07,120 --> 00:03:11,409
any JavaScript that is valid today you

00:03:09,790 --> 00:03:14,129
plug it into the types of compiler and

00:03:11,409 --> 00:03:18,280
it'll transpile it and give you clean

00:03:14,129 --> 00:03:20,590
readable output and we also have source

00:03:18,280 --> 00:03:22,659
maps to help you debug if you'd like but

00:03:20,590 --> 00:03:24,310
many teams have told us hey we don't

00:03:22,659 --> 00:03:28,889
even need the source maps we just debug

00:03:24,310 --> 00:03:32,259
the JavaScript straight now in late 2014

00:03:28,889 --> 00:03:34,449
the angular team announced something

00:03:32,259 --> 00:03:35,680
called atscript and they've come to some

00:03:34,449 --> 00:03:38,199
of the same conclusions that we had

00:03:35,680 --> 00:03:41,079
namely that JavaScript apps were hard to

00:03:38,199 --> 00:03:43,269
write and that we needed a little bit

00:03:41,079 --> 00:03:44,799
more we need a tooling we needed a

00:03:43,269 --> 00:03:46,299
couple of extra things and they looked

00:03:44,799 --> 00:03:49,720
at typescript as well and I said well

00:03:46,299 --> 00:03:51,579
typescript is not enough necessarily so

00:03:49,720 --> 00:03:53,379
a lot of members of the community in

00:03:51,579 --> 00:03:56,500
both community said well why aren't you

00:03:53,379 --> 00:03:57,759
guys just working together and you know

00:03:56,500 --> 00:04:02,049
we asked ourselves well why aren't we

00:03:57,759 --> 00:04:03,579
all just working together so we reached

00:04:02,049 --> 00:04:06,310
out and we said well what is it going to

00:04:03,579 --> 00:04:08,769
take for typescript to become the tool

00:04:06,310 --> 00:04:13,180
of choice for the next generation of

00:04:08,769 --> 00:04:14,650
angular and among many things we knew

00:04:13,180 --> 00:04:17,440
that we needed to buff up our es6

00:04:14,650 --> 00:04:19,779
support annular to really looks forward

00:04:17,440 --> 00:04:21,760
to the future and so we needed to

00:04:19,779 --> 00:04:23,860
embrace that as well and so we actually

00:04:21,760 --> 00:04:26,500
gave it a lot of attention just put our

00:04:23,860 --> 00:04:29,170
foot to the pedal and pushed our support

00:04:26,500 --> 00:04:31,540
for that sped it up sped up the work on

00:04:29,170 --> 00:04:32,830
it then we implemented decorators to

00:04:31,540 --> 00:04:34,740
give you the nice dependency injection

00:04:32,830 --> 00:04:37,960
features that you get an angular 2 today

00:04:34,740 --> 00:04:40,300
and finally we added support for system

00:04:37,960 --> 00:04:41,770
j s and so now you can use this from jas

00:04:40,300 --> 00:04:46,360
with typescript and you get a lot of

00:04:41,770 --> 00:04:49,390
nice features from that now apart from

00:04:46,360 --> 00:04:51,070
that we also knew that tooling was

00:04:49,390 --> 00:04:53,020
something that we were always touting

00:04:51,070 --> 00:04:56,950
but we were really focusing on windows

00:04:53,020 --> 00:04:59,200
and visual studio but angular developers

00:04:56,950 --> 00:05:00,910
don't necessarily only work on windows

00:04:59,200 --> 00:05:04,120
and visual studio they work on Mac they

00:05:00,910 --> 00:05:05,500
work on linux will you work on sublime

00:05:04,120 --> 00:05:07,360
you work on different editors like vim

00:05:05,500 --> 00:05:11,770
and emacs and it's a very diverse Bunch

00:05:07,360 --> 00:05:13,960
and so we we really decided okay let's

00:05:11,770 --> 00:05:18,070
try to focus on look just for now

00:05:13,960 --> 00:05:20,080
sublime and every platform and so we

00:05:18,070 --> 00:05:23,050
created an officially supported sublime

00:05:20,080 --> 00:05:25,540
text plugin for typescript and with that

00:05:23,050 --> 00:05:28,690
we took the core of that and we created

00:05:25,540 --> 00:05:30,400
something called TS server and so now as

00:05:28,690 --> 00:05:33,940
long as your editor has a plug-in model

00:05:30,400 --> 00:05:37,270
it can support typescript and so the end

00:05:33,940 --> 00:05:38,980
result is that we're on your favorite

00:05:37,270 --> 00:05:42,250
editor basically we're on sublime text

00:05:38,980 --> 00:05:45,700
visual studio vs code Eclipse Emacs vim

00:05:42,250 --> 00:05:47,440
adam webstorm basically if you have a

00:05:45,700 --> 00:05:52,180
favorite platform and a favorite editor

00:05:47,440 --> 00:05:54,310
we're probably there so i think we would

00:05:52,180 --> 00:05:55,420
have gotten to this point eventually but

00:05:54,310 --> 00:05:57,250
i don't think we would order gaan there

00:05:55,420 --> 00:06:00,280
as soon had it not been for our work

00:05:57,250 --> 00:06:04,230
with the angular team and community by

00:06:00,280 --> 00:06:04,230
understanding just the needs and

00:06:04,260 --> 00:06:07,990
everything that you guys were looking

00:06:05,980 --> 00:06:10,360
for we were able to make ourselves a

00:06:07,990 --> 00:06:11,640
better language so we want to thank you

00:06:10,360 --> 00:06:13,900
all we want to thank the angular team

00:06:11,640 --> 00:06:18,180
for embracing us as part of the angular

00:06:13,900 --> 00:06:18,180
community so thank you very much

00:06:22,280 --> 00:06:28,460
now I don't want to get this too mushy

00:06:24,560 --> 00:06:31,270
because sometimes that happens but so

00:06:28,460 --> 00:06:37,010
I'm going to launch into demo mode and

00:06:31,270 --> 00:06:41,300
so if you can get this going I'm going

00:06:37,010 --> 00:06:48,110
to open up a really basic code sample in

00:06:41,300 --> 00:06:50,260
JavaScript and so the is this j unplug

00:06:48,110 --> 00:06:50,260
replug

00:06:55,010 --> 00:07:02,580
windows p

00:06:58,110 --> 00:07:06,690
uh windows key p if you weren't aware

00:07:02,580 --> 00:07:08,700
that's the magic thing okay so um here's

00:07:06,690 --> 00:07:10,770
a short coat a little bit of code in

00:07:08,700 --> 00:07:12,720
JavaScript and I want you to take a

00:07:10,770 --> 00:07:14,040
quick look at it and there's a couple of

00:07:12,720 --> 00:07:17,580
bugs I'm just going to be frank with you

00:07:14,040 --> 00:07:19,650
and if you found them great if you

00:07:17,580 --> 00:07:21,300
haven't found them I just want to point

00:07:19,650 --> 00:07:24,720
out you would probably not find them in

00:07:21,300 --> 00:07:27,690
code review these things slip by so I'm

00:07:24,720 --> 00:07:32,280
just going to rename this to a dot TS

00:07:27,690 --> 00:07:36,030
file so let's rename it let's rename

00:07:32,280 --> 00:07:40,860
that that's where that is shipping dot

00:07:36,030 --> 00:07:42,210
TS great ok it off the bed you see these

00:07:40,860 --> 00:07:44,010
little red squigglies and if you're

00:07:42,210 --> 00:07:45,840
familiar with microsoft word red

00:07:44,010 --> 00:07:48,750
squiggly mean of you might be doing

00:07:45,840 --> 00:07:50,190
something wrong now it doesn't

00:07:48,750 --> 00:07:51,810
necessarily mean that you can't print

00:07:50,190 --> 00:07:53,940
out your document right if I write my

00:07:51,810 --> 00:07:55,890
last name in Microsoft Word it freaks

00:07:53,940 --> 00:07:58,140
out but I can still print it and it's

00:07:55,890 --> 00:08:01,020
okay so if we look at these red

00:07:58,140 --> 00:08:03,330
squigglies we see read only does not

00:08:01,020 --> 00:08:05,340
exist in type property descriptor hmm

00:08:03,330 --> 00:08:08,160
okay let's take a look at what that

00:08:05,340 --> 00:08:09,690
actually means so we look at defined

00:08:08,160 --> 00:08:12,450
property and what's in a property

00:08:09,690 --> 00:08:14,940
descriptor okay i don't see read-only

00:08:12,450 --> 00:08:17,610
but I see writable so let's actually

00:08:14,940 --> 00:08:23,010
just switch that out and we meant to

00:08:17,610 --> 00:08:27,930
write write a bowl writable and it

00:08:23,010 --> 00:08:30,990
corrects me false and that's great ok

00:08:27,930 --> 00:08:33,450
next one is you can't give an HTML

00:08:30,990 --> 00:08:36,240
element to something that's a string now

00:08:33,450 --> 00:08:38,100
this is a very common problem get on

00:08:36,240 --> 00:08:42,510
that body gives you an HTML element and

00:08:38,100 --> 00:08:44,070
parson to get takes a string ok so what

00:08:42,510 --> 00:08:46,980
I probably want to do is get the content

00:08:44,070 --> 00:08:49,230
of that so I'll get the text content and

00:08:46,980 --> 00:08:52,320
this happens a lot when you're just kind

00:08:49,230 --> 00:08:55,500
of playing around with the DOM and this

00:08:52,320 --> 00:08:56,880
one is actually just kind of once you've

00:08:55,500 --> 00:08:58,770
seen the error you're like oh you just

00:08:56,880 --> 00:09:00,510
hit yourself in the head I forgot the

00:08:58,770 --> 00:09:03,470
extra bar right that's an arithmetic

00:09:00,510 --> 00:09:06,060
operator not the or the double bar so

00:09:03,470 --> 00:09:07,620
you know now that we're in types if I

00:09:06,060 --> 00:09:08,940
can just add a quick type annotation I

00:09:07,620 --> 00:09:10,680
can say that this is a string or a

00:09:08,940 --> 00:09:14,709
string or ring

00:09:10,680 --> 00:09:16,000
and I immediately get this error oh you

00:09:14,709 --> 00:09:18,550
can't for each on something that's a

00:09:16,000 --> 00:09:20,770
string or a string array well why not I

00:09:18,550 --> 00:09:24,430
just checked if I had a length and then

00:09:20,770 --> 00:09:26,920
oh right length is on string and arrays

00:09:24,430 --> 00:09:33,480
so what I better do is I better write

00:09:26,920 --> 00:09:36,430
array dot is array on email address and

00:09:33,480 --> 00:09:38,380
now it works because types would

00:09:36,430 --> 00:09:40,300
actually figured out oh that's a string

00:09:38,380 --> 00:09:41,500
array that's at just an array and then

00:09:40,300 --> 00:09:45,190
the other branch it can figure out

00:09:41,500 --> 00:09:48,160
that's just a string no big deal one

00:09:45,190 --> 00:09:51,750
last error trim is not a num on a number

00:09:48,160 --> 00:09:55,060
well a look at Val thousand a number

00:09:51,750 --> 00:09:56,290
what's index n 0 index is a string so I

00:09:55,060 --> 00:10:00,910
must have just swapped these parameters

00:09:56,290 --> 00:10:02,770
around so no big deal right types are

00:10:00,910 --> 00:10:04,930
just helped us with a bunch of these

00:10:02,770 --> 00:10:06,160
errors things that you probably would

00:10:04,930 --> 00:10:08,649
have just would have just slipped you

00:10:06,160 --> 00:10:13,270
buy in code review and save you a ton of

00:10:08,649 --> 00:10:14,920
time so that's great i love thai trip

00:10:13,270 --> 00:10:17,680
for this reason it just helps me catch

00:10:14,920 --> 00:10:19,810
simple things and more complex things

00:10:17,680 --> 00:10:22,270
really quickly as i just type it along

00:10:19,810 --> 00:10:25,329
now you might say oh but that's just a

00:10:22,270 --> 00:10:26,860
demo app right and so you know let's I i

00:10:25,329 --> 00:10:29,110
want to show you just how easy it is to

00:10:26,860 --> 00:10:32,050
move towards typescript if you have an

00:10:29,110 --> 00:10:34,750
existing code base so i'm going to open

00:10:32,050 --> 00:10:38,260
up a quick to do MVC project written in

00:10:34,750 --> 00:10:41,470
angular 1 and javascript i just want to

00:10:38,260 --> 00:10:44,620
show you what this is just if you're not

00:10:41,470 --> 00:10:47,770
aware 22 MVC is just a simple to-do app

00:10:44,620 --> 00:10:51,190
and so a little hard to read on the

00:10:47,770 --> 00:10:54,339
screen but by the way can anyone read

00:10:51,190 --> 00:10:55,870
this is their own good a little bigger

00:10:54,339 --> 00:11:01,899
I'm sorry about that I'm sorry about

00:10:55,870 --> 00:11:05,649
that I apologize better okay great so if

00:11:01,899 --> 00:11:07,329
we look through this j/s example i'm

00:11:05,649 --> 00:11:10,149
seeing that this is a pretty standard

00:11:07,329 --> 00:11:11,500
angular 1 app the only different the

00:11:10,149 --> 00:11:13,149
only thing that I find interesting is

00:11:11,500 --> 00:11:15,790
that the person who wrote this captured

00:11:13,149 --> 00:11:17,230
the value of this with TC just to avoid

00:11:15,790 --> 00:11:18,730
this orphanage so that was an

00:11:17,230 --> 00:11:21,220
interesting little pattern

00:11:18,730 --> 00:11:23,139
so I just want to show you how easy it

00:11:21,220 --> 00:11:25,000
is to move over to a types of code base

00:11:23,139 --> 00:11:26,949
so first thing I'm going to do is I'm

00:11:25,000 --> 00:11:29,170
going to copy over the jsf old room i'm

00:11:26,949 --> 00:11:31,800
going to rename it to source because i

00:11:29,170 --> 00:11:35,139
need different plates for my input files

00:11:31,800 --> 00:11:36,910
and actually i feel well let's just say

00:11:35,139 --> 00:11:39,610
just remember what this j/s file looks

00:11:36,910 --> 00:11:41,560
like for a moment right now I'm just

00:11:39,610 --> 00:11:42,639
going to delete the jas folder because I

00:11:41,560 --> 00:11:44,769
feel pretty confident about what I'm

00:11:42,639 --> 00:11:46,149
going to do and that's a famous famous

00:11:44,769 --> 00:11:49,800
last words in a presentation that you

00:11:46,149 --> 00:11:49,800
might give so

00:11:52,540 --> 00:12:03,700
of course continued user account control

00:11:59,550 --> 00:12:04,990
okay yes get rid of that awesome okay

00:12:03,700 --> 00:12:09,070
now it's getting all the click events

00:12:04,990 --> 00:12:11,500
that i had earlier okay and don't worry

00:12:09,070 --> 00:12:14,500
these things happen we are resilient in

00:12:11,500 --> 00:12:16,560
the face of computers so I'm going to

00:12:14,500 --> 00:12:19,120
create a new file called TS config Jason

00:12:16,560 --> 00:12:20,980
all this is an options file for

00:12:19,120 --> 00:12:22,690
typescript ones you're editing when

00:12:20,980 --> 00:12:24,340
you're writing code when you're using it

00:12:22,690 --> 00:12:25,840
with a compiler with it and I'm going to

00:12:24,340 --> 00:12:31,030
add two options so I'm going to have

00:12:25,840 --> 00:12:32,260
compiler options okay usually I get

00:12:31,030 --> 00:12:41,110
completion so I'm just going to be low

00:12:32,260 --> 00:12:42,640
the editor no big deal just the

00:12:41,110 --> 00:12:47,670
background I'm actually just going to

00:12:42,640 --> 00:12:47,670
open up the next one okay

00:12:50,880 --> 00:12:59,970
okay compiler options okay I'm just

00:12:55,680 --> 00:13:01,980
going to keep writing so first couple

00:12:59,970 --> 00:13:05,250
other option I want to use is the outer

00:13:01,980 --> 00:13:07,260
option and without door that's just

00:13:05,250 --> 00:13:08,850
saying I want my input file my info

00:13:07,260 --> 00:13:11,610
files to be mapped out to this specific

00:13:08,850 --> 00:13:13,650
folder so I'm going to just up with the

00:13:11,610 --> 00:13:16,680
old Jas folder next thing I want to do

00:13:13,650 --> 00:13:18,330
is is allow Jas which is all going to

00:13:16,680 --> 00:13:19,800
just allow me to use JavaScript as input

00:13:18,330 --> 00:13:21,960
files which is great if you have an

00:13:19,800 --> 00:13:25,980
existing JavaScript project so I'm just

00:13:21,960 --> 00:13:28,470
going to set that to true now lastly i'm

00:13:25,980 --> 00:13:33,840
just going to add some x cludes so

00:13:28,470 --> 00:13:35,910
excludes and we're just going to set

00:13:33,840 --> 00:13:37,950
that to an array of node modules because

00:13:35,910 --> 00:13:41,250
you usually don't want to get outputs of

00:13:37,950 --> 00:13:42,690
your node modules and finally the inputs

00:13:41,250 --> 00:13:43,830
we don't want our our outputs we don't

00:13:42,690 --> 00:13:47,420
want our output to be used as inputs

00:13:43,830 --> 00:13:52,170
right and so I'm just going to start

00:13:47,420 --> 00:13:54,870
start so CD into 22 MVC start to see and

00:13:52,170 --> 00:13:56,280
watch mode right is that as it just

00:13:54,870 --> 00:13:58,890
spins up we're going to go back into

00:13:56,280 --> 00:14:00,570
here and we're going to look at apt

00:13:58,890 --> 00:14:03,210
sorry I'm going to look at the

00:14:00,570 --> 00:14:09,810
controller again so first thing I'm

00:14:03,210 --> 00:14:13,080
going to do is take a look at what's

00:14:09,810 --> 00:14:17,160
going on here exactly TC and watch mode

00:14:13,080 --> 00:14:23,880
ah good to like thanks typescript okay i

00:14:17,160 --> 00:14:26,070
meant exclude not excludes okay so put

00:14:23,880 --> 00:14:30,870
that in watch mode

00:14:26,070 --> 00:14:33,060
and if we look here compilations

00:14:30,870 --> 00:14:35,700
complete we look at the Jazz folder we

00:14:33,060 --> 00:14:40,230
look at her controllers again and my

00:14:35,700 --> 00:14:43,610
input looks basically the same as my

00:14:40,230 --> 00:14:46,140
output if we just take a quick look here

00:14:43,610 --> 00:14:47,610
it's basically more or less readable

00:14:46,140 --> 00:14:50,940
with just the spacing a little bit

00:14:47,610 --> 00:14:55,500
changed up so what I'm going to do is

00:14:50,940 --> 00:14:56,790
I'm going to switch this to TS again off

00:14:55,500 --> 00:14:59,040
the bat you're going to see red

00:14:56,790 --> 00:15:00,960
squigglies on angular and basically what

00:14:59,040 --> 00:15:02,460
that thing that's typescript is is just

00:15:00,960 --> 00:15:03,960
saying hey I don't know if you

00:15:02,460 --> 00:15:05,070
misspelled something so can you make

00:15:03,960 --> 00:15:06,660
sure that that actually is what you

00:15:05,070 --> 00:15:08,580
meant to type and so we'll just say hey

00:15:06,660 --> 00:15:10,440
chill typescript i actually did mean to

00:15:08,580 --> 00:15:11,790
write angular so we'll just say angular

00:15:10,440 --> 00:15:14,070
exists and usually would get the full

00:15:11,790 --> 00:15:16,020
flash type definitions for this but here

00:15:14,070 --> 00:15:18,300
I'm just going to say it's of type any

00:15:16,020 --> 00:15:21,630
type any I can do anything I want with

00:15:18,300 --> 00:15:23,730
it and if we look at TC it has the type

00:15:21,630 --> 00:15:24,930
any which isn't very satisfying I

00:15:23,730 --> 00:15:28,590
actually want that to be a little bit

00:15:24,930 --> 00:15:32,340
more strongly typed because it'd allow

00:15:28,590 --> 00:15:33,780
me to do some nice analysis throughout

00:15:32,340 --> 00:15:36,690
my applications I'll do it right am I to

00:15:33,780 --> 00:15:41,760
do control interface and so I'll say

00:15:36,690 --> 00:15:43,200
that TC is of type my to do control and

00:15:41,760 --> 00:15:45,060
you see more shred squigglies and that's

00:15:43,200 --> 00:15:46,410
again just type of saying I don't know

00:15:45,060 --> 00:15:48,900
if these exist so can you please make

00:15:46,410 --> 00:15:51,600
sure that's what you meant to write so

00:15:48,900 --> 00:15:55,830
i'll just write to do's and i'll write

00:15:51,600 --> 00:15:58,020
Escape key and if I don't specify type

00:15:55,830 --> 00:16:00,000
to do is just of type any but if I can

00:15:58,020 --> 00:16:01,950
also say that these have specific types

00:16:00,000 --> 00:16:04,350
and I've actually gone through and done

00:16:01,950 --> 00:16:07,310
this for all of us here today I've

00:16:04,350 --> 00:16:09,990
created a file to to control DTS and

00:16:07,310 --> 00:16:12,960
that has the interface and description

00:16:09,990 --> 00:16:16,470
of my controller and so let's go back to

00:16:12,960 --> 00:16:19,170
the typescript file and let's use that

00:16:16,470 --> 00:16:23,070
as the type here if it'll double click

00:16:19,170 --> 00:16:26,330
and now that I've done that one of the

00:16:23,070 --> 00:16:28,830
cool things is that as I go along I

00:16:26,330 --> 00:16:31,050
start to see types of flow throughout my

00:16:28,830 --> 00:16:33,420
program and so if I hover over to I see

00:16:31,050 --> 00:16:35,820
it's of type to do and if i type if i

00:16:33,420 --> 00:16:38,320
hover over index i see it's a number and

00:16:35,820 --> 00:16:41,740
so i can write to do

00:16:38,320 --> 00:16:46,090
God's completed or to do that title and

00:16:41,740 --> 00:16:48,310
it gives me nice suggestions now the

00:16:46,090 --> 00:16:50,860
reason that you would do this is one you

00:16:48,310 --> 00:16:53,740
get really nice tooling and nice error

00:16:50,860 --> 00:16:54,940
catching and that's terrific but if

00:16:53,740 --> 00:16:56,920
you're also just thinking about moving

00:16:54,940 --> 00:16:59,200
over to an angular 2 app from an angular

00:16:56,920 --> 00:17:02,290
1 app the first step to doing this stuff

00:16:59,200 --> 00:17:03,760
is to actually move your code over to

00:17:02,290 --> 00:17:05,560
typescript and that's because you'll

00:17:03,760 --> 00:17:08,140
actually start flushing out the types

00:17:05,560 --> 00:17:10,890
and describing the contract between

00:17:08,140 --> 00:17:13,300
different parts of your program so I

00:17:10,890 --> 00:17:16,420
strongly suggest looking into this it's

00:17:13,300 --> 00:17:18,870
actually a very easy thing to do next

00:17:16,420 --> 00:17:27,030
thing I want to just open up an NG

00:17:18,870 --> 00:17:29,530
reddit app code ng reddit and basically

00:17:27,030 --> 00:17:31,900
Internet's not working so great for me

00:17:29,530 --> 00:17:35,020
right now but i'll show you basically

00:17:31,900 --> 00:17:38,230
what this app does it just grabs results

00:17:35,020 --> 00:17:39,820
from reddit com and just displace the

00:17:38,230 --> 00:17:45,040
links just kind of like any subreddit

00:17:39,820 --> 00:17:47,560
would and so it's really simple as soon

00:17:45,040 --> 00:17:49,120
as we get our JSON object we actually

00:17:47,560 --> 00:17:50,920
just used what's called a type assertion

00:17:49,120 --> 00:17:53,530
to just say hey I know what the shape of

00:17:50,920 --> 00:17:55,840
this thing is now if you look at what

00:17:53,530 --> 00:17:58,660
you get back from reddit you get this

00:17:55,840 --> 00:17:59,680
really big blob of data and you get

00:17:58,660 --> 00:18:03,010
things that you might not necessarily

00:17:59,680 --> 00:18:05,110
care about like if it's edited or the

00:18:03,010 --> 00:18:06,820
link flairs CSS class or like things

00:18:05,110 --> 00:18:10,330
like that you'd really just don't care

00:18:06,820 --> 00:18:12,310
that much but when I define the shape of

00:18:10,330 --> 00:18:14,470
this I only needed to define as much as

00:18:12,310 --> 00:18:17,530
I cared about and i just rode out the

00:18:14,470 --> 00:18:20,980
type and then as I went along I could

00:18:17,530 --> 00:18:23,020
get some nice tooling like as i type

00:18:20,980 --> 00:18:24,790
along I can confidently say this has a

00:18:23,020 --> 00:18:27,850
data which has a children which I can

00:18:24,790 --> 00:18:31,090
map on and then everything I map on I

00:18:27,850 --> 00:18:32,650
get a data field as well and if you look

00:18:31,090 --> 00:18:33,940
at the JavaScript experience it's very

00:18:32,650 --> 00:18:37,240
fuzzy and you don't necessarily know if

00:18:33,940 --> 00:18:42,810
you have the things that you have so

00:18:37,240 --> 00:18:42,810
going back to presentation view and hugs

00:18:43,400 --> 00:18:50,340
hugs and so things that are coming up

00:18:47,130 --> 00:18:53,190
for typescript 20 are I'm really excited

00:18:50,340 --> 00:18:55,410
about to be honest I don't obviously am

00:18:53,190 --> 00:18:57,150
honest about that async await is going

00:18:55,410 --> 00:18:58,590
to be phenomenal if you write a lot of

00:18:57,150 --> 00:19:00,720
test code or any sort of asynchronous

00:18:58,590 --> 00:19:02,429
code this saves you from having to

00:19:00,720 --> 00:19:04,200
invert the logic of your programs by

00:19:02,429 --> 00:19:05,760
putting them in callbacks and promises

00:19:04,200 --> 00:19:07,620
and so you don't have to worry about

00:19:05,760 --> 00:19:10,350
that sort of stuff we're also getting

00:19:07,620 --> 00:19:14,039
read-only properties getting the ability

00:19:10,350 --> 00:19:15,690
to type this in functions which allows

00:19:14,039 --> 00:19:17,250
you to migrate your JavaScript code or

00:19:15,690 --> 00:19:20,400
just right typescript code the way you

00:19:17,250 --> 00:19:22,169
want a lot more easily we've got path

00:19:20,400 --> 00:19:25,260
mapping which is going to make JSP em

00:19:22,169 --> 00:19:28,559
use a lot easier some other really nice

00:19:25,260 --> 00:19:30,419
static analysis stuff one of the best

00:19:28,559 --> 00:19:33,330
things that's coming is an improved

00:19:30,419 --> 00:19:35,970
Taipings acquisition story so you can

00:19:33,330 --> 00:19:38,820
we're moving away from a model of using

00:19:35,970 --> 00:19:40,020
an external tool like TSD or typing's we

00:19:38,820 --> 00:19:42,480
want to just use the existing

00:19:40,020 --> 00:19:44,940
infrastructure that you get today so for

00:19:42,480 --> 00:19:46,610
instance you're already using NPM or

00:19:44,940 --> 00:19:50,220
something like it to manage all of your

00:19:46,610 --> 00:19:52,049
dependencies for your code so why not

00:19:50,220 --> 00:19:54,900
just move towards that model for your

00:19:52,049 --> 00:19:58,650
DTS files and that's what we have been

00:19:54,900 --> 00:20:00,630
thinking and so in the coming months

00:19:58,650 --> 00:20:02,460
you're going to be able to see or in our

00:20:00,630 --> 00:20:04,919
nightlies you'll be able to just play

00:20:02,460 --> 00:20:08,730
that brown with this soon and just see

00:20:04,919 --> 00:20:12,450
how this works out so I'm really excited

00:20:08,730 --> 00:20:15,870
about that another thing is nullable not

00:20:12,450 --> 00:20:18,030
nullable and non multiple types now null

00:20:15,870 --> 00:20:22,350
has been called the billion dollar

00:20:18,030 --> 00:20:26,190
mistake by its creator and in javascript

00:20:22,350 --> 00:20:27,990
we have no end undefined and so you know

00:20:26,190 --> 00:20:32,159
simple math that's a two billion dollar

00:20:27,990 --> 00:20:35,640
mistake so let's let's let's gain our

00:20:32,159 --> 00:20:37,830
losses back right by default null and

00:20:35,640 --> 00:20:40,230
undefined are in each of your domains

00:20:37,830 --> 00:20:41,580
you have number in a number you have not

00:20:40,230 --> 00:20:42,840
an undefined in string of nylon you

00:20:41,580 --> 00:20:44,070
define and that makes things harder

00:20:42,840 --> 00:20:47,820
because you have more edge cases to

00:20:44,070 --> 00:20:50,640
think of so let's nix that right we're

00:20:47,820 --> 00:20:52,230
adding a mode where you can just think

00:20:50,640 --> 00:20:54,100
of another non defined as their own

00:20:52,230 --> 00:20:56,230
having their own types

00:20:54,100 --> 00:20:57,910
and with that the same way that you

00:20:56,230 --> 00:20:59,890
might you might describe something

00:20:57,910 --> 00:21:03,220
that's a number or string as number or

00:20:59,890 --> 00:21:08,230
string with a union type you would say I

00:21:03,220 --> 00:21:09,669
have number or undefined so I think

00:21:08,230 --> 00:21:12,250
that's really great I would love if you

00:21:09,669 --> 00:21:15,100
all gave it a shot it's in art we have

00:21:12,250 --> 00:21:18,280
nightlies and if you'd like keep in

00:21:15,100 --> 00:21:19,809
touch we're on github just leave us an

00:21:18,280 --> 00:21:22,960
issue or suggestion or anything like

00:21:19,809 --> 00:21:26,620
that ping us on Twitter tweet us on

00:21:22,960 --> 00:21:29,380
Twitter sorry get er us on Gator I'm

00:21:26,620 --> 00:21:31,630
listening to a ton of stuff on our Gator

00:21:29,380 --> 00:21:34,179
chat room and you can find example code

00:21:31,630 --> 00:21:36,400
for all of this on this repo up here and

00:21:34,179 --> 00:21:38,650
thank you all so much for your time

00:21:36,400 --> 00:21:40,390
today I really appreciate you all having

00:21:38,650 --> 00:21:43,500
me at ng calm today thank you for that

00:21:40,390 --> 00:21:46,679
to the hosts it's been phenomenal so

00:21:43,500 --> 00:21:46,679

YouTube URL: https://www.youtube.com/watch?v=dzPjBWLdGz0


