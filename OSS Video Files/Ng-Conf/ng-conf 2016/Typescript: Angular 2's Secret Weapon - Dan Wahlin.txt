Title: Typescript: Angular 2's Secret Weapon - Dan Wahlin
Publication date: 2016-05-04
Playlist: ng-conf 2016
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:02,120 --> 00:00:11,040
all right well I'm super excited to be

00:00:05,759 --> 00:00:12,840
here every year Joe Aaron Kip Dave Sonny

00:00:11,040 --> 00:00:14,309
they do a phenomenal job so let's give

00:00:12,840 --> 00:00:21,060
them one more hand for the ng-conf

00:00:14,309 --> 00:00:22,680
organizers so yeah I do a lot of these

00:00:21,060 --> 00:00:25,140
60-ish minutes because of the first

00:00:22,680 --> 00:00:26,760
angular one I did and Dave just said hey

00:00:25,140 --> 00:00:28,289
you know I need a few minutes back so

00:00:26,760 --> 00:00:30,150
who knows this might not even be 20-ish

00:00:28,289 --> 00:00:32,640
minutes but I might be like 5 or

00:00:30,150 --> 00:00:34,410
something but we are here to talk about

00:00:32,640 --> 00:00:37,230
typescript a little bit how many already

00:00:34,410 --> 00:00:40,110
using typescript out there ok quite a

00:00:37,230 --> 00:00:43,559
few but not that many overall we have a

00:00:40,110 --> 00:00:46,110
pretty good crowd here so I'm a huge fan

00:00:43,559 --> 00:00:47,579
of typescript was one of the kind of

00:00:46,110 --> 00:00:48,809
people that when it first came out I

00:00:47,579 --> 00:00:50,340
said hey this looks awesome

00:00:48,809 --> 00:00:53,460
I didn't jump into it but I said this

00:00:50,340 --> 00:00:55,500
looks pretty awesome and as I jumped in

00:00:53,460 --> 00:00:57,390
you know I started blogging about it a

00:00:55,500 --> 00:00:59,940
little bit and going into those types of

00:00:57,390 --> 00:01:01,260
things and as applications grew bigger

00:00:59,940 --> 00:01:02,940
and bigger and bigger and we got more

00:01:01,260 --> 00:01:04,559
and more thousands of lines of code I

00:01:02,940 --> 00:01:06,930
quickly realized hey this actually can

00:01:04,559 --> 00:01:09,840
be very very cool so what I'm going to

00:01:06,930 --> 00:01:12,720
talk about here is what are some of the

00:01:09,840 --> 00:01:14,790
secret weapons of typescript that you

00:01:12,720 --> 00:01:17,130
can use in your applications and for

00:01:14,790 --> 00:01:19,229
those of you building whether it's a

00:01:17,130 --> 00:01:21,540
hundred lines or many many thousands or

00:01:19,229 --> 00:01:23,340
more how can you build these

00:01:21,540 --> 00:01:26,490
applications in a way that you can catch

00:01:23,340 --> 00:01:28,670
issues early on all right so we're gonna

00:01:26,490 --> 00:01:31,290
talk about types tooling interfaces

00:01:28,670 --> 00:01:33,509
generics and we're going to wrap up with

00:01:31,290 --> 00:01:35,490
the future today and kind of how that

00:01:33,509 --> 00:01:37,860
works now if you're new to typescript

00:01:35,490 --> 00:01:40,560
just a real quick overview here you can

00:01:37,860 --> 00:01:43,020
actually take your es5 code today and

00:01:40,560 --> 00:01:44,640
plug that in to this typescript compiler

00:01:43,020 --> 00:01:47,130
that we're going to look at here and

00:01:44,640 --> 00:01:51,030
what it will do for you is instantly

00:01:47,130 --> 00:01:53,040
tell you you screwed up because it will

00:01:51,030 --> 00:01:54,600
catch errors that quite honestly you

00:01:53,040 --> 00:01:57,659
just wouldn't catch otherwise especially

00:01:54,600 --> 00:01:59,399
on larger apps so typescript is a

00:01:57,659 --> 00:02:01,710
superset of JavaScript a lot of people

00:01:59,399 --> 00:02:04,439
think oh it's its own language no it's

00:02:01,710 --> 00:02:07,439
actually not it's built on top of es5

00:02:04,439 --> 00:02:10,890
has of course excellent es6 supporter he

00:02:07,439 --> 00:02:12,300
is 2015 and even some of the new stuff

00:02:10,890 --> 00:02:14,700
decorator's for instance we're going to

00:02:12,300 --> 00:02:18,090
talk about here and so typescript is

00:02:14,700 --> 00:02:19,590
really a big-picture way of hey I want

00:02:18,090 --> 00:02:20,880
to leverage the future today I want to

00:02:19,590 --> 00:02:22,560
also get these benefits we're going to

00:02:20,880 --> 00:02:25,440
talk about and use these as a secret

00:02:22,560 --> 00:02:27,780
weapon now before about a month ago I

00:02:25,440 --> 00:02:29,400
emailed the angular team and I said hey

00:02:27,780 --> 00:02:31,380
what's your favorite typescript feature

00:02:29,400 --> 00:02:33,360
and I got a lot of good responses but

00:02:31,380 --> 00:02:35,250
misko gave I thought a really good one

00:02:33,360 --> 00:02:38,940
he said my favorite feature is that the

00:02:35,250 --> 00:02:40,950
types system that Tiger provides kind of

00:02:38,940 --> 00:02:43,500
mimics the actual Jas spec and comment

00:02:40,950 --> 00:02:45,239
jaya spec and you know in a nutshell

00:02:43,500 --> 00:02:47,459
it's very natural to use and I thought

00:02:45,239 --> 00:02:49,800
you know I totally agree it's awesome

00:02:47,459 --> 00:02:52,560
once you get the hang of it last night I

00:02:49,800 --> 00:02:54,000
asked my buddy John Papa we were talking

00:02:52,560 --> 00:02:56,070
and I said what's your favorite feature

00:02:54,000 --> 00:02:59,190
he was a little more to the point he

00:02:56,070 --> 00:03:02,070
said if you screw up it'll tell you it

00:02:59,190 --> 00:03:03,930
wasn't exactly those words but it's a

00:03:02,070 --> 00:03:06,959
family show so we're going to bleep that

00:03:03,930 --> 00:03:10,440
out but let's talk about type support

00:03:06,959 --> 00:03:13,200
real quick so if I run off to the

00:03:10,440 --> 00:03:16,110
typescript playground you can go to

00:03:13,200 --> 00:03:18,510
typescript lang org to get to this and

00:03:16,110 --> 00:03:21,060
then click on playground I have a really

00:03:18,510 --> 00:03:22,410
simple example here you'll see this ad

00:03:21,060 --> 00:03:26,100
you'll notice on the right the

00:03:22,410 --> 00:03:30,360
phenomenal compiled version right very

00:03:26,100 --> 00:03:33,329
different no okay but a real simple

00:03:30,360 --> 00:03:34,230
example with types here is that I can

00:03:33,329 --> 00:03:36,989
come in now

00:03:34,230 --> 00:03:41,100
and we can come and let's say that x and

00:03:36,989 --> 00:03:43,380
y here needs to be a number and Y needs

00:03:41,100 --> 00:03:45,000
to be a number well you can see right

00:03:43,380 --> 00:03:47,700
off the bat it's already caught this

00:03:45,000 --> 00:03:49,049
issue that we have and so you'll see

00:03:47,700 --> 00:03:50,459
this argument type string is not

00:03:49,049 --> 00:03:52,739
assignable okay you know that's pretty

00:03:50,459 --> 00:03:54,900
basic I don't know that I'm totally like

00:03:52,739 --> 00:03:56,730
hey that's just phenomenal you just

00:03:54,900 --> 00:03:59,370
convinced me not to move over to this

00:03:56,730 --> 00:04:01,230
but you can actually do quite a bit more

00:03:59,370 --> 00:04:02,820
with the types of poor so you have

00:04:01,230 --> 00:04:04,620
primitive types you have your strings

00:04:02,820 --> 00:04:06,989
and numbers and arrays and boolean's and

00:04:04,620 --> 00:04:09,750
things like that you can do mark thing

00:04:06,989 --> 00:04:11,760
as any it could be anything but what's

00:04:09,750 --> 00:04:13,049
really cool is the custom type so we're

00:04:11,760 --> 00:04:16,169
going to talk more about that in just a

00:04:13,049 --> 00:04:18,510
moment here so here's an example age is

00:04:16,169 --> 00:04:20,070
a string we have a number something

00:04:18,510 --> 00:04:22,800
needs to be marked as a boolean but

00:04:20,070 --> 00:04:23,620
notice this accessories here well this

00:04:22,800 --> 00:04:25,570
is saying that the

00:04:23,620 --> 00:04:27,460
is called a union type and this allows

00:04:25,570 --> 00:04:29,500
us to say accessories kit you could pass

00:04:27,460 --> 00:04:32,680
me a string or if you want you can pass

00:04:29,500 --> 00:04:34,120
me a string array so this comes up a lot

00:04:32,680 --> 00:04:36,550
actually especially if you're building

00:04:34,120 --> 00:04:38,949
reusable components where you want them

00:04:36,550 --> 00:04:41,889
to be able to pass different things in

00:04:38,949 --> 00:04:44,830
more of a flexible way now that bottom

00:04:41,889 --> 00:04:45,760
one is a custom one now I interfaces or

00:04:44,830 --> 00:04:49,180
something to talk about in a moment

00:04:45,760 --> 00:04:51,220
something I really like and you do use

00:04:49,180 --> 00:04:53,770
interfaces I find a lot in fact the

00:04:51,220 --> 00:04:54,940
framework angular 2 uses it a lot with

00:04:53,770 --> 00:04:56,289
your applications we're going to talk

00:04:54,940 --> 00:04:58,449
about that in just a bit here a little

00:04:56,289 --> 00:05:01,389
bit more so why use types well I showed

00:04:58,449 --> 00:05:03,610
an example in the playground when it

00:05:01,389 --> 00:05:06,300
generates the code though of course the

00:05:03,610 --> 00:05:09,370
number and that you see here they go out

00:05:06,300 --> 00:05:11,919
obviously you know es5 for instance it

00:05:09,370 --> 00:05:14,710
doesn't support this okay so if we did

00:05:11,919 --> 00:05:16,300
this in our component and I have an ng

00:05:14,710 --> 00:05:19,120
on a knit and I say hey I want to update

00:05:16,300 --> 00:05:21,010
this total with the actual value from

00:05:19,120 --> 00:05:22,780
the ad and I you know accidentally screw

00:05:21,010 --> 00:05:25,470
up here you're going to know right away

00:05:22,780 --> 00:05:28,510
now that's a very simple example

00:05:25,470 --> 00:05:29,650
obviously all right so let's let's talk

00:05:28,510 --> 00:05:33,250
about where it could be a little more

00:05:29,650 --> 00:05:35,860
useful though so tooling support one of

00:05:33,250 --> 00:05:38,169
the really cool things with typescript

00:05:35,860 --> 00:05:40,419
is because we can be specific about the

00:05:38,169 --> 00:05:42,639
types we're working with you know how

00:05:40,419 --> 00:05:44,740
many have called into a promise to get

00:05:42,639 --> 00:05:46,840
that resolution and get the data and

00:05:44,740 --> 00:05:48,910
been like man what the heck am I getting

00:05:46,840 --> 00:05:50,410
back you know and you got to go look up

00:05:48,910 --> 00:05:53,080
what's the schema for the JSON and all

00:05:50,410 --> 00:05:55,330
that well with the nice intellisense we

00:05:53,080 --> 00:05:57,580
can get in different editors and it's

00:05:55,330 --> 00:06:00,580
not just one it's you know webstorm has

00:05:57,580 --> 00:06:02,440
some awesome support now vs code atom

00:06:00,580 --> 00:06:04,780
they have some really nice support now

00:06:02,440 --> 00:06:06,610
built in but this one is showing me that

00:06:04,780 --> 00:06:07,479
I can get back and observable okay and

00:06:06,610 --> 00:06:08,919
I'm going to make this a little better

00:06:07,479 --> 00:06:12,250
though we're going to talk about that in

00:06:08,919 --> 00:06:15,220
a moment here's one as I type notice

00:06:12,250 --> 00:06:17,199
response dot and I'm able to get to very

00:06:15,220 --> 00:06:19,539
specific the specific information about

00:06:17,199 --> 00:06:22,810
what am I going to get back out of this

00:06:19,539 --> 00:06:26,320
and so John matches some code steps this

00:06:22,810 --> 00:06:28,780
morning I have some as well they're very

00:06:26,320 --> 00:06:30,760
similar different prefixes that I use to

00:06:28,780 --> 00:06:32,200
do a lot of this stuff and so when it

00:06:30,760 --> 00:06:33,550
comes to typescript you really don't

00:06:32,200 --> 00:06:36,400
have to type as much

00:06:33,550 --> 00:06:39,699
now some of the cool features code help

00:06:36,400 --> 00:06:42,520
intellisense really really nice

00:06:39,699 --> 00:06:44,440
refactoring this is awesome if you've

00:06:42,520 --> 00:06:46,270
done the lovely global search and

00:06:44,440 --> 00:06:47,020
replace and went oh crap I really

00:06:46,270 --> 00:06:49,870
screwed that up

00:06:47,020 --> 00:06:51,340
you know revert that's where you hope

00:06:49,870 --> 00:06:53,440
source control is working well that day

00:06:51,340 --> 00:06:54,909
then you get some really nice

00:06:53,440 --> 00:06:57,759
refactoring we'll look at some of this

00:06:54,909 --> 00:06:59,800
coming up here we also have the ability

00:06:57,759 --> 00:07:01,810
to peek at something say you know what's

00:06:59,800 --> 00:07:03,490
in this object what can I get to him

00:07:01,810 --> 00:07:05,740
because the types I can get more

00:07:03,490 --> 00:07:07,889
information and then we can find

00:07:05,740 --> 00:07:10,569
references how many people or people or

00:07:07,889 --> 00:07:12,729
components are calling this particular

00:07:10,569 --> 00:07:14,770
function for example and we'll take a

00:07:12,729 --> 00:07:20,500
look at that here so let me jump real

00:07:14,770 --> 00:07:23,800
quick into the editor and so I have this

00:07:20,500 --> 00:07:26,169
is a service here called data service

00:07:23,800 --> 00:07:28,180
you'll notice this get customers and I'm

00:07:26,169 --> 00:07:29,409
just going to leave what's in there but

00:07:28,180 --> 00:07:32,289
I'm going to pretend that we're going to

00:07:29,409 --> 00:07:34,599
return an observable here all right so

00:07:32,289 --> 00:07:36,430
I'm gonna do HTTP dot and right off the

00:07:34,599 --> 00:07:38,759
bat you'll notice I get some really nice

00:07:36,430 --> 00:07:42,789
code help and you know that's nice

00:07:38,759 --> 00:07:44,680
what's really cool though is if I came

00:07:42,789 --> 00:07:46,750
up and said you know hey what's what's

00:07:44,680 --> 00:07:49,539
HTTP even have in it what's the overall

00:07:46,750 --> 00:07:52,210
interface well we can come in and I can

00:07:49,539 --> 00:07:55,029
say peek definition it will actually

00:07:52,210 --> 00:07:57,219
pull up the definition here for that

00:07:55,029 --> 00:07:59,409
particular type so I can get information

00:07:57,219 --> 00:08:01,870
again this is because we get some typing

00:07:59,409 --> 00:08:04,360
support and it's able to give us more

00:08:01,870 --> 00:08:05,650
information about it as we get the

00:08:04,360 --> 00:08:08,469
interfaces in a moment we'll see this

00:08:05,650 --> 00:08:10,449
more I could even come in and say hey

00:08:08,469 --> 00:08:13,630
how many people are calling this

00:08:10,449 --> 00:08:17,529
particular function get customers and so

00:08:13,630 --> 00:08:18,759
we can come in and where's yet here find

00:08:17,529 --> 00:08:20,949
all yeah there is

00:08:18,759 --> 00:08:23,949
find all references and over here to the

00:08:20,949 --> 00:08:25,900
right looks like the customers component

00:08:23,949 --> 00:08:28,240
is using this one and you know obviously

00:08:25,900 --> 00:08:30,400
it might be used in multiple places so a

00:08:28,240 --> 00:08:31,990
lot of really cool I could go on and on

00:08:30,400 --> 00:08:33,880
with the tooling but sadly I promised

00:08:31,990 --> 00:08:35,620
Dave I wouldn't go too much over so at

00:08:33,880 --> 00:08:37,060
least no more than ten minutes Dave I'm

00:08:35,620 --> 00:08:39,310
just kidding he's like that's it we'll

00:08:37,060 --> 00:08:40,810
pull you off stage all right let's talk

00:08:39,310 --> 00:08:44,300
about interfaces then this is another

00:08:40,810 --> 00:08:47,670
secret weapon of type script

00:08:44,300 --> 00:08:50,040
interfaces are a really cool technique

00:08:47,670 --> 00:08:52,020
that they're not available in JavaScript

00:08:50,040 --> 00:08:53,370
directly but they are in typescript and

00:08:52,020 --> 00:08:55,800
this is one of those I hear people

00:08:53,370 --> 00:08:58,560
saying you know I want to do es6 which

00:08:55,800 --> 00:09:00,900
is great but if you're going to make the

00:08:58,560 --> 00:09:02,580
jump to es6 why not just jump all the

00:09:00,900 --> 00:09:05,370
way and get some of this really cool

00:09:02,580 --> 00:09:07,170
support and this is something that

00:09:05,370 --> 00:09:09,420
angular 2 leverages very heavily

00:09:07,170 --> 00:09:12,540
actually throughout the framework if

00:09:09,420 --> 00:09:15,090
you're new to interfaces there a code

00:09:12,540 --> 00:09:18,060
contract and what I mean by a code

00:09:15,090 --> 00:09:21,810
contract is you're told to build this

00:09:18,060 --> 00:09:23,640
but you know not this and a lot of times

00:09:21,810 --> 00:09:24,840
if you know you set off a developer and

00:09:23,640 --> 00:09:26,400
say all right build this and they come

00:09:24,840 --> 00:09:28,500
back and you're like that's not exactly

00:09:26,400 --> 00:09:30,480
what I wanted you know it's kind of like

00:09:28,500 --> 00:09:31,950
you know why do this well it's kind of

00:09:30,480 --> 00:09:35,280
like this you were asked to build this

00:09:31,950 --> 00:09:37,650
but you built this it's close they both

00:09:35,280 --> 00:09:41,670
fly hopefully but that's kind of like

00:09:37,650 --> 00:09:44,760
saying in code that that is the same as

00:09:41,670 --> 00:09:46,020
that and you know there's a little bit

00:09:44,760 --> 00:09:49,020
of a difference there we have to be a

00:09:46,020 --> 00:09:52,410
little more exact as developers well

00:09:49,020 --> 00:09:54,690
with interfaces I can be very specific

00:09:52,410 --> 00:09:57,320
about what you're supposed to pass me

00:09:54,690 --> 00:09:59,430
and so here's an example of an interface

00:09:57,320 --> 00:10:01,650
now you don't have to put the I I

00:09:59,430 --> 00:10:03,870
actually like it angular 2 doesn't use

00:10:01,650 --> 00:10:06,450
that particular prefix I like it because

00:10:03,870 --> 00:10:08,550
it differentiates between a class and an

00:10:06,450 --> 00:10:11,010
interface but it's a kind of an older

00:10:08,550 --> 00:10:14,790
convention actually but this is saying

00:10:11,010 --> 00:10:17,850
that you can have some type that has a

00:10:14,790 --> 00:10:19,680
first name a last name and then an

00:10:17,850 --> 00:10:23,910
optional that's what the question mark

00:10:19,680 --> 00:10:25,440
is age now where would you use this well

00:10:23,910 --> 00:10:27,840
I'll show you a couple examples that we

00:10:25,440 --> 00:10:29,580
can really enhance the tooling and our

00:10:27,840 --> 00:10:32,880
development productivity in a moment but

00:10:29,580 --> 00:10:36,180
here's one all right we're saying person

00:10:32,880 --> 00:10:38,100
is of type I customer and if we just do

00:10:36,180 --> 00:10:40,560
this right here in pass first name of

00:10:38,100 --> 00:10:42,270
Dave then we're going to have a problem

00:10:40,560 --> 00:10:43,860
the typescript compiler will actually

00:10:42,270 --> 00:10:44,520
throw an error you'll know right away

00:10:43,860 --> 00:10:45,900
that oops

00:10:44,520 --> 00:10:48,330
you know I'm missing something so of

00:10:45,900 --> 00:10:51,420
course in this case we have to be more

00:10:48,330 --> 00:10:54,150
explicit and we have to say like last

00:10:51,420 --> 00:10:55,950
name is also going to be used now age as

00:10:54,150 --> 00:10:56,480
mentioned is optional so we don't have

00:10:55,950 --> 00:10:58,519
to do that

00:10:56,480 --> 00:11:02,060
that's a kind of basic example let's

00:10:58,519 --> 00:11:04,610
look at some others here so right now

00:11:02,060 --> 00:11:07,160
this getcustomers I showed that a

00:11:04,610 --> 00:11:10,570
component was referencing it which is

00:11:07,160 --> 00:11:12,470
right up here and if I come in to this

00:11:10,570 --> 00:11:15,170
getcustomers I'm just going to retype

00:11:12,470 --> 00:11:16,820
subscribe and kind of zoom this a little

00:11:15,170 --> 00:11:20,870
bit you'll notice I'm getting back an

00:11:16,820 --> 00:11:22,550
observable of any okay very like not

00:11:20,870 --> 00:11:25,220
helpful at all

00:11:22,550 --> 00:11:28,160
I know it's aligned subscribe to it but

00:11:25,220 --> 00:11:30,440
that's about all I know there so what we

00:11:28,160 --> 00:11:31,970
can do with interfaces and this will

00:11:30,440 --> 00:11:34,699
also relate to the next topic I'm going

00:11:31,970 --> 00:11:37,190
to talk about called generics is we can

00:11:34,699 --> 00:11:39,320
come in and use interfaces and so notice

00:11:37,190 --> 00:11:40,610
this response here is returning some

00:11:39,320 --> 00:11:43,430
customers and I'm going to come back to

00:11:40,610 --> 00:11:45,380
the return type here in a moment but at

00:11:43,430 --> 00:11:47,089
a minimum if I knew I'm getting back

00:11:45,380 --> 00:11:49,190
customers you'll see in my subscribe

00:11:47,089 --> 00:11:51,350
there when the observable comes back the

00:11:49,190 --> 00:11:55,820
first time here instead of any I could

00:11:51,350 --> 00:11:57,949
say I customer array and now we'll get

00:11:55,820 --> 00:11:59,779
some pretty awesome intellisense against

00:11:57,949 --> 00:12:02,290
this so if I were to come down now and

00:11:59,779 --> 00:12:06,139
just put a new line we'll say customers

00:12:02,290 --> 00:12:08,630
zero dot you'll notice that I get some

00:12:06,139 --> 00:12:11,660
really nice that was too good of a zoom

00:12:08,630 --> 00:12:14,600
they're really nice intellisense

00:12:11,660 --> 00:12:19,040
as we type they're so you know I can't

00:12:14,600 --> 00:12:21,500
really under state how important this is

00:12:19,040 --> 00:12:23,120
because number one you'll catch issues

00:12:21,500 --> 00:12:24,980
right up front because if I now start

00:12:23,120 --> 00:12:27,110
typing things that's not available on

00:12:24,980 --> 00:12:28,339
that object I'll start getting red

00:12:27,110 --> 00:12:31,639
squigglies the typescript compiler

00:12:28,339 --> 00:12:33,079
throws airs it's kind of a big deal so

00:12:31,639 --> 00:12:34,519
we're going to see interfaces again in

00:12:33,079 --> 00:12:36,829
just a moment when we talk about the

00:12:34,519 --> 00:12:38,720
next section here but that's one of my

00:12:36,829 --> 00:12:39,170
favorite kind of secret weapons if you

00:12:38,720 --> 00:12:40,730
will

00:12:39,170 --> 00:12:41,870
oh you know Ashley I'm gonna show you

00:12:40,730 --> 00:12:45,319
one more I just realized I was going to

00:12:41,870 --> 00:12:48,949
show one other right now this particular

00:12:45,319 --> 00:12:50,839
application I'll pull it up here is not

00:12:48,949 --> 00:12:53,390
real it's pretty phenomenal you I I'm

00:12:50,839 --> 00:12:57,560
going for that clean look you know

00:12:53,390 --> 00:12:59,330
that way nobody gets confused but if I

00:12:57,560 --> 00:13:00,610
come back in the reason is notice I have

00:12:59,330 --> 00:13:04,610
a typo here

00:13:00,610 --> 00:13:07,070
ng on an it right well it should be ng

00:13:04,610 --> 00:13:10,459
on an it uppercase but because I didn't

00:13:07,070 --> 00:13:13,040
catch this you know if I go run into the

00:13:10,459 --> 00:13:14,750
chrome developer tools here and this is

00:13:13,040 --> 00:13:17,350
like I think the scariest thing that

00:13:14,750 --> 00:13:21,079
happens in life to us as developers is

00:13:17,350 --> 00:13:23,480
that and you're like oh that's lovely no

00:13:21,079 --> 00:13:25,640
freaking airs it's like come on like

00:13:23,480 --> 00:13:27,589
give me something to go on and in this

00:13:25,640 --> 00:13:29,180
case you know there isn't an error it's

00:13:27,589 --> 00:13:32,360
just I didn't type it right it's called

00:13:29,180 --> 00:13:36,320
user error or an ID 10t err

00:13:32,360 --> 00:13:38,060
so what I can do is I can import and

00:13:36,320 --> 00:13:40,130
this will be in the style guide and all

00:13:38,060 --> 00:13:42,079
this but this on a net now again we can

00:13:40,130 --> 00:13:45,110
use the tools now to right click on this

00:13:42,079 --> 00:13:47,209
we can peek and it says if you're going

00:13:45,110 --> 00:13:49,100
to use this you have to have an ng on an

00:13:47,209 --> 00:13:51,589
it of any okay

00:13:49,100 --> 00:13:55,640
pretty cool we'll come on down here and

00:13:51,589 --> 00:13:58,430
now I can on this class implements on a

00:13:55,640 --> 00:13:58,790
net except for you might want to spell

00:13:58,430 --> 00:14:00,290
that right

00:13:58,790 --> 00:14:03,140
it won't help you with that by the way

00:14:00,290 --> 00:14:05,500
but I'm sure they're working on it so

00:14:03,140 --> 00:14:08,390
notice right off the bat I get an error

00:14:05,500 --> 00:14:10,730
and so I can now catch that I have a

00:14:08,390 --> 00:14:12,290
problem here and so the different code

00:14:10,730 --> 00:14:16,360
snippets the ones John show the ones I

00:14:12,290 --> 00:14:18,950
have them out there when we do the class

00:14:16,360 --> 00:14:21,350
it'll automatically implement this

00:14:18,950 --> 00:14:24,200
interface now we shouldn't have any you

00:14:21,350 --> 00:14:26,540
know typos in there and hopefully the

00:14:24,200 --> 00:14:28,970
app once it refreshes will actually load

00:14:26,540 --> 00:14:32,480
some data we get some data down we

00:14:28,970 --> 00:14:34,490
resolve that error quite easily alright

00:14:32,480 --> 00:14:37,070
so let's go on to the next super our

00:14:34,490 --> 00:14:38,810
secret weapon and it's generics this is

00:14:37,070 --> 00:14:40,100
also very awesome have you have you

00:14:38,810 --> 00:14:42,680
actually used generics in another

00:14:40,100 --> 00:14:46,100
language anyone ok quite a few but not

00:14:42,680 --> 00:14:48,260
everybody by any means so generics are a

00:14:46,100 --> 00:14:50,540
code template and because this is a

00:14:48,260 --> 00:14:52,070
secret weapon talk I of course had I'm

00:14:50,540 --> 00:14:53,510
sure you all do if you have little kids

00:14:52,070 --> 00:14:55,550
you know roll out the cookie dough and

00:14:53,510 --> 00:14:57,560
use the cookie cutters and of course you

00:14:55,550 --> 00:15:00,620
do probably swords and stuff like that

00:14:57,560 --> 00:15:02,839
with them but anyway if you're if you're

00:15:00,620 --> 00:15:04,170
doing like cookie dough and let's say

00:15:02,839 --> 00:15:05,459
you're just using a knife to cut

00:15:04,170 --> 00:15:07,950
out the shape you want for like

00:15:05,459 --> 00:15:09,510
Halloween or something like that then I

00:15:07,950 --> 00:15:11,250
think after about the first one or two

00:15:09,510 --> 00:15:14,670
you're going to be like okay we need a

00:15:11,250 --> 00:15:16,139
new plan this is too hard and so you'll

00:15:14,670 --> 00:15:17,700
probably get you know one of these kind

00:15:16,139 --> 00:15:19,649
of shapes here and you'll stamp it and

00:15:17,700 --> 00:15:21,320
you can reuse it that way right you get

00:15:19,649 --> 00:15:24,410
a lot of good reuse out of it so

00:15:21,320 --> 00:15:29,490
generics can be used in multiple ways

00:15:24,410 --> 00:15:31,649
one way is if you had a class that needs

00:15:29,490 --> 00:15:33,769
to support different types in other

00:15:31,649 --> 00:15:36,449
words sometimes I want to use a number

00:15:33,769 --> 00:15:38,880
sometimes I want to use a string

00:15:36,449 --> 00:15:41,339
sometimes I want to use an array you

00:15:38,880 --> 00:15:42,930
know whatever it may be then generics

00:15:41,339 --> 00:15:46,380
will really help you with this this is

00:15:42,930 --> 00:15:49,560
saying I want to make a list of some

00:15:46,380 --> 00:15:51,570
type that's what the tea is and you'll

00:15:49,560 --> 00:15:53,070
notice in the ad here this is the

00:15:51,570 --> 00:15:56,040
template portion it's kind of like a

00:15:53,070 --> 00:15:58,589
mail merge you know dear so-and-so and

00:15:56,040 --> 00:16:01,680
then you want to pull in Dear John dear

00:15:58,589 --> 00:16:03,720
Jane dear whatever well you can do that

00:16:01,680 --> 00:16:07,880
with this so to use this guy would look

00:16:03,720 --> 00:16:09,660
like this you could say new list of I

00:16:07,880 --> 00:16:11,850
customer in this case that's that

00:16:09,660 --> 00:16:13,829
interface I showed earlier and what

00:16:11,850 --> 00:16:15,570
that's going to do for us now is I can

00:16:13,829 --> 00:16:17,190
now make a list of number I can make a

00:16:15,570 --> 00:16:18,570
list of customer I can make a list of

00:16:17,190 --> 00:16:20,579
this a list of that you know whatever I

00:16:18,570 --> 00:16:23,519
want and reuse this over and over and

00:16:20,579 --> 00:16:25,459
over now in the editor why this is so

00:16:23,519 --> 00:16:28,769
cool and you'll see this in a moment is

00:16:25,459 --> 00:16:30,420
when I do the ad there notice first name

00:16:28,769 --> 00:16:32,970
last name that adheres to the interface

00:16:30,420 --> 00:16:35,370
if I left out first name or last name

00:16:32,970 --> 00:16:37,079
we're going to get some errors in the

00:16:35,370 --> 00:16:40,860
editor so I'll instantly know I screwed

00:16:37,079 --> 00:16:42,870
up for instance if I add two oh five not

00:16:40,860 --> 00:16:45,149
valid so you can't do that so let's take

00:16:42,870 --> 00:16:47,399
a look at this real quick so I'm going

00:16:45,149 --> 00:16:50,370
to come back to my data service here and

00:16:47,399 --> 00:16:51,569
right now the intellisense I mentioned

00:16:50,370 --> 00:16:54,899
actually let me go to here was not

00:16:51,569 --> 00:16:57,390
phenomenal when I did dot subscribe

00:16:54,899 --> 00:17:00,990
it just says observable of any so it's

00:16:57,390 --> 00:17:02,940
not that great of intellisense so what I

00:17:00,990 --> 00:17:05,970
can do is I could say hey well this is

00:17:02,940 --> 00:17:09,480
returning a customer type so I could

00:17:05,970 --> 00:17:11,189
actually cast this and it would be smart

00:17:09,480 --> 00:17:12,569
enough to figure it out but I'm going to

00:17:11,189 --> 00:17:14,339
be explicit

00:17:12,569 --> 00:17:19,970
I'm going to say this returns an

00:17:14,339 --> 00:17:22,439
observable of a customer array like this

00:17:19,970 --> 00:17:25,079
now how's that change things actually

00:17:22,439 --> 00:17:27,000
changes a lot if anyone's ever been

00:17:25,079 --> 00:17:30,240
frustrated by again working with

00:17:27,000 --> 00:17:32,009
promises or things like that it's really

00:17:30,240 --> 00:17:34,350
easy to get into it and then be like oh

00:17:32,009 --> 00:17:36,929
crap what they call that field again and

00:17:34,350 --> 00:17:40,590
you got to go look it up right well with

00:17:36,929 --> 00:17:44,659
this now when I come back and I do this

00:17:40,590 --> 00:17:47,220
get customers here if I do the SUBSCRIBE

00:17:44,659 --> 00:17:50,789
you'll notice it's telling me hey you're

00:17:47,220 --> 00:17:54,090
getting back a customer array in this

00:17:50,789 --> 00:17:56,490
case an interface I customer array very

00:17:54,090 --> 00:17:59,509
very cool because before when you

00:17:56,490 --> 00:18:01,679
returned any you get no intellisense

00:17:59,509 --> 00:18:05,700
down here you know what I used to have

00:18:01,679 --> 00:18:07,830
this as any for instance and you'll be

00:18:05,700 --> 00:18:15,409
like really impressed if I do you know

00:18:07,830 --> 00:18:19,289
this dot customer's 0.1

00:18:15,409 --> 00:18:22,769
well by just undo that actually by doing

00:18:19,289 --> 00:18:24,750
this and doing the I customer that you

00:18:22,769 --> 00:18:26,129
see here now and the observable number

00:18:24,750 --> 00:18:28,169
one when you do the subscribe you'll

00:18:26,129 --> 00:18:31,409
know exactly what you're going to get to

00:18:28,169 --> 00:18:33,240
put right here number two because you

00:18:31,409 --> 00:18:35,970
put that right there now when you do

00:18:33,240 --> 00:18:38,580
again the customers you'll see the

00:18:35,970 --> 00:18:41,340
intellisense I showed earlier so this is

00:18:38,580 --> 00:18:44,700
an example of not only interfaces but

00:18:41,340 --> 00:18:47,009
also generics in action here and that's

00:18:44,700 --> 00:18:48,539
exactly what you can do now if you want

00:18:47,009 --> 00:18:50,279
to be a little more explicit about what

00:18:48,539 --> 00:18:52,679
you're actually returning so pretty

00:18:50,279 --> 00:18:55,169
awesome once you get the hang of it it's

00:18:52,679 --> 00:18:56,460
like awesomesauce like you want to do it

00:18:55,169 --> 00:18:59,210
everywhere because it's just so much

00:18:56,460 --> 00:19:01,799
easier now as you're writing your app

00:18:59,210 --> 00:19:04,200
all right so the last secret weapon that

00:19:01,799 --> 00:19:06,870
is probably one of my favorites you know

00:19:04,200 --> 00:19:08,669
the JavaScript releases nowadays they're

00:19:06,870 --> 00:19:10,950
pretty much on a yearly cadence and

00:19:08,669 --> 00:19:14,370
they're trying to be anyway and the

00:19:10,950 --> 00:19:17,759
browsers out there simply just can't

00:19:14,370 --> 00:19:21,029
keep up with all this right so I think

00:19:17,759 --> 00:19:22,200
we're always going to be in this mode of

00:19:21,029 --> 00:19:25,320
leverage

00:19:22,200 --> 00:19:26,490
things like typescript because I don't

00:19:25,320 --> 00:19:27,990
want to work with the lowest common

00:19:26,490 --> 00:19:31,230
denominator I want to work with some you

00:19:27,990 --> 00:19:33,630
know cool new fancy stuff and we can

00:19:31,230 --> 00:19:36,090
already do that some in angular today we

00:19:33,630 --> 00:19:38,520
can use decorators for instance which is

00:19:36,090 --> 00:19:40,710
part of the upcoming spec and so when

00:19:38,520 --> 00:19:42,360
you do a component add injectable and

00:19:40,710 --> 00:19:45,480
some of the other decorators that's

00:19:42,360 --> 00:19:48,420
available but in the future when

00:19:45,480 --> 00:19:50,550
typescript rolls out in the near future

00:19:48,420 --> 00:19:53,400
async/await support this is a new way to

00:19:50,550 --> 00:19:54,690
work with asynchronous processes some of

00:19:53,400 --> 00:19:56,550
you probably in here have done this in

00:19:54,690 --> 00:20:00,270
other languages and it's like phenomenal

00:19:56,550 --> 00:20:02,400
it's so much easier now to work with an

00:20:00,270 --> 00:20:03,630
async type of thing and leverages so

00:20:02,400 --> 00:20:05,850
we're going to be able to do that now

00:20:03,630 --> 00:20:07,770
and there is a link here at the bottom

00:20:05,850 --> 00:20:09,300
if you're interested that you can get to

00:20:07,770 --> 00:20:11,700
this there's a nice roadmap of what

00:20:09,300 --> 00:20:13,740
they're planning so as a review we can

00:20:11,700 --> 00:20:15,930
have type support excellent tooling

00:20:13,740 --> 00:20:19,080
interfaces generics and we can leverage

00:20:15,930 --> 00:20:21,240
the future today and if you want some

00:20:19,080 --> 00:20:22,800
code on this I have a couple links in

00:20:21,240 --> 00:20:23,820
here I'm going to give you one link you

00:20:22,800 --> 00:20:25,560
need to know you can get to all the

00:20:23,820 --> 00:20:27,900
slides right now if you'd like it's

00:20:25,560 --> 00:20:29,370
right here and I appreciate you

00:20:27,900 --> 00:20:30,360
listening it and I hope you are able to

00:20:29,370 --> 00:20:33,830
leverage some of the stuff with

00:20:30,360 --> 00:20:33,830

YouTube URL: https://www.youtube.com/watch?v=e3djIqAGqZo


