Title: ng-conf 2016 Day 2 Keynote
Publication date: 2016-05-18
Playlist: ng-conf 2016
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:18:48,240 --> 00:18:50,300
you

00:19:42,970 --> 00:19:51,350
who had fun last night right good fun

00:19:46,700 --> 00:19:53,990
last night who left before the karaoke

00:19:51,350 --> 00:19:55,640
started everybody didn't know one

00:19:53,990 --> 00:19:57,649
applause but everyone laughs who is

00:19:55,640 --> 00:20:01,460
completely confused about what Faraday

00:19:57,649 --> 00:20:02,149
is he's your head good that was kind of

00:20:01,460 --> 00:20:06,289
the point

00:20:02,149 --> 00:20:09,080
no Faraday is gonna be a blast the kind

00:20:06,289 --> 00:20:10,970
of the idea of it is you pick your

00:20:09,080 --> 00:20:13,640
schedule you have fun you'll go to a

00:20:10,970 --> 00:20:16,490
deep dive on angular 2 you'll go get a

00:20:13,640 --> 00:20:19,520
scone and then you'll go deep dive into

00:20:16,490 --> 00:20:21,679
the foam room that's a relative el Kroll

00:20:19,520 --> 00:20:23,000
wall yeah like yeah just pick whatever

00:20:21,679 --> 00:20:25,370
you want it's gonna be fun there's a lot

00:20:23,000 --> 00:20:27,289
of stuff going on there's a massage room

00:20:25,370 --> 00:20:29,390
there's a game room you can learn to

00:20:27,289 --> 00:20:31,429
play the ukulele you could also go do

00:20:29,390 --> 00:20:32,600
the tour of heroes chat with some

00:20:31,429 --> 00:20:34,610
experts in angular

00:20:32,600 --> 00:20:36,320
yeah or get to me thing and the team as

00:20:34,610 --> 00:20:37,880
well so if you're still not excited

00:20:36,320 --> 00:20:40,399
about angular 2 we've got our brain

00:20:37,880 --> 00:20:41,929
doctor in the back he's gonna be he can

00:20:40,399 --> 00:20:44,929
help you with that he'll help you out

00:20:41,929 --> 00:20:51,049
it's a it's a small non-invasive yeah

00:20:44,929 --> 00:20:53,000
yeah NBD and also like you know we we

00:20:51,049 --> 00:20:55,159
promote angular 2 right that's kind of

00:20:53,000 --> 00:20:57,110
the thing of this conference but if

00:20:55,159 --> 00:20:59,360
you're still undecided which Tech which

00:20:57,110 --> 00:21:00,980
framework to pick we're actually gonna

00:20:59,360 --> 00:21:03,470
settle that question for you once and

00:21:00,980 --> 00:21:06,500
for all with the combat BOTS today we've

00:21:03,470 --> 00:21:08,779
got jQuery going up against ember going

00:21:06,500 --> 00:21:09,710
up against angular 2 against angular

00:21:08,779 --> 00:21:13,640
what else

00:21:09,710 --> 00:21:17,330
I think Pro Tools or mootools metal yeah

00:21:13,640 --> 00:21:19,730
mithril react so like if you don't want

00:21:17,330 --> 00:21:21,380
to take an analytical approach just you

00:21:19,730 --> 00:21:23,360
know the combat box is gonna settle that

00:21:21,380 --> 00:21:25,070
question so so even though the winner

00:21:23,360 --> 00:21:26,090
it's completely arbitrary cuz they

00:21:25,070 --> 00:21:28,669
weren't actually built with angular

00:21:26,090 --> 00:21:31,190
amber like there's some level of

00:21:28,669 --> 00:21:32,809
excitement around it so we actually have

00:21:31,190 --> 00:21:35,360
some brackets that we want everyone to

00:21:32,809 --> 00:21:38,750
fill out sports ball bracket yeah if you

00:21:35,360 --> 00:21:40,700
step out if you go into the dissuade

00:21:38,750 --> 00:21:42,559
room they'll hand these out you got to

00:21:40,700 --> 00:21:45,130
turn them back in before 1131 then when

00:21:42,559 --> 00:21:49,070
it starts and then whoever wins which is

00:21:45,130 --> 00:21:52,150
huge guess there's no science we're

00:21:49,070 --> 00:21:53,620
gonna bring you back to NZ comm 2017 so

00:21:52,150 --> 00:21:57,010
that should be fun for everyone involved

00:21:53,620 --> 00:21:59,890
but though on the bots they are 16

00:21:57,010 --> 00:22:02,710
professional hardware engineers so like

00:21:59,890 --> 00:22:04,840
real engineers not us you know like real

00:22:02,710 --> 00:22:06,670
engineers and they've they've built

00:22:04,840 --> 00:22:08,080
these BOTS and they've brought them and

00:22:06,670 --> 00:22:10,330
they're they're battling it out and

00:22:08,080 --> 00:22:13,150
sparks go fly-in and yeah it's gonna be

00:22:10,330 --> 00:22:15,660
awesome so don't miss that so another

00:22:13,150 --> 00:22:19,330
thing if anyone has any of their extra

00:22:15,660 --> 00:22:20,530
counterfeited imperial credits we need

00:22:19,330 --> 00:22:22,660
you to go turn them in and get some

00:22:20,530 --> 00:22:24,250
raffle tickets and then everyone who

00:22:22,660 --> 00:22:26,110
turned anything in you're gonna want to

00:22:24,250 --> 00:22:29,320
install the app today because we're just

00:22:26,110 --> 00:22:30,670
gonna be broadcasting on the app all the

00:22:29,320 --> 00:22:32,320
raffle winners and there's a lot of cool

00:22:30,670 --> 00:22:34,660
prizes for that so yeah the app

00:22:32,320 --> 00:22:36,760
installed and then after the keynote go

00:22:34,660 --> 00:22:38,500
cash in your counterfeit money and

00:22:36,760 --> 00:22:39,700
speaking of the app there's a couple of

00:22:38,500 --> 00:22:43,000
cool things you guys can do with it

00:22:39,700 --> 00:22:45,100
today so if you look into the there's so

00:22:43,000 --> 00:22:46,840
much going on all at once for Fair Day

00:22:45,100 --> 00:22:48,340
so you might want to kind of pick and

00:22:46,840 --> 00:22:50,320
choose the things you want to do and if

00:22:48,340 --> 00:22:52,810
the app you could actually set a little

00:22:50,320 --> 00:22:54,460
alarm so it's like okay remind me five

00:22:52,810 --> 00:22:56,560
minutes before this session or ten

00:22:54,460 --> 00:22:58,420
minutes before this session so you can

00:22:56,560 --> 00:23:01,930
plan out what you want to do you can

00:22:58,420 --> 00:23:04,360
leave reviews for the speaker or reviews

00:23:01,930 --> 00:23:05,590
for the session yeah I definitely

00:23:04,360 --> 00:23:07,150
recommend using the app if you haven't

00:23:05,590 --> 00:23:10,060
installed yet most of you have but

00:23:07,150 --> 00:23:13,090
there's a few left that have it so get

00:23:10,060 --> 00:23:15,040
it you'll want to use it today after the

00:23:13,090 --> 00:23:17,200
keynote everything kind of starts the

00:23:15,040 --> 00:23:20,590
craziness begins one thing that we want

00:23:17,200 --> 00:23:23,710
to do to remember ng-conf 2016 we want

00:23:20,590 --> 00:23:25,150
everyone to head out to the main what's

00:23:23,710 --> 00:23:28,090
the place called with the flowers

00:23:25,150 --> 00:23:31,690
outside the hotel yeah to the outside

00:23:28,090 --> 00:23:33,220
and we're gonna go in the courtyard out

00:23:31,690 --> 00:23:34,510
there and we're gonna take like someone

00:23:33,220 --> 00:23:36,970
from the 15th floor is going to take an

00:23:34,510 --> 00:23:38,470
ng family photo so everyone when you're

00:23:36,970 --> 00:23:41,220
done here head out to the courtyard and

00:23:38,470 --> 00:23:44,140
we're gonna take an NZ family pic yeah

00:23:41,220 --> 00:23:48,130
tonight we also have game night which

00:23:44,140 --> 00:23:52,600
who's a Starcraft fan in here

00:23:48,130 --> 00:23:54,730
Rockets League that okay that was better

00:23:52,600 --> 00:23:56,680
there's quite a few games going on

00:23:54,730 --> 00:23:58,390
tonight make sure you come F and we're

00:23:56,680 --> 00:24:01,150
trying to hook up another karaoke night

00:23:58,390 --> 00:24:03,130
after the game nights nice to stay away

00:24:01,150 --> 00:24:05,380
for that video view if you were actually

00:24:03,130 --> 00:24:07,150
really good it's how I roll and that's

00:24:05,380 --> 00:24:10,060
how I'm still okay first time ever doing

00:24:07,150 --> 00:24:11,800
karaoke Wow okay so because the keno

00:24:10,060 --> 00:24:14,440
along yesterday we didn't hand out any

00:24:11,800 --> 00:24:16,780
prizes we have so we have so many prizes

00:24:14,440 --> 00:24:18,790
but we're behind not a handout so after

00:24:16,780 --> 00:24:20,410
some in the app right we'll do some but

00:24:18,790 --> 00:24:22,780
after the keynote we're gonna do like 40

00:24:20,410 --> 00:24:26,260
so stick around and if we call your name

00:24:22,780 --> 00:24:27,850
run up fast if if you we don't hear any

00:24:26,260 --> 00:24:30,580
celebration we're gonna assume you're

00:24:27,850 --> 00:24:33,970
not here so you need to celebrate the

00:24:30,580 --> 00:24:35,200
gift that we that that the sponsors and

00:24:33,970 --> 00:24:36,670
everyone provide is so celebrate

00:24:35,200 --> 00:24:38,560
otherwise we're gonna take it back in

00:24:36,670 --> 00:24:42,430
the sign-in to someone else so so yeah

00:24:38,560 --> 00:24:44,080
oh there's also a map in the schedule

00:24:42,430 --> 00:24:47,350
this shows what's going on in every

00:24:44,080 --> 00:24:49,060
single room and one quick note on for

00:24:47,350 --> 00:24:51,730
the Starcraft fans tonight we actually

00:24:49,060 --> 00:24:53,920
have in control in tonight so he's a

00:24:51,730 --> 00:24:56,830
he's a professional caster and he's

00:24:53,920 --> 00:24:59,470
going to be commenting on our amateur

00:24:56,830 --> 00:25:02,140
games and we did this last year I got

00:24:59,470 --> 00:25:04,690
the Eddy's brutal it's hilarious

00:25:02,140 --> 00:25:06,460
hilarious someone wants to die he will

00:25:04,690 --> 00:25:09,240
make fun of you but it will be it will

00:25:06,460 --> 00:25:12,100
be entertaining for the rest of us yeah

00:25:09,240 --> 00:25:13,720
so we're not gonna stall anymore we're

00:25:12,100 --> 00:25:16,930
gonna kick this off to the angular team

00:25:13,720 --> 00:25:19,440
for keynote day - so welcome the English

00:25:16,930 --> 00:25:19,440
team everybody

00:25:23,890 --> 00:25:31,149
good morning thanks for coming back okay

00:25:27,370 --> 00:25:33,580
so yesterday we talked about where we've

00:25:31,149 --> 00:25:35,590
gotten to on angular 2 two dates and

00:25:33,580 --> 00:25:37,559
today I want to revisit that story and

00:25:35,590 --> 00:25:39,940
talk a bit about what's next

00:25:37,559 --> 00:25:41,110
immediately next and then maybe a little

00:25:39,940 --> 00:25:42,519
further ahead and we'll hear from a

00:25:41,110 --> 00:25:50,500
bunch of different folks on the angular

00:25:42,519 --> 00:25:52,149
team so to start with let's come back to

00:25:50,500 --> 00:25:54,429
the offline compiler which is the bit we

00:25:52,149 --> 00:25:59,620
need to complete to mark angular 2 as

00:25:54,429 --> 00:26:02,860
final and what we had said was that we

00:25:59,620 --> 00:26:04,600
had built a version that was only 45 K

00:26:02,860 --> 00:26:08,440
now it's not a simple process to get

00:26:04,600 --> 00:26:10,690
here and so what I wanted to do is bring

00:26:08,440 --> 00:26:13,600
Rob Wormald on stage to do a demo of

00:26:10,690 --> 00:26:14,860
this so we could see that's real the

00:26:13,600 --> 00:26:16,570
ability is gonna do is a little bit

00:26:14,860 --> 00:26:19,450
larger it's about 49 K but we're gonna

00:26:16,570 --> 00:26:22,380
beat that back down then mishko is gonna

00:26:19,450 --> 00:26:24,100
come on and give us a very deep dive on

00:26:22,380 --> 00:26:26,440
how this all works

00:26:24,100 --> 00:26:35,289
so Rob take it away and we'll we'll hear

00:26:26,440 --> 00:26:37,389
more about this later hey maybe hear me

00:26:35,289 --> 00:26:39,840
cool let's just get my server started up

00:26:37,389 --> 00:26:39,840
here

00:26:40,430 --> 00:26:44,090
so the first thing I should do is

00:26:41,720 --> 00:26:50,780
probably apologize for that to start

00:26:44,090 --> 00:26:52,580
with right serve so if you've been pay

00:26:50,780 --> 00:26:54,320
attention like a couple of weeks ago we

00:26:52,580 --> 00:26:57,650
sort of kind of went dark and we move

00:26:54,320 --> 00:26:58,790
started moving stuff around and if you

00:26:57,650 --> 00:27:00,380
looked at the are so you can't you've

00:26:58,790 --> 00:27:02,180
seen that we actually now have a whole

00:27:00,380 --> 00:27:04,180
bunch of angular packages right so we've

00:27:02,180 --> 00:27:08,600
got at angular this at angular that

00:27:04,180 --> 00:27:10,070
that's my fault so sorry but and so I'm

00:27:08,600 --> 00:27:12,800
gonna kind of explain a bit here why

00:27:10,070 --> 00:27:15,770
we've done that and what it enables so

00:27:12,800 --> 00:27:19,550
let's do this right so I've got the

00:27:15,770 --> 00:27:20,870
world's simplest angular 2 app here just

00:27:19,550 --> 00:27:22,220
a little bit the hello world so we've

00:27:20,870 --> 00:27:23,420
got hello name and then we're just going

00:27:22,220 --> 00:27:26,180
to make sure that change detection works

00:27:23,420 --> 00:27:27,350
here and so the first thing I want to

00:27:26,180 --> 00:27:30,050
show you is kind of how you've been

00:27:27,350 --> 00:27:31,850
doing this previously right so we've

00:27:30,050 --> 00:27:34,790
been giving you an es6 I'm sorry a

00:27:31,850 --> 00:27:37,070
common J's build of angular 2 all into

00:27:34,790 --> 00:27:38,570
one bid package and you've probably been

00:27:37,070 --> 00:27:40,460
using the bundled code if you if you've

00:27:38,570 --> 00:27:42,380
not used it before or you're maybe using

00:27:40,460 --> 00:27:45,170
webpack or systemjs builder or something

00:27:42,380 --> 00:27:46,370
like that and so you've been using

00:27:45,170 --> 00:27:48,050
common J's it works it's fast

00:27:46,370 --> 00:27:50,540
everything's great right but the payload

00:27:48,050 --> 00:27:51,980
size it's not super small so if I go

00:27:50,540 --> 00:27:53,090
ahead and run this and I'm gonna have to

00:27:51,980 --> 00:27:54,700
look this up again because I don't

00:27:53,090 --> 00:27:57,830
remember what I called the other task

00:27:54,700 --> 00:28:01,880
here we go I've got to so I'm gonna do

00:27:57,830 --> 00:28:03,440
NPM run build dynamic and so we kind of

00:28:01,880 --> 00:28:04,730
call this dynamic mode what you're doing

00:28:03,440 --> 00:28:06,530
today right so that means we're shipping

00:28:04,730 --> 00:28:08,180
the compiler we're compiling your

00:28:06,530 --> 00:28:10,660
templates in the browser everything is

00:28:08,180 --> 00:28:14,240
kind of running on the fly

00:28:10,660 --> 00:28:15,380
hopefully this works and what I've got

00:28:14,240 --> 00:28:17,060
here is that I've just got my absolute

00:28:15,380 --> 00:28:19,850
yes I've got a main entry point file

00:28:17,060 --> 00:28:22,640
you've all seen this before and then I'm

00:28:19,850 --> 00:28:25,100
using the system j/s builder so this is

00:28:22,640 --> 00:28:27,800
a really simple task here just open up

00:28:25,100 --> 00:28:29,060
the system builder and I load my config

00:28:27,800 --> 00:28:31,430
file and then I tailed it to like build

00:28:29,060 --> 00:28:32,540
me a static bundle right so if you've

00:28:31,430 --> 00:28:34,880
done any kind of building before you've

00:28:32,540 --> 00:28:38,420
probably done this let's bring out my

00:28:34,880 --> 00:28:41,420
server here so that's successfully built

00:28:38,420 --> 00:28:42,680
that's good and if I go to my dynamic

00:28:41,420 --> 00:28:44,630
mode here we've got an app that works

00:28:42,680 --> 00:28:47,120
yes that's a really good start for the

00:28:44,630 --> 00:28:48,470
morning and so let's look at the network

00:28:47,120 --> 00:28:54,630
log here

00:28:48,470 --> 00:28:57,690
how about to see that yeah cool so what

00:28:54,630 --> 00:29:00,480
we could see is so I want to see it's

00:28:57,690 --> 00:29:06,270
this size here this is important oh and

00:29:00,480 --> 00:29:08,670
let's turn off my cash and so I'm

00:29:06,270 --> 00:29:11,190
running this Jesus and what I'm getting

00:29:08,670 --> 00:29:12,960
out here is about 116 K so this is

00:29:11,190 --> 00:29:14,490
angular being built from commonjs I'm

00:29:12,960 --> 00:29:18,330
loading it doing translation in the

00:29:14,490 --> 00:29:20,010
browser but this is kind of like 116 K

00:29:18,330 --> 00:29:22,410
is about as small as you're gonna get

00:29:20,010 --> 00:29:24,000
right now and this is with some pretty

00:29:22,410 --> 00:29:27,120
big optimization on our part so this is

00:29:24,000 --> 00:29:30,240
dynamic mode right and then what I've

00:29:27,120 --> 00:29:32,280
got set up as well is a static mode so

00:29:30,240 --> 00:29:33,780
this is using the new template compiler

00:29:32,280 --> 00:29:35,280
this has probably never been done in

00:29:33,780 --> 00:29:40,230
public before so you're the first people

00:29:35,280 --> 00:29:41,660
who get to see this happen live so what

00:29:40,230 --> 00:29:44,640
we're doing here is a couple of things

00:29:41,660 --> 00:29:46,380
first is I have a different entry point

00:29:44,640 --> 00:29:49,350
file so instead of using my main dot yes

00:29:46,380 --> 00:29:51,360
here I'm using a main - static file and

00:29:49,350 --> 00:29:53,580
that's got a couple of different imports

00:29:51,360 --> 00:29:55,260
here we're pulling in our core bootstrap

00:29:53,580 --> 00:29:57,630
function and a reflective injector from

00:29:55,260 --> 00:29:59,010
angular core bring in the platform and

00:29:57,630 --> 00:30:01,320
some providers and then we've got this

00:29:59,010 --> 00:30:03,510
new thing which is the app NG factory

00:30:01,320 --> 00:30:05,340
and so you can think of the NG Factory

00:30:03,510 --> 00:30:07,890
is the like the compiled version of your

00:30:05,340 --> 00:30:09,360
app component right and me shows can

00:30:07,890 --> 00:30:10,500
explain this a little bit more but you

00:30:09,360 --> 00:30:13,380
can see that basically it's generated

00:30:10,500 --> 00:30:14,730
for me this app ng factory has file this

00:30:13,380 --> 00:30:16,620
is the generated code that the angular

00:30:14,730 --> 00:30:18,960
offline compiler is generating for you

00:30:16,620 --> 00:30:20,970
and so effectively like we get like a

00:30:18,960 --> 00:30:23,010
mirror image of our app structure and

00:30:20,970 --> 00:30:24,870
instead of importing in bootstrapping my

00:30:23,010 --> 00:30:28,020
app component I import and bootstrap

00:30:24,870 --> 00:30:29,880
this engine factory component this was

00:30:28,020 --> 00:30:31,050
all run so what we've done is we've

00:30:29,880 --> 00:30:33,060
taken we've run it through our new

00:30:31,050 --> 00:30:36,210
template compiler so I've cleaned up a

00:30:33,060 --> 00:30:38,490
little bit I've done a TSC but this NGC

00:30:36,210 --> 00:30:40,380
command here is new so this is the ng

00:30:38,490 --> 00:30:42,360
compiler the angular compiler it works

00:30:40,380 --> 00:30:44,460
exactly the same as TSC does on the

00:30:42,360 --> 00:30:47,160
command line I just pointed at my TS

00:30:44,460 --> 00:30:48,840
config file and then I'm using roll up

00:30:47,160 --> 00:30:51,300
here and so roll up is something that is

00:30:48,840 --> 00:30:52,620
fairly new to the JavaScript world the

00:30:51,300 --> 00:30:54,840
big reason I'm using that is that it

00:30:52,620 --> 00:30:56,760
actually allows us to do tree shaking it

00:30:54,840 --> 00:30:58,620
allows us to look at the es6 source code

00:30:56,760 --> 00:31:00,330
and not pull in the stuff that we're not

00:30:58,620 --> 00:31:00,830
using right and that's a big reason that

00:31:00,330 --> 00:31:03,500
we made

00:31:00,830 --> 00:31:05,540
the packets change because if you look

00:31:03,500 --> 00:31:06,920
at the packages in my angular or

00:31:05,540 --> 00:31:11,480
something go to angular common here and

00:31:06,920 --> 00:31:14,780
go to package JSON you can see that I've

00:31:11,480 --> 00:31:17,030
got a main file like you used to in

00:31:14,780 --> 00:31:19,460
every package but I've also got this j/s

00:31:17,030 --> 00:31:21,350
next main file here and so this is a

00:31:19,460 --> 00:31:23,120
hint tools like roll-up in tools that

00:31:21,350 --> 00:31:25,100
are es6 aware I think the new web pack

00:31:23,120 --> 00:31:26,960
supports this and it actually points at

00:31:25,100 --> 00:31:28,640
this ESM directory and this has again

00:31:26,960 --> 00:31:31,100
like a mirror image of the angular

00:31:28,640 --> 00:31:34,190
builds except in es6 and allows us to do

00:31:31,100 --> 00:31:35,510
a bunch of optimization and so I run

00:31:34,190 --> 00:31:37,790
that through roll-up and I'm using like

00:31:35,510 --> 00:31:39,950
the es6 version of rxjs and i'm using

00:31:37,790 --> 00:31:41,960
all the source then i'm transpiling my

00:31:39,950 --> 00:31:43,700
source to es6 so i'll go back and show

00:31:41,960 --> 00:31:45,200
you that so i'm running into you

00:31:43,700 --> 00:31:47,450
compiler and then I'm doing roll-up and

00:31:45,200 --> 00:31:49,490
then I'm actually taking that es6 output

00:31:47,450 --> 00:31:51,500
and then turning that into es5 so

00:31:49,490 --> 00:31:52,970
execute in the browser 10 that I'm

00:31:51,500 --> 00:31:54,560
running running uglify on it just to do

00:31:52,970 --> 00:31:57,890
mangle and compress and screw I eight

00:31:54,560 --> 00:31:59,510
and spitting out a bundle here we

00:31:57,890 --> 00:32:02,690
support ie9 that I ate so it's fine

00:31:59,510 --> 00:32:04,520
right and then I'm going to go ahead and

00:32:02,690 --> 00:32:08,030
pop over to my static mode here and it

00:32:04,520 --> 00:32:09,980
runs that's wonderful you can see that

00:32:08,030 --> 00:32:12,140
it's significantly faster to boots and

00:32:09,980 --> 00:32:16,000
now we're down at this forty nine point

00:32:12,140 --> 00:32:16,000
four K number so that's a big

00:32:17,100 --> 00:32:24,169
I just show you quickly as well like

00:32:21,750 --> 00:32:26,340
this starts up ridiculously quickly

00:32:24,169 --> 00:32:27,870
because there's no completion going the

00:32:26,340 --> 00:32:29,820
browser like it's all the work is done

00:32:27,870 --> 00:32:32,429
you know and less my creatortool seconds

00:32:29,820 --> 00:32:33,360
it's it's really really rapid so I will

00:32:32,429 --> 00:32:37,850
hand this back over to Michiko to

00:32:33,360 --> 00:32:37,850
explain how this works but there you go

00:32:43,760 --> 00:32:51,929
good morning I have to be close this was

00:32:49,950 --> 00:32:54,720
our demo so let's talk about how this

00:32:51,929 --> 00:32:57,539
this kind of system works so first let's

00:32:54,720 --> 00:33:00,330
talk about angular 1 and what actually

00:32:57,539 --> 00:33:02,580
in angular 1 is different from angular 2

00:33:00,330 --> 00:33:04,799
so in angular 1 a browser fetches your

00:33:02,580 --> 00:33:07,080
template as an xhr and this is a browser

00:33:04,799 --> 00:33:09,630
piece of code and then we pass it on to

00:33:07,080 --> 00:33:12,179
the browser parser this is basically we

00:33:09,630 --> 00:33:15,000
take hidden div and we do inner HTML on

00:33:12,179 --> 00:33:17,370
you only any the template we just got

00:33:15,000 --> 00:33:18,929
and the browser parses it into a dom so

00:33:17,370 --> 00:33:20,730
now again it's in the dom browser and

00:33:18,929 --> 00:33:22,409
then we walk the dom and we have a

00:33:20,730 --> 00:33:24,210
registry of all the directives and we

00:33:22,409 --> 00:33:25,559
figure out where in a dom things are and

00:33:24,210 --> 00:33:28,710
then if you want to make a copy like for

00:33:25,559 --> 00:33:31,200
examples of ng-repeat you would use the

00:33:28,710 --> 00:33:34,289
dom cloning and so because so much of

00:33:31,200 --> 00:33:36,510
the pipeline of angular 1 is in the

00:33:34,289 --> 00:33:38,340
browser it's in the dom you can't run it

00:33:36,510 --> 00:33:40,409
on the server you can't run it on a web

00:33:38,340 --> 00:33:43,020
worker and you're kind of at the mercy

00:33:40,409 --> 00:33:46,110
of what the browser does so for example

00:33:43,020 --> 00:33:48,419
the the browser parser is case

00:33:46,110 --> 00:33:49,890
insensitive so for a while we actually

00:33:48,419 --> 00:33:51,780
have to that's what we have to do dashes

00:33:49,890 --> 00:33:54,840
over there instead of upper case and

00:33:51,780 --> 00:33:56,130
lower case and also for example the

00:33:54,840 --> 00:33:57,330
parser doesn't give you line numbers

00:33:56,130 --> 00:33:59,450
when there is an error so it's really

00:33:57,330 --> 00:34:02,340
hard to figure out what went wrong and

00:33:59,450 --> 00:34:04,200
when we parse all this things and build

00:34:02,340 --> 00:34:05,520
up internal data structures what we

00:34:04,200 --> 00:34:07,500
essentially have is kind of an

00:34:05,520 --> 00:34:08,790
interpreter which looks over these data

00:34:07,500 --> 00:34:12,419
structures and tries to run them and

00:34:08,790 --> 00:34:14,100
they code we run this on is what's known

00:34:12,419 --> 00:34:16,950
as polymorphic code it's a very fancy

00:34:14,100 --> 00:34:18,629
word for the fact that the VMS basically

00:34:16,950 --> 00:34:20,310
are not very good at optimizing it

00:34:18,629 --> 00:34:21,990
because every time there is a call site

00:34:20,310 --> 00:34:23,320
every time the framework says all call

00:34:21,990 --> 00:34:24,190
the user function

00:34:23,320 --> 00:34:26,530
the function points to a different

00:34:24,190 --> 00:34:27,850
location and so the VM can't inline it

00:34:26,530 --> 00:34:30,070
it can't make any assumptions about

00:34:27,850 --> 00:34:32,560
what's about to happen and it's not very

00:34:30,070 --> 00:34:35,500
and not as fast as it could be so in

00:34:32,560 --> 00:34:37,780
angular 2 things are different what we

00:34:35,500 --> 00:34:40,660
do is we take the file the template file

00:34:37,780 --> 00:34:43,960
and we run our own parser honor so we've

00:34:40,660 --> 00:34:45,250
written the parser in JavaScript and

00:34:43,960 --> 00:34:46,300
because we've written in JavaScript

00:34:45,250 --> 00:34:48,070
first of all we can make it case

00:34:46,300 --> 00:34:51,040
sensitive that's why in angular 2 you

00:34:48,070 --> 00:34:55,420
don't have to say ng - if you simply say

00:34:51,040 --> 00:34:57,730
ng if with I being capitalized we also

00:34:55,420 --> 00:34:59,470
won parsing can give you line numbers we

00:34:57,730 --> 00:35:01,000
know where the particular token comes

00:34:59,470 --> 00:35:02,770
from a particular comes from in your

00:35:01,000 --> 00:35:04,120
file and if there is an exception we can

00:35:02,770 --> 00:35:06,970
actually give you a line column number

00:35:04,120 --> 00:35:08,590
and we build this into an internal data

00:35:06,970 --> 00:35:11,380
structure which called the ASD tree so

00:35:08,590 --> 00:35:13,180
notice all of this is in pure JavaScript

00:35:11,380 --> 00:35:15,850
and as a result this can run on a web

00:35:13,180 --> 00:35:18,790
worker this can run on a server or any

00:35:15,850 --> 00:35:21,340
other place or in this case what the

00:35:18,790 --> 00:35:24,070
rabble's demoing it ran offline and then

00:35:21,340 --> 00:35:25,480
we generate we can we can do what we did

00:35:24,070 --> 00:35:28,570
in angular 1 which is we can interpret

00:35:25,480 --> 00:35:30,760
the ast on a fly but more importantly we

00:35:28,570 --> 00:35:33,010
can actually generate JavaScript code

00:35:30,760 --> 00:35:35,260
directly out of it and we can eval it on

00:35:33,010 --> 00:35:36,880
a fly which is what we do in a dynamic

00:35:35,260 --> 00:35:39,130
mode this whole pipeline lines in a

00:35:36,880 --> 00:35:41,410
browser we we run it in JavaScript we

00:35:39,130 --> 00:35:43,600
eval it and the code we generate is

00:35:41,410 --> 00:35:45,490
monomorphic again fancy word for

00:35:43,600 --> 00:35:47,500
basically meaning that the Col sites

00:35:45,490 --> 00:35:49,300
always end up in the same location and

00:35:47,500 --> 00:35:51,220
so the VM can actually inline a lot of

00:35:49,300 --> 00:35:54,160
these Col sites for us and which gives

00:35:51,220 --> 00:35:55,540
us a huge speed boost actually that's

00:35:54,160 --> 00:35:57,790
kind of that whole secret to why change

00:35:55,540 --> 00:36:00,550
detection is so much faster in angular 2

00:35:57,790 --> 00:36:02,680
now from the ast we can also generate

00:36:00,550 --> 00:36:04,210
typescript and this is pretty cool now

00:36:02,680 --> 00:36:06,160
you can't evaluate typescript in the

00:36:04,210 --> 00:36:07,930
browser so that's not very helpful but

00:36:06,160 --> 00:36:09,490
if you're in an offline mode when you

00:36:07,930 --> 00:36:11,250
generate out typescript and you run it

00:36:09,490 --> 00:36:13,540
through the rest of the typescript chain

00:36:11,250 --> 00:36:15,700
because everything is typed we can

00:36:13,540 --> 00:36:17,530
actually give you compile time error

00:36:15,700 --> 00:36:21,160
checking so if you in your templates use

00:36:17,530 --> 00:36:24,070
misspell for example username it will

00:36:21,160 --> 00:36:26,050
actually complain to you at compile time

00:36:24,070 --> 00:36:27,880
saying actually this object you

00:36:26,050 --> 00:36:30,550
referring to does not have a user name

00:36:27,880 --> 00:36:31,630
spelled in this particular way something

00:36:30,550 --> 00:36:33,670
is wrong

00:36:31,630 --> 00:36:35,380
have a look and because it's our own

00:36:33,670 --> 00:36:37,390
parser we can actually give you a line

00:36:35,380 --> 00:36:38,770
number and a column number of where this

00:36:37,390 --> 00:36:42,610
particular binding that's causing

00:36:38,770 --> 00:36:44,470
troubles has come from so the code we

00:36:42,610 --> 00:36:46,270
generated as I said was is monomorphic

00:36:44,470 --> 00:36:48,360
and it's significantly faster in angular

00:36:46,270 --> 00:36:51,310
00:36:48,360 --> 00:36:53,050
so once we generate the code we want to

00:36:51,310 --> 00:36:54,670
minify it and we kind of make money make

00:36:53,050 --> 00:36:56,650
it small so but this is not a simple

00:36:54,670 --> 00:36:58,540
process as you might guess there's

00:36:56,650 --> 00:37:00,520
actually a couple of steps in it so we

00:36:58,540 --> 00:37:03,040
just described the offline compilation

00:37:00,520 --> 00:37:04,510
step and then we have to do in line and

00:37:03,040 --> 00:37:05,770
tree shaking and minification so let's

00:37:04,510 --> 00:37:07,840
have a look so first of all let's look

00:37:05,770 --> 00:37:09,760
at the what the template generation

00:37:07,840 --> 00:37:11,350
looks like this is a pseudo code this is

00:37:09,760 --> 00:37:12,520
not actually what we generate but it

00:37:11,350 --> 00:37:15,010
kind of gives you an idea of what's

00:37:12,520 --> 00:37:17,680
going on so imagine you have a template

00:37:15,010 --> 00:37:22,030
which is what Rob's demo had which is a

00:37:17,680 --> 00:37:24,610
Dibble div a hello name this particular

00:37:22,030 --> 00:37:26,140
template gets translated into a factory

00:37:24,610 --> 00:37:28,600
which means it's a it's a class that

00:37:26,140 --> 00:37:30,490
angular can call and say hey give me an

00:37:28,600 --> 00:37:33,250
instance of this particular thing and

00:37:30,490 --> 00:37:35,950
what the factory does is it instantiates

00:37:33,250 --> 00:37:39,160
notice what it says we store references

00:37:35,950 --> 00:37:41,920
you know element 1 0 1 2 and they simply

00:37:39,160 --> 00:37:43,240
say render dot create element now here

00:37:41,920 --> 00:37:45,580
is something cool that happens in the

00:37:43,240 --> 00:37:47,050
VMS because there's only one instance of

00:37:45,580 --> 00:37:48,910
a renderer in the whole application and

00:37:47,050 --> 00:37:49,780
it's always the same instance what the

00:37:48,910 --> 00:37:52,180
VMS

00:37:49,780 --> 00:37:53,260
can do is they can inline and so they

00:37:52,180 --> 00:37:55,240
look at this and they go like uh-huh

00:37:53,260 --> 00:37:57,250
every time I come here I always see the

00:37:55,240 --> 00:37:59,440
same exact renderer but why don't I just

00:37:57,250 --> 00:38:01,180
inline it in here and be faster about it

00:37:59,440 --> 00:38:03,580
and so what the create element

00:38:01,180 --> 00:38:07,060
internally does is just as document dot

00:38:03,580 --> 00:38:09,040
create element div and so we we get a

00:38:07,060 --> 00:38:10,870
super fast creation of all the elements

00:38:09,040 --> 00:38:12,910
and this is this turns out to be the

00:38:10,870 --> 00:38:14,230
fastest way to produce Dom we have

00:38:12,910 --> 00:38:18,100
benchmark everything we could think of

00:38:14,230 --> 00:38:19,630
from inner HTML to cloning through every

00:38:18,100 --> 00:38:21,610
other strategy that has ever been used

00:38:19,630 --> 00:38:23,500
turns out this is the fastest way today

00:38:21,610 --> 00:38:25,300
to make Dom so this is super quick on

00:38:23,500 --> 00:38:26,950
making it the second thing I want you to

00:38:25,300 --> 00:38:28,860
notice is this detect changes internal

00:38:26,950 --> 00:38:31,960
this is how the change detection works

00:38:28,860 --> 00:38:33,790
what it simply says is it says var name

00:38:31,960 --> 00:38:36,250
equals this that context that name the

00:38:33,790 --> 00:38:37,690
context is the instance of your of your

00:38:36,250 --> 00:38:38,590
component that you're the controller

00:38:37,690 --> 00:38:39,619
that you have written right the

00:38:38,590 --> 00:38:42,400
component

00:38:39,619 --> 00:38:45,229
and notice that the context is actually

00:38:42,400 --> 00:38:47,210
properly typed so in this case it says

00:38:45,229 --> 00:38:49,519
the context is of type demo app and this

00:38:47,210 --> 00:38:52,369
is why type script can go over the code

00:38:49,519 --> 00:38:54,619
and say aha I can verify that the name

00:38:52,369 --> 00:38:58,069
that came from a template is actually a

00:38:54,619 --> 00:38:59,450
field on the demo app application and if

00:38:58,069 --> 00:39:02,029
it isn't it'll give you an error and I

00:38:59,450 --> 00:39:04,249
can show you that in a second the second

00:39:02,029 --> 00:39:05,839
thing I want you to notice is the actual

00:39:04,249 --> 00:39:08,479
line that does the change detection it

00:39:05,839 --> 00:39:12,079
simply says if name is not equal this

00:39:08,479 --> 00:39:14,569
that last name and if that's true it

00:39:12,079 --> 00:39:17,749
simply says renderer set element and

00:39:14,569 --> 00:39:19,009
notice we directly know which element we

00:39:17,749 --> 00:39:23,180
have to talk to we know that we have to

00:39:19,009 --> 00:39:24,979
set it on element zero and we simply say

00:39:23,180 --> 00:39:27,859
well I want you to set the new name

00:39:24,979 --> 00:39:29,450
value over here and again the VM can

00:39:27,859 --> 00:39:31,279
inline with the render that said set

00:39:29,450 --> 00:39:34,069
text does it just simply says element

00:39:31,279 --> 00:39:35,960
dot text value equals a new name right

00:39:34,069 --> 00:39:39,650
and again the VM can inline this so it

00:39:35,960 --> 00:39:41,059
becomes super fast and Tobias who is the

00:39:39,650 --> 00:39:43,489
guy behind all this compiler stuff

00:39:41,059 --> 00:39:45,680
basically calls this obviously fast you

00:39:43,489 --> 00:39:47,210
look at this and you say well I can't

00:39:45,680 --> 00:39:49,160
possibly imagine what I could possibly

00:39:47,210 --> 00:39:51,170
remove from here to make this faster

00:39:49,160 --> 00:39:54,019
right like if the value is different go

00:39:51,170 --> 00:39:56,690
update the Dom and so this is another

00:39:54,019 --> 00:39:58,249
reason why we think that angular 2

00:39:56,690 --> 00:40:01,309
change detection it's pretty screaming

00:39:58,249 --> 00:40:04,130
fast now is the this next cool thing

00:40:01,309 --> 00:40:07,329
about it is the error messages if you

00:40:04,130 --> 00:40:09,559
have an error in your code in angular 1

00:40:07,329 --> 00:40:11,359
you the stack trace

00:40:09,559 --> 00:40:12,940
often it very quickly goes into the

00:40:11,359 --> 00:40:15,349
framework code and it's all abstract

00:40:12,940 --> 00:40:17,630
operations and unless you're very

00:40:15,349 --> 00:40:18,979
intimate with the angular 1 code base it

00:40:17,630 --> 00:40:20,509
becomes really hard to figure out what

00:40:18,979 --> 00:40:22,849
exactly went wrong and I'm sure many of

00:40:20,509 --> 00:40:24,859
you have this experience with generated

00:40:22,849 --> 00:40:26,779
code it becomes a little different so we

00:40:24,859 --> 00:40:29,930
rigged the name property so that it

00:40:26,779 --> 00:40:31,460
throws in a error and notice that it

00:40:29,930 --> 00:40:33,469
goes directly into detect changes

00:40:31,460 --> 00:40:34,819
internal and in there you can go to the

00:40:33,469 --> 00:40:37,190
line number and will take you directly

00:40:34,819 --> 00:40:38,479
to the if statement that actually did

00:40:37,190 --> 00:40:40,519
this particular operation to try to

00:40:38,479 --> 00:40:41,719
invoke the name and so what you can

00:40:40,519 --> 00:40:44,479
actually do is you can put a breakpoint

00:40:41,719 --> 00:40:46,820
directly over there so when you put a

00:40:44,479 --> 00:40:51,680
breakpoint there you will be

00:40:46,820 --> 00:40:53,060
immediately given the location where the

00:40:51,680 --> 00:40:54,740
operation happens and so you can

00:40:53,060 --> 00:40:58,040
essentially put breakpoints out every

00:40:54,740 --> 00:40:59,120
single double curly location in your

00:40:58,040 --> 00:41:01,340
application something that was not

00:40:59,120 --> 00:41:05,690
possible in angular 1 we can actually

00:41:01,340 --> 00:41:07,610
also generate two different forms of the

00:41:05,690 --> 00:41:09,200
generated code and one form actually

00:41:07,610 --> 00:41:11,450
contains additional information about

00:41:09,200 --> 00:41:12,800
where the line of code came from and if

00:41:11,450 --> 00:41:14,390
that information is present you can

00:41:12,800 --> 00:41:17,120
actually get the information on the top

00:41:14,390 --> 00:41:20,270
which says oh your error is an app that

00:41:17,120 --> 00:41:22,070
HTML line 1 column 5 right so we can

00:41:20,270 --> 00:41:24,140
give you exactly the expression that is

00:41:22,070 --> 00:41:25,820
actually throwing this exception again

00:41:24,140 --> 00:41:27,770
something that is not possible so you

00:41:25,820 --> 00:41:30,350
get up so much better debugging

00:41:27,770 --> 00:41:31,850
experience you can have a it's faster

00:41:30,350 --> 00:41:33,500
it's faster on bootstrap it's faster at

00:41:31,850 --> 00:41:36,020
runtime and the debugging can actually

00:41:33,500 --> 00:41:38,090
put break bones where you want to so we

00:41:36,020 --> 00:41:40,400
think this is pretty cool okay so once

00:41:38,090 --> 00:41:40,910
we generate this code what's the next

00:41:40,400 --> 00:41:43,840
step

00:41:40,910 --> 00:41:43,840
the next step is

00:41:45,300 --> 00:41:51,180
our import statements now import

00:41:48,840 --> 00:41:53,190
statements are super cool ah I it's

00:41:51,180 --> 00:41:54,780
super exciting that javascript is

00:41:53,190 --> 00:41:58,590
finally getting import statements in es6

00:41:54,780 --> 00:41:59,970
and they solve a real problem that you

00:41:58,590 --> 00:42:02,640
know all other languages have had to

00:41:59,970 --> 00:42:04,320
solve in some way and so import

00:42:02,640 --> 00:42:06,570
statements allow you to take the

00:42:04,320 --> 00:42:07,800
application into a larger you know into

00:42:06,570 --> 00:42:09,960
the bigger state have more people work

00:42:07,800 --> 00:42:11,130
on it by breaking things down and kind

00:42:09,960 --> 00:42:12,330
of understanding and because they're

00:42:11,130 --> 00:42:14,460
declarative we cannot build beautiful

00:42:12,330 --> 00:42:17,010
tools on top of these import statements

00:42:14,460 --> 00:42:18,210
that can do useful things for you but it

00:42:17,010 --> 00:42:19,800
does mean that there is a certain

00:42:18,210 --> 00:42:21,990
overhead you know when you have an

00:42:19,800 --> 00:42:24,260
import and you have an export you can

00:42:21,990 --> 00:42:27,810
actually do renaming and as a result

00:42:24,260 --> 00:42:29,100
there is a simple name on one side can

00:42:27,810 --> 00:42:30,300
actually be known as a different kind of

00:42:29,100 --> 00:42:32,340
symbol on the other side and so there's

00:42:30,300 --> 00:42:34,320
this these two hash maps that have them

00:42:32,340 --> 00:42:36,450
get matched up on these names and so

00:42:34,320 --> 00:42:38,400
these provides this actually adds an

00:42:36,450 --> 00:42:39,450
overhead and if you do the right thing

00:42:38,400 --> 00:42:41,190
which is you know your application

00:42:39,450 --> 00:42:43,140
should be broken up into lots of small

00:42:41,190 --> 00:42:45,960
files because well that's a that's the

00:42:43,140 --> 00:42:47,700
correct thing to do this this overhead

00:42:45,960 --> 00:42:49,260
actually gets multiplied answer to how

00:42:47,700 --> 00:42:51,060
many files you have and so the more you

00:42:49,260 --> 00:42:53,160
kind of break up the application the

00:42:51,060 --> 00:42:55,650
more good practices you do the more you

00:42:53,160 --> 00:42:57,840
get penalized for this and so one of the

00:42:55,650 --> 00:43:00,360
things we have to do is we have to

00:42:57,840 --> 00:43:01,560
inline everything into a single file now

00:43:00,360 --> 00:43:03,060
you might be thinking like oh that's

00:43:01,560 --> 00:43:04,530
easy I just concatenate the files

00:43:03,060 --> 00:43:05,880
that's not actually what we're talking

00:43:04,530 --> 00:43:08,430
about here we're talking about taking

00:43:05,880 --> 00:43:10,050
the individual symbols in this file and

00:43:08,430 --> 00:43:12,030
putting them next to each other we're

00:43:10,050 --> 00:43:13,560
not pretending that these files are

00:43:12,030 --> 00:43:16,320
still there within the immediately

00:43:13,560 --> 00:43:18,780
executed if blocks of function blocks

00:43:16,320 --> 00:43:21,300
but rather we're actually putting this

00:43:18,780 --> 00:43:24,000
stuff into the same location renaming if

00:43:21,300 --> 00:43:26,070
there's collisions and so on and so this

00:43:24,000 --> 00:43:28,020
produces a new file which is kind of the

00:43:26,070 --> 00:43:29,520
concatenation of the original file but

00:43:28,020 --> 00:43:31,910
with all the import statements removed

00:43:29,520 --> 00:43:36,090
and all of the unnecessary immediately

00:43:31,910 --> 00:43:38,940
invoked function blocks removed the next

00:43:36,090 --> 00:43:41,280
step is we have to tree shake it now

00:43:38,940 --> 00:43:43,230
remember how Rob was showing you that

00:43:41,280 --> 00:43:45,180
there is a different entry point for the

00:43:43,230 --> 00:43:47,370
static world because of this different

00:43:45,180 --> 00:43:50,010
entry point we can have a tool that

00:43:47,370 --> 00:43:51,870
starts with bootstrap static and starts

00:43:50,010 --> 00:43:53,490
following what does this particular code

00:43:51,870 --> 00:43:56,220
call and so there's bootstrap static

00:43:53,490 --> 00:43:58,680
gets a reference to degenerated

00:43:56,220 --> 00:44:00,540
component the genetic component refers

00:43:58,680 --> 00:44:02,340
to the actual component which might

00:44:00,540 --> 00:44:04,830
refer to some directives and components

00:44:02,340 --> 00:44:06,960
and pipes and so on and so the tree

00:44:04,830 --> 00:44:09,300
shaker just follows this and only keeps

00:44:06,960 --> 00:44:11,820
the symbols that are actually referenced

00:44:09,300 --> 00:44:13,770
and because you use the bootstrap static

00:44:11,820 --> 00:44:16,230
we don't get the reference ng compiler

00:44:13,770 --> 00:44:18,960
and that falls out automatically from

00:44:16,230 --> 00:44:20,490
the from the tree shaking process but

00:44:18,960 --> 00:44:22,650
not only that we can actually fall out

00:44:20,490 --> 00:44:24,780
other things if you didn't use ng for

00:44:22,650 --> 00:44:26,580
orangie if in your application we don't

00:44:24,780 --> 00:44:28,230
include that either if you don't use a

00:44:26,580 --> 00:44:30,630
particular pipe we don't include that

00:44:28,230 --> 00:44:32,670
pipe either in it we under the words we

00:44:30,630 --> 00:44:34,350
only include what is actually needed for

00:44:32,670 --> 00:44:36,450
this application and it's a super cool

00:44:34,350 --> 00:44:38,550
and allows us to really shrink the size

00:44:36,450 --> 00:44:41,490
of the application and further and the

00:44:38,550 --> 00:44:43,350
final step is you have to minify it and

00:44:41,490 --> 00:44:45,330
so the minification takes all these

00:44:43,350 --> 00:44:46,740
pieces that are kind of left behind and

00:44:45,330 --> 00:44:50,310
munches it together whether it's ugly

00:44:46,740 --> 00:44:52,619
fire or closure compiler closure J J's

00:44:50,310 --> 00:44:54,390
compiler to produce the Munch go and you

00:44:52,619 --> 00:44:57,090
get even smaller which is where we get

00:44:54,390 --> 00:45:01,920
to 49 kilobytes so let's look at some

00:44:57,090 --> 00:45:03,720
numbers these three examples the first

00:45:01,920 --> 00:45:07,050
column represents just simple script tag

00:45:03,720 --> 00:45:08,910
that you might have to do to get the

00:45:07,050 --> 00:45:10,590
application running the second one is if

00:45:08,910 --> 00:45:12,810
you use some kind of a bundler like what

00:45:10,590 --> 00:45:16,140
would Rob showed us the dynamic version

00:45:12,810 --> 00:45:17,280
and the last one is the case of the

00:45:16,140 --> 00:45:19,470
static version where everything is

00:45:17,280 --> 00:45:21,270
compiled together so this shows number

00:45:19,470 --> 00:45:23,010
of requests the browser has to do in

00:45:21,270 --> 00:45:24,540
order to bootstrap yourself and as you

00:45:23,010 --> 00:45:27,480
can imagine the fewer requests the

00:45:24,540 --> 00:45:29,940
browser does the faster you can get the

00:45:27,480 --> 00:45:31,440
other bits is the number of bytes that

00:45:29,940 --> 00:45:33,390
actually gets downloaded over the wire

00:45:31,440 --> 00:45:35,340
again you can see that as you take these

00:45:33,390 --> 00:45:36,930
approaches of caring more how you bundle

00:45:35,340 --> 00:45:38,550
your application the number goes

00:45:36,930 --> 00:45:41,010
significantly down all the way down to

00:45:38,550 --> 00:45:45,359
49 kilobytes but where it really shines

00:45:41,010 --> 00:45:47,100
is I think in latency case we can get

00:45:45,359 --> 00:45:48,780
down all the way from half a second to

00:45:47,100 --> 00:45:51,480
bootstrap your application down to about

00:45:48,780 --> 00:45:54,690
130 milliseconds and the reason we can

00:45:51,480 --> 00:45:56,580
be fast is because one we have a very

00:45:54,690 --> 00:45:58,530
little code that actually gets sent

00:45:56,580 --> 00:46:00,240
across the wire and then then the

00:45:58,530 --> 00:46:01,920
browser as a result doesn't have to do a

00:46:00,240 --> 00:46:04,109
lot of parsing it doesn't have to parse

00:46:01,920 --> 00:46:06,080
the compiler code and build up all the

00:46:04,109 --> 00:46:08,150
internal STS for the VM it's

00:46:06,080 --> 00:46:09,440
just parses only the coding nose is

00:46:08,150 --> 00:46:13,490
going to execute which is what we have

00:46:09,440 --> 00:46:14,930
done also because there's no compiler or

00:46:13,490 --> 00:46:17,120
a template compiler inside of the

00:46:14,930 --> 00:46:19,490
browser in of angular 2 it doesn't have

00:46:17,120 --> 00:46:21,170
to go and parse the the template and

00:46:19,490 --> 00:46:22,700
figuring out what kind of a directives

00:46:21,170 --> 00:46:24,080
are in there or not and have to look it

00:46:22,700 --> 00:46:25,310
up and build up all the data structures

00:46:24,080 --> 00:46:27,050
and then internally eval it which is

00:46:25,310 --> 00:46:30,590
what happens in the middle column over

00:46:27,050 --> 00:46:32,300
here instead it can just go and execute

00:46:30,590 --> 00:46:34,250
and the VM can immediately start

00:46:32,300 --> 00:46:35,930
executing your code immediately start in

00:46:34,250 --> 00:46:38,120
lining what it can find and the

00:46:35,930 --> 00:46:40,400
application gets super fast as you can

00:46:38,120 --> 00:46:43,670
see in this case it is noticeably faster

00:46:40,400 --> 00:46:47,470
when you just refresh it and now I'm

00:46:43,670 --> 00:46:47,470
going to hand it back to Brad

00:46:53,060 --> 00:46:58,690
all right thanks Rob thanks Mishka it's

00:46:55,430 --> 00:47:00,950
cool stuff so we had these numbers I

00:46:58,690 --> 00:47:02,240
want to make a point that you know role

00:47:00,950 --> 00:47:04,340
of Jace is one way we can get there

00:47:02,240 --> 00:47:06,620
that's a tree shaker based on modules

00:47:04,340 --> 00:47:08,090
we've at Google for a long time we've

00:47:06,620 --> 00:47:10,550
had this lovely tree shaker and

00:47:08,090 --> 00:47:13,340
optimizer called Jas compiler and when

00:47:10,550 --> 00:47:15,580
we run the RF code through that we've

00:47:13,340 --> 00:47:17,780
actually gotten a build of about 36 K

00:47:15,580 --> 00:47:19,400
we're gonna have to take some work to

00:47:17,780 --> 00:47:20,990
get to get all this together but as

00:47:19,400 --> 00:47:23,150
Mischka said we also have some

00:47:20,990 --> 00:47:25,580
opportunities to also compile some other

00:47:23,150 --> 00:47:28,940
stuff away like dependency injection and

00:47:25,580 --> 00:47:32,750
so through this process we intend to get

00:47:28,940 --> 00:47:35,090
much smaller than we are today we don't

00:47:32,750 --> 00:47:37,270
know how small we can get but we've set

00:47:35,090 --> 00:47:40,250
kind of an audacious goal for ourselves

00:47:37,270 --> 00:47:42,010
to build a hello world that's 10k now we

00:47:40,250 --> 00:47:44,690
kind of don't believe we can get there

00:47:42,010 --> 00:47:46,460
but it's a good goal right and I've told

00:47:44,690 --> 00:47:52,100
the team if they do I will bake them a

00:47:46,460 --> 00:47:54,740
cake it will look like that okay while

00:47:52,100 --> 00:47:58,010
we're on the topic of performance I want

00:47:54,740 --> 00:48:00,470
to revisit the universal server-side

00:47:58,010 --> 00:48:02,560
pre-rendering topic a bit because we

00:48:00,470 --> 00:48:07,280
talked about yesterday how this runs on

00:48:02,560 --> 00:48:09,410
nodejs asp.net and possibly others and

00:48:07,280 --> 00:48:11,240
so to do that I want to talk about how

00:48:09,410 --> 00:48:12,860
this works in asp.net and if you haven't

00:48:11,240 --> 00:48:14,750
you should really go out and watch Steve

00:48:12,860 --> 00:48:17,270
Sanderson's video Steve Sanderson works

00:48:14,750 --> 00:48:19,700
at Microsoft and he's built this lovely

00:48:17,270 --> 00:48:22,490
integration between angular server-side

00:48:19,700 --> 00:48:25,550
rendering and dotnet you can go take

00:48:22,490 --> 00:48:27,710
this he's a lovely presenter as well the

00:48:25,550 --> 00:48:30,140
way it works is they actually just run

00:48:27,710 --> 00:48:31,970
node with angular in it as you would on

00:48:30,140 --> 00:48:33,560
the server and they have built this

00:48:31,970 --> 00:48:35,810
really high speed tightly integrated

00:48:33,560 --> 00:48:39,650
bridge so you have almost zero overhead

00:48:35,810 --> 00:48:41,180
and talking to node from dotnet now we

00:48:39,650 --> 00:48:42,890
can do this with other environments so

00:48:41,180 --> 00:48:45,590
if you've running java or something else

00:48:42,890 --> 00:48:48,320
you can just talk to node and run these

00:48:45,590 --> 00:48:49,580
things awesome work and you can probably

00:48:48,320 --> 00:48:52,430
get this going and very little work

00:48:49,580 --> 00:48:54,770
today if you're not currently running

00:48:52,430 --> 00:48:57,290
node though the folks who maintain your

00:48:54,770 --> 00:48:59,300
servers may say whoa whoa whoa what are

00:48:57,290 --> 00:49:01,430
you doing there and you may want to go

00:48:59,300 --> 00:49:04,170
down a different route and so it turns

00:49:01,430 --> 00:49:06,240
out that Universal doesn't depend

00:49:04,170 --> 00:49:07,890
or doesn't have to depend on node in

00:49:06,240 --> 00:49:10,589
particular just depends on JavaScript

00:49:07,890 --> 00:49:12,299
and so in your server environment if

00:49:10,589 --> 00:49:15,480
there's an option for running JavaScript

00:49:12,299 --> 00:49:17,250
like Java with Nashorn I know PHP as an

00:49:15,480 --> 00:49:20,280
option probably you have another option

00:49:17,250 --> 00:49:22,160
you can just run it inside the server

00:49:20,280 --> 00:49:25,230
language of your choice

00:49:22,160 --> 00:49:27,690
there are some harder options that we

00:49:25,230 --> 00:49:31,109
may explore also because we have this

00:49:27,690 --> 00:49:32,819
lovely template compiler we don't have

00:49:31,109 --> 00:49:34,319
to emit JavaScript or typescript we can

00:49:32,819 --> 00:49:35,970
omit anything we want it's based on a

00:49:34,319 --> 00:49:38,369
template it doesn't start as JavaScript

00:49:35,970 --> 00:49:40,530
and so let's say we have a PHP container

00:49:38,369 --> 00:49:43,410
running on our server we could actually

00:49:40,530 --> 00:49:45,299
just emit twig templates which PHP knows

00:49:43,410 --> 00:49:47,099
how to interpret and run now this is

00:49:45,299 --> 00:49:49,589
good because it simplifies the stack but

00:49:47,099 --> 00:49:51,569
it might be bad because now you would

00:49:49,589 --> 00:49:55,140
have to re-implement the business logic

00:49:51,569 --> 00:49:56,790
to merge your data with a template but a

00:49:55,140 --> 00:50:00,240
good option that we could work on we

00:49:56,790 --> 00:50:01,589
could also just omit PHP code that gets

00:50:00,240 --> 00:50:03,450
interpreted there so there's a couple

00:50:01,589 --> 00:50:06,000
other things that we can do in this

00:50:03,450 --> 00:50:07,770
state to bring server-side rendering to

00:50:06,000 --> 00:50:10,500
basically any platform that you're

00:50:07,770 --> 00:50:11,849
running on and this though we can't do

00:50:10,500 --> 00:50:13,380
them all as a team we would love to work

00:50:11,849 --> 00:50:14,760
with you if they're if people are

00:50:13,380 --> 00:50:17,490
passionate about this I think this is a

00:50:14,760 --> 00:50:19,049
good place folks like you can get

00:50:17,490 --> 00:50:21,410
involved and we'd love to chat with you

00:50:19,049 --> 00:50:21,410
and help

00:50:21,880 --> 00:50:26,960
all right so we've got a couple more

00:50:24,830 --> 00:50:29,270
topics for this morning now I'd like to

00:50:26,960 --> 00:50:30,560
bring Hans Larsen on the stage who's

00:50:29,270 --> 00:50:31,850
going to talk about some of the advanced

00:50:30,560 --> 00:50:34,120
material components that we're going to

00:50:31,850 --> 00:50:34,120
be building

00:50:40,819 --> 00:50:49,319
hello as Brad said I'm Hans Larsson I'm

00:50:45,180 --> 00:50:50,660
on the angular material team and today

00:50:49,319 --> 00:50:56,569
I'm going to talk a little bit about

00:50:50,660 --> 00:51:00,960
material that's that that doesn't work

00:50:56,569 --> 00:51:02,670
so I don't know how many folks yeah was

00:51:00,960 --> 00:51:04,380
there yesterday I was here for the

00:51:02,670 --> 00:51:06,990
material talk with Jeremy l born and

00:51:04,380 --> 00:51:09,450
Kari Erickson that was really great

00:51:06,990 --> 00:51:13,109
they talked a lot about in material the

00:51:09,450 --> 00:51:17,819
state that it is today and they mostly

00:51:13,109 --> 00:51:20,220
note noted that they we built we built

00:51:17,819 --> 00:51:21,960
basically what we call like the core the

00:51:20,220 --> 00:51:26,999
core stuff for material like overlays

00:51:21,960 --> 00:51:28,589
mobile gestures accessibility and we

00:51:26,999 --> 00:51:30,660
want to provide that to you for your

00:51:28,589 --> 00:51:34,170
libraries for making your own components

00:51:30,660 --> 00:51:36,710
on top of it but of course we're also

00:51:34,170 --> 00:51:38,970
building our own material components and

00:51:36,710 --> 00:51:40,559
these are all the components that we

00:51:38,970 --> 00:51:44,150
want to support using material design

00:51:40,559 --> 00:51:48,239
and these are kind of nice or like

00:51:44,150 --> 00:51:57,029
buttons input text text areas but then

00:51:48,239 --> 00:52:01,849
like I sometimes your applications have

00:51:57,029 --> 00:52:04,589
a I have like more advanced needs and

00:52:01,849 --> 00:52:08,309
basically like we we just close our eyes

00:52:04,589 --> 00:52:09,630
and we we ask ourselves like where we

00:52:08,309 --> 00:52:12,589
want to go like in the next year the

00:52:09,630 --> 00:52:16,289
next two years the next five years maybe

00:52:12,589 --> 00:52:18,450
and we could we took it from there and I

00:52:16,289 --> 00:52:20,759
want to I want to show you today like a

00:52:18,450 --> 00:52:23,279
little idea of some advanced material

00:52:20,759 --> 00:52:28,079
components that we came with some ideas

00:52:23,279 --> 00:52:32,220
of it and for example like maybe you

00:52:28,079 --> 00:52:33,989
want some Google Maps in your in your

00:52:32,220 --> 00:52:36,269
applications maybe you want your users

00:52:33,989 --> 00:52:39,569
you know you're building like a

00:52:36,269 --> 00:52:41,279
competitor to any kind of other software

00:52:39,569 --> 00:52:42,880
and you want to put your user on the map

00:52:41,279 --> 00:52:45,130
or something like that

00:52:42,880 --> 00:52:47,650
and you could use Google Maps the

00:52:45,130 --> 00:52:50,640
without using the API we could implement

00:52:47,650 --> 00:52:53,410
that for you we provide that to you and

00:52:50,640 --> 00:52:56,109
maybe in some cases maybe you want it

00:52:53,410 --> 00:52:57,880
put like some videos or some music

00:52:56,109 --> 00:53:01,390
player maybe you have a sweet band and

00:52:57,880 --> 00:53:04,599
you want to you know but put some good

00:53:01,390 --> 00:53:07,450
music on your website something good or

00:53:04,599 --> 00:53:11,170
maybe you have maybe you're building a

00:53:07,450 --> 00:53:16,650
website that as like user inputting

00:53:11,170 --> 00:53:20,259
articles or wiki pages or HTML pages and

00:53:16,650 --> 00:53:24,609
you basically want to build like a rich

00:53:20,259 --> 00:53:28,569
text editor and building a rich text

00:53:24,609 --> 00:53:30,910
editor is a huge feat it's it's a lot of

00:53:28,569 --> 00:53:34,930
engineering there's a lot that goes into

00:53:30,910 --> 00:53:37,420
it and we have we want to provide that

00:53:34,930 --> 00:53:39,730
to you we want to enable you to be able

00:53:37,420 --> 00:53:43,240
to just drop this into your apps and

00:53:39,730 --> 00:53:45,789
suddenly you can have like users editing

00:53:43,240 --> 00:53:48,670
HTML or even better at some point like

00:53:45,789 --> 00:53:50,859
at full of personal transform into your

00:53:48,670 --> 00:53:53,609
apps so that user multiple users can

00:53:50,859 --> 00:54:00,069
change the same documents or the same

00:53:53,609 --> 00:54:01,690
editor at the same time without you know

00:54:00,069 --> 00:54:05,069
seamlessly updating each other and

00:54:01,690 --> 00:54:09,490
without like overstepping each other

00:54:05,069 --> 00:54:11,710
also we we also know that like many of

00:54:09,490 --> 00:54:16,690
you are in the enterprise world I hope

00:54:11,710 --> 00:54:18,789
most of you and you have a lot of data

00:54:16,690 --> 00:54:21,579
and you want to show that data to users

00:54:18,789 --> 00:54:23,980
you want users to be able to enter that

00:54:21,579 --> 00:54:29,769
data and sometimes it can be cumbersome

00:54:23,980 --> 00:54:31,869
to build like forms that have a lot of

00:54:29,769 --> 00:54:34,029
complex like input or a lot of little

00:54:31,869 --> 00:54:35,529
things and maybe you don't want to do

00:54:34,029 --> 00:54:39,130
that maybe you just want to do like a

00:54:35,529 --> 00:54:41,650
thematic form generation where you tell

00:54:39,130 --> 00:54:43,930
us what your data is and we build the

00:54:41,650 --> 00:54:46,299
form for you and this is totally

00:54:43,930 --> 00:54:49,359
something that we can do and provide to

00:54:46,299 --> 00:54:51,759
you and then once the user have entered

00:54:49,359 --> 00:54:53,500
that data once the your users or your

00:54:51,759 --> 00:54:55,809
customers I've entered all their data

00:54:53,500 --> 00:54:55,960
about what whatever their dogs they want

00:54:55,809 --> 00:55:01,170
to

00:54:55,960 --> 00:55:03,550
therefore put on some dating website

00:55:01,170 --> 00:55:06,250
maybe you want to show it maybe you want

00:55:03,550 --> 00:55:09,460
to display it in some kind of some kind

00:55:06,250 --> 00:55:11,109
of graph graphical form now we know that

00:55:09,460 --> 00:55:15,220
there is a lot of libraries out there

00:55:11,109 --> 00:55:17,619
that already do graphs but most of them

00:55:15,220 --> 00:55:20,800
well many of them are not necessarily

00:55:17,619 --> 00:55:25,660
material design many of them are not are

00:55:20,800 --> 00:55:27,400
not angular2 yet and we want to provide

00:55:25,660 --> 00:55:29,980
something that's super simple for you

00:55:27,400 --> 00:55:33,010
and super amazing that gives amazing

00:55:29,980 --> 00:55:36,130
result where you just drop it into your

00:55:33,010 --> 00:55:38,650
your documents you give us your data we

00:55:36,130 --> 00:55:41,500
just parse it and we just display it to

00:55:38,650 --> 00:55:44,109
the user in the way you want with you

00:55:41,500 --> 00:55:47,140
keep telling us what you want to do we

00:55:44,109 --> 00:55:48,970
do all the work for you and that's

00:55:47,140 --> 00:55:51,690
that's the power that's really the power

00:55:48,970 --> 00:55:55,780
that can be achieved with angular 2 and

00:55:51,690 --> 00:55:57,609
with material material components on

00:55:55,780 --> 00:56:00,580
building on top of each other every time

00:55:57,609 --> 00:56:03,550
and the last point that I wanted the

00:56:00,580 --> 00:56:06,220
last one that I want to show you is an

00:56:03,550 --> 00:56:08,680
alternative to graphs so you got these

00:56:06,220 --> 00:56:10,510
graphs you you might want to show it in

00:56:08,680 --> 00:56:13,690
a different way you might want to show

00:56:10,510 --> 00:56:19,450
it in a data table form you know using

00:56:13,690 --> 00:56:21,790
rows and columns and you want user to be

00:56:19,450 --> 00:56:24,820
able to edit it inline you want

00:56:21,790 --> 00:56:26,770
accessibility people blind people people

00:56:24,820 --> 00:56:30,460
who have like difficulty earring or

00:56:26,770 --> 00:56:32,859
seeing or even you know using Mouse for

00:56:30,460 --> 00:56:38,859
example you want them to be able to use

00:56:32,859 --> 00:56:41,680
your tables intuitively and this is this

00:56:38,859 --> 00:56:42,940
is something that's really hard and this

00:56:41,680 --> 00:56:45,880
is something that we want to provide to

00:56:42,940 --> 00:56:48,670
you again for free we want to enable you

00:56:45,880 --> 00:56:51,760
wanna and pur empower you to be able to

00:56:48,670 --> 00:56:53,410
build apps the way you want take into

00:56:51,760 --> 00:56:56,410
account like a hundred percent of your

00:56:53,410 --> 00:56:58,240
users and not you know not having time

00:56:56,410 --> 00:57:00,220
to meet the deadline if you forget about

00:56:58,240 --> 00:57:01,109
some accessibility feature or something

00:57:00,220 --> 00:57:03,099
like that

00:57:01,109 --> 00:57:05,830
there's none there's none of that

00:57:03,099 --> 00:57:06,140
because we do the work for you and you

00:57:05,830 --> 00:57:08,660
just

00:57:06,140 --> 00:57:11,599
benefits from everything and we wanna we

00:57:08,660 --> 00:57:13,460
I wanted to say today as the last point

00:57:11,599 --> 00:57:16,039
that we are starting to work on these

00:57:13,460 --> 00:57:18,859
actually we're starting to work on the

00:57:16,039 --> 00:57:23,210
data table right now we have some

00:57:18,859 --> 00:57:25,460
amazing contributors and we're starting

00:57:23,210 --> 00:57:28,779
prototyping and exploring that and we

00:57:25,460 --> 00:57:31,220
want to make it fast performance with

00:57:28,779 --> 00:57:34,730
with a lot of feature in it where you

00:57:31,220 --> 00:57:38,690
can edit you can you can in virtual

00:57:34,730 --> 00:57:40,369
scrolling and all that and you guys will

00:57:38,690 --> 00:57:42,739
basically just give us or your data

00:57:40,369 --> 00:57:45,230
give us some pipes some transformation

00:57:42,739 --> 00:57:47,089
on it to display it properly and we will

00:57:45,230 --> 00:57:51,369
just format it put it on the web page

00:57:47,089 --> 00:57:55,730
and give your users a good way to use it

00:57:51,369 --> 00:57:59,390
and that was that was basically all I

00:57:55,730 --> 00:58:01,220
say I think yes so alex is going to talk

00:57:59,390 --> 00:58:04,450
about Alex Eagle is going to talk about

00:58:01,220 --> 00:58:04,450
effortless upgrades

00:58:07,700 --> 00:58:11,390
hello there I'm the last thing keeping

00:58:10,250 --> 00:58:13,040
you guys from having all that fun you

00:58:11,390 --> 00:58:16,579
heard about earlier so I'm gonna try and

00:58:13,040 --> 00:58:20,420
speak very slowly I'm gonna talk about

00:58:16,579 --> 00:58:22,880
the the upgrade story for angular 2 I

00:58:20,420 --> 00:58:25,069
want to start off by congratulating

00:58:22,880 --> 00:58:26,480
everybody who's already updated their

00:58:25,069 --> 00:58:26,780
app to angular 2 I think that's most of

00:58:26,480 --> 00:58:28,819
you

00:58:26,780 --> 00:58:31,220
you made it great job I saw a lot of you

00:58:28,819 --> 00:58:33,559
at this workshop on Tuesday I'm getting

00:58:31,220 --> 00:58:35,359
ready for the angular 3 upgrade so I

00:58:33,559 --> 00:58:36,650
want to just dive right in and start

00:58:35,359 --> 00:58:39,740
talking about what it means to get ready

00:58:36,650 --> 00:58:41,059
for angular 3 thank you for laughing

00:58:39,740 --> 00:58:43,299
that's obviously a joke Brad would not

00:58:41,059 --> 00:58:45,710
have let me on stage to talk about that

00:58:43,299 --> 00:58:46,760
but it's not it's not totally a joke

00:58:45,710 --> 00:58:49,160
because we know that the web platform

00:58:46,760 --> 00:58:52,460
keeps changing and the framework is

00:58:49,160 --> 00:58:54,349
gonna have to keep changing that means

00:58:52,460 --> 00:58:56,329
breaking changes will have to come at

00:58:54,349 --> 00:58:59,119
some point and breaking changes are kind

00:58:56,329 --> 00:59:01,309
of scary so to tell that story want to

00:58:59,119 --> 00:59:05,480
introduce my cousin his name is like

00:59:01,309 --> 00:59:07,369
Billy Bob banana and he has a change of

00:59:05,480 --> 00:59:08,660
version problem and I have trouble

00:59:07,369 --> 00:59:11,569
getting him to upgrade things and it's

00:59:08,660 --> 00:59:13,460
not just his cell phone he keeps sending

00:59:11,569 --> 00:59:14,839
me bug reports for one of my web apps

00:59:13,460 --> 00:59:16,730
and he says it doesn't work in his weird

00:59:14,839 --> 00:59:18,410
old quirky browser I tell him please

00:59:16,730 --> 00:59:20,960
Billy Bob banana face would you please

00:59:18,410 --> 00:59:23,180
upgrade but it's hard to get people to

00:59:20,960 --> 00:59:25,040
upgrade stuff and that makes our life's

00:59:23,180 --> 00:59:26,450
harder right as you know from developing

00:59:25,040 --> 00:59:29,829
web applications it's really hard to

00:59:26,450 --> 00:59:31,700
target all of the old browsers out there

00:59:29,829 --> 00:59:34,910
fortunately it looks like this problem

00:59:31,700 --> 00:59:36,020
may be solved soon because all of the

00:59:34,910 --> 00:59:38,240
browser vendors have an evergreen

00:59:36,020 --> 00:59:40,099
version where users are getting updates

00:59:38,240 --> 00:59:41,809
unless they've opted out and so most of

00:59:40,099 --> 00:59:43,280
your users are maybe one day going to be

00:59:41,809 --> 00:59:44,510
on pretty close to new versions and you

00:59:43,280 --> 00:59:45,530
might not have to test against so many

00:59:44,510 --> 00:59:47,270
old versions you won't have so many

00:59:45,530 --> 00:59:49,069
surprises reduces your maintenance

00:59:47,270 --> 00:59:50,450
burden a lot what about for the

00:59:49,069 --> 00:59:52,220
framework we have the same problem right

00:59:50,450 --> 00:59:53,690
so you saw Hans was talking about these

00:59:52,220 --> 00:59:55,700
great material design components we want

00:59:53,690 --> 00:59:57,109
to build how many different versions of

00:59:55,700 --> 00:59:58,609
angular do those need to run on do they

00:59:57,109 --> 01:00:00,190
need to run on the really old version so

00:59:58,609 --> 01:00:02,030
they need to run all the way on like 2.0

01:00:00,190 --> 01:00:03,170
you know we're thinking a couple years

01:00:02,030 --> 01:00:05,329
into the future here when they when the

01:00:03,170 --> 01:00:07,730
framework has changed that makes our

01:00:05,329 --> 01:00:09,170
lives a lot harder too so is it possible

01:00:07,730 --> 01:00:11,299
that we can make angular itself

01:00:09,170 --> 01:00:12,829
evergreen can we avoid this angular 3

01:00:11,299 --> 01:00:14,540
conversation ever happening by keeping

01:00:12,829 --> 01:00:16,250
the framework up-to-date and keeping all

01:00:14,540 --> 01:00:18,799
of you along with us and the answer is

01:00:16,250 --> 01:00:21,530
we know that this is possible it turns

01:00:18,799 --> 01:00:23,240
out that internally at Google

01:00:21,530 --> 01:00:24,680
we have a lot of angular applications a

01:00:23,240 --> 01:00:27,050
lot of thing go to applications already

01:00:24,680 --> 01:00:29,570
and a lot more coming and we have a

01:00:27,050 --> 01:00:31,490
policy to keep all of our libraries at

01:00:29,570 --> 01:00:32,720
one version near head so what you may

01:00:31,490 --> 01:00:34,790
not realize is when you see a change

01:00:32,720 --> 01:00:37,160
land on our github site we've already

01:00:34,790 --> 01:00:38,510
made those changes that were required

01:00:37,160 --> 01:00:41,060
for that breaking change and all of our

01:00:38,510 --> 01:00:43,700
angular applications how do we do that I

01:00:41,060 --> 01:00:45,349
mean there's a lot of them so what we've

01:00:43,700 --> 01:00:46,790
started to build is a set of refactoring

01:00:45,349 --> 01:00:48,290
tools and these use the typescript

01:00:46,790 --> 01:00:51,320
language services that let us do the

01:00:48,290 --> 01:00:52,880
thing like the offline compiler as well

01:00:51,320 --> 01:00:54,020
as you know the what muzychko talked

01:00:52,880 --> 01:00:55,280
about we have our own parser we have our

01:00:54,020 --> 01:00:57,440
own language tooling for the templates

01:00:55,280 --> 01:00:59,270
and so we can produce proposed source

01:00:57,440 --> 01:01:01,490
edits both to the typescript files the

01:00:59,270 --> 01:01:03,590
HTML and CSS files that are part of

01:01:01,490 --> 01:01:05,750
viewing do to application and those

01:01:03,590 --> 01:01:07,310
edits are sufficient to to correct

01:01:05,750 --> 01:01:09,650
whatever break breakage we just caused

01:01:07,310 --> 01:01:10,970
in the framework so you can imagine how

01:01:09,650 --> 01:01:12,590
we would like to roll this out to you

01:01:10,970 --> 01:01:14,270
and I'd like to announce today our

01:01:12,590 --> 01:01:16,400
intent to build something like this

01:01:14,270 --> 01:01:18,530
where we will release along with every

01:01:16,400 --> 01:01:20,930
breaking change in the framework we can

01:01:18,530 --> 01:01:22,010
release a set of upgrades to take you

01:01:20,930 --> 01:01:23,990
from whatever version you're on now to

01:01:22,010 --> 01:01:25,430
whatever version is the latest then you

01:01:23,990 --> 01:01:27,410
apply these proposed source that it's in

01:01:25,430 --> 01:01:30,190
order you retest your application again

01:01:27,410 --> 01:01:33,020
and now you should be back at head so

01:01:30,190 --> 01:01:34,640
let's hope let's hope that angular 3

01:01:33,020 --> 01:01:35,960
doesn't have to happen and then all of

01:01:34,640 --> 01:01:37,220
the changes that we need to make in the

01:01:35,960 --> 01:01:40,400
framework to keep up with the web

01:01:37,220 --> 01:01:41,830
platform we can roll out to you in this

01:01:40,400 --> 01:01:45,190
evergreen kind of way

01:01:41,830 --> 01:01:45,190
so that's it

01:01:50,700 --> 01:01:55,380
the keynote is over so I believe you are

01:01:54,090 --> 01:01:57,480
all required to stay in your seats and

01:01:55,380 --> 01:01:58,560
receive awesome free stuff I hope they

01:01:57,480 --> 01:02:01,170
have some more of those microwave egg

01:01:58,560 --> 01:02:03,060
cookers coming up and and that's it

01:02:01,170 --> 01:02:04,950
tweet us if you have any any you know

01:02:03,060 --> 01:02:08,090
needs questions you want to make us feel

01:02:04,950 --> 01:02:08,090
better about ourselves that helps too

01:02:18,320 --> 01:02:23,970
I'm bringing my twin brother up here did

01:02:22,380 --> 01:02:30,660
you anyone see my twin brother yesterday

01:02:23,970 --> 01:02:35,520
hi that's my twin brother Dave his name

01:02:30,660 --> 01:02:37,950
is Joel he's my best buddy this doesn't

01:02:35,520 --> 01:02:44,960
have a name on it okay we're gonna do a

01:02:37,950 --> 01:02:49,080
lot of prizes quick this Sean Makani

01:02:44,960 --> 01:02:56,910
it's a shot all right free keyboard for

01:02:49,080 --> 01:03:00,140
zonas Shia Jima GA I messed that New

01:02:56,910 --> 01:03:00,140
Hope yesterday - all right

01:03:00,860 --> 01:03:14,670
Eric daesil

01:03:05,210 --> 01:03:16,320
it's a Darth Vader bill the bear that's

01:03:14,670 --> 01:03:21,210
got Joe Eames written all over it

01:03:16,320 --> 01:03:29,160
okay the veggetti another veggetti new

01:03:21,210 --> 01:03:36,540
inbox veggetti levi howa howa Levi where

01:03:29,160 --> 01:03:38,340
Zeeshan he's not here it only comes find

01:03:36,540 --> 01:03:38,910
me bro it's a veggetti you can let him

01:03:38,340 --> 01:03:43,860
have it

01:03:38,910 --> 01:03:50,310
no no no leave I leave sweet you to a

01:03:43,860 --> 01:03:53,610
first boss Mark Liu mark Lego said bro

01:03:50,310 --> 01:03:58,250
Star Wars Lego set Dave go ahead alright

01:03:53,610 --> 01:04:03,780
so another black widow for Zhi Shan

01:03:58,250 --> 01:04:04,680
McCarney this is Bartlet okay the

01:04:03,780 --> 01:04:07,440
veggetti bro

01:04:04,680 --> 01:04:10,410
Oh another taco pedia gotta have one of

01:04:07,440 --> 01:04:13,140
those Brian Greg just come up and get

01:04:10,410 --> 01:04:16,440
them job Brian

01:04:13,140 --> 01:04:18,240
oh yeah so we have a monopoly going on

01:04:16,440 --> 01:04:20,970
right now in the in the bubble machine

01:04:18,240 --> 01:04:22,760
business so we gotta have some

01:04:20,970 --> 01:04:28,920
competition

01:04:22,760 --> 01:04:37,860
yakov Jakov or on ski that is a cool

01:04:28,920 --> 01:04:38,760
name you cover Iran ski yeah Jakov no

01:04:37,860 --> 01:04:44,460
still sleeping

01:04:38,760 --> 01:04:51,630
party too hard alright Palmer ears pulse

01:04:44,460 --> 01:04:53,530
Pierce its Paul did you make a noise it

01:04:51,630 --> 01:05:01,480
was a week bro

01:04:53,530 --> 01:05:04,980
all right yes first one to get up on the

01:05:01,480 --> 01:05:13,210
stage gets the bubble machine draws Cho

01:05:04,980 --> 01:05:18,580
draws check we have a winner

01:05:13,210 --> 01:05:20,710
a Yeti what the world's newest bubbler

01:05:18,580 --> 01:05:24,940
here you go buddy let me get you some so

01:05:20,710 --> 01:05:27,970
Raj check hold on more pockets shot shot

01:05:24,940 --> 01:05:30,520
pocket pocket shot you're gonna make a

01:05:27,970 --> 01:05:36,580
movie bubbles we're gonna do it okay

01:05:30,520 --> 01:05:37,720
Gordon Baucus Gordon a gentleman made

01:05:36,580 --> 01:05:39,730
some noises thank you

01:05:37,720 --> 01:05:41,650
oh we read this name yesterday but they

01:05:39,730 --> 01:05:44,580
weren't there we'll try again I just did

01:05:41,650 --> 01:05:49,660
it again you did this one yeah no answer

01:05:44,580 --> 01:05:51,900
Jeffrey bought but Boris what is this

01:05:49,660 --> 01:05:51,900
thing

01:05:53,069 --> 01:05:58,709
oh yeah it's for your desk it's like an

01:05:56,160 --> 01:06:02,309
exercise stand it could give a balance

01:05:58,709 --> 01:06:05,969
that are you Marcus did you see how far

01:06:02,309 --> 01:06:07,799
Ward's little it signified State House

01:06:05,969 --> 01:06:08,279
the president fluid stands then for your

01:06:07,799 --> 01:06:13,319
desk

01:06:08,279 --> 01:06:19,459
that's all silk yeah outfit Remmy car

01:06:13,319 --> 01:06:19,459
part Remmy crappers

01:06:21,400 --> 01:06:28,780
Remy Remy make a noise seriously all

01:06:27,190 --> 01:06:31,780
right you made it this is a remote

01:06:28,780 --> 01:06:35,770
control paper airplane device throw it

01:06:31,780 --> 01:06:37,660
on your airplanes and it's fine boy okay

01:06:35,770 --> 01:06:42,310
you're gonna have to do a demo tomorrow

01:06:37,660 --> 01:06:46,240
of that Brian Miller gets a what is this

01:06:42,310 --> 01:06:48,250
a quick sit what's a quick set so to

01:06:46,240 --> 01:06:51,940
build your house it's like four tile

01:06:48,250 --> 01:06:53,830
it's like mortar for tile wait I don't

01:06:51,940 --> 01:06:55,390
know what it is manual it dude I write

01:06:53,830 --> 01:06:58,260
code I don't know how to do this kind of

01:06:55,390 --> 01:07:02,740
stuff quick set for Brian Miller

01:06:58,260 --> 01:07:07,350
hello all right congrats on the hardware

01:07:02,740 --> 01:07:10,660
stuff Rahul Verma another one of these

01:07:07,350 --> 01:07:13,410
cell phone projector cubes these things

01:07:10,660 --> 01:07:20,070
are pretty pretty killer Rahul Verma

01:07:13,410 --> 01:07:24,360
made some noise all right Mike you got a

01:07:20,070 --> 01:07:27,610
Chromebook yeah Mike will forget forget

01:07:24,360 --> 01:07:29,890
this you man Congrats everyone Dave

01:07:27,610 --> 01:07:34,480
couple of headphones Chris winters and

01:07:29,890 --> 01:07:37,390
Travis Tidwell some Sony headphones if

01:07:34,480 --> 01:07:42,040
they make noise there's so many people

01:07:37,390 --> 01:07:49,290
in this room how are they not here no

01:07:42,040 --> 01:07:54,430
that's zero Dave's - yeah Mike Chris

01:07:49,290 --> 01:07:56,910
Mike all right he you say these coming

01:07:54,430 --> 01:07:56,910
are you Mike

01:07:58,610 --> 01:08:14,610
Travis no all right Anthony Humes there

01:08:05,010 --> 01:08:17,160
you go Travis Anthony Humes alright man

01:08:14,610 --> 01:08:21,180
that's pretty cute got Nick I want this

01:08:17,160 --> 01:08:22,830
keyboard man the chroma key warned

01:08:21,180 --> 01:08:24,420
someone showed me a slack integration

01:08:22,830 --> 01:08:30,330
where your friends can change your

01:08:24,420 --> 01:08:31,620
keyboard colors okay Ryan burr gets this

01:08:30,330 --> 01:08:37,319
adorable little thing

01:08:31,620 --> 01:08:44,400
Wow okay wow this is legit Daniel

01:08:37,319 --> 01:08:48,870
Herrmann $100 Amazon yeah that's nothing

01:08:44,400 --> 01:08:50,900
compared to Tupac Parikh you got $500 to

01:08:48,870 --> 01:08:53,740
Amazon

01:08:50,900 --> 01:08:56,930
we're giving this away is this you so

01:08:53,740 --> 01:08:59,390
legally I can't do crowd surfing at the

01:08:56,930 --> 01:09:05,600
conference but this thing can so here we

01:08:59,390 --> 01:09:06,230
go keep setting it or you keeping it you

01:09:05,600 --> 01:09:12,470
can have it

01:09:06,230 --> 01:09:13,970
yes that's my stop hey bro how many

01:09:12,470 --> 01:09:20,410
light sabers did you get at the party

01:09:13,970 --> 01:09:20,410
last night yeah - that's cute

01:09:20,830 --> 01:09:28,720
Terry Lemoore what what you do

01:09:24,340 --> 01:09:33,050
damn you guys man yeah Terry leave more

01:09:28,720 --> 01:09:36,380
as you Congrats on dude I wanted that

01:09:33,050 --> 01:09:37,790
which is why you got it it's like a cool

01:09:36,380 --> 01:09:39,140
switch for your house with built-in

01:09:37,790 --> 01:09:41,620
streaming audio and stuff or a video

01:09:39,140 --> 01:09:48,890
sorry okay we got a GoPro for Street

01:09:41,620 --> 01:09:50,960
r-ranma Lincoln okay we're not checking

01:09:48,890 --> 01:09:57,350
names so really anybody could just come

01:09:50,960 --> 01:10:02,510
up with a grip Sam groves are you saying

01:09:57,350 --> 01:10:05,120
you look like Bonnie Sam groves you got

01:10:02,510 --> 01:10:05,650
at Esalen a servo pack it's pretty

01:10:05,120 --> 01:10:13,880
killer

01:10:05,650 --> 01:10:19,810
Matt Davis need his headphones Luke Luke

01:10:13,880 --> 01:10:24,560
fogging jitter yeah no I did it

01:10:19,810 --> 01:10:26,510
are you Luke are you look oh man I can't

01:10:24,560 --> 01:10:30,890
say that

01:10:26,510 --> 01:10:32,730
zoodles Aaron look who won this one Oh

01:10:30,890 --> 01:10:35,730
Marco Marco

01:10:32,730 --> 01:10:39,120
buddy is Marcos Marcos are you here to

01:10:35,730 --> 01:10:42,450
sleep sing like a champ so I work with

01:10:39,120 --> 01:10:44,850
Marcos by promise we didn't rig this K

01:10:42,450 --> 01:10:53,130
Marcos we'll save this for you hey did

01:10:44,850 --> 01:10:58,340
you give away mark Davis's hey damn I

01:10:53,130 --> 01:11:02,460
knew that server back james Fiegel cycle

01:10:58,340 --> 01:11:06,170
Jimmy alright it's another Tesla with a

01:11:02,460 --> 01:11:09,890
servo pack have you ever used a Tesla

01:11:06,170 --> 01:11:13,770
they're really easy to see use all right

01:11:09,890 --> 01:11:17,600
Craig Trudeau I'll do this is the Huawei

01:11:13,770 --> 01:11:19,530
watch this is killer Craig are you here

01:11:17,600 --> 01:11:22,190
okay I was gonna give it away because

01:11:19,530 --> 01:11:22,190
this is pretty killer

01:11:23,090 --> 01:11:32,810
okay easier a pocket shot for Ricki

01:11:26,550 --> 01:11:32,810
roller rookie for ya tricky ooh

01:11:33,230 --> 01:11:36,989
the deed is bluetooth headphones these

01:11:35,610 --> 01:11:39,300
originally also works it done well if

01:11:36,989 --> 01:11:39,870
you shoot me with this I've taken it

01:11:39,300 --> 01:11:46,710
back

01:11:39,870 --> 01:11:55,500
ker Whitesides Kurt that all it gets for

01:11:46,710 --> 01:12:01,260
free Kurt okay sit Oh see ya the one the

01:11:55,500 --> 01:12:03,060
build-a-bear you need your official when

01:12:01,260 --> 01:12:04,710
you go through customs there oh yeah

01:12:03,060 --> 01:12:08,040
they'll check for this you really gotta

01:12:04,710 --> 01:12:09,570
have this we'll put it right here if

01:12:08,040 --> 01:12:12,810
you're not embarrassed to come gay so

01:12:09,570 --> 01:12:15,900
Faraday begins now please please please

01:12:12,810 --> 01:12:17,310
join us for the ng family pick those

01:12:15,900 --> 01:12:19,080
that are interested in coming back next

01:12:17,310 --> 01:12:21,090
year fill out a bracket which is

01:12:19,080 --> 01:12:24,060
arbitrary again and if you win

01:12:21,090 --> 01:12:25,500
arbitrarily we will pick you will get

01:12:24,060 --> 01:12:28,170
you a ticket to come back next year so

01:12:25,500 --> 01:12:29,160
anyway have fun have a blast a guide and

01:12:28,170 --> 01:12:31,820
we'll see you guys back here tomorrow

01:12:29,160 --> 01:12:31,820
morning Thanks

01:12:41,010 --> 01:12:43,070

YouTube URL: https://www.youtube.com/watch?v=bSssb9AmiJU


