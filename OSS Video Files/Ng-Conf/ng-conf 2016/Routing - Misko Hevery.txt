Title: Routing - Misko Hevery
Publication date: 2016-05-04
Playlist: ng-conf 2016
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:04,609 --> 00:00:10,889
yes good morning is this mic on is

00:00:07,950 --> 00:00:14,639
working perfect ah well thank you for

00:00:10,889 --> 00:00:16,609
having me guys it's a nice party not

00:00:14,639 --> 00:00:22,220
working okay what did I do

00:00:16,609 --> 00:00:29,400
it's too high in my face is that better

00:00:22,220 --> 00:00:33,930
alright good well I'm misko hevery

00:00:29,400 --> 00:00:35,640
I guess I just got a noon label I used

00:00:33,930 --> 00:00:37,440
to be called I used to say I'm a father

00:00:35,640 --> 00:00:38,610
of angular or the Creator but it's kind

00:00:37,440 --> 00:00:39,660
of like I made the whole thing I didn't

00:00:38,610 --> 00:00:41,370
make the whole thing but I only made

00:00:39,660 --> 00:00:43,829
part of it and then the greater

00:00:41,370 --> 00:00:47,879
community kind of took over I'll go with

00:00:43,829 --> 00:00:51,149
Papa mieszko okay sounds good we're

00:00:47,879 --> 00:00:52,530
outer because turns out router is the

00:00:51,149 --> 00:00:55,649
thing that's on the top and it's kind of

00:00:52,530 --> 00:00:57,870
important but before we go there like

00:00:55,649 --> 00:01:04,399
what is a router it's kind of like the

00:00:57,870 --> 00:01:04,399
question and really

00:01:05,250 --> 00:01:14,250
frosty where is the cable man the

00:01:11,320 --> 00:01:14,250
routers not working

00:01:28,970 --> 00:01:35,729
somebody else did isn't it no she might

00:01:32,990 --> 00:01:39,149
we need a Thunderbolt say we need a

00:01:35,729 --> 00:01:42,270
third we need a third in bulge oh we

00:01:39,149 --> 00:01:48,540
love you too those cables are still in

00:01:42,270 --> 00:01:51,690
release candidates oh here we go

00:01:48,540 --> 00:01:54,179
all right all right so what is the

00:01:51,690 --> 00:01:57,149
router router is the thing that takes

00:01:54,179 --> 00:01:59,280
that thing in at the top of the box and

00:01:57,149 --> 00:02:00,270
parses it and based on that it assembles

00:01:59,280 --> 00:02:01,789
your application right so your

00:02:00,270 --> 00:02:04,770
application is divided into components

00:02:01,789 --> 00:02:06,090
you got lots of them represented here in

00:02:04,770 --> 00:02:07,350
a lot of different colors and the

00:02:06,090 --> 00:02:09,239
routers job is to kind of figure out

00:02:07,350 --> 00:02:10,890
which of the components really matter

00:02:09,239 --> 00:02:12,030
for the user right now and then pull

00:02:10,890 --> 00:02:14,069
them inside of each other in this

00:02:12,030 --> 00:02:17,100
particular case there each component has

00:02:14,069 --> 00:02:20,250
a outlet and a component can be loaded

00:02:17,100 --> 00:02:22,019
into an outlet and so by assembling a

00:02:20,250 --> 00:02:23,579
set of components in the proper order

00:02:22,019 --> 00:02:25,620
you get a particular view of your

00:02:23,579 --> 00:02:27,209
application now the trick we would like

00:02:25,620 --> 00:02:28,739
to do the really important thing about

00:02:27,209 --> 00:02:31,380
the whole thing is that it really would

00:02:28,739 --> 00:02:32,640
like to be able to do it lazily right we

00:02:31,380 --> 00:02:34,200
don't want to load every single

00:02:32,640 --> 00:02:35,280
component out there because there for

00:02:34,200 --> 00:02:37,440
some applications that could be

00:02:35,280 --> 00:02:39,329
literally thousands of them we just want

00:02:37,440 --> 00:02:41,430
to load those set of components that are

00:02:39,329 --> 00:02:42,870
actually needed to render in this

00:02:41,430 --> 00:02:44,610
particular page you know there's been a

00:02:42,870 --> 00:02:45,630
lot of talk about offline compilation

00:02:44,610 --> 00:02:47,700
and how we can make the application

00:02:45,630 --> 00:02:50,790
small and we have focused on this all

00:02:47,700 --> 00:02:52,290
throughout but it turns out that if the

00:02:50,790 --> 00:02:54,390
router doesn't cooperate and the router

00:02:52,290 --> 00:02:55,920
isn't written in a specific way then the

00:02:54,390 --> 00:02:58,140
router will kind of ruin all this hard

00:02:55,920 --> 00:03:00,840
work we have put into place to make sure

00:02:58,140 --> 00:03:02,970
that we can do lazy loading and so what

00:03:00,840 --> 00:03:05,010
I want to talk about the router today is

00:03:02,970 --> 00:03:07,459
how it relates to laser loading and how

00:03:05,010 --> 00:03:10,950
the lazy loading is becomes the enabler

00:03:07,459 --> 00:03:14,790
for the whole building small kinds of

00:03:10,950 --> 00:03:17,130
applications you might have already seen

00:03:14,790 --> 00:03:20,519
this so this is just a regular angular

00:03:17,130 --> 00:03:22,950
component let's see the magical part in

00:03:20,519 --> 00:03:26,720
here is that the out routes annotation

00:03:22,950 --> 00:03:29,040
which specifies which particular routes

00:03:26,720 --> 00:03:30,180
meet which component to be loaded for

00:03:29,040 --> 00:03:32,670
particular routes

00:03:30,180 --> 00:03:34,760
the thing to notice here is that there

00:03:32,670 --> 00:03:37,560
isn't a single place where the whole

00:03:34,760 --> 00:03:38,730
route kind of surface area can be

00:03:37,560 --> 00:03:42,000
discovered

00:03:38,730 --> 00:03:43,470
instead we always only put this the the

00:03:42,000 --> 00:03:45,630
minimalist amount of information

00:03:43,470 --> 00:03:47,940
necessary to process this particular

00:03:45,630 --> 00:03:49,110
component and by doing so we have we

00:03:47,940 --> 00:03:50,670
make sure that we don't have to look at

00:03:49,110 --> 00:03:52,620
a load the whole world right it doesn't

00:03:50,670 --> 00:03:54,870
matter how big your application is it

00:03:52,620 --> 00:03:56,250
only matters which of the set of routes

00:03:54,870 --> 00:03:59,040
are currently active and only those

00:03:56,250 --> 00:04:02,160
routes have to be loaded and and dealt

00:03:59,040 --> 00:04:04,290
with so this is why we place the routing

00:04:02,160 --> 00:04:06,030
information what the component the other

00:04:04,290 --> 00:04:08,370
things to notice is you know there's for

00:04:06,030 --> 00:04:09,650
example and activate which is a life

00:04:08,370 --> 00:04:11,910
cycle hook we'll talk about those later

00:04:09,650 --> 00:04:14,010
we have these things called outlets

00:04:11,910 --> 00:04:15,780
which is where the child components get

00:04:14,010 --> 00:04:17,669
loaded into notice you can have multiple

00:04:15,780 --> 00:04:19,230
outlets they could be named so the

00:04:17,669 --> 00:04:20,640
second one is called arcs route the one

00:04:19,230 --> 00:04:22,680
that has doesn't have a name we usually

00:04:20,640 --> 00:04:23,940
refer to it as a primary route and the

00:04:22,680 --> 00:04:26,430
last thing that router needs to do is

00:04:23,940 --> 00:04:27,810
needs to be able to produce route links

00:04:26,430 --> 00:04:30,270
for you right if you how do i navigate

00:04:27,810 --> 00:04:33,660
from point A to point B in a predictable

00:04:30,270 --> 00:04:35,280
manner and while we discussing all this

00:04:33,660 --> 00:04:36,540
I want to think I want you to think in

00:04:35,280 --> 00:04:40,770
back of your head how does this relate

00:04:36,540 --> 00:04:42,750
to lazy loading so you get a URL well

00:04:40,770 --> 00:04:45,030
the first thing we do is we chop it up

00:04:42,750 --> 00:04:47,820
and into these things we call segments

00:04:45,030 --> 00:04:49,740
and what we built out of this is

00:04:47,820 --> 00:04:52,169
something we called a tree of URL

00:04:49,740 --> 00:04:54,600
segments now the thing to kind of notice

00:04:52,169 --> 00:04:57,419
here is that we can do this operation

00:04:54,600 --> 00:04:58,770
without having zero knowledge about the

00:04:57,419 --> 00:05:00,660
kinds of routes exist in your

00:04:58,770 --> 00:05:03,270
application right so this is independent

00:05:00,660 --> 00:05:06,330
as a result we can defer lazy loading as

00:05:03,270 --> 00:05:07,500
far as possible so we chop it up into

00:05:06,330 --> 00:05:08,669
the URLs segments so you'll be wondering

00:05:07,500 --> 00:05:10,500
why is it called a tree it looks like a

00:05:08,669 --> 00:05:12,240
list right well it's actually a tree

00:05:10,500 --> 00:05:13,560
because we can do fancy kind of things

00:05:12,240 --> 00:05:16,169
so for example here is a more

00:05:13,560 --> 00:05:19,440
complicated route I guess the root route

00:05:16,169 --> 00:05:21,570
here has multiple child segments we can

00:05:19,440 --> 00:05:23,850
encode this tree like structure into the

00:05:21,570 --> 00:05:25,620
URL and oh by the way this is just a

00:05:23,850 --> 00:05:27,270
particular encoding mechanism that we

00:05:25,620 --> 00:05:29,490
ship with angular you're free to write

00:05:27,270 --> 00:05:33,180
your own encoding mechanism for encoding

00:05:29,490 --> 00:05:35,130
these these trees and decoding them in

00:05:33,180 --> 00:05:36,960
here we also have matrix parameters

00:05:35,130 --> 00:05:38,490
matrix parameters are essentially query

00:05:36,960 --> 00:05:41,310
parameters except they're attached to a

00:05:38,490 --> 00:05:42,439
particular segment in a tree so that a

00:05:41,310 --> 00:05:43,759
user has its own sir

00:05:42,439 --> 00:05:45,379
parameters and details can have these

00:05:43,759 --> 00:05:46,849
own set of parameters and the auxilary

00:05:45,379 --> 00:05:49,550
chart can have its own set of parameters

00:05:46,849 --> 00:05:50,809
as well and so we can build this

00:05:49,550 --> 00:05:53,509
constant trees but let's go back to our

00:05:50,809 --> 00:05:55,429
simpler tree which is the most likely

00:05:53,509 --> 00:05:58,399
use case where you just have a list of

00:05:55,429 --> 00:06:00,169
things we have a tree URL segment and as

00:05:58,399 --> 00:06:01,610
I mentioned we can do this all lazily

00:06:00,169 --> 00:06:03,499
without having any knowledge of the

00:06:01,610 --> 00:06:07,339
routes so now we actually want to turn

00:06:03,499 --> 00:06:09,169
this segment into an actual component

00:06:07,339 --> 00:06:11,300
and when I start lazy loading things so

00:06:09,169 --> 00:06:13,069
every application and to do that we need

00:06:11,300 --> 00:06:16,249
to build something we call a route

00:06:13,069 --> 00:06:18,319
segment tree and every application has a

00:06:16,249 --> 00:06:19,969
route route and that one is already

00:06:18,319 --> 00:06:21,800
pre-loaded right there's no lazy loading

00:06:19,969 --> 00:06:23,989
there and there we can look through each

00:06:21,800 --> 00:06:26,029
set of routes and we can say hey which

00:06:23,989 --> 00:06:28,309
one happens to be the one we are

00:06:26,029 --> 00:06:31,489
interested in and so we can scan through

00:06:28,309 --> 00:06:33,949
and say AHA there is a user ID and we

00:06:31,489 --> 00:06:35,959
can match that up with a user and we now

00:06:33,949 --> 00:06:37,849
know that the one two three actually

00:06:35,959 --> 00:06:39,709
belong to the user components so we can

00:06:37,849 --> 00:06:42,019
actually draw kind of a picture around

00:06:39,709 --> 00:06:44,449
it and while the individual yellow boxes

00:06:42,019 --> 00:06:46,939
were called the URL segments the green

00:06:44,449 --> 00:06:50,209
boxes now we call them route segments or

00:06:46,939 --> 00:06:52,309
routing segments and so once we have

00:06:50,209 --> 00:06:54,769
this we can we know that the next

00:06:52,309 --> 00:06:57,169
component is a user component B so user

00:06:54,769 --> 00:06:58,849
component and so now we can lazy load

00:06:57,169 --> 00:07:01,610
the user component and with the user

00:06:58,849 --> 00:07:03,949
component we can now lazy load its set

00:07:01,610 --> 00:07:06,919
of routes and now we've discovered that

00:07:03,949 --> 00:07:11,029
the next section is the details and we

00:07:06,919 --> 00:07:12,589
can recognize the the details as being

00:07:11,029 --> 00:07:14,149
part of the details component and we go

00:07:12,589 --> 00:07:15,919
into the details component not shown

00:07:14,149 --> 00:07:17,360
over here and we can see if there is

00:07:15,919 --> 00:07:19,489
more routes presumably there are none

00:07:17,360 --> 00:07:22,699
and we can now render this particular

00:07:19,489 --> 00:07:24,919
page so there are two phases right

00:07:22,699 --> 00:07:27,349
there's the phase of assembling the URL

00:07:24,919 --> 00:07:29,539
segments and there's the second phase of

00:07:27,349 --> 00:07:31,279
assembling the the route segment tree

00:07:29,539 --> 00:07:32,749
and this is where the recognition

00:07:31,279 --> 00:07:34,879
happens and it's only during the

00:07:32,749 --> 00:07:36,259
recognition phase that lazy loading

00:07:34,879 --> 00:07:39,649
kicks in and we actually start loading

00:07:36,259 --> 00:07:41,509
the components this is what allows us to

00:07:39,649 --> 00:07:46,219
kind of defer the whole thing as far

00:07:41,509 --> 00:07:48,229
back as possible so once we have

00:07:46,219 --> 00:07:50,059
recognized your route we can instantiate

00:07:48,229 --> 00:07:52,430
all the components we can load them to

00:07:50,059 --> 00:07:54,680
the proper route outlets and we can

00:07:52,430 --> 00:07:55,819
start calling lifecycle hooks and so in

00:07:54,680 --> 00:07:57,109
this particular

00:07:55,819 --> 00:07:59,509
I'm just showing one of these hooks

00:07:57,109 --> 00:08:00,619
called an activate and the unactivated

00:07:59,509 --> 00:08:02,089
here you can see it takes the route

00:08:00,619 --> 00:08:04,639
segment and a route segment will contain

00:08:02,089 --> 00:08:08,359
information such as your matrix

00:08:04,639 --> 00:08:09,739
parameters your any positional

00:08:08,359 --> 00:08:13,009
parameters you might have inside of the

00:08:09,739 --> 00:08:15,619
URL it also might contain any other

00:08:13,009 --> 00:08:17,839
information about that particular thing

00:08:15,619 --> 00:08:20,089
only pertinent to your component right

00:08:17,839 --> 00:08:21,889
so the parent component segment will be

00:08:20,089 --> 00:08:23,689
with the parent component not with you

00:08:21,889 --> 00:08:26,659
and there's actually we made sure that

00:08:23,689 --> 00:08:27,949
the route segment is immutable and that

00:08:26,659 --> 00:08:29,509
means that the round segment cannot

00:08:27,949 --> 00:08:31,069
actually have a reference the parent

00:08:29,509 --> 00:08:32,629
component so when you do want to get

00:08:31,069 --> 00:08:34,789
around and say hey I want to know who my

00:08:32,629 --> 00:08:37,459
parent is this is why we also allow to

00:08:34,789 --> 00:08:39,259
pass a tree of segments for you and the

00:08:37,459 --> 00:08:40,579
reason that they're split out is because

00:08:39,259 --> 00:08:42,559
as you navigate throughout the

00:08:40,579 --> 00:08:44,899
application some of the components stay

00:08:42,559 --> 00:08:46,670
or cross navigations because they're you

00:08:44,899 --> 00:08:51,139
know if you go slash user slash details

00:08:46,670 --> 00:08:53,720
or user slash settings then the user

00:08:51,139 --> 00:08:55,160
portion persists between them and so we

00:08:53,720 --> 00:08:56,720
want to make sure that we can we can

00:08:55,160 --> 00:08:59,139
note let you know that the persist by

00:08:56,720 --> 00:09:02,750
always returning you the same segment

00:08:59,139 --> 00:09:04,309
identity but the trees will change as

00:09:02,750 --> 00:09:06,949
you navigate from point A to point B

00:09:04,309 --> 00:09:08,990
with throughout your applications and

00:09:06,949 --> 00:09:10,160
but they do allow you to to navigate

00:09:08,990 --> 00:09:12,949
through so for example if you want to

00:09:10,160 --> 00:09:14,720
have a bread bar at the top and you can

00:09:12,949 --> 00:09:17,059
you wonder how you got there you can ask

00:09:14,720 --> 00:09:21,649
the tree to give you a path of segments

00:09:17,059 --> 00:09:23,870
to the route so now once we have all

00:09:21,649 --> 00:09:25,759
this let's look at how we generate links

00:09:23,870 --> 00:09:27,410
so here's an example of generating a

00:09:25,759 --> 00:09:30,800
link that you can see we can pass in a

00:09:27,410 --> 00:09:32,120
relative path and also a set of

00:09:30,800 --> 00:09:34,610
parameters which become the matrix

00:09:32,120 --> 00:09:36,439
parameters now the it's important to

00:09:34,610 --> 00:09:38,750
recognize that while you can't put

00:09:36,439 --> 00:09:40,069
absolute paths in there we highly

00:09:38,750 --> 00:09:41,930
recommend that all the paths are

00:09:40,069 --> 00:09:43,490
relative because what that allows you to

00:09:41,930 --> 00:09:44,720
do is that these components not become

00:09:43,490 --> 00:09:46,819
reusable and you can move them around

00:09:44,720 --> 00:09:48,620
you can decide oh you know I no longer

00:09:46,819 --> 00:09:49,879
want to have this component in this part

00:09:48,620 --> 00:09:51,740
of the tree I can want to move in

00:09:49,879 --> 00:09:53,269
somewhere else or maybe even have the

00:09:51,740 --> 00:09:56,029
same component in multiple parts of the

00:09:53,269 --> 00:09:58,009
tree or what is oftentimes the case is

00:09:56,029 --> 00:10:01,279
that when you have a application

00:09:58,009 --> 00:10:03,589
sometimes the the developers often have

00:10:01,279 --> 00:10:04,850
like the the inner internal customer

00:10:03,589 --> 00:10:06,500
support kind of version of the

00:10:04,850 --> 00:10:06,960
application where they can pretend to be

00:10:06,500 --> 00:10:08,610
different

00:10:06,960 --> 00:10:10,470
users to see what the user season and

00:10:08,610 --> 00:10:13,320
usually those are in different URLs and

00:10:10,470 --> 00:10:17,700
so these are all reasons why you want to

00:10:13,320 --> 00:10:19,530
make your URLs relative so imagine we

00:10:17,700 --> 00:10:21,540
have two components loaded into each

00:10:19,530 --> 00:10:23,370
other and they both have used and let's

00:10:21,540 --> 00:10:26,040
say you have a rattling in the interview

00:10:23,370 --> 00:10:29,400
one so what we do is we copy the

00:10:26,040 --> 00:10:31,080
existing set of URL segments over

00:10:29,400 --> 00:10:32,820
because that's the context that's what

00:10:31,080 --> 00:10:34,350
we begin right it's kind of like when

00:10:32,820 --> 00:10:35,580
you have it when you say CD because

00:10:34,350 --> 00:10:37,230
essentially what a rattling is this kind

00:10:35,580 --> 00:10:40,260
of like a change directory right so you

00:10:37,230 --> 00:10:42,210
type CD and you say foo it makes no

00:10:40,260 --> 00:10:44,040
sense to talk about what the resulting

00:10:42,210 --> 00:10:46,260
directory is until you know what the

00:10:44,040 --> 00:10:48,960
initial context is from where you

00:10:46,260 --> 00:10:50,370
started and then navigating from and so

00:10:48,960 --> 00:10:54,360
what we do is we copy it over and I

00:10:50,370 --> 00:10:56,610
notice what we're copying over is a is

00:10:54,360 --> 00:10:58,320
the URL segment tree which does not

00:10:56,610 --> 00:10:59,760
require recognition right it doesn't

00:10:58,320 --> 00:11:01,170
require us to lazy load all the

00:10:59,760 --> 00:11:03,300
components so we can generate all these

00:11:01,170 --> 00:11:05,190
links without actually lazy loading them

00:11:03,300 --> 00:11:07,710
and this is again important because you

00:11:05,190 --> 00:11:09,360
want to be able to generate links to too

00:11:07,710 --> 00:11:11,810
deep into your application and you don't

00:11:09,360 --> 00:11:13,650
want to force the loading of that those

00:11:11,810 --> 00:11:17,760
application segments until you actually

00:11:13,650 --> 00:11:20,660
navigate to them and then once we have

00:11:17,760 --> 00:11:24,120
the context we can apply the relative

00:11:20,660 --> 00:11:26,640
kind of a link to it which is the foo

00:11:24,120 --> 00:11:28,950
and so we get you are like that once we

00:11:26,640 --> 00:11:30,930
have transformed the initial URL tree

00:11:28,950 --> 00:11:33,300
into the destination tree we can

00:11:30,930 --> 00:11:38,640
serialize it and be probably going to

00:11:33,300 --> 00:11:40,350
end up with a URL like this now

00:11:38,640 --> 00:11:41,670
similarly if you try the same exact

00:11:40,350 --> 00:11:43,770
operation and you're somewhere else on

00:11:41,670 --> 00:11:45,030
the tree the initial location is going

00:11:43,770 --> 00:11:47,160
to be different right you're gonna start

00:11:45,030 --> 00:11:49,140
with user 1 2 3 details and then you're

00:11:47,160 --> 00:11:50,790
gonna add food to the end and so the

00:11:49,140 --> 00:11:52,710
resulting URL is gonna be different so

00:11:50,790 --> 00:11:53,820
so when you have links it's important to

00:11:52,710 --> 00:11:56,190
realize that these links are always

00:11:53,820 --> 00:11:58,200
relative to some other location inside

00:11:56,190 --> 00:12:00,690
of the application and it's actually a

00:11:58,200 --> 00:12:03,450
benefit that our router here we say that

00:12:00,690 --> 00:12:05,610
the router is fractal which means that

00:12:03,450 --> 00:12:07,620
at any point anywhere where you look

00:12:05,610 --> 00:12:09,180
inside of the application it behaves

00:12:07,620 --> 00:12:13,650
just like any other one and you can nest

00:12:09,180 --> 00:12:16,530
them repeatedly so what's happening in

00:12:13,650 --> 00:12:18,329
here is we start with the URL we run the

00:12:16,530 --> 00:12:19,739
parser a parser is

00:12:18,329 --> 00:12:21,509
think that's pluggable so if you don't

00:12:19,739 --> 00:12:23,670
like the way we parse our URLs you can

00:12:21,509 --> 00:12:27,059
change that and we build up a tree of

00:12:23,670 --> 00:12:29,879
URL segments and notice that all of this

00:12:27,059 --> 00:12:31,889
you know all of these the sections in

00:12:29,879 --> 00:12:33,329
the wide area of the screen do not

00:12:31,889 --> 00:12:34,889
require lazy loading and this is

00:12:33,329 --> 00:12:37,920
important because we can delay it as far

00:12:34,889 --> 00:12:40,170
back as possible we get to the each each

00:12:37,920 --> 00:12:42,179
really a tree of URL segments and then

00:12:40,170 --> 00:12:44,970
we can generate route links to new set

00:12:42,179 --> 00:12:46,679
of tree URL segments those route legs

00:12:44,970 --> 00:12:50,160
the only thing they need is the initial

00:12:46,679 --> 00:12:51,540
context but the context while requiring

00:12:50,160 --> 00:12:53,040
recognition is something that's already

00:12:51,540 --> 00:12:55,170
loaded right you are already on a page

00:12:53,040 --> 00:12:56,489
so you already paid the price of loading

00:12:55,170 --> 00:12:58,439
it so that context release is

00:12:56,489 --> 00:13:01,679
essentially free over there and then

00:12:58,439 --> 00:13:03,689
they generate a new set of URL segment

00:13:01,679 --> 00:13:06,089
trees and then we can ask them to be

00:13:03,689 --> 00:13:08,009
serialized back into URLs which then end

00:13:06,089 --> 00:13:09,899
up inside of your application and both

00:13:08,009 --> 00:13:14,699
the serialization and the parser part is

00:13:09,899 --> 00:13:15,569
over aidable in your application now for

00:13:14,699 --> 00:13:16,799
those of you who've been paying

00:13:15,569 --> 00:13:18,689
attention you should have been

00:13:16,799 --> 00:13:20,249
scratching your head and said but but

00:13:18,689 --> 00:13:21,600
how can you lazy load if you actually

00:13:20,249 --> 00:13:22,919
have a reference over there right

00:13:21,600 --> 00:13:25,379
presumably on the top it says something

00:13:22,919 --> 00:13:28,019
like import simple component from some

00:13:25,379 --> 00:13:30,629
location and you'd be correct this would

00:13:28,019 --> 00:13:33,089
totally break the lazy loading as it is

00:13:30,629 --> 00:13:34,980
right now and this is this is an

00:13:33,089 --> 00:13:37,379
important thing to solve because it's

00:13:34,980 --> 00:13:39,449
the last puzzling piece of how to get to

00:13:37,379 --> 00:13:42,059
lazy loading go so we have route links

00:13:39,449 --> 00:13:45,360
that don't need recognition of the whole

00:13:42,059 --> 00:13:48,629
world of routes we can load them lazily

00:13:45,360 --> 00:13:50,639
we can offline compile them what what do

00:13:48,629 --> 00:13:52,319
we do about this reference so the

00:13:50,639 --> 00:13:54,779
solution to this reference is we take it

00:13:52,319 --> 00:13:57,779
and we quote it we put it in a in a

00:13:54,779 --> 00:13:59,790
string now we have break broken the

00:13:57,779 --> 00:14:01,169
dependency of the root component to the

00:13:59,790 --> 00:14:03,600
child components and this is really what

00:14:01,169 --> 00:14:06,989
enables the the lazy loading of the

00:14:03,600 --> 00:14:08,519
whole magical piece however once you

00:14:06,989 --> 00:14:11,009
have this you have just created yourself

00:14:08,519 --> 00:14:14,399
a new problem and a new problem is how

00:14:11,009 --> 00:14:16,679
do you convert a string to a reference

00:14:14,399 --> 00:14:18,809
and while you might think this is a

00:14:16,679 --> 00:14:20,519
pretty straightforward answers that

00:14:18,809 --> 00:14:23,549
question it actually gets pretty

00:14:20,519 --> 00:14:25,649
complicated quickly because remember

00:14:23,549 --> 00:14:27,029
that the code you shipped the production

00:14:25,649 --> 00:14:30,450
will probably be minified and as a

00:14:27,029 --> 00:14:32,370
result it won't have a simple component

00:14:30,450 --> 00:14:36,180
reference inside instead is gonna be

00:14:32,370 --> 00:14:38,790
mangled into something else and so to do

00:14:36,180 --> 00:14:40,800
that we are ik we are proposing that we

00:14:38,790 --> 00:14:42,630
will have a specific directory structure

00:14:40,800 --> 00:14:44,940
and we'll simply use that string as

00:14:42,630 --> 00:14:47,430
something we pass into system J s to

00:14:44,940 --> 00:14:49,590
load the particular sub module for us

00:14:47,430 --> 00:14:52,170
lazily and then we'll just assume that

00:14:49,590 --> 00:14:53,820
there is a default component or there is

00:14:52,170 --> 00:14:55,170
exactly one component inside of the sub

00:14:53,820 --> 00:14:57,360
module and then we will load that

00:14:55,170 --> 00:14:59,970
component inside of ourselves and we'll

00:14:57,360 --> 00:15:02,460
use that for further navigating and

00:14:59,970 --> 00:15:03,780
endless loading the components and so

00:15:02,460 --> 00:15:06,030
that requires a particular directory

00:15:03,780 --> 00:15:09,600
structure so if you for example have

00:15:06,030 --> 00:15:11,730
these set of routes then our CLI tool

00:15:09,600 --> 00:15:13,620
automatically produces these set of

00:15:11,730 --> 00:15:15,450
directories with notice the plus sign

00:15:13,620 --> 00:15:18,630
over here which is the convention that

00:15:15,450 --> 00:15:22,560
we generate to have the lazy loading

00:15:18,630 --> 00:15:25,350
capabilities available to us and then

00:15:22,560 --> 00:15:27,840
when you quote the component inside of

00:15:25,350 --> 00:15:29,520
the route definition by quoting it you

00:15:27,840 --> 00:15:31,350
break the last piece of link which

00:15:29,520 --> 00:15:33,120
allows the tree shaker to break up your

00:15:31,350 --> 00:15:35,160
application to break it up into modules

00:15:33,120 --> 00:15:37,620
and then have lazy loading take over at

00:15:35,160 --> 00:15:40,170
runtime for the application so then it

00:15:37,620 --> 00:15:41,670
becomes a question for you as to how you

00:15:40,170 --> 00:15:43,170
want to bundle the application you know

00:15:41,670 --> 00:15:45,690
where do you want to put these these

00:15:43,170 --> 00:15:47,130
breaks you can go all the way you know

00:15:45,690 --> 00:15:48,750
from I don't want to deal with it and

00:15:47,130 --> 00:15:50,250
I'm just gonna put reference to over

00:15:48,750 --> 00:15:51,570
there everywhere or you can go the other

00:15:50,250 --> 00:15:53,220
extreme and you say I'm gonna put

00:15:51,570 --> 00:15:56,880
strings everywhere and have the lazy

00:15:53,220 --> 00:16:00,270
loading take over so lazy loading is

00:15:56,880 --> 00:16:02,220
kind of important because I'm sorry the

00:16:00,270 --> 00:16:03,270
routing inside of the lazy loading

00:16:02,220 --> 00:16:05,040
inside of the router is important

00:16:03,270 --> 00:16:06,990
because if we don't have a lazy loading

00:16:05,040 --> 00:16:09,330
router all the hard work we have done

00:16:06,990 --> 00:16:11,640
into making sure that the components

00:16:09,330 --> 00:16:13,290
that the the framework knows how to lazy

00:16:11,640 --> 00:16:15,540
load components that the injector is

00:16:13,290 --> 00:16:18,630
rehear article etc all of that kind of

00:16:15,540 --> 00:16:21,240
comes apart unless the router also plays

00:16:18,630 --> 00:16:23,730
the game in here as well so thank you

00:16:21,240 --> 00:16:24,900
for having me over here my name is Mitch

00:16:23,730 --> 00:16:26,880
go you can find me on Twitter and

00:16:24,900 --> 00:16:30,100
certainly I can say hello if you see me

00:16:26,880 --> 00:16:32,160
in the in the hallway thank you

00:16:30,100 --> 00:16:32,160

YouTube URL: https://www.youtube.com/watch?v=d8yAdeshpcw


