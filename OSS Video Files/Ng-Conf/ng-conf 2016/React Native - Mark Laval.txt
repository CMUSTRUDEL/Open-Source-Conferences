Title: React Native - Mark Laval
Publication date: 2016-05-06
Playlist: ng-conf 2016
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:05,390 --> 00:00:10,469
okay hello I'm very excited to be here

00:00:08,490 --> 00:00:12,420
today to tell you more but Angra - and

00:00:10,469 --> 00:00:15,059
react native so my name is Matt level

00:00:12,420 --> 00:00:16,590
from search engine yet a Madhu's and

00:00:15,059 --> 00:00:18,270
I've been working with jungle a team for

00:00:16,590 --> 00:00:20,100
more than a year now and I'm glad to

00:00:18,270 --> 00:00:23,820
itself and more recently on this

00:00:20,100 --> 00:00:25,560
exciting project so it may sound crazy

00:00:23,820 --> 00:00:27,210
but what I'm going to show you today is

00:00:25,560 --> 00:00:31,050
how you can build mobile applications

00:00:27,210 --> 00:00:33,149
using angular 2 and react native so by

00:00:31,050 --> 00:00:35,550
mobile application I mean truly native

00:00:33,149 --> 00:00:38,250
applications so there is no Cordova

00:00:35,550 --> 00:00:42,690
involved no web use and the dumb really

00:00:38,250 --> 00:00:44,280
native okay and so this is great so it

00:00:42,690 --> 00:00:46,469
works today for iOS and Android

00:00:44,280 --> 00:00:49,350
and hopefully late in the future for

00:00:46,469 --> 00:00:50,969
more platforms so what is where what is

00:00:49,350 --> 00:00:52,680
great that it really allows to do

00:00:50,969 --> 00:00:54,629
cross-platform development with a

00:00:52,680 --> 00:00:57,660
unified developer experience among all

00:00:54,629 --> 00:00:59,969
those different channels so don't bring

00:00:57,660 --> 00:01:02,129
too much so the philosophy behind it is

00:00:59,969 --> 00:01:03,960
not to write the code once and run it

00:01:02,129 --> 00:01:06,240
everywhere that with some magic

00:01:03,960 --> 00:01:09,510
happening somewhere the philosophy here

00:01:06,240 --> 00:01:11,909
is more to learn once so angular 2 and

00:01:09,510 --> 00:01:15,390
to use it everywhere to build many

00:01:11,909 --> 00:01:16,380
applications before going to the

00:01:15,390 --> 00:01:19,740
technical details

00:01:16,380 --> 00:01:21,689
best thing to the best thing is to have

00:01:19,740 --> 00:01:24,810
a look at what can be done with this so

00:01:21,689 --> 00:01:25,710
let's go for demo so what I'm going to

00:01:24,810 --> 00:01:29,220
show you is the kitchen sink

00:01:25,710 --> 00:01:32,340
applications a showcase application so

00:01:29,220 --> 00:01:35,579
on the left you've got us on the right

00:01:32,340 --> 00:01:38,490
Android and so basically as you can see

00:01:35,579 --> 00:01:40,380
we can display text and images native

00:01:38,490 --> 00:01:45,780
text and native images which makes a big

00:01:40,380 --> 00:01:47,040
difference right basically when building

00:01:45,780 --> 00:01:49,890
such applications are going to use

00:01:47,040 --> 00:01:52,560
components and so most of the many of

00:01:49,890 --> 00:01:56,280
them are similar to both platforms so we

00:01:52,560 --> 00:01:59,520
saw text an image but the case for the

00:01:56,280 --> 00:02:00,200
square views that would get on both

00:01:59,520 --> 00:02:02,610
platforms

00:02:00,200 --> 00:02:06,830
businesses text

00:02:02,610 --> 00:02:10,500
what input source or so the text input

00:02:06,830 --> 00:02:12,360
slider the switch the Pickers so that

00:02:10,500 --> 00:02:14,010
even it will look a bit different in

00:02:12,360 --> 00:02:15,750
that case because of each platform has

00:02:14,010 --> 00:02:18,780
its own implementation they're really

00:02:15,750 --> 00:02:20,640
the same component then you've got some

00:02:18,780 --> 00:02:24,090
which are more specific to each platform

00:02:20,640 --> 00:02:26,250
so for example here on iOS you've got

00:02:24,090 --> 00:02:28,590
these activity indicators to progress

00:02:26,250 --> 00:02:32,940
you signal controlled editor at the

00:02:28,590 --> 00:02:36,180
bottom we've got a tab bar so on iOS

00:02:32,940 --> 00:02:40,770
you've got this drawer on the left on

00:02:36,180 --> 00:02:44,010
the side too bad at the top this

00:02:40,770 --> 00:02:48,420
particular page layout on this progress

00:02:44,010 --> 00:02:51,180
bars for example also got map view for

00:02:48,420 --> 00:02:54,239
example and so basically this is where I

00:02:51,180 --> 00:02:56,400
come from the recesses of France race

00:02:54,239 --> 00:03:00,239
and by the sea and between the sea and

00:02:56,400 --> 00:03:02,640
the mountains very nice okay so on top

00:03:00,239 --> 00:03:05,310
of components to video applications we

00:03:02,640 --> 00:03:07,080
need some API is what I could API is the

00:03:05,310 --> 00:03:10,530
things that you called from the from the

00:03:07,080 --> 00:03:11,880
code like an alert for example and again

00:03:10,530 --> 00:03:13,590
some of them are the same on both

00:03:11,880 --> 00:03:16,470
platform you don't need to look

00:03:13,590 --> 00:03:18,209
differently so API is the same some will

00:03:16,470 --> 00:03:23,760
be more specific like this action sheets

00:03:18,209 --> 00:03:27,120
on iOS okay so those API to access some

00:03:23,760 --> 00:03:29,010
information about platform access

00:03:27,120 --> 00:03:32,880
geolocation which doesn't really work

00:03:29,010 --> 00:03:37,620
with emulators but the so long wait for

00:03:32,880 --> 00:03:40,320
example you've got those date pickers or

00:03:37,620 --> 00:03:41,010
time picker so native one which are in

00:03:40,320 --> 00:03:43,049
this case

00:03:41,010 --> 00:03:46,170
AP is so we saw in our us it was a

00:03:43,049 --> 00:03:48,750
component yeah it's more an API so

00:03:46,170 --> 00:03:50,850
basically if you use on users common API

00:03:48,750 --> 00:03:53,910
and components you can really build

00:03:50,850 --> 00:03:57,709
screens or even small applications which

00:03:53,910 --> 00:04:00,450
is very same on iOS and Android

00:03:57,709 --> 00:04:03,480
full to the embassy so I need to go I'm

00:04:00,450 --> 00:04:05,310
not a good designer sorry but this is

00:04:03,480 --> 00:04:07,829
fully working to do MVC and this is a

00:04:05,310 --> 00:04:10,709
very same code the recent template for

00:04:07,829 --> 00:04:12,500
both iOS and Android in that case and

00:04:10,709 --> 00:04:14,990
even there is a feature too

00:04:12,500 --> 00:04:17,959
save and wrote the list of to dues from

00:04:14,990 --> 00:04:20,329
the local storage and again this is same

00:04:17,959 --> 00:04:25,090
API for both platforms so you can do the

00:04:20,329 --> 00:04:27,530
very same thing okay so on top of that

00:04:25,090 --> 00:04:30,260
to build your application you will also

00:04:27,530 --> 00:04:32,540
need to recognize the user actions so

00:04:30,260 --> 00:04:34,250
gestures basically so you just might

00:04:32,540 --> 00:04:38,030
play gong to show that you can recognize

00:04:34,250 --> 00:04:41,030
swipe tap some panning it even works

00:04:38,030 --> 00:04:44,840
with multi-touch events like pinch or

00:04:41,030 --> 00:04:47,690
rotate so being this seems so we're

00:04:44,840 --> 00:04:50,720
reusing the when an homage as a library

00:04:47,690 --> 00:04:52,520
so - and we fill it with basically

00:04:50,720 --> 00:04:54,200
events coming from react native which

00:04:52,520 --> 00:04:56,630
are very low-level events like

00:04:54,200 --> 00:04:58,490
touchstart touchmove at that console and

00:04:56,630 --> 00:05:00,350
so you've got also just you available

00:04:58,490 --> 00:05:04,760
and you can even create your own gesture

00:05:00,350 --> 00:05:12,790
if you want to okay so the next thing is

00:05:04,760 --> 00:05:15,350
a small demo of HTTP for example okay so

00:05:12,790 --> 00:05:18,770
nothing requests can just type something

00:05:15,350 --> 00:05:20,600
get a query Wiki Wikipedia to get a list

00:05:18,770 --> 00:05:25,040
of pages but so what you don't see here

00:05:20,600 --> 00:05:27,620
is that it uses the HTTP module for

00:05:25,040 --> 00:05:30,740
angular 2 with nothing nothing specific

00:05:27,620 --> 00:05:33,770
at all you can really use that in your

00:05:30,740 --> 00:05:36,200
code directly and what you don't see

00:05:33,770 --> 00:05:38,690
also here is that all the navigation

00:05:36,200 --> 00:05:43,130
which is opening on both applications is

00:05:38,690 --> 00:05:45,410
using the router Rooter just completely

00:05:43,130 --> 00:05:50,060
confuse me so in French we say would

00:05:45,410 --> 00:05:53,050
just simply okay so but so basically the

00:05:50,060 --> 00:05:56,120
tool you will use this the router here

00:05:53,050 --> 00:05:58,850
and so even on Android you can plug the

00:05:56,120 --> 00:06:02,750
back button to the rotor and just

00:05:58,850 --> 00:06:05,300
navigate back inside the application and

00:06:02,750 --> 00:06:07,370
even catch the last back button just to

00:06:05,300 --> 00:06:09,200
get confirmation from the user if they

00:06:07,370 --> 00:06:11,270
want to exist the application

00:06:09,200 --> 00:06:14,620
so basically catching the back bottom is

00:06:11,270 --> 00:06:17,900
more like an API from from from Android

00:06:14,620 --> 00:06:21,100
okay so the last part of the demo will

00:06:17,900 --> 00:06:24,200
be this and my experimental animation

00:06:21,100 --> 00:06:26,420
usage the first thing I want you to try

00:06:24,200 --> 00:06:28,700
is to see if we're listening to the

00:06:26,420 --> 00:06:31,610
events from ammaji s and we try to

00:06:28,700 --> 00:06:33,710
update the view immediately so we can do

00:06:31,610 --> 00:06:39,020
something like this and it's quite

00:06:33,710 --> 00:06:42,440
smooth it works on both yeah I should

00:06:39,020 --> 00:06:46,670
welcome both our nightclubs okay and

00:06:42,440 --> 00:06:48,770
then Greg native provided to a polyfill

00:06:46,670 --> 00:06:51,110
of requestanimationframe so that we can

00:06:48,770 --> 00:06:55,450
use directly here so I can take these

00:06:51,110 --> 00:06:55,450
bars and some of them around like that

00:06:55,570 --> 00:07:00,020
so let's try that a bit

00:06:57,650 --> 00:07:01,520
that's distressed as data bits so if I

00:07:00,020 --> 00:07:07,040
tap one of them everything is moving

00:07:01,520 --> 00:07:08,870
around on me and this could smooth on

00:07:07,040 --> 00:07:11,090
both platforms especially on a real

00:07:08,870 --> 00:07:13,700
device but those both have quite simple

00:07:11,090 --> 00:07:16,760
just simple views so lets making a bit

00:07:13,700 --> 00:07:20,150
more complex so let's load a to do MVC

00:07:16,760 --> 00:07:22,070
that we soldiers earlier in each single

00:07:20,150 --> 00:07:24,980
board so that twenty of them and we can

00:07:22,070 --> 00:07:27,740
still animate everything like this so

00:07:24,980 --> 00:07:29,210
you can start you can see and you can

00:07:27,740 --> 00:07:32,690
feel that you're starting to reach some

00:07:29,210 --> 00:07:34,700
kind of limits but there's a big work

00:07:32,690 --> 00:07:37,610
I'm going inside react native itself to

00:07:34,700 --> 00:07:40,250
improve animation performances by moving

00:07:37,610 --> 00:07:42,800
most of the animation into the native

00:07:40,250 --> 00:07:46,940
native side of the with some native

00:07:42,800 --> 00:07:50,660
cards so it's today it's going to be

00:07:46,940 --> 00:07:52,670
even better and so in both cases we're

00:07:50,660 --> 00:07:54,920
still inside a react native application

00:07:52,670 --> 00:07:57,740
so you get access to all the development

00:07:54,920 --> 00:07:59,150
tools from your native so you can get

00:07:57,740 --> 00:08:02,090
back your application in chrome you can

00:07:59,150 --> 00:08:04,670
reload having even live reload you get

00:08:02,090 --> 00:08:07,280
the performance monitor so hot reloading

00:08:04,670 --> 00:08:09,740
is not spotted yet today I'm about the

00:08:07,280 --> 00:08:11,810
inspector so I could have that good hope

00:08:09,740 --> 00:08:13,400
to be able to integrate all gooey inside

00:08:11,810 --> 00:08:15,650
this

00:08:13,400 --> 00:08:18,350
this is so that you would be able to

00:08:15,650 --> 00:08:24,860
inspect your native application with our

00:08:18,350 --> 00:08:27,500
GUI also so very exciting okay so that

00:08:24,860 --> 00:08:29,720
was the demo so now you may wonder do

00:08:27,500 --> 00:08:32,120
you why what kind of card you you're

00:08:29,720 --> 00:08:36,650
going to write to do this this

00:08:32,120 --> 00:08:39,650
application this is a sample of that of

00:08:36,650 --> 00:08:42,380
that it's quite so as you can see just

00:08:39,650 --> 00:08:46,490
from regular to code you get component

00:08:42,380 --> 00:08:49,310
with the selector template your class so

00:08:46,490 --> 00:08:50,959
nothing you can see here so one thing

00:08:49,310 --> 00:08:53,000
though is that you don't for sure you

00:08:50,959 --> 00:08:55,250
don't use HTML but here you've got the

00:08:53,000 --> 00:08:57,620
set this library of components that we

00:08:55,250 --> 00:09:00,620
saw and are going to use here so just

00:08:57,620 --> 00:09:03,080
put on normal angular 2 components with

00:09:00,620 --> 00:09:06,830
input output some action that you can

00:09:03,080 --> 00:09:09,410
execute on them so with reg native 4 so

00:09:06,830 --> 00:09:11,120
there is no CSS already there is but it

00:09:09,410 --> 00:09:12,950
comes with the styling system so it

00:09:11,120 --> 00:09:16,880
looks a bit like CSS because it's JSON

00:09:12,950 --> 00:09:18,940
object without yummy similarity what not

00:09:16,880 --> 00:09:23,870
only one because the property is also

00:09:18,940 --> 00:09:26,900
kind of the same so yeah it's a new

00:09:23,870 --> 00:09:29,150
static system basically but it supports

00:09:26,900 --> 00:09:31,220
absolute positioning and it supports

00:09:29,150 --> 00:09:34,150
flexbox so for you as web developers

00:09:31,220 --> 00:09:37,550
it's super easy to create your layout

00:09:34,150 --> 00:09:41,360
for your application then for the

00:09:37,550 --> 00:09:43,580
gestures nothing fancy you just use tap

00:09:41,360 --> 00:09:45,860
or swipe here in the template and is

00:09:43,580 --> 00:09:47,600
going to go up out of the box and then

00:09:45,860 --> 00:09:49,730
you can use everything from angular 2 or

00:09:47,600 --> 00:09:52,930
the directives you can project knowledge

00:09:49,730 --> 00:09:56,000
you can write component sub components

00:09:52,930 --> 00:09:59,480
everything are the features including

00:09:56,000 --> 00:10:01,250
HTTP and the relative on top of that you

00:09:59,480 --> 00:10:04,910
still get access to everything or the

00:10:01,250 --> 00:10:07,370
react native api's so - ETA is which is

00:10:04,910 --> 00:10:08,990
more utility for example if you wanted

00:10:07,370 --> 00:10:11,330
to create an alert as we saw during the

00:10:08,990 --> 00:10:13,610
demo we will just import alert from

00:10:11,330 --> 00:10:16,580
react native and then new code to allow

00:10:13,610 --> 00:10:18,259
that show with some parameters and it

00:10:16,580 --> 00:10:20,779
works

00:10:18,259 --> 00:10:22,930
so so basically you can build

00:10:20,779 --> 00:10:25,939
applications with angular 2 skills

00:10:22,930 --> 00:10:28,550
learning a set of components a set of

00:10:25,939 --> 00:10:32,779
API is from react native and that's and

00:10:28,550 --> 00:10:35,480
that's it so this is great because it

00:10:32,779 --> 00:10:38,449
really enables you to share code

00:10:35,480 --> 00:10:40,220
basically it's a bit even the ugly

00:10:38,449 --> 00:10:42,740
spaghetti code that you'll write somehow

00:10:40,220 --> 00:10:43,670
but you can shade obviously between iOS

00:10:42,740 --> 00:10:45,589
and Android

00:10:43,670 --> 00:10:49,160
and so even sometimes a template itself

00:10:45,589 --> 00:10:52,009
the view can be shared but on top of

00:10:49,160 --> 00:10:53,870
that you can share a lot of code or so

00:10:52,009 --> 00:10:56,540
between your native application and your

00:10:53,870 --> 00:10:58,819
web application so all the services or

00:10:56,540 --> 00:11:00,319
the can be totally shared even your

00:10:58,819 --> 00:11:02,509
savvy that connects to back-end using

00:11:00,319 --> 00:11:04,279
angular so HTTP module from angular 2

00:11:02,509 --> 00:11:07,160
you can fully share it so you write it

00:11:04,279 --> 00:11:14,029
once test once and you share it across

00:11:07,160 --> 00:11:15,079
web iOS Android okay so now let's have a

00:11:14,029 --> 00:11:20,750
look at how it works

00:11:15,079 --> 00:11:23,059
ready so to understand that first let's

00:11:20,750 --> 00:11:27,350
look at all react native works in

00:11:23,059 --> 00:11:30,319
general with two parts to native one and

00:11:27,350 --> 00:11:32,209
adjust the native part and JavaScript

00:11:30,319 --> 00:11:34,220
parts under native side the two sides

00:11:32,209 --> 00:11:36,410
basically so the menu is ready to get in

00:11:34,220 --> 00:11:38,449
any application and a shadow straight

00:11:36,410 --> 00:11:41,600
which is used for measuring and layout

00:11:38,449 --> 00:11:43,309
so those two threads can access the

00:11:41,600 --> 00:11:46,100
platform API and manipulate the UI

00:11:43,309 --> 00:11:49,370
components and so then on the Jets

00:11:46,100 --> 00:11:50,839
website so and the two side communicates

00:11:49,370 --> 00:11:53,899
was this bridge in the middle

00:11:50,839 --> 00:11:55,670
so just website better thread UNIX right

00:11:53,899 --> 00:11:58,129
in which you can execute any JavaScript

00:11:55,670 --> 00:12:00,439
and so inside the inside the thread

00:11:58,129 --> 00:12:02,779
you've got a set of API switch occurs

00:12:00,439 --> 00:12:05,660
the bridge JavaScript API which I

00:12:02,779 --> 00:12:08,269
exposed basically from JavaScript you

00:12:05,660 --> 00:12:12,019
can add GN access the platform API that

00:12:08,269 --> 00:12:13,870
at the end the UI components so

00:12:12,019 --> 00:12:16,699
basically it means that you can create

00:12:13,870 --> 00:12:19,459
react native application in just vanilla

00:12:16,699 --> 00:12:23,120
JavaScript so this would be a narrow

00:12:19,459 --> 00:12:25,339
world in just vanilla JavaScript so okay

00:12:23,120 --> 00:12:26,750
it's not very developer friendly you

00:12:25,339 --> 00:12:29,850
need to be able to access this UI

00:12:26,750 --> 00:12:34,290
manager and to create views and man

00:12:29,850 --> 00:12:36,660
then manually but it works so no an

00:12:34,290 --> 00:12:38,970
angular 2 side there is a connection

00:12:36,660 --> 00:12:40,980
whether as much as one was mentioning

00:12:38,970 --> 00:12:42,420
this morning where the rendering is

00:12:40,980 --> 00:12:46,199
completely decoupled from the rest of

00:12:42,420 --> 00:12:48,000
the application and so so the

00:12:46,199 --> 00:12:49,709
applications by application I mean the

00:12:48,000 --> 00:12:51,660
crew sees where or the component

00:12:49,709 --> 00:12:53,639
directives dependency injection change

00:12:51,660 --> 00:12:55,319
addiction needs but when it comes to run

00:12:53,639 --> 00:12:58,230
the ring this is delegated to renderer

00:12:55,319 --> 00:13:00,509
which itself is a bit dumb just receive

00:12:58,230 --> 00:13:03,360
instruction to create elements or to

00:13:00,509 --> 00:13:04,050
update them or move them around and

00:13:03,360 --> 00:13:06,449
that's it

00:13:04,050 --> 00:13:08,279
so by default in angular 2 you've got a

00:13:06,449 --> 00:13:09,899
dumb renderer which is able to

00:13:08,279 --> 00:13:13,769
communicate with the Dom so that you

00:13:09,899 --> 00:13:16,709
create your webpages so if we make the 2

00:13:13,769 --> 00:13:18,690
architecture we get this which is

00:13:16,709 --> 00:13:22,259
basically a react native application

00:13:18,690 --> 00:13:23,579
standard one and inside just read we're

00:13:22,259 --> 00:13:26,540
going to execute the angular 2

00:13:23,579 --> 00:13:28,980
application we just special renderer

00:13:26,540 --> 00:13:31,680
which is going which knows how to use

00:13:28,980 --> 00:13:34,019
those API is low-level API to build

00:13:31,680 --> 00:13:37,139
elements and to move them and update

00:13:34,019 --> 00:13:38,790
them in some cases the application like

00:13:37,139 --> 00:13:41,339
in the case of the alert I was

00:13:38,790 --> 00:13:44,459
mentioning the application may access

00:13:41,339 --> 00:13:50,069
the bridge API directly and that's it

00:13:44,459 --> 00:13:53,430
that's how it works so about the project

00:13:50,069 --> 00:13:57,240
we just reached an alpha version last

00:13:53,430 --> 00:13:59,220
month so you can use it today and

00:13:57,240 --> 00:13:59,959
basically are continuing you to get some

00:13:59,220 --> 00:14:02,990
feedback

00:13:59,959 --> 00:14:05,579
Rosenberg's suggests some improvements

00:14:02,990 --> 00:14:07,910
after that the project is that we

00:14:05,579 --> 00:14:10,680
sitting between angular and react native

00:14:07,910 --> 00:14:15,689
so the situation is a bit something like

00:14:10,680 --> 00:14:17,759
this maybe not that extreme for sure but

00:14:15,689 --> 00:14:20,160
the good thing is that those two

00:14:17,759 --> 00:14:21,540
projects are moving fast forward there

00:14:20,160 --> 00:14:24,149
will bring new features almost every

00:14:21,540 --> 00:14:28,439
week and so integrating everything

00:14:24,149 --> 00:14:30,029
together is a is a must is great the

00:14:28,439 --> 00:14:32,590
next big thing will be of hand

00:14:30,029 --> 00:14:35,620
competition so like

00:14:32,590 --> 00:14:37,840
first presented yesterday and so it will

00:14:35,620 --> 00:14:40,870
really boost improve the performances of

00:14:37,840 --> 00:14:43,000
the overall application then the number

00:14:40,870 --> 00:14:45,250
of topics which are of interest for this

00:14:43,000 --> 00:14:48,460
project so the first one is testability

00:14:45,250 --> 00:14:50,350
so it's already quite advanced so today

00:14:48,460 --> 00:14:53,350
it's possible to write pure unit tests

00:14:50,350 --> 00:14:56,110
using poison but just many tests that

00:14:53,350 --> 00:14:58,060
you could run in node.js or with camera

00:14:56,110 --> 00:15:00,040
in your favorite browser which means

00:14:58,060 --> 00:15:03,670
that all the react native part is being

00:15:00,040 --> 00:15:06,460
mutt also there is work input the type

00:15:03,670 --> 00:15:08,200
of end-to-end tests using protractor and

00:15:06,460 --> 00:15:10,240
appium so appium if you don't know it

00:15:08,200 --> 00:15:14,200
it's basically web drivers for native

00:15:10,240 --> 00:15:17,280
application so within this prototype you

00:15:14,200 --> 00:15:20,610
can see that just by the usual

00:15:17,280 --> 00:15:24,190
protractor test but which is driving a

00:15:20,610 --> 00:15:25,720
native application okay so the next

00:15:24,190 --> 00:15:28,420
thing would be performance and

00:15:25,720 --> 00:15:31,540
animations so we saw that we can already

00:15:28,420 --> 00:15:34,870
do basic animations and that performance

00:15:31,540 --> 00:15:35,610
are quite good already today and would

00:15:34,870 --> 00:15:38,380
be improved

00:15:35,610 --> 00:15:40,980
so the first about animations of that

00:15:38,380 --> 00:15:43,810
there is this big work on going inside

00:15:40,980 --> 00:15:45,970
react native so that too because with

00:15:43,810 --> 00:15:48,610
requestanimationframe everything is

00:15:45,970 --> 00:15:50,440
driven by the JavaScript basically and

00:15:48,610 --> 00:15:53,020
so by moving animations really to the

00:15:50,440 --> 00:15:57,210
mat east side of cognitive things would

00:15:53,020 --> 00:15:59,080
be much better I'm for sure this new

00:15:57,210 --> 00:16:02,020
implementation inside vacantly would

00:15:59,080 --> 00:16:03,790
have to be kind of integrated was with

00:16:02,020 --> 00:16:06,220
what matches presented this morning so

00:16:03,790 --> 00:16:10,270
that you can we do the same animations

00:16:06,220 --> 00:16:12,520
for your react native application the

00:16:10,270 --> 00:16:15,670
next topic will be extensibility so we

00:16:12,520 --> 00:16:18,840
saw that react native exposes a number

00:16:15,670 --> 00:16:18,840
of components and api's

00:16:19,030 --> 00:16:23,410
to the users but it does not explode

00:16:21,610 --> 00:16:25,510
everything that exists in native worlds

00:16:23,410 --> 00:16:27,850
the good thing is that reg native can be

00:16:25,510 --> 00:16:29,680
extended and so there is already a

00:16:27,850 --> 00:16:31,980
vibrant community of developers who are

00:16:29,680 --> 00:16:35,170
creating extensions and publishing them

00:16:31,980 --> 00:16:40,360
packages on NPM and so basically artist

00:16:35,170 --> 00:16:42,610
has to work within angular 2 in the last

00:16:40,360 --> 00:16:45,370
tip in the last very exciting topic will

00:16:42,610 --> 00:16:47,890
be Universal Windows platform so last

00:16:45,370 --> 00:16:49,960
month during the f8 conference Microsoft

00:16:47,890 --> 00:16:52,330
and Facebook announced that they will

00:16:49,960 --> 00:16:54,910
bring a support of this platform to

00:16:52,330 --> 00:16:56,740
react native which means that to be

00:16:54,910 --> 00:17:00,870
possible to get applications for Windows

00:16:56,740 --> 00:17:03,640
Phone Windows desktop Xbox or hololens

00:17:00,870 --> 00:17:07,500
so if it works react native it's going

00:17:03,640 --> 00:17:07,500
to work also with angular 2

00:17:08,190 --> 00:17:16,120
okay so feelings to finish this

00:17:12,370 --> 00:17:18,640
presentation so basically you can use

00:17:16,120 --> 00:17:21,580
that today it's ready so that is the

00:17:18,640 --> 00:17:22,840
main repository that you can clone and

00:17:21,580 --> 00:17:24,550
from which you can build those kitchen

00:17:22,840 --> 00:17:27,180
scene application that you saw and look

00:17:24,550 --> 00:17:29,410
at some code all the samples that we saw

00:17:27,180 --> 00:17:33,250
there is some documentation that comes

00:17:29,410 --> 00:17:35,650
with it and there's also a seed project

00:17:33,250 --> 00:17:37,540
which is basically that you can just

00:17:35,650 --> 00:17:40,210
clone and use to start your own

00:17:37,540 --> 00:17:42,010
application so basically include some

00:17:40,210 --> 00:17:44,650
scripts to do the build to run

00:17:42,010 --> 00:17:46,840
application to run unit tests run

00:17:44,650 --> 00:17:52,750
end-to-end tests everything that you

00:17:46,840 --> 00:17:54,370
need basically okay so thank you it was

00:17:52,750 --> 00:17:56,260
a pleasure to be here if you have any

00:17:54,370 --> 00:17:57,820
questions you can ping me on Twitter I

00:17:56,260 --> 00:18:02,310
published rest of the slides there or

00:17:57,820 --> 00:18:02,310

YouTube URL: https://www.youtube.com/watch?v=yDbaihb1eIs


