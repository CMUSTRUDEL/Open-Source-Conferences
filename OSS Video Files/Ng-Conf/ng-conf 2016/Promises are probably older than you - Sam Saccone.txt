Title: Promises are probably older than you - Sam Saccone
Publication date: 2016-05-06
Playlist: ng-conf 2016
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:07,820 --> 00:00:15,379
let me tell you a secret but you have to

00:00:13,920 --> 00:00:19,320
promise me that you're going to keep it

00:00:15,379 --> 00:00:21,150
and if I catch you I think you might get

00:00:19,320 --> 00:00:24,900
into some trouble but then I think we'll

00:00:21,150 --> 00:00:27,570
be okay so I appreciate you waiting cuz

00:00:24,900 --> 00:00:30,810
I know waiting can be really hard so

00:00:27,570 --> 00:00:35,000
here's my secret promises are older than

00:00:30,810 --> 00:00:37,440
me promises are older than the CD

00:00:35,000 --> 00:00:41,700
promises are older than this concept of

00:00:37,440 --> 00:00:44,489
a pc so now you know you know my secret

00:00:41,700 --> 00:00:48,899
and everything's okay so we can resolve

00:00:44,489 --> 00:00:52,469
that we're good to go my name is Sam

00:00:48,899 --> 00:00:58,039
saucony this talk is entitled I promise

00:00:52,469 --> 00:00:58,039
a brief history of the promise I promise

00:00:59,079 --> 00:01:06,110
before we start we need to establish

00:01:03,460 --> 00:01:09,830
this idea of synchronous and

00:01:06,110 --> 00:01:11,450
asynchronous synchronous is something

00:01:09,830 --> 00:01:13,759
that's happening and blocks everything

00:01:11,450 --> 00:01:15,170
else an asynchronous multiple things can

00:01:13,759 --> 00:01:17,509
be going on I'm talking right now you're

00:01:15,170 --> 00:01:19,399
listening it's pretty asynchronous but

00:01:17,509 --> 00:01:22,399
we could talk about this in code and

00:01:19,399 --> 00:01:26,240
that works but it's kind of confusing so

00:01:22,399 --> 00:01:29,840
I want you to imagine yourself driving a

00:01:26,240 --> 00:01:32,470
car you're going 65 miles per hour down

00:01:29,840 --> 00:01:35,149
the expressway talking to your friend

00:01:32,470 --> 00:01:38,259
listening to the radio but not new

00:01:35,149 --> 00:01:41,179
sunglasses it's great cruising along I

00:01:38,259 --> 00:01:44,420
feel this thing in your nose I got

00:01:41,179 --> 00:01:46,130
sneeze I really don't want to sneeze

00:01:44,420 --> 00:01:48,170
right now because I'm driving going

00:01:46,130 --> 00:01:52,429
really fast it's like I'm gonna fight it

00:01:48,170 --> 00:01:54,890
off fight fight fight but you can so you

00:01:52,429 --> 00:01:58,450
sneeze so there you are you're driving

00:01:54,890 --> 00:02:02,509
65 miles per hour your eyes are shut

00:01:58,450 --> 00:02:05,420
your car's still moving you're not

00:02:02,509 --> 00:02:08,239
looking at the road so in that moment

00:02:05,420 --> 00:02:09,979
you're in this sneezing state which I

00:02:08,239 --> 00:02:12,049
would call a synchronous real-world

00:02:09,979 --> 00:02:15,579
state because it doesn't matter what

00:02:12,049 --> 00:02:15,579
you're doing you're sneezing

00:02:16,340 --> 00:02:23,310
okay so we get it now I I wrote some

00:02:21,810 --> 00:02:25,980
code to illustrate this point I was like

00:02:23,310 --> 00:02:36,680
you know javascript is cool but c is

00:02:25,980 --> 00:02:39,450
really cool right so yeah complex code

00:02:36,680 --> 00:02:40,650
so in this program we print hello we

00:02:39,450 --> 00:02:42,810
sleep for a while and then we say

00:02:40,650 --> 00:02:44,340
goodbye and while we're sleeping or

00:02:42,810 --> 00:02:47,460
pause nothing is happening so this is

00:02:44,340 --> 00:02:49,200
like 101 synchronous action encode we

00:02:47,460 --> 00:02:51,540
print we sleep nothing else can be

00:02:49,200 --> 00:02:57,360
executing let me say hello are we say

00:02:51,540 --> 00:02:58,670
goodbye so in 2016 in JavaScript we have

00:02:57,360 --> 00:03:02,580
a lot of options for asynchronous

00:02:58,670 --> 00:03:04,230
operations as you may know if we were to

00:03:02,580 --> 00:03:06,360
open up our council today and we type to

00:03:04,230 --> 00:03:08,520
promise we did promise that resolve

00:03:06,360 --> 00:03:11,340
problems that reject we would get access

00:03:08,520 --> 00:03:16,010
to the school promise object and yeah of

00:03:11,340 --> 00:03:21,570
course I know duh yeah you're right so

00:03:16,010 --> 00:03:24,000
the thing is promises are awesome but I

00:03:21,570 --> 00:03:26,340
want to know where they came from and I

00:03:24,000 --> 00:03:29,180
want to know why I can use them pretty

00:03:26,340 --> 00:03:29,180
much everywhere today

00:03:29,620 --> 00:03:35,830
how did these seven letters that i could

00:03:33,129 --> 00:03:37,659
type you'll touch like a useful api that

00:03:35,830 --> 00:03:39,430
just is supported everywhere like did

00:03:37,659 --> 00:03:43,269
someone in JavaScript you like promise

00:03:39,430 --> 00:03:44,620
sounds good let me just make that so why

00:03:43,269 --> 00:03:48,069
can I do this today so I went to Google

00:03:44,620 --> 00:03:50,500
and I said promises JavaScript and then

00:03:48,069 --> 00:03:54,849
this presentation came up 2009 Ryan doll

00:03:50,500 --> 00:03:57,340
it's like hey everyone here's nodejs and

00:03:54,849 --> 00:03:59,049
as you may be aware no jay s kind of

00:03:57,340 --> 00:04:00,610
like revolutionized the way that we

00:03:59,049 --> 00:04:03,970
write JavaScript we could write on the

00:04:00,610 --> 00:04:05,859
server we could have processes running

00:04:03,970 --> 00:04:08,230
we could run it on our front end it was

00:04:05,859 --> 00:04:11,620
amazing and in his initial presentation

00:04:08,230 --> 00:04:14,890
heey promises so that ok Brian I guess

00:04:11,620 --> 00:04:17,079
you did it so I went to know jazz repo

00:04:14,890 --> 00:04:21,039
and i cloned it down and search the logs

00:04:17,079 --> 00:04:23,080
I found the initial commit in 2009 add

00:04:21,039 --> 00:04:26,199
proms class it's like cool ok what does

00:04:23,080 --> 00:04:28,090
this look like and then I I looked at

00:04:26,199 --> 00:04:31,300
the code

00:04:28,090 --> 00:04:37,000
I said hey Ryan that's that's not a

00:04:31,300 --> 00:04:39,970
promise that's an event emitter and you

00:04:37,000 --> 00:04:41,470
know it it wasn't a promise so I said

00:04:39,970 --> 00:04:43,780
okay so clearly this word came from

00:04:41,470 --> 00:04:45,400
somewhere else and he just kind of half

00:04:43,780 --> 00:04:46,840
implemented it early on and this

00:04:45,400 --> 00:04:49,960
actually got ripped out a note core and

00:04:46,840 --> 00:04:51,370
eventually made it back but it's curious

00:04:49,960 --> 00:04:55,830
okay so where'd this promise thing go

00:04:51,370 --> 00:05:00,580
come from where where did this word

00:04:55,830 --> 00:05:02,320
originated so like anyone does I started

00:05:00,580 --> 00:05:08,530
on a five-month journey to find out the

00:05:02,320 --> 00:05:11,560
answer of course um so it's really okay

00:05:08,530 --> 00:05:13,360
if you don't if you don't get this but i

00:05:11,560 --> 00:05:17,310
found out that promises started in like

00:05:13,360 --> 00:05:19,990
nineteen sixty one and i had all this

00:05:17,310 --> 00:05:21,880
murky paths through multiple languages

00:05:19,990 --> 00:05:23,050
and eventually landed in javascript and

00:05:21,880 --> 00:05:24,610
then in javascript they were like

00:05:23,050 --> 00:05:27,010
continually tweaked until they actually

00:05:24,610 --> 00:05:31,060
matched an implementation in the in the

00:05:27,010 --> 00:05:32,950
90s so this is crazy so i started on the

00:05:31,060 --> 00:05:39,760
path understanding where promises came

00:05:32,950 --> 00:05:42,760
from so in 1961 nasa was busy launching

00:05:39,760 --> 00:05:45,220
chimps into space this this guy's name

00:05:42,760 --> 00:05:47,200
is ham he went to space the mercury

00:05:45,220 --> 00:05:50,729
space program the Russians had just

00:05:47,200 --> 00:05:53,320
launched Sputnik everyone was worried

00:05:50,729 --> 00:05:56,229
America has to catch up so we were

00:05:53,320 --> 00:06:00,039
launching chimps in space and more

00:05:56,229 --> 00:06:03,700
importantly there was a paper published

00:06:00,039 --> 00:06:06,490
on algal and as everyone knows in this

00:06:03,700 --> 00:06:09,729
room I will distort is short for

00:06:06,490 --> 00:06:14,500
algorithmic language computer science

00:06:09,729 --> 00:06:17,950
101 really and this language had a very

00:06:14,500 --> 00:06:20,500
interesting aspect during compile time

00:06:17,950 --> 00:06:22,570
it would take these memory addresses and

00:06:20,500 --> 00:06:25,660
put them somewhere where a value

00:06:22,570 --> 00:06:27,970
eventually got piped into so said this

00:06:25,660 --> 00:06:30,250
funk concept is a piece of coding which

00:06:27,970 --> 00:06:33,070
provides an address that when executed

00:06:30,250 --> 00:06:34,200
it leaves in some standard location so

00:06:33,070 --> 00:06:36,030
what does this mean okay

00:06:34,200 --> 00:06:37,470
I have a memory address and a value

00:06:36,030 --> 00:06:39,960
eventually is going to be there and then

00:06:37,470 --> 00:06:43,350
I can reference to that you okay it

00:06:39,960 --> 00:06:47,280
sounds like some defer the idea and

00:06:43,350 --> 00:06:50,700
you're right it does so I hopped in my

00:06:47,280 --> 00:06:56,460
delorean and I went to 1977 Star Wars

00:06:50,700 --> 00:07:00,530
came out but more importantly there was

00:06:56,460 --> 00:07:02,400
a paper published on futures and futures

00:07:00,530 --> 00:07:05,310
are not the futures you're probably

00:07:02,400 --> 00:07:08,340
thinking of this paper was based on how

00:07:05,310 --> 00:07:10,200
to deal with garbage collection I said

00:07:08,340 --> 00:07:11,490
okay so I read the paper and it was

00:07:10,200 --> 00:07:14,580
confused and so I read it a few more

00:07:11,490 --> 00:07:18,750
times and ok I understand it now or sort

00:07:14,580 --> 00:07:21,510
of so the paper was talking about a way

00:07:18,750 --> 00:07:24,860
to enable fully parallel evaluation of

00:07:21,510 --> 00:07:28,230
arguments to a function okay confusing

00:07:24,860 --> 00:07:31,040
so in a call by future each formal

00:07:28,230 --> 00:07:33,780
parameter is bound to a separate process

00:07:31,040 --> 00:07:35,100
what does that mean okay so if we have a

00:07:33,780 --> 00:07:36,990
function that takes like three arguments

00:07:35,100 --> 00:07:39,690
and to those arguments are a function

00:07:36,990 --> 00:07:41,220
one's a string and we bind each of those

00:07:39,690 --> 00:07:42,990
to a separate process that means that we

00:07:41,220 --> 00:07:45,000
can evaluate all three of those at the

00:07:42,990 --> 00:07:46,850
same time and then sort of aggregate the

00:07:45,000 --> 00:07:49,290
results back together and get output

00:07:46,850 --> 00:07:53,130
yeah that sounds awesome parallel

00:07:49,290 --> 00:07:55,590
valuation like web workers cool but this

00:07:53,130 --> 00:07:57,920
is in 1977 so people were thinking about

00:07:55,590 --> 00:07:57,920
this

00:07:58,040 --> 00:08:08,780
so we hop forward 1995 and we have this

00:08:04,610 --> 00:08:11,560
idea of a dual-channel jewel was a

00:08:08,780 --> 00:08:14,630
mostly academic programming language and

00:08:11,560 --> 00:08:16,400
the idea was for every operation that

00:08:14,630 --> 00:08:19,670
you would do you were communicating with

00:08:16,400 --> 00:08:23,270
the server so we had an array server a

00:08:19,670 --> 00:08:25,220
string server and we would communicate

00:08:23,270 --> 00:08:27,410
and I would say hey array server can cat

00:08:25,220 --> 00:08:28,730
this value string server slice this

00:08:27,410 --> 00:08:31,940
string and it would give me a response

00:08:28,730 --> 00:08:34,880
and in that way a jewel computation

00:08:31,940 --> 00:08:38,690
could be modeled as a data flow spread

00:08:34,880 --> 00:08:40,400
out through space which is up said L

00:08:38,690 --> 00:08:42,440
that's cool okay so we're sending these

00:08:40,400 --> 00:08:44,510
messages to servers and then getting

00:08:42,440 --> 00:08:47,270
responses via this channel thing which

00:08:44,510 --> 00:08:49,790
is omnidirectional pipeline said yeah

00:08:47,270 --> 00:08:51,620
that sounds like sounds a lot like a

00:08:49,790 --> 00:08:57,320
promise or like a stream or an

00:08:51,620 --> 00:09:01,550
observable 1995 all right in 1997

00:08:57,320 --> 00:09:05,300
skymark miller who works at google now

00:09:01,550 --> 00:09:07,490
actually implemented and wrote this

00:09:05,300 --> 00:09:10,400
white paper on this language called E

00:09:07,490 --> 00:09:12,710
and E was a watershed moment for

00:09:10,400 --> 00:09:14,690
promises sort of coined the term and

00:09:12,710 --> 00:09:17,900
every promise implementation from then

00:09:14,690 --> 00:09:20,060
was based on he he was the first non

00:09:17,900 --> 00:09:22,250
blocking promise implementation so it

00:09:20,060 --> 00:09:23,630
means when we would then this work down

00:09:22,250 --> 00:09:26,960
here would never cause the main thread

00:09:23,630 --> 00:09:28,730
to lock up and it had a lot of other

00:09:26,960 --> 00:09:32,279
awesome ideas but like this promise

00:09:28,730 --> 00:09:35,100
concept was spot

00:09:32,279 --> 00:09:37,199
in his paper he had this diagram and

00:09:35,100 --> 00:09:39,480
this diagram probably looks really

00:09:37,199 --> 00:09:42,629
familiar we have this idea of a promise

00:09:39,480 --> 00:09:45,180
it resolves it goes into a resolve state

00:09:42,629 --> 00:09:47,069
or broken state so we tweaked a little

00:09:45,180 --> 00:09:48,870
word a couple of words here and this

00:09:47,069 --> 00:09:56,399
becomes promises today as we know them

00:09:48,870 --> 00:10:00,990
one for one in 1997 okay all right to

00:09:56,399 --> 00:10:03,509
recap out of strange language we started

00:10:00,990 --> 00:10:05,870
with a gaggle had this idea of eventual

00:10:03,509 --> 00:10:08,999
with funks we then went to futures that

00:10:05,870 --> 00:10:11,490
allowed parallel evaluation then we went

00:10:08,999 --> 00:10:13,920
to channels in jewel just I'm talking to

00:10:11,490 --> 00:10:16,139
other servers and then alang which

00:10:13,920 --> 00:10:19,559
formalize this concept of a promise all

00:10:16,139 --> 00:10:22,220
right python all right something

00:10:19,559 --> 00:10:22,220
familiar finally

00:10:22,400 --> 00:10:27,350
Python has this awesome library called

00:10:24,920 --> 00:10:30,470
twisted and twisted has this deferred

00:10:27,350 --> 00:10:32,780
object and deferred objects were

00:10:30,470 --> 00:10:35,060
introduced in 2001 and they attempted to

00:10:32,780 --> 00:10:37,070
me or I promises so I said hey II

00:10:35,060 --> 00:10:39,110
promises these are awesome but I'm going

00:10:37,070 --> 00:10:41,270
to make deferred objects and in some

00:10:39,110 --> 00:10:42,500
ways these deferred swarm promises they

00:10:41,270 --> 00:10:44,840
were deferred objects and deferred

00:10:42,500 --> 00:10:46,280
objects are a callback aggregator so

00:10:44,840 --> 00:10:47,660
basically you push a bunch a sink work

00:10:46,280 --> 00:10:49,910
on to it and it gives you a call back at

00:10:47,660 --> 00:10:53,390
the end when it's done versus a promise

00:10:49,910 --> 00:10:57,260
chain which has got then then then all

00:10:53,390 --> 00:11:00,190
right and when Python did this its

00:10:57,260 --> 00:11:04,580
kicked off this sort of JavaScript port

00:11:00,190 --> 00:11:07,160
revolution I was googling around for

00:11:04,580 --> 00:11:09,130
this deferred reference and I was

00:11:07,160 --> 00:11:12,530
pointed to this library called mochi kit

00:11:09,130 --> 00:11:14,710
by Bob I said oh this is cool this is in

00:11:12,530 --> 00:11:18,380
2005 and you have deferred said hey Bob

00:11:14,710 --> 00:11:20,360
why'd you do this so he responded and he

00:11:18,380 --> 00:11:22,490
said well I was making a website that

00:11:20,360 --> 00:11:25,820
had a ton of network requests and

00:11:22,490 --> 00:11:27,680
manually kind of handling them was a lot

00:11:25,820 --> 00:11:31,190
of work and I really like how twisted

00:11:27,680 --> 00:11:33,830
did it so i ported them to javascript

00:11:31,190 --> 00:11:35,360
and the result of that was this library

00:11:33,830 --> 00:11:41,270
mochi kit which he built for his project

00:11:35,360 --> 00:11:43,550
monkey bot in 2006 dojo implemented

00:11:41,270 --> 00:11:45,350
deferred request that was heavily

00:11:43,550 --> 00:11:50,570
inspired by mochi kit and pythons

00:11:45,350 --> 00:11:54,430
twisted 2006 ten years ago so in this

00:11:50,570 --> 00:12:00,800
case dojo did not actually do it first

00:11:54,430 --> 00:12:03,110
and then in 2007 alex russell began

00:12:00,800 --> 00:12:06,620
porting this deferred request into a

00:12:03,110 --> 00:12:08,060
standalone deferred object so there's a

00:12:06,620 --> 00:12:10,480
mailing list where he says hey I really

00:12:08,060 --> 00:12:13,010
like how mochi kit did it and I like how

00:12:10,480 --> 00:12:14,990
how Python and so I think that this

00:12:13,010 --> 00:12:18,400
deserves to be a standalone thing and in

00:12:14,990 --> 00:12:22,710
that moment dojo had standalone deferred

00:12:18,400 --> 00:12:25,320
in early 2009

00:12:22,710 --> 00:12:30,570
there was a revolution in JavaScript a

00:12:25,320 --> 00:12:31,980
promise revolution it all as I can as I

00:12:30,570 --> 00:12:34,920
could find sort of started with this

00:12:31,980 --> 00:12:37,170
library water can queue and this library

00:12:34,920 --> 00:12:40,160
had one purpose to make interacting with

00:12:37,170 --> 00:12:42,600
JSON endpoints simple in the browser

00:12:40,160 --> 00:12:46,440
this API probably feels somewhat

00:12:42,600 --> 00:12:47,820
familiar to you you create this request

00:12:46,440 --> 00:12:52,380
object and he said hey when you're done

00:12:47,820 --> 00:12:57,120
give me a success and air call back and

00:12:52,380 --> 00:12:59,490
in 2009 chris sep wrote on the common

00:12:57,120 --> 00:13:02,100
j/s mailing list he said hey all these

00:12:59,490 --> 00:13:03,630
libraries have promises or deferred I

00:13:02,100 --> 00:13:05,940
think it'd be really great if commonjs

00:13:03,630 --> 00:13:08,160
and JavaScript as a standard had

00:13:05,940 --> 00:13:10,020
promises and of course it's kicked off

00:13:08,160 --> 00:13:15,390
this massive like shedding moment and

00:13:10,020 --> 00:13:18,900
like 500 responses crazy but this caused

00:13:15,390 --> 00:13:21,570
Chris Cole to take water can queue and

00:13:18,900 --> 00:13:23,520
create a formal Q library that took the

00:13:21,570 --> 00:13:26,370
design decisions of a lying from the

00:13:23,520 --> 00:13:28,320
white paper and bake that in with water

00:13:26,370 --> 00:13:33,180
can queue which created this formal Q

00:13:28,320 --> 00:13:35,000
library and actually I was talking to

00:13:33,180 --> 00:13:37,770
Igor earlier and he said oh yeah

00:13:35,000 --> 00:13:40,920
angular's Q is inspired directly from

00:13:37,770 --> 00:13:43,980
that and so i cloned angular and i went

00:13:40,920 --> 00:13:47,520
way back and i found in 2011 the initial

00:13:43,980 --> 00:13:49,530
commit where he says port q like

00:13:47,520 --> 00:13:52,140
deferred promises inspired from chris

00:13:49,530 --> 00:13:54,120
kyle's q which has direct lineage 2 e

00:13:52,140 --> 00:13:58,260
lang which is really interesting all

00:13:54,120 --> 00:13:59,540
right back to 2009 I dojo deferred we're

00:13:58,260 --> 00:14:03,540
like hey we should hop on this bandwagon

00:13:59,540 --> 00:14:05,379
let's call deferred promises awesome all

00:14:03,540 --> 00:14:08,439
right

00:14:05,379 --> 00:14:11,169
and then in 2009 / 2010 something

00:14:08,439 --> 00:14:14,589
happened that changed my life as a web

00:14:11,169 --> 00:14:16,689
developer jQuery came onto the scene no

00:14:14,589 --> 00:14:20,259
longer did I have to do document that

00:14:16,689 --> 00:14:24,759
query selector whatever i could use

00:14:20,259 --> 00:14:26,889
dollar sign and along with that came a

00:14:24,759 --> 00:14:28,569
baked in deferred object initially

00:14:26,889 --> 00:14:30,459
deferred zin jquery were internal only

00:14:28,569 --> 00:14:32,229
they were used for ready state of the

00:14:30,459 --> 00:14:36,779
browser and network requests but they

00:14:32,229 --> 00:14:41,619
are not exposed and then this happened

00:14:36,779 --> 00:14:43,869
our favorite non-compliant deferred

00:14:41,619 --> 00:14:47,049
object that we've had to wrap so many

00:14:43,869 --> 00:14:53,109
times but it's great because it made

00:14:47,049 --> 00:14:57,519
ajax requests so simple so 2010 and post

00:14:53,109 --> 00:15:01,149
2010 html5 was rocking or at least Paul

00:14:57,519 --> 00:15:02,739
Irish told me so there were all these

00:15:01,149 --> 00:15:05,409
new API so I was like these are great

00:15:02,739 --> 00:15:08,619
web crypto index TV local search fetch

00:15:05,409 --> 00:15:11,169
but they all had different asynchronous

00:15:08,619 --> 00:15:14,769
interfaces fetch had a promise and

00:15:11,169 --> 00:15:16,720
others had event emitter style patterns

00:15:14,769 --> 00:15:18,909
others gave you a node style callback

00:15:16,720 --> 00:15:20,409
with air and data and so used

00:15:18,909 --> 00:15:21,819
individually they were great but when

00:15:20,409 --> 00:15:23,439
you tried to time together you ended up

00:15:21,819 --> 00:15:24,909
with this crazy boilerplate code or you

00:15:23,439 --> 00:15:30,100
have to promise if I everything and it

00:15:24,909 --> 00:15:35,289
was messy so this is where this a plus

00:15:30,100 --> 00:15:39,639
unification sort of came from Dominic an

00:15:35,289 --> 00:15:41,739
engineer at Google and saw this problem

00:15:39,639 --> 00:15:44,019
and saw that the initial promises

00:15:41,739 --> 00:15:46,029
proposal from Chris in the commonjs

00:15:44,019 --> 00:15:47,559
mailing list was like two paragraphs and

00:15:46,029 --> 00:15:49,989
people were basing their implementation

00:15:47,559 --> 00:15:51,489
off of these two paragraphs and like two

00:15:49,989 --> 00:15:54,220
paragraphs really isn't enough to

00:15:51,489 --> 00:15:55,929
describe promises and so everyone's was

00:15:54,220 --> 00:15:59,350
like didn't work together quite right or

00:15:55,929 --> 00:16:02,819
just were broken and this all started

00:15:59,350 --> 00:16:05,649
because in ember I know amber

00:16:02,819 --> 00:16:07,989
implemented a deferred pattern they said

00:16:05,649 --> 00:16:11,999
implements promises a and Dominic saw

00:16:07,989 --> 00:16:15,579
this they said mmm this this isn't right

00:16:11,999 --> 00:16:16,929
he tried it gets close but not quite so

00:16:15,579 --> 00:16:18,680
what I'm going to do because this is

00:16:16,929 --> 00:16:21,260
open source is I'm going to write a test

00:16:18,680 --> 00:16:24,110
and a new page which eventually became a

00:16:21,260 --> 00:16:26,029
plus promises and you can run your

00:16:24,110 --> 00:16:27,470
implementation against my test suite and

00:16:26,029 --> 00:16:29,600
it will tell you what's broken so you

00:16:27,470 --> 00:16:34,370
can fix it so the beauty of open source

00:16:29,600 --> 00:16:36,890
working right there now aplus promises

00:16:34,370 --> 00:16:41,570
in the spec and the test suite resulted

00:16:36,890 --> 00:16:45,560
in 50 plus a plus implementations so you

00:16:41,570 --> 00:16:46,820
could use q with when with a sink and

00:16:45,560 --> 00:16:48,649
all these different libraries together

00:16:46,820 --> 00:16:50,060
and not have to worry about the interop

00:16:48,649 --> 00:16:51,980
between them because they were all a

00:16:50,060 --> 00:16:55,330
plus and that means that the ven method

00:16:51,980 --> 00:17:01,130
is just going to work now this had some

00:16:55,330 --> 00:17:05,270
awesome awesome side effects by or when

00:17:01,130 --> 00:17:06,770
es2015 was cut promises were part of the

00:17:05,270 --> 00:17:08,689
standard and how did we get from this

00:17:06,770 --> 00:17:10,850
place of basically everyone rolling

00:17:08,689 --> 00:17:13,699
their custom own solution to a plus 2

00:17:10,850 --> 00:17:18,439
landing in tc39 well it had to do with

00:17:13,699 --> 00:17:20,120
dominic and dominic kind of pulling the

00:17:18,439 --> 00:17:22,130
community together creating the spec

00:17:20,120 --> 00:17:24,559
getting community by and that promises

00:17:22,130 --> 00:17:27,290
are great everyone likes promises and

00:17:24,559 --> 00:17:28,429
this is a standard way that they should

00:17:27,290 --> 00:17:31,190
work and we can all agree on that

00:17:28,429 --> 00:17:34,429
because initially in 2011 there was

00:17:31,190 --> 00:17:36,230
another promise proposal to tc39 and

00:17:34,429 --> 00:17:38,780
they rejected it they said oh this is

00:17:36,230 --> 00:17:43,309
too academic people will never want this

00:17:38,780 --> 00:17:46,670
and it's not worth adding and so because

00:17:43,309 --> 00:17:49,370
of the a+ revolution tc39 said hey

00:17:46,670 --> 00:17:52,600
people do want this so we should add it

00:17:49,370 --> 00:17:57,620
and that also means that if we have

00:17:52,600 --> 00:17:59,450
promises inside of JavaScript ideally in

00:17:57,620 --> 00:18:02,330
the S 2015 we were supposed to get

00:17:59,450 --> 00:18:04,340
module loading but as we know module

00:18:02,330 --> 00:18:06,920
loading has not yet landed so because

00:18:04,340 --> 00:18:08,690
module loading was going to require some

00:18:06,920 --> 00:18:11,570
sort of requests it should use a promise

00:18:08,690 --> 00:18:14,530
so that's basically why promises landed

00:18:11,570 --> 00:18:14,530
in es2015

00:18:14,750 --> 00:18:17,500
so

00:18:18,909 --> 00:18:23,409
why did I tell you the story of promises

00:18:20,919 --> 00:18:26,919
well for one it's interesting I think

00:18:23,409 --> 00:18:29,409
but it's just another web api but it's a

00:18:26,919 --> 00:18:31,599
web api that was driven by the community

00:18:29,409 --> 00:18:34,570
it's a web api that took inspiration

00:18:31,599 --> 00:18:37,269
from the past whether or not people knew

00:18:34,570 --> 00:18:39,669
it at every step it was drawing directly

00:18:37,269 --> 00:18:43,389
from ideas that were invented in the 60s

00:18:39,669 --> 00:18:46,379
and 70s and the end result is an API

00:18:43,389 --> 00:18:51,249
that everyone loves and we use every day

00:18:46,379 --> 00:18:54,849
so it's important that before we go into

00:18:51,249 --> 00:18:58,419
the future we look to the past so we

00:18:54,849 --> 00:19:00,039
don't create some new mistake but

00:18:58,419 --> 00:19:02,019
instead we end up with this really nice

00:19:00,039 --> 00:19:04,779
API that people have thought about for a

00:19:02,019 --> 00:19:06,309
long time because as we know everything

00:19:04,779 --> 00:19:08,729
in computer science was solved in the

00:19:06,309 --> 00:19:08,729
70s

00:19:08,950 --> 00:19:12,520

YouTube URL: https://www.youtube.com/watch?v=24FzHoAVC10


