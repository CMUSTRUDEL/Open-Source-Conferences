Title: Components, Components, Components!...and Angular 1.5 - Pete Bacon Darwin
Publication date: 2016-05-04
Playlist: ng-conf 2016
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,030 --> 00:00:04,799
hello everyone just going to have a

00:00:02,490 --> 00:00:08,509
couple of

00:00:04,799 --> 00:00:08,509
technical issues with the laptop

00:00:13,650 --> 00:00:21,960
get ready good afternoon my talk is

00:00:20,580 --> 00:00:23,400
entitled components components

00:00:21,960 --> 00:00:24,869
components and I was thinking of doing a

00:00:23,400 --> 00:00:26,460
kind of Obama's marching around the

00:00:24,869 --> 00:00:28,860
stage getting everyone shout components

00:00:26,460 --> 00:00:31,710
but I'm I'm British I'm very reserved so

00:00:28,860 --> 00:00:33,829
I wouldn't do that kind of thing but I

00:00:31,710 --> 00:00:37,620
wanted to ask a question to get started

00:00:33,829 --> 00:00:39,630
who has seen a rocky film hands out

00:00:37,620 --> 00:00:41,730
anyone who's seen a rocket um okay who

00:00:39,630 --> 00:00:44,870
could tell me the name of the main

00:00:41,730 --> 00:00:44,870
character the boxer

00:00:46,540 --> 00:00:51,730
Rocky Balboa yes so it's a pretty easy

00:00:50,050 --> 00:00:53,800
name to remember he's the big fighter

00:00:51,730 --> 00:00:56,500
he's the one everyone knows about okay

00:00:53,800 --> 00:00:58,210
and I like to think about angular two

00:00:56,500 --> 00:01:00,489
which we've heard a lot about today as

00:00:58,210 --> 00:01:04,330
being your Rocky Balboa character okay

00:01:00,489 --> 00:01:09,460
now who could tell me the name of rocky

00:01:04,330 --> 00:01:11,470
Balboa's coach or trainer there's a

00:01:09,460 --> 00:01:12,490
Mickey yeah so it wasn't quite so easy

00:01:11,470 --> 00:01:15,540
to remember I certainly couldn't

00:01:12,490 --> 00:01:18,640
remember had to look it up an IMDB um so

00:01:15,540 --> 00:01:20,320
Mickey is the trainer and he puts a lot

00:01:18,640 --> 00:01:21,850
of hard work in as well but he doesn't

00:01:20,320 --> 00:01:23,140
get many of the plaudits because Rocky's

00:01:21,850 --> 00:01:24,580
the guy in the ring doing all the big

00:01:23,140 --> 00:01:29,410
big hits okay

00:01:24,580 --> 00:01:31,990
so angular one for me is Mickey right in

00:01:29,410 --> 00:01:34,840
Japan in Japanese there's a term called

00:01:31,990 --> 00:01:38,020
sensei and in general terminology it

00:01:34,840 --> 00:01:39,820
means like teacher but it also means the

00:01:38,020 --> 00:01:42,429
one who came before the one who was born

00:01:39,820 --> 00:01:44,110
before and angular one really is the one

00:01:42,429 --> 00:01:46,990
who was born before it was born in like

00:01:44,110 --> 00:01:52,450
2009 but while some of you people might

00:01:46,990 --> 00:01:54,819
still been in high school yet so angular

00:01:52,450 --> 00:01:57,399
one is been around for a long time and I

00:01:54,819 --> 00:02:00,459
think angular 2 has learned a lot from

00:01:57,399 --> 00:02:02,229
angular 1 so I'm going to talk about it

00:02:00,459 --> 00:02:03,789
on today and hopefully even though

00:02:02,229 --> 00:02:06,340
there's a lot of excitement of angular 2

00:02:03,789 --> 00:02:07,509
you can bear with me and appreciate that

00:02:06,340 --> 00:02:10,390
there's some really cool things

00:02:07,509 --> 00:02:14,560
happening in angular 1 still so big

00:02:10,390 --> 00:02:20,040
takeaway from today angular 1.5 this is

00:02:14,560 --> 00:02:20,040
the future of web apps yeah

00:02:22,460 --> 00:02:27,540
okay maybe that's not entirely accurate

00:02:25,310 --> 00:02:29,670
what I probably meant to say was that

00:02:27,540 --> 00:02:32,010
components of the future of web apps and

00:02:29,670 --> 00:02:34,320
what you'll find is that if you look

00:02:32,010 --> 00:02:36,150
across many of the frameworks that are

00:02:34,320 --> 00:02:37,650
kicking around these days they're all

00:02:36,150 --> 00:02:40,050
starting to talk a lot more about

00:02:37,650 --> 00:02:42,209
components than then say twelve months

00:02:40,050 --> 00:02:44,280
even ago but the other thing I'd like

00:02:42,209 --> 00:02:48,120
you to remember is from this talk is

00:02:44,280 --> 00:02:49,770
that components love angular 1.5 or you

00:02:48,120 --> 00:02:51,270
could consider the angular 1.5 lost

00:02:49,770 --> 00:02:56,340
components it's a mutual loving

00:02:51,270 --> 00:02:58,170
relationship okay guys so Who am I my

00:02:56,340 --> 00:03:00,120
name is Pete bacon Darwin I've been the

00:02:58,170 --> 00:03:02,730
lead developer on the angular 1 team for

00:03:00,120 --> 00:03:05,370
about 18 months now and in that time we

00:03:02,730 --> 00:03:08,760
have seen a big change in the way that

00:03:05,370 --> 00:03:11,010
people develop JavaScript front-end

00:03:08,760 --> 00:03:14,940
frameworks or front-end applications

00:03:11,010 --> 00:03:16,650
okay and one where there's three things

00:03:14,940 --> 00:03:20,340
that I think that many of the frameworks

00:03:16,650 --> 00:03:22,500
are starting to converge upon and the

00:03:20,340 --> 00:03:24,690
big one is that you build your apps

00:03:22,500 --> 00:03:28,440
using a component based architecture and

00:03:24,690 --> 00:03:34,410
that these components are formed into a

00:03:28,440 --> 00:03:38,600
tree and that the next thing is that you

00:03:34,410 --> 00:03:41,489
can then use some kind of Rooter to

00:03:38,600 --> 00:03:44,060
dynamically select part of that tree to

00:03:41,489 --> 00:03:46,739
de render at any one point in time and

00:03:44,060 --> 00:03:49,049
finally that very large applications

00:03:46,739 --> 00:03:50,760
really benefit from a single directional

00:03:49,049 --> 00:03:52,650
flow of data through the application

00:03:50,760 --> 00:03:57,090
which allows them to scale and be more

00:03:52,650 --> 00:03:59,970
easily maintained so we've got this tree

00:03:57,090 --> 00:04:01,920
of components but not every component

00:03:59,970 --> 00:04:06,150
has the same job to play in this in the

00:04:01,920 --> 00:04:07,920
application and my thesis for today is

00:04:06,150 --> 00:04:10,380
that there are actually three different

00:04:07,920 --> 00:04:13,110
roles that components can complain in

00:04:10,380 --> 00:04:14,970
then the application I've given them

00:04:13,110 --> 00:04:16,799
completely arbitrary names there's

00:04:14,970 --> 00:04:18,419
various people talking about these kinds

00:04:16,799 --> 00:04:19,799
of things in the industry and they've

00:04:18,419 --> 00:04:20,760
all come up with different names so I'm

00:04:19,799 --> 00:04:22,410
going to try and mention all the

00:04:20,760 --> 00:04:24,419
different possible names but there are

00:04:22,410 --> 00:04:26,160
these three types presentation business

00:04:24,419 --> 00:04:28,560
and view so let's look at each of them

00:04:26,160 --> 00:04:31,020
in turn presentation components so and

00:04:28,560 --> 00:04:32,639
sometimes called dumb components or

00:04:31,020 --> 00:04:33,900
maybe even pure

00:04:32,639 --> 00:04:36,150
opponents which means that they don't

00:04:33,900 --> 00:04:38,400
actually modify the state of the

00:04:36,150 --> 00:04:40,439
application themselves they don't care

00:04:38,400 --> 00:04:42,779
where the data comes from it's given to

00:04:40,439 --> 00:04:44,909
them they then do soft with the user

00:04:42,779 --> 00:04:46,560
interacting with the user and then they

00:04:44,909 --> 00:04:48,060
will emit some kind of output like an

00:04:46,560 --> 00:04:49,319
event or something to say that something

00:04:48,060 --> 00:04:50,969
has happened but they don't know what

00:04:49,319 --> 00:04:54,629
the application is going to do with

00:04:50,969 --> 00:04:56,159
those events business components are

00:04:54,629 --> 00:04:58,349
like the glue between this presentation

00:04:56,159 --> 00:04:59,699
layer and your real business logic which

00:04:58,349 --> 00:05:02,430
might be housed in an angular

00:04:59,699 --> 00:05:04,080
application as services say these guys

00:05:02,430 --> 00:05:05,520
really do know where the data is coming

00:05:04,080 --> 00:05:06,990
from they're responsible for going and

00:05:05,520 --> 00:05:09,330
getting it and then binding it to the

00:05:06,990 --> 00:05:12,300
presentational components they're

00:05:09,330 --> 00:05:14,879
sometimes called smart components they I

00:05:12,300 --> 00:05:17,310
kind of think of them as impure because

00:05:14,879 --> 00:05:20,759
they they do make state changes to the

00:05:17,310 --> 00:05:24,419
application in redux they're called

00:05:20,759 --> 00:05:27,060
container components their job is not to

00:05:24,419 --> 00:05:30,060
interact with the user so much generally

00:05:27,060 --> 00:05:30,960
their role is to render other components

00:05:30,060 --> 00:05:33,749
whether they're other business

00:05:30,960 --> 00:05:35,430
components or maybe they are rendering

00:05:33,749 --> 00:05:37,199
the presentation components and binding

00:05:35,430 --> 00:05:39,539
them up and then finally this is

00:05:37,199 --> 00:05:41,969
probably the most contentious role which

00:05:39,539 --> 00:05:43,229
I haven't seen written about anywhere

00:05:41,969 --> 00:05:45,539
but when I've been thinking about

00:05:43,229 --> 00:05:47,729
components in my applications this kind

00:05:45,539 --> 00:05:50,009
of role keeps coming back and these are

00:05:47,729 --> 00:05:51,960
view components which are specialized

00:05:50,009 --> 00:05:53,939
versions of business components so they

00:05:51,960 --> 00:05:56,939
do know about data but in particular

00:05:53,939 --> 00:05:59,520
they know about the Rueter or they know

00:05:56,939 --> 00:06:01,979
about how to dynamically create this

00:05:59,520 --> 00:06:04,289
tree of components and I think this is

00:06:01,979 --> 00:06:07,139
actually a really useful idea to

00:06:04,289 --> 00:06:08,849
consider and if you think about your

00:06:07,139 --> 00:06:10,680
components in your application and split

00:06:08,849 --> 00:06:11,669
them into these three different ways you

00:06:10,680 --> 00:06:14,159
can actually create much more

00:06:11,669 --> 00:06:18,060
maintainable and understandable

00:06:14,159 --> 00:06:20,370
applications so as anyone who's done any

00:06:18,060 --> 00:06:23,669
work on angular 2 or learning on angular

00:06:20,370 --> 00:06:26,129
2 over the last 12 months would know the

00:06:23,669 --> 00:06:28,349
standard application is about heroes and

00:06:26,129 --> 00:06:31,409
if you've been looking carefully you'll

00:06:28,349 --> 00:06:36,599
know that my application for today is is

00:06:31,409 --> 00:06:38,370
a villainy app because I'm not so tough

00:06:36,599 --> 00:06:39,689
about heroes they were wishy-washy I'm

00:06:38,370 --> 00:06:41,639
much more interested in the villains

00:06:39,689 --> 00:06:44,660
they're more cool so I've created a nice

00:06:41,639 --> 00:06:47,639
application which allows me to

00:06:44,660 --> 00:06:49,050
manage my villains and favorite them and

00:06:47,639 --> 00:06:52,470
change their name so you can see that

00:06:49,050 --> 00:06:53,789
I've got two views here the dashboard

00:06:52,470 --> 00:06:56,970
just shows my favorite ones it could

00:06:53,789 --> 00:06:59,389
have some other sort of widgets on it

00:06:56,970 --> 00:07:02,910
which would display perhaps that the

00:06:59,389 --> 00:07:05,190
debark debacle but the terrible things

00:07:02,910 --> 00:07:06,419
that these guys are going to do and then

00:07:05,190 --> 00:07:07,949
I can actually go and edit my villains

00:07:06,419 --> 00:07:10,470
and I could choose to maybe like some of

00:07:07,949 --> 00:07:12,240
them and I can edit their name and you

00:07:10,470 --> 00:07:14,759
know change that one to poison frog or

00:07:12,240 --> 00:07:17,699
whatever and you'll see that when I blow

00:07:14,759 --> 00:07:20,190
off it it updates so this application is

00:07:17,699 --> 00:07:22,289
built using angular 1 but it's following

00:07:20,190 --> 00:07:23,370
this component based architecture and

00:07:22,289 --> 00:07:25,949
I'm going to describe some of those

00:07:23,370 --> 00:07:27,660
ideas to you today so we're going to

00:07:25,949 --> 00:07:32,220
look at this particular view this

00:07:27,660 --> 00:07:34,889
villainy editing view the components

00:07:32,220 --> 00:07:36,630
that this view is created from including

00:07:34,889 --> 00:07:38,900
my app which is like the overall route

00:07:36,630 --> 00:07:41,310
component and also a my villains

00:07:38,900 --> 00:07:42,509
component these for me are the view

00:07:41,310 --> 00:07:44,490
components these are the ones that

00:07:42,509 --> 00:07:47,610
interact with the Rueter and they are

00:07:44,490 --> 00:07:51,330
responsible for deciding what's

00:07:47,610 --> 00:07:52,710
displayed based on the URL there's a

00:07:51,330 --> 00:07:54,210
might navigation menu which is just a

00:07:52,710 --> 00:07:56,849
simple presentation view it just shows

00:07:54,210 --> 00:07:58,710
the the buttons for navigating but

00:07:56,849 --> 00:08:00,960
interestingly you've got this list of my

00:07:58,710 --> 00:08:02,970
villain components these are

00:08:00,960 --> 00:08:04,199
presentation components they don't know

00:08:02,970 --> 00:08:05,760
anything about where the data is coming

00:08:04,199 --> 00:08:07,530
from my villains is responsible for

00:08:05,760 --> 00:08:13,979
getting that data and binding up to the

00:08:07,530 --> 00:08:16,139
villain the villain component so what's

00:08:13,979 --> 00:08:20,610
angular 1.5 got to say about this well

00:08:16,139 --> 00:08:22,260
angular 1.5 is a combination over the

00:08:20,610 --> 00:08:24,389
last 12 months of a lot of work by the

00:08:22,260 --> 00:08:27,510
angular 1 team some of the guys are here

00:08:24,389 --> 00:08:29,340
today and we've been focusing our

00:08:27,510 --> 00:08:30,840
efforts a lot on trying to close the

00:08:29,340 --> 00:08:31,530
conceptual gap between angular 1 and

00:08:30,840 --> 00:08:34,260
angular 2

00:08:31,530 --> 00:08:35,789
yeah partially because we want to make

00:08:34,260 --> 00:08:37,709
it easier for people to upgrade from

00:08:35,789 --> 00:08:39,270
angular 1 to angular 2 but also I get a

00:08:37,709 --> 00:08:41,279
to start some really cool concepts in it

00:08:39,270 --> 00:08:42,959
and if you use those in angular 1 you're

00:08:41,279 --> 00:08:46,170
going to make better apps your apps are

00:08:42,959 --> 00:08:47,940
going to be better and building

00:08:46,170 --> 00:08:50,970
component based architectures has been a

00:08:47,940 --> 00:08:53,640
big part of that so in angular 1.5 we've

00:08:50,970 --> 00:08:55,829
made it easier to define components to

00:08:53,640 --> 00:08:57,730
create instances of them and to test

00:08:55,829 --> 00:09:00,319
them

00:08:57,730 --> 00:09:02,690
so that if you think about what a

00:09:00,319 --> 00:09:05,720
component is in angular one really it's

00:09:02,690 --> 00:09:07,550
just an isolated element component with

00:09:05,720 --> 00:09:08,690
a template and maybe a controller you've

00:09:07,550 --> 00:09:10,399
been able to create these kinds of

00:09:08,690 --> 00:09:12,769
things since angular 1.2 or maybe even

00:09:10,399 --> 00:09:15,980
earlier if you can jump through the

00:09:12,769 --> 00:09:17,120
right hoops and doesn't it like there's

00:09:15,980 --> 00:09:18,500
nothing particularly special about it

00:09:17,120 --> 00:09:20,569
but it's a right pain to write them as a

00:09:18,500 --> 00:09:23,540
lot too boilerplate code and you have to

00:09:20,569 --> 00:09:25,430
put in lots of things to do with binding

00:09:23,540 --> 00:09:27,110
to controllers or whatever so we decided

00:09:25,430 --> 00:09:29,810
to create this component definition

00:09:27,110 --> 00:09:33,199
helper which using sensible defaults

00:09:29,810 --> 00:09:35,959
allows you to create your components

00:09:33,199 --> 00:09:37,819
with almost like no boilerplate at all

00:09:35,959 --> 00:09:39,949
and in fact from the vast majority of

00:09:37,819 --> 00:09:43,850
components you only have to give it a

00:09:39,949 --> 00:09:45,079
name in this case my component you would

00:09:43,850 --> 00:09:46,279
provide it a template because almost

00:09:45,079 --> 00:09:48,589
every component is going to need a

00:09:46,279 --> 00:09:51,410
template some bindings and your

00:09:48,589 --> 00:09:53,000
controller and in some cases like in a

00:09:51,410 --> 00:09:57,110
business component you might not even

00:09:53,000 --> 00:09:59,089
have any bindings so we've got this

00:09:57,110 --> 00:10:00,350
component that we can define easily but

00:09:59,089 --> 00:10:03,910
they need to interact with the world

00:10:00,350 --> 00:10:06,170
around them and there are three ways

00:10:03,910 --> 00:10:07,550
basically that you can interact from

00:10:06,170 --> 00:10:09,019
your components so I've got a component

00:10:07,550 --> 00:10:11,389
here it's got a parent component that

00:10:09,019 --> 00:10:13,730
contains it it's got a sibling directive

00:10:11,389 --> 00:10:15,410
like you know might have like a ng model

00:10:13,730 --> 00:10:18,560
something and then it wants to talk to a

00:10:15,410 --> 00:10:20,509
service so the three different ways that

00:10:18,560 --> 00:10:22,189
you can communicate in angular one

00:10:20,509 --> 00:10:24,620
component is through input and output

00:10:22,189 --> 00:10:27,800
bindings which are talking to the

00:10:24,620 --> 00:10:29,660
containing app component dependency

00:10:27,800 --> 00:10:32,029
injection obviously where we get a hold

00:10:29,660 --> 00:10:35,000
of our services and also requiring all

00:10:32,029 --> 00:10:37,550
the directives in so the input and

00:10:35,000 --> 00:10:40,430
output bindings these are just basically

00:10:37,550 --> 00:10:42,459
like the scope isolated scope bindings

00:10:40,430 --> 00:10:45,589
that we know and love from angular one

00:10:42,459 --> 00:10:48,560
but in angular in angular 1.5 or in

00:10:45,589 --> 00:10:50,600
components we automatically bind these

00:10:48,560 --> 00:10:53,060
to the controller for you which is nice

00:10:50,600 --> 00:10:56,420
we also expose the controller directly

00:10:53,060 --> 00:10:59,060
on to the template using dollar ctrl so

00:10:56,420 --> 00:11:02,329
immediately you have access to your

00:10:59,060 --> 00:11:05,240
bound inputs and output on the template

00:11:02,329 --> 00:11:07,550
and you can see here that I'm rendering

00:11:05,240 --> 00:11:08,889
the first name input and I'm also then

00:11:07,550 --> 00:11:10,959
triggering the like

00:11:08,889 --> 00:11:12,249
output mail notice if you've not been

00:11:10,959 --> 00:11:14,679
following along we've actually added a

00:11:12,249 --> 00:11:16,689
new kind of binding in the angular 1.5

00:11:14,679 --> 00:11:19,989
which we call in one way and what this

00:11:16,689 --> 00:11:22,149
means is that when you bind to the the

00:11:19,989 --> 00:11:24,129
input any changes on the outside get

00:11:22,149 --> 00:11:25,540
propagated inside but if you change the

00:11:24,129 --> 00:11:27,279
value on the inside it's not going to

00:11:25,540 --> 00:11:31,149
get propagated outwards and this is

00:11:27,279 --> 00:11:32,679
obviously a key to being able to create

00:11:31,149 --> 00:11:34,749
this one directional data flow that I

00:11:32,679 --> 00:11:36,129
talked about at the beginning you have

00:11:34,749 --> 00:11:37,749
to remember though of course that if

00:11:36,129 --> 00:11:39,489
you're passing an object through and

00:11:37,749 --> 00:11:40,869
this is true in angular 2 as well if you

00:11:39,489 --> 00:11:42,459
change the properties on that object

00:11:40,869 --> 00:11:43,929
it's going to change wherever it's

00:11:42,459 --> 00:11:48,189
reference so you have to be careful

00:11:43,929 --> 00:11:49,540
about that dependency injection is still

00:11:48,189 --> 00:11:51,879
pretty much as normal but what you'll

00:11:49,540 --> 00:11:53,290
notice when I have the component

00:11:51,879 --> 00:11:55,749
definition up is that we no longer

00:11:53,290 --> 00:11:57,879
require you to put in a factory function

00:11:55,749 --> 00:11:59,799
around the directive definition object

00:11:57,879 --> 00:12:01,720
the component definition object just

00:11:59,799 --> 00:12:03,609
goes straight in so that means we've

00:12:01,720 --> 00:12:05,679
actually moved some of the dependency

00:12:03,609 --> 00:12:08,109
injection into the things that need it

00:12:05,679 --> 00:12:10,540
obviously we as always we can inject

00:12:08,109 --> 00:12:12,790
into the controller but if you're

00:12:10,540 --> 00:12:17,199
defining the template via function then

00:12:12,790 --> 00:12:18,579
that's also now injectable as well and

00:12:17,199 --> 00:12:20,079
finally required directive so we've

00:12:18,579 --> 00:12:21,910
always been able to require directives

00:12:20,079 --> 00:12:24,790
ever since controllers were added to

00:12:21,910 --> 00:12:27,730
directives but it was always a bit of a

00:12:24,790 --> 00:12:30,069
pain to do that in a direct in an

00:12:27,730 --> 00:12:31,389
angular 1.4 directive say because you

00:12:30,069 --> 00:12:33,610
would have to have a post linking

00:12:31,389 --> 00:12:35,889
function which brought in the required

00:12:33,610 --> 00:12:37,209
of directives you don't have to attach

00:12:35,889 --> 00:12:38,470
those to the controller and then

00:12:37,209 --> 00:12:40,149
probably trigger some function on the

00:12:38,470 --> 00:12:44,259
controller to tell it that it's actually

00:12:40,149 --> 00:12:46,480
now got those things so we've updated

00:12:44,259 --> 00:12:48,040
the required property on the directive

00:12:46,480 --> 00:12:49,959
definition object and also obviously on

00:12:48,040 --> 00:12:53,439
the component definition object you can

00:12:49,959 --> 00:12:55,319
now pass in a hash object and the value

00:12:53,439 --> 00:12:57,639
of the hash object is the require

00:12:55,319 --> 00:12:59,619
definition which tells us that in this

00:12:57,639 --> 00:13:03,309
case we want to bring in the tab list

00:12:59,619 --> 00:13:06,100
directive and the key will now be

00:13:03,309 --> 00:13:08,199
matched to a property on the controller

00:13:06,100 --> 00:13:10,389
so then inside my controller I have

00:13:08,199 --> 00:13:14,249
immediate access to those required

00:13:10,389 --> 00:13:16,660
directives you can see here also that

00:13:14,249 --> 00:13:18,850
I'm actually accessing this inside a

00:13:16,660 --> 00:13:21,810
thing called Dollard on in it so what

00:13:18,850 --> 00:13:24,510
does that mean in angular 2

00:13:21,810 --> 00:13:26,070
there is a concept of component

00:13:24,510 --> 00:13:27,930
lifecycle hooks and we've actually

00:13:26,070 --> 00:13:30,180
implemented a load of those in angular 1

00:13:27,930 --> 00:13:33,000
as well dollar on in it that you just

00:13:30,180 --> 00:13:34,830
saw this one gets called at the time

00:13:33,000 --> 00:13:36,120
when all of the bindings have been put

00:13:34,830 --> 00:13:37,650
in place so you know all your input

00:13:36,120 --> 00:13:39,779
bindings are in place you know that

00:13:37,650 --> 00:13:41,400
you're required directives are been

00:13:39,779 --> 00:13:43,560
attached to the controller so this is a

00:13:41,400 --> 00:13:45,570
great opportunity to then make use of

00:13:43,560 --> 00:13:47,520
those bindings and maybe do some extra

00:13:45,570 --> 00:13:50,940
work like downloading some data from a

00:13:47,520 --> 00:13:53,550
server for instance on dollar ondestroy

00:13:50,940 --> 00:13:55,680
this one gets called when the containing

00:13:53,550 --> 00:13:57,900
scope that contains the component gets

00:13:55,680 --> 00:13:59,339
destroyed so not when the isolated scope

00:13:57,900 --> 00:14:01,580
gets destroyed but the thing that

00:13:59,339 --> 00:14:05,130
contains the component gets destroyed I

00:14:01,580 --> 00:14:06,960
would use this to clean up any resources

00:14:05,130 --> 00:14:09,660
that I've created or if I've created

00:14:06,960 --> 00:14:11,040
watches which are not specific to the

00:14:09,660 --> 00:14:14,610
isolated scope then obviously I have to

00:14:11,040 --> 00:14:16,589
clean those up too and now the dollar on

00:14:14,610 --> 00:14:18,480
changes is my favorite hook that we've

00:14:16,589 --> 00:14:21,480
implemented this just in the couple of

00:14:18,480 --> 00:14:23,460
last couple of months this gets called

00:14:21,480 --> 00:14:27,750
whenever any of the input bindings

00:14:23,460 --> 00:14:29,370
change and the parameter that gets

00:14:27,750 --> 00:14:32,250
passed in is a hash object which

00:14:29,370 --> 00:14:34,170
contains a key for each of the input

00:14:32,250 --> 00:14:36,720
bindings that have changed and then the

00:14:34,170 --> 00:14:38,910
value of that contains both the previous

00:14:36,720 --> 00:14:41,820
value and the new value for that binding

00:14:38,910 --> 00:14:47,160
this is an excellent opportunity for you

00:14:41,820 --> 00:14:49,020
to go in and compute properties based on

00:14:47,160 --> 00:14:51,450
the inputs so in this case you can see

00:14:49,020 --> 00:14:53,339
that we're noticing that the villain has

00:14:51,450 --> 00:14:56,070
changed that was bound to the my villain

00:14:53,339 --> 00:14:57,990
component and you can see them that we

00:14:56,070 --> 00:15:01,470
are computing the full name from this

00:14:57,990 --> 00:15:04,380
villain rather than doing that inside

00:15:01,470 --> 00:15:06,959
some kind of watch and what you'll see

00:15:04,380 --> 00:15:11,030
in all of these examples so far I've not

00:15:06,959 --> 00:15:15,510
actually referenced scope at all and

00:15:11,030 --> 00:15:18,080
dare I say it but we've almost killed

00:15:15,510 --> 00:15:18,080
scope

00:15:24,810 --> 00:15:29,470
but rest assured all of those people are

00:15:27,670 --> 00:15:31,240
still desperately in love with scope we

00:15:29,470 --> 00:15:33,900
haven't got rid of at all and of course

00:15:31,240 --> 00:15:36,190
there are still quite a number of

00:15:33,900 --> 00:15:37,960
situations where you do still need to

00:15:36,190 --> 00:15:41,440
use the scope obviously for broadcasting

00:15:37,960 --> 00:15:42,970
and emitting events on the scope there

00:15:41,440 --> 00:15:45,780
are definitely still opportunities for

00:15:42,970 --> 00:15:49,180
you to set up watches and so on but the

00:15:45,780 --> 00:15:50,440
once again like in terms of building

00:15:49,180 --> 00:15:52,510
components we're trying to make things

00:15:50,440 --> 00:15:53,980
simpler and for the vast majority of

00:15:52,510 --> 00:15:55,420
your components you won't have to touch

00:15:53,980 --> 00:15:57,640
scope at all because you can use these

00:15:55,420 --> 00:15:59,020
lifecycle hooks and you can use the fact

00:15:57,640 --> 00:16:01,480
that the bindings are set up for you

00:15:59,020 --> 00:16:03,850
onto the controller to make your life

00:16:01,480 --> 00:16:05,950
much easier and you'll see that the code

00:16:03,850 --> 00:16:08,200
that you're producing is conceptually

00:16:05,950 --> 00:16:09,730
much closer to the kind of code that

00:16:08,200 --> 00:16:14,800
you're going to be writing in angular 2

00:16:09,730 --> 00:16:16,360
components so we're telling everyone

00:16:14,800 --> 00:16:19,240
that they should now build their

00:16:16,360 --> 00:16:20,500
applications using components okay so we

00:16:19,240 --> 00:16:23,140
thought we don't we ought to make it

00:16:20,500 --> 00:16:25,210
easier to test them as well so we've got

00:16:23,140 --> 00:16:29,070
this simple new dollar component

00:16:25,210 --> 00:16:32,830
controller service which is in ng mock

00:16:29,070 --> 00:16:34,780
in in the old days you would use dollar

00:16:32,830 --> 00:16:38,830
controller to create yourself an

00:16:34,780 --> 00:16:40,600
instance of a controller okay but when

00:16:38,830 --> 00:16:42,880
I'm creating my components I don't want

00:16:40,600 --> 00:16:46,000
to expose the controller in addition to

00:16:42,880 --> 00:16:48,370
actually adding it to my component so

00:16:46,000 --> 00:16:50,470
this service allows me to specify the

00:16:48,370 --> 00:16:52,660
name of the component that I'm wanting

00:16:50,470 --> 00:16:54,700
to test and we will automatically create

00:16:52,660 --> 00:16:57,040
you an instance of that components

00:16:54,700 --> 00:16:59,260
controller you'll see that there's no

00:16:57,040 --> 00:17:01,390
mention of scope here again you can pass

00:16:59,260 --> 00:17:03,160
one in if you if you would like to but

00:17:01,390 --> 00:17:05,590
you can see that this is like how you

00:17:03,160 --> 00:17:07,660
might go about testing a component

00:17:05,590 --> 00:17:09,730
controller we're initializing the

00:17:07,660 --> 00:17:11,380
component was sum so we're pretending

00:17:09,730 --> 00:17:13,120
that we're setting up the bindings we're

00:17:11,380 --> 00:17:14,890
calling dollar on init to indicate to it

00:17:13,120 --> 00:17:16,510
that we've set up it's bindings we're

00:17:14,890 --> 00:17:18,640
then making some changes triggering on

00:17:16,510 --> 00:17:22,410
changes and then checking that the on

00:17:18,640 --> 00:17:22,410
changes is done what it's supposed to do

00:17:23,299 --> 00:17:29,730
and last but not least we have back

00:17:26,490 --> 00:17:31,200
ported the component Rooter to angular

00:17:29,730 --> 00:17:35,580
1.5 so you can use it in our

00:17:31,200 --> 00:17:36,919
applications I have a little gripe you

00:17:35,580 --> 00:17:40,049
might have noticed that I've been

00:17:36,919 --> 00:17:44,249
pronouncing Rueter in a slightly strange

00:17:40,049 --> 00:17:46,950
and foreign accent so I have this

00:17:44,249 --> 00:17:48,480
problem in meetings where people don't

00:17:46,950 --> 00:17:51,119
understand me so I'm going to set the

00:17:48,480 --> 00:17:53,669
record straight now okay there are two

00:17:51,119 --> 00:17:56,100
kinds of Rooter there's the thing that

00:17:53,669 --> 00:17:58,919
you use to dig holes in wood and if you

00:17:56,100 --> 00:18:02,190
look here that is pronounce router okay

00:17:58,919 --> 00:18:03,659
but the thing which Ford's data patek

00:18:02,190 --> 00:18:05,669
packets to appropriate parts of a

00:18:03,659 --> 00:18:08,399
computer network or or in our case you

00:18:05,669 --> 00:18:10,919
know creates components in the tree rate

00:18:08,399 --> 00:18:13,649
based on some URL is actually pronounced

00:18:10,919 --> 00:18:15,419
Rooter so if we go away from this

00:18:13,649 --> 00:18:18,950
conference with nothing else I'd like

00:18:15,419 --> 00:18:18,950
you all to start using the word Rooter

00:18:24,370 --> 00:18:28,840
although I have to make an apology I did

00:18:27,040 --> 00:18:31,090
this search on Google right so this is

00:18:28,840 --> 00:18:33,340
the Google output when you start when

00:18:31,090 --> 00:18:34,780
you type Rooter definition this is the

00:18:33,340 --> 00:18:36,760
thing that comes up in the nice box at

00:18:34,780 --> 00:18:39,670
the front so it's official this must be

00:18:36,760 --> 00:18:41,020
true it was on Google but obviously I

00:18:39,670 --> 00:18:43,930
wrote this presentation while I was in

00:18:41,020 --> 00:18:45,550
the UK and Google is sneaky and they

00:18:43,930 --> 00:18:50,650
knew I was in the UK so they gave me

00:18:45,550 --> 00:18:52,270
what I wanted which was the the the the

00:18:50,650 --> 00:18:54,160
spelling that or the pronunciation I

00:18:52,270 --> 00:18:55,810
expected so when I was on the plane on

00:18:54,160 --> 00:18:59,920
the way over I did it again when I was

00:18:55,810 --> 00:19:02,590
in the States and came up with this now

00:18:59,920 --> 00:19:04,060
for some reason it's now ruder router

00:19:02,590 --> 00:19:06,910
I don't know well that's going on but

00:19:04,060 --> 00:19:09,550
you'll see that I have to step back

00:19:06,910 --> 00:19:12,220
slightly the the second kind of router

00:19:09,550 --> 00:19:18,520
now has two pronunciations

00:19:12,220 --> 00:19:23,320
Ruta ruder and router but you'll notice

00:19:18,520 --> 00:19:26,790
that ruder is first so you know you'd

00:19:23,320 --> 00:19:26,790
make out of that what you wish

00:19:27,170 --> 00:19:32,270
but of course if you start using the

00:19:29,120 --> 00:19:34,910
word Rooter then you can fall into some

00:19:32,270 --> 00:19:38,390
potential problems when we have things

00:19:34,910 --> 00:19:41,510
like the root Rooter so I wanted to get

00:19:38,390 --> 00:19:43,130
in before shy kid on that one but this

00:19:41,510 --> 00:19:44,270
is so problematic the fact that

00:19:43,130 --> 00:19:46,460
everyone's going to start saying root

00:19:44,270 --> 00:19:48,770
Rooter that Mishka and Victor had to

00:19:46,460 --> 00:19:51,290
completely refactor the entire Rooter

00:19:48,770 --> 00:19:53,480
system just so they could remove this

00:19:51,290 --> 00:19:55,490
concept from it so the the current

00:19:53,480 --> 00:19:57,830
angular component Rooter doesn't have a

00:19:55,490 --> 00:19:59,960
root Rooter purely because it would just

00:19:57,830 --> 00:20:02,170
be confusing for people to n terms of

00:19:59,960 --> 00:20:02,170
spelling

00:20:03,610 --> 00:20:09,560
so getting back to the serious stuff

00:20:07,150 --> 00:20:10,610
when you'll define your components in

00:20:09,560 --> 00:20:12,860
angular 1 point 5

00:20:10,610 --> 00:20:15,080
you can now specify your components very

00:20:12,860 --> 00:20:17,120
similar to what you do in angular 2 you

00:20:15,080 --> 00:20:18,830
can specify your routes for the child

00:20:17,120 --> 00:20:20,780
now I've left dollar route config in

00:20:18,830 --> 00:20:22,760
there because the current version of the

00:20:20,780 --> 00:20:25,490
angular 1.5 component route to which you

00:20:22,760 --> 00:20:27,590
can access via NPM still requires dollar

00:20:25,490 --> 00:20:29,590
route config but obviously very soon

00:20:27,590 --> 00:20:33,140
that's going to change the dollar rates

00:20:29,590 --> 00:20:35,840
but you can see that we've got a very

00:20:33,140 --> 00:20:37,430
similar arrangement to what mishko was

00:20:35,840 --> 00:20:39,250
just demonstrating earlier in terms of

00:20:37,430 --> 00:20:45,290
the way that you can configure it it's

00:20:39,250 --> 00:20:47,270
conceptually nice and similar ok so you

00:20:45,290 --> 00:20:49,460
can go and look at this code for this

00:20:47,270 --> 00:20:51,890
application I haven't really got time to

00:20:49,460 --> 00:20:54,140
talk about it in detail today but if you

00:20:51,890 --> 00:20:55,970
go to my github account and go to ng one

00:20:54,140 --> 00:20:58,580
component demo then you can see it all

00:20:55,970 --> 00:21:01,220
there and you can see I've even written

00:20:58,580 --> 00:21:05,080
tests for it and end-to-end tests thanks

00:21:01,220 --> 00:21:08,900
to a horse who pushed me to do that

00:21:05,080 --> 00:21:10,760
testing II so please don't have a look

00:21:08,900 --> 00:21:12,350
at that if you want to read up some more

00:21:10,760 --> 00:21:13,730
on some of these ideas and I'd like to

00:21:12,350 --> 00:21:15,380
I'd be very interested in having a

00:21:13,730 --> 00:21:16,430
debate about the naming conventions and

00:21:15,380 --> 00:21:18,740
whether I've actually chosen an

00:21:16,430 --> 00:21:21,160
appropriate set there's a great

00:21:18,740 --> 00:21:24,470
component guide for angular 1 written by

00:21:21,160 --> 00:21:28,040
Martin staffer you can see some angular

00:21:24,470 --> 00:21:29,920
2 stuff here desert react think that's

00:21:28,040 --> 00:21:31,750
wrong don't

00:21:29,920 --> 00:21:33,850
you can always a sober look that if you

00:21:31,750 --> 00:21:34,930
feel uncomfortable about that and the

00:21:33,850 --> 00:21:37,410
last thing I want you to go away with

00:21:34,930 --> 00:21:40,360
today is to remember that Web Apps love

00:21:37,410 --> 00:21:42,190
components and components love angular

00:21:40,360 --> 00:21:44,400
1.5 thank you very much for your time

00:21:42,190 --> 00:21:44,400

YouTube URL: https://www.youtube.com/watch?v=AMwjDibFxno


