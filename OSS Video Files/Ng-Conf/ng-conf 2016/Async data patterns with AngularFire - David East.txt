Title: Async data patterns with AngularFire - David East
Publication date: 2016-05-06
Playlist: ng-conf 2016
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,500 --> 00:00:06,690
no I that's why we have a thing called

00:00:04,830 --> 00:00:08,670
the timer and then we can do a timer and

00:00:06,690 --> 00:00:13,980
then take until another action comes in

00:00:08,670 --> 00:00:20,369
and it cancels I I have a problem yeah

00:00:13,980 --> 00:00:23,070
no it's true I do and now that I'm in a

00:00:20,369 --> 00:00:26,750
room with 1,400 of my closest friends I

00:00:23,070 --> 00:00:35,030
feel like it's time for me to come clear

00:00:26,750 --> 00:00:37,730
so my problem is I see observables

00:00:35,030 --> 00:00:41,309
everywhere

00:00:37,730 --> 00:00:42,510
everything to me isn't observable and

00:00:41,309 --> 00:00:44,940
the things that I see that are

00:00:42,510 --> 00:00:50,550
observable they don't even know that

00:00:44,940 --> 00:00:54,680
they're observable and that's because

00:00:50,550 --> 00:00:58,019
not all observables look the same

00:00:54,680 --> 00:01:01,379
because observables are really just a

00:00:58,019 --> 00:01:03,120
Rays that are laid out in time and so

00:01:01,379 --> 00:01:05,399
we're used to arrays that are laid out

00:01:03,120 --> 00:01:07,020
in memory and it's really easy to wrap

00:01:05,399 --> 00:01:09,090
your head around memory as a physical

00:01:07,020 --> 00:01:11,429
construct but if you can wrap your head

00:01:09,090 --> 00:01:14,429
around arrays as a physical construct

00:01:11,429 --> 00:01:16,710
then or time as a physical construct

00:01:14,429 --> 00:01:19,800
then you understand observables because

00:01:16,710 --> 00:01:22,380
that's all they are because everything

00:01:19,800 --> 00:01:24,420
is observable like my dog my dog is

00:01:22,380 --> 00:01:30,690
observable just an observable of barks

00:01:24,420 --> 00:01:33,869
and this is my actual dog and then Dom

00:01:30,690 --> 00:01:35,789
events they're observables just continue

00:01:33,869 --> 00:01:38,149
a stream of kiap a mouse and click

00:01:35,789 --> 00:01:38,149
events

00:01:40,140 --> 00:01:45,250
and even this presentation isn't

00:01:42,940 --> 00:01:50,860
observable it's just an observable of

00:01:45,250 --> 00:01:53,590
slides so I looked at all this and I

00:01:50,860 --> 00:01:57,660
kind of thought to myself okay well what

00:01:53,590 --> 00:02:01,390
if my database wasn't it was over Bowl

00:01:57,660 --> 00:02:04,060
like what if every single time I updated

00:02:01,390 --> 00:02:07,090
a piece of data it sent that update to

00:02:04,060 --> 00:02:09,720
every connected device within

00:02:07,090 --> 00:02:09,720
milliseconds

00:02:11,250 --> 00:02:16,110
and that's actually exactly what

00:02:12,600 --> 00:02:19,290
firebase does so who here has heard of

00:02:16,110 --> 00:02:24,510
firebase before it's alright turn up for

00:02:19,290 --> 00:02:27,000
firebase so far base is a platform for

00:02:24,510 --> 00:02:28,980
building real-time apps and there's

00:02:27,000 --> 00:02:32,550
three main features serverless

00:02:28,980 --> 00:02:34,620
authentication static web hosting and

00:02:32,550 --> 00:02:39,210
what I really want to talk about today

00:02:34,620 --> 00:02:41,730
is the real-time database so the way the

00:02:39,210 --> 00:02:44,100
real-time database works is is that you

00:02:41,730 --> 00:02:46,080
we give you a URL when you sign up for

00:02:44,100 --> 00:02:48,959
an account and then you can use this URL

00:02:46,080 --> 00:02:51,810
to store data against restful paths so

00:02:48,959 --> 00:02:54,180
in this case against the slash people

00:02:51,810 --> 00:02:58,020
location I'm just storing an array of

00:02:54,180 --> 00:03:01,290
people then using the firebase j/s

00:02:58,020 --> 00:03:04,020
library I can create a reference to the

00:03:01,290 --> 00:03:06,600
real-time database using that URL and

00:03:04,020 --> 00:03:08,970
then I can subscribe to events that tell

00:03:06,600 --> 00:03:11,490
me whenever anything has changed in real

00:03:08,970 --> 00:03:13,620
time so I get granular updates like

00:03:11,490 --> 00:03:16,380
whenever a child has been added to the

00:03:13,620 --> 00:03:19,140
list or removed or changed and then I

00:03:16,380 --> 00:03:21,570
can coalesce all of these events into a

00:03:19,140 --> 00:03:24,810
synchronized array like we see at the

00:03:21,570 --> 00:03:26,670
top now if you've used the angular one

00:03:24,810 --> 00:03:29,570
before which is like literally everyone

00:03:26,670 --> 00:03:31,769
in this room then you would see that

00:03:29,570 --> 00:03:35,070
something right here won't work with

00:03:31,769 --> 00:03:37,860
angular one and that's that these

00:03:35,070 --> 00:03:39,570
callback functions are asynchronous so

00:03:37,860 --> 00:03:42,980
they're not gonna work with the digest

00:03:39,570 --> 00:03:42,980
live we have to call scope dot apply

00:03:43,110 --> 00:03:47,280
and that's actually exactly why we built

00:03:45,360 --> 00:03:49,620
angularfire r1 because we wanted to

00:03:47,280 --> 00:03:53,130
synchronize collections within the real

00:03:49,620 --> 00:03:55,530
time database with the digest loop so

00:03:53,130 --> 00:03:57,690
when angular to hit the scene I thought

00:03:55,530 --> 00:04:01,160
to myself like oh man I'm really excited

00:03:57,690 --> 00:04:03,750
to build a library with angular 2

00:04:01,160 --> 00:04:09,300
because to me the real-time database

00:04:03,750 --> 00:04:11,280
looks exactly like an observable but

00:04:09,300 --> 00:04:13,020
music oh he came up to me and was like

00:04:11,280 --> 00:04:15,840
David slow your roll

00:04:13,020 --> 00:04:25,590
we have zones and like everyone knows

00:04:15,840 --> 00:04:28,980
zones are the bee's knees and so he's

00:04:25,590 --> 00:04:31,230
like zones they they they patch

00:04:28,980 --> 00:04:33,930
asynchronous events so we don't need to

00:04:31,230 --> 00:04:35,790
call scope dot apply anymore so why

00:04:33,930 --> 00:04:40,220
don't we just use the regular firebase

00:04:35,790 --> 00:04:45,600
library it was a really good question so

00:04:40,220 --> 00:04:48,120
I looked at him and I said you built

00:04:45,600 --> 00:04:50,580
angular 2 to work great with observables

00:04:48,120 --> 00:04:54,120
and observables model asynchronous data

00:04:50,580 --> 00:04:56,790
streams in the real time database is any

00:04:54,120 --> 00:04:59,280
synchronous data stream so we need to

00:04:56,790 --> 00:05:01,110
build a library so you're following me

00:04:59,280 --> 00:05:04,040
and was like okay David you're right

00:05:01,110 --> 00:05:04,040
again

00:05:05,400 --> 00:05:11,110
so Jeff cross and I set out on building

00:05:08,800 --> 00:05:13,680
the latest version of angularfire and

00:05:11,110 --> 00:05:18,700
our goal was is we wanted to synchronize

00:05:13,680 --> 00:05:21,460
collections as observables and this is

00:05:18,700 --> 00:05:24,940
actually what we came up with so this is

00:05:21,460 --> 00:05:27,070
your typical angular 2 component and all

00:05:24,940 --> 00:05:28,660
we're doing here is we're importing the

00:05:27,070 --> 00:05:31,060
angular fire service from the angular

00:05:28,660 --> 00:05:33,040
fire module and then we can then inject

00:05:31,060 --> 00:05:36,460
that into the constructor of our

00:05:33,040 --> 00:05:38,350
components and from there we can call

00:05:36,460 --> 00:05:42,160
this list method that creates a

00:05:38,350 --> 00:05:44,650
synchronized array as an observable if

00:05:42,160 --> 00:05:48,760
this looks crazy to you binding in your

00:05:44,650 --> 00:05:50,770
template is really easy so we can create

00:05:48,760 --> 00:05:53,980
a unordered list with some list items

00:05:50,770 --> 00:05:56,320
and then do ng 4 and we can actually

00:05:53,980 --> 00:05:59,860
iterate over this as if it were an array

00:05:56,320 --> 00:06:01,360
in memory but because it's not we piped

00:05:59,860 --> 00:06:04,120
the async because it's an array that

00:06:01,360 --> 00:06:06,700
lives over time and then every single

00:06:04,120 --> 00:06:09,610
time that my real time database updates

00:06:06,700 --> 00:06:11,640
this template updates automatically as

00:06:09,610 --> 00:06:11,640
well

00:06:12,279 --> 00:06:16,689
so what this really does is is that it

00:06:14,259 --> 00:06:22,089
simplifies building real-time apps with

00:06:16,689 --> 00:06:24,399
angular 2 so today I'm super excited to

00:06:22,089 --> 00:06:34,869
announce that angularfire 2 is actually

00:06:24,399 --> 00:06:38,859
available in beta so I'm actually gonna

00:06:34,869 --> 00:06:41,379
show you how it works so right here is

00:06:38,859 --> 00:06:43,299
just a chat I'm gonna build a chat app

00:06:41,379 --> 00:06:45,909
so to the right can't really see

00:06:43,299 --> 00:06:47,379
anything because there isn't anything so

00:06:45,909 --> 00:06:50,379
we're gonna go and we're gonna build an

00:06:47,379 --> 00:06:52,989
app I call flex chat and it's just chat

00:06:50,379 --> 00:06:55,959
in one big old flex box it's pretty

00:06:52,989 --> 00:06:58,509
simple and so there's three little UI

00:06:55,959 --> 00:07:00,369
pieces to flex chat we need a header we

00:06:58,509 --> 00:07:02,409
need a place to render our messages and

00:07:00,369 --> 00:07:05,289
then we need a place to enter messages

00:07:02,409 --> 00:07:06,429
so a text box with a button so I'm going

00:07:05,289 --> 00:07:09,129
to start out I'm gonna create a header

00:07:06,429 --> 00:07:13,569
and get an h3 and I'm gonna call this

00:07:09,129 --> 00:07:15,579
flex chat now I'm gonna save and then

00:07:13,569 --> 00:07:18,699
what's weird it's a perfectly styled

00:07:15,579 --> 00:07:22,299
header or how that happened then I'm

00:07:18,699 --> 00:07:25,299
gonna create my chat container and then

00:07:22,299 --> 00:07:27,459
below that I'll create a text box with a

00:07:25,299 --> 00:07:29,199
button but I actually cheated and went

00:07:27,459 --> 00:07:32,860
ahead and I created a custom component

00:07:29,199 --> 00:07:36,129
with angular 2 called input bar an input

00:07:32,860 --> 00:07:37,959
bar does that for me so right here I can

00:07:36,129 --> 00:07:42,009
just type something in and it's send

00:07:37,959 --> 00:07:43,749
it'll clear it so now what I want to do

00:07:42,009 --> 00:07:46,479
is I want to render my list of messages

00:07:43,749 --> 00:07:48,429
I can do that by using another custom

00:07:46,479 --> 00:07:52,089
component I made called Flex chat

00:07:48,429 --> 00:07:54,069
message an insight flex chat message I

00:07:52,089 --> 00:07:56,319
want to render and in an array of

00:07:54,069 --> 00:08:00,059
messages so to do that I'm going to use

00:07:56,319 --> 00:08:03,879
ng 4 and I'll say let message of

00:08:00,059 --> 00:08:06,939
messages and then that will iterate in

00:08:03,879 --> 00:08:08,949
render each item at a time but this is a

00:08:06,939 --> 00:08:12,639
custom component so I actually can bind

00:08:08,949 --> 00:08:14,919
to a property so this cost component has

00:08:12,639 --> 00:08:17,229
a property of message and what's great

00:08:14,919 --> 00:08:20,409
about this is I can pass in the message

00:08:17,229 --> 00:08:22,929
from the ng 4 into the component so when

00:08:20,409 --> 00:08:24,879
I save nothing's gonna happen because we

00:08:22,929 --> 00:08:26,230
don't have any messages so we're going

00:08:24,879 --> 00:08:28,900
to go to the actual compose

00:08:26,230 --> 00:08:30,700
itself and there's some red lines that's

00:08:28,900 --> 00:08:33,760
just you know vs Cody's trippin right

00:08:30,700 --> 00:08:34,900
now don't worry it's everything safe and

00:08:33,760 --> 00:08:37,900
what we're gonna do is we're going to

00:08:34,900 --> 00:08:40,180
create an array of messages and then

00:08:37,900 --> 00:08:42,790
inside of my constructor I'm gonna

00:08:40,180 --> 00:08:45,490
populate just two little messages so

00:08:42,790 --> 00:08:47,440
I'll say this that messages and I'll set

00:08:45,490 --> 00:08:50,740
that to an array with two elements so

00:08:47,440 --> 00:08:52,810
first text of hi and then another text

00:08:50,740 --> 00:08:54,600
of like someone who's like really

00:08:52,810 --> 00:09:00,490
excited hi

00:08:54,600 --> 00:09:04,330
so now I'll save and we have an error

00:09:00,490 --> 00:09:08,740
because I called it message and now we

00:09:04,330 --> 00:09:10,990
save and then we have two little chat

00:09:08,740 --> 00:09:13,300
messages but I also want to be able to

00:09:10,990 --> 00:09:15,790
do add messages so go down into here and

00:09:13,300 --> 00:09:18,370
say okay let's add and send so to do

00:09:15,790 --> 00:09:21,250
that I'm gonna go back into my component

00:09:18,370 --> 00:09:24,040
and I have an input bar that actually

00:09:21,250 --> 00:09:26,320
raises a custom event that I call sent

00:09:24,040 --> 00:09:28,170
so whenever something is sent we want to

00:09:26,320 --> 00:09:30,820
call a method and we're gonna call add

00:09:28,170 --> 00:09:33,550
message and we're gonna pass through the

00:09:30,820 --> 00:09:35,260
dollar event so now they have that we're

00:09:33,550 --> 00:09:38,920
gonna go back into the component and

00:09:35,260 --> 00:09:42,190
create our add message which will return

00:09:38,920 --> 00:09:46,600
us to the text so now I can say this dot

00:09:42,190 --> 00:09:50,740
messages dot push and we have a new

00:09:46,600 --> 00:09:56,740
message cuz it's just an array so now

00:09:50,740 --> 00:09:59,380
I'll say hello hey well this is cool but

00:09:56,740 --> 00:10:01,510
it's not real time and it's not hooked

00:09:59,380 --> 00:10:04,330
up to a database anymore so we're gonna

00:10:01,510 --> 00:10:05,920
bring in angularfire so the way we do

00:10:04,330 --> 00:10:08,080
that is we're gonna start out in the

00:10:05,920 --> 00:10:08,860
main TS and this is where we do all of

00:10:08,080 --> 00:10:10,900
our bootstrapping

00:10:08,860 --> 00:10:12,520
bootstrapping essentially says I'm going

00:10:10,900 --> 00:10:15,310
to set up things ahead of time I'm gonna

00:10:12,520 --> 00:10:17,740
tell angular what services I want to

00:10:15,310 --> 00:10:19,930
inject and you know any values I want to

00:10:17,740 --> 00:10:23,140
configure ahead of time so what we want

00:10:19,930 --> 00:10:27,730
to configure is we want to import from

00:10:23,140 --> 00:10:30,250
the angular fire to module and we want

00:10:27,730 --> 00:10:32,290
to import the firebase providers which

00:10:30,250 --> 00:10:35,050
is the whole set of things that allow us

00:10:32,290 --> 00:10:37,450
to inject them later and then we're

00:10:35,050 --> 00:10:38,540
gonna also import this default firebase

00:10:37,450 --> 00:10:40,310
function

00:10:38,540 --> 00:10:43,370
and what we can do is we can use these

00:10:40,310 --> 00:10:45,770
inside bootstrap so we can let angular

00:10:43,370 --> 00:10:47,240
know that we have some providers and

00:10:45,770 --> 00:10:48,730
then we're also going to let it know

00:10:47,240 --> 00:10:52,640
that we're going to use this default

00:10:48,730 --> 00:10:56,180
firebase function that sets up our URL

00:10:52,640 --> 00:11:01,100
to our real time database so mine is

00:10:56,180 --> 00:11:04,460
called Flex chat - firebase IO comm so

00:11:01,100 --> 00:11:07,580
I'll save and it should do nothing so

00:11:04,460 --> 00:11:09,710
now I'll go back to the components and

00:11:07,580 --> 00:11:13,250
what I want to do is I want to first

00:11:09,710 --> 00:11:18,410
import the angularfire module so import

00:11:13,250 --> 00:11:20,270
the this from angularfire - and if

00:11:18,410 --> 00:11:22,730
you're wondering why I actually always

00:11:20,270 --> 00:11:24,320
leave this blank is because typescript

00:11:22,730 --> 00:11:26,330
is something really awesome where I can

00:11:24,320 --> 00:11:28,910
see everything that's available to

00:11:26,330 --> 00:11:32,360
import she's one of my favorite things

00:11:28,910 --> 00:11:35,510
so now I have this imported so in the

00:11:32,360 --> 00:11:38,210
constructor I can inject it and then I

00:11:35,510 --> 00:11:40,910
don't want this in memory array I want

00:11:38,210 --> 00:11:45,020
an array that lives over time so to do

00:11:40,910 --> 00:11:48,560
that I'll say AF dot database dot list

00:11:45,020 --> 00:11:51,620
and then I can say the list located at

00:11:48,560 --> 00:11:53,480
messages now typescript doesn't like

00:11:51,620 --> 00:11:56,030
this it's gonna give me this error and

00:11:53,480 --> 00:11:58,310
it says type firebase lists observable

00:11:56,030 --> 00:12:00,890
of any array is not assignable to type

00:11:58,310 --> 00:12:02,750
of any array now I'm like okay I don't

00:12:00,890 --> 00:12:05,210
know what that means but actually what

00:12:02,750 --> 00:12:07,880
it really means is is that this array of

00:12:05,210 --> 00:12:10,130
messages is an array that lives in

00:12:07,880 --> 00:12:12,470
memory and we don't want to Ray that

00:12:10,130 --> 00:12:15,080
lives in memory want an array that is

00:12:12,470 --> 00:12:16,970
laid out in time then that isn't

00:12:15,080 --> 00:12:18,740
observable so we have a special

00:12:16,970 --> 00:12:22,250
observable called a firebase list

00:12:18,740 --> 00:12:24,860
observable and what we can do with here

00:12:22,250 --> 00:12:28,340
is we can wrap this and now we have a

00:12:24,860 --> 00:12:32,830
firebase lifts observable of any array

00:12:28,340 --> 00:12:37,280
and typescript likes that so we save and

00:12:32,830 --> 00:12:39,620
nothing works why is that well let me go

00:12:37,280 --> 00:12:41,300
back to my template and what we're still

00:12:39,620 --> 00:12:43,850
doing here is that we're treating this

00:12:41,300 --> 00:12:45,980
ng4 as if we're iterating over an array

00:12:43,850 --> 00:12:48,890
that lives in memory and we know it

00:12:45,980 --> 00:12:50,880
doesn't lives over time and that is an

00:12:48,890 --> 00:12:55,830
asynchronous operation so

00:12:50,880 --> 00:12:58,230
pipe the async sound I save we have tons

00:12:55,830 --> 00:13:09,150
of messages because this is actually an

00:12:58,230 --> 00:13:12,330
older app I made and so at this point we

00:13:09,150 --> 00:13:14,310
have all these crazy messages and what I

00:13:12,330 --> 00:13:17,940
really want to be able to do is actually

00:13:14,310 --> 00:13:20,490
go and be able to add messages so let me

00:13:17,940 --> 00:13:22,970
go back to my component and one thing

00:13:20,490 --> 00:13:26,910
you can actually see right here is that

00:13:22,970 --> 00:13:28,920
nothing changed in the push method we

00:13:26,910 --> 00:13:30,840
were originally pushing on just an

00:13:28,920 --> 00:13:32,310
in-memory array and now we're pushing on

00:13:30,840 --> 00:13:33,960
a firebase list of zero ball in

00:13:32,310 --> 00:13:36,390
typescript didn't get mad we need any

00:13:33,960 --> 00:13:38,520
runtime errors that worked and that's

00:13:36,390 --> 00:13:40,610
because the firebase lifts observable is

00:13:38,520 --> 00:13:43,170
still a collection so we provide you

00:13:40,610 --> 00:13:46,320
array like methods that trigger

00:13:43,170 --> 00:13:49,200
additions as if you were using a regular

00:13:46,320 --> 00:13:51,510
array which makes makes it really easy

00:13:49,200 --> 00:13:59,640
to use so I can go down here and just

00:13:51,510 --> 00:14:03,270
say zones are the bee's knees because

00:13:59,640 --> 00:14:05,610
they are and so now that works but this

00:14:03,270 --> 00:14:07,770
is a lot of messages so I'd like to

00:14:05,610 --> 00:14:10,050
limit the amount I get back from the

00:14:07,770 --> 00:14:12,900
real-time database and to do that I can

00:14:10,050 --> 00:14:15,840
specify a query that just reduces that

00:14:12,900 --> 00:14:18,660
result set so I'll provide this query

00:14:15,840 --> 00:14:22,710
object in here and I want to just limit

00:14:18,660 --> 00:14:27,030
it to the last say 10 items so I do that

00:14:22,710 --> 00:14:30,060
and then boom we have you know only 10

00:14:27,030 --> 00:14:32,430
items this is cool but I'd rather have

00:14:30,060 --> 00:14:36,510
it so that the user could configure it

00:14:32,430 --> 00:14:38,460
and you know not just me in my app so to

00:14:36,510 --> 00:14:42,060
do that I'm gonna go back to my template

00:14:38,460 --> 00:14:44,970
and I'm gonna create a text box and give

00:14:42,060 --> 00:14:47,940
it a local variable of a limit so I have

00:14:44,970 --> 00:14:49,320
access to this text box and then at this

00:14:47,940 --> 00:14:53,490
point I want to know when anything

00:14:49,320 --> 00:14:56,310
changes so using invent syntax all bind

00:14:53,490 --> 00:14:58,020
to the change event and I can say okay

00:14:56,310 --> 00:15:00,720
well when something changes let's call

00:14:58,020 --> 00:15:03,090
this change limit method and I'll pass

00:15:00,720 --> 00:15:06,700
through the limits value

00:15:03,090 --> 00:15:09,190
so now when I save will get this text

00:15:06,700 --> 00:15:13,020
box and that's great so we just need to

00:15:09,190 --> 00:15:15,970
implement the change limit method so say

00:15:13,020 --> 00:15:18,430
change limit and that will give us back

00:15:15,970 --> 00:15:23,370
the actual limit and then at this point

00:15:18,430 --> 00:15:27,070
how do I go about re running this query

00:15:23,370 --> 00:15:28,840
well when we first made angularfire 2 we

00:15:27,070 --> 00:15:32,470
thought it's really cool that we're

00:15:28,840 --> 00:15:37,240
returning back lists as observables but

00:15:32,470 --> 00:15:42,220
what if we put in observable inside and

00:15:37,240 --> 00:15:44,680
observable and that's actually exactly

00:15:42,220 --> 00:15:47,710
what you can do with queries so rather

00:15:44,680 --> 00:15:49,750
than put a value of 10 in here I can put

00:15:47,710 --> 00:15:52,290
in an observable and whenever that

00:15:49,750 --> 00:15:55,330
observable emits a new value the query

00:15:52,290 --> 00:15:58,780
automatically runs so to show you that

00:15:55,330 --> 00:16:01,990
I'm just gonna import from rxjs so I'm

00:15:58,780 --> 00:16:04,450
going to import from rxjs slash subjects

00:16:01,990 --> 00:16:08,050
and a subject is a way for us to create

00:16:04,450 --> 00:16:10,660
our own observable so I'll say subject

00:16:08,050 --> 00:16:13,060
and then that needs to be a property so

00:16:10,660 --> 00:16:15,340
I'll call it the limits subject and that

00:16:13,060 --> 00:16:18,820
is a new subject and we want it to be a

00:16:15,340 --> 00:16:21,610
number and then now rather than limit to

00:16:18,820 --> 00:16:24,640
last 10 can save this dot Linnet subject

00:16:21,610 --> 00:16:26,650
and then inside of here and change limit

00:16:24,640 --> 00:16:29,350
what we're really doing is we're binding

00:16:26,650 --> 00:16:32,860
to the change event so we're turning our

00:16:29,350 --> 00:16:36,340
Dom events into an observable like

00:16:32,860 --> 00:16:38,830
everything is an observable so at this

00:16:36,340 --> 00:16:42,570
point I can say this dot limits subject

00:16:38,830 --> 00:16:45,820
dot next so saying emit a new event and

00:16:42,570 --> 00:16:47,820
then right here I'm just going to parse

00:16:45,820 --> 00:16:52,960
int we're gonna make sure it's a number

00:16:47,820 --> 00:16:56,770
I'll limit to 10 save and let's refresh

00:16:52,960 --> 00:17:00,250
and we don't see anything that's because

00:16:56,770 --> 00:17:02,140
observables are lazy and which that

00:17:00,250 --> 00:17:04,600
means is that we don't have a value yet

00:17:02,140 --> 00:17:07,030
for this observable inside the

00:17:04,600 --> 00:17:09,580
observable so it's not going to fire

00:17:07,030 --> 00:17:11,110
anything so let's give it a value I'm

00:17:09,580 --> 00:17:13,660
gonna give it a value of 1 and hit enter

00:17:11,110 --> 00:17:16,959
and I get one back let's give it a value

00:17:13,660 --> 00:17:19,480
of 10 I get 10 back now let me give it a

00:17:16,959 --> 00:17:23,110
value of 100 and I get a hundred

00:17:19,480 --> 00:17:26,470
messages back and all this works by just

00:17:23,110 --> 00:17:28,780
hooking up observables and the awesome

00:17:26,470 --> 00:17:31,450
thing about this is that in really less

00:17:28,780 --> 00:17:33,880
than 40 lines of code we created a

00:17:31,450 --> 00:17:36,990
real-time chat application that does

00:17:33,880 --> 00:17:36,990
dynamic wearing

00:17:46,440 --> 00:17:52,630
so that's the app miss Everson thank you

00:17:50,769 --> 00:17:54,100
so I want to thank Jeff cross because

00:17:52,630 --> 00:17:57,220
Jeff cross was actually really the

00:17:54,100 --> 00:17:59,320
pioneer of the angularfire to project he

00:17:57,220 --> 00:18:01,000
set up all the boilerplate stuff he

00:17:59,320 --> 00:18:02,529
wrote the foundation of it all and it

00:18:01,000 --> 00:18:04,600
really wouldn't be possible without Jeff

00:18:02,529 --> 00:18:09,059
cross so if you see him do what I did

00:18:04,600 --> 00:18:09,059
and hand him a rose cuz he deserves it I

00:18:09,299 --> 00:18:16,779
also want to thank Rob Wormald because

00:18:12,279 --> 00:18:18,490
he helped me upgrade it to RC and also I

00:18:16,779 --> 00:18:20,019
just really loved this picture of Rob so

00:18:18,490 --> 00:18:24,490
he's really needed to get it into my

00:18:20,019 --> 00:18:26,500
presentation if you want to get started

00:18:24,490 --> 00:18:28,809
with angularfire you can just install

00:18:26,500 --> 00:18:32,799
through NPM so NPM install and you have

00:18:28,809 --> 00:18:34,360
a fire too and if you want to check the

00:18:32,799 --> 00:18:36,100
code out on github it's pretty easy

00:18:34,360 --> 00:18:41,110
we're underneath the angular org so

00:18:36,100 --> 00:18:42,880
angular slash angularfire - and if you

00:18:41,110 --> 00:18:45,700
really want to go deep we've actually

00:18:42,880 --> 00:18:47,409
written an entire developer guide the

00:18:45,700 --> 00:18:49,120
readme that takes you through everything

00:18:47,409 --> 00:18:51,399
you need to know to be productive and

00:18:49,120 --> 00:18:53,320
efficient with angular fire - so it goes

00:18:51,399 --> 00:18:56,289
through installation and setup with the

00:18:53,320 --> 00:18:58,480
angular CLI talks about retrieving data

00:18:56,289 --> 00:19:00,549
as objects and lists and then also

00:18:58,480 --> 00:19:02,320
querying those lists and something I

00:19:00,549 --> 00:19:04,210
didn't even cover today which is a whole

00:19:02,320 --> 00:19:08,409
nother part of this library and that's

00:19:04,210 --> 00:19:10,029
user authentication so the next time you

00:19:08,409 --> 00:19:13,029
feel really really confused about

00:19:10,029 --> 00:19:15,730
observables just know that everything

00:19:13,029 --> 00:19:18,909
isn't observable so even your database

00:19:15,730 --> 00:19:23,130
and then when you see an observable just

00:19:18,909 --> 00:19:23,130
tweet hashtag observables are everywhere

00:19:23,360 --> 00:19:26,230

YouTube URL: https://www.youtube.com/watch?v=oLG5TXLeuHQ


