Title: Angular 2 Universal Patterns - Jeffrey Whelpey, Patrick Stapleton
Publication date: 2016-05-04
Playlist: ng-conf 2016
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:01,129 --> 00:00:08,610
we're not Benjie calm hi guys John my

00:00:06,420 --> 00:00:11,759
name is Jeff Whelpley I'm the CTO at get

00:00:08,610 --> 00:00:13,799
human 9 Patrick Stapleton regular class

00:00:11,759 --> 00:00:17,420
you may also know us from our weekly

00:00:13,799 --> 00:00:20,730
podcast called angular air over the past

00:00:17,420 --> 00:00:21,990
thanks over the past year Patrick and I

00:00:20,730 --> 00:00:24,449
have been working on a library called

00:00:21,990 --> 00:00:27,029
angular Universal that allows you to

00:00:24,449 --> 00:00:30,449
render your angular 2 web app on the

00:00:27,029 --> 00:00:33,059
server the way this works is that if a

00:00:30,449 --> 00:00:35,030
user clicks on a link or types in the

00:00:33,059 --> 00:00:38,910
URL for your web app in their browser

00:00:35,030 --> 00:00:40,710
they get a server view rendered buying

00:00:38,910 --> 00:00:43,770
of universal immediately with the

00:00:40,710 --> 00:00:45,360
initial server response so users looking

00:00:43,770 --> 00:00:47,070
at that server view almost immediately

00:00:45,360 --> 00:00:49,800
and then all the client-side JavaScript

00:00:47,070 --> 00:00:51,149
is downloaded in the background and then

00:00:49,800 --> 00:00:53,660
eventually bootstraps and the client

00:00:51,149 --> 00:00:55,980
takes over and you're off to the races

00:00:53,660 --> 00:00:58,559
so for people they're unfamiliar with

00:00:55,980 --> 00:01:02,210
server rendering or angular Universal I

00:00:58,559 --> 00:01:05,729
created this handy dandy decision tree

00:01:02,210 --> 00:01:09,210
do you care about the initial load

00:01:05,729 --> 00:01:11,070
before performance for your web app if

00:01:09,210 --> 00:01:13,290
you have a consumer facing app or a

00:01:11,070 --> 00:01:15,869
mobile app you should care because your

00:01:13,290 --> 00:01:18,420
users care about seeing something right

00:01:15,869 --> 00:01:21,090
away Google had done another number of

00:01:18,420 --> 00:01:24,509
studies that talk about how the

00:01:21,090 --> 00:01:26,610
different suggests 250 milliseconds less

00:01:24,509 --> 00:01:28,920
than the blink of an eye can make a huge

00:01:26,610 --> 00:01:31,979
difference in the drop-off rate for

00:01:28,920 --> 00:01:34,790
users on your app do you care about

00:01:31,979 --> 00:01:37,770
users finding you through search engines

00:01:34,790 --> 00:01:40,799
Google does a good job of indexing

00:01:37,770 --> 00:01:43,649
client-side render to HTML but it's not

00:01:40,799 --> 00:01:46,020
perfect and other search engines like

00:01:43,649 --> 00:01:49,049
Bing don't do it nearly as well so

00:01:46,020 --> 00:01:50,939
server rendering is still the best way

00:01:49,049 --> 00:01:56,040
to optimize your website for search

00:01:50,939 --> 00:01:59,340
engines and finally do users share links

00:01:56,040 --> 00:02:02,790
to your app on social media on Facebook

00:01:59,340 --> 00:02:05,100
on Twitter that link preview feature

00:02:02,790 --> 00:02:08,619
only uses server rendered content it

00:02:05,100 --> 00:02:10,269
does not render your client-side HTML

00:02:08,619 --> 00:02:12,310
now today we're going to talk about a

00:02:10,269 --> 00:02:13,420
lot more than just the universal library

00:02:12,310 --> 00:02:16,209
we're actually going to talk about the

00:02:13,420 --> 00:02:17,950
patterns and best practices that Patrick

00:02:16,209 --> 00:02:21,190
and I discovered over the past year

00:02:17,950 --> 00:02:23,110
building on top of angular Universal the

00:02:21,190 --> 00:02:24,180
decision tree for that is slightly

00:02:23,110 --> 00:02:27,370
different

00:02:24,180 --> 00:02:28,660
do you use angular 2 today or are you

00:02:27,370 --> 00:02:30,459
going to use it in the future

00:02:28,660 --> 00:02:33,430
I think most of the people in this room

00:02:30,459 --> 00:02:36,940
probably fit that profile do you care

00:02:33,430 --> 00:02:41,650
about server rendering if nothing else

00:02:36,940 --> 00:02:43,660
do you are you a web developer most

00:02:41,650 --> 00:02:45,640
people should fit into one of those

00:02:43,660 --> 00:02:47,950
categories and these patterns we're

00:02:45,640 --> 00:02:51,610
going to talk about do apply but if you

00:02:47,950 --> 00:02:53,379
do say no to all these I'm you're not

00:02:51,610 --> 00:02:58,390
really sure why you're here but take a

00:02:53,379 --> 00:02:59,650
nap and wake you up in 18 minutes so

00:02:58,390 --> 00:03:01,959
these are the six problem areas that

00:02:59,650 --> 00:03:03,760
Patrick and I identified that we wanted

00:03:01,959 --> 00:03:06,069
to talk about but we're gonna focus on

00:03:03,760 --> 00:03:07,780
the top three today and I'm gonna go

00:03:06,069 --> 00:03:09,370
over for each of these what the problem

00:03:07,780 --> 00:03:14,200
is and then Patrick is gonna show us a

00:03:09,370 --> 00:03:18,310
code demo of what the solution is so

00:03:14,200 --> 00:03:20,650
first up gap events so these are user

00:03:18,310 --> 00:03:22,930
events in the browser on the server

00:03:20,650 --> 00:03:26,130
rendered view before the client takes

00:03:22,930 --> 00:03:28,510
over the client isn't there to handle

00:03:26,130 --> 00:03:31,599
mouse clicks swipes

00:03:28,510 --> 00:03:33,579
button clicks typing and text boxes so

00:03:31,599 --> 00:03:36,389
if your app is supposed to handle those

00:03:33,579 --> 00:03:39,639
it could create a user experience issue

00:03:36,389 --> 00:03:42,730
so Patrick how do we handle this problem

00:03:39,639 --> 00:03:44,980
with angular Universal well let's first

00:03:42,730 --> 00:03:46,959
go over what's going on here right like

00:03:44,980 --> 00:03:49,389
remember we type in hello this is an

00:03:46,959 --> 00:03:50,829
input inner server rendered view and

00:03:49,389 --> 00:03:52,389
then we bootstrap our application

00:03:50,829 --> 00:03:55,810
luckily enough we have a button here

00:03:52,389 --> 00:03:58,359
this is our client side app when we hit

00:03:55,810 --> 00:04:00,970
boot shop suddenly our inputs gone the

00:03:58,359 --> 00:04:03,220
hello is no longer there and that's

00:04:00,970 --> 00:04:06,880
mostly because the clients blown away

00:04:03,220 --> 00:04:09,940
our server view so let's look at

00:04:06,880 --> 00:04:13,090
the simplified version of what pre-boot

00:04:09,940 --> 00:04:15,670
is doing internally so what we're doing

00:04:13,090 --> 00:04:17,140
is we're grabbing a collection of all of

00:04:15,670 --> 00:04:20,670
our events right here as an array and

00:04:17,140 --> 00:04:24,160
we're invoking record events immediately

00:04:20,670 --> 00:04:25,810
after the page is loaded this is simply

00:04:24,160 --> 00:04:28,330
just grabbing all of our inputs and

00:04:25,810 --> 00:04:30,940
adding a listener that's pushing all of

00:04:28,330 --> 00:04:32,950
our events into our collection and then

00:04:30,940 --> 00:04:35,320
we have another function here called

00:04:32,950 --> 00:04:37,450
replay events you talk louder louder

00:04:35,320 --> 00:04:40,390
louder we give it now wait louder can

00:04:37,450 --> 00:04:42,010
you guys hear me now sweet alright and

00:04:40,390 --> 00:04:44,290
now we have another function called

00:04:42,010 --> 00:04:45,850
replay events that we're going to invoke

00:04:44,290 --> 00:04:49,450
right now with this button

00:04:45,850 --> 00:04:52,390
notice how hello is now replayed

00:04:49,450 --> 00:04:54,550
interstate is now maintained so let's go

00:04:52,390 --> 00:04:57,010
on the server and let's implement the

00:04:54,550 --> 00:05:00,280
full version of pre-boot so we hit save

00:04:57,010 --> 00:05:03,400
here and then we do a set timeout to

00:05:00,280 --> 00:05:06,250
delay our booth shop and then as soon as

00:05:03,400 --> 00:05:09,310
that's done refresh the page the type in

00:05:06,250 --> 00:05:10,870
hello a little bit too much else but

00:05:09,310 --> 00:05:13,000
like as soon as the clients rendered you

00:05:10,870 --> 00:05:17,650
notice that the state is maintained of

00:05:13,000 --> 00:05:21,250
our hello app so this is something that

00:05:17,650 --> 00:05:23,980
is extremely useful for server rendering

00:05:21,250 --> 00:05:26,080
to handle this gap problem gap events

00:05:23,980 --> 00:05:28,810
but it's also something that can be used

00:05:26,080 --> 00:05:32,230
for other things such as with

00:05:28,810 --> 00:05:33,910
progressive web apps so Jeff cross is

00:05:32,230 --> 00:05:36,280
going to talk later today about press

00:05:33,910 --> 00:05:38,200
Web Apps and there's this concept of

00:05:36,280 --> 00:05:40,240
application shell so even if you're not

00:05:38,200 --> 00:05:42,520
using server rendering you might use

00:05:40,240 --> 00:05:44,440
this concept of an app shell where you

00:05:42,520 --> 00:05:48,160
have an initial State for your

00:05:44,440 --> 00:05:50,170
application and most of time these types

00:05:48,160 --> 00:05:53,260
of inputs you don't you just don't have

00:05:50,170 --> 00:05:55,570
any interactions but with pre-boot with

00:05:53,260 --> 00:05:56,830
this concept of handling the events

00:05:55,570 --> 00:05:58,690
recording them and then playing it back

00:05:56,830 --> 00:06:01,090
you could actually add this to

00:05:58,690 --> 00:06:03,590
progressive web apps and enhance your

00:06:01,090 --> 00:06:08,340
users experience

00:06:03,590 --> 00:06:11,430
by next up is a sink so a sink is not a

00:06:08,340 --> 00:06:13,290
problem in the client in general from

00:06:11,430 --> 00:06:16,110
the sense that you can have things like

00:06:13,290 --> 00:06:17,850
this where you have multiple disparate

00:06:16,110 --> 00:06:19,680
asynchronous events that occur and they

00:06:17,850 --> 00:06:21,750
resolve separately and that's all good

00:06:19,680 --> 00:06:23,130
on the client in the browser but on the

00:06:21,750 --> 00:06:25,920
server this causes a major problem

00:06:23,130 --> 00:06:28,250
because we have to know when to send

00:06:25,920 --> 00:06:31,530
back that response to the client and

00:06:28,250 --> 00:06:34,170
most server frameworks will do this by

00:06:31,530 --> 00:06:36,270
either chaining asynchronous events or

00:06:34,170 --> 00:06:38,100
having a callback of some sort to say

00:06:36,270 --> 00:06:41,490
that you're done okay send back a

00:06:38,100 --> 00:06:44,190
response but unless we want people to

00:06:41,490 --> 00:06:46,560
totally change the way that they write

00:06:44,190 --> 00:06:48,090
their web applications we just can't do

00:06:46,560 --> 00:06:50,550
that we have to figure out a way to

00:06:48,090 --> 00:06:53,850
basically handle all these disparate

00:06:50,550 --> 00:06:56,700
asynchronous events and coordinate when

00:06:53,850 --> 00:06:58,680
to send back the response so Patrick how

00:06:56,700 --> 00:06:59,400
does angular Universal solve this

00:06:58,680 --> 00:07:02,190
problem

00:06:59,400 --> 00:07:04,170
well first let's look at these a seekers

00:07:02,190 --> 00:07:06,090
operations within our application notice

00:07:04,170 --> 00:07:08,940
how we have the same app here and the

00:07:06,090 --> 00:07:11,490
same step timeout and HSB requests now

00:07:08,940 --> 00:07:13,290
if we refresh the page notice how the

00:07:11,490 --> 00:07:15,150
server interview it's kind of missing

00:07:13,290 --> 00:07:17,790
some data here but the client is able to

00:07:15,150 --> 00:07:19,500
pick it up if I bump it the fonts a

00:07:17,790 --> 00:07:21,360
little bit you can see that we have a

00:07:19,500 --> 00:07:23,280
set timeout that's rendered as well as

00:07:21,360 --> 00:07:25,740
data from the server again

00:07:23,280 --> 00:07:29,640
refreshing not there and it's there to

00:07:25,740 --> 00:07:32,490
simply turn this on and keep track of it

00:07:29,640 --> 00:07:35,580
we take advantage of zone GS and a

00:07:32,490 --> 00:07:37,620
virtual library itself we'll take

00:07:35,580 --> 00:07:41,040
advantage of that and you only need to

00:07:37,620 --> 00:07:43,110
do is do the async truce if that on and

00:07:41,040 --> 00:07:45,180
if i refresh notice how we have the

00:07:43,110 --> 00:07:47,550
server rendered view that's doing the

00:07:45,180 --> 00:07:49,890
Gideon HTTP calls and then the client is

00:07:47,550 --> 00:07:51,900
also doing the same so Patrick just

00:07:49,890 --> 00:07:54,240
changed like a simple flag radio and

00:07:51,900 --> 00:07:55,740
that was really easy but underneath the

00:07:54,240 --> 00:07:58,070
scenes there's like some really powerful

00:07:55,740 --> 00:08:00,540
stuff going on there this is basically

00:07:58,070 --> 00:08:02,850
what we're doing is using the power zone

00:08:00,540 --> 00:08:06,030
J s to track all these synchronous

00:08:02,850 --> 00:08:07,500
events and know when they're resolved it

00:08:06,030 --> 00:08:09,210
just so happens that this particular

00:08:07,500 --> 00:08:11,970
pattern can be used in a number of areas

00:08:09,210 --> 00:08:13,350
as well including testing so Julie Ralph

00:08:11,970 --> 00:08:15,540
is going to talk later in the conference

00:08:13,350 --> 00:08:15,900
about all the new stuff going on with

00:08:15,540 --> 00:08:18,720
proach

00:08:15,900 --> 00:08:21,630
factor and karma and the cool thing is

00:08:18,720 --> 00:08:23,699
that they use this pattern so that you

00:08:21,630 --> 00:08:25,530
can very easily write asynchronous code

00:08:23,699 --> 00:08:27,840
in your test for those of you that have

00:08:25,530 --> 00:08:29,789
written JavaScript unit tests before you

00:08:27,840 --> 00:08:32,520
know that this can be a pain and it's

00:08:29,789 --> 00:08:35,219
completely solved with a lot of this the

00:08:32,520 --> 00:08:39,020
new protractor and new karma using ozone

00:08:35,219 --> 00:08:40,950
j/s the pattern built on top of zone j s

00:08:39,020 --> 00:08:43,589
apparently dependencies are more

00:08:40,950 --> 00:08:46,290
specifically platform-specific

00:08:43,589 --> 00:08:48,930
dependencies such as this where we're

00:08:46,290 --> 00:08:52,440
referencing the window and local storage

00:08:48,930 --> 00:08:54,630
to things that exist in the browser but

00:08:52,440 --> 00:08:56,100
do not exist on the on the server so if

00:08:54,630 --> 00:08:58,500
you try to run this code on the server

00:08:56,100 --> 00:09:00,540
it's gonna fail and a lot of people that

00:08:58,500 --> 00:09:02,760
have started to use angular universal

00:09:00,540 --> 00:09:06,120
they run into this type of issue all the

00:09:02,760 --> 00:09:08,400
time and in order to handle this we have

00:09:06,120 --> 00:09:10,080
to figure out some way of being able to

00:09:08,400 --> 00:09:11,910
access local storage but in a way that

00:09:10,080 --> 00:09:13,920
doesn't break our app on either side so

00:09:11,910 --> 00:09:19,020
Patrick how do we solve this particular

00:09:13,920 --> 00:09:21,959
issue all right so it's so let's first

00:09:19,020 --> 00:09:23,970
look at the problem so if i refresh the

00:09:21,959 --> 00:09:26,190
page you can see that our server render

00:09:23,970 --> 00:09:27,870
view is no longer no longer working but

00:09:26,190 --> 00:09:30,410
our client render views here we

00:09:27,870 --> 00:09:33,510
implemented a store to persist our data

00:09:30,410 --> 00:09:36,720
now if we look in our application we

00:09:33,510 --> 00:09:38,100
created a store using javascript using

00:09:36,720 --> 00:09:40,680
optic literal the interface is very

00:09:38,100 --> 00:09:42,890
simple using a get set but notice that

00:09:40,680 --> 00:09:45,060
we have there are platforms to fake

00:09:42,890 --> 00:09:47,550
implementation detail in here the

00:09:45,060 --> 00:09:50,640
location store which doesn't work on the

00:09:47,550 --> 00:09:54,150
server so let's go over how we would do

00:09:50,640 --> 00:09:55,680
that within a universal application we

00:09:54,150 --> 00:09:57,990
do that by taking advantage of

00:09:55,680 --> 00:09:59,270
dependency injection notice that I am

00:09:57,990 --> 00:10:03,320
now using

00:09:59,270 --> 00:10:05,510
di to inject the store here and at the

00:10:03,320 --> 00:10:07,820
top we're importing store from a

00:10:05,510 --> 00:10:09,710
universal store that we just created on

00:10:07,820 --> 00:10:12,770
the fly and if we look at this

00:10:09,710 --> 00:10:15,590
implementation detail of source store we

00:10:12,770 --> 00:10:17,840
can see that we have a class and

00:10:15,590 --> 00:10:20,030
remember that we use injectable and then

00:10:17,840 --> 00:10:22,640
the implementation is the same of gets

00:10:20,030 --> 00:10:24,380
and sets but rather than the implement

00:10:22,640 --> 00:10:27,440
rather than local storage we're

00:10:24,380 --> 00:10:29,900
interacting with a this stop back in now

00:10:27,440 --> 00:10:31,910
that is a dependency of the store and if

00:10:29,900 --> 00:10:34,190
we look up at the top notice that we

00:10:31,910 --> 00:10:35,990
have the store back in which is now an

00:10:34,190 --> 00:10:39,340
abstract class doesn't really do

00:10:35,990 --> 00:10:42,860
anything and that's because we are

00:10:39,340 --> 00:10:46,130
implementing that per pluck worm

00:10:42,860 --> 00:10:48,260
environment so this is the browser back

00:10:46,130 --> 00:10:50,330
in remember that we're now using local

00:10:48,260 --> 00:10:52,040
storage here this is the implementation

00:10:50,330 --> 00:10:54,860
detail and if we look at the node

00:10:52,040 --> 00:10:56,260
version we could take advantage of like

00:10:54,860 --> 00:10:58,460
Redis or any sort of whatever

00:10:56,260 --> 00:11:00,800
persistence that you want we could do

00:10:58,460 --> 00:11:05,140
here we're just using in-memory store at

00:11:00,800 --> 00:11:07,790
the moment and then if we look at the

00:11:05,140 --> 00:11:11,090
browser remember that inside of the

00:11:07,790 --> 00:11:13,880
library or something you have to export

00:11:11,090 --> 00:11:16,550
an array of your dependencies in this

00:11:13,880 --> 00:11:20,180
case store and remember that store is

00:11:16,550 --> 00:11:22,340
dependent on store back in right it's a

00:11:20,180 --> 00:11:24,980
store depends on store back in but we're

00:11:22,340 --> 00:11:27,890
using dependency injection say whenever

00:11:24,980 --> 00:11:30,620
your is San shading or creating store

00:11:27,890 --> 00:11:33,890
back in actually creates browser back in

00:11:30,620 --> 00:11:35,840
instead and that's because in the entry

00:11:33,890 --> 00:11:38,420
point of our application this is the

00:11:35,840 --> 00:11:40,820
top-level part of your app this is where

00:11:38,420 --> 00:11:42,980
we put our platform cific logic and

00:11:40,820 --> 00:11:45,050
where we're importing our dependencies

00:11:42,980 --> 00:11:48,110
and notice that we're importing our

00:11:45,050 --> 00:11:50,350
universal application here and again

00:11:48,110 --> 00:11:52,460
importing the browser version of that

00:11:50,350 --> 00:11:54,260
and then I guess you could go on the

00:11:52,460 --> 00:11:57,290
server and see the same thing here and

00:11:54,260 --> 00:11:59,040
as soon as we refresh will notice that

00:11:57,290 --> 00:12:01,529
the server and client

00:11:59,040 --> 00:12:02,570
Renard are now persisting on both server

00:12:01,529 --> 00:12:05,250
and clients

00:12:02,570 --> 00:12:07,170
so basically we're pushing all of our

00:12:05,250 --> 00:12:09,240
platform-specific dependencies to the

00:12:07,170 --> 00:12:11,070
edge and just like Dan wylene talked

00:12:09,240 --> 00:12:12,420
about in the last talk we're having an

00:12:11,070 --> 00:12:13,980
interface in front of that that were

00:12:12,420 --> 00:12:16,259
programming against and that allows us

00:12:13,980 --> 00:12:18,779
to do this switching depending on what

00:12:16,259 --> 00:12:20,610
the platform is and this pattern is the

00:12:18,779 --> 00:12:23,220
most powerful one that we've gone we've

00:12:20,610 --> 00:12:25,110
talked about today it's one that all of

00:12:23,220 --> 00:12:27,899
you will be using at some point with

00:12:25,110 --> 00:12:30,389
angular 2 because it's not just angular

00:12:27,899 --> 00:12:33,630
Universal it's all this other stuff in

00:12:30,389 --> 00:12:36,660
the new angular 2 ecosystem ionic native

00:12:33,630 --> 00:12:38,399
script serviceworker electron all this

00:12:36,660 --> 00:12:40,800
stuff is something where you're running

00:12:38,399 --> 00:12:43,920
your angular 2 app outside of the

00:12:40,800 --> 00:12:46,170
traditional browser and you at times

00:12:43,920 --> 00:12:48,959
will have to have a dependency that does

00:12:46,170 --> 00:12:51,209
work in one or another changes or

00:12:48,959 --> 00:12:53,490
whatever differences between them now

00:12:51,209 --> 00:12:56,069
even if you were only gonna run your

00:12:53,490 --> 00:12:58,139
angular 2 app web app in the traditional

00:12:56,069 --> 00:13:01,110
browser you still are gonna use this

00:12:58,139 --> 00:13:02,490
pattern with testing because just like

00:13:01,110 --> 00:13:05,639
in any other one where you would have

00:13:02,490 --> 00:13:09,540
your HTTP back-end to mock out your cost

00:13:05,639 --> 00:13:12,449
to HP you would use this same type of

00:13:09,540 --> 00:13:16,589
idea for mocking any of your different

00:13:12,449 --> 00:13:20,370
objects and isolating your tests so it's

00:13:16,589 --> 00:13:21,970
extremely powerful so let's recap what

00:13:20,370 --> 00:13:24,910
we talked about today

00:13:21,970 --> 00:13:28,780
these are the top three problems when

00:13:24,910 --> 00:13:31,960
you're building Universal apps and anger

00:13:28,780 --> 00:13:34,870
Universal has a great solution for these

00:13:31,960 --> 00:13:37,990
more specifically patterns built on top

00:13:34,870 --> 00:13:40,420
of these three libraries are really

00:13:37,990 --> 00:13:43,660
great solutions for these big problems

00:13:40,420 --> 00:13:46,510
pre-boot zone j s and di these are the

00:13:43,660 --> 00:13:49,950
three pieces of secret sauce with Ingo

00:13:46,510 --> 00:13:52,680
Universal and angular 2 itself in fact

00:13:49,950 --> 00:13:57,220
for the rest of this conference

00:13:52,680 --> 00:13:59,650
basically every talk is gonna have some

00:13:57,220 --> 00:14:02,890
part of it that is reliant on either

00:13:59,650 --> 00:14:05,950
zone zones or di they are the foundation

00:14:02,890 --> 00:14:09,100
of all of angular to the secret sauce

00:14:05,950 --> 00:14:10,660
for that so and the reasons why Patrick

00:14:09,100 --> 00:14:13,170
and I are so excited about angular

00:14:10,660 --> 00:14:15,520
universal and about angular 2 itself

00:14:13,170 --> 00:14:17,350
takes a lot guys we want we are going to

00:14:15,520 --> 00:14:20,200
be here you know all week we want to

00:14:17,350 --> 00:14:21,820
hear about your stories and definitely

00:14:20,200 --> 00:14:23,680
let us know if you have questions or

00:14:21,820 --> 00:14:26,580
anything like that so thanks a lot

00:14:23,680 --> 00:14:26,580

YouTube URL: https://www.youtube.com/watch?v=TCj_oC3m6_U


