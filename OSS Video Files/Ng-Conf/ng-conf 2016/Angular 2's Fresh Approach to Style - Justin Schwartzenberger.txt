Title: Angular 2's Fresh Approach to Style - Justin Schwartzenberger
Publication date: 2016-05-04
Playlist: ng-conf 2016
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:03,410 --> 00:00:18,420
of course I have failure right away

00:00:06,150 --> 00:00:21,960
that's awesome wow I was so ready for

00:00:18,420 --> 00:00:25,680
this right all right what is up ng-conf

00:00:21,960 --> 00:00:27,750
attendees shout out to all of our

00:00:25,680 --> 00:00:31,019
ng-conf extended viewers out there we're

00:00:27,750 --> 00:00:32,820
glad to have you right man I can't

00:00:31,019 --> 00:00:36,000
believe I'm sitting in this ng-content

00:00:32,820 --> 00:00:39,480
slot right between Papa and Star Wars

00:00:36,000 --> 00:00:41,040
and waling and typescript I mean that's

00:00:39,480 --> 00:00:46,200
like being surrounded by four points of

00:00:41,040 --> 00:00:48,360
Awesomeness right it's pretty dope I'm

00:00:46,200 --> 00:00:49,920
Justin Schwartzman Berger and I'm stoked

00:00:48,360 --> 00:00:53,010
to be telling you about angular twos

00:00:49,920 --> 00:00:54,930
fresh approach to style but before I

00:00:53,010 --> 00:00:57,960
begin I want to start off with an

00:00:54,930 --> 00:00:59,850
acknowledgement you see we're all out

00:00:57,960 --> 00:01:01,649
there working hard writing a bunch of

00:00:59,850 --> 00:01:04,350
front-end code for client applications

00:01:01,649 --> 00:01:07,200
and along that journey we start getting

00:01:04,350 --> 00:01:09,330
told that we're not designers and maybe

00:01:07,200 --> 00:01:11,430
we hear it at our company or from others

00:01:09,330 --> 00:01:14,070
in the industry where we read about it

00:01:11,430 --> 00:01:16,979
online and it's weird we start chanting

00:01:14,070 --> 00:01:19,950
it ourselves right but I'm not a

00:01:16,979 --> 00:01:21,930
designer and okay sure

00:01:19,950 --> 00:01:24,780
maybe as front-end developers we're not

00:01:21,930 --> 00:01:26,640
out there building mock-ups or creating

00:01:24,780 --> 00:01:29,220
graphics coming up with a color scheme

00:01:26,640 --> 00:01:32,280
or a font strategy but we are

00:01:29,220 --> 00:01:36,540
implementing those front-end developers

00:01:32,280 --> 00:01:39,810
our design implementers we are you are

00:01:36,540 --> 00:01:42,689
we need to embrace that I mean we have

00:01:39,810 --> 00:01:44,460
been since day one right we got into

00:01:42,689 --> 00:01:49,759
this web dev game by learning the

00:01:44,460 --> 00:01:54,630
trifecta of skills JavaScript HTML and

00:01:49,759 --> 00:01:57,479
CSS implementers of design it's what we

00:01:54,630 --> 00:02:00,840
do I mean we bring a ton of style right

00:01:57,479 --> 00:02:01,439
in fact front-end developers are on

00:02:00,840 --> 00:02:04,500
point

00:02:01,439 --> 00:02:06,240
bringing style to the web app space hey

00:02:04,500 --> 00:02:12,120
you know else is bring style to the web

00:02:06,240 --> 00:02:13,830
face that one angular heck yeah it is

00:02:12,120 --> 00:02:16,470
let's talk a little bit about how it's

00:02:13,830 --> 00:02:18,239
doing that so we're all familiar

00:02:16,470 --> 00:02:20,700
especially from the last presentation

00:02:18,239 --> 00:02:23,849
about how we get CSS into our components

00:02:20,700 --> 00:02:25,860
right we can make use of this styles or

00:02:23,849 --> 00:02:28,290
the style URLs component metadata

00:02:25,860 --> 00:02:30,180
property and we're probably familiar

00:02:28,290 --> 00:02:32,010
with what angular is doing with that CSS

00:02:30,180 --> 00:02:34,500
that we write it's sticking it in this

00:02:32,010 --> 00:02:37,049
style tag and then sticking that up in

00:02:34,500 --> 00:02:38,340
the head tag of our DOM and you might

00:02:37,049 --> 00:02:41,129
have even noticed that angular is

00:02:38,340 --> 00:02:44,790
shimming that CSS so you write attaching

00:02:41,129 --> 00:02:46,410
this unique attribute name but why the

00:02:44,790 --> 00:02:50,060
heck is it doing this and what's the

00:02:46,410 --> 00:02:51,989
purpose let's start with the why so

00:02:50,060 --> 00:02:54,510
components in angular actually have a

00:02:51,989 --> 00:02:57,260
view encapsulation mode now there's

00:02:54,510 --> 00:03:01,530
three of these modes available native

00:02:57,260 --> 00:03:02,700
none and emulated so let's hop into some

00:03:01,530 --> 00:03:04,849
code and we'll see these things in

00:03:02,700 --> 00:03:04,849
action

00:03:06,410 --> 00:03:11,819
so in our components we can make use of

00:03:09,329 --> 00:03:14,910
this component metadata property named

00:03:11,819 --> 00:03:17,430
encapsulation here to set our view

00:03:14,910 --> 00:03:19,590
encapsulation mode on our components now

00:03:17,430 --> 00:03:22,170
I'm using typescript here and type

00:03:19,590 --> 00:03:24,989
angular exports this typescript enum

00:03:22,170 --> 00:03:29,340
named view encapsulation that we can use

00:03:24,989 --> 00:03:33,230
to set this encapsulation value so

00:03:29,340 --> 00:03:33,230
native oops

00:03:34,210 --> 00:03:38,500
is designed to render our components

00:03:36,550 --> 00:03:41,310
using this shadow Dom in browsers that

00:03:38,500 --> 00:03:45,460
support it like Chrome over here

00:03:41,310 --> 00:03:47,050
basically implementing web components so

00:03:45,460 --> 00:03:49,120
angular is gonna take our component

00:03:47,050 --> 00:03:51,250
template it's going to put it inside of

00:03:49,120 --> 00:03:53,740
this shadow root and it's gonna take the

00:03:51,250 --> 00:03:55,900
CSS that we wrote put it in a style tag

00:03:53,740 --> 00:03:58,210
but it's gonna put that style tag inside

00:03:55,900 --> 00:04:00,670
this shadow root and it's gonna output

00:03:58,210 --> 00:04:02,470
our CSS the same way we wrote it because

00:04:00,670 --> 00:04:07,380
it's encapsulated within this shadow

00:04:02,470 --> 00:04:11,350
boundary so that's native mode now none

00:04:07,380 --> 00:04:19,420
none is designed to well dunno view

00:04:11,350 --> 00:04:23,560
encapsulation so we've got no shadow Dom

00:04:19,420 --> 00:04:26,020
okay now angular is taking the CSS that

00:04:23,560 --> 00:04:28,480
we write and it's putting into a style

00:04:26,020 --> 00:04:31,000
tag and it's putting that up in the head

00:04:28,480 --> 00:04:33,640
tag of the Dom but just like native mode

00:04:31,000 --> 00:04:37,540
it's outputting that CSS in the same way

00:04:33,640 --> 00:04:41,020
that we wrote it okay because we told it

00:04:37,540 --> 00:04:43,900
no encapsulation and then there's

00:04:41,020 --> 00:04:45,700
emulated now emulated is the default

00:04:43,900 --> 00:04:48,010
view encapsulation mode for components

00:04:45,700 --> 00:04:51,670
in angular out-of-the-box so we can get

00:04:48,010 --> 00:04:53,920
to the why in emulated mode angular is

00:04:51,670 --> 00:04:56,020
doing this stuff with our CSS to

00:04:53,920 --> 00:04:58,840
encapsulate it within our component and

00:04:56,020 --> 00:05:02,880
its view contents so just like the

00:04:58,840 --> 00:05:05,710
shadow Dom and the web component concept

00:05:02,880 --> 00:05:07,540
so angular is gonna take this CSS that

00:05:05,710 --> 00:05:09,700
we wrote it's gonna stick it inside of a

00:05:07,540 --> 00:05:12,460
style tag and stick that up in the head

00:05:09,700 --> 00:05:15,100
tag of the Dom but angular is gonna shim

00:05:12,460 --> 00:05:19,090
that CSS that we wrote attaching these

00:05:15,100 --> 00:05:20,890
unique attribute names okay and it's

00:05:19,090 --> 00:05:22,990
gonna take this unique attribute name

00:05:20,890 --> 00:05:24,790
and add it to all of our Dom elements

00:05:22,990 --> 00:05:29,020
that are coming from this component

00:05:24,790 --> 00:05:31,540
template so it's creating this scoping

00:05:29,020 --> 00:05:32,740
of our CSS to our component now what

00:05:31,540 --> 00:05:34,720
this means is that we're not going to

00:05:32,740 --> 00:05:38,770
get any bleed of our CSS outside of this

00:05:34,720 --> 00:05:41,080
component so if we come over here and we

00:05:38,770 --> 00:05:42,760
add another child component to here so

00:05:41,080 --> 00:05:44,350
I'm already importing this real mud

00:05:42,760 --> 00:05:46,300
component and it's already added to the

00:05:44,350 --> 00:05:47,100
directives so I can go ahead and use it

00:05:46,300 --> 00:05:49,110
in the template

00:05:47,100 --> 00:05:50,850
so I have this bigger element here and

00:05:49,110 --> 00:05:53,030
I'm gonna put this real mug inside of

00:05:50,850 --> 00:05:53,030
there

00:05:57,110 --> 00:06:02,470
now this real mud component in its

00:06:00,080 --> 00:06:05,930
template is making a use of a CSS class

00:06:02,470 --> 00:06:09,110
named muck here on one of its elements

00:06:05,930 --> 00:06:12,139
okay ten my user cart component actually

00:06:09,110 --> 00:06:13,909
has a class with that same name so if we

00:06:12,139 --> 00:06:18,409
inspect the CSS for these things check

00:06:13,909 --> 00:06:20,330
these things out we're gonna see that

00:06:18,409 --> 00:06:22,729
both of them have this mud class right

00:06:20,330 --> 00:06:25,310
and this user cart component has a bunch

00:06:22,729 --> 00:06:27,110
of border styles and a min width and the

00:06:25,310 --> 00:06:29,650
real mud mud class just has a border

00:06:27,110 --> 00:06:31,400
radius to give it some rounded corners

00:06:29,650 --> 00:06:35,360
so we check this thing out in the

00:06:31,400 --> 00:06:36,610
browser we can see that we get no bleed

00:06:35,360 --> 00:06:39,289
okay

00:06:36,610 --> 00:06:40,610
this image here from our user car

00:06:39,289 --> 00:06:43,039
component is getting all that border

00:06:40,610 --> 00:06:46,490
style and the other ones not if we

00:06:43,039 --> 00:06:48,229
inspect this thing we can see that this

00:06:46,490 --> 00:06:50,599
element is getting shim with this

00:06:48,229 --> 00:06:54,229
underscore ng content attribute

00:06:50,599 --> 00:06:59,539
underscore ng content - kyf - - and

00:06:54,229 --> 00:07:02,240
we've got a different shim on here on

00:06:59,539 --> 00:07:04,550
our real mug and this one's ng content -

00:07:02,240 --> 00:07:09,020
kfy - 3 so they've got their own unique

00:07:04,550 --> 00:07:10,940
ones and if we look at the style here we

00:07:09,020 --> 00:07:15,680
can see that the CSS for both of our

00:07:10,940 --> 00:07:17,659
components is getting set up with that

00:07:15,680 --> 00:07:19,190
those two unique attribute names right

00:07:17,659 --> 00:07:22,039
so here's our style for our user card

00:07:19,190 --> 00:07:26,659
component it's mug is getting ng content

00:07:22,039 --> 00:07:28,190
- and here's the style for our real mud

00:07:26,659 --> 00:07:31,759
component and it's getting its mud class

00:07:28,190 --> 00:07:33,199
with ng content - 3 and so that's giving

00:07:31,759 --> 00:07:35,419
us this pairing in the scoping

00:07:33,199 --> 00:07:37,789
so now angular is creating these unique

00:07:35,419 --> 00:07:39,949
attribute names for us when it processes

00:07:37,789 --> 00:07:42,680
our components and it's dynamically

00:07:39,949 --> 00:07:44,779
generating that those 3 characters there

00:07:42,680 --> 00:07:47,000
in between that number so what this

00:07:44,779 --> 00:07:50,750
means is if we were to refresh the

00:07:47,000 --> 00:07:53,089
browser here okay and check this thing

00:07:50,750 --> 00:07:56,620
out we're gonna see that we're gonna get

00:07:53,089 --> 00:07:56,620
a new unique attribute

00:07:58,070 --> 00:08:04,620
this time we're looking at - uim - three

00:08:02,430 --> 00:08:06,780
so what this means is don't go using

00:08:04,620 --> 00:08:08,960
this in any CSS styles that you write

00:08:06,780 --> 00:08:12,990
because that's not for this okay

00:08:08,960 --> 00:08:15,360
so angular is doing this using this

00:08:12,990 --> 00:08:19,310
attribute selector for us to do the

00:08:15,360 --> 00:08:19,310
scoping thing which is pretty cool right

00:08:20,690 --> 00:08:26,640
so with web web components the shadow

00:08:24,870 --> 00:08:28,680
Dom is used to encapsulate our style

00:08:26,640 --> 00:08:31,500
keeping unwanted styles out and

00:08:28,680 --> 00:08:33,780
containing it styles within with

00:08:31,500 --> 00:08:36,539
angular's embedded most CSS shim we get

00:08:33,780 --> 00:08:38,190
that same encapsulation and in both

00:08:36,539 --> 00:08:41,190
cases we get it without even having to

00:08:38,190 --> 00:08:43,830
think about it when we write it I mean

00:08:41,190 --> 00:08:47,370
really let's be real and this is totally

00:08:43,830 --> 00:08:49,650
liberating right because as implementers

00:08:47,370 --> 00:08:52,020
of design we've all been down that road

00:08:49,650 --> 00:08:53,940
of having to deal with styles bleeding

00:08:52,020 --> 00:08:55,740
down the Dom tree and having to come up

00:08:53,940 --> 00:08:57,390
with different naming conventions and

00:08:55,740 --> 00:09:00,660
syntaxes to try and solve that

00:08:57,390 --> 00:09:03,390
encapsulation right I mean we can even

00:09:00,660 --> 00:09:05,400
build a new component and if we want to

00:09:03,390 --> 00:09:07,890
show something as selected use a class

00:09:05,400 --> 00:09:10,050
name as generic has selected and we

00:09:07,890 --> 00:09:12,000
could use that same class name on all of

00:09:10,050 --> 00:09:13,740
our elements in our in our application

00:09:12,000 --> 00:09:15,750
and they'll all be their own unique

00:09:13,740 --> 00:09:19,130
version of selected so we have this

00:09:15,750 --> 00:09:23,550
complete freedom for CSS name reuse I

00:09:19,130 --> 00:09:26,430
can even get crazy come over here and go

00:09:23,550 --> 00:09:28,770
into this user cart component CSS and

00:09:26,430 --> 00:09:30,480
you know I'm gonna add this image

00:09:28,770 --> 00:09:35,010
selector here and give this thing some

00:09:30,480 --> 00:09:36,510
styling and man I know this probably

00:09:35,010 --> 00:09:38,220
seems like a really bad idea right I

00:09:36,510 --> 00:09:40,260
mean image selector it's pretty common

00:09:38,220 --> 00:09:42,600
Dom element this thing's not that

00:09:40,260 --> 00:09:44,850
specific I mean your senses are calling

00:09:42,600 --> 00:09:46,560
like this is gonna be that idea right

00:09:44,850 --> 00:09:50,040
I'm not even gonna be worried about it

00:09:46,560 --> 00:09:53,400
why well we hope hop over to the browser

00:09:50,040 --> 00:09:56,000
here and inspect this thing and check

00:09:53,400 --> 00:09:56,000
out the style

00:09:56,930 --> 00:10:01,080
we can see that angular's shimming that

00:09:59,370 --> 00:10:03,480
image selector that we wrote right

00:10:01,080 --> 00:10:05,279
adding this unique attribute name and as

00:10:03,480 --> 00:10:07,500
we know this unique attribute name is

00:10:05,279 --> 00:10:09,060
only getting put on the elements that

00:10:07,500 --> 00:10:13,020
are coming from the specific component

00:10:09,060 --> 00:10:14,760
so we got our encapsulation right so no

00:10:13,020 --> 00:10:17,040
other image elements outside of this

00:10:14,760 --> 00:10:18,810
component or anywhere down the component

00:10:17,040 --> 00:10:23,839
tree were harmed in the making of this

00:10:18,810 --> 00:10:26,550
style and look yeah it's awesome right I

00:10:23,839 --> 00:10:28,830
mean we've been trying to solve this

00:10:26,550 --> 00:10:29,750
scoping thing in the web space for a

00:10:28,830 --> 00:10:32,310
while now right

00:10:29,750 --> 00:10:34,589
angular just slid in here and styled it

00:10:32,310 --> 00:10:36,870
out for us I mean why is this not

00:10:34,589 --> 00:10:43,370
getting more fanfare we got to spread

00:10:36,870 --> 00:10:46,170
the word all right so take some water

00:10:43,370 --> 00:10:48,480
web components have these shadow Dom

00:10:46,170 --> 00:10:52,350
pseudo-class selectors that let us work

00:10:48,480 --> 00:10:55,020
with the host element right so we got

00:10:52,350 --> 00:10:58,170
things like a colon host and colon host

00:10:55,020 --> 00:11:01,050
- context no worries because angular's

00:10:58,170 --> 00:11:02,550
got us covered on those two let's start

00:11:01,050 --> 00:11:05,940
talking about what colon host is used

00:11:02,550 --> 00:11:08,190
for so when we create our components we

00:11:05,940 --> 00:11:10,320
provide a selector right that's telling

00:11:08,190 --> 00:11:12,300
you angular hey be on the lookout for a

00:11:10,320 --> 00:11:14,279
custom element inside the Dom if you

00:11:12,300 --> 00:11:16,589
find that matching selector inject our

00:11:14,279 --> 00:11:18,930
component template inside of it so when

00:11:16,589 --> 00:11:21,270
we want to style that custom element the

00:11:18,930 --> 00:11:26,880
host element we can write a selector of

00:11:21,270 --> 00:11:28,790
colon host so over here in this user

00:11:26,880 --> 00:11:32,940
cart component I'm gonna add this

00:11:28,790 --> 00:11:36,050
selector of colon host okay we give this

00:11:32,940 --> 00:11:36,050
thing a border

00:11:40,070 --> 00:11:43,640
and some padding

00:11:44,430 --> 00:11:48,450
now there's one other style what we need

00:11:46,710 --> 00:11:50,610
to give this thing because we're

00:11:48,450 --> 00:11:51,990
targeting a custom element browsers

00:11:50,610 --> 00:11:54,030
don't have any default styling

00:11:51,990 --> 00:11:56,790
out-of-the-box for those so we want to

00:11:54,030 --> 00:11:58,470
give this thing a display box context so

00:11:56,790 --> 00:12:04,650
I'm gonna give it a display a block as

00:11:58,470 --> 00:12:06,320
well okay now if we hop over to the

00:12:04,650 --> 00:12:10,380
browser and check this thing out

00:12:06,320 --> 00:12:12,780
obviously we see our style applied and

00:12:10,380 --> 00:12:14,880
when we look at this user card we see

00:12:12,780 --> 00:12:17,370
that in angular is adding another one of

00:12:14,880 --> 00:12:20,130
these custom attributes this one named

00:12:17,370 --> 00:12:22,380
underscore ng host - some random

00:12:20,130 --> 00:12:25,200
characters - a number and it's putting

00:12:22,380 --> 00:12:28,380
that onto our user card right and up in

00:12:25,200 --> 00:12:32,400
our style we can see that angular has

00:12:28,380 --> 00:12:35,130
shimmed this CSS for us changing that

00:12:32,400 --> 00:12:37,650
colon host selector to be this

00:12:35,130 --> 00:12:39,360
underscore ng host attribute okay

00:12:37,650 --> 00:12:43,170
because colon host doesn't work outside

00:12:39,360 --> 00:12:45,480
of shadow dom mode now just like

00:12:43,170 --> 00:12:47,100
underscore ng content and either is

00:12:45,480 --> 00:12:48,720
creating these things for us dynamically

00:12:47,100 --> 00:12:50,880
when it processes our components

00:12:48,720 --> 00:12:54,990
so don't go styling using this one

00:12:50,880 --> 00:12:57,450
either right and if we look down here to

00:12:54,990 --> 00:13:00,570
our Dom we can see that angular is

00:12:57,450 --> 00:13:02,550
adding this ng host only to our custom

00:13:00,570 --> 00:13:04,710
elements that we're telling that we want

00:13:02,550 --> 00:13:06,870
to use for our components right so user

00:13:04,710 --> 00:13:09,000
card here's got one and if you go into

00:13:06,870 --> 00:13:12,000
this figure element and we check this

00:13:09,000 --> 00:13:14,130
thing out we can see that real mug has

00:13:12,000 --> 00:13:15,840
one as well so it's only putting it on

00:13:14,130 --> 00:13:18,690
that custom element which makes sense

00:13:15,840 --> 00:13:22,140
because they are the host of our

00:13:18,690 --> 00:13:24,630
components after all right so angular is

00:13:22,140 --> 00:13:27,210
doing this CSS shim for us when running

00:13:24,630 --> 00:13:28,890
an embedded mode and again that's the

00:13:27,210 --> 00:13:30,570
default view encapsulation mode for

00:13:28,890 --> 00:13:33,360
angular components out-of-the-box and

00:13:30,570 --> 00:13:37,050
this gets to be pretty cool too because

00:13:33,360 --> 00:13:39,390
now we can hop over to our component so

00:13:37,050 --> 00:13:41,960
we put this user card component into

00:13:39,390 --> 00:13:41,960
native mode

00:13:45,410 --> 00:13:54,169
and we can switch back over to the

00:13:47,299 --> 00:13:55,729
browser and inspect this thing and see

00:13:54,169 --> 00:13:58,819
that this shadow Dom is being used right

00:13:55,729 --> 00:14:01,459
so our style is getting output as is and

00:13:58,819 --> 00:14:04,009
we've got this colon host selector in

00:14:01,459 --> 00:14:05,989
here being output as we wrote it because

00:14:04,009 --> 00:14:09,019
that selector works when we're in shadow

00:14:05,989 --> 00:14:10,369
Dom so we write the CSS as if we're

00:14:09,019 --> 00:14:12,409
writing it for web components and

00:14:10,369 --> 00:14:15,699
angular knows what to do with it when

00:14:12,409 --> 00:14:15,699
we're rolling in an embedded mode or not

00:14:16,059 --> 00:14:19,929
okay man

00:14:17,539 --> 00:14:22,609
I just felt a disturbance in the force

00:14:19,929 --> 00:14:26,689
as if millions of voices just cried out

00:14:22,609 --> 00:14:28,939
CSS bleed okay I know you're sitting

00:14:26,689 --> 00:14:30,589
there thinking come on Justin we knew

00:14:28,939 --> 00:14:32,359
that image selector was like playing

00:14:30,589 --> 00:14:34,459
with the dark side all right I mean

00:14:32,359 --> 00:14:37,339
there's we got this opacity bleeding all

00:14:34,459 --> 00:14:39,439
over the place right but hold on let's

00:14:37,339 --> 00:14:42,499
pump the brakes it's not actually bleed

00:14:39,439 --> 00:14:44,179
okay because our parent component our

00:14:42,499 --> 00:14:46,729
user car component is in native mode

00:14:44,179 --> 00:14:49,009
it's using the shadow Dom right so our

00:14:46,729 --> 00:14:51,799
image selector is being output as is

00:14:49,009 --> 00:14:53,359
with no shim so it's gonna pick up all

00:14:51,799 --> 00:14:56,869
the image elements within this shadow

00:14:53,359 --> 00:15:00,139
boundary now our child component real

00:14:56,869 --> 00:15:03,079
mug is not in native mode so it's

00:15:00,139 --> 00:15:05,299
rendering out its markup within this

00:15:03,079 --> 00:15:07,759
shadow boundary so all of its image

00:15:05,299 --> 00:15:11,149
elements are fair game for that selector

00:15:07,759 --> 00:15:16,549
now we can solve this if we hop over to

00:15:11,149 --> 00:15:20,589
our real mutt component and we put this

00:15:16,549 --> 00:15:24,100
puppy in a native mode as well all right

00:15:20,589 --> 00:15:24,100
back over the browser

00:15:24,460 --> 00:15:28,720
don't you see that fix is applied right

00:15:26,680 --> 00:15:32,230
if we inspect this thing we've got our

00:15:28,720 --> 00:15:34,120
shadow Dom being used and so that shadow

00:15:32,230 --> 00:15:35,650
root and that shadow boundary is keeping

00:15:34,120 --> 00:15:39,220
out that other style right so now we've

00:15:35,650 --> 00:15:42,580
got that fixed but I mean if we go this

00:15:39,220 --> 00:15:44,980
route then you know it's most likely

00:15:42,580 --> 00:15:49,270
that were shadow Dom all the way down

00:15:44,980 --> 00:15:51,430
the tree so well shadow Dom is cool we

00:15:49,270 --> 00:15:55,360
could say that angular's emulation is

00:15:51,430 --> 00:15:56,800
cooler maybe I don't know maybe maybe

00:15:55,360 --> 00:15:59,560
not depends on what you're trying to

00:15:56,800 --> 00:16:02,230
pull off with your CSS right it's still

00:15:59,560 --> 00:16:03,250
pretty cool though all right let's talk

00:16:02,230 --> 00:16:06,940
another thought another one of these

00:16:03,250 --> 00:16:09,190
shadow Dom selectors : host - context is

00:16:06,940 --> 00:16:12,010
designed to say hey if the provided

00:16:09,190 --> 00:16:14,830
selector is either on the host element

00:16:12,010 --> 00:16:16,930
or anywhere up the Dom tree from the

00:16:14,830 --> 00:16:21,070
host element go ahead and apply these

00:16:16,930 --> 00:16:25,380
styles to the host so we can come over

00:16:21,070 --> 00:16:28,450
here and in this user card component

00:16:25,380 --> 00:16:31,000
I've got this figure element right and

00:16:28,450 --> 00:16:33,010
it has a CSS class of card on it and our

00:16:31,000 --> 00:16:35,230
real mud component is nested inside of

00:16:33,010 --> 00:16:39,400
that so let's use that class card -

00:16:35,230 --> 00:16:41,710
style against that so down in the CSS

00:16:39,400 --> 00:16:44,910
for our real mud component I'm going to

00:16:41,710 --> 00:16:47,350
add this colon host - context selector

00:16:44,910 --> 00:16:49,230
I'm going to tell it hey be on the

00:16:47,350 --> 00:16:51,760
lookout for this class card

00:16:49,230 --> 00:16:53,860
now just like colon host we're targeting

00:16:51,760 --> 00:16:56,080
a custom element here so we need to give

00:16:53,860 --> 00:16:59,500
this thing a display box context so

00:16:56,080 --> 00:17:02,520
display a block okay and then I'm gonna

00:16:59,500 --> 00:17:02,520
give it a background color

00:17:06,350 --> 00:17:09,490
and so padding

00:17:09,870 --> 00:17:13,039
and a wit

00:17:14,600 --> 00:17:21,240
and we hop back over the browser oops

00:17:18,230 --> 00:17:23,430
browser we can see our Styles applied

00:17:21,240 --> 00:17:25,440
visually right and with both of these

00:17:23,430 --> 00:17:27,450
components still in native mode we can

00:17:25,440 --> 00:17:30,050
inspect this thing and we can see that

00:17:27,450 --> 00:17:30,050
our style

00:17:33,789 --> 00:17:38,330
of that clone host context is being

00:17:36,440 --> 00:17:41,539
output as is because that works for our

00:17:38,330 --> 00:17:43,220
native shadow down mode right now let's

00:17:41,539 --> 00:17:44,990
add another one of these and this time

00:17:43,220 --> 00:17:47,029
I'm going to add it outside of that tree

00:17:44,990 --> 00:17:49,159
where that class card is in so I'm going

00:17:47,029 --> 00:17:51,080
to go into this app component and in

00:17:49,159 --> 00:17:52,970
this app component I've already imported

00:17:51,080 --> 00:17:54,740
our real mutt component and added it to

00:17:52,970 --> 00:17:56,659
the directives so I can use it inside of

00:17:54,740 --> 00:17:58,870
this template so I'm going to add real

00:17:56,659 --> 00:17:58,870
mud

00:18:08,560 --> 00:18:15,610
we can see that the second one is not

00:18:14,050 --> 00:18:17,500
gonna get the style applied because it's

00:18:15,610 --> 00:18:19,960
not matching that selector of host

00:18:17,500 --> 00:18:22,480
context on those rules so let's add one

00:18:19,960 --> 00:18:24,790
more here and this time I'm gonna add it

00:18:22,480 --> 00:18:26,890
and I'm gonna put the CSS class on this

00:18:24,790 --> 00:18:29,410
thing because again host context is

00:18:26,890 --> 00:18:31,150
designed to work if that matching

00:18:29,410 --> 00:18:37,470
selector is found on the host element as

00:18:31,150 --> 00:18:37,470
well so class card

00:18:38,520 --> 00:18:43,860
we let this thing reload we can see that

00:18:42,420 --> 00:18:47,220
that third one is getting the style

00:18:43,860 --> 00:18:49,320
right okay so that's how : host context

00:18:47,220 --> 00:18:51,300
is designed to be used and how it works

00:18:49,320 --> 00:18:53,850
in the shadow Dom native mode so

00:18:51,300 --> 00:18:58,830
naturally we're gonna ask angular where

00:18:53,850 --> 00:19:03,060
you at if we hop over to our code and we

00:18:58,830 --> 00:19:04,920
set both of this real mutt component and

00:19:03,060 --> 00:19:11,160
this user car component into emulated

00:19:04,920 --> 00:19:15,960
mode hop back over the browser let this

00:19:11,160 --> 00:19:18,390
thing load and yours like please I got

00:19:15,960 --> 00:19:20,990
this if we expect this thing and check

00:19:18,390 --> 00:19:20,990
out his style

00:19:23,580 --> 00:19:28,309
we can see that any other shimming this

00:19:25,590 --> 00:19:30,989
thing the same way it did : host

00:19:28,309 --> 00:19:32,730
replacing that on that host context that

00:19:30,989 --> 00:19:35,129
we wrote with this underscore ng host

00:19:32,730 --> 00:19:37,919
attribute and combining it with our card

00:19:35,129 --> 00:19:40,289
class here now you notice there's a

00:19:37,919 --> 00:19:43,710
comma in there so angular is writing out

00:19:40,289 --> 00:19:45,539
two selectors for us yep two because

00:19:43,710 --> 00:19:48,179
remember colon host - context is

00:19:45,539 --> 00:19:50,730
designed to work when the provided

00:19:48,179 --> 00:19:53,279
selectors either on the host element so

00:19:50,730 --> 00:19:56,460
selector one here underscore ng host dot

00:19:53,279 --> 00:19:58,109
the class and it's there to work when

00:19:56,460 --> 00:20:00,629
that provided selectors anywhere up the

00:19:58,109 --> 00:20:04,739
Dom tree from our host element so

00:20:00,629 --> 00:20:07,379
selector - - class space rng host

00:20:04,739 --> 00:20:10,350
attribute right so good ol angular's got

00:20:07,379 --> 00:20:12,570
us covered and again we wrote this CSS

00:20:10,350 --> 00:20:15,899
in one way and angular handled the

00:20:12,570 --> 00:20:18,269
details for us now as we know not all

00:20:15,899 --> 00:20:21,379
browser vendors support this shadow dom

00:20:18,269 --> 00:20:24,600
and this web component thing yet right

00:20:21,379 --> 00:20:27,450
but it's all good because we're using

00:20:24,600 --> 00:20:30,029
angular and angular lets us write this

00:20:27,450 --> 00:20:33,239
CSS for the future and through emulation

00:20:30,029 --> 00:20:36,330
mode have it work in the present so

00:20:33,239 --> 00:20:39,090
Jamie where you at you are a design

00:20:36,330 --> 00:20:42,239
implementer Leah Greg I know you're

00:20:39,090 --> 00:20:44,789
tuning in design implementers sell a

00:20:42,239 --> 00:20:48,210
front-end developers we are design

00:20:44,789 --> 00:20:49,769
implementers an angular angular is here

00:20:48,210 --> 00:20:52,379
to help us implement that design more

00:20:49,769 --> 00:20:53,700
logically thanks a ton for let me share

00:20:52,379 --> 00:20:56,539
this stuff with you I really appreciate

00:20:53,700 --> 00:20:56,539

YouTube URL: https://www.youtube.com/watch?v=J5Bvy4KhIs0


