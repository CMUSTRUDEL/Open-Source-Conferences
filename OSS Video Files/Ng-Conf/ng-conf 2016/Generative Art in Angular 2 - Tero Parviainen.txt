Title: Generative Art in Angular 2 - Tero Parviainen
Publication date: 2016-05-04
Playlist: ng-conf 2016
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:04,490 --> 00:00:11,130
all right thank you Joe hello and Giller

00:00:07,830 --> 00:00:13,200
people I want to talk about a project

00:00:11,130 --> 00:00:16,500
that I've been playing with lately

00:00:13,200 --> 00:00:18,869
which really is part of my sort of quest

00:00:16,500 --> 00:00:22,109
to kind of figure out how to actually

00:00:18,869 --> 00:00:24,359
build applications in angular 2 but

00:00:22,109 --> 00:00:27,420
before I actually talk any more about it

00:00:24,359 --> 00:00:29,099
I would just like to show it to you so

00:00:27,420 --> 00:00:32,640
if you don't mind that you have a

00:00:29,099 --> 00:00:34,290
connected device with you that has a web

00:00:32,640 --> 00:00:36,540
audio capable browser in it

00:00:34,290 --> 00:00:39,390
so basically Chrome or Firefox or Safari

00:00:36,540 --> 00:00:41,610
would you mind visiting this URL here

00:00:39,390 --> 00:00:47,270
turning up the sound for a moment and

00:00:41,610 --> 00:00:47,270
just playing with it for a few seconds

00:00:50,070 --> 00:00:52,640
yes

00:01:06,530 --> 00:01:11,830
so this is roughly what we are looking

00:01:09,620 --> 00:01:11,830
at

00:01:29,450 --> 00:01:31,450
Oh

00:01:42,049 --> 00:01:50,340
okay so when the angular team started

00:01:47,729 --> 00:01:52,619
working on angular 2 a couple of years

00:01:50,340 --> 00:01:55,439
ago I'm sure this is not exactly the

00:01:52,619 --> 00:01:57,539
kind of application they had in mind but

00:01:55,439 --> 00:02:00,090
what seems to me to have happened here

00:01:57,539 --> 00:02:02,549
is that the platform they have built is

00:02:00,090 --> 00:02:06,539
just way too cool to be wasted on doing

00:02:02,549 --> 00:02:09,060
only useful things because we can also

00:02:06,539 --> 00:02:11,760
use it to do fun things things that

00:02:09,060 --> 00:02:14,129
might not necessarily translate to any

00:02:11,760 --> 00:02:16,560
business value but that are just fun to

00:02:14,129 --> 00:02:19,110
do in other words we can use it to play

00:02:16,560 --> 00:02:22,349
to do things that are just you know fun

00:02:19,110 --> 00:02:26,370
to do and there's joy in doing them now

00:02:22,349 --> 00:02:29,430
of course we all have this kind of urge

00:02:26,370 --> 00:02:31,140
to play built into us but I do think we

00:02:29,430 --> 00:02:33,930
don't always remember that we are also

00:02:31,140 --> 00:02:35,879
allowed to play with these tools that we

00:02:33,930 --> 00:02:38,730
usually use for doing serious business

00:02:35,879 --> 00:02:40,709
such as angular 2 because the same

00:02:38,730 --> 00:02:42,450
features that make these tools great for

00:02:40,709 --> 00:02:44,359
doing you know business applications

00:02:42,450 --> 00:02:47,250
makes them pretty good for doing

00:02:44,359 --> 00:02:49,980
experiments and toys and little art

00:02:47,250 --> 00:02:52,680
projects such as the one we were just

00:02:49,980 --> 00:02:56,190
playing with there which is essentially

00:02:52,680 --> 00:02:59,459
just an angular component so it's called

00:02:56,190 --> 00:03:02,250
chimes and what it does is it listens to

00:02:59,459 --> 00:03:04,560
click events on its host element and it

00:03:02,250 --> 00:03:07,470
shovels those click events into this

00:03:04,560 --> 00:03:09,389
oryx jeaious subject or the coordinates

00:03:07,470 --> 00:03:11,760
of those click events and then it

00:03:09,389 --> 00:03:15,510
further Maps those events to this other

00:03:11,760 --> 00:03:17,069
rxjs observable it's called chimes where

00:03:15,510 --> 00:03:20,930
it also attaches to each of those

00:03:17,069 --> 00:03:23,700
coordinate pairs a random musical note

00:03:20,930 --> 00:03:26,489
those random musical notes are selected

00:03:23,700 --> 00:03:29,609
from a combination of five notes that's

00:03:26,489 --> 00:03:32,060
built into this application which sounds

00:03:29,609 --> 00:03:32,060
like this

00:03:37,980 --> 00:03:41,620
so whenever you touch the screen one of

00:03:40,270 --> 00:03:44,830
those five notes gets picked at random

00:03:41,620 --> 00:03:47,680
and then we hold down to these events

00:03:44,830 --> 00:03:49,360
for five seconds before they're gone so

00:03:47,680 --> 00:03:52,120
that's the way the observables work here

00:03:49,360 --> 00:03:55,360
and the way these events then actually

00:03:52,120 --> 00:03:57,250
materialize on the screen is I'm using

00:03:55,360 --> 00:03:59,800
the async pipe from angular to make a

00:03:57,250 --> 00:04:01,330
subscription to that observable and then

00:03:59,800 --> 00:04:03,670
for everything that comes out of it I

00:04:01,330 --> 00:04:05,950
make one of these inner chime components

00:04:03,670 --> 00:04:08,350
and then I use some CSS to actually

00:04:05,950 --> 00:04:11,800
place that component on the screen in

00:04:08,350 --> 00:04:13,870
that location where you're touched and

00:04:11,800 --> 00:04:16,209
so then we have these sounds going on

00:04:13,870 --> 00:04:18,970
here and so there are these random notes

00:04:16,209 --> 00:04:20,980
from which we pick pick the sounds to

00:04:18,970 --> 00:04:23,440
play and for each one I actually also

00:04:20,980 --> 00:04:25,420
have a little mp3 sample that I'm

00:04:23,440 --> 00:04:26,500
playing and that represents that

00:04:25,420 --> 00:04:28,690
individual notes

00:04:26,500 --> 00:04:31,900
and I'm playing them using the Web Audio

00:04:28,690 --> 00:04:34,660
API and I think the thing about Web

00:04:31,900 --> 00:04:36,790
Audio is that we can play as many things

00:04:34,660 --> 00:04:38,560
as we want at the same time but we do it

00:04:36,790 --> 00:04:41,350
always in this thing called the audio

00:04:38,560 --> 00:04:43,930
context and that's actually a class that

00:04:41,350 --> 00:04:46,120
the browser provides as part of the Web

00:04:43,930 --> 00:04:48,700
Audio API which we as application

00:04:46,120 --> 00:04:51,190
developers need to instantiate and then

00:04:48,700 --> 00:04:53,140
use to play all our sounds so we need a

00:04:51,190 --> 00:04:56,410
shared instance of that thing when we

00:04:53,140 --> 00:04:58,180
want to use it and I actually found a

00:04:56,410 --> 00:05:00,490
pretty neat way to do this in angular

00:04:58,180 --> 00:05:02,050
which is to just take that class and

00:05:00,490 --> 00:05:04,240
hand it to angular as a dependency

00:05:02,050 --> 00:05:05,950
injection provider because I'm gonna

00:05:04,240 --> 00:05:08,169
will then instantiate that class for me

00:05:05,950 --> 00:05:11,320
and I can inject it wherever I need to

00:05:08,169 --> 00:05:14,140
be playing sounds and where I actually

00:05:11,320 --> 00:05:16,750
do that then is in that inner shine

00:05:14,140 --> 00:05:19,210
component so here's where most of the

00:05:16,750 --> 00:05:22,360
magic actually happens so the audio

00:05:19,210 --> 00:05:24,370
context is injected into this component

00:05:22,360 --> 00:05:27,070
and that's going to be the same one for

00:05:24,370 --> 00:05:29,590
each of these components and then when

00:05:27,070 --> 00:05:31,240
the component initializes I use the

00:05:29,590 --> 00:05:33,400
audio context to actually play a sound

00:05:31,240 --> 00:05:36,640
so I create an audio buffer source node

00:05:33,400 --> 00:05:39,130
and I load into that buffer the mp3 data

00:05:36,640 --> 00:05:40,660
for the notes that was randomly selected

00:05:39,130 --> 00:05:44,670
for this chime

00:05:40,660 --> 00:05:44,670
then I just stopped playing that note

00:05:44,850 --> 00:05:50,290
and then five seconds later when the

00:05:48,070 --> 00:05:51,700
component is destroyed I stopped playing

00:05:50,290 --> 00:05:54,580
the note and pull it out from the audio

00:05:51,700 --> 00:05:55,510
context and that really takes care of

00:05:54,580 --> 00:05:57,850
playing all the sounds in this

00:05:55,510 --> 00:05:59,920
application but then there were also

00:05:57,850 --> 00:06:02,650
those visual effects happening on the

00:05:59,920 --> 00:06:05,350
screen and those are also built in the

00:06:02,650 --> 00:06:08,830
same component so in the components view

00:06:05,350 --> 00:06:10,360
there are a couple of dips and they

00:06:08,830 --> 00:06:13,090
represent kind of two different parts of

00:06:10,360 --> 00:06:14,500
the visualization that happens when when

00:06:13,090 --> 00:06:16,560
you touch the screen and they're called

00:06:14,500 --> 00:06:19,660
the ring and the light

00:06:16,560 --> 00:06:21,730
so they're both circles I'm using the

00:06:19,660 --> 00:06:24,790
CSS border-radius to make them exactly

00:06:21,730 --> 00:06:27,400
circular in shape and then for the ring

00:06:24,790 --> 00:06:29,680
I actually also draw a CSS border so

00:06:27,400 --> 00:06:31,960
that it looks like a ring and what I

00:06:29,680 --> 00:06:34,030
also do is I assign different colors to

00:06:31,960 --> 00:06:36,100
these rings based on what note is being

00:06:34,030 --> 00:06:38,440
played so every musical note in this

00:06:36,100 --> 00:06:41,920
application has a pre assigned color for

00:06:38,440 --> 00:06:43,750
it as well the light on the other hand

00:06:41,920 --> 00:06:46,780
is always the same color so that's a

00:06:43,750 --> 00:06:48,790
white light drawing drawn us this radial

00:06:46,780 --> 00:06:50,770
gradient image that's white in the

00:06:48,790 --> 00:06:54,070
middle and then fades into transparent

00:06:50,770 --> 00:06:56,320
on all sides so those are the two visual

00:06:54,070 --> 00:06:59,230
components but you may have noticed that

00:06:56,320 --> 00:07:03,340
they were actually also moving and for

00:06:59,230 --> 00:07:04,510
that I'm using ng animate and Matias is

00:07:03,340 --> 00:07:06,820
going to probably tell you a lot more

00:07:04,510 --> 00:07:08,740
about this on Friday but I'm just using

00:07:06,820 --> 00:07:10,870
it here for for a couple of animations

00:07:08,740 --> 00:07:12,910
so for the ring I have this expand

00:07:10,870 --> 00:07:15,730
animation and for the lights I have a

00:07:12,910 --> 00:07:19,650
flash animation and they are defined in

00:07:15,730 --> 00:07:21,520
this components metadata so this expand

00:07:19,650 --> 00:07:24,400
animation that's attached to the ring

00:07:21,520 --> 00:07:28,120
starts the first thing when the ring is

00:07:24,400 --> 00:07:31,180
attached to the Dom and it's immediately

00:07:28,120 --> 00:07:33,550
scaled down into this tiny size just

00:07:31,180 --> 00:07:35,919
point or one of its original scale and

00:07:33,550 --> 00:07:38,530
then over the next five seconds it's

00:07:35,919 --> 00:07:40,480
gradually scaled back up again to the

00:07:38,530 --> 00:07:42,850
full size but also at the same time

00:07:40,480 --> 00:07:44,610
there's another parallel animation that

00:07:42,850 --> 00:07:47,680
fades it out so the result is this

00:07:44,610 --> 00:07:49,750
expanding fading ring effect which lasts

00:07:47,680 --> 00:07:52,770
for five seconds which also happens to

00:07:49,750 --> 00:07:55,449
be the lifetime of the whole component

00:07:52,770 --> 00:07:57,940
for the light there's this flash

00:07:55,449 --> 00:08:01,030
animation that's kind of similar it

00:07:57,940 --> 00:08:04,540
begins by scaling the dip down into a

00:08:01,030 --> 00:08:07,330
tiny size but then very quickly in just

00:08:04,540 --> 00:08:08,650
50 milliseconds I uh expanded out to the

00:08:07,330 --> 00:08:11,770
full size so there's this rapid

00:08:08,650 --> 00:08:14,199
expansion and as a third step after that

00:08:11,770 --> 00:08:16,930
in the following second its scaled down

00:08:14,199 --> 00:08:18,669
again and faded out at the same time so

00:08:16,930 --> 00:08:22,720
there's this flashing effect that lasts

00:08:18,669 --> 00:08:23,889
for just over a second and those are

00:08:22,720 --> 00:08:25,870
really the kinds of things you need to

00:08:23,889 --> 00:08:27,550
build something like this so you need

00:08:25,870 --> 00:08:30,400
some visual effects which you can make

00:08:27,550 --> 00:08:32,140
with CSS and ng animate you need some

00:08:30,400 --> 00:08:35,380
sounds which you can make with Web Audio

00:08:32,140 --> 00:08:36,909
and you need a bit of angular code to

00:08:35,380 --> 00:08:39,640
actually pull it all together and a bit

00:08:36,909 --> 00:08:44,290
of rxjs but not really that much it's

00:08:39,640 --> 00:08:46,150
actually quite simple to do now the

00:08:44,290 --> 00:08:48,610
thing about projects like this though is

00:08:46,150 --> 00:08:49,900
that when you're playing with them one

00:08:48,610 --> 00:08:52,060
thing that kind of always leads to the

00:08:49,900 --> 00:08:54,070
next and you get more ideas what what

00:08:52,060 --> 00:08:55,990
you would like to do and one thing that

00:08:54,070 --> 00:08:58,660
may appear to you or at least it

00:08:55,990 --> 00:09:01,540
occurred to me is that why am I doing

00:08:58,660 --> 00:09:03,670
this manually like couldn't this

00:09:01,540 --> 00:09:06,160
instrument basically play itself because

00:09:03,670 --> 00:09:09,940
as a programmer I have this natural urge

00:09:06,160 --> 00:09:12,459
to automate all possible things so yeah

00:09:09,940 --> 00:09:15,400
can we make this play itself well of

00:09:12,459 --> 00:09:17,620
course we can but so you kind of find

00:09:15,400 --> 00:09:19,540
inspiration for that we have to find

00:09:17,620 --> 00:09:22,690
some technology that's a little bit

00:09:19,540 --> 00:09:25,660
older than angular 2 it's actually even

00:09:22,690 --> 00:09:30,240
a little bit older than angular 1 it's

00:09:25,660 --> 00:09:30,240
about 5,000 years old wind chimes

00:09:31,140 --> 00:09:37,930
because here we have an object that has

00:09:33,910 --> 00:09:39,640
this magical ability to make music to

00:09:37,930 --> 00:09:42,850
make stuff without supervision

00:09:39,640 --> 00:09:46,420
autonomously so what this is in fact is

00:09:42,850 --> 00:09:49,990
an example of a generative system so

00:09:46,420 --> 00:09:54,910
wind chimes are a very simple a very

00:09:49,990 --> 00:09:57,160
primitive generative system which is

00:09:54,910 --> 00:10:00,339
thousands of years old but still has

00:09:57,160 --> 00:10:02,800
this capability to make infinite

00:10:00,339 --> 00:10:03,800
variations of melodies and rhythms while

00:10:02,800 --> 00:10:05,540
just you know hanging

00:10:03,800 --> 00:10:07,490
ports are for me from a treatment

00:10:05,540 --> 00:10:09,410
somewhere so we often think of

00:10:07,490 --> 00:10:11,839
generative systems as things we do with

00:10:09,410 --> 00:10:13,600
algorithms some computers but this has

00:10:11,839 --> 00:10:17,570
been going on for a lot longer than that

00:10:13,600 --> 00:10:20,000
and so that's quite a feature actually

00:10:17,570 --> 00:10:22,190
for something that's so old and what

00:10:20,000 --> 00:10:24,620
wind chimes also happen to be is one of

00:10:22,190 --> 00:10:26,720
the earliest examples that we know of of

00:10:24,620 --> 00:10:29,810
humans making what you could call

00:10:26,720 --> 00:10:32,510
generative art or art made with the help

00:10:29,810 --> 00:10:34,010
of generative systems because if you

00:10:32,510 --> 00:10:35,959
make one of these things you make a

00:10:34,010 --> 00:10:38,570
number of artistic decisions on how it

00:10:35,959 --> 00:10:41,510
looks and how it feels and how it sounds

00:10:38,570 --> 00:10:44,800
and what it represents to you but you do

00:10:41,510 --> 00:10:48,230
not make the music itself the music is

00:10:44,800 --> 00:10:50,180
generated at runtime and it's not

00:10:48,230 --> 00:10:53,600
generated by you or anyone else it's

00:10:50,180 --> 00:10:56,570
generated by the weather so the wind

00:10:53,600 --> 00:10:58,490
actually plays this instrument you could

00:10:56,570 --> 00:11:01,820
say that wind chimes literally pull

00:10:58,490 --> 00:11:06,410
music out of thin air and that is what I

00:11:01,820 --> 00:11:08,209
call technological innovation now the

00:11:06,410 --> 00:11:10,720
question we then have if we kind of

00:11:08,209 --> 00:11:15,440
think this is cool is that well can we

00:11:10,720 --> 00:11:17,120
port this technology to angular now

00:11:15,440 --> 00:11:18,529
granted this is again one of those

00:11:17,120 --> 00:11:21,380
things that angular wasn't probably

00:11:18,529 --> 00:11:23,000
exactly designed for no I don't know

00:11:21,380 --> 00:11:24,170
exactly what happens inside Google about

00:11:23,000 --> 00:11:26,529
this is probably not that one of the

00:11:24,170 --> 00:11:29,360
projects they've been using angular for

00:11:26,529 --> 00:11:31,670
but some we could try anyway

00:11:29,360 --> 00:11:33,740
in fact we kind of have half of it

00:11:31,670 --> 00:11:35,839
already because we have those chime

00:11:33,740 --> 00:11:37,760
components and the thing about

00:11:35,839 --> 00:11:40,670
components is that they can be reused in

00:11:37,760 --> 00:11:42,529
new context pretty easily so we could

00:11:40,670 --> 00:11:45,680
use those what we're really just missing

00:11:42,529 --> 00:11:49,160
them is the wind but maybe that could be

00:11:45,680 --> 00:11:50,660
an angular service and maybe we could

00:11:49,160 --> 00:11:53,140
connect that to the chimes using

00:11:50,660 --> 00:11:55,640
angular's one-way dataflow architecture

00:11:53,140 --> 00:11:59,510
which in this case is really just like a

00:11:55,640 --> 00:12:01,730
metaphor for one-way airflow okay I mean

00:11:59,510 --> 00:12:04,610
this is a straightforward architectural

00:12:01,730 --> 00:12:06,260
diagram we could probably take this too

00:12:04,610 --> 00:12:08,959
you know wind chime makers in ancient

00:12:06,260 --> 00:12:11,300
Egypt and they would say yes this is

00:12:08,959 --> 00:12:14,820
very easy to reason about

00:12:11,300 --> 00:12:16,710
but so this is promising but we still

00:12:14,820 --> 00:12:20,670
have this question then how do we

00:12:16,710 --> 00:12:23,820
implement wind now wind of course is a

00:12:20,670 --> 00:12:26,040
weather phenomenon but as such is really

00:12:23,820 --> 00:12:29,160
way too complicated for us to model in a

00:12:26,040 --> 00:12:31,860
system like this so what I did is I

00:12:29,160 --> 00:12:34,550
reduced wind into this very simple

00:12:31,860 --> 00:12:37,820
process which is just random numbers

00:12:34,550 --> 00:12:40,440
generated at a regular time intervals

00:12:37,820 --> 00:12:42,750
because if you then go and plot a line

00:12:40,440 --> 00:12:44,580
through those random points you get this

00:12:42,750 --> 00:12:48,360
curve which you can think of as a

00:12:44,580 --> 00:12:50,730
simulated wind speed over time and if

00:12:48,360 --> 00:12:53,310
you then go and sample that curve very

00:12:50,730 --> 00:12:55,050
frequently say 10 times more frequently

00:12:53,310 --> 00:12:57,420
than what you have random numbers for

00:12:55,050 --> 00:12:59,400
you get this succession of values that

00:12:57,420 --> 00:13:01,560
it's always kind of increasing or

00:12:59,400 --> 00:13:03,360
decreasing slightly depending on what

00:13:01,560 --> 00:13:07,470
the wind speed is doing at that point in

00:13:03,360 --> 00:13:10,020
that time now what we actually want the

00:13:07,470 --> 00:13:11,880
wind to do here though is to kind of

00:13:10,020 --> 00:13:14,190
substitute the clicks we were making and

00:13:11,880 --> 00:13:15,840
kind of play the instrument for us so we

00:13:14,190 --> 00:13:18,720
need these discrete events happening

00:13:15,840 --> 00:13:21,450
over time and we can get that from this

00:13:18,720 --> 00:13:23,640
representation if we treat these wind

00:13:21,450 --> 00:13:26,040
speed samples treat each one of them as

00:13:23,640 --> 00:13:28,500
a probability of weather at that point

00:13:26,040 --> 00:13:30,960
in time a chime event should be produced

00:13:28,500 --> 00:13:33,870
if we do that we get this stream of

00:13:30,960 --> 00:13:35,550
discrete events that is sometimes firing

00:13:33,870 --> 00:13:37,980
more rapidly when the wind is stronger

00:13:35,550 --> 00:13:41,130
and sometimes less rapidly when it's not

00:13:37,980 --> 00:13:43,530
so strong and it's kind of random but

00:13:41,130 --> 00:13:47,220
it's not too random so that it actually

00:13:43,530 --> 00:13:49,110
feels natural and might sound good so

00:13:47,220 --> 00:13:53,040
that is the wind that we actually want

00:13:49,110 --> 00:13:55,950
to observe so what we end up with there

00:13:53,040 --> 00:13:58,290
is well a wind service that has a blow

00:13:55,950 --> 00:14:00,060
method that returns an observable and

00:13:58,290 --> 00:14:02,820
this is observable that we need we can

00:14:00,060 --> 00:14:06,210
craft in a few steps so we begin with a

00:14:02,820 --> 00:14:08,550
scheduled interval which fires every 200

00:14:06,210 --> 00:14:12,240
milliseconds and produces this infinite

00:14:08,550 --> 00:14:14,100
stream of increasing integer numbers and

00:14:12,240 --> 00:14:15,750
then we can divide into those integers

00:14:14,100 --> 00:14:18,450
by 10 because we are modeling that

00:14:15,750 --> 00:14:20,700
smaller sample time step which was one

00:14:18,450 --> 00:14:22,140
tenth of the time step of the random

00:14:20,700 --> 00:14:24,210
numbers that we have

00:14:22,140 --> 00:14:26,820
and then for each of these steps we

00:14:24,210 --> 00:14:29,220
interpolate the value of the wind curve

00:14:26,820 --> 00:14:31,650
at this point in time so we find the

00:14:29,220 --> 00:14:34,320
nearest x values from that point which

00:14:31,650 --> 00:14:36,450
are the nearest integers and then we

00:14:34,320 --> 00:14:38,820
find the corresponding Y values which

00:14:36,450 --> 00:14:41,520
are basically just a lookup table of

00:14:38,820 --> 00:14:43,200
random numbers and then we do some

00:14:41,520 --> 00:14:46,020
linear interpolation to figure out where

00:14:43,200 --> 00:14:48,000
exactly we are at this point in time and

00:14:46,020 --> 00:14:51,120
the result of that is this regular

00:14:48,000 --> 00:14:55,260
sampling every 200 milliseconds of this

00:14:51,120 --> 00:14:58,200
simulated wind curve there's just one

00:14:55,260 --> 00:15:00,780
more thing to do which is to filter this

00:14:58,200 --> 00:15:03,660
observable with this random function

00:15:00,780 --> 00:15:05,910
which is more likely to pass when the

00:15:03,660 --> 00:15:08,190
wind wind speed is stronger or when the

00:15:05,910 --> 00:15:10,350
probabilities are higher because that

00:15:08,190 --> 00:15:12,930
gives us that exact observable that we

00:15:10,350 --> 00:15:16,410
need and that is been something we can

00:15:12,930 --> 00:15:18,690
go and plug into our components so the

00:15:16,410 --> 00:15:21,690
component can now get wind injected in

00:15:18,690 --> 00:15:23,460
as a dependency and it can call the blow

00:15:21,690 --> 00:15:26,790
method immediately to get out this

00:15:23,460 --> 00:15:28,680
observable and then we can do a similar

00:15:26,790 --> 00:15:30,900
mapping to it as we were doing with the

00:15:28,680 --> 00:15:33,180
clicks earlier which is to attach to

00:15:30,900 --> 00:15:35,340
each of these events a random musical

00:15:33,180 --> 00:15:38,040
note but this time we can also attach

00:15:35,340 --> 00:15:40,350
random visual coordinates so that the

00:15:38,040 --> 00:15:43,140
the visualization gets put somewhere in

00:15:40,350 --> 00:15:45,210
a random location on the screen and we

00:15:43,140 --> 00:15:49,650
still hold down to these events for five

00:15:45,210 --> 00:15:51,510
seconds before we let them go and so

00:15:49,650 --> 00:15:54,690
here we're adding to these visual

00:15:51,510 --> 00:15:56,640
effects and these sounds this sort of

00:15:54,690 --> 00:15:58,920
stochastic wind process that will

00:15:56,640 --> 00:16:02,510
actually generate the music and the

00:15:58,920 --> 00:16:02,510
visualization for us

00:16:40,050 --> 00:16:44,380
now if we look at the browser developer

00:16:42,610 --> 00:16:46,000
tools when this application is running

00:16:44,380 --> 00:16:48,550
you see that we're actually constantly

00:16:46,000 --> 00:16:50,320
rendering at 60 frames per second and

00:16:48,550 --> 00:16:52,570
that's because we're not actually doing

00:16:50,320 --> 00:16:55,420
very much work at all we're only

00:16:52,570 --> 00:16:58,030
touching the Dom when a new chime is

00:16:55,420 --> 00:17:00,550
generated or when an old one leaves that

00:16:58,030 --> 00:17:02,470
five-second time window and the rest of

00:17:00,550 --> 00:17:04,510
the time we are running animations and

00:17:02,470 --> 00:17:06,970
we are playing sounds but that's all

00:17:04,510 --> 00:17:09,579
native and off the main thread thanks to

00:17:06,970 --> 00:17:12,010
the Web Audio API and the web animations

00:17:09,579 --> 00:17:20,980
API which is what ng animate is using

00:17:12,010 --> 00:17:22,900
here so I began by saying that I'm

00:17:20,980 --> 00:17:24,820
really doing this stuff in order to kind

00:17:22,900 --> 00:17:27,160
of learn angular 2 and these other

00:17:24,820 --> 00:17:29,110
technologies and I'm happy to say that

00:17:27,160 --> 00:17:31,330
that's actually exactly what has

00:17:29,110 --> 00:17:33,490
happened I've kind of learned a huge

00:17:31,330 --> 00:17:36,880
amount about ng animates and Web Audio

00:17:33,490 --> 00:17:38,980
and rxjs and all kinds of things while

00:17:36,880 --> 00:17:41,380
doing this and the thing is I've learned

00:17:38,980 --> 00:17:43,530
all of that stuff without ever feeling

00:17:41,380 --> 00:17:45,850
like I was kind of having to study

00:17:43,530 --> 00:17:47,920
because that's not what I was doing I

00:17:45,850 --> 00:17:50,020
was just playing around and having fun

00:17:47,920 --> 00:17:52,030
and passing time and learning just

00:17:50,020 --> 00:17:54,640
happened as a by-product of me doing

00:17:52,030 --> 00:17:56,350
that and those are the reasons why I

00:17:54,640 --> 00:17:59,140
think we should allow ourselves a

00:17:56,350 --> 00:18:02,830
permission to play more often with these

00:17:59,140 --> 00:18:06,850
technologies because you learn so much

00:18:02,830 --> 00:18:10,510
and because it's just so much fun and a

00:18:06,850 --> 00:18:12,220
great way for a responsible adult to

00:18:10,510 --> 00:18:15,040
kind of give themself a permission to

00:18:12,220 --> 00:18:17,380
play with the good conscience is to just

00:18:15,040 --> 00:18:20,710
call it art

00:18:17,380 --> 00:18:24,460
so in that vein what I have built here

00:18:20,710 --> 00:18:27,820
is really an abstract reinterpretation

00:18:24,460 --> 00:18:30,929
of ancient wind chimes in the medium of

00:18:27,820 --> 00:18:30,929
angular 2

00:18:45,450 --> 00:18:47,510

YouTube URL: https://www.youtube.com/watch?v=vsl5O4ps7LE


