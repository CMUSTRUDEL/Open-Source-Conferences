Title: Demystifying Decorators - Michael Bennett
Publication date: 2016-05-06
Playlist: ng-conf 2016
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:07,700 --> 00:00:14,910
all right this is the decorator no no

00:00:12,330 --> 00:00:16,590
seriously though decorators are an

00:00:14,910 --> 00:00:19,350
upcoming feature in a new version of

00:00:16,590 --> 00:00:21,150
JavaScript decorators are a new feature

00:00:19,350 --> 00:00:22,800
to JavaScript but they're not new to

00:00:21,150 --> 00:00:25,380
programming if you've worked with

00:00:22,800 --> 00:00:27,449
languages like Ruby or Python or even

00:00:25,380 --> 00:00:28,949
Java you've probably encountered some

00:00:27,449 --> 00:00:30,570
form of decorators and one way or

00:00:28,949 --> 00:00:33,239
another if you don't know those

00:00:30,570 --> 00:00:34,590
languages don't worry at all because all

00:00:33,239 --> 00:00:36,300
you really need to know is a little bit

00:00:34,590 --> 00:00:38,250
of JavaScript and you're good to go

00:00:36,300 --> 00:00:41,120
because decorators are really just a way

00:00:38,250 --> 00:00:43,739
of using existing JavaScript features

00:00:41,120 --> 00:00:46,140
decorators let you take a regular old

00:00:43,739 --> 00:00:48,239
function and then declaratively apply a

00:00:46,140 --> 00:00:50,039
code symbol to it so wait a minute

00:00:48,239 --> 00:00:52,140
exactly mean by that's a bit of a

00:00:50,039 --> 00:00:55,410
mouthful so let's take a look at some

00:00:52,140 --> 00:00:57,989
decorators in their natural habitat so

00:00:55,410 --> 00:01:00,090
here's three different decorators we've

00:00:57,989 --> 00:01:03,420
got a class decorator a property

00:01:00,090 --> 00:01:04,920
decorator and a parameter decorator now

00:01:03,420 --> 00:01:06,450
these are just three different types of

00:01:04,920 --> 00:01:08,250
decorators there's a whole bunch of

00:01:06,450 --> 00:01:09,450
different types but these are just three

00:01:08,250 --> 00:01:11,250
and we can already see some

00:01:09,450 --> 00:01:12,689
commonalities in them you can see they

00:01:11,250 --> 00:01:15,390
all have an @ symbol that they start

00:01:12,689 --> 00:01:16,920
with there's an identifier which is just

00:01:15,390 --> 00:01:18,450
a function somewhere else in your code

00:01:16,920 --> 00:01:20,549
or in some library code that you've

00:01:18,450 --> 00:01:23,220
imported and then they take that class

00:01:20,549 --> 00:01:25,140
symbol as an argument so that's all

00:01:23,220 --> 00:01:28,520
great but like what exactly do they do

00:01:25,140 --> 00:01:30,570
so one way you could think about it is

00:01:28,520 --> 00:01:33,090
they could do something like this if we

00:01:30,570 --> 00:01:35,340
had an es6 function or an es6 class i

00:01:33,090 --> 00:01:36,869
should say like class foo and then later

00:01:35,340 --> 00:01:38,400
we have a function we could pass it

00:01:36,869 --> 00:01:38,939
through to the function maybe some

00:01:38,400 --> 00:01:41,369
metadata

00:01:38,939 --> 00:01:42,899
well the decorator lets us do things in

00:01:41,369 --> 00:01:46,110
a more declarative way so we could say

00:01:42,899 --> 00:01:49,649
at add metadata put the metadata in and

00:01:46,110 --> 00:01:51,869
then declare our class so you'll notice

00:01:49,649 --> 00:01:53,880
I've said declare a couple times well

00:01:51,869 --> 00:01:56,460
it's important to note the decorators

00:01:53,880 --> 00:01:59,159
run when code is declared okay so they

00:01:56,460 --> 00:02:00,840
run but what exactly do they run well I

00:01:59,159 --> 00:02:02,430
set it a minute ago but they run

00:02:00,840 --> 00:02:04,530
functions declared elsewhere in your

00:02:02,430 --> 00:02:06,810
code or in some library code you've

00:02:04,530 --> 00:02:08,369
imported that's not really enough though

00:02:06,810 --> 00:02:11,580
so let's let's take a look at a quasi

00:02:08,369 --> 00:02:12,640
real example now I say quasi real

00:02:11,580 --> 00:02:14,350
because

00:02:12,640 --> 00:02:17,650
this this example is gonna work it'll

00:02:14,350 --> 00:02:19,090
run it I have a use case for it but the

00:02:17,650 --> 00:02:20,770
only problem is just trying to fit this

00:02:19,090 --> 00:02:22,450
in the slots in five minutes it's pretty

00:02:20,770 --> 00:02:24,310
challenging they get a little bit

00:02:22,450 --> 00:02:26,500
verbose so let's let's dive in and take

00:02:24,310 --> 00:02:29,709
a look this is a simple decorator

00:02:26,500 --> 00:02:31,750
factory function yeah it's simple as the

00:02:29,709 --> 00:02:33,100
best simple as I could make it we'll

00:02:31,750 --> 00:02:35,980
walk through it it's really not that bad

00:02:33,100 --> 00:02:38,290
on the outside we have a described

00:02:35,980 --> 00:02:39,580
function it's taking a descriptor I mean

00:02:38,290 --> 00:02:41,260
we define that so we could do anything

00:02:39,580 --> 00:02:44,290
we sort of want with it and then it

00:02:41,260 --> 00:02:46,300
returns a function that's it it's a

00:02:44,290 --> 00:02:48,550
factory for creating decorator functions

00:02:46,300 --> 00:02:50,320
there's not a whole lot to it then the

00:02:48,550 --> 00:02:52,150
actual function we're returning it's

00:02:50,320 --> 00:02:54,280
going to get populated by the decorated

00:02:52,150 --> 00:02:56,890
mechanics internally for us and then I'm

00:02:54,280 --> 00:02:58,810
just gonna add some annotations to it so

00:02:56,890 --> 00:03:00,910
my use case for this particular example

00:02:58,810 --> 00:03:03,160
is that I have like a command line

00:03:00,910 --> 00:03:04,840
program and I'd like to actually print

00:03:03,160 --> 00:03:06,820
out a nice little help menu but I want

00:03:04,840 --> 00:03:09,489
to keep the descriptions really close to

00:03:06,820 --> 00:03:11,140
the code so it's easy to maintain so I

00:03:09,489 --> 00:03:13,540
can actually use this just like this

00:03:11,140 --> 00:03:15,760
I've got my class I can run through I

00:03:13,540 --> 00:03:17,170
can decorate my methods and then later I

00:03:15,760 --> 00:03:19,269
can programmatically pull out my

00:03:17,170 --> 00:03:21,579
descriptions and present them to the

00:03:19,269 --> 00:03:23,079
user and a help menu so it's just a new

00:03:21,579 --> 00:03:26,200
way of using existing JavaScript

00:03:23,079 --> 00:03:27,850
features now that being said there are

00:03:26,200 --> 00:03:30,730
of course a whole bunch of gotchas

00:03:27,850 --> 00:03:32,470
I mean decorators can get you into a lot

00:03:30,730 --> 00:03:34,630
of trouble so you do have to be very

00:03:32,470 --> 00:03:36,310
careful with them one thing you can do

00:03:34,630 --> 00:03:39,640
to really try and stay safe with

00:03:36,310 --> 00:03:41,650
decorators is to avoid mutation if you

00:03:39,640 --> 00:03:43,600
avoid mutation you'll rule out whole

00:03:41,650 --> 00:03:45,060
classes of problems and you'll save

00:03:43,600 --> 00:03:47,019
yourself a lot of heartache another

00:03:45,060 --> 00:03:49,239
thing you're gonna have to keep in mind

00:03:47,019 --> 00:03:50,410
with decorators is that standardization

00:03:49,239 --> 00:03:52,540
is still in progress

00:03:50,410 --> 00:03:54,040
I mean Babel was doing things one way

00:03:52,540 --> 00:03:56,320
for a little while and type scripts a

00:03:54,040 --> 00:03:58,390
little bit different and the spec is

00:03:56,320 --> 00:04:00,459
slightly different from both of those so

00:03:58,390 --> 00:04:02,799
your best bet is really going to be to

00:04:00,459 --> 00:04:04,540
keep it simple you keep it simple and

00:04:02,799 --> 00:04:06,579
you stick to annotating things and you

00:04:04,540 --> 00:04:08,530
avoid mutations you can have a lot of

00:04:06,579 --> 00:04:10,690
fun and that's really the important part

00:04:08,530 --> 00:04:12,700
I mean you want to have fun a new way of

00:04:10,690 --> 00:04:14,260
using existing language features they're

00:04:12,700 --> 00:04:16,590
a brand new way of having fun with the

00:04:14,260 --> 00:04:19,570
language you already know and love so

00:04:16,590 --> 00:04:20,840
that's it thanks very much enjoy your

00:04:19,570 --> 00:04:22,900
decorators

00:04:20,840 --> 00:04:22,900

YouTube URL: https://www.youtube.com/watch?v=Drt0S6rrZ9I


