Title: â€‹Pipe Hype - Aysegul Yonet
Publication date: 2016-05-06
Playlist: ng-conf 2016
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:05,509 --> 00:00:12,059
hi everyone it's so great to be here I

00:00:09,059 --> 00:00:13,790
was here last year sitting right there I

00:00:12,059 --> 00:00:18,000
was so excited I can't believe I'm here

00:00:13,790 --> 00:00:21,539
so nice do not see you all because that

00:00:18,000 --> 00:00:24,920
would make me even more nervous but so

00:00:21,539 --> 00:00:28,349
today i will talk to you about pipes and

00:00:24,920 --> 00:00:30,539
what they are and what has changed my

00:00:28,349 --> 00:00:34,620
name is Aisha girl and this is my

00:00:30,539 --> 00:00:39,329
twitter handle I sugar unit and i work

00:00:34,620 --> 00:00:42,239
at autodesk their HP 60 web platform we

00:00:39,329 --> 00:00:46,850
are building 3d application sharing

00:00:42,239 --> 00:00:46,850
platform which is really cool

00:00:49,940 --> 00:00:57,079
so pipes are another basically a class

00:00:53,690 --> 00:00:59,989
service that allows us to transform our

00:00:57,079 --> 00:01:02,600
data and display it the way that we like

00:00:59,989 --> 00:01:04,549
it too so I use it a lot I actually

00:01:02,600 --> 00:01:07,940
noticed how much I use it after I

00:01:04,549 --> 00:01:09,500
started to talk about pipes I really do

00:01:07,940 --> 00:01:12,920
use it a lot and I asked myself the

00:01:09,500 --> 00:01:15,409
question why I'm using it so much one of

00:01:12,920 --> 00:01:17,750
the reasons is that our application is

00:01:15,409 --> 00:01:21,830
really beg and we have hundreds of

00:01:17,750 --> 00:01:24,860
directives and we are a huge team

00:01:21,830 --> 00:01:26,810
working for different country and we

00:01:24,860 --> 00:01:29,229
have different backends the data is

00:01:26,810 --> 00:01:32,600
coming from a variety of sources and

00:01:29,229 --> 00:01:38,179
that is a huge challenge to keeping the

00:01:32,600 --> 00:01:43,280
data in a contact way so one very useful

00:01:38,179 --> 00:01:46,550
thing I use parkour is to not to change

00:01:43,280 --> 00:01:49,009
my data so I don't it for anything that

00:01:46,550 --> 00:01:51,200
I need I don't have to change any of the

00:01:49,009 --> 00:01:54,890
attributes of my data I can just write a

00:01:51,200 --> 00:02:01,940
pipe and use it anywhere in my

00:01:54,890 --> 00:02:06,530
application that I wanted to so pipes

00:02:01,940 --> 00:02:08,629
are used to be cold filters they are

00:02:06,530 --> 00:02:10,670
more flexible and more performant now

00:02:08,629 --> 00:02:12,709
but there are so many things that hasn't

00:02:10,670 --> 00:02:16,580
changed for example the way we use it in

00:02:12,709 --> 00:02:19,459
our HTML so as you can see we have a

00:02:16,580 --> 00:02:24,410
data binding and we have the cool new

00:02:19,459 --> 00:02:28,730
dates pipe and we can just use it the

00:02:24,410 --> 00:02:30,530
way we used to use it and we can also

00:02:28,730 --> 00:02:34,989
give their arguments to even more

00:02:30,530 --> 00:02:38,030
refined the way we wanted to display our

00:02:34,989 --> 00:02:40,160
date we can even get it from a user

00:02:38,030 --> 00:02:46,069
input and we don't have to decide on the

00:02:40,160 --> 00:02:48,769
spot and change it dynamically the new

00:02:46,069 --> 00:02:53,569
improvements to filters pipes today is

00:02:48,769 --> 00:02:57,500
also being more being able to nest them

00:02:53,569 --> 00:03:00,010
together one after the other to make it

00:02:57,500 --> 00:03:03,950
look the way you like it

00:03:00,010 --> 00:03:06,230
but that's not all so we have some new

00:03:03,950 --> 00:03:09,050
additions like the replace that allows

00:03:06,230 --> 00:03:11,390
us to create some regex expressions and

00:03:09,050 --> 00:03:14,870
replace anything that we want in our

00:03:11,390 --> 00:03:16,370
text which is I think really great so to

00:03:14,870 --> 00:03:17,930
be able to do that we have the

00:03:16,370 --> 00:03:22,370
expression that we are binding to and

00:03:17,930 --> 00:03:24,590
then we have the replace pipe and we can

00:03:22,370 --> 00:03:26,510
give replaced by the arguments of the

00:03:24,590 --> 00:03:30,580
pattern the pattern that we are looking

00:03:26,510 --> 00:03:33,530
for and the second argument is the

00:03:30,580 --> 00:03:41,900
replacements that could be a string or a

00:03:33,530 --> 00:03:46,070
function that will replace so here I'm

00:03:41,900 --> 00:03:48,320
replacing everything angular 1.5 with 2

00:03:46,070 --> 00:03:55,880
point 0 hopefully that would be very

00:03:48,320 --> 00:03:59,570
soon all of us so we're all familiar

00:03:55,880 --> 00:04:01,730
with trying to debug our data bindings

00:03:59,570 --> 00:04:04,180
and then trying to display it on our

00:04:01,730 --> 00:04:07,880
view and seeing the object object

00:04:04,180 --> 00:04:11,480
thankfully we have JSON pipe now we can

00:04:07,880 --> 00:04:15,459
display a JSON objects on our HTML and

00:04:11,480 --> 00:04:19,250
it makes debugging so much easier and

00:04:15,459 --> 00:04:22,940
joyful we have few other cool pipes one

00:04:19,250 --> 00:04:24,710
of them is the internalization and now

00:04:22,940 --> 00:04:30,110
we have percentage and all these cool

00:04:24,710 --> 00:04:32,120
stuff these additions are great but we

00:04:30,110 --> 00:04:34,280
also lost them so we don't have the

00:04:32,120 --> 00:04:37,790
filter filter anymore if you don't have

00:04:34,280 --> 00:04:39,470
to sort by any more yay but you can

00:04:37,790 --> 00:04:42,280
write your own and you can't blame

00:04:39,470 --> 00:04:42,280
anyone for it

00:04:43,360 --> 00:04:53,210
which I did so it doesn't take long

00:04:49,759 --> 00:04:55,789
before we start writing our own custom

00:04:53,210 --> 00:04:58,960
filters and you know there are some

00:04:55,789 --> 00:05:03,220
reasons that we lost the salt by and

00:04:58,960 --> 00:05:06,110
filter filters one of them is the

00:05:03,220 --> 00:05:11,060
aggressive minimization of the code so

00:05:06,110 --> 00:05:15,400
it allows that but also it was very much

00:05:11,060 --> 00:05:18,500
misused and it was our discussions in my

00:05:15,400 --> 00:05:20,300
group as well how we need to use it

00:05:18,500 --> 00:05:24,889
because we have a lot of data to use and

00:05:20,300 --> 00:05:26,240
it's really hard to sort everything so

00:05:24,889 --> 00:05:28,069
let's talk about how we can write our

00:05:26,240 --> 00:05:31,909
own pipes and we can customize it as

00:05:28,069 --> 00:05:35,330
much as we want to first thing that we

00:05:31,909 --> 00:05:40,310
need is the pipe decorator and to give

00:05:35,330 --> 00:05:41,990
our metadata to our class and then the

00:05:40,310 --> 00:05:44,479
second thing is the pipe transform

00:05:41,990 --> 00:05:49,699
interface which we will implement the

00:05:44,479 --> 00:05:51,740
transform method on it in our decorator

00:05:49,699 --> 00:05:53,810
of the first thing that we give is the

00:05:51,740 --> 00:05:58,099
name so this is the name that we will be

00:05:53,810 --> 00:06:02,380
using in our HTML as the filter and then

00:05:58,099 --> 00:06:06,289
we are implementing the transfer methods

00:06:02,380 --> 00:06:08,300
and the transfer method takes at least

00:06:06,289 --> 00:06:11,599
one argument which is the input that we

00:06:08,300 --> 00:06:14,000
wanted to change and also it can take as

00:06:11,599 --> 00:06:20,240
many arguments as you want and you can

00:06:14,000 --> 00:06:22,310
just use them with semicolons and the

00:06:20,240 --> 00:06:25,789
transform methods obviously has to

00:06:22,310 --> 00:06:28,900
return a result that you want to be

00:06:25,789 --> 00:06:28,900
displayed in your HTML

00:06:29,409 --> 00:06:38,120
lastly what we need to do is in our

00:06:32,840 --> 00:06:46,500
component at the pipes to our component

00:06:38,120 --> 00:06:52,350
metadata so

00:06:46,500 --> 00:06:54,930
we almost made our filter so here I have

00:06:52,350 --> 00:06:57,210
the list of files that I'm filtering

00:06:54,930 --> 00:07:01,260
through so some of them are owned by me

00:06:57,210 --> 00:07:04,440
Sam's mom shared so I'm filtering the

00:07:01,260 --> 00:07:06,780
owned by me right now and I do have well

00:07:04,440 --> 00:07:11,130
yeah owned by me filter is working fine

00:07:06,780 --> 00:07:16,710
so far so good now what I want to do is

00:07:11,130 --> 00:07:19,650
just add in another folder and since

00:07:16,710 --> 00:07:25,919
it's created by me i'm expecting it to

00:07:19,650 --> 00:07:29,480
be there but it's nice fun stuff so I go

00:07:25,919 --> 00:07:33,720
back to all files it's there it's right

00:07:29,480 --> 00:07:35,820
at the bottom here I go back to owned by

00:07:33,720 --> 00:07:40,940
me it's there now but it wasn't there

00:07:35,820 --> 00:07:40,940
when our first bit so what happened

00:07:41,600 --> 00:07:52,400
annular is has a new way of watching for

00:07:46,560 --> 00:07:52,400
the change detection before

00:07:54,100 --> 00:07:59,050
before in our current job actually not

00:07:56,290 --> 00:08:02,800
that before we have thousands of

00:07:59,050 --> 00:08:05,170
Watchers and any time we add a new new

00:08:02,800 --> 00:08:09,400
item our Watchers just keep increasing

00:08:05,170 --> 00:08:12,190
and that's horrible so now with the pipe

00:08:09,400 --> 00:08:14,050
improvements we are being more careful

00:08:12,190 --> 00:08:17,230
about what we are watching for so

00:08:14,050 --> 00:08:21,670
angular as a default doesn't watch for

00:08:17,230 --> 00:08:24,760
any changes directly well it does but

00:08:21,670 --> 00:08:27,580
for reference changes instead of any

00:08:24,760 --> 00:08:32,500
changes to any length of data and any

00:08:27,580 --> 00:08:36,160
attribute so what that means is that we

00:08:32,500 --> 00:08:42,280
have we have this new concept of pure

00:08:36,160 --> 00:08:45,310
pipe which is stateless so again anytime

00:08:42,280 --> 00:08:47,740
your reference changes we are changing

00:08:45,310 --> 00:08:49,990
we're looking for your changes but if

00:08:47,740 --> 00:08:56,890
your reference is not changing we are

00:08:49,990 --> 00:08:59,890
not changing anything so what can we do

00:08:56,890 --> 00:09:02,650
to make this work as we expect it to

00:08:59,890 --> 00:09:05,250
work one thing we can do is to change

00:09:02,650 --> 00:09:09,640
the reference itself so instead of

00:09:05,250 --> 00:09:13,110
pushing to my files i can just

00:09:09,640 --> 00:09:19,990
concatenate and create a new reference

00:09:13,110 --> 00:09:22,930
which should fix my problem so I have

00:09:19,990 --> 00:09:27,960
the FI method here and I'm pushing and

00:09:22,930 --> 00:09:27,960
instead I broken catch night

00:09:28,100 --> 00:09:31,850
oops I haven't already

00:09:38,060 --> 00:09:44,870
begin oh thank you awesome I was going

00:09:43,400 --> 00:09:53,780
to just look at it for another five

00:09:44,870 --> 00:09:58,670
minutes so I refresh it and factory is

00:09:53,780 --> 00:10:03,370
working fine and then I add a new one

00:09:58,670 --> 00:10:07,760
and voila it's there so this is all nice

00:10:03,370 --> 00:10:10,970
so far but there is a problem with this

00:10:07,760 --> 00:10:13,220
so we have to know where our data is

00:10:10,970 --> 00:10:14,960
coming from where our data is being

00:10:13,220 --> 00:10:20,180
manipulated and then we have to make the

00:10:14,960 --> 00:10:24,320
conscious choice of having immutable

00:10:20,180 --> 00:10:26,930
data source it might become a problem

00:10:24,320 --> 00:10:29,720
after a while especially if your data is

00:10:26,930 --> 00:10:31,670
being used by in many places and then

00:10:29,720 --> 00:10:35,000
it's coming being changed in more than

00:10:31,670 --> 00:10:38,180
one component and also we don't want to

00:10:35,000 --> 00:10:40,430
change our components according to you

00:10:38,180 --> 00:10:42,380
know little details that we are using in

00:10:40,430 --> 00:10:46,160
our Reno representation we want to make

00:10:42,380 --> 00:10:52,310
it as reusable as possible and not want

00:10:46,160 --> 00:10:55,310
to specify it this way one other thing

00:10:52,310 --> 00:10:59,120
that we could do is define our pipe as

00:10:55,310 --> 00:11:02,600
impure we can do that by defining it in

00:10:59,120 --> 00:11:07,400
our part metadata all we need to do is

00:11:02,600 --> 00:11:10,100
say pure false then angular starts to

00:11:07,400 --> 00:11:13,550
watch for any change I mean any change

00:11:10,100 --> 00:11:15,920
that happens that means that any time

00:11:13,550 --> 00:11:18,140
your mouse moves any vendors they click

00:11:15,920 --> 00:11:20,540
events we are still watching and then we

00:11:18,140 --> 00:11:23,030
are applying your filter function to

00:11:20,540 --> 00:11:26,660
every data which as you can imagine

00:11:23,030 --> 00:11:28,190
could be a kind of intense especially if

00:11:26,660 --> 00:11:30,580
you have a lot of data a lot of

00:11:28,190 --> 00:11:33,580
interactions and it might slow your

00:11:30,580 --> 00:11:33,580
rendering

00:11:33,870 --> 00:11:40,360
we can still use this and make another

00:11:37,900 --> 00:11:43,960
change in our components for example we

00:11:40,360 --> 00:11:46,300
can change the way we detect the change

00:11:43,960 --> 00:11:47,890
on our components level we can say

00:11:46,300 --> 00:11:51,370
instead of watching everything we just

00:11:47,890 --> 00:11:54,570
watch the own push which watches for

00:11:51,370 --> 00:11:54,570
only the input changes

00:12:04,360 --> 00:12:12,149
so we have the pure pipes and impure

00:12:07,300 --> 00:12:14,560
pipes and impure pipes can have some

00:12:12,149 --> 00:12:17,560
performance issues and pure pipes are

00:12:14,560 --> 00:12:20,769
the default but we might need to change

00:12:17,560 --> 00:12:27,269
the way they work a very good example of

00:12:20,769 --> 00:12:30,459
a impure pipe is the easting pipe so

00:12:27,269 --> 00:12:33,850
async pipe allows us to look for any

00:12:30,459 --> 00:12:36,670
promise to be result or any observable

00:12:33,850 --> 00:12:40,120
so instead of resolving your promise in

00:12:36,670 --> 00:12:42,550
our components and then assigning you to

00:12:40,120 --> 00:12:45,579
a variable and then binding it to our in

00:12:42,550 --> 00:12:47,500
our HTML we can directly have an

00:12:45,579 --> 00:12:52,390
observable as in this case the

00:12:47,500 --> 00:12:55,930
activities and just wait for it to have

00:12:52,390 --> 00:12:58,779
another data if it's an observable we

00:12:55,930 --> 00:13:00,850
are looking for the next data and in

00:12:58,779 --> 00:13:02,740
between we are not doing anything so we

00:13:00,850 --> 00:13:04,360
are just look looking for the last

00:13:02,740 --> 00:13:11,470
change that happens and then we are just

00:13:04,360 --> 00:13:14,920
ultra altering the last data point just

00:13:11,470 --> 00:13:16,570
for the you know code saving point of

00:13:14,920 --> 00:13:20,320
view this doesn't look like a huge

00:13:16,570 --> 00:13:22,600
improvement but actually it is a huge

00:13:20,320 --> 00:13:26,709
improvement this really works under the

00:13:22,600 --> 00:13:29,380
hood very performant ly because we are

00:13:26,709 --> 00:13:30,640
not about because of the reason that we

00:13:29,380 --> 00:13:33,060
are watching only for the last thing

00:13:30,640 --> 00:13:33,060
that has changed

00:13:35,560 --> 00:13:43,710
and up

00:13:38,880 --> 00:13:46,770
and that's it for my talk and this is my

00:13:43,710 --> 00:13:49,290
true de Angelo and my code will be up on

00:13:46,770 --> 00:13:52,730
github and it was my slides I will post

00:13:49,290 --> 00:13:52,730

YouTube URL: https://www.youtube.com/watch?v=joSHg-4ZBZ8


