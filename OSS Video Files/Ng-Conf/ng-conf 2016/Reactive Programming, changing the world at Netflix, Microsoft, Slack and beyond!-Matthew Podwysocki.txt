Title: Reactive Programming, changing the world at Netflix, Microsoft, Slack and beyond!-Matthew Podwysocki
Publication date: 2016-05-06
Playlist: ng-conf 2016
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:01,040 --> 00:00:08,370
hello hello hello hello how's everyone

00:00:06,359 --> 00:00:11,070
doing good lunch

00:00:08,370 --> 00:00:13,830
excellent so I want to start off real

00:00:11,070 --> 00:00:16,199
quickly talking about some some of the

00:00:13,830 --> 00:00:19,050
apps that we see nowadays so let's for

00:00:16,199 --> 00:00:22,170
example think about Smooth Streaming

00:00:19,050 --> 00:00:26,160
players or thinking about things like

00:00:22,170 --> 00:00:32,480
tutu MVC rock my talk or to think about

00:00:26,160 --> 00:00:35,489
code editors or games or even Netflix or

00:00:32,480 --> 00:00:38,700
even even things such as advanced

00:00:35,489 --> 00:00:41,489
business intelligence to other more

00:00:38,700 --> 00:00:43,469
games and to even things like

00:00:41,489 --> 00:00:45,690
productivity such as drawing what do

00:00:43,469 --> 00:00:50,160
they all have in common well they're all

00:00:45,690 --> 00:00:51,780
basically reactive based applications so

00:00:50,160 --> 00:00:55,739
what we're going to do is we're going to

00:00:51,780 --> 00:01:01,230
dive deep into exactly that what exactly

00:00:55,739 --> 00:01:04,830
makes a reactive programming program

00:01:01,230 --> 00:01:07,890
interesting so now let's go back to the

00:01:04,830 --> 00:01:09,810
real talk at hand here so we're going to

00:01:07,890 --> 00:01:11,549
be talking about how reactive

00:01:09,810 --> 00:01:13,740
programming has really kind of changed

00:01:11,549 --> 00:01:16,080
the world and the way you create apps

00:01:13,740 --> 00:01:17,850
today so of course I always want to

00:01:16,080 --> 00:01:19,830
start off with a little bit of

00:01:17,850 --> 00:01:25,619
JavaScript just to get everybody warmed

00:01:19,830 --> 00:01:27,840
up so you know what this so sup and

00:01:25,619 --> 00:01:30,570
since I this is all about concurrency

00:01:27,840 --> 00:01:32,759
let's just go there and just say take me

00:01:30,570 --> 00:01:38,120
down to the concurrency city where green

00:01:32,759 --> 00:01:42,500
grass is that the girls in the ant are

00:01:38,120 --> 00:01:45,800
it happens so you may wonder why I wear

00:01:42,500 --> 00:01:48,170
this stupid hats so I am a principal

00:01:45,800 --> 00:01:50,780
software engineer and open source server

00:01:48,170 --> 00:01:55,040
as it were and the reason why I called

00:01:50,780 --> 00:01:57,350
myself that was because I worked on a

00:01:55,040 --> 00:01:59,300
lot of things at my company where I

00:01:57,350 --> 00:02:02,150
truly believe that they had a lot of

00:01:59,300 --> 00:02:05,030
influence things like early adoption of

00:02:02,150 --> 00:02:08,780
node on Windows talking about early F

00:02:05,030 --> 00:02:12,470
sharp adoption including reactive req

00:02:08,780 --> 00:02:15,020
extensions but also recently we released

00:02:12,470 --> 00:02:18,590
react Windows which is the react native

00:02:15,020 --> 00:02:22,370
for the uwp platform that I currently

00:02:18,590 --> 00:02:24,140
work on so I'm from so it's you might be

00:02:22,370 --> 00:02:26,870
thinking it's kind of strange here is a

00:02:24,140 --> 00:02:29,440
Microsoft guy with with a Mac up here

00:02:26,870 --> 00:02:32,690
talking at an angular conference but

00:02:29,440 --> 00:02:35,120
here we are so I'd like to think that

00:02:32,690 --> 00:02:37,690
I'll put a little bit of metal back into

00:02:35,120 --> 00:02:37,690
Microsoft

00:02:38,070 --> 00:02:44,460
with all the stuff that I do so

00:02:41,670 --> 00:02:46,140
primarily I work on what's called the

00:02:44,460 --> 00:02:48,240
reactive extensions how many people have

00:02:46,140 --> 00:02:51,090
heard of that anyone anyone all right a

00:02:48,240 --> 00:02:53,490
few people and some applause there you

00:02:51,090 --> 00:02:56,790
go so I would easily say that I'm an Rx

00:02:53,490 --> 00:03:00,180
pusher and what I'm trying to do is

00:02:56,790 --> 00:03:01,860
trying to relay how exactly reactive

00:03:00,180 --> 00:03:04,140
programming is really really an

00:03:01,860 --> 00:03:07,290
interesting paradigm especially for us

00:03:04,140 --> 00:03:09,450
in the JavaScript world primarily what I

00:03:07,290 --> 00:03:12,390
want to talk about as well is people

00:03:09,450 --> 00:03:14,310
that are using it today so Netflix

00:03:12,390 --> 00:03:17,040
obviously their idea is that they want

00:03:14,310 --> 00:03:19,980
to stream movies and TV shows from any

00:03:17,040 --> 00:03:22,140
device and currently they could be a

00:03:19,980 --> 00:03:24,330
third they might be more of the u.s.

00:03:22,140 --> 00:03:25,350
broadband traffic right now so how do

00:03:24,330 --> 00:03:28,560
you deal with something like that

00:03:25,350 --> 00:03:31,230
something that big a scale well you

00:03:28,560 --> 00:03:34,260
really have to do that you have to think

00:03:31,230 --> 00:03:37,020
really really different so this is the

00:03:34,260 --> 00:03:39,420
story of how Microsoft Netflix and

00:03:37,020 --> 00:03:42,150
others saw some really big async

00:03:39,420 --> 00:03:45,420
problems by thinking quite differently

00:03:42,150 --> 00:03:46,860
about how we think about events so when

00:03:45,420 --> 00:03:48,720
you think about the Netflix player and

00:03:46,860 --> 00:03:50,670
you think about other things such as

00:03:48,720 --> 00:03:53,459
Microsoft Dell if you think about any

00:03:50,670 --> 00:03:55,500
number of things everything about your

00:03:53,459 --> 00:03:57,330
apps today is asynchronous whether it's

00:03:55,500 --> 00:03:59,700
your startup your player your data

00:03:57,330 --> 00:04:01,790
access your animations viewmodel

00:03:59,700 --> 00:04:05,640
bindings everything about your app

00:04:01,790 --> 00:04:09,530
happens to be reactive in some form or

00:04:05,640 --> 00:04:12,930
fashion and or at least Advent driven

00:04:09,530 --> 00:04:15,300
but comes with that comes a number of

00:04:12,930 --> 00:04:17,730
things such as nightmares that you had

00:04:15,300 --> 00:04:20,010
to deal with memory leaks I forgot to I

00:04:17,730 --> 00:04:23,130
forgot to get rid of my event handlers I

00:04:20,010 --> 00:04:24,720
left a few open I have race conditions

00:04:23,130 --> 00:04:27,360
between certain events that are

00:04:24,720 --> 00:04:29,100
happening I have callback health you

00:04:27,360 --> 00:04:31,710
know complex state machines whether I

00:04:29,100 --> 00:04:34,290
don't know quite how to read where my

00:04:31,710 --> 00:04:36,300
code goes next and so you have all this

00:04:34,290 --> 00:04:38,550
disjointed air-handling because of that

00:04:36,300 --> 00:04:42,330
because you how now have air handling in

00:04:38,550 --> 00:04:44,640
five or six different places so when

00:04:42,330 --> 00:04:46,919
Netflix really started this they they

00:04:44,640 --> 00:04:48,360
had a thing where they had five or six

00:04:46,919 --> 00:04:49,919
different languages where they were

00:04:48,360 --> 00:04:51,150
going about and trying to solve

00:04:49,919 --> 00:04:54,210
asynchronous problem

00:04:51,150 --> 00:04:55,889
different ways it wasn't until they

00:04:54,210 --> 00:04:58,620
discovered something like the reactive

00:04:55,889 --> 00:05:00,960
extensions that it suddenly popped a

00:04:58,620 --> 00:05:03,000
light for them that they realized that

00:05:00,960 --> 00:05:06,090
they could write their entire set of

00:05:03,000 --> 00:05:10,080
applications using one kind of language

00:05:06,090 --> 00:05:11,880
as it were which is the reactive

00:05:10,080 --> 00:05:14,699
extensions which is actually language

00:05:11,880 --> 00:05:17,850
neutral there's rx Java there's rx nets

00:05:14,699 --> 00:05:20,400
there's rx groovy Python Ruby

00:05:17,850 --> 00:05:22,919
rust you name it and of course

00:05:20,400 --> 00:05:24,930
JavaScript you name it there are there

00:05:22,919 --> 00:05:26,910
are versions for that so what they're

00:05:24,930 --> 00:05:29,880
able to do then is they're able to

00:05:26,910 --> 00:05:31,020
switch people between layers and but

00:05:29,880 --> 00:05:35,370
they're still speaking the same language

00:05:31,020 --> 00:05:37,500
they're still speaking rx so let's just

00:05:35,370 --> 00:05:40,490
face a certain thing asynchronous

00:05:37,500 --> 00:05:43,530
programming as we know it today is awful

00:05:40,490 --> 00:05:46,050
you know we live and call back hell and

00:05:43,530 --> 00:05:48,330
it's not just because we're we're too

00:05:46,050 --> 00:05:51,360
lazy to do you know continuation passing

00:05:48,330 --> 00:05:53,880
style and and just having the the code

00:05:51,360 --> 00:05:56,880
walk off the page it's more along the

00:05:53,880 --> 00:05:58,740
lines of we also have this really

00:05:56,880 --> 00:06:00,840
complex steep machines as to whether

00:05:58,740 --> 00:06:02,940
we're we're actually handling errors

00:06:00,840 --> 00:06:04,979
where we have success conditions and so

00:06:02,940 --> 00:06:10,200
forth and what you end up with is a

00:06:04,979 --> 00:06:11,669
cow's head but I think I think it's even

00:06:10,200 --> 00:06:14,210
worse when you're dealing with events

00:06:11,669 --> 00:06:18,630
you know so if something as simple as

00:06:14,210 --> 00:06:20,669
doing drag-and-drop is actually a lot

00:06:18,630 --> 00:06:22,349
more lines than you think it is because

00:06:20,669 --> 00:06:24,270
not only do you have to track Mouse down

00:06:22,349 --> 00:06:27,120
mouse up and Mouse move but you also

00:06:24,270 --> 00:06:28,889
have to track the state in between so

00:06:27,120 --> 00:06:33,870
what you always end up with a lot of the

00:06:28,889 --> 00:06:37,789
times is this poor kid trying to get the

00:06:33,870 --> 00:06:37,789
data after after it's long gone

00:06:38,180 --> 00:06:45,380
poor kid so promises promises are great

00:06:43,490 --> 00:06:47,390
the but they're only part of a solution

00:06:45,380 --> 00:06:49,670
in the fact that I can now linearize

00:06:47,390 --> 00:06:51,560
that callback hell that I had before so

00:06:49,670 --> 00:06:53,630
I can initialize the player then

00:06:51,560 --> 00:06:55,490
authorize the movie and handle the log

00:06:53,630 --> 00:06:57,640
in air if there is one and then I can

00:06:55,490 --> 00:07:00,830
play the movie or else it's unauthorized

00:06:57,640 --> 00:07:03,470
but that's and that's a great part of

00:07:00,830 --> 00:07:05,420
why promises are now very useful is the

00:07:03,470 --> 00:07:08,690
fact that we now have a single value to

00:07:05,420 --> 00:07:10,910
represent single async values but there

00:07:08,690 --> 00:07:13,610
are problems with that for example there

00:07:10,910 --> 00:07:16,520
is no innate way in the promises spec

00:07:13,610 --> 00:07:21,470
itself to handle cancellation at all so

00:07:16,520 --> 00:07:23,840
for example in the the the the fetch API

00:07:21,470 --> 00:07:26,990
that's part of service workers and so

00:07:23,840 --> 00:07:29,840
forth has no no way at all of doing

00:07:26,990 --> 00:07:32,780
cancelling a promise and in fact there's

00:07:29,840 --> 00:07:34,760
there's a wide array of discussion about

00:07:32,780 --> 00:07:37,880
this and and if you take a look at this

00:07:34,760 --> 00:07:40,220
thread there are 21 participants and 204

00:07:37,880 --> 00:07:42,350
comments so you could ask yourself how

00:07:40,220 --> 00:07:49,010
many engineers does it take to cancel a

00:07:42,350 --> 00:07:51,170
promise I'm sorry but not only that but

00:07:49,010 --> 00:07:53,240
the results of certain things that were

00:07:51,170 --> 00:07:55,460
missing from the spec as well and the

00:07:53,240 --> 00:07:56,960
fact that there is no finalization as

00:07:55,460 --> 00:08:01,250
well so if you're trying to model

00:07:56,960 --> 00:08:03,950
something such as IO which very much has

00:08:01,250 --> 00:08:05,990
a notion of cleanup at the very end as

00:08:03,950 --> 00:08:08,630
well as any cancellation like you get

00:08:05,990 --> 00:08:11,600
halfway through uploading a file and you

00:08:08,630 --> 00:08:14,120
want to stop well then promises as

00:08:11,600 --> 00:08:16,400
specified today do not have that

00:08:14,120 --> 00:08:20,420
solution I hope in the future that they

00:08:16,400 --> 00:08:22,730
will and that's all really say is is I

00:08:20,420 --> 00:08:25,370
would really really like to see it

00:08:22,730 --> 00:08:27,140
happen so it really is the final

00:08:25,370 --> 00:08:31,550
countdown in fact that it doesn't have

00:08:27,140 --> 00:08:35,210
it so one of the most common things that

00:08:31,550 --> 00:08:37,640
people try and and and do what I've and

00:08:35,210 --> 00:08:38,990
to explain is why it's interesting how

00:08:37,640 --> 00:08:41,570
many people have implemented type-ahead

00:08:38,990 --> 00:08:44,270
search how many people have done it

00:08:41,570 --> 00:08:47,840
right how many people have done it under

00:08:44,270 --> 00:08:50,950
200 lines of code Wow a few people here

00:08:47,840 --> 00:08:53,139
who brave souls so I did it

00:08:50,950 --> 00:08:56,050
in jQuery just to show you how it's done

00:08:53,139 --> 00:08:58,839
and I did cheat just a little bit using

00:08:56,050 --> 00:09:02,529
es6 syntax here but you can tell there's

00:08:58,839 --> 00:09:04,829
a way to to call the JQ xhr there's a

00:09:02,529 --> 00:09:07,990
way of debouncing there's a way of

00:09:04,829 --> 00:09:15,639
retrying if there are failures etc etc

00:09:07,990 --> 00:09:19,079
so it's write more do less but let me

00:09:15,639 --> 00:09:19,079
ask you can we do better

00:09:20,720 --> 00:09:29,130
well I think so because it really is a

00:09:23,670 --> 00:09:31,290
national priority of ours even back in

00:09:29,130 --> 00:09:32,790
the 1960s when they reach OU's to solve

00:09:31,290 --> 00:09:34,530
asynchronous programming and do other

00:09:32,790 --> 00:09:37,140
things not because they're easy but

00:09:34,530 --> 00:09:38,820
because they are hard but then he

00:09:37,140 --> 00:09:40,530
suddenly realized that was not really

00:09:38,820 --> 00:09:48,510
the case and it was easier just to go to

00:09:40,530 --> 00:09:49,890
the moon I think so call back hell we

00:09:48,510 --> 00:09:52,940
can actually solve in a very reactive

00:09:49,890 --> 00:09:55,320
way instead so when we think about

00:09:52,940 --> 00:09:56,760
flatmap or something like that we're

00:09:55,320 --> 00:09:59,460
really talking about chaining one

00:09:56,760 --> 00:10:01,230
observable or one continuation to

00:09:59,460 --> 00:10:03,840
another so don't really think too too

00:10:01,230 --> 00:10:06,210
hard about it just yet but the idea here

00:10:03,840 --> 00:10:08,340
is that we're taking initialising it's

00:10:06,210 --> 00:10:11,520
taking the player attempts with the

00:10:08,340 --> 00:10:14,130
movie ID authorizing and trying trying

00:10:11,520 --> 00:10:16,290
it three times and then take until

00:10:14,130 --> 00:10:18,300
cancels so for example halfway through

00:10:16,290 --> 00:10:19,820
and it's taking a really long time on my

00:10:18,300 --> 00:10:22,470
network I can hit the cancel button

00:10:19,820 --> 00:10:25,020
suddenly it goes away everything in

00:10:22,470 --> 00:10:29,370
terms of its initialization and

00:10:25,020 --> 00:10:31,860
everything else just goes away now the

00:10:29,370 --> 00:10:33,630
same thing with that that's Mouse drag

00:10:31,860 --> 00:10:36,680
example that I showed before where we

00:10:33,630 --> 00:10:39,480
had certain things with with showing

00:10:36,680 --> 00:10:41,760
Mouse drags well here we combined the

00:10:39,480 --> 00:10:45,000
flat map with we take the mouse down and

00:10:41,760 --> 00:10:47,940
the mouse move until Mouse up that was

00:10:45,000 --> 00:10:50,460
simple and even type-ahead where I

00:10:47,940 --> 00:10:53,220
showed you really hard code was really

00:10:50,460 --> 00:10:54,660
just getting the value D bouncing it

00:10:53,220 --> 00:10:57,030
just a little bit so if I'm a really

00:10:54,660 --> 00:11:00,450
fast hyper and not only that but I also

00:10:57,030 --> 00:11:03,120
handle out of air out of air out of

00:11:00,450 --> 00:11:06,090
order requests that come back and then I

00:11:03,120 --> 00:11:07,680
can retry three times so what you'll

00:11:06,090 --> 00:11:12,780
find is it's really actually harder to

00:11:07,680 --> 00:11:14,660
get burned that way so much better so

00:11:12,780 --> 00:11:21,380
what does reactive programming exactly

00:11:14,660 --> 00:11:21,380
know ain't this nope not this either

00:11:21,520 --> 00:11:26,890
so what it is is if we want to go to the

00:11:24,730 --> 00:11:29,560
dictionary it says readily responding to

00:11:26,890 --> 00:11:32,310
a stimulus okay well we've been doing

00:11:29,560 --> 00:11:35,110
that for a while isn't it more than that

00:11:32,310 --> 00:11:36,700
you know because us hipsters you know

00:11:35,110 --> 00:11:39,310
what those with us with beards who have

00:11:36,700 --> 00:11:41,290
been doing reactive programming for a

00:11:39,310 --> 00:11:44,530
long time so yes you kids we've been

00:11:41,290 --> 00:11:46,570
doing this for a long time but you

00:11:44,530 --> 00:11:49,360
really want to know it what it is you

00:11:46,570 --> 00:11:52,690
can go ahead and read a paper but you

00:11:49,360 --> 00:11:54,910
know just be prepared that most papers

00:11:52,690 --> 00:11:58,690
leave you kind of somewhere like this

00:11:54,910 --> 00:12:01,060
and I understand that you know even the

00:11:58,690 --> 00:12:03,250
most brightest of us have those kinds of

00:12:01,060 --> 00:12:05,860
reactions when we're looking at academic

00:12:03,250 --> 00:12:09,270
stuff and those industrious Germans

00:12:05,860 --> 00:12:09,270
really do have a word for it

00:12:10,690 --> 00:12:15,710
so what what else really makes up

00:12:14,210 --> 00:12:18,050
reactive programming I would certainly

00:12:15,710 --> 00:12:19,670
say react to load obviously you know

00:12:18,050 --> 00:12:21,710
when do you start shoving things down

00:12:19,670 --> 00:12:26,090
your shirts is certainly one of those

00:12:21,710 --> 00:12:29,050
things reactive failure as well you know

00:12:26,090 --> 00:12:29,050
when do you bail out

00:12:30,140 --> 00:12:36,090
and how do you react to your users

00:12:33,710 --> 00:12:40,410
without giving them the beach ball of

00:12:36,090 --> 00:12:42,060
doom so back in 1994 I don't know how

00:12:40,410 --> 00:12:43,710
many people were still born were born

00:12:42,060 --> 00:12:49,110
back then but there was this book of the

00:12:43,710 --> 00:12:51,330
Gang of Four an iterator and observable

00:12:49,110 --> 00:12:53,670
were two of those patterns but they were

00:12:51,330 --> 00:12:55,620
never connected but let me ask you this

00:12:53,670 --> 00:12:57,870
what is the difference between an

00:12:55,620 --> 00:13:00,900
iterable what we see a here of just

00:12:57,870 --> 00:13:02,670
simple coordinates and an event and I'd

00:13:00,900 --> 00:13:05,430
like to say that absolutely nothing

00:13:02,670 --> 00:13:08,520
they're both collections of some sorts

00:13:05,430 --> 00:13:11,250
are rays are simply collections in

00:13:08,520 --> 00:13:14,610
memory and events are collections over

00:13:11,250 --> 00:13:17,100
time that's it so we already have the

00:13:14,610 --> 00:13:19,440
iterator pattern in es2015 where we can

00:13:17,100 --> 00:13:23,580
call next next and it gives us whether

00:13:19,440 --> 00:13:25,320
its value is has a value or it's going

00:13:23,580 --> 00:13:27,360
to next and then finally you get true

00:13:25,320 --> 00:13:29,160
and the same applies to what we've

00:13:27,360 --> 00:13:31,260
always been doing in JavaScript as well

00:13:29,160 --> 00:13:34,170
with Dona add eventlistener when things

00:13:31,260 --> 00:13:36,750
go but right now what it is is is pool

00:13:34,170 --> 00:13:39,140
versus push this add event listener

00:13:36,750 --> 00:13:42,750
tells us when it's ready it will give us

00:13:39,140 --> 00:13:44,850
things so it's really the what I would

00:13:42,750 --> 00:13:47,430
say is the subject observer pattern that

00:13:44,850 --> 00:13:49,470
they had but then right so what we have

00:13:47,430 --> 00:13:52,920
is the observable here with a subscribe

00:13:49,470 --> 00:13:55,950
and that subscribe takes an observer so

00:13:52,920 --> 00:13:57,660
that observer takes in so it says notify

00:13:55,950 --> 00:13:59,220
me when there's something next when

00:13:57,660 --> 00:14:01,260
there's an error and when there's a

00:13:59,220 --> 00:14:03,360
completion and then I hand you back the

00:14:01,260 --> 00:14:06,330
subscription that subscription then will

00:14:03,360 --> 00:14:09,990
allow us to unsubscribe at any point and

00:14:06,330 --> 00:14:12,090
clean up the entire chain and we have a

00:14:09,990 --> 00:14:14,220
certain grammar to it in the way that's

00:14:12,090 --> 00:14:16,560
that it actually works so that for

00:14:14,220 --> 00:14:19,920
example if we have a couple of values

00:14:16,560 --> 00:14:22,140
and infinite values we keep going we can

00:14:19,920 --> 00:14:23,940
keep going we can end on errors we can

00:14:22,140 --> 00:14:26,490
end on completion but we can never have

00:14:23,940 --> 00:14:29,220
overlaps and we can't have things happen

00:14:26,490 --> 00:14:31,440
after the fact so now we have this

00:14:29,220 --> 00:14:33,720
notion of a first-class async value

00:14:31,440 --> 00:14:36,840
really kind of cool you can create one

00:14:33,720 --> 00:14:39,720
and you can return one from a method so

00:14:36,840 --> 00:14:41,610
it's great for testability purposes so

00:14:39,720 --> 00:14:43,110
when we think about where it fits we've

00:14:41,610 --> 00:14:45,600
got object for sin

00:14:43,110 --> 00:14:48,450
value synchronous and iterable for

00:14:45,600 --> 00:14:50,339
multiple value synchronous then we have

00:14:48,450 --> 00:14:52,410
the promise for asynchronous single

00:14:50,339 --> 00:14:54,510
value but then we have observable so

00:14:52,410 --> 00:14:57,720
observable as you can see from iterable

00:14:54,510 --> 00:15:01,320
is the same exact code so you kind of

00:14:57,720 --> 00:15:04,410
realize wow how everything really is a

00:15:01,320 --> 00:15:07,709
stream so if you understand a few very

00:15:04,410 --> 00:15:11,100
small things with very small functions

00:15:07,709 --> 00:15:13,260
you can understand a lot map projects

00:15:11,100 --> 00:15:14,790
one value to the next so it doesn't

00:15:13,260 --> 00:15:17,430
mutate the existing collection it

00:15:14,790 --> 00:15:21,620
creates a new collection we can filter

00:15:17,430 --> 00:15:24,540
so I can say I only want circles here I

00:15:21,620 --> 00:15:25,769
can do the flat map well that gets a

00:15:24,540 --> 00:15:28,170
little bit more difficult but you can

00:15:25,769 --> 00:15:33,019
just think of it as a map than a flatten

00:15:28,170 --> 00:15:38,519
into a single stream so whatever you do

00:15:33,019 --> 00:15:42,240
you must flat map it so the future

00:15:38,519 --> 00:15:43,230
really is here with angular 2 a lot of

00:15:42,240 --> 00:15:45,149
things have started to become

00:15:43,230 --> 00:15:48,540
observables themselves as you'll know

00:15:45,149 --> 00:15:52,769
the HTTP module and so forth really

00:15:48,540 --> 00:15:55,320
became a core part of what our angular

00:15:52,769 --> 00:15:57,390
and what's really cool is we can take

00:15:55,320 --> 00:16:00,420
that same type-ahead search that we had

00:15:57,390 --> 00:16:03,660
before turn into an NG form control with

00:16:00,420 --> 00:16:05,820
our async pipe and then we can go ahead

00:16:03,660 --> 00:16:08,370
and do our search since search is

00:16:05,820 --> 00:16:12,089
nothing more than than an observable we

00:16:08,370 --> 00:16:14,250
can say get and then map and then here

00:16:12,089 --> 00:16:17,250
we can do our Wikipedia thing which is

00:16:14,250 --> 00:16:19,709
value changes for that particular term

00:16:17,250 --> 00:16:23,190
or that control distinct until change

00:16:19,709 --> 00:16:26,220
and then switch map now we can also do

00:16:23,190 --> 00:16:28,589
more advanced things such as video lists

00:16:26,220 --> 00:16:31,079
so if you're imagining on honest can

00:16:28,589 --> 00:16:33,720
very constrained device you only want to

00:16:31,079 --> 00:16:35,850
keep in certain things on the screen if

00:16:33,720 --> 00:16:38,040
you can help it now I'm not going to

00:16:35,850 --> 00:16:40,500
necessarily dive through this more along

00:16:38,040 --> 00:16:42,540
the lines of it's going to go through

00:16:40,500 --> 00:16:47,579
there and start to pull up whole whether

00:16:42,540 --> 00:16:50,490
or not the the actual frame or row is in

00:16:47,579 --> 00:16:53,040
sight and if it isn't then then that

00:16:50,490 --> 00:16:54,990
take until row hides basically gets rid

00:16:53,040 --> 00:16:56,580
of it and all of the associated events

00:16:54,990 --> 00:16:58,410
and so forth with it

00:16:56,580 --> 00:17:00,209
so it's really great for constrained

00:16:58,410 --> 00:17:03,990
devices as well to make sure that you

00:17:00,209 --> 00:17:06,540
have nothing dangling and even the cut

00:17:03,990 --> 00:17:11,459
by the netflix player itself when you

00:17:06,540 --> 00:17:14,880
take that callback hell we had that that

00:17:11,459 --> 00:17:18,030
what we showed before now

00:17:14,880 --> 00:17:21,360
slack for for Windows if those who

00:17:18,030 --> 00:17:23,699
actually use Windows around here

00:17:21,360 --> 00:17:26,910
they have implementing spell check and a

00:17:23,699 --> 00:17:29,040
lot of other things as part of as part

00:17:26,910 --> 00:17:30,570
of slack so once again I'm not going to

00:17:29,040 --> 00:17:33,450
necessarily go through this but I'm

00:17:30,570 --> 00:17:35,730
showing you the power that people do so

00:17:33,450 --> 00:17:37,620
for example when you're typing and then

00:17:35,730 --> 00:17:39,720
when you stop typing it's going to start

00:17:37,620 --> 00:17:42,690
figuring out what language your happen

00:17:39,720 --> 00:17:45,120
to be using and not only that but then

00:17:42,690 --> 00:17:47,309
starting to do suggestions based upon

00:17:45,120 --> 00:17:52,380
what you've typed if you've typed in th

00:17:47,309 --> 00:17:56,070
teh and you meant th e so ng R X really

00:17:52,380 --> 00:17:59,030
really cool stuff Rob Wormald has done

00:17:56,070 --> 00:18:03,419
some really cool stuff there with with

00:17:59,030 --> 00:18:06,390
angular and so forth how many people

00:18:03,419 --> 00:18:09,210
have heard of Redux good number of

00:18:06,390 --> 00:18:14,040
people okay what if I told you it's only

00:18:09,210 --> 00:18:15,600
one line of code and rx scan yep there

00:18:14,040 --> 00:18:18,030
it is right there some say it's a

00:18:15,600 --> 00:18:23,400
two-wire using scan and very wealthy and

00:18:18,030 --> 00:18:25,710
it is so once again on the server you've

00:18:23,400 --> 00:18:27,900
got the same kind of thing you can do

00:18:25,710 --> 00:18:30,510
really advanced stuff like I said the

00:18:27,900 --> 00:18:33,210
react to users react so fights to

00:18:30,510 --> 00:18:36,120
everything else I think is very very

00:18:33,210 --> 00:18:37,620
important for note as well what's also

00:18:36,120 --> 00:18:40,590
really cool is the fact that it's

00:18:37,620 --> 00:18:43,140
actually hopefully coming to become a

00:18:40,590 --> 00:18:46,200
standard as well where we can start

00:18:43,140 --> 00:18:47,340
writing these instead of instead of

00:18:46,200 --> 00:18:50,340
needing anything else

00:18:47,340 --> 00:18:55,350
no no frameworks or anything like that

00:18:50,340 --> 00:18:57,510
required so with that I would like to

00:18:55,350 --> 00:19:00,720
take off this hat for just a moment and

00:18:57,510 --> 00:19:03,350
I really would like to make reactive

00:19:00,720 --> 00:19:03,350
great again

00:19:10,890 --> 00:19:15,030
so we're going so we're gonna go ahead

00:19:12,929 --> 00:19:18,299
and build a wall around all those

00:19:15,030 --> 00:19:20,850
nonreactive frameworks it's gonna be

00:19:18,299 --> 00:19:32,990
huge and we're gonna make Google pay for

00:19:20,850 --> 00:19:32,990

YouTube URL: https://www.youtube.com/watch?v=yEeDbHvg1vQ


