Title: Progressive Web Apps - Jeff Cross, Alex Rickabaugh
Publication date: 2016-05-05
Playlist: ng-conf 2016
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:02,330 --> 00:00:07,290
thank you this is a quick update to Jeff

00:00:05,490 --> 00:00:08,550
speaker notes he's graduated from

00:00:07,290 --> 00:00:10,559
lumberjack the trucker

00:00:08,550 --> 00:00:14,759
yeah is a shirt now that measures the

00:00:10,559 --> 00:00:17,539
beard I'm this is Rowdy Haddad I'm Jeff

00:00:14,759 --> 00:00:29,820
cross and the Malik's reco ba and we are

00:00:17,539 --> 00:00:31,980
angular Multi thank you rowdy all right

00:00:29,820 --> 00:00:34,200
so we know where the last talk of the

00:00:31,980 --> 00:00:35,610
day it's been a long day we're all

00:00:34,200 --> 00:00:38,910
that's standing between you and food

00:00:35,610 --> 00:00:41,070
mm-hmm hours of awesome content to show

00:00:38,910 --> 00:00:42,570
you yeah Jeff's gonna develop an entire

00:00:41,070 --> 00:00:46,140
app from scratch he's not he doesn't

00:00:42,570 --> 00:00:47,129
type as fast as Kara but you try it so

00:00:46,140 --> 00:00:48,690
we're actually here to talk to you about

00:00:47,129 --> 00:00:52,289
building mobile applications with

00:00:48,690 --> 00:00:55,079
angular what was it well we just get far

00:00:52,289 --> 00:00:56,489
ahead yeah this thing's fast okay so if

00:00:55,079 --> 00:00:58,199
you're building an app that's intended

00:00:56,489 --> 00:00:59,910
for mobile devices you know that that

00:00:58,199 --> 00:01:02,160
ecosystem can be really challenging to

00:00:59,910 --> 00:01:04,379
work in if you haven't tried it the way

00:01:02,160 --> 00:01:05,790
it works is kind of like this let's say

00:01:04,379 --> 00:01:07,770
you want to build the next big mobile

00:01:05,790 --> 00:01:11,010
app you've mastered pizza delivery with

00:01:07,770 --> 00:01:12,000
drones five minutes or it's free so what

00:01:11,010 --> 00:01:13,830
you're gonna do is you're gonna go out

00:01:12,000 --> 00:01:16,020
and learn Swift programming for iOS apps

00:01:13,830 --> 00:01:18,330
and all the ecosystem and toolchain

00:01:16,020 --> 00:01:20,280
there and build your iOS app and then

00:01:18,330 --> 00:01:21,990
you'll forget it all and you'll start

00:01:20,280 --> 00:01:25,049
over and you'll go and learn Android and

00:01:21,990 --> 00:01:26,970
Java and build your Android app and if

00:01:25,049 --> 00:01:28,770
you're still you still have energy left

00:01:26,970 --> 00:01:30,240
over after that you can invest in

00:01:28,770 --> 00:01:31,890
building a mobile web app too because

00:01:30,240 --> 00:01:34,350
not everyone in the world is on iOS or

00:01:31,890 --> 00:01:36,119
Android so if you're a company doing

00:01:34,350 --> 00:01:37,860
this you can probably afford to hire

00:01:36,119 --> 00:01:39,900
some separate developers and build both

00:01:37,860 --> 00:01:41,280
apps at the same time but the problem

00:01:39,900 --> 00:01:42,450
remains you're still duplicating all

00:01:41,280 --> 00:01:43,229
this effort and that's a little

00:01:42,450 --> 00:01:45,600
inefficient

00:01:43,229 --> 00:01:47,100
yeah and it's bad too because if you're

00:01:45,600 --> 00:01:48,329
building the same app in multiple places

00:01:47,100 --> 00:01:50,280
it's probably going to be a little

00:01:48,329 --> 00:01:51,479
different the quality is probably going

00:01:50,280 --> 00:01:52,799
to be a little bit different depending

00:01:51,479 --> 00:01:55,560
on the team who builds it and the

00:01:52,799 --> 00:01:57,299
platform it's built on and it's also

00:01:55,560 --> 00:01:58,710
just not going to feel the same and

00:01:57,299 --> 00:02:00,479
there's all this communication overhead

00:01:58,710 --> 00:02:02,909
with trying to make the apps consistent

00:02:00,479 --> 00:02:04,200
and also it's expensive to have a lot of

00:02:02,909 --> 00:02:06,630
people building different versions of

00:02:04,200 --> 00:02:08,220
apps and if you're a solo person or a

00:02:06,630 --> 00:02:10,330
small company that might come down to a

00:02:08,220 --> 00:02:12,190
choice of you just choosing to support

00:02:10,330 --> 00:02:13,900
one platform instead of supporting all

00:02:12,190 --> 00:02:16,030
platforms that your potential users are

00:02:13,900 --> 00:02:19,000
using so these are some obvious problems

00:02:16,030 --> 00:02:21,070
with with the typical model of build the

00:02:19,000 --> 00:02:22,390
same app natively on different platforms

00:02:21,070 --> 00:02:24,730
I mean we've heard some good solutions

00:02:22,390 --> 00:02:27,130
with with native script and and other

00:02:24,730 --> 00:02:28,810
tools today and those are great

00:02:27,130 --> 00:02:30,460
solutions too but let's look at the web

00:02:28,810 --> 00:02:33,100
like the web is good at solving these

00:02:30,460 --> 00:02:36,010
problems the web is a platform that

00:02:33,100 --> 00:02:36,940
works everywhere but it has some

00:02:36,010 --> 00:02:39,250
challenges that we'll talk about later

00:02:36,940 --> 00:02:40,690
so aside from the web solving some of

00:02:39,250 --> 00:02:43,030
these technical challenges let's look at

00:02:40,690 --> 00:02:46,330
some of the things the web does really

00:02:43,030 --> 00:02:49,300
well at in terms of business value one

00:02:46,330 --> 00:02:50,950
is that it has a lot more reach it has

00:02:49,300 --> 00:02:53,410
more reach depending on on your strategy

00:02:50,950 --> 00:02:55,480
it's searchable so web apps are

00:02:53,410 --> 00:02:57,160
automatically searchable presuming you

00:02:55,480 --> 00:02:59,200
don't do some some bad things to make

00:02:57,160 --> 00:03:01,270
them not searchable and they're

00:02:59,200 --> 00:03:03,130
shareable so web apps tend to have links

00:03:01,270 --> 00:03:04,959
to content that's stay the same so that

00:03:03,130 --> 00:03:06,730
you go to a link you're gonna get the

00:03:04,959 --> 00:03:08,230
same content you already saw so that

00:03:06,730 --> 00:03:10,330
makes it easier to share on Twitter and

00:03:08,230 --> 00:03:11,920
Facebook and I'll see a link and I'll be

00:03:10,330 --> 00:03:13,630
able to easily go to it and see the

00:03:11,920 --> 00:03:15,700
thing you shared and do something about

00:03:13,630 --> 00:03:17,560
and that comes to the last part which is

00:03:15,700 --> 00:03:19,660
their low friction if I click a link

00:03:17,560 --> 00:03:21,430
it's there I can choose what to do about

00:03:19,660 --> 00:03:23,530
it I don't have to install an app just

00:03:21,430 --> 00:03:25,480
to see some some piece of content that

00:03:23,530 --> 00:03:28,000
you wanted to share so with the web

00:03:25,480 --> 00:03:30,730
having these nice benefits of automatic

00:03:28,000 --> 00:03:32,290
cross-platform support and reach why

00:03:30,730 --> 00:03:34,480
isn't it the default just to build

00:03:32,290 --> 00:03:35,550
everything as a web app that works

00:03:34,480 --> 00:03:38,620
everywhere

00:03:35,550 --> 00:03:40,360
so yet you might imagine this has

00:03:38,620 --> 00:03:42,850
actually been tried in facebook is a

00:03:40,360 --> 00:03:45,100
great example the first mobile app was

00:03:42,850 --> 00:03:46,660
an html5 based application but they

00:03:45,100 --> 00:03:48,970
never really got it to work right

00:03:46,660 --> 00:03:50,290
Mark Zuckerberg even came out and said

00:03:48,970 --> 00:03:54,910
that they just couldn't get it to match

00:03:50,290 --> 00:03:56,489
the capabilities of a native platform so

00:03:54,910 --> 00:03:59,560
why did Facebook come to this conclusion

00:03:56,489 --> 00:04:01,840
what makes the native experience so much

00:03:59,560 --> 00:04:03,340
better that it's worth duplicating all

00:04:01,840 --> 00:04:05,920
the separate for each platform to build

00:04:03,340 --> 00:04:07,000
individual native apps as it turns out

00:04:05,920 --> 00:04:10,030
there are some things about native

00:04:07,000 --> 00:04:12,250
applications which really shine so one

00:04:10,030 --> 00:04:13,930
if you ask the team who's built the apps

00:04:12,250 --> 00:04:15,880
across different platforms and you ask

00:04:13,930 --> 00:04:17,049
why did you choose native probably the

00:04:15,880 --> 00:04:19,030
first thing you'll hear is the

00:04:17,049 --> 00:04:21,489
performance of native and it's true if

00:04:19,030 --> 00:04:22,730
you click a icon of a native app you'll

00:04:21,489 --> 00:04:24,890
probably see something show up

00:04:22,730 --> 00:04:26,390
right away that at least you know the

00:04:24,890 --> 00:04:29,060
app is there even if it's still loading

00:04:26,390 --> 00:04:30,620
data and also scrolling around it's

00:04:29,060 --> 00:04:32,270
easier to get high frame rates because

00:04:30,620 --> 00:04:34,520
of the the default hardware acceleration

00:04:32,270 --> 00:04:35,870
of a lot of the components and then

00:04:34,520 --> 00:04:38,750
there's reengagement you've got push

00:04:35,870 --> 00:04:40,130
notifications on the app so you can know

00:04:38,750 --> 00:04:41,630
when you need to act on something when

00:04:40,130 --> 00:04:44,060
you've got a new favorite on your tweet

00:04:41,630 --> 00:04:45,650
or also just having it on the home

00:04:44,060 --> 00:04:48,620
screen so you can open it right back up

00:04:45,650 --> 00:04:49,750
and get get into the app without opening

00:04:48,620 --> 00:04:52,250
your browser or waiting for it to load

00:04:49,750 --> 00:04:54,050
navigating to a screen and finally

00:04:52,250 --> 00:04:56,060
there's there's API access sometimes an

00:04:54,050 --> 00:04:58,190
app just needs api's that aren't

00:04:56,060 --> 00:05:01,280
available on web like historically it's

00:04:58,190 --> 00:05:03,110
been camera or audio or Bluetooth and

00:05:01,280 --> 00:05:05,270
and storage and and though most of these

00:05:03,110 --> 00:05:06,500
apps are making their these api's are

00:05:05,270 --> 00:05:08,720
making their way into the web platform

00:05:06,500 --> 00:05:14,570
there's still some that that you just

00:05:08,720 --> 00:05:16,400
need and you've gotta go native for yes

00:05:14,570 --> 00:05:18,140
so given all of those benefits that Jeff

00:05:16,400 --> 00:05:19,880
talked about about with native

00:05:18,140 --> 00:05:21,530
applications it's safe to say that you

00:05:19,880 --> 00:05:23,270
know Facebook made the right call and

00:05:21,530 --> 00:05:25,940
committing to native development back in

00:05:23,270 --> 00:05:27,740
2013 but I just want to put that in

00:05:25,940 --> 00:05:30,530
context for a bit when Mark was on stage

00:05:27,740 --> 00:05:33,230
talking about how html5 apps didn't work

00:05:30,530 --> 00:05:35,420
for them angular 1.2 had just entered

00:05:33,230 --> 00:05:36,170
its release candidate that was a long

00:05:35,420 --> 00:05:38,240
time ago

00:05:36,170 --> 00:05:39,890
obviously the web's changed a lot since

00:05:38,240 --> 00:05:42,050
then hopefully none of you are still

00:05:39,890 --> 00:05:44,420
using one positives anyone still on 1.2

00:05:42,050 --> 00:05:46,840
of angular yeah it's the best one yeah

00:05:44,420 --> 00:05:46,840
don't upgrade

00:05:48,069 --> 00:05:52,300
so so we we bought under this new idea

00:05:50,770 --> 00:05:55,270
that that started with the chrome team

00:05:52,300 --> 00:05:56,740
called progressive web apps and what

00:05:55,270 --> 00:05:58,539
progressive web apps are we'll go into a

00:05:56,740 --> 00:06:02,110
little bit more but essentially it's

00:05:58,539 --> 00:06:04,449
best practices and and techniques based

00:06:02,110 --> 00:06:06,159
on emerging web standards that have

00:06:04,449 --> 00:06:08,830
already been implemented in some

00:06:06,159 --> 00:06:10,240
browsers the basic idea is you take

00:06:08,830 --> 00:06:12,370
normal web apps and make them more

00:06:10,240 --> 00:06:14,919
powerful by adding new new ideas to them

00:06:12,370 --> 00:06:17,740
using new plateau platform api's in

00:06:14,919 --> 00:06:20,289
different ways and and they can work on

00:06:17,740 --> 00:06:22,389
any platform but be better on platforms

00:06:20,289 --> 00:06:24,219
the more they take advantage of the new

00:06:22,389 --> 00:06:26,169
techniques and api's in the web platform

00:06:24,219 --> 00:06:27,490
so it start with chrome but other

00:06:26,169 --> 00:06:31,120
browsers are on board which we'll look

00:06:27,490 --> 00:06:32,590
at later in the end asides so when we

00:06:31,120 --> 00:06:33,909
say progressive web apps it's still kind

00:06:32,590 --> 00:06:37,300
of a it means different things to

00:06:33,909 --> 00:06:38,979
different people and and when we talk

00:06:37,300 --> 00:06:41,589
about it today the things we're going to

00:06:38,979 --> 00:06:43,870
focus on are these four aspects of it or

00:06:41,589 --> 00:06:46,180
three aspects really the instant loading

00:06:43,870 --> 00:06:48,849
idea where you open an app and it feels

00:06:46,180 --> 00:06:50,499
instant it feels like the app is living

00:06:48,849 --> 00:06:53,680
on your device and not something that is

00:06:50,499 --> 00:06:55,810
being fetched over HTTP and - it should

00:06:53,680 --> 00:06:57,009
work offline or with that network you

00:06:55,810 --> 00:06:58,120
should be able to use some of the app

00:06:57,009 --> 00:06:59,580
even if not the whole thing

00:06:58,120 --> 00:07:01,779
without needing an internet connection

00:06:59,580 --> 00:07:03,699
it should be installable to your home

00:07:01,779 --> 00:07:05,649
screen so that you can access it just

00:07:03,699 --> 00:07:06,909
like a native app and have splash

00:07:05,649 --> 00:07:08,649
screens and fullscreen just like a

00:07:06,909 --> 00:07:10,539
native app and it should be able to send

00:07:08,649 --> 00:07:14,500
you notifications when there's content

00:07:10,539 --> 00:07:16,960
that you should see so we on the mobile

00:07:14,500 --> 00:07:18,099
team really believe in what chrome and

00:07:16,960 --> 00:07:19,569
the other browsers think that these are

00:07:18,099 --> 00:07:20,979
going to be the future of the web and we

00:07:19,569 --> 00:07:23,169
think angular is going to be a great

00:07:20,979 --> 00:07:24,939
platform for building them but there's

00:07:23,169 --> 00:07:26,800
only one real raid to find out if that

00:07:24,939 --> 00:07:28,960
was true and that was to go ahead and

00:07:26,800 --> 00:07:31,930
actually make one of these apps so

00:07:28,960 --> 00:07:33,699
that's what we did this is issue 0 issue

00:07:31,930 --> 00:07:35,169
0 is our github issue tree-hugging

00:07:33,699 --> 00:07:38,050
application we wanted to do something

00:07:35,169 --> 00:07:39,729
that was beyond to do MVC an actual real

00:07:38,050 --> 00:07:41,649
application that we would use ourselves

00:07:39,729 --> 00:07:44,289
and we solve a problem for us

00:07:41,649 --> 00:07:46,000
so issue 0 allows rapid triaging of

00:07:44,289 --> 00:07:47,229
github issues by swiping left or right

00:07:46,000 --> 00:07:49,850
on them you can think of it as like

00:07:47,229 --> 00:07:52,670
tinder for github issues

00:07:49,850 --> 00:07:55,910
so here's how it works I've selected a

00:07:52,670 --> 00:07:59,180
repository in the application and then I

00:07:55,910 --> 00:08:02,030
can see issues and I can swipe to the

00:07:59,180 --> 00:08:04,070
right to know the left to close the

00:08:02,030 --> 00:08:05,720
issue and swipe to the right if I wanted

00:08:04,070 --> 00:08:07,910
to triage the issue like add a comment

00:08:05,720 --> 00:08:09,860
to it like this is legit add some labels

00:08:07,910 --> 00:08:11,420
to it and say okay this is a real issue

00:08:09,860 --> 00:08:13,390
we should deal with at some point but

00:08:11,420 --> 00:08:16,610
right now I'm just processing issues

00:08:13,390 --> 00:08:18,140
it's it's we considered a good

00:08:16,610 --> 00:08:19,700
progressive web app a good start we've

00:08:18,140 --> 00:08:21,200
started incorporating some of the ideas

00:08:19,700 --> 00:08:23,180
we've talked about and it's built with

00:08:21,200 --> 00:08:25,870
the hot new angular tools I can give a

00:08:23,180 --> 00:08:29,930
to obviously angular COI

00:08:25,870 --> 00:08:33,050
ng rx angularfire - and firebase cons

00:08:29,930 --> 00:08:35,570
thank you first angular CLI all rights

00:08:33,050 --> 00:08:38,900
Jas Ben Lesh thank you if you're here

00:08:35,570 --> 00:08:40,729
somewhere and ng rx which is our are

00:08:38,900 --> 00:08:43,849
reactive libraries for data store

00:08:40,729 --> 00:08:45,530
management so let's look a little bit

00:08:43,849 --> 00:08:48,530
more closely on the progressive web app

00:08:45,530 --> 00:08:50,150
characteristics of issue zero one is

00:08:48,530 --> 00:08:51,500
that it loads instantly and we'll show

00:08:50,150 --> 00:08:54,710
you how we do this with a technique

00:08:51,500 --> 00:08:56,300
called app shell and one and two it will

00:08:54,710 --> 00:08:58,760
work offline it will load basic

00:08:56,300 --> 00:09:00,710
functionality static assets and some

00:08:58,760 --> 00:09:03,260
data without an internet connection

00:09:00,710 --> 00:09:05,240
and third it's installable using a new

00:09:03,260 --> 00:09:09,620
API in the web platform called web app

00:09:05,240 --> 00:09:11,330
manifest so one of the most important

00:09:09,620 --> 00:09:13,850
features of progressive web apps are of

00:09:11,330 --> 00:09:16,190
a technique that's valuable is called

00:09:13,850 --> 00:09:18,230
app shell and this gives the the

00:09:16,190 --> 00:09:20,030
perception that an app is loaded

00:09:18,230 --> 00:09:21,620
instantly even if it still needs to do

00:09:20,030 --> 00:09:24,320
more work to fetch its assets and

00:09:21,620 --> 00:09:27,110
bootstrap with the framework and so the

00:09:24,320 --> 00:09:29,570
when we say app shell we refer to the

00:09:27,110 --> 00:09:31,220
static UI surrounding dynamic content in

00:09:29,570 --> 00:09:34,520
an application which usually consists of

00:09:31,220 --> 00:09:36,830
a toolbar some kind of navigation a side

00:09:34,520 --> 00:09:38,600
nav maybe in angular 2 you could think

00:09:36,830 --> 00:09:40,670
of it as everything outside the router

00:09:38,600 --> 00:09:42,620
outlet component the in your route

00:09:40,670 --> 00:09:45,140
components so the things that are there

00:09:42,620 --> 00:09:46,790
for all using your application so we

00:09:45,140 --> 00:09:48,260
want to take this route component

00:09:46,790 --> 00:09:50,600
everything outside a router outlet and

00:09:48,260 --> 00:09:52,310
inline it into our index.html that's

00:09:50,600 --> 00:09:54,470
returned from our server when anyone

00:09:52,310 --> 00:09:56,660
makes a request to one of the URLs in

00:09:54,470 --> 00:09:59,750
our application so the goal is to take

00:09:56,660 --> 00:10:01,970
take all this this component render it

00:09:59,750 --> 00:10:02,570
inline it in my index.html so it can be

00:10:01,970 --> 00:10:04,040
rendered

00:10:02,570 --> 00:10:05,690
not needing any follow-up network

00:10:04,040 --> 00:10:07,490
requests so that the user can

00:10:05,690 --> 00:10:09,320
immediately see that the app is there

00:10:07,490 --> 00:10:10,550
and it's doing something before angular

00:10:09,320 --> 00:10:14,780
or anything else is loaded in

00:10:10,550 --> 00:10:16,460
bootstrapped let's take a look at what

00:10:14,780 --> 00:10:19,910
this actually looks like in issue zero

00:10:16,460 --> 00:10:21,230
so this is our index.html page on the

00:10:19,910 --> 00:10:23,570
right you can see it rendered on the

00:10:21,230 --> 00:10:25,130
phone we just have a simple title bar

00:10:23,570 --> 00:10:27,290
and this beautiful material loading

00:10:25,130 --> 00:10:29,290
indicator on the left you can see the

00:10:27,290 --> 00:10:31,760
actual bytes sent from the server and

00:10:29,290 --> 00:10:34,520
the what I want you to notice is it's

00:10:31,760 --> 00:10:36,050
only plain HTML and style sheets this

00:10:34,520 --> 00:10:38,390
renders entirely outside of angular

00:10:36,050 --> 00:10:39,830
before it downloads and it can be sent

00:10:38,390 --> 00:10:42,170
to the mobile device within the first

00:10:39,830 --> 00:10:44,390
few kilobytes of data for a page which

00:10:42,170 --> 00:10:47,360
gives you a very fast first paint over a

00:10:44,390 --> 00:10:48,920
good 3G connection but this seems kind

00:10:47,360 --> 00:10:50,900
of annoying right like we have this

00:10:48,920 --> 00:10:52,550
static copy of our application and then

00:10:50,900 --> 00:10:53,810
we have our actual angular application

00:10:52,550 --> 00:10:55,970
and we have to keep the two in sync

00:10:53,810 --> 00:10:58,360
every time we change something it's just

00:10:55,970 --> 00:11:00,620
a huge pain so we don't actually do that

00:10:58,360 --> 00:11:02,270
so we actually are using angular

00:11:00,620 --> 00:11:03,860
Universal which you probably heard about

00:11:02,270 --> 00:11:07,100
earlier today from Jeff Whelpley and

00:11:03,860 --> 00:11:09,470
Patrick so Universal that gives us the

00:11:07,100 --> 00:11:11,690
basic functionality of pre generating

00:11:09,470 --> 00:11:13,580
our app shell component so they talked a

00:11:11,690 --> 00:11:15,170
lot about what gets generated on the fly

00:11:13,580 --> 00:11:17,420
from the server like with node where you

00:11:15,170 --> 00:11:19,340
can have requests fulfilled dynamically

00:11:17,420 --> 00:11:21,320
we're using a part of Universal that

00:11:19,340 --> 00:11:23,750
will actually let you do static

00:11:21,320 --> 00:11:26,060
generation of assets at Build time so we

00:11:23,750 --> 00:11:28,160
can take our index.html or app root

00:11:26,060 --> 00:11:32,330
component and use Universal to generate

00:11:28,160 --> 00:11:35,990
a app shell component in our index.html

00:11:32,330 --> 00:11:37,670
that will load when requested and and

00:11:35,990 --> 00:11:41,090
this all integrates with angular CLI as

00:11:37,670 --> 00:11:43,430
well so here's an example of this in

00:11:41,090 --> 00:11:45,500
action here we have an MD side nav

00:11:43,430 --> 00:11:47,690
layout and we're applying this pre

00:11:45,500 --> 00:11:50,210
rendered class to it only when this pre

00:11:47,690 --> 00:11:52,100
rendered flag is true so when we compile

00:11:50,210 --> 00:11:53,840
this application on the server it'll

00:11:52,100 --> 00:11:55,910
have that class when we run it in the

00:11:53,840 --> 00:11:57,590
browser directly it won't so we can

00:11:55,910 --> 00:11:59,750
actually change the styles depending on

00:11:57,590 --> 00:12:02,240
whether we're pre-rendering a rendering

00:11:59,750 --> 00:12:04,040
on the click on the client while

00:12:02,240 --> 00:12:06,140
pre-rendering we also want to show this

00:12:04,040 --> 00:12:08,570
loading indicator and then we you just

00:12:06,140 --> 00:12:10,130
accomplish that with a simple ng-if and

00:12:08,570 --> 00:12:11,510
of course since this is for static

00:12:10,130 --> 00:12:12,510
content only we're going to use another

00:12:11,510 --> 00:12:15,740
ngf to hide

00:12:12,510 --> 00:12:19,380
rather outlet so we don't pre-render it

00:12:15,740 --> 00:12:21,740
so in in our application and under

00:12:19,380 --> 00:12:25,470
normal circumstances on a 3G connection

00:12:21,740 --> 00:12:27,900
in Chrome with the network emulation the

00:12:25,470 --> 00:12:29,400
app will load and have its first time to

00:12:27,900 --> 00:12:33,540
interactivity or its first paint at

00:12:29,400 --> 00:12:35,280
about 20 356 milliseconds but when we

00:12:33,540 --> 00:12:37,440
add app shell we bring that number down

00:12:35,280 --> 00:12:39,540
to 287 milliseconds when the user starts

00:12:37,440 --> 00:12:40,890
to see the UI of the application working

00:12:39,540 --> 00:12:43,410
so that's about a 10 times improvement

00:12:40,890 --> 00:12:45,180
over when the user feels that the

00:12:43,410 --> 00:12:49,920
application is responding and doing some

00:12:45,180 --> 00:12:51,900
work to fulfill their their request so

00:12:49,920 --> 00:12:53,760
being able to paint the application

00:12:51,900 --> 00:12:56,460
shell in a third of a second is

00:12:53,760 --> 00:12:57,900
fantastic but that only works if we can

00:12:56,460 --> 00:13:00,150
actually reach the server in the first

00:12:57,900 --> 00:13:01,410
place as we all know mobile networks

00:13:00,150 --> 00:13:03,980
aren't really known for their

00:13:01,410 --> 00:13:06,180
reliability or exceptional speed and

00:13:03,980 --> 00:13:07,560
actually native applications excel

00:13:06,180 --> 00:13:10,230
really well here because of their

00:13:07,560 --> 00:13:12,090
installation model in a native app code

00:13:10,230 --> 00:13:13,950
is downloaded upfront and runs entirely

00:13:12,090 --> 00:13:15,840
on the client and that has a lot of

00:13:13,950 --> 00:13:18,090
advantages but also some disadvantages

00:13:15,840 --> 00:13:19,980
App Store update processes are

00:13:18,090 --> 00:13:21,090
notoriously slow for example and that's

00:13:19,980 --> 00:13:23,070
not good when you want to launch a

00:13:21,090 --> 00:13:25,050
feature quickly or you have a bug that

00:13:23,070 --> 00:13:27,930
gets passed QA it can take weeks for an

00:13:25,050 --> 00:13:29,970
update to roll out completely with the

00:13:27,930 --> 00:13:31,740
web we know as develop as web developers

00:13:29,970 --> 00:13:33,480
we just push code to a server and all of

00:13:31,740 --> 00:13:34,680
a sudden our users browsers are

00:13:33,480 --> 00:13:36,420
downloading it and fetching it and

00:13:34,680 --> 00:13:38,790
running it so what would be great is if

00:13:36,420 --> 00:13:40,860
we can combine these two models if we

00:13:38,790 --> 00:13:43,350
could have the the offline capabilities

00:13:40,860 --> 00:13:45,450
of native with the like up-to-date

00:13:43,350 --> 00:13:47,610
capabilities of the web and it turns out

00:13:45,450 --> 00:13:50,280
that's possible with a new API called

00:13:47,610 --> 00:13:51,960
the serviceworker you can think of a

00:13:50,280 --> 00:13:53,520
serviceworker as a little bit of

00:13:51,960 --> 00:13:55,890
JavaScript that runs in the background

00:13:53,520 --> 00:13:58,170
it's a little HTTP server that runs on

00:13:55,890 --> 00:13:59,610
your clients machine they persists and

00:13:58,170 --> 00:14:01,890
they can cache content even without a

00:13:59,610 --> 00:14:04,260
network connection which allows your

00:14:01,890 --> 00:14:05,220
applications to work offline but it's

00:14:04,260 --> 00:14:07,320
actually more important than that

00:14:05,220 --> 00:14:11,330
because it turns out rendering things

00:14:07,320 --> 00:14:11,330
without a server is even faster

00:14:11,970 --> 00:14:17,999
so before we saw that with the app shell

00:14:15,659 --> 00:14:21,179
we bring our first interaction time down

00:14:17,999 --> 00:14:23,459
to 207 milliseconds on a good 3G network

00:14:21,179 --> 00:14:25,199
but with app with serviceworker and app

00:14:23,459 --> 00:14:27,749
shell together on next load of the

00:14:25,199 --> 00:14:29,789
application we can see 128 millisecond

00:14:27,749 --> 00:14:31,439
time before they see something loading

00:14:29,789 --> 00:14:32,970
and even the app loading the rest of the

00:14:31,439 --> 00:14:35,129
way and bootstrapping after that is much

00:14:32,970 --> 00:14:37,019
faster if it's assets already in the

00:14:35,129 --> 00:14:41,369
serviceworker able to be served from the

00:14:37,019 --> 00:14:43,049
cache so so we have minimal JavaScript

00:14:41,369 --> 00:14:44,789
execution here it's it doesn't need to

00:14:43,049 --> 00:14:46,439
wait for angular and it doesn't need to

00:14:44,789 --> 00:14:48,059
parse the app to show this app shell and

00:14:46,439 --> 00:14:51,569
to use the cache from the Service Worker

00:14:48,059 --> 00:14:52,799
so like Alex said this is this has the

00:14:51,569 --> 00:14:54,299
performance of native but also the

00:14:52,799 --> 00:14:55,769
benefits of deployment that you get with

00:14:54,299 --> 00:14:57,569
the web that you don't have to go

00:14:55,769 --> 00:14:59,609
through the the high friction process of

00:14:57,569 --> 00:15:01,439
updating your app if you need to push

00:14:59,609 --> 00:15:04,349
something new or push a fix to a

00:15:01,439 --> 00:15:05,549
critical issue within that so one so we

00:15:04,349 --> 00:15:07,470
talked a little bit about offline with

00:15:05,549 --> 00:15:09,839
serviceworker service workers have even

00:15:07,470 --> 00:15:11,609
more features that that we could talk

00:15:09,839 --> 00:15:13,619
about and at another time but one

00:15:11,609 --> 00:15:15,149
important thing that we're working on

00:15:13,619 --> 00:15:17,009
now is adding push notification support

00:15:15,149 --> 00:15:18,959
which serves service workers which

00:15:17,009 --> 00:15:20,549
browsers are also implementing so that

00:15:18,959 --> 00:15:21,779
you can have the same kind of push

00:15:20,549 --> 00:15:24,449
notification experience you would have

00:15:21,779 --> 00:15:26,849
on native with the web and Bree brought

00:15:24,449 --> 00:15:28,409
back into the application to interact

00:15:26,849 --> 00:15:32,519
with whatever data was sent with that

00:15:28,409 --> 00:15:34,169
push notification so the last thing we

00:15:32,519 --> 00:15:36,209
talked about is how our app is installed

00:15:34,169 --> 00:15:40,019
below and we'll talk about a new

00:15:36,209 --> 00:15:41,879
platform API called web app manifest yes

00:15:40,019 --> 00:15:43,409
the web platform has the standard called

00:15:41,879 --> 00:15:45,049
the web app manifest that allows you to

00:15:43,409 --> 00:15:47,249
specify metadata about an application

00:15:45,049 --> 00:15:49,889
and in chrome you may see this you can

00:15:47,249 --> 00:15:50,970
go in and say Add to Home screen or even

00:15:49,889 --> 00:15:52,199
now the browser will automatically

00:15:50,970 --> 00:15:53,879
prompt you if the app meets certain

00:15:52,199 --> 00:15:56,099
criteria would you like to add this your

00:15:53,879 --> 00:15:59,129
home screen so here this is my actual

00:15:56,099 --> 00:16:00,720
phone I have six applications here five

00:15:59,129 --> 00:16:02,639
of them are actual native applications

00:16:00,720 --> 00:16:05,069
installed on the device and there's also

00:16:02,639 --> 00:16:06,569
issues 0 which is this web app and what

00:16:05,069 --> 00:16:09,449
I really like about this screenshot is

00:16:06,569 --> 00:16:12,089
you can't actually tell if you open it

00:16:09,449 --> 00:16:14,099
up here it's rendering there's no

00:16:12,089 --> 00:16:15,629
browser location bar there's no back

00:16:14,099 --> 00:16:17,339
button here we're rendering without the

00:16:15,629 --> 00:16:18,959
browser chrome and you can scroll

00:16:17,339 --> 00:16:20,850
through the issues at 60 frames per

00:16:18,959 --> 00:16:22,500
second scrolling it feels like a native

00:16:20,850 --> 00:16:25,420
application

00:16:22,500 --> 00:16:26,860
so to make this happen is actually

00:16:25,420 --> 00:16:29,080
pretty simple we just have to include

00:16:26,860 --> 00:16:30,970
this Jason base manifest in our project

00:16:29,080 --> 00:16:32,590
and it just has some data about our app

00:16:30,970 --> 00:16:34,150
so the browser's know how to install to

00:16:32,590 --> 00:16:36,100
the home screen so we have our name

00:16:34,150 --> 00:16:39,250
issue zero we'd give it some icons of

00:16:36,100 --> 00:16:41,440
different sizes or start URL and then we

00:16:39,250 --> 00:16:42,670
tell it how to display it should it have

00:16:41,440 --> 00:16:44,440
a browser Chrome or should it be

00:16:42,670 --> 00:16:47,500
fullscreen and then what should its

00:16:44,440 --> 00:16:49,480
orientation be portrait landscape both

00:16:47,500 --> 00:16:51,190
in our case we just want portrait

00:16:49,480 --> 00:16:54,490
because it's a lot of lists of issues

00:16:51,190 --> 00:16:56,740
I don't think good work well sideways so

00:16:54,490 --> 00:16:59,410
so you might say okay that sounds cool

00:16:56,740 --> 00:17:01,360
I'm ready to to jump in but how is the

00:16:59,410 --> 00:17:03,600
support for serviceworker and these

00:17:01,360 --> 00:17:06,670
features and the good news is on Android

00:17:03,600 --> 00:17:07,990
Chrome Firefox and opera all have some

00:17:06,670 --> 00:17:10,480
support for all these features they

00:17:07,990 --> 00:17:12,370
support the installable apps and they

00:17:10,480 --> 00:17:14,080
all have some serviceworker implemented

00:17:12,370 --> 00:17:16,150
and they continue adding to the features

00:17:14,080 --> 00:17:18,400
that are supporting the serviceworker on

00:17:16,150 --> 00:17:19,209
safari there's there's good signs that

00:17:18,400 --> 00:17:20,860
they're starting to think about

00:17:19,209 --> 00:17:22,510
serviceworker implementation and we're

00:17:20,860 --> 00:17:24,190
hopeful that that soon will see some

00:17:22,510 --> 00:17:25,990
progress there and i'm not sure about

00:17:24,190 --> 00:17:28,680
where that manifests in our Doc's we

00:17:25,990 --> 00:17:31,900
have some guides on ideas to get some of

00:17:28,680 --> 00:17:34,180
basic offline experience with safari and

00:17:31,900 --> 00:17:40,570
we'll keep those updated as the browser

00:17:34,180 --> 00:17:43,690
as the browsers evolve so building the

00:17:40,570 --> 00:17:45,280
app we wanted to we were figuring out

00:17:43,690 --> 00:17:46,540
how I need some good best practices to

00:17:45,280 --> 00:17:48,490
do these things like app shell and

00:17:46,540 --> 00:17:50,830
serviceworker and so in the process we

00:17:48,490 --> 00:17:52,060
didn't just have these hard-coded in our

00:17:50,830 --> 00:17:53,950
application we actually built them as

00:17:52,060 --> 00:17:56,110
general purpose tools which we've

00:17:53,950 --> 00:17:58,870
released as angular mobile toolkit on

00:17:56,110 --> 00:18:00,340
mobile angular do and this will lead you

00:17:58,870 --> 00:18:02,140
to our github repository that has some

00:18:00,340 --> 00:18:04,720
guides on how you can use these yourself

00:18:02,140 --> 00:18:07,090
with angular CLI to easily accomplish

00:18:04,720 --> 00:18:08,320
app shell and an serviceworker support

00:18:07,090 --> 00:18:11,110
in your app and also to make them

00:18:08,320 --> 00:18:12,460
installable so it's calling it a mobile

00:18:11,110 --> 00:18:14,020
toolkit we've got a little bit of an

00:18:12,460 --> 00:18:15,580
alpha version right now the tools are

00:18:14,020 --> 00:18:19,090
across a few github repositories

00:18:15,580 --> 00:18:21,520
including Universal and our github calm

00:18:19,090 --> 00:18:23,590
such angular slash mobile toolkit so

00:18:21,520 --> 00:18:25,060
we're excited to see get some more

00:18:23,590 --> 00:18:27,400
people starting to get on board and

00:18:25,060 --> 00:18:28,390
hopefully contribute by either using it

00:18:27,400 --> 00:18:31,210
or contributing

00:18:28,390 --> 00:18:32,799
or telling us that you hate it and why

00:18:31,210 --> 00:18:35,740
you hate it and how we can make it

00:18:32,799 --> 00:18:37,980
better and yes we're excited to get that

00:18:35,740 --> 00:18:40,360
out there yeah so we're not actually

00:18:37,980 --> 00:18:41,860
quite on the RC just yet

00:18:40,360 --> 00:18:43,149
we still have a couple dependencies that

00:18:41,860 --> 00:18:44,830
need to be upgraded and we're helping

00:18:43,149 --> 00:18:46,690
them get switched over and then we can

00:18:44,830 --> 00:18:50,649
flip that switch ourselves so you can

00:18:46,690 --> 00:18:51,820
look for that sometime next week so

00:18:50,649 --> 00:18:53,830
that's a little you know you've heard a

00:18:51,820 --> 00:18:55,059
lot about what we can do now and I'd

00:18:53,830 --> 00:18:56,559
like to just take a moment to talk about

00:18:55,059 --> 00:18:59,769
what our plans are for the next few

00:18:56,559 --> 00:19:02,559
months so we added this nice new - -

00:18:59,769 --> 00:19:03,909
mobile flag to the angular CLI so you

00:19:02,559 --> 00:19:05,409
can say ng new - the mobile acts

00:19:03,909 --> 00:19:08,740
relations that we did hans did it thank

00:19:05,409 --> 00:19:10,000
you very much Hans so right now what

00:19:08,740 --> 00:19:11,950
this does is gives you a web app

00:19:10,000 --> 00:19:13,659
manifest so your applications can be

00:19:11,950 --> 00:19:16,179
installed to the home screen just basic

00:19:13,659 --> 00:19:18,429
boilerplate generation what we want to

00:19:16,179 --> 00:19:20,080
do is enable generation of that app

00:19:18,429 --> 00:19:21,940
shell so you get all the power of

00:19:20,080 --> 00:19:24,100
universal and these really fast first

00:19:21,940 --> 00:19:25,899
paint times and we want to configure the

00:19:24,100 --> 00:19:27,159
serviceworker for you so you'll just ng

00:19:25,899 --> 00:19:28,809
new - just mobile and you'll get a

00:19:27,159 --> 00:19:30,820
project that has application shell and

00:19:28,809 --> 00:19:32,139
serviceworker and works offline and it's

00:19:30,820 --> 00:19:34,480
a full progressive web app from the

00:19:32,139 --> 00:19:36,070
moment you start working on it and our

00:19:34,480 --> 00:19:37,690
more long-term plans are to do things

00:19:36,070 --> 00:19:39,850
like push notifications and background

00:19:37,690 --> 00:19:41,289
sync and and hans said this will all be

00:19:39,850 --> 00:19:42,179
ready by the end of the week if i'm not

00:19:41,289 --> 00:19:47,039
mistaken

00:19:42,179 --> 00:19:47,039
yep so Hans up here I'll have it ready

00:19:48,240 --> 00:19:53,200
so if you want to look at the code for

00:19:50,409 --> 00:19:55,360
this app it's at this repository but

00:19:53,200 --> 00:19:57,549
don't judge it too harshly I threw most

00:19:55,360 --> 00:19:59,590
of it together in the past week and I'm

00:19:57,549 --> 00:20:01,090
really insecure about the codes so I'm

00:19:59,590 --> 00:20:02,769
just pretty self-conscious about just

00:20:01,090 --> 00:20:04,269
look at the tooling don't look at the

00:20:02,769 --> 00:20:07,440
actual code in the application and if it

00:20:04,269 --> 00:20:09,390
doesn't work that's a feature

00:20:07,440 --> 00:20:11,250
so you want to do your like hour and a

00:20:09,390 --> 00:20:12,270
half of life I've got an hour of life

00:20:11,250 --> 00:20:14,910
coding I want to get out of the way

00:20:12,270 --> 00:20:16,290
before we do dinner now so I'm just

00:20:14,910 --> 00:20:19,880
kidding that's actually the end of our

00:20:16,290 --> 00:20:19,880

YouTube URL: https://www.youtube.com/watch?v=wLWVASD0dvU


