Title: Enhancing performance without steroids - Zackary Chapple
Publication date: 2016-05-18
Playlist: ng-conf 2016
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:03,350 --> 00:00:07,890
so welcome everybody my name is Zach

00:00:06,150 --> 00:00:10,500
Chapel I'm an architect at careerbuilder

00:00:07,890 --> 00:00:11,429
i'm also on the angular CLI team and i'm

00:00:10,500 --> 00:00:15,059
here today to talk to you about

00:00:11,429 --> 00:00:16,770
performance in our applications we've

00:00:15,059 --> 00:00:19,500
all been on a site that feels magical

00:00:16,770 --> 00:00:20,760
simply by how it performs so before we

00:00:19,500 --> 00:00:22,830
get started I'd like to say that while

00:00:20,760 --> 00:00:24,480
it's not actually magic our users demand

00:00:22,830 --> 00:00:25,710
performance from us and we have the

00:00:24,480 --> 00:00:28,500
tools at our disposal to make that

00:00:25,710 --> 00:00:30,300
happen really high level these are

00:00:28,500 --> 00:00:32,239
topics i'm going to cover i only got 20

00:00:30,300 --> 00:00:35,730
minutes so i'm getting it right to it

00:00:32,239 --> 00:00:37,200
our browsers are extremely powerful the

00:00:35,730 --> 00:00:39,750
data insights they provide into our

00:00:37,200 --> 00:00:41,730
applications shouldn't be ignored here

00:00:39,750 --> 00:00:43,739
the first one those insights around user

00:00:41,730 --> 00:00:44,730
navigation it's a little confusing so

00:00:43,739 --> 00:00:48,300
let me show you what the data actually

00:00:44,730 --> 00:00:50,129
represents each of those timestamps are

00:00:48,300 --> 00:00:51,989
points in time that the browser changed

00:00:50,129 --> 00:00:53,670
with tasket was performing the most

00:00:51,989 --> 00:00:55,170
familiar ones most view is the onload

00:00:53,670 --> 00:00:57,719
event I'm sure you remember doing

00:00:55,170 --> 00:01:00,300
document download events and I can't get

00:00:57,719 --> 00:01:01,739
into it right now but these steps can

00:01:00,300 --> 00:01:05,549
provide you with valuable information to

00:01:01,739 --> 00:01:07,409
your application look at the support

00:01:05,549 --> 00:01:11,250
matrix I don't know about you but I find

00:01:07,409 --> 00:01:13,080
it comforting seeing that much green so

00:01:11,250 --> 00:01:14,520
let's talk about something else we get

00:01:13,080 --> 00:01:16,650
from the browser when performance and

00:01:14,520 --> 00:01:18,330
user timing ap is this is where we have

00:01:16,650 --> 00:01:20,040
a little bit more fun we can begin to

00:01:18,330 --> 00:01:21,990
see how long resources are taken to come

00:01:20,040 --> 00:01:24,000
down to the user and we can begin to

00:01:21,990 --> 00:01:26,880
create custom event markers and do

00:01:24,000 --> 00:01:28,500
measurements between those markers the

00:01:26,880 --> 00:01:30,960
performance API also has fantastic

00:01:28,500 --> 00:01:32,070
support one of its main jobs is to serve

00:01:30,960 --> 00:01:35,189
as a holding place for both the

00:01:32,070 --> 00:01:36,689
navigation and user timing ap is the

00:01:35,189 --> 00:01:40,619
user API needs a little bit more love

00:01:36,689 --> 00:01:42,649
but we lose access to the performance

00:01:40,619 --> 00:01:44,399
mark and performance measure without it

00:01:42,649 --> 00:01:46,680
now I'm going to go through a couple

00:01:44,399 --> 00:01:50,159
tools that i use for performance pilot

00:01:46,680 --> 00:01:51,840
profiling in the browser the first is

00:01:50,159 --> 00:01:54,450
perf map as you can see it gives you a

00:01:51,840 --> 00:01:56,430
visual representation of different parts

00:01:54,450 --> 00:01:58,170
and assets that are on your page and how

00:01:56,430 --> 00:02:01,829
long they took the load as well as the

00:01:58,170 --> 00:02:03,570
entire page at the bottom performance

00:02:01,829 --> 00:02:06,060
analyzer gives you a much higher level

00:02:03,570 --> 00:02:07,890
of information and it helps break down

00:02:06,060 --> 00:02:09,300
some interesting slow spots such as time

00:02:07,890 --> 00:02:11,230
the first bite and how long it took to

00:02:09,300 --> 00:02:12,980
actually process the Dom

00:02:11,230 --> 00:02:14,989
this is where it starts to get really

00:02:12,980 --> 00:02:17,269
interesting in these charts which I know

00:02:14,989 --> 00:02:18,920
you can't read there's and you can see

00:02:17,269 --> 00:02:21,620
the number of requests how long they

00:02:18,920 --> 00:02:23,060
took and quite a few domains listen and

00:02:21,620 --> 00:02:26,390
we can begin to see what culprits are

00:02:23,060 --> 00:02:27,379
slowing down our performance I'm not

00:02:26,390 --> 00:02:29,030
going to read this whole slide you

00:02:27,379 --> 00:02:32,030
either but the thing you should know is

00:02:29,030 --> 00:02:33,739
that HTTP 11 assets or pipeline but

00:02:32,030 --> 00:02:36,500
depending on your browser the number of

00:02:33,739 --> 00:02:37,790
connections usually under 10 this means

00:02:36,500 --> 00:02:40,489
that you begin to see a waterfall effect

00:02:37,790 --> 00:02:42,069
with your loading of assets and this is

00:02:40,489 --> 00:02:44,299
actually a really good example of that

00:02:42,069 --> 00:02:46,340
each of the assets themselves did not

00:02:44,299 --> 00:02:47,930
take much long time to load but you can

00:02:46,340 --> 00:02:51,019
see that each of those groupings is

00:02:47,930 --> 00:02:53,930
blocked by the previous group but what

00:02:51,019 --> 00:02:55,670
about HTTP two can that help the answer

00:02:53,930 --> 00:02:58,390
is actually I have something from occupy

00:02:55,670 --> 00:02:58,390
that shows that it does

00:03:05,180 --> 00:03:10,860
so just from that short little demo you

00:03:08,250 --> 00:03:12,420
can see that the time in latency to pull

00:03:10,860 --> 00:03:14,700
down that image which is actually chunks

00:03:12,420 --> 00:03:16,980
of little images took a third of the

00:03:14,700 --> 00:03:19,320
time with no latency so that means there

00:03:16,980 --> 00:03:20,460
was no lag in the waterfall because it

00:03:19,320 --> 00:03:28,820
was able to stream everything

00:03:20,460 --> 00:03:28,820
simultaneously OOP there we go

00:03:30,690 --> 00:03:35,740
sports for HCG b2 is also pretty strong

00:03:33,690 --> 00:03:37,810
there's a couple browsers that need a

00:03:35,740 --> 00:03:42,550
little help but luckily I ease going

00:03:37,810 --> 00:03:44,710
away and now we're gonna switch gears a

00:03:42,550 --> 00:03:47,860
little bit um admit it we're all here at

00:03:44,710 --> 00:03:50,710
ng-conf we drank the kool-aid otherwise

00:03:47,860 --> 00:03:51,760
why would we be here right so now

00:03:50,710 --> 00:03:53,410
there's we have some background

00:03:51,760 --> 00:03:55,830
information on performance I'm going to

00:03:53,410 --> 00:03:58,180
jump into some stuff as angular specific

00:03:55,830 --> 00:03:59,560
everyone here should be at least a

00:03:58,180 --> 00:04:03,520
little bit familiar with what the digest

00:03:59,560 --> 00:04:05,740
cycle is and this is in 1514 doll the

00:04:03,520 --> 00:04:07,000
younger versions and how it loops

00:04:05,740 --> 00:04:10,360
through the Watchers doing is dirty

00:04:07,000 --> 00:04:12,220
checks and using Batarang which another

00:04:10,360 --> 00:04:13,750
slide that's kind of hard to see we

00:04:12,220 --> 00:04:16,420
could peek into our applications and

00:04:13,750 --> 00:04:17,620
actually without me actually modifying

00:04:16,420 --> 00:04:20,200
our code and begin the look at the

00:04:17,620 --> 00:04:21,790
application itself and what you can't

00:04:20,200 --> 00:04:25,000
see here is that the page that I ran

00:04:21,790 --> 00:04:28,020
this on had 674 active Watchers and the

00:04:25,000 --> 00:04:30,370
last digest cycle took 23 milliseconds

00:04:28,020 --> 00:04:31,600
and for the most part those watchers are

00:04:30,370 --> 00:04:34,120
made up of a couple different types of

00:04:31,600 --> 00:04:36,040
bindings the first is just a simple

00:04:34,120 --> 00:04:38,020
property the other is the binding for a

00:04:36,040 --> 00:04:39,820
click event that calls a function the

00:04:38,020 --> 00:04:41,710
last is repeating over an array all

00:04:39,820 --> 00:04:43,810
these by their own or not not

00:04:41,710 --> 00:04:46,600
necessarily bad in fact sometimes it's

00:04:43,810 --> 00:04:47,860
as good as it gets but a lot of times we

00:04:46,600 --> 00:04:49,450
don't necessarily need to watch the

00:04:47,860 --> 00:04:51,460
binding as we're expecting everything to

00:04:49,450 --> 00:04:53,050
change we could do a one-time binding

00:04:51,460 --> 00:04:55,300
some good examples are when we're

00:04:53,050 --> 00:04:56,260
binding the CSS classes functions or

00:04:55,300 --> 00:04:59,220
doing repeat on something that doesn't

00:04:56,260 --> 00:05:01,660
change like options in the select menu

00:04:59,220 --> 00:05:03,610
after making those changes that and

00:05:01,660 --> 00:05:06,940
testing the page again we're now down to

00:05:03,610 --> 00:05:09,010
389 active watchers from 674 and our

00:05:06,940 --> 00:05:12,310
digest cycle only took two seven point

00:05:09,010 --> 00:05:14,169
two milliseconds down from 23 obviously

00:05:12,310 --> 00:05:17,530
that's a good improvement but there's

00:05:14,169 --> 00:05:20,050
just a couple little tweaks that really

00:05:17,530 --> 00:05:20,890
pales in comparison to the games we get

00:05:20,050 --> 00:05:23,410
from leveraging the work that the

00:05:20,890 --> 00:05:25,720
angular team does itself take a peek at

00:05:23,410 --> 00:05:28,780
these numbers i tested 20 page refreshes

00:05:25,720 --> 00:05:32,350
with the exact same application in 12 13

00:05:28,780 --> 00:05:34,180
14 and 15 without making any changes to

00:05:32,350 --> 00:05:36,700
the code you can see how going to you

00:05:34,180 --> 00:05:39,090
either 14 or 15 offers huge performance

00:05:36,700 --> 00:05:39,090
gains

00:05:40,319 --> 00:05:46,059
now angular 2 I really like to use

00:05:44,080 --> 00:05:48,459
Audrey for this and actually I was very

00:05:46,059 --> 00:05:49,830
happy to see in their roadmap that all

00:05:48,459 --> 00:05:51,909
the stuff that I'm using in Batarang

00:05:49,830 --> 00:05:53,499
Audrey is going to be implementing for

00:05:51,909 --> 00:05:58,119
us and it's on their road map so that

00:05:53,499 --> 00:05:59,529
should make everyone happy but all of

00:05:58,119 --> 00:06:02,589
that is just testing when you're

00:05:59,529 --> 00:06:04,199
developing and it doesn't really tell us

00:06:02,589 --> 00:06:07,419
what our users are experiencing and

00:06:04,199 --> 00:06:09,219
through looking at how bad are bettering

00:06:07,419 --> 00:06:11,229
works we can discover exactly how to

00:06:09,219 --> 00:06:14,439
hook into the digest cycle itself and

00:06:11,229 --> 00:06:17,619
you can add your own arguments to watch

00:06:14,439 --> 00:06:18,729
and time that data and you can see here

00:06:17,619 --> 00:06:21,459
that I'm actually just using the

00:06:18,729 --> 00:06:23,739
performance API to trigger start and end

00:06:21,459 --> 00:06:25,959
points between before and after the

00:06:23,739 --> 00:06:27,669
digest cycle and I throw that into an

00:06:25,959 --> 00:06:31,659
array that I end up sending up to my

00:06:27,669 --> 00:06:32,860
monitoring server but now let's talk

00:06:31,659 --> 00:06:36,069
about some non-traditional ways to

00:06:32,860 --> 00:06:37,839
measure performance when we create

00:06:36,069 --> 00:06:39,759
applications we have this wonderful

00:06:37,839 --> 00:06:41,619
vision of our application right just

00:06:39,759 --> 00:06:42,909
follow the yellow brick road we know

00:06:41,619 --> 00:06:45,519
what's best for our users and we know

00:06:42,909 --> 00:06:48,879
how they need to get to the value but

00:06:45,519 --> 00:06:50,889
life happens sometimes our applications

00:06:48,879 --> 00:06:52,329
get a little more complicated we hope

00:06:50,889 --> 00:06:54,909
that this complication leads us to

00:06:52,329 --> 00:06:56,050
something akin to Dora they can still

00:06:54,909 --> 00:06:58,959
navigate it's a little bit more

00:06:56,050 --> 00:07:01,629
complicated but it is possible but

00:06:58,959 --> 00:07:04,479
reality there's a little bit more scary

00:07:01,629 --> 00:07:06,219
over years and years our time and our

00:07:04,479 --> 00:07:08,139
application evolves in what used to be a

00:07:06,219 --> 00:07:09,189
yellow brick road to hopping from

00:07:08,139 --> 00:07:12,069
meatball to meatball in a bowl of

00:07:09,189 --> 00:07:14,439
spaghetti and if that wasn't bad enough

00:07:12,069 --> 00:07:17,949
sometimes we forced our users to do the

00:07:14,439 --> 00:07:20,669
same thing over and over opening a slide

00:07:17,949 --> 00:07:20,669
out for example

00:07:20,889 --> 00:07:25,479
and what we can see into what the user

00:07:23,379 --> 00:07:28,180
is doing with google analytics without

00:07:25,479 --> 00:07:31,449
custom a custom customization it doesn't

00:07:28,180 --> 00:07:33,699
track routing events so what can we do

00:07:31,449 --> 00:07:35,469
with UI router we can get a little bit

00:07:33,699 --> 00:07:37,749
deeper into what their users are

00:07:35,469 --> 00:07:39,370
actually doing it's a little bit hard to

00:07:37,749 --> 00:07:41,139
see but you can see that by using the

00:07:39,370 --> 00:07:43,330
state change start and the view content

00:07:41,139 --> 00:07:45,159
loaded events didn't get getting timings

00:07:43,330 --> 00:07:47,259
we could actually see how long those

00:07:45,159 --> 00:07:48,969
states which is take this nuts that's

00:07:47,259 --> 00:07:51,370
not only see how long a given wrote

00:07:48,969 --> 00:07:54,279
route took the render but if we have any

00:07:51,370 --> 00:07:55,689
slow resolutions the same thing can be

00:07:54,279 --> 00:07:57,340
achieved by adding events to the new

00:07:55,689 --> 00:08:00,509
component router hopefully in the near

00:07:57,340 --> 00:08:03,819
future these will be rolled in natively

00:08:00,509 --> 00:08:05,770
angular 1x is most popular for it has

00:08:03,819 --> 00:08:11,050
one popular form of lazy loading and

00:08:05,770 --> 00:08:13,750
that's a lazy loading this allows you to

00:08:11,050 --> 00:08:15,569
actually see actually save time by

00:08:13,750 --> 00:08:17,610
pulling down assets you don't need and

00:08:15,569 --> 00:08:19,870
we've all seen the benefits of that

00:08:17,610 --> 00:08:22,659
luckily though the angular team wrapped

00:08:19,870 --> 00:08:26,259
it in angular 2 and we won't have to use

00:08:22,659 --> 00:08:27,520
that anymore I'm sorry but that is going

00:08:26,259 --> 00:08:31,210
to be a fantastic benefit that we could

00:08:27,520 --> 00:08:32,140
all take advantage of and this also

00:08:31,210 --> 00:08:35,260
presents us with some unique

00:08:32,140 --> 00:08:37,959
possibilities because we often code for

00:08:35,260 --> 00:08:40,060
resolution but we forget that users also

00:08:37,959 --> 00:08:41,649
can have different bandwidths just

00:08:40,060 --> 00:08:43,060
because they're phablet has a giant

00:08:41,649 --> 00:08:45,250
screen doesn't mean we should send them

00:08:43,060 --> 00:08:46,660
a 4k image maybe we should start

00:08:45,250 --> 00:08:49,060
lowering the with a lower resolution

00:08:46,660 --> 00:08:50,529
progressively upgrade to it server-side

00:08:49,060 --> 00:08:52,980
rendering can take this even further and

00:08:50,529 --> 00:08:56,199
cut out some of those network trips

00:08:52,980 --> 00:08:58,660
we've all built our application on solid

00:08:56,199 --> 00:09:01,209
design principles will forget that

00:08:58,660 --> 00:09:02,829
sometimes maybe we didn't minify our

00:09:01,209 --> 00:09:06,670
code or gzip everything we may end up

00:09:02,829 --> 00:09:08,949
something like this incredibly hard to

00:09:06,670 --> 00:09:11,529
see but this this application has

00:09:08,949 --> 00:09:15,459
thirteen hundred and fifty HTTP requests

00:09:11,529 --> 00:09:19,910
is 16 megs and it took 20 seconds to

00:09:15,459 --> 00:09:22,100
load that's a heck of a waterfall

00:09:19,910 --> 00:09:24,650
and if you saw that on your first day

00:09:22,100 --> 00:09:27,890
you might think great let's combine

00:09:24,650 --> 00:09:30,080
identify all the things but that's not

00:09:27,890 --> 00:09:31,460
good because if you start spreading all

00:09:30,080 --> 00:09:33,890
the images combining identifying all the

00:09:31,460 --> 00:09:35,960
JavaScript and or maybe you even go so

00:09:33,890 --> 00:09:37,340
far as the inline everything you kind of

00:09:35,960 --> 00:09:41,270
lose sight of what you're really trying

00:09:37,340 --> 00:09:43,880
to do and you need to step take it step

00:09:41,270 --> 00:09:46,190
back and realize what do I actually need

00:09:43,880 --> 00:09:48,470
do you need your entire application pull

00:09:46,190 --> 00:09:50,900
down on the login screen when do I

00:09:48,470 --> 00:09:52,550
actually need it can I lazy load some of

00:09:50,900 --> 00:09:55,220
my assets as user performing some other

00:09:52,550 --> 00:09:56,600
action that I can use to get insights

00:09:55,220 --> 00:09:59,810
into what they're going to do next and

00:09:56,600 --> 00:10:01,040
how are my users connected these are

00:09:59,810 --> 00:10:03,740
just a couple things that we could begin

00:10:01,040 --> 00:10:07,720
to look at that to performance for the

00:10:03,740 --> 00:10:07,720
future thank you very much

00:10:13,420 --> 00:10:15,480

YouTube URL: https://www.youtube.com/watch?v=jxt8qe6DSOw


