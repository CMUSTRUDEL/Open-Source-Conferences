Title: Reactive Angular2 with ngRx - Rob Wormald
Publication date: 2016-05-06
Playlist: ng-conf 2016
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:04,879 --> 00:00:10,080
hey everybody

00:00:06,680 --> 00:00:12,090
so I'm Rob I'm a developer advocate for

00:00:10,080 --> 00:00:14,040
angular or actually one of the developer

00:00:12,090 --> 00:00:16,139
app gets triangular now you can follow

00:00:14,040 --> 00:00:17,910
me on Twitter at Rob Wormald but today

00:00:16,139 --> 00:00:19,650
I'm actually not here as a developer

00:00:17,910 --> 00:00:22,529
advocate for angular I'm here as part of

00:00:19,650 --> 00:00:25,170
the ng Rx team so I'm here representing

00:00:22,529 --> 00:00:26,580
all these awesome contributors so I just

00:00:25,170 --> 00:00:28,140
wanted to like give a shout out to these

00:00:26,580 --> 00:00:29,609
people because this has been a projects

00:00:28,140 --> 00:00:32,040
been around for like six months or so

00:00:29,609 --> 00:00:33,210
and these people are awesome a couple of

00:00:32,040 --> 00:00:34,710
them are here today and they've been

00:00:33,210 --> 00:00:36,390
doing really good work so can everybody

00:00:34,710 --> 00:00:45,120
give them a round of applause to start

00:00:36,390 --> 00:00:48,390
with so ng rx we have a pretty cool logo

00:00:45,120 --> 00:00:50,399
I think designed that one night so what

00:00:48,390 --> 00:00:51,960
is in directs it's a its mission to

00:00:50,399 --> 00:00:54,270
provide a suite of lightweight

00:00:51,960 --> 00:00:56,789
interoperable reactive services and

00:00:54,270 --> 00:00:57,809
components for angular to kind of our

00:00:56,789 --> 00:00:59,550
mission statement is that services

00:00:57,809 --> 00:01:01,500
should be usable in isolation they

00:00:59,550 --> 00:01:03,690
should work together seamlessly they

00:01:01,500 --> 00:01:05,220
should embrace reactive principles and

00:01:03,690 --> 00:01:09,090
of course if you've watched any of my

00:01:05,220 --> 00:01:11,880
talks before everything is a stream so

00:01:09,090 --> 00:01:13,650
ng rx today has a few pretty interesting

00:01:11,880 --> 00:01:15,150
modules so we have in direct store which

00:01:13,650 --> 00:01:16,770
is we're going to talk about today we

00:01:15,150 --> 00:01:19,860
have ng rx dev tools which we'll also

00:01:16,770 --> 00:01:21,270
talk about today we have a router ng rx

00:01:19,860 --> 00:01:23,189
router and I just want to shout out for

00:01:21,270 --> 00:01:24,869
Brandon and Mike they've been working on

00:01:23,189 --> 00:01:27,090
this alternate implementation of routing

00:01:24,869 --> 00:01:29,369
for angular 2 I think it's super super

00:01:27,090 --> 00:01:31,740
cool I want everybody to try it give us

00:01:29,369 --> 00:01:33,930
feedback let us know I think it's a

00:01:31,740 --> 00:01:37,020
really really interesting idea and then

00:01:33,930 --> 00:01:39,240
we have this new ng RX DB which is a an

00:01:37,020 --> 00:01:42,119
index DB kind of reactive set up for

00:01:39,240 --> 00:01:43,350
angular 2 and just as a note people make

00:01:42,119 --> 00:01:45,000
fun of us all the time because like I'm

00:01:43,350 --> 00:01:46,920
not big on having really shiny names

00:01:45,000 --> 00:01:48,750
right so like it's very descriptive or

00:01:46,920 --> 00:01:50,579
it's stored of tools right that's what

00:01:48,750 --> 00:01:52,079
we do with very simple names so in the

00:01:50,579 --> 00:01:53,430
future we might have some more stuff

00:01:52,079 --> 00:01:55,770
again with really really super

00:01:53,430 --> 00:01:57,509
interesting names so resource might be a

00:01:55,770 --> 00:01:58,860
replacement for the dollar sign resource

00:01:57,509 --> 00:02:01,710
that everybody loves from angular 1

00:01:58,860 --> 00:02:03,329
right everybody loves that one probably

00:02:01,710 --> 00:02:04,950
a socket thing will have an API library

00:02:03,329 --> 00:02:06,899
and I just want to say if you have an

00:02:04,950 --> 00:02:08,819
idea for something reactive in angular 2

00:02:06,899 --> 00:02:12,030
please ping me we'd love to have your

00:02:08,819 --> 00:02:13,560
stuff under organization so it's the

00:02:12,030 --> 00:02:15,060
whole kind of idea of NGO axes we

00:02:13,560 --> 00:02:16,530
a place for really cool stuff that

00:02:15,060 --> 00:02:17,819
people can come and be sure they're

00:02:16,530 --> 00:02:20,580
getting high-quality stuff that has

00:02:17,819 --> 00:02:23,310
tests and works and just works as a

00:02:20,580 --> 00:02:25,620
really good companion for angular 2 so

00:02:23,310 --> 00:02:28,170
what I want to talk to about today is ng

00:02:25,620 --> 00:02:30,720
rx store and so we kind of call it's

00:02:28,170 --> 00:02:34,110
reactive redux for angular 2 anybody in

00:02:30,720 --> 00:02:35,610
this room used Redux before you could

00:02:34,110 --> 00:02:41,040
yell because I can't actually see any of

00:02:35,610 --> 00:02:42,450
you so yeah cool um so what's Redux and

00:02:41,040 --> 00:02:43,800
this is like where you gasp because I'm

00:02:42,450 --> 00:02:46,230
on the angular team and I have to react

00:02:43,800 --> 00:02:48,569
logo right like oh my god

00:02:46,230 --> 00:02:50,130
but I'm allowed to do that so Redux is a

00:02:48,569 --> 00:02:52,680
predictable state container for

00:02:50,130 --> 00:02:53,810
JavaScript apps helps you out write

00:02:52,680 --> 00:02:56,489
applications that behave consistently

00:02:53,810 --> 00:02:57,660
run in different environments so this is

00:02:56,489 --> 00:02:59,849
something we are kind of interested in

00:02:57,660 --> 00:03:01,140
angular developers are easy to test

00:02:59,849 --> 00:03:02,519
again this is something that it's

00:03:01,140 --> 00:03:03,660
angular devs we really like right it's a

00:03:02,519 --> 00:03:04,920
big deal for us

00:03:03,660 --> 00:03:07,200
I provides a really good developer

00:03:04,920 --> 00:03:09,599
experience such as live code editing and

00:03:07,200 --> 00:03:12,390
then this time-travelling debugger so

00:03:09,599 --> 00:03:14,519
Dan Abramov introduced Redux to three

00:03:12,390 --> 00:03:14,760
years ago at a talk very much like this

00:03:14,519 --> 00:03:16,769
one

00:03:14,760 --> 00:03:17,970
I was react here if I think and he

00:03:16,769 --> 00:03:19,980
showed off this this time-traveling

00:03:17,970 --> 00:03:21,450
debugger that literally blew my mind and

00:03:19,980 --> 00:03:24,600
we'll show that off today because we

00:03:21,450 --> 00:03:27,480
built one to celeb really so it's called

00:03:24,600 --> 00:03:29,730
Redux because it deals with this concept

00:03:27,480 --> 00:03:31,380
of reducers right so everybody's

00:03:29,730 --> 00:03:32,730
probably done reduction in JavaScript

00:03:31,380 --> 00:03:35,970
before but if you haven't let's do a

00:03:32,730 --> 00:03:39,269
quick review so a reducer or a reduction

00:03:35,970 --> 00:03:41,040
function is a thing that takes a value

00:03:39,269 --> 00:03:44,100
or an accumulator if you like the total

00:03:41,040 --> 00:03:46,620
here and then some value so it does

00:03:44,100 --> 00:03:48,690
something it returns a new state so if

00:03:46,620 --> 00:03:50,130
you've used reduce before right one two

00:03:48,690 --> 00:03:51,510
three you reduce it with this sum

00:03:50,130 --> 00:03:53,549
function we give it the initial value of

00:03:51,510 --> 00:03:56,780
zero anybody know the answer to this

00:03:53,549 --> 00:04:01,109
this little what's this going to pop our

00:03:56,780 --> 00:04:02,100
six yes well done good so if you want to

00:04:01,109 --> 00:04:04,290
get a little more interesting right like

00:04:02,100 --> 00:04:06,600
you can start to expand this this reduce

00:04:04,290 --> 00:04:08,489
idea and this is kind of what grx and

00:04:06,600 --> 00:04:10,500
redux do right so if you wanted instead

00:04:08,489 --> 00:04:11,579
of passing just a an array of values you

00:04:10,500 --> 00:04:13,470
could give it an array of what we call

00:04:11,579 --> 00:04:15,720
actions right so it gives some sort of

00:04:13,470 --> 00:04:17,519
instruction to this reduction function

00:04:15,720 --> 00:04:18,810
so in this case we're going to give it a

00:04:17,519 --> 00:04:20,820
we're gonna have a counter function that

00:04:18,810 --> 00:04:22,440
takes the total and an action and if the

00:04:20,820 --> 00:04:23,909
action is increment then we'll take the

00:04:22,440 --> 00:04:24,820
total and up it by one and if it's

00:04:23,909 --> 00:04:27,160
decrement we'll do it

00:04:24,820 --> 00:04:28,540
you know remove our down it by one and

00:04:27,160 --> 00:04:30,970
then again we just take this array of

00:04:28,540 --> 00:04:34,570
actions reduce it and that would give us

00:04:30,970 --> 00:04:37,090
a total of anybody excellence good

00:04:34,570 --> 00:04:38,320
you're all paying attention so this is

00:04:37,090 --> 00:04:40,330
you know this is kinda basic stuff and

00:04:38,320 --> 00:04:41,650
again you could expand this concept a

00:04:40,330 --> 00:04:43,930
little bit further so if you wanted to

00:04:41,650 --> 00:04:45,190
manage let's say two dues right like

00:04:43,930 --> 00:04:46,720
everybody able to do lists you can do

00:04:45,190 --> 00:04:48,940
the same thing right so you dispatch an

00:04:46,720 --> 00:04:50,560
action of some sort and then you change

00:04:48,940 --> 00:04:52,360
the state which in this case might be an

00:04:50,560 --> 00:04:54,490
array of two dues right so again if we

00:04:52,360 --> 00:04:55,720
add we're going to concat that to do to

00:04:54,490 --> 00:04:57,250
the end if we do leave it we're going to

00:04:55,720 --> 00:04:59,160
filter them down if we complete it we're

00:04:57,250 --> 00:05:01,600
going to go ahead and update that value

00:04:59,160 --> 00:05:03,400
so there's a problem though right like

00:05:01,600 --> 00:05:05,650
this isn't real world because you never

00:05:03,400 --> 00:05:07,030
ever have everything in your application

00:05:05,650 --> 00:05:09,160
as a simple array of things are going to

00:05:07,030 --> 00:05:11,980
happen right applications happen over

00:05:09,160 --> 00:05:14,110
time they last a long time and if you

00:05:11,980 --> 00:05:15,550
watched the last talk from at mat pub

00:05:14,110 --> 00:05:17,680
sake or anybody else has talked with

00:05:15,550 --> 00:05:19,150
observables today right we have a

00:05:17,680 --> 00:05:21,940
solution for this we treat everything as

00:05:19,150 --> 00:05:23,470
a stream right so we look at this

00:05:21,940 --> 00:05:25,360
previous example which is to do's and

00:05:23,470 --> 00:05:27,160
again we got this array of actions here

00:05:25,360 --> 00:05:29,440
we're going to reduce them so that works

00:05:27,160 --> 00:05:31,690
kind of in theory but if we jump forward

00:05:29,440 --> 00:05:33,760
to observable land we can do the exact

00:05:31,690 --> 00:05:35,620
same thing and instead we'll treat

00:05:33,760 --> 00:05:37,870
inputs to our system instead of as an

00:05:35,620 --> 00:05:39,520
array we'll treat them as an observable

00:05:37,870 --> 00:05:41,380
of actions right so you could think of

00:05:39,520 --> 00:05:43,240
that as clicks or drags or whatever and

00:05:41,380 --> 00:05:45,910
then we'll do that same reduction

00:05:43,240 --> 00:05:47,530
function except that in observable land

00:05:45,910 --> 00:05:50,110
right we have this other function called

00:05:47,530 --> 00:05:52,150
scan the problem reduces it waits till

00:05:50,110 --> 00:05:52,750
the end of the array before it gives you

00:05:52,150 --> 00:05:55,020
the result

00:05:52,750 --> 00:05:57,250
and so scan works exactly like reduce

00:05:55,020 --> 00:05:59,080
except that'll give you the intermediate

00:05:57,250 --> 00:06:00,850
values so each time you dispatch a value

00:05:59,080 --> 00:06:02,800
to it it will give you the intermediate

00:06:00,850 --> 00:06:04,360
state and because it never ends it an

00:06:02,800 --> 00:06:06,460
observable we can effectively treat this

00:06:04,360 --> 00:06:08,140
through entire application lifecycle and

00:06:06,460 --> 00:06:10,930
kind of continually get the updated

00:06:08,140 --> 00:06:12,370
state right so again we take this

00:06:10,930 --> 00:06:14,140
observable actions that could come from

00:06:12,370 --> 00:06:16,420
anything and in this case we're just

00:06:14,140 --> 00:06:17,920
going to give it from an array we take

00:06:16,420 --> 00:06:19,810
an observable of those actions and we

00:06:17,920 --> 00:06:21,400
scan over it we pass it our reduction

00:06:19,810 --> 00:06:23,200
function the previous slide and give it

00:06:21,400 --> 00:06:24,730
an initial state of empty arrays and

00:06:23,200 --> 00:06:26,590
know what we do in observables we

00:06:24,730 --> 00:06:28,390
subscribe to that state and so each time

00:06:26,590 --> 00:06:30,160
you get a new action down the pipe

00:06:28,390 --> 00:06:32,200
you'll get the new state that pops out

00:06:30,160 --> 00:06:33,600
the other end right everybody okay with

00:06:32,200 --> 00:06:37,200
that yet so far

00:06:33,600 --> 00:06:39,000
so let's see a demo of this what we'll

00:06:37,200 --> 00:06:41,940
do is like everything else we will build

00:06:39,000 --> 00:06:43,440
a to-do list application and apologies

00:06:41,940 --> 00:06:45,420
because like I'm on the angular team and

00:06:43,440 --> 00:06:46,740
I'm terrible at CSS so this is not going

00:06:45,420 --> 00:06:48,870
to be like a car a level kind of

00:06:46,740 --> 00:06:50,490
material design demo but I am using the

00:06:48,870 --> 00:06:52,860
trail design a little bit here but

00:06:50,490 --> 00:06:55,680
apologize for kind of the bad CSS out of

00:06:52,860 --> 00:06:57,330
time right so what do we got so this is

00:06:55,680 --> 00:06:59,310
your basic angular bootstrap function

00:06:57,330 --> 00:07:01,350
right we've got a demo app and what

00:06:59,310 --> 00:07:03,930
we're reporting from ng rx store here is

00:07:01,350 --> 00:07:06,050
a function called provide store what

00:07:03,930 --> 00:07:08,190
provide store takes is the kind of

00:07:06,050 --> 00:07:10,170
application configuration right so if

00:07:08,190 --> 00:07:12,360
you like you can think about ng rx store

00:07:10,170 --> 00:07:14,400
as a database and in-memory database for

00:07:12,360 --> 00:07:15,900
your application and each kind of

00:07:14,400 --> 00:07:18,060
reducer that we're going to describe is

00:07:15,900 --> 00:07:20,820
like a table right so if ng rx door is a

00:07:18,060 --> 00:07:22,230
DB then a reducer is a table that's not

00:07:20,820 --> 00:07:24,660
really the right analogy but it's close

00:07:22,230 --> 00:07:26,040
enough for this kind of talk right and

00:07:24,660 --> 00:07:27,750
then I've got my reducer functions here

00:07:26,040 --> 00:07:30,090
so this is that - duze thing that we saw

00:07:27,750 --> 00:07:31,170
on the on the slides again we've got an

00:07:30,090 --> 00:07:32,820
array of to do is we're going to start

00:07:31,170 --> 00:07:35,370
with an empty state here and then we've

00:07:32,820 --> 00:07:38,070
got some actions add to do delete to do

00:07:35,370 --> 00:07:40,110
etc etc etc right we've also got another

00:07:38,070 --> 00:07:41,310
which is visibility filter and so what

00:07:40,110 --> 00:07:44,100
this allows you to do is basically have

00:07:41,310 --> 00:07:45,690
a reducer effectively for every kind of

00:07:44,100 --> 00:07:47,460
entity model whatever you want to

00:07:45,690 --> 00:07:49,560
describe in your application rights you

00:07:47,460 --> 00:07:51,120
would have probably one reducer for

00:07:49,560 --> 00:07:51,930
users and actions and you know any

00:07:51,120 --> 00:07:54,090
number of things you store in your

00:07:51,930 --> 00:07:56,250
application you just have a reducer for

00:07:54,090 --> 00:07:58,200
it so what provide store does is it

00:07:56,250 --> 00:08:00,120
basically sets up kind of configures if

00:07:58,200 --> 00:08:02,700
you like the internal database for store

00:08:00,120 --> 00:08:05,400
and what allows you to do is then you'll

00:08:02,700 --> 00:08:06,600
get to your application itself so I'm

00:08:05,400 --> 00:08:11,130
going to go down here and what I'm doing

00:08:06,600 --> 00:08:12,210
is actually injecting store since the

00:08:11,130 --> 00:08:13,530
store is the actual service that

00:08:12,210 --> 00:08:14,970
indirect store provides right this is a

00:08:13,530 --> 00:08:17,070
service that's injectable anywhere in

00:08:14,970 --> 00:08:19,260
your application I like to think of it a

00:08:17,070 --> 00:08:20,550
lot like HTTP or any of the other kind

00:08:19,260 --> 00:08:22,230
of services in angular one that you had

00:08:20,550 --> 00:08:23,880
it's a primitive right it's see it's a

00:08:22,230 --> 00:08:26,040
very kind of simple service ejectable

00:08:23,880 --> 00:08:28,980
everywhere it's a singleton and this is

00:08:26,040 --> 00:08:31,260
how you interact with store and then

00:08:28,980 --> 00:08:34,080
getting to notice here is store is

00:08:31,260 --> 00:08:36,150
strongly typed so I have in here

00:08:34,080 --> 00:08:39,599
somewhere in here I have an interface

00:08:36,150 --> 00:08:40,890
that tracks the actual type of

00:08:39,599 --> 00:08:42,750
information is coming out of this right

00:08:40,890 --> 00:08:44,130
so this allows me to have a type safe

00:08:42,750 --> 00:08:47,220
reduction function this is one of the

00:08:44,130 --> 00:08:48,629
reasons I wrote kind of store over redux

00:08:47,220 --> 00:08:51,269
is it gives you this ability to do type

00:08:48,629 --> 00:08:54,420
script stuff right and so the way that

00:08:51,269 --> 00:08:56,399
you interact with this so in my app what

00:08:54,420 --> 00:08:57,889
you do is you get store and then you

00:08:56,399 --> 00:08:59,759
have it's an observable store is just

00:08:57,889 --> 00:09:02,209
unobservable like anything else

00:08:59,759 --> 00:09:04,199
observable and you can subscribe to it

00:09:02,209 --> 00:09:09,060
so what you get out of this is the

00:09:04,199 --> 00:09:12,629
states and then what you can actually do

00:09:09,060 --> 00:09:14,670
is then you say store dot dispatch some

00:09:12,629 --> 00:09:16,829
action to it and so in action in ngrick

00:09:14,670 --> 00:09:18,420
store and also in redux has a type which

00:09:16,829 --> 00:09:21,269
is a string so in this case we can say

00:09:18,420 --> 00:09:24,120
like anything and then it takes a

00:09:21,269 --> 00:09:26,490
payload optionally in this case I'm just

00:09:24,120 --> 00:09:27,720
to do like foo bar and so this isn't

00:09:26,490 --> 00:09:29,220
gonna affect anything because this is

00:09:27,720 --> 00:09:33,180
like an action that nothing knows about

00:09:29,220 --> 00:09:35,040
but if we look here in console what we

00:09:33,180 --> 00:09:38,790
should see if I can go to the console

00:09:35,040 --> 00:09:40,079
for you is will get an object of the

00:09:38,790 --> 00:09:40,980
state of the application right so don't

00:09:40,079 --> 00:09:43,439
have any to do is we have this

00:09:40,980 --> 00:09:44,819
visibility set to to show all and each

00:09:43,439 --> 00:09:48,300
time we dispatch an action we'll get a

00:09:44,819 --> 00:09:49,949
new state so just to kind of show you

00:09:48,300 --> 00:09:53,269
that in action here if I wanted to do

00:09:49,949 --> 00:10:00,870
something like store dot dispatch a type

00:09:53,269 --> 00:10:06,750
of ad to do and then a payload of I

00:10:00,870 --> 00:10:07,889
don't know text hello world we're going

00:10:06,750 --> 00:10:10,920
to subscribe the store we've done that

00:10:07,889 --> 00:10:12,509
I'll check out this one for you and what

00:10:10,920 --> 00:10:16,139
we should get if the demo gods are with

00:10:12,509 --> 00:10:17,670
me is so we get this initial state of no

00:10:16,139 --> 00:10:18,779
tattoos and then we've dispatched it to

00:10:17,670 --> 00:10:20,939
do so now we can look in there and we

00:10:18,779 --> 00:10:24,629
see we've got a to do here in the

00:10:20,939 --> 00:10:26,069
application right so that works nice and

00:10:24,629 --> 00:10:27,990
easily and so let's actually those use

00:10:26,069 --> 00:10:29,100
this in kind of a real-world context so

00:10:27,990 --> 00:10:30,930
what I'm going to do is instead of

00:10:29,100 --> 00:10:32,579
subscribing because typically what you'd

00:10:30,930 --> 00:10:34,559
think if you were using angular one kind

00:10:32,579 --> 00:10:36,059
of way of doing this you would do

00:10:34,559 --> 00:10:38,129
something like store dot subscribe but

00:10:36,059 --> 00:10:40,410
then you go like this dot dues equals

00:10:38,129 --> 00:10:42,509
the state dues and you can do this this

00:10:40,410 --> 00:10:44,100
is absolutely fine but obviously an

00:10:42,509 --> 00:10:46,139
angular one or ending there too we have

00:10:44,100 --> 00:10:48,059
the async pipe right we everything in

00:10:46,139 --> 00:10:49,980
angular's view understands observables

00:10:48,059 --> 00:10:51,540
so what allows us to do is I'm going to

00:10:49,980 --> 00:10:56,670
just do this I'm going to say this dot

00:10:51,540 --> 00:10:57,959
two dues is store dot select so select

00:10:56,670 --> 00:11:00,149
is actually a custom operated we've

00:10:57,959 --> 00:11:01,129
added to this observable and it gives us

00:11:00,149 --> 00:11:02,930
a couple of

00:11:01,129 --> 00:11:05,059
so the first sorry Mike Ryan but I'm

00:11:02,930 --> 00:11:06,740
always going to do this one first store

00:11:05,059 --> 00:11:09,379
that select can take a string so I can

00:11:06,740 --> 00:11:11,360
say to dues so that's just obviously the

00:11:09,379 --> 00:11:14,360
name of the entity right so that to dues

00:11:11,360 --> 00:11:17,389
here matches with the name of my reducer

00:11:14,360 --> 00:11:18,980
here matches with the thing that I

00:11:17,389 --> 00:11:21,439
provided to my provide store function

00:11:18,980 --> 00:11:23,920
here alternately if you like type safety

00:11:21,439 --> 00:11:26,990
a little bit more than me you can do

00:11:23,920 --> 00:11:28,670
store dot select the states it takes a

00:11:26,990 --> 00:11:31,790
function as well and you can do state

00:11:28,670 --> 00:11:34,819
dot - dues and so what we've done here

00:11:31,790 --> 00:11:36,769
is sliced out a section of the store

00:11:34,819 --> 00:11:38,329
state right we've gone in here and we've

00:11:36,769 --> 00:11:41,179
said I only care about this little

00:11:38,329 --> 00:11:43,129
portion of state and now assign that

00:11:41,179 --> 00:11:44,629
observable so now to dues is an

00:11:43,129 --> 00:11:47,869
observable of any and I should actually

00:11:44,629 --> 00:11:53,149
change this now to where is that what I

00:11:47,869 --> 00:11:58,389
want to do is go into the app and say to

00:11:53,149 --> 00:12:04,399
do and I need to import that from I to

00:11:58,389 --> 00:12:05,389
do from slash reducers to dues I believe

00:12:04,399 --> 00:12:08,569
it's in that rights and now it's type

00:12:05,389 --> 00:12:10,249
safe and so what I can do then is on my

00:12:08,569 --> 00:12:12,860
to do list so I have a little component

00:12:10,249 --> 00:12:14,209
here it takes it to dues property and

00:12:12,860 --> 00:12:16,670
I'm going to use the async pipe to

00:12:14,209 --> 00:12:18,170
unwrap it right so there's almost no

00:12:16,670 --> 00:12:20,120
logic in the view here or in the

00:12:18,170 --> 00:12:22,339
controller here whatsoever all I've said

00:12:20,120 --> 00:12:24,499
is make this observable available to the

00:12:22,339 --> 00:12:26,179
view and then I'm using this async pipe

00:12:24,499 --> 00:12:29,749
to unwrap it so if you look at our to-do

00:12:26,179 --> 00:12:31,339
list components it takes an input of two

00:12:29,749 --> 00:12:33,620
dues and what do I want to notice here

00:12:31,339 --> 00:12:35,420
is that there's nothing observable going

00:12:33,620 --> 00:12:36,769
on inside of this component right like

00:12:35,420 --> 00:12:38,420
it's not async you don't have to think

00:12:36,769 --> 00:12:40,790
about it because all this to-do list

00:12:38,420 --> 00:12:42,709
component compares cares about is it it

00:12:40,790 --> 00:12:44,689
gets to dues passed into it from above

00:12:42,709 --> 00:12:45,350
right this means a couple of things it

00:12:44,689 --> 00:12:46,549
means you don't have to worry bout the

00:12:45,350 --> 00:12:48,620
asynchronicity it means it's very

00:12:46,549 --> 00:12:50,540
reusable it's not injecting any services

00:12:48,620 --> 00:12:53,029
it's not doing anything kind of specific

00:12:50,540 --> 00:12:56,089
to this context all it cares about is it

00:12:53,029 --> 00:12:57,920
takes some - dues the other thing that's

00:12:56,089 --> 00:12:59,179
really interesting about this is it is

00:12:57,920 --> 00:13:00,679
actually allows us to do something quite

00:12:59,179 --> 00:13:03,350
clever so we can pull in this change

00:13:00,679 --> 00:13:07,339
detection strategy here and we can tell

00:13:03,350 --> 00:13:08,119
angular change detection strategy and

00:13:07,339 --> 00:13:10,780
we're going to say change detection

00:13:08,119 --> 00:13:13,060
strategy dot on push

00:13:10,780 --> 00:13:15,070
and what this means is that all of the

00:13:13,060 --> 00:13:17,440
components and all the child components

00:13:15,070 --> 00:13:18,670
of this component will not be they're

00:13:17,440 --> 00:13:19,840
not going to get changed detected

00:13:18,670 --> 00:13:21,760
they're not going to do a comparison

00:13:19,840 --> 00:13:23,920
check to see if they're dirty because we

00:13:21,760 --> 00:13:25,030
know we can guarantee that the only way

00:13:23,920 --> 00:13:27,340
date is going to change it's going to

00:13:25,030 --> 00:13:28,570
come in from above and the async pipe

00:13:27,340 --> 00:13:30,730
that we're using will actually go ahead

00:13:28,570 --> 00:13:32,200
and mark this as dirty for us so this

00:13:30,730 --> 00:13:33,370
gives us a big performance boost if we

00:13:32,200 --> 00:13:34,900
have a really big long list that's

00:13:33,370 --> 00:13:36,730
getting data from above it means we can

00:13:34,900 --> 00:13:39,010
just shut it down and say ignore this

00:13:36,730 --> 00:13:41,830
until the observable fires us a new

00:13:39,010 --> 00:13:44,740
value right so we've got that change

00:13:41,830 --> 00:13:46,240
section strategy on push and then we go

00:13:44,740 --> 00:13:48,850
back to our app here so again just to

00:13:46,240 --> 00:13:50,680
show you that's to do sign like that and

00:13:48,850 --> 00:13:54,070
then I've also got a component in here

00:13:50,680 --> 00:13:55,780
called a new to do and so new to do is

00:13:54,070 --> 00:13:59,020
using a little bit material design stuff

00:13:55,780 --> 00:14:01,150
and it's got an action output until its

00:13:59,020 --> 00:14:03,370
job is to just allow you to enter a new

00:14:01,150 --> 00:14:05,470
to-do I'm actually using ng model here

00:14:03,370 --> 00:14:07,540
just to get the to do text right that's

00:14:05,470 --> 00:14:09,190
available here on the controller and

00:14:07,540 --> 00:14:11,410
then what I'm saying is when I click the

00:14:09,190 --> 00:14:13,540
button that says add to do go ahead and

00:14:11,410 --> 00:14:15,670
call this action dot emits that's going

00:14:13,540 --> 00:14:17,050
to spit this action and what we're doing

00:14:15,670 --> 00:14:19,420
here and this is this is a pattern that

00:14:17,050 --> 00:14:22,630
I quite like is that this is the action

00:14:19,420 --> 00:14:24,400
that ng RX store cares about right so we

00:14:22,630 --> 00:14:26,260
can just dispatch that as if it was an

00:14:24,400 --> 00:14:29,460
event of sort of normal events and then

00:14:26,260 --> 00:14:30,640
again what I'm doing is in my app itself

00:14:29,460 --> 00:14:33,940
here

00:14:30,640 --> 00:14:36,790
listening to that action event and just

00:14:33,940 --> 00:14:39,010
dispatching it into the store right so

00:14:36,790 --> 00:14:40,930
that lets us just basically connect the

00:14:39,010 --> 00:14:43,120
the store kind of listener directly to

00:14:40,930 --> 00:14:44,589
this to this components outputs again

00:14:43,120 --> 00:14:47,200
with almost no logic in the view

00:14:44,589 --> 00:14:50,410
whatsoever so if I now go into my

00:14:47,200 --> 00:14:55,960
component here let webpack do its thing

00:14:50,410 --> 00:14:59,230
and say like learn ng Rx and add that it

00:14:55,960 --> 00:15:00,520
works array that's good so it's basic

00:14:59,230 --> 00:15:05,170
to-do list right and we can say like

00:15:00,520 --> 00:15:06,520
learn angular to add and the other thing

00:15:05,170 --> 00:15:08,350
we've got going on here is in our to-do

00:15:06,520 --> 00:15:09,940
list we've also got a string of actions

00:15:08,350 --> 00:15:11,830
from it as well right so if we look at

00:15:09,940 --> 00:15:14,050
our to-do list it's got an output of

00:15:11,830 --> 00:15:15,250
actions and then the one thing we want

00:15:14,050 --> 00:15:16,839
to do is obviously under to-do lists we

00:15:15,250 --> 00:15:18,910
want to check them off the list right we

00:15:16,839 --> 00:15:20,350
want to make them complete it or not and

00:15:18,910 --> 00:15:21,490
so again inside of this component we do

00:15:20,350 --> 00:15:23,589
a little bit magic and we have our check

00:15:21,490 --> 00:15:23,830
property so one-way binding and then we

00:15:23,589 --> 00:15:25,780
have our

00:15:23,830 --> 00:15:27,340
change which is a one-way event and we

00:15:25,780 --> 00:15:28,750
say set status and we pass through the

00:15:27,340 --> 00:15:30,610
event and then to do and then again we

00:15:28,750 --> 00:15:32,230
like create this action object that ng

00:15:30,610 --> 00:15:33,580
rx cares about which is this to do

00:15:32,230 --> 00:15:36,340
object here so we're going to say type

00:15:33,580 --> 00:15:38,530
is updated to do pass in the payload of

00:15:36,340 --> 00:15:39,970
an empty object with the to do and then

00:15:38,530 --> 00:15:42,760
the completed property coming in from

00:15:39,970 --> 00:15:45,190
the view so in our app we listen to that

00:15:42,760 --> 00:15:47,230
right and we just test that out through

00:15:45,190 --> 00:15:49,270
the store so we can do this this all

00:15:47,230 --> 00:15:51,520
works and if I change this here changes

00:15:49,270 --> 00:15:53,320
here everything's groovy I'm just going

00:15:51,520 --> 00:15:56,590
to show you the kind of longhand syntax

00:15:53,320 --> 00:15:58,660
to this again let's say store dot

00:15:56,590 --> 00:16:00,160
subscribe and so you've seen me do this

00:15:58,660 --> 00:16:01,270
a couple of times right where I'm kind

00:16:00,160 --> 00:16:02,470
of I want to see what's going on in the

00:16:01,270 --> 00:16:04,210
store and I'm going to call so I'll log

00:16:02,470 --> 00:16:05,260
this out and this is fine but obviously

00:16:04,210 --> 00:16:06,790
your friends are going to be funny if

00:16:05,260 --> 00:16:08,170
you rectus your console log debugging

00:16:06,790 --> 00:16:09,730
which is never cool to do so it's don't

00:16:08,170 --> 00:16:11,530
do that do this you'll see the state

00:16:09,730 --> 00:16:12,640
change and I has add these checks you'll

00:16:11,530 --> 00:16:17,110
see each of these things will change

00:16:12,640 --> 00:16:19,980
right so what we can do though oops it

00:16:17,110 --> 00:16:22,270
didn't actually mean to kill that there

00:16:19,980 --> 00:16:23,440
one of the things that that I really

00:16:22,270 --> 00:16:26,230
liked when I saw the first implication

00:16:23,440 --> 00:16:28,210
of Redux was time travel debugging right

00:16:26,230 --> 00:16:30,040
I mentioned that at the beginning so

00:16:28,210 --> 00:16:32,140
Mike Ryan and I talked about this a

00:16:30,040 --> 00:16:33,940
little bit and I kind of went around the

00:16:32,140 --> 00:16:35,170
circle for awhile and Mike sent me a PR

00:16:33,940 --> 00:16:36,670
a few months back that was like oh hey

00:16:35,170 --> 00:16:39,180
by the way like I've implemented this

00:16:36,670 --> 00:16:41,890
entirely amazing ng rx debugging thing

00:16:39,180 --> 00:16:43,000
so what I want to show you is and I

00:16:41,890 --> 00:16:45,250
think this is probably the first time

00:16:43,000 --> 00:16:46,750
this has been seen on stage if you keep

00:16:45,250 --> 00:16:48,490
using using and here at yourself you've

00:16:46,750 --> 00:16:54,730
probably played with this a bit but we

00:16:48,490 --> 00:16:55,900
have an NG rx dev tool components I'm

00:16:54,730 --> 00:16:58,090
just going to add that in I've injected

00:16:55,900 --> 00:17:00,010
it down here or as the directors right

00:16:58,090 --> 00:17:03,580
here right so it's going to happen is in

00:17:00,010 --> 00:17:05,410
my app what I've added now is this kind

00:17:03,580 --> 00:17:08,140
of hovering side panel on the left of

00:17:05,410 --> 00:17:12,839
the screen right so as I do things in my

00:17:08,140 --> 00:17:18,459
application here so I can say like learn

00:17:12,839 --> 00:17:20,050
ng rx and learn angular to what it's

00:17:18,459 --> 00:17:22,209
showing me is every action that's been

00:17:20,050 --> 00:17:23,980
dispatched into the store right it's

00:17:22,209 --> 00:17:25,330
gone and it's done it's affected the

00:17:23,980 --> 00:17:27,280
state somehow and what you can do is any

00:17:25,330 --> 00:17:29,440
point the application you can look at

00:17:27,280 --> 00:17:31,360
what that payload was so I said add to

00:17:29,440 --> 00:17:34,060
do or what the state of the application

00:17:31,360 --> 00:17:35,830
was at that point in time right so again

00:17:34,060 --> 00:17:37,299
it started with this

00:17:35,830 --> 00:17:39,340
and then if I have another one I can log

00:17:37,299 --> 00:17:40,330
the second state here and I had two so

00:17:39,340 --> 00:17:42,640
it allows me to kind of look and see the

00:17:40,330 --> 00:17:43,419
history of my application right this is

00:17:42,640 --> 00:17:44,919
really useful when you're trying to

00:17:43,419 --> 00:17:46,120
debug a really complex on vacation and

00:17:44,919 --> 00:17:47,919
you're like what's going on how does

00:17:46,120 --> 00:17:49,480
this work what did I do you can always

00:17:47,919 --> 00:17:51,730
look back and see like how did this work

00:17:49,480 --> 00:17:53,409
the reason we call it time tap travel

00:17:51,730 --> 00:17:55,419
debugging now is if I now do a couple

00:17:53,409 --> 00:18:01,000
more things here and I say like you know

00:17:55,419 --> 00:18:03,789
like learn the dev tools so you see I've

00:18:01,000 --> 00:18:05,289
added three - duze right now my state

00:18:03,789 --> 00:18:06,789
now has three - duze if I log it out

00:18:05,289 --> 00:18:08,919
here I can show you the tip there are

00:18:06,789 --> 00:18:10,750
three - dues in my array but with super

00:18:08,919 --> 00:18:12,220
clever about this is I can say actually

00:18:10,750 --> 00:18:14,470
what would the application have been

00:18:12,220 --> 00:18:16,960
like if I hadn't dispatched that second

00:18:14,470 --> 00:18:18,159
ad to do and so I could just cut it out

00:18:16,960 --> 00:18:19,899
of the equation right and the

00:18:18,159 --> 00:18:22,720
application then recomputes from that

00:18:19,899 --> 00:18:23,740
point in time where like what the

00:18:22,720 --> 00:18:25,090
application looks right so at any point

00:18:23,740 --> 00:18:26,799
you can stop back and say I don't

00:18:25,090 --> 00:18:29,080
actually care about this or this and

00:18:26,799 --> 00:18:30,610
allows you to really incremental e step

00:18:29,080 --> 00:18:32,950
back and forth to your applications

00:18:30,610 --> 00:18:34,120
state now it should work if I'm doing

00:18:32,950 --> 00:18:36,250
this I've actually tested this you can

00:18:34,120 --> 00:18:38,500
say I'm updating to do's and if I go and

00:18:36,250 --> 00:18:40,390
cancel this one what's it like at the

00:18:38,500 --> 00:18:41,919
point that I added this do didn't do

00:18:40,390 --> 00:18:43,270
this update to do but actually didn't

00:18:41,919 --> 00:18:44,409
update to do after it socially clever

00:18:43,270 --> 00:18:45,760
and then you can say like okay I

00:18:44,409 --> 00:18:47,380
actually want to commit at this point

00:18:45,760 --> 00:18:51,070
and then keep going forward and do more

00:18:47,380 --> 00:18:52,240
stuff this is a really really super

00:18:51,070 --> 00:18:54,130
powerful pattern right it's really

00:18:52,240 --> 00:18:55,840
really interesting way to do this I

00:18:54,130 --> 00:18:57,399
think I think Mike and Brandon are also

00:18:55,840 --> 00:18:58,630
working on a dev tool for the router as

00:18:57,399 --> 00:19:00,970
well to allow you to kind of step back

00:18:58,630 --> 00:19:02,140
and forth through the routing but this

00:19:00,970 --> 00:19:03,309
is something that like the blew my mind

00:19:02,140 --> 00:19:04,419
for the first time and it's something

00:19:03,309 --> 00:19:06,250
that we really want to make a big deal

00:19:04,419 --> 00:19:07,330
with engineer X so it's in there you can

00:19:06,250 --> 00:19:09,690
play with it it's available on github

00:19:07,330 --> 00:19:09,690
now

00:19:16,690 --> 00:19:21,740
cool so entry acts like I said it's an

00:19:19,640 --> 00:19:23,450
organization that we really want to be

00:19:21,740 --> 00:19:25,909
like kind of a premier place for angular

00:19:23,450 --> 00:19:27,080
to stuff if you have ideas please come

00:19:25,909 --> 00:19:29,150
and talk to me after the talk I'd love

00:19:27,080 --> 00:19:30,500
to talk about it the really cool thing

00:19:29,150 --> 00:19:32,150
about this dev tools idea is that in

00:19:30,500 --> 00:19:33,710
Redux Landover and reacts they have a

00:19:32,150 --> 00:19:35,299
huge amount of these different debuggers

00:19:33,710 --> 00:19:36,830
they have one that's like built into the

00:19:35,299 --> 00:19:37,850
chrome console they have one that's you

00:19:36,830 --> 00:19:39,500
know they all about all different kind

00:19:37,850 --> 00:19:41,390
of views so this this kind of read

00:19:39,500 --> 00:19:42,559
acceptable thing we have here is a very

00:19:41,390 --> 00:19:43,820
simple component that could be extended

00:19:42,559 --> 00:19:45,110
into any number of different things

00:19:43,820 --> 00:19:46,460
again if you want to come and kind of

00:19:45,110 --> 00:19:49,760
work with that please come and talk to

00:19:46,460 --> 00:19:51,679
me that's pretty much all for me go try

00:19:49,760 --> 00:19:53,149
this out go try the router out send me

00:19:51,679 --> 00:19:56,409
any comments concerns on Twitter and

00:19:53,149 --> 00:19:56,409

YouTube URL: https://www.youtube.com/watch?v=mhA7zZ23Odw


