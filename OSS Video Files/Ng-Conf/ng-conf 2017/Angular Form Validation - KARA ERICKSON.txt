Title: Angular Form Validation - KARA ERICKSON
Publication date: 2017-04-07
Playlist: ng-conf 2017
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,040 --> 00:00:03,100
[Music]

00:00:04,670 --> 00:00:10,620
so hi everyone I'm Carrie Erickson I'm a

00:00:08,040 --> 00:00:12,179
developer on the angular team and I'm

00:00:10,620 --> 00:00:15,120
here today to talk to you about angular

00:00:12,179 --> 00:00:16,890
form validation so we're going to start

00:00:15,120 --> 00:00:18,600
with an overview of validation basics

00:00:16,890 --> 00:00:20,789
and then we're going to jump into a

00:00:18,600 --> 00:00:22,980
quick demo of how you might set up basic

00:00:20,789 --> 00:00:24,900
validation today and then I'm going to

00:00:22,980 --> 00:00:28,920
give you a sneak peek into some upcoming

00:00:24,900 --> 00:00:30,720
features so let's get started so when

00:00:28,920 --> 00:00:32,430
you think about validation you probably

00:00:30,720 --> 00:00:34,800
think about something like this the user

00:00:32,430 --> 00:00:36,540
types into a text field and you run that

00:00:34,800 --> 00:00:39,750
value for your validation rules to see

00:00:36,540 --> 00:00:41,250
if it's acceptable if it is great if not

00:00:39,750 --> 00:00:42,750
you can serve as a helpful error message

00:00:41,250 --> 00:00:44,940
to the users they can correct their

00:00:42,750 --> 00:00:48,450
input so how might we implement this

00:00:44,940 --> 00:00:50,100
type of validation and angular so for

00:00:48,450 --> 00:00:52,199
every form control element in the Dom

00:00:50,100 --> 00:00:53,969
there is a corresponding form patrol

00:00:52,199 --> 00:00:57,300
object and angular that represents that

00:00:53,969 --> 00:00:58,680
elements state that form control object

00:00:57,300 --> 00:01:00,539
has a number of properties that are

00:00:58,680 --> 00:01:03,030
useful for validation such as the value

00:01:00,539 --> 00:01:05,220
and it can also allow you to configure

00:01:03,030 --> 00:01:09,390
validation rules to determine whether or

00:01:05,220 --> 00:01:10,860
not you should show error messages so

00:01:09,390 --> 00:01:13,020
when we talk about validation rules what

00:01:10,860 --> 00:01:14,610
we really mean are validators validators

00:01:13,020 --> 00:01:16,619
are just functions that take a farm

00:01:14,610 --> 00:01:19,500
control instance usually looking at its

00:01:16,619 --> 00:01:21,180
value and return a map of errors or null

00:01:19,500 --> 00:01:23,159
and then we can use this validation

00:01:21,180 --> 00:01:26,340
result to calculate the statuses of

00:01:23,159 --> 00:01:28,259
control so if you return null we

00:01:26,340 --> 00:01:30,740
calculate a status of valid and if you

00:01:28,259 --> 00:01:33,240
return errors we know that it's invalid

00:01:30,740 --> 00:01:34,650
so we have a number of the built-in

00:01:33,240 --> 00:01:36,630
values that you might be familiar with

00:01:34,650 --> 00:01:38,729
like required and min length and max

00:01:36,630 --> 00:01:40,650
length but we also allow you to build

00:01:38,729 --> 00:01:42,630
your own custom validators and this can

00:01:40,650 --> 00:01:44,310
be a really powerful feature so here we

00:01:42,630 --> 00:01:46,079
have a really important validator

00:01:44,310 --> 00:01:48,119
function called cambering validator and

00:01:46,079 --> 00:01:51,750
it just checks to see whether the

00:01:48,119 --> 00:01:54,630
controls value is tampering useful so if

00:01:51,750 --> 00:01:57,030
it is create will return null which will

00:01:54,630 --> 00:01:59,310
translate to valid and if it's not

00:01:57,030 --> 00:02:00,869
cambering then it will return an error

00:01:59,310 --> 00:02:03,479
map with some helpful information and

00:02:00,869 --> 00:02:05,130
that'll translate to invalid so one

00:02:03,479 --> 00:02:06,719
thing you might wonder is why don't we

00:02:05,130 --> 00:02:07,860
just return true or false from these

00:02:06,719 --> 00:02:10,650
validator functions

00:02:07,860 --> 00:02:12,570
well the short answer is that it comes

00:02:10,650 --> 00:02:14,700
in handy to return air mops when you're

00:02:12,570 --> 00:02:16,260
composing multiple validators so if you

00:02:14,700 --> 00:02:18,120
have multiple validators you need some

00:02:16,260 --> 00:02:21,000
way to match a validation function

00:02:18,120 --> 00:02:22,320
failure with a specific error so if you

00:02:21,000 --> 00:02:25,050
have the function just return the error

00:02:22,320 --> 00:02:26,550
it avoids having the developer create

00:02:25,050 --> 00:02:30,060
some additional structure to match the

00:02:26,550 --> 00:02:31,560
two air maps also provide extra

00:02:30,060 --> 00:02:33,780
information to developers who are

00:02:31,560 --> 00:02:36,180
building the UI the error message in the

00:02:33,780 --> 00:02:38,210
UI so here we have expected and actual

00:02:36,180 --> 00:02:40,620
and you can build that into your message

00:02:38,210 --> 00:02:41,970
this comes in really handy with custom

00:02:40,620 --> 00:02:44,520
validators because you don't have to

00:02:41,970 --> 00:02:46,590
return this expected actual format you

00:02:44,520 --> 00:02:48,030
can return anything you could under

00:02:46,590 --> 00:02:49,740
Campbell you've returned the actual

00:02:48,030 --> 00:02:52,200
error message string if you wanted if

00:02:49,740 --> 00:02:55,860
that's easier to build UI that waves

00:02:52,200 --> 00:02:58,020
totally up to you so some cases you have

00:02:55,860 --> 00:02:59,880
server-side validation or you need to

00:02:58,020 --> 00:03:01,290
check some value on the server and for

00:02:59,880 --> 00:03:04,020
that we have a sink validator functions

00:03:01,290 --> 00:03:05,820
these are also just functions so we take

00:03:04,020 --> 00:03:07,560
a form control instance and instead of

00:03:05,820 --> 00:03:09,209
returning a validation result they'll

00:03:07,560 --> 00:03:12,810
return an observable or a promise that

00:03:09,209 --> 00:03:15,450
will emit validation original so the

00:03:12,810 --> 00:03:16,590
classic example of this is a validator

00:03:15,450 --> 00:03:18,989
that's going to check whether a given

00:03:16,590 --> 00:03:21,239
username exists on the server and so

00:03:18,989 --> 00:03:23,370
here we just have an HTTP GET request

00:03:21,239 --> 00:03:25,680
that goes to some end point and then we

00:03:23,370 --> 00:03:28,410
map the result into the correct format

00:03:25,680 --> 00:03:30,060
which is Arizona so if you've used to

00:03:28,410 --> 00:03:32,850
acing failures before you might have run

00:03:30,060 --> 00:03:34,560
into the case where you had a continuous

00:03:32,850 --> 00:03:36,390
stream that the errors are never emitted

00:03:34,560 --> 00:03:38,910
that's because you have to make sure to

00:03:36,390 --> 00:03:40,920
complete your observable so issue I

00:03:38,910 --> 00:03:43,260
guess is great because it completes

00:03:40,920 --> 00:03:45,170
after it omits the response so don't

00:03:43,260 --> 00:03:47,489
really even have to think about it okay

00:03:45,170 --> 00:03:49,050
so now we're going to jump into a quick

00:03:47,489 --> 00:03:51,720
demo of how you might set up basic

00:03:49,050 --> 00:03:54,540
validation so I've set up a sample

00:03:51,720 --> 00:03:57,239
project with the CLI at calling it

00:03:54,540 --> 00:03:59,640
bitter which is uppity given them cue

00:03:57,239 --> 00:04:01,260
cards but it's an auctioning website and

00:03:59,640 --> 00:04:02,670
there's two inputs putting your name

00:04:01,260 --> 00:04:04,380
your bid value and then the bid will

00:04:02,670 --> 00:04:06,390
show up on the Left you're bidding on

00:04:04,380 --> 00:04:09,900
some imaginary objects like a switch

00:04:06,390 --> 00:04:11,250
let's say and okay so I've scaffolded

00:04:09,900 --> 00:04:14,030
the application with material add some

00:04:11,250 --> 00:04:15,930
cards here and I have two html5 inputs

00:04:14,030 --> 00:04:17,789
you'll notice I'm not using material

00:04:15,930 --> 00:04:19,140
inputs because recently we added some

00:04:17,789 --> 00:04:21,480
validation helpers that make this too

00:04:19,140 --> 00:04:24,630
easy and so we want to

00:04:21,480 --> 00:04:26,490
scratch so we have reason the reactive

00:04:24,630 --> 00:04:28,440
forms modules so we have our form group

00:04:26,490 --> 00:04:30,600
and our form virtual names here then in

00:04:28,440 --> 00:04:32,820
our type script we have some solid

00:04:30,600 --> 00:04:34,740
formatting either in type script we have

00:04:32,820 --> 00:04:36,660
our form group and our form control

00:04:34,740 --> 00:04:37,920
instances are you created and I've also

00:04:36,660 --> 00:04:40,470
created a few gutters to make this

00:04:37,920 --> 00:04:43,080
easier and I set up an API endpoints we

00:04:40,470 --> 00:04:44,990
can actually post the bids okay so if we

00:04:43,080 --> 00:04:47,490
were to set up validation for this form

00:04:44,990 --> 00:04:50,190
we'd start when we instantiate the phone

00:04:47,490 --> 00:04:54,140
control so let's say we want to add the

00:04:50,190 --> 00:04:56,070
required validator X both of these and

00:04:54,140 --> 00:04:58,740
that's just to make sure that each of

00:04:56,070 --> 00:05:01,440
these have a value to see if this is

00:04:58,740 --> 00:05:04,290
actually working in our form we can go

00:05:01,440 --> 00:05:07,730
ahead and print out the errors that

00:05:04,290 --> 00:05:14,790
we're getting so here we have neighbors

00:05:07,730 --> 00:05:16,320
we have our bid errors okay so we start

00:05:14,790 --> 00:05:19,050
with initial error state right because

00:05:16,320 --> 00:05:21,900
they're empty so as soon as we type into

00:05:19,050 --> 00:05:23,790
it the errors list appear cool so that

00:05:21,900 --> 00:05:25,050
works that's expected obviously with a

00:05:23,790 --> 00:05:27,060
really why we can't have these likely

00:05:25,050 --> 00:05:29,670
printouts and let's go ahead and

00:05:27,060 --> 00:05:31,140
implement some error messages and some

00:05:29,670 --> 00:05:34,050
validation styles this looks more like a

00:05:31,140 --> 00:05:35,610
real form so to start if we inspect

00:05:34,050 --> 00:05:40,800
either these inputs

00:05:35,610 --> 00:05:42,690
no no as you can see this yeah and you

00:05:40,800 --> 00:05:43,740
can see that we had some classes here

00:05:42,690 --> 00:05:44,280
that have been added by the form

00:05:43,740 --> 00:05:46,140
directive

00:05:44,280 --> 00:05:48,120
so if ng dirty and G valid ng touched

00:05:46,140 --> 00:05:49,710
and these are just mirrors of form

00:05:48,120 --> 00:05:51,300
control properties so if you were to

00:05:49,710 --> 00:05:53,220
change this to an invalid state you can

00:05:51,300 --> 00:05:55,230
see that the class is updates ng invalid

00:05:53,220 --> 00:05:56,640
this is super handy if you want to style

00:05:55,230 --> 00:05:59,550
inputs based on their validation status

00:05:56,640 --> 00:06:02,010
so if we go into our CSS here you can

00:05:59,550 --> 00:06:03,720
just say that if the input is valid and

00:06:02,010 --> 00:06:08,310
touch we're going to have some border

00:06:03,720 --> 00:06:12,500
here and if it's valid in touch we can

00:06:08,310 --> 00:06:12,500
add the opposite tool sunscreen

00:06:13,919 --> 00:06:17,759
so we also added a touch to replication

00:06:16,439 --> 00:06:18,840
here so it's not going to have any

00:06:17,759 --> 00:06:20,310
colors to start with we're going to wait

00:06:18,840 --> 00:06:22,139
till the user interacts with it it's

00:06:20,310 --> 00:06:23,819
initially it's gray then we blurred in a

00:06:22,139 --> 00:06:26,759
thread and blow the other one and it's

00:06:23,819 --> 00:06:28,469
also red so cool thank you working okay

00:06:26,759 --> 00:06:32,189
so now let's replace these printouts

00:06:28,469 --> 00:06:34,919
with actual error messages so in here we

00:06:32,189 --> 00:06:38,009
can remove these and we're going to

00:06:34,919 --> 00:06:39,360
create dibs for errors and we only want

00:06:38,009 --> 00:06:41,699
to show these errors if the name is

00:06:39,360 --> 00:06:44,430
valid or if it's touched or and it's

00:06:41,699 --> 00:06:47,550
touched it's the same logic right name

00:06:44,430 --> 00:06:51,029
is required and here do the same thing

00:06:47,550 --> 00:06:54,000
with bids so we want to check that it is

00:06:51,029 --> 00:06:55,349
required and touch written valid in

00:06:54,000 --> 00:07:00,840
touch okay

00:06:55,349 --> 00:07:03,150
I think that's reloaded okay so here we

00:07:00,840 --> 00:07:04,889
have dares so pretty straight board and

00:07:03,150 --> 00:07:06,900
so you can see it's pretty simple to set

00:07:04,889 --> 00:07:09,150
up basic validation using our built-ins

00:07:06,900 --> 00:07:10,229
what about custom validators so given

00:07:09,150 --> 00:07:12,870
that this is supposedly a bidding

00:07:10,229 --> 00:07:14,370
website we want to check that the bid

00:07:12,870 --> 00:07:16,229
that you're entering is higher than the

00:07:14,370 --> 00:07:20,180
latest bid that comes from the server's

00:07:16,229 --> 00:07:22,259
you're not bidding $3 and $200 item so

00:07:20,180 --> 00:07:25,650
we can create a custom validator for

00:07:22,259 --> 00:07:28,139
this so in our type script go ahead and

00:07:25,650 --> 00:07:32,879
create a minimum bid function so

00:07:28,139 --> 00:07:34,229
remember validators takes control and in

00:07:32,879 --> 00:07:35,789
this case it's an async value so this

00:07:34,229 --> 00:07:39,599
can return an observable the MIT's

00:07:35,789 --> 00:07:41,310
validation errors or null and we want to

00:07:39,599 --> 00:07:44,909
check on our server so we already have

00:07:41,310 --> 00:07:46,050
this get request to print the bids that

00:07:44,909 --> 00:07:48,689
already exist on the left side of the

00:07:46,050 --> 00:07:50,520
screen so we're going to paste this and

00:07:48,689 --> 00:07:51,930
we don't want all of the bids right so

00:07:50,520 --> 00:07:57,229
we can map it so that we're only looking

00:07:51,930 --> 00:07:59,550
at the last bid and then from that bid

00:07:57,229 --> 00:08:01,919
we can map it into the correct error

00:07:59,550 --> 00:08:04,099
format so here we can say hey if the

00:08:01,919 --> 00:08:05,580
control value is bigger than the bid

00:08:04,099 --> 00:08:09,389
we're good

00:08:05,580 --> 00:08:11,639
it's not let's surface this to low error

00:08:09,389 --> 00:08:14,939
and we'll pass through some good

00:08:11,639 --> 00:08:18,509
information like the expected bid and we

00:08:14,939 --> 00:08:20,310
can't forget to pass the skin so it'll

00:08:18,509 --> 00:08:22,050
be the third argument and we're binding

00:08:20,310 --> 00:08:23,950
it to this because internally we're

00:08:22,050 --> 00:08:26,830
using some states

00:08:23,950 --> 00:08:28,180
okay and then enter HTML let's go ahead

00:08:26,830 --> 00:08:31,210
and add an error message so we can see

00:08:28,180 --> 00:08:32,470
that this is working so now that we have

00:08:31,210 --> 00:08:33,640
two areas here we have to be a little

00:08:32,470 --> 00:08:36,430
more specific so we're going to show

00:08:33,640 --> 00:08:37,870
this ng if the bid has the required

00:08:36,430 --> 00:08:41,020
error which we're going to spell

00:08:37,870 --> 00:08:44,530
correctly and then if it's too low we

00:08:41,020 --> 00:08:48,820
want to show a different message let's

00:08:44,530 --> 00:08:50,830
say bid is too low and we can use some

00:08:48,820 --> 00:08:52,900
of the information from the expected

00:08:50,830 --> 00:08:54,820
value that we pass back to build this

00:08:52,900 --> 00:08:57,400
error message to could say cinnamon bid

00:08:54,820 --> 00:09:01,060
is oops

00:08:57,400 --> 00:09:06,580
good dog ears thought too low expected I

00:09:01,060 --> 00:09:09,930
think I called it your bid was only and

00:09:06,580 --> 00:09:13,300
it will just put the bit value here okay

00:09:09,930 --> 00:09:15,550
see it's works so you put in $3 we know

00:09:13,300 --> 00:09:17,020
that's too low it is too low the membe

00:09:15,550 --> 00:09:19,180
it is $10 or your business only three

00:09:17,020 --> 00:09:26,710
dollars and we can check this is working

00:09:19,180 --> 00:09:27,940
by um hooray its new message okay so and

00:09:26,710 --> 00:09:29,440
we can check that this is still working

00:09:27,940 --> 00:09:31,780
you know we can put something else here

00:09:29,440 --> 00:09:33,850
like just put like twelve dollars and

00:09:31,780 --> 00:09:35,590
once you refresh should have twelve

00:09:33,850 --> 00:09:37,600
dollars okay so now when we put in three

00:09:35,590 --> 00:09:40,510
or when we put an eleven this should now

00:09:37,600 --> 00:09:42,580
it's updating right it should still air

00:09:40,510 --> 00:09:44,920
okay so hopefully that gives you a sense

00:09:42,580 --> 00:09:46,210
of what it's like to set up basic

00:09:44,920 --> 00:09:48,280
validation we don't have time to go into

00:09:46,210 --> 00:09:50,830
a whole lot of detail but we do have

00:09:48,280 --> 00:09:54,220
time to talk about some upcoming

00:09:50,830 --> 00:09:56,500
features hooray so huge disclaimer and

00:09:54,220 --> 00:09:58,270
so these are features that are still

00:09:56,500 --> 00:09:59,590
kind of they're going to the design of

00:09:58,270 --> 00:10:01,810
you process you have the design Docs

00:09:59,590 --> 00:10:03,100
it's been approved but the syntax is

00:10:01,810 --> 00:10:06,010
still subject to change so just kind of

00:10:03,100 --> 00:10:07,950
take away the big ideas and don't worry

00:10:06,010 --> 00:10:11,050
about the rest

00:10:07,950 --> 00:10:12,970
okay so let's circle back to what's

00:10:11,050 --> 00:10:15,880
actually going on when we're typing in

00:10:12,970 --> 00:10:17,710
that that bid input helped us understand

00:10:15,880 --> 00:10:20,830
how these new features are going to

00:10:17,710 --> 00:10:22,300
change things so when you type into the

00:10:20,830 --> 00:10:24,700
bid input the sync validators are going

00:10:22,300 --> 00:10:26,710
to run and let's validator is not

00:10:24,700 --> 00:10:28,540
required if you have a required error

00:10:26,710 --> 00:10:30,250
then the errors are sent immediately the

00:10:28,540 --> 00:10:31,780
status is set to invalid and we don't

00:10:30,250 --> 00:10:33,460
even bother running basic validator

00:10:31,780 --> 00:10:35,680
because we already know that the status

00:10:33,460 --> 00:10:36,150
is invalid if the sync violators pass

00:10:35,680 --> 00:10:37,590
the

00:10:36,150 --> 00:10:39,930
actually have a value then we run the

00:10:37,590 --> 00:10:42,450
async validator so the minimum bid

00:10:39,930 --> 00:10:44,490
server request while it's in progress we

00:10:42,450 --> 00:10:46,380
set the status depending and then

00:10:44,490 --> 00:10:48,000
whenever the request comes back the

00:10:46,380 --> 00:10:49,530
validation results and we set the errors

00:10:48,000 --> 00:10:52,320
accordingly and recalculate the status

00:10:49,530 --> 00:10:53,640
that's pretty straightforward so if we

00:10:52,320 --> 00:10:57,210
were to make this a little bit more

00:10:53,640 --> 00:11:00,180
concrete let's show how it's a life

00:10:57,210 --> 00:11:02,960
cycle of how the value gets to the air

00:11:00,180 --> 00:11:05,340
state so we start with an empty string

00:11:02,960 --> 00:11:07,260
then the form control goes through

00:11:05,340 --> 00:11:08,520
validators not required and obviously

00:11:07,260 --> 00:11:10,470
this can return the required air because

00:11:08,520 --> 00:11:12,000
it's empty so in that case there's will

00:11:10,470 --> 00:11:14,490
be set immediately in the statuses up to

00:11:12,000 --> 00:11:16,290
God Don let's say you type a three in

00:11:14,490 --> 00:11:17,880
the bid input so the former child once

00:11:16,290 --> 00:11:20,010
again goes through values that required

00:11:17,880 --> 00:11:21,960
in this case it's null because that's

00:11:20,010 --> 00:11:24,330
value in which case the minimum bid

00:11:21,960 --> 00:11:26,190
requests will go off and in this case

00:11:24,330 --> 00:11:27,600
it's lower than twelve so you'll see the

00:11:26,190 --> 00:11:29,790
two low error and a status of Silla

00:11:27,600 --> 00:11:32,190
knowledge in the last case you got a one

00:11:29,790 --> 00:11:34,200
goes through all the validators in this

00:11:32,190 --> 00:11:37,710
case everything is valid you're you're

00:11:34,200 --> 00:11:40,050
cool so in this way we're thinking about

00:11:37,710 --> 00:11:43,110
it from kind of top to bottom from one

00:11:40,050 --> 00:11:44,280
value change all the way to a status

00:11:43,110 --> 00:11:46,380
being calculated but you can also think

00:11:44,280 --> 00:11:48,300
about it from left to right so if you

00:11:46,380 --> 00:11:50,070
think about it that way it becomes clear

00:11:48,300 --> 00:11:52,500
that you have these values that are

00:11:50,070 --> 00:11:54,840
arriving over time right you have the

00:11:52,500 --> 00:11:56,940
stream of values and the stream of

00:11:54,840 --> 00:11:58,740
values kicks off this stream of four

00:11:56,940 --> 00:12:00,810
controls that are passed into valid ears

00:11:58,740 --> 00:12:02,280
that required and value your stop

00:12:00,810 --> 00:12:05,070
required returns the stream of

00:12:02,280 --> 00:12:06,390
synchronous errors and eventually once

00:12:05,070 --> 00:12:08,550
it goes through the athan validator or

00:12:06,390 --> 00:12:10,920
not depending and we get this stream of

00:12:08,550 --> 00:12:13,200
a singers so you might start to notice

00:12:10,920 --> 00:12:16,140
that this looks a little bit like in our

00:12:13,200 --> 00:12:18,690
experience marble diagram because that's

00:12:16,140 --> 00:12:20,490
the point so if you don't know what a

00:12:18,690 --> 00:12:24,120
marble diagram is essentially a way to

00:12:20,490 --> 00:12:26,040
visualize observable streams so we can

00:12:24,120 --> 00:12:27,930
visualize our entire validation process

00:12:26,040 --> 00:12:30,570
as an observable stream that's just kind

00:12:27,930 --> 00:12:32,100
of being transformed over time so if we

00:12:30,570 --> 00:12:34,680
were to translate this into our students

00:12:32,100 --> 00:12:36,410
operators we might have a value stream

00:12:34,680 --> 00:12:38,490
that's being mapped to a form control

00:12:36,410 --> 00:12:41,220
that's being mapped through our

00:12:38,490 --> 00:12:42,750
validator function to get our validation

00:12:41,220 --> 00:12:44,850
errors that's being switched Maps

00:12:42,750 --> 00:12:46,830
through our async validator to get the

00:12:44,850 --> 00:12:48,920
final validation error State and then

00:12:46,830 --> 00:12:50,240
let me subscribe we can set the errors

00:12:48,920 --> 00:12:54,500
fun whatever errors are being emitted

00:12:50,240 --> 00:12:57,440
from the stream calculate status so if

00:12:54,500 --> 00:12:59,360
you were to add pseudocode this kind of

00:12:57,440 --> 00:13:01,459
make it more concise we have value

00:12:59,360 --> 00:13:03,440
changes that map to the control that

00:13:01,459 --> 00:13:04,610
once again the control Maps through the

00:13:03,440 --> 00:13:06,980
validator function and returns

00:13:04,610 --> 00:13:08,990
synchronous errors if there are errors

00:13:06,980 --> 00:13:10,699
we switch map to an observable that

00:13:08,990 --> 00:13:12,139
completes immediately so that the errors

00:13:10,699 --> 00:13:15,079
are set right away and the status isn't

00:13:12,139 --> 00:13:16,760
valid otherwise we'll switch map to

00:13:15,079 --> 00:13:18,470
subscribe to this a sync validator and

00:13:16,760 --> 00:13:20,540
whenever the async validator emits an

00:13:18,470 --> 00:13:23,269
error that's when theirs will be reset

00:13:20,540 --> 00:13:25,250
and you can kind of see that we're

00:13:23,269 --> 00:13:27,139
shaping up this process where whenever

00:13:25,250 --> 00:13:29,149
errors are emitted or null is emitted we

00:13:27,139 --> 00:13:32,420
set the status accordingly so you might

00:13:29,149 --> 00:13:33,829
wonder where did pending go well we

00:13:32,420 --> 00:13:35,839
could also have some sort of pending

00:13:33,829 --> 00:13:37,850
token that the status calculator

00:13:35,839 --> 00:13:39,649
internally understands if you omit an

00:13:37,850 --> 00:13:41,870
error of pending with that token I will

00:13:39,649 --> 00:13:43,160
set the status depending and you can use

00:13:41,870 --> 00:13:45,740
the start with operator to kind of

00:13:43,160 --> 00:13:47,389
prefix your async validator stream so

00:13:45,740 --> 00:13:48,980
pending is set up immediately and then

00:13:47,389 --> 00:13:52,130
whenever the validation result comes

00:13:48,980 --> 00:13:54,649
back it will override it okay so why do

00:13:52,130 --> 00:13:57,680
we care why do we care about visualizing

00:13:54,649 --> 00:13:59,959
our validation pipeline as a stream well

00:13:57,680 --> 00:14:01,339
it opens the floodgates for a number of

00:13:59,959 --> 00:14:03,529
features that have been highly requested

00:14:01,339 --> 00:14:05,630
by the community so one of these is

00:14:03,529 --> 00:14:08,570
custom validator chains so what's the

00:14:05,630 --> 00:14:10,970
custom validator chain so if we go back

00:14:08,570 --> 00:14:13,579
to our validation pipeline here we have

00:14:10,970 --> 00:14:14,839
all of this logic in the middle that's

00:14:13,579 --> 00:14:16,190
kind of our default validation logic

00:14:14,839 --> 00:14:18,260
right it has to go through sync

00:14:16,190 --> 00:14:19,640
validators first and then it's only

00:14:18,260 --> 00:14:21,980
going to run the async validators at the

00:14:19,640 --> 00:14:24,110
sync validators pass and so on and so

00:14:21,980 --> 00:14:26,839
forth but what if your application had

00:14:24,110 --> 00:14:29,149
different needs what if you could just

00:14:26,839 --> 00:14:31,100
take our whole chunk of the chain out

00:14:29,149 --> 00:14:33,890
and insert your own validation chain

00:14:31,100 --> 00:14:36,019
here well you can do that so there's an

00:14:33,890 --> 00:14:37,670
operator called let that takes a

00:14:36,019 --> 00:14:40,579
selector function so basically it's a

00:14:37,670 --> 00:14:43,550
way to mix in reusable middleware and

00:14:40,579 --> 00:14:44,839
existing observable chains so if you it

00:14:43,550 --> 00:14:47,120
takes a function that takes an

00:14:44,839 --> 00:14:48,769
observable and returns an observable so

00:14:47,120 --> 00:14:50,720
if you look at an example here this one

00:14:48,769 --> 00:14:52,250
takes an observable and returns an

00:14:50,720 --> 00:14:54,410
observable that spin Maps through

00:14:52,250 --> 00:14:57,170
validators that required so this is

00:14:54,410 --> 00:14:58,430
functionally the same as if

00:14:57,170 --> 00:15:00,200
you just map it through validator set

00:14:58,430 --> 00:15:02,630
required it flattens it into the

00:15:00,200 --> 00:15:05,209
existing chain so this is a really

00:15:02,630 --> 00:15:07,130
powerful thing right if we can surface

00:15:05,209 --> 00:15:08,420
this selector function to developers and

00:15:07,130 --> 00:15:10,639
allow them to configure this function

00:15:08,420 --> 00:15:12,860
basically what that means is your

00:15:10,639 --> 00:15:15,170
application can decide your validation

00:15:12,860 --> 00:15:17,120
logic from the time values change to

00:15:15,170 --> 00:15:19,490
when the status is set so you have

00:15:17,120 --> 00:15:20,810
complete control over the order and the

00:15:19,490 --> 00:15:23,149
timing of your validate of your

00:15:20,810 --> 00:15:25,100
validation as you can see bounce things

00:15:23,149 --> 00:15:26,600
you can get your validation running on

00:15:25,100 --> 00:15:28,519
whether or not certain controls been

00:15:26,600 --> 00:15:29,990
touched your form has been submitted you

00:15:28,519 --> 00:15:33,440
can run your async validators first go

00:15:29,990 --> 00:15:34,910
crazy and whatever you want to do and it

00:15:33,440 --> 00:15:36,800
also means you can omit errors as

00:15:34,910 --> 00:15:39,649
frequently or as seldom as your

00:15:36,800 --> 00:15:41,959
application requires so this opens up a

00:15:39,649 --> 00:15:43,850
huge opportunity to have you know low

00:15:41,959 --> 00:15:46,880
level customizations if that's what you

00:15:43,850 --> 00:15:49,699
need and it also opens up the

00:15:46,880 --> 00:15:52,459
possibility for push based validation so

00:15:49,699 --> 00:15:54,589
if you go back and look at our minimum

00:15:52,459 --> 00:15:56,480
bid async validator this is really kind

00:15:54,589 --> 00:15:59,000
of a poll model right so every time the

00:15:56,480 --> 00:16:00,380
value changes we pull a new minimum bit

00:15:59,000 --> 00:16:03,110
from the server because we know that's

00:16:00,380 --> 00:16:04,850
the point that we need it but what if

00:16:03,110 --> 00:16:06,230
you type a bit in and then you go make

00:16:04,850 --> 00:16:08,480
some breakfast and you come back and

00:16:06,230 --> 00:16:09,829
summon a bid on your item in the

00:16:08,480 --> 00:16:11,240
meantime well you don't get an update

00:16:09,829 --> 00:16:13,399
right the validations already run you're

00:16:11,240 --> 00:16:14,990
kind of done but if we have this

00:16:13,399 --> 00:16:16,910
continuous stream of errors is coming

00:16:14,990 --> 00:16:19,699
out and we don't require completion

00:16:16,910 --> 00:16:22,699
anymore then you can get push updates

00:16:19,699 --> 00:16:23,660
you can get real-time validation so I'm

00:16:22,699 --> 00:16:25,130
going to show you some of these new

00:16:23,660 --> 00:16:26,180
features we don't have a lot of time

00:16:25,130 --> 00:16:30,019
left I don't think so

00:16:26,180 --> 00:16:32,510
can't show them all but let's start by

00:16:30,019 --> 00:16:34,430
refactoring this into a chain so we're

00:16:32,510 --> 00:16:37,339
here in the bid validation

00:16:34,430 --> 00:16:40,540
pipeline here so we can have a chain

00:16:37,339 --> 00:16:44,720
we're going to call it to stop my chain

00:16:40,540 --> 00:16:48,699
okay I'm alert right here my chain takes

00:16:44,720 --> 00:16:53,089
an abstract control and it returns

00:16:48,699 --> 00:16:54,740
quality or chain and remember we're

00:16:53,089 --> 00:16:56,569
passing through that selector function

00:16:54,740 --> 00:16:58,220
so it's a function that takes an

00:16:56,569 --> 00:17:01,220
observable and returns an observable so

00:16:58,220 --> 00:17:02,959
we'll start simple the observable that's

00:17:01,220 --> 00:17:05,750
going to come in will be emitting a

00:17:02,959 --> 00:17:09,390
control so we can just map that control

00:17:05,750 --> 00:17:12,250
through all daters that required

00:17:09,390 --> 00:17:15,520
so this should work exactly the same as

00:17:12,250 --> 00:17:17,829
just passing a card validator so if we

00:17:15,520 --> 00:17:19,990
blur this her a bit is required it's

00:17:17,829 --> 00:17:22,299
exactly the same okay so let's make this

00:17:19,990 --> 00:17:23,500
a little bit more mature so we can make

00:17:22,299 --> 00:17:26,169
this work a little bit more like our

00:17:23,500 --> 00:17:27,730
default validation change let's say we

00:17:26,169 --> 00:17:30,700
take the errors from the sinc validator

00:17:27,730 --> 00:17:32,169
if they exist we can switch map to an

00:17:30,700 --> 00:17:36,880
observable that will emit those areas

00:17:32,169 --> 00:17:39,370
immediately and else why is otherwise we

00:17:36,880 --> 00:17:42,100
can such map choose animam bid async

00:17:39,370 --> 00:17:45,070
validator that we already created and if

00:17:42,100 --> 00:17:46,270
you want to make this really like fault

00:17:45,070 --> 00:17:51,309
we also want to start with a pending

00:17:46,270 --> 00:17:55,780
status okay my parentheses right okay

00:17:51,309 --> 00:17:57,669
cool so when this updates as soon as we

00:17:55,780 --> 00:18:00,760
blur the field we should see the two low

00:17:57,669 --> 00:18:03,490
error that we got before so we did not

00:18:00,760 --> 00:18:04,960
see that so we're going to check to see

00:18:03,490 --> 00:18:07,929
what's going on here

00:18:04,960 --> 00:18:10,900
okay so we have my chain snapping P

00:18:07,929 --> 00:18:11,830
values are acquired their errors okay so

00:18:10,900 --> 00:18:13,990
you know it we should look at their HTML

00:18:11,830 --> 00:18:19,660
make sure it's straight so how's the air

00:18:13,990 --> 00:18:22,660
too low it is too low okay this will be

00:18:19,660 --> 00:18:24,669
some exciting live depression okay so

00:18:22,660 --> 00:18:28,240
let's go ahead and print out some stuff

00:18:24,669 --> 00:18:31,120
here so return their errors we're trying

00:18:28,240 --> 00:18:32,880
to dribble of errors and oh it is

00:18:31,120 --> 00:18:37,470
required wait I'm stupid okay

00:18:32,880 --> 00:18:40,570
there's nothing in there okay so let's

00:18:37,470 --> 00:18:43,799
refresh this and just start over okay so

00:18:40,570 --> 00:18:47,400
just three here okay it's working hurray

00:18:43,799 --> 00:18:47,400
okay so

00:18:48,480 --> 00:18:53,380
okay so bid is teal mmm that is 12

00:18:52,030 --> 00:18:56,350
Pierce's Orangery okay so let's still

00:18:53,380 --> 00:18:57,940
working exactly the same and but you

00:18:56,350 --> 00:18:59,410
might notice actually if we start to

00:18:57,940 --> 00:19:02,530
increment this value I don't know if you

00:18:59,410 --> 00:19:04,210
can see this on use that flash right and

00:19:02,530 --> 00:19:05,350
the air is flashing the styles are

00:19:04,210 --> 00:19:07,390
flashing and that's because we have this

00:19:05,350 --> 00:19:09,070
pending status in between valid and

00:19:07,390 --> 00:19:11,200
invalid right while the async validators

00:19:09,070 --> 00:19:12,700
are running so in our case we don't

00:19:11,200 --> 00:19:14,170
really want this pending status kind of

00:19:12,700 --> 00:19:15,910
messes up our styles and we're not using

00:19:14,170 --> 00:19:18,850
it for anything so since we're using a

00:19:15,910 --> 00:19:20,700
chain we can kind of decide but we just

00:19:18,850 --> 00:19:24,520
don't have a pending status in our chain

00:19:20,700 --> 00:19:25,540
so you can delete this and then once

00:19:24,520 --> 00:19:26,650
this we compiled if you start

00:19:25,540 --> 00:19:33,490
incrementing the value again you should

00:19:26,650 --> 00:19:36,730
see that the flash is gone okay so I put

00:19:33,490 --> 00:19:39,730
three in here blur it again and now you

00:19:36,730 --> 00:19:41,380
see that the flash is gone right because

00:19:39,730 --> 00:19:42,460
you can totally customize side okay so

00:19:41,380 --> 00:19:44,260
the last thing I want to show you very

00:19:42,460 --> 00:19:47,560
quickly is how push based validation

00:19:44,260 --> 00:19:51,300
might work so instead of using this HTTP

00:19:47,560 --> 00:19:53,980
module instead we can use angularfire

00:19:51,300 --> 00:20:00,940
we're going to make this a firebase list

00:19:53,980 --> 00:20:04,390
observable seems to Kotov okay and so

00:20:00,940 --> 00:20:06,460
instead of using this HTTP GET we're

00:20:04,390 --> 00:20:11,380
going to connect us up to the firebase

00:20:06,460 --> 00:20:13,300
database and we're going to make this

00:20:11,380 --> 00:20:15,490
post also work that way so we're just

00:20:13,300 --> 00:20:17,290
going to push well you don't worry about

00:20:15,490 --> 00:20:20,350
the syntax so much and just really quick

00:20:17,290 --> 00:20:22,060
setup okay so in our async validator

00:20:20,350 --> 00:20:23,980
we're going to remove this get requests

00:20:22,060 --> 00:20:25,390
that completes immediately and instead

00:20:23,980 --> 00:20:27,940
we're going to have this stop days which

00:20:25,390 --> 00:20:30,190
is an observable from angular fire that

00:20:27,940 --> 00:20:35,770
will emit whenever your bids array

00:20:30,190 --> 00:20:38,830
changes so theoretically if we were to

00:20:35,770 --> 00:20:42,720
create a second instance of this you can

00:20:38,830 --> 00:20:42,720
look like this okay

00:20:48,030 --> 00:20:53,280
we're let say we put something here like

00:20:50,580 --> 00:20:54,450
ng comps will put $20 and at this point

00:20:53,280 --> 00:20:57,270
is totally valid because it's higher the

00:20:54,450 --> 00:21:01,170
12 then we put something like ng comp to

00:20:57,270 --> 00:21:02,460
put $25 okay so these are two separate

00:21:01,170 --> 00:21:04,410
users using our bidding website they're

00:21:02,460 --> 00:21:06,420
bidding on the same thing so as soon as

00:21:04,410 --> 00:21:07,950
we post the bid on the right side we

00:21:06,420 --> 00:21:09,630
should see an immediate real-time update

00:21:07,950 --> 00:21:11,340
on the left side because we have this

00:21:09,630 --> 00:21:12,870
stream of air as it's constantly updated

00:21:11,340 --> 00:21:14,490
so as soon as you post this you can see

00:21:12,870 --> 00:21:22,350
on the left you have this update in

00:21:14,490 --> 00:21:23,730
real-time so you can see how this could

00:21:22,350 --> 00:21:25,170
be really cool if you had you know a

00:21:23,730 --> 00:21:26,760
real bidding website where you know bids

00:21:25,170 --> 00:21:28,950
are coming fast and hard and you know

00:21:26,760 --> 00:21:30,360
like updating we're really excited about

00:21:28,950 --> 00:21:32,700
this new feature that's it for the demo

00:21:30,360 --> 00:21:34,290
and but if you wanted to find out more

00:21:32,700 --> 00:21:36,450
about it we have a design doc that we

00:21:34,290 --> 00:21:38,550
just made public and here's some more

00:21:36,450 --> 00:21:39,750
resources for forms if interested so

00:21:38,550 --> 00:21:41,830
thanks very much

00:21:39,750 --> 00:21:44,950
[Applause]

00:21:41,830 --> 00:21:44,950

YouTube URL: https://www.youtube.com/watch?v=kM5QBOWrUVI


