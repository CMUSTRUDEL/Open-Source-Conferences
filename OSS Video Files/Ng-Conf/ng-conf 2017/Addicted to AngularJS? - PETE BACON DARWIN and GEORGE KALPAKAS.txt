Title: Addicted to AngularJS? - PETE BACON DARWIN and GEORGE KALPAKAS
Publication date: 2017-04-07
Playlist: ng-conf 2017
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,000 --> 00:00:08,069
hello hi so my name's Pete bacon Darwin

00:00:05,190 --> 00:00:11,190
my name is George go vodka oh it serves

00:00:08,069 --> 00:00:13,019
the gentleman in the back there just

00:00:11,190 --> 00:00:16,190
announced we are both working on

00:00:13,019 --> 00:00:18,720
angularjs and also an NGO create project

00:00:16,190 --> 00:00:20,640
so you wouldn't be surprised given that

00:00:18,720 --> 00:00:23,640
we both work for angularjs that we

00:00:20,640 --> 00:00:25,260
really love angular Jess in fact we

00:00:23,640 --> 00:00:27,180
might go so far as to say that we're

00:00:25,260 --> 00:00:29,160
addicted to it and I've got a feeling

00:00:27,180 --> 00:00:31,170
that might be a few other addicts out

00:00:29,160 --> 00:00:33,870
there today so we've got some good news

00:00:31,170 --> 00:00:36,090
she so things like the clarity templates

00:00:33,870 --> 00:00:39,450
dependency injection and the amazing

00:00:36,090 --> 00:00:41,340
ecosystem just have us coming back for

00:00:39,450 --> 00:00:44,579
more it seems we can't get enough of it

00:00:41,340 --> 00:00:47,610
but that being said angularjs has been

00:00:44,579 --> 00:00:48,840
Alex for quite a while now it's becoming

00:00:47,610 --> 00:00:50,820
a little bit of an old man yeah

00:00:48,840 --> 00:00:53,670
angularjs is starting to show a little

00:00:50,820 --> 00:00:56,039
bit of its age um when angular jess was

00:00:53,670 --> 00:00:58,050
first devised by a Papa myshko and

00:00:56,039 --> 00:01:01,949
friends the world the web was a very

00:00:58,050 --> 00:01:05,460
different place and the mobile platform

00:01:01,949 --> 00:01:06,900
didn't barely even existed yeah so this

00:01:05,460 --> 00:01:08,850
is why the team of google and the

00:01:06,900 --> 00:01:10,650
angular team have been working so hard

00:01:08,850 --> 00:01:12,720
over the last couple years to create the

00:01:10,650 --> 00:01:14,159
new angular framework which is going to

00:01:12,720 --> 00:01:16,890
support us going forward for the next

00:01:14,159 --> 00:01:18,360
few years with the mobile web and other

00:01:16,890 --> 00:01:21,840
platforms that we might not even think

00:01:18,360 --> 00:01:25,200
about yet so maybe it's time to upgrade

00:01:21,840 --> 00:01:27,210
of this new world of angular cool so one

00:01:25,200 --> 00:01:30,150
way to do this is you just stick a big

00:01:27,210 --> 00:01:32,310
bomb underneath your angularjs up boom

00:01:30,150 --> 00:01:34,020
it up and then just collect up all the

00:01:32,310 --> 00:01:36,509
pieces and rebuild it in angular right

00:01:34,020 --> 00:01:38,460
well it sounds easy doesn't but i

00:01:36,509 --> 00:01:40,920
actually just released a recent survey

00:01:38,460 --> 00:01:43,649
so that there are many projects that

00:01:40,920 --> 00:01:45,240
have be caps and i developed based

00:01:43,649 --> 00:01:46,560
really small themes all right so these

00:01:45,240 --> 00:01:49,229
projects just don't have the resources

00:01:46,560 --> 00:01:53,040
and the time to just stop work and

00:01:49,229 --> 00:01:55,710
redevelop the entire arc and angular so

00:01:53,040 --> 00:01:57,810
how about if it would be able to ease

00:01:55,710 --> 00:01:59,880
yourself of this angularjs addiction bit

00:01:57,810 --> 00:02:04,110
by bit while still keeping your apps in

00:01:59,880 --> 00:02:06,390
production so no no detox right so ng

00:02:04,110 --> 00:02:09,209
upgrade is a lively that actually allows

00:02:06,390 --> 00:02:13,310
you to run angularjs an angular at the

00:02:09,209 --> 00:02:13,310
same time in a hybrid application

00:02:13,380 --> 00:02:18,150
so as an example let's consider this

00:02:15,600 --> 00:02:20,610
simple component based to do application

00:02:18,150 --> 00:02:24,000
or have to do in there we haven't seen

00:02:20,610 --> 00:02:25,230
enough to do reason so we've made it

00:02:24,000 --> 00:02:27,810
easy for you we've colored in this

00:02:25,230 --> 00:02:29,550
diagram so you can see which bits are

00:02:27,810 --> 00:02:32,160
angularjs and which bits are angular the

00:02:29,550 --> 00:02:35,160
red is angularjs funnily enough our

00:02:32,160 --> 00:02:36,480
angular JS app is all angular chair it's

00:02:35,160 --> 00:02:39,060
one hundred percent angular JS right now

00:02:36,480 --> 00:02:41,570
okay so let's see now what it might look

00:02:39,060 --> 00:02:44,280
like if we converted it to a high regard

00:02:41,570 --> 00:02:45,390
ok here's our hug it out suddenly we've

00:02:44,280 --> 00:02:46,770
got a little bit of green coming in

00:02:45,390 --> 00:02:49,080
there but what you'll see is that the

00:02:46,770 --> 00:02:50,940
green is interleaved with the red yeah

00:02:49,080 --> 00:02:52,740
we've added a new footer component which

00:02:50,940 --> 00:02:55,860
is built with purely with angular and

00:02:52,740 --> 00:02:58,530
we've actually converted the angular app

00:02:55,860 --> 00:03:00,870
at the angular JS app component across

00:02:58,530 --> 00:03:03,360
to angular it's important to note that

00:03:00,870 --> 00:03:05,640
in a hybrid of each element is owned by

00:03:03,360 --> 00:03:07,980
exactly one of either angularjs or

00:03:05,640 --> 00:03:10,080
angular at the top of the slides you can

00:03:07,980 --> 00:03:11,940
find the URL to a github repository

00:03:10,080 --> 00:03:13,980
where you can go look at the actual code

00:03:11,940 --> 00:03:16,050
that we use for their and the

00:03:13,980 --> 00:03:17,910
step-by-step upgrade process so this is

00:03:16,050 --> 00:03:19,560
a good place to go and start if you want

00:03:17,910 --> 00:03:21,840
to get started in the background while

00:03:19,560 --> 00:03:23,070
we're talking I think you ought to give

00:03:21,840 --> 00:03:25,110
us a round of applause by the way

00:03:23,070 --> 00:03:27,180
because so far we have not mentioned any

00:03:25,110 --> 00:03:30,060
of the bad angular words and it's really

00:03:27,180 --> 00:03:32,430
hard to give a talk about angularjs I'm

00:03:30,060 --> 00:03:34,650
upgrading to angular without making a

00:03:32,430 --> 00:03:36,210
few mistakes and if we do you can boo us

00:03:34,650 --> 00:03:38,850
or make goat noises I think is the

00:03:36,210 --> 00:03:41,490
appropriate Vermont but yeah thank you

00:03:38,850 --> 00:03:42,660
very much we're still early in the

00:03:41,490 --> 00:03:46,920
slides there's plenty opportunities

00:03:42,660 --> 00:03:48,720
would go wrong ok so this idea of

00:03:46,920 --> 00:03:50,430
actually creating a hybrid app which has

00:03:48,720 --> 00:03:51,900
got bits of angular and angularjs all

00:03:50,430 --> 00:03:53,910
mixed together seems like a really

00:03:51,900 --> 00:03:55,650
complicated thing to achieve but we've

00:03:53,910 --> 00:03:57,690
actually managed to break it down to a

00:03:55,650 --> 00:03:59,070
really simple API there's only four

00:03:57,690 --> 00:04:02,970
things that you have to import from

00:03:59,070 --> 00:04:05,250
angular / upgrades / static first of all

00:04:02,970 --> 00:04:07,709
you've got two classes upgrade mobile a

00:04:05,250 --> 00:04:09,780
module and upgrade components and then

00:04:07,709 --> 00:04:12,330
to helper functions called downgrade

00:04:09,780 --> 00:04:13,830
component and downgrade injectables so

00:04:12,330 --> 00:04:18,780
how do we actually use them to create

00:04:13,830 --> 00:04:21,090
the hybrid app so what we've identified

00:04:18,780 --> 00:04:22,710
is there are basically five steps to

00:04:21,090 --> 00:04:25,740
rehabilitation from your angularjs

00:04:22,710 --> 00:04:26,290
addiction we can go over those things

00:04:25,740 --> 00:04:28,090
during

00:04:26,290 --> 00:04:30,600
this court now yeah in this talk we're

00:04:28,090 --> 00:04:35,260
going to show you how to apply each step

00:04:30,600 --> 00:04:37,390
in your path to rehabilitation okay so

00:04:35,260 --> 00:04:40,540
first of all we need to bootstrap our

00:04:37,390 --> 00:04:42,070
app I'm afraid that um this is probably

00:04:40,540 --> 00:04:43,780
the most complicated positive out so we

00:04:42,070 --> 00:04:44,830
thought we'd get it out of the way at

00:04:43,780 --> 00:04:46,300
the beginning and then everything else

00:04:44,830 --> 00:04:48,430
will be easy because it is a little bit

00:04:46,300 --> 00:04:51,130
of a damped to get your hybrid app up

00:04:48,430 --> 00:04:52,930
and running so first we boots up the

00:04:51,130 --> 00:04:56,620
angular app module using platform

00:04:52,930 --> 00:05:00,220
browser this will create the angular

00:04:56,620 --> 00:05:02,050
root injector instead of providing boot

00:05:00,220 --> 00:05:04,420
sub components because we don't want to

00:05:02,050 --> 00:05:06,730
bootstrap anything until angularjs is is

00:05:04,420 --> 00:05:08,890
also ready we will implement the ends of

00:05:06,730 --> 00:05:10,300
the bootstrap cook inside the into the

00:05:08,890 --> 00:05:13,030
boots are cook we are going to use

00:05:10,300 --> 00:05:15,610
upgrade modules boots upper helper

00:05:13,030 --> 00:05:18,190
method which will boost up the angularjs

00:05:15,610 --> 00:05:21,610
part of that this will create the

00:05:18,190 --> 00:05:23,350
angular JS injector I at this point we

00:05:21,610 --> 00:05:26,140
will let the injectors know about each

00:05:23,350 --> 00:05:28,030
other and finally the angularjs boots up

00:05:26,140 --> 00:05:30,670
will combine the root element of the

00:05:28,030 --> 00:05:32,470
application you cannot believe how long

00:05:30,670 --> 00:05:36,070
we spent trying to put that diagram

00:05:32,470 --> 00:05:37,840
together but hopefully it kind of makes

00:05:36,070 --> 00:05:39,310
some sense you might want to go and

00:05:37,840 --> 00:05:43,120
stare at that for a little while after

00:05:39,310 --> 00:05:45,700
it um so what we've actually got is

00:05:43,120 --> 00:05:47,320
there is two frameworks running side by

00:05:45,700 --> 00:05:48,640
side with injectors that actually know

00:05:47,320 --> 00:05:50,290
about each other and can talk to each

00:05:48,640 --> 00:05:52,510
other what you'll notice is that the

00:05:50,290 --> 00:05:54,550
root element is actually been compiled

00:05:52,510 --> 00:05:57,040
by angularjs so it's owned by angularjs

00:05:54,550 --> 00:06:02,050
at this stage so let's see how we

00:05:57,040 --> 00:06:04,510
actually go please the key to

00:06:02,050 --> 00:06:06,940
bootstrapping is the upgrade module so

00:06:04,510 --> 00:06:09,100
we need to import the upgrade module to

00:06:06,940 --> 00:06:15,610
our angular module and then we also

00:06:09,100 --> 00:06:17,380
inject it into the constructor so the

00:06:15,610 --> 00:06:20,590
reason we injected in is that inside

00:06:17,380 --> 00:06:22,330
this ng do bootstrap method we actually

00:06:20,590 --> 00:06:24,400
then need to call bootstrap on the

00:06:22,330 --> 00:06:26,350
upgrade module which then does the

00:06:24,400 --> 00:06:28,690
workers bootstrapping the angularjs

00:06:26,350 --> 00:06:29,800
application and wiring up the injectors

00:06:28,690 --> 00:06:37,240
like we just showed in the previous

00:06:29,800 --> 00:06:38,480
diagram so finally we we kick up the way

00:06:37,240 --> 00:06:40,190
upgrade their boots up

00:06:38,480 --> 00:06:43,340
a process Bible stopping the motion

00:06:40,190 --> 00:06:44,780
using platform browser this is basically

00:06:43,340 --> 00:06:46,730
exactly what you do in a normal obvious

00:06:44,780 --> 00:06:49,100
there's nothing very clever as fun funky

00:06:46,730 --> 00:06:51,740
about that right so we've managed to

00:06:49,100 --> 00:06:53,210
bootstrap our app and as I said that was

00:06:51,740 --> 00:06:54,440
probably the most of gore bit so if you

00:06:53,210 --> 00:06:57,020
manage to follow that then the rest is

00:06:54,440 --> 00:06:58,730
going to be really easier what we

00:06:57,020 --> 00:07:01,700
actually don't have in our app is any

00:06:58,730 --> 00:07:04,070
angular components or services yet so

00:07:01,700 --> 00:07:07,280
our first step is to add a this new

00:07:04,070 --> 00:07:10,040
footer component which is a pure angular

00:07:07,280 --> 00:07:11,480
component unfortunately this is going to

00:07:10,040 --> 00:07:13,670
have to live inside an angularjs

00:07:11,480 --> 00:07:15,290
template how do we do that so in order

00:07:13,670 --> 00:07:19,910
to do that we need to understand how we

00:07:15,290 --> 00:07:20,990
downgrade components so a little bit

00:07:19,910 --> 00:07:22,160
about terminology we've already

00:07:20,990 --> 00:07:23,480
discussed the fact that we've got

00:07:22,160 --> 00:07:25,070
angular and angular JS which is

00:07:23,480 --> 00:07:26,390
confusing enough so we're going to

00:07:25,070 --> 00:07:28,760
introduce more terminology about

00:07:26,390 --> 00:07:30,650
upgrading and downgrading just to make

00:07:28,760 --> 00:07:32,720
it clear downgrade means taking an

00:07:30,650 --> 00:07:35,270
angular thing like a component or

00:07:32,720 --> 00:07:38,930
service and making it available to

00:07:35,270 --> 00:07:41,510
angularjs let's have a look at actually

00:07:38,930 --> 00:07:43,640
what downgrading in code looks like okay

00:07:41,510 --> 00:07:46,010
so first we register our component with

00:07:43,640 --> 00:07:48,710
angular module by adding into the

00:07:46,010 --> 00:07:50,390
declarations property in addition to

00:07:48,710 --> 00:07:52,730
that we also need to add it to the list

00:07:50,390 --> 00:07:54,530
of enter components because it will be

00:07:52,730 --> 00:07:57,050
energy upgrade that we create this

00:07:54,530 --> 00:07:59,440
component outside of an angular template

00:07:57,050 --> 00:08:02,720
it will be inside an angularjs delayed

00:07:59,440 --> 00:08:05,930
so so what we need to do now is actually

00:08:02,720 --> 00:08:08,000
tell angularjs how to understand this

00:08:05,930 --> 00:08:10,550
temperature this new angular component

00:08:08,000 --> 00:08:12,410
that's been downgraded so what we need

00:08:10,550 --> 00:08:14,660
to do is import the downgrade component

00:08:12,410 --> 00:08:16,910
helper and use it to create a wrapper

00:08:14,660 --> 00:08:19,730
around the angular component which is

00:08:16,910 --> 00:08:21,200
actually an angularjs component or it's

00:08:19,730 --> 00:08:22,730
actually a directive but it effectively

00:08:21,200 --> 00:08:24,830
looks like a component from the outside

00:08:22,730 --> 00:08:28,270
so now this long great the component can

00:08:24,830 --> 00:08:30,170
be used inside of any angularjs template

00:08:28,270 --> 00:08:35,030
so here you can see we're actually using

00:08:30,170 --> 00:08:39,169
it in our app component template you'll

00:08:35,030 --> 00:08:40,970
notice that although this is in an

00:08:39,169 --> 00:08:43,880
angularjs template we've actually used

00:08:40,970 --> 00:08:45,620
square braces and rounded races on the

00:08:43,880 --> 00:08:47,600
attributes these are not actually

00:08:45,620 --> 00:08:49,430
angular square braces around braces it's

00:08:47,600 --> 00:08:50,860
actually a something that's created by

00:08:49,430 --> 00:08:53,290
the downgrade component

00:08:50,860 --> 00:08:55,060
partly to help us identify whether we're

00:08:53,290 --> 00:08:56,680
using inputs and outputs when we're

00:08:55,060 --> 00:08:59,829
passing through the data between the

00:08:56,680 --> 00:09:03,100
components via the wrapper you'll also

00:08:59,829 --> 00:09:05,920
notice that because this is an angularjs

00:09:03,100 --> 00:09:07,510
template we have to do angularjs things

00:09:05,920 --> 00:09:09,550
on with the attributes so we have to use

00:09:07,510 --> 00:09:10,990
kabab case attributes whereas you'll

00:09:09,550 --> 00:09:12,310
notice that in an angular template this

00:09:10,990 --> 00:09:16,779
would have been removed completed in the

00:09:12,310 --> 00:09:18,399
camel case sense and also we get to get

00:09:16,779 --> 00:09:20,350
rid of the dollar can we have to use

00:09:18,399 --> 00:09:22,120
dollar control rather than if it was

00:09:20,350 --> 00:09:25,540
negative template would just get to use

00:09:22,120 --> 00:09:28,620
the properties directly and if we were

00:09:25,540 --> 00:09:30,820
to have a pipe inside this expression

00:09:28,620 --> 00:09:31,959
we're sorry we can't use a pipe inside

00:09:30,820 --> 00:09:35,829
this expression we would have to use

00:09:31,959 --> 00:09:38,500
angular JS filters final thing that is

00:09:35,829 --> 00:09:40,540
if you wanted to add a directive to this

00:09:38,500 --> 00:09:43,060
element the element is an angularjs

00:09:40,540 --> 00:09:44,500
director element so you cannot use

00:09:43,060 --> 00:09:51,130
things like ng for you have to use

00:09:44,500 --> 00:09:54,430
angularjs directives like ng-repeat cool

00:09:51,130 --> 00:09:56,320
so we've got that newly created angular

00:09:54,430 --> 00:09:59,050
component and we've downgraded it to

00:09:56,320 --> 00:10:00,370
make it available to angularjs so why

00:09:59,050 --> 00:10:06,760
don't we have a go at doing the same

00:10:00,370 --> 00:10:09,040
thing with a service so to do this maybe

00:10:06,760 --> 00:10:12,579
we could add a logo service that will be

00:10:09,040 --> 00:10:14,560
written in angular but we will be able

00:10:12,579 --> 00:10:17,350
to access it from both angularjs and

00:10:14,560 --> 00:10:19,209
angular in order to do this we need to

00:10:17,350 --> 00:10:23,320
understand how we downgrade the service

00:10:19,209 --> 00:10:25,720
so let's look at that similar to what we

00:10:23,320 --> 00:10:27,850
did with the footer component we simply

00:10:25,720 --> 00:10:30,130
register our service with an angular at

00:10:27,850 --> 00:10:32,290
module this makes it available to the

00:10:30,130 --> 00:10:33,880
angular part of the earth there's

00:10:32,290 --> 00:10:36,430
nothing special about this this is just

00:10:33,880 --> 00:10:38,430
angular yeah this is normal the way that

00:10:36,430 --> 00:10:40,810
you would set up a provider for angular

00:10:38,430 --> 00:10:42,850
but what we need to do is make sure that

00:10:40,810 --> 00:10:45,160
the same service is available inside

00:10:42,850 --> 00:10:48,180
angularjs now what we do is we use this

00:10:45,160 --> 00:10:50,740
downgrade injectable helper function and

00:10:48,180 --> 00:10:52,180
all that really does is it makes sure

00:10:50,740 --> 00:10:53,890
that the instance that you get in

00:10:52,180 --> 00:10:55,060
angularjs is exactly the same as the

00:10:53,890 --> 00:11:00,910
instance that you're going to get in

00:10:55,060 --> 00:11:03,720
angular this lets us use logger in all

00:11:00,910 --> 00:11:05,500
our angular code and our angular JS code

00:11:03,720 --> 00:11:10,000
transparently we don't have to care

00:11:05,500 --> 00:11:12,520
about where it's coming from right so we

00:11:10,000 --> 00:11:14,350
have created new components and new

00:11:12,520 --> 00:11:16,360
services in angular and we have

00:11:14,350 --> 00:11:20,410
downgraded them so that they can be used

00:11:16,360 --> 00:11:21,550
in angularjs cool so this is a pretty

00:11:20,410 --> 00:11:23,620
good start and we could actually just

00:11:21,550 --> 00:11:25,600
continue in this way adding more angular

00:11:23,620 --> 00:11:26,830
stuff to our application but what we

00:11:25,600 --> 00:11:28,600
really would like to do is start to

00:11:26,830 --> 00:11:31,150
actually convert some of our angularjs

00:11:28,600 --> 00:11:32,680
code across to angular and we were

00:11:31,150 --> 00:11:34,300
thinking maybe it would be quite cool to

00:11:32,680 --> 00:11:36,370
do the app component because it's got

00:11:34,300 --> 00:11:39,100
it's quite a big important part of our

00:11:36,370 --> 00:11:40,780
application but there may be there might

00:11:39,100 --> 00:11:43,450
be a problem there because the app

00:11:40,780 --> 00:11:45,820
component is using item components in

00:11:43,450 --> 00:11:47,740
its template and it depends on the to-do

00:11:45,820 --> 00:11:50,410
item service both of which are still

00:11:47,740 --> 00:11:52,540
written in angularjs so we've got

00:11:50,410 --> 00:11:54,670
angularjs dependencies of something that

00:11:52,540 --> 00:11:56,320
we want to convert to angular now you

00:11:54,670 --> 00:11:57,610
may be one way of thing about this is

00:11:56,320 --> 00:11:59,110
that we have to convert all the

00:11:57,610 --> 00:12:00,280
dependencies first so we'd have to

00:11:59,110 --> 00:12:01,780
change all of the things across the

00:12:00,280 --> 00:12:04,180
angular before we can convert the app

00:12:01,780 --> 00:12:06,460
component but actually all we need to do

00:12:04,180 --> 00:12:11,590
is upgrade the item components and their

00:12:06,460 --> 00:12:13,870
to-do item service so just to reiterate

00:12:11,590 --> 00:12:15,700
this terminology now we're talking about

00:12:13,870 --> 00:12:16,990
upgrade and upgrade in this context

00:12:15,700 --> 00:12:19,180
means taking something it which is

00:12:16,990 --> 00:12:21,730
angularjs like a component or service

00:12:19,180 --> 00:12:24,700
and making it available to the angular

00:12:21,730 --> 00:12:28,150
part of your hybrid app so we're going

00:12:24,700 --> 00:12:32,110
to start by upgrading the item component

00:12:28,150 --> 00:12:34,210
first so similar to what we did when

00:12:32,110 --> 00:12:36,100
downgrading a component again we would

00:12:34,210 --> 00:12:38,320
create an angular directive that will

00:12:36,100 --> 00:12:43,990
act as a rapper I around our angularjs

00:12:38,320 --> 00:12:46,390
component so we create this item

00:12:43,990 --> 00:12:49,090
component facade directly that will wrap

00:12:46,390 --> 00:12:52,330
our angularjs component by extending the

00:12:49,090 --> 00:12:55,780
upgrade component helper class and we

00:12:52,330 --> 00:12:58,360
also add the directive decorator where

00:12:55,780 --> 00:13:00,640
we specify the selector and the inputs

00:12:58,360 --> 00:13:03,220
or outputs we need to explicitly specify

00:13:00,640 --> 00:13:05,260
inputs and outputs in order for the goal

00:13:03,220 --> 00:13:09,340
to be compatible with ahead of time

00:13:05,260 --> 00:13:10,990
compilation and so the the upgrade

00:13:09,340 --> 00:13:14,920
component actually needs access to the

00:13:10,990 --> 00:13:17,139
element on which the facade is being

00:13:14,920 --> 00:13:18,850
and also it needs access to the injector

00:13:17,139 --> 00:13:21,220
so we're going to inject those into our

00:13:18,850 --> 00:13:23,290
component and then pass it through using

00:13:21,220 --> 00:13:28,360
a call to super to thee to the helper

00:13:23,290 --> 00:13:31,089
class okay so now we simply register a

00:13:28,360 --> 00:13:33,220
very idem components Assad with the

00:13:31,089 --> 00:13:35,500
angular app module which makes it

00:13:33,220 --> 00:13:42,370
available to the angular part of

00:13:35,500 --> 00:13:44,740
application so we've upgraded the item

00:13:42,370 --> 00:13:46,360
component let's do the same with the

00:13:44,740 --> 00:13:47,829
service we've got this to-do item

00:13:46,360 --> 00:13:49,750
service which is written in angularjs

00:13:47,829 --> 00:13:54,250
we'd like to be able to access it from

00:13:49,750 --> 00:13:56,050
angular components and services it's

00:13:54,250 --> 00:13:57,699
already registered with angularjs as we

00:13:56,050 --> 00:13:59,560
said earlier so we don't need to worry

00:13:57,699 --> 00:14:02,320
about that what we're actually going to

00:13:59,560 --> 00:14:04,089
do is is now create a provider inside

00:14:02,320 --> 00:14:09,130
angular which will give us access to the

00:14:04,089 --> 00:14:11,440
same instance ok so this provider will

00:14:09,130 --> 00:14:14,079
use a factory function that will

00:14:11,440 --> 00:14:17,170
retrieve their to-do items instance from

00:14:14,079 --> 00:14:18,910
the angularjs injector also notice that

00:14:17,170 --> 00:14:20,860
in order to ensure that this code is

00:14:18,910 --> 00:14:24,899
compatible with layer to completion we

00:14:20,860 --> 00:14:24,899
need to export the factory function

00:14:25,829 --> 00:14:30,310
right so we're ready to convert we've

00:14:28,089 --> 00:14:33,279
upgraded both of our dependencies so

00:14:30,310 --> 00:14:37,329
let's have a look at what has changed

00:14:33,279 --> 00:14:39,760
when we convert our angular app bangla

00:14:37,329 --> 00:14:45,550
ajs we needed to get their angular JS

00:14:39,760 --> 00:14:46,930
app component across to angular right so

00:14:45,550 --> 00:14:48,640
those people who've got really good

00:14:46,930 --> 00:14:54,100
eyesight could probably show me what the

00:14:48,640 --> 00:14:55,990
differences are here ok it go on now I

00:14:54,100 --> 00:14:57,670
accept that it's pretty difficult to see

00:14:55,990 --> 00:15:01,690
so let's zoom in and take each of the

00:14:57,670 --> 00:15:03,550
bits one by one so first they changes

00:15:01,690 --> 00:15:06,790
that we had to do in the declaration of

00:15:03,550 --> 00:15:08,500
the component are to first instead of

00:15:06,790 --> 00:15:10,360
having a controller as the property of

00:15:08,500 --> 00:15:14,740
the component definition object we

00:15:10,360 --> 00:15:16,839
simply export the class and secondly we

00:15:14,740 --> 00:15:18,970
replace the the component definition

00:15:16,839 --> 00:15:20,740
object with the component decorator and

00:15:18,970 --> 00:15:24,640
we move the selector and a template

00:15:20,740 --> 00:15:25,750
inside that the collector let's have a

00:15:24,640 --> 00:15:28,660
look at what happened inside the

00:15:25,750 --> 00:15:29,949
template again it's pretty simple

00:15:28,660 --> 00:15:34,240
we get to remove all these dollar

00:15:29,949 --> 00:15:36,190
control properties from the code but now

00:15:34,240 --> 00:15:38,350
what we've got is an angular template so

00:15:36,190 --> 00:15:40,690
we need to switch across to all of the

00:15:38,350 --> 00:15:42,160
angular syntax so we need to make sure

00:15:40,690 --> 00:15:44,019
that we're using the correct binding

00:15:42,160 --> 00:15:48,279
syntax with the square brackets and the

00:15:44,019 --> 00:15:50,350
rounded brackets because we're now in an

00:15:48,279 --> 00:15:52,360
angular J an angular template we need to

00:15:50,350 --> 00:15:55,779
use it ng4 and other directives like

00:15:52,360 --> 00:15:57,519
that rather than ng-repeat and you'll

00:15:55,779 --> 00:15:59,529
notice that even though our to-do app

00:15:57,519 --> 00:16:01,360
footer was an angular component we were

00:15:59,529 --> 00:16:03,459
using it inside an angular JS template

00:16:01,360 --> 00:16:05,529
and it was downgraded so we had to use q

00:16:03,459 --> 00:16:08,290
babke to its attributes now we're just

00:16:05,529 --> 00:16:10,180
using the real authentic photo

00:16:08,290 --> 00:16:13,569
components and so we get to use the

00:16:10,180 --> 00:16:16,389
correct attribute bindings and using

00:16:13,569 --> 00:16:18,790
camel case instead of kabob case and

00:16:16,389 --> 00:16:22,839
finally the changes we had to do in the

00:16:18,790 --> 00:16:24,850
class itself first of all we know that

00:16:22,839 --> 00:16:26,649
we no longer need the dollar inject

00:16:24,850 --> 00:16:28,060
property in order for a dependency

00:16:26,649 --> 00:16:31,360
injection to work and the minification

00:16:28,060 --> 00:16:33,630
safe we have renamed the dollar only

00:16:31,360 --> 00:16:36,339
need lifecycle hook to ng or mean it and

00:16:33,630 --> 00:16:38,410
we have also implemented their own in it

00:16:36,339 --> 00:16:42,639
interface in order to get better

00:16:38,410 --> 00:16:44,290
intelligence and compile time sex so at

00:16:42,639 --> 00:16:46,029
the end of all of that we've now got our

00:16:44,290 --> 00:16:47,829
fully up and running hybrid app which we

00:16:46,029 --> 00:16:53,380
could release to Ike and consumers

00:16:47,829 --> 00:16:56,829
they'd be very happy let's recap what we

00:16:53,380 --> 00:16:59,439
did on our road to rehabilitation so we

00:16:56,829 --> 00:17:02,199
configured our application to bootstrap

00:16:59,439 --> 00:17:05,079
both angular and angularjs in the same

00:17:02,199 --> 00:17:07,329
application we managed to take to create

00:17:05,079 --> 00:17:09,159
some new angular components and services

00:17:07,329 --> 00:17:11,110
and downgrade them so we could reuse

00:17:09,159 --> 00:17:13,419
them in our angular code angularjs code

00:17:11,110 --> 00:17:16,120
and we also upgraded some of the

00:17:13,419 --> 00:17:18,419
angularjs components and services so

00:17:16,120 --> 00:17:20,829
that they were available inside angular

00:17:18,419 --> 00:17:22,600
along the way we converted our app

00:17:20,829 --> 00:17:25,419
component across from angularjs

00:17:22,600 --> 00:17:27,130
triangular so using the same steps we

00:17:25,419 --> 00:17:29,140
could continue to convert all the

00:17:27,130 --> 00:17:32,500
angularjs components and services to

00:17:29,140 --> 00:17:34,809
angular until we have no more angularjs

00:17:32,500 --> 00:17:37,120
in our up at which point we can remove

00:17:34,809 --> 00:17:39,490
ng upgrades all together and we have a

00:17:37,120 --> 00:17:41,080
pure angular application when then we're

00:17:39,490 --> 00:17:44,950
clean of angularjs

00:17:41,080 --> 00:17:47,049
move on with allies ok so we've shown

00:17:44,950 --> 00:17:48,760
you the basics of ng upgrade but there

00:17:47,049 --> 00:17:49,919
are a few niceties built in that we

00:17:48,760 --> 00:17:52,750
didn't have time to talk to you about

00:17:49,919 --> 00:17:54,519
out of the box multi slot Cong

00:17:52,750 --> 00:17:57,250
transclusion or projection as it's

00:17:54,519 --> 00:18:00,789
called in in angular is it is totally

00:17:57,250 --> 00:18:04,149
available already Carl seaman recently

00:18:00,789 --> 00:18:06,399
helped us implement interop between ng

00:18:04,149 --> 00:18:07,450
model and the angular control value

00:18:06,399 --> 00:18:08,799
accessor which means that in a

00:18:07,450 --> 00:18:11,289
downgraded component you can actually

00:18:08,799 --> 00:18:13,779
bind directly to that using ng model and

00:18:11,289 --> 00:18:15,700
the protractor team have ensured that

00:18:13,779 --> 00:18:17,740
protractor works with ng upgrade which

00:18:15,700 --> 00:18:19,630
is not that easy because you we needed

00:18:17,740 --> 00:18:22,480
to make sure that both frameworks were

00:18:19,630 --> 00:18:27,880
able to settle before you step onto the

00:18:22,480 --> 00:18:29,710
next end-to-end step in your test so

00:18:27,880 --> 00:18:32,710
what's next ngo break is still in active

00:18:29,710 --> 00:18:34,779
development so in the next few months we

00:18:32,710 --> 00:18:37,510
are going to work on a number of tasks

00:18:34,779 --> 00:18:39,190
with a common theme of improving the

00:18:37,510 --> 00:18:41,860
performance of hybrid applications and

00:18:39,190 --> 00:18:44,110
also ensuring that the overall developer

00:18:41,860 --> 00:18:49,269
experience is much better which might

00:18:44,110 --> 00:18:50,350
involve some documentation I think not

00:18:49,269 --> 00:18:51,309
that I've isn't documentation already

00:18:50,350 --> 00:18:54,340
but we're going to make it even better

00:18:51,309 --> 00:18:56,860
ok so we've managed to release ourselves

00:18:54,340 --> 00:19:01,809
from the addiction of angularjs in small

00:18:56,860 --> 00:19:03,880
steps and where we hold about you might

00:19:01,809 --> 00:19:05,590
be feeling inspires the goal to get up

00:19:03,880 --> 00:19:09,809
there and have a go at upgrading to

00:19:05,590 --> 00:19:12,669
angular it's not so scary I promise and

00:19:09,809 --> 00:19:14,620
we're really interested to find out if

00:19:12,669 --> 00:19:16,179
any of you guys are either interested in

00:19:14,620 --> 00:19:17,590
using energy upgrade or actually using

00:19:16,179 --> 00:19:19,720
already and I've got some feedback for

00:19:17,590 --> 00:19:21,760
us please do get in touch at Twitter

00:19:19,720 --> 00:19:23,380
handles are here will be around for the

00:19:21,760 --> 00:19:25,059
rest of the afternoon just come over and

00:19:23,380 --> 00:19:26,769
have a chat with us I would really like

00:19:25,059 --> 00:19:29,769
to find as many use cases as possible

00:19:26,769 --> 00:19:31,210
that we can that we can use to tech tech

00:19:29,769 --> 00:19:33,370
that the ng upgrade is doing what people

00:19:31,210 --> 00:19:36,330
want and making your lives better so

00:19:33,370 --> 00:19:36,330
thank you very much

00:19:37,600 --> 00:19:40,230
that

00:19:46,350 --> 00:19:48,410

YouTube URL: https://www.youtube.com/watch?v=RyY8Brjs-Hg


