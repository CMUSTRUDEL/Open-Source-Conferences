Title: From Inactive to Reactive with ngrx   Brandon Roberts & Mike Ryan
Publication date: 2017-04-07
Playlist: ng-conf 2017
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,960 --> 00:00:04,710
but my name is Brandon Roberts I'm a

00:00:03,150 --> 00:00:07,110
senior software engineer you can follow

00:00:04,710 --> 00:00:09,150
me on Twitter at Brandon T Robert and

00:00:07,110 --> 00:00:10,769
I'm Mike Ryan I'm also senior software

00:00:09,150 --> 00:00:13,320
engineer and you can follow me at my

00:00:10,769 --> 00:00:14,910
cryin deaths and we both work at synapse

00:00:13,320 --> 00:00:16,590
they're an industrial Internet of Things

00:00:14,910 --> 00:00:18,900
company where we get to build

00:00:16,590 --> 00:00:22,589
high-performance reactive user

00:00:18,900 --> 00:00:24,419
interfaces and angular so today we're

00:00:22,589 --> 00:00:26,849
going to be taking a nap from inactive

00:00:24,419 --> 00:00:30,059
to reactive and if you want to follow

00:00:26,849 --> 00:00:31,919
along you can follow us on indirect it's

00:00:30,059 --> 00:00:34,739
a community project started by Rob

00:00:31,919 --> 00:00:37,140
Wormald we build small reactive

00:00:34,739 --> 00:00:38,670
libraries for angular so we look at what

00:00:37,140 --> 00:00:40,649
are the hard problems when trying to

00:00:38,670 --> 00:00:43,410
build reactive applications and how can

00:00:40,649 --> 00:00:46,620
we build small concise libraries to

00:00:43,410 --> 00:00:48,960
solve those problems you can find us at

00:00:46,620 --> 00:00:50,699
github comm class in grx all the

00:00:48,960 --> 00:00:54,120
products are we talking about today can

00:00:50,699 --> 00:00:55,769
be found there if you want to work

00:00:54,120 --> 00:00:58,199
through the workshop with us you can

00:00:55,769 --> 00:01:01,170
just clone the rehab the repo it's at

00:00:58,199 --> 00:01:03,659
github comm slash code sequence /mg rx

00:01:01,170 --> 00:01:07,710
workshop we will post the slides there

00:01:03,659 --> 00:01:09,479
after the talk today so once you get it

00:01:07,710 --> 00:01:11,460
all set up the app that we're gonna be

00:01:09,479 --> 00:01:14,369
starting on is going to look like this

00:01:11,460 --> 00:01:16,500
it's a simple book search app we can

00:01:14,369 --> 00:01:19,530
type in a term and you can get book

00:01:16,500 --> 00:01:22,320
results back but this application is

00:01:19,530 --> 00:01:24,030
currently rather inactive and the way it

00:01:22,320 --> 00:01:27,479
works is we have this search page

00:01:24,030 --> 00:01:30,180
component and it has a child a search

00:01:27,479 --> 00:01:32,070
input when the user queries for books is

00:01:30,180 --> 00:01:34,890
going to emit an output event to the

00:01:32,070 --> 00:01:36,930
search page the search tag is going to

00:01:34,890 --> 00:01:39,240
take that query and that's the google

00:01:36,930 --> 00:01:41,969
books api for a list of books that match

00:01:39,240 --> 00:01:43,469
that query once it gets results back

00:01:41,969 --> 00:01:45,420
it's going to flow that to a search

00:01:43,469 --> 00:01:48,840
results component and display all the

00:01:45,420 --> 00:01:50,850
books but let's imagine we want to add a

00:01:48,840 --> 00:01:52,560
new feature we want to show the number

00:01:50,850 --> 00:01:55,560
of results found when you search for

00:01:52,560 --> 00:01:58,229
books we don't want to make another HTTP

00:01:55,560 --> 00:02:00,030
request to get this information but

00:01:58,229 --> 00:02:02,880
ideally we want to keep the count in

00:02:00,030 --> 00:02:06,079
sync if we're showing 60 books and the

00:02:02,880 --> 00:02:08,310
counter needs to say 60 results found

00:02:06,079 --> 00:02:10,500
well if we take our application as

00:02:08,310 --> 00:02:12,670
exists today we can imagine how we might

00:02:10,500 --> 00:02:14,200
flow this through inputs and outputs

00:02:12,670 --> 00:02:16,270
the search page would still get a query

00:02:14,200 --> 00:02:18,310
from the search input we'd still reach

00:02:16,270 --> 00:02:20,860
out to the Google Books API to get books

00:02:18,310 --> 00:02:23,020
back and we can flow this down to a new

00:02:20,860 --> 00:02:25,960
search results count component that will

00:02:23,020 --> 00:02:28,060
write today and this would work for this

00:02:25,960 --> 00:02:29,590
simple app but we often don't get the

00:02:28,060 --> 00:02:31,990
luxury of building simple apps we're

00:02:29,590 --> 00:02:34,000
building complex apps and so imagine if

00:02:31,990 --> 00:02:36,310
we had a much richer component hierarchy

00:02:34,000 --> 00:02:36,700
in that search results in search results

00:02:36,310 --> 00:02:38,950
count

00:02:36,700 --> 00:02:41,410
we're deeply nested children of the

00:02:38,950 --> 00:02:43,540
parent well for those book results to

00:02:41,410 --> 00:02:45,459
flow down this component tree we'd have

00:02:43,540 --> 00:02:47,410
to cross a lot of mid to your components

00:02:45,459 --> 00:02:50,190
and this is a problem we see come up in

00:02:47,410 --> 00:02:52,480
a lot of these rich complex applications

00:02:50,190 --> 00:02:53,920
so what we need to be able to do is we

00:02:52,480 --> 00:02:56,110
need to build a shared state across

00:02:53,920 --> 00:02:58,060
components we don't want to use inputs

00:02:56,110 --> 00:03:00,520
to share the results we want to go

00:02:58,060 --> 00:03:02,260
outside of the input tree and share

00:03:00,520 --> 00:03:05,070
results so those mid tier components

00:03:02,260 --> 00:03:07,180
don't have to even think about the books

00:03:05,070 --> 00:03:10,450
so that's what the first library going

00:03:07,180 --> 00:03:12,520
to talk about comes in in DRX store it's

00:03:10,450 --> 00:03:15,459
an rxjs powered State management

00:03:12,520 --> 00:03:18,489
container for angular apps it's inspired

00:03:15,459 --> 00:03:20,080
heavily based on redux and the way it

00:03:18,489 --> 00:03:22,000
works is we're going to have components

00:03:20,080 --> 00:03:24,400
and when the user interact with these

00:03:22,000 --> 00:03:26,290
components we're going to take those

00:03:24,400 --> 00:03:29,230
events and we're going to model them in

00:03:26,290 --> 00:03:30,580
a consistent way using actions we're

00:03:29,230 --> 00:03:32,890
going to write a reducer function today

00:03:30,580 --> 00:03:35,500
that takes those actions and reduces

00:03:32,890 --> 00:03:37,060
them into States then that state is

00:03:35,500 --> 00:03:40,150
going to be delivered to our components

00:03:37,060 --> 00:03:42,730
in an observable service so first let's

00:03:40,150 --> 00:03:45,280
talk about actions in order to represent

00:03:42,730 --> 00:03:47,530
all of our UI events and HTTP responses

00:03:45,280 --> 00:03:50,380
in a consistent way we have to add hair

00:03:47,530 --> 00:03:52,180
to this action interface and an action

00:03:50,380 --> 00:03:54,580
interface has one required property a

00:03:52,180 --> 00:03:56,080
type and that type needs to be a string

00:03:54,580 --> 00:03:59,110
and it needs to be unique amongst all

00:03:56,080 --> 00:04:01,120
actions in our application we can

00:03:59,110 --> 00:04:03,580
optionally have a payload and this can

00:04:01,120 --> 00:04:05,500
have any kind of data and our actions it

00:04:03,580 --> 00:04:07,180
might have the search query or it might

00:04:05,500 --> 00:04:10,180
have a list of results that we get back

00:04:07,180 --> 00:04:11,320
to the Google Books API so let's go

00:04:10,180 --> 00:04:13,540
ahead and dive into the code and

00:04:11,320 --> 00:04:21,430
represent our UI events and HTTP

00:04:13,540 --> 00:04:24,940
responses as actions okay so to model

00:04:21,430 --> 00:04:26,460
our UI events and HTTP responses actions

00:04:24,940 --> 00:04:29,380
we'll go ahead and create those

00:04:26,460 --> 00:04:33,810
so I go into the app folder and I'll

00:04:29,380 --> 00:04:36,190
create a file called search actions and

00:04:33,810 --> 00:04:44,350
first we'll import a few things that

00:04:36,190 --> 00:04:46,480
we'll need so first I've imported the

00:04:44,350 --> 00:04:48,730
action interface from inject store that

00:04:46,480 --> 00:04:51,370
gives you the interface that we have to

00:04:48,730 --> 00:04:53,620
use the type and I've also imported the

00:04:51,370 --> 00:04:56,110
book book that I've created previously

00:04:53,620 --> 00:04:59,220
that provides an interface for the model

00:04:56,110 --> 00:05:04,050
that is returned by the Google Books API

00:04:59,220 --> 00:05:04,050
so next we'll create some action types

00:05:05,100 --> 00:05:11,350
so here i've created two action types

00:05:09,310 --> 00:05:13,180
the first one being search which are

00:05:11,350 --> 00:05:15,850
defined in the string which will use

00:05:13,180 --> 00:05:19,000
interactions later and search success

00:05:15,850 --> 00:05:21,280
for the search we use the search when we

00:05:19,000 --> 00:05:24,580
enter the search query before we hit the

00:05:21,280 --> 00:05:27,580
API and then once we hit the API later

00:05:24,580 --> 00:05:31,480
we'll return those search results using

00:05:27,580 --> 00:05:33,160
the search assist action type now as you

00:05:31,480 --> 00:05:35,680
say that each one of these used to be

00:05:33,160 --> 00:05:37,390
unique because over time you have more

00:05:35,680 --> 00:05:39,550
actions that you want these actions to

00:05:37,390 --> 00:05:42,910
be they'll need to be unique and you

00:05:39,550 --> 00:05:46,120
want to be easily readable and you also

00:05:42,910 --> 00:05:48,340
as you see here I have the books I've

00:05:46,120 --> 00:05:50,650
also added a namespace name books

00:05:48,340 --> 00:05:51,700
because you'll have a lot of actions and

00:05:50,650 --> 00:05:53,170
you want to kind of group those

00:05:51,700 --> 00:05:56,440
different actions according to the

00:05:53,170 --> 00:06:02,320
things that you'll be doing so next I'll

00:05:56,440 --> 00:06:04,510
create our actions so we have the search

00:06:02,320 --> 00:06:06,670
action that implements the search that

00:06:04,510 --> 00:06:09,490
implements the action interface it has

00:06:06,670 --> 00:06:11,820
the read-only type of search and it also

00:06:09,490 --> 00:06:13,930
has a payload which will be a stream

00:06:11,820 --> 00:06:16,660
that will come back when we in our

00:06:13,930 --> 00:06:19,660
search query and we also have search

00:06:16,660 --> 00:06:22,480
success which uses a search to search

00:06:19,660 --> 00:06:25,240
success type but this one provides a

00:06:22,480 --> 00:06:27,970
payload which is an array of books now

00:06:25,240 --> 00:06:30,760
if you're familiar with Redux you can

00:06:27,970 --> 00:06:34,030
use plain JavaScript objects when you're

00:06:30,760 --> 00:06:36,310
defining actions but we're using classes

00:06:34,030 --> 00:06:39,010
because we can take advantage of type

00:06:36,310 --> 00:06:39,999
scripts powerful type checking and also

00:06:39,010 --> 00:06:42,279
it gives you hell

00:06:39,999 --> 00:06:44,079
and your IDE when you're dispatching

00:06:42,279 --> 00:06:45,789
these actions to make sure that you're

00:06:44,079 --> 00:06:49,689
entering the right data for the payload

00:06:45,789 --> 00:06:53,619
if you need one next will they export a

00:06:49,689 --> 00:06:58,239
type that exports all of these actions

00:06:53,619 --> 00:07:00,729
that we can use in our reducer and which

00:06:58,239 --> 00:07:03,279
is called this type all so it'll give us

00:07:00,729 --> 00:07:06,489
that that action we can go against when

00:07:03,279 --> 00:07:12,099
we do our reducer and I we reduce our

00:07:06,489 --> 00:07:14,559
state later on so now that we've

00:07:12,099 --> 00:07:16,269
represented our UI vinson HTV responses

00:07:14,559 --> 00:07:18,999
as actions we need to move on to the

00:07:16,269 --> 00:07:21,549
reducer and this reducer is a special

00:07:18,999 --> 00:07:22,929
function it takes in the previous state

00:07:21,549 --> 00:07:25,029
and an action that we're going to

00:07:22,929 --> 00:07:27,099
dispatch and returns the new state and

00:07:25,029 --> 00:07:28,539
while it's a simple interface I want to

00:07:27,099 --> 00:07:31,269
point out a few gotchas when you're

00:07:28,539 --> 00:07:33,249
building this the first when our

00:07:31,269 --> 00:07:35,169
application starts up State is going to

00:07:33,249 --> 00:07:37,739
be undefined so this reducer function

00:07:35,169 --> 00:07:40,629
needs to know how to initialize State

00:07:37,739 --> 00:07:44,079
the second is it always needs to return

00:07:40,629 --> 00:07:46,179
a new state object it needs to be pure

00:07:44,079 --> 00:07:48,309
in that regard and returned in a mutable

00:07:46,179 --> 00:07:52,019
state so that we're not mutating

00:07:48,309 --> 00:07:55,029
previous instances of that state object

00:07:52,019 --> 00:07:56,949
we also don't want to write one reducer

00:07:55,029 --> 00:07:58,899
for our entire application as we feel

00:07:56,949 --> 00:08:00,639
complex applications we're going to have

00:07:58,899 --> 00:08:02,829
a lot of state to manage and if we try

00:08:00,639 --> 00:08:05,709
to do that in one reducer that would get

00:08:02,829 --> 00:08:08,529
unwieldly really quickly so in grx tor

00:08:05,709 --> 00:08:10,599
abstracts away that application reducer

00:08:08,529 --> 00:08:13,419
and instead we're going to delegate

00:08:10,599 --> 00:08:16,360
state and actions to child reducers that

00:08:13,419 --> 00:08:17,739
only work on one piece of the state so

00:08:16,360 --> 00:08:19,869
today we're going to do the book reducer

00:08:17,739 --> 00:08:21,729
but as we might expand this to add

00:08:19,869 --> 00:08:24,069
authentication and layout in the future

00:08:21,729 --> 00:08:25,869
we could add new reducers to manage

00:08:24,069 --> 00:08:27,729
their own individual slices of state and

00:08:25,869 --> 00:08:30,249
you can think of these sort of like

00:08:27,729 --> 00:08:31,449
tables in a database so when they create

00:08:30,249 --> 00:08:34,120
their state they're going to be

00:08:31,449 --> 00:08:37,719
aggregated into one large state object

00:08:34,120 --> 00:08:39,219
called the application state so let's go

00:08:37,719 --> 00:08:42,870
ahead and write that book reducer and

00:08:39,219 --> 00:08:42,870
get it registered with indirect store

00:08:45,080 --> 00:08:51,150
okay so we've defined our action and now

00:08:49,050 --> 00:08:58,380
we want to create a reducer so I will

00:08:51,150 --> 00:09:00,210
create a file called search reducer and

00:08:58,380 --> 00:09:04,980
we'll also need to import some things

00:09:00,210 --> 00:09:07,140
there so I've imported the book model

00:09:04,980 --> 00:09:10,470
again and imported the search actions

00:09:07,140 --> 00:09:12,660
that we just created next we'll need to

00:09:10,470 --> 00:09:18,960
define an interface for this piece of

00:09:12,660 --> 00:09:21,270
state so for this we'll just define this

00:09:18,960 --> 00:09:23,880
interface as state and it has two

00:09:21,270 --> 00:09:25,350
properties the search term which is what

00:09:23,880 --> 00:09:27,330
we enter when we enter the search and

00:09:25,350 --> 00:09:30,630
the results that are returned when we

00:09:27,330 --> 00:09:34,230
return our array of books now as Mike

00:09:30,630 --> 00:09:36,600
stated this reducer will be initially

00:09:34,230 --> 00:09:45,570
undefined so we'll need to give this

00:09:36,600 --> 00:09:47,460
state and initial state so we will

00:09:45,570 --> 00:09:50,160
define initial state with search times

00:09:47,460 --> 00:09:52,530
as an empty string and an empty array of

00:09:50,160 --> 00:09:56,070
results but it will be populated later

00:09:52,530 --> 00:10:03,330
when we dispatch actions next we'll do

00:09:56,070 --> 00:10:06,060
the reducer so the reducer is the

00:10:03,330 --> 00:10:07,890
function of state it takes the current

00:10:06,060 --> 00:10:11,250
state in and initially we'll have our

00:10:07,890 --> 00:10:12,960
initial state and the current action and

00:10:11,250 --> 00:10:15,450
you see we have our search actions that

00:10:12,960 --> 00:10:17,339
all that we export it which has all the

00:10:15,450 --> 00:10:20,220
actions that we want to handle in this

00:10:17,339 --> 00:10:23,310
reducer and we'll return the new state

00:10:20,220 --> 00:10:24,600
and since we're going to key off certain

00:10:23,310 --> 00:10:26,550
actions we'll just use a switch

00:10:24,600 --> 00:10:30,510
statement to go through each action they

00:10:26,550 --> 00:10:32,460
want to handle so in our first in our

00:10:30,510 --> 00:10:35,370
first case we're handling the search

00:10:32,460 --> 00:10:38,490
terms which is what is entered when they

00:10:35,370 --> 00:10:40,860
when they perform their query so we want

00:10:38,490 --> 00:10:43,410
to return a new object and we'll take

00:10:40,860 --> 00:10:45,930
the current state and we use a spread

00:10:43,410 --> 00:10:47,520
operator to copy those properties from

00:10:45,930 --> 00:10:50,760
the current state into that new object

00:10:47,520 --> 00:10:53,160
and use the payload which is a stirring

00:10:50,760 --> 00:10:56,040
to modify the search terms and put that

00:10:53,160 --> 00:10:57,089
data into the store we also have the

00:10:56,040 --> 00:10:59,279
search success

00:10:57,089 --> 00:11:01,019
which does the same thing of copying the

00:10:59,279 --> 00:11:03,959
state current state properties into new

00:11:01,019 --> 00:11:05,749
objects and returning a payload will use

00:11:03,959 --> 00:11:10,289
the payload which is an array of books

00:11:05,749 --> 00:11:13,679
now we'll have multiple reducers as your

00:11:10,289 --> 00:11:17,039
application grows but not all reducers

00:11:13,679 --> 00:11:18,929
handle all actions but we also we always

00:11:17,039 --> 00:11:20,489
need to return a state whether you're

00:11:18,929 --> 00:11:23,639
handling the action in the reducer or

00:11:20,489 --> 00:11:25,439
not so by default we'll just if you're

00:11:23,639 --> 00:11:29,819
not handling the action here you just

00:11:25,439 --> 00:11:32,159
return the state as it was passed in so

00:11:29,819 --> 00:11:34,759
now that we've defined our search

00:11:32,159 --> 00:11:38,429
reducer we'll define an overall

00:11:34,759 --> 00:11:41,939
application state overall state for

00:11:38,429 --> 00:11:48,569
application so I'll create a new file

00:11:41,939 --> 00:11:51,139
called reducers and we'll import the

00:11:48,569 --> 00:11:54,179
search reducer that we just created now

00:11:51,139 --> 00:11:56,309
we need to model our overall application

00:11:54,179 --> 00:12:01,949
state kind of similarly to the way that

00:11:56,309 --> 00:12:03,449
we did the search State and it's just

00:12:01,949 --> 00:12:05,429
another interface that we can use to

00:12:03,449 --> 00:12:07,939
type against when we're creating or

00:12:05,429 --> 00:12:10,949
selecting state and dispatching actions

00:12:07,939 --> 00:12:13,019
now we'll also create an object that

00:12:10,949 --> 00:12:20,459
contains all of our reducers that are

00:12:13,019 --> 00:12:22,889
combined together for delegation and so

00:12:20,459 --> 00:12:26,369
this is our reducer object which will

00:12:22,889 --> 00:12:29,519
make up our application state so now

00:12:26,369 --> 00:12:32,369
that we have our reducers defined we can

00:12:29,519 --> 00:12:35,849
register that with an application so

00:12:32,369 --> 00:12:39,509
I'll go into the app module and I'll

00:12:35,849 --> 00:12:42,389
import a couple of things the store

00:12:39,509 --> 00:12:44,789
module which is an engine module that is

00:12:42,389 --> 00:12:46,979
integrated angular that provides the

00:12:44,789 --> 00:12:49,679
store and we'll also import the reducers

00:12:46,979 --> 00:12:51,029
that we'll need to provide our state

00:12:49,679 --> 00:12:53,549
with that global to provide an

00:12:51,029 --> 00:12:57,509
application with that global State so I

00:12:53,549 --> 00:13:00,299
go to the imports and I'll register our

00:12:57,509 --> 00:13:02,549
reducers and the application given us

00:13:00,299 --> 00:13:06,049
that global store service and state

00:13:02,549 --> 00:13:06,049
management that we'll use later on

00:13:07,240 --> 00:13:11,990
okay so we've written our actions and

00:13:10,160 --> 00:13:13,880
we've written our reducer but now we

00:13:11,990 --> 00:13:15,590
need to inject the store service into

00:13:13,880 --> 00:13:18,230
our components to bring it all together

00:13:15,590 --> 00:13:20,120
the store is a special service and it's

00:13:18,230 --> 00:13:22,790
an observable of our application state

00:13:20,120 --> 00:13:26,000
it has one special operator the select

00:13:22,790 --> 00:13:27,560
operator because we have one large state

00:13:26,000 --> 00:13:29,570
object components are only going to be

00:13:27,560 --> 00:13:32,480
concerned with some small piece of that

00:13:29,570 --> 00:13:34,430
state object so select take the function

00:13:32,480 --> 00:13:36,590
that allows you to select that part of

00:13:34,430 --> 00:13:39,950
state and it returns an observable of

00:13:36,590 --> 00:13:41,690
only changes to that piece of State it

00:13:39,950 --> 00:13:43,220
also has a dispatch method and this is

00:13:41,690 --> 00:13:46,760
how components are going to dispatch

00:13:43,220 --> 00:13:48,590
actions to the store so let's go ahead

00:13:46,760 --> 00:13:50,270
and inject the store into our components

00:13:48,590 --> 00:14:00,500
and start dispatching actions and

00:13:50,270 --> 00:14:03,050
selecting state okay so since we have

00:14:00,500 --> 00:14:04,790
our store registered within our

00:14:03,050 --> 00:14:06,890
application we can go into the search

00:14:04,790 --> 00:14:09,230
component and import some of the things

00:14:06,890 --> 00:14:16,940
that we'll need to dispatch actions and

00:14:09,230 --> 00:14:19,040
select state first thing is the store

00:14:16,940 --> 00:14:20,270
service which is available to anywhere

00:14:19,040 --> 00:14:23,150
within our application that we can

00:14:20,270 --> 00:14:24,770
inject we also have the search actions

00:14:23,150 --> 00:14:27,980
which includes a search and the search

00:14:24,770 --> 00:14:30,410
success we've also imported everything

00:14:27,980 --> 00:14:33,230
from the reducers folder which gives us

00:14:30,410 --> 00:14:37,190
the state interface so that we can use

00:14:33,230 --> 00:14:41,090
that to type against the store next

00:14:37,190 --> 00:14:48,290
we'll update some of our components to

00:14:41,090 --> 00:14:50,480
use the store so first we have the value

00:14:48,290 --> 00:14:53,270
which isn't we haven't input on our

00:14:50,480 --> 00:14:55,250
search book search component which uses

00:14:53,270 --> 00:14:57,950
terms which will be delivered as an

00:14:55,250 --> 00:15:00,770
observable unwired up to the store but

00:14:57,950 --> 00:15:02,990
we haven't gotten that for yet we also

00:15:00,770 --> 00:15:08,030
say they wanted to create account the

00:15:02,990 --> 00:15:11,480
results to be displayed so I'll just

00:15:08,030 --> 00:15:15,920
create a simple search results cart that

00:15:11,480 --> 00:15:18,530
displays the number of results also the

00:15:15,920 --> 00:15:20,720
books we have defined as a simple array

00:15:18,530 --> 00:15:22,750
but once it's wired up to the store

00:15:20,720 --> 00:15:30,019
it'll be delivered as an observer also

00:15:22,750 --> 00:15:36,740
so we just used async pipe use async

00:15:30,019 --> 00:15:40,399
pipe to subscribe that to the store next

00:15:36,740 --> 00:15:43,310
we'll update our class variables to be

00:15:40,399 --> 00:15:52,279
able to get to select those pieces of

00:15:43,310 --> 00:15:54,620
state so we have our search terms which

00:15:52,279 --> 00:15:58,459
is wired up to our search input we have

00:15:54,620 --> 00:16:04,879
our array of books and our account next

00:15:58,459 --> 00:16:08,240
we need to inject store so we have our

00:16:04,879 --> 00:16:10,550
store injected so now I want to update

00:16:08,240 --> 00:16:14,360
the on search method so that we can

00:16:10,550 --> 00:16:16,519
dispatch actions dispatch access to the

00:16:14,360 --> 00:16:23,600
store when we perform our search and get

00:16:16,519 --> 00:16:26,809
our search results back so now instead

00:16:23,600 --> 00:16:29,649
of just doing the search locally in our

00:16:26,809 --> 00:16:32,209
component when you enter a search query

00:16:29,649 --> 00:16:33,790
we have the search terms we dispatch an

00:16:32,209 --> 00:16:36,379
action that you're performing a search

00:16:33,790 --> 00:16:39,139
will go and make the network request in

00:16:36,379 --> 00:16:41,180
our component and once those results

00:16:39,139 --> 00:16:43,699
come back we'll dispatch

00:16:41,180 --> 00:16:49,339
those act dispatched those results to

00:16:43,699 --> 00:16:49,970
the store so now that data will be in

00:16:49,339 --> 00:16:52,309
the store

00:16:49,970 --> 00:16:54,610
we can add some selectors to get that

00:16:52,309 --> 00:16:54,610
data out

00:16:59,220 --> 00:17:05,890
so as we stated the store has a select

00:17:03,190 --> 00:17:09,970
method that takes a callback function

00:17:05,890 --> 00:17:11,770
and as Mike stated the thing about the

00:17:09,970 --> 00:17:13,900
select is that you can select pieces of

00:17:11,770 --> 00:17:16,689
state but even if your state is changing

00:17:13,900 --> 00:17:18,970
over time these observables will only

00:17:16,689 --> 00:17:21,490
emit updates if something that you

00:17:18,970 --> 00:17:23,920
selected changes so only one two search

00:17:21,490 --> 00:17:33,900
terms change is when we will emit a new

00:17:23,920 --> 00:17:33,900
event a new update so now we save that

00:17:33,930 --> 00:17:42,160
we can go back to our application

00:17:37,960 --> 00:17:45,700
I want to reload we can perform a search

00:17:42,160 --> 00:17:47,830
and still get that same data make that

00:17:45,700 --> 00:17:52,360
request but we're pushing that data into

00:17:47,830 --> 00:17:54,340
the store so our UI can react to what's

00:17:52,360 --> 00:18:00,460
in the store as opposed to storing that

00:17:54,340 --> 00:18:02,440
data locally in the component now since

00:18:00,460 --> 00:18:06,120
we've already wired up our data into the

00:18:02,440 --> 00:18:08,110
store we can move our search results

00:18:06,120 --> 00:18:11,470
into a separate car because we can

00:18:08,110 --> 00:18:18,160
access the store from anywhere so let's

00:18:11,470 --> 00:18:20,460
go ahead and do that so create a new

00:18:18,160 --> 00:18:20,460
component

00:18:24,610 --> 00:18:36,190
car results count and I go to the

00:18:33,130 --> 00:18:38,830
results count and our import two things

00:18:36,190 --> 00:18:44,050
we'll need to sort to wire up that

00:18:38,830 --> 00:18:46,620
component into the store so input our

00:18:44,050 --> 00:18:50,200
observable for type information in store

00:18:46,620 --> 00:18:56,680
and also the store service and our

00:18:50,200 --> 00:18:58,780
reducers so we'll update the template to

00:18:56,680 --> 00:19:02,500
use that card information that we have

00:18:58,780 --> 00:19:08,080
previously in the search component we'll

00:19:02,500 --> 00:19:09,910
also add some styles and so our count

00:19:08,080 --> 00:19:15,010
variable is still read at the moment but

00:19:09,910 --> 00:19:22,390
we'll go ahead and define that also and

00:19:15,010 --> 00:19:26,020
also inject store and now I'll just add

00:19:22,390 --> 00:19:30,070
the selector to get that count to select

00:19:26,020 --> 00:19:32,770
that count from the store and now that

00:19:30,070 --> 00:19:35,950
we have that component I can go back to

00:19:32,770 --> 00:19:39,040
the search component and use it instead

00:19:35,950 --> 00:19:40,840
of having it in this component which

00:19:39,040 --> 00:19:44,710
gives that component less responsibility

00:19:40,840 --> 00:19:48,060
because the count can subscribe to the

00:19:44,710 --> 00:19:48,060
store and get that same data

00:19:52,270 --> 00:20:04,270
so I'll create the app result count

00:19:56,110 --> 00:20:14,590
component and then I can remove that

00:20:04,270 --> 00:20:17,290
count from the search component now I

00:20:14,590 --> 00:20:19,870
have two components that are wired up to

00:20:17,290 --> 00:20:23,170
the store and I can still perform the

00:20:19,870 --> 00:20:28,660
same search and still get the same

00:20:23,170 --> 00:20:30,309
results okay so we're almost done

00:20:28,660 --> 00:20:32,800
implementing store but there's still one

00:20:30,309 --> 00:20:35,290
part that's not quite finished

00:20:32,800 --> 00:20:37,690
right now these components are using

00:20:35,290 --> 00:20:40,150
selects to select the state they care

00:20:37,690 --> 00:20:41,740
about this is still too much

00:20:40,150 --> 00:20:43,300
responsibility for our components we

00:20:41,740 --> 00:20:45,520
want to write really clear concise

00:20:43,300 --> 00:20:48,490
components that only care about wiring

00:20:45,520 --> 00:20:50,200
up data and dispatching actions so

00:20:48,490 --> 00:20:51,730
instead of having them implement those

00:20:50,200 --> 00:20:55,330
select functions we're going to refactor

00:20:51,730 --> 00:20:57,490
those out into selectors and a selector

00:20:55,330 --> 00:21:00,220
is a function that takes app state and

00:20:57,490 --> 00:21:02,230
return some selected State and by

00:21:00,220 --> 00:21:03,670
refactoring these out into functions

00:21:02,230 --> 00:21:06,250
that we can share across components

00:21:03,670 --> 00:21:07,720
we're reducing the responsibility of our

00:21:06,250 --> 00:21:10,450
components and we can share them across

00:21:07,720 --> 00:21:14,130
our entire application so let's refactor

00:21:10,450 --> 00:21:14,130
those the selector functions out

00:21:17,910 --> 00:21:23,580
so like I said we have our selectors

00:21:20,700 --> 00:21:26,460
here callback function but we want to

00:21:23,580 --> 00:21:28,950
store our selectors where our state is

00:21:26,460 --> 00:21:31,830
defined which will give us a an easy

00:21:28,950 --> 00:21:33,450
place to go to reference that so I'll go

00:21:31,830 --> 00:21:40,560
ahead and add and create some selectors

00:21:33,450 --> 00:21:43,080
and then update our components so the

00:21:40,560 --> 00:21:44,460
selectors want to follow a convention

00:21:43,080 --> 00:21:46,890
when you're selecting data from state

00:21:44,460 --> 00:21:49,200
using selector functions so I'm going to

00:21:46,890 --> 00:21:51,870
have three selector functions here one

00:21:49,200 --> 00:21:53,520
for select results one to select the

00:21:51,870 --> 00:21:57,420
count which is the length of the array

00:21:53,520 --> 00:22:00,090
of books and one for search terms so now

00:21:57,420 --> 00:22:02,790
I can go I'll save that and I can go and

00:22:00,090 --> 00:22:05,250
update my two components the search

00:22:02,790 --> 00:22:07,230
component to use those selectors so it's

00:22:05,250 --> 00:22:11,760
less responsibility of the component to

00:22:07,230 --> 00:22:13,680
know how to get those get that data so

00:22:11,760 --> 00:22:15,840
I'll use and I've already we've already

00:22:13,680 --> 00:22:19,380
imported everything from reducers so I

00:22:15,840 --> 00:22:30,210
just used from root to select the search

00:22:19,380 --> 00:22:33,240
terms and also from root to select the

00:22:30,210 --> 00:22:36,540
search results and then I'll go into the

00:22:33,240 --> 00:22:40,220
results count component and use a

00:22:36,540 --> 00:22:40,220
selector function there also

00:22:46,180 --> 00:22:52,140
so now our components atlas

00:22:49,540 --> 00:22:56,140
responsibility of how to get that data

00:22:52,140 --> 00:22:58,750
but as I stated we can still perform the

00:22:56,140 --> 00:23:04,030
same search it still works exactly the

00:22:58,750 --> 00:23:06,070
same that's in direct store but there's

00:23:04,030 --> 00:23:09,460
still some let's recap what we've done

00:23:06,070 --> 00:23:11,830
so far we've said that all UI events and

00:23:09,460 --> 00:23:15,310
all HTTP requests can be modeled using a

00:23:11,830 --> 00:23:17,380
consistent action interface we wrote a

00:23:15,310 --> 00:23:20,370
book reducer to manage the book state it

00:23:17,380 --> 00:23:22,870
takes in actions and returns new state

00:23:20,370 --> 00:23:27,330
this state is delivered to all

00:23:22,870 --> 00:23:27,330
components using a shared state service

00:23:27,510 --> 00:23:31,270
so if we look at what our application

00:23:29,680 --> 00:23:33,400
looks like at this point we now have

00:23:31,270 --> 00:23:35,320
store who's sort of the single source of

00:23:33,400 --> 00:23:36,970
truth in this application he's

00:23:35,320 --> 00:23:39,520
delivering state updates to the search

00:23:36,970 --> 00:23:41,650
page in the search results count search

00:23:39,520 --> 00:23:45,160
page gives the results and the search

00:23:41,650 --> 00:23:47,380
input term to its components the search

00:23:45,160 --> 00:23:50,170
input when it emits a query is rather

00:23:47,380 --> 00:23:51,460
than an action and dispatch to store but

00:23:50,170 --> 00:23:53,470
there's one part here it's still a

00:23:51,460 --> 00:23:55,750
little awkward and that's that the

00:23:53,470 --> 00:23:59,440
search page is still making that request

00:23:55,750 --> 00:24:01,770
to the Google books API and we can

00:23:59,440 --> 00:24:04,000
consider this search to be a side effect

00:24:01,770 --> 00:24:06,610
so a side effect is any code that

00:24:04,000 --> 00:24:08,740
interacts with the outside world you can

00:24:06,610 --> 00:24:11,050
think of HTTP requests WebSocket

00:24:08,740 --> 00:24:12,910
messages offline data storage and even

00:24:11,050 --> 00:24:15,220
time functions as being code that

00:24:12,910 --> 00:24:16,870
produces side effects you don't know how

00:24:15,220 --> 00:24:20,620
they're going to behave when you run

00:24:16,870 --> 00:24:22,360
that code so if we write our components

00:24:20,620 --> 00:24:24,160
without side effects and isolate them

00:24:22,360 --> 00:24:26,590
out from our component tree and make

00:24:24,160 --> 00:24:28,900
them easier to test and the reason for

00:24:26,590 --> 00:24:32,620
that is if we think of state as a

00:24:28,900 --> 00:24:35,620
function that produces our UI and for

00:24:32,620 --> 00:24:37,930
any state we're showing the same UI we

00:24:35,620 --> 00:24:39,370
can make test assertions against that we

00:24:37,930 --> 00:24:41,710
can say how does their application

00:24:39,370 --> 00:24:43,690
behave underneath this state or what

00:24:41,710 --> 00:24:48,130
about this state and they're pure

00:24:43,690 --> 00:24:49,420
representations of that state tree so we

00:24:48,130 --> 00:24:52,030
need to be able to isolate our side

00:24:49,420 --> 00:24:54,190
effects from our components and that's

00:24:52,030 --> 00:24:56,410
where indirect effect comes in it's a

00:24:54,190 --> 00:24:57,700
side effect model for ng rx door that

00:24:56,410 --> 00:24:58,809
allows you to write long-running

00:24:57,700 --> 00:25:01,360
processes

00:24:58,809 --> 00:25:03,490
that rap side effects depending on how

00:25:01,360 --> 00:25:05,470
the side effects behaves it will deliver

00:25:03,490 --> 00:25:08,830
those results as actions back to the

00:25:05,470 --> 00:25:10,230
store so where do they fit in with this

00:25:08,830 --> 00:25:12,669
redux model

00:25:10,230 --> 00:25:15,220
well components started dispatching

00:25:12,669 --> 00:25:17,499
really interesting things to actions so

00:25:15,220 --> 00:25:20,460
if we represent actions as an observable

00:25:17,499 --> 00:25:22,990
then we can listen for certain actions

00:25:20,460 --> 00:25:26,789
perform our side effects and then

00:25:22,990 --> 00:25:26,789
deliver new actions back to the store

00:25:27,389 --> 00:25:32,559
indirect effects lets you do that with

00:25:29,649 --> 00:25:35,259
two key a P is the first is an actions

00:25:32,559 --> 00:25:36,999
service and he's an observable of all of

00:25:35,259 --> 00:25:39,730
the actions that are dispatched in your

00:25:36,999 --> 00:25:42,490
application he has one special operator

00:25:39,730 --> 00:25:44,710
of type you can give it an action type

00:25:42,490 --> 00:25:46,809
like search and it will return to an

00:25:44,710 --> 00:25:49,139
observable of all the times search is

00:25:46,809 --> 00:25:51,970
dispatched in your application

00:25:49,139 --> 00:25:54,940
we'll use this in regular angular

00:25:51,970 --> 00:25:56,710
Services called effect services they're

00:25:54,940 --> 00:25:58,570
injectable and they're going to have

00:25:56,710 --> 00:26:00,700
these properties on them of action

00:25:58,570 --> 00:26:02,860
sources that indirect effects should

00:26:00,700 --> 00:26:03,279
subscribe to to dispatch back to the

00:26:02,860 --> 00:26:05,860
store

00:26:03,279 --> 00:26:08,230
we need to hint to indirect effects

00:26:05,860 --> 00:26:11,379
which properties to subscribe to and we

00:26:08,230 --> 00:26:12,730
do that with the effect decorator so

00:26:11,379 --> 00:26:15,519
let's go ahead and refactor our app and

00:26:12,730 --> 00:26:22,570
move that search request out of our

00:26:15,519 --> 00:26:26,139
component and into a side effect okay so

00:26:22,570 --> 00:26:29,789
next it will create our effects so I'll

00:26:26,139 --> 00:26:29,789
create a file called book effects

00:26:33,030 --> 00:26:37,530
we're going to enter for import a few

00:26:34,980 --> 00:26:40,710
things in this effect the first one is

00:26:37,530 --> 00:26:42,179
the map operator which takes the value

00:26:40,710 --> 00:26:44,190
that emitted is emitted from one

00:26:42,179 --> 00:26:46,919
observable and returns it so it could be

00:26:44,190 --> 00:26:49,500
a new observable we also have the switch

00:26:46,919 --> 00:26:53,610
map operator which is similar to the map

00:26:49,500 --> 00:26:56,640
operator but if you have an observable

00:26:53,610 --> 00:26:58,980
that doesn't finish and you emit a new

00:26:56,640 --> 00:27:01,980
observable from that it will cancel the

00:26:58,980 --> 00:27:04,200
previous observable so that you can

00:27:01,980 --> 00:27:06,830
continue so that you always guaranteed

00:27:04,200 --> 00:27:10,409
you're working with the latest request

00:27:06,830 --> 00:27:12,120
we have the injectable decorator and our

00:27:10,409 --> 00:27:15,270
effect decorator and actions we also

00:27:12,120 --> 00:27:17,400
have observable and our action

00:27:15,270 --> 00:27:19,260
interfaces we have the Google book

00:27:17,400 --> 00:27:21,960
service to make the request and our

00:27:19,260 --> 00:27:25,049
search actions so go ahead and create

00:27:21,960 --> 00:27:27,900
the effect class which is just an

00:27:25,049 --> 00:27:31,799
injectable service and you want to

00:27:27,900 --> 00:27:35,340
inject the actions and the google book

00:27:31,799 --> 00:27:36,929
service into our effect that gives us

00:27:35,340 --> 00:27:40,590
that action stream that we can key off

00:27:36,929 --> 00:27:42,630
of to perform those side effects so now

00:27:40,590 --> 00:27:49,650
we'll add the effect to do the actual

00:27:42,630 --> 00:27:52,110
search so I've defined a variable called

00:27:49,650 --> 00:27:56,100
search and I've hinted it with the

00:27:52,110 --> 00:27:57,990
effect decorator these each property

00:27:56,100 --> 00:28:00,600
that hinted with that decorator has

00:27:57,990 --> 00:28:03,210
metadata that tells this the effects

00:28:00,600 --> 00:28:05,760
once they're registered to subscribe

00:28:03,210 --> 00:28:07,770
that to the store so any actions that

00:28:05,760 --> 00:28:10,559
come out of this effect will be mapped

00:28:07,770 --> 00:28:13,020
instantly into the store to in our event

00:28:10,559 --> 00:28:15,900
loop and we're going to return an

00:28:13,020 --> 00:28:17,880
observable of an action so we use the

00:28:15,900 --> 00:28:22,409
action stream and we use the search

00:28:17,880 --> 00:28:24,750
action type to listen to so we want to

00:28:22,409 --> 00:28:27,450
map that action that was provided when

00:28:24,750 --> 00:28:29,940
we enter the search terms and map it to

00:28:27,450 --> 00:28:33,900
its payload which in this case is a

00:28:29,940 --> 00:28:36,360
stream we use the switch map operator to

00:28:33,900 --> 00:28:40,440
take our search terms make our network

00:28:36,360 --> 00:28:42,899
request to the Google Books API and get

00:28:40,440 --> 00:28:45,630
those results back and as I stated if

00:28:42,899 --> 00:28:47,310
the Search API takes longer

00:28:45,630 --> 00:28:48,900
and we do a new search before that

00:28:47,310 --> 00:28:51,600
finishes it will cancel that previous

00:28:48,900 --> 00:28:54,420
request so we'll take those search

00:28:51,600 --> 00:28:56,520
results and map those into the search

00:28:54,420 --> 00:28:58,200
success which is our array of books

00:28:56,520 --> 00:29:02,340
which will update our store

00:28:58,200 --> 00:29:05,040
automatically so now that we've done

00:29:02,340 --> 00:29:08,400
that I can go into the search component

00:29:05,040 --> 00:29:14,940
well and now we have our fix that can go

00:29:08,400 --> 00:29:19,260
and register those effects so I go into

00:29:14,940 --> 00:29:22,670
the app module and I'll import the

00:29:19,260 --> 00:29:25,260
effects module for in our book effects

00:29:22,670 --> 00:29:27,570
this will register the effects when the

00:29:25,260 --> 00:29:29,970
application starts to start listening

00:29:27,570 --> 00:29:32,460
for that global loop of each action

00:29:29,970 --> 00:29:36,180
that's dispatched so that we can perform

00:29:32,460 --> 00:29:39,210
the side effects and as we did with the

00:29:36,180 --> 00:29:42,120
store module our register this effect

00:29:39,210 --> 00:29:45,900
using effects module which starts that

00:29:42,120 --> 00:29:49,200
process now I can go now that we

00:29:45,900 --> 00:29:53,040
register our effects I can remove this

00:29:49,200 --> 00:29:56,880
responsibility from the search component

00:29:53,040 --> 00:29:58,560
so we don't need the Google book service

00:29:56,880 --> 00:30:00,990
anymore here because that is done in the

00:29:58,560 --> 00:30:05,360
effect so if we can actually remove that

00:30:00,990 --> 00:30:05,360
code from that component

00:30:09,379 --> 00:30:20,009
so once the application is reloaded I

00:30:14,419 --> 00:30:22,710
can search again and we've performed the

00:30:20,009 --> 00:30:30,179
same action with our component it has a

00:30:22,710 --> 00:30:33,179
lot less responsibility ok let's recap

00:30:30,179 --> 00:30:35,309
effects we've said that we had this

00:30:33,179 --> 00:30:36,990
action service and we can use the of

00:30:35,309 --> 00:30:40,529
type operator to listen for specific

00:30:36,990 --> 00:30:42,389
actions effects listen to those actions

00:30:40,529 --> 00:30:44,789
and return new sources of actions and

00:30:42,389 --> 00:30:46,590
response those are wired back up to the

00:30:44,789 --> 00:30:48,690
store and in this way we've isolated our

00:30:46,590 --> 00:30:50,669
side effects from our components making

00:30:48,690 --> 00:30:54,149
our components a pure representation of

00:30:50,669 --> 00:30:56,249
state now we've been saying that this

00:30:54,149 --> 00:30:58,940
gives you really good performance so

00:30:56,249 --> 00:31:03,269
where does the performance part come in

00:30:58,940 --> 00:31:04,679
well if we have data and we have an

00:31:03,269 --> 00:31:07,080
object and we want to change some

00:31:04,679 --> 00:31:09,450
property angular is intelligent and does

00:31:07,080 --> 00:31:10,940
the deep dirty checking of your objects

00:31:09,450 --> 00:31:14,429
to see if it needs to be render the UI

00:31:10,940 --> 00:31:16,710
but our reducers are pure we're taking

00:31:14,429 --> 00:31:18,899
existing objects copying their property

00:31:16,710 --> 00:31:21,090
into a new object with just the change

00:31:18,899 --> 00:31:23,399
so we really don't need angular to

00:31:21,090 --> 00:31:25,710
perform this deep dirty checking we want

00:31:23,399 --> 00:31:28,230
to go to say angular only check at the

00:31:25,710 --> 00:31:31,110
object change like if the reference has

00:31:28,230 --> 00:31:32,159
changed this would give us a significant

00:31:31,110 --> 00:31:35,009
speed up if we were dealing with

00:31:32,159 --> 00:31:36,929
thousands of books so let's go ahead and

00:31:35,009 --> 00:31:39,090
refactor our app and see how difficult

00:31:36,929 --> 00:31:41,809
it is now to improve change detection

00:31:39,090 --> 00:31:41,809
performance

00:31:45,740 --> 00:31:51,080
okay so i go back to my search component

00:31:48,080 --> 00:31:54,950
and we're going to use change the change

00:31:51,080 --> 00:31:56,240
detection to take advantage of this so

00:31:54,950 --> 00:31:59,690
i'll bring in the change detection

00:31:56,240 --> 00:32:02,419
strategy and i'll also go into the

00:31:59,690 --> 00:32:05,690
component metadata to add this change

00:32:02,419 --> 00:32:10,549
detection strategy so i'll use a change

00:32:05,690 --> 00:32:17,080
the text and property and change the

00:32:10,549 --> 00:32:19,520
strategy to own push and save that's it

00:32:17,080 --> 00:32:21,649
so with one line you immediately get

00:32:19,520 --> 00:32:23,419
these big performance gains because you

00:32:21,649 --> 00:32:24,679
built your application this way you're

00:32:23,419 --> 00:32:26,990
going to get tremendous speed up we're

00:32:24,679 --> 00:32:29,899
doing lots of objects we can still

00:32:26,990 --> 00:32:32,299
search but we're not checked we're not

00:32:29,899 --> 00:32:33,860
doing all those reference checks or

00:32:32,299 --> 00:32:38,270
dirty deep dirty checks we're only doing

00:32:33,860 --> 00:32:40,970
reference 6 which can be a lot faster so

00:32:38,270 --> 00:32:43,640
we've also been saying if you use this

00:32:40,970 --> 00:32:45,470
it's going to be easier to test well how

00:32:43,640 --> 00:32:47,450
do we actually interact some test with

00:32:45,470 --> 00:32:49,220
this application and that's what the

00:32:47,450 --> 00:32:51,559
indirect store dev tools come in and

00:32:49,220 --> 00:32:53,690
these are developer tools for MGR X

00:32:51,559 --> 00:32:55,549
store and the way they work is we're

00:32:53,690 --> 00:32:59,390
already modeling this application as a

00:32:55,549 --> 00:33:01,850
series of changes to state via action so

00:32:59,390 --> 00:33:03,890
it gives us a time-travel debugger where

00:33:01,850 --> 00:33:06,140
we can go back in time to an individual

00:33:03,890 --> 00:33:09,620
state inspect with change and see what

00:33:06,140 --> 00:33:11,779
action caused that change it integrates

00:33:09,620 --> 00:33:13,880
with the redux dev tools extension this

00:33:11,779 --> 00:33:15,080
is a browser extension for Firefox and

00:33:13,880 --> 00:33:16,940
Chrome you can go to their respective

00:33:15,080 --> 00:33:19,760
extension stores to download the

00:33:16,940 --> 00:33:27,380
extension let's see how difficult it is

00:33:19,760 --> 00:33:30,080
to wire this up into our application so

00:33:27,380 --> 00:33:32,480
I've already downloaded the extension

00:33:30,080 --> 00:33:34,549
the redux dev tools extension in my

00:33:32,480 --> 00:33:37,370
browser so now we're going to wire up

00:33:34,549 --> 00:33:43,370
the extension to our application so I'll

00:33:37,370 --> 00:33:45,890
go back to the app module and import the

00:33:43,370 --> 00:33:48,970
store dev tools the store dev tools

00:33:45,890 --> 00:33:52,520
provides a bridge from our application

00:33:48,970 --> 00:33:57,380
to the Chrome extension and it also

00:33:52,520 --> 00:33:58,870
instruments our store so add that to our

00:33:57,380 --> 00:34:03,070
imports

00:33:58,870 --> 00:34:05,500
now the store devtool instruments store

00:34:03,070 --> 00:34:08,170
will instrument each one of our reducers

00:34:05,500 --> 00:34:11,740
so that we can use that time traveling

00:34:08,170 --> 00:34:13,300
in application and be able to go back in

00:34:11,740 --> 00:34:18,460
time and see what our state looks like

00:34:13,300 --> 00:34:23,800
at any given point in time so our

00:34:18,460 --> 00:34:27,460
instrument store and once application

00:34:23,800 --> 00:34:29,290
reloads you'll notice I have of a green

00:34:27,460 --> 00:34:31,720
icon up here which is the Redux dev

00:34:29,290 --> 00:34:37,630
tools extension so I go ahead and open

00:34:31,720 --> 00:34:39,880
that and it gives me an interface that I

00:34:37,630 --> 00:34:44,170
can use to see what the state of my

00:34:39,880 --> 00:34:46,830
application looks like in the beginning

00:34:44,170 --> 00:34:49,810
we talked about having an initial State

00:34:46,830 --> 00:34:52,480
so we see our search Pizza State and I

00:34:49,810 --> 00:34:56,280
can see that it's an empty string and it

00:34:52,480 --> 00:34:56,280
gives me a list of empty list of results

00:34:56,850 --> 00:35:03,610
so if I search I get the results but I

00:35:02,020 --> 00:35:06,070
can see how I got there

00:35:03,610 --> 00:35:08,770
i dispatched the search action when I

00:35:06,070 --> 00:35:11,380
enter search query and once that request

00:35:08,770 --> 00:35:14,260
was made using a side effect he returned

00:35:11,380 --> 00:35:17,440
those results back and I can see that I

00:35:14,260 --> 00:35:23,200
have search results now so I'll go ahead

00:35:17,440 --> 00:35:25,450
and perform another search and once

00:35:23,200 --> 00:35:28,410
again I have more actions that's been

00:35:25,450 --> 00:35:31,480
dispatched now how do we do

00:35:28,410 --> 00:35:34,470
time-traveling well as you saw in the

00:35:31,480 --> 00:35:37,150
slide we can use the debugger

00:35:34,470 --> 00:35:41,290
time-travelling to see what my states

00:35:37,150 --> 00:35:44,590
look like once they to go I can also go

00:35:41,290 --> 00:35:48,310
back to the beginning of before I even

00:35:44,590 --> 00:35:51,370
initiated the search I can also roll

00:35:48,310 --> 00:35:54,340
this state forward to see what the state

00:35:51,370 --> 00:35:59,620
looks like as I'm dispatching actions

00:35:54,340 --> 00:36:03,490
along the way now when we instrument our

00:35:59,620 --> 00:36:06,280
store there is a performance penalty

00:36:03,490 --> 00:36:09,850
because we're dispatching actions we're

00:36:06,280 --> 00:36:10,990
keeping state and we once our store is

00:36:09,850 --> 00:36:12,910
instrumented

00:36:10,990 --> 00:36:14,800
we're keeping multiple sets of states

00:36:12,910 --> 00:36:17,260
and snapshots of that so we can use that

00:36:14,800 --> 00:36:20,230
time traveling but we may not want to do

00:36:17,260 --> 00:36:22,690
that all the time so you may only want

00:36:20,230 --> 00:36:24,040
to instrument the store when you when

00:36:22,690 --> 00:36:26,560
you actually have the extension

00:36:24,040 --> 00:36:29,589
installed so that when you're doing

00:36:26,560 --> 00:36:31,960
development you have that extension

00:36:29,589 --> 00:36:33,190
there that you can use for debugging but

00:36:31,960 --> 00:36:36,700
in production you won't pay that

00:36:33,190 --> 00:36:40,150
performance penalty so we can change

00:36:36,700 --> 00:36:43,839
that with the store module and use

00:36:40,150 --> 00:36:46,570
instrument only with extension so that

00:36:43,839 --> 00:36:50,580
way in development like I said you can

00:36:46,570 --> 00:36:53,589
use the tools but when you when you did

00:36:50,580 --> 00:36:58,660
distribute to production you won't have

00:36:53,589 --> 00:37:00,490
that penalty so one line because we

00:36:58,660 --> 00:37:02,080
built our application this way we get

00:37:00,490 --> 00:37:04,780
really powerful debug tools for

00:37:02,080 --> 00:37:07,690
application so let's wrap up everything

00:37:04,780 --> 00:37:10,270
we've done so far we've said that we can

00:37:07,690 --> 00:37:12,160
make state observable and immutable it's

00:37:10,270 --> 00:37:14,830
observable so that components can

00:37:12,160 --> 00:37:17,410
register to changes in our state it's

00:37:14,830 --> 00:37:19,359
immutable so we can turn on the on push

00:37:17,410 --> 00:37:23,470
change detection strategy to get big

00:37:19,359 --> 00:37:24,970
performance wins in our application we

00:37:23,470 --> 00:37:27,040
have a shared state service called the

00:37:24,970 --> 00:37:29,400
store this is how components select

00:37:27,040 --> 00:37:32,140
state and it's how they dispatch actions

00:37:29,400 --> 00:37:34,450
we've isolated our side effects out of

00:37:32,140 --> 00:37:36,490
our components using indirect effects

00:37:34,450 --> 00:37:37,839
this makes our components way easier to

00:37:36,490 --> 00:37:42,220
test and they have a lot fewer

00:37:37,839 --> 00:37:44,530
responsibilities if you want to see the

00:37:42,220 --> 00:37:46,630
full example on the indirect

00:37:44,530 --> 00:37:49,000
organization we have the full example

00:37:46,630 --> 00:37:50,920
app this is maintained by one of our

00:37:49,000 --> 00:37:53,140
indirect team members ride in Jordan and

00:37:50,920 --> 00:37:55,869
expands on this search to include a full

00:37:53,140 --> 00:37:58,240
book collection feature you can use MGR

00:37:55,869 --> 00:37:59,980
X router store to connect the angular

00:37:58,240 --> 00:38:01,780
router to the store so you can use the

00:37:59,980 --> 00:38:05,380
same time travel debugger for the router

00:38:01,780 --> 00:38:06,880
and it also has indoor xdv which allows

00:38:05,380 --> 00:38:10,960
you to persist data across multiple

00:38:06,880 --> 00:38:12,820
sessions of the application before we go

00:38:10,960 --> 00:38:14,320
I want to leave you with a quote Redux

00:38:12,820 --> 00:38:16,060
is not great for making simple things

00:38:14,320 --> 00:38:18,760
quickly it's great for making really

00:38:16,060 --> 00:38:21,010
hard things simple so today we only had

00:38:18,760 --> 00:38:22,510
enough time to build something simple

00:38:21,010 --> 00:38:23,500
using these tools but I hope you

00:38:22,510 --> 00:38:24,880
understand that these are meant for

00:38:23,500 --> 00:38:27,299
applications that have

00:38:24,880 --> 00:38:29,650
really hard state management problems if

00:38:27,299 --> 00:38:31,779
you're not sure if you need in directs

00:38:29,650 --> 00:38:33,160
come talk to Brent and we're going to be

00:38:31,779 --> 00:38:34,420
right outside the hallway after we get

00:38:33,160 --> 00:38:35,619
offstage and we'll be here for us

00:38:34,420 --> 00:38:38,349
throughout the rest of the conference

00:38:35,619 --> 00:38:40,509
you can also ask us anything and they'd

00:38:38,349 --> 00:38:42,099
be in a room at 3:00 we'll be in the

00:38:40,509 --> 00:38:44,319
experts room at 4:00 if you want stool

00:38:42,099 --> 00:38:45,249
actually look at your application or if

00:38:44,319 --> 00:38:46,900
you just wanna go through the tour of

00:38:45,249 --> 00:38:49,150
heroes with us we'll do that at 5:00 we

00:38:46,900 --> 00:38:55,949
audubon room thank you

00:38:49,150 --> 00:38:55,949

YouTube URL: https://www.youtube.com/watch?v=cyaAhXHhxgk


