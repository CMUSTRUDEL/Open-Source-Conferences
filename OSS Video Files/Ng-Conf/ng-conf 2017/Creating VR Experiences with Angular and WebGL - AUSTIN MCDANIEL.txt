Title: Creating VR Experiences with Angular and WebGL - AUSTIN MCDANIEL
Publication date: 2017-04-06
Playlist: ng-conf 2017
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:04,339 --> 00:00:08,820
thanks everyone today I want to tell you

00:00:06,779 --> 00:00:09,540
a story about where we've been and where

00:00:08,820 --> 00:00:13,139
we're going

00:00:09,540 --> 00:00:16,230
with UI and virtual reality and leaping

00:00:13,139 --> 00:00:17,880
into new realities with angular a little

00:00:16,230 --> 00:00:19,800
bit about me before we get started

00:00:17,880 --> 00:00:22,980
my name is Austin McDaniel I'm also

00:00:19,800 --> 00:00:25,800
known as in Japan DE if you guys do the

00:00:22,980 --> 00:00:28,050
Twitter thing or github follow me on

00:00:25,800 --> 00:00:30,300
there I talk a lot about JavaScript and

00:00:28,050 --> 00:00:32,550
the angular community I love giving back

00:00:30,300 --> 00:00:34,950
to the community and doing open source

00:00:32,550 --> 00:00:37,309
and if you haven't checked out angular

00:00:34,950 --> 00:00:41,640
air I'm a panelist on there every week

00:00:37,309 --> 00:00:45,090
also known as in Japan DE first let's

00:00:41,640 --> 00:00:48,510
reflect on where we've been and how we

00:00:45,090 --> 00:00:50,760
use and interact with computers does

00:00:48,510 --> 00:00:53,390
anyone remember punch cards don't worry

00:00:50,760 --> 00:00:56,730
I won't make you raise your hands and

00:00:53,390 --> 00:00:59,719
then there was keyboards Mouse came

00:00:56,730 --> 00:01:04,140
along and then the iPad and the iPhone

00:00:59,719 --> 00:01:06,210
revolutionized everything with touch but

00:01:04,140 --> 00:01:08,909
as these interfaces evolved our tools

00:01:06,210 --> 00:01:11,369
had to to jQuery helped us tame the Dom

00:01:08,909 --> 00:01:13,950
and angular helped us climb new

00:01:11,369 --> 00:01:19,409
mountains with all its goodness into a

00:01:13,950 --> 00:01:21,270
binding for invalidation etc etc but

00:01:19,409 --> 00:01:24,540
things again things are changing again

00:01:21,270 --> 00:01:27,420
and faster than ever virtual reality and

00:01:24,540 --> 00:01:30,210
augmented reality are dominating the bus

00:01:27,420 --> 00:01:34,110
today and they're changing everything

00:01:30,210 --> 00:01:37,590
about how we build user experiences and

00:01:34,110 --> 00:01:39,119
how we interact with them it's a funny

00:01:37,590 --> 00:01:41,640
thing though if you've ever heard the

00:01:39,119 --> 00:01:44,220
phrase that nothing is new anymore it's

00:01:41,640 --> 00:01:46,649
just rehashes of the old things this

00:01:44,220 --> 00:01:48,720
could not be even more true with virtual

00:01:46,649 --> 00:01:52,229
reality the fundamentals of virtual

00:01:48,720 --> 00:01:55,790
reality actually date back to 1838 which

00:01:52,229 --> 00:01:59,450
is before photography was even invented

00:01:55,790 --> 00:02:04,799
it uses a technique called stereoscopy

00:01:59,450 --> 00:02:06,600
stereoscopy is the is the idea of

00:02:04,799 --> 00:02:08,310
putting two images right beside each

00:02:06,600 --> 00:02:10,739
other to the left and to the right of

00:02:08,310 --> 00:02:12,420
your eye and with just a little bit of

00:02:10,739 --> 00:02:15,180
overlap this creates

00:02:12,420 --> 00:02:18,030
illusion of a 3d depth in a binocular

00:02:15,180 --> 00:02:20,040
vision if you add head-tracking

00:02:18,030 --> 00:02:25,920
you have virtual reality as we know it

00:02:20,040 --> 00:02:29,220
today but everything needs to evolve and

00:02:25,920 --> 00:02:31,860
our tooling is evolving to one thing

00:02:29,220 --> 00:02:34,440
that we were using today is called Web

00:02:31,860 --> 00:02:36,569
VR and web VR is actually accomplished

00:02:34,440 --> 00:02:39,239
through a technique called WebGL which

00:02:36,569 --> 00:02:42,420
is relatively new it was first landed in

00:02:39,239 --> 00:02:43,819
1.0 in 2016 but was first introduced in

00:02:42,420 --> 00:02:46,260
00:02:43,819 --> 00:02:49,260
rough jail is required to create these

00:02:46,260 --> 00:02:51,600
experiences because it lets us tap our

00:02:49,260 --> 00:02:55,100
native GPU of the computer and really

00:02:51,600 --> 00:02:57,420
create rich and immersive environments

00:02:55,100 --> 00:03:00,209
there's a few tools out there right now

00:02:57,420 --> 00:03:02,670
for WebGL that allow us to build these

00:03:00,209 --> 00:03:04,769
type of immersive environments and even

00:03:02,670 --> 00:03:06,840
some of the support web VR the biggest

00:03:04,769 --> 00:03:08,450
one is called 3j s and we'll talk about

00:03:06,840 --> 00:03:10,500
that here in a second

00:03:08,450 --> 00:03:12,330
but first we need to look at the

00:03:10,500 --> 00:03:15,030
problems that we have when we're trying

00:03:12,330 --> 00:03:17,130
to develop interfaces today we have

00:03:15,030 --> 00:03:20,220
interaction events such as click

00:03:17,130 --> 00:03:22,769
keyboard touch we have viewport events

00:03:20,220 --> 00:03:25,489
such as window resize lifecycle hooks

00:03:22,769 --> 00:03:28,859
for initialization rendering and

00:03:25,489 --> 00:03:31,799
deconstruction animations and data flow

00:03:28,859 --> 00:03:34,650
and virtual reality introduces even more

00:03:31,799 --> 00:03:38,070
problems we have desktop verse mobile VR

00:03:34,650 --> 00:03:41,549
head tracking gestures voice recognition

00:03:38,070 --> 00:03:42,989
for input shaders and I think the

00:03:41,549 --> 00:03:45,989
biggest thing that we need to take away

00:03:42,989 --> 00:03:49,079
here is virtual reality actually changes

00:03:45,989 --> 00:03:51,180
the way that we are going to be building

00:03:49,079 --> 00:03:54,090
our interfaces because we cannot

00:03:51,180 --> 00:03:55,319
interact with immersive interfaces with

00:03:54,090 --> 00:03:56,910
a keyboard and mouse I don't know if

00:03:55,319 --> 00:03:59,640
you've ever tried you're just wearing

00:03:56,910 --> 00:04:01,620
the headset and you're like typing and

00:03:59,640 --> 00:04:03,810
you miss the keys all the time we have

00:04:01,620 --> 00:04:06,180
to really change our thought process of

00:04:03,810 --> 00:04:08,370
that and using virtual or using voice

00:04:06,180 --> 00:04:11,790
recognition and gestures and controllers

00:04:08,370 --> 00:04:13,680
or ways that we can accomplish this so

00:04:11,790 --> 00:04:15,239
this is a lot of code so don't strain

00:04:13,680 --> 00:04:17,459
your eyes but I did want to show this

00:04:15,239 --> 00:04:19,680
slide just to give you a little context

00:04:17,459 --> 00:04:23,070
of what we have to do today to build a

00:04:19,680 --> 00:04:24,590
WebGL scene so all this code does is set

00:04:23,070 --> 00:04:27,020
up a basic scene

00:04:24,590 --> 00:04:29,240
putting together a camera a scene a

00:04:27,020 --> 00:04:31,730
directional lie and adding a couple

00:04:29,240 --> 00:04:34,010
events I'm literally not even adding

00:04:31,730 --> 00:04:36,139
anything to the scene with this now

00:04:34,010 --> 00:04:38,570
obviously there's a lot of code here

00:04:36,139 --> 00:04:41,030
it's very error-prone it's difficult to

00:04:38,570 --> 00:04:42,790
follow easy to make memory leaks does

00:04:41,030 --> 00:04:48,050
that remind you of something you know

00:04:42,790 --> 00:04:49,960
JavaScript like 10 years ago maybe there

00:04:48,050 --> 00:04:52,490
is light at the end of the tunnel though

00:04:49,960 --> 00:04:54,710
there's a some new tools that are out

00:04:52,490 --> 00:04:57,639
there one of which being a frame it

00:04:54,710 --> 00:04:59,870
allows us to create the markup like

00:04:57,639 --> 00:05:02,360
component composition that we have in

00:04:59,870 --> 00:05:04,130
angular today if you look at this it

00:05:02,360 --> 00:05:06,919
kind of looks like angular code you

00:05:04,130 --> 00:05:09,410
might have thought it was at first it's

00:05:06,919 --> 00:05:11,360
got all the same carrots characteristics

00:05:09,410 --> 00:05:15,229
we need to find a scene we've got a

00:05:11,360 --> 00:05:20,570
light and we create a sphere and we use

00:05:15,229 --> 00:05:23,120
input bindings etc now obviously now

00:05:20,570 --> 00:05:25,970
obviously this isn't angular but what if

00:05:23,120 --> 00:05:27,889
it could be again it has all those same

00:05:25,970 --> 00:05:32,229
terroristic that we're using today to

00:05:27,889 --> 00:05:35,060
build components and widgets and forms

00:05:32,229 --> 00:05:37,880
the team at Google is always thinking

00:05:35,060 --> 00:05:41,360
one step ahead these guys are geniuses

00:05:37,880 --> 00:05:44,240
I tell ya and so they have been thinking

00:05:41,360 --> 00:05:46,340
about all the different ways that we

00:05:44,240 --> 00:05:48,950
might want to use angular to render

00:05:46,340 --> 00:05:51,470
different scenes today you know whether

00:05:48,950 --> 00:05:55,520
that be on the web which is the most

00:05:51,470 --> 00:05:58,610
common one mobile native using native

00:05:55,520 --> 00:06:00,289
script the desktop using electron or

00:05:58,610 --> 00:06:03,349
server-side with all kinds of different

00:06:00,289 --> 00:06:09,349
server backends we can all do that today

00:06:03,349 --> 00:06:12,200
because of custom renders so what custom

00:06:09,349 --> 00:06:14,270
renders are is they actually abstracted

00:06:12,200 --> 00:06:17,240
away the concrete implementation of

00:06:14,270 --> 00:06:20,180
creating Dom elements adding Styles

00:06:17,240 --> 00:06:22,550
adding children to the scene and they

00:06:20,180 --> 00:06:25,520
actually made it where you can implement

00:06:22,550 --> 00:06:27,800
your own you don't have to you know you

00:06:25,520 --> 00:06:32,659
don't have to use Dom you can use you

00:06:27,800 --> 00:06:34,729
know classic ASP if you choose and we

00:06:32,659 --> 00:06:35,900
can so if we think about that and we

00:06:34,729 --> 00:06:37,880
look at all the different ways that

00:06:35,900 --> 00:06:40,160
they're leveraging it today

00:06:37,880 --> 00:06:44,440
could we do the same thing to render

00:06:40,160 --> 00:06:51,160
components like we like a friend does so

00:06:44,440 --> 00:06:54,050
because WebGL is a mix of Dom canvas and

00:06:51,160 --> 00:06:55,820
events that the browser listens to what

00:06:54,050 --> 00:06:58,190
we actually want to do to create this

00:06:55,820 --> 00:07:01,420
type of renderer is we want to override

00:06:58,190 --> 00:07:04,400
the default Dom render now WebGL there

00:07:01,420 --> 00:07:08,930
the meshes that you create there are not

00:07:04,400 --> 00:07:09,950
exactly da elements there these special

00:07:08,930 --> 00:07:12,530
mess

00:07:09,950 --> 00:07:14,960
objects and they don't actually

00:07:12,530 --> 00:07:16,370
represent anything in the Dom so if

00:07:14,960 --> 00:07:18,950
we're actually going to compose these

00:07:16,370 --> 00:07:20,360
you know your classic Dom render is

00:07:18,950 --> 00:07:24,140
actually going to start rendering those

00:07:20,360 --> 00:07:26,450
to the to the view and we don't want

00:07:24,140 --> 00:07:29,690
that if any of us know anything about

00:07:26,450 --> 00:07:32,240
the browser is it does not like lots of

00:07:29,690 --> 00:07:34,490
HTML that's why we have virtual

00:07:32,240 --> 00:07:36,620
scrolling etc so we're going to render a

00:07:34,490 --> 00:07:38,270
lot of unneeded ahhm so what we can do

00:07:36,620 --> 00:07:41,300
is we can actually override the Dom

00:07:38,270 --> 00:07:46,190
render and black list any WebGL

00:07:41,300 --> 00:07:48,380
components that we might have so if you

00:07:46,190 --> 00:07:51,770
take a look at this and this is really

00:07:48,380 --> 00:07:54,260
awesome we've got the same markup that

00:07:51,770 --> 00:07:56,540
we had earlier where we define a

00:07:54,260 --> 00:07:59,570
renderer we put some we put some

00:07:56,540 --> 00:08:02,780
controls on this screen we add a scene

00:07:59,570 --> 00:08:06,140
we add a camera we add some lights and

00:08:02,780 --> 00:08:08,510
then we define a spear mesh which is

00:08:06,140 --> 00:08:10,400
using ng for there to loop over a

00:08:08,510 --> 00:08:12,830
collection of balls and using input

00:08:10,400 --> 00:08:15,490
bindings to actually set positions on

00:08:12,830 --> 00:08:19,130
those balls the most clean elegant

00:08:15,490 --> 00:08:23,000
component composition code in what ten

00:08:19,130 --> 00:08:25,790
lines of code there under the hood it's

00:08:23,000 --> 00:08:27,590
relatively simple we just have a sphere

00:08:25,790 --> 00:08:30,410
component we have a couple inputs for

00:08:27,590 --> 00:08:33,080
the position and in the in and on an it

00:08:30,410 --> 00:08:36,950
what I do is I create a spear geometry I

00:08:33,080 --> 00:08:40,310
create a mess object and then I say okay

00:08:36,950 --> 00:08:42,020
let's use the positions of the inputs to

00:08:40,310 --> 00:08:44,450
bind that to the thing so I'm creating a

00:08:42,020 --> 00:08:47,920
one-to-one mapping here with the actual

00:08:44,450 --> 00:08:50,450
WebGL object and my angular component

00:08:47,920 --> 00:08:51,110
now that we've done that we've just

00:08:50,450 --> 00:08:53,590
written

00:08:51,110 --> 00:08:56,150
something to the Dom that doesn't really

00:08:53,590 --> 00:08:58,160
represent anything in the DOM and it's

00:08:56,150 --> 00:08:59,930
not actually in the scene yet so what we

00:08:58,160 --> 00:09:02,030
need to do is in our sync component what

00:08:59,930 --> 00:09:04,850
we can do is we can actually use our

00:09:02,030 --> 00:09:07,460
content child decorator to read out all

00:09:04,850 --> 00:09:10,880
the Spear components that are in in our

00:09:07,460 --> 00:09:13,730
scene and then iterate over those on in

00:09:10,880 --> 00:09:15,980
the after content an it function and add

00:09:13,730 --> 00:09:18,410
those to our scene and now we have a

00:09:15,980 --> 00:09:22,640
fully rendered scene with a bunch of

00:09:18,410 --> 00:09:26,210
spheres we've actually done the hard

00:09:22,640 --> 00:09:28,960
part now actually adding web VR and

00:09:26,210 --> 00:09:31,700
making web via our is pretty simple now

00:09:28,960 --> 00:09:33,230
remember I said it's just two images put

00:09:31,700 --> 00:09:35,180
two put beside each other

00:09:33,230 --> 00:09:37,550
and what we can do is we can copy our

00:09:35,180 --> 00:09:40,040
Dom structure or components and just lay

00:09:37,550 --> 00:09:41,540
them out right beside each other but

00:09:40,040 --> 00:09:43,580
fortunately there's a lot of tools out

00:09:41,540 --> 00:09:47,180
there that help us do that 3j s has a

00:09:43,580 --> 00:09:51,100
built-in VR effect that will just add a

00:09:47,180 --> 00:09:56,330
filter to our canvas and duplicate the

00:09:51,100 --> 00:10:00,290
camera because web VR is pretty new it

00:09:56,330 --> 00:10:02,060
is gonna require some polyfills the

00:10:00,290 --> 00:10:04,970
polyfills are gonna add the ability to

00:10:02,060 --> 00:10:08,090
normalize the browser api's add the

00:10:04,970 --> 00:10:12,680
events for like positioning orientation

00:10:08,090 --> 00:10:16,310
poses add the ability to do chromeless

00:10:12,680 --> 00:10:19,490
views and do head tracking and now that

00:10:16,310 --> 00:10:21,560
we're in VR we can get rid of the mouse

00:10:19,490 --> 00:10:25,730
and keyboard controls and now just use

00:10:21,560 --> 00:10:27,170
head tracking for our navigation so

00:10:25,730 --> 00:10:31,570
let's check out a demo what does this

00:10:27,170 --> 00:10:31,570
actually look like so I'm gonna fire up

00:10:34,540 --> 00:10:38,170
switch over here

00:10:43,960 --> 00:10:48,970
so I've got a relatively simple demo

00:10:46,089 --> 00:10:50,410
here that looks really cool in virtual

00:10:48,970 --> 00:10:52,750
reality that's the bad thing about

00:10:50,410 --> 00:10:55,810
virtual reality it's like very hard to

00:10:52,750 --> 00:10:58,540
demo because it doesn't look cool on a

00:10:55,810 --> 00:11:00,300
screen but we have about 50 Spears here

00:10:58,540 --> 00:11:04,500
and we're bouncing them up and down and

00:11:00,300 --> 00:11:07,540
you can see you I'm using all the same

00:11:04,500 --> 00:11:09,370
controls that I did earlier to bind

00:11:07,540 --> 00:11:11,830
these together and down here we've got a

00:11:09,370 --> 00:11:14,470
control called a VR toggle button

00:11:11,830 --> 00:11:19,089
because we're actually I can't actually

00:11:14,470 --> 00:11:21,220
demo pass you guys out cardboards

00:11:19,089 --> 00:11:23,950
I asked frosty about this he said there

00:11:21,220 --> 00:11:30,850
was no budget for passing out Google

00:11:23,950 --> 00:11:34,180
pixels and daydreams so I installed a

00:11:30,850 --> 00:11:36,279
web VR Chrome extension that will allow

00:11:34,180 --> 00:11:38,260
me to emulate my browser to emulate this

00:11:36,279 --> 00:11:40,149
so now that I've got this enabled I can

00:11:38,260 --> 00:11:42,430
actually open this up and now you'll see

00:11:40,149 --> 00:11:45,100
I have two cameras if you can kind of

00:11:42,430 --> 00:11:48,010
see it here with the balls bouncing so

00:11:45,100 --> 00:11:49,630
it's the same scene it was before but

00:11:48,010 --> 00:11:51,700
now I have two cameras I wish it would

00:11:49,630 --> 00:11:53,470
be slower and down here if you've ever

00:11:51,700 --> 00:11:56,410
used like unity or anything like that

00:11:53,470 --> 00:11:59,170
you can see that I can move around this

00:11:56,410 --> 00:12:03,040
by dragging and dropping this and in a

00:11:59,170 --> 00:12:04,570
three dimensional view so what does that

00:12:03,040 --> 00:12:10,120
actually look like so let's actually go

00:12:04,570 --> 00:12:11,890
into our Dom here and let's see hey

00:12:10,120 --> 00:12:13,480
Austin you said we're not rendering any

00:12:11,890 --> 00:12:15,100
Dom we've got some stuff on the screen

00:12:13,480 --> 00:12:18,100
what does that what's that actually

00:12:15,100 --> 00:12:22,270
going to look like and so I'm going to

00:12:18,100 --> 00:12:25,029
go into my spears component and you can

00:12:22,270 --> 00:12:27,100
see our renderer and so I'm gonna pop

00:12:25,029 --> 00:12:29,220
open the render you can see the renderer

00:12:27,100 --> 00:12:33,310
created a canvas object so WebGL is

00:12:29,220 --> 00:12:35,620
accomplished by using a canvas object we

00:12:33,310 --> 00:12:37,360
have our orbit controls we have our VR

00:12:35,620 --> 00:12:39,370
controls and then we have our scene and

00:12:37,360 --> 00:12:41,980
notice now there's nothing under the

00:12:39,370 --> 00:12:45,700
scene so we've purely rendered a WebGL

00:12:41,980 --> 00:12:49,800
web VR experience using angular here and

00:12:45,700 --> 00:12:49,800
not actually added anything to the scene

00:12:51,200 --> 00:13:00,769
Thanks so let's take a look at our code

00:12:56,430 --> 00:13:03,779
real quick so in our app component here

00:13:00,769 --> 00:13:06,180
we just have a fun button here at the

00:13:03,779 --> 00:13:09,209
top that allows us to toggle between if

00:13:06,180 --> 00:13:11,670
you guys after the show you can check

00:13:09,209 --> 00:13:13,920
out the github page I've got the demo

00:13:11,670 --> 00:13:15,690
that slides in the notes and you can

00:13:13,920 --> 00:13:17,700
view this in your cardboard actually and

00:13:15,690 --> 00:13:19,860
so I've got a couple different scenes

00:13:17,700 --> 00:13:22,079
that you can toggle between a video and

00:13:19,860 --> 00:13:23,700
stuff like that but down here we have

00:13:22,079 --> 00:13:25,769
our page navigation and this is where

00:13:23,700 --> 00:13:28,769
our VR toggle button comes into play and

00:13:25,769 --> 00:13:32,970
then we have our WebGL stuff nicely

00:13:28,769 --> 00:13:35,519
named and then inside our apps Pierce

00:13:32,970 --> 00:13:39,240
component here again I define my render

00:13:35,519 --> 00:13:41,490
I have a input to my VR component this

00:13:39,240 --> 00:13:44,130
or my renderer that says is this in VR

00:13:41,490 --> 00:13:46,470
mode I have some controls orbit controls

00:13:44,130 --> 00:13:48,300
or your mouse and keyboard the our

00:13:46,470 --> 00:13:51,180
controls are your head tracking so they

00:13:48,300 --> 00:13:53,160
just toggle enabled whenever one's in

00:13:51,180 --> 00:13:55,829
the other mode then we have our scene

00:13:53,160 --> 00:14:00,149
component under there we have a camera

00:13:55,829 --> 00:14:01,829
lights action and then we have some

00:14:00,149 --> 00:14:04,050
Spears and just like before we're using

00:14:01,829 --> 00:14:07,949
a loop in G for loop adding some

00:14:04,050 --> 00:14:10,589
bindings here and presto now what we

00:14:07,949 --> 00:14:13,440
want to look for is we want our objects

00:14:10,589 --> 00:14:15,510
in our controls to actually be you know

00:14:13,440 --> 00:14:17,070
true you know

00:14:15,510 --> 00:14:20,490
components and not have any

00:14:17,070 --> 00:14:22,110
implementation detail so we've created

00:14:20,490 --> 00:14:26,730
this really awesome

00:14:22,110 --> 00:14:28,709
spear geometry here and it adds a spear

00:14:26,730 --> 00:14:30,480
to the screen for us and that's really

00:14:28,709 --> 00:14:31,680
awesome but that's not going to do

00:14:30,480 --> 00:14:33,750
anything it's just going to add it to

00:14:31,680 --> 00:14:36,199
the screen we actually need to provide

00:14:33,750 --> 00:14:38,940
some type of implementation detail and

00:14:36,199 --> 00:14:40,920
one of my favorite things about angular

00:14:38,940 --> 00:14:42,540
is these view children and content

00:14:40,920 --> 00:14:44,579
children it'll see I use them everywhere

00:14:42,540 --> 00:14:47,279
we can what we can do is we can actually

00:14:44,579 --> 00:14:49,949
read out the spear components in our app

00:14:47,279 --> 00:14:52,230
component here and then I you know I

00:14:49,949 --> 00:14:55,790
want to make my balls bounce so what I

00:14:52,230 --> 00:14:58,649
do is I in after the viewing it here I

00:14:55,790 --> 00:15:00,209
call this animate function and it's

00:14:58,649 --> 00:15:02,560
really important one thing to note here

00:15:00,209 --> 00:15:04,720
is we actually want to run

00:15:02,560 --> 00:15:06,310
the animate loops outside of angular

00:15:04,720 --> 00:15:08,380
zone detection because we're not

00:15:06,310 --> 00:15:10,180
actually doing anything with angular and

00:15:08,380 --> 00:15:11,920
we don't want to incur the change

00:15:10,180 --> 00:15:15,300
detection penalty or anything like that

00:15:11,920 --> 00:15:17,920
so we run these outside of our zones

00:15:15,300 --> 00:15:20,170
requestanimationframe which moves the

00:15:17,920 --> 00:15:22,390
tick to the GPU and now we're going to

00:15:20,170 --> 00:15:24,330
call this recursive function called

00:15:22,390 --> 00:15:27,580
animate and animates going to get our

00:15:24,330 --> 00:15:29,830
Spears it's going to run some fancy math

00:15:27,580 --> 00:15:32,260
and then it's going to update the

00:15:29,830 --> 00:15:35,440
position of those so now I've got my

00:15:32,260 --> 00:15:41,529
bouncing implementation and my spears

00:15:35,440 --> 00:15:46,420
created so if we jump back to what we

00:15:41,529 --> 00:15:48,040
were talking about here what's next you

00:15:46,420 --> 00:15:51,130
know what I showed here is a pretty

00:15:48,040 --> 00:15:54,760
basic implementation of how to do WebGL

00:15:51,130 --> 00:15:56,800
with angular and how to do web VR the

00:15:54,760 --> 00:15:59,320
performance kind of starts to hit a

00:15:56,800 --> 00:16:00,940
bottleneck because some of the concepts

00:15:59,320 --> 00:16:02,920
I demonstrated you know just simply

00:16:00,940 --> 00:16:05,050
blacklisting we need to take it a step

00:16:02,920 --> 00:16:08,230
further the demonstration I had was

00:16:05,050 --> 00:16:09,520
about 50 Spears at about a hundred you

00:16:08,230 --> 00:16:12,250
start to see some performance

00:16:09,520 --> 00:16:14,650
degradation and about 300 it really

00:16:12,250 --> 00:16:16,839
starts to drop down and so we're gonna

00:16:14,650 --> 00:16:20,260
really have to you know focus with a

00:16:16,839 --> 00:16:22,930
team and try to create some better

00:16:20,260 --> 00:16:24,820
rendering running outside of zones I

00:16:22,930 --> 00:16:27,760
think is a good possibility that we can

00:16:24,820 --> 00:16:31,540
look at to explore more but native

00:16:27,760 --> 00:16:33,490
compilation is probably the bigger hit

00:16:31,540 --> 00:16:35,770
that we're gonna have in order to truly

00:16:33,490 --> 00:16:38,110
accomplish these extremely rich

00:16:35,770 --> 00:16:40,330
environments and with native compilation

00:16:38,110 --> 00:16:44,230
we can use compilers like in the

00:16:40,330 --> 00:16:46,600
previous con previous talk to actually

00:16:44,230 --> 00:16:51,070
take our angular components and compile

00:16:46,600 --> 00:16:52,660
them down to be native applications that

00:16:51,070 --> 00:16:56,110
we can deploy to our headsets or

00:16:52,660 --> 00:16:57,580
whatever that may be that's all I have

00:16:56,110 --> 00:17:00,370
thank you very much

00:16:57,580 --> 00:17:02,110
and if you don't frosty mentioned this

00:17:00,370 --> 00:17:04,990
earlier if you don't already know you

00:17:02,110 --> 00:17:09,730
can actually go to our live stream today

00:17:04,990 --> 00:17:12,209
and view the ly the live feed in web VR

00:17:09,730 --> 00:17:14,179
using YouTube so that's really awesome

00:17:12,209 --> 00:17:16,240
thanks guys

00:17:14,179 --> 00:17:16,240
you

00:17:16,730 --> 00:17:19,989

YouTube URL: https://www.youtube.com/watch?v=L_eQKnl8sao


