Title: Embrace Component Tranquility - JUSTIN SCHWARTZENBERGER
Publication date: 2017-04-06
Playlist: ng-conf 2017
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,469 --> 00:00:06,660
yes yes yes yes

00:00:04,440 --> 00:00:09,690
fellow ng-conf attendees and ng-conf

00:00:06,660 --> 00:00:11,340
extended viewers what is up it is so

00:00:09,690 --> 00:00:14,250
cool we back up on this stage again this

00:00:11,340 --> 00:00:17,190
year all right time to get after it

00:00:14,250 --> 00:00:18,840
I'm Justin Schwartzman Berger you know I

00:00:17,190 --> 00:00:21,240
think I'm finally at peace with

00:00:18,840 --> 00:00:23,460
components see a while back I went on

00:00:21,240 --> 00:00:25,949
this journey this journey to seek

00:00:23,460 --> 00:00:28,560
Component enlightenment to understand

00:00:25,949 --> 00:00:30,240
the ways of componentization now my

00:00:28,560 --> 00:00:32,880
journey to finding components

00:00:30,240 --> 00:00:36,239
tranquility began a few years ago it was

00:00:32,880 --> 00:00:37,860
late 2014 and two Bs an Igor we're up on

00:00:36,239 --> 00:00:40,649
a stage wearing these angular shirts

00:00:37,860 --> 00:00:45,000
with these big numbers on them to BSN is

00:00:40,649 --> 00:00:47,969
1.3 and Igor and is 2.0 and as the world

00:00:45,000 --> 00:00:49,440
watch on and anticipation they stood up

00:00:47,969 --> 00:00:52,199
they're telling us about this new

00:00:49,440 --> 00:00:54,690
iteration of angularjs talking about the

00:00:52,199 --> 00:00:58,410
coming changes and it was in that moment

00:00:54,690 --> 00:01:01,350
when Igor told us in angular 2 we are

00:00:58,410 --> 00:01:02,640
embracing the component model so from

00:01:01,350 --> 00:01:05,729
the beginning it was about components

00:01:02,640 --> 00:01:08,189
and as this angular alpha and beta and

00:01:05,729 --> 00:01:10,409
our C unfolded the component story the

00:01:08,189 --> 00:01:12,689
end of you revealed to us where

00:01:10,409 --> 00:01:14,600
angularjs was about taking logic and

00:01:12,689 --> 00:01:17,130
applying it to chunks from the Dom

00:01:14,600 --> 00:01:19,110
angular was about isolating those chunks

00:01:17,130 --> 00:01:21,990
along with their logic and markup and

00:01:19,110 --> 00:01:23,909
file into components and then building

00:01:21,990 --> 00:01:26,520
out a UI from a tree of those components

00:01:23,909 --> 00:01:28,619
and this wasn't about angular becoming

00:01:26,520 --> 00:01:31,079
something revolutionary this was about

00:01:28,619 --> 00:01:32,970
angular becoming a solution and learning

00:01:31,079 --> 00:01:34,829
from concepts and implementations that

00:01:32,970 --> 00:01:38,189
were currently in circulation and being

00:01:34,829 --> 00:01:39,869
explored concepts like web components

00:01:38,189 --> 00:01:42,000
and implementations like polymer in

00:01:39,869 --> 00:01:44,119
frameworks like react that had this

00:01:42,000 --> 00:01:46,350
concept of components at its core

00:01:44,119 --> 00:01:48,570
following in the footsteps of these

00:01:46,350 --> 00:01:49,979
other solutions that took this component

00:01:48,570 --> 00:01:52,649
architecture approach to building

00:01:49,979 --> 00:01:55,049
applications and this certainly felt

00:01:52,649 --> 00:01:56,939
like a sensible approach but us as

00:01:55,049 --> 00:01:59,369
implementers when we started to dive

00:01:56,939 --> 00:02:02,969
into this thing we realized that the web

00:01:59,369 --> 00:02:05,729
dev game was changing with angular we

00:02:02,969 --> 00:02:08,369
need to become component architects all

00:02:05,729 --> 00:02:09,899
of us are thinking an approach to

00:02:08,369 --> 00:02:13,560
building these UI views has had to

00:02:09,899 --> 00:02:15,780
change when we take a mock-up like this

00:02:13,560 --> 00:02:19,050
something that displays a list of player

00:02:15,780 --> 00:02:22,560
cards with some summary facts like name

00:02:19,050 --> 00:02:24,260
and score and a call-to-action button we

00:02:22,560 --> 00:02:26,700
used to plan our implementation like so

00:02:24,260 --> 00:02:29,340
we see this container that we need to

00:02:26,700 --> 00:02:31,800
loop out items in and we see some repeat

00:02:29,340 --> 00:02:33,720
styling and structure and an interactive

00:02:31,800 --> 00:02:35,880
UI piece and we would think in terms of

00:02:33,720 --> 00:02:37,739
one markup chunk that we'd apply a bunch

00:02:35,880 --> 00:02:41,069
of scripting logic to to do they loop

00:02:37,739 --> 00:02:42,569
out into wire click events right with

00:02:41,069 --> 00:02:44,130
this new architecture approach we come

00:02:42,569 --> 00:02:46,290
out of the gate thinking cool no problem

00:02:44,130 --> 00:02:49,200
we got this now we just need to start

00:02:46,290 --> 00:02:51,030
building these things into components so

00:02:49,200 --> 00:02:53,970
we see a component for that player card

00:02:51,030 --> 00:02:56,220
and we see a component for the list of

00:02:53,970 --> 00:02:57,510
cards own we could totally make a

00:02:56,220 --> 00:02:59,130
component out of it call-to-action

00:02:57,510 --> 00:03:00,840
button and that would be sweet because

00:02:59,130 --> 00:03:03,390
then we'd have this reusable piece in

00:03:00,840 --> 00:03:05,130
our application right and from here we

00:03:03,390 --> 00:03:07,319
fall in love with and start crushed and

00:03:05,130 --> 00:03:09,330
hard over the component model we learn

00:03:07,319 --> 00:03:11,489
we can scope our styling the components

00:03:09,330 --> 00:03:13,590
we can send data down into our

00:03:11,489 --> 00:03:14,850
components via inputs and broker action

00:03:13,590 --> 00:03:15,600
back up out of our components the

00:03:14,850 --> 00:03:19,590
outputs

00:03:15,600 --> 00:03:21,840
we're like hot dang this is amazing and

00:03:19,590 --> 00:03:24,120
we want to component eyes not just some

00:03:21,840 --> 00:03:27,600
of the things you know we want to

00:03:24,120 --> 00:03:31,230
component eyes all the things and then

00:03:27,600 --> 00:03:32,810
we panic well I panicked

00:03:31,230 --> 00:03:35,459
I don't know maybe something you did to

00:03:32,810 --> 00:03:37,970
see my shorty sense started tingling

00:03:35,459 --> 00:03:41,610
tell me dude this can't be good

00:03:37,970 --> 00:03:43,709
component sizing it will I mean look

00:03:41,610 --> 00:03:46,019
there was a time like in the 90s late

00:03:43,709 --> 00:03:48,420
90s when doing web design and layout

00:03:46,019 --> 00:03:52,019
with nothing but table tags felt pretty

00:03:48,420 --> 00:03:54,420
amazing too and the next thing I knew I

00:03:52,019 --> 00:03:56,790
was loading up my Dom with steeps of TDs

00:03:54,420 --> 00:03:59,010
and TRS and call spans everywhere and

00:03:56,790 --> 00:04:00,959
Netscape Navigator came grinding to a

00:03:59,010 --> 00:04:03,239
halt I began to question my career

00:04:00,959 --> 00:04:08,160
choices and whether I should ever open

00:04:03,239 --> 00:04:10,140
up Macromedia Dreamweaver again those

00:04:08,160 --> 00:04:12,810
are dark times for me and I don't want

00:04:10,140 --> 00:04:14,160
to revisit them so I thought there has

00:04:12,810 --> 00:04:16,260
to be this price that we pay when we

00:04:14,160 --> 00:04:17,760
build with components but what do we

00:04:16,260 --> 00:04:22,710
need to know to really understand this

00:04:17,760 --> 00:04:24,030
cost this component tax well to begin

00:04:22,710 --> 00:04:26,280
with we need to understand what we're

00:04:24,030 --> 00:04:27,510
getting with components sure the fact

00:04:26,280 --> 00:04:30,570
that a component has a temp

00:04:27,510 --> 00:04:32,910
and some logic and some styles pretty

00:04:30,570 --> 00:04:36,570
straightforward and understandable but

00:04:32,910 --> 00:04:38,910
what are we really getting well with an

00:04:36,570 --> 00:04:40,530
angular platform we're getting an engine

00:04:38,910 --> 00:04:43,350
that will take those three pieces and

00:04:40,530 --> 00:04:45,240
render them we're getting an engine that

00:04:43,350 --> 00:04:47,130
will watch over a component tree and

00:04:45,240 --> 00:04:48,810
dependencies and change detection and

00:04:47,130 --> 00:04:51,810
handle orchestrating all that together

00:04:48,810 --> 00:04:53,340
and we're getting a compiler that will

00:04:51,810 --> 00:04:54,750
take these component pieces and build

00:04:53,340 --> 00:04:57,660
them into something efficient for that

00:04:54,750 --> 00:04:59,280
engine to use now angular needs to do

00:04:57,660 --> 00:05:01,560
these things for each component that we

00:04:59,280 --> 00:05:03,900
have in our application so if we have

00:05:01,560 --> 00:05:05,910
one component that handles all of our

00:05:03,900 --> 00:05:08,070
markup and logic angular just needs to

00:05:05,910 --> 00:05:09,660
do these things for one but if we start

00:05:08,070 --> 00:05:12,410
making components out of that markup and

00:05:09,660 --> 00:05:14,760
logic we're increasing this workload and

00:05:12,410 --> 00:05:16,680
when we talk about the compilation of

00:05:14,760 --> 00:05:18,090
components we need to understand that

00:05:16,680 --> 00:05:20,040
for each component that we add to our

00:05:18,090 --> 00:05:24,030
application we're adding to our

00:05:20,040 --> 00:05:26,100
JavaScript payload not only the HTML CSS

00:05:24,030 --> 00:05:28,440
and scripting which all get compiled

00:05:26,100 --> 00:05:29,970
down into JavaScript but also all the

00:05:28,440 --> 00:05:32,340
bits that angular needs to do its

00:05:29,970 --> 00:05:33,660
component thing and this is really the

00:05:32,340 --> 00:05:38,790
first component tax that we can identify

00:05:33,660 --> 00:05:40,860
the payload tax and as angular goes to

00:05:38,790 --> 00:05:42,660
do its components ring via the bootstrap

00:05:40,860 --> 00:05:45,720
of our application or the lazy loading

00:05:42,660 --> 00:05:47,040
of our routes it needs to make do prep

00:05:45,720 --> 00:05:49,440
work for all of these components that

00:05:47,040 --> 00:05:52,500
we've declared within our ng module and

00:05:49,440 --> 00:05:54,270
any reference ng modules and as angular

00:05:52,500 --> 00:05:56,100
does is rendering it's making display

00:05:54,270 --> 00:05:58,590
decisions and doing change detection on

00:05:56,100 --> 00:06:00,440
those components and these make up the

00:05:58,590 --> 00:06:05,100
second component X so we can identify

00:06:00,440 --> 00:06:07,710
the execution tax and look for these two

00:06:05,100 --> 00:06:10,170
line items that's just how it is it's

00:06:07,710 --> 00:06:12,510
part of the cost of admission but that's

00:06:10,170 --> 00:06:14,880
okay because we can do amazing things

00:06:12,510 --> 00:06:17,580
with this platform and as we've seen

00:06:14,880 --> 00:06:19,740
with the recent 4.0 release as a pattern

00:06:17,580 --> 00:06:22,080
from day one really is that the angular

00:06:19,740 --> 00:06:24,210
team keeps refining this platform to

00:06:22,080 --> 00:06:27,390
make it better and faster at doing these

00:06:24,210 --> 00:06:28,680
things but you know I mean it's

00:06:27,390 --> 00:06:30,450
different than just taking a bunch of

00:06:28,680 --> 00:06:33,270
markup and applying some scripting logic

00:06:30,450 --> 00:06:35,040
to it deciding to make a component for

00:06:33,270 --> 00:06:37,470
an item in a list instead of just

00:06:35,040 --> 00:06:40,080
putting that markup within an NG for has

00:06:37,470 --> 00:06:41,460
a cost to it and we need to understand

00:06:40,080 --> 00:06:43,580
these cost details

00:06:41,460 --> 00:06:46,800
in order to become component architects

00:06:43,580 --> 00:06:50,750
but when we do we start to gain clarity

00:06:46,800 --> 00:06:52,890
and this is when our watch really begins

00:06:50,750 --> 00:06:54,570
see there's these patterns that start to

00:06:52,890 --> 00:06:56,220
arise as we go deeper and deeper into

00:06:54,570 --> 00:06:59,940
building out applications and features

00:06:56,220 --> 00:07:01,650
in this component world for example we

00:06:59,940 --> 00:07:02,900
tend to take a custom element selector

00:07:01,650 --> 00:07:06,030
first approach when building our

00:07:02,900 --> 00:07:07,830
components we come up with an element

00:07:06,030 --> 00:07:09,330
name for our selectors and then we use

00:07:07,830 --> 00:07:11,250
that within other component templates

00:07:09,330 --> 00:07:13,680
and then we build out the mark-up that

00:07:11,250 --> 00:07:16,380
we want to render within that component

00:07:13,680 --> 00:07:17,940
and we quickly fill up our Dom with

00:07:16,380 --> 00:07:19,950
these custom elements everywhere that

00:07:17,940 --> 00:07:21,870
act as containers for the content that

00:07:19,950 --> 00:07:24,330
we really care about which is the guts

00:07:21,870 --> 00:07:26,760
of the template so the next component

00:07:24,330 --> 00:07:29,460
tax we can identify is the container

00:07:26,760 --> 00:07:30,870
element tax that custom element that

00:07:29,460 --> 00:07:33,750
we're creating where our template

00:07:30,870 --> 00:07:36,150
content goes we start to feel this tax

00:07:33,750 --> 00:07:38,160
when we build out components that use a

00:07:36,150 --> 00:07:42,120
container element as the top-level node

00:07:38,160 --> 00:07:43,800
of their template content for example we

00:07:42,120 --> 00:07:46,560
have this component here that's going to

00:07:43,800 --> 00:07:47,850
render a section element now it starts

00:07:46,560 --> 00:07:49,710
to feel weird that we're rendering that

00:07:47,850 --> 00:07:52,470
section element within a custom element

00:07:49,710 --> 00:07:54,510
I mean that custom l is not really

00:07:52,470 --> 00:07:56,520
needed for anything and the part that we

00:07:54,510 --> 00:07:58,830
really care about is the inner content

00:07:56,520 --> 00:08:00,150
of that section element and we start to

00:07:58,830 --> 00:08:02,610
feel this when it comes to styling

00:08:00,150 --> 00:08:04,860
because custom elements are not block

00:08:02,610 --> 00:08:06,330
level elements by default and if we need

00:08:04,860 --> 00:08:09,420
them to be we end up using something

00:08:06,330 --> 00:08:11,370
like : host to put it on and then we

00:08:09,420 --> 00:08:13,590
repeat this same pattern and all these

00:08:11,370 --> 00:08:15,660
other components in our application and

00:08:13,590 --> 00:08:17,700
because this markup in this seat the CSS

00:08:15,660 --> 00:08:19,350
is part of the component it's getting

00:08:17,700 --> 00:08:21,090
built down into our JavaScript payload

00:08:19,350 --> 00:08:23,340
and now we're paying this extra tax

00:08:21,090 --> 00:08:25,710
because now we got this markup in the

00:08:23,340 --> 00:08:27,090
styling which is not ideal and really

00:08:25,710 --> 00:08:30,600
not what we're trying to accomplish here

00:08:27,090 --> 00:08:32,670
yet we're increasing our payload no

00:08:30,600 --> 00:08:35,940
worries we can deal with this container

00:08:32,670 --> 00:08:38,100
element tax C in addition to element

00:08:35,940 --> 00:08:40,290
names we've got class names attribute

00:08:38,100 --> 00:08:42,540
names attribute name and value and even

00:08:40,290 --> 00:08:44,700
knot selector logic at our disposal for

00:08:42,540 --> 00:08:46,680
component selectors so we can start

00:08:44,700 --> 00:08:49,770
thinking in terms of targeting existing

00:08:46,680 --> 00:08:51,120
elements instead of a custom element so

00:08:49,770 --> 00:08:52,740
we could do things like target a native

00:08:51,120 --> 00:08:54,510
Dom element like our section element

00:08:52,740 --> 00:08:55,240
here by making use of an attribute

00:08:54,510 --> 00:08:57,040
selector

00:08:55,240 --> 00:08:58,839
component then we don't need that

00:08:57,040 --> 00:09:01,449
section element within our template and

00:08:58,839 --> 00:09:02,980
we can get a win out of the native block

00:09:01,449 --> 00:09:07,149
level elements so we don't need that

00:09:02,980 --> 00:09:08,499
added CSS so if component architects if

00:09:07,149 --> 00:09:10,209
we commit these component selector

00:09:08,499 --> 00:09:11,679
options to memory we're going to be

00:09:10,209 --> 00:09:14,139
better prepared to make sound decisions

00:09:11,679 --> 00:09:15,730
during the planning phases that will

00:09:14,139 --> 00:09:18,069
help us reduce this container element

00:09:15,730 --> 00:09:21,730
tax cost and mitigate some of the cost

00:09:18,069 --> 00:09:24,040
that we pay for that payload tax and you

00:09:21,730 --> 00:09:26,499
know we know the selector stuff because

00:09:24,040 --> 00:09:29,139
we use it for directives and a component

00:09:26,499 --> 00:09:32,139
is a subset of a directive so it makes

00:09:29,139 --> 00:09:33,610
perfect sense right but most of our

00:09:32,139 --> 00:09:35,199
training around components has been

00:09:33,610 --> 00:09:37,629
focused on custom element selectors

00:09:35,199 --> 00:09:39,819
which leads to examples being written

00:09:37,629 --> 00:09:41,709
that way which ultimately leads to us

00:09:39,819 --> 00:09:43,660
taking a custom element selector first

00:09:41,709 --> 00:09:46,929
approach when we build our applications

00:09:43,660 --> 00:09:48,579
and libraries see when we just consume

00:09:46,929 --> 00:09:50,199
and repeat and never journey in and

00:09:48,579 --> 00:09:52,749
discover we end up building somebody

00:09:50,199 --> 00:09:54,970
else's something but when we understand

00:09:52,749 --> 00:09:56,800
what's going on under the hood we

00:09:54,970 --> 00:10:02,439
empower ourselves to architect our

00:09:56,800 --> 00:10:04,360
something okay so the payload execution

00:10:02,439 --> 00:10:06,100
and container element taxes those who

00:10:04,360 --> 00:10:08,799
can identify in an individual component

00:10:06,100 --> 00:10:11,769
basis but what about when we start to

00:10:08,799 --> 00:10:13,149
craft compositions of components let's

00:10:11,769 --> 00:10:16,059
have a little discussion about the

00:10:13,149 --> 00:10:17,860
decision and presentation pattern the

00:10:16,059 --> 00:10:19,329
decision and presentation pattern is one

00:10:17,860 --> 00:10:21,899
in which we create these parent

00:10:19,329 --> 00:10:24,999
components that are only responsible for

00:10:21,899 --> 00:10:26,709
loading and altering data and then we

00:10:24,999 --> 00:10:28,059
create these child components that are

00:10:26,709 --> 00:10:30,490
only concerned with presenting data

00:10:28,059 --> 00:10:32,049
handed to them or requesting interaction

00:10:30,490 --> 00:10:35,439
back up out of them via the use of

00:10:32,049 --> 00:10:36,879
inputs and outputs and right off the bat

00:10:35,439 --> 00:10:38,670
we can see a benefit to this type of

00:10:36,879 --> 00:10:41,079
architecture or angular applications

00:10:38,670 --> 00:10:44,259
these presentation components become

00:10:41,079 --> 00:10:45,970
simpler they become easier to reuse we

00:10:44,259 --> 00:10:47,970
can set change detection on them on push

00:10:45,970 --> 00:10:50,999
and get better performance right all

00:10:47,970 --> 00:10:53,290
valuable things all worthwhile things

00:10:50,999 --> 00:10:54,579
but there's a tax in there that we start

00:10:53,290 --> 00:10:59,079
to pay as we build out with this

00:10:54,579 --> 00:11:01,509
architecture the tree coupling tax and

00:10:59,079 --> 00:11:03,819
we start to feel this tax as we build

00:11:01,509 --> 00:11:05,620
out our displays for these decision

00:11:03,819 --> 00:11:07,620
components because we start to couple

00:11:05,620 --> 00:11:10,210
our presentation components to it

00:11:07,620 --> 00:11:12,820
so let's take our scenario from earlier

00:11:10,210 --> 00:11:15,190
with the player cards right we've got

00:11:12,820 --> 00:11:16,900
this decision component that's going to

00:11:15,190 --> 00:11:19,120
handle loading the list of cards and

00:11:16,900 --> 00:11:20,710
we've got this presentation component

00:11:19,120 --> 00:11:22,930
that's going to handle displaying the

00:11:20,710 --> 00:11:25,480
card data and this worked out pretty

00:11:22,930 --> 00:11:27,490
well because in this decision component

00:11:25,480 --> 00:11:29,170
we can have a property for the cards and

00:11:27,490 --> 00:11:32,440
we have a method in there to upvote a

00:11:29,170 --> 00:11:35,410
card and then in the template we can ng4

00:11:32,440 --> 00:11:37,420
over the list of cards pass the car down

00:11:35,410 --> 00:11:39,790
to the presentation component via the

00:11:37,420 --> 00:11:43,720
input and then use the output to wire up

00:11:39,790 --> 00:11:46,660
to our upload action what happens when

00:11:43,720 --> 00:11:48,460
the day comes and it will that we go

00:11:46,660 --> 00:11:50,230
into our card component and we decide

00:11:48,460 --> 00:11:52,390
you know we could really benefit from

00:11:50,230 --> 00:11:55,390
making a component out of that upvote

00:11:52,390 --> 00:11:57,190
button well our new upvote button

00:11:55,390 --> 00:12:00,460
component it's going to need an output

00:11:57,190 --> 00:12:02,110
on it too broke up that action right but

00:12:00,460 --> 00:12:05,170
now we've added another component to our

00:12:02,110 --> 00:12:06,850
component tree and our list component is

00:12:05,170 --> 00:12:09,700
still the one responsible for making the

00:12:06,850 --> 00:12:11,770
decision to upload a card so now we've

00:12:09,700 --> 00:12:14,290
got to wire up our card component to our

00:12:11,770 --> 00:12:15,790
new upvote components output and we

00:12:14,290 --> 00:12:18,430
still need to wire up the list component

00:12:15,790 --> 00:12:19,720
to the card component output and all of

00:12:18,430 --> 00:12:21,040
that output there in the middle and that

00:12:19,720 --> 00:12:23,410
card component is only there for

00:12:21,040 --> 00:12:25,240
pass-through purposes and the more that

00:12:23,410 --> 00:12:27,700
we treat this thing out the more of that

00:12:25,240 --> 00:12:29,200
chaining we end up needing to do so now

00:12:27,700 --> 00:12:30,880
we think about not making so many

00:12:29,200 --> 00:12:33,490
components so we don't have to pay that

00:12:30,880 --> 00:12:35,260
tree coupling tax but that's not really

00:12:33,490 --> 00:12:37,060
where we want to be because there's good

00:12:35,260 --> 00:12:41,260
reasons to make these child pieces into

00:12:37,060 --> 00:12:44,260
components look everything's gotta tax

00:12:41,260 --> 00:12:46,090
as developers we're constantly battling

00:12:44,260 --> 00:12:49,600
to put queen sized sheets on a king

00:12:46,090 --> 00:12:51,850
sized bed and that's okay it's a give

00:12:49,600 --> 00:12:55,090
and take it's really about understanding

00:12:51,850 --> 00:12:57,210
our costs and making smart decisions on

00:12:55,090 --> 00:13:00,790
where we spend our architecture credits

00:12:57,210 --> 00:13:02,890
so what are our options here well we can

00:13:00,790 --> 00:13:04,630
make use of services we probably already

00:13:02,890 --> 00:13:05,980
have a card service that this list

00:13:04,630 --> 00:13:08,500
component is using to get the list of

00:13:05,980 --> 00:13:11,530
cards so we could add a method to that

00:13:08,500 --> 00:13:13,810
service to upload a card and then in our

00:13:11,530 --> 00:13:15,550
upvote component we could inject that

00:13:13,810 --> 00:13:17,170
service so that it could take action on

00:13:15,550 --> 00:13:20,200
that card and we wouldn't need that

00:13:17,170 --> 00:13:21,310
output chaining but now we need to have

00:13:20,200 --> 00:13:23,410
a way to get the

00:13:21,310 --> 00:13:25,210
card ID into this upload component so it

00:13:23,410 --> 00:13:27,160
knows which one to take action on right

00:13:25,210 --> 00:13:30,130
so we probably use maybe an input chain

00:13:27,160 --> 00:13:31,630
for that which I guess is better than an

00:13:30,130 --> 00:13:34,720
output chain because it doesn't have

00:13:31,630 --> 00:13:36,040
event emitters I don't know let's say

00:13:34,720 --> 00:13:38,860
we're okay with that trade-off right

00:13:36,040 --> 00:13:41,350
well how do we get the card component to

00:13:38,860 --> 00:13:42,940
update his view when it's upstream and

00:13:41,350 --> 00:13:46,000
this one's the one making the decision

00:13:42,940 --> 00:13:48,910
to change the data well we can update

00:13:46,000 --> 00:13:49,510
our service and return the cars as an

00:13:48,910 --> 00:13:51,430
observable

00:13:49,510 --> 00:13:54,640
then that way things could subscribe to

00:13:51,430 --> 00:13:57,010
it and get push updates but now we need

00:13:54,640 --> 00:13:58,870
to send this card service into any other

00:13:57,010 --> 00:14:00,670
component that needs to work with that

00:13:58,870 --> 00:14:04,960
car data so that it can subscribe and

00:14:00,670 --> 00:14:06,550
get updates and we quickly continue on

00:14:04,960 --> 00:14:08,589
from this and start building out other

00:14:06,550 --> 00:14:11,140
services to represent other entities in

00:14:08,589 --> 00:14:12,370
our application and if a component needs

00:14:11,140 --> 00:14:14,500
to work with three different entity

00:14:12,370 --> 00:14:16,660
types we end up injecting in three

00:14:14,500 --> 00:14:18,040
different services and if another

00:14:16,660 --> 00:14:19,750
component somewhere else you need to

00:14:18,040 --> 00:14:21,640
take action on a different entity type

00:14:19,750 --> 00:14:23,500
you know there needs that entity Service

00:14:21,640 --> 00:14:26,800
injected into it or need some other way

00:14:23,500 --> 00:14:29,140
to broker that action so this component

00:14:26,800 --> 00:14:31,330
tree and the need for the nodes within

00:14:29,140 --> 00:14:33,460
it to work in harmony yet not be coupled

00:14:31,330 --> 00:14:36,130
becomes a real architecture challenge

00:14:33,460 --> 00:14:37,660
for us and as this starts to play out we

00:14:36,130 --> 00:14:39,310
see where something like a Redux pattern

00:14:37,660 --> 00:14:41,890
to manage application state could be

00:14:39,310 --> 00:14:43,750
useful with a Redux pattern we have this

00:14:41,890 --> 00:14:45,940
concept of a store that keeps

00:14:43,750 --> 00:14:48,160
application state and exposes it being

00:14:45,940 --> 00:14:50,140
observable and then provides a way to

00:14:48,160 --> 00:14:52,750
dispatch actions to change that state

00:14:50,140 --> 00:14:54,700
and this works out pretty well because

00:14:52,750 --> 00:14:57,040
now we can start thinking about making

00:14:54,700 --> 00:14:59,680
our components our application deal just

00:14:57,040 --> 00:15:02,320
with a store so that may reduce some of

00:14:59,680 --> 00:15:04,750
that server server injection complexity

00:15:02,320 --> 00:15:06,190
and it allows us to start moving these

00:15:04,750 --> 00:15:08,500
components around both vertically and

00:15:06,190 --> 00:15:10,240
horizontally and even adding new

00:15:08,500 --> 00:15:12,160
components into the component remix

00:15:10,240 --> 00:15:16,420
without even worried about that coupling

00:15:12,160 --> 00:15:18,279
and that chaining as much so all of

00:15:16,420 --> 00:15:20,200
these approaches help but none of them

00:15:18,279 --> 00:15:22,720
truly eliminate the tree coupling tax

00:15:20,200 --> 00:15:24,610
what we begin to realize is that it's a

00:15:22,720 --> 00:15:27,220
combination of these in which our

00:15:24,610 --> 00:15:29,650
answers lie our understanding of them

00:15:27,220 --> 00:15:33,580
and ability to orchestrate them is where

00:15:29,650 --> 00:15:35,830
we're going to find harmony so

00:15:33,580 --> 00:15:38,350
let's say we're tasked with building out

00:15:35,830 --> 00:15:40,000
a tool that helps HQ attract a team of

00:15:38,350 --> 00:15:42,640
operatives as they infiltrate a

00:15:40,000 --> 00:15:44,320
flashpoint that's under duress and this

00:15:42,640 --> 00:15:46,570
tool is going to have a list of active

00:15:44,320 --> 00:15:48,370
team members on one side and a big giant

00:15:46,570 --> 00:15:50,950
map that shows the current location of

00:15:48,370 --> 00:15:53,920
each let's put our clutter architect

00:15:50,950 --> 00:15:55,390
hats on and go to work on this thing so

00:15:53,920 --> 00:15:58,839
we see the tool as a whole and we could

00:15:55,390 --> 00:16:00,610
identify that as a pageview right now

00:15:58,839 --> 00:16:02,620
this page view is going to be made up of

00:16:00,610 --> 00:16:05,140
a list and a map and those are going to

00:16:02,620 --> 00:16:06,820
be a composition of components because

00:16:05,140 --> 00:16:09,190
they're going to have child pieces that

00:16:06,820 --> 00:16:10,990
are unique to each of them but if we

00:16:09,190 --> 00:16:12,579
look closely we can see this common

00:16:10,990 --> 00:16:15,430
element that both of them used and

00:16:12,579 --> 00:16:17,470
that's this team member avatar coin we

00:16:15,430 --> 00:16:19,360
can identify that as a global component

00:16:17,470 --> 00:16:21,399
something we want available to the list

00:16:19,360 --> 00:16:24,250
and the map and the application as a

00:16:21,399 --> 00:16:25,839
whole and what we're as we break this

00:16:24,250 --> 00:16:28,570
thing down what we're doing here is this

00:16:25,839 --> 00:16:30,670
atomic design methodology a pattern that

00:16:28,570 --> 00:16:32,589
Brad Frost established to help tackle

00:16:30,670 --> 00:16:35,170
designing systems of components for the

00:16:32,589 --> 00:16:36,250
web and we can start using these

00:16:35,170 --> 00:16:38,050
solutions that we have at our disposal

00:16:36,250 --> 00:16:40,750
to tackle some of these design

00:16:38,050 --> 00:16:42,040
challenges so at the page view level

00:16:40,750 --> 00:16:44,200
let's say we want to leverage some

00:16:42,040 --> 00:16:45,550
native Dom elements like the aside and

00:16:44,200 --> 00:16:48,360
article well we could create those

00:16:45,550 --> 00:16:50,620
components using attribute selectors and

00:16:48,360 --> 00:16:52,180
that list and that map they're going to

00:16:50,620 --> 00:16:54,010
need to keep track of all the team

00:16:52,180 --> 00:16:56,079
members so they can get a team member

00:16:54,010 --> 00:16:58,899
service that makes use of an observable

00:16:56,079 --> 00:17:00,430
so that their data can stay in sync and

00:16:58,899 --> 00:17:02,649
that list in that map are going to be a

00:17:00,430 --> 00:17:04,390
composition of components so we could

00:17:02,649 --> 00:17:06,490
build those things out with the decision

00:17:04,390 --> 00:17:08,020
presentation pattern since we can see

00:17:06,490 --> 00:17:09,520
from our mock-up that they're not too

00:17:08,020 --> 00:17:12,730
complex so they're probably going to get

00:17:09,520 --> 00:17:14,439
that much tree task right and that team

00:17:12,730 --> 00:17:16,209
and Avatar coin we know we want that

00:17:14,439 --> 00:17:17,199
thing available to the app as a whole so

00:17:16,209 --> 00:17:20,290
we need to build that thing completely

00:17:17,199 --> 00:17:22,179
decoupled so we could use only inputs

00:17:20,290 --> 00:17:24,280
and outputs on that global component

00:17:22,179 --> 00:17:25,900
throw that thing into a shared energy

00:17:24,280 --> 00:17:29,250
module and then make it available to

00:17:25,900 --> 00:17:31,720
other energy modules in our application

00:17:29,250 --> 00:17:32,860
so we're able to make these architecture

00:17:31,720 --> 00:17:34,419
decisions because we have an

00:17:32,860 --> 00:17:36,309
understanding of how angular does is

00:17:34,419 --> 00:17:38,260
component thing and of the give-and-take

00:17:36,309 --> 00:17:41,530
to the potential approaches of the many

00:17:38,260 --> 00:17:43,300
scenarios that will arise and we have a

00:17:41,530 --> 00:17:45,640
clear picture of the cost to component

00:17:43,300 --> 00:17:47,090
size and can now calculate ways to bring

00:17:45,640 --> 00:17:50,450
balance to our architecture

00:17:47,090 --> 00:17:52,240
budget and with this newfound clarity

00:17:50,450 --> 00:17:57,279
we're able to make decisions with intent

00:17:52,240 --> 00:18:00,590
our decisions adapted for our scenarios

00:17:57,279 --> 00:18:03,679
now we can take a deep breath and relax

00:18:00,590 --> 00:18:06,289
and embrace this tranquil component

00:18:03,679 --> 00:18:08,919
landscape that lies before us as we step

00:18:06,289 --> 00:18:11,630
into our roles of component architects

00:18:08,919 --> 00:18:12,680
thank you may you all find component

00:18:11,630 --> 00:18:15,859
tranquility

00:18:12,680 --> 00:18:15,859

YouTube URL: https://www.youtube.com/watch?v=d7fLYenKy-I


