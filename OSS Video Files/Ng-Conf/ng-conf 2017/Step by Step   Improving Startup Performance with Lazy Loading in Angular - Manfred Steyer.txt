Title: Step by Step   Improving Startup Performance with Lazy Loading in Angular - Manfred Steyer
Publication date: 2017-04-07
Playlist: ng-conf 2017
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,030 --> 00:00:06,470
Thank You Maxime so hello everybody and

00:00:03,389 --> 00:00:09,809
welcome to this dock this talk is about

00:00:06,470 --> 00:00:12,300
improving startup performance with lazy

00:00:09,809 --> 00:00:15,480
loading but first of all let me

00:00:12,300 --> 00:00:18,270
introduce myself I am month red I'm a

00:00:15,480 --> 00:00:21,510
trained and consultant with focus on of

00:00:18,270 --> 00:00:24,420
course angular and I'm also part of the

00:00:21,510 --> 00:00:27,539
Google developer expert program which

00:00:24,420 --> 00:00:29,580
I'm very proud of I'm from Austria and

00:00:27,539 --> 00:00:32,189
I'm doing a lot of assignments in

00:00:29,580 --> 00:00:34,710
Germany and from time to time I'm

00:00:32,189 --> 00:00:37,710
writing my book is the book with the

00:00:34,710 --> 00:00:40,590
most ugly cover animal it has been

00:00:37,710 --> 00:00:43,620
published with Ã³rale in germany but

00:00:40,590 --> 00:00:46,170
anyway a key or not I'm very proud of it

00:00:43,620 --> 00:00:48,629
of course so what are the contents of

00:00:46,170 --> 00:00:51,690
this talk first of all I will talk about

00:00:48,629 --> 00:00:54,270
lazy loading I will show how to leverage

00:00:51,690 --> 00:00:57,809
lazy loading to improve the performance

00:00:54,270 --> 00:01:01,920
of your application and I will also talk

00:00:57,809 --> 00:01:04,979
about pre loading which compensates some

00:01:01,920 --> 00:01:07,890
issues that comes with pre loading with

00:01:04,979 --> 00:01:11,100
lazy loading in addition to that I will

00:01:07,890 --> 00:01:14,040
talk about an issue that arises when you

00:01:11,100 --> 00:01:17,040
are using lazy loading together with

00:01:14,040 --> 00:01:19,950
shared models and in addition to that I

00:01:17,040 --> 00:01:23,610
will also present two solutions for this

00:01:19,950 --> 00:01:26,460
issue but first things first let's start

00:01:23,610 --> 00:01:28,920
with lazy loading by the way a good

00:01:26,460 --> 00:01:31,259
friend of mine told me that I am very

00:01:28,920 --> 00:01:35,820
authentic when I'm talking about lazy

00:01:31,259 --> 00:01:37,860
things I'm not sure what he meant but I

00:01:35,820 --> 00:01:42,000
think it was some kind of compliment

00:01:37,860 --> 00:01:44,189
perhaps anyway what we are seeing here

00:01:42,000 --> 00:01:46,560
is that typically structure the

00:01:44,189 --> 00:01:49,259
typically model structure of an angular

00:01:46,560 --> 00:01:49,890
application we have this root model

00:01:49,259 --> 00:01:52,710
called

00:01:49,890 --> 00:01:55,470
earth model we have some future models

00:01:52,710 --> 00:01:59,070
and we have one or several shared models

00:01:55,470 --> 00:02:01,979
and normally angular is loading all

00:01:59,070 --> 00:02:04,079
those models at once all those models

00:02:01,979 --> 00:02:07,380
are normally loaded at once when the

00:02:04,079 --> 00:02:09,660
application starts and this is exactly

00:02:07,380 --> 00:02:12,000
where lazy loading comes into play

00:02:09,660 --> 00:02:13,260
because when you are going with lazy

00:02:12,000 --> 00:02:15,330
loading you can

00:02:13,260 --> 00:02:17,489
start with the first model of your

00:02:15,330 --> 00:02:20,760
application and then you can load

00:02:17,489 --> 00:02:23,040
further models on demand for instance on

00:02:20,760 --> 00:02:25,590
demand when the user clicks here or

00:02:23,040 --> 00:02:28,620
there you are loading the first feature

00:02:25,590 --> 00:02:31,890
model with two shared models it depends

00:02:28,620 --> 00:02:35,129
on then they use a click somewhere else

00:02:31,890 --> 00:02:37,980
you are loading a second feature model

00:02:35,129 --> 00:02:41,640
with another shared model it depends on

00:02:37,980 --> 00:02:43,730
and of course so you can load all the

00:02:41,640 --> 00:02:48,150
models you need for your application

00:02:43,730 --> 00:02:50,819
just on demand so what does it needs to

00:02:48,150 --> 00:02:53,220
get started with lazy loading all it

00:02:50,819 --> 00:02:55,920
needs is to use a special route a

00:02:53,220 --> 00:02:59,459
special routing configuration with this

00:02:55,920 --> 00:03:02,609
load children property lost children is

00:02:59,459 --> 00:03:05,489
pointing to the file in question to the

00:03:02,609 --> 00:03:08,549
file that contains your module you want

00:03:05,489 --> 00:03:11,549
to lazy reload it also contains this

00:03:08,549 --> 00:03:15,359
hash sign here as a separation character

00:03:11,549 --> 00:03:18,870
and then you have to append the name of

00:03:15,359 --> 00:03:21,540
your module class and this is more or

00:03:18,870 --> 00:03:24,389
less all you need to do when you want to

00:03:21,540 --> 00:03:27,150
load a module by the means of lazy

00:03:24,389 --> 00:03:30,209
loading of course now the question

00:03:27,150 --> 00:03:33,090
arises which route is activated when

00:03:30,209 --> 00:03:36,120
this very lazy loaded model gets

00:03:33,090 --> 00:03:39,690
activated and the answer can be found

00:03:36,120 --> 00:03:42,060
within the route of this model this

00:03:39,690 --> 00:03:45,389
model of course has its own route and

00:03:42,060 --> 00:03:48,690
there we can find perhaps and default

00:03:45,389 --> 00:03:50,940
route route with an empty bus and this

00:03:48,690 --> 00:03:55,159
is the route that gets activated when

00:03:50,940 --> 00:03:59,459
you are triggering lazy loading for a

00:03:55,159 --> 00:04:01,980
model in addition to that you need a

00:03:59,459 --> 00:04:04,609
special build configuration you need a

00:04:01,980 --> 00:04:08,069
build configuration that is just

00:04:04,609 --> 00:04:10,530
splitting your chunk into several chunks

00:04:08,069 --> 00:04:13,470
splitting your bundle into several

00:04:10,530 --> 00:04:14,310
bundles that can be lazy loaded of

00:04:13,470 --> 00:04:17,099
course

00:04:14,310 --> 00:04:19,769
when everything would end up in one and

00:04:17,099 --> 00:04:23,820
the same bundle lazy loading wouldn't

00:04:19,769 --> 00:04:27,010
make any sense and the good message here

00:04:23,820 --> 00:04:29,200
is that when you are using this CLI

00:04:27,010 --> 00:04:32,140
you are done your don't need to do

00:04:29,200 --> 00:04:35,230
anything else just use this you lie the

00:04:32,140 --> 00:04:35,710
CLI comes pre-configured with the so

00:04:35,230 --> 00:04:38,830
called

00:04:35,710 --> 00:04:42,130
ng tools loader and this loader

00:04:38,830 --> 00:04:44,890
is just taking care about splitting up

00:04:42,130 --> 00:04:48,820
your bundle into several chunks that can

00:04:44,890 --> 00:04:51,130
be lazy loaded so when you are directly

00:04:48,820 --> 00:04:53,620
going with that back because you need

00:04:51,130 --> 00:04:57,880
all the flexibility of that back then

00:04:53,620 --> 00:05:02,560
you can also use ng tools back the fill

00:04:57,880 --> 00:05:05,560
item is exposing this loader directly

00:05:02,560 --> 00:05:09,250
for the usage with that back so you

00:05:05,560 --> 00:05:13,240
don't need to use to seal high to get it

00:05:09,250 --> 00:05:16,030
and at this point your big thanks to the

00:05:13,240 --> 00:05:18,910
seal I team for exposing this part of

00:05:16,030 --> 00:05:22,810
the CLI to the rest of the world there

00:05:18,910 --> 00:05:25,660
is also alternative to it there is the

00:05:22,810 --> 00:05:29,230
angular router loader it has been around

00:05:25,660 --> 00:05:31,240
for quite a time and you can also use

00:05:29,230 --> 00:05:33,910
this angular route the loader with your

00:05:31,240 --> 00:05:36,430
own backpack configuration to make sure

00:05:33,910 --> 00:05:36,820
that your bundle is split up and once

00:05:36,430 --> 00:05:41,310
again

00:05:36,820 --> 00:05:46,290
big thanks to Brent Roberts at this time

00:05:41,310 --> 00:05:49,420
within the presentation cause Brent nice

00:05:46,290 --> 00:05:53,110
doing so much stuff for the community

00:05:49,420 --> 00:05:56,320
and sprintin has contributed this loader

00:05:53,110 --> 00:06:00,520
in very early days in very early days

00:05:56,320 --> 00:06:02,800
and so he helped us to get started with

00:06:00,520 --> 00:06:05,830
all those features when these features

00:06:02,800 --> 00:06:08,860
have been quite young so in general

00:06:05,830 --> 00:06:11,410
always there are two sides of the coin

00:06:08,860 --> 00:06:14,290
and this is also true when it comes to

00:06:11,410 --> 00:06:17,890
lazy loading lazy loading just means

00:06:14,290 --> 00:06:21,220
that we are loading some parts of the

00:06:17,890 --> 00:06:24,550
application later we are just postponing

00:06:21,220 --> 00:06:27,130
work and as you might know postponing

00:06:24,550 --> 00:06:30,490
work doesn't mean that the work is going

00:06:27,130 --> 00:06:33,580
away it just means the work has to been

00:06:30,490 --> 00:06:36,010
done later and this is the truth this is

00:06:33,580 --> 00:06:38,350
very true here first of all we get a

00:06:36,010 --> 00:06:40,390
better startup performance because we

00:06:38,350 --> 00:06:42,940
are postponing the load

00:06:40,390 --> 00:06:46,330
procedure but then during runtime of

00:06:42,940 --> 00:06:49,270
course we have to load the model in

00:06:46,330 --> 00:06:53,940
question and this causes a slight array

00:06:49,270 --> 00:06:58,180
ah not erase on a delay of course and

00:06:53,940 --> 00:07:01,390
this is exactly where reloading comes in

00:06:58,180 --> 00:07:04,000
pre loading helps with this issue

00:07:01,390 --> 00:07:07,270
the idea behind pre loading is quite

00:07:04,000 --> 00:07:10,540
easy the idea is that models that might

00:07:07,270 --> 00:07:13,750
be needed later are directly loaded

00:07:10,540 --> 00:07:16,630
after the application startup so first

00:07:13,750 --> 00:07:18,940
the application starts the user sees the

00:07:16,630 --> 00:07:21,640
first page of the application and then

00:07:18,940 --> 00:07:24,130
the application is just reloading all

00:07:21,640 --> 00:07:29,830
the other models so that are available

00:07:24,130 --> 00:07:32,350
immediately when they are needed so what

00:07:29,830 --> 00:07:34,930
does it take to get started with pre

00:07:32,350 --> 00:07:37,840
loading it doesn't take much you just

00:07:34,930 --> 00:07:40,210
need to register a pre loading strategy

00:07:37,840 --> 00:07:43,060
and you are doing this when you are

00:07:40,210 --> 00:07:45,970
setting up the routes for your routes

00:07:43,060 --> 00:07:48,070
model and this is exactly what I'm doing

00:07:45,970 --> 00:07:50,800
here on this light here I'm calling

00:07:48,070 --> 00:07:53,830
route the module for route I'm passing

00:07:50,800 --> 00:07:56,200
in my route configuration array the

00:07:53,830 --> 00:07:58,930
array with all the mappings between the

00:07:56,200 --> 00:08:01,930
Buffs and the components and I'm also

00:07:58,930 --> 00:08:04,540
passing in this parameter object and as

00:08:01,930 --> 00:08:07,600
you see here this parameter object is

00:08:04,540 --> 00:08:10,030
just registering every loading strategy

00:08:07,600 --> 00:08:13,810
it is using the pre loading strategy

00:08:10,030 --> 00:08:16,390
preload all models this is a baked in

00:08:13,810 --> 00:08:19,600
Bree loading strategy pre loading

00:08:16,390 --> 00:08:22,900
strategy angular offers and as the name

00:08:19,600 --> 00:08:25,390
suggests it is just reloading all the

00:08:22,900 --> 00:08:28,960
models that are configured for lazy

00:08:25,390 --> 00:08:31,780
loading you can also write your own Bree

00:08:28,960 --> 00:08:33,850
loading strategies very easily it is

00:08:31,780 --> 00:08:36,700
just a matter of implementing an

00:08:33,850 --> 00:08:39,880
interface of implementing one and only

00:08:36,700 --> 00:08:44,080
one methods and this one method decides

00:08:39,880 --> 00:08:47,980
whether or van a specific module is pre

00:08:44,080 --> 00:08:50,830
loaded so let's have a look at the

00:08:47,980 --> 00:08:53,720
demonstration let's find out if this guy

00:08:50,830 --> 00:08:58,610
here on the stage is saying the truth

00:08:53,720 --> 00:09:01,250
for this I'm switching to a sample app

00:08:58,610 --> 00:09:03,920
I've prepared this sample app is about

00:09:01,250 --> 00:09:07,430
booking flights I'm using the sample app

00:09:03,920 --> 00:09:10,760
to show many aspects of angular and this

00:09:07,430 --> 00:09:14,390
sample app has something I have invented

00:09:10,760 --> 00:09:20,780
I'm calling it log in for very honest

00:09:14,390 --> 00:09:23,690
people yeah so I've found out that when

00:09:20,780 --> 00:09:26,690
everyone is honest everything is much

00:09:23,690 --> 00:09:29,090
more easy in this world so I can log in

00:09:26,690 --> 00:09:31,520
here and then I can switch to book a

00:09:29,090 --> 00:09:34,010
flight and here I can search of course

00:09:31,520 --> 00:09:36,680
for a flight I can also search for a

00:09:34,010 --> 00:09:39,530
passenger and when I'm locked in then

00:09:36,680 --> 00:09:41,930
the current users name is proposed here

00:09:39,530 --> 00:09:45,230
for the best and research so currently

00:09:41,930 --> 00:09:48,860
the name max is proposed then I'm not

00:09:45,230 --> 00:09:51,800
logged in then nothing is proposed here

00:09:48,860 --> 00:09:54,860
so please keep this in mind we will need

00:09:51,800 --> 00:09:57,470
this a bit later so currently this

00:09:54,860 --> 00:10:00,740
application is just loading everything

00:09:57,470 --> 00:10:03,800
mint application stats but now I want to

00:10:00,740 --> 00:10:07,400
switch to lazy loading and for this I'm

00:10:03,800 --> 00:10:12,200
switching to my editor here I have the

00:10:07,400 --> 00:10:14,960
routes of my of my routes model this

00:10:12,200 --> 00:10:17,750
route mode will have this empty route it

00:10:14,960 --> 00:10:20,870
has this route for home and here I will

00:10:17,750 --> 00:10:26,110
just add another route a route that is

00:10:20,870 --> 00:10:29,240
called flight search above flight search

00:10:26,110 --> 00:10:31,880
ya and together with flight search I'm

00:10:29,240 --> 00:10:34,880
using this property that is called load

00:10:31,880 --> 00:10:38,600
children and load children as mentioned

00:10:34,880 --> 00:10:41,300
has to point to the model in question I

00:10:38,600 --> 00:10:48,680
have to point to the model file the name

00:10:41,300 --> 00:10:57,070
of it is flight booking / flight booking

00:10:48,680 --> 00:10:57,070
module and

00:10:57,100 --> 00:11:01,990
then I have to advance the name of the

00:10:59,500 --> 00:11:06,730
class and the name of the class is also

00:11:01,990 --> 00:11:19,630
flight booking model so let me just take

00:11:06,730 --> 00:11:22,660
a bit of water okay fine so this is my

00:11:19,630 --> 00:11:25,410
route that is triggering lazy loading

00:11:22,660 --> 00:11:28,510
let's also have a look to the route

00:11:25,410 --> 00:11:30,810
configuration for this lazy loaded model

00:11:28,510 --> 00:11:34,870
let's have a look into the flight

00:11:30,810 --> 00:11:37,180
booking routes within this flight

00:11:34,870 --> 00:11:40,420
booking routes I have a main route and

00:11:37,180 --> 00:11:43,570
this route is called flight booking but

00:11:40,420 --> 00:11:46,930
we have another flight booking route as

00:11:43,570 --> 00:11:48,940
we have seen before this flight booking

00:11:46,930 --> 00:11:51,310
route is triggering lazy loading and

00:11:48,940 --> 00:11:54,960
because of this I am switching here to

00:11:51,310 --> 00:11:58,150
an empty bus so that this route is

00:11:54,960 --> 00:12:02,680
directly activated when we are loading

00:11:58,150 --> 00:12:06,790
our lazy loaded model let's also have a

00:12:02,680 --> 00:12:10,650
look to our app model here I'm

00:12:06,790 --> 00:12:13,660
referencing the flight booking model

00:12:10,650 --> 00:12:15,940
referencing a model that is lazy loaded

00:12:13,660 --> 00:12:18,420
isn't a good idea because when a

00:12:15,940 --> 00:12:21,430
bundling solution like that bag is

00:12:18,420 --> 00:12:23,710
detecting this reference this solution

00:12:21,430 --> 00:12:26,290
will follow the reference and the

00:12:23,710 --> 00:12:29,140
solution will take everything that can

00:12:26,290 --> 00:12:32,230
be found under this reference and put it

00:12:29,140 --> 00:12:34,780
into the main bundle and as mentioned

00:12:32,230 --> 00:12:37,270
before when everything ends up in the

00:12:34,780 --> 00:12:41,550
main bundle lazy loading is impossible

00:12:37,270 --> 00:12:51,100
so we have to make sure to omit every

00:12:41,550 --> 00:12:53,140
reference to lazy loaded models II so

00:12:51,100 --> 00:12:55,930
when I've done everything correctly

00:12:53,140 --> 00:12:59,230
I should end up with another bundle and

00:12:55,930 --> 00:13:03,100
here it is my CLI has created a bundle

00:12:59,230 --> 00:13:05,740
with the name v chunk chairs so the CLI

00:13:03,100 --> 00:13:08,680
and that back in general is just giving

00:13:05,740 --> 00:13:10,899
numbers to my bundles and I can

00:13:08,680 --> 00:13:13,209
configure this to get pretty names

00:13:10,899 --> 00:13:17,319
for this demonstration I'm just going

00:13:13,209 --> 00:13:18,309
with numbers so let's switch back to our

00:13:17,319 --> 00:13:22,470
application

00:13:18,309 --> 00:13:26,410
let's switch into our network tab and

00:13:22,470 --> 00:13:30,910
let's reload the application and here we

00:13:26,410 --> 00:13:35,860
are seeing that everything is loaded

00:13:30,910 --> 00:13:39,999
everything but the five chunk chess but

00:13:35,860 --> 00:13:43,420
then I'm switching to book of life when

00:13:39,999 --> 00:13:43,959
I'm switching to book a flight nothing

00:13:43,420 --> 00:13:51,899
happens

00:13:43,959 --> 00:13:57,579
which is quite a pity well come on

00:13:51,899 --> 00:14:03,100
so let's me save this again I've got my

00:13:57,579 --> 00:14:08,230
bundle my five chairs let's try it again

00:14:03,100 --> 00:14:10,509
no nothing happens so the demo gods

00:14:08,230 --> 00:14:14,829
aren't on my side let's double-check

00:14:10,509 --> 00:14:22,990
here I have my model here I have my

00:14:14,829 --> 00:14:25,240
flight booking routes here buddy the

00:14:22,990 --> 00:14:29,699
import should go away it should be

00:14:25,240 --> 00:14:29,699
removed by the typescript compiler a

00:14:30,179 --> 00:14:52,199
comma there is a comma missing okay

00:14:37,059 --> 00:14:54,179
so somewhere here you think button okay

00:14:52,199 --> 00:14:59,249
here somewhere

00:14:54,179 --> 00:14:59,249
no ah no I see yeah

00:15:01,500 --> 00:15:12,030
twenty-one okay yeah I don't think that

00:15:04,660 --> 00:15:19,080
this is the issue let's try it again

00:15:12,030 --> 00:15:19,080
nothing happens after droughts okay ah

00:15:23,070 --> 00:15:30,970
here thank you you've saved me flight

00:15:27,880 --> 00:15:35,710
booking of course so when the name is

00:15:30,970 --> 00:15:36,820
correct everything should work yeah

00:15:35,710 --> 00:15:40,710
thank you

00:15:36,820 --> 00:15:40,710
take a blouse to my friend here okay

00:15:41,990 --> 00:15:48,040
[Applause]

00:15:43,950 --> 00:15:52,000
thank you and have you seen now my file

00:15:48,040 --> 00:15:55,090
is loaded now we can see that the file

00:15:52,000 --> 00:15:57,430
five chest gets loaded on demand so

00:15:55,090 --> 00:16:00,330
nothing is loaded i switch to book a

00:15:57,430 --> 00:16:05,560
flight and here we have five Chunk chess

00:16:00,330 --> 00:16:09,060
awesome isn't it so you have also seen

00:16:05,560 --> 00:16:11,290
this loading indicator haven't you I'm

00:16:09,060 --> 00:16:14,770
switching to book a flight loading

00:16:11,290 --> 00:16:18,010
indicator it takes some seconds to load

00:16:14,770 --> 00:16:20,800
this additional chunk of which is of

00:16:18,010 --> 00:16:24,570
course an issue especially when there is

00:16:20,800 --> 00:16:28,750
low bandwidth and this issue can be

00:16:24,570 --> 00:16:30,940
prevented by using pre loading for this

00:16:28,750 --> 00:16:36,420
I'm switching back to my application I'm

00:16:30,940 --> 00:16:39,940
going down to the point where I'm using

00:16:36,420 --> 00:16:43,390
the routes where I'm calling router

00:16:39,940 --> 00:16:46,500
model for route and here I'm passing

00:16:43,390 --> 00:16:56,830
something like this parameter object a

00:16:46,500 --> 00:16:59,200
parameter object with reloading strategy

00:16:56,830 --> 00:17:01,920
and here I'm going as mentioned with

00:16:59,200 --> 00:17:05,790
preload all models so I'm saving it

00:17:01,920 --> 00:17:11,459
let's switch back to my application

00:17:05,790 --> 00:17:11,459
let's clear this reloads

00:17:11,949 --> 00:17:20,120
and we see that our chunk five chunk

00:17:17,240 --> 00:17:22,910
chess is loaded but is this loaded quite

00:17:20,120 --> 00:17:25,579
late so then we look here it is slow

00:17:22,910 --> 00:17:27,829
that hopefully after the user has seen

00:17:25,579 --> 00:17:31,430
the first page of the application after

00:17:27,829 --> 00:17:36,680
the user is about to decide where to

00:17:31,430 --> 00:17:40,480
click next so it is just triggered after

00:17:36,680 --> 00:17:43,970
two seconds cool so it seems like

00:17:40,480 --> 00:17:46,640
reloading and lazy loading works so

00:17:43,970 --> 00:17:49,070
let's switch to book a flight I'm

00:17:46,640 --> 00:17:51,230
locking in again I'm switching to book a

00:17:49,070 --> 00:17:54,500
flight I'm switching to search passenger

00:17:51,230 --> 00:17:57,080
and as you see we are seeing nothing

00:17:54,500 --> 00:18:00,200
there is nothing proposed anymore

00:17:57,080 --> 00:18:02,990
so somehow we've broken our application

00:18:00,200 --> 00:18:06,080
did we before the current user's name

00:18:02,990 --> 00:18:09,920
was the chested here and now there is

00:18:06,080 --> 00:18:16,120
such as the chest at nothing so what did

00:18:09,920 --> 00:18:16,120
happen here let me explain what happens

00:18:26,520 --> 00:18:32,970
it is that I seem to have catch a flu

00:18:30,000 --> 00:18:36,300
and the second thing that happens is

00:18:32,970 --> 00:18:38,130
that we have these three models here we

00:18:36,300 --> 00:18:41,130
have the app model we have the flight

00:18:38,130 --> 00:18:44,070
model and we have a shared model and the

00:18:41,130 --> 00:18:46,470
shared model has an off service and the

00:18:44,070 --> 00:18:49,080
off service is remembering the current

00:18:46,470 --> 00:18:51,330
user's name it is remembering that the

00:18:49,080 --> 00:18:55,590
user is locked in and that the user has

00:18:51,330 --> 00:18:58,440
the name Max and the problematic point

00:18:55,590 --> 00:19:00,960
here is that a lazy loaded model gets

00:18:58,440 --> 00:19:04,740
its own dependency injection scope and

00:19:00,960 --> 00:19:07,650
so it gets its own instance of the off

00:19:04,740 --> 00:19:11,190
service and this is quite a pity because

00:19:07,650 --> 00:19:14,460
here we are ending up with two instances

00:19:11,190 --> 00:19:17,940
of a single and as you might know from

00:19:14,460 --> 00:19:21,660
every good western movie this town isn't

00:19:17,940 --> 00:19:24,780
big enough for two things and so we have

00:19:21,660 --> 00:19:28,680
somehow get rid of this second signior

00:19:24,780 --> 00:19:31,050
and the good message about this is that

00:19:28,680 --> 00:19:33,900
everything that can't be found within

00:19:31,050 --> 00:19:37,440
the current dependency injector is

00:19:33,900 --> 00:19:39,780
looked up one level above and this level

00:19:37,440 --> 00:19:42,270
above is your take leoben level the

00:19:39,780 --> 00:19:45,660
level that has this global of service

00:19:42,270 --> 00:19:47,910
where the user is out indicated so

00:19:45,660 --> 00:19:50,640
indeed everything we need to accomplish

00:19:47,910 --> 00:19:53,430
is to get rid of this off service here

00:19:50,640 --> 00:19:56,460
and it is quite easy to get rid of it

00:19:53,430 --> 00:19:58,880
there are two patterns you can go with

00:19:56,460 --> 00:20:02,210
the first pattern is documented

00:19:58,880 --> 00:20:05,730
somewhere within the angular Doc's it

00:20:02,210 --> 00:20:09,180
says that you shall use a core model

00:20:05,730 --> 00:20:12,570
equal model that gets all the global

00:20:09,180 --> 00:20:16,110
providers global providers like the off

00:20:12,570 --> 00:20:18,540
service and this core model is only

00:20:16,110 --> 00:20:21,570
allowed to be imported into the app

00:20:18,540 --> 00:20:26,730
model by doing this you are guaranteeing

00:20:21,570 --> 00:20:29,790
that this off service is just a created

00:20:26,730 --> 00:20:32,610
provided globally globally for the whole

00:20:29,790 --> 00:20:35,340
application this is the first solution

00:20:32,610 --> 00:20:38,790
to this but then you are going with the

00:20:35,340 --> 00:20:40,230
solution you very easily end up with a

00:20:38,790 --> 00:20:44,130
very very whoo

00:20:40,230 --> 00:20:46,679
which core model and this is problematic

00:20:44,130 --> 00:20:50,280
it is also problematic because this

00:20:46,679 --> 00:20:53,520
pattern is splitting up your composition

00:20:50,280 --> 00:20:56,610
it is splitting up your shared model

00:20:53,520 --> 00:20:59,490
into the shared model and into a core

00:20:56,610 --> 00:21:02,309
model but and that's why I am preferring

00:20:59,490 --> 00:21:04,559
another solution and the solution is

00:21:02,309 --> 00:21:07,470
intended for libraries but you can also

00:21:04,559 --> 00:21:10,049
use it with your own code you find this

00:21:07,470 --> 00:21:12,600
pattern for instance within the router

00:21:10,049 --> 00:21:15,179
itself you find this pattern for

00:21:12,600 --> 00:21:18,720
instance within third party vendor

00:21:15,179 --> 00:21:20,820
libraries like entry ex translate then

00:21:18,720 --> 00:21:23,610
you are going with this pattern I would

00:21:20,820 --> 00:21:26,520
suggest to create a dedicated shared

00:21:23,610 --> 00:21:29,970
module like an off module you are seeing

00:21:26,520 --> 00:21:32,880
it here and then and now it is getting a

00:21:29,970 --> 00:21:36,809
bit awkward this of module has to be

00:21:32,880 --> 00:21:39,270
provided in two flavors one flavor comes

00:21:36,809 --> 00:21:42,270
with services and one flavor comes

00:21:39,270 --> 00:21:44,910
without and I know it sounds a bit

00:21:42,270 --> 00:21:48,179
awkward that we have to provide our

00:21:44,910 --> 00:21:50,640
model in two versions but that is the

00:21:48,179 --> 00:21:53,429
pattern and as mentioned this pattern is

00:21:50,640 --> 00:21:56,850
widely adopted and angular makes it very

00:21:53,429 --> 00:21:59,630
easy to implement this pattern the

00:21:56,850 --> 00:22:03,210
version with the service providers is

00:21:59,630 --> 00:22:05,669
included into the app model and the

00:22:03,210 --> 00:22:08,370
other version is included into all other

00:22:05,669 --> 00:22:11,429
models that needs the declarations of

00:22:08,370 --> 00:22:13,640
this model some components or pipes for

00:22:11,429 --> 00:22:17,400
instance and so you are again

00:22:13,640 --> 00:22:21,419
guaranteeing that the services are just

00:22:17,400 --> 00:22:24,690
registered within the global dependency

00:22:21,419 --> 00:22:30,330
injection scope and in nothing other

00:22:24,690 --> 00:22:33,419
scope so in addition to that you have to

00:22:30,330 --> 00:22:35,700
write your model and first of all you

00:22:33,419 --> 00:22:39,390
are writing the model without providers

00:22:35,700 --> 00:22:43,830
to emphasize this I have just created an

00:22:39,390 --> 00:22:46,890
empty provider array here and then you

00:22:43,830 --> 00:22:49,890
are creating a static method this method

00:22:46,890 --> 00:22:51,990
is normally called for a route I think

00:22:49,890 --> 00:22:53,539
you know this method from the router and

00:22:51,990 --> 00:22:56,440
from other tools

00:22:53,539 --> 00:23:00,559
this method is just returning something

00:22:56,440 --> 00:23:03,350
Vista type model with providers a model

00:23:00,559 --> 00:23:06,559
with providers is nothing else than a

00:23:03,350 --> 00:23:09,139
pre-existing model that is expanded by

00:23:06,559 --> 00:23:11,570
some service providers and this is

00:23:09,139 --> 00:23:14,059
exactly what happens here here at this

00:23:11,570 --> 00:23:17,570
slide you are seeing that I'm going with

00:23:14,059 --> 00:23:20,179
my existing off model and I'm adding my

00:23:17,570 --> 00:23:27,889
providers for instance my off service to

00:23:20,179 --> 00:23:30,320
this off model so after this you are

00:23:27,889 --> 00:23:33,470
using the four routes version of your

00:23:30,320 --> 00:23:35,659
model with your routes model normally

00:23:33,470 --> 00:23:37,789
this is the app model and that in

00:23:35,659 --> 00:23:40,369
addition to that you are using your off

00:23:37,789 --> 00:23:42,950
model without for route with all the

00:23:40,369 --> 00:23:47,179
other models you needed of course you

00:23:42,950 --> 00:23:49,460
can write some nifty other method for

00:23:47,179 --> 00:23:52,249
the other models the route of for

00:23:49,460 --> 00:23:57,109
instance has this four child model you

00:23:52,249 --> 00:24:06,470
could use your so let's have a look at a

00:23:57,109 --> 00:24:13,639
demonstration for this let's switch into

00:24:06,470 --> 00:24:18,080
our application and let's have a look

00:24:13,639 --> 00:24:20,690
into the shared model the shared model

00:24:18,080 --> 00:24:23,149
is quite huge and here it is just

00:24:20,690 --> 00:24:27,739
setting up the provider for the off

00:24:23,149 --> 00:24:29,960
service I'm taking this out and I'm

00:24:27,739 --> 00:24:34,849
switching to another file I have

00:24:29,960 --> 00:24:40,700
prepared the file is called off model so

00:24:34,849 --> 00:24:45,259
this file is almost empty and here I'm

00:24:40,700 --> 00:24:54,080
just abandon a model and the model is

00:24:45,259 --> 00:24:56,960
called half model so I don't have

00:24:54,080 --> 00:24:58,849
anything to the cure but here I could

00:24:56,960 --> 00:25:03,320
declare for instance

00:24:58,849 --> 00:25:06,950
a login component a logout component a

00:25:03,320 --> 00:25:09,499
user status component whatever

00:25:06,950 --> 00:25:12,830
and the important thing here is that the

00:25:09,499 --> 00:25:16,659
providers array is empty it is empty and

00:25:12,830 --> 00:25:21,169
it stays empty and in addition to this I

00:25:16,659 --> 00:25:23,690
just create a static four routes method

00:25:21,169 --> 00:25:26,869
and the aesthetic four root method is

00:25:23,690 --> 00:25:30,580
returning as mentioned model with

00:25:26,869 --> 00:25:34,909
providers and this is just an ordinary

00:25:30,580 --> 00:25:39,289
structure that is pointing to my very

00:25:34,909 --> 00:25:43,070
own of model and pointing to my

00:25:39,289 --> 00:25:46,489
providers and here I'm going of course

00:25:43,070 --> 00:25:51,769
with my off service provider so I'm

00:25:46,489 --> 00:25:55,779
importing this thing here I'm importing

00:25:51,769 --> 00:25:55,779
this other thing this other component

00:25:56,139 --> 00:26:01,909
okay

00:25:57,590 --> 00:26:02,749
perfect so let's give the CLI some time

00:26:01,909 --> 00:26:07,999
to rebound

00:26:02,749 --> 00:26:10,399
perhaps this Eli has finished and before

00:26:07,999 --> 00:26:13,279
we are switching to our application I am

00:26:10,399 --> 00:26:16,700
just registering this off model for this

00:26:13,279 --> 00:26:22,039
I'm switching to the app model and here

00:26:16,700 --> 00:26:26,799
I'm importing the off model with the

00:26:22,039 --> 00:26:26,799
services of model dot for routes

00:26:36,250 --> 00:26:42,980
of course with each other model for

00:26:40,850 --> 00:26:47,390
instance with the flight booking model

00:26:42,980 --> 00:26:50,020
we could also import this off model but

00:26:47,390 --> 00:26:52,580
without calling for routes let's do this

00:26:50,020 --> 00:26:57,850
for a demonstration purpose I'm

00:26:52,580 --> 00:27:01,850
switching to flight booking model and

00:26:57,850 --> 00:27:06,679
Here I am just importing my off model

00:27:01,850 --> 00:27:10,280
without forward ok so as mentioned let's

00:27:06,679 --> 00:27:12,950
give the CLI some time to recompile so

00:27:10,280 --> 00:27:17,540
it is complaining of model is not a

00:27:12,950 --> 00:27:24,429
model I am not believing this and not

00:27:17,540 --> 00:27:24,429
believing this let's resave this yeah

00:27:24,520 --> 00:27:32,990
yeah issues so let's retry this I'm

00:27:29,270 --> 00:27:37,040
reloading my application I'm logging in

00:27:32,990 --> 00:27:39,050
I'm Mexican and I'm switching to book a

00:27:37,040 --> 00:27:41,240
flight and then I want to click on

00:27:39,050 --> 00:27:45,320
search passenger shall I do it

00:27:41,240 --> 00:27:48,490
yeah okay let's try it yeah it works

00:27:45,320 --> 00:27:48,490
wonderful wonderful

00:27:50,489 --> 00:27:55,450
so it turns out the guy here in the

00:27:53,200 --> 00:28:01,720
front is saying the truth which is a

00:27:55,450 --> 00:28:04,539
wonderful thing okay so let me sum up

00:28:01,720 --> 00:28:06,820
what did we see we have seen that lazy

00:28:04,539 --> 00:28:09,429
loading can improve your startup

00:28:06,820 --> 00:28:11,320
performance because you don't need to

00:28:09,429 --> 00:28:13,480
load everything when the application

00:28:11,320 --> 00:28:17,350
starts but just your let's say

00:28:13,480 --> 00:28:20,289
application shell and then you also need

00:28:17,350 --> 00:28:23,190
a built configuration that is splitting

00:28:20,289 --> 00:28:26,169
up your whole bundle into several chunks

00:28:23,190 --> 00:28:29,710
several chunks that can be loaded by the

00:28:26,169 --> 00:28:33,100
means of lazy loading we have also seen

00:28:29,710 --> 00:28:35,409
that pre loading helps to prevent this

00:28:33,100 --> 00:28:38,320
delay during the execution of the

00:28:35,409 --> 00:28:42,009
application this delay that happens when

00:28:38,320 --> 00:28:44,499
the model in question is lazy loaded we

00:28:42,009 --> 00:28:46,690
have also seen that there is this

00:28:44,499 --> 00:28:49,809
pattern with the core model that

00:28:46,690 --> 00:28:53,279
bypasses this issue that arises when you

00:28:49,809 --> 00:28:56,440
are using shared models together with

00:28:53,279 --> 00:28:59,019
with lazy loading and you have seen this

00:28:56,440 --> 00:29:02,379
other pattern that is implemented by the

00:28:59,019 --> 00:29:05,470
router and by some other libraries and

00:29:02,379 --> 00:29:08,230
this pattern allows you to provide

00:29:05,470 --> 00:29:10,989
bangshi at module one for perhaps

00:29:08,230 --> 00:29:13,659
dedicated shared module in two flavors

00:29:10,989 --> 00:29:16,389
one flavor comes with the services and

00:29:13,659 --> 00:29:18,970
it is intended for the root model and

00:29:16,389 --> 00:29:21,879
another flavor comes without services

00:29:18,970 --> 00:29:25,629
and it is indented for the other models

00:29:21,879 --> 00:29:29,169
so thanks for coming you will find all I

00:29:25,629 --> 00:29:31,960
have shown here on my blog Software

00:29:29,169 --> 00:29:34,239
Architect 80 and I will of course suite

00:29:31,960 --> 00:29:35,190
a about it so thanks for coming and have

00:29:34,239 --> 00:29:36,130
a nice conference

00:29:35,190 --> 00:29:39,319
[Applause]

00:29:36,130 --> 00:29:39,319

YouTube URL: https://www.youtube.com/watch?v=8VLYjt81-fE


