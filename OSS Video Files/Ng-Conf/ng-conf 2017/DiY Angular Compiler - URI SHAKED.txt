Title: DiY Angular Compiler - URI SHAKED
Publication date: 2017-04-06
Playlist: ng-conf 2017
Description: 
	https://medium.com/@urish/angular-and-accessibility-8ae1f601803a

www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:06,020 --> 00:00:14,969
so hi everybody today we are going to

00:00:12,090 --> 00:00:17,580
talk about the angular compiler how many

00:00:14,969 --> 00:00:20,990
of you have been to Tobias talked

00:00:17,580 --> 00:00:25,650
yesterday at 5 p.m. about the compiler

00:00:20,990 --> 00:00:27,539
all right cool so you're already have

00:00:25,650 --> 00:00:31,800
some background information which is

00:00:27,539 --> 00:00:36,450
great and what we are going to do today

00:00:31,800 --> 00:00:40,010
is to get your laptop south and hack on

00:00:36,450 --> 00:00:42,510
the angular compiler to learn by doing

00:00:40,010 --> 00:00:45,210
so the first thing before I even

00:00:42,510 --> 00:00:48,090
introduced myself I would like you all

00:00:45,210 --> 00:00:51,289
to open your shell or your command

00:00:48,090 --> 00:00:57,899
prompt make sure you have the latest

00:00:51,289 --> 00:01:02,100
angular CLI version that is 1.00 not RC

00:00:57,899 --> 00:01:05,100
naught beta just 1.0 if you don't have

00:01:02,100 --> 00:01:07,740
the latest version just npm install - G

00:01:05,100 --> 00:01:11,939
at angular let's feel like we are going

00:01:07,740 --> 00:01:15,119
to need it shortly and as you probably

00:01:11,939 --> 00:01:20,189
know it's not fun - 8 for NPM to finish

00:01:15,119 --> 00:01:21,450
installing so with that let me introduce

00:01:20,189 --> 00:01:25,740
myself real quick

00:01:21,450 --> 00:01:28,829
so as Alyssa said I'm worried I'm one of

00:01:25,740 --> 00:01:31,460
the Google developer experts I also love

00:01:28,829 --> 00:01:35,700
robotics and electronics I do a lot of

00:01:31,460 --> 00:01:37,619
project with electronics and smart

00:01:35,700 --> 00:01:41,369
devices I will show you one quick

00:01:37,619 --> 00:01:44,640
example that I presented here last year

00:01:41,369 --> 00:01:46,740
on ng-conf a little 3d printed robot

00:01:44,640 --> 00:01:49,850
that you could control from any webpage

00:01:46,740 --> 00:01:54,000
using web Bluetooth so please meet mr.

00:01:49,850 --> 00:01:56,130
Cerf ally and you can read more about it

00:01:54,000 --> 00:02:00,810
and how you can control it from a web

00:01:56,130 --> 00:02:02,189
page on my blog furthermore I'm also

00:02:00,810 --> 00:02:04,290
adult a salsa teacher

00:02:02,189 --> 00:02:08,369
are there any salsa designs in the

00:02:04,290 --> 00:02:09,670
audience yes first row cool I also

00:02:08,369 --> 00:02:12,580
played a provision

00:02:09,670 --> 00:02:12,910
flute let me play you something real

00:02:12,580 --> 00:02:17,099
quick

00:02:12,910 --> 00:02:17,099
to wake you up after their lunch time

00:02:24,630 --> 00:02:30,610
thank you

00:02:25,810 --> 00:02:35,890
and the last thing I work for blackberry

00:02:30,610 --> 00:02:38,590
yes they still exist without let me get

00:02:35,890 --> 00:02:42,190
started so what's on our agenda for

00:02:38,590 --> 00:02:44,650
today first we are going to see how the

00:02:42,190 --> 00:02:48,220
bundle size that we deliver to

00:02:44,650 --> 00:02:52,330
production going to shrink from a few

00:02:48,220 --> 00:02:53,709
megabytes to just a few kilobytes less

00:02:52,330 --> 00:02:56,170
than 100 kilobytes

00:02:53,709 --> 00:02:57,730
then we are going to look inside the

00:02:56,170 --> 00:03:01,360
bundle what we are shipping to

00:02:57,730 --> 00:03:05,739
production and find out how to make it

00:03:01,360 --> 00:03:09,400
smaller and how to understand why it is

00:03:05,739 --> 00:03:11,620
so big and then the real fun begins when

00:03:09,400 --> 00:03:16,930
we start speaking about angular 4

00:03:11,620 --> 00:03:20,890
compiler and then it's your time to do

00:03:16,930 --> 00:03:24,489
some fun exercises so during the

00:03:20,890 --> 00:03:27,160
exercises I have my assistant here it I

00:03:24,489 --> 00:03:29,440
raise your hand please it will be around

00:03:27,160 --> 00:03:33,220
to help you if you have any questions I

00:03:29,440 --> 00:03:35,260
will also like we'll do a pose for each

00:03:33,220 --> 00:03:38,290
exercise for about five minutes so you

00:03:35,260 --> 00:03:40,600
have like time to just sit down and I do

00:03:38,290 --> 00:03:45,760
it so I will also be walking around in

00:03:40,600 --> 00:03:49,120
assisting and I hope Tobias

00:03:45,760 --> 00:03:51,810
should join us I don't see him right now

00:03:49,120 --> 00:03:54,850
but it should be here probably later and

00:03:51,810 --> 00:03:58,630
also answer any questions about why they

00:03:54,850 --> 00:04:02,170
did thinks they're in a certain way so

00:03:58,630 --> 00:04:06,549
let's get started so first of all I want

00:04:02,170 --> 00:04:08,829
you all to run ingénue ng-conf demo to

00:04:06,549 --> 00:04:12,519
create a new angular project angular

00:04:08,829 --> 00:04:14,639
project since you have the latest CLI it

00:04:12,519 --> 00:04:16,989
should create angular for project and

00:04:14,639 --> 00:04:18,609
this should take like a couple of

00:04:16,989 --> 00:04:19,150
minutes I know this is conference

00:04:18,609 --> 00:04:22,010
website

00:04:19,150 --> 00:04:26,450
not so fast and it's okay we are

00:04:22,010 --> 00:04:28,460
going to use this project until like 20

00:04:26,450 --> 00:04:31,490
minutes from now so just make sure you

00:04:28,460 --> 00:04:36,590
run it now so in 20 minutes we won't

00:04:31,490 --> 00:04:39,980
have to wait for this so while you are

00:04:36,590 --> 00:04:42,980
doing engineer and you come demo let's

00:04:39,980 --> 00:04:46,760
talk about the bundle what we create

00:04:42,980 --> 00:04:53,690
when we have the when we ship angular to

00:04:46,760 --> 00:04:58,730
production so I created here we I didn't

00:04:53,690 --> 00:05:01,280
want to do that yeah now it's write the

00:04:58,730 --> 00:05:03,620
correctly I created here a simple

00:05:01,280 --> 00:05:07,220
angular app just like I'll told you to

00:05:03,620 --> 00:05:10,100
do ingénue up and you all see the

00:05:07,220 --> 00:05:11,690
familiar app work screen and the first

00:05:10,100 --> 00:05:14,840
thing we are going to do with this app

00:05:11,690 --> 00:05:17,720
is not write any code rather we are

00:05:14,840 --> 00:05:25,640
going to build it so I'm going to run

00:05:17,720 --> 00:05:28,220
out and G build and see what we get so

00:05:25,640 --> 00:05:32,210
ng build is the angular CLI command that

00:05:28,220 --> 00:05:35,270
builds the app it takes like 20 seconds

00:05:32,210 --> 00:05:38,030
something like that runs web pack does

00:05:35,270 --> 00:05:40,250
all the typescript compilation and when

00:05:38,030 --> 00:05:44,510
we finish we can open the dist folder

00:05:40,250 --> 00:05:49,130
and we can find there a few files now I

00:05:44,510 --> 00:05:52,460
don't know if well that's better if you

00:05:49,130 --> 00:05:55,580
can see but there is this vendor file

00:05:52,460 --> 00:05:59,210
vendor dot bundled OGS which is two

00:05:55,580 --> 00:06:02,150
megabytes and as you can imagine this is

00:05:59,210 --> 00:06:08,750
not going to go very fast over a 3G

00:06:02,150 --> 00:06:13,820
connection let's do let's do a real

00:06:08,750 --> 00:06:16,640
quick demo stat so I'm going to open the

00:06:13,820 --> 00:06:20,030
app that I just compiled but instead of

00:06:16,640 --> 00:06:24,410
loading it a local host speed I'm going

00:06:20,030 --> 00:06:27,230
to change it to use a good 3G and see

00:06:24,410 --> 00:06:30,590
how long it takes for the app to load so

00:06:27,230 --> 00:06:34,310
I'm going to disable cache reload and as

00:06:30,590 --> 00:06:36,110
you can see it's the load still loads

00:06:34,310 --> 00:06:41,870
still load

00:06:36,110 --> 00:06:44,780
and more than ten seconds later we

00:06:41,870 --> 00:06:49,550
finally took us 12 seconds to load up

00:06:44,780 --> 00:06:51,550
just the raw output of ng build and you

00:06:49,550 --> 00:06:54,800
can probably see here we have this

00:06:51,550 --> 00:06:57,889
vector bundle file which is two

00:06:54,800 --> 00:07:01,310
megabytes and if we look inside this

00:06:57,889 --> 00:07:04,969
file we can immediately see why it's so

00:07:01,310 --> 00:07:06,889
big so can you tell me what's the first

00:07:04,969 --> 00:07:11,780
thing we need to do to this file to make

00:07:06,889 --> 00:07:13,129
it smaller actually Simon efficacious

00:07:11,780 --> 00:07:15,979
and yes that's correct

00:07:13,129 --> 00:07:18,919
so one thing we are going to do is we

00:07:15,979 --> 00:07:21,740
are going to minify it now apart from

00:07:18,919 --> 00:07:24,289
unifying it I also want you to take a

00:07:21,740 --> 00:07:27,229
quick look inside it so we are going to

00:07:24,289 --> 00:07:30,080
use a tool called first map Explorer how

00:07:27,229 --> 00:07:32,990
many of you have heard of it ok quite a

00:07:30,080 --> 00:07:35,689
few so for those who didn't it's really

00:07:32,990 --> 00:07:39,409
cool tool that lets you do just this you

00:07:35,689 --> 00:07:42,440
can specify any name of JavaScript file

00:07:39,409 --> 00:07:45,919
and if it has a source map you will be

00:07:42,440 --> 00:07:49,159
able to see the sources and the relative

00:07:45,919 --> 00:07:52,129
sizes so what this let me make the font

00:07:49,159 --> 00:07:54,500
a little bit bigger so what's contained

00:07:52,129 --> 00:07:57,969
inside the bundle which sources which

00:07:54,500 --> 00:08:01,159
modules were used to build this file and

00:07:57,969 --> 00:08:03,349
I don't know if you can read all the

00:08:01,159 --> 00:08:06,080
titles but you probably notice there is

00:08:03,349 --> 00:08:07,400
a really big very rectangle here like

00:08:06,080 --> 00:08:12,050
the one endpoint today

00:08:07,400 --> 00:08:16,310
pointing it which is 46% of the bundle

00:08:12,050 --> 00:08:19,069
size and it says here compiler so out of

00:08:16,310 --> 00:08:24,620
those 2 megabytes we ship a compiler

00:08:19,069 --> 00:08:26,810
which is half of the size of what the

00:08:24,620 --> 00:08:29,629
client has to download to start our app

00:08:26,810 --> 00:08:33,199
so I want you to remember this compiler

00:08:29,629 --> 00:08:35,539
which took half of the size just to

00:08:33,199 --> 00:08:40,099
compare this is the core module of

00:08:35,539 --> 00:08:43,940
angular which is just 40 442 k kilobytes

00:08:40,099 --> 00:08:46,490
like 20% of the outsides so the compiler

00:08:43,940 --> 00:08:47,130
is like the biggest thing on the bundle

00:08:46,490 --> 00:08:51,180
right now

00:08:47,130 --> 00:08:53,459
and what we are going to do now we are

00:08:51,180 --> 00:08:54,990
going to do two things first of all as

00:08:53,459 --> 00:08:57,959
you suggest that we are going to add

00:08:54,990 --> 00:09:00,269
Levi and then we are going to get rid of

00:08:57,959 --> 00:09:03,720
this compiler so this will make the

00:09:00,269 --> 00:09:07,490
bundle much smaller no compiler and ugly

00:09:03,720 --> 00:09:07,490
side so let's do this

00:09:09,350 --> 00:09:15,269
we are in order to do this we are just

00:09:11,819 --> 00:09:17,310
going to add a little flag to ng build -

00:09:15,269 --> 00:09:20,490
prod will do two things it will Agra fie

00:09:17,310 --> 00:09:23,130
and remove the compiler and we can add

00:09:20,490 --> 00:09:26,130
this source map flag so we can actually

00:09:23,130 --> 00:09:28,649
see what's inside the bundle after we

00:09:26,130 --> 00:09:35,519
run this build step so I'm going to run

00:09:28,649 --> 00:09:38,670
ng build - prod - - first map it's going

00:09:35,519 --> 00:09:42,949
to build it up again and this time we

00:09:38,670 --> 00:09:45,600
hope it will load much much faster and

00:09:42,949 --> 00:09:50,790
by the way how many of you have finished

00:09:45,600 --> 00:09:53,279
the engineer okay so we are in a pretty

00:09:50,790 --> 00:09:57,930
good state anybody is still waiting on

00:09:53,279 --> 00:09:59,639
NPM install it's interesting only the

00:09:57,930 --> 00:10:01,740
guys on the back are waiting on ambience

00:09:59,639 --> 00:10:07,910
troll probably the Wi-Fi stronger in the

00:10:01,740 --> 00:10:13,680
front so let's run the web server again

00:10:07,910 --> 00:10:18,779
and see what we got here after minifying

00:10:13,680 --> 00:10:21,870
and removing let's switch to regular -

00:10:18,779 --> 00:10:23,699
good 3G that's what we had before and we

00:10:21,870 --> 00:10:25,769
can see it still takes some times to

00:10:23,699 --> 00:10:30,329
load the app but it was reduced to

00:10:25,769 --> 00:10:32,399
almost less than 2.5 seconds so we just

00:10:30,329 --> 00:10:36,120
by uglify again removing this big

00:10:32,399 --> 00:10:38,459
compiler we make it finally manageable

00:10:36,120 --> 00:10:40,470
like 2.5 seconds is something I'm

00:10:38,459 --> 00:10:44,579
willing to wait for unlike like 12

00:10:40,470 --> 00:10:49,160
seconds which is really slow and if we

00:10:44,579 --> 00:10:52,079
look again inside its generated bundle

00:10:49,160 --> 00:10:57,180
with source MAC explorer we can actually

00:10:52,079 --> 00:10:59,040
see that the compiler is now gone so we

00:10:57,180 --> 00:11:04,170
no longer have this

00:10:59,040 --> 00:11:09,149
Pilar but can you spot a few other

00:11:04,170 --> 00:11:11,490
things that blows this bundle so we have

00:11:09,149 --> 00:11:13,589
this guy here it says forms and we are

00:11:11,490 --> 00:11:15,899
not using any forms in our up right and

00:11:13,589 --> 00:11:18,779
then we have this guy here it's also

00:11:15,899 --> 00:11:21,569
it's only six press percent but we are

00:11:18,779 --> 00:11:25,740
not using HTTP right now so why should

00:11:21,569 --> 00:11:28,440
we ship it so the next optimization we

00:11:25,740 --> 00:11:31,199
are going to do is just remove forms and

00:11:28,440 --> 00:11:34,560
HTTP and I also want you to do it in

00:11:31,199 --> 00:11:37,290
your app because when we start tinkering

00:11:34,560 --> 00:11:39,779
with the compiler having those modules

00:11:37,290 --> 00:11:43,740
in your app will make it harder to

00:11:39,779 --> 00:11:47,040
follow so simply go to your app dot

00:11:43,740 --> 00:11:50,069
module dot yes and remove forms module

00:11:47,040 --> 00:11:57,480
and HTTP from the imports just say with

00:11:50,069 --> 00:12:02,579
the browser model and I'm going to build

00:11:57,480 --> 00:12:06,690
again while you remove those from your

00:12:02,579 --> 00:12:09,779
import and the final thing we are going

00:12:06,690 --> 00:12:11,250
to do to make this bundle even smaller

00:12:09,779 --> 00:12:17,690
do you have any idea what would that

00:12:11,250 --> 00:12:17,690
would be let me give you a visual clue

00:12:17,750 --> 00:12:22,589
compression right so we are going oh it

00:12:21,180 --> 00:12:25,230
didn't build why's that

00:12:22,589 --> 00:12:28,500
that never haven't happened to me that

00:12:25,230 --> 00:12:30,620
it could not find SS the index of HTML

00:12:28,500 --> 00:12:34,370
let's try that again

00:12:30,620 --> 00:12:37,709
did I delete anything I don't think so

00:12:34,370 --> 00:12:40,380
well windows is always have nice ways of

00:12:37,709 --> 00:12:42,439
surprising us but I hope this time it

00:12:40,380 --> 00:12:45,269
will work better

00:12:42,439 --> 00:12:51,000
where is Tobias to refer this bug in the

00:12:45,269 --> 00:12:55,160
compiler Oh so apparently it doesn't

00:12:51,000 --> 00:12:58,769
work now but I'm not sure by the way hi

00:12:55,160 --> 00:13:02,220
I'm not sure if it is has anything to do

00:12:58,769 --> 00:13:07,850
with the compiler architect a let's see

00:13:02,220 --> 00:13:15,020
if I oh i deleted the file so my girls

00:13:07,850 --> 00:13:17,750
okay let's run it again and now it will

00:13:15,020 --> 00:13:19,460
build did you by the way notice that I

00:13:17,750 --> 00:13:22,100
deleted it because I didn't notice

00:13:19,460 --> 00:13:25,130
nothing I deleted it somehow it got

00:13:22,100 --> 00:13:27,920
removed thanks kid for helping me do

00:13:25,130 --> 00:13:32,060
that and now we built it again we are

00:13:27,920 --> 00:13:33,890
going to serve the directory again and

00:13:32,060 --> 00:13:37,400
now we are also going to add compression

00:13:33,890 --> 00:13:40,670
to the web server so this app will be

00:13:37,400 --> 00:13:43,490
served compressed so we minified remove

00:13:40,670 --> 00:13:46,190
the compiler HTTP forms you also removed

00:13:43,490 --> 00:13:49,040
it and now we serve it compressed and if

00:13:46,190 --> 00:13:52,700
we load the app again you will be able

00:13:49,040 --> 00:13:57,140
to see that now it loads real fast over

00:13:52,700 --> 00:14:01,210
a good 3G connection like it's no time

00:13:57,140 --> 00:14:05,870
it's like less than one second total of

00:14:01,210 --> 00:14:08,810
76 kilobytes transferred so by simply

00:14:05,870 --> 00:14:11,510
applying a few cool but simple technical

00:14:08,810 --> 00:14:13,940
techniques from our end we really manage

00:14:11,510 --> 00:14:15,650
to make it load fast and then there is

00:14:13,940 --> 00:14:22,850
also lazy loading and stuff you can add

00:14:15,650 --> 00:14:25,370
later but I think we all wonder now we

00:14:22,850 --> 00:14:28,130
all wonder now what is this compiler

00:14:25,370 --> 00:14:30,560
that we had to remove to shrink the

00:14:28,130 --> 00:14:32,900
bundle like it was half of the size of

00:14:30,560 --> 00:14:35,750
our app we are going to talk about it

00:14:32,900 --> 00:14:38,090
really soon but first some background so

00:14:35,750 --> 00:14:40,700
this is actually a real event happening

00:14:38,090 --> 00:14:44,780
in Wisconsin every year some kind of

00:14:40,700 --> 00:14:46,460
sausage race you can Wikipedia we can

00:14:44,780 --> 00:14:49,370
think certain sausage race they have

00:14:46,460 --> 00:14:54,230
like Paulista said you Canyon sausage I

00:14:49,370 --> 00:14:57,170
don't know why they do it anyway like

00:14:54,230 --> 00:14:59,300
this race there is sort of race between

00:14:57,170 --> 00:15:00,920
all the frameworks for giving you the

00:14:59,300 --> 00:15:03,740
best performance which is a good we

00:15:00,920 --> 00:15:05,990
think because we all benefit from it

00:15:03,740 --> 00:15:10,490
so let's look back at how it works with

00:15:05,990 --> 00:15:12,950
angular 1 angular jf so with angular 1

00:15:10,490 --> 00:15:16,010
we had the digest cycle which would work

00:15:12,950 --> 00:15:17,390
all the components in our apps and then

00:15:16,010 --> 00:15:21,050
each component had

00:15:17,390 --> 00:15:23,690
cope with an array of watch earth and it

00:15:21,050 --> 00:15:25,610
would run all of those Watchers we'd

00:15:23,690 --> 00:15:28,640
call all of those functions to figure

00:15:25,610 --> 00:15:30,800
out if something was changed and we

00:15:28,640 --> 00:15:33,200
needed to update something inside the

00:15:30,800 --> 00:15:37,400
app and then it would do it over and

00:15:33,200 --> 00:15:39,200
over again until it found that there

00:15:37,400 --> 00:15:41,240
were no changes so it could do that

00:15:39,200 --> 00:15:45,880
cycle three or four times for every

00:15:41,240 --> 00:15:48,350
mouse click and that wasn't very

00:15:45,880 --> 00:15:52,880
efficient for very big apps with

00:15:48,350 --> 00:15:56,870
thousands of workers and then how many

00:15:52,880 --> 00:15:59,690
of you have used react so quite a few

00:15:56,870 --> 00:16:03,680
for those who didn't react try to solve

00:15:59,690 --> 00:16:05,660
this updating the app the view according

00:16:03,680 --> 00:16:10,930
to the model in an efficient way a

00:16:05,660 --> 00:16:13,790
little differently what they do they

00:16:10,930 --> 00:16:16,700
monitor component state changes so you

00:16:13,790 --> 00:16:19,250
need to tell react a something calls

00:16:16,700 --> 00:16:22,100
this component stage state to change

00:16:19,250 --> 00:16:27,050
just like calling door digests in

00:16:22,100 --> 00:16:30,140
angularjs and then it would rerender the

00:16:27,050 --> 00:16:32,720
entire component and its subtree using

00:16:30,140 --> 00:16:35,150
something called virtual Dom because

00:16:32,720 --> 00:16:37,460
it's much faster to just create

00:16:35,150 --> 00:16:40,040
JavaScript objects rather than update

00:16:37,460 --> 00:16:43,040
the real DOM and then it would recreate

00:16:40,040 --> 00:16:45,850
the entire tree and compare it with the

00:16:43,040 --> 00:16:49,520
previous tree find the changes using

00:16:45,850 --> 00:16:51,500
some kind of dissing algorithm and then

00:16:49,520 --> 00:16:54,800
it could apply the updates only what

00:16:51,500 --> 00:16:57,440
what has been different to the real Dom

00:16:54,800 --> 00:17:00,650
so whenever we did any change we

00:16:57,440 --> 00:17:03,440
actually rebuilt everything from scratch

00:17:00,650 --> 00:17:06,770
but in a more efficient way virtual Dom

00:17:03,440 --> 00:17:12,290
and just updated the bits that changed

00:17:06,770 --> 00:17:16,310
in the grill dome and that turned out to

00:17:12,290 --> 00:17:19,220
work pretty well except creating this

00:17:16,310 --> 00:17:22,940
virtual Dom tree for each time create a

00:17:19,220 --> 00:17:26,420
lot of objects and this object consumed

00:17:22,940 --> 00:17:28,520
memory and we need memory for other

00:17:26,420 --> 00:17:29,330
things so the browser needs to free this

00:17:28,520 --> 00:17:31,090
memory

00:17:29,330 --> 00:17:34,279
so it does garbage collection and

00:17:31,090 --> 00:17:37,940
garbage collections take time especially

00:17:34,279 --> 00:17:41,029
there is a high amount of objects and

00:17:37,940 --> 00:17:44,470
they are nested so we have other

00:17:41,029 --> 00:17:47,899
performance issues when we grow big with

00:17:44,470 --> 00:17:51,019
virtual dome on top of that it's another

00:17:47,899 --> 00:17:55,340
layer of abstraction so when we work

00:17:51,019 --> 00:17:58,549
with react we need to like use class

00:17:55,340 --> 00:18:00,649
name instead of class as the attribute

00:17:58,549 --> 00:18:05,090
when we want to apply CSS class to some

00:18:00,649 --> 00:18:08,389
element and well that was react approach

00:18:05,090 --> 00:18:12,980
and then angular came with a new

00:18:08,389 --> 00:18:16,399
performance gameplan it says hmm you

00:18:12,980 --> 00:18:19,759
developers write your code your views of

00:18:16,399 --> 00:18:22,039
HTML file so I will take your views and

00:18:19,759 --> 00:18:27,070
OH to generate super optimized codes

00:18:22,039 --> 00:18:29,779
from them so what does that mean like

00:18:27,070 --> 00:18:33,049
this is the compiler the compiler takes

00:18:29,779 --> 00:18:35,330
your HTML files and turns them into very

00:18:33,049 --> 00:18:37,580
efficient code that does the same thing

00:18:35,330 --> 00:18:41,600
so instead of having of the browser

00:18:37,580 --> 00:18:45,499
parsing your HTML file your template and

00:18:41,600 --> 00:18:48,889
then angular parsing the Dom tree it's

00:18:45,499 --> 00:18:51,320
just the compiler turns the HTML file

00:18:48,889 --> 00:18:55,460
into a set of JavaScript code and that

00:18:51,320 --> 00:18:58,100
code creates the actual Dom element

00:18:55,460 --> 00:19:05,989
using document or create elements and so

00:18:58,100 --> 00:19:08,149
on so what how does it work so to

00:19:05,989 --> 00:19:10,909
summarize what we have learnt so far

00:19:08,149 --> 00:19:14,109
about the compiler it simply takes HTML

00:19:10,909 --> 00:19:17,659
code your template and produces

00:19:14,109 --> 00:19:20,179
optimized typescript code which does the

00:19:17,659 --> 00:19:22,669
same as we will see in a moment also

00:19:20,179 --> 00:19:25,429
takes care of tracking changes and

00:19:22,669 --> 00:19:27,350
updating the elements whenever something

00:19:25,429 --> 00:19:29,690
changed and this code is eventually

00:19:27,350 --> 00:19:31,340
compiled by typescript or web back to

00:19:29,690 --> 00:19:36,980
JavaScript and is shipped to your

00:19:31,340 --> 00:19:39,679
browser so why do we need a compiler I

00:19:36,980 --> 00:19:41,810
mean why not use the browser to process

00:19:39,679 --> 00:19:44,330
HTML after all that's what

00:19:41,810 --> 00:19:47,000
have been doing for years right since

00:19:44,330 --> 00:19:53,060
Netscape must like if you remember I

00:19:47,000 --> 00:19:55,310
haven't used it so a few reasons why the

00:19:53,060 --> 00:19:58,940
angular team chose to implement a

00:19:55,310 --> 00:20:02,540
compiler first of all if we let the HTML

00:19:58,940 --> 00:20:04,760
the browser parse our HTML and we have a

00:20:02,540 --> 00:20:07,750
syntax error if we don't get accurate

00:20:04,760 --> 00:20:11,480
information about where the problem is

00:20:07,750 --> 00:20:13,880
but if we build our own parser to run

00:20:11,480 --> 00:20:16,280
over the HTML and extract all the

00:20:13,880 --> 00:20:18,860
element information from there and we

00:20:16,280 --> 00:20:22,670
have some syntax error we can tell the

00:20:18,860 --> 00:20:24,980
user hey it's line 32 column 3 you need

00:20:22,670 --> 00:20:27,280
to look there so it helps us as

00:20:24,980 --> 00:20:29,330
developers to be much more productive

00:20:27,280 --> 00:20:32,630
furthermore as we will see in a moment

00:20:29,330 --> 00:20:34,700
it allows create our it allows

00:20:32,630 --> 00:20:37,400
developers to create much better tooling

00:20:34,700 --> 00:20:39,950
for working with templates and HTML

00:20:37,400 --> 00:20:42,140
files and the structure of our

00:20:39,950 --> 00:20:45,500
application how many viewers watched

00:20:42,140 --> 00:20:48,590
Minko minkos talked yesterday with the

00:20:45,500 --> 00:20:51,200
3d rendering of the artists trees and

00:20:48,590 --> 00:20:53,750
stuff how many of you do this so you

00:20:51,200 --> 00:20:55,850
already know how like what cool things

00:20:53,750 --> 00:20:58,490
we can do with this tooling that allows

00:20:55,850 --> 00:21:01,490
us to consume those HTML those templates

00:20:58,490 --> 00:21:06,740
and turn them into virtual reality trees

00:21:01,490 --> 00:21:09,740
and whatever another advantage

00:21:06,740 --> 00:21:13,220
well we all work with different browsers

00:21:09,740 --> 00:21:14,690
and we know it's hard to get a code that

00:21:13,220 --> 00:21:17,090
behaves the same across different

00:21:14,690 --> 00:21:20,360
browsers because they have some minor

00:21:17,090 --> 00:21:22,820
differences even inside the HTML parsers

00:21:20,360 --> 00:21:27,590
they do things a little differently so

00:21:22,820 --> 00:21:29,990
if we parse the HTML on our own we get

00:21:27,590 --> 00:21:33,200
the same result no matter which browser

00:21:29,990 --> 00:21:38,390
we use and another advantage we can

00:21:33,200 --> 00:21:42,320
finally use depends on case-sensitive

00:21:38,390 --> 00:21:46,220
our nature of the element so if you

00:21:42,320 --> 00:21:49,330
remember in angularjs we used when we

00:21:46,220 --> 00:21:52,940
wanted to call a directive with ng - if

00:21:49,330 --> 00:21:54,429
what Sam called cable case and the

00:21:52,940 --> 00:21:59,769
reason for that

00:21:54,429 --> 00:22:03,610
is if we look inside the dome and query

00:21:59,769 --> 00:22:06,549
an element we always get the tag name is

00:22:03,610 --> 00:22:09,249
upper case no matter how the developer

00:22:06,549 --> 00:22:12,879
wrote it inside the HTML let me actually

00:22:09,249 --> 00:22:15,159
show this to you so here is my blog post

00:22:12,879 --> 00:22:17,559
about the ng beacons and I'm going to

00:22:15,159 --> 00:22:23,769
inspect some random elements and if

00:22:17,559 --> 00:22:26,919
revised a node name you can see it's the

00:22:23,769 --> 00:22:28,929
uppercase chili P is not very good

00:22:26,919 --> 00:22:30,820
example because it doesn't look very

00:22:28,929 --> 00:22:32,759
different when it's uppercase or

00:22:30,820 --> 00:22:35,980
lowercase but here you can see I

00:22:32,759 --> 00:22:38,740
selected some a element and if I will

00:22:35,980 --> 00:22:41,830
look inside a node expector I will see

00:22:38,740 --> 00:22:44,559
here it's written lowercase but if I ask

00:22:41,830 --> 00:22:48,909
the browser it tells me hey this is a

00:22:44,559 --> 00:22:51,759
uppercase so if we rely on the browser

00:22:48,909 --> 00:22:54,249
we can't get the original way the word

00:22:51,759 --> 00:22:56,860
the element name or the attribute was

00:22:54,249 --> 00:22:59,279
written but if we write our own compiler

00:22:56,860 --> 00:23:04,360
or to bus right to the compiler for us

00:22:59,279 --> 00:23:06,249
we can get it and finally I think one of

00:23:04,360 --> 00:23:09,149
the most amazing things that we can

00:23:06,249 --> 00:23:11,919
achieve this way is angular Universal

00:23:09,149 --> 00:23:14,409
since we parse the templates we have the

00:23:11,919 --> 00:23:16,960
code that process the HTML and create

00:23:14,409 --> 00:23:20,110
the Dom elements out of that we can also

00:23:16,960 --> 00:23:22,240
do it on the service side and work work

00:23:20,110 --> 00:23:24,399
over all the bindings that we have in

00:23:22,240 --> 00:23:27,429
the templates and render render them and

00:23:24,399 --> 00:23:29,559
serve them to the client and that would

00:23:27,429 --> 00:23:31,360
be the same compiler code that runs on

00:23:29,559 --> 00:23:36,309
the client so we'll get the same result

00:23:31,360 --> 00:23:38,470
so having the compiler enables us to run

00:23:36,309 --> 00:23:40,960
the same code on the server on the

00:23:38,470 --> 00:23:43,450
client parse the same template and get

00:23:40,960 --> 00:23:45,490
the same result so I think all those

00:23:43,450 --> 00:23:48,460
things are amazing and speaking of

00:23:45,490 --> 00:23:51,940
tooling I think Igor mentioned it

00:23:48,460 --> 00:23:54,029
yesterday in the keynote we have the

00:23:51,940 --> 00:23:56,860
angular language services coming soon

00:23:54,029 --> 00:24:02,019
which will enable us this basically we

00:23:56,860 --> 00:24:03,940
will get autocomplete on templates so we

00:24:02,019 --> 00:24:05,520
will no longer have to remember the

00:24:03,940 --> 00:24:07,500
names of the members in our

00:24:05,520 --> 00:24:10,640
opponents just autocomplete as we get

00:24:07,500 --> 00:24:14,400
inside our code which is quite cool and

00:24:10,640 --> 00:24:18,900
I think it said it's coming for angular

00:24:14,400 --> 00:24:21,330
5 not sure anyway so we talked a lot

00:24:18,900 --> 00:24:31,470
about the advantages of the diss

00:24:21,330 --> 00:24:33,480
compiler yes oh so there is a plug-in in

00:24:31,470 --> 00:24:36,840
vs code store already I'm going to

00:24:33,480 --> 00:24:42,390
download it right after the top and you

00:24:36,840 --> 00:24:44,490
can do it also webcam that's the same

00:24:42,390 --> 00:24:46,500
already ok perfect so you can also use

00:24:44,490 --> 00:24:49,590
webstorm they also have cool yo-yos in

00:24:46,500 --> 00:24:52,010
their sponsor booth so go go after and

00:24:49,590 --> 00:24:55,770
check it thank you

00:24:52,010 --> 00:24:58,740
so it spoke a lot about the compiler but

00:24:55,770 --> 00:25:00,650
what is the compiler what is - the first

00:24:58,740 --> 00:25:05,060
time I heard about the angular compiler

00:25:00,650 --> 00:25:05,060
this is what I had in mind

00:25:05,480 --> 00:25:11,820
yeah take a moment to reflect about this

00:25:08,880 --> 00:25:20,370
amazing blue ball machine while I take a

00:25:11,820 --> 00:25:24,150
sip of water and and now I hope that

00:25:20,370 --> 00:25:26,760
most of you have finished the engineer

00:25:24,150 --> 00:25:30,600
because we are going to start the

00:25:26,760 --> 00:25:32,160
compiler so exploring the compiler is

00:25:30,600 --> 00:25:35,220
really really easy

00:25:32,160 --> 00:25:38,570
we just need to NGC the angle our

00:25:35,220 --> 00:25:46,760
compiler and what we are going to do now

00:25:38,570 --> 00:25:50,220
is go into our package dirt dot JSON and

00:25:46,760 --> 00:25:53,300
inside the package dot JSON we are going

00:25:50,220 --> 00:25:56,220
to add a new script called compile and

00:25:53,300 --> 00:25:59,940
this script will simply run the angular

00:25:56,220 --> 00:26:02,930
compiler and GCC so please all of you go

00:25:59,940 --> 00:26:06,660
to the package.json and add this

00:26:02,930 --> 00:26:10,340
compiled script and while you do this UI

00:26:06,660 --> 00:26:13,740
this line I'm going to run it so we can

00:26:10,340 --> 00:26:15,420
play with the output of it already so

00:26:13,740 --> 00:26:20,360
npm run compile

00:26:15,420 --> 00:26:23,550
l um and now it's compiling

00:26:20,360 --> 00:26:29,430
ng C and we are going to see a bunch of

00:26:23,550 --> 00:26:31,320
new files in our source folder so as you

00:26:29,430 --> 00:26:33,630
can probably see there are a few new

00:26:31,320 --> 00:26:34,680
files here probably you can also see

00:26:33,630 --> 00:26:37,950
that on your computer

00:26:34,680 --> 00:26:42,990
some ng Factory and ng summary and shims

00:26:37,950 --> 00:26:45,750
and all other sort of stuff so um if you

00:26:42,990 --> 00:26:47,760
haven't done so please run this compiler

00:26:45,750 --> 00:26:48,930
on your computer because you are going

00:26:47,760 --> 00:26:53,640
to use it in a moment

00:26:48,930 --> 00:26:56,670
in there exercises so we run the

00:26:53,640 --> 00:26:59,940
compiler and we got a few files let's

00:26:56,670 --> 00:27:02,610
look inside them so first of all we add

00:26:59,940 --> 00:27:08,790
our component the one that says up work

00:27:02,610 --> 00:27:12,740
up works so the component has this very

00:27:08,790 --> 00:27:17,460
simple template that says h1 title and

00:27:12,740 --> 00:27:21,890
in addition to that it has this CSS file

00:27:17,460 --> 00:27:25,650
which is currently empty and it also has

00:27:21,890 --> 00:27:29,910
the controller itself which has just

00:27:25,650 --> 00:27:33,600
this simple code that signs up work to

00:27:29,910 --> 00:27:37,050
title and what a compiler does it has

00:27:33,600 --> 00:27:39,480
basically three things we are going to

00:27:37,050 --> 00:27:43,410
look at the frist the first one would be

00:27:39,480 --> 00:27:46,320
to take this HTML file and turn it into

00:27:43,410 --> 00:27:49,290
compiled code and this compiled code

00:27:46,320 --> 00:27:52,950
fits in up those components dot ng

00:27:49,290 --> 00:27:56,160
factor Rick yes and this is what the

00:27:52,950 --> 00:27:59,520
generated code looks like not as pretty

00:27:56,160 --> 00:28:03,120
as the HTML but it looks much more

00:27:59,520 --> 00:28:05,430
concise and readable in comparison with

00:28:03,120 --> 00:28:09,480
the angular 2 compiler which was another

00:28:05,430 --> 00:28:10,980
amazing piece of artwork now we are

00:28:09,480 --> 00:28:14,520
going to look into it and try to

00:28:10,980 --> 00:28:19,070
understand what's going on here and in

00:28:14,520 --> 00:28:21,930
order to do that let's open those

00:28:19,070 --> 00:28:25,680
side-by-side template and the compiled

00:28:21,930 --> 00:28:30,080
file and we can see we have a bunch of

00:28:25,680 --> 00:28:30,080
imports here and then we have this

00:28:33,530 --> 00:28:41,010
that data I don't know that's one of the

00:28:38,940 --> 00:28:45,270
Greek letters I think that's data and

00:28:41,010 --> 00:28:47,790
CRT so there are a bunch of cryptic

00:28:45,270 --> 00:28:51,630
names here and we are going to explain

00:28:47,790 --> 00:28:54,690
them in a moment but the important part

00:28:51,630 --> 00:28:57,150
here is this view up component zero

00:28:54,690 --> 00:29:00,720
function so you should also have this

00:28:57,150 --> 00:29:03,210
function and this function has basically

00:29:00,720 --> 00:29:06,960
two parts the top part and the bottom

00:29:03,210 --> 00:29:10,440
part so this is the top part and the top

00:29:06,960 --> 00:29:13,170
part corresponds to all the elements

00:29:10,440 --> 00:29:18,150
that we have inside the template as you

00:29:13,170 --> 00:29:20,340
can see we have yeah it's very nice we

00:29:18,150 --> 00:29:24,090
have this h1 here on the top and we have

00:29:20,340 --> 00:29:26,250
h1 here and we have a bunch of text that

00:29:24,090 --> 00:29:30,840
are just new lines because we have a

00:29:26,250 --> 00:29:32,730
bunch of new lines in the template but

00:29:30,840 --> 00:29:36,030
then we don't have this title because

00:29:32,730 --> 00:29:37,650
this title is dynamic so the first part

00:29:36,030 --> 00:29:39,420
of the function is the part that creates

00:29:37,650 --> 00:29:42,330
the view and it doesn't contain the

00:29:39,420 --> 00:29:45,420
dynamic values only the elements there

00:29:42,330 --> 00:29:47,700
are tributes and etc and the static text

00:29:45,420 --> 00:29:50,730
but not the dynamic ones on the other

00:29:47,700 --> 00:29:53,730
hand the second part is the one that

00:29:50,730 --> 00:29:56,340
does the change detection and it refers

00:29:53,730 --> 00:29:59,280
to the dynamic parts of the template in

00:29:56,340 --> 00:30:02,730
this case the title so you can see we

00:29:59,280 --> 00:30:06,180
actually have this title here so

00:30:02,730 --> 00:30:08,130
everything that is a part of the

00:30:06,180 --> 00:30:10,830
structure of the view the static

00:30:08,130 --> 00:30:13,620
structure goes to the top part and

00:30:10,830 --> 00:30:15,450
everything that is dynamic and go

00:30:13,620 --> 00:30:18,120
through change detection goes to the

00:30:15,450 --> 00:30:21,210
bottom part and the big advantage of

00:30:18,120 --> 00:30:24,300
this structure is that the browser can

00:30:21,210 --> 00:30:26,490
run this part only once when you create

00:30:24,300 --> 00:30:29,340
your component but then whenever you

00:30:26,490 --> 00:30:31,500
need to do change detection it only

00:30:29,340 --> 00:30:35,010
needs to run the second part so this

00:30:31,500 --> 00:30:37,230
runs only once and this one whenever you

00:30:35,010 --> 00:30:40,170
do changes so this has to be very

00:30:37,230 --> 00:30:42,559
efficient in contrast with react where

00:30:40,170 --> 00:30:44,330
we rebuild the entire tree the

00:30:42,559 --> 00:30:46,070
I think whenever there is a change and

00:30:44,330 --> 00:30:50,899
then we need to compare them and figure

00:30:46,070 --> 00:30:54,799
out the differences and we are going to

00:30:50,899 --> 00:30:57,559
like experiment with changing the HTML

00:30:54,799 --> 00:31:01,190
file we are going to do it together and

00:30:57,559 --> 00:31:03,740
see how it affect the generated code but

00:31:01,190 --> 00:31:06,350
first of all let me show you a few

00:31:03,740 --> 00:31:08,539
tricks that really help you to

00:31:06,350 --> 00:31:11,990
understand what's going on here because

00:31:08,539 --> 00:31:15,710
as you can see the angular team uses

00:31:11,990 --> 00:31:18,230
shirts we later name for all the methods

00:31:15,710 --> 00:31:20,799
in order I guess to reduce the bundle

00:31:18,230 --> 00:31:24,169
size even further is that correct yes

00:31:20,799 --> 00:31:26,629
and they also prefix it with this I

00:31:24,169 --> 00:31:30,950
think it's set up which means this is

00:31:26,629 --> 00:31:32,360
private thing you should not use it so

00:31:30,950 --> 00:31:33,950
this is something new if you see some

00:31:32,360 --> 00:31:35,570
symbol that starts with stedy

00:31:33,950 --> 00:31:37,220
it means you should not use it you

00:31:35,570 --> 00:31:41,509
should not rule out this we can break

00:31:37,220 --> 00:31:43,369
this we will break this and since

00:31:41,509 --> 00:31:46,190
angular is built with typescript and

00:31:43,369 --> 00:31:48,289
this is tight strip we don't have to

00:31:46,190 --> 00:31:49,970
worry about this strange-looking code

00:31:48,289 --> 00:31:52,789
this funny-looking code because we can

00:31:49,970 --> 00:31:56,269
just hover in Econ it or if use webstorm

00:31:52,789 --> 00:31:58,940
control Q or command Q and get all the

00:31:56,269 --> 00:32:01,490
information about the parameters and if

00:31:58,940 --> 00:32:04,869
I control click it I can actually see

00:32:01,490 --> 00:32:10,809
that this is a method called view depth

00:32:04,869 --> 00:32:14,690
so this way you can actually explore

00:32:10,809 --> 00:32:17,059
everything here and easily understand or

00:32:14,690 --> 00:32:20,029
much easier than looking down this code

00:32:17,059 --> 00:32:23,210
what each of those methods tab does so

00:32:20,029 --> 00:32:30,139
eld if we control click it we can see

00:32:23,210 --> 00:32:33,559
its element death and stay here and can

00:32:30,139 --> 00:32:38,570
you guess what is te d if eld is element

00:32:33,559 --> 00:32:41,090
des then what would t be d be text the

00:32:38,570 --> 00:32:42,889
spec definition so this defines an

00:32:41,090 --> 00:32:46,480
element as we can see here it defines

00:32:42,889 --> 00:32:49,929
the h1 element and this defines text is

00:32:46,480 --> 00:32:52,820
here we have a bunch of new lines and

00:32:49,929 --> 00:32:55,850
let me show you what happens if we had

00:32:52,820 --> 00:33:00,710
something before the title like

00:32:55,850 --> 00:33:03,620
my title is and then a bunch of marks

00:33:00,710 --> 00:33:07,309
after this title and run the compiler

00:33:03,620 --> 00:33:09,590
again we can actually see that the

00:33:07,309 --> 00:33:12,950
generated code will be changed to

00:33:09,590 --> 00:33:16,520
reflect the text that comes before the

00:33:12,950 --> 00:33:18,260
binding and after the binding so from

00:33:16,520 --> 00:33:20,929
that we can learn that this text

00:33:18,260 --> 00:33:23,120
definition defines the static text that

00:33:20,929 --> 00:33:25,820
comes before and after each binding and

00:33:23,120 --> 00:33:28,700
then the stuff is the in the middle the

00:33:25,820 --> 00:33:30,500
actual title is put later when the

00:33:28,700 --> 00:33:34,280
change detection is running and is

00:33:30,500 --> 00:33:36,620
pulling the title from our component so

00:33:34,280 --> 00:33:39,289
so far we have seen how we can run the

00:33:36,620 --> 00:33:41,750
angular compiler on our own and how we

00:33:39,289 --> 00:33:44,390
can explore the generated output we

00:33:41,750 --> 00:33:48,049
simply make changes to the template run

00:33:44,390 --> 00:33:51,169
the compiler and then we can see the

00:33:48,049 --> 00:33:56,559
generated code and infer from that how

00:33:51,169 --> 00:33:59,150
things are turned into compiled code and

00:33:56,559 --> 00:34:01,549
that's one of the things the compiler

00:33:59,150 --> 00:34:04,429
does and you already know how to run it

00:34:01,549 --> 00:34:07,700
on your own using NGC not that

00:34:04,429 --> 00:34:12,200
complicated and in addition to compiling

00:34:07,700 --> 00:34:15,950
the HTML files into NG factories it also

00:34:12,200 --> 00:34:21,980
does another some more things for us

00:34:15,950 --> 00:34:24,619
like our Styles so if we look at our

00:34:21,980 --> 00:34:28,730
Styles actually right now we don't have

00:34:24,619 --> 00:34:31,510
any styles it's empty so let's add some

00:34:28,730 --> 00:34:36,440
style like h1 font color

00:34:31,510 --> 00:34:40,909
what's your favorite color pink I like

00:34:36,440 --> 00:34:45,710
that that was to the point Oh worry away

00:34:40,909 --> 00:34:48,320
- it is hot pink ok Harding yeah oh yeah

00:34:45,710 --> 00:34:52,460
and well now we are going to run the NGC

00:34:48,320 --> 00:34:56,889
and if we look into the generated code

00:34:52,460 --> 00:34:56,889
we can see we also have a file called

00:34:58,150 --> 00:35:02,530
app component Association and this tile

00:35:01,310 --> 00:35:05,770
here

00:35:02,530 --> 00:35:07,780
and this file is actually taking our

00:35:05,770 --> 00:35:12,100
stylesheet' and it does a little

00:35:07,780 --> 00:35:15,310
transformation on it so if we look

00:35:12,100 --> 00:35:18,250
inside we can see just a big string with

00:35:15,310 --> 00:35:20,650
all the styles from the CSS file but it

00:35:18,250 --> 00:35:24,610
does one interesting thing it takes all

00:35:20,650 --> 00:35:26,590
of our selectors and it appends makes

00:35:24,610 --> 00:35:29,710
them more specific so they will only

00:35:26,590 --> 00:35:32,350
apply to our component but not our after

00:35:29,710 --> 00:35:34,690
other components and it does so by

00:35:32,350 --> 00:35:40,000
adding this attribute selector that

00:35:34,690 --> 00:35:42,730
looks for NG content - and this person

00:35:40,000 --> 00:35:45,580
come present will be replaced in runtime

00:35:42,730 --> 00:35:48,120
by a I guess incrementing number or

00:35:45,580 --> 00:35:48,120
something like that

00:35:48,960 --> 00:35:58,750
hmm okay that's a good question why do

00:35:54,550 --> 00:36:00,430
you have a source map here and the

00:35:58,750 --> 00:36:02,890
reason we have source map and we're

00:36:00,430 --> 00:36:05,860
going to see it in a few moments in the

00:36:02,890 --> 00:36:10,300
ng factories file is that if we have any

00:36:05,860 --> 00:36:12,610
errors or we want to when we ship this

00:36:10,300 --> 00:36:15,310
to the browser we want to see where the

00:36:12,610 --> 00:36:18,130
Styles come from it uses the source map

00:36:15,310 --> 00:36:25,740
to back to map those tiles back to the

00:36:18,130 --> 00:36:30,100
original CSS file oh why is it inline so

00:36:25,740 --> 00:36:32,830
that a matter of configuration like

00:36:30,100 --> 00:36:34,270
behind a sense it's user swap back and I

00:36:32,830 --> 00:36:36,820
think that's a good question to the

00:36:34,270 --> 00:36:43,000
angular CLI team why they chose to do it

00:36:36,820 --> 00:36:45,490
in line in this case yeah but as a

00:36:43,000 --> 00:36:48,970
matter of fact when you go to production

00:36:45,490 --> 00:36:50,560
with ng - Build - prod it removes all

00:36:48,970 --> 00:36:53,770
the source map so there is no issue here

00:36:50,560 --> 00:36:55,600
and when you do is in development mode

00:36:53,770 --> 00:36:57,850
this actually happens inside the browser

00:36:55,600 --> 00:36:59,800
so as we have seen the compiler goes

00:36:57,850 --> 00:37:01,510
into the browser and all of these atoms

00:36:59,800 --> 00:37:04,480
inside the browser in development mode

00:37:01,510 --> 00:37:08,470
so as a matter of fact what we are doing

00:37:04,480 --> 00:37:11,860
here is a little bit special it doesn't

00:37:08,470 --> 00:37:12,930
happen in nature in nature it either

00:37:11,860 --> 00:37:16,619
ships

00:37:12,930 --> 00:37:20,249
minified and compiled to production ori

00:37:16,619 --> 00:37:22,739
chips not compiled to the browser where

00:37:20,249 --> 00:37:27,359
the compiler is run thanks for the

00:37:22,739 --> 00:37:29,910
question so yeah so the other thing the

00:37:27,359 --> 00:37:32,069
compiler does it just takes our styles

00:37:29,910 --> 00:37:34,349
and make them more specific and those

00:37:32,069 --> 00:37:38,969
allows us to achieve something which is

00:37:34,349 --> 00:37:42,150
like shadow Dom that allows us to

00:37:38,969 --> 00:37:44,009
isolate the styles of each component but

00:37:42,150 --> 00:37:47,009
it's not real cherry Odom it just the

00:37:44,009 --> 00:37:48,719
simulation on one time this thing will

00:37:47,009 --> 00:37:51,150
be replaced with a unique number that

00:37:48,719 --> 00:37:56,670
identifies the specific component

00:37:51,150 --> 00:37:59,430
instance so that's another thing and we

00:37:56,670 --> 00:38:02,039
can do all of the all of these things in

00:37:59,430 --> 00:38:04,440
runtime like load stylesheet and update

00:38:02,039 --> 00:38:10,499
it but it's much more efficient to have

00:38:04,440 --> 00:38:12,329
it done before ahead of time so the

00:38:10,499 --> 00:38:17,099
final thing the compiler does for our

00:38:12,329 --> 00:38:19,589
components is we have so we looked at

00:38:17,099 --> 00:38:23,069
the HTML at the CSS and we also have the

00:38:19,589 --> 00:38:26,400
PS file which is this app this component

00:38:23,069 --> 00:38:28,469
that the earth and the compiler doesn't

00:38:26,400 --> 00:38:31,019
actually touch the code inside a

00:38:28,469 --> 00:38:35,059
component the code will stay as it is

00:38:31,019 --> 00:38:40,380
but the compiler does read all the

00:38:35,059 --> 00:38:42,390
decorators and the if you had dependency

00:38:40,380 --> 00:38:44,339
injection inside your constructor all

00:38:42,390 --> 00:38:46,969
the arguments of the constructor or

00:38:44,339 --> 00:38:50,279
their types and a lot of other

00:38:46,969 --> 00:38:53,219
information as we will see soon from the

00:38:50,279 --> 00:38:57,739
component and it writes it into the ng

00:38:53,219 --> 00:39:00,900
Factory so in this case we can like

00:38:57,739 --> 00:39:04,499
that's not right well that was the app

00:39:00,900 --> 00:39:11,069
component ng factory yeah we can

00:39:04,499 --> 00:39:14,660
actually see that here is this CRT which

00:39:11,069 --> 00:39:17,489
stands for create renderer type and this

00:39:14,660 --> 00:39:20,309
includes the information about the

00:39:17,489 --> 00:39:21,950
component and we can see that one of the

00:39:20,309 --> 00:39:25,910
things we have here is the star

00:39:21,950 --> 00:39:28,579
so the CSS spell that turned into a

00:39:25,910 --> 00:39:30,880
string with the CSS rules with the ng

00:39:28,579 --> 00:39:36,170
content edit that we have just seen is

00:39:30,880 --> 00:39:39,109
imported here and it's attached to this

00:39:36,170 --> 00:39:42,290
object object that describes the styles

00:39:39,109 --> 00:39:47,030
that are attached to the component so we

00:39:42,290 --> 00:39:51,650
have let me switch to the side-by-side

00:39:47,030 --> 00:39:55,040
mode so we had this style urls

00:39:51,650 --> 00:39:58,040
declaration here and it turned it into

00:39:55,040 --> 00:40:01,510
this size property of the component

00:39:58,040 --> 00:40:04,099
definition here so it creates the

00:40:01,510 --> 00:40:06,980
annotations and as we will see soon it

00:40:04,099 --> 00:40:10,700
also reads the types annotations for the

00:40:06,980 --> 00:40:14,420
dependency injection so the compiler

00:40:10,700 --> 00:40:18,200
actually transforms the HTML into the

00:40:14,420 --> 00:40:22,150
typescript it runs from the CSS into

00:40:18,200 --> 00:40:25,880
string in typescript and it takes our

00:40:22,150 --> 00:40:27,440
component or controller and it doesn't

00:40:25,880 --> 00:40:29,720
do anything to the code that we wrote

00:40:27,440 --> 00:40:34,400
but it extracts the information from

00:40:29,720 --> 00:40:39,530
there such as the decorator and depends

00:40:34,400 --> 00:40:43,569
the injection information and last thing

00:40:39,530 --> 00:40:47,390
that the compiler does for us is modules

00:40:43,569 --> 00:40:49,670
so we all know about the ng modules and

00:40:47,390 --> 00:40:52,130
the reason ng modules were very

00:40:49,670 --> 00:40:55,420
introduced into angular is that we need

00:40:52,130 --> 00:40:57,920
context for the compiler we need when we

00:40:55,420 --> 00:41:00,260
call one component from a different

00:40:57,920 --> 00:41:04,430
component we need a compiler to be able

00:41:00,260 --> 00:41:08,869
to tell okay we need a compiler to be

00:41:04,430 --> 00:41:13,190
able to tell this component is wrong in

00:41:08,869 --> 00:41:17,000
my mic okay we need to tell this

00:41:13,190 --> 00:41:22,190
component is rather is defined in that

00:41:17,000 --> 00:41:24,859
file and we also need to use we also use

00:41:22,190 --> 00:41:29,210
the ng module to define the dependency

00:41:24,859 --> 00:41:31,940
injection like when we inject the title

00:41:29,210 --> 00:41:33,890
service we need to bless you we need to

00:41:31,940 --> 00:41:37,380
know where this

00:41:33,890 --> 00:41:41,430
service is defined so if we look into

00:41:37,380 --> 00:41:43,590
our app module we have all those

00:41:41,430 --> 00:41:45,870
declarations without which tell the

00:41:43,590 --> 00:41:48,960
compiler these are the components you

00:41:45,870 --> 00:41:51,870
should be aware of when you are compiler

00:41:48,960 --> 00:41:53,640
compiling the imports the providers

00:41:51,870 --> 00:41:56,700
which we are going to talk about soon

00:41:53,640 --> 00:42:03,570
and this bootstrap and this thing

00:41:56,700 --> 00:42:08,190
actually compiles into that the app

00:42:03,570 --> 00:42:12,450
module factory and this Factory has a

00:42:08,190 --> 00:42:14,070
bunch of stuff in it and what we are

00:42:12,450 --> 00:42:16,370
going to look at right now is how

00:42:14,070 --> 00:42:20,670
dependency injection works in angular

00:42:16,370 --> 00:42:25,260
using the compiled code so let's say I

00:42:20,670 --> 00:42:27,210
want to get the testability object so I

00:42:25,260 --> 00:42:31,290
have some component and that component

00:42:27,210 --> 00:42:33,480
has its contract constructor and

00:42:31,290 --> 00:42:35,490
argument of type testability which is

00:42:33,480 --> 00:42:38,160
one of the services that are built into

00:42:35,490 --> 00:42:40,920
angular what angular does behind the

00:42:38,160 --> 00:42:44,640
scenes it calls this get internal method

00:42:40,920 --> 00:42:48,180
with the token with the testability with

00:42:44,640 --> 00:42:51,120
the class object and this method does a

00:42:48,180 --> 00:42:56,760
really simple thing it just compares

00:42:51,120 --> 00:43:00,110
this token to every single identifier to

00:42:56,760 --> 00:43:03,060
every single token that it knows and

00:43:00,110 --> 00:43:05,790
looks for a match in this case it will

00:43:03,060 --> 00:43:07,860
go through this list until it gets to

00:43:05,790 --> 00:43:10,500
this line and it see there is a match we

00:43:07,860 --> 00:43:16,340
have for testability so it equals to the

00:43:10,500 --> 00:43:20,040
stability and then once it finds this

00:43:16,340 --> 00:43:22,740
once it finds this match it will simply

00:43:20,040 --> 00:43:26,220
return this dot underscore the stability

00:43:22,740 --> 00:43:29,340
24 and this is one of the methods that

00:43:26,220 --> 00:43:32,250
the compiler generates for us and it

00:43:29,340 --> 00:43:34,710
does a simple thing it checks whether we

00:43:32,250 --> 00:43:35,430
already have this instance of

00:43:34,710 --> 00:43:37,830
testability

00:43:35,430 --> 00:43:41,880
if we don't have it creates a new

00:43:37,830 --> 00:43:44,640
testability and it also gives all the

00:43:41,880 --> 00:43:46,410
dependencies that is the built in it

00:43:44,640 --> 00:43:48,329
if we look at about

00:43:46,410 --> 00:43:51,660
phoenician of the testability service it

00:43:48,329 --> 00:43:56,190
takes 1 ng zone so it asks the injector

00:43:51,660 --> 00:43:58,950
to give us an NG zone and then once

00:43:56,190 --> 00:44:02,910
we've initialized it just returns the

00:43:58,950 --> 00:44:05,819
instance so basically we could write

00:44:02,910 --> 00:44:08,849
code that would stored it into a map of

00:44:05,819 --> 00:44:11,670
all the services and would figure out

00:44:08,849 --> 00:44:14,039
the expenses on runtime and create the

00:44:11,670 --> 00:44:16,980
services but that would take much longer

00:44:14,039 --> 00:44:20,760
that's what we did in angular 1 but in

00:44:16,980 --> 00:44:22,619
angular now in nu R for what we do we

00:44:20,760 --> 00:44:26,579
simply generate code that does all the

00:44:22,619 --> 00:44:30,059
checks statically and you probably

00:44:26,579 --> 00:44:33,270
wonder why we do all those if statements

00:44:30,059 --> 00:44:36,450
instead of using just an object to map

00:44:33,270 --> 00:44:40,049
from a token to the method that returns

00:44:36,450 --> 00:44:42,900
that object and the reason is in

00:44:40,049 --> 00:44:45,839
JavaScript the indexes of Maps must be

00:44:42,900 --> 00:44:49,410
strings so if you have an object and you

00:44:45,839 --> 00:44:51,960
access it by index it's JavaScript first

00:44:49,410 --> 00:44:54,630
converted to string it because the to

00:44:51,960 --> 00:44:56,520
string method so in angular 1 the

00:44:54,630 --> 00:45:00,799
dependency injection was based on string

00:44:56,520 --> 00:45:03,900
in that how it worked now in angular r4

00:45:00,799 --> 00:45:05,970
we want to use the actual class object

00:45:03,900 --> 00:45:08,490
as the tokens for the dependency

00:45:05,970 --> 00:45:11,910
injection so we can loan longer use just

00:45:08,490 --> 00:45:13,559
object and we could use map and Tibet

00:45:11,910 --> 00:45:18,079
they want to comment why I didn't use

00:45:13,559 --> 00:45:18,079
map and you chose this method of many

00:45:31,770 --> 00:45:38,880
okay so yeah so tree-shaking are can

00:45:36,130 --> 00:45:41,950
detect that if you are not using this

00:45:38,880 --> 00:45:44,289
like ng localization service in your

00:45:41,950 --> 00:45:47,319
application then it can remove this

00:45:44,289 --> 00:45:49,599
entire if statement and then the code

00:45:47,319 --> 00:45:51,309
for ng localization for the service the

00:45:49,599 --> 00:45:53,559
implementation won't be included in your

00:45:51,309 --> 00:45:55,869
own bundle so if you use closure

00:45:53,559 --> 00:45:58,750
compiler it actually takes advantage of

00:45:55,869 --> 00:46:01,180
that ECC specific structure to remove

00:45:58,750 --> 00:46:08,109
services that are not used from the code

00:46:01,180 --> 00:46:08,950
altogether so thank you well yeah to be

00:46:08,109 --> 00:46:11,500
honest with you

00:46:08,950 --> 00:46:13,000
angular is not perfect yet and we are

00:46:11,500 --> 00:46:17,740
happy about that because you are making

00:46:13,000 --> 00:46:21,369
it better all the time so yeah so it

00:46:17,740 --> 00:46:23,200
might improve in the future so yeah so

00:46:21,369 --> 00:46:25,089
this is the end refractory and this is

00:46:23,200 --> 00:46:28,359
how dependency injection works behind

00:46:25,089 --> 00:46:32,039
the scenes in Angela I want to show you

00:46:28,359 --> 00:46:34,809
a little something else about the

00:46:32,039 --> 00:46:40,210
component factory so that was the app

00:46:34,809 --> 00:46:43,720
component ng Factory and if we look back

00:46:40,210 --> 00:46:45,039
in our template so we said it's HTML

00:46:43,720 --> 00:46:50,200
file

00:46:45,039 --> 00:46:54,400
HTML file compiles to this so entitle is

00:46:50,200 --> 00:46:57,880
a string right and you know it's not

00:46:54,400 --> 00:47:01,480
really Java JavaScript doesn't like when

00:46:57,880 --> 00:47:04,240
we multiply strings by number so you can

00:47:01,480 --> 00:47:07,210
guess that if we multiply title by two

00:47:04,240 --> 00:47:11,410
that would be an error and on angularjs

00:47:07,210 --> 00:47:14,140
would get up on runtime and here you can

00:47:11,410 --> 00:47:17,349
probably guess that by multiplying title

00:47:14,140 --> 00:47:20,200
by two it would just the compiler would

00:47:17,349 --> 00:47:22,779
just copy this expression right into the

00:47:20,200 --> 00:47:24,880
compiled code and then touch treat could

00:47:22,779 --> 00:47:28,329
tell us hey you did something wrong so

00:47:24,880 --> 00:47:32,250
let's run the compiler and validate our

00:47:28,329 --> 00:47:37,420
assumption and the compiler is running

00:47:32,250 --> 00:47:39,970
compiling and yes you can see we got the

00:47:37,420 --> 00:47:41,860
error here in the compiled code that

00:47:39,970 --> 00:47:45,370
says hey you can't multiply a string

00:47:41,860 --> 00:47:48,190
with by a number and this is where the

00:47:45,370 --> 00:47:52,680
source Maps come into play because when

00:47:48,190 --> 00:47:55,030
you get this error from typescript the

00:47:52,680 --> 00:47:59,050
typescript compiler can use this source

00:47:55,030 --> 00:48:00,940
map to tell you hey so I so there in

00:47:59,050 --> 00:48:06,040
this file on this line but it actually

00:48:00,940 --> 00:48:08,620
came from this template and suddenly you

00:48:06,040 --> 00:48:13,210
can get it right in your IDE when you

00:48:08,620 --> 00:48:17,590
edit the template and I lost my video

00:48:13,210 --> 00:48:19,540
here we got fix so yeah so that's I

00:48:17,590 --> 00:48:23,250
think the big strength of the compiler

00:48:19,540 --> 00:48:26,620
we get when we develop we can get this

00:48:23,250 --> 00:48:28,720
error information as we write the

00:48:26,620 --> 00:48:31,420
templates and it's very accurate we get

00:48:28,720 --> 00:48:34,030
type checking in the template and as the

00:48:31,420 --> 00:48:35,830
bass mentioned it's already available as

00:48:34,030 --> 00:48:37,540
a visual studio code extension which I'm

00:48:35,830 --> 00:48:41,770
going through download right after this

00:48:37,540 --> 00:48:44,500
talk so we change something here we get

00:48:41,770 --> 00:48:46,180
a result here and typescript checks it

00:48:44,500 --> 00:48:47,080
for us to make sure we didn't do

00:48:46,180 --> 00:48:52,510
anything wrong

00:48:47,080 --> 00:48:56,800
and you can also see that we got this

00:48:52,510 --> 00:48:59,680
error here on yeah we got this error

00:48:56,800 --> 00:49:01,570
from the compiler so even if there are

00:48:59,680 --> 00:49:04,090
errors in the template the compiler

00:49:01,570 --> 00:49:06,550
still turns into taxes and then it runs

00:49:04,090 --> 00:49:09,340
five scripts that they were earth but

00:49:06,550 --> 00:49:12,850
we'll still get the output like we did

00:49:09,340 --> 00:49:16,330
here so we played a little with the

00:49:12,850 --> 00:49:19,570
compiler I mean I did but now you're

00:49:16,330 --> 00:49:22,990
going to play with it first thing I want

00:49:19,570 --> 00:49:26,290
you to do is to run ng serve and I want

00:49:22,990 --> 00:49:31,930
you to do it now before we move on

00:49:26,290 --> 00:49:34,870
because we are going to do some things

00:49:31,930 --> 00:49:38,250
that will make webpack unhappy if we do

00:49:34,870 --> 00:49:40,390
ng server after so let me get my

00:49:38,250 --> 00:49:45,990
template back to the state that it was

00:49:40,390 --> 00:49:49,019
and let's close this file and let's run

00:49:45,990 --> 00:49:54,519
ng serve

00:49:49,019 --> 00:49:59,819
and anti surf should and you serve

00:49:54,519 --> 00:50:03,180
should compile this code and étude

00:49:59,819 --> 00:50:09,970
eventually open the local web server

00:50:03,180 --> 00:50:12,579
let's see if it's ready not yet Oh data

00:50:09,970 --> 00:50:23,019
Talia it gets confused by this factory

00:50:12,579 --> 00:50:24,460
file I will just remove it yes okay now

00:50:23,019 --> 00:50:29,559
it should work well it shouldn't

00:50:24,460 --> 00:50:33,970
complain anymore okay I'm just going to

00:50:29,559 --> 00:50:39,940
remove this file for now can one NGC

00:50:33,970 --> 00:50:43,000
anyway and regenerate it so did you

00:50:39,940 --> 00:50:45,220
manage to run and reserve okay let's

00:50:43,000 --> 00:50:47,740
just run NGC to recreate this file I

00:50:45,220 --> 00:50:49,450
will run and yourself and after we ng

00:50:47,740 --> 00:50:51,670
served the next thing we are going to do

00:50:49,450 --> 00:50:56,490
we are actually going to make angular

00:50:51,670 --> 00:51:02,589
use the compiled template so right now

00:50:56,490 --> 00:51:04,329
if we change this HTML file the HTML

00:51:02,589 --> 00:51:06,400
file will be downloaded to the browser

00:51:04,329 --> 00:51:08,740
and the compiler will be run inside the

00:51:06,400 --> 00:51:12,579
browser and we get a result in the

00:51:08,740 --> 00:51:17,019
browser but in a moment we are going to

00:51:12,579 --> 00:51:19,059
change that so the compiler will get the

00:51:17,019 --> 00:51:21,730
compiled result this will allow us to

00:51:19,059 --> 00:51:24,250
this to edit the compiled code to make

00:51:21,730 --> 00:51:27,640
changes and see what it was like in the

00:51:24,250 --> 00:51:32,799
browser so I'm refreshing now app works

00:51:27,640 --> 00:51:36,190
in hot pink let's even make it bigger so

00:51:32,799 --> 00:51:38,650
app works and if I say here I don't know

00:51:36,190 --> 00:51:41,769
what hi

00:51:38,650 --> 00:51:46,329
I can see instantly updates as expected

00:51:41,769 --> 00:51:49,619
and if I look inside my bundle that's

00:51:46,329 --> 00:51:52,900
the main bundle I can actually find this

00:51:49,619 --> 00:51:55,930
maybe I wasn't a good choice yeah I can

00:51:52,900 --> 00:51:58,869
actually find that the HTML appears

00:51:55,930 --> 00:52:00,819
inside the bundle which means it's get

00:51:58,869 --> 00:52:02,070
downloaded to the browser and the

00:52:00,819 --> 00:52:03,570
compilation happens

00:52:02,070 --> 00:52:05,760
in the browser you remember the

00:52:03,570 --> 00:52:08,010
beginning is so this big half of the

00:52:05,760 --> 00:52:10,080
bundle size compiler getting download to

00:52:08,010 --> 00:52:14,910
the browser and that's the reason it's

00:52:10,080 --> 00:52:18,960
run inside the browser so with that

00:52:14,910 --> 00:52:21,300
let's trick angular into using the

00:52:18,960 --> 00:52:25,020
compiled code instead of the templates

00:52:21,300 --> 00:52:28,800
so I'll remove the high here and what we

00:52:25,020 --> 00:52:33,270
are going to do is after we run NC serve

00:52:28,800 --> 00:52:36,900
we are going to replace the bootstrap

00:52:33,270 --> 00:52:38,910
code far up with a different code we are

00:52:36,900 --> 00:52:42,420
going to bootstrap with the app module

00:52:38,910 --> 00:52:44,790
ng factory instead of the app module so

00:52:42,420 --> 00:52:48,120
I want you to follow along with me we

00:52:44,790 --> 00:52:50,760
are going to main that TS and assuming

00:52:48,120 --> 00:52:56,670
that you run ng spend and sir ng serve

00:52:50,760 --> 00:53:00,870
you can now simply import from app dot

00:52:56,670 --> 00:53:04,260
module dot ng factory and it has no op

00:53:00,870 --> 00:53:08,040
module it has app module ng okay now we

00:53:04,260 --> 00:53:10,050
get more space factory and now if we

00:53:08,040 --> 00:53:12,210
wanted to bootstrap that we would need

00:53:10,050 --> 00:53:15,240
to get it to call a different function

00:53:12,210 --> 00:53:17,580
instead of bootstrap module module we

00:53:15,240 --> 00:53:20,430
will need to go bootstrap module factory

00:53:17,580 --> 00:53:22,980
so there are four changes that you need

00:53:20,430 --> 00:53:26,730
to do in this line line number for any

00:53:22,980 --> 00:53:31,530
line number eleven so to do this while I

00:53:26,730 --> 00:53:40,200
take a sip water and then we'll check if

00:53:31,530 --> 00:53:41,510
it worked well all right so did

00:53:40,200 --> 00:53:46,890
everybody do that

00:53:41,510 --> 00:53:52,530
one question oh you're done so one guy

00:53:46,890 --> 00:53:56,640
done okay thanks okay so now that we are

00:53:52,530 --> 00:54:00,120
done we still expect to see this F works

00:53:56,640 --> 00:54:03,810
and it says app works but we expect that

00:54:00,120 --> 00:54:06,120
we can no longer find the HTML code oh

00:54:03,810 --> 00:54:08,720
I'm looking inside zone J so of course I

00:54:06,120 --> 00:54:08,720
can't find it

00:54:10,050 --> 00:54:14,430
oh I think it's still here but it's not

00:54:12,330 --> 00:54:17,340
using it let's make sure it's not using

00:54:14,430 --> 00:54:21,690
it instead of so I'm not going to modify

00:54:17,340 --> 00:54:24,870
the HTML code like to say ng-conf and

00:54:21,690 --> 00:54:28,230
then title and as I can see the app

00:54:24,870 --> 00:54:31,290
reloads but I don't I no longer get

00:54:28,230 --> 00:54:34,020
these changes because it no longer uses

00:54:31,290 --> 00:54:37,260
the HTML code it uses the compiled code

00:54:34,020 --> 00:54:41,160
so please try this to make any change to

00:54:37,260 --> 00:54:43,590
route component HTML and see if when you

00:54:41,160 --> 00:54:46,290
reload it stays on up works which means

00:54:43,590 --> 00:54:52,440
you are now using the compiled code

00:54:46,290 --> 00:54:56,550
instead of the HTML code and they see

00:54:52,440 --> 00:54:58,490
few people doing yeah it works so what

00:54:56,550 --> 00:55:02,690
we are going to do now we are going to

00:54:58,490 --> 00:55:07,340
double check by changing the ng factory

00:55:02,690 --> 00:55:14,010
of the component not of the model

00:55:07,340 --> 00:55:22,100
component so this is the ng factory and

00:55:14,010 --> 00:55:27,120
let's add some text here let's say love

00:55:22,100 --> 00:55:29,220
weapons and if everything works well we

00:55:27,120 --> 00:55:31,260
expect this text to appear before the

00:55:29,220 --> 00:55:33,150
title as we've seen before this defines

00:55:31,260 --> 00:55:36,180
the text that appears before the binding

00:55:33,150 --> 00:55:39,240
so just a moment let's see ok it works

00:55:36,180 --> 00:55:41,700
so when we edit HTML nothing happens

00:55:39,240 --> 00:55:45,390
because we no longer look inside the

00:55:41,700 --> 00:55:49,730
HTML but when we edit this compiled code

00:55:45,390 --> 00:55:53,040
it actually effects the template because

00:55:49,730 --> 00:55:55,590
that's what we are using right now so

00:55:53,040 --> 00:55:56,730
now we have done something unnatural to

00:55:55,590 --> 00:56:00,660
angular

00:55:56,730 --> 00:56:03,120
instead of compiling the code in the

00:56:00,660 --> 00:56:05,340
browser in development book mode we are

00:56:03,120 --> 00:56:08,460
pre compiling it on the disk and then

00:56:05,340 --> 00:56:10,370
use that instead of a HTML so it's not

00:56:08,460 --> 00:56:13,140
very convenient if you want to develop

00:56:10,370 --> 00:56:18,300
but it's super convenient if you want to

00:56:13,140 --> 00:56:22,200
hack the compiler and you have done with

00:56:18,300 --> 00:56:24,210
the main TS that change you act

00:56:22,200 --> 00:56:28,620
we had to do this if you wanted to work

00:56:24,210 --> 00:56:31,560
with the äôt ahead of time compilation a

00:56:28,620 --> 00:56:34,140
few months Dec but now the angular CLI

00:56:31,560 --> 00:56:36,330
does this for you behind the scenes when

00:56:34,140 --> 00:56:39,480
you build the production the angular CLI

00:56:36,330 --> 00:56:42,480
goes over your code and it looks for

00:56:39,480 --> 00:56:45,120
this platform browser dynamic the boots

00:56:42,480 --> 00:56:48,540
of module statements and it replaces

00:56:45,120 --> 00:56:50,520
them just like we did here and this is

00:56:48,540 --> 00:56:54,000
all done for you behind the scenes by

00:56:50,520 --> 00:56:57,900
WebEx plugin that is provided by the

00:56:54,000 --> 00:57:01,380
angular CLI team and you can learn more

00:56:57,900 --> 00:57:07,950
about WebEx in Sean's session but it's

00:57:01,380 --> 00:57:09,930
going on right now so to like so now

00:57:07,950 --> 00:57:12,150
that mean we have we have like this

00:57:09,930 --> 00:57:14,610
state where we can edit the compiled

00:57:12,150 --> 00:57:17,880
code we are going to do a few exercises

00:57:14,610 --> 00:57:21,060
that will have like hand hack the

00:57:17,880 --> 00:57:23,220
compiled code like instead of wetting

00:57:21,060 --> 00:57:25,520
the compiler do the hard work for us we

00:57:23,220 --> 00:57:28,140
are going to do the hard work for us so

00:57:25,520 --> 00:57:30,960
from now on we are no longer going to

00:57:28,140 --> 00:57:33,030
run NPM run compiler and you see we are

00:57:30,960 --> 00:57:35,310
doing that would be cheating we are

00:57:33,030 --> 00:57:37,170
going to try to just edit the compiled

00:57:35,310 --> 00:57:41,510
code and achieve the results that we

00:57:37,170 --> 00:57:44,610
want so our first exercise would be to

00:57:41,510 --> 00:57:48,500
instead of displaying app works as we do

00:57:44,610 --> 00:57:51,240
now I want this to be uppercase and

00:57:48,500 --> 00:57:54,900
again don't a date don't edit the

00:57:51,240 --> 00:57:59,130
component or the HTML file just edit the

00:57:54,900 --> 00:58:02,040
ng factory just a dig or something here

00:57:59,130 --> 00:58:06,120
in this function to make the title

00:58:02,040 --> 00:58:09,060
appear uppercase and as you do this if

00:58:06,120 --> 00:58:11,100
it worked it will be uppercase now if

00:58:09,060 --> 00:58:13,350
you are real quick and you already did

00:58:11,100 --> 00:58:15,660
it there is a bonus instead of just

00:58:13,350 --> 00:58:18,600
displaying the title on the top I want

00:58:15,660 --> 00:58:23,580
you to display twice first time on top

00:58:18,600 --> 00:58:26,850
inside the h1 element second time one

00:58:23,580 --> 00:58:28,860
outside of this element so good luck to

00:58:26,850 --> 00:58:31,230
you and if you have any questions it

00:58:28,860 --> 00:58:34,320
I'll raise your hand again it ties here

00:58:31,230 --> 00:58:34,950
so you will come to you if you have a

00:58:34,320 --> 00:58:36,420
question

00:58:34,950 --> 00:58:48,270
that applies to everything you can ask

00:58:36,420 --> 00:58:50,640
me what's the question so the first one

00:58:48,270 --> 00:58:52,800
just make the title uppercase the second

00:58:50,640 --> 00:58:58,050
one I want you to it should look like

00:58:52,800 --> 00:59:00,839
this like you have these up works here

00:58:58,050 --> 00:59:03,150
and then I wanted to don't do it through

00:59:00,839 --> 00:59:07,109
the developer tools of course but I want

00:59:03,150 --> 00:59:11,310
you to say outside the h1 element

00:59:07,109 --> 00:59:13,140
another app works and don't just write

00:59:11,310 --> 00:59:16,380
the text here I want it to come from the

00:59:13,140 --> 00:59:19,530
title just like it's in the h1 I hope

00:59:16,380 --> 00:59:21,480
it's more clear now for the bonus now I

00:59:19,530 --> 00:59:23,250
asked the production team if they can

00:59:21,480 --> 00:59:26,849
play some ambient music while we are

00:59:23,250 --> 00:59:31,200
doing the exercises but since they are

00:59:26,849 --> 00:59:36,329
not with me right now so now I'm bit

00:59:31,200 --> 00:59:39,750
music for now yeah I try can you like

00:59:36,329 --> 00:59:47,010
answer questions please or Tobias maybe

00:59:39,750 --> 00:59:48,869
if you so yeah okay you got all right so

00:59:47,010 --> 00:59:51,630
we'll wait a few more minutes for some

00:59:48,869 --> 00:59:57,109
people at least to get to the first part

00:59:51,630 --> 00:59:57,109
I take another step of order

01:00:10,380 --> 01:00:22,500
yes if you can hmm but I need to find

01:00:16,359 --> 01:00:22,500
some music dance oh okay thanks

01:00:24,000 --> 01:00:29,160
let's see if I can find some really

01:00:26,680 --> 01:00:29,160
quickly

01:00:54,560 --> 01:00:57,520
I tried

01:01:33,679 --> 01:01:39,269
well how is going of everybody completed

01:01:37,409 --> 01:01:43,259
at least the first part where the title

01:01:39,269 --> 01:01:47,249
goes upper case okay low might one more

01:01:43,259 --> 01:01:49,139
minute and then we move on um if you

01:01:47,249 --> 01:01:59,130
have any questions retire into vice or

01:01:49,139 --> 01:02:01,829
round and for the next break for the

01:01:59,130 --> 01:02:04,559
next exercise I found some public domain

01:02:01,829 --> 01:02:08,339
music I can put apparently classical

01:02:04,559 --> 01:02:10,759
music so now it's public domain I hope

01:02:08,339 --> 01:02:10,759
you like it

01:02:30,829 --> 01:02:39,329
so okay I hope everybody at least

01:02:36,119 --> 01:02:42,239
completed the first step but let's go

01:02:39,329 --> 01:02:44,969
quickly over the solution for the first

01:02:42,239 --> 01:02:46,859
step and then for the bottom part I hope

01:02:44,969 --> 01:02:50,609
you didn't cheat and use the developer

01:02:46,859 --> 01:02:53,880
tools like I did so for the first part

01:02:50,609 --> 01:02:56,999
we wanted to change the title to

01:02:53,880 --> 01:02:59,719
uppercase so if you would have done it

01:02:56,999 --> 01:03:04,199
in the HTML we'll simply call this to

01:02:59,719 --> 01:03:07,229
uppercase method and in order to make

01:03:04,199 --> 01:03:11,279
this work inside a compiled code we

01:03:07,229 --> 01:03:15,749
simply have to do the same but inside

01:03:11,279 --> 01:03:18,659
the compiler file so instead of using Co

01:03:15,749 --> 01:03:24,089
dot title we would need to use Co dot

01:03:18,659 --> 01:03:26,789
title dose to uppercase and it works at

01:03:24,089 --> 01:03:31,439
least say so and then for the bollocks

01:03:26,789 --> 01:03:35,939
part we actually wanted to plant to put

01:03:31,439 --> 01:03:39,269
this title after the h1 element now this

01:03:35,939 --> 01:03:41,969
time to start understanding what's going

01:03:39,269 --> 01:03:43,650
on here so here we have this view

01:03:41,969 --> 01:03:47,099
definition which is a list of three

01:03:43,650 --> 01:03:50,579
items and the first item is this h1

01:03:47,099 --> 01:03:52,769
element the second item is this text

01:03:50,579 --> 01:03:55,019
element where the title is plants and

01:03:52,769 --> 01:03:58,469
the third item is another text

01:03:55,019 --> 01:04:00,299
definition Ted element so I think the

01:03:58,469 --> 01:04:03,869
first question that may come to your

01:04:00,299 --> 01:04:07,949
mind is how does our angular knows that

01:04:03,869 --> 01:04:12,150
this element should go inside the h1 but

01:04:07,949 --> 01:04:12,749
this one shouldn't if I modify anything

01:04:12,150 --> 01:04:16,799
here

01:04:12,749 --> 01:04:20,779
like I say hello I can see their logos

01:04:16,799 --> 01:04:24,269
outside so this is actually the first

01:04:20,779 --> 01:04:27,419
this element number two in the list is

01:04:24,269 --> 01:04:30,209
the child of this element but this one

01:04:27,419 --> 01:04:32,909
is a sibling of that element so how does

01:04:30,209 --> 01:04:35,729
it work if we look inside the element

01:04:32,909 --> 01:04:39,719
definition function we can see how it

01:04:35,729 --> 01:04:43,480
has a bunch of parameters and we have

01:04:39,719 --> 01:04:47,200
these one two three four the

01:04:43,480 --> 01:04:51,850
parameters the child counts and we can

01:04:47,200 --> 01:04:54,070
see it has one child here so the

01:04:51,850 --> 01:04:57,010
compiler actually turns our elementary

01:04:54,070 --> 01:04:59,320
into a flattened list but each element

01:04:57,010 --> 01:05:03,160
has the count of children that follows

01:04:59,320 --> 01:05:06,160
it so in this case angle argent first

01:05:03,160 --> 01:05:09,040
that sent it has one children this is

01:05:06,160 --> 01:05:11,770
the child the one that follows it if it

01:05:09,040 --> 01:05:13,750
had two children then there would be two

01:05:11,770 --> 01:05:16,990
elements let me show you that so if we

01:05:13,750 --> 01:05:20,980
change that to two we can actually see

01:05:16,990 --> 01:05:25,440
that low is now a child of the h1 so

01:05:20,980 --> 01:05:30,850
this is how angular know how to put the

01:05:25,440 --> 01:05:34,390
elements in the right order and what we

01:05:30,850 --> 01:05:38,460
wanted to do was to display this title

01:05:34,390 --> 01:05:45,520
inside this text definition that is

01:05:38,460 --> 01:05:49,690
below the h1 and as you could guess we

01:05:45,520 --> 01:05:52,930
have this seek a function that put the

01:05:49,690 --> 01:05:55,840
title inside the first element number

01:05:52,930 --> 01:05:59,619
one in the list which is this one and if

01:05:55,840 --> 01:06:03,280
we look inside the definition of this

01:05:59,619 --> 01:06:07,630
function we can see it gets this view

01:06:03,280 --> 01:06:10,840
data the node index and a bunch of other

01:06:07,630 --> 01:06:15,580
stuff and right now it gets no D index

01:06:10,840 --> 01:06:18,730
of one so if we call it again with node

01:06:15,580 --> 01:06:24,040
index of two we expect it to update the

01:06:18,730 --> 01:06:26,590
second one but if we run this code we

01:06:24,040 --> 01:06:30,730
can see it still didn't put the title

01:06:26,590 --> 01:06:35,520
direct why is that first of all we want

01:06:30,730 --> 01:06:37,810
it to let's duplicate this line and we

01:06:35,520 --> 01:06:40,900
wanted to put the title without

01:06:37,810 --> 01:06:48,430
uppercase there so let's remove this to

01:06:40,900 --> 01:06:50,619
uppercase from here and then it still

01:06:48,430 --> 01:06:53,700
didn't work and the reason for that if

01:06:50,619 --> 01:06:56,550
we compare this element where

01:06:53,700 --> 01:06:58,980
works with this element where it doesn't

01:06:56,550 --> 01:07:01,260
display anything we can see that here we

01:06:58,980 --> 01:07:03,870
have two elements and it starts the

01:07:01,260 --> 01:07:06,300
title between those two elements but

01:07:03,870 --> 01:07:08,280
here we only have one element in the

01:07:06,300 --> 01:07:10,680
array so we need to give it another

01:07:08,280 --> 01:07:12,720
element and it will stop the title

01:07:10,680 --> 01:07:14,430
between these two elements that we gave

01:07:12,720 --> 01:07:17,970
it just like it worked here

01:07:14,430 --> 01:07:22,380
so now after we did this it actually

01:07:17,970 --> 01:07:24,930
works so we had to do two things

01:07:22,380 --> 01:07:27,570
first of all we are to call the CKD

01:07:24,930 --> 01:07:30,690
function for a second time and tell it

01:07:27,570 --> 01:07:34,440
this time put the value that you get

01:07:30,690 --> 01:07:37,230
into the second element instead of the

01:07:34,440 --> 01:07:39,960
element number one and then we also had

01:07:37,230 --> 01:07:43,700
to make sure this element contained both

01:07:39,960 --> 01:07:47,850
prefix and suffix so it could stop this

01:07:43,700 --> 01:07:52,530
value inside otherwise it wouldn't do it

01:07:47,850 --> 01:07:55,050
and that's what the bonus was about how

01:07:52,530 --> 01:07:59,850
many people did succeed with it like the

01:07:55,050 --> 01:08:05,430
bonus okay so you are brilliant plus two

01:07:59,850 --> 01:08:10,560
you like for me like revise this is like

01:08:05,430 --> 01:08:15,600
brilliant by the way I had a question

01:08:10,560 --> 01:08:17,550
here oh yeah

01:08:15,600 --> 01:08:19,530
why did you flatten this array of

01:08:17,550 --> 01:08:21,390
children like what I like did you make

01:08:19,530 --> 01:08:25,310
it a flat list of all the elements

01:08:21,390 --> 01:08:25,310
instead of keeping the three structure

01:08:51,540 --> 01:08:58,240
all right so what about basically says

01:08:54,190 --> 01:09:00,760
here is performance as always it's much

01:08:58,240 --> 01:09:03,069
faster to go over flattery instead of

01:09:00,760 --> 01:09:05,350
like walking on a nested list and it

01:09:03,069 --> 01:09:09,339
requires much less memory you need

01:09:05,350 --> 01:09:12,430
recursion or to keep track of your depth

01:09:09,339 --> 01:09:15,190
so yeah performance it's much faster to

01:09:12,430 --> 01:09:16,900
define the element this way on runtime

01:09:15,190 --> 01:09:18,850
when we want to actually create the

01:09:16,900 --> 01:09:21,040
element and you mentioned that this is

01:09:18,850 --> 01:09:23,830
actually the definition of the element

01:09:21,040 --> 01:09:28,120
but we are calling here a bunch of

01:09:23,830 --> 01:09:30,190
function a bunch of functions and those

01:09:28,120 --> 01:09:34,810
functions return something you can see

01:09:30,190 --> 01:09:37,450
they return and note this object like a

01:09:34,810 --> 01:09:40,780
lot of arguments and then the last at

01:09:37,450 --> 01:09:44,170
the last line you can see if we go to

01:09:40,780 --> 01:09:47,380
the end of those functions we can see it

01:09:44,170 --> 01:09:50,230
return to notice and what does that look

01:09:47,380 --> 01:09:56,710
like we can easily find that out if we

01:09:50,230 --> 01:09:59,080
simply add console.log so let's count

01:09:56,710 --> 01:10:03,660
look this whole thing we create here and

01:09:59,080 --> 01:10:03,660
see what it looks like behind the scenes

01:10:03,720 --> 01:10:10,210
updated recompiling and we can see we

01:10:08,170 --> 01:10:12,820
have an array which we object because we

01:10:10,210 --> 01:10:15,370
created H or 1 the h1 and the text

01:10:12,820 --> 01:10:17,950
inside it and the text below it and each

01:10:15,370 --> 01:10:21,580
of those object has a lot of information

01:10:17,950 --> 01:10:23,770
and this is the information that is used

01:10:21,580 --> 01:10:27,820
on runtime to actually create the

01:10:23,770 --> 01:10:30,160
elements so what we have here is helper

01:10:27,820 --> 01:10:33,610
functions that create those objects for

01:10:30,160 --> 01:10:36,310
us and then we pass the array with this

01:10:33,610 --> 01:10:38,800
object to angular on runtime and angular

01:10:36,310 --> 01:10:40,990
creates the element so we are not going

01:10:38,800 --> 01:10:43,840
to look into this object right now they

01:10:40,990 --> 01:10:45,050
contain things like child sound and the

01:10:43,840 --> 01:10:47,810
bindings and

01:10:45,050 --> 01:10:49,730
a lot of stuff from the arguments of

01:10:47,810 --> 01:10:51,380
those functions you can do it at home

01:10:49,730 --> 01:10:55,490
now that you know how to act the

01:10:51,380 --> 01:10:59,440
compiler because right now we have

01:10:55,490 --> 01:11:03,230
another exercise exercise number two is

01:10:59,440 --> 01:11:06,200
not about the components it's about the

01:11:03,230 --> 01:11:08,590
model and about dependency injection but

01:11:06,200 --> 01:11:14,450
first are there any questions about this

01:11:08,590 --> 01:11:14,930
solution for the arm exercise all right

01:11:14,450 --> 01:11:17,860
perfect

01:11:14,930 --> 01:11:17,860
oh one yeah

01:11:40,360 --> 01:11:45,320
okay so if I understood correctly the

01:11:43,070 --> 01:11:48,770
question was if we had aligned with some

01:11:45,320 --> 01:11:51,110
bindings like one line with binding text

01:11:48,770 --> 01:11:55,070
binding text by text what it would look

01:11:51,110 --> 01:11:57,230
like yeah so first of all you can simply

01:11:55,070 --> 01:12:00,410
like go to your component add few more

01:11:57,230 --> 01:12:05,960
bindings and see what would the result

01:12:00,410 --> 01:12:08,650
be or you can also do it here and let's

01:12:05,960 --> 01:12:12,380
do it here for the sake of the demo so

01:12:08,650 --> 01:12:15,290
let's say that we wanted to add another

01:12:12,380 --> 01:12:18,710
text after the title so let's say that

01:12:15,290 --> 01:12:21,380
we wanted you to say title is and then

01:12:18,710 --> 01:12:26,210
it will display the title here even we

01:12:21,380 --> 01:12:34,150
can say uppercase title is and then

01:12:26,210 --> 01:12:38,390
after that we say subtitle is and then

01:12:34,150 --> 01:12:41,840
this will be the end and then we would

01:12:38,390 --> 01:12:46,660
have to we want to add another binding

01:12:41,840 --> 01:12:50,380
so we can add another value here like

01:12:46,660 --> 01:12:53,870
let's add another thing to our component

01:12:50,380 --> 01:13:06,489
so we have title we have subtitle that

01:12:53,870 --> 01:13:09,680
says compiler is amazing now we can

01:13:06,489 --> 01:13:12,920
let's just make a short cut and print

01:13:09,680 --> 01:13:16,100
comp dot subtitle so instead of having

01:13:12,920 --> 01:13:18,560
two elements here like before and after

01:13:16,100 --> 01:13:20,780
now we have three elements and we have

01:13:18,560 --> 01:13:23,060
two elements here and it will stop those

01:13:20,780 --> 01:13:25,850
two elements in the middle between those

01:13:23,060 --> 01:13:28,370
elements so what you did here is

01:13:25,850 --> 01:13:30,920
brilliant instead of me giving you an

01:13:28,370 --> 01:13:32,600
exercise you gave me an exercise so

01:13:30,920 --> 01:13:34,460
thank you for that and let's see if it

01:13:32,600 --> 01:13:38,210
worked I don't know I haven't tried it

01:13:34,460 --> 01:13:41,600
at home I hope I did it well yeah

01:13:38,210 --> 01:13:44,510
basically we have upper case title ease

01:13:41,600 --> 01:13:46,760
up works it's tough the first thing here

01:13:44,510 --> 01:13:50,030
and then subtitle is calm

01:13:46,760 --> 01:13:55,220
Tyler is amazing and so it basically

01:13:50,030 --> 01:14:03,740
works with pink stuff okay

01:13:55,220 --> 01:14:05,090
let's revert that I have no idea where

01:14:03,740 --> 01:14:07,730
I'm okay

01:14:05,090 --> 01:14:10,250
all right let's revert it and move on to

01:14:07,730 --> 01:14:13,580
the second exercise so for the second

01:14:10,250 --> 01:14:16,460
exercise we are going to implement

01:14:13,580 --> 01:14:18,440
dependency injection and for that I want

01:14:16,460 --> 01:14:21,170
every single one of you to generate a

01:14:18,440 --> 01:14:24,200
new service ng generate service emoji

01:14:21,170 --> 01:14:27,920
that would create a new emoji service

01:14:24,200 --> 01:14:31,730
and we are going to try to use this in

01:14:27,920 --> 01:14:36,050
our component it will fail because we

01:14:31,730 --> 01:14:40,820
haven't included it in our module and we

01:14:36,050 --> 01:14:42,950
will fix that in the compiled code so ng

01:14:40,820 --> 01:14:46,640
generate service emoji I'm going to do

01:14:42,950 --> 01:14:50,170
it on my copy as well know I didn't want

01:14:46,640 --> 01:14:50,170
to stop and eserve why did I do that

01:14:51,340 --> 01:14:56,630
refer the changes here real quick so I

01:14:54,140 --> 01:14:59,990
can run nd again otherwise it will

01:14:56,630 --> 01:15:07,160
compute complain meanwhile you can

01:14:59,990 --> 01:15:14,350
create a module service and compile so I

01:15:07,160 --> 01:15:17,480
can generate it and GG service emoji and

01:15:14,350 --> 01:15:20,330
we got the emoji service and it says it

01:15:17,480 --> 01:15:23,180
generated not provided it didn't edit to

01:15:20,330 --> 01:15:24,920
our provider list but we are going to do

01:15:23,180 --> 01:15:28,130
it manually anyway so it doesn't matter

01:15:24,920 --> 01:15:32,690
and this is running so we can restore

01:15:28,130 --> 01:15:35,720
the changes they did okay and you can up

01:15:32,690 --> 01:15:43,370
works perfect or disease and you can

01:15:35,720 --> 01:15:49,100
come from okay all right now it works

01:15:43,370 --> 01:15:52,840
perfect okay so I have this emoji

01:15:49,100 --> 01:15:57,620
service and I'm going to add a little

01:15:52,840 --> 01:15:58,340
member to it let's say cat emoji you got

01:15:57,620 --> 01:16:00,480
one here

01:15:58,340 --> 01:16:03,600
you can google cat emoji

01:16:00,480 --> 01:16:07,950
or your favorite animal I will just use

01:16:03,600 --> 01:16:09,990
the cat for the demo and what I'm going

01:16:07,950 --> 01:16:13,830
to do with this emoji and I want you to

01:16:09,990 --> 01:16:18,750
do the same on your component I want you

01:16:13,830 --> 01:16:20,400
to inject it that's the component I want

01:16:18,750 --> 01:16:23,370
you to inject the service into your

01:16:20,400 --> 01:16:26,190
constructor so we have emoji emoji

01:16:23,370 --> 01:16:29,550
service and then we want to say this the

01:16:26,190 --> 01:16:31,530
title plus equals emoji dot kit or

01:16:29,550 --> 01:16:34,950
whatever animal you chose

01:16:31,530 --> 01:16:37,680
so we basically want to take some data

01:16:34,950 --> 01:16:41,130
from the service and display in our

01:16:37,680 --> 01:16:43,470
component so did everybody create the

01:16:41,130 --> 01:16:47,940
emoji service and added it to the

01:16:43,470 --> 01:16:50,400
component still working on it okay while

01:16:47,940 --> 01:16:52,110
you are doing it I will show you the

01:16:50,400 --> 01:16:59,100
excellent result that you are going to

01:16:52,110 --> 01:17:02,580
get yes a blank page and in the console

01:16:59,100 --> 01:17:08,520
which can create property cutoff

01:17:02,580 --> 01:17:11,790
undefined why is that two reasons first

01:17:08,520 --> 01:17:13,710
of all we didn't provide the emoji

01:17:11,790 --> 01:17:17,670
service it was not registered anywhere

01:17:13,710 --> 01:17:20,370
and second if you remember I told you at

01:17:17,670 --> 01:17:23,760
the beginning that the compiler actually

01:17:20,370 --> 01:17:26,850
reads these type annotations for the

01:17:23,760 --> 01:17:31,650
dependency injection at compile time so

01:17:26,850 --> 01:17:35,460
and it writes them into the ng factory

01:17:31,650 --> 01:17:38,100
for the module and since we compile it

01:17:35,460 --> 01:17:41,160
before we had this injection it's not

01:17:38,100 --> 01:17:44,190
there so I'm going to show you now where

01:17:41,160 --> 01:17:46,950
you need to add it and then I will talk

01:17:44,190 --> 01:17:49,190
about where you need to add a service

01:17:46,950 --> 01:17:56,880
and then you can do the second exercise

01:17:49,190 --> 01:18:01,500
so let's close this we have this ng

01:17:56,880 --> 01:18:04,290
factory know we have this ng factory of

01:18:01,500 --> 01:18:08,820
the component and if we go all the way

01:18:04,290 --> 01:18:11,910
down we can see that we have this view

01:18:08,820 --> 01:18:12,599
up component host which is like the

01:18:11,910 --> 01:18:14,550
wrapper

01:18:12,599 --> 01:18:17,129
or the component that creates the

01:18:14,550 --> 01:18:19,289
controller instance and the view like

01:18:17,129 --> 01:18:21,510
all together are the view and the

01:18:19,289 --> 01:18:24,570
controller and we can see that it

01:18:21,510 --> 01:18:27,989
actually creates this up component in

01:18:24,570 --> 01:18:31,739
the second line with this element the e

01:18:27,989 --> 01:18:34,349
di D the IDS directive definition it

01:18:31,739 --> 01:18:38,159
defines the directive it has a bunch of

01:18:34,349 --> 01:18:41,350
flags and if we look argument and if we

01:18:38,159 --> 01:18:43,399
look inside the argument we can see that

01:18:41,350 --> 01:18:46,050
[Music]

01:18:43,399 --> 01:18:50,639
the end of the second line says

01:18:46,050 --> 01:18:53,459
constructor ne and then depth so this is

01:18:50,639 --> 01:18:55,829
the constructor and this is the list of

01:18:53,459 --> 01:18:58,909
dependencies so you would need to add

01:18:55,829 --> 01:19:01,919
the emoji service to this list otherwise

01:18:58,909 --> 01:19:04,800
it wouldn't know that it needs to inject

01:19:01,919 --> 01:19:06,359
the emoji service here so that's the

01:19:04,800 --> 01:19:08,969
first thing you would need to do and

01:19:06,359 --> 01:19:12,570
then you will need to go to the app

01:19:08,969 --> 01:19:15,300
module Factory and make sure that it can

01:19:12,570 --> 01:19:17,639
recreate and return an instance of this

01:19:15,300 --> 01:19:22,619
emoji service just like it does with the

01:19:17,639 --> 01:19:25,919
other stuff so good luck to you or my

01:19:22,619 --> 01:19:28,469
nice helpers here you guys there ESS

01:19:25,919 --> 01:19:33,559
there I can help you and I'm going to

01:19:28,469 --> 01:19:37,699
test out my new classical music while

01:19:33,559 --> 01:19:37,699
where did I put my phone Oh

01:19:53,620 --> 01:20:00,670
legs of leg addition a bus in the Dalai

01:19:58,460 --> 01:20:00,670
Lama

01:20:09,860 --> 01:20:17,360
[Music]

01:20:12,640 --> 01:20:19,970
so sound guys are you around AV guys I'm

01:20:17,360 --> 01:20:29,590
trying to send some music for my phone

01:20:19,970 --> 01:20:29,590
for this Jack okay okay perfect

01:20:31,150 --> 01:20:37,249
[Music]

01:20:32,650 --> 01:20:40,390
[Applause]

01:20:37,249 --> 01:23:19,210
which okay

01:20:40,390 --> 01:23:19,730
[Music]

01:23:19,210 --> 01:23:24,640
Oh

01:23:19,730 --> 01:23:24,640
[Music]

01:23:30,310 --> 01:23:32,370
you

01:28:35,699 --> 01:28:42,540
the fun with this exercise while you are

01:28:39,060 --> 01:28:45,360
doing it I got a question about sharing

01:28:42,540 --> 01:28:48,590
the links to the slide so you can see it

01:28:45,360 --> 01:28:51,150
on this screen and in addition to that

01:28:48,590 --> 01:28:52,440
it's a good opportunity to tell you

01:28:51,150 --> 01:28:54,960
about another project I have been

01:28:52,440 --> 01:28:57,210
working on the ng beacon and I'm

01:28:54,960 --> 01:28:59,340
actually using now the ng beacon to

01:28:57,210 --> 01:29:02,340
broadcast the URL to everybody in the

01:28:59,340 --> 01:29:04,170
room so if you have annoyed you probably

01:29:02,340 --> 01:29:06,869
and Bluetooth on location on little

01:29:04,170 --> 01:29:09,750
probably notification with a link to the

01:29:06,869 --> 01:29:12,469
slides you may need to lock and unlock

01:29:09,750 --> 01:29:17,130
your device sometimes it takes some time

01:29:12,469 --> 01:29:20,580
or if you play the ng beacon hunt game

01:29:17,130 --> 01:29:22,350
that is going throughout the day then

01:29:20,580 --> 01:29:23,880
you already have configured your device

01:29:22,350 --> 01:29:28,650
and you should know how to receive those

01:29:23,880 --> 01:29:30,719
URLs and if you haven't then last time I

01:29:28,650 --> 01:29:32,489
checked only seven people completed the

01:29:30,719 --> 01:29:36,960
challenge and there is a free ticket to

01:29:32,489 --> 01:29:39,989
ng course and free ng beacon ruffle so

01:29:36,960 --> 01:29:45,420
you have a good chance if you do it so

01:29:39,989 --> 01:29:48,600
get back to dependency injection how

01:29:45,420 --> 01:29:53,719
many of you managed to make it work Wow

01:29:48,600 --> 01:29:53,719
quite a few welcome plus to you again

01:29:54,800 --> 01:30:00,330
yeah tired applause but yeah we have

01:29:57,420 --> 01:30:02,730
been working so hard on this ng-conf I

01:30:00,330 --> 01:30:07,320
can guess why we're tired let's see the

01:30:02,730 --> 01:30:11,400
solution for that so the first thing we

01:30:07,320 --> 01:30:15,210
are doing is we said we would need to

01:30:11,400 --> 01:30:18,750
tell angular that this app component

01:30:15,210 --> 01:30:21,810
requires instance of emoji service and

01:30:18,750 --> 01:30:25,170
we said that this is this argument is

01:30:21,810 --> 01:30:28,170
the list of the dependencies so what we

01:30:25,170 --> 01:30:30,659
are going to do here is simply add this

01:30:28,170 --> 01:30:34,199
emoji service to the list of

01:30:30,659 --> 01:30:37,199
dependencies and if you remember before

01:30:34,199 --> 01:30:40,110
we did got can't read property ket of

01:30:37,199 --> 01:30:42,480
undefined which means that angular

01:30:40,110 --> 01:30:45,329
created a component but it didn't pass

01:30:42,480 --> 01:30:49,050
any argument to the constructor so

01:30:45,329 --> 01:30:52,170
the emoji was undefined and once we save

01:30:49,050 --> 01:30:53,429
this file we can actually see that we

01:30:52,170 --> 01:30:56,519
get a different error

01:30:53,429 --> 01:30:59,010
there's no provider for Modi service so

01:30:56,519 --> 01:31:01,739
now angler already looks for the service

01:30:59,010 --> 01:31:04,650
when it tries to create a component but

01:31:01,739 --> 01:31:08,449
it appears nowhere inside the module so

01:31:04,650 --> 01:31:11,760
the second thing we would have to do is

01:31:08,449 --> 01:31:14,489
to create another entry in this very big

01:31:11,760 --> 01:31:17,999
get internal function that would create

01:31:14,489 --> 01:31:23,190
and return an instance of the moji

01:31:17,999 --> 01:31:25,559
service so we will just do what all the

01:31:23,190 --> 01:31:29,369
developer to copy and paste but this

01:31:25,559 --> 01:31:32,400
time not from Stack Overflow I'm going

01:31:29,369 --> 01:31:36,389
to copy this line and I'm going to say a

01:31:32,400 --> 01:31:38,519
token equal if it's an ahmadi service if

01:31:36,389 --> 01:31:42,199
somebody asks per image and multi

01:31:38,519 --> 01:31:48,690
service return this dot underscore and

01:31:42,199 --> 01:31:50,429
Maji energy emoji service and now we are

01:31:48,690 --> 01:31:53,969
going to define this together that will

01:31:50,429 --> 01:31:59,719
create and return an instance of the

01:31:53,969 --> 01:32:03,059
emoji service so get that the following

01:31:59,719 --> 01:32:07,860
we also need an helper variable to store

01:32:03,059 --> 01:32:10,139
the instance so this is the same pattern

01:32:07,860 --> 01:32:12,749
as we see here we have this helper

01:32:10,139 --> 01:32:16,440
variable and if it now we just create

01:32:12,749 --> 01:32:19,340
the instance so here we can say oh it's

01:32:16,440 --> 01:32:21,210
just a module without the underscore

01:32:19,340 --> 01:32:23,159
actually let's make it even more

01:32:21,210 --> 01:32:27,210
readable than the original one let's

01:32:23,159 --> 01:32:28,889
call it this emoji service instance so

01:32:27,210 --> 01:32:36,869
the code will be even easier to follow

01:32:28,889 --> 01:32:46,980
and then I say if the in the instance is

01:32:36,869 --> 01:32:49,260
now then new emoji service and if if a

01:32:46,980 --> 01:32:51,389
monetary said any kind of dependencies

01:32:49,260 --> 01:32:53,249
who would net get need to get them from

01:32:51,389 --> 01:32:54,989
the injector and fastened to the

01:32:53,249 --> 01:32:56,119
constructor which is not the case right

01:32:54,989 --> 01:33:00,199
now

01:32:56,119 --> 01:33:04,909
and once we have what we made sure we

01:33:00,199 --> 01:33:09,199
have the instance we simply return it by

01:33:04,909 --> 01:33:13,879
the way you see there is a double equal

01:33:09,199 --> 01:33:16,219
here like it equals equals now then they

01:33:13,879 --> 01:33:21,649
use double equal and not like strict

01:33:16,219 --> 01:33:23,570
equal is because if you see here they

01:33:21,649 --> 01:33:25,879
actually don't initialize all those

01:33:23,570 --> 01:33:29,389
variables so they are actually equal to

01:33:25,879 --> 01:33:34,340
undefined I have no idea why they don't

01:33:29,389 --> 01:33:37,340
simply do this instead of comparing two

01:33:34,340 --> 01:33:38,959
now maybe the best for you here maybe

01:33:37,340 --> 01:33:41,320
you can comment on that or you have no

01:33:38,959 --> 01:33:41,320
idea either

01:33:45,039 --> 01:33:49,999
mmm so yeah so they could have checked

01:33:47,959 --> 01:33:52,419
for any fine but two equals now check

01:33:49,999 --> 01:33:55,969
for undefined and maybe it's even

01:33:52,419 --> 01:33:59,139
shorter code after you minify that no so

01:33:55,969 --> 01:34:04,610
for no reason that's a good answer

01:33:59,139 --> 01:34:07,669
Thanks okay so all right so now we

01:34:04,610 --> 01:34:10,429
created these getter that creates the

01:34:07,669 --> 01:34:11,419
emoji service on demand when somebody

01:34:10,429 --> 01:34:14,840
asks for it

01:34:11,419 --> 01:34:17,689
we are going to save and hopefully app

01:34:14,840 --> 01:34:20,929
works with a K so yeah that's how we

01:34:17,689 --> 01:34:24,260
solve the second exercise and now for

01:34:20,929 --> 01:34:26,449
the third one and last one in which we

01:34:24,260 --> 01:34:29,300
are going to speak about the lifecycle

01:34:26,449 --> 01:34:32,539
methods like ng on init and Jian destroy

01:34:29,300 --> 01:34:35,479
so what we are going to do now we are

01:34:32,539 --> 01:34:40,129
going to add ng on init method to the

01:34:35,479 --> 01:34:45,499
app component and here is father for you

01:34:40,129 --> 01:34:49,010
it won't run let's see that so let's all

01:34:45,499 --> 01:34:52,789
go to our app component and remember

01:34:49,010 --> 01:34:55,429
this code is stays as it is the angular

01:34:52,789 --> 01:34:57,079
compiler doesn't transform it this is

01:34:55,429 --> 01:34:59,479
the code that is going to run the

01:34:57,079 --> 01:35:02,749
angular compiler only transforms the

01:34:59,479 --> 01:35:06,289
HTML the CSS and extract some metadata

01:35:02,749 --> 01:35:08,870
information from this file so engine in

01:35:06,289 --> 01:35:16,700
it and then we can do this the

01:35:08,870 --> 01:35:21,740
equals I went to one even better on in

01:35:16,700 --> 01:35:25,910
it was rock and I already gave you the

01:35:21,740 --> 01:35:28,400
spoiler safeties I can see that it

01:35:25,910 --> 01:35:32,540
didn't work I still get up works on in

01:35:28,400 --> 01:35:35,390
it was not run and why is that

01:35:32,540 --> 01:35:38,480
and yes you could get it

01:35:35,390 --> 01:35:42,590
the reason is performance so if we look

01:35:38,480 --> 01:35:46,370
inside the compiled components the ng

01:35:42,590 --> 01:35:49,430
Factory we can see that inside the same

01:35:46,370 --> 01:35:51,830
function that defines the constructor

01:35:49,430 --> 01:35:55,430
and the dependencies there is also this

01:35:51,830 --> 01:35:58,160
strange number two four five seven six

01:35:55,430 --> 01:36:02,540
can anybody guess what this number

01:35:58,160 --> 01:36:03,700
represents any C programmers in the

01:36:02,540 --> 01:36:07,430
audience

01:36:03,700 --> 01:36:11,900
nobody programs see here only the guys

01:36:07,430 --> 01:36:13,700
on the back interesting so yeah if you

01:36:11,900 --> 01:36:18,560
are coming from C background you

01:36:13,700 --> 01:36:22,250
probably used to having bit masks of

01:36:18,560 --> 01:36:24,200
flags that represent things and it turns

01:36:22,250 --> 01:36:26,780
out that it's much more efficient to

01:36:24,200 --> 01:36:29,000
write this number instead of like

01:36:26,780 --> 01:36:32,030
writing a bunch of true-false true-false

01:36:29,000 --> 01:36:35,300
true-false true-false so this number is

01:36:32,030 --> 01:36:41,440
actually a bit mask and if we check the

01:36:35,300 --> 01:36:44,120
definition for D ID which is the ID is

01:36:41,440 --> 01:36:45,800
directive definition if we check the

01:36:44,120 --> 01:36:49,460
definition of this function we can see

01:36:45,800 --> 01:36:52,220
that this first argument is node flex

01:36:49,460 --> 01:36:55,520
that's the type of the first argument so

01:36:52,220 --> 01:37:00,620
let's check out what is this node flag

01:36:55,520 --> 01:37:04,130
thing I'm going to ask vs code to find

01:37:00,620 --> 01:37:10,420
it for me when we can see node flags is

01:37:04,130 --> 01:37:13,970
simply numbers each numbers is a bit and

01:37:10,420 --> 01:37:17,390
we are simply combining those numbers to

01:37:13,970 --> 01:37:19,670
represent various aspects of our

01:37:17,390 --> 01:37:23,510
component or directive

01:37:19,670 --> 01:37:28,370
in this case the value equals two four

01:37:23,510 --> 01:37:32,090
five seven six it's in decimal notation

01:37:28,370 --> 01:37:35,900
like based on it's pretty hard to figure

01:37:32,090 --> 01:37:38,540
out which flags are used to build this

01:37:35,900 --> 01:37:40,880
value so what I'm going to do here I'm

01:37:38,540 --> 01:37:45,110
going to take this value and convert it

01:37:40,880 --> 01:37:48,620
to base 16 so I'm going to call two

01:37:45,110 --> 01:37:49,940
strings 16 and by looking at the

01:37:48,620 --> 01:37:53,590
autocomplete you can see I do this

01:37:49,940 --> 01:37:58,580
before I did prepare for it so this is

01:37:53,590 --> 01:38:02,900
6,000 and with 6,000 if we went to the

01:37:58,580 --> 01:38:11,929
flag we could see that this type for

01:38:02,900 --> 01:38:15,199
active is 8 1 9 2 which is in AXA yeah

01:38:11,929 --> 01:38:23,679
when we turn this to hexa it's 2,000 and

01:38:15,199 --> 01:38:23,679
this component is actually this number

01:38:23,770 --> 01:38:31,280
4,000 and so this number is actually the

01:38:28,160 --> 01:38:34,880
combination of this number and this

01:38:31,280 --> 01:38:38,150
number if we actually combine them with

01:38:34,880 --> 01:38:42,140
bitwise or we can see that we get this

01:38:38,150 --> 01:38:45,620
number so what this number basically

01:38:42,140 --> 01:38:48,770
means is that this is a type directive

01:38:45,620 --> 01:38:51,980
and the directive is of the component

01:38:48,770 --> 01:38:54,739
type and if we check a little down we

01:38:51,980 --> 01:38:58,130
can see there is also a flag for on in

01:38:54,739 --> 01:39:01,400
it so in order to make sure that angular

01:38:58,130 --> 01:39:04,100
knows that the component as an only neat

01:39:01,400 --> 01:39:08,090
function in that it calls that function

01:39:04,100 --> 01:39:09,260
we also need to add that flag inside the

01:39:08,090 --> 01:39:12,620
ng Factory

01:39:09,260 --> 01:39:14,210
but wait that's not all so that's the

01:39:12,620 --> 01:39:18,460
first thing you would need to do in this

01:39:14,210 --> 01:39:18,460
exercise make sure that we have this

01:39:18,520 --> 01:39:25,610
only neat flag on your component but

01:39:22,460 --> 01:39:28,820
then it still won't work because

01:39:25,610 --> 01:39:31,010
since we have no lifecycle methods on

01:39:28,820 --> 01:39:35,090
the component angle our doesn't even

01:39:31,010 --> 01:39:36,980
bother to check like when we get to the

01:39:35,090 --> 01:39:39,740
own in each stage angular doesn't even

01:39:36,980 --> 01:39:41,840
check inside this component so we would

01:39:39,740 --> 01:39:45,230
need to make sure this component is

01:39:41,840 --> 01:39:48,710
checked and this is done by providing if

01:39:45,230 --> 01:39:52,880
we see this view definition we can see

01:39:48,710 --> 01:39:55,760
it gets flags nodes which is this list

01:39:52,880 --> 01:39:58,850
with two elements the absolute and our

01:39:55,760 --> 01:40:01,670
component and then we can see it gets a

01:39:58,850 --> 01:40:04,220
view update event which is currently now

01:40:01,670 --> 01:40:06,440
so we can we also need to define this

01:40:04,220 --> 01:40:08,090
view update event which is really

01:40:06,440 --> 01:40:10,760
similar to the function that we have

01:40:08,090 --> 01:40:16,880
here it will get if we check the type

01:40:10,760 --> 01:40:20,980
for this view update FN it was here so

01:40:16,880 --> 01:40:24,770
if we look the type for view update FN

01:40:20,980 --> 01:40:28,310
we can see that it gets check and view

01:40:24,770 --> 01:40:30,920
which are basically the same arguments

01:40:28,310 --> 01:40:34,250
here check and view and we need to make

01:40:30,920 --> 01:40:37,940
sure that this function that we passed

01:40:34,250 --> 01:40:40,190
here will be called with this element so

01:40:37,940 --> 01:40:42,680
it will check for changes on this

01:40:40,190 --> 01:40:43,520
element and invoke the lifecycle methods

01:40:42,680 --> 01:40:53,690
of it

01:40:43,520 --> 01:40:55,280
so um good luck and the I think it is

01:40:53,690 --> 01:40:57,770
best I think you are going to have a lot

01:40:55,280 --> 01:40:59,570
of work on this one like most of the

01:40:57,770 --> 01:41:01,400
people are here our notes from C

01:40:59,570 --> 01:41:06,490
background so they probably have some

01:41:01,400 --> 01:41:10,330
questions about the flags and there and

01:41:06,490 --> 01:41:10,330
back to classical music

01:41:10,590 --> 01:41:14,189
you

01:41:10,880 --> 01:41:14,189
[Applause]

01:48:13,840 --> 01:48:21,500
some Wow well everybody we did is rage

01:48:18,080 --> 01:48:24,740
oh and one more perfect so yeah I know

01:48:21,500 --> 01:48:29,330
it's tough and it's like also late hour

01:48:24,740 --> 01:48:32,150
and let's go over the solution if you

01:48:29,330 --> 01:48:34,540
didn't manage to succeed in the like

01:48:32,150 --> 01:48:38,210
last three exercises that's okay

01:48:34,540 --> 01:48:40,990
like they are hard they I was like wow

01:48:38,210 --> 01:48:44,030
when I first saw the generated code and

01:48:40,990 --> 01:48:47,120
then after I learned how to work with

01:48:44,030 --> 01:48:49,070
that in angular 2 they change it all

01:48:47,120 --> 01:48:52,490
over in angular first so I had to live

01:48:49,070 --> 01:48:54,950
relearn that but hopefully it won't

01:48:52,490 --> 01:49:02,180
change so much in the future

01:48:54,950 --> 01:49:04,340
we never know let's see how to apply the

01:49:02,180 --> 01:49:07,190
solution like how to make angular know

01:49:04,340 --> 01:49:09,200
that it should call on in it so we have

01:49:07,190 --> 01:49:11,870
this flex variable here we talked about

01:49:09,200 --> 01:49:14,780
and we want to add another flag that

01:49:11,870 --> 01:49:17,480
tell the angular that it should call on

01:49:14,780 --> 01:49:22,190
in it so this is the this is the value

01:49:17,480 --> 01:49:24,290
and we can just bit wise order we can

01:49:22,190 --> 01:49:26,330
also use the plus sign it doesn't matter

01:49:24,290 --> 01:49:29,150
it will give us the same result we can

01:49:26,330 --> 01:49:31,520
add the numbers or bitwise order in this

01:49:29,150 --> 01:49:33,590
case it will give us the same result so

01:49:31,520 --> 01:49:36,950
the first thing to do would be to add

01:49:33,590 --> 01:49:38,570
the value for the own in each flag so

01:49:36,950 --> 01:49:44,210
angular I will know it should call this

01:49:38,570 --> 01:49:47,570
method so the reason they use flags for

01:49:44,210 --> 01:49:49,940
that is instead of like angular on one

01:49:47,570 --> 01:49:51,740
time having to go to each class and

01:49:49,940 --> 01:49:54,560
check if it has the own in each method

01:49:51,740 --> 01:49:56,480
which takes a lot of time we do this in

01:49:54,560 --> 01:49:59,030
compiler time and then on run time

01:49:56,480 --> 01:50:01,520
angular can simply go over this list

01:49:59,030 --> 01:50:04,070
check which components have this flag

01:50:01,520 --> 01:50:06,770
and only call on it on that component

01:50:04,070 --> 01:50:09,400
and then the second thing we need to do

01:50:06,770 --> 01:50:15,610
in addition to adding this flag is

01:50:09,400 --> 01:50:19,280
implement this how did he call it this

01:50:15,610 --> 01:50:20,060
view update FN this update directives

01:50:19,280 --> 01:50:21,980
func

01:50:20,060 --> 01:50:23,840
and I'm not actually sure what the

01:50:21,980 --> 01:50:32,960
difference between update directive an

01:50:23,840 --> 01:50:35,480
update renderer yes oh so just two

01:50:32,960 --> 01:50:38,810
different phases five first updating the

01:50:35,480 --> 01:50:40,580
directives then updating the dome so I

01:50:38,810 --> 01:50:44,120
guess it doesn't matter which one we use

01:50:40,580 --> 01:50:46,820
for the sake of calling you mean it yeah

01:50:44,120 --> 01:50:49,100
it doesn't matter so let's use the first

01:50:46,820 --> 01:50:55,730
one so we need to implement this

01:50:49,100 --> 01:50:59,600
function with which gets the checker

01:50:55,730 --> 01:51:01,610
function and the view function the

01:50:59,600 --> 01:51:03,860
reason by the way with we pass this

01:51:01,610 --> 01:51:05,990
check function is that the check

01:51:03,860 --> 01:51:08,120
function is different depending on

01:51:05,990 --> 01:51:10,280
whether we are running on debug mode or

01:51:08,120 --> 01:51:12,950
production mode on debug mode they do

01:51:10,280 --> 01:51:16,930
several more checks to see if there are

01:51:12,950 --> 01:51:20,990
any problems inconsistencies with the

01:51:16,930 --> 01:51:23,540
change injection and then the last thing

01:51:20,990 --> 01:51:27,310
we need to do we need to actually call

01:51:23,540 --> 01:51:30,230
this check function we don't need this

01:51:27,310 --> 01:51:32,900
we don't we don't have any value to pass

01:51:30,230 --> 01:51:35,180
it but we need to tell it hey please

01:51:32,900 --> 01:51:37,670
check the element number one on the list

01:51:35,180 --> 01:51:39,800
which is the creation of app component

01:51:37,670 --> 01:51:43,340
which is the app component the

01:51:39,800 --> 01:51:46,370
controller and then once we call it here

01:51:43,340 --> 01:51:51,530
it will put it into the change detection

01:51:46,370 --> 01:51:53,930
cycle and eventually when there is time

01:51:51,530 --> 01:51:56,540
to the time to colonias comes it will

01:51:53,930 --> 01:52:00,800
call on in it so we are going to save

01:51:56,540 --> 01:52:03,860
and I mean it was run and it's to

01:52:00,800 --> 01:52:05,990
uppercase because we do to uppercase we

01:52:03,860 --> 01:52:08,660
did it in the first exercise so

01:52:05,990 --> 01:52:13,250
basically that's it about the exercises

01:52:08,660 --> 01:52:15,740
and let me summarize what I want you to

01:52:13,250 --> 01:52:17,780
take away from here there's like much

01:52:15,740 --> 01:52:20,120
more we could explore the compiler I

01:52:17,780 --> 01:52:23,020
mean how long that is how much time is

01:52:20,120 --> 01:52:23,020
we spend building it

01:52:25,230 --> 01:52:33,780
two and four together here yeah they

01:52:31,780 --> 01:52:36,640
build it like for a year and it's really

01:52:33,780 --> 01:52:38,290
angular itself I should change it to

01:52:36,640 --> 01:52:40,630
read angular is an amazing piece of

01:52:38,290 --> 01:52:43,530
engineering so angular is an amazing

01:52:40,630 --> 01:52:46,450
piece of engineering like you saw how

01:52:43,530 --> 01:52:48,820
complicated and sophisticated it is and

01:52:46,450 --> 01:52:51,670
I think the most amazing part is that

01:52:48,820 --> 01:52:53,470
when we use it on a day-to-day basis

01:52:51,670 --> 01:52:56,470
we don't get to see all those details

01:52:53,470 --> 01:52:59,410
they are hidden and they even managed to

01:52:56,470 --> 01:53:01,570
switch the compilers between 2 and 4 how

01:52:59,410 --> 01:53:04,780
many of you have upgraded from 2 to 4

01:53:01,570 --> 01:53:08,290
and did you encounter any problems

01:53:04,780 --> 01:53:10,930
during the up right one guy says yeah

01:53:08,290 --> 01:53:13,560
but most people say no I guess maybe

01:53:10,930 --> 01:53:15,610
with the animation moving out of curve

01:53:13,560 --> 01:53:17,800
we're standing up so let's talk about

01:53:15,610 --> 01:53:20,070
that later I am interesting interested

01:53:17,800 --> 01:53:22,810
to know but yeah most people could like

01:53:20,070 --> 01:53:26,050
the switch the compiler and most people

01:53:22,810 --> 01:53:28,720
didn't even know about it so it's really

01:53:26,050 --> 01:53:31,750
amazing so don't fear this complexity

01:53:28,720 --> 01:53:32,830
just like we did here take the NGC

01:53:31,750 --> 01:53:36,510
change things

01:53:32,830 --> 01:53:39,010
see D output and explore it and then

01:53:36,510 --> 01:53:41,980
another thing I want you to take away

01:53:39,010 --> 01:53:44,140
from the beginning of the talk when you

01:53:41,980 --> 01:53:46,390
create a bundle and chippie the

01:53:44,140 --> 01:53:48,610
production there is a lot of automated

01:53:46,390 --> 01:53:53,920
tooling like web pack and the angular

01:53:48,610 --> 01:53:56,560
CLI and agriscience stuff and just spend

01:53:53,920 --> 01:53:58,390
one hard looking into them every now and

01:53:56,560 --> 01:54:00,460
then you can use source map Explorer

01:53:58,390 --> 01:54:03,040
like we did and know what you are

01:54:00,460 --> 01:54:07,900
shipping to production because as we saw

01:54:03,040 --> 01:54:09,850
in this demo we ship angular forms and

01:54:07,900 --> 01:54:12,670
angular HTTP which we didn't even use

01:54:09,850 --> 01:54:15,370
and we ship the angular compiler that's

01:54:12,670 --> 01:54:18,390
how we started like the thing why do we

01:54:15,370 --> 01:54:21,700
need a compiler so angular is amazing

01:54:18,390 --> 01:54:24,160
explore it and thank you very much to

01:54:21,700 --> 01:54:26,470
bass team for building this amazing

01:54:24,160 --> 01:54:28,720
thing and for being with us today and

01:54:26,470 --> 01:54:31,720
helping also it I thank you for helping

01:54:28,720 --> 01:54:35,980
out if you have any questions about the

01:54:31,720 --> 01:54:38,539
compiler about the beacon about big fat

01:54:35,980 --> 01:54:43,459
pants loose I will be in the ask me and

01:54:38,539 --> 01:54:45,139
in Rome at 5:30 today and I'm around you

01:54:43,459 --> 01:54:47,829
can catch me speak to me about the

01:54:45,139 --> 01:54:51,310
beacons about the beacon hunt or

01:54:47,829 --> 01:54:57,399
anything you like so thank you

01:54:51,310 --> 01:54:57,399
[Applause]

01:55:02,800 --> 01:55:04,860

YouTube URL: https://www.youtube.com/watch?v=QQ2plVD0gDI


