Title: FormControl Freaks: Redux Edition - Daniel Figueiredo Caetano & Renee Vrantsidis
Publication date: 2017-04-07
Playlist: ng-conf 2017
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,520 --> 00:00:05,319
welcome everyone to form control freaks

00:00:03,520 --> 00:00:07,450
to read us the dishes my name is Daniel

00:00:05,319 --> 00:00:09,100
I'm Renee and we're here to talk to you

00:00:07,450 --> 00:00:11,830
about how to integrate your forms with

00:00:09,100 --> 00:00:13,480
free ducks but first before we get

00:00:11,830 --> 00:00:15,760
started here's a picture of Daniels cat

00:00:13,480 --> 00:00:18,880
so that you'll like us we're not going

00:00:15,760 --> 00:00:20,920
to be at fat yep so you notice this cat

00:00:18,880 --> 00:00:23,289
has been slightly digitally enhanced and

00:00:20,920 --> 00:00:27,820
that is because redux can make your

00:00:23,289 --> 00:00:29,680
forms magical and you probably work with

00:00:27,820 --> 00:00:32,110
lots of parcel here I've ever built a

00:00:29,680 --> 00:00:34,810
called Black Swan based application and

00:00:32,110 --> 00:00:37,210
who here has suffered because of it yeah

00:00:34,810 --> 00:00:39,880
so I've run knows about the nightmare

00:00:37,210 --> 00:00:45,070
when I gotta synchronize all these

00:00:39,880 --> 00:00:46,690
validations and business rules so so

00:00:45,070 --> 00:00:49,090
we're here to talk to you about why you

00:00:46,690 --> 00:00:51,760
might want to integrate read X into your

00:00:49,090 --> 00:00:52,840
forms we're going to show you probably a

00:00:51,760 --> 00:00:54,550
little bit more than you'll actually

00:00:52,840 --> 00:00:55,809
want to do and some of the benefits that

00:00:54,550 --> 00:00:57,610
we found in the approach that we're

00:00:55,809 --> 00:00:58,899
going to be showing you is that you can

00:00:57,610 --> 00:01:00,430
lower your maintenance costs on

00:00:58,899 --> 00:01:02,500
large-scale form based applications

00:01:00,430 --> 00:01:04,210
especially good for enterprise projects

00:01:02,500 --> 00:01:05,979
you can centralize all your form data

00:01:04,210 --> 00:01:07,810
you can make your forms more declarative

00:01:05,979 --> 00:01:10,299
and template driven so you don't have to

00:01:07,810 --> 00:01:11,889
use form builder boilerplate and you can

00:01:10,299 --> 00:01:13,950
use pure j/s functions that are going to

00:01:11,889 --> 00:01:16,810
be testable type of bull and extensible

00:01:13,950 --> 00:01:18,340
so in order to demonstrate what we're

00:01:16,810 --> 00:01:20,859
going to be showing you today we needed

00:01:18,340 --> 00:01:22,509
an example Lassa Lassa forms and we

00:01:20,859 --> 00:01:25,179
thought what could possibly be better

00:01:22,509 --> 00:01:28,479
for lots of forms and dungeons and

00:01:25,179 --> 00:01:32,409
dragons character creation and so we've

00:01:28,479 --> 00:01:36,880
made a wizard wizard yeah so you can so

00:01:32,409 --> 00:01:38,979
you have to make it wizard unless you

00:01:36,880 --> 00:01:41,319
can see on your left we have the Redux

00:01:38,979 --> 00:01:43,569
that tools so every single action that's

00:01:41,319 --> 00:01:47,709
being dispatched goes to the store being

00:01:43,569 --> 00:01:49,479
lobbed there as the renie type things in

00:01:47,709 --> 00:01:51,599
the farm the farm 3d responsive the

00:01:49,479 --> 00:01:55,450
business rules are calculated so you get

00:01:51,599 --> 00:01:57,939
validation errors so Gandalf in this

00:01:55,450 --> 00:01:59,950
case is a mouse but the health can be

00:01:57,939 --> 00:02:03,639
lawful evil needs to be good right I've

00:01:59,950 --> 00:02:05,679
ever seen a evil elf and the age also

00:02:03,639 --> 00:02:09,250
has some restrictions help needs to be

00:02:05,679 --> 00:02:12,400
at least 8 80 years old to start

00:02:09,250 --> 00:02:13,360
adventures and we need some skills for

00:02:12,400 --> 00:02:15,280
Gandalf

00:02:13,360 --> 00:02:19,390
perhaps blind because he went out of

00:02:15,280 --> 00:02:22,300
hell maybe it smoking pipe but we don't

00:02:19,390 --> 00:02:24,610
have that yes you can also see that the

00:02:22,300 --> 00:02:28,240
button gets enabling disabled asked the

00:02:24,610 --> 00:02:31,300
validity of the farm changes so we need

00:02:28,240 --> 00:02:32,680
to add at least one skill that's about

00:02:31,300 --> 00:02:37,300
it we're going to get into details and

00:02:32,680 --> 00:02:39,700
how this is working we also put it in

00:02:37,300 --> 00:02:40,990
the ng comp app the source code so if

00:02:39,700 --> 00:02:42,550
you guys want to check it out because

00:02:40,990 --> 00:02:46,240
we're not covering everything in here is

00:02:42,550 --> 00:02:47,980
too much content so in this talk but we

00:02:46,240 --> 00:02:49,570
will be covering is your forms plus

00:02:47,980 --> 00:02:51,220
redux magic will be talking about how to

00:02:49,570 --> 00:02:53,410
add your form dated estate how to

00:02:51,220 --> 00:02:55,530
support multi entry fields and how to

00:02:53,410 --> 00:02:58,330
control your validation with selectors

00:02:55,530 --> 00:03:00,820
what we won't be talking about is redux

00:02:58,330 --> 00:03:02,560
101 we're kind of expecting a basic

00:03:00,820 --> 00:03:03,820
knowledge of redux but it is worth

00:03:02,560 --> 00:03:05,650
noting that though we're talking about

00:03:03,820 --> 00:03:08,709
redux all of these principles can be

00:03:05,650 --> 00:03:10,060
applied to any RX don't run away if you

00:03:08,709 --> 00:03:13,360
don't know about Redux which is

00:03:10,060 --> 00:03:15,010
basically how it works so redux it

00:03:13,360 --> 00:03:17,590
basically gives you a unidirectional

00:03:15,010 --> 00:03:19,330
beta flow where things that are

00:03:17,590 --> 00:03:21,489
happening inside your components we are

00:03:19,330 --> 00:03:22,840
treating actions these actions are the

00:03:21,489 --> 00:03:25,000
only thing that can change the

00:03:22,840 --> 00:03:27,610
application state and with an

00:03:25,000 --> 00:03:30,580
implementation of flux that has a single

00:03:27,610 --> 00:03:32,769
start the start is just all every data

00:03:30,580 --> 00:03:34,930
you see in the app is inside this store

00:03:32,769 --> 00:03:37,090
think about that and the selectors are

00:03:34,930 --> 00:03:38,680
going to get into it it's how we compute

00:03:37,090 --> 00:03:40,630
things from these data that we have in

00:03:38,680 --> 00:03:42,190
the store and we feed it back into our

00:03:40,630 --> 00:03:43,750
components so we can have those

00:03:42,190 --> 00:03:47,739
validation errors things that you've

00:03:43,750 --> 00:03:49,750
seen before in the demo so we'll be

00:03:47,739 --> 00:03:51,730
using on our project Redux some angular

00:03:49,750 --> 00:03:55,420
redux and then grx will work as i said

00:03:51,730 --> 00:03:57,190
ram de for some utilities to keep our

00:03:55,420 --> 00:03:59,590
state of mutable and reselect for our

00:03:57,190 --> 00:04:01,120
selectors so the first thing we're going

00:03:59,590 --> 00:04:04,510
to jump into is setting up your form

00:04:01,120 --> 00:04:05,739
reducer and your component and so the

00:04:04,510 --> 00:04:07,090
first thing that we want to do is we

00:04:05,739 --> 00:04:08,290
want to make an architectural decision

00:04:07,090 --> 00:04:10,180
about how we're going to manage our

00:04:08,290 --> 00:04:13,090
forms of state and what we really want

00:04:10,180 --> 00:04:14,290
to do is we want to reuse as much of the

00:04:13,090 --> 00:04:16,090
work that we're going to do in read X as

00:04:14,290 --> 00:04:17,549
possible so we want to make one form

00:04:16,090 --> 00:04:19,570
reducer that's going to rule them all

00:04:17,549 --> 00:04:20,950
and all of our forms are going to be

00:04:19,570 --> 00:04:25,630
handled through the same form reducer

00:04:20,950 --> 00:04:26,440
rule Duvall so plan your instructor we

00:04:25,630 --> 00:04:29,170
are leveraging

00:04:26,440 --> 00:04:32,340
typescript to define the shape of our

00:04:29,170 --> 00:04:35,170
state so in this case we have a farm

00:04:32,340 --> 00:04:37,690
interface that defines all the forms we

00:04:35,170 --> 00:04:40,270
have we can have multiple forms and they

00:04:37,690 --> 00:04:42,070
will reuse the same action so this is

00:04:40,270 --> 00:04:44,680
really cool because you can save a lot

00:04:42,070 --> 00:04:46,780
of work with some usable functions

00:04:44,680 --> 00:04:48,370
inside our farm state we have the

00:04:46,780 --> 00:04:51,370
character farm which is the farm we've

00:04:48,370 --> 00:04:54,190
seen previously and you can check this

00:04:51,370 --> 00:04:57,070
farm any way you want so in this case we

00:04:54,190 --> 00:04:59,680
grouped in bio summary the age alignment

00:04:57,070 --> 00:05:02,050
in race but you can have arrays you can

00:04:59,680 --> 00:05:04,210
have method object it doesn't really

00:05:02,050 --> 00:05:07,750
matter it really fits with whatever you

00:05:04,210 --> 00:05:09,580
need and then if you ever wanted to add

00:05:07,750 --> 00:05:11,290
another form to your application that

00:05:09,580 --> 00:05:12,880
would be also connected to Redux you

00:05:11,290 --> 00:05:15,010
could reuse all of your work by just

00:05:12,880 --> 00:05:19,420
adding another interface and another

00:05:15,010 --> 00:05:21,610
property on your form interface right so

00:05:19,420 --> 00:05:24,310
setting up your actions so we teen of

00:05:21,610 --> 00:05:26,410
actions can change the state and in this

00:05:24,310 --> 00:05:29,440
case all we want just to persist the

00:05:26,410 --> 00:05:32,770
form in the state so that we can compute

00:05:29,440 --> 00:05:35,169
things out of it so we defined a generic

00:05:32,770 --> 00:05:37,660
action called safe farm and the payload

00:05:35,169 --> 00:05:39,760
consists of a pass in a value the value

00:05:37,660 --> 00:05:42,700
is the form that is going to be safe in

00:05:39,760 --> 00:05:45,820
the past is just where we should save

00:05:42,700 --> 00:05:47,230
that we use this pattern because if we

00:05:45,820 --> 00:05:50,320
have another form the past would be

00:05:47,230 --> 00:05:54,460
equipment not character and we could we

00:05:50,320 --> 00:05:57,220
use the same action so here's an example

00:05:54,460 --> 00:06:00,940
of our form reducer you'll see that our

00:05:57,220 --> 00:06:03,010
state is type I form and this is the

00:06:00,940 --> 00:06:05,740
case statement for our state form where

00:06:03,010 --> 00:06:07,600
we're taking the value and the property

00:06:05,740 --> 00:06:09,370
path that we defined and we're going to

00:06:07,600 --> 00:06:12,040
merge in the new value at the past that

00:06:09,370 --> 00:06:14,080
we specified so you can use this to save

00:06:12,040 --> 00:06:15,700
an entire form but if you ever wanted to

00:06:14,080 --> 00:06:18,310
optimize your application by saving

00:06:15,700 --> 00:06:20,110
chunks of a form or by saving individual

00:06:18,310 --> 00:06:25,180
fields you could do that just as well

00:06:20,110 --> 00:06:26,710
with this path right so we see how the

00:06:25,180 --> 00:06:28,660
reducer can handle the action that

00:06:26,710 --> 00:06:30,790
changes the state and now we want to

00:06:28,660 --> 00:06:32,350
hook this in our template so basically

00:06:30,790 --> 00:06:34,539
we create our template in the same

00:06:32,350 --> 00:06:36,250
structure that we have in the state so

00:06:34,539 --> 00:06:39,190
we have a character form you can see

00:06:36,250 --> 00:06:39,940
that we are binding as the ng model the

00:06:39,190 --> 00:06:43,180
character

00:06:39,940 --> 00:06:45,430
name that's just because the values that

00:06:43,180 --> 00:06:47,320
are on the state we if we load this

00:06:45,430 --> 00:06:49,000
forum with some existing data we want

00:06:47,320 --> 00:06:56,440
the input field to be loaded with some

00:06:49,000 --> 00:06:57,940
data as well so that's basically so then

00:06:56,440 --> 00:07:01,060
we have to move into creating our actual

00:06:57,940 --> 00:07:03,190
typescript form component this is just

00:07:01,060 --> 00:07:04,960
one of two slides the first thing is to

00:07:03,190 --> 00:07:06,880
take a note of what will actually need

00:07:04,960 --> 00:07:08,740
here so we're going to be using a

00:07:06,880 --> 00:07:10,540
template driven form so reviewing child

00:07:08,740 --> 00:07:13,750
of ng form in order to have access to

00:07:10,540 --> 00:07:15,310
that we have character form which we saw

00:07:13,750 --> 00:07:17,740
already and we're setting up some

00:07:15,310 --> 00:07:19,540
subscriptions you can see here we're

00:07:17,740 --> 00:07:21,160
referencing character form name and

00:07:19,540 --> 00:07:23,320
character formed up by a summary age

00:07:21,160 --> 00:07:24,820
you'll notice that these paths are the

00:07:23,320 --> 00:07:26,650
same as the past that we defined in our

00:07:24,820 --> 00:07:29,590
interface when we were setting up our

00:07:26,650 --> 00:07:31,150
store so we just want to make sure that

00:07:29,590 --> 00:07:33,910
those two are synchronized because we're

00:07:31,150 --> 00:07:36,580
going to subscribe character form to the

00:07:33,910 --> 00:07:38,650
store which is kind of where the magic

00:07:36,580 --> 00:07:40,780
happens so we're setting up to

00:07:38,650 --> 00:07:41,980
subscriptions here the first thing that

00:07:40,780 --> 00:07:43,420
we're going to be subscribing to you is

00:07:41,980 --> 00:07:45,220
the ng form and we're going to be

00:07:43,420 --> 00:07:46,600
subscribing to value changes which is

00:07:45,220 --> 00:07:49,720
going to fire an event every single time

00:07:46,600 --> 00:07:51,160
the value of the form changes from there

00:07:49,720 --> 00:07:52,990
we're going to take the form values and

00:07:51,160 --> 00:07:54,910
we're going to dispatch our save form

00:07:52,990 --> 00:07:56,530
action we're going to provide it the

00:07:54,910 --> 00:07:58,150
path character because that's just going

00:07:56,530 --> 00:08:00,010
to be the whole character form and we're

00:07:58,150 --> 00:08:02,500
going to provide all of the new form

00:08:00,010 --> 00:08:04,360
values of the character form and cements

00:08:02,500 --> 00:08:05,940
estate the other thing that we're going

00:08:04,360 --> 00:08:09,520
to do is we're going to set up a

00:08:05,940 --> 00:08:11,440
subscription to state that right to our

00:08:09,520 --> 00:08:13,150
character form property in our component

00:08:11,440 --> 00:08:15,430
this is so that if anywhere else when

00:08:13,150 --> 00:08:16,930
the application changes the state of the

00:08:15,430 --> 00:08:19,300
character form it will automatically be

00:08:16,930 --> 00:08:22,090
reloaded so if you were as Daniel was

00:08:19,300 --> 00:08:23,260
saying loading things from server and

00:08:22,090 --> 00:08:24,640
you wanted to populate your form

00:08:23,260 --> 00:08:28,900
component automatically this would

00:08:24,640 --> 00:08:31,450
happen right and so this is basically

00:08:28,900 --> 00:08:33,849
default that she mentioned so we have

00:08:31,450 --> 00:08:35,770
our form that subscribes to the ng form

00:08:33,849 --> 00:08:38,469
changes for every single change it

00:08:35,770 --> 00:08:41,020
dispatched to say form action we also

00:08:38,469 --> 00:08:42,909
mentioned that you can have a specific

00:08:41,020 --> 00:08:44,260
action for specific fields in this case

00:08:42,909 --> 00:08:46,270
we just override in the form of the time

00:08:44,260 --> 00:08:48,490
for the sake of simplicity but you could

00:08:46,270 --> 00:08:51,630
have a better structure that will give

00:08:48,490 --> 00:08:53,560
you maybe some performance improvement

00:08:51,630 --> 00:08:55,690
only if you're working with big form

00:08:53,560 --> 00:08:58,120
of course so it would have basis the

00:08:55,690 --> 00:09:00,820
store and that subscription that we have

00:08:58,120 --> 00:09:04,029
from the star will make our component be

00:09:00,820 --> 00:09:05,650
notified of those changes right so

00:09:04,029 --> 00:09:07,450
actually we had like a slightly better

00:09:05,650 --> 00:09:11,790
version of this slide before but they

00:09:07,450 --> 00:09:13,540
told me it wasn't very readable so yeah

00:09:11,790 --> 00:09:15,790
anyway now we're going to talk about

00:09:13,540 --> 00:09:19,120
exist extending your existing form and

00:09:15,790 --> 00:09:20,680
form reducer all right so what's the

00:09:19,120 --> 00:09:24,040
Milty entry few so now I wanna hear what

00:09:20,680 --> 00:09:26,110
some milky entry field it's like a

00:09:24,040 --> 00:09:28,810
different terminology but it's basically

00:09:26,110 --> 00:09:31,480
when you have those blocks like we have

00:09:28,810 --> 00:09:33,520
for the skills that the user can define

00:09:31,480 --> 00:09:35,529
how many entries he wants of that in our

00:09:33,520 --> 00:09:37,089
case you're just using a drop down but

00:09:35,529 --> 00:09:38,980
this could be a nested form another

00:09:37,089 --> 00:09:43,240
object inside with its specific

00:09:38,980 --> 00:09:45,730
validations by default angler template

00:09:43,240 --> 00:09:47,230
driven form does not support a race so

00:09:45,730 --> 00:09:49,210
if you have an energy form and you have

00:09:47,230 --> 00:09:51,700
template driven from the inside it's not

00:09:49,210 --> 00:09:53,470
going to give you an array so we could

00:09:51,700 --> 00:09:56,589
have written a directive like ng form

00:09:53,470 --> 00:09:59,050
just to deal with that and gives us an

00:09:56,589 --> 00:10:01,330
array object but again we want to be

00:09:59,050 --> 00:10:03,520
simple just to give the idea of how you

00:10:01,330 --> 00:10:08,470
can design your forms of this and we

00:10:03,520 --> 00:10:11,320
went with this approach so in order to

00:10:08,470 --> 00:10:12,400
handle storing form data as anarres

00:10:11,320 --> 00:10:13,720
we're going to need to add some new

00:10:12,400 --> 00:10:15,910
actions that are going to be able to

00:10:13,720 --> 00:10:17,170
support that and the main difference is

00:10:15,910 --> 00:10:18,970
going to be that we're going to want to

00:10:17,170 --> 00:10:20,770
be able to submit an index as part of

00:10:18,970 --> 00:10:22,930
our payload so you can see here are some

00:10:20,770 --> 00:10:25,150
actions we're defining for adding a

00:10:22,930 --> 00:10:26,890
multi entry form value updating a multi

00:10:25,150 --> 00:10:29,800
entry form value and removing a multi

00:10:26,890 --> 00:10:31,750
entry form value where add is just going

00:10:29,800 --> 00:10:33,280
to add an undefined item to the array so

00:10:31,750 --> 00:10:35,980
that we know that they want to create a

00:10:33,280 --> 00:10:37,690
new thing we can update it in place and

00:10:35,980 --> 00:10:41,500
we can also remove an item from the

00:10:37,690 --> 00:10:42,730
array yeah in all those generic actions

00:10:41,500 --> 00:10:44,709
they can manually in any type of array

00:10:42,730 --> 00:10:47,200
and what we're doing here we have a

00:10:44,709 --> 00:10:48,540
switch gaze for the update action but

00:10:47,200 --> 00:10:52,300
the order to switch case would be

00:10:48,540 --> 00:10:53,920
similar just removing or adding and you

00:10:52,300 --> 00:10:54,970
entering into the array your library

00:10:53,920 --> 00:10:58,180
using rammed up for a new ability

00:10:54,970 --> 00:11:00,400
because we want that are our functions

00:10:58,180 --> 00:11:02,740
are fewer functions and all it does is

00:11:00,400 --> 00:11:05,050
basically update the value in that

00:11:02,740 --> 00:11:06,720
particular index so whenever we select

00:11:05,050 --> 00:11:11,759
something in the drop down

00:11:06,720 --> 00:11:13,199
value goes to that place in the state so

00:11:11,759 --> 00:11:15,120
next we're going to need to update our

00:11:13,199 --> 00:11:17,040
forum component this is just a method on

00:11:15,120 --> 00:11:20,639
the forum component that would dispatch

00:11:17,040 --> 00:11:22,709
the action put in array once we wanted

00:11:20,639 --> 00:11:24,629
to actually call it and as you can see

00:11:22,709 --> 00:11:26,639
we've got the value which in our case is

00:11:24,629 --> 00:11:28,949
going to be the skill the index where we

00:11:26,639 --> 00:11:31,319
want to place it and our path which is

00:11:28,949 --> 00:11:33,629
going to be character and skills so as

00:11:31,319 --> 00:11:34,980
you can see we've broken out I'm not

00:11:33,629 --> 00:11:36,689
just saving the whole character form

00:11:34,980 --> 00:11:38,339
we're saving to this specific field so

00:11:36,689 --> 00:11:41,670
that we can use this method directly on

00:11:38,339 --> 00:11:44,670
our template this is how we use it in a

00:11:41,670 --> 00:11:46,500
template so basically our template is

00:11:44,670 --> 00:11:47,910
going through every skill that we have

00:11:46,500 --> 00:11:50,160
in the state so you can see by the

00:11:47,910 --> 00:11:52,709
energy for the top it will generate most

00:11:50,160 --> 00:11:55,199
cool drop downs every drop down has a

00:11:52,709 --> 00:11:59,519
button which allows you to remove that

00:11:55,199 --> 00:12:02,490
particular entry and we also we are also

00:11:59,519 --> 00:12:04,740
dispatching the update action on change

00:12:02,490 --> 00:12:06,839
whenever the drop down Valerie changes

00:12:04,740 --> 00:12:09,509
we just update that in the state and we

00:12:06,839 --> 00:12:12,360
also allows the user with the button at

00:12:09,509 --> 00:12:15,209
the very bottom to add a new SKU which

00:12:12,360 --> 00:12:17,279
basically adds a undefined element at

00:12:15,209 --> 00:12:19,350
empty element in the state and that will

00:12:17,279 --> 00:12:21,540
generate a drop down because we've seen

00:12:19,350 --> 00:12:22,860
previously that it's cycles so the data

00:12:21,540 --> 00:12:26,689
will go to the state and the

00:12:22,860 --> 00:12:26,689
subscription will make this rear ender

00:12:27,199 --> 00:12:31,769
so Eddie validations so this is the part

00:12:30,120 --> 00:12:34,949
where things start getting complicated

00:12:31,769 --> 00:12:37,199
and usually when you start doing

00:12:34,949 --> 00:12:39,750
validations I work last year with a

00:12:37,199 --> 00:12:42,779
project that was started in January so

00:12:39,750 --> 00:12:45,959
anglers beta it was an enterprise farm

00:12:42,779 --> 00:12:49,980
based app with tons of validations every

00:12:45,959 --> 00:12:52,139
single change like 78 validations

00:12:49,980 --> 00:12:53,579
triggering every time it was really hard

00:12:52,139 --> 00:12:56,910
to manage and I was facing something

00:12:53,579 --> 00:12:59,129
like this I was down there afraid of all

00:12:56,910 --> 00:13:02,519
the tabs yeah one of them was a

00:12:59,129 --> 00:13:05,089
synchronous and breath and fire all the

00:13:02,519 --> 00:13:07,579
time but all we want to do here is

00:13:05,089 --> 00:13:12,480
change this to something like this oh

00:13:07,579 --> 00:13:16,139
you can so cute manageable because we're

00:13:12,480 --> 00:13:18,480
reasserts and validation of selectors is

00:13:16,139 --> 00:13:20,100
how we're going to do it so selectors

00:13:18,480 --> 00:13:22,920
can compute data from the store through

00:13:20,100 --> 00:13:24,630
function composition this way we don't

00:13:22,920 --> 00:13:26,069
have to dispatch actions every time we

00:13:24,630 --> 00:13:28,170
want to validate a field or every time

00:13:26,069 --> 00:13:29,819
we want to validate the form because all

00:13:28,170 --> 00:13:31,800
the data that we need to validate the

00:13:29,819 --> 00:13:33,990
form already exists in the state so we

00:13:31,800 --> 00:13:37,009
can use selectors to just compute

00:13:33,990 --> 00:13:39,329
whether or not those fields are valid

00:13:37,009 --> 00:13:42,000
right and how the selectors works

00:13:39,329 --> 00:13:44,490
basically selectors can chain multiple

00:13:42,000 --> 00:13:47,160
functions each of those functions

00:13:44,490 --> 00:13:49,709
returns a value this was your selecting

00:13:47,160 --> 00:13:52,050
recomputing and the last function you

00:13:49,709 --> 00:13:54,149
chained we receive in the same order all

00:13:52,050 --> 00:13:57,240
the previously returned as balance of

00:13:54,149 --> 00:13:58,800
the previously change functions wow

00:13:57,240 --> 00:14:00,630
that's how it's confusing let's take a

00:13:58,800 --> 00:14:02,310
look at the sample collector this is a

00:14:00,630 --> 00:14:04,259
very simple but also a very practical

00:14:02,310 --> 00:14:07,410
example if you've never used selectors

00:14:04,259 --> 00:14:08,610
before so the objective of the selectors

00:14:07,410 --> 00:14:11,399
that we've written here is just to

00:14:08,610 --> 00:14:12,779
return to us a chunk of the state so we

00:14:11,399 --> 00:14:15,000
start with the forum state selector

00:14:12,779 --> 00:14:17,459
which will receive the state and just

00:14:15,000 --> 00:14:19,920
return state form so we get the entire

00:14:17,459 --> 00:14:21,389
forum state but then we can chain it

00:14:19,920 --> 00:14:23,519
into creating this character forum

00:14:21,389 --> 00:14:25,410
selector which will receive the form

00:14:23,519 --> 00:14:27,839
returned from forum state selector as a

00:14:25,410 --> 00:14:29,459
parameter and from there we can return

00:14:27,839 --> 00:14:33,810
form doc character and this will just

00:14:29,459 --> 00:14:36,420
give us the character forum State so

00:14:33,810 --> 00:14:39,180
whenever we want to get that tractor

00:14:36,420 --> 00:14:41,130
farm we just use the character farm

00:14:39,180 --> 00:14:43,050
selector so our last function that

00:14:41,130 --> 00:14:45,300
receives the previous return value we

00:14:43,050 --> 00:14:46,860
retreat we receive the character and all

00:14:45,300 --> 00:14:48,990
we're doing here is basically about

00:14:46,860 --> 00:14:50,639
validating the farm in a very simple and

00:14:48,990 --> 00:14:53,399
basic way just make sure that we have a

00:14:50,639 --> 00:14:56,220
name we have an age and at least one

00:14:53,399 --> 00:14:58,290
skill so this is basically a selector

00:14:56,220 --> 00:15:02,220
that returns a boolean and we use that

00:14:58,290 --> 00:15:03,990
boolean in the template right so we can

00:15:02,220 --> 00:15:06,930
use this boolean in the template in

00:15:03,990 --> 00:15:09,029
order to disable or enable our button so

00:15:06,930 --> 00:15:10,889
in this example we're importing select

00:15:09,029 --> 00:15:12,689
from angular redux just a library that

00:15:10,889 --> 00:15:14,490
we're using to help us use Redux on our

00:15:12,689 --> 00:15:18,600
angular application and we're using the

00:15:14,490 --> 00:15:20,250
Select decorator to access our selector

00:15:18,600 --> 00:15:22,350
which is going to give us an observable

00:15:20,250 --> 00:15:23,730
that will ultimately return a boolean so

00:15:22,350 --> 00:15:25,769
when we combine this with the async pipe

00:15:23,730 --> 00:15:28,740
we can use it to toggle the disabled

00:15:25,769 --> 00:15:31,260
state of the button on and off a scene

00:15:28,740 --> 00:15:32,540
Pike is just a way that you can angler

00:15:31,260 --> 00:15:34,220
subscribe to you observable

00:15:32,540 --> 00:15:35,600
and get that valid in the template if

00:15:34,220 --> 00:15:39,680
you guys saw mills that's bundled inside

00:15:35,600 --> 00:15:43,070
angular right so this is the new flow

00:15:39,680 --> 00:15:45,550
with the selectors in so selectors are

00:15:43,070 --> 00:15:49,730
between the state and the component

00:15:45,550 --> 00:15:53,120
because whenever we change the state the

00:15:49,730 --> 00:15:55,100
data that was there with modified which

00:15:53,120 --> 00:15:57,860
means that we need we are ensuring the

00:15:55,100 --> 00:16:00,140
form to still valid so selectors will

00:15:57,860 --> 00:16:02,420
trigger automatically every time the

00:16:00,140 --> 00:16:04,610
state changes it provides you some

00:16:02,420 --> 00:16:07,160
benefits of memorization so if you're

00:16:04,610 --> 00:16:08,720
really working with immutable operations

00:16:07,160 --> 00:16:11,390
and you're making shallow copies of your

00:16:08,720 --> 00:16:13,520
object we reuse the other entries so

00:16:11,390 --> 00:16:20,270
only some of those selectors will

00:16:13,520 --> 00:16:21,890
trigger which is also good so being able

00:16:20,270 --> 00:16:22,940
to turn a button on and off is great but

00:16:21,890 --> 00:16:24,440
what you're really going to want to be

00:16:22,940 --> 00:16:26,240
able to do is set up field-specific

00:16:24,440 --> 00:16:28,580
validation rules and you can do the same

00:16:26,240 --> 00:16:30,560
thing with selectors so this is an

00:16:28,580 --> 00:16:32,660
example of another very very simple one

00:16:30,560 --> 00:16:35,060
where we've taken the name and we're

00:16:32,660 --> 00:16:38,090
evaluating if the name length is greater

00:16:35,060 --> 00:16:40,100
than 3 and less than 50 we set this up

00:16:38,090 --> 00:16:42,290
to be a very simple example but you

00:16:40,100 --> 00:16:45,620
could just as easily use functions that

00:16:42,290 --> 00:16:47,270
you had predefined for checking max

00:16:45,620 --> 00:16:49,340
length of characters or mid length of

00:16:47,270 --> 00:16:51,140
characters and just channels all

00:16:49,340 --> 00:16:53,300
together in order to return a boolean or

00:16:51,140 --> 00:16:54,590
a message we're doing that in the source

00:16:53,300 --> 00:16:57,050
code so if you guys are accused and how

00:16:54,590 --> 00:17:00,020
you can abstract all this go and check

00:16:57,050 --> 00:17:02,990
it out this risk oh yeah right so now we

00:17:00,020 --> 00:17:04,580
have a specific collector that validates

00:17:02,990 --> 00:17:06,560
the main so I don't want to rewrite the

00:17:04,580 --> 00:17:08,660
same validation when I'm validating my

00:17:06,560 --> 00:17:11,300
whole time is valid so I had to do is

00:17:08,660 --> 00:17:13,010
just piping the main valid selector and

00:17:11,300 --> 00:17:15,800
as we've seen previously we're going to

00:17:13,010 --> 00:17:17,660
receive in our last function all the

00:17:15,800 --> 00:17:20,330
values returned for the previously

00:17:17,660 --> 00:17:22,370
change functions and we're getting the

00:17:20,330 --> 00:17:24,590
name valid which is already computed

00:17:22,370 --> 00:17:29,690
value right and all we have to do is

00:17:24,590 --> 00:17:30,980
update our component with that so we

00:17:29,690 --> 00:17:33,050
want to update our components that we

00:17:30,980 --> 00:17:34,220
can actually show validation errors and

00:17:33,050 --> 00:17:35,570
we're going to do the same thing that we

00:17:34,220 --> 00:17:37,310
did before where we're selecting a

00:17:35,570 --> 00:17:38,750
selector and it's going to return a

00:17:37,310 --> 00:17:43,730
boolean true or false that we're going

00:17:38,750 --> 00:17:46,550
to then use in our component because for

00:17:43,730 --> 00:17:48,710
a specific name info field we want

00:17:46,550 --> 00:17:50,900
show some message something that will

00:17:48,710 --> 00:17:54,080
tell the user hey this is Valis is

00:17:50,900 --> 00:17:57,920
invalid the way that we do it is we use

00:17:54,080 --> 00:18:00,320
our risotto part selector but that's not

00:17:57,920 --> 00:18:02,270
enough because sometimes the forum is

00:18:00,320 --> 00:18:04,430
just let's say that the user just get

00:18:02,270 --> 00:18:07,340
into the farm he has in such any field

00:18:04,430 --> 00:18:08,870
yet so the name will be invalid because

00:18:07,340 --> 00:18:11,960
it's empty and I'm saying that it's a

00:18:08,870 --> 00:18:14,540
required field so for that we use we get

00:18:11,960 --> 00:18:16,400
the reference of ng model so that we can

00:18:14,540 --> 00:18:19,190
query for things like Christine or

00:18:16,400 --> 00:18:21,470
touched so that we only show the message

00:18:19,190 --> 00:18:22,760
when that is what the user touch the

00:18:21,470 --> 00:18:25,490
field or something like that it really

00:18:22,760 --> 00:18:31,310
depends on your business rules but this

00:18:25,490 --> 00:18:33,350
is how we're doing so wrapping up why

00:18:31,310 --> 00:18:35,060
should you bother we've shown you a lot

00:18:33,350 --> 00:18:36,920
of different things that you can do to

00:18:35,060 --> 00:18:38,540
integrate your forms with redux but the

00:18:36,920 --> 00:18:40,790
reality of the situation is if you just

00:18:38,540 --> 00:18:41,840
have a login form on your website you

00:18:40,790 --> 00:18:44,360
might not want to go to all this trouble

00:18:41,840 --> 00:18:46,040
the other reality is you can pick and

00:18:44,360 --> 00:18:48,110
choose which of these approaches works

00:18:46,040 --> 00:18:49,460
for you maybe the validation is too

00:18:48,110 --> 00:18:50,540
heavy or maybe that's the thing that's

00:18:49,460 --> 00:18:53,090
really going to make your application

00:18:50,540 --> 00:18:55,970
shine we're just going to go over the

00:18:53,090 --> 00:18:58,340
points that we think are very usable

00:18:55,970 --> 00:19:00,830
about this approach right so it's

00:18:58,340 --> 00:19:02,870
reusable because you can reuse the same

00:19:00,830 --> 00:19:04,640
selector all over the place and if you

00:19:02,870 --> 00:19:06,890
know how to apply some functional

00:19:04,640 --> 00:19:09,140
programming designs and patterns you can

00:19:06,890 --> 00:19:11,240
leverage a bunch of things with curried

00:19:09,140 --> 00:19:13,190
functions and things like that which we

00:19:11,240 --> 00:19:14,960
do have examples of in the code that

00:19:13,190 --> 00:19:16,790
we've provided for you it's also

00:19:14,960 --> 00:19:18,440
reusable because we're only setting up

00:19:16,790 --> 00:19:20,570
our form reducer once and we're using

00:19:18,440 --> 00:19:23,120
pass as part of the payload to be able

00:19:20,570 --> 00:19:26,780
to save fields and reuse or actions all

00:19:23,120 --> 00:19:29,150
over the place it's portable because

00:19:26,780 --> 00:19:31,040
this is all framework agnostic so if you

00:19:29,150 --> 00:19:32,510
want to use it with native script guess

00:19:31,040 --> 00:19:34,070
what you have all the validations all

00:19:32,510 --> 00:19:36,470
your business rules staves in a safe

00:19:34,070 --> 00:19:40,070
spot that can be consumed by any way in

00:19:36,470 --> 00:19:43,850
any way from angular from native script

00:19:40,070 --> 00:19:46,700
or whatever you like and it's scalable

00:19:43,850 --> 00:19:48,470
so if you do run into a situation where

00:19:46,700 --> 00:19:50,450
you're building an enterprise-level form

00:19:48,470 --> 00:19:52,040
application and you have to synchronize

00:19:50,450 --> 00:19:53,840
all kinds of different validations and

00:19:52,040 --> 00:19:56,360
you have to know your form data and do

00:19:53,840 --> 00:19:57,710
all kinds of operations against it this

00:19:56,360 --> 00:20:01,000
is a really great approach for

00:19:57,710 --> 00:20:03,050
centralizing everything that you need

00:20:01,000 --> 00:20:04,970
if you want to check out the slides

00:20:03,050 --> 00:20:06,260
they're here and thank you very much

00:20:04,970 --> 00:20:13,910
thank you

00:20:06,260 --> 00:20:13,910

YouTube URL: https://www.youtube.com/watch?v=vxJUBgTsLgs


