Title: Turbocharge Your Angular Testing Workflow - Victor Mejia
Publication date: 2017-04-30
Playlist: ng-conf 2017 Basic Talks
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,690 --> 00:00:04,830
how's it going everyone my name is

00:00:02,820 --> 00:00:07,499
Victor Mejia I am a lead instructor at

00:00:04,830 --> 00:00:09,179
an occult school and today I just want

00:00:07,499 --> 00:00:11,280
to talk to you about a few tips that you

00:00:09,179 --> 00:00:14,910
can use to turbocharge your angular

00:00:11,280 --> 00:00:17,220
testing workflow so on a quest to find

00:00:14,910 --> 00:00:18,810
out why more devs weren't testing their

00:00:17,220 --> 00:00:21,090
angular apps I ran a quick Twitter poll

00:00:18,810 --> 00:00:23,130
at the top of the list was setup in

00:00:21,090 --> 00:00:24,929
configuration followed by being

00:00:23,130 --> 00:00:26,880
unfamiliar with the inch the new nd

00:00:24,929 --> 00:00:28,560
testing API so what I want to do in the

00:00:26,880 --> 00:00:30,539
next few minutes just go over each one

00:00:28,560 --> 00:00:33,510
of these points and go over some tips

00:00:30,539 --> 00:00:34,469
that I have found very useful so let's

00:00:33,510 --> 00:00:36,870
get down to business

00:00:34,469 --> 00:00:38,789
so setup and configuration the CEO has

00:00:36,870 --> 00:00:40,020
been getting a lot of love and ng cons

00:00:38,789 --> 00:00:43,140
so that's one of the lovin it some more

00:00:40,020 --> 00:00:44,940
it's it's so awesome install it it's

00:00:43,140 --> 00:00:46,530
careful about a new app using ng new and

00:00:44,940 --> 00:00:47,100
testing is just configure right

00:00:46,530 --> 00:00:49,230
out-of-the-box

00:00:47,100 --> 00:00:51,840
simple around ng test and the chrome

00:00:49,230 --> 00:00:53,670
instance is launch watching your specs

00:00:51,840 --> 00:00:55,109
in in watch mode so as you make a

00:00:53,670 --> 00:00:59,340
changes it will automatically run your

00:00:55,109 --> 00:01:01,170
test if that's not your thing you can

00:00:59,340 --> 00:01:02,250
run it with a single run flag and what I

00:01:01,170 --> 00:01:04,440
like to do is run it with the code

00:01:02,250 --> 00:01:06,330
coverage flag and what that will do is

00:01:04,440 --> 00:01:07,830
generate Istanbul reports now I like

00:01:06,330 --> 00:01:09,930
these reports because I can make sure

00:01:07,830 --> 00:01:14,010
that the critical paths in my app are

00:01:09,930 --> 00:01:15,660
being tested I like to go ahead and

00:01:14,010 --> 00:01:16,620
configure my Toronto reporting I'm kind

00:01:15,660 --> 00:01:18,300
of picky about my procurement of

00:01:16,620 --> 00:01:21,570
reporting so to do that we install the

00:01:18,300 --> 00:01:23,790
karma spec reporter we add the reporter

00:01:21,570 --> 00:01:26,250
to the plugins change the reporter to

00:01:23,790 --> 00:01:28,230
spec and then a text summary for our

00:01:26,250 --> 00:01:30,750
assemble reporter and now when I run my

00:01:28,230 --> 00:01:33,090
test I get a nice output of each spec in

00:01:30,750 --> 00:01:37,740
my terminal and at the end I get a text

00:01:33,090 --> 00:01:40,140
summary of my current code coverage now

00:01:37,740 --> 00:01:42,030
pheeba I look for results as I was

00:01:40,140 --> 00:01:44,280
working in larger angular apps and the

00:01:42,030 --> 00:01:47,520
number of specs the map was was growing

00:01:44,280 --> 00:01:48,870
that time to get my results was

00:01:47,520 --> 00:01:50,420
increasing over time and I thought there

00:01:48,870 --> 00:01:52,740
has to be a better solution for this

00:01:50,420 --> 00:01:54,720
wallaby Jas is actually the perfect

00:01:52,740 --> 00:01:56,070
solution for this a wallaby GS allows

00:01:54,720 --> 00:01:58,020
you to do is to get real-time feedback

00:01:56,070 --> 00:02:00,510
right in your editor in this case I'm

00:01:58,020 --> 00:02:02,490
using Visual Studio code and as I'm

00:02:00,510 --> 00:02:04,440
writing my specs out I get real-time

00:02:02,490 --> 00:02:07,050
feedback of whether my spec is fail is

00:02:04,440 --> 00:02:08,910
passing or failing integration with the

00:02:07,050 --> 00:02:10,890
CLI was actually pretty pretty awesome

00:02:08,910 --> 00:02:13,110
they pretend they're sample repo they

00:02:10,890 --> 00:02:14,280
provide you know two configuration files

00:02:13,110 --> 00:02:16,739
so you can

00:02:14,280 --> 00:02:18,689
bring into your apps got the scaffolding

00:02:16,739 --> 00:02:20,310
with the CLI and integration was

00:02:18,689 --> 00:02:25,409
seamless so I highly recommend you check

00:02:20,310 --> 00:02:27,629
out wallaby Jas now what about the test

00:02:25,409 --> 00:02:29,310
fit API that angular team again has made

00:02:27,629 --> 00:02:32,010
it really easy for DES

00:02:29,310 --> 00:02:33,540
to test your angular apps configure your

00:02:32,010 --> 00:02:35,430
test fit module is sort of like an NG

00:02:33,540 --> 00:02:37,439
module you declare the components that

00:02:35,430 --> 00:02:39,239
are being tested and you want to get

00:02:37,439 --> 00:02:41,099
your handle on three important objects

00:02:39,239 --> 00:02:43,049
the fixture which is used for debugging

00:02:41,099 --> 00:02:45,749
and testing your component the component

00:02:43,049 --> 00:02:48,359
instance and also the debug element

00:02:45,749 --> 00:02:50,040
associated with this component and then

00:02:48,359 --> 00:02:52,680
your spec you can change your components

00:02:50,040 --> 00:02:54,329
properties or inputs trigger a change

00:02:52,680 --> 00:02:56,310
detection cycle for that component and

00:02:54,329 --> 00:02:58,620
then use the debug element to test

00:02:56,310 --> 00:03:00,629
against your templates the test but also

00:02:58,620 --> 00:03:02,579
allows you to stop injected dependencies

00:03:00,629 --> 00:03:04,980
which is really useful when doing unit

00:03:02,579 --> 00:03:06,389
testing there's some really great

00:03:04,980 --> 00:03:08,669
testing guys out there I highly suggest

00:03:06,389 --> 00:03:12,810
you check them out and I'll be tweeting

00:03:08,669 --> 00:03:14,040
out the link for the presentations now

00:03:12,810 --> 00:03:16,260
what about test maintenance a lot of

00:03:14,040 --> 00:03:19,620
devs will come up to me and ask about

00:03:16,260 --> 00:03:21,720
this and this is was at the top of my

00:03:19,620 --> 00:03:23,370
list I was talking about this would

00:03:21,720 --> 00:03:26,159
probably be to organize your tests have

00:03:23,370 --> 00:03:28,919
a table will describe for your component

00:03:26,159 --> 00:03:30,479
use nessa describe four functions on

00:03:28,919 --> 00:03:33,870
your component we are writing unit tests

00:03:30,479 --> 00:03:35,849
after all and then like to have a

00:03:33,870 --> 00:03:37,620
separate describe block for my component

00:03:35,849 --> 00:03:39,329
interaction and functionality this is

00:03:37,620 --> 00:03:42,479
where I would test things out against my

00:03:39,329 --> 00:03:44,250
template this is useful because as you

00:03:42,479 --> 00:03:46,290
know as we configured our terminal

00:03:44,250 --> 00:03:47,759
reporting your describe blocks will be

00:03:46,290 --> 00:03:52,079
neatly outputted so you can easily see

00:03:47,759 --> 00:03:54,239
what tests are passing a test should

00:03:52,079 --> 00:03:57,180
tell a story so unexpect you know make a

00:03:54,239 --> 00:04:00,959
meaningful read of readable sentence use

00:03:57,180 --> 00:04:04,040
the a a pattern or we arrange we act and

00:04:00,959 --> 00:04:06,209
then we assert don't follow dry to a tee

00:04:04,040 --> 00:04:07,979
it's kind of kind of weird to say that

00:04:06,209 --> 00:04:10,409
you know but a developer should be able

00:04:07,979 --> 00:04:12,539
to look at your spec and know exactly

00:04:10,409 --> 00:04:15,680
what's going on without navigating too

00:04:12,539 --> 00:04:18,000
far away from that place in your code

00:04:15,680 --> 00:04:19,979
mark dependencies to isolate tests you

00:04:18,000 --> 00:04:24,000
don't want to use your actual API

00:04:19,979 --> 00:04:26,520
services right so we mock mock them out

00:04:24,000 --> 00:04:27,540
and when configuring your test fit

00:04:26,520 --> 00:04:31,470
module use a

00:04:27,540 --> 00:04:32,730
white object literal and forest coverage

00:04:31,470 --> 00:04:35,840
thresholds now I'd like to do this

00:04:32,730 --> 00:04:38,880
because I like to insure my teams that

00:04:35,840 --> 00:04:40,380
untested code is not being checked in we

00:04:38,880 --> 00:04:44,100
can easily do this with the Karma is

00:04:40,380 --> 00:04:46,620
symbol threshold plugin we add the JSON

00:04:44,100 --> 00:04:49,170
reporter at the is somewhat threshold

00:04:46,620 --> 00:04:51,690
reporter and then we can in an object we

00:04:49,170 --> 00:04:53,730
just simply configure the global and

00:04:51,690 --> 00:04:57,150
individual file thresholds I'm gonna run

00:04:53,730 --> 00:04:59,400
my tests if any of these the the current

00:04:57,150 --> 00:05:01,080
coverage falls between these specified

00:04:59,400 --> 00:05:05,340
thresholds karma will exit with an error

00:05:01,080 --> 00:05:08,580
code and last but not least I like to

00:05:05,340 --> 00:05:10,710
prevent back commits with husky now what

00:05:08,580 --> 00:05:13,230
host he allows you to do is to configure

00:05:10,710 --> 00:05:15,480
get hooks by simply adding npm scripts

00:05:13,230 --> 00:05:18,300
in this case I'm adding a couple of npm

00:05:15,480 --> 00:05:20,190
scripts a pre-commit hook which will run

00:05:18,300 --> 00:05:22,500
my linting and a pre push hook which

00:05:20,190 --> 00:05:24,690
will run my unit tests so that combined

00:05:22,500 --> 00:05:27,390
with the enforcing of the coverage of

00:05:24,690 --> 00:05:30,480
thresholds you can really and you know

00:05:27,390 --> 00:05:32,550
enforce clean code and make sure that

00:05:30,480 --> 00:05:35,700
you your team members are checking in

00:05:32,550 --> 00:05:38,100
tested code here are a couple links

00:05:35,700 --> 00:05:40,820
again just go to ng test turbo dot

00:05:38,100 --> 00:05:43,560
firebase app calm i'll also tweet it out

00:05:40,820 --> 00:05:44,520
i'll be hanging out at noon today in the

00:05:43,560 --> 00:05:47,370
experts room if you want to talk about

00:05:44,520 --> 00:05:48,630
testing or anything about angular and it

00:05:47,370 --> 00:05:53,380
thanks so much appreciate us

00:05:48,630 --> 00:05:53,380

YouTube URL: https://www.youtube.com/watch?v=wj3dStoEhso


