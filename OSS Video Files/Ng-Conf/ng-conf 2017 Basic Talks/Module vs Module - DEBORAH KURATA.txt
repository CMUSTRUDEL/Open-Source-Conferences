Title: Module vs Module - DEBORAH KURATA
Publication date: 2017-04-30
Playlist: ng-conf 2017 Basic Talks
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,000 --> 00:00:03,720
[Applause]

00:00:00,860 --> 00:00:07,980
thank you John Logan thank you all of

00:00:03,720 --> 00:00:10,500
you my name is Debra Kurata and we're

00:00:07,980 --> 00:00:12,730
going to talk about modules versus

00:00:10,500 --> 00:00:15,839
modules

00:00:12,730 --> 00:00:15,839
[Music]

00:00:18,080 --> 00:00:21,240
[Music]

00:00:22,410 --> 00:00:24,410
Oh

00:00:36,630 --> 00:00:42,720
so it was all just an illusion okay so

00:00:40,420 --> 00:00:46,629
we're going to talk about es2015 modules

00:00:42,720 --> 00:00:49,329
versus angular modules and since John

00:00:46,629 --> 00:00:51,370
Papa told us to use lazy loading we're

00:00:49,329 --> 00:00:53,260
going to try to use lazy loading and

00:00:51,370 --> 00:00:54,879
find that if you just try to do the

00:00:53,260 --> 00:01:02,470
little bit that John showed it's not

00:00:54,879 --> 00:01:03,370
going to work and why all right sorry

00:01:02,470 --> 00:01:08,729
John

00:01:03,370 --> 00:01:12,070
alright so javascript has issues right

00:01:08,729 --> 00:01:14,369
namespaces code organization modules are

00:01:12,070 --> 00:01:17,170
supposed to be solving those issues so

00:01:14,369 --> 00:01:18,729
angularjs had modules typescript has

00:01:17,170 --> 00:01:21,610
modules yes

00:01:18,729 --> 00:01:26,020
2015 standardized what a module should

00:01:21,610 --> 00:01:29,350
be angular uses es2015 modules but it

00:01:26,020 --> 00:01:33,729
also has its own angular modules what's

00:01:29,350 --> 00:01:36,160
the difference yes 2015 modules when you

00:01:33,729 --> 00:01:39,550
think of those you're thinking of code

00:01:36,160 --> 00:01:45,009
files so in angular I'm sorry and es

00:01:39,550 --> 00:01:48,789
2015 module is simply a code file all we

00:01:45,009 --> 00:01:51,640
need to do is export something or import

00:01:48,789 --> 00:01:54,580
something and our code file becomes a

00:01:51,640 --> 00:01:56,860
module a module is a code file a code

00:01:54,580 --> 00:02:00,729
file is a module as long as it exports

00:01:56,860 --> 00:02:03,340
or imports something you can think of

00:02:00,729 --> 00:02:05,530
that as sort of being micro in nature

00:02:03,340 --> 00:02:08,530
it's having to do with our code files

00:02:05,530 --> 00:02:10,929
what our code files are exporting or

00:02:08,530 --> 00:02:13,690
making available to the universe and

00:02:10,929 --> 00:02:18,400
what it's using from the universe by way

00:02:13,690 --> 00:02:20,530
of it imports on the other hand angular

00:02:18,400 --> 00:02:23,950
modules you can think of more as being

00:02:20,530 --> 00:02:27,310
macro they organize our application into

00:02:23,950 --> 00:02:30,580
cohesive blocks of functionality we

00:02:27,310 --> 00:02:33,250
define a set of components any of their

00:02:30,580 --> 00:02:36,610
related files and any of their

00:02:33,250 --> 00:02:40,270
dependencies in a module we add more

00:02:36,610 --> 00:02:42,280
features we add more modules what do

00:02:40,270 --> 00:02:45,700
though what do those modules look like

00:02:42,280 --> 00:02:47,800
they look like this as with pretty much

00:02:45,700 --> 00:02:50,170
everything in angular and

00:02:47,800 --> 00:02:53,320
angular module is simply a class with a

00:02:50,170 --> 00:02:56,860
specific decorator RNG module decorator

00:02:53,320 --> 00:03:00,280
and we pass to that ng module decorator

00:02:56,860 --> 00:03:02,740
a set of arrays the hard part with

00:03:00,280 --> 00:03:06,400
angular module is figuring out what goes

00:03:02,740 --> 00:03:09,220
into what each of these arrays and what

00:03:06,400 --> 00:03:10,840
each one contains so what we're going to

00:03:09,220 --> 00:03:13,270
do is we're going to look at a little

00:03:10,840 --> 00:03:16,750
example and talk through how to set up

00:03:13,270 --> 00:03:18,850
all of these arrays but first you might

00:03:16,750 --> 00:03:22,090
notice here that we're exporting a class

00:03:18,850 --> 00:03:25,240
from this angular module code file and

00:03:22,090 --> 00:03:28,510
we're importing stuff into this angular

00:03:25,240 --> 00:03:33,930
module code file so our angular modules

00:03:28,510 --> 00:03:36,250
are themselves actually yes 2015 modules

00:03:33,930 --> 00:03:39,100
okay so here's our sample application

00:03:36,250 --> 00:03:41,920
we've got a splash screen we kick click

00:03:39,100 --> 00:03:44,410
pick the product list menu option and we

00:03:41,920 --> 00:03:47,320
get the product list page the product

00:03:44,410 --> 00:03:49,600
list page uses a service to get its data

00:03:47,320 --> 00:03:51,790
that it's displaying here it has a

00:03:49,600 --> 00:03:55,150
filter by box that's using two-way

00:03:51,790 --> 00:03:57,489
binding when the user types something

00:03:55,150 --> 00:03:59,620
into that filter box there's a custom

00:03:57,489 --> 00:04:02,140
pipe in the background that's going to

00:03:59,620 --> 00:04:04,660
filter our list and then we have this

00:04:02,140 --> 00:04:07,690
nested component here that knows how to

00:04:04,660 --> 00:04:10,150
take a number and display it as stars if

00:04:07,690 --> 00:04:12,520
you pick the product link there you get

00:04:10,150 --> 00:04:15,400
to the product detail which also is

00:04:12,520 --> 00:04:17,049
reusing that star component so our

00:04:15,400 --> 00:04:18,910
architecture for that simple little

00:04:17,049 --> 00:04:20,950
application looks something like this

00:04:18,910 --> 00:04:23,440
where we've got components for each of

00:04:20,950 --> 00:04:26,350
the main pages for our star component

00:04:23,440 --> 00:04:29,350
our product filter pipe and our service

00:04:26,350 --> 00:04:31,660
so how do we get all of these pieces how

00:04:29,350 --> 00:04:35,770
do we put them all together with regard

00:04:31,660 --> 00:04:37,450
to an angular module well first of all

00:04:35,770 --> 00:04:40,000
it's important to note that every

00:04:37,450 --> 00:04:42,580
angular application that we build has to

00:04:40,000 --> 00:04:47,500
have at least one angular module by

00:04:42,580 --> 00:04:49,210
convention called app module one of the

00:04:47,500 --> 00:04:51,490
first arrays that you need to think

00:04:49,210 --> 00:04:53,970
about is the declarations array the

00:04:51,490 --> 00:04:57,640
declarations array contains components

00:04:53,970 --> 00:04:59,979
custom directives and custom pipes so

00:04:57,640 --> 00:05:01,090
every component that we build has to

00:04:59,979 --> 00:05:04,210
belong to one

00:05:01,090 --> 00:05:06,250
and only one angular module in this

00:05:04,210 --> 00:05:09,550
example we're going to start by putting

00:05:06,250 --> 00:05:12,370
it all into our root application module

00:05:09,550 --> 00:05:14,020
our app module here so you'll see on

00:05:12,370 --> 00:05:16,120
that list that every one of our

00:05:14,020 --> 00:05:18,310
components is there along with our pipes

00:05:16,120 --> 00:05:19,770
and if we had custom directives they

00:05:18,310 --> 00:05:22,210
would be there as well

00:05:19,770 --> 00:05:23,889
the next array I want to talk about is

00:05:22,210 --> 00:05:26,290
the bootstrap array that one's a little

00:05:23,889 --> 00:05:28,780
bit more straightforward that simply

00:05:26,290 --> 00:05:30,850
contains our startup component so

00:05:28,780 --> 00:05:33,280
whatever component has the selector

00:05:30,850 --> 00:05:35,889
that's inside our HTML page our

00:05:33,280 --> 00:05:37,389
index.html that's normally the one that

00:05:35,889 --> 00:05:41,830
we're going to put in our bootstrap

00:05:37,389 --> 00:05:44,440
array next is our providers array our

00:05:41,830 --> 00:05:47,200
providers array is for any of our custom

00:05:44,440 --> 00:05:49,150
services if we use a service from

00:05:47,200 --> 00:05:51,370
somewhere else we don't put it in our

00:05:49,150 --> 00:05:53,530
providers array we're only putting in

00:05:51,370 --> 00:05:58,270
our providers array any services that

00:05:53,530 --> 00:06:00,190
we've created the providers array has

00:05:58,270 --> 00:06:02,440
some special functionality associated

00:06:00,190 --> 00:06:04,720
with it so we need to ensure that we

00:06:02,440 --> 00:06:06,669
only put services there not other

00:06:04,720 --> 00:06:09,400
components or directives or anything

00:06:06,669 --> 00:06:12,520
else because when we put something into

00:06:09,400 --> 00:06:15,130
the providers array at runtime angular

00:06:12,520 --> 00:06:19,240
will register that services provider

00:06:15,130 --> 00:06:22,389
with the application wide injector and

00:06:19,240 --> 00:06:25,630
that prepares those services then to be

00:06:22,389 --> 00:06:28,599
injected into any other code file or any

00:06:25,630 --> 00:06:33,610
other service that we have associated

00:06:28,599 --> 00:06:36,250
with our application next we have the

00:06:33,610 --> 00:06:37,960
imports array that one sometimes a

00:06:36,250 --> 00:06:41,380
little bit more difficult to figure out

00:06:37,960 --> 00:06:43,750
what all goes in there basically we want

00:06:41,380 --> 00:06:46,210
to pull in any angular modules such as

00:06:43,750 --> 00:06:49,090
any angular system pieces that we want

00:06:46,210 --> 00:06:51,400
to use we also want to specify any

00:06:49,090 --> 00:06:55,270
third-party modules that we want to use

00:06:51,400 --> 00:06:58,030
like material design or ng rx and then

00:06:55,270 --> 00:07:00,010
also any of our modules if we have other

00:06:58,030 --> 00:07:01,630
modules that we have functionality we

00:07:00,010 --> 00:07:04,479
want to use from a we'll see an example

00:07:01,630 --> 00:07:07,120
of that in a few minutes it's important

00:07:04,479 --> 00:07:10,360
to note however that there are two kinds

00:07:07,120 --> 00:07:13,740
of imports going on in angular that

00:07:10,360 --> 00:07:13,740
bottom one is what

00:07:14,060 --> 00:07:20,000
as our es2015 module syntax so with that

00:07:17,960 --> 00:07:23,780
bottom one we're pulling in something

00:07:20,000 --> 00:07:26,990
this is a class from a code file the top

00:07:23,780 --> 00:07:29,270
one then is our imports for our modules

00:07:26,990 --> 00:07:32,690
we're pulling in what our module needs

00:07:29,270 --> 00:07:34,010
so it's much more at the macro level the

00:07:32,690 --> 00:07:36,860
other thing that looks a little bit

00:07:34,010 --> 00:07:39,260
weird here is this last entry when we

00:07:36,860 --> 00:07:41,330
are importing router module work

00:07:39,260 --> 00:07:45,320
actually calling a method called for

00:07:41,330 --> 00:07:47,479
route and in that parenthesis that

00:07:45,320 --> 00:07:50,210
little dot dot dot there represents our

00:07:47,479 --> 00:07:53,300
routes so we're putting our routes in

00:07:50,210 --> 00:07:57,710
there and we're specifying then how our

00:07:53,300 --> 00:07:59,600
application routes look like it is not

00:07:57,710 --> 00:08:01,550
always though for route that we're going

00:07:59,600 --> 00:08:05,300
to call let's talk about that for a

00:08:01,550 --> 00:08:08,330
moment a simplified picture of a router

00:08:05,300 --> 00:08:13,400
of the router module module might look

00:08:08,330 --> 00:08:15,590
like this it declares several router

00:08:13,400 --> 00:08:18,260
directives like router outlet and router

00:08:15,590 --> 00:08:20,930
link you can see by the grey line there

00:08:18,260 --> 00:08:24,380
that it also exports them that's what

00:08:20,930 --> 00:08:27,950
makes those available to our other

00:08:24,380 --> 00:08:29,990
pieces in our angular module it also

00:08:27,950 --> 00:08:32,450
registers a service called the router

00:08:29,990 --> 00:08:34,520
service now it's really important when

00:08:32,450 --> 00:08:37,010
we register services that we only

00:08:34,520 --> 00:08:38,839
register them one time it's especially

00:08:37,010 --> 00:08:40,729
important with the router service

00:08:38,839 --> 00:08:43,729
because the router service works with

00:08:40,729 --> 00:08:45,770
our global location object from our

00:08:43,729 --> 00:08:48,530
browser so we really want to ensure we

00:08:45,770 --> 00:08:51,170
only have one of those so when we pull

00:08:48,530 --> 00:08:53,839
in router module the very first time we

00:08:51,170 --> 00:08:56,420
pull it in we use for root and what that

00:08:53,839 --> 00:08:59,510
does is it configures all of the routes

00:08:56,420 --> 00:09:02,060
we pass to it it provides us access to

00:08:59,510 --> 00:09:05,390
all of those router directives and it

00:09:02,060 --> 00:09:07,730
registers the router service if we need

00:09:05,390 --> 00:09:10,400
the router module in other angular

00:09:07,730 --> 00:09:13,880
modules that we're going to write we use

00:09:10,400 --> 00:09:17,270
for child instead and again we pass it a

00:09:13,880 --> 00:09:20,240
set of routes what the for child does is

00:09:17,270 --> 00:09:22,459
it will configure any of those routes

00:09:20,240 --> 00:09:25,580
that we pass to it it will give us

00:09:22,459 --> 00:09:26,880
access to those router directives but it

00:09:25,580 --> 00:09:29,400
will not read

00:09:26,880 --> 00:09:32,100
register that service so that's why we

00:09:29,400 --> 00:09:35,550
use for root only one time usually in

00:09:32,100 --> 00:09:38,400
our application module our app module

00:09:35,550 --> 00:09:41,940
and then we use for child for every

00:09:38,400 --> 00:09:43,770
other module that we create okay so

00:09:41,940 --> 00:09:45,900
going back to our picture we've talked

00:09:43,770 --> 00:09:46,830
about all of our arrays except for

00:09:45,900 --> 00:09:48,930
exports

00:09:46,830 --> 00:09:51,750
notice that our app module doesn't

00:09:48,930 --> 00:09:55,340
normally export anything but we can

00:09:51,750 --> 00:09:57,780
include in exports any modules our

00:09:55,340 --> 00:10:00,210
components are custom directives or

00:09:57,780 --> 00:10:03,120
custom pipes pretty much anything in our

00:10:00,210 --> 00:10:05,460
module we can export by exporting it

00:10:03,120 --> 00:10:07,860
then other modules can take advantage of

00:10:05,460 --> 00:10:08,990
using them and we'll see an example of

00:10:07,860 --> 00:10:12,540
that in a moment

00:10:08,990 --> 00:10:14,280
so as we're working we're building our

00:10:12,540 --> 00:10:16,860
application up we're adding more and

00:10:14,280 --> 00:10:18,930
more functionality at some point our

00:10:16,860 --> 00:10:21,300
arrays are start going to start to get

00:10:18,930 --> 00:10:23,280
really long now when we're building a

00:10:21,300 --> 00:10:26,850
method and it starts getting really long

00:10:23,280 --> 00:10:29,760
what do we do with it break it up thank

00:10:26,850 --> 00:10:31,680
you we break it up so the same thing it

00:10:29,760 --> 00:10:35,880
happens here we break up our angular

00:10:31,680 --> 00:10:37,500
module into multiple angular modules so

00:10:35,880 --> 00:10:38,970
notice in this example I've got all

00:10:37,500 --> 00:10:41,310
sorts of product stuff sort of

00:10:38,970 --> 00:10:43,560
intermingled with my application wide

00:10:41,310 --> 00:10:46,110
stuff like my page not found component

00:10:43,560 --> 00:10:50,100
so I'm going to pull that all out so

00:10:46,110 --> 00:10:51,690
it's a separate module here those are

00:10:50,100 --> 00:10:53,520
frequently referred to as feature

00:10:51,690 --> 00:10:55,590
modules you'll see them in the angular

00:10:53,520 --> 00:10:58,140
documentation referred to as feature

00:10:55,590 --> 00:11:00,030
modules because we've pulled out all of

00:10:58,140 --> 00:11:02,520
the stuff for a particular feature area

00:11:00,030 --> 00:11:04,980
into its own feature module mine's

00:11:02,520 --> 00:11:06,390
called product module okay there's a

00:11:04,980 --> 00:11:08,310
couple of things I want to talk about

00:11:06,390 --> 00:11:10,950
with this first of all is the product

00:11:08,310 --> 00:11:12,960
data service I pulled that into the

00:11:10,950 --> 00:11:14,700
product module because I like to keep

00:11:12,960 --> 00:11:17,520
all my product stuff together

00:11:14,700 --> 00:11:20,670
however since it is a service even

00:11:17,520 --> 00:11:22,560
though it's registered in the root in

00:11:20,670 --> 00:11:26,460
the product module rather the feature

00:11:22,560 --> 00:11:29,670
module it is still registered with the

00:11:26,460 --> 00:11:32,850
application wide injector okay because

00:11:29,670 --> 00:11:35,850
services are always a registered

00:11:32,850 --> 00:11:38,040
application wide so that means if I did

00:11:35,850 --> 00:11:39,040
have one of my welcome components or

00:11:38,040 --> 00:11:40,750
whatever

00:11:39,040 --> 00:11:43,329
that's that service it will be allowed

00:11:40,750 --> 00:11:45,759
to do so okay I probably shouldn't

00:11:43,329 --> 00:11:48,820
because it's the product data service

00:11:45,759 --> 00:11:50,440
but it won't stop me from doing that the

00:11:48,820 --> 00:11:52,570
other thing I wanted to mention is the

00:11:50,440 --> 00:11:56,680
new orange box up there at the top

00:11:52,570 --> 00:11:59,889
common module when I pulled in product

00:11:56,680 --> 00:12:02,050
module or when I separated out product

00:11:59,889 --> 00:12:04,540
module my product list and my product

00:12:02,050 --> 00:12:07,120
detail components still needs some of

00:12:04,540 --> 00:12:08,829
the capabilities in common module so

00:12:07,120 --> 00:12:12,160
what are some of those things product

00:12:08,829 --> 00:12:15,190
list has an ng-if and an NG for product

00:12:12,160 --> 00:12:18,459
detail has an NG F those are provided

00:12:15,190 --> 00:12:22,480
from common module now we also needed

00:12:18,459 --> 00:12:25,870
those in app module browser module not

00:12:22,480 --> 00:12:28,509
only makes it possible to do to make the

00:12:25,870 --> 00:12:32,980
application work in the browser but it

00:12:28,509 --> 00:12:35,259
also also exports common module so since

00:12:32,980 --> 00:12:37,509
it exports common module we also have

00:12:35,259 --> 00:12:40,269
access to all of the key directives like

00:12:37,509 --> 00:12:43,449
ng F and ng for an app module as well

00:12:40,269 --> 00:12:46,870
but normally we only import router a

00:12:43,449 --> 00:12:50,079
browser module in our angular app module

00:12:46,870 --> 00:12:51,870
and we use common module for all of our

00:12:50,079 --> 00:12:55,180
feature modules

00:12:51,870 --> 00:12:57,550
okay then you will notice those here

00:12:55,180 --> 00:13:02,019
we're using router module for route and

00:12:57,550 --> 00:13:04,269
router module for child now why do we

00:13:02,019 --> 00:13:07,870
need how do we know that we need forms

00:13:04,269 --> 00:13:10,899
module and HTTP module provided in these

00:13:07,870 --> 00:13:13,899
things well what we do is we look at our

00:13:10,899 --> 00:13:16,510
components and we look at what that they

00:13:13,899 --> 00:13:18,339
include what their templates include so

00:13:16,510 --> 00:13:20,889
since we knew that our product list

00:13:18,339 --> 00:13:23,680
template had an NG F and an NG 4 we knew

00:13:20,889 --> 00:13:25,990
we needed common module we know that it

00:13:23,680 --> 00:13:28,000
uses routing we know that it it

00:13:25,990 --> 00:13:29,680
navigates between the pieces with

00:13:28,000 --> 00:13:32,560
routing so we know we need the router

00:13:29,680 --> 00:13:34,329
module if you recall our product list

00:13:32,560 --> 00:13:36,579
page had that filter with two-way

00:13:34,329 --> 00:13:38,259
binding so that's how we know we need

00:13:36,579 --> 00:13:41,439
the forum's module because that's what's

00:13:38,259 --> 00:13:43,870
coming with binding and so on so you

00:13:41,439 --> 00:13:46,509
look at what's inside your components

00:13:43,870 --> 00:13:49,060
what it is that they need and that helps

00:13:46,509 --> 00:13:50,910
us determine what modules that we need

00:13:49,060 --> 00:13:54,060
to import into our imports

00:13:50,910 --> 00:13:57,420
eh okay so we're working along we're

00:13:54,060 --> 00:14:00,960
adding our user features and we add

00:13:57,420 --> 00:14:03,060
maybe a customer module and we add an

00:14:00,960 --> 00:14:06,240
invoicing module so we keep adding these

00:14:03,060 --> 00:14:07,320
modules so here is our user module for

00:14:06,240 --> 00:14:09,750
example we're going to have a login

00:14:07,320 --> 00:14:11,940
component and we're going to find as we

00:14:09,750 --> 00:14:14,760
add more and more modules that there are

00:14:11,940 --> 00:14:16,560
similar things that I start up here that

00:14:14,760 --> 00:14:19,050
we're importing into each one of them

00:14:16,560 --> 00:14:21,180
almost every feature module that we

00:14:19,050 --> 00:14:23,700
create needs common module because just

00:14:21,180 --> 00:14:27,690
about every template that we create uses

00:14:23,700 --> 00:14:29,400
ng F or ng for we frequently need forms

00:14:27,690 --> 00:14:32,010
module if we're going to do any kind of

00:14:29,400 --> 00:14:34,140
two-way binding and maybe for our

00:14:32,010 --> 00:14:35,910
particular application we like for our

00:14:34,140 --> 00:14:38,070
users to be able to rate all sorts of

00:14:35,910 --> 00:14:40,680
stuff so we want our star component

00:14:38,070 --> 00:14:43,560
showing the star ratings for those so

00:14:40,680 --> 00:14:46,050
what we want to do is reuse all of those

00:14:43,560 --> 00:14:47,700
pieces but it's kind of a pain to have

00:14:46,050 --> 00:14:51,450
to keep pulling them in every single

00:14:47,700 --> 00:14:54,690
time what we can do instead is we can do

00:14:51,450 --> 00:14:59,370
a shared module and what a shared module

00:14:54,690 --> 00:15:02,220
does is it allows us to combine what we

00:14:59,370 --> 00:15:04,260
want to share what the outside world so

00:15:02,220 --> 00:15:07,110
here I've put common module forms module

00:15:04,260 --> 00:15:09,690
and star component now product module

00:15:07,110 --> 00:15:12,090
only needs to import shared module and

00:15:09,690 --> 00:15:14,160
it gets everything that's in it so it

00:15:12,090 --> 00:15:17,430
lets me kind of bundle up stuff and

00:15:14,160 --> 00:15:19,260
import it with one Imports instead of

00:15:17,430 --> 00:15:21,690
having to import multiple things and

00:15:19,260 --> 00:15:23,940
declare multiple things and so on so

00:15:21,690 --> 00:15:25,860
it's sort of a shortcut so here's what

00:15:23,940 --> 00:15:27,780
the code looks like so here's our app

00:15:25,860 --> 00:15:30,630
module and it pulls in all the things

00:15:27,780 --> 00:15:33,300
including product module and here's our

00:15:30,630 --> 00:15:35,850
future module and you can see how short

00:15:33,300 --> 00:15:38,250
that that code is because we were able

00:15:35,850 --> 00:15:41,010
to import shared module we did not have

00:15:38,250 --> 00:15:44,010
to separately import forms module or

00:15:41,010 --> 00:15:47,730
separately import common module or even

00:15:44,010 --> 00:15:49,560
declare our star component they were all

00:15:47,730 --> 00:15:52,140
pulled in and are available to our

00:15:49,560 --> 00:15:54,900
templates because we imported shared

00:15:52,140 --> 00:15:57,270
module and there's what our shared

00:15:54,900 --> 00:15:59,340
module looks like so here's an example

00:15:57,270 --> 00:16:01,800
of where we're going to use the exports

00:15:59,340 --> 00:16:03,900
we're exporting those pieces so that

00:16:01,800 --> 00:16:04,470
anything that imports the shared module

00:16:03,900 --> 00:16:08,790
can use

00:16:04,470 --> 00:16:11,070
some cave so angular modules organize

00:16:08,790 --> 00:16:13,320
the pieces of our application they

00:16:11,070 --> 00:16:15,090
extend our application with capabilities

00:16:13,320 --> 00:16:17,550
from external libraries that's what that

00:16:15,090 --> 00:16:20,340
imports array is doing they provide a

00:16:17,550 --> 00:16:22,980
template resolution environment well

00:16:20,340 --> 00:16:25,890
what does that mean well our templates

00:16:22,980 --> 00:16:28,380
include things like directives ng 4 ng F

00:16:25,890 --> 00:16:32,190
they include nested components and so on

00:16:28,380 --> 00:16:34,260
so the template is being processed by

00:16:32,190 --> 00:16:35,790
angular and angular finds a directive in

00:16:34,260 --> 00:16:38,130
there and goes I don't know what this is

00:16:35,790 --> 00:16:39,720
module do you know what this is the

00:16:38,130 --> 00:16:41,400
module sure I know what that is and it

00:16:39,720 --> 00:16:44,040
gives it to our template and it can

00:16:41,400 --> 00:16:45,930
continue on if the module doesn't know

00:16:44,040 --> 00:16:48,780
what it is by way of an import or a

00:16:45,930 --> 00:16:51,270
declaration then we get an error okay so

00:16:48,780 --> 00:16:54,390
our module is what's defining what our

00:16:51,270 --> 00:16:56,910
template can access we can also use

00:16:54,390 --> 00:16:58,890
modules to aggregate and re-export like

00:16:56,910 --> 00:17:01,080
what we just saw with that shared module

00:16:58,890 --> 00:17:03,240
we can also take that whole shared

00:17:01,080 --> 00:17:05,460
module concept a step further and

00:17:03,240 --> 00:17:07,860
provide configuration for the compiler

00:17:05,460 --> 00:17:10,560
that encapsulates functionality that can

00:17:07,860 --> 00:17:12,000
be consumed in any app that's a lot of

00:17:10,560 --> 00:17:14,700
words meaning that we can create

00:17:12,000 --> 00:17:18,330
libraries so we can create libraries

00:17:14,700 --> 00:17:20,910
like material design that can be put up

00:17:18,330 --> 00:17:23,010
on NPM and someone can just NPM down

00:17:20,910 --> 00:17:25,770
that one thing and get all of the access

00:17:23,010 --> 00:17:28,470
to all of its features without having to

00:17:25,770 --> 00:17:30,420
pull down its services and constants for

00:17:28,470 --> 00:17:32,940
its directives and all these different

00:17:30,420 --> 00:17:36,390
parts we can with modules we can pull

00:17:32,940 --> 00:17:38,460
down one thing modules then can be

00:17:36,390 --> 00:17:42,330
loaded eagerly when the application is

00:17:38,460 --> 00:17:45,210
loaded or lazy loaded let's talk for a

00:17:42,330 --> 00:17:50,220
moment about lazy loading whoo I love

00:17:45,210 --> 00:17:53,540
that guy any pretty I wanted a picture

00:17:50,220 --> 00:17:57,030
that represents lazy but fast right

00:17:53,540 --> 00:17:59,730
because this isn't that whole idea of

00:17:57,030 --> 00:18:02,310
lazy loading is that it's improving the

00:17:59,730 --> 00:18:05,250
performance of our application right so

00:18:02,310 --> 00:18:07,230
we have our application sitting in one

00:18:05,250 --> 00:18:09,900
big bundle up there on the internet

00:18:07,230 --> 00:18:11,910
somewhere the user types in the URL to

00:18:09,900 --> 00:18:13,890
your app it has to bring that whole

00:18:11,910 --> 00:18:15,720
thing down off the wire and compile it

00:18:13,890 --> 00:18:17,420
and finally brings up that first

00:18:15,720 --> 00:18:19,280
template so there's quite a bit of

00:18:17,420 --> 00:18:20,990
time between the time that the user said

00:18:19,280 --> 00:18:23,960
hey I want your app and that first

00:18:20,990 --> 00:18:27,050
template that displays with lazy loading

00:18:23,960 --> 00:18:29,300
we break out bundle so that first little

00:18:27,050 --> 00:18:32,630
bundle that comes down as smaller moves

00:18:29,300 --> 00:18:34,700
faster down that pipe and then can

00:18:32,630 --> 00:18:37,670
display that first template so much more

00:18:34,700 --> 00:18:41,780
quickly okay so the first time I use

00:18:37,670 --> 00:18:43,790
lazy loading I followed the instructions

00:18:41,780 --> 00:18:47,630
of how to do lazy loading and it just

00:18:43,790 --> 00:18:51,410
didn't work and nicely my friend Brandon

00:18:47,630 --> 00:18:53,090
helped me tremendously to actually make

00:18:51,410 --> 00:18:54,560
it work and the problem was that I

00:18:53,090 --> 00:18:57,260
didn't know that there are three things

00:18:54,560 --> 00:18:59,540
that you have to do first before your

00:18:57,260 --> 00:19:01,160
lazy loading is ever going to work first

00:18:59,540 --> 00:19:03,140
of all is you have to have feature

00:19:01,160 --> 00:19:05,570
modules because if you don't have

00:19:03,140 --> 00:19:07,970
feature modules there's nothing to lazy

00:19:05,570 --> 00:19:09,860
load lazy loading is based at the module

00:19:07,970 --> 00:19:11,870
level you can't lazy load a service or a

00:19:09,860 --> 00:19:13,940
component you have to lazy load an

00:19:11,870 --> 00:19:15,800
entire module and you can't lose you

00:19:13,940 --> 00:19:17,270
load your app module because it has to

00:19:15,800 --> 00:19:18,730
be the thing that comes down so you have

00:19:17,270 --> 00:19:22,840
to have some other modules

00:19:18,730 --> 00:19:27,470
second of all you need to have your

00:19:22,840 --> 00:19:29,990
routes grouped under a single component

00:19:27,470 --> 00:19:32,300
list parent route so you notice that I

00:19:29,990 --> 00:19:34,610
have this main path for all my product

00:19:32,300 --> 00:19:37,850
routes called products and it's the same

00:19:34,610 --> 00:19:40,610
name the same base name for all of our

00:19:37,850 --> 00:19:42,770
paths there and then every other route

00:19:40,610 --> 00:19:45,140
so my product list component is an empty

00:19:42,770 --> 00:19:47,900
path so it'll go with just slash

00:19:45,140 --> 00:19:51,320
products and product detail is product /

00:19:47,900 --> 00:19:52,910
: ID and then product edit I added an

00:19:51,320 --> 00:19:55,940
edit feature on there to have one more

00:19:52,910 --> 00:19:58,250
here and so on so what we're going to do

00:19:55,940 --> 00:19:59,900
when we lays lazy load is we first need

00:19:58,250 --> 00:20:03,740
to set this up so that these are

00:19:59,900 --> 00:20:05,360
children of a single route then we're

00:20:03,740 --> 00:20:07,550
going to take those two statements that

00:20:05,360 --> 00:20:09,730
path and that children property out and

00:20:07,550 --> 00:20:12,770
we're going to put them somewhere else

00:20:09,730 --> 00:20:14,630
those are considered a component list

00:20:12,770 --> 00:20:16,820
parent route because it doesn't have a

00:20:14,630 --> 00:20:18,800
component associated with it the

00:20:16,820 --> 00:20:21,830
component is always associated with the

00:20:18,800 --> 00:20:24,380
children instead and lastly we need to

00:20:21,830 --> 00:20:26,780
not import the module into any other

00:20:24,380 --> 00:20:29,480
module so right now we're importing

00:20:26,780 --> 00:20:31,309
product module in we need to remove that

00:20:29,480 --> 00:20:33,679
because otherwise when we bring down our

00:20:31,309 --> 00:20:35,750
app module it's going to say oh I need

00:20:33,679 --> 00:20:37,880
product module and pull it with it which

00:20:35,750 --> 00:20:40,040
comments defeats the entire point of

00:20:37,880 --> 00:20:42,290
lazy loading so we need to make sure

00:20:40,040 --> 00:20:45,200
that before we do what John Papa said

00:20:42,290 --> 00:20:47,179
that we do these three things first then

00:20:45,200 --> 00:20:50,179
we can do and this is the same syntax

00:20:47,179 --> 00:20:52,730
that John showed we specify our past so

00:20:50,179 --> 00:20:56,660
this is that path that we had we move it

00:20:52,730 --> 00:20:59,210
from our our feature module and add it

00:20:56,660 --> 00:21:01,610
into a module that is already loaded so

00:20:59,210 --> 00:21:04,130
here we are at module and then we

00:21:01,610 --> 00:21:08,450
specify load children giving it the full

00:21:04,130 --> 00:21:12,799
path to our module a hash and the name

00:21:08,450 --> 00:21:14,690
of the module class so we exported class

00:21:12,799 --> 00:21:19,250
product modules so that's what we put

00:21:14,690 --> 00:21:22,220
there a product module okay with that we

00:21:19,250 --> 00:21:25,250
talked about es2015 modules angular

00:21:22,220 --> 00:21:26,570
modules and lazy loading thank you all

00:21:25,250 --> 00:21:34,359
so very much

00:21:26,570 --> 00:21:34,359

YouTube URL: https://www.youtube.com/watch?v=ntJ-P-Cvo7o


