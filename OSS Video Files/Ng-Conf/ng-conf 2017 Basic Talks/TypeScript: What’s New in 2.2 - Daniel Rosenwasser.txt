Title: TypeScript: Whatâ€™s New in 2.2 - Daniel Rosenwasser
Publication date: 2017-04-30
Playlist: ng-conf 2017 Basic Talks
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,530 --> 00:00:04,160
my name is daniel rossen wowser I'm the

00:00:02,840 --> 00:00:06,770
program manager on the typescript team

00:00:04,160 --> 00:00:07,850
at Microsoft and today I want to talk to

00:00:06,770 --> 00:00:11,000
you a little bit about what's new

00:00:07,850 --> 00:00:15,530
texture 2.2 and what's coming out with

00:00:11,000 --> 00:00:17,810
types of 2.3 and I'll talk about that in

00:00:15,530 --> 00:00:19,160
just a minute as well so what I kind of

00:00:17,810 --> 00:00:20,930
want to do is just think about for a

00:00:19,160 --> 00:00:24,439
moment what's changed within a year

00:00:20,930 --> 00:00:27,890
right let's look back me coming here to

00:00:24,439 --> 00:00:30,320
ng cons again this year has been a kind

00:00:27,890 --> 00:00:32,350
of dramatically different feel I've just

00:00:30,320 --> 00:00:34,520
gotten a different sense from people

00:00:32,350 --> 00:00:36,680
primarily that just that people see

00:00:34,520 --> 00:00:38,360
typescript differently now when I was

00:00:36,680 --> 00:00:40,399
here last year a lot of people were a

00:00:38,360 --> 00:00:42,770
little bit uneasy you know people were

00:00:40,399 --> 00:00:44,570
still not quite used to the idea of

00:00:42,770 --> 00:00:48,320
using typescript as the primary language

00:00:44,570 --> 00:00:49,520
and writing angular apps and and so this

00:00:48,320 --> 00:00:52,010
was something that people kind of

00:00:49,520 --> 00:00:54,590
thought of as a turn-off when thinking

00:00:52,010 --> 00:00:56,390
about angular I think things are

00:00:54,590 --> 00:00:58,699
starting to change a little bit nowadays

00:00:56,390 --> 00:01:00,980
I hear it more as an opportunity the

00:00:58,699 --> 00:01:03,260
idea of using angular is up you know

00:01:00,980 --> 00:01:06,439
it's a plus that you get to you type

00:01:03,260 --> 00:01:08,330
trip in that respect and so you start to

00:01:06,439 --> 00:01:09,710
see this more and more if you just kind

00:01:08,330 --> 00:01:10,850
of look at the adoption charts and

00:01:09,710 --> 00:01:13,640
whatnot

00:01:10,850 --> 00:01:16,729
and more so than just adoption what's

00:01:13,640 --> 00:01:20,810
something that really spoke to me is the

00:01:16,729 --> 00:01:22,580
recent Stack Overflow survey if we look

00:01:20,810 --> 00:01:24,200
at the recent Stack Overflow survey

00:01:22,580 --> 00:01:27,350
results we see a couple of really

00:01:24,200 --> 00:01:29,659
amazing things type ship reached the

00:01:27,350 --> 00:01:32,090
ninth most popular language on Stack

00:01:29,659 --> 00:01:33,979
Overflow through through its survey this

00:01:32,090 --> 00:01:37,159
is a head of things like ruby and swift

00:01:33,979 --> 00:01:38,630
and this is actually incredible because

00:01:37,159 --> 00:01:41,360
this is not even just in the category of

00:01:38,630 --> 00:01:45,170
web programming languages right if you

00:01:41,360 --> 00:01:49,369
do dive into web development languages

00:01:45,170 --> 00:01:52,159
types it reaches number seven and not

00:01:49,369 --> 00:01:56,119
just that it's the sixth most wanted

00:01:52,159 --> 00:01:58,880
language on the survey and that's not it

00:01:56,119 --> 00:02:03,880
right it's also the third most loved

00:01:58,880 --> 00:02:08,380
language on the survey yeah

00:02:03,880 --> 00:02:10,569
I think that's incredible because

00:02:08,380 --> 00:02:13,120
there's a saying right the creator of

00:02:10,569 --> 00:02:15,730
C++ I believe is credited with this

00:02:13,120 --> 00:02:17,590
there's a paraphrase that there's two

00:02:15,730 --> 00:02:19,810
languages two types of languages in the

00:02:17,590 --> 00:02:23,680
world those that people like to complain

00:02:19,810 --> 00:02:27,760
about and those that people use or don't

00:02:23,680 --> 00:02:29,560
use shocks I messed that one up two

00:02:27,760 --> 00:02:31,360
types of languages those that people

00:02:29,560 --> 00:02:34,420
like to complain about and those that

00:02:31,360 --> 00:02:39,370
people don't use right and somehow type

00:02:34,420 --> 00:02:41,680
ships is you know love and use most

00:02:39,370 --> 00:02:42,970
wanted and most loves and does I think

00:02:41,680 --> 00:02:44,709
that's pretty incredible and that's

00:02:42,970 --> 00:02:47,769
something that I don't know if we could

00:02:44,709 --> 00:02:49,090
have gotten this far with without the

00:02:47,769 --> 00:02:51,190
help of the angular team and those

00:02:49,090 --> 00:02:53,019
working at Google and whatnot helping us

00:02:51,190 --> 00:02:55,150
out and really championing the language

00:02:53,019 --> 00:02:57,130
and the angular community itself so

00:02:55,150 --> 00:03:02,620
thank you all very much for helping us

00:02:57,130 --> 00:03:05,200
get to this point so what have we

00:03:02,620 --> 00:03:08,250
released in the last year well we've had

00:03:05,200 --> 00:03:11,590
types of 2.0 2.1 2.2

00:03:08,250 --> 00:03:19,950
that's actually a typo let me change

00:03:11,590 --> 00:03:19,950
that up oops ah not quite yet guys

00:03:21,330 --> 00:03:29,250
a little spoiler alert so the thing I

00:03:27,300 --> 00:03:31,550
want to talk about is the duration that

00:03:29,250 --> 00:03:34,470
it takes for each of these to come out

00:03:31,550 --> 00:03:36,380
with type 2 2.0 it took about 7 months

00:03:34,470 --> 00:03:41,070
for us to get that thing out of the door

00:03:36,380 --> 00:03:42,540
and you know that that was something

00:03:41,070 --> 00:03:44,010
where we really wanted to give the best

00:03:42,540 --> 00:03:45,240
experience to all of our users we wanted

00:03:44,010 --> 00:03:46,740
to get everything on the door we wanted

00:03:45,240 --> 00:03:50,400
to get async/await down level at the

00:03:46,740 --> 00:03:51,840
door um and after that point we realized

00:03:50,400 --> 00:03:54,150
you know this is this is not the

00:03:51,840 --> 00:03:56,520
approach for how we want type trip to

00:03:54,150 --> 00:03:59,760
iterate on it works for some teams but

00:03:56,520 --> 00:04:01,350
given the demands of our user base we

00:03:59,760 --> 00:04:02,790
wanted to iterate more quickly we wanted

00:04:01,350 --> 00:04:05,820
to have a more regular release schedule

00:04:02,790 --> 00:04:08,340
things are not consistent so instead

00:04:05,820 --> 00:04:09,840
shipped 2.1 and 2.2 we kind of got it

00:04:08,340 --> 00:04:13,560
down to two and a half once that's our

00:04:09,840 --> 00:04:14,610
regularly cycle and going forward we're

00:04:13,560 --> 00:04:16,830
actually going with the new release

00:04:14,610 --> 00:04:18,660
cadence so going forward we're actually

00:04:16,830 --> 00:04:21,959
going to be releasing every two months

00:04:18,660 --> 00:04:23,730
and in-between of those two months we're

00:04:21,959 --> 00:04:26,220
going to have a patch release as well so

00:04:23,730 --> 00:04:28,350
something like I think bug fixes think

00:04:26,220 --> 00:04:30,480
like little things that help the villa's

00:04:28,350 --> 00:04:32,700
code experience occasionally but you'll

00:04:30,480 --> 00:04:34,860
get a you know big feature full release

00:04:32,700 --> 00:04:36,750
every two months and what this means is

00:04:34,860 --> 00:04:38,130
that you can think you can you can think

00:04:36,750 --> 00:04:39,870
of test release schedule as a more

00:04:38,130 --> 00:04:41,010
predictable kind of train right you

00:04:39,870 --> 00:04:43,620
actually know when things are going to

00:04:41,010 --> 00:04:44,970
be coming you know how to understand

00:04:43,620 --> 00:04:47,070
what's going to be going out the

00:04:44,970 --> 00:04:48,990
pipeline and also that means that

00:04:47,070 --> 00:04:50,940
certain features aren't gated on other

00:04:48,990 --> 00:04:52,800
things right if you nee if we have a

00:04:50,940 --> 00:04:54,240
really big feature we're working on that

00:04:52,800 --> 00:04:56,340
doesn't mean that smaller things that

00:04:54,240 --> 00:04:59,280
are also important can't go out the door

00:04:56,340 --> 00:05:01,080
so we think that this is this has been a

00:04:59,280 --> 00:05:02,520
great experience and one of the great

00:05:01,080 --> 00:05:04,590
parts about this is that because you'll

00:05:02,520 --> 00:05:06,180
get this rapid release cycle you'll

00:05:04,590 --> 00:05:07,229
never really have the opportunity to say

00:05:06,180 --> 00:05:09,030
what is types we've done for me lately

00:05:07,229 --> 00:05:12,060
because you'll kind of always have this

00:05:09,030 --> 00:05:14,870
reminder every few months that hey

00:05:12,060 --> 00:05:17,160
here's a new release of touch strip um

00:05:14,870 --> 00:05:19,590
but you know since I already asked the

00:05:17,160 --> 00:05:22,830
question what has types are done for me

00:05:19,590 --> 00:05:25,860
lately right uh the tool was a while

00:05:22,830 --> 00:05:27,660
back and it got a lot of attention but I

00:05:25,860 --> 00:05:30,150
want to focus starting with two point

00:05:27,660 --> 00:05:32,010
one so with two point one section two

00:05:30,150 --> 00:05:33,840
point one we actually really beefed up

00:05:32,010 --> 00:05:35,880
the type system a lot I think

00:05:33,840 --> 00:05:37,919
was a fairly large release in its own

00:05:35,880 --> 00:05:40,050
right we brought down level async/await

00:05:37,919 --> 00:05:41,580
we brought a lot of new operators that

00:05:40,050 --> 00:05:43,770
helped model different frameworks and

00:05:41,580 --> 00:05:45,960
libraries as well as actually create a

00:05:43,770 --> 00:05:48,120
more expressive type system that could

00:05:45,960 --> 00:05:50,910
be used for different metadata meta

00:05:48,120 --> 00:05:54,210
programming types of tasks and whatnot

00:05:50,910 --> 00:05:57,870
and that's that's the key of and map

00:05:54,210 --> 00:05:59,880
type feature right there we also brought

00:05:57,870 --> 00:06:01,020
object for us and spread and so two

00:05:59,880 --> 00:06:03,780
point one was one of my favorite

00:06:01,020 --> 00:06:07,080
releases and that's not to say that two

00:06:03,780 --> 00:06:08,340
point two wasn't also impactful so when

00:06:07,080 --> 00:06:10,350
we looked at what we were going to do

00:06:08,340 --> 00:06:11,850
for two point two we heard a lot of

00:06:10,350 --> 00:06:13,770
different things from different reports

00:06:11,850 --> 00:06:15,750
parts of the spectrum right we heard

00:06:13,770 --> 00:06:17,100
from users outside of the existing types

00:06:15,750 --> 00:06:18,810
of community outside the existing

00:06:17,100 --> 00:06:19,919
angular community saying we want to be

00:06:18,810 --> 00:06:22,350
able to use typescript but we're not

00:06:19,919 --> 00:06:24,960
able to just because the parrot the text

00:06:22,350 --> 00:06:27,360
system isn't quite powerful enough and

00:06:24,960 --> 00:06:29,460
then we heard a lot of people from the

00:06:27,360 --> 00:06:32,340
angular community saying hey we really

00:06:29,460 --> 00:06:34,110
you know things are you know pretty good

00:06:32,340 --> 00:06:35,610
but we really want a higher level of

00:06:34,110 --> 00:06:40,650
tooling right we know that you can do

00:06:35,610 --> 00:06:42,900
better here so with typescript 2.2 we

00:06:40,650 --> 00:06:45,270
kind of focused on both of these and the

00:06:42,900 --> 00:06:49,020
great part is that these the entire

00:06:45,270 --> 00:06:50,490
release actually impacted people on you

00:06:49,020 --> 00:06:52,169
know inside and outside of the existing

00:06:50,490 --> 00:06:54,270
tension community so for instance we

00:06:52,169 --> 00:06:57,330
have this mixin style pattern that we

00:06:54,270 --> 00:07:00,780
started supporting and we primarily do

00:06:57,330 --> 00:07:03,419
this for outside users folks like ember

00:07:00,780 --> 00:07:04,860
and polymer and whatnot but it turned

00:07:03,419 --> 00:07:07,770
out that this was actually helpful for

00:07:04,860 --> 00:07:08,789
the angular material team as well and I

00:07:07,770 --> 00:07:09,870
spoke to them a little bit ago and

00:07:08,789 --> 00:07:12,930
they're taking advantage of it now too

00:07:09,870 --> 00:07:14,580
so speaking inside and outside the

00:07:12,930 --> 00:07:16,830
community is actually really great for

00:07:14,580 --> 00:07:19,560
us to show up a little bit of the

00:07:16,830 --> 00:07:25,080
tooling that we have I want to show you

00:07:19,560 --> 00:07:28,880
a quick sample here so I have a shaped

00:07:25,080 --> 00:07:32,250
es file so this is an abstract class

00:07:28,880 --> 00:07:34,860
it's called shape it has a good area of

00:07:32,250 --> 00:07:37,169
method on it and that's abstract so the

00:07:34,860 --> 00:07:41,190
idea is that anyone any class that

00:07:37,169 --> 00:07:43,349
actually extends shape needs to actually

00:07:41,190 --> 00:07:46,110
implement get area or itself has to be

00:07:43,349 --> 00:07:47,490
abstract as well so if we take a look at

00:07:46,110 --> 00:07:49,259
circles that's yes

00:07:47,490 --> 00:07:50,819
well we don't have anything yet but we

00:07:49,259 --> 00:07:53,580
can start scaffolding it out right and

00:07:50,819 --> 00:07:56,910
so I can start writing class circle

00:07:53,580 --> 00:07:59,099
extends shapes and then I get a red

00:07:56,910 --> 00:08:01,440
squiggly but I also get a light bulb if

00:07:59,099 --> 00:08:03,840
I go over that red twig Li and right now

00:08:01,440 --> 00:08:06,900
I get the option to import shape from

00:08:03,840 --> 00:08:12,479
shape by the way can everyone see this

00:08:06,900 --> 00:08:13,590
everyone good in the back okay great but

00:08:12,479 --> 00:08:15,389
then I still have this other red

00:08:13,590 --> 00:08:17,160
squiggly and so I get a no light bulb

00:08:15,389 --> 00:08:18,990
and I can actually select that it gives

00:08:17,160 --> 00:08:22,020
me the option to implement the abstract

00:08:18,990 --> 00:08:23,880
class so I get a scaffolded mess method

00:08:22,020 --> 00:08:27,780
right there so I want to start writing

00:08:23,880 --> 00:08:30,360
my constructor and all of a sudden I get

00:08:27,780 --> 00:08:33,719
a quick fix which asks me if I want to

00:08:30,360 --> 00:08:34,950
add the super call and I do and I was

00:08:33,719 --> 00:08:36,750
going to forget to do that anyway so

00:08:34,950 --> 00:08:38,909
it's good that the tool actually gave me

00:08:36,750 --> 00:08:43,409
that option so what I'll do now is I'll

00:08:38,909 --> 00:08:46,920
take a radius for my circle I can say

00:08:43,409 --> 00:08:48,450
this dot radius equals radius and all of

00:08:46,920 --> 00:08:52,110
a sudden I forgot to actually declare

00:08:48,450 --> 00:08:54,390
the property finally we can actually

00:08:52,110 --> 00:08:57,570
implement get area right so we can say

00:08:54,390 --> 00:09:01,020
for sure math dot pi times radius

00:08:57,570 --> 00:09:03,240
squared oops I'm using the

00:09:01,020 --> 00:09:05,220
exponentiation operator for meknes crypt

00:09:03,240 --> 00:09:07,500
but I still have one last error and

00:09:05,220 --> 00:09:11,520
turns out I forgot to write this dot on

00:09:07,500 --> 00:09:13,140
my radius property so at this level

00:09:11,520 --> 00:09:15,089
tightrope gives you the sort of

00:09:13,140 --> 00:09:17,310
completion and tooling that almost

00:09:15,089 --> 00:09:19,709
writes your code for you and so you

00:09:17,310 --> 00:09:21,149
might a lot of people I speak to also

00:09:19,709 --> 00:09:22,950
say well you know I love I love

00:09:21,149 --> 00:09:24,930
typescript but I feel like it's often

00:09:22,950 --> 00:09:27,390
pushes me to and more oh oh pattern and

00:09:24,930 --> 00:09:29,339
I don't think that's the case typescript

00:09:27,390 --> 00:09:32,310
tries to accommodate all coding patterns

00:09:29,339 --> 00:09:33,720
as you like and so if you like

00:09:32,310 --> 00:09:35,550
object-oriented programming type shape

00:09:33,720 --> 00:09:42,209
is great for that but we could write our

00:09:35,550 --> 00:09:44,010
circle and shape kind of types as in a

00:09:42,209 --> 00:09:46,490
in a more functional file

00:09:44,010 --> 00:09:49,320
really so let's actually try that out

00:09:46,490 --> 00:09:53,550
I'm going to create a circle type I'm

00:09:49,320 --> 00:09:56,459
going to create a square type and then

00:09:53,550 --> 00:09:58,000
for a circle I might have a radius or I

00:09:56,459 --> 00:10:01,500
will have the radius

00:09:58,000 --> 00:10:05,230
and for my squirrel I'll have a side leg

00:10:01,500 --> 00:10:09,430
and I want to start writing my getaria

00:10:05,230 --> 00:10:11,710
function which will take a shape having

00:10:09,430 --> 00:10:17,140
defined shape yet but I'll say that a

00:10:11,710 --> 00:10:19,930
shape is a circle or a square this is

00:10:17,140 --> 00:10:22,000
actually a kind of you know major

00:10:19,930 --> 00:10:23,500
difference between the styles of OO and

00:10:22,000 --> 00:10:26,200
functional programming where you might

00:10:23,500 --> 00:10:29,560
have an open type right you might have

00:10:26,200 --> 00:10:31,930
the shapes base class which is open to

00:10:29,560 --> 00:10:34,500
extension or you might have shape as a

00:10:31,930 --> 00:10:37,420
closed set of types a circle or a square

00:10:34,500 --> 00:10:38,350
so we want to want to start we want you

00:10:37,420 --> 00:10:40,240
want to be able to differentiate between

00:10:38,350 --> 00:10:43,450
a circle and a square so what it will do

00:10:40,240 --> 00:10:48,820
is we'll have a kind we'll say it sixth

00:10:43,450 --> 00:10:51,700
ring so the idea is that if I ever have

00:10:48,820 --> 00:10:53,050
a kind of circle you know the string

00:10:51,700 --> 00:10:57,850
circle I'll actually have a circle so I

00:10:53,050 --> 00:11:03,339
can do a switch on shape dot kind and I

00:10:57,850 --> 00:11:09,250
can do case circle and I can return math

00:11:03,339 --> 00:11:10,900
dot pi times shape dot and now I realize

00:11:09,250 --> 00:11:13,000
I actually don't have radius available

00:11:10,900 --> 00:11:14,560
to me and the problem is that we don't

00:11:13,000 --> 00:11:16,660
actually know for certain that we have a

00:11:14,560 --> 00:11:19,510
circle rather we know for certain but

00:11:16,660 --> 00:11:21,339
the type system doesn't and this is

00:11:19,510 --> 00:11:22,930
actually a good thing because what we

00:11:21,339 --> 00:11:24,670
want to do is we want to have the tech

00:11:22,930 --> 00:11:26,680
system understand our understanding of

00:11:24,670 --> 00:11:28,810
the program as well we want to we want

00:11:26,680 --> 00:11:30,880
to synchronize our understanding with

00:11:28,810 --> 00:11:32,950
the type system itself so we can do is

00:11:30,880 --> 00:11:35,350
we can say that a circle always has a

00:11:32,950 --> 00:11:37,420
string literal type we can say that the

00:11:35,350 --> 00:11:39,790
kind is always going to be the string

00:11:37,420 --> 00:11:42,130
circle and we can say that first square

00:11:39,790 --> 00:11:45,700
a kind the kind field is always going to

00:11:42,130 --> 00:11:47,740
contain a string square and all of a

00:11:45,700 --> 00:11:51,220
sudden if I dot off of this thing I

00:11:47,740 --> 00:11:54,250
actually do get the radius and I can

00:11:51,220 --> 00:11:56,589
square that and more than that I can

00:11:54,250 --> 00:11:58,630
also get completion in here so now in

00:11:56,589 --> 00:12:00,400
might which case block I actually get

00:11:58,630 --> 00:12:04,480
completion for both circle and square

00:12:00,400 --> 00:12:06,459
the strings so we actually support a

00:12:04,480 --> 00:12:08,680
more functional style of writing code as

00:12:06,459 --> 00:12:10,360
well the idea is that texture should

00:12:08,680 --> 00:12:11,590
support the patterns that you know and

00:12:10,360 --> 00:12:14,529
love in JavaScript today

00:12:11,590 --> 00:12:16,480
so I hope that gives you kind of an idea

00:12:14,529 --> 00:12:17,740
of what we've been working on and the

00:12:16,480 --> 00:12:24,690
sort of things that we try to support

00:12:17,740 --> 00:12:24,690
inside and outside of the community for

00:12:26,670 --> 00:12:34,210
what's coming in touch up 2.3 there's a

00:12:30,490 --> 00:12:36,250
lot of great stuff and I'm very happy to

00:12:34,210 --> 00:12:37,330
talk about all of it I can only cover

00:12:36,250 --> 00:12:40,510
some of it because of the time

00:12:37,330 --> 00:12:42,360
constraints that we have so one big

00:12:40,510 --> 00:12:44,890
thing is language service extensibility

00:12:42,360 --> 00:12:46,420
and that is something that we've been

00:12:44,890 --> 00:12:48,070
working hard with the angular team on

00:12:46,420 --> 00:12:50,040
and I think that you should all check

00:12:48,070 --> 00:12:52,089
chuck's talk out tomorrow about this

00:12:50,040 --> 00:12:53,800
this is going to be the stuff that

00:12:52,089 --> 00:12:56,110
really makes the editing experience in

00:12:53,800 --> 00:12:57,610
templates amazing for using typescript

00:12:56,110 --> 00:12:59,620
and angular together

00:12:57,610 --> 00:13:00,540
so definitely check that talk out if you

00:12:59,620 --> 00:13:03,370
can

00:13:00,540 --> 00:13:05,320
more than that we also have a bunch of

00:13:03,370 --> 00:13:06,790
new language features and a lot of stuff

00:13:05,320 --> 00:13:11,410
that we've we've done to actually try to

00:13:06,790 --> 00:13:12,970
make it easier to transition so one

00:13:11,410 --> 00:13:15,730
thing I'd like to talk about is true

00:13:12,970 --> 00:13:18,070
iterable support so iterators and

00:13:15,730 --> 00:13:20,680
generators when we think that was

00:13:18,070 --> 00:13:23,170
textured 2.1 we released downlevel async

00:13:20,680 --> 00:13:25,900
in a way and that was fantastic people

00:13:23,170 --> 00:13:28,060
love that but unfortunately we weren't

00:13:25,900 --> 00:13:29,740
able to deliver generators and basically

00:13:28,060 --> 00:13:33,640
one of the tough calls that we had to

00:13:29,740 --> 00:13:36,430
make was if you support generators then

00:13:33,640 --> 00:13:37,930
you also anticipate that everything that

00:13:36,430 --> 00:13:40,120
supports generators are also going to

00:13:37,930 --> 00:13:43,360
work so for instance if you use for

00:13:40,120 --> 00:13:45,640
loops if you use arrays spread syntax

00:13:43,360 --> 00:13:48,070
and whatnot the expectation is that

00:13:45,640 --> 00:13:50,170
you'll actually get full generalized

00:13:48,070 --> 00:13:51,400
support for iterators and unfortunately

00:13:50,170 --> 00:13:53,140
that would hat what that means is that

00:13:51,400 --> 00:13:55,330
every floor loop that you write has to

00:13:53,140 --> 00:13:58,060
be rewritten into this more general

00:13:55,330 --> 00:14:00,040
construct it's not necessarily as fast

00:13:58,060 --> 00:14:01,990
it actually adds a little bit of bloat

00:14:00,040 --> 00:14:03,820
to your code and so a lot of our users

00:14:01,990 --> 00:14:06,100
actually weren't concerned with that and

00:14:03,820 --> 00:14:07,360
so with touch of 2.3 you'll be able to

00:14:06,100 --> 00:14:10,420
use a new fly called down level

00:14:07,360 --> 00:14:12,430
iteration to try to to actually get full

00:14:10,420 --> 00:14:14,230
support for generators and iterators and

00:14:12,430 --> 00:14:15,880
in addition to that we're also going to

00:14:14,230 --> 00:14:17,589
have a syncs generators and async

00:14:15,880 --> 00:14:23,440
iterators coming with types of 2.3 as

00:14:17,589 --> 00:14:25,430
well speaking of a new option a lot of

00:14:23,440 --> 00:14:27,710
people start new types of projects

00:14:25,430 --> 00:14:29,899
with stricter flags it makes sense

00:14:27,710 --> 00:14:31,250
because the stricter your flag the

00:14:29,899 --> 00:14:34,520
better type of tends to be able to help

00:14:31,250 --> 00:14:35,899
you out and so the thing is we wanted to

00:14:34,520 --> 00:14:37,370
make it easier to just start a new

00:14:35,899 --> 00:14:39,620
project we wanted people to just be able

00:14:37,370 --> 00:14:41,959
to say I want the strictest stuff and so

00:14:39,620 --> 00:14:43,940
from now on you won't have to do this if

00:14:41,959 --> 00:14:46,970
you just want the strictest options we

00:14:43,940 --> 00:14:48,410
have a new flag called strict right it

00:14:46,970 --> 00:14:50,240
just does what you want to give you the

00:14:48,410 --> 00:14:52,190
strictest possible options and we

00:14:50,240 --> 00:14:56,630
believe that this is going to be a flag

00:14:52,190 --> 00:14:58,250
that carries the best coding stock yet

00:14:56,630 --> 00:15:00,860
the best coding styles that we can

00:14:58,250 --> 00:15:03,040
advocate for and that will give up at

00:15:00,860 --> 00:15:05,810
the best experience for going forward

00:15:03,040 --> 00:15:07,279
we'll also be introducing potentially

00:15:05,810 --> 00:15:09,320
new features that go into the strict

00:15:07,279 --> 00:15:10,700
flag and so if you ever want to opt out

00:15:09,320 --> 00:15:12,529
of one of those new features you can

00:15:10,700 --> 00:15:15,620
explicitly list them in your TS config

00:15:12,529 --> 00:15:19,279
file one last thing one other thing is

00:15:15,620 --> 00:15:22,520
generic defaults so let's say that you

00:15:19,279 --> 00:15:25,850
have some API right it is generic you

00:15:22,520 --> 00:15:28,760
have some type that's generic on T and

00:15:25,850 --> 00:15:30,110
so you may want to generalize this a

00:15:28,760 --> 00:15:31,610
little bit down the road you might want

00:15:30,110 --> 00:15:33,980
to add another type parameter you want

00:15:31,610 --> 00:15:37,310
to have another method on here that

00:15:33,980 --> 00:15:41,650
returns a U but unfortunately if you've

00:15:37,310 --> 00:15:44,240
ever ridden some API of foo in this case

00:15:41,650 --> 00:15:47,120
adding a new type parameter actually

00:15:44,240 --> 00:15:49,730
breaks things so now anyone who ever

00:15:47,120 --> 00:15:52,029
used this is broken so what we've

00:15:49,730 --> 00:15:54,260
introduced is generic defaults right

00:15:52,029 --> 00:15:55,730
there this is not the only place they're

00:15:54,260 --> 00:15:57,980
useful for but this is extremely useful

00:15:55,730 --> 00:16:00,170
when you're writing a new DTS file so

00:15:57,980 --> 00:16:05,209
basically earlier when you wrote some

00:16:00,170 --> 00:16:07,250
API of foo we could have written this

00:16:05,209 --> 00:16:10,070
basically these ogres into some API of

00:16:07,250 --> 00:16:13,070
foo and object because anyone using it

00:16:10,070 --> 00:16:15,230
wouldn't have cared otherwise before one

00:16:13,070 --> 00:16:20,959
other thing I want to talk about really

00:16:15,230 --> 00:16:22,940
quickly is the effort that we're making

00:16:20,959 --> 00:16:24,800
to try to make it easier to adopt new

00:16:22,940 --> 00:16:28,270
JavaScript project or existing

00:16:24,800 --> 00:16:30,680
JavaScript projects into typescript so

00:16:28,270 --> 00:16:34,400
last year I showed off this file called

00:16:30,680 --> 00:16:36,860
shipping Jas and the concept was that

00:16:34,400 --> 00:16:38,350
you it would come with a bunch of and

00:16:36,860 --> 00:16:40,750
there are a bunch of these errors

00:16:38,350 --> 00:16:41,530
here they're not things that would pop

00:16:40,750 --> 00:16:44,230
out to your eye

00:16:41,530 --> 00:16:45,880
necessarily but the thing is we're

00:16:44,230 --> 00:16:48,790
trying to make it easier to transition

00:16:45,880 --> 00:16:50,350
from JavaScript to typescript and so one

00:16:48,790 --> 00:16:52,360
of the things that we can do is we can

00:16:50,350 --> 00:16:53,890
actually use this allow J's flag which

00:16:52,360 --> 00:16:55,570
is something that allows us to mix and

00:16:53,890 --> 00:16:59,670
match typescript and JavaScript code

00:16:55,570 --> 00:17:06,460
together and then we can actually add a

00:16:59,670 --> 00:17:08,440
quick comment up here and all of a

00:17:06,460 --> 00:17:10,330
sudden I get the red squigglies that we

00:17:08,440 --> 00:17:12,880
all know and love right

00:17:10,330 --> 00:17:14,620
and so this is kind of a softer form of

00:17:12,880 --> 00:17:16,360
checking for your javascript files this

00:17:14,620 --> 00:17:17,770
makes it so that you can catch the

00:17:16,360 --> 00:17:19,840
errors that texture is going to catch

00:17:17,770 --> 00:17:23,230
earlier on before you do a full

00:17:19,840 --> 00:17:25,690
migration so this is something we're

00:17:23,230 --> 00:17:27,220
currently experimenting with will have

00:17:25,690 --> 00:17:28,960
an RC out soon that you can try that

00:17:27,220 --> 00:17:33,160
with and we'd love to hear your feedback

00:17:28,960 --> 00:17:34,690
for it and just as a heads up you know

00:17:33,160 --> 00:17:36,580
none of this stuff is necessarily

00:17:34,690 --> 00:17:40,330
secretive we try to keep all this out in

00:17:36,580 --> 00:17:42,010
the open it's on our roadmap so we're

00:17:40,330 --> 00:17:43,780
always well you know we're always trying

00:17:42,010 --> 00:17:46,450
to hear people out and trying to be open

00:17:43,780 --> 00:17:49,810
and transparent about our process so in

00:17:46,450 --> 00:17:54,040
the future as always keep in touch

00:17:49,810 --> 00:17:55,480
we're on github get me on Twitter the

00:17:54,040 --> 00:17:59,710
types playing accountants listening and

00:17:55,480 --> 00:18:02,700
I hope that you all have a great time

00:17:59,710 --> 00:18:05,839
using typescript 2.3

00:18:02,700 --> 00:18:05,839
[Applause]

00:18:07,230 --> 00:18:09,290

YouTube URL: https://www.youtube.com/watch?v=0Q1lQKE2qbI


