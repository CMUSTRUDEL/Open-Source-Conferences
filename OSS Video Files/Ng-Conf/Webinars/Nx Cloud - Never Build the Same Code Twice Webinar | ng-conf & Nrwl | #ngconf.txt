Title: Nx Cloud - Never Build the Same Code Twice Webinar | ng-conf & Nrwl | #ngconf
Publication date: 2020-06-03
Playlist: Webinars
Description: 
	Learn how to maximize your code in this webinar all about "Nx Cloud- How to Never Build the Same Code Twice". Presented by ng-conf with Jeff Cross & Victor Savkin of Nrwl.io. 

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:09,650 --> 00:00:13,700
it's alright well thank you everyone

00:00:11,809 --> 00:00:14,660
we'll keep the banter to a minimum so

00:00:13,700 --> 00:00:19,220
you can talk about more interesting

00:00:14,660 --> 00:00:22,310
things like Madhuri pose and NX and fast

00:00:19,220 --> 00:00:26,090
builds and just a quick intro victor and

00:00:22,310 --> 00:00:29,210
myself are cofounders of narwhal where

00:00:26,090 --> 00:00:30,860
the company behind NX we have a lot of

00:00:29,210 --> 00:00:33,350
background in angular we both were on

00:00:30,860 --> 00:00:35,660
the angular team at Google and now we've

00:00:33,350 --> 00:00:37,820
we've been that Mario for just over

00:00:35,660 --> 00:00:40,250
three years we've got a team of great

00:00:37,820 --> 00:00:42,679
angular experts as well as react experts

00:00:40,250 --> 00:00:43,940
people who just love dual tooling and

00:00:42,679 --> 00:00:45,410
love monter ethos and love

00:00:43,940 --> 00:00:47,989
infrastructure and those kinds of things

00:00:45,410 --> 00:00:49,940
and now we help clients solve these big

00:00:47,989 --> 00:00:52,749
challenges that that were solving with

00:00:49,940 --> 00:00:56,149
EDX and with frameworks like angular and

00:00:52,749 --> 00:00:57,710
having a lot of fun doing it so we'll

00:00:56,149 --> 00:01:00,739
talk today we're going to talk through

00:00:57,710 --> 00:01:02,960
EDX it's all kind of end-to-end NX but

00:01:00,739 --> 00:01:05,210
we'll take kind of a shallow look at

00:01:02,960 --> 00:01:07,070
what EDX is and in the monetary put

00:01:05,210 --> 00:01:08,659
setup and you know kind of how it works

00:01:07,070 --> 00:01:11,659
and then look a little bit more deeply

00:01:08,659 --> 00:01:14,630
at the smarts NX has about building

00:01:11,659 --> 00:01:16,130
applications which is some some of the

00:01:14,630 --> 00:01:19,430
place we've had a lot more innovation

00:01:16,130 --> 00:01:22,220
lately and something that solves some

00:01:19,430 --> 00:01:23,750
real pain points for a lot of use so

00:01:22,220 --> 00:01:26,660
there are four parts we're gonna talk

00:01:23,750 --> 00:01:29,540
about madhuri posts in general like what

00:01:26,660 --> 00:01:31,160
is a mono repo and to us what does it

00:01:29,540 --> 00:01:33,230
mean and then what are the downsides

00:01:31,160 --> 00:01:35,630
that like typical downsides of code

00:01:33,230 --> 00:01:37,340
collocation which isn't the same as what

00:01:35,630 --> 00:01:39,680
we talk about when we talk about Madhuri

00:01:37,340 --> 00:01:41,840
pose but we'll talk about what some of

00:01:39,680 --> 00:01:43,850
the typical challenges of that and then

00:01:41,840 --> 00:01:46,610
we'll talk about what NX is and how it

00:01:43,850 --> 00:01:49,130
addresses those challenges and finally

00:01:46,610 --> 00:01:53,030
how how that X that makes builds fast

00:01:49,130 --> 00:01:54,140
what's the what's the magic so let's

00:01:53,030 --> 00:01:55,970
start with Madhuri post by the way if

00:01:54,140 --> 00:01:58,040
you see that pig icon in the corner that

00:01:55,970 --> 00:01:59,510
just means it's a it doesn't mean

00:01:58,040 --> 00:02:00,920
anything special other than a note to me

00:01:59,510 --> 00:02:04,220
that I need to progress this slide

00:02:00,920 --> 00:02:06,650
manually and because pigs are great as

00:02:04,220 --> 00:02:08,569
Victor of established order so Mario

00:02:06,650 --> 00:02:09,830
pose what what's the point of madhuri

00:02:08,569 --> 00:02:12,080
post well there are three things that

00:02:09,830 --> 00:02:15,110
they'll show why moderate those are

00:02:12,080 --> 00:02:16,910
great one is the atomic changes so

00:02:15,110 --> 00:02:20,480
having atomic changes in flat history

00:02:16,910 --> 00:02:22,050
and if we look at an example here of an

00:02:20,480 --> 00:02:24,390
app where we have a home

00:02:22,050 --> 00:02:26,670
and it depends on a common UI library

00:02:24,390 --> 00:02:29,310
and these are both split into two git

00:02:26,670 --> 00:02:32,310
repositories and then we spot a bug in

00:02:29,310 --> 00:02:35,130
the common UI repository a typical

00:02:32,310 --> 00:02:37,080
process might look like this i as a

00:02:35,130 --> 00:02:39,810
developer on the common UI repository

00:02:37,080 --> 00:02:43,230
I'll I'll write a regression test I'll

00:02:39,810 --> 00:02:45,210
I'll write a bug fix and then I'll open

00:02:43,230 --> 00:02:48,030
up commit our pull request or a change

00:02:45,210 --> 00:02:50,190
list depending on what you call it - I

00:02:48,030 --> 00:02:53,160
verified locally the regression test

00:02:50,190 --> 00:02:55,590
satisfied by my fix I push it to CI and

00:02:53,160 --> 00:02:58,200
the test pass so I merge it I tagged it

00:02:55,590 --> 00:03:00,990
and then I go home for the weekend I go

00:02:58,200 --> 00:03:04,200
on a vacation because I'm happy that I

00:03:00,990 --> 00:03:07,500
fix something and I deserve it and then

00:03:04,200 --> 00:03:08,940
next Monday the home page app team comes

00:03:07,500 --> 00:03:10,710
in they see I've tagged a new release

00:03:08,940 --> 00:03:13,620
and I said that I fixed the bug that

00:03:10,710 --> 00:03:16,200
they reported and they write their own

00:03:13,620 --> 00:03:18,810
regression test and integrate the new

00:03:16,200 --> 00:03:21,660
change and they push it to CI and see

00:03:18,810 --> 00:03:29,280
that their tests fail and so what's the

00:03:21,660 --> 00:03:30,480
problem with this so the problem what's

00:03:29,280 --> 00:03:33,810
the problem with this the problem is

00:03:30,480 --> 00:03:36,030
that now me is the guy on the on the

00:03:33,810 --> 00:03:38,100
common UI repository team I have I've

00:03:36,030 --> 00:03:40,709
left and the the change didn't actually

00:03:38,100 --> 00:03:42,300
fix and now they have to the homepage

00:03:40,709 --> 00:03:44,640
app team has to go back and figure out

00:03:42,300 --> 00:03:45,300
why I didn't fix get someone else to

00:03:44,640 --> 00:03:47,310
work on it

00:03:45,300 --> 00:03:49,650
wait for me to get back from vacation so

00:03:47,310 --> 00:03:51,480
I can fix it again when I've lost all

00:03:49,650 --> 00:03:52,770
the context you know I've drinkin a lot

00:03:51,480 --> 00:03:54,780
of mai tais and have forgotten

00:03:52,770 --> 00:03:58,500
everything that I did before I went on

00:03:54,780 --> 00:04:00,090
vacation and now it's it's a lot more

00:03:58,500 --> 00:04:02,370
expensive for me to fix that changed and

00:04:00,090 --> 00:04:04,350
it would have been if I would just got

00:04:02,370 --> 00:04:06,420
it right in the first place so let's

00:04:04,350 --> 00:04:09,480
look at the same example but instead of

00:04:06,420 --> 00:04:11,880
having two separate git repositories we

00:04:09,480 --> 00:04:13,800
have a single git repository so I having

00:04:11,880 --> 00:04:16,440
them by having the common UI and the

00:04:13,800 --> 00:04:20,340
home page in the same repository we we

00:04:16,440 --> 00:04:22,169
remove that step of publishing and

00:04:20,340 --> 00:04:24,510
versioning something and then

00:04:22,169 --> 00:04:26,250
integrating it later to see if it worked

00:04:24,510 --> 00:04:28,290
we're actually integrating it at the

00:04:26,250 --> 00:04:30,060
same time so we write a regression test

00:04:28,290 --> 00:04:32,100
for the common UI library and the

00:04:30,060 --> 00:04:34,229
regression tests for the home page app

00:04:32,100 --> 00:04:35,729
where the bug was initially reported and

00:04:34,229 --> 00:04:37,050
immediately we see that if

00:04:35,729 --> 00:04:38,909
we applied the same fix we charred

00:04:37,050 --> 00:04:40,889
before we see immediately oh this

00:04:38,909 --> 00:04:43,650
doesn't actually fix it I need to need

00:04:40,889 --> 00:04:45,330
to work some more and and change the

00:04:43,650 --> 00:04:48,330
common UI a little bit more to actually

00:04:45,330 --> 00:04:50,879
fix the regression I fix it and update

00:04:48,330 --> 00:04:55,710
it test pass and I merge it without any

00:04:50,879 --> 00:04:58,050
of the the integration delay and yeah

00:04:55,710 --> 00:05:00,599
the the way in integrating into where I

00:04:58,050 --> 00:05:02,909
can see that it actually failed so now

00:05:00,599 --> 00:05:06,180
it works I don't have any of those

00:05:02,909 --> 00:05:07,860
problems so that's why I talk just a

00:05:06,180 --> 00:05:09,449
quick example of why atomic changes are

00:05:07,860 --> 00:05:11,580
important but let's look at shared code

00:05:09,449 --> 00:05:14,430
let's say you have this validator that

00:05:11,580 --> 00:05:15,960
is checking that a username is valid if

00:05:14,430 --> 00:05:18,479
you wanted to share this code in a

00:05:15,960 --> 00:05:19,559
nepali repo like multi get repo setup

00:05:18,479 --> 00:05:21,629
you would have to set up a new

00:05:19,559 --> 00:05:23,249
repository setup the tooling the

00:05:21,629 --> 00:05:25,680
building tests and CI for that

00:05:23,249 --> 00:05:28,199
repository and then you have to set up

00:05:25,680 --> 00:05:31,919
publishing and also along with

00:05:28,199 --> 00:05:33,539
publishing comes versioning and what

00:05:31,919 --> 00:05:35,460
your guarantees are about changes and

00:05:33,539 --> 00:05:36,629
breaking changes those are all things

00:05:35,460 --> 00:05:38,610
you have to figure out anytime you set

00:05:36,629 --> 00:05:40,379
up a new repository but if you have them

00:05:38,610 --> 00:05:42,509
in the same monetary PO in the same

00:05:40,379 --> 00:05:44,339
repository all you have to do is create

00:05:42,509 --> 00:05:47,069
a library and that's it you've got all

00:05:44,339 --> 00:05:49,560
the built tooling set up already

00:05:47,069 --> 00:05:51,180
you've got the CI that's setup you've

00:05:49,560 --> 00:05:53,009
got you don't need to publish because

00:05:51,180 --> 00:05:53,669
everything is depending on source of

00:05:53,009 --> 00:05:56,189
everything

00:05:53,669 --> 00:05:58,589
so no versions are necessary and anytime

00:05:56,189 --> 00:06:00,779
you make a breaking change you just fix

00:05:58,589 --> 00:06:02,520
whoever depends on that change and you

00:06:00,779 --> 00:06:04,889
can you don't actually break you just

00:06:02,520 --> 00:06:08,399
change your API and change whatever

00:06:04,889 --> 00:06:09,629
depends on it so that's that's why

00:06:08,399 --> 00:06:12,389
monitor pills make shared code

00:06:09,629 --> 00:06:15,149
essentially free for what was complex

00:06:12,389 --> 00:06:18,599
before and third we have a single set of

00:06:15,149 --> 00:06:20,309
dependencies and so one thing is that

00:06:18,599 --> 00:06:22,319
with it there's this thing for the

00:06:20,309 --> 00:06:23,939
diamond dependency problem and so that

00:06:22,319 --> 00:06:26,520
means so when you have to when you have

00:06:23,939 --> 00:06:29,669
a library or a project it depends on two

00:06:26,520 --> 00:06:32,129
other projects and they depend on the

00:06:29,669 --> 00:06:34,979
same version of a another dependency

00:06:32,129 --> 00:06:37,589
that works fine but when you get into

00:06:34,979 --> 00:06:43,139
issues when you have two libraries that

00:06:37,589 --> 00:06:46,069
depend on a third layer sorry let me

00:06:43,139 --> 00:06:46,069
back that up

00:06:47,910 --> 00:06:53,500
so the yeah you get into problems so

00:06:51,040 --> 00:06:55,150
when you have a application at the top

00:06:53,500 --> 00:06:57,009
that depends on two libraries directly

00:06:55,150 --> 00:06:59,919
and they depend on a third-party library

00:06:57,009 --> 00:07:02,169
at the same version everything works

00:06:59,919 --> 00:07:04,300
fine if you have something where you

00:07:02,169 --> 00:07:06,940
depend on different versions of that

00:07:04,300 --> 00:07:08,770
third-party library then you get into a

00:07:06,940 --> 00:07:10,810
point where you end up having to have

00:07:08,770 --> 00:07:13,120
two versions of that third library

00:07:10,810 --> 00:07:15,400
deployed and this gets into a real

00:07:13,120 --> 00:07:17,050
problem with JavaScript applications or

00:07:15,400 --> 00:07:19,419
really anything that has instance of

00:07:17,050 --> 00:07:20,970
checks at runtime like angular if you

00:07:19,419 --> 00:07:23,440
have different versions of angular

00:07:20,970 --> 00:07:25,389
inside your repository and they get

00:07:23,440 --> 00:07:28,030
bundled together then it's not going to

00:07:25,389 --> 00:07:31,690
recognize other versions of angular yeah

00:07:28,030 --> 00:07:34,090
when it does instance of checks or or

00:07:31,690 --> 00:07:36,789
other in addition to having performance

00:07:34,090 --> 00:07:40,479
issues of having multiple angular's

00:07:36,789 --> 00:07:42,370
included in your bundle so I didn't do a

00:07:40,479 --> 00:07:43,810
great job of explaining but there are

00:07:42,370 --> 00:07:44,770
good articles on the diamond dependency

00:07:43,810 --> 00:07:46,210
problem that you could look at to

00:07:44,770 --> 00:07:47,650
understand that a little bit better and

00:07:46,210 --> 00:07:49,960
why having a single version of

00:07:47,650 --> 00:07:51,690
everything is better so let's look at

00:07:49,960 --> 00:07:54,070
some of the downsides the typical

00:07:51,690 --> 00:08:00,130
downsides of when you have code living

00:07:54,070 --> 00:08:02,440
in the same impossibru so one is that

00:08:00,130 --> 00:08:04,180
you run unnecessary tests if you have

00:08:02,440 --> 00:08:06,550
any many things in the same repository

00:08:04,180 --> 00:08:09,099
and you're testing everything every time

00:08:06,550 --> 00:08:11,229
that can get expensive and if you have

00:08:09,099 --> 00:08:13,570
no boundaries between code we'll look at

00:08:11,229 --> 00:08:15,130
what that means in a second so running

00:08:13,570 --> 00:08:16,810
unnecessary tests if I have this

00:08:15,130 --> 00:08:19,060
products home page that's shared on a

00:08:16,810 --> 00:08:22,599
ship or depends on a shared product UI

00:08:19,060 --> 00:08:25,000
so that's a library then those are only

00:08:22,599 --> 00:08:28,360
two things in this workspace if I touch

00:08:25,000 --> 00:08:30,789
the shared products UI I don't need to

00:08:28,360 --> 00:08:32,620
test everything else in here but if you

00:08:30,789 --> 00:08:34,539
have a naive setup that's what's going

00:08:32,620 --> 00:08:36,430
to happen you're just going to say how

00:08:34,539 --> 00:08:40,419
can I know what needs to be tested I'll

00:08:36,430 --> 00:08:42,310
test everything every time which is bad

00:08:40,419 --> 00:08:44,770
that's going to take a lot of time build

00:08:42,310 --> 00:08:46,930
time has a big impact on team

00:08:44,770 --> 00:08:50,140
productivity and so the next is that

00:08:46,930 --> 00:08:52,930
there are there are unclear or non

00:08:50,140 --> 00:08:55,900
existing code boundaries so if you have

00:08:52,930 --> 00:08:57,610
if you have some function or utility

00:08:55,900 --> 00:08:58,750
that you've written just for one part of

00:08:57,610 --> 00:09:00,250
your code base and you don't really

00:08:58,750 --> 00:09:00,760
intend to support that for other people

00:09:00,250 --> 00:09:03,610
who

00:09:00,760 --> 00:09:05,470
use it there's nothing stopping people

00:09:03,610 --> 00:09:07,810
from just going in and importing it

00:09:05,470 --> 00:09:11,590
because it's all they have access to all

00:09:07,810 --> 00:09:13,900
your source and they can just import it

00:09:11,590 --> 00:09:15,370
and and use it and then if you ever want

00:09:13,900 --> 00:09:17,050
to change that then you have to work

00:09:15,370 --> 00:09:18,790
with them to either say okay I'm just

00:09:17,050 --> 00:09:22,870
going to delete it and you know you're

00:09:18,790 --> 00:09:24,250
broken or like update it or just create

00:09:22,870 --> 00:09:26,140
a new version of it because you don't

00:09:24,250 --> 00:09:27,940
want to change the old one and then

00:09:26,140 --> 00:09:31,420
you've got more code and it's harder to

00:09:27,940 --> 00:09:33,070
maintain etc etc so that's that's one of

00:09:31,420 --> 00:09:34,930
the typical downsides of code

00:09:33,070 --> 00:09:37,090
collocation and then you have in

00:09:34,930 --> 00:09:40,720
computing consistent tooling so if you

00:09:37,090 --> 00:09:43,360
have a bunch of different constraints on

00:09:40,720 --> 00:09:45,130
on your builds your builds and there's

00:09:43,360 --> 00:09:46,990
no kind of coordination or no kind of

00:09:45,130 --> 00:09:49,450
standardization on how your scripts are

00:09:46,990 --> 00:09:51,820
all run in the repository then you just

00:09:49,450 --> 00:09:53,110
end up with a bunch of like a bunch of

00:09:51,820 --> 00:09:55,390
different scripts that you have to

00:09:53,110 --> 00:09:57,910
figure out which teams is building what

00:09:55,390 --> 00:10:00,130
in what ways and if you ever want to

00:09:57,910 --> 00:10:01,660
change something else or you depend on

00:10:00,130 --> 00:10:03,010
something else in your repository that

00:10:01,660 --> 00:10:05,680
that you need to run then you have to

00:10:03,010 --> 00:10:07,630
figure out all the nuance all the

00:10:05,680 --> 00:10:09,250
server's they have to setup the proxies

00:10:07,630 --> 00:10:11,320
and whatever else needs to happen to

00:10:09,250 --> 00:10:11,590
build it so it can be a lot to figure

00:10:11,320 --> 00:10:13,300
out

00:10:11,590 --> 00:10:15,730
so these are these are some of the

00:10:13,300 --> 00:10:17,950
downsides of naive code colocation but

00:10:15,730 --> 00:10:20,860
let's take a look at how NX deals with

00:10:17,950 --> 00:10:24,280
these things so if you're not but where

00:10:20,860 --> 00:10:26,440
NX is an open source toolkit for for

00:10:24,280 --> 00:10:28,630
monitor equal sound development it's

00:10:26,440 --> 00:10:30,490
built off of angel CLI so it's very

00:10:28,630 --> 00:10:32,560
similar to angular CLI and actually it

00:10:30,490 --> 00:10:35,230
was totally compatible thank you STI so

00:10:32,560 --> 00:10:36,880
it has the code generation we add some

00:10:35,230 --> 00:10:39,730
additional support for additional tools

00:10:36,880 --> 00:10:43,390
for you like storybook react prettier

00:10:39,730 --> 00:10:44,950
cypress jest like modern tools that most

00:10:43,390 --> 00:10:45,970
teams are gravitating towards for

00:10:44,950 --> 00:10:50,080
testing

00:10:45,970 --> 00:10:51,160
it's also extensible so we have we have

00:10:50,080 --> 00:10:52,990
features where you can generate

00:10:51,160 --> 00:10:56,230
workspace schematics so that your team

00:10:52,990 --> 00:10:57,960
can have consistent tooling and easy

00:10:56,230 --> 00:11:00,370
ways of doing common things without

00:10:57,960 --> 00:11:02,860
without breaking or without doing things

00:11:00,370 --> 00:11:04,480
differently and we have a unified

00:11:02,860 --> 00:11:06,580
experience for for front-end and

00:11:04,480 --> 00:11:09,840
back-end so we have just as much support

00:11:06,580 --> 00:11:13,390
for node servers like Nesta yes next Jas

00:11:09,840 --> 00:11:14,690
Express as we do for front-end but one

00:11:13,390 --> 00:11:16,700
of the key things about

00:11:14,690 --> 00:11:19,700
EDX is then understands your project

00:11:16,700 --> 00:11:21,080
graph so it can it actually understands

00:11:19,700 --> 00:11:22,580
how your libraries and applications

00:11:21,080 --> 00:11:25,280
inside the workspace to relate to each

00:11:22,580 --> 00:11:27,550
other and that's what it uses for most

00:11:25,280 --> 00:11:30,610
of the advanced tooling that it provides

00:11:27,550 --> 00:11:34,330
as I mentioned it's open source it's

00:11:30,610 --> 00:11:36,350
free right it's there's no like

00:11:34,330 --> 00:11:38,240
restricted enterprise version or

00:11:36,350 --> 00:11:40,190
anything it's like totally free we we

00:11:38,240 --> 00:11:41,510
build it as we see new needs with the

00:11:40,190 --> 00:11:45,080
clients we're working with and the

00:11:41,510 --> 00:11:46,580
community and and it's been a great

00:11:45,080 --> 00:11:49,370
thing for us as a company we do a lot of

00:11:46,580 --> 00:11:50,960
consulting around it so in training so

00:11:49,370 --> 00:11:54,590
it's worked out pretty well without us

00:11:50,960 --> 00:11:57,140
ever having to charge for it so what it

00:11:54,590 --> 00:11:58,640
is it's basically breaks down to its

00:11:57,140 --> 00:12:02,540
code partitioning and intelligent

00:11:58,640 --> 00:12:04,820
tooling to develop its scale so we've

00:12:02,540 --> 00:12:07,190
got an example here of like you can have

00:12:04,820 --> 00:12:09,290
and this is to show that it works as

00:12:07,190 --> 00:12:11,570
just as well with react as with angular

00:12:09,290 --> 00:12:15,260
a lot of teams have angular and react in

00:12:11,570 --> 00:12:18,140
the same workspace so apps and lips are

00:12:15,260 --> 00:12:19,640
the main building blocks of NX so let's

00:12:18,140 --> 00:12:21,410
look at let's get a little bit more

00:12:19,640 --> 00:12:22,570
concrete and see what it looks like in

00:12:21,410 --> 00:12:25,690
practice

00:12:22,570 --> 00:12:27,980
so just like creating an angular CLI

00:12:25,690 --> 00:12:30,560
repository you would start by creating

00:12:27,980 --> 00:12:33,110
an X or not a repository in and you'll

00:12:30,560 --> 00:12:34,220
see like project who you calling us Eli

00:12:33,110 --> 00:12:37,640
things workspaces

00:12:34,220 --> 00:12:39,290
I guess so you'd start by running this

00:12:37,640 --> 00:12:40,670
command just running you don't have to

00:12:39,290 --> 00:12:42,890
install anything before this you just

00:12:40,670 --> 00:12:44,360
run in the X create an x workspace it

00:12:42,890 --> 00:12:45,950
prompts you to give it an organ a m--

00:12:44,360 --> 00:12:49,610
and then you can use a preset like

00:12:45,950 --> 00:12:51,980
angular or react and and then it will

00:12:49,610 --> 00:12:52,640
create an angular app for you you just

00:12:51,980 --> 00:12:55,970
name it

00:12:52,640 --> 00:13:00,280
design your CSS and there it goes so

00:12:55,970 --> 00:13:04,790
basically the same process as ng new

00:13:00,280 --> 00:13:12,500
of course npm install' is the slowest

00:13:04,790 --> 00:13:16,310
part of anything ok so that is C forget

00:13:12,500 --> 00:13:18,020
to fix the timing on this so that's the

00:13:16,310 --> 00:13:19,220
that's the quickest way to get started

00:13:18,020 --> 00:13:20,480
just running that script you don't have

00:13:19,220 --> 00:13:23,120
to install anything beforehand because

00:13:20,480 --> 00:13:26,420
you're just using NPM s script execution

00:13:23,120 --> 00:13:27,980
so next is creating reusable libraries

00:13:26,420 --> 00:13:30,680
and

00:13:27,980 --> 00:13:33,170
and libraries are the main way of

00:13:30,680 --> 00:13:34,370
partitioning things and NX an app is

00:13:33,170 --> 00:13:35,870
something that gets deployed somewhere

00:13:34,370 --> 00:13:38,089
at a library is something that can be

00:13:35,870 --> 00:13:41,750
depended on or can depend on other

00:13:38,089 --> 00:13:44,990
libraries and allows you to partition

00:13:41,750 --> 00:13:48,199
your applications and a lot more logical

00:13:44,990 --> 00:13:49,910
ways even if it's not something that's

00:13:48,199 --> 00:13:51,560
shared between multiple applications

00:13:49,910 --> 00:13:53,269
libraries are great a great way to

00:13:51,560 --> 00:13:55,100
partition things within your application

00:13:53,269 --> 00:13:56,899
and this is also one of the key things

00:13:55,100 --> 00:14:00,589
to realizing some of the performance

00:13:56,899 --> 00:14:03,170
benefits of improving build times later

00:14:00,589 --> 00:14:06,529
so here we've created a library that is

00:14:03,170 --> 00:14:09,230
a UI library and just has the Jess

00:14:06,529 --> 00:14:11,240
configuration and then once we have

00:14:09,230 --> 00:14:13,970
libraries we can add components to that

00:14:11,240 --> 00:14:15,589
library so using the same like

00:14:13,970 --> 00:14:18,829
schematics just as you'd be familiar

00:14:15,589 --> 00:14:21,199
with with angular CLI so we're using the

00:14:18,829 --> 00:14:25,010
angular CLI schematics the ink your

00:14:21,199 --> 00:14:26,899
component schematic here and of course

00:14:25,010 --> 00:14:28,760
using NX console if you don't have that

00:14:26,899 --> 00:14:30,199
X console this actually works with an X

00:14:28,760 --> 00:14:31,070
workspaces or with angular CLI

00:14:30,199 --> 00:14:33,350
workspaces

00:14:31,070 --> 00:14:36,680
it's a Visual Studio code extension and

00:14:33,350 --> 00:14:39,890
as a UI or a lot of not just UI but a

00:14:36,680 --> 00:14:42,860
lot of you know IDE benefits of working

00:14:39,890 --> 00:14:45,410
with angular COI or NX so that you can

00:14:42,860 --> 00:14:47,810
you don't have to remember flags you can

00:14:45,410 --> 00:14:51,589
quickly run command you can explore your

00:14:47,810 --> 00:14:53,720
your projects so so that's as easy as it

00:14:51,589 --> 00:14:55,279
is to add components to a library there

00:14:53,720 --> 00:14:56,449
are all these other things that NX does

00:14:55,279 --> 00:14:59,390
we're not going to get into today I

00:14:56,449 --> 00:15:01,910
encourage you to check out NX dev that's

00:14:59,390 --> 00:15:04,339
the home of all things NX but we want to

00:15:01,910 --> 00:15:07,399
now focus on how an X makes builds fast

00:15:04,339 --> 00:15:09,490
and all that Victor take it over from

00:15:07,399 --> 00:15:09,490
here

00:15:10,540 --> 00:15:26,750
okay yeah because I don't use Mac so and

00:15:17,649 --> 00:15:28,160
like in the browser if you see me

00:15:26,750 --> 00:15:29,569
accident and start a desk because

00:15:28,160 --> 00:15:32,230
there's auto timing and I just need to

00:15:29,569 --> 00:15:34,610
pause it but you just keep going yeah

00:15:32,230 --> 00:15:35,870
let's play through the presentation part

00:15:34,610 --> 00:15:36,500
and then I just want to show something

00:15:35,870 --> 00:15:38,180
you know

00:15:36,500 --> 00:15:40,750
okay the place through and then you do

00:15:38,180 --> 00:15:43,180
some demo yeah I'll just show some like

00:15:40,750 --> 00:15:44,410
my projects like kosher screen and I

00:15:43,180 --> 00:15:46,630
will talk through some stuff

00:15:44,410 --> 00:15:49,330
a bit more in-depth basically the idea

00:15:46,630 --> 00:15:51,900
that normally you would have the kind

00:15:49,330 --> 00:15:56,080
one application that you would build

00:15:51,900 --> 00:15:57,370
like sort of a unit but when you do it

00:15:56,080 --> 00:15:59,170
into the NEX right if you don't have one

00:15:57,370 --> 00:16:01,270
application you have one application can

00:15:59,170 --> 00:16:02,950
post out of a bunch of libraries are

00:16:01,270 --> 00:16:05,650
saying this in this case we have an

00:16:02,950 --> 00:16:08,890
application that has full libraries it's

00:16:05,650 --> 00:16:10,840
created from write and normal-size the

00:16:08,890 --> 00:16:12,910
next app so if user next well and you

00:16:10,840 --> 00:16:14,560
use it for a while you tend to split

00:16:12,910 --> 00:16:17,110
your application to way more libraries

00:16:14,560 --> 00:16:19,300
and for okay but in this example for is

00:16:17,110 --> 00:16:22,090
good enough and once you do that you

00:16:19,300 --> 00:16:24,070
realized that there are certain things

00:16:22,090 --> 00:16:25,960
you can pull out right and the end

00:16:24,070 --> 00:16:28,120
builtin and Thursday Saturday night in

00:16:25,960 --> 00:16:30,160
isolation and the common things are like

00:16:28,120 --> 00:16:31,840
validator some you know basic rules so

00:16:30,160 --> 00:16:33,820
utility that you can share across teams

00:16:31,840 --> 00:16:36,160
across lines of business across

00:16:33,820 --> 00:16:38,620
applications and another very very

00:16:36,160 --> 00:16:41,050
common thing that almost all large

00:16:38,620 --> 00:16:42,490
organizations to even small businesses

00:16:41,050 --> 00:16:44,260
we have a design system internally even

00:16:42,490 --> 00:16:46,450
so we are you can see alby's ation of

00:16:44,260 --> 00:16:48,880
very few people he is doing the design

00:16:46,450 --> 00:16:52,360
system like sort of components that can

00:16:48,880 --> 00:16:56,490
be able to independently but also can be

00:16:52,360 --> 00:16:58,540
used sort of in a very in a way that

00:16:56,490 --> 00:17:00,430
material components for example all

00:16:58,540 --> 00:17:01,630
right the design system use case in

00:17:00,430 --> 00:17:02,980
particular is very interesting because

00:17:01,630 --> 00:17:05,140
those type of things can be very complex

00:17:02,980 --> 00:17:06,430
it can be very hard to manage then hard

00:17:05,140 --> 00:17:08,050
to build and that's why for example

00:17:06,430 --> 00:17:09,880
where the support of things like story

00:17:08,050 --> 00:17:12,310
book story book is a fantastic tool to

00:17:09,880 --> 00:17:16,360
do design system work right much better

00:17:12,310 --> 00:17:18,970
than trying to do it with a karma next

00:17:16,360 --> 00:17:20,890
slide okay cool

00:17:18,970 --> 00:17:24,000
now imagine we had this application of

00:17:20,890 --> 00:17:30,480
libraries and a developer maybe Jeff

00:17:24,000 --> 00:17:32,680
changed see what's in a chat okay cool

00:17:30,480 --> 00:17:35,380
if I asked him to speak slower which is

00:17:32,680 --> 00:17:37,330
fine so let's say Jeff changed the new

00:17:35,380 --> 00:17:40,180
ticket feature all right and the new

00:17:37,330 --> 00:17:41,500
ticket feature like submitter the PR

00:17:40,180 --> 00:17:43,390
changed something in there

00:17:41,500 --> 00:17:45,820
right normally the way you would do it

00:17:43,390 --> 00:17:48,400
if you don't use the next refuseniks

00:17:45,820 --> 00:17:51,940
correctly right you would rebuild and

00:17:48,400 --> 00:17:53,260
retest everything and that works like

00:17:51,940 --> 00:17:53,539
you're doing everything that's a very

00:17:53,260 --> 00:17:55,729
sea

00:17:53,539 --> 00:17:58,399
to a mental model right that principle

00:17:55,729 --> 00:18:00,769
works but it has a downside it been very

00:17:58,399 --> 00:18:02,299
slow so in this case if we do it and

00:18:00,769 --> 00:18:04,869
then I usually review direction and they

00:18:02,299 --> 00:18:07,820
test everything right we are going to

00:18:04,869 --> 00:18:09,889
spend a lot of time right validating our

00:18:07,820 --> 00:18:12,409
changes all right and obviously the

00:18:09,889 --> 00:18:14,960
point of a model for is that you tend to

00:18:12,409 --> 00:18:16,850
build item large applications composed

00:18:14,960 --> 00:18:19,210
of different modules in it or even

00:18:16,850 --> 00:18:22,009
models to applications so at some point

00:18:19,210 --> 00:18:25,580
database is top scaling it becomes sort

00:18:22,009 --> 00:18:28,609
of hard to manage at you you're going to

00:18:25,580 --> 00:18:35,299
get very long local builds very long cir

00:18:28,609 --> 00:18:37,429
on to the next and so the first thing

00:18:35,299 --> 00:18:39,169
that we landed that was the original key

00:18:37,429 --> 00:18:41,269
feature of an ax rightly the code change

00:18:39,169 --> 00:18:43,940
analysis feature where because we know

00:18:41,269 --> 00:18:45,289
the program of your workspace we know

00:18:43,940 --> 00:18:46,729
how different parts of your workspace of

00:18:45,289 --> 00:18:48,739
our data or they depend on each other

00:18:46,729 --> 00:18:50,149
we did use this information automatic

00:18:48,739 --> 00:18:51,710
you don't have to tell us anything we

00:18:50,149 --> 00:18:53,899
can derive it by just looking to the

00:18:51,710 --> 00:18:56,059
source code and if we derive it in

00:18:53,899 --> 00:18:58,279
completely you can command a few things

00:18:56,059 --> 00:19:00,320
so I would say maybe like 97 percent all

00:18:58,279 --> 00:19:03,139
the edges in this graph we figure out

00:19:00,320 --> 00:19:05,779
ourselves and they left their last 3

00:19:03,139 --> 00:19:07,729
percent is what you have to manually

00:19:05,779 --> 00:19:09,979
configure right so the maintenance of

00:19:07,729 --> 00:19:12,559
this graph actually is relatively low

00:19:09,979 --> 00:19:14,570
alright given how much work we do so

00:19:12,559 --> 00:19:16,460
what what you have the graph is so hard

00:19:14,570 --> 00:19:18,679
to realize that we know that if you

00:19:16,460 --> 00:19:20,869
change a new th vision next time the

00:19:18,679 --> 00:19:23,629
only part that requires changing it

00:19:20,869 --> 00:19:26,659
requires validation right it's a new

00:19:23,629 --> 00:19:28,999
ticket next slide support ticket and the

00:19:26,659 --> 00:19:30,769
app itself all right so we don't have to

00:19:28,999 --> 00:19:33,349
check the live chat app or the

00:19:30,769 --> 00:19:36,830
knowledgebase because C cannot be broken

00:19:33,349 --> 00:19:38,570
right by by this change so that is the

00:19:36,830 --> 00:19:40,159
first ideas we looked at this the code

00:19:38,570 --> 00:19:40,759
change itself basically we look at the

00:19:40,159 --> 00:19:42,979
git diff

00:19:40,759 --> 00:19:46,039
name right so we look at the gig if we

00:19:42,979 --> 00:19:47,690
analyze it right and really did only a

00:19:46,039 --> 00:19:49,369
fraction of the work so in this case

00:19:47,690 --> 00:19:50,960
it's all three tests and every single

00:19:49,369 --> 00:19:53,539
project where it belongs in the project

00:19:50,960 --> 00:19:56,720
what we are doing is we re testing and

00:19:53,539 --> 00:19:59,239
rebuilding a subset of the graph quite a

00:19:56,720 --> 00:20:01,639
few projects good performance aim so and

00:19:59,239 --> 00:20:07,490
how much you save here it depends on the

00:20:01,639 --> 00:20:09,230
type of changes you make and

00:20:07,490 --> 00:20:11,390
really person what type of changes you

00:20:09,230 --> 00:20:12,980
make and it really depends on like how

00:20:11,390 --> 00:20:15,320
many apps you build on a repo cetera so

00:20:12,980 --> 00:20:17,150
that varies right but for what stateful

00:20:15,320 --> 00:20:20,150
mid-sized repos repos I don't do very

00:20:17,150 --> 00:20:21,770
much you tend to most pr's tend to

00:20:20,150 --> 00:20:26,030
affect a small part to the Crab Nebula

00:20:21,770 --> 00:20:27,500
20% and the largest repo is the smaller

00:20:26,030 --> 00:20:30,140
is summarized right because you don't

00:20:27,500 --> 00:20:33,260
tend to change your personality and

00:20:30,140 --> 00:20:36,320
obviously so that's one part of making a

00:20:33,260 --> 00:20:38,510
you're built and test perform the other

00:20:36,320 --> 00:20:41,210
part paralyzation right the next allows

00:20:38,510 --> 00:20:42,890
you to put a line stuff very like on the

00:20:41,210 --> 00:20:45,350
same machine on the same note that works

00:20:42,890 --> 00:20:47,090
very easily just pass a flagrant abuse

00:20:45,350 --> 00:20:49,610
in parallel it tolls that allows you to

00:20:47,090 --> 00:20:51,680
build in a distributed fashion on many

00:20:49,610 --> 00:20:53,840
nodes which is I will talk about in a

00:20:51,680 --> 00:20:59,930
second well anyway it's the paralyzation

00:20:53,840 --> 00:21:04,280
next time yeah so as a result what you

00:20:59,930 --> 00:21:06,890
are ended up havin is the slowest part

00:21:04,280 --> 00:21:10,820
of your of you built for the flows build

00:21:06,890 --> 00:21:12,380
you running right is your total CI time

00:21:10,820 --> 00:21:15,140
alright if you have an app that takes

00:21:12,380 --> 00:21:17,510
ten years to build or you can make UCI

00:21:15,140 --> 00:21:19,070
time ten minutes it cannot be faster

00:21:17,510 --> 00:21:20,810
than that because in this case it's an

00:21:19,070 --> 00:21:22,940
indivisible piece of work but you have

00:21:20,810 --> 00:21:24,970
to run the thing but you can at least

00:21:22,940 --> 00:21:26,840
say okay ten minutes to the limit right

00:21:24,970 --> 00:21:31,580
which is pretty good

00:21:26,840 --> 00:21:34,550
I click the thing that is interesting

00:21:31,580 --> 00:21:36,800
here is that so like how can we make

00:21:34,550 --> 00:21:39,380
that ten minute individual pieces work

00:21:36,800 --> 00:21:41,600
smaller all right if it's a single

00:21:39,380 --> 00:21:43,400
operation we have run like it's one web

00:21:41,600 --> 00:21:45,440
app you to do is everything from source

00:21:43,400 --> 00:21:47,750
we can make it smaller right that's

00:21:45,440 --> 00:21:50,630
that's it ten minutes is 11 which may

00:21:47,750 --> 00:21:51,980
not be a problem on CI that much but

00:21:50,630 --> 00:21:53,300
it's more annoyance when you do it

00:21:51,980 --> 00:21:55,460
locally which I'll show in a second

00:21:53,300 --> 00:21:56,870
right where if you have to wait for many

00:21:55,460 --> 00:21:57,200
minutes to store your application that

00:21:56,870 --> 00:21:58,550
sucks

00:21:57,200 --> 00:22:00,530
all right that's not a very good app

00:21:58,550 --> 00:22:02,360
experience and if you build in a very

00:22:00,530 --> 00:22:04,100
large application right if you do it in

00:22:02,360 --> 00:22:04,940
a massive app it's not uncommon to wait

00:22:04,100 --> 00:22:07,280
for five minutes

00:22:04,940 --> 00:22:09,350
with ng sort of to show up all right

00:22:07,280 --> 00:22:11,300
five minutes is a lot of minutes so when

00:22:09,350 --> 00:22:12,830
you kill you a district by accident you

00:22:11,300 --> 00:22:15,200
get really frustrated so you have this

00:22:12,830 --> 00:22:17,480
fear of quite accidentally closing the

00:22:15,200 --> 00:22:18,340
terminal because you were to waste five

00:22:17,480 --> 00:22:20,470
more minutes

00:22:18,340 --> 00:22:25,620
waiting for it to like reappear again

00:22:20,470 --> 00:22:29,559
next thing the solution to this is to

00:22:25,620 --> 00:22:32,049
allow incremental incremental dips they

00:22:29,559 --> 00:22:33,370
did kind of criminal builds is that when

00:22:32,049 --> 00:22:35,289
I want to solve them application for

00:22:33,370 --> 00:22:38,260
example build my application I don't

00:22:35,289 --> 00:22:40,480
have to redo everything from scratch

00:22:38,260 --> 00:22:43,029
every single time I can do different

00:22:40,480 --> 00:22:45,090
parts of the store at different times

00:22:43,029 --> 00:22:47,950
right and then when I serve my app I

00:22:45,090 --> 00:22:49,690
only do the part that I need to redo and

00:22:47,950 --> 00:22:51,700
the rest I'm going to reuse all right so

00:22:49,690 --> 00:22:54,640
in this case imagine that validators and

00:22:51,700 --> 00:22:56,409
the design system libraries can be built

00:22:54,640 --> 00:22:59,649
and packaged in advance all right

00:22:56,409 --> 00:23:01,630
Sanchez when I put my liqueur do

00:22:59,649 --> 00:23:04,899
something with my ticket right and sort

00:23:01,630 --> 00:23:06,850
of my app I don't have to reduce the

00:23:04,899 --> 00:23:09,640
work regarding bar there isn't a design

00:23:06,850 --> 00:23:11,500
system right and that's the idea behind

00:23:09,640 --> 00:23:13,990
comment abuse in this case what you're

00:23:11,500 --> 00:23:16,179
basically saying is that my ng serve or

00:23:13,990 --> 00:23:18,220
my any iteration I run it doesn't matter

00:23:16,179 --> 00:23:20,830
how big my app is by and large I mean of

00:23:18,220 --> 00:23:23,409
course it but you know it doesn't matter

00:23:20,830 --> 00:23:26,200
as much how big my app is what matters

00:23:23,409 --> 00:23:28,779
is how big is my change so if a to

00:23:26,200 --> 00:23:30,520
master and I solve my app because I have

00:23:28,779 --> 00:23:33,010
no changes compared to master my source

00:23:30,520 --> 00:23:35,470
should be close to instant all right

00:23:33,010 --> 00:23:37,750
maybe take a few seconds to do something

00:23:35,470 --> 00:23:39,640
right but if I like change a particular

00:23:37,750 --> 00:23:41,200
library well when you to redo the client

00:23:39,640 --> 00:23:42,789
Barry so my change should be relatively

00:23:41,200 --> 00:23:44,799
fast maybe I should wait a few seconds

00:23:42,789 --> 00:23:47,169
right but if I change everything then

00:23:44,799 --> 00:23:50,529
yes that may take a long time right that

00:23:47,169 --> 00:23:52,899
is a idea behind the criminality that we

00:23:50,529 --> 00:23:55,210
want to make sure that the attractions

00:23:52,899 --> 00:23:58,330
we invoke a proportional to the size of

00:23:55,210 --> 00:24:00,190
the change and then get the whole idea

00:23:58,330 --> 00:24:02,559
behind an act in general it just some

00:24:00,190 --> 00:24:04,510
things like web path were hard to to

00:24:02,559 --> 00:24:06,840
break that unit as a single and Chi

00:24:04,510 --> 00:24:09,130
built was very hard to split the two and

00:24:06,840 --> 00:24:11,100
like now we can still then we'll show

00:24:09,130 --> 00:24:15,340
you again after the presentation is over

00:24:11,100 --> 00:24:18,460
excellent so we increment ality what you

00:24:15,340 --> 00:24:20,110
can't essentially is deciding that some

00:24:18,460 --> 00:24:21,820
part of the computation that would have

00:24:20,110 --> 00:24:24,190
happened before doesn't have to happen

00:24:21,820 --> 00:24:26,440
because we can retrieve it it's stored

00:24:24,190 --> 00:24:29,020
somewhere right so in this case the

00:24:26,440 --> 00:24:31,120
total time we have can be say store can

00:24:29,020 --> 00:24:31,929
be even smaller if you don't make any

00:24:31,120 --> 00:24:36,940
change it can be

00:24:31,929 --> 00:24:40,649
to zero all right and that's that's what

00:24:36,940 --> 00:24:43,059
they be behind a mentality and the

00:24:40,649 --> 00:24:45,369
resistance is to work when committed to

00:24:43,059 --> 00:24:48,070
work really well what you what you need

00:24:45,369 --> 00:24:50,139
is the ability to share your computation

00:24:48,070 --> 00:24:52,450
with your teammates but if everything

00:24:50,139 --> 00:24:54,039
you have is is happening on your machine

00:24:52,450 --> 00:24:56,379
on an every month machine about

00:24:54,039 --> 00:24:58,809
co-worker and to run stuff on my machine

00:24:56,379 --> 00:25:00,639
and if you don't share you your machines

00:24:58,809 --> 00:25:02,499
that can still be very valuable because

00:25:00,639 --> 00:25:05,619
you can like every go this incremental

00:25:02,499 --> 00:25:07,840
as insofar as whatever your machine is

00:25:05,619 --> 00:25:10,570
singing but if you share it suddenly

00:25:07,840 --> 00:25:13,090
most of the built you do we perform I

00:25:10,570 --> 00:25:17,710
will only have to rework a small part

00:25:13,090 --> 00:25:20,559
with the cookies next slide so in this

00:25:17,710 --> 00:25:25,240
case you can just play through the

00:25:20,559 --> 00:25:28,110
slides next slide so the the two we have

00:25:25,240 --> 00:25:30,519
to enable that now I show you again how

00:25:28,110 --> 00:25:32,440
what it does in a second let's call the

00:25:30,519 --> 00:25:34,389
next cloud which is essentially a way

00:25:32,440 --> 00:25:39,340
for you to share your computations with

00:25:34,389 --> 00:25:41,950
your teammates actually so with this if

00:25:39,340 --> 00:25:43,840
you have that suddenly in this case the

00:25:41,950 --> 00:25:45,879
next cloud section is basically a cache

00:25:43,840 --> 00:25:47,200
section that came from elsewhere all

00:25:45,879 --> 00:25:49,389
right it came from other machines

00:25:47,200 --> 00:25:51,009
someone else friend so it's still cash

00:25:49,389 --> 00:25:52,570
it's just it's not your machine that

00:25:51,009 --> 00:25:55,350
performed the initial computation to

00:25:52,570 --> 00:25:58,179
someone else maybe your CI maybe your

00:25:55,350 --> 00:26:02,679
your coworker or whatever it thinks of

00:25:58,179 --> 00:26:05,230
that and with that you can really reduce

00:26:02,679 --> 00:26:07,570
the bill time to almost nothing

00:26:05,230 --> 00:26:09,369
most operations you run unless you're

00:26:07,570 --> 00:26:11,999
actually performing like a wide range

00:26:09,369 --> 00:26:15,190
like a giant leaf acting over all right

00:26:11,999 --> 00:26:16,779
most operations that you you invoke have

00:26:15,190 --> 00:26:19,179
to redo a small part of the computation

00:26:16,779 --> 00:26:21,549
that they would have had to do before

00:26:19,179 --> 00:26:23,379
so with this right if you look at this

00:26:21,549 --> 00:26:24,610
those bars of course is like super date

00:26:23,379 --> 00:26:26,080
where we don't know what those parts

00:26:24,610 --> 00:26:27,999
correspond to right but it's not

00:26:26,080 --> 00:26:32,289
unthinkable to imagine is it going from

00:26:27,999 --> 00:26:34,210
a naive workspace a situation where you

00:26:32,289 --> 00:26:35,409
could actually wait for like 10 hours to

00:26:34,210 --> 00:26:37,389
validate EPR if you have a large

00:26:35,409 --> 00:26:39,820
workspace and if you do it naively

00:26:37,389 --> 00:26:41,440
10 hours would be the time right the if

00:26:39,820 --> 00:26:43,779
you go to a site you can reduce it to

00:26:41,440 --> 00:26:45,549
maybe an hour something like that but if

00:26:43,779 --> 00:26:47,350
you push it down right

00:26:45,549 --> 00:26:50,610
you can reduce the average time of your

00:26:47,350 --> 00:26:54,039
PR to just few minutes

00:26:50,610 --> 00:26:56,769
excellent yeah so this yeah in this case

00:26:54,039 --> 00:26:58,299
is something that again go in a second

00:26:56,769 --> 00:27:01,779
when I actually show you at your project

00:26:58,299 --> 00:27:04,239
can be reduced by 10 acts with some

00:27:01,779 --> 00:27:06,669
caveat that if you have like a 20 minute

00:27:04,239 --> 00:27:08,950
NPM install well then you know obviously

00:27:06,669 --> 00:27:10,720
like stars look would hope that right so

00:27:08,950 --> 00:27:12,639
you need to address some other pants

00:27:10,720 --> 00:27:15,039
all right I have may be differently if

00:27:12,639 --> 00:27:18,309
you want to really leverage right time

00:27:15,039 --> 00:27:20,350
to say like a minute but you know I can

00:27:18,309 --> 00:27:22,570
tell minutes see I time Oh seven minutes

00:27:20,350 --> 00:27:24,899
GI time it's very realistic without

00:27:22,570 --> 00:27:28,570
having to invent anything right by just

00:27:24,899 --> 00:27:29,489
reusing computation from previous next

00:27:28,570 --> 00:27:31,570
one

00:27:29,489 --> 00:27:32,799
yeah so in this case which is showing

00:27:31,570 --> 00:27:34,779
that you know developers and this year I

00:27:32,799 --> 00:27:37,419
can share the same cache so they can

00:27:34,779 --> 00:27:38,619
collaborate and so it's not just one

00:27:37,419 --> 00:27:40,749
developer doesn't have to reboot

00:27:38,619 --> 00:27:43,869
something another developer already

00:27:40,749 --> 00:27:45,879
built the COI and a BCI agent if the

00:27:43,869 --> 00:27:47,980
separate could like developer right

00:27:45,879 --> 00:27:49,389
every CI agent a separate context to

00:27:47,980 --> 00:27:51,279
being able to share stuff between

00:27:49,389 --> 00:27:56,889
different CIA agents can be a big deal

00:27:51,279 --> 00:27:59,679
over yeah so can I share my screen and I

00:27:56,889 --> 00:28:05,019
just want to I really want I want walk

00:27:59,679 --> 00:28:08,409
is through some sort of ideal project so

00:28:05,019 --> 00:28:12,399
you can see how easy it is to make it to

00:28:08,409 --> 00:28:14,049
make it work and and I can talk about

00:28:12,399 --> 00:28:21,159
some stuff a bit a bit more in in that

00:28:14,049 --> 00:28:24,239
sense case ok so where are you ok I'm

00:28:21,159 --> 00:28:30,609
gonna share my screen don't be alarmed

00:28:24,239 --> 00:28:35,859
okay can you see my skin okay so I have

00:28:30,609 --> 00:28:45,509
a small annex workspace alright with one

00:28:35,859 --> 00:28:45,509
app called shop and great

00:28:49,570 --> 00:28:55,430
let me try let me try again

00:28:52,070 --> 00:29:00,100
suddenly my computer like stopped

00:28:55,430 --> 00:29:00,100
collaborating just give me one second

00:29:02,050 --> 00:29:06,590
what I want to show you is basically

00:29:03,560 --> 00:29:08,600
whatever sin podium is two things it's

00:29:06,590 --> 00:29:10,730
like this sort of the basic example of

00:29:08,600 --> 00:29:14,150
like what it means to share computation

00:29:10,730 --> 00:29:15,680
which is good and then I will show you

00:29:14,150 --> 00:29:45,410
like an advanced example like if you

00:29:15,680 --> 00:29:51,620
have a very large app what happens okay

00:29:45,410 --> 00:29:59,780
maybe this is good enough okay let's try

00:29:51,620 --> 00:30:04,190
again okay can you see same works with

00:29:59,780 --> 00:30:08,360
different editor so at the simple next

00:30:04,190 --> 00:30:10,670
workspace has a an application here you

00:30:08,360 --> 00:30:12,740
know a plain application nothing

00:30:10,670 --> 00:30:16,790
interesting about so if I do something

00:30:12,740 --> 00:30:18,830
like a next build shop ah and the next

00:30:16,790 --> 00:30:22,340
build energy built up almost the same

00:30:18,830 --> 00:30:24,320
except one thing that I own second but

00:30:22,340 --> 00:30:28,910
do the next dude shop all right and if I

00:30:24,320 --> 00:30:30,950
do it the first time what is going to

00:30:28,910 --> 00:30:32,590
happen is I'm not going to do it and

00:30:30,950 --> 00:30:35,180
throw because it's gonna take forever so

00:30:32,590 --> 00:30:39,860
I'm building this in a fast way

00:30:35,180 --> 00:30:45,640
all right so we don't have to wait the

00:30:39,860 --> 00:30:45,640
idea behind come on

00:30:46,010 --> 00:30:50,120
this actually a great example of why a

00:30:48,320 --> 00:30:51,710
computation caching rocks so it took 20

00:30:50,120 --> 00:30:56,810
seconds to do it and this is a devil

00:30:51,710 --> 00:31:01,200
brought more to the I mean so so I do

00:30:56,810 --> 00:31:02,610
this app all right if I ran it again

00:31:01,200 --> 00:31:06,480
there is out to the instant and I will

00:31:02,610 --> 00:31:08,700
see this this note saying that it has

00:31:06,480 --> 00:31:11,070
been retrieved from cache right so any

00:31:08,700 --> 00:31:13,320
operation the next works like that right

00:31:11,070 --> 00:31:17,450
if you're using a newer version of an ax

00:31:13,320 --> 00:31:20,130
if using 812 you can opt into this right

00:31:17,450 --> 00:31:22,799
if you use an older one there isn't very

00:31:20,130 --> 00:31:24,960
easy way to make book that's all so

00:31:22,799 --> 00:31:26,490
every iteration you run build the test

00:31:24,960 --> 00:31:28,620
as map right it would be retrieved from

00:31:26,490 --> 00:31:31,200
cached at the way and X does it is it

00:31:28,620 --> 00:31:33,000
looks at the source code not of your

00:31:31,200 --> 00:31:34,559
whole workspace but of the part of the

00:31:33,000 --> 00:31:37,860
workspace relevant to the decoration

00:31:34,559 --> 00:31:39,270
right it knows what because it knows how

00:31:37,860 --> 00:31:40,679
you work places where I wrap it can

00:31:39,270 --> 00:31:42,929
deduce which part of the workspace it

00:31:40,679 --> 00:31:44,910
need to look into to see what's around

00:31:42,929 --> 00:31:46,169
do the operation that's it that it looks

00:31:44,910 --> 00:31:48,179
at what you're trying to do for example

00:31:46,169 --> 00:31:51,480
next build shop is different from the

00:31:48,179 --> 00:31:52,650
Prado Beasley so what ran to do and it

00:31:51,480 --> 00:31:54,870
looks at the environment for example

00:31:52,650 --> 00:31:56,280
maybe your OS you can provision what it

00:31:54,870 --> 00:31:59,070
means for you to have the environment

00:31:56,280 --> 00:32:00,480
well first of no takes like that it

00:31:59,070 --> 00:32:03,299
takes the three pieces right and it

00:32:00,480 --> 00:32:05,790
creates a unique sort of value for

00:32:03,299 --> 00:32:08,100
computation and then checks locally if I

00:32:05,790 --> 00:32:10,200
do like a highly computer the same stuff

00:32:08,100 --> 00:32:12,510
before right if the answer is yes

00:32:10,200 --> 00:32:17,130
instead of recomputing it which we know

00:32:12,510 --> 00:32:18,900
takes the 22nd in this case it can show

00:32:17,130 --> 00:32:21,960
you the result instantly and it doesn't

00:32:18,900 --> 00:32:25,320
just printed it also if if I remove this

00:32:21,960 --> 00:32:28,049
right and I run it again as you can see

00:32:25,320 --> 00:32:30,540
the dist folder got populated correctly

00:32:28,049 --> 00:32:32,309
as well so it you know it places the

00:32:30,540 --> 00:32:34,320
files but it should the place and it

00:32:32,309 --> 00:32:36,480
replace the terminal app so you threes

00:32:34,320 --> 00:32:39,059
out it's basically the same except you

00:32:36,480 --> 00:32:41,460
see this you know know that hey you know

00:32:39,059 --> 00:32:42,870
which alike we assume there is out the

00:32:41,460 --> 00:32:45,179
same when you played it correctly right

00:32:42,870 --> 00:32:46,710
we didn't complete will it leave it from

00:32:45,179 --> 00:32:48,720
the cache all right so this is the guy

00:32:46,710 --> 00:32:49,200
behind reputation cashing in an axe in

00:32:48,720 --> 00:32:51,540
general

00:32:49,200 --> 00:32:53,520
by default it works locally like on your

00:32:51,540 --> 00:32:55,440
machine so if I run it twice as you can

00:32:53,520 --> 00:32:56,100
see you know what second time is free

00:32:55,440 --> 00:33:00,620
right

00:32:56,100 --> 00:33:04,020
and it works locally on your machine

00:33:00,620 --> 00:33:05,669
that's the input part another fun part

00:33:04,020 --> 00:33:08,160
to note here that this computation cache

00:33:05,669 --> 00:33:10,080
is different from like an artifact right

00:33:08,160 --> 00:33:13,409
there are not versions here we're not

00:33:10,080 --> 00:33:14,310
pushing a listen to some artifactory to

00:33:13,409 --> 00:33:16,560
say yeah this is verse

00:33:14,310 --> 00:33:19,860
1.0 this applet even though there are no

00:33:16,560 --> 00:33:21,870
verses it seemed today a better way to

00:33:19,860 --> 00:33:23,970
think about is like how git works when

00:33:21,870 --> 00:33:26,130
it has a shot right the shock response

00:33:23,970 --> 00:33:28,530
to some state of view of your repository

00:33:26,130 --> 00:33:30,450
so when you can uniquely refer to the

00:33:28,530 --> 00:33:31,980
safe use on the job right this is

00:33:30,450 --> 00:33:35,490
somewhat simple okay

00:33:31,980 --> 00:33:36,900
so this this computation cast works with

00:33:35,490 --> 00:33:38,220
any point iteration if we do the same

00:33:36,900 --> 00:33:39,990
for sure testing

00:33:38,220 --> 00:33:42,720
I mean testing tends to be quite fast

00:33:39,990 --> 00:33:45,900
because we use just but you know it in

00:33:42,720 --> 00:33:47,760
some cases can be again it is much fast

00:33:45,900 --> 00:33:49,470
when I ran second time it some cases you

00:33:47,760 --> 00:33:51,000
can take all the time right especially

00:33:49,470 --> 00:33:53,880
if you have integration test not very

00:33:51,000 --> 00:33:55,710
heavy right so so that the computation

00:33:53,880 --> 00:33:58,320
catch the problem with just doing that

00:33:55,710 --> 00:33:59,820
is if Jeff wants to build the same

00:33:58,320 --> 00:34:02,340
shopper at that I've already built

00:33:59,820 --> 00:34:03,930
he cannot benefit from my building you

00:34:02,340 --> 00:34:05,970
have to build it himself so we basically

00:34:03,930 --> 00:34:09,210
have to recompute the same thing -

00:34:05,970 --> 00:34:11,640
really in this simple setup what we get

00:34:09,210 --> 00:34:14,070
is never a build or test the same code

00:34:11,640 --> 00:34:15,750
twice of the same machine all right so

00:34:14,070 --> 00:34:17,670
on the same extreme the same laptop I

00:34:15,750 --> 00:34:19,470
never have to redo the same work again

00:34:17,670 --> 00:34:22,200
right which is good but we would like to

00:34:19,470 --> 00:34:23,820
share this work across the team you know

00:34:22,200 --> 00:34:25,290
across the work oh if it's not on the

00:34:23,820 --> 00:34:29,040
source project right you use a knack for

00:34:25,290 --> 00:34:33,930
that across the whole community and to

00:34:29,040 --> 00:34:38,190
do that what we need to do is me can you

00:34:33,930 --> 00:34:43,950
see my browser okay cool what we need to

00:34:38,190 --> 00:34:49,560
do is we need to connect just this repo

00:34:43,950 --> 00:34:52,620
to distributed cache right and I can and

00:34:49,560 --> 00:34:58,350
I can do it like this you see I tried a

00:34:52,620 --> 00:35:00,240
bunch of things - I just need to

00:34:58,350 --> 00:35:03,060
basically copy this command all right I

00:35:00,240 --> 00:35:09,390
need to see if I'm using NPM okay p.m.

00:35:03,060 --> 00:35:15,180
and yeah I need to run it go now over

00:35:09,390 --> 00:35:17,640
here and I invoke this command what are

00:35:15,180 --> 00:35:19,500
next going to do is going to install

00:35:17,640 --> 00:35:22,020
this package the next client package and

00:35:19,500 --> 00:35:24,270
is going to update one file to basically

00:35:22,020 --> 00:35:26,100
set it say if you couldn't find anything

00:35:24,270 --> 00:35:28,250
in your local cache look over there as

00:35:26,100 --> 00:35:28,250
well

00:35:28,290 --> 00:35:35,170
look it okay okay clear it

00:35:31,150 --> 00:35:36,790
so now nothing else is required that's

00:35:35,170 --> 00:35:40,150
it so you need to run one command and

00:35:36,790 --> 00:35:42,609
you connected to the remote thing so the

00:35:40,150 --> 00:35:44,200
difference here now so between what I

00:35:42,609 --> 00:35:46,240
had before right and what I have right

00:35:44,200 --> 00:35:48,190
now is that let me delete my local cache

00:35:46,240 --> 00:35:50,650
right so I start to scratch if I just

00:35:48,190 --> 00:35:52,570
pull the sequel right if I again build

00:35:50,650 --> 00:35:56,859
my app it's going to take some time

00:35:52,570 --> 00:35:59,619
because there is no local cache right it

00:35:56,859 --> 00:36:01,359
will take 20 seconds right and that's

00:35:59,619 --> 00:36:03,010
the problem with with local cache this

00:36:01,359 --> 00:36:04,750
is basically either might be in a

00:36:03,010 --> 00:36:06,310
different person or may be on a

00:36:04,750 --> 00:36:08,440
different machine well maybe this is

00:36:06,310 --> 00:36:17,290
you're trying to do it right has to do

00:36:08,440 --> 00:36:19,330
it that sucks you know we have to wait

00:36:17,290 --> 00:36:22,060
this is actually like - waiting how long

00:36:19,330 --> 00:36:24,760
it takes went back to build is a like an

00:36:22,060 --> 00:36:25,810
advertisement for computation cache you

00:36:24,760 --> 00:36:27,250
don't even need to do anything apart

00:36:25,810 --> 00:36:28,450
from life that's why it was to one okay

00:36:27,250 --> 00:36:29,830
that is actually if you wanted approach

00:36:28,450 --> 00:36:32,920
Jesus Christ that's going to take

00:36:29,830 --> 00:36:34,690
forever so if I don't again this is

00:36:32,920 --> 00:36:38,020
local cache right as before but now

00:36:34,690 --> 00:36:48,339
imagine I'm Jeff a handsome a version of

00:36:38,020 --> 00:36:50,080
Jeff alright I'm more handsome so so I'm

00:36:48,339 --> 00:36:52,089
Jeff I don't have local cache anymore so

00:36:50,080 --> 00:36:55,089
I just pull the same repo and how can i

00:36:52,089 --> 00:36:57,609
you know benefit from having victor as

00:36:55,089 --> 00:36:59,380
my teammate well one way to benefit is

00:36:57,609 --> 00:37:01,599
Leslie to compute a bunch of stuff so

00:36:59,380 --> 00:37:05,320
when I try to compute it what happens is

00:37:01,599 --> 00:37:07,660
you know Jeff in this case I would get

00:37:05,320 --> 00:37:09,640
results instantly again he played all

00:37:07,660 --> 00:37:12,280
files will be the right place as if you

00:37:09,640 --> 00:37:13,690
run it locally but from a distinct good

00:37:12,280 --> 00:37:14,890
cache and you can see the result you're

00:37:13,690 --> 00:37:16,960
saying hey we got it from an ex-lap

00:37:14,890 --> 00:37:19,810
right so this is not a local cache it we

00:37:16,960 --> 00:37:22,180
can it come from a remote location

00:37:19,810 --> 00:37:23,470
all right any finance again now I this

00:37:22,180 --> 00:37:25,240
keep second time it doesn't have to go

00:37:23,470 --> 00:37:27,580
anywhere because now it has it locally

00:37:25,240 --> 00:37:29,260
you know you don't have to hope cross

00:37:27,580 --> 00:37:31,599
network to find the artifact all right

00:37:29,260 --> 00:37:33,339
that idea behind this table caption that

00:37:31,599 --> 00:37:34,060
when you can find it locally you can

00:37:33,339 --> 00:37:35,560
find it elsewhere

00:37:34,060 --> 00:37:37,150
all right and the YouTube might see us

00:37:35,560 --> 00:37:39,430
yeah I can share the same location where

00:37:37,150 --> 00:37:41,230
you can you know guilt the cached

00:37:39,430 --> 00:37:43,119
artifacts or like a computation art

00:37:41,230 --> 00:37:45,160
faxed from again work so beautifully

00:37:43,119 --> 00:37:45,760
cannot it's not built to see to kill

00:37:45,160 --> 00:37:47,170
anything right

00:37:45,760 --> 00:37:49,600
very different from a defector in this

00:37:47,170 --> 00:37:52,570
way we're cashing computation not files

00:37:49,600 --> 00:37:54,220
okay so what that happens and now I have

00:37:52,570 --> 00:37:58,000
what I have here is a very simple

00:37:54,220 --> 00:37:59,859
project registers dingo app and you can

00:37:58,000 --> 00:38:04,030
see well if I have a single app how

00:37:59,859 --> 00:38:06,280
useful is that you could say and because

00:38:04,030 --> 00:38:08,530
it's like I'm literally putting the sign

00:38:06,280 --> 00:38:11,020
up twice or do I like I do it very real

00:38:08,530 --> 00:38:12,280
right you could say but the answer is

00:38:11,020 --> 00:38:13,869
actually you don't do it very it's

00:38:12,280 --> 00:38:16,090
surprisingly many times the same thing

00:38:13,869 --> 00:38:18,369
attributed over and over and over again

00:38:16,090 --> 00:38:21,130
alright the example would be right you

00:38:18,369 --> 00:38:23,770
your CI when you sell if you are to

00:38:21,130 --> 00:38:26,109
yours here huh I don't know what Jenkins

00:38:23,770 --> 00:38:28,119
said Jenkins would run your PR built-in

00:38:26,109 --> 00:38:29,500
test stuff and even if you use affected

00:38:28,119 --> 00:38:32,020
let's say you use the fact that you only

00:38:29,500 --> 00:38:34,720
rebuild 20% of your workspace and that

00:38:32,020 --> 00:38:36,609
PR right then you have to review this PR

00:38:34,720 --> 00:38:38,440
again because someone asks for a call a

00:38:36,609 --> 00:38:40,450
small change or maybe you have a thing

00:38:38,440 --> 00:38:41,980
we have to be up-to-date with master you

00:38:40,450 --> 00:38:44,140
have to rebase and you build it again

00:38:41,980 --> 00:38:45,970
right yeah so you have to redo the same

00:38:44,140 --> 00:38:48,070
PR again and in many organizations the

00:38:45,970 --> 00:38:50,380
same PR have been built gazillion times

00:38:48,070 --> 00:38:52,630
right some times 20 times before you

00:38:50,380 --> 00:38:55,630
learn at the master right managers at

00:38:52,630 --> 00:38:57,580
the master presumably whatever you merge

00:38:55,630 --> 00:38:59,050
into master has been testing your PR the

00:38:57,580 --> 00:38:59,890
churches I have the same a very similar

00:38:59,050 --> 00:39:02,500
all right

00:38:59,890 --> 00:39:05,380
so things like that mean that a lot of

00:39:02,500 --> 00:39:07,119
rounds you do when you see I did do the

00:39:05,380 --> 00:39:08,440
same computation over and over again and

00:39:07,119 --> 00:39:10,990
not just twice

00:39:08,440 --> 00:39:14,050
often thousands of times all right

00:39:10,990 --> 00:39:15,910
doesn't of times so if you enable and

00:39:14,050 --> 00:39:18,520
even though you hope you have sort of

00:39:15,910 --> 00:39:19,750
computation of not very granular but do

00:39:18,520 --> 00:39:21,340
we get an app in this case is not a

00:39:19,750 --> 00:39:24,520
granular computation has to be build the

00:39:21,340 --> 00:39:26,859
whole app right even that alone can be

00:39:24,520 --> 00:39:29,350
used UCI time like since essentially by

00:39:26,859 --> 00:39:31,840
a factor of three for example because

00:39:29,350 --> 00:39:33,820
most of the time when you reboot in this

00:39:31,840 --> 00:39:35,950
app you can just say hey i found this

00:39:33,820 --> 00:39:38,260
exact dude before i don't have to be

00:39:35,950 --> 00:39:40,000
running to get right that's why it's not

00:39:38,260 --> 00:39:42,910
that he played it's not something that

00:39:40,000 --> 00:39:44,650
could be replaced with like a sack right

00:39:42,910 --> 00:39:46,359
because from the affected point of you

00:39:44,650 --> 00:39:48,640
from the code change analysis point of

00:39:46,359 --> 00:39:50,440
view every time you do you PR say map

00:39:48,640 --> 00:39:52,750
has been changed right the the short

00:39:50,440 --> 00:39:54,789
path in this case it's changed every

00:39:52,750 --> 00:39:58,869
single time no difference

00:39:54,789 --> 00:40:00,729
and what is different here is that the

00:39:58,869 --> 00:40:04,979
second time around that you are the

00:40:00,729 --> 00:40:08,829
capitation we'll d-do it would be

00:40:04,979 --> 00:40:11,140
reached right and at a side-effect

00:40:08,829 --> 00:40:12,789
the nice part about it is if you like

00:40:11,140 --> 00:40:14,739
send you PR and you have like a hundred

00:40:12,789 --> 00:40:17,229
leagues there that's affected and like

00:40:14,739 --> 00:40:19,209
one of them fail and you go back and

00:40:17,229 --> 00:40:21,189
you're like ah you know now I have to a

00:40:19,209 --> 00:40:23,559
copy and paste and lips it failed to run

00:40:21,189 --> 00:40:25,089
ten local to troubleshoot I don't like

00:40:23,559 --> 00:40:26,979
whopping paste and I always make that

00:40:25,089 --> 00:40:29,259
you know like either all the second sink

00:40:26,979 --> 00:40:31,089
and small and nuances that make my life

00:40:29,259 --> 00:40:33,369
a little bit worse you could always do

00:40:31,089 --> 00:40:39,459
things like that and say actually want

00:40:33,369 --> 00:40:40,929
to target test retest everything I mean

00:40:39,459 --> 00:40:43,890
in this case it is not much one example

00:40:40,929 --> 00:40:47,319
because then but the idea would be that

00:40:43,890 --> 00:40:48,699
if I like see I just tested my thing

00:40:47,319 --> 00:40:51,609
right and if I do it again

00:40:48,699 --> 00:40:53,890
most of my test would be instant and

00:40:51,609 --> 00:40:55,839
only the one that failed on here would

00:40:53,890 --> 00:40:58,029
be real Rambo right so I don't have to

00:40:55,839 --> 00:40:59,949
pick the project that I need to attend

00:40:58,029 --> 00:41:01,869
to because whatever was successful on

00:40:59,949 --> 00:41:03,909
see I would be instant my machine

00:41:01,869 --> 00:41:05,349
whatever wouldn't successful I have to

00:41:03,909 --> 00:41:07,839
do anyway so I don't have to copy paste

00:41:05,349 --> 00:41:09,999
if I can always think about my repo and

00:41:07,839 --> 00:41:11,499
like I can redo everything you do and

00:41:09,999 --> 00:41:13,119
everything becomes very cheap because

00:41:11,499 --> 00:41:13,569
most what I'm trying to redo has been

00:41:13,119 --> 00:41:15,189
done already

00:41:13,569 --> 00:41:16,779
okay now let me show you something that

00:41:15,189 --> 00:41:19,359
is much more interesting this is a very

00:41:16,779 --> 00:41:21,640
basic report that basically says that

00:41:19,359 --> 00:41:24,400
even if you have a single app in you in

00:41:21,640 --> 00:41:25,959
your workspace right one application or

00:41:24,400 --> 00:41:27,519
you have an angular CLI workspace and if

00:41:25,959 --> 00:41:29,589
you move it or next with a single app

00:41:27,519 --> 00:41:32,519
without doing any refactoring by just

00:41:29,589 --> 00:41:36,219
connecting to the cloud you can get some

00:41:32,519 --> 00:41:40,019
benefits in there but the video cool

00:41:36,219 --> 00:41:42,939
part like that it's a game-changer for

00:41:40,019 --> 00:41:44,769
sort of larger projects where you sort

00:41:42,939 --> 00:41:48,130
of have no choice

00:41:44,769 --> 00:41:51,489
previously reviewed screwed

00:41:48,130 --> 00:41:54,099
it is Samsung Nexus okay so I have a

00:41:51,489 --> 00:41:57,819
repo here called incremental large repo

00:41:54,099 --> 00:42:00,849
right and what it has and what I have at

00:41:57,819 --> 00:42:03,729
this repo is two applications AB 0 and

00:42:00,849 --> 00:42:05,949
up one they are the same except they

00:42:03,729 --> 00:42:07,020
watered up differently all right we

00:42:05,949 --> 00:42:11,460
should in 1 min

00:42:07,020 --> 00:42:14,910
we should move to the QA superfast it

00:42:11,460 --> 00:42:16,860
will take a minute more or less and each

00:42:14,910 --> 00:42:18,540
of those app is composed of many many

00:42:16,860 --> 00:42:20,700
lips and each lip has a lot of

00:42:18,540 --> 00:42:24,030
components okay so those are very large

00:42:20,700 --> 00:42:27,110
abs abs your neck wall by very mean

00:42:24,030 --> 00:42:30,090
somewhat large apps right if I pull my

00:42:27,110 --> 00:42:33,540
try to run one of them let's see I'm

00:42:30,090 --> 00:42:35,850
doing an XOR of app one what is going to

00:42:33,540 --> 00:42:38,460
happen is energy surfacing again Angie

00:42:35,850 --> 00:42:40,200
and I see the same except a next as cash

00:42:38,460 --> 00:42:43,080
everything else works exactly the same

00:42:40,200 --> 00:42:45,540
identical so whenever I in the serve is

00:42:43,080 --> 00:42:50,130
going to take some time and is you can

00:42:45,540 --> 00:42:51,360
see probably take I don't know I mean

00:42:50,130 --> 00:42:53,250
it's or something

00:42:51,360 --> 00:42:55,380
let's wait I just want to show you the

00:42:53,250 --> 00:42:57,930
difference so you see I why

00:42:55,380 --> 00:43:00,030
incrementality is so key right for

00:42:57,930 --> 00:43:02,430
larger this is a this is not even a

00:43:00,030 --> 00:43:04,770
large larger it's just a moderately

00:43:02,430 --> 00:43:07,110
sized that I'll do a little plug for an

00:43:04,770 --> 00:43:09,930
ex dev because we're going over a lot of

00:43:07,110 --> 00:43:11,010
the cool like what the experiences and

00:43:09,930 --> 00:43:12,750
what the output is but if you want to

00:43:11,010 --> 00:43:15,710
understand how these things work in more

00:43:12,750 --> 00:43:18,090
detail we have good guides on a next dev

00:43:15,710 --> 00:43:19,500
like if you look in the CI section of

00:43:18,090 --> 00:43:21,810
the docs and it talks about

00:43:19,500 --> 00:43:24,750
incrementality and cashing in more

00:43:21,810 --> 00:43:26,730
detail yeah exactly yeah

00:43:24,750 --> 00:43:29,610
good point yeah check out an XO deaf

00:43:26,730 --> 00:43:32,220
there are a lot of we revamped a lot of

00:43:29,610 --> 00:43:34,230
guides tutorials updated video so

00:43:32,220 --> 00:43:37,820
there's a lot of fresh content in there

00:43:34,230 --> 00:43:40,770
that reflects the current state of and

00:43:37,820 --> 00:43:42,060
ok we're still waiting look how bad this

00:43:40,770 --> 00:43:45,060
is the basically typical web that

00:43:42,060 --> 00:43:46,890
expands right like you have a modern

00:43:45,060 --> 00:43:48,420
designs app you can you know go to the

00:43:46,890 --> 00:43:50,400
Wolfram and come back and still be

00:43:48,420 --> 00:43:51,690
serving you are right this is not a very

00:43:50,400 --> 00:43:54,990
good experience

00:43:51,690 --> 00:43:56,460
I'll take forever without doom right

00:43:54,990 --> 00:43:58,590
that it's all mushy PU it usually takes

00:43:56,460 --> 00:44:03,320
about a minute but now let's say I sort

00:43:58,590 --> 00:44:06,320
of my app is 0 how long would it be oh

00:44:03,320 --> 00:44:06,320
shoot

00:44:12,810 --> 00:44:16,780
demo error because we are Scott load

00:44:16,150 --> 00:44:18,880
context

00:44:16,780 --> 00:44:51,840
I don't explain just that just give me

00:44:18,880 --> 00:44:51,840
one second sorry okay let's try again

00:44:51,990 --> 00:45:01,630
okay say map again if I do an X or F one

00:44:59,800 --> 00:45:05,650
we're going to see schedule tomorrow

00:45:01,630 --> 00:45:10,300
okay so but if I do the AB zero it could

00:45:05,650 --> 00:45:12,160
be a bit better and so it's going to

00:45:10,300 --> 00:45:15,760
give you the same app with all these

00:45:12,160 --> 00:45:17,860
dependencies smartly and it's sorted it

00:45:15,760 --> 00:45:19,780
took a few seconds right and the

00:45:17,860 --> 00:45:21,580
important bit here is that if I I

00:45:19,780 --> 00:45:23,200
already had local cache that's why it

00:45:21,580 --> 00:45:25,750
was so fast but if I move my local cache

00:45:23,200 --> 00:45:30,100
right let's say I'm Jeff and I do the

00:45:25,750 --> 00:45:32,740
same the result will still be pretty

00:45:30,100 --> 00:45:34,840
good to take a few seconds because this

00:45:32,740 --> 00:45:44,260
is a large app it's lots of large

00:45:34,840 --> 00:45:46,570
components it has to fetch and and now

00:45:44,260 --> 00:45:49,390
it's running and the second time around

00:45:46,570 --> 00:45:52,000
again it's faster so basically we

00:45:49,390 --> 00:45:54,550
reduced our time from without Zoo when I

00:45:52,000 --> 00:45:56,620
actually have my CPU Ryan well from one

00:45:54,550 --> 00:46:02,500
minute to about four seconds all right

00:45:56,620 --> 00:46:03,970
and the idea here is that if I the size

00:46:02,500 --> 00:46:07,350
of my application basically doesn't

00:46:03,970 --> 00:46:09,850
matter to how expensive initial surveys

00:46:07,350 --> 00:46:12,430
right side doesn't know what matters

00:46:09,850 --> 00:46:14,080
only is like this initially source

00:46:12,430 --> 00:46:16,120
should always be about constant you know

00:46:14,080 --> 00:46:18,070
if just a few seconds and then if I make

00:46:16,120 --> 00:46:22,000
a change right if looking to change your

00:46:18,070 --> 00:46:23,770
library locally well then decide the the

00:46:22,000 --> 00:46:24,280
cost of this change the time I have to

00:46:23,770 --> 00:46:25,780
wait

00:46:24,280 --> 00:46:28,270
it's proportionate to the signs of the

00:46:25,780 --> 00:46:30,070
change not the cycle application it is

00:46:28,270 --> 00:46:31,840
not exactly to in here you know because

00:46:30,070 --> 00:46:34,510
I still use a pack under the hood but

00:46:31,840 --> 00:46:36,730
it's more to register so it allows you

00:46:34,510 --> 00:46:38,590
to actually solve substantially large

00:46:36,730 --> 00:46:40,030
applications if you have an energy store

00:46:38,590 --> 00:46:42,550
but now that takes ten minutes or five

00:46:40,030 --> 00:46:45,849
minutes I I can guarantee you that by

00:46:42,550 --> 00:46:47,710
spending I don't know an hour and may

00:46:45,849 --> 00:46:49,660
convert into something an hour would be

00:46:47,710 --> 00:46:51,250
by spending some time been working

00:46:49,660 --> 00:46:53,800
something like this which is not that

00:46:51,250 --> 00:46:55,630
difficult you can reduce your initial

00:46:53,800 --> 00:46:59,380
entry sort of from five minutes to you

00:46:55,630 --> 00:47:00,700
know five seconds so at least you took

00:46:59,380 --> 00:47:02,470
five minutes but at least you answered

00:47:00,700 --> 00:47:04,270
one of the questions with that demo

00:47:02,470 --> 00:47:07,630
which was does an X caching work with

00:47:04,270 --> 00:47:09,400
energy serve as well that is a good

00:47:07,630 --> 00:47:10,840
point let me actually clarify this the

00:47:09,400 --> 00:47:12,490
energy source from this repo which is a

00:47:10,840 --> 00:47:14,170
public repo and I can share it with you

00:47:12,490 --> 00:47:15,550
it's done differently because webpack

00:47:14,170 --> 00:47:18,369
that sort of doesn't work as caching

00:47:15,550 --> 00:47:20,440
well so I had to when I I stood on an X

00:47:18,369 --> 00:47:22,240
or Y and yourself because you don't have

00:47:20,440 --> 00:47:23,349
even even care what sort of does right

00:47:22,240 --> 00:47:24,940
you ready that just sort of does

00:47:23,349 --> 00:47:25,840
something right but I'm actually doing

00:47:24,940 --> 00:47:28,780
something else

00:47:25,840 --> 00:47:30,280
yeah I'm butan my stuff and then I am

00:47:28,780 --> 00:47:32,859
solving the folder right so I do

00:47:30,280 --> 00:47:34,990
something else in there it's sort of a

00:47:32,859 --> 00:47:36,550
naive way to make a cash friend there

00:47:34,990 --> 00:47:38,200
are less naive way that are even more

00:47:36,550 --> 00:47:41,500
performant and what I'm sure to make it

00:47:38,200 --> 00:47:42,940
friendly but this is a naive way so if

00:47:41,500 --> 00:47:44,500
you have a small app if you enter sort

00:47:42,940 --> 00:47:46,359
of sixth twenty seconds well like 30

00:47:44,500 --> 00:47:48,970
seconds okay maybe don't bother right

00:47:46,359 --> 00:47:50,830
you know you are you're in a fine spot

00:47:48,970 --> 00:47:52,690
it's not a problem it's more like when

00:47:50,830 --> 00:47:55,089
you're going in too many minutes then

00:47:52,690 --> 00:47:56,589
you can say maybe I have to abandoned

00:47:55,089 --> 00:47:57,820
the default webpack way of doing it

00:47:56,589 --> 00:48:02,290
because what conscience doesn't scale

00:47:57,820 --> 00:48:05,859
that well for large apps all right it's

00:48:02,290 --> 00:48:07,300
sort of not it it's usable but it

00:48:05,859 --> 00:48:08,950
requires you to sort of abandoned some

00:48:07,300 --> 00:48:10,300
of the more common ways of using webpack

00:48:08,950 --> 00:48:11,830
and just tweak it a little bit all right

00:48:10,300 --> 00:48:14,680
and the three people that I have is

00:48:11,830 --> 00:48:16,540
called the next large increment worried

00:48:14,680 --> 00:48:19,030
for large is a key part right

00:48:16,540 --> 00:48:21,130
it shows how it's not super hard to do

00:48:19,030 --> 00:48:25,480
it if you can do it really well maybe it

00:48:21,130 --> 00:48:29,230
is just a chair yeah let me post a link

00:48:25,480 --> 00:48:31,780
in a chat I encourage you to look at it

00:48:29,230 --> 00:48:34,750
if you build in a uber larger right if

00:48:31,780 --> 00:48:36,460
you have an app that is like you feel

00:48:34,750 --> 00:48:37,780
like the dev experience is not very good

00:48:36,460 --> 00:48:39,820
because it's so

00:48:37,780 --> 00:48:42,340
well I mean it's actually not super hard

00:48:39,820 --> 00:48:49,000
to make it reasonably well perform it

00:48:42,340 --> 00:48:50,950
ago couple more questions let me already

00:48:49,000 --> 00:48:53,640
cap some of the ones that I answered and

00:48:50,950 --> 00:48:56,470
victory answered over text first alright

00:48:53,640 --> 00:48:58,090
so yeah there was a question about if in

00:48:56,470 --> 00:49:00,940
exports microfinance which we have a

00:48:58,090 --> 00:49:03,760
great blog article for so I got the

00:49:00,940 --> 00:49:05,830
answer with the blog article it focuses

00:49:03,760 --> 00:49:08,800
on react but there's it there's nothing

00:49:05,830 --> 00:49:10,420
really react specific in the article yes

00:49:08,800 --> 00:49:11,710
that we were getting asked from more

00:49:10,420 --> 00:49:12,370
people in react community about it at

00:49:11,710 --> 00:49:15,160
that time

00:49:12,370 --> 00:49:16,660
can I point to this it's not just a next

00:49:15,160 --> 00:49:18,130
supports mic up front and oh well I

00:49:16,660 --> 00:49:20,470
could keep it microphone is very low

00:49:18,130 --> 00:49:22,480
thing independently deployable units

00:49:20,470 --> 00:49:24,870
right it's like Molnar equals actually

00:49:22,480 --> 00:49:27,190
make using microphone turns a lot easier

00:49:24,870 --> 00:49:29,440
microphones have downsides and this

00:49:27,190 --> 00:49:31,990
article shortage is something that a lot

00:49:29,440 --> 00:49:34,450
of those downsides I they go away become

00:49:31,990 --> 00:49:36,670
a lot less severe if you have like a

00:49:34,450 --> 00:49:40,660
more sophisticated bill to like annex

00:49:36,670 --> 00:49:43,030
yep yeah we've got clients who are using

00:49:40,660 --> 00:49:45,340
that in production and it's working out

00:49:43,030 --> 00:49:47,590
I mean there are challenges to it mostly

00:49:45,340 --> 00:49:51,100
but the challenges aren't related to mon

00:49:47,590 --> 00:49:52,800
repos it's it's related to how you share

00:49:51,100 --> 00:49:55,930
things and your deployments and how you

00:49:52,800 --> 00:49:57,880
how you know how the how you know what

00:49:55,930 --> 00:50:00,370
needs to be redeployed how you constrain

00:49:57,880 --> 00:50:03,460
your team to that I could do more

00:50:00,370 --> 00:50:05,650
incremental deployments another person

00:50:03,460 --> 00:50:08,800
asked if we have integration points with

00:50:05,650 --> 00:50:10,120
net core which is being worked on at

00:50:08,800 --> 00:50:12,510
least it's a proof of concept phase

00:50:10,120 --> 00:50:14,950
right now with RT M

00:50:12,510 --> 00:50:17,670
that was it that's important to us

00:50:14,950 --> 00:50:20,340
though and yeah I'm liking it already

00:50:17,670 --> 00:50:23,020
yeah so that's important part that

00:50:20,340 --> 00:50:24,910
bicycles are different experience you

00:50:23,020 --> 00:50:27,430
can have with an X the basic experience

00:50:24,910 --> 00:50:28,960
of like okay my caching works the fact

00:50:27,430 --> 00:50:30,820
that who works at the basic staff works

00:50:28,960 --> 00:50:33,430
that works with any technology already

00:50:30,820 --> 00:50:35,710
it's it's that like the next all the

00:50:33,430 --> 00:50:37,390
work the next does over there is sort of

00:50:35,710 --> 00:50:38,590
process oriented so as long as you can

00:50:37,390 --> 00:50:41,680
support a process it can be anything

00:50:38,590 --> 00:50:44,200
okay so a dogmatic or Java go doesn't

00:50:41,680 --> 00:50:47,140
matter the the next level of experience

00:50:44,200 --> 00:50:48,630
is do I have like a good collection of

00:50:47,140 --> 00:50:51,190
schematics that can used to generate

00:50:48,630 --> 00:50:52,630
artifacts like someone it was

00:50:51,190 --> 00:50:55,270
right now we don't so you have to you

00:50:52,630 --> 00:50:57,339
know either also files yourself or like

00:50:55,270 --> 00:51:00,280
create your own schematic so that part

00:50:57,339 --> 00:51:02,410
isn't there so if you if you have a few

00:51:00,280 --> 00:51:03,819
apps you want to just manage yourself

00:51:02,410 --> 00:51:06,099
that will work already you don't have to

00:51:03,819 --> 00:51:08,170
wait for anything but if you're thinking

00:51:06,099 --> 00:51:11,050
okay I'm going to create a hundred

00:51:08,170 --> 00:51:13,359
dotted core micro-services and I need a

00:51:11,050 --> 00:51:16,300
lot of help of schematics and stuff okay

00:51:13,359 --> 00:51:19,500
maybe you know like you have to put some

00:51:16,300 --> 00:51:19,500
work in to make it a texture is good

00:51:20,010 --> 00:51:26,140
exactly another one asked about

00:51:23,410 --> 00:51:28,660
integration with Azure DevOps and I just

00:51:26,140 --> 00:51:29,770
posted a link in our chat that has an

00:51:28,660 --> 00:51:32,410
integration with that it shows off

00:51:29,770 --> 00:51:34,119
parallelization and affected builds but

00:51:32,410 --> 00:51:35,770
it doesn't yet have incremental builds

00:51:34,119 --> 00:51:38,160
or caching in it that's probably

00:51:35,770 --> 00:51:40,630
something we could update soon to

00:51:38,160 --> 00:51:43,240
connect with NX cloud just to show some

00:51:40,630 --> 00:51:43,750
of the more recent improvements yeah I

00:51:43,240 --> 00:51:46,680
agree

00:51:43,750 --> 00:51:49,480
someone asked about NX support for basil

00:51:46,680 --> 00:51:51,280
the short story is like I mean we have a

00:51:49,480 --> 00:51:52,900
storied history with basil Victor and I

00:51:51,280 --> 00:51:55,530
use basil quite a bit when we work at

00:51:52,900 --> 00:51:58,480
Google and liked it and actually

00:51:55,530 --> 00:52:00,849
originally were building NX as something

00:51:58,480 --> 00:52:02,380
that was built on basil ended up backing

00:52:00,849 --> 00:52:05,710
off that most of just because basil was

00:52:02,380 --> 00:52:08,050
pretty rusty and you know it's it's come

00:52:05,710 --> 00:52:10,510
a little it's come some way since then

00:52:08,050 --> 00:52:12,460
but NX now supports a lot of what basil

00:52:10,510 --> 00:52:14,520
does just in a different way so like

00:52:12,460 --> 00:52:16,930
incremental builds caching

00:52:14,520 --> 00:52:19,750
parallelization those kinds of things

00:52:16,930 --> 00:52:21,430
it's it's done a way where NX already

00:52:19,750 --> 00:52:22,329
understands how your projects relate and

00:52:21,430 --> 00:52:23,890
so it can do a lot of things

00:52:22,329 --> 00:52:26,650
automatically that you don't really have

00:52:23,890 --> 00:52:30,250
to configure like you would with basil

00:52:26,650 --> 00:52:33,310
so so there's four teams who need more

00:52:30,250 --> 00:52:35,260
granular control and need support for

00:52:33,310 --> 00:52:36,609
four languages that basil supports and

00:52:35,260 --> 00:52:38,560
it might make sense for them and so

00:52:36,609 --> 00:52:39,910
that's kind of why there were people

00:52:38,560 --> 00:52:41,800
working on it and we were supporting

00:52:39,910 --> 00:52:44,589
them but I think that effort may have

00:52:41,800 --> 00:52:51,930
slowed a bit yeah and the reason why

00:52:44,589 --> 00:52:54,579
it's Lotus basically basil has some

00:52:51,930 --> 00:52:57,250
right and we essentially visit our cache

00:52:54,579 --> 00:52:59,560
and start we try to like implement sort

00:52:57,250 --> 00:53:01,390
of the 80% that is good enough for

00:52:59,560 --> 00:53:04,490
pretty much everyone right then may not

00:53:01,390 --> 00:53:05,990
be 100% as efficient some situations

00:53:04,490 --> 00:53:07,250
but it's like it's close enough and it

00:53:05,990 --> 00:53:11,000
doesn't require to configure anything

00:53:07,250 --> 00:53:12,710
right but the the thing was basically

00:53:11,000 --> 00:53:14,510
that as with any technology that was

00:53:12,710 --> 00:53:16,190
developed internally at a large company

00:53:14,510 --> 00:53:19,220
for ten years right

00:53:16,190 --> 00:53:20,210
and it was tailored to do the internal

00:53:19,220 --> 00:53:22,640
customer so it

00:53:20,210 --> 00:53:25,190
so what food would have in ten years

00:53:22,640 --> 00:53:27,410
it's very hard to make it palatable in a

00:53:25,190 --> 00:53:30,110
broader like would work in difference in

00:53:27,410 --> 00:53:32,150
I it's not the same but if you look at a

00:53:30,110 --> 00:53:33,380
closure compiler a story it was kind of

00:53:32,150 --> 00:53:35,570
similar wait what it's to works

00:53:33,380 --> 00:53:37,670
perfectly well internally at Google for

00:53:35,570 --> 00:53:39,470
a lot of projects right and and one can

00:53:37,670 --> 00:53:41,630
argue you know optimizes people on do

00:53:39,470 --> 00:53:43,580
better than C but I guess right but it's

00:53:41,630 --> 00:53:46,160
because it's so challenging in terms of

00:53:43,580 --> 00:53:49,250
like it's kind of hard to use right

00:53:46,160 --> 00:53:50,869
it didn't really like the trade-offs on

00:53:49,250 --> 00:53:52,400
there I like to get this like five

00:53:50,869 --> 00:53:54,020
percent improvement you have to really

00:53:52,400 --> 00:53:55,850
struggle right to use code compiler over

00:53:54,020 --> 00:53:57,890
and with basically I feel like it's

00:53:55,850 --> 00:54:00,580
somewhat similar in that if you are able

00:53:57,890 --> 00:54:03,280
to make it work in your organization and

00:54:00,580 --> 00:54:07,130
it may be already have been so right

00:54:03,280 --> 00:54:08,810
stick with it but the act of making it

00:54:07,130 --> 00:54:11,290
work is actually it's challenged like

00:54:08,810 --> 00:54:14,900
very fuel beam is a she's able to do it

00:54:11,290 --> 00:54:17,300
we had different ways we could integrate

00:54:14,900 --> 00:54:19,460
this base one of them is to we still

00:54:17,300 --> 00:54:22,340
have it right we use the new basel

00:54:19,460 --> 00:54:23,570
linker to invoke binaries you know from

00:54:22,340 --> 00:54:26,480
a Knights in this case you know an

00:54:23,570 --> 00:54:28,580
extras use basil but I honestly feel

00:54:26,480 --> 00:54:30,050
like the number of people for whom this

00:54:28,580 --> 00:54:31,670
is beneficial is very small

00:54:30,050 --> 00:54:33,590
all right so if you are one of those

00:54:31,670 --> 00:54:36,140
people go free we have a package you

00:54:33,590 --> 00:54:39,770
know you can explore it whatever but

00:54:36,140 --> 00:54:41,510
it's like you like something about your

00:54:39,770 --> 00:54:43,760
organization has to be unique for it to

00:54:41,510 --> 00:54:45,440
be worthy for example you already use

00:54:43,760 --> 00:54:47,900
basic okay if you already have a base of

00:54:45,440 --> 00:54:49,760
expertise that's great right sure you

00:54:47,900 --> 00:54:52,160
can use it if you don't have base of

00:54:49,760 --> 00:54:54,230
expertise it might be a bit more

00:54:52,160 --> 00:54:57,140
challenges that you might match to make

00:54:54,230 --> 00:55:00,290
it work and I have from what I

00:54:57,140 --> 00:55:02,780
understand the angular team can I remove

00:55:00,290 --> 00:55:04,640
to angular CLI basil integration and the

00:55:02,780 --> 00:55:07,700
dogs and stuff or removing it currently

00:55:04,640 --> 00:55:11,630
right they are open because the market

00:55:07,700 --> 00:55:15,050
for compasses you suppose there is no so

00:55:11,630 --> 00:55:16,410
yeah like Victor said we're big fans and

00:55:15,050 --> 00:55:18,240
like in

00:55:16,410 --> 00:55:21,930
a lot of what's in X is inspired by

00:55:18,240 --> 00:55:24,630
basil like that so we just done our own

00:55:21,930 --> 00:55:26,640
twist and giving it much of the value

00:55:24,630 --> 00:55:29,579
and so it's really those people who need

00:55:26,640 --> 00:55:31,650
that last 20% of control that yeah I

00:55:29,579 --> 00:55:34,740
would like I'm big fan of many things

00:55:31,650 --> 00:55:36,299
are you like Haskell do I have a advise

00:55:34,740 --> 00:55:38,700
everyone to use Haskell to write the

00:55:36,299 --> 00:55:40,289
applications no all right so thinkin X

00:55:38,700 --> 00:55:42,420
has been type script to base would be in

00:55:40,289 --> 00:55:44,759
Haskell right where maybe conceptually

00:55:42,420 --> 00:55:47,849
Haskell is it's better in some ways

00:55:44,759 --> 00:55:50,190
right but it's a it's a challenge it's a

00:55:47,849 --> 00:55:54,869
lot of where you write if you can use it

00:55:50,190 --> 00:55:56,279
good for you multiple card so we're a

00:55:54,869 --> 00:55:58,170
little bit over time so I'll just I'll

00:55:56,279 --> 00:56:02,400
just recap a couple of other questions

00:55:58,170 --> 00:56:05,009
on here so yes someone asked if there's

00:56:02,400 --> 00:56:06,509
an on-prem version of an X cloud which

00:56:05,009 --> 00:56:09,210
is so we're working on a private cloud

00:56:06,509 --> 00:56:11,640
version of an X cloud just you know at

00:56:09,210 --> 00:56:13,920
Jeff at narwall that IO if you want to

00:56:11,640 --> 00:56:15,319
stay if you want to get notified as that

00:56:13,920 --> 00:56:17,460
becomes available we're working on

00:56:15,319 --> 00:56:19,980
summarizing that and putting together

00:56:17,460 --> 00:56:21,359
some info to send out and some of our

00:56:19,980 --> 00:56:23,220
customers were working with on setting

00:56:21,359 --> 00:56:25,339
it up so that will be something soon

00:56:23,220 --> 00:56:30,150
we've gotten a lot of demand for that

00:56:25,339 --> 00:56:31,859
and you know the people ask but another

00:56:30,150 --> 00:56:33,390
person asked about react and angular in

00:56:31,859 --> 00:56:35,099
the same Madhuri food yeah lots of

00:56:33,390 --> 00:56:36,779
people are doing that you can share yeah

00:56:35,099 --> 00:56:38,460
it works really well between them can I

00:56:36,779 --> 00:56:41,279
get a quick point there

00:56:38,460 --> 00:56:44,700
so yeah in seconds 10 seconds so the

00:56:41,279 --> 00:56:46,380
next can work as an angular CLI we think

00:56:44,700 --> 00:56:48,599
let's see Eloise do you think I'm sorry

00:56:46,380 --> 00:56:51,240
we can work with its own C online which

00:56:48,599 --> 00:56:53,730
functions basically very similar right

00:56:51,240 --> 00:56:55,380
so which often is the case we have the

00:56:53,730 --> 00:56:57,930
commits to work space we have react

00:56:55,380 --> 00:57:00,119
angular a bunch of node stuff some

00:56:57,930 --> 00:57:02,279
people like the ACTA Co may not be happy

00:57:00,119 --> 00:57:04,079
invoking ng for just emotional reasons

00:57:02,279 --> 00:57:06,589
they like something about it just feels

00:57:04,079 --> 00:57:08,400
wrong so you can use a different flavor

00:57:06,589 --> 00:57:09,660
then people won't even know the

00:57:08,400 --> 00:57:10,950
difference okay one character is

00:57:09,660 --> 00:57:12,900
different the rest is the same right but

00:57:10,950 --> 00:57:14,400
everyone else for have to see income

00:57:12,900 --> 00:57:18,299
every time they try to build a react app

00:57:14,400 --> 00:57:22,500
maybe no works based on JSON instead of

00:57:18,299 --> 00:57:24,980
angular JSON yeah exactly so it's if you

00:57:22,500 --> 00:57:28,620
ready so having you look at Jason

00:57:24,980 --> 00:57:30,480
exactly so that's a

00:57:28,620 --> 00:57:32,130
just to think that if you have like a

00:57:30,480 --> 00:57:33,870
50/50 split alright

00:57:32,130 --> 00:57:36,120
I consider that option and someone just

00:57:33,870 --> 00:57:37,200
asked about Gatsby app not something

00:57:36,120 --> 00:57:40,260
their teams working on first-class

00:57:37,200 --> 00:57:41,640
support for we have a package already

00:57:40,260 --> 00:57:43,770
that works

00:57:41,640 --> 00:57:46,170
we just don't publicly talk about it too

00:57:43,770 --> 00:57:48,090
much which is like battle destiny to

00:57:46,170 --> 00:57:49,320
make sure that well we talked about it

00:57:48,090 --> 00:57:51,690
it actually works for a lot of folks

00:57:49,320 --> 00:57:53,580
right we they react we wrote engineer we

00:57:51,690 --> 00:57:55,320
have support for the reactor itself

00:57:53,580 --> 00:57:57,540
right we have some really good support

00:57:55,320 --> 00:58:00,090
so next it much more much proofs now it

00:57:57,540 --> 00:58:03,270
works like really well I enjoy using it

00:58:00,090 --> 00:58:05,850
God's busy now the peace that's coming

00:58:03,270 --> 00:58:08,790
it already came it's there we just don't

00:58:05,850 --> 00:58:13,680
talk about it right yet and react native

00:58:08,790 --> 00:58:15,000
is going to come in sort of maybe a dead

00:58:13,680 --> 00:58:18,060
of summer or something that already has

00:58:15,000 --> 00:58:20,910
some spikes we know that it works and so

00:58:18,060 --> 00:58:22,770
it's going to happen later and someone

00:58:20,910 --> 00:58:25,080
asked of Scully which I imagine is I

00:58:22,770 --> 00:58:27,630
mean the school team uses an X and we

00:58:25,080 --> 00:58:29,010
are great friends with them so it is I

00:58:27,630 --> 00:58:31,650
think it's a matter of time before this

00:58:29,010 --> 00:58:33,570
official I don't know that we need to

00:58:31,650 --> 00:58:36,840
add much forskohlii to be honest if they

00:58:33,570 --> 00:58:39,720
have schematics and I'd have yeah and it

00:58:36,840 --> 00:58:42,390
should just work so yeah we use the same

00:58:39,720 --> 00:58:44,790
schematics API and everything and

00:58:42,390 --> 00:58:46,620
angular Universal is the same like like

00:58:44,790 --> 00:58:49,170
you can use the universal schematics in

00:58:46,620 --> 00:58:50,670
nxi I know people are doing it I think

00:58:49,170 --> 00:58:53,820
it works out of the box I don't think

00:58:50,670 --> 00:58:58,200
like I think it's enough that they don't

00:58:53,820 --> 00:59:00,660
yes yeah okay all right I think that's

00:58:58,200 --> 00:59:02,880
enough someone also asked about ionic

00:59:00,660 --> 00:59:05,010
which there's a community plugin for

00:59:02,880 --> 00:59:07,590
that seems pretty good we aren't

00:59:05,010 --> 00:59:09,210
currently first-class support for it

00:59:07,590 --> 00:59:12,150
well okay like anyone over one more

00:59:09,210 --> 00:59:14,730
point sorry and only over time the thing

00:59:12,150 --> 00:59:16,290
is that so we have we're trying to make

00:59:14,730 --> 00:59:17,880
a nice video like a pluggable like a

00:59:16,290 --> 00:59:21,450
videos code or build tools or whatever I

00:59:17,880 --> 00:59:22,710
don't suppose people think of us code is

00:59:21,450 --> 00:59:26,670
something you can just put plugins in

00:59:22,710 --> 00:59:27,900
and it works alright and we have a

00:59:26,670 --> 00:59:29,370
special command post create a nice

00:59:27,900 --> 00:59:30,990
plug-in it creates a layout for the

00:59:29,370 --> 00:59:32,460
plugin so you can also you want like so

00:59:30,990 --> 00:59:33,840
if you have your own technology that you

00:59:32,460 --> 00:59:35,580
want to add support for like a

00:59:33,840 --> 00:59:37,410
schematics builders and add them to end

00:59:35,580 --> 00:59:39,030
tests for those schematics and others we

00:59:37,410 --> 00:59:41,310
have really good support right now we

00:59:39,030 --> 00:59:41,640
can do it we have a video that walks you

00:59:41,310 --> 00:59:43,650
through

00:59:41,640 --> 00:59:45,270
like a funny video it like this humor

00:59:43,650 --> 00:59:47,370
and stuff right we have a good guide

00:59:45,270 --> 00:59:49,470
once you have decided to offer high

00:59:47,370 --> 00:59:52,170
quality you will be added to the

00:59:49,470 --> 00:59:54,150
community plugins page so if you're

00:59:52,170 --> 00:59:56,550
interested in the awesome the plugin all

00:59:54,150 --> 00:59:59,040
right for your favorite technology you

00:59:56,550 --> 01:00:00,660
know talk to us we have a special flag

00:59:59,040 --> 01:00:02,730
for people who wants a plug inside and

01:00:00,660 --> 01:00:05,040
basically Blizzard on and if you go to

01:00:02,730 --> 01:00:07,170
NX dev and click plugins at the top then

01:00:05,040 --> 01:00:08,970
it shows like we actually you can list

01:00:07,170 --> 01:00:11,210
the plugins to see what's available and

01:00:08,970 --> 01:00:14,820
and the plug-in API is also being

01:00:11,210 --> 01:00:18,660
extended to allow even more more cool

01:00:14,820 --> 01:00:20,910
stuff someone asked if we could extend

01:00:18,660 --> 01:00:22,260
it which I'll let bravery answer that if

01:00:20,910 --> 01:00:23,970
we could extend for a couple more

01:00:22,260 --> 01:00:26,370
questions you're more than welcome to

01:00:23,970 --> 01:00:32,670
yeah people are interested go for it

01:00:26,370 --> 01:00:36,420
okay so so let me see what I mean look

01:00:32,670 --> 01:00:38,520
at what we've already answered live and

01:00:36,420 --> 01:00:41,790
victory maybe you have a hard stop but I

01:00:38,520 --> 01:00:44,280
don't know I'm happy to asked about if

01:00:41,790 --> 01:00:47,690
an X produces two up so I'm a tree and

01:00:44,280 --> 01:00:47,690
how it can be accessed

01:00:47,940 --> 01:00:51,270
you mean how long every build and test

01:00:49,920 --> 01:00:54,900
preparation took us stuff like that

01:00:51,270 --> 01:01:01,530
oh can you be more specific about what

01:00:54,900 --> 01:01:02,610
type of telemetry the launch for you

01:01:01,530 --> 01:01:06,890
like I've interview about something on

01:01:02,610 --> 01:01:06,890
TV so an X and X by itself doesn't

01:01:07,460 --> 01:01:12,120
produce we record anything but if you

01:01:09,600 --> 01:01:16,310
add a nice cloud a nice cloud in this

01:01:12,120 --> 01:01:23,010
case you know we're in sure an X cloud

01:01:16,310 --> 01:01:26,220
like I sure just let me make sure I'm

01:01:23,010 --> 01:01:28,350
just reading something that is I'm you

01:01:26,220 --> 01:01:30,540
know we talked by the way the next cloud

01:01:28,350 --> 01:01:33,120
is something that we it's now it's

01:01:30,540 --> 01:01:35,340
something that there's now a tear for

01:01:33,120 --> 01:01:37,500
like an ongoing free tier of the next

01:01:35,340 --> 01:01:40,950
cloud where you get several hours per

01:01:37,500 --> 01:01:46,650
month five dollars per month of free now

01:01:40,950 --> 01:01:48,390
it's now I tomorrow so right now if you

01:01:46,650 --> 01:01:50,190
sign up you get like a five hour coupon

01:01:48,390 --> 01:01:52,530
so you can try it out and see how it

01:01:50,190 --> 01:01:53,690
works and how we charge for an X cloud

01:01:52,530 --> 01:01:56,779
as we charge for

01:01:53,690 --> 01:01:59,210
for our saved so we going to take the

01:01:56,779 --> 01:02:02,690
original time for running a command or

01:01:59,210 --> 01:02:04,970
running a task and then and then we

01:02:02,690 --> 01:02:08,359
subtract the the time from running it

01:02:04,970 --> 01:02:10,220
with cache hits basically and and

01:02:08,359 --> 01:02:11,839
calculate that and calculate how much

01:02:10,220 --> 01:02:14,480
time you save and it's just a dollar per

01:02:11,839 --> 01:02:16,609
hour save and so yeah so you get five

01:02:14,480 --> 01:02:18,650
hours of a free coupon now but as of

01:02:16,609 --> 01:02:20,029
tomorrow we just have an ongoing free

01:02:18,650 --> 01:02:22,430
tier so if you have a small work space

01:02:20,029 --> 01:02:24,039
that could just benefit from some of

01:02:22,430 --> 01:02:26,450
those some of that build savings then

01:02:24,039 --> 01:02:28,309
then you can have ongoing but in

01:02:26,450 --> 01:02:29,990
addition to the like the cash savings

01:02:28,309 --> 01:02:31,369
and we're going to be adding more to X

01:02:29,990 --> 01:02:33,559
cloud that was just the first thing that

01:02:31,369 --> 01:02:36,470
make most sense to invest your big cash

01:02:33,559 --> 01:02:38,799
but we also are building more robust

01:02:36,470 --> 01:02:46,069
analytics of work space performance

01:02:38,799 --> 01:02:48,740
right now it's focused on the cache so

01:02:46,069 --> 01:02:50,660
basically yeah right now it's we collect

01:02:48,740 --> 01:02:52,190
more data like we collected quite a bit

01:02:50,660 --> 01:02:54,829
of interesting data we just don't

01:02:52,190 --> 01:02:57,289
present in any meaningful way yeah which

01:02:54,829 --> 01:02:59,930
you know it's coming soon but basically

01:02:57,289 --> 01:03:01,430
if you open a workspace you would see

01:02:59,930 --> 01:03:03,259
that it's been used you see something

01:03:01,430 --> 01:03:05,839
like this in this case for a let's say

01:03:03,259 --> 01:03:08,509
for the build it will tell you that it

01:03:05,839 --> 01:03:11,029
saved 18 hours and built so it's - took

01:03:08,509 --> 01:03:12,529
15 hours over the period of this time to

01:03:11,029 --> 01:03:14,420
build different projects in this

01:03:12,529 --> 01:03:16,940
workspace but that would have been about

01:03:14,420 --> 01:03:19,430
30 hours if the cache wasn't on and you

01:03:16,940 --> 01:03:21,559
can go in here you know and get you know

01:03:19,430 --> 01:03:23,420
the results that you care about and you

01:03:21,559 --> 01:03:26,000
know a look at each individual project

01:03:23,420 --> 01:03:29,029
and see how every project contributes to

01:03:26,000 --> 01:03:31,609
the total time right a lot a lot of data

01:03:29,029 --> 01:03:35,450
it's provided but this is something that

01:03:31,609 --> 01:03:37,039
we show right now this this aims but we

01:03:35,450 --> 01:03:39,349
could have been a lot bigger the reason

01:03:37,039 --> 01:03:41,240
why they're not that epic is because

01:03:39,349 --> 01:03:42,680
this is our internal repo and I like

01:03:41,240 --> 01:03:46,160
frequently to push the master so we

01:03:42,680 --> 01:03:51,759
don't do that we're building once at

01:03:46,160 --> 01:03:55,400
most okay so we don't have this practice

01:03:51,759 --> 01:03:58,099
defined PRS for that loan or whatever we

01:03:55,400 --> 01:04:01,430
have like substantial things you can see

01:03:58,099 --> 01:04:03,529
right that's not nothing but yeah that's

01:04:01,430 --> 01:04:07,350
do you have two data this is Atlanta we

01:04:03,529 --> 01:04:09,090
we collect and

01:04:07,350 --> 01:04:10,740
I would like your Victor's that we've

01:04:09,090 --> 01:04:13,080
been at we've been instrumenting more to

01:04:10,740 --> 01:04:15,510
collect more interesting data and and

01:04:13,080 --> 01:04:17,340
we've got plans for for how we're going

01:04:15,510 --> 01:04:19,830
to show interesting things that help you

01:04:17,340 --> 01:04:22,770
understand where data or where time is

01:04:19,830 --> 01:04:25,500
being spent to a more granular degree at

01:04:22,770 --> 01:04:28,290
different environments and and also

01:04:25,500 --> 01:04:29,670
helping you to understand like insights

01:04:28,290 --> 01:04:32,180
into how you could partition things

01:04:29,670 --> 01:04:34,800
better to to take more advantage of

01:04:32,180 --> 01:04:38,310
actually can I show something else which

01:04:34,800 --> 01:04:39,900
is I think would be pretty cool mmm-hmm

01:04:38,310 --> 01:04:43,380
and we'll just we'll go just a few more

01:04:39,900 --> 01:04:47,100
minutes yeah let me let me see if I can

01:04:43,380 --> 01:04:48,600
this is the thing that I particularly I

01:04:47,100 --> 01:04:51,360
wanna sleep passionate about the word

01:04:48,600 --> 01:04:58,380
passion just it's me but you know I I

01:04:51,360 --> 01:05:09,540
care about deeply okay so which is if I

01:04:58,380 --> 01:05:12,510
let me see if it works and X basically

01:05:09,540 --> 01:05:18,060
the problem I'm having with trying to

01:05:12,510 --> 01:05:23,340
how folks use a cloud is that if

01:05:18,060 --> 01:05:25,200
something doesn't work right it is

01:05:23,340 --> 01:05:27,630
really okay I don't experience cash yet

01:05:25,200 --> 01:05:29,370
it's kind of challenging to help them

01:05:27,630 --> 01:05:31,020
out and say okay so how can you make

01:05:29,370 --> 01:05:34,140
your beautiful body using more

01:05:31,020 --> 01:05:36,570
computation right and the idea is that

01:05:34,140 --> 01:05:43,520
we should be able to tell you when we

01:05:36,570 --> 01:05:43,520
when you run your stuff all right hmm

01:05:44,660 --> 01:05:49,530
it's going to take forever

01:05:46,560 --> 01:05:50,490
so the I'm not just going to talk talks

01:05:49,530 --> 01:05:55,160
to it because it's going to be much

01:05:50,490 --> 01:05:55,160
faster but the idea is that instead of

01:05:56,000 --> 01:06:02,760
instead of you're just saying hey but

01:06:01,140 --> 01:06:04,110
you can find anything in a cache you

01:06:02,760 --> 01:06:05,190
know the end

01:06:04,110 --> 01:06:08,720
all right there's nothing you can do

01:06:05,190 --> 01:06:12,090
about it what we can tell you instead is

01:06:08,720 --> 01:06:13,820
things like well we didn't find anything

01:06:12,090 --> 01:06:16,110
in a cache what you're trying to do but

01:06:13,820 --> 01:06:18,720
someone else did something very similar

01:06:16,110 --> 01:06:20,400
right everything was the same except one

01:06:18,720 --> 01:06:20,760
file was different we don't like restore

01:06:20,400 --> 01:06:22,950
the

01:06:20,760 --> 01:06:25,770
the final side we just know like sort of

01:06:22,950 --> 01:06:28,050
the hash acting's identifies this house

01:06:25,770 --> 01:06:29,670
and we can tell you that if you're

01:06:28,050 --> 01:06:31,050
building me your app we didn't find

01:06:29,670 --> 01:06:34,590
anything the cash flows it's sad but we

01:06:31,050 --> 01:06:36,600
found the cash result for the same Butte

01:06:34,590 --> 01:06:38,880
command but someone passes extra flag

01:06:36,600 --> 01:06:39,450
maybe source Maps false or something

01:06:38,880 --> 01:06:42,030
right

01:06:39,450 --> 01:06:43,950
we found that all right so when you

01:06:42,030 --> 01:06:46,620
start like figuring out how to optimize

01:06:43,950 --> 01:06:49,620
your flow especially in CI right you can

01:06:46,620 --> 01:06:52,140
look under those sort of debug

01:06:49,620 --> 01:06:54,630
information all right that stuff to see

01:06:52,140 --> 01:06:56,550
the to finding those things where for

01:06:54,630 --> 01:06:58,350
some reason maybe different CI jobs do

01:06:56,550 --> 01:07:00,480
things very similar but not exactly the

01:06:58,350 --> 01:07:01,950
same it's a oh maybe you keep changing

01:07:00,480 --> 01:07:03,510
the same file like you might have

01:07:01,950 --> 01:07:05,970
implemented some version somewhere right

01:07:03,510 --> 01:07:08,190
and yeah that's going to break the cache

01:07:05,970 --> 01:07:10,350
right so the command will tell you hey

01:07:08,190 --> 01:07:11,670
by the way you know that file was

01:07:10,350 --> 01:07:12,900
different the rest to the same so you

01:07:11,670 --> 01:07:14,190
can look into the file and see that

01:07:12,900 --> 01:07:15,630
maybe you increment in a version in

01:07:14,190 --> 01:07:17,460
there and that you shouldn't do it that

01:07:15,630 --> 01:07:19,650
way maybe I should increment version and

01:07:17,460 --> 01:07:21,870
the output instead of in there in the

01:07:19,650 --> 01:07:24,030
source itself things like that so that's

01:07:21,870 --> 01:07:25,290
one of the things we have been working

01:07:24,030 --> 01:07:27,570
on the last couple of weeks and now it's

01:07:25,290 --> 01:07:29,310
already out so if you pass us like a

01:07:27,570 --> 01:07:30,960
special flag but they're both smoking it

01:07:29,310 --> 01:07:34,400
will give you all this information so

01:07:30,960 --> 01:07:34,400
basically we are trying to let people

01:07:34,760 --> 01:07:40,080
know just use cloud but sort of maximize

01:07:38,160 --> 01:07:41,990
the number of cash gates alright so that

01:07:40,080 --> 01:07:44,820
is very look at position to have to redo

01:07:41,990 --> 01:07:46,710
yep all right well that's right

01:07:44,820 --> 01:07:48,630
thank you so much everyone for listening

01:07:46,710 --> 01:07:52,560
and sticking around and asking so many

01:07:48,630 --> 01:07:55,170
great interesting questions and thank

01:07:52,560 --> 01:07:57,240
you brave reefer feel free to reach out

01:07:55,170 --> 01:08:00,440
to either of us on Twitter Victor

01:07:57,240 --> 01:08:00,440
doesn't respond on Twitter but I do

01:08:01,190 --> 01:08:08,760
pig Paige - yeah go to my Pig Instagram

01:08:04,850 --> 01:08:10,560
Jeff be pigs and you can also email me

01:08:08,760 --> 01:08:12,480
Jeff at in our all day especially if

01:08:10,560 --> 01:08:14,610
you're if you're wanting to on board on

01:08:12,480 --> 01:08:16,440
the NX cloud or try it out or have

01:08:14,610 --> 01:08:20,940
questions feel free to email me or

01:08:16,440 --> 01:08:23,450
victor will answer questions and help

01:08:20,940 --> 01:08:23,450

YouTube URL: https://www.youtube.com/watch?v=YMvDU1QWiB4


