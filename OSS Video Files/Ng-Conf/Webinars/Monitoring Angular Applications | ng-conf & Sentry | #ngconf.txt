Title: Monitoring Angular Applications | ng-conf & Sentry | #ngconf
Publication date: 2020-11-07
Playlist: Webinars
Description: 
	Join ng-conf for EnterpriseNG, the world's largest enterprise-focused Angular conference in the world! Nov 19-20 | Online. www. ng-conf.org.

In this webinar, you'll learn how Sentry helps you monitor errors & performance in Angular.  Sentry gives full visibility when it comes to errors and performance â€” so all developers can see exactly what's causing slowdowns and crashes.Â 

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
https://sentry.io/welcome/
Captions: 
	00:00:02,770 --> 00:00:06,240
[Applause]

00:00:06,570 --> 00:00:11,549
[Music]

00:00:14,240 --> 00:00:19,039
all

00:00:15,679 --> 00:00:22,080
and can you all see my screen

00:00:19,039 --> 00:00:23,680
yes thank you for that warm introduction

00:00:22,080 --> 00:00:25,599
and first i just want to start off by

00:00:23,680 --> 00:00:27,760
saying you know this conference uh

00:00:25,599 --> 00:00:30,160
is very special to me i think this is my

00:00:27,760 --> 00:00:31,920
fourth or fifth year uh coming in and

00:00:30,160 --> 00:00:33,440
i actually met the sentry team here and

00:00:31,920 --> 00:00:35,200
a lot of my friends so

00:00:33,440 --> 00:00:36,800
you know firstly just thank you for

00:00:35,200 --> 00:00:38,160
putting this on and

00:00:36,800 --> 00:00:40,239
everyone here thank you for taking the

00:00:38,160 --> 00:00:41,920
time i know we have someone from india

00:00:40,239 --> 00:00:43,200
someone from ukraine

00:00:41,920 --> 00:00:45,760
it's fantastic kind of seeing the

00:00:43,200 --> 00:00:48,960
commitment and everyone coming in at the

00:00:45,760 --> 00:00:50,160
various time zones to learn more about

00:00:48,960 --> 00:00:51,600
angular and century

00:00:50,160 --> 00:00:53,360
with that kind of being said i'm just

00:00:51,600 --> 00:00:55,280
going to go right into it

00:00:53,360 --> 00:00:57,280
as we've mentioned go ahead and ask

00:00:55,280 --> 00:00:58,640
questions using the q a we have folks um

00:00:57,280 --> 00:01:00,480
moderating that so i'm going to try

00:00:58,640 --> 00:01:01,760
my best to kind of get through anything

00:01:00,480 --> 00:01:04,080
uh that's uh

00:01:01,760 --> 00:01:06,080
that's there as well as i've dedicated

00:01:04,080 --> 00:01:08,960
about 15 or 28 minutes at the end

00:01:06,080 --> 00:01:10,720
to answer any questions by way of

00:01:08,960 --> 00:01:12,000
introduction my name is neil manvar you

00:01:10,720 --> 00:01:14,240
can think of me as a developer

00:01:12,000 --> 00:01:15,759
helping developers i've been working as

00:01:14,240 --> 00:01:17,680
a solutions engineer for century for the

00:01:15,759 --> 00:01:20,560
last few years

00:01:17,680 --> 00:01:21,119
but let's get started so for those of

00:01:20,560 --> 00:01:23,920
you that

00:01:21,119 --> 00:01:25,759
may or may not have heard about sentry

00:01:23,920 --> 00:01:28,000
what century tells you is

00:01:25,759 --> 00:01:30,079
when your app is broken and when your

00:01:28,000 --> 00:01:31,600
app is slow regardless of tech stack

00:01:30,079 --> 00:01:33,040
today we're here for angular so that's

00:01:31,600 --> 00:01:34,159
where we're going to concentrate but

00:01:33,040 --> 00:01:36,079
just wanted to let you know

00:01:34,159 --> 00:01:37,520
what sentry does is it lives inside of

00:01:36,079 --> 00:01:39,200
your application anytime that you have

00:01:37,520 --> 00:01:41,520
an error exception or a crash

00:01:39,200 --> 00:01:42,399
it gathers any of that data any of that

00:01:41,520 --> 00:01:44,320
context

00:01:42,399 --> 00:01:46,479
and then shoots it up to our service and

00:01:44,320 --> 00:01:48,159
then alerts developers letting you know

00:01:46,479 --> 00:01:50,799
your application is broken

00:01:48,159 --> 00:01:52,000
giving you the details of who what when

00:01:50,799 --> 00:01:54,560
where and why

00:01:52,000 --> 00:01:56,560
and then allowing you to figure out what

00:01:54,560 --> 00:01:57,680
the problem is and address it

00:01:56,560 --> 00:01:59,840
so as i said we're going to be

00:01:57,680 --> 00:02:01,439
concentrating on angular but just know

00:01:59,840 --> 00:02:02,240
that you can use sentry regardless of

00:02:01,439 --> 00:02:04,320
stack

00:02:02,240 --> 00:02:06,079
and this really fits in well because

00:02:04,320 --> 00:02:06,960
most angular apps are communicating with

00:02:06,079 --> 00:02:08,879
the back end right

00:02:06,960 --> 00:02:10,239
so you might have an error that is a

00:02:08,879 --> 00:02:12,319
surface on the front end

00:02:10,239 --> 00:02:13,280
but as a result of your back end sentry

00:02:12,319 --> 00:02:14,000
is going to give you that complete

00:02:13,280 --> 00:02:16,000
picture

00:02:14,000 --> 00:02:18,080
recently we've also released our

00:02:16,000 --> 00:02:20,720
performance monitoring features which is

00:02:18,080 --> 00:02:22,400
answering why is my application slow in

00:02:20,720 --> 00:02:24,879
addition to broken or

00:02:22,400 --> 00:02:27,040
hey this error might be resulting in

00:02:24,879 --> 00:02:27,760
this slowdown and this is how it affects

00:02:27,040 --> 00:02:29,680
the overall

00:02:27,760 --> 00:02:31,360
user experience or customer experience

00:02:29,680 --> 00:02:32,400
and i'm going to be dwelling into this

00:02:31,360 --> 00:02:33,920
for angular as well

00:02:32,400 --> 00:02:36,640
because we do have this offering

00:02:33,920 --> 00:02:39,040
available there

00:02:36,640 --> 00:02:41,280
so if you're not using sentry what

00:02:39,040 --> 00:02:43,280
likely happens is you may or may not

00:02:41,280 --> 00:02:45,280
know about any errors that are pushed

00:02:43,280 --> 00:02:48,000
out to your production

00:02:45,280 --> 00:02:49,840
by folks using your angular app and then

00:02:48,000 --> 00:02:51,040
it gets escalated you might hear about

00:02:49,840 --> 00:02:51,920
it through twitter through customer

00:02:51,040 --> 00:02:54,480
support

00:02:51,920 --> 00:02:55,120
or you know uh a friend telling you it's

00:02:54,480 --> 00:02:57,040
broken

00:02:55,120 --> 00:02:58,480
but at the end you don't have the

00:02:57,040 --> 00:03:02,000
details uh

00:02:58,480 --> 00:03:04,480
and you end up having to reproduce and

00:03:02,000 --> 00:03:05,599
eventually you get to a lot where you

00:03:04,480 --> 00:03:07,840
have a bunch of noise

00:03:05,599 --> 00:03:08,879
a bunch of information uh most of it's

00:03:07,840 --> 00:03:10,720
actually irrelevant

00:03:08,879 --> 00:03:12,640
and then you hit the error or try to

00:03:10,720 --> 00:03:13,519
reproduce it and end up with a minified

00:03:12,640 --> 00:03:15,840
stack trace

00:03:13,519 --> 00:03:17,200
and then debug set breakpoints and then

00:03:15,840 --> 00:03:19,440
figure out what's wrong

00:03:17,200 --> 00:03:20,879
hours days passed by and it's very very

00:03:19,440 --> 00:03:23,519
strenuous this is uh

00:03:20,879 --> 00:03:25,040
happening for every error and such so

00:03:23,519 --> 00:03:25,360
what we're trying to do is streamline

00:03:25,040 --> 00:03:27,920
that

00:03:25,360 --> 00:03:28,720
developers write code we commit code we

00:03:27,920 --> 00:03:30,560
deploy code

00:03:28,720 --> 00:03:32,879
we should know about our errors as soon

00:03:30,560 --> 00:03:33,360
as uh you know one or two customers hit

00:03:32,879 --> 00:03:35,280
them

00:03:33,360 --> 00:03:36,879
and then get all the details and be able

00:03:35,280 --> 00:03:38,640
to fix it so without sentry

00:03:36,879 --> 00:03:40,000
you don't always know about your errors

00:03:38,640 --> 00:03:41,519
you don't always know about the quality

00:03:40,000 --> 00:03:43,200
of your apps as they go into your

00:03:41,519 --> 00:03:46,720
various environments

00:03:43,200 --> 00:03:48,159
and with sentry you're going to be given

00:03:46,720 --> 00:03:49,360
all of this information so here's the

00:03:48,159 --> 00:03:50,080
error here's how many times that

00:03:49,360 --> 00:03:52,159
happened

00:03:50,080 --> 00:03:53,840
here's the distribution the aggregation

00:03:52,159 --> 00:03:55,040
here's the stat trace on this line of

00:03:53,840 --> 00:03:56,720
code for every frame

00:03:55,040 --> 00:03:58,480
and we don't just stop there we'll even

00:03:56,720 --> 00:03:59,760
show you the commit that caused it

00:03:58,480 --> 00:04:02,560
so how are we going to do this in

00:03:59,760 --> 00:04:05,680
angular let's do it let's get set up

00:04:02,560 --> 00:04:09,200
so i believe the link was sent out

00:04:05,680 --> 00:04:12,959
earlier if not it is right here so just

00:04:09,200 --> 00:04:12,959
go ahead and fork this repo this is

00:04:13,120 --> 00:04:17,040
ng comp github.commdmanvar.ngc.com

00:04:14,640 --> 00:04:18,400
sentry work uh a workshop

00:04:17,040 --> 00:04:20,880
so i'm going to give folks just a quick

00:04:18,400 --> 00:04:24,400
moment to do that in parallel uh

00:04:20,880 --> 00:04:24,800
uh i have uh the century i o sign up

00:04:24,400 --> 00:04:26,840
here

00:04:24,800 --> 00:04:29,840
i'm going to go ahead and just register

00:04:26,840 --> 00:04:29,840
here

00:04:31,680 --> 00:04:35,360
and folks should also do that and this

00:04:33,680 --> 00:04:38,240
is all outlined here so

00:04:35,360 --> 00:04:40,160
starting right at the beginning prereqs

00:04:38,240 --> 00:04:41,919
will just have nvm node and

00:04:40,160 --> 00:04:44,240
get installed and then we're going to go

00:04:41,919 --> 00:04:47,520
ahead and fork and clone this

00:04:44,240 --> 00:04:48,960
and then npm install npm run deploy

00:04:47,520 --> 00:04:51,759
and then following that we're going to

00:04:48,960 --> 00:04:54,800
go ahead and get set up

00:04:51,759 --> 00:04:57,840
so here i have my application up

00:04:54,800 --> 00:04:57,840
let's go ahead

00:05:00,240 --> 00:05:05,520
and run some of the steps so npm install

00:05:09,039 --> 00:05:15,680
and i already ran nvm used earlier so

00:05:13,199 --> 00:05:15,680
there we go

00:05:17,600 --> 00:05:21,120
and then we will go ahead and deploy

00:05:20,000 --> 00:05:23,039
this

00:05:21,120 --> 00:05:25,840
as well and show you what we're dealing

00:05:23,039 --> 00:05:25,840
with

00:05:33,919 --> 00:05:38,400
all right looks like we're still npm

00:05:35,520 --> 00:05:40,639
installing but

00:05:38,400 --> 00:05:42,160
fine there we go that looks good npm run

00:05:40,639 --> 00:05:43,759
deploy which will pull up our

00:05:42,160 --> 00:05:45,280
application and in parallel like i

00:05:43,759 --> 00:05:53,840
mentioned i'm just going to go ahead and

00:05:45,280 --> 00:05:53,840
sign up here

00:06:01,120 --> 00:06:05,840
there we go so we're going to be

00:06:02,400 --> 00:06:09,120
presented into our organization here

00:06:05,840 --> 00:06:10,080
and in here we see to follow the

00:06:09,120 --> 00:06:11,680
onboarding steps

00:06:10,080 --> 00:06:13,280
but let's go ahead and finish this

00:06:11,680 --> 00:06:15,440
before we move on to the second step

00:06:13,280 --> 00:06:15,440
here

00:06:15,840 --> 00:06:20,000
so here we go it's still building and

00:06:18,080 --> 00:06:23,440
what we're going to have here is just a

00:06:20,000 --> 00:06:24,800
sample angular app with a a page full of

00:06:23,440 --> 00:06:26,880
errors so that we can go ahead and click

00:06:24,800 --> 00:06:28,479
and simulate errors and have events

00:06:26,880 --> 00:06:30,000
shot up to sentry after we're done

00:06:28,479 --> 00:06:31,600
integrating

00:06:30,000 --> 00:06:32,880
but before we do that i'm just going to

00:06:31,600 --> 00:06:34,000
go ahead and show what we're dealing

00:06:32,880 --> 00:06:36,720
with and then step by

00:06:34,000 --> 00:06:37,840
step step by step we'll introduce the

00:06:36,720 --> 00:06:41,600
sentry sdk in

00:06:37,840 --> 00:06:45,199
as outlined here we'll go ahead and then

00:06:41,600 --> 00:06:45,199
achieve other parts of the workflow as

00:06:46,840 --> 00:06:49,840
well

00:06:59,680 --> 00:07:04,400
it's generating the bundle so and then

00:07:03,039 --> 00:07:06,240
we're going to go ahead and pull this up

00:07:04,400 --> 00:07:08,720
in the browser and

00:07:06,240 --> 00:07:08,720
go from there

00:07:14,400 --> 00:07:19,280
meanwhile in sentry we've also been

00:07:16,720 --> 00:07:21,680
presented

00:07:19,280 --> 00:07:23,440
the steps right here for onboarding i'm

00:07:21,680 --> 00:07:27,280
going to go ahead and just select

00:07:23,440 --> 00:07:29,120
angular and i'll revisit that in just a

00:07:27,280 --> 00:07:30,319
moment but here we go this is done

00:07:29,120 --> 00:07:32,639
so let's go ahead and see what this

00:07:30,319 --> 00:07:33,680
looks like so here i have my application

00:07:32,639 --> 00:07:35,360
i'm going to go ahead and pull up the

00:07:33,680 --> 00:07:37,120
developer console

00:07:35,360 --> 00:07:38,560
and i don't have center sentry

00:07:37,120 --> 00:07:40,160
integrated yet so here

00:07:38,560 --> 00:07:42,240
let's say i'm having errors in

00:07:40,160 --> 00:07:43,360
production this is happening in the

00:07:42,240 --> 00:07:45,680
browser

00:07:43,360 --> 00:07:46,720
i may or may not know about this and

00:07:45,680 --> 00:07:48,319
then you can see

00:07:46,720 --> 00:07:50,560
here is the stack trace which is

00:07:48,319 --> 00:07:51,440
obfuscated a lot of different problems

00:07:50,560 --> 00:07:53,280
here

00:07:51,440 --> 00:07:54,960
and i want to know about this in a

00:07:53,280 --> 00:07:55,599
better way so let's go ahead and set up

00:07:54,960 --> 00:07:57,039
sentry

00:07:55,599 --> 00:08:00,080
so here i'm going to go ahead and select

00:07:57,039 --> 00:08:01,680
angular let's go ahead and create that

00:08:00,080 --> 00:08:03,440
project

00:08:01,680 --> 00:08:04,960
and now we're going to be given the

00:08:03,440 --> 00:08:06,960
steps to install

00:08:04,960 --> 00:08:08,639
the sentry sdk so we're going to go

00:08:06,960 --> 00:08:10,639
through this step by step

00:08:08,639 --> 00:08:12,240
and integrate this into our application

00:08:10,639 --> 00:08:13,360
so left hand side we have our onboarding

00:08:12,240 --> 00:08:17,039
instructions

00:08:13,360 --> 00:08:18,000
right hand side we have our code base

00:08:17,039 --> 00:08:20,639
right here

00:08:18,000 --> 00:08:22,960
and just to recap where we are in terms

00:08:20,639 --> 00:08:25,120
of the flow

00:08:22,960 --> 00:08:26,800
we've done all of this here we've

00:08:25,120 --> 00:08:28,720
created our sentry account

00:08:26,800 --> 00:08:31,360
and we're following the onboarding steps

00:08:28,720 --> 00:08:33,519
and instrumenting the code as specified

00:08:31,360 --> 00:08:35,200
and once we do that we'll once again run

00:08:33,519 --> 00:08:38,479
our build

00:08:35,200 --> 00:08:40,640
and then check out what's going on and

00:08:38,479 --> 00:08:44,720
trigger these errors so here

00:08:40,640 --> 00:08:47,839
let's go once again here and here

00:08:44,720 --> 00:08:48,640
first thing it says npm install so let's

00:08:47,839 --> 00:08:51,519
just go

00:08:48,640 --> 00:08:51,519
directly in here

00:08:52,240 --> 00:08:58,560
i'm just going to go clear npm install

00:08:56,880 --> 00:09:00,560
the packages right here so we have the

00:08:58,560 --> 00:09:02,959
angular sentry sdk

00:09:00,560 --> 00:09:04,720
followed by the tracing sdk and this is

00:09:02,959 --> 00:09:06,320
what is going to enable our performance

00:09:04,720 --> 00:09:06,959
metrics which i'll go into in just a

00:09:06,320 --> 00:09:10,160
moment

00:09:06,959 --> 00:09:13,040
at the end of the session

00:09:10,160 --> 00:09:13,680
so here we go we're npm installed and we

00:09:13,040 --> 00:09:17,920
can see

00:09:13,680 --> 00:09:20,480
that now some items have been added in

00:09:17,920 --> 00:09:20,480
over here

00:09:21,440 --> 00:09:25,600
specifically right here

00:09:26,240 --> 00:09:32,800
and let's go into app module ts

00:09:30,160 --> 00:09:34,240
next and go ahead and instrument as

00:09:32,800 --> 00:09:36,080
specified here so i'm going to go ahead

00:09:34,240 --> 00:09:39,040
and copy this block of code

00:09:36,080 --> 00:09:40,480
starting from import sentry into the end

00:09:39,040 --> 00:09:44,320
of sentry init here

00:09:40,480 --> 00:09:44,320
and go ahead and paste right here

00:09:46,720 --> 00:09:50,959
and i'm going to go ahead and move this

00:09:48,160 --> 00:09:53,120
line right here import app module

00:09:50,959 --> 00:09:55,920
as this is unnecessary due to the

00:09:53,120 --> 00:09:57,680
architecture of my app right now

00:09:55,920 --> 00:09:59,440
so just to summarize what i've done is

00:09:57,680 --> 00:10:00,959
i'm importing the sentry angular package

00:09:59,440 --> 00:10:04,399
importing the integration

00:10:00,959 --> 00:10:05,839
initializing the sentry sdk with the dsn

00:10:04,399 --> 00:10:07,680
that was provided to me so

00:10:05,839 --> 00:10:08,959
i created a project as part of this

00:10:07,680 --> 00:10:10,720
onboarding flow

00:10:08,959 --> 00:10:12,480
also for those folks that are already

00:10:10,720 --> 00:10:14,079
using sentry you can head over to

00:10:12,480 --> 00:10:15,680
projects on your left hand side and just

00:10:14,079 --> 00:10:18,399
create new project and it'll present you

00:10:15,680 --> 00:10:20,240
into a similar onboarding flow as well

00:10:18,399 --> 00:10:21,519
if you're new you'll go through this

00:10:20,240 --> 00:10:22,399
journey that i'm taking you through

00:10:21,519 --> 00:10:23,920
right now

00:10:22,399 --> 00:10:25,519
but more or less we're going to achieve

00:10:23,920 --> 00:10:27,680
the the same end result

00:10:25,519 --> 00:10:28,880
so here we've instrumented the sentry

00:10:27,680 --> 00:10:32,320
sdk the dsn

00:10:28,880 --> 00:10:33,600
is the unique key and we want associated

00:10:32,320 --> 00:10:35,200
with the projects and we want errors

00:10:33,600 --> 00:10:37,279
sent up to sentry.io

00:10:35,200 --> 00:10:38,399
and here is the project id in addition

00:10:37,279 --> 00:10:39,519
to that and we're talking about the

00:10:38,399 --> 00:10:42,720
performance piece

00:10:39,519 --> 00:10:45,279
uh we're instrumenting uh the

00:10:42,720 --> 00:10:46,079
tracing integration so that we can get

00:10:45,279 --> 00:10:48,480
these transactions

00:10:46,079 --> 00:10:49,680
up to century and understand what's slow

00:10:48,480 --> 00:10:51,519
and drill down from there

00:10:49,680 --> 00:10:54,160
and for now we want a hundred percent of

00:10:51,519 --> 00:10:54,160
these sent up

00:10:55,120 --> 00:11:00,079
lastly we're going to set up the air

00:10:56,640 --> 00:11:01,760
handler and the tracer

00:11:00,079 --> 00:11:04,560
i'm going to go ahead and just copy the

00:11:01,760 --> 00:11:04,560
providers here

00:11:06,480 --> 00:11:11,760
go into here and let's just showcase

00:11:09,600 --> 00:11:13,120
what we've done here so there's a sentry

00:11:11,760 --> 00:11:15,519
error handler

00:11:13,120 --> 00:11:16,880
and basically when there's an error

00:11:15,519 --> 00:11:18,320
it'll be shot up to sentry

00:11:16,880 --> 00:11:20,240
we also have an optional dialog that

00:11:18,320 --> 00:11:22,480
we've chosen to show here just

00:11:20,240 --> 00:11:24,079
to let the user know when errors happen

00:11:22,480 --> 00:11:25,920
and to provide any additional detail

00:11:24,079 --> 00:11:28,320
this is once again optional but for now

00:11:25,920 --> 00:11:30,560
it provides a good confirmation that hey

00:11:28,320 --> 00:11:33,760
something is wrong with the application

00:11:30,560 --> 00:11:37,120
and we can take action from there and a

00:11:33,760 --> 00:11:38,800
provider for the trade service here we

00:11:37,120 --> 00:11:41,839
have the app initializer

00:11:38,800 --> 00:11:42,240
which depends on the trace service and

00:11:41,839 --> 00:11:45,360
that's

00:11:42,240 --> 00:11:48,240
all we have to do here so

00:11:45,360 --> 00:11:50,880
here next i'm gonna go and revisit the

00:11:48,240 --> 00:11:50,880
instructions

00:11:51,920 --> 00:11:58,480
npm run deploy and

00:11:55,279 --> 00:11:59,760
then let's shoot out some errors and

00:11:58,480 --> 00:12:01,440
you can see we're already waiting for

00:11:59,760 --> 00:12:02,000
the verification event so right now it's

00:12:01,440 --> 00:12:04,000
red

00:12:02,000 --> 00:12:05,200
uh and waiting uh let's go ahead and

00:12:04,000 --> 00:12:08,320
deploy

00:12:05,200 --> 00:12:10,000
and shoot that up and

00:12:08,320 --> 00:12:12,480
we should see a change there and let's

00:12:10,000 --> 00:12:15,440
go and evaluate the data here and see

00:12:12,480 --> 00:12:16,480
what the end result is so just to recap

00:12:15,440 --> 00:12:20,639
what we've done

00:12:16,480 --> 00:12:22,839
is we've installed the sentry sdk

00:12:20,639 --> 00:12:24,079
right here century angular sensory

00:12:22,839 --> 00:12:25,839
tracing

00:12:24,079 --> 00:12:28,320
and then instrumented our code

00:12:25,839 --> 00:12:31,040
specifically in app module ts

00:12:28,320 --> 00:12:33,519
such that we're instantiating the sentry

00:12:31,040 --> 00:12:35,519
sdk to attach to the global uh

00:12:33,519 --> 00:12:36,959
and then we are creating an air handler

00:12:35,519 --> 00:12:39,600
that attaches to

00:12:36,959 --> 00:12:41,200
angular's error handler to shoot up any

00:12:39,600 --> 00:12:45,760
of that data

00:12:41,200 --> 00:12:45,760
to sentry upon error exception

00:12:46,160 --> 00:12:50,399
and then additional providers for any of

00:12:48,959 --> 00:12:53,839
the tracing capabilities which will be

00:12:50,399 --> 00:12:53,839
covered in a moment

00:12:55,279 --> 00:12:59,200
and then once you do that i'm going to

00:12:57,839 --> 00:13:01,440
kind of kind of jump in

00:12:59,200 --> 00:13:02,880
a little bit more so we're going to go

00:13:01,440 --> 00:13:04,480
ahead and shoot at these errors

00:13:02,880 --> 00:13:06,399
what's going to happen is we've solved

00:13:04,480 --> 00:13:07,760
problem one we're gonna be notified of

00:13:06,399 --> 00:13:08,079
these errors and we're gonna have all of

00:13:07,760 --> 00:13:10,000
the

00:13:08,079 --> 00:13:11,680
the data regarding the error and it's

00:13:10,000 --> 00:13:14,480
not gonna be stuck inside of the browser

00:13:11,680 --> 00:13:16,160
and we're gonna have uh that context but

00:13:14,480 --> 00:13:19,040
specifically what we're not gonna see

00:13:16,160 --> 00:13:20,240
and uh this is uh uh what was also

00:13:19,040 --> 00:13:22,959
resembled in

00:13:20,240 --> 00:13:24,800
the browser log is the stack trace is

00:13:22,959 --> 00:13:25,839
going to be minified it's going to be

00:13:24,800 --> 00:13:27,600
obfuscated

00:13:25,839 --> 00:13:29,519
so source maps are how we're going to

00:13:27,600 --> 00:13:30,240
fix that we're going to upload those to

00:13:29,519 --> 00:13:32,079
sentry

00:13:30,240 --> 00:13:34,240
so that sentry can de-obfuscate these

00:13:32,079 --> 00:13:36,240
stack traces and we'll actually use

00:13:34,240 --> 00:13:37,760
the cleaned up stack trace which is also

00:13:36,240 --> 00:13:38,639
actionable to the developer and means of

00:13:37,760 --> 00:13:40,800
needed developer

00:13:38,639 --> 00:13:41,760
to also detect similar errors and group

00:13:40,800 --> 00:13:43,760
them together

00:13:41,760 --> 00:13:46,240
so let's go ahead and revisit our build

00:13:43,760 --> 00:13:50,079
here i have my application

00:13:46,240 --> 00:13:52,959
deployed right here so let's go

00:13:50,079 --> 00:13:54,720
bam i'm gonna go pull up the developer

00:13:52,959 --> 00:13:56,639
console as well

00:13:54,720 --> 00:13:58,160
and trigger all of these errors so here

00:13:56,639 --> 00:14:00,000
you saw that dialogue come up

00:13:58,160 --> 00:14:02,639
you can see some something is going

00:14:00,000 --> 00:14:04,720
wrong all these errors have happened

00:14:02,639 --> 00:14:07,839
and if we go ahead and look at the

00:14:04,720 --> 00:14:07,839
network tab we can see

00:14:09,279 --> 00:14:14,240
that it has been sent out to sentry

00:14:14,320 --> 00:14:18,079
and in the payload are the details of

00:14:17,519 --> 00:14:22,240
the error

00:14:18,079 --> 00:14:23,680
so let's go ahead and take a look here

00:14:22,240 --> 00:14:26,160
and we can see that the event was

00:14:23,680 --> 00:14:26,959
received yay so let's go ahead take me

00:14:26,160 --> 00:14:28,480
to my event

00:14:26,959 --> 00:14:30,000
uh and if you're already using sentry

00:14:28,480 --> 00:14:31,760
and fully following

00:14:30,000 --> 00:14:33,760
the that new project flow i mentioned

00:14:31,760 --> 00:14:35,920
earlier go ahead and just

00:14:33,760 --> 00:14:37,199
it says take me to my issue stream so

00:14:35,920 --> 00:14:40,160
here now

00:14:37,199 --> 00:14:41,360
we can see the error that was sent to

00:14:40,160 --> 00:14:42,320
century it's going to go ahead and give

00:14:41,360 --> 00:14:43,279
you a walk through

00:14:42,320 --> 00:14:45,199
i'm going to go ahead and give you a

00:14:43,279 --> 00:14:45,839
custom walkthrough but go ahead and step

00:14:45,199 --> 00:14:47,519
through that

00:14:45,839 --> 00:14:49,040
if you find that useful here we can see

00:14:47,519 --> 00:14:50,560
the air type error message how many

00:14:49,040 --> 00:14:52,160
times it happened how many users it

00:14:50,560 --> 00:14:53,920
impacted if there were more we would see

00:14:52,160 --> 00:14:55,839
the aggregate data right here

00:14:53,920 --> 00:14:57,120
we can see a breakdown to understand if

00:14:55,839 --> 00:14:59,920
it's happening in all the various

00:14:57,120 --> 00:15:02,880
browsers or operating systems

00:14:59,920 --> 00:15:04,480
or user agents etc on any url so the

00:15:02,880 --> 00:15:05,120
point being is any tag introduced into

00:15:04,480 --> 00:15:06,720
our system

00:15:05,120 --> 00:15:08,240
will produce a heat map and a breakdown

00:15:06,720 --> 00:15:09,440
as such that helps us understand the

00:15:08,240 --> 00:15:10,880
impact of the error and where it's

00:15:09,440 --> 00:15:12,399
coming from

00:15:10,880 --> 00:15:14,079
we see that there's some things wrong

00:15:12,399 --> 00:15:15,680
this is actually uh because of the

00:15:14,079 --> 00:15:17,199
source mapping which i'll get into

00:15:15,680 --> 00:15:18,720
in just a moment but we can iterate

00:15:17,199 --> 00:15:20,240
through all these events see exactly

00:15:18,720 --> 00:15:21,040
what was going on and here's the stack

00:15:20,240 --> 00:15:23,360
trace

00:15:21,040 --> 00:15:24,560
and as i mentioned this is obfuscated so

00:15:23,360 --> 00:15:28,560
this isn't very useful

00:15:24,560 --> 00:15:31,360
uh you know my number one column 84 000

00:15:28,560 --> 00:15:32,399
uh main js so we'll get to fixing that

00:15:31,360 --> 00:15:34,160
in a bit

00:15:32,399 --> 00:15:35,600
but we can also see the steps leading up

00:15:34,160 --> 00:15:36,959
to the action it looks like you know i

00:15:35,600 --> 00:15:38,800
could click on this element

00:15:36,959 --> 00:15:40,800
i loaded up the page before that which

00:15:38,800 --> 00:15:42,639
resulted in this action

00:15:40,800 --> 00:15:44,720
uh within this exception and then any

00:15:42,639 --> 00:15:45,839
other details uh will also be surface so

00:15:44,720 --> 00:15:47,199
this is just the out-of-the-box

00:15:45,839 --> 00:15:49,040
integration you can

00:15:47,199 --> 00:15:51,759
attach any custom information as you

00:15:49,040 --> 00:15:53,680
want but let's go ahead and take this a

00:15:51,759 --> 00:15:56,320
step further get this cleaned up

00:15:53,680 --> 00:15:58,399
and get a actionable staff trace so just

00:15:56,320 --> 00:16:00,720
to summarize we've solved problem one

00:15:58,399 --> 00:16:02,079
where we've been notified of the error

00:16:00,720 --> 00:16:02,959
and you we can have email alerts and

00:16:02,079 --> 00:16:04,959
slack alerts

00:16:02,959 --> 00:16:06,000
uh for this and such i've figured which

00:16:04,959 --> 00:16:08,639
i'll get into a moment

00:16:06,000 --> 00:16:09,440
but we don't have that clean stack face

00:16:08,639 --> 00:16:11,040
and

00:16:09,440 --> 00:16:12,800
which helps us understand exactly where

00:16:11,040 --> 00:16:14,240
it was happening in the code so let's go

00:16:12,800 --> 00:16:17,279
ahead and solve that

00:16:14,240 --> 00:16:20,639
so going back to

00:16:17,279 --> 00:16:23,360
here what we're going to do now

00:16:20,639 --> 00:16:24,800
is just let century know which version

00:16:23,360 --> 00:16:25,120
of our application errors are coming

00:16:24,800 --> 00:16:26,480
from

00:16:25,120 --> 00:16:28,800
and then we're going to go ahead and

00:16:26,480 --> 00:16:29,680
upload source maps using the sentry cli

00:16:28,800 --> 00:16:30,959
plugin

00:16:29,680 --> 00:16:32,800
so we're going to install this as a dev

00:16:30,959 --> 00:16:34,639
dependency i've already set up the

00:16:32,800 --> 00:16:36,560
angular project to generate source maps

00:16:34,639 --> 00:16:37,519
but in your angular json you can specify

00:16:36,560 --> 00:16:40,000
source map true

00:16:37,519 --> 00:16:41,440
and what's going to happen is in dist

00:16:40,000 --> 00:16:44,480
you see over here

00:16:41,440 --> 00:16:47,639
we have not only the minified js

00:16:44,480 --> 00:16:49,279
but next to that here we have the

00:16:47,639 --> 00:16:52,800
js.maps which are

00:16:49,279 --> 00:16:52,800
the source maps that i'm talking about

00:16:53,120 --> 00:16:56,959
next uh we're going to go ahead and just

00:16:55,519 --> 00:16:59,279
configure our build process

00:16:56,959 --> 00:17:01,120
so that it's sending it up we'll have to

00:16:59,279 --> 00:17:03,519
set up some stuff and sentry

00:17:01,120 --> 00:17:05,839
in regards to obtaining an auth token so

00:17:03,519 --> 00:17:09,120
we can upload those artifacts

00:17:05,839 --> 00:17:10,640
and that is the adventure we're about to

00:17:09,120 --> 00:17:11,199
embark on so let's go ahead and get

00:17:10,640 --> 00:17:13,760
started

00:17:11,199 --> 00:17:14,720
so once again left hand side the readme

00:17:13,760 --> 00:17:18,640
right hand side

00:17:14,720 --> 00:17:22,160
the code so if we go to app module

00:17:18,640 --> 00:17:25,280
tx once again i'm going to go right here

00:17:22,160 --> 00:17:27,760
and just specify the

00:17:25,280 --> 00:17:27,760
release

00:17:30,799 --> 00:17:37,919
right here next

00:17:34,000 --> 00:17:39,120
let's go ahead and install sentry cli so

00:17:37,919 --> 00:17:41,200
we can get those up

00:17:39,120 --> 00:17:43,600
source maps up i'm going to go ahead to

00:17:41,200 --> 00:17:47,679
angularjson and just show the source map

00:17:43,600 --> 00:17:50,640
configuration right over here

00:17:47,679 --> 00:17:52,400
and then lastly as this is all building

00:17:50,640 --> 00:17:53,679
if we go to the make file i already have

00:17:52,400 --> 00:17:57,520
this pre-built here where

00:17:53,679 --> 00:17:58,880
i'm basically calling the commands here

00:17:57,520 --> 00:18:00,320
to upload the source maps which is

00:17:58,880 --> 00:18:03,679
sentry cli

00:18:00,320 --> 00:18:08,000
releases upload source maps

00:18:03,679 --> 00:18:10,160
we want that being done right here

00:18:08,000 --> 00:18:11,760
so lastly i'm just going to comment this

00:18:10,160 --> 00:18:16,320
one out or delete it

00:18:11,760 --> 00:18:18,960
and then re-comment in this one here

00:18:16,320 --> 00:18:20,559
and we're going to go ahead and replace

00:18:18,960 --> 00:18:21,600
all of the credentials here the auth

00:18:20,559 --> 00:18:23,840
token as well

00:18:21,600 --> 00:18:25,679
so let's go ahead and start first on the

00:18:23,840 --> 00:18:27,120
auth token and then we'll go ahead and

00:18:25,679 --> 00:18:30,160
revisit this

00:18:27,120 --> 00:18:33,919
so if i go into sentry once again here

00:18:30,160 --> 00:18:33,919
and go into organization settings

00:18:34,640 --> 00:18:39,600
and here if i go into developer settings

00:18:38,240 --> 00:18:40,799
you're going to see internal integration

00:18:39,600 --> 00:18:42,080
so let's go ahead and create a new

00:18:40,799 --> 00:18:46,000
internal integration

00:18:42,080 --> 00:18:46,000
we'll call this ngcomp live

00:18:46,320 --> 00:18:49,039
entry cli

00:18:49,919 --> 00:18:53,679
and what we need to do here is give

00:18:52,240 --> 00:18:55,520
access accordingly so we're going to be

00:18:53,679 --> 00:18:57,120
creating a release object within sentry

00:18:55,520 --> 00:18:57,760
and uploading artifacts to that so let's

00:18:57,120 --> 00:19:00,160
go ahead

00:18:57,760 --> 00:19:00,799
give this an admin privilege here and

00:19:00,160 --> 00:19:03,200
then

00:19:00,799 --> 00:19:04,559
later we're going to actually shoot up

00:19:03,200 --> 00:19:05,200
commits into sentry so that we can

00:19:04,559 --> 00:19:07,760
understand

00:19:05,200 --> 00:19:09,280
which commit introduced the error so

00:19:07,760 --> 00:19:11,760
let's go ahead and give that

00:19:09,280 --> 00:19:12,960
read and write that's all we need to do

00:19:11,760 --> 00:19:15,039
here let's go ahead

00:19:12,960 --> 00:19:16,080
save this we're going to be given an

00:19:15,039 --> 00:19:19,280
auth token

00:19:16,080 --> 00:19:22,640
right over here so let's go back in to

00:19:19,280 --> 00:19:24,799
our terminal and export that

00:19:22,640 --> 00:19:26,400
as an environment variable and there's

00:19:24,799 --> 00:19:28,400
other ways of setting this but i've

00:19:26,400 --> 00:19:29,440
chosen to just do this as an environment

00:19:28,400 --> 00:19:31,280
variable here

00:19:29,440 --> 00:19:34,960
so here this is set and just to recap

00:19:31,280 --> 00:19:34,960
where we are with the instructions

00:19:35,760 --> 00:19:39,120
right over here so we created that

00:19:37,760 --> 00:19:41,440
internal integration

00:19:39,120 --> 00:19:42,720
i mentioned how to get there

00:19:41,440 --> 00:19:46,799
organization settings

00:19:42,720 --> 00:19:48,080
which is from here bam developer

00:19:46,799 --> 00:19:50,559
settings and then new internal

00:19:48,080 --> 00:19:54,240
integration and then go ahead and

00:19:50,559 --> 00:19:57,280
fill out the permissions as necessary

00:19:54,240 --> 00:19:59,120
and set that as an environment variable

00:19:57,280 --> 00:20:00,960
and next we're going to go ahead and set

00:19:59,120 --> 00:20:03,360
up the century oregon project

00:20:00,960 --> 00:20:05,200
so the org name you can go ahead and

00:20:03,360 --> 00:20:07,039
access from right here

00:20:05,200 --> 00:20:09,679
but that's basically what you specified

00:20:07,039 --> 00:20:12,720
earlier or go to organization settings

00:20:09,679 --> 00:20:16,240
you'll also see it here just a step back

00:20:12,720 --> 00:20:19,520
so let's go ahead and fill that out

00:20:16,240 --> 00:20:22,880
and the project

00:20:19,520 --> 00:20:22,880
which we were looking at earlier

00:20:23,520 --> 00:20:27,200
and by default it is the same name here

00:20:25,520 --> 00:20:32,159
so nmanvar.org

00:20:27,200 --> 00:20:32,159
bam and that's all we have to do here

00:20:32,960 --> 00:20:36,880
and what's happening here is that we're

00:20:34,559 --> 00:20:39,760
once again uploading the source maps

00:20:36,880 --> 00:20:41,120
uh and i've just replaced uh the build

00:20:39,760 --> 00:20:42,960
process here

00:20:41,120 --> 00:20:44,240
to create that release and upload source

00:20:42,960 --> 00:20:46,559
maps to it

00:20:44,240 --> 00:20:48,400
and you can see the path is dist i

00:20:46,559 --> 00:20:50,799
specified the credentials the auth token

00:20:48,400 --> 00:20:53,440
specified the project and the org

00:20:50,799 --> 00:20:56,000
and the path so let's go ahead and

00:20:53,440 --> 00:21:00,400
upload this here

00:20:56,000 --> 00:21:02,400
so if i go ahead let's just make sure

00:21:00,400 --> 00:21:05,039
we're done so let's go ahead and run npm

00:21:02,400 --> 00:21:05,039
run deploy

00:21:14,960 --> 00:21:18,080
and as part of my build process i'm uh

00:21:17,120 --> 00:21:20,320
setting uh

00:21:18,080 --> 00:21:21,280
the environment.release so that's

00:21:20,320 --> 00:21:23,200
actually

00:21:21,280 --> 00:21:24,720
i i did that behind the scenes so that's

00:21:23,200 --> 00:21:26,880
why i was able to just go ahead and do

00:21:24,720 --> 00:21:26,880
that

00:21:29,520 --> 00:21:33,120
and after this is done we're going to go

00:21:30,960 --> 00:21:35,520
ahead and trigger those new errors and

00:21:33,120 --> 00:21:37,120
see if they have the right status so

00:21:35,520 --> 00:21:38,640
let's actually just go here and

00:21:37,120 --> 00:21:42,000
let's actually just start with the clean

00:21:38,640 --> 00:21:42,000
slate so we don't get

00:21:42,960 --> 00:21:45,840
disturb here

00:21:47,840 --> 00:21:54,240
so we're almost done building and

00:21:50,960 --> 00:21:54,240
then we'll pull it over

00:21:56,080 --> 00:21:59,840
any questions coming in shaffer

00:22:03,039 --> 00:22:07,679
i think that's just a good moment while

00:22:04,880 --> 00:22:09,200
this is all building

00:22:07,679 --> 00:22:11,360
but here we go we can actually just see

00:22:09,200 --> 00:22:15,200
those source maps uploaded so we can see

00:22:11,360 --> 00:22:17,679
bam here they are shot up to sentry

00:22:15,200 --> 00:22:18,960
and we can actually verify that by going

00:22:17,679 --> 00:22:20,960
to our project settings

00:22:18,960 --> 00:22:27,840
this is also outlined in the readme and

00:22:20,960 --> 00:22:27,840
if we go to source here

00:22:28,000 --> 00:22:32,559
we can see that here's an archive which

00:22:30,159 --> 00:22:34,240
is the release version that i specified

00:22:32,559 --> 00:22:38,080
and here are all the source maps

00:22:34,240 --> 00:22:38,080
associated with that piece right there

00:22:39,360 --> 00:22:43,520
so let's go and see if the deployment is

00:22:41,440 --> 00:22:46,640
done which it is

00:22:43,520 --> 00:22:50,000
go ahead pull that up right here and now

00:22:46,640 --> 00:22:54,480
let's go ahead and shoot up some more

00:22:50,000 --> 00:22:58,559
events into sentry

00:22:54,480 --> 00:22:58,559
here just gonna step back into issues

00:23:00,400 --> 00:23:04,320
and now i can see these coming in and if

00:23:03,600 --> 00:23:09,679
i go

00:23:04,320 --> 00:23:11,840
and take a look at these

00:23:09,679 --> 00:23:12,720
what we see now is a cleaned up stack

00:23:11,840 --> 00:23:15,840
trace

00:23:12,720 --> 00:23:19,280
so source appcomponents.typescript

00:23:15,840 --> 00:23:21,200
line 37 column 18. it happened

00:23:19,280 --> 00:23:23,200
right here in the code base we can see

00:23:21,200 --> 00:23:26,960
all the frames as necessary

00:23:23,200 --> 00:23:29,360
go in drill down and get all the details

00:23:26,960 --> 00:23:31,120
and now any errors come in will also be

00:23:29,360 --> 00:23:34,840
grouped properly as well so if i once

00:23:31,120 --> 00:23:36,000
again refresh and trigger all of these

00:23:34,840 --> 00:23:40,000
again

00:23:36,000 --> 00:23:42,799
you'll see all those come in accordingly

00:23:40,000 --> 00:23:43,919
and in a moment and being grouped so

00:23:42,799 --> 00:23:47,039
let's take a look at

00:23:43,919 --> 00:23:49,360
a few others so here you can see a uri

00:23:47,039 --> 00:23:53,120
error

00:23:49,360 --> 00:23:53,120
you see the relevant stack trace

00:23:53,600 --> 00:23:59,760
here is a syntax error and so forth

00:23:57,279 --> 00:24:01,600
all right so this is great now we have

00:23:59,760 --> 00:24:02,720
actual information we have the who what

00:24:01,600 --> 00:24:04,559
when where and why

00:24:02,720 --> 00:24:06,400
all the all the error information

00:24:04,559 --> 00:24:06,799
possibly you know everything we would

00:24:06,400 --> 00:24:08,640
want

00:24:06,799 --> 00:24:10,720
in terms of an error happen to help us

00:24:08,640 --> 00:24:13,279
understand the impact and then address

00:24:10,720 --> 00:24:13,760
but what would be even cooler one is if

00:24:13,279 --> 00:24:15,679
we would

00:24:13,760 --> 00:24:17,520
be alerted about this which we'll get

00:24:15,679 --> 00:24:20,240
into in a moment and number two

00:24:17,520 --> 00:24:21,760
if we can figure out which commit caused

00:24:20,240 --> 00:24:22,640
this exact error so we're going to

00:24:21,760 --> 00:24:24,880
address this but

00:24:22,640 --> 00:24:25,679
as i've talked about before i want to

00:24:24,880 --> 00:24:28,640
also know

00:24:25,679 --> 00:24:28,960
why is my application slow in addition

00:24:28,640 --> 00:24:31,440
to

00:24:28,960 --> 00:24:32,960
be broken or if it's not broken so this

00:24:31,440 --> 00:24:33,919
is why we've also introduced our

00:24:32,960 --> 00:24:35,360
performance

00:24:33,919 --> 00:24:36,799
feature set so i'm just going to go

00:24:35,360 --> 00:24:37,600
ahead and quickly drill down into one

00:24:36,799 --> 00:24:39,840
transaction

00:24:37,600 --> 00:24:41,120
and then revisit the rest of the error

00:24:39,840 --> 00:24:42,640
monitoring workflow which is the

00:24:41,120 --> 00:24:44,640
alerting of the commits so

00:24:42,640 --> 00:24:46,080
you can see uh from here i just jumped

00:24:44,640 --> 00:24:48,400
into performance

00:24:46,080 --> 00:24:51,679
and i can see a transaction came in and

00:24:48,400 --> 00:24:53,279
we can drill down on any of this data

00:24:51,679 --> 00:24:55,440
and we see the performance related

00:24:53,279 --> 00:24:57,600
metrics and i'm just going to go ahead

00:24:55,440 --> 00:24:59,520
and pull up the relevant transaction and

00:24:57,600 --> 00:25:00,400
i see exactly what happened in the

00:24:59,520 --> 00:25:02,480
browser

00:25:00,400 --> 00:25:04,000
so the page was loaded here although the

00:25:02,480 --> 00:25:06,240
browser's actions that happen

00:25:04,000 --> 00:25:07,360
all the the the assets or resources that

00:25:06,240 --> 00:25:09,520
were brought in

00:25:07,360 --> 00:25:10,799
and the timings associated with it all

00:25:09,520 --> 00:25:13,440
the different breakdowns

00:25:10,799 --> 00:25:14,000
and i if i was using sentry on the back

00:25:13,440 --> 00:25:17,440
end i could

00:25:14,000 --> 00:25:18,799
also trace in to that as well but now

00:25:17,440 --> 00:25:20,080
what i'm going to be able to do is

00:25:18,799 --> 00:25:22,640
understand slowness

00:25:20,080 --> 00:25:23,600
is it my angular app is it my grammarly

00:25:22,640 --> 00:25:28,320
extension

00:25:23,600 --> 00:25:30,720
is it xyz what was the user doing and

00:25:28,320 --> 00:25:32,400
is there an error associated with this

00:25:30,720 --> 00:25:35,440
so i'm going to

00:25:32,400 --> 00:25:37,600
do uh probably more information on this

00:25:35,440 --> 00:25:39,039
later because this is a whole different

00:25:37,600 --> 00:25:39,520
problem that we're solving but let's go

00:25:39,039 --> 00:25:41,039
ahead

00:25:39,520 --> 00:25:42,480
and concentrate on errors but just

00:25:41,039 --> 00:25:43,360
wanted to let you know that with this

00:25:42,480 --> 00:25:44,880
integration

00:25:43,360 --> 00:25:47,120
you're going to get not just why is my

00:25:44,880 --> 00:25:47,600
application broken but why is it slow as

00:25:47,120 --> 00:25:49,600
well

00:25:47,600 --> 00:25:51,520
out of the box you can see we've

00:25:49,600 --> 00:25:53,840
implemented that right here

00:25:51,520 --> 00:25:57,840
so going back into here let's uh go to

00:25:53,840 --> 00:25:57,840
the readme and just once again level set

00:25:58,400 --> 00:26:01,760
so we've set up the century sdk and

00:26:00,960 --> 00:26:04,400
installed it

00:26:01,760 --> 00:26:05,679
we've uploaded the source maps and

00:26:04,400 --> 00:26:07,279
verified we're all good there

00:26:05,679 --> 00:26:08,720
i gave you just a quick little sneak

00:26:07,279 --> 00:26:10,080
peek of sentry performance

00:26:08,720 --> 00:26:11,600
and let's go ahead and configure those

00:26:10,080 --> 00:26:12,400
integrations so that we're alerted on

00:26:11,600 --> 00:26:14,240
the fly

00:26:12,400 --> 00:26:16,559
and like i said it would be great to

00:26:14,240 --> 00:26:17,279
understand which commit was causing all

00:26:16,559 --> 00:26:19,039
of this

00:26:17,279 --> 00:26:21,279
so let's go ahead to our issues page

00:26:19,039 --> 00:26:21,279
here

00:26:22,080 --> 00:26:26,480
there we go you can see all the

00:26:23,200 --> 00:26:26,480
aggregation coming through

00:26:28,640 --> 00:26:32,559
and let's go ahead and set up slack so

00:26:31,440 --> 00:26:34,559
what we're going to do is go to

00:26:32,559 --> 00:26:36,080
organization settings subscription

00:26:34,559 --> 00:26:38,159
and activate our trial so that we're

00:26:36,080 --> 00:26:40,080
able to add or slack integration so if

00:26:38,159 --> 00:26:44,080
we go into here

00:26:40,080 --> 00:26:45,760
and then go into organization settings

00:26:44,080 --> 00:26:47,039
and go into subscription and by the way

00:26:45,760 --> 00:26:48,640
if you find yourself lost with this

00:26:47,039 --> 00:26:49,200
entry it's just like kind of vs code or

00:26:48,640 --> 00:26:51,600
sublime

00:26:49,200 --> 00:26:53,039
press command shift p and then just go

00:26:51,600 --> 00:26:53,760
ahead and type in whatever you want

00:26:53,039 --> 00:26:55,840
press enter

00:26:53,760 --> 00:26:56,880
you'll be taken right here so if we go

00:26:55,840 --> 00:26:59,279
to bam

00:26:56,880 --> 00:27:00,159
subscription activate your trial let's

00:26:59,279 --> 00:27:03,840
go ahead and do that

00:27:00,159 --> 00:27:07,039
next let's go to integrations here

00:27:03,840 --> 00:27:09,679
and then let's go to slack

00:27:07,039 --> 00:27:11,840
and let's go ahead and add a workspace

00:27:09,679 --> 00:27:11,840
here

00:27:13,039 --> 00:27:21,840
so i'm just going to go ahead and take

00:27:14,880 --> 00:27:21,840
you through

00:27:29,760 --> 00:27:32,399
there we go

00:27:32,960 --> 00:27:36,640
there we go so we're set up with slack

00:27:34,960 --> 00:27:38,480
next what we're going to do is head over

00:27:36,640 --> 00:27:40,320
to project settings

00:27:38,480 --> 00:27:42,159
and then configure this as an alert rule

00:27:40,320 --> 00:27:43,039
or we could go ahead just go to alerts

00:27:42,159 --> 00:27:47,360
right here

00:27:43,039 --> 00:27:49,760
go to alert rules create alert rule

00:27:47,360 --> 00:27:51,039
let's go ahead select an issue alert and

00:27:49,760 --> 00:27:54,320
what we're going to do

00:27:51,039 --> 00:27:54,320
is if this is seen

00:27:55,200 --> 00:27:58,880
more than x amount of times so we could

00:27:56,880 --> 00:28:00,399
do one two three or whatever

00:27:58,880 --> 00:28:02,399
i just want to have this trigger so i'm

00:28:00,399 --> 00:28:05,279
going to go ahead and set that

00:28:02,399 --> 00:28:05,760
and then we can set basically uh read up

00:28:05,279 --> 00:28:07,679
any

00:28:05,760 --> 00:28:09,279
uh event attributes or set any type of

00:28:07,679 --> 00:28:09,840
rule as we want and then if you want to

00:28:09,279 --> 00:28:12,559
set a

00:28:09,840 --> 00:28:14,720
a rule on the overall volume or any

00:28:12,559 --> 00:28:16,159
subset of events based on any query you

00:28:14,720 --> 00:28:18,080
can do metric alert

00:28:16,159 --> 00:28:20,720
i'll cover that in a different subject

00:28:18,080 --> 00:28:23,279
as well but here let's go ahead perform

00:28:20,720 --> 00:28:26,559
this action send a slack notification

00:28:23,279 --> 00:28:29,919
i want to send this to

00:28:26,559 --> 00:28:31,440
my angular channel so it's sentry demos

00:28:29,919 --> 00:28:34,799
dash angular

00:28:31,440 --> 00:28:36,320
sentry demos angular

00:28:34,799 --> 00:28:38,240
and i could also surface any other

00:28:36,320 --> 00:28:39,120
information i needed we'll have this

00:28:38,240 --> 00:28:42,159
trigger

00:28:39,120 --> 00:28:45,840
at this frequency oh got it forgot to

00:28:42,159 --> 00:28:45,840
give it a name

00:28:48,720 --> 00:28:53,760
here we go created

00:28:54,799 --> 00:29:01,200
and let's go ahead and test this out so

00:28:57,120 --> 00:29:01,200
we can head over to localhost 5000

00:29:07,120 --> 00:29:13,760
here we go and what we should be

00:29:10,840 --> 00:29:15,840
receiving is an alert on slack

00:29:13,760 --> 00:29:17,360
and that's exactly what happened here so

00:29:15,840 --> 00:29:18,880
it's coming in today

00:29:17,360 --> 00:29:20,640
we can see all these coming in we can

00:29:18,880 --> 00:29:22,080
resolve ignore or sign

00:29:20,640 --> 00:29:24,320
if we know what's going on just from a

00:29:22,080 --> 00:29:26,720
glance otherwise click in

00:29:24,320 --> 00:29:29,440
dive in and go from there oh that's in

00:29:26,720 --> 00:29:29,440
the wrong windows

00:29:38,240 --> 00:29:42,320
so here we go which links us right to

00:29:41,279 --> 00:29:45,520
the issue as well

00:29:42,320 --> 00:29:48,720
how's ending incognito

00:29:45,520 --> 00:29:50,399
bam so there we go slack alerts

00:29:48,720 --> 00:29:52,320
you can configure email alerts page or

00:29:50,399 --> 00:29:53,760
duty et cetera we have a wide variety of

00:29:52,320 --> 00:29:56,080
these

00:29:53,760 --> 00:29:57,360
if you're curious uh in terms of what's

00:29:56,080 --> 00:29:59,200
out there and

00:29:57,360 --> 00:30:00,720
what's available you can go ahead and

00:29:59,200 --> 00:30:02,480
look at our integrations right here the

00:30:00,720 --> 00:30:03,520
next one i want to cover is source code

00:30:02,480 --> 00:30:05,679
management this one

00:30:03,520 --> 00:30:06,880
is my favorite one because we will show

00:30:05,679 --> 00:30:10,000
you which commit

00:30:06,880 --> 00:30:12,399
caused this error in addition to

00:30:10,000 --> 00:30:13,679
who assigned who wrote that code because

00:30:12,399 --> 00:30:14,559
uh that's probably the best person

00:30:13,679 --> 00:30:16,399
addressed

00:30:14,559 --> 00:30:17,600
that can address this issue and roll

00:30:16,399 --> 00:30:18,960
forward uh

00:30:17,600 --> 00:30:20,159
in the shortest amount of time rather

00:30:18,960 --> 00:30:22,240
than someone new who's trying to

00:30:20,159 --> 00:30:24,080
reproduce it understand it get context

00:30:22,240 --> 00:30:25,200
and just know the code base

00:30:24,080 --> 00:30:27,039
so this is probably something that

00:30:25,200 --> 00:30:28,000
you're already doing right an error

00:30:27,039 --> 00:30:29,520
happens

00:30:28,000 --> 00:30:31,679
you then look through you know what

00:30:29,520 --> 00:30:33,679
builds went out and then get blame

00:30:31,679 --> 00:30:35,520
and go from there this is all

00:30:33,679 --> 00:30:36,559
streamlined with sentry so let's go

00:30:35,520 --> 00:30:39,200
ahead and configure this

00:30:36,559 --> 00:30:40,320
i'm going to go ahead and visit the

00:30:39,200 --> 00:30:41,600
instructions here

00:30:40,320 --> 00:30:43,120
so we're going to add the github

00:30:41,600 --> 00:30:44,799
integration so once again go to

00:30:43,120 --> 00:30:47,200
organization settings

00:30:44,799 --> 00:30:49,039
integrations github and then make a

00:30:47,200 --> 00:30:52,159
quick little change to the make file

00:30:49,039 --> 00:30:57,200
to allow for that so let's get

00:30:52,159 --> 00:30:57,200
right into it so here is

00:30:58,799 --> 00:31:04,720
my organization settings let's go to

00:31:01,760 --> 00:31:08,320
integrations here

00:31:04,720 --> 00:31:08,320
we can then go to github

00:31:11,360 --> 00:31:14,880
and let's go ahead and add an

00:31:16,840 --> 00:31:19,840
installation

00:31:30,840 --> 00:31:33,840
oh

00:31:34,159 --> 00:31:37,760
let me just enter this in real quick

00:31:45,519 --> 00:31:51,039
there we go go ahead configure that and

00:31:48,559 --> 00:31:51,039
i am

00:31:53,200 --> 00:32:02,399
going to configure this

00:32:00,159 --> 00:32:02,399
oh

00:32:03,600 --> 00:32:08,080
i believe i selected the wrong one here

00:32:05,679 --> 00:32:09,679
i want to select here

00:32:08,080 --> 00:32:11,200
and i'm going to do all repositories but

00:32:09,679 --> 00:32:15,840
you can go ahead

00:32:11,200 --> 00:32:15,840
and do select ones as well

00:32:21,840 --> 00:32:25,840
and so here we go we're set up here

00:32:26,399 --> 00:32:34,000
and then now all we have to do

00:32:29,919 --> 00:32:34,000
is just enable this in the make file

00:32:34,240 --> 00:32:38,159
so here it is take this associate

00:32:37,519 --> 00:32:40,799
commits

00:32:38,159 --> 00:32:41,279
add it to right here and let's go ahead

00:32:40,799 --> 00:32:44,399
and run

00:32:41,279 --> 00:32:44,880
npm run deploy once again to rerun the

00:32:44,399 --> 00:32:48,399
build

00:32:44,880 --> 00:32:52,320
so just to kind of recap oh

00:32:48,399 --> 00:32:55,120
i actually forgot one oh no that's fine

00:32:52,320 --> 00:32:56,640
so let's go ahead and rerun that and run

00:32:55,120 --> 00:32:58,720
the build and we should have commits

00:32:56,640 --> 00:33:04,080
associated as well

00:32:58,720 --> 00:33:04,080
so just to recap where we are here

00:33:05,519 --> 00:33:10,399
we added the github integration and

00:33:08,559 --> 00:33:12,159
we changed our build process to reflect

00:33:10,399 --> 00:33:14,320
that and we're running the build

00:33:12,159 --> 00:33:16,080
and we're going to go ahead and

00:33:14,320 --> 00:33:18,559
associate those commits

00:33:16,080 --> 00:33:20,880
and see if we can see the the commit

00:33:18,559 --> 00:33:20,880
data

00:33:21,360 --> 00:33:25,120
okay let's go ahead and revisit the

00:33:22,880 --> 00:33:27,200
build here it is

00:33:25,120 --> 00:33:28,159
so here it's uploading the source maps

00:33:27,200 --> 00:33:30,880
and what we see

00:33:28,159 --> 00:33:30,880
momentarily

00:33:31,840 --> 00:33:36,399
is it was able to set all the commits

00:33:35,200 --> 00:33:39,679
for this release

00:33:36,399 --> 00:33:42,320
so let's go ahead to sentry

00:33:39,679 --> 00:33:44,480
here it is and if we go to releases we

00:33:42,320 --> 00:33:47,279
can go ahead and see that release

00:33:44,480 --> 00:33:48,480
and we see all of these commits and

00:33:47,279 --> 00:33:53,120
files change

00:33:48,480 --> 00:33:55,279
and here we go

00:33:53,120 --> 00:33:57,600
and now if i go ahead and pull up an

00:33:55,279 --> 00:33:57,600
issue

00:34:01,840 --> 00:34:05,679
what i should see is the commit that

00:34:04,399 --> 00:34:07,679
caused this

00:34:05,679 --> 00:34:09,280
and here i can directly assign to the

00:34:07,679 --> 00:34:10,639
individual who caused this

00:34:09,280 --> 00:34:12,240
and now i've streamlined the whole

00:34:10,639 --> 00:34:14,159
process from being in the know of my

00:34:12,240 --> 00:34:14,480
errors getting all the context the who

00:34:14,159 --> 00:34:16,399
what

00:34:14,480 --> 00:34:18,960
when where why the stacked race the

00:34:16,399 --> 00:34:21,679
breadcrumbs uh the breakdowns

00:34:18,960 --> 00:34:23,839
and then being able to act on this

00:34:21,679 --> 00:34:26,079
finding the commit that caused it

00:34:23,839 --> 00:34:27,599
and thus being able to find someone who

00:34:26,079 --> 00:34:29,520
is best equipped to

00:34:27,599 --> 00:34:31,760
to fight this error and address this and

00:34:29,520 --> 00:34:32,639
go from there so that's what sentry does

00:34:31,760 --> 00:34:34,240
in a nutshell

00:34:32,639 --> 00:34:36,079
for your angular setup we're going to

00:34:34,240 --> 00:34:37,359
let you know that you're having errors

00:34:36,079 --> 00:34:38,560
we're going to let you know it's broken

00:34:37,359 --> 00:34:39,359
we're going to let you know where it's

00:34:38,560 --> 00:34:43,440
slow

00:34:39,359 --> 00:34:44,000
so just to recap here we were alerted on

00:34:43,440 --> 00:34:45,440
slack

00:34:44,000 --> 00:34:47,280
and you know we were able to figure out

00:34:45,440 --> 00:34:48,960
which github commit caused this but we

00:34:47,280 --> 00:34:50,879
have a variety of integrations

00:34:48,960 --> 00:34:52,000
and what we did is we integrated the sdk

00:34:50,879 --> 00:34:55,599
configured alerts

00:34:52,000 --> 00:34:56,800
got alerted or notified got into sentry

00:34:55,599 --> 00:34:59,280
where we were able to see

00:34:56,800 --> 00:35:00,560
the context the real meat of it get to

00:34:59,280 --> 00:35:02,800
the commit that caused this

00:35:00,560 --> 00:35:04,240
and roll forward and you know get back

00:35:02,800 --> 00:35:05,040
to playing racquetball or whatever it

00:35:04,240 --> 00:35:06,800
was that we're doing

00:35:05,040 --> 00:35:08,320
i mainly focus on air monitoring for

00:35:06,800 --> 00:35:09,280
angular and gave you a sneak peak of

00:35:08,320 --> 00:35:11,119
performance

00:35:09,280 --> 00:35:12,720
we also have release health which is uh

00:35:11,119 --> 00:35:15,040
you know the sessions uh

00:35:12,720 --> 00:35:16,560
in terms of uh how's your release doing

00:35:15,040 --> 00:35:18,000
out there crash free sessions and such

00:35:16,560 --> 00:35:19,760
which we'll also be

00:35:18,000 --> 00:35:21,839
introducing into javascript and angular

00:35:19,760 --> 00:35:23,359
soon discovers our analytics engine

00:35:21,839 --> 00:35:24,960
so you can query any of the data create

00:35:23,359 --> 00:35:27,760
dashboards and ecosystem is the

00:35:24,960 --> 00:35:29,680
integrations that i was covering earlier

00:35:27,760 --> 00:35:30,880
and how this all works like a like we

00:35:29,680 --> 00:35:32,880
demoed is

00:35:30,880 --> 00:35:34,480
sdk shooting up the errors and

00:35:32,880 --> 00:35:37,040
transactions into sentry

00:35:34,480 --> 00:35:38,400
we aggregate them we uh de-obfuscate

00:35:37,040 --> 00:35:39,520
them and then we alert you find the

00:35:38,400 --> 00:35:41,599
commit that caused it

00:35:39,520 --> 00:35:43,280
and present you a an interface for you

00:35:41,599 --> 00:35:45,200
to understand the who what when where

00:35:43,280 --> 00:35:47,280
and why

00:35:45,200 --> 00:35:49,760
so i've repeated this a few different

00:35:47,280 --> 00:35:51,599
times but just want to conclude here

00:35:49,760 --> 00:35:53,119
sentry is what's going to tell you that

00:35:51,599 --> 00:35:55,599
your application is broken whether it's

00:35:53,119 --> 00:35:56,960
a front end angular app or a back end or

00:35:55,599 --> 00:35:58,720
it could be you know

00:35:56,960 --> 00:36:00,240
an embedded c plus plus as long as the

00:35:58,720 --> 00:36:02,240
internet access and

00:36:00,240 --> 00:36:04,079
the error can get into century we and we

00:36:02,240 --> 00:36:06,480
have an sdk for it we can tell you

00:36:04,079 --> 00:36:08,079
that it's broken uh and then for angular

00:36:06,480 --> 00:36:09,920
we also just released uh

00:36:08,079 --> 00:36:11,920
our performance monitoring to help you

00:36:09,920 --> 00:36:12,320
understand that this is slow and this is

00:36:11,920 --> 00:36:14,240
also

00:36:12,320 --> 00:36:15,760
slow because it's related to this error

00:36:14,240 --> 00:36:16,160
and giving you the complete picture not

00:36:15,760 --> 00:36:17,839
just

00:36:16,160 --> 00:36:19,359
is my application broken because of

00:36:17,839 --> 00:36:21,119
exceptions and crashes

00:36:19,359 --> 00:36:23,440
but also where is it slow and what's the

00:36:21,119 --> 00:36:26,320
user experience like and go ahead

00:36:23,440 --> 00:36:27,520
and you can check out our documentation

00:36:26,320 --> 00:36:30,240
for more information

00:36:27,520 --> 00:36:31,040
uh and our site if you and i'm gonna go

00:36:30,240 --> 00:36:32,560
ahead and

00:36:31,040 --> 00:36:34,960
now answer any questions because i want

00:36:32,560 --> 00:36:37,040
to leave adequate uh time for that

00:36:34,960 --> 00:36:38,800
excellent okay that was amazing thank

00:36:37,040 --> 00:36:41,839
you for that so far

00:36:38,800 --> 00:36:43,440
um i do want to just say before we

00:36:41,839 --> 00:36:44,400
answer any questions we've got a couple

00:36:43,440 --> 00:36:46,880
of them

00:36:44,400 --> 00:36:49,040
but i do want to let everybody know that

00:36:46,880 --> 00:36:52,320
um century is being really generous

00:36:49,040 --> 00:36:56,160
and they're giving a 90 credit for

00:36:52,320 --> 00:36:56,720
new accounts um so you'll get a three

00:36:56,160 --> 00:37:00,079
month

00:36:56,720 --> 00:37:01,119
base team plan and all you have to do is

00:37:00,079 --> 00:37:04,000
put in the code

00:37:01,119 --> 00:37:05,920
angular so that's pretty awesome like i

00:37:04,000 --> 00:37:09,040
said that's a three month

00:37:05,920 --> 00:37:11,839
90 credit so just use that

00:37:09,040 --> 00:37:13,920
angular code and then yeah we've got a

00:37:11,839 --> 00:37:15,599
couple questions here so the first one

00:37:13,920 --> 00:37:15,920
for you oh and we just had a third one

00:37:15,599 --> 00:37:19,359
pop

00:37:15,920 --> 00:37:22,800
in too but the first one is how

00:37:19,359 --> 00:37:25,119
does error grouping work in context of

00:37:22,800 --> 00:37:26,640
continuous deployment like where the

00:37:25,119 --> 00:37:29,920
source lines get

00:37:26,640 --> 00:37:31,920
ever so slightly changed yeah

00:37:29,920 --> 00:37:32,960
good question i'm actually just going to

00:37:31,920 --> 00:37:35,599
present my screen again

00:37:32,960 --> 00:37:36,079
and show you uh rather than abstractly

00:37:35,599 --> 00:37:39,680
explain

00:37:36,079 --> 00:37:40,880
it so here

00:37:39,680 --> 00:37:43,040
let me know when you all can see my

00:37:40,880 --> 00:37:45,440
screen it should be the presentation

00:37:43,040 --> 00:37:46,160
yeah we can okay cool so here now we see

00:37:45,440 --> 00:37:47,920
an a an

00:37:46,160 --> 00:37:49,520
error that's coming from angular so i

00:37:47,920 --> 00:37:50,240
mentioned that grouping is based on the

00:37:49,520 --> 00:37:53,119
stack phrase

00:37:50,240 --> 00:37:54,320
uh we do a little bit uh we do it a

00:37:53,119 --> 00:37:55,839
little bit more

00:37:54,320 --> 00:37:57,839
intelligently than that we don't just

00:37:55,839 --> 00:37:58,560
read in every attribute so if we go into

00:37:57,839 --> 00:38:00,960
the bottom here

00:37:58,560 --> 00:38:02,720
you can actually see what we took into

00:38:00,960 --> 00:38:04,800
account when grouping so here it was a

00:38:02,720 --> 00:38:08,000
module name the context line

00:38:04,800 --> 00:38:11,440
so uh which kind of refers to uh

00:38:08,000 --> 00:38:13,520
this this as well as this line and not

00:38:11,440 --> 00:38:15,520
you know the the line numbers and such

00:38:13,520 --> 00:38:17,119
so in a continuous uh in an environment

00:38:15,520 --> 00:38:18,640
where your app is continuously changing

00:38:17,119 --> 00:38:20,320
and line numbers are shifting

00:38:18,640 --> 00:38:22,720
the grouping should still be accurately

00:38:20,320 --> 00:38:24,160
enough to aggregate similar errors and

00:38:22,720 --> 00:38:25,839
in the case that they're not

00:38:24,160 --> 00:38:27,839
we also have features to help you with

00:38:25,839 --> 00:38:28,640
this so here for example if i wanted to

00:38:27,839 --> 00:38:29,839
merge these

00:38:28,640 --> 00:38:31,440
because i thought they were the same

00:38:29,839 --> 00:38:32,880
thing i could go ahead and do that in

00:38:31,440 --> 00:38:35,280
this case there's not

00:38:32,880 --> 00:38:36,560
uh we also have a feature uh this one i

00:38:35,280 --> 00:38:37,359
don't have the right data set for but

00:38:36,560 --> 00:38:40,320
it's called similar

00:38:37,359 --> 00:38:40,720
oh cool similar issues um and i can go

00:38:40,320 --> 00:38:44,079
ahead

00:38:40,720 --> 00:38:45,599
and see exactly what uh the the the diff

00:38:44,079 --> 00:38:47,680
was here and go from there i

00:38:45,599 --> 00:38:49,599
we deleted it here but what this looks

00:38:47,680 --> 00:38:53,680
like here

00:38:49,599 --> 00:38:53,680
i have a gif of it which is pretty handy

00:38:54,079 --> 00:38:59,839
what that looks like is

00:38:57,440 --> 00:39:00,560
something like this so if we go similar

00:38:59,839 --> 00:39:03,440
issues

00:39:00,560 --> 00:39:05,359
we can see exactly what the differing

00:39:03,440 --> 00:39:06,800
attributes of the stack trace were

00:39:05,359 --> 00:39:09,040
and potentially why it wasn't grouped

00:39:06,800 --> 00:39:10,400
together and take action on it so more

00:39:09,040 --> 00:39:12,240
or less

00:39:10,400 --> 00:39:13,440
it's a kind of intelligent grouping

00:39:12,240 --> 00:39:15,119
based on uh

00:39:13,440 --> 00:39:17,280
frameworks and based on what we have in

00:39:15,119 --> 00:39:18,960
the stack phrase uh kind of optimized

00:39:17,280 --> 00:39:21,119
for each of the the framework and

00:39:18,960 --> 00:39:23,599
vertical and we also have a workflow

00:39:21,119 --> 00:39:26,079
to help you associate similar errors as

00:39:23,599 --> 00:39:29,680
well and detect

00:39:26,079 --> 00:39:31,280
awesome okay then the next one is can we

00:39:29,680 --> 00:39:34,960
install sentry locally

00:39:31,280 --> 00:39:38,000
or it runs only via century.io

00:39:34,960 --> 00:39:38,560
yeah good question so if we go over to

00:39:38,000 --> 00:39:41,599
here

00:39:38,560 --> 00:39:43,599
uh you can so what we were toying around

00:39:41,599 --> 00:39:44,960
with today right was sentry.io which is

00:39:43,599 --> 00:39:46,320
the sas which has the latest and

00:39:44,960 --> 00:39:48,320
greatest and you can go ahead and get

00:39:46,320 --> 00:39:51,200
started with a free trial

00:39:48,320 --> 00:39:52,480
and even send up a bunch of events for

00:39:51,200 --> 00:39:55,200
free

00:39:52,480 --> 00:39:55,760
and then we have century is a open

00:39:55,200 --> 00:39:58,160
source

00:39:55,760 --> 00:39:59,760
technology so century.io is actually the

00:39:58,160 --> 00:40:00,079
open source technology with the shim and

00:39:59,760 --> 00:40:01,440
all the

00:40:00,079 --> 00:40:03,599
like i mentioned all those features and

00:40:01,440 --> 00:40:05,359
high availability and all the security

00:40:03,599 --> 00:40:07,119
uh and enterprise related features

00:40:05,359 --> 00:40:08,319
around that and you can go ahead and

00:40:07,119 --> 00:40:10,240
pull down sentry

00:40:08,319 --> 00:40:11,520
and self-host it uh it will be a

00:40:10,240 --> 00:40:12,960
challenge once you kind of push

00:40:11,520 --> 00:40:15,119
production traffic to it

00:40:12,960 --> 00:40:16,400
but you can get up and running just go

00:40:15,119 --> 00:40:17,920
ahead pull it down it's just a few

00:40:16,400 --> 00:40:18,960
different docker containers you can see

00:40:17,920 --> 00:40:22,240
right here

00:40:18,960 --> 00:40:25,359
um and here are the instructions

00:40:22,240 --> 00:40:29,200
but bam awesome okay

00:40:25,359 --> 00:40:31,680
then next one let me go back to it

00:40:29,200 --> 00:40:33,440
how can i sort by affected users on

00:40:31,680 --> 00:40:35,839
issues

00:40:33,440 --> 00:40:36,880
like ie issues affecting most number of

00:40:35,839 --> 00:40:39,599
users

00:40:36,880 --> 00:40:40,880
yeah so here we could just easily go bam

00:40:39,599 --> 00:40:43,280
sort by users

00:40:40,880 --> 00:40:45,119
uh and this uh will query the issue data

00:40:43,280 --> 00:40:48,000
set here and go from there

00:40:45,119 --> 00:40:49,280
uh as well as we could even do user and

00:40:48,000 --> 00:40:51,119
then

00:40:49,280 --> 00:40:53,200
do account query as well we also have

00:40:51,119 --> 00:40:54,960
discover which does all of our analytics

00:40:53,200 --> 00:40:55,839
so for example if i wanted to do

00:40:54,960 --> 00:40:59,599
something

00:40:55,839 --> 00:41:02,960
pretty easy i could do you know

00:40:59,599 --> 00:41:03,839
show me all of my errors we'll just get

00:41:02,960 --> 00:41:06,800
them by title

00:41:03,839 --> 00:41:09,599
and i want how many unique users are

00:41:06,800 --> 00:41:09,599
affected by it

00:41:10,160 --> 00:41:13,359
bam and by the way i don't have the best

00:41:11,920 --> 00:41:16,000
data set here but it would look

00:41:13,359 --> 00:41:17,920
something like this

00:41:16,000 --> 00:41:19,040
and you could just categorize there and

00:41:17,920 --> 00:41:20,400
then view that data

00:41:19,040 --> 00:41:22,000
so everything in century is actually

00:41:20,400 --> 00:41:23,520
getting put into a global events table

00:41:22,000 --> 00:41:24,480
and discover is the way that we can

00:41:23,520 --> 00:41:27,680
query this

00:41:24,480 --> 00:41:29,119
uh and get back any of the data not just

00:41:27,680 --> 00:41:30,960
from the issue perspective

00:41:29,119 --> 00:41:35,260
and aggregate and kind of pivot on this

00:41:30,960 --> 00:41:46,800
as we need

00:41:35,260 --> 00:41:48,880
[Music]

00:41:46,800 --> 00:41:48,880

YouTube URL: https://www.youtube.com/watch?v=wFqLRRFlxNE


