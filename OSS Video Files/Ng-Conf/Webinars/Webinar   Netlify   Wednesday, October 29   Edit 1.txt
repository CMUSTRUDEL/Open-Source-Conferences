Title: Webinar   Netlify   Wednesday, October 29   Edit 1
Publication date: 2020-11-07
Playlist: Webinars
Description: 
	Join ng-conf for EnterpriseNG, the world's largest enterprise-focused Angular conference in the world! Nov 19-20 | Online. www. ng-conf.org.

In this webinar you'll learn how to use Angular Universal for Server Side Rendering and Netlify Functions for using server less function to render. This will help us compare and bring to light some answers to see what is the best way to render for the projects we create.

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
https://www.netlify.com/
Captions: 
	00:00:02,770 --> 00:00:13,279
[Applause]

00:00:06,550 --> 00:00:13,279
[Music]

00:00:14,480 --> 00:00:18,320
hey everyone

00:00:15,440 --> 00:00:19,760
so um i just had to turn on my phone

00:00:18,320 --> 00:00:21,520
version of zoom because

00:00:19,760 --> 00:00:22,960
the way that keynote works it isn't the

00:00:21,520 --> 00:00:25,279
most um friendly

00:00:22,960 --> 00:00:26,320
for seeing your screens while you're

00:00:25,279 --> 00:00:29,359
presenting

00:00:26,320 --> 00:00:31,439
um so zoom and keynote just really uh

00:00:29,359 --> 00:00:32,719
don't really help out q a but now i have

00:00:31,439 --> 00:00:35,280
it on my phone so

00:00:32,719 --> 00:00:36,640
any questions that you put in q a i'll

00:00:35,280 --> 00:00:39,600
have in front of me

00:00:36,640 --> 00:00:40,800
um and um i'll be able to kind of keep

00:00:39,600 --> 00:00:42,960
my eye on chat

00:00:40,800 --> 00:00:45,920
as well so let me go ahead and share

00:00:42,960 --> 00:00:48,239
screen and then start my presentation

00:00:45,920 --> 00:00:49,920
which you may actually see a little

00:00:48,239 --> 00:00:53,039
chubby baby first

00:00:49,920 --> 00:00:55,760
but i swear there is content coming

00:00:53,039 --> 00:00:55,760
through so cute

00:00:56,879 --> 00:01:00,000
that was uh that was when we first

00:00:58,559 --> 00:01:03,600
started eating i would just hand him

00:01:00,000 --> 00:01:03,600
avocados that's awesome

00:01:04,720 --> 00:01:08,640
so today we are talking about uh we're

00:01:07,119 --> 00:01:09,840
basically having a render refresher and

00:01:08,640 --> 00:01:12,720
like book said where

00:01:09,840 --> 00:01:13,680
um this is um at november 16th which is

00:01:12,720 --> 00:01:16,560
a monday

00:01:13,680 --> 00:01:18,799
uh 10 a.m mountain time where i'm gonna

00:01:16,560 --> 00:01:21,119
be leading a workshop

00:01:18,799 --> 00:01:22,080
on actually going through rendering

00:01:21,119 --> 00:01:25,280
options

00:01:22,080 --> 00:01:26,000
by working through the code so this is

00:01:25,280 --> 00:01:28,960
kind of like

00:01:26,000 --> 00:01:30,320
the first phase of that workshop so if

00:01:28,960 --> 00:01:31,600
you can join us that would be great

00:01:30,320 --> 00:01:33,439
but i hope you get a lot of valuable

00:01:31,600 --> 00:01:36,000
information out of this as well

00:01:33,439 --> 00:01:37,360
this is what i uh call on my team i call

00:01:36,000 --> 00:01:39,280
these talkie dokies

00:01:37,360 --> 00:01:40,720
so this is basically we're going to be

00:01:39,280 --> 00:01:42,560
talking a lot and doing

00:01:40,720 --> 00:01:44,560
a lot of high level as well as looking

00:01:42,560 --> 00:01:47,920
at resources to follow up with

00:01:44,560 --> 00:01:49,840
and a lot of docs that help us guide um

00:01:47,920 --> 00:01:51,040
our thought process through what things

00:01:49,840 --> 00:01:52,799
are before

00:01:51,040 --> 00:01:54,799
we actually jump into code so this is

00:01:52,799 --> 00:01:57,600
the talky docky part

00:01:54,799 --> 00:01:58,399
um and again november 16th monday it's a

00:01:57,600 --> 00:02:01,200
free workshop

00:01:58,399 --> 00:02:04,079
so i hope to see you there you may be

00:02:01,200 --> 00:02:06,799
saying who is this person talking to me

00:02:04,079 --> 00:02:08,080
again as rick said i'm tara manixek um i

00:02:06,799 --> 00:02:11,760
am a senior developer

00:02:08,080 --> 00:02:14,000
experience engineer at netlify um i'm an

00:02:11,760 --> 00:02:17,040
angular google developer expert

00:02:14,000 --> 00:02:20,160
and a self-proclaimed uh nerdy mom of

00:02:17,040 --> 00:02:21,680
that furball there the round human there

00:02:20,160 --> 00:02:23,360
and then another one on the way in

00:02:21,680 --> 00:02:25,520
february so uh

00:02:23,360 --> 00:02:27,760
i've just tried to teach them all three

00:02:25,520 --> 00:02:28,720
of them rubik's cube as soon as they can

00:02:27,760 --> 00:02:31,040
get their hands on it

00:02:28,720 --> 00:02:32,560
and uh trying to get them to understand

00:02:31,040 --> 00:02:35,599
uh async await

00:02:32,560 --> 00:02:37,920
so that's a bit about me

00:02:35,599 --> 00:02:38,640
um but i want to jump into what we're

00:02:37,920 --> 00:02:41,280
going to be

00:02:38,640 --> 00:02:43,200
covering today let me get these zoom

00:02:41,280 --> 00:02:46,480
controls

00:02:43,200 --> 00:02:49,519
out of my way there we go

00:02:46,480 --> 00:02:51,360
so uh first i just want to talk about

00:02:49,519 --> 00:02:53,200
these different rendering options talk

00:02:51,360 --> 00:02:54,800
about rendering in general

00:02:53,200 --> 00:02:56,239
so we're going to be talking about

00:02:54,800 --> 00:02:59,599
universal rendering

00:02:56,239 --> 00:03:02,159
and statics or ssr

00:02:59,599 --> 00:03:04,319
ssr is kind of a more encompassing term

00:03:02,159 --> 00:03:04,319
than

00:03:05,599 --> 00:03:10,560
so that would be a path of uh rendering

00:03:09,040 --> 00:03:12,720
in itself

00:03:10,560 --> 00:03:14,720
and then i basically want to talk about

00:03:12,720 --> 00:03:16,319
this like overarching kind of rendering

00:03:14,720 --> 00:03:17,200
and then talk about a certain product in

00:03:16,319 --> 00:03:18,879
particular

00:03:17,200 --> 00:03:21,200
so with universal rendering we're going

00:03:18,879 --> 00:03:24,560
to be talking about angular universal

00:03:21,200 --> 00:03:26,319
um and then from there we'll talk about

00:03:24,560 --> 00:03:28,640
pre-rendering and serverless functions

00:03:26,319 --> 00:03:30,159
which is another approach that is

00:03:28,640 --> 00:03:31,680
mostly used by the jam stack

00:03:30,159 --> 00:03:33,040
architecture which we'll touch on and

00:03:31,680 --> 00:03:35,680
then the product that we'll talk about

00:03:33,040 --> 00:03:37,280
for that one will be netlify functions

00:03:35,680 --> 00:03:38,640
um we'll probably spend most of the time

00:03:37,280 --> 00:03:40,560
talking about serverless functions in

00:03:38,640 --> 00:03:40,959
the pre-rendering aspects and only touch

00:03:40,560 --> 00:03:43,680
on

00:03:40,959 --> 00:03:44,959
five functions a bit because that again

00:03:43,680 --> 00:03:48,080
is a more

00:03:44,959 --> 00:03:50,319
in-depth code uh kind of

00:03:48,080 --> 00:03:52,640
the best way to really wrap your mind

00:03:50,319 --> 00:03:55,200
among which rendering options will work

00:03:52,640 --> 00:03:56,720
best for you is to actually code it out

00:03:55,200 --> 00:03:58,400
but before we code i think it's really

00:03:56,720 --> 00:04:00,640
important to understand

00:03:58,400 --> 00:04:02,080
the surrounding concepts and what each

00:04:00,640 --> 00:04:05,200
of these things are

00:04:02,080 --> 00:04:06,799
let alone just the words because i feel

00:04:05,200 --> 00:04:07,599
like that's what really trips us up a

00:04:06,799 --> 00:04:10,319
lot

00:04:07,599 --> 00:04:12,959
um is that we have things like

00:04:10,319 --> 00:04:16,720
serverless which does not mean there are

00:04:12,959 --> 00:04:18,799
less servers or no servers uh we tend to

00:04:16,720 --> 00:04:20,560
unfortunately kind of confuse ourselves

00:04:18,799 --> 00:04:21,919
with a lot of the terminology so i like

00:04:20,560 --> 00:04:23,280
to make sure we have that straight

00:04:21,919 --> 00:04:25,680
before we get started

00:04:23,280 --> 00:04:26,720
so speaking of i want to touch on a few

00:04:25,680 --> 00:04:29,199
words um

00:04:26,720 --> 00:04:29,759
that we'll be using today that you may

00:04:29,199 --> 00:04:33,199
see

00:04:29,759 --> 00:04:34,320
all around everywhere um and

00:04:33,199 --> 00:04:36,160
i want to make sure that we have a

00:04:34,320 --> 00:04:37,360
really grounded understanding of what

00:04:36,160 --> 00:04:40,840
they are so

00:04:37,360 --> 00:04:43,840
in regards to performance and

00:04:40,840 --> 00:04:43,840
rendering

00:04:44,160 --> 00:04:47,360
there we go there is time to first fight

00:04:46,880 --> 00:04:49,199
um

00:04:47,360 --> 00:04:50,800
i put all the acronyms here because

00:04:49,199 --> 00:04:51,680
that's what will sometimes use in

00:04:50,800 --> 00:04:54,880
writing but

00:04:51,680 --> 00:04:57,280
i will never say to ptsd

00:04:54,880 --> 00:04:58,160
first bite uh so time to first bite is

00:04:57,280 --> 00:05:00,560
the time between

00:04:58,160 --> 00:05:02,080
when the user is interacting with your

00:05:00,560 --> 00:05:04,639
site and doing things like

00:05:02,080 --> 00:05:05,600
uh clicking a navigation link um or

00:05:04,639 --> 00:05:07,199
trying to have some

00:05:05,600 --> 00:05:09,120
interaction inside of the content you

00:05:07,199 --> 00:05:10,320
have on your page so it's the time

00:05:09,120 --> 00:05:12,720
between that

00:05:10,320 --> 00:05:14,639
and between that actual very first byte

00:05:12,720 --> 00:05:17,680
of data that comes through

00:05:14,639 --> 00:05:18,960
so this is basically all of these

00:05:17,680 --> 00:05:22,240
phrases in general

00:05:18,960 --> 00:05:23,199
are just ways for us to have um

00:05:22,240 --> 00:05:26,479
analytics

00:05:23,199 --> 00:05:28,320
and to know what like at what point

00:05:26,479 --> 00:05:31,520
things are happening

00:05:28,320 --> 00:05:33,199
then we have first paint um this is the

00:05:31,520 --> 00:05:34,880
first pixel getting rendered

00:05:33,199 --> 00:05:37,680
so this is when the user starts to

00:05:34,880 --> 00:05:40,560
actually see something coming through

00:05:37,680 --> 00:05:41,759
then there's first contentful paint um

00:05:40,560 --> 00:05:44,160
and when

00:05:41,759 --> 00:05:45,199
this is basically when the content that

00:05:44,160 --> 00:05:48,479
the user requested

00:05:45,199 --> 00:05:52,160
like um the body of a blog post or

00:05:48,479 --> 00:05:53,600
an image when when does that come

00:05:52,160 --> 00:05:55,520
through so the user

00:05:53,600 --> 00:05:57,280
can actually see on the page when is it

00:05:55,520 --> 00:06:00,319
rendered

00:05:57,280 --> 00:06:03,360
then there is a time to interactive

00:06:00,319 --> 00:06:04,400
tti so i think we talk about this one a

00:06:03,360 --> 00:06:06,240
lot because

00:06:04,400 --> 00:06:07,520
um as we'll see with some of the other

00:06:06,240 --> 00:06:10,720
rendering

00:06:07,520 --> 00:06:11,039
approaches having the user to be able to

00:06:10,720 --> 00:06:13,600
see

00:06:11,039 --> 00:06:14,720
things is great but if they see it and

00:06:13,600 --> 00:06:17,199
can interact

00:06:14,720 --> 00:06:18,840
it can be frustrating so this is

00:06:17,199 --> 00:06:21,919
basically

00:06:18,840 --> 00:06:24,400
when what is the time in between the

00:06:21,919 --> 00:06:27,440
user actually saying

00:06:24,400 --> 00:06:28,560
please give me this page of content and

00:06:27,440 --> 00:06:31,840
then

00:06:28,560 --> 00:06:34,319
the user is actually able to interact

00:06:31,840 --> 00:06:35,120
with that page by you know clicking a

00:06:34,319 --> 00:06:37,680
link or

00:06:35,120 --> 00:06:38,240
being able to trigger any kind of event

00:06:37,680 --> 00:06:41,440
um

00:06:38,240 --> 00:06:42,800
on that page so those are the main

00:06:41,440 --> 00:06:44,639
things that we'll talk about for each of

00:06:42,800 --> 00:06:46,400
these rendering options or

00:06:44,639 --> 00:06:49,440
some of the main terminology that we may

00:06:46,400 --> 00:06:51,759
not be as used to

00:06:49,440 --> 00:06:52,800
all that prepares us for actually

00:06:51,759 --> 00:06:55,039
talking about

00:06:52,800 --> 00:06:56,880
um what we're going to be about the

00:06:55,039 --> 00:07:00,479
different types of rendering

00:06:56,880 --> 00:07:03,759
so as with most things we have this term

00:07:00,479 --> 00:07:06,160
like universal rendering or ssr but

00:07:03,759 --> 00:07:07,360
what are the actual pieces inside of

00:07:06,160 --> 00:07:10,000
that so

00:07:07,360 --> 00:07:10,479
i wanted one of the best things you can

00:07:10,000 --> 00:07:13,520
do

00:07:10,479 --> 00:07:15,280
as i think we all know in

00:07:13,520 --> 00:07:16,639
development in computer science is

00:07:15,280 --> 00:07:17,599
taking something big and breaking it

00:07:16,639 --> 00:07:19,599
down

00:07:17,599 --> 00:07:21,199
so when we break down universal

00:07:19,599 --> 00:07:23,599
rendering first we start out with

00:07:21,199 --> 00:07:25,280
server rendering so server rendering is

00:07:23,599 --> 00:07:28,560
this process that um

00:07:25,280 --> 00:07:31,759
creates all of the html for a page

00:07:28,560 --> 00:07:32,960
on the server and this is in response to

00:07:31,759 --> 00:07:35,599
when a user

00:07:32,960 --> 00:07:37,199
or navigation is requesting that page so

00:07:35,599 --> 00:07:38,560
when a click happens to request this

00:07:37,199 --> 00:07:41,440
information

00:07:38,560 --> 00:07:41,840
so this will give you a fast first paint

00:07:41,440 --> 00:07:45,120
and

00:07:41,840 --> 00:07:49,280
a fast first contentful paint

00:07:45,120 --> 00:07:51,840
so when you're doing this

00:07:49,280 --> 00:07:52,720
server rendering and producing that html

00:07:51,840 --> 00:07:57,280
on the server

00:07:52,720 --> 00:07:57,280
you're doing it on demand for each url

00:07:57,440 --> 00:08:00,639
it can be slower than just serving

00:07:59,919 --> 00:08:02,319
static

00:08:00,639 --> 00:08:03,840
rendered content which we'll talk about

00:08:02,319 --> 00:08:06,319
more in depth later

00:08:03,840 --> 00:08:08,160
but that kind of just makes sense when

00:08:06,319 --> 00:08:09,919
you have static content there are less

00:08:08,160 --> 00:08:11,280
calls being made to actually render

00:08:09,919 --> 00:08:13,039
you're just giving

00:08:11,280 --> 00:08:14,720
that small package that's already been

00:08:13,039 --> 00:08:15,680
rendered static content so it can be

00:08:14,720 --> 00:08:20,400
slower

00:08:15,680 --> 00:08:23,840
and you have to

00:08:20,400 --> 00:08:27,360
put some additional work

00:08:23,840 --> 00:08:29,840
into maybe doing that server rendering

00:08:27,360 --> 00:08:32,560
and then also caching that html

00:08:29,840 --> 00:08:34,159
and that will massively reduce your

00:08:32,560 --> 00:08:35,519
server render time if you're able to

00:08:34,159 --> 00:08:36,959
cache things locally

00:08:35,519 --> 00:08:38,560
that you have already rendered if

00:08:36,959 --> 00:08:40,719
they're re-requesting a page they have

00:08:38,560 --> 00:08:42,959
already seen um

00:08:40,719 --> 00:08:44,800
just a heads up i am i am going to try

00:08:42,959 --> 00:08:46,399
to talk about like the bonuses

00:08:44,800 --> 00:08:47,839
and the downfalls of each of these

00:08:46,399 --> 00:08:51,839
things because

00:08:47,839 --> 00:08:54,880
there is no silver bullet for

00:08:51,839 --> 00:08:57,519
for rendering um just like there is no

00:08:54,880 --> 00:08:58,880
silver bullet for latency uh these are

00:08:57,519 --> 00:09:00,720
just things that

00:08:58,880 --> 00:09:02,399
uh problems that we always kind of have

00:09:00,720 --> 00:09:04,959
to go through as developers

00:09:02,399 --> 00:09:06,560
um so we'll just talk about the

00:09:04,959 --> 00:09:08,080
different approaches and

00:09:06,560 --> 00:09:09,760
the biggest thing of picking which one

00:09:08,080 --> 00:09:12,160
for you is like

00:09:09,760 --> 00:09:13,200
which which of the pitfalls pitfalls can

00:09:12,160 --> 00:09:16,160
you deal with

00:09:13,200 --> 00:09:19,600
you know can you put more work into uh

00:09:16,160 --> 00:09:22,320
figuring out how to do your caching etc

00:09:19,600 --> 00:09:23,600
so again this uh server rendering is

00:09:22,320 --> 00:09:26,560
basically generating

00:09:23,600 --> 00:09:27,519
the full html page in the server in

00:09:26,560 --> 00:09:28,800
response

00:09:27,519 --> 00:09:30,399
and you're avoiding these additional

00:09:28,800 --> 00:09:31,440
round trips for data fetching and

00:09:30,399 --> 00:09:33,680
templating

00:09:31,440 --> 00:09:34,959
on the client since it's all handled um

00:09:33,680 --> 00:09:36,399
before the browser you think it's the

00:09:34,959 --> 00:09:37,200
response it's all happening on the

00:09:36,399 --> 00:09:40,080
server

00:09:37,200 --> 00:09:41,600
all the information is all that is going

00:09:40,080 --> 00:09:42,160
uh all that work is being done on the

00:09:41,600 --> 00:09:45,440
server

00:09:42,160 --> 00:09:48,000
and then it gets sent to the client

00:09:45,440 --> 00:09:50,080
speaking of the client client side

00:09:48,000 --> 00:09:53,279
rendering this is a much more common

00:09:50,080 --> 00:09:54,480
uh approach to rendering um and it can

00:09:53,279 --> 00:09:57,120
work just as well

00:09:54,480 --> 00:09:57,839
as server rendering if it's a small load

00:09:57,120 --> 00:09:59,279
so with

00:09:57,839 --> 00:10:01,760
client-side rendering everything is

00:09:59,279 --> 00:10:05,040
handled on the client side

00:10:01,760 --> 00:10:06,959
so um instead of

00:10:05,040 --> 00:10:08,800
any of the rendering or data fetching or

00:10:06,959 --> 00:10:11,040
templating happening on the server it's

00:10:08,800 --> 00:10:14,240
all happening on that client side

00:10:11,040 --> 00:10:16,720
the client side javascript is doing that

00:10:14,240 --> 00:10:18,640
the primary downside is how much

00:10:16,720 --> 00:10:21,680
javascript you'll need

00:10:18,640 --> 00:10:22,720
as your application grows so the

00:10:21,680 --> 00:10:25,839
scalability

00:10:22,720 --> 00:10:27,680
uh can can become quite cumbersome

00:10:25,839 --> 00:10:29,279
but again you can handle things like

00:10:27,680 --> 00:10:29,839
this with code splitting and lazy

00:10:29,279 --> 00:10:31,680
loading

00:10:29,839 --> 00:10:32,959
but you have to be quite fastidious

00:10:31,680 --> 00:10:35,839
about this and

00:10:32,959 --> 00:10:37,600
um really keep an eye on how much

00:10:35,839 --> 00:10:39,680
javascript is being loaded and how that

00:10:37,600 --> 00:10:42,640
may slow things down

00:10:39,680 --> 00:10:45,120
um but again how big is your site is

00:10:42,640 --> 00:10:47,440
that really going to matter to you

00:10:45,120 --> 00:10:48,959
so now with both of those in mind we

00:10:47,440 --> 00:10:52,480
have universal rendering

00:10:48,959 --> 00:10:54,480
or ssr so this is the combination

00:10:52,480 --> 00:10:56,079
of server rendering and client-side

00:10:54,480 --> 00:10:58,079
rendering and you'll be using

00:10:56,079 --> 00:11:00,959
rehydration hydration

00:10:58,079 --> 00:11:02,480
so basically those full page loads when

00:11:00,959 --> 00:11:04,640
you're requesting a brand new site or

00:11:02,480 --> 00:11:06,959
requesting a reload of the whole page

00:11:04,640 --> 00:11:08,560
if it's not cached then you'll be using

00:11:06,959 --> 00:11:11,120
that server side rendering

00:11:08,560 --> 00:11:12,480
but then it uh the javascript and data

00:11:11,120 --> 00:11:14,800
used for the rendering

00:11:12,480 --> 00:11:16,399
is embedded into the dock and client

00:11:14,800 --> 00:11:17,519
science so that can be used for data

00:11:16,399 --> 00:11:19,120
fetching so

00:11:17,519 --> 00:11:20,640
again you're going to get a fast first

00:11:19,120 --> 00:11:24,480
contentful paint

00:11:20,640 --> 00:11:26,320
um and you're basically saying you're

00:11:24,480 --> 00:11:28,640
delegating the tasks to who can handle

00:11:26,320 --> 00:11:31,680
them better you can smoothing off

00:11:28,640 --> 00:11:33,680
um what the weaknesses of the other ones

00:11:31,680 --> 00:11:35,279
are with the strength of the other

00:11:33,680 --> 00:11:36,480
you'll be kind of balancing it out with

00:11:35,279 --> 00:11:40,399
these two

00:11:36,480 --> 00:11:42,880
on here but again the dynamic

00:11:40,399 --> 00:11:43,760
nature of this in general can come with

00:11:42,880 --> 00:11:47,519
a lot of

00:11:43,760 --> 00:11:51,360
computational overhead costs and

00:11:47,519 --> 00:11:54,800
some of the the ssr solutions

00:11:51,360 --> 00:11:57,839
won't flush early and can delay time to

00:11:54,800 --> 00:11:59,440
first paint or like even double the data

00:11:57,839 --> 00:12:01,440
that's being sent

00:11:59,440 --> 00:12:03,120
just because you again have a lot of

00:12:01,440 --> 00:12:04,560
moving parts now

00:12:03,120 --> 00:12:06,880
so these are things to take into

00:12:04,560 --> 00:12:09,680
consideration and i also

00:12:06,880 --> 00:12:10,880
uh i get tripped up about hydration i

00:12:09,680 --> 00:12:14,240
think a lot of people do in the

00:12:10,880 --> 00:12:15,920
community um could just be me but just

00:12:14,240 --> 00:12:18,000
in case it's not just me

00:12:15,920 --> 00:12:20,000
um i wanted to touch on this as well so

00:12:18,000 --> 00:12:21,600
hydration is basically saying that once

00:12:20,000 --> 00:12:23,440
you're getting that html

00:12:21,600 --> 00:12:25,279
that was rendered on the server the

00:12:23,440 --> 00:12:29,600
hydration process takes inline

00:12:25,279 --> 00:12:30,240
json um we'll process the inline json

00:12:29,600 --> 00:12:33,360
state

00:12:30,240 --> 00:12:35,680
stored client side for data in the page

00:12:33,360 --> 00:12:37,120
and then attach that dom event listeners

00:12:35,680 --> 00:12:39,360
so you're getting that html

00:12:37,120 --> 00:12:41,360
and then inline json will give you that

00:12:39,360 --> 00:12:45,440
state stored

00:12:41,360 --> 00:12:47,440
client side so you're regenerating

00:12:45,440 --> 00:12:49,279
the state client side used to render the

00:12:47,440 --> 00:12:52,639
page on the server

00:12:49,279 --> 00:12:55,120
um so again like the downside of this

00:12:52,639 --> 00:12:58,000
with the ssr with hydration is that

00:12:55,120 --> 00:12:59,440
um there's the negative impact on time

00:12:58,000 --> 00:13:02,480
to interactive

00:12:59,440 --> 00:13:04,880
uh even if it improves the first paint

00:13:02,480 --> 00:13:05,680
that time to interactive can be delayed

00:13:04,880 --> 00:13:08,720
um

00:13:05,680 --> 00:13:10,079
and you may be familiar with this

00:13:08,720 --> 00:13:13,440
because what will happen

00:13:10,079 --> 00:13:15,760
with ssr is that the page

00:13:13,440 --> 00:13:17,200
will look like it's loading you'll have

00:13:15,760 --> 00:13:18,800
that first time to paint you'll see

00:13:17,200 --> 00:13:20,639
everything there

00:13:18,800 --> 00:13:22,720
but the time to interaction hasn't

00:13:20,639 --> 00:13:24,399
happened yet so

00:13:22,720 --> 00:13:26,880
you can't actually respond with the

00:13:24,399 --> 00:13:28,880
input until that javascript is executed

00:13:26,880 --> 00:13:30,639
and the event handlers have been

00:13:28,880 --> 00:13:32,720
attached so again like that's that

00:13:30,639 --> 00:13:34,800
interaction it hasn't happened yet

00:13:32,720 --> 00:13:36,399
so you may load a page and see

00:13:34,800 --> 00:13:38,160
everything on the page

00:13:36,399 --> 00:13:39,519
but then when you try to click or try to

00:13:38,160 --> 00:13:41,279
interact with it

00:13:39,519 --> 00:13:42,800
nothing's actually happening which can

00:13:41,279 --> 00:13:44,320
be really confusing and really

00:13:42,800 --> 00:13:45,839
frustrating to users i know i've

00:13:44,320 --> 00:13:48,959
definitely been there

00:13:45,839 --> 00:13:50,800
um and that's one thing you know we want

00:13:48,959 --> 00:13:51,360
fast load times but we also want to

00:13:50,800 --> 00:13:53,600
avoid

00:13:51,360 --> 00:13:56,880
any kind of frustration to users when

00:13:53,600 --> 00:14:01,279
things aren't working how they expect it

00:13:56,880 --> 00:14:04,560
so what does this look like code wise

00:14:01,279 --> 00:14:07,199
um so here uh this is

00:14:04,560 --> 00:14:08,320
this is an image from um a blog post

00:14:07,199 --> 00:14:09,760
that i'm gonna share with you right

00:14:08,320 --> 00:14:13,680
after this slide

00:14:09,760 --> 00:14:16,000
from uh jason miller and adiasmani um

00:14:13,680 --> 00:14:17,040
uh called rendering on the web but say

00:14:16,000 --> 00:14:19,279
they basically

00:14:17,040 --> 00:14:20,959
push out this information here so you

00:14:19,279 --> 00:14:21,839
see that you have that head content

00:14:20,959 --> 00:14:24,800
above

00:14:21,839 --> 00:14:26,240
um and again it's not flush early due to

00:14:24,800 --> 00:14:29,279
the possible mutation

00:14:26,240 --> 00:14:30,000
by the server rendering and then that

00:14:29,279 --> 00:14:32,320
section in there

00:14:30,000 --> 00:14:33,839
that first part of the body that you see

00:14:32,320 --> 00:14:35,279
with the headers and like so content

00:14:33,839 --> 00:14:38,720
that you would see on the page

00:14:35,279 --> 00:14:40,000
that's that static html um of the page

00:14:38,720 --> 00:14:43,279
that was requested

00:14:40,000 --> 00:14:46,800
and so it's usually not moving

00:14:43,279 --> 00:14:48,639
due to the uh the use of javascript

00:14:46,800 --> 00:14:50,160
event handlers

00:14:48,639 --> 00:14:52,560
then underneath that we have that data

00:14:50,160 --> 00:14:54,639
required to render the view

00:14:52,560 --> 00:14:55,760
and the view is already rendered above

00:14:54,639 --> 00:14:58,480
it right

00:14:55,760 --> 00:14:59,680
um and then you have at the bottom that

00:14:58,480 --> 00:15:03,120
javascript

00:14:59,680 --> 00:15:03,920
to boot up so the server is returning a

00:15:03,120 --> 00:15:07,199
description

00:15:03,920 --> 00:15:10,800
of the ui because it was requested

00:15:07,199 --> 00:15:13,360
um by the user but it's also returning

00:15:10,800 --> 00:15:16,800
that source data that it used to

00:15:13,360 --> 00:15:20,480
to make the ui and a complete

00:15:16,800 --> 00:15:24,160
copy of the ui's implementation

00:15:20,480 --> 00:15:26,240
which will then boot up on the client

00:15:24,160 --> 00:15:27,199
so only after that bottom script that

00:15:26,240 --> 00:15:29,920
bundle js

00:15:27,199 --> 00:15:30,800
has finished loading and executing

00:15:29,920 --> 00:15:33,519
that's when

00:15:30,800 --> 00:15:34,880
it becomes interactive so you see

00:15:33,519 --> 00:15:36,639
there's a lot happening before the

00:15:34,880 --> 00:15:38,160
actual interaction even though people

00:15:36,639 --> 00:15:39,600
are able to see it so that's like we

00:15:38,160 --> 00:15:42,880
just talked about with that

00:15:39,600 --> 00:15:45,680
confusion of interaction

00:15:42,880 --> 00:15:46,560
if you read any post that i suggest

00:15:45,680 --> 00:15:49,040
today

00:15:46,560 --> 00:15:50,160
this is definitely the one that i highly

00:15:49,040 --> 00:15:53,199
recommend

00:15:50,160 --> 00:15:55,680
um it's uh it's on

00:15:53,199 --> 00:15:56,720
uh developers.google.com in the web

00:15:55,680 --> 00:15:58,480
updates section

00:15:56,720 --> 00:16:01,279
again it's by jason miller the creator

00:15:58,480 --> 00:16:04,079
of preact and addie's money just like

00:16:01,279 --> 00:16:05,199
the most beloved web developer relations

00:16:04,079 --> 00:16:07,920
representative

00:16:05,199 --> 00:16:09,199
google because he's got such informative

00:16:07,920 --> 00:16:11,279
content like this one here

00:16:09,199 --> 00:16:12,639
rendering on the web um if you look over

00:16:11,279 --> 00:16:14,560
to that right side you can see

00:16:12,639 --> 00:16:16,320
everything that's covered in this

00:16:14,560 --> 00:16:17,680
and so here they talk about the

00:16:16,320 --> 00:16:20,959
different terminology

00:16:17,680 --> 00:16:23,279
and they go into um talking about

00:16:20,959 --> 00:16:24,639
uh just those different combinations of

00:16:23,279 --> 00:16:27,120
rendering again

00:16:24,639 --> 00:16:28,000
um with giving examples and then they

00:16:27,120 --> 00:16:31,680
talk about

00:16:28,000 --> 00:16:35,440
uh different types of rendering

00:16:31,680 --> 00:16:38,000
that are kind of being worked on as well

00:16:35,440 --> 00:16:39,759
so with all of that in mind with all

00:16:38,000 --> 00:16:42,000
that kind of rendering knowledge

00:16:39,759 --> 00:16:42,959
ruminating in your head i want to talk

00:16:42,000 --> 00:16:46,160
about angular

00:16:42,959 --> 00:16:49,440
universal um i i feel

00:16:46,160 --> 00:16:51,279
that uh you you may have at least heard

00:16:49,440 --> 00:16:54,480
about angular universal

00:16:51,279 --> 00:16:56,880
um it's not you know it's not

00:16:54,480 --> 00:16:58,079
as used as just like in general the

00:16:56,880 --> 00:17:01,040
angular cli

00:16:58,079 --> 00:17:04,640
and it's mostly pointed to as the

00:17:01,040 --> 00:17:07,679
server-side rendering tool for angular

00:17:04,640 --> 00:17:09,839
so this is the site this is what you'll

00:17:07,679 --> 00:17:11,520
find on angular.io

00:17:09,839 --> 00:17:13,679
when you look into the server-side

00:17:11,520 --> 00:17:17,280
rendering aspect of

00:17:13,679 --> 00:17:19,839
angular and every main

00:17:17,280 --> 00:17:21,520
framework and library has a server-side

00:17:19,839 --> 00:17:22,959
or server-side rendering approach

00:17:21,520 --> 00:17:26,000
and this is angular's so it's a

00:17:22,959 --> 00:17:29,120
technology that renders angular

00:17:26,000 --> 00:17:30,320
applications on the server i want to

00:17:29,120 --> 00:17:32,720
kind of

00:17:30,320 --> 00:17:33,520
jump in a little more to what that means

00:17:32,720 --> 00:17:37,120
so

00:17:33,520 --> 00:17:37,919
normally angular uses that client-side

00:17:37,120 --> 00:17:41,200
rendering

00:17:37,919 --> 00:17:43,440
so it's basically executing um

00:17:41,200 --> 00:17:44,320
in the browser and rendering pages in

00:17:43,440 --> 00:17:47,679
the dom

00:17:44,320 --> 00:17:50,000
client-side rendering and it does this

00:17:47,679 --> 00:17:51,760
when a user requests that content and

00:17:50,000 --> 00:17:54,880
that data does it on the fly

00:17:51,760 --> 00:17:56,080
based on those requests and then angular

00:17:54,880 --> 00:17:58,000
universal

00:17:56,080 --> 00:18:00,000
basically generates these static app

00:17:58,000 --> 00:18:01,919
pages in the server

00:18:00,000 --> 00:18:03,919
uh like we said with that server-side

00:18:01,919 --> 00:18:06,400
rendering generating html

00:18:03,919 --> 00:18:08,559
and then they're eventually bootstrapped

00:18:06,400 --> 00:18:11,120
on the client

00:18:08,559 --> 00:18:12,559
let's dig a little bit deeper um so

00:18:11,120 --> 00:18:14,559
again we're not going to actually

00:18:12,559 --> 00:18:16,000
walk through the code for all of this

00:18:14,559 --> 00:18:17,360
but i wanted to show a little bit of the

00:18:16,000 --> 00:18:19,360
steps that you take

00:18:17,360 --> 00:18:21,200
and kind of talk you through the things

00:18:19,360 --> 00:18:23,840
that are happening when you put angular

00:18:21,200 --> 00:18:25,520
universal into play

00:18:23,840 --> 00:18:27,360
so with your existing angular

00:18:25,520 --> 00:18:30,720
application you

00:18:27,360 --> 00:18:32,880
run ng ad so that's the

00:18:30,720 --> 00:18:34,080
command for the angular schematics to

00:18:32,880 --> 00:18:36,799
add different modules

00:18:34,080 --> 00:18:39,200
into your angular application and you're

00:18:36,799 --> 00:18:42,160
using nguniversal

00:18:39,200 --> 00:18:43,760
forward slash express engine once you do

00:18:42,160 --> 00:18:44,640
that your files will be changed in this

00:18:43,760 --> 00:18:46,640
way

00:18:44,640 --> 00:18:49,280
so right there is the file list and

00:18:46,640 --> 00:18:52,080
inside you see where the asterisks are

00:18:49,280 --> 00:18:54,960
that those are the new things the new

00:18:52,080 --> 00:18:58,160
files being added to your application

00:18:54,960 --> 00:19:00,400
so we have um that bootstrapper

00:18:58,160 --> 00:19:02,720
for the server app like we do right

00:19:00,400 --> 00:19:05,200
above it that main.typescript

00:19:02,720 --> 00:19:07,039
is the bootstrap for the client app then

00:19:05,200 --> 00:19:10,240
we have inside of our app folder

00:19:07,039 --> 00:19:12,720
that server side application module so

00:19:10,240 --> 00:19:14,400
um we won't look into that actual code

00:19:12,720 --> 00:19:15,520
today but we will at the workshop if

00:19:14,400 --> 00:19:18,440
you're interested

00:19:15,520 --> 00:19:19,840
uh november 16th and then

00:19:18,440 --> 00:19:23,120
server.typescript

00:19:19,840 --> 00:19:24,240
is uh the express web server so again

00:19:23,120 --> 00:19:27,360
this is that's a

00:19:24,240 --> 00:19:29,600
node library helping you easily create

00:19:27,360 --> 00:19:31,120
web servers

00:19:29,600 --> 00:19:33,440
and then once you have that all added

00:19:31,120 --> 00:19:34,320
you just need to run your usual npm on

00:19:33,440 --> 00:19:37,360
dev

00:19:34,320 --> 00:19:41,120
um and then colon ssr for that

00:19:37,360 --> 00:19:44,640
side rendering aspect of it

00:19:41,120 --> 00:19:48,559
but what all is happening so

00:19:44,640 --> 00:19:51,919
um when you run the npm run dev ssr

00:19:48,559 --> 00:19:54,480
a universal web server responds to that

00:19:51,919 --> 00:19:58,160
request to the application's request

00:19:54,480 --> 00:19:59,200
with static html rendered of your

00:19:58,160 --> 00:20:02,320
application

00:19:59,200 --> 00:20:05,360
by the universal template engine

00:20:02,320 --> 00:20:06,880
um and what is the universal template

00:20:05,360 --> 00:20:09,200
engine so i'm gonna i'm gonna talk

00:20:06,880 --> 00:20:12,000
through this but um it's just to kind of

00:20:09,200 --> 00:20:13,200
start this brain worm but uh we'll

00:20:12,000 --> 00:20:16,240
actually look at

00:20:13,200 --> 00:20:19,200
these functions in the workshop so

00:20:16,240 --> 00:20:19,840
this is uh the universal web server um

00:20:19,200 --> 00:20:23,120
has

00:20:19,840 --> 00:20:25,360
it takes that ng express engine function

00:20:23,120 --> 00:20:26,799
the one that's talking to that express

00:20:25,360 --> 00:20:29,360
server

00:20:26,799 --> 00:20:31,760
and it's a wrapper around angular

00:20:29,360 --> 00:20:34,000
universal's render module

00:20:31,760 --> 00:20:35,919
function which turns the client requests

00:20:34,000 --> 00:20:37,120
so we always have this render module

00:20:35,919 --> 00:20:39,200
function inside of our angle

00:20:37,120 --> 00:20:41,440
applications um

00:20:39,200 --> 00:20:43,039
we then have a wrapper for it that makes

00:20:41,440 --> 00:20:46,000
the client request now

00:20:43,039 --> 00:20:47,039
a server rendered html pages so it turns

00:20:46,000 --> 00:20:49,120
that

00:20:47,039 --> 00:20:51,679
what we will have the client request be

00:20:49,120 --> 00:20:52,880
into a server request

00:20:51,679 --> 00:20:55,600
so that's all happening behind the

00:20:52,880 --> 00:20:56,320
scenes and then a universal application

00:20:55,600 --> 00:21:00,400
will use

00:20:56,320 --> 00:21:02,320
the um angular's platform server package

00:21:00,400 --> 00:21:04,320
so in comparison to a regular angular

00:21:02,320 --> 00:21:07,760
application we use the platform browser

00:21:04,320 --> 00:21:09,280
this one will use platform server um

00:21:07,760 --> 00:21:11,440
and so this will basically provide a

00:21:09,280 --> 00:21:15,360
server implementation of the dom

00:21:11,440 --> 00:21:16,960
of xml http request and

00:21:15,360 --> 00:21:19,280
a bunch of other kind of lower level

00:21:16,960 --> 00:21:20,240
features uh that do not rely on the

00:21:19,280 --> 00:21:22,880
browser

00:21:20,240 --> 00:21:24,080
so it's almost like um we're

00:21:22,880 --> 00:21:26,240
transitioning

00:21:24,080 --> 00:21:27,679
like we kind of have this hybrid

00:21:26,240 --> 00:21:30,880
solution of

00:21:27,679 --> 00:21:32,480
we can run it regularly and be using

00:21:30,880 --> 00:21:35,280
what we usually use in the browser for

00:21:32,480 --> 00:21:36,640
the dom and for that xml http request

00:21:35,280 --> 00:21:39,120
and such

00:21:36,640 --> 00:21:40,520
or we can switch over to ssr and use

00:21:39,120 --> 00:21:43,760
these

00:21:40,520 --> 00:21:44,720
non-browser reliant versions of these

00:21:43,760 --> 00:21:47,840
features

00:21:44,720 --> 00:21:49,039
so it's very parallel um and so that's a

00:21:47,840 --> 00:21:52,799
good thing to keep in mind is like we're

00:21:49,039 --> 00:21:55,440
not strained too far away from our usual

00:21:52,799 --> 00:21:58,240
so then once we have all of those

00:21:55,440 --> 00:22:00,559
functions um

00:21:58,240 --> 00:22:01,440
working on the server instead of the

00:22:00,559 --> 00:22:04,799
browser

00:22:01,440 --> 00:22:06,559
we're saying um hey server

00:22:04,799 --> 00:22:07,840
pass this client request for the

00:22:06,559 --> 00:22:11,440
application to

00:22:07,840 --> 00:22:12,400
nguniversal and ngexpress ng express

00:22:11,440 --> 00:22:15,440
engine

00:22:12,400 --> 00:22:17,679
um and when it gets that

00:22:15,440 --> 00:22:19,840
request it says okay i'm going to call

00:22:17,679 --> 00:22:21,919
universal's render module function

00:22:19,840 --> 00:22:24,320
and provide caching and other helpful

00:22:21,919 --> 00:22:25,760
utilities as well as the static rendered

00:22:24,320 --> 00:22:28,080
version of your site

00:22:25,760 --> 00:22:30,000
so each request that you're sending will

00:22:28,080 --> 00:22:32,640
give you the appropriate route

00:22:30,000 --> 00:22:33,679
appropriate view for that requested

00:22:32,640 --> 00:22:36,880
route

00:22:33,679 --> 00:22:38,799
um and then that render model function

00:22:36,880 --> 00:22:42,559
renders the view within that app tag

00:22:38,799 --> 00:22:45,600
again like we're used to with angular

00:22:42,559 --> 00:22:46,159
and it creates that html page for the

00:22:45,600 --> 00:22:48,080
client

00:22:46,159 --> 00:22:49,280
so all of those things are happening on

00:22:48,080 --> 00:22:52,240
the server

00:22:49,280 --> 00:22:55,840
and then it sends the client that

00:22:52,240 --> 00:22:57,760
rendered page so

00:22:55,840 --> 00:22:58,880
all the work happens on the server that

00:22:57,760 --> 00:23:00,559
you get the same

00:22:58,880 --> 00:23:02,159
content rendered for the user that you

00:23:00,559 --> 00:23:04,799
would have seen if we used all of our

00:23:02,159 --> 00:23:07,280
browser-centric tools

00:23:04,799 --> 00:23:08,000
so it's a pretty long route to get to

00:23:07,280 --> 00:23:12,080
that point

00:23:08,000 --> 00:23:12,799
um and again that kind of gives you the

00:23:12,080 --> 00:23:14,640
steps

00:23:12,799 --> 00:23:17,120
but we'll be actually walking through

00:23:14,640 --> 00:23:20,080
every one of those steps in the workshop

00:23:17,120 --> 00:23:21,840
so in general why would we use

00:23:20,080 --> 00:23:23,840
server-side rendering with angular

00:23:21,840 --> 00:23:25,600
universal if we're pretty much getting

00:23:23,840 --> 00:23:28,960
the same outcome

00:23:25,600 --> 00:23:29,360
so um one thing that's always kind of

00:23:28,960 --> 00:23:32,480
been

00:23:29,360 --> 00:23:36,640
a a bit of a splinter

00:23:32,480 --> 00:23:38,400
for angular is the fact of um

00:23:36,640 --> 00:23:41,520
being able to take advantage of web

00:23:38,400 --> 00:23:44,960
crawlers for search engine optimization

00:23:41,520 --> 00:23:46,559
um and this is another huge aspect to

00:23:44,960 --> 00:23:48,960
when people choose how they want to

00:23:46,559 --> 00:23:52,000
vendor

00:23:48,960 --> 00:23:54,000
their applications because um

00:23:52,000 --> 00:23:55,760
so like angular universal will basically

00:23:54,000 --> 00:23:58,559
generate static version

00:23:55,760 --> 00:23:59,200
of your app and that makes it easy to

00:23:58,559 --> 00:24:02,400
search

00:23:59,200 --> 00:24:03,120
easy to link and uh easy to navigate

00:24:02,400 --> 00:24:05,919
without

00:24:03,120 --> 00:24:07,600
javascript so it's making a it also

00:24:05,919 --> 00:24:11,360
makes a site preview

00:24:07,600 --> 00:24:13,679
which is available um since each url

00:24:11,360 --> 00:24:15,440
returns a fully rendered page so all

00:24:13,679 --> 00:24:16,559
these web crawlers for all of your

00:24:15,440 --> 00:24:18,080
search engines

00:24:16,559 --> 00:24:19,760
will be able to see a lot more

00:24:18,080 --> 00:24:21,440
information from

00:24:19,760 --> 00:24:22,880
your site because so much of it is

00:24:21,440 --> 00:24:24,799
already rendered and

00:24:22,880 --> 00:24:26,559
easy for those web crawlers to crawl

00:24:24,799 --> 00:24:27,360
through so even though you may be able

00:24:26,559 --> 00:24:29,039
to

00:24:27,360 --> 00:24:31,279
on other applications that don't use

00:24:29,039 --> 00:24:33,039
this c some things on the page

00:24:31,279 --> 00:24:35,520
the content may not be there for the web

00:24:33,039 --> 00:24:38,559
callers to understand it fully like us

00:24:35,520 --> 00:24:41,440
brilliant humans can um

00:24:38,559 --> 00:24:42,240
so another aspect is um improving the

00:24:41,440 --> 00:24:46,480
performance

00:24:42,240 --> 00:24:48,159
on mobile and lower powered devices

00:24:46,480 --> 00:24:49,679
so this is a good thing to think about

00:24:48,159 --> 00:24:52,080
for the accessibility of your

00:24:49,679 --> 00:24:53,679
application because

00:24:52,080 --> 00:24:55,919
yes there may be some things out there

00:24:53,679 --> 00:24:57,520
that aren't using javascript in general

00:24:55,919 --> 00:25:00,240
but then more often than that you may

00:24:57,520 --> 00:25:01,360
have slow execution of javascript so you

00:25:00,240 --> 00:25:04,320
may need to have

00:25:01,360 --> 00:25:07,200
a server rendered or a no javascript

00:25:04,320 --> 00:25:10,799
version of your application

00:25:07,200 --> 00:25:12,960
and also being able to show that first

00:25:10,799 --> 00:25:14,799
page quickly with the first contentful

00:25:12,960 --> 00:25:16,960
paint

00:25:14,799 --> 00:25:18,960
response time is very important for user

00:25:16,960 --> 00:25:20,880
engagement and i think that we hear this

00:25:18,960 --> 00:25:22,960
and it's drilled into us

00:25:20,880 --> 00:25:26,559
very early on in web development and

00:25:22,960 --> 00:25:28,960
this is because this is where you

00:25:26,559 --> 00:25:29,840
can lose money or not get money that

00:25:28,960 --> 00:25:32,000
should

00:25:29,840 --> 00:25:32,880
be coming to you because i'd explain

00:25:32,000 --> 00:25:35,360
this to uh

00:25:32,880 --> 00:25:36,320
one of my aunts the other day because

00:25:35,360 --> 00:25:39,600
she was asking like

00:25:36,320 --> 00:25:41,360
what why is it such a big deal

00:25:39,600 --> 00:25:42,720
i was talking to her about what network

00:25:41,360 --> 00:25:45,520
does

00:25:42,720 --> 00:25:47,120
and she's like why is it a big deal that

00:25:45,520 --> 00:25:49,840
users

00:25:47,120 --> 00:25:52,559
can see your page faster and it's

00:25:49,840 --> 00:25:55,679
basically the whole aspect of

00:25:52,559 --> 00:25:58,159
you search for a sweater

00:25:55,679 --> 00:25:59,679
and you see the listings come through

00:25:58,159 --> 00:26:01,600
and you click on the first one

00:25:59,679 --> 00:26:03,039
because you want to buy a sweater and it

00:26:01,600 --> 00:26:05,840
doesn't come through

00:26:03,039 --> 00:26:08,320
uh the page doesn't load fast so you

00:26:05,840 --> 00:26:10,640
just go back and hit the next link so

00:26:08,320 --> 00:26:12,559
in that you know in those milliseconds

00:26:10,640 --> 00:26:16,400
of making that choice

00:26:12,559 --> 00:26:19,760
that first page lost your money so

00:26:16,400 --> 00:26:21,760
money that's why it's important um she

00:26:19,760 --> 00:26:25,279
liked that response that worked for her

00:26:21,760 --> 00:26:26,240
um one of the final things very much to

00:26:25,279 --> 00:26:28,240
me not the least

00:26:26,240 --> 00:26:29,679
is that angular universal you're still

00:26:28,240 --> 00:26:32,159
just using angular

00:26:29,679 --> 00:26:33,679
uh developer experience is very

00:26:32,159 --> 00:26:35,520
important and we have to learn more and

00:26:33,679 --> 00:26:36,880
more things with every new technology we

00:26:35,520 --> 00:26:40,159
use

00:26:36,880 --> 00:26:42,240
so why

00:26:40,159 --> 00:26:43,440
trouble yourself with learning a whole

00:26:42,240 --> 00:26:45,840
new language

00:26:43,440 --> 00:26:46,480
or you know having to learn some new

00:26:45,840 --> 00:26:48,799
framework

00:26:46,480 --> 00:26:50,880
when you can just be using angular and

00:26:48,799 --> 00:26:52,400
on top of the english universal just

00:26:50,880 --> 00:26:54,000
a lot of you know like we talked about

00:26:52,400 --> 00:26:57,039
the caching and stuff

00:26:54,000 --> 00:26:59,440
um does a lot of that work for you

00:26:57,039 --> 00:27:00,960
so which is one of the major benefits of

00:26:59,440 --> 00:27:02,159
angular in general it's like how much

00:27:00,960 --> 00:27:04,480
work gets done for you

00:27:02,159 --> 00:27:06,320
by the framework have your tools to work

00:27:04,480 --> 00:27:09,760
for you there are

00:27:06,320 --> 00:27:10,320
some bumps um so they and they talk

00:27:09,760 --> 00:27:12,240
about this

00:27:10,320 --> 00:27:14,240
in the documentation this is all listed

00:27:12,240 --> 00:27:16,000
there uh very clearly

00:27:14,240 --> 00:27:17,520
so some of the browser apis and

00:27:16,000 --> 00:27:18,399
capabilities may be missing on the

00:27:17,520 --> 00:27:21,840
server

00:27:18,399 --> 00:27:23,679
um because uh a universal app

00:27:21,840 --> 00:27:25,279
the execution doesn't happen in the

00:27:23,679 --> 00:27:29,039
browser so

00:27:25,279 --> 00:27:33,039
um there are some of those

00:27:29,039 --> 00:27:35,840
browser apis that you may not have

00:27:33,039 --> 00:27:37,520
at your disposal so uh like without

00:27:35,840 --> 00:27:38,480
mouse or keyboard events a server-side

00:27:37,520 --> 00:27:40,480
app can't rely

00:27:38,480 --> 00:27:42,640
on the user clicking a button to show a

00:27:40,480 --> 00:27:45,679
component but angular provides

00:27:42,640 --> 00:27:48,880
um some abstractions um

00:27:45,679 --> 00:27:52,080
and so you're able to like they have

00:27:48,880 --> 00:27:55,120
um location or document uh

00:27:52,080 --> 00:27:56,640
which could be good substitutes for some

00:27:55,120 --> 00:27:59,279
of these apis

00:27:56,640 --> 00:28:01,600
and you also are able to write new

00:27:59,279 --> 00:28:05,120
abstractions that delegate

00:28:01,600 --> 00:28:09,200
to the browser apis while in the browser

00:28:05,120 --> 00:28:11,120
um and give give you the ability to have

00:28:09,200 --> 00:28:12,720
an alternate implementation so you

00:28:11,120 --> 00:28:13,840
basically you're able to be doing some

00:28:12,720 --> 00:28:16,799
shimming

00:28:13,840 --> 00:28:18,000
um but you know that's like not right

00:28:16,799 --> 00:28:20,399
out of the box

00:28:18,000 --> 00:28:21,120
easy things to do so it is a bump in the

00:28:20,399 --> 00:28:24,399
road

00:28:21,120 --> 00:28:26,320
and um the app has to determine

00:28:24,399 --> 00:28:28,399
what to render based solely on the

00:28:26,320 --> 00:28:31,360
incoming client request

00:28:28,399 --> 00:28:32,960
so um they always suggest making the app

00:28:31,360 --> 00:28:35,279
routable

00:28:32,960 --> 00:28:36,880
but um a thing that is really troubling

00:28:35,279 --> 00:28:38,320
for me is the fact that

00:28:36,880 --> 00:28:40,480
uh that page that i showed you is the

00:28:38,320 --> 00:28:42,000
only page that exists as or

00:28:40,480 --> 00:28:44,159
is like the main page that exists in

00:28:42,000 --> 00:28:46,399
documentation for angular universal

00:28:44,159 --> 00:28:47,279
and angular reversal is a very powerful

00:28:46,399 --> 00:28:50,720
and

00:28:47,279 --> 00:28:53,760
intricate tool um and so or

00:28:50,720 --> 00:28:56,080
technology so i would love to see more

00:28:53,760 --> 00:28:56,640
documentation on angular universal

00:28:56,080 --> 00:28:59,679
because

00:28:56,640 --> 00:29:02,559
the learning curve can be a bit bumpy

00:28:59,679 --> 00:29:03,679
um so more documentation would be great

00:29:02,559 --> 00:29:05,360
um the code is there

00:29:03,679 --> 00:29:06,720
it's all open source you can go check it

00:29:05,360 --> 00:29:10,080
out um

00:29:06,720 --> 00:29:11,279
but i really hate it when people ask

00:29:10,080 --> 00:29:13,039
just read the code you want to figure

00:29:11,279 --> 00:29:14,799
out what it does just read the code

00:29:13,039 --> 00:29:16,559
and it's like do you know how much time

00:29:14,799 --> 00:29:19,200
i have in a day

00:29:16,559 --> 00:29:19,840
so more documentation would be great um

00:29:19,200 --> 00:29:22,240
which

00:29:19,840 --> 00:29:24,000
they're doing a lot of um work on the

00:29:22,240 --> 00:29:25,279
angular documentation in general so

00:29:24,000 --> 00:29:26,960
it'll be great to see

00:29:25,279 --> 00:29:28,399
how advancements go with angular

00:29:26,960 --> 00:29:29,919
universal especially in the

00:29:28,399 --> 00:29:34,159
pre-rendering

00:29:29,919 --> 00:29:35,840
aspect of angular first so speaking of

00:29:34,159 --> 00:29:37,360
i want to talk about pre-rendering and

00:29:35,840 --> 00:29:40,720
surveillance functions

00:29:37,360 --> 00:29:42,960
um so

00:29:40,720 --> 00:29:43,919
we talked about this a bit um there's a

00:29:42,960 --> 00:29:45,840
bit overlap

00:29:43,919 --> 00:29:47,279
with that uh pre-rendering and

00:29:45,840 --> 00:29:50,480
server-side rendering is

00:29:47,279 --> 00:29:50,880
we're trying to get just a html rendered

00:29:50,480 --> 00:29:52,960
from

00:29:50,880 --> 00:29:54,080
the dynamic content that we make within

00:29:52,960 --> 00:29:56,240
angular

00:29:54,080 --> 00:29:57,440
pre-rendering is basically rendering

00:29:56,240 --> 00:29:59,919
content at build

00:29:57,440 --> 00:30:01,520
time that's the major difference the

00:29:59,919 --> 00:30:03,600
content is being rendered

00:30:01,520 --> 00:30:04,880
being transformed into a static asset of

00:30:03,600 --> 00:30:06,880
build time

00:30:04,880 --> 00:30:08,159
so when it comes to requesting we're not

00:30:06,880 --> 00:30:10,399
even talking

00:30:08,159 --> 00:30:11,840
to servers we're not even trying to make

00:30:10,399 --> 00:30:14,960
any requests

00:30:11,840 --> 00:30:17,600
um we're just to bring up static content

00:30:14,960 --> 00:30:19,200
this definitely proves first paint and

00:30:17,600 --> 00:30:22,240
first contentful paint

00:30:19,200 --> 00:30:25,520
um and

00:30:22,240 --> 00:30:26,960
it must be booted uh on the client

00:30:25,520 --> 00:30:28,799
in order for the patients to be truly

00:30:26,960 --> 00:30:32,480
interactive but this can be

00:30:28,799 --> 00:30:35,760
challenging and even infeasible when

00:30:32,480 --> 00:30:36,799
uh if you have to predict what every

00:30:35,760 --> 00:30:40,240
single url

00:30:36,799 --> 00:30:43,120
is supposed to be ahead of time um

00:30:40,240 --> 00:30:44,240
especially for pages or sites with a

00:30:43,120 --> 00:30:49,120
large number of

00:30:44,240 --> 00:30:50,399
unique pages um but

00:30:49,120 --> 00:30:52,080
we're going to be talking about how

00:30:50,399 --> 00:30:53,520
there are solutions to that already

00:30:52,080 --> 00:30:56,159
coming through

00:30:53,520 --> 00:30:56,640
but just that's a good bump to think

00:30:56,159 --> 00:31:00,559
about

00:30:56,640 --> 00:31:02,240
with pre-rendering is um do you have

00:31:00,559 --> 00:31:03,760
hundreds of thousands of pages that

00:31:02,240 --> 00:31:05,279
you're going to be rendering at build

00:31:03,760 --> 00:31:08,880
time do you have

00:31:05,279 --> 00:31:11,120
that kind of build time to um like

00:31:08,880 --> 00:31:12,159
do you know that you have to have built

00:31:11,120 --> 00:31:14,480
things rebuilt

00:31:12,159 --> 00:31:15,679
all the time or can you have a specific

00:31:14,480 --> 00:31:18,960
rebuild time

00:31:15,679 --> 00:31:24,159
or a specific build time um

00:31:18,960 --> 00:31:26,799
but again all of these things are uh

00:31:24,159 --> 00:31:28,640
coming to uh developers heads and the

00:31:26,799 --> 00:31:29,039
ecosystem is answering these questions

00:31:28,640 --> 00:31:31,039
so

00:31:29,039 --> 00:31:32,399
we'll touch on that in a little bit but

00:31:31,039 --> 00:31:34,240
i want to say that there are

00:31:32,399 --> 00:31:36,480
a few approaches to pre-rendering in

00:31:34,240 --> 00:31:40,480
angular that exist at the moment

00:31:36,480 --> 00:31:42,159
um there is actually utilizing a segment

00:31:40,480 --> 00:31:43,679
of angular universal with angular

00:31:42,159 --> 00:31:47,519
pre-render module

00:31:43,679 --> 00:31:49,519
built by chris it's basically taking

00:31:47,519 --> 00:31:50,720
this pre-render functionality that

00:31:49,519 --> 00:31:55,120
happens um

00:31:50,720 --> 00:31:56,799
in your angular universal and um

00:31:55,120 --> 00:31:58,880
abstracting it to just do that

00:31:56,799 --> 00:32:01,200
pre-rendering part for you

00:31:58,880 --> 00:32:02,880
it's a really easy setup as well we'll

00:32:01,200 --> 00:32:06,559
talk about this in the um

00:32:02,880 --> 00:32:09,200
workshop but again you don't see this

00:32:06,559 --> 00:32:10,080
in the documentation they talk about how

00:32:09,200 --> 00:32:12,720
on the server

00:32:10,080 --> 00:32:13,760
it makes that static asset the html

00:32:12,720 --> 00:32:15,120
asset but

00:32:13,760 --> 00:32:17,440
it's actually using a pre-render

00:32:15,120 --> 00:32:19,039
function um and chris did the work of

00:32:17,440 --> 00:32:20,559
digging into the code to find it but

00:32:19,039 --> 00:32:22,559
hopefully we see some documentation

00:32:20,559 --> 00:32:26,559
about that in the near future

00:32:22,559 --> 00:32:28,720
and um we have scully now

00:32:26,559 --> 00:32:29,919
this is the first and only static site

00:32:28,720 --> 00:32:33,679
generator for

00:32:29,919 --> 00:32:35,600
angular and it is a really great simple

00:32:33,679 --> 00:32:37,360
way to pre-render your application and

00:32:35,600 --> 00:32:38,640
give you a lot of ways to work with like

00:32:37,360 --> 00:32:41,360
markdown

00:32:38,640 --> 00:32:43,120
um having a basically a plug-in system

00:32:41,360 --> 00:32:46,159
to really make your

00:32:43,120 --> 00:32:48,720
site um work faster and it's a jam stack

00:32:46,159 --> 00:32:49,919
approach um which we'll also touch on

00:32:48,720 --> 00:32:53,279
but uh

00:32:49,919 --> 00:32:55,360
highly recommend checking out scully um

00:32:53,279 --> 00:32:56,880
we'll talk about that and use that a lot

00:32:55,360 --> 00:32:58,880
more in the workshop

00:32:56,880 --> 00:33:00,399
but what is a static site generator just

00:32:58,880 --> 00:33:01,919
so i make sure that we're kind of

00:33:00,399 --> 00:33:04,399
covering all these topics

00:33:01,919 --> 00:33:05,360
the satellite generator is basically uh

00:33:04,399 --> 00:33:06,799
what we talked about with that

00:33:05,360 --> 00:33:09,600
pre-rendering of generating

00:33:06,799 --> 00:33:10,960
all of the pages for the whole site once

00:33:09,600 --> 00:33:12,640
at build time

00:33:10,960 --> 00:33:14,320
and then when there's a change it will

00:33:12,640 --> 00:33:15,919
regenerate all of those

00:33:14,320 --> 00:33:18,240
um and every major framework and

00:33:15,919 --> 00:33:20,960
language has one but when you're

00:33:18,240 --> 00:33:21,360
doing that so that content uh we say

00:33:20,960 --> 00:33:23,039
that

00:33:21,360 --> 00:33:24,640
every time there's a change you rebuild

00:33:23,039 --> 00:33:26,080
the whole site but you're actually able

00:33:24,640 --> 00:33:27,840
to cache a lot of that

00:33:26,080 --> 00:33:29,760
so you can look at different build

00:33:27,840 --> 00:33:31,360
plugins to see

00:33:29,760 --> 00:33:33,919
what actually changed what actually

00:33:31,360 --> 00:33:36,159
needs re um

00:33:33,919 --> 00:33:37,760
generated so to make your build time

00:33:36,159 --> 00:33:39,279
faster this is one of the approaches

00:33:37,760 --> 00:33:42,480
that's like evolving

00:33:39,279 --> 00:33:44,320
and it's harder to hack playing html

00:33:42,480 --> 00:33:46,240
and it gets to be user much faster

00:33:44,320 --> 00:33:47,840
because it's not making those requests

00:33:46,240 --> 00:33:51,039
and it's a smaller bundle

00:33:47,840 --> 00:33:53,760
so i touched on um

00:33:51,039 --> 00:33:54,720
the jam stack architecture i give whole

00:33:53,760 --> 00:33:57,919
talks on this

00:33:54,720 --> 00:33:58,480
i have some resources uh at the end um

00:33:57,919 --> 00:34:00,320
that i

00:33:58,480 --> 00:34:02,240
will guide you to but i want to give you

00:34:00,320 --> 00:34:04,480
a really high level overview

00:34:02,240 --> 00:34:06,960
the damstack architecture is basically

00:34:04,480 --> 00:34:10,159
taking concepts that we're already

00:34:06,960 --> 00:34:12,399
used to and pulling them together to

00:34:10,159 --> 00:34:14,000
um give you like faster and more

00:34:12,399 --> 00:34:16,159
reliable and secure sites

00:34:14,000 --> 00:34:17,679
uh with the easier integration process

00:34:16,159 --> 00:34:19,760
for developers and then

00:34:17,679 --> 00:34:22,480
lower costs and confusions when it comes

00:34:19,760 --> 00:34:25,599
to set up an infrastructure

00:34:22,480 --> 00:34:27,119
but here are the bullet points

00:34:25,599 --> 00:34:28,879
you're basically generating cachable

00:34:27,119 --> 00:34:30,639
static assets and we would do things

00:34:28,879 --> 00:34:31,359
like with angular this is where angular

00:34:30,639 --> 00:34:32,800
comes in

00:34:31,359 --> 00:34:34,560
so we'd make an english site and

00:34:32,800 --> 00:34:36,960
pre-render it with scully

00:34:34,560 --> 00:34:38,399
or with that with angular universal's

00:34:36,960 --> 00:34:40,240
pre-render functionality

00:34:38,399 --> 00:34:41,599
then we would deploy it to a cdn a

00:34:40,240 --> 00:34:43,119
content delivery network

00:34:41,599 --> 00:34:46,000
so we're not on the traditional server

00:34:43,119 --> 00:34:47,839
architecture but a more dumbed down

00:34:46,000 --> 00:34:50,480
version of that that has edge nodes

00:34:47,839 --> 00:34:54,240
closer to people requesting them

00:34:50,480 --> 00:34:55,440
um and then using client-side javascript

00:34:54,240 --> 00:34:57,520
like we're going to be talking about

00:34:55,440 --> 00:35:01,680
serverless functions and network

00:34:57,520 --> 00:35:04,720
functions to utilize apis um

00:35:01,680 --> 00:35:06,480
serverless functions and then also again

00:35:04,720 --> 00:35:08,800
i care very much about developer

00:35:06,480 --> 00:35:12,400
experience um

00:35:08,800 --> 00:35:15,359
because i'm a developer and i i

00:35:12,400 --> 00:35:16,720
like developers um so i care very much

00:35:15,359 --> 00:35:18,800
about their experience

00:35:16,720 --> 00:35:20,880
and so they do this with um kind of a

00:35:18,800 --> 00:35:23,200
git workflow and

00:35:20,880 --> 00:35:24,400
um doing automated workflows automated

00:35:23,200 --> 00:35:26,800
builds and

00:35:24,400 --> 00:35:27,920
easy to roll back to immutable builds

00:35:26,800 --> 00:35:29,599
things like that

00:35:27,920 --> 00:35:31,280
um again i'm going to give you a bunch

00:35:29,599 --> 00:35:32,160
of references if you want to learn more

00:35:31,280 --> 00:35:35,200
about this

00:35:32,160 --> 00:35:37,440
and i'm always happy to chat about it uh

00:35:35,200 --> 00:35:39,040
i drank the kool-aid and it was

00:35:37,440 --> 00:35:40,960
delicious

00:35:39,040 --> 00:35:42,720
i really i'm a huge fan of jam-stack

00:35:40,960 --> 00:35:44,480
architecture so if you ever want to chat

00:35:42,720 --> 00:35:48,560
about it let me know um

00:35:44,480 --> 00:35:52,079
real quick because we touched on uh some

00:35:48,560 --> 00:35:54,880
phrase uh some aspects that may not be

00:35:52,079 --> 00:35:56,720
quick to mind definitions cdn it's a

00:35:54,880 --> 00:36:00,720
content delivery network and these are

00:35:56,720 --> 00:36:03,359
geographically distributed edge nodes so

00:36:00,720 --> 00:36:04,800
they um are like dumb servers that hold

00:36:03,359 --> 00:36:06,800
we can say dump service because we talk

00:36:04,800 --> 00:36:08,240
about dumb components all the time right

00:36:06,800 --> 00:36:10,320
um but there are these nodes that hold

00:36:08,240 --> 00:36:12,400
the deliverable assets so the static

00:36:10,320 --> 00:36:14,800
assets that we make

00:36:12,400 --> 00:36:15,760
and it's sent from an origin server but

00:36:14,800 --> 00:36:17,440
then it serves it

00:36:15,760 --> 00:36:19,040
as close to the user requesting it as

00:36:17,440 --> 00:36:21,839
possible to try and

00:36:19,040 --> 00:36:22,880
limit that latency and then it also has

00:36:21,839 --> 00:36:24,720
redirect knowledge

00:36:22,880 --> 00:36:26,400
so if they go if something happens to

00:36:24,720 --> 00:36:30,079
that node it knows

00:36:26,400 --> 00:36:31,680
to send it to the next closest one so

00:36:30,079 --> 00:36:34,240
you have that redundancy

00:36:31,680 --> 00:36:35,680
making it more reliable um and then

00:36:34,240 --> 00:36:36,800
another thing that we talked about that

00:36:35,680 --> 00:36:40,560
we're going to delve into

00:36:36,800 --> 00:36:43,040
are serverless functions so again this

00:36:40,560 --> 00:36:46,320
does not mean that there are no servers

00:36:43,040 --> 00:36:48,480
i like to say it's serverless worryless

00:36:46,320 --> 00:36:50,240
because um you're basically using the

00:36:48,480 --> 00:36:53,599
same functionality of the server

00:36:50,240 --> 00:36:57,839
but where serverless tries to take away

00:36:53,599 --> 00:37:00,960
the actual management of that technology

00:36:57,839 --> 00:37:01,920
um so serverless functions are basically

00:37:00,960 --> 00:37:04,960
a single purpose

00:37:01,920 --> 00:37:06,480
function that you as the developer make

00:37:04,960 --> 00:37:08,720
and then it's hosted maintained and

00:37:06,480 --> 00:37:10,320
executed by an infrastructure or cloud

00:37:08,720 --> 00:37:12,720
computing company

00:37:10,320 --> 00:37:13,440
so it's javascript functions hosted and

00:37:12,720 --> 00:37:17,040
maintained

00:37:13,440 --> 00:37:19,280
by infrastructure providers um

00:37:17,040 --> 00:37:20,880
so there are a lot of these that exist

00:37:19,280 --> 00:37:23,839
out there azure functions

00:37:20,880 --> 00:37:23,839
um google

00:37:24,320 --> 00:37:28,480
is it just google functions i think it's

00:37:26,720 --> 00:37:32,000
google cloud functions

00:37:28,480 --> 00:37:33,520
um aws lambda is one that's quite

00:37:32,000 --> 00:37:35,599
popular as well

00:37:33,520 --> 00:37:37,359
and i have this really great post like i

00:37:35,599 --> 00:37:37,920
said i'm dumping a lot of information on

00:37:37,359 --> 00:37:39,920
you

00:37:37,920 --> 00:37:42,560
so i want to make sure that i give you

00:37:39,920 --> 00:37:45,040
resources to take with you so you can

00:37:42,560 --> 00:37:46,400
read more into this and again in the

00:37:45,040 --> 00:37:47,920
workshop

00:37:46,400 --> 00:37:50,079
we'll take all the information that i've

00:37:47,920 --> 00:37:51,280
dumped on you and then you've had like a

00:37:50,079 --> 00:37:54,079
few weeks to process

00:37:51,280 --> 00:37:54,880
and then put it into action but um if

00:37:54,079 --> 00:37:57,920
you want to learn

00:37:54,880 --> 00:38:00,560
anything check out learn with jason this

00:37:57,920 --> 00:38:04,079
is uh my co-worker jason langstorff's

00:38:00,560 --> 00:38:04,800
uh child and he's got blog posts on here

00:38:04,079 --> 00:38:06,640
but also

00:38:04,800 --> 00:38:08,079
he does twitch streams with really

00:38:06,640 --> 00:38:10,880
amazing people

00:38:08,079 --> 00:38:11,599
um to help you learn more things as he's

00:38:10,880 --> 00:38:13,599
learning it

00:38:11,599 --> 00:38:15,920
and uh he has this blog post what are

00:38:13,599 --> 00:38:18,240
service functions and how do i use them

00:38:15,920 --> 00:38:19,359
he's got a lot of great content that um

00:38:18,240 --> 00:38:20,800
walks you through

00:38:19,359 --> 00:38:22,640
using them and i'll point to some of

00:38:20,800 --> 00:38:23,440
that at the end in the resource section

00:38:22,640 --> 00:38:25,359
as well but

00:38:23,440 --> 00:38:26,800
this is a great introduction to

00:38:25,359 --> 00:38:28,960
serverless functions

00:38:26,800 --> 00:38:30,160
and what's happening and why it's

00:38:28,960 --> 00:38:33,440
happening

00:38:30,160 --> 00:38:37,119
um and i just want to touch on

00:38:33,440 --> 00:38:38,640
um these really quickly because i think

00:38:37,119 --> 00:38:40,400
people don't realize how much you can

00:38:38,640 --> 00:38:41,920
actually do with um

00:38:40,400 --> 00:38:43,920
serverless functions talking to

00:38:41,920 --> 00:38:44,720
different apis so i just want to talk

00:38:43,920 --> 00:38:46,720
about each of these

00:38:44,720 --> 00:38:48,480
aspects that can happen with using

00:38:46,720 --> 00:38:50,000
pre-rendering plus serverless functions

00:38:48,480 --> 00:38:53,040
to talk to these apis

00:38:50,000 --> 00:38:55,839
you can get data with um this is

00:38:53,040 --> 00:38:56,560
uh aws appsync firestore which many of

00:38:55,839 --> 00:38:59,760
you may be

00:38:56,560 --> 00:39:03,359
used to using mongodb fonadb realm

00:38:59,760 --> 00:39:04,800
h air table and sura all of these

00:39:03,359 --> 00:39:06,160
use apis that you can talk to with

00:39:04,800 --> 00:39:07,280
serverless functions so this is how you

00:39:06,160 --> 00:39:10,400
get data

00:39:07,280 --> 00:39:12,240
then there's also headless cmss i want

00:39:10,400 --> 00:39:14,240
to talk about what this phrase is

00:39:12,240 --> 00:39:16,079
a headless cms is a back and only

00:39:14,240 --> 00:39:18,640
content management system

00:39:16,079 --> 00:39:20,000
for making your content available

00:39:18,640 --> 00:39:23,760
through an api

00:39:20,000 --> 00:39:25,680
so it's taking the uh that ui

00:39:23,760 --> 00:39:28,000
that especially content contributors are

00:39:25,680 --> 00:39:30,160
used to using the forms to say

00:39:28,000 --> 00:39:31,440
enter the text under the picture and it

00:39:30,160 --> 00:39:34,400
takes that off

00:39:31,440 --> 00:39:36,400
of that back end data side that the

00:39:34,400 --> 00:39:39,760
developer needs to use

00:39:36,400 --> 00:39:41,040
so it says here give me the information

00:39:39,760 --> 00:39:42,000
that you want me to store i don't care

00:39:41,040 --> 00:39:46,240
what you do with it

00:39:42,000 --> 00:39:47,359
i i am happy to deliver the content

00:39:46,240 --> 00:39:50,000
wherever you need it

00:39:47,359 --> 00:39:52,160
um and so basically it's really great

00:39:50,000 --> 00:39:54,160
because you can have this content

00:39:52,160 --> 00:39:55,440
um put in by things that you may be

00:39:54,160 --> 00:39:58,079
familiar with like uh

00:39:55,440 --> 00:39:58,560
there's headless wordpress um and

00:39:58,079 --> 00:40:01,599
there's

00:39:58,560 --> 00:40:05,839
a flaming for firebase so

00:40:01,599 --> 00:40:09,200
you have olive and contentful um

00:40:05,839 --> 00:40:10,240
there's a bunch of them so again you're

00:40:09,200 --> 00:40:12,880
able to

00:40:10,240 --> 00:40:14,480
pre-render have all that static content

00:40:12,880 --> 00:40:14,960
use those serverless functions to talk

00:40:14,480 --> 00:40:18,079
to these

00:40:14,960 --> 00:40:20,160
apis and make it dynamic um

00:40:18,079 --> 00:40:21,839
a lot of people say that with those

00:40:20,160 --> 00:40:22,880
pre-rendered and like static rendered

00:40:21,839 --> 00:40:25,280
sites you're not

00:40:22,880 --> 00:40:27,599
you don't have the as dynamic as you

00:40:25,280 --> 00:40:29,680
would with server-side renderings but

00:40:27,599 --> 00:40:31,040
these are the things with serverless

00:40:29,680 --> 00:40:34,079
functions that you're able to do that

00:40:31,040 --> 00:40:35,119
like with authentication and things

00:40:34,079 --> 00:40:38,240
again that you might be

00:40:35,119 --> 00:40:40,480
used to like um xero and firebase

00:40:38,240 --> 00:40:41,520
um we have netlify identity which i'll

00:40:40,480 --> 00:40:44,240
touch on

00:40:41,520 --> 00:40:45,440
you can even do e-commerce with things

00:40:44,240 --> 00:40:47,440
like uh that's

00:40:45,440 --> 00:40:48,640
snip cart and stripe and paypal and

00:40:47,440 --> 00:40:52,079
square

00:40:48,640 --> 00:40:53,440
um and even search with things like

00:40:52,079 --> 00:40:57,359
algolia

00:40:53,440 --> 00:41:01,280
um and even doing google custom searches

00:40:57,359 --> 00:41:01,599
and cloud sh so i wanted to talk about

00:41:01,280 --> 00:41:03,119
those

00:41:01,599 --> 00:41:05,280
so that you just had a really quick

00:41:03,119 --> 00:41:06,720
grasp of the actual functionality that

00:41:05,280 --> 00:41:09,200
you can perform

00:41:06,720 --> 00:41:12,079
without having to um with being able to

00:41:09,200 --> 00:41:14,480
use those serverless functions

00:41:12,079 --> 00:41:15,280
so um i just want to touch on what this

00:41:14,480 --> 00:41:16,800
looks like

00:41:15,280 --> 00:41:18,319
like how we jumped into angular

00:41:16,800 --> 00:41:19,680
universal i kind of just want to show

00:41:18,319 --> 00:41:21,839
you what it looks like to use something

00:41:19,680 --> 00:41:25,359
like netlify functions

00:41:21,839 --> 00:41:25,359
these are basically um

00:41:25,760 --> 00:41:29,760
they're a wrapper around aws lambda

00:41:28,480 --> 00:41:31,440
functions so you have all these

00:41:29,760 --> 00:41:32,640
capabilities that you have with these

00:41:31,440 --> 00:41:35,760
functions but

00:41:32,640 --> 00:41:38,720
we're trying to take back

00:41:35,760 --> 00:41:40,480
um the time that gets sent into all of

00:41:38,720 --> 00:41:42,079
the setups all of the apps

00:41:40,480 --> 00:41:43,839
all of that back-end infrastructure work

00:41:42,079 --> 00:41:47,200
that you have to understand

00:41:43,839 --> 00:41:50,480
and execute to do um

00:41:47,200 --> 00:41:53,520
those lambda functions um

00:41:50,480 --> 00:41:55,520
on the server so again

00:41:53,520 --> 00:41:57,520
we're basically saying like here give us

00:41:55,520 --> 00:42:00,160
the function that you want to use

00:41:57,520 --> 00:42:01,520
we'll have that just saved and rendered

00:42:00,160 --> 00:42:04,400
so you have it there

00:42:01,520 --> 00:42:05,920
we're not talking to this we're sending

00:42:04,400 --> 00:42:07,040
this information out this javascript

00:42:05,920 --> 00:42:09,920
information out

00:42:07,040 --> 00:42:11,280
to perform your action um and i have

00:42:09,920 --> 00:42:12,880
this post that walks you through this

00:42:11,280 --> 00:42:13,599
whole process but i want to show you the

00:42:12,880 --> 00:42:16,960
code

00:42:13,599 --> 00:42:20,960
of how to authenticate users in angular

00:42:16,960 --> 00:42:22,319
using a netlife identity which uses the

00:42:20,960 --> 00:42:23,760
netlify functions which is the

00:42:22,319 --> 00:42:26,000
serverless function

00:42:23,760 --> 00:42:27,040
so what does this look like so like we

00:42:26,000 --> 00:42:28,480
were doing with that server-side

00:42:27,040 --> 00:42:30,160
rendering to talk to the servers what

00:42:28,480 --> 00:42:32,480
does it look like when we do it at this

00:42:30,160 --> 00:42:35,200
route in this way of rendering

00:42:32,480 --> 00:42:37,520
so here you see this is just the your

00:42:35,200 --> 00:42:39,680
angular index.html file that's in

00:42:37,520 --> 00:42:42,160
your root directory the only thing that

00:42:39,680 --> 00:42:45,520
i added in here is the script section

00:42:42,160 --> 00:42:49,280
that says um go

00:42:45,520 --> 00:42:51,920
to the source is this identify

00:42:49,280 --> 00:42:53,680
widget um this is an open source project

00:42:51,920 --> 00:42:55,200
so feel free to go check out netlify

00:42:53,680 --> 00:42:58,079
identity widget we have a lot of

00:42:55,200 --> 00:42:59,760
information there my team maintains it

00:42:58,079 --> 00:43:01,599
and then inside of my navigation

00:42:59,760 --> 00:43:04,480
component

00:43:01,599 --> 00:43:04,800
i just had to add this div that's login

00:43:04,480 --> 00:43:07,200
and

00:43:04,800 --> 00:43:09,680
passes uh the data notified any button

00:43:07,200 --> 00:43:12,160
so that's all the code i needed to add

00:43:09,680 --> 00:43:14,079
and this is what it looks like basically

00:43:12,160 --> 00:43:17,200
um i added that information

00:43:14,079 --> 00:43:18,960
i went and i enabled it on the ui it

00:43:17,200 --> 00:43:20,640
says it's enabled i refresh the page in

00:43:18,960 --> 00:43:22,160
that top right section you see now i

00:43:20,640 --> 00:43:24,240
have a login button

00:43:22,160 --> 00:43:25,359
and when i click it i have users have

00:43:24,240 --> 00:43:27,520
the ability to

00:43:25,359 --> 00:43:29,200
sign up and get their information and

00:43:27,520 --> 00:43:33,599
they're going to sign up

00:43:29,200 --> 00:43:33,599
but they also are able to log in

00:43:35,520 --> 00:43:38,960
and use a bunch of third-party providers

00:43:38,560 --> 00:43:42,640
like

00:43:38,960 --> 00:43:47,280
uh see if i walk through it i can enable

00:43:42,640 --> 00:43:49,839
um google login github login

00:43:47,280 --> 00:43:51,359
by adding these external providers so

00:43:49,839 --> 00:43:52,880
it's basically just clicking these

00:43:51,359 --> 00:43:55,680
options

00:43:52,880 --> 00:43:58,000
and all of this is happening behind the

00:43:55,680 --> 00:44:01,040
scenes with serverless functions

00:43:58,000 --> 00:44:03,359
so when i go to um

00:44:01,040 --> 00:44:04,400
when i go back to the page and i hit log

00:44:03,359 --> 00:44:06,960
in and i have that on

00:44:04,400 --> 00:44:08,480
all that information there my the

00:44:06,960 --> 00:44:10,960
content on the page

00:44:08,480 --> 00:44:12,240
is statically is pre-rendered so all of

00:44:10,960 --> 00:44:14,800
that's coming through

00:44:12,240 --> 00:44:16,240
and then i'm pushing in these aspects

00:44:14,800 --> 00:44:17,920
with serverless functions to get that

00:44:16,240 --> 00:44:20,800
dynamic information

00:44:17,920 --> 00:44:22,079
so um you see how how fast that went

00:44:20,800 --> 00:44:23,520
through and we'll look at all of the

00:44:22,079 --> 00:44:27,200
actual page load times

00:44:23,520 --> 00:44:29,599
um in the workshop but

00:44:27,200 --> 00:44:30,880
so those are kind of like what we have

00:44:29,599 --> 00:44:34,319
that exists now

00:44:30,880 --> 00:44:37,359
readily available to us but the future

00:44:34,319 --> 00:44:39,280
is bringing a lot more um we won't go in

00:44:37,359 --> 00:44:42,400
depth about these because

00:44:39,280 --> 00:44:45,760
as with all technology in our realm

00:44:42,400 --> 00:44:48,720
uh the future is not uh

00:44:45,760 --> 00:44:50,079
it's not guaranteed so we're not gonna

00:44:48,720 --> 00:44:53,280
fill our brains with

00:44:50,079 --> 00:44:56,880
too many details on these but um

00:44:53,280 --> 00:44:59,760
they're uh there is work being done

00:44:56,880 --> 00:45:00,560
with all of these so streaming server

00:44:59,760 --> 00:45:03,599
rendering

00:45:00,560 --> 00:45:04,000
um and i think uh netflix actually

00:45:03,599 --> 00:45:05,440
currently

00:45:04,000 --> 00:45:07,440
uses something like this where you're

00:45:05,440 --> 00:45:08,960
sending html in chunks

00:45:07,440 --> 00:45:11,040
that the browser can progressively

00:45:08,960 --> 00:45:13,200
render as it's received

00:45:11,040 --> 00:45:15,200
which is a really fast first paint and

00:45:13,200 --> 00:45:17,839
first contentful paint

00:45:15,200 --> 00:45:19,440
as it arrives to the user faster because

00:45:17,839 --> 00:45:21,280
it's coming through in chunks

00:45:19,440 --> 00:45:23,200
um and like the name suggests

00:45:21,280 --> 00:45:25,599
progressive rehydration

00:45:23,200 --> 00:45:28,000
where you're progressively hydrating

00:45:25,599 --> 00:45:29,680
your site and then partial rehydration

00:45:28,000 --> 00:45:33,119
where you're only picking and choosing

00:45:29,680 --> 00:45:35,680
what is actually being hydrated um

00:45:33,119 --> 00:45:37,200
and then there are edge handlers this is

00:45:35,680 --> 00:45:40,240
the one that i'm excited about

00:45:37,200 --> 00:45:43,359
because um i

00:45:40,240 --> 00:45:46,880
really like the approach

00:45:43,359 --> 00:45:50,800
of the of working with the cdns and

00:45:46,880 --> 00:45:53,119
um and it's that jam stack approach

00:45:50,800 --> 00:45:54,079
and basically what these are are how we

00:45:53,119 --> 00:45:56,000
talked about

00:45:54,079 --> 00:45:57,680
having those edge nodes on the cdn with

00:45:56,000 --> 00:45:59,359
the redirect knowledge

00:45:57,680 --> 00:46:02,240
inside that redirect knowledge you can

00:45:59,359 --> 00:46:03,760
now create a javascript function

00:46:02,240 --> 00:46:06,079
that will take all of the header

00:46:03,760 --> 00:46:09,119
information coming in from request

00:46:06,079 --> 00:46:11,440
and without ever going back to a server

00:46:09,119 --> 00:46:13,760
without ever making a server call or a

00:46:11,440 --> 00:46:16,640
call to the origin server

00:46:13,760 --> 00:46:18,400
it takes that request and processes that

00:46:16,640 --> 00:46:20,480
javascript functionality

00:46:18,400 --> 00:46:21,920
get it and using that header information

00:46:20,480 --> 00:46:23,839
so you can do

00:46:21,920 --> 00:46:25,599
a lot of really cool things as far as

00:46:23,839 --> 00:46:28,560
like localized content so

00:46:25,599 --> 00:46:30,079
if a user is requesting information from

00:46:28,560 --> 00:46:32,240
san francisco

00:46:30,079 --> 00:46:34,000
that information is in the header so you

00:46:32,240 --> 00:46:36,240
can pass that information to your

00:46:34,000 --> 00:46:39,280
javascript function that says

00:46:36,240 --> 00:46:41,520
um what's the location

00:46:39,280 --> 00:46:42,800
okay give me this pre-rendered content

00:46:41,520 --> 00:46:45,680
that i already have

00:46:42,800 --> 00:46:48,079
that's labeled for that location so

00:46:45,680 --> 00:46:51,760
california gets the california page

00:46:48,079 --> 00:46:52,880
um you know montreal gets the montreal

00:46:51,760 --> 00:46:55,200
page like

00:46:52,880 --> 00:46:57,040
it's all very specific to localizations

00:46:55,200 --> 00:47:00,640
but then you can also do

00:46:57,040 --> 00:47:02,560
um like a b testing so you're splitting

00:47:00,640 --> 00:47:04,160
your visitors across multiple versions

00:47:02,560 --> 00:47:05,119
of the content dependent on their

00:47:04,160 --> 00:47:07,280
requests

00:47:05,119 --> 00:47:08,880
as well as personalized ads and ads

00:47:07,280 --> 00:47:10,160
based on time

00:47:08,880 --> 00:47:12,240
uh you know the time of day that's

00:47:10,160 --> 00:47:15,359
coming through in that header

00:47:12,240 --> 00:47:19,520
so that is an extremely

00:47:15,359 --> 00:47:21,920
exciting future in my opinion because

00:47:19,520 --> 00:47:23,119
it's basically um i'm sorry if you can

00:47:21,920 --> 00:47:25,440
hear that my dog

00:47:23,119 --> 00:47:26,640
just started snoring i guess she's bored

00:47:25,440 --> 00:47:29,920
of my talk but

00:47:26,640 --> 00:47:30,880
um so we're basically being able to take

00:47:29,920 --> 00:47:33,040
something

00:47:30,880 --> 00:47:34,400
um like a cdn which is a dumb server and

00:47:33,040 --> 00:47:36,559
we're taking something quite dumb and

00:47:34,400 --> 00:47:38,240
making it very powerful without

00:47:36,559 --> 00:47:39,599
um adding too much complication we're

00:47:38,240 --> 00:47:42,319
just adding a

00:47:39,599 --> 00:47:43,839
javascript um now that javascript can't

00:47:42,319 --> 00:47:45,119
be complicated um

00:47:43,839 --> 00:47:47,680
but you know usually we don't want to

00:47:45,119 --> 00:47:49,440
make something dumb very powerful but

00:47:47,680 --> 00:47:51,280
in this case it really helps us out

00:47:49,440 --> 00:47:52,880
because we're still having that

00:47:51,280 --> 00:47:55,520
simplified infrastructure

00:47:52,880 --> 00:47:56,319
and um lowered costs compared to a

00:47:55,520 --> 00:48:00,079
server

00:47:56,319 --> 00:48:02,880
the traditional server setup so um

00:48:00,079 --> 00:48:04,160
that's kind of what the future is but i

00:48:02,880 --> 00:48:05,680
want to take these last few minutes to

00:48:04,160 --> 00:48:08,240
point you to

00:48:05,680 --> 00:48:09,440
some resources that i think are very

00:48:08,240 --> 00:48:12,000
helpful

00:48:09,440 --> 00:48:12,720
um so again that blog post that i

00:48:12,000 --> 00:48:15,920
mentioned before

00:48:12,720 --> 00:48:16,400
from jason and addie uh it's just a

00:48:15,920 --> 00:48:19,760
really

00:48:16,400 --> 00:48:23,599
great overview and a nice quick read um

00:48:19,760 --> 00:48:24,559
to really kind of just push more of that

00:48:23,599 --> 00:48:26,160
rendering

00:48:24,559 --> 00:48:28,000
information into your head and let it

00:48:26,160 --> 00:48:31,920
let it absorb a little more

00:48:28,000 --> 00:48:33,760
um because this is um

00:48:31,920 --> 00:48:35,359
rendering in general can be quite

00:48:33,760 --> 00:48:38,000
complicated

00:48:35,359 --> 00:48:38,720
this is a graph that comes in that blog

00:48:38,000 --> 00:48:41,280
post

00:48:38,720 --> 00:48:42,559
that helps you understand like all the

00:48:41,280 --> 00:48:44,480
different aspects that you

00:48:42,559 --> 00:48:45,920
want to take into consideration when you

00:48:44,480 --> 00:48:48,800
were choosing

00:48:45,920 --> 00:48:50,880
um how to render your application and

00:48:48,800 --> 00:48:54,800
there's no specific one that talks about

00:48:50,880 --> 00:48:57,599
um that talks about

00:48:54,800 --> 00:48:59,119
the second section that we discussed

00:48:57,599 --> 00:49:00,400
with doing the pre-rendering plus

00:48:59,119 --> 00:49:01,680
serverless functions

00:49:00,400 --> 00:49:03,839
but you can kind of get a gist of that

00:49:01,680 --> 00:49:05,760
from some of these because

00:49:03,839 --> 00:49:07,520
we talk about server rendering here and

00:49:05,760 --> 00:49:09,839
how um

00:49:07,520 --> 00:49:11,520
the pros there you get that time to

00:49:09,839 --> 00:49:15,520
interaction

00:49:11,520 --> 00:49:19,359
um and that uh

00:49:15,520 --> 00:49:21,280
first content paint um

00:49:19,359 --> 00:49:22,640
and then you can like easily see in

00:49:21,280 --> 00:49:24,000
front of you the cons i think it was

00:49:22,640 --> 00:49:25,440
really really great of them to make a

00:49:24,000 --> 00:49:28,720
table like this but

00:49:25,440 --> 00:49:31,200
this will definitely help um for

00:49:28,720 --> 00:49:33,359
any questions you may have about which

00:49:31,200 --> 00:49:35,200
one to use for your site like take these

00:49:33,359 --> 00:49:39,359
things in consideration of

00:49:35,200 --> 00:49:42,800
what is okay for you to kind of

00:49:39,359 --> 00:49:44,160
uh have for for your pages downfalls and

00:49:42,800 --> 00:49:46,800
what things you can overcome and what

00:49:44,160 --> 00:49:48,800
you have time for

00:49:46,800 --> 00:49:50,240
i also wanted to point out the netlify

00:49:48,800 --> 00:49:52,319
blog

00:49:50,240 --> 00:49:53,359
we have a lot of content on here where

00:49:52,319 --> 00:49:56,000
we talk about

00:49:53,359 --> 00:49:57,200
using serverless functions to talk to

00:49:56,000 --> 00:49:58,880
apis

00:49:57,200 --> 00:50:01,520
um i highly recommend checking out it's

00:49:58,880 --> 00:50:03,200
just at netlify.com forward slash blog

00:50:01,520 --> 00:50:04,559
jason has some really great ones where

00:50:03,200 --> 00:50:07,520
he talks about

00:50:04,559 --> 00:50:08,960
um doing gated content with redirects

00:50:07,520 --> 00:50:12,720
and serverless functions

00:50:08,960 --> 00:50:16,480
and uh we also have netlify identity

00:50:12,720 --> 00:50:18,240
blog post for helping you understand

00:50:16,480 --> 00:50:20,800
how you can set user roles and how you

00:50:18,240 --> 00:50:24,480
can set content based on that redirect

00:50:20,800 --> 00:50:26,640
cdn knowledge instead of having to

00:50:24,480 --> 00:50:28,800
kind of make these trips to the server

00:50:26,640 --> 00:50:31,280
to get that information for users

00:50:28,800 --> 00:50:32,079
but we're always releasing more and more

00:50:31,280 --> 00:50:34,559
information

00:50:32,079 --> 00:50:35,920
out there and um we are currently doing

00:50:34,559 --> 00:50:38,480
a big push to kind of get more

00:50:35,920 --> 00:50:40,960
information as far as wondering

00:50:38,480 --> 00:50:41,760
in that way and i'm always happy to make

00:50:40,960 --> 00:50:44,720
any content

00:50:41,760 --> 00:50:46,480
of in regards to england and james that

00:50:44,720 --> 00:50:47,680
um and those kind of approaches you just

00:50:46,480 --> 00:50:49,599
have to let me know

00:50:47,680 --> 00:50:50,880
um and then another really great one is

00:50:49,599 --> 00:50:53,839
from chris coyer made this

00:50:50,880 --> 00:50:54,559
on css tricks uh this is basically uh

00:50:53,839 --> 00:50:56,559
just

00:50:54,559 --> 00:50:58,800
an amazing resource for different

00:50:56,559 --> 00:51:01,839
serverless services that are out there

00:50:58,800 --> 00:51:03,839
um all this uh doing like

00:51:01,839 --> 00:51:05,440
with different service functions and

00:51:03,839 --> 00:51:07,119
forums and notifications

00:51:05,440 --> 00:51:08,640
and all those different tools i talked

00:51:07,119 --> 00:51:09,440
about before for getting different types

00:51:08,640 --> 00:51:11,920
of data

00:51:09,440 --> 00:51:13,359
um into your site so i highly recommend

00:51:11,920 --> 00:51:16,559
that resource that's just

00:51:13,359 --> 00:51:18,960
chock full and always there's github

00:51:16,559 --> 00:51:20,319
documentation on and getting reversal

00:51:18,960 --> 00:51:21,920
it's the

00:51:20,319 --> 00:51:23,359
comments and issues on there are really

00:51:21,920 --> 00:51:25,680
interesting to see

00:51:23,359 --> 00:51:26,800
one where the paper where the technology

00:51:25,680 --> 00:51:30,240
is going

00:51:26,800 --> 00:51:32,240
um and what is

00:51:30,240 --> 00:51:34,160
what they're working on right now and as

00:51:32,240 --> 00:51:35,280
you may know the angular roadmap is

00:51:34,160 --> 00:51:38,319
public now

00:51:35,280 --> 00:51:38,559
um so they're trying to do more to let

00:51:38,319 --> 00:51:41,280
us

00:51:38,559 --> 00:51:43,760
know what what their time is being spent

00:51:41,280 --> 00:51:46,880
on and so what we think we can know

00:51:43,760 --> 00:51:48,640
uh the information

00:51:46,880 --> 00:51:50,640
if there's information that we need if

00:51:48,640 --> 00:51:51,839
it's coming up um but

00:51:50,640 --> 00:51:54,319
definitely check that out with a lot of

00:51:51,839 --> 00:51:56,000
discussions in there um

00:51:54,319 --> 00:51:58,160
and then i'm actually releasing an audio

00:51:56,000 --> 00:52:01,040
version of the modern web development

00:51:58,160 --> 00:52:02,559
on the jam stock book um so keep your

00:52:01,040 --> 00:52:04,160
eye to the ground for that

00:52:02,559 --> 00:52:06,480
and one of my favorite things is me and

00:52:04,160 --> 00:52:08,880
my team do remotely interesting podcast

00:52:06,480 --> 00:52:10,480
um where we talk about uh different

00:52:08,880 --> 00:52:12,720
aspects and the next

00:52:10,480 --> 00:52:13,760
uh episode that we do in two weeks is

00:52:12,720 --> 00:52:16,240
actually going to be

00:52:13,760 --> 00:52:18,160
on server side rendering and on

00:52:16,240 --> 00:52:19,359
rendering in the jam stack and comparing

00:52:18,160 --> 00:52:20,800
those so

00:52:19,359 --> 00:52:22,800
if you're interested in this i think you

00:52:20,800 --> 00:52:25,280
will like that episode um

00:52:22,800 --> 00:52:26,960
and we also again try to be remotely

00:52:25,280 --> 00:52:29,359
interesting so i hope you

00:52:26,960 --> 00:52:32,000
check that out um again thank you so

00:52:29,359 --> 00:52:32,880
much for joining me today i hope i at

00:52:32,000 --> 00:52:34,400
least

00:52:32,880 --> 00:52:36,079
give you a little more insight on some

00:52:34,400 --> 00:52:37,920
aspects of rendering

00:52:36,079 --> 00:52:39,760
and i'm always here if you have any

00:52:37,920 --> 00:52:42,240
questions and i hope to see you november

00:52:39,760 --> 00:52:45,119
16th for the workshop so

00:52:42,240 --> 00:52:47,119
thank you so much for for uh hanging out

00:52:45,119 --> 00:52:48,240
with me and feel free to pee me if you

00:52:47,119 --> 00:53:00,020
have any questions

00:52:48,240 --> 00:53:04,400
it was awesome thank you tara

00:53:00,020 --> 00:53:06,480
[Music]

00:53:04,400 --> 00:53:06,480

YouTube URL: https://www.youtube.com/watch?v=wCUZFGekFdk


