Title: JamstackNG: Angular + Scully Webinar | ng-conf & Scully | #ngconf
Publication date: 2020-10-16
Playlist: Webinars
Description: 
	Join ng-conf for EnterpriseNG, the world's first enterprise-focused Angular conference of its size! Nov 19-20, 2020 | Online. www.ng-conf.org! 

Nothing makes Angular faster than embracing the Jamstack. And Scully is how Angular projects do that. In this webinar, you'll learn what exactly the Jamstack is, why it makes things so incredibly fast, and be blown away as you see just how easy Scully is to add to your projects.

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:02,770 --> 00:00:06,240
[Applause]

00:00:06,570 --> 00:00:11,549
[Music]

00:00:14,080 --> 00:00:18,160
so today we're gonna talk about

00:00:15,360 --> 00:00:18,480
angular and skully and sometimes we call

00:00:18,160 --> 00:00:21,279
this

00:00:18,480 --> 00:00:22,080
jam stack and g and i'm going to try and

00:00:21,279 --> 00:00:23,920
explain

00:00:22,080 --> 00:00:25,439
the jam stack and i'm going to also try

00:00:23,920 --> 00:00:28,800
and explain how to do

00:00:25,439 --> 00:00:29,519
an angular with skully um so let's kind

00:00:28,800 --> 00:00:33,040
of kick if

00:00:29,519 --> 00:00:35,360
kick off into that so sorry

00:00:33,040 --> 00:00:36,559
i like started halfway through sorry go

00:00:35,360 --> 00:00:38,320
back to the beginning okay

00:00:36,559 --> 00:00:39,680
jam stacking i was like i know this

00:00:38,320 --> 00:00:40,399
slide looks familiar but it looks off

00:00:39,680 --> 00:00:42,640
okay

00:00:40,399 --> 00:00:44,239
so here so the the pink logo here this

00:00:42,640 --> 00:00:45,680
is the jam stack logo a lot of people

00:00:44,239 --> 00:00:47,680
don't know that it's there but yeah this

00:00:45,680 --> 00:00:50,320
is the official jam stack logo

00:00:47,680 --> 00:00:51,280
from netlify who coined the term jazz

00:00:50,320 --> 00:00:54,239
stack and

00:00:51,280 --> 00:00:55,600
so when you're trying to do jam stack in

00:00:54,239 --> 00:00:57,520
um angular

00:00:55,600 --> 00:00:58,160
the easiest way is with scully so that's

00:00:57,520 --> 00:00:59,600
what we're going to be talking about

00:00:58,160 --> 00:01:01,520
today i'm also one of the skully core

00:00:59,600 --> 00:01:04,000
team members so that's kind of

00:01:01,520 --> 00:01:04,799
um that's kind of why i'm here talking

00:01:04,000 --> 00:01:06,720
about this

00:01:04,799 --> 00:01:08,880
and i love the angular community most

00:01:06,720 --> 00:01:12,960
people will call me frosty

00:01:08,880 --> 00:01:14,640
so uh yeah so let's talk about what

00:01:12,960 --> 00:01:18,080
makes the jam stack so cool

00:01:14,640 --> 00:01:19,680
okay so i coined this to kind of help

00:01:18,080 --> 00:01:21,119
angular developers understand like

00:01:19,680 --> 00:01:23,520
there's nothing

00:01:21,119 --> 00:01:25,360
will make your project as fast your

00:01:23,520 --> 00:01:27,200
angular project as fast as using scully

00:01:25,360 --> 00:01:28,960
and embracing the jam stack

00:01:27,200 --> 00:01:30,400
because it's difficult for angular

00:01:28,960 --> 00:01:32,000
developers to understand why they care

00:01:30,400 --> 00:01:33,840
about the jam stack and maybe at least

00:01:32,000 --> 00:01:35,920
in my experience before i tried

00:01:33,840 --> 00:01:37,200
i had zero interest and i didn't even

00:01:35,920 --> 00:01:38,960
understand the benefit

00:01:37,200 --> 00:01:40,240
and then i tried it in my mind blue i

00:01:38,960 --> 00:01:43,280
was like wait

00:01:40,240 --> 00:01:44,880
i never in my best app could have ever

00:01:43,280 --> 00:01:46,399
competed with the performance that the

00:01:44,880 --> 00:01:47,600
jam stack gives me

00:01:46,399 --> 00:01:49,759
like if i worked at a company that

00:01:47,600 --> 00:01:52,159
needed seo and we needed

00:01:49,759 --> 00:01:54,159
search ability and we needed to have the

00:01:52,159 --> 00:01:55,840
the least amount of time

00:01:54,159 --> 00:01:57,920
uh to serve the page and have the first

00:01:55,840 --> 00:02:00,960
paint so that we could improve

00:01:57,920 --> 00:02:02,960
uh conversion or improve uh seo rankings

00:02:00,960 --> 00:02:06,560
by google or the other algorithms

00:02:02,960 --> 00:02:08,720
like i i never could have done that

00:02:06,560 --> 00:02:10,399
the way that i can with the jam stack

00:02:08,720 --> 00:02:12,360
and so the jam stack really is an

00:02:10,399 --> 00:02:14,959
evolution to make your website

00:02:12,360 --> 00:02:16,160
significantly faster okay and so

00:02:14,959 --> 00:02:17,680
that's what we're talking about when we

00:02:16,160 --> 00:02:19,360
talk about the jam second this is a

00:02:17,680 --> 00:02:22,000
quote you can you can tweet out

00:02:19,360 --> 00:02:22,640
at people you can um you can quote me on

00:02:22,000 --> 00:02:24,879
it

00:02:22,640 --> 00:02:26,080
there's not anything you can do the best

00:02:24,879 --> 00:02:27,599
the best of us

00:02:26,080 --> 00:02:29,280
of all like look at our participants

00:02:27,599 --> 00:02:30,080
list i'm sure there's some some amazing

00:02:29,280 --> 00:02:32,560
people this is

00:02:30,080 --> 00:02:33,440
the best of us could not beat the jam

00:02:32,560 --> 00:02:36,640
stack

00:02:33,440 --> 00:02:38,400
with just pure angular or react or

00:02:36,640 --> 00:02:39,680
view it's not an angular thing this is

00:02:38,400 --> 00:02:41,680
uh

00:02:39,680 --> 00:02:43,040
this is a client side this is a

00:02:41,680 --> 00:02:45,599
client-side rendered

00:02:43,040 --> 00:02:47,040
javascript bundle problem so let me kind

00:02:45,599 --> 00:02:48,720
of keep going

00:02:47,040 --> 00:02:51,280
there's three big peelers of the jam

00:02:48,720 --> 00:02:52,560
stack how does it make it so fast

00:02:51,280 --> 00:02:54,319
i'm going to try and walk you through

00:02:52,560 --> 00:02:56,560
these real quick i'm going to give you

00:02:54,319 --> 00:02:58,959
examples of each one of these three

00:02:56,560 --> 00:03:00,800
and then then eventually i'll pivot in

00:02:58,959 --> 00:03:02,840
angular kind of explain how

00:03:00,800 --> 00:03:04,400
it's unique in angular all right so the

00:03:02,840 --> 00:03:06,080
first um

00:03:04,400 --> 00:03:07,599
the first peeler of the jab stack is

00:03:06,080 --> 00:03:10,800
caching so

00:03:07,599 --> 00:03:14,239
you can make calls during the build

00:03:10,800 --> 00:03:15,920
that will be cached and distributed on

00:03:14,239 --> 00:03:18,239
your cvn

00:03:15,920 --> 00:03:19,440
what that means is your apis aren't

00:03:18,239 --> 00:03:21,360
going to get hit as much

00:03:19,440 --> 00:03:22,800
anymore because the data that comes from

00:03:21,360 --> 00:03:24,159
your apis are going it's going to be

00:03:22,800 --> 00:03:26,239
cached and your app's going to use the

00:03:24,159 --> 00:03:29,200
cache version of your api calls

00:03:26,239 --> 00:03:29,599
so your api gets more secure anyway i

00:03:29,200 --> 00:03:30,879
think

00:03:29,599 --> 00:03:32,560
let me get into each one of these

00:03:30,879 --> 00:03:33,920
pre-rendering your users are going to

00:03:32,560 --> 00:03:35,040
see your site immediately if it's

00:03:33,920 --> 00:03:36,000
pre-rendered like they're not going to

00:03:35,040 --> 00:03:38,480
have to wait to download

00:03:36,000 --> 00:03:39,040
all the css and all the javascript and

00:03:38,480 --> 00:03:40,560
then

00:03:39,040 --> 00:03:41,680
see your website they're just going to

00:03:40,560 --> 00:03:43,519
see a pre-rendered version of your

00:03:41,680 --> 00:03:44,799
website then they'll download the css in

00:03:43,519 --> 00:03:46,480
the javascript

00:03:44,799 --> 00:03:48,000
so that's that's the kind of the the

00:03:46,480 --> 00:03:49,599
pre-rendering speed

00:03:48,000 --> 00:03:51,280
improvement there and i'll get more into

00:03:49,599 --> 00:03:54,080
that and then there's the cdn

00:03:51,280 --> 00:03:56,080
serving this stuff from your cdn um

00:03:54,080 --> 00:03:56,560
makes it ridiculously faster now most of

00:03:56,080 --> 00:04:00,000
us are

00:03:56,560 --> 00:04:01,360
already serving our our app from a cdn i

00:04:00,000 --> 00:04:02,879
worked for clients who aren't they're

00:04:01,360 --> 00:04:04,799
serving their javascript assets and

00:04:02,879 --> 00:04:06,480
their index.html from

00:04:04,799 --> 00:04:09,120
a server in their network and i'm like

00:04:06,480 --> 00:04:10,879
okay that's a really easy win to just

00:04:09,120 --> 00:04:11,840
put this out on a cdn it's cheap and

00:04:10,879 --> 00:04:14,879
it's fast

00:04:11,840 --> 00:04:15,439
so um but the jam stack fully embraces

00:04:14,879 --> 00:04:17,040
putting

00:04:15,439 --> 00:04:18,479
way more stuff on the cdn than you

00:04:17,040 --> 00:04:19,120
currently are well than a lot of people

00:04:18,479 --> 00:04:20,560
currently are

00:04:19,120 --> 00:04:21,759
to get that speed up there so kind of

00:04:20,560 --> 00:04:22,479
let's let's kind of walk through each of

00:04:21,759 --> 00:04:25,759
these

00:04:22,479 --> 00:04:26,960
so um without caching your api or calls

00:04:25,759 --> 00:04:28,880
maybe your backend is going to get a

00:04:26,960 --> 00:04:32,639
thousand requests per second right

00:04:28,880 --> 00:04:34,320
and um if this is if your app goes to

00:04:32,639 --> 00:04:36,240
to the server for all data right so

00:04:34,320 --> 00:04:37,919
imagine the javascript turns on

00:04:36,240 --> 00:04:39,840
it makes you know a bunch of requests to

00:04:37,919 --> 00:04:41,440
turn the app on your servers can get

00:04:39,840 --> 00:04:43,199
pretty well hammered if you're not

00:04:41,440 --> 00:04:45,360
cashing any of the data

00:04:43,199 --> 00:04:47,040
and if you use caching maybe you can

00:04:45,360 --> 00:04:48,400
reduce it by a factor of you know four

00:04:47,040 --> 00:04:50,160
eighty percent

00:04:48,400 --> 00:04:51,759
or maybe you can cash fifty percent of

00:04:50,160 --> 00:04:53,680
your calls um

00:04:51,759 --> 00:04:55,520
and so your server gets a lot more

00:04:53,680 --> 00:04:57,280
stable you run a lot of sources of

00:04:55,520 --> 00:04:59,759
ddosing or like over

00:04:57,280 --> 00:05:00,479
over running your servers so caching the

00:04:59,759 --> 00:05:02,320
data

00:05:00,479 --> 00:05:03,520
at build time is a huge speed

00:05:02,320 --> 00:05:06,639
performance increase

00:05:03,520 --> 00:05:08,400
and the amount of code required to do it

00:05:06,639 --> 00:05:09,680
is ridiculously low and i'm going to

00:05:08,400 --> 00:05:11,360
shut it off today

00:05:09,680 --> 00:05:13,039
so this is one of the peelers that's

00:05:11,360 --> 00:05:15,520
caching your data on the cdn with your

00:05:13,039 --> 00:05:18,240
assets with your javascript assets

00:05:15,520 --> 00:05:18,720
the next one is pre-render so this is

00:05:18,240 --> 00:05:20,960
what your

00:05:18,720 --> 00:05:22,000
this is what your users experience

00:05:20,960 --> 00:05:24,240
during a

00:05:22,000 --> 00:05:25,919
without pre-rendering so they they get

00:05:24,240 --> 00:05:28,080
your index.html

00:05:25,919 --> 00:05:29,199
and then their browser processes that

00:05:28,080 --> 00:05:30,960
index html

00:05:29,199 --> 00:05:32,240
and it starts to download your

00:05:30,960 --> 00:05:35,360
javascript

00:05:32,240 --> 00:05:36,800
and this whole time like the javascript

00:05:35,360 --> 00:05:39,919
is downloading

00:05:36,800 --> 00:05:40,880
and um the css is also downloading and

00:05:39,919 --> 00:05:43,440
then the

00:05:40,880 --> 00:05:44,960
javascript finally downloads and starts

00:05:43,440 --> 00:05:46,639
its initial paint right

00:05:44,960 --> 00:05:48,080
so as soon as javascript's done

00:05:46,639 --> 00:05:49,360
downloading

00:05:48,080 --> 00:05:51,039
it doesn't immediately paint the whole

00:05:49,360 --> 00:05:53,919
site for most people then it still has

00:05:51,039 --> 00:05:55,280
to do a little bit of

00:05:53,919 --> 00:05:57,680
probably talking to your backer to get

00:05:55,280 --> 00:05:59,520
some data before like the javascript

00:05:57,680 --> 00:06:01,280
site is visual but this whole time

00:05:59,520 --> 00:06:02,800
where they're downloading the index.html

00:06:01,280 --> 00:06:05,520
downloading the css

00:06:02,800 --> 00:06:07,120
downloading the javascript and then they

00:06:05,520 --> 00:06:07,600
process the javascript and they start to

00:06:07,120 --> 00:06:08,960
paint

00:06:07,600 --> 00:06:10,639
that whole time the user didn't see

00:06:08,960 --> 00:06:14,720
anything they just saw a blank page

00:06:10,639 --> 00:06:16,400
right and this is classic how javascript

00:06:14,720 --> 00:06:17,919
client-side rendered apps work this is

00:06:16,400 --> 00:06:19,759
not unique to angular

00:06:17,919 --> 00:06:22,560
this is all javascript frameworks no

00:06:19,759 --> 00:06:24,639
matter how you know

00:06:22,560 --> 00:06:25,919
fantastic or you know how how many

00:06:24,639 --> 00:06:27,520
people use them or not this is how they

00:06:25,919 --> 00:06:28,479
all work right so this isn't unique to

00:06:27,520 --> 00:06:30,800
angular

00:06:28,479 --> 00:06:32,400
but with pre-rendering this is what your

00:06:30,800 --> 00:06:34,560
user will experience they'll download

00:06:32,400 --> 00:06:36,479
your index.html and it's pre-rendered to

00:06:34,560 --> 00:06:38,479
the view they were trying to visit

00:06:36,479 --> 00:06:40,479
and so they see a pre-rendered version

00:06:38,479 --> 00:06:41,680
and if you're building it right

00:06:40,479 --> 00:06:43,759
they can interact with it they can

00:06:41,680 --> 00:06:46,880
scroll on it they can start typing in

00:06:43,759 --> 00:06:46,880
input fields they can

00:06:46,960 --> 00:06:50,800
they can click on buttons that will take

00:06:48,880 --> 00:06:53,120
them to different routes

00:06:50,800 --> 00:06:54,800
um anyway after a while though after

00:06:53,120 --> 00:06:56,240
it's downloaded the javascript will be

00:06:54,800 --> 00:06:58,400
downloading

00:06:56,240 --> 00:07:00,160
and after it's downloaded they get the

00:06:58,400 --> 00:07:02,160
paint but the whole time they had the

00:07:00,160 --> 00:07:02,800
pre-rendered version of the site once

00:07:02,160 --> 00:07:05,599
the js

00:07:02,800 --> 00:07:07,199
paint happens the pre-rendered version

00:07:05,599 --> 00:07:08,800
will just disappear

00:07:07,199 --> 00:07:10,319
and the javascript rendered version

00:07:08,800 --> 00:07:14,080
appears like immediately

00:07:10,319 --> 00:07:15,440
and so um they and the user if you're

00:07:14,080 --> 00:07:16,800
doing it right doesn't really notice

00:07:15,440 --> 00:07:18,639
that that happened that you switched

00:07:16,800 --> 00:07:21,280
from the pre-rendered version of the app

00:07:18,639 --> 00:07:21,919
to the javascript under version of the

00:07:21,280 --> 00:07:23,840
app

00:07:21,919 --> 00:07:25,280
and so that that's mostly transparent to

00:07:23,840 --> 00:07:26,000
your users if you focus on doing this

00:07:25,280 --> 00:07:28,080
right

00:07:26,000 --> 00:07:29,680
and so this is a much better experience

00:07:28,080 --> 00:07:32,160
for the users because they're not

00:07:29,680 --> 00:07:33,440
experiencing just this massive amount of

00:07:32,160 --> 00:07:34,960
time

00:07:33,440 --> 00:07:37,440
of nothing and a lot of us we've all

00:07:34,960 --> 00:07:39,360
seen people like amazon or google

00:07:37,440 --> 00:07:41,199
talk about every second that the

00:07:39,360 --> 00:07:42,240
download the load time of your site

00:07:41,199 --> 00:07:44,879
increases your

00:07:42,240 --> 00:07:45,919
conversion or your abandoned rate or

00:07:44,879 --> 00:07:48,639
whatever is

00:07:45,919 --> 00:07:50,800
is is punished by x percent right and so

00:07:48,639 --> 00:07:53,120
um

00:07:50,800 --> 00:07:54,560
it is super super beneficial to show

00:07:53,120 --> 00:07:55,840
them the pre-rendered version

00:07:54,560 --> 00:07:57,840
immediately

00:07:55,840 --> 00:08:00,400
and then do the thing you were going to

00:07:57,840 --> 00:08:02,639
do with the javascript stuff

00:08:00,400 --> 00:08:04,080
um in a minute i'm going to show you how

00:08:02,639 --> 00:08:05,599
crazy easy it is

00:08:04,080 --> 00:08:07,039
to get this pre-rendered because a lot

00:08:05,599 --> 00:08:08,879
of us are like dude that sounds like a

00:08:07,039 --> 00:08:10,840
lot of technological difficulty to

00:08:08,879 --> 00:08:13,360
pre-render all my routes

00:08:10,840 --> 00:08:14,400
it's it's actually stupid easy and i'm

00:08:13,360 --> 00:08:15,039
going to show you that today that's why

00:08:14,400 --> 00:08:18,319
we're here

00:08:15,039 --> 00:08:20,479
all right the last one is cdn so um

00:08:18,319 --> 00:08:21,840
if everyone if you don't use a cdn

00:08:20,479 --> 00:08:23,199
everyone who needs anything if your

00:08:21,840 --> 00:08:23,759
server is right here where it says your

00:08:23,199 --> 00:08:25,440
server

00:08:23,759 --> 00:08:26,879
and your users are distributed across

00:08:25,440 --> 00:08:29,120
the globe then

00:08:26,879 --> 00:08:30,879
um you're going to be paying for a lot

00:08:29,120 --> 00:08:32,640
of things first it's going to be slow

00:08:30,879 --> 00:08:34,560
because your users have to travel around

00:08:32,640 --> 00:08:35,839
this big blue sphere that we're on right

00:08:34,560 --> 00:08:37,360
the big blue spaceship they've got to

00:08:35,839 --> 00:08:38,479
come from their side of the spaceship

00:08:37,360 --> 00:08:40,000
over to your server

00:08:38,479 --> 00:08:41,760
right and you're gonna have to pay for

00:08:40,000 --> 00:08:43,279
gigabits worth of data every month and

00:08:41,760 --> 00:08:44,560
it's mostly the same data transferred

00:08:43,279 --> 00:08:46,560
every single time

00:08:44,560 --> 00:08:47,680
every time that you do a new build

00:08:46,560 --> 00:08:48,800
they're gonna have to download more

00:08:47,680 --> 00:08:50,000
stuff which means you're gonna double

00:08:48,800 --> 00:08:51,120
pay for that download rate

00:08:50,000 --> 00:08:52,160
and now we're just getting a bug like

00:08:51,120 --> 00:08:53,839
it's just it's just not a good

00:08:52,160 --> 00:08:56,080
experience for the user if to put

00:08:53,839 --> 00:08:58,800
anything anywhere besides the cdn

00:08:56,080 --> 00:08:59,360
and once you do a cdn the cdn puts

00:08:58,800 --> 00:09:01,440
servers

00:08:59,360 --> 00:09:02,959
really close to all of your users so

00:09:01,440 --> 00:09:06,560
they just simply go

00:09:02,959 --> 00:09:07,680
right they they download the assets from

00:09:06,560 --> 00:09:10,000
wherever they are

00:09:07,680 --> 00:09:10,720
there's a really close copy that's like

00:09:10,000 --> 00:09:12,399
optimized

00:09:10,720 --> 00:09:13,839
to download really quickly and this is

00:09:12,399 --> 00:09:16,240
what cdn is doing so

00:09:13,839 --> 00:09:18,000
this is kind of the third pillar of the

00:09:16,240 --> 00:09:21,440
um of the jam snack is

00:09:18,000 --> 00:09:24,880
embracing solidly cdns

00:09:21,440 --> 00:09:26,720
okay so let's talk about

00:09:24,880 --> 00:09:28,480
angular and skilling how angular and

00:09:26,720 --> 00:09:31,120
scully do jam stack

00:09:28,480 --> 00:09:32,160
okay because it is a specific flavor

00:09:31,120 --> 00:09:32,800
that's different than what you're

00:09:32,160 --> 00:09:34,399
hearing

00:09:32,800 --> 00:09:36,240
in the react community or the view

00:09:34,399 --> 00:09:38,160
community and so we kind of want to we

00:09:36,240 --> 00:09:40,880
kind of want to focus on that

00:09:38,160 --> 00:09:41,680
um angular skully we still focus on

00:09:40,880 --> 00:09:43,760
these three

00:09:41,680 --> 00:09:45,920
pillars okay and how do we enable you to

00:09:43,760 --> 00:09:46,720
do them so the first one is caching your

00:09:45,920 --> 00:09:48,320
api calls

00:09:46,720 --> 00:09:50,560
so there's an angular service called

00:09:48,320 --> 00:09:53,440
transfer state and with just

00:09:50,560 --> 00:09:53,839
two lines of code you can tr you can

00:09:53,440 --> 00:09:56,320
make

00:09:53,839 --> 00:09:57,279
calls during the build that will then be

00:09:56,320 --> 00:10:00,480
cashed

00:09:57,279 --> 00:10:03,040
in production so i want you to imagine

00:10:00,480 --> 00:10:05,279
you sell what do you sell jelly beans

00:10:03,040 --> 00:10:07,440
okay so we're going to go get a list

00:10:05,279 --> 00:10:10,160
of jelly beans today we're going to have

00:10:07,440 --> 00:10:10,800
a a demo of a donut app that sells

00:10:10,160 --> 00:10:14,640
donuts

00:10:10,800 --> 00:10:16,160
so you can imagine you sell donuts and

00:10:14,640 --> 00:10:17,440
um

00:10:16,160 --> 00:10:19,040
you want to go get the list of donuts

00:10:17,440 --> 00:10:20,399
during the build and you don't want the

00:10:19,040 --> 00:10:21,920
production version of the app to keep

00:10:20,399 --> 00:10:22,800
calling home and getting those donuts

00:10:21,920 --> 00:10:24,480
anymore

00:10:22,800 --> 00:10:26,320
like just at the build time make that

00:10:24,480 --> 00:10:30,240
call and then cache it

00:10:26,320 --> 00:10:31,920
so that everyone caches that call like

00:10:30,240 --> 00:10:33,440
in production my users aren't talking to

00:10:31,920 --> 00:10:36,079
my server to get the donuts they're just

00:10:33,440 --> 00:10:39,200
part of the the release site okay

00:10:36,079 --> 00:10:39,760
and um it makes it very very simple to

00:10:39,200 --> 00:10:42,720
ship

00:10:39,760 --> 00:10:44,839
your data along with your html css and

00:10:42,720 --> 00:10:46,959
javascript assets so that's one

00:10:44,839 --> 00:10:48,560
pre-rendering there's really kind of two

00:10:46,959 --> 00:10:49,920
steps to pre-rendering the first one is

00:10:48,560 --> 00:10:51,839
finding all the routes we need to

00:10:49,920 --> 00:10:54,240
pre-render and the second one is then

00:10:51,839 --> 00:10:55,680
taking each route one by one and

00:10:54,240 --> 00:10:58,560
pre-rendering them

00:10:55,680 --> 00:10:59,360
and like it's actually in scully we're

00:10:58,560 --> 00:11:01,519
popping open

00:10:59,360 --> 00:11:03,920
a chrome browser saying hey render this

00:11:01,519 --> 00:11:04,640
quickly take the output at html save it

00:11:03,920 --> 00:11:06,640
to file

00:11:04,640 --> 00:11:08,240
and move on to the next route and we'll

00:11:06,640 --> 00:11:08,880
we'll do this for every single route in

00:11:08,240 --> 00:11:11,200
your system

00:11:08,880 --> 00:11:12,160
so it's kind of a two-step process find

00:11:11,200 --> 00:11:15,600
all the routes

00:11:12,160 --> 00:11:17,279
render each route and so um and we have

00:11:15,600 --> 00:11:18,480
a series of plugins that allow you to

00:11:17,279 --> 00:11:20,880
assist or to help

00:11:18,480 --> 00:11:22,079
or to maybe edit the data after it's

00:11:20,880 --> 00:11:23,839
been rendered

00:11:22,079 --> 00:11:25,120
um and we'll we can talk more about that

00:11:23,839 --> 00:11:27,760
later but these are

00:11:25,120 --> 00:11:29,680
this is how we help scully helps with

00:11:27,760 --> 00:11:31,040
the pre-rendering portion of this

00:11:29,680 --> 00:11:32,800
and then you got to see the end this

00:11:31,040 --> 00:11:34,560
doesn't really change in angular

00:11:32,800 --> 00:11:36,160
once you're done caching and doing your

00:11:34,560 --> 00:11:39,279
build to get all this stuff cached

00:11:36,160 --> 00:11:40,800
and pre-rendered you should be just

00:11:39,279 --> 00:11:41,519
putting all this straight back out where

00:11:40,800 --> 00:11:43,360
you were

00:11:41,519 --> 00:11:45,680
putting your non-pre-rendered version

00:11:43,360 --> 00:11:47,040
just put that on your cdn

00:11:45,680 --> 00:11:49,519
you may have to reconfigure a couple

00:11:47,040 --> 00:11:50,880
routes because instead of one index.html

00:11:49,519 --> 00:11:53,440
you're now going to have

00:11:50,880 --> 00:11:54,720
one index.html for every single route so

00:11:53,440 --> 00:11:55,040
there may be a couple bits you have to

00:11:54,720 --> 00:11:56,800
flip

00:11:55,040 --> 00:11:59,360
in your cdn configuration but it should

00:11:56,800 --> 00:12:01,040
be largely just a very simple change

00:11:59,360 --> 00:12:03,120
and so these are this is kind of how

00:12:01,040 --> 00:12:06,480
this works um

00:12:03,120 --> 00:12:09,279
in angular okay it sounds

00:12:06,480 --> 00:12:10,000
maybe more advanced than it is i'm going

00:12:09,279 --> 00:12:13,120
to show you how

00:12:10,000 --> 00:12:15,279
simple it can be so that you can go oh i

00:12:13,120 --> 00:12:17,200
am good enough to do these things like

00:12:15,279 --> 00:12:19,120
i'm good enough to pre-render my entire

00:12:17,200 --> 00:12:20,880
website because it is easier than you

00:12:19,120 --> 00:12:22,560
think or i am good enough to cash a lot

00:12:20,880 --> 00:12:24,160
of data calls during the build

00:12:22,560 --> 00:12:26,800
and save my company a ton of money and

00:12:24,160 --> 00:12:28,560
security problems so um so yeah

00:12:26,800 --> 00:12:30,320
i we're going to show you today how how

00:12:28,560 --> 00:12:32,160
easy it can be all right so

00:12:30,320 --> 00:12:33,760
this slide shows one of our clients it's

00:12:32,160 --> 00:12:36,000
about to flush back to white

00:12:33,760 --> 00:12:37,440
wait wait till it flashes back to white

00:12:36,000 --> 00:12:39,360
okay the one on the right

00:12:37,440 --> 00:12:40,480
this is with skully okay so the website

00:12:39,360 --> 00:12:42,399
has already appeared

00:12:40,480 --> 00:12:43,839
it's pre-rendered it's already done the

00:12:42,399 --> 00:12:45,680
one on the left

00:12:43,839 --> 00:12:48,240
this is the javascript version of the

00:12:45,680 --> 00:12:52,079
app okay

00:12:48,240 --> 00:12:54,720
and um the one on

00:12:52,079 --> 00:12:56,480
the right the skully version you can

00:12:54,720 --> 00:12:57,519
tell when the javascript app turns on

00:12:56,480 --> 00:13:01,519
because that orange bar

00:12:57,519 --> 00:13:01,519
up top is going to disappear okay

00:13:02,000 --> 00:13:05,040
so they actually finish about the same

00:13:03,600 --> 00:13:05,680
time they finish loading about the same

00:13:05,040 --> 00:13:08,639
time

00:13:05,680 --> 00:13:10,399
but the one on the right you can see was

00:13:08,639 --> 00:13:11,200
ready for the user to interact with and

00:13:10,399 --> 00:13:12,720
scroll

00:13:11,200 --> 00:13:15,200
and i could click on any of these click

00:13:12,720 --> 00:13:17,200
targets that was ready

00:13:15,200 --> 00:13:19,360
you know within a second even over 3g

00:13:17,200 --> 00:13:21,279
speeds like it was very fast

00:13:19,360 --> 00:13:24,079
and the other one took much longer to

00:13:21,279 --> 00:13:26,320
load and then it took a ton of stuff so

00:13:24,079 --> 00:13:28,000
and again this this this one on the

00:13:26,320 --> 00:13:28,959
right this is or the one on the left

00:13:28,000 --> 00:13:31,120
without skully

00:13:28,959 --> 00:13:32,959
this is as good as they can do this is

00:13:31,120 --> 00:13:37,040
as good as they can get it

00:13:32,959 --> 00:13:39,680
this is this is properly architected

00:13:37,040 --> 00:13:41,360
as good as they can get it class side

00:13:39,680 --> 00:13:44,399
rendered out

00:13:41,360 --> 00:13:47,120
and you simply throw a lightweight

00:13:44,399 --> 00:13:48,560
angular scully layer on top and you get

00:13:47,120 --> 00:13:50,480
what's on the right a much better

00:13:48,560 --> 00:13:51,199
experience for users like it isn't an

00:13:50,480 --> 00:13:53,760
extremely

00:13:51,199 --> 00:13:56,079
and the conversion goes up google goes

00:13:53,760 --> 00:13:58,320
whoa the site got way faster

00:13:56,079 --> 00:13:59,839
your seo rankings go up like your whole

00:13:58,320 --> 00:14:01,440
business benefits as a real

00:13:59,839 --> 00:14:03,279
result of this so this is an example of

00:14:01,440 --> 00:14:05,360
one of our clients 100 contacts.com

00:14:03,279 --> 00:14:07,760
who's been very friendly with us and

00:14:05,360 --> 00:14:08,959
they've they've worked hard with us to

00:14:07,760 --> 00:14:10,320
to help us get through some of these

00:14:08,959 --> 00:14:11,120
beta and alpha questions that we're

00:14:10,320 --> 00:14:12,720
working on so

00:14:11,120 --> 00:14:14,880
it's a success story that our existing

00:14:12,720 --> 00:14:16,399
production so and we have we have

00:14:14,880 --> 00:14:18,720
you know we have multiple clients like

00:14:16,399 --> 00:14:20,720
this so yeah anyway

00:14:18,720 --> 00:14:22,079
all right so i'm gonna i'm gonna cover

00:14:20,720 --> 00:14:24,160
some concepts today

00:14:22,079 --> 00:14:25,600
in this workshop how am i doing on time

00:14:24,160 --> 00:14:27,360
i got 40 minutes left a little less than

00:14:25,600 --> 00:14:29,199
40 35 minutes left okay

00:14:27,360 --> 00:14:30,480
so we're gonna um i'm not going to have

00:14:29,199 --> 00:14:31,920
you guys calling the project so i'm just

00:14:30,480 --> 00:14:33,279
going to show you the links

00:14:31,920 --> 00:14:35,600
i'm going to teach you how to do router

00:14:33,279 --> 00:14:37,440
plugins writer plugins are how you

00:14:35,600 --> 00:14:39,760
help angular find all your routes

00:14:37,440 --> 00:14:43,040
remember i said there's two steps

00:14:39,760 --> 00:14:45,360
you find all the routes and then you

00:14:43,040 --> 00:14:46,480
pre-render all the routes sometimes you

00:14:45,360 --> 00:14:47,760
need to help skully

00:14:46,480 --> 00:14:49,519
find all the routes and sometimes you

00:14:47,760 --> 00:14:50,959
need to help it pre-render all the

00:14:49,519 --> 00:14:51,600
routes and so we have plug-ins for both

00:14:50,959 --> 00:14:53,360
of those

00:14:51,600 --> 00:14:54,720
okay so i'm going to show you a router

00:14:53,360 --> 00:14:57,279
plug-in which helps you help

00:14:54,720 --> 00:14:58,320
skully find all the routes okay and then

00:14:57,279 --> 00:15:00,000
we're gonna go over

00:14:58,320 --> 00:15:01,440
some render plug-ins which we're

00:15:00,000 --> 00:15:03,279
actually gonna we're gonna kind of gloss

00:15:01,440 --> 00:15:04,639
over render plug-ins

00:15:03,279 --> 00:15:06,000
um then we're gonna go start let me go

00:15:04,639 --> 00:15:07,839
back we're gonna go to transfer state

00:15:06,000 --> 00:15:10,079
i'll show you how to cache some calls

00:15:07,839 --> 00:15:11,600
um if we have time we can add a blog at

00:15:10,079 --> 00:15:12,880
the end so you can show you

00:15:11,600 --> 00:15:14,000
know the markdown support and i know

00:15:12,880 --> 00:15:15,279
some it sounds like some of you have

00:15:14,000 --> 00:15:16,079
already used this and have the markdown

00:15:15,279 --> 00:15:17,760
support

00:15:16,079 --> 00:15:18,880
and then i'm going to take you to the

00:15:17,760 --> 00:15:20,639
doc site and just kind of show you

00:15:18,880 --> 00:15:22,240
around because there's good references

00:15:20,639 --> 00:15:23,519
on there that explain all the remaining

00:15:22,240 --> 00:15:25,760
concepts around scully

00:15:23,519 --> 00:15:27,920
and we'll end with some q a at the end

00:15:25,760 --> 00:15:29,519
so if anyone wants to

00:15:27,920 --> 00:15:30,880
save these for later i'm certainly not

00:15:29,519 --> 00:15:32,000
going to slow down so that you can

00:15:30,880 --> 00:15:34,800
follow me

00:15:32,000 --> 00:15:35,600
if anyone wants to try and follow me um

00:15:34,800 --> 00:15:38,959
feel free

00:15:35,600 --> 00:15:41,759
to attempt that um but yeah

00:15:38,959 --> 00:15:42,800
so i've got uh uh one repo that says

00:15:41,759 --> 00:15:44,959
donuts api

00:15:42,800 --> 00:15:46,240
and you just npm run serve on that and

00:15:44,959 --> 00:15:47,600
then i've got another one this is a

00:15:46,240 --> 00:15:49,600
simple angular project

00:15:47,600 --> 00:15:51,120
called the donut store and you can just

00:15:49,600 --> 00:15:52,000
ng serve that and then you can build out

00:15:51,120 --> 00:15:55,199
all the all the stuff

00:15:52,000 --> 00:15:56,320
all the scully features so yeah this is

00:15:55,199 --> 00:16:00,079
where you would start

00:15:56,320 --> 00:16:02,079
and then um this is where i'm going to

00:16:00,079 --> 00:16:03,680
start is i've cloned these two repos

00:16:02,079 --> 00:16:05,279
and i'm going to just kind of walk you

00:16:03,680 --> 00:16:07,759
through how we would get a skully

00:16:05,279 --> 00:16:11,279
installed into a very simple angular app

00:16:07,759 --> 00:16:13,600
so okay over here let me get rid of this

00:16:11,279 --> 00:16:14,639
can you see my can you see my editor

00:16:13,600 --> 00:16:18,720
enough is this is

00:16:14,639 --> 00:16:18,720
is it too small am i okay

00:16:19,120 --> 00:16:23,920
anyone um nobody perfect i think it's

00:16:22,720 --> 00:16:25,040
i think it's okay it's okay it looks

00:16:23,920 --> 00:16:26,160
good to me okay i'm gonna move on

00:16:25,040 --> 00:16:26,720
because everyone says you're good okay

00:16:26,160 --> 00:16:30,000
cool

00:16:26,720 --> 00:16:31,680
so this is a very simple angular app i

00:16:30,000 --> 00:16:32,320
generated with the cli and then i just

00:16:31,680 --> 00:16:34,480
added

00:16:32,320 --> 00:16:37,360
some doughnuty stuff to it cape so it's

00:16:34,480 --> 00:16:37,600
it is not like a great variant of what

00:16:37,360 --> 00:16:40,880
an

00:16:37,600 --> 00:16:42,079
angular cli app gives you okay it's very

00:16:40,880 --> 00:16:43,920
exactly what you're going to get out of

00:16:42,079 --> 00:16:46,480
the angular cla okay

00:16:43,920 --> 00:16:47,920
all right it has a donuts module and it

00:16:46,480 --> 00:16:50,880
has a donut module

00:16:47,920 --> 00:16:51,440
donuts shows the list of all the donuts

00:16:50,880 --> 00:16:53,199
donut

00:16:51,440 --> 00:16:54,800
shows one donut so it's like if i went

00:16:53,199 --> 00:16:56,320
to a website i had donuts

00:16:54,800 --> 00:16:58,560
i show you all of them if you click on

00:16:56,320 --> 00:17:00,160
one to buy it i show you just that one

00:16:58,560 --> 00:17:02,079
so that's kind of that's kind of what

00:17:00,160 --> 00:17:04,079
this app is it's it's very

00:17:02,079 --> 00:17:05,120
very basic there's not a lot of logic in

00:17:04,079 --> 00:17:06,880
here

00:17:05,120 --> 00:17:09,439
i also have an about page which doesn't

00:17:06,880 --> 00:17:10,880
do much but these are the three things

00:17:09,439 --> 00:17:12,480
so if you come into my routes you can

00:17:10,880 --> 00:17:14,240
see my home route

00:17:12,480 --> 00:17:16,480
will show you all the donuts it loads

00:17:14,240 --> 00:17:19,360
the donuts module

00:17:16,480 --> 00:17:21,280
if you go to donut donut id i'll

00:17:19,360 --> 00:17:24,240
download the donut module

00:17:21,280 --> 00:17:25,520
and if you go to slash about i'll

00:17:24,240 --> 00:17:27,839
download the about module

00:17:25,520 --> 00:17:29,280
is it it's ridiculously simple app like

00:17:27,839 --> 00:17:32,160
there's there's not a lot of moving

00:17:29,280 --> 00:17:34,640
pieces here i promise okay

00:17:32,160 --> 00:17:36,400
so i've already served this app i've got

00:17:34,640 --> 00:17:39,120
an ng serve going on over here

00:17:36,400 --> 00:17:40,240
and here i'm serving my back end um with

00:17:39,120 --> 00:17:42,160
npm run serve

00:17:40,240 --> 00:17:43,600
okay so if actually if anyone wants to

00:17:42,160 --> 00:17:47,280
check out the back end

00:17:43,600 --> 00:17:49,840
where is my

00:17:47,280 --> 00:17:50,640
i'm gonna take this we're just gonna use

00:17:49,840 --> 00:17:54,000
the slides

00:17:50,640 --> 00:17:56,400
sorry i'm gonna exit full screen

00:17:54,000 --> 00:17:58,240
i'm gonna put you over here okay so here

00:17:56,400 --> 00:18:01,600
we're gonna use this

00:17:58,240 --> 00:18:04,480
and then we'll just go to localhost

00:18:01,600 --> 00:18:06,000
3000 donuts so this api just give me

00:18:04,480 --> 00:18:09,360
back an array

00:18:06,000 --> 00:18:11,919
of donut objects okay so this

00:18:09,360 --> 00:18:13,120
it's a stupid simple api if i put in an

00:18:11,919 --> 00:18:15,120
id

00:18:13,120 --> 00:18:16,799
it'll give me back just this one okay so

00:18:15,120 --> 00:18:21,120
if i do go here

00:18:16,799 --> 00:18:23,760
donut slash id it

00:18:21,120 --> 00:18:24,640
oh bunny let me put the b in there gosh

00:18:23,760 --> 00:18:28,880
dang it no

00:18:24,640 --> 00:18:32,160
go back

00:18:28,880 --> 00:18:33,840
b okay so if you put in the donut idea

00:18:32,160 --> 00:18:34,400
it just gives you one donut back so this

00:18:33,840 --> 00:18:37,840
is

00:18:34,400 --> 00:18:41,360
this is effectively how simple my api is

00:18:37,840 --> 00:18:43,280
either can get one donut or you can get

00:18:41,360 --> 00:18:46,240
all the donuts like there's only one and

00:18:43,280 --> 00:18:47,760
by the way i scraped the krispy kreme

00:18:46,240 --> 00:18:49,679
website to get these donuts because i'm

00:18:47,760 --> 00:18:50,960
not creative enough to like make donut

00:18:49,679 --> 00:18:52,000
images and stuff anyway

00:18:50,960 --> 00:18:54,320
so let me show you what the website

00:18:52,000 --> 00:18:55,440
looks like localhost 4200. okay so this

00:18:54,320 --> 00:18:59,840
is my website

00:18:55,440 --> 00:19:01,520
um all right it's written in angular

00:18:59,840 --> 00:19:03,679
you can go you can click on one of the

00:19:01,520 --> 00:19:05,600
donuts takes you to the details you can

00:19:03,679 --> 00:19:07,280
click on the nutritional facts it opens

00:19:05,600 --> 00:19:09,280
up those nutritional facts

00:19:07,280 --> 00:19:10,400
um you can go back to see all the don'ts

00:19:09,280 --> 00:19:11,120
like there's not a lot going on here

00:19:10,400 --> 00:19:13,520
like i said

00:19:11,120 --> 00:19:15,039
simple site list of donuts click on the

00:19:13,520 --> 00:19:16,400
details for the donuts and there's not

00:19:15,039 --> 00:19:18,320
much more going on here

00:19:16,400 --> 00:19:20,480
the only other thing is the about route

00:19:18,320 --> 00:19:22,000
so you can go click on the about

00:19:20,480 --> 00:19:23,600
why did i do a donut store because i

00:19:22,000 --> 00:19:25,520
wanted to show you angular i needed

00:19:23,600 --> 00:19:27,600
route parameters okay so each of those

00:19:25,520 --> 00:19:28,320
donut so specific donut routes i needed

00:19:27,600 --> 00:19:29,919
to show you those

00:19:28,320 --> 00:19:31,520
i needed something that had an api so i

00:19:29,919 --> 00:19:33,360
could show off cashable calls and then

00:19:31,520 --> 00:19:36,240
we can add blog support at the very end

00:19:33,360 --> 00:19:37,440
so um that is why we're doing this so

00:19:36,240 --> 00:19:39,280
that's why we're doing the donut store

00:19:37,440 --> 00:19:42,640
okay so let me go back home

00:19:39,280 --> 00:19:45,039
um and i'm gonna if you

00:19:42,640 --> 00:19:46,480
if i come into my dev tools and if i say

00:19:45,039 --> 00:19:48,320
disable javascript

00:19:46,480 --> 00:19:49,760
everyone knows an angular app if you

00:19:48,320 --> 00:19:50,559
disable javascript when i reload here

00:19:49,760 --> 00:19:53,280
what's gonna happen

00:19:50,559 --> 00:19:55,039
dead right nothing happens this site

00:19:53,280 --> 00:19:56,720
doesn't work without javascript this

00:19:55,039 --> 00:19:58,240
site is dead without javascript and

00:19:56,720 --> 00:20:01,760
until the javascript loads

00:19:58,240 --> 00:20:03,039
the user's gonna see this so if it takes

00:20:01,760 --> 00:20:05,360
a second or a minute to load the

00:20:03,039 --> 00:20:07,600
javascript

00:20:05,360 --> 00:20:09,600
this is what they're gonna see okay

00:20:07,600 --> 00:20:12,880
that's that's not good like that sucks

00:20:09,600 --> 00:20:14,559
uh for your users this is not a great um

00:20:12,880 --> 00:20:17,600
let me let me enable javascript

00:20:14,559 --> 00:20:19,360
okay so this is not let me refresh now

00:20:17,600 --> 00:20:20,799
this is what they should see um so i'm

00:20:19,360 --> 00:20:23,200
going to teach you how to do this

00:20:20,799 --> 00:20:24,640
where they can use angular or we can

00:20:23,200 --> 00:20:24,960
turn javascript off action and this

00:20:24,640 --> 00:20:26,159
whole

00:20:24,960 --> 00:20:27,520
this whole website everything i just

00:20:26,159 --> 00:20:28,640
showed you will still work even if i

00:20:27,520 --> 00:20:31,200
turn javascript off

00:20:28,640 --> 00:20:32,799
because i pre-rendered it and i built it

00:20:31,200 --> 00:20:34,320
a very jam-stack friendly way

00:20:32,799 --> 00:20:35,520
so let's kind of get in let's add

00:20:34,320 --> 00:20:36,880
shoulder to the project this is our

00:20:35,520 --> 00:20:38,880
first step add scully so i'm going to

00:20:36,880 --> 00:20:40,640
show you hey how hard is that scully

00:20:38,880 --> 00:20:42,159
well we've made a series of schematics

00:20:40,640 --> 00:20:45,440
to make this easy

00:20:42,159 --> 00:20:47,760
so i'm going to say ng

00:20:45,440 --> 00:20:48,559
add because this is the cli version to

00:20:47,760 --> 00:20:52,960
do this

00:20:48,559 --> 00:20:54,640
and if i say skully io slash init

00:20:52,960 --> 00:20:56,159
this is the schematic that will add

00:20:54,640 --> 00:21:00,640
skully to your project

00:20:56,159 --> 00:21:02,720
okay what are you saying

00:21:00,640 --> 00:21:05,520
the add command requires to be run in an

00:21:02,720 --> 00:21:05,520
angular project

00:21:06,480 --> 00:21:14,400
oh yeah sorry i'm not in there

00:21:10,400 --> 00:21:14,880
see the code donuts okay here we are all

00:21:14,400 --> 00:21:16,320
right

00:21:14,880 --> 00:21:18,720
so now let's run that now that we're in

00:21:16,320 --> 00:21:21,120
the right directory sorry

00:21:18,720 --> 00:21:21,840
when we add this it's going to go

00:21:21,120 --> 00:21:23,679
through

00:21:21,840 --> 00:21:24,960
it's going to install the needed tools

00:21:23,679 --> 00:21:28,880
to run scully

00:21:24,960 --> 00:21:31,840
and it's going to take a second

00:21:28,880 --> 00:21:33,280
come on buddy this is my favorite part

00:21:31,840 --> 00:21:35,100
oh yeah last time i did this i

00:21:33,280 --> 00:21:42,480
just bust out my harmonica

00:21:35,100 --> 00:21:46,080
[Music]

00:21:42,480 --> 00:21:48,080
come on man bravo bravo was that good

00:21:46,080 --> 00:21:49,600
that was awesome i didn't know you

00:21:48,080 --> 00:21:51,520
played the harmonica

00:21:49,600 --> 00:21:52,799
i don't i mean i know i know two songs

00:21:51,520 --> 00:21:57,280
and you just heard one so

00:21:52,799 --> 00:21:57,280
all right that's awesome yeah

00:21:57,760 --> 00:22:02,480
it's a way to kill time when you're

00:21:59,679 --> 00:22:04,480
installing of npm packages

00:22:02,480 --> 00:22:05,760
i know everyone on this call understands

00:22:04,480 --> 00:22:07,600
okay so

00:22:05,760 --> 00:22:08,960
the scrolling schematic it's kind of

00:22:07,600 --> 00:22:11,360
walking with your hand doing all these

00:22:08,960 --> 00:22:12,880
things okay and if you had any errors

00:22:11,360 --> 00:22:14,960
i you would have orange text here that's

00:22:12,880 --> 00:22:16,400
like hey man i something happened that

00:22:14,960 --> 00:22:18,080
i'm mad about okay

00:22:16,400 --> 00:22:20,640
but nothing everything works right so

00:22:18,080 --> 00:22:25,120
like it just worked and i'm good

00:22:20,640 --> 00:22:26,640
so um it it updated my package.json it

00:22:25,120 --> 00:22:28,559
updated my polyfills because there's one

00:22:26,640 --> 00:22:29,840
more polyfill you need to run skully it

00:22:28,559 --> 00:22:33,400
adds it for you

00:22:29,840 --> 00:22:36,559
it it opens your app module

00:22:33,400 --> 00:22:36,880
app.module and it adds this piece in

00:22:36,559 --> 00:22:38,559
there

00:22:36,880 --> 00:22:40,240
it adds the scrolling lib module so

00:22:38,559 --> 00:22:43,360
that's all it really did here

00:22:40,240 --> 00:22:45,120
um it created the scrolly config which

00:22:43,360 --> 00:22:48,559
is this file right here

00:22:45,120 --> 00:22:50,400
it created your skull ets config and it

00:22:48,559 --> 00:22:52,320
created a plugins file for you

00:22:50,400 --> 00:22:54,400
to have a place to start writing plugins

00:22:52,320 --> 00:22:55,440
from okay so that's all

00:22:54,400 --> 00:22:57,679
and then it installed all the

00:22:55,440 --> 00:23:00,480
dependencies for npm like puppeteer and

00:22:57,679 --> 00:23:02,480
some other stuff that's going on

00:23:00,480 --> 00:23:04,080
there's about 15 steps it did we didn't

00:23:02,480 --> 00:23:06,240
want people to have to do these 15 steps

00:23:04,080 --> 00:23:10,080
manually so we wrote a schematic so

00:23:06,240 --> 00:23:12,320
it supports nx it supports angular um

00:23:10,080 --> 00:23:14,480
angular cli workspaces it supports nx

00:23:12,320 --> 00:23:15,919
workspace so it's it's it's awesome so

00:23:14,480 --> 00:23:17,600
you have the support you need to do this

00:23:15,919 --> 00:23:18,400
anyway that's all that really happened

00:23:17,600 --> 00:23:23,039
here

00:23:18,400 --> 00:23:25,840
so um let me now that we've added it

00:23:23,039 --> 00:23:27,679
i don't have to do anything i can just

00:23:25,840 --> 00:23:29,120
pre-render my website like some of you

00:23:27,679 --> 00:23:30,640
are like this is stupid

00:23:29,120 --> 00:23:33,120
i can't just add it and then premiere

00:23:30,640 --> 00:23:35,600
notice i actually you can

00:23:33,120 --> 00:23:37,760
the first thing i need to do is ng build

00:23:35,600 --> 00:23:40,080
and then i'm going to say

00:23:37,760 --> 00:23:40,880
npm run scully like it's it's literally

00:23:40,080 --> 00:23:42,880
that simple

00:23:40,880 --> 00:23:43,840
skull i need you to do a build first so

00:23:42,880 --> 00:23:44,720
i'm not going to do the broad version

00:23:43,840 --> 00:23:46,400
because i want to go a little bit

00:23:44,720 --> 00:23:47,840
quicker

00:23:46,400 --> 00:23:49,440
in production you do the pride version

00:23:47,840 --> 00:23:50,000
but for this workshop i'm just going to

00:23:49,440 --> 00:23:54,000
do the

00:23:50,000 --> 00:23:56,400
um the um the non-prod version

00:23:54,000 --> 00:23:58,240
and then once you're done you just say

00:23:56,400 --> 00:23:59,520
skully run the skull executable and it's

00:23:58,240 --> 00:24:01,039
going to pre-render our site it's going

00:23:59,520 --> 00:24:02,159
to give us a couple errors

00:24:01,039 --> 00:24:03,440
the reason it's going to give us an

00:24:02,159 --> 00:24:04,480
error is because it's going to say hey

00:24:03,440 --> 00:24:06,640
frosty

00:24:04,480 --> 00:24:08,960
i don't know where to find these donut

00:24:06,640 --> 00:24:10,480
ids to get these routes

00:24:08,960 --> 00:24:12,080
so it's going to tell us i rendered this

00:24:10,480 --> 00:24:13,840
one and i rendered this one

00:24:12,080 --> 00:24:15,520
but i don't know how to do this one

00:24:13,840 --> 00:24:19,200
that's what it's going to tell us

00:24:15,520 --> 00:24:21,120
so here we go it's now it's doing scully

00:24:19,200 --> 00:24:22,320
let's give it um okay the first time you

00:24:21,120 --> 00:24:23,840
run it's going to say hey can i

00:24:22,320 --> 00:24:26,000
can i do diagnostics i'm just going to

00:24:23,840 --> 00:24:27,039
say yes

00:24:26,000 --> 00:24:30,159
so it's going to walk us through what

00:24:27,039 --> 00:24:30,640
it's doing created some routes files

00:24:30,159 --> 00:24:33,200
around

00:24:30,640 --> 00:24:34,480
it read into my whole website in two

00:24:33,200 --> 00:24:36,320
seconds and then we're done

00:24:34,480 --> 00:24:38,159
so here's what it's here let me kind of

00:24:36,320 --> 00:24:40,320
walk you through what it's telling me

00:24:38,159 --> 00:24:41,360
i'm finding all your routes i'm i'm

00:24:40,320 --> 00:24:42,159
going through your app to look for

00:24:41,360 --> 00:24:43,360
routes

00:24:42,159 --> 00:24:45,120
i'm looking if you have any additional

00:24:43,360 --> 00:24:46,000
routes which we're not using that but

00:24:45,120 --> 00:24:48,480
it's telling me it's doing

00:24:46,000 --> 00:24:49,520
that and then it says frosty i'm gonna

00:24:48,480 --> 00:24:51,120
skip this route

00:24:49,520 --> 00:24:52,960
because i don't have any config for it

00:24:51,120 --> 00:24:54,799
which we'll go and add that in a second

00:24:52,960 --> 00:24:57,520
but it's saying hey i did successfully

00:24:54,799 --> 00:24:59,520
pre-render your about and your home page

00:24:57,520 --> 00:25:00,960
that's pretty cool right like let's go

00:24:59,520 --> 00:25:03,440
look at that

00:25:00,960 --> 00:25:05,440
if i come up to my dist actually you

00:25:03,440 --> 00:25:07,200
know what

00:25:05,440 --> 00:25:10,000
where did it render that too let me open

00:25:07,200 --> 00:25:11,840
up my skully i have so many build for

00:25:10,000 --> 00:25:14,080
i've used this revo before so let me

00:25:11,840 --> 00:25:17,360
open up my

00:25:14,080 --> 00:25:19,679
donut store config

00:25:17,360 --> 00:25:21,120
there we are okay where did it put it

00:25:19,679 --> 00:25:23,279
put it in

00:25:21,120 --> 00:25:24,559
this static okay so in this static

00:25:23,279 --> 00:25:26,720
directory

00:25:24,559 --> 00:25:29,279
we've got our home route which would

00:25:26,720 --> 00:25:31,919
look like this index.html okay

00:25:29,279 --> 00:25:33,279
and if i anyone here knows and a year

00:25:31,919 --> 00:25:34,640
app just has an empty body there's

00:25:33,279 --> 00:25:36,559
nothing in the body right

00:25:34,640 --> 00:25:38,880
but with the skully app my body's full

00:25:36,559 --> 00:25:40,720
of all sorts of content here so like

00:25:38,880 --> 00:25:42,559
this is the footer that got pre-rendered

00:25:40,720 --> 00:25:44,799
this is the body with all the distinct

00:25:42,559 --> 00:25:46,960
donuts in it they got pre-rendered

00:25:44,799 --> 00:25:48,480
like all this is pre-rendered my it's

00:25:46,960 --> 00:25:50,080
pre-rendered my home route now

00:25:48,480 --> 00:25:51,919
right so it didn't you didn't have to

00:25:50,080 --> 00:25:53,440
assist it at all to get this pre-render

00:25:51,919 --> 00:25:55,760
of this route right like

00:25:53,440 --> 00:25:58,000
it's now done there's my app route

00:25:55,760 --> 00:26:00,000
normally the app is empty

00:25:58,000 --> 00:26:01,840
but here my app was packed full of stuff

00:26:00,000 --> 00:26:03,840
right this is how

00:26:01,840 --> 00:26:06,000
simple it is to kind of get going with

00:26:03,840 --> 00:26:07,919
skully you just say hey scully

00:26:06,000 --> 00:26:10,240
do a build and then you say npm run

00:26:07,919 --> 00:26:12,720
skully in it and it takes care of it

00:26:10,240 --> 00:26:13,360
pretty cool right like i want to see in

00:26:12,720 --> 00:26:15,120
the chat

00:26:13,360 --> 00:26:17,120
give me some give me some rounds of

00:26:15,120 --> 00:26:20,480
applause that's pretty cool right

00:26:17,120 --> 00:26:21,679
all right but um and let's serve this

00:26:20,480 --> 00:26:23,039
let's just serve this just so you can

00:26:21,679 --> 00:26:24,480
kind of see i want to show you

00:26:23,039 --> 00:26:25,840
what this app will function like let's

00:26:24,480 --> 00:26:26,559
just do some poking around the testing

00:26:25,840 --> 00:26:29,279
with it right

00:26:26,559 --> 00:26:30,000
okay so let me um let me open up another

00:26:29,279 --> 00:26:33,760
tab

00:26:30,000 --> 00:26:35,679
and uh actually uh

00:26:33,760 --> 00:26:39,200
cancel let's come back over here and

00:26:35,679 --> 00:26:42,720
we're gonna set instead of um

00:26:39,200 --> 00:26:44,240
we're gonna say npm run scully

00:26:42,720 --> 00:26:45,840
and you can add a serve on there because

00:26:44,240 --> 00:26:48,080
i may want to serve

00:26:45,840 --> 00:26:49,520
the results of my skully build similar

00:26:48,080 --> 00:26:52,880
to how you do ng serve

00:26:49,520 --> 00:26:54,720
so you can develop um you can develop

00:26:52,880 --> 00:26:56,159
your angular and have like refreshes and

00:26:54,720 --> 00:26:57,200
stuff and like you can see it before you

00:26:56,159 --> 00:26:58,559
deploy to production

00:26:57,200 --> 00:27:00,400
this is what skully's serve does so i'm

00:26:58,559 --> 00:27:01,520
just going to run this and it's going to

00:27:00,400 --> 00:27:02,960
say hey

00:27:01,520 --> 00:27:05,200
i'm walking through everything so i've

00:27:02,960 --> 00:27:06,000
i'm serving your dis static folder on

00:27:05,200 --> 00:27:07,520
these ports

00:27:06,000 --> 00:27:09,679
the angular version that is not

00:27:07,520 --> 00:27:11,039
pre-rendered is on this server

00:27:09,679 --> 00:27:12,320
and the skully version that is

00:27:11,039 --> 00:27:13,360
pre-rendered is on this server so i'm

00:27:12,320 --> 00:27:14,559
going to actually i want to use this

00:27:13,360 --> 00:27:15,200
silly version so i'm going to click on

00:27:14,559 --> 00:27:17,919
this

00:27:15,200 --> 00:27:20,080
okay it's going to come over so this

00:27:17,919 --> 00:27:22,159
looks like the exact same app okay

00:27:20,080 --> 00:27:23,440
and if i click on it it's gonna function

00:27:22,159 --> 00:27:26,480
like the exact same app

00:27:23,440 --> 00:27:27,840
okay and i can go back home and this is

00:27:26,480 --> 00:27:31,120
working like the exact same thing

00:27:27,840 --> 00:27:34,320
now um however

00:27:31,120 --> 00:27:34,960
like over here on this page oh yeah

00:27:34,320 --> 00:27:36,720
sorry

00:27:34,960 --> 00:27:38,640
let me do this real quick i gotta

00:27:36,720 --> 00:27:41,039
restart this because

00:27:38,640 --> 00:27:41,039
when you

00:27:41,760 --> 00:27:46,320
when you do when you install skully you

00:27:43,600 --> 00:27:48,080
have to restart your ng serve so sorry

00:27:46,320 --> 00:27:49,679
so let's come back over here it should

00:27:48,080 --> 00:27:52,480
just take a second

00:27:49,679 --> 00:27:53,279
get it done there we go okay so let's

00:27:52,480 --> 00:27:55,919
refresh this

00:27:53,279 --> 00:27:56,880
so if i show you the request for the

00:27:55,919 --> 00:27:58,880
index.html

00:27:56,880 --> 00:28:01,360
this is what it looks like in the

00:27:58,880 --> 00:28:04,000
javascript version the annual version

00:28:01,360 --> 00:28:04,640
this is what the if we come to the

00:28:04,000 --> 00:28:07,360
network

00:28:04,640 --> 00:28:09,039
and i do a refresh let me show you what

00:28:07,360 --> 00:28:09,679
the index.html looks like in this

00:28:09,039 --> 00:28:11,279
version

00:28:09,679 --> 00:28:13,679
this is what the index.html looked in

00:28:11,279 --> 00:28:15,440
this version fully rendered

00:28:13,679 --> 00:28:16,720
everything was right there so this is

00:28:15,440 --> 00:28:17,840
actually really really powerful when you

00:28:16,720 --> 00:28:19,360
think about it

00:28:17,840 --> 00:28:21,120
i'm gonna do something that you couldn't

00:28:19,360 --> 00:28:22,320
do we tried it a second ago with our

00:28:21,120 --> 00:28:24,080
with our angular app

00:28:22,320 --> 00:28:25,520
and it didn't work i'm gonna i'm gonna

00:28:24,080 --> 00:28:27,919
pull up the command palette and we're

00:28:25,520 --> 00:28:29,600
gonna say hey

00:28:27,919 --> 00:28:31,360
disable javascript and i'm going to

00:28:29,600 --> 00:28:34,880
refresh this right

00:28:31,360 --> 00:28:36,080
this app still works okay the home page

00:28:34,880 --> 00:28:38,159
works

00:28:36,080 --> 00:28:39,760
and then once it downloads it doesn't

00:28:38,159 --> 00:28:40,240
actually download the javascript anymore

00:28:39,760 --> 00:28:41,760
so

00:28:40,240 --> 00:28:43,600
if i were to try and click on one of

00:28:41,760 --> 00:28:45,120
these donuts remember it didn't render

00:28:43,600 --> 00:28:47,279
those details pages

00:28:45,120 --> 00:28:48,159
so this is just gonna say i don't have

00:28:47,279 --> 00:28:50,159
that right

00:28:48,159 --> 00:28:51,919
but i could go to the about route and

00:28:50,159 --> 00:28:54,159
that's rendered so both of these are

00:28:51,919 --> 00:28:57,840
pre-rendered

00:28:54,159 --> 00:29:00,320
and um yeah like this app is

00:28:57,840 --> 00:29:01,120
actually working right like this is this

00:29:00,320 --> 00:29:04,480
about page

00:29:01,120 --> 00:29:06,480
was 301 bytes big like or

00:29:04,480 --> 00:29:08,000
7k i mean it was really really small

00:29:06,480 --> 00:29:10,080
then that's not gzipped

00:29:08,000 --> 00:29:12,000
so it'd be even smaller if i if i zipped

00:29:10,080 --> 00:29:14,960
it oh no it is gcip

00:29:12,000 --> 00:29:16,240
sorry it's 20k and non-gzip 7kgs this is

00:29:14,960 --> 00:29:18,159
much smaller

00:29:16,240 --> 00:29:19,919
than downloading all of my javascript

00:29:18,159 --> 00:29:23,279
would have been okay let's actually

00:29:19,919 --> 00:29:26,480
just to kind of show that off um enable

00:29:23,279 --> 00:29:29,200
javascript and then let's do a reload

00:29:26,480 --> 00:29:31,520
so we got 7k to see the app but then

00:29:29,200 --> 00:29:34,799
where's all the javascript

00:29:31,520 --> 00:29:38,640
30k 3k um

00:29:34,799 --> 00:29:41,200
6k 477k 6k

00:29:38,640 --> 00:29:42,960
needless to say lots of k to see my

00:29:41,200 --> 00:29:44,640
website these aren't gzip numbers by the

00:29:42,960 --> 00:29:45,679
way like these these javascript sizes

00:29:44,640 --> 00:29:47,440
this is not

00:29:45,679 --> 00:29:48,640
how small they can get at their smallest

00:29:47,440 --> 00:29:50,320
point they can get much smaller than

00:29:48,640 --> 00:29:51,120
that is if you do a prod build they get

00:29:50,320 --> 00:29:53,760
much smaller

00:29:51,120 --> 00:29:54,480
but the point is they're seeing the site

00:29:53,760 --> 00:29:55,600
for only 7k

00:29:54,480 --> 00:29:57,200
they don't actually have to go download

00:29:55,600 --> 00:29:58,880
the rest of the website to see it and

00:29:57,200 --> 00:30:01,679
interact with it start scrolling and

00:29:58,880 --> 00:30:03,039
clicking and having it work how cool is

00:30:01,679 --> 00:30:05,440
that you know like that's

00:30:03,039 --> 00:30:07,120
stupid awesome that's just it's a

00:30:05,440 --> 00:30:08,880
massive performance increase that

00:30:07,120 --> 00:30:10,960
we we never could have done in angular

00:30:08,880 --> 00:30:13,200
ever there's no way to do it

00:30:10,960 --> 00:30:14,799
right like unless as you get into marvel

00:30:13,200 --> 00:30:16,880
universe and start doing some quantum

00:30:14,799 --> 00:30:20,159
stuff like there's no way to do this

00:30:16,880 --> 00:30:21,520
it's it's pretty fantastic anyway

00:30:20,159 --> 00:30:24,559
i'm gonna go back to scully because i

00:30:21,520 --> 00:30:26,080
want to show you how simple it is

00:30:24,559 --> 00:30:28,080
why is that working oh because i enable

00:30:26,080 --> 00:30:30,799
javascript again okay so if i have

00:30:28,080 --> 00:30:32,559
if i have javascript disabled when i

00:30:30,799 --> 00:30:34,840
click on these detail routes

00:30:32,559 --> 00:30:37,679
they don't work right but if i have

00:30:34,840 --> 00:30:40,799
javascript enabled

00:30:37,679 --> 00:30:41,279
then um if i start on this pre-rendered

00:30:40,799 --> 00:30:43,360
route

00:30:41,279 --> 00:30:44,799
i can then go here and the javascript

00:30:43,360 --> 00:30:46,880
app is working by here so even though i

00:30:44,799 --> 00:30:48,640
didn't pre-render this route

00:30:46,880 --> 00:30:50,080
the javascript app is working at this

00:30:48,640 --> 00:30:52,000
point okay

00:30:50,080 --> 00:30:53,600
but i want it to work even without

00:30:52,000 --> 00:30:55,200
javascript so let's go ahead and teach

00:30:53,600 --> 00:30:58,000
chili how to pre-render these details

00:30:55,200 --> 00:31:00,799
routes okay it's actually stupid simple

00:30:58,000 --> 00:31:01,600
so let's go back to our skully config

00:31:00,799 --> 00:31:04,799
all right

00:31:01,600 --> 00:31:08,720
so um if you remember back it

00:31:04,799 --> 00:31:10,480
scully told us oy i don't know what to

00:31:08,720 --> 00:31:12,799
do for this thing

00:31:10,480 --> 00:31:14,320
okay so we need to add a config for that

00:31:12,799 --> 00:31:15,760
so i'm going to come down to my routes

00:31:14,320 --> 00:31:16,159
and i'm going to just paste that config

00:31:15,760 --> 00:31:18,799
there

00:31:16,159 --> 00:31:20,880
all right and i'm going to say for that

00:31:18,799 --> 00:31:23,200
config scully

00:31:20,880 --> 00:31:25,519
i want you to use a very specific

00:31:23,200 --> 00:31:27,279
plug-in it's called

00:31:25,519 --> 00:31:28,720
the json plug-in because i just needed

00:31:27,279 --> 00:31:29,440
to go get the donut ids from some

00:31:28,720 --> 00:31:32,960
plug-in

00:31:29,440 --> 00:31:37,039
okay or from some api so go there

00:31:32,960 --> 00:31:41,039
and then to get the to get the donut

00:31:37,039 --> 00:31:44,840
id um

00:31:41,039 --> 00:31:48,240
i think we say url is http

00:31:44,840 --> 00:31:51,600
localhost 3000

00:31:48,240 --> 00:31:53,039
slash donuts right and then does anyone

00:31:51,600 --> 00:31:58,399
remember the name of the

00:31:53,039 --> 00:31:58,399
uh the donut id property i remember it

00:31:58,480 --> 00:32:02,799
anyone else remember when i showed the

00:32:00,720 --> 00:32:04,399
apa no one's gonna take a bite no one

00:32:02,799 --> 00:32:06,080
wants to like

00:32:04,399 --> 00:32:07,519
double dutch jump the rope with me all

00:32:06,080 --> 00:32:09,440
right it was called id

00:32:07,519 --> 00:32:11,600
okay so i'm just gonna put that in there

00:32:09,440 --> 00:32:13,760
so this is all you really have to do

00:32:11,600 --> 00:32:15,039
you say hey for this thing let's use the

00:32:13,760 --> 00:32:16,559
json plugin

00:32:15,039 --> 00:32:18,480
to get the donut ideas because sometimes

00:32:16,559 --> 00:32:20,000
you've got donut id slash other ids

00:32:18,480 --> 00:32:20,559
maybe you have like six or seven ids

00:32:20,000 --> 00:32:22,480
like

00:32:20,559 --> 00:32:24,159
so you have to configure each each each

00:32:22,480 --> 00:32:24,960
query parameter individually so i'm

00:32:24,159 --> 00:32:29,039
saying hey

00:32:24,960 --> 00:32:31,760
use the json plugin for the donut id

00:32:29,039 --> 00:32:32,559
use this url and pull the ids out of

00:32:31,760 --> 00:32:33,919
them

00:32:32,559 --> 00:32:36,240
what skull is going to do is it's going

00:32:33,919 --> 00:32:38,080
to end up with a list of ids

00:32:36,240 --> 00:32:40,960
and then it's going to merge those ids

00:32:38,080 --> 00:32:42,399
into this route for me

00:32:40,960 --> 00:32:43,840
and then it's going to add those to the

00:32:42,399 --> 00:32:44,799
list of things to be pre-rendered and

00:32:43,840 --> 00:32:47,120
then next time

00:32:44,799 --> 00:32:48,320
instead of only pre-rendering two routes

00:32:47,120 --> 00:32:49,120
it's going to pre-render tonna routes

00:32:48,320 --> 00:32:51,360
and this is all

00:32:49,120 --> 00:32:53,120
this is very very simple okay so let's

00:32:51,360 --> 00:32:56,559
let's tell scully to run again

00:32:53,120 --> 00:32:57,919
all right so let's say um and i haven't

00:32:56,559 --> 00:32:59,039
modified angular so i don't need to do

00:32:57,919 --> 00:33:00,799
another build

00:32:59,039 --> 00:33:02,960
the angular code is the same like right

00:33:00,799 --> 00:33:04,320
we didn't the only file we modified was

00:33:02,960 --> 00:33:06,240
this file

00:33:04,320 --> 00:33:07,760
so i don't need to do an ng build again

00:33:06,240 --> 00:33:08,960
if i modified my angular i would need to

00:33:07,760 --> 00:33:10,880
do an ng build but

00:33:08,960 --> 00:33:12,559
we've only modified our skully config so

00:33:10,880 --> 00:33:15,600
at this point i'm just going to say

00:33:12,559 --> 00:33:18,720
npm run scully

00:33:15,600 --> 00:33:22,159
um i'm going to say dash dash

00:33:18,720 --> 00:33:23,600
watch okay

00:33:22,159 --> 00:33:25,120
this is going to put it into a watch

00:33:23,600 --> 00:33:26,559
mode that's actually pretty cool anytime

00:33:25,120 --> 00:33:29,760
i changed any of the files now

00:33:26,559 --> 00:33:29,760
it's going to watch and rebuild

00:33:31,360 --> 00:33:34,960
so here it's pre-rendering all of my

00:33:32,799 --> 00:33:36,960
apps now it's saying frosty

00:33:34,960 --> 00:33:38,799
i'm saved this route into this

00:33:36,960 --> 00:33:39,600
index.html in this route into this

00:33:38,799 --> 00:33:42,080
indexation

00:33:39,600 --> 00:33:43,200
so now like it re-rendered everything it

00:33:42,080 --> 00:33:45,600
gave me some errors i've never seen

00:33:43,200 --> 00:33:45,600
before

00:33:45,679 --> 00:33:51,039
not provided i don't understand what

00:33:49,279 --> 00:33:52,640
that means

00:33:51,039 --> 00:33:54,240
it worked because it tried it a second

00:33:52,640 --> 00:33:55,519
time so i don't really know

00:33:54,240 --> 00:33:57,039
i think it's freaking out because of the

00:33:55,519 --> 00:33:59,600
trademark in the url like it doesn't

00:33:57,039 --> 00:34:02,240
like the trademark in the ids so

00:33:59,600 --> 00:34:04,880
anyway i think that's what that is

00:34:02,240 --> 00:34:09,919
anyway so now

00:34:04,880 --> 00:34:12,480
if i come up to my dist folder let's uh

00:34:09,919 --> 00:34:14,960
i should have a donuts thing and then i

00:34:12,480 --> 00:34:17,119
got one folder for every single thing

00:34:14,960 --> 00:34:18,079
and i've got an index.html inside every

00:34:17,119 --> 00:34:19,760
single one of those

00:34:18,079 --> 00:34:22,000
cool and if i format this and go to the

00:34:19,760 --> 00:34:23,760
bottom it's got that donut id

00:34:22,000 --> 00:34:25,119
for each one in every single one right

00:34:23,760 --> 00:34:28,000
so like i've got the nutritional facts

00:34:25,119 --> 00:34:30,240
and everything for the cinnamon twist

00:34:28,000 --> 00:34:32,240
that was pretty simple i've officially

00:34:30,240 --> 00:34:32,800
pre-rendered every single route in this

00:34:32,240 --> 00:34:34,800
site

00:34:32,800 --> 00:34:36,079
every single route in this simple app is

00:34:34,800 --> 00:34:39,280
is pre-rendered

00:34:36,079 --> 00:34:40,800
and i only had to do one config right so

00:34:39,280 --> 00:34:42,159
you have to config every single route

00:34:40,800 --> 00:34:43,919
parameter you have

00:34:42,159 --> 00:34:45,760
but it's very very simple to do http

00:34:43,919 --> 00:34:48,000
calls to get those data okay

00:34:45,760 --> 00:34:49,599
like imagine you have a complex data

00:34:48,000 --> 00:34:50,320
structure and you need to get the data

00:34:49,599 --> 00:34:53,440
out of those

00:34:50,320 --> 00:34:55,040
complex data instead of property

00:34:53,440 --> 00:34:56,800
if you need to if you need to turn some

00:34:55,040 --> 00:35:00,000
complex data into a list of

00:34:56,800 --> 00:35:01,040
of ids we have a thing here called

00:35:00,000 --> 00:35:04,079
results

00:35:01,040 --> 00:35:06,079
handler and it can be a function with

00:35:04,079 --> 00:35:09,119
the response from the server okay

00:35:06,079 --> 00:35:11,040
and so you can actually like javascript

00:35:09,119 --> 00:35:12,880
you can kind of do some javascript over

00:35:11,040 --> 00:35:15,040
your results and map it into an object

00:35:12,880 --> 00:35:17,280
that makes sense that you can then

00:35:15,040 --> 00:35:18,880
use the property id on those things like

00:35:17,280 --> 00:35:20,240
it's very very extensible you can just

00:35:18,880 --> 00:35:23,200
use you can use the

00:35:20,240 --> 00:35:23,839
the the the um you can use the json

00:35:23,200 --> 00:35:25,200
plugin for

00:35:23,839 --> 00:35:28,839
a lot of stuff it's actually really

00:35:25,200 --> 00:35:32,160
really simple and powerful to do anyway

00:35:28,839 --> 00:35:33,760
cool let's now that we've done this

00:35:32,160 --> 00:35:35,760
it actually was what because i ran

00:35:33,760 --> 00:35:37,200
skully with a watch it's also

00:35:35,760 --> 00:35:39,359
served it up so let's actually go back

00:35:37,200 --> 00:35:42,240
to our served thing

00:35:39,359 --> 00:35:42,640
all right so now this is served this is

00:35:42,240 --> 00:35:44,160
uh

00:35:42,640 --> 00:35:46,400
if we if we come over here it's

00:35:44,160 --> 00:35:49,040
pre-rendered entirely

00:35:46,400 --> 00:35:51,280
um and if i come on to these things it

00:35:49,040 --> 00:35:52,160
works and if i refresh on here it also

00:35:51,280 --> 00:35:55,599
works

00:35:52,160 --> 00:35:57,680
and if i disable javascript

00:35:55,599 --> 00:35:59,200
disable javascript the whole website

00:35:57,680 --> 00:36:01,200
still works right so i can go back to

00:35:59,200 --> 00:36:04,320
the donuts click

00:36:01,200 --> 00:36:07,359
get nutritional facts here about route

00:36:04,320 --> 00:36:08,800
go home click on the next one

00:36:07,359 --> 00:36:11,040
the whole website's just working no

00:36:08,800 --> 00:36:13,119
javascript like it's not downloading any

00:36:11,040 --> 00:36:16,240
angular here but my website's still

00:36:13,119 --> 00:36:18,640
working okay all right no one

00:36:16,240 --> 00:36:20,480
i mean you guys are deadpan and me in

00:36:18,640 --> 00:36:21,839
the chat this is cool stuff

00:36:20,480 --> 00:36:24,160
i know it's cool so i'm just gonna keep

00:36:21,839 --> 00:36:28,079
having myself on the back but

00:36:24,160 --> 00:36:30,160
um brooke do you know what's cool

00:36:28,079 --> 00:36:31,119
yeah brooks i totally do yeah i know i'm

00:36:30,160 --> 00:36:33,359
here i'm just on me

00:36:31,119 --> 00:36:35,119
okay everybody's hungry though you're

00:36:33,359 --> 00:36:36,800
just making everybody want i know

00:36:35,119 --> 00:36:38,960
every time i do this i'm like dude i

00:36:36,800 --> 00:36:41,599
gotta go get a donut

00:36:38,960 --> 00:36:42,640
for sure if you could which donut would

00:36:41,599 --> 00:36:44,720
you get

00:36:42,640 --> 00:36:45,760
oh my gosh you know i've never been a

00:36:44,720 --> 00:36:48,640
chocolate person

00:36:45,760 --> 00:36:50,800
i've always been more like like my

00:36:48,640 --> 00:36:53,119
favorite ice cream flavor is like almond

00:36:50,800 --> 00:36:57,200
flavor so i'd go with something like a

00:36:53,119 --> 00:36:59,119
um there's like a french crueler

00:36:57,200 --> 00:37:01,280
those are pretty good the problem with

00:36:59,119 --> 00:37:03,520
those is that they're pretty airy

00:37:01,280 --> 00:37:05,040
and they're not very satisfying but then

00:37:03,520 --> 00:37:07,520
what are those like braided

00:37:05,040 --> 00:37:08,720
um twists they're not they're not

00:37:07,520 --> 00:37:10,800
they're actually not braided they're

00:37:08,720 --> 00:37:11,520
just more like sloppily made but they're

00:37:10,800 --> 00:37:13,520
like glazed

00:37:11,520 --> 00:37:14,720
fritters yeah this fritter dude this is

00:37:13,520 --> 00:37:17,680
what you're talking about no

00:37:14,720 --> 00:37:19,040
it's like it's like a circle oh the

00:37:17,680 --> 00:37:21,520
old-fashioned there you go

00:37:19,040 --> 00:37:23,520
there you go yep those are pretty yeah

00:37:21,520 --> 00:37:25,599
yeah i think i just go the fritter

00:37:23,520 --> 00:37:27,280
okay fritters are pretty good kill me

00:37:25,599 --> 00:37:30,240
the fastest all right okay

00:37:27,280 --> 00:37:31,359
okay so we've got this let me let me

00:37:30,240 --> 00:37:32,720
show another feature though because we

00:37:31,359 --> 00:37:34,079
only we only have 15 minutes left so let

00:37:32,720 --> 00:37:36,079
me show you another feature

00:37:34,079 --> 00:37:38,400
um if you notice if i look at my xhr

00:37:36,079 --> 00:37:40,400
calls and i do a refresh on this page

00:37:38,400 --> 00:37:42,880
it is okay let me turn on javascript

00:37:40,400 --> 00:37:43,599
again enable job okay so let me refresh

00:37:42,880 --> 00:37:45,760
this

00:37:43,599 --> 00:37:46,800
it's once the javascript it's

00:37:45,760 --> 00:37:47,839
pre-rendered and then once the

00:37:46,800 --> 00:37:50,720
javascript turns on

00:37:47,839 --> 00:37:51,680
the javascript still makes a call to my

00:37:50,720 --> 00:37:53,440
donuts api

00:37:51,680 --> 00:37:55,680
it calls the three thousand donuts as

00:37:53,440 --> 00:37:57,280
well so my build call is three thousand

00:37:55,680 --> 00:37:59,119
donuts

00:37:57,280 --> 00:38:01,040
and in production it still calls three

00:37:59,119 --> 00:38:02,480
thousand dollars i don't want it to call

00:38:01,040 --> 00:38:04,079
three thousand donuts in production i

00:38:02,480 --> 00:38:07,119
wanted to cache the donuts

00:38:04,079 --> 00:38:08,560
with my with my my javascript files and

00:38:07,119 --> 00:38:09,920
my index.html files

00:38:08,560 --> 00:38:11,839
so i'm going to show you how simple it

00:38:09,920 --> 00:38:13,440
is to get this in there okay

00:38:11,839 --> 00:38:15,119
to get this cache that we talked about

00:38:13,440 --> 00:38:19,119
like it's stupid simple so

00:38:15,119 --> 00:38:21,359
we want to pre-render um sorry

00:38:19,119 --> 00:38:23,520
we want to go into the source app i want

00:38:21,359 --> 00:38:24,240
to i want to cache the call to get all

00:38:23,520 --> 00:38:25,359
the donuts

00:38:24,240 --> 00:38:26,640
so i'm going to come in here and i'm

00:38:25,359 --> 00:38:27,680
going to show you a new service that

00:38:26,640 --> 00:38:30,839
comes with scully

00:38:27,680 --> 00:38:32,079
so we're going to say private transfer

00:38:30,839 --> 00:38:34,640
state

00:38:32,079 --> 00:38:35,520
or call it skully is it called skully

00:38:34,640 --> 00:38:38,160
transfer state

00:38:35,520 --> 00:38:38,160
or just called

00:38:39,760 --> 00:38:49,200
i could never we changed the name

00:38:47,359 --> 00:38:50,800
there it is this is the transfer state

00:38:49,200 --> 00:38:53,440
service all right

00:38:50,800 --> 00:38:54,480
so how do i get the donuts already i do

00:38:53,440 --> 00:38:56,960
it like this

00:38:54,480 --> 00:38:58,560
i say the donuts are equal to this http

00:38:56,960 --> 00:39:01,839
request

00:38:58,560 --> 00:39:04,000
and then i subscribe to that and say

00:39:01,839 --> 00:39:05,599
this that bonus is equal to

00:39:04,000 --> 00:39:07,119
the response from the server okay so

00:39:05,599 --> 00:39:07,839
it's i'm not doing a lot of stuff in

00:39:07,119 --> 00:39:10,160
here

00:39:07,839 --> 00:39:11,520
let me show you how you're gonna do this

00:39:10,160 --> 00:39:13,520
with scully like you

00:39:11,520 --> 00:39:15,119
part of you're gonna be really bothered

00:39:13,520 --> 00:39:16,400
it's so easy like a part of me feels bad

00:39:15,119 --> 00:39:18,720
that i'm making it this easy

00:39:16,400 --> 00:39:19,920
okay because here's here's the code i

00:39:18,720 --> 00:39:25,200
have to write i have to say

00:39:19,920 --> 00:39:27,520
oi if i'm in the skully build

00:39:25,200 --> 00:39:29,200
go to the three thousand donuts api but

00:39:27,520 --> 00:39:32,079
if i'm in production

00:39:29,200 --> 00:39:32,800
pull it from the cache so if skully's

00:39:32,079 --> 00:39:35,040
running

00:39:32,800 --> 00:39:36,400
get it from here from the server if

00:39:35,040 --> 00:39:38,560
skully's not running

00:39:36,400 --> 00:39:39,680
pull it from the cache so that's that's

00:39:38,560 --> 00:39:41,200
the logic i have to create

00:39:39,680 --> 00:39:42,960
well we've wrapped that up into one

00:39:41,200 --> 00:39:44,320
service call for you okay so i'm going

00:39:42,960 --> 00:39:47,040
to say const

00:39:44,320 --> 00:39:48,400
donuts 2 okay as i'll just make a

00:39:47,040 --> 00:39:53,119
duplicate and i'll say

00:39:48,400 --> 00:39:53,119
this dot transfer state dot use

00:39:53,599 --> 00:39:57,680
slowly translate this takes two

00:39:55,200 --> 00:39:59,119
arguments the name i mean it's a string

00:39:57,680 --> 00:40:01,920
of the of the key that's going to be in

00:39:59,119 --> 00:40:04,400
the cache let me just call my donuts

00:40:01,920 --> 00:40:05,520
and then it wants to know hey when i

00:40:04,400 --> 00:40:06,640
have to go to the server

00:40:05,520 --> 00:40:07,920
how do i get that from the server

00:40:06,640 --> 00:40:09,200
where's the observable to get it from

00:40:07,920 --> 00:40:10,000
the server so i'm just going to copy

00:40:09,200 --> 00:40:13,839
this in here

00:40:10,000 --> 00:40:15,200
okay copy this

00:40:13,839 --> 00:40:17,680
paste that in here as the second

00:40:15,200 --> 00:40:19,760
parameter all right

00:40:17,680 --> 00:40:22,079
that's it so i'm actually going to

00:40:19,760 --> 00:40:25,760
comment this out

00:40:22,079 --> 00:40:28,560
change this to be called donuts

00:40:25,760 --> 00:40:28,880
and i'm going to rerun i'm going to have

00:40:28,560 --> 00:40:30,400
to

00:40:28,880 --> 00:40:32,640
because i've now changed my angular i'm

00:40:30,400 --> 00:40:35,040
going to do a build of of angular

00:40:32,640 --> 00:40:36,640
and then my skully will rebuild okay so

00:40:35,040 --> 00:40:39,920
let's do this real quick let's

00:40:36,640 --> 00:40:41,359
split this vertically and i'm going to

00:40:39,920 --> 00:40:44,640
say now here

00:40:41,359 --> 00:40:46,640
ng build watch

00:40:44,640 --> 00:40:48,000
okay so it's going to do a build anytime

00:40:46,640 --> 00:40:50,960
i change my angular

00:40:48,000 --> 00:40:52,079
go watch and rebuild and then anytime

00:40:50,960 --> 00:40:53,680
the build's done

00:40:52,079 --> 00:40:56,800
the skully will rebuild so you can kind

00:40:53,680 --> 00:40:58,240
of watch this once this is done

00:40:56,800 --> 00:40:59,839
okay this is done so the skully

00:40:58,240 --> 00:41:02,800
re-kicked in and re-rendered everything

00:40:59,839 --> 00:41:05,440
okay all right so now we can go back

00:41:02,800 --> 00:41:07,040
over to our test app over here

00:41:05,440 --> 00:41:08,640
and i'm going to refresh this page and i

00:41:07,040 --> 00:41:10,560
want you to notice

00:41:08,640 --> 00:41:12,160
the xhr that happens it's not going to

00:41:10,560 --> 00:41:12,960
come from 3000 anymore it's going to

00:41:12,160 --> 00:41:16,720
come from

00:41:12,960 --> 00:41:18,079
the 16 1668 okay so watch this let me

00:41:16,720 --> 00:41:20,079
refresh

00:41:18,079 --> 00:41:21,520
actually on this page there is none

00:41:20,079 --> 00:41:22,880
because it embedded the data into the

00:41:21,520 --> 00:41:25,520
index.html

00:41:22,880 --> 00:41:25,920
right so like it caches it there is no

00:41:25,520 --> 00:41:29,359
more

00:41:25,920 --> 00:41:30,640
xhr requests to get the donuts

00:41:29,359 --> 00:41:32,640
it's pre-rendered but then when the

00:41:30,640 --> 00:41:33,680
angularjs app bootstraps it just pulls

00:41:32,640 --> 00:41:35,599
it out of the pre-render

00:41:33,680 --> 00:41:36,720
let me show you what that looks like

00:41:35,599 --> 00:41:38,640
where it cached it

00:41:36,720 --> 00:41:40,319
okay so come over here static i'm just

00:41:38,640 --> 00:41:41,599
going to pick any of the uh no i didn't

00:41:40,319 --> 00:41:42,160
do it on the donut page i did it on the

00:41:41,599 --> 00:41:45,040
home page

00:41:42,160 --> 00:41:46,400
sorry so we'll come here i'm going to

00:41:45,040 --> 00:41:49,599
format this

00:41:46,400 --> 00:41:50,880
and if we go to there's

00:41:49,599 --> 00:41:53,359
we come to the bottom we're going to

00:41:50,880 --> 00:41:56,000
find sorry let me scope if i

00:41:53,359 --> 00:41:57,680
we put a cache script tag in the page

00:41:56,000 --> 00:41:59,839
the skully builder does

00:41:57,680 --> 00:42:01,200
it's called skully transfer state and

00:41:59,839 --> 00:42:03,440
then when the app turns on

00:42:01,200 --> 00:42:05,040
it actually pulls it out of here and

00:42:03,440 --> 00:42:08,560
look it's got that name donuts

00:42:05,040 --> 00:42:12,800
which is what i called it right so

00:42:08,560 --> 00:42:14,400
this is out cached the initial data

00:42:12,800 --> 00:42:16,800
if i change from this route to another

00:42:14,400 --> 00:42:18,640
route though how do i get that route's

00:42:16,800 --> 00:42:20,000
cache data well let me show you

00:42:18,640 --> 00:42:22,160
let me show you what actually happened

00:42:20,000 --> 00:42:23,599
here um let's actually go

00:42:22,160 --> 00:42:25,680
let's do the exact same thing we just

00:42:23,599 --> 00:42:27,040
did for the details page because there's

00:42:25,680 --> 00:42:28,880
only one line of code so

00:42:27,040 --> 00:42:30,400
so let's just close this up add it one

00:42:28,880 --> 00:42:32,960
more time to another file

00:42:30,400 --> 00:42:34,720
go over here to the donuts we're gonna

00:42:32,960 --> 00:42:35,920
add the exact same basically line of

00:42:34,720 --> 00:42:39,200
code over here

00:42:35,920 --> 00:42:42,640
just say oi private transfer

00:42:39,200 --> 00:42:45,040
state transfer state

00:42:42,640 --> 00:42:47,119
service bring that in and then i'm going

00:42:45,040 --> 00:42:50,240
to copy

00:42:47,119 --> 00:42:50,240
i'm actually just going to do this

00:42:51,839 --> 00:43:00,079
and i'm going to say cost donuts

00:42:55,920 --> 00:43:03,040
or donut is equal to

00:43:00,079 --> 00:43:04,480
this dot transfer state dot use

00:43:03,040 --> 00:43:06,319
scholarly transfer state

00:43:04,480 --> 00:43:08,960
i'm going to call it donut and then i'm

00:43:06,319 --> 00:43:08,960
going to say

00:43:10,640 --> 00:43:15,119
this dot donut api

00:43:16,319 --> 00:43:22,400
no you know what i want do that

00:43:19,839 --> 00:43:23,760
okay so this one says hey if you're in

00:43:22,400 --> 00:43:26,640
the sky build

00:43:23,760 --> 00:43:28,240
do it here otherwise pulled out of the

00:43:26,640 --> 00:43:31,520
cache with this name

00:43:28,240 --> 00:43:32,240
what are you mad about they mess up his

00:43:31,520 --> 00:43:36,079
name

00:43:32,240 --> 00:43:36,079
oh sorry it's not this sorry

00:43:36,400 --> 00:43:40,960
okay the build's gonna be fire a every

00:43:39,440 --> 00:43:43,760
fire

00:43:40,960 --> 00:43:46,079
all the pages are gonna rebuild do it

00:43:43,760 --> 00:43:46,079
already

00:43:47,599 --> 00:43:50,800
scully's like freezing uh there we go

00:43:49,200 --> 00:43:52,319
okay it done froze i don't know i have

00:43:50,800 --> 00:43:55,839
froze all right

00:43:52,319 --> 00:43:55,839
come on bud

00:43:56,319 --> 00:43:59,119
come on bud

00:44:02,640 --> 00:44:07,359
i don't know why it's doing this get it

00:44:05,760 --> 00:44:08,800
done bud get it done

00:44:07,359 --> 00:44:11,040
okay we're done okay cool let's come

00:44:08,800 --> 00:44:13,359
over to our app now so now

00:44:11,040 --> 00:44:15,040
if i you'll notice there's no xhr on

00:44:13,359 --> 00:44:16,560
this page

00:44:15,040 --> 00:44:19,599
and before when i would go to these

00:44:16,560 --> 00:44:23,839
detail routes it would make an xhr

00:44:19,599 --> 00:44:23,839
why did you fail

00:44:26,800 --> 00:44:29,680
what is going on

00:44:33,200 --> 00:44:37,839
i'm gonna restart everything because i

00:44:34,800 --> 00:44:37,839
think it's all freaking out

00:44:38,079 --> 00:44:41,599
i don't know why skully's freaking out

00:44:45,920 --> 00:44:50,160
well okay okay yeah when i ran the build

00:44:48,319 --> 00:44:53,760
over here okay now let's run scroll you

00:44:50,160 --> 00:44:56,560
okay you're done

00:44:53,760 --> 00:44:56,560
build it faster

00:45:00,800 --> 00:45:05,520
okay a lot faster time i didn't see any

00:45:02,319 --> 00:45:07,599
weird stuff go here refresh

00:45:05,520 --> 00:45:09,040
okay so that's rendered when it came

00:45:07,599 --> 00:45:10,240
over here when it when it rendered this

00:45:09,040 --> 00:45:12,240
page

00:45:10,240 --> 00:45:14,000
it it did make a request for something

00:45:12,240 --> 00:45:16,079
called data.json it didn't go to the

00:45:14,000 --> 00:45:16,880
donuts api it requested the date the

00:45:16,079 --> 00:45:18,480
data

00:45:16,880 --> 00:45:20,240
but notice the data is not coming from

00:45:18,480 --> 00:45:22,400
port 3000 it's coming from

00:45:20,240 --> 00:45:23,680
my file system it's coming from the

00:45:22,400 --> 00:45:25,920
build so

00:45:23,680 --> 00:45:28,720
this data.json that contains the data

00:45:25,920 --> 00:45:31,839
for this flower mini page

00:45:28,720 --> 00:45:35,200
is going to be on my cdn so now

00:45:31,839 --> 00:45:37,359
if i if i browse around the entire app

00:45:35,200 --> 00:45:39,440
i'm only requesting those datas right

00:45:37,359 --> 00:45:42,160
i'm not requesting

00:45:39,440 --> 00:45:42,480
um i'm not requesting to the api at all

00:45:42,160 --> 00:45:44,480
so

00:45:42,480 --> 00:45:46,160
all this is all these requests are going

00:45:44,480 --> 00:45:47,839
straight to my cdn

00:45:46,160 --> 00:45:49,680
which is extremely powerful if you think

00:45:47,839 --> 00:45:50,560
about that look at all these calls i've

00:45:49,680 --> 00:45:52,560
now saved

00:45:50,560 --> 00:45:53,680
from from my server film so this is this

00:45:52,560 --> 00:45:54,960
is fantastic

00:45:53,680 --> 00:45:57,359
i should have done the harmonica you're

00:45:54,960 --> 00:46:00,240
right okay so this is

00:45:57,359 --> 00:46:00,800
um this is how you cache these data

00:46:00,240 --> 00:46:02,880
calls

00:46:00,800 --> 00:46:04,640
for production this is one of the other

00:46:02,880 --> 00:46:06,079
crazy performance improvements

00:46:04,640 --> 00:46:08,079
um i kind of want to take a second and

00:46:06,079 --> 00:46:09,119
show you an another crazy performance

00:46:08,079 --> 00:46:11,200
improvement

00:46:09,119 --> 00:46:13,280
that we released just this week so let

00:46:11,200 --> 00:46:16,560
me do skully

00:46:13,280 --> 00:46:18,480
plug-in critical let's just pull the

00:46:16,560 --> 00:46:21,119
critical css plug-in okay

00:46:18,480 --> 00:46:21,920
so you can add this very very simple to

00:46:21,119 --> 00:46:26,000
add this

00:46:21,920 --> 00:46:26,800
um you can just import the critical css

00:46:26,000 --> 00:46:30,480
plug-in

00:46:26,800 --> 00:46:31,839
and um like it's

00:46:30,480 --> 00:46:33,520
stupid what's going to happen this

00:46:31,839 --> 00:46:34,720
critical css is based on a tool built by

00:46:33,520 --> 00:46:37,200
addie osmani

00:46:34,720 --> 00:46:39,760
that will scan all of your css and it

00:46:37,200 --> 00:46:42,400
will only keep the css for your page

00:46:39,760 --> 00:46:43,200
that's needed for just the pre-rendered

00:46:42,400 --> 00:46:45,520
route

00:46:43,200 --> 00:46:46,480
okay so what this thing what this is

00:46:45,520 --> 00:46:48,240
going to do

00:46:46,480 --> 00:46:49,839
imagine all the css your site needs

00:46:48,240 --> 00:46:51,440
imagine you got bootstrap and you got

00:46:49,839 --> 00:46:53,520
everything that that comes with that you

00:46:51,440 --> 00:46:55,599
maybe got angular material and all the

00:46:53,520 --> 00:46:57,520
all the css rules that come with that

00:46:55,599 --> 00:46:58,960
imagine if you only needed to load just

00:46:57,520 --> 00:47:01,119
the pieces of css

00:46:58,960 --> 00:47:02,960
for the home page in order for the user

00:47:01,119 --> 00:47:03,760
to see it and then all the rest of that

00:47:02,960 --> 00:47:06,400
css

00:47:03,760 --> 00:47:08,079
could get loaded later with your

00:47:06,400 --> 00:47:10,240
javascript

00:47:08,079 --> 00:47:11,119
that is what this plugin enables it

00:47:10,240 --> 00:47:13,839
allows your f

00:47:11,119 --> 00:47:14,400
your site to be stupid fast so instead

00:47:13,839 --> 00:47:16,560
of

00:47:14,400 --> 00:47:18,640
instead of downloading you know 90

00:47:16,560 --> 00:47:21,599
kilobytes of

00:47:18,640 --> 00:47:22,839
90 kilobytes of of css you're

00:47:21,599 --> 00:47:25,760
downloading

00:47:22,839 --> 00:47:27,760
um just the bare minimum

00:47:25,760 --> 00:47:29,359
that you need and there's a lot of

00:47:27,760 --> 00:47:30,960
plug-ins like this out there

00:47:29,359 --> 00:47:33,440
like all of our clients that are using

00:47:30,960 --> 00:47:34,800
this we just sent them an email said hey

00:47:33,440 --> 00:47:37,440
we have this new plugin it's going to

00:47:34,800 --> 00:47:39,680
make your stuff even faster

00:47:37,440 --> 00:47:40,880
you're just going to import it like this

00:47:39,680 --> 00:47:41,359
and then you're going to add it to your

00:47:40,880 --> 00:47:44,800
default

00:47:41,359 --> 00:47:46,480
post renders and you're done

00:47:44,800 --> 00:47:48,400
and it just works and so everyone went

00:47:46,480 --> 00:47:49,839
and added it and now they're even faster

00:47:48,400 --> 00:47:51,200
than they were last week so this was a

00:47:49,839 --> 00:47:53,119
massive improvement

00:47:51,200 --> 00:47:54,880
there's a massive improvement for free

00:47:53,119 --> 00:47:59,040
you just get it you got it it's done

00:47:54,880 --> 00:47:59,800
anyway so um yeah their css is 500

00:47:59,040 --> 00:48:03,520
kilobytes

00:47:59,800 --> 00:48:05,119
holy that's insane

00:48:03,520 --> 00:48:07,440
imagine if you could do this though on

00:48:05,119 --> 00:48:08,480
them olu imagine if you just had this

00:48:07,440 --> 00:48:10,720
you like dude

00:48:08,480 --> 00:48:12,000
done to see the page we're gonna

00:48:10,720 --> 00:48:14,160
pre-render it and we're gonna only load

00:48:12,000 --> 00:48:15,920
the css how much faster did that get

00:48:14,160 --> 00:48:18,400
i don't even wanna know how big their

00:48:15,920 --> 00:48:20,000
javascript file is if their css is 500k

00:48:18,400 --> 00:48:22,000
don't even tell me how big the

00:48:20,000 --> 00:48:24,720
javascript bundle is anyway okay

00:48:22,000 --> 00:48:25,280
so there's the plugin system um i kind

00:48:24,720 --> 00:48:26,400
of want

00:48:25,280 --> 00:48:28,240
there's there's so much more to talk

00:48:26,400 --> 00:48:29,280
about i i really can do a half day

00:48:28,240 --> 00:48:30,559
training on all this because there's so

00:48:29,280 --> 00:48:32,240
much to cover

00:48:30,559 --> 00:48:34,000
to get the basics and most of the

00:48:32,240 --> 00:48:36,079
benefit you you just got

00:48:34,000 --> 00:48:37,599
most of the benefit in this thing i i

00:48:36,079 --> 00:48:39,920
just showed you 90

00:48:37,599 --> 00:48:41,200
of the way is just by installing skully

00:48:39,920 --> 00:48:42,720
teaching you to find your routes that

00:48:41,200 --> 00:48:44,319
got you most of the way there

00:48:42,720 --> 00:48:46,079
you can add transfer state on top you

00:48:44,319 --> 00:48:47,680
can do a bunch of other plugins on top

00:48:46,079 --> 00:48:49,280
to make it even better and a lot of our

00:48:47,680 --> 00:48:50,720
clients are doing some really really

00:48:49,280 --> 00:48:52,640
cool things to make it better

00:48:50,720 --> 00:48:53,760
um we've added we've got an a b testing

00:48:52,640 --> 00:48:55,119
piece that's getting added

00:48:53,760 --> 00:48:56,480
but i do want to take you over to the

00:48:55,119 --> 00:48:57,839
doc site because i do want everyone to

00:48:56,480 --> 00:49:00,160
kind of meet the docs

00:48:57,839 --> 00:49:02,079
and find out how they use them so if you

00:49:00,160 --> 00:49:03,760
come over to the docs

00:49:02,079 --> 00:49:07,680
if anyone wants to see what i18n looks

00:49:03,760 --> 00:49:10,240
like in scully we've got a 19mp plugin

00:49:07,680 --> 00:49:12,640
and it worked last week does not work

00:49:10,240 --> 00:49:16,000
today

00:49:12,640 --> 00:49:17,280
awesome that's so cool anyway i'm gonna

00:49:16,000 --> 00:49:20,599
put a bug in

00:49:17,280 --> 00:49:24,880
if anyone finds an issue just go to

00:49:20,599 --> 00:49:26,079
scolioio uh scully on twitter or on

00:49:24,880 --> 00:49:27,359
github

00:49:26,079 --> 00:49:30,000
and i'm just gonna make an issue real

00:49:27,359 --> 00:49:31,599
quick this is how you do it

00:49:30,000 --> 00:49:33,280
if you have any issues do exactly what

00:49:31,599 --> 00:49:34,559
i'm doing right now okay i have a docs

00:49:33,280 --> 00:49:39,920
issue

00:49:34,559 --> 00:49:39,920
um spanish

00:49:40,720 --> 00:49:45,440
tab doesn't switch to spanish

00:49:44,079 --> 00:49:46,640
anymore i'm not going to film the

00:49:45,440 --> 00:49:48,319
details because i just i'm trying to

00:49:46,640 --> 00:49:50,400
make it quick so you guys can see

00:49:48,319 --> 00:49:52,000
just do this and our team will look at

00:49:50,400 --> 00:49:53,520
it and get it curated and fixed

00:49:52,000 --> 00:49:55,280
anyway so you come over here and you're

00:49:53,520 --> 00:49:55,920
like hey how do i get started well we

00:49:55,280 --> 00:49:57,440
got a whole

00:49:55,920 --> 00:49:59,280
we got a whole series of stuff to kind

00:49:57,440 --> 00:50:01,200
of walk you through getting started

00:49:59,280 --> 00:50:03,200
installing building serving minimal

00:50:01,200 --> 00:50:04,880
setup required and some tips that we

00:50:03,200 --> 00:50:07,200
think you might want to know okay

00:50:04,880 --> 00:50:09,040
we've got some of the concepts around

00:50:07,200 --> 00:50:10,880
scully

00:50:09,040 --> 00:50:12,640
what is the process what are handled

00:50:10,880 --> 00:50:13,760
routes on what is a plug-in

00:50:12,640 --> 00:50:15,680
so we kind of walk you through this

00:50:13,760 --> 00:50:16,800
plug-in system and then we've got a

00:50:15,680 --> 00:50:18,480
reference guide so any

00:50:16,800 --> 00:50:20,000
any of the moving pieces of scully have

00:50:18,480 --> 00:50:21,520
a reference in here so

00:50:20,000 --> 00:50:23,359
if you if you want to know about like

00:50:21,520 --> 00:50:25,440
the scully con this transfer state

00:50:23,359 --> 00:50:27,920
service

00:50:25,440 --> 00:50:29,440
the uh ironically the used transfer

00:50:27,920 --> 00:50:31,440
state we didn't even document that yet

00:50:29,440 --> 00:50:32,559
but yeah it's here so

00:50:31,440 --> 00:50:34,480
but this is where you come to get all

00:50:32,559 --> 00:50:36,720
the documents anyway so much stuff

00:50:34,480 --> 00:50:37,920
creating a blog is one command like if

00:50:36,720 --> 00:50:38,960
you wanna if you wanna come to the very

00:50:37,920 --> 00:50:41,280
top up here

00:50:38,960 --> 00:50:42,559
concepts learn you want to create a blog

00:50:41,280 --> 00:50:43,920
just click on the create a blog and it's

00:50:42,559 --> 00:50:44,800
going to walk you through it like it's

00:50:43,920 --> 00:50:47,280
just

00:50:44,800 --> 00:50:48,960
you use the schematics you've got a blog

00:50:47,280 --> 00:50:50,160
you got some markdown stuff and then you

00:50:48,960 --> 00:50:50,960
can just start writing your blog with

00:50:50,160 --> 00:50:53,119
markdowns

00:50:50,960 --> 00:50:55,200
and you've got a blog at that point that

00:50:53,119 --> 00:50:57,119
you can build and style and serve

00:50:55,200 --> 00:50:58,480
all with angular and you can even remove

00:50:57,119 --> 00:50:59,200
angular so that it just serves up

00:50:58,480 --> 00:51:01,599
without any

00:50:59,200 --> 00:51:03,040
even involved it's just a static website

00:51:01,599 --> 00:51:04,720
there's there's a plug-in for that

00:51:03,040 --> 00:51:05,280
called disable angular it just removes

00:51:04,720 --> 00:51:07,599
angular

00:51:05,280 --> 00:51:09,119
like just takes it out of the page so

00:51:07,599 --> 00:51:11,119
that your site can just be a static

00:51:09,119 --> 00:51:12,000
website pre-rendered html with hrefs

00:51:11,119 --> 00:51:14,640
that just go

00:51:12,000 --> 00:51:16,000
from one page to the next it's pretty

00:51:14,640 --> 00:51:17,280
fantastic i'm not gonna lie there's a

00:51:16,000 --> 00:51:18,079
lot of really cool stuff you can do with

00:51:17,280 --> 00:51:21,119
these with this

00:51:18,079 --> 00:51:22,160
with this setup anyway i've talked for a

00:51:21,119 --> 00:51:24,000
long time

00:51:22,160 --> 00:51:25,280
there's a lot of questions brooke you

00:51:24,000 --> 00:51:25,760
cool if i start going through the q and

00:51:25,280 --> 00:51:28,160
a

00:51:25,760 --> 00:51:30,240
absolutely yeah go for it okay all right

00:51:28,160 --> 00:51:30,880
olu says what's the advantage to scully

00:51:30,240 --> 00:51:33,920
over in

00:51:30,880 --> 00:51:37,839
universal um there's lots but

00:51:33,920 --> 00:51:37,839
one of them is um

00:51:38,800 --> 00:51:42,240
universal is hard man we had one of our

00:51:40,800 --> 00:51:43,839
one of our biggest clients that's doing

00:51:42,240 --> 00:51:45,839
the most complex stuff

00:51:43,839 --> 00:51:48,000
for years they've they've been using

00:51:45,839 --> 00:51:51,520
universal in production

00:51:48,000 --> 00:51:53,200
and multiple times a month

00:51:51,520 --> 00:51:55,359
their website just breaks because one of

00:51:53,200 --> 00:51:57,280
their third-party libraries

00:51:55,359 --> 00:51:58,559
breaks their universal rendering so they

00:51:57,280 --> 00:52:00,000
have to go through and find what was the

00:51:58,559 --> 00:52:00,720
third-party library that broke it how do

00:52:00,000 --> 00:52:02,800
we fix it

00:52:00,720 --> 00:52:04,319
how do we refactor that so they're like

00:52:02,800 --> 00:52:06,079
dude we use skully because

00:52:04,319 --> 00:52:08,400
making universal still work keeping it

00:52:06,079 --> 00:52:10,640
working sucks and it is true

00:52:08,400 --> 00:52:13,119
it's not a task for a lot of heart like

00:52:10,640 --> 00:52:15,359
keeping universal

00:52:13,119 --> 00:52:16,640
like friendly to render node it's not

00:52:15,359 --> 00:52:19,119
it's not easy so

00:52:16,640 --> 00:52:20,880
it's really difficult um the advantage

00:52:19,119 --> 00:52:21,200
to universal is it's going to be faster

00:52:20,880 --> 00:52:23,680
but

00:52:21,200 --> 00:52:25,599
skully is for much other if you have an

00:52:23,680 --> 00:52:27,440
angular angularjs hybrid that will never

00:52:25,599 --> 00:52:29,280
work in universal and that works fine in

00:52:27,440 --> 00:52:31,280
skully

00:52:29,280 --> 00:52:33,599
another another reason to pre-render

00:52:31,280 --> 00:52:35,839
versus server-side render in production

00:52:33,599 --> 00:52:37,280
is server-side rendering production you

00:52:35,839 --> 00:52:37,920
now have a node server in production and

00:52:37,280 --> 00:52:39,920
you have to like

00:52:37,920 --> 00:52:41,520
scale those out make multiple of them

00:52:39,920 --> 00:52:43,119
just pre-render

00:52:41,520 --> 00:52:44,240
and then use javascript to render the

00:52:43,119 --> 00:52:45,599
pieces dynamically you want like

00:52:44,240 --> 00:52:47,200
pre-render most of the site and then

00:52:45,599 --> 00:52:48,960
maybe just turn on the pieces

00:52:47,200 --> 00:52:50,319
with angular when they either downloads

00:52:48,960 --> 00:52:51,839
and runs like

00:52:50,319 --> 00:52:53,760
there's there's there's a lot of reasons

00:52:51,839 --> 00:52:57,040
why people should use scully over it

00:52:53,760 --> 00:52:58,480
um a lot of what i just showed you you

00:52:57,040 --> 00:53:00,319
can do with angular universal

00:52:58,480 --> 00:53:01,520
but not this is not as easy as we just

00:53:00,319 --> 00:53:03,359
showed it

00:53:01,520 --> 00:53:04,559
and all the pieces that come pre-built

00:53:03,359 --> 00:53:06,720
into skully

00:53:04,559 --> 00:53:08,160
you you can do all this with in

00:53:06,720 --> 00:53:09,520
universal

00:53:08,160 --> 00:53:11,200
but you're going to invest hundreds of

00:53:09,520 --> 00:53:12,800
thousands of dollars maintaining it and

00:53:11,200 --> 00:53:15,599
building it just to get it to where

00:53:12,800 --> 00:53:16,000
skully's already at so like you can do

00:53:15,599 --> 00:53:17,920
it

00:53:16,000 --> 00:53:19,040
it's just so much more expensive to do

00:53:17,920 --> 00:53:22,480
on your own so

00:53:19,040 --> 00:53:24,240
and also pretty soon olu we're about to

00:53:22,480 --> 00:53:25,839
add a renderer that uses angular

00:53:24,240 --> 00:53:27,680
universal so you're about to have

00:53:25,839 --> 00:53:29,839
universal insulators like

00:53:27,680 --> 00:53:31,680
the the question becomes less of skully

00:53:29,839 --> 00:53:34,160
versus universal

00:53:31,680 --> 00:53:34,960
and it turns more into why would i use

00:53:34,160 --> 00:53:36,319
server side

00:53:34,960 --> 00:53:38,000
static site generation versus server

00:53:36,319 --> 00:53:40,079
side rendering just in time like

00:53:38,000 --> 00:53:42,319
so it becomes more of like a paradigm do

00:53:40,079 --> 00:53:44,240
i render it just in time

00:53:42,319 --> 00:53:45,760
or do i render do i pre-render and that

00:53:44,240 --> 00:53:47,599
becomes the conversation

00:53:45,760 --> 00:53:49,680
because we're about to add universal

00:53:47,599 --> 00:53:50,400
support so yeah it changes the questions

00:53:49,680 --> 00:53:52,240
all right

00:53:50,400 --> 00:53:53,680
next question you guys care if i stop

00:53:52,240 --> 00:53:55,040
sharing my screen

00:53:53,680 --> 00:53:57,440
i'll share it if i need to again all

00:53:55,040 --> 00:53:58,960
right uh next question

00:53:57,440 --> 00:54:00,400
thanks for watching president i have no

00:53:58,960 --> 00:54:01,359
experience with this perhaps i'm asking

00:54:00,400 --> 00:54:03,359
the wrong questions

00:54:01,359 --> 00:54:04,640
but how scrolling compares with

00:54:03,359 --> 00:54:06,079
universal okay cool

00:54:04,640 --> 00:54:07,680
i already kind of answered that so i'm

00:54:06,079 --> 00:54:11,280
just going to say answers live

00:54:07,680 --> 00:54:11,760
done um eris says do we need to

00:54:11,280 --> 00:54:13,200
implement

00:54:11,760 --> 00:54:15,119
all three pillars of angular no you

00:54:13,200 --> 00:54:18,000
don't have to do the caching

00:54:15,119 --> 00:54:18,720
you do have to do the pre-rendering and

00:54:18,000 --> 00:54:20,400
you

00:54:18,720 --> 00:54:22,640
should use the cdn you don't have to use

00:54:20,400 --> 00:54:24,319
the cdn as long as you serve the assets

00:54:22,640 --> 00:54:27,599
from wherever

00:54:24,319 --> 00:54:30,079
uh it's gonna be faster than it was but

00:54:27,599 --> 00:54:31,520
cdns are still stupid cheap uh if you're

00:54:30,079 --> 00:54:32,960
not using one we should do a phone call

00:54:31,520 --> 00:54:33,599
just so i can explain how cheap and easy

00:54:32,960 --> 00:54:36,319
they are to use

00:54:33,599 --> 00:54:36,960
like they're not hard to get into your

00:54:36,319 --> 00:54:38,319
system so

00:54:36,960 --> 00:54:40,559
you don't do all three pillars you don't

00:54:38,319 --> 00:54:42,000
have to cache the data calls

00:54:40,559 --> 00:54:43,440
but you do want to pre-render as much as

00:54:42,000 --> 00:54:44,240
you can and you are going to want to use

00:54:43,440 --> 00:54:46,000
cdn so

00:54:44,240 --> 00:54:47,680
feel free to reach out to me on twitter

00:54:46,000 --> 00:54:51,119
frost and we can talk about it

00:54:47,680 --> 00:54:54,720
good question all right done um

00:54:51,119 --> 00:54:57,280
next question do we have a cli

00:54:54,720 --> 00:54:58,319
command for nx project i think what

00:54:57,280 --> 00:55:00,880
you're asking

00:54:58,319 --> 00:55:02,480
quebec is does this work with nx and the

00:55:00,880 --> 00:55:03,920
answer is yes so if you have an nx

00:55:02,480 --> 00:55:06,160
workspace

00:55:03,920 --> 00:55:08,000
skully is the schematics are already set

00:55:06,160 --> 00:55:09,440
up to run inside of an nx workspace

00:55:08,000 --> 00:55:12,640
versus an angular workspace

00:55:09,440 --> 00:55:13,839
so already works good question if that's

00:55:12,640 --> 00:55:15,440
not what you're asking

00:55:13,839 --> 00:55:17,040
ask it a different way and maybe i'll

00:55:15,440 --> 00:55:20,240
get it the next time

00:55:17,040 --> 00:55:23,359
shy says so so using scala means not

00:55:20,240 --> 00:55:26,480
using a universal yeah for now

00:55:23,359 --> 00:55:28,880
that's what it means and um

00:55:26,480 --> 00:55:29,599
it will make your life easier i promise

00:55:28,880 --> 00:55:32,640
and

00:55:29,599 --> 00:55:36,160
uh it is

00:55:32,640 --> 00:55:36,160
cheaper more efficient

00:55:36,960 --> 00:55:40,400
easier in almost every way i can think

00:55:38,799 --> 00:55:43,440
of i promise if you

00:55:40,400 --> 00:55:45,200
don't believe me um

00:55:43,440 --> 00:55:47,119
let's just have a phone call may i could

00:55:45,200 --> 00:55:49,680
be convinced but i'm pretty sure

00:55:47,119 --> 00:55:51,920
i'm right on this one so um even talking

00:55:49,680 --> 00:55:53,599
with any unit team like

00:55:51,920 --> 00:55:55,359
it's it's it's pretty fantastic like

00:55:53,599 --> 00:55:56,319
there's a reason netlify is blowing up

00:55:55,359 --> 00:55:58,240
because of the jams like

00:55:56,319 --> 00:55:59,920
the jam's deck is legitimately insanely

00:55:58,240 --> 00:56:01,680
fast so anyway

00:55:59,920 --> 00:56:03,280
um if you want to talk to me shai again

00:56:01,680 --> 00:56:04,880
reach out to my twitter aaron frost and

00:56:03,280 --> 00:56:06,559
we can we can get a meeting

00:56:04,880 --> 00:56:07,920
or you can come to our anyone can come

00:56:06,559 --> 00:56:09,680
to our weekly office hours we have

00:56:07,920 --> 00:56:11,839
office hours every tuesday

00:56:09,680 --> 00:56:13,200
at noon my time so that's probably in

00:56:11,839 --> 00:56:14,880
the afternoon you guys this time

00:56:13,200 --> 00:56:17,280
noon is in one more hour for me just so

00:56:14,880 --> 00:56:19,599
you know it's 11 a.m right now my time

00:56:17,280 --> 00:56:21,040
so in one more hour we have office hours

00:56:19,599 --> 00:56:22,799
you can come ask your questions you'll

00:56:21,040 --> 00:56:24,319
have the whole core team there

00:56:22,799 --> 00:56:25,680
and we'll answer whatever you ask even

00:56:24,319 --> 00:56:26,720
if you want to jump on the presentation

00:56:25,680 --> 00:56:28,000
share your screen and have us

00:56:26,720 --> 00:56:29,760
troubleshoot for you

00:56:28,000 --> 00:56:31,359
we'll do it or you can just ask your

00:56:29,760 --> 00:56:32,880
questions and i'll go i'll go all the

00:56:31,359 --> 00:56:34,960
way deep with you i'll go as deep as you

00:56:32,880 --> 00:56:37,359
want to go i will answer okay

00:56:34,960 --> 00:56:38,880
all right um is there an incremental

00:56:37,359 --> 00:56:40,400
build system functionality

00:56:38,880 --> 00:56:41,920
let's say i have 10 000 products and i

00:56:40,400 --> 00:56:43,839
had 10 new ones that i have to rebuild

00:56:41,920 --> 00:56:44,720
all 10 000 and 10 pages or can i just

00:56:43,839 --> 00:56:46,240
build a tenure

00:56:44,720 --> 00:56:47,839
this is a good question we're building

00:56:46,240 --> 00:56:49,920
this this is gonna be part of the

00:56:47,839 --> 00:56:51,839
enterprise functionality for scully

00:56:49,920 --> 00:56:53,359
is the incremental build system so it's

00:56:51,839 --> 00:56:54,720
on its way it's coming very soon

00:56:53,359 --> 00:56:57,040
if you have a website with ten thousand

00:56:54,720 --> 00:56:58,480
products we almost have a solution for

00:56:57,040 --> 00:56:59,839
you so that you only rebuild the pieces

00:56:58,480 --> 00:57:02,480
that need to be rebuilt

00:56:59,839 --> 00:57:04,319
so yes it's on its way sorry i should

00:57:02,480 --> 00:57:06,720
have clicked answer live done

00:57:04,319 --> 00:57:08,079
all right next question if the user

00:57:06,720 --> 00:57:09,599
starts scrolling and clicking in the

00:57:08,079 --> 00:57:10,720
pre-rendered app and then the angular

00:57:09,599 --> 00:57:12,160
app is bootstrapped

00:57:10,720 --> 00:57:13,920
is the page going to be reloaded and

00:57:12,160 --> 00:57:16,079
lose all of its actions done by the user

00:57:13,920 --> 00:57:17,599
so i want you to imagine the

00:57:16,079 --> 00:57:19,680
pre-rendered size is

00:57:17,599 --> 00:57:21,359
10 000 pixels tall right so i want you

00:57:19,680 --> 00:57:24,559
to imagine that

00:57:21,359 --> 00:57:24,880
and when the angular app pre-renders or

00:57:24,559 --> 00:57:28,559
when

00:57:24,880 --> 00:57:31,599
when angular turns on it renders a 10

00:57:28,559 --> 00:57:32,160
000 long thing the second angular

00:57:31,599 --> 00:57:35,359
renders

00:57:32,160 --> 00:57:37,440
its 10 000 long thing it deletes the

00:57:35,359 --> 00:57:39,119
other one so in the same flash

00:57:37,440 --> 00:57:41,280
the page is going to get rid of the

00:57:39,119 --> 00:57:43,280
pre-rendered 10 000 pixels long thing

00:57:41,280 --> 00:57:45,599
and put in the angular 10 000 pixelmon

00:57:43,280 --> 00:57:46,319
thing so if the user scrolled halfway

00:57:45,599 --> 00:57:47,760
down

00:57:46,319 --> 00:57:49,359
they're going to stay scrolled halfway

00:57:47,760 --> 00:57:52,480
down all right

00:57:49,359 --> 00:57:54,079
now if your website it's not 10 000

00:57:52,480 --> 00:57:55,520
pixels tall

00:57:54,079 --> 00:57:57,200
because it has to get some data and then

00:57:55,520 --> 00:57:58,240
the data comes back and then it's 10 000

00:57:57,200 --> 00:57:59,680
pixels tall

00:57:58,240 --> 00:58:02,240
the user is going to experience like

00:57:59,680 --> 00:58:04,559
this

00:58:02,240 --> 00:58:06,079
when when the pre-render goes away and

00:58:04,559 --> 00:58:07,680
the angular turns on

00:58:06,079 --> 00:58:10,559
and we have some tools to make that jing

00:58:07,680 --> 00:58:11,119
go away that jake we call a flash by the

00:58:10,559 --> 00:58:12,720
way

00:58:11,119 --> 00:58:14,319
and we have a plug-in called the flash

00:58:12,720 --> 00:58:14,799
prevention plug-in for websites that

00:58:14,319 --> 00:58:17,839
have

00:58:14,799 --> 00:58:19,920
a big pause between when angular turns

00:58:17,839 --> 00:58:21,119
on and the content is rendered

00:58:19,920 --> 00:58:23,359
you shouldn't have that by the way it

00:58:21,119 --> 00:58:24,000
should be your goal to not have a pause

00:58:23,359 --> 00:58:26,240
like that

00:58:24,000 --> 00:58:27,760
but if you have that flash we have a

00:58:26,240 --> 00:58:30,400
flash prevention plug-in

00:58:27,760 --> 00:58:32,319
in fact 100 contacts remember that

00:58:30,400 --> 00:58:35,520
side-by-side i showed you

00:58:32,319 --> 00:58:36,640
they have i'm not

00:58:35,520 --> 00:58:38,720
i don't think i'm gonna offend them by

00:58:36,640 --> 00:58:41,280
saying this they have a disgusting flash

00:58:38,720 --> 00:58:43,839
their flash is

00:58:41,280 --> 00:58:44,480
not okay it's it's so big it's not a

00:58:43,839 --> 00:58:46,720
it's

00:58:44,480 --> 00:58:48,720
inappropriately large but you couldn't

00:58:46,720 --> 00:58:50,000
even see it because we use the flash

00:58:48,720 --> 00:58:52,000
frozen plug-in and it just works

00:58:50,000 --> 00:58:54,240
so we have ways to help you if that's

00:58:52,000 --> 00:58:55,440
you so yeah and if you want to come into

00:58:54,240 --> 00:58:56,799
office hours and talk about it i'll

00:58:55,440 --> 00:58:58,079
explain it in more detail

00:58:56,799 --> 00:58:59,920
because i'm interested in making sure

00:58:58,079 --> 00:59:03,119
you're successful all right

00:58:59,920 --> 00:59:04,480
next question um don alex says

00:59:03,119 --> 00:59:06,000
in doing forms what happens when the

00:59:04,480 --> 00:59:07,920
user is midway through accomplishing

00:59:06,000 --> 00:59:10,559
inputs and the text boxes

00:59:07,920 --> 00:59:12,079
and then the prerender goes away okay so

00:59:10,559 --> 00:59:14,480
this is something that we haven't solved

00:59:12,079 --> 00:59:18,000
for everybody but like you 100 contacts

00:59:14,480 --> 00:59:19,599
we built a post renderer plug-in that

00:59:18,000 --> 00:59:21,359
it tracks what you type in any of the

00:59:19,599 --> 00:59:24,319
inputs

00:59:21,359 --> 00:59:26,400
and as soon as the angular app turns on

00:59:24,319 --> 00:59:29,119
it takes what you typed

00:59:26,400 --> 00:59:30,720
and it puts it into the angular inputs

00:59:29,119 --> 00:59:32,799
so the user is an experience the jig

00:59:30,720 --> 00:59:34,160
that you're talking about alex

00:59:32,799 --> 00:59:36,559
if you don't do that kind of a post

00:59:34,160 --> 00:59:36,880
renderer they're gonna they're gonna be

00:59:36,559 --> 00:59:40,000
like

00:59:36,880 --> 00:59:41,680
halfway typing a l e x and then angular

00:59:40,000 --> 00:59:42,240
turns on and it deletes alex they're oh

00:59:41,680 --> 00:59:43,599
man

00:59:42,240 --> 00:59:45,520
that was my name i gotta start over what

00:59:43,599 --> 00:59:47,359
just happened this website's dumb like i

00:59:45,520 --> 00:59:49,440
started to type in their name over here

00:59:47,359 --> 00:59:51,200
we wrote a plugin that just anytime they

00:59:49,440 --> 00:59:52,480
type in there it puts into local storage

00:59:51,200 --> 00:59:53,920
and then when the angular app turns on

00:59:52,480 --> 00:59:54,960
it takes out local storage and puts it

00:59:53,920 --> 00:59:56,400
in there so like

00:59:54,960 --> 00:59:58,160
we've tried to solve some of this stuff

00:59:56,400 --> 00:59:59,599
so that it's seamless for the users

00:59:58,160 --> 01:00:01,920
but there is there is a bit of

00:59:59,599 --> 01:00:03,520
creativity it's not it's actually

01:00:01,920 --> 01:00:04,960
if i showed you the plugin you'd be like

01:00:03,520 --> 01:00:06,240
oh that was easier than i thought was

01:00:04,960 --> 01:00:09,680
going to be

01:00:06,240 --> 01:00:11,680
yeah way easier um once you start

01:00:09,680 --> 01:00:14,640
thinking in a jam stack pre-ordered way

01:00:11,680 --> 01:00:15,599
you're you start to realize oh this is

01:00:14,640 --> 01:00:17,359
all just

01:00:15,599 --> 01:00:19,359
stupid easy these are just simple

01:00:17,359 --> 01:00:20,640
functions i have to write yeah

01:00:19,359 --> 01:00:23,280
they really are they're just simple

01:00:20,640 --> 01:00:26,319
functions and so um

01:00:23,280 --> 01:00:29,200
so yeah um we have that kind of support

01:00:26,319 --> 01:00:30,160
if you need it alex so yeah and if you

01:00:29,200 --> 01:00:31,359
want to talk about it come to office

01:00:30,160 --> 01:00:33,760
hours i'll talk to you about it

01:00:31,359 --> 01:00:35,680
aaron says can surely work with local

01:00:33,760 --> 01:00:36,960
files like markdown as the back end

01:00:35,680 --> 01:00:40,079
instead of any recipient

01:00:36,960 --> 01:00:41,520
yeah easy you can and you you can write

01:00:40,079 --> 01:00:43,520
your own plugin

01:00:41,520 --> 01:00:45,760
to get data however you want it you want

01:00:43,520 --> 01:00:48,240
to get it out of wordpress

01:00:45,760 --> 01:00:49,839
turn on the wordpress json api and use

01:00:48,240 --> 01:00:52,240
the json button but if you want to read

01:00:49,839 --> 01:00:53,520
it out of some flat file xml yaml thing

01:00:52,240 --> 01:00:55,040
and you want to transform it with

01:00:53,520 --> 01:00:56,880
whatever transform you want

01:00:55,040 --> 01:00:58,480
yeah skully doesn't care you just just

01:00:56,880 --> 01:01:00,079
build a plugin that reads it out of the

01:00:58,480 --> 01:01:02,240
markdown or reads it from the markdown

01:01:00,079 --> 01:01:04,000
if you want to do a blog with markdowns

01:01:02,240 --> 01:01:05,839
that's actually just built in

01:01:04,000 --> 01:01:07,440
and if you come if you if you go back to

01:01:05,839 --> 01:01:08,319
the doc site and click on that create a

01:01:07,440 --> 01:01:11,119
blog

01:01:08,319 --> 01:01:12,880
you can kind of see what the markdown

01:01:11,119 --> 01:01:13,520
scenario is and how it works with skulls

01:01:12,880 --> 01:01:17,040
so

01:01:13,520 --> 01:01:20,000
you can definitely use anything you want

01:01:17,040 --> 01:01:22,720
as an api whether it's a file system an

01:01:20,000 --> 01:01:22,720
actual api

01:01:23,040 --> 01:01:27,119
whatever you want to do right um so yes

01:01:26,240 --> 01:01:30,559
you can do that

01:01:27,119 --> 01:01:31,599
shy does skully serve files using known

01:01:30,559 --> 01:01:35,119
express as well

01:01:31,599 --> 01:01:37,200
um it does not

01:01:35,119 --> 01:01:39,280
i think you're asking in production and

01:01:37,200 --> 01:01:41,119
there is no

01:01:39,280 --> 01:01:43,520
server-side component of scully in

01:01:41,119 --> 01:01:46,319
production so skully does not

01:01:43,520 --> 01:01:48,079
run a node express in production no it

01:01:46,319 --> 01:01:50,480
does during build time

01:01:48,079 --> 01:01:51,760
but not during like after you ship out

01:01:50,480 --> 01:01:55,760
all the pre-rendered stuff

01:01:51,760 --> 01:01:57,839
there's no skully server-side component

01:01:55,760 --> 01:01:59,920
yet we're gonna add one for enterprise

01:01:57,839 --> 01:02:03,440
but there's not gonna be one

01:01:59,920 --> 01:02:06,160
for like projects um

01:02:03,440 --> 01:02:07,760
so yeah anyway yet stay tuned for more

01:02:06,160 --> 01:02:09,440
news that may change but as of right now

01:02:07,760 --> 01:02:11,680
there's no skully note express like

01:02:09,440 --> 01:02:15,200
thing in production all right

01:02:11,680 --> 01:02:17,680
um olu says

01:02:15,200 --> 01:02:19,280
what is the idea of using scrolling with

01:02:17,680 --> 01:02:20,079
angular apps where everything is behind

01:02:19,280 --> 01:02:22,000
the authentication

01:02:20,079 --> 01:02:23,440
system this is a great question if

01:02:22,000 --> 01:02:25,359
you're trying to pre-render an app

01:02:23,440 --> 01:02:27,039
that's behind a login

01:02:25,359 --> 01:02:30,480
it's just not as helpful i'm not gonna

01:02:27,039 --> 01:02:30,480
lie um

01:02:30,559 --> 01:02:33,760
this is more helpful if you have a

01:02:32,400 --> 01:02:34,720
product site like someone asked a

01:02:33,760 --> 01:02:35,359
question what about ten thousand

01:02:34,720 --> 01:02:37,440
problems

01:02:35,359 --> 01:02:38,559
any site that you care about if you have

01:02:37,440 --> 01:02:40,480
something that's behind a login you

01:02:38,559 --> 01:02:41,599
don't really care about seo like seo is

01:02:40,480 --> 01:02:42,720
not your bag that's not how you're

01:02:41,599 --> 01:02:44,000
getting clients you're getting clients

01:02:42,720 --> 01:02:46,480
through a different avenue

01:02:44,000 --> 01:02:48,319
if if there's a hard wall of a login

01:02:46,480 --> 01:02:50,799
screen before they can do anything

01:02:48,319 --> 01:02:51,839
seo is not how you get clients if you

01:02:50,799 --> 01:02:54,640
have a site that cares

01:02:51,839 --> 01:02:55,839
deeply on seo i don't care why but it

01:02:54,640 --> 01:02:57,599
depends on seo

01:02:55,839 --> 01:02:59,599
and you're doing anything for that then

01:02:57,599 --> 01:03:00,960
you need scholarly today like you needed

01:02:59,599 --> 01:03:02,640
it last week you needed it

01:03:00,960 --> 01:03:04,319
when it was an alpha in december is when

01:03:02,640 --> 01:03:05,920
you needed it because the amount of

01:03:04,319 --> 01:03:07,920
financial gain you're going to get just

01:03:05,920 --> 01:03:11,200
by flipping is going on is insane

01:03:07,920 --> 01:03:11,920
it's insane 100 contacts like it blew us

01:03:11,200 --> 01:03:13,359
all away

01:03:11,920 --> 01:03:16,000
i knew it'd help i didn't know how much

01:03:13,359 --> 01:03:19,039
it would happen so like just um

01:03:16,000 --> 01:03:20,559
the answer is if it's behind a login no

01:03:19,039 --> 01:03:21,200
but if you're not being a login and you

01:03:20,559 --> 01:03:23,920
care about

01:03:21,200 --> 01:03:24,880
this stuff you need to be on skully like

01:03:23,920 --> 01:03:26,720
today

01:03:24,880 --> 01:03:29,119
all right next question let's skip down

01:03:26,720 --> 01:03:30,079
to aj because a lot of the questions are

01:03:29,119 --> 01:03:32,079
just the same two

01:03:30,079 --> 01:03:33,599
people which is awesome i totally

01:03:32,079 --> 01:03:37,440
appreciate it but let's get someone

01:03:33,599 --> 01:03:40,160
else as well okay so is there an example

01:03:37,440 --> 01:03:43,280
of using like a cms like contentful or

01:03:40,160 --> 01:03:45,680
ghost um yeah i think

01:03:43,280 --> 01:03:47,920
we have a couple users in the community

01:03:45,680 --> 01:03:49,920
let me share my screen

01:03:47,920 --> 01:03:51,680
i don't have one on my machine where is

01:03:49,920 --> 01:03:54,880
this thing share my screen

01:03:51,680 --> 01:03:56,640
um we'll share here okay um

01:03:54,880 --> 01:03:58,880
if you really want to get help and find

01:03:56,640 --> 01:04:00,000
out hey who has an example of ghost or

01:03:58,880 --> 01:04:03,119
contentful

01:04:00,000 --> 01:04:03,760
i would come to the getter uh skully has

01:04:03,119 --> 01:04:05,599
a getter

01:04:03,760 --> 01:04:07,520
chat so if you want to come on to get

01:04:05,599 --> 01:04:09,520
her um

01:04:07,520 --> 01:04:11,119
a lot of people on here are like power

01:04:09,520 --> 01:04:12,400
users in skully there's a lot of people

01:04:11,119 --> 01:04:14,720
a lot of these people have committed

01:04:12,400 --> 01:04:16,079
pull requests search to the docs

01:04:14,720 --> 01:04:18,480
a lot of people come in for help and

01:04:16,079 --> 01:04:20,160
then they end up staying

01:04:18,480 --> 01:04:22,000
they end up staying and helping others

01:04:20,160 --> 01:04:23,760
so come into the getter there's also the

01:04:22,000 --> 01:04:24,960
new discord the angular discord so if

01:04:23,760 --> 01:04:28,400
you want to if you want to join the

01:04:24,960 --> 01:04:31,119
angular discord it's just discord

01:04:28,400 --> 01:04:31,839
discord dot gg slash angular if you go

01:04:31,119 --> 01:04:33,359
in there

01:04:31,839 --> 01:04:34,960
there's tons of channels for things like

01:04:33,359 --> 01:04:36,480
podcasts meetups whatever

01:04:34,960 --> 01:04:37,599
there's also a skully channel and you

01:04:36,480 --> 01:04:38,799
can go in there and there's tons of

01:04:37,599 --> 01:04:40,240
people in there that will answer your

01:04:38,799 --> 01:04:42,160
skully questions okay

01:04:40,240 --> 01:04:43,760
that's that's over on the angular

01:04:42,160 --> 01:04:45,440
discord which everyone should be joining

01:04:43,760 --> 01:04:47,039
it's a really fantastic place to meet

01:04:45,440 --> 01:04:50,240
other angular developers and

01:04:47,039 --> 01:04:51,920
um to get help or to help or to actually

01:04:50,240 --> 01:04:54,240
it's fantastic for just lurking and

01:04:51,920 --> 01:04:55,039
watching and learning as well so so yeah

01:04:54,240 --> 01:04:56,960
head over there

01:04:55,039 --> 01:04:58,160
but you can also use the getter also you

01:04:56,960 --> 01:05:01,200
come to office hours

01:04:58,160 --> 01:05:03,839
but um i don't have anything like off my

01:05:01,200 --> 01:05:04,480
uh we have some wordpress examples

01:05:03,839 --> 01:05:07,839
someone

01:05:04,480 --> 01:05:09,760
the guys that the team at

01:05:07,839 --> 01:05:12,640
interact upstate interactive they built

01:05:09,760 --> 01:05:17,520
a wordpress if i say scully

01:05:12,640 --> 01:05:17,520
plugin wordpress

01:05:18,000 --> 01:05:23,680
um skully wordpress plugin i think this

01:05:22,240 --> 01:05:25,599
is theirs

01:05:23,680 --> 01:05:27,440
built by upc yeah yeah well no this is

01:05:25,599 --> 01:05:28,799
someone else but this is how you could

01:05:27,440 --> 01:05:30,000
kind of start using

01:05:28,799 --> 01:05:31,880
you could use this plugin or you could

01:05:30,000 --> 01:05:33,839
write your own because honestly it looks

01:05:31,880 --> 01:05:35,200
ridiculously simple

01:05:33,839 --> 01:05:37,200
you can start using your own to kind of

01:05:35,200 --> 01:05:38,799
tap into wordpress or i'm sure there's

01:05:37,200 --> 01:05:40,480
some contentful skully stuff or some

01:05:38,799 --> 01:05:41,440
ghost stuff so anyway

01:05:40,480 --> 01:05:42,480
i would just kind of look around the

01:05:41,440 --> 01:05:43,839
poke around to see what other people are

01:05:42,480 --> 01:05:46,880
doing but but yeah so

01:05:43,839 --> 01:05:48,400
anyway do you do a lot of uh lurking

01:05:46,880 --> 01:05:51,520
yourself

01:05:48,400 --> 01:05:53,440
i lurk yeah hello awesome

01:05:51,520 --> 01:05:54,559
sometimes i don't have anything to say i

01:05:53,440 --> 01:05:55,359
just want to make sure everyone's safe

01:05:54,559 --> 01:05:58,799
and having fun

01:05:55,359 --> 01:06:03,039
that's true that's a good point yeah

01:05:58,799 --> 01:06:04,960
uh i'm down to just shy and olu so

01:06:03,039 --> 01:06:06,240
lou this one is a question skully is

01:06:04,960 --> 01:06:07,200
free for how long school is going to be

01:06:06,240 --> 01:06:11,280
free forever like

01:06:07,200 --> 01:06:12,640
skully's never going to cost anything um

01:06:11,280 --> 01:06:15,839
there's there's a couple features that

01:06:12,640 --> 01:06:17,200
are like for power users

01:06:15,839 --> 01:06:18,480
that we are going to put into an

01:06:17,200 --> 01:06:20,079
enterprise package called skull

01:06:18,480 --> 01:06:22,640
enterprise

01:06:20,079 --> 01:06:23,839
but scully will be free all the

01:06:22,640 --> 01:06:27,039
everything i showed today and

01:06:23,839 --> 01:06:28,799
tons more will end like tons more

01:06:27,039 --> 01:06:30,400
will always be free it will always be

01:06:28,799 --> 01:06:31,599
open source and even the enterprise will

01:06:30,400 --> 01:06:34,720
be open source

01:06:31,599 --> 01:06:36,160
um but there will be a license required

01:06:34,720 --> 01:06:36,640
to use it but yeah like everything will

01:06:36,160 --> 01:06:39,440
be there

01:06:36,640 --> 01:06:40,240
so so yeah like we're going to be free

01:06:39,440 --> 01:06:41,760
for forever oh

01:06:40,240 --> 01:06:43,119
like if you're wondering hey am i are we

01:06:41,760 --> 01:06:45,119
going to flip this to be paid only in a

01:06:43,119 --> 01:06:47,039
few years no this will be free forever

01:06:45,119 --> 01:06:48,400
so and let me tell you let me give you a

01:06:47,039 --> 01:06:50,559
guarantee on that

01:06:48,400 --> 01:06:51,680
the initial version of this google paid

01:06:50,559 --> 01:06:54,160
us to build google

01:06:51,680 --> 01:06:55,520
paid us to build it okay and they said

01:06:54,160 --> 01:06:57,680
it needs to be

01:06:55,520 --> 01:06:59,599
free and open source so like we're

01:06:57,680 --> 01:07:00,160
contractually obligated to make this

01:06:59,599 --> 01:07:02,400
free

01:07:00,160 --> 01:07:04,559
for forever because of where we started

01:07:02,400 --> 01:07:06,880
we started with google as as

01:07:04,559 --> 01:07:08,319
like they they said hey build this and

01:07:06,880 --> 01:07:11,920
they paid us to do it so

01:07:08,319 --> 01:07:14,720
we can't make it pay only ever ever

01:07:11,920 --> 01:07:16,000
and our feeling i i do a lot of stuff

01:07:14,720 --> 01:07:17,680
for the community for free like i really

01:07:16,000 --> 01:07:18,960
really want to give as most of it away

01:07:17,680 --> 01:07:20,079
as i can for free

01:07:18,960 --> 01:07:22,400
but there's some features that are going

01:07:20,079 --> 01:07:23,280
to cost me a lot of money to build and

01:07:22,400 --> 01:07:26,319
maintain

01:07:23,280 --> 01:07:27,680
like like months and those ones

01:07:26,319 --> 01:07:30,319
are for the biggest companies in the

01:07:27,680 --> 01:07:31,680
world so those ones we are going to

01:07:30,319 --> 01:07:33,599
we are going to have enterprise features

01:07:31,680 --> 01:07:35,280
that will fund the open source project

01:07:33,599 --> 01:07:36,640
so the open source project can continue

01:07:35,280 --> 01:07:39,280
for forever so

01:07:36,640 --> 01:07:40,720
it is going to be free for forever

01:07:39,280 --> 01:07:42,480
there's only going to be a few features

01:07:40,720 --> 01:07:44,240
that are not free

01:07:42,480 --> 01:07:47,039
and they're also not going to be

01:07:44,240 --> 01:07:48,480
ridiculously expensive so anyway

01:07:47,039 --> 01:07:51,680
should i just go to the top and start

01:07:48,480 --> 01:07:51,680
over because i think i got everyone

01:07:51,760 --> 01:07:56,400
yeah yeah that's cool go to the top all

01:07:53,839 --> 01:07:57,520
right concerning skully caching what is

01:07:56,400 --> 01:08:00,000
a strategy with

01:07:57,520 --> 01:08:01,920
routes that need to make calls to an api

01:08:00,000 --> 01:08:03,760
and need to refresh data constantly

01:08:01,920 --> 01:08:05,520
so that's the question so this is a good

01:08:03,760 --> 01:08:06,559
question olu and i'm going to talk about

01:08:05,520 --> 01:08:10,480
it

01:08:06,559 --> 01:08:13,280
um if you have uh

01:08:10,480 --> 01:08:14,559
data that refreshes often and by often

01:08:13,280 --> 01:08:18,000
i'm going to say

01:08:14,559 --> 01:08:18,000
within the hour okay

01:08:18,159 --> 01:08:21,440
you are going to not want to cash those

01:08:20,480 --> 01:08:23,759
api calls

01:08:21,440 --> 01:08:25,920
those api calls are for lack of a better

01:08:23,759 --> 01:08:28,560
term that is the dynamic piece of data

01:08:25,920 --> 01:08:30,159
okay if you have data that is going to

01:08:28,560 --> 01:08:33,600
be static for

01:08:30,159 --> 01:08:35,520
longer than that up like a day or more

01:08:33,600 --> 01:08:36,880
that is technically a static piece of

01:08:35,520 --> 01:08:39,040
data and

01:08:36,880 --> 01:08:40,960
anytime the data refreshes you have to

01:08:39,040 --> 01:08:42,560
do a new build

01:08:40,960 --> 01:08:43,920
so if your data refreshes every second

01:08:42,560 --> 01:08:45,359
or every five minutes you don't want to

01:08:43,920 --> 01:08:47,199
be doing a new build and deploying to

01:08:45,359 --> 01:08:49,279
your cdn every five minutes it doesn't

01:08:47,199 --> 01:08:50,640
that's not healthy so those calls you're

01:08:49,279 --> 01:08:51,199
gonna you're gonna wanna leave those

01:08:50,640 --> 01:08:55,359
calls

01:08:51,199 --> 01:08:57,040
as not cached but any data that is

01:08:55,359 --> 01:08:58,960
dynamic and you can just say hey most of

01:08:57,040 --> 01:09:00,719
this is dynamic

01:08:58,960 --> 01:09:02,239
or most this is static i'll just i'll

01:09:00,719 --> 01:09:04,880
cache these ones

01:09:02,239 --> 01:09:07,040
but like pricing and user authentication

01:09:04,880 --> 01:09:09,199
data and anything user specific

01:09:07,040 --> 01:09:10,799
that i will not cache that is how you do

01:09:09,199 --> 01:09:11,759
this you kind of start cutting your app

01:09:10,799 --> 01:09:14,000
up slowly

01:09:11,759 --> 01:09:15,120
one piece at a time until you're caching

01:09:14,000 --> 01:09:16,400
the pieces that matter

01:09:15,120 --> 01:09:19,759
and you're not caching the pieces that

01:09:16,400 --> 01:09:21,279
you don't care about so um

01:09:19,759 --> 01:09:23,279
and again you don't have to cast any of

01:09:21,279 --> 01:09:24,640
it it's just a it's just a little bit

01:09:23,279 --> 01:09:25,279
more of an optimization you don't have

01:09:24,640 --> 01:09:28,640
to do that

01:09:25,279 --> 01:09:30,239
so um so yeah most of the benefit we saw

01:09:28,640 --> 01:09:32,080
we did without transfer state we only

01:09:30,239 --> 01:09:33,279
added transfer state to reduce the load

01:09:32,080 --> 01:09:36,480
on the server

01:09:33,279 --> 01:09:39,679
so you don't have to add transfer state

01:09:36,480 --> 01:09:41,040
oh who says if one is caching endpoint

01:09:39,679 --> 01:09:43,040
data at build time

01:09:41,040 --> 01:09:45,040
does this not bring in performance

01:09:43,040 --> 01:09:46,400
issues having so many calls to api

01:09:45,040 --> 01:09:48,319
endpoints at a built-in

01:09:46,400 --> 01:09:49,600
okay so oh you're bringing up another

01:09:48,319 --> 01:09:50,960
good question so

01:09:49,600 --> 01:09:53,120
someone asked earlier what if i have ten

01:09:50,960 --> 01:09:54,480
thousand pages all right

01:09:53,120 --> 01:09:56,960
and then i'm gonna couple that with this

01:09:54,480 --> 01:09:59,679
question oh what if each page

01:09:56,960 --> 01:10:01,120
requests ten times the server that's a

01:09:59,679 --> 01:10:03,760
hundred thousand requests

01:10:01,120 --> 01:10:05,679
during the build time right there's a

01:10:03,760 --> 01:10:07,440
lot of requests

01:10:05,679 --> 01:10:09,199
and if you're a big company and those

01:10:07,440 --> 01:10:12,560
requests are going to your production

01:10:09,199 --> 01:10:15,280
api or your production database

01:10:12,560 --> 01:10:16,159
100 000 requests in just a few minutes

01:10:15,280 --> 01:10:18,080
your

01:10:16,159 --> 01:10:19,520
production server's gonna feel like it's

01:10:18,080 --> 01:10:20,800
getting ddos like

01:10:19,520 --> 01:10:22,800
it's gonna get slow and people are gonna

01:10:20,800 --> 01:10:23,920
be like this sucks so one of the

01:10:22,800 --> 01:10:25,360
features we're building right now it

01:10:23,920 --> 01:10:26,480
will be one of the first features for

01:10:25,360 --> 01:10:28,400
the enterprise

01:10:26,480 --> 01:10:30,080
piece is we're gonna have a data caching

01:10:28,400 --> 01:10:31,440
layer for the data that's required to

01:10:30,080 --> 01:10:32,800
build all 10 000 pages

01:10:31,440 --> 01:10:34,640
so we're gonna add caching at a

01:10:32,800 --> 01:10:37,679
different layer

01:10:34,640 --> 01:10:39,440
so that during the build it also caches

01:10:37,679 --> 01:10:41,360
those calls during the build

01:10:39,440 --> 01:10:43,040
and then it refreshes you know however

01:10:41,360 --> 01:10:44,560
often you want it to you want to refresh

01:10:43,040 --> 01:10:46,400
once an hour done you want to refresh

01:10:44,560 --> 01:10:48,400
once tonight at midnight or

01:10:46,400 --> 01:10:49,360
whatever done so we're going to add

01:10:48,400 --> 01:10:51,600
that's going to be one of the enterprise

01:10:49,360 --> 01:10:53,440
features because this is something that

01:10:51,600 --> 01:10:54,960
doesn't really affect small clients it

01:10:53,440 --> 01:10:56,800
massively affects big clients

01:10:54,960 --> 01:10:58,159
so um this is something we're definitely

01:10:56,800 --> 01:10:59,360
going to talk about and we're definitely

01:10:58,159 --> 01:11:01,760
building this right now we're working

01:10:59,360 --> 01:11:04,400
with one of our big clients to do that

01:11:01,760 --> 01:11:05,600
anyway what about a hybrid approach

01:11:04,400 --> 01:11:08,880
pre-render certain

01:11:05,600 --> 01:11:12,080
routes ssr other routes if possible yeah

01:11:08,880 --> 01:11:14,000
it's totally fine man um it is there in

01:11:12,080 --> 01:11:15,120
in the skully config here let me pull my

01:11:14,000 --> 01:11:18,320
my code

01:11:15,120 --> 01:11:21,920
um there if you pull the the config

01:11:18,320 --> 01:11:25,520
i think we have something in here called

01:11:21,920 --> 01:11:26,880
excluded extra routes now i think you

01:11:25,520 --> 01:11:28,880
there's a route done plugin where you

01:11:26,880 --> 01:11:29,920
could remove certain routes right

01:11:28,880 --> 01:11:31,679
or like let's say i didn't want to

01:11:29,920 --> 01:11:33,199
pre-render any of my donut routes i just

01:11:31,679 --> 01:11:35,600
wanted to use ssr for them

01:11:33,199 --> 01:11:37,360
if i don't ever do that then chile will

01:11:35,600 --> 01:11:39,920
never try and prerender them

01:11:37,360 --> 01:11:41,040
and it will just skip those pages which

01:11:39,920 --> 01:11:42,400
means they'll get the home page

01:11:41,040 --> 01:11:45,440
pre-rendered for them so

01:11:42,400 --> 01:11:46,400
like yeah there's there's definitely

01:11:45,440 --> 01:11:49,280
ways to

01:11:46,400 --> 01:11:50,560
not render some of it and to render

01:11:49,280 --> 01:11:52,400
other pieces of it like

01:11:50,560 --> 01:11:54,320
if you have yeah i'm not gonna answer

01:11:52,400 --> 01:11:55,679
other questions but there's that that's

01:11:54,320 --> 01:11:56,320
definitely a thing if you have questions

01:11:55,679 --> 01:11:57,600
how to do that

01:11:56,320 --> 01:12:00,159
you should come to office hours and we

01:11:57,600 --> 01:12:02,480
can talk about it all right olu

01:12:00,159 --> 01:12:05,199
if data is entered into a form field

01:12:02,480 --> 01:12:07,520
while the pre-render page is shown

01:12:05,199 --> 01:12:08,640
does all that transfer into the app yes

01:12:07,520 --> 01:12:10,400
i already answered this question so i'm

01:12:08,640 --> 01:12:12,000
going to move on

01:12:10,400 --> 01:12:13,600
although i had a question about some

01:12:12,000 --> 01:12:15,440
form auto reloading during the

01:12:13,600 --> 01:12:17,920
development i noticed

01:12:15,440 --> 01:12:18,880
you used ng build watch when doing the

01:12:17,920 --> 01:12:20,480
demo

01:12:18,880 --> 01:12:22,800
does this help with getting close to the

01:12:20,480 --> 01:12:25,120
ng surf field during development yeah

01:12:22,800 --> 01:12:26,480
yeah so i just do it because when i'm

01:12:25,120 --> 01:12:29,600
building like a plug-in

01:12:26,480 --> 01:12:31,120
for skully or i'm building um something

01:12:29,600 --> 01:12:33,280
else that i'm just trying to test

01:12:31,120 --> 01:12:34,880
the pre-rendered version of the app i do

01:12:33,280 --> 01:12:37,120
ng build watch and

01:12:34,880 --> 01:12:38,719
npm runs skully watch that's how if i'm

01:12:37,120 --> 01:12:39,040
trying to debug a plug-in or i'm trying

01:12:38,719 --> 01:12:41,360
to

01:12:39,040 --> 01:12:43,199
debug the pre-built if i'm just working

01:12:41,360 --> 01:12:44,560
on angular i just use ng-serve and i

01:12:43,199 --> 01:12:47,440
develop it normally okay

01:12:44,560 --> 01:12:49,040
so only if you're building something for

01:12:47,440 --> 01:12:50,800
scully like a plug-in or if i'm trying

01:12:49,040 --> 01:12:52,000
to debug like maybe there's a bug in the

01:12:50,800 --> 01:12:54,320
pre-rendered version

01:12:52,000 --> 01:12:55,520
then i developed that way as well so it

01:12:54,320 --> 01:12:57,679
kind of depends on

01:12:55,520 --> 01:13:00,800
on exactly what we're talking about so

01:12:57,679 --> 01:13:00,800
yes good question though

01:13:01,520 --> 01:13:05,600
shy with universal you always had have

01:13:04,480 --> 01:13:07,520
to add

01:13:05,600 --> 01:13:08,880
platform checks before accessing

01:13:07,520 --> 01:13:10,800
document or window

01:13:08,880 --> 01:13:12,239
if i understand correctly with skully

01:13:10,800 --> 01:13:13,120
this is no longer needed as everything

01:13:12,239 --> 01:13:15,440
is rendered in

01:13:13,120 --> 01:13:16,560
actual browser yes yes so this is one of

01:13:15,440 --> 01:13:18,640
the cool things like

01:13:16,560 --> 01:13:20,320
you know shy you might be you might be a

01:13:18,640 --> 01:13:22,159
fantastic developer who's like i will

01:13:20,320 --> 01:13:23,679
never talk to the window of the document

01:13:22,159 --> 01:13:25,600
but you might use a third-party plugin

01:13:23,679 --> 01:13:26,960
that does and maybe you show up today on

01:13:25,600 --> 01:13:27,520
it's today's monday you show up on

01:13:26,960 --> 01:13:29,520
tuesday

01:13:27,520 --> 01:13:30,960
and your build and production is failing

01:13:29,520 --> 01:13:32,480
because your third-party plug-in did a

01:13:30,960 --> 01:13:33,760
minor revision that talked to the

01:13:32,480 --> 01:13:36,640
document now it's dead

01:13:33,760 --> 01:13:38,560
it's like it's really difficult to keep

01:13:36,640 --> 01:13:39,920
those universal builds going and going

01:13:38,560 --> 01:13:41,600
and people struggle with it

01:13:39,920 --> 01:13:43,280
some people have no problem with it at

01:13:41,600 --> 01:13:45,600
all others struggle

01:13:43,280 --> 01:13:46,960
immensely with that exact issue and so

01:13:45,600 --> 01:13:47,520
with skull you don't have to worry about

01:13:46,960 --> 01:13:48,880
it

01:13:47,520 --> 01:13:51,120
we are adding support to have a

01:13:48,880 --> 01:13:52,880
pre-render in universal though so if you

01:13:51,120 --> 01:13:54,320
want the speed of universal

01:13:52,880 --> 01:13:56,080
we're going to add a universal

01:13:54,320 --> 01:13:59,199
pre-renderer

01:13:56,080 --> 01:14:02,640
but um so you can have that

01:13:59,199 --> 01:14:04,480
back most people most apps are not

01:14:02,640 --> 01:14:05,920
universal friendly like most people are

01:14:04,480 --> 01:14:07,679
not ready to like most angular

01:14:05,920 --> 01:14:09,040
developers i've seen and i consult with

01:14:07,679 --> 01:14:11,440
big companies all around

01:14:09,040 --> 01:14:13,600
most of those developers are not ready

01:14:11,440 --> 01:14:15,440
for to write a universal app like most

01:14:13,600 --> 01:14:17,920
of them so

01:14:15,440 --> 01:14:19,040
it depends on your focuses skull is much

01:14:17,920 --> 01:14:21,199
more friendly for everybody

01:14:19,040 --> 01:14:22,159
all right concerning the cdn strategy i

01:14:21,199 --> 01:14:24,400
believe i saw

01:14:22,159 --> 01:14:25,840
on the site that the pre-rendering files

01:14:24,400 --> 01:14:27,760
go to the cdn

01:14:25,840 --> 01:14:30,400
and the normal build files go to the

01:14:27,760 --> 01:14:31,840
server is that accurate if yes

01:14:30,400 --> 01:14:33,760
what would be the equivalent deployment

01:14:31,840 --> 01:14:35,679
strategy

01:14:33,760 --> 01:14:37,520
on a host like notify i would really

01:14:35,679 --> 01:14:41,040
love to see a deployment strategy

01:14:37,520 --> 01:14:44,719
on netlify so there's a gentleman

01:14:41,040 --> 01:14:47,120
on twitter he loves helping people out

01:14:44,719 --> 01:14:50,239
i'm going to show you him on twitter his

01:14:47,120 --> 01:14:50,239
name is preston lamb

01:14:51,440 --> 01:14:54,880
he's a friend of mine he's local to

01:14:52,880 --> 01:14:57,120
where i'm from hey preston

01:14:54,880 --> 01:14:58,480
he has his blog using skully hosted on

01:14:57,120 --> 01:15:00,000
netlify okay

01:14:58,480 --> 01:15:02,640
he actually tweeted a lot about it last

01:15:00,000 --> 01:15:05,280
night right so he's talking about hey

01:15:02,640 --> 01:15:06,719
um figuring out some stuff without the

01:15:05,280 --> 01:15:08,400
fighting scully so

01:15:06,719 --> 01:15:11,280
um if you want to talk to anybody you

01:15:08,400 --> 01:15:13,440
can talk to him but

01:15:11,280 --> 01:15:14,400
before when you hosted with netify you

01:15:13,440 --> 01:15:16,560
just took

01:15:14,400 --> 01:15:17,840
the results of ng build and you put that

01:15:16,560 --> 01:15:20,640
on nutlify

01:15:17,840 --> 01:15:21,920
now you're going to take the results of

01:15:20,640 --> 01:15:23,840
skully

01:15:21,920 --> 01:15:25,280
the skully build and put that on that

01:15:23,840 --> 01:15:27,040
device so there's not a lot of there's

01:15:25,280 --> 01:15:28,239
not a lot changing

01:15:27,040 --> 01:15:29,440
it's very very simple but if you have

01:15:28,239 --> 01:15:30,320
any questions specific to what you're

01:15:29,440 --> 01:15:32,719
working on

01:15:30,320 --> 01:15:33,920
people like preston can can help you or

01:15:32,719 --> 01:15:35,440
if you want to come to office hours and

01:15:33,920 --> 01:15:38,480
show us your project we can help you

01:15:35,440 --> 01:15:39,520
so yeah good question anyway

01:15:38,480 --> 01:15:41,040
brooke i made it through all the

01:15:39,520 --> 01:15:41,920
questions bud you did that was

01:15:41,040 --> 01:15:44,480
impressive

01:15:41,920 --> 01:15:45,760
very impressive oh geez is there

01:15:44,480 --> 01:15:46,960
anything else in the chat that i missed

01:15:45,760 --> 01:15:49,840
or did i get everybody

01:15:46,960 --> 01:15:50,239
no i think so i think we got it all so i

01:15:49,840 --> 01:15:53,679
did

01:15:50,239 --> 01:15:55,760
just i put in a link for everybody if

01:15:53,679 --> 01:15:58,960
you want to come to the actual workshop

01:15:55,760 --> 01:15:59,440
of this same presentation then aaron is

01:15:58,960 --> 01:16:03,040
doing

01:15:59,440 --> 01:16:04,080
a workshop of this at enterpriseng so

01:16:03,040 --> 01:16:07,440
that's november

01:16:04,080 --> 01:16:07,920
16th and it'll be for what three or four

01:16:07,440 --> 01:16:11,120
hours

01:16:07,920 --> 01:16:14,080
in to us our morning

01:16:11,120 --> 01:16:14,640
yeah other people their night yeah yeah

01:16:14,080 --> 01:16:16,560
and then

01:16:14,640 --> 01:16:17,840
if you're able to there are some

01:16:16,560 --> 01:16:20,239
additional free

01:16:17,840 --> 01:16:21,760
workshops later in the afternoon so

01:16:20,239 --> 01:16:24,960
check out that link it's just

01:16:21,760 --> 01:16:26,560
um ngconf.org

01:16:24,960 --> 01:16:28,320
workshops and you can get more

01:16:26,560 --> 01:16:29,120
information there and then yeah we'd

01:16:28,320 --> 01:16:32,400
love to see you

01:16:29,120 --> 01:16:35,920
at the actual enterprise ng as well so

01:16:32,400 --> 01:16:37,199
yeah for sure okay well thank you

01:16:35,920 --> 01:16:39,679
thank you thank you thank you aaron we

01:16:37,199 --> 01:16:41,440
always love your presentations and

01:16:39,679 --> 01:16:43,199
you always make everybody hungry so i

01:16:41,440 --> 01:16:45,760
think we're all ready to go get some

01:16:43,199 --> 01:16:47,040
some lunch or dinner i know i'm i want

01:16:45,760 --> 01:16:49,840
sushi i don't know why the doughnut is

01:16:47,040 --> 01:16:49,840
made hungry for sushi

01:16:50,080 --> 01:16:54,400
it's sushi day do you have a favorite

01:16:52,480 --> 01:16:56,400
sushi place around here

01:16:54,400 --> 01:16:58,080
tsunami is good and it's close so i go i

01:16:56,400 --> 01:17:00,719
got a tsunami yeah okay

01:16:58,080 --> 01:17:01,600
cool cool cool anyway all right well

01:17:00,719 --> 01:17:02,719
yeah

01:17:01,600 --> 01:17:05,520
thanks and then we'll hope to see

01:17:02,719 --> 01:17:17,760
everybody at enterprise ng

01:17:05,520 --> 01:17:19,840
see ya thanks brooke yep

01:17:17,760 --> 01:17:19,840

YouTube URL: https://www.youtube.com/watch?v=uMK0oescQ34


