Title: Angular Schematics - The Solution to All Your Problems Webinar | ng-conf & Infragistics | #ngconf
Publication date: 2020-05-07
Playlist: Webinars
Description: 
	Join ng-conf & Infragistics for a dive into Angular Schematics. 

ng-conf is a three-day #Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/

#ngconf
Captions: 
	00:00:09,519 --> 00:00:14,349
and then with that I'll just turn over I

00:00:12,039 --> 00:00:15,580
believe Jason is our first speaker and

00:00:14,349 --> 00:00:18,849
I'll let them all introduce themselves

00:00:15,580 --> 00:00:20,890
but thank you for being here and yeah

00:00:18,849 --> 00:00:23,590
over to you guys thank you thank you

00:00:20,890 --> 00:00:27,329
very much Brooke I am going to share my

00:00:23,590 --> 00:00:30,160
screen real quick we've got several

00:00:27,329 --> 00:00:35,890
things we're gonna be our presenters

00:00:30,160 --> 00:00:37,870
today my name is Jason Baris I I manage

00:00:35,890 --> 00:00:39,969
the product development teams here at

00:00:37,870 --> 00:00:41,350
infra Geist --ax and I'm just going to

00:00:39,969 --> 00:00:44,260
do a few slides and then I'm gonna hand

00:00:41,350 --> 00:00:47,079
it over to the super experts victor and

00:00:44,260 --> 00:00:51,430
dom ian who will be really teaching us

00:00:47,079 --> 00:00:53,200
about angular schematics so very quick

00:00:51,430 --> 00:00:54,070
about it for gistic SIF you're not aware

00:00:53,200 --> 00:00:56,290
of who we are

00:00:54,070 --> 00:00:58,090
last year was our 30th year anniversary

00:00:56,290 --> 00:01:03,329
so we've been around the block a few

00:00:58,090 --> 00:01:07,960
times we have a heavy focus on desktop

00:01:03,329 --> 00:01:11,110
UI toolkits as well as modern web like

00:01:07,960 --> 00:01:12,850
angular so angular is a big piece of

00:01:11,110 --> 00:01:16,649
product for us and we're really excited

00:01:12,850 --> 00:01:18,459
to always participate in ng-conf and

00:01:16,649 --> 00:01:20,109
unfortunately we couldn't be there live

00:01:18,459 --> 00:01:22,840
this year we're really happy we're able

00:01:20,109 --> 00:01:24,880
to do this to just continue to talk to

00:01:22,840 --> 00:01:28,029
the community because you guys are what

00:01:24,880 --> 00:01:30,909
make us tick and give us the motivation

00:01:28,029 --> 00:01:32,759
to continue to build awesome product so

00:01:30,909 --> 00:01:36,009
this slide really talks about our

00:01:32,759 --> 00:01:39,340
material based components so we are

00:01:36,009 --> 00:01:41,409
unique in this space we have a set of UI

00:01:39,340 --> 00:01:42,880
components and controls for angular

00:01:41,409 --> 00:01:44,740
they're a material based it's called

00:01:42,880 --> 00:01:47,499
ignite UI that's what you're going to be

00:01:44,740 --> 00:01:49,779
learning about today but everything we

00:01:47,499 --> 00:01:53,049
do with this product is really about

00:01:49,779 --> 00:01:56,020
enabling you as developers to deliver

00:01:53,049 --> 00:01:59,020
amazing experiences to your customers so

00:01:56,020 --> 00:02:01,509
you want really rich user experience all

00:01:59,020 --> 00:02:03,060
kinds of cool capabilities but you want

00:02:01,509 --> 00:02:05,619
to be able to do it in an easy way

00:02:03,060 --> 00:02:06,789
that's really what ignite UI is all

00:02:05,619 --> 00:02:08,020
about and throughout today's

00:02:06,789 --> 00:02:11,890
presentation you're going to be learning

00:02:08,020 --> 00:02:15,010
how we use schematics to enable some of

00:02:11,890 --> 00:02:18,160
that in our product in today's

00:02:15,010 --> 00:02:19,810
presenters the two key guys are on the

00:02:18,160 --> 00:02:22,500
left in the right of the slide you're

00:02:19,810 --> 00:02:24,540
going to see victor and

00:02:22,500 --> 00:02:26,550
in there and their Twitter handles and

00:02:24,540 --> 00:02:28,470
then Steven is in the middle with the

00:02:26,550 --> 00:02:30,720
red aura around him

00:02:28,470 --> 00:02:32,940
Steven is on the product marketing

00:02:30,720 --> 00:02:35,130
product management side if you have any

00:02:32,940 --> 00:02:37,800
questions there's his email address but

00:02:35,130 --> 00:02:40,260
Victor and Damian you have their email

00:02:37,800 --> 00:02:43,470
addresses now or their Twitter handles

00:02:40,260 --> 00:02:46,110
now so please tweet to them I'll use all

00:02:43,470 --> 00:02:49,610
of our contact information to continue

00:02:46,110 --> 00:02:52,440
the conversation even after the webinar

00:02:49,610 --> 00:02:55,200
so we really want to continue to talk to

00:02:52,440 --> 00:02:58,050
you guys about what's what's going on so

00:02:55,200 --> 00:02:59,489
with that I am gonna stop sharing I want

00:02:58,050 --> 00:03:02,430
to thank everyone for joining I'm gonna

00:02:59,489 --> 00:03:04,950
pass it off to Victor and he can

00:03:02,430 --> 00:03:06,209
introduce himself and Dom Ian and then

00:03:04,950 --> 00:03:08,070
we're gonna talk about how we're gonna

00:03:06,209 --> 00:03:09,570
solve all of your problems today with

00:03:08,070 --> 00:03:14,640
angular schematics

00:03:09,570 --> 00:03:18,570
thank you all right cool as we said I'm

00:03:14,640 --> 00:03:20,670
Damian and my partner today is Victor we

00:03:18,570 --> 00:03:23,070
both work at him for gistic s-- Victor's

00:03:20,670 --> 00:03:26,190
a developer I'm an architect and we work

00:03:23,070 --> 00:03:29,400
at the team that handles quite a lot

00:03:26,190 --> 00:03:31,560
actually within the company we do our

00:03:29,400 --> 00:03:35,430
own version of a CLI and within that we

00:03:31,560 --> 00:03:37,290
also do angular schematics and we've

00:03:35,430 --> 00:03:39,390
been doing this for a while and it

00:03:37,290 --> 00:03:41,940
actually solved quite a bit of our

00:03:39,390 --> 00:03:43,650
problems so we'd like to share a few

00:03:41,940 --> 00:03:48,540
things with you today so maybe you can

00:03:43,650 --> 00:03:52,500
solve yours and as we said in the title

00:03:48,540 --> 00:03:55,140
it's gonna solve all your problems of

00:03:52,500 --> 00:03:57,690
course not as long as your problems are

00:03:55,140 --> 00:04:00,900
limited to solving world peace within

00:03:57,690 --> 00:04:04,890
the angular community or in all

00:04:00,900 --> 00:04:07,079
seriousness we we know we know what the

00:04:04,890 --> 00:04:09,690
pain points of everyone is like imagine

00:04:07,079 --> 00:04:12,150
that fancy new project you want to start

00:04:09,690 --> 00:04:13,709
and all the time you spend into

00:04:12,150 --> 00:04:16,650
configuring the structure bringing in

00:04:13,709 --> 00:04:20,669
tools and packages you love just to get

00:04:16,650 --> 00:04:23,640
to actually working on it and then what

00:04:20,669 --> 00:04:25,530
else that shiny new library that you

00:04:23,640 --> 00:04:27,840
found but it also comes with an

00:04:25,530 --> 00:04:31,200
instruction manual to get started so

00:04:27,840 --> 00:04:34,320
that's no good and then you also may may

00:04:31,200 --> 00:04:36,420
be sharing some I don't know the

00:04:34,320 --> 00:04:38,220
deployment or building scripts

00:04:36,420 --> 00:04:41,100
with your cut within your company or

00:04:38,220 --> 00:04:43,410
whatever else and that's something that

00:04:41,100 --> 00:04:45,630
needs that needs to keep being

00:04:43,410 --> 00:04:49,320
maintained all the time and then the

00:04:45,630 --> 00:04:51,870
bane of us all really is once you get

00:04:49,320 --> 00:04:53,880
that project started it's usually left

00:04:51,870 --> 00:04:57,630
there because everyone is too afraid to

00:04:53,880 --> 00:04:59,640
do updates right and because they're

00:04:57,630 --> 00:05:02,550
afraid of breaking changes and those are

00:04:59,640 --> 00:05:06,690
all things that we can help alleviate

00:05:02,550 --> 00:05:09,060
today so I'll actually defer to a quote

00:05:06,690 --> 00:05:11,850
from Scott Hanselman because it has

00:05:09,060 --> 00:05:13,620
stuck with me for years and it's

00:05:11,850 --> 00:05:18,360
actually about a completely unrelated

00:05:13,620 --> 00:05:20,850
package called EDIUS shoutout but it

00:05:18,360 --> 00:05:23,100
goes it goes it fits so well that I just

00:05:20,850 --> 00:05:23,520
couldn't resist using it and goes like

00:05:23,100 --> 00:05:26,760
this

00:05:23,520 --> 00:05:30,150
so whatever problem you have if you have

00:05:26,760 --> 00:05:32,100
this problem this solves it and I see

00:05:30,150 --> 00:05:37,340
Jason laughing thank you that should

00:05:32,100 --> 00:05:40,620
have been audible right so yeah and

00:05:37,340 --> 00:05:43,980
since we have quite a bit of information

00:05:40,620 --> 00:05:46,320
to share with you today we sort of want

00:05:43,980 --> 00:05:48,300
to whet your appetite first with some of

00:05:46,320 --> 00:05:50,070
the things you can accomplish with

00:05:48,300 --> 00:05:51,480
schematics we're gonna show off a little

00:05:50,070 --> 00:05:53,400
bit of course hello

00:05:51,480 --> 00:05:56,040
but yeah so I'm gonna turn over to

00:05:53,400 --> 00:05:59,430
Victor he's got some demo for you and I

00:05:56,040 --> 00:06:03,330
guess it's it's sharing can you see my

00:05:59,430 --> 00:06:05,910
screen yeah okay thanks Damian for the

00:06:03,330 --> 00:06:08,850
introduction so basically what I'm gonna

00:06:05,910 --> 00:06:12,990
show you is how you can add the grid did

00:06:08,850 --> 00:06:16,680
Daniel showed this grid to your existing

00:06:12,990 --> 00:06:20,430
blank angular project so what we have

00:06:16,680 --> 00:06:25,730
here is just a standard angular project

00:06:20,430 --> 00:06:28,140
just run just get from mangy new blank

00:06:25,730 --> 00:06:30,630
as you can see you have your app module

00:06:28,140 --> 00:06:33,330
your routing module when what we've done

00:06:30,630 --> 00:06:36,330
is just extract all the stuff that comes

00:06:33,330 --> 00:06:38,850
with the app component and baked into

00:06:36,330 --> 00:06:42,420
the home into a home I think you might

00:06:38,850 --> 00:06:49,490
be you might have a ghost directory in

00:06:42,420 --> 00:06:49,490
there I might yeah you're right

00:06:51,039 --> 00:06:57,169
yeah that was a ghost

00:06:54,280 --> 00:07:01,969
so yeah we'll show you how to add this

00:06:57,169 --> 00:07:05,300
grid to this blank project by doing a

00:07:01,969 --> 00:07:11,930
simple command like ng at ignite you I

00:07:05,300 --> 00:07:13,969
annular this isn't it's a schematic feel

00:07:11,930 --> 00:07:17,419
like a man so isn't angular's here like

00:07:13,969 --> 00:07:19,099
a man sorry which adds the package to

00:07:17,419 --> 00:07:22,759
your project sorry if it's a bit slow

00:07:19,099 --> 00:07:24,229
i'll talk over it and execute any logic

00:07:22,759 --> 00:07:27,440
that you might have attached to that

00:07:24,229 --> 00:07:29,030
hoax or say so this is done via

00:07:27,440 --> 00:07:30,889
schematics and during our presentation

00:07:29,030 --> 00:07:34,159
we'll touch on this and show you how we

00:07:30,889 --> 00:07:35,990
can do it for your own libraries what

00:07:34,159 --> 00:07:38,960
it's doing now is basically installing

00:07:35,990 --> 00:07:42,409
in being packages so it has access to

00:07:38,960 --> 00:07:44,900
all the extra logic that we've put in

00:07:42,409 --> 00:07:46,190
them it's taking a while so you have

00:07:44,900 --> 00:07:50,479
this problem here right now you're

00:07:46,190 --> 00:07:51,379
seeing is from schematics it's so prompt

00:07:50,479 --> 00:07:54,229
if you would like to include some

00:07:51,379 --> 00:07:56,750
polyfills to support older browsers so

00:07:54,229 --> 00:07:59,330
yeah sure we'll go with it and if you

00:07:56,750 --> 00:08:03,020
would like to include a CSS library that

00:07:59,330 --> 00:08:08,569
normalizes your containers sure why not

00:08:03,020 --> 00:08:10,129
and as you can see it includes some some

00:08:08,569 --> 00:08:14,599
packages which are just standard

00:08:10,129 --> 00:08:16,219
dependencies for our library and it also

00:08:14,599 --> 00:08:18,229
says that the package the base library

00:08:16,219 --> 00:08:22,000
is installed and now is installing our

00:08:18,229 --> 00:08:24,050
schematics package so you have access to

00:08:22,000 --> 00:08:27,710
commands that can allow you to quickly

00:08:24,050 --> 00:08:29,629
add these beautiful grid views or any

00:08:27,710 --> 00:08:31,969
other views okay

00:08:29,629 --> 00:08:33,979
can I interrupt really quick yes getting

00:08:31,969 --> 00:08:36,440
some requests that you increase the size

00:08:33,979 --> 00:08:38,740
of your code can you make it a little

00:08:36,440 --> 00:08:38,740
bit bigger

00:08:40,959 --> 00:08:45,560
yeah thank you

00:08:43,430 --> 00:08:47,060
yeah and I think to victors since you

00:08:45,560 --> 00:08:49,790
and dami are gonna be using the command

00:08:47,060 --> 00:08:52,699
line a lot you can increase the size of

00:08:49,790 --> 00:08:54,140
that font as well if you can I mean this

00:08:52,699 --> 00:08:58,660
is the only thing that we're going to be

00:08:54,140 --> 00:08:58,660
doing so I think cool

00:09:00,810 --> 00:09:09,509
so yeah as you can see the changes it's

00:09:03,509 --> 00:09:11,339
added it added some packages it's added

00:09:09,509 --> 00:09:13,529
the browser animation smaller to the app

00:09:11,339 --> 00:09:15,120
module this is done like behind the

00:09:13,529 --> 00:09:16,980
scenes so the user doesn't have to do it

00:09:15,120 --> 00:09:19,170
themselves

00:09:16,980 --> 00:09:23,490
we need this browser animations module

00:09:19,170 --> 00:09:26,519
in order for our grids to run and to cap

00:09:23,490 --> 00:09:28,110
those move animations the polyfills are

00:09:26,519 --> 00:09:31,019
added and all this is done behind the

00:09:28,110 --> 00:09:32,910
scenes without needing the user to

00:09:31,019 --> 00:09:35,910
actually improve anything so we all

00:09:32,910 --> 00:09:42,029
float a big part of this onboarding

00:09:35,910 --> 00:09:44,779
process off of them and adding the grid

00:09:42,029 --> 00:09:48,480
itself we've also installed our

00:09:44,779 --> 00:09:52,529
schematic package which allows us to run

00:09:48,480 --> 00:09:56,959
this command so actually Victor can you

00:09:52,529 --> 00:10:00,600
actually bump up the font on the console

00:09:56,959 --> 00:10:04,459
not right now I know it's not it's not

00:10:00,600 --> 00:10:13,079
the greatest experience ever yeah I

00:10:04,459 --> 00:10:16,740
guess so 24 can you see this much better

00:10:13,079 --> 00:10:18,540
thank you okay thanks so we just run

00:10:16,740 --> 00:10:20,670
this schematic gingy

00:10:18,540 --> 00:10:23,100
this is our schematic collection in this

00:10:20,670 --> 00:10:25,170
schematic name which is C short for

00:10:23,100 --> 00:10:29,220
component and as you can see this

00:10:25,170 --> 00:10:31,949
process with a menu which allows us to

00:10:29,220 --> 00:10:36,180
choose from several components or grids

00:10:31,949 --> 00:10:39,509
like menus gauges scheduling different

00:10:36,180 --> 00:10:40,829
charts or even more fancier scenarios

00:10:39,509 --> 00:10:45,180
like the one that was shown in the

00:10:40,829 --> 00:10:48,149
presentation with this grid like it

00:10:45,180 --> 00:10:49,980
promises for a name and then we can just

00:10:48,149 --> 00:10:53,759
cycle through this again this is also

00:10:49,980 --> 00:10:57,209
handled by the schematic logic or partly

00:10:53,759 --> 00:11:01,079
- kinematic logic or we could choose to

00:10:57,209 --> 00:11:03,149
finish this in run start and it's

00:11:01,079 --> 00:11:05,220
installing some other packages since

00:11:03,149 --> 00:11:07,949
these are also all floated from the

00:11:05,220 --> 00:11:09,750
start so they can save time and to save

00:11:07,949 --> 00:11:12,259
even more time I have this project

00:11:09,750 --> 00:11:14,600
running on another port

00:11:12,259 --> 00:11:17,029
and as you can see this is the result

00:11:14,600 --> 00:11:21,709
this movie or result in your project as

00:11:17,029 --> 00:11:27,499
well you have a grid where you can

00:11:21,709 --> 00:11:28,910
display a chart for selected roles if

00:11:27,499 --> 00:11:32,959
you select further roles this truck

00:11:28,910 --> 00:11:35,419
changes you have all sort of

00:11:32,959 --> 00:11:39,739
functionality like grouping sorting

00:11:35,419 --> 00:11:43,160
filtering you can click on a single role

00:11:39,739 --> 00:11:47,809
to display a chart by region and we even

00:11:43,160 --> 00:11:50,660
have a little service that simulates a

00:11:47,809 --> 00:11:53,929
live data feed so as you can see the

00:11:50,660 --> 00:11:55,729
little numbers change and what we hope

00:11:53,929 --> 00:11:58,989
during the presentation is that we'll be

00:11:55,729 --> 00:12:03,410
able to show you how to incorporate some

00:11:58,989 --> 00:12:07,149
similar logic in your own libraries so

00:12:03,410 --> 00:12:12,649
we can ease the use of your users and

00:12:07,149 --> 00:12:15,499
save yourself some headaches so I give

00:12:12,649 --> 00:12:18,589
you how what we want go through is a

00:12:15,499 --> 00:12:21,109
quick intro of what schematics are and

00:12:18,589 --> 00:12:22,579
then just jump right into it so how you

00:12:21,109 --> 00:12:27,259
can create your own schematics from

00:12:22,579 --> 00:12:30,769
scratch explain a bit about the API go

00:12:27,259 --> 00:12:34,389
over an example which will create a

00:12:30,769 --> 00:12:36,739
schematic very similar to this one so

00:12:34,389 --> 00:12:38,679
creating a component from scratch and

00:12:36,739 --> 00:12:41,600
adding it to an existing angular project

00:12:38,679 --> 00:12:44,389
and finally we will touch on these

00:12:41,600 --> 00:12:47,720
custom angular CLI cooks so ingénue ng

00:12:44,389 --> 00:12:49,850
add an NG update and also Damien will

00:12:47,720 --> 00:12:52,549
take a deep dive into the typescript API

00:12:49,850 --> 00:12:54,439
so you can save yourself even more

00:12:52,549 --> 00:12:57,139
headaches when I'm dating files in

00:12:54,439 --> 00:13:00,769
touching stuff in the file system so a

00:12:57,139 --> 00:13:03,230
quick intro to schematics for our

00:13:00,769 --> 00:13:05,809
schematics well they're basically the

00:13:03,230 --> 00:13:08,179
building blocks of the angular CLI you

00:13:05,809 --> 00:13:11,179
use them constantly if you even if you

00:13:08,179 --> 00:13:14,709
don't know it so like calling n GG C or

00:13:11,179 --> 00:13:17,929
ingenue is actually calling a schematic

00:13:14,709 --> 00:13:20,839
they work by making transformation to an

00:13:17,929 --> 00:13:23,929
in-memory representation of the file

00:13:20,839 --> 00:13:25,280
system called the tree so this

00:13:23,929 --> 00:13:27,440
abstraction is basically

00:13:25,280 --> 00:13:32,330
because it allows for better performance

00:13:27,440 --> 00:13:34,760
and actually doing stuff to the

00:13:32,330 --> 00:13:37,610
representation without reflecting it on

00:13:34,760 --> 00:13:41,270
your physical files so you can do a

00:13:37,610 --> 00:13:44,630
so-called dry round and it allows for

00:13:41,270 --> 00:13:47,660
advanced handling emerges so like if you

00:13:44,630 --> 00:13:51,080
have a couple of incoming changes to the

00:13:47,660 --> 00:13:55,490
same file you can sort those out all of

00:13:51,080 --> 00:14:00,080
this is done by rules which are highly

00:13:55,490 --> 00:14:02,030
reusable functions these can also be

00:14:00,080 --> 00:14:05,150
tested by themselves so that's really

00:14:02,030 --> 00:14:08,360
great because it provides the sort of

00:14:05,150 --> 00:14:12,860
modularity and they're also they also

00:14:08,360 --> 00:14:16,340
can be changed it's a it's a pretty fast

00:14:12,860 --> 00:14:19,330
API which we'll touch on for going

00:14:16,340 --> 00:14:22,430
forward and last but not least there's a

00:14:19,330 --> 00:14:23,950
they provide the schematics provide a

00:14:22,430 --> 00:14:27,530
collection where you can expose

00:14:23,950 --> 00:14:30,440
schematics to your packages users or you

00:14:27,530 --> 00:14:32,120
can keep some for internal use which

00:14:30,440 --> 00:14:36,500
further ensures where that modularity

00:14:32,120 --> 00:14:38,380
and testability and here as you can see

00:14:36,500 --> 00:14:42,920
are some of the schematics we each from

00:14:38,380 --> 00:14:46,250
day and I think most of us have seen

00:14:42,920 --> 00:14:49,880
them so let's jump into all ring how we

00:14:46,250 --> 00:14:52,190
can create our own schematic the an you

00:14:49,880 --> 00:14:55,750
think you've provided with provided us

00:14:52,190 --> 00:14:59,120
with a really easy way to get started

00:14:55,750 --> 00:15:02,800
there's a flavor framework agnostic CLI

00:14:59,120 --> 00:15:05,660
that lets you create and run schematics

00:15:02,800 --> 00:15:08,270
so all you have to do to get to get

00:15:05,660 --> 00:15:11,810
started on your own machine is run npm

00:15:08,270 --> 00:15:14,450
install this package and afterwards just

00:15:11,810 --> 00:15:16,550
called schematic blank and this will

00:15:14,450 --> 00:15:19,190
create a blank schematic after your

00:15:16,550 --> 00:15:20,900
schematic is created you can go in if

00:15:19,190 --> 00:15:23,839
you check the files would look just like

00:15:20,900 --> 00:15:26,120
a standard NPM package with a couple of

00:15:23,839 --> 00:15:28,430
exceptions first you notice in the

00:15:26,120 --> 00:15:29,960
package JSON there's a property called

00:15:28,430 --> 00:15:32,630
schematics which points to your

00:15:29,960 --> 00:15:34,820
collection the collection is the place

00:15:32,630 --> 00:15:38,450
where all of your schematics are exposed

00:15:34,820 --> 00:15:39,170
to the users of your package and in the

00:15:38,450 --> 00:15:41,750
collection

00:15:39,170 --> 00:15:44,510
schematic you have a pointer to an index

00:15:41,750 --> 00:15:48,920
TS file which exposes the schematic

00:15:44,510 --> 00:15:52,820
Factory and that's about it here you can

00:15:48,920 --> 00:15:54,470
see a quick snippet so this is the

00:15:52,820 --> 00:15:57,800
property you find in your package JSON

00:15:54,470 --> 00:16:00,380
which will point to this which is the

00:15:57,800 --> 00:16:02,660
body of the collection the schematic

00:16:00,380 --> 00:16:05,029
collection the interesting thing here is

00:16:02,660 --> 00:16:06,950
like the main point of interest sorry is

00:16:05,029 --> 00:16:09,019
the schematics property which contains

00:16:06,950 --> 00:16:12,260
the definition of all of your schematics

00:16:09,019 --> 00:16:13,610
so their names will be you will have to

00:16:12,260 --> 00:16:18,200
be unique so they can be differentiated

00:16:13,610 --> 00:16:20,180
by apps using them and they have a short

00:16:18,200 --> 00:16:25,070
description in a factory the factory

00:16:20,180 --> 00:16:29,089
points to a function in the file like in

00:16:25,070 --> 00:16:32,510
that index GS file we mentioned and for

00:16:29,089 --> 00:16:34,100
our particular example schematic this

00:16:32,510 --> 00:16:36,170
will be the factory it's a simple

00:16:34,100 --> 00:16:42,470
function that takes in an object an

00:16:36,170 --> 00:16:45,500
options object which holds specifies the

00:16:42,470 --> 00:16:48,620
arguments did the did the rule will take

00:16:45,500 --> 00:16:50,269
into account when running so if you want

00:16:48,620 --> 00:16:53,060
to pass anything pass it through this

00:16:50,269 --> 00:16:55,100
object and then the factory returns a

00:16:53,060 --> 00:16:59,390
rule which will be executed on the tree

00:16:55,100 --> 00:17:01,399
the rule itself has access to the tree

00:16:59,390 --> 00:17:04,160
so the that abstraction of the file

00:17:01,399 --> 00:17:06,049
system and the context the context has a

00:17:04,160 --> 00:17:09,169
lot of useful stuff we'll touch on that

00:17:06,049 --> 00:17:14,689
later and this example schematic just

00:17:09,169 --> 00:17:20,030
logs like quick message now let's talk

00:17:14,689 --> 00:17:21,890
about more about the API so what it can

00:17:20,030 --> 00:17:24,829
do with the schematics they expose a

00:17:21,890 --> 00:17:27,290
vast API which allows you to do all

00:17:24,829 --> 00:17:32,030
sorts of stuff including but not limited

00:17:27,290 --> 00:17:35,270
to manipulating files and doing all sort

00:17:32,030 --> 00:17:38,630
of creation of de deletion two things in

00:17:35,270 --> 00:17:41,390
the PI system or directories through the

00:17:38,630 --> 00:17:43,730
context you can log messages as we saw

00:17:41,390 --> 00:17:46,760
in the example schematic or chain

00:17:43,730 --> 00:17:49,740
different tasks so you can change NPM

00:17:46,760 --> 00:17:53,760
package installs or

00:17:49,740 --> 00:17:57,809
get fasts or even change our schematics

00:17:53,760 --> 00:17:59,640
which we'll do an example and last but

00:17:57,809 --> 00:18:02,400
not least it allows you to chain rules

00:17:59,640 --> 00:18:05,040
so operations on the files on the tree

00:18:02,400 --> 00:18:09,150
can be chained inside of the body of a

00:18:05,040 --> 00:18:11,940
schematic and also he emerged three

00:18:09,150 --> 00:18:15,990
states which we talked about earlier and

00:18:11,940 --> 00:18:17,910
we'll touch more later to better

00:18:15,990 --> 00:18:21,059
illustrate this we'll go through an

00:18:17,910 --> 00:18:23,490
example scenario we will we will create

00:18:21,059 --> 00:18:25,920
two schematics and call them in a third

00:18:23,490 --> 00:18:30,570
separate one one of our schematics will

00:18:25,920 --> 00:18:32,340
blog a message pretty basic our second

00:18:30,570 --> 00:18:36,690
one we'll create a file using the tree

00:18:32,340 --> 00:18:39,840
API and our third one will just change

00:18:36,690 --> 00:18:43,110
in using this context API to create the

00:18:39,840 --> 00:18:46,110
tasks and this is the expected output we

00:18:43,110 --> 00:18:49,170
can see like we expect to see a message

00:18:46,110 --> 00:18:51,900
and a printing the calls over the doll

00:18:49,170 --> 00:18:55,830
file was created so this would be our

00:18:51,900 --> 00:18:57,570
package or collection JSON sorry it

00:18:55,830 --> 00:18:59,309
would hold the definition of both the

00:18:57,570 --> 00:19:01,920
schematics so the config schematic will

00:18:59,309 --> 00:19:02,400
be one let's create the files our

00:19:01,920 --> 00:19:03,900
greeter

00:19:02,400 --> 00:19:06,330
will be the one that displays the

00:19:03,900 --> 00:19:11,520
message and our combined will be the one

00:19:06,330 --> 00:19:14,100
combines both how we do this is for the

00:19:11,520 --> 00:19:16,950
config schematic the first one we'll be

00:19:14,100 --> 00:19:19,980
using the tree API to create files as

00:19:16,950 --> 00:19:22,230
you can see we can check for existence

00:19:19,980 --> 00:19:24,179
of files so we can read the package JSON

00:19:22,230 --> 00:19:26,820
if it exists if it doesn't throw an

00:19:24,179 --> 00:19:30,050
error from the package JSON once we've

00:19:26,820 --> 00:19:33,600
read it we can take the content and

00:19:30,050 --> 00:19:35,429
write the contents in another file like

00:19:33,600 --> 00:19:37,380
we can take the name sorry we can take

00:19:35,429 --> 00:19:39,630
the name of the package from the package

00:19:37,380 --> 00:19:42,870
JSON and write it in another file so

00:19:39,630 --> 00:19:45,420
like a config file of sorts using a

00:19:42,870 --> 00:19:49,920
simple json stringify you know this is

00:19:45,420 --> 00:19:51,840
done through tree api from the context

00:19:49,920 --> 00:19:54,240
api we'll be taking advantage of the

00:19:51,840 --> 00:19:57,870
expose logger which gives us the

00:19:54,240 --> 00:19:59,910
opportunity to log messages like info or

00:19:57,870 --> 00:20:03,590
error messages if you want to stress out

00:19:59,910 --> 00:20:05,690
your users or warnings we

00:20:03,590 --> 00:20:10,010
simply just go context don't lager and

00:20:05,690 --> 00:20:13,400
yeah info or error or warning and it

00:20:10,010 --> 00:20:16,669
logs a message in the console and we'll

00:20:13,400 --> 00:20:19,909
also be using it to execute tasks as

00:20:16,669 --> 00:20:24,770
said there's an robust API that allows

00:20:19,909 --> 00:20:25,309
you to chain tasks define in chain test

00:20:24,770 --> 00:20:27,770
sorry

00:20:25,309 --> 00:20:30,200
and we'll be using this one run

00:20:27,770 --> 00:20:32,809
schematic tasks which runs a schematic

00:20:30,200 --> 00:20:34,809
from the current collection we have the

00:20:32,809 --> 00:20:39,230
greeter in config tasks already

00:20:34,809 --> 00:20:42,080
configured in collection and finally we

00:20:39,230 --> 00:20:43,940
have the options object which we can

00:20:42,080 --> 00:20:46,070
pass to the ran to the schematics

00:20:43,940 --> 00:20:47,990
running we're just past nothing because

00:20:46,070 --> 00:20:50,510
they don't care about the options these

00:20:47,990 --> 00:20:53,659
two in particular and afterwards we just

00:20:50,510 --> 00:20:57,710
chained them by doing context add task

00:20:53,659 --> 00:21:00,260
the task predefined and for the second

00:20:57,710 --> 00:21:02,450
one we do content add task the task we

00:21:00,260 --> 00:21:05,179
defined and this here the second

00:21:02,450 --> 00:21:09,200
argument is an array with IDs to which

00:21:05,179 --> 00:21:12,230
for which this task is dependent so it

00:21:09,200 --> 00:21:15,429
should wait for those and if this is

00:21:12,230 --> 00:21:18,950
executed finally it would execute this

00:21:15,429 --> 00:21:24,710
in an order next we'll go over a quick

00:21:18,950 --> 00:21:27,169
example of how to create your components

00:21:24,710 --> 00:21:32,029
connect to the one we showed which would

00:21:27,169 --> 00:21:36,679
also expand upon the the schematics API

00:21:32,029 --> 00:21:39,380
which we're currently going over so what

00:21:36,679 --> 00:21:41,270
we'd like to do is create a component

00:21:39,380 --> 00:21:44,890
example that that's an a custom

00:21:41,270 --> 00:21:48,230
component to an existing angular project

00:21:44,890 --> 00:21:51,260
by adding the component we mean similar

00:21:48,230 --> 00:21:57,440
is an GGC so creates the component files

00:21:51,260 --> 00:22:00,320
and adds the component to the app module

00:21:57,440 --> 00:22:03,350
but we want to further expand on that

00:22:00,320 --> 00:22:06,409
and creates not just the component with

00:22:03,350 --> 00:22:09,620
the blank key works as the blank in GC

00:22:06,409 --> 00:22:11,510
components are all we'd want to template

00:22:09,620 --> 00:22:14,720
the inputs and be able to pass a name

00:22:11,510 --> 00:22:17,330
for it and the type so to do this we'll

00:22:14,720 --> 00:22:19,430
take advantage of the following

00:22:17,330 --> 00:22:22,520
whale strictly typed the input for the

00:22:19,430 --> 00:22:25,070
somatic itself so it would be able to

00:22:22,520 --> 00:22:29,330
accept two parameters so the name and

00:22:25,070 --> 00:22:31,550
the type since we'll be doing a lot of

00:22:29,330 --> 00:22:35,060
stuff that we want to do a lot of the

00:22:31,550 --> 00:22:39,310
angular since GC does we'll call it

00:22:35,060 --> 00:22:43,670
internally and then build upon it and

00:22:39,310 --> 00:22:47,570
finally we'll use it some baking API

00:22:43,670 --> 00:22:52,010
exposed by the schematics which would

00:22:47,570 --> 00:22:54,980
allow us to change the the templates the

00:22:52,010 --> 00:22:58,130
templates the files sorry of the created

00:22:54,980 --> 00:23:01,760
in GGC component in build on top of them

00:22:58,130 --> 00:23:06,020
so we can change what is visualized this

00:23:01,760 --> 00:23:08,210
is what we want to input in our command

00:23:06,020 --> 00:23:11,270
line in the output we want to be files

00:23:08,210 --> 00:23:13,790
so I'll show you how it's done like in

00:23:11,270 --> 00:23:16,160
action I guess more like with

00:23:13,790 --> 00:23:22,310
preparation because we sort of yeah you

00:23:16,160 --> 00:23:24,650
don't but hey we'll go over house so

00:23:22,310 --> 00:23:27,050
yeah this is a simple schematics project

00:23:24,650 --> 00:23:30,620
as you can see we have the collection

00:23:27,050 --> 00:23:32,720
Jason this is the basic schematic we

00:23:30,620 --> 00:23:34,640
showed the one with the logger this is

00:23:32,720 --> 00:23:36,650
our component schematic as you can see

00:23:34,640 --> 00:23:39,230
you have a description it creates a

00:23:36,650 --> 00:23:41,810
component pretty simple a factory which

00:23:39,230 --> 00:23:44,840
pointers points to this index yes unless

00:23:41,810 --> 00:23:48,590
chemo which is the new thing with the

00:23:44,840 --> 00:23:50,990
schema you can control what arguments

00:23:48,590 --> 00:23:58,130
your schematic accepts so if we go to

00:23:50,990 --> 00:23:59,510
this to zoom in a little bit because the

00:23:58,130 --> 00:24:02,270
other visual studio is our input this

00:23:59,510 --> 00:24:05,210
one didn't this points to this schema

00:24:02,270 --> 00:24:08,930
and the schema defines like what inputs

00:24:05,210 --> 00:24:11,450
the schematic accepts so it's a normal

00:24:08,930 --> 00:24:14,780
Jason the interesting property is this

00:24:11,450 --> 00:24:16,910
properties which defines a collection of

00:24:14,780 --> 00:24:20,530
all the arguments you can pass to your

00:24:16,910 --> 00:24:22,700
schematic so here we want to name inside

00:24:20,530 --> 00:24:25,400
as you can see you can define a

00:24:22,700 --> 00:24:29,300
description for your property outside so

00:24:25,400 --> 00:24:30,010
strange boolean number and on bronze

00:24:29,300 --> 00:24:32,560
which

00:24:30,010 --> 00:24:37,780
interesting if the property is not

00:24:32,560 --> 00:24:40,420
provided you can prompt the user to to

00:24:37,780 --> 00:24:41,890
enter something so in this case if it's

00:24:40,420 --> 00:24:44,310
Stringer's we'll say hey please provide

00:24:41,890 --> 00:24:47,890
a name and you have to type in a string

00:24:44,310 --> 00:24:50,230
you can even provide a list so if your

00:24:47,890 --> 00:24:54,220
property is a hasn't it known it will

00:24:50,230 --> 00:24:58,810
only save values of that list

00:24:54,220 --> 00:25:00,370
so here the focus card and what type

00:24:58,810 --> 00:25:02,410
would you what type of component would

00:25:00,370 --> 00:25:04,300
you like to that so yeah it will display

00:25:02,410 --> 00:25:08,050
a list where you can choose from similar

00:25:04,300 --> 00:25:11,920
to our CLI that we showed in the

00:25:08,050 --> 00:25:14,770
beginning since this is typescript we

00:25:11,920 --> 00:25:16,960
might as well type our options in put

00:25:14,770 --> 00:25:17,680
into the factory so yeah we have a type

00:25:16,960 --> 00:25:20,590
on a name

00:25:17,680 --> 00:25:22,510
both are spring and if we go into the

00:25:20,590 --> 00:25:24,970
component factory for the components

00:25:22,510 --> 00:25:27,610
into the factory for the component

00:25:24,970 --> 00:25:31,030
schematic we can see yeah it accepts

00:25:27,610 --> 00:25:32,950
options of site component and then it

00:25:31,030 --> 00:25:36,090
tries to read your angular Jason if you

00:25:32,950 --> 00:25:39,520
don't have it it throws standard stuff

00:25:36,090 --> 00:25:45,700
and it all and does all this - just get

00:25:39,520 --> 00:25:51,040
the source route so app - a source dot -

00:25:45,700 --> 00:25:53,890
app and you'd see it returns a chain of

00:25:51,040 --> 00:25:58,420
two executions now what a chain does is

00:25:53,890 --> 00:26:01,780
do two rules in order on the word tree

00:25:58,420 --> 00:26:04,090
so what we want to do here is since you

00:26:01,780 --> 00:26:06,940
want to create a component first we want

00:26:04,090 --> 00:26:08,950
to call the angular component schematic

00:26:06,940 --> 00:26:12,040
because it's already done we believe it

00:26:08,950 --> 00:26:13,810
works we know it's tested so there's no

00:26:12,040 --> 00:26:17,050
need for us to reinvent the wheel we can

00:26:13,810 --> 00:26:20,980
when we can already use it how we do

00:26:17,050 --> 00:26:23,500
this is by using the external schematic

00:26:20,980 --> 00:26:27,010
method which is again provided by the

00:26:23,500 --> 00:26:29,460
API specify the collection which this is

00:26:27,010 --> 00:26:32,650
the collection with the defaults

00:26:29,460 --> 00:26:35,140
schematics is pulled by angular see you

00:26:32,650 --> 00:26:38,710
like oh this is the name on the

00:26:35,140 --> 00:26:42,720
schematic so component and the options

00:26:38,710 --> 00:26:42,720
we just want to pass options name

00:26:43,160 --> 00:26:47,910
when we run this this will create a

00:26:45,930 --> 00:26:52,770
component in our treat just the same as

00:26:47,910 --> 00:26:55,380
running in GGC name the second thing and

00:26:52,770 --> 00:26:59,460
the second part is the more trickier

00:26:55,380 --> 00:27:03,090
part here we're merging a source with

00:26:59,460 --> 00:27:06,570
the actual Tresor so what's a source

00:27:03,090 --> 00:27:09,780
well it's the state of the Tresor say

00:27:06,570 --> 00:27:15,140
and how do we get the source well we'll

00:27:09,780 --> 00:27:15,140
get it from arts and plates so angular's

00:27:15,320 --> 00:27:23,610
sorry the schematic actually API exposes

00:27:20,340 --> 00:27:26,460
a great range of functions which you can

00:27:23,610 --> 00:27:29,700
use to template your files so we can

00:27:26,460 --> 00:27:31,500
just write these as a string here but it

00:27:29,700 --> 00:27:35,190
will quickly get out of hand

00:27:31,500 --> 00:27:36,960
in terms of manageability so what we do

00:27:35,190 --> 00:27:42,060
what we're going to do is create our own

00:27:36,960 --> 00:27:43,800
templates so under the component file

00:27:42,060 --> 00:27:47,730
where we define our schematic as well

00:27:43,800 --> 00:27:49,650
we'll put a folder with files and files

00:27:47,730 --> 00:27:53,490
per type since we only have card it's

00:27:49,650 --> 00:27:55,710
only car here and in it we create we

00:27:53,490 --> 00:27:59,820
will define arts in place like this

00:27:55,710 --> 00:28:03,810
so if you can see the names you can see

00:27:59,820 --> 00:28:07,560
that they're a bit odd so and that's in

00:28:03,810 --> 00:28:11,220
plate itself it's not all that different

00:28:07,560 --> 00:28:14,160
from a component es file so type script

00:28:11,220 --> 00:28:17,250
file but you can see all these things

00:28:14,160 --> 00:28:19,970
they're kind of out of place well that's

00:28:17,250 --> 00:28:24,150
where dozen training comes in these

00:28:19,970 --> 00:28:28,320
brackets and % mean start evaluating an

00:28:24,150 --> 00:28:30,600
expression this - wise name and here

00:28:28,320 --> 00:28:33,000
classify name or actually it's persons

00:28:30,600 --> 00:28:36,510
that are going to be evaluated and this

00:28:33,000 --> 00:28:40,610
means stop evaluating for the path of

00:28:36,510 --> 00:28:43,470
the file itself these are done with

00:28:40,610 --> 00:28:46,260
double underscore and if you want to

00:28:43,470 --> 00:28:49,800
call a method you won't use brackets

00:28:46,260 --> 00:28:52,650
like in it's in place but you used at so

00:28:49,800 --> 00:28:56,080
name at there so it's kind of like a

00:28:52,650 --> 00:29:01,320
pipe in your angular components and

00:28:56,080 --> 00:29:04,090
like but instead of a line you use app

00:29:01,320 --> 00:29:06,250
and all the files have a dots and break

00:29:04,090 --> 00:29:08,080
in the ends don't worry about that this

00:29:06,250 --> 00:29:11,140
is actually pretty convenient because if

00:29:08,080 --> 00:29:12,970
you have a dot TS file which needs to be

00:29:11,140 --> 00:29:17,309
compared you don't have to actually like

00:29:12,970 --> 00:29:20,200
write custom rules for your TS config to

00:29:17,309 --> 00:29:23,679
skip over it it will just skip over it

00:29:20,200 --> 00:29:27,309
in the schematics templating API takes

00:29:23,679 --> 00:29:29,769
care of this so the way we call this is

00:29:27,309 --> 00:29:33,070
take all these files back in our

00:29:29,769 --> 00:29:35,470
schematics body take all these files and

00:29:33,070 --> 00:29:37,510
apply complaints on them so apply

00:29:35,470 --> 00:29:40,210
complaining on them is basically code

00:29:37,510 --> 00:29:42,460
with a simple dictionary object where we

00:29:40,210 --> 00:29:44,740
have definitions for these - arise and

00:29:42,460 --> 00:29:47,470
classify method functions which you saw

00:29:44,740 --> 00:29:50,889
in the template well they're actually

00:29:47,470 --> 00:29:54,880
pretty standard exposed by the by the

00:29:50,889 --> 00:29:56,950
schematics API as well classify turns

00:29:54,880 --> 00:29:59,799
the string into a class name so camel

00:29:56,950 --> 00:30:07,299
case with first letter being uppercase

00:29:59,799 --> 00:30:09,100
and that rise does yeah and the name is

00:30:07,299 --> 00:30:11,440
the name we want for our component so

00:30:09,100 --> 00:30:14,200
all of these will be evaluated in the

00:30:11,440 --> 00:30:15,460
templates and afterwards we just want to

00:30:14,200 --> 00:30:19,240
move these because the source is

00:30:15,460 --> 00:30:22,480
currently starting from here we want to

00:30:19,240 --> 00:30:28,620
move these to the default app root which

00:30:22,480 --> 00:30:30,789
we get here so source source - app and

00:30:28,620 --> 00:30:34,210
finally in the chain what this will do

00:30:30,789 --> 00:30:39,250
is apply this source so the changes we

00:30:34,210 --> 00:30:43,590
want to do on the files with the current

00:30:39,250 --> 00:30:46,840
state so the state where it already has

00:30:43,590 --> 00:30:48,809
the angular components fed out and we'll

00:30:46,840 --> 00:30:51,399
use merge strategy override because

00:30:48,809 --> 00:30:54,840
those are two sets of changes and you

00:30:51,399 --> 00:31:00,519
want the latest to come in so these and

00:30:54,840 --> 00:31:03,669
we can quickly build this by running NPM

00:31:00,519 --> 00:31:08,760
run build I'll just run the building

00:31:03,669 --> 00:31:08,760
I'll switch to the more zoomed in

00:31:08,880 --> 00:31:12,780
yeah I don't need this anymore

00:31:13,530 --> 00:31:19,450
so if we go into the to another blank

00:31:17,950 --> 00:31:23,410
project this is just a project where I

00:31:19,450 --> 00:31:28,540
dump leads we can call the schematic by

00:31:23,410 --> 00:31:30,210
doing an GG similar to the first time

00:31:28,540 --> 00:31:33,040
but this time we'll pass

00:31:30,210 --> 00:31:38,280
relative URLs to the collection Jason so

00:31:33,040 --> 00:31:41,800
when GGC enjoy schematic source

00:31:38,280 --> 00:31:44,590
collection Jason and the name of the

00:31:41,800 --> 00:31:46,560
schematic so component and if

00:31:44,590 --> 00:31:51,070
everything's correct this should run

00:31:46,560 --> 00:31:53,050
yeah see then the front which we put in

00:31:51,070 --> 00:31:55,810
for the name is now prompted because we

00:31:53,050 --> 00:32:00,280
didn't input any name so our name can be

00:31:55,810 --> 00:32:02,830
cool card or something and it prompts us

00:32:00,280 --> 00:32:05,620
with a list of types of components to

00:32:02,830 --> 00:32:08,350
choose we only have a card so I guess

00:32:05,620 --> 00:32:10,630
we'll choose a card as you can see our

00:32:08,350 --> 00:32:14,200
inputs that these components are all

00:32:10,630 --> 00:32:18,460
added to the into the existing project

00:32:14,200 --> 00:32:21,400
if we look into the project in Visual

00:32:18,460 --> 00:32:27,700
Studio code I heard I don't cap and get

00:32:21,400 --> 00:32:30,600
three foster all I do is just slow if we

00:32:27,700 --> 00:32:33,160
check here you can see that all of these

00:32:30,600 --> 00:32:36,700
parts in the templates which we want it

00:32:33,160 --> 00:32:40,810
to be a valid or properly displayed here

00:32:36,700 --> 00:32:44,650
so you have a pool card instead of app -

00:32:40,810 --> 00:32:50,650
tries name and cool card for the

00:32:44,650 --> 00:32:56,020
component name so I hope this was

00:32:50,650 --> 00:32:58,870
helpful and I'll be turning over to

00:32:56,020 --> 00:33:00,940
Damian just as a reminder you could if

00:32:58,870 --> 00:33:02,860
you're liking the seminar or I don't

00:33:00,940 --> 00:33:05,590
know if you're hating it because you can

00:33:02,860 --> 00:33:07,690
tweet at us on Twitter with Adam for

00:33:05,590 --> 00:33:10,510
gistic sand heading for ng call for a

00:33:07,690 --> 00:33:12,700
chance to win a one-year subscription to

00:33:10,510 --> 00:33:14,560
with Mike your wife render and do all

00:33:12,700 --> 00:33:19,930
sorts of cool stuff with schematics in

00:33:14,560 --> 00:33:21,700
our packages so Damian back to you

00:33:19,930 --> 00:33:27,760
I think it's Universal than

00:33:21,700 --> 00:33:29,309
everyone loves it so far so it's great

00:33:27,760 --> 00:33:33,549
oh yeah

00:33:29,309 --> 00:33:37,990
keep up the twitter chat as well right

00:33:33,549 --> 00:33:40,389
alright so I hope that showed you a

00:33:37,990 --> 00:33:42,850
basic glimpse into the schematics and

00:33:40,389 --> 00:33:45,669
what you can do and so far we've talked

00:33:42,850 --> 00:33:47,769
about mostly general purpose kinetics

00:33:45,669 --> 00:33:50,440
something can generate or something can

00:33:47,769 --> 00:33:52,899
automate either using dereference

00:33:50,440 --> 00:33:55,750
hematochezia live or benji generate

00:33:52,899 --> 00:33:57,880
command but if you want to go further

00:33:55,750 --> 00:34:00,549
there is some specific there's some

00:33:57,880 --> 00:34:02,620
points specific to the angular CLI that

00:34:00,549 --> 00:34:04,049
you can plug into and that's really

00:34:02,620 --> 00:34:08,379
where the fun starts

00:34:04,049 --> 00:34:10,839
so of course you all know ingénue

00:34:08,379 --> 00:34:13,780
command that's how we all start right

00:34:10,839 --> 00:34:16,720
but the thing is you can create a

00:34:13,780 --> 00:34:18,399
somatic that handles ingénue and that

00:34:16,720 --> 00:34:23,020
will be run when creating a new project

00:34:18,399 --> 00:34:26,349
of course the way to the way to tell the

00:34:23,020 --> 00:34:27,849
ingénue command to handle creation with

00:34:26,349 --> 00:34:30,099
your schematic instead of what it

00:34:27,849 --> 00:34:33,010
usually does is by overriding the

00:34:30,099 --> 00:34:35,889
collection entirely which is instead

00:34:33,010 --> 00:34:37,929
rather than the semicolon thing is

00:34:35,889 --> 00:34:40,859
actually done to a separate parameter

00:34:37,929 --> 00:34:44,889
you have to pass in but that's fine and

00:34:40,859 --> 00:34:48,429
of course you can already imagine what

00:34:44,889 --> 00:34:50,889
this can do right so say you already add

00:34:48,429 --> 00:34:54,339
two libraries when you start a new

00:34:50,889 --> 00:34:57,910
project or you well for example you want

00:34:54,339 --> 00:34:58,750
RGGI stores or you want your setup to be

00:34:57,910 --> 00:35:01,390
just so

00:34:58,750 --> 00:35:03,400
in terms of structure this will let you

00:35:01,390 --> 00:35:06,280
do that every single time you make a

00:35:03,400 --> 00:35:09,550
fresh project it can be tailored to your

00:35:06,280 --> 00:35:10,930
custom needs so the way to set it up is

00:35:09,550 --> 00:35:13,300
surprise surprise

00:35:10,930 --> 00:35:16,119
you add a new entry to the schematics

00:35:13,300 --> 00:35:18,849
collection except this time the name

00:35:16,119 --> 00:35:21,550
cannot be of your own choosing it has to

00:35:18,849 --> 00:35:23,920
be named ng - new because that is the

00:35:21,550 --> 00:35:27,460
way engineer command looks through your

00:35:23,920 --> 00:35:29,730
schematic collection and again below is

00:35:27,460 --> 00:35:32,950
a simple example of how to call that

00:35:29,730 --> 00:35:34,599
ingénue you pass in your collection in

00:35:32,950 --> 00:35:35,670
this case it's the same as the interest

00:35:34,599 --> 00:35:39,219
chimeric project

00:35:35,670 --> 00:35:42,089
but it can be anything else your own

00:35:39,219 --> 00:35:45,579
library and then you call it but and

00:35:42,089 --> 00:35:46,269
with great power and you know how that

00:35:45,579 --> 00:35:49,029
one goes

00:35:46,269 --> 00:35:52,029
you are really on your own after this

00:35:49,029 --> 00:35:54,189
point because once you once you write

00:35:52,029 --> 00:35:56,709
the collection on ingénue it will run

00:35:54,189 --> 00:35:59,859
your schematic only with the options you

00:35:56,709 --> 00:36:01,749
specify so anything you need created for

00:35:59,859 --> 00:36:03,219
the product structure you have to do

00:36:01,749 --> 00:36:05,650
yourself even something as benign as

00:36:03,219 --> 00:36:08,709
package.json or getting our file that's

00:36:05,650 --> 00:36:10,839
all on you now and thankfully because

00:36:08,709 --> 00:36:14,380
this is a schematic just like any other

00:36:10,839 --> 00:36:16,869
you can go ahead and reuse these

00:36:14,380 --> 00:36:19,539
schematics that angular has by default

00:36:16,869 --> 00:36:21,579
using their collection so yeah you can

00:36:19,539 --> 00:36:23,920
do that and then build on top of it or

00:36:21,579 --> 00:36:30,489
you can do something completely a custom

00:36:23,920 --> 00:36:32,410
that's up entirely up to you and then we

00:36:30,489 --> 00:36:36,279
have two commands that go hand-in-hand

00:36:32,410 --> 00:36:38,799
quite often that's mg add an NG update

00:36:36,279 --> 00:36:42,189
and the hooks for those and they are

00:36:38,799 --> 00:36:45,369
more geared toward towards libraries and

00:36:42,189 --> 00:36:47,349
their support their lifecycle and the

00:36:45,369 --> 00:36:50,410
first one I'm jihad runs when you

00:36:47,349 --> 00:36:53,559
install a library in a project and then

00:36:50,410 --> 00:36:55,689
ng update runs when you install a newer

00:36:53,559 --> 00:37:00,099
version of that library in a project

00:36:55,689 --> 00:37:03,400
right and when if that sounds an awful

00:37:00,099 --> 00:37:06,519
lot like a simple post install book we

00:37:03,400 --> 00:37:09,729
hear you but there's a significant

00:37:06,519 --> 00:37:12,189
distinction here this is better let me

00:37:09,729 --> 00:37:15,400
tell you I um I don't know about you

00:37:12,189 --> 00:37:17,799
guys but when I install a package I

00:37:15,400 --> 00:37:20,079
don't particularly expect a post install

00:37:17,799 --> 00:37:23,410
script to go ahead and touch any of my

00:37:20,079 --> 00:37:24,939
project source or spam my logs for that

00:37:23,410 --> 00:37:28,660
matter but that's a different story

00:37:24,939 --> 00:37:31,979
right but when I run in G odd or in G

00:37:28,660 --> 00:37:34,569
update I don't only expect I am NOT

00:37:31,979 --> 00:37:36,880
surprised by this I'm actually counting

00:37:34,569 --> 00:37:39,789
on it I'm expecting it I need this

00:37:36,880 --> 00:37:42,369
there's a clear communication of intent

00:37:39,789 --> 00:37:44,859
when somebody calls in G and they want

00:37:42,369 --> 00:37:47,829
your schematic to run pretty project

00:37:44,859 --> 00:37:49,210
they're asking for you to set it up or

00:37:47,829 --> 00:37:51,640
they asking it to me

00:37:49,210 --> 00:37:54,480
changes to make their project work even

00:37:51,640 --> 00:37:57,460
after the update right and as long as

00:37:54,480 --> 00:37:59,680
everyone knows about ng Aden ng update

00:37:57,460 --> 00:38:01,660
and uses them it creates a great

00:37:59,680 --> 00:38:05,080
ecosystem that you can create that you

00:38:01,660 --> 00:38:08,050
can make better at least for your users

00:38:05,080 --> 00:38:11,080
you can ease their set up their own

00:38:08,050 --> 00:38:15,100
boarding and the pains they might face

00:38:11,080 --> 00:38:18,040
while updating okay so a little bit of

00:38:15,100 --> 00:38:21,130
detail how to get how to set up your

00:38:18,040 --> 00:38:24,310
library or package within with hooks for

00:38:21,130 --> 00:38:27,070
in jad no surprise there

00:38:24,310 --> 00:38:28,870
it's again a schematic it will run when

00:38:27,070 --> 00:38:31,060
you go in jab just like we did at the

00:38:28,870 --> 00:38:33,010
start with ng at ignite why angular it

00:38:31,060 --> 00:38:37,840
will be run when your package is

00:38:33,010 --> 00:38:41,230
installed in a project and again this is

00:38:37,840 --> 00:38:43,600
something that can make onboarding for

00:38:41,230 --> 00:38:45,490
new users extremely easy because you can

00:38:43,600 --> 00:38:47,980
do all the configuration just like we

00:38:45,490 --> 00:38:50,800
did install additional packages make

00:38:47,980 --> 00:38:52,540
config changes setup styling set up

00:38:50,800 --> 00:38:55,540
everything for him so they would not

00:38:52,540 --> 00:38:59,080
have to do it themselves again nothing

00:38:55,540 --> 00:39:01,930
too surprising there a new entry in the

00:38:59,080 --> 00:39:04,030
schematics collection again the name

00:39:01,930 --> 00:39:06,070
cannot be of your own choosing it has to

00:39:04,030 --> 00:39:08,850
be in G dash ad except this time we

00:39:06,070 --> 00:39:12,010
don't even need to help hustle with the

00:39:08,850 --> 00:39:13,390
collection at all because ng odd is

00:39:12,010 --> 00:39:16,330
already called with your specific

00:39:13,390 --> 00:39:18,940
library in the name so we don't have to

00:39:16,330 --> 00:39:22,150
do anything else and then of course come

00:39:18,940 --> 00:39:25,660
come the migration so you've made your

00:39:22,150 --> 00:39:27,850
shiny awesome awesome library and then

00:39:25,660 --> 00:39:30,700
you made it easy for users to adopt it

00:39:27,850 --> 00:39:32,170
using ng ad and they're happy now when

00:39:30,700 --> 00:39:35,170
you have a bunch of happy users that

00:39:32,170 --> 00:39:36,820
report some issues or maybe they log

00:39:35,170 --> 00:39:40,030
feature requests for some great features

00:39:36,820 --> 00:39:42,790
and then you start implementing those

00:39:40,030 --> 00:39:45,430
and you realize well they're the things

00:39:42,790 --> 00:39:47,890
I made in the first version those will

00:39:45,430 --> 00:39:50,320
have to change a little bit like my

00:39:47,890 --> 00:39:52,390
public API or some configuration my

00:39:50,320 --> 00:39:54,850
library needs those who need to change

00:39:52,390 --> 00:39:58,240
for the new version to support those new

00:39:54,850 --> 00:40:00,340
great features and then I know it's our

00:39:58,240 --> 00:40:02,609
favorite past-time reading endless

00:40:00,340 --> 00:40:05,609
change logs but user

00:40:02,609 --> 00:40:09,420
not really like that most of us would

00:40:05,609 --> 00:40:12,809
just rather get it ready and not do too

00:40:09,420 --> 00:40:16,049
much and not face any breaking changes

00:40:12,809 --> 00:40:20,640
at all if possible and then just go to

00:40:16,049 --> 00:40:23,309
work so when we see migrations there is

00:40:20,640 --> 00:40:27,089
a certain distinction so why is that

00:40:23,309 --> 00:40:29,430
well don't you worry there's still

00:40:27,089 --> 00:40:31,499
schematics but they're special in a

00:40:29,430 --> 00:40:34,289
sense because they're configured just a

00:40:31,499 --> 00:40:36,150
little bit differently like from the set

00:40:34,289 --> 00:40:38,309
from everything else you do with your

00:40:36,150 --> 00:40:41,430
schematics collection so the way you

00:40:38,309 --> 00:40:44,249
call these is similar to ng add you go

00:40:41,430 --> 00:40:46,200
and chip date and then your library name

00:40:44,249 --> 00:40:48,599
and then you can also specify version

00:40:46,200 --> 00:40:50,369
it's basically like npm install' we are

00:40:48,599 --> 00:40:53,400
not kind of like that

00:40:50,369 --> 00:40:55,980
ng @ is kind of the same as well but

00:40:53,400 --> 00:41:00,180
again different purpose in an intent

00:40:55,980 --> 00:41:03,150
communicated through Ning those so again

00:41:00,180 --> 00:41:05,099
those are extremely useful for both you

00:41:03,150 --> 00:41:07,859
and the people that are using your

00:41:05,099 --> 00:41:11,460
schematics for libraries so we make use

00:41:07,859 --> 00:41:14,759
of those extensively for one main reason

00:41:11,460 --> 00:41:18,380
confidence it gives us the confidence as

00:41:14,759 --> 00:41:22,170
developers and vendors for a library

00:41:18,380 --> 00:41:25,109
such as ignite why for angular to make

00:41:22,170 --> 00:41:27,569
changes when we have to because we can

00:41:25,109 --> 00:41:30,630
migrate those and it also gives our

00:41:27,569 --> 00:41:32,759
users the confidence to run the next

00:41:30,630 --> 00:41:34,799
update and grab the shiny features

00:41:32,759 --> 00:41:36,869
because they should not be worried that

00:41:34,799 --> 00:41:39,299
their projects gonna break if they run

00:41:36,869 --> 00:41:42,029
if they get the new version because

00:41:39,299 --> 00:41:45,109
we'll handle that for them great so you

00:41:42,029 --> 00:41:49,259
can imagine how useful that would be

00:41:45,109 --> 00:41:51,180
okay so this is gonna be a little bit

00:41:49,259 --> 00:41:54,180
different this time because migrations

00:41:51,180 --> 00:41:57,180
are actually laser focused on their own

00:41:54,180 --> 00:42:00,059
thing and since you're expected to have

00:41:57,180 --> 00:42:02,210
an ever-growing number of them they're

00:42:00,059 --> 00:42:06,029
actually live in a separate collection

00:42:02,210 --> 00:42:07,980
although similarly used to use a

00:42:06,029 --> 00:42:11,309
property in your package Jason to point

00:42:07,980 --> 00:42:13,410
that collection and the major difference

00:42:11,309 --> 00:42:14,220
for those schematics is they each come

00:42:13,410 --> 00:42:18,599
with a version

00:42:14,220 --> 00:42:21,180
that specifies at which point should ng

00:42:18,599 --> 00:42:24,690
ng updating the angular CLI will run

00:42:21,180 --> 00:42:26,910
which schematic or cymatics is it can do

00:42:24,690 --> 00:42:31,820
multiples we'll talk about that in a

00:42:26,910 --> 00:42:35,369
second so here's an example of a

00:42:31,820 --> 00:42:37,260
package.json snippet that points that

00:42:35,369 --> 00:42:39,750
has a ninja break property that points

00:42:37,260 --> 00:42:42,119
the emigration collection and in chip

00:42:39,750 --> 00:42:43,980
date is a property because there are

00:42:42,119 --> 00:42:47,400
some additional configurations you can

00:42:43,980 --> 00:42:49,260
uh you can add to updates but we're not

00:42:47,400 --> 00:42:53,280
gonna dive into those too much right now

00:42:49,260 --> 00:42:54,780
and similarly to your schematics

00:42:53,280 --> 00:42:57,660
collection your migrations collection

00:42:54,780 --> 00:43:00,720
also has cymatics except this time the

00:42:57,660 --> 00:43:03,750
name you give each schematic sentry such

00:43:00,720 --> 00:43:06,359
as migration one right here doesn't play

00:43:03,750 --> 00:43:09,780
much of a role at all outside of testing

00:43:06,359 --> 00:43:12,750
maybe what does play a major role is the

00:43:09,780 --> 00:43:16,800
version so now you can look you can see

00:43:12,750 --> 00:43:21,180
this is designated as a version 2.0 2.0

00:43:16,800 --> 00:43:23,820
2.0 so this will allow your users using

00:43:21,180 --> 00:43:26,609
the first version of your awesome

00:43:23,820 --> 00:43:28,260
library to update to version 2 and this

00:43:26,609 --> 00:43:29,820
schematic will be run when they when

00:43:28,260 --> 00:43:32,250
they update to version 2 and you can

00:43:29,820 --> 00:43:34,530
apply any changes you deem fit for their

00:43:32,250 --> 00:43:37,619
product to stay functional and what's

00:43:34,530 --> 00:43:40,200
great is once you never ibly reach to

00:43:37,619 --> 00:43:43,980
version 3 and you still have to make

00:43:40,200 --> 00:43:45,900
changes as per usual you can define yet

00:43:43,980 --> 00:43:49,080
another migration in this collection

00:43:45,900 --> 00:43:52,470
it'll be stamped is version 3.0 right

00:43:49,080 --> 00:43:55,619
and actually the great thing is angular

00:43:52,470 --> 00:43:57,780
CLI is smart enough to figure out if

00:43:55,619 --> 00:44:00,000
some user is actually still running

00:43:57,780 --> 00:44:01,619
version 1 if they're in they're updating

00:44:00,000 --> 00:44:04,530
to the latest version and those

00:44:01,619 --> 00:44:07,440
migrations are incremental and it will

00:44:04,530 --> 00:44:11,040
actually go on and run both derogations

00:44:07,440 --> 00:44:14,369
for version 2 and version 3 once they

00:44:11,040 --> 00:44:16,920
jump through the hook so it will ensure

00:44:14,369 --> 00:44:20,580
that all your changes no matter what

00:44:16,920 --> 00:44:24,630
version in between the way the user is

00:44:20,580 --> 00:44:27,570
updating from will be executed and this

00:44:24,630 --> 00:44:28,110
is a quick tip from us so if you're

00:44:27,570 --> 00:44:30,900
anything

00:44:28,110 --> 00:44:32,850
like us and you have a whole bunch of

00:44:30,900 --> 00:44:35,180
migrations then they'd just keep piling

00:44:32,850 --> 00:44:39,000
up since we keep releasing versions and

00:44:35,180 --> 00:44:40,980
you have more than one team working on

00:44:39,000 --> 00:44:43,790
your library or you accept open source

00:44:40,980 --> 00:44:47,130
contributions do yourself a favor

00:44:43,790 --> 00:44:50,220
make those migration make that migration

00:44:47,130 --> 00:44:52,530
logic reusable and configurable through

00:44:50,220 --> 00:44:56,220
something simple like for example this

00:44:52,530 --> 00:44:58,470
Jason that's our version of it but I've

00:44:56,220 --> 00:45:00,120
seen it implemented in other libraries

00:44:58,470 --> 00:45:02,940
and that's something I highly

00:45:00,120 --> 00:45:04,470
recommended you because you spare anyone

00:45:02,940 --> 00:45:07,020
else that is not you that you have

00:45:04,470 --> 00:45:08,490
written those migrations you spare them

00:45:07,020 --> 00:45:10,860
the need to actually understand

00:45:08,490 --> 00:45:15,450
schematics and migrations in detail to

00:45:10,860 --> 00:45:18,420
get something running all right fine so

00:45:15,450 --> 00:45:20,250
at this point I'm hoping you have an

00:45:18,420 --> 00:45:22,770
idea of what you can do with schematics

00:45:20,250 --> 00:45:24,630
and you have a bunch of things that you

00:45:22,770 --> 00:45:28,710
want to do when they're coming up and

00:45:24,630 --> 00:45:31,350
you it's a list and as well as once you

00:45:28,710 --> 00:45:33,390
start implementing functionality do you

00:45:31,350 --> 00:45:36,270
quickly come to the realization that you

00:45:33,390 --> 00:45:39,750
don't want to just generate files or

00:45:36,270 --> 00:45:42,150
overwrite generated content the whole

00:45:39,750 --> 00:45:45,780
thing you actually want to go into the

00:45:42,150 --> 00:45:49,320
source and make precision find little

00:45:45,780 --> 00:45:51,810
tweaks on tunes and make changes in the

00:45:49,320 --> 00:45:54,600
source and sure you can probably get

00:45:51,810 --> 00:45:56,430
away with string hunting and markup and

00:45:54,600 --> 00:45:59,640
you can probably get pretty precise and

00:45:56,430 --> 00:46:01,620
safe with that but trust me when when

00:45:59,640 --> 00:46:05,430
you go and touch the typescript files

00:46:01,620 --> 00:46:07,140
logic it's very hard to tell if you're

00:46:05,430 --> 00:46:09,870
actually editing the correct thing at

00:46:07,140 --> 00:46:12,480
the correct place so we don't really

00:46:09,870 --> 00:46:16,020
pretty with we don't particularly like

00:46:12,480 --> 00:46:17,700
breaking projects so we that's where

00:46:16,020 --> 00:46:20,340
typescript comes to the rescue

00:46:17,700 --> 00:46:22,980
now we normally associate typescript

00:46:20,340 --> 00:46:25,020
with the compiler it comes with and

00:46:22,980 --> 00:46:28,770
that's what everybody everybody's using

00:46:25,020 --> 00:46:32,790
but what you can do is actually tap into

00:46:28,770 --> 00:46:35,520
that compilers API which will allow you

00:46:32,790 --> 00:46:38,340
to parse that string source file gain

00:46:35,520 --> 00:46:41,010
insight on the source code itself and

00:46:38,340 --> 00:46:41,910
that will hopefully allow you to to make

00:46:41,010 --> 00:46:45,380
a correction

00:46:41,910 --> 00:46:47,640
in the code with surgical precision and

00:46:45,380 --> 00:46:50,730
typescript beating typescript of course

00:46:47,640 --> 00:46:52,740
you have interfaces for the core

00:46:50,730 --> 00:46:55,920
construct such as a program or source

00:46:52,740 --> 00:47:00,289
files within it and crucially a source

00:46:55,920 --> 00:47:04,500
file is also the root of a syntax tree

00:47:00,289 --> 00:47:07,109
that is a basically advertent a ssin of

00:47:04,500 --> 00:47:11,160
the entire source code you can traverse

00:47:07,109 --> 00:47:12,869
that tree you can you gain access to

00:47:11,160 --> 00:47:14,400
each and every single node you gain

00:47:12,869 --> 00:47:16,859
information about that node

00:47:14,400 --> 00:47:19,140
so you can touch on imports you can see

00:47:16,859 --> 00:47:20,940
what the import is about where it's from

00:47:19,140 --> 00:47:23,700
what it's importing variables their

00:47:20,940 --> 00:47:26,160
types basically all the other things the

00:47:23,700 --> 00:47:29,280
typescript compiler knows you can know

00:47:26,160 --> 00:47:31,619
as well and this snippet below is

00:47:29,280 --> 00:47:34,010
actually an example taken straight out

00:47:31,619 --> 00:47:35,309
of our migrations you tell us I believe

00:47:34,010 --> 00:47:37,740
so

00:47:35,309 --> 00:47:41,460
once you parse a source source string

00:47:37,740 --> 00:47:44,760
into a source file you can you can for

00:47:41,460 --> 00:47:46,740
example go over the top-level statements

00:47:44,760 --> 00:47:48,960
which include imports and class

00:47:46,740 --> 00:47:51,089
definitions there for example filter

00:47:48,960 --> 00:47:53,220
filter those out looking for import

00:47:51,089 --> 00:47:55,799
declaration this is something that we do

00:47:53,220 --> 00:47:58,079
for example in migrating rename changes

00:47:55,799 --> 00:48:00,510
and I'm gonna talk about that a lot I

00:47:58,079 --> 00:48:03,450
guess but this is something that we do

00:48:00,510 --> 00:48:05,910
when we hunt down for a for an import

00:48:03,450 --> 00:48:07,500
from our own package so we don't touch

00:48:05,910 --> 00:48:10,020
anything that we're not supposed to

00:48:07,500 --> 00:48:12,059
touch of course and we're looking for

00:48:10,020 --> 00:48:14,849
some imports that we have to rename or

00:48:12,059 --> 00:48:19,049
otherwise track further down in the code

00:48:14,849 --> 00:48:21,029
and manipulate so of course the syntax

00:48:19,049 --> 00:48:24,839
tree doesn't know it only give you

00:48:21,029 --> 00:48:28,589
access and knowledge on the source code

00:48:24,839 --> 00:48:31,109
you can also manipulate it so you can go

00:48:28,589 --> 00:48:33,180
ahead and create new nodes everything in

00:48:31,109 --> 00:48:35,640
the source tree is a node so you can

00:48:33,180 --> 00:48:38,670
create new nodes manipulate existing

00:48:35,640 --> 00:48:41,099
nodes or read and create new stuff so

00:48:38,670 --> 00:48:43,260
for example you can create a new import

00:48:41,099 --> 00:48:46,020
declaration or you can go ahead and

00:48:43,260 --> 00:48:48,420
touch on decorators the class decorators

00:48:46,020 --> 00:48:51,390
which would be the component on an image

00:48:48,420 --> 00:48:55,380
module decorators which we do constantly

00:48:51,390 --> 00:48:58,680
and now I know data is the best

00:48:55,380 --> 00:49:02,430
currency and the compiler API will give

00:48:58,680 --> 00:49:04,559
you D data but you have to do something

00:49:02,430 --> 00:49:07,829
with that data that matters that's what

00:49:04,559 --> 00:49:09,930
counts so one option to go ahead and do

00:49:07,829 --> 00:49:11,819
that would be to use something that

00:49:09,930 --> 00:49:14,309
builds on top of it and that will be the

00:49:11,819 --> 00:49:16,740
typescript language service and that

00:49:14,309 --> 00:49:21,269
will give you the smarts to your data if

00:49:16,740 --> 00:49:23,849
you will so it's about as powerful as it

00:49:21,269 --> 00:49:25,470
gets although I'm guessing there's a

00:49:23,849 --> 00:49:27,960
package out there that see if probably

00:49:25,470 --> 00:49:31,559
even more feature-rich but hey know

00:49:27,960 --> 00:49:33,539
what's right there so what you can do

00:49:31,559 --> 00:49:35,309
with with the language service I'm gonna

00:49:33,539 --> 00:49:37,920
give it just a quick example because

00:49:35,309 --> 00:49:42,680
I'll stick with the renaming theme so

00:49:37,920 --> 00:49:45,420
for example you can trace definitions or

00:49:42,680 --> 00:49:48,859
references just a variable or instance

00:49:45,420 --> 00:49:51,500
or find the rename locations for

00:49:48,859 --> 00:49:55,829
anything that you point it to which is

00:49:51,500 --> 00:50:00,390
basically like f12 and f2 commands and

00:49:55,829 --> 00:50:03,720
vyas code right and that's no that's no

00:50:00,390 --> 00:50:06,450
coincidence because the language service

00:50:03,720 --> 00:50:07,740
will give you just about anything you

00:50:06,450 --> 00:50:12,420
can imagine in terms of functionality

00:50:07,740 --> 00:50:15,599
although it is a lot definitely so you

00:50:12,420 --> 00:50:17,460
can trace a variable or a class back to

00:50:15,599 --> 00:50:20,009
its definition you can navigate code

00:50:17,460 --> 00:50:22,769
between matching braces if you want to

00:50:20,009 --> 00:50:25,289
single out the same a single block you

00:50:22,769 --> 00:50:28,230
can even check for errors after you've

00:50:25,289 --> 00:50:30,150
changed something or ask for code

00:50:28,230 --> 00:50:33,410
Corrections or go even wild and uber

00:50:30,150 --> 00:50:35,849
factors and if all that sounds familiar

00:50:33,410 --> 00:50:39,180
that's because the language service is

00:50:35,849 --> 00:50:41,130
basically what drives your ID your

00:50:39,180 --> 00:50:43,950
favorite development environment like

00:50:41,130 --> 00:50:46,049
this code so anything you can imagine in

00:50:43,950 --> 00:50:48,930
terms of feature you probably find it as

00:50:46,049 --> 00:50:52,109
a method of a service and now of course

00:50:48,930 --> 00:50:53,990
it wouldn't be that such additional

00:50:52,109 --> 00:50:57,569
power would not come without a cost

00:50:53,990 --> 00:51:00,750
right so a language service in

00:50:57,569 --> 00:51:02,759
typescript requires a host to run which

00:51:00,750 --> 00:51:05,869
is basically it's middleware to talk to

00:51:02,759 --> 00:51:08,480
your source code and I would normally

00:51:05,869 --> 00:51:10,070
just read off of the files

00:51:08,480 --> 00:51:13,130
but since we're running with schematics

00:51:10,070 --> 00:51:17,480
and those run with a virtual file system

00:51:13,130 --> 00:51:18,770
tree just like the one in there we'll

00:51:17,480 --> 00:51:19,340
have to do something a little bit

00:51:18,770 --> 00:51:21,950
special

00:51:19,340 --> 00:51:25,580
so when setting up a language service

00:51:21,950 --> 00:51:27,410
host the main the main version the main

00:51:25,580 --> 00:51:29,060
methods that you that we should be

00:51:27,410 --> 00:51:32,390
interested in is getting a snapshot

00:51:29,060 --> 00:51:35,690
which is the services' way to read your

00:51:32,390 --> 00:51:37,970
files and what you can do is bind that

00:51:35,690 --> 00:51:40,580
house to your virtual tree and use its

00:51:37,970 --> 00:51:45,470
API to return snapshots for the service

00:51:40,580 --> 00:51:47,210
and here's the catch though the method

00:51:45,470 --> 00:51:49,420
does exactly what it says on the tin it

00:51:47,210 --> 00:51:52,550
is a snapshot and the service does cache

00:51:49,420 --> 00:51:55,190
so the way to tell it to invalidate that

00:51:52,550 --> 00:51:57,350
cache is normally giving it the script

00:51:55,190 --> 00:52:00,680
version now there's a slight problem

00:51:57,350 --> 00:52:03,650
with that since the schematics virtual

00:52:00,680 --> 00:52:07,160
tree API doesn't really provide at least

00:52:03,650 --> 00:52:09,500
not publicly there is no timestamp on

00:52:07,160 --> 00:52:12,560
changes and there's no versioning built

00:52:09,500 --> 00:52:15,950
in so what you end up what we end up

00:52:12,560 --> 00:52:17,930
doing is version it ourselves and I know

00:52:15,950 --> 00:52:20,180
this might not be the way that everyone

00:52:17,930 --> 00:52:20,930
would go for that but that's how we did

00:52:20,180 --> 00:52:23,120
it

00:52:20,930 --> 00:52:25,520
we just made a map for every file we

00:52:23,120 --> 00:52:28,580
have to change an increment versions per

00:52:25,520 --> 00:52:31,640
change and how we how we detect those

00:52:28,580 --> 00:52:34,670
changes is basically by doing a monkey

00:52:31,640 --> 00:52:37,580
patch on the tree overwrite minute so we

00:52:34,670 --> 00:52:39,800
know every time that is called that is

00:52:37,580 --> 00:52:43,010
our way of doing it your mileage may

00:52:39,800 --> 00:52:44,420
vary if you have a good decent idea

00:52:43,010 --> 00:52:46,100
where your changes are you might not

00:52:44,420 --> 00:52:50,930
have to go there but I just had to

00:52:46,100 --> 00:52:53,090
mention it so you've dug through your

00:52:50,930 --> 00:52:55,970
source code and you've gotten a good

00:52:53,090 --> 00:52:58,250
idea what changes you want to make so

00:52:55,970 --> 00:53:00,950
now how do you go about actually

00:52:58,250 --> 00:53:03,800
applying those changes back in the tree

00:53:00,950 --> 00:53:06,620
so there are two ways to go about it

00:53:03,800 --> 00:53:10,040
depending on the scale of changes you

00:53:06,620 --> 00:53:13,190
want to make so you can do string

00:53:10,040 --> 00:53:16,340
manipulation because if you just want to

00:53:13,190 --> 00:53:18,380
replace a single nodes text it already

00:53:16,340 --> 00:53:21,440
has a started end index that you can

00:53:18,380 --> 00:53:22,070
find in the syntax tree or if you've

00:53:21,440 --> 00:53:25,130
used

00:53:22,070 --> 00:53:27,800
language service and requested renamed

00:53:25,130 --> 00:53:30,080
locations those who also Mack map nicely

00:53:27,800 --> 00:53:32,870
back to the string source and you can do

00:53:30,080 --> 00:53:36,500
that as well but if you really really

00:53:32,870 --> 00:53:39,110
want to go fancy with it you can just go

00:53:36,500 --> 00:53:41,570
ahead and redo the entire syntax tree

00:53:39,110 --> 00:53:45,200
yourself apply changes create new nodes

00:53:41,570 --> 00:53:47,420
edit notes do whatever typescript is

00:53:45,200 --> 00:53:49,970
nice enough to actually include the

00:53:47,420 --> 00:53:52,940
printer which is basically like a

00:53:49,970 --> 00:53:55,460
reverse compilation if you will because

00:53:52,940 --> 00:53:57,200
out of the syntax tree you'll not output

00:53:55,460 --> 00:53:59,630
JavaScript you'll actually output

00:53:57,200 --> 00:54:02,420
typescript back which is awesome

00:53:59,630 --> 00:54:05,660
there's again a small caveat with that

00:54:02,420 --> 00:54:07,580
and that is the printers you it does

00:54:05,660 --> 00:54:10,070
have some options to configure but

00:54:07,580 --> 00:54:13,640
they're not a lot and it's a little bit

00:54:10,070 --> 00:54:17,390
opinionated in terms of formatting so it

00:54:13,640 --> 00:54:21,230
will basically do double quotes and tap

00:54:17,390 --> 00:54:23,570
indentation no questions asked but again

00:54:21,230 --> 00:54:27,380
this is something that we do all the

00:54:23,570 --> 00:54:29,720
time the language service pretty much

00:54:27,380 --> 00:54:31,820
again to the rescue it does have a

00:54:29,720 --> 00:54:34,940
functionality to allow you to do file

00:54:31,820 --> 00:54:37,340
formatting so if you want you can ask

00:54:34,940 --> 00:54:39,710
language service with options including

00:54:37,340 --> 00:54:42,050
indentation in quotations you can ask

00:54:39,710 --> 00:54:44,660
the language service hey I want this

00:54:42,050 --> 00:54:46,790
file formatted to these specifications

00:54:44,660 --> 00:54:49,550
give me the play the places I should

00:54:46,790 --> 00:54:53,810
edit and you can reformat that file just

00:54:49,550 --> 00:54:59,150
the way you like it so I guess that's

00:54:53,810 --> 00:55:01,340
sort of it it's more of we're basically

00:54:59,150 --> 00:55:03,410
just touching on the surface here

00:55:01,340 --> 00:55:06,050
there's so much more you can do

00:55:03,410 --> 00:55:08,570
because schematics are just like your

00:55:06,050 --> 00:55:11,360
package in your code you can bring any

00:55:08,570 --> 00:55:14,390
other to you seem fit we just stuck with

00:55:11,360 --> 00:55:16,520
what's available out of the box but you

00:55:14,390 --> 00:55:22,370
can build on top of that as much as you

00:55:16,520 --> 00:55:25,460
like and it's a great way to ease the

00:55:22,370 --> 00:55:29,330
process of getting new users and keeping

00:55:25,460 --> 00:55:32,060
them and perhaps making them happy and

00:55:29,330 --> 00:55:34,310
so I'm sure the doubt would free up some

00:55:32,060 --> 00:55:34,970
time for you to solve all the other

00:55:34,310 --> 00:55:40,400
problems

00:55:34,970 --> 00:55:42,500
we have alright so I guess that's it and

00:55:40,400 --> 00:55:45,050
we'll leave you with a whole bunch of

00:55:42,500 --> 00:55:48,140
resources for documentation for

00:55:45,050 --> 00:55:50,450
schematics for typescript compiler the

00:55:48,140 --> 00:55:53,690
demo victor showed is also in github

00:55:50,450 --> 00:55:56,870
will point out everything that that we

00:55:53,690 --> 00:55:59,750
talked about we have an implementation

00:55:56,870 --> 00:56:02,060
in one package or another we have a

00:55:59,750 --> 00:56:04,130
bunch of them unfortunately but do ask

00:56:02,060 --> 00:56:05,480
will point you to the right direction we

00:56:04,130 --> 00:56:09,800
have we'll leave you a bunch of links

00:56:05,480 --> 00:56:14,390
and then we also have some tutorials and

00:56:09,800 --> 00:56:16,670
blogs from our infrastructure that you

00:56:14,390 --> 00:56:19,430
will get access to the slides I saw that

00:56:16,670 --> 00:56:21,920
in the chat I believe will send that out

00:56:19,430 --> 00:56:24,080
at some point I'm guessing the answer is

00:56:21,920 --> 00:56:27,020
yes yes so we're going we've been

00:56:24,080 --> 00:56:29,170
recording this whole thing and we will

00:56:27,020 --> 00:56:33,470
we'll haven't edited it just kind of

00:56:29,170 --> 00:56:35,120
made pretty and then in I don't know

00:56:33,470 --> 00:56:37,250
about a week or so we'll be able to

00:56:35,120 --> 00:56:39,740
publish it on the ng-conf

00:56:37,250 --> 00:56:41,210
youtube channel and then if logistics

00:56:39,740 --> 00:56:43,820
would like to do that as well they can

00:56:41,210 --> 00:56:49,400
but yeah we'll make this whole thing

00:56:43,820 --> 00:56:50,690
available yeah if you get us the link to

00:56:49,400 --> 00:56:55,580
the slides and things we'll make that

00:56:50,690 --> 00:56:59,260
available as well all right well in that

00:56:55,580 --> 00:57:02,570
case we're sort of open for questions

00:56:59,260 --> 00:57:05,330
yeah so if you want to go into the Q&A

00:57:02,570 --> 00:57:08,090
down there Damian you can find the

00:57:05,330 --> 00:57:13,760
questions and then we can just start at

00:57:08,090 --> 00:57:16,670
the top and work our way down okay so

00:57:13,760 --> 00:57:20,390
the advantage of learning schematics yes

00:57:16,670 --> 00:57:24,710
creating a abstract syntax tree project

00:57:20,390 --> 00:57:26,750
using TS more um I don't get what the

00:57:24,710 --> 00:57:30,440
project would be but if you want to use

00:57:26,750 --> 00:57:33,190
just more if I say go ahead but so far

00:57:30,440 --> 00:57:36,860
what we've been doing is using both

00:57:33,190 --> 00:57:39,560
because schematics are just the delivery

00:57:36,860 --> 00:57:40,760
tool for your changes you still have to

00:57:39,560 --> 00:57:45,040
figure out how to do the changes

00:57:40,760 --> 00:57:48,230
yourself so go ahead and do both

00:57:45,040 --> 00:57:48,710
cymatics are just the way the DEQ system

00:57:48,230 --> 00:57:52,160
is

00:57:48,710 --> 00:57:54,950
right now and it's sort of nice that

00:57:52,160 --> 00:57:59,150
that we have finally have an ecosystem

00:57:54,950 --> 00:58:02,180
where everything is known and expected

00:57:59,150 --> 00:58:03,980
so at this point when you start a

00:58:02,180 --> 00:58:07,160
project you sort of expect to run name

00:58:03,980 --> 00:58:09,470
jihad and you sort of run you expect to

00:58:07,160 --> 00:58:11,540
run ng update when a new version is

00:58:09,470 --> 00:58:15,230
there that's the default now that's the

00:58:11,540 --> 00:58:19,329
expectation for it and that's great so

00:58:15,230 --> 00:58:24,079
yeah I guess I should click answer live

00:58:19,329 --> 00:58:27,710
yeah all right because I mean it will

00:58:24,079 --> 00:58:29,630
probably mark it as answer yeah it just

00:58:27,710 --> 00:58:35,390
moves it into a different part of the

00:58:29,630 --> 00:58:42,430
Q&A okay okay so I can read the second

00:58:35,390 --> 00:58:46,819
question it's about you know the custom

00:58:42,430 --> 00:58:49,730
schematic where there is two parameters

00:58:46,819 --> 00:58:52,460
like name which was my card in the game

00:58:49,730 --> 00:58:55,160
type which is which was cap so the

00:58:52,460 --> 00:59:01,369
question is can we validate those

00:58:55,160 --> 00:59:02,359
parameters the name and the type thank

00:59:01,369 --> 00:59:05,750
you

00:59:02,359 --> 00:59:13,040
I know there are a few methods but

00:59:05,750 --> 00:59:15,380
they're built in there is an oh yeah you

00:59:13,040 --> 00:59:17,900
can define in the schema you can define

00:59:15,380 --> 00:59:21,079
patterns for the names but they were

00:59:17,900 --> 00:59:23,990
like an HTML tag and something else

00:59:21,079 --> 00:59:27,440
they're limited they're limited and

00:59:23,990 --> 00:59:31,130
they're not really too well documented

00:59:27,440 --> 00:59:34,400
you can probably dig those up from the

00:59:31,130 --> 00:59:37,520
for we do this all the time you can go

00:59:34,400 --> 00:59:39,589
into angular defecates packages and you

00:59:37,520 --> 00:59:43,250
can check out how they use it I'm fairly

00:59:39,589 --> 00:59:47,990
certain ingénue for example uses for the

00:59:43,250 --> 00:59:50,180
new project name it uses a HTML like

00:59:47,990 --> 00:59:55,549
validation since you can only input

00:59:50,180 --> 00:59:57,880
words in a - but yeah I don't think you

00:59:55,549 --> 01:00:00,920
can do like full regex patterns

00:59:57,880 --> 01:00:02,540
explosion thing although you can always

01:00:00,920 --> 01:00:05,360
once you get that

01:00:02,540 --> 01:00:08,900
in put in in your schematic code you can

01:00:05,360 --> 01:00:14,060
always validate that again and throw an

01:00:08,900 --> 01:00:16,550
error if it doesn't work for you I can

01:00:14,060 --> 01:00:20,300
only add to the previous one that is

01:00:16,550 --> 01:00:25,150
Victor showed there is a prompt and you

01:00:20,300 --> 01:00:25,150
can always use the prompt instead of

01:00:25,900 --> 01:00:34,100
yeah if it's a list that's easy if it's

01:00:30,560 --> 01:00:37,070
a baron it's trickier right so here's

01:00:34,100 --> 01:00:40,400
the deal this I'm gonna expand on that

01:00:37,070 --> 01:00:42,650
just a little bit more I guess this the

01:00:40,400 --> 01:00:47,390
schema you define for the schematic

01:00:42,650 --> 01:00:51,110
itself is sort of like the pre run if

01:00:47,390 --> 01:00:53,840
you will since the CLI will gather your

01:00:51,110 --> 01:00:56,660
options before any bit of your own code

01:00:53,840 --> 01:00:59,120
actually runs so that schema tells it

01:00:56,660 --> 01:01:03,290
tells the angular CLI or the schematics

01:00:59,120 --> 01:01:06,140
you like how to handle input but once

01:01:03,290 --> 01:01:08,090
once those options are generated based

01:01:06,140 --> 01:01:10,900
on that schema if they pass validation

01:01:08,090 --> 01:01:13,940
or not you can still validate them again

01:01:10,900 --> 01:01:15,790
because your code is run at much later

01:01:13,940 --> 01:01:18,290
point after you get the options already

01:01:15,790 --> 01:01:21,010
okay

01:01:18,290 --> 01:01:24,260
I'm gonna read the next question so

01:01:21,010 --> 01:01:26,930
you're a library author and you want to

01:01:24,260 --> 01:01:29,210
bootstrap an initial application it's

01:01:26,930 --> 01:01:31,490
very interesting should the override for

01:01:29,210 --> 01:01:34,540
engine you be added to the library or

01:01:31,490 --> 01:01:38,240
global separate package same with ng add

01:01:34,540 --> 01:01:40,310
it's not clear if users have to npm

01:01:38,240 --> 01:01:43,400
install the library first to get access

01:01:40,310 --> 01:01:47,510
to the schematics or the ng binary knows

01:01:43,400 --> 01:01:53,510
how to download and run those ok umm I

01:01:47,510 --> 01:01:54,920
guess it varies but for ng and you

01:01:53,510 --> 01:01:59,180
definitely want to include it in your

01:01:54,920 --> 01:02:00,620
package or main library because like we

01:01:59,180 --> 01:02:04,820
like we do with ours

01:02:00,620 --> 01:02:07,310
you do ng add the library like ng at

01:02:04,820 --> 01:02:10,220
ignite or angular you don't want it to

01:02:07,310 --> 01:02:12,500
be ng add some schematics prize package

01:02:10,220 --> 01:02:15,620
it's just not as convenient it doesn't

01:02:12,500 --> 01:02:16,180
really ring the same way or correspond

01:02:15,620 --> 01:02:18,369
to

01:02:16,180 --> 01:02:21,880
a normal install that you would do and

01:02:18,369 --> 01:02:23,650
so I guess the de-facto for ads at least

01:02:21,880 --> 01:02:26,230
the ng at schematic would be to keep it

01:02:23,650 --> 01:02:28,900
in your library and that is something

01:02:26,230 --> 01:02:31,750
that we do if you want to offload parts

01:02:28,900 --> 01:02:34,990
of the code that your end yet has to do

01:02:31,750 --> 01:02:37,750
you can install a difference American if

01:02:34,990 --> 01:02:39,069
the separate schematics package that's

01:02:37,750 --> 01:02:41,170
exactly what we did

01:02:39,069 --> 01:02:44,200
Michael Victor showed in the start when

01:02:41,170 --> 01:02:46,450
you call ng add it actually added the

01:02:44,200 --> 01:02:48,010
library itself and the schematics

01:02:46,450 --> 01:02:52,059
package because we actually need that

01:02:48,010 --> 01:02:55,119
schematics package to run one of its of

01:02:52,059 --> 01:02:58,630
its schematics for a set up so you can

01:02:55,119 --> 01:03:03,900
divide and conquer if you will and for

01:02:58,630 --> 01:03:09,869
for engine you I guess either way goes

01:03:03,900 --> 01:03:09,869
we found we do we do way too many things

01:03:09,890 --> 01:03:14,120
I mean don't you need the collection to

01:03:12,080 --> 01:03:15,890
be globally installed locally so you can

01:03:14,120 --> 01:03:17,690
run it oh yeah

01:03:15,890 --> 01:03:20,810
oh yeah that's that's a whole different

01:03:17,690 --> 01:03:22,370
story yeah yeah so that's that's a very

01:03:20,810 --> 01:03:24,890
good reason not to put it in your

01:03:22,370 --> 01:03:27,260
library because you don't need your

01:03:24,890 --> 01:03:30,860
library globally installed so yeah when

01:03:27,260 --> 01:03:34,100
you go into new - - collection the

01:03:30,860 --> 01:03:36,560
collection you provide it's either that

01:03:34,100 --> 01:03:38,930
relative thing that that Victor did but

01:03:36,560 --> 01:03:43,490
that was just localized or you're never

01:03:38,930 --> 01:03:45,590
doing that basically that's just but

01:03:43,490 --> 01:03:47,720
what you normally do is give the package

01:03:45,590 --> 01:03:50,450
name and if you give a package name

01:03:47,720 --> 01:03:52,880
danglers here why would I would expect

01:03:50,450 --> 01:03:55,250
that to be found either inside the

01:03:52,880 --> 01:03:57,500
current project and since that's ingenue

01:03:55,250 --> 01:04:00,710
there is no current project or installed

01:03:57,500 --> 01:04:02,270
globally so yeah I would definitely go

01:04:00,710 --> 01:04:06,260
with a separate package for engineer

01:04:02,270 --> 01:04:09,380
plus as we as we found out we do way too

01:04:06,260 --> 01:04:11,000
many things with ingenue and we also

01:04:09,380 --> 01:04:12,740
have a bunch of additional package

01:04:11,000 --> 01:04:14,660
dependencies to do that and we don't

01:04:12,740 --> 01:04:18,470
want to carry that with the main library

01:04:14,660 --> 01:04:22,040
so go with a separate can you modify

01:04:18,470 --> 01:04:25,520
okay next question can we modify the

01:04:22,040 --> 01:04:27,380
HTML with schematics like change the

01:04:25,520 --> 01:04:29,660
component selector from component 1 to

01:04:27,380 --> 01:04:31,910
company - yes that is exactly what

01:04:29,660 --> 01:04:34,190
migrations are for that is exactly what

01:04:31,910 --> 01:04:36,050
we do with them and yeah you you're

01:04:34,190 --> 01:04:38,990
gonna have to find your own way there is

01:04:36,050 --> 01:04:41,090
no built-in API for that you do it on

01:04:38,990 --> 01:04:43,340
your own terms however you see the

01:04:41,090 --> 01:04:45,950
brackets yeah

01:04:43,340 --> 01:04:47,690
there is no API built in to the

01:04:45,950 --> 01:04:52,460
schematics it only gives you access to

01:04:47,690 --> 01:04:54,160
the file itself so in terms of

01:04:52,460 --> 01:04:57,680
migrations any change you want to make

01:04:54,160 --> 01:05:01,250
you do it on your own you can find HTML

01:04:57,680 --> 01:05:03,350
parser packages are pretty common we

01:05:01,250 --> 01:05:05,510
sort of forgot for when that because our

01:05:03,350 --> 01:05:07,670
migrations are again part of the main

01:05:05,510 --> 01:05:11,210
library we didn't want to do anything

01:05:07,670 --> 01:05:13,730
extra so we just did simple string

01:05:11,210 --> 01:05:15,440
searches that works all right do you

01:05:13,730 --> 01:05:18,800
have a recommended library of functions

01:05:15,440 --> 01:05:23,090
that will apply play updates to the ast

01:05:18,800 --> 01:05:28,830
for example add node import to Phi

01:05:23,090 --> 01:05:31,590
function ah I wish I did I I believe

01:05:28,830 --> 01:05:32,880
everyone's doing it on their own we

01:05:31,590 --> 01:05:35,670
certainly did

01:05:32,880 --> 01:05:39,030
because again additional dependencies

01:05:35,670 --> 01:05:42,720
but I'm certain there must be something

01:05:39,030 --> 01:05:45,510
if any if anyone else knows that knows

01:05:42,720 --> 01:05:47,580
of such library please chime in the chat

01:05:45,510 --> 01:05:49,650
thank you

01:05:47,580 --> 01:05:52,590
I think the next question is a follow-up

01:05:49,650 --> 01:05:59,040
to one of the answered ones if your your

01:05:52,590 --> 01:06:03,990
miking this one is answered yeah no the

01:05:59,040 --> 01:06:07,730
next one is was about I think migrations

01:06:03,990 --> 01:06:11,340
if you can run a migration without

01:06:07,730 --> 01:06:13,800
without actually only by doing ng update

01:06:11,340 --> 01:06:16,170
or is there another way well there is

01:06:13,800 --> 01:06:18,450
another way that you can run it like

01:06:16,170 --> 01:06:21,180
sort of like we showed the local thing

01:06:18,450 --> 01:06:23,390
for debugging purposes you can do ngg

01:06:21,180 --> 01:06:27,750
the path through a collection and

01:06:23,390 --> 01:06:31,070
afterwards the the name of your

01:06:27,750 --> 01:06:39,990
collection of your migration schematic

01:06:31,070 --> 01:06:42,420
to expand all that you sorry you can't

01:06:39,990 --> 01:06:46,050
actually tap into ng update in any other

01:06:42,420 --> 01:06:50,070
way because it checks in your what's the

01:06:46,050 --> 01:06:53,160
word repository Oh Egypt it does a whole

01:06:50,070 --> 01:06:55,500
lot more than that it's actually one of

01:06:53,160 --> 01:06:59,270
the more complex commands within the

01:06:55,500 --> 01:07:04,830
angular CLI because it will go check

01:06:59,270 --> 01:07:07,200
against the NPM registry yeah oh yeah it

01:07:04,830 --> 01:07:09,480
will go check your gob object it will

01:07:07,200 --> 01:07:11,850
find all the stuff from the NPM registry

01:07:09,480 --> 01:07:14,730
I'll check with which projects have

01:07:11,850 --> 01:07:16,350
migrations defined and what versions are

01:07:14,730 --> 01:07:18,960
for those and it will offer you the

01:07:16,350 --> 01:07:22,410
chance to enjoy date whatever I could

01:07:18,960 --> 01:07:24,710
you want but that all happens so it has

01:07:22,410 --> 01:07:30,290
to be able to talk with the registry so

01:07:24,710 --> 01:07:30,290
ng of Hostess calendar the way to go yes

01:07:30,560 --> 01:07:35,670
did you mention the since migrations are

01:07:34,260 --> 01:07:37,710
still schematics you can

01:07:35,670 --> 01:07:40,950
them it said yes that's what I did oh

01:07:37,710 --> 01:07:42,839
yeah okay I'm sorry I'm not installing

01:07:40,950 --> 01:07:46,349
you can run them with an GG but there's

01:07:42,839 --> 01:07:48,390
no other way to run them yeah I mean

01:07:46,349 --> 01:07:50,640
those are just the two ways you either

01:07:48,390 --> 01:07:53,700
have a newer version available in one of

01:07:50,640 --> 01:07:55,680
the registries or you run the manually

01:07:53,700 --> 01:07:59,640
by n GG oh yeah

01:07:55,680 --> 01:08:02,640
for further record anything that that we

01:07:59,640 --> 01:08:06,540
said is a special type of schematic hook

01:08:02,640 --> 01:08:08,910
so ingenue anything like that there's

01:08:06,540 --> 01:08:12,059
still schematics there just triggered by

01:08:08,910 --> 01:08:13,940
an X by an additional command that does

01:08:12,059 --> 01:08:16,080
something extra and looks for a specific

01:08:13,940 --> 01:08:18,170
specific schematic but you can still

01:08:16,080 --> 01:08:20,759
point to that point to your collection

01:08:18,170 --> 01:08:22,350
whether that would be the schematics

01:08:20,759 --> 01:08:24,710
collection or the migration schematics

01:08:22,350 --> 01:08:27,449
collection and you can call out by name

01:08:24,710 --> 01:08:30,690
anything you like with ng G or

01:08:27,449 --> 01:08:33,150
schematics CLI in it will write and

01:08:30,690 --> 01:08:35,609
what's the question if there's a

01:08:33,150 --> 01:08:38,160
question if there is a the opposite of

01:08:35,609 --> 01:08:42,949
ng update if you want to downgrade our

01:08:38,160 --> 01:08:45,719
version using the migrations oh boy

01:08:42,949 --> 01:08:48,569
there isn't and I'm guessing that's on

01:08:45,719 --> 01:08:51,540
purpose the intention is to go forward

01:08:48,569 --> 01:08:53,100
only yeah but you need a different

01:08:51,540 --> 01:08:55,920
transform function for it

01:08:53,100 --> 01:08:58,440
so like it progresses from one state to

01:08:55,920 --> 01:09:00,060
the other but it's not necessarily the

01:08:58,440 --> 01:09:02,250
same function to bring it back so it's

01:09:00,060 --> 01:09:06,529
most definitely not the same function oh

01:09:02,250 --> 01:09:09,630
yeah you know not something handled so

01:09:06,529 --> 01:09:12,239
we'll not don't really provide a way for

01:09:09,630 --> 01:09:15,660
that and I'm guessing that's in digital

01:09:12,239 --> 01:09:18,029
you can write your own schematic so for

01:09:15,660 --> 01:09:21,330
a backwards migration and they like the

01:09:18,029 --> 01:09:22,410
user can run it but you'd have to

01:09:21,330 --> 01:09:25,080
provide it there's no way to

01:09:22,410 --> 01:09:28,170
automatically run it so like ng degrade

01:09:25,080 --> 01:09:29,969
or something for a folder or file an

01:09:28,170 --> 01:09:33,259
engineer schematics when creating an

01:09:29,969 --> 01:09:37,850
initial project yes yes you can

01:09:33,259 --> 01:09:40,549
basically it's up to your imagination or

01:09:37,850 --> 01:09:44,400
well you know like what you want to do

01:09:40,549 --> 01:09:45,060
right that was and the demo Victor

01:09:44,400 --> 01:09:49,319
showed

01:09:45,060 --> 01:09:51,930
envious code when you had a URL source

01:09:49,319 --> 01:09:54,570
that's created off of a file within the

01:09:51,930 --> 01:09:56,460
schematic of a folder of files within

01:09:54,570 --> 01:09:58,770
the schematic itself you can do the

01:09:56,460 --> 01:10:02,670
exact same thing with engineer no

01:09:58,770 --> 01:10:04,770
problem you just have to like the the

01:10:02,670 --> 01:10:06,690
files you want inclusion in the package

01:10:04,770 --> 01:10:08,370
that exposes the collection you have to

01:10:06,690 --> 01:10:10,050
shake them your system when the

01:10:08,370 --> 01:10:12,840
schematic the schematic can create a

01:10:10,050 --> 01:10:15,960
source from them and then merge it with

01:10:12,840 --> 01:10:19,110
anything else how would one go about

01:10:15,960 --> 01:10:22,830
modifying house written in a language

01:10:19,110 --> 01:10:25,620
like rust oh that's a good question

01:10:22,830 --> 01:10:28,950
I'm sort of hoping crust would have a

01:10:25,620 --> 01:10:30,500
similar API to go with it but I'm really

01:10:28,950 --> 01:10:34,290
not sure

01:10:30,500 --> 01:10:38,760
so basically keep your fingers crossed

01:10:34,290 --> 01:10:42,210
oh yeah but again schematics are just

01:10:38,760 --> 01:10:45,720
basically note projects or not modules

01:10:42,210 --> 01:10:48,210
they're not special it's sort of like

01:10:45,720 --> 01:10:50,430
there is no restriction on what you can

01:10:48,210 --> 01:10:54,180
run although don't go crazy please thank

01:10:50,430 --> 01:10:57,900
you but still you can call up any

01:10:54,180 --> 01:11:00,660
additional package I'm sort of home I

01:10:57,900 --> 01:11:02,700
sort of assume that there's an NPM

01:11:00,660 --> 01:11:04,680
package that will handle rust out there

01:11:02,700 --> 01:11:07,230
so you can definitely bring that in and

01:11:04,680 --> 01:11:09,540
use it okay so the question is you have

01:11:07,230 --> 01:11:11,670
any examples of got just pain points and

01:11:09,540 --> 01:11:14,190
anti patterns that you run across that

01:11:11,670 --> 01:11:16,710
we should be aware of well I guess we

01:11:14,190 --> 01:11:18,810
sort of touched on some pain points it's

01:11:16,710 --> 01:11:20,750
always tricky especially when you're

01:11:18,810 --> 01:11:22,890
when you're bringing up external

01:11:20,750 --> 01:11:25,440
functionality outside of the schematics

01:11:22,890 --> 01:11:27,570
API such as the typescript compiler or I

01:11:25,440 --> 01:11:29,340
guess somebody mentioned kiss more than

01:11:27,570 --> 01:11:31,470
there are a few good typescript packages

01:11:29,340 --> 01:11:33,000
out there it's kind of hard to teach

01:11:31,470 --> 01:11:35,070
them not to touch the file system

01:11:33,000 --> 01:11:40,530
directly so that's a pain point

01:11:35,070 --> 01:11:42,060
definitely so we do we we had our

01:11:40,530 --> 01:11:45,480
struggle with that and we do everything

01:11:42,060 --> 01:11:48,620
we can to funnel every operation through

01:11:45,480 --> 01:11:53,010
the schematics a virtual file system

01:11:48,620 --> 01:11:56,340
because that otherwise you would go yeah

01:11:53,010 --> 01:12:00,390
I'll do a dry run on this on this

01:11:56,340 --> 01:12:01,890
humanik or for example and somebody

01:12:00,390 --> 01:12:02,640
would go ahead and touch the touch the

01:12:01,890 --> 01:12:05,070
file system

01:12:02,640 --> 01:12:08,550
and that's not cool that's not expected

01:12:05,070 --> 01:12:11,270
mm-hmm right because a dry run would

01:12:08,550 --> 01:12:14,610
still run and that would actually happen

01:12:11,270 --> 01:12:17,040
transparently for your code is it is it

01:12:14,610 --> 01:12:21,120
transparent like your code would not

01:12:17,040 --> 01:12:22,800
know it's running in dry run your

01:12:21,120 --> 01:12:25,110
schematic will run just as expected

01:12:22,800 --> 01:12:27,930
applied any changes to the tree just as

01:12:25,110 --> 01:12:30,360
expected except when the time comes for

01:12:27,930 --> 01:12:32,850
those three changes to be applied to the

01:12:30,360 --> 01:12:36,000
file system the angular CLI itself will

01:12:32,850 --> 01:12:39,000
say oh nope that's a dry run we're

01:12:36,000 --> 01:12:42,030
stopping here right so that's definitely

01:12:39,000 --> 01:12:44,790
one thing to avoid so anything else you

01:12:42,030 --> 01:12:46,830
bring make sure you go through the

01:12:44,790 --> 01:12:53,160
proper schematics API for touching any

01:12:46,830 --> 01:12:56,490
files and what else I want to expand on

01:12:53,160 --> 01:12:58,800
that like we we had a couple of issues

01:12:56,490 --> 01:13:00,630
with our template files so where we did

01:12:58,800 --> 01:13:02,490
where we read them from because if you

01:13:00,630 --> 01:13:04,470
try to access them from the tree you

01:13:02,490 --> 01:13:08,400
can't actually do it because they're

01:13:04,470 --> 01:13:12,000
actually not in the app route they're in

01:13:08,400 --> 01:13:14,610
your package so you have to do FS and

01:13:12,000 --> 01:13:18,450
read and we're in the tree you have to

01:13:14,610 --> 01:13:22,100
use tree and it's a bit tricky so you

01:13:18,450 --> 01:13:24,840
can get kind of what's the word

01:13:22,100 --> 01:13:26,610
entangled there so what we did in our

01:13:24,840 --> 01:13:30,420
implementation like in one of the pods

01:13:26,610 --> 01:13:32,880
we did a simple overlay of the state so

01:13:30,420 --> 01:13:35,400
an abstraction so we know whether we're

01:13:32,880 --> 01:13:37,710
touching actual physical files to for

01:13:35,400 --> 01:13:41,550
instance get our templates or we're

01:13:37,710 --> 01:13:43,380
touching like the tree in the current

01:13:41,550 --> 01:13:46,170
project States so we know we have to be

01:13:43,380 --> 01:13:48,000
careful like thing instead okay I really

01:13:46,170 --> 01:13:50,970
can't think of anything else I might

01:13:48,000 --> 01:13:58,580
later on if I do I'll make sure to

01:13:50,970 --> 01:14:01,260
mention it but I don't know I guess you

01:13:58,580 --> 01:14:04,500
describe your schema as well as possible

01:14:01,260 --> 01:14:07,310
because anger the seal I will actually

01:14:04,500 --> 01:14:09,240
when you go for collection that

01:14:07,310 --> 01:14:11,970
components - help

01:14:09,240 --> 01:14:14,940
you'll actually output the contents of

01:14:11,970 --> 01:14:16,409
your schemas help so do make sure you

01:14:14,940 --> 01:14:20,340
maintain that one

01:14:16,409 --> 01:14:22,860
oh yeah yeah I'll figure out something

01:14:20,340 --> 01:14:26,850
else later on you know I might tweet it

01:14:22,860 --> 01:14:30,030
who knows all right I am marking this is

01:14:26,850 --> 01:14:32,929
done okay I think we got your mall it

01:14:30,030 --> 01:14:36,900
was awesome 17 questions answered so

01:14:32,929 --> 01:14:41,310
great oh we we apparently have little

01:14:36,900 --> 01:14:45,290
helpers running around so that's really

01:14:41,310 --> 01:14:48,620
nice we try you're gonna try thank you

01:14:45,290 --> 01:14:51,300
we left the hard ones for you guys I

01:14:48,620 --> 01:14:54,540
would assume so we answered ones like

01:14:51,300 --> 01:14:58,230
how's the weather oh he's up that must

01:14:54,540 --> 01:15:01,250
have been a hard question to ask this

01:14:58,230 --> 01:15:09,659
house the winner house the winner where

01:15:01,250 --> 01:15:13,590
yes presentation it varies hey well any

01:15:09,659 --> 01:15:16,199
last thoughts Jason or anyone else nope

01:15:13,590 --> 01:15:20,130
thank you everyone for attending follow

01:15:16,199 --> 01:15:22,290
us on Twitter and and obviously ng-conf

01:15:20,130 --> 01:15:23,670
for the webinar replay so we really

01:15:22,290 --> 01:15:27,420
appreciate your time you have everyone's

01:15:23,670 --> 01:15:29,130
information here to answer questions and

01:15:27,420 --> 01:15:32,340
follow up so back back to you Brooke

01:15:29,130 --> 01:15:34,920
okay perfect then yeah we'll just we'll

01:15:32,340 --> 01:15:37,889
go ahead and choose a winner for the

01:15:34,920 --> 01:15:40,800
price of that one-year license to the

01:15:37,889 --> 01:15:43,260
ignite UI and we'll make sure to notify

01:15:40,800 --> 01:15:45,989
the winner that they have been selected

01:15:43,260 --> 01:15:48,179
so that'll be great and then also a

01:15:45,989 --> 01:15:51,360
really common question at the end of

01:15:48,179 --> 01:15:53,370
webinars is always can we get the replay

01:15:51,360 --> 01:15:54,870
can we get you know the recording of

01:15:53,370 --> 01:15:58,050
this and yes we will make that available

01:15:54,870 --> 01:16:00,810
so it usually takes about a week just to

01:15:58,050 --> 01:16:02,630
have everything edited down but you know

01:16:00,810 --> 01:16:06,719
give us up to two weeks just in case

01:16:02,630 --> 01:16:09,090
whatever comes up and we'll have the

01:16:06,719 --> 01:16:10,139
replay of this put up and available on

01:16:09,090 --> 01:16:13,739
our YouTube channel

01:16:10,139 --> 01:16:16,469
and yeah you can go back and watch it at

01:16:13,739 --> 01:16:19,290
your your convenience but other than

01:16:16,469 --> 01:16:20,790
that again just like Jason was saying

01:16:19,290 --> 01:16:24,000
thank you so much for attending we

01:16:20,790 --> 01:16:26,699
really appreciate your support and look

01:16:24,000 --> 01:16:30,100
forward to additional webinars coming up

01:16:26,699 --> 01:16:32,110
in the future we have a lot slated so

01:16:30,100 --> 01:16:33,700
those will be created as well but thanks

01:16:32,110 --> 01:16:34,600
for attending everybody and we'll hope

01:16:33,700 --> 01:16:39,120
to see her out

01:16:34,600 --> 01:16:41,290
thank you very much Brooke you as well

01:16:39,120 --> 01:16:47,790
thanks guys I'll see you bye-bye

01:16:41,290 --> 01:16:47,790
thank you your evening yeah

01:16:48,990 --> 01:16:58,270
much time really oh cool

01:16:53,800 --> 01:16:58,840
one sorry I guess yeah you guys are past

01:16:58,270 --> 01:17:02,850
dinner time

01:16:58,840 --> 01:17:06,150
oh we yeah

01:17:02,850 --> 01:17:11,430
depends second dinner time

01:17:06,150 --> 01:17:12,970
is that a thing okay you guys thank you

01:17:11,430 --> 01:17:14,680
thanks everybody

01:17:12,970 --> 01:17:17,760
thank you very much I appreciate it

01:17:14,680 --> 01:17:17,760

YouTube URL: https://www.youtube.com/watch?v=S_XxDC4WdKI


