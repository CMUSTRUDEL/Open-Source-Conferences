Title: Smarter & Faster Angular Development with Nx | ng-conf & Nx | #ngconf
Publication date: 2020-10-16
Playlist: Webinars
Description: 
	Join ng-conf for EnterpriseNG, the world's largest enterprise-focused Angular conference in the world! Nov 19-20 | Online. www. ng-conf.org.

In this webinar, you'll learn how a monorepo can help and how, in particular, the open source toolkit Nx makes developing in a monorepo simpler. You'll walk away knowing how to use Nxâ€™s powerful code schematics to generate code and quickly set up tools like Cypress and Storybook.

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
https://nx.dev/
Captions: 
	00:00:02,770 --> 00:00:06,240
[Applause]

00:00:06,570 --> 00:00:11,549
[Music]

00:00:15,040 --> 00:00:20,240
all right

00:00:16,320 --> 00:00:24,400
can you see my screen yep yeah

00:00:20,240 --> 00:00:27,119
perfect good then let's get started

00:00:24,400 --> 00:00:28,880
we're pretty excited and as like you can

00:00:27,119 --> 00:00:29,679
see from the title what we are going to

00:00:28,880 --> 00:00:32,079
do today is

00:00:29,679 --> 00:00:33,600
talk a bit about smarter and faster

00:00:32,079 --> 00:00:35,680
angular development and we will

00:00:33,600 --> 00:00:37,920
specifically look into how you can do

00:00:35,680 --> 00:00:40,879
that with with our own dev tool which is

00:00:37,920 --> 00:00:42,719
like novels nx

00:00:40,879 --> 00:00:44,079
so before jumping in let's quickly

00:00:42,719 --> 00:00:47,520
present ourselves

00:00:44,079 --> 00:00:49,840
i'll let go isaac first

00:00:47,520 --> 00:00:50,559
yeah i'm isaac mann i'm an architect at

00:00:49,840 --> 00:00:54,399
narwhal

00:00:50,559 --> 00:00:56,559
um i work on the the docs at nx.dev

00:00:54,399 --> 00:00:58,879
and um yeah i'm excited to be sharing

00:00:56,559 --> 00:01:01,199
with you

00:00:58,879 --> 00:01:02,079
cool yeah and i'm yuri stromflorner i'm

00:01:01,199 --> 00:01:03,920
from italy

00:01:02,079 --> 00:01:07,280
also an architected novel and core

00:01:03,920 --> 00:01:09,600
member of the nx team

00:01:07,280 --> 00:01:11,680
so what are we going to talk about today

00:01:09,600 --> 00:01:12,000
now these are more or less the topics

00:01:11,680 --> 00:01:14,080
which

00:01:12,000 --> 00:01:15,200
we would like to go through and so the

00:01:14,080 --> 00:01:17,119
first one is about

00:01:15,200 --> 00:01:19,119
driving good architecture and obviously

00:01:17,119 --> 00:01:21,119
how nx can help you there like what are

00:01:19,119 --> 00:01:23,040
the main problems you might face

00:01:21,119 --> 00:01:25,280
also we're going to talk about modern

00:01:23,040 --> 00:01:27,040
tools and how an x improves developer

00:01:25,280 --> 00:01:28,960
experience in general

00:01:27,040 --> 00:01:31,280
and towards the end would also like to

00:01:28,960 --> 00:01:33,520
go a bit into the scalability and speed

00:01:31,280 --> 00:01:35,200
thing because like obviously nx is kind

00:01:33,520 --> 00:01:37,360
of designed for monorepos and

00:01:35,200 --> 00:01:39,040
especially shines when it comes to like

00:01:37,360 --> 00:01:40,479
larger monorepos

00:01:39,040 --> 00:01:43,520
and now we will have some cool live

00:01:40,479 --> 00:01:46,159
demos in between which isaac will do

00:01:43,520 --> 00:01:47,600
and you should definitely stick around

00:01:46,159 --> 00:01:48,960
because like in the end we will have

00:01:47,600 --> 00:01:50,799
like first of all the q a

00:01:48,960 --> 00:01:53,119
but i will also have some giveaway for

00:01:50,799 --> 00:01:54,960
you and so you you should

00:01:53,119 --> 00:01:56,640
be with us till the end and get that

00:01:54,960 --> 00:01:59,920
giveaway which is i think it's

00:01:56,640 --> 00:02:01,920
gonna be pretty great cool

00:01:59,920 --> 00:02:04,159
so let's let's go to the first topic uh

00:02:01,920 --> 00:02:06,399
driving good architecture

00:02:04,159 --> 00:02:08,399
now obviously i'm pretty conscious that

00:02:06,399 --> 00:02:10,399
this is kind of a subjective topic right

00:02:08,399 --> 00:02:12,239
like first of all what does good mean

00:02:10,399 --> 00:02:13,920
and then architecture in general is

00:02:12,239 --> 00:02:16,239
obviously like a big term like you can

00:02:13,920 --> 00:02:18,239
go from like deployment architecture

00:02:16,239 --> 00:02:19,520
how much how easy can you scale your

00:02:18,239 --> 00:02:21,360
application

00:02:19,520 --> 00:02:23,280
or how modular is your application how

00:02:21,360 --> 00:02:26,160
well is it composed and can be

00:02:23,280 --> 00:02:28,640
decomposed in different parts

00:02:26,160 --> 00:02:30,080
what i personally see a lot when with

00:02:28,640 --> 00:02:31,599
consulting with people and also when

00:02:30,080 --> 00:02:34,000
talking to people in the community is

00:02:31,599 --> 00:02:34,959
that often it's also about folder

00:02:34,000 --> 00:02:36,959
organization

00:02:34,959 --> 00:02:38,720
so with all organization obviously it

00:02:36,959 --> 00:02:40,160
comes also like how you organize

00:02:38,720 --> 00:02:42,000
features because like those two

00:02:40,160 --> 00:02:44,160
parts are often kind of connected

00:02:42,000 --> 00:02:45,760
between each other

00:02:44,160 --> 00:02:47,519
so let's talk a bit about folder

00:02:45,760 --> 00:02:48,800
organization in terms of the

00:02:47,519 --> 00:02:50,879
architecture

00:02:48,800 --> 00:02:52,400
and in fact like if you go to the style

00:02:50,879 --> 00:02:54,160
guide angular style guide

00:02:52,400 --> 00:02:56,480
there is a principle called lift

00:02:54,160 --> 00:02:58,560
principle and what it says

00:02:56,480 --> 00:03:00,400
is simply if you see a component on the

00:02:58,560 --> 00:03:01,599
page and then you dive into the source

00:03:00,400 --> 00:03:04,640
code you should be able to

00:03:01,599 --> 00:03:06,239
really quickly identify whereas specific

00:03:04,640 --> 00:03:06,959
component or service or whatever you're

00:03:06,239 --> 00:03:08,720
looking for

00:03:06,959 --> 00:03:11,040
is located right so it should be easy to

00:03:08,720 --> 00:03:12,800
locate also if you take a look at

00:03:11,040 --> 00:03:14,640
like the file extensions and stuff like

00:03:12,800 --> 00:03:15,599
you should should know like what each

00:03:14,640 --> 00:03:17,120
file contains

00:03:15,599 --> 00:03:19,680
so that you don't have to kind of search

00:03:17,120 --> 00:03:21,440
around especially if the whole

00:03:19,680 --> 00:03:23,200
like underlying repository source code

00:03:21,440 --> 00:03:25,360
is kind of unknown to you

00:03:23,200 --> 00:03:26,879
also in terms of like the structure or

00:03:25,360 --> 00:03:29,440
folder structure in general

00:03:26,879 --> 00:03:30,080
uh they suggest you to start as flat as

00:03:29,440 --> 00:03:32,319
possible

00:03:30,080 --> 00:03:34,000
and then like as you need more like

00:03:32,319 --> 00:03:37,200
structure you actually start

00:03:34,000 --> 00:03:39,120
nesting things and so especially when we

00:03:37,200 --> 00:03:41,120
talk about that folder structure and

00:03:39,120 --> 00:03:42,959
flat folder structure

00:03:41,120 --> 00:03:44,640
there's another style that comes here

00:03:42,959 --> 00:03:46,480
into into play

00:03:44,640 --> 00:03:48,400
which you might have heard about which

00:03:46,480 --> 00:03:51,120
is like folders by feature

00:03:48,400 --> 00:03:52,959
right and so some people that maybe have

00:03:51,120 --> 00:03:54,720
already been around in the angularjs

00:03:52,959 --> 00:03:56,720
days like at the very beginning

00:03:54,720 --> 00:03:59,120
what you did is not photos by feature

00:03:56,720 --> 00:04:00,720
but rather suggestion there was like

00:03:59,120 --> 00:04:02,560
structure them according to the file

00:04:00,720 --> 00:04:04,879
type right like you had like controls

00:04:02,560 --> 00:04:06,319
folders and model folders and viewforce

00:04:04,879 --> 00:04:08,959
and so on

00:04:06,319 --> 00:04:10,879
and now obviously as the application got

00:04:08,959 --> 00:04:12,400
more complex and more difficult what you

00:04:10,879 --> 00:04:12,959
had is basically your features were kind

00:04:12,400 --> 00:04:15,280
of

00:04:12,959 --> 00:04:16,880
dispersed and like distributed across

00:04:15,280 --> 00:04:18,799
those three kind of folders

00:04:16,880 --> 00:04:20,160
which was really hard to track down what

00:04:18,799 --> 00:04:22,479
features your applications

00:04:20,160 --> 00:04:24,160
has been composed of as well as kind of

00:04:22,479 --> 00:04:24,720
violate that lift principle because it

00:04:24,160 --> 00:04:28,560
was really

00:04:24,720 --> 00:04:30,479
hard to locate some code in there

00:04:28,560 --> 00:04:32,000
and so what might that photo by feature

00:04:30,479 --> 00:04:33,919
look like which is kind of now the

00:04:32,000 --> 00:04:34,240
suggested way of doing things like even

00:04:33,919 --> 00:04:36,320
non

00:04:34,240 --> 00:04:38,160
in just in angular but in general uh in

00:04:36,320 --> 00:04:40,240
all modern frameworks

00:04:38,160 --> 00:04:41,759
and so this is just a screenshot of one

00:04:40,240 --> 00:04:43,600
potential

00:04:41,759 --> 00:04:45,759
structure of an angle application and

00:04:43,600 --> 00:04:47,680
what you see here is usually have those

00:04:45,759 --> 00:04:48,960
kind of infrastructure folders such as

00:04:47,680 --> 00:04:51,520
like core

00:04:48,960 --> 00:04:52,320
messages store dashboard maybe even like

00:04:51,520 --> 00:04:55,040
which is not

00:04:52,320 --> 00:04:56,080
necessarily feature specific but kind of

00:04:55,040 --> 00:04:57,440
is your platform

00:04:56,080 --> 00:04:59,759
right where you build your features on

00:04:57,440 --> 00:05:01,360
top of and then you have the actual

00:04:59,759 --> 00:05:02,160
features located like in this example

00:05:01,360 --> 00:05:03,680
it's even

00:05:02,160 --> 00:05:05,840
nested under features folders you can

00:05:03,680 --> 00:05:07,440
nicely locate where things live within

00:05:05,840 --> 00:05:09,680
your workspace

00:05:07,440 --> 00:05:11,600
this here is another example also here

00:05:09,680 --> 00:05:13,680
like you see that admin folder

00:05:11,600 --> 00:05:15,600
uh which is basically even grouping

00:05:13,680 --> 00:05:17,759
subsection of your application right you

00:05:15,600 --> 00:05:19,039
might have like a public facing part and

00:05:17,759 --> 00:05:21,039
like an internal part

00:05:19,039 --> 00:05:22,639
more for administration purposes and so

00:05:21,039 --> 00:05:24,479
there's even this nesting in there

00:05:22,639 --> 00:05:25,919
and then again you see those feature

00:05:24,479 --> 00:05:29,360
folders and the code

00:05:25,919 --> 00:05:31,360
located within those feature folders

00:05:29,360 --> 00:05:32,880
now what might be potential issues with

00:05:31,360 --> 00:05:34,080
with this structuring and i would

00:05:32,880 --> 00:05:36,080
actually like to

00:05:34,080 --> 00:05:38,080
walk through three of them now to kind

00:05:36,080 --> 00:05:39,919
of give you an idea of of

00:05:38,080 --> 00:05:41,600
what might be problems and how you can

00:05:39,919 --> 00:05:43,600
solve them with the next

00:05:41,600 --> 00:05:44,800
the first of one is like feature

00:05:43,600 --> 00:05:46,880
boundaries

00:05:44,800 --> 00:05:48,560
so for instance if we again take a look

00:05:46,880 --> 00:05:49,680
and zoom in a bit on that example which

00:05:48,560 --> 00:05:51,280
we just had

00:05:49,680 --> 00:05:53,280
is if you look in the courses folder

00:05:51,280 --> 00:05:54,960
here you see like there are components

00:05:53,280 --> 00:05:57,440
or containers scars

00:05:54,960 --> 00:05:58,479
further downloading services and what

00:05:57,440 --> 00:05:59,919
you see here

00:05:58,479 --> 00:06:02,479
without knowing the actual structure

00:05:59,919 --> 00:06:05,199
underneath is it's kind of hard to know

00:06:02,479 --> 00:06:06,880
what should be exported and what is like

00:06:05,199 --> 00:06:08,000
private and internal to that specific

00:06:06,880 --> 00:06:10,160
feature

00:06:08,000 --> 00:06:11,919
so if i'm going to look into that

00:06:10,160 --> 00:06:12,960
specific feature here and i see like the

00:06:11,919 --> 00:06:14,319
course item there

00:06:12,960 --> 00:06:16,000
it might be an interesting component

00:06:14,319 --> 00:06:17,120
which i might need in my own feature

00:06:16,000 --> 00:06:19,360
all right which is outside of the

00:06:17,120 --> 00:06:20,160
courses feature and so it's kind of hard

00:06:19,360 --> 00:06:22,160
to know

00:06:20,160 --> 00:06:24,319
am i allowed to use it maybe people just

00:06:22,160 --> 00:06:25,280
even grab it and so over time what you

00:06:24,319 --> 00:06:29,199
have like is that

00:06:25,280 --> 00:06:30,720
you get into kind of a messy structure

00:06:29,199 --> 00:06:32,400
and so this is what you usually have

00:06:30,720 --> 00:06:34,560
like with an angular

00:06:32,400 --> 00:06:35,840
standard setup so you have that

00:06:34,560 --> 00:06:38,240
application and

00:06:35,840 --> 00:06:39,280
the folders are basically your boundary

00:06:38,240 --> 00:06:39,919
if you want for different kind of

00:06:39,280 --> 00:06:42,080
features

00:06:39,919 --> 00:06:44,479
right you could say it's kind of a

00:06:42,080 --> 00:06:46,000
monolithic structure here

00:06:44,479 --> 00:06:48,319
now with the next things are a bit

00:06:46,000 --> 00:06:48,880
different like uh the best practices in

00:06:48,319 --> 00:06:51,840
nx

00:06:48,880 --> 00:06:53,599
are suggested you have like abs and lips

00:06:51,840 --> 00:06:54,880
and you can see here in this picture we

00:06:53,599 --> 00:06:56,240
have the very same

00:06:54,880 --> 00:06:58,080
structure of an application which we had

00:06:56,240 --> 00:07:00,479
before but it's kind of

00:06:58,080 --> 00:07:02,000
decomposed into different parts right at

00:07:00,479 --> 00:07:03,360
the very top you see that thin

00:07:02,000 --> 00:07:04,960
application layer

00:07:03,360 --> 00:07:07,440
and then below you see like the

00:07:04,960 --> 00:07:09,039
extracted libraries

00:07:07,440 --> 00:07:10,960
and the important part here especially

00:07:09,039 --> 00:07:12,639
for newcomers is often like

00:07:10,960 --> 00:07:14,080
to think about how those libraries work

00:07:12,639 --> 00:07:17,039
right so i call them here

00:07:14,080 --> 00:07:19,680
workspace libraries because they don't

00:07:17,039 --> 00:07:21,440
necessarily are libraries as you might

00:07:19,680 --> 00:07:22,800
think at first like libraries supposed

00:07:21,440 --> 00:07:24,960
to be published on npm

00:07:22,800 --> 00:07:26,000
but they are just libraries as kind of a

00:07:24,960 --> 00:07:28,000
structure right you can

00:07:26,000 --> 00:07:29,520
most often even take like the structure

00:07:28,000 --> 00:07:31,120
of your folders one and one and extract

00:07:29,520 --> 00:07:34,160
them into libraries and then reference

00:07:31,120 --> 00:07:34,160
them via typescript

00:07:34,400 --> 00:07:37,680
and so you have like the applications at

00:07:35,759 --> 00:07:39,440
the very bottom at the very top and the

00:07:37,680 --> 00:07:41,520
libraries here at the bottom and

00:07:39,440 --> 00:07:43,840
as you can see here our suggestion is to

00:07:41,520 --> 00:07:44,720
push as much as possible down into the

00:07:43,840 --> 00:07:47,280
libraries

00:07:44,720 --> 00:07:49,039
part because like the application at the

00:07:47,280 --> 00:07:50,240
very top should actually just have the

00:07:49,039 --> 00:07:52,319
minimum

00:07:50,240 --> 00:07:53,840
possible the minimum necessary code to

00:07:52,319 --> 00:07:54,479
actually have your application bundled

00:07:53,840 --> 00:07:56,479
together

00:07:54,479 --> 00:07:58,960
so the application can be seen more as

00:07:56,479 --> 00:07:59,280
your bundling mechanism your deployable

00:07:58,960 --> 00:08:01,440
which

00:07:59,280 --> 00:08:02,479
actually push up to some server where

00:08:01,440 --> 00:08:04,639
you deploy them

00:08:02,479 --> 00:08:06,240
to some server and in fact you could

00:08:04,639 --> 00:08:08,000
even go a step further here

00:08:06,240 --> 00:08:09,840
and split them up right so your

00:08:08,000 --> 00:08:12,160
application might be even structured

00:08:09,840 --> 00:08:13,840
into like a public facing part where

00:08:12,160 --> 00:08:15,840
people like watch your courses

00:08:13,840 --> 00:08:17,360
and like access to courses and then you

00:08:15,840 --> 00:08:18,240
have that administration part again

00:08:17,360 --> 00:08:20,080
which is more

00:08:18,240 --> 00:08:21,919
kind of for administering like the sales

00:08:20,080 --> 00:08:22,800
and generating new coupons and stuff

00:08:21,919 --> 00:08:24,479
like that

00:08:22,800 --> 00:08:26,319
and so obviously this might even impact

00:08:24,479 --> 00:08:28,240
now your your scalability right because

00:08:26,319 --> 00:08:29,280
like the public facing part might need

00:08:28,240 --> 00:08:30,879
much more scaling

00:08:29,280 --> 00:08:32,399
while the administrative part where

00:08:30,879 --> 00:08:32,880
there are just like couple of people

00:08:32,399 --> 00:08:34,959
actually

00:08:32,880 --> 00:08:36,719
accessing the app might not need all

00:08:34,959 --> 00:08:39,120
that scaling right

00:08:36,719 --> 00:08:40,560
so you can see how easy it is already to

00:08:39,120 --> 00:08:43,919
kind of decompose

00:08:40,560 --> 00:08:44,880
applications so the next library

00:08:43,919 --> 00:08:46,560
structure

00:08:44,880 --> 00:08:48,000
looks more like more or less like the

00:08:46,560 --> 00:08:50,000
screenshot which i'm here

00:08:48,000 --> 00:08:51,360
on the left side so you see here there's

00:08:50,000 --> 00:08:52,800
a specific ellipse folder

00:08:51,360 --> 00:08:54,640
and then we have a couple of different

00:08:52,800 --> 00:08:55,440
libraries and here specifically i have

00:08:54,640 --> 00:08:58,160
expanded the

00:08:55,440 --> 00:08:58,959
store courses library and within that

00:08:58,160 --> 00:09:00,640
lib folder

00:08:58,959 --> 00:09:02,560
like in the source lib folder there you

00:09:00,640 --> 00:09:04,160
see again like the components containers

00:09:02,560 --> 00:09:05,920
and services just as you would have

00:09:04,160 --> 00:09:08,080
within the same folder inside your

00:09:05,920 --> 00:09:09,839
angular cli application

00:09:08,080 --> 00:09:12,480
the difference here already is that you

00:09:09,839 --> 00:09:15,120
have also that index.js file

00:09:12,480 --> 00:09:17,519
now that's actually where you explicitly

00:09:15,120 --> 00:09:19,360
specify what you want to export

00:09:17,519 --> 00:09:20,560
and so if we dive into that index.js

00:09:19,360 --> 00:09:22,320
file you can see here

00:09:20,560 --> 00:09:23,760
it exports for instance like the store

00:09:22,320 --> 00:09:25,680
courses module folder because

00:09:23,760 --> 00:09:27,680
that's usually what you need in angular

00:09:25,680 --> 00:09:29,279
in order to be able to compose parts

00:09:27,680 --> 00:09:31,040
but you can also for instance define

00:09:29,279 --> 00:09:33,279
which services you want to export

00:09:31,040 --> 00:09:34,320
like which services should be available

00:09:33,279 --> 00:09:36,240
to our features

00:09:34,320 --> 00:09:37,920
which might be useful for them and you

00:09:36,240 --> 00:09:39,600
have to explicitly think about that and

00:09:37,920 --> 00:09:41,200
specify them here

00:09:39,600 --> 00:09:42,640
on the other side when you want to then

00:09:41,200 --> 00:09:44,959
use them you can

00:09:42,640 --> 00:09:47,040
import them with this nice typescript

00:09:44,959 --> 00:09:49,760
syntax there so you don't have to use

00:09:47,040 --> 00:09:50,480
like relative paths but nx already maps

00:09:49,760 --> 00:09:52,880
them out to

00:09:50,480 --> 00:09:54,640
nice like typescript path mappings and

00:09:52,880 --> 00:09:56,399
so basically the add course platform

00:09:54,640 --> 00:09:57,920
would be the name of your workspace

00:09:56,399 --> 00:09:59,600
and then the folder structure follows

00:09:57,920 --> 00:10:01,120
after that

00:09:59,600 --> 00:10:02,880
and in fact like there are even linting

00:10:01,120 --> 00:10:04,640
rules that prevent you from doing

00:10:02,880 --> 00:10:08,560
relative imports so the code is

00:10:04,640 --> 00:10:10,560
kind of nice and cleanly structured

00:10:08,560 --> 00:10:12,160
so in general as we have seen like

00:10:10,560 --> 00:10:13,839
libraries represent much stronger

00:10:12,160 --> 00:10:15,440
boundaries already right it's like you

00:10:13,839 --> 00:10:17,680
you have to think about that

00:10:15,440 --> 00:10:18,959
what you want to export and what like

00:10:17,680 --> 00:10:20,800
should be remain

00:10:18,959 --> 00:10:22,640
should remain within my actual library

00:10:20,800 --> 00:10:24,240
right it's much a stronger

00:10:22,640 --> 00:10:27,200
relationship much stronger relationship

00:10:24,240 --> 00:10:29,600
than just having folders

00:10:27,200 --> 00:10:31,040
another part is restricting access like

00:10:29,600 --> 00:10:33,600
just as we talked before

00:10:31,040 --> 00:10:35,360
and when you look at those folders what

00:10:33,600 --> 00:10:36,320
prevents someone from just like looking

00:10:35,360 --> 00:10:38,320
into it

00:10:36,320 --> 00:10:39,760
taking a look at that course item maybe

00:10:38,320 --> 00:10:40,320
slightly even adjusting it and then

00:10:39,760 --> 00:10:42,079
reusing it

00:10:40,320 --> 00:10:43,519
within their own feature which might be

00:10:42,079 --> 00:10:45,200
perfectly fine because like that might

00:10:43,519 --> 00:10:47,680
be a component which they might have to

00:10:45,200 --> 00:10:50,640
use and they might want to use

00:10:47,680 --> 00:10:51,040
but those like accidental imports or

00:10:50,640 --> 00:10:52,560
people

00:10:51,040 --> 00:10:54,240
actually just grabbing to other features

00:10:52,560 --> 00:10:55,680
results in really like messy

00:10:54,240 --> 00:10:57,839
relationships and makes it really hard

00:10:55,680 --> 00:10:59,600
to decompose applications later on

00:10:57,839 --> 00:11:01,120
if for instance you would like to like

00:10:59,600 --> 00:11:04,079
export the course as a general

00:11:01,120 --> 00:11:04,560
generic library within your organization

00:11:04,079 --> 00:11:06,959
and so

00:11:04,560 --> 00:11:07,839
for that nx has another mechanism which

00:11:06,959 --> 00:11:10,480
is so called

00:11:07,839 --> 00:11:11,600
tagging and so what you can do here for

00:11:10,480 --> 00:11:14,079
instance you see that type

00:11:11,600 --> 00:11:14,720
colon app so this is just like a tag

00:11:14,079 --> 00:11:16,800
which you can

00:11:14,720 --> 00:11:18,720
associate to like your application or

00:11:16,800 --> 00:11:20,800
libraries within your workspace

00:11:18,720 --> 00:11:21,839
and now the colon or the structuring is

00:11:20,800 --> 00:11:24,079
just like some i've

00:11:21,839 --> 00:11:26,160
i've chosen for better clarity like you

00:11:24,079 --> 00:11:29,040
can really take or use whatever

00:11:26,160 --> 00:11:30,560
whatever string you would like to use

00:11:29,040 --> 00:11:32,240
and so let's let's walk through

00:11:30,560 --> 00:11:34,640
some very simple example for instance

00:11:32,240 --> 00:11:37,360
here taking our workspace here

00:11:34,640 --> 00:11:39,120
i'm tagging the applications as type app

00:11:37,360 --> 00:11:40,560
then like these ones here as type

00:11:39,120 --> 00:11:42,560
feature because like they are

00:11:40,560 --> 00:11:44,560
encompassing they have like more

00:11:42,560 --> 00:11:46,480
elaborate features within them

00:11:44,560 --> 00:11:48,000
and the bottom ones like are more like

00:11:46,480 --> 00:11:49,519
utility libraries like

00:11:48,000 --> 00:11:51,120
infrastructure lives if you want like

00:11:49,519 --> 00:11:51,839
they might handle authentication code or

00:11:51,120 --> 00:11:54,720
even like just

00:11:51,839 --> 00:11:56,639
have some utility functions and then you

00:11:54,720 --> 00:11:58,240
can even go a step further and like

00:11:56,639 --> 00:12:00,320
define order text for instance like the

00:11:58,240 --> 00:12:01,760
scope here for instance i'm saying like

00:12:00,320 --> 00:12:05,040
that this is type

00:12:01,760 --> 00:12:06,720
scope store uh this is scope admin and

00:12:05,040 --> 00:12:09,279
this is like how i'm separating my

00:12:06,720 --> 00:12:11,279
workspace and like defining very

00:12:09,279 --> 00:12:14,000
perfectly defined like responsibilities

00:12:11,279 --> 00:12:16,160
of each of those libraries

00:12:14,000 --> 00:12:17,920
and the reason i'm doing that is because

00:12:16,160 --> 00:12:20,000
like afterwards i can actually go and

00:12:17,920 --> 00:12:22,320
define rules

00:12:20,000 --> 00:12:24,720
and what my rules look like for instance

00:12:22,320 --> 00:12:26,880
i can say like a type application

00:12:24,720 --> 00:12:28,240
to the label i defined just before can

00:12:26,880 --> 00:12:30,000
only depend on

00:12:28,240 --> 00:12:32,160
other libraries or applications that

00:12:30,000 --> 00:12:33,519
have been tagged like type feature or

00:12:32,160 --> 00:12:34,720
type util

00:12:33,519 --> 00:12:36,720
and so in that way i'm kind of

00:12:34,720 --> 00:12:38,800
preventing that someone like from the

00:12:36,720 --> 00:12:40,160
public application directly

00:12:38,800 --> 00:12:41,920
reference something in the admin

00:12:40,160 --> 00:12:43,120
application because like i don't want to

00:12:41,920 --> 00:12:44,800
have that like the apps

00:12:43,120 --> 00:12:46,880
within them shouldn't be able to

00:12:44,800 --> 00:12:48,320
reference each other

00:12:46,880 --> 00:12:50,800
another thing could also be like type

00:12:48,320 --> 00:12:52,480
util can only depend on type util

00:12:50,800 --> 00:12:54,480
and the reason is like these are just

00:12:52,480 --> 00:12:56,320
utility functions and so

00:12:54,480 --> 00:12:57,600
nothing like in the shared utility

00:12:56,320 --> 00:12:58,800
library should actually reference a

00:12:57,600 --> 00:13:00,240
feature library

00:12:58,800 --> 00:13:01,760
it should actually be vice versa like

00:13:00,240 --> 00:13:04,000
future libraries should grab into the

00:13:01,760 --> 00:13:06,639
utility libraries to use them

00:13:04,000 --> 00:13:08,240
and similarly i can also kind of define

00:13:06,639 --> 00:13:10,560
the scope dependent rules

00:13:08,240 --> 00:13:11,680
uh for instance say the whole public

00:13:10,560 --> 00:13:13,440
facing part

00:13:11,680 --> 00:13:14,800
of the libraries and applications should

00:13:13,440 --> 00:13:17,519
not reference

00:13:14,800 --> 00:13:19,040
a part within the administration part

00:13:17,519 --> 00:13:20,639
and the reason is because like

00:13:19,040 --> 00:13:22,079
they might have been constructed in a

00:13:20,639 --> 00:13:23,920
different way uh

00:13:22,079 --> 00:13:25,519
it might even be legit to actually

00:13:23,920 --> 00:13:26,320
reference such a library but the point

00:13:25,519 --> 00:13:28,880
here is that

00:13:26,320 --> 00:13:30,160
you get an actual error even if you

00:13:28,880 --> 00:13:31,920
implement that in ci

00:13:30,160 --> 00:13:34,560
you will have a blocking build you can

00:13:31,920 --> 00:13:35,120
then look at it and say like should i be

00:13:34,560 --> 00:13:37,839
able

00:13:35,120 --> 00:13:39,519
to look or reference that library which

00:13:37,839 --> 00:13:40,720
is just used within the administration

00:13:39,519 --> 00:13:43,279
part of the whole

00:13:40,720 --> 00:13:44,480
ecosystem and so at that point you can

00:13:43,279 --> 00:13:46,560
either like extract the common

00:13:44,480 --> 00:13:48,880
functionality in another utility

00:13:46,560 --> 00:13:50,560
feature or in a feature in general or

00:13:48,880 --> 00:13:52,320
even just not reference it and find

00:13:50,560 --> 00:13:54,399
another way around it

00:13:52,320 --> 00:13:56,240
so the point here is actually just like

00:13:54,399 --> 00:13:57,920
making people aware and blocking people

00:13:56,240 --> 00:14:01,120
especially if the workspace gets

00:13:57,920 --> 00:14:01,519
bigger and bigger over time and the last

00:14:01,120 --> 00:14:03,600
part

00:14:01,519 --> 00:14:05,519
uh here is obviously feature reusability

00:14:03,600 --> 00:14:07,440
and we have already kind of seen this

00:14:05,519 --> 00:14:08,959
uh when we split up our single

00:14:07,440 --> 00:14:11,279
application as it was before in angular

00:14:08,959 --> 00:14:13,120
cli workspace into two different ones

00:14:11,279 --> 00:14:14,560
it was super easy actually to do that

00:14:13,120 --> 00:14:16,160
because like we have already the

00:14:14,560 --> 00:14:18,000
libraries in place so the only

00:14:16,160 --> 00:14:19,680
thing we have to do is just wire them up

00:14:18,000 --> 00:14:22,320
wire them up to actually

00:14:19,680 --> 00:14:24,480
redeploy them in a different manner so

00:14:22,320 --> 00:14:27,440
that gives a lot of reasonability

00:14:24,480 --> 00:14:29,600
and in general even though like today

00:14:27,440 --> 00:14:31,680
we're mostly focused on angular part

00:14:29,600 --> 00:14:33,519
there's no limit to just like limit this

00:14:31,680 --> 00:14:35,839
to angular or you can even have a react

00:14:33,519 --> 00:14:36,160
application or backhands applications

00:14:35,839 --> 00:14:38,880
like

00:14:36,160 --> 00:14:40,639
nest jazz or just a plain node app and

00:14:38,880 --> 00:14:41,600
reference the same libraries as well and

00:14:40,639 --> 00:14:44,720
even share them

00:14:41,600 --> 00:14:45,279
which is which can be quite powerful

00:14:44,720 --> 00:14:47,040
even if

00:14:45,279 --> 00:14:48,880
especially like for instance if you can

00:14:47,040 --> 00:14:50,000
share things across contracts like

00:14:48,880 --> 00:14:51,199
between backhand and front end

00:14:50,000 --> 00:14:54,560
applications

00:14:51,199 --> 00:14:56,000
might be super useful another point is

00:14:54,560 --> 00:14:58,240
modern developer tools

00:14:56,000 --> 00:14:59,360
um and so that's actually one of the

00:14:58,240 --> 00:15:01,920
main points we

00:14:59,360 --> 00:15:02,720
try to do with nx we try to provide the

00:15:01,920 --> 00:15:06,320
best

00:15:02,720 --> 00:15:07,920
dx we can and so here just to begin with

00:15:06,320 --> 00:15:10,160
uh kind of this is an

00:15:07,920 --> 00:15:11,040
architectural overview of how the nx

00:15:10,160 --> 00:15:14,240
ecosystem

00:15:11,040 --> 00:15:16,079
looks like obviously very simplified but

00:15:14,240 --> 00:15:17,920
like in general in general like below

00:15:16,079 --> 00:15:19,440
there is the angular dev kit

00:15:17,920 --> 00:15:21,839
which provides the whole infrastructure

00:15:19,440 --> 00:15:24,480
for running automations and schematics

00:15:21,839 --> 00:15:26,639
as you know them from angular cli on top

00:15:24,480 --> 00:15:27,360
of that there's angular cli and now or

00:15:26,639 --> 00:15:29,759
tau

00:15:27,360 --> 00:15:30,480
which is kind of an equivalent cli which

00:15:29,759 --> 00:15:32,639
does different

00:15:30,480 --> 00:15:33,680
jobs or additional jobs to the angular

00:15:32,639 --> 00:15:35,199
cli

00:15:33,680 --> 00:15:37,120
and then there's the now workspace which

00:15:35,199 --> 00:15:38,160
has the whole part about figuring out

00:15:37,120 --> 00:15:39,199
the dependencies between your

00:15:38,160 --> 00:15:41,040
applications

00:15:39,199 --> 00:15:43,360
imposing linting rules and things like

00:15:41,040 --> 00:15:45,199
that and then on top of that

00:15:43,360 --> 00:15:46,639
on top of that platform we have a set of

00:15:45,199 --> 00:15:48,720
core plugins

00:15:46,639 --> 00:15:50,560
so there are some code lines just such

00:15:48,720 --> 00:15:53,120
as like jest and cyberis or

00:15:50,560 --> 00:15:54,720
bazel or next.js like which we support

00:15:53,120 --> 00:15:56,480
out of our core package

00:15:54,720 --> 00:15:58,560
and very recently we have also opened up

00:15:56,480 --> 00:15:59,920
to the community like we created the

00:15:58,560 --> 00:16:01,519
necessary infrastructure

00:15:59,920 --> 00:16:04,000
for the community to provide their own

00:16:01,519 --> 00:16:05,839
plugins and this has been a super cool

00:16:04,000 --> 00:16:08,160
initiative because we have seen lots of

00:16:05,839 --> 00:16:08,959
cool plugins coming along like even view

00:16:08,160 --> 00:16:11,440
support

00:16:08,959 --> 00:16:12,160
or support for react native or even just

00:16:11,440 --> 00:16:13,519
like

00:16:12,160 --> 00:16:14,959
uh since we are talking about

00:16:13,519 --> 00:16:15,759
structuring your application there have

00:16:14,959 --> 00:16:17,519
been some

00:16:15,759 --> 00:16:19,759
schematic plugins which help you

00:16:17,519 --> 00:16:21,279
structure your nx workspace according to

00:16:19,759 --> 00:16:22,000
domain driven design principles for

00:16:21,279 --> 00:16:23,920
instance

00:16:22,000 --> 00:16:25,279
so really cool cool things going on

00:16:23,920 --> 00:16:27,120
there

00:16:25,279 --> 00:16:29,279
workspace schematics is also something i

00:16:27,120 --> 00:16:32,560
personally am very excited about

00:16:29,279 --> 00:16:34,880
which is basically a way to generate

00:16:32,560 --> 00:16:36,880
custom schematics within your workspace

00:16:34,880 --> 00:16:38,639
so nx in general comes already

00:16:36,880 --> 00:16:40,079
of course sitting on top of the angular

00:16:38,639 --> 00:16:41,440
cli it comes already with

00:16:40,079 --> 00:16:43,680
kind of some schematics for code

00:16:41,440 --> 00:16:45,440
generation for components services

00:16:43,680 --> 00:16:46,880
and all the things you already love

00:16:45,440 --> 00:16:48,480
about angular cli

00:16:46,880 --> 00:16:50,160
plus some additional things which we

00:16:48,480 --> 00:16:52,320
have created specifically right

00:16:50,160 --> 00:16:53,920
just rinse like storybook support or

00:16:52,320 --> 00:16:55,519
running jazz tests or

00:16:53,920 --> 00:16:58,639
prettier integration and things like

00:16:55,519 --> 00:17:01,360
that workspace schematics are

00:16:58,639 --> 00:17:03,680
something where you can actually even

00:17:01,360 --> 00:17:05,120
level up that game a little further

00:17:03,680 --> 00:17:07,600
because like you can actually generate a

00:17:05,120 --> 00:17:09,679
workspace schematic which just lives

00:17:07,600 --> 00:17:12,000
within your nx workspace

00:17:09,679 --> 00:17:13,360
and so the main like use case for that

00:17:12,000 --> 00:17:15,520
is for instance if you

00:17:13,360 --> 00:17:16,959
generate a plain normal angle library

00:17:15,520 --> 00:17:18,720
but within your organization

00:17:16,959 --> 00:17:20,880
you want to have like the readme

00:17:18,720 --> 00:17:22,640
customized or how you are actually going

00:17:20,880 --> 00:17:23,600
to tag that library and so you can

00:17:22,640 --> 00:17:25,760
actually create

00:17:23,600 --> 00:17:27,360
kind of a wrapper workspace schematic

00:17:25,760 --> 00:17:27,919
which invokes the angular schematic but

00:17:27,360 --> 00:17:29,679
then

00:17:27,919 --> 00:17:31,280
adjusts like the files that have been

00:17:29,679 --> 00:17:32,720
generated even further

00:17:31,280 --> 00:17:34,720
and so obviously that helps it like to

00:17:32,720 --> 00:17:36,480
optimize it for your business for your

00:17:34,720 --> 00:17:38,160
application developers

00:17:36,480 --> 00:17:39,919
increase obviously developer velocity

00:17:38,160 --> 00:17:41,360
because like they have already like

00:17:39,919 --> 00:17:42,559
pre-configured schematics which you can

00:17:41,360 --> 00:17:44,960
just like one and

00:17:42,559 --> 00:17:46,400
it would already comply to the overall

00:17:44,960 --> 00:17:48,799
guidelines which you might have within

00:17:46,400 --> 00:17:50,640
your organization

00:17:48,799 --> 00:17:53,679
when we talk about automated testing and

00:17:50,640 --> 00:17:54,400
quality control uh what we have in nx by

00:17:53,679 --> 00:17:56,880
default

00:17:54,400 --> 00:17:58,559
is just support you obviously also

00:17:56,880 --> 00:18:00,000
support karma just as the angular cli

00:17:58,559 --> 00:18:02,080
does so you can actually choose when you

00:18:00,000 --> 00:18:03,520
generate a new application by default we

00:18:02,080 --> 00:18:05,679
use jazz because we think it's

00:18:03,520 --> 00:18:08,400
it's faster and the depth experience in

00:18:05,679 --> 00:18:10,080
general is is better

00:18:08,400 --> 00:18:11,919
and the similar thing holds also for the

00:18:10,080 --> 00:18:13,600
end-to-end testing like we have pro

00:18:11,919 --> 00:18:14,720
truck to support but by default we

00:18:13,600 --> 00:18:17,200
generate cyprus

00:18:14,720 --> 00:18:18,799
tests for all your apps in fact that's

00:18:17,200 --> 00:18:19,919
what also you see when you generate a

00:18:18,799 --> 00:18:21,679
new application

00:18:19,919 --> 00:18:23,200
by default you will get like a cypress

00:18:21,679 --> 00:18:23,760
end to end test which lives along your

00:18:23,200 --> 00:18:25,520
app

00:18:23,760 --> 00:18:27,440
which is already pre-configured with the

00:18:25,520 --> 00:18:30,799
type should set up and everything to

00:18:27,440 --> 00:18:33,679
just like go ahead and write your tests

00:18:30,799 --> 00:18:35,039
and finally one really cool thing i

00:18:33,679 --> 00:18:37,760
personally find is the

00:18:35,039 --> 00:18:38,559
how different tools are even combined

00:18:37,760 --> 00:18:40,799
right so

00:18:38,559 --> 00:18:41,679
you can actually generate a library in

00:18:40,799 --> 00:18:43,760
nx

00:18:41,679 --> 00:18:45,360
add storybook configuration support for

00:18:43,760 --> 00:18:47,360
it and then even like add

00:18:45,360 --> 00:18:49,280
an additional schematic which generates

00:18:47,360 --> 00:18:51,360
cypress tests for those stories

00:18:49,280 --> 00:18:53,280
and so you can like combine these

00:18:51,360 --> 00:18:54,640
different like building blocks into very

00:18:53,280 --> 00:18:56,320
very powerful tools

00:18:54,640 --> 00:18:58,960
but like isaac is going to show you more

00:18:56,320 --> 00:19:00,480
about that which is probably more

00:18:58,960 --> 00:19:02,400
interesting if you see the code like

00:19:00,480 --> 00:19:04,000
running behind the scenes

00:19:02,400 --> 00:19:06,240
and then there's also linking and code

00:19:04,000 --> 00:19:07,039
formatting so on that and that's front

00:19:06,240 --> 00:19:09,120
basically we

00:19:07,039 --> 00:19:10,720
already pre-generated like printer setup

00:19:09,120 --> 00:19:12,960
so you don't have to worry about like

00:19:10,720 --> 00:19:14,559
the actual formatting of the code which

00:19:12,960 --> 00:19:15,840
is not something you should worry about

00:19:14,559 --> 00:19:17,520
but it's still important obviously

00:19:15,840 --> 00:19:19,200
because you want to have a consistent

00:19:17,520 --> 00:19:22,240
formatting across your entire

00:19:19,200 --> 00:19:24,160
organizational team and the same story

00:19:22,240 --> 00:19:25,840
kind of holds for linting um

00:19:24,160 --> 00:19:27,280
there is ts lint right now which comes

00:19:25,840 --> 00:19:28,799
with angular cli

00:19:27,280 --> 00:19:30,400
which is kind of deprecated at the

00:19:28,799 --> 00:19:32,480
moment and so people are

00:19:30,400 --> 00:19:33,520
working on eslin and actually we just

00:19:32,480 --> 00:19:36,960
released

00:19:33,520 --> 00:19:39,600
10.3 yesterday which has eslint support

00:19:36,960 --> 00:19:41,360
and so now if you start nx and you

00:19:39,600 --> 00:19:42,720
basically generate new workspace you get

00:19:41,360 --> 00:19:44,000
actually asked whether you want to use

00:19:42,720 --> 00:19:45,679
tslindor eslint

00:19:44,000 --> 00:19:47,760
and over the coming weeks relax we will

00:19:45,679 --> 00:19:52,480
actually improve the actual support on

00:19:47,760 --> 00:19:55,840
eslint as well

00:19:52,480 --> 00:19:58,400
let me reload that

00:19:55,840 --> 00:19:59,200
all right pictures here missing but

00:19:58,400 --> 00:20:01,840
anyhow like

00:19:59,200 --> 00:20:03,919
if you go to go do this url here we have

00:20:01,840 --> 00:20:05,039
actually just released a blog post

00:20:03,919 --> 00:20:07,679
couple of hours ago

00:20:05,039 --> 00:20:08,640
which talks about modern angular and

00:20:07,679 --> 00:20:10,720
basically

00:20:08,640 --> 00:20:11,760
how those tools work together which i've

00:20:10,720 --> 00:20:14,400
kind of

00:20:11,760 --> 00:20:16,640
explained to you right now all right but

00:20:14,400 --> 00:20:19,280
i guess i'll hand it over to isaac

00:20:16,640 --> 00:20:21,039
which will actually dive a bit more into

00:20:19,280 --> 00:20:23,840
the actual code that runs

00:20:21,039 --> 00:20:24,159
which is more interesting all right well

00:20:23,840 --> 00:20:26,559
that

00:20:24,159 --> 00:20:27,440
i thought that was very interesting um

00:20:26,559 --> 00:20:31,120
but

00:20:27,440 --> 00:20:35,039
let's dig into some code here so

00:20:31,120 --> 00:20:38,400
um i have here

00:20:35,039 --> 00:20:42,000
move this out of the way okay um

00:20:38,400 --> 00:20:45,600
so um to to get started with

00:20:42,000 --> 00:20:48,640
with nx um you can just run

00:20:45,600 --> 00:20:51,679
uh mpx create

00:20:48,640 --> 00:20:53,919
nx workspace and um

00:20:51,679 --> 00:20:56,159
what i've already done that here so you

00:20:53,919 --> 00:20:59,840
don't have to watch the npm install run

00:20:56,159 --> 00:21:02,960
you can give it a preset of of angular

00:20:59,840 --> 00:21:04,640
which will create a default angular

00:21:02,960 --> 00:21:05,280
application and then you can give it a

00:21:04,640 --> 00:21:09,360
name

00:21:05,280 --> 00:21:14,640
and i gave it enterprise ng

00:21:09,360 --> 00:21:14,640
so if you run that you'll get

00:21:14,880 --> 00:21:19,039
you'll get a workspace like this one

00:21:19,600 --> 00:21:26,640
and uh so you have an apps folder

00:21:23,280 --> 00:21:30,799
and a libs folder for all your libraries

00:21:26,640 --> 00:21:33,840
and a bunch of configuration files so

00:21:30,799 --> 00:21:35,280
here your app folder your default

00:21:33,840 --> 00:21:35,919
generated app folder is the name that

00:21:35,280 --> 00:21:37,520
you picked

00:21:35,919 --> 00:21:39,840
also the the folder is the same as the

00:21:37,520 --> 00:21:43,280
name you picked and

00:21:39,840 --> 00:21:46,720
you can run i'm going to actually do it

00:21:43,280 --> 00:21:50,320
using the nx console here

00:21:46,720 --> 00:21:52,880
um so if you open up

00:21:50,320 --> 00:21:54,159
nx console which is an extension that

00:21:52,880 --> 00:21:58,159
you can install

00:21:54,159 --> 00:22:01,120
if you search for nx console

00:21:58,159 --> 00:22:02,080
it should show up here um and then you

00:22:01,120 --> 00:22:04,159
get this

00:22:02,080 --> 00:22:05,120
this sidebar here so if you go to

00:22:04,159 --> 00:22:07,200
enterprise

00:22:05,120 --> 00:22:10,000
ng which is our default application i

00:22:07,200 --> 00:22:10,000
can serve it

00:22:10,559 --> 00:22:13,600
so that's the same thing as typing

00:22:12,320 --> 00:22:17,280
ng-serve

00:22:13,600 --> 00:22:20,720
in your terminal

00:22:17,280 --> 00:22:20,720
so we're going to run that and

00:22:23,360 --> 00:22:26,559
this is the the default application that

00:22:25,360 --> 00:22:28,720
gets generated for you

00:22:26,559 --> 00:22:29,600
it has some instructions in there so

00:22:28,720 --> 00:22:33,600
what i'm going to do

00:22:29,600 --> 00:22:36,960
is let's pretend

00:22:33,600 --> 00:22:40,159
that that

00:22:36,960 --> 00:22:41,840
we have made some changes in this

00:22:40,159 --> 00:22:44,799
workspace so i'm going to check out

00:22:41,840 --> 00:22:44,799
another branch here

00:22:45,840 --> 00:22:52,240
where i have created a new

00:22:49,200 --> 00:22:55,520
component called the nx

00:22:52,240 --> 00:22:58,559
slider and this component

00:22:55,520 --> 00:23:01,760
here i'm i'm using it here so i've

00:22:58,559 --> 00:23:03,200
gotten rid of the the boilerplate html

00:23:01,760 --> 00:23:06,240
here in the app component

00:23:03,200 --> 00:23:07,280
and included our our new component on

00:23:06,240 --> 00:23:10,720
the screen

00:23:07,280 --> 00:23:14,320
it has one one input on this component

00:23:10,720 --> 00:23:17,520
the nx amount here and

00:23:14,320 --> 00:23:21,360
html here is just showing a

00:23:17,520 --> 00:23:23,520
an image along with a range input

00:23:21,360 --> 00:23:25,200
and then displaying a message based on

00:23:23,520 --> 00:23:27,760
that that input value so let me show you

00:23:25,200 --> 00:23:31,280
what that looks like

00:23:27,760 --> 00:23:32,159
so here it is uh so we've got this

00:23:31,280 --> 00:23:35,039
slider here

00:23:32,159 --> 00:23:37,360
with the nx logo and the more nx you you

00:23:35,039 --> 00:23:38,799
add to your application the more you get

00:23:37,360 --> 00:23:40,400
smarter and faster

00:23:38,799 --> 00:23:41,840
angular development so if we move this

00:23:40,400 --> 00:23:43,360
all the way down to zero

00:23:41,840 --> 00:23:45,120
barely anything is showing if you move

00:23:43,360 --> 00:23:47,440
it all the way up to 100 it'll show

00:23:45,120 --> 00:23:49,279
the whole message so that's what our

00:23:47,440 --> 00:23:53,760
component does so let's

00:23:49,279 --> 00:23:56,880
we're going to work through taking this

00:23:53,760 --> 00:24:00,640
existing application i'll kill the

00:23:56,880 --> 00:24:01,600
serve here and we're going to take this

00:24:00,640 --> 00:24:05,520
and say

00:24:01,600 --> 00:24:07,600
um we probably uh want to take this

00:24:05,520 --> 00:24:08,640
component and it doesn't really belong

00:24:07,600 --> 00:24:10,960
in the app

00:24:08,640 --> 00:24:11,760
itself this should probably be in a

00:24:10,960 --> 00:24:15,760
shared

00:24:11,760 --> 00:24:15,760
library so

00:24:16,480 --> 00:24:23,679
i'm going to run the

00:24:20,559 --> 00:24:26,720
generate schematic to create a shared

00:24:23,679 --> 00:24:31,200
library so we'll call our library

00:24:26,720 --> 00:24:34,320
shared ui and as i type it in

00:24:31,200 --> 00:24:37,919
it does a dry run of the schematic

00:24:34,320 --> 00:24:40,400
shows you what the files what files will

00:24:37,919 --> 00:24:42,799
be created what files will be updated

00:24:40,400 --> 00:24:44,960
and if this looks right we'll click run

00:24:42,799 --> 00:24:47,279
up here

00:24:44,960 --> 00:24:49,120
and that will actually create the create

00:24:47,279 --> 00:24:52,559
the files

00:24:49,120 --> 00:24:52,559
we'll use sas that's fine

00:24:53,279 --> 00:24:56,640
and now i can go back to my explorer

00:24:56,159 --> 00:24:59,200
here

00:24:56,640 --> 00:25:00,799
and see that the shared ui library has

00:24:59,200 --> 00:25:05,279
been created

00:25:00,799 --> 00:25:08,320
now i want to run the dependency graph

00:25:05,279 --> 00:25:10,720
that lets us see what nx sees when it

00:25:08,320 --> 00:25:14,720
analyzes our workspace

00:25:10,720 --> 00:25:17,760
so i typed nx nx depth graph here to

00:25:14,720 --> 00:25:20,880
launch the dependency graph

00:25:17,760 --> 00:25:23,120
and it pulled up a

00:25:20,880 --> 00:25:24,720
a browser window here and i'm going to

00:25:23,120 --> 00:25:26,480
select all to show everything

00:25:24,720 --> 00:25:28,400
every project in my workspace and you

00:25:26,480 --> 00:25:28,960
can see here that we've got an end to

00:25:28,400 --> 00:25:31,840
end

00:25:28,960 --> 00:25:33,520
application that depends on our our

00:25:31,840 --> 00:25:36,320
normal application here

00:25:33,520 --> 00:25:38,400
and then we have our shared ui library

00:25:36,320 --> 00:25:40,320
but there's no connection between the

00:25:38,400 --> 00:25:42,000
application and the library because we

00:25:40,320 --> 00:25:44,320
haven't actually made

00:25:42,000 --> 00:25:47,039
a real connection there so you see that

00:25:44,320 --> 00:25:48,799
nx is smart enough to see that they're

00:25:47,039 --> 00:25:50,960
where where the actual connections are

00:25:48,799 --> 00:25:51,760
in your code and it draws these lines

00:25:50,960 --> 00:25:54,400
based on

00:25:51,760 --> 00:25:55,520
what what what import statements you've

00:25:54,400 --> 00:25:57,760
actually written with your code which

00:25:55,520 --> 00:25:59,679
which is really powerful so it's not

00:25:57,760 --> 00:26:00,799
manually created and instantly out of

00:25:59,679 --> 00:26:03,520
date it's actually

00:26:00,799 --> 00:26:06,000
live and calculated based on what code

00:26:03,520 --> 00:26:06,000
you've written

00:26:06,880 --> 00:26:11,200
so let's take this component here and

00:26:09,919 --> 00:26:15,120
let's move it down

00:26:11,200 --> 00:26:17,760
into our shared ui library

00:26:15,120 --> 00:26:18,960
so i'm going to right click here on the

00:26:17,760 --> 00:26:21,200
in the library

00:26:18,960 --> 00:26:22,559
and i'm going to choose nx generate ui

00:26:21,200 --> 00:26:25,200
so this right click

00:26:22,559 --> 00:26:27,279
option here in the context menu that's a

00:26:25,200 --> 00:26:29,840
new feature in the nx console version

00:26:27,279 --> 00:26:29,840
14.

00:26:30,400 --> 00:26:34,559
and what it's going to do is it's going

00:26:32,640 --> 00:26:37,039
to automatically so i can

00:26:34,559 --> 00:26:39,200
type the schematic that i want i want

00:26:37,039 --> 00:26:42,640
the angular component schematic

00:26:39,200 --> 00:26:46,799
and this pre-populated the project here

00:26:42,640 --> 00:26:50,080
and the path down there so i can so

00:26:46,799 --> 00:26:52,080
by just by right-clicking there i told

00:26:50,080 --> 00:26:53,440
nxconsole where i want this component to

00:26:52,080 --> 00:26:55,840
be generated

00:26:53,440 --> 00:26:57,760
so i'm going to name it the same as i

00:26:55,840 --> 00:27:02,000
named this one up here

00:26:57,760 --> 00:27:04,799
nx slider and

00:27:02,000 --> 00:27:04,799
um

00:27:07,520 --> 00:27:10,960
and i want to make sure to set the style

00:27:10,559 --> 00:27:14,000
to

00:27:10,960 --> 00:27:17,679
scss and i want to export this

00:27:14,000 --> 00:27:21,600
so it can be used outside of this module

00:27:17,679 --> 00:27:23,840
okay so i'm going to run this

00:27:21,600 --> 00:27:26,799
so this component this schematic

00:27:23,840 --> 00:27:29,039
generated a blank component here

00:27:26,799 --> 00:27:30,799
and what i'm going to do is i'm going to

00:27:29,039 --> 00:27:34,080
move

00:27:30,799 --> 00:27:37,279
this whole folder over the top of that

00:27:34,080 --> 00:27:37,279
one and just replace

00:27:38,480 --> 00:27:44,080
replace the blank component with my

00:27:41,520 --> 00:27:45,520
newly created one with with one with

00:27:44,080 --> 00:27:47,039
actual content here

00:27:45,520 --> 00:27:48,799
so there's an error here because i need

00:27:47,039 --> 00:27:51,200
my forms module

00:27:48,799 --> 00:27:53,600
to get that ng module working so i'm

00:27:51,200 --> 00:27:55,360
going to import forms module

00:27:53,600 --> 00:27:59,120
so as you move things around you have to

00:27:55,360 --> 00:27:59,120
update your your dependencies

00:27:59,279 --> 00:28:05,360
and then so that should

00:28:02,799 --> 00:28:07,120
if i restart the angular language server

00:28:05,360 --> 00:28:10,720
that makes that

00:28:07,120 --> 00:28:14,480
error go away and then here

00:28:10,720 --> 00:28:14,480
we're going to get an error on this one

00:28:15,279 --> 00:28:19,360
actually we can get an error here

00:28:17,200 --> 00:28:22,559
because we've moved that file

00:28:19,360 --> 00:28:22,559
so we need to get rid of that

00:28:23,039 --> 00:28:28,000
since it's no longer there and we don't

00:28:25,760 --> 00:28:32,240
need the forms module anymore but we do

00:28:28,000 --> 00:28:36,559
need every time you create a new

00:28:32,240 --> 00:28:39,679
a new library it updates the

00:28:36,559 --> 00:28:41,440
where is it the ts config base file and

00:28:39,679 --> 00:28:43,120
it adds a path here

00:28:41,440 --> 00:28:45,039
but when it does that typescript doesn't

00:28:43,120 --> 00:28:48,159
automatically pick that up for you

00:28:45,039 --> 00:28:51,279
so you have to do um

00:28:48,159 --> 00:28:52,720
well i'll show you if i go in here and i

00:28:51,279 --> 00:28:56,080
import from

00:28:52,720 --> 00:28:58,000
okay well it did pick it up okay

00:28:56,080 --> 00:28:59,919
sometimes you have to do restart

00:28:58,000 --> 00:29:03,279
typescript server

00:28:59,919 --> 00:29:04,799
when you when you add a new library when

00:29:03,279 --> 00:29:05,919
you update that pass value but in this

00:29:04,799 --> 00:29:07,520
case

00:29:05,919 --> 00:29:09,039
typescript was on top of things and was

00:29:07,520 --> 00:29:12,080
able to find it so

00:29:09,039 --> 00:29:13,679
import the shared ui module import it

00:29:12,080 --> 00:29:16,399
there

00:29:13,679 --> 00:29:19,279
and that should update here so this is

00:29:16,399 --> 00:29:22,880
this should not work

00:29:19,279 --> 00:29:27,840
all right now let me save everything

00:29:22,880 --> 00:29:27,840
and i'm going to re-run

00:29:28,240 --> 00:29:31,600
the serve here

00:29:38,840 --> 00:29:43,919
serve

00:29:40,640 --> 00:29:45,919
actually um while i'm here why don't i

00:29:43,919 --> 00:29:47,760
i want to show you the the dependency

00:29:45,919 --> 00:29:48,880
graph

00:29:47,760 --> 00:29:51,279
now that i've actually made the

00:29:48,880 --> 00:29:51,279
connection

00:29:52,640 --> 00:29:56,480
you can see that now the line is

00:29:54,320 --> 00:29:58,080
actually drawn between the application

00:29:56,480 --> 00:30:01,440
and the library so you can see that

00:29:58,080 --> 00:30:03,760
nx was able to tell that because we have

00:30:01,440 --> 00:30:06,240
uh this import statement here we can see

00:30:03,760 --> 00:30:09,279
that the the application

00:30:06,240 --> 00:30:11,200
enterprise ng application is now really

00:30:09,279 --> 00:30:13,919
depending on the shared ui library

00:30:11,200 --> 00:30:16,720
because you can tell that we imported uh

00:30:13,919 --> 00:30:18,320
something from that library here

00:30:16,720 --> 00:30:19,840
okay and the other thing that's great

00:30:18,320 --> 00:30:20,720
about this is now that we have this

00:30:19,840 --> 00:30:22,640
component

00:30:20,720 --> 00:30:25,360
separated into a separate library we can

00:30:22,640 --> 00:30:28,320
see that in this index.ts

00:30:25,360 --> 00:30:29,600
we have explicitly defined what people

00:30:28,320 --> 00:30:32,720
are allowed to

00:30:29,600 --> 00:30:36,240
import from this library um

00:30:32,720 --> 00:30:38,720
if i were to let's see

00:30:36,240 --> 00:30:40,320
um i'm gonna put something in here uh

00:30:38,720 --> 00:30:44,320
export

00:30:40,320 --> 00:30:44,320
const some value

00:30:47,440 --> 00:30:55,840
if i were to put that in here and then

00:30:51,760 --> 00:30:59,519
i'm going to copy this relative path

00:30:55,840 --> 00:31:05,840
and then in here do

00:30:59,519 --> 00:31:05,840
import from

00:31:06,960 --> 00:31:13,440
some value here

00:31:10,000 --> 00:31:15,039
so there's an error here it says um

00:31:13,440 --> 00:31:16,960
libraries cannot be imported by a

00:31:15,039 --> 00:31:21,039
relative or absolute path

00:31:16,960 --> 00:31:23,919
um let me get rid of that

00:31:21,039 --> 00:31:25,679
wts okay so that makes that part valid

00:31:23,919 --> 00:31:27,919
but it's still it still doesn't like the

00:31:25,679 --> 00:31:32,480
the fact that you're trying to

00:31:27,919 --> 00:31:34,320
skip uh past the um you're skip

00:31:32,480 --> 00:31:37,120
skipping past the api that's defined

00:31:34,320 --> 00:31:38,880
even if i replaced it with

00:31:37,120 --> 00:31:41,360
with this path here and then tried to do

00:31:38,880 --> 00:31:44,840
it direct um

00:31:41,360 --> 00:31:48,159
a direct import would be to right

00:31:44,840 --> 00:31:48,720
there so that that should be a valid

00:31:48,159 --> 00:31:54,080
import

00:31:48,720 --> 00:31:54,080
but uh shared ui

00:31:57,279 --> 00:32:03,760
okay well so um because

00:32:00,640 --> 00:32:06,000
because nx is

00:32:03,760 --> 00:32:07,360
watching out for us we can see that it

00:32:06,000 --> 00:32:08,960
throws a lint error when we try to

00:32:07,360 --> 00:32:11,600
import things that we're not supposed to

00:32:08,960 --> 00:32:12,720
not supposed to import okay so let's see

00:32:11,600 --> 00:32:15,519
what this actually looks like

00:32:12,720 --> 00:32:17,200
let's make sure that our application is

00:32:15,519 --> 00:32:20,399
still working

00:32:17,200 --> 00:32:23,360
okay so this is the application itself

00:32:20,399 --> 00:32:25,200
so we've refactored and we've uh

00:32:23,360 --> 00:32:25,760
verified that that our application still

00:32:25,200 --> 00:32:29,120
works

00:32:25,760 --> 00:32:32,159
the way we expect it to great um

00:32:29,120 --> 00:32:35,279
so now let's say we have

00:32:32,159 --> 00:32:38,960
a whole bunch of these components here

00:32:35,279 --> 00:32:41,200
and we want to kind of

00:32:38,960 --> 00:32:42,159
verify that they're they're working in

00:32:41,200 --> 00:32:43,679
isolation

00:32:42,159 --> 00:32:45,279
um because if they're sprinkled all

00:32:43,679 --> 00:32:47,279
throughout your application sometimes

00:32:45,279 --> 00:32:50,720
you accidentally depend on

00:32:47,279 --> 00:32:54,159
um like css rules that are declared

00:32:50,720 --> 00:32:55,519
in other places and um so it's good to

00:32:54,159 --> 00:32:57,200
check and see if your reusable

00:32:55,519 --> 00:32:59,120
components are actually

00:32:57,200 --> 00:33:01,039
really reusable and not just depending

00:32:59,120 --> 00:33:01,440
on the specific place they happen to be

00:33:01,039 --> 00:33:04,480
used

00:33:01,440 --> 00:33:07,039
right now so one great way of

00:33:04,480 --> 00:33:08,159
of doing that testing things in

00:33:07,039 --> 00:33:11,279
isolation is to use

00:33:08,159 --> 00:33:13,679
a tool called storybook so the way you

00:33:11,279 --> 00:33:17,200
would do this is you would add a yarn

00:33:13,679 --> 00:33:20,640
a yarn ad narwhal

00:33:17,200 --> 00:33:22,480
storybook i've already done this so i'm

00:33:20,640 --> 00:33:25,600
going to skip that

00:33:22,480 --> 00:33:26,000
but once you've added storybook you can

00:33:25,600 --> 00:33:29,200
do

00:33:26,000 --> 00:33:30,799
generate uh narwhal angular storybook

00:33:29,200 --> 00:33:32,799
configuration

00:33:30,799 --> 00:33:34,720
and i'm going to just give it the shared

00:33:32,799 --> 00:33:36,640
ui

00:33:34,720 --> 00:33:39,200
project name and then check all these

00:33:36,640 --> 00:33:40,799
check boxes

00:33:39,200 --> 00:33:43,200
and then let me show you what this does

00:33:40,799 --> 00:33:43,200
for you

00:33:44,240 --> 00:33:48,240
so what this is done it's installing

00:33:45,919 --> 00:33:50,159
some packages in the background here but

00:33:48,240 --> 00:33:51,600
while it's doing that i'm going to show

00:33:50,159 --> 00:33:54,080
you that it's added a

00:33:51,600 --> 00:33:55,600
dot storybook file a folder to your

00:33:54,080 --> 00:33:57,519
shared ui library

00:33:55,600 --> 00:33:58,799
which has a bunch of configuration files

00:33:57,519 --> 00:34:01,360
for storybook

00:33:58,799 --> 00:34:02,880
it's also looked inside of this library

00:34:01,360 --> 00:34:05,600
and found all the components

00:34:02,880 --> 00:34:06,000
declared in this top level module and it

00:34:05,600 --> 00:34:08,639
found

00:34:06,000 --> 00:34:10,159
the nx slider component here and created

00:34:08,639 --> 00:34:13,359
an nx slider component

00:34:10,159 --> 00:34:13,839
stories file now what this does is it

00:34:13,359 --> 00:34:16,720
looks

00:34:13,839 --> 00:34:18,839
in the component itself it generates a

00:34:16,720 --> 00:34:21,679
kind of a default storybook

00:34:18,839 --> 00:34:24,320
story and it noticed that

00:34:21,679 --> 00:34:25,599
there's an nx amount input on this

00:34:24,320 --> 00:34:29,359
component and so because of that

00:34:25,599 --> 00:34:32,879
it it created a

00:34:29,359 --> 00:34:34,879
storybook knob for you automatically

00:34:32,879 --> 00:34:36,879
and what a storybook knob is is it's

00:34:34,879 --> 00:34:38,639
basically a

00:34:36,879 --> 00:34:40,800
there's a there's a form underneath your

00:34:38,639 --> 00:34:43,040
storybook instance

00:34:40,800 --> 00:34:44,960
that you can uh change the fields on

00:34:43,040 --> 00:34:46,800
those and that changes the values of the

00:34:44,960 --> 00:34:49,359
inputs

00:34:46,800 --> 00:34:50,159
that for the for the component that's

00:34:49,359 --> 00:34:51,839
displayed above

00:34:50,159 --> 00:34:54,240
let me uh now that this is finished

00:34:51,839 --> 00:34:56,720
installing i'm going to show you exactly

00:34:54,240 --> 00:34:59,359
what that looks like

00:34:56,720 --> 00:35:00,640
so under your projects in the nx console

00:34:59,359 --> 00:35:02,320
here so this has not been

00:35:00,640 --> 00:35:03,839
updated since we've added the shared ui

00:35:02,320 --> 00:35:04,880
library so just click the refresh button

00:35:03,839 --> 00:35:07,119
over here

00:35:04,880 --> 00:35:08,960
and it repopulates that and now there's

00:35:07,119 --> 00:35:11,119
a there's a storybook

00:35:08,960 --> 00:35:14,000
builder here for the shared ui libraries

00:35:11,119 --> 00:35:14,000
i'm going to click run here

00:35:15,680 --> 00:35:19,359
and this will launch a storybook

00:35:17,119 --> 00:35:21,520
instance for us to look at our

00:35:19,359 --> 00:35:24,480
slider component in isolation from the

00:35:21,520 --> 00:35:26,240
rest of your application

00:35:24,480 --> 00:35:28,160
so the application looks like this it's

00:35:26,240 --> 00:35:29,440
got the a title and then the slider

00:35:28,160 --> 00:35:32,880
component is is

00:35:29,440 --> 00:35:32,880
all of this part down here at the bottom

00:35:32,960 --> 00:35:38,240
okay so storybook is loaded

00:35:36,320 --> 00:35:40,960
this is what storybook looks like by

00:35:38,240 --> 00:35:41,839
itself so now we just have the nx slider

00:35:40,960 --> 00:35:45,440
component

00:35:41,839 --> 00:35:47,920
here and you can see down here we can

00:35:45,440 --> 00:35:50,160
change the the nx amount here so if it's

00:35:47,920 --> 00:35:51,520
if it's 10 it updates up here to change

00:35:50,160 --> 00:35:52,960
where the slider is and if you make it

00:35:51,520 --> 00:35:54,640
100 down here

00:35:52,960 --> 00:35:56,240
then the the slider moves all the way

00:35:54,640 --> 00:35:57,280
over the top over the end and so we can

00:35:56,240 --> 00:35:59,040
verify that this

00:35:57,280 --> 00:36:00,560
component actually works the way we want

00:35:59,040 --> 00:36:02,000
it to

00:36:00,560 --> 00:36:04,000
this is great when you're initially

00:36:02,000 --> 00:36:05,520
developing the component but

00:36:04,000 --> 00:36:07,359
you don't want to do this every single

00:36:05,520 --> 00:36:08,240
time you make any change anywhere in

00:36:07,359 --> 00:36:11,680
your application

00:36:08,240 --> 00:36:13,839
we want to automate this a little bit so

00:36:11,680 --> 00:36:14,880
the other thing that that same exact

00:36:13,839 --> 00:36:17,920
configuration

00:36:14,880 --> 00:36:19,359
um schematic did for us is it created

00:36:17,920 --> 00:36:23,200
this shared ui

00:36:19,359 --> 00:36:26,400
ete application and what this is is

00:36:23,200 --> 00:36:29,440
it's a cypress uh end-to-end

00:36:26,400 --> 00:36:32,960
test application

00:36:29,440 --> 00:36:36,000
that will run cypress tests

00:36:32,960 --> 00:36:38,400
against the

00:36:36,000 --> 00:36:40,000
against the storybook instance so i'm

00:36:38,400 --> 00:36:43,520
going to run

00:36:40,000 --> 00:36:47,200
npx nx run

00:36:43,520 --> 00:36:49,920
shared ui end to end the end to end task

00:36:47,200 --> 00:36:50,560
and i want to add the watch dash dash

00:36:49,920 --> 00:36:52,880
watch

00:36:50,560 --> 00:36:54,800
a parameter onto this uh onto this

00:36:52,880 --> 00:36:56,640
builder so if i ran it without the watch

00:36:54,800 --> 00:36:59,280
it would run the cyphers test

00:36:56,640 --> 00:37:00,800
one time and be done and you we wouldn't

00:36:59,280 --> 00:37:02,320
have a chance to stop and see

00:37:00,800 --> 00:37:03,920
what happened so i want to do this with

00:37:02,320 --> 00:37:06,800
with watch mode applied

00:37:03,920 --> 00:37:08,000
so we can actually see the um the

00:37:06,800 --> 00:37:10,480
cypress test actually running

00:37:08,000 --> 00:37:12,480
so all of this was was generated

00:37:10,480 --> 00:37:14,000
automatically for me i didn't write any

00:37:12,480 --> 00:37:16,720
of this code this was all

00:37:14,000 --> 00:37:18,960
generated by the schematic um the the

00:37:16,720 --> 00:37:22,320
only piece that i wrote

00:37:18,960 --> 00:37:24,240
i wrote um the the slider component

00:37:22,320 --> 00:37:26,640
itself

00:37:24,240 --> 00:37:28,320
and and the typescript here but the the

00:37:26,640 --> 00:37:30,000
story was generated for me this

00:37:28,320 --> 00:37:30,800
storybook configuration was generated

00:37:30,000 --> 00:37:33,359
for me

00:37:30,800 --> 00:37:35,280
and the everything in this spec file was

00:37:33,359 --> 00:37:37,520
generated for me

00:37:35,280 --> 00:37:38,640
okay so cyprus is running now so what

00:37:37,520 --> 00:37:41,040
what the what that

00:37:38,640 --> 00:37:42,079
builder did is at first i launched

00:37:41,040 --> 00:37:44,000
storybook

00:37:42,079 --> 00:37:45,280
and then it launched cyprus running

00:37:44,000 --> 00:37:48,480
against that storybook so if i click

00:37:45,280 --> 00:37:51,119
here on nx slider component

00:37:48,480 --> 00:37:53,680
this is running against the so you can

00:37:51,119 --> 00:37:57,599
see here this is the the iframe

00:37:53,680 --> 00:37:57,599
of the storybook story

00:37:58,079 --> 00:38:01,920
and you can see that it's just verifying

00:37:59,920 --> 00:38:03,359
that this that the component is present

00:38:01,920 --> 00:38:04,480
in the dom somewhere so let's make a

00:38:03,359 --> 00:38:08,000
real

00:38:04,480 --> 00:38:11,119
a real test here i'm going to copy over

00:38:08,000 --> 00:38:11,119
one that i already wrote

00:38:11,680 --> 00:38:17,839
and this is this schematic lets you jump

00:38:14,800 --> 00:38:20,640
right away into the the part that's

00:38:17,839 --> 00:38:22,640
interesting for your actual application

00:38:20,640 --> 00:38:25,599
so let me go back so cyprus has already

00:38:22,640 --> 00:38:28,000
run this um but i'm going to have it run

00:38:25,599 --> 00:38:29,359
it again just so we can see it happen

00:38:28,000 --> 00:38:31,040
so we've got this first one that was

00:38:29,359 --> 00:38:33,440
created for us automatically the second

00:38:31,040 --> 00:38:36,000
one that i just wrote

00:38:33,440 --> 00:38:38,320
so initially it's loaded like this and

00:38:36,000 --> 00:38:40,400
then i set the value to 50 here

00:38:38,320 --> 00:38:41,520
and then it's verifying that the the

00:38:40,400 --> 00:38:44,079
cover element

00:38:41,520 --> 00:38:46,160
has the correct styling applied to it so

00:38:44,079 --> 00:38:48,079
now this this test is automated

00:38:46,160 --> 00:38:49,440
and we can see that our changes will

00:38:48,079 --> 00:38:51,359
actually um

00:38:49,440 --> 00:38:52,560
stay there and the component will still

00:38:51,359 --> 00:38:54,000
work even if

00:38:52,560 --> 00:38:56,400
we make changes elsewhere in the

00:38:54,000 --> 00:38:57,440
application so this is the this is the

00:38:56,400 --> 00:39:00,800
smarter

00:38:57,440 --> 00:39:03,200
piece of the smarter and faster develop

00:39:00,800 --> 00:39:04,480
angular development and so i'm going to

00:39:03,200 --> 00:39:08,560
hand it back to yuri

00:39:04,480 --> 00:39:12,240
to show you the uh the faster

00:39:08,560 --> 00:39:16,160
piece very cool

00:39:12,240 --> 00:39:16,160
so let's jump back in

00:39:16,320 --> 00:39:19,440
into the slice part so yeah as isaac

00:39:18,640 --> 00:39:21,520
said like

00:39:19,440 --> 00:39:23,200
we want to take a look at last piece

00:39:21,520 --> 00:39:25,280
here which is kind of talk about

00:39:23,200 --> 00:39:27,680
scalability and speed and

00:39:25,280 --> 00:39:29,440
as i mentioned initially nx has kind of

00:39:27,680 --> 00:39:31,440
been designed from the ground up

00:39:29,440 --> 00:39:33,119
to work very well in monorepos and

00:39:31,440 --> 00:39:34,560
monorepos are where you really have a

00:39:33,119 --> 00:39:36,240
lot of applications in there

00:39:34,560 --> 00:39:38,079
and especially for large organizations

00:39:36,240 --> 00:39:40,000
there might be like hundreds of them

00:39:38,079 --> 00:39:41,599
as well as like hundreds of libraries

00:39:40,000 --> 00:39:44,640
and obviously

00:39:41,599 --> 00:39:46,960
like first of all you might ask like why

00:39:44,640 --> 00:39:48,800
would i need a monorepo and so in this

00:39:46,960 --> 00:39:49,599
webinar today we wanted to kind of focus

00:39:48,800 --> 00:39:52,480
more on

00:39:49,599 --> 00:39:53,599
how you can even use nx even in a small

00:39:52,480 --> 00:39:56,400
single project

00:39:53,599 --> 00:39:58,079
angular workspace but as you as you go

00:39:56,400 --> 00:39:59,200
ahead and like you split them up like

00:39:58,079 --> 00:40:01,599
you might want to have

00:39:59,200 --> 00:40:03,599
more apps in there benefit more from the

00:40:01,599 --> 00:40:04,400
easy sharing capabilities which gen x

00:40:03,599 --> 00:40:05,760
brings you

00:40:04,400 --> 00:40:08,720
and there are a couple of other things

00:40:05,760 --> 00:40:10,560
about monoreeps which you might like

00:40:08,720 --> 00:40:12,319
but affordably today like we don't

00:40:10,560 --> 00:40:12,720
really have time to go too much into

00:40:12,319 --> 00:40:15,760
that

00:40:12,720 --> 00:40:17,440
but um jeff and and victor

00:40:15,760 --> 00:40:19,200
uh which are the co-founders of now are

00:40:17,440 --> 00:40:22,000
basically have uh

00:40:19,200 --> 00:40:24,240
had a webinar in june where they went

00:40:22,000 --> 00:40:26,000
more into the details of like why you

00:40:24,240 --> 00:40:27,200
would want to have a monorepo what are

00:40:26,000 --> 00:40:29,119
the challenges there you

00:40:27,200 --> 00:40:31,440
might face and how an x can kind of help

00:40:29,119 --> 00:40:34,800
you with that so definitely check out

00:40:31,440 --> 00:40:37,680
uh that talk uh from them

00:40:34,800 --> 00:40:38,240
now in general in a monorepo this is the

00:40:37,680 --> 00:40:39,599
kind of

00:40:38,240 --> 00:40:41,520
graph and image which you have seen

00:40:39,599 --> 00:40:42,319
before where you have not only angular

00:40:41,520 --> 00:40:44,400
apps but you might

00:40:42,319 --> 00:40:46,240
even have like react apps and back-end

00:40:44,400 --> 00:40:49,440
applications and so on

00:40:46,240 --> 00:40:52,800
and and so having all those apps

00:40:49,440 --> 00:40:53,920
in there uh you probably don't want to

00:40:52,800 --> 00:40:57,119
always kind of

00:40:53,920 --> 00:40:58,400
build test lint all of them every time

00:40:57,119 --> 00:41:00,720
right because like the problem is like

00:40:58,400 --> 00:41:03,760
when you submit a merge request or

00:41:00,720 --> 00:41:05,920
pull request uh to merge into master

00:41:03,760 --> 00:41:07,440
a naive setup might just like list all

00:41:05,920 --> 00:41:09,280
of the different kind of applications

00:41:07,440 --> 00:41:10,880
and like run first the build for all of

00:41:09,280 --> 00:41:12,720
them and then the tests for all of the

00:41:10,880 --> 00:41:14,640
libraries and applications and so on

00:41:12,720 --> 00:41:16,240
which definitely doesn't scale right so

00:41:14,640 --> 00:41:16,960
it doesn't scale in terms of like

00:41:16,240 --> 00:41:19,440
configuration

00:41:16,960 --> 00:41:20,160
purpose but not even in time because

00:41:19,440 --> 00:41:22,720
your

00:41:20,160 --> 00:41:24,560
whole spy might like go from like 10

00:41:22,720 --> 00:41:25,599
minutes up to hours which is not like

00:41:24,560 --> 00:41:28,079
working

00:41:25,599 --> 00:41:28,720
and so nx is obviously helping you with

00:41:28,079 --> 00:41:30,800
that and

00:41:28,720 --> 00:41:32,880
the main thing nx does here is it

00:41:30,800 --> 00:41:34,720
actually knows what you're building

00:41:32,880 --> 00:41:36,319
and that's actually what isaac has kind

00:41:34,720 --> 00:41:37,920
of shown you in his demo right like when

00:41:36,319 --> 00:41:40,240
he showed you that dependency graph

00:41:37,920 --> 00:41:41,839
so these pictures which i'm showing here

00:41:40,240 --> 00:41:43,040
for like illustration purposes are

00:41:41,839 --> 00:41:45,839
actually the dependency graph

00:41:43,040 --> 00:41:47,359
and x has behind the scenes so it knows

00:41:45,839 --> 00:41:48,560
how the different apps and libraries

00:41:47,359 --> 00:41:50,319
relate to each other and

00:41:48,560 --> 00:41:52,560
therefore you can also like use them and

00:41:50,319 --> 00:41:54,400
leverage them to speed up things

00:41:52,560 --> 00:41:56,000
so for instance if you modify something

00:41:54,400 --> 00:41:57,920
in that library which i've marked here

00:41:56,000 --> 00:41:59,599
with that circle down there

00:41:57,920 --> 00:42:01,200
then nx can simply like walk up the

00:41:59,599 --> 00:42:02,720
dependency graph and understand that it

00:42:01,200 --> 00:42:04,640
has to also run like

00:42:02,720 --> 00:42:06,000
testing and linting and building for

00:42:04,640 --> 00:42:07,119
libraries above it

00:42:06,000 --> 00:42:09,520
up to the very top where the

00:42:07,119 --> 00:42:10,720
applications reside and it can really

00:42:09,520 --> 00:42:13,119
like cut out the

00:42:10,720 --> 00:42:14,560
entire other half of the tree which in

00:42:13,119 --> 00:42:15,440
this case for instance involves like the

00:42:14,560 --> 00:42:16,720
nest jazz and

00:42:15,440 --> 00:42:19,040
the node.js backhand and a couple of

00:42:16,720 --> 00:42:20,960
libraries there and as you can see like

00:42:19,040 --> 00:42:22,560
it depends on the scenario which or

00:42:20,960 --> 00:42:23,760
the amount of libraries which you

00:42:22,560 --> 00:42:25,200
touched basically but it can really

00:42:23,760 --> 00:42:27,119
really make a difference in terms of

00:42:25,200 --> 00:42:29,200
speed on ci

00:42:27,119 --> 00:42:30,720
and so that's one part and we call them

00:42:29,200 --> 00:42:33,440
affected commands and so

00:42:30,720 --> 00:42:34,079
rather than running an x build specific

00:42:33,440 --> 00:42:36,240
library or

00:42:34,079 --> 00:42:38,079
app you run an x affected test which

00:42:36,240 --> 00:42:40,240
will then basically

00:42:38,079 --> 00:42:41,760
go through your git commits and verify

00:42:40,240 --> 00:42:44,160
like what did you change

00:42:41,760 --> 00:42:45,760
in that specific feature compared to

00:42:44,160 --> 00:42:47,200
what is the master right now or the

00:42:45,760 --> 00:42:49,040
branch you're specifying

00:42:47,200 --> 00:42:52,800
and then it calculates the libraries and

00:42:49,040 --> 00:42:54,560
then identifies what has to be rebuilt

00:42:52,800 --> 00:42:57,280
this is one part and another part which

00:42:54,560 --> 00:42:59,440
we have introduced in nx version 8

00:42:57,280 --> 00:43:01,280
is the so-called computational caching

00:42:59,440 --> 00:43:03,359
and what that does is

00:43:01,280 --> 00:43:05,119
kind of it's something that sits on top

00:43:03,359 --> 00:43:06,800
of the the whole rest so it even speeds

00:43:05,119 --> 00:43:09,920
up things more

00:43:06,800 --> 00:43:12,319
so basically explain very simply what it

00:43:09,920 --> 00:43:15,520
does is when you run for instance an npm

00:43:12,319 --> 00:43:17,599
test or an nx test of a specific library

00:43:15,520 --> 00:43:19,200
then nx takes the source code and the

00:43:17,599 --> 00:43:21,119
command that has run against that source

00:43:19,200 --> 00:43:23,359
code and it caches the result

00:43:21,119 --> 00:43:24,880
and so if you happen to rerun the same

00:43:23,359 --> 00:43:27,040
command again but you didn't change the

00:43:24,880 --> 00:43:27,920
source code which basically constitutes

00:43:27,040 --> 00:43:29,280
to that library

00:43:27,920 --> 00:43:31,040
it doesn't have to actually rerun the

00:43:29,280 --> 00:43:32,720
tests so it doesn't have to invoke

00:43:31,040 --> 00:43:34,720
chest and so on but it just like pulls

00:43:32,720 --> 00:43:36,160
out the caching cache output and it

00:43:34,720 --> 00:43:38,079
shows it to you on the screen

00:43:36,160 --> 00:43:39,920
or if you did a build it even like pulls

00:43:38,079 --> 00:43:41,760
out the artifacts and places it in the

00:43:39,920 --> 00:43:43,440
dist folder

00:43:41,760 --> 00:43:45,119
and so obviously for yourself like as a

00:43:43,440 --> 00:43:46,560
developer this speeds up things a lot

00:43:45,119 --> 00:43:47,760
and this comes with every nx

00:43:46,560 --> 00:43:50,079
installation

00:43:47,760 --> 00:43:52,319
and it gets even better if you can

00:43:50,079 --> 00:43:54,240
distribute that with your co-workers

00:43:52,319 --> 00:43:56,240
and so for instance that's where nx

00:43:54,240 --> 00:43:58,000
cloud comes into play

00:43:56,240 --> 00:43:59,760
and what linux cloud does is actually

00:43:58,000 --> 00:44:01,839
quite simple so what happens behind the

00:43:59,760 --> 00:44:04,480
scenes is that your local cached result

00:44:01,839 --> 00:44:05,520
is simply basically played upward into

00:44:04,480 --> 00:44:07,680
the cloud so it's

00:44:05,520 --> 00:44:10,079
pushed upwards it's stored centrally and

00:44:07,680 --> 00:44:11,920
whenever some co-workers comes in and it

00:44:10,079 --> 00:44:13,119
executes the same build first the local

00:44:11,920 --> 00:44:14,560
cache is being

00:44:13,119 --> 00:44:15,599
used to check whether the result is

00:44:14,560 --> 00:44:17,280
already there and if not it's

00:44:15,599 --> 00:44:19,040
synchronized with linux cloud

00:44:17,280 --> 00:44:21,520
and so even your co-worker doesn't have

00:44:19,040 --> 00:44:23,599
to re-execute the same commands

00:44:21,520 --> 00:44:24,720
and this obviously brings huge benefit

00:44:23,599 --> 00:44:26,640
in terms of speed

00:44:24,720 --> 00:44:28,160
it gets even better if you also wire it

00:44:26,640 --> 00:44:30,079
up in the ci server

00:44:28,160 --> 00:44:32,800
because we all know that we get a lot of

00:44:30,079 --> 00:44:34,079
time lost on actual ci runs so

00:44:32,800 --> 00:44:35,839
especially if you are in large

00:44:34,079 --> 00:44:36,560
organizations where there are like

00:44:35,839 --> 00:44:38,640
hundreds of

00:44:36,560 --> 00:44:40,319
pull requests open at the same time is

00:44:38,640 --> 00:44:41,599
often the bigger fight not to implement

00:44:40,319 --> 00:44:42,400
actual feature but to get that into

00:44:41,599 --> 00:44:44,560
master

00:44:42,400 --> 00:44:46,480
and obviously the faster the ci pipeline

00:44:44,560 --> 00:44:47,680
runs through it executes all your tests

00:44:46,480 --> 00:44:51,200
the better it is for

00:44:47,680 --> 00:44:53,839
actual developer productivity

00:44:51,200 --> 00:44:55,680
but again like i'd like to pass it over

00:44:53,839 --> 00:44:56,640
to isaac which can actually show it to

00:44:55,680 --> 00:45:05,839
you

00:44:56,640 --> 00:45:05,839
so it gets even more interesting

00:45:06,400 --> 00:45:10,560
all right so let's do

00:45:12,160 --> 00:45:18,160
this okay

00:45:15,760 --> 00:45:19,920
so um i have switched over to a

00:45:18,160 --> 00:45:22,560
different repository here

00:45:19,920 --> 00:45:23,119
um the the one we did before had very

00:45:22,560 --> 00:45:26,400
few

00:45:23,119 --> 00:45:30,480
um very few projects in it

00:45:26,400 --> 00:45:35,040
um this one also is a whoops

00:45:30,480 --> 00:45:38,079
i will reopen my terminal um

00:45:35,040 --> 00:45:38,720
this one also is not really a production

00:45:38,079 --> 00:45:40,400
application

00:45:38,720 --> 00:45:42,480
but at least it has enough for you to

00:45:40,400 --> 00:45:46,880
see that that this dependency graph

00:45:42,480 --> 00:45:49,760
can get kind of complicated um

00:45:46,880 --> 00:45:51,040
so yeah if you you can see here that

00:45:49,760 --> 00:45:52,880
even though this is a very small

00:45:51,040 --> 00:45:54,800
application you can get lots and lots of

00:45:52,880 --> 00:45:56,000
libraries and lots of dependencies

00:45:54,800 --> 00:45:58,079
and you don't want to rerun all the

00:45:56,000 --> 00:46:00,319
tests every time you make any change

00:45:58,079 --> 00:46:01,599
in a in you know one part of it you

00:46:00,319 --> 00:46:02,400
don't want to run tests for every part

00:46:01,599 --> 00:46:05,680
of it

00:46:02,400 --> 00:46:10,079
so um one of the tools you can use here

00:46:05,680 --> 00:46:12,640
is um let's say you have

00:46:10,079 --> 00:46:15,839
let's say we make a change here on the

00:46:12,640 --> 00:46:15,839
home page

00:46:16,240 --> 00:46:23,119
change this so i'm i'm changing the um

00:46:19,920 --> 00:46:26,720
the products home page library

00:46:23,119 --> 00:46:30,960
and i'm just updating the title there

00:46:26,720 --> 00:46:34,400
now i can run nx affected

00:46:30,960 --> 00:46:37,440
uh depth graph and what that does

00:46:34,400 --> 00:46:39,520
is that uh adds some extra information

00:46:37,440 --> 00:46:43,200
to the dependency graph to show us

00:46:39,520 --> 00:46:45,520
uh which specific uh projects in this

00:46:43,200 --> 00:46:46,880
workspace are actually affected by the

00:46:45,520 --> 00:46:47,520
changes that you just made so it

00:46:46,880 --> 00:46:49,760
compares

00:46:47,520 --> 00:46:50,560
uh what's on head with what was what's

00:46:49,760 --> 00:46:53,839
on um

00:46:50,560 --> 00:46:56,560
master or main and you can still

00:46:53,839 --> 00:46:57,359
show the whole the whole dependency

00:46:56,560 --> 00:46:59,599
graph and it

00:46:57,359 --> 00:47:01,599
highlights in red the affected ones or

00:46:59,599 --> 00:47:05,599
you can switch back to just the affected

00:47:01,599 --> 00:47:07,680
uh projects here so when you do that

00:47:05,599 --> 00:47:09,680
you can also there's a whole suite of

00:47:07,680 --> 00:47:13,280
affected commands you can do nx

00:47:09,680 --> 00:47:16,319
affected test here and that will run

00:47:13,280 --> 00:47:17,440
the test command just on the this is not

00:47:16,319 --> 00:47:20,240
running on the whole

00:47:17,440 --> 00:47:22,000
um the whole workspace is just running

00:47:20,240 --> 00:47:25,040
on these two

00:47:22,000 --> 00:47:27,200
uh on these two projects here

00:47:25,040 --> 00:47:28,880
which is products homepage and products

00:47:27,200 --> 00:47:30,559
it doesn't run against products ete

00:47:28,880 --> 00:47:33,680
because that does not have a test

00:47:30,559 --> 00:47:37,280
builder associated with it

00:47:33,680 --> 00:47:40,480
uh okay so let's run everything um

00:47:37,280 --> 00:47:42,800
and one of the benefits of the

00:47:40,480 --> 00:47:44,160
computation cache you can run nx

00:47:42,800 --> 00:47:46,720
affected test again

00:47:44,160 --> 00:47:48,400
and that just happened instantly so this

00:47:46,720 --> 00:47:50,559
was using a local

00:47:48,400 --> 00:47:51,680
computation cache and that you get that

00:47:50,559 --> 00:47:54,240
for free just

00:47:51,680 --> 00:47:55,359
just by using nx itself so anytime i

00:47:54,240 --> 00:47:57,359
rerun this

00:47:55,359 --> 00:47:58,880
um so if i change this again to

00:47:57,359 --> 00:48:01,520
something else

00:47:58,880 --> 00:48:02,800
um and i try to run it this time it will

00:48:01,520 --> 00:48:07,839
actually run the tests

00:48:02,800 --> 00:48:07,839
so we'll actually take some time

00:48:08,400 --> 00:48:14,480
but if i change it back again

00:48:11,440 --> 00:48:16,640
uh to a previous value it

00:48:14,480 --> 00:48:18,800
uh that's still in the cache and so it

00:48:16,640 --> 00:48:21,040
still happens instantly

00:48:18,800 --> 00:48:23,280
now one of the one of the really great

00:48:21,040 --> 00:48:26,240
things about using the nx cloud

00:48:23,280 --> 00:48:28,480
distributed caching model is that if i

00:48:26,240 --> 00:48:32,000
push this up to

00:48:28,480 --> 00:48:34,240
the if i make a pr out of this and i can

00:48:32,000 --> 00:48:37,520
show you

00:48:34,240 --> 00:48:40,640
nx examples

00:48:37,520 --> 00:48:43,440
here we go so i've i've made a

00:48:40,640 --> 00:48:43,839
a pr here with with do not merge on it

00:48:43,440 --> 00:48:48,640
and

00:48:43,839 --> 00:48:51,280
um let me go to the actual code here

00:48:48,640 --> 00:48:52,640
and i say hey hey yuri i'd like you to

00:48:51,280 --> 00:48:53,119
to check this out there's there's

00:48:52,640 --> 00:48:54,720
something

00:48:53,119 --> 00:48:57,119
that's not looking quite right can you

00:48:54,720 --> 00:49:00,240
can you run the tests on this for me

00:48:57,119 --> 00:49:03,359
and i'm going to send it over to yuri

00:49:00,240 --> 00:49:07,920
and because of the

00:49:03,359 --> 00:49:11,760
uh distributed nx cloud cache

00:49:07,920 --> 00:49:16,400
yuri can download this and

00:49:11,760 --> 00:49:19,520
um and if everything goes right

00:49:16,400 --> 00:49:22,800
he will also have the almost instant

00:49:19,520 --> 00:49:24,240
uh cash that comes from it's not on his

00:49:22,800 --> 00:49:27,119
machine so you see he's

00:49:24,240 --> 00:49:30,319
he's cloning the whole repository from

00:49:27,119 --> 00:49:31,760
scratch right now

00:49:30,319 --> 00:49:33,680
and so it's going to take some time

00:49:31,760 --> 00:49:36,480
because we're we're on zoom

00:49:33,680 --> 00:49:38,160
but while it's doing that um we can

00:49:36,480 --> 00:49:40,720
maybe answer some questions and then

00:49:38,160 --> 00:49:41,680
we'll show the punch line a little bit

00:49:40,720 --> 00:49:45,839
later

00:49:41,680 --> 00:49:45,839
once this is all set up

00:49:47,119 --> 00:49:52,800
um so i think i'll just start answering

00:49:50,559 --> 00:49:55,839
some of these q a questions

00:49:52,800 --> 00:49:56,480
um while we're waiting for this um so i

00:49:55,839 --> 00:49:59,200
see uh

00:49:56,480 --> 00:50:01,200
i think sagi says can you please give an

00:49:59,200 --> 00:50:03,680
example on how to

00:50:01,200 --> 00:50:06,079
set up dependency rules with app and lib

00:50:03,680 --> 00:50:09,280
tags

00:50:06,079 --> 00:50:09,280
so there is

00:50:09,359 --> 00:50:14,000
in let me see if i can if there's an

00:50:12,319 --> 00:50:18,800
example

00:50:14,000 --> 00:50:21,920
here yeah so this this nx examples

00:50:18,800 --> 00:50:24,400
uh repository is

00:50:21,920 --> 00:50:26,559
does have some examples of actual

00:50:24,400 --> 00:50:30,640
application and library tags

00:50:26,559 --> 00:50:32,960
and so you can see in the the nx.json

00:50:30,640 --> 00:50:32,960
file

00:50:36,079 --> 00:50:39,839
in in if you look in the index.json file

00:50:38,079 --> 00:50:40,559
that's where those tags are actually set

00:50:39,839 --> 00:50:44,160
up

00:50:40,559 --> 00:50:48,079
and i can share

00:50:44,160 --> 00:50:51,920
a link to the documentation that shows

00:50:48,079 --> 00:50:55,839
how to that walks you through how to

00:50:51,920 --> 00:50:55,839
set up some of these tags um

00:50:58,079 --> 00:51:00,960
i'm going to

00:51:01,920 --> 00:51:05,760
all right put this in the chat here so

00:51:04,960 --> 00:51:08,800
here

00:51:05,760 --> 00:51:10,400
this this this link that i just shared

00:51:08,800 --> 00:51:13,359
shows an example of how to actually set

00:51:10,400 --> 00:51:13,359
up these tags yourself

00:51:20,800 --> 00:51:23,839
we have a question is there a suggestion

00:51:22,319 --> 00:51:25,760
how the conversion to esl

00:51:23,839 --> 00:51:27,200
should be made uh we're still in the

00:51:25,760 --> 00:51:30,800
process of doing that

00:51:27,200 --> 00:51:32,480
um so um look for look for more blog

00:51:30,800 --> 00:51:34,880
posts on how to do that

00:51:32,480 --> 00:51:37,440
uh coming soon but that's that's one of

00:51:34,880 --> 00:51:40,000
our primary focuses for the next

00:51:37,440 --> 00:51:40,000
month or so

00:51:41,680 --> 00:51:44,079
um

00:51:46,319 --> 00:51:51,839
let's see

00:52:00,400 --> 00:52:04,079
uh yuri is there a ground-up tutorial

00:52:03,119 --> 00:52:06,559
showing how to use

00:52:04,079 --> 00:52:08,000
nx from install to completed app

00:52:06,559 --> 00:52:10,240
something with two to three apps for

00:52:08,000 --> 00:52:12,160
using multiple libraries

00:52:10,240 --> 00:52:13,680
i think the best way would be probably

00:52:12,160 --> 00:52:16,240
to consult

00:52:13,680 --> 00:52:17,760
a next playbook we have some examples in

00:52:16,240 --> 00:52:19,200
there there's some free course in there

00:52:17,760 --> 00:52:20,800
which like walked you through some

00:52:19,200 --> 00:52:22,400
simple example which shows a couple of

00:52:20,800 --> 00:52:23,599
use cases and other than that like the

00:52:22,400 --> 00:52:25,280
best thing is to

00:52:23,599 --> 00:52:26,640
go directly to dynamics examples

00:52:25,280 --> 00:52:27,440
application which we are showcasing

00:52:26,640 --> 00:52:29,520
right now

00:52:27,440 --> 00:52:32,079
like that is our own playground kind of

00:52:29,520 --> 00:52:32,960
to test out new beta releases of an x

00:52:32,079 --> 00:52:34,079
and basically

00:52:32,960 --> 00:52:36,400
have different apps in the same

00:52:34,079 --> 00:52:39,440
workspace so that's probably the best

00:52:36,400 --> 00:52:42,960
best way to to go and have a look

00:52:39,440 --> 00:52:46,000
yes in the chat of the oh it's

00:52:42,960 --> 00:52:47,839
yuri are you ready to show yeah i can't

00:52:46,000 --> 00:52:49,520
just like clone everything installed

00:52:47,839 --> 00:52:51,520
everything now i'm going to check out

00:52:49,520 --> 00:52:54,640
your pr

00:52:51,520 --> 00:52:55,520
and looks good so this is basically your

00:52:54,640 --> 00:52:59,359
pr

00:52:55,520 --> 00:53:03,760
and now i run the same nx affected

00:52:59,359 --> 00:53:06,319
tests on a freshly cloned repository

00:53:03,760 --> 00:53:07,119
and so what you now see is that it runs

00:53:06,319 --> 00:53:09,839
immediately

00:53:07,119 --> 00:53:10,720
right so it basically barely took like

00:53:09,839 --> 00:53:12,480
four seconds

00:53:10,720 --> 00:53:14,720
and most of those seconds probably go

00:53:12,480 --> 00:53:16,800
because i'm sharing my screen over zoom

00:53:14,720 --> 00:53:18,400
which takes up some processor time

00:53:16,800 --> 00:53:20,240
but you can also like see the hint here

00:53:18,400 --> 00:53:22,160
at the very bottom so it says like

00:53:20,240 --> 00:53:23,760
annex cloud results for true projects

00:53:22,160 --> 00:53:26,400
were retrieved from nx cloud

00:53:23,760 --> 00:53:27,040
and so you can see even the run details

00:53:26,400 --> 00:53:28,720
up here

00:53:27,040 --> 00:53:30,480
which is by the way a nice and

00:53:28,720 --> 00:53:33,520
interesting feature let me have a look

00:53:30,480 --> 00:53:36,319
whether i'm part of that

00:53:33,520 --> 00:53:36,319
organization

00:53:36,720 --> 00:53:44,960
so we could even share

00:53:42,240 --> 00:53:46,960
that kind of takes up too much time but

00:53:44,960 --> 00:53:48,000
anyhow definitely go and and check this

00:53:46,960 --> 00:53:50,319
out so you can see this

00:53:48,000 --> 00:53:52,000
was on a clean repository and since i

00:53:50,319 --> 00:53:52,720
didn't have a local caching which

00:53:52,000 --> 00:53:56,079
usually

00:53:52,720 --> 00:53:57,680
sits here in that dot cache folder now

00:53:56,079 --> 00:53:59,040
you see there is a cache result in there

00:53:57,680 --> 00:54:00,160
because we actually pulled it down from

00:53:59,040 --> 00:54:03,920
nx cloud

00:54:00,160 --> 00:54:08,839
and directly share it within there

00:54:03,920 --> 00:54:12,240
cool um so let me go back to my slides

00:54:08,839 --> 00:54:13,760
um and actually conclude this demo

00:54:12,240 --> 00:54:15,839
because we we promise we have some

00:54:13,760 --> 00:54:17,119
giveaway uh before we then go ahead and

00:54:15,839 --> 00:54:18,640
answer some of the q a

00:54:17,119 --> 00:54:20,800
questions which are remaining and which

00:54:18,640 --> 00:54:23,920
keep popping up in the chat

00:54:20,800 --> 00:54:26,720
so as a giveaway we actually have 100

00:54:23,920 --> 00:54:28,640
hours of nx cloud time saved for all the

00:54:26,720 --> 00:54:30,720
people that are currently watching here

00:54:28,640 --> 00:54:32,480
so in order to redeem that and i will

00:54:30,720 --> 00:54:35,119
keep that screen open for a while

00:54:32,480 --> 00:54:36,079
just like go to annex dot app slash

00:54:35,119 --> 00:54:38,880
promotions

00:54:36,079 --> 00:54:40,480
and enter that ng enterprise 2020 code

00:54:38,880 --> 00:54:43,040
and your email and then we will get an

00:54:40,480 --> 00:54:45,200
email automatically after that

00:54:43,040 --> 00:54:46,240
with the actual coupon code which you

00:54:45,200 --> 00:54:48,480
can then go

00:54:46,240 --> 00:54:49,280
online and redeem it like in general you

00:54:48,480 --> 00:54:51,359
can always

00:54:49,280 --> 00:54:52,799
just like subscribe to nxcloud and get

00:54:51,359 --> 00:54:55,280
started for free

00:54:52,799 --> 00:54:56,000
you will get five hours per month for

00:54:55,280 --> 00:54:58,400
free so

00:54:56,000 --> 00:55:00,160
they will renew every month which is

00:54:58,400 --> 00:55:04,160
already a lot to play around with

00:55:00,160 --> 00:55:04,160
and see like how it works

00:55:04,720 --> 00:55:09,040
cool should we go through some other

00:55:07,520 --> 00:55:13,680
applications

00:55:09,040 --> 00:55:13,680
and some other questions um

00:55:14,240 --> 00:55:17,359
i see there is one is there a way to

00:55:16,079 --> 00:55:20,640
share

00:55:17,359 --> 00:55:23,839
styles between my absent lips and

00:55:20,640 --> 00:55:25,040
reset css file i'm like there's

00:55:23,839 --> 00:55:25,520
definitely a way like libraries in

00:55:25,040 --> 00:55:28,400
general

00:55:25,520 --> 00:55:30,079
cannot only be used for just like having

00:55:28,400 --> 00:55:32,000
code in there but you can also even

00:55:30,079 --> 00:55:33,599
have them as kind of your container for

00:55:32,000 --> 00:55:35,359
your styles and then reference them from

00:55:33,599 --> 00:55:38,000
within your applications

00:55:35,359 --> 00:55:39,760
i'm not sure we have an example running

00:55:38,000 --> 00:55:42,240
somewhere about like sharing

00:55:39,760 --> 00:55:44,400
styles but i definitely have a video on

00:55:42,240 --> 00:55:49,760
our youtube channel

00:55:44,400 --> 00:55:52,960
and let me try to find our link to that

00:55:49,760 --> 00:55:56,400
i'm posting that general youtube

00:55:52,960 --> 00:55:59,760
channel there's also

00:55:56,400 --> 00:56:01,280
on the narwhal connect site um i posted

00:55:59,760 --> 00:56:03,200
a link to it on the

00:56:01,280 --> 00:56:04,720
as i answered the chat um there there's

00:56:03,200 --> 00:56:07,680
a specific cookbook

00:56:04,720 --> 00:56:09,200
um that talks about how to share sas um

00:56:07,680 --> 00:56:12,480
or css files

00:56:09,200 --> 00:56:15,119
across multiple um

00:56:12,480 --> 00:56:16,319
multiple applications yeah definitely go

00:56:15,119 --> 00:56:17,680
on to our youtube

00:56:16,319 --> 00:56:19,040
channel because like we have a lot of

00:56:17,680 --> 00:56:20,720
different kind of videos there which are

00:56:19,040 --> 00:56:22,400
kind of mini tutorials like five minute

00:56:20,720 --> 00:56:24,400
videos which shows some of those things

00:56:22,400 --> 00:56:26,160
like for instance i know there's one

00:56:24,400 --> 00:56:27,839
which i made a couple of months ago

00:56:26,160 --> 00:56:29,280
about sharing assets for instance which

00:56:27,839 --> 00:56:31,839
is kind of similar to the styles

00:56:29,280 --> 00:56:31,839
actually

00:56:41,760 --> 00:56:45,680
let's look at do you have an example of

00:56:43,599 --> 00:56:47,839
sharing a library with angular and an

00:56:45,680 --> 00:56:51,280
sjs application

00:56:47,839 --> 00:56:52,799
yes that's absolutely possible um

00:56:51,280 --> 00:56:55,280
i can't think of an example off the top

00:56:52,799 --> 00:56:56,799
of my head but

00:56:55,280 --> 00:56:58,319
anything so obviously anything that's

00:56:56,799 --> 00:57:01,440
just javascript code

00:56:58,319 --> 00:57:03,440
you can share or you can share

00:57:01,440 --> 00:57:04,559
you can easily share interfaces like

00:57:03,440 --> 00:57:06,720
typescript interfaces

00:57:04,559 --> 00:57:07,920
so if you have like an api that's

00:57:06,720 --> 00:57:10,400
written in sjs

00:57:07,920 --> 00:57:11,280
and a client-side code in angular you

00:57:10,400 --> 00:57:14,079
can share

00:57:11,280 --> 00:57:15,520
what your your contract is between the

00:57:14,079 --> 00:57:18,319
the network calls

00:57:15,520 --> 00:57:18,640
um that's the most and then you can also

00:57:18,319 --> 00:57:22,400
share

00:57:18,640 --> 00:57:23,920
like the the types of of what the um

00:57:22,400 --> 00:57:25,440
of what those objects are being passed

00:57:23,920 --> 00:57:26,559
back and forth and like decoding and

00:57:25,440 --> 00:57:29,920
encoding

00:57:26,559 --> 00:57:32,799
kind of logic um

00:57:29,920 --> 00:57:34,640
so i don't know if you're exactly

00:57:32,799 --> 00:57:36,240
specific examples

00:57:34,640 --> 00:57:37,760
now most of the time it boils down to

00:57:36,240 --> 00:57:39,359
what you already said like when you

00:57:37,760 --> 00:57:40,960
generate

00:57:39,359 --> 00:57:42,240
a new library in an x in general like

00:57:40,960 --> 00:57:43,440
what you can do is you cannot only

00:57:42,240 --> 00:57:44,640
generate just like an

00:57:43,440 --> 00:57:46,400
angular library which has some

00:57:44,640 --> 00:57:47,920
particular setup with it like it

00:57:46,400 --> 00:57:50,000
generates for instance just already like

00:57:47,920 --> 00:57:51,599
an angular module and exports it for you

00:57:50,000 --> 00:57:54,160
but you can also generate plain

00:57:51,599 --> 00:57:55,760
typescript mod damp script libraries

00:57:54,160 --> 00:57:57,520
and so that's what you usually use when

00:57:55,760 --> 00:57:58,960
you are going cross framework

00:57:57,520 --> 00:58:01,040
right like even if you're sharing

00:57:58,960 --> 00:58:01,359
between angular or react application or

00:58:01,040 --> 00:58:03,599
even

00:58:01,359 --> 00:58:05,200
also at the back end as isaac said if

00:58:03,599 --> 00:58:07,200
you want to share for instance like type

00:58:05,200 --> 00:58:08,400
3d interfaces for your backend api which

00:58:07,200 --> 00:58:11,280
might be written in

00:58:08,400 --> 00:58:12,400
nest js or node play node and usually

00:58:11,280 --> 00:58:13,839
what you do is you create such a

00:58:12,400 --> 00:58:15,200
typescript library which

00:58:13,839 --> 00:58:17,040
has your interface and then you can

00:58:15,200 --> 00:58:23,839
import it on both sides

00:58:17,040 --> 00:58:23,839
so that's what i usually do

00:58:24,319 --> 00:58:27,359
uh is there some approach for guidelines

00:58:26,079 --> 00:58:30,160
in an x for either progressive

00:58:27,359 --> 00:58:33,359
enhancement or graceful degradation

00:58:30,160 --> 00:58:35,760
uh well not in general not a

00:58:33,359 --> 00:58:36,720
no off because i can in theory like or

00:58:35,760 --> 00:58:38,880
in general like nx

00:58:36,720 --> 00:58:40,559
is not something that goes too much into

00:58:38,880 --> 00:58:41,520
one particular technology for instance

00:58:40,559 --> 00:58:43,440
like we just

00:58:41,520 --> 00:58:45,680
support angular right always just

00:58:43,440 --> 00:58:48,240
support react and then you can use

00:58:45,680 --> 00:58:49,839
the type of like workarounds and like

00:58:48,240 --> 00:58:51,920
features you have in those frameworks

00:58:49,839 --> 00:58:53,359
actually work against like the runtime

00:58:51,920 --> 00:58:54,720
improvements such as like graceful

00:58:53,359 --> 00:58:56,319
degradation and so on

00:58:54,720 --> 00:58:58,319
the best thing for sure is like if you

00:58:56,319 --> 00:58:59,119
can go towards that jam stack kind of

00:58:58,319 --> 00:59:01,839
setup

00:58:59,119 --> 00:59:03,440
and i actually know we have a plugin for

00:59:01,839 --> 00:59:05,280
um

00:59:03,440 --> 00:59:07,680
for scully there is some community

00:59:05,280 --> 00:59:09,359
plug-in i think and even for gatsby we

00:59:07,680 --> 00:59:10,480
have a plug-in going

00:59:09,359 --> 00:59:12,480
which is kind of still in the early

00:59:10,480 --> 00:59:14,559
stages but it's it's it's uh

00:59:12,480 --> 00:59:15,680
it has gatsby support so you can

00:59:14,559 --> 00:59:18,799
actually have cats

00:59:15,680 --> 00:59:20,319
even inside uh your nx workspace and so

00:59:18,799 --> 00:59:21,839
even there again like you can benefit

00:59:20,319 --> 00:59:23,119
from the live those library sharing

00:59:21,839 --> 00:59:25,040
capabilities because like you can have

00:59:23,119 --> 00:59:26,480
your normal angular application

00:59:25,040 --> 00:59:28,000
and the public facing part which i

00:59:26,480 --> 00:59:29,040
mentioned could be actually jam stack

00:59:28,000 --> 00:59:30,880
application which

00:59:29,040 --> 00:59:32,240
just includes the libraries and then

00:59:30,880 --> 00:59:33,520
builds out basically statically

00:59:32,240 --> 00:59:36,960
generated sites

00:59:33,520 --> 00:59:36,960
and so you can benefit from that

00:59:37,680 --> 00:59:41,839
i have another one here does lib refer

00:59:39,920 --> 00:59:43,200
to angular libraries can we publish

00:59:41,839 --> 00:59:45,280
these libraries to npm

00:59:43,200 --> 00:59:47,520
or private in-house npm registry and

00:59:45,280 --> 00:59:52,240
then can reuse in some different app

00:59:47,520 --> 00:59:55,040
yes so uh library can be either

00:59:52,240 --> 00:59:56,960
purely local to the workspace or you can

00:59:55,040 --> 00:59:58,880
pass the dash dash publishable

00:59:56,960 --> 01:00:00,400
flag when you create the library and

00:59:58,880 --> 01:00:02,960
then it will

01:00:00,400 --> 01:00:04,960
have some some extra configuration added

01:00:02,960 --> 01:00:07,359
to it so you can

01:00:04,960 --> 01:00:08,000
publish it directly to npm or whatever

01:00:07,359 --> 01:00:11,920
npm

01:00:08,000 --> 01:00:11,920
registry you have set up

01:00:13,599 --> 01:00:15,839
exactly

01:00:27,040 --> 01:00:30,480
uh so there's an interesting one also

01:00:28,640 --> 01:00:31,920
many deaths working on many apps and lip

01:00:30,480 --> 01:00:33,200
simultaneously end up with many

01:00:31,920 --> 01:00:36,400
conflicts specifically

01:00:33,200 --> 01:00:38,400
in the nxjs and angularjson

01:00:36,400 --> 01:00:40,319
yeah we kind of know that's uh sometimes

01:00:38,400 --> 01:00:40,839
a pain to resolve in merge conflicts

01:00:40,319 --> 01:00:43,920
right

01:00:40,839 --> 01:00:46,400
um the best thing which

01:00:43,920 --> 01:00:47,599
i know we have done for client is if you

01:00:46,400 --> 01:00:50,000
can set up some

01:00:47,599 --> 01:00:51,440
uh like ordering in those nxjs but these

01:00:50,000 --> 01:00:52,559
are basically custom scripts which you

01:00:51,440 --> 01:00:54,720
build in your nxj

01:00:52,559 --> 01:00:56,400
like in your nx workspace but if you can

01:00:54,720 --> 01:00:58,640
build in some kind of ordering

01:00:56,400 --> 01:01:00,160
of the products which live inside annex

01:00:58,640 --> 01:01:01,680
json or in angular json

01:01:00,160 --> 01:01:03,119
then you will run in much less conflicts

01:01:01,680 --> 01:01:04,400
because like they will kind of stay in

01:01:03,119 --> 01:01:05,359
the same place where they have been

01:01:04,400 --> 01:01:07,280
before right

01:01:05,359 --> 01:01:08,640
so that's one workaround but other than

01:01:07,280 --> 01:01:10,160
that i

01:01:08,640 --> 01:01:11,920
wouldn't know of any other better

01:01:10,160 --> 01:01:12,799
solution right now not sure whether you

01:01:11,920 --> 01:01:16,480
know something

01:01:12,799 --> 01:01:18,079
or some tricks there isaac

01:01:16,480 --> 01:01:20,480
uh no that's that's what i was going to

01:01:18,079 --> 01:01:20,480
suggest

01:01:21,280 --> 01:01:25,839
um there's a question about the advanced

01:01:24,079 --> 01:01:29,440
nx workspaces course

01:01:25,839 --> 01:01:29,760
on nxplaybook.com um this person says

01:01:29,440 --> 01:01:31,359
they've

01:01:29,760 --> 01:01:33,200
they've already read the book about nx

01:01:31,359 --> 01:01:34,400
from narwhal connect

01:01:33,200 --> 01:01:36,480
and they want to know if there's more

01:01:34,400 --> 01:01:38,480
information in the course yeah there is

01:01:36,480 --> 01:01:41,040
some more information from the course

01:01:38,480 --> 01:01:42,240
and the thing about the the course is

01:01:41,040 --> 01:01:44,720
that it is

01:01:42,240 --> 01:01:46,559
um the the whole goal of the course is

01:01:44,720 --> 01:01:48,400
to save you time so it collects

01:01:46,559 --> 01:01:49,839
together information that you can find

01:01:48,400 --> 01:01:53,280
elsewhere um

01:01:49,839 --> 01:01:56,240
but it's um it's in a condensed and

01:01:53,280 --> 01:01:57,440
one specific place for you to find it

01:01:56,240 --> 01:02:01,280
but nothing in there is

01:01:57,440 --> 01:02:02,480
is secret and my goal is over time to

01:02:01,280 --> 01:02:07,760
put as much in the doc

01:02:02,480 --> 01:02:10,720
public documentation as possible so

01:02:07,760 --> 01:02:13,359
it's up to you to decide if if that if

01:02:10,720 --> 01:02:17,119
the price tag is worth it for your time

01:02:13,359 --> 01:02:18,720
yeah there's also a question by aryan i

01:02:17,119 --> 01:02:20,480
i think we kind of have answered that

01:02:18,720 --> 01:02:23,200
about the eslint support

01:02:20,480 --> 01:02:24,480
so right now what you see like in 10.30

01:02:23,200 --> 01:02:25,839
where we have like

01:02:24,480 --> 01:02:28,559
es linto board already for angle

01:02:25,839 --> 01:02:30,880
applications is that it is a like

01:02:28,559 --> 01:02:33,680
initial work which we've done but we

01:02:30,880 --> 01:02:34,000
have already planned pretty intense work

01:02:33,680 --> 01:02:36,880
on

01:02:34,000 --> 01:02:38,480
improving and the eslint rules and so

01:02:36,880 --> 01:02:40,319
you should see like improved support

01:02:38,480 --> 01:02:41,920
over the next coming of few weeks like

01:02:40,319 --> 01:02:43,280
right now there's basic support for it

01:02:41,920 --> 01:02:44,079
and so you can already kind of start

01:02:43,280 --> 01:02:46,240
with it

01:02:44,079 --> 01:02:49,200
and it will improve like as you upgrade

01:02:46,240 --> 01:02:50,559
the next angular like nx nx versions and

01:02:49,200 --> 01:02:53,280
so you definitely can already start with

01:02:50,559 --> 01:02:53,280
it right now

01:02:55,359 --> 01:03:00,240
so there's a question about distributing

01:02:57,039 --> 01:03:02,160
a library as an angular element

01:03:00,240 --> 01:03:04,079
with without creating an app for each

01:03:02,160 --> 01:03:05,440
element so it depends on what you mean

01:03:04,079 --> 01:03:08,559
by distribute

01:03:05,440 --> 01:03:11,440
uh so we so we we work in

01:03:08,559 --> 01:03:11,920
very large enterprises as consultants

01:03:11,440 --> 01:03:13,520
and so

01:03:11,920 --> 01:03:15,440
there there are some places that are

01:03:13,520 --> 01:03:17,839
using angular elements

01:03:15,440 --> 01:03:19,280
internally and they they have a library

01:03:17,839 --> 01:03:22,480
set up for

01:03:19,280 --> 01:03:23,119
um for each element so they like each

01:03:22,480 --> 01:03:27,039
feature

01:03:23,119 --> 01:03:28,839
is is an angular element and then um

01:03:27,039 --> 01:03:30,720
and then it's it's imported into the

01:03:28,839 --> 01:03:33,760
application as

01:03:30,720 --> 01:03:35,760
as an element so um so

01:03:33,760 --> 01:03:37,839
yes you can definitely use it within the

01:03:35,760 --> 01:03:40,400
same um

01:03:37,839 --> 01:03:41,280
within the same workspace if you mean um

01:03:40,400 --> 01:03:45,760
distribute it

01:03:41,280 --> 01:03:49,440
outside of the um of the workspace

01:03:45,760 --> 01:03:51,039
um that that i'm not

01:03:49,440 --> 01:03:52,480
uh sure i guess if you're if you're

01:03:51,039 --> 01:03:55,520
making the library

01:03:52,480 --> 01:03:58,559
publishable um

01:03:55,520 --> 01:03:59,680
there should be a way to there should be

01:03:58,559 --> 01:04:01,760
a way to do that

01:03:59,680 --> 01:04:03,760
um i don't know how to do that off the

01:04:01,760 --> 01:04:05,119
top of my head though

01:04:03,760 --> 01:04:07,680
yeah it probably would be kind of a

01:04:05,119 --> 01:04:09,200
custom setup uh i guess like they're

01:04:07,680 --> 01:04:12,240
like the best tools there is still

01:04:09,200 --> 01:04:14,000
manfred steyers ngx build plus

01:04:12,240 --> 01:04:16,559
which which can help you gear bundle up

01:04:14,000 --> 01:04:18,880
like reusable and shareable

01:04:16,559 --> 01:04:20,079
uh elements uh but yeah you would

01:04:18,880 --> 01:04:22,319
probably have to kind of

01:04:20,079 --> 01:04:24,000
customize that for yourself right now

01:04:22,319 --> 01:04:25,599
right after out of the box there's no

01:04:24,000 --> 01:04:27,200
schematic that pre-configures your

01:04:25,599 --> 01:04:30,160
library ready for publishing

01:04:27,200 --> 01:04:30,160
with angular elements

01:04:34,160 --> 01:04:39,440
um so there's a question about how

01:04:37,520 --> 01:04:41,280
should i separate service classes into

01:04:39,440 --> 01:04:44,559
libraries

01:04:41,280 --> 01:04:48,079
so there is a link that i shared

01:04:44,559 --> 01:04:48,640
earlier oh no i didn't i will put this

01:04:48,079 --> 01:04:51,680
in the chat

01:04:48,640 --> 01:04:54,000
so that the index.dev documentation i'm

01:04:51,680 --> 01:04:57,520
just going to share my screen

01:04:54,000 --> 01:05:01,359
and have you look at it let's see

01:04:57,520 --> 01:05:04,880
um over here

01:05:01,359 --> 01:05:05,920
so on nx.dev um there's this whole

01:05:04,880 --> 01:05:08,319
section here

01:05:05,920 --> 01:05:10,079
on creating libraries and there's always

01:05:08,319 --> 01:05:11,920
a trade-off between

01:05:10,079 --> 01:05:13,599
should i make another library with this

01:05:11,920 --> 01:05:16,559
code or should i

01:05:13,599 --> 01:05:17,920
um keep it in the keep it in an existing

01:05:16,559 --> 01:05:19,760
library and so this

01:05:17,920 --> 01:05:21,680
this page specifically talks about that

01:05:19,760 --> 01:05:23,200
trade-off should i make a new library

01:05:21,680 --> 01:05:24,000
versus should i add to an existing

01:05:23,200 --> 01:05:25,839
library

01:05:24,000 --> 01:05:28,079
and then these these pages down here

01:05:25,839 --> 01:05:29,520
talk about different types of libraries

01:05:28,079 --> 01:05:30,960
you could create and how you can group

01:05:29,520 --> 01:05:33,039
the libraries together

01:05:30,960 --> 01:05:34,720
and using tags here so this whole

01:05:33,039 --> 01:05:37,520
section here is going to be

01:05:34,720 --> 01:05:38,400
a helpful set of documentation in terms

01:05:37,520 --> 01:05:41,839
of deciding

01:05:38,400 --> 01:05:44,480
how to structure your your application

01:05:41,839 --> 01:05:44,480
your workspace

01:05:45,440 --> 01:05:48,960
yeah there is another question which is

01:05:47,280 --> 01:05:52,640
like does nx support

01:05:48,960 --> 01:05:53,280
micro front ends um yeah definitely i

01:05:52,640 --> 01:05:55,839
mean like

01:05:53,280 --> 01:05:58,000
the whole microphone story you mostly

01:05:55,839 --> 01:05:58,960
boils down on how you structure your

01:05:58,000 --> 01:06:00,559
applications how you

01:05:58,960 --> 01:06:02,319
build and deploy them right so it's more

01:06:00,559 --> 01:06:04,480
like a deployment issue

01:06:02,319 --> 01:06:05,839
where nx doesn't really go into those

01:06:04,480 --> 01:06:07,599
details so nx provides the whole

01:06:05,839 --> 01:06:09,520
facilities during development

01:06:07,599 --> 01:06:11,680
uh building and bundling europe's but

01:06:09,520 --> 01:06:12,720
then not really on easing the deployment

01:06:11,680 --> 01:06:16,640
for yourself

01:06:12,720 --> 01:06:19,039
um i know that manfred steyer which is

01:06:16,640 --> 01:06:21,440
a big promoter also of nx in general and

01:06:19,039 --> 01:06:24,720
i post a link in the chat has a blog

01:06:21,440 --> 01:06:26,480
there and i didn't yet find the

01:06:24,720 --> 01:06:28,160
one i'm interested in but i know that he

01:06:26,480 --> 01:06:30,160
has some blog posts up there

01:06:28,160 --> 01:06:31,920
which actually showcase the nx workspace

01:06:30,160 --> 01:06:33,200
and how you can have like different

01:06:31,920 --> 01:06:35,359
applications in there

01:06:33,200 --> 01:06:36,319
and some like infrastructural parts

01:06:35,359 --> 01:06:37,839
underneath

01:06:36,319 --> 01:06:40,000
uh that basically allow you to have kind

01:06:37,839 --> 01:06:41,440
of a microphone and setup

01:06:40,000 --> 01:06:43,920
and so definitely if you're interested

01:06:41,440 --> 01:06:46,799
in that look into that

01:06:43,920 --> 01:06:47,520
he even has some blog posts about the

01:06:46,799 --> 01:06:49,920
whole

01:06:47,520 --> 01:06:51,680
module federation with webpack five and

01:06:49,920 --> 01:06:52,720
a next setup for that so you can

01:06:51,680 --> 01:06:54,480
basically have

01:06:52,720 --> 01:06:55,760
play around with it which is more still

01:06:54,480 --> 01:06:57,200
experimental

01:06:55,760 --> 01:06:59,119
uh but still very interesting to play

01:06:57,200 --> 01:07:01,200
around with so definitely check out like

01:06:59,119 --> 01:07:04,000
his blog and he has some pretty cool

01:07:01,200 --> 01:07:04,000
articles on there

01:07:07,680 --> 01:07:14,720
uh is nx supporting ionic projects

01:07:11,200 --> 01:07:16,640
um i know there is uh like i'm pasting

01:07:14,720 --> 01:07:17,680
in our community plugins page here in

01:07:16,640 --> 01:07:20,160
the chat as well

01:07:17,680 --> 01:07:21,119
um i know there is a plugin for ionic

01:07:20,160 --> 01:07:24,160
react

01:07:21,119 --> 01:07:26,720
i i recall i've heard about something

01:07:24,160 --> 01:07:27,200
of an angular related plugin as well but

01:07:26,720 --> 01:07:30,319
i

01:07:27,200 --> 01:07:32,559
don't recall having seen that yet

01:07:30,319 --> 01:07:34,480
so you would have to basically look have

01:07:32,559 --> 01:07:36,079
a look at our community page there so

01:07:34,480 --> 01:07:38,480
maybe there's something coming up but

01:07:36,079 --> 01:07:39,520
out of my head i don't know about any

01:07:38,480 --> 01:07:41,520
native support

01:07:39,520 --> 01:07:43,039
but yet a plugin probably ecosystem

01:07:41,520 --> 01:07:45,280
basically allows you to do that

01:07:43,039 --> 01:07:49,280
so you could you could actually provide

01:07:45,280 --> 01:07:49,280
one and submit it to our plugin page

01:07:49,599 --> 01:07:53,119
there's a question here about the that

01:07:51,599 --> 01:07:55,119
there's a close correlation between

01:07:53,119 --> 01:07:56,960
libraries and angular modules

01:07:55,119 --> 01:07:58,640
is there a way to have nx automatically

01:07:56,960 --> 01:08:01,680
update angular modules by using its

01:07:58,640 --> 01:08:03,839
knowledge of library dependencies

01:08:01,680 --> 01:08:05,920
not exactly sure what you're asking for

01:08:03,839 --> 01:08:07,359
here so the the angular schematics

01:08:05,920 --> 01:08:09,839
when you create a component or pipe

01:08:07,359 --> 01:08:11,200
those automatically register themselves

01:08:09,839 --> 01:08:13,839
in a module

01:08:11,200 --> 01:08:16,319
you're right that libraries and often

01:08:13,839 --> 01:08:19,040
there's only one module per

01:08:16,319 --> 01:08:20,640
per annex library sometimes there's more

01:08:19,040 --> 01:08:22,159
but usually there's just one

01:08:20,640 --> 01:08:24,000
because they're kind of fulfilling the

01:08:22,159 --> 01:08:25,759
same a similar purpose

01:08:24,000 --> 01:08:27,440
at least modules are for grouping

01:08:25,759 --> 01:08:28,400
together components in an angular

01:08:27,440 --> 01:08:30,799
setting and

01:08:28,400 --> 01:08:31,759
libraries are an nx specific construct

01:08:30,799 --> 01:08:34,960
to group together

01:08:31,759 --> 01:08:35,679
any kind of code so annex can know about

01:08:34,960 --> 01:08:37,759
it

01:08:35,679 --> 01:08:39,359
but there's not there's nothing that

01:08:37,759 --> 01:08:42,239
will uh

01:08:39,359 --> 01:08:43,120
automatically change angular modules

01:08:42,239 --> 01:08:46,080
based on

01:08:43,120 --> 01:08:46,080
a dependency graph

01:08:46,719 --> 01:08:50,719
cool there's another question as well

01:08:49,600 --> 01:08:52,719
about like

01:08:50,719 --> 01:08:54,880
potential challenges that someone might

01:08:52,719 --> 01:08:56,880
face to deploy a project

01:08:54,880 --> 01:08:58,239
with the next structure basically to for

01:08:56,880 --> 01:09:01,120
instance firebase

01:08:58,239 --> 01:09:02,239
and uh well if you look at the structure

01:09:01,120 --> 01:09:04,640
in general

01:09:02,239 --> 01:09:06,000
from a deployment perspective it is not

01:09:04,640 --> 01:09:07,759
too much different right it's like

01:09:06,000 --> 01:09:09,359
if you have for instance this the simple

01:09:07,759 --> 01:09:11,040
scenario where you have one application

01:09:09,359 --> 01:09:12,960
as we have seen in the talk

01:09:11,040 --> 01:09:14,719
and like different libraries underneath

01:09:12,960 --> 01:09:16,319
then what happens if you build it they

01:09:14,719 --> 01:09:17,920
actually bundle all together

01:09:16,319 --> 01:09:19,839
in that one application so you would

01:09:17,920 --> 01:09:20,319
still have the same output you would

01:09:19,839 --> 01:09:22,560
have

01:09:20,319 --> 01:09:24,159
in as with the normal plane angular cli

01:09:22,560 --> 01:09:25,199
setup so you have your disk folder and

01:09:24,159 --> 01:09:27,520
in there you have basically

01:09:25,199 --> 01:09:29,279
your compile source code and so

01:09:27,520 --> 01:09:30,799
deployment starts from there basically

01:09:29,279 --> 01:09:32,880
how you actually transfer them to this

01:09:30,799 --> 01:09:35,040
folder through the firebase

01:09:32,880 --> 01:09:37,359
page hosting and and so that's something

01:09:35,040 --> 01:09:39,279
you have to kind of tear take care of

01:09:37,359 --> 01:09:41,359
now which is not something nx does for

01:09:39,279 --> 01:09:45,520
you um

01:09:41,359 --> 01:09:45,520
yeah that's that's mostly mostly it

01:09:46,560 --> 01:09:50,640
all right so the last question this is

01:09:49,520 --> 01:09:52,000
we were able to get through all the

01:09:50,640 --> 01:09:55,280
questions unless people start

01:09:52,000 --> 01:09:57,440
piling more um the uh

01:09:55,280 --> 01:09:58,640
best practices for nx schematics in the

01:09:57,440 --> 01:10:01,280
tools folder

01:09:58,640 --> 01:10:02,640
any resources that you recommend so matt

01:10:01,280 --> 01:10:04,239
here is talking about workspace

01:10:02,640 --> 01:10:05,760
schematics

01:10:04,239 --> 01:10:08,400
which yuri touched on a little bit in

01:10:05,760 --> 01:10:11,520
his slideshow

01:10:08,400 --> 01:10:14,159
there so uh

01:10:11,520 --> 01:10:15,920
basic workspace schematics are are

01:10:14,159 --> 01:10:18,080
pretty straightforward and there should

01:10:15,920 --> 01:10:20,159
be

01:10:18,080 --> 01:10:21,120
there should be documentation on how to

01:10:20,159 --> 01:10:26,159
use them

01:10:21,120 --> 01:10:26,159
here we go workspace schematics

01:10:28,080 --> 01:10:32,400
paste this in here so this link talks

01:10:30,640 --> 01:10:36,000
about how to create some basic

01:10:32,400 --> 01:10:39,280
workspace schematics um

01:10:36,000 --> 01:10:40,880
but uh you can get very complicated with

01:10:39,280 --> 01:10:44,320
with workspace schematics

01:10:40,880 --> 01:10:45,920
um but base most most of the time

01:10:44,320 --> 01:10:48,000
all people really want to do is they

01:10:45,920 --> 01:10:51,199
want to be able to create some files

01:10:48,000 --> 01:10:54,640
in a specific place and then

01:10:51,199 --> 01:10:57,600
um and then maybe up

01:10:54,640 --> 01:10:59,120
modify a few other files and so that's

01:10:57,600 --> 01:11:01,679
if that's all you want to do

01:10:59,120 --> 01:11:04,080
then this this guide will will help you

01:11:01,679 --> 01:11:07,920
with that

01:11:04,080 --> 01:11:09,440
yeah and definitely covers 90 yeah

01:11:07,920 --> 01:11:10,960
what i also suggest is like writing

01:11:09,440 --> 01:11:12,480
tests uh

01:11:10,960 --> 01:11:13,840
especially if they get more complex

01:11:12,480 --> 01:11:14,640
because like if you have for instance

01:11:13,840 --> 01:11:16,480
like

01:11:14,640 --> 01:11:18,640
schematics which set up libraries in a

01:11:16,480 --> 01:11:20,719
particular way or like

01:11:18,640 --> 01:11:22,080
create text for them or things like that

01:11:20,719 --> 01:11:23,920
and then over time like

01:11:22,080 --> 01:11:25,360
creating jazz unit tests in there might

01:11:23,920 --> 01:11:28,239
be really helpful

01:11:25,360 --> 01:11:28,880
and for like inspirations on how to

01:11:28,239 --> 01:11:30,320
write out

01:11:28,880 --> 01:11:32,800
write those tests you could actually go

01:11:30,320 --> 01:11:34,800
online and since an x open source

01:11:32,800 --> 01:11:36,400
just like look how the actual tests are

01:11:34,800 --> 01:11:37,360
written for our own schematics which we

01:11:36,400 --> 01:11:38,880
have in there

01:11:37,360 --> 01:11:40,239
and so for me personally that is always

01:11:38,880 --> 01:11:40,800
a good starting point it's like you can

01:11:40,239 --> 01:11:43,360
like

01:11:40,800 --> 01:11:44,880
use a lot of utilities there even inside

01:11:43,360 --> 01:11:45,920
the nx work schematic workspace

01:11:44,880 --> 01:11:49,440
schematics

01:11:45,920 --> 01:11:52,000
to basically help you write those tests

01:11:49,440 --> 01:11:53,440
there's also a very last question then i

01:11:52,000 --> 01:11:54,560
think like since we're kind of over time

01:11:53,440 --> 01:11:56,320
yeah but it's

01:11:54,560 --> 01:11:58,480
maybe some important one which is like

01:11:56,320 --> 01:12:00,000
it where an nng update is working within

01:11:58,480 --> 01:12:02,400
the nx workspace

01:12:00,000 --> 01:12:03,440
it is definitely working uh the only

01:12:02,400 --> 01:12:06,480
thing we kind of

01:12:03,440 --> 01:12:07,679
start recommending is to not use nx like

01:12:06,480 --> 01:12:10,800
ng upgrade

01:12:07,679 --> 01:12:12,400
but more uh the annex migrate feature

01:12:10,800 --> 01:12:15,920
like we have a specific

01:12:12,400 --> 01:12:17,440
nx upgrade command which is nx migrate

01:12:15,920 --> 01:12:19,120
and the difference there is basically

01:12:17,440 --> 01:12:21,520
just that um and the update

01:12:19,120 --> 01:12:23,520
updates you immediately while nx migrate

01:12:21,520 --> 01:12:25,840
basically analyze your workspace gets

01:12:23,520 --> 01:12:27,360
all the migration script it has to run

01:12:25,840 --> 01:12:29,600
then basically shows you the modified

01:12:27,360 --> 01:12:30,159
package json and so you can still have a

01:12:29,600 --> 01:12:32,719
look at it

01:12:30,159 --> 01:12:34,239
even like modify it if you need install

01:12:32,719 --> 01:12:36,080
the upgraded versions of the various

01:12:34,239 --> 01:12:38,400
packages and then separately run

01:12:36,080 --> 01:12:39,560
the migrations and so the nx myriad

01:12:38,400 --> 01:12:41,199
command will actually create a

01:12:39,560 --> 01:12:42,159
migration.json file within your

01:12:41,199 --> 01:12:43,600
workspace which

01:12:42,159 --> 01:12:46,400
lists all the migrations that have to be

01:12:43,600 --> 01:12:47,920
run and the important part there or the

01:12:46,400 --> 01:12:50,159
useful part there is especially in

01:12:47,920 --> 01:12:51,760
larger repositories that you can rerun

01:12:50,159 --> 01:12:53,760
those migrations over time

01:12:51,760 --> 01:12:54,880
because as you might know like you can

01:12:53,760 --> 01:12:56,560
really in

01:12:54,880 --> 01:12:58,000
real world scenarios where lots of

01:12:56,560 --> 01:12:59,840
developers say like

01:12:58,000 --> 01:13:01,440
stop development like for two days and

01:12:59,840 --> 01:13:02,880
then let's migrate and then let's merge

01:13:01,440 --> 01:13:04,640
everything in master and every

01:13:02,880 --> 01:13:06,800
everyone continues right like there we

01:13:04,640 --> 01:13:08,960
have open prs which are still pending

01:13:06,800 --> 01:13:10,880
which have not been migrated and so on

01:13:08,960 --> 01:13:12,960
and so that migration json helps those

01:13:10,880 --> 01:13:15,600
developers rerun migrations

01:13:12,960 --> 01:13:17,280
even multiple times to basically upgrade

01:13:15,600 --> 01:13:19,520
the workspace for them

01:13:17,280 --> 01:13:21,760
so that's the main reason why we

01:13:19,520 --> 01:13:25,760
basically have in those more

01:13:21,760 --> 01:13:25,760
multi-step upgrade paths if you want

01:13:26,320 --> 01:13:29,920
all right awesome okay that was

01:13:29,280 --> 01:13:34,880
excellent

01:13:29,920 --> 01:13:37,040
thank you both of you and then um

01:13:34,880 --> 01:13:39,520
yeah be sure to check out the the links

01:13:37,040 --> 01:13:41,679
that these guys put in the chat i know

01:13:39,520 --> 01:13:44,320
that they were mentioning some discounts

01:13:41,679 --> 01:13:48,080
and some great offers that way

01:13:44,320 --> 01:13:50,480
um also be sure to check out the ng-conf

01:13:48,080 --> 01:13:52,080
website we do have enterprise ng coming

01:13:50,480 --> 01:13:54,320
up in november

01:13:52,080 --> 01:13:55,360
and what's really exciting is that not

01:13:54,320 --> 01:13:58,400
only do we have

01:13:55,360 --> 01:14:01,840
this series right here of seven

01:13:58,400 --> 01:14:04,239
free webinars but on the first day of

01:14:01,840 --> 01:14:05,600
enterprise ng on november 16th we

01:14:04,239 --> 01:14:08,239
actually have

01:14:05,600 --> 01:14:10,080
a whole set of seven additional free

01:14:08,239 --> 01:14:12,239
workshops and these are going to be

01:14:10,080 --> 01:14:13,360
not just hour-long workshops but we'll

01:14:12,239 --> 01:14:16,640
be more

01:14:13,360 --> 01:14:18,800
in depth three to four hours each

01:14:16,640 --> 01:14:20,560
and like i said free so i mean that's

01:14:18,800 --> 01:14:21,600
that's amazing and there will be one on

01:14:20,560 --> 01:14:24,320
nx

01:14:21,600 --> 01:14:25,040
and we're really excited to have uh even

01:14:24,320 --> 01:14:26,960
jeff cross

01:14:25,040 --> 01:14:28,320
joining us for that and i believe isaac

01:14:26,960 --> 01:14:29,120
aren't you coming back for that one as

01:14:28,320 --> 01:14:33,280
well

01:14:29,120 --> 01:14:36,320
yeah i'll be there yeah so pretty cool

01:14:33,280 --> 01:14:39,440
and what and rash will also be there

01:14:36,320 --> 01:14:41,600
yeah so great great group of guys

01:14:39,440 --> 01:14:43,280
um very talented developers definitely

01:14:41,600 --> 01:14:46,960
check that out

01:14:43,280 --> 01:14:49,920
you can go get registered at ngcomp.org

01:14:46,960 --> 01:14:51,920
be sure to save your seat and yeah we'd

01:14:49,920 --> 01:14:55,120
love to have you join us for ng

01:14:51,920 --> 01:14:58,480
conf um well it's enterprise ng

01:14:55,120 --> 01:15:00,960
in november so thanks to everybody and

01:14:58,480 --> 01:15:01,679
we'll get this replay available as soon

01:15:00,960 --> 01:15:05,360
as possible

01:15:01,679 --> 01:15:09,440
just keep your eyes open um pretty much

01:15:05,360 --> 01:15:13,730
on the ngcomp youtube channel and

01:15:09,440 --> 01:15:20,440
also on our website so all right thanks

01:15:13,730 --> 01:15:23,440
[Music]

01:15:20,440 --> 01:15:23,440

YouTube URL: https://www.youtube.com/watch?v=LEqJ1xKf_1w


