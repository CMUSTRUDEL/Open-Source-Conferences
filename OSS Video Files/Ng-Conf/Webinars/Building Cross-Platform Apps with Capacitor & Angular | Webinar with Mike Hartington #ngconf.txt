Title: Building Cross-Platform Apps with Capacitor & Angular | Webinar with Mike Hartington #ngconf
Publication date: 2021-02-11
Playlist: Webinars
Description: 
	Join Mike Hartington for a walkthrough of Capacitor, a new cross-platform native runtime that makes it easy to build web apps that run on iOS, Android, and on the web as Progressive Web Apps— all powered by a single codebase.  Capacitor is a spiritual success to Cordova and offers a modern approach to app building that makes it easy for web developers to reuse their skills to build quality apps for all platforms, while significantly lessening the likelihood that they’ll get stuck on native-specific issues.

Get your ticket to ng-conf at ng-conf.org!

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:02,770 --> 00:00:06,240
[Applause]

00:00:06,570 --> 00:00:11,549
[Music]

00:00:11,920 --> 00:00:17,920
right

00:00:13,120 --> 00:00:17,920
let me just share my screen

00:00:19,760 --> 00:00:23,519
okay so i got a confirmation that my

00:00:22,080 --> 00:00:26,480
screen's up and good

00:00:23,519 --> 00:00:27,439
it is good yep perfect thank you

00:00:26,480 --> 00:00:31,039
everyone for

00:00:27,439 --> 00:00:32,559
uh joining the webinar today um

00:00:31,039 --> 00:00:34,719
like work said my name is mike

00:00:32,559 --> 00:00:38,079
hardington you can find me online

00:00:34,719 --> 00:00:40,000
uh m hardington if you would like to uh

00:00:38,079 --> 00:00:41,920
bring me pictures of your animals or

00:00:40,000 --> 00:00:43,680
just ask questions afterwards

00:00:41,920 --> 00:00:45,760
uh we're going to be talking about

00:00:43,680 --> 00:00:47,440
building cross-platform apps

00:00:45,760 --> 00:00:49,520
uh and we're going to be talking about

00:00:47,440 --> 00:00:52,000
doing that with capacitor in

00:00:49,520 --> 00:00:54,399
angular this is a topic that is very

00:00:52,000 --> 00:00:55,760
near and dear to me because i work in

00:00:54,399 --> 00:00:59,039
this stuff

00:00:55,760 --> 00:01:01,039
on a daily basis

00:00:59,039 --> 00:01:02,160
so let's start off with setting some

00:01:01,039 --> 00:01:04,559
baseline right

00:01:02,160 --> 00:01:06,720
i think we all are aware that mobile

00:01:04,559 --> 00:01:10,400
development is not the easiest

00:01:06,720 --> 00:01:13,119
uh space to be in depending on what

00:01:10,400 --> 00:01:15,280
approach that you try to

00:01:13,119 --> 00:01:16,960
take at building a mobile app there's

00:01:15,280 --> 00:01:20,000
oftentimes a lot of complex

00:01:16,960 --> 00:01:22,799
tools to learn um if you are looking to

00:01:20,000 --> 00:01:24,240
target ios and android well these are

00:01:22,799 --> 00:01:27,200
platforms that have

00:01:24,240 --> 00:01:29,200
very different design languages and

00:01:27,200 --> 00:01:32,400
design expectations and

00:01:29,200 --> 00:01:34,000
uh or user experience expectations so

00:01:32,400 --> 00:01:35,920
you're not necessarily building

00:01:34,000 --> 00:01:39,439
something that is going to

00:01:35,920 --> 00:01:43,119
work uh the same exact way when you are

00:01:39,439 --> 00:01:45,920
building with native development tools

00:01:43,119 --> 00:01:47,920
if you try to build these native

00:01:45,920 --> 00:01:48,560
development tools well now you just kind

00:01:47,920 --> 00:01:51,280
of

00:01:48,560 --> 00:01:53,280
uh signed yourself up for maintaining

00:01:51,280 --> 00:01:55,280
both of these platforms

00:01:53,280 --> 00:01:56,640
and at the end of the day we we we're

00:01:55,280 --> 00:01:59,759
missing out on this huge

00:01:56,640 --> 00:02:01,119
chunk of users that are accessing uh

00:01:59,759 --> 00:02:04,479
you know information out there through

00:02:01,119 --> 00:02:06,880
the web so native mobile development

00:02:04,479 --> 00:02:09,200
very difficult and it only gets us so

00:02:06,880 --> 00:02:12,400
far

00:02:09,200 --> 00:02:14,640
so when i started off doing um

00:02:12,400 --> 00:02:16,400
you know cross-platform development or

00:02:14,640 --> 00:02:17,520
just development in general i think a

00:02:16,400 --> 00:02:19,920
lot of the

00:02:17,520 --> 00:02:22,640
uh the main goals i want to have was

00:02:19,920 --> 00:02:24,400
just to reuse my web skills

00:02:22,640 --> 00:02:26,959
at the very beginning i wouldn't

00:02:24,400 --> 00:02:29,040
consider myself a javascript

00:02:26,959 --> 00:02:30,720
expert but i knew enough to you know get

00:02:29,040 --> 00:02:31,360
myself into trouble and then be able to

00:02:30,720 --> 00:02:34,000
get myself

00:02:31,360 --> 00:02:35,360
out so i didn't want to have to go

00:02:34,000 --> 00:02:38,000
through that learning process

00:02:35,360 --> 00:02:39,200
all over again so i want to reuse my

00:02:38,000 --> 00:02:41,519
skills and be

00:02:39,200 --> 00:02:44,560
a effective web developer that could

00:02:41,519 --> 00:02:44,560
also build for native

00:02:45,040 --> 00:02:48,959
again i didn't want to i was a new

00:02:47,599 --> 00:02:52,000
developer really

00:02:48,959 --> 00:02:52,400
i didn't want to have to maintain uh so

00:02:52,000 --> 00:02:55,519
many

00:02:52,400 --> 00:02:58,800
different projects or even really learn

00:02:55,519 --> 00:03:00,560
a lot about these native platforms so if

00:02:58,800 --> 00:03:02,480
i could have just reduced the amount of

00:03:00,560 --> 00:03:04,080
code that i need to maintain or

00:03:02,480 --> 00:03:06,879
that i even need to write that would

00:03:04,080 --> 00:03:09,200
have been great and

00:03:06,879 --> 00:03:11,360
end of the day for everyone i think uh

00:03:09,200 --> 00:03:13,680
the faster we can get something

00:03:11,360 --> 00:03:14,800
out the door and ship to our users i

00:03:13,680 --> 00:03:17,599
think we're all

00:03:14,800 --> 00:03:19,840
uh looking to do that so whatever we can

00:03:17,599 --> 00:03:22,800
do to reduce our either time to market

00:03:19,840 --> 00:03:24,799
or reduce the development cycle making

00:03:22,800 --> 00:03:27,120
sure that we get features implemented

00:03:24,799 --> 00:03:28,879
and shipped quickly it's all important

00:03:27,120 --> 00:03:29,280
so whatever we can do to reduce that

00:03:28,879 --> 00:03:32,319
time

00:03:29,280 --> 00:03:34,640
to hitting deploy let's let's try to hit

00:03:32,319 --> 00:03:38,159
that goal

00:03:34,640 --> 00:03:39,680
now if you've heard me speak before

00:03:38,159 --> 00:03:41,920
a lot of this stuff kind of sounds

00:03:39,680 --> 00:03:44,319
familiar and that that's no

00:03:41,920 --> 00:03:46,480
that's no uh you know secret i've been

00:03:44,319 --> 00:03:48,879
involved with this space for

00:03:46,480 --> 00:03:50,319
quite a bit and i think you're all i

00:03:48,879 --> 00:03:52,319
think you're all at least

00:03:50,319 --> 00:03:54,159
slightly aware of what i'm going to be

00:03:52,319 --> 00:03:56,239
talking about

00:03:54,159 --> 00:03:58,000
um but i want to set the stage and kind

00:03:56,239 --> 00:04:01,040
of reframe

00:03:58,000 --> 00:04:02,080
how we talk about um cross-platform

00:04:01,040 --> 00:04:04,720
development in

00:04:02,080 --> 00:04:05,360
this kind of a way of rate once run

00:04:04,720 --> 00:04:07,920
anywhere

00:04:05,360 --> 00:04:09,439
and reframe it as not about technologies

00:04:07,920 --> 00:04:12,560
or approaches

00:04:09,439 --> 00:04:16,000
but about levels of abstractions

00:04:12,560 --> 00:04:16,880
in that the technology choice that we

00:04:16,000 --> 00:04:18,160
make in the

00:04:16,880 --> 00:04:20,720
technology choice that we're going to

00:04:18,160 --> 00:04:23,840
look at today it's less about

00:04:20,720 --> 00:04:25,199
write once run anywhere or any of the

00:04:23,840 --> 00:04:28,160
technical

00:04:25,199 --> 00:04:28,800
aspects of it but more about being at

00:04:28,160 --> 00:04:32,560
that

00:04:28,800 --> 00:04:35,840
right point of of abstractions

00:04:32,560 --> 00:04:38,639
away from any given target and

00:04:35,840 --> 00:04:39,680
the best way to visualize this is by the

00:04:38,639 --> 00:04:42,160
comparing

00:04:39,680 --> 00:04:43,759
uh going in a pure web developer

00:04:42,160 --> 00:04:46,000
friendly approach

00:04:43,759 --> 00:04:47,360
and then a pure native approach and

00:04:46,000 --> 00:04:49,040
seeing how

00:04:47,360 --> 00:04:51,360
if we take steps away from those

00:04:49,040 --> 00:04:52,960
approaches how do they compare

00:04:51,360 --> 00:04:56,000
and what are some of the details that we

00:04:52,960 --> 00:04:58,160
need to know so keep this graph in mind

00:04:56,000 --> 00:04:59,440
um and let's kind of dive into the first

00:04:58,160 --> 00:05:02,800
one which is this

00:04:59,440 --> 00:05:04,320
cordova or phonegap so if you've heard

00:05:02,800 --> 00:05:06,000
of this name before

00:05:04,320 --> 00:05:08,160
you probably have heard it from a talk

00:05:06,000 --> 00:05:10,479
from mine or from

00:05:08,160 --> 00:05:11,199
various talks online about apache

00:05:10,479 --> 00:05:14,400
cordova

00:05:11,199 --> 00:05:18,160
it is probably the original um

00:05:14,400 --> 00:05:21,199
pusher of right once run anywhere

00:05:18,160 --> 00:05:23,039
and their whole idea was that there was

00:05:21,199 --> 00:05:27,039
a group of web developers who

00:05:23,039 --> 00:05:30,720
wanted to take part in shipping web apps

00:05:27,039 --> 00:05:33,360
or writing apps for mobile devices

00:05:30,720 --> 00:05:35,360
originally created around the initial

00:05:33,360 --> 00:05:37,840
release of the iphone

00:05:35,360 --> 00:05:39,440
they wanted to take part in this whole

00:05:37,840 --> 00:05:41,680
app marketplace

00:05:39,440 --> 00:05:43,919
but they didn't want to have to learn

00:05:41,680 --> 00:05:47,360
how to write

00:05:43,919 --> 00:05:49,600
objective c or even java eventually

00:05:47,360 --> 00:05:51,520
they want to just reuse their web skills

00:05:49,600 --> 00:05:54,880
and deploy to

00:05:51,520 --> 00:05:55,280
the app store and a lot of that comes

00:05:54,880 --> 00:05:58,960
through

00:05:55,280 --> 00:06:02,960
in the implementation and in the actual

00:05:58,960 --> 00:06:04,960
approaches that you um

00:06:02,960 --> 00:06:07,280
in the actual approaches that you use

00:06:04,960 --> 00:06:09,520
when you work with their technology

00:06:07,280 --> 00:06:10,800
now their idea was that it was to

00:06:09,520 --> 00:06:14,319
polyfill

00:06:10,800 --> 00:06:16,240
the web browser by giving you access to

00:06:14,319 --> 00:06:18,319
certain features and apis that

00:06:16,240 --> 00:06:20,000
didn't ship yet so things like the

00:06:18,319 --> 00:06:23,440
camera file system

00:06:20,000 --> 00:06:24,319
geolocation at the time those apis did

00:06:23,440 --> 00:06:27,039
not exist

00:06:24,319 --> 00:06:28,479
on the browser so this is a way to prove

00:06:27,039 --> 00:06:30,720
those apis out

00:06:28,479 --> 00:06:31,919
work closely with the spec and the

00:06:30,720 --> 00:06:33,600
standards

00:06:31,919 --> 00:06:35,120
you implement them in a way that would

00:06:33,600 --> 00:06:38,240
be very future friendly

00:06:35,120 --> 00:06:40,080
and follow the spec to a t

00:06:38,240 --> 00:06:41,360
um eventually they didn't really get to

00:06:40,080 --> 00:06:45,120
that point uh

00:06:41,360 --> 00:06:47,039
but that was the original goal

00:06:45,120 --> 00:06:48,479
now just a quick little sample code for

00:06:47,039 --> 00:06:52,880
this we have this

00:06:48,479 --> 00:06:55,520
concept of navigator dot or some global

00:06:52,880 --> 00:06:56,880
reference to an api in this case we're

00:06:55,520 --> 00:07:00,319
looking at the camera api

00:06:56,880 --> 00:07:01,039
it's attached to the global navigator

00:07:00,319 --> 00:07:04,080
object

00:07:01,039 --> 00:07:06,479
so if we want to say take a photo or

00:07:04,080 --> 00:07:08,720
bring up the native camera ui we could

00:07:06,479 --> 00:07:12,720
just say navigator dot camera

00:07:08,720 --> 00:07:14,000
dot get picture pass a a success and a

00:07:12,720 --> 00:07:16,080
fail call back

00:07:14,000 --> 00:07:17,520
and then set some options for when that

00:07:16,080 --> 00:07:20,800
camera api

00:07:17,520 --> 00:07:22,639
gets uh gets

00:07:20,800 --> 00:07:24,560
called so in this case we're just

00:07:22,639 --> 00:07:27,039
calling camera.getpicture

00:07:24,560 --> 00:07:28,000
my success will set some image data that

00:07:27,039 --> 00:07:30,800
gets returned

00:07:28,000 --> 00:07:32,160
on fail we'll get a message or a reason

00:07:30,800 --> 00:07:34,479
for why it failed

00:07:32,160 --> 00:07:36,880
and i want to be a pretty low quality

00:07:34,479 --> 00:07:40,400
image uh and i want to get a

00:07:36,880 --> 00:07:42,160
data url uh which is which would be like

00:07:40,400 --> 00:07:45,840
a base64 string

00:07:42,160 --> 00:07:48,160
versus a actual file reference so

00:07:45,840 --> 00:07:50,160
uh all of this would just let us call

00:07:48,160 --> 00:07:53,039
that and we would attach a click handler

00:07:50,160 --> 00:07:55,360
and we'd pretty much have the uh have

00:07:53,039 --> 00:07:59,639
access to the camera right away

00:07:55,360 --> 00:08:01,280
now things to note this

00:07:59,639 --> 00:08:04,720
navigator.camera.getpicture

00:08:01,280 --> 00:08:08,000
it's not necessarily a standard

00:08:04,720 --> 00:08:11,680
api um there's no

00:08:08,000 --> 00:08:15,680
camera object available on the browser

00:08:11,680 --> 00:08:19,199
without capacitor uh without cordova

00:08:15,680 --> 00:08:22,080
being involved so this becomes a little

00:08:19,199 --> 00:08:23,759
problematic right off the bat we have to

00:08:22,080 --> 00:08:24,639
make sure that we are constantly using

00:08:23,759 --> 00:08:26,879
cordova

00:08:24,639 --> 00:08:28,960
and that we constantly have access to

00:08:26,879 --> 00:08:31,599
this or that we have to conditionally

00:08:28,960 --> 00:08:34,479
code around situations where cordova is

00:08:31,599 --> 00:08:34,479
just not available

00:08:35,039 --> 00:08:39,760
so camera isn't the only api that we

00:08:37,839 --> 00:08:41,200
could have access to we could also have

00:08:39,760 --> 00:08:42,719
access to

00:08:41,200 --> 00:08:44,720
things like i said the file system

00:08:42,719 --> 00:08:48,320
geolocation a built-in

00:08:44,720 --> 00:08:50,959
in-app browser um

00:08:48,320 --> 00:08:52,560
and this huge community of plugins uh or

00:08:50,959 --> 00:08:54,480
apis that were provided through this

00:08:52,560 --> 00:08:58,160
plug-in architecture

00:08:54,480 --> 00:09:00,880
now on that subject the plugins and the

00:08:58,160 --> 00:09:02,240
platforms that you can target all these

00:09:00,880 --> 00:09:05,680
things were kind of published

00:09:02,240 --> 00:09:07,519
before npm uh yarn before we have like a

00:09:05,680 --> 00:09:09,120
standard idea of what a javascript

00:09:07,519 --> 00:09:12,080
package should be

00:09:09,120 --> 00:09:13,839
so muzzedies were kind of shipped with

00:09:12,080 --> 00:09:17,839
um

00:09:13,839 --> 00:09:19,360
this very custom and very uh

00:09:17,839 --> 00:09:21,040
i wouldn't say proprietary but this

00:09:19,360 --> 00:09:24,959
non-standard approach

00:09:21,040 --> 00:09:27,279
to adding packages to a project

00:09:24,959 --> 00:09:28,560
ways that just didn't stand the test of

00:09:27,279 --> 00:09:32,640
time

00:09:28,560 --> 00:09:34,800
with the onset of npm yarn

00:09:32,640 --> 00:09:37,839
and having things stored in a local node

00:09:34,800 --> 00:09:37,839
modules directory

00:09:37,920 --> 00:09:46,640
and that to me is also a symptom of

00:09:42,720 --> 00:09:48,640
you know a very fragile ecosystem

00:09:46,640 --> 00:09:50,720
they had a very custom package they had

00:09:48,640 --> 00:09:54,800
a very complex build release

00:09:50,720 --> 00:09:55,440
cycle they had kind of iffy plugins that

00:09:54,800 --> 00:09:58,080
were

00:09:55,440 --> 00:09:58,800
available um some of the time not all

00:09:58,080 --> 00:10:01,920
the time

00:09:58,800 --> 00:10:03,600
so right now i i don't really recommend

00:10:01,920 --> 00:10:05,839
people using cordova

00:10:03,600 --> 00:10:07,519
but even so at the time it was still

00:10:05,839 --> 00:10:09,040
pretty quirky

00:10:07,519 --> 00:10:11,360
you weren't really following the

00:10:09,040 --> 00:10:13,600
standard web flavor approach to doing

00:10:11,360 --> 00:10:13,600
things

00:10:14,800 --> 00:10:19,680
in addition to that they they really

00:10:17,360 --> 00:10:22,320
tried to push that polyfill

00:10:19,680 --> 00:10:22,880
approach to web development where their

00:10:22,320 --> 00:10:24,800
hopes

00:10:22,880 --> 00:10:27,279
were to follow the web standards as

00:10:24,800 --> 00:10:30,720
close as they could but the standards

00:10:27,279 --> 00:10:32,720
kind of kept moving and support

00:10:30,720 --> 00:10:34,000
from the community just wasn't there so

00:10:32,720 --> 00:10:37,680
we would see things

00:10:34,000 --> 00:10:37,680
kind of uh

00:10:37,839 --> 00:10:41,519
we see things kind of get stagnant so

00:10:40,240 --> 00:10:44,399
apis like the

00:10:41,519 --> 00:10:46,000
uh media devices api we're never really

00:10:44,399 --> 00:10:50,640
fully adopted into

00:10:46,000 --> 00:10:52,720
say the camera api provided by cordova

00:10:50,640 --> 00:10:54,720
uh they really wanted to push this whole

00:10:52,720 --> 00:10:56,560
no need for a native ide

00:10:54,720 --> 00:10:58,399
or native tooling you would just do

00:10:56,560 --> 00:11:01,680
everything through these command line

00:10:58,399 --> 00:11:04,720
tools which was great in theory but

00:11:01,680 --> 00:11:06,160
had some pretty um

00:11:04,720 --> 00:11:09,440
i wouldn't say bad but has some

00:11:06,160 --> 00:11:11,200
unforeseen uh consequences

00:11:09,440 --> 00:11:14,079
most most people who have worked with

00:11:11,200 --> 00:11:17,920
cordova before have read

00:11:14,079 --> 00:11:21,200
have run into the dreaded error code 65

00:11:17,920 --> 00:11:22,640
which sounds pretty scary but really all

00:11:21,200 --> 00:11:24,720
it is is just

00:11:22,640 --> 00:11:25,839
the project wasn't signed by the right

00:11:24,720 --> 00:11:28,320
certificate so

00:11:25,839 --> 00:11:31,040
you can't necessarily deploy to the

00:11:28,320 --> 00:11:32,800
right platform or to the right device

00:11:31,040 --> 00:11:35,680
all that would have been solved by just

00:11:32,800 --> 00:11:39,200
opening the native ide

00:11:35,680 --> 00:11:40,000
and also they took the idea of native

00:11:39,200 --> 00:11:42,399
projects

00:11:40,000 --> 00:11:44,480
and really push them as a disc target or

00:11:42,399 --> 00:11:46,560
a build artifact

00:11:44,480 --> 00:11:48,320
so if you were trying to build something

00:11:46,560 --> 00:11:49,680
um you have to make

00:11:48,320 --> 00:11:51,279
uh have to set up your signing

00:11:49,680 --> 00:11:51,680
certificate so it's working great on

00:11:51,279 --> 00:11:54,079
your

00:11:51,680 --> 00:11:54,880
uh machine you commit it to version

00:11:54,079 --> 00:11:56,959
control

00:11:54,880 --> 00:11:58,240
you've lost all the native project

00:11:56,959 --> 00:12:01,279
configuration

00:11:58,240 --> 00:12:03,839
uh there's no way for your co-worker to

00:12:01,279 --> 00:12:04,480
clone that project install it without

00:12:03,839 --> 00:12:07,360
having to

00:12:04,480 --> 00:12:08,240
manually uh apply those changes to the

00:12:07,360 --> 00:12:11,279
project so

00:12:08,240 --> 00:12:14,560
it's kind of it's kind of a very

00:12:11,279 --> 00:12:17,680
volatile uh setup

00:12:14,560 --> 00:12:19,519
so this is one approach to doing

00:12:17,680 --> 00:12:22,959
cross-platform with

00:12:19,519 --> 00:12:24,959
cordova what about the other side

00:12:22,959 --> 00:12:26,480
of the spectrum remember this is kind of

00:12:24,959 --> 00:12:27,279
one step removed from doing web

00:12:26,480 --> 00:12:29,519
development

00:12:27,279 --> 00:12:31,360
what's the one step removed from doing

00:12:29,519 --> 00:12:33,360
full native development

00:12:31,360 --> 00:12:34,399
uh messy is compiled to native

00:12:33,360 --> 00:12:36,000
approaches

00:12:34,399 --> 00:12:38,399
um there's a few different solutions in

00:12:36,000 --> 00:12:40,560
here um

00:12:38,399 --> 00:12:41,680
but they all kind of provide this idea

00:12:40,560 --> 00:12:44,000
of what if we had

00:12:41,680 --> 00:12:45,200
an abstraction on top of native

00:12:44,000 --> 00:12:47,920
development

00:12:45,200 --> 00:12:48,560
that was closer to native development

00:12:47,920 --> 00:12:50,560
but

00:12:48,560 --> 00:12:52,320
brought in some either you know web

00:12:50,560 --> 00:12:54,560
goodness or

00:12:52,320 --> 00:12:55,519
javascript or just some third-party

00:12:54,560 --> 00:12:58,800
language

00:12:55,519 --> 00:13:01,440
to really mix things up and they kind of

00:12:58,800 --> 00:13:02,959
pioneered this idea of either learn once

00:13:01,440 --> 00:13:07,120
and write anywhere

00:13:02,959 --> 00:13:08,240
or don't use javascript or use some kind

00:13:07,120 --> 00:13:11,360
of other language

00:13:08,240 --> 00:13:12,639
to build your app and they all kind of

00:13:11,360 --> 00:13:16,560
come with this promise of

00:13:12,639 --> 00:13:19,040
a quote unquote truly native app

00:13:16,560 --> 00:13:20,880
this is a bit of a marketing marketing

00:13:19,040 --> 00:13:24,240
term of a truly native app

00:13:20,880 --> 00:13:26,880
as we will look out later but they

00:13:24,240 --> 00:13:27,839
promise a truly native app native

00:13:26,880 --> 00:13:31,120
performance

00:13:27,839 --> 00:13:32,560
uh what have you and they bring this

00:13:31,120 --> 00:13:35,200
idea of a standard

00:13:32,560 --> 00:13:38,399
kind of api or standard wrapper around

00:13:35,200 --> 00:13:41,279
native controls native device features

00:13:38,399 --> 00:13:42,240
basically removing the need for you to

00:13:41,279 --> 00:13:45,440
ever

00:13:42,240 --> 00:13:48,480
write or learn native

00:13:45,440 --> 00:13:51,760
languages or native features

00:13:48,480 --> 00:13:53,360
so from like a 10 000 foot view

00:13:51,760 --> 00:13:54,800
if we think about what this actually

00:13:53,360 --> 00:13:56,800
looks like we have

00:13:54,800 --> 00:13:59,839
your app written in this very uh in this

00:13:56,800 --> 00:14:03,040
blue text or this blue box up here

00:13:59,839 --> 00:14:05,360
where we have that loaded up in some

00:14:03,040 --> 00:14:07,839
kind of run time

00:14:05,360 --> 00:14:08,959
some approaches use things like v8 on

00:14:07,839 --> 00:14:13,519
android

00:14:08,959 --> 00:14:16,560
javascript core on ios or a fully custom

00:14:13,519 --> 00:14:17,760
third part fully custom renderer slash

00:14:16,560 --> 00:14:20,560
virtual machine

00:14:17,760 --> 00:14:22,560
that interprets your code and handles

00:14:20,560 --> 00:14:25,199
all the communication between

00:14:22,560 --> 00:14:27,600
your native device features but

00:14:25,199 --> 00:14:30,480
typically there is this

00:14:27,600 --> 00:14:31,199
renderer or runtime wrapper this bridge

00:14:30,480 --> 00:14:33,839
layer

00:14:31,199 --> 00:14:35,120
and then this uh communication channel

00:14:33,839 --> 00:14:38,079
between

00:14:35,120 --> 00:14:38,959
os level features hardware features and

00:14:38,079 --> 00:14:41,199
this kind of

00:14:38,959 --> 00:14:42,240
pub sub architecture where they would

00:14:41,199 --> 00:14:45,519
make calls from

00:14:42,240 --> 00:14:47,760
the wrapper from your app to the wrapper

00:14:45,519 --> 00:14:48,639
to the bridge and then serialize them

00:14:47,760 --> 00:14:52,880
back

00:14:48,639 --> 00:14:55,839
so this is not uh

00:14:52,880 --> 00:14:57,360
it's again it's a very very uh

00:14:55,839 --> 00:14:59,199
simplified overview

00:14:57,360 --> 00:15:02,160
but it's a pretty similar approach

00:14:59,199 --> 00:15:02,160
across the board

00:15:03,120 --> 00:15:08,240
this kind of breaks down though because

00:15:04,800 --> 00:15:08,240
we are now having to

00:15:08,639 --> 00:15:12,639
relearn a specialized version of the

00:15:11,120 --> 00:15:15,680
tools that we're already

00:15:12,639 --> 00:15:17,120
used to some of them

00:15:15,680 --> 00:15:19,680
tell you that you can use just

00:15:17,120 --> 00:15:21,440
javascript but then you are

00:15:19,680 --> 00:15:23,680
limited to what approaches that you can

00:15:21,440 --> 00:15:24,160
use for example you might not be able to

00:15:23,680 --> 00:15:27,519
use

00:15:24,160 --> 00:15:30,720
the same uh

00:15:27,519 --> 00:15:32,800
elements in divs and h1s

00:15:30,720 --> 00:15:33,920
paragraph tags that you're used to using

00:15:32,800 --> 00:15:35,920
in the web

00:15:33,920 --> 00:15:37,519
because those concepts don't exist in

00:15:35,920 --> 00:15:40,240
that platform

00:15:37,519 --> 00:15:41,759
some languages or some approaches say

00:15:40,240 --> 00:15:42,480
javascript's not the right language

00:15:41,759 --> 00:15:45,839
let's use

00:15:42,480 --> 00:15:47,839
other languages altogether which

00:15:45,839 --> 00:15:49,519
is a really hard sell to a web developer

00:15:47,839 --> 00:15:52,480
in my opinion

00:15:49,519 --> 00:15:54,720
now in addition to that we also can't

00:15:52,480 --> 00:15:55,519
reuse any existing web code or any

00:15:54,720 --> 00:15:58,240
existing

00:15:55,519 --> 00:16:00,160
uh project code that we have maybe

00:15:58,240 --> 00:16:02,800
developed in like a prototype

00:16:00,160 --> 00:16:04,399
or whatnot you basically have to rebuild

00:16:02,800 --> 00:16:07,759
that all from scratch

00:16:04,399 --> 00:16:10,639
and if you specialize or if you were

00:16:07,759 --> 00:16:11,199
depend on say like a specialized library

00:16:10,639 --> 00:16:14,560
or

00:16:11,199 --> 00:16:16,320
um third-party uh package

00:16:14,560 --> 00:16:17,600
you're gonna have a hard time trying to

00:16:16,320 --> 00:16:20,639
find one uh

00:16:17,600 --> 00:16:24,800
that exists uh for these platforms so

00:16:20,639 --> 00:16:27,759
if we were to say need a

00:16:24,800 --> 00:16:28,240
a canvas api we're going to have to find

00:16:27,759 --> 00:16:31,040
a

00:16:28,240 --> 00:16:32,000
package that is specific for these

00:16:31,040 --> 00:16:34,880
targets

00:16:32,000 --> 00:16:36,399
versus just saying oh i can find i can

00:16:34,880 --> 00:16:39,440
find a canvas api

00:16:36,399 --> 00:16:41,279
on on npm and there we go i can add to

00:16:39,440 --> 00:16:43,600
my project and it just works

00:16:41,279 --> 00:16:45,360
these projects these type of approaches

00:16:43,600 --> 00:16:48,720
of compile to native

00:16:45,360 --> 00:16:51,120
don't necessarily bring the benefit of

00:16:48,720 --> 00:16:53,279
what web development can give you so

00:16:51,120 --> 00:16:56,399
you're isolating yourself into this very

00:16:53,279 --> 00:16:56,399
specific silo

00:16:56,639 --> 00:17:04,400
and this truly native kind of pitch

00:17:01,040 --> 00:17:07,760
is a bit misleading um because

00:17:04,400 --> 00:17:09,199
the the idea is that i think people try

00:17:07,760 --> 00:17:11,919
to read this as

00:17:09,199 --> 00:17:14,319
oh my code gets compiled away and i get

00:17:11,919 --> 00:17:17,439
this very highly optimized

00:17:14,319 --> 00:17:19,919
uh native binary right

00:17:17,439 --> 00:17:21,039
and that's not necessarily the case uh

00:17:19,919 --> 00:17:23,919
in some approaches

00:17:21,039 --> 00:17:24,799
uh you get the javascript that you write

00:17:23,919 --> 00:17:27,600
and that is just

00:17:24,799 --> 00:17:27,919
translated and loaded up i guess said in

00:17:27,600 --> 00:17:32,400
a

00:17:27,919 --> 00:17:34,400
vm so no uh v8 or javascript core

00:17:32,400 --> 00:17:35,919
that javascript is still there and still

00:17:34,400 --> 00:17:38,080
executing it's just

00:17:35,919 --> 00:17:39,600
rendering all the controls that you need

00:17:38,080 --> 00:17:42,240
to show to your user

00:17:39,600 --> 00:17:43,760
on the fly so if you write a very slow

00:17:42,240 --> 00:17:45,520
loop or if you have this very

00:17:43,760 --> 00:17:47,760
computational heavy

00:17:45,520 --> 00:17:49,039
a bit of javascript well that could

00:17:47,760 --> 00:17:51,440
infect your uh

00:17:49,039 --> 00:17:54,720
affect your performance and there's no

00:17:51,440 --> 00:17:56,880
way to really get around that

00:17:54,720 --> 00:17:58,080
other approaches where they say it's a

00:17:56,880 --> 00:18:01,039
truly native app

00:17:58,080 --> 00:18:01,600
actually implement all of the controls

00:18:01,039 --> 00:18:04,400
through

00:18:01,600 --> 00:18:06,400
a very custom renderer that doesn't use

00:18:04,400 --> 00:18:09,280
any of the native controls

00:18:06,400 --> 00:18:10,799
uh so you basically are drawing a canvas

00:18:09,280 --> 00:18:13,039
on your entire screen

00:18:10,799 --> 00:18:14,160
and it's up to that platform to make

00:18:13,039 --> 00:18:17,280
sure that their

00:18:14,160 --> 00:18:19,200
code matches the native platform code um

00:18:17,280 --> 00:18:21,679
not necessarily something that i would

00:18:19,200 --> 00:18:23,280
consider you know truly native

00:18:21,679 --> 00:18:25,360
if we're having to recreate all this

00:18:23,280 --> 00:18:28,880
stuff

00:18:25,360 --> 00:18:30,880
so this kind of approach is

00:18:28,880 --> 00:18:32,240
they leave a lot to be desired either

00:18:30,880 --> 00:18:34,480
some of them are too much

00:18:32,240 --> 00:18:36,240
or some of them are not enough what's

00:18:34,480 --> 00:18:38,240
the kind of sweet spot

00:18:36,240 --> 00:18:40,080
like i said cordova and phonegap are

00:18:38,240 --> 00:18:41,280
like one step removed from doing pure

00:18:40,080 --> 00:18:43,360
web development

00:18:41,280 --> 00:18:44,799
these compile to native approaches are

00:18:43,360 --> 00:18:47,440
at least a step

00:18:44,799 --> 00:18:48,080
removed from doing uh pure native

00:18:47,440 --> 00:18:49,520
development

00:18:48,080 --> 00:18:51,440
what's the middle ground where we can

00:18:49,520 --> 00:18:53,919
get the best of

00:18:51,440 --> 00:18:57,280
native uh native abstractions and the

00:18:53,919 --> 00:19:00,160
best of web abstractions

00:18:57,280 --> 00:19:02,240
to me that's capacitor right there it

00:19:00,160 --> 00:19:02,799
solves a lot of problems that we saw

00:19:02,240 --> 00:19:04,799
from

00:19:02,799 --> 00:19:08,640
both the compiled to native approach and

00:19:04,799 --> 00:19:11,600
the phonegap cordova approach

00:19:08,640 --> 00:19:12,640
so um in a real simplified way to

00:19:11,600 --> 00:19:16,240
explain it

00:19:12,640 --> 00:19:19,200
capacitor is two parts a

00:19:16,240 --> 00:19:21,200
native runtime and then a javascript

00:19:19,200 --> 00:19:23,440
library

00:19:21,200 --> 00:19:24,320
it gives you a native shell that you can

00:19:23,440 --> 00:19:27,120
load up

00:19:24,320 --> 00:19:27,600
into your project and then it will load

00:19:27,120 --> 00:19:30,320
a

00:19:27,600 --> 00:19:33,520
web app the web app that you write and

00:19:30,320 --> 00:19:35,120
give you access to device features

00:19:33,520 --> 00:19:36,799
exposes those features through a

00:19:35,120 --> 00:19:40,640
javascript library that you can

00:19:36,799 --> 00:19:42,960
import and install through npm

00:19:40,640 --> 00:19:43,919
now this uh javascript library and these

00:19:42,960 --> 00:19:46,160
apis

00:19:43,919 --> 00:19:48,880
are adaptive so that way if you deploy

00:19:46,160 --> 00:19:50,880
to a website or as a progressive web app

00:19:48,880 --> 00:19:52,160
you're going to get the web version of

00:19:50,880 --> 00:19:54,080
that implementation

00:19:52,160 --> 00:19:55,200
but if you deploy it to an ios device or

00:19:54,080 --> 00:19:56,480
an android device

00:19:55,200 --> 00:19:59,600
you're going to get the correct

00:19:56,480 --> 00:20:01,440
implementation for those platforms

00:19:59,600 --> 00:20:02,799
and the way it achieves this is by

00:20:01,440 --> 00:20:05,679
making sure that it can

00:20:02,799 --> 00:20:07,120
utilize the correct native binaries and

00:20:05,679 --> 00:20:10,159
native features

00:20:07,120 --> 00:20:13,200
that each platform provides so you

00:20:10,159 --> 00:20:15,360
get certain features added to ios we're

00:20:13,200 --> 00:20:16,799
using things like cocoapods

00:20:15,360 --> 00:20:18,480
and for android we're using android

00:20:16,799 --> 00:20:21,600
libraries

00:20:18,480 --> 00:20:24,159
so nothing here is custom uh

00:20:21,600 --> 00:20:26,080
custom tooling or custom uh

00:20:24,159 --> 00:20:28,320
implementations we're all just making

00:20:26,080 --> 00:20:31,039
uh use of things that already exist on

00:20:28,320 --> 00:20:33,679
these platforms

00:20:31,039 --> 00:20:34,720
now big ten thousand foot uh you know

00:20:33,679 --> 00:20:37,679
view

00:20:34,720 --> 00:20:39,280
we have our app again in this blue

00:20:37,679 --> 00:20:42,000
square

00:20:39,280 --> 00:20:42,640
and that gets loaded by a native web

00:20:42,000 --> 00:20:45,679
view

00:20:42,640 --> 00:20:46,799
uh for each platform so this is webkit

00:20:45,679 --> 00:20:50,080
or safari

00:20:46,799 --> 00:20:53,840
on ios and then a chrome webview

00:20:50,080 --> 00:20:55,679
for android when these

00:20:53,840 --> 00:20:57,520
when the app is loaded there is a

00:20:55,679 --> 00:21:00,480
connection layer to a bridge

00:20:57,520 --> 00:21:01,679
which will handle calls out to the

00:21:00,480 --> 00:21:03,520
device features

00:21:01,679 --> 00:21:04,720
and then serialize that back into your

00:21:03,520 --> 00:21:07,200
web app

00:21:04,720 --> 00:21:08,400
not too dissimilar from say a compiled

00:21:07,200 --> 00:21:12,799
to native approach

00:21:08,400 --> 00:21:16,400
or even from a cordova approach

00:21:12,799 --> 00:21:19,840
what really sets it apart from all this

00:21:16,400 --> 00:21:20,960
is how these uh so how you get a web app

00:21:19,840 --> 00:21:22,960
out of this

00:21:20,960 --> 00:21:25,280
so you're bringing in your existing web

00:21:22,960 --> 00:21:26,159
apps uh your web technologies your web

00:21:25,280 --> 00:21:28,000
developers

00:21:26,159 --> 00:21:29,440
everyone can contribute to this because

00:21:28,000 --> 00:21:32,559
it's just loading up

00:21:29,440 --> 00:21:35,679
a glorified web app

00:21:32,559 --> 00:21:36,559
the native runtime is instant near

00:21:35,679 --> 00:21:39,200
instant

00:21:36,559 --> 00:21:41,760
when you create the app the webview is

00:21:39,200 --> 00:21:43,600
already loaded it already knows

00:21:41,760 --> 00:21:45,039
how to communicate back and forth with

00:21:43,600 --> 00:21:48,480
the bridge so there's

00:21:45,039 --> 00:21:52,000
a little to no

00:21:48,480 --> 00:21:53,600
delay in getting access to that code

00:21:52,000 --> 00:21:55,679
if you're running a fast app and you can

00:21:53,600 --> 00:21:56,559
load your load and bootstrap your app

00:21:55,679 --> 00:21:59,039
very quickly

00:21:56,559 --> 00:21:59,600
you have access to those needed features

00:21:59,039 --> 00:22:03,039
it kind of

00:21:59,600 --> 00:22:07,039
offsets the uh the expectation

00:22:03,039 --> 00:22:08,240
of is it the approach that is slow or is

00:22:07,039 --> 00:22:09,840
it my web app

00:22:08,240 --> 00:22:11,360
the approach is very fast because it's

00:22:09,840 --> 00:22:13,120
all done natively

00:22:11,360 --> 00:22:14,960
the web app just needs to be as fast to

00:22:13,120 --> 00:22:18,720
be able to

00:22:14,960 --> 00:22:22,400
catch up to that and then

00:22:18,720 --> 00:22:25,039
the uh it

00:22:22,400 --> 00:22:28,159
utilizes the best practices from native

00:22:25,039 --> 00:22:29,679
so if a new version of android studio or

00:22:28,159 --> 00:22:32,720
xcode comes out

00:22:29,679 --> 00:22:34,480
and provides some updates and changes

00:22:32,720 --> 00:22:35,919
we can take advantage of that and know

00:22:34,480 --> 00:22:38,640
that it's not going to

00:22:35,919 --> 00:22:39,600
break our project or cause a significant

00:22:38,640 --> 00:22:40,720
amount of errors

00:22:39,600 --> 00:22:42,480
because we're following the best

00:22:40,720 --> 00:22:44,640
practices and following the uh

00:22:42,480 --> 00:22:48,159
recommended approaches for building

00:22:44,640 --> 00:22:50,159
uh native code your apps are

00:22:48,159 --> 00:22:51,280
going to be able to take advantage of

00:22:50,159 --> 00:22:54,320
incremental updates

00:22:51,280 --> 00:22:57,200
as the platform uh moves forward

00:22:54,320 --> 00:22:58,080
so kind of enough yammering let's kind

00:22:57,200 --> 00:23:03,520
of look

00:22:58,080 --> 00:23:07,520
at how we can add capacitor to a project

00:23:03,520 --> 00:23:10,559
so i have this angular app

00:23:07,520 --> 00:23:12,559
running right here i do use vim so

00:23:10,559 --> 00:23:15,520
you're going to see a lot of vim

00:23:12,559 --> 00:23:18,320
i apologize in advance but i can't i

00:23:15,520 --> 00:23:20,159
can't get used to vs code still

00:23:18,320 --> 00:23:21,600
but we have this app right here where

00:23:20,159 --> 00:23:25,679
all it's doing

00:23:21,600 --> 00:23:28,240
is loading up different notes

00:23:25,679 --> 00:23:30,000
as i've been trying to get better at

00:23:28,240 --> 00:23:31,440
keeping notes and making sure that i'm

00:23:30,000 --> 00:23:34,880
writing things down

00:23:31,440 --> 00:23:39,840
so i'm going to create a new note

00:23:34,880 --> 00:23:39,840
i'm going to call this uh hello

00:23:41,360 --> 00:23:48,840
hello webinar uh

00:23:44,559 --> 00:23:51,840
talk about app go

00:23:48,840 --> 00:23:55,919
demo

00:23:51,840 --> 00:23:58,640
close and yeah it's just using a rich

00:23:55,919 --> 00:24:00,480
text formatter um using this project

00:23:58,640 --> 00:24:02,000
called quilljs

00:24:00,480 --> 00:24:04,080
if you haven't found it you haven't used

00:24:02,000 --> 00:24:05,520
before check it out it's pretty awesome

00:24:04,080 --> 00:24:07,279
uh but i have this note right here i'm

00:24:05,520 --> 00:24:10,320
just going to save it and

00:24:07,279 --> 00:24:14,480
hey i have that showing up in

00:24:10,320 --> 00:24:14,960
my my list initially i have my grocery

00:24:14,480 --> 00:24:18,640
list

00:24:14,960 --> 00:24:19,520
where i am loading up say the bread i

00:24:18,640 --> 00:24:23,039
need to get

00:24:19,520 --> 00:24:26,240
milk egg and coffee

00:24:23,039 --> 00:24:29,279
i made some changes so i can save that

00:24:26,240 --> 00:24:34,000
all of this under the hood is using a

00:24:29,279 --> 00:24:37,279
capacitor it's using its file system api

00:24:34,000 --> 00:24:40,400
now to get this uh into my project

00:24:37,279 --> 00:24:43,600
i ran uh two commands

00:24:40,400 --> 00:24:47,360
first i did an npm install at

00:24:43,600 --> 00:24:50,480
capacitor core at capacitor cli

00:24:47,360 --> 00:24:55,520
to install the necessary dependencies

00:24:50,480 --> 00:24:55,520
now this core just gives you access to a

00:24:55,600 --> 00:24:59,760
to a standard kind of interfaces that

00:24:57,840 --> 00:25:02,480
you can get to throughout the project

00:24:59,760 --> 00:25:03,520
and the cli is just a per project cli

00:25:02,480 --> 00:25:07,679
that you can use

00:25:03,520 --> 00:25:07,679
to interact with capacitor altogether

00:25:08,799 --> 00:25:14,000
if i wanted to instantiate this project

00:25:11,679 --> 00:25:17,600
as a fresh new capacitor project

00:25:14,000 --> 00:25:20,000
i can just run and uh mpx

00:25:17,600 --> 00:25:21,440
cap and then now this will ask me a few

00:25:20,000 --> 00:25:25,600
different questions like where

00:25:21,440 --> 00:25:27,039
where is my disk target or where is my

00:25:25,600 --> 00:25:29,120
web code getting billed to

00:25:27,039 --> 00:25:30,159
what do i want to call the package or

00:25:29,120 --> 00:25:32,640
the project

00:25:30,159 --> 00:25:33,679
uh what's my bundle identifier which is

00:25:32,640 --> 00:25:36,480
pretty important

00:25:33,679 --> 00:25:38,240
in native development basically tell me

00:25:36,480 --> 00:25:41,120
a little bit about this project and i'll

00:25:38,240 --> 00:25:41,760
i'll give you something if we were to

00:25:41,120 --> 00:25:44,559
say go

00:25:41,760 --> 00:25:45,760
back and look at what that creates in

00:25:44,559 --> 00:25:50,159
this case

00:25:45,760 --> 00:25:51,919
we have this uh capacitor config.ts

00:25:50,159 --> 00:25:53,360
so this is making use of a typescript

00:25:51,919 --> 00:25:55,760
based config file so that way we can

00:25:53,360 --> 00:25:59,120
have some dynamic values being

00:25:55,760 --> 00:26:03,039
added here but we can say

00:25:59,120 --> 00:26:04,760
um if i'm my app id for the bundle

00:26:03,039 --> 00:26:07,360
identifier is this

00:26:04,760 --> 00:26:10,000
com.example.app it could be

00:26:07,360 --> 00:26:11,039
a few things this really matters for the

00:26:10,000 --> 00:26:14,640
signing

00:26:11,039 --> 00:26:17,039
um uh aspect of your apps that way each

00:26:14,640 --> 00:26:19,360
one has its own unique identifier

00:26:17,039 --> 00:26:20,400
uh the app name so what does the actual

00:26:19,360 --> 00:26:23,600
app uh

00:26:20,400 --> 00:26:27,360
show on your device once it's installed

00:26:23,600 --> 00:26:30,400
my web directory or my build

00:26:27,360 --> 00:26:31,520
location is going to be in disk ng note

00:26:30,400 --> 00:26:34,559
taker

00:26:31,520 --> 00:26:37,840
and do i need to bundle the web runtime

00:26:34,559 --> 00:26:39,919
no because i'm using things like angular

00:26:37,840 --> 00:26:42,240
cli to do my building for me

00:26:39,919 --> 00:26:43,840
this is really only useful if you are

00:26:42,240 --> 00:26:47,200
not using a framework

00:26:43,840 --> 00:26:50,320
and you're rolling your own solution

00:26:47,200 --> 00:26:53,440
from here we can come into this

00:26:50,320 --> 00:26:56,640
home page and inside of the actual

00:26:53,440 --> 00:26:58,960
homepage component itself we're making

00:26:56,640 --> 00:27:01,039
use of angular material here

00:26:58,960 --> 00:27:02,159
where we're just loading up this common

00:27:01,039 --> 00:27:06,880
app header

00:27:02,159 --> 00:27:08,960
uh giving it a button to add to our

00:27:06,880 --> 00:27:10,240
header and then we're using this

00:27:08,960 --> 00:27:13,679
material

00:27:10,240 --> 00:27:16,159
list item to iterate over

00:27:13,679 --> 00:27:18,320
a collection of notes and to just render

00:27:16,159 --> 00:27:22,320
out the name of those notes

00:27:18,320 --> 00:27:25,440
so the home component for this

00:27:22,320 --> 00:27:26,640
is actually using all of capacitor to

00:27:25,440 --> 00:27:29,600
load up files

00:27:26,640 --> 00:27:30,320
from a file system so we're making use

00:27:29,600 --> 00:27:33,679
of this

00:27:30,320 --> 00:27:35,520
package called capacitor file system

00:27:33,679 --> 00:27:37,120
it's just another npm package that we

00:27:35,520 --> 00:27:39,279
can install into the project

00:27:37,120 --> 00:27:41,600
and then we get access to stuff like the

00:27:39,279 --> 00:27:44,399
file system api itself

00:27:41,600 --> 00:27:45,200
a directory enum so that way we can uh

00:27:44,399 --> 00:27:48,720
have some

00:27:45,200 --> 00:27:52,000
standard and type safe

00:27:48,720 --> 00:27:54,399
access of different file locations uh

00:27:52,000 --> 00:27:56,799
this reader results so that way it's

00:27:54,399 --> 00:27:58,880
just a type and we can type our

00:27:56,799 --> 00:28:01,039
methods and have some good auto

00:27:58,880 --> 00:28:04,559
completion

00:28:01,039 --> 00:28:08,240
so on init we're just going to say

00:28:04,559 --> 00:28:10,960
hey file system request access for this

00:28:08,240 --> 00:28:12,320
uh so if i go ahead and i load this up

00:28:10,960 --> 00:28:15,520
on a platform and i

00:28:12,320 --> 00:28:17,279
have said no to reading uh

00:28:15,520 --> 00:28:18,720
reading or writing files before it'll

00:28:17,279 --> 00:28:20,799
still prompt the users like

00:28:18,720 --> 00:28:22,320
sure can we can we please just write a

00:28:20,799 --> 00:28:24,080
file we're going to write it into this

00:28:22,320 --> 00:28:27,760
one sandbox location

00:28:24,080 --> 00:28:29,440
can we please um request permissions

00:28:27,760 --> 00:28:32,559
will handle that for you and just

00:28:29,440 --> 00:28:35,679
give you uh the um

00:28:32,559 --> 00:28:37,679
either handle uh say yep you can request

00:28:35,679 --> 00:28:40,080
permission you can get access to that

00:28:37,679 --> 00:28:41,039
and then once that's done we can just

00:28:40,080 --> 00:28:44,320
say all right in

00:28:41,039 --> 00:28:48,159
the file system now a net file system

00:28:44,320 --> 00:28:52,559
is this long promise of we're going to

00:28:48,159 --> 00:28:56,000
make a directory um no op from all the

00:28:52,559 --> 00:28:58,320
success and failures once that

00:28:56,000 --> 00:28:59,279
make directory has succeeded we will

00:28:58,320 --> 00:29:02,720
just say

00:28:59,279 --> 00:29:05,120
read all the files in that directory

00:29:02,720 --> 00:29:06,320
and then once we've gotten the files off

00:29:05,120 --> 00:29:09,360
of the

00:29:06,320 --> 00:29:11,760
results we will just set the actual

00:29:09,360 --> 00:29:13,840
notes to be an ordered version of them

00:29:11,760 --> 00:29:17,200
where we are basically just

00:29:13,840 --> 00:29:20,480
uh organizing them by that final digit

00:29:17,200 --> 00:29:23,520
which is just a timestamp

00:29:20,480 --> 00:29:25,279
the real details here are the uh make

00:29:23,520 --> 00:29:28,320
directory and read directory

00:29:25,279 --> 00:29:31,039
which is just returning promises

00:29:28,320 --> 00:29:33,279
so all of capacitors apis are

00:29:31,039 --> 00:29:36,000
asynchronous so we can implement them

00:29:33,279 --> 00:29:36,880
in a very friendly asynchronous way this

00:29:36,000 --> 00:29:39,120
is a promise

00:29:36,880 --> 00:29:40,000
we could do this as observables as well

00:29:39,120 --> 00:29:42,399
by just

00:29:40,000 --> 00:29:43,200
wrapping this with a from but for my

00:29:42,399 --> 00:29:46,240
needs

00:29:43,200 --> 00:29:47,679
a promise works pretty well so i'll read

00:29:46,240 --> 00:29:50,960
this directory

00:29:47,679 --> 00:29:54,000
it'll be a path called notes

00:29:50,960 --> 00:29:57,520
in the directories.document so a

00:29:54,000 --> 00:29:59,679
document based location

00:29:57,520 --> 00:30:01,840
and makeder will do the same thing just

00:29:59,679 --> 00:30:05,840
calling filesystem.makter

00:30:01,840 --> 00:30:08,559
so pretty clean api and well

00:30:05,840 --> 00:30:10,960
what else do we have on here so we'll go

00:30:08,559 --> 00:30:12,720
to the file system itself

00:30:10,960 --> 00:30:15,360
but we have a few different methods that

00:30:12,720 --> 00:30:17,840
we can use we can append a file we can

00:30:15,360 --> 00:30:20,720
get a file uri delete

00:30:17,840 --> 00:30:21,200
make a directory delete a directory get

00:30:20,720 --> 00:30:24,559
even

00:30:21,200 --> 00:30:26,399
the stats on that so what kind of file

00:30:24,559 --> 00:30:28,000
does this file exist even

00:30:26,399 --> 00:30:29,600
uh what are some of the data what's some

00:30:28,000 --> 00:30:32,880
of the stats on the file

00:30:29,600 --> 00:30:35,039
so it's heavily influenced by some uh

00:30:32,880 --> 00:30:36,080
the node file system api so if you use

00:30:35,039 --> 00:30:39,440
that before

00:30:36,080 --> 00:30:43,360
it should feel pretty familiar now

00:30:39,440 --> 00:30:47,360
once this is all set up and in place

00:30:43,360 --> 00:30:49,760
we come over to our uh note taker or

00:30:47,360 --> 00:30:51,279
edit note page and we just load up

00:30:49,760 --> 00:30:54,799
content up

00:30:51,279 --> 00:30:54,799
so in the edit page

00:30:55,120 --> 00:31:00,880
we have all of this being loaded up

00:30:58,320 --> 00:31:02,240
we can ignore this modules part this is

00:31:00,880 --> 00:31:05,360
just for

00:31:02,240 --> 00:31:08,080
quail js to set up the toolbar but

00:31:05,360 --> 00:31:10,960
we come into here we just grab the

00:31:08,080 --> 00:31:14,159
router id from the parameters

00:31:10,960 --> 00:31:14,880
and if there is a route id on init we're

00:31:14,159 --> 00:31:17,960
just going to

00:31:14,880 --> 00:31:19,760
read uh that file so say

00:31:17,960 --> 00:31:23,039
filesystem.readfile

00:31:19,760 --> 00:31:24,799
pass it into location uh set the

00:31:23,039 --> 00:31:26,080
directory and encoding to return the

00:31:24,799 --> 00:31:27,679
results from

00:31:26,080 --> 00:31:29,200
and then once that data has been

00:31:27,679 --> 00:31:33,360
returned

00:31:29,200 --> 00:31:35,919
we're just going to set the content of

00:31:33,360 --> 00:31:36,559
our editor our new editor quill editor

00:31:35,919 --> 00:31:39,039
instance

00:31:36,559 --> 00:31:40,480
to be that data so this is just using

00:31:39,039 --> 00:31:42,960
things like ng model

00:31:40,480 --> 00:31:44,320
to bind the value so we have a really

00:31:42,960 --> 00:31:46,480
nice approach to

00:31:44,320 --> 00:31:48,720
reading file data and setting it

00:31:46,480 --> 00:31:51,840
somewhere in our app

00:31:48,720 --> 00:31:54,080
if i make a change well i'm just saying

00:31:51,840 --> 00:31:55,679
hey does this file already exist by

00:31:54,080 --> 00:31:58,080
reading the route id

00:31:55,679 --> 00:31:59,440
if so the name of this file is going to

00:31:58,080 --> 00:32:03,039
be that route id

00:31:59,440 --> 00:32:06,080
otherwise generate a note uh a new

00:32:03,039 --> 00:32:09,440
string where i'm saying no equals

00:32:06,080 --> 00:32:13,919
date dot now and then append the txt

00:32:09,440 --> 00:32:15,360
extension to it so fairly simple here

00:32:13,919 --> 00:32:17,120
from that i can await

00:32:15,360 --> 00:32:19,039
writing this file and then once that

00:32:17,120 --> 00:32:22,080
file has resolved

00:32:19,039 --> 00:32:25,200
i can just go back so as we saw here

00:32:22,080 --> 00:32:30,240
all right it's my grocery list this

00:32:25,200 --> 00:32:30,240
is uh my

00:32:31,279 --> 00:32:36,399
shopping list i'll hit save

00:32:34,720 --> 00:32:38,159
go back to it and cool it's already

00:32:36,399 --> 00:32:40,320
there

00:32:38,159 --> 00:32:42,240
what's even better here is if i want to

00:32:40,320 --> 00:32:45,120
say delete a file

00:32:42,240 --> 00:32:45,600
it actually would be quite simple to do

00:32:45,120 --> 00:32:47,440
so

00:32:45,600 --> 00:32:49,279
what i'm going to do is add that real

00:32:47,440 --> 00:32:52,480
quick so i'll say

00:32:49,279 --> 00:32:56,240
async delete and

00:32:52,480 --> 00:32:59,519
i will just say const file equals this

00:32:56,240 --> 00:33:03,679
route id and then if

00:32:59,519 --> 00:33:07,120
file i will await

00:33:03,679 --> 00:33:10,240
file system dot

00:33:07,120 --> 00:33:13,360
delete file

00:33:10,240 --> 00:33:16,640
passing in the path

00:33:13,360 --> 00:33:20,320
to be my notes directory

00:33:16,640 --> 00:33:22,880
and then the file name itself

00:33:20,320 --> 00:33:24,559
and then the directory is going to be

00:33:22,880 --> 00:33:29,120
the

00:33:24,559 --> 00:33:31,120
directory dot

00:33:29,120 --> 00:33:32,720
documents and you can see the list of

00:33:31,120 --> 00:33:35,760
locations and where you can

00:33:32,720 --> 00:33:38,080
uh store your files

00:33:35,760 --> 00:33:39,440
whether it's in cache documents external

00:33:38,080 --> 00:33:43,039
external storage

00:33:39,440 --> 00:33:45,760
uh data directory all these are just

00:33:43,039 --> 00:33:50,960
kind of provided by the file system

00:33:45,760 --> 00:33:53,279
so we will say all right delete the file

00:33:50,960 --> 00:33:54,720
oh wait for that results uh and then

00:33:53,279 --> 00:33:58,320
when that's done we'll just say

00:33:54,720 --> 00:33:58,320
this dot go back

00:33:58,399 --> 00:34:06,559
save that go to the edit page itself

00:34:02,640 --> 00:34:11,839
and then on our button we'll just say

00:34:06,559 --> 00:34:11,839
click equals delete

00:34:15,119 --> 00:34:20,399
double check that compiled successfully

00:34:18,960 --> 00:34:23,280
cool um

00:34:20,399 --> 00:34:26,480
so see we'll go to our hello webinar i'm

00:34:23,280 --> 00:34:26,480
just going to delete this

00:34:26,879 --> 00:34:35,839
see what went wrong real quick

00:34:38,720 --> 00:34:41,359
oh no

00:34:43,679 --> 00:34:49,839
well we did say that this is

00:34:52,480 --> 00:34:58,160
well this is a demo so we can kind of

00:34:55,760 --> 00:34:59,040
move out from it if any of you uh eagle

00:34:58,160 --> 00:35:02,160
eye

00:34:59,040 --> 00:35:03,599
viewers out there can notice the uh

00:35:02,160 --> 00:35:05,359
what's wrong with this please let me

00:35:03,599 --> 00:35:08,400
know that would be great uh

00:35:05,359 --> 00:35:11,920
bring it up in the q a but let's go

00:35:08,400 --> 00:35:11,920
ahead and save and not delete

00:35:12,560 --> 00:35:17,839
maybe try that

00:35:19,119 --> 00:35:24,800
oh that is right

00:35:22,400 --> 00:35:26,079
thank you there we go i just hit the

00:35:24,800 --> 00:35:29,040
wrong button

00:35:26,079 --> 00:35:30,480
thank you so much i'd say that's

00:35:29,040 --> 00:35:32,880
embarrassing but

00:35:30,480 --> 00:35:34,400
i've done my fair share of embarrassing

00:35:32,880 --> 00:35:38,000
things as a kid so

00:35:34,400 --> 00:35:38,000
i can uh i can take that

00:35:38,800 --> 00:35:42,480
it's always during webinars anyway like

00:35:41,359 --> 00:35:44,880
if if anything

00:35:42,480 --> 00:35:46,560
could go wrong with your code it happens

00:35:44,880 --> 00:35:49,520
when you're presenting it

00:35:46,560 --> 00:35:51,119
so it just happens to work out that way

00:35:49,520 --> 00:35:54,880
it does

00:35:51,119 --> 00:35:57,280
well with that in place we have our app

00:35:54,880 --> 00:35:58,880
running this is just a web app right

00:35:57,280 --> 00:36:01,760
nothing about this

00:35:58,880 --> 00:36:03,599
screams i'm writing a native app so

00:36:01,760 --> 00:36:06,880
let's go ahead and actually add that

00:36:03,599 --> 00:36:08,720
uh stuff so what i'm going to do

00:36:06,880 --> 00:36:10,880
is actually just come over here to my

00:36:08,720 --> 00:36:12,320
terminal and i'm just going to do a

00:36:10,880 --> 00:36:14,320
quick little build

00:36:12,320 --> 00:36:15,920
uh passing in the production flag to do

00:36:14,320 --> 00:36:17,760
a pro prod build

00:36:15,920 --> 00:36:19,680
this is a pretty small app so it should

00:36:17,760 --> 00:36:22,160
go pretty quickly but this will give me

00:36:19,680 --> 00:36:24,400
ample coffee time

00:36:22,160 --> 00:36:25,200
so nothing what we're doing right here

00:36:24,400 --> 00:36:27,599
is

00:36:25,200 --> 00:36:29,599
too far out of the expectations from

00:36:27,599 --> 00:36:30,880
what a web developer should feel

00:36:29,599 --> 00:36:34,240
comfortable with

00:36:30,880 --> 00:36:36,480
um we're just building our web app

00:36:34,240 --> 00:36:37,680
kind of letting it sink took a little

00:36:36,480 --> 00:36:41,280
bit to get done

00:36:37,680 --> 00:36:44,400
but fairly small app let's go in

00:36:41,280 --> 00:36:48,000
and let's say deploy it to ios so

00:36:44,400 --> 00:36:52,560
i'm going to run mpx cap

00:36:48,000 --> 00:36:56,480
add ios so this is going to add a full

00:36:52,560 --> 00:36:59,040
native xcode project for me

00:36:56,480 --> 00:37:00,079
it's going to copy the assets from my

00:36:59,040 --> 00:37:03,280
build target

00:37:00,079 --> 00:37:07,119
to the native project now

00:37:03,280 --> 00:37:11,359
what you can see right here is that

00:37:07,119 --> 00:37:14,800
they found one capacitor plug-in for ios

00:37:11,359 --> 00:37:17,280
again this is using um

00:37:14,800 --> 00:37:19,119
cocoapods to manage plug-ins so it's

00:37:17,280 --> 00:37:21,280
going to install the plug-in for that

00:37:19,119 --> 00:37:23,200
and copy it over to our project

00:37:21,280 --> 00:37:24,800
now we get some little uh feedback here

00:37:23,200 --> 00:37:27,599
after the

00:37:24,800 --> 00:37:28,560
update and the ad have run so we can do

00:37:27,599 --> 00:37:32,079
mpx

00:37:28,560 --> 00:37:36,400
cap open ios

00:37:32,079 --> 00:37:37,280
and open up the ios project here now if

00:37:36,400 --> 00:37:41,200
you're afraid

00:37:37,280 --> 00:37:44,240
of xcode don't be it's like apple music

00:37:41,200 --> 00:37:48,079
or itunes just for native development

00:37:44,240 --> 00:37:51,200
but note that we have this

00:37:48,079 --> 00:37:52,560
app folder over here which is uh holds

00:37:51,200 --> 00:37:56,000
our native project

00:37:52,560 --> 00:37:59,359
so i can come over to here and load

00:37:56,000 --> 00:38:01,839
up a swift file which it doesn't look

00:37:59,359 --> 00:38:03,839
too dissimilar from javascript so

00:38:01,839 --> 00:38:05,760
that i should be pretty familiar with

00:38:03,839 --> 00:38:09,119
and then i get this pods folder

00:38:05,760 --> 00:38:11,680
which shows me all of the different uh

00:38:09,119 --> 00:38:12,720
pods or plugins that are being used for

00:38:11,680 --> 00:38:15,520
my project

00:38:12,720 --> 00:38:16,240
all managed through native tooling that

00:38:15,520 --> 00:38:19,920
is found

00:38:16,240 --> 00:38:22,800
in a native ios developers tool chain

00:38:19,920 --> 00:38:23,440
so my app is ready i have it selected to

00:38:22,800 --> 00:38:26,880
target an

00:38:23,440 --> 00:38:29,520
iphone 12. let's go ahead and hit this

00:38:26,880 --> 00:38:29,520
run button

00:38:31,280 --> 00:38:34,320
all right i think we oh well hey here we

00:38:33,680 --> 00:38:37,440
go

00:38:34,320 --> 00:38:38,800
the app is loaded when ios decided they

00:38:37,440 --> 00:38:41,920
want to load

00:38:38,800 --> 00:38:46,640
let's go ahead we'll create a new note

00:38:41,920 --> 00:38:48,800
i'll just say hello from ios

00:38:46,640 --> 00:38:50,000
save that and go back and our notes

00:38:48,800 --> 00:38:52,560
still load so

00:38:50,000 --> 00:38:54,320
we have a really good system of loading

00:38:52,560 --> 00:38:57,599
notes and these are saved

00:38:54,320 --> 00:38:59,200
to our actual file system on the device

00:38:57,599 --> 00:39:01,599
so this is looking pretty good for an

00:38:59,200 --> 00:39:03,520
ios project and i won't go through the

00:39:01,599 --> 00:39:06,079
hassle of trying to do

00:39:03,520 --> 00:39:07,599
android because if you think ios was

00:39:06,079 --> 00:39:10,720
slow right now

00:39:07,599 --> 00:39:12,720
android would be even worse so

00:39:10,720 --> 00:39:15,599
let's kind of go to the slides again and

00:39:12,720 --> 00:39:17,599
just kind of wrap up what we did here

00:39:15,599 --> 00:39:19,839
so we had an existing web project and we

00:39:17,599 --> 00:39:21,760
wanted to add capacitor to it

00:39:19,839 --> 00:39:23,760
all we could do was just run the nvm

00:39:21,760 --> 00:39:25,280
install command for the capacitor core

00:39:23,760 --> 00:39:28,480
library

00:39:25,280 --> 00:39:28,960
the capacitor cli and then run npx kappa

00:39:28,480 --> 00:39:30,240
knit

00:39:28,960 --> 00:39:32,880
this will give us all of the

00:39:30,240 --> 00:39:34,240
configuration for a fresh project

00:39:32,880 --> 00:39:36,320
and then if we want to add different

00:39:34,240 --> 00:39:39,520
plugins or platforms

00:39:36,320 --> 00:39:41,119
we install them and run the appropriate

00:39:39,520 --> 00:39:42,720
command for that

00:39:41,119 --> 00:39:44,320
if you want to know more about the

00:39:42,720 --> 00:39:45,520
commands and the different settings that

00:39:44,320 --> 00:39:48,599
we have available

00:39:45,520 --> 00:39:50,079
well you can go to capacitorjs.com

00:39:48,599 --> 00:39:52,640
capacitorjs.com

00:39:50,079 --> 00:39:53,200
docs to learn more about the project

00:39:52,640 --> 00:39:55,280
itself

00:39:53,200 --> 00:39:57,040
and the different cli and apis that are

00:39:55,280 --> 00:39:59,359
available

00:39:57,040 --> 00:40:01,680
i also want to work uh point out that we

00:39:59,359 --> 00:40:02,480
have this new community organization

00:40:01,680 --> 00:40:06,960
that we've

00:40:02,480 --> 00:40:09,280
been trying to grow it is a place for

00:40:06,960 --> 00:40:10,160
developers to share third-party apis and

00:40:09,280 --> 00:40:13,760
plug-ins

00:40:10,160 --> 00:40:17,280
under a curated list for things like

00:40:13,760 --> 00:40:20,800
sign in with apple in-app purchases

00:40:17,280 --> 00:40:21,760
sql lite storage various different apis

00:40:20,800 --> 00:40:23,599
that

00:40:21,760 --> 00:40:25,839
don't necessarily make sense to be part

00:40:23,599 --> 00:40:28,400
of core but we want them to be there and

00:40:25,839 --> 00:40:30,240
we want to have some kind of way to

00:40:28,400 --> 00:40:32,640
help developers add them to their

00:40:30,240 --> 00:40:33,599
project and make sure that the code that

00:40:32,640 --> 00:40:36,880
is being

00:40:33,599 --> 00:40:40,800
used there won't get stale

00:40:36,880 --> 00:40:43,280
and is following best practices

00:40:40,800 --> 00:40:44,160
now capacitor is more than just a side

00:40:43,280 --> 00:40:46,480
project

00:40:44,160 --> 00:40:48,319
it's being used in a lot of good places

00:40:46,480 --> 00:40:49,280
folks like burger king blue cross blue

00:40:48,319 --> 00:40:52,079
shield

00:40:49,280 --> 00:40:53,040
and the bbc are making use of capacitor

00:40:52,079 --> 00:40:56,480
as well smaller

00:40:53,040 --> 00:40:58,640
smaller startup companies like swerkit

00:40:56,480 --> 00:41:00,160
uh and this real small company i don't

00:40:58,640 --> 00:41:02,560
know if anyone's ever heard of them

00:41:00,160 --> 00:41:03,440
uh ibm they're they're using capacitor

00:41:02,560 --> 00:41:05,839
as well so

00:41:03,440 --> 00:41:07,359
we got a lot of traction so far with

00:41:05,839 --> 00:41:09,680
companies big and small

00:41:07,359 --> 00:41:11,280
so if you're if you're thinking that no

00:41:09,680 --> 00:41:12,880
one's actually using this

00:41:11,280 --> 00:41:15,359
well we have plenty of people out there

00:41:12,880 --> 00:41:18,400
that are using this

00:41:15,359 --> 00:41:21,520
now capacitor recently just

00:41:18,400 --> 00:41:23,520
hit its big uh 3.0

00:41:21,520 --> 00:41:25,200
beta release so everything that i kind

00:41:23,520 --> 00:41:28,319
of showed you today the

00:41:25,200 --> 00:41:29,440
plug-ins as a different package some of

00:41:28,319 --> 00:41:32,400
the install commands

00:41:29,440 --> 00:41:35,119
it's all based on our 3.0 and if you go

00:41:32,400 --> 00:41:37,599
to capacitor capacitorjs.com

00:41:35,119 --> 00:41:40,720
blog you'll get access to the release

00:41:37,599 --> 00:41:44,000
notes and the blog post uh going over

00:41:40,720 --> 00:41:47,119
what um drove capacitor 3.

00:41:44,000 --> 00:41:47,599
so before we hit the q a i kind of want

00:41:47,119 --> 00:41:50,880
to

00:41:47,599 --> 00:41:52,640
have some parting uh thoughts about

00:41:50,880 --> 00:41:55,599
what it is that we kind of talked about

00:41:52,640 --> 00:41:58,400
in cross platform in general

00:41:55,599 --> 00:42:00,800
uh for me cross platform is less about

00:41:58,400 --> 00:42:02,640
write once run anywhere

00:42:00,800 --> 00:42:04,000
but trying to reduce the amount of code

00:42:02,640 --> 00:42:07,040
that i as a user

00:42:04,000 --> 00:42:09,680
have to write and maintain yes

00:42:07,040 --> 00:42:11,040
it was great that i could have had that

00:42:09,680 --> 00:42:12,240
i could write a file system

00:42:11,040 --> 00:42:15,040
implementation

00:42:12,240 --> 00:42:16,000
uh and access it through javascript and

00:42:15,040 --> 00:42:19,280
that would just work

00:42:16,000 --> 00:42:22,720
on ios and it would work on android but

00:42:19,280 --> 00:42:24,720
i don't have to think about what the

00:42:22,720 --> 00:42:27,720
implementation is doing

00:42:24,720 --> 00:42:28,880
i can just know that

00:42:27,720 --> 00:42:30,400
filesystem.redirectory

00:42:28,880 --> 00:42:32,720
is going to do the right thing at the

00:42:30,400 --> 00:42:36,079
right time and i know that and

00:42:32,720 --> 00:42:36,079
can be smart about it

00:42:36,560 --> 00:42:41,200
we should be able to provide full native

00:42:38,800 --> 00:42:43,119
access just through javascript

00:42:41,200 --> 00:42:45,599
there are other approaches to doing this

00:42:43,119 --> 00:42:47,359
some map over the native api and give

00:42:45,599 --> 00:42:50,400
you full access to it through

00:42:47,359 --> 00:42:51,040
um through through their uh their api

00:42:50,400 --> 00:42:53,920
and their uh

00:42:51,040 --> 00:42:56,000
type system but to me that seems like

00:42:53,920 --> 00:42:56,640
very counter-intuitive because now we

00:42:56,000 --> 00:42:58,240
don't

00:42:56,640 --> 00:43:00,319
we don't have a way to run that in

00:42:58,240 --> 00:43:03,040
environments where

00:43:00,319 --> 00:43:04,240
that those apis don't exist by having

00:43:03,040 --> 00:43:06,880
this higher level of

00:43:04,240 --> 00:43:08,480
abstraction around the native apis and

00:43:06,880 --> 00:43:11,599
centering it around javascript

00:43:08,480 --> 00:43:14,720
we can safely type against web

00:43:11,599 --> 00:43:15,760
ios android desktop even with things

00:43:14,720 --> 00:43:17,839
like electron

00:43:15,760 --> 00:43:20,240
we can be a little bit smarter about

00:43:17,839 --> 00:43:22,400
what apis we are using under the hood

00:43:20,240 --> 00:43:26,880
and swap out those implementations that

00:43:22,400 --> 00:43:29,920
developers even knowing it

00:43:26,880 --> 00:43:30,720
i it's better to have access to a native

00:43:29,920 --> 00:43:33,520
project

00:43:30,720 --> 00:43:35,280
than to not have access to it at all the

00:43:33,520 --> 00:43:39,040
fact that i could open that up in

00:43:35,280 --> 00:43:42,160
xcode make modifications to

00:43:39,040 --> 00:43:44,720
the main app delegate i'd rather have

00:43:42,160 --> 00:43:45,200
that than not have any access to it at

00:43:44,720 --> 00:43:48,319
all

00:43:45,200 --> 00:43:50,480
or have ways to modify that so it might

00:43:48,319 --> 00:43:53,760
seem scary at first

00:43:50,480 --> 00:43:56,000
but it's going to be a lot more uh

00:43:53,760 --> 00:43:57,119
future proof to have that there and

00:43:56,000 --> 00:44:01,040
maintain that

00:43:57,119 --> 00:44:03,920
um inversion control than to just say oh

00:44:01,040 --> 00:44:05,440
delete the uh the native project we

00:44:03,920 --> 00:44:08,720
don't want to do that

00:44:05,440 --> 00:44:12,079
so with that let's kind of open it

00:44:08,720 --> 00:44:15,839
up to uh some q a and

00:44:12,079 --> 00:44:19,599
uh see what people have been uh asking

00:44:15,839 --> 00:44:23,440
so oh we got some questions in here

00:44:19,599 --> 00:44:25,839
awesome all right

00:44:23,440 --> 00:44:27,200
so brooke i just go at this and start

00:44:25,839 --> 00:44:28,800
asking these questions

00:44:27,200 --> 00:44:30,560
yeah yeah just work your way through it

00:44:28,800 --> 00:44:35,040
however you see best

00:44:30,560 --> 00:44:38,079
awesome cool so we have

00:44:35,040 --> 00:44:40,800
uh our very first question is uh

00:44:38,079 --> 00:44:42,640
if an application uh if i build an

00:44:40,800 --> 00:44:45,839
application with ionic and capacitor

00:44:42,640 --> 00:44:48,160
that uses geolocation and camera do i

00:44:45,839 --> 00:44:50,480
need to build it using android studio

00:44:48,160 --> 00:44:51,920
and xcode to preview the native

00:44:50,480 --> 00:44:54,160
functionality

00:44:51,920 --> 00:44:56,960
or is there some alternative way without

00:44:54,160 --> 00:45:00,160
installing an ide

00:44:56,960 --> 00:45:00,480
so the actual uh let's kind of rephrase

00:45:00,160 --> 00:45:03,440
it

00:45:00,480 --> 00:45:06,640
this was very ionic agnostic so ionic

00:45:03,440 --> 00:45:09,280
has no impact ionic is just the ui

00:45:06,640 --> 00:45:09,839
for capacitor if you want to make use of

00:45:09,280 --> 00:45:12,480
the

00:45:09,839 --> 00:45:14,079
camera and geo location we have the

00:45:12,480 --> 00:45:16,560
geolocation api

00:45:14,079 --> 00:45:18,240
in the browser and then we also have a

00:45:16,560 --> 00:45:20,240
third-party library

00:45:18,240 --> 00:45:21,440
well not third party still maintained by

00:45:20,240 --> 00:45:24,800
us but a

00:45:21,440 --> 00:45:24,800
optional library called

00:45:24,880 --> 00:45:29,359
pwa elements which will allow you to

00:45:27,359 --> 00:45:32,560
have access to the camera

00:45:29,359 --> 00:45:36,319
in some ui to show that

00:45:32,560 --> 00:45:38,079
uh just through the web so yes and no

00:45:36,319 --> 00:45:39,920
you could have access to these features

00:45:38,079 --> 00:45:42,480
without having to install

00:45:39,920 --> 00:45:44,880
android studio and xcode but if you want

00:45:42,480 --> 00:45:46,319
to actually ship that to the app store

00:45:44,880 --> 00:45:48,960
you're eventually going to have to

00:45:46,319 --> 00:45:48,960
install those

00:45:49,440 --> 00:45:55,280
so thank you for that question uh

00:45:52,640 --> 00:45:57,040
the next question is there any built-in

00:45:55,280 --> 00:46:00,079
plug-in for working with cloud

00:45:57,040 --> 00:46:00,560
firestore and capacitor or do i need to

00:46:00,079 --> 00:46:03,920
install

00:46:00,560 --> 00:46:06,000
standalone one from firebase so there's

00:46:03,920 --> 00:46:10,480
different approaches to this

00:46:06,000 --> 00:46:14,319
we provide a

00:46:10,480 --> 00:46:16,560
firebase ap uh plus set of plug-ins

00:46:14,319 --> 00:46:19,119
for things like crack uh their analytics

00:46:16,560 --> 00:46:22,400
their uh crash monitoring service

00:46:19,119 --> 00:46:24,240
um things that you can do uh that you

00:46:22,400 --> 00:46:25,680
want some of the fidelity from a native

00:46:24,240 --> 00:46:27,200
implementation

00:46:25,680 --> 00:46:29,359
uh but if you're just looking to get

00:46:27,200 --> 00:46:31,680
things like um

00:46:29,359 --> 00:46:33,200
firestore or their real-time database or

00:46:31,680 --> 00:46:35,599
even authentication

00:46:33,200 --> 00:46:36,240
uh the web implementation should be able

00:46:35,599 --> 00:46:38,960
to

00:46:36,240 --> 00:46:40,079
uh suffice for this i think the best way

00:46:38,960 --> 00:46:44,079
to think about it is

00:46:40,079 --> 00:46:44,560
if the uh if the implementation depends

00:46:44,079 --> 00:46:49,200
on

00:46:44,560 --> 00:46:52,400
some native uh fidelity use the plugin

00:46:49,200 --> 00:46:56,240
but also note that the

00:46:52,400 --> 00:46:59,680
web version of it is still valid to be

00:46:56,240 --> 00:47:01,359
a valid solution to use so

00:46:59,680 --> 00:47:02,560
is there any built-in plug-in or way of

00:47:01,359 --> 00:47:04,480
working with it yeah you have the

00:47:02,560 --> 00:47:06,480
javascript library that you can use

00:47:04,480 --> 00:47:07,839
uh for third-party situations you could

00:47:06,480 --> 00:47:10,000
also use their

00:47:07,839 --> 00:47:10,880
uh firebase analytics and firebase

00:47:10,000 --> 00:47:14,160
authentication

00:47:10,880 --> 00:47:18,079
plug-ins from the capacitor community

00:47:14,160 --> 00:47:19,200
um so yeah check out the capacitor

00:47:18,079 --> 00:47:22,319
community because there's a set of

00:47:19,200 --> 00:47:22,319
firebase plug-ins there

00:47:22,480 --> 00:47:26,160
this capacitor is a good one from

00:47:25,200 --> 00:47:28,400
dimitri

00:47:26,160 --> 00:47:30,800
does capacitor help in any way to

00:47:28,400 --> 00:47:33,119
publish your app to the app stores

00:47:30,800 --> 00:47:35,520
uh no capacitor itself does not

00:47:33,119 --> 00:47:36,960
necessarily care about how you publish

00:47:35,520 --> 00:47:39,599
it to the app stores

00:47:36,960 --> 00:47:40,000
i will say a little shameless plug ionic

00:47:39,599 --> 00:47:41,920
does

00:47:40,000 --> 00:47:43,920
offer a service called appflow which

00:47:41,920 --> 00:47:45,760
supports capacitor projects

00:47:43,920 --> 00:47:46,960
which will allow you to automate that

00:47:45,760 --> 00:47:49,920
whole entire process

00:47:46,960 --> 00:47:52,319
and have a a publish to the app store

00:47:49,920 --> 00:47:54,400
feature so you can check that out

00:47:52,319 --> 00:47:57,440
but capacity itself doesn't necessarily

00:47:54,400 --> 00:47:57,440
that's not its focus

00:47:57,839 --> 00:48:05,359
um let's see what else do we got

00:48:02,160 --> 00:48:06,000
can ng serve work with capacitors so we

00:48:05,359 --> 00:48:08,559
can develop

00:48:06,000 --> 00:48:10,079
and test with live reload on a mobile

00:48:08,559 --> 00:48:12,880
device

00:48:10,079 --> 00:48:14,000
i know that if you're using the ionic

00:48:12,880 --> 00:48:17,440
cli

00:48:14,000 --> 00:48:20,640
it'll automatically give you

00:48:17,440 --> 00:48:22,960
a live reload on the device i haven't

00:48:20,640 --> 00:48:25,200
actually tested with ng serve on a

00:48:22,960 --> 00:48:28,640
standalone so that is a great

00:48:25,200 --> 00:48:29,359
question uh i'd like to know your name

00:48:28,640 --> 00:48:32,559
but it says

00:48:29,359 --> 00:48:35,839
guest but what you could do is

00:48:32,559 --> 00:48:39,200
go to our

00:48:35,839 --> 00:48:40,720
github.com slash ionic hyphen team slash

00:48:39,200 --> 00:48:43,280
capacitor

00:48:40,720 --> 00:48:44,400
and we have a discussions panel on there

00:48:43,280 --> 00:48:46,240
uh you could bring this

00:48:44,400 --> 00:48:48,480
up and we could discuss it there and

00:48:46,240 --> 00:48:51,040
figure out if this is something that

00:48:48,480 --> 00:48:53,839
is already built into the cli and if not

00:48:51,040 --> 00:48:56,960
how can we make this possible

00:48:53,839 --> 00:49:00,319
uh will the capacitor apis work on

00:48:56,960 --> 00:49:02,319
desktop for example the file system api

00:49:00,319 --> 00:49:04,880
and electron would make sense to use

00:49:02,319 --> 00:49:07,040
there are in an electron app

00:49:04,880 --> 00:49:09,119
and would it make sense to use it there

00:49:07,040 --> 00:49:11,280
so electron right now

00:49:09,119 --> 00:49:13,440
is in the capacitor community

00:49:11,280 --> 00:49:15,839
organization

00:49:13,440 --> 00:49:18,559
so if you wanted to add that it is still

00:49:15,839 --> 00:49:22,640
a community based project which you can

00:49:18,559 --> 00:49:24,480
totally add and check out i'm not too

00:49:22,640 --> 00:49:28,079
involved in it so i can't say with

00:49:24,480 --> 00:49:31,520
certainty if the file system api

00:49:28,079 --> 00:49:33,359
there makes use of the native file

00:49:31,520 --> 00:49:36,400
system implementation

00:49:33,359 --> 00:49:39,440
but if it does have a file system api

00:49:36,400 --> 00:49:42,559
it should be able to support that

00:49:39,440 --> 00:49:45,599
so i would i would suggest uh

00:49:42,559 --> 00:49:46,319
danny going to the capacitor community

00:49:45,599 --> 00:49:50,319
organization

00:49:46,319 --> 00:49:52,960
on github looking up the electron

00:49:50,319 --> 00:49:54,400
repo and opening an issue for that so

00:49:52,960 --> 00:49:56,800
that we can discuss it a little bit

00:49:54,400 --> 00:49:56,800
further

00:49:56,839 --> 00:50:01,920
um a really good one from sean

00:49:59,920 --> 00:50:04,240
uh everything i've read about capacitor

00:50:01,920 --> 00:50:06,559
batches on cordova's cli approach

00:50:04,240 --> 00:50:07,440
but a ci environment will require one

00:50:06,559 --> 00:50:09,920
require one

00:50:07,440 --> 00:50:12,000
how do you address this so i didn't

00:50:09,920 --> 00:50:15,599
really talk about it

00:50:12,000 --> 00:50:20,079
too much here

00:50:15,599 --> 00:50:23,440
but there is a way to have a capacitor

00:50:20,079 --> 00:50:26,000
build and run your project through a cli

00:50:23,440 --> 00:50:26,800
i would say that these are just uh tools

00:50:26,000 --> 00:50:30,800
on top

00:50:26,800 --> 00:50:34,640
of xcode and android studio

00:50:30,800 --> 00:50:37,040
or the android sdk's built in cli tools

00:50:34,640 --> 00:50:38,640
so for ios it's something i think it's x

00:50:37,040 --> 00:50:41,440
run that you can

00:50:38,640 --> 00:50:44,160
or xcode build or x-run that you can use

00:50:41,440 --> 00:50:46,400
to build out your project

00:50:44,160 --> 00:50:47,440
and android studio has its own approach

00:50:46,400 --> 00:50:50,880
doing that

00:50:47,440 --> 00:50:54,880
so we're not necessarily um

00:50:50,880 --> 00:50:55,680
trying to replace all of cordova's cli

00:50:54,880 --> 00:50:57,680
approach

00:50:55,680 --> 00:50:59,280
so for instance if you were in a github

00:50:57,680 --> 00:51:02,640
actions kind of approach

00:50:59,280 --> 00:51:05,520
any valid action that builds a native

00:51:02,640 --> 00:51:06,480
ios project would still apply here so

00:51:05,520 --> 00:51:08,720
you just make

00:51:06,480 --> 00:51:10,319
make sure that you are picking out hey i

00:51:08,720 --> 00:51:13,359
want to test out my build

00:51:10,319 --> 00:51:17,119
for uh ios run this uh

00:51:13,359 --> 00:51:17,760
action for um for uh for the ios

00:51:17,119 --> 00:51:21,599
platform

00:51:17,760 --> 00:51:23,040
and it would work uh eric has a question

00:51:21,599 --> 00:51:26,400
does it combine well with

00:51:23,040 --> 00:51:28,880
nx dev tools for mono repos uh

00:51:26,400 --> 00:51:30,480
yes though i will admit that at this

00:51:28,880 --> 00:51:32,319
point it's still

00:51:30,480 --> 00:51:34,240
a lot there's still some work involved

00:51:32,319 --> 00:51:36,319
to make sure that

00:51:34,240 --> 00:51:37,359
uh the experience is as polished as it

00:51:36,319 --> 00:51:41,440
could be

00:51:37,359 --> 00:51:44,559
there is a um community project

00:51:41,440 --> 00:51:48,480
um called nx extend that has

00:51:44,559 --> 00:51:50,000
a capacitor uh plug-in for nx that can

00:51:48,480 --> 00:51:52,160
work in that situation

00:51:50,000 --> 00:51:53,440
i haven't tried it myself i know that

00:51:52,160 --> 00:51:56,319
one of the maintainers of it

00:51:53,440 --> 00:51:56,640
works for ionic so i can always ask uh

00:51:56,319 --> 00:51:59,040
ask

00:51:56,640 --> 00:52:00,720
them to figure out uh if there's

00:51:59,040 --> 00:52:02,800
anything that people should be

00:52:00,720 --> 00:52:05,760
aware of so reach out to me on twitter

00:52:02,800 --> 00:52:07,440
my handles are there on the screen

00:52:05,760 --> 00:52:09,680
hopefully i'll get an answer for you on

00:52:07,440 --> 00:52:09,680
that

00:52:10,800 --> 00:52:18,480
all right um can i control what is

00:52:14,800 --> 00:52:23,119
being compiled to mobile versus web

00:52:18,480 --> 00:52:26,319
for example if i have pages i only want

00:52:23,119 --> 00:52:29,440
on the web this is a very good question

00:52:26,319 --> 00:52:31,920
i would suggest using

00:52:29,440 --> 00:52:32,480
i'm thinking this less as mobile versus

00:52:31,920 --> 00:52:34,640
web

00:52:32,480 --> 00:52:36,720
and thinking thinking of it more in

00:52:34,640 --> 00:52:39,520
terms of

00:52:36,720 --> 00:52:41,520
uh environments like you would for your

00:52:39,520 --> 00:52:44,400
angular environment files

00:52:41,520 --> 00:52:46,640
or configurations so you have ng build

00:52:44,400 --> 00:52:48,960
and ng build prod

00:52:46,640 --> 00:52:50,559
this is the same an effect the same way

00:52:48,960 --> 00:52:52,400
that you're doing things there so if you

00:52:50,559 --> 00:52:55,520
have pages that you want to include

00:52:52,400 --> 00:52:57,280
for your native project but

00:52:55,520 --> 00:52:59,040
or only included in the web project

00:52:57,280 --> 00:53:01,760
you're essentially just creating

00:52:59,040 --> 00:53:02,559
a new environment in your angular json

00:53:01,760 --> 00:53:05,599
and then

00:53:02,559 --> 00:53:08,400
providing those files

00:53:05,599 --> 00:53:09,920
to your router setup so that could be

00:53:08,400 --> 00:53:12,319
one way of doing that

00:53:09,920 --> 00:53:13,839
that would be fairly typical to an

00:53:12,319 --> 00:53:16,480
angular developers

00:53:13,839 --> 00:53:16,480
experience

00:53:17,200 --> 00:53:23,119
bartos is it possible to create an ios

00:53:20,559 --> 00:53:24,319
capacitor app on windows we have no

00:53:23,119 --> 00:53:27,119
xcode here

00:53:24,319 --> 00:53:28,400
is it possible with the help of appflo

00:53:27,119 --> 00:53:31,839
uh yes

00:53:28,400 --> 00:53:36,400
you could use appflow here to

00:53:31,839 --> 00:53:39,200
handle compiling your ios binary

00:53:36,400 --> 00:53:42,960
um as far as i know still to this day

00:53:39,200 --> 00:53:45,200
apple does not ship an sdk that is

00:53:42,960 --> 00:53:46,880
that you can run on a windows device

00:53:45,200 --> 00:53:50,400
because

00:53:46,880 --> 00:53:52,559
apple being apple um it's there it's

00:53:50,400 --> 00:53:56,240
their platform they control it

00:53:52,559 --> 00:53:59,760
but you could use appflow in this case

00:53:56,240 --> 00:53:59,760
to compile the app yourself

00:54:00,880 --> 00:54:05,040
um lance does capacitor have a plug-in

00:54:03,760 --> 00:54:08,400
for gps

00:54:05,040 --> 00:54:11,760
and tracking gps in the background

00:54:08,400 --> 00:54:15,760
um i don't know

00:54:11,760 --> 00:54:17,920
about background tracking uh for gps

00:54:15,760 --> 00:54:19,040
off the top of my head i would check out

00:54:17,920 --> 00:54:21,280
the capacitor

00:54:19,040 --> 00:54:22,240
community org there could be one in

00:54:21,280 --> 00:54:25,280
there

00:54:22,240 --> 00:54:27,920
i would also want to point out that uh

00:54:25,280 --> 00:54:30,720
background geolocation services are

00:54:27,920 --> 00:54:30,720
still a very

00:54:30,800 --> 00:54:34,240
what's the best way to say it uh iffy

00:54:33,599 --> 00:54:39,599
subject

00:54:34,240 --> 00:54:41,839
especially on ios they tend to

00:54:39,599 --> 00:54:42,960
only allow that for very very specific

00:54:41,839 --> 00:54:46,000
use cases

00:54:42,960 --> 00:54:48,880
so if you want that uh you're

00:54:46,000 --> 00:54:50,000
going to have to plead your case on why

00:54:48,880 --> 00:54:52,559
um

00:54:50,000 --> 00:54:54,400
why your app deserves that feature um

00:54:52,559 --> 00:54:57,119
privacy matters right we don't want to

00:54:54,400 --> 00:54:59,440
be tracked in the background

00:54:57,119 --> 00:55:01,200
um eric another question from eric is

00:54:59,440 --> 00:55:04,319
there something like this

00:55:01,200 --> 00:55:08,079
but for apple tv with angular

00:55:04,319 --> 00:55:10,720
off the top of my head i do not know um

00:55:08,079 --> 00:55:11,839
in theory angular's renderer is pretty

00:55:10,720 --> 00:55:13,839
abstract so you

00:55:11,839 --> 00:55:16,000
could create your own custom renderer

00:55:13,839 --> 00:55:16,480
for that but it's a bit beyond the scope

00:55:16,000 --> 00:55:20,880
for

00:55:16,480 --> 00:55:23,440
capacitor um and what it tries to do

00:55:20,880 --> 00:55:24,720
are there any plug-ins available for

00:55:23,440 --> 00:55:28,079
barcode scanning

00:55:24,720 --> 00:55:29,040
uh built-in not used are inbuilt not

00:55:28,079 --> 00:55:34,000
using the

00:55:29,040 --> 00:55:35,440
camera um if i'm understanding

00:55:34,000 --> 00:55:37,280
understanding this i think it's like a

00:55:35,440 --> 00:55:39,920
hardware attachment

00:55:37,280 --> 00:55:41,599
if you could just clarify in the on the

00:55:39,920 --> 00:55:45,359
q a that'd be great

00:55:41,599 --> 00:55:48,799
um i'm gonna assume that yes so hardware

00:55:45,359 --> 00:55:52,400
um at the moment

00:55:48,799 --> 00:55:54,480
i think we're talking with some uh

00:55:52,400 --> 00:55:56,799
some of the people who create uh

00:55:54,480 --> 00:55:59,680
hardware scanners as like a um

00:55:56,799 --> 00:56:01,040
an option for that uh so i don't have

00:55:59,680 --> 00:56:03,119
all the answers at the moment

00:56:01,040 --> 00:56:04,400
but we are aware that this is something

00:56:03,119 --> 00:56:07,040
people want

00:56:04,400 --> 00:56:08,079
um yeah and we're talking to people who

00:56:07,040 --> 00:56:09,839
who actually

00:56:08,079 --> 00:56:11,359
manufacture those so hopefully we'll

00:56:09,839 --> 00:56:14,480
have something to

00:56:11,359 --> 00:56:17,200
talk about there in the future

00:56:14,480 --> 00:56:19,599
um another question from guest without

00:56:17,200 --> 00:56:22,640
using ionic framework for the ionic cli

00:56:19,599 --> 00:56:23,200
can we use appflow and this live update

00:56:22,640 --> 00:56:26,720
feature

00:56:23,200 --> 00:56:30,079
with angular and capacitor alone yes

00:56:26,720 --> 00:56:33,280
um so all these features

00:56:30,079 --> 00:56:33,920
of appflow are ionic agnostic even

00:56:33,280 --> 00:56:36,319
though

00:56:33,920 --> 00:56:38,240
we're still very much tied to them so if

00:56:36,319 --> 00:56:40,480
you have just an angular and capacitor

00:56:38,240 --> 00:56:44,319
app and you would like to use

00:56:40,480 --> 00:56:46,559
um afflow in the lab deploy up features

00:56:44,319 --> 00:56:47,920
it's totally possible to do that without

00:56:46,559 --> 00:56:50,160
having to

00:56:47,920 --> 00:56:52,240
change anything aflo should have some

00:56:50,160 --> 00:56:54,960
documentation about this

00:56:52,240 --> 00:56:57,599
more or less it's just like committing

00:56:54,960 --> 00:56:59,680
code to version control

00:56:57,599 --> 00:57:01,280
and you just set the target to deploy to

00:56:59,680 --> 00:57:04,000
flow and then the

00:57:01,280 --> 00:57:05,680
uh capacitor app will read the updates

00:57:04,000 --> 00:57:09,599
and apply those to your app

00:57:05,680 --> 00:57:12,960
so nothing specific to ionic here

00:57:09,599 --> 00:57:16,079
um let's see is there any workaround for

00:57:12,960 --> 00:57:19,200
square payments not 100 sure

00:57:16,079 --> 00:57:22,559
what you mean there

00:57:19,200 --> 00:57:24,559
uh is there support for square

00:57:22,559 --> 00:57:26,160
uh free for for things like square

00:57:24,559 --> 00:57:27,119
payments i'm going to assume the

00:57:26,160 --> 00:57:30,160
hardware

00:57:27,119 --> 00:57:31,920
potentially like the little card reader

00:57:30,160 --> 00:57:33,680
that you can attach

00:57:31,920 --> 00:57:35,440
um not off the top of my head that i

00:57:33,680 --> 00:57:37,520
know of but we can

00:57:35,440 --> 00:57:39,119
always reach out and talk to them and

00:57:37,520 --> 00:57:43,599
see what they have

00:57:39,119 --> 00:57:47,359
for an sdk cool answered that one

00:57:43,599 --> 00:57:49,920
um i have a legacy

00:57:47,359 --> 00:57:50,799
solution that i used to build with phone

00:57:49,920 --> 00:57:53,920
get build

00:57:50,799 --> 00:57:55,520
do i need to install the cap and variate

00:57:53,920 --> 00:57:58,640
parts of the code or is there any

00:57:55,520 --> 00:57:59,359
my uh migration process for a smooth

00:57:58,640 --> 00:58:02,160
transition

00:57:59,359 --> 00:58:04,319
app flow cool yeah uh there is a

00:58:02,160 --> 00:58:07,760
transition process if you go to

00:58:04,319 --> 00:58:08,079
um if you go to appflow.com you should

00:58:07,760 --> 00:58:12,240
be

00:58:08,079 --> 00:58:14,079
or i think it's useappflow.io

00:58:12,240 --> 00:58:16,319
uh if you go to ionicframework.com you

00:58:14,079 --> 00:58:18,640
should see a dropdown for appflow

00:58:16,319 --> 00:58:20,720
we have that inside of our docs to show

00:58:18,640 --> 00:58:21,359
you uh how to migrate from phonegap

00:58:20,720 --> 00:58:24,559
build

00:58:21,359 --> 00:58:27,680
to appflow and cover all the details and

00:58:24,559 --> 00:58:29,760
if you run into any issues

00:58:27,680 --> 00:58:30,720
there's a little support feature in that

00:58:29,760 --> 00:58:33,680
flow to

00:58:30,720 --> 00:58:36,559
send a ticket to our support team they

00:58:33,680 --> 00:58:38,160
should be able to help you out

00:58:36,559 --> 00:58:39,760
is there any specific points that i

00:58:38,160 --> 00:58:42,960
should be aware of if i want to

00:58:39,760 --> 00:58:46,079
integrate a webgl library

00:58:42,960 --> 00:58:48,160
with capacitor again no

00:58:46,079 --> 00:58:50,000
you shouldn't really webgl is a web

00:58:48,160 --> 00:58:53,599
standard you're basically just

00:58:50,000 --> 00:58:55,440
rendering to a canvas on the dom

00:58:53,599 --> 00:58:57,280
and capacitor is all about the dom and

00:58:55,440 --> 00:59:00,720
being able to use your standard

00:58:57,280 --> 00:59:02,000
uh html and web app approaches so

00:59:00,720 --> 00:59:05,839
there shouldn't be anything you should

00:59:02,000 --> 00:59:05,839
be aware of it should just work

00:59:07,200 --> 00:59:10,480
are there any helpful tools in creating

00:59:09,760 --> 00:59:13,599
assets

00:59:10,480 --> 00:59:15,119
for your app i eat the icons and splash

00:59:13,599 --> 00:59:18,960
screen

00:59:15,119 --> 00:59:22,720
yes we have a tool uh

00:59:18,960 --> 00:59:26,559
unfortunately named cordova res

00:59:22,720 --> 00:59:30,839
you can sell it mpm npm install

00:59:26,559 --> 00:59:35,270
dash g cordova hyphen res

00:59:30,839 --> 00:59:38,389
um it is let's see

00:59:35,270 --> 00:59:38,389
[Music]

00:59:40,880 --> 00:59:47,760
yeah i'll send that to you um it's

00:59:43,760 --> 00:59:49,920
unfortunately named but it does have

00:59:47,760 --> 00:59:51,520
the ability to generate the assets and

00:59:49,920 --> 00:59:54,480
then copy them over

00:59:51,520 --> 00:59:56,000
so if you have like a standard icon file

00:59:54,480 --> 00:59:58,480
then a splash screen kind of template

00:59:56,000 --> 01:00:01,839
it'll generate all that for you

00:59:58,480 --> 01:00:05,040
and there is i think a dash

01:00:01,839 --> 01:00:06,000
no copy or no config flag that you can

01:00:05,040 --> 01:00:11,200
use to

01:00:06,000 --> 01:00:11,200
um for capacitor projects

01:00:11,520 --> 01:00:15,280
and then anonymous attendee does the

01:00:14,079 --> 01:00:17,920
capacitor

01:00:15,280 --> 01:00:18,559
does capacitor have plug-ins to convert

01:00:17,920 --> 01:00:22,000
the web

01:00:18,559 --> 01:00:26,240
local storage um

01:00:22,000 --> 01:00:27,680
i'm i'm assuming you mean if you have a

01:00:26,240 --> 01:00:29,760
web app and you want to

01:00:27,680 --> 01:00:31,119
access those features from the native

01:00:29,760 --> 01:00:34,400
app uh

01:00:31,119 --> 01:00:35,599
if not if that's the case no we actually

01:00:34,400 --> 01:00:38,319
don't because the

01:00:35,599 --> 01:00:39,040
web app and then the native app are

01:00:38,319 --> 01:00:42,480
siloed

01:00:39,040 --> 01:00:43,839
differently inside of the operating

01:00:42,480 --> 01:00:45,680
system so features that

01:00:43,839 --> 01:00:46,960
would exist or data that would have been

01:00:45,680 --> 01:00:49,119
stored in a web app

01:00:46,960 --> 01:00:50,319
you can't necessarily access them from

01:00:49,119 --> 01:00:52,480
the native app so

01:00:50,319 --> 01:00:53,680
that unfortunately would not be possible

01:00:52,480 --> 01:00:56,319
and that's a limitation

01:00:53,680 --> 01:00:57,599
on just the native platforms uh not

01:00:56,319 --> 01:01:03,520
necessarily the limitation

01:00:57,599 --> 01:01:06,640
on cordova so thanks for that question

01:01:03,520 --> 01:01:10,400
chat cool all right

01:01:06,640 --> 01:01:15,359
um i think that is all the questions so

01:01:10,400 --> 01:01:18,720
thank you all for the uh q a

01:01:15,359 --> 01:01:21,040
uh hopefully again if you have any uh

01:01:18,720 --> 01:01:22,319
questions that you can think of later

01:01:21,040 --> 01:01:24,720
ask them on a

01:01:22,319 --> 01:01:25,920
reach out on twitter i'm hardington i'm

01:01:24,720 --> 01:01:29,040
pretty uh

01:01:25,920 --> 01:01:32,160
pretty active on there uh

01:01:29,040 --> 01:01:35,200
but thank you all for attending

01:01:32,160 --> 01:01:46,240
apologize for the uh

01:01:35,200 --> 01:01:46,240

YouTube URL: https://www.youtube.com/watch?v=FsGdReS3hNw


