Title: Productivity Revolution: Angular Principles in Node | Kamil Mysliwiec
Publication date: 2019-05-04
Playlist: ng-conf 2019
Description: 
	Angular empowers us with a robust platform that simplifies structuring highly scalable and demanding applications. Nowadays, rapidly changing technologies force us to constantly learn new things. But, what if we could reuse our existing experience? Share language, design patterns, main principles? In this talk youâ€™ll learn how Nest can increase your productivity and how to start your journey to become a Full-Stack TypeScript developer with Angular background.

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:07,920 --> 00:00:11,170
[Music]

00:00:11,570 --> 00:00:17,190
so hi everyone hi ng-conf I'm really

00:00:15,570 --> 00:00:18,869
excited that you decided to be a part of

00:00:17,190 --> 00:00:20,699
this session even though we have so many

00:00:18,869 --> 00:00:24,029
great talks taking place at the same

00:00:20,699 --> 00:00:25,320
time somebody's never excited that today

00:00:24,029 --> 00:00:27,840
I'm gonna talk about productivity

00:00:25,320 --> 00:00:30,300
revolution more specifically about

00:00:27,840 --> 00:00:32,460
angular principles and know so how we

00:00:30,300 --> 00:00:36,030
can take advantage of our angular

00:00:32,460 --> 00:00:37,440
experience in nodejs before before

00:00:36,030 --> 00:00:40,530
diving into this topic I'm gonna quickly

00:00:37,440 --> 00:00:43,079
introduce myself my name is camel yeah

00:00:40,530 --> 00:00:45,239
that was that was great I'm a co-founder

00:00:43,079 --> 00:00:48,480
of Trillin IO the next level software

00:00:45,239 --> 00:00:50,280
counseling company and I'm probably

00:00:48,480 --> 00:00:52,289
primarily focused on the web related

00:00:50,280 --> 00:00:54,390
things you can find me on twitter using

00:00:52,289 --> 00:00:57,539
highlighted twitter handle and obviously

00:00:54,390 --> 00:00:59,010
on the github beyond regular day to day

00:00:57,539 --> 00:01:01,020
work I'm giving the value back to the

00:00:59,010 --> 00:01:03,510
community as an open-source contributor

00:01:01,020 --> 00:01:06,960
and the creator of nasty s which is the

00:01:03,510 --> 00:01:10,500
fastest-rising framework in 2018 for

00:01:06,960 --> 00:01:12,240
nodejs and nest is written entirely in

00:01:10,500 --> 00:01:14,100
typescript and is heavily inspired by

00:01:12,240 --> 00:01:16,890
angular hence that's the reason why I'm

00:01:14,100 --> 00:01:19,560
here today speaking in front of you in

00:01:16,890 --> 00:01:21,750
the last year we have noted almost 300%

00:01:19,560 --> 00:01:24,420
growth in the number of github stars

00:01:21,750 --> 00:01:26,700
living behind any other existing library

00:01:24,420 --> 00:01:30,570
all those famous la ones like express

00:01:26,700 --> 00:01:33,210
like Cora and happy GS for example and

00:01:30,570 --> 00:01:37,409
week ago we crossed 15 thousands of

00:01:33,210 --> 00:01:38,400
stars which is amazing anyway let's

00:01:37,409 --> 00:01:40,500
start with angular

00:01:38,400 --> 00:01:43,229
I suppose that everyone here is familiar

00:01:40,500 --> 00:01:47,130
with this technology and we love angular

00:01:43,229 --> 00:01:48,780
that's why we are here when looking

00:01:47,130 --> 00:01:51,540
through the official documentation we

00:01:48,780 --> 00:01:54,780
can find the following phrase angular is

00:01:51,540 --> 00:01:57,719
a platform what does it mean generally

00:01:54,780 --> 00:01:58,140
angular provides a lot of things out of

00:01:57,719 --> 00:01:59,909
the box

00:01:58,140 --> 00:02:02,130
we've got declarative templates

00:01:59,909 --> 00:02:04,070
dependency injection testing utilities

00:02:02,130 --> 00:02:07,770
CLI and so on and so on

00:02:04,070 --> 00:02:09,899
lots of useful stuff additionally

00:02:07,770 --> 00:02:11,849
angular combines best practices it

00:02:09,899 --> 00:02:13,120
integrates them to solve development

00:02:11,849 --> 00:02:15,400
challenges it

00:02:13,120 --> 00:02:17,500
built on top of few well-known design

00:02:15,400 --> 00:02:19,629
principles which in tune properly

00:02:17,500 --> 00:02:21,250
applied to our software simplifies the

00:02:19,629 --> 00:02:29,769
process of creating scalable and large

00:02:21,250 --> 00:02:32,230
systems but most importantly angular

00:02:29,769 --> 00:02:34,209
gives right abstractions these

00:02:32,230 --> 00:02:35,860
abstractions help us organize our code

00:02:34,209 --> 00:02:37,239
and distribute responsibilities across

00:02:35,860 --> 00:02:38,049
different building blocks in an

00:02:37,239 --> 00:02:41,170
efficient way

00:02:38,049 --> 00:02:42,790
a huge part of those abstractions are

00:02:41,170 --> 00:02:44,860
not limited only to the front-end

00:02:42,790 --> 00:02:47,109
development though they also feed any

00:02:44,860 --> 00:02:49,510
other type of application including

00:02:47,109 --> 00:02:50,620
service or applications and this is the

00:02:49,510 --> 00:02:53,140
moment when I would like to introduce

00:02:50,620 --> 00:02:54,640
NASA to you so before we started talking

00:02:53,140 --> 00:02:56,950
about nest I would like to ask you a

00:02:54,640 --> 00:02:59,290
question who has heard about nest

00:02:56,950 --> 00:03:01,450
already please raise your hand wow

00:02:59,290 --> 00:03:05,680
that's awesome like 50% of the audience

00:03:01,450 --> 00:03:08,500
so as we know typescript is a superset

00:03:05,680 --> 00:03:11,140
of JavaScript think of nest as a

00:03:08,500 --> 00:03:13,060
superset of node it's a framework for

00:03:11,140 --> 00:03:18,340
building services or applications in a

00:03:13,060 --> 00:03:21,880
very similar syntax as angular and and

00:03:18,340 --> 00:03:23,530
thus nest same as angular is the

00:03:21,880 --> 00:03:25,030
platform but in terms of back-end

00:03:23,530 --> 00:03:27,669
development at front-end development

00:03:25,030 --> 00:03:29,109
same as angular we are doing our best to

00:03:27,669 --> 00:03:30,910
empower developers and give them

00:03:29,109 --> 00:03:33,220
instruments to smoothly build

00:03:30,910 --> 00:03:35,310
progressive software what we strive to

00:03:33,220 --> 00:03:39,370
deliver is a kind of higher level of

00:03:35,310 --> 00:03:40,930
reusability so when no GS came up for

00:03:39,370 --> 00:03:43,030
the first time it was considered as an

00:03:40,930 --> 00:03:45,220
upstanding revolution regardless of the

00:03:43,030 --> 00:03:47,169
whole even driven architecture it was

00:03:45,220 --> 00:03:48,699
extraordinary because you could

00:03:47,169 --> 00:03:50,169
basically take the code that runs in

00:03:48,699 --> 00:03:50,709
your browser and executed locally in

00:03:50,169 --> 00:03:54,250
your machine

00:03:50,709 --> 00:03:56,620
right using just just no no I

00:03:54,250 --> 00:03:59,949
if the code was like platform agnostic

00:03:56,620 --> 00:04:03,970
and nest is trying to rise this raises

00:03:59,949 --> 00:04:05,799
ability on an even higher level first of

00:04:03,970 --> 00:04:08,470
all we talk about knowledge reusability

00:04:05,799 --> 00:04:10,480
nest is based on almost the same set of

00:04:08,470 --> 00:04:11,829
principles as angular and therefore you

00:04:10,480 --> 00:04:15,549
don't have to learn everything from

00:04:11,829 --> 00:04:17,919
scratch modularity dependency injection

00:04:15,549 --> 00:04:20,430
responsibility segregation decorators

00:04:17,919 --> 00:04:23,289
all this is present in nest as well

00:04:20,430 --> 00:04:26,490
another point is experience reusability

00:04:23,289 --> 00:04:28,349
nest is practically identical API and

00:04:26,490 --> 00:04:30,120
the places we believe that you have

00:04:28,349 --> 00:04:31,979
created lots of great applications in

00:04:30,120 --> 00:04:33,690
angular and it doesn't make sense to

00:04:31,979 --> 00:04:36,690
force you to learn new language new

00:04:33,690 --> 00:04:38,479
syntax new keywords new API right why

00:04:36,690 --> 00:04:41,430
not just reuse this knowledge already

00:04:38,479 --> 00:04:43,530
obtained already so therefore next API

00:04:41,430 --> 00:04:47,310
is trying to be as close as possible to

00:04:43,530 --> 00:04:48,810
the corresponding angular API regardless

00:04:47,310 --> 00:04:50,639
of the developer experience so the

00:04:48,810 --> 00:04:53,400
experience reusability knowledge for

00:04:50,639 --> 00:04:56,729
usability we talk about code reusability

00:04:53,400 --> 00:04:57,360
that's a very important point let's talk

00:04:56,729 --> 00:05:00,060
about that

00:04:57,360 --> 00:05:03,810
what can we share between frohnen and

00:05:00,060 --> 00:05:06,180
the backend first thing D do data

00:05:03,810 --> 00:05:08,400
transfer objects so every time when you

00:05:06,180 --> 00:05:09,659
have to transfer some data from your

00:05:08,400 --> 00:05:12,060
front-end application to the backend

00:05:09,659 --> 00:05:14,970
like in your post request for example

00:05:12,060 --> 00:05:18,150
it's like create post eto update post

00:05:14,970 --> 00:05:21,180
video I like I whatever like create cat

00:05:18,150 --> 00:05:23,789
video as well so this is an example this

00:05:21,180 --> 00:05:24,509
is this might be a angular service which

00:05:23,789 --> 00:05:26,970
has a matter

00:05:24,509 --> 00:05:29,729
create metal this matter takes the DTO

00:05:26,970 --> 00:05:32,599
as a parameter and then pass it down to

00:05:29,729 --> 00:05:36,630
the HTTP client to perform rest ap like

00:05:32,599 --> 00:05:42,690
HTTP requests to our REST API the same

00:05:36,630 --> 00:05:44,479
DTO can be used in next education just

00:05:42,690 --> 00:05:47,130
like that so you can take the same

00:05:44,479 --> 00:05:50,490
interface take the same class and share

00:05:47,130 --> 00:05:51,900
library for instance and you can use it

00:05:50,490 --> 00:05:53,250
at both sides you can use it in a

00:05:51,900 --> 00:05:55,650
front-end application and you can easily

00:05:53,250 --> 00:05:57,090
use it in your back-end application so

00:05:55,650 --> 00:05:58,889
basically every time when you update

00:05:57,090 --> 00:06:01,110
your code let's say back in theme update

00:05:58,889 --> 00:06:04,979
your curl of data interface you have

00:06:01,110 --> 00:06:06,419
immediate coherence between platforms

00:06:04,979 --> 00:06:08,669
right you no longer have to ask

00:06:06,419 --> 00:06:11,159
questions on slack for example hey did

00:06:08,669 --> 00:06:13,409
you update it did you update the entity

00:06:11,159 --> 00:06:16,219
because I'm getting errors you have

00:06:13,409 --> 00:06:19,710
immediate experience out-of-the-box

00:06:16,219 --> 00:06:22,159
the second thing interfaces like we have

00:06:19,710 --> 00:06:25,080
our entity and entity has few properties

00:06:22,159 --> 00:06:26,969
we can reuse the same class between this

00:06:25,080 --> 00:06:29,190
those two platforms like let's say post

00:06:26,969 --> 00:06:31,110
it has an identifier it has a title it

00:06:29,190 --> 00:06:33,990
has a description we can hold it and

00:06:31,110 --> 00:06:35,789
share it between platforms so here we

00:06:33,990 --> 00:06:38,070
have this angular service which returns

00:06:35,789 --> 00:06:40,080
an observable which wraps post entity

00:06:38,070 --> 00:06:43,409
the same interface can be

00:06:40,080 --> 00:06:45,720
unless an s side so we can just like

00:06:43,409 --> 00:06:48,060
return posts from our create endpoint

00:06:45,720 --> 00:06:49,979
and then if you change something if you

00:06:48,060 --> 00:06:51,659
add additional property it's going to be

00:06:49,979 --> 00:06:55,470
immediately available for front-end

00:06:51,659 --> 00:06:58,139
developers as well and the last thing

00:06:55,470 --> 00:06:59,699
services you can even share services you

00:06:58,139 --> 00:07:02,039
can share validation service you can

00:06:59,699 --> 00:07:03,900
share interceptors like let's say we

00:07:02,039 --> 00:07:07,530
have a base interceptor which wraps

00:07:03,900 --> 00:07:09,960
every response into data property and

00:07:07,530 --> 00:07:12,120
then you can share this keyword in a

00:07:09,960 --> 00:07:13,680
base interceptor create an angular

00:07:12,120 --> 00:07:15,659
interceptor that extends from this

00:07:13,680 --> 00:07:17,550
interceptor and an S interceptor that

00:07:15,659 --> 00:07:20,009
also extends from the same interceptor

00:07:17,550 --> 00:07:22,740
once you change the keyword is going to

00:07:20,009 --> 00:07:24,300
apply to both sides at once so you will

00:07:22,740 --> 00:07:26,969
no longer have like a breaking change

00:07:24,300 --> 00:07:29,699
made by the back end team is gonna be an

00:07:26,969 --> 00:07:31,770
immediate experience for you so how can

00:07:29,699 --> 00:07:33,900
we achieve that how can we create a mono

00:07:31,770 --> 00:07:35,699
repo set up the easiest solution would

00:07:33,900 --> 00:07:37,860
be to create a directory then

00:07:35,699 --> 00:07:40,349
initialized angular application using

00:07:37,860 --> 00:07:42,569
angular CLI and then scaffold Nats

00:07:40,349 --> 00:07:46,800
application using in SQLite right that's

00:07:42,569 --> 00:07:48,719
that does was fairly simple however if

00:07:46,800 --> 00:07:50,520
you are looking for more sophisticated

00:07:48,719 --> 00:07:52,169
solution and best solutions and best

00:07:50,520 --> 00:07:54,210
practices according to the mono repo

00:07:52,169 --> 00:07:55,500
development you can take advantage of

00:07:54,210 --> 00:07:57,779
angular console

00:07:55,500 --> 00:07:59,669
so basically angular console if you are

00:07:57,779 --> 00:08:01,710
using in our schematics right now it

00:07:59,669 --> 00:08:04,319
allows you to generate note application

00:08:01,710 --> 00:08:07,110
which by default is the next application

00:08:04,319 --> 00:08:09,029
with video within your mono repo like

00:08:07,110 --> 00:08:10,919
angular workspace so you can create

00:08:09,029 --> 00:08:12,900
multiple angular applications and

00:08:10,919 --> 00:08:15,650
multiple masked applications and share

00:08:12,900 --> 00:08:18,659
code between them which is amazing

00:08:15,650 --> 00:08:20,460
alright let's do a more examples and

00:08:18,659 --> 00:08:22,590
roll Nola's let's have a look at the API

00:08:20,460 --> 00:08:26,639
frameworks API we are going to start

00:08:22,590 --> 00:08:29,099
from building blocks so let's let's have

00:08:26,639 --> 00:08:30,930
a look at modules first of all and a

00:08:29,099 --> 00:08:33,750
higher level modules are used to

00:08:30,930 --> 00:08:36,180
organize our code and like um split

00:08:33,750 --> 00:08:38,820
features into logical units like we have

00:08:36,180 --> 00:08:40,769
a user small G we have posts module

00:08:38,820 --> 00:08:42,839
every nest as well as angular

00:08:40,769 --> 00:08:44,730
application has at least one module

00:08:42,839 --> 00:08:46,699
which is considerate as an root module

00:08:44,730 --> 00:08:48,959
used to prescribe an application

00:08:46,699 --> 00:08:51,149
specifically the modules metadata

00:08:48,959 --> 00:08:52,610
properties it groups a few essential

00:08:51,149 --> 00:08:54,110
elements for the module

00:08:52,610 --> 00:08:55,160
sake of simplicity I have emitted a

00:08:54,110 --> 00:08:57,110
couple of properties like an

00:08:55,160 --> 00:08:59,029
circumference here because they do not

00:08:57,110 --> 00:09:01,339
bring any relevant Holly in this context

00:08:59,029 --> 00:09:02,630
so the declarations property is just a

00:09:01,339 --> 00:09:04,690
list of declare upper classes we know

00:09:02,630 --> 00:09:06,890
about that is like components pipes

00:09:04,690 --> 00:09:09,649
directives and so on that belong to this

00:09:06,890 --> 00:09:11,029
module then we good providers and

00:09:09,649 --> 00:09:12,920
providers and instructions of the

00:09:11,029 --> 00:09:15,050
dependency injection system on how to

00:09:12,920 --> 00:09:17,720
obtain a value for dependency maybe a

00:09:15,050 --> 00:09:19,850
class may be a factory next property

00:09:17,720 --> 00:09:21,620
imports there's a list of modules that

00:09:19,850 --> 00:09:25,670
should be imported to this mode use a

00:09:21,620 --> 00:09:30,339
kind of API of the module and the last

00:09:25,670 --> 00:09:32,209
property exports it's not it's a list of

00:09:30,339 --> 00:09:34,160
declarations that should be available

00:09:32,209 --> 00:09:37,070
outside of the module it might be like a

00:09:34,160 --> 00:09:39,140
public pipe a public component and you

00:09:37,070 --> 00:09:43,100
can decide which components are private

00:09:39,140 --> 00:09:45,829
and which are public alright now we are

00:09:43,100 --> 00:09:47,529
going to switch to nest modules so we

00:09:45,829 --> 00:09:50,360
have to carry out several modifications

00:09:47,529 --> 00:09:52,130
let's start with declarations and nest

00:09:50,360 --> 00:09:55,519
we don't have such a notion of a

00:09:52,130 --> 00:09:59,060
template of a view there are no HTML

00:09:55,519 --> 00:10:00,709
files that user may interact with so we

00:09:59,060 --> 00:10:03,410
can get rid of declarations property

00:10:00,709 --> 00:10:05,570
however we still need something like an

00:10:03,410 --> 00:10:08,360
entry point to our system that user may

00:10:05,570 --> 00:10:10,459
use in order to like evaluate some

00:10:08,360 --> 00:10:14,060
business logic that sits behind this

00:10:10,459 --> 00:10:16,399
nest application inest we are calling

00:10:14,060 --> 00:10:18,320
them controllers basically controllers

00:10:16,399 --> 00:10:20,209
are responsible for handling incoming

00:10:18,320 --> 00:10:22,160
requests and returning responses to

00:10:20,209 --> 00:10:24,709
clients right the controller might be a

00:10:22,160 --> 00:10:28,070
like entry point considered as on micro

00:10:24,709 --> 00:10:31,630
serves maybe RS API it might be deucey

00:10:28,070 --> 00:10:33,949
deucey handler over some transfer layer

00:10:31,630 --> 00:10:36,380
providers remains the same so we have

00:10:33,949 --> 00:10:39,199
classes injectable decorators factories

00:10:36,380 --> 00:10:41,779
values imports again the same nothing

00:10:39,199 --> 00:10:44,540
has changed list of modules that has to

00:10:41,779 --> 00:10:46,930
be like that actually like define the

00:10:44,540 --> 00:10:49,699
API of the module and the last property

00:10:46,930 --> 00:10:52,760
experts and let's stop here for a moment

00:10:49,699 --> 00:10:54,829
why do we need exports if we don't have

00:10:52,760 --> 00:10:57,560
declarations anymore right

00:10:54,829 --> 00:11:01,339
so the reason is that providers in nest

00:10:57,560 --> 00:11:03,079
are private by default so this is a very

00:11:01,339 --> 00:11:04,190
important thing to keep in mind like

00:11:03,079 --> 00:11:06,950
every provide

00:11:04,190 --> 00:11:09,230
is encapsulated inside a module unless

00:11:06,950 --> 00:11:13,070
you explicitly export it so then it's

00:11:09,230 --> 00:11:14,060
available for everyone all right let's

00:11:13,070 --> 00:11:16,010
have a look at the code

00:11:14,060 --> 00:11:18,160
this is a typical angular module is a

00:11:16,010 --> 00:11:20,960
class decorated with ng module decorator

00:11:18,160 --> 00:11:23,930
since we would like to like transform

00:11:20,960 --> 00:11:26,750
this module into nest module we have to

00:11:23,930 --> 00:11:28,400
like change a couple of things first of

00:11:26,750 --> 00:11:32,180
all we must change the decorator because

00:11:28,400 --> 00:11:35,210
we don't have a new module ng traffic is

00:11:32,180 --> 00:11:38,180
no longer required next is using module

00:11:35,210 --> 00:11:40,040
decorator to define modules then the

00:11:38,180 --> 00:11:43,250
second thing declarations as I said

00:11:40,040 --> 00:11:45,410
before declarations are useless instead

00:11:43,250 --> 00:11:47,000
we need a way to define controllers so

00:11:45,410 --> 00:11:49,520
we can quickly change declarations

00:11:47,000 --> 00:11:52,940
property to controverse property and

00:11:49,520 --> 00:11:56,420
that's it this is the next module quite

00:11:52,940 --> 00:11:58,640
similar isn't it so the second building

00:11:56,420 --> 00:12:00,140
block is a provider as I said before

00:11:58,640 --> 00:12:01,970
provider is an instruction to the

00:12:00,140 --> 00:12:03,830
dependency injection system on how to

00:12:01,970 --> 00:12:05,660
obtain a value for dependency and for

00:12:03,830 --> 00:12:08,270
the sake of simplicity I'm going to show

00:12:05,660 --> 00:12:10,550
only class providers but obviously we

00:12:08,270 --> 00:12:14,780
also provide a way to you know create a

00:12:10,550 --> 00:12:15,490
factory to bind a value directly and so

00:12:14,780 --> 00:12:19,430
on and so on

00:12:15,490 --> 00:12:22,520
anyway let's dive into the code so this

00:12:19,430 --> 00:12:24,650
is a typical angular provider it's a cat

00:12:22,520 --> 00:12:26,930
service with injectable decorator on top

00:12:24,650 --> 00:12:28,490
of there and HTTP services uh that

00:12:26,930 --> 00:12:31,250
require dependency that should be

00:12:28,490 --> 00:12:33,950
eventually injected to constructor since

00:12:31,250 --> 00:12:36,920
angular 6 I believe we can register

00:12:33,950 --> 00:12:38,870
providers using provided in attribute

00:12:36,920 --> 00:12:41,600
these providers are tree shakable which

00:12:38,870 --> 00:12:43,550
enables dead code elimination that code

00:12:41,600 --> 00:12:45,590
animation and lead to a smaller bundle

00:12:43,550 --> 00:12:47,780
however in service of applications we

00:12:45,590 --> 00:12:49,970
don't care about bundle that much like

00:12:47,780 --> 00:12:53,060
it might be useful in many cases and its

00:12:49,970 --> 00:12:55,700
service for example to make your code

00:12:53,060 --> 00:12:59,180
start faster but normally it's not that

00:12:55,700 --> 00:13:02,960
crucial so we can remove this property

00:12:59,180 --> 00:13:06,200
and this is some nice provider so like

00:13:02,960 --> 00:13:10,010
totally equivalent to this one available

00:13:06,200 --> 00:13:12,290
in angular third element darts in

00:13:10,010 --> 00:13:14,270
angular guards control the route or

00:13:12,290 --> 00:13:16,580
behavior you can easily determine

00:13:14,270 --> 00:13:17,800
whether the navigation process should

00:13:16,580 --> 00:13:20,569
continue or not

00:13:17,800 --> 00:13:22,399
an angular provides us with a set of

00:13:20,569 --> 00:13:25,790
useful decorators I can activate can

00:13:22,399 --> 00:13:29,329
deactivate can activate child so in

00:13:25,790 --> 00:13:32,259
order to allow user to proceed to some

00:13:29,329 --> 00:13:36,050
root until in case of can activate guard

00:13:32,259 --> 00:13:38,360
every guard would have to return to

00:13:36,050 --> 00:13:42,470
value for example authentication guard

00:13:38,360 --> 00:13:45,019
permissions God and so on and so on okay

00:13:42,470 --> 00:13:47,269
let's switch to the server side now user

00:13:45,019 --> 00:13:50,149
does not fit here that's the first thing

00:13:47,269 --> 00:13:51,529
but we have a notion of our request so

00:13:50,149 --> 00:13:53,269
we have an incoming request to our

00:13:51,529 --> 00:13:56,480
application and we have to decide

00:13:53,269 --> 00:13:59,170
whether this request should be able to

00:13:56,480 --> 00:14:02,089
proceed to set an end point that route

00:13:59,170 --> 00:14:05,300
so before the Rica's may hit this end

00:14:02,089 --> 00:14:08,060
point every guard should check let's say

00:14:05,300 --> 00:14:10,639
like of cedars for example or maybe

00:14:08,060 --> 00:14:13,490
permissions of the user and then the

00:14:10,639 --> 00:14:19,779
painting on those values decide can you

00:14:13,490 --> 00:14:21,529
proceed or not okay API that's the

00:14:19,779 --> 00:14:23,569
authentication guard typical

00:14:21,529 --> 00:14:25,430
authentication guard in Engler it

00:14:23,569 --> 00:14:28,309
implements cannot be very interface it

00:14:25,430 --> 00:14:30,680
has an injectable decorator and then we

00:14:28,309 --> 00:14:32,750
have obviously can activate merit and

00:14:30,680 --> 00:14:34,699
they can activate has a list of

00:14:32,750 --> 00:14:36,740
parameters respectively activated

00:14:34,699 --> 00:14:38,660
snapshot and Rooter stage snapshot

00:14:36,740 --> 00:14:41,149
however in service or applications we

00:14:38,660 --> 00:14:42,980
need we don't need both of them instead

00:14:41,149 --> 00:14:44,990
we need something that supplies us with

00:14:42,980 --> 00:14:47,209
information about the incoming requests

00:14:44,990 --> 00:14:49,759
hands in nest applications we have

00:14:47,209 --> 00:14:52,040
execution context execution context

00:14:49,759 --> 00:14:55,399
contains informations about requests

00:14:52,040 --> 00:14:57,139
contains information about madam that is

00:14:55,399 --> 00:15:00,110
going to be evaluated once we return

00:14:57,139 --> 00:15:02,959
true value so we can create reusable

00:15:00,110 --> 00:15:04,819
guards and depending on the routes apply

00:15:02,959 --> 00:15:06,350
different permissions for example and

00:15:04,819 --> 00:15:09,290
the last element that I'm going to talk

00:15:06,350 --> 00:15:11,959
about our interceptors interceptors

00:15:09,290 --> 00:15:14,990
allows you to allow you to inspect and

00:15:11,959 --> 00:15:17,449
transform HTTP requests from your

00:15:14,990 --> 00:15:21,319
application to serve the same

00:15:17,449 --> 00:15:23,720
interceptors may enhance incoming

00:15:21,319 --> 00:15:26,750
response to you from your service or

00:15:23,720 --> 00:15:27,679
application they way back so let's have

00:15:26,750 --> 00:15:30,620
a look at the diagram

00:15:27,679 --> 00:15:31,730
client performs our request to the

00:15:30,620 --> 00:15:34,340
remote research

00:15:31,730 --> 00:15:37,130
the remote response with an answer let's

00:15:34,340 --> 00:15:39,680
say a JSON payload and interceptors made

00:15:37,130 --> 00:15:42,950
in-house outgoing requests as well as

00:15:39,680 --> 00:15:45,290
incoming requests so that was angular

00:15:42,950 --> 00:15:46,940
part let's have a look at the next part

00:15:45,290 --> 00:15:49,790
right now we are at the opposite side of

00:15:46,940 --> 00:15:52,100
the diagram think about it like a flip

00:15:49,790 --> 00:15:55,400
side of a coin the flow is almost the

00:15:52,100 --> 00:15:58,250
same we have our request which goes to

00:15:55,400 --> 00:16:00,740
the handler so the client performs I say

00:15:58,250 --> 00:16:03,050
angular application performs our request

00:16:00,740 --> 00:16:05,360
we need to reply send our response from

00:16:03,050 --> 00:16:07,730
our controller and interceptors may

00:16:05,360 --> 00:16:10,160
enhance incoming requests not outgoing

00:16:07,730 --> 00:16:11,690
requests and outgoing response not

00:16:10,160 --> 00:16:15,440
incoming response so that's the

00:16:11,690 --> 00:16:18,050
difference all right I could talk about

00:16:15,440 --> 00:16:19,460
many different elements like pipes we

00:16:18,050 --> 00:16:23,240
also have pipes I could talk about

00:16:19,460 --> 00:16:24,980
practical swagger CLI a lot we have many

00:16:23,240 --> 00:16:27,620
different things micro services but we

00:16:24,980 --> 00:16:30,310
don't have enough time for that so I'm

00:16:27,620 --> 00:16:33,770
gonna move to the most important parts

00:16:30,310 --> 00:16:36,260
just you know do not make it too long so

00:16:33,770 --> 00:16:38,450
let's do a small recap in fact it all

00:16:36,260 --> 00:16:39,920
boils down to reusability in a few

00:16:38,450 --> 00:16:42,590
minutes developer with angular

00:16:39,920 --> 00:16:45,410
experience is able to start walking with

00:16:42,590 --> 00:16:47,150
nasty understanding the majority of the

00:16:45,410 --> 00:16:48,590
most relevant features of the framework

00:16:47,150 --> 00:16:49,970
like more juice providers got

00:16:48,590 --> 00:16:52,790
interceptors and so on and so on

00:16:49,970 --> 00:16:55,010
knowledge of the API gives huge benefits

00:16:52,790 --> 00:16:56,660
and allows you to rapidly enter the

00:16:55,010 --> 00:16:58,670
world of service or applications with a

00:16:56,660 --> 00:17:02,210
minimum effort but I haven't said

00:16:58,670 --> 00:17:04,310
everything yet so for us developer

00:17:02,210 --> 00:17:06,590
workup is also very important when

00:17:04,310 --> 00:17:09,620
working on a large product and that's we

00:17:06,590 --> 00:17:11,750
have created nests Allah and Ness Salah

00:17:09,620 --> 00:17:13,970
is heavily inspired by angular as well

00:17:11,750 --> 00:17:16,370
it's not as powerful yet but exposes a

00:17:13,970 --> 00:17:17,840
few essential Commons like nest new to

00:17:16,370 --> 00:17:19,970
quickly scaffold your project or

00:17:17,840 --> 00:17:22,640
next-gen array to generate building

00:17:19,970 --> 00:17:25,520
blocks easily from your common lie come

00:17:22,640 --> 00:17:27,950
online and guess what this nest July is

00:17:25,520 --> 00:17:31,340
based on angular excellent angular

00:17:27,950 --> 00:17:33,590
schematics and nest has a dedicated

00:17:31,340 --> 00:17:36,170
nested schematics package which are

00:17:33,590 --> 00:17:38,060
which is used by the nest CLI underneath

00:17:36,170 --> 00:17:40,220
so you can easily create your own

00:17:38,060 --> 00:17:42,170
schematics in your organization if you

00:17:40,220 --> 00:17:44,580
want to also you can use those

00:17:42,170 --> 00:17:47,700
schematics natural schematics we

00:17:44,580 --> 00:17:50,340
livin at ng Co lie so you can use like

00:17:47,700 --> 00:17:52,649
ng generate nastiest schematics and

00:17:50,340 --> 00:17:55,799
generate a provider using Ness c'mon

00:17:52,649 --> 00:17:58,260
it's not angular schematics okay before

00:17:55,799 --> 00:17:59,940
the end of this talk I would like to

00:17:58,260 --> 00:18:01,620
share a few latest announcements so

00:17:59,940 --> 00:18:04,230
first of all we've been getting a lot of

00:18:01,620 --> 00:18:06,240
questions how can I serve my angular

00:18:04,230 --> 00:18:08,460
application through massed applications

00:18:06,240 --> 00:18:12,210
so think about nest as a server that

00:18:08,460 --> 00:18:14,730
serves angular application so what you

00:18:12,210 --> 00:18:17,370
can do now you can use nest application

00:18:14,730 --> 00:18:19,919
you can generate angular application and

00:18:17,370 --> 00:18:22,049
it's gonna like a fool the whole angular

00:18:19,919 --> 00:18:24,539
application within nest application and

00:18:22,049 --> 00:18:26,700
automatically create a module that is

00:18:24,539 --> 00:18:30,419
going to serve this application through

00:18:26,700 --> 00:18:32,880
node application then easily once you

00:18:30,419 --> 00:18:35,279
like evaluate this single common you can

00:18:32,880 --> 00:18:37,440
deploy your application to Heroku for

00:18:35,279 --> 00:18:40,250
instance without any boilerplate code

00:18:37,440 --> 00:18:43,380
like Jeff everything out of the box and

00:18:40,250 --> 00:18:46,320
this is how the import statement looks

00:18:43,380 --> 00:18:48,840
like this is nest module not angular

00:18:46,320 --> 00:18:50,789
module and nest module imports angular

00:18:48,840 --> 00:18:53,490
module apply some configuration

00:18:50,789 --> 00:18:55,740
properties and that's it nothing else

00:18:53,490 --> 00:18:59,389
and it works well with the FASTA file

00:18:55,740 --> 00:19:03,450
and express the second thing angular

00:18:59,389 --> 00:19:05,639
universal so again you and angular

00:19:03,450 --> 00:19:08,130
universal is amazing because it allows

00:19:05,639 --> 00:19:11,429
you to have a great SEO you have a

00:19:08,130 --> 00:19:13,769
better performance right but it's

00:19:11,429 --> 00:19:15,840
slightly confusing like in the official

00:19:13,769 --> 00:19:17,880
angular documentation you have this huge

00:19:15,840 --> 00:19:20,820
boilerplate code of written and Express

00:19:17,880 --> 00:19:22,320
it's not very understandable for people

00:19:20,820 --> 00:19:24,990
coming from the phone at work running

00:19:22,320 --> 00:19:27,179
water so what you can do with nest right

00:19:24,990 --> 00:19:29,880
now let's say you can create a new

00:19:27,179 --> 00:19:32,340
angular application let's say service I

00:19:29,880 --> 00:19:36,480
render an application and then you can

00:19:32,340 --> 00:19:39,870
call ng odd nastiest ng Universal and

00:19:36,480 --> 00:19:42,330
that's it you have an angular universal

00:19:39,870 --> 00:19:46,260
application that is using Ness to serve

00:19:42,330 --> 00:19:51,510
your angular app without any boilerplate

00:19:46,260 --> 00:19:52,950
code and how it looks like so this is at

00:19:51,510 --> 00:19:54,720
the right side you have an in your

00:19:52,950 --> 00:19:56,210
application you can change something

00:19:54,720 --> 00:19:58,370
within the component

00:19:56,210 --> 00:20:00,950
it's gonna live without your server-side

00:19:58,370 --> 00:20:04,310
render an application immediately within

00:20:00,950 --> 00:20:06,560
seconds like you can now create silver

00:20:04,310 --> 00:20:08,570
surrender and apps with this with the

00:20:06,560 --> 00:20:10,370
same experience as you would create a

00:20:08,570 --> 00:20:11,330
normal application and those

00:20:10,370 --> 00:20:12,680
applications

00:20:11,330 --> 00:20:15,140
there's application this angular

00:20:12,680 --> 00:20:17,600
application is surf to nest which means

00:20:15,140 --> 00:20:19,640
that you can also bet your api at the

00:20:17,600 --> 00:20:21,680
same time once you change something in

00:20:19,640 --> 00:20:23,810
the api is going to reload your angular

00:20:21,680 --> 00:20:26,030
application automatically refresh the

00:20:23,810 --> 00:20:31,570
browser service i ran their angular

00:20:26,030 --> 00:20:34,400
application and fetch the day again ok

00:20:31,570 --> 00:20:36,500
lastly i would like to say that nest is

00:20:34,400 --> 00:20:38,720
open source meaning we are totally

00:20:36,500 --> 00:20:40,640
driven by the community and therefore i

00:20:38,720 --> 00:20:42,920
encourage everyone who shares similar

00:20:40,640 --> 00:20:45,350
ideas who loves angular to join this

00:20:42,920 --> 00:20:47,390
little revolution we would love for you

00:20:45,350 --> 00:20:50,300
to contribute to mass and help it make

00:20:47,390 --> 00:20:51,860
it even better than its today and there

00:20:50,300 --> 00:20:54,200
are a couple of companies and more than

00:20:51,860 --> 00:20:56,540
100 people who decided to support us

00:20:54,200 --> 00:21:00,230
with their donations already a big thank

00:20:56,540 --> 00:21:03,320
you to all of them also if you're

00:21:00,230 --> 00:21:07,130
looking for official naseous consulting

00:21:03,320 --> 00:21:09,230
reaches tralana yo which is an official

00:21:07,130 --> 00:21:11,420
nazi s consultants or angular consulting

00:21:09,230 --> 00:21:14,810
company let us know soon as email chat

00:21:11,420 --> 00:21:20,240
with us our goal is to help elevate to

00:21:14,810 --> 00:21:23,680
elevate teams so yeah so thank you for

00:21:20,240 --> 00:21:23,680
attention thank you for having me

00:21:33,840 --> 00:21:40,449
[Music]

00:21:46,050 --> 00:21:48,110

YouTube URL: https://www.youtube.com/watch?v=RSIX4Olo2Vg


