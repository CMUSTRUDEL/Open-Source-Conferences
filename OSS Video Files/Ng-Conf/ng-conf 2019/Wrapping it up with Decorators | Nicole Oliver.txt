Title: Wrapping it up with Decorators | Nicole Oliver
Publication date: 2019-05-07
Playlist: ng-conf 2019
Description: 
	As Angular developers we use decorators every day — from class decorators such as @Component, @Module, and @Directive, to property decorators like @Input and @Output. These little accessories to our code can be powerful mechanisms for keeping our applications simple and easy to understand. Let’s peek at how the core Angular decorators bring our code to life, and use that as a springboard for a discussion about creating our own magical wrappers in TypeScript.

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:07,920 --> 00:00:11,170
[Music]

00:00:11,780 --> 00:00:23,970
hi everyone thank you so much all right

00:00:20,720 --> 00:00:25,099
all right so isn't it so much fun to

00:00:23,970 --> 00:00:27,240
hear about all these exciting

00:00:25,099 --> 00:00:29,250
experimental things that may be coming

00:00:27,240 --> 00:00:31,349
to angular this is like one of my

00:00:29,250 --> 00:00:33,230
favorite parts of ng-conf getting to

00:00:31,349 --> 00:00:35,969
hear about all this exciting technology

00:00:33,230 --> 00:00:37,890
but at the same time I think it is

00:00:35,969 --> 00:00:41,160
equally important to take the time to

00:00:37,890 --> 00:00:43,200
focus on fundamentals and to that end I

00:00:41,160 --> 00:00:46,770
am going to be talking about typescript

00:00:43,200 --> 00:00:48,809
decorators today now this is a topic

00:00:46,770 --> 00:00:50,719
that I think that everybody has at least

00:00:48,809 --> 00:00:54,510
a little bit of familiarity with right

00:00:50,719 --> 00:00:58,410
we all use decorators in our work in

00:00:54,510 --> 00:01:01,109
angular but I'm guessing that many of us

00:00:58,410 --> 00:01:03,989
have not had the opportunity to sit down

00:01:01,109 --> 00:01:06,000
and take a look at how decorators work

00:01:03,989 --> 00:01:12,299
underneath the hood so that's what we're

00:01:06,000 --> 00:01:13,409
going to be doing today so we're going

00:01:12,299 --> 00:01:14,369
to be starting off with something

00:01:13,409 --> 00:01:16,860
familiar here

00:01:14,369 --> 00:01:19,680
this is our component decorator from

00:01:16,860 --> 00:01:24,030
angular comes from angular core so we

00:01:19,680 --> 00:01:27,270
import it in and we use it to mark a

00:01:24,030 --> 00:01:30,270
class as a component class so here we

00:01:27,270 --> 00:01:33,450
are passing in some metadata about how

00:01:30,270 --> 00:01:35,670
we want our component to act and look we

00:01:33,450 --> 00:01:38,040
tell angular what selector we want to

00:01:35,670 --> 00:01:41,009
use for our component where to find our

00:01:38,040 --> 00:01:43,369
template and style files maybe what

00:01:41,009 --> 00:01:45,689
change detection strategy we want to use

00:01:43,369 --> 00:01:47,850
and then we wrap that all up in an

00:01:45,689 --> 00:01:51,720
object and we pass it into our component

00:01:47,850 --> 00:01:52,890
decorator now how do we know that this

00:01:51,720 --> 00:01:55,470
is a decorator

00:01:52,890 --> 00:01:58,500
well the tell-tale sign is that it's

00:01:55,470 --> 00:02:00,570
prefixed with an @ symbol and then we

00:01:58,500 --> 00:02:03,540
have the name of our decorator component

00:02:00,570 --> 00:02:05,250
and we may be passing some arguments

00:02:03,540 --> 00:02:09,030
into the parentheses after that and

00:02:05,250 --> 00:02:10,800
finally it spits placed on top of or in

00:02:09,030 --> 00:02:14,629
front of whatever we're decorating in

00:02:10,800 --> 00:02:14,629
this case our app component

00:02:16,340 --> 00:02:22,530
so what are some interesting use cases

00:02:19,230 --> 00:02:24,510
for why we want to create a decorator of

00:02:22,530 --> 00:02:28,050
our own a custom decorator in our

00:02:24,510 --> 00:02:30,930
application well we could use decorators

00:02:28,050 --> 00:02:33,360
to configure property descriptors which

00:02:30,930 --> 00:02:36,810
gives us fine-grained control over our

00:02:33,360 --> 00:02:39,600
object properties we could wrap and

00:02:36,810 --> 00:02:43,440
apply useful lodash utilities like memo

00:02:39,600 --> 00:02:46,110
eyes or debounce or throttle or we could

00:02:43,440 --> 00:02:48,180
enforce a required parameter throwing an

00:02:46,110 --> 00:02:51,600
error if that parameter is not passed in

00:02:48,180 --> 00:02:53,700
and all of these things can be done in a

00:02:51,600 --> 00:02:56,790
clean and easy to understand fashion

00:02:53,700 --> 00:02:59,760
which is the real win here so now that

00:02:56,790 --> 00:03:01,590
we've seen some examples let's take a

00:02:59,760 --> 00:03:06,780
look at how we would actually implement

00:03:01,590 --> 00:03:08,880
a decorator of our own first thing we

00:03:06,780 --> 00:03:11,250
want to do is we do when we're writing

00:03:08,880 --> 00:03:14,400
any code is figure out why we want to

00:03:11,250 --> 00:03:16,800
use this decorator so my purpose here is

00:03:14,400 --> 00:03:20,489
I want to create a decorator that's not

00:03:16,800 --> 00:03:22,350
configurable so I just want to put it on

00:03:20,489 --> 00:03:24,660
top of the method that I'm decorating

00:03:22,350 --> 00:03:27,630
not passing any arguments into it and

00:03:24,660 --> 00:03:30,030
this decorator is going to every time

00:03:27,630 --> 00:03:32,310
that method is called it's going to

00:03:30,030 --> 00:03:34,530
announce what method was called the

00:03:32,310 --> 00:03:37,320
class that it was on and any arguments

00:03:34,530 --> 00:03:40,140
that were passed into it so as an

00:03:37,320 --> 00:03:42,989
example a piece of code here I have a

00:03:40,140 --> 00:03:46,440
planet class and my planet class has a

00:03:42,989 --> 00:03:49,260
method greet my greet method takes a

00:03:46,440 --> 00:03:52,470
couple of arguments and it just console

00:03:49,260 --> 00:03:54,690
logs out a greeting for me I'm going to

00:03:52,470 --> 00:03:57,060
instantiate my planet class and then

00:03:54,690 --> 00:03:59,640
I'll call Mars dot greet and a greeting

00:03:57,060 --> 00:04:03,209
as an argument welcome to and I'm going

00:03:59,640 --> 00:04:07,130
to say it loud true so what when we run

00:04:03,209 --> 00:04:09,390
this code should we see in our output

00:04:07,130 --> 00:04:12,540
this is the output that we're expecting

00:04:09,390 --> 00:04:17,850
down below here first thing on line one

00:04:12,540 --> 00:04:20,370
of the output is our decorator what is

00:04:17,850 --> 00:04:23,400
produced by our decorator says calling

00:04:20,370 --> 00:04:25,560
planet greet with our argument map and

00:04:23,400 --> 00:04:26,030
then we're going to actually run our

00:04:25,560 --> 00:04:28,580
message

00:04:26,030 --> 00:04:33,710
so it'll say welcome to Mars so how are

00:04:28,580 --> 00:04:36,560
we going to build this decorator here we

00:04:33,710 --> 00:04:38,210
have our decorator definition the part

00:04:36,560 --> 00:04:40,040
that's highlighted here is our decorator

00:04:38,210 --> 00:04:42,500
rapper first thing that you're going to

00:04:40,040 --> 00:04:44,270
notice is that it's just a function we

00:04:42,500 --> 00:04:46,820
don't have any particularly special

00:04:44,270 --> 00:04:50,000
syntax here we're just defining a

00:04:46,820 --> 00:04:52,310
function with a particular signature so

00:04:50,000 --> 00:04:54,920
because we are dealing with a method

00:04:52,310 --> 00:04:57,380
decorator here we are passing in three

00:04:54,920 --> 00:05:00,919
arguments the first one is the target

00:04:57,380 --> 00:05:03,260
that is our planet class and the second

00:05:00,919 --> 00:05:05,600
one is a string that represents the name

00:05:03,260 --> 00:05:08,510
of our method that's going to be greet

00:05:05,600 --> 00:05:10,970
in our example and the final thing is

00:05:08,510 --> 00:05:15,230
our descriptor and that is some metadata

00:05:10,970 --> 00:05:17,060
about our method and for the purposes of

00:05:15,230 --> 00:05:19,100
this decorator we can think about our

00:05:17,060 --> 00:05:22,010
descriptor as a way that we're going to

00:05:19,100 --> 00:05:26,150
gain access to our method so that we can

00:05:22,010 --> 00:05:29,000
actually manipulate it a little bit in

00:05:26,150 --> 00:05:31,700
the body of our decorator first thing

00:05:29,000 --> 00:05:34,040
we're going to do is store our original

00:05:31,700 --> 00:05:36,950
method and then we're going to replace

00:05:34,040 --> 00:05:39,500
it with a wrapper function that wrapper

00:05:36,950 --> 00:05:42,140
function is going to take a note of the

00:05:39,500 --> 00:05:44,360
name of the class and then stringify the

00:05:42,140 --> 00:05:48,169
arguments and then it's going to call

00:05:44,360 --> 00:05:51,560
console.log and say calling a planet

00:05:48,169 --> 00:05:53,570
greet with our argument map the final

00:05:51,560 --> 00:05:55,610
thing we need to do with this decorator

00:05:53,570 --> 00:05:58,960
is make sure we call our original method

00:05:55,610 --> 00:06:01,450
so we're using a ply to apply the

00:05:58,960 --> 00:06:04,520
arguments to our original method and

00:06:01,450 --> 00:06:06,110
then we're going to return the results

00:06:04,520 --> 00:06:08,630
and return the descriptor just in case

00:06:06,110 --> 00:06:11,000
we need to use those or access them

00:06:08,630 --> 00:06:12,800
somewhere down the line and an

00:06:11,000 --> 00:06:15,590
interesting thing to note here is that

00:06:12,800 --> 00:06:17,900
this is kind of a wrapper right and

00:06:15,590 --> 00:06:21,260
wrappers are actually a pretty common

00:06:17,900 --> 00:06:23,690
pattern for method decorators oftentimes

00:06:21,260 --> 00:06:26,690
what we want to do is add some logic to

00:06:23,690 --> 00:06:29,180
the top or the bottom of the method and

00:06:26,690 --> 00:06:31,130
so we do that and that would be an

00:06:29,180 --> 00:06:32,750
example of like how you would create a

00:06:31,130 --> 00:06:35,390
timing decorator or something that would

00:06:32,750 --> 00:06:35,860
time a function or use throttle or D

00:06:35,390 --> 00:06:38,370
bounce

00:06:35,860 --> 00:06:40,770
[Music]

00:06:38,370 --> 00:06:42,960
cool so now that we've taken a look at

00:06:40,770 --> 00:06:45,210
how we implement them let's take a step

00:06:42,960 --> 00:06:46,800
back and think about what typescript

00:06:45,210 --> 00:06:49,830
decorators actually are and get a

00:06:46,800 --> 00:06:52,199
definition in here and we can say that

00:06:49,830 --> 00:06:55,830
typescript decorators are a way to

00:06:52,199 --> 00:06:58,830
observe modify and replace class

00:06:55,830 --> 00:07:02,010
declarations and members so we can apply

00:06:58,830 --> 00:07:05,790
decorators in typescript to classes

00:07:02,010 --> 00:07:08,190
properties methods accessors such as

00:07:05,790 --> 00:07:09,960
gettin set and parameters like

00:07:08,190 --> 00:07:15,120
constructor arguments or method

00:07:09,960 --> 00:07:18,120
arguments and if we want to get even

00:07:15,120 --> 00:07:20,720
more abstract here we can say that

00:07:18,120 --> 00:07:23,460
decorators are a way to provide

00:07:20,720 --> 00:07:27,479
annotations and a metaprogramming syntax

00:07:23,460 --> 00:07:30,210
to classes and class members now what

00:07:27,479 --> 00:07:31,770
does that mean this is a definition

00:07:30,210 --> 00:07:34,830
straight out of the typescript

00:07:31,770 --> 00:07:37,289
documentation and what is really getting

00:07:34,830 --> 00:07:40,500
at is that decorators are a way that we

00:07:37,289 --> 00:07:43,530
can describe our data so think back to

00:07:40,500 --> 00:07:45,120
the first example the component class or

00:07:43,530 --> 00:07:47,820
the excuse me the component decorator

00:07:45,120 --> 00:07:49,620
that we saw earlier using the component

00:07:47,820 --> 00:07:51,810
decorator we were describing our

00:07:49,620 --> 00:07:55,320
component to angular it's a very

00:07:51,810 --> 00:07:57,960
declarative approach to programming if

00:07:55,320 --> 00:08:00,539
we have any programming polyglots in the

00:07:57,960 --> 00:08:02,639
audience which I'm sure we do you may

00:08:00,539 --> 00:08:05,130
recognize the descriptions here as

00:08:02,639 --> 00:08:09,300
similar to data annotations in c-sharp

00:08:05,130 --> 00:08:12,030
or annotations in Java so these are ways

00:08:09,300 --> 00:08:14,639
that we can assert type information in

00:08:12,030 --> 00:08:19,800
those languages and that is also a valid

00:08:14,639 --> 00:08:22,440
use of decorators if you're familiar

00:08:19,800 --> 00:08:24,570
with the decorator pattern in

00:08:22,440 --> 00:08:26,190
programming you might be wondering if

00:08:24,570 --> 00:08:28,710
this is an implementation of that

00:08:26,190 --> 00:08:30,900
pattern now this is a pattern that's

00:08:28,710 --> 00:08:34,740
used in statically typed languages such

00:08:30,900 --> 00:08:37,709
as C or C++ and in those languages it

00:08:34,740 --> 00:08:40,440
allows us to modify the behavior of a

00:08:37,709 --> 00:08:43,880
single object without modifying behavior

00:08:40,440 --> 00:08:46,890
of all the objects of the same class and

00:08:43,880 --> 00:08:49,500
what we're looking at here is actually

00:08:46,890 --> 00:08:51,270
different so what we're looking at is a

00:08:49,500 --> 00:08:53,910
language feature that comes

00:08:51,270 --> 00:08:57,120
to the world of JavaScript from Python

00:08:53,910 --> 00:08:59,160
and this language feature allows us to

00:08:57,120 --> 00:09:01,470
add functionality to classes and class

00:08:59,160 --> 00:09:03,120
members at definition time so the

00:09:01,470 --> 00:09:06,260
changes that we make are going to be

00:09:03,120 --> 00:09:08,820
applied to every instance of that class

00:09:06,260 --> 00:09:11,070
so I mentioned that it comes to the

00:09:08,820 --> 00:09:13,350
world of JavaScript right so are we

00:09:11,070 --> 00:09:15,000
talking about JavaScript decorators and

00:09:13,350 --> 00:09:20,940
typescript decorators being the same

00:09:15,000 --> 00:09:24,420
thing and we are kind of kind of there

00:09:20,940 --> 00:09:27,150
are some nuances to that conversation so

00:09:24,420 --> 00:09:30,480
typescript compiles to JavaScript right

00:09:27,150 --> 00:09:33,360
and a lot of the power of typescript is

00:09:30,480 --> 00:09:35,100
that when we compile to JavaScript we

00:09:33,360 --> 00:09:37,470
are getting features that may not be

00:09:35,100 --> 00:09:40,770
available natively in the language yet

00:09:37,470 --> 00:09:44,100
and when we're doing that with

00:09:40,770 --> 00:09:48,030
decorators we have to keep in mind that

00:09:44,100 --> 00:09:50,010
decorators are still a stage to tc39

00:09:48,030 --> 00:09:50,910
proposal which means they're still in a

00:09:50,010 --> 00:09:52,650
draft format

00:09:50,910 --> 00:09:56,610
they haven't been implemented natively

00:09:52,650 --> 00:09:58,950
in an equi script yet and in fact

00:09:56,610 --> 00:10:01,050
they've been there for a while and there

00:09:58,950 --> 00:10:03,090
they've been revised since the original

00:10:01,050 --> 00:10:06,510
implementation and when typescript

00:10:03,090 --> 00:10:08,580
implemented them and so my point here is

00:10:06,510 --> 00:10:10,710
that I want to make sure everybody knows

00:10:08,580 --> 00:10:12,960
that the version of decorators that

00:10:10,710 --> 00:10:15,240
eventually makes it into equi script or

00:10:12,960 --> 00:10:16,950
JavaScript may be different will

00:10:15,240 --> 00:10:21,960
probably be different than the version

00:10:16,950 --> 00:10:24,690
that we see in typescript today one

00:10:21,960 --> 00:10:26,730
final piece of sort of side information

00:10:24,690 --> 00:10:29,280
that I want to talk about here is about

00:10:26,730 --> 00:10:31,620
property descriptors and I think that

00:10:29,280 --> 00:10:33,960
property descriptors are super cool they

00:10:31,620 --> 00:10:37,040
are a language feature of JavaScript not

00:10:33,960 --> 00:10:40,970
typescript and property descriptors are

00:10:37,040 --> 00:10:44,190
metadata about our object properties so

00:10:40,970 --> 00:10:46,650
this is stuff like whether or not the

00:10:44,190 --> 00:10:48,750
property can be changed whether the

00:10:46,650 --> 00:10:51,450
property can be deleted whether it shows

00:10:48,750 --> 00:10:53,580
up in a four in loop and all of this

00:10:51,450 --> 00:10:55,350
metadata is being attached to your

00:10:53,580 --> 00:10:56,820
object properties whether you know

00:10:55,350 --> 00:11:00,090
you're creating it or not

00:10:56,820 --> 00:11:02,520
so at the top here I have an example of

00:11:00,090 --> 00:11:05,160
just using regular assignment to create

00:11:02,520 --> 00:11:08,129
a property and when I do that

00:11:05,160 --> 00:11:11,209
all of these all of these metadata all

00:11:08,129 --> 00:11:14,220
of these descriptors are by default true

00:11:11,209 --> 00:11:17,310
so you can change the property and you

00:11:14,220 --> 00:11:19,889
can delete it but if you if I use object

00:11:17,310 --> 00:11:21,779
defined property I have more control

00:11:19,889 --> 00:11:24,089
over that so I can make it so that

00:11:21,779 --> 00:11:26,189
somebody can't delete a property or

00:11:24,089 --> 00:11:28,649
can't or it won't show up in a foreign

00:11:26,189 --> 00:11:30,509
loop and the reason why I mentioned this

00:11:28,649 --> 00:11:32,759
is because there are quite a few

00:11:30,509 --> 00:11:36,839
examples of decorators that take

00:11:32,759 --> 00:11:39,509
advantage of this metadata to have fine

00:11:36,839 --> 00:11:46,019
grain control so I'll show you a couple

00:11:39,509 --> 00:11:48,720
examples here so first thing we're going

00:11:46,019 --> 00:11:51,029
to look at is a read-only decorator and

00:11:48,720 --> 00:11:53,129
this is another method decorator this

00:11:51,029 --> 00:11:55,259
decorator is going to be placed on

00:11:53,129 --> 00:11:58,620
methods that I don't want anybody to

00:11:55,259 --> 00:12:01,230
change after they've been defined so the

00:11:58,620 --> 00:12:03,449
decorator is really simple we say we see

00:12:01,230 --> 00:12:06,240
the same signature that we saw before

00:12:03,449 --> 00:12:08,730
with a target key and descriptor being

00:12:06,240 --> 00:12:10,829
passed in and the only thing that this

00:12:08,730 --> 00:12:12,480
decorator is going to do is it's going

00:12:10,829 --> 00:12:14,670
to change the writable property

00:12:12,480 --> 00:12:18,500
descriptor to false and then it'll just

00:12:14,670 --> 00:12:18,500
return the descriptor like it did before

00:12:20,389 --> 00:12:25,800
so here's an example of how we might

00:12:22,769 --> 00:12:28,980
test out our decorator we have an

00:12:25,800 --> 00:12:32,430
example class moon and our example class

00:12:28,980 --> 00:12:34,439
has a circumference a circumference

00:12:32,430 --> 00:12:36,509
method and our circumference method has

00:12:34,439 --> 00:12:37,769
the formula for a circumference and we

00:12:36,509 --> 00:12:40,620
don't want to change that right that's a

00:12:37,769 --> 00:12:43,259
pretty fixed formula so we'll apply our

00:12:40,620 --> 00:12:45,959
read-only decorator and we'll

00:12:43,259 --> 00:12:48,240
instantiate our moon and down here below

00:12:45,959 --> 00:12:50,699
just to try things out we're going to

00:12:48,240 --> 00:12:52,740
try and change circumference to point at

00:12:50,699 --> 00:12:55,519
an arrow function that just returns 100

00:12:52,740 --> 00:12:58,860
we don't want this to be possible and

00:12:55,519 --> 00:13:01,589
when we've run this code our output will

00:12:58,860 --> 00:13:03,750
be a type error cannot assign to

00:13:01,589 --> 00:13:05,449
read-only property circumference of

00:13:03,750 --> 00:13:12,509
object moon so we've successfully

00:13:05,449 --> 00:13:15,269
prevented changing that property so what

00:13:12,509 --> 00:13:17,630
happens if we want to pass in a

00:13:15,269 --> 00:13:19,880
parameter to our decorator

00:13:17,630 --> 00:13:22,550
well if we want to pass in a parameter

00:13:19,880 --> 00:13:24,290
all we need to do is change the syntax

00:13:22,550 --> 00:13:26,930
slightly to use something called a

00:13:24,290 --> 00:13:28,550
decorator Factory and what this means is

00:13:26,930 --> 00:13:30,560
we're going to be passing input any

00:13:28,550 --> 00:13:33,980
parameters that we need in our decorator

00:13:30,560 --> 00:13:36,290
into the outer function and then we're

00:13:33,980 --> 00:13:38,210
going to return the function that's

00:13:36,290 --> 00:13:40,370
going to be used as our decorator at

00:13:38,210 --> 00:13:41,840
runtime so that function is going to

00:13:40,370 --> 00:13:44,150
have the same signature that we saw

00:13:41,840 --> 00:13:47,990
before with the target key and

00:13:44,150 --> 00:13:50,560
descriptor and then inside our decorator

00:13:47,990 --> 00:13:53,000
here we're changing the innumerable

00:13:50,560 --> 00:13:55,940
property descriptor to point at the

00:13:53,000 --> 00:13:59,270
value that was passed in and the point

00:13:55,940 --> 00:14:02,210
of this decorator by the way is to make

00:13:59,270 --> 00:14:03,770
it so that a property will show up in a

00:14:02,210 --> 00:14:07,250
foreign loop or won't show up in a

00:14:03,770 --> 00:14:13,460
foreign loop depending on depending on

00:14:07,250 --> 00:14:15,620
the whatever you pass in when we want to

00:14:13,460 --> 00:14:19,400
test out this code we're going to use

00:14:15,620 --> 00:14:21,500
our moon class again and something

00:14:19,400 --> 00:14:24,380
interesting to note here is that I'm

00:14:21,500 --> 00:14:27,380
assuming that we have a es2016

00:14:24,380 --> 00:14:31,280
compile target here in which methods are

00:14:27,380 --> 00:14:33,230
not enumerable by default so if I did a

00:14:31,280 --> 00:14:37,160
foreign loop without using my enumerable

00:14:33,230 --> 00:14:39,740
decorator I would only see in my my

00:14:37,160 --> 00:14:41,600
class in my class instance here in my

00:14:39,740 --> 00:14:44,750
moon instance I would only see the

00:14:41,600 --> 00:14:47,690
radius but if I use the enumerable

00:14:44,750 --> 00:14:52,090
decorator and I pass in true then when I

00:14:47,690 --> 00:14:55,220
do a foreign loop here's the results I

00:14:52,090 --> 00:15:01,070
see not only my radius but also my

00:14:55,220 --> 00:15:03,860
circumference here so I haven't had

00:15:01,070 --> 00:15:06,890
enough time to go over like as many

00:15:03,860 --> 00:15:09,380
examples as I would love to in this in

00:15:06,890 --> 00:15:11,810
this talk but I have lots of great

00:15:09,380 --> 00:15:14,510
resources here for you to check out some

00:15:11,810 --> 00:15:17,000
of them are typescript resources and

00:15:14,510 --> 00:15:18,770
some of them are equi script and the

00:15:17,000 --> 00:15:20,750
ones down below here are specific to

00:15:18,770 --> 00:15:23,950
learning more about decorators in

00:15:20,750 --> 00:15:23,950
angular they're all fabulous

00:15:27,659 --> 00:15:33,599
I am the newest member of Narwhal and as

00:15:31,409 --> 00:15:35,819
you start any job you have to ramp up

00:15:33,599 --> 00:15:38,459
right you have this learning period and

00:15:35,819 --> 00:15:40,759
I feel really fortunate with this job in

00:15:38,459 --> 00:15:44,279
that all of my colleagues have written

00:15:40,759 --> 00:15:46,109
blog posts and produced videos and had

00:15:44,279 --> 00:15:47,969
all kinds of like Greek content it's all

00:15:46,109 --> 00:15:50,939
recorded and I've been going over it in

00:15:47,969 --> 00:15:52,799
the last month and I'm really happy to

00:15:50,939 --> 00:15:57,209
say that this content is also available

00:15:52,799 --> 00:15:59,099
to you so you can join Narwhal connect

00:15:57,209 --> 00:16:01,469
and we have all these resources

00:15:59,099 --> 00:16:04,169
available and they're all for free you

00:16:01,469 --> 00:16:05,939
can go to this URL to join or you can

00:16:04,169 --> 00:16:09,989
come talk to us at the narwhal booth and

00:16:05,939 --> 00:16:10,760
we'll get you set up thank you so much

00:16:09,989 --> 00:16:16,340
everyone

00:16:10,760 --> 00:16:16,340
[Applause]

00:16:20,120 --> 00:16:26,740
[Music]

00:16:32,339 --> 00:16:34,399

YouTube URL: https://www.youtube.com/watch?v=Guvd5BYocYg


