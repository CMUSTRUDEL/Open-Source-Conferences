Title: Angular Universal With Googles Latest Serverless Tech | Jason Dobry
Publication date: 2019-05-04
Playlist: ng-conf 2019
Description: 
	ng-conf is a three-day, single track Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe will be here all week at Salt Lake City, UT to participate in trainings by the Google Angular team and other Angular experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:00,480 --> 00:00:04,529
the product that firebase is probably

00:00:02,399 --> 00:00:06,120
most well-known for is the real-time

00:00:04,529 --> 00:00:09,719
database

00:00:06,120 --> 00:00:12,719
it's a schema-less json sort of document

00:00:09,719 --> 00:00:16,460
storage type database that is able to

00:00:12,719 --> 00:00:19,680
push updates out to clients in real time

00:00:16,460 --> 00:00:22,109
it makes it an excellent tool for any

00:00:19,680 --> 00:00:24,140
real-time applications you may have like

00:00:22,109 --> 00:00:26,070
chat apps or social media or any type of

00:00:24,140 --> 00:00:28,920
application where you want to be able to

00:00:26,070 --> 00:00:34,640
push stuff out to your clients with

00:00:28,920 --> 00:00:37,410
minimal code and and have it be fast so

00:00:34,640 --> 00:00:39,870
firebase over the last couple years has

00:00:37,410 --> 00:00:41,840
added a lot of products being backed by

00:00:39,870 --> 00:00:44,579
a Google cloud platform infrastructure

00:00:41,840 --> 00:00:47,489
firebase hosting firebase functions

00:00:44,579 --> 00:00:48,899
firebase storage they have auth that

00:00:47,489 --> 00:00:51,480
makes it really easy to integrate

00:00:48,899 --> 00:00:55,050
authentication into your mobile or web

00:00:51,480 --> 00:00:57,090
apps the SDKs for mobile iOS and Android

00:00:55,050 --> 00:01:00,780
can give you access to things like

00:00:57,090 --> 00:01:03,629
analytics and test labs and a be testing

00:01:00,780 --> 00:01:05,700
and on the web the JavaScript SDK gives

00:01:03,629 --> 00:01:08,010
you the same access to all the firebase

00:01:05,700 --> 00:01:12,600
real time database api's and things like

00:01:08,010 --> 00:01:13,710
that firebase has angular extensions for

00:01:12,600 --> 00:01:17,000
its API s

00:01:13,710 --> 00:01:20,420
and for angular this is angularfire

00:01:17,000 --> 00:01:23,040
like I said maintained by James

00:01:20,420 --> 00:01:25,220
angularfire allows you to very easily

00:01:23,040 --> 00:01:27,840
integrate firebase is real-time

00:01:25,220 --> 00:01:30,840
functionality including authentication

00:01:27,840 --> 00:01:32,729
into your angular applications with just

00:01:30,840 --> 00:01:35,130
a couple lines of code you could have

00:01:32,729 --> 00:01:37,549
changes in your database being synced

00:01:35,130 --> 00:01:39,930
all the way to the Dom in your browser

00:01:37,549 --> 00:01:42,030
automatically without having to build

00:01:39,930 --> 00:01:45,090
any sort of of that real-time

00:01:42,030 --> 00:01:47,040
infrastructure yourself this is the home

00:01:45,090 --> 00:01:49,710
page for firebase it's got all kinds of

00:01:47,040 --> 00:01:51,119
fun stuff for you to read firebase has

00:01:49,710 --> 00:01:54,509
been around for a while how many of you

00:01:51,119 --> 00:01:58,259
have actually used firebase before so

00:01:54,509 --> 00:02:00,360
almost everybody I will be skipping some

00:01:58,259 --> 00:02:02,640
things in this workshop stuff that maybe

00:02:00,360 --> 00:02:04,259
I haven't skipped in the past but there

00:02:02,640 --> 00:02:05,909
we have some some newer serverless

00:02:04,259 --> 00:02:08,250
technologies from Google cloud that we

00:02:05,909 --> 00:02:10,530
want a demo in combination with an

00:02:08,250 --> 00:02:12,480
angular universal application and so

00:02:10,530 --> 00:02:13,650
some of the firebase stuff is actually

00:02:12,480 --> 00:02:15,750
already deployed

00:02:13,650 --> 00:02:19,290
and we'll just be using it so we'll be

00:02:15,750 --> 00:02:21,750
focusing focusing on the the the angular

00:02:19,290 --> 00:02:23,879
universal app itself with its

00:02:21,750 --> 00:02:25,800
server-side rendering capabilities I

00:02:23,879 --> 00:02:30,030
deployed on a server list environment in

00:02:25,800 --> 00:02:33,209
Google Cloud so a brand new product that

00:02:30,030 --> 00:02:35,660
Google Cloud just announced a week or

00:02:33,209 --> 00:02:39,299
two ago is called Google cloud run

00:02:35,660 --> 00:02:42,200
Google cloud run is a hosted version of

00:02:39,299 --> 00:02:44,730
que native que native is an open-source

00:02:42,200 --> 00:02:49,290
specification and product for running

00:02:44,730 --> 00:02:50,250
stateless container based workloads so

00:02:49,290 --> 00:02:52,470
kubernetes

00:02:50,250 --> 00:02:53,700
is the open source container

00:02:52,470 --> 00:02:57,870
orchestration platform

00:02:53,700 --> 00:03:00,870
keh native is made to run on kubernetes

00:02:57,870 --> 00:03:02,970
and to run your stateless workloads so

00:03:00,870 --> 00:03:04,950
basically you have a docker image

00:03:02,970 --> 00:03:06,329
it's stateless you want to be able to

00:03:04,950 --> 00:03:09,450
just deploy them scale them on

00:03:06,329 --> 00:03:13,260
kubernetes send HTTP HTTP request to

00:03:09,450 --> 00:03:15,329
them things like that so cloud run is

00:03:13,260 --> 00:03:19,200
our hosted version it allows you to

00:03:15,329 --> 00:03:21,450
simply spin up a for example angular

00:03:19,200 --> 00:03:23,730
Universal application that basically is

00:03:21,450 --> 00:03:26,400
packaged up as a docker image and can

00:03:23,730 --> 00:03:29,430
receive an HTTP request for example when

00:03:26,400 --> 00:03:31,739
you visit the container in your browser

00:03:29,430 --> 00:03:34,650
which means that your application can

00:03:31,739 --> 00:03:38,639
serve a web application and then with

00:03:34,650 --> 00:03:41,489
just a just like two lines deployment

00:03:38,639 --> 00:03:44,280
commands we can have a stateless server

00:03:41,489 --> 00:03:46,200
list angular Universal app and we didn't

00:03:44,280 --> 00:03:48,599
have to worry about VMs we didn't have

00:03:46,200 --> 00:03:49,859
to worry about security updates or or

00:03:48,599 --> 00:03:52,319
anything like that we just wrote some

00:03:49,859 --> 00:03:55,340
node code and we ran a command to deploy

00:03:52,319 --> 00:03:58,620
it and it can scale automatically for us

00:03:55,340 --> 00:04:00,540
okay so we have a repository that we

00:03:58,620 --> 00:04:04,489
prepared that has the source code for

00:04:00,540 --> 00:04:07,049
all this it's at James Daniels on

00:04:04,489 --> 00:04:10,769
snapshot is the name of the repository

00:04:07,049 --> 00:04:12,540
so you guys are all welcome to go pull

00:04:10,769 --> 00:04:13,139
that up if any of you want to be

00:04:12,540 --> 00:04:19,139
following along

00:04:13,139 --> 00:04:21,150
I have prepared five branches I think on

00:04:19,139 --> 00:04:23,530
the repo each represents sort of one

00:04:21,150 --> 00:04:25,840
step in our workshop

00:04:23,530 --> 00:04:30,370
the first step in the workshop would be

00:04:25,840 --> 00:04:32,470
step zero so workshop - - to zero and if

00:04:30,370 --> 00:04:35,290
you were to clone the repo and check out

00:04:32,470 --> 00:04:37,930
workshop - zero that would get your

00:04:35,290 --> 00:04:41,470
repository in the sort of initial state

00:04:37,930 --> 00:04:43,420
that we need to start the workshop so if

00:04:41,470 --> 00:04:46,690
you're wanting to be doing all this on

00:04:43,420 --> 00:04:48,940
your your local workstation or Mac or

00:04:46,690 --> 00:04:50,110
whatever you have there are a couple

00:04:48,940 --> 00:04:52,780
things that you would want to have

00:04:50,110 --> 00:04:54,820
installed I added I created a wiki page

00:04:52,780 --> 00:04:58,390
just over here if you go to the wiki

00:04:54,820 --> 00:05:00,070
click workshop things you would need to

00:04:58,390 --> 00:05:02,740
have locally you would need to have no

00:05:00,070 --> 00:05:06,010
js' installed you would need to have the

00:05:02,740 --> 00:05:08,710
firebase tools installed the Google

00:05:06,010 --> 00:05:10,300
Cloud SDK all three of those those

00:05:08,710 --> 00:05:11,980
things are things you can Google and I'm

00:05:10,300 --> 00:05:14,470
sure the first result will take you to

00:05:11,980 --> 00:05:19,140
how to install it you also need a Google

00:05:14,470 --> 00:05:22,150
account I am going to use an alternative

00:05:19,140 --> 00:05:23,980
from my work local machine instead of

00:05:22,150 --> 00:05:26,860
using that I'm going to use Google cloud

00:05:23,980 --> 00:05:29,410
shell which means in the Google Cloud

00:05:26,860 --> 00:05:31,330
console for my cloud project I can open

00:05:29,410 --> 00:05:33,190
a shell right there and it actually has

00:05:31,330 --> 00:05:35,830
all that stuff installed already so I

00:05:33,190 --> 00:05:37,600
don't need to do it and if any of you

00:05:35,830 --> 00:05:40,150
were to open the Google Cloud console

00:05:37,600 --> 00:05:42,880
and click open shell yourself you also

00:05:40,150 --> 00:05:44,140
would have a free shell opened up for

00:05:42,880 --> 00:05:46,630
you which would have all that same stuff

00:05:44,140 --> 00:05:47,500
installed ready to go and so you don't

00:05:46,630 --> 00:05:49,120
you wouldn't have to worry about

00:05:47,500 --> 00:05:53,680
preparing your local workstation if you

00:05:49,120 --> 00:05:55,390
want to use cloud shell okay so to just

00:05:53,680 --> 00:05:58,479
sort of break the ice on Google cloud

00:05:55,390 --> 00:05:59,919
run we're gonna try the Google cloud run

00:05:58,479 --> 00:06:04,030
QuickStart which is really it's really

00:05:59,919 --> 00:06:06,520
short so it's under getting started step

00:06:04,030 --> 00:06:13,770
5 there's a link here do the cloud run

00:06:06,520 --> 00:06:16,440
QuickStart pretty visible there

00:06:13,770 --> 00:06:20,539
okay so before you begin you need a

00:06:16,440 --> 00:06:22,560
project you would need to enable billing

00:06:20,539 --> 00:06:26,160
which I have already done on a

00:06:22,560 --> 00:06:31,500
pre-prepared project step one to deploy

00:06:26,160 --> 00:06:34,550
a container go to cloud run so what's

00:06:31,500 --> 00:06:38,810
opening here is the Google Cloud console

00:06:34,550 --> 00:06:41,280
and it has opened the cloud run

00:06:38,810 --> 00:06:44,370
dashboard for me as we can see I don't

00:06:41,280 --> 00:06:47,460
have any services deployed so far so to

00:06:44,370 --> 00:06:52,530
deploy service it says creates click

00:06:47,460 --> 00:06:57,590
create service ok create service and

00:06:52,530 --> 00:07:00,780
what does it want me to do ok enter it

00:06:57,590 --> 00:07:02,610
path to a docker image looks like

00:07:00,780 --> 00:07:05,759
there's already a prepackaged container

00:07:02,610 --> 00:07:08,940
we can use or image we can use called

00:07:05,759 --> 00:07:12,960
cloud run hello it's going to default

00:07:08,940 --> 00:07:14,909
our service name to just hello select

00:07:12,960 --> 00:07:16,740
the region there's only one region where

00:07:14,909 --> 00:07:19,590
it's available so far so that's easy and

00:07:16,740 --> 00:07:22,139
allow unauthenticated requests this will

00:07:19,590 --> 00:07:25,229
allow us to hit our container from you

00:07:22,139 --> 00:07:26,580
know the external internet basically and

00:07:25,229 --> 00:07:28,440
I don't think we need to worry about any

00:07:26,580 --> 00:07:35,520
additional settings ok so I'm gonna

00:07:28,440 --> 00:07:36,210
click create something happened sure yep

00:07:35,520 --> 00:07:38,250
there we go

00:07:36,210 --> 00:07:42,659
okay so it's deploying the container for

00:07:38,250 --> 00:07:47,909
us how many of you have used App Engine

00:07:42,659 --> 00:07:50,569
before Google App Engine what about the

00:07:47,909 --> 00:07:52,800
standard environment for App Engine

00:07:50,569 --> 00:07:55,620
couple hands what about the flexible

00:07:52,800 --> 00:07:56,940
environment so those of you who have

00:07:55,620 --> 00:07:59,909
used the flexible environment do you

00:07:56,940 --> 00:08:03,990
remember how long it takes to deploy App

00:07:59,909 --> 00:08:07,800
Engine flexible which order of magnitude

00:08:03,990 --> 00:08:10,289
of minutes do you wanna pick so with

00:08:07,800 --> 00:08:11,940
Google cloud run the very first time you

00:08:10,289 --> 00:08:14,009
deploy a service it takes a little

00:08:11,940 --> 00:08:17,099
longer but subsequent deploys of the

00:08:14,009 --> 00:08:20,130
same service I will happen on the order

00:08:17,099 --> 00:08:21,810
of 30 seconds so this is done and it has

00:08:20,130 --> 00:08:24,270
migrated traffic to my new deployment

00:08:21,810 --> 00:08:26,230
and right here it has the URL of my

00:08:24,270 --> 00:08:30,310
deployment so if I just click that

00:08:26,230 --> 00:08:32,500
it opens up and it's running so what

00:08:30,310 --> 00:08:35,470
this is is a docker image that's been

00:08:32,500 --> 00:08:38,080
deployed to Google cloud and it's

00:08:35,470 --> 00:08:40,300
deployed at this URL and every time an

00:08:38,080 --> 00:08:45,100
incoming request happens this container

00:08:40,300 --> 00:08:47,260
receives that request this differs from

00:08:45,100 --> 00:08:49,810
Google cloud functions and firebase

00:08:47,260 --> 00:08:52,750
functions if you if you've used those

00:08:49,810 --> 00:08:54,520
before in that Google cloud run supports

00:08:52,750 --> 00:08:57,910
concurrency which means a single

00:08:54,520 --> 00:08:59,650
instance a single container instance can

00:08:57,910 --> 00:09:02,020
handle multiple concurrent requests at a

00:08:59,650 --> 00:09:04,690
time whereas with cloud functions every

00:09:02,020 --> 00:09:06,640
single container instance can only

00:09:04,690 --> 00:09:08,680
handle one at a time so in order to

00:09:06,640 --> 00:09:11,050
handle more than one with cloud or

00:09:08,680 --> 00:09:13,060
firebase functions the service would

00:09:11,050 --> 00:09:14,950
have to spin up multiple instances and

00:09:13,060 --> 00:09:17,200
so it is maybe more expensive that way

00:09:14,950 --> 00:09:19,840
with cloud run a single container

00:09:17,200 --> 00:09:21,610
instance can handle many concurrent

00:09:19,840 --> 00:09:23,620
connections and that is configurable at

00:09:21,610 --> 00:09:25,330
deploy time you can choose how many

00:09:23,620 --> 00:09:28,780
concurrent connections should be allowed

00:09:25,330 --> 00:09:31,030
to go to a single instance of yours and

00:09:28,780 --> 00:09:33,660
that allows you to sort of fine-tune the

00:09:31,030 --> 00:09:36,850
scalability of your cloud run instances

00:09:33,660 --> 00:09:38,470
depending on how much memory your

00:09:36,850 --> 00:09:39,970
instance would require to handle a

00:09:38,470 --> 00:09:41,200
single request you can sort of figure

00:09:39,970 --> 00:09:42,730
that out and then do some math and

00:09:41,200 --> 00:09:44,290
figure out how many concurrent requests

00:09:42,730 --> 00:09:46,270
I shall out allow per instance before

00:09:44,290 --> 00:09:51,970
cloud run will make a new instance for

00:09:46,270 --> 00:09:55,050
me there was something else I was gonna

00:09:51,970 --> 00:09:57,550
say about cloud run and concurrency

00:09:55,050 --> 00:09:59,740
we'll have to come back to that okay so

00:09:57,550 --> 00:10:02,020
this is done we figured it out cloud run

00:09:59,740 --> 00:10:04,000
it's pretty cool so this was just some

00:10:02,020 --> 00:10:05,740
prepackaged hello world container we're

00:10:04,000 --> 00:10:07,720
gonna swap it out in this workshop for a

00:10:05,740 --> 00:10:10,840
angular universal app and we'll see how

00:10:07,720 --> 00:10:14,110
angular angular Universal interacts with

00:10:10,840 --> 00:10:16,090
cloud run and some of the other services

00:10:14,110 --> 00:10:18,400
that Google cloud offers so if we go

00:10:16,090 --> 00:10:20,610
back to our wiki see what it says to do

00:10:18,400 --> 00:10:20,610
next

00:10:22,320 --> 00:10:27,670
running our app okay so to do this I'm

00:10:25,480 --> 00:10:28,990
gonna go back over to my Google Cloud

00:10:27,670 --> 00:10:30,910
console and I'm gonna click this

00:10:28,990 --> 00:10:32,980
activate cloud shell button it's in the

00:10:30,910 --> 00:10:35,440
top right corner this will allow me to

00:10:32,980 --> 00:10:37,330
bypass the need to install anything

00:10:35,440 --> 00:10:37,680
locally or worried about my local

00:10:37,330 --> 00:10:45,930
machine

00:10:37,680 --> 00:10:48,690
I I still have the 2015 MacBook Pro I'm

00:10:45,930 --> 00:10:51,330
gonna hold on to as long as I can but my

00:10:48,690 --> 00:10:53,430
trackpad is starting to die so I don't

00:10:51,330 --> 00:10:56,940
have the mechanical click anymore so I

00:10:53,430 --> 00:10:58,500
have no way to resize anything so you're

00:10:56,940 --> 00:11:01,470
stuck with how big my shell is down

00:10:58,500 --> 00:11:03,240
there no nor can I reorder my chrome

00:11:01,470 --> 00:11:08,040
tabs unless anyone knows if some sort of

00:11:03,240 --> 00:11:10,230
hotkey that can do that but anyway so

00:11:08,040 --> 00:11:15,630
here I have a cloud shell and it is

00:11:10,230 --> 00:11:19,770
already configured to use my ng comp

00:11:15,630 --> 00:11:21,200
2019 workshop project and if you were to

00:11:19,770 --> 00:11:23,430
have your own project created then

00:11:21,200 --> 00:11:25,130
obviously it would be pre-configured to

00:11:23,430 --> 00:11:34,830
your project so back to the workshop

00:11:25,130 --> 00:11:37,980
step 1 looks like I am going to pull so

00:11:34,830 --> 00:11:41,550
step 1 is create a google cloud source

00:11:37,980 --> 00:11:44,820
repository it's just a free service that

00:11:41,550 --> 00:11:46,709
lets you create repositories within your

00:11:44,820 --> 00:11:49,620
Cloud projects and store your source

00:11:46,709 --> 00:11:52,640
code it can also mirror a source code

00:11:49,620 --> 00:11:55,890
that is located in a github or bitbucket

00:11:52,640 --> 00:11:58,410
why would I do this we will use this

00:11:55,890 --> 00:12:00,390
Google Cloud source repository to take

00:11:58,410 --> 00:12:02,970
advantage of some of the automatic

00:12:00,390 --> 00:12:06,000
continuous build features that we have

00:12:02,970 --> 00:12:08,300
in order to automatically deploy our

00:12:06,000 --> 00:12:12,230
cloud run service as we change our code

00:12:08,300 --> 00:12:12,230
so I'm going to create this repo

00:12:21,420 --> 00:12:27,660
it's enabling the source repository API

00:12:24,840 --> 00:12:37,470
and now it's and then it's going to

00:12:27,660 --> 00:12:45,420
create the repo sometimes it takes a

00:12:37,470 --> 00:12:48,600
minute to enable an API oh I skipped a

00:12:45,420 --> 00:12:53,150
step it wanted me to go do it before he

00:12:48,600 --> 00:12:53,150
B in which was enable the API

00:13:14,420 --> 00:13:18,170
you can actually in the cloud console

00:13:16,670 --> 00:13:20,060
you can see all the api's that are

00:13:18,170 --> 00:13:21,770
enabled for your project if you click

00:13:20,060 --> 00:13:23,990
the hamburger menu and click on api's

00:13:21,770 --> 00:13:26,240
and services you can also search for any

00:13:23,990 --> 00:13:27,950
part of the cloud console that you may

00:13:26,240 --> 00:13:30,500
be interested in in the search bar at

00:13:27,950 --> 00:13:32,090
the top and Google Cloud source

00:13:30,500 --> 00:13:37,670
repositories API it appears to be

00:13:32,090 --> 00:13:43,820
enabled so I'm gonna just try this

00:13:37,670 --> 00:13:46,900
command again there we go okay so I just

00:13:43,820 --> 00:13:51,110
created a Google Cloud source repository

00:13:46,900 --> 00:13:56,930
and now I'm going to clone that

00:13:51,110 --> 00:13:58,430
repository into my cloud shell it's an

00:13:56,930 --> 00:14:04,330
empty repository doesn't have anything

00:13:58,430 --> 00:14:07,340
in it yet whoops I forgot to remove my

00:14:04,330 --> 00:14:11,270
test that I was already doing okay so

00:14:07,340 --> 00:14:14,150
now I'm calling cloning it it's an empty

00:14:11,270 --> 00:14:17,590
repository like I said and once I'm in

00:14:14,150 --> 00:14:22,750
the repository I'm going to pull over

00:14:17,590 --> 00:14:22,750
James is on snapshot repo

00:14:28,510 --> 00:14:38,380
and I'm gonna check out workshop let's

00:14:33,250 --> 00:14:41,139
see let's check out master first so what

00:14:38,380 --> 00:14:42,940
I did is I set James's repository as the

00:14:41,139 --> 00:14:44,260
upstream that's the name of that remote

00:14:42,940 --> 00:14:46,060
that's the name I gave it and then I

00:14:44,260 --> 00:14:49,149
pulled it into the repo I'm on the

00:14:46,060 --> 00:14:51,670
master branch now so we can see there's

00:14:49,149 --> 00:14:53,100
a bunch of stuff in there and I'm gonna

00:14:51,670 --> 00:14:56,380
take that and I'm gonna push it to

00:14:53,100 --> 00:15:01,810
origin origin being the Google Cloud

00:14:56,380 --> 00:15:06,190
source remote so we can actually go look

00:15:01,810 --> 00:15:10,680
at let's see source repositories first

00:15:06,190 --> 00:15:14,470
result and we can see that we have a

00:15:10,680 --> 00:15:17,889
repository called on snapshot and it has

00:15:14,470 --> 00:15:25,630
all the stuff in it that the repo had on

00:15:17,889 --> 00:15:27,880
github there's James okay so to start

00:15:25,630 --> 00:15:36,910
the workshop I'm going to switch over to

00:15:27,880 --> 00:15:40,389
branch workshop - zero okay now my code

00:15:36,910 --> 00:15:43,029
is ready to start the workshop okay we

00:15:40,389 --> 00:15:45,130
did all that okay step one install

00:15:43,029 --> 00:15:46,569
dependencies like I said no it is

00:15:45,130 --> 00:15:49,240
already installed in the cloud shell I

00:15:46,569 --> 00:15:51,690
can just run npm install and it'll start

00:15:49,240 --> 00:15:51,690
doing its thing

00:15:57,350 --> 00:16:02,360
so while this is installing you can

00:16:00,320 --> 00:16:04,280
actually open some features of cloud

00:16:02,360 --> 00:16:07,520
shell you can also open multiple

00:16:04,280 --> 00:16:09,200
sessions at a time and it uses T MUX so

00:16:07,520 --> 00:16:11,570
even if you lose internet connection

00:16:09,200 --> 00:16:13,820
temporarily or it closes or whatever

00:16:11,570 --> 00:16:18,380
you'll be able to open it again and come

00:16:13,820 --> 00:16:21,260
back right to the same state the cloud

00:16:18,380 --> 00:16:23,180
shell itself is backed by a virtual

00:16:21,260 --> 00:16:25,640
machine a Google cloud compute engine

00:16:23,180 --> 00:16:29,360
instance that is just for you it's tied

00:16:25,640 --> 00:16:31,280
to you as a user and it has like a home

00:16:29,360 --> 00:16:32,600
directory that's got like a gigabyte of

00:16:31,280 --> 00:16:34,510
space or something and it will just

00:16:32,600 --> 00:16:36,620
follow you around from project project

00:16:34,510 --> 00:16:38,810
and you can just use it as sort of like

00:16:36,620 --> 00:16:41,060
a workspace as you you do stuff with

00:16:38,810 --> 00:16:44,440
your projects some other features of

00:16:41,060 --> 00:16:47,810
cloud shell are you can actually open a

00:16:44,440 --> 00:16:50,180
editor in the browser that will allow

00:16:47,810 --> 00:16:52,640
you to work on the code that you

00:16:50,180 --> 00:16:56,360
actually are have in your shell and it

00:16:52,640 --> 00:16:58,160
also has a web preview feature which we

00:16:56,360 --> 00:17:00,170
are going to use here in just a second

00:16:58,160 --> 00:17:01,600
so I just finished all installing all

00:17:00,170 --> 00:17:06,530
the dependencies

00:17:01,600 --> 00:17:08,030
now I'm gonna build everything and this

00:17:06,530 --> 00:17:10,730
is running a couple commands we can

00:17:08,030 --> 00:17:14,540
actually go examine the package.json

00:17:10,730 --> 00:17:17,780
file to see what they're doing see is

00:17:14,540 --> 00:17:20,570
that visible so let's see we got some

00:17:17,780 --> 00:17:22,760
scripts in our package JSON this

00:17:20,570 --> 00:17:24,950
repository correct me if I'm wrong James

00:17:22,760 --> 00:17:30,020
was based on the angular universal

00:17:24,950 --> 00:17:33,860
starter repo yeah so we've got a couple

00:17:30,020 --> 00:17:36,050
build commands in here build prod builds

00:17:33,860 --> 00:17:39,500
I believe the client and uses ahead of

00:17:36,050 --> 00:17:41,780
time compilation and it builds it for

00:17:39,500 --> 00:17:44,350
prod mode build SSR builds the server

00:17:41,780 --> 00:17:47,750
file which is just a server dot - yes

00:17:44,350 --> 00:17:50,960
and that's about about what we're doing

00:17:47,750 --> 00:17:53,750
so some advantages and disadvantages of

00:17:50,960 --> 00:17:57,650
cloud shell one of the advantages is it

00:17:53,750 --> 00:17:59,570
has really fast network connection so

00:17:57,650 --> 00:18:01,490
it's got like I don't only probably like

00:17:59,570 --> 00:18:02,750
gigabit available or something and so

00:18:01,490 --> 00:18:04,790
when you're doing any sort of network

00:18:02,750 --> 00:18:07,110
i/o in cloud shell it'll be really fast

00:18:04,790 --> 00:18:08,910
so if you're at say

00:18:07,110 --> 00:18:10,920
France and you're trying to npm install

00:18:08,910 --> 00:18:13,740
locally that could take a long time or

00:18:10,920 --> 00:18:15,929
just die but if you have cloud shell

00:18:13,740 --> 00:18:17,670
then you have access to you know it's

00:18:15,929 --> 00:18:19,799
got its own network and is really fast

00:18:17,670 --> 00:18:22,950
now one of the downsides of cloud shell

00:18:19,799 --> 00:18:26,400
yeah I think the VM that you are given

00:18:22,950 --> 00:18:30,090
for this is just like a one virtual CPU

00:18:26,400 --> 00:18:31,890
from compute engine whereas if you're

00:18:30,090 --> 00:18:34,140
running in p.m. installed locally you

00:18:31,890 --> 00:18:35,280
might have like quad core i7 or

00:18:34,140 --> 00:18:39,150
something available to you

00:18:35,280 --> 00:18:40,320
right so trade offs air which means NPM

00:18:39,150 --> 00:18:43,410
install was fast

00:18:40,320 --> 00:18:47,880
but the angular build might be slow on

00:18:43,410 --> 00:18:49,620
cloud shell so it would probably be done

00:18:47,880 --> 00:18:52,799
by now if I was doing this on my Mac

00:18:49,620 --> 00:18:59,880
directly we can actually probably test

00:18:52,799 --> 00:19:01,080
it make it bigger we can we should have

00:18:59,880 --> 00:19:06,720
done them at the same time so we could

00:19:01,080 --> 00:19:08,549
see which one would finish first so

00:19:06,720 --> 00:19:11,640
right now this NPM install is happening

00:19:08,549 --> 00:19:12,900
on conference Wi-Fi but I actually

00:19:11,640 --> 00:19:16,799
already ran it so it'll probably be

00:19:12,900 --> 00:19:19,250
really fast ok I did already run it so

00:19:16,799 --> 00:19:21,900
you cheated

00:19:19,250 --> 00:19:29,190
ok so cloud shell is still running the

00:19:21,900 --> 00:19:31,760
build we're at 92% and locally we'll see

00:19:29,190 --> 00:19:31,760
if we can catch up

00:19:32,790 --> 00:19:42,059
so the way the web preview works is by

00:19:35,760 --> 00:19:44,340
default it will simply expect it'll

00:19:42,059 --> 00:19:45,809
expect your process or whatever web app

00:19:44,340 --> 00:19:48,090
you're running in the cloud shell to

00:19:45,809 --> 00:19:51,390
listen on a certain port and the default

00:19:48,090 --> 00:19:53,460
is port 8080 so basically when you open

00:19:51,390 --> 00:19:55,020
the web preview it tries to just connect

00:19:53,460 --> 00:19:57,630
to whatever is on port 8080 and then

00:19:55,020 --> 00:20:00,809
show you what it responds with by

00:19:57,630 --> 00:20:06,210
default our app doesn't do port 8080 or

00:20:00,809 --> 00:20:08,760
yeah our app does port 420 by default so

00:20:06,210 --> 00:20:11,330
I'm looking for the settings to change

00:20:08,760 --> 00:20:11,330
the port

00:20:19,940 --> 00:20:25,070
I think I'm just skipping right over it

00:20:21,770 --> 00:20:28,160
where is it Oh change port okay so I

00:20:25,070 --> 00:20:36,080
think our app runs on 4200 so instead of

00:20:28,160 --> 00:20:37,970
doing a DAT we'll do 40 50 200 i i have

00:20:36,080 --> 00:20:40,130
deployed it before and right now it's

00:20:37,970 --> 00:20:42,980
using a serviceworker so the app is

00:20:40,130 --> 00:20:45,320
still there so we're gonna just how do

00:20:42,980 --> 00:20:47,660
we turn it off there we go I turn off

00:20:45,320 --> 00:20:49,760
the serviceworker and right now it says

00:20:47,660 --> 00:20:52,160
there's nothing listening on port 4200

00:20:49,760 --> 00:20:53,950
so I can't preview an app for you and

00:20:52,160 --> 00:20:56,330
it's still building

00:20:53,950 --> 00:20:58,310
it's almost done once it's done we'll

00:20:56,330 --> 00:21:02,630
start it locally it finished obviously

00:20:58,310 --> 00:21:06,520
got more CPU power available so if I run

00:21:02,630 --> 00:21:08,980
it locally I think what was the command

00:21:06,520 --> 00:21:16,970
whoops

00:21:08,980 --> 00:21:18,680
it was NPM run serve I so sorry so I've

00:21:16,970 --> 00:21:21,500
got it running locally I could just test

00:21:18,680 --> 00:21:25,340
it there if I want localhost 4200 here's

00:21:21,500 --> 00:21:27,110
the app I'm not sure what this data is

00:21:25,340 --> 00:21:30,080
it looks like blog posts from firebase

00:21:27,110 --> 00:21:33,230
or something yeah so a bunch of our

00:21:30,080 --> 00:21:35,390
firebase blog posts the home page

00:21:33,230 --> 00:21:37,700
displays a list of articles you click on

00:21:35,390 --> 00:21:41,270
one it takes you to the article displays

00:21:37,700 --> 00:21:42,590
a bunch of comments you can also click

00:21:41,270 --> 00:21:45,710
on an author and it will show you the

00:21:42,590 --> 00:21:48,050
author's face and the articles that

00:21:45,710 --> 00:21:54,080
they've written so if we actually go

00:21:48,050 --> 00:21:55,790
back and examine this page so I've

00:21:54,080 --> 00:21:57,410
turned the serviceworker off so we can

00:21:55,790 --> 00:21:59,390
demonstrate the server-side rendering if

00:21:57,410 --> 00:22:00,770
you had the serviceworker on then it

00:21:59,390 --> 00:22:02,290
would actually bypass the service

00:22:00,770 --> 00:22:04,730
server-side rendering and the

00:22:02,290 --> 00:22:06,650
serviceworker would be able to almost

00:22:04,730 --> 00:22:09,880
instantaneously give the browser an

00:22:06,650 --> 00:22:12,020
initial response and after which the

00:22:09,880 --> 00:22:14,690
client-side JavaScript would take over

00:22:12,020 --> 00:22:16,430
in the pre but--would would start up in

00:22:14,690 --> 00:22:18,440
the angular app would take over the Dom

00:22:16,430 --> 00:22:20,360
from that point forward I turn off the

00:22:18,440 --> 00:22:22,520
serviceworker so we can force it to make

00:22:20,360 --> 00:22:24,500
a new get request to the server so it

00:22:22,520 --> 00:22:25,880
can get a response from the server which

00:22:24,500 --> 00:22:28,310
will be some server-side rendered stuff

00:22:25,880 --> 00:22:30,890
so I turned off the serviceworker and

00:22:28,310 --> 00:22:32,420
i'm going to refresh the page and I'm

00:22:30,890 --> 00:22:33,779
gonna go take a look at this initial

00:22:32,420 --> 00:22:36,299
response we got back

00:22:33,779 --> 00:22:42,629
again I apologize I cannot resize this

00:22:36,299 --> 00:22:45,690
window maybe I can move it I don't know

00:22:42,629 --> 00:22:48,210
if that's much better okay so we got

00:22:45,690 --> 00:22:49,529
some HTML back now how do we know if

00:22:48,210 --> 00:22:51,570
this actually did any server-side

00:22:49,529 --> 00:22:56,099
rendering or not if we actually go look

00:22:51,570 --> 00:22:58,590
at the index dot HTML file which is

00:22:56,099 --> 00:23:01,289
right here so far

00:22:58,590 --> 00:23:02,519
the default index.html file has all the

00:23:01,289 --> 00:23:04,200
same stuff that I'm seeing in this

00:23:02,519 --> 00:23:06,089
response so how do we know if it did any

00:23:04,200 --> 00:23:08,399
server-side rendering or not if you look

00:23:06,089 --> 00:23:11,249
at the index.html file down at the

00:23:08,399 --> 00:23:14,849
bottom it's got an app root with a

00:23:11,249 --> 00:23:17,460
router outlet so presumably on the

00:23:14,849 --> 00:23:19,499
client side once it matches a route the

00:23:17,460 --> 00:23:21,389
router is going to take some assigned

00:23:19,499 --> 00:23:24,479
component and render it into the router

00:23:21,389 --> 00:23:26,339
outlet location which means if it's

00:23:24,479 --> 00:23:28,049
server side rendered correctly I will

00:23:26,339 --> 00:23:30,149
not see this in the response in the

00:23:28,049 --> 00:23:32,489
browser ax I will see something rendered

00:23:30,149 --> 00:23:34,049
already so if we go back over here we

00:23:32,489 --> 00:23:37,799
can scroll all the way down past this

00:23:34,049 --> 00:23:40,469
embedded JavaScript there's the app root

00:23:37,799 --> 00:23:42,229
looks like the router outlet was the

00:23:40,469 --> 00:23:44,700
very first thing inside the app root and

00:23:42,229 --> 00:23:47,099
it's not formatted very nicely so I'm

00:23:44,700 --> 00:23:52,289
gonna have to scroll to the right but so

00:23:47,099 --> 00:23:57,210
far I'm seeing a router outlet and a

00:23:52,289 --> 00:24:02,489
bunch of HTML keeps crawling lots and

00:23:57,210 --> 00:24:04,799
lots of HTML a lot of HTML so it did

00:24:02,489 --> 00:24:09,359
server-side render all aged smells there

00:24:04,799 --> 00:24:12,779
yay in giving a universal so what

00:24:09,359 --> 00:24:15,690
happens is the server rendered this list

00:24:12,779 --> 00:24:18,749
of articles in their titles sent that

00:24:15,690 --> 00:24:20,339
HTML to the browser it was rendered the

00:24:18,749 --> 00:24:22,349
browser was able to very quickly get

00:24:20,339 --> 00:24:24,960
that HTML response without having to

00:24:22,349 --> 00:24:26,309
wait for the JavaScript to all load into

00:24:24,960 --> 00:24:28,619
the browser before we can actually

00:24:26,309 --> 00:24:30,869
render anything once the JavaScript

00:24:28,619 --> 00:24:32,759
arrives though it then takes over in my

00:24:30,869 --> 00:24:34,830
interactivity kicks in and I'm able to

00:24:32,759 --> 00:24:36,169
click on things and move around so if I

00:24:34,830 --> 00:24:38,489
were to click on one of these articles

00:24:36,169 --> 00:24:39,809
that is not going to be server-side

00:24:38,489 --> 00:24:43,229
rendered that was all handled

00:24:39,809 --> 00:24:45,090
client-side by the angular swapping out

00:24:43,229 --> 00:24:49,620
the view for the new component with

00:24:45,090 --> 00:24:52,920
the new route however if I do a refresh

00:24:49,620 --> 00:24:54,780
with my service worker disabled then I

00:24:52,920 --> 00:24:58,350
can go back and examine that initial

00:24:54,780 --> 00:25:01,350
response scroll back down and I can see

00:24:58,350 --> 00:25:03,120
that this also indeed was server side

00:25:01,350 --> 00:25:06,660
rendered and you can see there's a ton

00:25:03,120 --> 00:25:09,330
of content here the entire content of

00:25:06,660 --> 00:25:11,820
the article was server side rendered but

00:25:09,330 --> 00:25:15,420
if I say let's say I go back and then I

00:25:11,820 --> 00:25:17,160
go forward to the article there was no

00:25:15,420 --> 00:25:20,970
additional server-side render call

00:25:17,160 --> 00:25:22,770
everything just happened client-side so

00:25:20,970 --> 00:25:25,680
why would people do server-side

00:25:22,770 --> 00:25:28,980
rendering one it makes your app more

00:25:25,680 --> 00:25:32,070
accessible by web crawlers so for search

00:25:28,980 --> 00:25:34,230
engine optimization purposes having all

00:25:32,070 --> 00:25:37,080
the content readily available to a web

00:25:34,230 --> 00:25:41,060
crawler can aid you and your SEO goals

00:25:37,080 --> 00:25:46,410
the second thing would be performance if

00:25:41,060 --> 00:25:48,750
your page needs to do a lot of i/o

00:25:46,410 --> 00:25:50,310
perhaps or if you have a very large

00:25:48,750 --> 00:25:53,490
application with a lot of a lot of

00:25:50,310 --> 00:25:55,620
JavaScript and it takes a long time for

00:25:53,490 --> 00:25:59,070
that to be transferred to the browser

00:25:55,620 --> 00:26:01,830
over the wire on slow connections let's

00:25:59,070 --> 00:26:02,940
say cheaper mobile devices or in parts

00:26:01,830 --> 00:26:04,620
of the world where people have slower

00:26:02,940 --> 00:26:06,750
connections then you don't want to make

00:26:04,620 --> 00:26:08,160
them wait all the time it takes for that

00:26:06,750 --> 00:26:11,010
JavaScript to make it to their browser

00:26:08,160 --> 00:26:13,080
instead you're a very initial response

00:26:11,010 --> 00:26:15,060
back to them can be the actual HTML of

00:26:13,080 --> 00:26:17,670
the page already rendered and it

00:26:15,060 --> 00:26:20,490
produces a better user experience for

00:26:17,670 --> 00:26:21,960
people in that situation and then once

00:26:20,490 --> 00:26:24,300
the JavaScript does arrive on their

00:26:21,960 --> 00:26:25,580
device it can then take over the rest of

00:26:24,300 --> 00:26:29,520
the application and they can have that

00:26:25,580 --> 00:26:32,310
interactive client-side experience so

00:26:29,520 --> 00:26:35,520
spent a lot of time talking and yes

00:26:32,310 --> 00:26:37,110
cloud shell finished building so we

00:26:35,520 --> 00:26:39,180
demoed the app locally I just want to

00:26:37,110 --> 00:26:44,010
show it off in the cloud show as well so

00:26:39,180 --> 00:26:50,070
NPM runs serve SSR it's the same thing I

00:26:44,010 --> 00:26:52,560
ran locally and I can now go to my

00:26:50,070 --> 00:26:56,750
preview and theoretically it will work

00:26:52,560 --> 00:27:00,270
if i refresh oh now it's listening

00:26:56,750 --> 00:27:02,550
here we go so if you ignore all the

00:27:00,270 --> 00:27:06,470
stuff I did locally here in cloud shell

00:27:02,550 --> 00:27:11,220
I've demonstrated creating a repo

00:27:06,470 --> 00:27:13,140
cloning it npm install' building the app

00:27:11,220 --> 00:27:14,850
and actually running it all in cloud

00:27:13,140 --> 00:27:18,120
shell without having to worry about like

00:27:14,850 --> 00:27:21,030
what kind of setup I already had on my

00:27:18,120 --> 00:27:24,000
local workstation it makes a working on

00:27:21,030 --> 00:27:25,980
like a like a pixel book or some sort of

00:27:24,000 --> 00:27:27,360
Chromebook a little more viable having

00:27:25,980 --> 00:27:29,190
something like cloud shell available to

00:27:27,360 --> 00:27:33,560
you also if you're in a situation with

00:27:29,190 --> 00:27:36,270
low network speeds okay so we have our

00:27:33,560 --> 00:27:38,490
angular universal application it's

00:27:36,270 --> 00:27:40,410
working locally we have demonstrated

00:27:38,490 --> 00:27:43,920
that the server-side rendering itself

00:27:40,410 --> 00:27:47,850
actually works let's see what's next up

00:27:43,920 --> 00:27:51,120
on a workshop deploying okay so we want

00:27:47,850 --> 00:27:53,070
to deploy our app so to deploy to cloud

00:27:51,120 --> 00:27:56,370
run we need to take our app and we need

00:27:53,070 --> 00:27:59,220
to bundle it up into an image something

00:27:56,370 --> 00:28:02,790
that cloud run can can use can work with

00:27:59,220 --> 00:28:07,130
so to bundle it up into an image we need

00:28:02,790 --> 00:28:19,110
to create a docker file docker file is a

00:28:07,130 --> 00:28:20,640
standard sort of declaratory did what

00:28:19,110 --> 00:28:22,230
commands would need to be run to put the

00:28:20,640 --> 00:28:23,580
image together and that's what the

00:28:22,230 --> 00:28:26,790
darker files for so I'm gonna go ahead

00:28:23,580 --> 00:28:28,950
and create these now do I want to do

00:28:26,790 --> 00:28:33,420
cloud shell or do I want to do local on

00:28:28,950 --> 00:28:36,390
cloud shell one option would be to open

00:28:33,420 --> 00:28:38,370
the editor and go make the files and do

00:28:36,390 --> 00:28:41,100
stuff like that another option would be

00:28:38,370 --> 00:28:43,950
to check out step one which we're so I

00:28:41,100 --> 00:28:48,360
don't have to do all that stuff so get

00:28:43,950 --> 00:28:50,820
check out workshop one and in workshop

00:28:48,360 --> 00:28:53,600
one we can see that now we do have the

00:28:50,820 --> 00:28:57,680
two files that the wiki was calling for

00:28:53,600 --> 00:29:01,580
AG cloud ignore file and a docker file

00:28:57,680 --> 00:29:04,679
the G cloud ignore file makes it so that

00:29:01,580 --> 00:29:06,870
when the Google Cloud SDK does our

00:29:04,679 --> 00:29:08,760
deployment it can ignore certain files

00:29:06,870 --> 00:29:10,110
it'll make the deployment a lot faster

00:29:08,760 --> 00:29:13,950
if we for example

00:29:10,110 --> 00:29:16,169
ignore the node modules file in addition

00:29:13,950 --> 00:29:18,149
when you're packaging up docker from

00:29:16,169 --> 00:29:19,860
when you're packaging up images for

00:29:18,149 --> 00:29:21,929
performance optimization you want your

00:29:19,860 --> 00:29:24,809
image to be as small and as lean as

00:29:21,929 --> 00:29:26,940
possible this means fewer bytes to be

00:29:24,809 --> 00:29:29,039
transferred over the wire from your

00:29:26,940 --> 00:29:31,049
local workstation to the Google Cloud

00:29:29,039 --> 00:29:34,980
container registry to the cloud run

00:29:31,049 --> 00:29:36,840
service so faster deployments also when

00:29:34,980 --> 00:29:38,940
you have smaller images it means the

00:29:36,840 --> 00:29:41,909
cold start time of your cloud run

00:29:38,940 --> 00:29:44,210
instances will be shorter because

00:29:41,909 --> 00:29:49,409
there's a smaller image to get booted up

00:29:44,210 --> 00:29:53,880
and also that's pretty much the main

00:29:49,409 --> 00:29:55,970
reason faster deploys and then the dock

00:29:53,880 --> 00:29:59,519
file we can just examine this real quick

00:29:55,970 --> 00:30:02,190
we use the official node.js version 10

00:29:59,519 --> 00:30:05,250
image as our base we set up a working

00:30:02,190 --> 00:30:10,230
directory we copy over package JSON and

00:30:05,250 --> 00:30:11,490
the lock file the during this packaging

00:30:10,230 --> 00:30:12,360
of the image it will install

00:30:11,490 --> 00:30:16,769
dependencies

00:30:12,360 --> 00:30:18,750
into the image so every run command that

00:30:16,769 --> 00:30:20,880
you make adds like a new layer to your

00:30:18,750 --> 00:30:22,980
image and so we will have a specific

00:30:20,880 --> 00:30:25,080
layer that is just the NPM dependencies

00:30:22,980 --> 00:30:27,990
and then we copy over our source code

00:30:25,080 --> 00:30:30,330
and then we build a new layer in our

00:30:27,990 --> 00:30:32,909
image which is going to be the result of

00:30:30,330 --> 00:30:34,919
running the build command with NPM so

00:30:32,909 --> 00:30:36,269
building our application and I should

00:30:34,919 --> 00:30:38,070
probably be explaining this while it's

00:30:36,269 --> 00:30:39,299
running so we don't have to wait for it

00:30:38,070 --> 00:30:42,210
so I'm gonna go start it all quick and

00:30:39,299 --> 00:30:43,909
we'll come back so what does it want me

00:30:42,210 --> 00:30:50,669
to do to actually deploy this thing

00:30:43,909 --> 00:30:57,090
wants me to run this command first in

00:30:50,669 --> 00:30:58,200
cloud shell the I must have copied the

00:30:57,090 --> 00:31:05,279
new line because it tried to run the

00:30:58,200 --> 00:31:07,010
command ok no new lines in cloud shell

00:31:05,279 --> 00:31:09,210
it already has the cloud SDK installed

00:31:07,010 --> 00:31:16,260
so I just need to replace this with my

00:31:09,210 --> 00:31:18,899
project ID ng-conf 2019 workshop and

00:31:16,260 --> 00:31:21,600
what this is doing is it's running a

00:31:18,899 --> 00:31:25,020
command for the cloud build service of

00:31:21,600 --> 00:31:26,910
Google cloud platform which you have two

00:31:25,020 --> 00:31:28,470
ways of building the image you can build

00:31:26,910 --> 00:31:30,870
the image locally using a docker

00:31:28,470 --> 00:31:32,610
installation that you already have or

00:31:30,870 --> 00:31:34,950
you can build the image using cloud

00:31:32,610 --> 00:31:36,630
build what that does is it quickly

00:31:34,950 --> 00:31:38,460
bundles up your directory sends it to

00:31:36,630 --> 00:31:40,169
cloud build and then cloud build does

00:31:38,460 --> 00:31:42,210
the compute work of actually building

00:31:40,169 --> 00:31:44,730
the image up and so you can sort of

00:31:42,210 --> 00:31:47,700
offload that work to another service so

00:31:44,730 --> 00:31:48,900
I'm gonna just start this build and what

00:31:47,700 --> 00:31:50,880
it's going to do is going to package up

00:31:48,900 --> 00:31:54,419
the directory and it's going to start

00:31:50,880 --> 00:31:56,370
sending the build to cloud build notice

00:31:54,419 --> 00:31:58,590
here it just printed out some logs are

00:31:56,370 --> 00:32:00,960
available so I can actually view the

00:31:58,590 --> 00:32:05,370
logs right here in my terminal or I can

00:32:00,960 --> 00:32:07,200
I can flip over to I can just do it here

00:32:05,370 --> 00:32:13,020
we can go look at cloud build cloud

00:32:07,200 --> 00:32:14,669
build and we can see that it actually

00:32:13,020 --> 00:32:17,790
has the build running right there and we

00:32:14,669 --> 00:32:19,080
can see the same logs that are better in

00:32:17,790 --> 00:32:23,549
my terminal I can see him right here in

00:32:19,080 --> 00:32:26,040
cloud build so the step that's running

00:32:23,549 --> 00:32:29,850
right now is NPM install so it's

00:32:26,040 --> 00:32:32,100
installing the dependencies back to the

00:32:29,850 --> 00:32:33,780
docker file itself once it has installed

00:32:32,100 --> 00:32:38,070
the dependencies and built the

00:32:33,780 --> 00:32:39,270
application meaning the angular client

00:32:38,070 --> 00:32:41,610
and the server side part of the

00:32:39,270 --> 00:32:44,429
application the final step is to tell

00:32:41,610 --> 00:32:46,799
the docker image how it's supposed to

00:32:44,429 --> 00:32:49,530
get started what is the entry point

00:32:46,799 --> 00:32:51,690
command and in our case it's the NPM run

00:32:49,530 --> 00:32:54,360
serve SSR it's that same command right

00:32:51,690 --> 00:32:57,980
we demonstrated locally and in in cloud

00:32:54,360 --> 00:33:00,570
shell so what happens is when cloud run

00:32:57,980 --> 00:33:02,850
receives a deployment command

00:33:00,570 --> 00:33:05,370
it'll take this image once it's been

00:33:02,850 --> 00:33:08,040
bundled up and it'll deploy an instance

00:33:05,370 --> 00:33:09,929
of that image it'll it'll spin up a

00:33:08,040 --> 00:33:12,090
container and when that container spins

00:33:09,929 --> 00:33:14,790
up the first thing it's going to do is

00:33:12,090 --> 00:33:18,419
run NPM run serve SSR and then it will

00:33:14,790 --> 00:33:19,950
wait for incoming HTTP requests which I

00:33:18,419 --> 00:33:21,690
mentioned before it can handle those

00:33:19,950 --> 00:33:23,340
concurrently up to whatever you're

00:33:21,690 --> 00:33:24,809
configured limit is before it spins up a

00:33:23,340 --> 00:33:26,350
second instance or a third or a fourth

00:33:24,809 --> 00:33:29,070
or fifth

00:33:26,350 --> 00:33:32,350
or in scales up to me here your traffic

00:33:29,070 --> 00:33:34,929
when you're not when your instance is

00:33:32,350 --> 00:33:38,769
not receiving any requests it will scale

00:33:34,929 --> 00:33:40,870
to zero so that is in contrast to Google

00:33:38,769 --> 00:33:45,549
cloud functions which cannot scale to

00:33:40,870 --> 00:33:47,769
zero and Google App Engine flexible

00:33:45,549 --> 00:33:50,620
environment which also cannot scale to

00:33:47,769 --> 00:33:53,529
zero so if you're thinking about cost

00:33:50,620 --> 00:33:55,000
say with Google cloud run you can scale

00:33:53,529 --> 00:33:56,350
to zero that's not being used you're not

00:33:55,000 --> 00:33:58,809
paying for it

00:33:56,350 --> 00:34:01,840
in addition Google cloud run has a

00:33:58,809 --> 00:34:08,649
generous free tier so if you look at the

00:34:01,840 --> 00:34:12,760
docs for cloud run pricing you got 2

00:34:08,649 --> 00:34:14,819
million free requests also all

00:34:12,760 --> 00:34:18,369
networking cost is free during beta

00:34:14,819 --> 00:34:20,919
after beta exits some there will be some

00:34:18,369 --> 00:34:22,810
additional free tier 2 network egress

00:34:20,919 --> 00:34:26,169
and then beyond that free tier there

00:34:22,810 --> 00:34:27,609
will be some cost so everyone should

00:34:26,169 --> 00:34:30,220
feel free to go ahead and try cloud run

00:34:27,609 --> 00:34:33,460
for side projects or whatever using it

00:34:30,220 --> 00:34:36,550
for a firebase dynamic hosting if you're

00:34:33,460 --> 00:34:38,290
wanting to put an API back-end into a

00:34:36,550 --> 00:34:41,829
cloud run instance you can do that just

00:34:38,290 --> 00:34:43,060
with an Express app or you could you

00:34:41,829 --> 00:34:45,490
could do other things with cloud run

00:34:43,060 --> 00:34:48,970
like use it as a service environment for

00:34:45,490 --> 00:34:50,889
some sort of data pipeline that's maybe

00:34:48,970 --> 00:34:54,790
not necessarily embedded in some user

00:34:50,889 --> 00:34:56,379
facing request it's also very handy if

00:34:54,790 --> 00:34:58,060
you want to use it as like a recipient

00:34:56,379 --> 00:35:00,069
of a web hook like if you're building

00:34:58,060 --> 00:35:02,589
and github bot or a slack chat bot or

00:35:00,069 --> 00:35:04,390
something like that you can do those

00:35:02,589 --> 00:35:07,030
with cloud functions though with cloud

00:35:04,390 --> 00:35:09,940
functions you're kind of limited to the

00:35:07,030 --> 00:35:11,680
available runtime types with with cloud

00:35:09,940 --> 00:35:15,099
run you can make your own docker image

00:35:11,680 --> 00:35:17,109
so you could write it in Erlang or

00:35:15,099 --> 00:35:20,650
something and handle your github for web

00:35:17,109 --> 00:35:23,319
hooks so cloud shell the build which

00:35:20,650 --> 00:35:25,450
point is it at now okay so is install

00:35:23,319 --> 00:35:28,329
dependencies and it is currently working

00:35:25,450 --> 00:35:30,069
on the second half of the angular build

00:35:28,329 --> 00:35:32,700
it built the front-end and it's now

00:35:30,069 --> 00:35:32,700
building the server

00:35:35,660 --> 00:35:40,560
realizing we're gonna want to run this

00:35:38,070 --> 00:35:45,810
command as few times as possible during

00:35:40,560 --> 00:35:47,220
the workshop and it's finishing up so it

00:35:45,810 --> 00:35:49,070
finished the image and it's now pushing

00:35:47,220 --> 00:35:52,070
the image to the Google cloud container

00:35:49,070 --> 00:35:52,070
repository

00:35:59,600 --> 00:36:04,070
the Google Cloud container repository is

00:36:01,640 --> 00:36:07,820
similar to docker hub it's a place to

00:36:04,070 --> 00:36:10,580
store images and it's basically backed

00:36:07,820 --> 00:36:12,380
by Google Cloud storage so they're just

00:36:10,580 --> 00:36:14,240
blobs sitting in Google Cloud storage

00:36:12,380 --> 00:36:16,340
and container registry provides in

00:36:14,240 --> 00:36:17,990
convenient api on top of that so docker

00:36:16,340 --> 00:36:19,730
can actually talk to the Google Cloud

00:36:17,990 --> 00:36:23,360
container registry as well as these

00:36:19,730 --> 00:36:27,290
other Google cloud services ok it

00:36:23,360 --> 00:36:29,270
finished so basically what we just did

00:36:27,290 --> 00:36:31,670
here is we packaged up our angular

00:36:29,270 --> 00:36:33,230
Universal app into a docker image and

00:36:31,670 --> 00:36:35,690
we'd push that up to the Google Cloud

00:36:33,230 --> 00:36:37,810
container registry the second command is

00:36:35,690 --> 00:36:43,910
to take that newly deployed image and

00:36:37,810 --> 00:36:45,170
deploy it to cloud run so we can do that

00:36:43,910 --> 00:36:49,220
with the UI but I'm going to go ahead

00:36:45,170 --> 00:36:54,910
and just run the command line command

00:36:49,220 --> 00:36:54,910
for that so ng-conf 2019 workshop

00:36:58,090 --> 00:37:03,860
let's see pick a region there's only one

00:37:01,070 --> 00:37:06,070
choice Universal is our service name

00:37:03,860 --> 00:37:09,110
sounds good to me

00:37:06,070 --> 00:37:13,340
allow enough any cated access we want to

00:37:09,110 --> 00:37:16,100
say yes that way potentially any of you

00:37:13,340 --> 00:37:19,520
could make a request to my container

00:37:16,100 --> 00:37:23,570
instance otherwise what's the what would

00:37:19,520 --> 00:37:26,570
the default be like internal network

00:37:23,570 --> 00:37:27,920
only like maybe only other VMs deployed

00:37:26,570 --> 00:37:31,610
in your project would be able to talk to

00:37:27,920 --> 00:37:34,640
your cloud run instance or possibly

00:37:31,610 --> 00:37:36,680
people people signed in with Google who

00:37:34,640 --> 00:37:41,450
have some sort of permissions on the

00:37:36,680 --> 00:37:45,260
project itself so it's doing a couple

00:37:41,450 --> 00:37:46,880
things in parallel it set up the policy

00:37:45,260 --> 00:37:49,100
that will enable anyone to hit this

00:37:46,880 --> 00:37:51,110
instance it's creating its deploying the

00:37:49,100 --> 00:37:53,600
service and creating a revision once it

00:37:51,110 --> 00:37:56,570
creates the revision it will route

00:37:53,600 --> 00:37:58,070
traffic to it that's the default and so

00:37:56,570 --> 00:38:01,370
my new instance will start receiving all

00:37:58,070 --> 00:38:03,290
traffic so that's done which was

00:38:01,370 --> 00:38:06,010
blessedly fast compared to App Engine

00:38:03,290 --> 00:38:06,010
inflexible

00:38:06,460 --> 00:38:11,120
so let's go check it out okay so we're

00:38:09,680 --> 00:38:13,090
looking at the cloud build UI here we

00:38:11,120 --> 00:38:15,500
can go back to Claude run

00:38:13,090 --> 00:38:17,920
just see what happened over there so

00:38:15,500 --> 00:38:20,780
cloud run here's our Universal Service

00:38:17,920 --> 00:38:23,480
it's got a single revision it was just

00:38:20,780 --> 00:38:26,540
deployed and here's the URL for it so if

00:38:23,480 --> 00:38:28,460
I click that I now see that same angular

00:38:26,540 --> 00:38:30,830
Universal app that we deployed locally

00:38:28,460 --> 00:38:33,920
or in an include shell is now deployed

00:38:30,830 --> 00:38:36,710
to cloud run so if we were to send a

00:38:33,920 --> 00:38:38,300
thousand concurrent requests to this I'm

00:38:36,710 --> 00:38:40,340
not sure what the default limit I think

00:38:38,300 --> 00:38:42,620
it's like maybe 80 or something

00:38:40,340 --> 00:38:44,210
once it receives more than 80 concurrent

00:38:42,620 --> 00:38:46,880
requests cloud run spins up more

00:38:44,210 --> 00:38:48,170
instances and it does that very fast so

00:38:46,880 --> 00:38:49,940
we could send a thousand concurrent

00:38:48,170 --> 00:38:51,770
requests and cloud one would instantly

00:38:49,940 --> 00:38:56,540
scale up to handle all of them at once

00:38:51,770 --> 00:39:01,580
and be able to serve them so the very

00:38:56,540 --> 00:39:02,690
first talk I would like we'll see let's

00:39:01,580 --> 00:39:05,780
just double check that it's still

00:39:02,690 --> 00:39:08,780
server-side rendering real quick let's

00:39:05,780 --> 00:39:14,920
close my preview close my other local

00:39:08,780 --> 00:39:19,460
one cause that one so if i refresh this

00:39:14,920 --> 00:39:22,220
let's just double check that service

00:39:19,460 --> 00:39:24,350
workers are still off ok still off on

00:39:22,220 --> 00:39:26,210
the service workers go back to the

00:39:24,350 --> 00:39:31,570
network tab click on the initial

00:39:26,210 --> 00:39:34,580
response scroll to the bottom look over

00:39:31,570 --> 00:39:37,490
there it is all the server-side rendered

00:39:34,580 --> 00:39:38,870
HTML is there ok and then if I go to the

00:39:37,490 --> 00:39:41,750
home page and click on the blog post

00:39:38,870 --> 00:39:43,370
again there were no initial requests for

00:39:41,750 --> 00:39:46,460
HTML it just went and rendered all

00:39:43,370 --> 00:39:48,290
client-side making a couple our pcs

00:39:46,460 --> 00:39:54,650
supposedly with further to the firebase

00:39:48,290 --> 00:39:57,110
database ok so part of this talk or

00:39:54,650 --> 00:39:59,660
workshop was to not only examine how to

00:39:57,110 --> 00:40:01,370
use Google's service technologies to

00:39:59,660 --> 00:40:02,960
deploy an angular universal app so you

00:40:01,370 --> 00:40:04,970
can have server-side rendering but to

00:40:02,960 --> 00:40:07,970
also talk about some of the production

00:40:04,970 --> 00:40:10,010
concerns you might have once you are in

00:40:07,970 --> 00:40:15,440
the boat of having a server-side

00:40:10,010 --> 00:40:18,650
rendered out so let's let's go back to

00:40:15,440 --> 00:40:21,980
the app and let's try something so we've

00:40:18,650 --> 00:40:23,330
got the article page we already

00:40:21,980 --> 00:40:24,709
demonstrated that that server-side

00:40:23,330 --> 00:40:29,249
rendering is working there

00:40:24,709 --> 00:40:30,660
we've got the home page we already

00:40:29,249 --> 00:40:32,299
demonstrated server-side rendering is

00:40:30,660 --> 00:40:35,189
working there let's try the author page

00:40:32,299 --> 00:40:38,969
so here's the author maybe we should try

00:40:35,189 --> 00:40:42,599
this one there's James he has written

00:40:38,969 --> 00:40:43,949
some blog posts so I'm gonna refresh and

00:40:42,599 --> 00:40:45,479
I'm gonna go to the network tab and

00:40:43,949 --> 00:40:50,369
let's see if this did any server-side

00:40:45,479 --> 00:40:54,029
rendering okay so there's the app root

00:40:50,369 --> 00:40:59,069
and there's the router outlet but

00:40:54,029 --> 00:41:00,900
there's nothing else okay so what can we

00:40:59,069 --> 00:41:03,569
do to figure out why this particular

00:41:00,900 --> 00:41:06,779
page did not server-side render it still

00:41:03,569 --> 00:41:07,259
worked which is cool like I guess that's

00:41:06,779 --> 00:41:09,029
impressive

00:41:07,259 --> 00:41:11,309
it didn't server-side render but somehow

00:41:09,029 --> 00:41:12,569
the page still worked what happens

00:41:11,309 --> 00:41:15,929
basically is if the server-side

00:41:12,569 --> 00:41:17,849
rendering fails it just gives up I'm not

00:41:15,929 --> 00:41:20,279
sure how long it waits before it gives

00:41:17,849 --> 00:41:22,140
up it maybe it just gives up as soon as

00:41:20,279 --> 00:41:24,359
the error whatever error happens and you

00:41:22,140 --> 00:41:28,650
know it's been it's being kicked out of

00:41:24,359 --> 00:41:30,419
its process and regardless eventually

00:41:28,650 --> 00:41:31,919
the client-side JavaScript arrived in

00:41:30,419 --> 00:41:33,479
the browser and just took over anyway

00:41:31,919 --> 00:41:34,589
and said okay I know what's supposed to

00:41:33,479 --> 00:41:37,650
happen it looks like it hasn't happened

00:41:34,589 --> 00:41:39,630
yet so let's go render this page but we

00:41:37,650 --> 00:41:40,979
still need to figure out why the

00:41:39,630 --> 00:41:42,659
server-side rendering didn't work for

00:41:40,979 --> 00:41:46,259
this particular page and we have a

00:41:42,659 --> 00:41:48,630
couple ways to do that so one feature of

00:41:46,259 --> 00:41:50,729
Google Cloud run is that it integrates

00:41:48,630 --> 00:41:54,719
automatically with stackdriver logging

00:41:50,729 --> 00:41:57,209
and stack driver error reporting stack

00:41:54,719 --> 00:42:00,269
driver is Google cloud platforms suite

00:41:57,209 --> 00:42:03,689
of performance and health monitoring

00:42:00,269 --> 00:42:07,289
tools for applications and systems in

00:42:03,689 --> 00:42:13,049
Google cloud so stack driver logging so

00:42:07,289 --> 00:42:15,029
we can just search for logging so this

00:42:13,049 --> 00:42:16,949
is just the general logging view and you

00:42:15,029 --> 00:42:18,449
can sort of pick what what logs you want

00:42:16,949 --> 00:42:22,919
to look at so I'm gonna go to cloud run

00:42:18,449 --> 00:42:24,239
we're gonna look at our Universal app so

00:42:22,919 --> 00:42:27,539
you can see a bunch of request logs

00:42:24,239 --> 00:42:29,339
stuff happening here ah okay this looks

00:42:27,539 --> 00:42:31,469
a little interesting it looks like a big

00:42:29,339 --> 00:42:34,519
stack trace stack traces are usually bad

00:42:31,469 --> 00:42:38,160
news you do not want to see stack traces

00:42:34,519 --> 00:42:42,000
okay error something broke on the server

00:42:38,160 --> 00:42:44,579
that's not contrived so stacktrace

00:42:42,000 --> 00:42:47,280
happened on the oh that's the page we

00:42:44,579 --> 00:42:51,329
were looking at authors and some non

00:42:47,280 --> 00:42:53,099
memorize able ID okay that's the page it

00:42:51,329 --> 00:42:55,890
didn't work so this must be the problem

00:42:53,099 --> 00:43:00,119
so we got a stack trace looks like it

00:42:55,890 --> 00:43:01,530
happened in Maine dot J s I'm not sure

00:43:00,119 --> 00:43:04,230
the stack trace is really gonna help me

00:43:01,530 --> 00:43:06,990
figure out where the problem was you

00:43:04,230 --> 00:43:08,819
know the code maybe got bundled to some

00:43:06,990 --> 00:43:12,900
degree and has been moved around and

00:43:08,819 --> 00:43:14,609
mean J S five to six I mean is do we

00:43:12,900 --> 00:43:16,890
even have a Maine jeaious I guess there

00:43:14,609 --> 00:43:18,240
is but it's only thirteen lines along so

00:43:16,890 --> 00:43:22,260
that stack trace really is not gonna

00:43:18,240 --> 00:43:23,730
help me there okay what can we do well

00:43:22,260 --> 00:43:27,299
we could check out stack driver error

00:43:23,730 --> 00:43:30,450
reporting see that I could shed any more

00:43:27,299 --> 00:43:34,530
light on this what error reporting does

00:43:30,450 --> 00:43:37,530
is automatically for App Engine and

00:43:34,530 --> 00:43:41,750
cloud run and Cod functions if if your

00:43:37,530 --> 00:43:44,010
code writes anything to standard error

00:43:41,750 --> 00:43:46,079
stack driver error reporting picks up

00:43:44,010 --> 00:43:48,450
that picks up on that automatically and

00:43:46,079 --> 00:43:51,329
actually creates new error instances in

00:43:48,450 --> 00:43:53,549
this dashboard that can give you details

00:43:51,329 --> 00:43:56,180
such as how often it's occurring when it

00:43:53,549 --> 00:44:00,960
last occurred the actual stack trace and

00:43:56,180 --> 00:44:03,750
then some other capabilities like you

00:44:00,960 --> 00:44:05,160
could subscribe to get notifications so

00:44:03,750 --> 00:44:07,079
you like for example right here it's got

00:44:05,160 --> 00:44:08,819
this little info bar I can turn on

00:44:07,079 --> 00:44:10,410
notifications for stack driver error

00:44:08,819 --> 00:44:14,099
reporting and what that does is it will

00:44:10,410 --> 00:44:16,490
send an email to you whenever a new type

00:44:14,099 --> 00:44:19,140
of error occurs in your application so

00:44:16,490 --> 00:44:21,539
if I had turned that on before I

00:44:19,140 --> 00:44:23,910
deployed to production then the very

00:44:21,539 --> 00:44:26,220
first time I tried that broken page I

00:44:23,910 --> 00:44:28,710
would have got an email saying yo you

00:44:26,220 --> 00:44:30,329
got a problem with your app so when it

00:44:28,710 --> 00:44:33,150
comes to dealing with production that's

00:44:30,329 --> 00:44:34,589
something that's very handy it's still

00:44:33,150 --> 00:44:36,089
pretty basic if you wanted to do

00:44:34,589 --> 00:44:37,829
something really advanced you could dig

00:44:36,089 --> 00:44:40,470
into stack driver monitoring and you can

00:44:37,829 --> 00:44:42,450
set up custom uptime checks

00:44:40,470 --> 00:44:44,160
custom alerting policies you could have

00:44:42,450 --> 00:44:47,490
let yourself on any kind of policy you

00:44:44,160 --> 00:44:50,150
want cloud run sends metrics by default

00:44:47,490 --> 00:44:53,630
to stock driver monitoring such as

00:44:50,150 --> 00:44:56,299
how many instance seconds are being used

00:44:53,630 --> 00:44:58,460
how much memory is being used like if

00:44:56,299 --> 00:44:59,900
your instance exceeds some memory memory

00:44:58,460 --> 00:45:02,599
limit you can have it send you an email

00:44:59,900 --> 00:45:05,329
for that so looking at this error

00:45:02,599 --> 00:45:06,589
something broke on the server okay it

00:45:05,329 --> 00:45:09,440
actually does have something a little

00:45:06,589 --> 00:45:15,049
interesting author component okay that

00:45:09,440 --> 00:45:18,140
gives me some direction home author dot

00:45:15,049 --> 00:45:25,400
module dot TS a bunch of HTML bunch of

00:45:18,140 --> 00:45:27,349
JavaScript this might be the problem but

00:45:25,400 --> 00:45:28,849
in case it wasn't this obvious there is

00:45:27,349 --> 00:45:31,279
one more thing you could try to figure

00:45:28,849 --> 00:45:35,390
out what's wrong and that is to use the

00:45:31,279 --> 00:45:37,279
cloud debugger so how do you normally

00:45:35,390 --> 00:45:40,220
debug an app that's running in

00:45:37,279 --> 00:45:44,029
production do you add console dialogue

00:45:40,220 --> 00:45:48,079
statements and redeploy yeah I've seen

00:45:44,029 --> 00:45:52,190
you have nodding heads sometimes that's

00:45:48,079 --> 00:45:53,569
a pain usually it's a pain how long does

00:45:52,190 --> 00:45:56,059
it take you to get the deployment out

00:45:53,569 --> 00:45:57,200
like that's something to think about

00:45:56,059 --> 00:45:58,910
like how long is it gonna be before

00:45:57,200 --> 00:46:02,269
you're able to actually start debugging

00:45:58,910 --> 00:46:03,920
right what about replicating the

00:46:02,269 --> 00:46:06,349
particular use case maybe it's only

00:46:03,920 --> 00:46:09,619
happening on a given user and you don't

00:46:06,349 --> 00:46:11,569
have a way to like act as them to sort

00:46:09,619 --> 00:46:13,579
of replicate their use case like it's

00:46:11,569 --> 00:46:15,049
literally something that it always works

00:46:13,579 --> 00:46:16,369
on your machine but it doesn't work when

00:46:15,049 --> 00:46:20,269
you go to production in this particular

00:46:16,369 --> 00:46:21,380
user does a particular thing well I

00:46:20,269 --> 00:46:24,619
think most people are probably familiar

00:46:21,380 --> 00:46:27,230
with chrome dev tools or anything else

00:46:24,619 --> 00:46:29,029
that can debug JavaScript running in the

00:46:27,230 --> 00:46:30,739
browser you can put that little debugger

00:46:29,029 --> 00:46:33,259
statement in and it'll pause execution

00:46:30,739 --> 00:46:35,180
and you can sit there and step through

00:46:33,259 --> 00:46:37,130
stuff that's actually not very helpful

00:46:35,180 --> 00:46:39,589
though in production when it's like some

00:46:37,130 --> 00:46:41,269
user of yours like you can't call them

00:46:39,589 --> 00:46:43,400
up and be like can you edit the source

00:46:41,269 --> 00:46:45,019
code and like step through stuff and

00:46:43,400 --> 00:46:48,289
chrome dev tools like you can't like do

00:46:45,019 --> 00:46:49,400
that and you don't want to put it you

00:46:48,289 --> 00:46:52,519
don't want to deploy debugger statement

00:46:49,400 --> 00:46:54,670
to production like this bed because it

00:46:52,519 --> 00:46:57,589
will actually pause everyone else so

00:46:54,670 --> 00:46:58,819
with cloud debugger you just sort of you

00:46:57,589 --> 00:47:02,989
can pull it up here if you go to cloud

00:46:58,819 --> 00:47:03,830
Google comm debugger Docs it'll have

00:47:02,989 --> 00:47:06,680
some explanations

00:47:03,830 --> 00:47:08,750
what stackdriver debugger is what it is

00:47:06,680 --> 00:47:12,170
is it allows you to debug your

00:47:08,750 --> 00:47:14,110
productions as they run sorry debug your

00:47:12,170 --> 00:47:19,720
applications as they run in production

00:47:14,110 --> 00:47:23,390
so on the fly it can add what we call

00:47:19,720 --> 00:47:25,640
snapshots to your source code as well as

00:47:23,390 --> 00:47:27,830
log points it can dynamically insert

00:47:25,640 --> 00:47:29,660
logs to your code so the very fit next

00:47:27,830 --> 00:47:31,370
time someone hits a particular code path

00:47:29,660 --> 00:47:34,100
it'll trigger those logs and they'll

00:47:31,370 --> 00:47:36,530
show up in stackdriver logging with the

00:47:34,100 --> 00:47:38,960
snapshots that one's kind of like a

00:47:36,530 --> 00:47:41,660
break point except it doesn't stop

00:47:38,960 --> 00:47:43,220
execution so if you can figure out the

00:47:41,660 --> 00:47:44,690
code path that a particular user is

00:47:43,220 --> 00:47:46,280
hitting in production that you can't

00:47:44,690 --> 00:47:48,560
seem to replicate you can go to a

00:47:46,280 --> 00:47:50,810
debugger you can add a snapshot to that

00:47:48,560 --> 00:47:52,670
point in time and then the next time the

00:47:50,810 --> 00:47:55,430
user goes to that path it'll actually

00:47:52,670 --> 00:47:57,080
capture all the state of the code at

00:47:55,430 --> 00:48:01,400
that point in time and I'll just display

00:47:57,080 --> 00:48:04,550
it in the dashboard so you can actually

00:48:01,400 --> 00:48:07,640
examine whoops you can examine like the

00:48:04,550 --> 00:48:10,460
state of various variables when the user

00:48:07,640 --> 00:48:13,490
went through a particular code path so

00:48:10,460 --> 00:48:14,300
how would we do this mm-hmm there's a

00:48:13,490 --> 00:48:17,150
bunch of instructions

00:48:14,300 --> 00:48:21,020
I think our workshop doc might have

00:48:17,150 --> 00:48:23,360
something in here okay so what we want

00:48:21,020 --> 00:48:25,430
to do is we want to install the trace

00:48:23,360 --> 00:48:27,290
agent the debug agent in the profile

00:48:25,430 --> 00:48:29,510
agent I haven't talked about trace and

00:48:27,290 --> 00:48:32,840
profiler yet but what trace does is

00:48:29,510 --> 00:48:34,580
trace will trace all of your our pcs so

00:48:32,840 --> 00:48:36,610
you use that for performance analysis on

00:48:34,580 --> 00:48:40,580
IO and things like that

00:48:36,610 --> 00:48:42,620
profiler is basically the chrome dev

00:48:40,580 --> 00:48:45,290
tools profiler running in the cloud on

00:48:42,620 --> 00:48:48,200
your production app and in saving

00:48:45,290 --> 00:48:51,380
profile snapshots on the fly to be used

00:48:48,200 --> 00:48:53,030
in the cloud console dashboard so before

00:48:51,380 --> 00:48:54,260
we do this because obviously we're going

00:48:53,030 --> 00:48:56,180
to change code and we're going to need

00:48:54,260 --> 00:48:59,180
to redeploy and it took a little while

00:48:56,180 --> 00:49:01,700
to redeploy so we're gonna add what's

00:48:59,180 --> 00:49:04,610
called a cloud build yamo file and what

00:49:01,700 --> 00:49:06,770
this does is we're gonna configure cloud

00:49:04,610 --> 00:49:08,150
build to not only build the image for us

00:49:06,770 --> 00:49:11,210
but deploy it for us at the same time

00:49:08,150 --> 00:49:12,950
and we have a slightly different method

00:49:11,210 --> 00:49:15,050
of building the docker image this time

00:49:12,950 --> 00:49:18,080
we're using what's called the Kanak

00:49:15,050 --> 00:49:20,510
Conoco cache on site Tanika Conoco I

00:49:18,080 --> 00:49:22,820
don't know cloud build has a caching

00:49:20,510 --> 00:49:24,620
feature where for each additional layer

00:49:22,820 --> 00:49:26,690
that is added to your image it can cache

00:49:24,620 --> 00:49:29,510
those individually and it can figure out

00:49:26,690 --> 00:49:31,040
if they have changed or not so if a

00:49:29,510 --> 00:49:32,780
given layer hasn't changed it can just

00:49:31,040 --> 00:49:35,000
reuse it right away and shorten your

00:49:32,780 --> 00:49:37,420
build times so it looks like to do this

00:49:35,000 --> 00:49:42,980
we need to add a cloud build yamo file

00:49:37,420 --> 00:49:46,220
we can do that by simply let's go to

00:49:42,980 --> 00:49:49,640
cloud shell we can check out workshop

00:49:46,220 --> 00:49:52,310
two and we've added a cloud build the mo

00:49:49,640 --> 00:49:55,100
file and we can examine it there it is

00:49:52,310 --> 00:49:59,120
it's the same one as described in the

00:49:55,100 --> 00:50:01,040
wiki but we're not going to deploy just

00:49:59,120 --> 00:50:04,660
yet because we still need to go add that

00:50:01,040 --> 00:50:09,320
other stuff so we can do that by

00:50:04,660 --> 00:50:13,880
checking out workshop 3 so we're sort of

00:50:09,320 --> 00:50:18,770
skipping a step we're just combining two

00:50:13,880 --> 00:50:24,320
steps into one oh I have a change let's

00:50:18,770 --> 00:50:25,160
get rid of that and now let's check out

00:50:24,320 --> 00:50:27,470
step 3

00:50:25,160 --> 00:50:29,720
okay so on step 3 what's the difference

00:50:27,470 --> 00:50:33,800
between step two and step three step

00:50:29,720 --> 00:50:36,800
three simply added step three did this

00:50:33,800 --> 00:50:40,910
it installed the three libraries and it

00:50:36,800 --> 00:50:42,590
added them to server TS at the very very

00:50:40,910 --> 00:50:48,010
top and it's important that they be it's

00:50:42,590 --> 00:50:48,010
a very very top we can check that out

00:50:48,580 --> 00:50:54,050
there they are at the very top they add

00:50:51,950 --> 00:50:55,490
hooks to the node runtime to be able to

00:50:54,050 --> 00:50:57,230
examine everything that's going on and

00:50:55,490 --> 00:50:58,490
be able to do what they're supposed to

00:50:57,230 --> 00:51:00,710
you essentially okay

00:50:58,490 --> 00:51:03,140
so we now have two options at this point

00:51:00,710 --> 00:51:04,790
once again I can run a command that

00:51:03,140 --> 00:51:06,770
would trigger the build I could do that

00:51:04,790 --> 00:51:10,160
do I really want to have to do that

00:51:06,770 --> 00:51:12,580
every time though not really so what we

00:51:10,160 --> 00:51:18,200
can do is we can set up automatic builds

00:51:12,580 --> 00:51:20,420
so if we go back to run Docs we've got

00:51:18,200 --> 00:51:24,130
some deploy continues to point it from

00:51:20,420 --> 00:51:26,510
get set up continues deployment

00:51:24,130 --> 00:51:28,730
automating builds using build triggers

00:51:26,510 --> 00:51:30,440
okay that's cool

00:51:28,730 --> 00:51:32,510
okay so with a build trigger it looks

00:51:30,440 --> 00:51:34,010
like in order to do a build trigger you

00:51:32,510 --> 00:51:36,110
need source code in the cloud source

00:51:34,010 --> 00:51:37,220
repository guess what that was something

00:51:36,110 --> 00:51:39,800
we did earlier that I said would be

00:51:37,220 --> 00:51:41,330
relevant later so we can go up instead

00:51:39,800 --> 00:51:43,730
of go ahead and set up the build trigger

00:51:41,330 --> 00:51:48,410
so we're not doing debug yet we've got

00:51:43,730 --> 00:51:49,850
to go back to cloud build build and go

00:51:48,410 --> 00:51:52,550
to triggers and we're gonna create a

00:51:49,850 --> 00:51:55,430
trigger with selected cloud source

00:51:52,550 --> 00:51:57,140
repository and let's select the one

00:51:55,430 --> 00:51:59,060
called on snapshot which is the one we

00:51:57,140 --> 00:52:01,520
made that we pushed all the on snap on

00:51:59,060 --> 00:52:04,190
snapshot code to we're just going to

00:52:01,520 --> 00:52:05,150
call it our ng-conf demo that's the name

00:52:04,190 --> 00:52:07,220
of the trigger it doesn't really matter

00:52:05,150 --> 00:52:10,730
what the name is we're only gonna watch

00:52:07,220 --> 00:52:12,650
the master branch you can set it up to

00:52:10,730 --> 00:52:14,150
deploy from every single branch but our

00:52:12,650 --> 00:52:15,680
cloud build yama was actually going to

00:52:14,150 --> 00:52:17,270
try and deploy a container and so you

00:52:15,680 --> 00:52:19,310
don't necessarily want every push to

00:52:17,270 --> 00:52:22,580
every branch overriding your same

00:52:19,310 --> 00:52:24,860
container deploy so we're just going to

00:52:22,580 --> 00:52:26,840
limit ourselves to the master branch and

00:52:24,860 --> 00:52:28,460
we're not using a backer file we're

00:52:26,840 --> 00:52:30,080
going to use the cloud build yamo file

00:52:28,460 --> 00:52:32,720
that we just added and then i'm going to

00:52:30,080 --> 00:52:34,430
create this trigger so what this does

00:52:32,720 --> 00:52:36,260
we'll do is every time we push to the

00:52:34,430 --> 00:52:39,860
master branch it will deploy our angular

00:52:36,260 --> 00:52:42,020
universal app for us on the fly so how

00:52:39,860 --> 00:52:45,200
do we actually push to the master branch

00:52:42,020 --> 00:52:47,540
the stuff that we currently have on what

00:52:45,200 --> 00:52:51,070
are we on we're on workshop 3 we can

00:52:47,540 --> 00:52:54,320
actually just do this get push dash F

00:52:51,070 --> 00:52:56,720
origin which is the Google Cloud source

00:52:54,320 --> 00:52:59,660
repository and then we're gonna take

00:52:56,720 --> 00:53:05,830
workshop 3 and we're going to overwrite

00:52:59,660 --> 00:53:08,720
the master branch for clarity and

00:53:05,830 --> 00:53:12,920
shortness you probably don't want to use

00:53:08,720 --> 00:53:15,290
force push outside of demos like this

00:53:12,920 --> 00:53:17,540
okay so we just forced pushed onto the

00:53:15,290 --> 00:53:19,850
master branch let's go see what's

00:53:17,540 --> 00:53:22,610
happening we're on the page already

00:53:19,850 --> 00:53:26,690
history there is a build running sweet

00:53:22,610 --> 00:53:27,890
yay that part of the demo worked so we

00:53:26,690 --> 00:53:31,310
can actually go click on this and see

00:53:27,890 --> 00:53:34,280
what's happening it's now using the

00:53:31,310 --> 00:53:36,140
Conoco cache it's the very first time

00:53:34,280 --> 00:53:38,630
it's running so there's nothing cached

00:53:36,140 --> 00:53:41,080
yet but the next time we deploy it will

00:53:38,630 --> 00:53:41,080
be faster

00:53:41,739 --> 00:53:51,430
so this will probably take like four

00:53:43,819 --> 00:53:54,559
minutes but while we're waiting we can

00:53:51,430 --> 00:53:56,950
talk about the next other theme we were

00:53:54,559 --> 00:53:59,660
going to do okay so back to our app

00:53:56,950 --> 00:54:01,660
we've basically figured out where the

00:53:59,660 --> 00:54:04,279
problem was and why this page was not

00:54:01,660 --> 00:54:06,289
server-side rendering there is an error

00:54:04,279 --> 00:54:08,509
happening on the server and it only

00:54:06,289 --> 00:54:09,979
happens on the server it's pretty

00:54:08,509 --> 00:54:11,119
convenient if you can find an error that

00:54:09,979 --> 00:54:12,440
happens on both the client and the

00:54:11,119 --> 00:54:15,200
server but if you find an error that's

00:54:12,440 --> 00:54:17,650
only happening on the server it makes it

00:54:15,200 --> 00:54:20,569
a little easier if you can have

00:54:17,650 --> 00:54:23,710
stackdriver debugger and stackdriver

00:54:20,569 --> 00:54:23,710
error reporting available to you

00:54:23,829 --> 00:54:29,930
the automatic build triggers still

00:54:26,210 --> 00:54:31,279
running looks like it's now running npm

00:54:29,930 --> 00:54:35,660
install which is going to be pulling in

00:54:31,279 --> 00:54:38,660
our new libraries I think we're getting

00:54:35,660 --> 00:54:40,930
low on time so instead of waiting for

00:54:38,660 --> 00:54:43,789
this build I'm gonna flip over to

00:54:40,930 --> 00:54:45,410
another project that I already prepared

00:54:43,789 --> 00:54:48,400
this sort of already has this stuff done

00:54:45,410 --> 00:54:53,390
and we can examine what it looks like so

00:54:48,400 --> 00:54:54,650
I'm gonna switch over to that now yeah

00:54:53,390 --> 00:54:56,029
I'm gonna go ahead and close my cloud

00:54:54,650 --> 00:55:03,049
shell and switch over to the other

00:54:56,029 --> 00:55:04,579
project I wanted to show you what the

00:55:03,049 --> 00:55:09,039
trace in the error reporting stuff

00:55:04,579 --> 00:55:16,999
looked like so let's look at trace first

00:55:09,039 --> 00:55:18,950
trace here we go so this is a version of

00:55:16,999 --> 00:55:21,529
the angular universal app that I already

00:55:18,950 --> 00:55:24,140
deployed with trace enabled what happens

00:55:21,529 --> 00:55:26,180
is every time the app runs trace will

00:55:24,140 --> 00:55:27,769
record every single RPC that happens and

00:55:26,180 --> 00:55:31,069
record those here in the cloud console

00:55:27,769 --> 00:55:33,950
and what happens is if you get at least

00:55:31,069 --> 00:55:35,869
a hundred traces on a given RPC you can

00:55:33,950 --> 00:55:37,660
start to do analysis reports on them and

00:55:35,869 --> 00:55:40,369
it can tell you like what's the average

00:55:37,660 --> 00:55:42,440
latency of a given RPC and things like

00:55:40,369 --> 00:55:43,969
that I didn't take the time to hit the

00:55:42,440 --> 00:55:46,369
end point a hundred times so I could

00:55:43,969 --> 00:55:49,869
make an analysis report but we can just

00:55:46,369 --> 00:55:49,869
go look at the trace list

00:55:50,310 --> 00:55:58,050
I did it over an hour ago so we'll

00:55:52,050 --> 00:56:02,430
switch to four hours okay articles DX

00:55:58,050 --> 00:56:09,090
something something all right we can

00:56:02,430 --> 00:56:10,890
filter by that actually so look I looks

00:56:09,090 --> 00:56:14,100
like I hit this page eight times in the

00:56:10,890 --> 00:56:15,750
last four hours and the the time was on

00:56:14,100 --> 00:56:18,830
the order of 100 something milliseconds

00:56:15,750 --> 00:56:21,540
there was one that was 600 milliseconds

00:56:18,830 --> 00:56:23,430
depending on the type of RPC that your

00:56:21,540 --> 00:56:25,890
page is doing let's say you needed to

00:56:23,430 --> 00:56:28,890
make some database reads to my sequel or

00:56:25,890 --> 00:56:30,750
you needed to make some HTTP requests to

00:56:28,890 --> 00:56:33,510
some other service those would all be

00:56:30,750 --> 00:56:35,910
broken down in the dashboard and sort of

00:56:33,510 --> 00:56:37,350
this timeline of all the our pcs and you

00:56:35,910 --> 00:56:40,890
could use that to figure out which are

00:56:37,350 --> 00:56:43,470
pcs of yours are and it were involved

00:56:40,890 --> 00:56:49,790
the most latency so that's stackdriver

00:56:43,470 --> 00:56:49,790
trace let's go look over at profiler

00:56:50,030 --> 00:56:54,920
suite I think I have about one minute

00:56:52,800 --> 00:56:54,920
left

00:56:55,550 --> 00:57:03,420
okay so profiler takes a heap and memory

00:56:58,650 --> 00:57:06,270
snapshot of your app as it runs and I'm

00:57:03,420 --> 00:57:08,550
not going to dig into it I had I had

00:57:06,270 --> 00:57:09,990
tried to deploy some contrived code that

00:57:08,550 --> 00:57:11,880
was really slow that used a lot of

00:57:09,990 --> 00:57:13,260
memory we didn't get a chance to finish

00:57:11,880 --> 00:57:15,330
deploying it any other project but you

00:57:13,260 --> 00:57:17,640
would be able to dig into this sort of

00:57:15,330 --> 00:57:20,310
heap and time snapshot to figure out

00:57:17,640 --> 00:57:26,430
what's going on there and then debug I

00:57:20,310 --> 00:57:29,160
don't think I prepared this one I didn't

00:57:26,430 --> 00:57:30,990
okay so debugger I have a different

00:57:29,160 --> 00:57:33,150
project I can probably show but I think

00:57:30,990 --> 00:57:35,400
I'm out of time so the way debugger

00:57:33,150 --> 00:57:36,840
works is it would it would recognize in

00:57:35,400 --> 00:57:37,920
this drop-down right here it would it

00:57:36,840 --> 00:57:40,080
would see all the apps that you have

00:57:37,920 --> 00:57:41,400
deployed and it would be able to you'd

00:57:40,080 --> 00:57:42,720
be able to select one and then it would

00:57:41,400 --> 00:57:44,520
show you the source code and you can add

00:57:42,720 --> 00:57:46,290
a snapshot and you could basically

00:57:44,520 --> 00:57:48,930
examine what happened when a user hit a

00:57:46,290 --> 00:57:50,310
given code path if you have any

00:57:48,930 --> 00:57:53,400
questions about angular in your

00:57:50,310 --> 00:57:55,560
universal or and get a fire or this

00:57:53,400 --> 00:57:57,780
workshop the booth for firebase in

00:57:55,560 --> 00:57:59,310
Google is right outside here it's that

00:57:57,780 --> 00:58:01,140
the corner on the other side fall from

00:57:59,310 --> 00:58:04,790
registration and we will be there to

00:58:01,140 --> 00:58:04,790
answer any questions you have thank you

00:58:12,130 --> 00:58:18,750
[Music]

00:58:24,330 --> 00:58:26,390

YouTube URL: https://www.youtube.com/watch?v=-6kF824823o


