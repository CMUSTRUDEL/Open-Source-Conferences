Title: Why we teach Angular to our Computer Science Masters’ students? | Asaad Saad
Publication date: 2019-05-04
Playlist: ng-conf 2019
Description: 
	Asaad will be explaining why MUM University decided to teach Angular to its Computer Science Masters’ students and how it helps them build robust enterprise-level applications. Asaad will explain some of the main features of angular and how these features are very well engineered compared to other frameworks and libraries. Also, you will hear about some of Angular features used most by MUM alumni, and the most common Angular interview questions (reported by students).

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:07,920 --> 00:00:11,170
[Music]

00:00:11,870 --> 00:00:18,690
well who's hungry raise your hand if

00:00:15,690 --> 00:00:19,500
you're hungry me too believe me I'm so

00:00:18,690 --> 00:00:22,890
hungry right now

00:00:19,500 --> 00:00:25,680
and if I decide to eat something we have

00:00:22,890 --> 00:00:28,470
three options option number one is to

00:00:25,680 --> 00:00:31,650
start planting seeds from scratch and

00:00:28,470 --> 00:00:34,469
you can imagine after six month probably

00:00:31,650 --> 00:00:37,890
we will have something to eat that's a

00:00:34,469 --> 00:00:40,890
bad idea all option number two is to

00:00:37,890 --> 00:00:44,190
start importing vegetables from

00:00:40,890 --> 00:00:48,090
different places that's good don't get

00:00:44,190 --> 00:00:50,430
me wrong but the problem is we need to

00:00:48,090 --> 00:00:52,500
learn how we integrate all these parts

00:00:50,430 --> 00:00:53,550
together so that's going to be a little

00:00:52,500 --> 00:00:59,010
bit difficult

00:00:53,550 --> 00:01:01,260
our numbers option number three is to go

00:00:59,010 --> 00:01:05,510
to one place one store where they have

00:01:01,260 --> 00:01:10,350
all the organic pure produce GMO free

00:01:05,510 --> 00:01:14,580
gluten free and prepare our salad very

00:01:10,350 --> 00:01:18,150
quick and eat a healthy meal and that's

00:01:14,580 --> 00:01:21,780
what angular provides us it provides a

00:01:18,150 --> 00:01:24,840
full platform of solutions to build

00:01:21,780 --> 00:01:27,799
robust enterprise web applications and

00:01:24,840 --> 00:01:30,659
that's great

00:01:27,799 --> 00:01:33,740
so I am Assad I work for Maharshi

00:01:30,659 --> 00:01:37,159
University and we have the fifth largest

00:01:33,740 --> 00:01:39,119
master program in computer science in

00:01:37,159 --> 00:01:42,299
2015 the computer science department

00:01:39,119 --> 00:01:43,909
decided to include angular in our

00:01:42,299 --> 00:01:47,369
curriculum

00:01:43,909 --> 00:01:52,860
however this course very shortly become

00:01:47,369 --> 00:01:55,799
one of the most popular courses in one

00:01:52,860 --> 00:01:58,320
year or in a few years we developed a

00:01:55,799 --> 00:02:00,570
new program called masters in software

00:01:58,320 --> 00:02:03,420
development where we teach computer

00:02:00,570 --> 00:02:07,649
science along with other software

00:02:03,420 --> 00:02:12,330
development courses including angular of

00:02:07,649 --> 00:02:13,170
course I and I surveyed my students for

00:02:12,330 --> 00:02:15,750
angular most

00:02:13,170 --> 00:02:18,450
common interview questions and here is

00:02:15,750 --> 00:02:21,840
the list I was so surprised the number

00:02:18,450 --> 00:02:25,260
one question was about change detection

00:02:21,840 --> 00:02:27,810
and I'm going to teach you today how you

00:02:25,260 --> 00:02:32,100
can answer a question like this

00:02:27,810 --> 00:02:36,090
an angular component has two parts the

00:02:32,100 --> 00:02:39,810
template and the states every time the

00:02:36,090 --> 00:02:43,620
state changes angular with its magic

00:02:39,810 --> 00:02:47,640
does data binding for me and patches the

00:02:43,620 --> 00:02:52,080
Dom efficiently what causes the state to

00:02:47,640 --> 00:02:54,600
change events user interaction Ajax

00:02:52,080 --> 00:02:59,400
calls timers all of these are

00:02:54,600 --> 00:03:01,260
asynchronous so angular uses zones to

00:02:59,400 --> 00:03:04,650
listen to all these asynchronous

00:03:01,260 --> 00:03:07,470
functions and tell angular to start

00:03:04,650 --> 00:03:09,930
change detection cycle starting change

00:03:07,470 --> 00:03:13,590
detection cycle mean patches the Dom

00:03:09,930 --> 00:03:16,560
efficiently angular start running a diff

00:03:13,590 --> 00:03:19,890
algorithm scanning all the components

00:03:16,560 --> 00:03:22,380
tree and patched the dome for me very

00:03:19,890 --> 00:03:23,040
efficiently and it does that very very

00:03:22,380 --> 00:03:27,090
fast

00:03:23,040 --> 00:03:29,519
why because angular compiler generates

00:03:27,090 --> 00:03:32,060
monomorphic classes for the change

00:03:29,519 --> 00:03:35,370
detection functions what does that mean

00:03:32,060 --> 00:03:38,430
monomorphic function is a function that

00:03:35,370 --> 00:03:41,190
receives data type always for the same

00:03:38,430 --> 00:03:43,799
type this type of functions can be

00:03:41,190 --> 00:03:47,459
optimized later inside the JavaScript

00:03:43,799 --> 00:03:51,480
engine so they run even faster than they

00:03:47,459 --> 00:03:55,380
were written but why do we have to scan

00:03:51,480 --> 00:03:58,079
the full entire tree very simple if two

00:03:55,380 --> 00:04:01,470
components share the same state object

00:03:58,079 --> 00:04:04,350
and one of the components mutate this

00:04:01,470 --> 00:04:07,140
object the other component still has the

00:04:04,350 --> 00:04:08,340
same reference there is no way to know

00:04:07,140 --> 00:04:10,700
that there is a change

00:04:08,340 --> 00:04:14,819
that's why Angela has to scan the full

00:04:10,700 --> 00:04:19,829
components tree to find the change for

00:04:14,819 --> 00:04:21,630
you but if we use immutable objects then

00:04:19,829 --> 00:04:24,170
we can know that a change has happened

00:04:21,630 --> 00:04:26,930
by listening to ng own changes

00:04:24,170 --> 00:04:29,600
we can tell angular to optimize the

00:04:26,930 --> 00:04:35,000
change detection algorithm and use on

00:04:29,600 --> 00:04:38,480
push strategy wait a minute this change

00:04:35,000 --> 00:04:41,240
detection must happen only once but in

00:04:38,480 --> 00:04:44,870
development mode change detection happen

00:04:41,240 --> 00:04:47,660
twice and the second one we call it

00:04:44,870 --> 00:04:49,820
verification phase angular checks again

00:04:47,660 --> 00:04:53,480
if there is a difference between the Dom

00:04:49,820 --> 00:04:55,820
and your component State it gives you

00:04:53,480 --> 00:04:58,450
the filaments error which is expression

00:04:55,820 --> 00:05:02,930
change after it has been checked at all

00:04:58,450 --> 00:05:04,940
how can we solve a problem like this we

00:05:02,930 --> 00:05:08,210
can either use a safe change detection

00:05:04,940 --> 00:05:11,000
hook or perform the change

00:05:08,210 --> 00:05:13,790
asynchronously or just trigger another

00:05:11,000 --> 00:05:17,000
change detection cycle after we make the

00:05:13,790 --> 00:05:18,170
change to our component States thank you

00:05:17,000 --> 00:05:22,269
very much

00:05:18,170 --> 00:05:22,269
[Applause]

00:05:24,460 --> 00:05:32,919
you

00:05:26,300 --> 00:05:32,919
[Music]

00:05:38,510 --> 00:05:40,570

YouTube URL: https://www.youtube.com/watch?v=YilT45_-esk


