Title: Angular Elements Make The Best React Components | Brad McAlister & Ryan Chenkie
Publication date: 2019-05-05
Playlist: ng-conf 2019
Description: 
	Reusable components are a great idea. That is, until you find yourself working in a React app and you’re unable to reuse the great Angular components you’ve already built. Thankfully, there’s a way around this. If you need to support multiple frontend frameworks, you can harness the power of Angular Elements to do just that and build reusable shared components that will drop right in your app. In this talk, we’ll show you how you can manage components across different frontend frameworks and keep everyone happy.

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:07,920 --> 00:00:11,170
[Music]

00:00:11,660 --> 00:00:16,980
all right hello everyone welcome to this

00:00:15,630 --> 00:00:18,930
talk which might be a little bit

00:00:16,980 --> 00:00:21,779
controversial it's about why we think

00:00:18,930 --> 00:00:24,390
angular elements make the best react

00:00:21,779 --> 00:00:26,789
components my name is Ryan Schanke I'm a

00:00:24,390 --> 00:00:28,830
JavaScript developer consultants I do a

00:00:26,789 --> 00:00:30,660
lot of app development for businesses do

00:00:28,830 --> 00:00:31,890
a little bit of architecture and that

00:00:30,660 --> 00:00:33,960
sort of stuff and this is my pal Brad

00:00:31,890 --> 00:00:35,670
Brad some about yourself hi I'm Brad I

00:00:33,960 --> 00:00:37,140
am a software engineering lead at a

00:00:35,670 --> 00:00:39,090
company called sapphire digital I am

00:00:37,140 --> 00:00:41,040
also a JavaScript developer but I

00:00:39,090 --> 00:00:44,340
usually spend almost all day long and

00:00:41,040 --> 00:00:47,039
angular so I think if we were to take a

00:00:44,340 --> 00:00:49,200
look around at the ecosystem the

00:00:47,039 --> 00:00:51,030
JavaScript ecosystem what we might see

00:00:49,200 --> 00:00:52,710
is that things are starting to settle a

00:00:51,030 --> 00:00:55,140
little bit some what I'll call the big

00:00:52,710 --> 00:00:57,030
three the red green and blue of

00:00:55,140 --> 00:00:59,430
JavaScript of course that's angular if

00:00:57,030 --> 00:01:00,870
you and react now of course these aren't

00:00:59,430 --> 00:01:02,910
the only frameworks out there there's

00:01:00,870 --> 00:01:04,920
still plenty of relevance and popular

00:01:02,910 --> 00:01:06,360
frameworks but if we really take a close

00:01:04,920 --> 00:01:09,390
look I think things are starting to

00:01:06,360 --> 00:01:10,950
settle a little bit on these and one of

00:01:09,390 --> 00:01:12,810
the problems is I think when we think of

00:01:10,950 --> 00:01:15,060
the way that companies and developers

00:01:12,810 --> 00:01:17,009
use these frameworks we think of it like

00:01:15,060 --> 00:01:19,229
this we think that one company might

00:01:17,009 --> 00:01:21,540
choose angular and that's all they use

00:01:19,229 --> 00:01:23,250
for all of the the software they create

00:01:21,540 --> 00:01:25,259
they make a bet on angular and they

00:01:23,250 --> 00:01:27,270
stick with it and then another company

00:01:25,259 --> 00:01:29,549
might choose react and maybe that's all

00:01:27,270 --> 00:01:32,369
of it they're going to use ever that's

00:01:29,549 --> 00:01:34,049
the only thing that ever makes sense and

00:01:32,369 --> 00:01:36,320
then maybe a third company they might

00:01:34,049 --> 00:01:40,100
choose view

00:01:36,320 --> 00:01:41,690
and you know they that they say we're

00:01:40,100 --> 00:01:43,790
gonna we're gonna stick to view because

00:01:41,690 --> 00:01:45,320
what we we like to angular J s way back

00:01:43,790 --> 00:01:48,050
in the past and it's kind of similar in

00:01:45,320 --> 00:01:49,100
some ways so let's pick that but in

00:01:48,050 --> 00:01:54,670
reality I think it looks a little bit

00:01:49,100 --> 00:01:56,780
different yeah in reality slide please

00:01:54,670 --> 00:01:58,460
we have a corporation that they've

00:01:56,780 --> 00:02:00,560
decided angular is what they're gonna do

00:01:58,460 --> 00:02:03,470
but then they ended up and purchased

00:02:00,560 --> 00:02:04,820
someone else and they happen to use

00:02:03,470 --> 00:02:06,080
react so now we've got two things in the

00:02:04,820 --> 00:02:07,940
mix and then they purchase someone else

00:02:06,080 --> 00:02:10,179
and then we go all the way across what

00:02:07,940 --> 00:02:10,179
the heck

00:02:11,240 --> 00:02:21,180
Thank You Chi boo chief technology all

00:02:19,620 --> 00:02:24,630
right let's put these down let's do it

00:02:21,180 --> 00:02:27,959
that yeah that's good tada and then we

00:02:24,630 --> 00:02:29,340
have a team at the same food Corp and

00:02:27,959 --> 00:02:31,110
they're like we have strong opinions and

00:02:29,340 --> 00:02:32,459
we want to use something else and then

00:02:31,110 --> 00:02:34,170
they go through another acquisition then

00:02:32,459 --> 00:02:35,640
they go through another acquisition then

00:02:34,170 --> 00:02:37,980
they go through another acquisition and

00:02:35,640 --> 00:02:40,590
another acquisition and so then it just

00:02:37,980 --> 00:02:43,140
becomes a great big mess so how do you

00:02:40,590 --> 00:02:45,000
deal with that well one of the problems

00:02:43,140 --> 00:02:46,770
is when you have this arrangement

00:02:45,000 --> 00:02:49,290
sharing code between these applications

00:02:46,770 --> 00:02:50,970
is pretty difficult right so you might

00:02:49,290 --> 00:02:52,560
be able to help yourself out by creating

00:02:50,970 --> 00:02:54,690
a library where you can share some code

00:02:52,560 --> 00:02:55,920
between each of these applications but

00:02:54,690 --> 00:02:57,330
when we think about sharing actual

00:02:55,920 --> 00:02:59,220
components so things that have

00:02:57,330 --> 00:03:03,150
self-contained behavior and conceiving

00:02:59,220 --> 00:03:05,040
inputs and put out emit outputs it's

00:03:03,150 --> 00:03:06,570
difficult to share these components

00:03:05,040 --> 00:03:08,850
between different applications built on

00:03:06,570 --> 00:03:10,920
different frameworks and that's a bit of

00:03:08,850 --> 00:03:13,410
a problem so what if instead what if we

00:03:10,920 --> 00:03:15,239
could have as this one we're complete

00:03:13,410 --> 00:03:18,030
work what if we could have what would be

00:03:15,239 --> 00:03:19,560
sort of a custom element right something

00:03:18,030 --> 00:03:21,930
that looks just like a native HTML

00:03:19,560 --> 00:03:23,790
elements and something that we could

00:03:21,930 --> 00:03:26,340
give a custom name to and drop in

00:03:23,790 --> 00:03:27,840
anywhere what if that custom ellicott

00:03:26,340 --> 00:03:29,610
element could have sort of a private Dom

00:03:27,840 --> 00:03:31,890
around it so that's scripting and

00:03:29,610 --> 00:03:34,170
styling it doesn't bleed out to the

00:03:31,890 --> 00:03:35,700
overall application and then what if we

00:03:34,170 --> 00:03:37,650
could share these components between any

00:03:35,700 --> 00:03:39,480
application regardless of the framework

00:03:37,650 --> 00:03:41,750
regardless of what it's built on could

00:03:39,480 --> 00:03:44,160
even be a static HTML page and

00:03:41,750 --> 00:03:45,570
thankfully there is a standard which you

00:03:44,160 --> 00:03:48,959
may have heard of called web components

00:03:45,570 --> 00:03:50,280
which helps us to do just that with web

00:03:48,959 --> 00:03:52,079
components what we can do is have

00:03:50,280 --> 00:03:54,840
something of a custom elements we use

00:03:52,079 --> 00:03:56,430
the custom elements API and what that

00:03:54,840 --> 00:03:58,200
looks like is we can give the element a

00:03:56,430 --> 00:04:00,840
name anything we want where it looks

00:03:58,200 --> 00:04:03,570
like a native HTML element and because

00:04:00,840 --> 00:04:05,790
the custom elements API extends from the

00:04:03,570 --> 00:04:07,590
browser's HTML element it has some

00:04:05,790 --> 00:04:10,320
predictable behavior so it's not some

00:04:07,590 --> 00:04:11,910
kind of bespoke really custom-made thing

00:04:10,320 --> 00:04:13,769
that's going to be dicey whether or not

00:04:11,910 --> 00:04:17,729
it works in certain browsers

00:04:13,769 --> 00:04:19,859
it has predictable behavior so doing

00:04:17,729 --> 00:04:21,870
this you know we've got we got the

00:04:19,859 --> 00:04:23,310
situation where things aren't super well

00:04:21,870 --> 00:04:24,900
supported everywhere you know

00:04:23,310 --> 00:04:27,030
we've got pretty good support in

00:04:24,900 --> 00:04:29,880
evergreen browsers but the usual

00:04:27,030 --> 00:04:31,669
suspects they they're a bit behind but

00:04:29,880 --> 00:04:33,930
support you know it's getting better and

00:04:31,669 --> 00:04:37,280
what we're seeing is that polyfills can

00:04:33,930 --> 00:04:39,990
really help us out to fill the gaps so

00:04:37,280 --> 00:04:42,030
sounds pretty good right what are people

00:04:39,990 --> 00:04:44,850
saying about web components well it

00:04:42,030 --> 00:04:46,110
turns out not everybody is all that

00:04:44,850 --> 00:04:48,200
convinced that they're the best thing in

00:04:46,110 --> 00:04:48,200
the world

00:04:48,500 --> 00:04:53,220
some people figure maybe they're not

00:04:50,790 --> 00:04:55,260
ready maybe it's not a great idea to go

00:04:53,220 --> 00:04:58,020
for these things and I think there's

00:04:55,260 --> 00:04:59,400
good reason for that because in reality

00:04:58,020 --> 00:05:01,860
nothing is ever going to beat a

00:04:59,400 --> 00:05:03,360
component in its native habitat do you

00:05:01,860 --> 00:05:05,280
want to create a react components the

00:05:03,360 --> 00:05:07,139
best place to do that is in react and

00:05:05,280 --> 00:05:08,550
consume it in react same goes for

00:05:07,139 --> 00:05:10,530
angular any other framework

00:05:08,550 --> 00:05:13,380
nothing beats a component in its native

00:05:10,530 --> 00:05:14,550
habitat but if you do have a legitimate

00:05:13,380 --> 00:05:16,979
need to share components between

00:05:14,550 --> 00:05:18,990
different technologies then I think web

00:05:16,979 --> 00:05:20,910
components make a compelling case for

00:05:18,990 --> 00:05:22,200
this and furthermore we'd like to say

00:05:20,910 --> 00:05:27,930
we'd like to contend

00:05:22,200 --> 00:05:29,430
oh geez we'd like to contend that

00:05:27,930 --> 00:05:31,410
angular elements are going to give you

00:05:29,430 --> 00:05:33,180
the best experience to do that so if you

00:05:31,410 --> 00:05:35,250
do want to create web components there's

00:05:33,180 --> 00:05:36,240
nothing that can really beat an angular

00:05:35,250 --> 00:05:38,370
element and there's a few reasons for

00:05:36,240 --> 00:05:40,110
this one of the first reasons is that

00:05:38,370 --> 00:05:42,690
we're going to get the best kind of

00:05:40,110 --> 00:05:44,310
documentation and support developer

00:05:42,690 --> 00:05:46,200
experience is really good with angular

00:05:44,310 --> 00:05:47,789
elements we get the angular API as we

00:05:46,200 --> 00:05:49,860
all know and love the tooling we know

00:05:47,789 --> 00:05:51,990
through the CLI we get great

00:05:49,860 --> 00:05:54,840
documentation and contents and best

00:05:51,990 --> 00:05:57,720
overall supports largely via the angular

00:05:54,840 --> 00:05:59,700
community ok so that's enough about that

00:05:57,720 --> 00:06:02,789
let's take a look at how it works

00:05:59,700 --> 00:06:05,010
without a clicker all right imagine and

00:06:02,789 --> 00:06:08,210
I do a world with us where NASA loves

00:06:05,010 --> 00:06:11,550
angular whoo

00:06:08,210 --> 00:06:12,539
so NASA works on a lot of projects and

00:06:11,550 --> 00:06:14,580
one of these projects is the

00:06:12,539 --> 00:06:17,789
International Space Station or the ISS

00:06:14,580 --> 00:06:19,919
and on the ISS there is a lot of

00:06:17,789 --> 00:06:21,960
critical equipment but one of those

00:06:19,919 --> 00:06:25,410
pieces equipment is this thing the

00:06:21,960 --> 00:06:27,120
discombobulate ER and they want to

00:06:25,410 --> 00:06:28,500
monitor the temperature of this

00:06:27,120 --> 00:06:30,600
discombobulated because if he gets too

00:06:28,500 --> 00:06:33,530
high bad things can happen and you do

00:06:30,600 --> 00:06:35,639
not want bad things happening in space

00:06:33,530 --> 00:06:38,849
let's look Oh

00:06:35,639 --> 00:06:40,169
set up first so what they did is they

00:06:38,849 --> 00:06:42,449
have an angular app since they love

00:06:40,169 --> 00:06:44,580
angular and it is their dashboard for

00:06:42,449 --> 00:06:46,949
their ground control and they have this

00:06:44,580 --> 00:06:48,389
temperature gauge in their angular

00:06:46,949 --> 00:06:49,560
dashboard it's just an angular component

00:06:48,389 --> 00:06:51,330
and it monitors the temperature of the

00:06:49,560 --> 00:06:54,770
discombobulate ER so let's look at it

00:06:51,330 --> 00:06:56,460
alright let's take a look at a demo

00:06:54,770 --> 00:06:58,110
right there alright

00:06:56,460 --> 00:07:00,560
Orion could you please start the

00:06:58,110 --> 00:07:03,210
temperature update to natal starting

00:07:00,560 --> 00:07:06,889
thanks so as you can see we're getting

00:07:03,210 --> 00:07:13,800
an input pretty much from fire base a

00:07:06,889 --> 00:07:16,199
fire base no fire base is working

00:07:13,800 --> 00:07:17,759
alright and it's changing the

00:07:16,199 --> 00:07:20,340
temperature variable temperature and

00:07:17,759 --> 00:07:22,050
it's picking it up through an input and

00:07:20,340 --> 00:07:23,719
just showing us the temperature and

00:07:22,050 --> 00:07:26,159
Ryan's gonna fire the high temp alert

00:07:23,719 --> 00:07:29,520
and what happens is this is an output on

00:07:26,159 --> 00:07:32,069
the component it then sends a emits an

00:07:29,520 --> 00:07:34,050
event through the output to the angular

00:07:32,069 --> 00:07:35,189
app which then displays that warning

00:07:34,050 --> 00:07:37,259
high temperature reported for the

00:07:35,189 --> 00:07:41,159
discombobulated ER all right and that's

00:07:37,259 --> 00:07:44,819
how it works all right slides back to

00:07:41,159 --> 00:07:47,969
the slides we go alright now this is the

00:07:44,819 --> 00:07:51,810
American space station right or the a SS

00:07:47,969 --> 00:07:54,599
for short no it is the International

00:07:51,810 --> 00:07:56,580
Space Station the ISS and since it is

00:07:54,599 --> 00:07:58,139
the International Space Station there

00:07:56,580 --> 00:08:00,270
are lots of other space agencies and

00:07:58,139 --> 00:08:03,120
lots of other countries that also have a

00:08:00,270 --> 00:08:05,460
vested interest and want to monitor the

00:08:03,120 --> 00:08:07,830
temperature of the discombobulate but

00:08:05,460 --> 00:08:09,389
they want to know why do we really have

00:08:07,830 --> 00:08:11,009
to write something else you've got

00:08:09,389 --> 00:08:14,699
already got it working NASA can you just

00:08:11,009 --> 00:08:18,689
give it to us and the problem is these

00:08:14,699 --> 00:08:23,430
other agencies don't use angular they

00:08:18,689 --> 00:08:26,699
use maybe react or view or a geo city

00:08:23,430 --> 00:08:28,979
site for all we know so NASA put their

00:08:26,699 --> 00:08:30,000
big NASA heads together and they came up

00:08:28,979 --> 00:08:33,149
with what they think is the best

00:08:30,000 --> 00:08:35,849
solution which is a web component built

00:08:33,149 --> 00:08:38,640
with angular elements so let's see how

00:08:35,849 --> 00:08:40,709
that happens so we're going to take our

00:08:38,640 --> 00:08:41,820
angular component our temperature gauge

00:08:40,709 --> 00:08:44,269
we're going to turn it into an angular

00:08:41,820 --> 00:08:44,269
element

00:08:45,410 --> 00:08:52,290
which is a lot like this just let's

00:08:50,850 --> 00:08:56,450
leave this here for a minute this is

00:08:52,290 --> 00:08:58,890
good this is so enjoyable tada

00:08:56,450 --> 00:09:02,060
all right but we're not gonna do any

00:08:58,890 --> 00:09:04,770
live coding cuz hashtag not Cara

00:09:02,060 --> 00:09:06,960
thank you for remember that so the first

00:09:04,770 --> 00:09:08,790
step is to add angular elements and we

00:09:06,960 --> 00:09:12,000
simply do that with ng add at angular

00:09:08,790 --> 00:09:14,550
slash elements and that's there the next

00:09:12,000 --> 00:09:16,710
thing we do is since we have an angular

00:09:14,550 --> 00:09:19,200
component turning it into an element

00:09:16,710 --> 00:09:21,180
it's not really the same as an angular

00:09:19,200 --> 00:09:22,680
app anymore so we have to actually

00:09:21,180 --> 00:09:25,830
manually bootstrap this angular

00:09:22,680 --> 00:09:28,410
components in a in the app module using

00:09:25,830 --> 00:09:31,830
indeed a bootstrap we do first create a

00:09:28,410 --> 00:09:33,120
custom element being where we pass our

00:09:31,830 --> 00:09:35,700
temperature gauge to vote again and the

00:09:33,120 --> 00:09:37,830
injector so we still have dependency

00:09:35,700 --> 00:09:40,620
injection and then we use the custom

00:09:37,830 --> 00:09:43,050
elements API of the browser that was we

00:09:40,620 --> 00:09:45,720
were mentioning earlier to define the

00:09:43,050 --> 00:09:48,740
element so that it knows what it's doing

00:09:45,720 --> 00:09:51,060
and since it's all dynamic we need to

00:09:48,740 --> 00:09:52,980
add it to the entry components so

00:09:51,060 --> 00:09:54,810
angular knows that it needs to look for

00:09:52,980 --> 00:09:56,670
this when it comes up now I was talking

00:09:54,810 --> 00:09:58,740
to rob warm old and a lot of this stuff

00:09:56,670 --> 00:10:01,020
is gonna get a lot simpler in the future

00:09:58,740 --> 00:10:05,760
it's not here yet but it's supposed to

00:10:01,020 --> 00:10:06,630
get simpler fixed alright so since we

00:10:05,760 --> 00:10:07,890
don't care about the whole dashboard

00:10:06,630 --> 00:10:09,870
anymore we just care about that one

00:10:07,890 --> 00:10:12,390
component and right now before it gets

00:10:09,870 --> 00:10:14,220
simpler as Rob was saying we need to

00:10:12,390 --> 00:10:16,050
replace the app root with our

00:10:14,220 --> 00:10:17,730
temperature gauge component so we just

00:10:16,050 --> 00:10:18,959
do that we get rid of root we throw the

00:10:17,730 --> 00:10:21,300
temperature gauge of component in there

00:10:18,959 --> 00:10:24,390
and we add the relevant endpoint inputs

00:10:21,300 --> 00:10:26,550
and in our case NASA its Fahrenheit and

00:10:24,390 --> 00:10:29,310
the station component of discombobulate

00:10:26,550 --> 00:10:30,270
er all right and then we do ng surf

00:10:29,310 --> 00:10:33,540
because we want to see how it works

00:10:30,270 --> 00:10:36,930
right so we do and you serve and then we

00:10:33,540 --> 00:10:39,420
get an error failed to construct HTML l

00:10:36,930 --> 00:10:43,040
HTML element please use the new upgrader

00:10:39,420 --> 00:10:46,680
what this means is polyfills we need

00:10:43,040 --> 00:10:48,240
polyfills because not every browser as

00:10:46,680 --> 00:10:50,700
we saw has support or even partial

00:10:48,240 --> 00:10:52,350
support for it we do this by installing

00:10:50,700 --> 00:10:55,110
this great web components custom

00:10:52,350 --> 00:10:57,430
elements polyfill npm install and then

00:10:55,110 --> 00:10:59,589
we add two polyfills to our

00:10:57,430 --> 00:11:02,890
phil's TS file and then they're good and

00:10:59,589 --> 00:11:05,260
then it'll work let's take a look at all

00:11:02,890 --> 00:11:07,510
right so we heading over to the demo

00:11:05,260 --> 00:11:09,250
alright as our temperature updating it

00:11:07,510 --> 00:11:11,320
is updating and this is the same

00:11:09,250 --> 00:11:13,630
component but it has been angular

00:11:11,320 --> 00:11:15,310
element eyes they're running in an

00:11:13,630 --> 00:11:18,310
angular app and we have our high temp

00:11:15,310 --> 00:11:20,380
alert but if you'll notice even though

00:11:18,310 --> 00:11:22,089
the output the event was emitted through

00:11:20,380 --> 00:11:23,380
the output we didn't handle it so

00:11:22,089 --> 00:11:27,490
nothing really happened other than in

00:11:23,380 --> 00:11:29,680
that little component so now that we

00:11:27,490 --> 00:11:31,660
have this component ready to go

00:11:29,680 --> 00:11:32,830
we still need a distributor and that's

00:11:31,660 --> 00:11:35,620
kind of something that's not often

00:11:32,830 --> 00:11:37,060
talked about we get like hey make it an

00:11:35,620 --> 00:11:38,920
angular element or make something here

00:11:37,060 --> 00:11:40,690
and then hey use it over here but we

00:11:38,920 --> 00:11:41,080
never connect the pieces on how to get

00:11:40,690 --> 00:11:43,300
there

00:11:41,080 --> 00:11:45,580
so that's what this is for so

00:11:43,300 --> 00:11:48,610
distribution we think the best way is

00:11:45,580 --> 00:11:50,320
using ng X built plus in NPM and we'll

00:11:48,610 --> 00:11:52,990
go through this real quick cuz it's out

00:11:50,320 --> 00:11:55,029
there but first we just need to add ng x

00:11:52,990 --> 00:11:59,649
built plus which simply updates the

00:11:55,029 --> 00:12:01,540
builder next and then that gives us two

00:11:59,649 --> 00:12:04,690
flags like Manfred was talking about in

00:12:01,540 --> 00:12:06,910
his talk we have the save our single

00:12:04,690 --> 00:12:09,279
bundle and keep polyfills next

00:12:06,910 --> 00:12:12,100
and those two flags we can add to our

00:12:09,279 --> 00:12:15,070
pride script fixed and then we'll run

00:12:12,100 --> 00:12:17,830
this build script and then we get next

00:12:15,070 --> 00:12:19,300
keep going yes and then we get a a disk

00:12:17,830 --> 00:12:21,339
folder with three files

00:12:19,300 --> 00:12:23,230
well more files but three that we care

00:12:21,339 --> 00:12:25,029
about mange a s which is basically our

00:12:23,230 --> 00:12:27,459
component file all the code for our

00:12:25,029 --> 00:12:29,320
component polyfills JS which is all the

00:12:27,459 --> 00:12:30,880
polyfills taken in the imports and

00:12:29,320 --> 00:12:32,980
everything put in if you can't made it

00:12:30,880 --> 00:12:34,600
into polyfills j/s and scripts jeaious

00:12:32,980 --> 00:12:35,920
which is the core angular stuff and

00:12:34,600 --> 00:12:38,529
those are the three that we care about

00:12:35,920 --> 00:12:39,790
but we we have our built thing but we

00:12:38,529 --> 00:12:41,589
still need a package it and get it out

00:12:39,790 --> 00:12:43,510
there so we need a package JSON file

00:12:41,589 --> 00:12:44,980
that we're gonna drop in our disk for

00:12:43,510 --> 00:12:46,150
but if you leave it in your just folder

00:12:44,980 --> 00:12:48,190
the next time you build it's gonna get

00:12:46,150 --> 00:12:50,230
overwritten so I like to put it in the

00:12:48,190 --> 00:12:52,150
assets folder just give it a name and a

00:12:50,230 --> 00:12:54,220
version numbers simple as that you could

00:12:52,150 --> 00:12:55,959
add more stuff but then you just copy

00:12:54,220 --> 00:12:58,480
that to the dist folder and then once

00:12:55,959 --> 00:13:00,430
that's in the disk older next we just

00:12:58,480 --> 00:13:04,690
run empty em pack and then we end up

00:13:00,430 --> 00:13:06,880
with next we end up with a tgz file

00:13:04,690 --> 00:13:08,980
which is our packaged element package

00:13:06,880 --> 00:13:12,910
web component ready to publish next

00:13:08,980 --> 00:13:14,650
hmmm alright so now let's launch this

00:13:12,910 --> 00:13:17,710
thing up and react and see how that's

00:13:14,650 --> 00:13:20,380
gonna work so if you've detected a

00:13:17,710 --> 00:13:24,070
little bit of a funny accent for me with

00:13:20,380 --> 00:13:25,930
words like JavaScript's so far that's

00:13:24,070 --> 00:13:29,350
because I come from a little country to

00:13:25,930 --> 00:13:31,240
the north called Canada and you know as

00:13:29,350 --> 00:13:34,360
a proud Canadian my favorite space

00:13:31,240 --> 00:13:36,010
agency is the Canadian Space Agency if

00:13:34,360 --> 00:13:38,920
you've never heard of it I'm not

00:13:36,010 --> 00:13:40,780
surprised but the Canadian Space Agency

00:13:38,920 --> 00:13:42,640
has given us all sorts of really cool

00:13:40,780 --> 00:13:45,100
stuff it's given us astronauts like

00:13:42,640 --> 00:13:46,660
Chris Hadfield who maybe you've seen on

00:13:45,100 --> 00:13:49,330
Twitter and he's shared a lot of his

00:13:46,660 --> 00:13:51,820
journey in space the CSA has given us

00:13:49,330 --> 00:13:53,610
things like the robotic arm that sits on

00:13:51,820 --> 00:13:56,890
the International Space Station and

00:13:53,610 --> 00:13:59,590
moves cargo ships into to bring in fresh

00:13:56,890 --> 00:14:01,360
cargo and you know we're here this

00:13:59,590 --> 00:14:03,130
conference conference in the States

00:14:01,360 --> 00:14:04,840
which is largely international I know

00:14:03,130 --> 00:14:07,360
but probably mostly Americans here right

00:14:04,840 --> 00:14:09,550
and I understand some of the stereotypes

00:14:07,360 --> 00:14:11,770
that Americans have for Canadians things

00:14:09,550 --> 00:14:14,650
like how we're always so polite we're

00:14:11,770 --> 00:14:16,810
always saying sorry and we're always you

00:14:14,650 --> 00:14:19,540
know super cordial but you know that's

00:14:16,810 --> 00:14:22,960
not always how it is in fact you could

00:14:19,540 --> 00:14:25,840
say that Canadians are kind of like -

00:14:22,960 --> 00:14:28,900
Americans like react developers are too

00:14:25,840 --> 00:14:31,020
angular developers we're always judging

00:14:28,900 --> 00:14:31,020
you

00:14:31,440 --> 00:14:38,300
there's no way that the slide skipped on

00:14:33,600 --> 00:14:38,300
the punchline did it it did get

00:14:39,040 --> 00:14:47,390
tada anyway I'm going back here

00:14:44,089 --> 00:14:51,110
alright so speaking of the Canadian

00:14:47,390 --> 00:14:52,820
Space Agency and and react in our ideal

00:14:51,110 --> 00:14:54,920
world the Canadian Space Agency wants to

00:14:52,820 --> 00:14:56,690
use react for their mission control and

00:14:54,920 --> 00:14:59,360
they don't want to have to go rebuild

00:14:56,690 --> 00:15:01,730
the same components that that's already

00:14:59,360 --> 00:15:02,900
built to tell the temperature they want

00:15:01,730 --> 00:15:04,940
to just reuse that component and

00:15:02,900 --> 00:15:06,980
thankfully because we have this as an

00:15:04,940 --> 00:15:09,650
angular elements we can make use of it

00:15:06,980 --> 00:15:12,529
in react so starting out is pretty easy

00:15:09,650 --> 00:15:14,390
we just do NPM install the package name

00:15:12,529 --> 00:15:16,820
I believe it's ISS temperature gauge

00:15:14,390 --> 00:15:19,070
that we're gonna do and then we just

00:15:16,820 --> 00:15:20,960
drop it in ISS temperature gauge right

00:15:19,070 --> 00:15:22,760
into the application we can pass it some

00:15:20,960 --> 00:15:25,730
inputs and it's gonna work out of the

00:15:22,760 --> 00:15:27,410
box no no he passed Celsius since it's

00:15:25,730 --> 00:15:29,390
Canada instead of Fahrenheit absolutely

00:15:27,410 --> 00:15:32,089
relevant in the future we have different

00:15:29,390 --> 00:15:33,589
units up north and so what we're gonna

00:15:32,089 --> 00:15:35,360
get here is we can pass these inputs

00:15:33,589 --> 00:15:37,790
there's something to note here though is

00:15:35,360 --> 00:15:39,830
when you go to pass inputs to this

00:15:37,790 --> 00:15:41,690
element in react it's going to be act a

00:15:39,830 --> 00:15:43,430
little bit differently you can't pass an

00:15:41,690 --> 00:15:45,560
object in kind of like you would if you

00:15:43,430 --> 00:15:47,510
were binding in an angular application

00:15:45,560 --> 00:15:49,220
it's just going to serialize whatever

00:15:47,510 --> 00:15:50,570
you pass into a string so there's some

00:15:49,220 --> 00:15:53,060
extra work to do if you want to operate

00:15:50,570 --> 00:15:56,930
on an object but anyway what we're going

00:15:53,060 --> 00:15:59,209
to get next is is the need to listen for

00:15:56,930 --> 00:16:01,010
events coming from the component and so

00:15:59,209 --> 00:16:03,050
they might be tempting to do something

00:16:01,010 --> 00:16:04,670
like this where we have an event binding

00:16:03,050 --> 00:16:06,529
a high temperature event when that is

00:16:04,670 --> 00:16:08,750
triggered maybe run some method to

00:16:06,529 --> 00:16:10,430
operate on it we can't really do this in

00:16:08,750 --> 00:16:12,110
react though this is just an angular

00:16:10,430 --> 00:16:13,850
thing there's some special work that

00:16:12,110 --> 00:16:15,320
we've got to do in react instead and

00:16:13,850 --> 00:16:16,820
what we've got to do in particular is

00:16:15,320 --> 00:16:19,100
we've got to set up this ref this

00:16:16,820 --> 00:16:21,080
reference on the elements and this is a

00:16:19,100 --> 00:16:23,600
react thing where you can reference a

00:16:21,080 --> 00:16:25,700
Dom node and then you can you can

00:16:23,600 --> 00:16:28,339
operate on it however you like and so

00:16:25,700 --> 00:16:29,750
what we'll do is we'll set up in say if

00:16:28,339 --> 00:16:32,000
we had a stateful components we'll set

00:16:29,750 --> 00:16:34,190
up this local member ISS temp components

00:16:32,000 --> 00:16:35,720
and it'll have this method to handle the

00:16:34,190 --> 00:16:37,480
reference to that node and all it's

00:16:35,720 --> 00:16:40,730
going to do is point this local member

00:16:37,480 --> 00:16:43,220
to do that no it essentially so then

00:16:40,730 --> 00:16:45,170
what we can do is pass in the handle ref

00:16:43,220 --> 00:16:48,210
method to ref

00:16:45,170 --> 00:16:50,340
all right so how do we actually get

00:16:48,210 --> 00:16:52,800
information out of the elements well in

00:16:50,340 --> 00:16:54,510
the component didn't out lifecycle hook

00:16:52,800 --> 00:16:56,610
for example we can add an event listener

00:16:54,510 --> 00:16:58,500
so our element is going to emit

00:16:56,610 --> 00:17:00,660
something called high temp and we can

00:16:58,500 --> 00:17:02,060
take the events do whatever we want with

00:17:00,660 --> 00:17:04,620
it and react we can set some states

00:17:02,060 --> 00:17:06,060
whatever we want really and then we'd

00:17:04,620 --> 00:17:07,890
want to clean up when the component is

00:17:06,060 --> 00:17:09,750
unmounted we'd want to remove the event

00:17:07,890 --> 00:17:13,410
listener to prevent memory leaks and

00:17:09,750 --> 00:17:15,600
that sort of thing so we can listen for

00:17:13,410 --> 00:17:16,890
the event and a crucial point here is

00:17:15,600 --> 00:17:19,380
it's not just the fact there's an event

00:17:16,890 --> 00:17:21,150
being emitted that we can tap into its

00:17:19,380 --> 00:17:24,060
information it's detail from the event

00:17:21,150 --> 00:17:25,620
emitted by angular we can get the alert

00:17:24,060 --> 00:17:29,250
status we can get the name temperature

00:17:25,620 --> 00:17:32,010
and set that outside of the element

00:17:29,250 --> 00:17:38,070
itself all right so let's do the react

00:17:32,010 --> 00:17:40,290
demo now there we go so si si Mission

00:17:38,070 --> 00:17:42,510
Control we've got our units in Celsius

00:17:40,290 --> 00:17:44,340
this is the same angular element that

00:17:42,510 --> 00:17:47,640
we've been seeing before and Brad's

00:17:44,340 --> 00:17:50,750
going to trigger high temp now and we've

00:17:47,640 --> 00:17:53,090
got our high temperature warning so

00:17:50,750 --> 00:17:55,050
crucial point to note here is that

00:17:53,090 --> 00:17:58,290
everything right here that you see is

00:17:55,050 --> 00:18:00,990
angular but it's the information being

00:17:58,290 --> 00:18:02,640
emitted from it is being used to do

00:18:00,990 --> 00:18:04,920
other things in the consuming

00:18:02,640 --> 00:18:06,240
application so we can drop it right in

00:18:04,920 --> 00:18:11,010
and then we can act on information

00:18:06,240 --> 00:18:12,870
coming out of it all right so because

00:18:11,010 --> 00:18:14,760
this is a web component of course we are

00:18:12,870 --> 00:18:17,460
not limited to just angular and react we

00:18:14,760 --> 00:18:18,960
can use it anywhere so if Russia uses

00:18:17,460 --> 00:18:21,420
view for their mission control they

00:18:18,960 --> 00:18:23,340
could share the same component now this

00:18:21,420 --> 00:18:25,130
looks you know pretty enticing but is

00:18:23,340 --> 00:18:29,220
this a good idea Brad what do you think

00:18:25,130 --> 00:18:32,310
yes and no I think it is a good idea in

00:18:29,220 --> 00:18:33,360
certain instances but let's look at why

00:18:32,310 --> 00:18:35,430
it might not be a good idea

00:18:33,360 --> 00:18:36,660
bundle size that bundle sizes is an

00:18:35,430 --> 00:18:38,520
issue then it's just not there yet

00:18:36,660 --> 00:18:40,530
and IV will help this but I'm not sure

00:18:38,520 --> 00:18:42,560
exactly how much no Manfred showed us

00:18:40,530 --> 00:18:46,290
some but it's not all the way there yet

00:18:42,560 --> 00:18:47,730
and this is why cuz ivy isn't here and a

00:18:46,290 --> 00:18:49,050
big deal is if you need to do content

00:18:47,730 --> 00:18:51,150
projection or anything that requires

00:18:49,050 --> 00:18:53,700
anything you have to do at runtime it

00:18:51,150 --> 00:18:55,010
might not be good for you but reasons

00:18:53,700 --> 00:18:57,919
why it might be a good

00:18:55,010 --> 00:18:59,570
is if you're upgrading from angularjs to

00:18:57,919 --> 00:19:01,159
angular then you can build your

00:18:59,570 --> 00:19:02,510
components in angular turn them into web

00:19:01,159 --> 00:19:05,539
components drop them back in angularjs

00:19:02,510 --> 00:19:07,850
and do a piecemeal upgrade and it'll

00:19:05,539 --> 00:19:10,270
work great Sam knows a lot about how to

00:19:07,850 --> 00:19:12,799
upgrade whether that's the path or not

00:19:10,270 --> 00:19:13,940
we all have well I'm assuming we all

00:19:12,799 --> 00:19:16,120
have framework experience and

00:19:13,940 --> 00:19:19,190
familiarity so that's a good reason and

00:19:16,120 --> 00:19:20,600
ivy is coming and that is also a good

00:19:19,190 --> 00:19:22,809
reason and I was talking to rob and I

00:19:20,600 --> 00:19:25,490
just there's a lot of things happening

00:19:22,809 --> 00:19:27,320
down the path on the roadmap where it's

00:19:25,490 --> 00:19:29,659
gonna make this actually a really good

00:19:27,320 --> 00:19:32,870
idea so while it's still kind of early

00:19:29,659 --> 00:19:34,100
it's still a really good idea all right

00:19:32,870 --> 00:19:35,659
that's just about all we have we'd like

00:19:34,100 --> 00:19:37,880
to give very special thanks to two

00:19:35,659 --> 00:19:39,620
people URI and Manfred who have some

00:19:37,880 --> 00:19:41,210
great content out there URIs got a great

00:19:39,620 --> 00:19:48,350
course on egghead IO let's give him a

00:19:41,210 --> 00:19:50,120
clap yeah he's got a great course on a

00:19:48,350 --> 00:19:51,679
IO ed encourage you to check that out

00:19:50,120 --> 00:19:53,720
and man Fred's got some content online

00:19:51,679 --> 00:19:55,690
some written content that is very good

00:19:53,720 --> 00:19:58,100
and in-depth as well so check those out

00:19:55,690 --> 00:19:59,840
and then the links for all that we've

00:19:58,100 --> 00:20:01,309
done here including the repos if you

00:19:59,840 --> 00:20:04,270
want to check those out everything is at

00:20:01,309 --> 00:20:07,070
this bitly link and g - comma - elements

00:20:04,270 --> 00:20:10,700
and that's just about all we have for

00:20:07,070 --> 00:20:12,950
you next one we are here on twitter at

00:20:10,700 --> 00:20:15,080
ryan shanky at Sonic Clerk and we'd like

00:20:12,950 --> 00:20:17,960
to encourage everyone not to buy $30

00:20:15,080 --> 00:20:19,610
slide advancers if you can help it

00:20:17,960 --> 00:20:20,899
please yes thank you so much for your

00:20:19,610 --> 00:20:22,250
time we'll be around if you want to talk

00:20:20,899 --> 00:20:25,750
and have a great - rest of your

00:20:22,250 --> 00:20:25,750
conference Thanks

00:20:29,210 --> 00:20:31,270
you

00:20:31,740 --> 00:20:38,349
[Music]

00:20:43,950 --> 00:20:46,010

YouTube URL: https://www.youtube.com/watch?v=tHclHHs7nmo


