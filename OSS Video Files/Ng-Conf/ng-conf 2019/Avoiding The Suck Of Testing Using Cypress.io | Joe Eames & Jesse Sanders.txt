Title: Avoiding The Suck Of Testing Using Cypress.io | Joe Eames & Jesse Sanders
Publication date: 2019-05-03
Playlist: ng-conf 2019
Description: 
	The state of application testing for Angular is broken. Angular applications are composed of UI components running in a browser, but our most effective testing strategy has been unit testing functions instead of UI interactions. The recommended strategy for testing the UI is Protractor, which is built on Selenium, a technology originating in 2004 when the web was all server-side rendering. This workshop will show you the flaws in your current testing strategies and how to most effectively test your applications using Cypress. Jesse Sanders and Joe Eames will walk you through why your current test strategy fails and how to test your applications with less time and effort. They will guide you through installation, configuration, and best practices for writing tests using Cypress. This hands on workshop will guide you through multiple testings scenarios that will provide you with the necessary skills to handle even the most complex test cases

https://github.com/jessesanders/ngdoc

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:07,920 --> 00:00:16,440
[Music]

00:00:13,400 --> 00:00:18,480
yeah hey this is this is captain test

00:00:16,440 --> 00:00:20,160
right here captain test hey everybody

00:00:18,480 --> 00:00:22,289
thanks for coming out to testing as a

00:00:20,160 --> 00:00:23,640
black hole of time and effort my name is

00:00:22,289 --> 00:00:25,410
Jesse Sanders this is my very good

00:00:23,640 --> 00:00:27,150
friend Joe Eames

00:00:25,410 --> 00:00:29,160
we're both angular gdes and we're here

00:00:27,150 --> 00:00:32,040
to talk to you today about Indian

00:00:29,160 --> 00:00:33,980
testing so with show of hands who's

00:00:32,040 --> 00:00:36,960
doing Indian testing right now

00:00:33,980 --> 00:00:39,600
awesome so no same same group people out

00:00:36,960 --> 00:00:42,840
of those people who actually likes doing

00:00:39,600 --> 00:00:45,570
Indian testing now oh wow much smaller

00:00:42,840 --> 00:00:48,530
crickets yeah it's not much it's not

00:00:45,570 --> 00:00:51,180
much not a big surprise all right so

00:00:48,530 --> 00:00:52,739
here is the URL if you have not already

00:00:51,180 --> 00:00:54,600
pulled down the source code for this

00:00:52,739 --> 00:00:55,770
this is an interactive workshop we got

00:00:54,600 --> 00:00:57,629
an hour with you and we're gonna be

00:00:55,770 --> 00:00:59,280
showing you how to do this so go ahead

00:00:57,629 --> 00:01:02,039
and go to the bitly link there and pull

00:00:59,280 --> 00:01:03,780
that down and run npm install bitly NGC

00:01:02,039 --> 00:01:07,409
why do that now let's see if we can

00:01:03,780 --> 00:01:08,729
crash the Wi-Fi let's do it I were in we

00:01:07,409 --> 00:01:10,200
could do some kung-fu in the current

00:01:08,729 --> 00:01:12,450
karate in the garage while they're doing

00:01:10,200 --> 00:01:14,070
that actually we should keep talking so

00:01:12,450 --> 00:01:15,450
definitely do but definitely do this

00:01:14,070 --> 00:01:16,830
follow along we are gonna do hands-on

00:01:15,450 --> 00:01:19,290
you're gonna walk out of here being able

00:01:16,830 --> 00:01:21,540
having written Cypress tests excellent

00:01:19,290 --> 00:01:22,950
all right so the Big Bang happened and

00:01:21,540 --> 00:01:24,990
then all sudden we got a new project

00:01:22,950 --> 00:01:26,549
right and so this project is gonna be

00:01:24,990 --> 00:01:28,259
amazing we're gonna do everything right

00:01:26,549 --> 00:01:30,090
this time we're gonna write unit tests

00:01:28,259 --> 00:01:32,939
one on integration test 100% code

00:01:30,090 --> 00:01:35,189
coverage 10% 10% oh that's bad wow

00:01:32,939 --> 00:01:37,079
that's that's the Joe Eames way that's

00:01:35,189 --> 00:01:39,600
awesome that's very cool and we're gonna

00:01:37,079 --> 00:01:42,450
write into in tests and so we start

00:01:39,600 --> 00:01:44,340
going along things are cruising and we

00:01:42,450 --> 00:01:45,750
start to realize that Indian testing is

00:01:44,340 --> 00:01:48,540
really really hard

00:01:45,750 --> 00:01:50,009
it is writing the test isn't so bad but

00:01:48,540 --> 00:01:52,170
the test starts to get really flaky

00:01:50,009 --> 00:01:54,180
really soon and all sudden where the

00:01:52,170 --> 00:01:56,100
tests were running perfectly before they

00:01:54,180 --> 00:01:58,950
start crashing and and no we don't

00:01:56,100 --> 00:02:01,469
really understand why they take way too

00:01:58,950 --> 00:02:02,759
long to run all sudden we went from hey

00:02:01,469 --> 00:02:04,820
work it's gonna take like five or ten

00:02:02,759 --> 00:02:07,350
minutes - now we're at like six hours

00:02:04,820 --> 00:02:10,830
since my Game of Thrones

00:02:07,350 --> 00:02:13,620
this this is a excellent excellent point

00:02:10,830 --> 00:02:15,510
so there's timing issues there's hacks

00:02:13,620 --> 00:02:18,360
there's all sorts of we're waiting for

00:02:15,510 --> 00:02:20,459
the particular time we're looking for a

00:02:18,360 --> 00:02:23,040
particular element that we're gonna key

00:02:20,459 --> 00:02:24,360
in on and when that happens we're gonna

00:02:23,040 --> 00:02:25,920
start our tests and then it doesn't

00:02:24,360 --> 00:02:28,230
happen that way so the way hack and we

00:02:25,920 --> 00:02:30,770
do a set timeout or an interval and/or

00:02:28,230 --> 00:02:34,890
it's Joe what's your favorite one oh

00:02:30,770 --> 00:02:35,220
wait I like just doing a I just I I love

00:02:34,890 --> 00:02:37,050
them

00:02:35,220 --> 00:02:38,850
I like a minute or two and then minute

00:02:37,050 --> 00:02:40,830
or two maintained well how long is the

00:02:38,850 --> 00:02:42,180
game with Filan episodes I think they're

00:02:40,830 --> 00:02:44,130
whether they average between 45 minutes

00:02:42,180 --> 00:02:45,870
in about an hour and a half that's yeah

00:02:44,130 --> 00:02:48,720
that's what I do perfect perfect

00:02:45,870 --> 00:02:52,290
so is Indian testing worth it that

00:02:48,720 --> 00:02:54,450
becomes the question and the big thing I

00:02:52,290 --> 00:02:56,700
see is that I abandon my tests and the

00:02:54,450 --> 00:02:59,010
answer most often is yes people will

00:02:56,700 --> 00:03:01,080
write huge libraries of protractor tests

00:02:59,010 --> 00:03:02,670
and and then ultimately ended up

00:03:01,080 --> 00:03:04,320
abandoning them so how do we get around

00:03:02,670 --> 00:03:05,790
this how do we write better tests and

00:03:04,320 --> 00:03:08,850
something that's reliable that we can

00:03:05,790 --> 00:03:10,140
depend on so we're talking about Indian

00:03:08,850 --> 00:03:11,850
testing tools we're talking like

00:03:10,140 --> 00:03:13,470
selenium webdriver protractor Nightwatch

00:03:11,850 --> 00:03:15,230
but what I want you to understand is

00:03:13,470 --> 00:03:17,820
that we're really talking about selenium

00:03:15,230 --> 00:03:21,290
these are all selenium based tools

00:03:17,820 --> 00:03:25,230
they're just various flavors of them and

00:03:21,290 --> 00:03:27,930
who remembers Geo cities right yeah this

00:03:25,230 --> 00:03:33,959
is amazing stuff this was Joe's website

00:03:27,930 --> 00:03:36,329
I mean this was the web in 2004 this was

00:03:33,959 --> 00:03:38,190
the year selenium was created okay I

00:03:36,329 --> 00:03:41,100
think the web has changed just a little

00:03:38,190 --> 00:03:43,709
bit since then Joe this is my Amazon

00:03:41,100 --> 00:03:45,180
page a lot of stuff going on here but

00:03:43,709 --> 00:03:48,390
we're trying to use a tool that was

00:03:45,180 --> 00:03:50,549
designed for this to test this and that

00:03:48,390 --> 00:03:53,579
doesn't make a lot of sense so why is

00:03:50,549 --> 00:03:54,959
Indian testing so hard it brief

00:03:53,579 --> 00:03:56,640
explanation what we're trying to deal

00:03:54,959 --> 00:03:59,310
with is a snapshot in a moment of time

00:03:56,640 --> 00:04:00,840
and trying to figure out what's the

00:03:59,310 --> 00:04:03,209
element that we're looking for what's

00:04:00,840 --> 00:04:05,100
the wait mechanism there that that's I'm

00:04:03,209 --> 00:04:07,470
going to find that element and and kick

00:04:05,100 --> 00:04:09,360
off my tests and there's so much

00:04:07,470 --> 00:04:11,160
variation with JavaScript based

00:04:09,360 --> 00:04:14,130
applications it's very difficult to do

00:04:11,160 --> 00:04:16,139
that I think the second one edge cases

00:04:14,130 --> 00:04:17,880
is probably the most difficult so right

00:04:16,139 --> 00:04:19,770
now your options are

00:04:17,880 --> 00:04:21,210
when you're doing your tests if you want

00:04:19,770 --> 00:04:22,800
to try to figure out your edge cases I

00:04:21,210 --> 00:04:24,660
got to find let's say like the the

00:04:22,800 --> 00:04:26,700
product that has a quantity of less than

00:04:24,660 --> 00:04:28,440
10 I need to show this reorder panel

00:04:26,700 --> 00:04:30,390
well the problem is how do I find a

00:04:28,440 --> 00:04:31,920
product that has that so typically I'm

00:04:30,390 --> 00:04:33,810
doing one of two things I'm either

00:04:31,920 --> 00:04:36,570
creating the data during the test so I

00:04:33,810 --> 00:04:38,010
double the length of the test or as Joe

00:04:36,570 --> 00:04:40,650
loves to do he has his magic seed

00:04:38,010 --> 00:04:41,820
database you know and and but the

00:04:40,650 --> 00:04:43,530
problem is he's never able to run his

00:04:41,820 --> 00:04:45,330
test because the seed database is down

00:04:43,530 --> 00:04:47,790
or there's problems with it and where

00:04:45,330 --> 00:04:51,210
somebody modifies my seed database that

00:04:47,790 --> 00:04:53,190
was me sorry yeah sorry also on top of

00:04:51,210 --> 00:04:54,720
it we get really cryptic errors and

00:04:53,190 --> 00:04:56,250
we're dealing with massive stack traces

00:04:54,720 --> 00:04:58,020
trying to figure out what went wrong

00:04:56,250 --> 00:04:59,220
and really what happens we run those

00:04:58,020 --> 00:05:00,840
tests we're just throwing the tests over

00:04:59,220 --> 00:05:02,610
the wall and then we get this cryptic

00:05:00,840 --> 00:05:04,920
stack trace back and we're like I have

00:05:02,610 --> 00:05:06,960
no idea what happened and then there's

00:05:04,920 --> 00:05:08,970
no dev tools during testing and writing

00:05:06,960 --> 00:05:11,700
the test because the same mechanisms the

00:05:08,970 --> 00:05:14,550
dev tools use to interact with the the

00:05:11,700 --> 00:05:18,000
browser are the same tools that selenium

00:05:14,550 --> 00:05:19,590
uses and so we're we're locked out great

00:05:18,000 --> 00:05:22,260
so at the end of the day what ends up

00:05:19,590 --> 00:05:24,120
happening this is all I wanted to do is

00:05:22,260 --> 00:05:25,350
attach like a little bit and before we

00:05:24,120 --> 00:05:27,450
know it I just have this mess and

00:05:25,350 --> 00:05:29,880
garbage and we see teams go ahead and

00:05:27,450 --> 00:05:31,200
hunter they're into end tests so with

00:05:29,880 --> 00:05:33,210
that I want to introduce you to one of

00:05:31,200 --> 00:05:35,880
my favorite new products called Cypress

00:05:33,210 --> 00:05:38,010
i/o anybody using Cypress right now yeah

00:05:35,880 --> 00:05:39,270
awesome well so I'm hoping that by the

00:05:38,010 --> 00:05:40,890
time we get down here it's gonna be

00:05:39,270 --> 00:05:43,050
every single hand in this room is raised

00:05:40,890 --> 00:05:44,340
and we're rocking it so Joe why don't

00:05:43,050 --> 00:05:47,940
you tell us how do we actually get this

00:05:44,340 --> 00:05:50,250
and fired up all right so this is how

00:05:47,940 --> 00:05:55,230
you install Cypress is you just run NPM

00:05:50,250 --> 00:05:56,880
install Cypress save dev right and it is

00:05:55,230 --> 00:05:58,920
it does take it a couple of minutes

00:05:56,880 --> 00:06:00,540
that's okay it's a one-time install the

00:05:58,920 --> 00:06:02,220
cool thing is once you launch it it also

00:06:00,540 --> 00:06:05,640
does a little bit of work

00:06:02,220 --> 00:06:08,430
what is the or here you or we got the

00:06:05,640 --> 00:06:10,410
Bri bug Cypress schematic yeah do you

00:06:08,430 --> 00:06:13,530
know who wrote that one I'm not sure

00:06:10,410 --> 00:06:14,970
however it is as awesome yes absolutely

00:06:13,530 --> 00:06:17,970
so we actually created this schematic to

00:06:14,970 --> 00:06:20,130
make things a lot easier to be able to

00:06:17,970 --> 00:06:22,290
kick off a process to install Cypress

00:06:20,130 --> 00:06:25,080
remove protractor and and set you off

00:06:22,290 --> 00:06:27,570
for success right so then we got

00:06:25,080 --> 00:06:30,000
actually running Cypress that's with npx

00:06:27,570 --> 00:06:30,410
Cypress open so are we ready is this is

00:06:30,000 --> 00:06:32,060
it

00:06:30,410 --> 00:06:33,200
actually do something I think it's time

00:06:32,060 --> 00:06:36,230
to do it I'm gonna do something all

00:06:33,200 --> 00:06:38,630
right where's our terminal I was doing

00:06:36,230 --> 00:06:40,100
terminal straight out of I'm old school

00:06:38,630 --> 00:06:41,630
man we're determined we do terminal

00:06:40,100 --> 00:06:43,430
right there there we go I'm gonna need

00:06:41,630 --> 00:06:45,230
two journals okay here look what there's

00:06:43,430 --> 00:06:47,210
a plus sign actually let's just go ahead

00:06:45,230 --> 00:06:48,410
and launch terminal so you can work

00:06:47,210 --> 00:06:52,010
natively

00:06:48,410 --> 00:06:59,000
boom I like native all right I'm right

00:06:52,010 --> 00:07:00,140
I'm not exactly all right so when

00:06:59,000 --> 00:07:01,070
they're running cypress one of the

00:07:00,140 --> 00:07:02,660
things we need to do is we need to

00:07:01,070 --> 00:07:04,640
actually have our application up and

00:07:02,660 --> 00:07:05,960
running right Cypress is going to work

00:07:04,640 --> 00:07:07,640
against our real applications so

00:07:05,960 --> 00:07:08,840
whatever our application is is we're

00:07:07,640 --> 00:07:11,720
gonna have it up and running if you have

00:07:08,840 --> 00:07:13,370
installed the sample app that we've got

00:07:11,720 --> 00:07:15,710
for you today then the first thing I

00:07:13,370 --> 00:07:18,290
want you to do is run NPM start in a

00:07:15,710 --> 00:07:21,110
terminal window of that application so

00:07:18,290 --> 00:07:23,690
we're gonna go npm start oh I already

00:07:21,110 --> 00:07:25,100
launched all right so so it's not lunch

00:07:23,690 --> 00:07:27,620
enough there we go we did the second

00:07:25,100 --> 00:07:40,310
task first in a different terminal run

00:07:27,620 --> 00:07:46,490
NPM start and in your when I please no

00:07:40,310 --> 00:07:47,900
oh yeah in the right directory we're

00:07:46,490 --> 00:07:49,760
gonna run NPM start reading a lot to our

00:07:47,900 --> 00:07:51,890
application right in the same directory

00:07:49,760 --> 00:07:53,540
we're gonna run NPM MPX Cypress open

00:07:51,890 --> 00:07:53,900
we're running in both we got it we got

00:07:53,540 --> 00:07:58,460
it

00:07:53,900 --> 00:08:00,650
we're in whoo-hoo well this application

00:07:58,460 --> 00:08:04,520
that's coming up we're gonna go and look

00:08:00,650 --> 00:08:07,400
at our actual tests where is is it on a

00:08:04,520 --> 00:08:10,010
different route straight days there no

00:08:07,400 --> 00:08:17,180
no I want the cookie window good lenders

00:08:10,010 --> 00:08:20,000
right behind you huh thank you no silly

00:08:17,180 --> 00:08:21,830
plan okay here is the code that we've

00:08:20,000 --> 00:08:23,330
got when Cypress runs the very first

00:08:21,830 --> 00:08:25,940
time it's going to create this Cypress

00:08:23,330 --> 00:08:26,690
directory that you see over here for you

00:08:25,940 --> 00:08:29,030
all right

00:08:26,690 --> 00:08:30,560
so create Cypress it's got a bunch of

00:08:29,030 --> 00:08:32,539
sub directories in it the one that we

00:08:30,560 --> 00:08:34,010
really care about is the integration

00:08:32,539 --> 00:08:35,780
subdirectory because that's where we

00:08:34,010 --> 00:08:37,640
actually put our tests when you first

00:08:35,780 --> 00:08:39,469
executed is going to create a samples

00:08:37,640 --> 00:08:40,659
directory inside of there now of course

00:08:39,469 --> 00:08:42,969
since you've downloaded

00:08:40,659 --> 00:08:44,500
installed our application you're also

00:08:42,969 --> 00:08:46,149
going to have some other stuff in there

00:08:44,500 --> 00:08:49,480
we're gonna look at the very first one

00:08:46,149 --> 00:08:53,279
this article's spec TS file we're going

00:08:49,480 --> 00:08:57,819
to start up the very top we do have some

00:08:53,279 --> 00:08:59,860
issues with code because we have it just

00:08:57,819 --> 00:09:00,939
ignore that yours won't probably won't

00:08:59,860 --> 00:09:03,699
be giving you is giving you these

00:09:00,939 --> 00:09:07,629
warnings Cypress starts everything with

00:09:03,699 --> 00:09:09,189
the CY global object that's where 99.9

00:09:07,629 --> 00:09:11,259
percent of what you do is Cyprus happens

00:09:09,189 --> 00:09:13,420
you start with a CY global object so

00:09:11,259 --> 00:09:14,680
just like selenium or any of these other

00:09:13,420 --> 00:09:16,629
tools the first thing you do is you tell

00:09:14,680 --> 00:09:18,939
it to go to a URL so we've done dot

00:09:16,629 --> 00:09:21,250
visit visit is cypresses way of saying

00:09:18,939 --> 00:09:23,199
go hit this URL and open it up now

00:09:21,250 --> 00:09:24,730
you'll notice that I just hit slash how

00:09:23,199 --> 00:09:27,990
doesn't know what the protocol is Cyprus

00:09:24,730 --> 00:09:30,310
has this really nice configuration file

00:09:27,990 --> 00:09:31,839
Cyprus dot JSON where we can configure

00:09:30,310 --> 00:09:36,399
certain things here I've configured the

00:09:31,839 --> 00:09:39,819
base URL right so that way I don't have

00:09:36,399 --> 00:09:41,529
to put the URL in when I start my test I

00:09:39,819 --> 00:09:43,569
could just put the relative path and

00:09:41,529 --> 00:09:45,699
that allows me in CI to actually do like

00:09:43,569 --> 00:09:48,639
replacing that URL with a different base

00:09:45,699 --> 00:09:51,490
URL then I look at our very first test

00:09:48,639 --> 00:09:53,560
this should load when page loads test

00:09:51,490 --> 00:09:56,050
very simple again we start with the CY

00:09:53,560 --> 00:09:57,399
object that's how we begin everything

00:09:56,050 --> 00:09:59,769
and the get command is how we get a

00:09:57,399 --> 00:10:01,000
handle to a node so we use the same type

00:09:59,769 --> 00:10:02,740
of selectors that you might be familiar

00:10:01,000 --> 00:10:04,449
with if you're familiar with jQuery or a

00:10:02,740 --> 00:10:06,370
lot of other like query selector query

00:10:04,449 --> 00:10:09,689
selector all same type of selectors we

00:10:06,370 --> 00:10:12,040
want to get a handle to an actual

00:10:09,689 --> 00:10:13,209
element so this is the element I want

00:10:12,040 --> 00:10:14,949
this is one of my custom elements this

00:10:13,209 --> 00:10:16,839
is a component that I've created the app

00:10:14,949 --> 00:10:18,730
article so it's gonna get a handle to

00:10:16,839 --> 00:10:21,399
all of the app article elements that are

00:10:18,730 --> 00:10:23,500
on the page then the next thing I do is

00:10:21,399 --> 00:10:25,120
do an assert that comes with the should

00:10:23,500 --> 00:10:28,420
command a cypress is a very chainable

00:10:25,120 --> 00:10:29,589
api so we start with a dom node and then

00:10:28,420 --> 00:10:31,149
we're gonna search something about that

00:10:29,589 --> 00:10:32,829
dom node so we have our list of app

00:10:31,149 --> 00:10:34,930
articles and we're going to cert that

00:10:32,829 --> 00:10:37,149
there are at least one of them the have

00:10:34,930 --> 00:10:39,519
length greater than zero so there must

00:10:37,149 --> 00:10:43,740
be at least one of them so do you have

00:10:39,519 --> 00:10:49,970
the app running here

00:10:43,740 --> 00:10:49,970
that up now we don't

00:10:51,440 --> 00:10:55,009
we're gonna open up the app and actually

00:10:53,060 --> 00:10:56,600
take a quick glance at it who here has

00:10:55,009 --> 00:10:57,920
actually got the application instead

00:10:56,600 --> 00:11:01,279
anybody got the application installed

00:10:57,920 --> 00:11:02,930
and running following along you got some

00:11:01,279 --> 00:11:04,220
people following it awesome keep doing

00:11:02,930 --> 00:11:06,300
that if you're not if you're not

00:11:04,220 --> 00:11:07,600
following along shame on you

00:11:06,300 --> 00:11:10,579
[Music]

00:11:07,600 --> 00:11:11,720
but I still love you okay so here's what

00:11:10,579 --> 00:11:13,970
the application actually looks like

00:11:11,720 --> 00:11:15,740
these are those app - article elements

00:11:13,970 --> 00:11:17,089
each of these like little like tiles

00:11:15,740 --> 00:11:19,759
that you're seeing that's what we're

00:11:17,089 --> 00:11:23,300
that's the actual app / app - article

00:11:19,759 --> 00:11:25,310
element so in this test we're counting

00:11:23,300 --> 00:11:27,110
the number of those at least zero very

00:11:25,310 --> 00:11:28,490
simple test obviously we need to look at

00:11:27,110 --> 00:11:30,439
the page you could see there are at

00:11:28,490 --> 00:11:33,620
least zero those so that test is going

00:11:30,439 --> 00:11:39,019
to pass let's go ahead and run our test

00:11:33,620 --> 00:11:40,639
so back to the cypress UI very simple we

00:11:39,019 --> 00:11:42,139
just come down here and we click on the

00:11:40,639 --> 00:11:44,540
test that we want to run I want to run

00:11:42,139 --> 00:11:46,790
that article spec TS so I'm gonna click

00:11:44,540 --> 00:11:48,740
on the articles dot spec TSS at the

00:11:46,790 --> 00:11:50,269
bottom of that list and then click on

00:11:48,740 --> 00:11:53,509
that and Cypress is going to open up

00:11:50,269 --> 00:11:55,129
Chrome and this is a chrome that it

00:11:53,509 --> 00:11:56,990
controls and it's gonna start running

00:11:55,129 --> 00:11:58,250
those tests and we see on the left-hand

00:11:56,990 --> 00:11:59,300
side it's running all of our tests only

00:11:58,250 --> 00:12:01,550
two of them have anything that they're

00:11:59,300 --> 00:12:02,990
doing the other two are empty and those

00:12:01,550 --> 00:12:04,699
are our four tests they're all passing

00:12:02,990 --> 00:12:07,250
and I want to look at that very first

00:12:04,699 --> 00:12:09,199
test and I click it open it actually

00:12:07,250 --> 00:12:11,089
tells me all the steps of the test tells

00:12:09,199 --> 00:12:14,180
me hey I started out by visiting slash

00:12:11,089 --> 00:12:16,430
and then there's an xhr call that was

00:12:14,180 --> 00:12:18,620
made and wow this is actually really

00:12:16,430 --> 00:12:21,170
cool look at this I can actually see the

00:12:18,620 --> 00:12:23,180
state of the application that each point

00:12:21,170 --> 00:12:26,449
in the test every step in the test

00:12:23,180 --> 00:12:29,209
including xhr calls are noted here in

00:12:26,449 --> 00:12:30,860
this UI so I can hover over and see the

00:12:29,209 --> 00:12:32,209
state of the application now there's a

00:12:30,860 --> 00:12:34,819
very simple test it did very little

00:12:32,209 --> 00:12:37,220
let's go to a slightly more complex

00:12:34,819 --> 00:12:38,930
example which is the next one in this

00:12:37,220 --> 00:12:41,630
one we start off by getting our input

00:12:38,930 --> 00:12:43,850
search button so back over to our

00:12:41,630 --> 00:12:45,680
application that's this text box up in

00:12:43,850 --> 00:12:47,959
here and what we do is we type into

00:12:45,680 --> 00:12:50,000
there the word canvas very easy just the

00:12:47,959 --> 00:12:52,970
type method it's gonna type the code

00:12:50,000 --> 00:12:56,040
into there so I'm gonna if I type in

00:12:52,970 --> 00:12:57,930
canvas and then now I'm going to

00:12:56,040 --> 00:12:59,100
want to click the search button now this

00:12:57,930 --> 00:13:02,070
is actually already searched because I

00:12:59,100 --> 00:13:03,870
lost focus but if I had refreshed start

00:13:02,070 --> 00:13:06,509
off with a fresh page type in canvas and

00:13:03,870 --> 00:13:08,459
then click the search button we are

00:13:06,509 --> 00:13:10,560
going to do a search and now there's

00:13:08,459 --> 00:13:12,389
only one app article that gets returned

00:13:10,560 --> 00:13:13,800
so that's what we do in our third

00:13:12,389 --> 00:13:15,630
statement we get a list of the app

00:13:13,800 --> 00:13:18,300
articles we make sure that they have a

00:13:15,630 --> 00:13:20,370
length of 1 very simple straightforward

00:13:18,300 --> 00:13:22,589
it's such a discoverable beautiful API

00:13:20,370 --> 00:13:24,990
it's really easy to just like hit dot

00:13:22,589 --> 00:13:26,459
and look at the intellisense and figure

00:13:24,990 --> 00:13:28,139
out oh I can do this and could do this

00:13:26,459 --> 00:13:30,089
and their documentation is great so

00:13:28,139 --> 00:13:32,279
let's go back to our cypress UI and

00:13:30,089 --> 00:13:33,779
actually look at that second Testim to

00:13:32,279 --> 00:13:35,310
close this one down open up that second

00:13:33,779 --> 00:13:38,250
test that house three steps first we

00:13:35,310 --> 00:13:40,470
visit the root URL then there's an xhr

00:13:38,250 --> 00:13:43,949
request that's made another xhr request

00:13:40,470 --> 00:13:46,139
there is the dev servers socket request

00:13:43,949 --> 00:13:47,190
that we don't care about then we get the

00:13:46,139 --> 00:13:48,509
infidel search so this is very

00:13:47,190 --> 00:13:52,529
interesting look up here at the top left

00:13:48,509 --> 00:13:55,319
when I call get input search there's the

00:13:52,529 --> 00:13:57,360
actual screenshot or snapshot of my

00:13:55,319 --> 00:13:59,670
application in that state and the input

00:13:57,360 --> 00:14:01,800
search is actually highlighted see that

00:13:59,670 --> 00:14:03,930
so right over here this area has been

00:14:01,800 --> 00:14:05,399
highlighted and another cool thing is I

00:14:03,930 --> 00:14:07,170
can come down here and I could turn that

00:14:05,399 --> 00:14:08,490
highlight off in case I need to see

00:14:07,170 --> 00:14:09,870
underneath it and see what the state of

00:14:08,490 --> 00:14:11,880
it was I can just click that and turn it

00:14:09,870 --> 00:14:14,100
off the other thing I can do is I

00:14:11,880 --> 00:14:17,190
clicked over here and that pinned the

00:14:14,100 --> 00:14:19,800
preview the snapshot of that then I

00:14:17,190 --> 00:14:22,319
typed in there canvas so again I'm going

00:14:19,800 --> 00:14:23,670
to turn off that highlighting and this

00:14:22,319 --> 00:14:25,350
was before I typed and there's this

00:14:23,670 --> 00:14:27,449
little button after this is after I type

00:14:25,350 --> 00:14:29,399
so it shows me what we was like before

00:14:27,449 --> 00:14:30,569
and after executed this command then it

00:14:29,399 --> 00:14:32,160
gets the search button again that's

00:14:30,569 --> 00:14:33,600
highlighted we click on the search

00:14:32,160 --> 00:14:35,420
button it gives me a little hit target

00:14:33,600 --> 00:14:38,160
it shows me the this where I clicked

00:14:35,420 --> 00:14:41,069
there was a post that happened and then

00:14:38,160 --> 00:14:42,990
we do our get and assert so again at

00:14:41,069 --> 00:14:44,880
each point is showing me the snapshot

00:14:42,990 --> 00:14:47,939
what's even cooler than all of that is

00:14:44,880 --> 00:14:51,569
this is literally a working browser so I

00:14:47,939 --> 00:14:53,579
can come over here and I can turn on the

00:14:51,569 --> 00:14:55,740
dev tools and I can look around in here

00:14:53,579 --> 00:14:58,439
what is this HTML look like at this

00:14:55,740 --> 00:15:00,060
point boom I can I can actually explore

00:14:58,439 --> 00:15:01,769
around in my application at a given

00:15:00,060 --> 00:15:03,420
point this is at the end but let's go

00:15:01,769 --> 00:15:04,630
back let's go to Lake where we get the

00:15:03,420 --> 00:15:06,880
input search

00:15:04,630 --> 00:15:09,850
right and again I'm going to inspect

00:15:06,880 --> 00:15:11,620
that boom Here I am that's the element

00:15:09,850 --> 00:15:16,390
that it's selected but I wanted the

00:15:11,620 --> 00:15:18,450
input where's that input somewhere in

00:15:16,390 --> 00:15:20,770
here I've lost it

00:15:18,450 --> 00:15:22,150
but you could expect around you couldn't

00:15:20,770 --> 00:15:24,430
you can dig around and drove around and

00:15:22,150 --> 00:15:26,500
find out what's going on very very very

00:15:24,430 --> 00:15:27,730
cool that you can do all of this so now

00:15:26,500 --> 00:15:29,260
we don't know actually one other thing

00:15:27,730 --> 00:15:31,000
that I wanted to bring up on that is

00:15:29,260 --> 00:15:32,170
what what you can do is you can click on

00:15:31,000 --> 00:15:33,520
the console tab and there's your

00:15:32,170 --> 00:15:36,250
clicking on each step if you want more

00:15:33,520 --> 00:15:38,320
information about what did the the xhr

00:15:36,250 --> 00:15:40,300
request return or more information about

00:15:38,320 --> 00:15:43,030
the element it'll actually console.log

00:15:40,300 --> 00:15:45,010
for you those objects and so you can

00:15:43,030 --> 00:15:45,970
inspect those and get more details this

00:15:45,010 --> 00:15:48,250
is something that's never been available

00:15:45,970 --> 00:15:50,650
before in testing tools like selenium

00:15:48,250 --> 00:15:52,360
but now give us a lot a lot more ability

00:15:50,650 --> 00:15:54,400
to inspect what's actually occurring

00:15:52,360 --> 00:15:56,560
very important list so that here we got

00:15:54,400 --> 00:15:58,720
the xhr request to articles recent i can

00:15:56,560 --> 00:16:01,650
actually see the xhr request here's the

00:15:58,720 --> 00:16:01,650
request that was made and

00:16:03,720 --> 00:16:08,940
it'll show me the headers here let's

00:16:06,390 --> 00:16:10,350
look at tax here's a request I made

00:16:08,940 --> 00:16:11,550
there's the headers and then here's the

00:16:10,350 --> 00:16:13,800
response that came back here's the

00:16:11,550 --> 00:16:15,390
actual response to that xhr request so I

00:16:13,800 --> 00:16:16,920
can check in the middle of test did

00:16:15,390 --> 00:16:18,690
actually make the xhr request that I

00:16:16,920 --> 00:16:20,280
inspect expected to make where the

00:16:18,690 --> 00:16:21,990
headers right the data that came back

00:16:20,280 --> 00:16:23,880
was that was what I was expecting is

00:16:21,990 --> 00:16:25,890
that the problem is that the xhr request

00:16:23,880 --> 00:16:27,450
is getting called incorrectly very very

00:16:25,890 --> 00:16:28,800
very cool now we've done that it's time

00:16:27,450 --> 00:16:30,360
for you guys to do something I think

00:16:28,800 --> 00:16:32,010
they're ready to do an exercise they are

00:16:30,360 --> 00:16:33,510
ready to do is I could see a lot of

00:16:32,010 --> 00:16:36,510
people that are anxious to get exercise

00:16:33,510 --> 00:16:39,870
get their exercise on so they're the

00:16:36,510 --> 00:16:41,550
very next test you see here is a student

00:16:39,870 --> 00:16:44,250
version of this should search a way to

00:16:41,550 --> 00:16:45,510
copy these three lines of code and I

00:16:44,250 --> 00:16:47,040
want you to paste them in down below and

00:16:45,510 --> 00:16:48,630
I want you to pick a different search

00:16:47,040 --> 00:16:50,220
term that returns a different number of

00:16:48,630 --> 00:16:52,620
results and then I want you to change

00:16:50,220 --> 00:16:54,810
the assertion of how many results are

00:16:52,620 --> 00:16:56,250
returned and set that to whatever should

00:16:54,810 --> 00:16:57,810
be you can go to the actual application

00:16:56,250 --> 00:17:00,330
open it up in your browser and localhost

00:16:57,810 --> 00:17:01,410
4200 and try it and figure it out or

00:17:00,330 --> 00:17:03,270
just try it in the actual application

00:17:01,410 --> 00:17:04,890
and run it in Cypress we're gonna give

00:17:03,270 --> 00:17:08,190
you two minutes to do that and we're

00:17:04,890 --> 00:17:09,690
gonna start right now two minutes this

00:17:08,190 --> 00:17:11,370
would be a great opportunity for them to

00:17:09,690 --> 00:17:12,720
see how the errors work too so that cos

00:17:11,370 --> 00:17:14,670
Alan they're probably gonna get a

00:17:12,720 --> 00:17:16,230
different number back of articles and

00:17:14,670 --> 00:17:18,120
again to see that error message in

00:17:16,230 --> 00:17:20,690
Cyprus so what for that when you're

00:17:18,120 --> 00:17:20,690
working on this

00:17:24,070 --> 00:17:27,640
and we're gonna be doing a whole lot of

00:17:25,720 --> 00:17:29,620
hands-on so if you have not installed

00:17:27,640 --> 00:17:29,950
the application yet now's a good time to

00:17:29,620 --> 00:17:34,570
do it

00:17:29,950 --> 00:17:38,400
bitly /ng see why for angular Cypress

00:17:34,570 --> 00:17:38,400
and GC why got a question

00:17:42,299 --> 00:17:49,149
just click on just click on that file

00:17:47,440 --> 00:17:50,470
down there at the bottom just click if

00:17:49,149 --> 00:17:52,600
you run all tests you're gonna get all

00:17:50,470 --> 00:17:55,480
the results otherwise this is allows you

00:17:52,600 --> 00:17:57,010
to just run one one test back at a time

00:17:55,480 --> 00:17:59,820
yep just click on that one file don't

00:17:57,010 --> 00:17:59,820
click run all specs

00:18:00,020 --> 00:18:12,740
all right do we have the jeopardy music

00:18:02,650 --> 00:18:16,929
we've got one minute left I was not paid

00:18:12,740 --> 00:18:19,130
for my singing voice hopefully not with

00:18:16,929 --> 00:18:22,370
what terms should we search on let's

00:18:19,130 --> 00:18:29,420
pick a time cash what's popular

00:18:22,370 --> 00:18:31,130
I think rxjs is probably nothing nobody

00:18:29,420 --> 00:18:32,660
wants to read those articles safely say

00:18:31,130 --> 00:18:40,520
there's gonna be zero well let's go oh

00:18:32,660 --> 00:18:42,530
wow let's see I think this test is gonna

00:18:40,520 --> 00:18:44,720
fail you is this gonna think it's gonna

00:18:42,530 --> 00:18:48,760
fail I don't know this is gonna win it's

00:18:44,720 --> 00:18:48,760
gonna win it's gonna win I can feel it

00:18:51,500 --> 00:18:55,759
oh we should run our test yeah let's see

00:18:54,080 --> 00:18:57,559
what hath said why I hit

00:18:55,759 --> 00:18:59,090
if you hit save it actually just runs

00:18:57,559 --> 00:19:02,629
your tests again for you so I hit save

00:18:59,090 --> 00:19:09,370
let's see what I should search student

00:19:02,629 --> 00:19:09,370
version timed out how many do we get

00:19:10,299 --> 00:19:15,710
yeah isn't putting in my article all

00:19:14,389 --> 00:19:17,330
right so our version where we search for

00:19:15,710 --> 00:19:19,039
a term that doesn't have any hits came

00:19:17,330 --> 00:19:21,649
back was your results and again look

00:19:19,039 --> 00:19:23,419
here there's our error message right

00:19:21,649 --> 00:19:25,460
this is how it happens is it times out

00:19:23,419 --> 00:19:28,399
and it tells shows us what the problem

00:19:25,460 --> 00:19:29,929
was expected the length to be one but it

00:19:28,399 --> 00:19:32,090
actually got zero so let's just go in

00:19:29,929 --> 00:19:33,379
and fix our test to be zero we'll save

00:19:32,090 --> 00:19:38,090
that and it automatically is going to

00:19:33,379 --> 00:19:39,950
run the tests again and what's great too

00:19:38,090 --> 00:19:41,419
is in that yellow info box it's going to

00:19:39,950 --> 00:19:44,419
give you more clues about what might

00:19:41,419 --> 00:19:45,529
possibly be wrong so pay attention to

00:19:44,419 --> 00:19:47,299
those so instead of having to dig

00:19:45,529 --> 00:19:49,250
through again these cryptic Stax traces

00:19:47,299 --> 00:19:51,889
I can get some hints about what actually

00:19:49,250 --> 00:19:54,740
might be my problem right alright so

00:19:51,889 --> 00:19:56,120
that's a very basic test simple and

00:19:54,740 --> 00:19:57,230
straightforward we've seen how to do

00:19:56,120 --> 00:19:58,580
that if you've been following along

00:19:57,230 --> 00:20:00,049
you've done that if you haven't gotten

00:19:58,580 --> 00:20:01,490
if you if you haven't had a chance to do

00:20:00,049 --> 00:20:03,289
that test no worries that one's super

00:20:01,490 --> 00:20:05,210
simple we're gonna have you do something

00:20:03,289 --> 00:20:08,059
even bigger right we're gonna have you

00:20:05,210 --> 00:20:11,149
doing far more complex tests so right

00:20:08,059 --> 00:20:13,279
underneath that we've got a real meaty

00:20:11,149 --> 00:20:14,990
test right here we've actually given you

00:20:13,279 --> 00:20:16,909
a whole bunch of comments of things we

00:20:14,990 --> 00:20:18,860
want you to do in this specific order

00:20:16,909 --> 00:20:20,750
this is like the recipe that you would

00:20:18,860 --> 00:20:22,490
give a manual tester of go here do this

00:20:20,750 --> 00:20:24,289
do this count these things right do all

00:20:22,490 --> 00:20:27,769
this we just turn that into an actual

00:20:24,289 --> 00:20:30,019
end-to-end test in Cyprus so we want you

00:20:27,769 --> 00:20:32,090
we're gonna give you ten minutes ish to

00:20:30,019 --> 00:20:35,120
write this test which is first check

00:20:32,090 --> 00:20:36,529
that the total number of tags now tags

00:20:35,120 --> 00:20:38,149
let's go back and actually look at the

00:20:36,529 --> 00:20:39,980
application explain this application a

00:20:38,149 --> 00:20:42,049
little bit tags are over here these are

00:20:39,980 --> 00:20:44,059
the tags there are exactly 20 of these

00:20:42,049 --> 00:20:45,769
there's a little cheat I won't make you

00:20:44,059 --> 00:20:49,070
count those manually these are all the

00:20:45,769 --> 00:20:51,139
tags okay so this tag is like a little

00:20:49,070 --> 00:20:55,309
bit of a search box where you can search

00:20:51,139 --> 00:20:57,139
and find tags that are each article is

00:20:55,309 --> 00:20:59,389
tagged with certain things so be sure

00:20:57,139 --> 00:21:01,220
that you clear out your search term if

00:20:59,389 --> 00:21:03,500
you actually have done this to make sure

00:21:01,220 --> 00:21:05,450
that you aren't also filtering on a

00:21:03,500 --> 00:21:07,490
search term but here's your list of tags

00:21:05,450 --> 00:21:09,259
so we want you to count the number of

00:21:07,490 --> 00:21:10,700
tags that actually exists here on the

00:21:09,259 --> 00:21:13,309
left hand side that's the very first

00:21:10,700 --> 00:21:15,519
thing we want you to do then find the

00:21:13,309 --> 00:21:16,940
search tags input and type in the string

00:21:15,519 --> 00:21:20,269
anim

00:21:16,940 --> 00:21:21,679
so here we go a and I M right and that's

00:21:20,269 --> 00:21:23,389
going to give you back a certain number

00:21:21,679 --> 00:21:25,279
this is gonna be a really hard number to

00:21:23,389 --> 00:21:29,289
count I have no idea how to count that

00:21:25,279 --> 00:21:31,820
high three two yeah that's right for me

00:21:29,289 --> 00:21:33,889
and then assert that the number of tags

00:21:31,820 --> 00:21:34,940
that is now visible is going to be that

00:21:33,889 --> 00:21:37,190
number what was that number again I

00:21:34,940 --> 00:21:40,039
forgot I'm not sure I think they got it

00:21:37,190 --> 00:21:42,799
though okay so the second tag in that

00:21:40,039 --> 00:21:44,419
list is animations we want you to click

00:21:42,799 --> 00:21:46,909
on that animations tag when you do that

00:21:44,419 --> 00:21:48,019
it actually returns all the articles

00:21:46,909 --> 00:21:49,909
that are tagged with that and gives you

00:21:48,019 --> 00:21:52,039
a set of sub tags that are tagged with

00:21:49,909 --> 00:21:55,039
that once you've clicked on that second

00:21:52,039 --> 00:21:56,869
tag then get a handle to a certain

00:21:55,039 --> 00:21:58,700
number of selected tags as one we can

00:21:56,869 --> 00:22:00,019
see that here this tag is selected

00:21:58,700 --> 00:22:01,879
there's something about that you can

00:22:00,019 --> 00:22:03,799
look at the CSS inspect it and see that

00:22:01,879 --> 00:22:06,860
it is selected make sure that it is

00:22:03,799 --> 00:22:09,110
selected then assert that the total tags

00:22:06,860 --> 00:22:10,759
is 15 there are 15 tags here we cheated

00:22:09,110 --> 00:22:14,240
for you again showed you that there are

00:22:10,759 --> 00:22:16,519
15 tags back again to our test click on

00:22:14,240 --> 00:22:18,649
the tag that says routing assert that

00:22:16,519 --> 00:22:20,539
there are 3 articles showing if I click

00:22:18,649 --> 00:22:23,960
on the routing tag which is right there

00:22:20,539 --> 00:22:26,119
I'm gonna have 3 articles showing then

00:22:23,960 --> 00:22:27,860
if you get through that in less than 10

00:22:26,119 --> 00:22:29,840
minutes or we have a few bonus tasks for

00:22:27,860 --> 00:22:32,299
it for you we'll let you play with those

00:22:29,840 --> 00:22:34,460
so now it's time to go we're gonna go 10

00:22:32,299 --> 00:22:37,129
minutes from starting from right now go

00:22:34,460 --> 00:22:39,019
ahead and write that test good to see

00:22:37,129 --> 00:22:42,850
how far you can get and then towards the

00:22:39,019 --> 00:22:42,850
end we'll actually write that as well

00:22:43,490 --> 00:22:52,230
if you happen to be getting errors type

00:22:48,150 --> 00:22:54,630
script errors in your in your Visual

00:22:52,230 --> 00:22:57,720
Studio code editor you can fix that by

00:22:54,630 --> 00:23:02,160
going to UTS config dot JSON and adding

00:22:57,720 --> 00:23:03,570
that line right there the types as an

00:23:02,160 --> 00:23:05,610
array with Cyprus in it if you are

00:23:03,570 --> 00:23:08,400
getting those same errors that I was the

00:23:05,610 --> 00:23:10,200
TS Visual Studio code is giving those TS

00:23:08,400 --> 00:23:12,960
errors you can fix that with this line

00:23:10,200 --> 00:23:15,510
and then reloading your going back to a

00:23:12,960 --> 00:23:17,430
TS file and clicking restart doing a

00:23:15,510 --> 00:23:19,710
restart TS server by a command with

00:23:17,430 --> 00:23:23,040
command shift P or control shift P on

00:23:19,710 --> 00:23:24,110
Windows go who's still working on the

00:23:23,040 --> 00:23:30,450
problem

00:23:24,110 --> 00:23:33,210
anybody finished yeah Joe I think you

00:23:30,450 --> 00:23:35,070
made the test too hard I'm all about

00:23:33,210 --> 00:23:37,920
student for the moon shoot for the moon

00:23:35,070 --> 00:23:40,980
absolutely it's that matches the theme I

00:23:37,920 --> 00:23:45,210
like it that's just off the cuff too and

00:23:40,980 --> 00:23:49,920
was yourself together so these are the

00:23:45,210 --> 00:23:52,830
first three commands in here is first I

00:23:49,920 --> 00:23:54,480
want to get the div tags and I check

00:23:52,830 --> 00:23:57,240
that they should have a length then I

00:23:54,480 --> 00:24:00,360
want to get the tax container input and

00:23:57,240 --> 00:24:03,210
type anim in there and then I want to

00:24:00,360 --> 00:24:04,800
get the actual tags so again if you just

00:24:03,210 --> 00:24:06,930
go back and look at the HTML you can

00:24:04,800 --> 00:24:09,120
find selectors for what is this what are

00:24:06,930 --> 00:24:10,740
these elements have for a selector this

00:24:09,120 --> 00:24:12,990
is base this is the same thing you would

00:24:10,740 --> 00:24:14,130
do in regular and end testing is just

00:24:12,990 --> 00:24:16,560
looking through and figure out how do I

00:24:14,130 --> 00:24:18,740
select certain elements then we check

00:24:16,560 --> 00:24:21,510
that our length is a given length right

00:24:18,740 --> 00:24:24,360
so in our case the length was going to

00:24:21,510 --> 00:24:27,330
be 3 and we checked that and we can go

00:24:24,360 --> 00:24:30,810
on and on and on and do all those other

00:24:27,330 --> 00:24:33,030
I have a question Joe yeah why did you

00:24:30,810 --> 00:24:35,100
do that first line there that seems a

00:24:33,030 --> 00:24:36,900
little odd all right so if we save then

00:24:35,100 --> 00:24:41,550
we go back and look at Cyprus will see

00:24:36,900 --> 00:24:42,870
that this test is going to pass that's

00:24:41,550 --> 00:24:45,390
to my little student version that's

00:24:42,870 --> 00:24:47,160
passing right but this is kind of

00:24:45,390 --> 00:24:48,810
interesting watch what happens if I

00:24:47,160 --> 00:24:51,140
comment out this very first line where I

00:24:48,810 --> 00:24:53,990
first I'm counting just the number

00:24:51,140 --> 00:24:58,510
of tags that should be there and I save

00:24:53,990 --> 00:25:05,050
that we go back and look at Cyprus then

00:24:58,510 --> 00:25:08,270
that file that test it's here we go

00:25:05,050 --> 00:25:10,610
it sailed it failed what happened okay

00:25:08,270 --> 00:25:13,070
so this is kind of tricky right what's

00:25:10,610 --> 00:25:17,180
actually happening is when I'm telling

00:25:13,070 --> 00:25:19,220
Cyprus let's refresh our page here let's

00:25:17,180 --> 00:25:21,380
reset our filters what I'm telling

00:25:19,220 --> 00:25:24,100
Cyprus go into this and start typing in

00:25:21,380 --> 00:25:26,180
a and IM it's doing it immediately

00:25:24,100 --> 00:25:28,100
basically as the page is getting loading

00:25:26,180 --> 00:25:30,440
but what is actually happening at the

00:25:28,100 --> 00:25:33,860
same time as it's fired off xhr requests

00:25:30,440 --> 00:25:35,600
to get those tags so it's typing before

00:25:33,860 --> 00:25:37,850
that xhr request does come back that's

00:25:35,600 --> 00:25:39,650
something human can't do but the system

00:25:37,850 --> 00:25:42,770
can it can start typing immediately and

00:25:39,650 --> 00:25:44,630
so all that filtering is happening

00:25:42,770 --> 00:25:47,540
before the data has come back I actually

00:25:44,630 --> 00:25:50,000
really need to wait for the data to come

00:25:47,540 --> 00:25:53,270
back when I told Cyprus go ahead and

00:25:50,000 --> 00:25:55,490
look for 20 tags it actually is gonna

00:25:53,270 --> 00:25:57,050
wait until the 20 tags appear

00:25:55,490 --> 00:25:58,370
wait wait wait though this is so hacky

00:25:57,050 --> 00:26:01,700
this is the stuff we're trying to get

00:25:58,370 --> 00:26:03,560
away from Jo yeah you're teaching people

00:26:01,700 --> 00:26:06,140
it took me an hour to figure out how to

00:26:03,560 --> 00:26:08,810
hack myself around problem goodness okay

00:26:06,140 --> 00:26:10,220
I got a solution for you okay because we

00:26:08,810 --> 00:26:12,320
don't want to write code like this this

00:26:10,220 --> 00:26:18,530
is the the exact problem that we wanted

00:26:12,320 --> 00:26:19,970
to get away from right okay so I want to

00:26:18,530 --> 00:26:21,500
introduce you to a couple other concepts

00:26:19,970 --> 00:26:22,640
and this is really so far what we've

00:26:21,500 --> 00:26:24,530
showed you is kind of cool you've got

00:26:22,640 --> 00:26:26,210
some great interactions we're really

00:26:24,530 --> 00:26:28,760
able to see what's going on in our tests

00:26:26,210 --> 00:26:32,120
and and interact with our test data in a

00:26:28,760 --> 00:26:34,340
watch mode but we're seeing that that

00:26:32,120 --> 00:26:36,170
we're still kind of prone to having some

00:26:34,340 --> 00:26:37,400
potentially hacky ways of doing things

00:26:36,170 --> 00:26:38,870
and I want to show you how you get

00:26:37,400 --> 00:26:42,950
around that so I don't introduce you the

00:26:38,870 --> 00:26:46,160
server route and wait so Cypress can

00:26:42,950 --> 00:26:47,570
actually wait for your API calls so this

00:26:46,160 --> 00:26:50,030
is something that's that's very unique

00:26:47,570 --> 00:26:51,650
it is not available and protractor you

00:26:50,030 --> 00:26:53,660
can't actually wait for API calls you

00:26:51,650 --> 00:26:55,340
can only wait for elements to show up so

00:26:53,660 --> 00:26:57,080
one of the reasons that this is possible

00:26:55,340 --> 00:26:59,480
is because Cypress actually controls the

00:26:57,080 --> 00:27:01,430
browser so it can actually it knows when

00:26:59,480 --> 00:27:03,700
the browser is making xhr requests and

00:27:01,430 --> 00:27:05,740
when it's receiving at say xhr requests

00:27:03,700 --> 00:27:08,289
that's a fairly unique feature to Cyprus

00:27:05,740 --> 00:27:10,600
absolutely so how how easy is this to do

00:27:08,289 --> 00:27:12,309
it's as simple as just saying I want to

00:27:10,600 --> 00:27:14,799
start up the server so I say C Y server

00:27:12,309 --> 00:27:16,210
and I say C Y route and I specify the

00:27:14,799 --> 00:27:17,919
route that I want to watch for so in

00:27:16,210 --> 00:27:21,880
this case I want to watch for the API

00:27:17,919 --> 00:27:23,769
tags and then I want to alias that so

00:27:21,880 --> 00:27:26,889
then I can the third step to this is I

00:27:23,769 --> 00:27:28,269
can say Cyprus wait for tags notice I'm

00:27:26,889 --> 00:27:30,700
using the @ symbol there that's

00:27:28,269 --> 00:27:32,740
designating that I'm using an alias and

00:27:30,700 --> 00:27:34,570
that's what matches up the second and

00:27:32,740 --> 00:27:37,419
the third line to get so dot as is an

00:27:34,570 --> 00:27:39,630
alias dot as is an alias so if we go

00:27:37,419 --> 00:27:44,440
back over to the hacky version here of

00:27:39,630 --> 00:27:48,370
what we did Jo equals hacky I didn't say

00:27:44,440 --> 00:27:50,679
that that was your words here we go

00:27:48,370 --> 00:27:52,659
you see I've got the same code in here I

00:27:50,679 --> 00:27:54,220
copied it over simplified version I

00:27:52,659 --> 00:27:56,289
don't want to go ahead and get rid of

00:27:54,220 --> 00:27:59,139
this I'm gonna say go ahead and start up

00:27:56,289 --> 00:28:03,279
the Sai server and then I want to set up

00:27:59,139 --> 00:28:06,639
the route not router the route and I am

00:28:03,279 --> 00:28:11,620
gonna watch for API tags I'm gonna alias

00:28:06,639 --> 00:28:18,669
it as tags and now I want to just say

00:28:11,620 --> 00:28:22,059
say wait I use the @ symbol to designate

00:28:18,669 --> 00:28:24,940
that I'm using the alias tada

00:28:22,059 --> 00:28:27,580
no more hack did you save it is it's a

00:28:24,940 --> 00:28:28,809
test running we got to run the we had to

00:28:27,580 --> 00:28:29,740
run a different test file we were

00:28:28,809 --> 00:28:32,350
running another test you know it's

00:28:29,740 --> 00:28:35,529
always oh so I go over here so this is

00:28:32,350 --> 00:28:36,460
in the articles using weights file now

00:28:35,529 --> 00:28:41,010
I'm gonna go ahead and click on that

00:28:36,460 --> 00:28:41,010
file and it's now going to run my test

00:28:41,760 --> 00:28:49,830
you can see it's actually saying we blow

00:28:44,830 --> 00:28:54,179
that up just a little bit Oh excellent

00:28:49,830 --> 00:28:54,179
no requests ever occurred

00:28:54,200 --> 00:28:58,730
LiveCode oh you know exactly everybody

00:28:57,529 --> 00:29:00,289
in the front row did you sign the waiver

00:28:58,730 --> 00:29:01,669
because when stuff blows up I don't I

00:29:00,289 --> 00:29:05,179
don't want to be responsible

00:29:01,669 --> 00:29:10,639
i I forgot a very important step here I

00:29:05,179 --> 00:29:12,529
actually have to go visit my site okay

00:29:10,639 --> 00:29:21,139
it's like like wow that's weird it

00:29:12,529 --> 00:29:25,299
hasn't gone anywhere Joe okay so I'm

00:29:21,139 --> 00:29:29,049
gonna click on that again and this time

00:29:25,299 --> 00:29:32,049
we're gonna work what's gonna work

00:29:29,049 --> 00:29:32,049
teamwork

00:29:33,630 --> 00:29:40,020
boof click on is the train is it

00:29:37,860 --> 00:29:42,919
actually visiting no we're not it's not

00:29:40,020 --> 00:29:42,919
actually hitting the site

00:29:46,770 --> 00:29:53,309
if it hit undo a whole bunch of times

00:29:48,740 --> 00:29:57,360
right oh right here I'm just gonna do

00:29:53,309 --> 00:30:05,940
this here before each and bring that

00:29:57,360 --> 00:30:09,230
over here double check know what you

00:30:05,940 --> 00:30:12,150
know this long right you got a visit

00:30:09,230 --> 00:30:13,590
that's right oh oh that's it here's the

00:30:12,150 --> 00:30:15,510
problem so this is really interesting

00:30:13,590 --> 00:30:17,100
I'm asking it to wait for the tags and

00:30:15,510 --> 00:30:20,790
it won't actually process the next step

00:30:17,100 --> 00:30:22,830
and so I was this linear it actually

00:30:20,790 --> 00:30:24,120
does each step one at a time and it

00:30:22,830 --> 00:30:26,700
doesn't move on to the next step until

00:30:24,120 --> 00:30:28,170
the previous step is done so I needed to

00:30:26,700 --> 00:30:30,210
visit before I start to wait for the

00:30:28,170 --> 00:30:32,940
tags and so now when I come back over

00:30:30,210 --> 00:30:38,429
here Hey look look whose test is Network

00:30:32,940 --> 00:30:39,870
EMU awesome yay awesome alright so yeah

00:30:38,429 --> 00:30:41,580
it's something to keep in mind is the

00:30:39,870 --> 00:30:42,929
the order that you're sequencing things

00:30:41,580 --> 00:30:44,940
that you're making sure that you're not

00:30:42,929 --> 00:30:47,370
doing a wait before the action that you

00:30:44,940 --> 00:30:48,720
want to wait for wait is actually a

00:30:47,370 --> 00:30:49,950
really cool thing and it's the kind of

00:30:48,720 --> 00:30:51,960
thing is you're starting to do sir

00:30:49,950 --> 00:30:54,750
Cypress tests you should really get in a

00:30:51,960 --> 00:30:56,309
habit of defaulting to hey if I need

00:30:54,750 --> 00:30:58,770
some data to actually be back I want to

00:30:56,309 --> 00:31:00,900
go ahead and wait for the request to

00:30:58,770 --> 00:31:02,610
come back and we didn't really stress

00:31:00,900 --> 00:31:03,960
this enough but unlike selenium where

00:31:02,610 --> 00:31:05,490
you might put in all these like timeouts

00:31:03,960 --> 00:31:08,460
like well let's wait another half second

00:31:05,490 --> 00:31:11,070
or maybe wait an extra second Cypress is

00:31:08,460 --> 00:31:12,570
just polling it's constantly checking so

00:31:11,070 --> 00:31:14,730
the minute something is ready and

00:31:12,570 --> 00:31:16,410
complete it moves on so it always waits

00:31:14,730 --> 00:31:18,059
the minimum amount of time that you need

00:31:16,410 --> 00:31:20,520
so if you tell it away for a JSON or an

00:31:18,059 --> 00:31:22,530
xhr request and that xhr request takes

00:31:20,520 --> 00:31:24,570
23 milliseconds it only waits the 23

00:31:22,530 --> 00:31:26,820
milliseconds you don't to say half a

00:31:24,570 --> 00:31:29,190
second and know that it's the least

00:31:26,820 --> 00:31:30,540
going to be no more than that so this

00:31:29,190 --> 00:31:32,429
would be the spot where I usually have

00:31:30,540 --> 00:31:34,020
you then do this for waiting for the

00:31:32,429 --> 00:31:35,670
recent articles but since we still have

00:31:34,020 --> 00:31:37,350
people that probably don't have Cypress

00:31:35,670 --> 00:31:39,240
installed and have that come down

00:31:37,350 --> 00:31:41,460
because again it's a really big download

00:31:39,240 --> 00:31:44,309
and which is why we're hoping to have

00:31:41,460 --> 00:31:45,420
people do this before we got started I'm

00:31:44,309 --> 00:31:47,400
going to go ahead and code along and

00:31:45,420 --> 00:31:50,420
just talk you through how we'd wait wait

00:31:47,400 --> 00:31:56,050
for recent articles so here I'm going to

00:31:50,420 --> 00:32:00,100
call Cypress server I'm going to do

00:31:56,050 --> 00:32:02,620
to clear my route and again I actually

00:32:00,100 --> 00:32:08,740
put a little hint in here for our API

00:32:02,620 --> 00:32:14,410
articles recent and I'm going to alias

00:32:08,740 --> 00:32:18,100
that as articles this time I'm gonna do

00:32:14,410 --> 00:32:23,350
it right I'm going to visit my site good

00:32:18,100 --> 00:32:28,140
job excellent I do learn eventually and

00:32:23,350 --> 00:32:32,410
now I am going to say hi wait for

00:32:28,140 --> 00:32:34,150
articles great so I go ahead and save

00:32:32,410 --> 00:32:36,450
that I'm going to come back over

00:32:34,150 --> 00:32:36,450
Oh

00:32:42,830 --> 00:32:46,330
great kick that back off

00:32:52,840 --> 00:32:57,970
and now we're able to wait so this is

00:32:54,850 --> 00:32:59,169
kind of nice but this is uh this doesn't

00:32:57,970 --> 00:33:00,820
really help me with what we talked about

00:32:59,169 --> 00:33:02,889
with selenium and the things that we

00:33:00,820 --> 00:33:05,769
were really trying to work around okay

00:33:02,889 --> 00:33:09,610
edge cases is a big one so one of the

00:33:05,769 --> 00:33:12,009
things I want to show you today is great

00:33:09,610 --> 00:33:15,370
now we can wait for API calls but what

00:33:12,009 --> 00:33:16,720
about stubbing calls so when I first

00:33:15,370 --> 00:33:18,580
heard about this I'm like really stub

00:33:16,720 --> 00:33:19,840
out my application all of it and this is

00:33:18,580 --> 00:33:21,220
the recommendation is that you would

00:33:19,840 --> 00:33:23,230
write one test that does a full

00:33:21,220 --> 00:33:24,429
end-to-end integration so that you test

00:33:23,230 --> 00:33:26,080
out all your integration points

00:33:24,429 --> 00:33:29,139
basically what I would call smoke test

00:33:26,080 --> 00:33:31,450
and then the idea here is we stub out

00:33:29,139 --> 00:33:33,580
all of our other tests we don't need to

00:33:31,450 --> 00:33:35,679
test out the backend API our application

00:33:33,580 --> 00:33:39,340
actually ends the moment that the HTTP

00:33:35,679 --> 00:33:41,769
client requests is sent and and what we

00:33:39,340 --> 00:33:43,330
can do now is intercept those calls so

00:33:41,769 --> 00:33:45,159
why would we do this one it's super

00:33:43,330 --> 00:33:46,990
super fast I don't have to wait for long

00:33:45,159 --> 00:33:48,789
running processes back on the server to

00:33:46,990 --> 00:33:50,559
complete which then cut and cause some

00:33:48,789 --> 00:33:54,340
flakiness wait you mean when you stub

00:33:50,559 --> 00:33:56,350
out a test you can actually listen to

00:33:54,340 --> 00:33:57,820
the next API call and tell it what you

00:33:56,350 --> 00:33:59,710
want to return I can tell it exactly

00:33:57,820 --> 00:34:01,929
what I want to return so this makes my

00:33:59,710 --> 00:34:03,340
test a lot more reliable I don't have

00:34:01,929 --> 00:34:06,340
any sort of things that could possibly

00:34:03,340 --> 00:34:08,379
trip this up edge cases so now if I want

00:34:06,340 --> 00:34:11,139
to test a page where I have to have a

00:34:08,379 --> 00:34:13,000
product that has ten or less items so

00:34:11,139 --> 00:34:14,679
that this other panel displays I just

00:34:13,000 --> 00:34:16,540
say hey pass this data back when we make

00:34:14,679 --> 00:34:18,280
the call for that product pass it back

00:34:16,540 --> 00:34:20,859
with this data I don't have to go out

00:34:18,280 --> 00:34:23,230
and do anything extra for my edge cases

00:34:20,859 --> 00:34:24,760
when I want to test the scenario that

00:34:23,230 --> 00:34:26,079
there are no articles on the page it

00:34:24,760 --> 00:34:28,450
took me a long time to figure out a

00:34:26,079 --> 00:34:31,149
search term that had none jesse was like

00:34:28,450 --> 00:34:32,349
the thousandth term I tried to finally

00:34:31,149 --> 00:34:34,899
find something that didn't returning the

00:34:32,349 --> 00:34:36,010
results right so rather than having to

00:34:34,899 --> 00:34:37,750
spend all that time and figure out a

00:34:36,010 --> 00:34:39,819
combination of testing that it actually

00:34:37,750 --> 00:34:41,950
is the scenario I want I could just tell

00:34:39,819 --> 00:34:42,970
it don't return any articles you could

00:34:41,950 --> 00:34:45,960
have done that right away

00:34:42,970 --> 00:34:48,909
great so in fact here we just replace

00:34:45,960 --> 00:34:50,770
users with articles or yeah recent

00:34:48,909 --> 00:34:54,399
articles and in the response of nothing

00:34:50,770 --> 00:34:56,079
so again we're starting the server we're

00:34:54,399 --> 00:34:58,000
declaring a route I can get very

00:34:56,079 --> 00:34:59,770
specific I can use an object literal or

00:34:58,000 --> 00:35:03,310
I can just pass it as parameters over I

00:34:59,770 --> 00:35:04,650
can be all HTTP verbs or I can specify

00:35:03,310 --> 00:35:06,960
down to

00:35:04,650 --> 00:35:09,000
you know get put post those sorts of

00:35:06,960 --> 00:35:10,980
things and then I give it my URL and

00:35:09,000 --> 00:35:12,119
what is my response so in the case of

00:35:10,980 --> 00:35:13,890
where you want to search for you know

00:35:12,119 --> 00:35:16,440
the articles that I've published that

00:35:13,890 --> 00:35:19,319
for Angie doc yeah you'd be corrected B

00:35:16,440 --> 00:35:21,839
0 and B these square brackets great so

00:35:19,319 --> 00:35:23,369
what about if I'm going to modify my

00:35:21,839 --> 00:35:25,079
data because in all my tests that I

00:35:23,369 --> 00:35:26,730
write and end-to-end using selenium I

00:35:25,079 --> 00:35:28,200
have to write the one like we're gonna

00:35:26,730 --> 00:35:29,880
check how to create an easy so we

00:35:28,200 --> 00:35:31,529
created and of course the very next test

00:35:29,880 --> 00:35:33,299
has to be check how to delete a user

00:35:31,529 --> 00:35:35,609
because the last thing I want to do is

00:35:33,299 --> 00:35:38,130
keep adding users to my system can I do

00:35:35,609 --> 00:35:39,690
this with not just gets yeah I can do

00:35:38,130 --> 00:35:41,430
this with any method at all in fact in

00:35:39,690 --> 00:35:42,809
those cases if you need to have

00:35:41,430 --> 00:35:44,670
different data come back for different

00:35:42,809 --> 00:35:46,650
types of verbs then I want to declare

00:35:44,670 --> 00:35:48,779
each one individually if I'm doing the

00:35:46,650 --> 00:35:52,529
same data for multiple gets or whatnot

00:35:48,779 --> 00:35:53,910
then I'd want to be specific or not I

00:35:52,529 --> 00:35:58,619
mean it really just depends on the use

00:35:53,910 --> 00:36:00,839
case so stubs really help solve our

00:35:58,619 --> 00:36:02,460
problem with being able to return the

00:36:00,839 --> 00:36:04,200
exact data that we want so we're gonna

00:36:02,460 --> 00:36:06,000
take a quick look at an example here you

00:36:04,200 --> 00:36:08,160
got a question oh we have a question yes

00:36:06,000 --> 00:36:10,549
well actually we got one way a long way

00:36:08,160 --> 00:36:10,549
in the back

00:36:14,310 --> 00:36:19,320
does it fail if the call isn't made oh

00:36:16,740 --> 00:36:21,120
is if you wait for it it fails if the

00:36:19,320 --> 00:36:24,600
calls I made so that's another thing

00:36:21,120 --> 00:36:26,880
that's nice is you can decide hey we're

00:36:24,600 --> 00:36:28,320
going to wait for this call if that

00:36:26,880 --> 00:36:30,540
calls never made whether that's a stub

00:36:28,320 --> 00:36:33,270
call or a non stub call then the test

00:36:30,540 --> 00:36:36,560
will fail if it's not made if you stop

00:36:33,270 --> 00:36:36,560
the call it will come back though

00:36:41,870 --> 00:36:46,000
I wouldn't wanna do

00:36:49,430 --> 00:36:55,290
so that's a great a great question yeah

00:36:52,800 --> 00:36:58,680
she's saying basically that she wouldn't

00:36:55,290 --> 00:37:00,390
want to stop data in an Indian test and

00:36:58,680 --> 00:37:02,700
this is a common argument that we hear

00:37:00,390 --> 00:37:04,500
okay but the point is that actually 4/2

00:37:02,700 --> 00:37:06,180
testing the application isn't about

00:37:04,500 --> 00:37:07,800
testing the backend you should have

00:37:06,180 --> 00:37:09,540
integration tests that adequately test

00:37:07,800 --> 00:37:11,130
out the backend and really what we're

00:37:09,540 --> 00:37:13,230
trying to do here in the with end-to-end

00:37:11,130 --> 00:37:15,110
test is test out the interactions of the

00:37:13,230 --> 00:37:17,040
browser what the user is doing and

00:37:15,110 --> 00:37:19,410
making sure that the application is

00:37:17,040 --> 00:37:21,540
going to respond correctly it doesn't

00:37:19,410 --> 00:37:23,340
mean don't do your end-to-end tests and

00:37:21,540 --> 00:37:25,440
don't test out the backend but this

00:37:23,340 --> 00:37:27,870
allows you to do more scenarios right if

00:37:25,440 --> 00:37:29,490
you want to hit scenarios writing

00:37:27,870 --> 00:37:32,250
end-to-end tests for every possible

00:37:29,490 --> 00:37:33,900
scenario and application is pretty

00:37:32,250 --> 00:37:36,240
time-consuming this allows you to write

00:37:33,900 --> 00:37:37,560
tests the tests the front-end for a lot

00:37:36,240 --> 00:37:39,000
of other scenarios that you just don't

00:37:37,560 --> 00:37:41,100
want to spend the time writing those

00:37:39,000 --> 00:37:43,860
tests for the backend and there are lots

00:37:41,100 --> 00:37:45,900
faster right yeah they're a lot faster

00:37:43,860 --> 00:37:47,730
this is how we test out all of our edge

00:37:45,900 --> 00:37:49,800
cases very very quickly and very very

00:37:47,730 --> 00:37:53,550
easily so I'm just gonna give you an

00:37:49,800 --> 00:37:54,930
example here the first one here we're

00:37:53,550 --> 00:37:55,920
firing up the server we're doing the

00:37:54,930 --> 00:37:58,080
recent articles

00:37:55,920 --> 00:37:59,820
we're visiting in our page and we would

00:37:58,080 --> 00:38:02,010
expect then since we're returning blank

00:37:59,820 --> 00:38:07,590
they would have article lengths of zero

00:38:02,010 --> 00:38:10,710
great here I have an article from kimeta

00:38:07,590 --> 00:38:12,510
that we want to have that one returned

00:38:10,710 --> 00:38:14,550
and so I can put whatever data that I

00:38:12,510 --> 00:38:18,660
want in here I can change this data for

00:38:14,550 --> 00:38:20,850
this exact scenario fantastic and I can

00:38:18,660 --> 00:38:22,440
alias at bring it back and I can expect

00:38:20,850 --> 00:38:24,780
that now that we have an article of one

00:38:22,440 --> 00:38:26,250
I can then also inspect you know what's

00:38:24,780 --> 00:38:28,530
actually being displayed does it match

00:38:26,250 --> 00:38:30,150
with what I expect so on and so forth

00:38:28,530 --> 00:38:34,050
this really allows us to be able to do

00:38:30,150 --> 00:38:36,980
the edge test edge case testing that is

00:38:34,050 --> 00:38:39,360
very difficult to do with other tools

00:38:36,980 --> 00:38:41,880
we're kind of running out of time here

00:38:39,360 --> 00:38:43,170
so let me just do that and then I'll

00:38:41,880 --> 00:38:44,910
cover see I'm real quick because I'm

00:38:43,170 --> 00:38:47,010
gonna be done some do they're gonna do

00:38:44,910 --> 00:38:49,200
fixtures all right

00:38:47,010 --> 00:38:51,180
I'll just say it really quick this gets

00:38:49,200 --> 00:38:52,770
really messy so the other with being

00:38:51,180 --> 00:38:54,480
able copy the data around from spot to

00:38:52,770 --> 00:38:56,130
spot to spot one of the things you want

00:38:54,480 --> 00:38:57,770
to look into is fixtures this allows us

00:38:56,130 --> 00:39:00,170
to create JSON files

00:38:57,770 --> 00:39:01,520
reference those JSON files instead this

00:39:00,170 --> 00:39:04,070
allows us to do infinite number of

00:39:01,520 --> 00:39:06,970
scenarios and then keep that really

00:39:04,070 --> 00:39:09,260
clean and not inside of our tests so

00:39:06,970 --> 00:39:11,630
let's go ahead and you want to go ahead

00:39:09,260 --> 00:39:13,370
and write out the stub test yeah so if

00:39:11,630 --> 00:39:15,230
you're if you actually have Cypress

00:39:13,370 --> 00:39:16,700
installed let's follow along we're gonna

00:39:15,230 --> 00:39:18,590
code along together we're gonna do a

00:39:16,700 --> 00:39:22,250
test where we're gonna check displaying

00:39:18,590 --> 00:39:23,750
two tags right so right here we're gonna

00:39:22,250 --> 00:39:25,760
we got a little bit of a cheat right it

00:39:23,750 --> 00:39:28,220
shows us what the tags are again in our

00:39:25,760 --> 00:39:31,370
application tags are these areas over

00:39:28,220 --> 00:39:33,110
here so when it requests the tags it

00:39:31,370 --> 00:39:34,910
actually goes and it gets all the tags

00:39:33,110 --> 00:39:36,410
that are gonna display over here we can

00:39:34,910 --> 00:39:38,300
write a really quick test for what's

00:39:36,410 --> 00:39:41,020
gonna happen when we only get two tags

00:39:38,300 --> 00:39:45,350
back from our request the request is

00:39:41,020 --> 00:39:47,150
where's our URL well this is the tag

00:39:45,350 --> 00:39:51,200
model though so we can look at what the

00:39:47,150 --> 00:39:53,420
API tags API tags yep so I'm going to do

00:39:51,200 --> 00:39:56,450
a little bit of copy and paste and I

00:39:53,420 --> 00:40:04,330
grab the server and grab the route right

00:39:56,450 --> 00:40:04,330
there and API slash tags

00:40:06,470 --> 00:40:11,150
and this is going to tell me what data I

00:40:08,690 --> 00:40:14,660
want to get back and we will grab this

00:40:11,150 --> 00:40:16,700
sample data right here and put a comma

00:40:14,660 --> 00:40:19,250
and do a second one and the tag will do

00:40:16,700 --> 00:40:22,789
testing and routing we want construction

00:40:19,250 --> 00:40:27,049
components right so constructor

00:40:22,789 --> 00:40:30,559
components all right close change the to

00:40:27,049 --> 00:40:34,490
close out that array so there's my route

00:40:30,559 --> 00:40:40,190
and then your route close it out

00:40:34,490 --> 00:40:46,960
it's a parenthesis parenthesis nice

00:40:40,190 --> 00:40:49,250
indentation okay then we want to visit

00:40:46,960 --> 00:40:54,200
all right how do we do it as we didn't

00:40:49,250 --> 00:40:57,109
do an ass tags

00:40:54,200 --> 00:41:05,349
maytag's like that all right side out

00:40:57,109 --> 00:41:08,329
visit the root side dot wait that tags

00:41:05,349 --> 00:41:11,000
we won't put in a condition we could you

00:41:08,329 --> 00:41:12,680
put in an easily put in our check to

00:41:11,000 --> 00:41:15,140
assert that we have two tags returned

00:41:12,680 --> 00:41:18,730
we'll save that and go back and see if I

00:41:15,140 --> 00:41:18,730
did this right live coding for the win

00:41:19,690 --> 00:41:25,369
should wait for tags recent articles

00:41:22,099 --> 00:41:27,319
should display you're in the wrong town

00:41:25,369 --> 00:41:28,670
oh yeah all right that's fine right it

00:41:27,319 --> 00:41:31,099
says file waits right

00:41:28,670 --> 00:41:36,400
no stubs oh I'm in the wrong test file

00:41:31,099 --> 00:41:36,400
go back to Cyprus and do stubs stubs

00:41:39,970 --> 00:41:44,200
what's the Chancellor got this right 20%

00:41:42,130 --> 00:41:46,809
50/50 I don't know all right look

00:41:44,200 --> 00:41:49,329
display tags right there on this on the

00:41:46,809 --> 00:41:50,980
side it shows me I actually did return

00:41:49,329 --> 00:41:52,690
just two tags there's my display that

00:41:50,980 --> 00:41:54,490
lets me test that now I can assert hey

00:41:52,690 --> 00:41:55,539
the only two texts showed up or one of

00:41:54,490 --> 00:41:57,789
their conditions would actually come up

00:41:55,539 --> 00:41:59,530
when there's just two tags so the last

00:41:57,789 --> 00:42:02,049
thing we want to talk about is running

00:41:59,530 --> 00:42:03,250
Cyprus in CI mode it's great to do this

00:42:02,049 --> 00:42:05,680
but of course we want to incorporate

00:42:03,250 --> 00:42:07,690
this as part of our CI process this is

00:42:05,680 --> 00:42:10,210
the best part because this is so super

00:42:07,690 --> 00:42:13,720
simple and easy go back to my terminal

00:42:10,210 --> 00:42:15,880
and I couldn't the other one I can do

00:42:13,720 --> 00:42:16,569
this easily it's just a simple command

00:42:15,880 --> 00:42:22,170
I'm gonna end

00:42:16,569 --> 00:42:25,930
Cyprus here and instead of npx Cyprus

00:42:22,170 --> 00:42:27,730
open its Cyprus run and of course this

00:42:25,930 --> 00:42:29,170
is just a command a command line so I

00:42:27,730 --> 00:42:30,789
can set this up with CI to run this on

00:42:29,170 --> 00:42:33,059
command line I hit this and this is just

00:42:30,789 --> 00:42:36,190
gonna run all of my tests in the entire

00:42:33,059 --> 00:42:38,380
suite of tests and report those out and

00:42:36,190 --> 00:42:40,660
that's it for running Cyprus in CI mode

00:42:38,380 --> 00:42:42,520
I can go into the configuration I can

00:42:40,660 --> 00:42:44,619
give it different reporters and report

00:42:42,520 --> 00:42:46,089
out a JSON file or an XML file and

00:42:44,619 --> 00:42:48,700
incorporate that as part of my Travis

00:42:46,089 --> 00:42:52,359
process or TFS or whatever crazy CI

00:42:48,700 --> 00:42:54,819
system I might be using and oh look at

00:42:52,359 --> 00:42:56,260
that do you see it says video Oh video

00:42:54,819 --> 00:42:57,520
that's another really cool thing is when

00:42:56,260 --> 00:43:00,910
you run in CI mode it'll actually

00:42:57,520 --> 00:43:06,160
capture a video of every test that was

00:43:00,910 --> 00:43:09,400
actually run so as this is running let's

00:43:06,160 --> 00:43:11,079
see here if we go in we see that there's

00:43:09,400 --> 00:43:13,240
now a videos directory we won't play

00:43:11,079 --> 00:43:16,000
these videos but there are MP fours that

00:43:13,240 --> 00:43:18,190
that are for each test and even better

00:43:16,000 --> 00:43:20,200
there's this screenshots if any of my

00:43:18,190 --> 00:43:22,000
tests fail Cyprus will take a screenshot

00:43:20,200 --> 00:43:24,039
of the test at the failing point that'll

00:43:22,000 --> 00:43:25,900
let me begin to dig back into what

00:43:24,039 --> 00:43:27,660
actually what tests failed and what

00:43:25,900 --> 00:43:29,950
point the test was at when it failed so

00:43:27,660 --> 00:43:31,930
so everything that we've shown you today

00:43:29,950 --> 00:43:33,279
is free from Cyprus you don't have to

00:43:31,930 --> 00:43:35,500
pay a dime to use any of this it's

00:43:33,279 --> 00:43:37,390
absolutely fantastic tool if you want

00:43:35,500 --> 00:43:39,400
some more integrations to help you be

00:43:37,390 --> 00:43:41,020
able to manage this process obviously

00:43:39,400 --> 00:43:43,059
trying to go look at screenshots and

00:43:41,020 --> 00:43:45,490
videos that are up on a CI box is a

00:43:43,059 --> 00:43:48,220
little bit more difficult and so they

00:43:45,490 --> 00:43:50,140
actually offer a dashboard component

00:43:48,220 --> 00:43:51,819
that you can purchase they actually have

00:43:50,140 --> 00:43:53,410
a free seedling version of that so

00:43:51,819 --> 00:43:55,720
actually most small teams could start

00:43:53,410 --> 00:43:57,580
with that and be able to use that to run

00:43:55,720 --> 00:44:00,430
these tests and validate what they're

00:43:57,580 --> 00:44:02,320
doing at no cost for larger

00:44:00,430 --> 00:44:03,880
organizations they have a whole workflow

00:44:02,320 --> 00:44:06,670
around it it makes it very very simple

00:44:03,880 --> 00:44:08,950
so I hope what you guys get out of today

00:44:06,670 --> 00:44:10,840
is that Indian testing can actually be

00:44:08,950 --> 00:44:13,360
very productive it can be very reliable

00:44:10,840 --> 00:44:14,590
we can test out all of our edge cases we

00:44:13,360 --> 00:44:16,360
just have to change a little bit of our

00:44:14,590 --> 00:44:18,940
paradigm what we think about how we

00:44:16,360 --> 00:44:20,920
write tests and and take an advantage of

00:44:18,940 --> 00:44:23,320
stubs and fixtures and aliases and

00:44:20,920 --> 00:44:25,000
weights and and there's tons of other

00:44:23,320 --> 00:44:26,530
features that we didn't show you how you

00:44:25,000 --> 00:44:28,420
could if you have a dashboard the loads

00:44:26,530 --> 00:44:29,920
from 10 different sources you could

00:44:28,420 --> 00:44:31,480
write routes for all of those and then

00:44:29,920 --> 00:44:34,000
wait for all 10 of them to complete

00:44:31,480 --> 00:44:35,320
before a single test begins to run it's

00:44:34,000 --> 00:44:37,090
definitely been my experience the

00:44:35,320 --> 00:44:39,550
Cypress tests are much quicker to write

00:44:37,090 --> 00:44:41,140
and much easier to maintain than the

00:44:39,550 --> 00:44:43,240
selenium and protractor tests that I

00:44:41,140 --> 00:44:45,400
used to write so for those of you who

00:44:43,240 --> 00:44:47,760
didn't get the Cypress installed if you

00:44:45,400 --> 00:44:49,840
do finally get it installed go to this

00:44:47,760 --> 00:44:52,510
project and actually walk through these

00:44:49,840 --> 00:44:53,710
user-created exercises that we that we

00:44:52,510 --> 00:44:55,390
put together for you when you get a

00:44:53,710 --> 00:44:57,250
chance if you didn't get a chance to do

00:44:55,390 --> 00:44:59,500
here and just see how quick and easy and

00:44:57,250 --> 00:45:01,330
simple Cypress is to use and then go

00:44:59,500 --> 00:45:02,530
back and beat up your project manager

00:45:01,330 --> 00:45:04,510
until you get approval to put it into

00:45:02,530 --> 00:45:07,570
your project actually I think we made in

00:45:04,510 --> 00:45:10,530
testing reliable good job all right

00:45:07,570 --> 00:45:10,530
thanks everybody for coming

00:45:10,970 --> 00:45:14,150
[Applause]

00:45:15,830 --> 00:45:24,310
you

00:45:17,690 --> 00:45:24,310
[Music]

00:45:29,920 --> 00:45:31,980

YouTube URL: https://www.youtube.com/watch?v=GH9Dvo_BYkk


