Title: Can you imagine a future without zones? | Maxim Koretskyi
Publication date: 2019-05-03
Playlist: ng-conf 2019
Description: 
	Ever since Angular came out, zone.js has been part of change detection. Although it has brought automatic change detection to Angular and simplified testing, it has also been a source of major confusions. With the new Ivy engine coming up, various other options are being considered. In this talk you’ll learn everything there’s to know about controlling change detection. I’ll start with the role of zones and then proceed to zone-less setups with manual and semi-automatic change detection control. I’ll also provide an explanation of trade-offs between each approach.

Angular team might mention something about zone.js briefly, but I don’t expect them to go into details of manual and semi-manual change detection control. This is what I intend to do – explain ins and outs.

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:07,920 --> 00:00:11,170
[Music]

00:00:12,110 --> 00:00:17,580
see what my name is max Koretsky I'm

00:00:14,940 --> 00:00:19,260
also known as the wizard and that's

00:00:17,580 --> 00:00:21,390
probably because I really like to talk

00:00:19,260 --> 00:00:24,269
and write about some pretty complicated

00:00:21,390 --> 00:00:27,840
stuff topics that some people find

00:00:24,269 --> 00:00:31,410
confusing and even mysterious so hence

00:00:27,840 --> 00:00:33,899
the name and today I want to talk about

00:00:31,410 --> 00:00:36,149
one of such topics which is zone GS and

00:00:33,899 --> 00:00:38,579
how it's related to angular and change

00:00:36,149 --> 00:00:40,200
detection and so on GS has been part of

00:00:38,579 --> 00:00:43,469
angular ever since the framework came

00:00:40,200 --> 00:00:45,420
out so it is broad automatic change

00:00:43,469 --> 00:00:47,129
detection - angular but it also has a

00:00:45,420 --> 00:00:50,010
number of downsides some people see it

00:00:47,129 --> 00:00:52,410
as confusing thing it's a mystery and

00:00:50,010 --> 00:00:56,280
well that sounds like right up my alley

00:00:52,410 --> 00:00:58,109
so I'm gonna get into it but before I do

00:00:56,280 --> 00:01:01,010
that say a few words about myself

00:00:58,109 --> 00:01:04,769
probably just like every other speaker

00:01:01,010 --> 00:01:06,630
so yeah I work at a j.crew this amazing

00:01:04,769 --> 00:01:08,970
company this is where we build the

00:01:06,630 --> 00:01:10,830
fastest and most feature-rich data great

00:01:08,970 --> 00:01:12,540
in the world so if you need a degree

00:01:10,830 --> 00:01:15,299
that's the place for you to check out

00:01:12,540 --> 00:01:16,770
and I also started didn't go in-depth it

00:01:15,299 --> 00:01:18,689
was just me in the beginning but today

00:01:16,770 --> 00:01:21,900
we're the great community of awesome

00:01:18,689 --> 00:01:23,880
riders and some of them are here you can

00:01:21,900 --> 00:01:29,100
spot them by win and go in-depth

00:01:23,880 --> 00:01:33,210
t-shirts and I'm also a big fan of 100

00:01:29,100 --> 00:01:35,579
hour work weeks I really like to work

00:01:33,210 --> 00:01:37,920
really hard and I push for hard work so

00:01:35,579 --> 00:01:40,530
I've been programming a little bit more

00:01:37,920 --> 00:01:41,670
than five years but because of this kind

00:01:40,530 --> 00:01:43,979
of intense schedule

00:01:41,670 --> 00:01:45,960
I moved pretty quickly so I just want to

00:01:43,979 --> 00:01:47,250
demonstrate to you what is possible if

00:01:45,960 --> 00:01:47,970
you're willing to put in a lot of

00:01:47,250 --> 00:01:51,630
efforts

00:01:47,970 --> 00:01:53,369
so I started programming in 2014 and an

00:01:51,630 --> 00:01:55,470
idea of a startup so I started a startup

00:01:53,369 --> 00:01:56,479
I didn't know how to program so I

00:01:55,470 --> 00:01:58,700
learned

00:01:56,479 --> 00:02:02,579
unfortunately startup field but that

00:01:58,700 --> 00:02:04,290
happens so in 2015 I started

00:02:02,579 --> 00:02:07,200
contributing a sec overflow quite a lot

00:02:04,290 --> 00:02:10,739
around through about 1,000 answers

00:02:07,200 --> 00:02:12,330
questions who think in 2016

00:02:10,739 --> 00:02:13,700
I used the knowledge that I gained from

00:02:12,330 --> 00:02:15,830
Stack Overflow to

00:02:13,700 --> 00:02:17,930
our blogging and build this platform

00:02:15,830 --> 00:02:20,599
angular in depth then because of my

00:02:17,930 --> 00:02:22,010
speaking activities so writing

00:02:20,599 --> 00:02:23,780
activities to started speaking this is

00:02:22,010 --> 00:02:26,120
the log of inch of icons the first

00:02:23,780 --> 00:02:28,910
conference is spoken and because of my

00:02:26,120 --> 00:02:32,480
speaking and writing activities I got

00:02:28,910 --> 00:02:34,280
this amazing job at AG grid in 2018 so

00:02:32,480 --> 00:02:36,769
you can see pretty fast well I've

00:02:34,280 --> 00:02:40,010
written extensively about that but the

00:02:36,769 --> 00:02:43,670
lessons of one people of mad you know my

00:02:40,010 --> 00:02:46,400
thoughts on hard work so this is the

00:02:43,670 --> 00:02:48,110
article you can check it out okay now

00:02:46,400 --> 00:02:50,690
we're ready to get to change detection

00:02:48,110 --> 00:02:53,209
and zones I don't want to start with how

00:02:50,690 --> 00:02:55,310
things are today in angular what is

00:02:53,209 --> 00:02:57,049
doing why we need it and also I want to

00:02:55,310 --> 00:03:00,500
start with a simple example so this is

00:02:57,049 --> 00:03:04,489
very plain component I just won binding

00:03:00,500 --> 00:03:07,700
that choose the value of a counter and

00:03:04,489 --> 00:03:09,769
one method that is buying to click event

00:03:07,700 --> 00:03:12,260
so when we click we should see the value

00:03:09,769 --> 00:03:15,349
updated on the screen right so I have

00:03:12,260 --> 00:03:20,980
this app here so I'm gonna do a little

00:03:15,349 --> 00:03:23,720
bit of white Kody okay so this is yeah

00:03:20,980 --> 00:03:27,470
okay so I'm gonna go here so this is the

00:03:23,720 --> 00:03:30,920
component okay and here I have this run

00:03:27,470 --> 00:03:34,750
in application okay so I click on the

00:03:30,920 --> 00:03:41,750
body and should update the value okay

00:03:34,750 --> 00:03:45,790
it's not being updated and I'm wondering

00:03:41,750 --> 00:03:48,620
why right why is them not being updated

00:03:45,790 --> 00:03:52,370
cuz if I go back and just check the

00:03:48,620 --> 00:03:55,250
console there's no error here so ever

00:03:52,370 --> 00:03:58,310
since fine it's just not updating okay

00:03:55,250 --> 00:04:00,470
so what are the reasons what can go

00:03:58,310 --> 00:04:02,120
wrong well we have few options the click

00:04:00,470 --> 00:04:03,530
handler is not being executed for some

00:04:02,120 --> 00:04:05,120
reason we just click on the button but

00:04:03,530 --> 00:04:07,310
the click handler is not being executed

00:04:05,120 --> 00:04:09,230
so the component state is not updated

00:04:07,310 --> 00:04:12,200
hounds there's nothing to update in the

00:04:09,230 --> 00:04:14,230
dog the second option is that for some

00:04:12,200 --> 00:04:16,849
reason change detection isn't running

00:04:14,230 --> 00:04:19,970
although we have a new value on the

00:04:16,849 --> 00:04:29,590
counter the

00:04:19,970 --> 00:04:31,730
okay you know yeah so for some reason

00:04:29,590 --> 00:04:33,590
change detection needs and running and

00:04:31,730 --> 00:04:37,150
the third option is things usually don't

00:04:33,590 --> 00:04:40,040
work with live coding and conferences

00:04:37,150 --> 00:04:43,130
well it could be but probably not so

00:04:40,040 --> 00:04:46,190
let's not go there so I'm gonna go now

00:04:43,130 --> 00:04:48,290
oh it's too loud maybe I'm gonna go

00:04:46,190 --> 00:04:52,460
there and check if the click handler is

00:04:48,290 --> 00:04:55,340
being executed and if so then we'll see

00:04:52,460 --> 00:04:56,180
if change detection is running okay so

00:04:55,340 --> 00:05:00,140
how we do that

00:04:56,180 --> 00:05:03,140
well cz we'll go to this for this method

00:05:00,140 --> 00:05:07,430
and we'll say updated right so if it

00:05:03,140 --> 00:05:09,860
logs them we can say that the handler is

00:05:07,430 --> 00:05:13,940
being executed okay so go click on the

00:05:09,860 --> 00:05:15,590
button okay so we can see that it's been

00:05:13,940 --> 00:05:19,310
lots of the state of the component is

00:05:15,590 --> 00:05:21,200
abated the next option while debugging

00:05:19,310 --> 00:05:23,000
is to make sure change detection is

00:05:21,200 --> 00:05:24,830
running and it's a tricky one but I'm

00:05:23,000 --> 00:05:26,330
going to show you how you can do that

00:05:24,830 --> 00:05:27,800
how you can check that the change

00:05:26,330 --> 00:05:31,250
detection is running for a particular

00:05:27,800 --> 00:05:33,140
component it's going to be a little bit

00:05:31,250 --> 00:05:35,240
of the magic so what do you need to do

00:05:33,140 --> 00:05:38,780
open a console we go to sources you go

00:05:35,240 --> 00:05:42,350
to ng folder okay so this the folder

00:05:38,780 --> 00:05:45,340
with Ingo generated code and we need to

00:05:42,350 --> 00:05:50,570
find the factory for our component

00:05:45,340 --> 00:05:54,380
that's the factory ok and what we do we

00:05:50,570 --> 00:05:56,150
need to find the last function in this

00:05:54,380 --> 00:05:58,220
factory that's the function it's called

00:05:56,150 --> 00:06:01,100
a render function I've written about it

00:05:58,220 --> 00:06:02,419
a lot so you can read it about it and

00:06:01,100 --> 00:06:04,850
then go in depth but we just put a

00:06:02,419 --> 00:06:06,740
breakpoint here so that is the function

00:06:04,850 --> 00:06:09,410
that should be executed every single

00:06:06,740 --> 00:06:11,330
time in Gila Rods change detection for

00:06:09,410 --> 00:06:15,490
our component okay so I'm gonna click on

00:06:11,330 --> 00:06:19,370
the bottle you see if it will pause nope

00:06:15,490 --> 00:06:21,470
it's not so okay so change section is

00:06:19,370 --> 00:06:23,150
not running for some reason right we

00:06:21,470 --> 00:06:25,820
don't see any errors and that's actually

00:06:23,150 --> 00:06:32,660
happens in real life that kind of

00:06:25,820 --> 00:06:33,819
scenario so why change detection isn't

00:06:32,660 --> 00:06:38,349
running

00:06:33,819 --> 00:06:38,349
and to tell you the truth I disabled it

00:06:38,619 --> 00:06:44,749
well I actually didn't disable change

00:06:41,300 --> 00:06:47,059
detection but i disabled zone GS and

00:06:44,749 --> 00:06:50,300
that can be quite surprising that even

00:06:47,059 --> 00:06:52,129
though we use in your binding syntax we

00:06:50,300 --> 00:06:54,949
expect that change detection should run

00:06:52,129 --> 00:06:57,770
all the time we all need some G ask for

00:06:54,949 --> 00:07:01,449
that but actually we do and this example

00:06:57,770 --> 00:07:04,430
demonstrates that so you could disable

00:07:01,449 --> 00:07:07,430
some GS from I think version 4 I've also

00:07:04,430 --> 00:07:09,110
written about that so how do you enable

00:07:07,430 --> 00:07:11,569
it well we can just remove that

00:07:09,110 --> 00:07:14,330
parameter inches own no operation or

00:07:11,569 --> 00:07:17,809
explicitly say that we want some GS as

00:07:14,330 --> 00:07:21,649
in jizan so let me do that and show you

00:07:17,809 --> 00:07:24,020
that things are going to go well now so

00:07:21,649 --> 00:07:25,430
we go here main TS right where we

00:07:24,020 --> 00:07:33,199
bootstrap the application this is the

00:07:25,430 --> 00:07:35,149
code and we're just clear it ok so you

00:07:33,199 --> 00:07:39,519
see breakpoint stop but we're not gonna

00:07:35,149 --> 00:07:43,999
go here now just close it for a moment

00:07:39,519 --> 00:07:45,309
update it ok so when I click on the

00:07:43,999 --> 00:07:48,409
button now

00:07:45,309 --> 00:07:51,740
as expected the values being updated and

00:07:48,409 --> 00:07:55,699
if I put a breakpoint here inside our

00:07:51,740 --> 00:07:58,519
component and click on the button right

00:07:55,699 --> 00:08:03,110
you can see that it cost so change

00:07:58,519 --> 00:08:06,830
detection it is running right now now I

00:08:03,110 --> 00:08:09,019
also want to show you how you can see if

00:08:06,830 --> 00:08:12,169
change detection is running in new IV

00:08:09,019 --> 00:08:16,759
engine ok so I have I the application

00:08:12,169 --> 00:08:18,649
here if I open the console here we need

00:08:16,759 --> 00:08:22,399
to find ng folder as well

00:08:18,649 --> 00:08:27,499
so things haven't changed here where is

00:08:22,399 --> 00:08:29,089
it yeah this ng ok and you can see that

00:08:27,499 --> 00:08:31,009
there is no longer a factory 4

00:08:29,089 --> 00:08:34,009
components this good thing things have

00:08:31,009 --> 00:08:35,630
been simplified in IV and in right now

00:08:34,009 --> 00:08:39,380
there is something called template

00:08:35,630 --> 00:08:41,300
function that's it right and it's

00:08:39,380 --> 00:08:42,190
attached directly to a component class

00:08:41,300 --> 00:08:44,259
but

00:08:42,190 --> 00:08:46,569
again the principle is the same this

00:08:44,259 --> 00:08:48,730
function will run during every single

00:08:46,569 --> 00:08:51,149
change detection cycle so if I put a

00:08:48,730 --> 00:08:54,430
breakpoint here I click on the button

00:08:51,149 --> 00:08:59,439
nothing happens but then if I enables on

00:08:54,430 --> 00:09:04,089
Jia's right so I go here and remove this

00:08:59,439 --> 00:09:06,310
part okay okay so and now to demonstrate

00:09:04,089 --> 00:09:11,980
to you yeah you can see there's being

00:09:06,310 --> 00:09:14,259
updated and if I go back here click on

00:09:11,980 --> 00:09:20,980
the button yep

00:09:14,259 --> 00:09:25,060
so it it is paused okay whoo let's go

00:09:20,980 --> 00:09:27,639
back so so what we just learned is that

00:09:25,060 --> 00:09:30,009
zone GF is required to trigger change

00:09:27,639 --> 00:09:31,300
detection in angular it is not part of

00:09:30,009 --> 00:09:33,519
change detection change detection can

00:09:31,300 --> 00:09:36,850
run without zone GS I'll show you how

00:09:33,519 --> 00:09:39,370
but so Jeff is required to trigger

00:09:36,850 --> 00:09:42,100
change detection so let's take a look at

00:09:39,370 --> 00:09:43,870
how this works well don't you have to do

00:09:42,100 --> 00:09:45,910
is just a standalone library it's not

00:09:43,870 --> 00:09:47,350
something that should be used with

00:09:45,910 --> 00:09:50,019
angular all the time it's standalone

00:09:47,350 --> 00:09:51,819
library it's used for testing and it

00:09:50,019 --> 00:09:54,130
patches to synchronous events it patches

00:09:51,819 --> 00:09:58,000
UI events networking events matrix

00:09:54,130 --> 00:10:00,970
events and what it could do is actually

00:09:58,000 --> 00:10:02,529
could notify an interesting party about

00:10:00,970 --> 00:10:05,019
a particular event and when this event

00:10:02,529 --> 00:10:07,870
is finished executing and so what

00:10:05,019 --> 00:10:11,500
angular does it implements ng zone is a

00:10:07,870 --> 00:10:16,480
wrapper class that wraps over some Jia's

00:10:11,500 --> 00:10:18,550
binds to it's like tries to get these

00:10:16,480 --> 00:10:22,029
notifications and implements on like

00:10:18,550 --> 00:10:26,470
receipt ask empty method that the

00:10:22,029 --> 00:10:27,790
angular application subscribes to so

00:10:26,470 --> 00:10:30,610
whenever there is a synchronous event

00:10:27,790 --> 00:10:31,870
and when this event is finished the

00:10:30,610 --> 00:10:34,269
angular application particular

00:10:31,870 --> 00:10:37,149
application ref service will be notified

00:10:34,269 --> 00:10:39,819
about that and then in can run the

00:10:37,149 --> 00:10:41,459
method teak so that's the method that to

00:10:39,819 --> 00:10:47,580
exchange detection for the entire

00:10:41,459 --> 00:10:51,899
components tree okay

00:10:47,580 --> 00:10:55,050
so this is the biggest upside of using

00:10:51,899 --> 00:10:58,769
zone gels it brings automatic change

00:10:55,050 --> 00:11:01,529
detection to angular in angularjs we had

00:10:58,769 --> 00:11:05,279
I don't know if you guys worked with it

00:11:01,529 --> 00:11:08,370
but we had timeout services HTTP

00:11:05,279 --> 00:11:10,890
services that kind of implemented the

00:11:08,370 --> 00:11:14,010
role of zones yes they triggered change

00:11:10,890 --> 00:11:15,720
detection but here we have zones yes so

00:11:14,010 --> 00:11:16,740
this is the biggest side but as I told

00:11:15,720 --> 00:11:20,399
you in the beginning there are a number

00:11:16,740 --> 00:11:21,029
of downsides to zones first is size

00:11:20,399 --> 00:11:23,190
right

00:11:21,029 --> 00:11:26,430
you have to bundle zone GS into angular

00:11:23,190 --> 00:11:28,800
application bring it to client so you

00:11:26,430 --> 00:11:31,620
have bigger applications the second

00:11:28,800 --> 00:11:34,410
thing is it adds to the startup time

00:11:31,620 --> 00:11:37,200
right because zone GS has to pass all

00:11:34,410 --> 00:11:41,100
these events before application starts

00:11:37,200 --> 00:11:44,269
to run then we have excessive change

00:11:41,100 --> 00:11:46,740
detection runs because some GS notifies

00:11:44,269 --> 00:11:49,380
angular application about every single

00:11:46,740 --> 00:11:51,329
band after every single event you will

00:11:49,380 --> 00:11:55,290
have change detection run so sometimes

00:11:51,329 --> 00:11:56,010
it's too much and well obviously it's

00:11:55,290 --> 00:11:58,350
hard to debug

00:11:56,010 --> 00:12:00,560
you can check Stack Overflow for a

00:11:58,350 --> 00:12:04,620
number of questions with stack traces

00:12:00,560 --> 00:12:06,779
balls on Janus so but it is possible

00:12:04,620 --> 00:12:09,360
right if you know how that works I've

00:12:06,779 --> 00:12:12,329
written about it you can read what is in

00:12:09,360 --> 00:12:13,620
angular in depth so the conclusion is

00:12:12,329 --> 00:12:16,100
that don't yes although it brings

00:12:13,620 --> 00:12:20,339
automatic change detection to angular

00:12:16,100 --> 00:12:24,480
it slows time to interactive and it also

00:12:20,339 --> 00:12:26,430
makes the application harder to debug so

00:12:24,480 --> 00:12:28,709
there's got to be a better way maybe not

00:12:26,430 --> 00:12:32,130
database alternative way to use angular

00:12:28,709 --> 00:12:35,550
without some GS and I want to

00:12:32,130 --> 00:12:37,350
demonstrate to you what is possible well

00:12:35,550 --> 00:12:40,260
the first thing which is already

00:12:37,350 --> 00:12:41,910
available today is manual change

00:12:40,260 --> 00:12:45,630
detection working with change detection

00:12:41,910 --> 00:12:47,269
manually it disables on GS but you three

00:12:45,630 --> 00:12:50,010
change detection whenever you need it

00:12:47,269 --> 00:12:54,570
you can think of it as a basic low-level

00:12:50,010 --> 00:12:57,810
API how many of you have injected chain

00:12:54,570 --> 00:13:00,140
detector F alright great yeah a lot of

00:12:57,810 --> 00:13:01,410
people so so you're familiar with this

00:13:00,140 --> 00:13:03,449
technique

00:13:01,410 --> 00:13:05,579
we inject 10 detector rats and when we

00:13:03,449 --> 00:13:08,430
need where trigger detects changes

00:13:05,579 --> 00:13:10,319
manually so what it does it runs change

00:13:08,430 --> 00:13:14,970
detection for the current component and

00:13:10,319 --> 00:13:17,490
all its children okay with IV things

00:13:14,970 --> 00:13:19,649
will be a little bit more simpler we no

00:13:17,490 --> 00:13:22,050
longer will need to inject anything we

00:13:19,649 --> 00:13:23,670
will just import a function at this

00:13:22,050 --> 00:13:25,769
point I think it's called detect changes

00:13:23,670 --> 00:13:28,740
the pen name can change but the

00:13:25,769 --> 00:13:30,629
principle remains same so you import

00:13:28,740 --> 00:13:32,160
that function and you call it whenever

00:13:30,629 --> 00:13:35,610
you need and pass in a component

00:13:32,160 --> 00:13:37,199
instance it does exactly the same in

00:13:35,610 --> 00:13:40,139
last change detection for the current

00:13:37,199 --> 00:13:42,389
component and all its children so again

00:13:40,139 --> 00:13:46,290
a little bit of live coding I want to

00:13:42,389 --> 00:13:49,500
demonstrate that to you okay so I'm

00:13:46,290 --> 00:13:53,610
going to disable zone chest again so

00:13:49,500 --> 00:13:56,339
right now so GS is disabled okay if we

00:13:53,610 --> 00:13:59,550
click on the button nothing happens yeah

00:13:56,339 --> 00:14:03,209
just as we started with but then if I go

00:13:59,550 --> 00:14:08,420
to component all right and I'll use

00:14:03,209 --> 00:14:11,720
constructor so I'm gonna inject oh

00:14:08,420 --> 00:14:20,459
something different

00:14:11,720 --> 00:14:22,170
changed yeah that's it yeah so I'm gonna

00:14:20,459 --> 00:14:23,939
inject it and treat your change

00:14:22,170 --> 00:14:26,459
detection here right after right after

00:14:23,939 --> 00:14:31,139
update the component state for example I

00:14:26,459 --> 00:14:34,829
want to run change detection so we don't

00:14:31,139 --> 00:14:37,290
just disabled we'll see what happens

00:14:34,829 --> 00:14:38,759
right as expected we trigger change

00:14:37,290 --> 00:14:40,410
detection manually so trance so you

00:14:38,759 --> 00:14:47,519
don't need don't yes in this particular

00:14:40,410 --> 00:14:51,829
case in IV again just quick demo so we

00:14:47,519 --> 00:14:54,839
disable some Jesus and we import this

00:14:51,829 --> 00:14:58,620
detect changes function and with house

00:14:54,839 --> 00:15:02,189
in this at this point I think is still

00:14:58,620 --> 00:15:04,430
private is why we have this symbol here

00:15:02,189 --> 00:15:04,430
but

00:15:04,540 --> 00:15:11,149
if we try it now

00:15:07,089 --> 00:15:14,000
yeah it's working all right so manual

00:15:11,149 --> 00:15:16,790
change detection but what I want to do

00:15:14,000 --> 00:15:18,589
now is to compare the dysfunctionality

00:15:16,790 --> 00:15:21,050
so immediately to your change detection

00:15:18,589 --> 00:15:23,089
we have these options but in current

00:15:21,050 --> 00:15:24,560
view engine will also have something

00:15:23,089 --> 00:15:29,389
called mark for check how many of you

00:15:24,560 --> 00:15:31,190
used marker chip okay cool so yeah the

00:15:29,389 --> 00:15:33,680
difference between detect changes in

00:15:31,190 --> 00:15:36,110
mark for check is that mark for check

00:15:33,680 --> 00:15:39,100
doesn't trigger change detection it's

00:15:36,110 --> 00:15:41,779
mainly used for on push components to

00:15:39,100 --> 00:15:43,910
see signal to angular that this

00:15:41,779 --> 00:15:47,209
component in its ancestors need to check

00:15:43,910 --> 00:15:49,250
but if you don't use on gf and only use

00:15:47,209 --> 00:15:51,680
mark for check you will never have

00:15:49,250 --> 00:15:55,100
change detection running it besides from

00:15:51,680 --> 00:15:56,690
the first render and with either things

00:15:55,100 --> 00:15:59,240
will be better because we will have

00:15:56,690 --> 00:16:01,490
something called mark dirty and this

00:15:59,240 --> 00:16:03,380
function will not only mark components

00:16:01,490 --> 00:16:05,959
for checks similar to mark for chair but

00:16:03,380 --> 00:16:10,790
it will also schedule a change detection

00:16:05,959 --> 00:16:12,500
run in the next VM turn so basically

00:16:10,790 --> 00:16:14,959
right after all the application called

00:16:12,500 --> 00:16:16,760
has finished executing in the next VM

00:16:14,959 --> 00:16:20,240
turn you will have a change detection

00:16:16,760 --> 00:16:23,300
schedule and with detect changes if you

00:16:20,240 --> 00:16:25,550
for example have five components that

00:16:23,300 --> 00:16:27,889
have updated state and you call detect

00:16:25,550 --> 00:16:30,560
changes five times you're going to have

00:16:27,889 --> 00:16:32,810
five change detection cycles right which

00:16:30,560 --> 00:16:34,940
is successive with mark for Chuck

00:16:32,810 --> 00:16:37,550
it only schedules want change detection

00:16:34,940 --> 00:16:39,949
cycle in the next VM turn so even though

00:16:37,550 --> 00:16:41,769
you will have five calls you will have

00:16:39,949 --> 00:16:45,649
only one change detection side which is

00:16:41,769 --> 00:16:48,350
which is very good and my gut is very

00:16:45,649 --> 00:16:50,180
similar to how set state works in react

00:16:48,350 --> 00:16:52,010
I didn't also work with it so it

00:16:50,180 --> 00:16:53,779
basically it doesn't immediately trigger

00:16:52,010 --> 00:16:58,540
change detection or reconciliation

00:16:53,779 --> 00:17:01,490
processes schedules change detection

00:16:58,540 --> 00:17:03,439
okay but this Ben this is manual

00:17:01,490 --> 00:17:06,020
approach right it's tedious you may

00:17:03,439 --> 00:17:08,839
forget about it what are the options to

00:17:06,020 --> 00:17:12,020
have it automatic and now when I was

00:17:08,839 --> 00:17:14,540
thinking about it the first part was ok

00:17:12,020 --> 00:17:15,410
we use angular Citrix to bind to Van

00:17:14,540 --> 00:17:19,190
Slyke click

00:17:15,410 --> 00:17:22,310
right so angular should know when our

00:17:19,190 --> 00:17:24,410
particular handler is executed so it can

00:17:22,310 --> 00:17:26,510
easily schedule change detection run by

00:17:24,410 --> 00:17:29,810
itself right we know don't need to do it

00:17:26,510 --> 00:17:34,160
manually and well could it be done like

00:17:29,810 --> 00:17:36,590
that so a click binding is translated to

00:17:34,160 --> 00:17:38,590
the listener instruction in you've i-iv

00:17:36,590 --> 00:17:41,030
engine since this is the compiled code

00:17:38,590 --> 00:17:44,510
so what angular could do is it could

00:17:41,030 --> 00:17:47,300
inject the mark dirty call into this

00:17:44,510 --> 00:17:49,760
listener instruction and and that's that

00:17:47,300 --> 00:17:51,530
would be it right every time a user

00:17:49,760 --> 00:17:54,290
clicks on the button we will have a

00:17:51,530 --> 00:17:57,230
change detection schedule automatic and

00:17:54,290 --> 00:18:00,650
that's a good approach however this is a

00:17:57,230 --> 00:18:03,350
problem while we all agree that probably

00:18:00,650 --> 00:18:06,590
after every single click we are going to

00:18:03,350 --> 00:18:09,260
need a change detection run this doesn't

00:18:06,590 --> 00:18:12,200
hold true for all UI mats like mouse

00:18:09,260 --> 00:18:14,000
move right we don't want to have change

00:18:12,200 --> 00:18:17,150
detection on having every single mouse

00:18:14,000 --> 00:18:20,900
movement which fires I don't I'm the

00:18:17,150 --> 00:18:22,970
second if you move it quickly so then

00:18:20,900 --> 00:18:27,020
angular would need to have an escape

00:18:22,970 --> 00:18:29,180
catch something like this this is

00:18:27,020 --> 00:18:31,010
arbitrary like we need a mark for check

00:18:29,180 --> 00:18:33,650
and then we need to say that for this

00:18:31,010 --> 00:18:36,800
particular event we don't want to have

00:18:33,650 --> 00:18:39,050
change detection and it's actually it's

00:18:36,800 --> 00:18:41,650
not good because most developers will

00:18:39,050 --> 00:18:44,240
probably forget to do that right and

00:18:41,650 --> 00:18:46,520
what are we going to have is very slow

00:18:44,240 --> 00:18:50,570
application with excessive change

00:18:46,520 --> 00:18:55,070
detection grants so it's not explicit

00:18:50,570 --> 00:18:59,360
all right it's implicit so that's not a

00:18:55,070 --> 00:19:02,870
good option a better option is to have

00:18:59,360 --> 00:19:04,870
this mercury call embedded into a

00:19:02,870 --> 00:19:07,370
centralized state management library

00:19:04,870 --> 00:19:09,650
like we use danger rx today that's

00:19:07,370 --> 00:19:13,990
probably the most popular library for

00:19:09,650 --> 00:19:17,350
state management so imagine that we

00:19:13,990 --> 00:19:21,050
could have a function call and this is

00:19:17,350 --> 00:19:22,550
not that you can use currently so this

00:19:21,050 --> 00:19:26,600
is a bit of speculation but this has

00:19:22,550 --> 00:19:28,360
been where it could be right what is

00:19:26,600 --> 00:19:30,580
being discussed at this point

00:19:28,360 --> 00:19:33,669
so suppose you have to connect function

00:19:30,580 --> 00:19:37,029
that is exported from injure X module

00:19:33,669 --> 00:19:40,690
and what this function could do is it

00:19:37,029 --> 00:19:43,799
could take a component class and the

00:19:40,690 --> 00:19:48,539
mapping between component inputs and

00:19:43,799 --> 00:19:51,490
part of the global application state and

00:19:48,539 --> 00:19:54,100
when the state changes the input Sona

00:19:51,490 --> 00:19:57,100
component being updated and then mark

00:19:54,100 --> 00:19:58,240
duties automatically called so let me

00:19:57,100 --> 00:20:01,919
demonstrate suppose you have this

00:19:58,240 --> 00:20:05,049
component with only one input to do this

00:20:01,919 --> 00:20:09,269
right and if you call that function

00:20:05,049 --> 00:20:12,750
connect you pass in a component class

00:20:09,269 --> 00:20:15,789
and as the options you pass this mapping

00:20:12,750 --> 00:20:18,130
so what you see in here is that the

00:20:15,789 --> 00:20:21,870
input that is called - duze on a

00:20:18,130 --> 00:20:26,080
component is mapped to the part of

00:20:21,870 --> 00:20:28,120
application state called - deuce right

00:20:26,080 --> 00:20:30,490
so basically you pass in a selector they

00:20:28,120 --> 00:20:34,799
can select the relevant part of the

00:20:30,490 --> 00:20:36,970
state and whenever this state is updated

00:20:34,799 --> 00:20:41,710
interacts will automatically update

00:20:36,970 --> 00:20:44,200
inputs on your component and it will

00:20:41,710 --> 00:20:47,679
also call mark 30 which will schedule

00:20:44,200 --> 00:20:52,809
change detection run and in this way you

00:20:47,679 --> 00:20:55,870
will have automatic change detection but

00:20:52,809 --> 00:20:58,269
of course most solutions or all

00:20:55,870 --> 00:21:02,139
solutions come at a cost and with

00:20:58,269 --> 00:21:06,100
downside and here the problem is that it

00:21:02,139 --> 00:21:08,139
only works for the part that is stored

00:21:06,100 --> 00:21:10,360
in a global state so if you have

00:21:08,139 --> 00:21:13,510
something you have local component state

00:21:10,360 --> 00:21:17,470
right then you don't usually bind it to

00:21:13,510 --> 00:21:19,779
a global indirect State and for this use

00:21:17,470 --> 00:21:22,990
case you would still need to use manual

00:21:19,779 --> 00:21:24,610
change detection I know that at this

00:21:22,990 --> 00:21:27,760
point also this problem is being

00:21:24,610 --> 00:21:30,580
discussed so something called local

00:21:27,760 --> 00:21:35,279
component state is being discussed

00:21:30,580 --> 00:21:38,799
within G of X but it's very tentative so

00:21:35,279 --> 00:21:41,530
probably the safe path would be is to

00:21:38,799 --> 00:21:43,700
use manual change detection

00:21:41,530 --> 00:21:46,820
okay so let's summarize we've learned

00:21:43,700 --> 00:21:50,450
today that zone GS although it is not

00:21:46,820 --> 00:21:53,810
part of change detection it is used to

00:21:50,450 --> 00:21:55,600
trigger change detection it is needed to

00:21:53,810 --> 00:21:58,100
make change detection automatically

00:21:55,600 --> 00:22:01,220
without zone GS you have these options

00:21:58,100 --> 00:22:03,770
you have manual change detection right

00:22:01,220 --> 00:22:05,540
it's showing you but it steers unusual

00:22:03,770 --> 00:22:09,290
it's not something that we angular

00:22:05,540 --> 00:22:11,660
developers are accustomed to the angular

00:22:09,290 --> 00:22:14,210
team could implement automatic change

00:22:11,660 --> 00:22:17,420
detection for example through internal

00:22:14,210 --> 00:22:21,920
mechanisms like bindings event bindings

00:22:17,420 --> 00:22:26,360
or possibly patching setters like view

00:22:21,920 --> 00:22:28,460
jesters however it's implicit there

00:22:26,360 --> 00:22:30,410
needs to be an escape hatch for us

00:22:28,460 --> 00:22:32,930
developers to notify angular we don't

00:22:30,410 --> 00:22:37,310
need change detection for that so the

00:22:32,930 --> 00:22:38,930
better approach is explicit opt in in

00:22:37,310 --> 00:22:41,090
change detection automatic change

00:22:38,930 --> 00:22:43,040
detection through centralized state

00:22:41,090 --> 00:22:44,660
management so you explicitly state which

00:22:43,040 --> 00:22:48,980
components you want to run change

00:22:44,660 --> 00:22:52,310
detection automatically for all right so

00:22:48,980 --> 00:22:54,560
which approach you like that's a

00:22:52,310 --> 00:22:57,710
question for you if if you want to

00:22:54,560 --> 00:22:59,060
discuss it talk about it you can spot me

00:22:57,710 --> 00:23:03,310
in the hallway I'll be wearing this

00:22:59,060 --> 00:23:09,350
t-shirt happy to talk about complicated

00:23:03,310 --> 00:23:12,350
mysterious confusing stuff yeah also a

00:23:09,350 --> 00:23:14,680
bit of articles for you to read so of

00:23:12,350 --> 00:23:17,930
reverse engineer a lot of frameworks

00:23:14,680 --> 00:23:20,600
they do a lot of that you know hardcore

00:23:17,930 --> 00:23:23,540
stuff so I've summarized my experience

00:23:20,600 --> 00:23:25,190
in reverse engineer article you can read

00:23:23,540 --> 00:23:28,280
more about change detection and all the

00:23:25,190 --> 00:23:29,050
volunteers in the articles I also show

00:23:28,280 --> 00:23:32,150
here

00:23:29,050 --> 00:23:34,490
I'm also organizing the first conference

00:23:32,150 --> 00:23:36,440
in Kiev Ukraine for singular conference

00:23:34,490 --> 00:23:39,470
if you happen to be in Ukraine some

00:23:36,440 --> 00:23:44,330
around it or fancy trip to Ukraine

00:23:39,470 --> 00:23:47,300
definitely check it out and follow me on

00:23:44,330 --> 00:23:49,720
Twitter for you know some hardcore stuff

00:23:47,300 --> 00:23:52,850
if you want to learn fundamentals I

00:23:49,720 --> 00:23:54,580
occasionally tweet about some hardcore

00:23:52,850 --> 00:24:00,710
stuff articles that are right

00:23:54,580 --> 00:24:03,050
etc and I hope that the knowledge that

00:24:00,710 --> 00:24:06,050
you've learned today has awakened to

00:24:03,050 --> 00:24:08,150
your curiosity to learn more so never

00:24:06,050 --> 00:24:10,670
stop learning and by doing so you will

00:24:08,150 --> 00:24:13,970
be able to reach new heights every day

00:24:10,670 --> 00:24:16,040
so I want you all guys to be

00:24:13,970 --> 00:24:19,000
extraordinary nears thank you for

00:24:16,040 --> 00:24:19,000
attention good luck

00:24:27,710 --> 00:24:34,440
[Music]

00:24:40,269 --> 00:24:42,330

YouTube URL: https://www.youtube.com/watch?v=TRfDXG98_Qg


