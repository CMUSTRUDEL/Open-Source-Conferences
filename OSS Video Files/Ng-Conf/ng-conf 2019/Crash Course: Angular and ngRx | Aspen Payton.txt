Title: Crash Course: Angular and ngRx | Aspen Payton
Publication date: 2019-05-04
Playlist: ng-conf 2019
Description: 
	This is a hands-on workshop that teaches participants how to structure an Angular application to use NgRx for state management. When I set out to learn NgRx a year ago, I found a lot of high level discussion of the Redux pattern and a variety of very specific code examples, but struggled to find education that laid out the pattern from beginning to end with fully functional examples. That is what I intend to provide with this workshop.

We will being with a starter project and existing HTML. We will set up state for the application, walk through creating a basic action and reducer, wire up the action and reducer in our app, and dispatch the action from a component so we can see it working in the app. From here, we can walk through the pattern again introducing additional complexity by passing a payload into an action and creating an action with an effect. Participants will end the workshop with a simple, but fully functional, application using NgRx.

Slides: https://bit.ly/2GV8XY9
Starter project:  https://stackblitz.com/github/apaytonmn/bananaapp
Checkpoint repositories:
https://stackblitz.com/github/apaytonmn/bananaapp-checkpoint-one
https://stackblitz.com/github/apaytonmn/bananaapp-checkpoint-two
https://stackblitz.com/github/apaytonmn/bananaapp-checkpoint-three
https://stackblitz.com/github/apaytonmn/bananaapp-final
Final version with comments explaining the code:
https://stackblitz.com/github/apaytonmn/bananaapp-final-with-comments

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:07,920 --> 00:00:11,170
[Music]

00:00:12,110 --> 00:00:19,020
so just some sets of expectations here

00:00:16,520 --> 00:00:22,109
my slides are available at the first

00:00:19,020 --> 00:00:24,269
link here there's a reference to the

00:00:22,109 --> 00:00:26,880
starter project URL in this slide as

00:00:24,269 --> 00:00:30,300
well and we're going to be doing coding

00:00:26,880 --> 00:00:32,040
along the way here and unlike the last

00:00:30,300 --> 00:00:34,140
session that I think was in here my

00:00:32,040 --> 00:00:35,700
intention is not to talk a little bit

00:00:34,140 --> 00:00:38,309
and then set you loose on an exercise

00:00:35,700 --> 00:00:40,800
I'm going to be coding along with you

00:00:38,309 --> 00:00:42,149
guys so if you have the slides it might

00:00:40,800 --> 00:00:44,070
be a little bit easier for you to have a

00:00:42,149 --> 00:00:46,680
closer view of the code that we're going

00:00:44,070 --> 00:00:48,210
to be writing my intent is for you to

00:00:46,680 --> 00:00:49,680
write it along with me but if you just

00:00:48,210 --> 00:00:51,660
want to cut and paste it out of this out

00:00:49,680 --> 00:00:54,149
of the slides I mean that's your your

00:00:51,660 --> 00:00:57,690
choice I always feel that I learned

00:00:54,149 --> 00:00:59,940
better by doing so one caution if you do

00:00:57,690 --> 00:01:02,609
copy and paste out of the slides I

00:00:59,940 --> 00:01:04,860
noticed on my own when I was just doing

00:01:02,609 --> 00:01:07,080
some trial runs that some of the single

00:01:04,860 --> 00:01:09,270
apostrophes or that quotes and the

00:01:07,080 --> 00:01:11,270
slides are a little wonky so if you copy

00:01:09,270 --> 00:01:13,710
and paste into the code and you get a

00:01:11,270 --> 00:01:16,290
string error of some sort you might need

00:01:13,710 --> 00:01:19,500
to replace those single quotes within

00:01:16,290 --> 00:01:22,530
the code I have some checkpoint

00:01:19,500 --> 00:01:24,509
repositories along the way so once we're

00:01:22,530 --> 00:01:26,340
done with a certain section of code if

00:01:24,509 --> 00:01:28,140
you get lost or you're having errors you

00:01:26,340 --> 00:01:30,479
can always reference that checkpoint

00:01:28,140 --> 00:01:34,259
repository to have a starting point

00:01:30,479 --> 00:01:36,659
midway through the process we're going

00:01:34,259 --> 00:01:38,909
to be doing some debug later on using

00:01:36,659 --> 00:01:41,369
the Redux dev tools extension in chrome

00:01:38,909 --> 00:01:42,869
so if you don't have that already you

00:01:41,369 --> 00:01:45,090
might want to get that installed quick

00:01:42,869 --> 00:01:46,530
if you want to follow along you'll be

00:01:45,090 --> 00:01:48,479
able to see what I'm doing either way so

00:01:46,530 --> 00:01:52,560
up to you if you want to take that extra

00:01:48,479 --> 00:01:53,640
step I'm a big group obviously so I'm

00:01:52,560 --> 00:01:55,799
not going to plan to take questions

00:01:53,640 --> 00:01:57,719
along the way but we have Jorge over

00:01:55,799 --> 00:01:59,310
here so if you're having any trouble

00:01:57,719 --> 00:02:01,590
along the way and you have a question

00:01:59,310 --> 00:02:06,810
he's familiar with in grx so he can

00:02:01,590 --> 00:02:08,970
probably help you out so to get started

00:02:06,810 --> 00:02:12,569
with some introductions here my name is

00:02:08,970 --> 00:02:13,650
Aspen Payton as I was introduced my

00:02:12,569 --> 00:02:15,750
background

00:02:13,650 --> 00:02:18,959
long-term has not been an angular I

00:02:15,750 --> 00:02:21,630
actually worked for 19 years at IBM

00:02:18,959 --> 00:02:24,030
doing back in development for the last

00:02:21,630 --> 00:02:25,830
several years all in Java and then I

00:02:24,030 --> 00:02:28,349
decided I was done with that and I

00:02:25,830 --> 00:02:29,930
wanted a big change so I moved less than

00:02:28,349 --> 00:02:32,190
18 months ago to the Mayo Clinic and

00:02:29,930 --> 00:02:34,890
started learning angular there with the

00:02:32,190 --> 00:02:38,790
team that I picked up work with we were

00:02:34,890 --> 00:02:42,269
all kind of on the same track and got

00:02:38,790 --> 00:02:44,150
introduced to ng rx there so just to set

00:02:42,269 --> 00:02:46,110
some expectations for this presentation

00:02:44,150 --> 00:02:47,310
because I've been chatting people with

00:02:46,110 --> 00:02:48,989
people since I've been here and they're

00:02:47,310 --> 00:02:50,250
like oh I'm gonna go to your your

00:02:48,989 --> 00:02:52,260
presentation because I want to learn

00:02:50,250 --> 00:02:55,019
about you know advanced ways to extend

00:02:52,260 --> 00:02:57,630
the pattern or to introduce a debug

00:02:55,019 --> 00:02:59,519
within my ng Rx application this is not

00:02:57,630 --> 00:03:02,849
the session for you if that's what

00:02:59,519 --> 00:03:04,830
you're looking for this is a very basic

00:03:02,849 --> 00:03:06,330
introduction to ngrick so if you're

00:03:04,830 --> 00:03:08,700
already familiar with the pattern and

00:03:06,330 --> 00:03:10,110
you want to go beyond that there's an

00:03:08,700 --> 00:03:12,450
advanced course I heard in one of the

00:03:10,110 --> 00:03:15,120
other ballrooms on rxjs during this time

00:03:12,450 --> 00:03:17,459
if you are looking for an entry level

00:03:15,120 --> 00:03:19,260
understanding of ng rx and you want to

00:03:17,459 --> 00:03:21,269
take a step back look at the overall

00:03:19,260 --> 00:03:25,040
pattern and how to implement it in an

00:03:21,269 --> 00:03:29,489
application this is where you want to be

00:03:25,040 --> 00:03:32,160
I'll also note that just listening to

00:03:29,489 --> 00:03:35,549
some of the pitches yesterday has taught

00:03:32,160 --> 00:03:38,100
me that I'm nowhere near the expert on

00:03:35,549 --> 00:03:39,600
pinche rx and I'd have some takeaways

00:03:38,100 --> 00:03:41,430
that I'm going to be looking into when I

00:03:39,600 --> 00:03:44,760
leave here just to advance my own

00:03:41,430 --> 00:03:46,440
knowledge of the pattern there's just a

00:03:44,760 --> 00:03:48,569
lot of new functionality to incorporate

00:03:46,440 --> 00:03:54,450
and this whole community moves so

00:03:48,569 --> 00:03:56,940
quickly so I want to talk a little bit

00:03:54,450 --> 00:04:00,180
about my my journey and how I ended up

00:03:56,940 --> 00:04:02,639
here I mentioned that I'm at Mayo and

00:04:00,180 --> 00:04:05,069
while I was there and starting to learn

00:04:02,639 --> 00:04:07,019
angular I had a co-worker tell me hey

00:04:05,069 --> 00:04:09,450
you should really be using ng rx it's

00:04:07,019 --> 00:04:12,569
the cool way to manage your state and I

00:04:09,450 --> 00:04:15,959
thought I don't really know why I need

00:04:12,569 --> 00:04:17,489
that I kind of had a Mis understanding

00:04:15,959 --> 00:04:19,680
that maybe it was related to routing in

00:04:17,489 --> 00:04:21,450
my application it was just totally over

00:04:19,680 --> 00:04:26,200
my head I wasn't I wasn't getting at all

00:04:21,450 --> 00:04:29,800
and this was in February of last year so

00:04:26,200 --> 00:04:33,760
the aha moment that I had was when I was

00:04:29,800 --> 00:04:35,920
working in a sandbox application and we

00:04:33,760 --> 00:04:37,570
were just you know kind of trying to get

00:04:35,920 --> 00:04:40,270
a starter project going and we had a

00:04:37,570 --> 00:04:41,830
couple of sources of input we had we

00:04:40,270 --> 00:04:43,630
could be pulling patient data from the

00:04:41,830 --> 00:04:46,330
enterprise level or we can pull patient

00:04:43,630 --> 00:04:48,370
data from our registry store it was just

00:04:46,330 --> 00:04:52,210
a local server that we had set up with

00:04:48,370 --> 00:04:53,860
our team and so I had to set up and you

00:04:52,210 --> 00:04:55,900
could choose which source of data you

00:04:53,860 --> 00:04:57,820
wanted and whatever source you picked we

00:04:55,900 --> 00:04:59,710
would draw in a list of patients and

00:04:57,820 --> 00:05:01,480
populate it on the screen and then you

00:04:59,710 --> 00:05:03,190
could click on a patient and we bring up

00:05:01,480 --> 00:05:04,920
all the details of that patient so you

00:05:03,190 --> 00:05:07,240
could enrich some data related to that

00:05:04,920 --> 00:05:09,520
but as soon as you clicked on a patient

00:05:07,240 --> 00:05:11,470
in the list and it went and loaded a new

00:05:09,520 --> 00:05:14,380
page with details for that patient I

00:05:11,470 --> 00:05:16,930
lost the knowledge of what my data

00:05:14,380 --> 00:05:19,450
source was because that knowledge was in

00:05:16,930 --> 00:05:20,890
the last page and so then I started

00:05:19,450 --> 00:05:23,040
thinking oh my gosh I'm gonna have to

00:05:20,890 --> 00:05:25,380
like start passing data between my pages

00:05:23,040 --> 00:05:28,840
and that's when I had this aha moment

00:05:25,380 --> 00:05:30,760
that's why I wanted an grx because if I

00:05:28,840 --> 00:05:33,520
could just store that knowledge of what

00:05:30,760 --> 00:05:34,990
my data source was in my state then any

00:05:33,520 --> 00:05:36,700
component in my application would have

00:05:34,990 --> 00:05:38,140
access to that knowledge and then I

00:05:36,700 --> 00:05:40,990
wouldn't deal with having to pass data

00:05:38,140 --> 00:05:43,390
all over my application so once I had

00:05:40,990 --> 00:05:45,970
that moment of realization that I wanted

00:05:43,390 --> 00:05:49,150
to learn in grx I embarked on a mission

00:05:45,970 --> 00:05:52,030
to find education about it and it was

00:05:49,150 --> 00:05:53,500
really easy to find education sessions

00:05:52,030 --> 00:05:55,660
that just talked about the general

00:05:53,500 --> 00:05:57,850
pattern and the high level concepts of

00:05:55,660 --> 00:06:01,300
engineer X but I really struggled to

00:05:57,850 --> 00:06:03,010
find a basic application that would help

00:06:01,300 --> 00:06:05,320
me understand how to take that pattern

00:06:03,010 --> 00:06:07,090
and translate it into code I found

00:06:05,320 --> 00:06:08,470
myself just taking other people's code

00:06:07,090 --> 00:06:11,230
and trying to pick it apart and

00:06:08,470 --> 00:06:13,540
understand the process and it was not an

00:06:11,230 --> 00:06:17,470
easy it was not an easy task and a lot

00:06:13,540 --> 00:06:19,450
of the examples that were out there were

00:06:17,470 --> 00:06:21,510
very tailored to a specific industry it

00:06:19,450 --> 00:06:23,470
might have been financial related or

00:06:21,510 --> 00:06:25,690
manufacturing or something like that so

00:06:23,470 --> 00:06:27,190
I was having a hard time getting

00:06:25,690 --> 00:06:30,900
wrapping my brain around the whole thing

00:06:27,190 --> 00:06:33,670
so initially my one of my co-workers

00:06:30,900 --> 00:06:35,470
stumbled upon an article that used an

00:06:33,670 --> 00:06:38,080
analogy that related the engineer X

00:06:35,470 --> 00:06:39,580
pattern to an apple and it said here's

00:06:38,080 --> 00:06:39,849
some actions you can do with your Apple

00:06:39,580 --> 00:06:41,319
you

00:06:39,849 --> 00:06:42,639
and wash her Apple and take a bite of

00:06:41,319 --> 00:06:45,550
your Apple and I thought I loved that

00:06:42,639 --> 00:06:47,709
analogy I mean anybody can relate to the

00:06:45,550 --> 00:06:50,069
analogy of an apple it's not industry

00:06:47,709 --> 00:06:52,479
specific so I said I'm gonna write that

00:06:50,069 --> 00:06:54,699
program I'm gonna write a program about

00:06:52,479 --> 00:06:56,589
fruit and then I'm gonna teach the rest

00:06:54,699 --> 00:06:59,979
of my team how and grx works based on

00:06:56,589 --> 00:07:01,689
fruit and from that it kind of that I

00:06:59,979 --> 00:07:03,009
went to a local conference and just

00:07:01,689 --> 00:07:05,439
talked about the work that we were doing

00:07:03,009 --> 00:07:07,389
at Mayo and was not this workshop at the

00:07:05,439 --> 00:07:10,289
time but they told me about this

00:07:07,389 --> 00:07:12,459
conference and I thought hey if my team

00:07:10,289 --> 00:07:13,959
learned about in Gerak's from fruit

00:07:12,459 --> 00:07:15,759
maybe other people might want to learn

00:07:13,959 --> 00:07:21,610
about ngrick from fruit so I threw it

00:07:15,759 --> 00:07:27,039
out there and Here I am so why do you

00:07:21,610 --> 00:07:28,929
want to learn an grx in our case we in

00:07:27,039 --> 00:07:30,929
our the v1 version of our application it

00:07:28,929 --> 00:07:33,669
was written before I even came into Mayo

00:07:30,929 --> 00:07:35,139
we were passing data up and down through

00:07:33,669 --> 00:07:37,119
different layers of controllers and it

00:07:35,139 --> 00:07:38,649
was very difficult to track who was

00:07:37,119 --> 00:07:41,289
changing the information it was hard to

00:07:38,649 --> 00:07:43,089
debug and one of my co-workers just

00:07:41,289 --> 00:07:45,219
called it spaghetti code so one of the

00:07:43,089 --> 00:07:46,599
reasons we were trying to implement in

00:07:45,219 --> 00:07:49,479
Gerak's and our newer version was to

00:07:46,599 --> 00:07:51,879
avoid the spaghetti code because NJ rx

00:07:49,479 --> 00:07:54,610
gives you a single source of truth for

00:07:51,879 --> 00:07:57,219
your entire application anything that

00:07:54,610 --> 00:07:58,869
you want to to communicate between your

00:07:57,219 --> 00:08:00,939
components you can put it in the store

00:07:58,869 --> 00:08:02,740
and then if that store gets updated all

00:08:00,939 --> 00:08:04,629
of their components who are subscribed

00:08:02,740 --> 00:08:07,689
to it have immediate feedback that that

00:08:04,629 --> 00:08:09,669
information has changed using the

00:08:07,689 --> 00:08:11,649
pattern also gives you consistent

00:08:09,669 --> 00:08:13,629
behavior through your application

00:08:11,649 --> 00:08:15,459
because any component that is updating

00:08:13,629 --> 00:08:17,349
your state is following the same rules

00:08:15,459 --> 00:08:19,719
for making those updates

00:08:17,349 --> 00:08:22,749
so it's very easy to track changes that

00:08:19,719 --> 00:08:24,849
happen within your code there's also

00:08:22,749 --> 00:08:26,679
some great perks for testing and I

00:08:24,849 --> 00:08:28,659
mentioned the reduxid dev tools up front

00:08:26,679 --> 00:08:31,809
and we'll look into that a little bit

00:08:28,659 --> 00:08:34,779
more later on in the session and another

00:08:31,809 --> 00:08:36,849
useful thing about and jerax is that

00:08:34,779 --> 00:08:39,399
it's basically the redux pattern the

00:08:36,849 --> 00:08:41,979
pattern that injera X implements is

00:08:39,399 --> 00:08:44,380
called redux and it's applicable across

00:08:41,979 --> 00:08:46,810
frameworks so the redux pattern is also

00:08:44,380 --> 00:08:49,449
implemented in react it's implemented in

00:08:46,810 --> 00:08:51,130
view it's implemented in ember so once

00:08:49,449 --> 00:08:52,510
you understand the fundamentals of that

00:08:51,130 --> 00:08:53,170
pattern you can take that knowledge

00:08:52,510 --> 00:08:56,920
across

00:08:53,170 --> 00:08:59,110
forms however it might not be for

00:08:56,920 --> 00:09:01,240
everyone if you have a very simple

00:08:59,110 --> 00:09:03,100
application a single page application

00:09:01,240 --> 00:09:05,260
and you're you have no need to pass data

00:09:03,100 --> 00:09:07,450
around and have the single source of

00:09:05,260 --> 00:09:08,920
truth between your components then you

00:09:07,450 --> 00:09:10,510
might not need the overhead because it

00:09:08,920 --> 00:09:14,550
does add a layer of complexity to your

00:09:10,510 --> 00:09:14,550
application to implement this framework

00:09:15,449 --> 00:09:21,699
so we're going to start with the very

00:09:18,370 --> 00:09:24,190
most basic pattern you can get in ng Rx

00:09:21,699 --> 00:09:25,630
I already told you that we're going to

00:09:24,190 --> 00:09:27,070
have a single source of truth for our

00:09:25,630 --> 00:09:29,889
application and that's going to be our

00:09:27,070 --> 00:09:30,910
data store that's where anything that we

00:09:29,889 --> 00:09:33,880
want to communicate between our

00:09:30,910 --> 00:09:35,440
components will be located and then

00:09:33,880 --> 00:09:37,600
we're going to define a set of actions

00:09:35,440 --> 00:09:39,370
that will be the things that we can do

00:09:37,600 --> 00:09:42,550
with our state the ways that we might

00:09:39,370 --> 00:09:44,889
want to change it however actions are

00:09:42,550 --> 00:09:47,050
not actually going to update the state

00:09:44,889 --> 00:09:49,300
or change it that is going to be done

00:09:47,050 --> 00:09:52,480
through reducers reducers are the only

00:09:49,300 --> 00:09:55,269
entities within this function that will

00:09:52,480 --> 00:09:58,510
update your state and reducers are pure

00:09:55,269 --> 00:10:00,040
functions so given the same set of input

00:09:58,510 --> 00:10:01,390
values they'll always have the same set

00:10:00,040 --> 00:10:02,980
of output values there's not going to be

00:10:01,390 --> 00:10:05,589
any additional logic within your

00:10:02,980 --> 00:10:08,079
reducers if you need some more

00:10:05,589 --> 00:10:09,579
complexity we'll get to that in like the

00:10:08,079 --> 00:10:12,579
third pass through this pattern a little

00:10:09,579 --> 00:10:14,800
later on one other thing you should know

00:10:12,579 --> 00:10:16,930
is that the state in this pattern is

00:10:14,800 --> 00:10:19,269
immutable so you're not going to just

00:10:16,930 --> 00:10:21,130
update it in place the reducer will

00:10:19,269 --> 00:10:23,350
always create a new copy of the state

00:10:21,130 --> 00:10:25,300
make any changes that are necessary and

00:10:23,350 --> 00:10:29,410
overwrite the state within your data

00:10:25,300 --> 00:10:31,690
store and having this immutable state

00:10:29,410 --> 00:10:33,339
and having this history of changes to

00:10:31,690 --> 00:10:35,170
that state and gives you some benefits

00:10:33,339 --> 00:10:37,510
when it comes to debug because you have

00:10:35,170 --> 00:10:39,940
that history of changes in a very clear

00:10:37,510 --> 00:10:44,350
and concise way so that all again come

00:10:39,940 --> 00:10:46,329
up later in this talk so I gave you

00:10:44,350 --> 00:10:47,620
upfront these links these are the same

00:10:46,329 --> 00:10:49,180
links you had I just want to reiterate

00:10:47,620 --> 00:10:51,310
for people that might have come in late

00:10:49,180 --> 00:10:54,519
or not gotten to them quickly enough the

00:10:51,310 --> 00:10:56,529
first link is the slides if you haven't

00:10:54,519 --> 00:10:59,170
gotten to them already the second link

00:10:56,529 --> 00:11:00,639
is our starter application so everybody

00:10:59,170 --> 00:11:02,140
should go to this link and fork the

00:11:00,639 --> 00:11:06,150
repository if you're planning to code

00:11:02,140 --> 00:11:07,620
along here we were going to have in this

00:11:06,150 --> 00:11:10,290
Stack what's repository it's a skeleton

00:11:07,620 --> 00:11:11,550
code structure the HTML is already

00:11:10,290 --> 00:11:13,500
written and we're not doing anything

00:11:11,550 --> 00:11:15,420
with HTML here this is not the point of

00:11:13,500 --> 00:11:17,550
our conversation today we're focusing

00:11:15,420 --> 00:11:22,260
solely on the redux code implementation

00:11:17,550 --> 00:11:24,270
and then again the reduxid of tools

00:11:22,260 --> 00:11:25,560
extension to your chrome if you don't

00:11:24,270 --> 00:11:33,870
have it already and you want to get it

00:11:25,560 --> 00:11:38,280
going it's a pretty quick install so do

00:11:33,870 --> 00:11:43,680
you guys have yeah absolutely

00:11:38,280 --> 00:11:48,020
let me get back for you I'll give you a

00:11:43,680 --> 00:11:48,020
second to get here to our starting point

00:11:53,790 --> 00:12:01,520
if the stack blitz URL is too long it's

00:11:56,220 --> 00:12:01,520
also embedded in the short slide URL

00:12:01,610 --> 00:12:10,620
okay are we generally okay I'll cut out

00:12:05,930 --> 00:12:13,260
okay so I'm gonna be flipping back and

00:12:10,620 --> 00:12:15,810
forth the screen up here between my

00:12:13,260 --> 00:12:17,460
slides and stack blitz so I can code

00:12:15,810 --> 00:12:18,900
along with you guys but my general

00:12:17,460 --> 00:12:20,610
format is we're going to look at the

00:12:18,900 --> 00:12:22,590
slide and talk about what we're gonna do

00:12:20,610 --> 00:12:24,420
flip over stack what's encode it and

00:12:22,590 --> 00:12:26,690
then we'll come back and just check

00:12:24,420 --> 00:12:29,400
point where we're at before we move on I

00:12:26,690 --> 00:12:32,310
ran into some issues when I was doing

00:12:29,400 --> 00:12:34,230
this trial runs where I would flip over

00:12:32,310 --> 00:12:35,880
to stack lots and lose my mouse and I

00:12:34,230 --> 00:12:37,350
had to kind of jump out of slideshow

00:12:35,880 --> 00:12:39,000
mode so hopefully it's not gonna happen

00:12:37,350 --> 00:12:40,740
but I might have to jump through a few

00:12:39,000 --> 00:12:44,420
hoops along the way if that if that's

00:12:40,740 --> 00:12:44,420
the case but we'll get there in the end

00:12:44,930 --> 00:12:51,210
okay so starting out our first step here

00:12:48,090 --> 00:12:53,010
is going to be to define the state of

00:12:51,210 --> 00:12:54,990
our banana because we're creating a

00:12:53,010 --> 00:12:56,520
banana application it's not the apple

00:12:54,990 --> 00:12:57,870
app that I initially saw but I just like

00:12:56,520 --> 00:12:59,940
the actions you can do with the banana

00:12:57,870 --> 00:13:03,030
better than an apple so that's where I

00:12:59,940 --> 00:13:05,670
went with this you'll see throughout the

00:13:03,030 --> 00:13:07,140
the pattern here I've kept the simple

00:13:05,670 --> 00:13:08,850
pattern that we just talked about in the

00:13:07,140 --> 00:13:10,800
upper right corner of the screen and

00:13:08,850 --> 00:13:12,540
we're tight the little yellow

00:13:10,800 --> 00:13:14,700
highlighting is going to show you where

00:13:12,540 --> 00:13:16,620
we're at in the pattern for any piece of

00:13:14,700 --> 00:13:18,480
code that we're implementing so we're

00:13:16,620 --> 00:13:20,880
starting out on the store because we're

00:13:18,480 --> 00:13:22,290
gonna define the state of our banana and

00:13:20,880 --> 00:13:24,690
the things we want to know about our

00:13:22,290 --> 00:13:27,000
banana our is appealed how many bytes

00:13:24,690 --> 00:13:28,650
are left of our banana and what color is

00:13:27,000 --> 00:13:30,570
it because the color is going to tell us

00:13:28,650 --> 00:13:33,210
if it's a fresh banana or an old banana

00:13:30,570 --> 00:13:35,430
and then also we need to find just a

00:13:33,210 --> 00:13:37,380
general initial state of our banana here

00:13:35,430 --> 00:13:38,850
we're just going to leave an empty state

00:13:37,380 --> 00:13:41,390
because we're going to define that

00:13:38,850 --> 00:13:44,220
initial state of a fresh banana ourself

00:13:41,390 --> 00:13:47,540
so I'm going to flip over well I'm going

00:13:44,220 --> 00:13:47,540
to try to flip over to stack Liz

00:13:48,580 --> 00:13:54,339
and we'll get started so the first thing

00:13:51,160 --> 00:13:56,170
we need to do in our banana directory

00:13:54,339 --> 00:13:59,230
that's already exists is we're going to

00:13:56,170 --> 00:14:00,220
create a new folder called state because

00:13:59,230 --> 00:14:01,779
that's where we're going to store all

00:14:00,220 --> 00:14:05,680
the information about the state of our

00:14:01,779 --> 00:14:08,709
banana and within that folder we want to

00:14:05,680 --> 00:14:14,829
create a file and we're going to call it

00:14:08,709 --> 00:14:16,660
banana dot state TS when we get to the

00:14:14,829 --> 00:14:18,339
coding sections here and there's

00:14:16,660 --> 00:14:21,850
actually code being written I'm going to

00:14:18,339 --> 00:14:23,860
try to not talk while I'm coding because

00:14:21,850 --> 00:14:25,899
I'm going to assume that you're coding

00:14:23,860 --> 00:14:29,320
too and you're not gonna hear what I'm

00:14:25,899 --> 00:14:31,240
saying while we're all coding I tend to

00:14:29,320 --> 00:14:32,350
talk to myself though so I'm gonna I'm

00:14:31,240 --> 00:14:35,430
gonna make an effort

00:14:32,350 --> 00:14:44,370
so we'll get going here on our first

00:14:35,430 --> 00:14:44,370
piece of code except then I'm not typing

00:14:48,949 --> 00:14:52,939
we changed the size of the font on here

00:14:51,470 --> 00:14:55,569
so hopefully it's big enough for you

00:14:52,939 --> 00:14:55,569
guys to see

00:15:44,430 --> 00:15:49,110
okay so I've got my initial state typed

00:15:47,520 --> 00:15:50,610
out here so I'm gonna flip back while

00:15:49,110 --> 00:15:53,430
the rest of you are finishing up and

00:15:50,610 --> 00:15:55,890
just reiterate we've defined this state

00:15:53,430 --> 00:15:57,960
file it contains the things that we want

00:15:55,890 --> 00:16:01,040
to know about our banana the things that

00:15:57,960 --> 00:16:01,040
we want to track within our application

00:16:03,350 --> 00:16:10,500
flipped to slides so the next thing we

00:16:07,500 --> 00:16:12,600
need to know is what are the things we

00:16:10,500 --> 00:16:14,430
can do with our banana and we're not

00:16:12,600 --> 00:16:15,660
going to do all of our actions up front

00:16:14,430 --> 00:16:18,300
we're going to follow this pattern

00:16:15,660 --> 00:16:20,730
through and a few iterations so you guys

00:16:18,300 --> 00:16:22,380
can get a consistent feel it seems like

00:16:20,730 --> 00:16:24,180
in the last yesterday when I was sitting

00:16:22,380 --> 00:16:26,070
through these 20 and 5 minute sessions

00:16:24,180 --> 00:16:28,230
it was like a lot of information coming

00:16:26,070 --> 00:16:29,370
at me all at once and had to just take

00:16:28,230 --> 00:16:31,200
some notes for things I wanted to follow

00:16:29,370 --> 00:16:32,820
up on and I'm trying to do the opposite

00:16:31,200 --> 00:16:35,640
of that today we're gonna take the slow

00:16:32,820 --> 00:16:38,010
and reinforce the ideas so that they'll

00:16:35,640 --> 00:16:39,180
make sense and you'll be able to take

00:16:38,010 --> 00:16:42,330
away this knowledge of how to implement

00:16:39,180 --> 00:16:44,130
this pattern so the first thing that

00:16:42,330 --> 00:16:45,930
we're the first action we're going to

00:16:44,130 --> 00:16:49,770
define about our banana is how to get a

00:16:45,930 --> 00:16:51,960
new one actions within the Redux pattern

00:16:49,770 --> 00:16:55,260
all follow the same pattern and they're

00:16:51,960 --> 00:16:56,940
very slim pieces of code they're all

00:16:55,260 --> 00:16:59,160
going to have a type that says what type

00:16:56,940 --> 00:17:01,620
of action you're going to take and they

00:16:59,160 --> 00:17:02,850
all have a payload and coming into this

00:17:01,620 --> 00:17:04,830
first one we're not going to worry about

00:17:02,850 --> 00:17:07,770
that payload we're just going to pass

00:17:04,830 --> 00:17:09,360
nothing into our action so we're just

00:17:07,770 --> 00:17:12,770
going to define that payload within our

00:17:09,360 --> 00:17:17,220
action isn't any so flipping back over

00:17:12,770 --> 00:17:18,870
to our stack blitz and Mike in the untap

00:17:17,220 --> 00:17:22,620
does not like to work well on this

00:17:18,870 --> 00:17:24,390
computer so we're going to create a new

00:17:22,620 --> 00:17:25,680
file again within our state directory

00:17:24,390 --> 00:17:27,060
because this is part of how we're

00:17:25,680 --> 00:17:28,500
tracking the state of our banana and

00:17:27,060 --> 00:17:31,820
this one we're going to call banana

00:17:28,500 --> 00:17:31,820
actions TS

00:19:29,400 --> 00:19:34,110
so while you guys are wrapping up just

00:19:31,410 --> 00:19:36,630
to reiterate we've created an action

00:19:34,110 --> 00:19:39,270
here to get a new banana we've defined

00:19:36,630 --> 00:19:41,309
the type as get new banana and our

00:19:39,270 --> 00:19:43,260
constructor simply has a console message

00:19:41,309 --> 00:19:45,540
in it so we can pop up the console in

00:19:43,260 --> 00:19:47,309
our browser just to kind of see what's

00:19:45,540 --> 00:19:55,740
going on it's an easy way to see what

00:19:47,309 --> 00:19:57,510
what our app is doing as we progress I'm

00:19:55,740 --> 00:20:03,780
just kind of listening for typing to see

00:19:57,510 --> 00:20:07,170
how many people are done so we talked

00:20:03,780 --> 00:20:08,970
early on about the fact that our action

00:20:07,170 --> 00:20:10,620
is not going to actually update our

00:20:08,970 --> 00:20:12,840
state our action tells us what we're

00:20:10,620 --> 00:20:15,000
going to do what kind of action we want

00:20:12,840 --> 00:20:16,410
to take to affect our state but the only

00:20:15,000 --> 00:20:18,450
entity within the pattern that's

00:20:16,410 --> 00:20:20,940
actually going to make a change to our

00:20:18,450 --> 00:20:22,770
store is the reducer so the next thing

00:20:20,940 --> 00:20:25,980
we need to do is create our reducer file

00:20:22,770 --> 00:20:27,360
and it is going to handle our action

00:20:25,980 --> 00:20:30,000
that we just created of get new banana

00:20:27,360 --> 00:20:31,230
so the essential structure of a reducer

00:20:30,000 --> 00:20:33,450
is that it's going to be a switch

00:20:31,230 --> 00:20:36,210
statement and it's going to switch on

00:20:33,450 --> 00:20:38,309
the action that it's listening for so

00:20:36,210 --> 00:20:40,020
for this first action we want to have a

00:20:38,309 --> 00:20:41,880
case statement within our switch to

00:20:40,020 --> 00:20:44,070
handle the get new banana action and

00:20:41,880 --> 00:20:46,230
we're also at the bottom here going to

00:20:44,070 --> 00:20:49,050
create the default which will just

00:20:46,230 --> 00:20:51,540
return the current state so for our get

00:20:49,050 --> 00:20:53,910
new banana case we don't have a banana

00:20:51,540 --> 00:20:55,620
defined yet so all we're going to do is

00:20:53,910 --> 00:20:57,840
set all of the properties of our banana

00:20:55,620 --> 00:21:00,809
to what we would want our new banana to

00:20:57,840 --> 00:21:02,550
be in the default case here you can see

00:21:00,809 --> 00:21:04,890
we're using the spread operator and

00:21:02,550 --> 00:21:07,110
we're just saying get a copy of whatever

00:21:04,890 --> 00:21:09,540
current state was passed in and returned

00:21:07,110 --> 00:21:11,970
the same thing back and we'll use that

00:21:09,540 --> 00:21:14,790
spread operator to create new copies of

00:21:11,970 --> 00:21:17,550
our state in future actions that we

00:21:14,790 --> 00:21:21,840
would then want to moderate I might

00:21:17,550 --> 00:21:24,000
change a little bit so let's hop over

00:21:21,840 --> 00:21:26,370
and get going on our reducer this file

00:21:24,000 --> 00:21:27,870
is going to be banana dot reducer TS and

00:21:26,370 --> 00:21:29,910
it's also going to be created in that

00:21:27,870 --> 00:21:32,300
same state directory that we just

00:21:29,910 --> 00:21:32,300
created

00:23:08,030 --> 00:23:10,960
thank you

00:24:50,320 --> 00:24:55,330
so it's telling me here that it doesn't

00:24:52,300 --> 00:24:57,370
like my banana actions file but I've

00:24:55,330 --> 00:24:59,080
seen a few cases in stock blitz where it

00:24:57,370 --> 00:25:00,700
says it doesn't like my file but my file

00:24:59,080 --> 00:25:02,050
is there and it'll recognize it so we're

00:25:00,700 --> 00:25:04,720
just going to move past this and

00:25:02,050 --> 00:25:06,130
hopefully it'll resolve and we'll deal

00:25:04,720 --> 00:25:10,300
with that when we come to it if it's

00:25:06,130 --> 00:25:13,020
still a problem so we're gonna flip back

00:25:10,300 --> 00:25:15,040
over to our slides here quick and just

00:25:13,020 --> 00:25:18,070
recap one more time while everybody's

00:25:15,040 --> 00:25:20,560
finishing up so we've created our

00:25:18,070 --> 00:25:23,260
reducer file we're switching on that

00:25:20,560 --> 00:25:24,490
type of action the one action that we

00:25:23,260 --> 00:25:26,440
have at this point is getting a new

00:25:24,490 --> 00:25:28,470
banana so we have a case statement in

00:25:26,440 --> 00:25:30,910
place to handle getting a new banana

00:25:28,470 --> 00:25:32,640
we've set all the properties of our

00:25:30,910 --> 00:25:35,140
banana within that case statement and

00:25:32,640 --> 00:25:36,430
then we also added a default case that

00:25:35,140 --> 00:25:38,910
will just return whatever the current

00:25:36,430 --> 00:25:38,910
state is

00:25:42,859 --> 00:25:48,419
so before we move on to the next chunk

00:25:45,869 --> 00:25:52,289
of code I'm going to divert for just a

00:25:48,419 --> 00:25:54,229
moment so in this world we're creating

00:25:52,289 --> 00:25:56,429
an app we're only talking about bananas

00:25:54,229 --> 00:25:57,929
but in a real application you're

00:25:56,429 --> 00:26:01,199
probably going to have more components

00:25:57,929 --> 00:26:03,779
than just one about bananas so if we

00:26:01,199 --> 00:26:05,969
were creating this in a larger world of

00:26:03,779 --> 00:26:07,829
fruit we might have a banana component

00:26:05,969 --> 00:26:09,959
and an apple component and a watermelon

00:26:07,829 --> 00:26:12,809
component and those components might

00:26:09,959 --> 00:26:16,139
also have slightly different properties

00:26:12,809 --> 00:26:17,759
defined within their state so we need to

00:26:16,139 --> 00:26:20,940
bring all of that knowledge up to the

00:26:17,759 --> 00:26:22,649
app level of our application so that all

00:26:20,940 --> 00:26:24,929
of our components can have access to it

00:26:22,649 --> 00:26:26,669
and the way our components are going to

00:26:24,929 --> 00:26:29,039
access that information from the app

00:26:26,669 --> 00:26:30,749
level is through selectors so in this

00:26:29,039 --> 00:26:32,009
example if we had a banana an apple and

00:26:30,749 --> 00:26:33,899
a watermelon and we brought them all

00:26:32,009 --> 00:26:36,059
together into our application level

00:26:33,899 --> 00:26:37,889
state and then we would create selectors

00:26:36,059 --> 00:26:40,699
that would allow our components to

00:26:37,889 --> 00:26:44,099
access those separate slices of state

00:26:40,699 --> 00:26:45,539
then anytime it changed every component

00:26:44,099 --> 00:26:46,139
that subscribed to it we'll know about

00:26:45,539 --> 00:26:48,899
that change

00:26:46,139 --> 00:26:50,940
so our banana component might only care

00:26:48,899 --> 00:26:52,859
about the banana slice of state and our

00:26:50,940 --> 00:26:54,989
Apple component might only care about

00:26:52,859 --> 00:26:56,429
our apple slice of state but we might

00:26:54,989 --> 00:26:58,469
have a fruit salad component and that

00:26:56,429 --> 00:27:01,589
component wants to know about all the

00:26:58,469 --> 00:27:03,179
slices of state so you're gonna see when

00:27:01,589 --> 00:27:05,009
we get a little further how we get

00:27:03,179 --> 00:27:06,929
access to those slices of State and

00:27:05,009 --> 00:27:08,519
we're only going to deal with bananas in

00:27:06,929 --> 00:27:11,369
this case but I wanted to take a step

00:27:08,519 --> 00:27:12,929
back and explain how multiple multiple

00:27:11,369 --> 00:27:14,639
components within your application might

00:27:12,929 --> 00:27:17,129
want to have access to particular pieces

00:27:14,639 --> 00:27:21,899
of data so that they can all be updated

00:27:17,129 --> 00:27:23,609
whenever a change occurs so with that

00:27:21,899 --> 00:27:25,379
knowledge that we need to bring the

00:27:23,609 --> 00:27:26,849
information about our banana state up to

00:27:25,379 --> 00:27:28,109
the application level that's what we're

00:27:26,849 --> 00:27:30,149
going to do next we're going to wire

00:27:28,109 --> 00:27:32,459
this infrastructure that we've just

00:27:30,149 --> 00:27:34,859
built into the application so the first

00:27:32,459 --> 00:27:37,440
thing we need to do is export this

00:27:34,859 --> 00:27:40,739
information using an index file from our

00:27:37,440 --> 00:27:44,339
banana state folder so we'll flip back

00:27:40,739 --> 00:27:46,229
over to our stack floats and we're going

00:27:44,339 --> 00:27:50,149
to create within our state directory a

00:27:46,229 --> 00:27:50,149
new index PS folder

00:27:50,970 --> 00:27:55,790
from which we're going to deal with

00:27:52,980 --> 00:27:55,790
these exports

00:28:42,539 --> 00:28:46,139
so from this index file we're going to

00:28:44,399 --> 00:28:47,579
export the knowledge of our reducer the

00:28:46,139 --> 00:28:49,409
knowledge about our actions and the

00:28:47,579 --> 00:28:51,479
knowledge about our initial banana state

00:28:49,409 --> 00:28:54,089
and the overall state all of those

00:28:51,479 --> 00:28:58,320
properties that we defined within our

00:28:54,089 --> 00:29:00,659
banana so the next step of wiring this

00:28:58,320 --> 00:29:03,269
all in is that we need to create the

00:29:00,659 --> 00:29:05,969
actual app level state so we're going to

00:29:03,269 --> 00:29:08,009
create a file called app dot state TS

00:29:05,969 --> 00:29:09,629
and we're going to bring in that

00:29:08,009 --> 00:29:11,849
information about the banana that

00:29:09,629 --> 00:29:13,679
defines our banana slice of state so you

00:29:11,849 --> 00:29:15,329
can see here we have an app level state

00:29:13,679 --> 00:29:17,219
defined we have an app level initial

00:29:15,329 --> 00:29:20,129
state defined and we have app level list

00:29:17,219 --> 00:29:22,649
of reducers so if we were to create a

00:29:20,129 --> 00:29:23,729
banana component within this world we

00:29:22,649 --> 00:29:26,729
would also bring in our banana

00:29:23,729 --> 00:29:28,499
information here so our banana slice of

00:29:26,729 --> 00:29:31,109
state would come into this app state

00:29:28,499 --> 00:29:32,549
object we'd have that initial Apple

00:29:31,109 --> 00:29:35,039
State brought into the initial State at

00:29:32,549 --> 00:29:39,479
the app level and we have the app level

00:29:35,039 --> 00:29:41,549
reducer also brought in here so we'll

00:29:39,479 --> 00:29:43,249
flip over and this file is going to be

00:29:41,549 --> 00:29:47,879
created at the actual in the app

00:29:43,249 --> 00:29:50,429
directory in stackless so you want to

00:29:47,879 --> 00:29:53,929
find the app folder here and we're going

00:29:50,429 --> 00:29:53,929
to create this full file right here

00:33:05,880 --> 00:33:09,900
so we just went through this process of

00:33:08,100 --> 00:33:12,539
trying to bring our banana slice of

00:33:09,900 --> 00:33:14,190
state up to the app level we brought in

00:33:12,539 --> 00:33:16,110
the information about our banana state

00:33:14,190 --> 00:33:18,990
our initial state and our reducer and

00:33:16,110 --> 00:33:22,200
this line at the very low my gosh my

00:33:18,990 --> 00:33:25,049
code is cut off sorry about that

00:33:22,200 --> 00:33:27,720
here we go okay now you can see the line

00:33:25,049 --> 00:33:29,490
at the bottom that is our selector and

00:33:27,720 --> 00:33:32,100
the selector is the thing that our

00:33:29,490 --> 00:33:34,169
component can access to say I want to

00:33:32,100 --> 00:33:35,630
know what's going on with banana size of

00:33:34,169 --> 00:33:38,490
state that's how we're going to return

00:33:35,630 --> 00:33:44,400
all of the properties of our banana to

00:33:38,490 --> 00:33:46,020
our component so there's one more step

00:33:44,400 --> 00:33:48,179
of wiring that we have to take care of

00:33:46,020 --> 00:33:50,909
and this is to get some additional

00:33:48,179 --> 00:33:54,419
information into our app module we need

00:33:50,909 --> 00:33:57,270
to bring in a few modules from the

00:33:54,419 --> 00:34:02,130
libraries and we need to add a couple of

00:33:57,270 --> 00:34:03,690
lines to our ng module import list so

00:34:02,130 --> 00:34:06,240
whenever you see this kind of white

00:34:03,690 --> 00:34:07,890
dashed line I'm just trying to indicate

00:34:06,240 --> 00:34:10,740
that these two chunks of code are not

00:34:07,890 --> 00:34:12,030
consecutive within the application or

00:34:10,740 --> 00:34:14,280
within the part we're working on so when

00:34:12,030 --> 00:34:16,649
we go into the app module dot TS file

00:34:14,280 --> 00:34:18,300
the top part is going to go up with your

00:34:16,649 --> 00:34:20,100
import stuff and then this bottom

00:34:18,300 --> 00:34:23,840
section is going to go into your ng

00:34:20,100 --> 00:34:23,840
module imports list

00:34:27,790 --> 00:34:31,919
so switching to our app module

00:35:33,770 --> 00:35:37,619
so we've got our initial imports up at

00:35:36,030 --> 00:35:39,480
the top here and then like I mentioned

00:35:37,619 --> 00:35:41,400
we're going to jump down into our NG

00:35:39,480 --> 00:35:43,640
module imports list for this bottom

00:35:41,400 --> 00:35:43,640
section

00:36:27,980 --> 00:36:31,950
so a couple of these lines that were

00:36:30,120 --> 00:36:33,900
referencing here the ones I have called

00:36:31,950 --> 00:36:36,930
out and that referenced the store dev

00:36:33,900 --> 00:36:38,430
tools module we're working those in here

00:36:36,930 --> 00:36:40,530
just because it's easier to do it while

00:36:38,430 --> 00:36:42,180
we're updating the app module the

00:36:40,530 --> 00:36:43,830
benefit of that is actually with the

00:36:42,180 --> 00:36:46,080
Redux dev tools that we'll talk to later

00:36:43,830 --> 00:36:47,280
so we'll revisit those two lines a

00:36:46,080 --> 00:36:53,790
little bit later when we start talking

00:36:47,280 --> 00:36:56,790
about debug so now we've brought the

00:36:53,790 --> 00:36:58,140
knowledge of the state of our banana up

00:36:56,790 --> 00:37:00,300
to the app level and we've done all of

00:36:58,140 --> 00:37:01,860
this wiring that we need to add so now

00:37:00,300 --> 00:37:04,230
we can actually go to our component and

00:37:01,860 --> 00:37:06,870
try to exploit all this infrastructure

00:37:04,230 --> 00:37:08,280
that we just spent time adding so we're

00:37:06,870 --> 00:37:09,710
going to go into our banana component

00:37:08,280 --> 00:37:12,630
which is already existing in your

00:37:09,710 --> 00:37:14,430
skeleton project and we're gonna add

00:37:12,630 --> 00:37:16,530
some imports that we need to get access

00:37:14,430 --> 00:37:18,510
to this information we're going to

00:37:16,530 --> 00:37:20,220
create a banana dollar sign variable

00:37:18,510 --> 00:37:22,170
which is representative that it's an

00:37:20,220 --> 00:37:23,820
observable and when we flip back over to

00:37:22,170 --> 00:37:25,710
staff bullets I'm going to pop into the

00:37:23,820 --> 00:37:27,540
HTML for just a minute so you can see

00:37:25,710 --> 00:37:29,730
where we tie that in we're not doing any

00:37:27,540 --> 00:37:32,310
changes to the HTML but it helps to know

00:37:29,730 --> 00:37:33,900
how this variable within our component

00:37:32,310 --> 00:37:37,800
is tied into the HTML that we're going

00:37:33,900 --> 00:37:40,170
to see when we get all of this wired up

00:37:37,800 --> 00:37:42,420
so our constructor within our app

00:37:40,170 --> 00:37:45,960
component just needs to bring in the

00:37:42,420 --> 00:37:48,150
store and then within our ng init we're

00:37:45,960 --> 00:37:51,240
going to request a new banana and that

00:37:48,150 --> 00:37:52,980
new banana function within here is just

00:37:51,240 --> 00:37:55,620
going to dispatch the action we created

00:37:52,980 --> 00:37:57,330
to get a new banana and then the ng on

00:37:55,620 --> 00:38:00,150
and it also going to set up that link

00:37:57,330 --> 00:38:02,100
between our banana observable and the

00:38:00,150 --> 00:38:06,620
selector that we created to get our

00:38:02,100 --> 00:38:06,620
banana slice of state from our store

00:38:12,810 --> 00:38:29,020
so switching to our banana in a place so

00:38:27,760 --> 00:38:32,790
we're just going to add the code as

00:38:29,020 --> 00:38:32,790
needed within those functions

00:39:36,760 --> 00:39:40,600
so once you've got your imports up at

00:39:38,830 --> 00:39:42,130
the top we're going to go down right

00:39:40,600 --> 00:39:46,530
above our constructor to create this

00:39:42,130 --> 00:39:46,530
banana observable variable

00:39:57,990 --> 00:40:15,960
then we're going to define the values

00:40:00,720 --> 00:40:18,450
that are coming into our constructor and

00:40:15,960 --> 00:40:21,170
we'll move out of this additional

00:40:18,450 --> 00:40:21,170
functionality

00:43:02,260 --> 00:43:09,160
we're just addressing the joys of life

00:43:05,000 --> 00:43:09,160
coding up here so give me a second

00:45:33,920 --> 00:45:38,789
thank you

00:45:35,430 --> 00:45:40,829
I swear yesterday I went through and I

00:45:38,789 --> 00:45:42,839
actually literally copied and pasted all

00:45:40,829 --> 00:45:45,930
of my code out of my slides into my app

00:45:42,839 --> 00:45:48,690
and it worked fine so this is this has

00:45:45,930 --> 00:45:50,789
been quite an adventure so I'm still

00:45:48,690 --> 00:45:53,099
getting an error here I'm going to

00:45:50,789 --> 00:45:54,720
dispatch the action and it may magically

00:45:53,099 --> 00:45:58,650
just work because sometimes these errors

00:45:54,720 --> 00:46:00,150
in stack let's just resolve so for one

00:45:58,650 --> 00:46:01,770
second let's take a step outside and

00:46:00,150 --> 00:46:05,220
look at this HTML like I mentioned we

00:46:01,770 --> 00:46:08,400
were going to upfront this line right

00:46:05,220 --> 00:46:11,190
here is the magic that is gluing our

00:46:08,400 --> 00:46:14,119
banana observable that we created I'm

00:46:11,190 --> 00:46:17,880
using the async pipe to our store so

00:46:14,119 --> 00:46:19,859
back in the banana component we're

00:46:17,880 --> 00:46:21,059
saying we're accessing this selector and

00:46:19,859 --> 00:46:23,520
we're assigning it to our banana

00:46:21,059 --> 00:46:26,099
observable so that anytime we update the

00:46:23,520 --> 00:46:28,770
state this line will be executed and

00:46:26,099 --> 00:46:32,490
then our HTML will have knowledge of

00:46:28,770 --> 00:46:34,500
that new banana State so the next thing

00:46:32,490 --> 00:46:36,660
we need to do is actually dispatch our

00:46:34,500 --> 00:46:38,849
action and once we dispatch the action

00:46:36,660 --> 00:46:41,160
if all of these dependencies resolve

00:46:38,849 --> 00:46:44,869
it'll automatically update in our HTML

00:46:41,160 --> 00:46:44,869
view off on the right here

00:47:01,569 --> 00:47:05,189
and it's not working

00:47:15,570 --> 00:47:18,570
here

00:47:26,579 --> 00:47:37,990
she point here is actions to point yeah

00:47:36,400 --> 00:47:46,049
I need to go back here

00:47:37,990 --> 00:47:46,049
give me one suck out after action got it

00:47:57,330 --> 00:48:00,020
maybe

00:48:25,770 --> 00:48:29,070
yeah we're still not there's still

00:48:27,570 --> 00:48:32,090
something going on here though we're not

00:48:29,070 --> 00:48:32,090
calling our reducer

00:48:45,470 --> 00:48:48,470
yes

00:49:04,859 --> 00:49:09,839
yeah that's what I had initially here

00:49:07,140 --> 00:49:12,049
was just from state you're saying like

00:49:09,839 --> 00:49:12,049
this

00:49:39,930 --> 00:49:43,309
but not the yeah

00:49:46,460 --> 00:49:56,070
which is what I had and then I had an

00:49:48,840 --> 00:49:58,110
error and then it okay so I'm exposing

00:49:56,070 --> 00:50:02,360
myself is not a complete expert in this

00:49:58,110 --> 00:50:04,890
stuff but it's part of our process and

00:50:02,360 --> 00:50:08,330
one of the takeaways I want to give to

00:50:04,890 --> 00:50:10,410
you all is that if you find a useful

00:50:08,330 --> 00:50:12,270
methodology of communicating stuff

00:50:10,410 --> 00:50:13,050
obviously I'm not doing the best job at

00:50:12,270 --> 00:50:15,120
that right now

00:50:13,050 --> 00:50:16,710
but if you find a good example and a way

00:50:15,120 --> 00:50:18,660
to communicate the stuff to people just

00:50:16,710 --> 00:50:22,200
put it out there because you don't

00:50:18,660 --> 00:50:25,470
always have to be the premium Expo or

00:50:22,200 --> 00:50:29,640
the primary expert on a topic to provide

00:50:25,470 --> 00:50:30,960
value to the community so after that

00:50:29,640 --> 00:50:33,210
painful process

00:50:30,960 --> 00:50:36,870
we finally have a new banana here and

00:50:33,210 --> 00:50:38,970
you can see down at the bottom just some

00:50:36,870 --> 00:50:41,010
text visualization of what our state

00:50:38,970 --> 00:50:42,690
looks like so our initial state was that

00:50:41,010 --> 00:50:44,820
our bananas not fields we have is peeled

00:50:42,690 --> 00:50:46,590
as false and our bytes remaining is nine

00:50:44,820 --> 00:50:49,370
and our color of our bananas yellow

00:50:46,590 --> 00:50:52,440
because we have a fresh banana right now

00:50:49,370 --> 00:50:57,660
let me get back to where I need to be in

00:50:52,440 --> 00:51:04,320
my own slides here so I'm going to flip

00:50:57,660 --> 00:51:08,100
back to my slides so we're at a

00:51:04,320 --> 00:51:10,830
checkpoint finally and if you got as

00:51:08,100 --> 00:51:12,660
lost as I did during that you can always

00:51:10,830 --> 00:51:14,010
refer to this checkpoint repository and

00:51:12,660 --> 00:51:15,360
it should get you to a working version

00:51:14,010 --> 00:51:17,730
of the place that we're at right now

00:51:15,360 --> 00:51:20,490
so what we did through this whole

00:51:17,730 --> 00:51:23,010
process was we created the definition of

00:51:20,490 --> 00:51:24,750
our banana within our store we defined

00:51:23,010 --> 00:51:29,250
our first action which was to get a new

00:51:24,750 --> 00:51:31,470
banana and then we created a reducer

00:51:29,250 --> 00:51:33,180
that has a switch statement with a case

00:51:31,470 --> 00:51:36,630
in there that it will handle our get new

00:51:33,180 --> 00:51:38,430
banana action we created at the app

00:51:36,630 --> 00:51:40,350
level we brought all of that wiring up

00:51:38,430 --> 00:51:41,940
and we created a selector called get my

00:51:40,350 --> 00:51:45,660
banana so that our component could

00:51:41,940 --> 00:51:48,000
access it and then we finally dispatched

00:51:45,660 --> 00:51:50,070
that action within our component to get

00:51:48,000 --> 00:51:51,960
our initial state updated and because we

00:51:50,070 --> 00:51:54,540
had that banana observable connected

00:51:51,960 --> 00:51:56,130
with async pipe to our HTML HTML

00:51:54,540 --> 00:51:58,920
immediately had the knowledge that we

00:51:56,130 --> 00:52:02,010
had gotten a new banana

00:51:58,920 --> 00:52:03,900
I've added this first link in here to

00:52:02,010 --> 00:52:06,240
the slides for anybody who missed it

00:52:03,900 --> 00:52:07,230
earlier comes in late so that'll be

00:52:06,240 --> 00:52:11,039
repeated through all the checkpoints

00:52:07,230 --> 00:52:13,160
just in case someone needs it so what

00:52:11,039 --> 00:52:16,500
you're probably thinking right now is

00:52:13,160 --> 00:52:18,779
that was really painful and we only got

00:52:16,500 --> 00:52:20,609
one action running do I have to do that

00:52:18,779 --> 00:52:22,950
every time I have to add an action to my

00:52:20,609 --> 00:52:24,900
application and thankfully the answer is

00:52:22,950 --> 00:52:26,789
no once you have this initial

00:52:24,900 --> 00:52:29,250
infrastructure in place it's pretty easy

00:52:26,789 --> 00:52:30,869
to add additional actions to your

00:52:29,250 --> 00:52:32,760
application and so we're gonna try that

00:52:30,869 --> 00:52:35,730
next we're going to just add one more

00:52:32,760 --> 00:52:36,869
simple action to our application so the

00:52:35,730 --> 00:52:40,440
next thing that we want to do with our

00:52:36,869 --> 00:52:41,940
banana is peel it so in order to do that

00:52:40,440 --> 00:52:44,700
the first thing we need to do is go into

00:52:41,940 --> 00:52:47,220
our actions ES file and we're going to

00:52:44,700 --> 00:52:49,920
add the peel banana action and I'm all

00:52:47,220 --> 00:52:52,500
for code reuse so really you can just

00:52:49,920 --> 00:52:54,299
copy and paste the existing action to

00:52:52,500 --> 00:52:56,190
get a new banana and change the name of

00:52:54,299 --> 00:52:59,849
it up a little bit and we'll be good to

00:52:56,190 --> 00:53:02,640
go so we're gonna jump back over to our

00:52:59,849 --> 00:53:07,589
stack let's go back to our banana

00:53:02,640 --> 00:53:09,299
actions file we need to create we're

00:53:07,589 --> 00:53:11,549
gonna copy this first line here where we

00:53:09,299 --> 00:53:14,990
defined our get new banana action and

00:53:11,549 --> 00:53:14,990
just tweak it for peeling a banana

00:53:22,220 --> 00:53:27,410
then I'm going to copy and paste the

00:53:24,380 --> 00:53:29,950
whole action that we created and tweak

00:53:27,410 --> 00:53:29,950
that as well

00:53:41,070 --> 00:53:46,120
and then finally down in the export

00:53:43,810 --> 00:53:54,250
statement we just want to add our pale

00:53:46,120 --> 00:53:56,290
banana action to this union so we've

00:53:54,250 --> 00:53:58,840
added this additional action but again

00:53:56,290 --> 00:54:00,550
our action isn't the part of our pattern

00:53:58,840 --> 00:54:03,070
here that updates our states so we need

00:54:00,550 --> 00:54:09,370
to give our reducer knowledge about our

00:54:03,070 --> 00:54:11,020
new peel banana action so now we're

00:54:09,370 --> 00:54:13,300
jumping into the reducer section of our

00:54:11,020 --> 00:54:15,370
pattern we're going to add the import to

00:54:13,300 --> 00:54:16,420
peel to our peel banana action and then

00:54:15,370 --> 00:54:18,790
we're just going to add a new case

00:54:16,420 --> 00:54:22,650
statement to that overall switch that's

00:54:18,790 --> 00:54:22,650
going to handle our peel banana action

00:55:07,750 --> 00:55:11,710
and in this case within our return

00:55:09,700 --> 00:55:13,690
because we're not creating a banana from

00:55:11,710 --> 00:55:16,119
scratch we're going to use that spread

00:55:13,690 --> 00:55:17,650
operator to create a new copy of our

00:55:16,119 --> 00:55:20,020
state and then we're just going to

00:55:17,650 --> 00:55:22,349
change the is peeled property on that

00:55:20,020 --> 00:55:22,349
state

00:55:43,260 --> 00:55:48,450
so now that our reducer knows how to

00:55:45,090 --> 00:55:50,300
handle the peel banana action the last

00:55:48,450 --> 00:55:54,359
thing we need to do to get this working

00:55:50,300 --> 00:55:56,130
is dispatch the new action from our

00:55:54,359 --> 00:55:57,720
component so we need to import our peel

00:55:56,130 --> 00:55:59,490
banana action within our component and

00:55:57,720 --> 00:56:01,230
then we need to dispatch it within the

00:55:59,490 --> 00:56:03,090
peel banana function and this peel

00:56:01,230 --> 00:56:05,130
banana function is already connected to

00:56:03,090 --> 00:56:07,470
our peel banana button that's in our

00:56:05,130 --> 00:56:09,060
HTML so as soon as we dispatch this

00:56:07,470 --> 00:56:10,650
action then we can try out our peel

00:56:09,060 --> 00:56:13,190
banana button and see if we can get our

00:56:10,650 --> 00:56:13,190
banana peeled

00:56:24,200 --> 00:56:29,960
so we've got peel banana added to our

00:56:26,450 --> 00:56:32,599
imports and then you can scroll down and

00:56:29,960 --> 00:56:36,670
find the existing peel banana function

00:56:32,599 --> 00:56:36,670
and just add The Dispatch to it

00:56:47,630 --> 00:56:50,870
and we're still not dealing with

00:56:49,130 --> 00:56:54,320
payloads yet so we're just gonna pass a

00:56:50,870 --> 00:56:57,890
null into our peel banana function so

00:56:54,320 --> 00:57:01,160
now within your little preview window if

00:56:57,890 --> 00:57:03,290
you click peel banana voila we get a

00:57:01,160 --> 00:57:05,360
peeled banana you can see that the state

00:57:03,290 --> 00:57:07,040
has updated down on the bottom to peel

00:57:05,360 --> 00:57:08,780
banana true and if you're looking at

00:57:07,040 --> 00:57:10,610
your console because we've been adding

00:57:08,780 --> 00:57:12,710
some little console log messages you can

00:57:10,610 --> 00:57:15,020
see that we've triggered an action to

00:57:12,710 --> 00:57:17,600
get a new banana which triggered the

00:57:15,020 --> 00:57:19,190
reducer then to get a new banana then by

00:57:17,600 --> 00:57:21,350
clicking the button we triggered the

00:57:19,190 --> 00:57:23,390
action to peel our banana which in turn

00:57:21,350 --> 00:57:35,060
triggered the reducer to actually update

00:57:23,390 --> 00:57:37,280
our state I can so your new banana

00:57:35,060 --> 00:57:38,900
action should follow exactly the same

00:57:37,280 --> 00:57:39,950
pattern as your get new banana action we

00:57:38,900 --> 00:57:43,570
just want to make change those

00:57:39,950 --> 00:57:43,570
references from getting you to peel

00:57:52,650 --> 00:57:57,330
so we're already at another checkpoint

00:57:54,840 --> 00:57:59,130
that first action took a whole lot of

00:57:57,330 --> 00:58:00,420
work because we were building in all of

00:57:59,130 --> 00:58:02,340
this infrastructure but once we have

00:58:00,420 --> 00:58:05,430
that in place it's really simple to

00:58:02,340 --> 00:58:07,230
create a new action it just took a few

00:58:05,430 --> 00:58:09,420
steps and in a few lines of code to our

00:58:07,230 --> 00:58:11,370
actions file a new case statement within

00:58:09,420 --> 00:58:13,130
our reducer and we get to dispatch the

00:58:11,370 --> 00:58:15,390
action and we're off

00:58:13,130 --> 00:58:18,180
so again if you need to pick up at a

00:58:15,390 --> 00:58:19,710
checkpoint or got the checkpoint URL

00:58:18,180 --> 00:58:28,410
listed here for stack Lots if you need

00:58:19,710 --> 00:58:30,780
to pick up that new repository so the

00:58:28,410 --> 00:58:33,180
next phase of this pattern would be a

00:58:30,780 --> 00:58:35,280
slightly more complex action because

00:58:33,180 --> 00:58:37,290
often you're gonna need to pass some

00:58:35,280 --> 00:58:39,270
kind of information to your action in

00:58:37,290 --> 00:58:42,180
order to figure out how you want your

00:58:39,270 --> 00:58:45,300
state to change for example if you're

00:58:42,180 --> 00:58:46,710
dealing with products or patients you

00:58:45,300 --> 00:58:48,660
might have some kind of ID that you need

00:58:46,710 --> 00:58:51,330
to pass your action and order to get

00:58:48,660 --> 00:58:52,980
your processing done so this kind of

00:58:51,330 --> 00:58:54,600
action with a payload follows exactly

00:58:52,980 --> 00:58:57,570
the same pattern that we've done so far

00:58:54,600 --> 00:58:58,950
we just need to pass a payload in when

00:58:57,570 --> 00:59:00,480
we dispatch our action from the

00:58:58,950 --> 00:59:02,550
component and then we need to handle

00:59:00,480 --> 00:59:04,260
that payload within the reducer so we're

00:59:02,550 --> 00:59:06,000
gonna do the same thing one more time

00:59:04,260 --> 00:59:09,480
but this time we're going to add a

00:59:06,000 --> 00:59:11,340
payload to the mix and this should be

00:59:09,480 --> 00:59:12,660
just about as quick as the last phase

00:59:11,340 --> 00:59:13,920
that we went through so our next thing

00:59:12,660 --> 00:59:15,570
that we're gonna do with our banana now

00:59:13,920 --> 00:59:18,540
that we peeled it is we want to eat it

00:59:15,570 --> 00:59:21,150
and the payload that we're going to pass

00:59:18,540 --> 00:59:23,130
into our eat banana action will be the

00:59:21,150 --> 00:59:26,400
number of bytes we want to take now I

00:59:23,130 --> 00:59:28,940
should point out that I set my bytes

00:59:26,400 --> 00:59:32,220
remaining to my new banana to nine and

00:59:28,940 --> 00:59:34,530
if you did not set your bytes remaining

00:59:32,220 --> 00:59:37,130
to nine your behavior might be slightly

00:59:34,530 --> 00:59:40,710
different than mine because the HTML

00:59:37,130 --> 00:59:42,540
works but this is a workshop so I didn't

00:59:40,710 --> 00:59:45,480
create it to be the most robust HTML in

00:59:42,540 --> 00:59:50,040
the world so my assumption would be that

00:59:45,480 --> 00:59:52,260
you set the first baseline point of bias

00:59:50,040 --> 00:59:53,490
remaining in your banana to nine and

00:59:52,260 --> 00:59:56,100
then every time we eat our banana we're

00:59:53,490 --> 00:59:57,630
gonna take three bites of it if you want

00:59:56,100 --> 01:00:00,810
to play around with it later on your own

00:59:57,630 --> 01:00:03,360
you are more than welcome to do so so

01:00:00,810 --> 01:00:04,650
we're gonna now jump back to our actions

01:00:03,360 --> 01:00:07,280
file and we're gonna add a new action to

01:00:04,650 --> 01:00:07,280
eat our banana

01:00:14,839 --> 01:00:18,750
again we can do a lot of cutting and

01:00:17,280 --> 01:00:21,270
pasting because our actions always

01:00:18,750 --> 01:00:26,490
follow the same format so we need to

01:00:21,270 --> 01:00:28,170
initially add our import I'm sorry our

01:00:26,490 --> 01:00:33,270
constant we need to define our eat

01:00:28,170 --> 01:00:38,849
banana action then we can copy and paste

01:00:33,270 --> 01:00:41,089
an existing action and change the name

01:00:38,849 --> 01:00:41,089
of it

01:00:48,890 --> 01:00:53,490
the one thing we're going to do slightly

01:00:51,330 --> 01:00:55,950
differently on this action is for our

01:00:53,490 --> 01:00:57,900
payload we're going to say number

01:00:55,950 --> 01:00:59,880
instead of any because we want to make

01:00:57,900 --> 01:01:01,410
sure that when we dispatch this action

01:00:59,880 --> 01:01:02,790
somebody's giving us a number so we know

01:01:01,410 --> 01:01:05,940
how many bytes of our banana have been

01:01:02,790 --> 01:01:10,310
eaten and then again you need to add it

01:01:05,940 --> 01:01:10,310
to your export down at the bottom

01:01:23,810 --> 01:01:28,640
and just like with all of our other

01:01:25,550 --> 01:01:29,960
actions we now will have knowledge of

01:01:28,640 --> 01:01:32,240
the number of bytes eaten past

01:01:29,960 --> 01:01:34,190
interaction but our action itself isn't

01:01:32,240 --> 01:01:38,590
what updates our state so we need to

01:01:34,190 --> 01:01:38,590
handle this payload within our reducer

01:01:38,650 --> 01:01:43,310
so it's going to still follow the same

01:01:40,670 --> 01:01:45,620
pattern as our reducer in the past we're

01:01:43,310 --> 01:01:47,210
going to bring in that import and then

01:01:45,620 --> 01:01:49,730
we need to add a case statement within

01:01:47,210 --> 01:01:52,010
our switch but when we update the state

01:01:49,730 --> 01:01:53,870
this time we're going to take the bytes

01:01:52,010 --> 01:01:56,720
remaining and the existing state and

01:01:53,870 --> 01:02:01,300
we're going to modify it to reduce it by

01:01:56,720 --> 01:02:01,300
the action payload that is passed in

01:03:15,800 --> 01:03:24,530
so let me resize this a little oh I lost

01:03:18,710 --> 01:03:27,190
my variable on the wrong field wrong

01:03:24,530 --> 01:03:27,190
wine sorry

01:03:43,980 --> 01:03:48,839
so again within our reducer we're

01:03:46,829 --> 01:03:51,480
importing our new eat banana action so

01:03:48,839 --> 01:03:52,829
our reducer can listen for it and then

01:03:51,480 --> 01:03:54,869
in our case statement where we're going

01:03:52,829 --> 01:03:56,490
to handle that eat banana action we're

01:03:54,869 --> 01:03:58,500
going to again use that spread operator

01:03:56,490 --> 01:04:00,359
because we need to create a new copy of

01:03:58,500 --> 01:04:02,700
our state and then we're going to update

01:04:00,359 --> 01:04:05,190
the bytes remaining with the bytes

01:04:02,700 --> 01:04:08,930
remaining from the state minus the

01:04:05,190 --> 01:04:08,930
payload that was passed in on the action

01:04:11,030 --> 01:04:14,990
so the last thing we need to do just

01:04:13,500 --> 01:04:17,730
like when we added our peel banana

01:04:14,990 --> 01:04:20,220
action we need to dispatch this action

01:04:17,730 --> 01:04:22,500
from our component so we're going to

01:04:20,220 --> 01:04:24,720
import our banana action and then within

01:04:22,500 --> 01:04:26,160
the existing eat banana function we're

01:04:24,720 --> 01:04:28,170
going to dispatch the action and we're

01:04:26,160 --> 01:04:30,089
going to pass in that we're going to

01:04:28,170 --> 01:04:32,480
take three bites of our banana as the

01:04:30,089 --> 01:04:32,480
payload

01:04:49,760 --> 01:04:54,530
and similar to our other functions our

01:04:51,980 --> 01:04:57,970
eat banana function is also connected to

01:04:54,530 --> 01:04:57,970
our even add a button on our UI

01:05:07,000 --> 01:05:11,990
and right here is where you're going to

01:05:10,099 --> 01:05:18,079
specify that number of bytes that will

01:05:11,990 --> 01:05:20,359
be passed in as the payload so now that

01:05:18,079 --> 01:05:23,000
we have this all wired up we can peel

01:05:20,359 --> 01:05:24,710
our banana and you can see the state

01:05:23,000 --> 01:05:27,170
update and then we can eat our banana

01:05:24,710 --> 01:05:29,390
and you can see our bytes remaining has

01:05:27,170 --> 01:05:32,210
been reduced to six and if we continue

01:05:29,390 --> 01:05:33,530
to eat our banana a couple of times we

01:05:32,210 --> 01:05:36,829
can reduce it all the way down to zero

01:05:33,530 --> 01:05:38,329
and you can see if you're following

01:05:36,829 --> 01:05:40,010
along in the console log you can see all

01:05:38,329 --> 01:05:46,520
of these actions occurring and being

01:05:40,010 --> 01:05:50,119
passed to the reducer so we've been

01:05:46,520 --> 01:05:52,069
through this repetition a few times now

01:05:50,119 --> 01:05:55,460
so you should have this general idea

01:05:52,069 --> 01:05:57,410
down that we've created this store of

01:05:55,460 --> 01:05:59,510
information we've defined what the state

01:05:57,410 --> 01:06:02,299
of our banana is we've created a few

01:05:59,510 --> 01:06:05,180
actions that will make trigger changes

01:06:02,299 --> 01:06:06,770
to that state our reducer we created to

01:06:05,180 --> 01:06:09,079
listen for our different actions and

01:06:06,770 --> 01:06:11,240
update our state accordingly based on

01:06:09,079 --> 01:06:13,490
what we've requested it do to do and

01:06:11,240 --> 01:06:14,839
again there's a checkpoint repository

01:06:13,490 --> 01:06:18,470
available here if you need to pick it up

01:06:14,839 --> 01:06:19,940
so the next pass that we're going to do

01:06:18,470 --> 01:06:21,859
through this we're gonna add some

01:06:19,940 --> 01:06:24,740
additional complexity we're going to mix

01:06:21,859 --> 01:06:26,599
it up a little bit so far this is the

01:06:24,740 --> 01:06:29,510
pattern we've been looking at but I've

01:06:26,599 --> 01:06:32,210
added a question in here and that is do

01:06:29,510 --> 01:06:33,890
we need to handle an effect when we

01:06:32,210 --> 01:06:36,020
dispatch the action from our component

01:06:33,890 --> 01:06:39,079
an effect is if we need something

01:06:36,020 --> 01:06:40,520
additional done other than just passing

01:06:39,079 --> 01:06:43,549
the action to reducer and having it

01:06:40,520 --> 01:06:48,319
update this would be in cases where you

01:06:43,549 --> 01:06:49,400
need to make an HTTP call to bring in

01:06:48,319 --> 01:06:52,040
some additional data into your

01:06:49,400 --> 01:06:53,660
application which is very common

01:06:52,040 --> 01:06:54,680
there's not many chances honestly where

01:06:53,660 --> 01:06:58,960
you're going to have an action that

01:06:54,680 --> 01:07:01,130
doesn't need some side effect going on

01:06:58,960 --> 01:07:03,589
so this is what the more extended

01:07:01,130 --> 01:07:05,990
pattern will look like if you need to do

01:07:03,589 --> 01:07:08,119
something like make an HTTP call then

01:07:05,990 --> 01:07:10,579
you need to add an effect into the

01:07:08,119 --> 01:07:12,290
pattern but you add an effect into the

01:07:10,579 --> 01:07:16,970
pattern you need to have two actions

01:07:12,290 --> 01:07:19,400
involved the first action is oh can you

01:07:16,970 --> 01:07:20,150
hear me oh that was where it just looked

01:07:19,400 --> 01:07:23,240
out for me

01:07:20,150 --> 01:07:27,829
for a second so I was saying when you

01:07:23,240 --> 01:07:31,849
introduce an effect you hello just when

01:07:27,829 --> 01:07:33,559
I get going it cuts out on you you need

01:07:31,849 --> 01:07:35,180
to actions to handle this effect you

01:07:33,559 --> 01:07:37,940
need the initial action which is going

01:07:35,180 --> 01:07:40,069
to initiate the process it will call

01:07:37,940 --> 01:07:41,779
into the effect the effect will do

01:07:40,069 --> 01:07:43,400
whatever magic you want call off to

01:07:41,779 --> 01:07:45,650
whatever services you want to involve

01:07:43,400 --> 01:07:48,289
and then when the effect is done it's

01:07:45,650 --> 01:07:50,359
going to map to the completion action

01:07:48,289 --> 01:07:52,640
the completion action will take any

01:07:50,359 --> 01:07:54,440
necessary information that was gathered

01:07:52,640 --> 01:07:58,130
from the service and pass it into the

01:07:54,440 --> 01:08:01,039
reducer to then update the state so for

01:07:58,130 --> 01:08:02,900
this next pass through I'm going to keep

01:08:01,039 --> 01:08:04,520
having that little mini diagram up in

01:08:02,900 --> 01:08:05,839
the upper right corner so you guys kind

01:08:04,520 --> 01:08:08,059
of know where we're at in the process

01:08:05,839 --> 01:08:10,760
but it's gonna look like this for now

01:08:08,059 --> 01:08:12,680
and we're taking out the leg where it's

01:08:10,760 --> 01:08:14,390
an action that doesn't need an effect

01:08:12,680 --> 01:08:22,909
and we're only going to look at the

01:08:14,390 --> 01:08:25,640
action that does need an effect so the

01:08:22,909 --> 01:08:28,609
thing that we're going to add in our

01:08:25,640 --> 01:08:30,980
banana world is a service that's going

01:08:28,609 --> 01:08:33,859
to jump forward in time and cause our

01:08:30,980 --> 01:08:35,960
banana to rock so what we're gonna do is

01:08:33,859 --> 01:08:37,880
create a couple of new actions the first

01:08:35,960 --> 01:08:40,699
one is going to initiate the time hop

01:08:37,880 --> 01:08:42,799
and the second action will be to

01:08:40,699 --> 01:08:45,109
complete the time hop we're going to

01:08:42,799 --> 01:08:47,000
initially create these two actions then

01:08:45,109 --> 01:08:48,529
we're going to create the effect that's

01:08:47,000 --> 01:08:50,509
kind of the middle of that sandwich

01:08:48,529 --> 01:08:52,219
between them that effect is going to

01:08:50,509 --> 01:08:53,750
call off to a very simple service that

01:08:52,219 --> 01:08:56,480
will write and all the service is going

01:08:53,750 --> 01:08:58,549
to do is wait for a few seconds and then

01:08:56,480 --> 01:09:02,060
return the color of our rotted banana

01:08:58,549 --> 01:09:03,650
which will be brown so we're first get

01:09:02,060 --> 01:09:05,630
first get started on these actions and

01:09:03,650 --> 01:09:07,909
these actions are no different than the

01:09:05,630 --> 01:09:10,130
actions we've created so far so really

01:09:07,909 --> 01:09:11,989
you can just copy and paste again and

01:09:10,130 --> 01:09:16,969
we're going to update them a little bit

01:09:11,989 --> 01:09:21,909
to be our initiate initiate time hop

01:09:16,969 --> 01:09:21,909
action and our time hop complete action

01:09:24,810 --> 01:09:30,420
so again this will be back in our banana

01:09:27,429 --> 01:09:30,420
actions file

01:11:32,780 --> 01:11:38,480
so while you guys are finishing up we'll

01:11:35,960 --> 01:11:40,580
just jump back to the pattern here again

01:11:38,480 --> 01:11:43,990
our focus is on these initiation and

01:11:40,580 --> 01:11:49,040
completion actions within the pattern

01:11:43,990 --> 01:11:51,280
and we've added to our code the

01:11:49,040 --> 01:11:54,290
constants that define our new actions

01:11:51,280 --> 01:11:56,600
the code that is going to define what we

01:11:54,290 --> 01:11:58,760
need to do the type and the payload of

01:11:56,600 --> 01:12:02,380
our actions and then we added them to

01:11:58,760 --> 01:12:02,380
our Union statement down at the bottom

01:12:05,470 --> 01:12:10,250
so before we actually get to our effect

01:12:08,300 --> 01:12:12,560
we're going to create this little

01:12:10,250 --> 01:12:14,030
service that's going to do our time out

01:12:12,560 --> 01:12:15,620
and then return the new color of our

01:12:14,030 --> 01:12:19,430
banana so we're going to call this

01:12:15,620 --> 01:12:22,100
service a rot service and we'll jump

01:12:19,430 --> 01:12:24,920
over to stack blitz and we're going to

01:12:22,100 --> 01:12:27,860
define this service at the app level of

01:12:24,920 --> 01:12:30,410
our structure so I bet your app folder

01:12:27,860 --> 01:12:34,450
just create a new file and we're going

01:12:30,410 --> 01:12:34,450
to call it rot dot service yes

01:15:52,480 --> 01:15:55,140
yes

01:16:25,360 --> 01:16:33,010
okay maybe some fresh batteries will

01:16:27,940 --> 01:16:34,870
keep me from flipping out on you guys so

01:16:33,010 --> 01:16:37,330
I've got my service created I'll give

01:16:34,870 --> 01:16:38,920
you guys just a minute to catch up if

01:16:37,330 --> 01:16:40,510
you need a little more time I'm going to

01:16:38,920 --> 01:16:43,680
flip back over to my slide and just talk

01:16:40,510 --> 01:16:46,060
a little bit about what we're doing here

01:16:43,680 --> 01:16:48,190
so we imported just a couple of modules

01:16:46,060 --> 01:16:50,980
that we needed for injectable and

01:16:48,190 --> 01:16:53,200
observables I have an injectable

01:16:50,980 --> 01:16:54,910
decorator on here simply because it

01:16:53,200 --> 01:16:58,380
saves us the time of having to define

01:16:54,910 --> 01:17:00,820
this provider at our at module level

01:16:58,380 --> 01:17:03,340
this little wrought bunny on a service

01:17:00,820 --> 01:17:05,890
all it's doing is creating an observable

01:17:03,340 --> 01:17:08,410
and setting a timer and when are 10

01:17:05,890 --> 01:17:10,390
seconds is up it's going to stick the

01:17:08,410 --> 01:17:12,220
word brown into our observable and send

01:17:10,390 --> 01:17:14,410
it back and that's all we needed to do

01:17:12,220 --> 01:17:19,570
so then we'll complete our observable at

01:17:14,410 --> 01:17:21,970
that time so now that we have our

01:17:19,570 --> 01:17:24,370
service created we're going to jump in

01:17:21,970 --> 01:17:25,900
and create a new effects file and that's

01:17:24,370 --> 01:17:29,410
going to be the thing that listens for

01:17:25,900 --> 01:17:31,990
the initiate time hop function calls off

01:17:29,410 --> 01:17:33,250
to the service it'll wait a few seconds

01:17:31,990 --> 01:17:35,530
for the service to complete and return

01:17:33,250 --> 01:17:37,750
the new color of our banana and then

01:17:35,530 --> 01:17:39,550
it's going to take that new color the

01:17:37,750 --> 01:17:42,130
color brown and it's going to pass it

01:17:39,550 --> 01:17:44,980
into our time hop complete action and

01:17:42,130 --> 01:17:46,510
dispatch that and then our reducer will

01:17:44,980 --> 01:17:48,580
be listening for the time hop complete

01:17:46,510 --> 01:17:54,550
action and it will update our store with

01:17:48,580 --> 01:17:58,690
our new state so jumping into our

01:17:54,550 --> 01:18:01,930
effects looks like we can see everything

01:17:58,690 --> 01:18:04,480
here so we've got several imports that

01:18:01,930 --> 01:18:06,400
we're going to need to deal with but the

01:18:04,480 --> 01:18:07,750
overall number of lines in our effect is

01:18:06,400 --> 01:18:10,830
going to be pretty small like I said

01:18:07,750 --> 01:18:13,810
we're going to the of type line right

01:18:10,830 --> 01:18:15,280
here if I get my mouse to show up is the

01:18:13,810 --> 01:18:18,760
line that's going to say we're listening

01:18:15,280 --> 01:18:21,460
for or initiate time hop action when we

01:18:18,760 --> 01:18:24,430
catch it we're going to call our raw

01:18:21,460 --> 01:18:25,990
banana service here and we're going to

01:18:24,430 --> 01:18:28,410
be switching our initiate time hop

01:18:25,990 --> 01:18:32,470
action to a time hop complete action

01:18:28,410 --> 01:18:35,200
passing in this color as our payload so

01:18:32,470 --> 01:18:36,980
let's flip over and get this coded up in

01:18:35,200 --> 01:18:39,200
our project

01:18:36,980 --> 01:18:40,970
we are going to need a new file for this

01:18:39,200 --> 01:18:43,430
one so within our state directory we're

01:18:40,970 --> 01:18:44,900
going to create a new file for our

01:18:43,430 --> 01:18:48,340
banana effects we'll just call it banana

01:18:44,900 --> 01:18:48,340
dot effects dot yes

01:24:24,169 --> 01:24:28,249
you can see my effects as complaining a

01:24:26,539 --> 01:24:29,929
little bit about a couple of my imports

01:24:28,249 --> 01:24:31,369
but we're gonna cross our fingers and

01:24:29,929 --> 01:24:35,780
hope it's the same as the other file was

01:24:31,369 --> 01:24:37,280
complaining about my importance so I'm

01:24:35,780 --> 01:24:40,719
going to flip back to the same code in

01:24:37,280 --> 01:24:40,719
my slides for just a second

01:24:40,929 --> 01:24:48,380
so to recap our effect is listening for

01:24:44,689 --> 01:24:50,780
our initiation action it's going to call

01:24:48,380 --> 01:24:52,489
off to our service the service is going

01:24:50,780 --> 01:24:55,219
to wait a few seconds and pass a value

01:24:52,489 --> 01:24:57,469
back tour effect and then our effect is

01:24:55,219 --> 01:24:59,449
taking that value sent back from the

01:24:57,469 --> 01:25:02,809
service and it's going to send it into

01:24:59,449 --> 01:25:05,599
our completion action so on both sides

01:25:02,809 --> 01:25:07,429
of this our component is the part that

01:25:05,599 --> 01:25:10,519
needs to trigger to dispatch our

01:25:07,429 --> 01:25:12,260
initiate action but our reducer in this

01:25:10,519 --> 01:25:17,269
case is going to be listening mean for

01:25:12,260 --> 01:25:20,030
our completion action so now that we

01:25:17,269 --> 01:25:23,510
have both of our actions our service and

01:25:20,030 --> 01:25:25,849
our effect all ready to go we need to go

01:25:23,510 --> 01:25:28,550
into our reducer and add a new case

01:25:25,849 --> 01:25:30,679
statement to handle oh sorry I was ahead

01:25:28,550 --> 01:25:33,409
on my on one laptop and not the other

01:25:30,679 --> 01:25:34,729
one so we need to go into our reducer

01:25:33,409 --> 01:25:35,989
and add a new case statement that's

01:25:34,729 --> 01:25:38,539
going to listen for that time hop

01:25:35,989 --> 01:25:41,929
complete action so it's the same pattern

01:25:38,539 --> 01:25:43,369
as we saw with our eat banana because

01:25:41,929 --> 01:25:45,229
we're going to deal with a payload that

01:25:43,369 --> 01:25:47,949
we're going to assign to our color

01:25:45,229 --> 01:25:50,929
property within our banana State and

01:25:47,949 --> 01:25:55,969
then we need to import our time hop

01:25:50,929 --> 01:25:57,860
complete action up in our imports so

01:25:55,969 --> 01:26:01,309
hopping over we're just going to go into

01:25:57,860 --> 01:26:04,300
our reducer file get that completion

01:26:01,309 --> 01:26:04,300
action imported

01:26:08,390 --> 01:26:13,730
and then we'll add the new case

01:26:11,190 --> 01:26:13,730
statement

01:26:27,750 --> 01:26:32,280
and we're going to keep our spread

01:26:29,730 --> 01:26:34,740
operator here that's grabbing our copy

01:26:32,280 --> 01:26:37,280
of our current state and then we're

01:26:34,740 --> 01:26:40,170
updating the color property in this case

01:26:37,280 --> 01:26:49,680
to be the payload that was passed in our

01:26:40,170 --> 01:26:52,800
action so now that our reducer is

01:26:49,680 --> 01:26:55,560
listening for that completion action let

01:26:52,800 --> 01:26:56,850
me flip back over to Miss LEDs now we've

01:26:55,560 --> 01:26:59,310
got our reducer listening for that

01:26:56,850 --> 01:27:03,480
completion action so the next thing we

01:26:59,310 --> 01:27:05,670
need to do is actually not jump to our

01:27:03,480 --> 01:27:07,260
component quite yet because we've now

01:27:05,670 --> 01:27:08,880
bringing in an effect into the picture

01:27:07,260 --> 01:27:10,440
which means we've got a little bit more

01:27:08,880 --> 01:27:14,250
wiring that we need to add at the app

01:27:10,440 --> 01:27:17,280
level so that our app knows about our

01:27:14,250 --> 01:27:18,780
effects so there's three different files

01:27:17,280 --> 01:27:21,180
we're going to change here first we're

01:27:18,780 --> 01:27:22,980
going to go into that index dot ts file

01:27:21,180 --> 01:27:24,750
that's dealing with all of our exports

01:27:22,980 --> 01:27:26,580
related to our banana state and we're

01:27:24,750 --> 01:27:28,860
going to export our new effects at that

01:27:26,580 --> 01:27:31,260
level then we're going to go into our

01:27:28,860 --> 01:27:33,780
application level state and bring in

01:27:31,260 --> 01:27:36,150
that the effects related to our banana

01:27:33,780 --> 01:27:39,870
slice of state and then we need to go

01:27:36,150 --> 01:27:42,390
into our app module and pull in a few

01:27:39,870 --> 01:27:46,290
more imports and modules at that level

01:27:42,390 --> 01:27:48,270
on this last line here is not an import

01:27:46,290 --> 01:27:50,430
it's actually going to go within our ng

01:27:48,270 --> 01:27:51,870
module into the our import section so

01:27:50,430 --> 01:27:56,220
we'll get will tackle these one at a

01:27:51,870 --> 01:28:00,180
time so first things first we're going

01:27:56,220 --> 01:28:03,260
to go to our index dot es file and deal

01:28:00,180 --> 01:28:03,260
with this new export

01:28:12,560 --> 01:28:19,710
and you can see I'm getting a request to

01:28:17,130 --> 01:28:20,700
install a new package over here for some

01:28:19,710 --> 01:28:22,140
reason it doesn't seem to know what

01:28:20,700 --> 01:28:24,890
package it wants so maybe if I finish

01:28:22,140 --> 01:28:24,890
this line it will

01:28:35,090 --> 01:28:38,900
or maybe it just doesn't need that

01:28:36,920 --> 01:28:40,790
import anymore I've gotten that import

01:28:38,900 --> 01:28:42,860
request a few times so if you're getting

01:28:40,790 --> 01:28:45,020
in your little preview window a request

01:28:42,860 --> 01:28:46,760
to install a new dependency just go

01:28:45,020 --> 01:28:48,440
ahead and resolve that dependency if you

01:28:46,760 --> 01:28:50,600
click on it it should install it for you

01:28:48,440 --> 01:28:52,820
if not you're good to go

01:28:50,600 --> 01:28:55,130
so we're exporting this our banana

01:28:52,820 --> 01:28:58,420
effects from our index file next we need

01:28:55,130 --> 01:29:00,380
to jump into our app dot state ES file

01:28:58,420 --> 01:29:01,910
remember this is where we're collecting

01:29:00,380 --> 01:29:03,530
all of the information about our banana

01:29:01,910 --> 01:29:05,810
slice of state and now we've added

01:29:03,530 --> 01:29:08,950
effects to our banana so we need to have

01:29:05,810 --> 01:29:08,950
that knowledge here as well

01:29:46,739 --> 01:30:00,480
what did I miss beau equals after here

01:29:52,469 --> 01:30:02,520
thank you love a helpful audience okay

01:30:00,480 --> 01:30:04,380
so we've got our export up at the app

01:30:02,520 --> 01:30:06,060
level now that's bringing in our banana

01:30:04,380 --> 01:30:08,219
effect knowledge to our app level state

01:30:06,060 --> 01:30:11,280
so next we're going to jump over to our

01:30:08,219 --> 01:30:12,840
app dot module dot TS and deal with

01:30:11,280 --> 01:30:16,110
these additional imports that we need to

01:30:12,840 --> 01:30:19,020
pull in um the first one on my line

01:30:16,110 --> 01:30:20,520
eight we've already got an import

01:30:19,020 --> 01:30:22,560
statement bringing in our initial state

01:30:20,520 --> 01:30:26,850
and our reducers so we just need to add

01:30:22,560 --> 01:30:30,890
our effects to that line and then we've

01:30:26,850 --> 01:30:30,890
got a few completely new imports to add

01:31:16,229 --> 01:31:21,079
and then once you have those imports

01:31:18,179 --> 01:31:25,530
resolved we want to jump down into our

01:31:21,079 --> 01:31:29,659
module imports list and we're just going

01:31:25,530 --> 01:31:29,659
to add a line for our effects module

01:31:49,780 --> 01:31:55,489
so again we exported the knowledge of

01:31:52,850 --> 01:31:57,500
our banana effects from our index we

01:31:55,489 --> 01:32:00,200
pulled that knowledge into our app level

01:31:57,500 --> 01:32:03,380
state and then we did a little bit of

01:32:00,200 --> 01:32:09,920
wiring within our app module to get the

01:32:03,380 --> 01:32:11,870
knowledge of this new functionality so

01:32:09,920 --> 01:32:14,600
we already went through the pattern and

01:32:11,870 --> 01:32:18,170
created our actions we created or effect

01:32:14,600 --> 01:32:20,000
we created our service but the reducer

01:32:18,170 --> 01:32:21,760
was only listening for the completion

01:32:20,000 --> 01:32:24,170
action and I mentioned that our

01:32:21,760 --> 01:32:27,320
component in order to trigger this whole

01:32:24,170 --> 01:32:29,180
process needs to dispatch the initiation

01:32:27,320 --> 01:32:32,000
action so we're going to bring in our

01:32:29,180 --> 01:32:33,860
initiate timehop action into our

01:32:32,000 --> 01:32:36,260
component and the imports and then

01:32:33,860 --> 01:32:39,800
there's an existing time hop function

01:32:36,260 --> 01:32:44,090
within your component and we're going to

01:32:39,800 --> 01:32:46,190
dispatch our time hop action so let's

01:32:44,090 --> 01:32:49,570
jump back over to our banana component

01:32:46,190 --> 01:32:49,570
and get this wired up

01:33:36,750 --> 01:33:42,940
so our time hop function here is

01:33:41,010 --> 01:33:44,500
obviously connected to our time hot

01:33:42,940 --> 01:33:47,880
button so let's try to go through our

01:33:44,500 --> 01:33:50,469
whole pattern here we'll peel our banana

01:33:47,880 --> 01:33:52,840
we can see that our state updated to

01:33:50,469 --> 01:33:54,520
indicate is peeled is true and then we

01:33:52,840 --> 01:33:57,219
can eat our banana a few times until we

01:33:54,520 --> 01:33:58,630
don't have any bites left and now we're

01:33:57,219 --> 01:34:00,670
gonna try triggering this time hop

01:33:58,630 --> 01:34:02,710
function and remember it's going to wait

01:34:00,670 --> 01:34:05,860
a few seconds and then it should update

01:34:02,710 --> 01:34:07,449
our state with the color brown so I can

01:34:05,860 --> 01:34:15,520
see down in my console that my rotten

01:34:07,449 --> 01:34:17,409
banana service was triggered and voila

01:34:15,520 --> 01:34:19,270
we can see that our rot service

01:34:17,409 --> 01:34:21,760
completed and now the color of our

01:34:19,270 --> 01:34:23,739
banana has been updated to brown and the

01:34:21,760 --> 01:34:25,719
magic of having our banana observable

01:34:23,739 --> 01:34:28,510
within our component tied directly to

01:34:25,719 --> 01:34:30,580
our HTML automatically will update that

01:34:28,510 --> 01:34:32,500
state of our banana as soon as the

01:34:30,580 --> 01:34:34,170
service has returned and our reducer

01:34:32,500 --> 01:34:43,600
went through and updated that color

01:34:34,170 --> 01:34:46,000
within our state so we've finished our

01:34:43,600 --> 01:34:48,070
basic pattern at this point we created a

01:34:46,000 --> 01:34:49,929
few actions on our last pass through we

01:34:48,070 --> 01:34:52,449
created an effect with a couple of

01:34:49,929 --> 01:34:54,520
actions to handle both initiation and

01:34:52,449 --> 01:34:57,130
the completion and we created a service

01:34:54,520 --> 01:34:59,199
to rot our banana we went into our

01:34:57,130 --> 01:35:00,460
reducer and added to our switch

01:34:59,199 --> 01:35:02,230
statement the case to handle our

01:35:00,460 --> 01:35:03,940
completion action and then we went into

01:35:02,230 --> 01:35:05,670
our component and triggered that

01:35:03,940 --> 01:35:09,540
initiation to start the whole cycle

01:35:05,670 --> 01:35:12,429
rolling so this is our final check point

01:35:09,540 --> 01:35:14,830
for coding within this workshop we're

01:35:12,429 --> 01:35:18,040
gonna take a step aside now and talk a

01:35:14,830 --> 01:35:20,980
little bit about the diva debug tools

01:35:18,040 --> 01:35:23,080
the read redux dev tools that we can use

01:35:20,980 --> 01:35:24,940
to debug our application so we're gonna

01:35:23,080 --> 01:35:26,679
switch back to stack blitz and look at

01:35:24,940 --> 01:35:29,500
these tools a little bit more closely

01:35:26,679 --> 01:35:31,449
but in my opinion this was one of the

01:35:29,500 --> 01:35:34,540
biggest advantages I saw Avenger X

01:35:31,449 --> 01:35:36,909
because having this pattern of always

01:35:34,540 --> 01:35:39,250
updating with a new copy of your state

01:35:36,909 --> 01:35:40,869
gives you this history so that you can

01:35:39,250 --> 01:35:43,420
go into the dev tools and see exactly

01:35:40,869 --> 01:35:45,790
what has happened over time within your

01:35:43,420 --> 01:35:47,320
state it's really easy to set up and use

01:35:45,790 --> 01:35:49,030
if you've already installed in your

01:35:47,320 --> 01:35:49,990
browser you can see how easy the setup

01:35:49,030 --> 01:35:52,600
was

01:35:49,990 --> 01:35:56,050
and also aside from just the the debug

01:35:52,600 --> 01:35:57,550
tools from a unit test perspective you

01:35:56,050 --> 01:35:59,680
know what your state looks like it's

01:35:57,550 --> 01:36:01,600
really just an object and so you can

01:35:59,680 --> 01:36:04,420
feed pretty much anything into your

01:36:01,600 --> 01:36:06,220
state from a test perspective to try to

01:36:04,420 --> 01:36:08,050
trigger certain circumstances within

01:36:06,220 --> 01:36:11,140
your application it makes for a really

01:36:08,050 --> 01:36:13,870
robust test framework so I mentioned up

01:36:11,140 --> 01:36:16,390
front the Redux dev tools plug-in for

01:36:13,870 --> 01:36:18,100
Chrome and if you missed it up front you

01:36:16,390 --> 01:36:26,080
can always pop out and install it book

01:36:18,100 --> 01:36:27,760
now and the other piece you need to

01:36:26,080 --> 01:36:29,740
enable this functionality is something

01:36:27,760 --> 01:36:32,350
we coded up pretty early in the workshop

01:36:29,740 --> 01:36:35,230
it's these two lines here that bring in

01:36:32,350 --> 01:36:36,760
the dev tools functionality and in the

01:36:35,230 --> 01:36:40,690
bottom section here you'll see we have a

01:36:36,760 --> 01:36:42,880
max age configured of 25 and that's

01:36:40,690 --> 01:36:46,690
telling us that we want to maintain a

01:36:42,880 --> 01:36:48,160
history of 25 actions within our history

01:36:46,690 --> 01:36:49,480
so if I don't need to know that much I

01:36:48,160 --> 01:36:51,760
could say I only want to keep track of

01:36:49,480 --> 01:36:53,110
last 5 actions if I want a whole bunch

01:36:51,760 --> 01:36:54,760
of history because I'm having a problem

01:36:53,110 --> 01:36:56,770
maybe I want to keep track of 100

01:36:54,760 --> 01:37:00,820
actions that's where you would update

01:36:56,770 --> 01:37:03,130
the size of your history here so I'm

01:37:00,820 --> 01:37:07,780
going to flip over back to my stackable

01:37:03,130 --> 01:37:09,970
it's quick and you if you can see this

01:37:07,780 --> 01:37:14,080
little tiny icon up here that's kind of

01:37:09,970 --> 01:37:16,630
teal colored if I was on a webpage where

01:37:14,080 --> 01:37:18,670
Redux was not enabled this would be

01:37:16,630 --> 01:37:20,560
grayed out but because I have Redux

01:37:18,670 --> 01:37:25,300
enabled you can see that it's colored at

01:37:20,560 --> 01:37:26,890
this time and so I can click on it and

01:37:25,300 --> 01:37:28,210
it is not showing me the right thing

01:37:26,890 --> 01:37:32,200
right now let me get back out of here

01:37:28,210 --> 01:37:34,300
for a second and refresh we're gonna

01:37:32,200 --> 01:37:36,220
refresh this and then kind of flip

01:37:34,300 --> 01:37:40,320
through our actions really quick so we

01:37:36,220 --> 01:37:40,320
have a fresh history

01:37:41,589 --> 01:37:48,219
oh you know what I know what the problem

01:37:45,789 --> 01:37:50,589
is so there's a little button up here

01:37:48,219 --> 01:37:52,510
that says open a new window we're gonna

01:37:50,589 --> 01:37:54,939
just take our application and open in a

01:37:52,510 --> 01:37:57,129
separate window within the stack blitz

01:37:54,939 --> 01:37:58,899
world it kind of gets confused about

01:37:57,129 --> 01:38:00,939
whether it's tracking the history within

01:37:58,899 --> 01:38:02,829
stack blitz versus the history within

01:38:00,939 --> 01:38:05,199
the app we're trying to test so I'm

01:38:02,829 --> 01:38:08,589
gonna open this in a new window jump

01:38:05,199 --> 01:38:10,179
through our actions again quickly I'm

01:38:08,589 --> 01:38:13,030
gonna skip the time hop so we don't have

01:38:10,179 --> 01:38:15,969
to wait 10 seconds and then open our

01:38:13,030 --> 01:38:18,369
debug tools so you can see right here we

01:38:15,969 --> 01:38:20,829
have a list of actions I would make this

01:38:18,369 --> 01:38:22,539
bigger for you if I could but it's if I

01:38:20,829 --> 01:38:26,229
disconnect it from its current location

01:38:22,539 --> 01:38:28,510
it flips back to stack Blitz tracking so

01:38:26,229 --> 01:38:30,099
I'm kind of hamstrung in this regard so

01:38:28,510 --> 01:38:32,499
hopefully you can see this okay or you

01:38:30,099 --> 01:38:34,269
can look at it on your local laptop so

01:38:32,499 --> 01:38:36,669
there's a nice little filtering function

01:38:34,269 --> 01:38:39,550
up here at the top so if I for example

01:38:36,669 --> 01:38:41,109
only wanted to see my eat actions I can

01:38:39,550 --> 01:38:43,329
just type that word in there and it will

01:38:41,109 --> 01:38:45,010
filter my list down if you're working in

01:38:43,329 --> 01:38:47,949
a much larger application you might have

01:38:45,010 --> 01:38:49,479
a whole bunch of actions going on so

01:38:47,949 --> 01:38:50,289
having that filtering capability can be

01:38:49,479 --> 01:38:53,919
really helpful

01:38:50,289 --> 01:38:56,139
I can also because I see the history

01:38:53,919 --> 01:38:57,909
here I could go back to this get new

01:38:56,139 --> 01:39:00,849
banana action I could say I want to jump

01:38:57,909 --> 01:39:04,239
to that point you can see it update and

01:39:00,849 --> 01:39:05,589
then I can hit play here and it will

01:39:04,239 --> 01:39:07,539
start to flip through everything that's

01:39:05,589 --> 01:39:12,669
happened since that point within my

01:39:07,539 --> 01:39:14,829
application also off to the will draw

01:39:12,669 --> 01:39:17,379
attention to the far side here I'll just

01:39:14,829 --> 01:39:20,199
click peel my banana you can see up in

01:39:17,379 --> 01:39:22,510
the corner here I have diff selected so

01:39:20,199 --> 01:39:24,609
when I select an action within my list

01:39:22,510 --> 01:39:26,530
it's going to show me what changed when

01:39:24,609 --> 01:39:29,109
that action occurred so we're saying

01:39:26,530 --> 01:39:31,089
because I peeled my banana at that time

01:39:29,109 --> 01:39:33,359
that action occurred we changed the is

01:39:31,089 --> 01:39:35,889
peeled property from false to true and

01:39:33,359 --> 01:39:38,229
similarly if I clicked eat banana you

01:39:35,889 --> 01:39:40,800
can see we changed the bytes remaining

01:39:38,229 --> 01:39:42,879
property at that time from 9 to 6

01:39:40,800 --> 01:39:44,919
there's a few different ways you can

01:39:42,879 --> 01:39:47,139
look at your state within the debug

01:39:44,919 --> 01:39:49,300
tools here I can just flip to my state

01:39:47,139 --> 01:39:51,789
button and instead of showing me the

01:39:49,300 --> 01:39:53,280
differences when a particular action or

01:39:51,789 --> 01:39:54,880
occurred it'll show me the entire

01:39:53,280 --> 01:39:56,830
contents of my state

01:39:54,880 --> 01:39:59,139
the time that action occurred I can look

01:39:56,830 --> 01:40:01,690
at it in a tree view I can flip the

01:39:59,139 --> 01:40:03,280
chart and look at it in a chart view not

01:40:01,690 --> 01:40:05,230
super helpful when you're dealing with a

01:40:03,280 --> 01:40:07,449
super simple state but in a much bigger

01:40:05,230 --> 01:40:10,449
state this chart view can be helpful and

01:40:07,449 --> 01:40:15,460
I can also look at just a raw JSON style

01:40:10,449 --> 01:40:17,830
structure so you can see how having that

01:40:15,460 --> 01:40:19,630
ability within a larger framework when

01:40:17,830 --> 01:40:21,520
you have multiple multiple components

01:40:19,630 --> 01:40:23,139
that could be dispatching actions and

01:40:21,520 --> 01:40:25,690
multiple components listening for things

01:40:23,139 --> 01:40:27,340
it can be hard to know upfront which

01:40:25,690 --> 01:40:29,290
component was responsible for a change

01:40:27,340 --> 01:40:31,360
in your state so having this history

01:40:29,290 --> 01:40:33,310
available within your debug tools can be

01:40:31,360 --> 01:40:34,870
a really powerful way for you to debug

01:40:33,310 --> 01:40:37,449
your application and figure out exactly

01:40:34,870 --> 01:40:46,270
where your banana turned purple instead

01:40:37,449 --> 01:40:47,860
of brown so that's basically what the

01:40:46,270 --> 01:40:50,199
main content I wanted to cover with you

01:40:47,860 --> 01:40:51,969
guys today and hopefully you found it

01:40:50,199 --> 01:40:53,739
helpful I think there's a lot of

01:40:51,969 --> 01:40:55,630
confusion about the pattern in general

01:40:53,739 --> 01:40:56,830
so sometimes sometimes we'll get thrown

01:40:55,630 --> 01:40:58,750
into the deep end and we're just trying

01:40:56,830 --> 01:41:00,580
to figure it out and it can take if we

01:40:58,750 --> 01:41:02,620
take a step back it can kind of help us

01:41:00,580 --> 01:41:06,760
understand the pattern and a little more

01:41:02,620 --> 01:41:08,469
depth and I have extended this pattern

01:41:06,760 --> 01:41:12,580
in my own work a little bit further than

01:41:08,469 --> 01:41:14,500
we covered today for example it involves

01:41:12,580 --> 01:41:16,330
a little bit more layer of complexity if

01:41:14,500 --> 01:41:17,830
you're working with modules you have to

01:41:16,330 --> 01:41:19,360
define your selector slightly

01:41:17,830 --> 01:41:20,830
differently but there's a number of

01:41:19,360 --> 01:41:23,170
demos out there that can give you some

01:41:20,830 --> 01:41:26,139
guidance in that area we found it

01:41:23,170 --> 01:41:28,690
helpful to also put a hook into our code

01:41:26,139 --> 01:41:30,010
that gets called a tap initialization so

01:41:28,690 --> 01:41:32,830
that we can retrieve a configuration

01:41:30,010 --> 01:41:36,010
file that we need to know like our user

01:41:32,830 --> 01:41:37,780
information who's using our UI and if we

01:41:36,010 --> 01:41:40,060
put that hook in an app initialization

01:41:37,780 --> 01:41:41,710
we can grab that config file and have it

01:41:40,060 --> 01:41:44,080
automatically loaded into our store up

01:41:41,710 --> 01:41:47,469
front so we have it available from the

01:41:44,080 --> 01:41:49,000
moment an app is loaded I'm I also was

01:41:47,469 --> 01:41:51,489
able to integrate it a little bit with

01:41:49,000 --> 01:41:55,420
dynamic components so we had a scenario

01:41:51,489 --> 01:41:57,130
where based on the field that a user

01:41:55,420 --> 01:41:59,350
clicked on on the left side of the

01:41:57,130 --> 01:42:00,670
screen we wanted to update a different

01:41:59,350 --> 01:42:02,650
or load a different component on the

01:42:00,670 --> 01:42:04,540
right side of the screen so we might

01:42:02,650 --> 01:42:07,570
have had to visualize data from a

01:42:04,540 --> 01:42:08,639
document source or laboratory results

01:42:07,570 --> 01:42:11,190
and so we had different

01:42:08,639 --> 01:42:13,170
that we would need to load based on what

01:42:11,190 --> 01:42:16,469
kind of data the user wanted to look at

01:42:13,170 --> 01:42:18,869
so by tying this into ng rx we could

01:42:16,469 --> 01:42:20,610
take the knowledge of what the user

01:42:18,869 --> 01:42:22,739
clicked on on one side of the screen

01:42:20,610 --> 01:42:24,840
load it into the store and then

01:42:22,739 --> 01:42:26,429
automatically tie into that store the

01:42:24,840 --> 01:42:28,889
knowledge of what kind of component we

01:42:26,429 --> 01:42:30,780
needed to load based on that and if this

01:42:28,889 --> 01:42:32,340
is something that now you've understood

01:42:30,780 --> 01:42:35,280
the pattern that you would find useful

01:42:32,340 --> 01:42:36,780
to have examples of my Twitter handles

01:42:35,280 --> 01:42:38,730
on the last page that we'll get to in a

01:42:36,780 --> 01:42:40,199
second and if you tweet me I would be

01:42:38,730 --> 01:42:42,239
happy to go out and create additional

01:42:40,199 --> 01:42:44,460
github repositories that show some

01:42:42,239 --> 01:42:47,219
examples in code that would extend the

01:42:44,460 --> 01:42:49,260
banana app to these additional use cases

01:42:47,219 --> 01:42:51,659
if necessary it was just beyond the

01:42:49,260 --> 01:42:55,100
scope of this workshop so I didn't have

01:42:51,659 --> 01:42:55,100
time to get to it beforehand

01:42:55,400 --> 01:43:00,030
again I'm reiterating that the

01:42:58,409 --> 01:43:03,360
presentation slides are available if you

01:43:00,030 --> 01:43:05,280
need to access them later I have a link

01:43:03,360 --> 01:43:07,800
in here to an article called just

01:43:05,280 --> 01:43:10,530
explain redux like I'm five because this

01:43:07,800 --> 01:43:12,239
is where the the Apple analogy came from

01:43:10,530 --> 01:43:15,210
that started me down this path of

01:43:12,239 --> 01:43:17,909
craving the banana app the third link

01:43:15,210 --> 01:43:20,639
here is a narwhal blog post that

01:43:17,909 --> 01:43:24,330
somebody directed me to early on that

01:43:20,639 --> 01:43:26,460
has some visualization of more advanced

01:43:24,330 --> 01:43:28,380
patterns you can use within grx that i

01:43:26,460 --> 01:43:30,030
found really helpful and i haven't had a

01:43:28,380 --> 01:43:32,010
need to implement them yet but it goes

01:43:30,030 --> 01:43:33,900
through possibilities like you might

01:43:32,010 --> 01:43:36,449
have an action dispatch that you need to

01:43:33,900 --> 01:43:39,239
split into multiple actions to deal with

01:43:36,449 --> 01:43:41,639
asynchronous operations and so it was a

01:43:39,239 --> 01:43:44,190
really solid way to get a visualization

01:43:41,639 --> 01:43:46,590
and flow charts of how you might want to

01:43:44,190 --> 01:43:49,560
tackle those things within redux and

01:43:46,590 --> 01:43:52,230
then finally I have a link to general

01:43:49,560 --> 01:43:54,719
information about my employer so here's

01:43:52,230 --> 01:43:57,900
my contact information feel free to

01:43:54,719 --> 01:43:59,909
reach out to me anytime I am going to be

01:43:57,900 --> 01:44:01,619
in the speaker panel this afternoon in

01:43:59,909 --> 01:44:04,320
about a half hour you could catch me

01:44:01,619 --> 01:44:06,480
there or if you just see me around and

01:44:04,320 --> 01:44:09,119
you want to chat I'm always up to talk

01:44:06,480 --> 01:44:10,770
to people and I'm here by myself so I

01:44:09,119 --> 01:44:14,070
have nothing better to do than talk to

01:44:10,770 --> 01:44:15,929
strangers so thank you very much for

01:44:14,070 --> 01:44:18,270
your time I hope that you all found this

01:44:15,929 --> 01:44:21,580
useful and I would like to reiterate

01:44:18,270 --> 01:44:23,950
that you don't always have to be

01:44:21,580 --> 01:44:25,810
the expert to provide value to the

01:44:23,950 --> 01:44:27,850
community so I strongly encourage

01:44:25,810 --> 01:44:29,740
everybody to participate in the

01:44:27,850 --> 01:44:31,900
community overall everybody has been so

01:44:29,740 --> 01:44:33,280
welcoming and I think everybody

01:44:31,900 --> 01:44:35,110
appreciates when we can share

01:44:33,280 --> 01:44:37,170
experiences that might benefit each

01:44:35,110 --> 01:44:41,770
other thank you very much

01:44:37,170 --> 01:44:41,770
[Applause]

01:44:45,790 --> 01:44:52,399
[Music]

01:44:57,980 --> 01:45:00,040

YouTube URL: https://www.youtube.com/watch?v=272KDxSIQBw


