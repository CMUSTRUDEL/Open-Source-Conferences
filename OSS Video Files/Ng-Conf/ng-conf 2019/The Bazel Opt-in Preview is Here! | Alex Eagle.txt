Title: The Bazel Opt-in Preview is Here! | Alex Eagle
Publication date: 2019-05-05
Playlist: ng-conf 2019
Description: 
	As a part of version 8 of Angular, developers will be able to give Bazel a try on their projects. Alex will walk through the process, the benefits for enterprise scale projects, and the potential downsides to help you understand how Bazel can fit into your workflow, and to share our vision for the future.

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:07,920 --> 00:00:11,170
[Music]

00:00:11,809 --> 00:00:19,380
hello ng-conf how are we excited today

00:00:15,240 --> 00:00:20,910
how we doing it's Friday afternoon it's

00:00:19,380 --> 00:00:22,590
Friday afternoon we're all getting a

00:00:20,910 --> 00:00:23,670
little tired of the conference I'm gonna

00:00:22,590 --> 00:00:24,660
be here with you to get through this

00:00:23,670 --> 00:00:27,539
talk together okay

00:00:24,660 --> 00:00:29,550
so this is the Basel talk if you've

00:00:27,539 --> 00:00:31,650
heard about Basel in the keynote or and

00:00:29,550 --> 00:00:33,809
some of the other talks here today and

00:00:31,650 --> 00:00:35,730
in the last couple of days you probably

00:00:33,809 --> 00:00:37,440
have some questions like what is this

00:00:35,730 --> 00:00:39,180
thing why do I care should I care what

00:00:37,440 --> 00:00:41,520
has this relate to angular those are the

00:00:39,180 --> 00:00:42,989
things I'm gonna answer in this talk my

00:00:41,520 --> 00:00:45,539
name is Alex I've been at Google 10

00:00:42,989 --> 00:00:48,030
years which means I've done these things

00:00:45,539 --> 00:00:50,670
as a fair amount I'm the lead right now

00:00:48,030 --> 00:00:52,230
for the angular's tooling team and I'm

00:00:50,670 --> 00:00:53,690
probably to you all the Basel guy

00:00:52,230 --> 00:00:57,690
because that's the talk I always give

00:00:53,690 --> 00:00:59,699
and our team owns both the angular CLI

00:00:57,690 --> 00:01:01,260
that you all use and also the internal

00:00:59,699 --> 00:01:03,629
tools that we use at Google to build and

00:01:01,260 --> 00:01:05,100
test our own applications and so it's

00:01:03,629 --> 00:01:07,770
really interesting for us having both of

00:01:05,100 --> 00:01:09,210
those needs that we can do more to

00:01:07,770 --> 00:01:11,580
converge them and that is a lot of where

00:01:09,210 --> 00:01:12,840
this comes from so I like to start all

00:01:11,580 --> 00:01:14,880
my talks with a fake quote that I made

00:01:12,840 --> 00:01:16,799
up so some enterprise user says my

00:01:14,880 --> 00:01:18,689
buildin CI is too slow although I have

00:01:16,799 --> 00:01:20,970
heard this from a number of you at the

00:01:18,689 --> 00:01:21,960
conference and this is the main

00:01:20,970 --> 00:01:24,720
motivator of what I'm going to talk

00:01:21,960 --> 00:01:26,280
about today is the CI works great unless

00:01:24,720 --> 00:01:27,630
you're an enterprise user and then there

00:01:26,280 --> 00:01:30,479
are some things that we still want to

00:01:27,630 --> 00:01:33,720
make better for you and speed is one of

00:01:30,479 --> 00:01:35,970
those things so before I can get into

00:01:33,720 --> 00:01:37,860
even telling you what is basil I want to

00:01:35,970 --> 00:01:39,540
talk about what is a build tool because

00:01:37,860 --> 00:01:42,150
I think this has gotten really confused

00:01:39,540 --> 00:01:43,890
in the JavaScript ecosystem so one

00:01:42,150 --> 00:01:45,450
question I get well I would use basil

00:01:43,890 --> 00:01:47,939
but we're already using Jenkins we don't

00:01:45,450 --> 00:01:49,560
replace Jenkins is this an alternative

00:01:47,939 --> 00:01:52,200
to webpack no basil can work with web

00:01:49,560 --> 00:01:53,820
pack so the way I think about this is to

00:01:52,200 --> 00:01:56,009
divide the space of the tools that you

00:01:53,820 --> 00:01:58,200
use into these three columns and a CI

00:01:56,009 --> 00:01:59,579
system its job is to watch for changes

00:01:58,200 --> 00:02:02,219
that you're making to your app and to

00:01:59,579 --> 00:02:04,320
trigger some tool to do the build and

00:02:02,219 --> 00:02:05,640
then in the middle column you have like

00:02:04,320 --> 00:02:06,659
hundreds of these individual little

00:02:05,640 --> 00:02:09,989
tools that can do lots of different

00:02:06,659 --> 00:02:11,700
things some of them have a big job and

00:02:09,989 --> 00:02:13,890
some of them have a very small job like

00:02:11,700 --> 00:02:15,200
injecting things into your index.html is

00:02:13,890 --> 00:02:18,480
job but it could still be its own tool

00:02:15,200 --> 00:02:20,220
the third column here is a set of what I

00:02:18,480 --> 00:02:21,720
would call a build tool because they're

00:02:20,220 --> 00:02:24,060
generalized the only thing they know how

00:02:21,720 --> 00:02:26,010
to do is run those dev tools from the

00:02:24,060 --> 00:02:27,810
second column and basil is one of those

00:02:26,010 --> 00:02:32,000
gulp and grunt which many of you

00:02:27,810 --> 00:02:32,000
probably have used in the past make was

00:02:37,340 --> 00:02:44,130
this middle box that's on a box sorry

00:02:40,820 --> 00:02:46,680
and and and their job is just to spawn

00:02:44,130 --> 00:02:47,700
the other tools and in particular like

00:02:46,680 --> 00:02:50,340
you only need to write each of these

00:02:47,700 --> 00:02:53,280
plugins one time so for somebody like

00:02:50,340 --> 00:02:55,739
our team it's really useful that that

00:02:53,280 --> 00:02:58,230
that we can separate out like these can

00:02:55,739 --> 00:03:00,959
be different different layers in the in

00:02:58,230 --> 00:03:03,959
the tool chain and so you contrast that

00:03:00,959 --> 00:03:05,610
with what has happened since gulp became

00:03:03,959 --> 00:03:06,989
less popular I know a lot of a lot of

00:03:05,610 --> 00:03:08,610
you are still using gulp but it seems

00:03:06,989 --> 00:03:09,780
like it's on the decline lately if you

00:03:08,610 --> 00:03:11,280
don't have any of the tools from the

00:03:09,780 --> 00:03:14,160
third column then what orchestrates are

00:03:11,280 --> 00:03:15,480
built and the only answer is well the

00:03:14,160 --> 00:03:17,400
tool in the middle column has to do that

00:03:15,480 --> 00:03:20,190
work for you and so where we end up in

00:03:17,400 --> 00:03:21,450
that model is it's a big matrix and so

00:03:20,190 --> 00:03:23,310
for every one of your tools every

00:03:21,450 --> 00:03:25,380
bundler every dev server every test

00:03:23,310 --> 00:03:26,850
runner it ends up having to know how to

00:03:25,380 --> 00:03:28,049
do all of the different transforms that

00:03:26,850 --> 00:03:30,780
are required to go from your original

00:03:28,049 --> 00:03:32,750
sources to the app that needs to run in

00:03:30,780 --> 00:03:35,070
the browser or a node wherever your app

00:03:32,750 --> 00:03:36,209
so I did a separate talk about this at

00:03:35,070 --> 00:03:37,920
the last modern web Meetup

00:03:36,209 --> 00:03:39,510
that you can you can listen to and I go

00:03:37,920 --> 00:03:41,040
into more detail about the the

00:03:39,510 --> 00:03:42,540
difference between these two my point

00:03:41,040 --> 00:03:44,760
about this today is just to say basil is

00:03:42,540 --> 00:03:46,650
distinct from any of these other tools

00:03:44,760 --> 00:03:50,250
so your CI system calls basil basil

00:03:46,650 --> 00:03:51,989
calls all the individual tools so for

00:03:50,250 --> 00:03:54,630
this talk I want to give a bit of

00:03:51,989 --> 00:03:58,799
guidance about what scale we're trying

00:03:54,630 --> 00:04:00,299
to target with with basil a 10 component

00:03:58,799 --> 00:04:02,790
app what I'm calling small t-shirt size

00:04:00,299 --> 00:04:04,709
is probably a typical like app that you

00:04:02,790 --> 00:04:06,180
would write in a in a bootcamp class or

00:04:04,709 --> 00:04:07,350
maybe like the tour of Heroes or our new

00:04:06,180 --> 00:04:10,170
getting started that we just announced

00:04:07,350 --> 00:04:11,850
all the way up to a 2,500 component app

00:04:10,170 --> 00:04:14,160
I picked that number because that is

00:04:11,850 --> 00:04:16,310
actually the size of one of the angular

00:04:14,160 --> 00:04:19,530
apps that we build internally at Google

00:04:16,310 --> 00:04:21,510
and building an extra-large app is

00:04:19,530 --> 00:04:23,099
pretty challenging I don't know how many

00:04:21,510 --> 00:04:25,860
if you have a 2,500 component app

00:04:23,099 --> 00:04:26,910
probably some I don't think Google is

00:04:25,860 --> 00:04:28,020
the only one building really large

00:04:26,910 --> 00:04:30,539
applications

00:04:28,020 --> 00:04:32,789
price scale and how do we do that today

00:04:30,539 --> 00:04:34,319
so Basel obviously this is the build

00:04:32,789 --> 00:04:36,569
tool that we use at Google and we've

00:04:34,319 --> 00:04:37,949
been using it for many years to build

00:04:36,569 --> 00:04:42,180
all of our code including our angular

00:04:37,949 --> 00:04:44,699
code Basel is is open sourced by a team

00:04:42,180 --> 00:04:46,379
that has come to visit us here at

00:04:44,699 --> 00:04:48,330
ng-conf they are partnering with the

00:04:46,379 --> 00:04:52,349
angular team to make basel work better

00:04:48,330 --> 00:04:53,789
for front-end builds so what is it about

00:04:52,349 --> 00:04:54,960
basel that makes it work well for us i

00:04:53,789 --> 00:04:57,000
don't have time to go through these in

00:04:54,960 --> 00:04:58,860
any detail I encourage you to I'll have

00:04:57,000 --> 00:05:00,300
some links at the end that you can find

00:04:58,860 --> 00:05:03,569
other talks that go into more depth on

00:05:00,300 --> 00:05:05,639
these in short Basel is incremental

00:05:03,569 --> 00:05:07,080
which means if you make a small change

00:05:05,639 --> 00:05:08,909
to your app you should only have a small

00:05:07,080 --> 00:05:12,240
amount of rebuild or retest work to do

00:05:08,909 --> 00:05:13,949
it does a full stack building test we'll

00:05:12,240 --> 00:05:16,020
talk about angular universal as one

00:05:13,949 --> 00:05:17,610
example but in Google there are a lot of

00:05:16,020 --> 00:05:18,630
systems where we need both a back in and

00:05:17,610 --> 00:05:20,310
a front-end to be available in order to

00:05:18,630 --> 00:05:22,770
run tests basil can span your entire

00:05:20,310 --> 00:05:25,979
build it can do Java it can do swagger

00:05:22,770 --> 00:05:27,060
it can do lots of it can it can it can

00:05:25,979 --> 00:05:28,949
include all the things that need to go

00:05:27,060 --> 00:05:31,139
into the app that you want to test it

00:05:28,949 --> 00:05:32,490
scales on the cloud which means that

00:05:31,139 --> 00:05:33,810
you're not constrained with the local

00:05:32,490 --> 00:05:35,729
resources I have a demo of that at the

00:05:33,810 --> 00:05:37,560
end and it's extensible you can add your

00:05:35,729 --> 00:05:39,030
own things and your build most builds at

00:05:37,560 --> 00:05:41,789
Google are a special snowflake and yours

00:05:39,030 --> 00:05:43,139
probably are too and finally my personal

00:05:41,789 --> 00:05:45,270
stamp of approval for what this is worth

00:05:43,139 --> 00:05:46,710
I've been using Basel since I started at

00:05:45,270 --> 00:05:48,060
Google and it's really really really

00:05:46,710 --> 00:05:50,610
amazing it's really well done software

00:05:48,060 --> 00:05:52,250
so this is why I think it makes sense

00:05:50,610 --> 00:05:54,690
for us to explore how we can use this

00:05:52,250 --> 00:05:56,580
Stephon this morning in the keynote gave

00:05:54,690 --> 00:05:58,469
you this his his product life cycle here

00:05:56,580 --> 00:05:59,550
so I'm gonna tell the story quickly of

00:05:58,469 --> 00:06:01,800
how we got to this place where we are

00:05:59,550 --> 00:06:03,800
with Basel in 2016 I had this idea

00:06:01,800 --> 00:06:06,750
basically this was our Venn diagram

00:06:03,800 --> 00:06:08,039
where Google and your tool chains are

00:06:06,750 --> 00:06:10,860
completely diverged we weren't really

00:06:08,039 --> 00:06:12,960
sharing any code and to make these

00:06:10,860 --> 00:06:15,000
things more similar we need to push both

00:06:12,960 --> 00:06:16,800
bubbles so on the one hand we started

00:06:15,000 --> 00:06:18,060
using typescript at Google which was

00:06:16,800 --> 00:06:19,529
developed outside of Google and it's

00:06:18,060 --> 00:06:20,550
been really awesome that we've that we

00:06:19,529 --> 00:06:22,229
get better developer productivity

00:06:20,550 --> 00:06:23,849
internally at Google by bringing in

00:06:22,229 --> 00:06:24,810
technologies but at the same time

00:06:23,849 --> 00:06:26,490
there's a lot of things that we use at

00:06:24,810 --> 00:06:28,139
Google that could be useful for you and

00:06:26,490 --> 00:06:31,500
that's where basil comes as the other

00:06:28,139 --> 00:06:34,529
direction so I gave this talk and Europe

00:06:31,500 --> 00:06:36,570
and I've mentioned basil here in 2016

00:06:34,529 --> 00:06:39,089
and it was just an idea

00:06:36,570 --> 00:06:41,669
so then in 2017 we had to make a theory

00:06:39,089 --> 00:06:41,940
of this like can we get together and

00:06:41,669 --> 00:06:44,100
agree

00:06:41,940 --> 00:06:45,990
that we think we can do it and so to

00:06:44,100 --> 00:06:49,970
prove that we needed to hook up basil

00:06:45,990 --> 00:06:52,950
and nodejs basil comes from a back-end

00:06:49,970 --> 00:06:54,450
it started we more with Java and C++ and

00:06:52,950 --> 00:06:56,520
so it was our job to make it be able to

00:06:54,450 --> 00:06:58,440
run node tools so that's what this repo

00:06:56,520 --> 00:07:00,210
does and then I went to angular mix and

00:06:58,440 --> 00:07:02,940
here I presented the slide from the

00:07:00,210 --> 00:07:04,140
previous year at ng-europe if you like

00:07:02,940 --> 00:07:08,490
inception you're gonna like this section

00:07:04,140 --> 00:07:10,650
of the talk in 2018 so we went to

00:07:08,490 --> 00:07:12,150
possible so possible means we can prove

00:07:10,650 --> 00:07:14,430
to you you can fetch this repo and you

00:07:12,150 --> 00:07:16,410
can try it and hey like it does work

00:07:14,430 --> 00:07:18,000
under this very special circumstances

00:07:16,410 --> 00:07:19,320
that the repo had at the time and this

00:07:18,000 --> 00:07:21,330
is the still the example app that I

00:07:19,320 --> 00:07:22,440
encourage you to check out if reading

00:07:21,330 --> 00:07:25,410
examples is the way that you learn

00:07:22,440 --> 00:07:27,600
things and so this was last year at

00:07:25,410 --> 00:07:28,680
ng-conf I wear my Basel shirt and then I

00:07:27,600 --> 00:07:31,350
took a picture of that put it in my

00:07:28,680 --> 00:07:32,910
slides and I presented that at a

00:07:31,350 --> 00:07:34,320
workshop that we did here where some of

00:07:32,910 --> 00:07:35,910
you if you were here got a chance to

00:07:34,320 --> 00:07:39,240
play around with doing a full stack

00:07:35,910 --> 00:07:41,820
build using Java and basil so now here

00:07:39,240 --> 00:07:43,680
we are at 2019 not going to read all of

00:07:41,820 --> 00:07:46,110
these things but the short story is if

00:07:43,680 --> 00:07:47,430
you tried basil in the past there were a

00:07:46,110 --> 00:07:48,780
lot of sharks in the water and so you

00:07:47,430 --> 00:07:50,340
might not have gotten in the water the

00:07:48,780 --> 00:07:52,500
Sharks have been dealt with the water

00:07:50,340 --> 00:07:54,960
might still be cold but we've done a lot

00:07:52,500 --> 00:07:56,280
of work to make this fit the existing

00:07:54,960 --> 00:07:57,780
model so we've smoothed a lot of rough

00:07:56,280 --> 00:07:59,760
edges and we've also made it scaled down

00:07:57,780 --> 00:08:01,320
to fit into a smaller project because

00:07:59,760 --> 00:08:02,730
you know our usage at Google is that

00:08:01,320 --> 00:08:04,590
basil is is used in really large

00:08:02,730 --> 00:08:06,510
projects so for example the basil team

00:08:04,590 --> 00:08:09,120
based on our feedback went from I think

00:08:06,510 --> 00:08:11,430
180 megabytes for the at basil slash

00:08:09,120 --> 00:08:12,780
basil NPM package and the latest number

00:08:11,430 --> 00:08:14,520
is less than 50 so they're working on

00:08:12,780 --> 00:08:16,050
trimming things out making it fit better

00:08:14,520 --> 00:08:18,060
into into our lives as front-end

00:08:16,050 --> 00:08:18,900
developers and so now we are here we are

00:08:18,060 --> 00:08:20,490
in 2019

00:08:18,900 --> 00:08:23,400
as Brad announced in the keynote basil

00:08:20,490 --> 00:08:25,020
is graduating into an opt-in preview

00:08:23,400 --> 00:08:26,850
which is the same status as Ivy this

00:08:25,020 --> 00:08:29,700
wasn't intentional that ng-conf this

00:08:26,850 --> 00:08:31,110
year was all about opt-in previews so if

00:08:29,700 --> 00:08:33,810
this is part of angular labs let me

00:08:31,110 --> 00:08:35,250
unpack that a little bit so just like

00:08:33,810 --> 00:08:36,960
Ivy what we really want to learn is how

00:08:35,250 --> 00:08:39,419
compatible we can make basil with your

00:08:36,960 --> 00:08:42,479
existing with your app and the tool

00:08:39,419 --> 00:08:44,820
chain that you use and we know that it's

00:08:42,479 --> 00:08:47,040
a it has some issues still we have error

00:08:44,820 --> 00:08:48,180
messages that are hard to understand the

00:08:47,040 --> 00:08:50,280
performance isn't where we want it to be

00:08:48,180 --> 00:08:51,540
yet some third-party libraries we still

00:08:50,280 --> 00:08:53,070
have to do some shimming to support them

00:08:51,540 --> 00:08:54,990
but for the most part we think this now

00:08:53,070 --> 00:08:58,800
fits in the easy category we

00:08:54,990 --> 00:08:59,940
you can go try this and so the question

00:08:58,800 --> 00:09:02,640
is should you go try this and probably

00:08:59,940 --> 00:09:04,140
not all of you so before I move on the

00:09:02,640 --> 00:09:06,899
final inception slide is Here I am this

00:09:04,140 --> 00:09:08,279
year at ng-conf in 2019 showing that

00:09:06,899 --> 00:09:10,649
slide for me here last year wearing the

00:09:08,279 --> 00:09:12,000
same Basel shirt I thought about wearing

00:09:10,649 --> 00:09:13,260
the Basel shirt right now but then you

00:09:12,000 --> 00:09:15,930
might think that that's the only shirt I

00:09:13,260 --> 00:09:17,550
ever wear okay so I'm gonna make this a

00:09:15,930 --> 00:09:19,050
little bit less scary I already said

00:09:17,550 --> 00:09:20,880
Basel is just this hub-and-spoke model

00:09:19,050 --> 00:09:22,110
it runs your existing tools but let me

00:09:20,880 --> 00:09:25,050
also describe how it fits into the

00:09:22,110 --> 00:09:26,220
angular CLI so in the keynote Brad

00:09:25,050 --> 00:09:27,810
announced that one of the new features

00:09:26,220 --> 00:09:30,839
we have an angular 8 is this builders

00:09:27,810 --> 00:09:32,790
API and as you said that the schematics

00:09:30,839 --> 00:09:34,740
API we released a year or so ago allows

00:09:32,790 --> 00:09:36,660
you to customize the files that the CLI

00:09:34,740 --> 00:09:38,520
will produce in your project builders

00:09:36,660 --> 00:09:40,620
allow you to customize what tools we run

00:09:38,520 --> 00:09:43,110
when you run ng test ng build ng serve

00:09:40,620 --> 00:09:44,520
and so the one you use today you may

00:09:43,110 --> 00:09:46,980
have never seen this NPM package it's

00:09:44,520 --> 00:09:48,990
buried inside of the CLI but it's this

00:09:46,980 --> 00:09:51,029
at angular dev kit slash build angular

00:09:48,990 --> 00:09:52,350
package and that is a builder and it

00:09:51,029 --> 00:09:55,200
sits in between the CLI and all the

00:09:52,350 --> 00:09:57,180
tools that we call and so you can think

00:09:55,200 --> 00:09:58,529
of basil as simply a different green box

00:09:57,180 --> 00:09:59,940
that sits in between here it's just a

00:09:58,529 --> 00:10:02,190
different way to orchestrate which tools

00:09:59,940 --> 00:10:06,000
we run when you still use the CLI you

00:10:02,190 --> 00:10:07,500
can still use your existing tools and so

00:10:06,000 --> 00:10:09,360
hopefully that makes it less scary so

00:10:07,500 --> 00:10:10,770
let's talk about what applications scale

00:10:09,360 --> 00:10:13,770
you're at I had these t-shirts earlier

00:10:10,770 --> 00:10:15,089
let's say you have a small app the most

00:10:13,770 --> 00:10:16,470
important thing we want to do for small

00:10:15,089 --> 00:10:18,570
apps is stability

00:10:16,470 --> 00:10:20,880
Igor talked about this in the keynote we

00:10:18,570 --> 00:10:22,350
care so much about never breaking the

00:10:20,880 --> 00:10:23,550
ecosystem again because we want all of

00:10:22,350 --> 00:10:24,899
you to be able to stay on the latest

00:10:23,550 --> 00:10:26,790
version of angular and the latest

00:10:24,899 --> 00:10:29,010
version of the CLI and so our number one

00:10:26,790 --> 00:10:30,180
priority here is not to mess up your

00:10:29,010 --> 00:10:31,560
life there should be no observable

00:10:30,180 --> 00:10:32,850
difference when basil happens and

00:10:31,560 --> 00:10:34,230
there's really not a good reason if you

00:10:32,850 --> 00:10:35,490
have a small app that basil should solve

00:10:34,230 --> 00:10:37,079
any of your problems today because

00:10:35,490 --> 00:10:39,000
there's no observable difference either

00:10:37,079 --> 00:10:42,300
bad or good basil will at best do the

00:10:39,000 --> 00:10:43,980
same thing you have already however when

00:10:42,300 --> 00:10:46,350
we get it to medium scale based on some

00:10:43,980 --> 00:10:47,760
benchmarks we've been running we think

00:10:46,350 --> 00:10:49,470
that we can get a faster build and test

00:10:47,760 --> 00:10:51,300
I have some graphs in a little bit and

00:10:49,470 --> 00:10:52,829
also the full stack builds something

00:10:51,300 --> 00:10:54,240
like with angular Universal we send we

00:10:52,829 --> 00:10:56,430
see that medium-sized apps tend to start

00:10:54,240 --> 00:10:57,959
to have these requirements angular

00:10:56,430 --> 00:10:59,790
Universal today in development mode is

00:10:57,959 --> 00:11:01,020
kind of kind of hard to build because it

00:10:59,790 --> 00:11:05,220
doesn't know how to deploy the

00:11:01,020 --> 00:11:06,959
server-side parts of your code okay so

00:11:05,220 --> 00:11:09,140
I'm gonna describe how build systems

00:11:06,959 --> 00:11:09,140
work

00:11:09,800 --> 00:11:14,430
there's a okay accidentally skipped this

00:11:12,360 --> 00:11:16,320
slide this is an important slide this

00:11:14,430 --> 00:11:17,639
slide is intentionally looks stupid and

00:11:16,320 --> 00:11:20,700
the reason this slide looks stupid is

00:11:17,639 --> 00:11:24,029
because it shows a very simple model of

00:11:20,700 --> 00:11:26,070
how your code comes to run inside of

00:11:24,029 --> 00:11:28,139
your app and I want to make clear that

00:11:26,070 --> 00:11:29,370
this is entirely the correct model for

00:11:28,139 --> 00:11:30,899
you to have you should not don't feel

00:11:29,370 --> 00:11:32,279
bad this is how you think it works this

00:11:30,899 --> 00:11:34,199
is how it works this is the whole intent

00:11:32,279 --> 00:11:35,579
of the angular CLI is to make it really

00:11:34,199 --> 00:11:37,110
simple for you to get your code into

00:11:35,579 --> 00:11:38,880
your app but since we're talking about

00:11:37,110 --> 00:11:41,490
this opt in preview I'm going to explain

00:11:38,880 --> 00:11:43,440
a little bit how basil is different so

00:11:41,490 --> 00:11:44,579
one way to think about it is angular CLI

00:11:43,440 --> 00:11:46,829
is really just running this node.js

00:11:44,579 --> 00:11:48,389
process and then inside of the node.js

00:11:46,829 --> 00:11:49,889
process it runs one tool like let's say

00:11:48,389 --> 00:11:51,209
karma and that that tool has to run all

00:11:49,889 --> 00:11:54,839
the plugins like I said earlier it has

00:11:51,209 --> 00:11:56,519
this plug-in matrix basil instead

00:11:54,839 --> 00:11:58,380
follows the UNIX philosophy which is

00:11:56,519 --> 00:12:01,260
lots of independent programs cut awk

00:11:58,380 --> 00:12:03,449
said and then you can compose those

00:12:01,260 --> 00:12:04,980
programs in some novel and new way by

00:12:03,449 --> 00:12:06,720
piping the output of one of them through

00:12:04,980 --> 00:12:08,250
standard out into the other or by

00:12:06,720 --> 00:12:10,500
sharing some temporary structures on

00:12:08,250 --> 00:12:12,959
disk and all of the Basil's sorry all of

00:12:10,500 --> 00:12:15,630
the tools in the UNIX environment know

00:12:12,959 --> 00:12:17,160
how to speak in these two kind of idioms

00:12:15,630 --> 00:12:18,690
and so it's really easy to combine them

00:12:17,160 --> 00:12:20,370
and write a one-liner that does

00:12:18,690 --> 00:12:21,660
something really powerful you can think

00:12:20,370 --> 00:12:22,350
of basil doing a very similar thing for

00:12:21,660 --> 00:12:24,360
your build

00:12:22,350 --> 00:12:26,519
so basil has a graph of what needs to

00:12:24,360 --> 00:12:28,649
happen and this is the graph we give you

00:12:26,519 --> 00:12:30,810
by default when you opt into the to our

00:12:28,649 --> 00:12:32,339
new preview so you get one big

00:12:30,810 --> 00:12:34,380
compilation of the typescript code or

00:12:32,339 --> 00:12:36,019
and at the same time in parallel we can

00:12:34,380 --> 00:12:38,250
do a big compilation of the SAS code

00:12:36,019 --> 00:12:40,500
assuming that using SAS just an example

00:12:38,250 --> 00:12:42,899
and then those are both depended on by

00:12:40,500 --> 00:12:44,250
running NGC and finally that's depended

00:12:42,899 --> 00:12:45,480
on by running the dev server so when you

00:12:44,250 --> 00:12:47,250
tell basil to run the dev server it

00:12:45,480 --> 00:12:50,010
walks this graph figures out what work

00:12:47,250 --> 00:12:51,930
needs to be done and then and then your

00:12:50,010 --> 00:12:53,670
dev server comes up a couple notes here

00:12:51,930 --> 00:12:55,170
one is that we always do a OT under

00:12:53,670 --> 00:12:56,399
basil and the reason is we've always

00:12:55,170 --> 00:12:57,779
done it that way at Google because we

00:12:56,399 --> 00:12:59,430
have the increment allottee property

00:12:57,779 --> 00:13:00,750
we're able to get our builds fast enough

00:12:59,430 --> 00:13:03,449
even though we have a OT on all the time

00:13:00,750 --> 00:13:05,819
and also this dev server just happens to

00:13:03,449 --> 00:13:07,500
be written in go and because basil is a

00:13:05,819 --> 00:13:10,829
full stack build system it doesn't need

00:13:07,500 --> 00:13:13,199
to have no JSP that the the the runtime

00:13:10,829 --> 00:13:14,670
environment for all of the tools we

00:13:13,199 --> 00:13:16,230
wrote this in go because we wanted it to

00:13:14,670 --> 00:13:18,180
be super fast to put lots and lots of

00:13:16,230 --> 00:13:20,459
modules into the browser and i've

00:13:18,180 --> 00:13:21,300
benchmarked this at 10,000 very small

00:13:20,459 --> 00:13:22,620
types

00:13:21,300 --> 00:13:25,830
modules getting into the browser in 60

00:13:22,620 --> 00:13:28,440
milliseconds so just an example of

00:13:25,830 --> 00:13:30,690
something that basil allows us to do so

00:13:28,440 --> 00:13:32,279
let's say you want to try this and you

00:13:30,690 --> 00:13:33,690
have an app where you think it can

00:13:32,279 --> 00:13:35,730
actually solve your problems so the

00:13:33,690 --> 00:13:38,370
simple way to get on board is first of

00:13:35,730 --> 00:13:40,589
all update to angular 8 and then either

00:13:38,370 --> 00:13:43,050
create a new app using the at angular

00:13:40,589 --> 00:13:45,420
slash basil collection or use that same

00:13:43,050 --> 00:13:47,370
package with ng add to add at basil into

00:13:45,420 --> 00:13:50,250
your existing application at this point

00:13:47,370 --> 00:13:52,440
what you should expect is that you have

00:13:50,250 --> 00:13:53,700
the same behavior as before and your

00:13:52,440 --> 00:13:55,950
sources haven't really been changed

00:13:53,700 --> 00:13:57,779
there's a couple of differences when we

00:13:55,950 --> 00:14:01,440
setup basil and the outputs all look

00:13:57,779 --> 00:14:03,209
similar but it doesn't yet have all the

00:14:01,440 --> 00:14:04,860
scaling properties so this is this is

00:14:03,209 --> 00:14:06,209
just like your first step in okay let's

00:14:04,860 --> 00:14:07,589
see if basil can work in my project and

00:14:06,209 --> 00:14:08,760
if you need to go back to safety if

00:14:07,589 --> 00:14:10,140
something doesn't look right and you

00:14:08,760 --> 00:14:11,550
just wanna get back to development we

00:14:10,140 --> 00:14:14,390
make two backup files you can restore

00:14:11,550 --> 00:14:17,010
them and go back to the previous builder

00:14:14,390 --> 00:14:18,390
so I have a demo for opting in but in

00:14:17,010 --> 00:14:19,380
the interest of time I'm gonna skip this

00:14:18,390 --> 00:14:22,230
one if you want to look at my slides

00:14:19,380 --> 00:14:24,420
there's a there's a video here what I

00:14:22,230 --> 00:14:24,990
show at the end of that video is that

00:14:24,420 --> 00:14:26,730
okay

00:14:24,990 --> 00:14:28,170
we ran we ran a build before and then we

00:14:26,730 --> 00:14:30,029
added basil and then the build still

00:14:28,170 --> 00:14:31,440
works but we get to this point where we

00:14:30,029 --> 00:14:32,970
want to scale up and we want to break

00:14:31,440 --> 00:14:34,529
down the compilation into lots of small

00:14:32,970 --> 00:14:37,410
parts instead of that graph I showed

00:14:34,529 --> 00:14:39,540
that only had four nodes right now this

00:14:37,410 --> 00:14:40,500
is a manual configuration step I'll talk

00:14:39,540 --> 00:14:42,839
about how we think we can make that

00:14:40,500 --> 00:14:43,980
easier so we do ng build and we passed

00:14:42,839 --> 00:14:45,480
this flag and it will leave the the

00:14:43,980 --> 00:14:48,240
configuration files on disk for me to

00:14:45,480 --> 00:14:49,470
edit so let's take a look at a bigger

00:14:48,240 --> 00:14:51,300
scale example this is a thousand

00:14:49,470 --> 00:14:52,649
components this application looks a

00:14:51,300 --> 00:14:54,180
little bit like a cloud console it's

00:14:52,649 --> 00:14:58,020
kind of modeled on the Google cloud

00:14:54,180 --> 00:14:59,490
console and the example is hosted here

00:14:58,020 --> 00:15:00,930
and here's a graph of what this looks

00:14:59,490 --> 00:15:02,220
like I've obviously trimmed out a lot of

00:15:00,930 --> 00:15:04,529
it it's a much bigger graph than the one

00:15:02,220 --> 00:15:05,670
I showed before my application at the

00:15:04,529 --> 00:15:07,230
top depends on all of these different

00:15:05,670 --> 00:15:08,490
feature sets and the feature sets

00:15:07,230 --> 00:15:10,410
probably have a bunch of ng modules each

00:15:08,490 --> 00:15:11,760
ng module has a bunch of components so

00:15:10,410 --> 00:15:14,160
there's a hundred libraries a thousand

00:15:11,760 --> 00:15:15,660
components let's talk about what the

00:15:14,160 --> 00:15:17,579
what the build should look like before I

00:15:15,660 --> 00:15:20,250
actually show the demo so if I edit one

00:15:17,579 --> 00:15:21,779
of the leaves here we I mentioned

00:15:20,250 --> 00:15:23,579
incrementality what should need to be

00:15:21,779 --> 00:15:25,560
rerun let's say that I just I'm gonna

00:15:23,579 --> 00:15:27,089
edit that by adding a console error line

00:15:25,560 --> 00:15:28,620
to the end of the file so it doesn't

00:15:27,089 --> 00:15:30,180
change the typescript type shape of this

00:15:28,620 --> 00:15:31,920
file at all that means I don't need to

00:15:30,180 --> 00:15:33,510
type check anything up the graph and

00:15:31,920 --> 00:15:35,550
it's a little bit of an internal detail

00:15:33,510 --> 00:15:37,200
but we use the the typescript DTS files

00:15:35,550 --> 00:15:38,640
as these dependency edges which means

00:15:37,200 --> 00:15:41,790
that the only thing I expect to have to

00:15:38,640 --> 00:15:42,839
happen is to rerun this one test when I

00:15:41,790 --> 00:15:44,370
change this component shouldn't have to

00:15:42,839 --> 00:15:47,850
rebuild touch any of the other nodes in

00:15:44,370 --> 00:15:51,000
the graph this is the this is the timing

00:15:47,850 --> 00:15:52,290
that we'll see when I run energy test so

00:15:51,000 --> 00:15:54,390
this is the non incremental bill this is

00:15:52,290 --> 00:15:57,300
even if we don't have if we have to

00:15:54,390 --> 00:15:58,860
build everything since basil is always a

00:15:57,300 --> 00:16:00,540
OT we don't have to run the angular

00:15:58,860 --> 00:16:02,670
compiler inside of karma so that gives

00:16:00,540 --> 00:16:04,500
us a speed-up and also we can shard the

00:16:02,670 --> 00:16:07,070
the tests among more processes than we

00:16:04,500 --> 00:16:07,070
than we do today

00:16:07,290 --> 00:16:10,910
so let me hopefully I have to look down

00:16:10,320 --> 00:16:14,310
here

00:16:10,910 --> 00:16:15,390
okay so I've pre-recorded a video

00:16:14,310 --> 00:16:19,829
because when you don't get a lot of

00:16:15,390 --> 00:16:21,930
sleep you don't do a live demo so here

00:16:19,829 --> 00:16:24,570
I'm in the large branch of the example

00:16:21,930 --> 00:16:26,130
repo let me make this bigger and so I'm

00:16:24,570 --> 00:16:28,529
running ng tests so what happens the

00:16:26,130 --> 00:16:29,850
first time I run ng test is there should

00:16:28,529 --> 00:16:31,620
be nothing to do because I haven't made

00:16:29,850 --> 00:16:33,060
any changes to my app yet so this

00:16:31,620 --> 00:16:35,370
instant ng test is what you should

00:16:33,060 --> 00:16:37,589
expect to happen most of the time now

00:16:35,370 --> 00:16:39,300
I've done a console error and I've you

00:16:37,589 --> 00:16:40,709
know one of these thousand components I

00:16:39,300 --> 00:16:43,110
just suck it at the end in order to make

00:16:40,709 --> 00:16:44,399
the the graph dirty you can imagine what

00:16:43,110 --> 00:16:45,630
Basil's doing here similar to angular's

00:16:44,399 --> 00:16:47,339
change detection it needs to walk this

00:16:45,630 --> 00:16:48,600
graph and figure out for any node whose

00:16:47,339 --> 00:16:51,870
input has changed I have to reevaluate

00:16:48,600 --> 00:16:52,980
it and so just this test was affected

00:16:51,870 --> 00:16:54,480
this test is running and you can see

00:16:52,980 --> 00:16:56,520
basil already had a hundred tests that

00:16:54,480 --> 00:16:57,930
had been reported as passed now the

00:16:56,520 --> 00:17:00,000
final thing I'm going to do I'm making

00:16:57,930 --> 00:17:02,850
an edit here to this material module and

00:17:00,000 --> 00:17:04,410
the material module is sort of my design

00:17:02,850 --> 00:17:05,970
system for all of my components and so

00:17:04,410 --> 00:17:07,890
everything depends on this material

00:17:05,970 --> 00:17:10,470
module when I change this what do we

00:17:07,890 --> 00:17:13,890
expect to happen we're gonna all the

00:17:10,470 --> 00:17:15,809
tests are affected and basil is as I is

00:17:13,890 --> 00:17:17,610
able to run these in parallel using

00:17:15,809 --> 00:17:19,079
multiple processes but I only have four

00:17:17,610 --> 00:17:20,579
processors on this machine and so by

00:17:19,079 --> 00:17:22,470
default basil will only run four of the

00:17:20,579 --> 00:17:25,439
processes at a time and this is still

00:17:22,470 --> 00:17:28,919
kind of too slow so let's talk about how

00:17:25,439 --> 00:17:29,970
we're going to make that faster and I'm

00:17:28,919 --> 00:17:31,200
gonna move this little picture in

00:17:29,970 --> 00:17:33,809
picture so you can watch that thing

00:17:31,200 --> 00:17:35,070
happen in the background if it works mmm

00:17:33,809 --> 00:17:38,010
doesn't seem to work here it worked when

00:17:35,070 --> 00:17:38,880
I was on my local screen okay so what I

00:17:38,010 --> 00:17:40,559
showed this number when you're first

00:17:38,880 --> 00:17:43,020
build was cached there right I didn't

00:17:40,559 --> 00:17:44,190
have any work to do let's say that you

00:17:43,020 --> 00:17:45,570
come in in the morning and you synced

00:17:44,190 --> 00:17:47,550
ahead and you run a build how can that

00:17:45,570 --> 00:17:48,860
build be cached so we can actually host

00:17:47,550 --> 00:17:50,960
the cache in the cloud

00:17:48,860 --> 00:17:52,280
and then you can share cash hits with

00:17:50,960 --> 00:17:53,990
your co-workers and with your CI

00:17:52,280 --> 00:17:55,429
probably when you come in in the morning

00:17:53,990 --> 00:17:57,049
and sing to head your CI already ran all

00:17:55,429 --> 00:17:58,940
the tests there this is a great way to

00:17:57,049 --> 00:18:00,350
speed you up but then when we have a

00:17:58,940 --> 00:18:02,150
cache miss like the one where I edited

00:18:00,350 --> 00:18:03,320
the material module we have a massive

00:18:02,150 --> 00:18:05,030
cache miss there's actually a lot of

00:18:03,320 --> 00:18:07,280
compute to do in arc and our build in CI

00:18:05,030 --> 00:18:08,990
becomes compute bound and so what we

00:18:07,280 --> 00:18:12,670
really want to do is be able to host all

00:18:08,990 --> 00:18:16,130
of those all that work in the cloud so

00:18:12,670 --> 00:18:18,049
when we add remote build execution which

00:18:16,130 --> 00:18:19,970
is a service that Google Cloud provides

00:18:18,049 --> 00:18:21,380
that is a back-end for basil that can

00:18:19,970 --> 00:18:23,720
that can bring up a lot of workers and

00:18:21,380 --> 00:18:28,250
spawn and spawn all these tests remotely

00:18:23,720 --> 00:18:31,929
we see the time goes down even more so

00:18:28,250 --> 00:18:34,130
let me show what that looks like notice

00:18:31,929 --> 00:18:35,690
here's our here's our here's our one

00:18:34,130 --> 00:18:39,049
running locally still sitting there

00:18:35,690 --> 00:18:45,169
trying so I'm gonna play this video and

00:18:39,049 --> 00:18:47,480
in this one I've added one line to my

00:18:45,169 --> 00:18:49,370
basil RC file since basil follows the

00:18:47,480 --> 00:18:51,020
UNIX philosophy uses RC files as your

00:18:49,370 --> 00:18:52,580
configuration and I'm saying config

00:18:51,020 --> 00:18:53,630
equals remote which means I'm turning on

00:18:52,580 --> 00:18:55,220
some options that are going to tell

00:18:53,630 --> 00:18:57,410
basil that there's a cloud of machines

00:18:55,220 --> 00:18:59,270
available to run on so my first build

00:18:57,410 --> 00:19:00,770
again was incremental although in this

00:18:59,270 --> 00:19:03,320
case it was coming from a cloud cache

00:19:00,770 --> 00:19:04,910
and not from my local cache so I was

00:19:03,320 --> 00:19:06,830
taking advantage of the fact that the CI

00:19:04,910 --> 00:19:08,179
has already run these tests and now when

00:19:06,830 --> 00:19:09,830
I edit this material module what do we

00:19:08,179 --> 00:19:11,900
expect to happen so first we have to

00:19:09,830 --> 00:19:14,600
compile the first node in the graph

00:19:11,900 --> 00:19:16,549
which is this material module itself

00:19:14,600 --> 00:19:18,890
where I've made the Edit and then basil

00:19:16,549 --> 00:19:20,750
is going to spawn all of the tests at

00:19:18,890 --> 00:19:22,160
the same time because I have a hundred I

00:19:20,750 --> 00:19:24,980
think I have a hundred and fifty workers

00:19:22,160 --> 00:19:26,600
in the cloud this is exactly the same

00:19:24,980 --> 00:19:28,580
behavior that Brad mentioned in the

00:19:26,600 --> 00:19:30,290
keynote where angular zone build where

00:19:28,580 --> 00:19:33,200
we are using remote build execution for

00:19:30,290 --> 00:19:35,390
C I went from 60 minutes to seven and a

00:19:33,200 --> 00:19:36,980
half because we were able to use 150

00:19:35,390 --> 00:19:41,059
machines in the cloud to paralyze the

00:19:36,980 --> 00:19:43,340
work so just to cheat on time a little

00:19:41,059 --> 00:19:46,070
bit because I have 20 seconds left let's

00:19:43,340 --> 00:19:47,210
skip skip skip obviously all of these

00:19:46,070 --> 00:19:48,500
things start to complete the number of

00:19:47,210 --> 00:19:49,790
actions running concurrently drops off

00:19:48,500 --> 00:19:52,490
because basil hasn't no more work to do

00:19:49,790 --> 00:19:53,660
and then it's finished so if we compare

00:19:52,490 --> 00:19:56,650
that with what's going on with the local

00:19:53,660 --> 00:19:58,730
build it's still it's still way behind

00:19:56,650 --> 00:20:02,260
actually it looks like I paused that

00:19:58,730 --> 00:20:02,260
video but it would still be behind

00:20:03,779 --> 00:20:08,619
okay so let's talk about the future very

00:20:06,249 --> 00:20:10,629
quickly so after version eight we want

00:20:08,619 --> 00:20:12,159
to finish this the Stephen steps of

00:20:10,629 --> 00:20:13,359
maturity for an angular feature so we

00:20:12,159 --> 00:20:15,909
want to get to automatic what does that

00:20:13,359 --> 00:20:17,799
look like we need to have basil be

00:20:15,909 --> 00:20:19,479
released as 1.0 which is currently

00:20:17,799 --> 00:20:21,339
planned for September

00:20:19,479 --> 00:20:23,439
once basil is 1.0 we want our nodejs

00:20:21,339 --> 00:20:25,299
support to also go to a stable release

00:20:23,439 --> 00:20:27,459
we need to graduate from angular labs

00:20:25,299 --> 00:20:29,799
and feel that we can commit to a stable

00:20:27,459 --> 00:20:31,689
API for how the basil rules work and

00:20:29,799 --> 00:20:33,279
then we want to make it much easier to

00:20:31,689 --> 00:20:35,559
do the scale-up steps like I showed in

00:20:33,279 --> 00:20:36,669
this graph sorry the large graph of the

00:20:35,559 --> 00:20:38,469
large application that was all

00:20:36,669 --> 00:20:39,609
configured manually and we want to be

00:20:38,469 --> 00:20:42,939
able to do that automatically so that

00:20:39,609 --> 00:20:44,469
basil can automatically scale up very

00:20:42,939 --> 00:20:45,969
briefly you might remember when we

00:20:44,469 --> 00:20:47,919
introduced typescript and it seemed

00:20:45,969 --> 00:20:49,989
controversial at the time but we really

00:20:47,919 --> 00:20:52,509
felt that typescript gave angular a big

00:20:49,989 --> 00:20:54,249
advantage in being able to enable your

00:20:52,509 --> 00:20:55,869
development workflows we think that

00:20:54,249 --> 00:20:57,069
basil is a similarly big bet it's not

00:20:55,869 --> 00:21:00,219
obvious that this is something that the

00:20:57,069 --> 00:21:01,599
JavaScript ecosystem needs but we think

00:21:00,219 --> 00:21:03,039
that especially as angular is trying to

00:21:01,599 --> 00:21:04,899
become more of a full-stack platform and

00:21:03,039 --> 00:21:06,219
we're working with our new sister team

00:21:04,899 --> 00:21:08,079
at Google on doing more server-side

00:21:06,219 --> 00:21:09,699
rendering scenarios we need to be able

00:21:08,079 --> 00:21:11,289
to think of angular deployments as being

00:21:09,699 --> 00:21:12,519
both client and server and so having a

00:21:11,289 --> 00:21:14,529
full stack build system like this we

00:21:12,519 --> 00:21:16,089
think will give us a big advantage and

00:21:14,529 --> 00:21:18,099
we've wanted to be non-breaking unlike

00:21:16,089 --> 00:21:19,649
when we introduced typescript so we

00:21:18,099 --> 00:21:21,819
think this one will be better

00:21:19,649 --> 00:21:23,499
basil data angler Daioh is our landing

00:21:21,819 --> 00:21:25,149
page there are a bunch of resources here

00:21:23,499 --> 00:21:26,669
you can find a link to RBE the remote

00:21:25,149 --> 00:21:28,599
build execution if you want to try that

00:21:26,669 --> 00:21:30,009
documentation is here you can subscribe

00:21:28,599 --> 00:21:32,229
for updates we'll let you know as we

00:21:30,009 --> 00:21:33,819
make more progress the example app and

00:21:32,229 --> 00:21:35,349
you can also find links to this talk and

00:21:33,819 --> 00:21:36,999
a bunch of other basil talks to help

00:21:35,349 --> 00:21:38,669
explain a lot of the other concepts that

00:21:36,999 --> 00:21:41,280
I breezed through as quickly as possible

00:21:38,669 --> 00:21:45,930
that's all I have thank you very much

00:21:41,280 --> 00:21:45,930
[Applause]

00:21:49,750 --> 00:21:56,369
[Music]

00:22:01,960 --> 00:22:04,020

YouTube URL: https://www.youtube.com/watch?v=J1lnp-nU4wM


