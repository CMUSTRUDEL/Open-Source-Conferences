Title: Web Components with Angular Elements: Beyond the Basics |  Manfred Steyer
Publication date: 2019-05-02
Playlist: ng-conf 2019
Description: 
	In a snap Angular Elements provides Angular components as framework-independent web components.

But it is only later that the really interesting questions arise: What options are there for bundling Angular Elements and how does one deal with dependencies? Which polyfills do we need and when, and how can we lazy load Angular Elements on demand? How can ngIvy help us? What should be considered regarding zone.js and change tracking and how to use content projection?

This session answers these questions in order to help you benefit from Angular Elements in your projects.



Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:07,920 --> 00:00:11,170
[Music]

00:00:12,139 --> 00:00:18,240
let me start with a question did you

00:00:15,059 --> 00:00:21,210
have recently had a fine dinner a nice

00:00:18,240 --> 00:00:24,210
rest around several classes nice

00:00:21,210 --> 00:00:26,699
starters a nice main menu and of course

00:00:24,210 --> 00:00:30,660
the most important parts desert

00:00:26,699 --> 00:00:33,450
I really like desert so if you ask me

00:00:30,660 --> 00:00:36,480
Angola itself is a lot like this dinner

00:00:33,450 --> 00:00:38,879
it contains a lot of things a lot of

00:00:36,480 --> 00:00:41,370
courses probably more than you can eat

00:00:38,879 --> 00:00:44,730
and everything you need for your full

00:00:41,370 --> 00:00:48,030
flexing of each application I don't know

00:00:44,730 --> 00:00:49,140
about you but I do not eat a fine Tina

00:00:48,030 --> 00:00:52,860
every evening

00:00:49,140 --> 00:00:55,289
mostly because of a lack of time and so

00:00:52,860 --> 00:00:58,739
sometimes everything I want to have is

00:00:55,289 --> 00:01:02,550
just a greasy pizza just a greasy greasy

00:00:58,739 --> 00:01:04,589
pizza and when we take this metaphor and

00:01:02,550 --> 00:01:07,110
when we transfer it in the world of

00:01:04,589 --> 00:01:09,990
Angola we will find out that we don't

00:01:07,110 --> 00:01:13,140
need a full flexing LePage application

00:01:09,990 --> 00:01:16,500
all the time sometimes everything we

00:01:13,140 --> 00:01:18,600
need is just a component and that's why

00:01:16,500 --> 00:01:21,689
the angular team created angular

00:01:18,600 --> 00:01:24,270
elements angular elements is about

00:01:21,689 --> 00:01:27,659
providing web components which are

00:01:24,270 --> 00:01:29,790
framework independent components you can

00:01:27,659 --> 00:01:33,210
write them once and reuse them

00:01:29,790 --> 00:01:35,820
everywhere to be more precise it is not

00:01:33,210 --> 00:01:38,490
directly about web components because

00:01:35,820 --> 00:01:41,009
web components is an umbrella term it is

00:01:38,490 --> 00:01:43,680
about the most important standards

00:01:41,009 --> 00:01:46,770
behind web components namely custom

00:01:43,680 --> 00:01:50,939
elements which is implemented by all the

00:01:46,770 --> 00:01:53,670
modern browsers nowadays this brings a

00:01:50,939 --> 00:01:56,130
lot of possibilities one possibility is

00:01:53,670 --> 00:01:59,310
you can create a component library you

00:01:56,130 --> 00:02:02,159
are able to reuse everywhere you can

00:01:59,310 --> 00:02:04,860
also enrich existing applications for

00:02:02,159 --> 00:02:08,310
instance your PHP application your

00:02:04,860 --> 00:02:11,760
asp.net application or your chava server

00:02:08,310 --> 00:02:13,650
faces application you can also enrich

00:02:11,760 --> 00:02:16,280
CMS based website

00:02:13,650 --> 00:02:19,650
and you can dynamically loads them

00:02:16,280 --> 00:02:24,180
dynamic loading has never ever been that

00:02:19,650 --> 00:02:27,420
easy as with web components and this is

00:02:24,180 --> 00:02:30,120
what this talk is about first of all I

00:02:27,420 --> 00:02:33,030
will show you some basics to get

00:02:30,120 --> 00:02:35,670
everyone into the boat I promise I will

00:02:33,030 --> 00:02:38,459
just invest one slide into this because

00:02:35,670 --> 00:02:40,440
I have promised to talk about advanced

00:02:38,459 --> 00:02:43,349
stuff and then we will talk about

00:02:40,440 --> 00:02:46,410
dynamic early acting elements as well as

00:02:43,349 --> 00:02:48,690
lazy loading them and then we will try

00:02:46,410 --> 00:02:51,480
to push the boarder of what's currently

00:02:48,690 --> 00:02:55,200
supported we will try to use external

00:02:51,480 --> 00:02:57,720
elements and I will also talk about the

00:02:55,200 --> 00:03:01,290
most important topic here its bundle

00:02:57,720 --> 00:03:03,239
size but first let me introduce myself I

00:03:01,290 --> 00:03:05,609
am manfred I'm a trainer and consultant

00:03:03,239 --> 00:03:08,069
for angular I'm helping a lot of

00:03:05,609 --> 00:03:10,700
companies nowadays I am part of the

00:03:08,069 --> 00:03:13,950
Google developer expert team and of the

00:03:10,700 --> 00:03:16,430
collaborators team my current product is

00:03:13,950 --> 00:03:19,470
also about angular it's a workshop for

00:03:16,430 --> 00:03:21,630
angular and architectures in the end the

00:03:19,470 --> 00:03:25,169
prize it contains a lot of advanced

00:03:21,630 --> 00:03:25,769
stuff ok let's get started with the

00:03:25,169 --> 00:03:28,829
basics

00:03:25,769 --> 00:03:31,829
as promised just one slides so angular

00:03:28,829 --> 00:03:34,849
elements is just about wrapping angular

00:03:31,829 --> 00:03:37,799
components it means you take an ordinary

00:03:34,849 --> 00:03:40,950
angular component you call this function

00:03:37,799 --> 00:03:44,040
here this function great called create

00:03:40,950 --> 00:03:46,769
custom element and this function exposes

00:03:44,040 --> 00:03:49,319
a custom element that means your angular

00:03:46,769 --> 00:03:52,530
component goes in the custom element

00:03:49,319 --> 00:03:55,590
goes out and then you can register this

00:03:52,530 --> 00:03:56,190
custom element with this browser API

00:03:55,590 --> 00:03:58,620
called

00:03:56,190 --> 00:04:01,769
custom elements define and now the

00:03:58,620 --> 00:04:04,079
browser can just render your component

00:04:01,769 --> 00:04:06,359
it is as easy as that

00:04:04,079 --> 00:04:09,959
to get started with standard conformed

00:04:06,359 --> 00:04:12,109
components so now let's talk about the

00:04:09,959 --> 00:04:15,269
first advanced topic let's talk about

00:04:12,109 --> 00:04:18,090
dynamic elements the named aquila

00:04:15,269 --> 00:04:21,380
creating a element is really easy you

00:04:18,090 --> 00:04:23,969
can leverage this 20 year old API

00:04:21,380 --> 00:04:26,580
document create element perhaps you

00:04:23,969 --> 00:04:27,090
remember it and normally you are putting

00:04:26,580 --> 00:04:29,330
in

00:04:27,090 --> 00:04:33,930
you're the name of a baked in element

00:04:29,330 --> 00:04:36,630
table image form something like this but

00:04:33,930 --> 00:04:39,210
the nice thing about elements is that

00:04:36,630 --> 00:04:41,729
the browser treats them exactly like

00:04:39,210 --> 00:04:44,639
baked in elements so you can use the

00:04:41,729 --> 00:04:47,570
same API to create your own custom

00:04:44,639 --> 00:04:50,820
element in this case it is a - bottle

00:04:47,570 --> 00:04:53,550
then you can use the same old API to

00:04:50,820 --> 00:04:57,030
define properties to define attributes

00:04:53,550 --> 00:04:59,550
to hook up even listeners and finally

00:04:57,030 --> 00:05:02,430
you can add it to another element so it

00:04:59,550 --> 00:05:05,580
gets displayed perhaps you are saying

00:05:02,430 --> 00:05:08,100
now hey man threads what we do to you -

00:05:05,580 --> 00:05:11,370
here you are using the document object

00:05:08,100 --> 00:05:15,300
it is kind of forbidden in Angola well

00:05:11,370 --> 00:05:18,360
yes and no so in the past a drawback of

00:05:15,300 --> 00:05:21,240
this was that the document element does

00:05:18,360 --> 00:05:23,970
not exist for server-side rendering but

00:05:21,240 --> 00:05:26,669
since some versions Angola is using

00:05:23,970 --> 00:05:29,280
terminal to simulate this document

00:05:26,669 --> 00:05:32,669
object on the server side and so you are

00:05:29,280 --> 00:05:35,010
on the safe side with this of course I'm

00:05:32,669 --> 00:05:37,520
not recommending to do this every time

00:05:35,010 --> 00:05:42,000
but when it comes to highly dynamic

00:05:37,520 --> 00:05:46,190
scenarios this really comes in handy let

00:05:42,000 --> 00:05:46,190
me show you and Emin stration for this I

00:05:47,120 --> 00:05:52,470
have prepared this sample application

00:05:49,889 --> 00:05:55,320
with a dashboard and when I'm clicking

00:05:52,470 --> 00:05:57,690
here then just my dashboard tile is

00:05:55,320 --> 00:06:00,660
dynamically created it is dynamically

00:05:57,690 --> 00:06:03,930
added to my page and this is really fun

00:06:00,660 --> 00:06:07,650
hey I could do this the whole day yeah

00:06:03,930 --> 00:06:11,070
nice so I will show you more regarding

00:06:07,650 --> 00:06:13,320
this demonstration in some minutes let's

00:06:11,070 --> 00:06:16,889
go one step further let's talk about

00:06:13,320 --> 00:06:19,289
lazy loading by the way a good friend of

00:06:16,889 --> 00:06:23,820
mine told me I'm very authentic when

00:06:19,289 --> 00:06:26,520
talking about lazy things I'm not sure

00:06:23,820 --> 00:06:30,030
what he meant but I think it was some

00:06:26,520 --> 00:06:32,729
kind of compliment anyway so normally

00:06:30,030 --> 00:06:35,909
when we talk about lazy loading we are

00:06:32,729 --> 00:06:38,190
talking about lazy loading routes but

00:06:35,909 --> 00:06:40,390
here it is not about routes here it is

00:06:38,190 --> 00:06:42,880
just about lazily loading

00:06:40,390 --> 00:06:46,450
bounine and this can be done in two

00:06:42,880 --> 00:06:49,180
steps first of all you have to register

00:06:46,450 --> 00:06:51,940
your module with the lazy component in

00:06:49,180 --> 00:06:55,120
your angle Acheson and then you can use

00:06:51,940 --> 00:06:58,480
the ng module factory loader to load it

00:06:55,120 --> 00:07:00,760
just on demand let's have a look to the

00:06:58,480 --> 00:07:03,220
code this is what it looks like

00:07:00,760 --> 00:07:05,680
when you register the module in question

00:07:03,220 --> 00:07:08,860
in your angular Jason there is just a

00:07:05,680 --> 00:07:11,500
property lazy modules and here you puts

00:07:08,860 --> 00:07:14,110
the path of your module and then you

00:07:11,500 --> 00:07:16,870
need some code for loading it for this

00:07:14,110 --> 00:07:19,930
year I'm using a service this service

00:07:16,870 --> 00:07:23,200
gets the ng module factory loader

00:07:19,930 --> 00:07:25,990
injected it gets a method with a

00:07:23,200 --> 00:07:28,480
constant path it is also pointing to my

00:07:25,990 --> 00:07:32,230
module in question and then I'm calling

00:07:28,480 --> 00:07:34,090
load a load I guess this is what what

00:07:32,230 --> 00:07:36,520
happens when you are taking object

00:07:34,090 --> 00:07:39,040
orientation too seriously you are ending

00:07:36,520 --> 00:07:41,350
up with load a load the buckety back

00:07:39,040 --> 00:07:44,200
lock a lock here it is load a load I'm

00:07:41,350 --> 00:07:47,530
passing the buff and I'm getting back a

00:07:44,200 --> 00:07:50,410
module factory and this module factory

00:07:47,530 --> 00:07:55,240
has a create method and when I'm calling

00:07:50,410 --> 00:07:58,180
it's my module is instantiated as this

00:07:55,240 --> 00:08:00,970
module is providing custom elements I

00:07:58,180 --> 00:08:03,430
can use them immediately just by

00:08:00,970 --> 00:08:06,660
leveraging the document object we have

00:08:03,430 --> 00:08:09,910
seen before it is really as easy as that

00:08:06,660 --> 00:08:12,820
without custom elements this is far more

00:08:09,910 --> 00:08:15,100
difficult without custom elements we

00:08:12,820 --> 00:08:18,220
would now have to leverage some

00:08:15,100 --> 00:08:20,790
low-level api of angola but here we are

00:08:18,220 --> 00:08:25,410
good to go just use the document object

00:08:20,790 --> 00:08:29,020
so let me also show you this in action

00:08:25,410 --> 00:08:34,930
here I have my dashboard again let's

00:08:29,020 --> 00:08:38,440
reload it and if I click on at lacy my

00:08:34,930 --> 00:08:40,870
lazy tile is just added let me prove

00:08:38,440 --> 00:08:46,440
that lazy loading took happen for this

00:08:40,870 --> 00:08:51,100
I'm switching to my network tap to my

00:08:46,440 --> 00:08:54,200
network tap come on here it is I am

00:08:51,100 --> 00:08:57,320
pressing at lazy and here we go

00:08:54,200 --> 00:09:00,440
yeah this is my lazy bundle it is quite

00:08:57,320 --> 00:09:02,930
big the seal I created it for me after

00:09:00,440 --> 00:09:05,630
registering the module with the Angola

00:09:02,930 --> 00:09:08,990
Jason and as you see here it has quite a

00:09:05,630 --> 00:09:11,930
big name but no berries this is just in

00:09:08,990 --> 00:09:14,000
the back mode in production mode it has

00:09:11,930 --> 00:09:17,480
a tiny name in production mode it just

00:09:14,000 --> 00:09:20,649
becomes a number then we look at the

00:09:17,480 --> 00:09:24,350
bundle size we also see it is quite tiny

00:09:20,649 --> 00:09:26,149
7.7 K and this is in debug mode so in

00:09:24,350 --> 00:09:29,420
production mode it would be about the

00:09:26,149 --> 00:09:32,839
half so this is quite okay if you ask me

00:09:29,420 --> 00:09:38,240
please keep this in mind for later we

00:09:32,839 --> 00:09:41,060
will need this number a bit later okay

00:09:38,240 --> 00:09:43,490
let's go one step further let's talk

00:09:41,060 --> 00:09:46,100
about external elements this is where I

00:09:43,490 --> 00:09:48,680
try to push the limitations of things

00:09:46,100 --> 00:09:51,820
that are possible or at least official

00:09:48,680 --> 00:09:54,920
supported nowadays so when I speak about

00:09:51,820 --> 00:09:57,829
external elements it is about having a

00:09:54,920 --> 00:10:01,760
first project with some custom elements

00:09:57,829 --> 00:10:04,310
your widgets or your things you need for

00:10:01,760 --> 00:10:06,980
your design system then I want to

00:10:04,310 --> 00:10:09,890
compile those elements to a bundle and

00:10:06,980 --> 00:10:12,260
after that I want to reuse this bundle

00:10:09,890 --> 00:10:15,170
with several other projects by loading

00:10:12,260 --> 00:10:17,540
it perhaps a load a dynamically or I

00:10:15,170 --> 00:10:20,660
load it just when the application starts

00:10:17,540 --> 00:10:23,810
as mentioned before this is currently

00:10:20,660 --> 00:10:27,649
not officially supported and I will show

00:10:23,810 --> 00:10:29,660
you why in some minutes but if we wanted

00:10:27,649 --> 00:10:32,750
to do this nowadays we needed three

00:10:29,660 --> 00:10:35,120
steps first of all we needed to create

00:10:32,750 --> 00:10:37,970
an own application that just contains

00:10:35,120 --> 00:10:40,250
the custom elements and then we have to

00:10:37,970 --> 00:10:43,069
compile everything to a self-contained

00:10:40,250 --> 00:10:46,250
bundle and this bundle can then below

00:10:43,069 --> 00:10:50,529
that into our consuming application I am

00:10:46,250 --> 00:10:53,810
just calling it the consumer you and

00:10:50,529 --> 00:10:56,839
when you do this when you compile your

00:10:53,810 --> 00:10:59,329
application with the custom elements

00:10:56,839 --> 00:11:02,800
it looks normally like this cinder CLI

00:10:59,329 --> 00:11:06,080
you are getting five or more bundles

00:11:02,800 --> 00:11:09,260
five or more bundles

00:11:06,080 --> 00:11:12,230
so this is okayish for a full flexing

00:11:09,260 --> 00:11:15,920
debate application this is not okay for

00:11:12,230 --> 00:11:19,610
a tiny element for a tiny widget for a

00:11:15,920 --> 00:11:22,190
dashpot I'll no one will buy this so

00:11:19,610 --> 00:11:25,490
what we need is some way to get just one

00:11:22,190 --> 00:11:28,279
bundle and there are several workarounds

00:11:25,490 --> 00:11:30,320
for this I have provided one I have

00:11:28,279 --> 00:11:32,870
provided one using the open source

00:11:30,320 --> 00:11:36,110
project ngx build plus which is

00:11:32,870 --> 00:11:38,630
extending the CLI it is teaching the CLI

00:11:36,110 --> 00:11:41,450
new tricks and you can install it that

00:11:38,630 --> 00:11:44,240
way just and she adds it to your project

00:11:41,450 --> 00:11:46,760
and when you did this you have this

00:11:44,240 --> 00:11:48,920
single bundle flag and this single

00:11:46,760 --> 00:11:52,790
bundle flag is doing what it is supposed

00:11:48,920 --> 00:11:56,089
to do it produces just one single bundle

00:11:52,790 --> 00:11:59,480
you can then load into your consuming

00:11:56,089 --> 00:12:01,670
application when it comes to script

00:11:59,480 --> 00:12:04,430
loading there are several script loaders

00:12:01,670 --> 00:12:08,000
out there here you see the most simple

00:12:04,430 --> 00:12:10,459
one it is just creating a script deck in

00:12:08,000 --> 00:12:12,800
a dynamic fashion it is assigning the

00:12:10,459 --> 00:12:15,230
source the source is pointing to the

00:12:12,800 --> 00:12:18,440
bundling question and then the script

00:12:15,230 --> 00:12:20,720
tag is added to your page so let's have

00:12:18,440 --> 00:12:26,779
a look at this in my - plots

00:12:20,720 --> 00:12:32,630
demonstration so here I'm clicking on

00:12:26,779 --> 00:12:35,990
add external and hey my external tile is

00:12:32,630 --> 00:12:38,930
loaded very nice it is really also

00:12:35,990 --> 00:12:41,329
loaded on the mount you see it here it

00:12:38,930 --> 00:12:44,000
just entered the browser then I click

00:12:41,329 --> 00:12:45,800
this button but you will also see

00:12:44,000 --> 00:12:48,470
something that is not funny when you

00:12:45,800 --> 00:12:52,910
look at the bundle size as even you look

00:12:48,470 --> 00:12:54,190
at the bundle sizes do you notice the

00:12:52,910 --> 00:13:01,040
difference

00:12:54,190 --> 00:13:06,500
so our lazy bundle just at 7.7 K and our

00:13:01,040 --> 00:13:10,279
external bundle had 427 K which is a bit

00:13:06,500 --> 00:13:13,130
of a difference and now think about

00:13:10,279 --> 00:13:15,709
having not just one of those bundles now

00:13:13,130 --> 00:13:18,050
think about having several of those

00:13:15,709 --> 00:13:21,769
bundles this would not work for

00:13:18,050 --> 00:13:25,160
a highly scalable application so we need

00:13:21,769 --> 00:13:28,149
something better and this leads me to

00:13:25,160 --> 00:13:33,579
the last topic of this presentation

00:13:28,149 --> 00:13:37,970
where I want to talk about bundle sizes

00:13:33,579 --> 00:13:41,380
so what happens here as a matter of fact

00:13:37,970 --> 00:13:44,360
each and every bundle got it own

00:13:41,380 --> 00:13:46,430
dependencies its own libraries each and

00:13:44,360 --> 00:13:50,209
every bundle with custom elements gets

00:13:46,430 --> 00:13:53,570
its own angular version its own our X

00:13:50,209 --> 00:13:55,850
chest and so on and so forth and I don't

00:13:53,570 --> 00:13:59,180
know about you but I think that's

00:13:55,850 --> 00:14:02,029
loading angular several times is not a

00:13:59,180 --> 00:14:05,870
good idea so we need something bad here

00:14:02,029 --> 00:14:10,850
and one solution to this issue can be

00:14:05,870 --> 00:14:14,180
perhaps IV so at least in theory IV will

00:14:10,850 --> 00:14:17,120
solve this issue because IV is capable

00:14:14,180 --> 00:14:20,060
of compiling your codes down to

00:14:17,120 --> 00:14:24,230
something that is very close to dome and

00:14:20,060 --> 00:14:26,690
JavaScript we will see in some seconds

00:14:24,230 --> 00:14:29,029
in which circumstances this will work

00:14:26,690 --> 00:14:31,220
and in which circumstances this won't

00:14:29,029 --> 00:14:33,829
work but I think we all know these

00:14:31,220 --> 00:14:36,740
statistics where the angular team showed

00:14:33,829 --> 00:14:39,740
us the potential of IB so that it is

00:14:36,740 --> 00:14:43,520
able to compile everything down to very

00:14:39,740 --> 00:14:47,320
tiny tiny bundles not much of angular

00:14:43,520 --> 00:14:50,720
will remain here this is one solution

00:14:47,320 --> 00:14:53,420
saying this the IV integration is a post

00:14:50,720 --> 00:14:57,200
angular 8 thing it will come after

00:14:53,420 --> 00:14:59,839
Angola 8 but when it comes then the

00:14:57,200 --> 00:15:02,930
question is then can it help and the

00:14:59,839 --> 00:15:05,899
answer is it can mainly help with you I

00:15:02,930 --> 00:15:09,110
based widgets with jets that are using

00:15:05,899 --> 00:15:11,420
ng if ng 4 and she style and data

00:15:09,110 --> 00:15:14,839
binding then you are on the safe side

00:15:11,420 --> 00:15:17,500
with IV then this can down levels to

00:15:14,839 --> 00:15:21,680
code that is very close to JavaScript

00:15:17,500 --> 00:15:25,250
when it comes to libraries Ivy will not

00:15:21,680 --> 00:15:28,060
help much because Ivy cannot make your

00:15:25,250 --> 00:15:31,190
library disappear when you have a big

00:15:28,060 --> 00:15:31,699
authentication library the angular Alta

00:15:31,190 --> 00:15:34,189
or

00:15:31,699 --> 00:15:37,069
if you have something like let's say a

00:15:34,189 --> 00:15:40,279
Bitcoin algorithm it cannot make this

00:15:37,069 --> 00:15:42,439
library disappear it can just try to do

00:15:40,279 --> 00:15:46,459
tree shaking but this is everything the

00:15:42,439 --> 00:15:48,259
CLI is capable of to do so when you are

00:15:46,459 --> 00:15:48,919
using UI based which hits you on the

00:15:48,259 --> 00:15:50,899
safe side

00:15:48,919 --> 00:15:54,019
BIF libraries you need something more

00:15:50,899 --> 00:15:56,449
and in this case you could try to share

00:15:54,019 --> 00:15:59,839
your libraries this is what you have

00:15:56,449 --> 00:16:02,179
done with jQuery you have loaded jQuery

00:15:59,839 --> 00:16:05,689
once and then all the other libraries

00:16:02,179 --> 00:16:08,540
have reused jQuery which was sitting in

00:16:05,689 --> 00:16:11,239
the global window object this can be

00:16:08,540 --> 00:16:14,569
done here it is not officially supported

00:16:11,239 --> 00:16:16,790
by the CLI but my community project and

00:16:14,569 --> 00:16:20,839
she expelled brass provides a solution

00:16:16,790 --> 00:16:23,480
for this saying this there are also some

00:16:20,839 --> 00:16:26,119
drawbacks it increases the complexity

00:16:23,480 --> 00:16:29,449
and you will end up with a non-default

00:16:26,119 --> 00:16:32,569
built so please just use it when you

00:16:29,449 --> 00:16:37,399
really really need it otherwise you will

00:16:32,569 --> 00:16:40,609
just blow up your complexity okay so let

00:16:37,399 --> 00:16:43,759
me sum up we have seen that we can reuse

00:16:40,609 --> 00:16:46,579
angular elements with other technologies

00:16:43,759 --> 00:16:49,549
we have seen that we can turn Amica li

00:16:46,579 --> 00:16:52,100
adds them to a page for instance to my

00:16:49,549 --> 00:16:55,970
dashboard we have also seen that lazy

00:16:52,100 --> 00:16:59,059
loading is really simple we have seen

00:16:55,970 --> 00:17:01,759
that nowadays we can try to extend

00:16:59,059 --> 00:17:05,510
what's possible we can try to push the

00:17:01,759 --> 00:17:08,419
boundaries then we are loading external

00:17:05,510 --> 00:17:11,299
elements and we have seen that I be able

00:17:08,419 --> 00:17:14,689
to hopefully a good job when it comes to

00:17:11,299 --> 00:17:16,819
your I paste code in this area and for

00:17:14,689 --> 00:17:20,959
other codes we can try to share

00:17:16,819 --> 00:17:23,600
dependencies so one last thing and

00:17:20,959 --> 00:17:26,480
please always remember this sometimes

00:17:23,600 --> 00:17:29,480
all we wants to have is a greasy pizza I

00:17:26,480 --> 00:17:31,820
think this is the K key takeaway of this

00:17:29,480 --> 00:17:35,149
whole presentation sometimes we just

00:17:31,820 --> 00:17:37,940
need elements if you like this doc I've

00:17:35,149 --> 00:17:40,429
written a lot about this and you can

00:17:37,940 --> 00:17:43,440
look up everything in my block and if

00:17:40,429 --> 00:17:46,169
you don't like this talk well

00:17:43,440 --> 00:17:46,730
I'm writing better than I'm speaking who

00:17:46,169 --> 00:17:50,879
knows

00:17:46,730 --> 00:17:53,100
saying this tomorrow I have a workshop

00:17:50,879 --> 00:17:55,679
regarding this where we will go more in

00:17:53,100 --> 00:17:57,840
depth so if you want to know more about

00:17:55,679 --> 00:18:00,929
this if you want to try out everything

00:17:57,840 --> 00:18:04,500
just make sure to drop by at this

00:18:00,929 --> 00:18:05,980
workshop so that's it have a nice day

00:18:04,500 --> 00:18:12,039
and thanks for having me

00:18:05,980 --> 00:18:14,100
[Applause]

00:18:12,039 --> 00:18:14,100
you

00:18:17,970 --> 00:18:24,710
[Music]

00:18:30,530 --> 00:18:32,590

YouTube URL: https://www.youtube.com/watch?v=E9i3YBFxSSE


