Title: ng Generate Universal, Now What? | James Daniels
Publication date: 2019-05-03
Playlist: ng-conf 2019
Description: 
	So you’ve got Angular Universal working in your application! Congratulations! It was quite the journey. You removed all the references to the DOM (or polyfilled them), put all the fires out, fixed your Zone.js issues (at least the ones on critical path), got through code review and everything is merged… now what? Seems like everything is just more complicated now. How does one start reaping the rewards that can come with server-side rendering?

In this session we’ll go beyond setup and walk through practical server-side rendering topics: pre-rendering, state-transfer, lazy loading, caching, headers, handling authenticated content, and when and where you might want to draw some lines so you can get the most out of Angular Universal.

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:07,920 --> 00:00:15,420
[Music]

00:00:11,150 --> 00:00:17,369
okay so I am James Daniels so I'm

00:00:15,420 --> 00:00:22,320
actually a developer programs engineer

00:00:17,369 --> 00:00:24,900
at Google cloud what's that right

00:00:22,320 --> 00:00:27,150
developer programs engineer we like our

00:00:24,900 --> 00:00:29,220
titles in Google Cloud and doesn't

00:00:27,150 --> 00:00:32,160
really communicate things so I'm

00:00:29,220 --> 00:00:35,550
actually really an engineer on the

00:00:32,160 --> 00:00:37,140
firebase team that's my core

00:00:35,550 --> 00:00:41,879
responsibility what I work on day-to-day

00:00:37,140 --> 00:00:44,969
and most relevant to all of you I'm the

00:00:41,879 --> 00:00:48,960
lead on angular fire the angular

00:00:44,969 --> 00:00:53,460
extensions for firebase so last year I

00:00:48,960 --> 00:00:56,309
gave a talk talking about how with

00:00:53,460 --> 00:01:00,030
angular fire we were working very hard

00:00:56,309 --> 00:01:02,699
to get angular fire working

00:01:00,030 --> 00:01:05,939
out-of-the-box nicely with angular

00:01:02,699 --> 00:01:09,720
Universal fixing on the other zone jss

00:01:05,939 --> 00:01:12,930
use and really aiming for a good

00:01:09,720 --> 00:01:15,150
experience there and that's also

00:01:12,930 --> 00:01:17,850
relevant not just for universal right

00:01:15,150 --> 00:01:20,850
but for your service workers because if

00:01:17,850 --> 00:01:22,979
we're disrupting your app stability then

00:01:20,850 --> 00:01:24,540
that's no good your service workers

00:01:22,979 --> 00:01:28,229
aren't going to register you're gonna

00:01:24,540 --> 00:01:30,600
need to do some hacks so those problems

00:01:28,229 --> 00:01:33,570
were you know needed to be solved on

00:01:30,600 --> 00:01:38,310
both sides and I kind of walked through

00:01:33,570 --> 00:01:41,939
my journey of actually deep diving into

00:01:38,310 --> 00:01:45,450
zone j/s finding the problems fixing

00:01:41,939 --> 00:01:48,979
them and well we got we got through it

00:01:45,450 --> 00:01:52,470
right angular fire works pretty well in

00:01:48,979 --> 00:01:55,259
angular Universal now for me as a

00:01:52,470 --> 00:01:57,990
developer programs engineer right I play

00:01:55,259 --> 00:01:59,130
with technology I'm supposed to run into

00:01:57,990 --> 00:02:01,950
problems before everyone else

00:01:59,130 --> 00:02:04,409
unfortunately since I was very busy

00:02:01,950 --> 00:02:06,180
maintaining angular fire right I didn't

00:02:04,409 --> 00:02:09,869
get too much of a chance to actually

00:02:06,180 --> 00:02:12,090
play with angular Universal I was stuck

00:02:09,869 --> 00:02:13,410
fixing the problems and getting things

00:02:12,090 --> 00:02:16,410
unblocked

00:02:13,410 --> 00:02:18,810
so in this talk I want to just go over

00:02:16,410 --> 00:02:21,870
some of the stuff that I've been playing

00:02:18,810 --> 00:02:25,130
around with Universal once I got it

00:02:21,870 --> 00:02:28,290
working all the things that you know

00:02:25,130 --> 00:02:30,420
yeah you got Universal in there you

00:02:28,290 --> 00:02:34,620
fixed the zone j/s issues in your

00:02:30,420 --> 00:02:37,460
critical path and everything's happy but

00:02:34,620 --> 00:02:42,450
how do you make your app now performant

00:02:37,460 --> 00:02:44,880
so along the way I you know made good

00:02:42,450 --> 00:02:52,320
friends with my misunderstood buddies on

00:02:44,880 --> 00:02:55,880
Jay s so first off right you know this

00:02:52,320 --> 00:02:58,080
is one of the first capabilities of

00:02:55,880 --> 00:03:02,610
Universal that people are interested in

00:02:58,080 --> 00:03:05,400
right is SEO when the page renders they

00:03:02,610 --> 00:03:08,610
want search engines to be able to index

00:03:05,400 --> 00:03:11,400
set and that's really a chief motivator

00:03:08,610 --> 00:03:13,340
right and if we're being honest the

00:03:11,400 --> 00:03:17,190
search engines are getting better and

00:03:13,340 --> 00:03:19,580
most of what I bet a lot of your leaders

00:03:17,190 --> 00:03:22,770
or you yourself are interested in

00:03:19,580 --> 00:03:25,200
honestly it's stuff like this right is

00:03:22,770 --> 00:03:27,810
when you post a link to a social media

00:03:25,200 --> 00:03:30,270
site you want there to be a thumbnail

00:03:27,810 --> 00:03:33,150
you want there to be a description you

00:03:30,270 --> 00:03:36,900
know rich metadata and that's what you

00:03:33,150 --> 00:03:38,970
get with Universal and you know you

00:03:36,900 --> 00:03:44,790
don't have to render everything to do

00:03:38,970 --> 00:03:48,030
that so here's an arbitrary diagram this

00:03:44,790 --> 00:03:50,670
is not real life numbers but say this

00:03:48,030 --> 00:03:53,400
was your performance you know from cold

00:03:50,670 --> 00:03:55,230
start all the way up to your j/s loading

00:03:53,400 --> 00:03:57,560
and this is one of the reasons why you

00:03:55,230 --> 00:03:59,930
wanted to get on board with you

00:03:57,560 --> 00:04:03,330
Universal right as you wanted that

00:03:59,930 --> 00:04:06,720
perceived time to your application being

00:04:03,330 --> 00:04:10,320
useful faster right now you've

00:04:06,720 --> 00:04:12,870
implemented Universal you've you know mg

00:04:10,320 --> 00:04:16,320
added it you fixed your zone J issues

00:04:12,870 --> 00:04:19,190
and well here you are now right it's

00:04:16,320 --> 00:04:23,340
it's a little bit faster the perceived

00:04:19,190 --> 00:04:24,540
response times there but not enough

00:04:23,340 --> 00:04:26,190
right

00:04:24,540 --> 00:04:29,100
when you

00:04:26,190 --> 00:04:31,140
your leadership or your stakeholders

00:04:29,100 --> 00:04:33,900
you're probably thinking more like this

00:04:31,140 --> 00:04:36,150
right further down and of course they're

00:04:33,900 --> 00:04:40,470
asking you next quarter to get it down

00:04:36,150 --> 00:04:43,950
either even further right so now that

00:04:40,470 --> 00:04:45,900
we're past the gist getting universal

00:04:43,950 --> 00:04:48,720
going what are some of the things that

00:04:45,900 --> 00:04:51,630
we can do to actually reap the

00:04:48,720 --> 00:04:55,080
performance rewards so how do we get

00:04:51,630 --> 00:04:59,660
there so the first thing I want to touch

00:04:55,080 --> 00:05:02,030
on is pre-rendering so pre-rendering is

00:04:59,660 --> 00:05:05,280
taking those routes and instead of

00:05:02,030 --> 00:05:09,540
actually rendering them on the server on

00:05:05,280 --> 00:05:11,940
demand for user requests when the

00:05:09,540 --> 00:05:14,610
browser hits a URL you can actually

00:05:11,940 --> 00:05:16,110
render them ahead of time so this is a

00:05:14,610 --> 00:05:18,600
really quick win right

00:05:16,110 --> 00:05:20,040
you got Universal working and now you

00:05:18,600 --> 00:05:23,280
don't even need to plug in a back-end

00:05:20,040 --> 00:05:25,710
server you can just go ahead and in this

00:05:23,280 --> 00:05:27,570
little example this is you know some

00:05:25,710 --> 00:05:30,330
code that I actually have in production

00:05:27,570 --> 00:05:34,650
I have a static paths and that's just an

00:05:30,330 --> 00:05:37,470
array of URLs that I care about maybe

00:05:34,650 --> 00:05:41,070
these are my marketing pages maybe this

00:05:37,470 --> 00:05:44,160
is my sign up page my support page these

00:05:41,070 --> 00:05:46,710
are the very very critical paths that I

00:05:44,160 --> 00:05:49,140
don't even want the latency of a server

00:05:46,710 --> 00:05:51,270
responding and maybe these pages aren't

00:05:49,140 --> 00:05:53,550
customized right they're just a generic

00:05:51,270 --> 00:05:56,730
marketing page stuff like that and I

00:05:53,550 --> 00:06:00,210
rebuild them every time in my CI CD

00:05:56,730 --> 00:06:02,790
pipeline so in this I just have I

00:06:00,210 --> 00:06:05,700
grabbed those static paths as an array I

00:06:02,790 --> 00:06:08,610
make a promise all of them and I map

00:06:05,700 --> 00:06:12,270
over them and I use the render module

00:06:08,610 --> 00:06:15,300
Factory right I pass it the URL and then

00:06:12,270 --> 00:06:18,840
this is a step that some people miss is

00:06:15,300 --> 00:06:20,790
if you're using lazy routes at all you

00:06:18,840 --> 00:06:22,440
need to pull in this lazy module map I

00:06:20,790 --> 00:06:25,020
see that on stackoverflow a lot

00:06:22,440 --> 00:06:28,680
everyone's like well I use lazy routes

00:06:25,020 --> 00:06:31,800
so I can't use pre rendering and well

00:06:28,680 --> 00:06:34,470
you can't in fact so then I go over this

00:06:31,800 --> 00:06:37,990
and you know I have a dot dot dot here

00:06:34,470 --> 00:06:39,730
but that codes complicated

00:06:37,990 --> 00:06:42,130
more complicated than a slide and all

00:06:39,730 --> 00:06:46,330
that's doing is writing that out to the

00:06:42,130 --> 00:06:50,380
file system or my CDN or wherever I want

00:06:46,330 --> 00:06:52,600
to go so this is a way to reap really

00:06:50,380 --> 00:06:56,080
really quick wins from that Universal

00:06:52,600 --> 00:06:58,150
conversion and for me what I tend to do

00:06:56,080 --> 00:07:02,710
is I actually put this in my server ts

00:06:58,150 --> 00:07:04,450
file so all of my other expressjs stuffs

00:07:02,710 --> 00:07:08,320
in there too and I just have an if block

00:07:04,450 --> 00:07:10,840
around it if pre-render environment

00:07:08,320 --> 00:07:13,300
variable exists do this instead of

00:07:10,840 --> 00:07:18,040
serving the website so that way I get

00:07:13,300 --> 00:07:20,290
you know a single code path so I myself

00:07:18,040 --> 00:07:23,140
I mean I'm on the firebase team so I use

00:07:20,290 --> 00:07:26,080
firebase hosting you want to put this

00:07:23,140 --> 00:07:28,710
behind a CDN right and I'm sure you all

00:07:26,080 --> 00:07:32,530
have your CDN preferences you use them

00:07:28,710 --> 00:07:35,500
and especially since you're coming at

00:07:32,530 --> 00:07:39,580
this from a static web web standpoint

00:07:35,500 --> 00:07:42,340
now when you're looking now at adding

00:07:39,580 --> 00:07:44,560
dynamic routes maybe some of those

00:07:42,340 --> 00:07:46,540
decisions change right maybe you have to

00:07:44,560 --> 00:07:49,270
think a little bit more about what type

00:07:46,540 --> 00:07:52,150
of CDN you're using how you're using it

00:07:49,270 --> 00:07:54,490
so for me I like firebase hosting is

00:07:52,150 --> 00:07:57,460
backed by a global CDN we're actually

00:07:54,490 --> 00:07:59,800
using vastly behind the scenes you know

00:07:57,460 --> 00:08:01,990
we're not just only using Google

00:07:59,800 --> 00:08:04,060
technology it's we really like fastly

00:08:01,990 --> 00:08:08,260
they have a great solution for what we

00:08:04,060 --> 00:08:11,500
need and it actually you can with simple

00:08:08,260 --> 00:08:15,370
configuration point certain URLs or

00:08:11,500 --> 00:08:18,250
routes at GCP instances serverless and

00:08:15,370 --> 00:08:21,550
infrastructure so a static hosting and

00:08:18,250 --> 00:08:25,180
you can open up URL blobs it's a point

00:08:21,550 --> 00:08:27,670
at serverless infrastructure and it's

00:08:25,180 --> 00:08:29,980
free you get an ssl certificate you can

00:08:27,670 --> 00:08:32,560
bring your own domain it's really cool

00:08:29,980 --> 00:08:35,380
and you know if you want something more

00:08:32,560 --> 00:08:38,680
customizable definitely check out fastly

00:08:35,380 --> 00:08:41,020
I really dig fastly so this is actually

00:08:38,680 --> 00:08:44,860
what that config looks like right so

00:08:41,020 --> 00:08:48,339
this is a static web site and what I'm

00:08:44,860 --> 00:08:49,640
doing basically is now I want to

00:08:48,339 --> 00:08:52,490
actually serve this as

00:08:49,640 --> 00:08:55,250
sar so I'm ignoring the my index.html

00:08:52,490 --> 00:08:58,220
right the index.html still needs to be

00:08:55,250 --> 00:09:01,430
there for you know the server-side

00:08:58,220 --> 00:09:04,550
rendering it loads index.html but I

00:09:01,430 --> 00:09:07,490
actually ignore it in this config for

00:09:04,550 --> 00:09:10,510
firebase so when I deployed to the CDN

00:09:07,490 --> 00:09:14,390
it's gonna skip that file and then I

00:09:10,510 --> 00:09:17,500
rewrite starstar to a cloud run instance

00:09:14,390 --> 00:09:21,950
and what that's going to do is anytime

00:09:17,500 --> 00:09:24,800
the file is not already deployed to the

00:09:21,950 --> 00:09:27,830
CDN anytime there's a 404 from the CDN

00:09:24,800 --> 00:09:30,560
the CDN is gonna proxy that to a cloud

00:09:27,830 --> 00:09:35,330
run instance and then here I've also set

00:09:30,560 --> 00:09:37,970
up some expiration headers for my CSS

00:09:35,330 --> 00:09:39,560
and JavaScript and you can actually go

00:09:37,970 --> 00:09:42,080
through here and you can set up all

00:09:39,560 --> 00:09:44,480
these raw and the config and that's just

00:09:42,080 --> 00:09:47,330
gonna pass that to the CDN as opposed to

00:09:44,480 --> 00:09:52,670
you having to do that manually or in

00:09:47,330 --> 00:09:55,190
Express j/s so you know I pointed out

00:09:52,670 --> 00:09:58,220
the cloud run proxy there so let's talk

00:09:55,190 --> 00:10:00,020
about the dynamic hosting right you pre

00:09:58,220 --> 00:10:03,100
render your routes you have your static

00:10:00,020 --> 00:10:06,940
assets your your main bundles your CSS

00:10:03,100 --> 00:10:09,410
now this is a new choice right

00:10:06,940 --> 00:10:11,960
especially for those of you that are

00:10:09,410 --> 00:10:14,600
coming from mostly a front-end

00:10:11,960 --> 00:10:16,940
perspective right what decisions do you

00:10:14,600 --> 00:10:19,160
have to make to choose a good you know

00:10:16,940 --> 00:10:22,250
dynamic hosting and again you know I'm

00:10:19,160 --> 00:10:24,980
Google so I'm partial to this stuff we

00:10:22,250 --> 00:10:27,580
actually just launched cloud run so

00:10:24,980 --> 00:10:32,320
before I used a lot of cloud functions

00:10:27,580 --> 00:10:35,240
and that wasn't a great solution for

00:10:32,320 --> 00:10:37,940
server-side rendering because the cold

00:10:35,240 --> 00:10:40,370
boot time right and then also

00:10:37,940 --> 00:10:43,820
concurrency is very limited so a cloud

00:10:40,370 --> 00:10:46,400
function is JavaScript code it can be

00:10:43,820 --> 00:10:48,740
expressed j/s and when you route to it

00:10:46,400 --> 00:10:51,050
it spins up servers on demand and you

00:10:48,740 --> 00:10:53,960
don't have to even think about it super

00:10:51,050 --> 00:10:57,020
easy but the concurrency was very

00:10:53,960 --> 00:10:58,970
limited with that products memory you

00:10:57,020 --> 00:11:02,990
couldn't you could only do it in

00:10:58,970 --> 00:11:05,200
JavaScript and add a lot of limitations

00:11:02,990 --> 00:11:08,630
but we took that sort of concept of

00:11:05,200 --> 00:11:10,640
scaling a server from zero to infinity

00:11:08,630 --> 00:11:13,340
really quickly and we actually brought

00:11:10,640 --> 00:11:17,170
it into a new product called cloud run

00:11:13,340 --> 00:11:20,420
and my favorite thing about cloud run is

00:11:17,170 --> 00:11:22,340
it's not anything special and super

00:11:20,420 --> 00:11:26,240
proprietary aside from the scaling

00:11:22,340 --> 00:11:28,550
engine it's just docker right so you put

00:11:26,240 --> 00:11:31,820
a docker file up and in this I'm using

00:11:28,550 --> 00:11:35,240
no 10 cuz firebase has some issues with

00:11:31,820 --> 00:11:38,420
no.12 right now I copy over my package

00:11:35,240 --> 00:11:42,020
JSON my package lock JSON and you an NPM

00:11:38,420 --> 00:11:46,100
install copy everything else run build

00:11:42,020 --> 00:11:49,100
and then serve and the cool thing here

00:11:46,100 --> 00:11:50,030
is even though you're you know you're

00:11:49,100 --> 00:11:51,650
playing around with the Google

00:11:50,030 --> 00:11:54,530
technology and you're working with that

00:11:51,650 --> 00:11:56,300
scaling engine this is based on docker

00:11:54,530 --> 00:11:59,210
right so you could put this on any cloud

00:11:56,300 --> 00:12:02,600
it's agnostic so that's a very cool

00:11:59,210 --> 00:12:05,480
piece of this technology and the spin up

00:12:02,600 --> 00:12:07,970
time is is very very quick so it'll

00:12:05,480 --> 00:12:10,400
scale down to zero and then spin up

00:12:07,970 --> 00:12:13,490
really really quickly and then you can

00:12:10,400 --> 00:12:16,340
get I saw a demo on stage or someone

00:12:13,490 --> 00:12:19,340
threw a load tester at it and it booted

00:12:16,340 --> 00:12:23,900
them up to something like 50,000 CPUs in

00:12:19,340 --> 00:12:27,200
like 6 seconds it was crazy so if you do

00:12:23,900 --> 00:12:31,190
get that hug of death cloud run will be

00:12:27,200 --> 00:12:35,630
able to scale to meet that need so

00:12:31,190 --> 00:12:40,070
ultimately why I care about spinning

00:12:35,630 --> 00:12:43,450
down to 0 is this back-end server right

00:12:40,070 --> 00:12:46,460
it's there for when the cache misses

00:12:43,450 --> 00:12:48,980
ideally I'd like that cache miss rate to

00:12:46,460 --> 00:12:51,950
be really really low and if I do get it

00:12:48,980 --> 00:12:54,290
really really low then I don't want to

00:12:51,950 --> 00:12:56,930
be paying for servers and I'm not using

00:12:54,290 --> 00:12:59,360
right I want those to be available when

00:12:56,930 --> 00:13:01,730
they're needed when I need to bust my

00:12:59,360 --> 00:13:03,500
cache when I deploy a new version of the

00:13:01,730 --> 00:13:06,410
application and the caches are building

00:13:03,500 --> 00:13:09,920
but I don't want to be paying X many

00:13:06,410 --> 00:13:12,020
cents per minute to keep a minimum

00:13:09,920 --> 00:13:14,030
number of servers around so that's why I

00:13:12,020 --> 00:13:18,920
like server list products

00:13:14,030 --> 00:13:21,860
and in this case so you know I mentioned

00:13:18,920 --> 00:13:25,760
busting the cash you know there's this

00:13:21,860 --> 00:13:27,230
great thing that the two hard things the

00:13:25,760 --> 00:13:29,660
only two hard things in computer science

00:13:27,230 --> 00:13:32,260
are cash and validation and naming

00:13:29,660 --> 00:13:36,410
things I really like that it's hard

00:13:32,260 --> 00:13:40,910
problem covers so many things and that

00:13:36,410 --> 00:13:44,300
brings us to cash control so I used to

00:13:40,910 --> 00:13:46,940
be a Ruby on Rails developer so I had to

00:13:44,300 --> 00:13:49,880
think about caches a lot rubies you know

00:13:46,940 --> 00:13:53,500
not that performance it's a really great

00:13:49,880 --> 00:13:56,360
SDK so when you get any sort of load

00:13:53,500 --> 00:13:58,460
your immediate reaction is caching

00:13:56,360 --> 00:14:02,630
caching caching right fragment caching

00:13:58,460 --> 00:14:05,480
page caching CDN and I come from that

00:14:02,630 --> 00:14:08,120
world of mindset and you know and

00:14:05,480 --> 00:14:09,860
working with a lot of angular developers

00:14:08,120 --> 00:14:13,010
just starting to get into server-side

00:14:09,860 --> 00:14:15,950
rendering some of this is new right this

00:14:13,010 --> 00:14:19,940
is a front-end framework now you're able

00:14:15,950 --> 00:14:22,520
to get the response object right

00:14:19,940 --> 00:14:25,070
you can inherit that and now you can

00:14:22,520 --> 00:14:27,890
start adding headers to it and this is

00:14:25,070 --> 00:14:29,750
where that the power of those caching

00:14:27,890 --> 00:14:31,730
headers come in so this is a cache

00:14:29,750 --> 00:14:33,380
control right it's actually really

00:14:31,730 --> 00:14:35,960
complicated and this stuff is really

00:14:33,380 --> 00:14:38,980
easy to get wrong but cache control has

00:14:35,960 --> 00:14:43,540
a lot of different options right and

00:14:38,980 --> 00:14:46,430
some of them are public if you say have

00:14:43,540 --> 00:14:49,660
you know content that's specific to a

00:14:46,430 --> 00:14:52,870
user you might want to do a private mode

00:14:49,660 --> 00:14:56,150
I'd really recommend for those of you

00:14:52,870 --> 00:14:58,940
dipping your toe into server side

00:14:56,150 --> 00:15:02,270
rendering really check these out really

00:14:58,940 --> 00:15:05,740
play with these fastly actually again

00:15:02,270 --> 00:15:07,970
has really great tutorials on this and

00:15:05,740 --> 00:15:10,250
one of the cool things is you can just

00:15:07,970 --> 00:15:12,589
spin up a CDN and they have a little

00:15:10,250 --> 00:15:14,660
sandbox system where you can actually

00:15:12,589 --> 00:15:18,080
play around with the cache headers and

00:15:14,660 --> 00:15:21,020
see cache misses and one of the reasons

00:15:18,080 --> 00:15:25,250
why we actually chose fastly at firebase

00:15:21,020 --> 00:15:28,250
is fastly has a very quick

00:15:25,250 --> 00:15:30,260
perché so every time you deploy a new

00:15:28,250 --> 00:15:33,020
version of your firebase application it

00:15:30,260 --> 00:15:36,580
purges the cache replaces everything

00:15:33,020 --> 00:15:40,220
with the new files and that happens in

00:15:36,580 --> 00:15:43,460
milliseconds where some CD ends it can

00:15:40,220 --> 00:15:45,800
take as long as 30 minutes 3 hours 6

00:15:43,460 --> 00:15:48,620
hours I've even had one that I worked

00:15:45,800 --> 00:15:51,320
with that was like 48 hours was how long

00:15:48,620 --> 00:15:55,220
the cache purge was so I had a case

00:15:51,320 --> 00:15:57,710
where we deployed a bad version of our

00:15:55,220 --> 00:16:00,080
bundle and it completely broke the

00:15:57,710 --> 00:16:03,230
application and we're panicking and it

00:16:00,080 --> 00:16:05,270
was our main JS file and it was a mess

00:16:03,230 --> 00:16:07,430
so having a really quick cache

00:16:05,270 --> 00:16:10,370
invalidation is really good especially

00:16:07,430 --> 00:16:13,460
when you've poisoned the cache beyond

00:16:10,370 --> 00:16:17,750
that this is the one that I really like

00:16:13,460 --> 00:16:20,000
so etags expiration tags this is where

00:16:17,750 --> 00:16:23,180
you know when you generate your files

00:16:20,000 --> 00:16:24,830
and you get those sort of md5 you know

00:16:23,180 --> 00:16:27,440
part of the file name in a way that's

00:16:24,830 --> 00:16:31,670
cache invalidation right it's a new file

00:16:27,440 --> 00:16:34,490
name and etags the equivalent way of

00:16:31,670 --> 00:16:37,580
doing that over a header so when you're

00:16:34,490 --> 00:16:39,950
rendering your page if you set say maybe

00:16:37,580 --> 00:16:42,290
your main content maybe the main thing

00:16:39,950 --> 00:16:44,480
that's rendering in the page the object

00:16:42,290 --> 00:16:47,150
or an observable and you make some sort

00:16:44,480 --> 00:16:51,350
of hash it could be an idea a version

00:16:47,150 --> 00:16:53,089
number for firebase I use the timestamp

00:16:51,350 --> 00:16:55,250
a lot I'll use reference and then

00:16:53,089 --> 00:16:58,360
timestamp and the idea is that this is

00:16:55,250 --> 00:17:00,920
just a string that send checked and

00:16:58,360 --> 00:17:03,620
it'll do a head request against it and

00:17:00,920 --> 00:17:06,560
very cheaply be able to tell if it's

00:17:03,620 --> 00:17:08,420
expired by just comparing this before it

00:17:06,560 --> 00:17:10,730
goes and gets the whole page response

00:17:08,420 --> 00:17:12,920
and it'll then serve it up from the

00:17:10,730 --> 00:17:15,439
browser cache so this is a way of

00:17:12,920 --> 00:17:18,050
busting the browser cache and then if

00:17:15,439 --> 00:17:20,150
you have a CDN they also pay attention

00:17:18,050 --> 00:17:22,430
to that and of course there's the

00:17:20,150 --> 00:17:25,220
simplest right you can actually send an

00:17:22,430 --> 00:17:28,550
expires header and what this says to the

00:17:25,220 --> 00:17:34,490
CDN and the browser cache is expire this

00:17:28,550 --> 00:17:35,330
page after you know this time and a lot

00:17:34,490 --> 00:17:38,420
of CD ends

00:17:35,330 --> 00:17:38,900
there'll be special way of communicating

00:17:38,420 --> 00:17:43,180
the

00:17:38,900 --> 00:17:46,400
headers you can actually send in expires

00:17:43,180 --> 00:17:48,800
like this and have the browser respect

00:17:46,400 --> 00:17:51,040
it and there's another incantation of

00:17:48,800 --> 00:17:54,020
expires and this is specific to the CDN

00:17:51,040 --> 00:17:57,320
usually where it's a header that just

00:17:54,020 --> 00:17:59,540
the CDN observes so you could also do an

00:17:57,320 --> 00:18:02,060
incantation that tells the CDN when to

00:17:59,540 --> 00:18:05,180
expire it so maybe you want the CDN to

00:18:02,060 --> 00:18:07,970
expire it sooner and check for fresh

00:18:05,180 --> 00:18:13,490
content but have the browser's cache

00:18:07,970 --> 00:18:19,250
last longer so consider sending status

00:18:13,490 --> 00:18:22,610
codes as well so application shells this

00:18:19,250 --> 00:18:26,000
is a really great way to get stuff that

00:18:22,610 --> 00:18:27,680
you don't care about off of that main

00:18:26,000 --> 00:18:31,420
render right you really care about the

00:18:27,680 --> 00:18:34,520
SEO you want that main content there so

00:18:31,420 --> 00:18:36,800
you can actually do this right so this

00:18:34,520 --> 00:18:39,970
is a very naive implementation but you

00:18:36,800 --> 00:18:43,190
can go ahead and if it's not the server

00:18:39,970 --> 00:18:45,500
you can render it else you can put a

00:18:43,190 --> 00:18:48,760
loading thing so the cool thing here is

00:18:45,500 --> 00:18:52,340
you have empty content on your page and

00:18:48,760 --> 00:18:54,650
you you won't have that cost of fetching

00:18:52,340 --> 00:18:58,130
those resources and then you can clean

00:18:54,650 --> 00:19:00,890
them those up with directives and

00:18:58,130 --> 00:19:03,430
finally really the meat here is state

00:19:00,890 --> 00:19:05,840
restoration and this is the experience

00:19:03,430 --> 00:19:09,410
where this is one of my sample

00:19:05,840 --> 00:19:13,130
applications and we're working on this

00:19:09,410 --> 00:19:15,830
with firebase now you load the page and

00:19:13,130 --> 00:19:18,560
it goes white for a second and then back

00:19:15,830 --> 00:19:20,960
and what that is is it was rendered on

00:19:18,560 --> 00:19:24,610
the server and now the browser is taking

00:19:20,960 --> 00:19:27,140
over so for that we actually have

00:19:24,610 --> 00:19:29,480
transfer state and platform browser this

00:19:27,140 --> 00:19:32,630
is a cache that's gonna use a script tag

00:19:29,480 --> 00:19:40,330
and here's a quick little implementation

00:19:32,630 --> 00:19:43,010
here let me jump to this final thing so

00:19:40,330 --> 00:19:45,590
here this is a little bit more advanced

00:19:43,010 --> 00:19:50,780
case where I'm actually putting this

00:19:45,590 --> 00:19:52,800
into my observable as a pipe so what

00:19:50,780 --> 00:19:55,590
this gives me is the ability to

00:19:52,800 --> 00:19:58,320
get a fresher version of that cache so

00:19:55,590 --> 00:20:01,380
when the page first loads it won't

00:19:58,320 --> 00:20:02,970
flicker but then after a couple seconds

00:20:01,380 --> 00:20:05,430
if there's a newer version of the

00:20:02,970 --> 00:20:07,200
content it'll actually go in there and

00:20:05,430 --> 00:20:09,630
replace and that's you know using

00:20:07,200 --> 00:20:12,240
observables and pipes here and the

00:20:09,630 --> 00:20:15,870
transfer state so you can do some pretty

00:20:12,240 --> 00:20:19,770
cool stuff and fragment caches as well

00:20:15,870 --> 00:20:22,530
so in this case right you can actually

00:20:19,770 --> 00:20:25,080
on the server side don't think of cache

00:20:22,530 --> 00:20:26,520
is just something for the browser it's

00:20:25,080 --> 00:20:28,380
also something they can have on the

00:20:26,520 --> 00:20:31,200
server and in this case you can actually

00:20:28,380 --> 00:20:35,280
pull from Redis and pull that cache

00:20:31,200 --> 00:20:37,650
state so here's a couple resources here

00:20:35,280 --> 00:20:39,930
there's actually a great angular

00:20:37,650 --> 00:20:41,340
University post on this where you can

00:20:39,930 --> 00:20:43,020
actually scroll through it's a really

00:20:41,340 --> 00:20:45,330
good deep dive

00:20:43,020 --> 00:20:48,030
I mentioned the fastly tutorials on

00:20:45,330 --> 00:20:50,580
playing around with the CDN headers

00:20:48,030 --> 00:20:53,220
expiration and stuff like that and then

00:20:50,580 --> 00:20:55,320
I actually have an example project where

00:20:53,220 --> 00:20:59,070
I'm building a lot of this in and I'm

00:20:55,320 --> 00:21:01,470
building with angularfire a very cool

00:20:59,070 --> 00:21:04,080
example of using a lot of server-side

00:21:01,470 --> 00:21:04,760
rendering and caching and stuff like

00:21:04,080 --> 00:21:09,470
that

00:21:04,760 --> 00:21:13,130
so do check out that example thank you

00:21:09,470 --> 00:21:15,190
[Applause]

00:21:13,130 --> 00:21:15,190
you

00:21:19,290 --> 00:21:26,020
[Music]

00:21:31,840 --> 00:21:33,900

YouTube URL: https://www.youtube.com/watch?v=DZ6J9mGpEZ8


