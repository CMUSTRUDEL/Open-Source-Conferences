Title: Not Every App is a SPA | Rob Wormald
Publication date: 2019-05-02
Playlist: ng-conf 2019
Description: 
	Performance is a critical concern shipping applications that deliver great first load experiences, and not every application should be a Single Page Application on first load. Weâ€™re working on new techniques to make your websites easier to build, faster to deploy, and instant to load.

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:07,920 --> 00:00:11,170
[Music]

00:00:12,049 --> 00:00:18,449
hey everybody so we're gonna talk about

00:00:16,170 --> 00:00:20,070
not every app needs to be a single page

00:00:18,449 --> 00:00:21,539
app if you know anything about me this

00:00:20,070 --> 00:00:23,189
is not a new topic I've talked about

00:00:21,539 --> 00:00:24,449
this before we're gonna show you some

00:00:23,189 --> 00:00:24,930
progress where we're going where we're

00:00:24,449 --> 00:00:26,970
heading

00:00:24,930 --> 00:00:29,820
so I'm Rob Wormald if you don't know me

00:00:26,970 --> 00:00:31,650
I'm a dpe on the angular team I also

00:00:29,820 --> 00:00:33,420
started the ng RX project I don't do

00:00:31,650 --> 00:00:34,950
anything with the Andrex project so keep

00:00:33,420 --> 00:00:37,170
your questions going to Mike and Brandon

00:00:34,950 --> 00:00:38,579
about that I also do the lot of the web

00:00:37,170 --> 00:00:40,920
stands for angular and we'll talk about

00:00:38,579 --> 00:00:41,969
some of that as we get into this talk so

00:00:40,920 --> 00:00:45,270
in the keynote this morning there was

00:00:41,969 --> 00:00:46,620
this really great graph from Igor and it

00:00:45,270 --> 00:00:49,739
talks up you know a little bit about how

00:00:46,620 --> 00:00:51,809
he thinks how I think about how apps are

00:00:49,739 --> 00:00:54,899
built what are the tools we use what are

00:00:51,809 --> 00:00:55,890
the categories we put them in and so he

00:00:54,899 --> 00:00:57,090
talked about the history of angular

00:00:55,890 --> 00:00:58,859
right we kind of started here at the

00:00:57,090 --> 00:01:01,500
small medium apps the prototyping stuff

00:00:58,859 --> 00:01:03,359
as angular evolved right angular 2 was

00:01:01,500 --> 00:01:05,909
kind of designed to do the much bigger

00:01:03,359 --> 00:01:07,229
enterprise apps case as you said we

00:01:05,909 --> 00:01:08,490
didn't quite get there but you know over

00:01:07,229 --> 00:01:11,220
the past couple of years we've improved

00:01:08,490 --> 00:01:12,450
that much much more so I'm going to talk

00:01:11,220 --> 00:01:14,430
about the two other ends of the spectrum

00:01:12,450 --> 00:01:17,549
here we're gonna start at the skinny end

00:01:14,430 --> 00:01:18,570
on the right side scaling down right and

00:01:17,549 --> 00:01:21,390
he mentioned that in the talk this

00:01:18,570 --> 00:01:23,939
morning so what's happening here at the

00:01:21,390 --> 00:01:25,619
end right small medium apps demos things

00:01:23,939 --> 00:01:27,270
that are not these gigantic enterprise

00:01:25,619 --> 00:01:30,509
applications that you may or may not eat

00:01:27,270 --> 00:01:31,350
everything that angular provides and so

00:01:30,509 --> 00:01:32,700
I've been working on this project

00:01:31,350 --> 00:01:34,320
they're really kind of to start

00:01:32,700 --> 00:01:35,400
investigating this really narrow end of

00:01:34,320 --> 00:01:36,930
the spectrum right so this is angular

00:01:35,400 --> 00:01:39,240
elements raise your hand if you're using

00:01:36,930 --> 00:01:41,909
angular elements today a bunch of you

00:01:39,240 --> 00:01:43,020
cool that's awesome so angular elements

00:01:41,909 --> 00:01:45,119
is a project for allows you to take your

00:01:43,020 --> 00:01:46,950
angular components and publish them as

00:01:45,119 --> 00:01:48,479
web components custom elements and the

00:01:46,950 --> 00:01:50,670
key takeaway here is that allows you to

00:01:48,479 --> 00:01:52,979
take an angular component out of an app

00:01:50,670 --> 00:01:57,450
and use it in any web application on any

00:01:52,979 --> 00:01:58,049
web site who's driven by CMS whatever so

00:01:57,450 --> 00:01:59,729
if you don't know about web components

00:01:58,049 --> 00:02:01,020
you should definitely read about them

00:01:59,729 --> 00:02:03,030
the quick definition that's important

00:02:01,020 --> 00:02:04,380
here they're a set of web platform API

00:02:03,030 --> 00:02:06,810
is that allow you to create new HTML

00:02:04,380 --> 00:02:09,810
tags they're normally a pointer is

00:02:06,810 --> 00:02:12,090
nevermind and importantly they're built

00:02:09,810 --> 00:02:12,510
on modern browsers modern standards and

00:02:12,090 --> 00:02:14,459
they

00:02:12,510 --> 00:02:18,000
work in any JavaScript library or

00:02:14,459 --> 00:02:19,379
framework on the web that's important so

00:02:18,000 --> 00:02:20,819
why did we do this why did we actually

00:02:19,379 --> 00:02:22,769
start thinking about this well they're a

00:02:20,819 --> 00:02:25,590
bunch of use cases that are not covered

00:02:22,769 --> 00:02:27,060
by kind of the typical things we think

00:02:25,590 --> 00:02:29,610
about with s pas right and this is the

00:02:27,060 --> 00:02:30,959
other two ends of that spectrum so the

00:02:29,610 --> 00:02:32,069
first thing is mixed environments and

00:02:30,959 --> 00:02:34,019
this is where we started with the

00:02:32,069 --> 00:02:35,430
elements project about a year ago there

00:02:34,019 --> 00:02:37,140
are lots of frameworks out there lots of

00:02:35,430 --> 00:02:38,700
web applications lots of legacy tech

00:02:37,140 --> 00:02:40,500
lots of new stuff coming out every week

00:02:38,700 --> 00:02:42,180
right not all of you can start with

00:02:40,500 --> 00:02:43,470
greenfield projects often you're moving

00:02:42,180 --> 00:02:45,299
off of some old stack it might be

00:02:43,470 --> 00:02:47,430
angularjs it might be something you know

00:02:45,299 --> 00:02:48,329
completely non JavaScript related and

00:02:47,430 --> 00:02:50,010
you want to be able to kind of move

00:02:48,329 --> 00:02:51,989
forward and criminally make progress on

00:02:50,010 --> 00:02:53,849
this stuff we've heard a lot about this

00:02:51,989 --> 00:02:55,530
case of mini applications right you have

00:02:53,849 --> 00:02:58,470
some kind of angular application

00:02:55,530 --> 00:03:00,000
many components many parts right and we

00:02:58,470 --> 00:03:02,250
want to kind of project that into some

00:03:00,000 --> 00:03:03,450
other web application and ng upgrade is

00:03:02,250 --> 00:03:04,680
actually kind of an example of this

00:03:03,450 --> 00:03:06,389
right where you have some code base

00:03:04,680 --> 00:03:07,889
written in one framework you wanted to

00:03:06,389 --> 00:03:09,329
talk to the other framework and that's

00:03:07,889 --> 00:03:12,629
kind of the concept we're talking about

00:03:09,329 --> 00:03:14,159
here so we started here right and I

00:03:12,629 --> 00:03:15,810
think we've done a fairly successful job

00:03:14,159 --> 00:03:16,859
about this please come and tell me if we

00:03:15,810 --> 00:03:19,079
haven't and if there are things we need

00:03:16,859 --> 00:03:20,280
to improve here I'll put NIST asterisks

00:03:19,079 --> 00:03:21,750
there because we're not quite there yet

00:03:20,280 --> 00:03:23,549
but we're getting very close in the

00:03:21,750 --> 00:03:24,629
mixed environment stuff two examples

00:03:23,549 --> 00:03:27,030
that I want to call out that are in

00:03:24,629 --> 00:03:28,949
production today so the first is angular

00:03:27,030 --> 00:03:30,989
elements or I sorry Ingo Daioh which is

00:03:28,949 --> 00:03:32,760
our own documentation site the reason we

00:03:30,989 --> 00:03:34,769
use elements here is because kind of the

00:03:32,760 --> 00:03:36,209
outer content shell of the website is an

00:03:34,769 --> 00:03:38,160
angular application that's using all the

00:03:36,209 --> 00:03:39,449
angular stuff you know but the middle

00:03:38,160 --> 00:03:41,160
the actual documentation is all written

00:03:39,449 --> 00:03:43,319
in markdown and we want to be able to

00:03:41,160 --> 00:03:44,970
enable and embed these little widgets of

00:03:43,319 --> 00:03:47,400
interactive functionality so this page

00:03:44,970 --> 00:03:48,780
here the tabs there they're interactive

00:03:47,400 --> 00:03:51,090
they're a real tool angular component

00:03:48,780 --> 00:03:52,650
but we don't want people are mainly our

00:03:51,090 --> 00:03:54,239
doc authors to have to write code to

00:03:52,650 --> 00:03:55,500
start these things up right so all you

00:03:54,239 --> 00:03:57,120
got to do is put that element on the

00:03:55,500 --> 00:03:59,010
page and when the markdown comes up and

00:03:57,120 --> 00:04:01,560
gets rendered that element will start up

00:03:59,010 --> 00:04:03,030
and kind of work straight away the other

00:04:01,560 --> 00:04:04,290
interesting case that I think not a lot

00:04:03,030 --> 00:04:06,870
of people know about but I think is just

00:04:04,290 --> 00:04:08,819
awesome is Capital One Capital One is

00:04:06,870 --> 00:04:10,680
using angular elements to do upgrades so

00:04:08,819 --> 00:04:12,690
they have an angularjs application and

00:04:10,680 --> 00:04:14,579
they're using elements to actually start

00:04:12,690 --> 00:04:16,139
to begin to project parts of angular

00:04:14,579 --> 00:04:17,849
into this application so this is in

00:04:16,139 --> 00:04:18,840
production today this is really cool

00:04:17,849 --> 00:04:20,070
this is the thing that we didn't

00:04:18,840 --> 00:04:21,630
actually really think about from the

00:04:20,070 --> 00:04:23,070
beginning it turns out this is a really

00:04:21,630 --> 00:04:24,690
cool case and I think this is something

00:04:23,070 --> 00:04:28,380
we'll continue to look into using

00:04:24,690 --> 00:04:29,580
elements for upgrade but not everything

00:04:28,380 --> 00:04:30,660
that's great right we can't do

00:04:29,580 --> 00:04:31,590
everything we want to do yet I've

00:04:30,660 --> 00:04:33,360
already heard from about a hundred

00:04:31,590 --> 00:04:35,010
people in the 24 hours I've been here

00:04:33,360 --> 00:04:37,230
there was a bunch of use cases you want

00:04:35,010 --> 00:04:39,360
us to cover the big one is for me is is

00:04:37,230 --> 00:04:41,520
the idea of enhancing is ixnay on pages

00:04:39,360 --> 00:04:42,570
things that come off of a CMS the

00:04:41,520 --> 00:04:44,760
problem with this is that angular

00:04:42,570 --> 00:04:45,960
typically owns the whole page right you

00:04:44,760 --> 00:04:48,780
should an empty page there's kind of one

00:04:45,960 --> 00:04:50,460
root component there and what you really

00:04:48,780 --> 00:04:51,990
want to be able to do is have developers

00:04:50,460 --> 00:04:53,820
who are maybe not developers maybe not

00:04:51,990 --> 00:04:56,220
JavaScript developers your designers be

00:04:53,820 --> 00:04:57,990
able to assemble pages out of existing

00:04:56,220 --> 00:04:59,610
components you wanna be able to use that

00:04:57,990 --> 00:05:01,320
with any kind of back-end stack right

00:04:59,610 --> 00:05:02,760
it's possible today but it's honestly

00:05:01,320 --> 00:05:05,760
it's really really complicated to do

00:05:02,760 --> 00:05:06,690
this it's not easy the other one and

00:05:05,760 --> 00:05:07,770
this one I think is really really

00:05:06,690 --> 00:05:09,150
interesting especially for a lot of

00:05:07,770 --> 00:05:10,860
people in this room is design systems

00:05:09,150 --> 00:05:12,570
right we've heard a lot of feedback from

00:05:10,860 --> 00:05:14,550
people who would really like to be able

00:05:12,570 --> 00:05:15,810
to use angular to build these common UI

00:05:14,550 --> 00:05:17,670
libraries that we talk about all the

00:05:15,810 --> 00:05:19,350
time right but use them across their

00:05:17,670 --> 00:05:21,330
entire organization not just in their

00:05:19,350 --> 00:05:23,280
angular apps and the react apps and

00:05:21,330 --> 00:05:24,510
their pre-act apps in their ember apps

00:05:23,280 --> 00:05:28,590
and we want to make sure that works as

00:05:24,510 --> 00:05:30,060
well but this is not easy right why

00:05:28,590 --> 00:05:31,440
isn't this easy why couldn't we do this

00:05:30,060 --> 00:05:32,850
from day one well a lot of this is

00:05:31,440 --> 00:05:34,860
because angular was designed does that

00:05:32,850 --> 00:05:36,210
chart showed you right to really be

00:05:34,860 --> 00:05:37,890
thought about from the single page

00:05:36,210 --> 00:05:39,690
application case and I'm highlighting

00:05:37,890 --> 00:05:41,190
the word app here because an app to me

00:05:39,690 --> 00:05:42,390
is larger than just a component you

00:05:41,190 --> 00:05:44,490
might have services you have data

00:05:42,390 --> 00:05:46,380
there's a lot more than just a component

00:05:44,490 --> 00:05:48,180
in an apple the other stuff is that

00:05:46,380 --> 00:05:50,280
angular again was designed for this as

00:05:48,180 --> 00:05:51,690
Minko mentioned previously we want to

00:05:50,280 --> 00:05:53,280
have all that code up front right so it

00:05:51,690 --> 00:05:54,870
comes fast it feels interactive very

00:05:53,280 --> 00:05:56,940
quickly you're not waiting for for all

00:05:54,870 --> 00:05:58,650
this stuff but the trade-off is if you

00:05:56,940 --> 00:06:00,330
load all this code upfront it makes the

00:05:58,650 --> 00:06:02,220
case of taking some widget and putting

00:06:00,330 --> 00:06:04,230
into another application a lot less

00:06:02,220 --> 00:06:06,270
viable right if you have to ship 300k of

00:06:04,230 --> 00:06:08,160
angular to boot up a hello world that's

00:06:06,270 --> 00:06:09,090
not a great experience the other thing

00:06:08,160 --> 00:06:10,260
and I think this is probably the most

00:06:09,090 --> 00:06:12,030
important is that there's a lot of

00:06:10,260 --> 00:06:13,950
knowledge required to do this right you

00:06:12,030 --> 00:06:15,000
want to think about just a component but

00:06:13,950 --> 00:06:16,650
actually you have to think about an app

00:06:15,000 --> 00:06:18,240
and modules and platforms and all this

00:06:16,650 --> 00:06:19,500
stuff right and so there's a really

00:06:18,240 --> 00:06:22,650
level of friction there that we want to

00:06:19,500 --> 00:06:24,060
get rid of so let's kind of look at a

00:06:22,650 --> 00:06:25,590
simple example so this is your basic

00:06:24,060 --> 00:06:27,780
kind of hello world angular component

00:06:25,590 --> 00:06:31,980
rights got some inputs some outputs have

00:06:27,780 --> 00:06:33,660
some event handling this is nice and

00:06:31,980 --> 00:06:35,250
simple right but really what it is is

00:06:33,660 --> 00:06:36,330
you've got an NG module you got to think

00:06:35,250 --> 00:06:37,800
about kind of separately from the

00:06:36,330 --> 00:06:40,020
component you got to tell the ng

00:06:37,800 --> 00:06:41,520
about the component you also got it a

00:06:40,020 --> 00:06:43,199
new module about all the things you need

00:06:41,520 --> 00:06:44,970
to use like the platform and the common

00:06:43,199 --> 00:06:47,340
modules and all this stuff right and

00:06:44,970 --> 00:06:48,210
then once you've got your module and

00:06:47,340 --> 00:06:50,400
your component you've got to go to

00:06:48,210 --> 00:06:52,020
another file boot up the platform boot

00:06:50,400 --> 00:06:53,909
up your module get ahold of the injector

00:06:52,020 --> 00:06:56,340
finally hand the injector the element

00:06:53,909 --> 00:06:58,229
right and then finally you can give that

00:06:56,340 --> 00:06:59,520
element to the browser and it'll kind of

00:06:58,229 --> 00:07:01,139
boot up and work from there now again

00:06:59,520 --> 00:07:02,819
lots of people are doing this this is

00:07:01,139 --> 00:07:04,080
useful especially if you're already in

00:07:02,819 --> 00:07:06,300
an angular application where this is

00:07:04,080 --> 00:07:07,349
kind of already happening but it's a lot

00:07:06,300 --> 00:07:11,419
of overhead if you've not done this

00:07:07,349 --> 00:07:13,349
before it's really quite complicated so

00:07:11,419 --> 00:07:14,729
this is thing I think everybody's been

00:07:13,349 --> 00:07:16,080
waiting for everything asking me about

00:07:14,729 --> 00:07:17,940
so we'll talk about this first

00:07:16,080 --> 00:07:19,889
what does elements gonna look like with

00:07:17,940 --> 00:07:21,210
IE what does ib let us do how does it

00:07:19,889 --> 00:07:24,060
let us change how we think about

00:07:21,210 --> 00:07:26,639
elements and the answer is a lot so it's

00:07:24,060 --> 00:07:28,050
good this example again simple angular

00:07:26,639 --> 00:07:29,669
component again right the same component

00:07:28,050 --> 00:07:32,879
I just emitted the template to keep my

00:07:29,669 --> 00:07:34,680
slides from running over and in Ivy this

00:07:32,879 --> 00:07:36,270
is the simplest angular application you

00:07:34,680 --> 00:07:38,219
can write you have a component you

00:07:36,270 --> 00:07:39,539
import the render component method you

00:07:38,219 --> 00:07:40,770
call I'm sorry the function and you call

00:07:39,539 --> 00:07:43,289
render component with a hello world and

00:07:40,770 --> 00:07:45,240
that's it right this elements side I

00:07:43,289 --> 00:07:49,080
think is a huge improvement in thinking

00:07:45,240 --> 00:07:50,430
about applications versus components Ivy

00:07:49,080 --> 00:07:52,409
makes this really really easy and I want

00:07:50,430 --> 00:07:54,180
to show you how easy by actually kind of

00:07:52,409 --> 00:07:55,889
building out what elements looks like

00:07:54,180 --> 00:07:57,509
with you on stage here because it's

00:07:55,889 --> 00:08:00,060
really not that complicated it's a very

00:07:57,509 --> 00:08:02,909
powerful thing Billy takes like 50 lines

00:08:00,060 --> 00:08:03,539
of code so we'll start from that example

00:08:02,909 --> 00:08:05,219
again right

00:08:03,539 --> 00:08:06,509
simple empty file here we've got our

00:08:05,219 --> 00:08:07,500
hello world component we just looked at

00:08:06,509 --> 00:08:09,949
and we're bringing in that render

00:08:07,500 --> 00:08:12,180
component method from the angular core

00:08:09,949 --> 00:08:13,199
so that render component method can

00:08:12,180 --> 00:08:14,520
actually take some additional options

00:08:13,199 --> 00:08:16,440
and the first one you can give it is a

00:08:14,520 --> 00:08:18,000
host element so in this case rather than

00:08:16,440 --> 00:08:19,440
angular going and looking for the

00:08:18,000 --> 00:08:21,599
element we want to connect our component

00:08:19,440 --> 00:08:23,180
to we're gonna actually go in query for

00:08:21,599 --> 00:08:25,889
that element first and then tell angular

00:08:23,180 --> 00:08:28,020
explicitly put this component onto this

00:08:25,889 --> 00:08:30,440
element right so this is kind of the

00:08:28,020 --> 00:08:32,250
first step towards the dynamic behavior

00:08:30,440 --> 00:08:33,300
let's turn this into a custom element

00:08:32,250 --> 00:08:34,680
right so we'll go and put our base

00:08:33,300 --> 00:08:36,240
custom element implementation in here

00:08:34,680 --> 00:08:38,550
that thing extends from the HTML

00:08:36,240 --> 00:08:40,260
elements as all custom elements do we're

00:08:38,550 --> 00:08:41,909
just gonna tell the browser about it so

00:08:40,260 --> 00:08:44,070
what we want to happen here what we want

00:08:41,909 --> 00:08:46,290
is when we create a new instance of this

00:08:44,070 --> 00:08:47,550
constructor or this component when the

00:08:46,290 --> 00:08:48,810
browser creates it when a developer

00:08:47,550 --> 00:08:50,410
creates it we want to actually go ahead

00:08:48,810 --> 00:08:52,000
and boot up angular right

00:08:50,410 --> 00:08:53,680
so this is really easy what we're gonna

00:08:52,000 --> 00:08:55,930
do is just inside of the constructor of

00:08:53,680 --> 00:08:58,600
our custom element take that same render

00:08:55,930 --> 00:08:59,949
component method call it pass it the

00:08:58,600 --> 00:09:01,449
component and instead of going and

00:08:59,949 --> 00:09:02,889
creating foreign elements because we're

00:09:01,449 --> 00:09:04,240
inside of a web component here we

00:09:02,889 --> 00:09:07,209
already have the element we are the

00:09:04,240 --> 00:09:09,100
element so we can just pass this and in

00:09:07,209 --> 00:09:10,540
the simplest like this is IV elements

00:09:09,100 --> 00:09:12,029
this is all it really takes to make it

00:09:10,540 --> 00:09:14,589
work

00:09:12,029 --> 00:09:15,850
expanding that a little bit obviously

00:09:14,589 --> 00:09:18,129
want properties right so our hello world

00:09:15,850 --> 00:09:19,089
component headed input of the name so

00:09:18,129 --> 00:09:21,009
you could render it to the template

00:09:19,089 --> 00:09:22,899
we'll implement this manually here just

00:09:21,009 --> 00:09:24,459
gonna put a setter and a getter onto our

00:09:22,899 --> 00:09:26,589
component armature element class and

00:09:24,459 --> 00:09:28,629
basically when a value gets set from the

00:09:26,589 --> 00:09:29,800
outside world to that name property we

00:09:28,629 --> 00:09:31,750
will go ahead and take it assign it to

00:09:29,800 --> 00:09:33,879
the components name property and then

00:09:31,750 --> 00:09:35,319
call detect changes on it the other

00:09:33,879 --> 00:09:37,569
thing to notice here is I'm calling

00:09:35,319 --> 00:09:39,250
detect changes and I've just imported

00:09:37,569 --> 00:09:40,899
that from angular it's just a function I

00:09:39,250 --> 00:09:42,910
don't have to inject a change detect the

00:09:40,899 --> 00:09:44,800
ref here I don't have to have di it's

00:09:42,910 --> 00:09:46,689
get a hold of that right I just have a

00:09:44,800 --> 00:09:48,759
function I can call with the component

00:09:46,689 --> 00:09:49,540
that I want change detection to run so

00:09:48,759 --> 00:09:53,019
it makes it really easy to implement

00:09:49,540 --> 00:09:54,310
that and then we want attributes to work

00:09:53,019 --> 00:09:55,630
right so this is kind of baked into the

00:09:54,310 --> 00:09:57,069
web platform we just tell the browser

00:09:55,630 --> 00:09:59,380
look we want you to watch the name

00:09:57,069 --> 00:10:01,149
attribute on the element and when that

00:09:59,380 --> 00:10:02,980
changes call the attribute changed

00:10:01,149 --> 00:10:04,930
callback will get the new value of the

00:10:02,980 --> 00:10:07,149
attribute we'll just set it to our

00:10:04,930 --> 00:10:08,439
center which we defined previously that

00:10:07,149 --> 00:10:09,610
will then set it to the component and

00:10:08,439 --> 00:10:11,500
trigger change the hack detection to

00:10:09,610 --> 00:10:12,910
happen so it's like almost by default

00:10:11,500 --> 00:10:15,100
this is zone list right this doesn't

00:10:12,910 --> 00:10:16,959
require zones to work it's very much a

00:10:15,100 --> 00:10:18,250
non push model when the data changes

00:10:16,959 --> 00:10:20,829
we'll go ahead and trigger change

00:10:18,250 --> 00:10:22,209
detection for you so obviously we don't

00:10:20,829 --> 00:10:23,199
help you to write all that stuff right

00:10:22,209 --> 00:10:25,839
you shouldn't have to do it every time

00:10:23,199 --> 00:10:27,310
so this will likely look something like

00:10:25,839 --> 00:10:28,899
this so you can see at the top there

00:10:27,310 --> 00:10:31,029
from angular elements we're bringing and

00:10:28,899 --> 00:10:33,910
effectively a mixin this is a base class

00:10:31,029 --> 00:10:35,500
that provides all that stuff that I just

00:10:33,910 --> 00:10:38,110
built for you kind of manually right all

00:10:35,500 --> 00:10:39,790
you got to do is say here's my component

00:10:38,110 --> 00:10:41,380
give me back the custom element no

00:10:39,790 --> 00:10:43,870
there's no platform's here there's no

00:10:41,380 --> 00:10:46,029
modules here I'm literally just one line

00:10:43,870 --> 00:10:47,500
of code take my component turn it into a

00:10:46,029 --> 00:10:49,149
custom element register with the browser

00:10:47,500 --> 00:10:52,029
and that's literally it so we think

00:10:49,149 --> 00:10:54,029
that's a pretty big step forward so far

00:10:52,029 --> 00:10:56,259
so good

00:10:54,029 --> 00:10:57,459
of course if you're doing something

00:10:56,259 --> 00:10:58,779
today with angular elements you're

00:10:57,459 --> 00:11:00,399
probably using the injector you're

00:10:58,779 --> 00:11:01,750
probably using di you're probably using

00:11:00,399 --> 00:11:02,949
all the cool stuff that angular provides

00:11:01,750 --> 00:11:03,700
to you so of course you can still do

00:11:02,949 --> 00:11:05,050
that

00:11:03,700 --> 00:11:06,910
you just pass the injector as the second

00:11:05,050 --> 00:11:08,590
parameter that works exactly the same as

00:11:06,910 --> 00:11:10,060
that's in the current API and everything

00:11:08,590 --> 00:11:12,160
kind of works as normal how you get

00:11:10,060 --> 00:11:13,450
ahold of that injector is up to you you

00:11:12,160 --> 00:11:15,220
could do exactly the same steps that I

00:11:13,450 --> 00:11:16,510
showed you previously you might do it

00:11:15,220 --> 00:11:17,950
from your own custom component whatever

00:11:16,510 --> 00:11:19,870
you want to do you have the ability to

00:11:17,950 --> 00:11:24,730
do it this way that makes sense so far

00:11:19,870 --> 00:11:25,810
yeah cool this is the thing you can do

00:11:24,730 --> 00:11:27,490
today but not a lot of people know about

00:11:25,810 --> 00:11:28,720
right so actually it's the same exact

00:11:27,490 --> 00:11:30,820
function there so we're calling that

00:11:28,720 --> 00:11:33,280
with components returning back a custom

00:11:30,820 --> 00:11:35,200
element class for us and we're extending

00:11:33,280 --> 00:11:37,120
from it so this is useful if I wanted to

00:11:35,200 --> 00:11:38,350
do something else when the thing gets

00:11:37,120 --> 00:11:40,090
connected to the Dom or when it gets to

00:11:38,350 --> 00:11:41,560
remove for the page I can just go ahead

00:11:40,090 --> 00:11:43,660
and jump and use the standard custom

00:11:41,560 --> 00:11:45,130
element callbacks here do something and

00:11:43,660 --> 00:11:46,770
then call that super connected callback

00:11:45,130 --> 00:11:49,090
and kind of hand control back to angular

00:11:46,770 --> 00:11:50,470
right so this gives it a very very

00:11:49,090 --> 00:11:52,450
simple able to start with but a very

00:11:50,470 --> 00:11:56,770
very extensible API as you want to do

00:11:52,450 --> 00:11:58,060
more and more complicated things so the

00:11:56,770 --> 00:11:59,530
reality here is that we're still talking

00:11:58,060 --> 00:12:00,940
about modules I haven't really showed

00:11:59,530 --> 00:12:03,490
you them right but they're still part of

00:12:00,940 --> 00:12:05,590
this equation here and really today in

00:12:03,490 --> 00:12:07,750
IV land there are kind of two primary

00:12:05,590 --> 00:12:10,030
things that an ng module is gonna do for

00:12:07,750 --> 00:12:11,380
you right the first is the declarations

00:12:10,030 --> 00:12:12,940
array there and the declarations rate

00:12:11,380 --> 00:12:15,340
basically just tells angular compiler

00:12:12,940 --> 00:12:17,110
take this component run it through the

00:12:15,340 --> 00:12:19,150
compiler do all the template stuff and

00:12:17,110 --> 00:12:20,800
give me back your compiled component and

00:12:19,150 --> 00:12:21,970
the second there is imports and imports

00:12:20,800 --> 00:12:24,310
we could get like we do a whole talk

00:12:21,970 --> 00:12:25,990
about energy modules the point here is

00:12:24,310 --> 00:12:27,640
that all I'm expressing here is that I

00:12:25,990 --> 00:12:30,070
would like to be able to use the things

00:12:27,640 --> 00:12:31,360
that are in the common module inside of

00:12:30,070 --> 00:12:33,280
my template for the hello world

00:12:31,360 --> 00:12:34,960
component right so all we're saying is

00:12:33,280 --> 00:12:36,850
here's some stuff that I want to be able

00:12:34,960 --> 00:12:39,040
to use in my in my hello world component

00:12:36,850 --> 00:12:41,290
so this is great it's much simpler right

00:12:39,040 --> 00:12:43,180
but again it's still kind of this

00:12:41,290 --> 00:12:44,410
abstract thing this isn't really exactly

00:12:43,180 --> 00:12:46,690
your component you kinda have to think

00:12:44,410 --> 00:12:48,190
about it differently and so we'll get to

00:12:46,690 --> 00:12:51,220
this but keep this in mind as we go

00:12:48,190 --> 00:12:52,780
through the next steps here one nice

00:12:51,220 --> 00:12:54,400
thing about ideas actually declarations

00:12:52,780 --> 00:12:56,770
technically they're not required right

00:12:54,400 --> 00:12:59,230
the problem though is if you don't put

00:12:56,770 --> 00:13:00,910
something in ng module you have no way

00:12:59,230 --> 00:13:02,530
to express to the component which

00:13:00,910 --> 00:13:03,880
directives you want to use which pipes

00:13:02,530 --> 00:13:06,940
you want to use right because again

00:13:03,880 --> 00:13:08,110
today that ng module provides you the

00:13:06,940 --> 00:13:10,990
place for all those selectors are

00:13:08,110 --> 00:13:12,340
available so this is the thing that we

00:13:10,990 --> 00:13:13,690
kind of want oh this is not great and

00:13:12,340 --> 00:13:14,950
this is one of the blocking issues that

00:13:13,690 --> 00:13:16,240
we have at the moment they were kind of

00:13:14,950 --> 00:13:17,230
working through so what I'm going to

00:13:16,240 --> 00:13:19,330
show you is

00:13:17,230 --> 00:13:20,740
one idea how we're gonna handle this I

00:13:19,330 --> 00:13:22,720
think Misha is going to talk more about

00:13:20,740 --> 00:13:23,950
these ideas on Friday so don't freak out

00:13:22,720 --> 00:13:25,210
when I show you this but it should look

00:13:23,950 --> 00:13:27,340
familiar to you it shouldn't look that

00:13:25,210 --> 00:13:28,900
scary I just want to kind of show how

00:13:27,340 --> 00:13:31,060
we're thinking about this problem and

00:13:28,900 --> 00:13:32,560
when you see this come and talk to me

00:13:31,060 --> 00:13:34,060
after the talk and tell me how you feel

00:13:32,560 --> 00:13:36,610
about it I love to know it makes you

00:13:34,060 --> 00:13:37,770
feel if it works if it looks scary we

00:13:36,610 --> 00:13:40,810
can go from there

00:13:37,770 --> 00:13:42,130
so how do we do this well we already do

00:13:40,810 --> 00:13:43,150
this with providers right not many

00:13:42,130 --> 00:13:44,970
people know this it's not many people

00:13:43,150 --> 00:13:47,740
use this API but you can provide

00:13:44,970 --> 00:13:49,120
providers directly to a components right

00:13:47,740 --> 00:13:50,620
and every time that component fires up

00:13:49,120 --> 00:13:52,630
look at an instance of that provider

00:13:50,620 --> 00:13:54,520
that service everything kind of works as

00:13:52,630 --> 00:13:57,640
normal so what happened this is a

00:13:54,520 --> 00:13:59,830
what-if warning you what if we went back

00:13:57,640 --> 00:14:03,130
to what we did back in the rc4 days who

00:13:59,830 --> 00:14:04,630
was using anger and rc4 got claps you

00:14:03,130 --> 00:14:07,210
can clap for this guy clap for this

00:14:04,630 --> 00:14:09,520
right number one we're sorry about the

00:14:07,210 --> 00:14:11,080
RC again right but now that we get back

00:14:09,520 --> 00:14:12,600
to this day I go well actually maybe

00:14:11,080 --> 00:14:15,460
this wasn't such a terrible idea right

00:14:12,600 --> 00:14:17,140
so again to me this is there's some

00:14:15,460 --> 00:14:18,340
trade-offs here number one like it could

00:14:17,140 --> 00:14:20,320
become more verbose you may have to

00:14:18,340 --> 00:14:21,550
bring in more things right the other

00:14:20,320 --> 00:14:23,410
hand that was much simpler it's much

00:14:21,550 --> 00:14:25,360
more direct yes I'm using this pipe this

00:14:23,410 --> 00:14:28,300
directive in this component it's far all

00:14:25,360 --> 00:14:29,440
very kind of in one file here again tell

00:14:28,300 --> 00:14:32,520
me how you feel about this after the

00:14:29,440 --> 00:14:36,220
talk we'll take your feedback from there

00:14:32,520 --> 00:14:37,870
so this one look a little more closely

00:14:36,220 --> 00:14:39,100
and kind of see if you can check out the

00:14:37,870 --> 00:14:41,290
difference between these two things I'm

00:14:39,100 --> 00:14:43,660
flipping between there are two things

00:14:41,290 --> 00:14:45,460
that are changing okay the first one is

00:14:43,660 --> 00:14:47,380
I'm taking the component decorator from

00:14:45,460 --> 00:14:49,300
angular and I'm turning into an NG

00:14:47,380 --> 00:14:51,430
element and the second thing I'm doing

00:14:49,300 --> 00:14:53,050
if you look at the class angular

00:14:51,430 --> 00:14:54,730
components right are just pojos they're

00:14:53,050 --> 00:14:57,100
just classes there's they don't extend

00:14:54,730 --> 00:14:58,480
from anything there's no base class but

00:14:57,100 --> 00:15:00,400
in this case I'm taking my component and

00:14:58,480 --> 00:15:01,740
I'm extending it with that same ng

00:15:00,400 --> 00:15:04,870
element mixin that I was using earlier

00:15:01,740 --> 00:15:06,910
and so what this actually gives me is an

00:15:04,870 --> 00:15:08,470
angular element without an angular

00:15:06,910 --> 00:15:10,930
component so I have an angular element

00:15:08,470 --> 00:15:12,490
blog web component and a templates right

00:15:10,930 --> 00:15:14,340
and contacts and all of these things but

00:15:12,490 --> 00:15:16,360
I have no component no separate thing

00:15:14,340 --> 00:15:17,830
now we've always talked about angular

00:15:16,360 --> 00:15:19,960
element in terms of taking angular

00:15:17,830 --> 00:15:21,340
components and publishing them but there

00:15:19,960 --> 00:15:22,630
are a lot of cases especially if you're

00:15:21,340 --> 00:15:23,530
building a design system if you're

00:15:22,630 --> 00:15:25,780
building something that's really

00:15:23,530 --> 00:15:27,550
lightweight you may not actually need

00:15:25,780 --> 00:15:29,110
being Euler component model you might

00:15:27,550 --> 00:15:30,760
want an angular template right and all

00:15:29,110 --> 00:15:31,220
the great things that I'm falling off my

00:15:30,760 --> 00:15:33,320
little stuff

00:15:31,220 --> 00:15:35,360
all the things that angular tablets give

00:15:33,320 --> 00:15:37,670
you without the angular component model

00:15:35,360 --> 00:15:38,930
so this is one kind of speculative idea

00:15:37,670 --> 00:15:40,130
and the idea here is again like you

00:15:38,930 --> 00:15:42,020
already know how component works you

00:15:40,130 --> 00:15:44,180
know how a decorator works so this

00:15:42,020 --> 00:15:45,650
translates fairly simply for most people

00:15:44,180 --> 00:15:47,270
to it the custom element kind of idea

00:15:45,650 --> 00:15:49,130
and again all of this is is making the

00:15:47,270 --> 00:15:51,110
taking away some of the interaction and

00:15:49,130 --> 00:15:55,700
giving you that full control if you wish

00:15:51,110 --> 00:15:57,500
to have it this one is the thing that

00:15:55,700 --> 00:15:58,790
somebody suggested to me that I had not

00:15:57,500 --> 00:16:00,980
had considered at all but I think is a

00:15:58,790 --> 00:16:02,660
fantastic idea and it actually informed

00:16:00,980 --> 00:16:04,910
how I started thinking about the first

00:16:02,660 --> 00:16:06,470
time lens API so that a lot of cases

00:16:04,910 --> 00:16:07,940
today and there's many many web

00:16:06,470 --> 00:16:09,800
applications you may use something like

00:16:07,940 --> 00:16:11,170
d3 or neither great charting libraries

00:16:09,800 --> 00:16:14,960
right there are a number of other ways

00:16:11,170 --> 00:16:16,630
to render data to Dom than just angular

00:16:14,960 --> 00:16:19,010
templating right so in this case

00:16:16,630 --> 00:16:21,890
wouldn't it be nice if you could use

00:16:19,010 --> 00:16:24,020
angular's mechanics our CLI the concepts

00:16:21,890 --> 00:16:25,010
you already know and package that up

00:16:24,020 --> 00:16:27,230
into something that everybody else can

00:16:25,010 --> 00:16:29,900
use so in this case we're creating an

00:16:27,230 --> 00:16:31,370
angular elements right but using d3 to

00:16:29,900 --> 00:16:33,100
do the rendering so effectively what

00:16:31,370 --> 00:16:35,600
this is giving you is change detection

00:16:33,100 --> 00:16:37,700
without angular templating so this

00:16:35,600 --> 00:16:39,710
allows you to create usable components

00:16:37,700 --> 00:16:41,870
in the angular ecosystem that work with

00:16:39,710 --> 00:16:43,190
angular of course work on all the other

00:16:41,870 --> 00:16:44,600
applications of course and you're not

00:16:43,190 --> 00:16:46,610
paying the cost of the angular

00:16:44,600 --> 00:16:49,100
templating which are not using here so

00:16:46,610 --> 00:16:50,420
again these are just layered api's you

00:16:49,100 --> 00:16:52,310
have to use any kind of levels of these

00:16:50,420 --> 00:16:53,420
different things the with ng component

00:16:52,310 --> 00:16:55,910
that we looked at the beginning is the

00:16:53,420 --> 00:16:57,530
kind of simplest API this is the lowest

00:16:55,910 --> 00:17:01,730
level API and we want to be able to pick

00:16:57,530 --> 00:17:02,900
and choose where you go cool so that's

00:17:01,730 --> 00:17:04,459
kind of the entry punch the beginning

00:17:02,900 --> 00:17:06,439
and I talked about the the sort of

00:17:04,459 --> 00:17:07,819
narrow low-level entry point because it

00:17:06,439 --> 00:17:11,110
actually enables us to do some really

00:17:07,819 --> 00:17:13,189
interesting things at the other spectrum

00:17:11,110 --> 00:17:14,510
so if you were paying attention in the

00:17:13,189 --> 00:17:17,720
keynote this morning you may have seen

00:17:14,510 --> 00:17:19,310
that word angular photon go by I know

00:17:17,720 --> 00:17:21,079
some of you did because I've had like 50

00:17:19,310 --> 00:17:24,470
tweets already this morning asking me

00:17:21,079 --> 00:17:27,740
what the hell is angular Photon so what

00:17:24,470 --> 00:17:29,780
is photon photon is a research project

00:17:27,740 --> 00:17:33,050
and I want to be clear about this write

00:17:29,780 --> 00:17:34,370
photon is not yet a product it's not a

00:17:33,050 --> 00:17:36,890
thing that we're guaranteeing to ship

00:17:34,370 --> 00:17:38,560
it's more of a working group of coming

00:17:36,890 --> 00:17:42,020
up with kind of the next generation

00:17:38,560 --> 00:17:43,560
tooling next eration concepts franco

00:17:42,020 --> 00:17:45,930
developers right

00:17:43,560 --> 00:17:46,890
so again photon is not a thing we're

00:17:45,930 --> 00:17:49,170
gonna ship next week

00:17:46,890 --> 00:17:50,790
it's an idea we're working through and

00:17:49,170 --> 00:17:53,130
if we decide that it becomes a product

00:17:50,790 --> 00:17:53,790
like Gatsby or next that maybe the way

00:17:53,130 --> 00:17:55,650
we go with it

00:17:53,790 --> 00:17:57,600
we may use it and just roll some of the

00:17:55,650 --> 00:17:59,250
ideas back into the core of angular we

00:17:57,600 --> 00:18:00,420
don't know the way it's gonna go yet but

00:17:59,250 --> 00:18:02,630
we want to kind of talk to you about how

00:18:00,420 --> 00:18:05,660
we're thinking about this problem

00:18:02,630 --> 00:18:09,420
so why there are two big reasons I think

00:18:05,660 --> 00:18:10,740
the first one is that little umbrella on

00:18:09,420 --> 00:18:12,360
the side there that's Google Shopping

00:18:10,740 --> 00:18:14,400
Express so that's an angular project

00:18:12,360 --> 00:18:16,290
it's a big ecommerce platform from

00:18:14,400 --> 00:18:18,060
Google it's an awesome project it's

00:18:16,290 --> 00:18:20,400
really angular and quite frankly this is

00:18:18,060 --> 00:18:23,130
probably the most challenging project

00:18:20,400 --> 00:18:24,600
I've ever been around right this was the

00:18:23,130 --> 00:18:26,820
first team that we really spoke to who

00:18:24,600 --> 00:18:28,350
wanted to do all the things that we've

00:18:26,820 --> 00:18:30,240
talked to that long before we designed

00:18:28,350 --> 00:18:31,800
how to do them right so we made it work

00:18:30,240 --> 00:18:34,050
and actually it's very very cool we use

00:18:31,800 --> 00:18:34,830
a bunch of SSR we use custom elements

00:18:34,050 --> 00:18:36,900
there's a bunch of really interesting

00:18:34,830 --> 00:18:37,980
things we're doing here and we want to

00:18:36,900 --> 00:18:39,630
make sure that all that stuff that we

00:18:37,980 --> 00:18:41,610
had to build in a really difficult way

00:18:39,630 --> 00:18:43,830
for the gsx team works for everybody

00:18:41,610 --> 00:18:45,030
else really simply the second and this

00:18:43,830 --> 00:18:46,650
got mentioned again this morning is that

00:18:45,030 --> 00:18:48,870
we have the student sister team Wiz and

00:18:46,650 --> 00:18:50,460
Wiz they're great at all of this stuff

00:18:48,870 --> 00:18:52,140
right this is the thing that they've

00:18:50,460 --> 00:18:53,580
been doing for 10 years so they have a

00:18:52,140 --> 00:18:56,190
bunch of really interesting knowledge

00:18:53,580 --> 00:18:57,960
concepts ideas that we had no concept of

00:18:56,190 --> 00:18:59,700
it all and we looked at this stuff and

00:18:57,960 --> 00:19:01,380
went oh wow this makes a lot of sense

00:18:59,700 --> 00:19:03,030
for a lot of our angular developers can

00:19:01,380 --> 00:19:05,100
we learn from some of these concepts can

00:19:03,030 --> 00:19:07,860
we think about making them into the

00:19:05,100 --> 00:19:08,850
angular that you use today so what do we

00:19:07,860 --> 00:19:10,200
want to do how do we want to do this

00:19:08,850 --> 00:19:12,480
right what are we kind of looking at

00:19:10,200 --> 00:19:14,190
what is this shaping up to be well the

00:19:12,480 --> 00:19:16,140
first is that pre rendering an SSR are

00:19:14,190 --> 00:19:18,450
almost certainly going to be a necessity

00:19:16,140 --> 00:19:20,280
here right the fastest way to get

00:19:18,450 --> 00:19:21,510
content on a screen is by server-side

00:19:20,280 --> 00:19:24,210
rendering whether that's at Build time

00:19:21,510 --> 00:19:26,130
in response to requests based on some

00:19:24,210 --> 00:19:28,110
cron job but pre rendering or that is

00:19:26,130 --> 00:19:30,210
shipping HTML already formed to the

00:19:28,110 --> 00:19:32,430
browser it's very very hard to do things

00:19:30,210 --> 00:19:35,100
any faster than that so that's kind of

00:19:32,430 --> 00:19:36,660
the first thing we're looking at the

00:19:35,100 --> 00:19:38,550
second is and this is an idea that was

00:19:36,660 --> 00:19:41,040
implemented from day one is this idea of

00:19:38,550 --> 00:19:42,780
like a very minimal initial j/s payload

00:19:41,040 --> 00:19:44,730
right and that is like there's a fixed

00:19:42,780 --> 00:19:46,470
cost for using their framework it brings

00:19:44,730 --> 00:19:48,600
in some stuff to setup event listeners

00:19:46,470 --> 00:19:50,760
and some orchestration things but you

00:19:48,600 --> 00:19:52,290
have a fixed cost which allows the rest

00:19:50,760 --> 00:19:53,670
of the application to boot up but it

00:19:52,290 --> 00:19:55,380
means that you're not blocking and

00:19:53,670 --> 00:19:57,059
waiting for megabytes of script to load

00:19:55,380 --> 00:20:00,870
for the users a

00:19:57,059 --> 00:20:02,070
to use the app this is again based on

00:20:00,870 --> 00:20:03,929
that kind of elements idea here but

00:20:02,070 --> 00:20:05,220
loading components only when needed and

00:20:03,929 --> 00:20:07,049
Minko again talked about this in the

00:20:05,220 --> 00:20:08,249
previous talk but this is idea that like

00:20:07,049 --> 00:20:09,809
you shouldn't have to actually bring

00:20:08,249 --> 00:20:11,580
along a component until it's either used

00:20:09,809 --> 00:20:14,129
or interacted with or necessary to do

00:20:11,580 --> 00:20:15,539
rendering right again this is possible

00:20:14,129 --> 00:20:17,190
in English day it's complicated

00:20:15,539 --> 00:20:18,480
but we've got some ideas that actually

00:20:17,190 --> 00:20:21,210
really make this really really powerful

00:20:18,480 --> 00:20:22,379
and straightforward so this includes

00:20:21,210 --> 00:20:24,419
progressive bootstrapping right we want

00:20:22,379 --> 00:20:26,429
to send HTML to the browser fully formed

00:20:24,419 --> 00:20:28,230
and then as you interact with a page as

00:20:26,429 --> 00:20:31,470
you navigate bring in the code necessary

00:20:28,230 --> 00:20:32,789
to make that work so really in general

00:20:31,470 --> 00:20:34,169
and this is thing that may not make

00:20:32,789 --> 00:20:35,850
sense to me pin the open source world

00:20:34,169 --> 00:20:37,169
but really we want the ease of angular

00:20:35,850 --> 00:20:39,749
all the stuff that you and open-source

00:20:37,169 --> 00:20:41,490
love and the speed and the guarantees

00:20:39,749 --> 00:20:42,600
that whiz gives our internal customers

00:20:41,490 --> 00:20:44,399
right so the two of these things

00:20:42,600 --> 00:20:46,080
together we don't know what it looks

00:20:44,399 --> 00:20:47,999
like yet but photon is the project to

00:20:46,080 --> 00:20:51,749
figure this out right think about these

00:20:47,999 --> 00:20:52,559
problems and again it's about extending

00:20:51,749 --> 00:20:54,570
this thing that we built for Google

00:20:52,559 --> 00:20:56,340
Shopping Express which is really awesome

00:20:54,570 --> 00:20:57,990
but really complicated and putting in a

00:20:56,340 --> 00:21:01,139
way that all of you can use and benefit

00:20:57,990 --> 00:21:02,519
from ease of use some guy asked about

00:21:01,139 --> 00:21:03,720
this a few times as well as I'll put it

00:21:02,519 --> 00:21:05,879
up in your say we've been looking a lot

00:21:03,720 --> 00:21:07,529
at tools like next and next and Gatsby

00:21:05,879 --> 00:21:09,480
right these are awesome awesome tools

00:21:07,529 --> 00:21:10,649
from the react community we've seen a

00:21:09,480 --> 00:21:11,940
few examples of this kind of

00:21:10,649 --> 00:21:13,889
experimenting with angular we want to

00:21:11,940 --> 00:21:15,119
make this really really easy we don't

00:21:13,889 --> 00:21:17,490
know if the angular team will build this

00:21:15,119 --> 00:21:18,600
we expect that us or somebody will build

00:21:17,490 --> 00:21:21,059
this but again we want to give you the

00:21:18,600 --> 00:21:22,759
tools the capabilities necessary to

00:21:21,059 --> 00:21:24,779
actually allow you to do this right

00:21:22,759 --> 00:21:26,220
additions to angular so declarative data

00:21:24,779 --> 00:21:27,990
fetching comes in here this is a thing

00:21:26,220 --> 00:21:30,059
that I'm not on time to talk about but

00:21:27,990 --> 00:21:32,249
allowing you to do data not just on a

00:21:30,059 --> 00:21:35,340
node server and so you can use your PHP

00:21:32,249 --> 00:21:36,720
C C++ whatever you want server and again

00:21:35,340 --> 00:21:38,519
do this progressive bootstrapping stuff

00:21:36,720 --> 00:21:39,749
to make it work code splitting I mean go

00:21:38,519 --> 00:21:41,820
talked about that's a big part of this

00:21:39,749 --> 00:21:44,789
and again linting and validation tooling

00:21:41,820 --> 00:21:46,139
to keep you on track automatic open I'll

00:21:44,789 --> 00:21:47,279
just show you this this is very simple

00:21:46,139 --> 00:21:49,139
we're going to do it at a component

00:21:47,279 --> 00:21:51,509
level every component should be a chunk

00:21:49,139 --> 00:21:52,649
everything's lazy loaded how does this

00:21:51,509 --> 00:21:54,480
look well this is that angular element

00:21:52,649 --> 00:21:55,350
we were looking at earlier right here

00:21:54,480 --> 00:21:57,629
we're bringing in the element

00:21:55,350 --> 00:21:59,580
synchronously it's all baked together we

00:21:57,629 --> 00:22:01,350
can change this very simply we have a

00:21:59,580 --> 00:22:03,090
different mix in with a lazy ng

00:22:01,350 --> 00:22:04,590
component here we use that dynamic

00:22:03,090 --> 00:22:06,570
imports hot tax we talked about earlier

00:22:04,590 --> 00:22:08,429
and the way this works is now you have

00:22:06,570 --> 00:22:09,820
this thing registered with a browser the

00:22:08,429 --> 00:22:11,799
first time somebody uses the

00:22:09,820 --> 00:22:13,419
somebody boots one up he will go and

00:22:11,799 --> 00:22:14,529
fetch the component for you fetch all

00:22:13,419 --> 00:22:16,389
the code necessary to make that

00:22:14,529 --> 00:22:19,359
component work and boot it up it allows

00:22:16,389 --> 00:22:20,619
you to define elements use them and then

00:22:19,359 --> 00:22:22,720
when that when they actually get used

00:22:20,619 --> 00:22:23,489
bring in the code this is pretty

00:22:22,720 --> 00:22:26,440
powerful

00:22:23,489 --> 00:22:27,759
so I'm already out of time I think I'm

00:22:26,440 --> 00:22:29,739
gonna say stay tuned on this this is a

00:22:27,759 --> 00:22:31,119
thing that again we are deeply looking

00:22:29,739 --> 00:22:33,309
at there's a lot of time being spent on

00:22:31,119 --> 00:22:34,840
it if this resonates with you at all if

00:22:33,309 --> 00:22:35,979
you have problems with this this is a

00:22:34,840 --> 00:22:37,869
space that you're thinking about

00:22:35,979 --> 00:22:39,700
please come and speak to me I'd love to

00:22:37,869 --> 00:22:40,869
hear what your struggles are what kind

00:22:39,700 --> 00:22:43,749
of things you're looking at doing and

00:22:40,869 --> 00:22:45,609
how what we're doing apply is the key

00:22:43,749 --> 00:22:47,109
kind of tenant of the the photon project

00:22:45,609 --> 00:22:49,389
is to make sure that we actually design

00:22:47,109 --> 00:22:50,559
something based on user feedback that is

00:22:49,389 --> 00:22:52,899
going to work for everybody right that

00:22:50,559 --> 00:22:54,970
allows you to be on Rails and for us we

00:22:52,899 --> 00:22:56,799
really need these use cases from you to

00:22:54,970 --> 00:22:58,929
make that work I'm already out of time

00:22:56,799 --> 00:23:00,429
that's everything for me thanks for

00:22:58,929 --> 00:23:03,899
listening again please come and find me

00:23:00,429 --> 00:23:03,899
let's talk about the stuff

00:23:10,400 --> 00:23:17,009
[Music]

00:23:22,610 --> 00:23:24,670

YouTube URL: https://www.youtube.com/watch?v=JX5GGu_7JKc


