Title: Schematics: an untapped frontier | Brian Love & Kevin Schuchard
Publication date: 2019-05-04
Playlist: ng-conf 2019
Description: 
	Schematics can accomplish nearly any task and published by anyone. Whether you want to generate hundreds of dynamic files or update source code, Kevin and Brian will demonstrate how accessible custom schematics are for you or your organization. If you find yourself repeating the same logic, enforcing similar patterns, or performing setup logic, again and again, youâ€™ll take away the tools and understanding necessary to start your schematic learning journey.

Angular Schematics Tutorial: https://brianflove.com/2018/12/11/angular-schematics-tutorial/
NG Add Schematic: https://brianflove.com/2018/12/15/ng-add-schematic/
Angular CLI Prompts: https://www.kevinschuchard.com/blog/2018-10-22-angular-cli-prompts/
Building Schematics with a Sandbox: https://www.kevinschuchard.com/blog/2018-11-20-schematic-sandbox/
Schematics - An Introduction: https://blog.angular.io/schematics-an-introduction-dc1dfbc2a2b2
Schematics: Generating Custom Angular Code with the CLI: https://leanpub.com/angular-schematics

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:07,920 --> 00:00:11,170
[Music]

00:00:11,300 --> 00:00:16,350
all right good morning today we're gonna

00:00:13,530 --> 00:00:18,539
be talking about schematics so if you're

00:00:16,350 --> 00:00:20,400
not familiar with schematics the best

00:00:18,539 --> 00:00:22,949
way to kind of get us started here is to

00:00:20,400 --> 00:00:25,500
think about the angular CLI right so

00:00:22,949 --> 00:00:27,900
when we're using the CLI today and we

00:00:25,500 --> 00:00:29,849
generate out a new project or perhaps we

00:00:27,900 --> 00:00:33,030
generate out a component or a service

00:00:29,849 --> 00:00:35,100
we're using schematics right so the CLI

00:00:33,030 --> 00:00:36,870
takes advantage of schematics in order

00:00:35,100 --> 00:00:39,149
to generate files and also to modify

00:00:36,870 --> 00:00:41,190
files right so think about when you

00:00:39,149 --> 00:00:43,379
generate out a component not only does

00:00:41,190 --> 00:00:45,300
it stub out the files for you but also

00:00:43,379 --> 00:00:47,969
we'll go and find the nearest module and

00:00:45,300 --> 00:00:50,160
then it declares that a component inside

00:00:47,969 --> 00:00:53,670
that module for you and so that is kind

00:00:50,160 --> 00:00:54,239
of what schematics can do in the CLI

00:00:53,670 --> 00:00:56,219
today

00:00:54,239 --> 00:00:57,809
yeah and generating code is really one

00:00:56,219 --> 00:00:59,520
of the big reasons I'm here because I

00:00:57,809 --> 00:01:02,070
don't know about you but I can't stand

00:00:59,520 --> 00:01:04,769
repeating myself doing the same set up

00:01:02,070 --> 00:01:06,210
logic over and over again and so one of

00:01:04,769 --> 00:01:08,939
the things I found myself doing was

00:01:06,210 --> 00:01:10,260
setting up prettier with angular time

00:01:08,939 --> 00:01:12,270
and time again and for those that don't

00:01:10,260 --> 00:01:14,729
know prettier is an opinionated code

00:01:12,270 --> 00:01:17,070
formatter and I kept going to the same

00:01:14,729 --> 00:01:19,680
blog post by Erin frost he has a great

00:01:17,070 --> 00:01:21,380
medium post with ten steps and I'd set

00:01:19,680 --> 00:01:24,960
them all up and sometimes I miss one

00:01:21,380 --> 00:01:26,310
sometimes I get it right and I had just

00:01:24,960 --> 00:01:28,020
written a schematic for Jess and I

00:01:26,310 --> 00:01:29,549
thought this is a perfect example let me

00:01:28,020 --> 00:01:31,740
write a schematic that sets up pretty

00:01:29,549 --> 00:01:34,470
earth angular and does all the steps for

00:01:31,740 --> 00:01:34,890
me correctly and that's how I got

00:01:34,470 --> 00:01:37,079
started

00:01:34,890 --> 00:01:39,000
cool so why don't we start with the

00:01:37,079 --> 00:01:40,500
definition we're gonna start with a

00:01:39,000 --> 00:01:42,299
quick intro and what we're going to talk

00:01:40,500 --> 00:01:44,009
about so first we are going to talk

00:01:42,299 --> 00:01:45,869
about how you can add files using

00:01:44,009 --> 00:01:47,369
schematics and then we're going to talk

00:01:45,869 --> 00:01:48,509
about updating files and you're gonna

00:01:47,369 --> 00:01:50,280
see that that's a little bit more

00:01:48,509 --> 00:01:52,500
complicated than it is to add files

00:01:50,280 --> 00:01:53,759
right then we'll look at extending

00:01:52,500 --> 00:01:55,259
schematics so there's a lot of great

00:01:53,759 --> 00:01:56,549
schematics that are already written and

00:01:55,259 --> 00:01:58,530
we can leverage those within our own

00:01:56,549 --> 00:01:59,700
then we'll look at some of the lessons

00:01:58,530 --> 00:02:02,070
we've learned on how to speed up

00:01:59,700 --> 00:02:04,259
development and finally talk about a

00:02:02,070 --> 00:02:05,520
couple use cases all right cool and so

00:02:04,259 --> 00:02:07,439
let's started a definition yeah

00:02:05,520 --> 00:02:08,910
definition first so one of the

00:02:07,439 --> 00:02:11,039
definitions we've come up with is that a

00:02:08,910 --> 00:02:13,280
schematic is a collection of executable

00:02:11,039 --> 00:02:16,250
tasks that can generate and/or

00:02:13,280 --> 00:02:17,600
modify code deterministically so there's

00:02:16,250 --> 00:02:20,930
a couple key things we'd like to break

00:02:17,600 --> 00:02:23,480
down there right so a collection so

00:02:20,930 --> 00:02:25,310
schematics consist of multiple tasks

00:02:23,480 --> 00:02:28,490
right so when you install a schematic

00:02:25,310 --> 00:02:30,319
whether that's like angular material

00:02:28,490 --> 00:02:32,810
you're gonna have multiple tasks that

00:02:30,319 --> 00:02:35,900
you can execute within that schematic so

00:02:32,810 --> 00:02:47,080
it's a collection and then executable

00:02:35,900 --> 00:02:48,290
may be jumped really far ahead yeah

00:02:47,080 --> 00:02:50,690
there you go

00:02:48,290 --> 00:02:52,580
so schematics are executable this may

00:02:50,690 --> 00:02:53,900
seem obvious but it's important remember

00:02:52,580 --> 00:02:56,030
that we're gonna be executing these in

00:02:53,900 --> 00:02:59,840
the context of the angular CLI or

00:02:56,030 --> 00:03:01,489
perhaps the schematic CLI right and like

00:02:59,840 --> 00:03:03,769
we talked about schematics and generate

00:03:01,489 --> 00:03:05,720
or modify code so we're gonna be writing

00:03:03,769 --> 00:03:08,390
code that's going to be creating code

00:03:05,720 --> 00:03:10,100
for us and lastly we say that they're

00:03:08,390 --> 00:03:11,989
deterministic because with the

00:03:10,100 --> 00:03:13,850
schematics engine we have access to an

00:03:11,989 --> 00:03:16,040
abstract syntax tree which we'll talk

00:03:13,850 --> 00:03:18,560
about later but this latch lets us write

00:03:16,040 --> 00:03:20,360
very precise code then we're not just

00:03:18,560 --> 00:03:22,519
dealing with string matching and a

00:03:20,360 --> 00:03:23,810
regular expressions yeah I don't want to

00:03:22,519 --> 00:03:27,290
write a bunch of regular expressions to

00:03:23,810 --> 00:03:29,120
generate code me either okay so how do

00:03:27,290 --> 00:03:30,350
we get started with schematics so the

00:03:29,120 --> 00:03:31,700
first thing you need to do to get

00:03:30,350 --> 00:03:34,160
started with schematics is you actually

00:03:31,700 --> 00:03:35,870
need to install an additional CLI so

00:03:34,160 --> 00:03:37,310
this is not the angular CLI that you're

00:03:35,870 --> 00:03:40,459
already using today but there's a

00:03:37,310 --> 00:03:42,739
schematic CLI so you can use NPM or yarn

00:03:40,459 --> 00:03:45,560
and install that globally and that comes

00:03:42,739 --> 00:03:46,959
out of the angular dev kit after you

00:03:45,560 --> 00:03:50,269
install that you've got the schematics

00:03:46,959 --> 00:03:51,440
executable that you can execute in this

00:03:50,269 --> 00:03:54,620
example we're going to create a new

00:03:51,440 --> 00:03:56,810
project so similarly to ng new for an

00:03:54,620 --> 00:03:59,540
angular project with schematics you can

00:03:56,810 --> 00:04:02,420
use schematics blank followed by the

00:03:59,540 --> 00:04:04,010
name of the project and just like our

00:04:02,420 --> 00:04:05,120
typescript or our angular files we're

00:04:04,010 --> 00:04:06,890
going to compile it with the build

00:04:05,120 --> 00:04:09,200
command and then we'll execute it with

00:04:06,890 --> 00:04:12,109
the schematics executable so here we'll

00:04:09,200 --> 00:04:14,180
call schematics we'll specify the path

00:04:12,109 --> 00:04:16,190
so in this case a dot followed by a

00:04:14,180 --> 00:04:20,329
colon the name of the schematic and then

00:04:16,190 --> 00:04:23,680
any options that it may have all right

00:04:20,329 --> 00:04:25,669
cool let's do a quick demo yeah

00:04:23,680 --> 00:04:27,560
so we're going to take a look at two

00:04:25,669 --> 00:04:29,319
schematics the Brian I have both written

00:04:27,560 --> 00:04:32,870
we'll take a look at Brian's first here

00:04:29,319 --> 00:04:34,370
and we're gonna run these with the ng

00:04:32,870 --> 00:04:40,580
command followed by generate and then

00:04:34,370 --> 00:04:41,960
the name of the schematic cool so you

00:04:40,580 --> 00:04:43,310
can see here that Kevin's getting

00:04:41,960 --> 00:04:44,930
prompted here for the name of the

00:04:43,310 --> 00:04:47,150
component and one of the things that I

00:04:44,930 --> 00:04:48,469
found myself doing repetitively was

00:04:47,150 --> 00:04:50,539
dealing with unsubscribing from

00:04:48,469 --> 00:04:52,370
observables right and there's a couple

00:04:50,539 --> 00:04:55,340
different approaches to do that we can

00:04:52,370 --> 00:04:57,379
have a subscription we can add child

00:04:55,340 --> 00:05:00,080
subscriptions on to that we can use Ward

00:04:57,379 --> 00:05:02,509
sub sink and another option is to use

00:05:00,080 --> 00:05:04,759
the take until operator and so I was

00:05:02,509 --> 00:05:07,069
finding myself kind of repeating this

00:05:04,759 --> 00:05:09,199
same code continually in my angular

00:05:07,069 --> 00:05:11,449
applications I've got an import the

00:05:09,199 --> 00:05:13,370
subject I've got an import take until

00:05:11,449 --> 00:05:17,210
I've got to implement the ondestroy

00:05:13,370 --> 00:05:18,169
interface declare my subject and then in

00:05:17,210 --> 00:05:19,909
the ng ondestroy

00:05:18,169 --> 00:05:22,550
I got to go ahead and Next on that

00:05:19,909 --> 00:05:24,409
subject and then complete it and I was

00:05:22,550 --> 00:05:27,259
doing this over and over and over again

00:05:24,409 --> 00:05:28,819
and I was like man this is crazy why

00:05:27,259 --> 00:05:30,500
don't I just write a schematic so that

00:05:28,819 --> 00:05:33,110
way I can generate out like maybe a

00:05:30,500 --> 00:05:37,129
smart component if you will right and so

00:05:33,110 --> 00:05:39,770
that's what that's what we did very cool

00:05:37,129 --> 00:05:46,069
all right next let's take a look we

00:05:39,770 --> 00:05:50,719
clear this out and we'll take a quick

00:05:46,069 --> 00:05:52,129
look at the prettier schematic that I

00:05:50,719 --> 00:05:55,190
wrote so I'm going to select all the

00:05:52,129 --> 00:05:58,490
defaults here that set all this up and

00:05:55,190 --> 00:06:00,169
we'll let it just stop there and take a

00:05:58,490 --> 00:06:01,550
quick look so here's an example of some

00:06:00,169 --> 00:06:04,699
of the things that I kept having to do

00:06:01,550 --> 00:06:07,339
I'd have to go to my package JSON set up

00:06:04,699 --> 00:06:08,659
a pre-commit hook Rundlett staged all

00:06:07,339 --> 00:06:10,190
these things these are relatively easy

00:06:08,659 --> 00:06:12,680
we could probably all do these very

00:06:10,190 --> 00:06:14,210
quickly but it's trivial and sometimes

00:06:12,680 --> 00:06:16,190
I'd miss a step and I'd always have to

00:06:14,210 --> 00:06:17,750
go back to this article and now I can do

00:06:16,190 --> 00:06:19,930
this within a matter of seconds and

00:06:17,750 --> 00:06:22,930
share it out with everyone else very

00:06:19,930 --> 00:06:22,930
cool

00:06:24,270 --> 00:06:28,960
so now let's talk about adding files and

00:06:27,520 --> 00:06:31,570
kind of get into this a little bit more

00:06:28,960 --> 00:06:33,820
so when we're adding files we've got

00:06:31,570 --> 00:06:35,500
this ability to kind of create templates

00:06:33,820 --> 00:06:36,820
so think about our templates that we

00:06:35,500 --> 00:06:38,740
create angular today

00:06:36,820 --> 00:06:40,360
right so the syntax is a little bit

00:06:38,740 --> 00:06:42,100
different than angular though rather

00:06:40,360 --> 00:06:44,140
than using like double curly braces to

00:06:42,100 --> 00:06:48,640
do like string interpolation there's

00:06:44,140 --> 00:06:50,890
this kind of PHP kind of ASP style

00:06:48,640 --> 00:06:53,080
syntax with brackets right so you're

00:06:50,890 --> 00:06:55,030
going to do the less than percent equals

00:06:53,080 --> 00:06:58,000
and then the name of the variable in

00:06:55,030 --> 00:07:00,340
this case that variable is name and then

00:06:58,000 --> 00:07:01,780
right there is where our schematic is

00:07:00,340 --> 00:07:03,850
going to replace with whatever that

00:07:01,780 --> 00:07:06,460
value was that either the user was

00:07:03,850 --> 00:07:08,350
prompted perhaps where they provided on

00:07:06,460 --> 00:07:10,240
the command line or maybe that was

00:07:08,350 --> 00:07:13,780
calculated or computed inside your code

00:07:10,240 --> 00:07:15,130
of your schematic and we'll take a

00:07:13,780 --> 00:07:16,720
little look at a little more in-depth

00:07:15,130 --> 00:07:20,350
example so this is an excerpt from the

00:07:16,720 --> 00:07:22,780
angular component schematic and here we

00:07:20,350 --> 00:07:26,200
are interpolating the selector and style

00:07:22,780 --> 00:07:30,220
extensions variables inside of our

00:07:26,200 --> 00:07:32,410
template file the other thing we can do

00:07:30,220 --> 00:07:34,360
when we're generating out files using

00:07:32,410 --> 00:07:36,520
schematics is we can use logical

00:07:34,360 --> 00:07:39,400
operators right so here's another

00:07:36,520 --> 00:07:41,110
example this comes from the CLI so when

00:07:39,400 --> 00:07:43,480
we're generating on a component we can

00:07:41,110 --> 00:07:45,610
say hey if I want to do inline styles

00:07:43,480 --> 00:07:47,680
let's go ahead and just add that Styles

00:07:45,610 --> 00:07:54,370
property in my component metadata

00:07:47,680 --> 00:07:55,870
otherwise let's add the Styles URLs and

00:07:54,370 --> 00:07:57,580
lastly we don't have to put all this

00:07:55,870 --> 00:07:59,590
logic in our template just like with our

00:07:57,580 --> 00:08:01,350
angular code we can extract some of

00:07:59,590 --> 00:08:04,419
these methods back to our typescript

00:08:01,350 --> 00:08:05,890
files and we have access to a lot of

00:08:04,419 --> 00:08:08,530
great methods out there

00:08:05,890 --> 00:08:10,720
for example such as manipulating strings

00:08:08,530 --> 00:08:12,370
to either dash your eyes them or

00:08:10,720 --> 00:08:14,790
classify them depending on where we're

00:08:12,370 --> 00:08:14,790
using them

00:08:14,970 --> 00:08:19,450
okay so we've talked about adding files

00:08:17,590 --> 00:08:20,919
and it's relatively easy right we're

00:08:19,450 --> 00:08:22,840
just gonna create some templates we

00:08:20,919 --> 00:08:24,220
could put some string variables in there

00:08:22,840 --> 00:08:25,900
or string interpolation in there

00:08:24,220 --> 00:08:27,940
we've got logical operators we can

00:08:25,900 --> 00:08:30,790
execute functions so we're off to a good

00:08:27,940 --> 00:08:32,650
start with adding files so now let's

00:08:30,790 --> 00:08:35,020
take a little kind of turn here and

00:08:32,650 --> 00:08:37,510
let's talk about updating files so

00:08:35,020 --> 00:08:39,430
updating files it's super simple Kevin

00:08:37,510 --> 00:08:41,709
all we have to do is in this case I want

00:08:39,430 --> 00:08:43,240
to modify the environments file right so

00:08:41,709 --> 00:08:45,790
I'm gonna add a package or I'm going to

00:08:43,240 --> 00:08:47,500
add a configuration into my project into

00:08:45,790 --> 00:08:48,880
the environment file I'm just going to

00:08:47,500 --> 00:08:49,540
go out I'm going to grab those top-level

00:08:48,880 --> 00:08:50,949
nodes

00:08:49,540 --> 00:08:53,110
I'm gonna iterate over those I'm gonna

00:08:50,949 --> 00:08:54,430
find an opening brace indicator and then

00:08:53,110 --> 00:08:55,480
finding that closing brace I'm gonna

00:08:54,430 --> 00:08:58,240
shove some code in there and we're done

00:08:55,480 --> 00:09:00,130
yeah simple as that right and the first

00:08:58,240 --> 00:09:02,500
time I saw that I was kind of lost like

00:09:00,130 --> 00:09:04,000
what are nodes what is what is all this

00:09:02,500 --> 00:09:06,220
you know what are we talking about here

00:09:04,000 --> 00:09:07,630
and this is where you're gonna if you're

00:09:06,220 --> 00:09:09,850
writing schematics this is your first

00:09:07,630 --> 00:09:11,769
introduction to an abstract syntax tree

00:09:09,850 --> 00:09:13,720
and it's important to know you don't

00:09:11,769 --> 00:09:14,949
need to be an expert about it but you do

00:09:13,720 --> 00:09:17,440
need to understand what it is so that

00:09:14,949 --> 00:09:19,570
you can leverage it yeah so an ast is

00:09:17,440 --> 00:09:22,420
kind of this structure of your code

00:09:19,570 --> 00:09:23,560
right so and you get this out of the box

00:09:22,420 --> 00:09:25,029
it's not like this is something that

00:09:23,560 --> 00:09:26,860
we're writing right all right so

00:09:25,029 --> 00:09:29,380
typescript provides the ability to say

00:09:26,860 --> 00:09:31,449
hey go and read this typescript file and

00:09:29,380 --> 00:09:33,790
give me the abstract syntax tree for it

00:09:31,449 --> 00:09:36,610
and then using that abstract syntax tree

00:09:33,790 --> 00:09:39,550
we can programmatically go through the

00:09:36,610 --> 00:09:41,079
code in our code right and find an exact

00:09:39,550 --> 00:09:43,089
place where we want to insert something

00:09:41,079 --> 00:09:45,310
so think again about the angular CLI

00:09:43,089 --> 00:09:47,260
when I'm adding a generating out a

00:09:45,310 --> 00:09:49,720
component I've got to go find that

00:09:47,260 --> 00:09:51,880
nearest module but then if you remember

00:09:49,720 --> 00:09:53,649
not only does it import the component

00:09:51,880 --> 00:09:55,930
for you up at the top of the file but

00:09:53,649 --> 00:09:58,000
there's also the declarations array now

00:09:55,930 --> 00:09:59,290
yeah maybe we could write some redjac so

00:09:58,000 --> 00:10:01,149
we could say let's try to find this

00:09:59,290 --> 00:10:03,940
declaration string and this opening

00:10:01,149 --> 00:10:06,399
brace or bracket and then let's try to

00:10:03,940 --> 00:10:07,660
stuff it in here that gets really kind

00:10:06,399 --> 00:10:10,180
of messy and you don't want to do that

00:10:07,660 --> 00:10:13,060
and so with abstract syntax trees we can

00:10:10,180 --> 00:10:15,220
logically find exactly where we want to

00:10:13,060 --> 00:10:17,769
insert code or update code or remove

00:10:15,220 --> 00:10:20,230
code from an existing file in our code

00:10:17,769 --> 00:10:21,730
base great so let's take a look at how

00:10:20,230 --> 00:10:27,699
we would use that back in our previous

00:10:21,730 --> 00:10:29,319
example and real quick this is a really

00:10:27,699 --> 00:10:31,779
exciting slide this is an example of

00:10:29,319 --> 00:10:33,300
what the ast kind of visually looks like

00:10:31,779 --> 00:10:36,670
this is a great resource called

00:10:33,300 --> 00:10:39,490
ast Explorer net but you can put in any

00:10:36,670 --> 00:10:40,720
code in there and choose the type of ast

00:10:39,490 --> 00:10:43,209
you want to look at and this will give

00:10:40,720 --> 00:10:45,730
you a visual breakdown of how the

00:10:43,209 --> 00:10:48,250
abstract syntax tree represents that

00:10:45,730 --> 00:10:50,630
code and so here you can see we can get

00:10:48,250 --> 00:10:52,069
very precise on identifiers and

00:10:50,630 --> 00:10:55,100
get some methods and anything you'd ever

00:10:52,069 --> 00:10:57,050
want to need to find exactly the line of

00:10:55,100 --> 00:10:59,060
code you're looking for one of the ways

00:10:57,050 --> 00:11:01,610
I think about abstract syntax trees is

00:10:59,060 --> 00:11:03,199
like the Dom right so we know that the

00:11:01,610 --> 00:11:05,360
Dom is basically a giant tree-like

00:11:03,199 --> 00:11:07,670
structure right starts with the body and

00:11:05,360 --> 00:11:09,410
we've got all of our sibling elements

00:11:07,670 --> 00:11:11,240
and child elements and grandchild in

00:11:09,410 --> 00:11:13,009
there on down right so you can kind of

00:11:11,240 --> 00:11:15,170
think about the abstract syntax tree in

00:11:13,009 --> 00:11:17,209
this kind of same structure and we can

00:11:15,170 --> 00:11:19,339
iterate through it we could find exactly

00:11:17,209 --> 00:11:20,660
the element or not the element that

00:11:19,339 --> 00:11:22,610
would be in the Dom we can find the

00:11:20,660 --> 00:11:26,240
exact position in the code where we want

00:11:22,610 --> 00:11:27,800
to make our modification and so now

00:11:26,240 --> 00:11:30,949
we're back to our previous example so in

00:11:27,800 --> 00:11:32,300
the first before we switched off we were

00:11:30,949 --> 00:11:36,790
looking at getting the position so now

00:11:32,300 --> 00:11:38,870
that we have the position we can see we

00:11:36,790 --> 00:11:42,860
access our method here called begin

00:11:38,870 --> 00:11:44,779
update we input our starting position we

00:11:42,860 --> 00:11:46,790
add our insertion and then we commit our

00:11:44,779 --> 00:11:49,040
update it's also important to note here

00:11:46,790 --> 00:11:51,319
that the tree and schematics allows us

00:11:49,040 --> 00:11:53,540
to make changes in a sort of

00:11:51,319 --> 00:11:55,939
transactional way and so we don't have

00:11:53,540 --> 00:11:57,889
to add any sort of undo logic to our

00:11:55,939 --> 00:11:59,449
schematic so that if something happens

00:11:57,889 --> 00:12:02,630
along the way we don't have to back out

00:11:59,449 --> 00:12:03,949
that logic and fix it yeah and that's

00:12:02,630 --> 00:12:05,360
really important because we don't want

00:12:03,949 --> 00:12:07,040
to start mucking with the file system

00:12:05,360 --> 00:12:08,389
and then halfway down we've got some

00:12:07,040 --> 00:12:10,430
sort of problem and then we've got to

00:12:08,389 --> 00:12:13,069
deal with getting back out of what we

00:12:10,430 --> 00:12:15,170
did know so that is one of the really

00:12:13,069 --> 00:12:17,149
great advantages of using schematics to

00:12:15,170 --> 00:12:21,290
generate code and to modify code in your

00:12:17,149 --> 00:12:24,110
angular projects ooh double sorry about

00:12:21,290 --> 00:12:25,610
that okay so then let's quickly talk

00:12:24,110 --> 00:12:28,100
about extending schematics

00:12:25,610 --> 00:12:30,439
so using schematics we've talked about

00:12:28,100 --> 00:12:33,290
adding files we've talked about removing

00:12:30,439 --> 00:12:35,269
files or modifying files excuse me but

00:12:33,290 --> 00:12:37,790
we can also use schematics to run

00:12:35,269 --> 00:12:40,699
external schematics so let's say I'm

00:12:37,790 --> 00:12:43,399
gonna write a schematic that maybe is

00:12:40,699 --> 00:12:45,110
going to install angular material all

00:12:43,399 --> 00:12:47,000
right so what we could do is we can use

00:12:45,110 --> 00:12:49,370
this function called external schematic

00:12:47,000 --> 00:12:51,920
the first argument into this function is

00:12:49,370 --> 00:12:53,360
the package name so in this instance I'm

00:12:51,920 --> 00:12:55,639
going to say let's go ahead and run

00:12:53,360 --> 00:12:58,040
angular material and then within that

00:12:55,639 --> 00:13:00,019
collection we're gonna run the ng add

00:12:58,040 --> 00:13:01,639
schematic so we're going to add the

00:13:00,019 --> 00:13:03,870
angular material library into our

00:13:01,639 --> 00:13:06,510
project the third argument

00:13:03,870 --> 00:13:08,160
are the options so just like the options

00:13:06,510 --> 00:13:09,660
that you might get prompted for if

00:13:08,160 --> 00:13:11,730
you're using angular material on the

00:13:09,660 --> 00:13:14,880
command line or you might specify when

00:13:11,730 --> 00:13:17,040
you actually run ng ad we can specify

00:13:14,880 --> 00:13:19,470
those options when we're running an

00:13:17,040 --> 00:13:20,820
external schematic there's also this

00:13:19,470 --> 00:13:22,560
other little thing called a no op

00:13:20,820 --> 00:13:24,390
function and all we're doing here is

00:13:22,560 --> 00:13:26,100
we're basically saying hey if the user

00:13:24,390 --> 00:13:27,600
wants to install angular material let's

00:13:26,100 --> 00:13:31,400
go ahead and do that for them but if

00:13:27,600 --> 00:13:31,400
they don't let's just not do anything

00:13:31,670 --> 00:13:36,840
and when you start writing schematics

00:13:34,470 --> 00:13:38,550
it's you'll quickly find that there can

00:13:36,840 --> 00:13:40,320
be a lot to do a lot to figure out a lot

00:13:38,550 --> 00:13:42,420
to learn but it's important to know that

00:13:40,320 --> 00:13:44,220
a lot of these problems that you may be

00:13:42,420 --> 00:13:46,550
encountering have already been solved

00:13:44,220 --> 00:13:48,990
and so we can leverage a lot of great

00:13:46,550 --> 00:13:52,350
schematic repositories like the CLI and

00:13:48,990 --> 00:13:55,350
material in G Rx and at this point it's

00:13:52,350 --> 00:13:56,310
really okay to copy an attribute so you

00:13:55,350 --> 00:13:58,380
probably don't want to write the logic

00:13:56,310 --> 00:13:59,910
that says find the closest module and

00:13:58,380 --> 00:14:02,060
add its way a relation right that

00:13:59,910 --> 00:14:04,410
problems been solved so it's okay to

00:14:02,060 --> 00:14:06,870
find that code and bring it into your

00:14:04,410 --> 00:14:08,790
schematic application and we've done

00:14:06,870 --> 00:14:10,740
that a lot in our schematics so it's

00:14:08,790 --> 00:14:12,360
it's good when you're kind of learning

00:14:10,740 --> 00:14:13,740
about schematics you might want to start

00:14:12,360 --> 00:14:15,420
looking at some of these projects and

00:14:13,740 --> 00:14:17,400
saying how did they do this how do they

00:14:15,420 --> 00:14:18,830
solve this particular problem you know

00:14:17,400 --> 00:14:22,710
I'm trying to do something maybe similar

00:14:18,830 --> 00:14:24,690
in my codebase and so I like to always

00:14:22,710 --> 00:14:27,570
go in and look at the source code in the

00:14:24,690 --> 00:14:29,670
CLI and you get material and ng rx kind

00:14:27,570 --> 00:14:31,710
of see how they did things and then

00:14:29,670 --> 00:14:33,030
sometimes grab some of those utility

00:14:31,710 --> 00:14:36,560
functions that they have and bring them

00:14:33,030 --> 00:14:36,560
into my own project yeah great idea

00:14:37,400 --> 00:14:41,520
alright so when we started writing our

00:14:39,870 --> 00:14:43,650
schematics we ran into a problem of how

00:14:41,520 --> 00:14:44,970
do we get a quick feedback cycle or a

00:14:43,650 --> 00:14:46,140
quick feedback loop when we're

00:14:44,970 --> 00:14:48,240
developing these things we're writing

00:14:46,140 --> 00:14:49,770
this schematic code and it's maybe it's

00:14:48,240 --> 00:14:52,440
running into the terminal but I want to

00:14:49,770 --> 00:14:57,450
see it I want that ng serve experience

00:14:52,440 --> 00:14:59,310
right and what I really wanted was

00:14:57,450 --> 00:15:05,280
something like this where I could run a

00:14:59,310 --> 00:15:07,350
schematic and visually see what happened

00:15:05,280 --> 00:15:09,240
what was the diff how did it change from

00:15:07,350 --> 00:15:12,090
the initial state to the next state and

00:15:09,240 --> 00:15:14,220
so we put together a lot of great ideas

00:15:12,090 --> 00:15:15,660
that were already out there

00:15:14,220 --> 00:15:17,880
and put some scripts together and came

00:15:15,660 --> 00:15:19,340
up with this idea of a sandbox and this

00:15:17,880 --> 00:15:21,600
allows us to execute our schematic

00:15:19,340 --> 00:15:24,810
against a version controlled application

00:15:21,600 --> 00:15:26,400
and then quickly see how it changed and

00:15:24,810 --> 00:15:28,470
then reset it and run it all over again

00:15:26,400 --> 00:15:30,210
and it's running inside the context of

00:15:28,470 --> 00:15:31,110
the CLI we're not using the schematic

00:15:30,210 --> 00:15:32,880
CLI anymore

00:15:31,110 --> 00:15:35,880
correct correct so let's take a look at

00:15:32,880 --> 00:15:37,380
how we did that so it's pretty simple

00:15:35,880 --> 00:15:39,270
we're just gonna ng new up an

00:15:37,380 --> 00:15:41,730
application in this instance we're gonna

00:15:39,270 --> 00:15:44,370
call its sandbox and that's all gonna

00:15:41,730 --> 00:15:45,780
live inside of a when you generate out

00:15:44,370 --> 00:15:48,450
that blank remember we talked about the

00:15:45,780 --> 00:15:50,250
schematic CLI and the blank command so

00:15:48,450 --> 00:15:52,050
after we generate out a blank schematics

00:15:50,250 --> 00:15:54,750
project we just throw in an angular

00:15:52,050 --> 00:15:55,980
project right inside of there as well we

00:15:54,750 --> 00:15:57,840
version control that so that way we

00:15:55,980 --> 00:16:00,600
could get that diffing between each run

00:15:57,840 --> 00:16:02,520
of our schematic and then we're gonna

00:16:00,600 --> 00:16:04,290
use the typescript compiler so we're

00:16:02,520 --> 00:16:06,450
gonna write our schematics using

00:16:04,290 --> 00:16:08,880
typescript and then to execute them we

00:16:06,450 --> 00:16:11,670
need to compile them down using TSC and

00:16:08,880 --> 00:16:13,800
then through the magic of npm linking we

00:16:11,670 --> 00:16:15,810
can link in our schematic into our

00:16:13,800 --> 00:16:18,900
sandbox so that way we can execute it in

00:16:15,810 --> 00:16:20,940
the context of the angular CLI yep once

00:16:18,900 --> 00:16:22,920
we have all that linking in place then

00:16:20,940 --> 00:16:25,530
we can add one or two scripts that will

00:16:22,920 --> 00:16:27,900
essentially CD into the sandbox execute

00:16:25,530 --> 00:16:30,330
the schematic just like you would with

00:16:27,900 --> 00:16:32,580
the CLI and then if you choose so you

00:16:30,330 --> 00:16:34,260
can run any sort of tests who assert

00:16:32,580 --> 00:16:36,480
that you know everything's working and

00:16:34,260 --> 00:16:41,490
nothing's broke so you can run a lanta

00:16:36,480 --> 00:16:43,320
test in a prod build so finally let's

00:16:41,490 --> 00:16:46,140
talk about some use cases of schematics

00:16:43,320 --> 00:16:48,690
I think we we we know that the CLI uses

00:16:46,140 --> 00:16:50,010
schematics and is very useful for us in

00:16:48,690 --> 00:16:51,930
our Inc and our jobs as angular

00:16:50,010 --> 00:16:54,060
developers but why would I actually want

00:16:51,930 --> 00:16:56,580
to write my own schematic right and so

00:16:54,060 --> 00:16:58,710
one of the reasons why I like writing

00:16:56,580 --> 00:17:01,560
schematics is that I can scaffold out

00:16:58,710 --> 00:17:03,300
code really really quickly so if there's

00:17:01,560 --> 00:17:05,880
something that maybe I'm doing

00:17:03,300 --> 00:17:08,130
repetitively or like we mentioned with

00:17:05,880 --> 00:17:10,320
installing prettier I can scaffold out

00:17:08,130 --> 00:17:12,750
code really really fast and I can write

00:17:10,320 --> 00:17:14,160
it once and then be done yeah and

00:17:12,750 --> 00:17:16,230
third-party dependencies this is one of

00:17:14,160 --> 00:17:17,820
my favorite ones because I find myself

00:17:16,230 --> 00:17:20,370
doing the same thing over and over again

00:17:17,820 --> 00:17:23,040
and this is my opportunity to help ever

00:17:20,370 --> 00:17:25,440
the community and set this up once for

00:17:23,040 --> 00:17:25,740
everyone and they can benefit from it as

00:17:25,440 --> 00:17:27,959
well

00:17:25,740 --> 00:17:30,390
yeah right like installing prettier

00:17:27,959 --> 00:17:32,549
just or maybe angularfire or whatever it

00:17:30,390 --> 00:17:35,039
is I see we can go out there and we can

00:17:32,549 --> 00:17:37,440
start writing schematics for the entire

00:17:35,039 --> 00:17:41,549
community to make it easier to install

00:17:37,440 --> 00:17:43,200
and use 30 third-party dependencies the

00:17:41,549 --> 00:17:44,850
other use case might be just straight

00:17:43,200 --> 00:17:46,230
trivial stuff you know things that

00:17:44,850 --> 00:17:48,659
you're doing over and over and over

00:17:46,230 --> 00:17:50,850
again and so it just makes it easy to

00:17:48,659 --> 00:17:52,770
just write it once and then you can

00:17:50,850 --> 00:17:54,600
generate it out every time you need it

00:17:52,770 --> 00:17:57,240
yeah and if you're a part of a larger

00:17:54,600 --> 00:17:59,490
larger organization consistency may be

00:17:57,240 --> 00:18:01,649
important so if you have a specific

00:17:59,490 --> 00:18:04,200
pattern that you want to help enforce

00:18:01,649 --> 00:18:06,270
schematic may help you do that exactly

00:18:04,200 --> 00:18:09,779
so maybe there's an architecture that

00:18:06,270 --> 00:18:11,880
your organization uses or that pattern

00:18:09,779 --> 00:18:13,830
like you mentioned Kevin and we can

00:18:11,880 --> 00:18:15,210
write a schematic and say hey every time

00:18:13,830 --> 00:18:17,730
you need to do this just go ahead and

00:18:15,210 --> 00:18:20,190
run that schematic so instead of copy

00:18:17,730 --> 00:18:22,350
pasting between projects and and kind of

00:18:20,190 --> 00:18:23,789
opening up one repo and say oh I got to

00:18:22,350 --> 00:18:26,220
grab that code from here and bring it

00:18:23,789 --> 00:18:27,809
over there we can use schematics and we

00:18:26,220 --> 00:18:30,539
can just have a schematic that will

00:18:27,809 --> 00:18:34,789
generate out that architecture that that

00:18:30,539 --> 00:18:37,830
consistent code for us every time yep

00:18:34,789 --> 00:18:39,210
with that thank you very much and we'll

00:18:37,830 --> 00:18:41,610
be up here if you have any questions oh

00:18:39,210 --> 00:18:44,490
wait one more thing yes we got a

00:18:41,610 --> 00:18:45,929
workshop in a half hour we do so if this

00:18:44,490 --> 00:18:47,549
sounds exciting to you and you're like

00:18:45,929 --> 00:18:49,350
wow this is really neat but how do we

00:18:47,549 --> 00:18:51,840
actually like get into it and build a

00:18:49,350 --> 00:18:55,110
schematic join us over in the Grand

00:18:51,840 --> 00:18:56,669
Ballroom ad and for an hour you get a

00:18:55,110 --> 00:18:58,289
hanging out with Kevin and I and we're

00:18:56,669 --> 00:19:01,500
gonna actually install the schematics

00:18:58,289 --> 00:19:03,419
CLI we're gonna create a blank project

00:19:01,500 --> 00:19:04,919
and then we're gonna use that sandbox

00:19:03,419 --> 00:19:06,720
approach and we're gonna actually write

00:19:04,919 --> 00:19:08,880
some schematics together so to be a lot

00:19:06,720 --> 00:19:11,210
of fun thank you

00:19:08,880 --> 00:19:14,329
all right everybody give it up

00:19:11,210 --> 00:19:14,329
[Applause]

00:19:19,100 --> 00:19:25,719
[Music]

00:19:31,320 --> 00:19:33,380

YouTube URL: https://www.youtube.com/watch?v=FeZ40kXS0OI


