Title: Amazing Backends for Angular Devs with NestJS | Ely Lucas
Publication date: 2019-05-06
Playlist: ng-conf 2019
Description: 
	Your front end is killer. Itâ€™s jacked up with Angular and powered by TypeScript. You got well defined services, slim components, and pipes that make your data shine. How about your backend? Take your existing skills and make amazing backends with NestJS! Nest is a framework that embraces TypeScript and the power of Node. With it, you can write your backends in a style that feels similar to writing Angular apps, but also embraces modern MVC architectures found in other popular backend frameworks. And since it is based on Node and Express, you benefit from the deep ecosystem of libraries found there.

In this workshop, we will dive into how using TypeScript for server side apps helps us scale our development and keeps the code base uniform from front to back. We will see how the Nest framework helps us improve code quality and reduce complexity. Best of all, will go over how to create an API that can be consumed from our Angular apps.

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:07,920 --> 00:00:11,170
[Music]

00:00:11,719 --> 00:00:17,160
thank you all right so I do have a

00:00:14,700 --> 00:00:18,510
getting started slide up here so if

00:00:17,160 --> 00:00:20,850
you're going to be following along this

00:00:18,510 --> 00:00:22,650
is a hands-on lab or hands-on workshop

00:00:20,850 --> 00:00:24,390
we're gonna be breaking off into like a

00:00:22,650 --> 00:00:27,359
few different labs so if you do want to

00:00:24,390 --> 00:00:30,960
follow along please go out and get the

00:00:27,359 --> 00:00:32,460
get repo and do an NPM install and then

00:00:30,960 --> 00:00:33,899
hopefully with like no battling the

00:00:32,460 --> 00:00:35,430
Wi-Fi and stuff like that by the time we

00:00:33,899 --> 00:00:39,360
actually get to the lab portion will be

00:00:35,430 --> 00:00:44,129
a all installed and ready to go I'm just

00:00:39,360 --> 00:00:47,129
giving a minute there okay great so I

00:00:44,129 --> 00:00:48,329
will have this slide up again in a few

00:00:47,129 --> 00:00:50,129
minutes when we get to the lab portion

00:00:48,329 --> 00:00:52,770
so if you don't quite got it there yet

00:00:50,129 --> 00:00:53,699
don't fret we'll get the repo URL and

00:00:52,770 --> 00:00:56,399
stuff back up again

00:00:53,699 --> 00:00:58,859
okay great so welcome everybody to this

00:00:56,399 --> 00:01:02,940
workshop on building awesome backends

00:00:58,859 --> 00:01:06,150
for angular devs with SJS my name is Eli

00:01:02,940 --> 00:01:08,880
Lucas and I am a developer advocate on

00:01:06,150 --> 00:01:10,770
ik and I'm really passionate about doing

00:01:08,880 --> 00:01:12,390
web and mobile applications and I've

00:01:10,770 --> 00:01:15,119
been doing so for about twenty years now

00:01:12,390 --> 00:01:17,820
and I'm extremely honored and excited

00:01:15,119 --> 00:01:19,439
today to bring you what I think is a

00:01:17,820 --> 00:01:20,939
pretty cool thing happening with web

00:01:19,439 --> 00:01:23,930
development today and that's the ability

00:01:20,939 --> 00:01:29,520
to do full stack typescript applications

00:01:23,930 --> 00:01:33,030
using angular and SJS but first off what

00:01:29,520 --> 00:01:35,189
is a full stack developer to me a full

00:01:33,030 --> 00:01:38,610
stack developer is probably somebody who

00:01:35,189 --> 00:01:41,220
is efficient at doing code on both the

00:01:38,610 --> 00:01:43,560
front end and the back end of an

00:01:41,220 --> 00:01:46,439
application they may not necessarily be

00:01:43,560 --> 00:01:48,180
experts in one in both areas they

00:01:46,439 --> 00:01:50,369
probably have a specialty in some area

00:01:48,180 --> 00:01:51,899
or another but to me a full stack

00:01:50,369 --> 00:01:53,850
developer if you like a bug request

00:01:51,899 --> 00:01:55,170
comes in or a feature request comes in a

00:01:53,850 --> 00:01:57,840
full stack developer or someone who's

00:01:55,170 --> 00:02:00,630
able to take that ticket and implement

00:01:57,840 --> 00:02:02,040
it into end but one thing that I've at

00:02:00,630 --> 00:02:04,140
least noticed over the past few years

00:02:02,040 --> 00:02:06,420
that it's becoming increasingly more

00:02:04,140 --> 00:02:09,660
difficult to be a full stack developer

00:02:06,420 --> 00:02:11,220
and that's mainly because the

00:02:09,660 --> 00:02:12,300
technologies that we use on both the

00:02:11,220 --> 00:02:13,410
client and the server are just

00:02:12,300 --> 00:02:14,820
increasing in calm

00:02:13,410 --> 00:02:19,170
clucks today more and more and more

00:02:14,820 --> 00:02:21,810
right and if you think about it like

00:02:19,170 --> 00:02:23,550
oftentimes nowadays your car your front

00:02:21,810 --> 00:02:25,080
and then your back end are sometimes

00:02:23,550 --> 00:02:27,330
written in different languages on

00:02:25,080 --> 00:02:29,700
different platforms using different code

00:02:27,330 --> 00:02:31,350
editors using different frameworks and

00:02:29,700 --> 00:02:33,960
sometimes even on different operating

00:02:31,350 --> 00:02:35,670
systems and to expect somebody to be a

00:02:33,960 --> 00:02:37,200
full-stack developer and make that

00:02:35,670 --> 00:02:40,950
context switch back and forth between

00:02:37,200 --> 00:02:43,320
those twos is a pretty large ordeal so a

00:02:40,950 --> 00:02:46,440
few years ago I was a tech lead on a

00:02:43,320 --> 00:02:51,120
project and we had an angularjs

00:02:46,440 --> 00:02:53,400
front-end and a Java backends and our

00:02:51,120 --> 00:02:55,860
development staff was kind of set up to

00:02:53,400 --> 00:02:59,490
be like for JavaScript developers to

00:02:55,860 --> 00:03:01,320
like one Java developer and it wasn't

00:02:59,490 --> 00:03:03,090
long until our front-end team was like

00:03:01,320 --> 00:03:06,090
really outpacing our back-end team and

00:03:03,090 --> 00:03:08,130
so know our initial solution was let's

00:03:06,090 --> 00:03:09,540
you know make everybody a full stack

00:03:08,130 --> 00:03:11,250
developer let's get all the JavaScript

00:03:09,540 --> 00:03:13,440
developers up to speed on Java and

00:03:11,250 --> 00:03:15,780
whatnot get them up and running in

00:03:13,440 --> 00:03:18,690
IntelliJ and the build processes and

00:03:15,780 --> 00:03:21,090
stuff that they had to do and it took a

00:03:18,690 --> 00:03:23,070
really long time and the results kind of

00:03:21,090 --> 00:03:24,390
like went back to the front-end

00:03:23,070 --> 00:03:25,530
developers or front-end developers and

00:03:24,390 --> 00:03:28,680
the back-end developers we're back in

00:03:25,530 --> 00:03:30,540
developers so we're like okay we got a

00:03:28,680 --> 00:03:32,190
majority of JavaScript developers what

00:03:30,540 --> 00:03:34,200
can we do to help improve our efficiency

00:03:32,190 --> 00:03:35,910
it's like well we have node what if we

00:03:34,200 --> 00:03:38,520
wrote our front and back in both in

00:03:35,910 --> 00:03:40,560
JavaScript using node and we kind of

00:03:38,520 --> 00:03:42,209
looked at each other and we're like yeah

00:03:40,560 --> 00:03:46,350
this this sounds like a pretty cool idea

00:03:42,209 --> 00:03:48,300
right let's do it let's get started and

00:03:46,350 --> 00:03:50,220
so that's what we did where we had a

00:03:48,300 --> 00:03:53,940
series of micro services and that had to

00:03:50,220 --> 00:03:55,020
all be written and no and at first I was

00:03:53,940 --> 00:03:57,660
starting to go really really well

00:03:55,020 --> 00:03:59,610
because node and Express are really

00:03:57,660 --> 00:04:01,680
simple right you have a route Handler

00:03:59,610 --> 00:04:03,300
and you have a function your function

00:04:01,680 --> 00:04:09,000
does some stuff and returns back at data

00:04:03,300 --> 00:04:10,590
that expressed serves on out but what we

00:04:09,000 --> 00:04:12,030
kind of discovered with all these micro

00:04:10,590 --> 00:04:14,160
services that we were writing is that

00:04:12,030 --> 00:04:17,190
the apps kind of went one of two ways

00:04:14,160 --> 00:04:19,169
and that is kind of because Express

00:04:17,190 --> 00:04:20,640
doesn't offer a whole lot in terms of

00:04:19,169 --> 00:04:23,160
guidance on how you should architect

00:04:20,640 --> 00:04:25,070
your app so the first thing that we saw

00:04:23,160 --> 00:04:27,170
was we would open up

00:04:25,070 --> 00:04:29,000
and we'd be like Oh like right what what

00:04:27,170 --> 00:04:31,310
is this here's like this thousand long

00:04:29,000 --> 00:04:34,940
function route handler that's doing

00:04:31,310 --> 00:04:36,860
database access and validation and air

00:04:34,940 --> 00:04:38,030
logging and management all within the

00:04:36,860 --> 00:04:40,100
same thing right we've all seen this

00:04:38,030 --> 00:04:42,080
before this giant mess of spaghetti code

00:04:40,100 --> 00:04:43,940
that you're afraid if you kind of look

00:04:42,080 --> 00:04:45,860
at it sideways it's going to break and

00:04:43,940 --> 00:04:49,520
your systems going to go down right

00:04:45,860 --> 00:04:51,440
these aren't very fun to work in the

00:04:49,520 --> 00:04:53,570
second thing that I saw was that we had

00:04:51,440 --> 00:04:56,630
like a pretty good application architect

00:04:53,570 --> 00:04:59,330
working on D on the Express micro

00:04:56,630 --> 00:05:00,890
service and they would take the code and

00:04:59,330 --> 00:05:04,130
kind of abstract it out into different

00:05:00,890 --> 00:05:06,650
areas of functionality kind of like you

00:05:04,130 --> 00:05:07,700
know their own built home built MVC type

00:05:06,650 --> 00:05:10,490
architecture model view controller

00:05:07,700 --> 00:05:12,380
architecture and so they had good good

00:05:10,490 --> 00:05:13,940
controllers they had middleware handling

00:05:12,380 --> 00:05:16,880
a lot of the cross-cutting concerns and

00:05:13,940 --> 00:05:18,650
this was pretty good as well but the

00:05:16,880 --> 00:05:20,570
problem with this is that not one

00:05:18,650 --> 00:05:22,100
application room by one architect was

00:05:20,570 --> 00:05:24,890
the same as a one written by another

00:05:22,100 --> 00:05:26,330
architect and it didn't really translate

00:05:24,890 --> 00:05:28,640
that well like if we're trying to bring

00:05:26,330 --> 00:05:30,140
in other developers into our teams like

00:05:28,640 --> 00:05:33,230
okay we have to kind of like train you

00:05:30,140 --> 00:05:38,210
up on this MBC homegrown framework that

00:05:33,230 --> 00:05:39,470
we have here and so the reason that this

00:05:38,210 --> 00:05:41,600
happens I've mentioned a little bit

00:05:39,470 --> 00:05:44,330
earlier it's mainly because nest or

00:05:41,600 --> 00:05:46,820
Express does not provide a whole lot of

00:05:44,330 --> 00:05:50,320
guidance on how to architect an app and

00:05:46,820 --> 00:05:53,720
that's where I like to introduce you to

00:05:50,320 --> 00:05:56,300
nest Jas and so I think first and

00:05:53,720 --> 00:05:59,630
foremost of what you need to know about

00:05:56,300 --> 00:06:02,960
an SJS is it has a pretty badass kitten

00:05:59,630 --> 00:06:04,220
logo right and if you like cats you're

00:06:02,960 --> 00:06:05,720
gonna go to the nest AS site you're

00:06:04,220 --> 00:06:07,280
gonna see cats everywhere so if you like

00:06:05,720 --> 00:06:10,250
cats you're automatically gonna like it

00:06:07,280 --> 00:06:11,810
nÃ©stor yes the second thing I want you

00:06:10,250 --> 00:06:14,150
to know and it's probably a little bit

00:06:11,810 --> 00:06:18,550
more important than the first is that

00:06:14,150 --> 00:06:22,010
nest is a framework for building

00:06:18,550 --> 00:06:24,470
backends on top of node but not only is

00:06:22,010 --> 00:06:25,940
it a framework it's also a platform that

00:06:24,470 --> 00:06:28,130
you can use to build a variety of

00:06:25,940 --> 00:06:29,930
different types of applications so you

00:06:28,130 --> 00:06:32,660
can use it to build rest-based API is

00:06:29,930 --> 00:06:34,150
graphic QL based API is you can build

00:06:32,660 --> 00:06:35,930
micro services and real-time

00:06:34,150 --> 00:06:38,120
communications between client

00:06:35,930 --> 00:06:40,039
and servers with nests j/s it's kind of

00:06:38,120 --> 00:06:41,810
like this all-encompassing platform that

00:06:40,039 --> 00:06:42,910
provides a lot of the building tools

00:06:41,810 --> 00:06:46,820
that you need

00:06:42,910 --> 00:06:48,800
what makes nest somewhat unique though

00:06:46,820 --> 00:06:51,199
is that it's a highly opinionated

00:06:48,800 --> 00:06:54,259
framework and it really values

00:06:51,199 --> 00:06:55,789
consistency between applications and the

00:06:54,259 --> 00:06:58,190
way that it does that it has us like the

00:06:55,789 --> 00:06:59,780
series of building blocks and once you

00:06:58,190 --> 00:07:02,300
get to know these building blocks you're

00:06:59,780 --> 00:07:04,900
going to know where your application

00:07:02,300 --> 00:07:07,639
logic should go for that particular area

00:07:04,900 --> 00:07:09,919
another thing that nest highly values is

00:07:07,639 --> 00:07:11,810
having a low learning curve especially

00:07:09,919 --> 00:07:14,180
for front-end developers wanting to get

00:07:11,810 --> 00:07:15,979
into back in development work and the

00:07:14,180 --> 00:07:20,470
way that nest did this was that they

00:07:15,979 --> 00:07:23,150
really they're highly influenced by

00:07:20,470 --> 00:07:25,639
angular and so a lot of people will call

00:07:23,150 --> 00:07:28,070
like building an SAS app kind of like

00:07:25,639 --> 00:07:29,810
building angular on the backend and so

00:07:28,070 --> 00:07:32,210
there's a lot of concepts that are

00:07:29,810 --> 00:07:34,099
similar or the same and nest that they

00:07:32,210 --> 00:07:41,180
are in angular and you'll see that as we

00:07:34,099 --> 00:07:43,039
go along but another thing that I think

00:07:41,180 --> 00:07:44,330
is like really cool about in SAS is if

00:07:43,039 --> 00:07:45,490
you're coming over from some other

00:07:44,330 --> 00:07:47,870
enterprise-grade

00:07:45,490 --> 00:07:51,530
back in framework maybe something like

00:07:47,870 --> 00:07:54,139
an asp.net MVC or web api or a spring or

00:07:51,530 --> 00:07:55,940
Ruby on Rails you're kind of used to

00:07:54,139 --> 00:07:58,460
this enterprise-grade framework and

00:07:55,940 --> 00:08:00,139
platform to run on and if you tried Ness

00:07:58,460 --> 00:08:01,789
or if you try to express you might have

00:08:00,139 --> 00:08:04,490
found it to be you know a little light

00:08:01,789 --> 00:08:06,949
well Ness Jas brings a lot of those

00:08:04,490 --> 00:08:08,599
Enterprise type great features to you as

00:08:06,949 --> 00:08:10,669
well so if you're if you're a back-end

00:08:08,599 --> 00:08:13,039
developer on another platform you're

00:08:10,669 --> 00:08:17,300
coming to node and you'll find Ness just

00:08:13,039 --> 00:08:19,970
has those same similar concepts but what

00:08:17,300 --> 00:08:23,479
I like most about nest is that it makes

00:08:19,970 --> 00:08:26,720
use of typescript and yes you could have

00:08:23,479 --> 00:08:28,789
used typescript on on Express but nest

00:08:26,720 --> 00:08:33,020
really utilizes typescript to its full

00:08:28,789 --> 00:08:34,520
potential and as angular des I don't

00:08:33,020 --> 00:08:36,079
need to tell you why typescript is

00:08:34,520 --> 00:08:37,190
awesome or amazing I don't need to go

00:08:36,079 --> 00:08:41,180
into that whole spiel because you

00:08:37,190 --> 00:08:43,610
already know but what it comes back to

00:08:41,180 --> 00:08:45,020
for me if you remember what what kind of

00:08:43,610 --> 00:08:47,270
one of the things I thought what made a

00:08:45,020 --> 00:08:47,800
good full stack developer was kind of

00:08:47,270 --> 00:08:51,100
having

00:08:47,800 --> 00:08:52,750
similar platforms on both sides and so

00:08:51,100 --> 00:08:54,459
when you use an angular and when you're

00:08:52,750 --> 00:08:56,560
using nest you're using typescript

00:08:54,459 --> 00:08:58,120
you're probably using the same code

00:08:56,560 --> 00:09:00,310
editor you're using the same type of

00:08:58,120 --> 00:09:02,260
build tooling to build out your

00:09:00,310 --> 00:09:04,269
applications so switching back and forth

00:09:02,260 --> 00:09:08,680
between the product projects the context

00:09:04,269 --> 00:09:11,290
switching is a lot smoother so here's

00:09:08,680 --> 00:09:13,690
the list of the nest building blocks and

00:09:11,290 --> 00:09:15,519
as angular developers you're gonna find

00:09:13,690 --> 00:09:17,260
a lot of these similar and that's a good

00:09:15,519 --> 00:09:19,329
thing because there are concepts inside

00:09:17,260 --> 00:09:23,740
of nest our veil is very similar to the

00:09:19,329 --> 00:09:25,839
concepts and said in angular and these

00:09:23,740 --> 00:09:29,230
are kind of like a set of abstractions

00:09:25,839 --> 00:09:32,079
that once you get to learn these you're

00:09:29,230 --> 00:09:34,000
going to know where to put particular

00:09:32,079 --> 00:09:35,380
types of business logic inside your code

00:09:34,000 --> 00:09:36,820
and if you go from project to project

00:09:35,380 --> 00:09:39,250
you know as long as you're following

00:09:36,820 --> 00:09:41,110
these set of building blocks it's going

00:09:39,250 --> 00:09:42,940
to be quick and easy to get up and

00:09:41,110 --> 00:09:46,899
running on those other types of projects

00:09:42,940 --> 00:09:48,550
and so to learn those you can go to the

00:09:46,899 --> 00:09:50,079
nest documentation this is kind of where

00:09:48,550 --> 00:09:51,760
I got started the first time that I saw

00:09:50,079 --> 00:09:54,339
the documentation which by the way it's

00:09:51,760 --> 00:09:55,870
really great documentation there was

00:09:54,339 --> 00:09:57,190
something about this that really really

00:09:55,870 --> 00:09:59,260
hit home for me that made it feel like

00:09:57,190 --> 00:10:01,660
this was the framework for me and if you

00:09:59,260 --> 00:10:03,850
noticed in the top left hand corner they

00:10:01,660 --> 00:10:10,230
have an actual hamburger icon for their

00:10:03,850 --> 00:10:10,230
menu and so they actually have a real a

00:10:10,529 --> 00:10:15,970
real hamburger menu I was like okay like

00:10:14,170 --> 00:10:17,980
this is a cool framework being a mobile

00:10:15,970 --> 00:10:19,959
developer I'm all about the hamburgers

00:10:17,980 --> 00:10:23,320
menus and stuff like that so this is the

00:10:19,959 --> 00:10:25,000
framework for me all right so for this

00:10:23,320 --> 00:10:26,890
lab what we're going to do is we're

00:10:25,000 --> 00:10:28,959
going to build a full stack typescript

00:10:26,890 --> 00:10:31,060
application and I was trying to think

00:10:28,959 --> 00:10:34,149
like what what can we build that's going

00:10:31,060 --> 00:10:36,040
to you know maybe it'd be a good demo

00:10:34,149 --> 00:10:37,750
app and the first thing I couldn't Emine

00:10:36,040 --> 00:10:39,730
was you know what to do app right

00:10:37,750 --> 00:10:42,100
everybody does to do apps are kind of

00:10:39,730 --> 00:10:43,959
over down but for me like this great

00:10:42,100 --> 00:10:46,449
technology deserves something better

00:10:43,959 --> 00:10:48,070
than a to-do app because to do apps are

00:10:46,449 --> 00:10:50,620
kind of lame so it's like okay we're

00:10:48,070 --> 00:10:52,149
here at ng-conf ng-conf is spacing this

00:10:50,620 --> 00:10:54,130
year let's all be space Rangers and

00:10:52,149 --> 00:10:56,500
let's build an app that we can use to

00:10:54,130 --> 00:10:59,010
see a list of missions that we can go on

00:10:56,500 --> 00:11:01,650
as space Rangers and with it we

00:10:59,010 --> 00:11:06,750
can create new missions and whatnot and

00:11:01,650 --> 00:11:09,240
I called this go Space Ranger and here's

00:11:06,750 --> 00:11:13,290
the application and so the application

00:11:09,240 --> 00:11:15,030
you're gonna get to see a list of a list

00:11:13,290 --> 00:11:16,950
of missions to go on you're gonna be

00:11:15,030 --> 00:11:19,560
able to create new missions give them a

00:11:16,950 --> 00:11:21,480
reward mark them as done or not you're

00:11:19,560 --> 00:11:26,010
also gonna be able to update and delete

00:11:21,480 --> 00:11:28,320
them alright I know what you think it's

00:11:26,010 --> 00:11:30,270
just another to-do app right but it's

00:11:28,320 --> 00:11:33,840
much cooler on that because you know we

00:11:30,270 --> 00:11:36,750
got space Rangers so I mentioned earlier

00:11:33,840 --> 00:11:39,060
I'm a developer advocate for ionic and I

00:11:36,750 --> 00:11:40,710
want our Ghost Space Ranger app to be a

00:11:39,060 --> 00:11:42,240
mobile application that they can use for

00:11:40,710 --> 00:11:46,170
that and if you're not familiar with

00:11:42,240 --> 00:11:47,520
ionic ionic is a set of UI library tool

00:11:46,170 --> 00:11:49,500
kits that you can use to build mobile

00:11:47,520 --> 00:11:51,450
applications for iOS and Android

00:11:49,500 --> 00:11:53,580
and for this you don't need to be at all

00:11:51,450 --> 00:11:55,220
familiar with ionic all you need to know

00:11:53,580 --> 00:11:57,630
is that it's a UI library that's used

00:11:55,220 --> 00:11:59,220
and just kind of like use the components

00:11:57,630 --> 00:12:02,040
in there most of it's already like laid

00:11:59,220 --> 00:12:03,990
out for you but at work we were talking

00:12:02,040 --> 00:12:05,730
about this why I kind of like okay this

00:12:03,990 --> 00:12:08,760
is kind of cool we're gonna dub this the

00:12:05,730 --> 00:12:11,640
Ian stack so the ionic angular and SJS

00:12:08,760 --> 00:12:13,910
stack you know it's the ultimate stack

00:12:11,640 --> 00:12:16,350
for building full stab full stack

00:12:13,910 --> 00:12:20,940
typescript applications for mobile and

00:12:16,350 --> 00:12:22,230
web okay in the first lab what we're

00:12:20,940 --> 00:12:23,730
gonna do is we're going to get our ghost

00:12:22,230 --> 00:12:25,920
space ranger app up and running and

00:12:23,730 --> 00:12:28,680
we're going to list out the missions and

00:12:25,920 --> 00:12:30,330
these proto so from the all the way from

00:12:28,680 --> 00:12:32,820
the back end to the front end and the

00:12:30,330 --> 00:12:34,500
angular app and the concepts that we're

00:12:32,820 --> 00:12:36,750
gonna go over here are controllers

00:12:34,500 --> 00:12:38,930
services and interceptors so let me

00:12:36,750 --> 00:12:42,420
introduce those to you real quick

00:12:38,930 --> 00:12:44,370
so nest when it comes down to it is an

00:12:42,420 --> 00:12:46,560
MVC Model View controller framework and

00:12:44,370 --> 00:12:48,510
so in an MVC framework controllers are

00:12:46,560 --> 00:12:50,820
responsible for listening to requests

00:12:48,510 --> 00:12:53,730
that come in and formulating the

00:12:50,820 --> 00:12:56,280
responses that go out and so they often

00:12:53,730 --> 00:12:57,870
lists listen to a particular URL so if

00:12:56,280 --> 00:12:59,250
you have like a people route you have a

00:12:57,870 --> 00:13:00,450
people controller that goes along with

00:12:59,250 --> 00:13:01,860
it or if you have attached throughout

00:13:00,450 --> 00:13:03,750
you have a task Kotori that goes along

00:13:01,860 --> 00:13:07,110
with it and then they send it back out

00:13:03,750 --> 00:13:08,850
along with the response services and

00:13:07,110 --> 00:13:10,830
nest are practically identical to

00:13:08,850 --> 00:13:12,060
services in angular they're just a

00:13:10,830 --> 00:13:13,470
simple java or type

00:13:12,060 --> 00:13:15,120
good class that you're going to use that

00:13:13,470 --> 00:13:16,920
can be injected into other components

00:13:15,120 --> 00:13:18,510
and services are like where your

00:13:16,920 --> 00:13:20,310
database logic goes or your business

00:13:18,510 --> 00:13:21,870
logic other types of stuff that you need

00:13:20,310 --> 00:13:22,800
to do that doesn't really belong in a

00:13:21,870 --> 00:13:24,690
controller you want to keep your

00:13:22,800 --> 00:13:28,010
controllers nice and slim and put the

00:13:24,690 --> 00:13:30,480
main bulk of your logic inside services

00:13:28,010 --> 00:13:32,220
next we have one of these nest building

00:13:30,480 --> 00:13:34,260
blocks called interceptors and an

00:13:32,220 --> 00:13:37,200
interceptor is a specialized piece of

00:13:34,260 --> 00:13:39,150
middleware that lets you peek in to the

00:13:37,200 --> 00:13:40,800
request as it goes through the system so

00:13:39,150 --> 00:13:42,510
you can take a look at the at the

00:13:40,800 --> 00:13:45,060
request before it reaches the controller

00:13:42,510 --> 00:13:46,860
and after the controller's done with it

00:13:45,060 --> 00:13:48,300
before it goes out as a response and

00:13:46,860 --> 00:13:49,530
there's lots of things you can do with

00:13:48,300 --> 00:13:52,550
interceptors lots of cost-cutting

00:13:49,530 --> 00:13:54,840
concerns like logging or air management

00:13:52,550 --> 00:13:56,370
but one of the other really powerful

00:13:54,840 --> 00:13:58,290
features you can do inside of my

00:13:56,370 --> 00:14:00,270
interceptors you can manipulate the data

00:13:58,290 --> 00:14:03,000
on the way out so let's say you have

00:14:00,270 --> 00:14:05,730
like a particular schema that your

00:14:03,000 --> 00:14:06,840
responses need to adhere to your you

00:14:05,730 --> 00:14:08,670
don't need to worry about like

00:14:06,840 --> 00:14:10,620
manipulating your data object and so

00:14:08,670 --> 00:14:12,120
your controllers to do that you can do

00:14:10,620 --> 00:14:14,040
that inside of the Interceptor so your

00:14:12,120 --> 00:14:16,440
controller just returns the data the

00:14:14,040 --> 00:14:17,880
Interceptor can manipulate it into a

00:14:16,440 --> 00:14:23,790
particular schema to go out as a

00:14:17,880 --> 00:14:25,980
response so here we are at lab one so if

00:14:23,790 --> 00:14:28,860
you didn't get the get repo yet there's

00:14:25,980 --> 00:14:31,020
the URL again for it and in this we're

00:14:28,860 --> 00:14:35,130
going to take 15 minutes as soon as we

00:14:31,020 --> 00:14:38,580
start and then all the labs are broken

00:14:35,130 --> 00:14:40,890
apart into branches inside of get and so

00:14:38,580 --> 00:14:42,810
you can do lab 1 - start to be at the

00:14:40,890 --> 00:14:44,910
beginning point or if you just want to

00:14:42,810 --> 00:14:46,860
like jump to the end you can do lab 2 or

00:14:44,910 --> 00:14:48,960
lab 1 - complete to get to the end point

00:14:46,860 --> 00:14:51,690
and all the other labs are going to

00:14:48,960 --> 00:14:53,220
follow that same concept so I'm going to

00:14:51,690 --> 00:14:57,570
give you a brief tour of the application

00:14:53,220 --> 00:14:59,970
here oh quick and so once you get the

00:14:57,570 --> 00:15:02,490
repo cloned and you go into the repo and

00:14:59,970 --> 00:15:05,100
you npm install what you want to do to

00:15:02,490 --> 00:15:07,710
fire up the development server is npm

00:15:05,100 --> 00:15:10,110
run dev now this application here it's

00:15:07,710 --> 00:15:12,600
kind of like highly customized for this

00:15:10,110 --> 00:15:13,830
lab and so the nest doesn't Nestor ionic

00:15:12,600 --> 00:15:16,230
doesn't come out of the box right

00:15:13,830 --> 00:15:18,000
running both the servers it's special

00:15:16,230 --> 00:15:19,860
built for this but what this is

00:15:18,000 --> 00:15:22,380
basically doing is it's firing up the

00:15:19,860 --> 00:15:24,050
angular development server and the nest

00:15:22,380 --> 00:15:27,379
back-end server

00:15:24,050 --> 00:15:34,069
using one NPM command and so I'll run

00:15:27,379 --> 00:15:35,480
that and jump into code and actually the

00:15:34,069 --> 00:15:39,379
first thing I want to show you is the

00:15:35,480 --> 00:15:42,290
guide and so this is the guide that

00:15:39,379 --> 00:15:44,959
you'll be going through for all of your

00:15:42,290 --> 00:15:54,379
labs and exercises so you got links over

00:15:44,959 --> 00:15:56,529
here to get to the particularly thank

00:15:54,379 --> 00:15:56,529
you

00:15:58,649 --> 00:16:01,399
there we go

00:16:08,270 --> 00:16:13,700
okay so as you're going through the labs

00:16:10,630 --> 00:16:15,440
if you're using Visual Studio code and

00:16:13,700 --> 00:16:17,570
you click on one of the links right here

00:16:15,440 --> 00:16:19,790
it's going to open up that file for you

00:16:17,570 --> 00:16:21,980
directly inside of Visual Studio code if

00:16:19,790 --> 00:16:23,600
you're not using Visual Studio code I'm

00:16:21,980 --> 00:16:25,550
sorry you're gonna have to go to the

00:16:23,600 --> 00:16:26,779
file the old-fashioned way but this is

00:16:25,550 --> 00:16:29,899
gonna take you to where you need to go

00:16:26,779 --> 00:16:31,790
and the application itself is kind of

00:16:29,899 --> 00:16:33,529
like a paint-by-numbers type deal I'm

00:16:31,790 --> 00:16:35,240
gonna give you like the methods to

00:16:33,529 --> 00:16:37,130
implement and you can use the copy

00:16:35,240 --> 00:16:42,680
button or you can type in the code

00:16:37,130 --> 00:16:44,149
yourself to go into it but it's gonna be

00:16:42,680 --> 00:16:45,620
like pretty much like here's a method

00:16:44,149 --> 00:16:47,330
put it in this particular file or

00:16:45,620 --> 00:16:49,420
replace some particular method in a file

00:16:47,330 --> 00:16:55,910
with it

00:16:49,420 --> 00:16:57,830
and to give you a quick overview what

00:16:55,910 --> 00:16:59,060
how this is gonna work is I'm gonna do

00:16:57,830 --> 00:17:01,550
it and then we're gonna take a break for

00:16:59,060 --> 00:17:05,059
the lab for you guys to do it and so to

00:17:01,550 --> 00:17:06,439
show you the structure the of a sample

00:17:05,059 --> 00:17:08,240
application we got the source directory

00:17:06,439 --> 00:17:10,130
that's broken apart into three parts the

00:17:08,240 --> 00:17:15,740
client which is where the angular app is

00:17:10,130 --> 00:17:17,929
at the server which is the nest app and

00:17:15,740 --> 00:17:22,179
a shared folder which is a folder for

00:17:17,929 --> 00:17:22,179
service for some shared models in code

00:17:26,290 --> 00:17:35,270
let me know in the back if that's big

00:17:28,580 --> 00:17:38,780
enough for you okay so inside of the

00:17:35,270 --> 00:17:40,790
server got the app directory and in here

00:17:38,780 --> 00:17:42,650
we have missions you know we already

00:17:40,790 --> 00:17:44,300
have our missions controller set up as

00:17:42,650 --> 00:17:46,070
long as as well as a mission service

00:17:44,300 --> 00:17:47,990
another thing that the lab is already

00:17:46,070 --> 00:17:49,280
set up with like all the imports are

00:17:47,990 --> 00:17:50,660
already done for you so you don't have

00:17:49,280 --> 00:17:52,520
to worry about figuring out like which

00:17:50,660 --> 00:17:54,740
files that you need to import into the

00:17:52,520 --> 00:17:56,810
typescript files or whatnot and any

00:17:54,740 --> 00:17:59,210
anything that's injected and the either

00:17:56,810 --> 00:18:00,440
angular or nest is already injected for

00:17:59,210 --> 00:18:05,780
you as well so you don't need to worry

00:18:00,440 --> 00:18:07,160
about injecting the dependencies and so

00:18:05,780 --> 00:18:08,810
we got an emissions control room we got

00:18:07,160 --> 00:18:09,890
a mission service another thing that we

00:18:08,810 --> 00:18:13,040
have that's already set up is this

00:18:09,890 --> 00:18:15,700
missions repository this is a fake file

00:18:13,040 --> 00:18:17,750
based database set up and ready to go

00:18:15,700 --> 00:18:19,070
for you because I didn't want to have to

00:18:17,750 --> 00:18:20,600
worry about like you know you connect

00:18:19,070 --> 00:18:21,770
into a real database on your back end

00:18:20,600 --> 00:18:23,180
which database you're gonna use and

00:18:21,770 --> 00:18:25,550
whatnot and so we're gonna use this

00:18:23,180 --> 00:18:30,080
mission repository as our kind of like

00:18:25,550 --> 00:18:31,430
back-end for our nest app alright so the

00:18:30,080 --> 00:18:33,620
first thing we want to do is instead of

00:18:31,430 --> 00:18:37,100
our mission service we want to retrieve

00:18:33,620 --> 00:18:41,740
a list of missions for from the database

00:18:37,100 --> 00:18:44,180
so our controller can get access to them

00:18:41,740 --> 00:18:47,030
and so a write a method and it'll be

00:18:44,180 --> 00:18:52,010
called get missions and we'll just

00:18:47,030 --> 00:18:56,330
simply return the list from the missions

00:18:52,010 --> 00:18:57,950
repository if you take a look here at

00:18:56,330 --> 00:19:01,160
what's being returned we're returning a

00:18:57,950 --> 00:19:03,110
promise of array of mission entities and

00:19:01,160 --> 00:19:06,460
to show you the mission entity real

00:19:03,110 --> 00:19:08,960
quick it's just a very simple data model

00:19:06,460 --> 00:19:11,690
around our mission data so we got a

00:19:08,960 --> 00:19:13,220
title reward active and a couple of

00:19:11,690 --> 00:19:14,780
fields right here that are kind of for

00:19:13,220 --> 00:19:19,100
the database that we'll get into here in

00:19:14,780 --> 00:19:20,600
a moment now that we have the service

00:19:19,100 --> 00:19:23,300
returning missions let's go into our

00:19:20,600 --> 00:19:25,040
controller and so this is a nest

00:19:23,300 --> 00:19:27,110
controller and so remember controllers

00:19:25,040 --> 00:19:29,110
listen to requests coming in so

00:19:27,110 --> 00:19:31,520
controllers are decorated with

00:19:29,110 --> 00:19:33,260
controllers decorator and then we

00:19:31,520 --> 00:19:35,570
provide at the path that it's going to

00:19:33,260 --> 00:19:38,190
listen for on this particular hour and

00:19:35,570 --> 00:19:41,530
so here it's listened to slash missions

00:19:38,190 --> 00:19:43,930
and when we make a when we make a get

00:19:41,530 --> 00:19:46,540
request to slash missions what we do is

00:19:43,930 --> 00:19:48,850
we use the get decorator to specify that

00:19:46,540 --> 00:19:51,370
when a get request comes in to this

00:19:48,850 --> 00:19:52,720
particular route this is going to be the

00:19:51,370 --> 00:19:55,260
method that's going to respond to that

00:19:52,720 --> 00:19:55,260
get request

00:20:01,340 --> 00:20:08,049
so we'll call them to the mission

00:20:02,659 --> 00:20:11,799
service looks like a and miss named that

00:20:08,049 --> 00:20:11,799
this is get missions

00:20:17,730 --> 00:20:23,180
and so now it's kind of just a simple

00:20:20,400 --> 00:20:23,180
pasture right now

00:20:32,059 --> 00:20:38,719
okay so the question was how does it get

00:20:35,179 --> 00:20:46,249
decorate or know the URL that it's

00:20:38,719 --> 00:20:48,679
looking at how does so this get

00:20:46,249 --> 00:20:50,659
decorated right here is part of nest and

00:20:48,679 --> 00:20:53,419
so when nest fires up the framework and

00:20:50,659 --> 00:20:55,309
it's controlling all the interactions it

00:20:53,419 --> 00:20:56,599
and a get request comes in it's going to

00:20:55,309 --> 00:20:58,249
look at this particular class and say

00:20:56,599 --> 00:21:00,859
like hey do you have this get decorator

00:20:58,249 --> 00:21:02,779
or a good decorator to satisfy the check

00:21:00,859 --> 00:21:11,809
question if you do I can call that

00:21:02,779 --> 00:21:13,909
method okay now I have autosave turned

00:21:11,809 --> 00:21:15,229
on so like when I sometimes this messes

00:21:13,909 --> 00:21:16,940
up people when I'm doing it I'm not

00:21:15,229 --> 00:21:19,759
particularly going in and saving files

00:21:16,940 --> 00:21:21,859
they just all autosave it probably takes

00:21:19,759 --> 00:21:27,019
five ish seconds or so for the nest

00:21:21,859 --> 00:21:31,879
server to kick back in but if I come in

00:21:27,019 --> 00:21:37,929
here and I do a get request to slash

00:21:31,879 --> 00:21:37,929
missions I get back a list of

00:21:43,780 --> 00:21:48,200
there we go I get back a list

00:21:46,010 --> 00:21:50,240
submissions and JSON format and so one

00:21:48,200 --> 00:21:52,610
thing to note there was that our mission

00:21:50,240 --> 00:21:54,500
service was returning back a promise and

00:21:52,610 --> 00:21:56,210
we just like pass through that promise

00:21:54,500 --> 00:21:58,310
straight through that's kind of one of

00:21:56,210 --> 00:21:59,960
the nice things about nest is whether if

00:21:58,310 --> 00:22:01,940
you just returned a synchronous data

00:21:59,960 --> 00:22:04,220
call or an asynchronous data call Ness

00:22:01,940 --> 00:22:09,590
is gonna take care of unwrapping that

00:22:04,220 --> 00:22:10,190
for you yeah question so a question was

00:22:09,590 --> 00:22:12,440
does nest

00:22:10,190 --> 00:22:17,600
use rxjs at all and yes it does we'll

00:22:12,440 --> 00:22:22,010
get into that in a little bit okay but

00:22:17,600 --> 00:22:23,630
you might notice here that on are the

00:22:22,010 --> 00:22:25,040
data that's been returned we have a

00:22:23,630 --> 00:22:26,600
couple of fields here that are kind of

00:22:25,040 --> 00:22:28,910
like metadata fields for the database

00:22:26,600 --> 00:22:32,270
are not necessarily fields that you

00:22:28,910 --> 00:22:34,220
would want to return back to the client

00:22:32,270 --> 00:22:37,160
so we got this created at and then

00:22:34,220 --> 00:22:38,390
created by and so what we could do is we

00:22:37,160 --> 00:22:40,400
get like in our controller we can get

00:22:38,390 --> 00:22:42,200
the data back I mean we can create a new

00:22:40,400 --> 00:22:44,150
object and just exclude those properties

00:22:42,200 --> 00:22:45,620
but we're using typescript here and

00:22:44,150 --> 00:22:48,170
there's a typescript library called

00:22:45,620 --> 00:22:50,300
clash transformer in clash transformer

00:22:48,170 --> 00:22:52,550
provides a set of decorators that you

00:22:50,300 --> 00:22:53,840
can put onto your class and when you run

00:22:52,550 --> 00:22:55,430
it through a special helper function

00:22:53,840 --> 00:22:57,290
it's going to transform a class for you

00:22:55,430 --> 00:23:01,520
so I'll show you how that works here

00:22:57,290 --> 00:23:09,760
real quick so if we go back into the

00:23:01,520 --> 00:23:09,760
entity here we can use the exclude

00:23:09,940 --> 00:23:18,200
decorator from clash transformer and if

00:23:15,560 --> 00:23:21,830
you look up here exclude is included

00:23:18,200 --> 00:23:23,420
from clash transformer so now that we

00:23:21,830 --> 00:23:27,080
have that inside of our controller what

00:23:23,420 --> 00:23:31,100
we could do is we could say you know

00:23:27,080 --> 00:23:35,020
const return data equals this that

00:23:31,100 --> 00:23:42,040
mission service get missions and

00:23:35,020 --> 00:23:44,410
and we can return we can call the helper

00:23:42,040 --> 00:23:46,390
method class to plane which converts the

00:23:44,410 --> 00:23:48,040
class into a plain JavaScript object and

00:23:46,390 --> 00:23:49,630
if it has any of those special

00:23:48,040 --> 00:23:52,180
decorators it's automatically going to

00:23:49,630 --> 00:23:54,160
run those transformations on them and

00:23:52,180 --> 00:23:55,810
then passing the return data so we could

00:23:54,160 --> 00:23:56,950
do this but you might notice something

00:23:55,810 --> 00:23:58,000
right now you're gonna notice something

00:23:56,950 --> 00:24:00,610
about me is I like to keep my

00:23:58,000 --> 00:24:02,320
controllers super super slim and any

00:24:00,610 --> 00:24:04,360
type of logic like this I know I'm going

00:24:02,320 --> 00:24:05,650
to have to repeat all over the place and

00:24:04,360 --> 00:24:07,900
that's just not something I want inside

00:24:05,650 --> 00:24:08,920
my application so we can use one of

00:24:07,900 --> 00:24:11,770
those concepts from Ness the

00:24:08,920 --> 00:24:13,330
interceptors to manipulate this data on

00:24:11,770 --> 00:24:22,120
the way out so let's go ahead and do

00:24:13,330 --> 00:24:27,430
that so there is a file in here called

00:24:22,120 --> 00:24:28,750
data interceptor TS and I've got some

00:24:27,430 --> 00:24:31,060
snippets here so you don't have to see

00:24:28,750 --> 00:24:32,920
me type in a bunch of code but what

00:24:31,060 --> 00:24:35,800
we're doing here and so this intercept

00:24:32,920 --> 00:24:37,330
method intercepts the request coming in

00:24:35,800 --> 00:24:40,930
and this is where it's using a little

00:24:37,330 --> 00:24:45,310
bit rxjs and so rxjs has this handle

00:24:40,930 --> 00:24:47,230
which is a subscription and before

00:24:45,310 --> 00:24:48,910
before the controller gets ahold of it

00:24:47,230 --> 00:24:50,860
we can run some code up above but as

00:24:48,910 --> 00:24:53,530
soon as handle is called it's going to

00:24:50,860 --> 00:24:55,540
return it back as an observable and we

00:24:53,530 --> 00:24:58,780
can look at that and we can use the map

00:24:55,540 --> 00:25:00,880
operator to transform the data on the

00:24:58,780 --> 00:25:02,740
way out and so we're using map and we're

00:25:00,880 --> 00:25:04,300
also specifying a little bit of a schema

00:25:02,740 --> 00:25:06,730
here for our application to use we're

00:25:04,300 --> 00:25:08,140
gonna return back a JSON object that has

00:25:06,730 --> 00:25:10,120
a data property on it that's going to

00:25:08,140 --> 00:25:13,090
contain our data and then we'll call

00:25:10,120 --> 00:25:14,680
that class to play an object in here so

00:25:13,090 --> 00:25:15,940
to use interceptors in setting us

00:25:14,680 --> 00:25:19,450
there's a few different ways that you

00:25:15,940 --> 00:25:21,370
can do so you can use a use a decorator

00:25:19,450 --> 00:25:22,930
called use interceptors and place it on

00:25:21,370 --> 00:25:25,510
the actual method that you want to use

00:25:22,930 --> 00:25:27,010
or you could also use that decorator at

00:25:25,510 --> 00:25:29,440
the class-based level so it will apply

00:25:27,010 --> 00:25:31,660
to all the methods in that class or you

00:25:29,440 --> 00:25:34,600
can do it at the application level and

00:25:31,660 --> 00:25:36,640
to do it at the application level you

00:25:34,600 --> 00:25:37,870
set it up inside of nasus dependency

00:25:36,640 --> 00:25:38,860
injection framework which is very

00:25:37,870 --> 00:25:41,580
similar to angular's dependency

00:25:38,860 --> 00:25:41,580
injection framework

00:25:42,090 --> 00:25:47,490
and so what we'll do here is in the

00:25:44,400 --> 00:25:50,840
providers will create a new one we'll

00:25:47,490 --> 00:25:53,250
provide it a token called app

00:25:50,840 --> 00:25:54,690
interceptors and so this is saying like

00:25:53,250 --> 00:25:59,730
hey whenever you encounter an

00:25:54,690 --> 00:26:03,330
interceptor fire up this class and use

00:25:59,730 --> 00:26:11,400
it in its place and so put any data

00:26:03,330 --> 00:26:13,440
interceptor into here and once

00:26:11,400 --> 00:26:15,780
everything is recompiled we'll come back

00:26:13,440 --> 00:26:18,240
over here now you can see that those

00:26:15,780 --> 00:26:26,730
particular items that we did the exclude

00:26:18,240 --> 00:26:28,080
on are now not a part of our output okay

00:26:26,730 --> 00:26:29,880
so now that we're returning back a list

00:26:28,080 --> 00:26:33,090
submissions from the back end let's

00:26:29,880 --> 00:26:36,180
display them inside of the ionic app and

00:26:33,090 --> 00:26:37,560
so up in the ionic app it's kind of

00:26:36,180 --> 00:26:39,270
architected the same way we have a

00:26:37,560 --> 00:26:42,830
mission service which is where we're

00:26:39,270 --> 00:26:42,830
going to make our HTTP requests

00:26:46,510 --> 00:26:51,230
and so here we just got a get missions

00:26:48,980 --> 00:26:53,840
method that's making you know the HTTP

00:26:51,230 --> 00:26:56,210
requests to the local host right now to

00:26:53,840 --> 00:26:57,770
the missions and then it's a piping get

00:26:56,210 --> 00:26:59,870
back out and we're running a map

00:26:57,770 --> 00:27:01,640
operator because when we get our schema

00:26:59,870 --> 00:27:03,800
we're going to take off that data again

00:27:01,640 --> 00:27:07,870
and only return back the list emissions

00:27:03,800 --> 00:27:07,870
not the whole data or response schema

00:27:08,770 --> 00:27:17,510
and then inside of our home page we're

00:27:14,420 --> 00:27:19,430
going to call that method and so we

00:27:17,510 --> 00:27:21,680
already have emissions as a reservable

00:27:19,430 --> 00:27:23,300
set up inside of here and say this dot

00:27:21,680 --> 00:27:30,650
missions equals this that mission

00:27:23,300 --> 00:27:33,080
service dots get missions and if

00:27:30,650 --> 00:27:37,580
everything is good inside of the ionic

00:27:33,080 --> 00:27:39,170
app here see now we have our list

00:27:37,580 --> 00:27:41,570
emissions now I'm gonna fire up the

00:27:39,170 --> 00:27:44,000
chrome dev tools and I'm actually going

00:27:41,570 --> 00:27:46,390
to enable emulation device emulation

00:27:44,000 --> 00:27:49,610
mode here so we get it in a nice mobile

00:27:46,390 --> 00:27:53,930
view set but now you can see that we

00:27:49,610 --> 00:27:56,360
have list emissions shown back up so

00:27:53,930 --> 00:27:59,060
we're gonna break out now and do lab 1

00:27:56,360 --> 00:28:00,980
and I'll be walking around so if you

00:27:59,060 --> 00:28:05,210
have like any questions or anything feel

00:28:00,980 --> 00:28:10,250
free to ask but yeah go back into the

00:28:05,210 --> 00:28:13,010
guy in it and consult the guide and I'll

00:28:10,250 --> 00:28:18,950
just put that up there and so we'll get

00:28:13,010 --> 00:28:20,360
started now alright so that is the end

00:28:18,950 --> 00:28:22,490
of lab whine if you didn't quite get

00:28:20,360 --> 00:28:24,020
finished don't fret I'm you can pick up

00:28:22,490 --> 00:28:27,050
where you left off at the next lab or

00:28:24,020 --> 00:28:30,530
you can use the git branches to kind of

00:28:27,050 --> 00:28:31,850
start fresh with the next one ok so the

00:28:30,530 --> 00:28:33,680
next thing that we're going to do is

00:28:31,850 --> 00:28:35,090
we're going to create the mission detail

00:28:33,680 --> 00:28:36,620
screen and as a part of creating the

00:28:35,090 --> 00:28:39,380
mission mission detail screen we're

00:28:36,620 --> 00:28:42,110
going to add into our API the ability to

00:28:39,380 --> 00:28:44,930
pull back a single mission based on an

00:28:42,110 --> 00:28:46,670
ID and the concepts that we're going to

00:28:44,930 --> 00:28:51,640
go over this on the nest side are pipes

00:28:46,670 --> 00:28:51,640
and exception helpers

00:28:52,330 --> 00:28:57,490
so pipes are another piece another one

00:28:56,020 --> 00:28:59,350
of these nest building blocks and

00:28:57,490 --> 00:29:02,110
they're another piece of specialized

00:28:59,350 --> 00:29:03,670
middleware that kind of sits in front of

00:29:02,110 --> 00:29:05,170
your request before it comes in so if

00:29:03,670 --> 00:29:07,210
you remember interceptors it kind of sat

00:29:05,170 --> 00:29:08,980
on both ends pipe stood on the front end

00:29:07,210 --> 00:29:12,430
you kind of might be wondering like why

00:29:08,980 --> 00:29:13,750
do we have like these two different

00:29:12,430 --> 00:29:17,260
things that kind of feel like they're

00:29:13,750 --> 00:29:19,540
the same but it comes down to that nest

00:29:17,260 --> 00:29:20,890
is highly opinionated and when you see

00:29:19,540 --> 00:29:22,270
something called interceptor you're

00:29:20,890 --> 00:29:24,130
gonna have an idea of what it's doing

00:29:22,270 --> 00:29:25,780
and when you see something called pipe

00:29:24,130 --> 00:29:27,520
you're gonna have another idea whether

00:29:25,780 --> 00:29:29,140
it's doing this so pipes are fairly

00:29:27,520 --> 00:29:31,660
similar to what they are an angular a

00:29:29,140 --> 00:29:34,150
lot of times are used to transform data

00:29:31,660 --> 00:29:35,830
before it gets into the controller but

00:29:34,150 --> 00:29:37,660
another very common use case for pipes

00:29:35,830 --> 00:29:44,770
is validation and we'll be getting into

00:29:37,660 --> 00:29:48,030
that a little bit as well so let me go

00:29:44,770 --> 00:29:48,030
through the lab real quick

00:29:56,900 --> 00:30:00,690
okay and so what we're gonna do to start

00:29:59,309 --> 00:30:04,830
off here is we're gonna go into our

00:30:00,690 --> 00:30:05,970
server based mission service this is

00:30:04,830 --> 00:30:07,710
something that you kind of want to be a

00:30:05,970 --> 00:30:09,870
little careful with because now we have

00:30:07,710 --> 00:30:11,970
multiple files with the same name in

00:30:09,870 --> 00:30:13,260
different projects so when you're going

00:30:11,970 --> 00:30:14,880
through like just make sure you're like

00:30:13,260 --> 00:30:16,440
you're modifying the server our server

00:30:14,880 --> 00:30:19,260
one or modifying the client one

00:30:16,440 --> 00:30:20,490
depending on the right situation and

00:30:19,260 --> 00:30:23,490
we're gonna create a method in here

00:30:20,490 --> 00:30:27,930
called get mission and we're gonna pass

00:30:23,490 --> 00:30:29,610
in an ID that is a number and then we'll

00:30:27,930 --> 00:30:32,610
return back this stop missions

00:30:29,610 --> 00:30:35,370
repository dot get and this takes and of

00:30:32,610 --> 00:30:38,460
the ID and if we look at the return type

00:30:35,370 --> 00:30:43,050
here it's just a promise that returns

00:30:38,460 --> 00:30:46,110
back a single instance of mission ID and

00:30:43,050 --> 00:30:47,610
the killer side very similar so we're

00:30:46,110 --> 00:30:49,920
gonna make another get request but now

00:30:47,610 --> 00:30:52,559
we're going to make a get request to the

00:30:49,920 --> 00:30:54,300
URL flag mission slash one or mission /

00:30:52,559 --> 00:30:59,309
- whatever the idea is that we're trying

00:30:54,300 --> 00:31:01,020
to request so to specify that route we

00:30:59,309 --> 00:31:04,140
again use the get but now we're we're

00:31:01,020 --> 00:31:05,580
gonna pass it a parameter and so this

00:31:04,140 --> 00:31:07,470
looks a lot like it doesn't angular you

00:31:05,580 --> 00:31:08,910
say in angular routing you say colon

00:31:07,470 --> 00:31:12,770
slash whatever you want to name the

00:31:08,910 --> 00:31:15,980
parameter and we'll say get mission and

00:31:12,770 --> 00:31:19,890
then we're gonna pass in ID into it

00:31:15,980 --> 00:31:26,010
now what we need to do to tell nest that

00:31:19,890 --> 00:31:30,559
this ID is coming from our UL / URL as

00:31:26,010 --> 00:31:30,559
we use a specialized program decorator

00:31:30,650 --> 00:31:36,300
and we give it the name and so this name

00:31:33,929 --> 00:31:42,000
right here maps to the name that we did

00:31:36,300 --> 00:31:45,650
here when setting up the route so now we

00:31:42,000 --> 00:31:50,179
can say return this submission service

00:31:45,650 --> 00:31:50,179
get mission and pass it in the ID

00:31:52,830 --> 00:32:01,020
and go back and give it a second for the

00:31:57,120 --> 00:32:10,530
server to kick in so now if I go to

00:32:01,020 --> 00:32:12,720
missions slash one you can see I'm not

00:32:10,530 --> 00:32:16,290
getting anything back right now anybody

00:32:12,720 --> 00:32:18,770
want to take a take a gander or why this

00:32:16,290 --> 00:32:18,770
isn't working

00:32:19,190 --> 00:32:23,040
all right well let's debug it all right

00:32:21,570 --> 00:32:24,870
so we're using typescript we're using

00:32:23,040 --> 00:32:28,740
Visual Studio code in my particular case

00:32:24,870 --> 00:32:30,090
I can do debugging in the application so

00:32:28,740 --> 00:32:34,050
I'll come in here and I'll set a

00:32:30,090 --> 00:32:35,490
breakpoint right here and I'll hit f5 to

00:32:34,050 --> 00:32:38,460
attach my debugger I already have that

00:32:35,490 --> 00:32:40,560
test set up and come back in refresh

00:32:38,460 --> 00:32:43,380
take a look to see what's going on here

00:32:40,560 --> 00:32:45,420
we got ID Oh

00:32:43,380 --> 00:32:48,150
IDs me and passing it as a string

00:32:45,420 --> 00:32:52,460
because all URL parameters are strings

00:32:48,150 --> 00:32:55,140
but our mission service is expecting

00:32:52,460 --> 00:32:56,640
number to be passed in so you know it's

00:32:55,140 --> 00:32:58,950
trying to look it up by that and it's

00:32:56,640 --> 00:33:00,300
not finding anything and what we really

00:32:58,950 --> 00:33:02,790
did here is we kind of lied to

00:33:00,300 --> 00:33:03,600
typescript about the object that's

00:33:02,790 --> 00:33:07,440
coming in here

00:33:03,600 --> 00:33:09,480
well what we could do and so once this

00:33:07,440 --> 00:33:13,440
number comes in we can you know say cons

00:33:09,480 --> 00:33:14,850
new ID equals parse and so I like that

00:33:13,440 --> 00:33:16,590
but no we don't want to be doing that

00:33:14,850 --> 00:33:17,760
type of logic we told typescript that

00:33:16,590 --> 00:33:21,870
this is supposed to be a number right

00:33:17,760 --> 00:33:25,860
let's use that information to convert

00:33:21,870 --> 00:33:30,690
this to a number on the way in and we'll

00:33:25,860 --> 00:33:33,780
use a pipe to do that and so we'll go

00:33:30,690 --> 00:33:38,360
into the data pipe file and this data

00:33:33,780 --> 00:33:38,360
dot pop pipe file takes a transform

00:33:38,720 --> 00:33:45,210
method and we'll replace that with our

00:33:42,810 --> 00:33:47,310
own and once again here we're using the

00:33:45,210 --> 00:33:48,900
class transformer library and so one of

00:33:47,310 --> 00:33:50,820
the things that classic transformer can

00:33:48,900 --> 00:33:52,650
do is we saw a class to plain earlier

00:33:50,820 --> 00:33:55,200
now we're gonna look at plane to class

00:33:52,650 --> 00:33:56,760
so we're getting plane objects coming in

00:33:55,200 --> 00:33:59,010
we want to convert it to a particular

00:33:56,760 --> 00:34:02,130
type and because we're using typescript

00:33:59,010 --> 00:34:04,549
and we're emitting type metadata nest

00:34:02,130 --> 00:34:05,839
knows about all of your parameters

00:34:04,549 --> 00:34:08,059
types that they're supposed to be and

00:34:05,839 --> 00:34:10,129
all that fun stuff and so that's what's

00:34:08,059 --> 00:34:11,659
in this argument metadata and so we're

00:34:10,129 --> 00:34:13,399
gonna take the meta type from it

00:34:11,659 --> 00:34:15,200
and we're gonna call plane to class and

00:34:13,399 --> 00:34:16,730
so the first parameter here is the

00:34:15,200 --> 00:34:18,169
object that's supposed to be converted

00:34:16,730 --> 00:34:20,179
or the type that's supposed to be

00:34:18,169 --> 00:34:22,129
converted to and the second parameter is

00:34:20,179 --> 00:34:32,359
the actual value so we call that here

00:34:22,129 --> 00:34:34,190
and then pass it in and I will come here

00:34:32,359 --> 00:34:36,440
to the app model and also make this

00:34:34,190 --> 00:34:41,950
available so that as a application wide

00:34:36,440 --> 00:34:41,950
it's also provide now we'll say a pipe

00:34:42,220 --> 00:34:49,429
use class data pipe and these are just

00:34:48,049 --> 00:34:55,010
called data because I'm not very

00:34:49,429 --> 00:34:58,119
creative with naming things so if that

00:34:55,010 --> 00:34:58,119
goes through okay

00:34:58,869 --> 00:35:02,529
I'm sorry to hear ya

00:35:05,540 --> 00:35:14,660
I still I didn't okay so the question

00:35:12,170 --> 00:35:16,430
was where is a pipe and app intercepted

00:35:14,660 --> 00:35:22,750
coming from these are tokens provided by

00:35:16,430 --> 00:35:22,750
nest and they are imported from nest

00:35:22,900 --> 00:35:34,520
right here from the nest js4 all right

00:35:32,000 --> 00:35:41,710
so now if i refresh it I can see I am

00:35:34,520 --> 00:35:41,710
now getting back my correct and mission

00:35:43,240 --> 00:35:50,630
so now let's go in and hook this up to

00:35:46,760 --> 00:35:59,360
the angular app so go into the mission

00:35:50,630 --> 00:36:01,520
service on the client side and very

00:35:59,360 --> 00:36:04,670
similar where you will have a get

00:36:01,520 --> 00:36:14,390
mission that takes in the ID and here in

00:36:04,670 --> 00:36:18,880
the URL or the passion and the ID and we

00:36:14,390 --> 00:36:22,150
have what we're going to do is end the

00:36:18,880 --> 00:36:22,150
home page

00:36:26,560 --> 00:36:32,240
the way that we're going to view the

00:36:28,670 --> 00:36:33,710
details so this is the homepage using

00:36:32,240 --> 00:36:35,630
the ionic framework you can see up here

00:36:33,710 --> 00:36:37,310
we've got we got the header and then

00:36:35,630 --> 00:36:38,480
down here we got the ion list where we

00:36:37,310 --> 00:36:40,310
have a bunch of list items where each

00:36:38,480 --> 00:36:44,030
one of the mission missions is be amused

00:36:40,310 --> 00:36:45,260
and on the on each particular item we

00:36:44,030 --> 00:36:46,580
have a click handle or call an open

00:36:45,260 --> 00:36:48,950
mission where we're passing in the

00:36:46,580 --> 00:36:51,530
mission so we'll go into the home page

00:36:48,950 --> 00:36:54,970
and the open mission right now it's just

00:36:51,530 --> 00:36:57,590
a blank method so I'll take it out and

00:36:54,970 --> 00:36:59,540
use my snippet to paste in an open

00:36:57,590 --> 00:37:01,510
mission and what we're doing here is

00:36:59,540 --> 00:37:04,850
we're going to present the mission and a

00:37:01,510 --> 00:37:07,520
modal and so we're using the modal

00:37:04,850 --> 00:37:09,410
controller here in ionic and we're

00:37:07,520 --> 00:37:12,200
passing it in the component that we want

00:37:09,410 --> 00:37:15,200
it to display and giving it the ID of a

00:37:12,200 --> 00:37:18,260
mission to use and then we're presenting

00:37:15,200 --> 00:37:20,480
it and this is a asynchronous operation

00:37:18,260 --> 00:37:22,760
and so this will wait until the modal is

00:37:20,480 --> 00:37:25,100
closed and then you get some data that

00:37:22,760 --> 00:37:26,870
gets returned back from the modal itself

00:37:25,100 --> 00:37:28,760
so in this particular case we're

00:37:26,870 --> 00:37:30,230
returning back an object and we're gonna

00:37:28,760 --> 00:37:32,540
have a boolean on it called refresh

00:37:30,230 --> 00:37:34,640
missions and this is going to let the

00:37:32,540 --> 00:37:36,080
homepage know like if we make an edit or

00:37:34,640 --> 00:37:38,240
if we add a new one or something like

00:37:36,080 --> 00:37:42,350
that to call the API again to get a

00:37:38,240 --> 00:37:44,150
fresh list of the data the reason why

00:37:42,350 --> 00:37:45,950
this would be false is if we just

00:37:44,150 --> 00:37:52,580
dismiss the modal without making any

00:37:45,950 --> 00:37:57,740
actual changes so now in the mission

00:37:52,580 --> 00:38:00,200
form on this ng on an it I'll take that

00:37:57,740 --> 00:38:02,690
one day out and the place to D here and

00:38:00,200 --> 00:38:03,980
so we got this nav params that's being

00:38:02,690 --> 00:38:06,410
injected and so this is how we're going

00:38:03,980 --> 00:38:09,560
to get the ID that was passed into the

00:38:06,410 --> 00:38:13,700
modal so we call nap params outdated ID

00:38:09,560 --> 00:38:15,830
and then here if we have an ID we're

00:38:13,700 --> 00:38:18,080
going to call the get mission by ID for

00:38:15,830 --> 00:38:19,730
some reason the idea wasn't passed in it

00:38:18,080 --> 00:38:24,070
means that we're creating a new one

00:38:19,730 --> 00:38:26,540
which we'll get into in the next section

00:38:24,070 --> 00:38:28,880
and so pulls it back sets it to the

00:38:26,540 --> 00:38:31,190
mission object in here and the component

00:38:28,880 --> 00:38:33,410
itself it's just another simple ionic

00:38:31,190 --> 00:38:35,450
page we've got the header and we got a

00:38:33,410 --> 00:38:36,819
content area with a list and some form

00:38:35,450 --> 00:38:38,920
fields so we

00:38:36,819 --> 00:38:42,329
you know couple text boxes and a

00:38:38,920 --> 00:38:48,880
switched control if it's active or not

00:38:42,329 --> 00:38:52,720
so if this is all good and I click one

00:38:48,880 --> 00:38:57,040
of these guys there we go I get details

00:38:52,720 --> 00:39:00,069
page popping up here in a modal and so

00:38:57,040 --> 00:39:01,750
we'll do that for lab two on lab three

00:39:00,069 --> 00:39:07,750
we'll get to the actual editing and

00:39:01,750 --> 00:39:09,730
creating portion of it so start the

00:39:07,750 --> 00:39:11,050
timer again at fifteen minutes and walk

00:39:09,730 --> 00:39:15,010
around if you have any questions I just

00:39:11,050 --> 00:39:19,420
reach out and holler at me okay so we'll

00:39:15,010 --> 00:39:21,339
go ahead and get back to it so just

00:39:19,420 --> 00:39:23,980
remember like if that's sort of the next

00:39:21,339 --> 00:39:25,960
lab if you didn't finish continue on or

00:39:23,980 --> 00:39:29,770
used to get repos to get you back up to

00:39:25,960 --> 00:39:32,140
speed so next what we're going to be

00:39:29,770 --> 00:39:34,810
looking at is finishing out the crud

00:39:32,140 --> 00:39:37,180
operations for our missions so being

00:39:34,810 --> 00:39:40,000
able to create new lines update existing

00:39:37,180 --> 00:39:41,530
ones and delete them and one of the Ness

00:39:40,000 --> 00:39:43,750
concepts that we're going to take a look

00:39:41,530 --> 00:39:45,880
at here is validation to make sure that

00:39:43,750 --> 00:39:49,300
when objects come in that they're valid

00:39:45,880 --> 00:39:51,400
objects like the required fields are

00:39:49,300 --> 00:39:57,760
there and numbers of numbers and stuff

00:39:51,400 --> 00:40:02,619
like that so to walk you through it here

00:39:57,760 --> 00:40:04,690
real quick what we want to do is go into

00:40:02,619 --> 00:40:06,970
the mission service and we will add all

00:40:04,690 --> 00:40:15,810
the rest of the methods for our card

00:40:06,970 --> 00:40:15,810
operations and once again I forgot to

00:40:20,260 --> 00:40:28,240
go okay so in here I'll use this little

00:40:25,930 --> 00:40:29,440
snippet and so this is kind of a lot of

00:40:28,240 --> 00:40:31,180
the same stuff that we see we got our

00:40:29,440 --> 00:40:32,740
creep missions taking a mission it's

00:40:31,180 --> 00:40:35,050
calling the repository to create it

00:40:32,740 --> 00:40:36,609
this update mission it's a little bit

00:40:35,050 --> 00:40:39,190
different because what we want to do

00:40:36,609 --> 00:40:41,050
here is we pull back a mission that's

00:40:39,190 --> 00:40:42,670
already in the database and since we

00:40:41,050 --> 00:40:43,990
have those metadata fields we want to

00:40:42,670 --> 00:40:48,760
make sure those metadata fields aren't

00:40:43,990 --> 00:40:50,410
updated interpreted and created by they

00:40:48,760 --> 00:40:53,770
should be the original values so what we

00:40:50,410 --> 00:40:55,930
do here is we just set those values from

00:40:53,770 --> 00:40:58,630
the old one to the new one that's coming

00:40:55,930 --> 00:41:01,060
in and then we call the update on the

00:40:58,630 --> 00:41:04,030
repository for it and delete mission is

00:41:01,060 --> 00:41:07,170
also you know pretty straightforward on

00:41:04,030 --> 00:41:07,170
the controller side

00:41:11,510 --> 00:41:18,260
we'll add these methods and so here now

00:41:16,580 --> 00:41:20,210
we're using a few new decorators from

00:41:18,260 --> 00:41:22,940
nest we've got the post decorator so

00:41:20,210 --> 00:41:26,090
this is saying when a post request comes

00:41:22,940 --> 00:41:27,320
in to this particular route handler this

00:41:26,090 --> 00:41:29,810
is going to be the method that's going

00:41:27,320 --> 00:41:31,760
to respond to it and in here we're

00:41:29,810 --> 00:41:33,920
taking in the mission entity and so

00:41:31,760 --> 00:41:36,080
we're using this body decorator and what

00:41:33,920 --> 00:41:39,080
this is going to this tells nests to

00:41:36,080 --> 00:41:42,050
populate this object from the request

00:41:39,080 --> 00:41:43,700
body that's coming in and so we'll send

00:41:42,050 --> 00:41:45,320
like a JSON object in the request body

00:41:43,700 --> 00:41:47,390
and it's going to automatically map that

00:41:45,320 --> 00:41:48,620
into our object here cool thing about

00:41:47,390 --> 00:41:49,850
this like if you're doing this in

00:41:48,620 --> 00:41:51,890
Express you might have to set up like

00:41:49,850 --> 00:41:53,450
Bart body parser or something like that

00:41:51,890 --> 00:41:58,160
to get it all up and running Nessus

00:41:53,450 --> 00:42:00,260
supports it all out of the box kind of

00:41:58,160 --> 00:42:02,540
kind of the same deal with output so

00:42:00,260 --> 00:42:05,600
we're put into a particular URL here so

00:42:02,540 --> 00:42:09,580
we're specifying our ID as a parameter

00:42:05,600 --> 00:42:09,580
again and then same thing but delete

00:42:10,300 --> 00:42:15,460
let's go into the mission service on the

00:42:13,130 --> 00:42:15,460
client side

00:42:19,330 --> 00:42:22,720
a lot more of the same so we're just

00:42:21,310 --> 00:42:24,040
filling filling out the rest of the

00:42:22,720 --> 00:42:32,020
methods still kind of doing the same

00:42:24,040 --> 00:42:44,560
thing making HTTP requests and over here

00:42:32,020 --> 00:42:48,520
on the forum side so we got our formal

00:42:44,560 --> 00:42:49,840
modal right here and when we submit

00:42:48,520 --> 00:42:52,930
we're calling the cement method and

00:42:49,840 --> 00:42:54,850
we're just submitting the mission that's

00:42:52,930 --> 00:42:57,030
currently attached to the forum right

00:42:54,850 --> 00:42:57,030
now

00:43:01,549 --> 00:43:05,839
and if we go in here the cement method

00:43:04,249 --> 00:43:07,369
right now all it's doing right now is

00:43:05,839 --> 00:43:09,769
logging out the mission to the console

00:43:07,369 --> 00:43:12,019
but we'll delete that and we'll add a

00:43:09,769 --> 00:43:14,719
new one and so what we're doing here if

00:43:12,019 --> 00:43:16,099
we had the mission ID once again if we

00:43:14,719 --> 00:43:17,449
have a mission ID we know it's an

00:43:16,099 --> 00:43:19,279
existing mission we're gonna call the

00:43:17,449 --> 00:43:24,469
update mission service if not we're

00:43:19,279 --> 00:43:26,119
gonna call create mission and then once

00:43:24,469 --> 00:43:29,029
it's done we're going to dismiss the

00:43:26,119 --> 00:43:31,369
modal so it will go away and get us back

00:43:29,029 --> 00:43:33,949
to the list and we'll set the Refresh

00:43:31,369 --> 00:43:37,459
missions to true so the list screen

00:43:33,949 --> 00:43:39,949
knows to hold the data fresh again and

00:43:37,459 --> 00:43:42,979
what we're doing here is if there's an

00:43:39,949 --> 00:43:46,399
error that happens during the process

00:43:42,979 --> 00:43:47,659
we're gonna show an alert and to show an

00:43:46,399 --> 00:43:49,849
alert in ionic we use the alert

00:43:47,659 --> 00:43:52,130
controller and we create it give it a

00:43:49,849 --> 00:43:54,380
header while display the error message

00:43:52,130 --> 00:43:58,329
in the sub header the regular message

00:43:54,380 --> 00:43:58,329
and then okay button to dismiss it

00:44:02,590 --> 00:44:10,060
and over here on the homepage so up in

00:44:07,360 --> 00:44:14,470
the header we have a button for adding

00:44:10,060 --> 00:44:16,330
and this button right here calls the new

00:44:14,470 --> 00:44:25,480
mission med method and so we'll fill

00:44:16,330 --> 00:44:27,460
that out real quick and so here it's a

00:44:25,480 --> 00:44:29,740
kind of the same thing that we did we're

00:44:27,460 --> 00:44:31,510
displaying a mission that was already

00:44:29,740 --> 00:44:33,700
there reason the modal controller to

00:44:31,510 --> 00:44:35,470
create it passing in the mission form

00:44:33,700 --> 00:44:36,940
component but here we're not passing in

00:44:35,470 --> 00:44:40,420
the ID so the forms going to know that

00:44:36,940 --> 00:44:43,860
it's to create a new mission object for

00:44:40,420 --> 00:44:43,860
us instead of using one that's passed in

00:44:44,520 --> 00:44:54,190
okay and for everything is all good

00:44:46,930 --> 00:44:57,490
there so click the button we get the

00:44:54,190 --> 00:45:01,840
modal up we'll give it a you know a

00:44:57,490 --> 00:45:05,710
mission and take out the space trash its

00:45:01,840 --> 00:45:07,480
reward of 100 and market is active and

00:45:05,710 --> 00:45:11,910
that would get it back here in our list

00:45:07,480 --> 00:45:11,910
if I click it here I should be able to

00:45:13,200 --> 00:45:17,440
do it this is often what I tell my wife

00:45:15,790 --> 00:45:18,640
when she gives me a list of things do

00:45:17,440 --> 00:45:20,980
like okay I'll do it tomorrow

00:45:18,640 --> 00:45:25,330
and then she's like okay well you know

00:45:20,980 --> 00:45:30,610
you won't get her reward then I'll save

00:45:25,330 --> 00:45:33,490
that there we go okay so now we're able

00:45:30,610 --> 00:45:35,470
to create an update but what if we tried

00:45:33,490 --> 00:45:38,080
to save an object that was like invalid

00:45:35,470 --> 00:45:40,030
and so if I try to do this not specimen

00:45:38,080 --> 00:45:41,770
and tile I'm not specifying a reward I'm

00:45:40,030 --> 00:45:43,480
getting back like a 500 air right now

00:45:41,770 --> 00:45:45,670
for my server and says internal server

00:45:43,480 --> 00:45:47,230
error if you ever get back a 500 error

00:45:45,670 --> 00:45:48,550
what you can do is you can go into the

00:45:47,230 --> 00:45:51,460
console that you started up the

00:45:48,550 --> 00:45:53,530
necessary from and I mean make this a

00:45:51,460 --> 00:45:55,270
little bit bigger so you can see it but

00:45:53,530 --> 00:45:56,500
this is gonna show you the output of the

00:45:55,270 --> 00:45:59,200
air right here and so if we look we can

00:45:56,500 --> 00:46:02,470
see we have a DB constraint air title is

00:45:59,200 --> 00:46:04,270
required but throwing a 500 air for that

00:46:02,470 --> 00:46:05,920
is not really what we want to do what we

00:46:04,270 --> 00:46:07,900
want to do is and we want to throw a 400

00:46:05,920 --> 00:46:09,850
bad request type of type of exception

00:46:07,900 --> 00:46:10,960
and actually like put some validation in

00:46:09,850 --> 00:46:12,880
place to make sure those things are

00:46:10,960 --> 00:46:14,109
there before they actually hit the

00:46:12,880 --> 00:46:20,230
database preferably

00:46:14,109 --> 00:46:21,819
not after so let's see how to do that so

00:46:20,230 --> 00:46:24,279
we talked about the clash transformer

00:46:21,819 --> 00:46:27,160
library earlier clash transformer has a

00:46:24,279 --> 00:46:29,739
sibling library called class validation

00:46:27,160 --> 00:46:31,869
and class validation use valid uses

00:46:29,739 --> 00:46:33,069
validate jsn turning the hood but what

00:46:31,869 --> 00:46:34,960
it does that's really cool is that lets

00:46:33,069 --> 00:46:37,329
us use decorators on our models to

00:46:34,960 --> 00:46:39,789
specify the validation and a very

00:46:37,329 --> 00:46:41,349
declarative type manner instead of like

00:46:39,789 --> 00:46:43,779
writing a bunch of JavaScript to apply

00:46:41,349 --> 00:46:50,049
the decorations so I can go back into

00:46:43,779 --> 00:46:54,130
the mission Andy and up in here I can

00:46:50,049 --> 00:46:56,019
specify these decorators like is defined

00:46:54,130 --> 00:46:58,720
so to make sure that it's actually

00:46:56,019 --> 00:47:01,869
coming back as part of the payload and I

00:46:58,720 --> 00:47:03,430
can say is not empty to make sure

00:47:01,869 --> 00:47:05,950
they're not saying in an empty string

00:47:03,430 --> 00:47:08,769
and then we just make sure we can say is

00:47:05,950 --> 00:47:12,130
string to make sure that this particular

00:47:08,769 --> 00:47:13,390
title right here is a string and we'll

00:47:12,130 --> 00:47:16,599
kind of do the same thing for number

00:47:13,390 --> 00:47:22,509
Wilson make sure it's defined and we'll

00:47:16,599 --> 00:47:25,960
make sure it is a number and for active

00:47:22,509 --> 00:47:31,299
will make sure it's defined and we'll

00:47:25,960 --> 00:47:33,759
make sure it is a boolean now in order

00:47:31,299 --> 00:47:35,200
to actually use this we pass it through

00:47:33,759 --> 00:47:38,769
a helper function kind of like hash

00:47:35,200 --> 00:47:41,859
transformer but class validator has a

00:47:38,769 --> 00:47:44,289
helper function called validate and so

00:47:41,859 --> 00:47:46,150
one way that we could do it if we come

00:47:44,289 --> 00:47:48,339
up here to the post method I could come

00:47:46,150 --> 00:47:51,369
up here and write my validation logic

00:47:48,339 --> 00:47:59,819
here so I can say Const Aires equals

00:47:51,369 --> 00:47:59,819
validates and pass it in the mission

00:48:00,100 --> 00:48:07,650
I have to spell Aires right or else it's

00:48:03,430 --> 00:48:08,830
not gonna work and I could say if Aires

00:48:07,650 --> 00:48:11,410
lengths

00:48:08,830 --> 00:48:13,900
oh this validate it is an asynchronous

00:48:11,410 --> 00:48:15,460
function so we'll wait on it and they're

00:48:13,900 --> 00:48:18,150
just returns back in our array of errors

00:48:15,460 --> 00:48:23,560
so say if the length is greater than 0

00:48:18,150 --> 00:48:30,030
then we will throw a new not a through

00:48:23,560 --> 00:48:30,030
new bad request exception

00:48:39,190 --> 00:48:42,300
I'm sorry

00:48:44,090 --> 00:48:47,480
can you so the question was can you send

00:48:46,040 --> 00:48:49,160
parameters to bad requests exceptions

00:48:47,480 --> 00:48:51,410
and the answer is yes so if you come in

00:48:49,160 --> 00:48:53,360
here you can see that the first thing it

00:48:51,410 --> 00:48:55,370
takes is a message and then also takes

00:48:53,360 --> 00:48:57,470
like an error I think it's a little bit

00:48:55,370 --> 00:49:04,550
up to you to define like what what each

00:48:57,470 --> 00:49:10,040
of those means to your application but

00:49:04,550 --> 00:49:12,290
we'll leave it blank right now and so

00:49:10,040 --> 00:49:16,550
once that goes we'll give it a second to

00:49:12,290 --> 00:49:17,480
finish compiling hit save so now we're

00:49:16,550 --> 00:49:19,310
gonna see if we're getting them back in

00:49:17,480 --> 00:49:22,070
API err that at least says bad requests

00:49:19,310 --> 00:49:23,840
and down here you can see that we're

00:49:22,070 --> 00:49:26,000
actually getting back a 400 so we're

00:49:23,840 --> 00:49:28,100
returning back to you appropriate status

00:49:26,000 --> 00:49:30,110
code now but what we're missing is I'm

00:49:28,100 --> 00:49:31,970
not looping through that errors array

00:49:30,110 --> 00:49:37,250
and outputting out messages and stuff

00:49:31,970 --> 00:49:40,310
like that but once again I got some

00:49:37,250 --> 00:49:41,990
cruft here inside of my controller and I

00:49:40,310 --> 00:49:43,910
don't like a bunch of cruft inside of my

00:49:41,990 --> 00:49:45,440
controllers this is kind of logic that

00:49:43,910 --> 00:49:50,930
I'd have to repeat every order once

00:49:45,440 --> 00:49:52,310
again so fortunately Ness provides some

00:49:50,930 --> 00:49:54,590
of its building blocks to help with this

00:49:52,310 --> 00:49:55,910
and that once again is pipes so kind of

00:49:54,590 --> 00:49:59,750
the appropriate place to do this type of

00:49:55,910 --> 00:50:02,210
logic is to put it into a pipe and I

00:49:59,750 --> 00:50:05,300
could come in here and add it to my data

00:50:02,210 --> 00:50:06,710
pipe not necessarily a big fan of that

00:50:05,300 --> 00:50:08,030
because it's kind of breaking the single

00:50:06,710 --> 00:50:09,680
responsibility principle for this

00:50:08,030 --> 00:50:11,480
particular pipe this pipe is meant to

00:50:09,680 --> 00:50:13,430
convert values on the way and not to do

00:50:11,480 --> 00:50:16,010
validation so you could create your own

00:50:13,430 --> 00:50:17,690
validation pipe and do that but the

00:50:16,010 --> 00:50:20,270
creators of Ness knew that this was

00:50:17,690 --> 00:50:22,340
going to be such a common task that

00:50:20,270 --> 00:50:24,080
there is a validation pipe that's built

00:50:22,340 --> 00:50:26,870
into the framework that you can use that

00:50:24,080 --> 00:50:28,610
uses class validator so we won't worry

00:50:26,870 --> 00:50:29,870
about creating our own we'll just go

00:50:28,610 --> 00:50:33,350
ahead and use the one that mÃ¡s provides

00:50:29,870 --> 00:50:39,170
for us and so up here in the app module

00:50:33,350 --> 00:50:44,360
I'll go ahead and add that so once again

00:50:39,170 --> 00:50:46,410
it is available globally to my and I'll

00:50:44,360 --> 00:50:50,430
say a pipe

00:50:46,410 --> 00:50:52,740
and I'll use class validation pipe and

00:50:50,430 --> 00:50:54,660
if we take a look at validation pipe you

00:50:52,740 --> 00:51:02,310
can see that it's imported from SJS

00:50:54,660 --> 00:51:09,180
slash common and let that go for a

00:51:02,310 --> 00:51:10,950
moment question you could write your own

00:51:09,180 --> 00:51:13,950
custom custom validation pipe if you if

00:51:10,950 --> 00:51:15,750
you wanted to and so now I'm getting

00:51:13,950 --> 00:51:17,730
back bad requests but the format that's

00:51:15,750 --> 00:51:21,420
coming back isn't the format that this

00:51:17,730 --> 00:51:23,880
this wire is like really fidgety isn't

00:51:21,420 --> 00:51:26,040
there because in the format that it was

00:51:23,880 --> 00:51:29,160
expecting so let's go ahead and write a

00:51:26,040 --> 00:51:32,370
helper method inside of our service to

00:51:29,160 --> 00:51:38,160
handle that so go back into mission

00:51:32,370 --> 00:51:40,740
service on the client side and use this

00:51:38,160 --> 00:51:42,960
handle error or insert the same handle

00:51:40,740 --> 00:51:44,790
error so all we're doing here so we're

00:51:42,960 --> 00:51:46,440
taking a look if there's an error that

00:51:44,790 --> 00:51:48,570
comes through and it's status code

00:51:46,440 --> 00:51:51,180
equals 400 we're going to loop through

00:51:48,570 --> 00:51:54,480
each of those error messages that come

00:51:51,180 --> 00:51:56,400
back and kind of right now all I'm doing

00:51:54,480 --> 00:51:58,800
is like putting them all in a big string

00:51:56,400 --> 00:52:00,120
and displaying them but there's a lot of

00:51:58,800 --> 00:52:01,500
data that comes back as part of these

00:52:00,120 --> 00:52:04,680
error messages it's gonna let you know

00:52:01,500 --> 00:52:06,690
like the field that caused it and it's

00:52:04,680 --> 00:52:09,000
gonna let you know what which one of the

00:52:06,690 --> 00:52:10,680
particular decorators we use that also

00:52:09,000 --> 00:52:12,060
caused it so you could get really fancy

00:52:10,680 --> 00:52:13,380
with this and like actually put the

00:52:12,060 --> 00:52:14,730
errors inside of your forum if you

00:52:13,380 --> 00:52:18,620
wanted to or whatnot

00:52:14,730 --> 00:52:21,540
and then to use this instead of just

00:52:18,620 --> 00:52:23,940
wreaths roaming the air will just say

00:52:21,540 --> 00:52:26,840
this dot handle air in each of these

00:52:23,940 --> 00:52:26,840
blocks here

00:52:45,710 --> 00:52:53,670
okay so if I go to create and I hit save

00:52:49,290 --> 00:52:55,470
now I get a much better kind of much

00:52:53,670 --> 00:52:57,690
better experience of like seeing like

00:52:55,470 --> 00:53:00,930
what's actually wrong with my form and

00:52:57,690 --> 00:53:03,510
since we kind of put our business logic

00:53:00,930 --> 00:53:06,860
into a centralized place and we're using

00:53:03,510 --> 00:53:09,360
it everywhere that also works for

00:53:06,860 --> 00:53:11,220
updates as well so if I leave title

00:53:09,360 --> 00:53:19,320
blank here and see that I would get a

00:53:11,220 --> 00:53:21,270
back title should not be empty now I

00:53:19,320 --> 00:53:23,310
encourage you to take a deeper look into

00:53:21,270 --> 00:53:25,050
the class Fowler it validated library

00:53:23,310 --> 00:53:26,840
there's tons of alligators that you can

00:53:25,050 --> 00:53:30,830
do I want to show another one real quick

00:53:26,840 --> 00:53:34,440
so if I go back into my mission entity

00:53:30,830 --> 00:53:36,900
for this reward here earlier I put in a

00:53:34,440 --> 00:53:38,280
negative reward and that's definitely

00:53:36,900 --> 00:53:40,770
not gonna get me to take out the trash

00:53:38,280 --> 00:53:43,500
so I'm going to make sure or I'm gonna

00:53:40,770 --> 00:53:45,680
say a min and then specified that it has

00:53:43,500 --> 00:53:47,940
to you know that's that at least be a

00:53:45,680 --> 00:53:51,960
non-negative number here these in this

00:53:47,940 --> 00:53:53,520
decorator so if we come back in here let

00:53:51,960 --> 00:53:56,220
it compile we'll open up this one that

00:53:53,520 --> 00:53:59,270
had the negative number so if I hit save

00:53:56,220 --> 00:54:01,980
here now I get the reward must be less

00:53:59,270 --> 00:54:03,300
not be less than zero and if you wanted

00:54:01,980 --> 00:54:07,350
to you could override that error message

00:54:03,300 --> 00:54:08,790
so it's not so robotic you know the last

00:54:07,350 --> 00:54:10,110
thing in this lab what we're gonna do is

00:54:08,790 --> 00:54:17,100
we're gonna hook up this delete button

00:54:10,110 --> 00:54:19,530
and to go back into the form the delete

00:54:17,100 --> 00:54:22,140
button is currently calling a delete

00:54:19,530 --> 00:54:27,350
method and passing in the mission so

00:54:22,140 --> 00:54:27,350
here in this is I'm keeping track

00:54:31,220 --> 00:54:34,120
I'll get rid of that

00:54:38,350 --> 00:54:42,130
I'll put in the delete method and so

00:54:40,420 --> 00:54:45,550
here what we're doing is we're throwing

00:54:42,130 --> 00:54:46,690
up another alert alert modal and we're

00:54:45,550 --> 00:54:48,250
providing them with a couple different

00:54:46,690 --> 00:54:50,200
options so we're just making sure that

00:54:48,250 --> 00:54:52,360
are you sure you want to delete this

00:54:50,200 --> 00:54:54,160
particular entity you give them an O or

00:54:52,360 --> 00:54:56,050
we give them a yes when they click yes

00:54:54,160 --> 00:54:57,850
we give them a handler that's going to

00:54:56,050 --> 00:54:59,710
take care of it and this is just making

00:54:57,850 --> 00:55:01,750
the columns in the mission and if there

00:54:59,710 --> 00:55:03,870
happens to be an error displaying the

00:55:01,750 --> 00:55:03,870
air

00:55:09,340 --> 00:55:13,890
I'll come down here and now I can hit

00:55:11,380 --> 00:55:20,380
this so if I hit no it just goes away

00:55:13,890 --> 00:55:21,880
but if you hit yes delete submission all

00:55:20,380 --> 00:55:24,310
right so that is going to be lab three

00:55:21,880 --> 00:55:25,720
will give you a another 15 minutes on

00:55:24,310 --> 00:55:28,450
the clock and I'll be walking around so

00:55:25,720 --> 00:55:30,880
if you have any questions let me know so

00:55:28,450 --> 00:55:32,110
we'll continue on I like to say thanks

00:55:30,880 --> 00:55:35,050
for sticking around

00:55:32,110 --> 00:55:37,230
up until this lab because personally I

00:55:35,050 --> 00:55:40,300
think this portion is the coolest part

00:55:37,230 --> 00:55:41,890
of nest and what you can do here using

00:55:40,300 --> 00:55:43,950
the power of type script on the server

00:55:41,890 --> 00:55:46,870
so we're gonna get a little bit into

00:55:43,950 --> 00:55:49,180
authorization and it's gonna become

00:55:46,870 --> 00:55:50,710
maybe a little bit of a hokey of an

00:55:49,180 --> 00:55:52,840
example because we're not actually doing

00:55:50,710 --> 00:55:54,520
like authentication we're not providing

00:55:52,840 --> 00:55:56,530
like usernames or passwords you'll see

00:55:54,520 --> 00:55:58,240
in there when we get to we're just like

00:55:56,530 --> 00:56:00,250
saying hey we're user or hey we're in a

00:55:58,240 --> 00:56:02,260
bin but I'm gonna see like how how we

00:56:00,250 --> 00:56:05,830
could go about like implementing a roles

00:56:02,260 --> 00:56:07,660
based authentication system using SAS so

00:56:05,830 --> 00:56:11,020
in here we're going to be doing some

00:56:07,660 --> 00:56:12,850
custom decorators and so nest has a

00:56:11,020 --> 00:56:14,320
bunch of mechanisms that you can use to

00:56:12,850 --> 00:56:16,060
build your own decorators we've already

00:56:14,320 --> 00:56:18,610
seen like how powerful they are already

00:56:16,060 --> 00:56:20,020
are for some of the other uses but now

00:56:18,610 --> 00:56:22,690
we're gonna start to build some of our

00:56:20,020 --> 00:56:24,940
own and in here we're also going to use

00:56:22,690 --> 00:56:27,580
guards and a garden nest is a lot like a

00:56:24,940 --> 00:56:30,240
guard inside of angular it's another

00:56:27,580 --> 00:56:32,470
piece of specialized middleware that's

00:56:30,240 --> 00:56:34,660
implements a particular interface that

00:56:32,470 --> 00:56:36,910
has a method that all you have to do is

00:56:34,660 --> 00:56:38,890
return a boolean value or true or false

00:56:36,910 --> 00:56:41,020
and so you can do all your logic you can

00:56:38,890 --> 00:56:42,430
take a look at the headers come in and

00:56:41,020 --> 00:56:44,320
to see who the user is cons

00:56:42,430 --> 00:56:46,240
authentication services or whatnot and

00:56:44,320 --> 00:56:49,510
see that hey does this user actually

00:56:46,240 --> 00:56:51,730
belong make it or have access to make

00:56:49,510 --> 00:56:53,350
this particular request and just simply

00:56:51,730 --> 00:56:57,850
return a true or false that's gonna

00:56:53,350 --> 00:57:02,280
happen okay so first off what I want to

00:56:57,850 --> 00:57:02,280
show here

00:57:06,380 --> 00:57:10,579
it's how we're going to do this rules

00:57:08,269 --> 00:57:13,849
based authentication so I already have a

00:57:10,579 --> 00:57:16,849
decorator created that is called rolls

00:57:13,849 --> 00:57:19,339
decorator TS and this came from using

00:57:16,849 --> 00:57:20,599
the nest CLI and this is actually what

00:57:19,339 --> 00:57:21,949
it creates for you out of the box

00:57:20,599 --> 00:57:24,049
there's nothing more that you need to do

00:57:21,949 --> 00:57:25,910
to set this up but what this is doing is

00:57:24,049 --> 00:57:28,309
saying hey we're going to create a

00:57:25,910 --> 00:57:31,239
decorator called rolls that's going to

00:57:28,309 --> 00:57:33,709
take in an array of string arguments and

00:57:31,239 --> 00:57:39,140
to see what that looks like if we come

00:57:33,709 --> 00:57:41,569
back over here to the controller we'll

00:57:39,140 --> 00:57:43,459
set up a system that says like hey we'll

00:57:41,569 --> 00:57:44,449
let anybody make get requests but we

00:57:43,459 --> 00:57:46,729
want to make sure that you're

00:57:44,449 --> 00:57:48,949
authenticated to make posts updates and

00:57:46,729 --> 00:57:51,469
Suites and to do a post we're gonna say

00:57:48,949 --> 00:57:58,309
hey we're gonna say rolls you need to be

00:57:51,469 --> 00:58:01,279
a user for updates will also say users

00:57:58,309 --> 00:58:02,839
can do updates as well but for deletes

00:58:01,279 --> 00:58:05,930
we want to make sure you're an admin

00:58:02,839 --> 00:58:08,299
role that way you know you're just not

00:58:05,930 --> 00:58:13,719
getting rid of your space missions

00:58:08,299 --> 00:58:16,430
without completing them now in order

00:58:13,719 --> 00:58:18,140
what we need to do though is that nest

00:58:16,430 --> 00:58:20,089
needs to be like aware of like what

00:58:18,140 --> 00:58:23,719
roles are particularly available and

00:58:20,089 --> 00:58:30,859
we'll use the auth card for that so up

00:58:23,719 --> 00:58:32,509
here in off guard we have this can

00:58:30,859 --> 00:58:35,900
activate method that returns a boolean

00:58:32,509 --> 00:58:38,150
value and this is just another provider

00:58:35,900 --> 00:58:40,160
service like any other so we can inject

00:58:38,150 --> 00:58:42,829
items in here so you can see we're

00:58:40,160 --> 00:58:44,719
injecting a user service and this user

00:58:42,829 --> 00:58:46,549
service is pretty simple we got our user

00:58:44,719 --> 00:58:48,589
setup we've got a user and admin and

00:58:46,549 --> 00:58:51,799
then based on that we have their roles

00:58:48,589 --> 00:58:55,390
and so a user has a user role and then

00:58:51,799 --> 00:58:55,390
an admin has a user

00:59:01,710 --> 00:59:11,070
and so we will replace this can activate

00:59:06,570 --> 00:59:12,780
with our own can activate and this looks

00:59:11,070 --> 00:59:14,820
imma walk you through this here because

00:59:12,780 --> 00:59:15,870
this is a little bit long so the first

00:59:14,820 --> 00:59:18,300
thing that we're doing is we're

00:59:15,870 --> 00:59:20,370
switching to an HTTP context and that's

00:59:18,300 --> 00:59:22,620
because nest can work in different types

00:59:20,370 --> 00:59:24,000
of contents contexts it could be working

00:59:22,620 --> 00:59:25,440
as a micro service or it could be

00:59:24,000 --> 00:59:27,420
working as a WebSocket server or

00:59:25,440 --> 00:59:29,960
something like that so we switch to HTTP

00:59:27,420 --> 00:59:33,750
so we get the proper data back on it

00:59:29,960 --> 00:59:34,980
we're defining a token and a user and

00:59:33,750 --> 00:59:36,990
what we're doing here is we're taking a

00:59:34,980 --> 00:59:38,760
look at the authorization header and so

00:59:36,990 --> 00:59:40,170
if the authorization header starts with

00:59:38,760 --> 00:59:42,810
bearer because we're gonna use bearer

00:59:40,170 --> 00:59:45,030
based authentication what we want to do

00:59:42,810 --> 00:59:46,380
is we want to get that token from it and

00:59:45,030 --> 00:59:47,580
this isn't like a job or anything it's

00:59:46,380 --> 00:59:49,860
just a simple string that we're playing

00:59:47,580 --> 00:59:54,530
with in this demo and then we'll call

00:59:49,860 --> 00:59:57,300
them the user service with with that

00:59:54,530 --> 00:59:59,220
token get back the user if we don't find

00:59:57,300 --> 01:00:00,990
a user we're gonna return back false cuz

00:59:59,220 --> 01:00:03,450
it partly means that they're messing

01:00:00,990 --> 01:00:05,190
around if their token but if we do find

01:00:03,450 --> 01:00:09,390
a user we're going to attach it to the

01:00:05,190 --> 01:00:11,130
request so remember that for later so if

01:00:09,390 --> 01:00:13,140
we get here we're good now we're gonna

01:00:11,130 --> 01:00:14,610
check for the required roles and what

01:00:13,140 --> 01:00:18,090
this is doing so this is going to look

01:00:14,610 --> 01:00:20,040
for that rules decorator and if it

01:00:18,090 --> 01:00:21,300
exists it's going to return back those

01:00:20,040 --> 01:00:23,820
roles that we specified in that

01:00:21,300 --> 01:00:25,290
decorator and if it doesn't if it turns

01:00:23,820 --> 01:00:30,510
back on defiant we're just gonna assign

01:00:25,290 --> 01:00:32,610
it an empty array now here we're seeing

01:00:30,510 --> 01:00:35,160
the it's a required sorry if it required

01:00:32,610 --> 01:00:36,480
roles is blank that means that we

01:00:35,160 --> 01:00:38,040
probably never put the roles decorator

01:00:36,480 --> 01:00:41,490
on it so we want to let people through

01:00:38,040 --> 01:00:43,290
so we return true if it's not blank if

01:00:41,490 --> 01:00:44,580
the user is logged in we're gonna are

01:00:43,290 --> 01:00:47,760
not logged in we're going to turn back

01:00:44,580 --> 01:00:49,320
false and then all we do here in the

01:00:47,760 --> 01:00:51,870
last portion is we check to make sure

01:00:49,320 --> 01:00:54,480
that the user has that role and the list

01:00:51,870 --> 01:00:57,590
of required roles and we turn back a

01:00:54,480 --> 01:00:57,590
boolean value based on that

01:00:57,999 --> 01:01:06,440
so in if you take a look at our ionic

01:01:04,519 --> 01:01:08,509
app real quick up here in the menu we

01:01:06,440 --> 01:01:11,029
have login and you can either log in as

01:01:08,509 --> 01:01:13,730
a user or log in as admin so I'll go

01:01:11,029 --> 01:01:18,170
ahead and log in as a user if I come up

01:01:13,730 --> 01:01:21,619
here and try to create a user nope I

01:01:18,170 --> 01:01:25,609
forgot to add the off guard to our

01:01:21,619 --> 01:01:35,150
module so it could be used so down here

01:01:25,609 --> 01:01:39,190
in the providers say app guard and it's

01:01:35,150 --> 01:01:39,190
used class of off guard

01:01:43,270 --> 01:01:46,940
give that a second to recompile and if I

01:01:45,920 --> 01:01:49,220
hit save here

01:01:46,940 --> 01:01:51,230
there you go I'm now getting a forbidden

01:01:49,220 --> 01:01:52,970
resource but I logged in --is user but

01:01:51,230 --> 01:01:55,310
what we're not doing is right now we're

01:01:52,970 --> 01:01:57,530
not currently sending the authorization

01:01:55,310 --> 01:02:00,110
header through and so one way that we

01:01:57,530 --> 01:02:01,910
can do that inside of angular is to use

01:02:00,110 --> 01:02:04,850
an angular interceptor that will look at

01:02:01,910 --> 01:02:06,470
every HTTP request and we can see hey if

01:02:04,850 --> 01:02:10,820
the users logged in let's automatically

01:02:06,470 --> 01:02:14,750
add that authorization header to the to

01:02:10,820 --> 01:02:18,740
the request so we have a auth

01:02:14,750 --> 01:02:20,270
interceptor and this has an intercept

01:02:18,740 --> 01:02:26,900
method and I'll go ahead and replace it

01:02:20,270 --> 01:02:28,730
with our own and this is pretty simple

01:02:26,900 --> 01:02:31,460
so instead of local storage we're just

01:02:28,730 --> 01:02:35,450
storing what they're logged in as under

01:02:31,460 --> 01:02:38,210
a key called off token if it's not there

01:02:35,450 --> 01:02:39,860
we just let the request go on through if

01:02:38,210 --> 01:02:43,210
it is there we're setting that bear-bear

01:02:39,860 --> 01:02:45,530
token with the value of the auth header

01:02:43,210 --> 01:02:47,060
and this is what it looks like here so

01:02:45,530 --> 01:02:53,480
we've got the auth token and right now

01:02:47,060 --> 01:02:55,760
I'm logged in as user so now I should be

01:02:53,480 --> 01:02:57,980
able to come back in here and inside of

01:02:55,760 --> 01:03:00,710
here I can say you know just say test

01:02:57,980 --> 01:03:03,680
and give reward of thousand hit save

01:03:00,710 --> 01:03:06,110
okay I'm able to create or create and

01:03:03,680 --> 01:03:09,740
come back up here to do to markup is

01:03:06,110 --> 01:03:16,150
active I can update but if I go up here

01:03:09,740 --> 01:03:16,150
to delete yeah once again get back that

01:03:18,070 --> 01:03:23,110
unauthorized requests exception so I can

01:03:20,830 --> 01:03:25,900
come over here and now login I'll log

01:03:23,110 --> 01:03:27,790
out and I'll come back over here and

01:03:25,900 --> 01:03:30,220
login as admin and you can see over here

01:03:27,790 --> 01:03:36,970
the value of the token change to admin

01:03:30,220 --> 01:03:39,580
token you know once I delete it now I

01:03:36,970 --> 01:03:42,220
can delete it now the really cool thing

01:03:39,580 --> 01:03:44,920
here since I attached the user to the

01:03:42,220 --> 01:03:52,150
request I now have access to the user

01:03:44,920 --> 01:03:54,460
inside of my controller functions so one

01:03:52,150 --> 01:03:58,030
thing I could do we can pass the request

01:03:54,460 --> 01:04:01,840
directly into as a parameter and let's

01:03:58,030 --> 01:04:06,790
just say for post so I could say I could

01:04:01,840 --> 01:04:12,610
use a decorator called request req as

01:04:06,790 --> 01:04:15,310
any and if you remember our mission

01:04:12,610 --> 01:04:18,370
entity has a created by field on it that

01:04:15,310 --> 01:04:21,780
right now just defaults to user but we

01:04:18,370 --> 01:04:27,220
could say mission that's created by

01:04:21,780 --> 01:04:29,890
equals req user about ID and this would

01:04:27,220 --> 01:04:31,420
work we can access the request but we

01:04:29,890 --> 01:04:34,360
can go one step further and we can

01:04:31,420 --> 01:04:37,270
actually create our own decorator to

01:04:34,360 --> 01:04:39,130
inject an actual user into our

01:04:37,270 --> 01:04:44,140
parameters instead of the request object

01:04:39,130 --> 01:04:46,750
itself and to do that we have this get

01:04:44,140 --> 01:04:48,370
user decorator and so this is a another

01:04:46,750 --> 01:04:50,470
CLI command that you can run from the

01:04:48,370 --> 01:04:52,690
nest CLI to create a custom parameter

01:04:50,470 --> 01:04:54,130
decorator and this is gonna pass you

01:04:52,690 --> 01:04:56,200
back some data but it's also going to

01:04:54,130 --> 01:04:58,840
pass you back to the request object and

01:04:56,200 --> 01:05:05,880
so here we can just say return req dot

01:04:58,840 --> 01:05:05,880
user and directly in our controller

01:05:06,960 --> 01:05:13,290
instead of passing in the request we can

01:05:09,430 --> 01:05:13,290
now use this decorator it gets user

01:05:14,150 --> 01:05:22,500
so we turn a user to us and so now we

01:05:18,570 --> 01:05:26,330
can just say user dot ID and I'll set a

01:05:22,500 --> 01:05:26,330
breakpoint here and run it

01:05:31,099 --> 01:05:38,440
so now when we go in and creates a new

01:05:34,609 --> 01:05:40,279
mission you can see we have our user

01:05:38,440 --> 01:05:43,039
already attached there

01:05:40,279 --> 01:05:44,569
so these custom parameters that can like

01:05:43,039 --> 01:05:46,670
really help clean up your controller

01:05:44,569 --> 01:05:53,019
code if you're passing in like custom

01:05:46,670 --> 01:05:55,729
objects and stuff like that all right so

01:05:53,019 --> 01:05:57,469
this is normally where I would start lab

01:05:55,729 --> 01:06:01,069
4 but since it's a lab 4 I'm going to

01:05:57,469 --> 01:06:04,849
say this is homework this so take a you

01:06:01,069 --> 01:06:10,420
can take it with you but if you do have

01:06:04,849 --> 01:06:10,420
any questions during it

01:06:16,140 --> 01:06:22,410
here's a list of resources for you so we

01:06:18,269 --> 01:06:24,209
got an SJ s website for their great

01:06:22,410 --> 01:06:25,739
documentation now also a little bit more

01:06:24,209 --> 01:06:27,359
information about how to get started how

01:06:25,739 --> 01:06:29,489
to install it since kind of everything

01:06:27,359 --> 01:06:30,869
came pre baked in the demo package and

01:06:29,489 --> 01:06:33,119
then if you want some more information

01:06:30,869 --> 01:06:36,329
about ionic that's our website address

01:06:33,119 --> 01:06:38,279
ionic is 100% free and open source so

01:06:36,329 --> 01:06:39,959
check it out if you want to do mobile

01:06:38,279 --> 01:06:42,239
application development using your

01:06:39,959 --> 01:06:45,450
existing angular skills I'm also writing

01:06:42,239 --> 01:06:46,979
a series kind of along the same concept

01:06:45,450 --> 01:06:50,069
but it goes a little bit deeper into

01:06:46,979 --> 01:06:52,349
nest and ionic and database access and

01:06:50,069 --> 01:06:54,749
stuff like that so there's the link to

01:06:52,349 --> 01:06:56,640
the first post in that blog series if

01:06:54,749 --> 01:07:01,799
you want to chat you can hit me up on

01:06:56,640 --> 01:07:04,049
Twitter at Eli Lucas or immediately

01:07:01,799 --> 01:07:05,880
following this session I'm gonna be up

01:07:04,049 --> 01:07:10,410
and to ask me anything room on the third

01:07:05,880 --> 01:07:12,869
floor and Reuben and also who's going to

01:07:10,410 --> 01:07:15,509
be there as a Camille who is the creator

01:07:12,869 --> 01:07:19,019
of nest and so you if you have like more

01:07:15,509 --> 01:07:20,519
like deep dive particular questions

01:07:19,019 --> 01:07:22,109
about nest you can go there and actually

01:07:20,519 --> 01:07:24,660
talk with the creator he's gonna be in

01:07:22,109 --> 01:07:26,160
the room at the same time so I'd like to

01:07:24,660 --> 01:07:28,259
thank you all for coming to my session

01:07:26,160 --> 01:07:30,469
and hope you have a great rest of the

01:07:28,259 --> 01:07:30,469
conference

01:07:32,480 --> 01:07:34,540
you

01:07:38,630 --> 01:07:45,250
[Music]

01:07:50,840 --> 01:07:52,900

YouTube URL: https://www.youtube.com/watch?v=XkEA8L_4IUY


