Title: Personalization, Performance, and Probably Dynamic Content | Jeff Cross & Kaitlyn Ekdahl
Publication date: 2019-05-07
Playlist: ng-conf 2019
Description: 
	We want it all: CMS-driven sites, with personalized content, without sacrificing load performance. But if youâ€™ve tried to accomplish all three with an Angular app, you may have concluded that the required request-time computation for such experiences is fundamentally at odds with a high-performance site. In this talk, Jeff Cross will show proven techniques used by Nrwl to enable super-fast, highly-dynamic websites by employing a mix of technical tactics and design constraints.

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:07,920 --> 00:00:14,759
[Music]

00:00:12,660 --> 00:00:17,070
so we're going to talk about first off

00:00:14,759 --> 00:00:18,720
I'm Jeff dross I'm from Narwhal I'm

00:00:17,070 --> 00:00:21,240
Caitlin Excel I'm a developer at

00:00:18,720 --> 00:00:22,859
t-mobile and we're going to talk about

00:00:21,240 --> 00:00:26,279
some interesting cool stuff we've been

00:00:22,859 --> 00:00:28,789
working on together so today we have for

00:00:26,279 --> 00:00:30,990
you a very simple shopping application

00:00:28,789 --> 00:00:33,239
it's something you would see maybe on

00:00:30,990 --> 00:00:35,670
some mobile comm where we just have a

00:00:33,239 --> 00:00:37,200
simple phone browse page where you can

00:00:35,670 --> 00:00:39,120
see some phones and then when you click

00:00:37,200 --> 00:00:41,430
on one you can see some details about

00:00:39,120 --> 00:00:43,079
that phone two things to keep in mind

00:00:41,430 --> 00:00:46,500
here I want you to pay close attention

00:00:43,079 --> 00:00:48,539
to in the upper right corner we can see

00:00:46,500 --> 00:00:51,989
there's a personalized message and then

00:00:48,539 --> 00:00:55,739
below the below the description we have

00:00:51,989 --> 00:00:57,329
some financing options so when we set

00:00:55,739 --> 00:00:58,739
out to build this you know we wanted to

00:00:57,329 --> 00:01:00,629
define some business requirements and

00:00:58,739 --> 00:01:03,059
talk about what's important with this

00:01:00,629 --> 00:01:04,559
application so we want the phones to be

00:01:03,059 --> 00:01:05,970
displayed on the screen as soon as

00:01:04,559 --> 00:01:07,560
possible even if the page isn't

00:01:05,970 --> 00:01:09,630
interactive we want the user to be able

00:01:07,560 --> 00:01:10,830
to see something and feel like it's

00:01:09,630 --> 00:01:12,060
loading and then when it becomes

00:01:10,830 --> 00:01:14,070
interactive you know they've already

00:01:12,060 --> 00:01:16,500
kind of decided what they want to do and

00:01:14,070 --> 00:01:17,549
so you know this is the typical case for

00:01:16,500 --> 00:01:19,680
pre rendering which we're not going to

00:01:17,549 --> 00:01:21,210
get into a whole lot of why and window

00:01:19,680 --> 00:01:24,030
pre-render today let's just assume that

00:01:21,210 --> 00:01:25,500
that we will end up going that way we

00:01:24,030 --> 00:01:27,360
also want the pages to be search engine

00:01:25,500 --> 00:01:29,070
crawlable we want the search engines to

00:01:27,360 --> 00:01:32,700
not have any problems rendering our page

00:01:29,070 --> 00:01:34,650
and we want to personalize the page so

00:01:32,700 --> 00:01:36,240
that users are more likely to find what

00:01:34,650 --> 00:01:39,420
they want and more likely to convert to

00:01:36,240 --> 00:01:41,460
customers so we want to take what we

00:01:39,420 --> 00:01:43,409
know about the user and form the page to

00:01:41,460 --> 00:01:46,079
them to fit what they're looking for

00:01:43,409 --> 00:01:47,310
so in particular Caitlyn showed the

00:01:46,079 --> 00:01:49,470
account widget at the top of the screen

00:01:47,310 --> 00:01:51,060
we want to like to let the user know yes

00:01:49,470 --> 00:01:53,939
you're logged in you could log out if

00:01:51,060 --> 00:01:55,110
you want here's your picture of yourself

00:01:53,939 --> 00:01:58,469
just so you remember what you look like

00:01:55,110 --> 00:01:59,939
and for some users they should see

00:01:58,469 --> 00:02:01,770
financing options so if we know the user

00:01:59,939 --> 00:02:03,360
we know their credit score or credit

00:02:01,770 --> 00:02:05,070
worthiness we want to be able to show

00:02:03,360 --> 00:02:06,329
them some options on different ways they

00:02:05,070 --> 00:02:08,520
can buy the phone rather than just

00:02:06,329 --> 00:02:10,560
paying out of pocket but that's only for

00:02:08,520 --> 00:02:13,650
select users of the application not for

00:02:10,560 --> 00:02:13,860
everyone so we've decided you know we

00:02:13,650 --> 00:02:15,230
want

00:02:13,860 --> 00:02:17,400
get something on the screen quickly

00:02:15,230 --> 00:02:18,780
pre-rendering is the best way to do you

00:02:17,400 --> 00:02:21,240
know pre-rendering lets us get something

00:02:18,780 --> 00:02:24,360
in front of the user rendered before any

00:02:21,240 --> 00:02:25,710
JavaScript is loaded or executed so

00:02:24,360 --> 00:02:26,910
we're going to do pre rendering but we

00:02:25,710 --> 00:02:28,170
need to evaluate the costs of

00:02:26,910 --> 00:02:29,730
pre-rendering to determine what the

00:02:28,170 --> 00:02:32,790
right pre-rendering strategy is for

00:02:29,730 --> 00:02:35,460
application so in general pre-rendering

00:02:32,790 --> 00:02:38,070
is it takes computation there's there's

00:02:35,460 --> 00:02:39,750
a maybe constant maybe not constant

00:02:38,070 --> 00:02:42,090
amount of time that it takes anytime you

00:02:39,750 --> 00:02:43,410
pre render a page and so you know

00:02:42,090 --> 00:02:45,750
angular when you've run the platform

00:02:43,410 --> 00:02:47,520
server rendering it's even that's just

00:02:45,750 --> 00:02:49,410
doing some work but especially if you

00:02:47,520 --> 00:02:50,640
have a sync operations that you have to

00:02:49,410 --> 00:02:52,170
do while you're free rendering like if

00:02:50,640 --> 00:02:54,330
I'm fetching user data from a database

00:02:52,170 --> 00:02:56,370
or making HTTP calls to an API that's

00:02:54,330 --> 00:02:58,860
going to add even more time to the

00:02:56,370 --> 00:03:01,650
rendering process so that that has a big

00:02:58,860 --> 00:03:04,620
impact on when and how we pre-render our

00:03:01,650 --> 00:03:06,959
pages the key thing is we don't want to

00:03:04,620 --> 00:03:09,120
incur any of these costs in the request

00:03:06,959 --> 00:03:10,590
lifecycle when a user requests a page we

00:03:09,120 --> 00:03:12,270
don't want to be doing that computation

00:03:10,590 --> 00:03:14,610
as part of that lifecycle because that's

00:03:12,270 --> 00:03:17,370
going to slow down the rendering of the

00:03:14,610 --> 00:03:19,709
page and across any application not just

00:03:17,370 --> 00:03:21,630
in this application the optimal user

00:03:19,709 --> 00:03:24,720
experience is to pre render everything

00:03:21,630 --> 00:03:26,610
out of the end of the requests lifecycle

00:03:24,720 --> 00:03:28,530
at Build time or at some kind of change

00:03:26,610 --> 00:03:30,570
you want to have all these pages built

00:03:28,530 --> 00:03:32,370
and cached ready to just serve to the

00:03:30,570 --> 00:03:34,320
user from the cache that's not always

00:03:32,370 --> 00:03:37,320
tenable and usually there's some hybrid

00:03:34,320 --> 00:03:40,230
strategy that that you want to apply but

00:03:37,320 --> 00:03:42,590
this is the the optimal so in our case

00:03:40,230 --> 00:03:45,269
we chose the pre-rendering strategy of

00:03:42,590 --> 00:03:46,500
or we had some constraints that we did a

00:03:45,269 --> 00:03:48,570
little bit of measurement to see okay

00:03:46,500 --> 00:03:50,700
exactly how costly is it for us to free

00:03:48,570 --> 00:03:52,080
render and these are example numbers

00:03:50,700 --> 00:03:55,290
these aren't real numbers from from our

00:03:52,080 --> 00:03:56,880
use case but let's say it takes 100

00:03:55,290 --> 00:03:58,620
milliseconds to render a bunch of pages

00:03:56,880 --> 00:04:01,410
in the batch I do a script we're

00:03:58,620 --> 00:04:04,560
rendering 10 pages 100 pages on average

00:04:01,410 --> 00:04:06,209
it's 100 milliseconds but if we render a

00:04:04,560 --> 00:04:08,880
personalized page or we're having to

00:04:06,209 --> 00:04:11,070
make calls to a user database to compute

00:04:08,880 --> 00:04:12,239
things and understand what options we

00:04:11,070 --> 00:04:13,890
should show to a user and generate a

00:04:12,239 --> 00:04:15,870
page for them and if we do it one at a

00:04:13,890 --> 00:04:17,970
time it's 400 milliseconds so if we do

00:04:15,870 --> 00:04:19,650
that request time this is probably the

00:04:17,970 --> 00:04:23,130
cost we'd be incurring as part of the

00:04:19,650 --> 00:04:25,590
request lifecycle so if we say we have

00:04:23,130 --> 00:04:27,270
thousands of products and we have then

00:04:25,590 --> 00:04:27,720
thousands of pre-rendered pages if we

00:04:27,270 --> 00:04:31,290
just read

00:04:27,720 --> 00:04:33,360
one page for product but if we want to

00:04:31,290 --> 00:04:35,850
want to personalize each page and render

00:04:33,360 --> 00:04:37,230
each product page for every user at

00:04:35,850 --> 00:04:39,030
Build time that's going to be billions

00:04:37,230 --> 00:04:40,410
of pages we got to pre-render and you

00:04:39,030 --> 00:04:42,510
know that's that's a long time to wait

00:04:40,410 --> 00:04:44,610
for a CI job to finish and deploy to

00:04:42,510 --> 00:04:47,670
production even though there's lots of

00:04:44,610 --> 00:04:50,040
Twitter to read in the mean time so this

00:04:47,670 --> 00:04:51,540
the chosen strategy we went with was

00:04:50,040 --> 00:04:54,480
we're going to pre render and cache all

00:04:51,540 --> 00:04:57,690
of our phone detail pages offline not at

00:04:54,480 --> 00:04:59,010
request time that's going to save us

00:04:57,690 --> 00:05:00,540
four milliseconds each visit because

00:04:59,010 --> 00:05:02,790
we're just pulling this page this pre

00:05:00,540 --> 00:05:04,230
rendered page or from a cache so you get

00:05:02,790 --> 00:05:06,450
to use it right away no computation

00:05:04,230 --> 00:05:09,240
other than just grabbing that page and

00:05:06,450 --> 00:05:11,490
serving it to them the key is we can

00:05:09,240 --> 00:05:12,840
have no user specific content in this

00:05:11,490 --> 00:05:16,170
pre rendered page so this is a

00:05:12,840 --> 00:05:17,700
constraint we've imposed on ourselves in

00:05:16,170 --> 00:05:19,169
the real world this might be a little

00:05:17,700 --> 00:05:21,600
bit different you might prerender a

00:05:19,169 --> 00:05:22,680
subset of your pages because you know if

00:05:21,600 --> 00:05:24,330
you have a lot of products and

00:05:22,680 --> 00:05:25,740
variations of things like that you'll

00:05:24,330 --> 00:05:27,900
probably to choose the most popular

00:05:25,740 --> 00:05:29,400
pages and then do the others lazily but

00:05:27,900 --> 00:05:31,620
let's just say for this example we're

00:05:29,400 --> 00:05:35,640
going to render all pages at Build time

00:05:31,620 --> 00:05:37,530
and that's the best strategy so again to

00:05:35,640 --> 00:05:40,320
reiterate to drastically reduce the

00:05:37,530 --> 00:05:42,660
pre-rendering workload in the request

00:05:40,320 --> 00:05:45,270
lifecycle all users and in general to

00:05:42,660 --> 00:05:46,800
reduce the pre-rendering work all users

00:05:45,270 --> 00:05:50,970
are going to see the same unperson

00:05:46,800 --> 00:05:52,800
alized pre-rendered page so let's talk a

00:05:50,970 --> 00:05:55,530
little bit about the page states that

00:05:52,800 --> 00:05:58,050
Jeff talks about so we can think of our

00:05:55,530 --> 00:05:59,790
page States as two discrete States we

00:05:58,050 --> 00:06:01,620
have our pre-rendered state this is

00:05:59,790 --> 00:06:03,330
going to be before our client loads and

00:06:01,620 --> 00:06:04,740
it's not going to have any of that

00:06:03,330 --> 00:06:06,750
personalized content that we've

00:06:04,740 --> 00:06:08,220
discussed so far then we have our

00:06:06,750 --> 00:06:09,780
personalized state after the client

00:06:08,220 --> 00:06:12,150
loads and the application is aware of

00:06:09,780 --> 00:06:15,419
the current user we can populate that

00:06:12,150 --> 00:06:16,040
data so how do we design for these two

00:06:15,419 --> 00:06:18,419
States

00:06:16,040 --> 00:06:20,190
well there are a few rules we can follow

00:06:18,419 --> 00:06:22,160
to make sure we're making the best user

00:06:20,190 --> 00:06:24,600
experience for these two discrete States

00:06:22,160 --> 00:06:26,610
for one we can make sure that our page

00:06:24,600 --> 00:06:28,440
layout isn't ever rearranged we don't

00:06:26,610 --> 00:06:30,120
want things being moved around when the

00:06:28,440 --> 00:06:34,260
client loads and we start to populate

00:06:30,120 --> 00:06:35,580
that personalized data we should also

00:06:34,260 --> 00:06:37,470
make sure the content should and

00:06:35,580 --> 00:06:38,970
abruptly shift when we do have to add

00:06:37,470 --> 00:06:40,820
stuff to our page we don't want to

00:06:38,970 --> 00:06:42,590
inject it in between some divs

00:06:40,820 --> 00:06:44,390
for example like if you're scrolling

00:06:42,590 --> 00:06:46,190
through Reddit and you have like the ad

00:06:44,390 --> 00:06:47,390
load between the posts and you

00:06:46,190 --> 00:06:51,340
accidentally click on it

00:06:47,390 --> 00:06:53,630
that's terrible design don't do that

00:06:51,340 --> 00:06:57,170
moreover we want to make sure our text

00:06:53,630 --> 00:06:59,870
doesn't change so if we have to change

00:06:57,170 --> 00:07:01,700
the value of some value of some data on

00:06:59,870 --> 00:07:03,380
the page we want to make sure that we're

00:07:01,700 --> 00:07:06,380
not actually changing that text because

00:07:03,380 --> 00:07:09,470
it could be misleading so here are some

00:07:06,380 --> 00:07:11,360
examples of that if are in our pre

00:07:09,470 --> 00:07:13,280
rendered page we want to make sure that

00:07:11,360 --> 00:07:15,350
when we do actually load our content

00:07:13,280 --> 00:07:16,640
we're not moving the phones in the wrong

00:07:15,350 --> 00:07:18,200
side of the screen we don't want to

00:07:16,640 --> 00:07:24,470
inject this content where it shouldn't

00:07:18,200 --> 00:07:27,230
be we also want to avoid abrupt shifts

00:07:24,470 --> 00:07:28,940
if we do have to add content we want to

00:07:27,230 --> 00:07:31,130
make sure it's being tacked on at the

00:07:28,940 --> 00:07:32,570
end where it's not intrusive and we want

00:07:31,130 --> 00:07:35,410
to make sure we have a smooth transition

00:07:32,570 --> 00:07:38,090
so it's not just jumping in there and

00:07:35,410 --> 00:07:40,250
then finally if we do have to display

00:07:38,090 --> 00:07:43,310
some constant data we don't want to add

00:07:40,250 --> 00:07:45,890
some text change when the client does

00:07:43,310 --> 00:07:47,810
load we would prefer more of a

00:07:45,890 --> 00:07:49,550
placeholder in this case because it

00:07:47,810 --> 00:07:51,380
might be misleading if I come to a page

00:07:49,550 --> 00:07:53,810
and I'm expecting to see my greeting

00:07:51,380 --> 00:07:58,730
message to greet me personally I am NOT

00:07:53,810 --> 00:08:00,980
a guest so it's helpful to think about

00:07:58,730 --> 00:08:02,390
your UI in terms of two discreet states

00:08:00,980 --> 00:08:03,980
and then it could consider the

00:08:02,390 --> 00:08:06,230
transition from the one state to another

00:08:03,980 --> 00:08:08,780
and that's a good way to think about it

00:08:06,230 --> 00:08:10,790
another way to think about your your

00:08:08,780 --> 00:08:13,610
pre-rendering transition is classifying

00:08:10,790 --> 00:08:15,530
your components and for our case we

00:08:13,610 --> 00:08:17,990
classify components our personalized

00:08:15,530 --> 00:08:19,730
opponents in two categories either a

00:08:17,990 --> 00:08:21,260
constant or conditional so every

00:08:19,730 --> 00:08:23,330
component that's personalized we

00:08:21,260 --> 00:08:25,010
determine is it constant or conditional

00:08:23,330 --> 00:08:27,890
and we use that to determine the

00:08:25,010 --> 00:08:29,780
strategy so a constant component we we

00:08:27,890 --> 00:08:32,419
say is available is visible to all users

00:08:29,780 --> 00:08:34,010
so regardless of what we find out about

00:08:32,419 --> 00:08:36,140
the user the component is going to be

00:08:34,010 --> 00:08:37,520
there the content inside is just going

00:08:36,140 --> 00:08:39,650
to be different depending on something

00:08:37,520 --> 00:08:41,060
but the structure the dimensions it's

00:08:39,650 --> 00:08:42,950
going to be the same for everybody

00:08:41,060 --> 00:08:45,020
whereas a conditional component is only

00:08:42,950 --> 00:08:46,400
going to be visible to some users based

00:08:45,020 --> 00:08:48,550
on what we find out about that user

00:08:46,400 --> 00:08:51,980
after the page has bootstrapped

00:08:48,550 --> 00:08:54,050
so in our case the financing component

00:08:51,980 --> 00:08:55,940
is a conditional component

00:08:54,050 --> 00:08:57,680
we only show it if we know enough about

00:08:55,940 --> 00:09:00,019
the user to know what options they have

00:08:57,680 --> 00:09:01,490
for financing so in our case the

00:09:00,019 --> 00:09:03,950
strategy we chose for the conditional

00:09:01,490 --> 00:09:05,990
component was to expand it vertically so

00:09:03,950 --> 00:09:07,670
when when the prerendered page is loaded

00:09:05,990 --> 00:09:10,100
this element has a height of zero it's

00:09:07,670 --> 00:09:12,050
probably not even shown but when we find

00:09:10,100 --> 00:09:13,670
out that it is available and we populate

00:09:12,050 --> 00:09:16,060
the content then we animate it into

00:09:13,670 --> 00:09:18,350
place by expanding the height of it and

00:09:16,060 --> 00:09:20,240
we've also placed it at the end of the

00:09:18,350 --> 00:09:22,279
content here so that the the flow of

00:09:20,240 --> 00:09:25,310
content below it isn't disrupted by it

00:09:22,279 --> 00:09:27,620
expanding so we have a nice smooth

00:09:25,310 --> 00:09:30,320
transition from the pre-rendered state

00:09:27,620 --> 00:09:32,240
to the fully rendered personalised state

00:09:30,320 --> 00:09:33,920
and our constant component is the

00:09:32,240 --> 00:09:35,510
profile even if you're a guest not

00:09:33,920 --> 00:09:36,769
logged in or you are logged in or

00:09:35,510 --> 00:09:37,880
whatever kind of user you are you're

00:09:36,769 --> 00:09:40,100
going to see this so you know that

00:09:37,880 --> 00:09:42,709
you're logged in you know your state and

00:09:40,100 --> 00:09:45,380
so we are going ahead and we're using a

00:09:42,709 --> 00:09:46,700
ghost element strategy for this we know

00:09:45,380 --> 00:09:48,529
it's going to be there so we want to

00:09:46,700 --> 00:09:50,149
reserve that place in this page the page

00:09:48,529 --> 00:09:51,740
we want the user to see something's

00:09:50,149 --> 00:09:54,709
going to be here you can probably tell

00:09:51,740 --> 00:09:56,390
by the shape what it is and and when

00:09:54,709 --> 00:09:58,399
it's available and we know who they are

00:09:56,390 --> 00:10:00,350
then we populate it now the Caitlyn's

00:09:58,399 --> 00:10:01,820
point earlier we don't replace text we

00:10:00,350 --> 00:10:04,190
don't start with some text and replace

00:10:01,820 --> 00:10:05,750
it with other text because that would be

00:10:04,190 --> 00:10:07,310
confusing you would actually be lying to

00:10:05,750 --> 00:10:08,720
be user saying hi guest because you

00:10:07,310 --> 00:10:11,390
don't know if they're guests you know

00:10:08,720 --> 00:10:12,860
they're logged in user so defining

00:10:11,390 --> 00:10:14,750
composed of these two states helps you

00:10:12,860 --> 00:10:15,860
think more clearly are these two types

00:10:14,750 --> 00:10:18,470
of components helps you think more

00:10:15,860 --> 00:10:20,390
clearly about your strategy for placing

00:10:18,470 --> 00:10:23,510
it on the page and how it will

00:10:20,390 --> 00:10:26,240
transition so you can plot it on axis

00:10:23,510 --> 00:10:28,070
like this just reiterate we have on one

00:10:26,240 --> 00:10:30,170
our UI state which is either

00:10:28,070 --> 00:10:32,560
pre-rendered or personalized and then

00:10:30,170 --> 00:10:35,420
our component type and then we see the

00:10:32,560 --> 00:10:37,790
the strategies we use the ghost element

00:10:35,420 --> 00:10:40,300
for the constant the the smooth

00:10:37,790 --> 00:10:45,949
transition for the conditional and

00:10:40,300 --> 00:10:47,720
everyone is happy at least I'm happy so

00:10:45,949 --> 00:10:50,120
we have our strategy for personalization

00:10:47,720 --> 00:10:52,640
and how do you make it more performant

00:10:50,120 --> 00:10:53,870
performant how do we plan for this when

00:10:52,640 --> 00:10:56,329
we start actually designing our

00:10:53,870 --> 00:10:58,209
application there are a few things we

00:10:56,329 --> 00:11:00,110
can do to make sure we're planning for

00:10:58,209 --> 00:11:04,760
personalization on our personalized

00:11:00,110 --> 00:11:06,230
content I think the most important point

00:11:04,760 --> 00:11:07,790
is to make sure the designers and the

00:11:06,230 --> 00:11:09,410
developers are on this

00:11:07,790 --> 00:11:11,570
Paige they should all be in the same

00:11:09,410 --> 00:11:13,190
room during the design phase and talking

00:11:11,570 --> 00:11:16,460
about what the behavior of the

00:11:13,190 --> 00:11:18,320
application should be of course the

00:11:16,460 --> 00:11:21,530
designers should consider the

00:11:18,320 --> 00:11:23,120
conditional personalized content meaning

00:11:21,530 --> 00:11:25,580
the content that may not be there for

00:11:23,120 --> 00:11:28,090
every user how does that page look if it

00:11:25,580 --> 00:11:30,680
is there versus when it isn't there

00:11:28,090 --> 00:11:32,840
designers should also consider where the

00:11:30,680 --> 00:11:35,210
constant personalized data should be and

00:11:32,840 --> 00:11:40,520
what the placeholder should be for our

00:11:35,210 --> 00:11:41,840
pre-rendered state also the designers

00:11:40,520 --> 00:11:43,790
should help figure out what that

00:11:41,840 --> 00:11:45,080
transition should look like when we go

00:11:43,790 --> 00:11:47,150
from our pre-rendered States or

00:11:45,080 --> 00:11:48,860
personalized content state what is the

00:11:47,150 --> 00:11:51,830
behavior what is the animation or

00:11:48,860 --> 00:11:53,480
transition but you know we can't put all

00:11:51,830 --> 00:11:54,950
the onus on designers it's up to us as

00:11:53,480 --> 00:11:56,960
developers being the last line of

00:11:54,950 --> 00:11:58,340
defense to make sure we're not shipping

00:11:56,960 --> 00:12:00,800
things that are going to make for these

00:11:58,340 --> 00:12:02,450
awkward jumpy transitions from our

00:12:00,800 --> 00:12:04,160
pre-rendered state to our personalized

00:12:02,450 --> 00:12:05,540
state and this applies not to just

00:12:04,160 --> 00:12:07,370
personalize but anything that's dynamic

00:12:05,540 --> 00:12:09,980
that you're determining after a page is

00:12:07,370 --> 00:12:12,050
pre-rendered making sure that you as the

00:12:09,980 --> 00:12:13,340
final person to touch that UI that

00:12:12,050 --> 00:12:15,680
you're taking responsibility for making

00:12:13,340 --> 00:12:17,600
sure it's a great user experience when

00:12:15,680 --> 00:12:20,330
you're testing it when you're doing QA

00:12:17,600 --> 00:12:23,870
and when you're developing it so that's

00:12:20,330 --> 00:12:26,240
the most important it that's we can't

00:12:23,870 --> 00:12:28,880
blame designers for everything right we

00:12:26,240 --> 00:12:32,180
tried it doesn't work we actually love

00:12:28,880 --> 00:12:35,900
designers I used to anyone anyway so

00:12:32,180 --> 00:12:37,430
we're happy to talk about this it's

00:12:35,900 --> 00:12:41,290
really fun if you want to work on cool

00:12:37,430 --> 00:12:41,290
interesting things like this you can

00:12:43,090 --> 00:12:51,850
formation at C mobile comm slash Cruz

00:12:45,650 --> 00:12:51,850
also Narwhal we're hiring cool clients

00:12:56,170 --> 00:13:02,420
we don't give free phones away did he

00:12:58,610 --> 00:13:03,500
get maybe I would give a free phone if

00:13:02,420 --> 00:13:07,460
he's on wrong

00:13:03,500 --> 00:13:10,000
not anyone okay join our wall I'll give

00:13:07,460 --> 00:13:10,000
you a free phone

00:13:10,759 --> 00:13:16,619
just one also so we launched our

00:13:13,999 --> 00:13:19,079
platform yesterday Narwhal connect this

00:13:16,619 --> 00:13:21,389
is a place where we've kind of made it

00:13:19,079 --> 00:13:23,069
our knowledge base where we're we're

00:13:21,389 --> 00:13:25,079
sharing things we've learned over the

00:13:23,069 --> 00:13:27,420
years of working with clients we were

00:13:25,079 --> 00:13:28,889
taking all the lessons learned a lot of

00:13:27,420 --> 00:13:30,119
interesting things a lot like this what

00:13:28,889 --> 00:13:31,439
we're talking about today and things

00:13:30,119 --> 00:13:34,290
like this where we produce books

00:13:31,439 --> 00:13:36,299
articles cookbook recipes things like

00:13:34,290 --> 00:13:38,059
that and put it into one place that's

00:13:36,299 --> 00:13:40,319
free for anyone to take advantage of

00:13:38,059 --> 00:13:42,779
please go check that out we're really

00:13:40,319 --> 00:13:44,850
excited about it it's super early and

00:13:42,779 --> 00:13:49,499
we've got a lot to do but already I'm

00:13:44,850 --> 00:13:51,749
pretty proud and excited of it and for

00:13:49,499 --> 00:13:52,230
the we have a demo app so it's broken

00:13:51,749 --> 00:13:54,660
right now

00:13:52,230 --> 00:13:56,309
I'm gonna fix it after this I pushed it

00:13:54,660 --> 00:13:57,360
at 2 a.m. I told Kaitlyn hey it works

00:13:56,309 --> 00:13:59,850
good night

00:13:57,360 --> 00:14:01,170
and then it didn't actually work so I'm

00:13:59,850 --> 00:14:02,399
going to fix it and then you can go

00:14:01,170 --> 00:14:04,290
check it out

00:14:02,399 --> 00:14:05,819
but you can go to this link and go to

00:14:04,290 --> 00:14:07,920
the repository now so you can at least

00:14:05,819 --> 00:14:09,869
bookmark it and then you can watch the

00:14:07,920 --> 00:14:12,089
commits to see when I push the fixes but

00:14:09,869 --> 00:14:14,279
that's it and by the way this was

00:14:12,089 --> 00:14:20,399
Caitlin's first talk so let's give her a

00:14:14,279 --> 00:14:22,619
round of applause it's it's trial by

00:14:20,399 --> 00:14:24,149
fire because it was not easy preparing a

00:14:22,619 --> 00:14:31,189
talk with me because I do things at the

00:14:24,149 --> 00:14:33,569
last minute have asked my coworkers but

00:14:31,189 --> 00:14:35,730
anyway yes so thank you and happy to

00:14:33,569 --> 00:14:39,319
chat more about some lessons learned or

00:14:35,730 --> 00:14:39,319
anything else thank you thank you

00:14:39,779 --> 00:14:41,839
you

00:14:45,960 --> 00:14:52,690
[Music]

00:14:58,520 --> 00:15:00,580

YouTube URL: https://www.youtube.com/watch?v=fOsLM8tPcDQ


