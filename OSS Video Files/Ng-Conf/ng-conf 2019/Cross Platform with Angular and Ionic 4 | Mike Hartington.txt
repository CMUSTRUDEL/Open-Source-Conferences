Title: Cross Platform with Angular and Ionic 4 | Mike Hartington
Publication date: 2019-05-03
Playlist: ng-conf 2019
Description: 
	Ionic and Angular have been best friends since the early days of AngularJS and Ionic 1. With the 4.0 of Ionic Framework released, Ionic has doubled down on its partnership with Angular by adopting the latest and greatest Angular tooling. We’ll look at what’s new in Ionic and what Ionic has to offer the Angular community.

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:07,920 --> 00:00:11,170
[Music]

00:00:12,349 --> 00:00:16,109
hello everyone

00:00:13,830 --> 00:00:17,850
Hey so yeah we're gonna talk about

00:00:16,109 --> 00:00:20,820
cross-platform building things with

00:00:17,850 --> 00:00:22,529
ionic and angular and really what we've

00:00:20,820 --> 00:00:26,369
been doing in ionic to better support

00:00:22,529 --> 00:00:28,170
the greater angular ecosystem we are

00:00:26,369 --> 00:00:33,480
going to have a few history lessons so

00:00:28,170 --> 00:00:34,920
without further ado let's go back a few

00:00:33,480 --> 00:00:38,760
years and think about some of the

00:00:34,920 --> 00:00:40,680
beginning things the learn some of the

00:00:38,760 --> 00:00:42,719
beginning parts that really made I own

00:00:40,680 --> 00:00:45,270
ik but I think is a really great

00:00:42,719 --> 00:00:48,180
platform I feel like I don't need to

00:00:45,270 --> 00:00:50,520
sing the praise of angularjs but when we

00:00:48,180 --> 00:00:52,379
first started building out ionic the

00:00:50,520 --> 00:00:54,660
fact that we have this really easy

00:00:52,379 --> 00:00:58,550
framework that could let us isolate and

00:00:54,660 --> 00:01:02,460
reuse all these components really really

00:00:58,550 --> 00:01:04,680
we really appreciated that and you know

00:01:02,460 --> 00:01:06,510
a lot of it allowed us to do so many

00:01:04,680 --> 00:01:09,060
things like create these reusable

00:01:06,510 --> 00:01:11,430
components create list views navigation

00:01:09,060 --> 00:01:14,070
components animations and gestures

00:01:11,430 --> 00:01:15,990
basically recreate what we what you

00:01:14,070 --> 00:01:18,780
would get from a native SDK but with the

00:01:15,990 --> 00:01:20,420
web we thought that was great but you

00:01:18,780 --> 00:01:22,799
know also a lot of other people did too

00:01:20,420 --> 00:01:24,720
huge community basically if you go

00:01:22,799 --> 00:01:26,549
anywhere in the world you could find an

00:01:24,720 --> 00:01:30,750
ionic developer which i think is pretty

00:01:26,549 --> 00:01:33,509
impressive we also saw a huge amount of

00:01:30,750 --> 00:01:36,540
companies like adopt ionic as their core

00:01:33,509 --> 00:01:39,180
stack so whether or not you are drinking

00:01:36,540 --> 00:01:41,220
beer and want to check track what kind

00:01:39,180 --> 00:01:43,020
of beers you're having do some work out

00:01:41,220 --> 00:01:46,320
to get rid of all the effects of that

00:01:43,020 --> 00:01:49,259
beer maybe dive into sous-vide or just

00:01:46,320 --> 00:01:51,140
find out what show where your show is

00:01:49,259 --> 00:01:52,950
playing through streaming services

00:01:51,140 --> 00:01:56,549
companies all around are just using

00:01:52,950 --> 00:01:58,079
ionic and being very successful now in

00:01:56,549 --> 00:02:01,680
conversations with these companies we've

00:01:58,079 --> 00:02:04,860
often heard this kind of phrase web has

00:02:01,680 --> 00:02:07,530
a mobile sdk and this is something that

00:02:04,860 --> 00:02:09,209
we really set out to build we were

00:02:07,530 --> 00:02:12,209
really frustrated in fact that you could

00:02:09,209 --> 00:02:13,740
not build a quality mobile app without

00:02:12,209 --> 00:02:19,500
having to rebuild all the piece

00:02:13,740 --> 00:02:21,840
in all the interactions and gestures now

00:02:19,500 --> 00:02:29,820
we eventually made the migration over

00:02:21,840 --> 00:02:31,440
from angularjs to angular and we were

00:02:29,820 --> 00:02:33,420
you know super excited we have learned

00:02:31,440 --> 00:02:35,220
so much from our angularjs A's we were

00:02:33,420 --> 00:02:37,860
like okay what can we do what can we do

00:02:35,220 --> 00:02:40,950
to improve ionic and just make it a

00:02:37,860 --> 00:02:43,830
better platform all together we were

00:02:40,950 --> 00:02:46,590
here in ng-conf 2015 across the street

00:02:43,830 --> 00:02:49,680
little America and just learning as much

00:02:46,590 --> 00:02:52,950
as we can we much as we could from all

00:02:49,680 --> 00:02:54,390
the angular team and just paying

00:02:52,950 --> 00:02:58,260
attention as much as we could from all

00:02:54,390 --> 00:03:00,810
the talks now we have gone through the

00:02:58,260 --> 00:03:03,360
whole process of being built on top of

00:03:00,810 --> 00:03:04,950
angular and that experience while it was

00:03:03,360 --> 00:03:06,450
really great we also started develop our

00:03:04,950 --> 00:03:08,010
own opinions and our own thoughts about

00:03:06,450 --> 00:03:10,530
how things should be done in a mobile

00:03:08,010 --> 00:03:12,890
app and how things should how developers

00:03:10,530 --> 00:03:15,090
should interact with pieces of their app

00:03:12,890 --> 00:03:17,580
we had our we had some really strong

00:03:15,090 --> 00:03:18,960
opinions and it was it made sense being

00:03:17,580 --> 00:03:20,850
a framework built on top of a framework

00:03:18,960 --> 00:03:22,740
we wanted to build our own router

00:03:20,850 --> 00:03:26,280
because we had really strong opinions on

00:03:22,740 --> 00:03:29,070
how routing should work we also built

00:03:26,280 --> 00:03:31,920
our own CLI because we again we had our

00:03:29,070 --> 00:03:33,510
own strong opinions about how an app

00:03:31,920 --> 00:03:35,730
should be built and how that should

00:03:33,510 --> 00:03:38,040
process should work and what dependency

00:03:35,730 --> 00:03:39,840
should be used so we went through and

00:03:38,040 --> 00:03:42,920
built all this stuff maintained it from

00:03:39,840 --> 00:03:46,590
not only our version to 12 version 3 and

00:03:42,920 --> 00:03:48,900
up until version 4 we were planning to

00:03:46,590 --> 00:03:51,120
maintain that for the next release but

00:03:48,900 --> 00:03:53,490
then we noticed something thank you I

00:03:51,120 --> 00:03:54,930
kept getting better as a platform it

00:03:53,490 --> 00:03:57,990
really is probably one of the best

00:03:54,930 --> 00:04:00,240
places to be building apps being CLI is

00:03:57,990 --> 00:04:03,770
top notch the router is getting even

00:04:00,240 --> 00:04:05,660
better with things like dynamic imports

00:04:03,770 --> 00:04:08,180
and then all the other features of the

00:04:05,660 --> 00:04:10,340
of angular really just make it a

00:04:08,180 --> 00:04:13,250
one-of-a-kind place to be building apps

00:04:10,340 --> 00:04:16,220
with so with our 4.0 we sent out with

00:04:13,250 --> 00:04:19,910
the simple goal let Inc Euler handle

00:04:16,220 --> 00:04:21,770
angular really a simple idea but we want

00:04:19,910 --> 00:04:23,570
to make sure that we could go back to

00:04:21,770 --> 00:04:26,840
just focusing on the components which is

00:04:23,570 --> 00:04:30,140
really what we do best and then reuse

00:04:26,840 --> 00:04:32,060
all the pieces of angular to kind of

00:04:30,140 --> 00:04:34,370
take advantage of everything that they

00:04:32,060 --> 00:04:38,270
have already built and still provide our

00:04:34,370 --> 00:04:39,770
strong opinions so we went off with the

00:04:38,270 --> 00:04:41,870
probably the most difficult part and

00:04:39,770 --> 00:04:44,600
that was routing now I said we had our

00:04:41,870 --> 00:04:47,110
own routing solution and really you

00:04:44,600 --> 00:04:49,130
could think of it as an in-memory array

00:04:47,110 --> 00:04:51,230
anytime you are navigating to different

00:04:49,130 --> 00:04:53,210
parts of your app you're just pushing an

00:04:51,230 --> 00:04:55,570
entry on to an array you navigate back

00:04:53,210 --> 00:04:58,910
you're popping that entry off of the

00:04:55,570 --> 00:05:02,210
stack what we would call it now this is

00:04:58,910 --> 00:05:04,940
a paradigm that native followed that

00:05:02,210 --> 00:05:05,810
native has and there's no URL so when

00:05:04,940 --> 00:05:08,210
you're in the native app you don't

00:05:05,810 --> 00:05:09,830
really need a URL to reload and maintain

00:05:08,210 --> 00:05:13,400
state you just have this in memory

00:05:09,830 --> 00:05:15,500
representation now that worked really

00:05:13,400 --> 00:05:16,880
well for native apps but as progressive

00:05:15,500 --> 00:05:19,310
web app started becoming more and more

00:05:16,880 --> 00:05:21,560
important where you realize hey we

00:05:19,310 --> 00:05:24,530
should probably have a URL so people can

00:05:21,560 --> 00:05:27,040
share this app and then okay well now we

00:05:24,530 --> 00:05:29,240
have a URL now we need a you know

00:05:27,040 --> 00:05:31,010
authentic have some authentication or

00:05:29,240 --> 00:05:32,510
navigation guard so people can't access

00:05:31,010 --> 00:05:34,940
this part of the app if they're not

00:05:32,510 --> 00:05:37,790
logged in ok well now how do we handle

00:05:34,940 --> 00:05:39,800
redirects when we go to a bad URL you

00:05:37,790 --> 00:05:42,440
can see we're essentially recreating

00:05:39,800 --> 00:05:45,200
pieces of the angular router but in such

00:05:42,440 --> 00:05:47,270
a different way that people would either

00:05:45,200 --> 00:05:49,220
get confused was like wait I thought I

00:05:47,270 --> 00:05:51,230
on ik was built with angular why do I

00:05:49,220 --> 00:05:53,330
have to learn all this different ways of

00:05:51,230 --> 00:05:54,830
doing things and I think that was

00:05:53,330 --> 00:05:56,780
probably the most painful part

00:05:54,830 --> 00:05:58,420
realizing that community members were

00:05:56,780 --> 00:06:01,580
just confused

00:05:58,420 --> 00:06:05,330
so for 4.0 we moved to the angular

00:06:01,580 --> 00:06:07,340
router pretty simple we moved to the

00:06:05,330 --> 00:06:09,830
angular router and we actually built on

00:06:07,340 --> 00:06:11,990
top of the router to provide all the

00:06:09,830 --> 00:06:14,410
animations and gestures everything that

00:06:11,990 --> 00:06:17,389
you expect to get from a mobile app

00:06:14,410 --> 00:06:19,910
so here we have on our left

00:06:17,389 --> 00:06:21,580
a typical router setup that you would

00:06:19,910 --> 00:06:25,100
get from an angular adder you have a

00:06:21,580 --> 00:06:27,740
path and a component in line and then

00:06:25,100 --> 00:06:31,520
some other routes with lazy loaded

00:06:27,740 --> 00:06:33,530
children using dynamic imports fairly

00:06:31,520 --> 00:06:35,419
standard the only thing that we have

00:06:33,530 --> 00:06:37,490
that's different is towards the bottom

00:06:35,419 --> 00:06:39,260
we actually have this ion router outlet

00:06:37,490 --> 00:06:41,600
component this is something custom that

00:06:39,260 --> 00:06:43,970
we built but it builds on top and

00:06:41,600 --> 00:06:46,400
extents and gears built in router outlet

00:06:43,970 --> 00:06:48,979
so with this we have some pretty nice

00:06:46,400 --> 00:06:51,229
things like gestures and animations and

00:06:48,979 --> 00:06:53,810
transitions built into our routes for

00:06:51,229 --> 00:06:55,760
free we don't really have to have any

00:06:53,810 --> 00:06:58,340
one wire that up we can disable these

00:06:55,760 --> 00:07:01,490
animations basically as a property on

00:06:58,340 --> 00:07:04,940
the router outlet but you get all this

00:07:01,490 --> 00:07:08,060
stuff for free now we consider this a

00:07:04,940 --> 00:07:10,310
linear navigation stack there's only one

00:07:08,060 --> 00:07:13,789
place where routes will be rendered and

00:07:10,310 --> 00:07:16,630
where this transitions would happen what

00:07:13,789 --> 00:07:19,880
if we want to say do something like tabs

00:07:16,630 --> 00:07:22,849
so any native app these days will

00:07:19,880 --> 00:07:25,280
typically have this tab bar UI where you

00:07:22,849 --> 00:07:29,389
can have independent history maintained

00:07:25,280 --> 00:07:31,490
through each tab well with the work that

00:07:29,389 --> 00:07:33,080
we were doing with router we were able

00:07:31,490 --> 00:07:36,169
to maintain this by just having this

00:07:33,080 --> 00:07:38,960
really nice structure of here's the

00:07:36,169 --> 00:07:41,030
top-level tabs component here is the

00:07:38,960 --> 00:07:43,310
first section of route set I can

00:07:41,030 --> 00:07:45,050
navigate to and within that first

00:07:43,310 --> 00:07:47,300
section of routes here's yet another

00:07:45,050 --> 00:07:49,370
array of child routes that we clone up

00:07:47,300 --> 00:07:51,979
you could optimize this however you want

00:07:49,370 --> 00:07:53,389
using load children and split it out

00:07:51,979 --> 00:07:55,970
into your own pieces if that is

00:07:53,389 --> 00:07:57,710
something you want the clarity and

00:07:55,970 --> 00:08:00,919
simplicity we just did everything like

00:07:57,710 --> 00:08:02,510
this and then to wire that up with the

00:08:00,919 --> 00:08:05,510
UI we actually just have this tabs

00:08:02,510 --> 00:08:06,979
component and we have a tab button which

00:08:05,510 --> 00:08:08,720
references the route that we want to

00:08:06,979 --> 00:08:11,090
load up so over here

00:08:08,720 --> 00:08:15,080
tab equals tab one is a direct reference

00:08:11,090 --> 00:08:16,880
to the path tab one fairly simple now as

00:08:15,080 --> 00:08:19,490
we navigate throughout our F we can tab

00:08:16,880 --> 00:08:20,960
across each part of the app and know

00:08:19,490 --> 00:08:23,270
that all those animate all the

00:08:20,960 --> 00:08:25,610
transitions and all the history in state

00:08:23,270 --> 00:08:27,849
maintained in each tab is completely

00:08:25,610 --> 00:08:32,310
isolated and can be linked back

00:08:27,849 --> 00:08:35,769
fourth and change the app the tab our UI

00:08:32,310 --> 00:08:39,279
automatically this is what we call stack

00:08:35,769 --> 00:08:42,669
navigation and it's really an example of

00:08:39,279 --> 00:08:45,399
how we're bringing some native UX to the

00:08:42,669 --> 00:08:47,230
web but also embracing the good parts of

00:08:45,399 --> 00:08:49,870
the web like URLs and being able to

00:08:47,230 --> 00:08:56,470
share that and link that to your you to

00:08:49,870 --> 00:08:59,110
other people let's take a history lesson

00:08:56,470 --> 00:09:01,889
part two who remembers build tools

00:08:59,110 --> 00:09:05,829
around 2015

00:09:01,889 --> 00:09:09,399
probably grunts gulp maybe some people

00:09:05,829 --> 00:09:11,649
were using browserify probably not web

00:09:09,399 --> 00:09:12,759
pack apparently existed in 2015 which

00:09:11,649 --> 00:09:15,850
was really interesting I didn't know

00:09:12,759 --> 00:09:18,509
that translation systems we had six to

00:09:15,850 --> 00:09:20,800
five the really early versions of Babel

00:09:18,509 --> 00:09:22,959
tracer which was an option there's this

00:09:20,800 --> 00:09:26,259
really interesting thing called atscript

00:09:22,959 --> 00:09:29,470
I don't think it ever took off and that

00:09:26,259 --> 00:09:31,029
was a joke but there's so many more

00:09:29,470 --> 00:09:34,240
options these days and if you actually

00:09:31,029 --> 00:09:36,220
go on Hacker News you're gonna find hey

00:09:34,240 --> 00:09:38,380
check out my new build tool and then hey

00:09:36,220 --> 00:09:41,670
why is this one different from that one

00:09:38,380 --> 00:09:46,649
and I don't know it's kind of confusing

00:09:41,670 --> 00:09:46,649
I'm I just watch this one more time I

00:09:46,769 --> 00:09:50,410
really don't know the difference between

00:09:48,399 --> 00:09:53,649
most of these tools and I doubt everyone

00:09:50,410 --> 00:09:55,149
in the JavaScript ecosystem does I do

00:09:53,649 --> 00:09:57,160
know one thing though they're all fairly

00:09:55,149 --> 00:09:58,689
good so you can pick whatever tool you

00:09:57,160 --> 00:10:01,509
want to use and you're going to have a

00:09:58,689 --> 00:10:03,130
good experience more importantly as an

00:10:01,509 --> 00:10:04,569
angular developer I don't really need to

00:10:03,130 --> 00:10:07,750
worry about any of these tools because

00:10:04,569 --> 00:10:09,790
the CLI handles that for me so I

00:10:07,750 --> 00:10:12,430
mentioned that to talk about our tool

00:10:09,790 --> 00:10:15,639
that we built with ionic 2 & 3 app

00:10:12,430 --> 00:10:17,589
scripts now app scripts I have a really

00:10:15,639 --> 00:10:19,839
a Belov hate relationship with app

00:10:17,589 --> 00:10:22,120
scripts I love it because we were able

00:10:19,839 --> 00:10:26,589
to do a lot of awesome things before the

00:10:22,120 --> 00:10:28,660
angular CLI what I really hated about it

00:10:26,589 --> 00:10:31,000
was the fact that I'd have to go through

00:10:28,660 --> 00:10:33,880
and manage all these weird dependencies

00:10:31,000 --> 00:10:36,880
with web pack upgrade add features and

00:10:33,880 --> 00:10:38,769
not work on my core components it was

00:10:36,880 --> 00:10:39,850
not what I wanted to do I'm a component

00:10:38,769 --> 00:10:41,230
developer I don't want to deal with

00:10:39,850 --> 00:10:44,470
built isms

00:10:41,230 --> 00:10:45,910
sassette affleck and it kind of gotten

00:10:44,470 --> 00:10:47,710
the same part as a router where we had

00:10:45,910 --> 00:10:49,240
the angular way of doing things and then

00:10:47,710 --> 00:10:50,500
the ionic way of doing things and it

00:10:49,240 --> 00:10:53,440
really just caused a whole bunch of

00:10:50,500 --> 00:10:55,360
confusion so I hope you can see where

00:10:53,440 --> 00:10:57,340
we're going with this we moved over to

00:10:55,360 --> 00:11:00,790
the angular CLI it really simplifies all

00:10:57,340 --> 00:11:03,430
of these dependencies that we need to

00:11:00,790 --> 00:11:05,470
worry about in ionic but also is easier

00:11:03,430 --> 00:11:09,340
for users because now we just have one

00:11:05,470 --> 00:11:11,530
set up for building our apps just circle

00:11:09,340 --> 00:11:13,810
around this one idea use hey what's this

00:11:11,530 --> 00:11:15,730
option in angular CLI cool that

00:11:13,810 --> 00:11:18,730
automatically applies to an ionic app

00:11:15,730 --> 00:11:21,040
when basil comes out we can adopt that

00:11:18,730 --> 00:11:23,260
feature without having to go through and

00:11:21,040 --> 00:11:25,270
recreate it for specifically for ionic

00:11:23,260 --> 00:11:28,540
apps it's that one set up that was

00:11:25,270 --> 00:11:30,100
really great but again I said we have

00:11:28,540 --> 00:11:32,950
opinions about how certain things should

00:11:30,100 --> 00:11:35,350
be done in ionic and so that's where we

00:11:32,950 --> 00:11:37,180
create this idea of an angular toolkit

00:11:35,350 --> 00:11:40,300
it's essentially a collection of custom

00:11:37,180 --> 00:11:43,030
builders schematic set really fit to an

00:11:40,300 --> 00:11:46,660
ionic and a mobile app experience lazy

00:11:43,030 --> 00:11:48,880
loaded components by default it can

00:11:46,660 --> 00:11:52,570
handle your native builds for ios and

00:11:48,880 --> 00:11:54,160
android and it even has a ng add option

00:11:52,570 --> 00:11:56,800
so if you want to incrementally adopt

00:11:54,160 --> 00:11:59,320
ionic into your already existing app ng

00:11:56,800 --> 00:12:04,120
a tie on ik angular and it'll handle all

00:11:59,320 --> 00:12:05,670
that for you now we talked about a lot

00:12:04,120 --> 00:12:07,900
of the things that we did with angular

00:12:05,670 --> 00:12:09,220
there's still actually some awesome

00:12:07,900 --> 00:12:11,580
things that came in I asked for

00:12:09,220 --> 00:12:15,550
they also want to go over it real quick

00:12:11,580 --> 00:12:18,430
has anyone ever used CSS variables like

00:12:15,550 --> 00:12:21,970
a few people they're really awesome and

00:12:18,430 --> 00:12:24,550
I was a I really doubted them at first

00:12:21,970 --> 00:12:26,230
but now that I can do dark mode by just

00:12:24,550 --> 00:12:27,460
changing a few different variables I am

00:12:26,230 --> 00:12:29,200
completely sold

00:12:27,460 --> 00:12:32,080
I don't need JavaScript I don't need

00:12:29,200 --> 00:12:35,770
sass I can just use CSS variables and

00:12:32,080 --> 00:12:37,750
get you know dynamic themes and if

00:12:35,770 --> 00:12:40,450
you're wondering this is actually the

00:12:37,750 --> 00:12:42,160
only CSS that I need to change for

00:12:40,450 --> 00:12:44,230
reference the background color got

00:12:42,160 --> 00:12:46,510
switched to dark the text got switched

00:12:44,230 --> 00:12:48,940
to the light color and this whole step

00:12:46,510 --> 00:12:51,670
color business on the beneath actually

00:12:48,940 --> 00:12:54,050
was generated by our Doc's I gave in the

00:12:51,670 --> 00:12:55,910
dark color in the white color and it

00:12:54,050 --> 00:13:00,890
everything in between so you don't

00:12:55,910 --> 00:13:02,209
actually need to write this we've also

00:13:00,890 --> 00:13:05,080
made huge improvements with our

00:13:02,209 --> 00:13:07,310
server-side rendering story so as

00:13:05,080 --> 00:13:10,149
progressive web app start become more

00:13:07,310 --> 00:13:13,010
commonplace having that initial time

00:13:10,149 --> 00:13:15,380
having an initial paint and having an

00:13:13,010 --> 00:13:17,230
app load super quickly it's kind of a

00:13:15,380 --> 00:13:19,910
no-brainer you want to have a fast app

00:13:17,230 --> 00:13:23,060
so our module which should be coming out

00:13:19,910 --> 00:13:25,160
in one of our new newer releases it

00:13:23,060 --> 00:13:27,260
integrates Incan server-side render all

00:13:25,160 --> 00:13:28,910
of your components but also do cool

00:13:27,260 --> 00:13:30,740
things like pre-render that initial

00:13:28,910 --> 00:13:32,810
route so as soon as the app blows up

00:13:30,740 --> 00:13:35,540
you're going to see like some tab bar or

00:13:32,810 --> 00:13:37,370
some UI interface so let your your user

00:13:35,540 --> 00:13:39,920
know hey things are going to load and

00:13:37,370 --> 00:13:45,350
here's the here's the landscape of my

00:13:39,920 --> 00:13:46,880
app before it even bootstraps and this

00:13:45,350 --> 00:13:49,760
is part where actually I would like to

00:13:46,880 --> 00:13:52,010
get some feedback afterwards we're

00:13:49,760 --> 00:13:54,820
looking to potentially replace our

00:13:52,010 --> 00:13:57,470
virtual scroller with the cdk scroller

00:13:54,820 --> 00:13:59,329
we've we've maintained our own virtual

00:13:57,470 --> 00:14:01,670
scroller but as soon as angular released

00:13:59,329 --> 00:14:04,760
virtual scroller for the cdk we were

00:14:01,670 --> 00:14:07,820
able to see a much smoother user

00:14:04,760 --> 00:14:09,020
experience it was much faster and I

00:14:07,820 --> 00:14:11,450
think the fact that it was an angular

00:14:09,020 --> 00:14:13,430
driven solution kind of makes sense for

00:14:11,450 --> 00:14:15,410
the long term of things we can just

00:14:13,430 --> 00:14:17,360
depend on what angular says is the best

00:14:15,410 --> 00:14:18,890
way to do virtual scrolling and we can

00:14:17,360 --> 00:14:20,510
just throw in all of the ionic

00:14:18,890 --> 00:14:25,520
components in there and let it just

00:14:20,510 --> 00:14:28,459
render that now we are traditionally

00:14:25,520 --> 00:14:30,290
focused on mobile but as things like

00:14:28,459 --> 00:14:32,230
progressive web apps and installable

00:14:30,290 --> 00:14:35,930
Desktop progressive web apps become

00:14:32,230 --> 00:14:38,329
become popular with chrome and even edge

00:14:35,930 --> 00:14:39,829
nowadays we want to make sure that our

00:14:38,329 --> 00:14:42,649
components look great not only on the

00:14:39,829 --> 00:14:45,380
smallest devices but on these huge 1080p

00:14:42,649 --> 00:14:46,430
screens that you could get so this is

00:14:45,380 --> 00:14:48,820
something that we are actively looking

00:14:46,430 --> 00:14:50,870
for feedback and to hear your stories

00:14:48,820 --> 00:14:52,339
what have you been building if you've

00:14:50,870 --> 00:14:54,050
been your building ionic and using on

00:14:52,339 --> 00:14:55,430
the desktop what are some pain points

00:14:54,050 --> 00:14:57,589
what are some components that you wish

00:14:55,430 --> 00:15:00,470
were better optimized for the larger

00:14:57,589 --> 00:15:01,730
screens so please please try me and I

00:15:00,470 --> 00:15:02,310
want to I want to know what your pain

00:15:01,730 --> 00:15:04,010
points are

00:15:02,310 --> 00:15:11,190
[Music]

00:15:04,010 --> 00:15:13,710
and this brings us to the stack now this

00:15:11,190 --> 00:15:17,220
is what I would consider the Holy Grail

00:15:13,710 --> 00:15:19,260
I have ionic as my UI I have some

00:15:17,220 --> 00:15:21,630
plugins that we offer I'm using angular

00:15:19,260 --> 00:15:24,510
to build my app I have deployment

00:15:21,630 --> 00:15:27,450
targets for iOS Android progressive web

00:15:24,510 --> 00:15:30,420
app and electron I don't really have to

00:15:27,450 --> 00:15:33,900
change how my app is built or how that

00:15:30,420 --> 00:15:36,450
code is executed it just knows who the

00:15:33,900 --> 00:15:39,470
build which platform to build for and

00:15:36,450 --> 00:15:42,780
which platform API is it should include

00:15:39,470 --> 00:15:46,080
and really that one high percent like

00:15:42,780 --> 00:15:48,540
reuse is what we're trying to get and

00:15:46,080 --> 00:15:51,600
this is where I want to show capacitor

00:15:48,540 --> 00:15:54,000
has anyone ever heard of capacitor you

00:15:51,600 --> 00:15:55,530
probably came by our booth capacitor is

00:15:54,000 --> 00:15:58,320
our new approach for building apps

00:15:55,530 --> 00:16:01,350
cross-platform with web technology as

00:15:58,320 --> 00:16:03,540
the core so HTML CSS and JavaScript but

00:16:01,350 --> 00:16:06,540
also rethinking how the native layer is

00:16:03,540 --> 00:16:10,590
traditionally done so for this example

00:16:06,540 --> 00:16:13,080
imagine trying to write a file nothing

00:16:10,590 --> 00:16:16,350
about this code actually screams hey I'm

00:16:13,080 --> 00:16:19,470
on iOS do this or hey I'm on Chrome do

00:16:16,350 --> 00:16:21,420
this or what about electron with the way

00:16:19,470 --> 00:16:24,030
capacitor works you have this really

00:16:21,420 --> 00:16:26,460
simple abstraction that you can work

00:16:24,030 --> 00:16:29,730
with and it knows after it's been built

00:16:26,460 --> 00:16:32,310
hey I'm on electron handle it this way

00:16:29,730 --> 00:16:35,340
or hey I'm on iOS here's how I should

00:16:32,310 --> 00:16:37,890
work this is probably one of the most

00:16:35,340 --> 00:16:40,530
exciting things that we have coming and

00:16:37,890 --> 00:16:42,540
we're actually actively working on an NG

00:16:40,530 --> 00:16:45,300
add option so if you want to add that to

00:16:42,540 --> 00:16:47,730
maybe not even an ionic app but your

00:16:45,300 --> 00:16:50,040
traditional angular app you can start

00:16:47,730 --> 00:16:52,570
working with this soon I will finish it

00:16:50,040 --> 00:16:54,840
hopefully by the end of the week

00:16:52,570 --> 00:16:58,420
and that kind of gets us to where our

00:16:54,840 --> 00:17:00,460
goals have been by refocusing and

00:16:58,420 --> 00:17:02,380
letting angular actually own certain

00:17:00,460 --> 00:17:04,090
pieces and us kind of taking step back

00:17:02,380 --> 00:17:05,800
we've been able to work on this

00:17:04,090 --> 00:17:09,060
capacitor our theming overhaul

00:17:05,800 --> 00:17:11,770
server-side rendering making ionic great

00:17:09,060 --> 00:17:14,020
while leveraging and reusing all the

00:17:11,770 --> 00:17:15,310
pieces of angular and being able to take

00:17:14,020 --> 00:17:17,320
advantage of what's already been built

00:17:15,310 --> 00:17:19,750
in the platform angular is great and

00:17:17,320 --> 00:17:24,680
then being able to reuse that just makes

00:17:19,750 --> 00:17:30,309
sense thank you

00:17:24,680 --> 00:17:30,309
[Applause]

00:17:33,860 --> 00:17:40,479
[Music]

00:17:46,090 --> 00:17:48,150

YouTube URL: https://www.youtube.com/watch?v=TqdOBkY0ZFg


