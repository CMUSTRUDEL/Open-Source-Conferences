Title: A Deep Look At Angular Elements | Manfred Steyer
Publication date: 2019-05-04
Playlist: ng-conf 2019
Description: 
	New web technologies and frameworks are being released all the time. This is exciting â€“ and overwhelming. Framework-independent web components provide a remedy for this dilemma!

This interactive workshop shows you in depth how you can create, build and deploy web components with Angular Elements. After a short look at the basics, we investigate Shadow DOM, lazy loading, (not) using zone.js and consequences for change detection, content projection with slots and component communication, needed polyfills as well as strategies for effective bundling and sharing dependencies. You also see how Angular Elements can be used togehter with Ivy to reduce bundle size.

As we use Stackblitz and a prepared GitHub repo with several branches, we can frequently switch between short presentations, live coding and exercises. This makes sure you can learn as much as possible in the time available.

Come with your laptop to this workshop and see how exciting the combination of Angular and web components is!

ng-conf is a three-day, single track Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe will be here all week at Salt Lake City, UT to participate in trainings by the Google Angular team and other Angular experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:07,920 --> 00:00:11,170
[Music]

00:00:11,660 --> 00:00:16,320
yeah thank you thanks for this nice

00:00:14,219 --> 00:00:18,420
introduction I want to start with a

00:00:16,320 --> 00:00:20,720
picture one more time do you remember

00:00:18,420 --> 00:00:25,170
this machine

00:00:20,720 --> 00:00:30,150
salaphi oh nice nice it's the hero of my

00:00:25,170 --> 00:00:34,890
childhood I put old c64 a Commodore 64

00:00:30,150 --> 00:00:37,190
it was released in 1982 and it really

00:00:34,890 --> 00:00:40,559
shows that I'm growing old nowadays

00:00:37,190 --> 00:00:42,960
anyway it had one megahertz which is

00:00:40,559 --> 00:00:48,000
nothing compared to nowadays capacities

00:00:42,960 --> 00:00:51,270
it had 64 kilobytes of main memory 64

00:00:48,000 --> 00:00:55,260
kilobytes and the floppy disks could

00:00:51,270 --> 00:00:58,620
store 170 kilobytes which is nothing

00:00:55,260 --> 00:01:01,440
really nothing what no one knows is that

00:00:58,620 --> 00:01:05,430
there has been a to our cooperation a

00:01:01,440 --> 00:01:10,080
version with two CPU cores it looked

00:01:05,430 --> 00:01:12,540
like this and of course the biggest

00:01:10,080 --> 00:01:15,479
challenge back then was about resources

00:01:12,540 --> 00:01:17,880
you fought twice before you used an

00:01:15,479 --> 00:01:20,490
integer perhaps a tiny in that Java

00:01:17,880 --> 00:01:22,619
speak enough perhaps perhaps the left

00:01:20,490 --> 00:01:25,439
part or the order the right part of the

00:01:22,619 --> 00:01:28,650
tiny in that job was enough so it really

00:01:25,439 --> 00:01:30,479
took care about resources nowadays

00:01:28,650 --> 00:01:32,520
resources are not a big challenge

00:01:30,479 --> 00:01:35,310
anymore nowadays we have other

00:01:32,520 --> 00:01:37,530
challenges one challenge nowadays is

00:01:35,310 --> 00:01:41,400
that we have to make sure that our

00:01:37,530 --> 00:01:43,740
software is maintainable in long time we

00:01:41,400 --> 00:01:45,960
write business applications or other

00:01:43,740 --> 00:01:50,759
applications and we have to maintain

00:01:45,960 --> 00:01:52,890
them for 10 or 20 years and this is on

00:01:50,759 --> 00:01:55,290
the one side on the other side we have

00:01:52,890 --> 00:01:57,450
this issue with milk products perhaps

00:01:55,290 --> 00:02:00,060
you have heard about it there are milk

00:01:57,450 --> 00:02:01,860
products out there lasting longer than

00:02:00,060 --> 00:02:03,150
some JavaScript framework

00:02:01,860 --> 00:02:06,550
[Music]

00:02:03,150 --> 00:02:08,649
did you experience that so this is

00:02:06,550 --> 00:02:11,550
somehow a trade our friend web

00:02:08,649 --> 00:02:14,560
components can be a remedy for this and

00:02:11,550 --> 00:02:16,690
this whole workshop is exactly about

00:02:14,560 --> 00:02:19,840
this topic this whole workshop is about

00:02:16,690 --> 00:02:22,300
web components we will learn how web

00:02:19,840 --> 00:02:25,690
components can be created with angular

00:02:22,300 --> 00:02:27,790
elements we will talk about polyfills so

00:02:25,690 --> 00:02:30,880
that our web components work everywhere

00:02:27,790 --> 00:02:33,970
we will talk about dynamic early acting

00:02:30,880 --> 00:02:36,280
web components to our pages and we will

00:02:33,970 --> 00:02:39,040
talk about loading external web

00:02:36,280 --> 00:02:41,530
components web components with your

00:02:39,040 --> 00:02:44,739
framework web components with your class

00:02:41,530 --> 00:02:46,750
libraries then we will go on we will

00:02:44,739 --> 00:02:50,019
talk about soundless change detection

00:02:46,750 --> 00:02:52,660
which is especially important when it

00:02:50,019 --> 00:02:55,239
comes to web components no bonbons to

00:02:52,660 --> 00:02:58,000
load zone shares along side a tiny

00:02:55,239 --> 00:03:00,760
widget packaged up as a web components

00:02:58,000 --> 00:03:05,050
and we will also talk about content

00:03:00,760 --> 00:03:07,299
projection and a slot API in addition to

00:03:05,050 --> 00:03:09,459
that I have prepared a bonus if time

00:03:07,299 --> 00:03:12,070
permits we will look into this this

00:03:09,459 --> 00:03:14,140
bonus is about using existing web

00:03:12,070 --> 00:03:16,870
components that have been created

00:03:14,140 --> 00:03:20,709
perhaps with other frameworks together

00:03:16,870 --> 00:03:24,160
with angular regarding data tactics of

00:03:20,709 --> 00:03:27,250
this workshop this workshop contains of

00:03:24,160 --> 00:03:29,350
several tiny presentations and then

00:03:27,250 --> 00:03:31,450
there is some live coding when it comes

00:03:29,350 --> 00:03:34,299
to life coding I need your help because

00:03:31,450 --> 00:03:36,610
you know the human brain is a wonderful

00:03:34,299 --> 00:03:39,549
thing until you start to implement

00:03:36,610 --> 00:03:42,340
things in front of an audience then the

00:03:39,549 --> 00:03:46,140
brain stops working so I'm just using

00:03:42,340 --> 00:03:48,970
the fact that I have several hundred

00:03:46,140 --> 00:03:51,760
quality managers sitting in front of me

00:03:48,970 --> 00:03:53,980
normally it is exactly the other way

00:03:51,760 --> 00:03:57,239
around and then I have prepared some

00:03:53,980 --> 00:03:59,620
laps so you can try everything out here

00:03:57,239 --> 00:04:02,140
regarding the laps there are regular

00:03:59,620 --> 00:04:04,870
laps and for those laps you just need a

00:04:02,140 --> 00:04:07,120
browser those laps run within stack

00:04:04,870 --> 00:04:10,330
plates and so you don't need to install

00:04:07,120 --> 00:04:13,000
anything and then there are some bonus

00:04:10,330 --> 00:04:15,960
laps and calling this the director's cut

00:04:13,000 --> 00:04:18,480
of my laps and those lives are

00:04:15,960 --> 00:04:20,850
later if you want to know more about

00:04:18,480 --> 00:04:24,380
angular elements you can do those laps

00:04:20,850 --> 00:04:27,450
later you need a full set up for them

00:04:24,380 --> 00:04:29,700
let me also introduce myself as

00:04:27,450 --> 00:04:32,490
mentioned I am unthreat I am a trained

00:04:29,700 --> 00:04:35,370
and consultant and I'm focusing on

00:04:32,490 --> 00:04:38,220
helping companies with angular for this

00:04:35,370 --> 00:04:40,830
I'm doing a lot of in-house trainings as

00:04:38,220 --> 00:04:43,350
well as consultancy I'm part of the

00:04:40,830 --> 00:04:47,130
Google developer expert team and I'm

00:04:43,350 --> 00:04:49,920
also a cooperator for angular my current

00:04:47,130 --> 00:04:50,580
product is a workshop a workshop about

00:04:49,920 --> 00:04:53,250
angular

00:04:50,580 --> 00:04:56,700
it's called angular architectures for

00:04:53,250 --> 00:04:58,970
enterprise applications and it contains

00:04:56,700 --> 00:05:03,120
a lot of advanced stuff you need for

00:04:58,970 --> 00:05:04,830
enterprise scaling applications ok let's

00:05:03,120 --> 00:05:08,490
get started with the first chapter you

00:05:04,830 --> 00:05:11,580
get let's get let's get started with web

00:05:08,490 --> 00:05:13,590
components and angular elements as you

00:05:11,580 --> 00:05:16,170
might know a bad component is a

00:05:13,590 --> 00:05:18,870
framework independent component a

00:05:16,170 --> 00:05:21,810
component that can be written with one

00:05:18,870 --> 00:05:24,420
framework or be familiar chess and it

00:05:21,810 --> 00:05:28,560
can be reused with other frameworks or

00:05:24,420 --> 00:05:31,440
even with vanilla chess and so it helps

00:05:28,560 --> 00:05:35,280
when we try to establish something for

00:05:31,440 --> 00:05:38,910
the long term to be honest there is not

00:05:35,280 --> 00:05:41,370
such a thing as a web component at least

00:05:38,910 --> 00:05:44,280
in terms of standards because web

00:05:41,370 --> 00:05:46,620
components is an umbrella term web

00:05:44,280 --> 00:05:51,120
components is just an umbrella term for

00:05:46,620 --> 00:05:53,550
a bunch of standards one standard behind

00:05:51,120 --> 00:05:56,460
web component is called templates

00:05:53,550 --> 00:05:59,970
I think atoms need to talk much about

00:05:56,460 --> 00:06:02,880
templates I mean Angola is full of HTML

00:05:59,970 --> 00:06:05,840
templates each and every component has a

00:06:02,880 --> 00:06:09,570
template of its own but also each

00:06:05,840 --> 00:06:13,380
structural directive like ng for NG if

00:06:09,570 --> 00:06:16,830
has templates so I think this is quite a

00:06:13,380 --> 00:06:20,550
usual thing for us and understand that

00:06:16,830 --> 00:06:23,910
is called shadow dome or as we say in

00:06:20,550 --> 00:06:26,130
German shuttin domes so please try to

00:06:23,910 --> 00:06:27,220
say it in German it sounds more mighty

00:06:26,130 --> 00:06:29,860
in German

00:06:27,220 --> 00:06:33,520
shuttin dome try it in the break and

00:06:29,860 --> 00:06:35,850
this shadow dome is a really nice thing

00:06:33,520 --> 00:06:39,550
because it solves a big issue

00:06:35,850 --> 00:06:42,730
Sheraton solves the issue that the CSS

00:06:39,550 --> 00:06:45,670
file of one component in the fields with

00:06:42,730 --> 00:06:48,850
the layout of the other component shadow

00:06:45,670 --> 00:06:51,910
dome isolates the style of one component

00:06:48,850 --> 00:06:53,350
through this very component and this is

00:06:51,910 --> 00:06:55,960
quite in handy

00:06:53,350 --> 00:06:59,080
I think we all know these situations

00:06:55,960 --> 00:07:02,110
where we have two CSS files two style

00:06:59,080 --> 00:07:04,960
files and where we try to load both of

00:07:02,110 --> 00:07:08,830
them into our application while they

00:07:04,960 --> 00:07:11,470
work separately perfectly as soon as we

00:07:08,830 --> 00:07:14,530
load them into our application all hell

00:07:11,470 --> 00:07:16,930
breaks loose the good message here is

00:07:14,530 --> 00:07:19,840
that shadow dome is faked into angular

00:07:16,930 --> 00:07:21,820
every one of us is normally using shadow

00:07:19,840 --> 00:07:25,600
dome all the time we are going with

00:07:21,820 --> 00:07:28,330
angular the default strategy is an

00:07:25,600 --> 00:07:30,940
shadow dome emulation that means that

00:07:28,330 --> 00:07:34,180
angular tries to emulate to simulate

00:07:30,940 --> 00:07:37,260
this Sheraton strategy we will talk

00:07:34,180 --> 00:07:40,750
about this a bit more in detail later

00:07:37,260 --> 00:07:43,450
yeah and the last standards behind web

00:07:40,750 --> 00:07:46,180
components is called custom elements if

00:07:43,450 --> 00:07:49,000
you ask me this is the most important

00:07:46,180 --> 00:07:52,240
standard here because custom elements

00:07:49,000 --> 00:07:55,930
allow you to create own HTML elements

00:07:52,240 --> 00:07:59,800
own HTML elements that exactly behave

00:07:55,930 --> 00:08:02,979
like the existing one like an ordinary

00:07:59,800 --> 00:08:06,760
table like an ordinary image like an

00:08:02,979 --> 00:08:09,190
ordinary input and for custom elements

00:08:06,760 --> 00:08:12,550
we have angular element since about a

00:08:09,190 --> 00:08:15,250
year which is a library that takes an

00:08:12,550 --> 00:08:17,680
angular component and exposes such a

00:08:15,250 --> 00:08:20,500
custom element for it a custom element

00:08:17,680 --> 00:08:25,000
that can be reused with each and every

00:08:20,500 --> 00:08:27,490
other framework to use angular elements

00:08:25,000 --> 00:08:30,400
you just need as mentioned an ordinary

00:08:27,490 --> 00:08:33,010
component an ordinary angular component

00:08:30,400 --> 00:08:35,560
of course you have to take curate and it

00:08:33,010 --> 00:08:38,800
goes into the entry components of your

00:08:35,560 --> 00:08:40,360
module you need this as part of the

00:08:38,800 --> 00:08:42,789
entry components

00:08:40,360 --> 00:08:45,820
as this angular element is dynamically

00:08:42,789 --> 00:08:48,399
created when the browser detects it

00:08:45,820 --> 00:08:51,070
the browser is requesting its rendering

00:08:48,399 --> 00:08:53,410
and then angular has to spin off this

00:08:51,070 --> 00:08:56,589
component so it is more or less a

00:08:53,410 --> 00:08:59,019
dynamic component hence it goes there in

00:08:56,589 --> 00:09:01,899
addition to that you need some wrapping

00:08:59,019 --> 00:09:04,600
code and this wrapping code can be

00:09:01,899 --> 00:09:07,660
placed everywhere you can place it in

00:09:04,600 --> 00:09:10,390
the start up file of your application in

00:09:07,660 --> 00:09:13,240
the main TS for instance you can place

00:09:10,390 --> 00:09:15,880
it within a component you can place it

00:09:13,240 --> 00:09:19,180
within a service here I'm just placing

00:09:15,880 --> 00:09:21,550
it within my module for this my module

00:09:19,180 --> 00:09:24,399
gets a constructor and within the

00:09:21,550 --> 00:09:26,860
constructor and calling those two lines

00:09:24,399 --> 00:09:29,290
of code the first line of code is

00:09:26,860 --> 00:09:32,260
pointing to the function create custom

00:09:29,290 --> 00:09:34,990
element create custom element is

00:09:32,260 --> 00:09:37,899
normally the only function you need out

00:09:34,990 --> 00:09:40,570
of angular elements as you see here it

00:09:37,899 --> 00:09:44,040
takes your angular component and it

00:09:40,570 --> 00:09:47,829
exposes and custom element to that left

00:09:44,040 --> 00:09:50,529
you also need to pass your injector in

00:09:47,829 --> 00:09:53,199
order to install the dependency

00:09:50,529 --> 00:09:55,810
injection mechanism in your component

00:09:53,199 --> 00:09:59,079
that means that this component which is

00:09:55,810 --> 00:10:02,110
exposed as an element can get use of

00:09:59,079 --> 00:10:04,810
other services by the means of injection

00:10:02,110 --> 00:10:07,390
and then of course you have to register

00:10:04,810 --> 00:10:10,480
everything for this and going here with

00:10:07,390 --> 00:10:13,329
custom elements that define which has

00:10:10,480 --> 00:10:16,120
nothing to do with angular this is

00:10:13,329 --> 00:10:18,910
already part of the browser API the

00:10:16,120 --> 00:10:21,640
browser API that defines how custom

00:10:18,910 --> 00:10:24,010
elements work as you see here the name

00:10:21,640 --> 00:10:26,560
of the element goes in and the element

00:10:24,010 --> 00:10:29,230
itself and after this you can use this

00:10:26,560 --> 00:10:33,910
element as you would use a table and

00:10:29,230 --> 00:10:37,149
image or something like F 1 it is really

00:10:33,910 --> 00:10:43,630
as easy as that and now I want to show

00:10:37,149 --> 00:10:45,730
you this life and in color for this I'm

00:10:43,630 --> 00:10:49,449
switching over to a project I have

00:10:45,730 --> 00:10:52,360
prepared and this project contains a -

00:10:49,449 --> 00:10:53,430
portal component perhaps you have seen

00:10:52,360 --> 00:10:56,130
it in

00:10:53,430 --> 00:10:59,250
the session I did yesterday today we

00:10:56,130 --> 00:11:01,770
will see more details about this when we

00:10:59,250 --> 00:11:04,740
look into this - what I'll component we

00:11:01,770 --> 00:11:07,080
see it is just an ordinary angular

00:11:04,740 --> 00:11:10,170
component at least if I tap locate my

00:11:07,080 --> 00:11:12,930
screen then he seated it is just an

00:11:10,170 --> 00:11:15,450
ordinary angular components and this

00:11:12,930 --> 00:11:18,420
angular component gets free values a B

00:11:15,450 --> 00:11:21,360
and C nothing special in here there is a

00:11:18,420 --> 00:11:24,000
data object and ancient in it is just

00:11:21,360 --> 00:11:27,450
populating this data object with my

00:11:24,000 --> 00:11:30,450
values a B and C alongside this it is

00:11:27,450 --> 00:11:34,290
defining some name some levels that will

00:11:30,450 --> 00:11:38,550
be displayed alongside the values when

00:11:34,290 --> 00:11:42,720
we look into the HTML of this when we

00:11:38,550 --> 00:11:45,690
look into the HTML of this we just see

00:11:42,720 --> 00:11:49,080
an ordinary template and this template

00:11:45,690 --> 00:11:51,870
is calling ngx charts here we have a pie

00:11:49,080 --> 00:11:54,990
chart and this pie chart gets our data

00:11:51,870 --> 00:11:59,339
bound I'm also saying hey I want to

00:11:54,990 --> 00:12:01,740
display some levels that's all so it is

00:11:59,339 --> 00:12:04,890
not a big deal here but the big deal

00:12:01,740 --> 00:12:07,800
starts when we try to expose this as an

00:12:04,890 --> 00:12:11,430
angular element for this I'm switching

00:12:07,800 --> 00:12:13,920
over to my module this here is my module

00:12:11,430 --> 00:12:16,980
where I am declaring my - portal

00:12:13,920 --> 00:12:19,980
component and first of all I have to put

00:12:16,980 --> 00:12:22,350
it into my entry components because it

00:12:19,980 --> 00:12:25,320
is dynamically created by Angola

00:12:22,350 --> 00:12:27,959
elements after this and eat the wrapping

00:12:25,320 --> 00:12:30,360
hood I'm putting it into the constructor

00:12:27,959 --> 00:12:33,600
of my module I really like this because

00:12:30,360 --> 00:12:36,660
so my module is providing both angular

00:12:33,600 --> 00:12:39,089
elements on the one side and custom

00:12:36,660 --> 00:12:42,600
elements web components on the other

00:12:39,089 --> 00:12:45,900
side for this I'm calling the method

00:12:42,600 --> 00:12:49,920
create custom element I'm passing in my

00:12:45,900 --> 00:12:53,070
- quartile component I am passing in the

00:12:49,920 --> 00:12:55,500
current injector so that dependency

00:12:53,070 --> 00:12:58,800
injection works and I'm getting back to

00:12:55,500 --> 00:13:00,779
elements there wrapped elements yeah and

00:12:58,800 --> 00:13:03,839
this wrapped element can then be

00:13:00,779 --> 00:13:07,040
registered with the browser using custom

00:13:03,839 --> 00:13:09,470
elements dots define

00:13:07,040 --> 00:13:12,589
I'm passing the name of this which would

00:13:09,470 --> 00:13:17,690
be - quartile and I'm passing the

00:13:12,589 --> 00:13:20,480
element itself that's all now we can use

00:13:17,690 --> 00:13:23,839
this - quartile element for this I'm

00:13:20,480 --> 00:13:26,690
switching over to my home component HTML

00:13:23,839 --> 00:13:30,920
and here I'm calling my custom element

00:13:26,690 --> 00:13:38,389
I'm passing some parameters like a like

00:13:30,920 --> 00:13:41,600
P like C and as this quick is here say

00:13:38,389 --> 00:13:45,620
there is something wrong here but let's

00:13:41,600 --> 00:13:47,720
directly run into this Agua by running

00:13:45,620 --> 00:13:50,209
into this yahuwah I am showing you some

00:13:47,720 --> 00:13:52,790
showstoppers you will probably also run

00:13:50,209 --> 00:13:56,750
into when you try to get started with

00:13:52,790 --> 00:14:01,370
this ok let's save everything save all

00:13:56,750 --> 00:14:03,769
and then let's move over to my example

00:14:01,370 --> 00:14:07,339
and as you see here the example is

00:14:03,769 --> 00:14:10,430
reloaded but somehow it is stuck somehow

00:14:07,339 --> 00:14:13,910
nothing works here okay let's have a

00:14:10,430 --> 00:14:17,480
look into the console here let's have a

00:14:13,910 --> 00:14:21,230
look at the stack trace and as the stack

00:14:17,480 --> 00:14:24,380
trace shows this component is not known

00:14:21,230 --> 00:14:27,470
angular so says hey bla bla bla

00:14:24,380 --> 00:14:31,220
I'm very sorry but - motile is not a

00:14:27,470 --> 00:14:33,579
known element and of course it is not a

00:14:31,220 --> 00:14:37,069
known element to the angular compiler

00:14:33,579 --> 00:14:39,800
because it is not an angular component

00:14:37,069 --> 00:14:42,170
anymore now it is a bad component a

00:14:39,800 --> 00:14:46,430
custom element that is rendered by the

00:14:42,170 --> 00:14:49,790
browser so it doesn't wonder that this

00:14:46,430 --> 00:14:52,040
is not known by the compiler and here we

00:14:49,790 --> 00:14:54,649
see the error messages are meanwhile

00:14:52,040 --> 00:14:57,350
really good in Angola at least some of

00:14:54,649 --> 00:15:00,019
them and this is one of them the error

00:14:57,350 --> 00:15:03,529
messages are proposing two solutions to

00:15:00,019 --> 00:15:05,720
this issue the first solution is when it

00:15:03,529 --> 00:15:08,660
is an angular components then try to

00:15:05,720 --> 00:15:10,759
register it with de module okay it is

00:15:08,660 --> 00:15:13,459
not an angular component anymore so

00:15:10,759 --> 00:15:16,459
let's keep this the second one does make

00:15:13,459 --> 00:15:18,740
more sense here it says if it is a bad

00:15:16,459 --> 00:15:22,490
component then at the

00:15:18,740 --> 00:15:25,400
custom element scheme for our compiler

00:15:22,490 --> 00:15:28,760
at this custom element scheme to the

00:15:25,400 --> 00:15:31,670
module in question so this scheme here

00:15:28,760 --> 00:15:33,410
is just easing the compiler it is just

00:15:31,670 --> 00:15:35,870
opium for the compiler

00:15:33,410 --> 00:15:38,210
please don't cite me opium for the

00:15:35,870 --> 00:15:41,090
compiler that say stick to the compiler

00:15:38,210 --> 00:15:44,270
hey compiler you will see some elements

00:15:41,090 --> 00:15:46,460
you do not know and please don't freak

00:15:44,270 --> 00:15:47,390
out if you see those elements just

00:15:46,460 --> 00:15:50,270
ignore them

00:15:47,390 --> 00:15:53,450
trust metals are web components and the

00:15:50,270 --> 00:15:57,710
browser will take care of them okay so

00:15:53,450 --> 00:16:02,540
let's take this opium let's go over to

00:15:57,710 --> 00:16:07,190
my app module and let's put this custom

00:16:02,540 --> 00:16:09,170
element scheme in here okay now the

00:16:07,190 --> 00:16:12,500
compiler should be calm

00:16:09,170 --> 00:16:15,290
which write or reload everything the

00:16:12,500 --> 00:16:17,690
application starts up I'm going to my

00:16:15,290 --> 00:16:20,630
home page and check I'm getting the next

00:16:17,690 --> 00:16:23,660
slap directly into my face nothing works

00:16:20,630 --> 00:16:27,110
but I'm getting another stack trace yeah

00:16:23,660 --> 00:16:29,840
so the way to web components is really

00:16:27,110 --> 00:16:31,910
difficult as this year and now we get an

00:16:29,840 --> 00:16:35,180
error message directly from the browser

00:16:31,910 --> 00:16:38,030
and this one is not as friendly as the

00:16:35,180 --> 00:16:41,990
error message before this one says say I

00:16:38,030 --> 00:16:44,660
cannot construct HTML element when I

00:16:41,990 --> 00:16:47,570
have seen this for the first time I did

00:16:44,660 --> 00:16:49,610
not know what to do at all I wanted to

00:16:47,570 --> 00:16:50,830
jump out of the window because I was

00:16:49,610 --> 00:16:53,780
afraid

00:16:50,830 --> 00:16:56,510
meanwhile I know what's going on here

00:16:53,780 --> 00:16:59,450
meanwhile I know that is awkward ever

00:16:56,510 --> 00:17:02,660
message tells me that I need a polyfill

00:16:59,450 --> 00:17:06,290
a polyfill for web components so that

00:17:02,660 --> 00:17:09,520
they can run in my browser and this

00:17:06,290 --> 00:17:13,040
leads us to the next part of theory

00:17:09,520 --> 00:17:15,620
which is about polyfill we have to go

00:17:13,040 --> 00:17:17,930
through this theory to get started with

00:17:15,620 --> 00:17:20,150
web components first of all the good

00:17:17,930 --> 00:17:23,360
craft at a good message the good message

00:17:20,150 --> 00:17:26,030
here is that web components can be down

00:17:23,360 --> 00:17:26,900
levels to everything and they can be

00:17:26,030 --> 00:17:28,850
polyfill

00:17:26,900 --> 00:17:32,150
so that they work with each and every

00:17:28,850 --> 00:17:37,610
browser even with legacy browsers

00:17:32,150 --> 00:17:40,490
I'm sure you know which browse I mean so

00:17:37,610 --> 00:17:43,760
if we look to the browser support for

00:17:40,490 --> 00:17:46,309
instance using can I use this page you

00:17:43,760 --> 00:17:49,130
probably know then we see it works with

00:17:46,309 --> 00:17:51,470
each and every modern browser and when

00:17:49,130 --> 00:17:55,220
it comes to Microsoft browsers there is

00:17:51,470 --> 00:17:57,490
some room for improvement of course H

00:17:55,220 --> 00:18:00,500
will get support for web components

00:17:57,490 --> 00:18:04,039
because H will use chromium in the

00:18:00,500 --> 00:18:07,039
future but for ie B will need a polyfill

00:18:04,039 --> 00:18:09,799
all the time as long as ie is a thing

00:18:07,039 --> 00:18:14,450
for you so let me know who has to

00:18:09,799 --> 00:18:16,490
support ie yeah a lot of people and this

00:18:14,450 --> 00:18:20,179
is really a pity but I know this issue

00:18:16,490 --> 00:18:22,220
especially when you have to do projects

00:18:20,179 --> 00:18:24,649
for the cooperate environment you have

00:18:22,220 --> 00:18:27,169
to support ie because of all those

00:18:24,649 --> 00:18:31,370
cooperate policies and so we need

00:18:27,169 --> 00:18:35,360
polyfills and bond polyfill here is this

00:18:31,370 --> 00:18:37,880
one web components / web components

00:18:35,360 --> 00:18:41,360
chess I really like this polyfill

00:18:37,880 --> 00:18:45,169
because this polyfill enables even I eat

00:18:41,360 --> 00:18:48,679
to run web components it is a bit heavy

00:18:45,169 --> 00:18:50,809
bait it is not the slimmest polyfill but

00:18:48,679 --> 00:18:53,720
it works with each and every browser out

00:18:50,809 --> 00:18:57,220
there the slimmer bond don't work for

00:18:53,720 --> 00:19:00,020
instance with all the versions of ie

00:18:57,220 --> 00:19:02,270
something that really breaks my heart

00:19:00,020 --> 00:19:04,760
I am honest with you something that

00:19:02,270 --> 00:19:07,990
really breaks my heart is that we don't

00:19:04,760 --> 00:19:11,330
need one polyfill we need two polyfills

00:19:07,990 --> 00:19:14,450
first of all we need a polyfill for all

00:19:11,330 --> 00:19:17,630
the browsers that do not support web

00:19:14,450 --> 00:19:20,299
components for this we can just load the

00:19:17,630 --> 00:19:22,789
polyfill loader which is intern loading

00:19:20,299 --> 00:19:25,309
all the other polyfills we need for

00:19:22,789 --> 00:19:27,409
instance polyfills for templates for

00:19:25,309 --> 00:19:30,350
custom elements or for the shadow dom

00:19:27,409 --> 00:19:32,809
all the standards I have told you before

00:19:30,350 --> 00:19:33,860
and then and this is the heartbreaking

00:19:32,809 --> 00:19:37,460
part of it

00:19:33,860 --> 00:19:41,120
we need a polyfill called the es5

00:19:37,460 --> 00:19:44,809
adapter for browsers that's to support

00:19:41,120 --> 00:19:45,650
web components and and now this is

00:19:44,809 --> 00:19:48,230
awkward

00:19:45,650 --> 00:19:51,020
we have a browser that does support it

00:19:48,230 --> 00:19:54,350
and even though it does support it we

00:19:51,020 --> 00:19:56,480
need a polyfill so why is this well the

00:19:54,350 --> 00:20:00,220
reason is that components have been

00:19:56,480 --> 00:20:03,890
designed for ACMA script 2015 and

00:20:00,220 --> 00:20:06,800
nowadays most of the time the town level

00:20:03,890 --> 00:20:09,020
to ACMA script 5 to make it run with

00:20:06,800 --> 00:20:12,559
those all the browser's we've talked

00:20:09,020 --> 00:20:16,100
about and when a modern browser sees a

00:20:12,559 --> 00:20:18,890
web component that is down level 2 ECMO

00:20:16,100 --> 00:20:20,990
script 5 it says what's this and not

00:20:18,890 --> 00:20:24,350
prepared to see something like this and

00:20:20,990 --> 00:20:27,320
prepared to see modern web components

00:20:24,350 --> 00:20:30,350
based upon a common script 2015 but not

00:20:27,320 --> 00:20:33,230
web components based upon echo script 5

00:20:30,350 --> 00:20:35,990
and so they stopped working and this is

00:20:33,230 --> 00:20:38,870
what we have seen before chrome just

00:20:35,990 --> 00:20:43,130
stopped working because Chrome was not

00:20:38,870 --> 00:20:46,880
prepared for seeing a web component that

00:20:43,130 --> 00:20:50,090
spaces upon ACMA script 5 and so this

00:20:46,880 --> 00:20:52,730
adapter Soulstice a bit later I have a

00:20:50,090 --> 00:20:54,890
not a solution for this issue another

00:20:52,730 --> 00:20:57,410
solution that deals with differential

00:20:54,890 --> 00:21:01,040
loading but first of all let's go with

00:20:57,410 --> 00:21:06,800
this polyfill ok now I can finish my

00:21:01,040 --> 00:21:10,190
demonstration now I can go to my

00:21:06,800 --> 00:21:15,880
polyfills page and here i have prepared

00:21:10,190 --> 00:21:19,309
one polyfill this is the adapter

00:21:15,880 --> 00:21:22,610
polyfill one polyfill this is the

00:21:19,309 --> 00:21:26,570
adapter and here I have prepared another

00:21:22,610 --> 00:21:29,150
polyfill which loads just on demand the

00:21:26,570 --> 00:21:31,400
web components loader which is loading

00:21:29,150 --> 00:21:34,510
all the other polyfills for the lacking

00:21:31,400 --> 00:21:38,480
standards and now if we are lucky

00:21:34,510 --> 00:21:41,690
everything should work let's load this

00:21:38,480 --> 00:21:45,260
let's go to this main page and hey it

00:21:41,690 --> 00:21:50,630
works here is my diagram my interactive

00:21:45,260 --> 00:21:53,630
diagram powered by ng chat and this is

00:21:50,630 --> 00:21:56,330
awesome or perhaps this is not awesome

00:21:53,630 --> 00:21:57,890
at all because perhaps you are saying

00:21:56,330 --> 00:22:01,030
now hey Manfred

00:21:57,890 --> 00:22:03,650
you don't need angular elements for this

00:22:01,030 --> 00:22:06,559
everything you need for this is just an

00:22:03,650 --> 00:22:09,440
ordinary angular component and yeah you

00:22:06,559 --> 00:22:13,010
are right for this very use case an

00:22:09,440 --> 00:22:15,890
ordinary angular component is enough but

00:22:13,010 --> 00:22:18,410
just think about using this component

00:22:15,890 --> 00:22:21,410
with other frameworks or just think

00:22:18,410 --> 00:22:24,980
about lazy loading this component in

00:22:21,410 --> 00:22:27,760
those cases elements web components are

00:22:24,980 --> 00:22:30,470
really in handy

00:22:27,760 --> 00:22:34,520
okay so much for this first

00:22:30,470 --> 00:22:37,820
demonstration I want to ask you to start

00:22:34,520 --> 00:22:40,760
with the first lab you can find the

00:22:37,820 --> 00:22:43,490
description of the first lab under this

00:22:40,760 --> 00:22:46,100
link here and I want to ask you to just

00:22:43,490 --> 00:22:48,770
work on these two chapters of the lab

00:22:46,100 --> 00:22:51,850
description if you need something just

00:22:48,770 --> 00:22:54,830
call out for me I am happy to help

00:22:51,850 --> 00:22:57,860
great so I think that really worked well

00:22:54,830 --> 00:23:00,530
I've seen a lot of working examples a

00:22:57,860 --> 00:23:03,380
lot of pie charts so congrats on this I

00:23:00,530 --> 00:23:05,150
want to show you a tiny hint something

00:23:03,380 --> 00:23:10,100
that can help in your real-world

00:23:05,150 --> 00:23:14,690
projects namely I've written a class

00:23:10,100 --> 00:23:17,870
library that is called an XI X plus let

00:23:14,690 --> 00:23:20,990
me shorten this and she X plus can just

00:23:17,870 --> 00:23:26,929
and she added to your webpage and she at

00:23:20,990 --> 00:23:28,850
and she X plus payload plus and then

00:23:26,929 --> 00:23:31,429
attea gets downloaded as well as

00:23:28,850 --> 00:23:33,500
installed within your project and as you

00:23:31,429 --> 00:23:36,140
see here it is updating the angle at

00:23:33,500 --> 00:23:39,980
Chase and so that the angular CLI knows

00:23:36,140 --> 00:23:43,010
to use this extension and this mg X plus

00:23:39,980 --> 00:23:47,030
can do a lot of things most of them are

00:23:43,010 --> 00:23:50,179
helpful with web components with angular

00:23:47,030 --> 00:23:53,390
elements one thing it can do and this is

00:23:50,179 --> 00:23:57,440
important now it can generate a map

00:23:53,390 --> 00:24:00,350
component polyfills support just type in

00:23:57,440 --> 00:24:04,580
ng generate and she expelled plus column

00:24:00,350 --> 00:24:09,260
that component polyfill and then it will

00:24:04,580 --> 00:24:11,510
do everything for you it will let's do

00:24:09,260 --> 00:24:14,420
it with - force it

00:24:11,510 --> 00:24:17,540
we'll download the web components and it

00:24:14,420 --> 00:24:20,930
will update as you see here your files

00:24:17,540 --> 00:24:23,150
for instance the index.html file or if

00:24:20,930 --> 00:24:26,510
it was not already installed it would

00:24:23,150 --> 00:24:29,690
also update your polyfill file and when

00:24:26,510 --> 00:24:32,300
this is ready here then you get the

00:24:29,690 --> 00:24:34,520
lines of code you have already in your

00:24:32,300 --> 00:24:39,920
project the lines of code that have been

00:24:34,520 --> 00:24:42,350
commanded out before yay so at the end

00:24:39,920 --> 00:24:45,050
of the day you can automate this this is

00:24:42,350 --> 00:24:48,020
just a tiny thing and she expelled plus

00:24:45,050 --> 00:24:51,050
can do it can do also other things if we

00:24:48,020 --> 00:24:53,380
look a bit into it later things that are

00:24:51,050 --> 00:24:59,150
really necessary nowadays to make use of

00:24:53,380 --> 00:25:03,350
angular elements okay so let's go on

00:24:59,150 --> 00:25:06,890
with this workshop let's talk about an

00:25:03,350 --> 00:25:09,560
alternative to the heart-breaking es5

00:25:06,890 --> 00:25:13,730
adapter as mentioned before we need this

00:25:09,560 --> 00:25:16,520
adapter because the new browsers suppose

00:25:13,730 --> 00:25:21,470
that web components are based upon Xmas

00:25:16,520 --> 00:25:23,300
crap 2015 and the solution here I'm

00:25:21,470 --> 00:25:26,300
presenting is called differential

00:25:23,300 --> 00:25:28,640
loading and it prevents that and modern

00:25:26,300 --> 00:25:31,490
browser sees something like Akmal at

00:25:28,640 --> 00:25:34,940
five it prevents it by producing two

00:25:31,490 --> 00:25:38,420
sets of bundles it produces one set of

00:25:34,940 --> 00:25:41,330
bundles using ACMA script 2015 and above

00:25:38,420 --> 00:25:43,820
and it produces another set of bundles

00:25:41,330 --> 00:25:48,440
using good old ACMA script five for

00:25:43,820 --> 00:25:51,350
legally process and to make use of this

00:25:48,440 --> 00:25:53,660
you just need three steps it is really

00:25:51,350 --> 00:25:56,200
quite easy perhaps you have seen this in

00:25:53,660 --> 00:26:00,260
another session it's one of the hot new

00:25:56,200 --> 00:26:02,900
features of the angle of CLI eight first

00:26:00,260 --> 00:26:05,570
of all you need to adjust the browser

00:26:02,900 --> 00:26:08,600
list file the browser list file is

00:26:05,570 --> 00:26:12,140
nowadays part of each and every angular

00:26:08,600 --> 00:26:14,720
CLI project the browser list file points

00:26:12,140 --> 00:26:17,780
to all the browsers you want to support

00:26:14,720 --> 00:26:21,470
and there for instance you could place

00:26:17,780 --> 00:26:23,870
the string ie nine to 11 so the angular

00:26:21,470 --> 00:26:25,100
CLI knows you have to support those

00:26:23,870 --> 00:26:29,120
process and

00:26:25,100 --> 00:26:32,240
that you have to support es5 the second

00:26:29,120 --> 00:26:35,929
thing is that you have to put the target

00:26:32,240 --> 00:26:38,840
in the or TS config Chasen to es 2015

00:26:35,929 --> 00:26:41,360
and so you have proved the upper bound

00:26:38,840 --> 00:26:44,780
and the lower bound the lower bound says

00:26:41,360 --> 00:26:48,890
ie which means es 5 the upper bound says

00:26:44,780 --> 00:26:51,710
es 2015 and this is enough for this Eli

00:26:48,890 --> 00:26:54,620
8 to produce two sets of bundles

00:26:51,710 --> 00:26:57,169
everything you need to do in advance is

00:26:54,620 --> 00:26:59,870
to create a production build and she

00:26:57,169 --> 00:27:03,230
built - - plots and you will get your

00:26:59,870 --> 00:27:05,570
pandal sets of course now you are

00:27:03,230 --> 00:27:07,669
wondering how this looks like and this

00:27:05,570 --> 00:27:11,179
is what it will look like you will get

00:27:07,669 --> 00:27:14,600
two compilations you will get back back

00:27:11,179 --> 00:27:18,500
both months for es 5 and ones for es

00:27:14,600 --> 00:27:20,900
2015 let's crawl into this and when you

00:27:18,500 --> 00:27:23,960
look at the file names first of all go

00:27:20,900 --> 00:27:29,240
eBay first of all you see no that's not

00:27:23,960 --> 00:27:30,890
the right one let's try it one more time

00:27:29,240 --> 00:27:33,049
yeah this is better

00:27:30,890 --> 00:27:37,309
first of all you see there is a file

00:27:33,049 --> 00:27:40,250
called es 5 it is the runtime es 5 there

00:27:37,309 --> 00:27:45,620
is a main es 5 and the same thing is

00:27:40,250 --> 00:27:48,409
created for es 2015 yeah and this has a

00:27:45,620 --> 00:27:52,070
lot of advantages one advantage here is

00:27:48,409 --> 00:27:55,070
that newer browsers will not see Xmas

00:27:52,070 --> 00:27:58,130
crap 5 and another advantage is that the

00:27:55,070 --> 00:28:00,380
ACMA script 2015 bundles are much

00:27:58,130 --> 00:28:03,650
smaller so you can save a lot of

00:28:00,380 --> 00:28:05,840
bandwidth here saying this this is only

00:28:03,650 --> 00:28:08,630
possible with ng build this is not

00:28:05,840 --> 00:28:11,780
possible with ng surf because that would

00:28:08,630 --> 00:28:14,539
be too costly for ng surf ng surf has to

00:28:11,780 --> 00:28:17,120
be fast because we want to get a fast

00:28:14,539 --> 00:28:21,110
response when we are changing something

00:28:17,120 --> 00:28:23,450
during the development perhaps you're

00:28:21,110 --> 00:28:26,059
wondering how to browse a can decide

00:28:23,450 --> 00:28:28,280
upon method or go with the old bundles

00:28:26,059 --> 00:28:31,039
or with the new bundles and the answer

00:28:28,280 --> 00:28:34,460
is this year the old bundles get the

00:28:31,039 --> 00:28:36,830
flag no module and this flag tells the

00:28:34,460 --> 00:28:38,429
newer browsers to ignore this line of

00:28:36,830 --> 00:28:41,159
code and

00:28:38,429 --> 00:28:44,279
new bundles gets type module which is

00:28:41,159 --> 00:28:47,129
ignored by the older process this is the

00:28:44,279 --> 00:28:49,379
key to differential loading and so your

00:28:47,129 --> 00:28:51,840
tones need this polyfill for newer

00:28:49,379 --> 00:28:57,509
browsers anymore they will just see

00:28:51,840 --> 00:28:59,399
Akana script 2015 ok cool let's talk

00:28:57,509 --> 00:29:03,419
about another topic let's talk about

00:28:59,399 --> 00:29:05,879
shadow dome or the shuttin dome as it is

00:29:03,419 --> 00:29:09,659
called in German as mentioned before

00:29:05,879 --> 00:29:12,509
shadow dome is baked into Angola it is

00:29:09,659 --> 00:29:15,450
there since Angola - since the first

00:29:12,509 --> 00:29:18,869
bits of Angola are out there and by

00:29:15,450 --> 00:29:21,960
default Angola is emulating shadow you

00:29:18,869 --> 00:29:24,779
can also do this explicitly by setting

00:29:21,960 --> 00:29:27,570
this encapsulation property to emulate

00:29:24,779 --> 00:29:31,110
it you don't need to do it because it's

00:29:27,570 --> 00:29:33,480
the default value when you want to have

00:29:31,110 --> 00:29:35,970
the real shadow Dom the browser-based

00:29:33,480 --> 00:29:40,409
share at home you can set this property

00:29:35,970 --> 00:29:44,249
to native of course this demands to use

00:29:40,409 --> 00:29:47,700
just a proper browser not ie because ie

00:29:44,249 --> 00:29:50,039
is not supporting it this native

00:29:47,700 --> 00:29:54,779
property is activating shadow Dom

00:29:50,039 --> 00:29:56,610
version 0 and as you might think

00:29:54,779 --> 00:30:00,210
version 0 is nothing that's really

00:29:56,610 --> 00:30:03,299
trustworthy isn't it so the good message

00:30:00,210 --> 00:30:06,269
here is version 1 is out since some time

00:30:03,299 --> 00:30:09,499
and if you want to go with version 1 we

00:30:06,269 --> 00:30:12,149
can set encapsulation to shadow and

00:30:09,499 --> 00:30:14,759
perhaps you want to turn it off because

00:30:12,149 --> 00:30:15,899
you're saying hey I don't need this and

00:30:14,759 --> 00:30:18,869
know what I'm doing

00:30:15,899 --> 00:30:21,809
I didn't needed it 20 years ago and I

00:30:18,869 --> 00:30:26,909
don't need it now then just set it to

00:30:21,809 --> 00:30:29,100
none this is for the brave ones ok let

00:30:26,909 --> 00:30:33,499
me show you a simple demonstration for

00:30:29,100 --> 00:30:36,330
this for this I'm switching over to my

00:30:33,499 --> 00:30:41,369
dashpot component

00:30:36,330 --> 00:30:47,639
- both tile component and here I'm

00:30:41,369 --> 00:30:50,909
adding some styles I'm saying hey there

00:30:47,639 --> 00:30:55,070
is a style for card title

00:30:50,909 --> 00:31:05,789
and his style comes with the color green

00:30:55,070 --> 00:31:08,700
and when the page gets reloaded then we

00:31:05,789 --> 00:31:09,840
see we have a green title but we see

00:31:08,700 --> 00:31:12,659
something else

00:31:09,840 --> 00:31:15,299
we also see that this style does not

00:31:12,659 --> 00:31:18,830
affect the parent of this component

00:31:15,299 --> 00:31:22,379
because the styles are isolated now so

00:31:18,830 --> 00:31:26,309
just to discover this a bit more let's

00:31:22,379 --> 00:31:28,940
turn off Sheridan for this I am taking

00:31:26,309 --> 00:31:31,919
this few encapsulation property

00:31:28,940 --> 00:31:38,729
encapsulation is set to few and

00:31:31,919 --> 00:31:41,369
capsulation tottenham and now when

00:31:38,729 --> 00:31:44,369
everything reloads you see now the style

00:31:41,369 --> 00:31:47,009
leaks through our web components now the

00:31:44,369 --> 00:31:50,309
style also effects the parent which is

00:31:47,009 --> 00:31:52,349
normally something you want to avoid but

00:31:50,309 --> 00:31:54,929
some people are saying now hey I want to

00:31:52,349 --> 00:31:58,080
style my components I want to apply

00:31:54,929 --> 00:32:01,259
different themes and if you want to do

00:31:58,080 --> 00:32:05,429
this using CSS variables are the best

00:32:01,259 --> 00:32:08,489
way to do for this I would say hey let's

00:32:05,429 --> 00:32:12,450
use a variable in here which is called

00:32:08,489 --> 00:32:16,649
my color and for the older browsers that

00:32:12,450 --> 00:32:20,639
do not support these variables let's go

00:32:16,649 --> 00:32:23,129
with a default fallback I am removing

00:32:20,639 --> 00:32:26,070
few encapsulation on I want to have Hera

00:32:23,129 --> 00:32:30,119
dome and all I need to do now is to

00:32:26,070 --> 00:32:32,879
define this my color variable and for

00:32:30,119 --> 00:32:35,629
this I'm switching to my Styles file and

00:32:32,879 --> 00:32:39,809
here I'm saying hey I want to add a

00:32:35,629 --> 00:32:45,529
global theming and this global theming

00:32:39,809 --> 00:32:45,529
is defining my color which is green

00:32:48,070 --> 00:32:55,419
and when we reload it we see that

00:32:50,950 --> 00:32:58,090
nothing works perhaps this is not called

00:32:55,419 --> 00:32:58,779
global I'm not completely sure it is

00:32:58,090 --> 00:33:04,389
called root

00:32:58,779 --> 00:33:07,809
yeah it's called root I'm also rude

00:33:04,389 --> 00:33:11,739
sometimes okay so you see yeah

00:33:07,809 --> 00:33:15,159
color green very nice so our kala is

00:33:11,739 --> 00:33:17,919
going through this variable into our

00:33:15,159 --> 00:33:21,639
components now let's change the color to

00:33:17,919 --> 00:33:24,999
something like light steel blue this is

00:33:21,639 --> 00:33:29,440
why I love CSS every time I'm working

00:33:24,999 --> 00:33:31,119
with CSS I'm learning new colors I did

00:33:29,440 --> 00:33:34,899
not know that there is something like

00:33:31,119 --> 00:33:37,629
light still blue okay so let's try it

00:33:34,899 --> 00:33:41,710
hey it works it is light still blue and

00:33:37,629 --> 00:33:46,149
then I'm going with IE then ie will at

00:33:41,710 --> 00:33:48,509
least fall back to the default color

00:33:46,149 --> 00:33:51,970
which is green

00:33:48,509 --> 00:33:54,129
let's cross fingers yeah

00:33:51,970 --> 00:33:57,220
the default color better than nothing

00:33:54,129 --> 00:34:00,220
isn't it meanwhile they are also

00:33:57,220 --> 00:34:03,549
polyfills out there polyfills for EM

00:34:00,220 --> 00:34:05,830
will emulating those CSS variables in IE

00:34:03,549 --> 00:34:10,299
so you should be on the safe side with

00:34:05,830 --> 00:34:14,740
this okay so much for this chunk of

00:34:10,299 --> 00:34:18,250
theorem let's do a little lap for this

00:34:14,740 --> 00:34:24,069
let's go back to our lap description and

00:34:18,250 --> 00:34:27,220
please work on the shadow a shadow dome

00:34:24,069 --> 00:34:29,440
exercise it's a really tiny exercise if

00:34:27,220 --> 00:34:31,889
you have any questions feel free to

00:34:29,440 --> 00:34:31,889
reach out

00:34:36,690 --> 00:34:43,379
perhaps a tiny hint

00:34:39,659 --> 00:34:46,149
sometimes kicking here on stack blitz

00:34:43,379 --> 00:34:48,700
kicking knock hit a point that doesn't

00:34:46,149 --> 00:34:51,369
work sometimes kicking here on stack

00:34:48,700 --> 00:34:54,039
blitz does really do wonders so if you

00:34:51,369 --> 00:34:56,260
get a knock whatever just try to reload

00:34:54,039 --> 00:34:58,650
it with this very but not the other one

00:34:56,260 --> 00:35:02,529
this button within stack plates

00:34:58,650 --> 00:35:05,020
okay I see a lot of light steel blue

00:35:02,529 --> 00:35:09,630
titles which is nice which shows that

00:35:05,020 --> 00:35:14,170
you did the example Congrats on this and

00:35:09,630 --> 00:35:18,329
I would say let's go on with the next

00:35:14,170 --> 00:35:21,400
chapter we've done this we've done that

00:35:18,329 --> 00:35:23,890
let's go on with dynamically adding

00:35:21,400 --> 00:35:26,710
custom elements this is the first thing

00:35:23,890 --> 00:35:29,829
that would be far more difficult with

00:35:26,710 --> 00:35:32,950
traditional angular components so the

00:35:29,829 --> 00:35:35,710
point here is that adding a component in

00:35:32,950 --> 00:35:38,829
a dynamic way is very easy with web

00:35:35,710 --> 00:35:41,529
components you just need this twenty

00:35:38,829 --> 00:35:44,200
years old code you just need something

00:35:41,529 --> 00:35:48,010
like document create elements to create

00:35:44,200 --> 00:35:50,710
your own web component and I really like

00:35:48,010 --> 00:35:53,500
this example because it shows that the

00:35:50,710 --> 00:35:56,799
browser does not differentiate between

00:35:53,500 --> 00:35:59,140
the ordinary angular elements or the

00:35:56,799 --> 00:36:01,839
ordinary browser-based elements and your

00:35:59,140 --> 00:36:04,690
angular elements it reads your angular

00:36:01,839 --> 00:36:09,220
elements the same way as it reads an

00:36:04,690 --> 00:36:11,859
image and table or at if you can as you

00:36:09,220 --> 00:36:14,619
see here define attributes you can

00:36:11,859 --> 00:36:17,020
design properties you can even hook up

00:36:14,619 --> 00:36:19,510
even listeners and then you can add

00:36:17,020 --> 00:36:24,000
everything to another element so that it

00:36:19,510 --> 00:36:24,000
gets displayed let's do this

00:36:27,420 --> 00:36:38,680
so let's switch over to my dashboard

00:36:33,690 --> 00:36:43,390
tile page - part it's called - what page

00:36:38,680 --> 00:36:46,240
and this - birthday page has a function

00:36:43,390 --> 00:36:49,360
called add style this function shall

00:36:46,240 --> 00:36:51,730
turn a McCauley at a - quartile and for

00:36:49,360 --> 00:36:54,910
this it is telic ating to underscore at

00:36:51,730 --> 00:36:57,880
which just gets the name of the element

00:36:54,910 --> 00:36:58,660
- quartile or table or image or

00:36:57,880 --> 00:37:01,720
something else

00:36:58,660 --> 00:37:04,510
and then within a time doing the magic

00:37:01,720 --> 00:37:06,970
here I'm defining free random values

00:37:04,510 --> 00:37:10,300
because I need free values format ashpit

00:37:06,970 --> 00:37:14,100
I'll ABC you remember it and here I can

00:37:10,300 --> 00:37:17,340
say hey please create my tile document

00:37:14,100 --> 00:37:24,700
create element

00:37:17,340 --> 00:37:27,370
- poet tile and then we can say hey I'm

00:37:24,700 --> 00:37:32,940
assigning a property a property a

00:37:27,370 --> 00:37:38,020
bitch's data on position 0 property P

00:37:32,940 --> 00:37:39,690
cut on position 1 and property see that

00:37:38,020 --> 00:37:43,570
on position 2

00:37:39,690 --> 00:37:48,910
yeah and then I'm also defining an

00:37:43,570 --> 00:37:52,830
attribute for instance I'm saying hey I

00:37:48,910 --> 00:37:57,460
have a class and I want it to be column

00:37:52,830 --> 00:38:00,520
medium or column large for I'm using

00:37:57,460 --> 00:38:03,460
bootstrap as you can imagine here then

00:38:00,520 --> 00:38:07,210
I'm using the document object one more

00:38:03,460 --> 00:38:09,880
time I'm crapping a Content element from

00:38:07,210 --> 00:38:12,280
my page which is just a placeholder that

00:38:09,880 --> 00:38:18,010
will get all the elements all the -

00:38:12,280 --> 00:38:23,880
bottles content equals document get

00:38:18,010 --> 00:38:27,810
element by ID and Here I am

00:38:23,880 --> 00:38:31,390
pending a child's name lead a tile and

00:38:27,810 --> 00:38:36,550
that should be everything so let's try

00:38:31,390 --> 00:38:37,619
it out let's go into my page let's kill

00:38:36,550 --> 00:38:40,619
stack plates

00:38:37,619 --> 00:38:44,550
let's go into my application let's go to

00:38:40,619 --> 00:38:45,990
dashboard let's click at default and hey

00:38:44,550 --> 00:38:49,200
it works

00:38:45,990 --> 00:38:51,540
it is dynamically adding elements to my

00:38:49,200 --> 00:38:54,210
page perhaps you have tried this with

00:38:51,540 --> 00:38:56,880
ordinary angular components it also

00:38:54,210 --> 00:39:00,240
works with ordinary angular components

00:38:56,880 --> 00:39:02,880
but in this case you had to use a lot of

00:39:00,240 --> 00:39:09,150
low-level code here as you see it is

00:39:02,880 --> 00:39:11,910
really straightforward perhaps you are

00:39:09,150 --> 00:39:14,369
saying hey using the document object is

00:39:11,910 --> 00:39:17,400
not nice at all because of server-side

00:39:14,369 --> 00:39:19,770
rendering but the point here is angular

00:39:17,400 --> 00:39:22,109
is meanwhile simulating that document

00:39:19,770 --> 00:39:24,840
object for server-side rendering you can

00:39:22,109 --> 00:39:26,700
get hold of it by dependency injection

00:39:24,840 --> 00:39:30,060
and then it also works on the

00:39:26,700 --> 00:39:32,609
server-side this does not mean that you

00:39:30,060 --> 00:39:35,849
should use this all the time but when it

00:39:32,609 --> 00:39:42,380
comes to highly dynamic scenarios this

00:39:35,849 --> 00:39:46,680
comes really in handy okay I would say

00:39:42,380 --> 00:39:54,300
let's go back to the laps description

00:39:46,680 --> 00:40:00,750
and let's try this out for this just

00:39:54,300 --> 00:40:05,310
work on this exercise here okay I see a

00:40:00,750 --> 00:40:07,260
lot of working examples I want to show

00:40:05,310 --> 00:40:09,630
you something

00:40:07,260 --> 00:40:11,430
in addition to this something that only

00:40:09,630 --> 00:40:13,680
works when you have downloaded

00:40:11,430 --> 00:40:17,400
everything that's why it's part of the

00:40:13,680 --> 00:40:20,910
director's cut of this lapse description

00:40:17,400 --> 00:40:23,940
namely lazy loading it is quite easy to

00:40:20,910 --> 00:40:26,160
lays it in load custom elements for this

00:40:23,940 --> 00:40:28,410
you need to register the module in

00:40:26,160 --> 00:40:32,339
question in your angular Jason

00:40:28,410 --> 00:40:35,070
so the CLI knows that your module

00:40:32,339 --> 00:40:38,070
alongside all its components shall be

00:40:35,070 --> 00:40:40,890
lazy loaded and then you can lazy load

00:40:38,070 --> 00:40:43,500
everything with the entry module factory

00:40:40,890 --> 00:40:46,740
loader on demand so when you need it

00:40:43,500 --> 00:40:49,500
just spin up this loader and loose use

00:40:46,740 --> 00:40:50,490
its load methods to get everything into

00:40:49,500 --> 00:40:55,350
the main member

00:40:50,490 --> 00:40:57,240
let me show this you in action it can

00:40:55,350 --> 00:40:59,610
come in handy sometimes

00:40:57,240 --> 00:41:02,460
for this I'm switching over to my

00:40:59,610 --> 00:41:05,970
angular Jason and here you see this lazy

00:41:02,460 --> 00:41:09,360
modules property and this is where the

00:41:05,970 --> 00:41:13,140
name of my module goes here I'm having a

00:41:09,360 --> 00:41:17,280
lazy - portal module another module that

00:41:13,140 --> 00:41:19,190
contains such web component then you

00:41:17,280 --> 00:41:22,740
have done this and then you have

00:41:19,190 --> 00:41:25,830
reloaded the CLI you should see

00:41:22,740 --> 00:41:29,400
something like this year you should see

00:41:25,830 --> 00:41:32,940
that the syl.i is creating an own bundle

00:41:29,400 --> 00:41:35,970
for your module it gets a very long name

00:41:32,940 --> 00:41:37,290
just in the back mode in production mode

00:41:35,970 --> 00:41:40,950
it is just a number

00:41:37,290 --> 00:41:44,580
syrota GS or one that GS or something

00:41:40,950 --> 00:41:47,310
like this yeah and then you can use your

00:41:44,580 --> 00:41:50,430
entry module factory loader to load this

00:41:47,310 --> 00:41:54,810
module on demand and for this I'm

00:41:50,430 --> 00:41:59,340
switching here over to my lazy - bottle

00:41:54,810 --> 00:42:02,370
service and this lazy - bottle service

00:41:59,340 --> 00:42:04,350
gets the factory loader by means of

00:42:02,370 --> 00:42:07,860
dependency injection as you see here

00:42:04,350 --> 00:42:10,530
this service has a load method it has a

00:42:07,860 --> 00:42:14,010
constant path that points to our module

00:42:10,530 --> 00:42:17,310
the module we want to lazy load and then

00:42:14,010 --> 00:42:20,310
it is calling loader load it is passing

00:42:17,310 --> 00:42:23,790
debuff I'm getting back a module factory

00:42:20,310 --> 00:42:27,390
and then I can use the create methods to

00:42:23,790 --> 00:42:30,450
instantiate this module and as this

00:42:27,390 --> 00:42:33,300
module is defining that components

00:42:30,450 --> 00:42:36,210
within its constructor we can now use

00:42:33,300 --> 00:42:39,570
those web components immediately after

00:42:36,210 --> 00:42:40,470
this method run it is really as simple

00:42:39,570 --> 00:42:42,870
as that

00:42:40,470 --> 00:42:45,810
without web components we needed a lot

00:42:42,870 --> 00:42:48,000
of low-level api of angular now we can

00:42:45,810 --> 00:42:52,040
just document create element it and

00:42:48,000 --> 00:42:56,610
document append child dates to our page

00:42:52,040 --> 00:43:02,950
so let's do this for this I'm switching

00:42:56,610 --> 00:43:07,619
to my dashboard page component

00:43:02,950 --> 00:43:11,079
there is a method called at lazy and

00:43:07,619 --> 00:43:13,270
this at lazy method tells us that it

00:43:11,079 --> 00:43:16,000
does not work in stack plates because of

00:43:13,270 --> 00:43:18,130
limitations in stack plates so you have

00:43:16,000 --> 00:43:21,549
to trust me that it runs in real world

00:43:18,130 --> 00:43:24,069
and here you see I'm calling the load

00:43:21,549 --> 00:43:27,099
function we have seen before and after

00:43:24,069 --> 00:43:31,480
this I'm adding the lazy - quartile to

00:43:27,099 --> 00:43:34,809
my page okay when we look into the

00:43:31,480 --> 00:43:37,809
template of the dashboard page component

00:43:34,809 --> 00:43:40,119
we see that the button for this one is

00:43:37,809 --> 00:43:42,400
commanded out because as mentioned it

00:43:40,119 --> 00:43:44,710
does not work here stack plates but now

00:43:42,400 --> 00:43:47,950
I am commanding it in and calling at

00:43:44,710 --> 00:43:53,170
lazy and if we are on the safe side it

00:43:47,950 --> 00:43:57,280
works yeah it works more or less it is

00:43:53,170 --> 00:44:00,910
loading the old - but I'll let's go back

00:43:57,280 --> 00:44:06,940
to the dashboard page component there

00:44:00,910 --> 00:44:10,660
sport page component it should load the

00:44:06,940 --> 00:44:13,390
lazy - quartile oh yeah here I have -

00:44:10,660 --> 00:44:16,990
but I'll hard-coded this function should

00:44:13,390 --> 00:44:19,359
take the parameter and create what the

00:44:16,990 --> 00:44:23,730
parameter says which is once the

00:44:19,359 --> 00:44:29,109
ordinary - portal and once the lazy one

00:44:23,730 --> 00:44:31,930
and now hey lazy loading works I'm

00:44:29,109 --> 00:44:35,079
really happy we see it's another kind of

00:44:31,930 --> 00:44:39,970
diagram nice I could do this the whole

00:44:35,079 --> 00:44:43,030
day have you seen this animation I am

00:44:39,970 --> 00:44:49,119
really proud of it and just to prove

00:44:43,030 --> 00:44:50,980
that lazy loading takes happen here let

00:44:49,119 --> 00:44:55,450
me show you the network tab and clicking

00:44:50,980 --> 00:44:58,780
at lazy and here it is so we have

00:44:55,450 --> 00:45:01,770
implemented a manual lazy loading for

00:44:58,780 --> 00:45:05,619
just this one component and it's module

00:45:01,770 --> 00:45:10,690
this can come in handy if you ask me

00:45:05,619 --> 00:45:12,730
this is also the pay's idea of this new

00:45:10,690 --> 00:45:15,579
angle approach check you've heard in the

00:45:12,730 --> 00:45:16,570
keynote but now let's go one step

00:45:15,579 --> 00:45:19,360
further

00:45:16,570 --> 00:45:21,370
slowed an external web component and

00:45:19,360 --> 00:45:24,100
this is something that works with stack

00:45:21,370 --> 00:45:26,470
plates when I speak about external web

00:45:24,100 --> 00:45:29,350
components and speaking about a project

00:45:26,470 --> 00:45:31,240
a which contains a bunch of web

00:45:29,350 --> 00:45:34,630
components a bunch of custom elements

00:45:31,240 --> 00:45:37,390
this project is compiled into a bundle

00:45:34,630 --> 00:45:40,900
and then we can load this bundle into

00:45:37,390 --> 00:45:43,810
another project this project P can use

00:45:40,900 --> 00:45:47,890
each and every framework it could use

00:45:43,810 --> 00:45:50,530
angular it could use angularjs it could

00:45:47,890 --> 00:45:52,990
use vanilla chess or the other

00:45:50,530 --> 00:45:53,740
JavaScript frameworks out there I don't

00:45:52,990 --> 00:45:56,860
think so

00:45:53,740 --> 00:46:00,190
no I think that's all so we can reuse it

00:45:56,860 --> 00:46:02,440
a river and saying this this is

00:46:00,190 --> 00:46:05,380
currently not officially supported

00:46:02,440 --> 00:46:08,500
because in this case the bundle becomes

00:46:05,380 --> 00:46:11,290
very big even though I show you how to

00:46:08,500 --> 00:46:13,660
deal with this and I will show you how

00:46:11,290 --> 00:46:17,020
you can solve this issue with the big

00:46:13,660 --> 00:46:19,090
bundle sizes in future for this we need

00:46:17,020 --> 00:46:21,970
three steps first of all we need to

00:46:19,090 --> 00:46:24,550
create an custom application for the

00:46:21,970 --> 00:46:26,440
custom elements and then we need to

00:46:24,550 --> 00:46:29,020
compile this application to a

00:46:26,440 --> 00:46:31,960
self-contained bundle and then we need

00:46:29,020 --> 00:46:37,960
to load this bundle into our consuming

00:46:31,960 --> 00:46:41,230
application I have already prepared an

00:46:37,960 --> 00:46:44,140
own application for my external - what

00:46:41,230 --> 00:46:49,330
I'll this application is just providing

00:46:44,140 --> 00:46:53,080
this and only test I'll let us have a

00:46:49,330 --> 00:46:55,420
look into the source code of it to be

00:46:53,080 --> 00:46:58,690
more precise let's have a look into its

00:46:55,420 --> 00:47:00,790
app module and here you see something

00:46:58,690 --> 00:47:05,050
that might look quite familiar to you

00:47:00,790 --> 00:47:07,960
I'm defining the external - bottle

00:47:05,050 --> 00:47:10,090
component in here and it also goes as

00:47:07,960 --> 00:47:12,640
mentioned before into the entry

00:47:10,090 --> 00:47:15,190
component section this is nothing new

00:47:12,640 --> 00:47:18,580
but when you look at this you will see

00:47:15,190 --> 00:47:21,190
something that is not quite usual have

00:47:18,580 --> 00:47:24,460
you seen something like this before who

00:47:21,190 --> 00:47:28,030
has seen something like this we don't

00:47:24,460 --> 00:47:30,250
have any bootstrap components because we

00:47:28,030 --> 00:47:33,100
don't want Angola to put

00:47:30,250 --> 00:47:35,890
threat an angular component when it

00:47:33,100 --> 00:47:39,100
starts we just want to have a bunch of

00:47:35,890 --> 00:47:42,430
custom elements so this here is empty

00:47:39,100 --> 00:47:44,890
but angular is saying hey EDA I am

00:47:42,430 --> 00:47:45,730
bootstrapping or you are bootstrapping

00:47:44,890 --> 00:47:48,610
yourself

00:47:45,730 --> 00:47:51,970
that means when I don't have a bootstrap

00:47:48,610 --> 00:47:55,780
component I have to provide this ng to

00:47:51,970 --> 00:47:58,540
bootstrap function this method here just

00:47:55,780 --> 00:48:01,720
to bootstrap something in an manual way

00:47:58,540 --> 00:48:04,330
and this is where the magic for creating

00:48:01,720 --> 00:48:06,850
my angular component goes in or to be

00:48:04,330 --> 00:48:09,580
more precise for creating my custom

00:48:06,850 --> 00:48:11,860
element I'm holding one more time create

00:48:09,580 --> 00:48:14,770
custom element I'm passing in my

00:48:11,860 --> 00:48:16,780
external - fatale component the custom

00:48:14,770 --> 00:48:20,400
element comes out and then I'm

00:48:16,780 --> 00:48:25,720
registering this with the browser

00:48:20,400 --> 00:48:26,770
okay so then we try to build this using

00:48:25,720 --> 00:48:30,040
ng pelt

00:48:26,770 --> 00:48:34,600
we will see that we get a lot of bundles

00:48:30,040 --> 00:48:44,950
and we see that using the CLI is

00:48:34,600 --> 00:48:47,730
sometimes a exercise in patience run

00:48:44,950 --> 00:48:47,730
Forrest run

00:48:50,600 --> 00:48:58,410
and the last miles are the hardest ones

00:48:54,120 --> 00:49:00,540
yeah yuria we got a lot of panels and

00:48:58,410 --> 00:49:03,180
this is a good thing for an ordinary

00:49:00,540 --> 00:49:06,570
single page application this is not a

00:49:03,180 --> 00:49:09,390
good thing for a dashpot I'll for a tiny

00:49:06,570 --> 00:49:12,510
bit yet no one will use this if they

00:49:09,390 --> 00:49:15,690
have to include all those bundles and so

00:49:12,510 --> 00:49:18,630
it is a good thing that my side project

00:49:15,690 --> 00:49:23,390
and she expelled Plus which I have

00:49:18,630 --> 00:49:27,420
installed before has the single bundle

00:49:23,390 --> 00:49:30,810
flag and when we are using it we just

00:49:27,420 --> 00:49:33,180
get one and only one bundle so let me

00:49:30,810 --> 00:49:37,260
run this in the backgrounds because we

00:49:33,180 --> 00:49:39,180
don't have time and windows is really

00:49:37,260 --> 00:49:41,940
good with executing stuff in the

00:49:39,180 --> 00:49:44,670
background trust me meanwhile I show you

00:49:41,940 --> 00:49:46,590
how to load this bundle for the

00:49:44,670 --> 00:49:49,470
preparation of this workshop I have

00:49:46,590 --> 00:49:50,210
copied this bundle into our assets

00:49:49,470 --> 00:49:52,680
folder

00:49:50,210 --> 00:49:55,440
during the next exercise you will

00:49:52,680 --> 00:49:57,600
discover it to be part of the assets

00:49:55,440 --> 00:49:59,970
folder perhaps and finding it here is

00:49:57,600 --> 00:50:02,820
the assets folder and when we scroll

00:49:59,970 --> 00:50:03,540
down we have the external - quartile

00:50:02,820 --> 00:50:06,960
pandal

00:50:03,540 --> 00:50:09,510
it contains some beautiful lines of

00:50:06,960 --> 00:50:12,690
ikana script 5 code isn't it beautiful

00:50:09,510 --> 00:50:15,300
ok let's go away and let's load this now

00:50:12,690 --> 00:50:19,830
for this I'm switching over to and

00:50:15,300 --> 00:50:23,160
prepared external - port external -

00:50:19,830 --> 00:50:27,090
bottle service and here I will implement

00:50:23,160 --> 00:50:29,250
a simple script loader first of all I'm

00:50:27,090 --> 00:50:31,650
checking whether this bundle has been

00:50:29,250 --> 00:50:34,500
loaded if it has already been loaded I'm

00:50:31,650 --> 00:50:36,840
doing nothing I'm really good when it

00:50:34,500 --> 00:50:38,970
comes to doing nothing otherwise I have

00:50:36,840 --> 00:50:41,520
to load my script and for this I'm

00:50:38,970 --> 00:50:43,980
implementing a simple script loader the

00:50:41,520 --> 00:50:48,090
simplest one you can get on this planet

00:50:43,980 --> 00:50:54,810
I'm creating a new script element and

00:50:48,090 --> 00:50:58,290
new script element then I'm assigning to

00:50:54,810 --> 00:51:01,920
the script element source which points

00:50:58,290 --> 00:51:02,500
to my external - quad bundle just let me

00:51:01,920 --> 00:51:12,430
cop

00:51:02,500 --> 00:51:17,800
their relative path Chuck let me think

00:51:12,430 --> 00:51:21,130
twice this is not the right file where

00:51:17,800 --> 00:51:26,050
is my bundle here it is let me copy the

00:51:21,130 --> 00:51:31,270
real relative path this looks better and

00:51:26,050 --> 00:51:33,640
now let's change this slash by FY

00:51:31,270 --> 00:51:36,849
backslash let's exchange the backslash

00:51:33,640 --> 00:51:39,580
with a forward slash after this I can

00:51:36,849 --> 00:51:44,320
add everything to the body of my

00:51:39,580 --> 00:51:48,700
document a banth child script this is my

00:51:44,320 --> 00:51:52,060
simple script loader here okay let's

00:51:48,700 --> 00:51:53,140
move to my application and now if

00:51:52,060 --> 00:51:57,310
everything works

00:51:53,140 --> 00:51:59,830
I should get my external - but I'll okay

00:51:57,310 --> 00:52:03,609
somehow I've screwed it up

00:51:59,830 --> 00:52:10,859
at external what's going on here let's

00:52:03,609 --> 00:52:15,420
reload the page reboot is good no

00:52:10,859 --> 00:52:15,420
nothing works yeah yeah here it is whoo

00:52:15,619 --> 00:52:23,539
whoo my nerves I tell you something yeah

00:52:20,599 --> 00:52:29,329
so my script loader seems to work and I

00:52:23,539 --> 00:52:31,640
can add my elements to the page nice

00:52:29,329 --> 00:52:33,890
thing as mentioned before this is not

00:52:31,640 --> 00:52:36,729
officially supported this is probably

00:52:33,890 --> 00:52:39,619
what you want to have when you are using

00:52:36,729 --> 00:52:42,079
elements because probably you want to

00:52:39,619 --> 00:52:44,359
load it into another application it's

00:52:42,079 --> 00:52:46,999
not supported because of pandal size I

00:52:44,359 --> 00:52:50,420
will talk about this after the next

00:52:46,999 --> 00:52:56,630
exercise but first of all let's come to

00:52:50,420 --> 00:53:00,229
the next exercise which is about loading

00:52:56,630 --> 00:53:04,039
an external web component if you need

00:53:00,229 --> 00:53:05,920
anything just reach out to me I think we

00:53:04,039 --> 00:53:08,690
have a lot of winners and no losers

00:53:05,920 --> 00:53:14,950
everyone almost everyone did this

00:53:08,690 --> 00:53:14,950
example concrete's on this once again

00:53:15,460 --> 00:53:22,549
and as mentioned before the biggest

00:53:18,079 --> 00:53:25,430
drawback of this is the bundle size when

00:53:22,549 --> 00:53:32,390
we look at the network tab and when we

00:53:25,430 --> 00:53:39,349
reload everything and when I'm clicking

00:53:32,390 --> 00:53:42,349
at external than locators 426 kilobytes

00:53:39,349 --> 00:53:46,160
this is not little this is really not

00:53:42,349 --> 00:53:48,680
little so if you get paid by the amounts

00:53:46,160 --> 00:53:51,589
of bundle size as you are producing then

00:53:48,680 --> 00:53:54,769
this is good but otherwise I would not

00:53:51,589 --> 00:53:58,940
recommend this and now I want to show

00:53:54,769 --> 00:54:03,609
you why this is the case and also how to

00:53:58,940 --> 00:54:06,589
shrink your bundles I like this guy so

00:54:03,609 --> 00:54:09,469
as a matter of fact currently when we

00:54:06,589 --> 00:54:12,440
create an external bundle we get angular

00:54:09,469 --> 00:54:16,849
rx chess and all the libraries bundled

00:54:12,440 --> 00:54:19,219
into it ie will help a lot because Ivy

00:54:16,849 --> 00:54:22,249
at least in theory can't down level

00:54:19,219 --> 00:54:24,799
everything to code that is quite near to

00:54:22,249 --> 00:54:28,520
the dome that means we will not need

00:54:24,799 --> 00:54:30,020
much of Angola anymore a special

00:54:28,520 --> 00:54:32,900
especially when it comes to web

00:54:30,020 --> 00:54:35,870
components saying this div integration

00:54:32,900 --> 00:54:39,020
is a post angular 8 thing it is not

00:54:35,870 --> 00:54:42,920
ready yet but in the future this will

00:54:39,020 --> 00:54:45,590
help a lot that means we can land back

00:54:42,920 --> 00:54:49,130
and just wait until this feature is

00:54:45,590 --> 00:54:51,320
shipped on this position during the

00:54:49,130 --> 00:54:55,250
exercise I want to sides my good

00:54:51,320 --> 00:54:58,430
colleague Minkel Minkel tweeted a very

00:54:55,250 --> 00:55:00,980
important thing in the Samba it is about

00:54:58,430 --> 00:55:04,430
expectation management if you ask me

00:55:00,980 --> 00:55:09,110
Minkus a div will enable new features

00:55:04,430 --> 00:55:12,710
and it will come step by step and it may

00:55:09,110 --> 00:55:16,250
reduce your bundle sizes but do not

00:55:12,710 --> 00:55:18,940
expect wonders do not expect wonders it

00:55:16,250 --> 00:55:23,030
will not make your JavaScript disappear

00:55:18,940 --> 00:55:25,880
so lets me take a picture of this so I

00:55:23,030 --> 00:55:29,870
can show to mink coat that I presented

00:55:25,880 --> 00:55:35,480
this perhaps perhaps he gives me a drink

00:55:29,870 --> 00:55:37,910
or something okay so what did mink who

00:55:35,480 --> 00:55:40,670
wanted to say here well mink who wanted

00:55:37,910 --> 00:55:43,640
to say that Ivy does a big deal when it

00:55:40,670 --> 00:55:46,100
comes to you I paste widgets in this

00:55:43,640 --> 00:55:47,690
case we can down label everything to

00:55:46,100 --> 00:55:50,570
something that is quite close to

00:55:47,690 --> 00:55:53,240
JavaScript when it comes to libraries

00:55:50,570 --> 00:55:55,490
then it will not make those libraries

00:55:53,240 --> 00:55:58,850
disappear so we will stick with the

00:55:55,490 --> 00:56:01,490
bundle sizes of those libraries angular

00:55:58,850 --> 00:56:05,840
forms for instance or angular righta or

00:56:01,490 --> 00:56:08,420
even angle a common HTTP this is library

00:56:05,840 --> 00:56:11,240
based and so I we cannot do much of

00:56:08,420 --> 00:56:14,750
course we can do tree shaking but we

00:56:11,240 --> 00:56:17,180
shaking is also possible nowadays what

00:56:14,750 --> 00:56:20,000
you can do is something like this you

00:56:17,180 --> 00:56:22,850
can load the libraries once into your

00:56:20,000 --> 00:56:25,970
browser and then you can reuse those

00:56:22,850 --> 00:56:28,250
libraries within your bundles that means

00:56:25,970 --> 00:56:31,490
we are doing what we have done back then

00:56:28,250 --> 00:56:34,040
with jQuery be load it into a global

00:56:31,490 --> 00:56:37,190
window object and then all the bundles

00:56:34,040 --> 00:56:40,940
will reuse it for this we have to tweak

00:56:37,190 --> 00:56:42,290
the CLI a bit and to tweak it you can

00:56:40,940 --> 00:56:46,310
also use an check

00:56:42,290 --> 00:56:48,290
built plus in this case the produce

00:56:46,310 --> 00:56:51,230
bundles will reference the VIN the

00:56:48,290 --> 00:56:53,990
object saying this this increases the

00:56:51,230 --> 00:56:56,690
complexity of your project and this also

00:56:53,990 --> 00:56:59,900
leads to a non-default build so I would

00:56:56,690 --> 00:57:03,380
just use it when really necessary but

00:56:59,900 --> 00:57:08,810
let me show you how this can be used if

00:57:03,380 --> 00:57:12,470
you really want to use this then go to

00:57:08,810 --> 00:57:15,080
your console of course shorten your

00:57:12,470 --> 00:57:18,650
prompt this prevents that you are

00:57:15,080 --> 00:57:21,590
driving crazy and then check in

00:57:18,650 --> 00:57:24,800
everything you have very important so

00:57:21,590 --> 00:57:26,830
now we have to change our project a bit

00:57:24,800 --> 00:57:30,890
that's why I'm checking everything in

00:57:26,830 --> 00:57:40,040
workshop ok

00:57:30,890 --> 00:57:40,790
I'm creating a new branch and now I'm

00:57:40,040 --> 00:57:45,370
saying

00:57:40,790 --> 00:57:52,670
andshe generate and she expelled plus

00:57:45,370 --> 00:57:55,610
column externals externals and now this

00:57:52,670 --> 00:57:57,980
kinetic is changing my project ok I've

00:57:55,610 --> 00:58:02,540
already done this so let's do it with -

00:57:57,980 --> 00:58:05,210
- force which means it's redone yeah as

00:58:02,540 --> 00:58:09,490
you see here it changes my project so

00:58:05,210 --> 00:58:12,740
that this operation mode is implemented

00:58:09,490 --> 00:58:15,740
it for instance creates a backpack

00:58:12,740 --> 00:58:18,620
externals chess file let's have a look

00:58:15,740 --> 00:58:21,080
into this backpack externals chess file

00:58:18,620 --> 00:58:24,800
it is just a partial backpack

00:58:21,080 --> 00:58:28,040
configuration file that says hey expect

00:58:24,800 --> 00:58:31,550
angular core within the window object

00:58:28,040 --> 00:58:35,060
here within window dot and XI dot core

00:58:31,550 --> 00:58:37,970
and expect angle a common within the

00:58:35,060 --> 00:58:40,730
window object air within window dot and

00:58:37,970 --> 00:58:44,030
she taught common and so on and so forth

00:58:40,730 --> 00:58:46,690
and this means I just need to load this

00:58:44,030 --> 00:58:49,580
libraries once and each and every other

00:58:46,690 --> 00:58:52,520
self-contained bundle can reuse this

00:58:49,580 --> 00:58:55,520
stuff this is how we did it with jQuery

00:58:52,520 --> 00:58:59,990
this is how it works

00:58:55,520 --> 00:59:04,580
sometimes with react and this is how it

00:58:59,990 --> 00:59:06,890
works sometimes with in Angola you

00:59:04,580 --> 00:59:07,910
normally don't do this but here it comes

00:59:06,890 --> 00:59:11,270
in handy

00:59:07,910 --> 00:59:14,030
so let us and she built this project and

00:59:11,270 --> 00:59:20,120
she builds Minos Minos project now let's

00:59:14,030 --> 00:59:22,490
use a script npm run build externals it

00:59:20,120 --> 00:59:25,100
is also generated and it contains all

00:59:22,490 --> 00:59:27,290
those parameters I don't want to write

00:59:25,100 --> 00:59:30,740
by hand in front of an audience you know

00:59:27,290 --> 00:59:35,210
the human brain does not work when

00:59:30,740 --> 00:59:39,970
programming in front of people and now

00:59:35,210 --> 00:59:43,700
let's cross fingers and hey look at this

00:59:39,970 --> 00:59:46,760
nine dots something hey ignore the poly

00:59:43,700 --> 00:59:49,640
fields nine dot something k that really

00:59:46,760 --> 00:59:52,370
shows that everything is now compiled

00:59:49,640 --> 00:59:55,180
into a bundle that does not contain

00:59:52,370 --> 01:00:00,500
angle at all and so this might be

00:59:55,180 --> 01:00:03,200
already usable nowadays saying this I

01:00:00,500 --> 01:00:06,500
want to emphasize one more time this is

01:00:03,200 --> 01:00:10,280
not an official solution but even though

01:00:06,500 --> 01:00:13,130
it can come in handy for specific use

01:00:10,280 --> 01:00:16,760
cases okay

01:00:13,130 --> 01:00:20,740
been talking about bundle sizes we could

01:00:16,760 --> 01:00:24,770
also talk should also talk about zones

01:00:20,740 --> 01:00:28,640
who was in the talk of Maxim this

01:00:24,770 --> 01:00:31,460
morning some of you he also talked about

01:00:28,640 --> 01:00:34,670
this topic here I am giving you another

01:00:31,460 --> 01:00:37,610
view on this topic so first of all why

01:00:34,670 --> 01:00:40,460
do we need so much at all well the short

01:00:37,610 --> 01:00:43,850
answer is Sanchez is used by Angola for

01:00:40,460 --> 01:00:47,090
change detection and what it does is it

01:00:43,850 --> 01:00:50,330
patches each and every browser event so

01:00:47,090 --> 01:00:52,610
that it can notify Angola that an event

01:00:50,330 --> 01:00:55,940
handler has run and that means Angola

01:00:52,610 --> 01:00:58,730
has to do change detection so it gives

01:00:55,940 --> 01:01:02,510
Angola every time a hint when change

01:00:58,730 --> 01:01:06,020
detection needs to be run why is this

01:01:02,510 --> 01:01:09,140
bad for web components why it is bad

01:01:06,020 --> 01:01:13,010
because it has more than 100

01:01:09,140 --> 01:01:16,029
kay and no one wants to use our free

01:01:13,010 --> 01:01:19,089
kilobyte state time picker together with

01:01:16,029 --> 01:01:22,099
100 kilobytes on Ches implementation

01:01:19,089 --> 01:01:24,829
okay when she sipped and minified it has

01:01:22,099 --> 01:01:29,420
10k but this is still too much for a

01:01:24,829 --> 01:01:31,910
free kilobyte date/time bacon it is

01:01:29,420 --> 01:01:36,109
somehow awkward to force the consumers

01:01:31,910 --> 01:01:39,109
into using this and saying this there

01:01:36,109 --> 01:01:42,680
are issues with native async/await and

01:01:39,109 --> 01:01:46,760
song chess so don't try to use angular

01:01:42,680 --> 01:01:49,190
current live with ACMA script 2017 the

01:01:46,760 --> 01:01:53,299
seal I will give you a warning hopefully

01:01:49,190 --> 01:01:56,390
because Sanchez cannot patch native

01:01:53,299 --> 01:01:57,380
async/await it can patch the emulated

01:01:56,390 --> 01:02:00,589
async/await

01:01:57,380 --> 01:02:03,140
you are getting when using async f8 and

01:02:00,589 --> 01:02:07,430
across Europe 2015 or 16 as a

01:02:03,140 --> 01:02:11,660
compilation target so there will be a

01:02:07,430 --> 01:02:13,910
future where Sanchez will be optional so

01:02:11,660 --> 01:02:17,359
the question is how can we exclude this

01:02:13,910 --> 01:02:21,680
and you can do this by just measuring

01:02:17,359 --> 01:02:24,460
this noobs own nuke means no operation

01:02:21,680 --> 01:02:27,049
which is us just a dummy zone

01:02:24,460 --> 01:02:30,200
implementation that has nothing it is

01:02:27,049 --> 01:02:33,289
the month ret between among the zone

01:02:30,200 --> 01:02:33,829
implementation it is doing nothing funny

01:02:33,289 --> 01:02:36,259
Kai

01:02:33,829 --> 01:02:38,599
so what are the consequences the

01:02:36,259 --> 01:02:42,619
consequences are you need to do change

01:02:38,599 --> 01:02:45,289
detection by hand and that means you can

01:02:42,619 --> 01:02:48,410
do change detection using observables or

01:02:45,289 --> 01:02:51,049
just by triggering that change detection

01:02:48,410 --> 01:02:54,410
directly by hands by using the change

01:02:51,049 --> 01:02:56,259
detection ref and saying this the

01:02:54,410 --> 01:02:58,880
angular team is currently discussing

01:02:56,259 --> 01:03:01,640
possible solutions for this operation

01:02:58,880 --> 01:03:03,829
mode currently there is not a official

01:03:01,640 --> 01:03:06,650
solution for this but the angular team

01:03:03,829 --> 01:03:09,500
is thinking about this and hopefully in

01:03:06,650 --> 01:03:14,980
the next time we will get an official

01:03:09,500 --> 01:03:14,980
solution let me show you what it means

01:03:16,930 --> 01:03:25,380
let's go into our source code let's go

01:03:20,740 --> 01:03:29,430
into our external - quad style component

01:03:25,380 --> 01:03:32,770
and here you see I am providing

01:03:29,430 --> 01:03:36,880
everything here as a subject I'm going

01:03:32,770 --> 01:03:39,730
with a replace object-- normally the

01:03:36,880 --> 01:03:41,950
subject would be part of a store or it

01:03:39,730 --> 01:03:44,560
would be part of a service for the sake

01:03:41,950 --> 01:03:48,400
of simplicity it's your part of the

01:03:44,560 --> 01:03:54,660
component itself this is just for the

01:03:48,400 --> 01:03:55,840
sake of simplicity don't do this at home

01:03:54,660 --> 01:03:58,930
okay

01:03:55,840 --> 01:04:03,180
so every time I'm loading new data

01:03:58,930 --> 01:04:07,510
I'm just notifying this guy here this

01:04:03,180 --> 01:04:12,220
subject and I am sending the new data to

01:04:07,510 --> 01:04:15,700
the subject using next in the template

01:04:12,220 --> 01:04:19,110
of this external - what I'll component

01:04:15,700 --> 01:04:23,050
we would now normally use the async pipe

01:04:19,110 --> 01:04:26,860
we've got pipe theta Tala - async but we

01:04:23,050 --> 01:04:30,370
know something async demands upon some

01:04:26,860 --> 01:04:33,700
GS async does not work without Sanchez

01:04:30,370 --> 01:04:36,550
and that's why I've written an own pipe

01:04:33,700 --> 01:04:39,580
here it's called a push pipe the push

01:04:36,550 --> 01:04:41,830
pipe is an experimental type and to be

01:04:39,580 --> 01:04:44,800
honest I have not written it by myself I

01:04:41,830 --> 01:04:47,470
have borrowed it from another project it

01:04:44,800 --> 01:04:50,080
is just a prototype someone in the

01:04:47,470 --> 01:04:52,510
angular team has published this as a

01:04:50,080 --> 01:04:55,180
proof of concept as a possible proof of

01:04:52,510 --> 01:04:59,050
concept a version of the async pipe that

01:04:55,180 --> 01:04:59,800
does not need sanchez and as we have

01:04:59,050 --> 01:05:03,340
seen before

01:04:59,800 --> 01:05:06,840
when we included this external - fatale

01:05:03,340 --> 01:05:12,450
component it really works

01:05:06,840 --> 01:05:16,210
besides this we could also do it by hand

01:05:12,450 --> 01:05:19,990
we could you know this perhaps just get

01:05:16,210 --> 01:05:23,980
hold of the change detector F change

01:05:19,990 --> 01:05:27,490
that back to our F using dependency

01:05:23,980 --> 01:05:30,490
injection and then we could call here

01:05:27,490 --> 01:05:34,150
this dot change detector

01:05:30,490 --> 01:05:36,849
that the tech changes so that's the

01:05:34,150 --> 01:05:40,119
change detection runs this is the

01:05:36,849 --> 01:05:45,280
completely manual strategy and there are

01:05:40,119 --> 01:05:49,359
also other ideas one idea the team lead

01:05:45,280 --> 01:05:51,880
of angolan has presented at a meet-up it

01:05:49,359 --> 01:05:54,430
was part of the answer to a question to

01:05:51,880 --> 01:05:57,190
be more precise precise is something

01:05:54,430 --> 01:06:01,930
like set properties something we know

01:05:57,190 --> 01:06:04,089
from react if we had something like this

01:06:01,930 --> 01:06:07,240
we could say okay I'm setting the a

01:06:04,089 --> 01:06:09,940
property to one the B property to do the

01:06:07,240 --> 01:06:12,430
C property to free and then guess three

01:06:09,940 --> 01:06:14,980
times what set props is doing it is

01:06:12,430 --> 01:06:17,770
setting all those properties plus it is

01:06:14,980 --> 01:06:19,780
giving the change detector a kick so

01:06:17,770 --> 01:06:23,349
that it is performing change detection

01:06:19,780 --> 01:06:27,490
280 checks and so on it is also another

01:06:23,349 --> 01:06:29,920
idea so nothing is fixed now but I've

01:06:27,490 --> 01:06:32,770
just want to show you it is a good idea

01:06:29,920 --> 01:06:34,900
to exclude some chess nowadays you can

01:06:32,770 --> 01:06:37,030
do everything by hand and in future

01:06:34,900 --> 01:06:45,730
there will be some support by the

01:06:37,030 --> 01:06:49,420
angular team okay let's go one step

01:06:45,730 --> 01:06:50,920
further let's come to the last topic I

01:06:49,420 --> 01:06:53,589
want to present you

01:06:50,920 --> 01:06:56,740
it is about content protection and a

01:06:53,589 --> 01:07:00,250
slot API who has used content

01:06:56,740 --> 01:07:03,180
projections of our okay cool who has

01:07:00,250 --> 01:07:05,170
used transclusion in angularjs

01:07:03,180 --> 01:07:09,220
transclusion is more or less the same

01:07:05,170 --> 01:07:12,160
okay so as a matter of fact Angola

01:07:09,220 --> 01:07:14,589
itself supports content projection but

01:07:12,160 --> 01:07:17,680
this is not the content projection of

01:07:14,589 --> 01:07:20,770
web components web components have their

01:07:17,680 --> 01:07:23,290
own style of content projection that

01:07:20,770 --> 01:07:26,800
means we have to use a different API

01:07:23,290 --> 01:07:29,619
here and as this expression within the

01:07:26,800 --> 01:07:33,339
parantesis tells you this is part of the

01:07:29,619 --> 01:07:38,530
shadow Dom standard so what I want to do

01:07:33,339 --> 01:07:43,030
here is I want to write depth pane a

01:07:38,530 --> 01:07:43,280
panel a panel that takes some data for

01:07:43,030 --> 01:07:48,280
in

01:07:43,280 --> 01:07:51,680
stands at idle or some mark up with some

01:07:48,280 --> 01:07:55,850
formats here the ipsum here in lorem

01:07:51,680 --> 01:07:59,950
ipsum is pulled for instance and as you

01:07:55,850 --> 01:08:03,200
see there is also some small print that

01:07:59,950 --> 01:08:07,130
stuff projected in here this is what I

01:08:03,200 --> 01:08:09,530
want to do and to accomplish this I have

01:08:07,130 --> 01:08:12,020
to define placeholders within the

01:08:09,530 --> 01:08:15,500
template of my component and those

01:08:12,020 --> 01:08:19,310
placeholders are done or defined using

01:08:15,500 --> 01:08:21,740
this lot tack in traditional angular you

01:08:19,310 --> 01:08:24,230
would go with ng content here we are

01:08:21,740 --> 01:08:27,650
going with slot this is one of the

01:08:24,230 --> 01:08:30,560
changes you can have as many slots as

01:08:27,650 --> 01:08:34,370
you want to have you can have one slot

01:08:30,560 --> 01:08:37,670
without the name and n slots with a name

01:08:34,370 --> 01:08:39,980
for instance with the name food and then

01:08:37,670 --> 01:08:43,190
then called in your component you can

01:08:39,980 --> 01:08:46,640
define which goes into the main slot and

01:08:43,190 --> 01:08:49,370
which goes into a named slot here

01:08:46,640 --> 01:08:52,549
everything that is not part of a slot

01:08:49,370 --> 01:08:55,310
element goes into the main slot this is

01:08:52,549 --> 01:09:00,950
this orange lorem ipsum with some tags

01:08:55,310 --> 01:09:03,500
and the rest is tacked web slot equals

01:09:00,950 --> 01:09:07,339
footer and this of course goes into this

01:09:03,500 --> 01:09:12,350
photo slot some extra info with appalled

01:09:07,339 --> 01:09:15,260
extra saying this to use the slot API

01:09:12,350 --> 01:09:18,049
you need shared on one and you need to

01:09:15,260 --> 01:09:21,200
set few encapsulation to shadow down for

01:09:18,049 --> 01:09:24,799
this and that means it will not work

01:09:21,200 --> 01:09:27,710
with Internet Explorer unless you are

01:09:24,799 --> 01:09:29,540
loading a polyfill for this but we on

01:09:27,710 --> 01:09:33,109
the safe side here we have already

01:09:29,540 --> 01:09:41,270
loaded a polyfill for this very standard

01:09:33,109 --> 01:09:44,470
okay let's try this out for this I'm

01:09:41,270 --> 01:09:49,819
switching back to my example I'm

01:09:44,470 --> 01:09:53,270
switching to a tab component and this

01:09:49,819 --> 01:09:55,840
tab component needs some placeholders I

01:09:53,270 --> 01:10:01,450
want to have the main placeholder here

01:09:55,840 --> 01:10:07,720
 and I want to have the food ablaze

01:10:01,450 --> 01:10:10,900
hole that they're named food okay this

01:10:07,720 --> 01:10:13,240
is the first part of this exercise then

01:10:10,900 --> 01:10:16,060
I'm looking in the module of this step

01:10:13,240 --> 01:10:18,190
component and here you see I have this

01:10:16,060 --> 01:10:21,100
magic codes we have written several

01:10:18,190 --> 01:10:25,000
times within this exercise this magic ho

01:10:21,100 --> 01:10:28,210
test that exposes our component as a

01:10:25,000 --> 01:10:30,580
custom element so we are getting my taps

01:10:28,210 --> 01:10:34,290
we will look into this later and my

01:10:30,580 --> 01:10:38,230
depth okay and now let's use this my tap

01:10:34,290 --> 01:10:42,690
for this I'm switching to a taps page

01:10:38,230 --> 01:10:47,620
component and here I will call my tap

01:10:42,690 --> 01:10:52,630
with a title for the title I'm using

01:10:47,620 --> 01:10:58,480
data binding and she comes 2019 lower

01:10:52,630 --> 01:11:02,370
Ram four times and then I am defining

01:10:58,480 --> 01:11:08,410
here the content for the footer slot

01:11:02,370 --> 01:11:12,300
Lauren one time does it work here so let

01:11:08,410 --> 01:11:12,300
me also use a markup here

01:11:13,590 --> 01:11:23,290
Epsom and let us do something crazy let

01:11:19,120 --> 01:11:24,040
us call that - pour tile in there there

01:11:23,290 --> 01:11:26,490
sport

01:11:24,040 --> 01:11:26,490
tile

01:11:34,670 --> 01:11:38,330
let's repeat this

01:11:42,050 --> 01:11:48,110
Angola Connect who is going to Angola

01:11:44,900 --> 01:11:49,480
connect in London okay perhaps some of

01:11:48,110 --> 01:11:52,700
your booking

01:11:49,480 --> 01:11:56,600
okay those are my taps let's have a look

01:11:52,700 --> 01:12:00,880
into the browser where is my browser

01:11:56,600 --> 01:12:04,040
here it is go away

01:12:00,880 --> 01:12:06,890
taps yeah and as you see here I'm

01:12:04,040 --> 01:12:10,550
getting my taps there is some prepared

01:12:06,890 --> 01:12:13,370
styling and my mock-up is projected in

01:12:10,550 --> 01:12:16,640
doodle steps the mock-up is placed into

01:12:13,370 --> 01:12:19,670
those placeholders I'm even projecting

01:12:16,640 --> 01:12:23,000
my - what I'll component here which is

01:12:19,670 --> 01:12:25,280
kind of nice isn't it but what I really

01:12:23,000 --> 01:12:28,100
want to have is a depth pane adept pane

01:12:25,280 --> 01:12:31,010
that is just displaying one of those

01:12:28,100 --> 01:12:33,350
items one of those steps eat at this one

01:12:31,010 --> 01:12:36,800
and she comes or that one angular

01:12:33,350 --> 01:12:39,320
connect and for this I have prepared

01:12:36,800 --> 01:12:44,420
another component it's called the taps

01:12:39,320 --> 01:12:47,690
component and the steps component also

01:12:44,420 --> 01:12:51,770
has a slot slot that this place all

01:12:47,690 --> 01:12:54,350
accepts all its child elements let's use

01:12:51,770 --> 01:13:01,700
this I'm switching over to my taps page

01:12:54,350 --> 01:13:06,470
component here I'm using my taps this is

01:13:01,700 --> 01:13:09,580
the name and because of content

01:13:06,470 --> 01:13:13,310
projection all the children are

01:13:09,580 --> 01:13:15,860
projected one more time okay this is not

01:13:13,310 --> 01:13:17,540
exactly what I want to have okay I have

01:13:15,860 --> 01:13:20,270
wrapped everything with the taps

01:13:17,540 --> 01:13:23,000
component but it still shows all the

01:13:20,270 --> 01:13:25,610
children but and now need and this leads

01:13:23,000 --> 01:13:28,700
us to the slot API the browser-based API

01:13:25,610 --> 01:13:30,830
I'm talking here about is to fetch all

01:13:28,700 --> 01:13:33,590
the child components all that tap

01:13:30,830 --> 01:13:36,290
components and then to decide which of

01:13:33,590 --> 01:13:41,300
the steps shall be displayed and which

01:13:36,290 --> 01:13:44,180
of the steps shall not be displayed for

01:13:41,300 --> 01:13:47,720
this I'm going to my tabs component tabs

01:13:44,180 --> 01:13:50,690
component and here I'm using something

01:13:47,720 --> 01:13:53,660
that might be new for you a slot change

01:13:50,690 --> 01:13:55,639
event this is part of the sheraton

01:13:53,660 --> 01:13:59,030
standard for content

01:13:55,639 --> 01:14:01,399
traction slot change shall delegate to

01:13:59,030 --> 01:14:05,800
slot change which is a method in my

01:14:01,399 --> 01:14:09,649
component it gets the event object and

01:14:05,800 --> 01:14:13,039
in here in slot change I can use event

01:14:09,649 --> 01:14:15,739
or target dot assigned nodes to get all

01:14:13,039 --> 01:14:18,590
the projected notes all the child nodes

01:14:15,739 --> 01:14:21,860
here with traditional angular you would

01:14:18,590 --> 01:14:25,099
just use child nodes content children

01:14:21,860 --> 01:14:28,880
that's the name so here I'm getting my

01:14:25,099 --> 01:14:31,969
taps and all the other stuff that was

01:14:28,880 --> 01:14:37,579
projected and then I putting my taps

01:14:31,969 --> 01:14:39,919
into this spot these dot steps this stop

01:14:37,579 --> 01:14:43,309
taps is just an array with all the taps

01:14:39,919 --> 01:14:46,519
components and if you look into my mark

01:14:43,309 --> 01:14:49,489
up here my mock-up is iterating all the

01:14:46,519 --> 01:14:52,039
taps let's tap off taps and then it is

01:14:49,489 --> 01:14:56,119
displaying a hyperlink to activate this

01:14:52,039 --> 01:15:00,919
or get them let's look into this if it

01:14:56,119 --> 01:15:03,409
works here it seems to work but now we

01:15:00,919 --> 01:15:08,869
just need to define which of those steps

01:15:03,409 --> 01:15:12,159
is displayed for this I'm calling an

01:15:08,869 --> 01:15:15,860
activate function they stop activate

01:15:12,159 --> 01:15:18,079
everything for the first step and what

01:15:15,860 --> 01:15:21,320
is the activate function doing it is

01:15:18,079 --> 01:15:24,979
just iterating through all the tabs for

01:15:21,320 --> 01:15:31,219
each type of taps it is saying hey this

01:15:24,979 --> 01:15:38,659
step is hidden and then I'm displaying

01:15:31,219 --> 01:15:41,959
my tap hidden equals false and now I

01:15:38,659 --> 01:15:45,260
have some way of communicate with my

01:15:41,959 --> 01:15:48,050
child elements but if all just the first

01:15:45,260 --> 01:15:50,510
page is displayed and if I want to

01:15:48,050 --> 01:15:54,079
display another page the other page gets

01:15:50,510 --> 01:15:56,630
displayed I think this example is quite

01:15:54,079 --> 01:15:58,999
nice because it shows several things it

01:15:56,630 --> 01:16:01,179
not only shows how to do content

01:15:58,999 --> 01:16:04,159
projection it also shows how to

01:16:01,179 --> 01:16:05,949
communicate with your children and if

01:16:04,159 --> 01:16:08,119
you are parents then you need

01:16:05,949 --> 01:16:09,239
communicating with children is really

01:16:08,119 --> 01:16:15,180
really

01:16:09,239 --> 01:16:16,860
nowadays okay cool we don't have time

01:16:15,180 --> 01:16:19,290
for this exercise but you have

01:16:16,860 --> 01:16:22,800
documented everything so you can do

01:16:19,290 --> 01:16:28,290
everything later if you feel happy let

01:16:22,800 --> 01:16:30,390
us come to a conclusion we have seen

01:16:28,290 --> 01:16:32,400
that polyfills are important

01:16:30,390 --> 01:16:35,190
without polyfills this will not work

01:16:32,400 --> 01:16:37,710
we've also seen we need this custom

01:16:35,190 --> 01:16:41,070
element scheme we've talked about shadow

01:16:37,710 --> 01:16:43,890
Dom this allows us to isolate our Styles

01:16:41,070 --> 01:16:46,680
we've talked about the Namek le adding

01:16:43,890 --> 01:16:49,530
an element web page this is one of the

01:16:46,680 --> 01:16:52,100
upsides of custom elements we've talked

01:16:49,530 --> 01:16:55,080
about dynamic loading and loading

01:16:52,100 --> 01:16:58,739
external elements external elements are

01:16:55,080 --> 01:17:01,800
quite big nowadays and so we need to use

01:16:58,739 --> 01:17:03,690
tricks like Ivy we've talked about so

01:17:01,800 --> 01:17:06,900
unless change detection and we've talked

01:17:03,690 --> 01:17:09,660
about content projection with lots so

01:17:06,900 --> 01:17:11,940
thanks for being here if you want to

01:17:09,660 --> 01:17:15,030
follow me follow me on Twitter so we can

01:17:11,940 --> 01:17:17,700
keep in contact and you will find all my

01:17:15,030 --> 01:17:20,300
material on my blog have a nice day

01:17:17,700 --> 01:17:20,300
thank you

01:17:25,290 --> 01:17:33,699
you

01:17:27,090 --> 01:17:33,699
[Music]

01:17:39,320 --> 01:17:41,380

YouTube URL: https://www.youtube.com/watch?v=_QU0mpyF7bQ


