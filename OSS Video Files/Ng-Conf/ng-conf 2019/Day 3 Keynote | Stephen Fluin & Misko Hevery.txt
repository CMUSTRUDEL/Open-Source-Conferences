Title: Day 3 Keynote | Stephen Fluin & Misko Hevery
Publication date: 2019-05-04
Playlist: ng-conf 2019
Description: 
	Watch as Stephen Fluin and Misko Hevery discuss how the Angular team embraces openness by sharing the evolution by which features and projects make it into the platform. They discuss how there are many long term opportunities for technologies such as server-side rendering, client-side rehydration, and more granular lazy loading boundaries which the team is exploring to bring developers the fastest possible applications.

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:07,920 --> 00:00:11,170
[Music]

00:00:11,750 --> 00:00:18,180
good morning everyone

00:00:13,559 --> 00:00:20,130
oh yeah so I'm back here for the day

00:00:18,180 --> 00:00:21,769
three keynotes and we have a lot of

00:00:20,130 --> 00:00:24,570
really exciting things to talk about

00:00:21,769 --> 00:00:27,269
because one of the things that we do is

00:00:24,570 --> 00:00:28,500
we really like to try and spend some of

00:00:27,269 --> 00:00:31,380
the time we spend here at ng-conf

00:00:28,500 --> 00:00:33,000
looking forward towards the future and

00:00:31,380 --> 00:00:35,520
that's sometimes a little scary for us

00:00:33,000 --> 00:00:37,230
but so before I get started my name is

00:00:35,520 --> 00:00:39,930
Steven fluid I lead developer relations

00:00:37,230 --> 00:00:41,460
for the Engler team and as always my two

00:00:39,930 --> 00:00:42,629
missions in life are one to help

00:00:41,460 --> 00:00:45,270
developers and businesses be successful

00:00:42,629 --> 00:00:46,980
thank you and second to understand what

00:00:45,270 --> 00:00:48,660
it's like in the real world with the

00:00:46,980 --> 00:00:54,510
real challenges developers face so we

00:00:48,660 --> 00:00:55,590
can reflect those needs onto the team so

00:00:54,510 --> 00:00:57,270
we're gonna start off this morning

00:00:55,590 --> 00:00:59,550
talking a little bit about ideation

00:00:57,270 --> 00:01:00,780
because we do a lot of thinking about

00:00:59,550 --> 00:01:04,290
the problems and the opportunities

00:01:00,780 --> 00:01:05,760
across the angular ecosystem and we want

00:01:04,290 --> 00:01:07,619
to share a little bit about how we think

00:01:05,760 --> 00:01:09,180
about that process and then I want to

00:01:07,619 --> 00:01:09,840
give everyone a status update on some of

00:01:09,180 --> 00:01:11,820
the things that we've talked about

00:01:09,840 --> 00:01:14,700
before and some of the things that are

00:01:11,820 --> 00:01:17,100
going on in our community but I

00:01:14,700 --> 00:01:19,320
personally have a problem right so I

00:01:17,100 --> 00:01:21,570
gave that little intro about what I do

00:01:19,320 --> 00:01:23,159
and what my mission is and one of those

00:01:21,570 --> 00:01:25,080
is help developers be successful as

00:01:23,159 --> 00:01:26,610
angular but this can actually be a

00:01:25,080 --> 00:01:30,210
little bit challenging because

00:01:26,610 --> 00:01:33,060
everything we do is in the open every PR

00:01:30,210 --> 00:01:35,610
every commit is public right we do all

00:01:33,060 --> 00:01:37,680
of our work on github first and then we

00:01:35,610 --> 00:01:39,299
sync it back wherever it needs to go and

00:01:37,680 --> 00:01:41,880
what this means is that sometimes when

00:01:39,299 --> 00:01:43,320
we make commits we send PRS they show up

00:01:41,880 --> 00:01:45,420
on social media or the front page of

00:01:43,320 --> 00:01:47,310
Reddit in the angular sub reddits and

00:01:45,420 --> 00:01:50,009
oftentimes when we see these things

00:01:47,310 --> 00:01:51,750
where they don't have the context of why

00:01:50,009 --> 00:01:53,460
we're doing them and the thoughts behind

00:01:51,750 --> 00:01:55,049
them and that's that's something that

00:01:53,460 --> 00:01:57,060
we're here to talk about today because

00:01:55,049 --> 00:01:59,100
not every line of code that our team

00:01:57,060 --> 00:02:02,130
writes is going to affect you as

00:01:59,100 --> 00:02:03,570
developers or any of our users some of

00:02:02,130 --> 00:02:06,270
the things that we build are just proofs

00:02:03,570 --> 00:02:07,860
of concept some of the time we actually

00:02:06,270 --> 00:02:10,110
in order to innovate and continue to

00:02:07,860 --> 00:02:12,390
evolve the platform have to brainstorm

00:02:10,110 --> 00:02:13,590
we have to come up with ideas try them

00:02:12,390 --> 00:02:15,599
out and see how well they

00:02:13,590 --> 00:02:17,069
work and oftentimes some of the things

00:02:15,599 --> 00:02:19,160
that we're doing are just behind the

00:02:17,069 --> 00:02:21,660
scenes we're changing private api's

00:02:19,160 --> 00:02:24,660
there was an example where there is a

00:02:21,660 --> 00:02:26,640
commit where we renamed ng for ng for of

00:02:24,660 --> 00:02:28,739
but it wasn't the one that everyone uses

00:02:26,640 --> 00:02:30,360
it was a private API there was an

00:02:28,739 --> 00:02:32,220
underlying implementation detail and

00:02:30,360 --> 00:02:33,840
people didn't really understand that

00:02:32,220 --> 00:02:36,690
when we just put that commit out there

00:02:33,840 --> 00:02:39,750
and so I want to present a little bit of

00:02:36,690 --> 00:02:42,390
a framework for thinking about how ideas

00:02:39,750 --> 00:02:45,299
and concepts and capabilities evolve

00:02:42,390 --> 00:02:47,130
when we talk about angular now this is

00:02:45,299 --> 00:02:48,360
not a super formal structure this is

00:02:47,130 --> 00:02:50,010
something we didn't set out to do

00:02:48,360 --> 00:02:51,569
intentionally but it's something that I

00:02:50,010 --> 00:02:52,920
think has evolved naturally and we've

00:02:51,569 --> 00:02:55,200
seen that all of the capabilities that

00:02:52,920 --> 00:02:57,690
angular has have followed this so it

00:02:55,200 --> 00:02:59,250
goes from idea to theory then something

00:02:57,690 --> 00:03:01,560
becomes possible then we try and make it

00:02:59,250 --> 00:03:02,760
easy and eventually we might try and

00:03:01,560 --> 00:03:05,700
make it automatic so I want to go into

00:03:02,760 --> 00:03:08,430
each of these so let's start off talking

00:03:05,700 --> 00:03:12,150
a little bit about ideas on the angular

00:03:08,430 --> 00:03:13,860
team we have a lot of ideas this is this

00:03:12,150 --> 00:03:15,180
is not shouldn't be a surprise we are

00:03:13,860 --> 00:03:16,319
always coming up with hey what if we

00:03:15,180 --> 00:03:18,870
change this what if we change this what

00:03:16,319 --> 00:03:20,760
if we change this and a lot of those

00:03:18,870 --> 00:03:22,440
ideas are really really important to

00:03:20,760 --> 00:03:24,090
understanding kind of where we're going

00:03:22,440 --> 00:03:25,799
and in terms of reacting to the

00:03:24,090 --> 00:03:27,480
community needs but at the heart of an

00:03:25,799 --> 00:03:30,239
idea is an understanding of a problem

00:03:27,480 --> 00:03:31,680
and at this stage we typically have some

00:03:30,239 --> 00:03:33,470
level of knowledge of the various

00:03:31,680 --> 00:03:36,420
approaches that we could be taking and

00:03:33,470 --> 00:03:37,859
sometimes that idea we stay so excited

00:03:36,420 --> 00:03:40,370
about it or someone is so passionate

00:03:37,859 --> 00:03:42,810
about it that it might become a theory

00:03:40,370 --> 00:03:44,489
so then we've we've elevated a little

00:03:42,810 --> 00:03:45,569
bit now we're considering one of those

00:03:44,489 --> 00:03:47,880
approaches we're saying what if we

00:03:45,569 --> 00:03:50,069
actually went and did X in the platform

00:03:47,880 --> 00:03:52,380
we made this change or we introduced

00:03:50,069 --> 00:03:53,669
this new capability we're at that point

00:03:52,380 --> 00:03:55,650
we're really doing things like design

00:03:53,669 --> 00:03:57,419
Docs proof of concepts we're trying to

00:03:55,650 --> 00:03:59,459
figure out if the change or the

00:03:57,419 --> 00:04:01,019
capability has the desirable trade-offs

00:03:59,459 --> 00:04:03,090
that we want to offer to the community

00:04:01,019 --> 00:04:04,829
and at this point we're trying to say to

00:04:03,090 --> 00:04:07,579
ourselves let's either prove it or

00:04:04,829 --> 00:04:11,190
disprove it to ourselves it's a theory

00:04:07,579 --> 00:04:12,930
then once we have the theory we'll often

00:04:11,190 --> 00:04:14,970
times if the theory works out and we

00:04:12,930 --> 00:04:17,669
feel like the approach makes sense we'll

00:04:14,970 --> 00:04:18,660
move into making it possible this is

00:04:17,669 --> 00:04:21,479
where we start building out things like

00:04:18,660 --> 00:04:23,099
underlying primitives and oftentimes

00:04:21,479 --> 00:04:24,930
you'll see this manifest as separate

00:04:23,099 --> 00:04:26,700
tooling I think angular elements is a

00:04:24,930 --> 00:04:27,450
really great example that was at this

00:04:26,700 --> 00:04:29,130
stage where

00:04:27,450 --> 00:04:31,380
we wanted to build the primitives that

00:04:29,130 --> 00:04:33,900
let people create and render custom

00:04:31,380 --> 00:04:35,370
elements from angular components but we

00:04:33,900 --> 00:04:36,720
didn't build the full set of tooling

00:04:35,370 --> 00:04:37,740
you'd need to build these on your own we

00:04:36,720 --> 00:04:41,160
kind of left some of that to the

00:04:37,740 --> 00:04:42,840
community if something is possible and

00:04:41,160 --> 00:04:44,070
we feel like developers are responding

00:04:42,840 --> 00:04:46,680
really well to it it's adding a ton of

00:04:44,070 --> 00:04:49,680
value then we move into trying to make

00:04:46,680 --> 00:04:51,450
it easy this is where we really start to

00:04:49,680 --> 00:04:52,920
going after things like documentation we

00:04:51,450 --> 00:04:54,420
start writing blog posts we start

00:04:52,920 --> 00:04:56,250
writing communications to say hey this

00:04:54,420 --> 00:04:57,540
is a feature or capability that you

00:04:56,250 --> 00:04:59,310
should try out that you should start

00:04:57,540 --> 00:05:01,800
using this is where we really hold

00:04:59,310 --> 00:05:03,660
ourselves to a higher quality bar often

00:05:01,800 --> 00:05:06,510
times you'll see things that are easy as

00:05:03,660 --> 00:05:08,430
opt-in or self-run commands right if we

00:05:06,510 --> 00:05:10,110
think about the path that IV is taken

00:05:08,430 --> 00:05:12,450
our hope is that in the next month or so

00:05:10,110 --> 00:05:13,920
IV is going to be easy where everyone

00:05:12,450 --> 00:05:15,390
can take advantage of you can try it you

00:05:13,920 --> 00:05:16,170
can let us know the feedback you can let

00:05:15,390 --> 00:05:18,720
us know where it breaks your

00:05:16,170 --> 00:05:21,570
applications as we continue our journey

00:05:18,720 --> 00:05:24,180
and not every feature not every

00:05:21,570 --> 00:05:26,250
capability gets passed easy but the

00:05:24,180 --> 00:05:27,720
ultimate goal whenever possible is to

00:05:26,250 --> 00:05:29,970
try and make the capabilities and

00:05:27,720 --> 00:05:31,290
features automatic so this is where we

00:05:29,970 --> 00:05:33,570
start building out things like ng

00:05:31,290 --> 00:05:35,580
updates schematics so we automatically

00:05:33,570 --> 00:05:37,470
add these things into your application a

00:05:35,580 --> 00:05:39,840
really great example of this that's

00:05:37,470 --> 00:05:42,180
landing in 8 0 is differential loading

00:05:39,840 --> 00:05:44,700
right we had these capabilities before

00:05:42,180 --> 00:05:46,230
you could do it external to the angular

00:05:44,700 --> 00:05:48,630
CLI process you could build some your

00:05:46,230 --> 00:05:51,120
own custom tooling but now we're vias

00:05:48,630 --> 00:05:52,590
schematics and via our tooling as it

00:05:51,120 --> 00:05:56,760
evolves we're baking these things

00:05:52,590 --> 00:05:58,380
directly into the platform oftentimes we

00:05:56,760 --> 00:05:59,700
want these things to be the only way of

00:05:58,380 --> 00:06:01,260
doing things and this is actually one of

00:05:59,700 --> 00:06:03,210
the important concepts in angular is

00:06:01,260 --> 00:06:05,370
that in general we want there to be one

00:06:03,210 --> 00:06:06,690
way of doing things one of the top

00:06:05,370 --> 00:06:08,790
reasons that people say that they like

00:06:06,690 --> 00:06:10,170
angular's are opinionated nature and so

00:06:08,790 --> 00:06:11,670
this is really really essential to us

00:06:10,170 --> 00:06:13,350
and so if we're introducing a new way of

00:06:11,670 --> 00:06:14,790
doing things we want to understand

00:06:13,350 --> 00:06:16,650
what's the vision for that how do we

00:06:14,790 --> 00:06:18,210
find a way to make this may be the only

00:06:16,650 --> 00:06:19,410
way of doing things so that everyone is

00:06:18,210 --> 00:06:22,170
writing the same code and it's all

00:06:19,410 --> 00:06:23,340
working the same and at this point the

00:06:22,170 --> 00:06:24,960
sort of capabilities are fully

00:06:23,340 --> 00:06:27,660
integrated into the platform whether

00:06:24,960 --> 00:06:29,580
it's CLI tooling whether it's other

00:06:27,660 --> 00:06:30,900
features like service workers we saw

00:06:29,580 --> 00:06:34,310
through all of the kind of ramifications

00:06:30,900 --> 00:06:37,200
and impact across the entire platform

00:06:34,310 --> 00:06:39,600
now remember not every idea is going to

00:06:37,200 --> 00:06:41,100
make it all the way some ideas daya's

00:06:39,600 --> 00:06:42,360
ideas some

00:06:41,100 --> 00:06:43,350
get to theory and we built a proof of

00:06:42,360 --> 00:06:45,510
concept we said that's not the right

00:06:43,350 --> 00:06:46,950
approach some things we get too easy but

00:06:45,510 --> 00:06:49,170
it doesn't necessarily make sense to

00:06:46,950 --> 00:06:51,630
deploy automatically for every angular

00:06:49,170 --> 00:06:53,760
developer out there I also want to call

00:06:51,630 --> 00:06:55,920
it that it's not always as smooth or as

00:06:53,760 --> 00:06:57,210
clean as I tried to make it look in that

00:06:55,920 --> 00:06:58,830
slide right

00:06:57,210 --> 00:07:01,170
sometimes something might be hovering

00:06:58,830 --> 00:07:02,730
between possible and easy and it's up to

00:07:01,170 --> 00:07:05,700
you to interpret how you want to think

00:07:02,730 --> 00:07:07,220
about that model and lastly I want to

00:07:05,700 --> 00:07:10,470
say that we don't do any of this alone

00:07:07,220 --> 00:07:11,910
we are so so fortunate that so many of

00:07:10,470 --> 00:07:13,830
the ideas theories

00:07:11,910 --> 00:07:15,660
principles and capabilities that we

00:07:13,830 --> 00:07:18,240
build into angular actually come from

00:07:15,660 --> 00:07:20,250
the community to examples that I really

00:07:18,240 --> 00:07:21,690
love to highlight are ivy itself this

00:07:20,250 --> 00:07:23,130
was actually a community idea other

00:07:21,690 --> 00:07:25,380
people had built some proof of concepts

00:07:23,130 --> 00:07:27,600
and we worked with them to pull that in

00:07:25,380 --> 00:07:29,550
those the the folks at Amadeus other

00:07:27,600 --> 00:07:31,230
examples are working with the folks over

00:07:29,550 --> 00:07:34,710
at Forbes on our server-side rendering

00:07:31,230 --> 00:07:36,060
story this is so essential because ideas

00:07:34,710 --> 00:07:37,680
don't just come from us right they come

00:07:36,060 --> 00:07:39,150
from everyone and we all want to

00:07:37,680 --> 00:07:41,370
collaborate and that's why we've been so

00:07:39,150 --> 00:07:45,120
successful is by working together with

00:07:41,370 --> 00:07:46,620
everyone one of the labels that we use

00:07:45,120 --> 00:07:51,510
to identify some of the projects that

00:07:46,620 --> 00:07:53,430
are not yet fully stable is angular labs

00:07:51,510 --> 00:07:55,800
so if you look at the kind of the first

00:07:53,430 --> 00:07:57,570
half of that list from theories and

00:07:55,800 --> 00:08:00,720
ideas anytime we write code that we're

00:07:57,570 --> 00:08:03,360
trying to put this angular labs logo on

00:08:00,720 --> 00:08:05,540
it and angular labs really talks about a

00:08:03,360 --> 00:08:07,500
project that has an uncertain endpoint

00:08:05,540 --> 00:08:09,390
oftentimes we'll start getting into a

00:08:07,500 --> 00:08:10,650
problem and we'll say hey maybe we were

00:08:09,390 --> 00:08:12,750
focused on the wrong thing maybe we were

00:08:10,650 --> 00:08:14,280
focused too much on runtime performance

00:08:12,750 --> 00:08:16,860
not enough on bootstrap performance or

00:08:14,280 --> 00:08:18,780
things like that oftentimes the api's

00:08:16,860 --> 00:08:20,340
will change right we make very very

00:08:18,780 --> 00:08:22,470
strong commitment so that our public API

00:08:20,340 --> 00:08:24,660
and we want developers to be able to

00:08:22,470 --> 00:08:25,950
rely on us and continue to write the

00:08:24,660 --> 00:08:27,570
same code they've been writing and keep

00:08:25,950 --> 00:08:28,200
their applications as up-to-date as

00:08:27,570 --> 00:08:30,450
possible

00:08:28,200 --> 00:08:31,890
but with a UI lab sometimes those api's

00:08:30,450 --> 00:08:33,930
need to change as we get feedback from

00:08:31,890 --> 00:08:36,300
the community and I would say with

00:08:33,930 --> 00:08:38,490
angular labs failure is in many ways an

00:08:36,300 --> 00:08:39,660
option right we don't know that this is

00:08:38,490 --> 00:08:41,760
necessary the right way of solving a

00:08:39,660 --> 00:08:43,320
problem and we might want to say hey we

00:08:41,760 --> 00:08:47,250
found a different path to solve that

00:08:43,320 --> 00:08:48,270
user need I want to look back a little

00:08:47,250 --> 00:08:49,380
bit on some of the projects that have

00:08:48,270 --> 00:08:50,730
gone through this because we've

00:08:49,380 --> 00:08:52,320
introduced these but we haven't always

00:08:50,730 --> 00:08:53,590
done a fantastic job of following up and

00:08:52,320 --> 00:08:55,720
saying what is kind

00:08:53,590 --> 00:08:58,120
graduated from this process so back in

00:08:55,720 --> 00:09:01,030
2017 we had the component dev kit or cdk

00:08:58,120 --> 00:09:03,490
graduated from angular labs in 2018 we

00:09:01,030 --> 00:09:05,140
had elements and schematics and then

00:09:03,490 --> 00:09:07,300
we're expecting with the a doe release

00:09:05,140 --> 00:09:09,780
that builders this builders API that

00:09:07,300 --> 00:09:12,640
lets you tap into ng bill and you serve

00:09:09,780 --> 00:09:14,020
will actually be part of the stable

00:09:12,640 --> 00:09:15,910
public API of angular and we'll be

00:09:14,020 --> 00:09:18,250
graduating from labs so definitely stay

00:09:15,910 --> 00:09:21,850
tuned to Alex's talk about that a little

00:09:18,250 --> 00:09:23,050
bit later there's also a bunch of

00:09:21,850 --> 00:09:25,180
current projects that we consider

00:09:23,050 --> 00:09:27,040
angular Labs projects we're doing a ton

00:09:25,180 --> 00:09:28,690
of work on basil right now to make it a

00:09:27,040 --> 00:09:29,980
really good tool for scaling out your

00:09:28,690 --> 00:09:32,560
builds and getting better performance

00:09:29,980 --> 00:09:34,390
that our increment allottee there's also

00:09:32,560 --> 00:09:35,620
two other projects from the material

00:09:34,390 --> 00:09:37,270
team that I want to highlight because I

00:09:35,620 --> 00:09:39,490
think it not a lot of folks know about

00:09:37,270 --> 00:09:40,930
these the first is called material

00:09:39,490 --> 00:09:43,780
experimental and the second is called

00:09:40,930 --> 00:09:45,850
cdk experimental so these are packages

00:09:43,780 --> 00:09:47,350
that live in our github repository but

00:09:45,850 --> 00:09:49,540
they're also packages on NPM

00:09:47,350 --> 00:09:50,950
and so if you want to in addition to

00:09:49,540 --> 00:09:53,440
angular material you wanted to install

00:09:50,950 --> 00:09:55,480
at angular slash material experimental

00:09:53,440 --> 00:09:57,340
you can actually get a glimpse at some

00:09:55,480 --> 00:09:58,600
of the new components some of the new

00:09:57,340 --> 00:10:00,340
features that we're working on in

00:09:58,600 --> 00:10:01,840
materials so this is actually the first

00:10:00,340 --> 00:10:03,460
place that we land those things when

00:10:01,840 --> 00:10:04,990
we're uncertain about an API and we need

00:10:03,460 --> 00:10:07,740
developer feedback we need people to try

00:10:04,990 --> 00:10:10,000
these things and prove them out with us

00:10:07,740 --> 00:10:11,530
once you've imported it or add it into

00:10:10,000 --> 00:10:13,650
your project then you can actually just

00:10:11,530 --> 00:10:16,900
import the specific component or

00:10:13,650 --> 00:10:19,540
capability from the cdk4 material from

00:10:16,900 --> 00:10:21,760
that specific endpoint so it works just

00:10:19,540 --> 00:10:23,230
like material in cdk but you can go in

00:10:21,760 --> 00:10:26,380
and you can as I said get a sneak peek

00:10:23,230 --> 00:10:27,790
we actually have lists of these things

00:10:26,380 --> 00:10:29,140
on our github so I've created a couple

00:10:27,790 --> 00:10:31,090
short links here so bitly mad

00:10:29,140 --> 00:10:32,500
experiments in bitly cdk experiments if

00:10:31,090 --> 00:10:34,150
you want to go and take a look at some

00:10:32,500 --> 00:10:36,910
of the experiments that they're working

00:10:34,150 --> 00:10:38,530
on in material and the cdk I do want to

00:10:36,910 --> 00:10:39,940
say that each component can be at a

00:10:38,530 --> 00:10:43,720
different stage so I laid out this idea

00:10:39,940 --> 00:10:47,410
to automatic framework not every

00:10:43,720 --> 00:10:49,390
component is at the same stage there so

00:10:47,410 --> 00:10:50,920
we're talking a lot about ideas and

00:10:49,390 --> 00:10:52,780
theories and all the sorts of things

00:10:50,920 --> 00:10:54,130
that we're excited about and this is

00:10:52,780 --> 00:10:57,130
something that we really want to lean

00:10:54,130 --> 00:10:59,590
into a little bit more because we want

00:10:57,130 --> 00:11:01,540
to do better oftentimes we're a little

00:10:59,590 --> 00:11:04,150
bit afraid to share some of our ideas

00:11:01,540 --> 00:11:05,290
because we as you saw sometimes our

00:11:04,150 --> 00:11:06,620
commits end up on reddit without the

00:11:05,290 --> 00:11:08,300
right sort of context

00:11:06,620 --> 00:11:10,190
but we do want to do better we want to

00:11:08,300 --> 00:11:11,240
echo the needs that we're hearing we

00:11:10,190 --> 00:11:13,010
want to make sure that everyone in the

00:11:11,240 --> 00:11:14,900
audience knows when you share a feature

00:11:13,010 --> 00:11:16,160
idea you share a pain with us we are

00:11:14,900 --> 00:11:17,360
hearing these things and we want to make

00:11:16,160 --> 00:11:20,480
these things better we're gonna continue

00:11:17,360 --> 00:11:21,800
to evolve angular we also want to share

00:11:20,480 --> 00:11:24,110
the problems that we see because often

00:11:21,800 --> 00:11:25,910
times we have unique insights into the

00:11:24,110 --> 00:11:28,820
capabilities and the awesomeness that

00:11:25,910 --> 00:11:30,320
can be around in angular and we really

00:11:28,820 --> 00:11:32,690
want to embrace openness and so with

00:11:30,320 --> 00:11:34,910
your help I want to lean into and share

00:11:32,690 --> 00:11:37,310
some more about these ideas and theories

00:11:34,910 --> 00:11:39,950
that we've been working on but I also

00:11:37,310 --> 00:11:41,360
want to say we're committed to you we've

00:11:39,950 --> 00:11:43,070
been making commitments for a long time

00:11:41,360 --> 00:11:45,320
now that we want to bring the world with

00:11:43,070 --> 00:11:47,630
us Iger talked a couple days ago about

00:11:45,320 --> 00:11:49,700
this idea this guiding star of angular

00:11:47,630 --> 00:11:51,050
evergreen where no matter what changes

00:11:49,700 --> 00:11:52,190
we make to angular we're gonna bring you

00:11:51,050 --> 00:11:53,840
with us we're gonna make it a smooth

00:11:52,190 --> 00:11:54,650
transition and we're gonna listen to the

00:11:53,840 --> 00:11:57,830
community make sure that you're not

00:11:54,650 --> 00:12:00,110
having to relearn everything right we

00:11:57,830 --> 00:12:01,700
want to bring everyone with us and this

00:12:00,110 --> 00:12:03,530
is critical and it's not just critical

00:12:01,700 --> 00:12:05,360
in terms of our promise around our

00:12:03,530 --> 00:12:06,740
product but it's actually critical from

00:12:05,360 --> 00:12:09,080
us from an engineering standpoint

00:12:06,740 --> 00:12:11,420
because as we said before there's over a

00:12:09,080 --> 00:12:13,490
thousand projects at Google that use

00:12:11,420 --> 00:12:15,530
angular and it's actually our team's

00:12:13,490 --> 00:12:17,930
responsibility to make changes to them

00:12:15,530 --> 00:12:19,100
if we break them right so every time we

00:12:17,930 --> 00:12:20,900
make a breaking change when we create

00:12:19,100 --> 00:12:22,760
pain for you we're creating pain for

00:12:20,900 --> 00:12:24,350
ourselves and this is a really nice

00:12:22,760 --> 00:12:27,110
balancing factor that makes sure that we

00:12:24,350 --> 00:12:28,640
evolve everything very carefully in the

00:12:27,110 --> 00:12:31,040
right way that gives you both the

00:12:28,640 --> 00:12:32,870
benefits of stability and the benefits

00:12:31,040 --> 00:12:34,370
of innovation because the ecosystem is

00:12:32,870 --> 00:12:36,110
not static right we can build better

00:12:34,370 --> 00:12:37,400
apps today than we could build last year

00:12:36,110 --> 00:12:38,930
and we're gonna be able to build better

00:12:37,400 --> 00:12:41,090
apps next year than we can build today

00:12:38,930 --> 00:12:43,130
and we really want to be a part of that

00:12:41,090 --> 00:12:44,990
and at this point we actually have a

00:12:43,130 --> 00:12:47,600
successful track record that we can look

00:12:44,990 --> 00:12:49,160
at Brad talked about the km story of how

00:12:47,600 --> 00:12:50,930
every update has gotten easier and

00:12:49,160 --> 00:12:52,670
easier and easier for them and this is

00:12:50,930 --> 00:12:55,490
something that we definitely care a lot

00:12:52,670 --> 00:12:56,870
about is continuing the more two and a

00:12:55,490 --> 00:13:00,170
half years at this point that we've done

00:12:56,870 --> 00:13:01,220
where we've brought everyone with us so

00:13:00,170 --> 00:13:04,100
what I want to do is I want to introduce

00:13:01,220 --> 00:13:05,450
mishko and I want to give you a glance

00:13:04,100 --> 00:13:07,400
and some of the ideas and theories that

00:13:05,450 --> 00:13:08,690
we've been working on some of these

00:13:07,400 --> 00:13:10,400
might not land for years some of these

00:13:08,690 --> 00:13:11,660
might not land at all but again we

00:13:10,400 --> 00:13:15,130
really want to embrace that idea of

00:13:11,660 --> 00:13:15,130
openness so let's introduce music oh

00:13:15,220 --> 00:13:18,310
thank you

00:13:19,310 --> 00:13:25,070
good morning Salt Lake City how you guys

00:13:21,560 --> 00:13:28,040
doing hi I'm Michiko I'm one of the tech

00:13:25,070 --> 00:13:30,200
leads on the angular team and today I

00:13:28,040 --> 00:13:32,360
want to talk to you about our ideas for

00:13:30,200 --> 00:13:34,520
the future now you might not notice

00:13:32,360 --> 00:13:36,410
about me but I love crazy ideas for the

00:13:34,520 --> 00:13:39,320
future and the team always has to talk

00:13:36,410 --> 00:13:40,640
me down off the ledge and so this might

00:13:39,320 --> 00:13:42,080
be one of those times that they haven't

00:13:40,640 --> 00:13:45,890
succeeded in talking me down off the

00:13:42,080 --> 00:13:48,170
ledge the thing I want to talk about oh

00:13:45,890 --> 00:13:50,330
yeah that's me the thing I want to talk

00:13:48,170 --> 00:13:52,850
about is what are we thinking in the

00:13:50,330 --> 00:13:53,900
past we have not really shared as much

00:13:52,850 --> 00:13:56,450
about the future where we're thinking

00:13:53,900 --> 00:13:59,000
about taking the angular for the fear of

00:13:56,450 --> 00:14:00,650
that maybe people a little bit freaked

00:13:59,000 --> 00:14:02,630
out about where we what kind of crazy

00:14:00,650 --> 00:14:04,820
thoughts we have but we wanted to

00:14:02,630 --> 00:14:06,530
because we're open source we wanted to

00:14:04,820 --> 00:14:09,020
say hey let's take the open source

00:14:06,530 --> 00:14:10,100
community with us and give them lots of

00:14:09,020 --> 00:14:13,580
warning that this might be a roller

00:14:10,100 --> 00:14:16,340
coaster but allowed them to see where we

00:14:13,580 --> 00:14:18,440
are going and so one of the things that

00:14:16,340 --> 00:14:20,990
is top on our mind is how to build a

00:14:18,440 --> 00:14:22,340
fast as possible apps in order for the

00:14:20,990 --> 00:14:24,260
web to be successful this is one of the

00:14:22,340 --> 00:14:26,120
things that needs to be solved and

00:14:24,260 --> 00:14:28,880
there's a lot of ways to measure a

00:14:26,120 --> 00:14:30,320
fastest possible app but one thing and

00:14:28,880 --> 00:14:32,960
specifically what I'm talking about is

00:14:30,320 --> 00:14:34,670
time to interactive that is I go and

00:14:32,960 --> 00:14:36,080
navigate to a website and I want to

00:14:34,670 --> 00:14:38,570
start interacting with the website as

00:14:36,080 --> 00:14:40,820
soon as possible and so how can we

00:14:38,570 --> 00:14:42,170
increase time to interactive or rather

00:14:40,820 --> 00:14:43,640
how can we decrease the time to

00:14:42,170 --> 00:14:45,950
interactive and make it as fast as

00:14:43,640 --> 00:14:48,410
possible and it turns out the time to

00:14:45,950 --> 00:14:50,720
interactive really comes down to network

00:14:48,410 --> 00:14:52,550
time and parse time in other words the

00:14:50,720 --> 00:14:55,190
less code you have the faster you will

00:14:52,550 --> 00:14:57,470
become and this is especially important

00:14:55,190 --> 00:14:59,060
for the initial time because the

00:14:57,470 --> 00:15:00,980
browsers when they first see your code

00:14:59,060 --> 00:15:02,330
they don't they still run in

00:15:00,980 --> 00:15:04,100
interpretive mode which is the extra

00:15:02,330 --> 00:15:06,170
slow mode before the jitter can kick in

00:15:04,100 --> 00:15:07,820
and get all the information and so at

00:15:06,170 --> 00:15:09,050
this mode we're actually pretty slow and

00:15:07,820 --> 00:15:10,880
so the amount of code you ship to the

00:15:09,050 --> 00:15:13,040
browser really is the determining factor

00:15:10,880 --> 00:15:15,620
of how fast your application will

00:15:13,040 --> 00:15:18,260
bootstrap so how do we get less code

00:15:15,620 --> 00:15:19,790
into the browser and you might actually

00:15:18,260 --> 00:15:21,050
know the answer to that question and

00:15:19,790 --> 00:15:24,170
that is tree shaking and we've been

00:15:21,050 --> 00:15:25,760
talking about it quite a bit however it

00:15:24,170 --> 00:15:28,220
turns out that there's a difference

00:15:25,760 --> 00:15:30,190
between the code you will need versus

00:15:28,220 --> 00:15:32,529
the code that you might need

00:15:30,190 --> 00:15:33,910
right there's a difference between you

00:15:32,529 --> 00:15:35,709
for sure know that in order to render

00:15:33,910 --> 00:15:37,420
the initial page you have to execute

00:15:35,709 --> 00:15:39,610
this code whereas there is a button

00:15:37,420 --> 00:15:40,870
where the user may not click and because

00:15:39,610 --> 00:15:43,420
the user may not click this button it's

00:15:40,870 --> 00:15:45,940
only a might need code and it turns out

00:15:43,420 --> 00:15:47,290
that tree shakers aren't able to tell

00:15:45,940 --> 00:15:48,939
the difference between those two and

00:15:47,290 --> 00:15:50,889
they will include both of the code for

00:15:48,939 --> 00:15:52,810
you now we can already have a solution

00:15:50,889 --> 00:15:55,689
for this we have lazy loading for routes

00:15:52,810 --> 00:15:57,699
in other words if you don't go and visit

00:15:55,689 --> 00:15:59,079
the about page of the particular website

00:15:57,699 --> 00:16:00,879
or if you don't go to the settings page

00:15:59,079 --> 00:16:02,290
we don't bundle that with the initial

00:16:00,879 --> 00:16:04,990
download and we don't ship it for you

00:16:02,290 --> 00:16:07,329
however we need to do the same thing for

00:16:04,990 --> 00:16:10,180
the buttons as well so if you don't

00:16:07,329 --> 00:16:11,769
click on a particular button you don't

00:16:10,180 --> 00:16:14,319
need to actually download the particular

00:16:11,769 --> 00:16:16,089
code for you now in order to know which

00:16:14,319 --> 00:16:18,069
buttons are clickable or not you kind of

00:16:16,089 --> 00:16:20,139
have to execute the code already once

00:16:18,069 --> 00:16:22,269
somewhere preferably on a server and so

00:16:20,139 --> 00:16:25,149
a lot of this talk is going to be about

00:16:22,269 --> 00:16:27,790
about the ideas of how we can pre render

00:16:25,149 --> 00:16:29,439
the the application on a server and then

00:16:27,790 --> 00:16:34,269
deliver it to the client in the fastest

00:16:29,439 --> 00:16:37,120
possible way so one of the things so

00:16:34,269 --> 00:16:38,620
buttons are one place where might need

00:16:37,120 --> 00:16:40,630
code is hiding but there's other places

00:16:38,620 --> 00:16:42,189
where you might need code is hiding and

00:16:40,630 --> 00:16:45,310
that is when the application first

00:16:42,189 --> 00:16:47,019
starts up almost all applications the

00:16:45,310 --> 00:16:49,449
first thing they do is they go and fetch

00:16:47,019 --> 00:16:50,889
the data for the application and this is

00:16:49,449 --> 00:16:52,600
kind of strange because the server just

00:16:50,889 --> 00:16:54,459
did that for you right the server pre

00:16:52,600 --> 00:16:56,529
rendered the webpage for you so that the

00:16:54,459 --> 00:16:59,139
initial render was super fast and now

00:16:56,529 --> 00:17:00,819
the application wakes up and replays all

00:16:59,139 --> 00:17:03,819
of the operations that the client just

00:17:00,819 --> 00:17:05,770
did and so we need to provide more lazy

00:17:03,819 --> 00:17:06,850
loaded boundaries for these kinds of

00:17:05,770 --> 00:17:08,709
things that are gonna be talking about

00:17:06,850 --> 00:17:11,439
the difference between replayable and

00:17:08,709 --> 00:17:14,589
resumable are things but the idea here

00:17:11,439 --> 00:17:16,990
is that angular currently provides a

00:17:14,589 --> 00:17:18,220
lazy loaded boundary on the routes but

00:17:16,990 --> 00:17:20,409
we need to provide lazy loaded wrong

00:17:18,220 --> 00:17:23,380
juries in much more places not just

00:17:20,409 --> 00:17:25,419
routing so it is more fine-grained and

00:17:23,380 --> 00:17:27,069
we have a better control about we're

00:17:25,419 --> 00:17:28,809
only shipping the code to the browser

00:17:27,069 --> 00:17:30,970
the browser actually needs to execute

00:17:28,809 --> 00:17:32,230
and so a good way to measure that is

00:17:30,970 --> 00:17:33,970
that when you open up your browser

00:17:32,230 --> 00:17:36,280
there's a little coverage button you can

00:17:33,970 --> 00:17:38,350
get in the dev tools and the coverage

00:17:36,280 --> 00:17:40,030
button actually tells you how much of

00:17:38,350 --> 00:17:42,429
the code your browser has actually

00:17:40,030 --> 00:17:43,510
executed an initial render and so any

00:17:42,429 --> 00:17:45,429
code not execute

00:17:43,510 --> 00:17:46,600
is the code that's really the might go

00:17:45,429 --> 00:17:49,299
that you probably should be thinking

00:17:46,600 --> 00:17:50,620
about how do I get rid of it and so

00:17:49,299 --> 00:17:52,330
let's talk about the difference between

00:17:50,620 --> 00:17:53,710
what I call replayable applications

00:17:52,330 --> 00:17:55,840
which is the applications we have today

00:17:53,710 --> 00:17:59,230
versus where we want to get to in two

00:17:55,840 --> 00:18:00,549
resumable applications and this is kind

00:17:59,230 --> 00:18:03,130
of the way to think about it today if

00:18:00,549 --> 00:18:04,480
you're on a server and you are running

00:18:03,130 --> 00:18:06,130
the application or server you kind of

00:18:04,480 --> 00:18:08,740
get the application bootstrap the

00:18:06,130 --> 00:18:11,620
application wakes up fetches the data it

00:18:08,740 --> 00:18:13,870
renders the UI server then serializes

00:18:11,620 --> 00:18:16,960
the UI into HTML sends it to the client

00:18:13,870 --> 00:18:18,790
the client wakes up gets the code and

00:18:16,960 --> 00:18:20,620
that's the same exact thing on the

00:18:18,790 --> 00:18:23,080
client it needs to figure out how do I

00:18:20,620 --> 00:18:24,070
get to the same state as the server was

00:18:23,080 --> 00:18:26,590
when the server

00:18:24,070 --> 00:18:28,900
left off and so it replays all of the

00:18:26,590 --> 00:18:31,510
operations and to do that it bootstraps

00:18:28,900 --> 00:18:33,429
itself it fetches the data again it rear

00:18:31,510 --> 00:18:34,900
Enders itself and replaces the Dom tree

00:18:33,429 --> 00:18:36,190
with the new render tree hopefully the

00:18:34,900 --> 00:18:38,530
two trees are identical so the user

00:18:36,190 --> 00:18:41,140
doesn't notice and only then do you have

00:18:38,530 --> 00:18:43,150
an interactive application and instead

00:18:41,140 --> 00:18:44,830
what I would like to talk about is how

00:18:43,150 --> 00:18:47,169
can we have a resumable application

00:18:44,830 --> 00:18:51,130
where you can resume the application

00:18:47,169 --> 00:18:53,350
from the point of interaction and cut

00:18:51,130 --> 00:18:55,210
out all the intermediary step because

00:18:53,350 --> 00:18:57,160
those intermediary step turns out isn't

00:18:55,210 --> 00:18:59,530
a huge amount of code that your browser

00:18:57,160 --> 00:19:01,240
doesn't need to execute or preferably if

00:18:59,530 --> 00:19:04,990
it didn't execute you would have a much

00:19:01,240 --> 00:19:07,450
better time to interactive the thing is

00:19:04,990 --> 00:19:09,130
to is that replayable is a simpler way

00:19:07,450 --> 00:19:10,690
to build apps it is what we are familiar

00:19:09,130 --> 00:19:12,309
with it's what we do all the time and it

00:19:10,690 --> 00:19:14,620
is very very simple to do and we are

00:19:12,309 --> 00:19:16,990
very comfortable with doing it resumable

00:19:14,620 --> 00:19:20,290
though is smaller even if it requires

00:19:16,990 --> 00:19:22,900
more work and it's a little bit harder

00:19:20,290 --> 00:19:24,429
to do but the payoffs are worth it now

00:19:22,900 --> 00:19:26,020
it doesn't mean that this is something

00:19:24,429 --> 00:19:27,520
we should do for all the apps you know

00:19:26,020 --> 00:19:29,470
it doesn't it really depends on a

00:19:27,520 --> 00:19:31,000
situation you happen to be in and what

00:19:29,470 --> 00:19:33,580
you're building if you're building a

00:19:31,000 --> 00:19:35,049
Enterprise app that is gonna be opened

00:19:33,580 --> 00:19:36,640
once in the morning and it's gonna stay

00:19:35,049 --> 00:19:40,540
open throughout the day that is very

00:19:36,640 --> 00:19:43,030
different use case then a home page app

00:19:40,540 --> 00:19:46,450
for a site that's selling shoes or

00:19:43,030 --> 00:19:49,179
something now in order to be able to

00:19:46,450 --> 00:19:50,980
Reese resumable one of the key things

00:19:49,179 --> 00:19:52,929
that angular has to do is has to be

00:19:50,980 --> 00:19:55,240
aware of the state of the application

00:19:52,929 --> 00:19:56,890
and so not only do we have to serialize

00:19:55,240 --> 00:19:58,090
the HTML and send

00:19:56,890 --> 00:19:59,950
the client during server-side

00:19:58,090 --> 00:20:02,170
pre-rendering we also have to be able to

00:19:59,950 --> 00:20:07,270
serialize the state of the application

00:20:02,170 --> 00:20:10,720
and send it to the client as well and so

00:20:07,270 --> 00:20:12,580
the last bit is currently when we do

00:20:10,720 --> 00:20:14,320
server-side rendering we destroyed the

00:20:12,580 --> 00:20:15,880
old Dom and we recreate a new DOM and

00:20:14,320 --> 00:20:17,800
put it in its place and ice as I said

00:20:15,880 --> 00:20:19,240
hopefully the new Dom is the same as the

00:20:17,800 --> 00:20:21,100
old one instead the user doesn't notice

00:20:19,240 --> 00:20:24,700
unfortunately that doesn't really work

00:20:21,100 --> 00:20:26,950
in a partially rehydratable applications

00:20:24,700 --> 00:20:28,690
when I mean that partially is that we

00:20:26,950 --> 00:20:30,070
would like to get to this state that if

00:20:28,690 --> 00:20:32,590
there is many many components on the

00:20:30,070 --> 00:20:33,700
application we should only rehydrate the

00:20:32,590 --> 00:20:37,390
component that you're actually

00:20:33,700 --> 00:20:38,530
interacting with right so if you don't

00:20:37,390 --> 00:20:40,660
interact with a particular component

00:20:38,530 --> 00:20:44,230
there is no need to load its behavior to

00:20:40,660 --> 00:20:46,540
the browser and for that we really need

00:20:44,230 --> 00:20:48,700
to be able to rehydrate the state of the

00:20:46,540 --> 00:20:50,920
Dom because the user might interact my

00:20:48,700 --> 00:20:53,050
focus on a particular input might start

00:20:50,920 --> 00:20:54,520
typing into the input and then when the

00:20:53,050 --> 00:20:56,260
application bootstrap or rather when the

00:20:54,520 --> 00:20:58,090
components lazily bootstraps it cannot

00:20:56,260 --> 00:21:00,430
replace the typing that the user has

00:20:58,090 --> 00:21:03,070
done because doing so would destroy the

00:21:00,430 --> 00:21:05,380
focus and the what the user has typed

00:21:03,070 --> 00:21:08,800
into it and oftentimes it actually

00:21:05,380 --> 00:21:10,540
creates flicker as well now I know we've

00:21:08,800 --> 00:21:12,340
been talking a lot about Ivy and so I

00:21:10,540 --> 00:21:14,110
really want to point out that Ivy is

00:21:12,340 --> 00:21:16,300
kind of the enabler of the whole thing

00:21:14,110 --> 00:21:20,170
it enables us to build these kinds of

00:21:16,300 --> 00:21:22,300
applications so Ivy is continues and

00:21:20,170 --> 00:21:23,800
will be our top priority and we will and

00:21:22,300 --> 00:21:26,110
these things that I'm talking about it

00:21:23,800 --> 00:21:27,850
was really just ideas about the future

00:21:26,110 --> 00:21:29,170
of how we are thinking about the

00:21:27,850 --> 00:21:32,560
platform not something that we're

00:21:29,170 --> 00:21:34,210
currently working on without i'li we

00:21:32,560 --> 00:21:35,620
won't be able to do this and so I'm

00:21:34,210 --> 00:21:37,570
super excited about I mean mainly

00:21:35,620 --> 00:21:39,970
because not just the things that the

00:21:37,570 --> 00:21:41,860
aunt Ivy will do for us today but the

00:21:39,970 --> 00:21:44,350
kind of things either will enable us to

00:21:41,860 --> 00:21:45,580
do in the future and so I'm about to

00:21:44,350 --> 00:21:48,280
show you some code and I want to give

00:21:45,580 --> 00:21:51,250
you a big disclaimer the the team made

00:21:48,280 --> 00:21:54,640
me put this here that is what you're

00:21:51,250 --> 00:21:56,980
about to see is totally made-up it may

00:21:54,640 --> 00:21:58,510
never be delivered it will probably look

00:21:56,980 --> 00:22:00,790
very different if it does get delivered

00:21:58,510 --> 00:22:03,970
it is not our top priority because Ivy

00:22:00,790 --> 00:22:05,500
is and a lot of it is hand wavy but I

00:22:03,970 --> 00:22:08,590
think it's important to talk about it

00:22:05,500 --> 00:22:10,330
because it's important to share how are

00:22:08,590 --> 00:22:12,460
we thinking about the problem

00:22:10,330 --> 00:22:14,500
that we have and how are we thinking

00:22:12,460 --> 00:22:16,299
about making the ecosystem better and

00:22:14,500 --> 00:22:20,019
how are we thinking about it in a way

00:22:16,299 --> 00:22:21,730
that brings everybody with us but first

00:22:20,019 --> 00:22:23,980
let me meet you let me introduce you to

00:22:21,730 --> 00:22:25,299
mr. paperclip no it's not the same

00:22:23,980 --> 00:22:28,960
paperclip you're familiar with it's a

00:22:25,299 --> 00:22:30,610
different one but the reason I have a

00:22:28,960 --> 00:22:34,090
paperclip here is because whenever I

00:22:30,610 --> 00:22:36,399
talk about new syntax with people

00:22:34,090 --> 00:22:38,140
syntax is kind of like the cuisine you

00:22:36,399 --> 00:22:40,360
happen to grow up with you immediately

00:22:38,140 --> 00:22:42,639
have these either an allergic reaction

00:22:40,360 --> 00:22:44,769
to different cuisines food or you

00:22:42,639 --> 00:22:48,340
absolutely love it and syntax is the

00:22:44,769 --> 00:22:50,769
same kind of a thing and so what's

00:22:48,340 --> 00:22:52,179
important about syntax is that syntax is

00:22:50,769 --> 00:22:53,769
something we can change later but the

00:22:52,179 --> 00:22:55,659
key thing that people always miss about

00:22:53,769 --> 00:22:57,580
syntax is it's not the syntax it's the

00:22:55,659 --> 00:22:59,559
semantics it's the meaning behind the

00:22:57,580 --> 00:23:03,100
syntax that you should be discussing not

00:22:59,559 --> 00:23:05,080
the syntax itself and so to distract

00:23:03,100 --> 00:23:06,580
everybody from the syntax I'm gonna put

00:23:05,080 --> 00:23:08,769
paperclips everywhere to let you know

00:23:06,580 --> 00:23:11,590
this is not the syntax this is just a

00:23:08,769 --> 00:23:13,029
placeholder where something of that kind

00:23:11,590 --> 00:23:16,600
of like information will have to be

00:23:13,029 --> 00:23:19,809
placed so look for the paperclip so

00:23:16,600 --> 00:23:21,340
let's build a to-do app and a to-do app

00:23:19,809 --> 00:23:23,740
is a simpler app that you have all built

00:23:21,340 --> 00:23:26,470
many times beforehand so that's that's

00:23:23,740 --> 00:23:28,690
why I want to start with it and I would

00:23:26,470 --> 00:23:30,760
like you to imagine what would it take

00:23:28,690 --> 00:23:35,380
to make it fast and I would like you to

00:23:30,760 --> 00:23:37,330
take you through that journey so let's

00:23:35,380 --> 00:23:38,470
start with something let's say we have

00:23:37,330 --> 00:23:41,409
our to-do app and we have a to-do app

00:23:38,470 --> 00:23:43,539
component and the to-do app component

00:23:41,409 --> 00:23:45,490
has a very simple state which is just it

00:23:43,539 --> 00:23:46,809
has items which is a released of items

00:23:45,490 --> 00:23:49,210
how do we get the items

00:23:46,809 --> 00:23:52,059
well the async method on the bottom the

00:23:49,210 --> 00:23:53,769
reload method can go and fetch it but

00:23:52,059 --> 00:23:56,019
notice the fetching requires items

00:23:53,769 --> 00:23:57,789
service how do we get items service well

00:23:56,019 --> 00:24:00,669
we have a constructor and it be injected

00:23:57,789 --> 00:24:02,409
into the items service in here and now

00:24:00,669 --> 00:24:05,320
you can kind of start to see what I mean

00:24:02,409 --> 00:24:07,179
when I say replayable in order for us to

00:24:05,320 --> 00:24:08,500
bootstrap the to-do app component the

00:24:07,179 --> 00:24:10,210
to-do app component will immediately

00:24:08,500 --> 00:24:12,039
call the constructor and immediately

00:24:10,210 --> 00:24:14,679
start fetching the data and will start

00:24:12,039 --> 00:24:16,419
replaying itself and a thing that I

00:24:14,679 --> 00:24:18,370
really want to point out is that the

00:24:16,419 --> 00:24:21,250
amount of code that is hiding behind the

00:24:18,370 --> 00:24:23,409
items service is huge it's probably most

00:24:21,250 --> 00:24:24,140
of the application because behind item

00:24:23,409 --> 00:24:27,440
service

00:24:24,140 --> 00:24:29,630
common angular common HTTP and probably

00:24:27,440 --> 00:24:30,290
some caching mechanism and who knows

00:24:29,630 --> 00:24:33,050
what else

00:24:30,290 --> 00:24:34,730
over time agar gets placed into the item

00:24:33,050 --> 00:24:36,260
service in order to provide the

00:24:34,730 --> 00:24:40,310
capabilities that you need for your

00:24:36,260 --> 00:24:41,270
applications so if you wanted to talk

00:24:40,310 --> 00:24:43,010
about how do we make the application

00:24:41,270 --> 00:24:45,740
resumable what we need to really talk

00:24:43,010 --> 00:24:48,260
about is how do we make the item service

00:24:45,740 --> 00:24:49,520
not be as part of the constructor and

00:24:48,260 --> 00:24:52,040
how do we make sure that the constructor

00:24:49,520 --> 00:24:56,210
or ng on in it don't do complicated set

00:24:52,040 --> 00:24:58,610
of work so this is a kind of a this is

00:24:56,210 --> 00:25:00,650
what we do today for the template you

00:24:58,610 --> 00:25:02,540
can see on the top we just have a ng for

00:25:00,650 --> 00:25:04,880
will iterate over the individual items

00:25:02,540 --> 00:25:07,700
and we bring a second component in which

00:25:04,880 --> 00:25:08,900
is the item component and we have a

00:25:07,700 --> 00:25:10,790
button on the bottom that's a little bit

00:25:08,900 --> 00:25:13,430
contrived but I wanted to just

00:25:10,790 --> 00:25:15,080
demonstrate how the click listener works

00:25:13,430 --> 00:25:17,210
so we have a button to reload the state

00:25:15,080 --> 00:25:19,430
of your to-do application so pretty

00:25:17,210 --> 00:25:21,410
straightforward stuff should be all

00:25:19,430 --> 00:25:23,930
familiar with this as we do this today

00:25:21,410 --> 00:25:25,850
for the item component we have a similar

00:25:23,930 --> 00:25:27,560
thing where we have an input box which

00:25:25,850 --> 00:25:29,450
is just a check box which is which is

00:25:27,560 --> 00:25:31,520
data bound to the whether or not the

00:25:29,450 --> 00:25:33,860
item is completed and when you click on

00:25:31,520 --> 00:25:35,210
the check box it will call the toggle

00:25:33,860 --> 00:25:36,530
method which will change this state

00:25:35,210 --> 00:25:38,120
right this is the side effect of the

00:25:36,530 --> 00:25:39,770
application now in this case the

00:25:38,120 --> 00:25:41,240
changing the state is absolutely trivial

00:25:39,770 --> 00:25:42,650
but you can imagine when your

00:25:41,240 --> 00:25:44,090
applications are changing the state is

00:25:42,650 --> 00:25:46,940
something more complicated but the same

00:25:44,090 --> 00:25:50,060
set of rules will apply and so this is

00:25:46,940 --> 00:25:51,560
our item component over here and if we

00:25:50,060 --> 00:25:54,170
do server-side pre-rendering this is

00:25:51,560 --> 00:25:55,480
kind of what it would look like the

00:25:54,170 --> 00:25:58,040
server would execute the application

00:25:55,480 --> 00:26:00,320
build a Dom on a server we would then

00:25:58,040 --> 00:26:01,720
serially serialize the Dom on the clock

00:26:00,320 --> 00:26:04,460
on the server

00:26:01,720 --> 00:26:06,710
ship it to the browser and you would get

00:26:04,460 --> 00:26:07,730
something along these lines so this is

00:26:06,710 --> 00:26:09,140
not something you would write right this

00:26:07,730 --> 00:26:10,840
is something that server would generate

00:26:09,140 --> 00:26:14,990
by executing all the components together

00:26:10,840 --> 00:26:16,640
and when the client would when we would

00:26:14,990 --> 00:26:18,020
get to the client the first thing client

00:26:16,640 --> 00:26:19,940
has to do is to bootstrap the

00:26:18,020 --> 00:26:21,710
application all over again and the

00:26:19,940 --> 00:26:24,080
reason we have to bootstrap everything

00:26:21,710 --> 00:26:26,510
again is because we don't know where the

00:26:24,080 --> 00:26:29,750
listeners are right as you look at this

00:26:26,510 --> 00:26:31,790
particular HTML there is no idea where

00:26:29,750 --> 00:26:34,400
the listeners are and so the applet so

00:26:31,790 --> 00:26:36,380
the framework really has no choice but

00:26:34,400 --> 00:26:38,510
the bootstrap the whole applique

00:26:36,380 --> 00:26:40,100
and to end every single component in

00:26:38,510 --> 00:26:41,270
order to figure out where all the

00:26:40,100 --> 00:26:44,539
listeners are and where do we have to

00:26:41,270 --> 00:26:46,340
place them and so this is the problem we

00:26:44,539 --> 00:26:47,809
have right we are replayable again we

00:26:46,340 --> 00:26:50,750
have to register reasoner's we're gonna

00:26:47,809 --> 00:26:52,340
have to rebuild the dom the the fetching

00:26:50,750 --> 00:26:54,740
of the service will have to bring in the

00:26:52,340 --> 00:26:55,850
defense's injection system the

00:26:54,740 --> 00:26:57,410
dependency injection system will then

00:26:55,850 --> 00:27:00,380
bring in services that will fetch data

00:26:57,410 --> 00:27:02,120
from the server and before you know that

00:27:00,380 --> 00:27:04,700
we're essentially shipping the whole app

00:27:02,120 --> 00:27:06,620
in to the client and so our goal now is

00:27:04,700 --> 00:27:09,380
to make the above lazy how could we do

00:27:06,620 --> 00:27:13,370
that so make the application resumable

00:27:09,380 --> 00:27:16,970
is is the goal and the way we do this

00:27:13,370 --> 00:27:18,710
are two parts which is that one is we've

00:27:16,970 --> 00:27:21,380
tried to figure out how to make all the

00:27:18,710 --> 00:27:23,570
unnecessary code lazy loadable and two

00:27:21,380 --> 00:27:25,070
we try to figure out how do we resume

00:27:23,570 --> 00:27:26,720
the state of the application rather than

00:27:25,070 --> 00:27:29,360
replay the state of the application from

00:27:26,720 --> 00:27:32,390
the client and so again we're back in to

00:27:29,360 --> 00:27:34,669
what the server would generate for us so

00:27:32,390 --> 00:27:36,559
we might look something like this again

00:27:34,669 --> 00:27:38,960
and the the first piece of information

00:27:36,559 --> 00:27:40,820
that we need is where are all the click

00:27:38,960 --> 00:27:42,409
listeners where are all the listeners so

00:27:40,820 --> 00:27:45,289
that I can interact with the application

00:27:42,409 --> 00:27:48,159
and so one of the things that the server

00:27:45,289 --> 00:27:52,429
could do for us is to actually place

00:27:48,159 --> 00:27:54,080
markers basically annotate the the HTML

00:27:52,429 --> 00:27:56,929
coming from the server with additional

00:27:54,080 --> 00:27:58,370
information telling us these is where

00:27:56,929 --> 00:28:00,860
the clicks are now why is this important

00:27:58,370 --> 00:28:02,330
this is important because now we don't

00:28:00,860 --> 00:28:03,890
have to eagerly bootstrap the

00:28:02,330 --> 00:28:06,980
application and instead we can do it

00:28:03,890 --> 00:28:08,630
lazily now we can register a single

00:28:06,980 --> 00:28:11,510
click listener at the bottom of the app

00:28:08,630 --> 00:28:13,429
of the Dom tree and say when it click

00:28:11,510 --> 00:28:15,470
happens figure out where the click comes

00:28:13,429 --> 00:28:17,539
from and look for these markers inside

00:28:15,470 --> 00:28:19,909
of the Dom tree and using these markers

00:28:17,539 --> 00:28:22,669
determine which component needs to be

00:28:19,909 --> 00:28:23,870
bootstrapped and so we need to have a

00:28:22,669 --> 00:28:25,940
second piece of information which is

00:28:23,870 --> 00:28:27,650
where exactly the components are and if

00:28:25,940 --> 00:28:29,059
they get triggered what exactly has to

00:28:27,650 --> 00:28:32,900
get bootstraps so in this particular

00:28:29,059 --> 00:28:34,250
case what we can say is that hey when

00:28:32,900 --> 00:28:36,860
you click for example on the reload

00:28:34,250 --> 00:28:39,770
button at the very bottom the reload

00:28:36,860 --> 00:28:41,450
button will will trigger the framework

00:28:39,770 --> 00:28:43,220
to say ok I need to go and find the

00:28:41,450 --> 00:28:46,000
closest component in this case we go up

00:28:43,220 --> 00:28:48,530
to - - app define the component and we

00:28:46,000 --> 00:28:49,650
bootstrap that we glaze load that

00:28:48,530 --> 00:28:51,600
particular

00:28:49,650 --> 00:28:53,640
do dynamic important a particular URI

00:28:51,600 --> 00:28:56,160
and bring the component in and then we

00:28:53,640 --> 00:28:58,200
can bootstrap the component and execute

00:28:56,160 --> 00:29:00,180
whatever the role button will do and

00:28:58,200 --> 00:29:02,880
notice what we don't have to do at this

00:29:00,180 --> 00:29:06,210
point is actually get the items to be

00:29:02,880 --> 00:29:08,670
executed or brought in just yet because

00:29:06,210 --> 00:29:09,660
the reload might actually happen you

00:29:08,670 --> 00:29:12,630
know some side effect that actually

00:29:09,660 --> 00:29:16,650
doesn't requires the item to be executed

00:29:12,630 --> 00:29:18,240
so we can delay that however if we look

00:29:16,650 --> 00:29:19,920
at the to-do app component we're back

00:29:18,240 --> 00:29:21,750
into square one which is that we are

00:29:19,920 --> 00:29:24,240
going to reload as soon as the to-do app

00:29:21,750 --> 00:29:25,860
component is going to be bootstrap we're

00:29:24,240 --> 00:29:27,090
gonna reload the state from the server

00:29:25,860 --> 00:29:28,530
and so this is something we need to work

00:29:27,090 --> 00:29:35,160
on we need to fix this particular

00:29:28,530 --> 00:29:36,420
problem and one way to fix it right so

00:29:35,160 --> 00:29:39,270
the problem is that the component

00:29:36,420 --> 00:29:41,100
rendering loads the side affected

00:29:39,270 --> 00:29:43,140
behavior from the server and as a result

00:29:41,100 --> 00:29:45,030
we are again in the square one where we

00:29:43,140 --> 00:29:47,010
bring the data system we're bringing all

00:29:45,030 --> 00:29:48,450
the parts with this is the this is kind

00:29:47,010 --> 00:29:51,000
of the core the problem that we need to

00:29:48,450 --> 00:29:53,580
solve is how do we not do this and so

00:29:51,000 --> 00:29:55,470
one example would be that if angular

00:29:53,580 --> 00:29:58,170
could understand the state of the

00:29:55,470 --> 00:30:00,059
application when it was serialized at

00:29:58,170 --> 00:30:01,920
the server and one way to do that would

00:30:00,059 --> 00:30:04,559
be to have for example again this is

00:30:01,920 --> 00:30:07,740
made up notice the paper clip would be

00:30:04,559 --> 00:30:10,080
to have a state on at a marker to say

00:30:07,740 --> 00:30:11,940
hey when you serialize the the

00:30:10,080 --> 00:30:13,650
application on a server not only do you

00:30:11,940 --> 00:30:16,590
serialize the HTML and send it to the

00:30:13,650 --> 00:30:19,850
client but also serialize some of the

00:30:16,590 --> 00:30:22,559
state of the individual components and

00:30:19,850 --> 00:30:24,480
by doing this the semantics of this

00:30:22,559 --> 00:30:26,670
thing could be something like this that

00:30:24,480 --> 00:30:28,020
first we will assure that whatever you

00:30:26,670 --> 00:30:30,360
put in items is something that can be

00:30:28,020 --> 00:30:31,500
JSON serializable so the state

00:30:30,360 --> 00:30:33,809
annotation will have additional

00:30:31,500 --> 00:30:37,380
information for you the other thing we

00:30:33,809 --> 00:30:39,360
could do is we can say hey if the if the

00:30:37,380 --> 00:30:41,429
application gets bootstrapped and there

00:30:39,360 --> 00:30:42,900
already is a state that's available for

00:30:41,429 --> 00:30:45,059
you because the server has provided for

00:30:42,900 --> 00:30:46,380
us then don't bother executing the

00:30:45,059 --> 00:30:48,750
function that's associated with the

00:30:46,380 --> 00:30:50,700
state in other words only execute the

00:30:48,750 --> 00:30:53,820
function if the server did not provide

00:30:50,700 --> 00:30:56,370
State for you and in this way we get to

00:30:53,820 --> 00:30:58,140
not execute some amount of code that is

00:30:56,370 --> 00:30:59,790
unnecessary on the client and we simply

00:30:58,140 --> 00:31:01,770
assume that when they when the

00:30:59,790 --> 00:31:04,250
application gets bootstrap the state is

00:31:01,770 --> 00:31:07,710
available for

00:31:04,250 --> 00:31:09,240
now that helps with executing less code

00:31:07,710 --> 00:31:11,550
but it doesn't actually help with the

00:31:09,240 --> 00:31:14,550
tree shaker from removing the code so we

00:31:11,550 --> 00:31:17,070
need to do more work one thing we could

00:31:14,550 --> 00:31:18,570
do is we could instead of calling the

00:31:17,070 --> 00:31:21,150
function directly we could put dynamic

00:31:18,570 --> 00:31:22,559
imports at those locations and notice

00:31:21,150 --> 00:31:25,140
what we have done now we're told the

00:31:22,559 --> 00:31:27,059
state that if in that if the server did

00:31:25,140 --> 00:31:29,640
not provide state the way you get it is

00:31:27,059 --> 00:31:31,710
you go do a dynamic import at this

00:31:29,640 --> 00:31:32,880
location and you can see what the

00:31:31,710 --> 00:31:34,860
function would look like at the bottom

00:31:32,880 --> 00:31:36,570
now by booming the function at the

00:31:34,860 --> 00:31:38,550
bottom not only did we have to move the

00:31:36,570 --> 00:31:42,900
function we also had to move the

00:31:38,550 --> 00:31:45,240
services and by moving the services we

00:31:42,900 --> 00:31:47,190
have now have a component whose

00:31:45,240 --> 00:31:49,140
constructor doesn't require us to bring

00:31:47,190 --> 00:31:51,090
a lot of other dependencies in and

00:31:49,140 --> 00:31:53,400
instead we can lazy load the

00:31:51,090 --> 00:31:55,520
dependencies only if somebody decides to

00:31:53,400 --> 00:31:58,470
either click on the reload button or if

00:31:55,520 --> 00:32:00,030
the application comes and the server did

00:31:58,470 --> 00:32:02,760
not serialize the state and we actually

00:32:00,030 --> 00:32:05,190
have to actually fetch the state and so

00:32:02,760 --> 00:32:06,900
this is the basic idea or basic trick

00:32:05,190 --> 00:32:10,350
that we could do in order to put more

00:32:06,900 --> 00:32:12,210
lazy loadable boundaries into the system

00:32:10,350 --> 00:32:14,100
but for that as you can see the

00:32:12,210 --> 00:32:16,170
framework has to be helping by providing

00:32:14,100 --> 00:32:17,850
as a way of serializing the state

00:32:16,170 --> 00:32:19,890
because without serializing the state

00:32:17,850 --> 00:32:23,150
the application will always have to be

00:32:19,890 --> 00:32:26,100
in the realm of replayable applications

00:32:23,150 --> 00:32:28,380
now we can do another trick and that is

00:32:26,100 --> 00:32:29,760
notice that there is this reload method

00:32:28,380 --> 00:32:31,950
it actually doesn't really do anything

00:32:29,760 --> 00:32:34,440
other than forwards onto a method call

00:32:31,950 --> 00:32:36,330
and so perhaps we can even make this

00:32:34,440 --> 00:32:38,850
even simpler and allow us to put the

00:32:36,330 --> 00:32:41,580
import statements directly into the HTML

00:32:38,850 --> 00:32:44,130
and in this way the to-do app component

00:32:41,580 --> 00:32:47,000
becomes really really trivial and by

00:32:44,130 --> 00:32:50,070
becoming trivial it becomes a resumable

00:32:47,000 --> 00:32:52,170
and it becomes in the what we have now a

00:32:50,070 --> 00:32:54,450
world where it's easy to bootstrap

00:32:52,170 --> 00:32:56,460
individual components an as-needed basis

00:32:54,450 --> 00:32:57,900
in any order necessary in the

00:32:56,460 --> 00:32:59,910
application we no longer have to

00:32:57,900 --> 00:33:02,220
bootstrap the whole tree of applications

00:32:59,910 --> 00:33:03,720
or all tree of components using the

00:33:02,220 --> 00:33:05,850
normal bootstrapping process and we can

00:33:03,720 --> 00:33:07,590
become truly lazy and we can get to the

00:33:05,850 --> 00:33:09,179
point where we can download the code

00:33:07,590 --> 00:33:11,040
only necessary for running that

00:33:09,179 --> 00:33:11,720
particular operation of the application

00:33:11,040 --> 00:33:14,120
and nothing

00:33:11,720 --> 00:33:16,039
or the other thing I want you to point

00:33:14,120 --> 00:33:18,470
out is that the dependency injection

00:33:16,039 --> 00:33:20,210
system instead of being eager and being

00:33:18,470 --> 00:33:23,600
in the constructor of the component has

00:33:20,210 --> 00:33:26,059
moved now into a a function call and

00:33:23,600 --> 00:33:27,740
we'll only get invoked if somebody

00:33:26,059 --> 00:33:30,289
performs this particular operation and

00:33:27,740 --> 00:33:33,470
so we can do we can gain other benefits

00:33:30,289 --> 00:33:40,370
by moving the DI system over to lazy

00:33:33,470 --> 00:33:42,650
loaded parts so the thing I wanted to

00:33:40,370 --> 00:33:44,780
point out is that you can't really do

00:33:42,650 --> 00:33:46,340
this unless you have States state is the

00:33:44,780 --> 00:33:49,460
thing that makes this thing possible

00:33:46,340 --> 00:33:51,799
right and so one of the things that

00:33:49,460 --> 00:33:54,200
we're thinking about is how does state

00:33:51,799 --> 00:33:55,820
of the application is state something

00:33:54,200 --> 00:33:57,919
that angular should get in the business

00:33:55,820 --> 00:33:59,900
of should we get in the business of

00:33:57,919 --> 00:34:01,549
basically keeping track of it and if you

00:33:59,900 --> 00:34:03,770
want to do resumable applications I

00:34:01,549 --> 00:34:05,150
think the answer is yes and we need it

00:34:03,770 --> 00:34:06,679
for two reasons one because we need it

00:34:05,150 --> 00:34:09,379
for partial bootstrap right we want to

00:34:06,679 --> 00:34:11,540
have the idea that individual components

00:34:09,379 --> 00:34:13,040
can get bootstrap in any order necessary

00:34:11,540 --> 00:34:14,480
in order to get the application go on

00:34:13,040 --> 00:34:16,070
and make components that you don't need

00:34:14,480 --> 00:34:18,320
right now we shouldn't be bootstrapped

00:34:16,070 --> 00:34:20,149
just yet and we need it because we need

00:34:18,320 --> 00:34:22,250
to resume the component because without

00:34:20,149 --> 00:34:24,050
the ability to resume the component

00:34:22,250 --> 00:34:25,669
where it left off at the server we are

00:34:24,050 --> 00:34:27,530
back in the world of bootstrapping the

00:34:25,669 --> 00:34:31,460
whole system and executing all the

00:34:27,530 --> 00:34:33,859
components and so we want to place lazy

00:34:31,460 --> 00:34:36,649
loaded boundary on interactions on

00:34:33,859 --> 00:34:38,869
injected services and on code needed for

00:34:36,649 --> 00:34:40,490
rear-ending and by placing these all

00:34:38,869 --> 00:34:42,649
these lazy loading boundaries in a

00:34:40,490 --> 00:34:44,839
system it doesn't mean that you should

00:34:42,649 --> 00:34:47,089
do it everywhere what it means is that

00:34:44,839 --> 00:34:48,619
if the framework doesn't do this is the

00:34:47,089 --> 00:34:50,330
framework doesn't allow you to do this

00:34:48,619 --> 00:34:52,909
then you will have a hard time doing it

00:34:50,330 --> 00:34:54,349
on your own and by framework introducing

00:34:52,909 --> 00:34:55,399
this lazy learning boundaries it doesn't

00:34:54,349 --> 00:34:56,869
mean that you have to place them

00:34:55,399 --> 00:34:58,609
everywhere you have to still decide

00:34:56,869 --> 00:35:00,530
whether it makes sense or not but you

00:34:58,609 --> 00:35:03,050
have the capability that you didn't have

00:35:00,530 --> 00:35:05,570
before and so I feel like this is

00:35:03,050 --> 00:35:07,970
something an important change that would

00:35:05,570 --> 00:35:10,280
allow you to build faster applications

00:35:07,970 --> 00:35:13,970
and really have systems which are fully

00:35:10,280 --> 00:35:16,250
laced loadable so how do we send this

00:35:13,970 --> 00:35:18,109
state from the server to the client you

00:35:16,250 --> 00:35:19,760
know one thing because the state as I

00:35:18,109 --> 00:35:21,560
said has annotated inside of your

00:35:19,760 --> 00:35:23,930
components we know which ones to collect

00:35:21,560 --> 00:35:25,369
and we would also be able to we also

00:35:23,930 --> 00:35:27,079
have a constraint that says the state

00:35:25,369 --> 00:35:29,359
would have to be JSON serializable and

00:35:27,079 --> 00:35:31,190
so as a result it will be really easy to

00:35:29,359 --> 00:35:32,509
collect all of the state we know the

00:35:31,190 --> 00:35:34,460
structure of the application and then

00:35:32,509 --> 00:35:36,019
place it at the bottom of the rendered

00:35:34,460 --> 00:35:38,690
HTML that's being shipped to the client

00:35:36,019 --> 00:35:40,970
and so in this way this state can get

00:35:38,690 --> 00:35:45,380
parsed an as-needed basis when the

00:35:40,970 --> 00:35:47,089
components are bringing in and I cannot

00:35:45,380 --> 00:35:49,069
over stress this that app is a

00:35:47,089 --> 00:35:50,900
collection of components and their thing

00:35:49,069 --> 00:35:53,749
we are looking for is how to boost your

00:35:50,900 --> 00:35:56,900
app each component individually so that

00:35:53,749 --> 00:35:58,249
we can get as little code nests in as

00:35:56,900 --> 00:36:01,099
necessary this is in a stark contrast

00:35:58,249 --> 00:36:02,690
from the Howey bootstrap applications

00:36:01,099 --> 00:36:05,269
today where we would strap the whole

00:36:02,690 --> 00:36:08,470
thing all at once here we really want to

00:36:05,269 --> 00:36:11,569
go down to individual component level

00:36:08,470 --> 00:36:13,999
however this creates a problem and the

00:36:11,569 --> 00:36:17,390
problem it creates is if you have an a

00:36:13,999 --> 00:36:19,369
an item inside of our to-do list and we

00:36:17,390 --> 00:36:21,289
have a toggle over here notice that the

00:36:19,369 --> 00:36:23,749
toggle is changing what's essentially a

00:36:21,289 --> 00:36:25,220
global state you know the toggle when it

00:36:23,749 --> 00:36:27,200
when it calls I mean changes the

00:36:25,220 --> 00:36:30,200
completed to not complete it for your

00:36:27,200 --> 00:36:31,880
particular to-do item it doesn't know

00:36:30,200 --> 00:36:34,970
who else is listening for this

00:36:31,880 --> 00:36:37,130
particular property we don't know who

00:36:34,970 --> 00:36:38,869
else is who could else have a

00:36:37,130 --> 00:36:41,150
potentially have a reference to this

00:36:38,869 --> 00:36:42,470
object and as a result because you have

00:36:41,150 --> 00:36:43,970
a reference to this object your change

00:36:42,470 --> 00:36:45,589
detection has to run on the way we solve

00:36:43,970 --> 00:36:47,660
this today is we have zone J's that

00:36:45,589 --> 00:36:50,269
detects these kinds of changes and then

00:36:47,660 --> 00:36:52,640
zone J's calls updates the application

00:36:50,269 --> 00:36:55,460
globally to update for therefore this to

00:36:52,640 --> 00:36:58,160
occur the problem is that if you

00:36:55,460 --> 00:37:00,619
individually load components into your

00:36:58,160 --> 00:37:03,289
application you don't know what other

00:37:00,619 --> 00:37:05,839
components have to be loaded when you

00:37:03,289 --> 00:37:09,950
change a state that potentially other

00:37:05,839 --> 00:37:12,170
components could refer to and so we have

00:37:09,950 --> 00:37:14,119
to fix this particular problem because

00:37:12,170 --> 00:37:16,249
if we don't fix it you will very quickly

00:37:14,119 --> 00:37:18,109
get in a situation that any mutation

00:37:16,249 --> 00:37:19,849
will require you to load all the

00:37:18,109 --> 00:37:23,180
components that we have worked hard to

00:37:19,849 --> 00:37:26,239
make sure that all lazy loadable and so

00:37:23,180 --> 00:37:28,489
the way to do this is first we can pull

00:37:26,239 --> 00:37:33,019
we can mark the item as being a state as

00:37:28,489 --> 00:37:34,670
well but we can also pull out the the

00:37:33,019 --> 00:37:36,410
mutation as you can see into a separate

00:37:34,670 --> 00:37:38,950
function and the key thing over here is

00:37:36,410 --> 00:37:42,170
that not only is

00:37:38,950 --> 00:37:43,910
Jason serializable but we'll also make

00:37:42,170 --> 00:37:46,670
sure that the state is not mutable and

00:37:43,910 --> 00:37:49,370
by making it not mutable we're basically

00:37:46,670 --> 00:37:50,930
allowing the the code here to create a

00:37:49,370 --> 00:37:54,650
new state that it's allowed to write

00:37:50,930 --> 00:37:57,380
back into it and change it and it knows

00:37:54,650 --> 00:37:59,000
that it it hasn't modified some global

00:37:57,380 --> 00:38:00,740
variables somewhere that some other

00:37:59,000 --> 00:38:02,210
component might be referring to which

00:38:00,740 --> 00:38:04,880
might require the other component to be

00:38:02,210 --> 00:38:06,770
updated now if you do that what is then

00:38:04,880 --> 00:38:09,770
also required is that the state also

00:38:06,770 --> 00:38:12,320
fires an event and says by the way I

00:38:09,770 --> 00:38:16,190
have changed does anybody care about the

00:38:12,320 --> 00:38:17,750
fact that I have changed and so in this

00:38:16,190 --> 00:38:19,220
case when we go back to the to-do app

00:38:17,750 --> 00:38:22,880
component and if you look at the first

00:38:19,220 --> 00:38:25,490
line above that says ng4 in there we say

00:38:22,880 --> 00:38:27,800
okay if one of these items have changed

00:38:25,490 --> 00:38:29,840
please let me know and if you think

00:38:27,800 --> 00:38:32,420
about it this is exactly how input boxes

00:38:29,840 --> 00:38:35,660
work today in HTML if you have an input

00:38:32,420 --> 00:38:38,960
box a text node inside of your Dom tree

00:38:35,660 --> 00:38:40,850
the text node doesn't mutate some global

00:38:38,960 --> 00:38:42,680
state instead the text node replaces the

00:38:40,850 --> 00:38:45,800
value with the new value every time you

00:38:42,680 --> 00:38:48,080
type into it and whenever the value has

00:38:45,800 --> 00:38:50,600
changed it fires an event that you have

00:38:48,080 --> 00:38:52,700
to listen to so that the out the higher

00:38:50,600 --> 00:38:54,010
so that the application can do something

00:38:52,700 --> 00:38:56,300
useful with this information

00:38:54,010 --> 00:38:58,610
we're basically bringing the same exact

00:38:56,300 --> 00:39:00,830
thing over here we're saying look would

00:38:58,610 --> 00:39:03,920
a what the to-do item is is a more

00:39:00,830 --> 00:39:05,780
complicated check input box that has a

00:39:03,920 --> 00:39:07,580
more complicated model than just a

00:39:05,780 --> 00:39:10,790
string but fundamentally it's the same

00:39:07,580 --> 00:39:13,850
thing and whenever that model mutates we

00:39:10,790 --> 00:39:16,730
need to know about it and so the State

00:39:13,850 --> 00:39:18,830
annotation could also automatically fire

00:39:16,730 --> 00:39:20,810
a change event to let us know that oh by

00:39:18,830 --> 00:39:22,460
the way I have changed do you want to do

00:39:20,810 --> 00:39:25,280
something about it and so at this level

00:39:22,460 --> 00:39:27,650
we can also grab it and then do the same

00:39:25,280 --> 00:39:29,660
exact thing for an array by looking for

00:39:27,650 --> 00:39:31,190
the old component in the old item in the

00:39:29,660 --> 00:39:33,170
array and replacing it with a new item

00:39:31,190 --> 00:39:35,090
in array and then updating the state and

00:39:33,170 --> 00:39:36,710
then there could be a component above us

00:39:35,090 --> 00:39:38,210
who will also get notified that we have

00:39:36,710 --> 00:39:40,730
changed our state empty component cares

00:39:38,210 --> 00:39:44,960
it would automatically be a bootstrap

00:39:40,730 --> 00:39:47,000
and laser loaded etc now one thing that

00:39:44,960 --> 00:39:49,670
I'm I'm also thinking about is if you

00:39:47,000 --> 00:39:51,050
notice how the item change and the item

00:39:49,670 --> 00:39:52,670
the in the square

00:39:51,050 --> 00:39:55,100
bracket in the item event in the

00:39:52,670 --> 00:39:57,400
parentheses they have they look very

00:39:55,100 --> 00:40:00,110
very close to be a banana in the box

00:39:57,400 --> 00:40:02,840
thing and so it is probably possible

00:40:00,110 --> 00:40:04,550
through some heuristics to even simplify

00:40:02,840 --> 00:40:06,350
that so that you want does not even have

00:40:04,550 --> 00:40:11,600
to write this line and it will just

00:40:06,350 --> 00:40:13,520
automatically be updated for it so again

00:40:11,600 --> 00:40:14,120
those are just some ideas we're thinking

00:40:13,520 --> 00:40:17,900
about it

00:40:14,120 --> 00:40:21,080
and that's the reminder again and we

00:40:17,900 --> 00:40:22,670
want you to to be with us on the journey

00:40:21,080 --> 00:40:23,660
and want you to understand that this is

00:40:22,670 --> 00:40:25,100
not necessarily something that will

00:40:23,660 --> 00:40:27,350
happen anytime soon but it is something

00:40:25,100 --> 00:40:29,120
that we're thinking about because we

00:40:27,350 --> 00:40:31,130
want to choose to be us excited about

00:40:29,120 --> 00:40:33,290
the future about angular as we are and

00:40:31,130 --> 00:40:34,850
unless we tell you about the cool new

00:40:33,290 --> 00:40:38,570
things we're thinking about it's kind of

00:40:34,850 --> 00:40:43,130
hard for you to to see what we're where

00:40:38,570 --> 00:40:45,320
we trying to take the project and we

00:40:43,130 --> 00:40:46,850
also want to be more open about what

00:40:45,320 --> 00:40:48,350
we're thinking about where we going and

00:40:46,850 --> 00:40:52,670
have a process by which we can engage

00:40:48,350 --> 00:40:54,620
the community more in these ideas but

00:40:52,670 --> 00:40:56,000
keep in mind that just these are idea

00:40:54,620 --> 00:40:58,340
phases doesn't mean all of it will

00:40:56,000 --> 00:41:00,680
happen and will happen soon etc all the

00:40:58,340 --> 00:41:03,650
standard caveats and finally I want to

00:41:00,680 --> 00:41:05,870
really remind you is that some of these

00:41:03,650 --> 00:41:08,180
things might be why did you move in my

00:41:05,870 --> 00:41:10,240
cheese I'm already familiar with it but

00:41:08,180 --> 00:41:12,650
keep in mind well that we have a huge

00:41:10,240 --> 00:41:14,780
corpus of applications at Google and

00:41:12,650 --> 00:41:16,970
whenever we do any changes we have to

00:41:14,780 --> 00:41:19,580
have also upgrade those applications so

00:41:16,970 --> 00:41:22,250
we are extremely incentivized to do

00:41:19,580 --> 00:41:24,140
things that bring the community visit

00:41:22,250 --> 00:41:26,060
with us and so we have invested a lot of

00:41:24,140 --> 00:41:29,570
time and effort into all kinds of tools

00:41:26,060 --> 00:41:31,550
that allow us to to automatically

00:41:29,570 --> 00:41:33,500
upgrade the applications and so on and

00:41:31,550 --> 00:41:36,020
so whatever things we are looking for in

00:41:33,500 --> 00:41:38,880
the future will be things where we can

00:41:36,020 --> 00:41:40,900
bring the community with us thank you

00:41:38,880 --> 00:41:42,960
[Applause]

00:41:40,900 --> 00:41:42,960
you

00:41:46,780 --> 00:41:53,400
[Music]

00:41:58,970 --> 00:42:01,030

YouTube URL: https://www.youtube.com/watch?v=-kYtw3CSe6s


