Title: These ARE the Angular tips you are looking for | John Papa
Publication date: 2019-05-02
Playlist: ng-conf 2019
Description: 
	A long time ago in a galaxy far, far away â€¦ as a Mandalorian bounty hunter, you honed your Angular skills with the Tour of Heroes. Youâ€™re searching for the next steps to enhancing your Angular apps through improving the user experience, maintainability, and scalability. Look no further!

Youâ€™ll see how to guard your components and routes from Stormtrooper forces. Identify and defeat bugs through debugging your app using the Jedi force (and VS Code). Youâ€™ll learn how to host your app in the Cloud City of Bespin (cloud storage), rebel against servers and shift your APIs to serverless, and help R2D2 monitor your appâ€™s activity. Youâ€™ll discover the power of Angular APIs, tooling, and the cloud ARE the tips you have been looking for.

Static site ðŸ‘‰ https://aka.ms/code-storage
Serverless ðŸ‘‰ https://aka.ms/code-functions
Extensions ðŸ‘‰ https://aka.ms/code-az
ngrx/data ðŸ‘‰ https://next.ngrx.io/guide/data
Slides ðŸ‘‰ https://slides.com/johnpapa/ngconf2019-3-angular-tips#/

ng-conf is a three-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the globe converge on Salt Lake City, UT every year to attend talks and workshops by the Angular team and community experts.

Follow us on twitter https://twitter.com/ngconf
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:07,920 --> 00:00:11,170
[Music]

00:00:11,870 --> 00:00:20,460
how y'all doing good I got the loud boys

00:00:17,609 --> 00:00:23,070
up front up here oh my i love the

00:00:20,460 --> 00:00:24,359
t-shirts folks i don't know if you can

00:00:23,070 --> 00:00:31,260
all see that but they all the t-shirts

00:00:24,359 --> 00:00:32,730
say i love Dan wah lean yes that's what

00:00:31,260 --> 00:00:35,550
you get for trying to play a joke on me

00:00:32,730 --> 00:00:37,350
so welcome ball to ng cough really

00:00:35,550 --> 00:00:39,570
excited to be here this year and as we

00:00:37,350 --> 00:00:41,370
were preparing talks I had a lot of

00:00:39,570 --> 00:00:42,989
things that I wanted to talk about but I

00:00:41,370 --> 00:00:45,690
thought about the people in this room

00:00:42,989 --> 00:00:49,860
first and all of you think about the

00:00:45,690 --> 00:00:51,780
combined brainpower in this room and how

00:00:49,860 --> 00:00:53,969
much angular you have all written

00:00:51,780 --> 00:00:54,840
together collectively I mean give

00:00:53,969 --> 00:00:56,789
yourselves a round of applause right

00:00:54,840 --> 00:01:01,770
here I mean you guys have done so much

00:00:56,789 --> 00:01:04,439
and think about all the problems and

00:01:01,770 --> 00:01:05,880
challenges you've overcome I mean that's

00:01:04,439 --> 00:01:07,830
why we do this right if it was easy

00:01:05,880 --> 00:01:09,659
everybody would do it but it's fun

00:01:07,830 --> 00:01:11,430
because you get to try things you're

00:01:09,659 --> 00:01:12,900
running the challenges you work with

00:01:11,430 --> 00:01:14,939
your friends if you have friends and

00:01:12,900 --> 00:01:16,680
then you can work with him and kind of

00:01:14,939 --> 00:01:20,430
solve the problems if you don't Dan's

00:01:16,680 --> 00:01:22,080
willing to be yours so what I'd like to

00:01:20,430 --> 00:01:24,270
talk about today was the people who are

00:01:22,080 --> 00:01:26,130
going to these challenges sometimes we

00:01:24,270 --> 00:01:27,900
get new people to angular and they have

00:01:26,130 --> 00:01:29,520
to figure out how do we solve these same

00:01:27,900 --> 00:01:32,520
problems that all of these experts are

00:01:29,520 --> 00:01:35,790
solving and even the experts end up

00:01:32,520 --> 00:01:38,310
having problems as well so let's talk

00:01:35,790 --> 00:01:39,600
about today three specific problems that

00:01:38,310 --> 00:01:41,549
you can have when you're working with

00:01:39,600 --> 00:01:46,409
angular and how you can think through

00:01:41,549 --> 00:01:47,939
solving these all right so today we're

00:01:46,409 --> 00:01:49,740
talking about these three angular tips

00:01:47,939 --> 00:01:52,979
the first we can talk about is have any

00:01:49,740 --> 00:01:54,680
of you here use this technology rxjs

00:01:52,979 --> 00:01:57,840
all right it's pretty cool isn't it and

00:01:54,680 --> 00:01:59,100
rxjs it does a lot of things well

00:01:57,840 --> 00:02:00,360
there's a couple different things along

00:01:59,100 --> 00:02:02,490
the wait you might run into when you're

00:02:00,360 --> 00:02:04,500
doing rxjs and we'll look at how we can

00:02:02,490 --> 00:02:07,140
solve some of those challenges the next

00:02:04,500 --> 00:02:09,479
one is state management thanks to

00:02:07,140 --> 00:02:11,190
Brandon and Mike brain Roberts Mike Ryan

00:02:09,479 --> 00:02:12,900
they did great work on this we have a

00:02:11,190 --> 00:02:14,080
great ngrick state management tool that

00:02:12,900 --> 00:02:15,819
a lot of us you

00:02:14,080 --> 00:02:17,230
there's some things along the way that

00:02:15,819 --> 00:02:18,670
can be challenging with this that you

00:02:17,230 --> 00:02:21,190
can overcome we'll talk about how you

00:02:18,670 --> 00:02:23,590
get through those and then finally cloud

00:02:21,190 --> 00:02:25,810
services how do we take our app and

00:02:23,590 --> 00:02:27,880
deploy them to the cloud when we're done

00:02:25,810 --> 00:02:29,230
and what do we really want to do because

00:02:27,880 --> 00:02:31,599
there's about a hundred and one ways to

00:02:29,230 --> 00:02:33,670
get it to the cloud what are our goals

00:02:31,599 --> 00:02:35,500
do we care about performance or

00:02:33,670 --> 00:02:37,900
scalability or security or anything like

00:02:35,500 --> 00:02:39,790
that do you care how much it costs do we

00:02:37,900 --> 00:02:41,080
make care of it's easy so we're gonna

00:02:39,790 --> 00:02:45,880
talk through these three different tips

00:02:41,080 --> 00:02:47,830
today first let's start off the rxjs one

00:02:45,880 --> 00:02:49,600
of the most common problems we run to is

00:02:47,830 --> 00:02:51,400
subscriptions we would create our own

00:02:49,600 --> 00:02:53,200
observables and we get all these

00:02:51,400 --> 00:02:55,420
subscriptions but we have to make sure

00:02:53,200 --> 00:02:58,540
we manage these because what happens if

00:02:55,420 --> 00:03:03,940
you subscribe to something and you don't

00:02:58,540 --> 00:03:05,980
unsubscribe anybody it's a leak yes it's

00:03:03,940 --> 00:03:07,599
a leak in the building so you get a leak

00:03:05,980 --> 00:03:09,280
with your application and these can add

00:03:07,599 --> 00:03:10,959
up and be a problem over time and

00:03:09,280 --> 00:03:12,819
there's several patterns for you to deal

00:03:10,959 --> 00:03:15,489
with this now I'm here to tell you that

00:03:12,819 --> 00:03:17,170
in demo world and I'm a presenter so in

00:03:15,489 --> 00:03:19,120
demo world everything always works right

00:03:17,170 --> 00:03:21,220
and there's always one subscription and

00:03:19,120 --> 00:03:22,840
you unsubscribe once but in real world

00:03:21,220 --> 00:03:25,570
apps you might have a lot of

00:03:22,840 --> 00:03:27,010
subscriptions what happens if the first

00:03:25,570 --> 00:03:28,660
couple you want subscribe but then you

00:03:27,010 --> 00:03:31,900
forget or somebody else looks your code

00:03:28,660 --> 00:03:34,810
it can become an issue so let's take a

00:03:31,900 --> 00:03:37,299
look here one technique to deal with

00:03:34,810 --> 00:03:39,640
unsubscribing two subscriptions is to

00:03:37,299 --> 00:03:41,380
just unsubscribe manually like this so

00:03:39,640 --> 00:03:43,630
here we're defining our subscriptions up

00:03:41,380 --> 00:03:45,609
top then we're setting our subscriptions

00:03:43,630 --> 00:03:48,100
to a variable and then we're going to

00:03:45,609 --> 00:03:50,019
destroy our subscriptions this

00:03:48,100 --> 00:03:51,190
absolutely works there's only two on

00:03:50,019 --> 00:03:53,560
here because that's all I could fit on

00:03:51,190 --> 00:03:56,019
the slide but what if you have more what

00:03:53,560 --> 00:03:58,600
happens when the next one comes in are

00:03:56,019 --> 00:04:01,329
you going to remember to both create the

00:03:58,600 --> 00:04:03,430
top variable and put it in the ng

00:04:01,329 --> 00:04:05,440
ondestroy at the bottom you're gonna do

00:04:03,430 --> 00:04:06,760
a lot of copy and paste magic I mean

00:04:05,440 --> 00:04:09,340
this works but it's a little bit more

00:04:06,760 --> 00:04:10,660
code that you might want to deal with so

00:04:09,340 --> 00:04:12,250
there's another option there's something

00:04:10,660 --> 00:04:14,650
called the take until strategy

00:04:12,250 --> 00:04:16,900
I made that word up it's using the take

00:04:14,650 --> 00:04:19,120
until operator and here what you do is

00:04:16,900 --> 00:04:22,349
you use a pipe and you put a take and

00:04:19,120 --> 00:04:24,909
till into it now this works as well but

00:04:22,349 --> 00:04:26,620
there's a couple caveats here so the

00:04:24,909 --> 00:04:27,250
first caveat is if you already have a

00:04:26,620 --> 00:04:29,470
pipe it's

00:04:27,250 --> 00:04:31,870
pretty easy to just tack take until it's

00:04:29,470 --> 00:04:35,020
a as the last one and you want to make

00:04:31,870 --> 00:04:36,430
it the last one in your pipe but what if

00:04:35,020 --> 00:04:38,590
you didn't have a pipe already if this

00:04:36,430 --> 00:04:40,540
was just get customers and then it would

00:04:38,590 --> 00:04:43,030
subscribe you'd have to add the pipe

00:04:40,540 --> 00:04:44,770
just add the take until to do this and

00:04:43,030 --> 00:04:46,690
you have to create like a notifier or

00:04:44,770 --> 00:04:49,330
some variable that you stick in the ng

00:04:46,690 --> 00:04:52,270
on destroy that does it all but you have

00:04:49,330 --> 00:04:54,880
to make this last or do you have to make

00:04:52,270 --> 00:04:57,850
it kind of last this works until it

00:04:54,880 --> 00:04:59,980
doesn't work so the rule of always make

00:04:57,850 --> 00:05:02,230
it last doesn't always work if you're

00:04:59,980 --> 00:05:04,840
doing things like a share replay and you

00:05:02,230 --> 00:05:06,640
can read this blog post by max ng wizard

00:05:04,840 --> 00:05:09,460
at the bottom of the page on his site

00:05:06,640 --> 00:05:11,890
and learn more about this so this take

00:05:09,460 --> 00:05:13,750
until works until it doesn't work and

00:05:11,890 --> 00:05:15,669
maybe you haven't run into this but you

00:05:13,750 --> 00:05:17,890
might maybe you've already run into it

00:05:15,669 --> 00:05:22,870
and read this great blog post so what do

00:05:17,890 --> 00:05:24,340
you do you stop using rxjs know we love

00:05:22,870 --> 00:05:25,930
our exchange and it works great does

00:05:24,340 --> 00:05:28,840
great stuff for us so how do you do this

00:05:25,930 --> 00:05:30,669
so a good friend of mine Ward Bell sat

00:05:28,840 --> 00:05:32,169
down one day when Dan Welling and I were

00:05:30,669 --> 00:05:33,340
talking to him about this but like you

00:05:32,169 --> 00:05:34,510
know it'd be really great if you just

00:05:33,340 --> 00:05:36,790
create like an array of these

00:05:34,510 --> 00:05:38,770
subscriptions we can automatically track

00:05:36,790 --> 00:05:41,080
that array and then just destroy them

00:05:38,770 --> 00:05:44,200
all at once and the code isn't that hard

00:05:41,080 --> 00:05:45,520
but being Ward Bell Ward bells like I

00:05:44,200 --> 00:05:48,520
can whip it out in five minutes

00:05:45,520 --> 00:05:50,500
I said name that tune and word created

00:05:48,520 --> 00:05:52,510
this great thing called sub sink so you

00:05:50,500 --> 00:05:54,910
can see here if you use sub sink you

00:05:52,510 --> 00:05:56,950
just create one sub sink and then you

00:05:54,910 --> 00:05:59,979
add all of your subscriptions to it and

00:05:56,950 --> 00:06:01,720
then at the end you unsubscribe so just

00:05:59,979 --> 00:06:04,510
to show that really closely all you do

00:06:01,720 --> 00:06:06,220
is add your subscriptions one at a time

00:06:04,510 --> 00:06:07,870
and then you have one line of code up

00:06:06,220 --> 00:06:10,030
top one line of code on the bottom and

00:06:07,870 --> 00:06:13,390
it cleans up all of your subscriptions

00:06:10,030 --> 00:06:14,380
in your code so the key here is destroys

00:06:13,390 --> 00:06:16,630
them all at once

00:06:14,380 --> 00:06:17,919
makes it super easy to do and there's

00:06:16,630 --> 00:06:18,490
really no extra repetitive code

00:06:17,919 --> 00:06:21,070
maintenance

00:06:18,490 --> 00:06:22,750
so you just npm install sub sink and

00:06:21,070 --> 00:06:24,340
give thanks to Ward Bell when you see

00:06:22,750 --> 00:06:27,850
with the conference if you haven't seen

00:06:24,340 --> 00:06:28,300
them yet you will if you don't know what

00:06:27,850 --> 00:06:34,210
I mean

00:06:28,300 --> 00:06:37,150
ask your neighbor so second tip we move

00:06:34,210 --> 00:06:39,039
along and I'll relate it to rxjs there's

00:06:37,150 --> 00:06:40,330
this thing called ng rx which is built

00:06:39,039 --> 00:06:42,099
on the Redux pattern

00:06:40,330 --> 00:06:44,229
and it helps us manage state nor

00:06:42,099 --> 00:06:46,330
applications and what I really love

00:06:44,229 --> 00:06:48,759
about Mike and Brandon the creators of

00:06:46,330 --> 00:06:50,199
this library was Rob Wormald is they

00:06:48,759 --> 00:06:51,759
always the first ones to say not

00:06:50,199 --> 00:06:53,500
everybody needs to use this there's a

00:06:51,759 --> 00:06:55,690
point in your app that you need to use

00:06:53,500 --> 00:06:58,979
it when you have a lot of state that

00:06:55,690 --> 00:07:01,210
you're sharing across it that's great

00:06:58,979 --> 00:07:03,610
but what happens when you have a lot of

00:07:01,210 --> 00:07:05,409
domain models so it's a great powerful

00:07:03,610 --> 00:07:07,479
state management tool but when you have

00:07:05,409 --> 00:07:09,789
two models there's a little bit of code

00:07:07,479 --> 00:07:12,039
when you have 20 the code grows when you

00:07:09,789 --> 00:07:13,539
have a hundred or 200 models you've got

00:07:12,039 --> 00:07:15,610
a lot of code in your application that

00:07:13,539 --> 00:07:17,590
you're managing so there's different

00:07:15,610 --> 00:07:18,610
things you can do and we all love the

00:07:17,590 --> 00:07:20,440
state management tool because we get

00:07:18,610 --> 00:07:22,479
this awesome Chrome extension the

00:07:20,440 --> 00:07:24,039
time-travelling debugging which I love

00:07:22,479 --> 00:07:26,050
going home and telling my wife like

00:07:24,039 --> 00:07:28,360
what'd you do today I did time-traveling

00:07:26,050 --> 00:07:31,870
debugging she's like that's cool now

00:07:28,360 --> 00:07:33,250
make dinner time traveling debugging is

00:07:31,870 --> 00:07:34,539
awesome we get all this great stuff with

00:07:33,250 --> 00:07:36,669
it but how do we get it without the

00:07:34,539 --> 00:07:38,469
extra code if you don't know what I mean

00:07:36,669 --> 00:07:41,530
by the extra code look here on the left

00:07:38,469 --> 00:07:42,370
here's an application running ng rx with

00:07:41,530 --> 00:07:44,469
two models

00:07:42,370 --> 00:07:47,380
villains and heroes from the tour heroes

00:07:44,469 --> 00:07:49,419
we have actions we have effects for

00:07:47,380 --> 00:07:50,620
hitting the database we have reducers of

00:07:49,419 --> 00:07:53,289
functions for our state we have

00:07:50,620 --> 00:07:57,009
dispatchers to fire off our actions wave

00:07:53,289 --> 00:07:58,630
action creators we have selectors and we

00:07:57,009 --> 00:08:00,479
have a chicken and a tree we've got

00:07:58,630 --> 00:08:04,509
everything it's all on the application

00:08:00,479 --> 00:08:08,380
what if we could do it in two files or

00:08:04,509 --> 00:08:09,789
one without all that extra code well

00:08:08,380 --> 00:08:11,860
wait a minute what do you lose in there

00:08:09,789 --> 00:08:14,590
so the key here is we have a problem

00:08:11,860 --> 00:08:16,360
we've got 100 models if each model has

00:08:14,590 --> 00:08:18,279
to have all those things there could be

00:08:16,360 --> 00:08:19,960
thousands of lines of code to manage

00:08:18,279 --> 00:08:21,460
those things which means every line of

00:08:19,960 --> 00:08:26,620
code you writes an opportunity for what

00:08:21,460 --> 00:08:29,219
a bug maintenance refactoring copy paste

00:08:26,620 --> 00:08:31,240
code which always works right copypasta

00:08:29,219 --> 00:08:31,870
you never really know exactly what's

00:08:31,240 --> 00:08:35,620
happening there

00:08:31,870 --> 00:08:36,969
I like the code blind personally so what

00:08:35,620 --> 00:08:39,370
can you do about this well a lot of that

00:08:36,969 --> 00:08:40,990
code is very repetitive so about a year

00:08:39,370 --> 00:08:42,640
and a half ago sitting down with my

00:08:40,990 --> 00:08:44,199
buddies Ward Bell and Dan valine and we

00:08:42,640 --> 00:08:45,459
were talking about this thinking it'd be

00:08:44,199 --> 00:08:47,949
really great if we could use this tool

00:08:45,459 --> 00:08:50,649
in our scenarios we have a lot of crud

00:08:47,949 --> 00:08:51,850
in our applications let's talk about

00:08:50,649 --> 00:08:53,650
crud

00:08:51,850 --> 00:08:54,820
you may not think you're using a lot of

00:08:53,650 --> 00:08:56,500
it but think about a lot of the apps

00:08:54,820 --> 00:08:58,330
you're doing you've got orders you get

00:08:56,500 --> 00:09:00,220
products you got customers you've got

00:08:58,330 --> 00:09:02,200
items you've got marketing you've got

00:09:00,220 --> 00:09:03,850
all these things in your app and you're

00:09:02,200 --> 00:09:06,160
inserting and deleting and updating and

00:09:03,850 --> 00:09:07,990
selecting from these things it's very

00:09:06,160 --> 00:09:10,990
common with your entity models to do

00:09:07,990 --> 00:09:12,340
this and it's very repetitive to have to

00:09:10,990 --> 00:09:14,920
create the same code over and over for

00:09:12,340 --> 00:09:18,040
it but you want the value of ng r x so

00:09:14,920 --> 00:09:21,700
using things like generics we can

00:09:18,040 --> 00:09:25,300
refactor away and make it easier to use

00:09:21,700 --> 00:09:26,950
the same code just using generics so we

00:09:25,300 --> 00:09:27,870
have all the actions effects reducers

00:09:26,950 --> 00:09:30,040
out of the box

00:09:27,870 --> 00:09:31,810
so with two files we can do this whole

00:09:30,040 --> 00:09:33,790
thing I mean reiterate to files so you

00:09:31,810 --> 00:09:35,500
can do the whole thing same to the ng rx

00:09:33,790 --> 00:09:37,150
so if your issue before the ng rx was

00:09:35,500 --> 00:09:39,100
too much code I don't want to go down

00:09:37,150 --> 00:09:41,620
that road but Mike and Brandon are such

00:09:39,100 --> 00:09:43,270
nice guys now you've got a reason to try

00:09:41,620 --> 00:09:45,220
this as well and this can really be a

00:09:43,270 --> 00:09:47,800
great use case for about 80% of the code

00:09:45,220 --> 00:09:52,360
that's your right so I want to show you

00:09:47,800 --> 00:09:53,560
ng rx with and your X data and without

00:09:52,360 --> 00:10:01,000
it and then what kind of show you where

00:09:53,560 --> 00:10:05,530
he can lead to all right so if we go

00:10:01,000 --> 00:10:07,930
back over to our code here here is ng rx

00:10:05,530 --> 00:10:09,400
in an app and I'll give you links to all

00:10:07,930 --> 00:10:11,380
the source code later that you have in

00:10:09,400 --> 00:10:13,480
this application we can see we've got a

00:10:11,380 --> 00:10:15,760
store over here and these are the code

00:10:13,480 --> 00:10:18,910
files we just looked at a moment ago so

00:10:15,760 --> 00:10:21,550
here I've got my hero actions and this

00:10:18,910 --> 00:10:23,920
might look familiar to you so here we've

00:10:21,550 --> 00:10:26,920
got a top our add hero with our add hero

00:10:23,920 --> 00:10:28,210
success and add hero error and all these

00:10:26,920 --> 00:10:31,500
different actions it kind of looks like

00:10:28,210 --> 00:10:35,830
scrolling quotes from a movie you know

00:10:31,500 --> 00:10:37,810
in a land before time and then at the

00:10:35,830 --> 00:10:39,010
bottom we've got all of our types that

00:10:37,810 --> 00:10:42,610
we just concatenate together with the

00:10:39,010 --> 00:10:44,860
Union so we can use those and again 124

00:10:42,610 --> 00:10:46,720
lines of code to go down that road we

00:10:44,860 --> 00:10:48,310
got the same thing for villains what

00:10:46,720 --> 00:10:49,750
about our effects if we choose to use

00:10:48,310 --> 00:10:52,000
effects with it so we can talk to our

00:10:49,750 --> 00:10:53,820
database about 71 lines of code which

00:10:52,000 --> 00:10:56,560
are basically using our actions and

00:10:53,820 --> 00:10:58,600
firing off these actions to like a

00:10:56,560 --> 00:11:00,910
database or an API that can go get our

00:10:58,600 --> 00:11:01,870
heroes or villains or update them and

00:11:00,910 --> 00:11:05,899
then when they're done

00:11:01,870 --> 00:11:09,750
fire off actions for success or failure

00:11:05,899 --> 00:11:11,519
what about our reducers our reducers are

00:11:09,750 --> 00:11:13,860
another 130 lines of code we're doing a

00:11:11,519 --> 00:11:16,199
lot of fun dot dot dot Eng using the

00:11:13,860 --> 00:11:18,120
spread operator to clone our data so we

00:11:16,199 --> 00:11:20,730
can get our state out replace state

00:11:18,120 --> 00:11:21,990
delete state add state doing all the

00:11:20,730 --> 00:11:25,410
things that we want to do in our

00:11:21,990 --> 00:11:27,389
application if we go down to our

00:11:25,410 --> 00:11:29,100
services folder here you can see that

00:11:27,389 --> 00:11:31,410
we've got a data service to actually go

00:11:29,100 --> 00:11:32,940
get our data that's the HTTP calls we've

00:11:31,410 --> 00:11:34,170
got selectors because we don't always

00:11:32,940 --> 00:11:36,180
want the entire store

00:11:34,170 --> 00:11:38,490
sometimes we want our entire list of

00:11:36,180 --> 00:11:40,019
heroes sometimes we want just one we

00:11:38,490 --> 00:11:43,019
might have special selectors we have two

00:11:40,019 --> 00:11:44,699
right and all in total if you look at

00:11:43,019 --> 00:11:48,779
all that code again everything in that

00:11:44,699 --> 00:11:50,339
folder you're looking at all that now

00:11:48,779 --> 00:11:52,680
the one thing we have to do is a little

00:11:50,339 --> 00:11:54,360
bit of fixed code upfront as well so we

00:11:52,680 --> 00:11:56,550
have this App Store module you have to

00:11:54,360 --> 00:11:59,370
create and the App Store module just

00:11:56,550 --> 00:12:04,470
pulls in my store and my effects and

00:11:59,370 --> 00:12:09,660
calls it a day now let's take a look at

00:12:04,470 --> 00:12:13,490
ng rx data so ng rx data has a store as

00:12:09,660 --> 00:12:16,019
well here's the module for the store

00:12:13,490 --> 00:12:19,500
you'll notice the store code is the same

00:12:16,019 --> 00:12:21,480
in ng RX data as it was in ng RX but

00:12:19,500 --> 00:12:23,760
here the additional line you have is you

00:12:21,480 --> 00:12:25,920
also pull in this extension and g RX

00:12:23,760 --> 00:12:28,050
data does not replace and directs it's

00:12:25,920 --> 00:12:30,810
an extension to it you're building on

00:12:28,050 --> 00:12:32,760
top of ng rx it's not a wrapper you get

00:12:30,810 --> 00:12:36,060
every single feature of ng rx

00:12:32,760 --> 00:12:37,620
out-of-the-box in addition you get a lot

00:12:36,060 --> 00:12:39,870
of this that just takes care of a lot of

00:12:37,620 --> 00:12:41,730
that crud opportunity for you so the

00:12:39,870 --> 00:12:44,069
magic is behind this in the entity

00:12:41,730 --> 00:12:46,920
config let's look at that file this is

00:12:44,069 --> 00:12:50,660
the second file here every new entity

00:12:46,920 --> 00:12:56,490
that you add will cost you a whopping

00:12:50,660 --> 00:12:58,740
one line of code want products you just

00:12:56,490 --> 00:13:01,769
add them one at a time every entity you

00:12:58,740 --> 00:13:03,540
have takes one more line of code and the

00:13:01,769 --> 00:13:05,519
rest of it goes on convention it's

00:13:03,540 --> 00:13:07,199
convention based configuration where

00:13:05,519 --> 00:13:09,930
it's assuming that if you've got a hero

00:13:07,199 --> 00:13:11,970
then the models called hero and that

00:13:09,930 --> 00:13:15,449
you've got to get hero get heroes I get

00:13:11,970 --> 00:13:17,100
hero by ID update hero delete hero you

00:13:15,449 --> 00:13:18,329
get the idea it's going through those

00:13:17,100 --> 00:13:19,529
conventions well

00:13:18,329 --> 00:13:21,809
what happens when your conventions don't

00:13:19,529 --> 00:13:23,360
work well you can override those two and

00:13:21,809 --> 00:13:26,220
configure them because we know that

00:13:23,360 --> 00:13:27,689
things that do things for you they're

00:13:26,220 --> 00:13:31,019
only good until you need it to do

00:13:27,689 --> 00:13:32,699
something different so ng rx data has a

00:13:31,019 --> 00:13:35,189
policy in here where we can override

00:13:32,699 --> 00:13:36,869
stuff for example I don't want it to get

00:13:35,189 --> 00:13:39,059
heroes and just stick an S at the end of

00:13:36,869 --> 00:13:42,449
it make my function look like something

00:13:39,059 --> 00:13:45,569
like this get heroes that would look

00:13:42,449 --> 00:13:47,730
funny I want it to be like this so to do

00:13:45,569 --> 00:13:49,350
that we have an override here for plural

00:13:47,730 --> 00:13:51,809
names to say hero is actually going to

00:13:49,350 --> 00:13:53,249
be heroes in plural form then we could

00:13:51,809 --> 00:13:55,049
do this for anything we want we can

00:13:53,249 --> 00:13:56,939
override where the api's are in the

00:13:55,049 --> 00:13:59,519
backend by convention it's API slash

00:13:56,939 --> 00:14:02,100
heroes if it's not that you can override

00:13:59,519 --> 00:14:04,170
it if I don't like the reducer that's in

00:14:02,100 --> 00:14:05,790
there you can override the reducer if

00:14:04,170 --> 00:14:08,519
you don't like the effects you can

00:14:05,790 --> 00:14:09,779
override the effects either on one thing

00:14:08,519 --> 00:14:11,339
or on many there's plenty of

00:14:09,779 --> 00:14:13,649
configuration points in here to let you

00:14:11,339 --> 00:14:15,720
do what you need to do and again the key

00:14:13,649 --> 00:14:19,019
is there's 16 lines of code in this file

00:14:15,720 --> 00:14:22,639
and all you have to do is add one line

00:14:19,019 --> 00:14:25,499
of code to each one to get to this point

00:14:22,639 --> 00:14:27,209
now the best part of this in my opinion

00:14:25,499 --> 00:14:29,699
is that it helps solve a lot of the

00:14:27,209 --> 00:14:32,309
stuff where in your application you've

00:14:29,699 --> 00:14:35,249
got a lot of code and a lot of models

00:14:32,309 --> 00:14:36,809
and now instead of having a store with

00:14:35,249 --> 00:14:39,660
all the files if you're gonna see here

00:14:36,809 --> 00:14:43,110
on the Left I'll put them side-by-side

00:14:39,660 --> 00:14:45,989
you can see all those files there in the

00:14:43,110 --> 00:14:47,569
store now here on the right the only

00:14:45,989 --> 00:14:51,589
files you have in the store are those

00:14:47,569 --> 00:14:54,869
now would that make it easier I think so

00:14:51,589 --> 00:14:56,549
so ng rx data the big catch with it was

00:14:54,869 --> 00:14:59,220
hey this was written in a garage with a

00:14:56,549 --> 00:15:00,779
couple people right so is it real well

00:14:59,220 --> 00:15:02,369
I'm happy to announce here that thanks

00:15:00,779 --> 00:15:05,489
to Brandon and Mike Ryan that they've

00:15:02,369 --> 00:15:06,899
merged ng rx data in with ng rx it's now

00:15:05,489 --> 00:15:08,730
an official part of the library to be

00:15:06,899 --> 00:15:10,589
supported by the team and you can

00:15:08,730 --> 00:15:13,860
actually check out the docs right up on

00:15:10,589 --> 00:15:16,230
the next ng RX CO and it's actually in

00:15:13,860 --> 00:15:17,579
there with version 8 of ng RX so round

00:15:16,230 --> 00:15:20,119
of applause for Brandon and Mike for

00:15:17,579 --> 00:15:20,119
taking this on

00:15:22,989 --> 00:15:28,160
these guys are pretty awesome so for my

00:15:26,569 --> 00:15:31,269
third tip I wanted to share something

00:15:28,160 --> 00:15:34,100
that I really am passionate about

00:15:31,269 --> 00:15:36,049
scaling application is important getting

00:15:34,100 --> 00:15:38,059
a single app up there is important too

00:15:36,049 --> 00:15:40,100
but one you've got hundreds of users

00:15:38,059 --> 00:15:42,019
thousands of users millions or ten

00:15:40,100 --> 00:15:43,730
millions of them it's important to know

00:15:42,019 --> 00:15:46,600
how to scale your app and worry about

00:15:43,730 --> 00:15:49,549
redundancy and performance and security

00:15:46,600 --> 00:15:50,899
there's a new term well new ish term

00:15:49,549 --> 00:15:54,619
some of you may have heard of called the

00:15:50,899 --> 00:15:57,529
jam stack the jam stack is a new type of

00:15:54,619 --> 00:15:59,119
modern web application a design if you

00:15:57,529 --> 00:16:02,360
will let's come out let's talk about

00:15:59,119 --> 00:16:04,100
this bit so the jam stack the J means

00:16:02,360 --> 00:16:06,139
it's JavaScript you've got dynamic

00:16:04,100 --> 00:16:07,339
JavaScript this is our angular I think

00:16:06,139 --> 00:16:12,319
all of you are familiar with that piece

00:16:07,339 --> 00:16:14,089
right it also has a api's so instead of

00:16:12,319 --> 00:16:16,279
talking to like databases or apps

00:16:14,089 --> 00:16:18,410
service directly it goes through api's

00:16:16,279 --> 00:16:21,410
these could be third-party api's or

00:16:18,410 --> 00:16:23,329
serverless functions for that matter and

00:16:21,410 --> 00:16:25,040
it's also got markup this could be

00:16:23,329 --> 00:16:27,439
templated markup from a static site

00:16:25,040 --> 00:16:30,230
generator something like gatsby or a CMS

00:16:27,439 --> 00:16:33,110
or a build tool for web apps something

00:16:30,230 --> 00:16:35,209
like angular as as well so we know these

00:16:33,110 --> 00:16:40,879
things these are things we all do right

00:16:35,209 --> 00:16:44,809
now notice what it's not here servers no

00:16:40,879 --> 00:16:46,489
servers a lot of this based upon server

00:16:44,809 --> 00:16:48,049
list technology and the cool thing about

00:16:46,489 --> 00:16:50,119
server list is it doesn't mean you don't

00:16:48,049 --> 00:16:53,449
have servers it'd be kind of cool if we

00:16:50,119 --> 00:16:56,389
didn't but it does mean that you just

00:16:53,449 --> 00:16:58,669
think about them less so server list is

00:16:56,389 --> 00:17:01,009
really more about not worrying about the

00:16:58,669 --> 00:17:02,329
infrastructure that's in the cloud so

00:17:01,009 --> 00:17:06,169
we'll think about why would you want to

00:17:02,329 --> 00:17:09,769
go down this road first security what do

00:17:06,169 --> 00:17:10,970
people hack servers if the server's

00:17:09,769 --> 00:17:12,559
aren't something you're managing and

00:17:10,970 --> 00:17:14,179
configuring yourself you're letting a

00:17:12,559 --> 00:17:16,130
cloud provider do it you not to worry

00:17:14,179 --> 00:17:17,659
about it nearly as much if it's a static

00:17:16,130 --> 00:17:20,240
site or a CDN there's really nothing to

00:17:17,659 --> 00:17:23,630
hack at all so that helps out here too

00:17:20,240 --> 00:17:25,929
what else do you got you've got a broken

00:17:23,630 --> 00:17:25,929
clicker

00:17:27,320 --> 00:17:32,100
there we go high performance another

00:17:30,450 --> 00:17:33,960
thing we can do with the application so

00:17:32,100 --> 00:17:36,270
high performance for honest CDN right at

00:17:33,960 --> 00:17:38,580
the front super fast to load it we can

00:17:36,270 --> 00:17:39,300
get our API server less wicked fast is

00:17:38,580 --> 00:17:41,310
there as well

00:17:39,300 --> 00:17:44,340
highly scalable because these things can

00:17:41,310 --> 00:17:46,110
scale for you on their own server list

00:17:44,340 --> 00:17:48,330
is on consumption if you use it so it

00:17:46,110 --> 00:17:49,950
just scales up it can also have zero

00:17:48,330 --> 00:17:51,240
scale if nobody's using us you're not

00:17:49,950 --> 00:17:53,700
even paying for it when you're not using

00:17:51,240 --> 00:17:55,980
it things like lambda or Azure functions

00:17:53,700 --> 00:17:57,510
for example and of course low cost in

00:17:55,980 --> 00:17:59,610
there if you put a site up there and

00:17:57,510 --> 00:18:01,110
like a storage solution and you use it

00:17:59,610 --> 00:18:02,760
with serverless technology it could cost

00:18:01,110 --> 00:18:05,580
you less than a dollar a month which is

00:18:02,760 --> 00:18:08,010
pretty darn cool so this is the Y piece

00:18:05,580 --> 00:18:10,740
and what could it look like for angular

00:18:08,010 --> 00:18:12,120
what would you be doing so the evolution

00:18:10,740 --> 00:18:14,040
of modern web let's look at what we

00:18:12,120 --> 00:18:15,630
build mostly today we used to build like

00:18:14,040 --> 00:18:17,640
two-tier applications back in the late

00:18:15,630 --> 00:18:19,500
90s then we got into this web browser

00:18:17,640 --> 00:18:21,210
with a web server then we've got like

00:18:19,500 --> 00:18:25,110
our app server model like with Java

00:18:21,210 --> 00:18:27,150
asp.net node etc hid in a database and

00:18:25,110 --> 00:18:28,850
that works good but we need a server or

00:18:27,150 --> 00:18:31,410
multiple servers to make this work

00:18:28,850 --> 00:18:33,360
with the jam stack it kind of works like

00:18:31,410 --> 00:18:36,420
this you've got a web browser and then

00:18:33,360 --> 00:18:38,400
you host the application from that and

00:18:36,420 --> 00:18:42,840
then you get your api's directly to it

00:18:38,400 --> 00:18:43,980
as well all up front in the cloud so it

00:18:42,840 --> 00:18:45,390
might look something like this in the

00:18:43,980 --> 00:18:47,850
application for us we got a web browser

00:18:45,390 --> 00:18:50,220
I'm gonna use Azure functions for it and

00:18:47,850 --> 00:18:51,960
show with a serverless API it's gonna

00:18:50,220 --> 00:18:53,700
use a proxy for manager functions so we

00:18:51,960 --> 00:18:56,610
can hit one URL and get a custom domain

00:18:53,700 --> 00:18:58,380
and use SSL if we want to and then which

00:18:56,610 --> 00:19:00,030
we should and then we can have an H to

00:18:58,380 --> 00:19:02,880
be trigger for all of our API routes

00:19:00,030 --> 00:19:04,710
instead of using node Express and we can

00:19:02,880 --> 00:19:07,160
use Azure storage to actually host the

00:19:04,710 --> 00:19:09,210
application which is just file storage

00:19:07,160 --> 00:19:13,670
so let's take a quick look at the code

00:19:09,210 --> 00:19:13,670
for this and how this can work for you

00:19:14,180 --> 00:19:19,890
all right so here's an application which

00:19:17,820 --> 00:19:21,180
I will show you the link to how you get

00:19:19,890 --> 00:19:22,770
here and you can try it all yourself

00:19:21,180 --> 00:19:24,540
later there's a github repo you can use

00:19:22,770 --> 00:19:26,160
there's a live site that you can hit and

00:19:24,540 --> 00:19:28,230
there's actually two tutorials that'll

00:19:26,160 --> 00:19:31,470
teach you how to do this up on our site

00:19:28,230 --> 00:19:33,810
so in this code what we've got here is a

00:19:31,470 --> 00:19:35,820
serverless function app in our

00:19:33,810 --> 00:19:37,770
application and we look up here there's

00:19:35,820 --> 00:19:39,600
a functions folder how do you create a

00:19:37,770 --> 00:19:41,340
server list function app

00:19:39,600 --> 00:19:43,350
easiest way to do that is if you use

00:19:41,340 --> 00:19:46,080
these as your extensions for functions

00:19:43,350 --> 00:19:49,230
all you have to do and I've got a great

00:19:46,080 --> 00:19:50,370
name here Papa funk one you come up here

00:19:49,230 --> 00:19:52,320
and you hover over these you can create

00:19:50,370 --> 00:19:53,430
a new project you click that project

00:19:52,320 --> 00:19:55,890
it'll create an ad your functions

00:19:53,430 --> 00:19:58,110
project run it locally for you and then

00:19:55,890 --> 00:19:59,880
inside of that you can create functions

00:19:58,110 --> 00:20:02,960
and here you can see I've got my heroes

00:19:59,880 --> 00:20:06,960
get function and here's my code for it

00:20:02,960 --> 00:20:09,540
it's simply just an azure function it's

00:20:06,960 --> 00:20:10,500
using typescript no doubt so we can get

00:20:09,540 --> 00:20:12,060
Oliver intellisense

00:20:10,500 --> 00:20:15,120
and we're just saying go off and call

00:20:12,060 --> 00:20:17,700
our heroes right there now the reason

00:20:15,120 --> 00:20:20,070
that I have a very small function is

00:20:17,700 --> 00:20:23,370
because I was using node Express api's

00:20:20,070 --> 00:20:24,750
before this so over here I actually have

00:20:23,370 --> 00:20:27,300
a server folder which I'm not using

00:20:24,750 --> 00:20:29,550
anymore in that server folder you're

00:20:27,300 --> 00:20:32,220
gonna see this is actually just node

00:20:29,550 --> 00:20:33,690
Express not as your functions and it's

00:20:32,220 --> 00:20:36,360
just making my node calls hitting my

00:20:33,690 --> 00:20:38,220
database doing what I need to do this

00:20:36,360 --> 00:20:40,860
file right here if I put it side-by-side

00:20:38,220 --> 00:20:45,930
but the other one no that's not

00:20:40,860 --> 00:20:47,580
side-by-side if I do it like this you're

00:20:45,930 --> 00:20:50,760
gonna see that those files are almost

00:20:47,580 --> 00:20:53,040
exactly identical other than instead of

00:20:50,760 --> 00:20:56,990
using Express up top I'm using Azure

00:20:53,040 --> 00:20:59,370
functions instead all the code is

00:20:56,990 --> 00:21:01,110
practically the same other than the one

00:20:59,370 --> 00:21:03,270
parameter here to get request and

00:21:01,110 --> 00:21:05,550
response changes from request response

00:21:03,270 --> 00:21:07,440
to pull it out of the single the context

00:21:05,550 --> 00:21:09,390
but every other line of code is exactly

00:21:07,440 --> 00:21:11,520
the same this allowed me to migrate my

00:21:09,390 --> 00:21:13,110
node Express app over to functions in

00:21:11,520 --> 00:21:16,740
less than five minutes which is pretty

00:21:13,110 --> 00:21:18,870
cool and without even being in the cloud

00:21:16,740 --> 00:21:21,240
I can come up here and I can debug it

00:21:18,870 --> 00:21:22,710
locally right through here I could say

00:21:21,240 --> 00:21:24,900
attach the node functions and run my

00:21:22,710 --> 00:21:27,360
functions locally or I can run my

00:21:24,900 --> 00:21:29,460
angular app with functions locally by

00:21:27,360 --> 00:21:32,610
clicking that button let's go ahead and

00:21:29,460 --> 00:21:34,950
do that and see what happens break the

00:21:32,610 --> 00:21:36,840
code John break the code now what's

00:21:34,950 --> 00:21:38,820
happening is vs code is compiling in the

00:21:36,840 --> 00:21:40,620
angular app it's compiling the functions

00:21:38,820 --> 00:21:43,140
app all locally no internet connection

00:21:40,620 --> 00:21:44,820
on your machine so you can run it here

00:21:43,140 --> 00:21:47,040
without hitting a cloud first so you can

00:21:44,820 --> 00:21:48,960
even do this on an airplane building

00:21:47,040 --> 00:21:50,400
everything up and when it's done it's

00:21:48,960 --> 00:21:51,900
going to launch the browser and here's

00:21:50,400 --> 00:21:54,540
the application and

00:21:51,900 --> 00:21:57,060
is the browser paused and it says paused

00:21:54,540 --> 00:22:00,390
in vs code it's about to get my list of

00:21:57,060 --> 00:22:02,550
heroes over here on the left there's my

00:22:00,390 --> 00:22:05,220
hair heroes component on the right

00:22:02,550 --> 00:22:06,690
there's my function actually that's the

00:22:05,220 --> 00:22:09,270
wrong function this is the one I wanted

00:22:06,690 --> 00:22:10,800
we'll put it over here so on the left is

00:22:09,270 --> 00:22:13,140
my angular app on the right is my

00:22:10,800 --> 00:22:15,450
function app and notice the breakpoint

00:22:13,140 --> 00:22:17,430
on the right is unverified the

00:22:15,450 --> 00:22:18,030
breakpoint on the left is hid getting my

00:22:17,430 --> 00:22:19,920
heroes

00:22:18,030 --> 00:22:23,490
that's angular I'm gonna let it continue

00:22:19,920 --> 00:22:25,350
and watch what happens now it's breaking

00:22:23,490 --> 00:22:27,600
into the functions so I'm debugging my

00:22:25,350 --> 00:22:31,020
angular app and my functions app all in

00:22:27,600 --> 00:22:33,090
one call in one computer all locally on

00:22:31,020 --> 00:22:34,500
my machine and you can see here you got

00:22:33,090 --> 00:22:37,170
both of them that you can toggle between

00:22:34,500 --> 00:22:39,600
in 1d bugger that's just pretty darn

00:22:37,170 --> 00:22:42,120
cool and then when you're done your

00:22:39,600 --> 00:22:44,730
applications running here and then when

00:22:42,120 --> 00:22:48,540
you want to deploy it all you have to do

00:22:44,730 --> 00:22:50,940
is go over to your application and I'll

00:22:48,540 --> 00:22:53,610
just minimize these folders if we go to

00:22:50,940 --> 00:22:55,560
the angular source files called dist I

00:22:53,610 --> 00:22:58,170
can right click on this folder where my

00:22:55,560 --> 00:23:00,420
app is and I can choose deploy to static

00:22:58,170 --> 00:23:03,210
website and in about a minute it'll

00:23:00,420 --> 00:23:05,790
upload it to the cloud and then I could

00:23:03,210 --> 00:23:06,900
also go and I could say alright just

00:23:05,790 --> 00:23:08,280
doing it a different way go over my

00:23:06,900 --> 00:23:10,820
functions I can hit this button here

00:23:08,280 --> 00:23:13,050
which means hit your head on the ceiling

00:23:10,820 --> 00:23:14,670
that button will push your as your

00:23:13,050 --> 00:23:17,190
functions up to the cloud as well and

00:23:14,670 --> 00:23:19,860
once it does both of those the final

00:23:17,190 --> 00:23:21,420
result is you get a link like this which

00:23:19,860 --> 00:23:23,790
you can try now if you want to pop a

00:23:21,420 --> 00:23:25,290
func as your website's net heroes and

00:23:23,790 --> 00:23:27,180
you can put a custom domain on top of

00:23:25,290 --> 00:23:29,040
this and if you hit that you get the

00:23:27,180 --> 00:23:32,070
application right here and that's

00:23:29,040 --> 00:23:33,990
running functions and the cloud with an

00:23:32,070 --> 00:23:36,450
angular application with no node servers

00:23:33,990 --> 00:23:37,230
no asp.net no app service no cost for a

00:23:36,450 --> 00:23:41,090
server at all

00:23:37,230 --> 00:23:41,090
pretty cool stuff using the jam stack

00:23:44,270 --> 00:23:48,210
there we go so the tips in this one I

00:23:46,710 --> 00:23:48,990
want to get through today we're really

00:23:48,210 --> 00:23:50,850
just how do you manage your

00:23:48,990 --> 00:23:52,350
subscriptions the sub sink is a great

00:23:50,850 --> 00:23:54,960
way to use that definitely check it out

00:23:52,350 --> 00:23:56,970
ng RX data is fantastic for manage your

00:23:54,960 --> 00:23:59,190
entities great for state management and

00:23:56,970 --> 00:24:01,170
the jam stack and that's promise you can

00:23:59,190 --> 00:24:02,880
try all these things at yourself if you

00:24:01,170 --> 00:24:04,530
take a quick screenshot of that or click

00:24:02,880 --> 00:24:05,710
on these links you'll get to them first

00:24:04,530 --> 00:24:07,899
the sub sink really is

00:24:05,710 --> 00:24:09,880
to use ng Rx you can check out the docs

00:24:07,899 --> 00:24:11,529
there's two tutorials for both the

00:24:09,880 --> 00:24:13,210
static site and the functions that you

00:24:11,529 --> 00:24:15,250
can check out and do exactly what I

00:24:13,210 --> 00:24:16,779
showed you today you can also go ahead

00:24:15,250 --> 00:24:19,059
and get the V s code extensions for

00:24:16,779 --> 00:24:20,679
deploying static sites or functions it

00:24:19,059 --> 00:24:23,020
just built right into V s code then and

00:24:20,679 --> 00:24:25,090
then finally if you want to try exactly

00:24:23,020 --> 00:24:26,620
what I did if you click that bottom link

00:24:25,090 --> 00:24:27,970
that's the github repo that gets you

00:24:26,620 --> 00:24:30,460
there and you can walk through

00:24:27,970 --> 00:24:31,659
everything that's up there and open up

00:24:30,460 --> 00:24:34,240
issues if you like to try anything else

00:24:31,659 --> 00:24:36,610
I hope you all had a great time here

00:24:34,240 --> 00:24:37,690
ng-conf and definitely share the great

00:24:36,610 --> 00:24:38,710
stuff that you're doing to everybody

00:24:37,690 --> 00:24:41,150
else because you're building awesome

00:24:38,710 --> 00:24:46,269
things with angular thank you

00:24:41,150 --> 00:24:46,269
[Applause]

00:24:50,200 --> 00:24:56,809
[Music]

00:25:02,390 --> 00:25:04,450

YouTube URL: https://www.youtube.com/watch?v=2ZFgcTOcnUg


