Title: Writing A Custom Angular Build - Steve Belovarich
Publication date: 2018-11-16
Playlist: ng-conf 2018
Description: 
	ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:02,899 --> 00:00:08,120
hold on hold on hold on see sorry guys

00:00:08,179 --> 00:00:17,670
come on take it away Steve I feel pumped

00:00:14,820 --> 00:00:19,470
now all right I'm ready to do this all

00:00:17,670 --> 00:00:21,949
right everybody this is writing custom

00:00:19,470 --> 00:00:23,670
angular builds are you ready for this

00:00:21,949 --> 00:00:27,840
all right

00:00:23,670 --> 00:00:29,279
so um before before we start let me just

00:00:27,840 --> 00:00:32,430
tell you about myself real quick so you

00:00:29,279 --> 00:00:35,070
know who's talking at you my name is

00:00:32,430 --> 00:00:36,690
Steve Bella vorich I am a manager UI

00:00:35,070 --> 00:00:39,000
engineer at Symantec right now where I

00:00:36,690 --> 00:00:41,489
build UI libraries for the company as

00:00:39,000 --> 00:00:43,309
well as build tolling that engineers

00:00:41,489 --> 00:00:47,100
used throughout consumer electronic

00:00:43,309 --> 00:00:49,320
enterprise applications in my free time

00:00:47,100 --> 00:00:51,180
I make art with electronics it's fun

00:00:49,320 --> 00:00:52,730
that's why maybe my first slide is a

00:00:51,180 --> 00:00:57,120
bunch of glitchy stuff from the 80s

00:00:52,730 --> 00:00:59,730
right so I've been building angular with

00:00:57,120 --> 00:01:02,010
custom scripts ever since it was an

00:00:59,730 --> 00:01:05,780
alpha where I started with a gulp file

00:01:02,010 --> 00:01:08,280
and then branched out from there today

00:01:05,780 --> 00:01:10,979
we're going to learn how to write a

00:01:08,280 --> 00:01:14,400
custom angular build so why would we

00:01:10,979 --> 00:01:16,409
want to do this all right well you know

00:01:14,400 --> 00:01:18,000
the angular CLI is there it's great at a

00:01:16,409 --> 00:01:20,250
lot of things you know uses web pack

00:01:18,000 --> 00:01:22,200
it's getting way better at integrating

00:01:20,250 --> 00:01:23,670
with other things but there may be a use

00:01:22,200 --> 00:01:26,880
case where you need to integrate with

00:01:23,670 --> 00:01:28,829
some other tooling or you need to pick

00:01:26,880 --> 00:01:30,689
up angular and make it work with

00:01:28,829 --> 00:01:32,970
something that this CLI just cannot do

00:01:30,689 --> 00:01:35,460
so this that's probably the time you

00:01:32,970 --> 00:01:37,259
want to write your own script another

00:01:35,460 --> 00:01:39,060
reason why you might want to write your

00:01:37,259 --> 00:01:40,860
own custom build is you're excited about

00:01:39,060 --> 00:01:43,829
new features in angular and they haven't

00:01:40,860 --> 00:01:46,350
been rolled into the CLI eddore and you

00:01:43,829 --> 00:01:50,610
want to start using them now right so

00:01:46,350 --> 00:01:54,210
for instance when angular 5 came out

00:01:50,610 --> 00:01:57,960
I know angular 4 last year at ng-conf I

00:01:54,210 --> 00:02:00,119
was able to write a script to build the

00:01:57,960 --> 00:02:02,430
package format that was announced I did

00:02:00,119 --> 00:02:04,799
it while I was at ng-conf that year so I

00:02:02,430 --> 00:02:07,409
could go back to my company and we could

00:02:04,799 --> 00:02:08,670
build libraries using the package format

00:02:07,409 --> 00:02:12,150
right out of the box we could even

00:02:08,670 --> 00:02:13,780
generate libraries through a custom

00:02:12,150 --> 00:02:18,819
script which

00:02:13,780 --> 00:02:20,350
feature just landed in the CLI so yeah

00:02:18,819 --> 00:02:22,630
you might want to enhance the overall

00:02:20,350 --> 00:02:24,610
experience for development I'll show you

00:02:22,630 --> 00:02:29,110
some examples later in this presentation

00:02:24,610 --> 00:02:31,959
about how we can prettify logs from the

00:02:29,110 --> 00:02:34,000
compiler you know make it so the overall

00:02:31,959 --> 00:02:37,239
experience for your development cycle is

00:02:34,000 --> 00:02:39,790
faster and more efficient possibly maybe

00:02:37,239 --> 00:02:41,790
you just want to know how this works you

00:02:39,790 --> 00:02:44,500
know maybe you just want to know how

00:02:41,790 --> 00:02:47,230
angular is compiled ahead of time how

00:02:44,500 --> 00:02:49,750
you can use the compiler seoi maybe

00:02:47,230 --> 00:02:51,190
you're excited about closure compiler is

00:02:49,750 --> 00:02:52,750
anybody excited about closure compiler

00:02:51,190 --> 00:02:54,160
Istrian raise your hand if you wanted to

00:02:52,750 --> 00:02:58,090
use closure compiler find out more about

00:02:54,160 --> 00:03:00,340
it cool you're gonna find out here the

00:02:58,090 --> 00:03:04,300
other thing too is sometimes build tools

00:03:00,340 --> 00:03:06,390
break and if you are the master of your

00:03:04,300 --> 00:03:10,120
build tools you can go in and fix it so

00:03:06,390 --> 00:03:13,989
that's always a good thing but writing a

00:03:10,120 --> 00:03:16,120
build tool of for angular may give you

00:03:13,989 --> 00:03:18,100
also better standing to contribute to

00:03:16,120 --> 00:03:21,700
the open source community as you know

00:03:18,100 --> 00:03:24,190
how all the internals work you can go in

00:03:21,700 --> 00:03:25,480
and maybe help out with CLI maybe help

00:03:24,190 --> 00:03:28,660
out with some open source projects that

00:03:25,480 --> 00:03:30,880
are out there there are some new fangled

00:03:28,660 --> 00:03:34,120
ways of building angular which I'll talk

00:03:30,880 --> 00:03:35,739
about later that definitely need some

00:03:34,120 --> 00:03:39,280
help out there in the open source

00:03:35,739 --> 00:03:41,730
community so just give you a brief

00:03:39,280 --> 00:03:44,829
overview about what we're gonna do today

00:03:41,730 --> 00:03:48,310
we're gonna I'm gonna give like a brief

00:03:44,829 --> 00:03:53,260
talk about how to get started we're

00:03:48,310 --> 00:03:56,890
going to build out our own CLI so we can

00:03:53,260 --> 00:04:00,160
run command-line arguments that allow us

00:03:56,890 --> 00:04:04,870
to build angular we're going to copy

00:04:00,160 --> 00:04:07,030
files necessary for development as well

00:04:04,870 --> 00:04:08,620
as production so for instance we have a

00:04:07,030 --> 00:04:10,690
lot of library dependencies in our

00:04:08,620 --> 00:04:12,750
angular project we're gonna copy those

00:04:10,690 --> 00:04:15,640
from node modules into the build folder

00:04:12,750 --> 00:04:17,769
we're then gonna figure out an easy way

00:04:15,640 --> 00:04:21,190
to work with an index.html since we're

00:04:17,769 --> 00:04:25,570
not using webpack here today we're gonna

00:04:21,190 --> 00:04:26,260
learn how to call on the compiler CLI to

00:04:25,570 --> 00:04:27,940
build

00:04:26,260 --> 00:04:30,850
our application for development and

00:04:27,940 --> 00:04:32,830
production then we're going to learn how

00:04:30,850 --> 00:04:35,410
to optimize our code with closure

00:04:32,830 --> 00:04:39,340
compiler and then I'll go back into a

00:04:35,410 --> 00:04:41,130
brief talk about next steps you could

00:04:39,340 --> 00:04:43,990
take with a build script like this or

00:04:41,130 --> 00:04:48,280
writing your own build script and we'll

00:04:43,990 --> 00:04:52,210
end with a brief Q&A so uh getting

00:04:48,280 --> 00:04:54,700
started now there were some

00:04:52,210 --> 00:04:57,790
prerequisites out there to developing

00:04:54,700 --> 00:05:00,580
today you don't have to write code for

00:04:57,790 --> 00:05:02,470
this workshop if you don't want to but

00:05:00,580 --> 00:05:04,000
it would there will be a couple of code

00:05:02,470 --> 00:05:06,040
challenges where we are going to take

00:05:04,000 --> 00:05:09,160
like 5-10 minutes and write some code

00:05:06,040 --> 00:05:11,530
together in order to build for closure

00:05:09,160 --> 00:05:14,080
compiler you need to have the Java JDK

00:05:11,530 --> 00:05:16,180
installed that's okay if you do not have

00:05:14,080 --> 00:05:19,000
it installed today I do not suggest you

00:05:16,180 --> 00:05:21,790
try installing it right now it is a 200

00:05:19,000 --> 00:05:23,740
megabyte file that you are going to

00:05:21,790 --> 00:05:27,490
start downloading over the Wi-Fi and I

00:05:23,740 --> 00:05:28,780
would not suggest that so unless we want

00:05:27,490 --> 00:05:31,360
to break the Internet

00:05:28,780 --> 00:05:33,580
please if you don't have it installed

00:05:31,360 --> 00:05:36,520
that's okay when we get to the closure

00:05:33,580 --> 00:05:37,600
step you'll still learn hat the process

00:05:36,520 --> 00:05:39,880
of building with closure compiler

00:05:37,600 --> 00:05:41,770
there's gonna be lots of tips and you'll

00:05:39,880 --> 00:05:44,610
be able to take that away and go home

00:05:41,770 --> 00:05:48,250
and install the Java JDK and run with it

00:05:44,610 --> 00:05:49,720
if you want to code with the node

00:05:48,250 --> 00:05:51,880
scripts and we're going to be coding

00:05:49,720 --> 00:05:53,530
today you'll need to have node greater

00:05:51,880 --> 00:05:57,100
than 8 installed because we are using

00:05:53,530 --> 00:05:59,410
async await for these scripts and that

00:05:57,100 --> 00:06:05,920
is it is necessary to have a version of

00:05:59,410 --> 00:06:09,960
node 8 installed for that what uh you

00:06:05,920 --> 00:06:13,710
could probably get away with nine so I'm

00:06:09,960 --> 00:06:18,700
getting started if you haven't already

00:06:13,710 --> 00:06:21,940
cloned the repository it is available at

00:06:18,700 --> 00:06:27,340
github comm slash Steve blue slash

00:06:21,940 --> 00:06:28,900
custom - angular - Build I'll leave this

00:06:27,340 --> 00:06:33,690
up for a moment just to give everybody

00:06:28,900 --> 00:06:38,080
the chance to copy this but it is also

00:06:33,690 --> 00:06:41,460
available here on the ng-conf page

00:06:38,080 --> 00:06:41,460
there's a link to the github repo

00:06:46,490 --> 00:06:50,959
Wow there's a party going on out there

00:06:52,699 --> 00:07:00,209
yes believe me we'll make some noise all

00:06:57,179 --> 00:07:02,610
right so after you've cloned the

00:07:00,209 --> 00:07:06,749
repository it should be fairly quick

00:07:02,610 --> 00:07:08,909
there's not many files inside of it you

00:07:06,749 --> 00:07:12,979
should run npm install or if you've got

00:07:08,909 --> 00:07:12,979
yarn go for it because why not

00:07:26,980 --> 00:07:32,860
all right does anybody need the address

00:07:30,050 --> 00:07:37,600
to the repost I'll raise your hand

00:07:32,860 --> 00:07:37,600
okay give you one more moment

00:07:55,990 --> 00:08:02,169
all right so in this repository there

00:07:59,919 --> 00:08:04,180
are six branches other than master I

00:08:02,169 --> 00:08:07,449
just want to make everybody aware of

00:08:04,180 --> 00:08:11,380
this you could run get branch right and

00:08:07,449 --> 00:08:13,449
see all the branches yourself and if you

00:08:11,380 --> 00:08:17,410
fall behind at all during the workshop

00:08:13,449 --> 00:08:18,789
just know that they're there as I show

00:08:17,410 --> 00:08:20,470
introduction slides it's going to have

00:08:18,789 --> 00:08:22,120
the branch name on the introductions

00:08:20,470 --> 00:08:24,250
slide so you could check out to that

00:08:22,120 --> 00:08:26,139
branch just stash your changes if you

00:08:24,250 --> 00:08:31,449
have any changes before you do it mmm

00:08:26,139 --> 00:08:34,149
good to go alright so today like I said

00:08:31,449 --> 00:08:36,940
we're going to have some code challenges

00:08:34,149 --> 00:08:39,550
there's two in here but we're also going

00:08:36,940 --> 00:08:41,560
to do what I call code along where I'll

00:08:39,550 --> 00:08:44,709
you can follow me as I write some code

00:08:41,560 --> 00:08:46,420
will code it together and I'll be

00:08:44,709 --> 00:08:49,990
talking some because I got the gift of

00:08:46,420 --> 00:08:53,230
the gab so um we were going to be

00:08:49,990 --> 00:08:58,870
writing some no js' scripts today an

00:08:53,230 --> 00:09:01,690
example of using node for running

00:08:58,870 --> 00:09:03,610
commands like we would in the terminal

00:09:01,690 --> 00:09:05,320
is something like this right if we were

00:09:03,610 --> 00:09:08,310
going to do it in a very functional way

00:09:05,320 --> 00:09:11,560
this is an example of calling on roll up

00:09:08,310 --> 00:09:14,350
and passing it a config so we have this

00:09:11,560 --> 00:09:17,170
function it's called run roll up we pass

00:09:14,350 --> 00:09:21,100
it a config as argument and then we're

00:09:17,170 --> 00:09:24,279
going to use the exec method that's

00:09:21,100 --> 00:09:26,890
available in no js' so you execute the

00:09:24,279 --> 00:09:29,380
roll up command this is very similar for

00:09:26,890 --> 00:09:32,350
when you're typing in the terminal roll

00:09:29,380 --> 00:09:35,589
up you know - C roll up config path but

00:09:32,350 --> 00:09:38,470
our program is going to do it for us who

00:09:35,589 --> 00:09:40,180
here has experienced with nodejs anybody

00:09:38,470 --> 00:09:42,310
write a lot of notes scripts alright

00:09:40,180 --> 00:09:44,020
about half the room well that's okay I'm

00:09:42,310 --> 00:09:46,060
going to take a very introductory stance

00:09:44,020 --> 00:09:47,740
with node today so even if you don't

00:09:46,060 --> 00:09:49,950
have much node experience hopefully we

00:09:47,740 --> 00:09:53,470
can get you up to speed

00:09:49,950 --> 00:09:55,779
why are we using node well it's

00:09:53,470 --> 00:09:58,029
JavaScript we like javascript we're

00:09:55,779 --> 00:10:00,820
angular developers so we can reap

00:09:58,029 --> 00:10:02,890
writing JavaScript we can ensure that

00:10:00,820 --> 00:10:04,779
our build is going to be cross-platform

00:10:02,890 --> 00:10:07,900
using some of the tools that are

00:10:04,779 --> 00:10:08,870
available in no js' so work in Windows

00:10:07,900 --> 00:10:11,720
as well as Mac

00:10:08,870 --> 00:10:14,450
for instance and it's already installed

00:10:11,720 --> 00:10:16,700
on all of our laptops most likely if

00:10:14,450 --> 00:10:20,060
you're coding angular then I hope you

00:10:16,700 --> 00:10:24,620
have note installed there's always this

00:10:20,060 --> 00:10:26,480
debate around build tools over time you

00:10:24,620 --> 00:10:29,360
know should there be a lot of code

00:10:26,480 --> 00:10:30,980
involved when you're writing a build or

00:10:29,360 --> 00:10:33,020
should you be issuing a lot of

00:10:30,980 --> 00:10:36,470
configuration for your end user to use

00:10:33,020 --> 00:10:38,300
so when the user is a when the engineer

00:10:36,470 --> 00:10:40,040
is using the CLI will they be writing

00:10:38,300 --> 00:10:42,320
functions a lot of time to use it or

00:10:40,040 --> 00:10:44,779
will they be just configuring it right

00:10:42,320 --> 00:10:47,720
so an example of this that we're going

00:10:44,779 --> 00:10:51,560
to use today is using a configuration

00:10:47,720 --> 00:10:53,420
file when we scaffold an angular

00:10:51,560 --> 00:10:56,480
application with the CLI it's going to

00:10:53,420 --> 00:10:57,830
spit out this configuration file and I

00:10:56,480 --> 00:11:00,589
just want you to become somewhat

00:10:57,830 --> 00:11:02,870
familiar with it where we're going to

00:11:00,589 --> 00:11:05,270
have this lib object that's going to

00:11:02,870 --> 00:11:08,990
list out all paths to all of our library

00:11:05,270 --> 00:11:12,050
dependencies we're going to give our the

00:11:08,990 --> 00:11:16,040
CLI an idea where our source lives where

00:11:12,050 --> 00:11:17,930
to build a project in a folder where to

00:11:16,040 --> 00:11:20,300
distribute maybe a library package or

00:11:17,930 --> 00:11:24,380
something like that but also you could

00:11:20,300 --> 00:11:25,730
mix in some code in here as well so one

00:11:24,380 --> 00:11:28,760
of the things if you write your own

00:11:25,730 --> 00:11:30,620
build you can stick in some build hooks

00:11:28,760 --> 00:11:33,680
right so if there's a step of your build

00:11:30,620 --> 00:11:35,839
process you want to give end-users of

00:11:33,680 --> 00:11:37,730
this access to you could create an

00:11:35,839 --> 00:11:40,279
object like this right when the user is

00:11:37,730 --> 00:11:43,310
running a dev build they have a pre and

00:11:40,279 --> 00:11:49,160
post hook that they could execute their

00:11:43,310 --> 00:11:50,959
own code just really ideal so inside of

00:11:49,160 --> 00:11:54,800
our project we're going to use this

00:11:50,959 --> 00:11:56,839
config where and this is just kind of a

00:11:54,800 --> 00:11:59,300
some pseudocode here to give you an

00:11:56,839 --> 00:12:03,800
example we're going to require the

00:11:59,300 --> 00:12:06,170
config file from our local project that

00:12:03,800 --> 00:12:08,600
we scaffold and then we're going to

00:12:06,170 --> 00:12:11,300
inside of our CLI have a method that

00:12:08,600 --> 00:12:13,700
runs a task and then we're either going

00:12:11,300 --> 00:12:17,660
to return a new promise or we're going

00:12:13,700 --> 00:12:18,950
to return exec which is like a I showed

00:12:17,660 --> 00:12:21,290
a few minutes ago which is a node

00:12:18,950 --> 00:12:22,370
command which is asynchronous as well it

00:12:21,290 --> 00:12:25,640
reacts kind of like a

00:12:22,370 --> 00:12:26,779
promised and node inside of this method

00:12:25,640 --> 00:12:29,540
we're going to do something with the

00:12:26,779 --> 00:12:31,550
config we're gonna execute a task and

00:12:29,540 --> 00:12:37,550
then we're going to either resolve or

00:12:31,550 --> 00:12:41,020
reject that task its promises inside of

00:12:37,550 --> 00:12:43,760
the COI repo you'll find some key files

00:12:41,020 --> 00:12:47,440
one of them is package JSON which we'll

00:12:43,760 --> 00:12:50,750
work with very early on in this process

00:12:47,440 --> 00:12:52,610
another is the index.js file which is an

00:12:50,750 --> 00:12:55,160
entry point for the CLI we're going to

00:12:52,610 --> 00:12:58,370
create today and then we have a few

00:12:55,160 --> 00:13:01,880
other files in the build folder which

00:12:58,370 --> 00:13:05,930
these are the scripts we are going to

00:13:01,880 --> 00:13:08,870
use to run a dev build run a production

00:13:05,930 --> 00:13:10,580
build and then anything any methods that

00:13:08,870 --> 00:13:12,800
are shared between those two builds

00:13:10,580 --> 00:13:17,210
we're going to write in the build index

00:13:12,800 --> 00:13:19,610
J is filter and also we have a scaffold

00:13:17,210 --> 00:13:21,920
folder which has some boilerplate code

00:13:19,610 --> 00:13:25,670
in there that will scaffold an angular

00:13:21,920 --> 00:13:29,150
application for us so if we take a quick

00:13:25,670 --> 00:13:33,230
look at that that looks like here we

00:13:29,150 --> 00:13:35,839
have our package JSON you can see that

00:13:33,230 --> 00:13:40,160
we've given the name of our project NGS

00:13:35,839 --> 00:13:43,850
alright super and super ng we're going

00:13:40,160 --> 00:13:45,740
we have a few dependencies here we've

00:13:43,850 --> 00:13:47,540
specified which engines of note this is

00:13:45,740 --> 00:13:50,660
going to work with but if somebody does

00:13:47,540 --> 00:13:52,400
have node 9 installed they could edit

00:13:50,660 --> 00:13:57,709
that little bit right at the bottom

00:13:52,400 --> 00:13:59,959
there and then we have our index such a

00:13:57,709 --> 00:14:02,300
s which is an entry point for our CLI

00:13:59,959 --> 00:14:05,360
I'm gonna go in-depth with this here in

00:14:02,300 --> 00:14:09,020
a few moments and then in our build

00:14:05,360 --> 00:14:12,380
folder we have an index J s and inside

00:14:09,020 --> 00:14:15,410
of here one the master branch or in the

00:14:12,380 --> 00:14:17,810
1 slash getting started branch you will

00:14:15,410 --> 00:14:21,130
see a bunch of methods that have some

00:14:17,810 --> 00:14:25,279
logs here with some explosion emojis

00:14:21,130 --> 00:14:28,250
these are placeholders until we actually

00:14:25,279 --> 00:14:30,800
code these portions of our build just so

00:14:28,250 --> 00:14:32,300
you know when we actually see the log of

00:14:30,800 --> 00:14:33,690
our build going through all these steps

00:14:32,300 --> 00:14:41,340
that you haven't completed

00:14:33,690 --> 00:14:44,100
this part yet let's see all right so if

00:14:41,340 --> 00:14:47,580
we take a kind of macroscopic view of

00:14:44,100 --> 00:14:49,830
this whole landscape we can see that

00:14:47,580 --> 00:14:51,810
there's some abstract notions we have to

00:14:49,830 --> 00:14:53,730
deal with here right we're going to have

00:14:51,810 --> 00:14:58,020
a template of some sort this template is

00:14:53,730 --> 00:14:59,910
our index dot HTML we're going to

00:14:58,020 --> 00:15:01,920
probably have to deal with styling in

00:14:59,910 --> 00:15:04,200
some way in this build we're not going

00:15:01,920 --> 00:15:04,680
to pre-process sass or anything like

00:15:04,200 --> 00:15:07,590
that

00:15:04,680 --> 00:15:11,160
we're just going to have some CSS files

00:15:07,590 --> 00:15:14,940
to deal with we're going to have to

00:15:11,160 --> 00:15:17,190
manage our library dependencies we had

00:15:14,940 --> 00:15:21,390
we're gonna have to deal with public

00:15:17,190 --> 00:15:23,610
assets of some in some regard and we're

00:15:21,390 --> 00:15:25,980
going to have to compile our application

00:15:23,610 --> 00:15:27,540
because we're writing angular in

00:15:25,980 --> 00:15:29,340
typescript right so we're gonna have to

00:15:27,540 --> 00:15:32,340
compile that down for the browsers and

00:15:29,340 --> 00:15:34,800
then we're gonna have to bundle now each

00:15:32,340 --> 00:15:38,610
one of these tasks that we have to

00:15:34,800 --> 00:15:41,760
complete in the microscopic view is each

00:15:38,610 --> 00:15:43,350
task is an asynchronous process that is

00:15:41,760 --> 00:15:45,870
going to run right we're gonna have to

00:15:43,350 --> 00:15:47,430
wait for something to happen most likely

00:15:45,870 --> 00:15:49,350
like when we're copying or library

00:15:47,430 --> 00:15:52,320
dependencies we have to wait for that to

00:15:49,350 --> 00:15:53,670
execute because file IO takes a while

00:15:52,320 --> 00:15:58,080
especially when you're copying node

00:15:53,670 --> 00:16:00,810
modules back and forth we're we have

00:15:58,080 --> 00:16:02,910
some sort of configuration and we can

00:16:00,810 --> 00:16:05,550
handle events if we want to I'm not

00:16:02,910 --> 00:16:08,370
going to be really showing event emitter

00:16:05,550 --> 00:16:12,330
patterns here in nodejs today but I will

00:16:08,370 --> 00:16:15,540
make you aware that they are there we

00:16:12,330 --> 00:16:17,940
could write our build to be synchronous

00:16:15,540 --> 00:16:20,250
right where we have these steps where we

00:16:17,940 --> 00:16:22,770
process the template we handle our lib

00:16:20,250 --> 00:16:26,250
we a header to header time compile our

00:16:22,770 --> 00:16:28,650
application and then we optimize but

00:16:26,250 --> 00:16:30,930
this is not very optimal for a build so

00:16:28,650 --> 00:16:33,839
if we do this synchronously it's going

00:16:30,930 --> 00:16:36,480
to take a while right and an example of

00:16:33,839 --> 00:16:39,120
this it would be like this right we have

00:16:36,480 --> 00:16:40,620
this promise chain right where we have

00:16:39,120 --> 00:16:42,810
these utility functions and we're going

00:16:40,620 --> 00:16:44,760
to format the index and then we're going

00:16:42,810 --> 00:16:46,819
to call then once that promise resolves

00:16:44,760 --> 00:16:48,559
then we're going to copy the library

00:16:46,819 --> 00:16:49,999
be public so forth and so forth and this

00:16:48,559 --> 00:16:55,850
just ends up being very synchronous

00:16:49,999 --> 00:16:58,129
right this would take a long time again

00:16:55,850 --> 00:17:00,350
we could rewrite this this promise chain

00:16:58,129 --> 00:17:02,289
in a sink it wait who here is familiar

00:17:00,350 --> 00:17:06,259
with async/await whose you see yet Oh

00:17:02,289 --> 00:17:09,589
lots of people so um this is an example

00:17:06,259 --> 00:17:12,679
of just rewriting the promise chain here

00:17:09,589 --> 00:17:15,079
using async await you are not going to

00:17:12,679 --> 00:17:18,500
get any performance benefit from using

00:17:15,079 --> 00:17:22,250
async await alone it's just more human

00:17:18,500 --> 00:17:24,079
readable right it's a we can see here

00:17:22,250 --> 00:17:25,730
clearly kind of what's going on versus

00:17:24,079 --> 00:17:27,289
the promise chain now you could have a

00:17:25,730 --> 00:17:31,730
different opinion about that but that's

00:17:27,289 --> 00:17:33,769
just my opinion man so yeah so this is

00:17:31,730 --> 00:17:36,889
an example of using async await to

00:17:33,769 --> 00:17:38,299
perform a build but instead of doing

00:17:36,889 --> 00:17:40,610
everything synchronous we can do things

00:17:38,299 --> 00:17:43,549
in parallel which is super sweet because

00:17:40,610 --> 00:17:47,210
we can handle some of these really long

00:17:43,549 --> 00:17:50,120
tasks like copying over library files in

00:17:47,210 --> 00:17:52,429
one process we can have another process

00:17:50,120 --> 00:17:54,710
that handles the template or copies our

00:17:52,429 --> 00:17:57,289
public folder over which we're going to

00:17:54,710 --> 00:18:00,080
have and then we can have another

00:17:57,289 --> 00:18:01,279
process that's running in parallel that

00:18:00,080 --> 00:18:05,450
ahead of time compiles the application

00:18:01,279 --> 00:18:07,399
and then since since it has to optimize

00:18:05,450 --> 00:18:09,440
the application synchronously after it

00:18:07,399 --> 00:18:13,789
ahead of time compiles it it does it in

00:18:09,440 --> 00:18:16,370
this Lane so an example of using async

00:18:13,789 --> 00:18:18,049
await to do this would be like this now

00:18:16,370 --> 00:18:20,690
this is just one way to write a node

00:18:18,049 --> 00:18:22,700
script to do this it seemed to be one of

00:18:20,690 --> 00:18:25,100
the more simpler ways it's kind of get

00:18:22,700 --> 00:18:28,039
the point across for this demo but it's

00:18:25,100 --> 00:18:31,759
also a fairly performant way to do it so

00:18:28,039 --> 00:18:33,710
we have these immediately vocht function

00:18:31,759 --> 00:18:37,759
expressions that call on a sink and

00:18:33,710 --> 00:18:40,580
inside of them we will await all of the

00:18:37,759 --> 00:18:44,980
methods that we are going to run today

00:18:40,580 --> 00:18:51,889
for built you can see an example of this

00:18:44,980 --> 00:18:53,899
inside of the build /dev j/s file all of

00:18:51,889 --> 00:18:55,940
this is boiler plated for you we're not

00:18:53,899 --> 00:19:00,590
going to have to really touch this file

00:18:55,940 --> 00:19:04,700
at all but you can see here that we're

00:19:00,590 --> 00:19:06,770
running the tasks in parallel and we are

00:19:04,700 --> 00:19:09,440
going to a wait certain tasks that need

00:19:06,770 --> 00:19:12,470
to happen synchronously so for instance

00:19:09,440 --> 00:19:17,690
here in our build or in our prod we have

00:19:12,470 --> 00:19:19,549
to wait for our application to ahead of

00:19:17,690 --> 00:19:26,929
time compile before we can optimize it

00:19:19,549 --> 00:19:29,120
with closure compiler so tools in

00:19:26,929 --> 00:19:34,809
node.js that we're going to use to do

00:19:29,120 --> 00:19:36,799
this is FS which is a method that's a

00:19:34,809 --> 00:19:39,289
class I guess you could say you know

00:19:36,799 --> 00:19:42,500
that is available that has a lot of

00:19:39,289 --> 00:19:45,200
methods on it for file system IO we're

00:19:42,500 --> 00:19:47,539
going to use one method on it today and

00:19:45,200 --> 00:19:49,880
then we're going to use path which is

00:19:47,539 --> 00:19:52,070
another tool that is installed with

00:19:49,880 --> 00:19:54,980
nodejs it's just there and we're going

00:19:52,070 --> 00:19:56,960
to use it to make all the paths that our

00:19:54,980 --> 00:20:00,649
node script uses cross-platform

00:19:56,960 --> 00:20:03,169
compliant and then we're going to use

00:20:00,649 --> 00:20:05,740
two other methods that are available in

00:20:03,169 --> 00:20:10,419
the child process module which is also

00:20:05,740 --> 00:20:14,240
packaged with node called exec and spawn

00:20:10,419 --> 00:20:19,760
some open source projects we're going to

00:20:14,240 --> 00:20:22,039
use to make to make our commands even

00:20:19,760 --> 00:20:23,950
more cross-platform compliant we're

00:20:22,039 --> 00:20:27,500
going to use this tool called shell J S

00:20:23,950 --> 00:20:30,799
which is a wrapper around exec it's

00:20:27,500 --> 00:20:35,240
going to allow us to run our shell

00:20:30,799 --> 00:20:37,580
commands for Windows and Mac OS we're

00:20:35,240 --> 00:20:42,350
going to use this module called

00:20:37,580 --> 00:20:45,340
commander to handle our CLI arguments so

00:20:42,350 --> 00:20:48,260
when the user types in NGS build

00:20:45,340 --> 00:20:50,960
commander is going to process that and

00:20:48,260 --> 00:20:53,990
give us a to work with within our code

00:20:50,960 --> 00:20:57,890
it's much better than handling the

00:20:53,990 --> 00:21:00,169
process arguments by themselves we're

00:20:57,890 --> 00:21:03,350
gonna use this tool called find up which

00:21:00,169 --> 00:21:05,750
allows you to work with files a certain

00:21:03,350 --> 00:21:08,270
way it allows you to find a file in the

00:21:05,750 --> 00:21:09,830
in the folder structure that is above

00:21:08,270 --> 00:21:14,060
the directory you're in it's a very

00:21:09,830 --> 00:21:16,070
useful tool because so lots of times

00:21:14,060 --> 00:21:17,540
when writing belt scripts like this we

00:21:16,070 --> 00:21:20,300
may need to find like the root directory

00:21:17,540 --> 00:21:23,330
of our CLI that we're in or the root

00:21:20,300 --> 00:21:24,950
directory of our project find up will

00:21:23,330 --> 00:21:26,980
allow us to do that because we have like

00:21:24,950 --> 00:21:30,740
a file in that root directory right

00:21:26,980 --> 00:21:33,350
package.json right we can find it we're

00:21:30,740 --> 00:21:35,090
going to use this other tool called HTML

00:21:33,350 --> 00:21:36,710
processor which is kind of it was just

00:21:35,090 --> 00:21:41,420
an off-the-shelf module that allows the

00:21:36,710 --> 00:21:43,060
processor index dot HTML so uh yeah so

00:21:41,420 --> 00:21:46,610
we're going to build our own COI today

00:21:43,060 --> 00:21:49,280
and this portion is just a code along

00:21:46,610 --> 00:21:51,860
where you can just follow along we'll

00:21:49,280 --> 00:21:56,560
I'll write some code and you can read it

00:21:51,860 --> 00:22:01,190
along with me the CLI is an API layer

00:21:56,560 --> 00:22:05,570
for our bill tooling and it has an entry

00:22:01,190 --> 00:22:06,470
point which is our index CAS now I don't

00:22:05,570 --> 00:22:08,330
want you to confuse this with the

00:22:06,470 --> 00:22:12,020
angular CLI right we're writing our own

00:22:08,330 --> 00:22:13,490
today because who wants to write build

00:22:12,020 --> 00:22:16,580
tools without like a convenient way to

00:22:13,490 --> 00:22:20,300
use them right so um in order for our

00:22:16,580 --> 00:22:22,310
node script to be recognized as a

00:22:20,300 --> 00:22:25,850
process that we can run in the command

00:22:22,310 --> 00:22:27,470
line we have to use this we have to

00:22:25,850 --> 00:22:32,090
write this line of code in the very

00:22:27,470 --> 00:22:34,430
first line of our index is what is our

00:22:32,090 --> 00:22:36,770
entry point of our node application so

00:22:34,430 --> 00:22:40,190
go ahead and do that in indexed reg is

00:22:36,770 --> 00:22:41,390
the very first line right this line now

00:22:40,190 --> 00:22:43,370
if you've ever written a bash script

00:22:41,390 --> 00:22:45,470
before this may look kind of familiar

00:22:43,370 --> 00:22:50,210
right it's kind of like bash scripting

00:22:45,470 --> 00:22:54,130
but yeah uh you can start from the

00:22:50,210 --> 00:22:54,130
master bridge that's perfectly fine yeah

00:22:54,460 --> 00:22:58,880
this is going to establish for node that

00:22:57,200 --> 00:23:02,150
this is a process that can run and that

00:22:58,880 --> 00:23:04,550
we can use it as a CLI there's another

00:23:02,150 --> 00:23:07,750
step that we're going to implement here

00:23:04,550 --> 00:23:12,340
in the next slide that ensures that node

00:23:07,750 --> 00:23:12,340
understands what our command is called

00:23:15,790 --> 00:23:24,570
so in here in indexed at JSU right pound

00:23:25,320 --> 00:23:36,180
townn bang USR slash bin slash note oh

00:23:36,270 --> 00:23:49,510
yeah am snowed yeah my bad what no this

00:23:47,260 --> 00:23:58,030
is the end this is the index search ESS

00:23:49,510 --> 00:24:07,930
in the root of the application yeah blow

00:23:58,030 --> 00:24:09,580
it up there it is right there okay go

00:24:07,930 --> 00:24:12,000
ahead and save that file once you make

00:24:09,580 --> 00:24:12,000
that change

00:24:25,700 --> 00:24:30,080
all right we need to make one other

00:24:27,770 --> 00:24:32,000
change to our code here and to ensure

00:24:30,080 --> 00:24:35,210
that node understands the command that

00:24:32,000 --> 00:24:39,110
we're running in our package JSON we

00:24:35,210 --> 00:24:42,170
need to create an object that's called

00:24:39,110 --> 00:24:46,310
bin and that object is going to take one

00:24:42,170 --> 00:24:50,060
argument or not one one property called

00:24:46,310 --> 00:24:52,490
NGS and we're going to tell know that

00:24:50,060 --> 00:24:55,760
the entry point of our script is at

00:24:52,490 --> 00:24:59,120
index J s so this is going to enable us

00:24:55,760 --> 00:25:02,180
to write in the terminal NGS and a

00:24:59,120 --> 00:25:12,670
command so this gives us a entry point

00:25:02,180 --> 00:25:14,990
for our CLI so here my package step JSON

00:25:12,670 --> 00:25:20,870
I'm going to go ahead and create a bin

00:25:14,990 --> 00:25:25,580
object I'm going to give it one property

00:25:20,870 --> 00:25:30,710
which is ng yes and I'm going to point

00:25:25,580 --> 00:25:33,490
it at the index that is and save the

00:25:30,710 --> 00:25:33,490
package that Jason

00:25:45,809 --> 00:25:52,419
all right now in order for us to run

00:25:49,179 --> 00:25:55,390
this command anywhere on our file system

00:25:52,419 --> 00:25:58,299
we need know to recognize that it is

00:25:55,390 --> 00:26:01,240
global right and you'll see that maybe

00:25:58,299 --> 00:26:03,490
when you pull down open-source projects

00:26:01,240 --> 00:26:05,350
and they say in their instructions - if

00:26:03,490 --> 00:26:06,490
you want to develop this open source

00:26:05,350 --> 00:26:10,570
project that you have to run this

00:26:06,490 --> 00:26:13,299
command an NPM link what it does is it's

00:26:10,570 --> 00:26:15,970
going to treat our local installation of

00:26:13,299 --> 00:26:18,100
the package like it's global right it's

00:26:15,970 --> 00:26:21,070
it's kind of like running an NPM install

00:26:18,100 --> 00:26:24,940
with the G flag but don't do that do not

00:26:21,070 --> 00:26:30,059
do that we're going to run this command

00:26:24,940 --> 00:26:34,570
in the root directory of the repo so

00:26:30,059 --> 00:26:37,779
here I have my terminal I have the

00:26:34,570 --> 00:26:46,409
custom angular build if I run an NPM

00:26:37,779 --> 00:26:49,179
link here it's going to tell me now that

00:26:46,409 --> 00:26:51,880
we're wherever my installation of node

00:26:49,179 --> 00:26:54,580
is at this point in time we're going to

00:26:51,880 --> 00:26:58,529
create a it's a symbolic link it looks

00:26:54,580 --> 00:27:01,630
like and we're going to point it to the

00:26:58,529 --> 00:27:05,669
local installation of this package where

00:27:01,630 --> 00:27:05,669
we actually doing development on the CLI

00:27:20,799 --> 00:27:26,200
all right how's everybody feeling

00:27:22,940 --> 00:27:30,320
everybody following along all right cool

00:27:26,200 --> 00:27:31,609
all right so with node when we're

00:27:30,320 --> 00:27:35,690
talking about nodejs we're talking about

00:27:31,609 --> 00:27:39,080
processes like when we run NGS we're

00:27:35,690 --> 00:27:41,659
gonna start up a node process and you

00:27:39,080 --> 00:27:45,649
can think of this process as a global

00:27:41,659 --> 00:27:47,659
object for nodejs that is kind of

00:27:45,649 --> 00:27:49,340
similar to when in the browser we have

00:27:47,659 --> 00:27:52,759
the window rate which is a global object

00:27:49,340 --> 00:27:54,529
that we can use in node we have process

00:27:52,759 --> 00:27:56,450
right and it tells us everything about

00:27:54,529 --> 00:27:59,869
the process we're going to execute that

00:27:56,450 --> 00:28:02,419
is an external API that nodejs thinks we

00:27:59,869 --> 00:28:08,419
should know about that process it is

00:28:02,419 --> 00:28:11,239
there so when we run this process just

00:28:08,419 --> 00:28:17,379
be aware that it is there right now if

00:28:11,239 --> 00:28:22,849
we were to in our index J s console.log

00:28:17,379 --> 00:28:26,899
the process here before

00:28:22,849 --> 00:28:29,029
commander starts kicking in we would be

00:28:26,899 --> 00:28:32,840
able to see it and here in a moment when

00:28:29,029 --> 00:28:35,479
we scaffold the angular application we

00:28:32,840 --> 00:28:38,349
can log the process and its object and

00:28:35,479 --> 00:28:38,349
you'll be able to see it

00:28:44,240 --> 00:28:50,840
processes have three streams associated

00:28:48,409 --> 00:28:54,440
with them they have an input that's

00:28:50,840 --> 00:28:57,380
called stdio they have STD out which is

00:28:54,440 --> 00:28:59,570
some output a process will take in

00:28:57,380 --> 00:29:02,390
something as an input like a command we

00:28:59,570 --> 00:29:04,789
give it in the terminal and it will

00:29:02,390 --> 00:29:10,220
output something it depends on the

00:29:04,789 --> 00:29:13,730
process right and then we have STD air

00:29:10,220 --> 00:29:16,850
which will hint is usually used for

00:29:13,730 --> 00:29:18,890
logging or to handle errors in some way

00:29:16,850 --> 00:29:20,330
we're gonna explore these as part of

00:29:18,890 --> 00:29:22,159
these processes that we're gonna run

00:29:20,330 --> 00:29:25,250
today

00:29:22,159 --> 00:29:27,919
all of them are streams they also have

00:29:25,250 --> 00:29:30,140
this event emitter api attached to them

00:29:27,919 --> 00:29:32,030
where the fire off events every once in

00:29:30,140 --> 00:29:35,270
a while like when the process starts

00:29:32,030 --> 00:29:37,309
when the process stops when there's data

00:29:35,270 --> 00:29:43,100
be flowing through any one of these

00:29:37,309 --> 00:29:47,650
streams they will fire off an event like

00:29:43,100 --> 00:29:50,539
I said STD out of writes an output and

00:29:47,650 --> 00:29:55,270
we can handle logs and errors with this

00:29:50,539 --> 00:30:00,830
other stream st air the process object

00:29:55,270 --> 00:30:05,000
has a property on it called Arg V which

00:30:00,830 --> 00:30:09,169
lists the arguments in an array that the

00:30:05,000 --> 00:30:11,360
user types in the terminal so when we

00:30:09,169 --> 00:30:15,340
run this command we're going to use

00:30:11,360 --> 00:30:19,400
today NGS build dev with the watch flag

00:30:15,340 --> 00:30:21,409
this is what process art V would print

00:30:19,400 --> 00:30:24,679
if we were to log it right it's going to

00:30:21,409 --> 00:30:27,220
point to the version of node which we're

00:30:24,679 --> 00:30:31,669
using that is executing this command

00:30:27,220 --> 00:30:34,880
then the actual process we are running

00:30:31,669 --> 00:30:38,720
NGS since its installed since it is

00:30:34,880 --> 00:30:44,299
linked globally I'll print like this and

00:30:38,720 --> 00:30:46,909
then we have the command after the NGS

00:30:44,299 --> 00:30:49,370
command we ran build and then the

00:30:46,909 --> 00:30:53,030
argument for build dev and then another

00:30:49,370 --> 00:30:54,930
argument which is - - watch so this is a

00:30:53,030 --> 00:30:58,530
very useful

00:30:54,930 --> 00:31:03,510
object but it's kind of cumbersome to

00:30:58,530 --> 00:31:06,080
keep working with this array so that's

00:31:03,510 --> 00:31:09,510
why we have this tool called commander

00:31:06,080 --> 00:31:11,820
right commander

00:31:09,510 --> 00:31:17,250
you can see here at the very the very

00:31:11,820 --> 00:31:20,790
last method on this program is to parse

00:31:17,250 --> 00:31:22,440
the process argh be and what commander

00:31:20,790 --> 00:31:25,380
is going to do is give us a more

00:31:22,440 --> 00:31:28,110
convenient object that we can reference

00:31:25,380 --> 00:31:32,610
so we can know what commands the user

00:31:28,110 --> 00:31:34,920
entered when they ran NGS built you can

00:31:32,610 --> 00:31:40,320
see here we have one option in this

00:31:34,920 --> 00:31:43,380
example build and then the syntax for

00:31:40,320 --> 00:31:46,170
commander to establish what that

00:31:43,380 --> 00:31:49,470
argument is you can place between

00:31:46,170 --> 00:31:53,340
between these square brackets so we can

00:31:49,470 --> 00:31:54,990
see this here in index J s since this is

00:31:53,340 --> 00:31:59,580
the entry point of our application we're

00:31:54,990 --> 00:32:03,150
going to put this logic here where we

00:31:59,580 --> 00:32:06,570
tell commander that our options should

00:32:03,150 --> 00:32:09,090
be build right so the user can type NGS

00:32:06,570 --> 00:32:11,940
build we can tell we can tell commander

00:32:09,090 --> 00:32:14,760
there's an option watch and that watch

00:32:11,940 --> 00:32:17,550
had should be equal to a boolean true or

00:32:14,760 --> 00:32:20,970
false if watch exists it's just going to

00:32:17,550 --> 00:32:22,710
be true but we also have another option

00:32:20,970 --> 00:32:25,950
here that is boiler plated with this

00:32:22,710 --> 00:32:30,360
application called scaffold which we're

00:32:25,950 --> 00:32:33,090
going to use in a moment and then below

00:32:30,360 --> 00:32:36,020
that in this file we can see we can

00:32:33,090 --> 00:32:40,200
begin working with this program object

00:32:36,020 --> 00:32:44,010
we can tell that the user typed in NGS

00:32:40,200 --> 00:32:46,890
build because now the program objects

00:32:44,010 --> 00:32:50,310
will have a build property on it and if

00:32:46,890 --> 00:32:54,540
it exists we're going to require the

00:32:50,310 --> 00:32:58,530
build script if a program type build

00:32:54,540 --> 00:33:01,350
exists it will be equal to the

00:32:58,530 --> 00:33:04,140
environment that the user typed in so if

00:33:01,350 --> 00:33:06,870
the user types in NGS build dev it will

00:33:04,140 --> 00:33:08,730
be equal to the string dev or if they

00:33:06,870 --> 00:33:11,480
type NGS build prod it will be equal

00:33:08,730 --> 00:33:15,030
String prod so we're going to

00:33:11,480 --> 00:33:20,610
dynamically require a build script based

00:33:15,030 --> 00:33:22,799
on that input then we're going to create

00:33:20,610 --> 00:33:25,530
a new build and then running it on that

00:33:22,799 --> 00:33:27,210
built the first command though we're

00:33:25,530 --> 00:33:30,390
going to run with the CLI is to scaffold

00:33:27,210 --> 00:33:33,480
a new angular application and we're

00:33:30,390 --> 00:33:35,910
going to require a different script for

00:33:33,480 --> 00:33:45,179
that we're again going to instantiate it

00:33:35,910 --> 00:33:48,510
and then call init so the process today

00:33:45,179 --> 00:33:50,910
for coding during this workshop is kind

00:33:48,510 --> 00:33:52,410
of like this we're going to do mo we're

00:33:50,910 --> 00:33:54,720
gonna write most of our code if not all

00:33:52,410 --> 00:33:57,540
of it in the repository that you all

00:33:54,720 --> 00:34:01,169
pulled down but we're gonna scaffold an

00:33:57,540 --> 00:34:04,710
angular application in another folder it

00:34:01,169 --> 00:34:06,480
can be a sibling to the see the folder

00:34:04,710 --> 00:34:07,799
that is this repository that we're

00:34:06,480 --> 00:34:10,139
working with right now but it can't be

00:34:07,799 --> 00:34:11,570
inside of it otherwise our scripts are

00:34:10,139 --> 00:34:15,210
going to get really confused right now

00:34:11,570 --> 00:34:17,520
and then we're gonna have an express

00:34:15,210 --> 00:34:19,889
server that runs so we can see after we

00:34:17,520 --> 00:34:22,109
run the ahead of time compiler we can

00:34:19,889 --> 00:34:24,750
see an output in the browser we can see

00:34:22,109 --> 00:34:26,700
in a Euler application running and then

00:34:24,750 --> 00:34:29,429
when we optimize our application with

00:34:26,700 --> 00:34:31,950
closure compiler we'll be able to see

00:34:29,429 --> 00:34:37,950
the output of the bundle and its size in

00:34:31,950 --> 00:34:40,710
the using the Express server so in order

00:34:37,950 --> 00:34:45,270
to scaffold an angular application with

00:34:40,710 --> 00:34:47,669
this CLI what you should do is you

00:34:45,270 --> 00:34:51,419
should create a new folder somewhere

00:34:47,669 --> 00:34:55,320
else like I said it can be a sibling to

00:34:51,419 --> 00:34:57,000
the repository you're going to make a

00:34:55,320 --> 00:35:01,320
new directory you can call it whatever

00:34:57,000 --> 00:35:05,150
you want I chose my app change directory

00:35:01,320 --> 00:35:09,359
into that application and then run NGS

00:35:05,150 --> 00:35:12,000
scaffold and then once you are done with

00:35:09,359 --> 00:35:14,810
that run npm install or if you have yarn

00:35:12,000 --> 00:35:14,810
go for it

00:35:49,740 --> 00:35:55,099
did you run NPM link before hmm

00:36:11,400 --> 00:36:17,540
has any is anybody else successful with

00:36:13,800 --> 00:36:19,530
this yeah okay

00:36:17,540 --> 00:36:24,810
it's making me a little nervous there

00:36:19,530 --> 00:36:27,690
for a second there maybe sometimes this

00:36:24,810 --> 00:36:29,910
can fail if you if node is not alias

00:36:27,690 --> 00:36:32,160
correctly in your path that could be a

00:36:29,910 --> 00:36:34,380
problem that's something that I see

00:36:32,160 --> 00:36:37,470
pretty standard like if if node was

00:36:34,380 --> 00:36:43,140
installed using the download from the

00:36:37,470 --> 00:36:45,260
website that could cause a problem you

00:36:43,140 --> 00:36:50,550
can try on linking and linking again

00:36:45,260 --> 00:36:56,450
that might help so you can run NPM on

00:36:50,550 --> 00:36:56,450
link and then NPM link and it could work

00:37:02,299 --> 00:37:06,039
who's installing the angular

00:37:04,009 --> 00:37:19,969
dependencies now in their application

00:37:06,039 --> 00:37:22,130
cool what do you mean oh okay yeah yeah

00:37:19,969 --> 00:37:23,989
that could be another issue too if if

00:37:22,130 --> 00:37:27,170
you have node 9 installed this will work

00:37:23,989 --> 00:37:36,769
with no 9 I don't see any reason why it

00:37:27,170 --> 00:37:39,499
shouldn't all right so our angular

00:37:36,769 --> 00:37:42,199
project looks like this we have a

00:37:39,499 --> 00:37:46,069
template which is our index.html it's in

00:37:42,199 --> 00:37:50,359
the SRC slash public folder we have an

00:37:46,069 --> 00:37:52,630
SRC folder that has all of our angular

00:37:50,359 --> 00:37:55,579
source inside of an application folder

00:37:52,630 --> 00:37:58,759
we have some global styling that's

00:37:55,579 --> 00:38:00,380
available in the style folder once you

00:37:58,759 --> 00:38:02,059
run npm install of course we're going to

00:38:00,380 --> 00:38:04,009
have a node modules folder that we're

00:38:02,059 --> 00:38:08,299
going to deal with we have some TS

00:38:04,009 --> 00:38:10,459
config hanging out inside the SRC slash

00:38:08,299 --> 00:38:14,809
public folder we have some system j/s

00:38:10,459 --> 00:38:20,779
config that we are going to copy over to

00:38:14,809 --> 00:38:22,880
our build folder once we build we have a

00:38:20,779 --> 00:38:25,219
closure comp which we're going to go

00:38:22,880 --> 00:38:28,160
over here in a bit that's going to

00:38:25,219 --> 00:38:31,249
configure closure compiler and we have a

00:38:28,160 --> 00:38:32,779
server J S which is our Express server

00:38:31,249 --> 00:38:38,599
that's going to allow us to host this

00:38:32,779 --> 00:38:44,479
angular application locally so you could

00:38:38,599 --> 00:38:48,829
right now run node server inside of your

00:38:44,479 --> 00:38:52,549
app folder and you're not gonna get much

00:38:48,829 --> 00:38:55,729
because we haven't built anything but

00:38:52,549 --> 00:38:57,709
what if you were to run node server you

00:38:55,729 --> 00:38:59,049
will see that Express is available at

00:38:57,709 --> 00:39:02,329
localhost colon

00:38:59,049 --> 00:39:04,069
4200 but if you were to look at that in

00:39:02,329 --> 00:39:06,949
the browser you won't get anything yet

00:39:04,069 --> 00:39:11,099
oh well crap they were I spoiled it for

00:39:06,949 --> 00:39:15,309
you let me remove my build folder

00:39:11,099 --> 00:39:20,380
and try again there we go

00:39:15,309 --> 00:39:22,059
that's what I was looking for so uh yeah

00:39:20,380 --> 00:39:23,349
so you'll see something like this in the

00:39:22,059 --> 00:39:25,180
browser because we don't even have a

00:39:23,349 --> 00:39:28,450
build folder yet we haven't built

00:39:25,180 --> 00:39:30,460
anything and this is good it's good that

00:39:28,450 --> 00:39:32,109
we see this error right now because if

00:39:30,460 --> 00:39:34,420
you saw a build I would be mystified

00:39:32,109 --> 00:39:43,869
unless you jumped ahead or something

00:39:34,420 --> 00:39:47,229
because you can do that so late this

00:39:43,869 --> 00:39:52,119
server also comes with live reload baked

00:39:47,229 --> 00:39:58,779
in for our development build if the user

00:39:52,119 --> 00:40:01,660
runs NGS build dev it's going to have

00:39:58,779 --> 00:40:05,079
script on the in the index.html that

00:40:01,660 --> 00:40:06,640
loads live reload and so in order for

00:40:05,079 --> 00:40:07,779
you to actually use live reload though

00:40:06,640 --> 00:40:14,200
you're gonna have to use the watch

00:40:07,779 --> 00:40:17,079
argument here with note server so the

00:40:14,200 --> 00:40:21,700
three commands we're going to develop

00:40:17,079 --> 00:40:23,650
out today are NGS build dev NGS build

00:40:21,700 --> 00:40:26,680
dev with the watch flag which is going

00:40:23,650 --> 00:40:31,089
to use put the ahead of time compiler in

00:40:26,680 --> 00:40:35,289
watch mode and then we're going to use

00:40:31,089 --> 00:40:37,299
this prod command to build our

00:40:35,289 --> 00:40:41,170
application for production using closure

00:40:37,299 --> 00:40:43,059
compiler now at any time in developing

00:40:41,170 --> 00:40:47,140
this stuff you could stop the process

00:40:43,059 --> 00:40:49,569
with command C and we have flipped back

00:40:47,140 --> 00:40:50,710
a few slides just because there's a

00:40:49,569 --> 00:40:52,799
couple here

00:40:50,710 --> 00:40:56,979
sometimes when you're building out these

00:40:52,799 --> 00:40:59,829
applications if you do not stop your

00:40:56,979 --> 00:41:03,130
node script appropriately it will just

00:40:59,829 --> 00:41:05,739
keep running in the background this can

00:41:03,130 --> 00:41:09,519
happen a lot during development of node

00:41:05,739 --> 00:41:12,460
scripts so if you're on Mac OS or you

00:41:09,519 --> 00:41:15,460
have like a UNIX file system like a you

00:41:12,460 --> 00:41:17,739
can run this command PS ox and then grep

00:41:15,460 --> 00:41:20,130
node and you can list all of the node

00:41:17,739 --> 00:41:23,340
processes that are running

00:41:20,130 --> 00:41:27,000
on Windows you can use task list to do

00:41:23,340 --> 00:41:29,580
the same thing and then with a UNIX

00:41:27,000 --> 00:41:35,400
based system you can use the kill

00:41:29,580 --> 00:41:38,490
command very judiciously with the nine

00:41:35,400 --> 00:41:42,000
argument and the the process ID of that

00:41:38,490 --> 00:41:43,980
node command that's still running when

00:41:42,000 --> 00:41:47,430
it shouldn't be on Windows you could do

00:41:43,980 --> 00:41:50,100
the similar thing with task kill I would

00:41:47,430 --> 00:41:52,200
not try to kill all the node processes

00:41:50,100 --> 00:41:53,550
at once I was actually looking at a blog

00:41:52,200 --> 00:41:57,590
post the other day and somebody said to

00:41:53,550 --> 00:42:00,660
do this that's probably a very bad idea

00:41:57,590 --> 00:42:02,670
you know vs code is running a bunch of

00:42:00,660 --> 00:42:05,250
node processes right now and if you do

00:42:02,670 --> 00:42:07,050
that you will hose vs code or you may

00:42:05,250 --> 00:42:08,220
have like slack installed or some of

00:42:07,050 --> 00:42:10,640
these other applications that are

00:42:08,220 --> 00:42:13,920
running that have node processes running

00:42:10,640 --> 00:42:21,350
don't kill them all at once please

00:42:13,920 --> 00:42:25,860
alright so let me catch up alright so

00:42:21,350 --> 00:42:29,790
I'm going the wrong way so we're gonna

00:42:25,860 --> 00:42:32,990
get to the next part of our workshop

00:42:29,790 --> 00:42:37,230
where we're handling files all right so

00:42:32,990 --> 00:42:38,880
we started up our build and it it or we

00:42:37,230 --> 00:42:41,160
started up our server we didn't run a

00:42:38,880 --> 00:42:42,590
build command yet and we noticed nothing

00:42:41,160 --> 00:42:45,630
was there right because we haven't

00:42:42,590 --> 00:42:49,440
copied any files from our source to our

00:42:45,630 --> 00:42:51,240
build folder so in order to do this

00:42:49,440 --> 00:42:53,790
let's take a step back and just learn

00:42:51,240 --> 00:42:55,860
some common things that we may need to

00:42:53,790 --> 00:42:58,410
work with when writing these kinds of

00:42:55,860 --> 00:43:00,300
scripts there may be times where you

00:42:58,410 --> 00:43:01,890
need to know the file name of something

00:43:00,300 --> 00:43:04,140
you're working with you may need to get

00:43:01,890 --> 00:43:06,000
rid of the rest of the path and just

00:43:04,140 --> 00:43:08,490
know the file name you might need to

00:43:06,000 --> 00:43:10,020
figure out what the base path is of

00:43:08,490 --> 00:43:12,720
somewhere that you're working with like

00:43:10,020 --> 00:43:15,150
for instance we have this CLI we have

00:43:12,720 --> 00:43:17,940
this CLI project and it's base path

00:43:15,150 --> 00:43:19,700
would be its root right or you might

00:43:17,940 --> 00:43:22,140
need to know the base path of like a

00:43:19,700 --> 00:43:24,960
string that is a very long path you may

00:43:22,140 --> 00:43:26,670
not and cut off the file name you may

00:43:24,960 --> 00:43:28,980
need to figure out what your project

00:43:26,670 --> 00:43:32,300
route is like the angular projects route

00:43:28,980 --> 00:43:34,880
you may need to know what the CLI route

00:43:32,300 --> 00:43:37,070
is you may need to figure out what the

00:43:34,880 --> 00:43:40,010
route is for the process that the user

00:43:37,070 --> 00:43:42,620
is trying to do right now right this

00:43:40,010 --> 00:43:44,750
could be a different thing right so you

00:43:42,620 --> 00:43:47,330
might expect the process route to be the

00:43:44,750 --> 00:43:50,870
same as the project route but we may not

00:43:47,330 --> 00:43:54,350
always be running NGS at the root folder

00:43:50,870 --> 00:43:56,150
of our project right we may run NGS like

00:43:54,350 --> 00:43:57,710
somewhere in another directory say we're

00:43:56,150 --> 00:44:00,680
in like a component directory somewhere

00:43:57,710 --> 00:44:03,230
in our angular project we could code our

00:44:00,680 --> 00:44:05,960
CLI so that it takes that into that into

00:44:03,230 --> 00:44:09,200
account and then finds the process route

00:44:05,960 --> 00:44:12,800
or from the process route finds the

00:44:09,200 --> 00:44:14,750
project group right you might need to

00:44:12,800 --> 00:44:17,690
know the directory of something that's

00:44:14,750 --> 00:44:19,700
executing right now but the problems

00:44:17,690 --> 00:44:21,770
that we're going to solve today or like

00:44:19,700 --> 00:44:24,080
how do I copy from the source folder to

00:44:21,770 --> 00:44:28,370
the dist folder and how do I make it

00:44:24,080 --> 00:44:31,070
cross-platform and the tools we're going

00:44:28,370 --> 00:44:37,700
to use that it used to do to do that our

00:44:31,070 --> 00:44:41,510
path FS and find out so FS allows you to

00:44:37,700 --> 00:44:43,520
work with filesystem you can there's

00:44:41,510 --> 00:44:46,610
also there's a lot of awesome methods on

00:44:43,520 --> 00:44:49,160
FS like reading files writing files

00:44:46,610 --> 00:44:53,450
we're not going to use them today we're

00:44:49,160 --> 00:44:56,000
gonna use this one FS exists Inc and

00:44:53,450 --> 00:44:59,150
what this does is allows you to figure

00:44:56,000 --> 00:45:02,180
out if a file exists somewhere you pass

00:44:59,150 --> 00:45:06,610
in a path to exist sink and it will

00:45:02,180 --> 00:45:06,610
return true or false e if it exists

00:45:07,240 --> 00:45:13,370
we're going to use path so here's an

00:45:11,060 --> 00:45:18,250
example of it where we can require path

00:45:13,370 --> 00:45:18,250
and then we can use methods on path to

00:45:19,000 --> 00:45:25,130
print if we were to console.log like

00:45:22,010 --> 00:45:28,760
path to join or path that normalized

00:45:25,130 --> 00:45:31,300
here it would generate these two strings

00:45:28,760 --> 00:45:35,030
down here at the bottom of this slide

00:45:31,300 --> 00:45:38,030
it's a way for us to handle paths

00:45:35,030 --> 00:45:40,430
cross-platform because if we're writing

00:45:38,030 --> 00:45:44,360
these scripts and we were always using

00:45:40,430 --> 00:45:45,770
forward slashes because we're used to

00:45:44,360 --> 00:45:48,410
our UNIX file system

00:45:45,770 --> 00:45:54,260
that is not so good for Windows users

00:45:48,410 --> 00:45:59,060
right so who have to use a different way

00:45:54,260 --> 00:46:01,250
of writing file paths right so these two

00:45:59,060 --> 00:46:04,160
methods join and normalize do the same

00:46:01,250 --> 00:46:07,730
thing they're just two different ways of

00:46:04,160 --> 00:46:10,040
doing it you can use the method you

00:46:07,730 --> 00:46:12,530
prefer I kind of like join more than

00:46:10,040 --> 00:46:15,220
normalised but sometimes you can use one

00:46:12,530 --> 00:46:18,950
or the other when it suits the problem

00:46:15,220 --> 00:46:21,770
so node module if you use path to join

00:46:18,950 --> 00:46:23,810
and you pass in no modules comma angular

00:46:21,770 --> 00:46:30,560
comic or that's going to write node

00:46:23,810 --> 00:46:34,730
modules slash angular slash core the

00:46:30,560 --> 00:46:37,760
process object has a few methods on it

00:46:34,730 --> 00:46:41,030
as well as well that we can use process

00:46:37,760 --> 00:46:45,380
that CWD will return the current working

00:46:41,030 --> 00:46:50,690
directory that we're in there's another

00:46:45,380 --> 00:46:54,320
global namespace property here called

00:46:50,690 --> 00:46:58,460
dur name that will give us the directory

00:46:54,320 --> 00:47:00,530
of the current executing script so for

00:46:58,460 --> 00:47:03,410
index jas like we've been working with

00:47:00,530 --> 00:47:04,850
so far if we were to use - - surname

00:47:03,410 --> 00:47:07,550
there and we were to log it it would

00:47:04,850 --> 00:47:09,080
print the path to that index J ass

00:47:07,550 --> 00:47:11,680
because it is somewhere in the file

00:47:09,080 --> 00:47:15,050
system and people are going to install

00:47:11,680 --> 00:47:16,490
the CLI all different places so now that

00:47:15,050 --> 00:47:19,070
we're using der name we can make this

00:47:16,490 --> 00:47:20,480
dynamic right rather than forcing our

00:47:19,070 --> 00:47:24,010
users to install it in a specific

00:47:20,480 --> 00:47:24,010
location on their computer

00:47:24,340 --> 00:47:28,910
paster name should not be confused with

00:47:27,050 --> 00:47:31,310
underscore underscore der named path

00:47:28,910 --> 00:47:33,740
doctor name will return the current

00:47:31,310 --> 00:47:35,420
directory name of a path that we are

00:47:33,740 --> 00:47:41,119
working with right now like a string

00:47:35,420 --> 00:47:45,080
that is a path path the base name will

00:47:41,119 --> 00:47:47,240
return the last portion of the path we

00:47:45,080 --> 00:47:49,160
can get a file name this way we can get

00:47:47,240 --> 00:47:53,119
the last directory of a path that's

00:47:49,160 --> 00:47:56,480
using this method and like I said

00:47:53,119 --> 00:48:00,009
earlier we're gonna use find up and we

00:47:56,480 --> 00:48:03,049
can use the sync method own find

00:48:00,009 --> 00:48:05,930
to find a file somewhere in the file

00:48:03,049 --> 00:48:07,789
system what find ups going to do is it's

00:48:05,930 --> 00:48:09,799
going to travel up the final file system

00:48:07,789 --> 00:48:11,930
until it finds the file and that's we're

00:48:09,799 --> 00:48:15,440
going to return an absolute path to that

00:48:11,930 --> 00:48:18,730
file absolute path to these files can be

00:48:15,440 --> 00:48:21,890
your friend because relative paths

00:48:18,730 --> 00:48:24,289
depending on the users file system can

00:48:21,890 --> 00:48:26,119
do some wonky things sometimes so if

00:48:24,289 --> 00:48:27,619
we're able to dynamically generate an

00:48:26,119 --> 00:48:32,869
absolute path to something

00:48:27,619 --> 00:48:34,970
I think that's somewhat ideal so the

00:48:32,869 --> 00:48:37,279
sync method is a blocking function now

00:48:34,970 --> 00:48:41,269
and you can see these being used in

00:48:37,279 --> 00:48:44,990
build /index such a s so if we look at

00:48:41,269 --> 00:48:49,190
that file we are now done with index

00:48:44,990 --> 00:48:52,640
that is the root of our directory of our

00:48:49,190 --> 00:48:54,890
project this file now is what we're

00:48:52,640 --> 00:48:57,170
going to start working with since we've

00:48:54,890 --> 00:48:59,170
linked our CLI there's not much we're

00:48:57,170 --> 00:49:02,630
going to do in the in the terminal now

00:48:59,170 --> 00:49:05,710
with the CLI we are now going to be

00:49:02,630 --> 00:49:10,039
running commands within the angular

00:49:05,710 --> 00:49:13,400
project that we scaffold it but we're

00:49:10,039 --> 00:49:16,069
going to be coding our build here you

00:49:13,400 --> 00:49:18,980
can see that at the very top of this

00:49:16,069 --> 00:49:22,359
file we're requiring all the

00:49:18,980 --> 00:49:26,450
dependencies for this build script and

00:49:22,359 --> 00:49:31,450
shell path file system are listed find

00:49:26,450 --> 00:49:34,569
up and on line eight you can see a

00:49:31,450 --> 00:49:38,720
method for finding the process root

00:49:34,569 --> 00:49:42,410
again the path the user has typed in the

00:49:38,720 --> 00:49:45,499
command this is a very handy thing you

00:49:42,410 --> 00:49:49,430
find that using path join we're going to

00:49:45,499 --> 00:49:54,079
use some fancy some uses of path here -

00:49:49,430 --> 00:49:57,920
absolutely determine that this is the

00:49:54,079 --> 00:50:01,460
directory the process is running in then

00:49:57,920 --> 00:50:03,789
once we have the process root we can

00:50:01,460 --> 00:50:06,529
figure out what the project route is

00:50:03,789 --> 00:50:10,900
even if the process is running in the

00:50:06,529 --> 00:50:13,090
same directory as the project route

00:50:10,900 --> 00:50:15,550
well you find up we'll start in the

00:50:13,090 --> 00:50:19,240
direct in the directory you specify and

00:50:15,550 --> 00:50:21,520
then it will travel up the tree so with

00:50:19,240 --> 00:50:25,240
online 9 you can see we're calling find

00:50:21,520 --> 00:50:29,500
out sync and we're looking for this NGS

00:50:25,240 --> 00:50:37,540
dot config that j/s file inside of our

00:50:29,500 --> 00:50:41,200
angular project so the next one is CLI

00:50:37,540 --> 00:50:45,190
root we're going to use find up again

00:50:41,200 --> 00:50:49,570
but this time we're going to use the

00:50:45,190 --> 00:50:53,650
underscore underscore dur name B as

00:50:49,570 --> 00:50:57,940
we're going to start at in the file

00:50:53,650 --> 00:51:00,580
system where this index that J s file

00:50:57,940 --> 00:51:02,290
lips and we're going to travel up the

00:51:00,580 --> 00:51:05,760
file structure until we find a

00:51:02,290 --> 00:51:11,050
package.json because our CLI has one

00:51:05,760 --> 00:51:17,110
right here we now know what our CLI root

00:51:11,050 --> 00:51:21,010
is and then we are going to create a

00:51:17,110 --> 00:51:28,470
Const called config and we're going to

00:51:21,010 --> 00:51:31,330
require the config from NGS config Jas

00:51:28,470 --> 00:51:33,960
so then we can see we have a class here

00:51:31,330 --> 00:51:38,010
called build it has a constructor and

00:51:33,960 --> 00:51:41,740
we're going to put all of these

00:51:38,010 --> 00:51:44,530
properties on here so that they can be

00:51:41,740 --> 00:51:47,440
used in our development build and our

00:51:44,530 --> 00:51:51,280
production build again the development

00:51:47,440 --> 00:51:55,780
build extends build all right so does

00:51:51,280 --> 00:52:00,160
the production built the the class built

00:51:55,780 --> 00:52:02,170
here is going to be where we code all of

00:52:00,160 --> 00:52:03,820
the methods that are shared between the

00:52:02,170 --> 00:52:07,600
development build and the production

00:52:03,820 --> 00:52:10,719
build all right

00:52:07,600 --> 00:52:10,719
[Music]

00:52:12,000 --> 00:52:16,740
so I already talked about absolute paths

00:52:14,190 --> 00:52:18,990
but I mean this is an example of it

00:52:16,740 --> 00:52:20,970
so find up is going to return an

00:52:18,990 --> 00:52:25,950
absolute path and it looks something

00:52:20,970 --> 00:52:28,560
like this so on on windows it's going to

00:52:25,950 --> 00:52:32,849
look like the bottom a path is its

00:52:28,560 --> 00:52:43,560
absolute and in UNIX it's going to click

00:52:32,849 --> 00:52:48,770
the top path alright so right now if we

00:52:43,560 --> 00:52:58,290
were to run NGS build dev in our angular

00:52:48,770 --> 00:53:00,750
project we should see that the it's

00:52:58,290 --> 00:53:02,930
trying to copy the public folder that is

00:53:00,750 --> 00:53:06,030
trying to copy the library dependencies

00:53:02,930 --> 00:53:10,220
format the template and compile the

00:53:06,030 --> 00:53:14,609
source let me demo that real quick so

00:53:10,220 --> 00:53:19,200
here so I have my node server running in

00:53:14,609 --> 00:53:21,750
one tab I'm going to run these commands

00:53:19,200 --> 00:53:24,690
in another tab so my server can stay

00:53:21,750 --> 00:53:28,109
running so if I run NGS build dev right

00:53:24,690 --> 00:53:31,470
now we'll see something like this vault

00:53:28,109 --> 00:53:33,180
in the terminal where inside of our

00:53:31,470 --> 00:53:35,430
scripts we already have a lot of these

00:53:33,180 --> 00:53:38,010
console logs hanging out and it's gonna

00:53:35,430 --> 00:53:42,150
log all of the library dependencies that

00:53:38,010 --> 00:53:43,410
we're trying to copy it's going to log

00:53:42,150 --> 00:53:45,900
that we're trying to copy the public

00:53:43,410 --> 00:53:47,369
folder it's going to tell us that NGC

00:53:45,900 --> 00:53:50,070
started even though we haven't really

00:53:47,369 --> 00:53:51,480
started anything yet and it's going to

00:53:50,070 --> 00:53:53,700
tell us that it is trying to format a

00:53:51,480 --> 00:53:56,940
template but it's got all these emojis

00:53:53,700 --> 00:53:58,589
here that are exploding so that's a

00:53:56,940 --> 00:54:05,280
problem we should probably take care of

00:53:58,589 --> 00:54:09,420
it so as we resolve these steps here in

00:54:05,280 --> 00:54:12,170
our source you're gonna take away the

00:54:09,420 --> 00:54:15,570
console log or put it somewhere else and

00:54:12,170 --> 00:54:17,609
you can just get rid of the back-right

00:54:15,570 --> 00:54:20,900
once we start coding this so it'll look

00:54:17,609 --> 00:54:20,900
like it isn't breaking

00:54:23,849 --> 00:54:32,140
we're gonna start off by copying our

00:54:26,559 --> 00:54:34,780
public folder we have this SRC / public

00:54:32,140 --> 00:54:37,630
folder which has our index.html in it it

00:54:34,780 --> 00:54:42,190
has some assets that are required by our

00:54:37,630 --> 00:54:45,849
application it has all our CSS in it it

00:54:42,190 --> 00:54:50,710
has some system configs we could run

00:54:45,849 --> 00:54:52,539
this command in the terminal CP which is

00:54:50,710 --> 00:54:55,539
copy and then we're going to use the our

00:54:52,539 --> 00:54:58,630
flagged or copy recursively every folder

00:54:55,539 --> 00:55:01,480
that's inside of the public folder but

00:54:58,630 --> 00:55:05,230
we can use star at the end of the path

00:55:01,480 --> 00:55:08,410
that we want to copy to copy the

00:55:05,230 --> 00:55:12,010
contents of that directory and not the

00:55:08,410 --> 00:55:14,470
directory itself and then we can tell

00:55:12,010 --> 00:55:16,180
the copy command we're gonna we want to

00:55:14,470 --> 00:55:19,599
copy all the contents of the public

00:55:16,180 --> 00:55:21,670
folder to the build folder the default

00:55:19,599 --> 00:55:25,030
behavior of copy would be to copy the

00:55:21,670 --> 00:55:27,940
public folder to the build folder so you

00:55:25,030 --> 00:55:29,950
would have build slash public but that's

00:55:27,940 --> 00:55:32,920
not what we want we want all of our

00:55:29,950 --> 00:55:36,609
public files to be at the root of our

00:55:32,920 --> 00:55:38,529
build this is not cross-platform though

00:55:36,609 --> 00:55:41,710
if you were to try to run this in

00:55:38,529 --> 00:55:43,420
Windows it would silently fail which is

00:55:41,710 --> 00:55:46,900
always fun it looks like it's running

00:55:43,420 --> 00:55:49,420
but it isn't Windows doesn't know what

00:55:46,900 --> 00:55:51,760
to do with the star and actually this

00:55:49,420 --> 00:55:54,190
operation is kind of complex in the

00:55:51,760 --> 00:55:56,109
windows bash I'm not gonna review it

00:55:54,190 --> 00:56:03,069
today because we have tools that make

00:55:56,109 --> 00:56:05,920
this easier in node instead of typing

00:56:03,069 --> 00:56:07,390
this command into the terminal manually

00:56:05,920 --> 00:56:11,799
we're gonna have no to execute the

00:56:07,390 --> 00:56:14,230
command we're going to require the exec

00:56:11,799 --> 00:56:18,130
or sorry part of the child process

00:56:14,230 --> 00:56:21,549
module and the exact method that is

00:56:18,130 --> 00:56:22,660
available in this module and then we're

00:56:21,549 --> 00:56:24,420
gonna have some method in our

00:56:22,660 --> 00:56:28,210
application that looks kind of like this

00:56:24,420 --> 00:56:31,779
where we have a method called copy dirt

00:56:28,210 --> 00:56:35,190
and we're going to return exact and it's

00:56:31,779 --> 00:56:38,160
going to run this command we can pass in

00:56:35,190 --> 00:56:42,150
options as the second argument and then

00:56:38,160 --> 00:56:44,460
exec has a callback that gives us access

00:56:42,150 --> 00:56:47,940
to the three streams that I outlined

00:56:44,460 --> 00:56:53,210
earlier actually two streams that I

00:56:47,940 --> 00:56:57,089
outlined are the STD out and STD air so

00:56:53,210 --> 00:57:00,119
exec will create a shell for us like we

00:56:57,089 --> 00:57:04,470
were writing a command in our shell in

00:57:00,119 --> 00:57:07,609
the terminal it buffers the output and

00:57:04,470 --> 00:57:10,680
it resolves like a promise when complete

00:57:07,609 --> 00:57:16,530
and it happens to work with async/await

00:57:10,680 --> 00:57:20,000
in node so we could do something like

00:57:16,530 --> 00:57:22,859
this to try to make it cross-platform

00:57:20,000 --> 00:57:24,990
instead let's go back and forth so you

00:57:22,859 --> 00:57:26,849
can kind of see the difference so we had

00:57:24,990 --> 00:57:31,530
the string here right which has our

00:57:26,849 --> 00:57:34,950
paths to SRC / public slash star we

00:57:31,530 --> 00:57:38,700
could try to do this where we use path

00:57:34,950 --> 00:57:41,430
to normalize the paths for Windows so

00:57:38,700 --> 00:57:44,160
when we're calling CP when we're using

00:57:41,430 --> 00:57:47,550
CP in the Windows PowerShell for

00:57:44,160 --> 00:57:50,240
instance it will normalize the path for

00:57:47,550 --> 00:57:52,950
Windows but this still doesn't work

00:57:50,240 --> 00:57:57,740
because Windows doesn't know anything

00:57:52,950 --> 00:58:01,890
about the star so we have to do

00:57:57,740 --> 00:58:04,440
something like this where we're going to

00:58:01,890 --> 00:58:07,710
use this other package called shell Jas

00:58:04,440 --> 00:58:10,190
and what she'll is is a wrapper around

00:58:07,710 --> 00:58:12,750
exec and I'll handle all this

00:58:10,190 --> 00:58:18,390
cross-platform stuff for us it's

00:58:12,750 --> 00:58:24,500
wonderful tool so our our method becomes

00:58:18,390 --> 00:58:24,500
something like this backup one one thing

00:58:24,619 --> 00:58:32,970
where we're going to check if a file

00:58:29,810 --> 00:58:36,630
exists so if our dist folder doesn't

00:58:32,970 --> 00:58:39,000
exist because we're we are copying and

00:58:36,630 --> 00:58:42,690
directory from a two argument source to

00:58:39,000 --> 00:58:46,260
dist if the disk does not exist we're

00:58:42,690 --> 00:58:47,160
gonna use shell to execute the make dear

00:58:46,260 --> 00:58:51,960
command

00:58:47,160 --> 00:58:54,870
with the PFLAG to create that dist

00:58:51,960 --> 00:58:57,150
folder now what the PFLAG does is it

00:58:54,870 --> 00:58:59,580
will create all sub directories in that

00:58:57,150 --> 00:59:04,290
path leading up to that directory it's

00:58:59,580 --> 00:59:10,740
very convenient then we're going to use

00:59:04,290 --> 00:59:12,050
shell dot CP with the our flag to run

00:59:10,740 --> 00:59:14,700
our copy command

00:59:12,050 --> 00:59:19,680
this time we're still normalizing the

00:59:14,700 --> 00:59:24,870
path right for Windows and in UNIX so

00:59:19,680 --> 00:59:26,820
this should work in both but shell is

00:59:24,870 --> 00:59:31,260
gonna make it cross-platform it's gonna

00:59:26,820 --> 00:59:35,040
make the star work in Windows so if you

00:59:31,260 --> 00:59:38,850
go into your project here and we take

00:59:35,040 --> 00:59:42,480
the console log and I'm gonna put it

00:59:38,850 --> 00:59:46,110
sandwich it here in between these two

00:59:42,480 --> 00:59:51,360
snippets of code where you can uncomment

00:59:46,110 --> 00:59:53,460
out the code that's in the copy dear

00:59:51,360 --> 00:59:55,740
method and we get something like this

00:59:53,460 --> 00:59:59,460
right where we check to see if a file

00:59:55,740 --> 01:00:02,670
exists we're gonna use shell to make

00:59:59,460 --> 01:00:06,450
that directory if it doesn't exist we're

01:00:02,670 --> 01:00:09,570
going to log for the user of our CLI

01:00:06,450 --> 01:00:12,870
something is happening alright I'm gonna

01:00:09,570 --> 01:00:16,500
take the bang out and then we're gonna

01:00:12,870 --> 01:00:18,900
return shell dot CP much like we can

01:00:16,500 --> 01:00:20,100
return exec in these methods we said

01:00:18,900 --> 01:00:21,420
shell is just a wrapper it's going to

01:00:20,100 --> 01:00:27,330
resolve like a promise

01:00:21,420 --> 01:00:33,720
so in our dev build we have this await

01:00:27,330 --> 01:00:38,790
write its calls on copied err and we're

01:00:33,720 --> 01:00:42,810
passing in our SRC public folder and the

01:00:38,790 --> 01:00:45,900
build folder as arguments now these

01:00:42,810 --> 01:00:49,890
these arguments are coming from our

01:00:45,900 --> 01:00:52,650
using properties on the NGS config file

01:00:49,890 --> 01:00:54,660
that's in the root of your angular

01:00:52,650 --> 01:00:57,360
project right because we require that in

01:00:54,660 --> 01:00:59,589
the first step so we can make this even

01:00:57,360 --> 01:01:05,589
more dynamic and configurable

01:00:59,589 --> 01:01:08,619
so if we try to run our build now we'll

01:01:05,589 --> 01:01:10,599
get something like this all right what

01:01:08,619 --> 01:01:12,609
won't Wang we didn't really do much

01:01:10,599 --> 01:01:18,309
right he's all we're doing is copying

01:01:12,609 --> 01:01:21,249
the public folder so far but we see that

01:01:18,309 --> 01:01:26,680
the bank came out of it and if I were to

01:01:21,249 --> 01:01:29,079
LS the build folder we can see that we

01:01:26,680 --> 01:01:31,440
have all the files from our public

01:01:29,079 --> 01:01:31,440
folder

01:01:38,340 --> 01:01:45,430
if we were to try to start up our

01:01:43,210 --> 01:01:51,220
browser again we should see something

01:01:45,430 --> 01:01:53,140
like this which is the loading icon that

01:01:51,220 --> 01:01:55,570
tells us our angular application is not

01:01:53,140 --> 01:01:57,900
built yet we're still waiting for that

01:01:55,570 --> 01:01:57,900
to happen

01:02:10,150 --> 01:02:18,430
all right now to copy our library files

01:02:14,400 --> 01:02:20,980
we have to do a slightly different thing

01:02:18,430 --> 01:02:22,839
we can't just we shouldn't just copy the

01:02:20,980 --> 01:02:26,559
entire contents of our node modules

01:02:22,839 --> 01:02:29,140
folder to a library folder that inside

01:02:26,559 --> 01:02:32,319
of the build folder our Express server

01:02:29,140 --> 01:02:34,569
can reference our libraries from that

01:02:32,319 --> 01:02:36,579
would just be bad Bad News Bears because

01:02:34,569 --> 01:02:38,529
it's going to take forever to copy all

01:02:36,579 --> 01:02:40,749
the node modules we only want to pick

01:02:38,529 --> 01:02:43,329
out the node modules that we won you

01:02:40,749 --> 01:02:46,119
know and even from those packages the

01:02:43,329 --> 01:02:51,220
files that we want to use to make sure

01:02:46,119 --> 01:02:53,140
that this is fast for our belt so we're

01:02:51,220 --> 01:02:56,589
going to take all of our library

01:02:53,140 --> 01:03:01,089
dependencies that we get from the array

01:02:56,589 --> 01:03:02,680
in NGS config that is you can see that

01:03:01,089 --> 01:03:06,549
they're being logged here like it's

01:03:02,680 --> 01:03:12,570
trying to copy them we're going to copy

01:03:06,549 --> 01:03:15,180
them from the node modules folder to the

01:03:12,570 --> 01:03:18,900
[Music]

01:03:15,180 --> 01:03:21,999
folder inside of our build called Lib

01:03:18,900 --> 01:03:27,160
now this array pass is configured in NGS

01:03:21,999 --> 01:03:29,200
config and inside of our build our NGS

01:03:27,160 --> 01:03:32,829
config is a property on the bill called

01:03:29,200 --> 01:03:36,609
config so it's properties are again

01:03:32,829 --> 01:03:39,519
usable so we can use we can use these

01:03:36,609 --> 01:03:41,430
Lib property and for the pacific

01:03:39,519 --> 01:03:44,319
environment that we are trying to build

01:03:41,430 --> 01:03:47,950
so if we back up to the the dead build

01:03:44,319 --> 01:03:50,950
you can see here we are awaiting this

01:03:47,950 --> 01:03:53,470
method called copy batch and we're

01:03:50,950 --> 01:03:58,109
passing in the array of library

01:03:53,470 --> 01:04:01,029
dependencies from our config and we are

01:03:58,109 --> 01:04:05,009
passing in a second argument that should

01:04:01,029 --> 01:04:07,029
copy those dependencies to the dist and

01:04:05,009 --> 01:04:08,710
you know I had set up a little code

01:04:07,029 --> 01:04:10,930
challenge for this but you know what

01:04:08,710 --> 01:04:12,430
we're not going to do it just for

01:04:10,930 --> 01:04:16,180
interest of time because I think we

01:04:12,430 --> 01:04:21,430
should focus on the header time compiler

01:04:16,180 --> 01:04:23,230
and closure compiler so go ahead and

01:04:21,430 --> 01:04:30,460
inside

01:04:23,230 --> 01:04:38,380
your CLI if you have any changes just

01:04:30,460 --> 01:04:43,660
stash them like that and you can use git

01:04:38,380 --> 01:04:46,480
checkout to check out two four slash

01:04:43,660 --> 01:04:50,890
template which is the next step in our

01:04:46,480 --> 01:05:02,200
process just like just like so and when

01:04:50,890 --> 01:05:06,580
you do that you should see in your build

01:05:02,200 --> 01:05:08,440
slash index dot JSP the solution for

01:05:06,580 --> 01:05:13,900
this code challenge

01:05:08,440 --> 01:05:18,790
so in our dev build we are calling copy

01:05:13,900 --> 01:05:21,960
batch copy batch is going to return an

01:05:18,790 --> 01:05:24,520
array of promises using promised at all

01:05:21,960 --> 01:05:27,730
since we are inputting an array of

01:05:24,520 --> 01:05:33,270
strings when we call promised at all

01:05:27,730 --> 01:05:33,270
we're going to map that array of strings

01:05:33,330 --> 01:05:38,950
using this copy to method we have that

01:05:36,670 --> 01:05:40,900
is just above which is going to return

01:05:38,950 --> 01:05:45,040
promises right so we're mapping our

01:05:40,900 --> 01:05:49,150
strings to promises in copy 2 we're

01:05:45,040 --> 01:05:53,619
going to return a new promise we're

01:05:49,150 --> 01:05:58,359
checking to see if the out file exists

01:05:53,619 --> 01:06:01,840
the out file is created by joining the

01:05:58,359 --> 01:06:08,980
path of the dist folder to the file path

01:06:01,840 --> 01:06:14,440
of the the node module file that we are

01:06:08,980 --> 01:06:18,760
trying to copy and if it if it does not

01:06:14,440 --> 01:06:20,440
exist we're going to do a similar

01:06:18,760 --> 01:06:24,340
operation we did for the public we're

01:06:20,440 --> 01:06:27,040
going to check ok does the path that we

01:06:24,340 --> 01:06:29,200
want a copy to exists does it does the

01:06:27,040 --> 01:06:30,760
directory exists if it doesn't we're

01:06:29,200 --> 01:06:33,369
going to create that directory using

01:06:30,760 --> 01:06:34,930
mcdeere then we're going to log that

01:06:33,369 --> 01:06:38,670
we're copying the file

01:06:34,930 --> 01:06:42,309
and then we're going to actually copy

01:06:38,670 --> 01:06:49,799
the file path from the node modules

01:06:42,309 --> 01:06:52,210
folder to the out file so when you run

01:06:49,799 --> 01:06:53,039
NGS build dead now you get something

01:06:52,210 --> 01:06:56,289
like this

01:06:53,039 --> 01:06:57,910
all right where it's logging that we

01:06:56,289 --> 01:07:02,500
copied each one of our library

01:06:57,910 --> 01:07:05,770
dependencies and that we copied our

01:07:02,500 --> 01:07:08,319
public and even that I formatted or our

01:07:05,770 --> 01:07:14,910
template is we are skipping ahead for a

01:07:08,319 --> 01:07:14,910
time so let's go back to the slides

01:07:17,579 --> 01:07:26,890
again our NGS config looks something

01:07:19,990 --> 01:07:28,569
like this we have our library files in

01:07:26,890 --> 01:07:33,190
the next step we're going to take the

01:07:28,569 --> 01:07:35,380
index dot HTML and we're going to copy

01:07:33,190 --> 01:07:37,930
it over as well since we are already on

01:07:35,380 --> 01:07:39,670
this branch of the git repo it's already

01:07:37,930 --> 01:07:41,619
happening for you again I don't want you

01:07:39,670 --> 01:07:43,510
all to concentrate on this because the

01:07:41,619 --> 01:07:48,339
meat of this is ahead of time compiling

01:07:43,510 --> 01:07:52,029
closure so we're going to use this HTML

01:07:48,339 --> 01:07:52,450
processor module it's been around for a

01:07:52,029 --> 01:07:55,829
while

01:07:52,450 --> 01:07:58,680
it's what gulp and grunt use to format

01:07:55,829 --> 01:08:02,260
index.html it takes environment

01:07:58,680 --> 01:08:05,680
variables so we can do something like

01:08:02,260 --> 01:08:09,789
this where we can comment an index out

01:08:05,680 --> 01:08:12,609
HTML and we can comment it with the

01:08:09,789 --> 01:08:15,579
build and we can run a command that we

01:08:12,609 --> 01:08:18,489
want to remove a particular snippet for

01:08:15,579 --> 01:08:21,850
a particular build inside of our index

01:08:18,489 --> 01:08:25,060
touch a s it's pretty handy for this it

01:08:21,850 --> 01:08:29,199
allows us to have one index dot HTML for

01:08:25,060 --> 01:08:31,359
multiple environments it's just a way of

01:08:29,199 --> 01:08:33,100
doing this again it webpack you know it

01:08:31,359 --> 01:08:36,429
does a lot of magic with indexes right

01:08:33,100 --> 01:08:40,299
so we don't have web back today so this

01:08:36,429 --> 01:08:42,759
is just a way for us to handle our index

01:08:40,299 --> 01:08:46,809
dot HTML in our development build is

01:08:42,759 --> 01:08:50,469
going to require the reflect metadata

01:08:46,809 --> 01:08:53,440
package for angular it's also going to

01:08:50,469 --> 01:08:56,469
has a live reload server it also has

01:08:53,440 --> 01:08:58,900
this file called a system config we're

01:08:56,469 --> 01:09:00,819
using system J s B is it's already a

01:08:58,900 --> 01:09:04,710
dependency for angular so we might as

01:09:00,819 --> 01:09:07,889
well use it system J s is going to load

01:09:04,710 --> 01:09:10,150
UMD modules for our development built

01:09:07,889 --> 01:09:13,059
the system config looks something like

01:09:10,150 --> 01:09:16,630
this and this is in the SRC public

01:09:13,059 --> 01:09:21,309
folder you can take a look at it in your

01:09:16,630 --> 01:09:23,829
angular project we establish a paths

01:09:21,309 --> 01:09:28,389
object that allows us to create these

01:09:23,829 --> 01:09:30,730
aliases for node modules and for Lib all

01:09:28,389 --> 01:09:33,789
the files that we copied from our node

01:09:30,730 --> 01:09:37,449
modules we copied them into the library

01:09:33,789 --> 01:09:40,929
folder or Lib folder so this alias is

01:09:37,449 --> 01:09:45,489
going to allow us to map the requests

01:09:40,929 --> 01:09:48,159
that the browser is making for these

01:09:45,489 --> 01:09:51,369
dependencies like angular HTTP or

01:09:48,159 --> 01:09:54,789
angular router angular forms we can map

01:09:51,369 --> 01:09:58,239
that request to the common J's bundle

01:09:54,789 --> 01:10:01,840
for each one of these dependencies so we

01:09:58,239 --> 01:10:05,770
can develop with these modules you would

01:10:01,840 --> 01:10:11,550
do a similar thing for rxjs and TS Lib

01:10:05,770 --> 01:10:11,550
is necessary for I think the HTTP client

01:10:11,730 --> 01:10:19,420
this process runs something like this

01:10:16,239 --> 01:10:22,179
since HTML processor is installed

01:10:19,420 --> 01:10:24,639
locally and not globally we have to run

01:10:22,179 --> 01:10:27,219
the process locally so we can't just

01:10:24,639 --> 01:10:30,159
type in HTML processor in the terminal

01:10:27,219 --> 01:10:33,159
right we have to we would have to type

01:10:30,159 --> 01:10:37,210
in node underscore modules slash bin

01:10:33,159 --> 01:10:42,460
slash HTML processor to run this process

01:10:37,210 --> 01:10:44,739
locally HTML processor takes a few

01:10:42,460 --> 01:10:48,090
arguments the first argument is the

01:10:44,739 --> 01:10:51,760
index or is the template we want to

01:10:48,090 --> 01:10:55,150
process through HTML processor it takes

01:10:51,760 --> 01:10:58,800
an output argument - OH which tells us

01:10:55,150 --> 01:11:00,610
where we want HTML processor to put the

01:10:58,800 --> 01:11:02,100
index.html once it's sorted

01:11:00,610 --> 01:11:07,510
through all the environment variables

01:11:02,100 --> 01:11:09,460
and then we pass it an environment so

01:11:07,510 --> 01:11:18,400
this would look something like this in

01:11:09,460 --> 01:11:23,190
nodejs where we call exec and exec will

01:11:18,400 --> 01:11:25,780
look for HTML processor locally and then

01:11:23,190 --> 01:11:29,920
pass in the index.html as its first

01:11:25,780 --> 01:11:33,460
argument use the output argument and the

01:11:29,920 --> 01:11:37,210
environment argument but that is not

01:11:33,460 --> 01:11:39,250
cross-platform so the HTML processor

01:11:37,210 --> 01:11:43,510
tool is not cross Bachmann by default

01:11:39,250 --> 01:11:46,540
not all node modules are so you have to

01:11:43,510 --> 01:11:51,010
do something like this where you use

01:11:46,540 --> 01:11:53,590
path again to join the path to HTML

01:11:51,010 --> 01:11:55,330
processor so on Windows we'll get our 4

01:11:53,590 --> 01:11:58,119
or backslashes or forward slashes

01:11:55,330 --> 01:12:02,170
whatever they are then we're gonna call

01:11:58,119 --> 01:12:03,880
exec with that command we're gonna pass

01:12:02,170 --> 01:12:08,170
it the template because we're making

01:12:03,880 --> 01:12:09,550
this dynamic then we're going to with

01:12:08,170 --> 01:12:14,980
the output argument again we're gonna

01:12:09,550 --> 01:12:19,150
use path to join to put in a path it's

01:12:14,980 --> 01:12:21,909
Windows and Mac OS friendly and then

01:12:19,150 --> 01:12:24,699
we're gonna use the environment variable

01:12:21,909 --> 01:12:26,350
that's available on the program object

01:12:24,699 --> 01:12:28,300
now if you remember the program object

01:12:26,350 --> 01:12:30,639
from the very first part of this that

01:12:28,300 --> 01:12:33,369
was commander right where we're as

01:12:30,639 --> 01:12:37,690
processing our process starred Veit we

01:12:33,369 --> 01:12:41,800
now have the end when the user typed NGS

01:12:37,690 --> 01:12:45,730
build dev Det the string dev will get

01:12:41,800 --> 01:12:47,800
placed right here so we get something

01:12:45,730 --> 01:12:54,310
like this where we have our method

01:12:47,800 --> 01:12:56,619
format index and we return exec so if we

01:12:54,310 --> 01:13:01,989
look at our code it looks something like

01:12:56,619 --> 01:13:05,290
this right this is an example so we're

01:13:01,989 --> 01:13:09,310
returning exec we're joining the path

01:13:05,290 --> 01:13:11,650
which from our project route right to

01:13:09,310 --> 01:13:12,969
and we're using path a normalized here

01:13:11,650 --> 01:13:13,960
this is a little different than path dot

01:13:12,969 --> 01:13:20,410
drawing but

01:13:13,960 --> 01:13:25,540
would do the same thing alright so if

01:13:20,410 --> 01:13:27,340
you ran NGS build dev now you might see

01:13:25,540 --> 01:13:30,820
something like this right we no longer

01:13:27,340 --> 01:13:32,830
see the complete log of all of our

01:13:30,820 --> 01:13:34,840
library files that's because in the

01:13:32,830 --> 01:13:37,660
previous step we check to see if that

01:13:34,840 --> 01:13:39,580
library file existed in the build folder

01:13:37,660 --> 01:13:41,710
and if it exists is not going to try to

01:13:39,580 --> 01:13:43,420
copy it again this is a performance

01:13:41,710 --> 01:13:47,170
improvement for our build so it can run

01:13:43,420 --> 01:13:52,090
super fast so if you were to remove the

01:13:47,170 --> 01:13:54,160
build you get something like this again

01:13:52,090 --> 01:14:03,040
right where it's going to copy all the

01:13:54,160 --> 01:14:04,810
library dependencies again all right so

01:14:03,040 --> 01:14:07,750
you're not going to get away from this

01:14:04,810 --> 01:14:09,430
so easy we actually will have a KO

01:14:07,750 --> 01:14:14,430
challenge it's time for the other time

01:14:09,430 --> 01:14:18,550
compiler now that we have an index.html

01:14:14,430 --> 01:14:20,500
is being properly formatted we have all

01:14:18,550 --> 01:14:23,489
of our library dependencies in place is

01:14:20,500 --> 01:14:26,560
we can compile our angular application

01:14:23,489 --> 01:14:32,440
we're going to rely on this package the

01:14:26,560 --> 01:14:34,510
compiler CLI the COI for the header time

01:14:32,440 --> 01:14:38,469
compiler looks something like this a run

01:14:34,510 --> 01:14:43,450
we can use the NGC command not to be

01:14:38,469 --> 01:14:49,570
confused with our CLI NGS with the PFLAG

01:14:43,450 --> 01:14:52,890
and we can point NGC to or TS config NGC

01:14:49,570 --> 01:14:55,750
is just a wrapper around typescript and

01:14:52,890 --> 01:15:00,430
the P argument will point us to a TS

01:14:55,750 --> 01:15:05,170
config notice how it's the TS config dev

01:15:00,430 --> 01:15:08,860
JSON our project does have a TS config

01:15:05,170 --> 01:15:12,430
dot JSON at its root this is a best

01:15:08,860 --> 01:15:14,950
practice most likely because a vs code

01:15:12,430 --> 01:15:16,150
is going to require TS config there so

01:15:14,950 --> 01:15:19,660
it doesn't get all hung up about

01:15:16,150 --> 01:15:24,760
experimenter emit emitting decorator

01:15:19,660 --> 01:15:26,500
metadata and experimental decorators we

01:15:24,760 --> 01:15:27,400
configure NGC to have a module

01:15:26,500 --> 01:15:29,980
resolution

01:15:27,400 --> 01:15:34,510
multiple resolution of nodes so it looks

01:15:29,980 --> 01:15:38,370
in our node modules and we configure NGC

01:15:34,510 --> 01:15:41,350
so that we point it through some type

01:15:38,370 --> 01:15:46,890
definitions that are available via the

01:15:41,350 --> 01:15:49,810
app types library we're gonna enable our

01:15:46,890 --> 01:15:56,290
NGC to know that there are node types

01:15:49,810 --> 01:15:59,860
and that there are two Lib packages for

01:15:56,290 --> 01:16:02,320
es 2617 and dom this is pretty standard

01:15:59,860 --> 01:16:06,460
the the angular CLI would spit out

01:16:02,320 --> 01:16:10,989
something like this as well so we have

01:16:06,460 --> 01:16:13,449
this TS config dev json which extends TS

01:16:10,989 --> 01:16:17,199
config that json for our development

01:16:13,449 --> 01:16:21,270
build we're extending it because our

01:16:17,199 --> 01:16:21,270
development build is going to output the

01:16:21,900 --> 01:16:27,250
ahead-of-time compiled angular

01:16:24,219 --> 01:16:30,130
application in the devine the build

01:16:27,250 --> 01:16:34,179
directory for development it's going to

01:16:30,130 --> 01:16:35,860
target es v and it's going to compile

01:16:34,179 --> 01:16:37,960
everything with a common J's module

01:16:35,860 --> 01:16:39,550
pattern B's we're already using a common

01:16:37,960 --> 01:16:42,820
J's module pattern for all of our

01:16:39,550 --> 01:16:46,239
library dependencies this will allow us

01:16:42,820 --> 01:16:47,830
to run a development server this is

01:16:46,239 --> 01:16:48,909
different than production though with

01:16:47,830 --> 01:16:52,330
production we're going to do slightly

01:16:48,909 --> 01:16:54,370
something slightly different we're going

01:16:52,330 --> 01:16:58,570
to include all of the typescript files

01:16:54,370 --> 01:17:04,300
inside of our source and this file main

01:16:58,570 --> 01:17:07,420
dev D s main dev de TS that's a little

01:17:04,300 --> 01:17:07,929
type oceans AJ s looks something like

01:17:07,420 --> 01:17:10,540
this

01:17:07,929 --> 01:17:14,860
we're going to import platform browser

01:17:10,540 --> 01:17:17,920
from angular platform browser we're

01:17:14,860 --> 01:17:21,489
going to import app module ng factory

01:17:17,920 --> 01:17:25,210
from our source efforts compiled as an

01:17:21,489 --> 01:17:28,449
NG Factory and we're going to call

01:17:25,210 --> 01:17:32,230
bootstrap module Factory on platform

01:17:28,449 --> 01:17:36,610
browser and pass in the ng app module in

01:17:32,230 --> 01:17:38,780
G factory with the ahead time compiler

01:17:36,610 --> 01:17:40,640
we get a watch argument so

01:17:38,780 --> 01:17:45,050
like this which would start up a watcher

01:17:40,640 --> 01:17:46,970
it allows us to run NGC a little faster

01:17:45,050 --> 01:17:51,890
because it puts all of our application

01:17:46,970 --> 01:17:54,890
code in memory it will compile on change

01:17:51,890 --> 01:17:59,960
of all of our typescript HTML CSS inside

01:17:54,890 --> 01:18:02,330
of our Apple Inc Euler application so we

01:17:59,960 --> 01:18:07,820
could do something like this right where

01:18:02,330 --> 01:18:14,110
we use the exec command to point to NGC

01:18:07,820 --> 01:18:18,830
installed locally we use the PFLAG we

01:18:14,110 --> 01:18:21,710
are going to use this argument or sorry

01:18:18,830 --> 01:18:25,850
this option called silent to silence the

01:18:21,710 --> 01:18:29,390
shell this would give us the advantage

01:18:25,850 --> 01:18:33,010
of being able to style our own logs if

01:18:29,390 --> 01:18:37,670
we wanted to we could then use the

01:18:33,010 --> 01:18:41,570
callback here so that whenever NGC is

01:18:37,670 --> 01:18:44,060
logging we in check if STD error is

01:18:41,570 --> 01:18:47,870
being passed through the callback here

01:18:44,060 --> 01:18:50,090
and we could log it how AM is in watch

01:18:47,870 --> 01:18:53,420
mode exec is not going to be something

01:18:50,090 --> 01:18:55,730
we want to use exec returns a buffer

01:18:53,420 --> 01:18:59,960
it's going it's a parade expects the

01:18:55,730 --> 01:19:02,720
process to stop where is with the

01:18:59,960 --> 01:19:06,800
watcher we want to keep it running so

01:19:02,720 --> 01:19:10,850
we're gonna use spawn instead we're

01:19:06,800 --> 01:19:16,490
going to point spawn towards NGC but

01:19:10,850 --> 01:19:18,700
spawn unlike exec lacks a shell so with

01:19:16,490 --> 01:19:22,340
exec we could have just passed in the

01:19:18,700 --> 01:19:24,560
command like we would in the terminal

01:19:22,340 --> 01:19:26,740
but with shell we can't do that or we're

01:19:24,560 --> 01:19:29,800
sorry it would spawn we can't do that

01:19:26,740 --> 01:19:33,290
spawn we have to pass in the arguments

01:19:29,800 --> 01:19:37,190
like so for our command we want to run

01:19:33,290 --> 01:19:40,880
in an array as the second argument and

01:19:37,190 --> 01:19:45,710
then we're going to give spawn an option

01:19:40,880 --> 01:19:48,619
of inheriting stdio which allows spawn

01:19:45,710 --> 01:19:51,230
to inherit the standard io of its

01:19:48,619 --> 01:19:54,139
it's parent is our index such a yes

01:19:51,230 --> 01:19:57,440
right is is our process that is running

01:19:54,139 --> 01:19:59,030
right now spawn is a child of that this

01:19:57,440 --> 01:20:00,650
is node that's why it's called node

01:19:59,030 --> 01:20:05,210
there you can have all these nodes that

01:20:00,650 --> 01:20:08,830
are children of things so it's going to

01:20:05,210 --> 01:20:14,710
inherit the standard IO so that when

01:20:08,830 --> 01:20:20,630
yeah so yeah so the challenge for you is

01:20:14,710 --> 01:20:25,840
to use exec and spawn inside of the

01:20:20,630 --> 01:20:31,040
project here we have a compile method

01:20:25,840 --> 01:20:37,760
that is resolving a promise I want you

01:20:31,040 --> 01:20:40,909
to take 15 minutes we have time for what

01:20:37,760 --> 01:20:45,710
this method should do is compile your

01:20:40,909 --> 01:20:48,260
angular source for dev in watch mode you

01:20:45,710 --> 01:20:51,199
should use the environment variable that

01:20:48,260 --> 01:20:55,340
is available in this class write your

01:20:51,199 --> 01:20:59,630
solution and compile use spawn and exec

01:20:55,340 --> 01:21:03,889
and then look for the output in build

01:20:59,630 --> 01:21:07,159
slash SRC you can preview the output in

01:21:03,889 --> 01:21:09,770
the localhost colon 4200 as well because

01:21:07,159 --> 01:21:12,550
you have a server running you have an

01:21:09,770 --> 01:21:16,340
example of how to use exec here in

01:21:12,550 --> 01:21:16,909
format index there here I'll get you

01:21:16,340 --> 01:21:21,739
started

01:21:16,909 --> 01:21:24,050
so if if we wanted to run without the

01:21:21,739 --> 01:21:29,389
watcher we would do something like this

01:21:24,050 --> 01:21:34,550
we would return exec and then we're

01:21:29,389 --> 01:21:42,820
gonna use path join and path our join

01:21:34,550 --> 01:21:46,630
would be the node modules dot bin and

01:21:42,820 --> 01:21:46,630
then ng see

01:21:47,550 --> 01:21:59,190
so this will run the NGC Command but we

01:21:52,770 --> 01:22:02,310
want to point NGC to RTS config so we

01:21:59,190 --> 01:22:03,690
can concatenate a string here these

01:22:02,310 --> 01:22:10,830
paths that joint is just going to create

01:22:03,690 --> 01:22:13,980
a string so you can add making sure

01:22:10,830 --> 01:22:19,650
there's a space between the path the

01:22:13,980 --> 01:22:23,550
PFLAG and then again we're going to use

01:22:19,650 --> 01:22:29,030
our environment variables so we want to

01:22:23,550 --> 01:22:35,160
point it to the TS config dot and then

01:22:29,030 --> 01:22:44,960
program dot a bill or this stop program

01:22:35,160 --> 01:22:50,040
dot build sorry and dot JSON at the end

01:22:44,960 --> 01:22:51,090
so this will build us for a build this

01:22:50,040 --> 01:22:53,790
well ahead of time compile our

01:22:51,090 --> 01:22:58,440
application for whatever build we're in

01:22:53,790 --> 01:23:01,350
so if the user types in NGS could NGS

01:22:58,440 --> 01:23:05,489
build dev it will compile for dev it'll

01:23:01,350 --> 01:23:11,700
use the TS config for dev if they run

01:23:05,489 --> 01:23:16,020
NGS build dev watch that won't work wait

01:23:11,700 --> 01:23:19,230
yet because we need to explore that but

01:23:16,020 --> 01:23:25,070
if they were to run NGS build prod it

01:23:19,230 --> 01:23:32,880
would just pick up the progeny r NGS

01:23:25,070 --> 01:23:38,190
build dev all right I didn't put any

01:23:32,880 --> 01:23:41,730
logs so it's going to complete and if i

01:23:38,190 --> 01:23:44,400
refresh my browser we can see we get a

01:23:41,730 --> 01:23:50,150
little angular logo here now that means

01:23:44,400 --> 01:23:50,150
our angular application is now compiled

01:23:56,290 --> 01:24:03,320
now we don't have any feedback for the

01:23:58,909 --> 01:24:06,199
user so that's using our CLI so I'm

01:24:03,320 --> 01:24:12,800
going to go ahead and log before exact

01:24:06,199 --> 01:24:15,409
runs that NGC is started to prompt the

01:24:12,800 --> 01:24:23,900
user that something is happening we

01:24:15,409 --> 01:24:27,820
expect a script to run but ng C by

01:24:23,900 --> 01:24:33,280
itself is not printing anything in the

01:24:27,820 --> 01:24:37,159
in the terminal so we can go in here and

01:24:33,280 --> 01:24:39,199
we pass it an OP options as a second

01:24:37,159 --> 01:24:45,170
argument and then there's a third

01:24:39,199 --> 01:24:48,949
argument we get a callback which would

01:24:45,170 --> 01:24:57,560
be three arguments in here error STD out

01:24:48,949 --> 01:24:59,860
and STD error and we can in here log STD

01:24:57,560 --> 01:24:59,860
err

01:25:06,449 --> 01:25:14,800
so now that when I run NGS bill dev we

01:25:11,050 --> 01:25:16,989
can see that it shows us that mgc

01:25:14,800 --> 01:25:21,540
started but I still doesn't tell us that

01:25:16,989 --> 01:25:24,070
a completed as we as NGC doesn't emit

01:25:21,540 --> 01:25:26,409
anything from s to D error when it runs

01:25:24,070 --> 01:25:35,080
in this mode it runs just as the exact

01:25:26,409 --> 01:25:36,940
command so if we wanted to print that it

01:25:35,080 --> 01:25:44,650
finished we would have to wrap this a

01:25:36,940 --> 01:25:47,650
different way so what I want you to do

01:25:44,650 --> 01:25:53,800
is take about five minutes and figure

01:25:47,650 --> 01:25:58,719
out how using this pattern the user

01:25:53,800 --> 01:26:05,199
could run The Watcher and if I ran NGS

01:25:58,719 --> 01:26:11,440
build dev watch we have to use spawn

01:26:05,199 --> 01:26:15,219
instead and like I said spawn is

01:26:11,440 --> 01:26:19,869
formatted like this so go ahead and try

01:26:15,219 --> 01:26:24,250
to figure out in the code if you if the

01:26:19,869 --> 01:26:30,330
user ran the watch command watch

01:26:24,250 --> 01:26:30,330
argument you spawn instead of exec

01:27:25,639 --> 01:27:33,760
I'll give you a little hint it should

01:27:29,809 --> 01:27:33,760
probably look like something like this

01:27:38,439 --> 01:27:44,809
where we're checking if the user ran the

01:27:41,899 --> 01:27:49,300
dev build and if the watch argument

01:27:44,809 --> 01:27:49,300
exists we're going to call spawn instead

01:28:17,940 --> 01:28:25,570
and NGC is been going to know the user

01:28:21,130 --> 01:28:28,230
used typed and understaffed - watch from

01:28:25,570 --> 01:28:33,930
our CLI so we have to tell NGC to use

01:28:28,230 --> 01:28:33,930
watch so it can run its own watcher

01:28:40,640 --> 01:28:43,960
give you two more minutes

01:29:21,490 --> 01:29:29,050
if you're on Windows I would highly

01:29:23,410 --> 01:29:34,260
suggest you use path that drawing for

01:29:29,050 --> 01:29:34,260
the node module slash bin slash NGC

01:29:42,440 --> 01:29:50,690
all right so let's go ahead and look at

01:29:45,800 --> 01:29:53,150
the solution it's okay if you are not

01:29:50,690 --> 01:29:56,480
quite done but we need to move along

01:29:53,150 --> 01:30:00,100
because we have limited time so I'm

01:29:56,480 --> 01:30:05,960
gonna go ahead and stash my changes and

01:30:00,100 --> 01:30:10,760
I'm going to check out six closure or

01:30:05,960 --> 01:30:19,160
six six slash closure so we can jump

01:30:10,760 --> 01:30:26,600
ahead so look like vs code is BS code

01:30:19,160 --> 01:30:29,330
agrees with me that I changed there we

01:30:26,600 --> 01:30:31,450
go so this is a this is an example of a

01:30:29,330 --> 01:30:37,970
full-on implementation of this

01:30:31,450 --> 01:30:43,220
accounting for all cross-platform stuff

01:30:37,970 --> 01:30:45,170
we need to do so if the user is in the

01:30:43,220 --> 01:30:48,470
dev build and they use the watch

01:30:45,170 --> 01:30:51,590
argument we're going to spawn and we

01:30:48,470 --> 01:30:55,280
don't have to create a variable here we

01:30:51,590 --> 01:30:56,630
could just spawn and to make this

01:30:55,280 --> 01:31:01,390
compatible with Windows we're going to

01:30:56,630 --> 01:31:06,080
use path to to create the path for mgc

01:31:01,390 --> 01:31:11,930
then we're going to tell NGC to find the

01:31:06,080 --> 01:31:17,750
TS config for our build and then once we

01:31:11,930 --> 01:31:21,220
do that it's going to inside of our

01:31:17,750 --> 01:31:24,410
angular application it's going to start

01:31:21,220 --> 01:31:27,890
NGC but you also you see here now we get

01:31:24,410 --> 01:31:31,940
this little law compilation complete now

01:31:27,890 --> 01:31:35,930
NGC didn't tell us that it was done be

01:31:31,940 --> 01:31:39,530
nice if it did but it doesn't so what I

01:31:35,930 --> 01:31:42,470
had to do to make this work was if the

01:31:39,530 --> 01:31:48,860
user just wanted to run the build

01:31:42,470 --> 01:31:52,580
without the watcher I call an exact but

01:31:48,860 --> 01:31:53,620
here we're going to log the any errors

01:31:52,580 --> 01:31:57,100
that are that

01:31:53,620 --> 01:32:00,190
happen from our angular source if there

01:31:57,100 --> 01:32:01,660
is no SD air we're going to have a

01:32:00,190 --> 01:32:05,350
little else here that says the

01:32:01,660 --> 01:32:07,270
compilation is complete and it's just

01:32:05,350 --> 01:32:10,990
and then we're going to resolve the

01:32:07,270 --> 01:32:12,640
outer promise here the reason why we

01:32:10,990 --> 01:32:16,990
have to use a promise like this is

01:32:12,640 --> 01:32:19,660
because of this little part here we

01:32:16,990 --> 01:32:23,350
could just return exact it acts like a

01:32:19,660 --> 01:32:24,850
promise but because the every time

01:32:23,350 --> 01:32:26,380
compiler doesn't tell us that it's

01:32:24,850 --> 01:32:30,430
complete I thought it would be a little

01:32:26,380 --> 01:32:40,660
ball carrier tell us it was complete all

01:32:30,430 --> 01:32:43,450
right so when we write oh yeah yes you

01:32:40,660 --> 01:32:48,310
could you could do something like this

01:32:43,450 --> 01:32:50,350
right where you reject the reason I

01:32:48,310 --> 01:32:52,990
didn't do that here in this presentation

01:32:50,350 --> 01:32:55,690
is B as a node it 8 and above it's very

01:32:52,990 --> 01:32:57,760
strict about rejections and if we don't

01:32:55,690 --> 01:32:59,140
and if we included reject here and

01:32:57,760 --> 01:33:01,270
didn't really do anything with it it

01:32:59,140 --> 01:33:02,980
would complain at us I didn't want it to

01:33:01,270 --> 01:33:04,630
mess up the demo

01:33:02,980 --> 01:33:13,120
um but yeah you could do something like

01:33:04,630 --> 01:33:15,460
that yeah that's what we're doing so our

01:33:13,120 --> 01:33:17,950
node script is running that running it

01:33:15,460 --> 01:33:20,230
like we would in the terminal when I

01:33:17,950 --> 01:33:25,980
when I typed in in the terminal

01:33:20,230 --> 01:33:32,220
I ran ng s ng s bill dev watch not ng R

01:33:25,980 --> 01:33:32,220
right ng s is our CLI right so

01:33:39,340 --> 01:33:48,350
yes yes yes so our note script is

01:33:44,690 --> 01:33:49,670
executing that the ng C for us so we

01:33:48,350 --> 01:33:57,380
don't have to type it into the terminal

01:33:49,670 --> 01:34:00,140
ourselves oh you could do that yes you

01:33:57,380 --> 01:34:04,340
could very well take the the source

01:34:00,140 --> 01:34:06,800
right and start using it but then we are

01:34:04,340 --> 01:34:09,199
you know we're using private methods in

01:34:06,800 --> 01:34:12,380
there that could change it could mess up

01:34:09,199 --> 01:34:14,840
our build if they do change over time I

01:34:12,380 --> 01:34:17,060
chose just to use this pattern right

01:34:14,840 --> 01:34:24,010
just because we're using the external

01:34:17,060 --> 01:34:24,010
API that doesn't change right so yeah

01:34:25,719 --> 01:34:31,610
all right so let's go ahead to closure

01:34:28,699 --> 01:34:34,160
compiler and as we're running out of

01:34:31,610 --> 01:34:40,370
time so the main differences between our

01:34:34,160 --> 01:34:42,739
development build and our probability

01:34:40,370 --> 01:34:45,500
though we don't need reflect metadata

01:34:42,739 --> 01:34:48,440
and system is going to load our bundle

01:34:45,500 --> 01:34:53,390
and not the UMD modules it was loading

01:34:48,440 --> 01:34:55,489
in dev our dev build uses a TS config

01:34:53,390 --> 01:35:01,790
that compiles our source into the build

01:34:55,489 --> 01:35:05,110
folder and then it uses main DES as an

01:35:01,790 --> 01:35:08,540
entry point but our Pradas going to

01:35:05,110 --> 01:35:11,840
output all of our ahead-of-time compiled

01:35:08,540 --> 01:35:14,330
code into a staging area that we're

01:35:11,840 --> 01:35:18,050
gonna call TNG factory it's an NG

01:35:14,330 --> 01:35:22,340
factory folder so closure compiler can

01:35:18,050 --> 01:35:25,460
get in there and use that as a source

01:35:22,340 --> 01:35:26,840
for optimizing and bundling right

01:35:25,460 --> 01:35:28,910
because we don't want to spit out all of

01:35:26,840 --> 01:35:30,590
our header time compile code into the

01:35:28,910 --> 01:35:32,660
build folder otherwise that could get

01:35:30,590 --> 01:35:37,910
deployed we don't want that we just want

01:35:32,660 --> 01:35:40,430
to deploy our bundle so the main J s

01:35:37,910 --> 01:35:42,230
looks like this the only difference

01:35:40,430 --> 01:35:45,170
between it and develop is we are now

01:35:42,230 --> 01:35:49,760
importing enable prod mode and calling

01:35:45,170 --> 01:35:52,710
it because we are a header type edit I'm

01:35:49,760 --> 01:35:55,530
compiling both development and

01:35:52,710 --> 01:36:00,660
in our index.html we just need this

01:35:55,530 --> 01:36:03,540
script tag for system to import a s this

01:36:00,660 --> 01:36:06,890
is what it does it's going to import a

01:36:03,540 --> 01:36:10,080
config for prod and then it's going to

01:36:06,890 --> 01:36:13,890
once that config is loaded it's going to

01:36:10,080 --> 01:36:17,850
then import the bundle you know all this

01:36:13,890 --> 01:36:19,890
is boilerplate for you in system dot

01:36:17,850 --> 01:36:21,420
config dot prod we have something like

01:36:19,890 --> 01:36:23,010
this if you remember from our

01:36:21,420 --> 01:36:25,560
development build our config was very

01:36:23,010 --> 01:36:27,270
long we had to configure it to map all

01:36:25,560 --> 01:36:29,700
these requests to the common J's bundles

01:36:27,270 --> 01:36:34,170
we no longer any do that we just need to

01:36:29,700 --> 01:36:36,900
tell a system J s where our bundle is so

01:36:34,170 --> 01:36:42,060
when we make a request for bundle it

01:36:36,900 --> 01:36:44,850
knows it's in bundled uh j s ng c is

01:36:42,060 --> 01:36:49,500
going to use the TS config dot prod

01:36:44,850 --> 01:36:52,410
which extends TS config it has an out

01:36:49,500 --> 01:36:56,040
directory of ng factory instead instead

01:36:52,410 --> 01:36:59,430
of targeting es v and comma j s modules

01:36:56,040 --> 01:37:02,460
when around targeting es2015 modules and

01:36:59,430 --> 01:37:06,060
we are using the es2015 mod you know

01:37:02,460 --> 01:37:09,600
module pattern closure compiler is good

01:37:06,060 --> 01:37:11,970
at both closure compiler is a project it

01:37:09,600 --> 01:37:14,820
started about ten years ago and it

01:37:11,970 --> 01:37:17,130
started at evaluating es 5 and below

01:37:14,820 --> 01:37:20,640
over the past couple years it's gotten

01:37:17,130 --> 01:37:23,640
better evaluating es2015 modules so

01:37:20,640 --> 01:37:26,340
we're going to output es2015 modules for

01:37:23,640 --> 01:37:28,650
closure compiler so our broad belt

01:37:26,340 --> 01:37:31,470
becomes something like this where we're

01:37:28,650 --> 01:37:34,560
going to copy our main TS to mange a s

01:37:31,470 --> 01:37:37,320
so closure compiler can use it as an

01:37:34,560 --> 01:37:39,720
entry point for the bundle closure

01:37:37,320 --> 01:37:44,060
compiler cannot interpret typescript can

01:37:39,720 --> 01:37:46,770
only interpret javascript we're going to

01:37:44,060 --> 01:37:48,980
run the compile method again like we did

01:37:46,770 --> 01:37:53,430
for develop but this time we're going to

01:37:48,980 --> 01:37:56,100
run the bundle method closure compiler

01:37:53,430 --> 01:37:58,860
is an open source java application it

01:37:56,100 --> 01:38:02,460
requires the Java JRE who here has that

01:37:58,860 --> 01:38:03,840
installed well some of you do ok so if

01:38:02,460 --> 01:38:05,320
you do not have that installed you're

01:38:03,840 --> 01:38:07,720
not going to be able to see

01:38:05,320 --> 01:38:11,530
the magic that happens here but I will

01:38:07,720 --> 01:38:13,480
demo it for you it has a restful api

01:38:11,530 --> 01:38:15,700
which we're not going to use today but

01:38:13,480 --> 01:38:18,520
it's really awesome that it does for

01:38:15,700 --> 01:38:21,490
when you're using CI it is an

01:38:18,520 --> 01:38:23,890
optimization tol for first and foremost

01:38:21,490 --> 01:38:25,780
it is really great at optimizing

01:38:23,890 --> 01:38:29,440
JavaScript it is probably the best tool

01:38:25,780 --> 01:38:33,480
I've seen I do not work at Google okay I

01:38:29,440 --> 01:38:36,310
am the third party saying this it is a

01:38:33,480 --> 01:38:41,020
wonderful it will optimize your bundle

01:38:36,310 --> 01:38:43,420
better than uglify can't closure

01:38:41,020 --> 01:38:48,850
compiler does this using type

01:38:43,420 --> 01:38:51,130
annotations in a very closure way but we

01:38:48,850 --> 01:38:54,190
don't type entertained our code base

01:38:51,130 --> 01:38:56,770
using closure we type annotate our code

01:38:54,190 --> 01:38:58,450
base using typescript so the angular

01:38:56,770 --> 01:39:02,080
team about a year ago came up with this

01:38:58,450 --> 01:39:04,090
tool called sickle that will convert all

01:39:02,080 --> 01:39:05,920
of our typescript annotations to closure

01:39:04,090 --> 01:39:10,120
annotations for us which is really

01:39:05,920 --> 01:39:13,990
awesome it does this when we run ng C

01:39:10,120 --> 01:39:16,180
with some compiler options closure

01:39:13,990 --> 01:39:19,330
compiler is really awesome at providing

01:39:16,180 --> 01:39:21,160
warnings it can warn us of security

01:39:19,330 --> 01:39:24,370
holes in our application warn us of

01:39:21,160 --> 01:39:27,790
duplicate code all sorts of all sorts of

01:39:24,370 --> 01:39:29,800
things you implement it like this if we

01:39:27,790 --> 01:39:31,810
were to type it into the terminal this

01:39:29,800 --> 01:39:33,670
would be the command that we run since

01:39:31,810 --> 01:39:36,100
this is a java application they would

01:39:33,670 --> 01:39:38,260
realize when a jar file we're going to

01:39:36,100 --> 01:39:42,370
run java and we're going to point it to

01:39:38,260 --> 01:39:44,940
the jar file which is in the node module

01:39:42,370 --> 01:39:48,540
slash google closure compiler folder

01:39:44,940 --> 01:39:52,690
there is a compiler dot jar in there

01:39:48,540 --> 01:39:56,080
we're going to tell closure compiler to

01:39:52,690 --> 01:39:59,020
use the closure comm file that is in the

01:39:56,080 --> 01:40:00,850
root of our angular project and we're

01:39:59,020 --> 01:40:07,570
going to tell closure compiler to output

01:40:00,850 --> 01:40:09,340
a bundle jas for us the flag file looks

01:40:07,570 --> 01:40:11,920
something like this this closure dot

01:40:09,340 --> 01:40:13,420
kampf this is the header for it we have

01:40:11,920 --> 01:40:17,260
to tell closure compiler which

01:40:13,420 --> 01:40:19,160
compilation level to optimize our code

01:40:17,260 --> 01:40:21,560
at it has various

01:40:19,160 --> 01:40:23,720
optimization levels where you can

01:40:21,560 --> 01:40:27,440
somewhat mangle things you can mangle it

01:40:23,720 --> 01:40:31,820
really heavy advanced optimization is

01:40:27,440 --> 01:40:34,630
the most it does the most mangling and

01:40:31,820 --> 01:40:37,460
it will optimize your codebase

01:40:34,630 --> 01:40:39,410
dramatically I don't think it's worth

01:40:37,460 --> 01:40:41,590
going to closure compiler unless you

01:40:39,410 --> 01:40:44,180
want to take advantage of advanced setup

01:40:41,590 --> 01:40:45,940
optimizations because it's the mode that

01:40:44,180 --> 01:40:48,410
will give you the most optimal bundle

01:40:45,940 --> 01:40:52,850
we're going to tell closure compiler to

01:40:48,410 --> 01:40:57,350
transpile or es2015 code to es5 create a

01:40:52,850 --> 01:41:00,620
source map and give it a module

01:40:57,350 --> 01:41:01,940
resolution of node so it knows that all

01:41:00,620 --> 01:41:06,890
of our dependencies are in the node

01:41:01,940 --> 01:41:09,020
modules folder closure will try to

01:41:06,890 --> 01:41:11,750
mangle everything in your application

01:41:09,020 --> 01:41:13,250
source which is not necessarily

01:41:11,750 --> 01:41:16,460
something you want to happen all the

01:41:13,250 --> 01:41:20,090
time especially if you are relying on

01:41:16,460 --> 01:41:21,860
external libraries closure is not the

01:41:20,090 --> 01:41:25,540
most compatible thing with a lot of

01:41:21,860 --> 01:41:29,600
libraries so we have this up opportunity

01:41:25,540 --> 01:41:32,600
to make a library external to our

01:41:29,600 --> 01:41:36,290
application so that it will not be

01:41:32,600 --> 01:41:37,970
compiled with the bundle there is a file

01:41:36,290 --> 01:41:41,930
called closure externs

01:41:37,970 --> 01:41:45,710
in the root of your angular project for

01:41:41,930 --> 01:41:47,870
this purpose closure compiler will not

01:41:45,710 --> 01:41:49,730
try to bundle anything is declared here

01:41:47,870 --> 01:41:52,820
and it won't mangle any of the

01:41:49,730 --> 01:41:57,670
references to like methods you're using

01:41:52,820 --> 01:41:59,270
on that library a default externs

01:41:57,670 --> 01:42:02,390
configuration would look something like

01:41:59,270 --> 01:42:05,420
this where system is external to our

01:42:02,390 --> 01:42:10,070
application if you're using like angular

01:42:05,420 --> 01:42:11,690
animations hammer is there's this a

01:42:10,070 --> 01:42:13,550
couple other methods in the angular

01:42:11,690 --> 01:42:16,310
source that should be treated as

01:42:13,550 --> 01:42:19,510
external to our source to our

01:42:16,310 --> 01:42:21,980
application source that are listed here

01:42:19,510 --> 01:42:25,820
we also need to tell closure compiler

01:42:21,980 --> 01:42:29,150
about all the JavaScript to put in the

01:42:25,820 --> 01:42:32,090
bundle and so we will tell closure

01:42:29,150 --> 01:42:32,940
compiler about all of our library

01:42:32,090 --> 01:42:35,969
dependencies

01:42:32,940 --> 01:42:39,449
I can bundle like this we can specify

01:42:35,969 --> 01:42:44,370
that with a J s flag and point it to the

01:42:39,449 --> 01:42:46,890
node modules folder and that library so

01:42:44,370 --> 01:42:50,480
with our XG s for instance we're going

01:42:46,890 --> 01:42:53,550
to tell closure compiler to use the ESM

01:42:50,480 --> 01:42:55,500
2015 modules in rxjs and try to bundle

01:42:53,550 --> 01:42:57,560
using those we're going to give it

01:42:55,500 --> 01:42:59,520
access to all of the angular

01:42:57,560 --> 01:43:01,770
dependencies that we need for our

01:42:59,520 --> 01:43:05,130
application as well and then we're going

01:43:01,770 --> 01:43:09,239
to specify that we want to use package

01:43:05,130 --> 01:43:12,060
JSON entry names for es 2015 so this

01:43:09,239 --> 01:43:13,560
coincides with the package format that

01:43:12,060 --> 01:43:16,590
you might be familiar with that was

01:43:13,560 --> 01:43:20,160
announced last year where in angular

01:43:16,590 --> 01:43:22,710
libraries you will see a main field in

01:43:20,160 --> 01:43:25,350
the package JSON that would point to

01:43:22,710 --> 01:43:28,650
common J's modules but you would also

01:43:25,350 --> 01:43:32,310
see an es2015 field pointing to fez ohm

01:43:28,650 --> 01:43:35,640
or ESM modules and so we need to tell

01:43:32,310 --> 01:43:39,210
closure compiler to use this property in

01:43:35,640 --> 01:43:41,610
the package dot JSON of the library that

01:43:39,210 --> 01:43:44,940
we're pulling in so that it knows where

01:43:41,610 --> 01:43:48,630
to pull pull the library code for our

01:43:44,940 --> 01:43:51,180
bundle so we also need a tell closure

01:43:48,630 --> 01:43:53,160
compiler about all of our source which

01:43:51,180 --> 01:43:56,460
is being held in the engine factory

01:43:53,160 --> 01:44:01,550
folder and about our entry point for our

01:43:56,460 --> 01:44:03,750
application which is our main Jas so

01:44:01,550 --> 01:44:06,930
when we do this with node it looks

01:44:03,750 --> 01:44:10,230
something like this where we're gonna

01:44:06,930 --> 01:44:11,930
call Java we're gonna make it happen all

01:44:10,230 --> 01:44:17,310
right so let's see it in action

01:44:11,930 --> 01:44:19,710
when we run NGS build product that's

01:44:17,310 --> 01:44:24,719
gonna tell us and she started closure

01:44:19,710 --> 01:44:27,300
compiler started and come on closure

01:44:24,719 --> 01:44:29,280
when I give demos it takes a while all

01:44:27,300 --> 01:44:31,710
right and it's finished all right so

01:44:29,280 --> 01:44:36,630
once it's finished if our server is

01:44:31,710 --> 01:44:39,449
still running we can see on let me do

01:44:36,630 --> 01:44:41,790
one thing we need to remove our build

01:44:39,449 --> 01:44:44,850
folder let's do that so we have a very

01:44:41,790 --> 01:44:46,290
clean production build because right now

01:44:44,850 --> 01:44:48,660
the way this build script is written

01:44:46,290 --> 01:44:50,130
it's not going to try to delete anything

01:44:48,660 --> 01:44:52,410
in the build folder so we should

01:44:50,130 --> 01:44:56,880
manually try to remove it before running

01:44:52,410 --> 01:44:58,920
the prod build so once we do that we can

01:44:56,880 --> 01:45:01,740
see a fairly dramatic improvement in the

01:44:58,920 --> 01:45:03,630
load time of our application and here if

01:45:01,740 --> 01:45:05,730
we look at the network request we can

01:45:03,630 --> 01:45:07,950
see that there are very few Network

01:45:05,730 --> 01:45:11,100
requests happening versus very many in

01:45:07,950 --> 01:45:14,370
our development build and if we look at

01:45:11,100 --> 01:45:18,120
the bundle j/s right now we are at sixty

01:45:14,370 --> 01:45:20,220
point nine Kb all right so that's mates

01:45:18,120 --> 01:45:21,420
you only seem a little big for somebody

01:45:20,220 --> 01:45:23,610
it should be a really excellent

01:45:21,420 --> 01:45:26,010
optimization tool but this angular

01:45:23,610 --> 01:45:28,860
application is using the router it's

01:45:26,010 --> 01:45:30,630
using the common module it's using you

01:45:28,860 --> 01:45:32,550
know the more modules you use the more

01:45:30,630 --> 01:45:35,790
the larger your bundle is going to

01:45:32,550 --> 01:45:41,540
become there are ways of getting this

01:45:35,790 --> 01:45:46,560
bundle size down even greater though so

01:45:41,540 --> 01:45:49,410
Oh some some closure tips always use

01:45:46,560 --> 01:45:50,880
advanced optimizations in order to

01:45:49,410 --> 01:45:52,920
support closure compiler for your

01:45:50,880 --> 01:45:56,550
angular application you need to type all

01:45:52,920 --> 01:45:59,250
the things like everything all right you

01:45:56,550 --> 01:46:04,440
you cannot get away with having any as a

01:45:59,250 --> 01:46:06,450
type closure will not like that it does

01:46:04,440 --> 01:46:10,590
matter how you structure your code for

01:46:06,450 --> 01:46:12,810
tree shaking that goes with any tool not

01:46:10,590 --> 01:46:14,220
just closure so if you expect to really

01:46:12,810 --> 01:46:15,840
optimal bundle you need to make sure

01:46:14,220 --> 01:46:18,990
your application source can be tree

01:46:15,840 --> 01:46:22,320
shakable just remember that externs

01:46:18,990 --> 01:46:25,410
won't be mangled so when your your and

01:46:22,320 --> 01:46:28,410
closure won't they can't mangle strings

01:46:25,410 --> 01:46:30,960
so if you use bracket syntax for

01:46:28,410 --> 01:46:33,630
referencing properties and methods on an

01:46:30,960 --> 01:46:36,780
external library that's gonna go a long

01:46:33,630 --> 01:46:40,190
way because closure if you're using dot

01:46:36,780 --> 01:46:43,740
syntax it may try to mangle part of that

01:46:40,190 --> 01:46:47,070
closure compiler cannot support import

01:46:43,740 --> 01:46:49,380
star from something yet with es2015

01:46:47,070 --> 01:46:51,420
modules which is kind of a bummer and

01:46:49,380 --> 01:46:54,690
it's yet it is a feature that will come

01:46:51,420 --> 01:46:56,130
to closure compiler soon but you can get

01:46:54,690 --> 01:46:59,270
around this using another tool called

01:46:56,130 --> 01:47:03,080
roll-up right if you have a library that

01:46:59,270 --> 01:47:06,190
is distributed with es2015 modules you

01:47:03,080 --> 01:47:09,130
can use roll up to roll up that

01:47:06,190 --> 01:47:12,530
dependency as a Faysal right as a flat

01:47:09,130 --> 01:47:15,290
es2015 module so that all the sources

01:47:12,530 --> 01:47:18,290
there in one file and closure really

01:47:15,290 --> 01:47:22,880
likes that closure will optimize the

01:47:18,290 --> 01:47:25,460
hell out of that code alright so like I

01:47:22,880 --> 01:47:29,630
said we could get even smaller at this

01:47:25,460 --> 01:47:32,570
point in time right now roll up or sorry

01:47:29,630 --> 01:47:35,330
rxjs is not distributed as phezzan it's

01:47:32,570 --> 01:47:41,420
distributed as es2015 modules with RS

01:47:35,330 --> 01:47:44,150
jx6 so if we were to roll up rxjs as

01:47:41,420 --> 01:47:46,460
phezzan which is possible prior to our

01:47:44,150 --> 01:47:49,040
build closure compiler will be able to

01:47:46,460 --> 01:47:51,020
optimize it even greater and my tests

01:47:49,040 --> 01:47:56,720
they brought the bundle size down by 10

01:47:51,020 --> 01:47:58,790
KB just doing this step then and we can

01:47:56,720 --> 01:48:00,830
also on our server use broadly

01:47:58,790 --> 01:48:03,410
compression instead of gzip compression

01:48:00,830 --> 01:48:04,550
right so broadly is going to bring the

01:48:03,410 --> 01:48:07,190
bundle size down even more

01:48:04,550 --> 01:48:10,640
so we'll go from something what is it

01:48:07,190 --> 01:48:13,520
right now 60 oh sorry I clicked right

01:48:10,640 --> 01:48:15,020
there it's a 60 point 9 I think with

01:48:13,520 --> 01:48:18,560
this application or probably down to

01:48:15,020 --> 01:48:23,930
about 48 kilobytes or 50 so you can

01:48:18,560 --> 01:48:27,140
squeeze more and more out of it all

01:48:23,930 --> 01:48:28,850
right so what can you do next so what we

01:48:27,140 --> 01:48:31,190
did so far is we created a dev

01:48:28,850 --> 01:48:34,340
environment we optimized our bundle for

01:48:31,190 --> 01:48:38,260
production with closure compiler ways to

01:48:34,340 --> 01:48:40,940
improve this build we can style our logs

01:48:38,260 --> 01:48:43,430
right now our logs are very monochrome

01:48:40,940 --> 01:48:47,000
it'd be nice if there is like some very

01:48:43,430 --> 01:48:50,270
user friendly logging that can happen we

01:48:47,000 --> 01:48:52,850
have a way of processing we need a way

01:48:50,270 --> 01:48:54,620
of processing or pre-processing SAS or

01:48:52,850 --> 01:48:57,380
last or something like that we can build

01:48:54,620 --> 01:49:00,350
that into the build we can give the end

01:48:57,380 --> 01:49:02,360
user some build hooks we can give the

01:49:00,350 --> 01:49:04,700
end user a way to deploy the project

01:49:02,360 --> 01:49:05,840
after the build is done we can also

01:49:04,700 --> 01:49:09,530
integrate it with a bunch of other

01:49:05,840 --> 01:49:12,340
tooling other builds we could create

01:49:09,530 --> 01:49:16,139
with closure compiler specifically you

01:49:12,340 --> 01:49:19,989
lazy low birth closure compiler it is a

01:49:16,139 --> 01:49:22,840
closure compiler itself will not code

01:49:19,989 --> 01:49:25,989
split the application for you you need

01:49:22,840 --> 01:49:28,179
to write a script that uses the output

01:49:25,989 --> 01:49:30,670
of closure compiler to code split your

01:49:28,179 --> 01:49:33,760
application if anybody wants to know how

01:49:30,670 --> 01:49:35,409
to do this I am available later today in

01:49:33,760 --> 01:49:39,130
the tour of heroes room I can show you

01:49:35,409 --> 01:49:41,920
how I did it it is possible though and

01:49:39,130 --> 01:49:44,020
you can get really highly optimized lazy

01:49:41,920 --> 01:49:47,260
load loaded modules out of closure

01:49:44,020 --> 01:49:50,320
compiler we can server-side render we

01:49:47,260 --> 01:49:53,590
can create a bill that allows us to use

01:49:50,320 --> 01:49:57,520
angular Universal we could build in i18n

01:49:53,590 --> 01:50:00,639
to this build we could write a bill that

01:49:57,520 --> 01:50:03,310
creates a package for that is library

01:50:00,639 --> 01:50:04,900
the library package format that's fine

01:50:03,310 --> 01:50:08,170
too we have energy package ER for that

01:50:04,900 --> 01:50:09,580
too so we could also write a bill that

01:50:08,170 --> 01:50:14,560
allows us to distribute our code

01:50:09,580 --> 01:50:16,270
natively what's next well you could

01:50:14,560 --> 01:50:17,139
write your own build you could extend

01:50:16,270 --> 01:50:19,659
this build

01:50:17,139 --> 01:50:21,340
you could learn Basel because now you

01:50:19,659 --> 01:50:23,349
know all the prerequisites going into

01:50:21,340 --> 01:50:25,090
that Basel is a wonderful tool for

01:50:23,349 --> 01:50:28,139
optimizing your dev experience

01:50:25,090 --> 01:50:30,790
especially when your applications scales

01:50:28,139 --> 01:50:33,520
I've been evaluating you to work and is

01:50:30,790 --> 01:50:35,980
really great but if you don't really

01:50:33,520 --> 01:50:38,260
know the steps going into it it can be

01:50:35,980 --> 01:50:42,550
really hard to configure so now that you

01:50:38,260 --> 01:50:44,139
know how the ng C compiler works you can

01:50:42,550 --> 01:50:47,739
begin to get in there and start

01:50:44,139 --> 01:50:49,440
configuring basel but really evaluate

01:50:47,739 --> 01:50:51,790
what works best for you and your team

01:50:49,440 --> 01:50:53,440
you know you don't have to use this

01:50:51,790 --> 01:50:55,210
build per se this is a very opinionated

01:50:53,440 --> 01:50:57,550
approach of doing things you can

01:50:55,210 --> 01:51:01,179
evaluate what works for you best and run

01:50:57,550 --> 01:51:05,469
with that I maintain a project called

01:51:01,179 --> 01:51:10,510
angular roll-up I've been doing it now

01:51:05,469 --> 01:51:12,639
for over two years I think it handles

01:51:10,510 --> 01:51:14,830
all this stuff right so I mean you can

01:51:12,639 --> 01:51:16,449
lazy load your application with it you

01:51:14,830 --> 01:51:18,820
can even have this build for dynamic

01:51:16,449 --> 01:51:21,750
routing where you can configure the the

01:51:18,820 --> 01:51:21,750
router before

01:51:22,270 --> 01:51:28,750
the application compiles and then you

01:51:26,320 --> 01:51:30,180
can run it into Universal ihn and all

01:51:28,750 --> 01:51:33,550
that sort of stuff

01:51:30,180 --> 01:51:36,250
2.0 is coming out very soon it's got

01:51:33,550 --> 01:51:37,780
like pretty fight law logs integrates

01:51:36,250 --> 01:51:41,140
with the angular CLI a little better

01:51:37,780 --> 01:51:45,800
stuff like that so that's it I think

01:51:41,140 --> 01:51:50,729
we're out of time so all right well yeah

01:51:45,800 --> 01:51:50,729

YouTube URL: https://www.youtube.com/watch?v=BULrf2pkfJY


