Title: Implementing advanced DOM manipulation scenarios - Maxim NgWizard Koretskyi
Publication date: 2018-11-16
Playlist: ng-conf 2018
Description: 
	ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,000 --> 00:00:03,330
[Applause]

00:00:00,680 --> 00:00:05,670
so today we'll be talking about Dom

00:00:03,330 --> 00:00:06,319
manipulations and how are you doing guys

00:00:05,670 --> 00:00:11,070
okay

00:00:06,319 --> 00:00:13,080
ready for some hardcore okay

00:00:11,070 --> 00:00:17,340
so what I want you to do before we start

00:00:13,080 --> 00:00:19,080
I want you to go to that link because

00:00:17,340 --> 00:00:21,630
since its workshop we'll be doing some

00:00:19,080 --> 00:00:27,390
practical tasks and I want you go there

00:00:21,630 --> 00:00:31,340
it is a github repository and so go

00:00:27,390 --> 00:00:34,950
through the standard workflow git clone

00:00:31,340 --> 00:00:37,469
npm install and npm start so we just

00:00:34,950 --> 00:00:40,770
want to make sure that everyone has

00:00:37,469 --> 00:00:46,079
access and the application has started

00:00:40,770 --> 00:00:52,410
correctly so you can wait for a few

00:00:46,079 --> 00:00:53,699
minutes while you do them actually

00:00:52,410 --> 00:00:57,890
here's the link i'm i'm sorry so you

00:00:53,699 --> 00:00:57,890
don't you don't type this long link

00:01:13,030 --> 00:01:18,060
how's it going so far any problems okay

00:01:21,480 --> 00:01:28,320
cool so while you're doing that I'll

00:01:24,150 --> 00:01:30,520
tell you a little bit about myself I am

00:01:28,320 --> 00:01:33,310
mostly known for angular in depth

00:01:30,520 --> 00:01:35,410
publication that I started with the goal

00:01:33,310 --> 00:01:39,400
to explain how things work under the

00:01:35,410 --> 00:01:41,320
hood in angular so so they just a few

00:01:39,400 --> 00:01:43,600
days ago we reached our first 1 million

00:01:41,320 --> 00:01:45,700
views and if you want to become an

00:01:43,600 --> 00:01:48,310
expert in angular I definitely recommend

00:01:45,700 --> 00:01:50,890
that you check it out because there are

00:01:48,310 --> 00:01:53,320
a lot of good articles there that go

00:01:50,890 --> 00:01:56,440
deep into the framework so if you want

00:01:53,320 --> 00:01:57,540
to know the external internals this is

00:01:56,440 --> 00:02:01,960
the place to go

00:01:57,540 --> 00:02:06,369
and the way we will be working today is

00:02:01,960 --> 00:02:09,310
I have tasks and solutions so I marked

00:02:06,369 --> 00:02:13,660
them with tags so if you want to check

00:02:09,310 --> 00:02:16,630
out tasks you do just get check out tags

00:02:13,660 --> 00:02:22,090
and then t1 for example that's for task

00:02:16,630 --> 00:02:24,760
1 I'll show you here you will have the

00:02:22,090 --> 00:02:29,500
tag name right so you check out before

00:02:24,760 --> 00:02:32,320
we start working on a task and then I'm

00:02:29,500 --> 00:02:36,310
gonna give you 5 to 10 minutes to

00:02:32,320 --> 00:02:38,709
complete it and once we're done you can

00:02:36,310 --> 00:02:43,870
check out the solution right in the same

00:02:38,709 --> 00:02:47,860
way here it will be like solution 1a

00:02:43,870 --> 00:02:49,390
right and if you've done it yourself you

00:02:47,860 --> 00:02:51,130
can then compare the solutions but

00:02:49,390 --> 00:02:55,090
anyway I will show the solution on the

00:02:51,130 --> 00:02:59,320
screen so you can see what's the proper

00:02:55,090 --> 00:03:03,040
way to do it and as we go I think it's a

00:02:59,320 --> 00:03:07,239
good thing if you ask questions ok so

00:03:03,040 --> 00:03:09,370
here you should ask questions I expect

00:03:07,239 --> 00:03:13,510
you to do that

00:03:09,370 --> 00:03:17,650
so as anyone has everyone finished

00:03:13,510 --> 00:03:20,310
installing and running application can

00:03:17,650 --> 00:03:20,310
we start

00:03:20,800 --> 00:03:26,130
yep you're out okay sure

00:03:33,760 --> 00:03:37,810
okay so I'm gonna wait another minute

00:03:36,250 --> 00:03:45,310
and then we'll start

00:03:37,810 --> 00:03:49,659
I will also be playing music while you

00:03:45,310 --> 00:03:51,430
doing the practical exercise I ran it

00:03:49,659 --> 00:03:54,519
through other people and they told me

00:03:51,430 --> 00:03:57,459
like when they get nervous music helps

00:03:54,519 --> 00:04:01,390
them relax so hoping it will have the

00:03:57,459 --> 00:04:03,400
same effect for you as well but if it

00:04:01,390 --> 00:04:09,099
distracts you just let me know and we'll

00:04:03,400 --> 00:04:16,060
turn it off okay so let's get started

00:04:09,099 --> 00:04:18,910
down a bit of theory so every old Dom

00:04:16,060 --> 00:04:21,609
operations we can split into two major

00:04:18,910 --> 00:04:24,910
categories modifying existing done

00:04:21,609 --> 00:04:28,860
element properties like it in class

00:04:24,910 --> 00:04:31,930
setting attributes or changing styles in

00:04:28,860 --> 00:04:34,660
changing Dom hierarchy creating new Dom

00:04:31,930 --> 00:04:37,780
elements adding them to the Dom removing

00:04:34,660 --> 00:04:40,450
an existing element from the Dom and in

00:04:37,780 --> 00:04:42,880
angular there are specific tools for

00:04:40,450 --> 00:04:45,400
each of these type of operations and we

00:04:42,880 --> 00:04:48,789
will see them today and we will start

00:04:45,400 --> 00:04:51,430
with the tools that angular provides for

00:04:48,789 --> 00:04:53,919
us with working with existing element

00:04:51,430 --> 00:04:58,510
properties and we'll see the approach

00:04:53,919 --> 00:05:00,400
that we need to use when doing so so the

00:04:58,510 --> 00:05:03,700
first part we defined Dom element

00:05:00,400 --> 00:05:09,160
properties and we're going to have to do

00:05:03,700 --> 00:05:17,349
the task 1 a so as I showed you should

00:05:09,160 --> 00:05:22,720
go into get right and do git checkout ok

00:05:17,349 --> 00:05:26,460
check out tags t18 right it's going to

00:05:22,720 --> 00:05:29,590
check out the initial data the set up

00:05:26,460 --> 00:05:32,740
I'm going to show to you here on the

00:05:29,590 --> 00:05:37,689
screen you guys see the code maybe I

00:05:32,740 --> 00:05:42,399
should do it like this ok

00:05:37,689 --> 00:05:52,569
better the guys on the back Ross do you

00:05:42,399 --> 00:05:57,099
see it no bigger like this okay okay no

00:05:52,569 --> 00:05:59,139
but when you check out one a task you

00:05:57,099 --> 00:06:03,129
should see the same on your computer

00:05:59,139 --> 00:06:06,729
okay so you don't need to go to look at

00:06:03,129 --> 00:06:09,549
the big screen so what we have here and

00:06:06,729 --> 00:06:13,509
what is the task the task is we have one

00:06:09,549 --> 00:06:16,539
spun element in the DOM and what we want

00:06:13,509 --> 00:06:19,899
is we want to change the font color of

00:06:16,539 --> 00:06:22,360
the span element and to do that we need

00:06:19,899 --> 00:06:25,389
to simply add the highlight attribute

00:06:22,360 --> 00:06:28,269
right because we have styles that when

00:06:25,389 --> 00:06:32,349
any Dom element has highlight attribute

00:06:28,269 --> 00:06:35,979
the color is applied to it so the task

00:06:32,349 --> 00:06:40,629
here will be to get hold of the span

00:06:35,979 --> 00:06:44,050
element inside the component and add the

00:06:40,629 --> 00:06:48,669
attribute to it okay what do we need to

00:06:44,050 --> 00:06:51,939
know to accomplish this task there are a

00:06:48,669 --> 00:06:54,489
few important concepts so in angular how

00:06:51,939 --> 00:06:56,469
do we get access to Dom elements we use

00:06:54,489 --> 00:06:58,959
something called template reference

00:06:56,469 --> 00:07:01,509
variables and view child of your

00:06:58,959 --> 00:07:04,629
children queries so here's the example

00:07:01,509 --> 00:07:08,139
here you can see that inside the spawn

00:07:04,629 --> 00:07:11,289
Dom element we mark it with a template

00:07:08,139 --> 00:07:15,610
reference variable right it can have any

00:07:11,289 --> 00:07:19,419
name and then I'm using view child query

00:07:15,610 --> 00:07:23,289
here and pass in the name of the of the

00:07:19,419 --> 00:07:25,089
reference to get hold of this spawn

00:07:23,289 --> 00:07:27,189
element and what is return is something

00:07:25,089 --> 00:07:31,659
called element trap this is simply an

00:07:27,189 --> 00:07:34,539
abstraction around native Dom elements

00:07:31,659 --> 00:07:36,999
we need it because angular runs on other

00:07:34,539 --> 00:07:40,389
platforms other than Tom like web

00:07:36,999 --> 00:07:42,879
workers etc where there is no native Dom

00:07:40,389 --> 00:07:44,409
no native elements but we need something

00:07:42,879 --> 00:07:48,999
to work with and that's why we have

00:07:44,409 --> 00:07:50,710
element ref here ok and then we can use

00:07:48,999 --> 00:07:55,170
native element properties

00:07:50,710 --> 00:07:58,980
to get access to this native Dom element

00:07:55,170 --> 00:08:02,560
okay any questions so far

00:07:58,980 --> 00:08:06,340
no we're good here okay the next

00:08:02,560 --> 00:08:08,290
question is when can we use this spawn

00:08:06,340 --> 00:08:11,440
when can we access it so we know that

00:08:08,290 --> 00:08:13,630
angular value added this query and we

00:08:11,440 --> 00:08:17,340
can do that inside after if you need

00:08:13,630 --> 00:08:21,400
lifecycle hook okay

00:08:17,340 --> 00:08:23,590
so how we're going to solve this here

00:08:21,400 --> 00:08:25,690
are the steps that you need to do to

00:08:23,590 --> 00:08:28,180
accomplish this task you need to use

00:08:25,690 --> 00:08:31,720
your child query and template reference

00:08:28,180 --> 00:08:36,730
to get an HTML element the way I showed

00:08:31,720 --> 00:08:40,570
you probably you will use al al name for

00:08:36,730 --> 00:08:44,320
the reference and then we use set

00:08:40,570 --> 00:08:46,750
attribute native map method and pass in

00:08:44,320 --> 00:08:51,190
the attribute name in our case it will

00:08:46,750 --> 00:08:57,850
be highlight right then as a value we

00:08:51,190 --> 00:09:00,760
can pass an empty string okay so this is

00:08:57,850 --> 00:09:04,180
the task these are the steps are we

00:09:00,760 --> 00:09:06,160
ready to go everything is clear right

00:09:04,180 --> 00:09:08,830
what you need to do okay

00:09:06,160 --> 00:09:12,850
then five minutes and after that we'll

00:09:08,830 --> 00:09:18,760
check we'll see how it goes so as I told

00:09:12,850 --> 00:09:23,440
you I will play the music here ah we

00:09:18,760 --> 00:09:26,080
don't hear it oh it's here okay we'll

00:09:23,440 --> 00:09:29,940
figure out with this music layer but but

00:09:26,080 --> 00:09:29,940
you go ahead and proceed with the task

00:09:56,279 --> 00:10:02,670
yes music also if you have questions you

00:10:01,029 --> 00:10:06,089
can raise your hand I'll come by and

00:10:02,670 --> 00:10:06,089
help you with this

00:10:23,930 --> 00:10:27,310
he used to work right

00:10:29,590 --> 00:10:35,250
oh thanks

00:14:37,020 --> 00:14:45,620
okay I'm back so how's it going do we

00:14:43,020 --> 00:14:48,240
have people who have completed the task

00:14:45,620 --> 00:14:52,339
right oh cool most of the people cool

00:14:48,240 --> 00:14:55,740
okay so let's see the solution now and

00:14:52,339 --> 00:14:58,050
for those who haven't completed it yet

00:14:55,740 --> 00:15:03,720
and but also want to check out the

00:14:58,050 --> 00:15:07,440
solution we do as I explained s18 right

00:15:03,720 --> 00:15:12,390
we check it out the solution and that's

00:15:07,440 --> 00:15:14,610
it it's here so as I explained I marked

00:15:12,390 --> 00:15:19,589
this spun element with the template

00:15:14,610 --> 00:15:22,440
reference then I'm using it for view

00:15:19,589 --> 00:15:26,250
child query here to get a reference to

00:15:22,440 --> 00:15:29,339
this Dom element and then inside ng

00:15:26,250 --> 00:15:31,380
after view in neat life cycle hook it's

00:15:29,339 --> 00:15:33,330
here right I'm using native Island

00:15:31,380 --> 00:15:37,680
property to get access to the native Dom

00:15:33,330 --> 00:15:40,350
element here and using that attribute

00:15:37,680 --> 00:15:44,880
method to simply add this highlight

00:15:40,350 --> 00:15:51,860
attribute to the Dom element okay and if

00:15:44,880 --> 00:15:51,860
we run it now this

00:15:56,690 --> 00:15:59,690
okay

00:16:02,059 --> 00:16:12,679
should go to localhost 42 check it here

00:16:08,600 --> 00:16:12,679
okay not ready yet

00:16:16,920 --> 00:16:24,190
okay good to go right you see it says I

00:16:21,640 --> 00:16:28,000
want to be rad well actually I think the

00:16:24,190 --> 00:16:31,210
task had green color but I wanted to

00:16:28,000 --> 00:16:35,500
switch it to red so but the idea you get

00:16:31,210 --> 00:16:38,500
the idea right okay

00:16:35,500 --> 00:16:40,990
so cool so this is the way this is how

00:16:38,500 --> 00:16:43,390
you get access in angular to native Dom

00:16:40,990 --> 00:16:47,910
elements you use you children of you

00:16:43,390 --> 00:16:51,160
child and template references

00:16:47,910 --> 00:16:54,220
however with there is one problem with

00:16:51,160 --> 00:16:57,370
our solution now and the problem is that

00:16:54,220 --> 00:17:00,610
we are mixing together rendering and

00:16:57,370 --> 00:17:02,290
presentation logic right

00:17:00,610 --> 00:17:04,630
what is presentation logic because in

00:17:02,290 --> 00:17:07,030
technical object defines how business

00:17:04,630 --> 00:17:09,670
data should be presented to a user for

00:17:07,030 --> 00:17:13,150
example a set of tasks can be split into

00:17:09,670 --> 00:17:15,730
two columns with all tasks in left

00:17:13,150 --> 00:17:18,490
column and completed tasks in right

00:17:15,730 --> 00:17:21,189
column right so the presentation logic

00:17:18,490 --> 00:17:24,430
would define two arrays with different

00:17:21,189 --> 00:17:26,680
set of tasks what is rendering logic the

00:17:24,430 --> 00:17:28,930
rendering logic actually manipulates the

00:17:26,680 --> 00:17:31,300
Dom right it arranges Dom notes in a

00:17:28,930 --> 00:17:34,270
particular order so that we actually can

00:17:31,300 --> 00:17:36,430
see these tasks in here we're working

00:17:34,270 --> 00:17:38,800
directly with the Dom so we're using

00:17:36,430 --> 00:17:41,140
rendering logic but right now it's

00:17:38,800 --> 00:17:43,720
implemented inside the component and the

00:17:41,140 --> 00:17:46,180
general recommendation is to put render

00:17:43,720 --> 00:17:48,130
and logic into components of I'm sorry a

00:17:46,180 --> 00:17:52,120
presentation logic in the components in

00:17:48,130 --> 00:17:54,250
the rendering logic into directives okay

00:17:52,120 --> 00:17:56,590
and then we can use data binding

00:17:54,250 --> 00:18:02,770
mechanism to communicate between

00:17:56,590 --> 00:18:04,960
components and directives so what we

00:18:02,770 --> 00:18:09,880
need to do now this will be our next

00:18:04,960 --> 00:18:12,550
task here this will be it's what I

00:18:09,880 --> 00:18:16,390
explained the problems will be task 1b

00:18:12,550 --> 00:18:19,210
and we need to implement a directive

00:18:16,390 --> 00:18:21,550
that will do exactly the same work we've

00:18:19,210 --> 00:18:27,670
done inside the component that will set

00:18:21,550 --> 00:18:30,790
the attribute on a Dom element so what

00:18:27,670 --> 00:18:33,460
do we need to know well if we put

00:18:30,790 --> 00:18:35,320
this rendering logic inter component we

00:18:33,460 --> 00:18:38,440
needed to use view children of your

00:18:35,320 --> 00:18:41,980
child queries and template references to

00:18:38,440 --> 00:18:44,740
get a hold of the Dom element if we use

00:18:41,980 --> 00:18:47,230
a component we don't need to do that

00:18:44,740 --> 00:18:49,210
because in a component directive sorry

00:18:47,230 --> 00:18:51,880
we don't need to do that because we can

00:18:49,210 --> 00:18:54,520
inject a Dom element that the directive

00:18:51,880 --> 00:18:56,800
is applied to directly into the

00:18:54,520 --> 00:18:59,080
directives constructor right so we don't

00:18:56,800 --> 00:19:01,660
longer need to use view children or

00:18:59,080 --> 00:19:04,650
template references okay and this is

00:19:01,660 --> 00:19:07,510
what I'm showing you right it's simply

00:19:04,650 --> 00:19:09,630
specify an element draft type and then

00:19:07,510 --> 00:19:13,960
you will get the Dom element inside the

00:19:09,630 --> 00:19:16,900
constructor the second thing is that we

00:19:13,960 --> 00:19:20,110
need to communicate to the directive

00:19:16,900 --> 00:19:23,170
what attribute needs to be added right

00:19:20,110 --> 00:19:26,380
and as I said we can use data binding

00:19:23,170 --> 00:19:31,680
mechanism for this purpose so we need to

00:19:26,380 --> 00:19:36,130
define an input side the directive and

00:19:31,680 --> 00:19:38,290
then here like this when we will be

00:19:36,130 --> 00:19:41,260
referencing our directive in a

00:19:38,290 --> 00:19:46,300
components template we can pass in the

00:19:41,260 --> 00:19:48,520
attribute name and then inside ngo need

00:19:46,300 --> 00:19:51,190
on the need this is the lifecycle hook

00:19:48,520 --> 00:19:53,670
where we can get access to all inputs

00:19:51,190 --> 00:19:58,150
like all inputs are evaluated by angular

00:19:53,670 --> 00:20:01,600
so inside this method we can use element

00:19:58,150 --> 00:20:06,370
set property to do the same kind of work

00:20:01,600 --> 00:20:08,740
we did inside a component okay so any

00:20:06,370 --> 00:20:15,370
questions so far what I've explained

00:20:08,740 --> 00:20:21,070
here everything is clear right okay cool

00:20:15,370 --> 00:20:23,200
so what will be the stamps the task if

00:20:21,070 --> 00:20:26,490
we check it out let me check out the

00:20:23,200 --> 00:20:26,490
task here

00:20:29,789 --> 00:20:38,200
we'll be t1b okay so here you're already

00:20:35,740 --> 00:20:42,190
half a directive it's here buts empty at

00:20:38,200 --> 00:20:44,200
the moment okay so what we need to do we

00:20:42,190 --> 00:20:46,570
need to add an input parameter to this

00:20:44,200 --> 00:20:49,270
directive as I showed you there we'll

00:20:46,570 --> 00:20:52,900
take the attribute name that needs to be

00:20:49,270 --> 00:20:55,660
added to the Dharma then we need to

00:20:52,900 --> 00:21:00,100
inject an element into the constructor

00:20:55,660 --> 00:21:03,070
and then inside the ng on a neat life

00:21:00,100 --> 00:21:07,360
cycle hook we will use the set attribute

00:21:03,070 --> 00:21:10,539
method of the native Dom to set the

00:21:07,360 --> 00:21:14,440
attribute and this is all that we need

00:21:10,539 --> 00:21:16,870
to do for the directive and then we

00:21:14,440 --> 00:21:21,960
simply need to apply this directive to

00:21:16,870 --> 00:21:24,820
this panel so the task is here to move

00:21:21,960 --> 00:21:29,830
rendering logic out of a component and

00:21:24,820 --> 00:21:34,929
put it into director okay so no

00:21:29,830 --> 00:21:37,570
questions ready to start anyone it's

00:21:34,929 --> 00:21:40,720
ready to start here okay

00:21:37,570 --> 00:21:42,880
cool cuz yeah right so let's start let's

00:21:40,720 --> 00:21:45,549
get started again five minutes to

00:21:42,880 --> 00:21:50,679
complete the task and I think you can

00:21:45,549 --> 00:21:54,940
check out task 1b right so you can start

00:21:50,679 --> 00:21:58,230
with the directive Scott folder okay so

00:21:54,940 --> 00:21:58,230
five minutes let's go

00:22:22,820 --> 00:22:28,409
I'm sorry again if you have questions

00:22:25,500 --> 00:22:30,690
just raise your head I'll come by okay

00:22:28,409 --> 00:22:33,450
or actually have a person who helps me

00:22:30,690 --> 00:22:36,289
it's my wife so she can help you as well

00:22:33,450 --> 00:22:36,289
okay

00:26:34,590 --> 00:26:37,590
so

00:26:39,970 --> 00:26:49,300
many people have completed it cool cool

00:26:44,350 --> 00:26:55,090
and so let's see how we need to do this

00:26:49,300 --> 00:27:01,510
so again I'm gonna check out tags as

00:26:55,090 --> 00:27:03,430
solution 1a oh we need one B right

00:27:01,510 --> 00:27:06,520
so as I explained here's the directive

00:27:03,430 --> 00:27:08,650
this is what we do we define one input

00:27:06,520 --> 00:27:12,510
so it has to come from it or from a

00:27:08,650 --> 00:27:19,660
component then we have a constructor

00:27:12,510 --> 00:27:22,660
with and we inject the element that do

00:27:19,660 --> 00:27:26,290
this directive is applied to and then

00:27:22,660 --> 00:27:28,480
inside ng on a neat life cycle hook we

00:27:26,290 --> 00:27:30,820
exhaust the native element in the same

00:27:28,480 --> 00:27:32,830
way we did it in the component and we

00:27:30,820 --> 00:27:38,020
called the set attribute method on it

00:27:32,830 --> 00:27:42,220
and we pass in the attribute name that

00:27:38,020 --> 00:27:44,200
is passed down from the component so

00:27:42,220 --> 00:27:47,170
this is the code for the directive and

00:27:44,200 --> 00:27:51,840
once we've done that we simply need to

00:27:47,170 --> 00:27:58,930
apply this directive to the Dom element

00:27:51,840 --> 00:28:02,070
like here ok and that's it that's all we

00:27:58,930 --> 00:28:06,610
need to do so what are the benefits of

00:28:02,070 --> 00:28:09,520
our split in presentation and render and

00:28:06,610 --> 00:28:12,040
logic right there are a couple of

00:28:09,520 --> 00:28:13,960
benefits the first one is that if we put

00:28:12,040 --> 00:28:18,340
presentation logic in two components

00:28:13,960 --> 00:28:21,430
this logic can be reused on platforms

00:28:18,340 --> 00:28:24,040
other than Dom for example native script

00:28:21,430 --> 00:28:26,800
right they have their own implementation

00:28:24,040 --> 00:28:29,550
of the rendering layer but the

00:28:26,800 --> 00:28:32,830
presentation logic can be the same and

00:28:29,550 --> 00:28:36,220
if we put a rendering logic into

00:28:32,830 --> 00:28:38,800
directives again we can reuse it we can

00:28:36,220 --> 00:28:41,230
apply this directive that we just

00:28:38,800 --> 00:28:44,650
implemented to any components template

00:28:41,230 --> 00:28:48,880
and now we'll get code reuse and the

00:28:44,650 --> 00:28:51,070
third benefit is that you always know

00:28:48,880 --> 00:28:53,980
where to look for

00:28:51,070 --> 00:28:56,470
if you got an error right if you suspect

00:28:53,980 --> 00:28:59,320
that it's something messes up with the

00:28:56,470 --> 00:29:01,330
Dom you go into directives if you think

00:28:59,320 --> 00:29:02,890
that you have set up an incorrect

00:29:01,330 --> 00:29:03,640
presentation logic you go into

00:29:02,890 --> 00:29:08,140
components

00:29:03,640 --> 00:29:11,950
just click easier to reason about okay

00:29:08,140 --> 00:29:15,880
so there is another problem however with

00:29:11,950 --> 00:29:19,930
our solution here and the problem is

00:29:15,880 --> 00:29:22,960
that we're using the native set

00:29:19,930 --> 00:29:25,390
attribute method so we kind of expect

00:29:22,960 --> 00:29:28,780
that there's got to be Dom element there

00:29:25,390 --> 00:29:31,810
but what if we run this code inside the

00:29:28,780 --> 00:29:34,240
web worker and as you know there is no

00:29:31,810 --> 00:29:37,000
Dom environment inside the web workers

00:29:34,240 --> 00:29:41,260
so this code will fail actually you will

00:29:37,000 --> 00:29:44,050
get an error and in angular to work

00:29:41,260 --> 00:29:49,930
around this problem we have something

00:29:44,050 --> 00:29:53,260
called renderer and it's here it is the

00:29:49,930 --> 00:29:57,610
service that makes changes to existing

00:29:53,260 --> 00:29:59,920
Dom element properties safe its platform

00:29:57,610 --> 00:30:02,110
independent it has all the methods that

00:29:59,920 --> 00:30:05,740
we have on Dom elements like set

00:30:02,110 --> 00:30:07,930
attribute at class etc so what we need

00:30:05,740 --> 00:30:11,760
to do we need to replace the logic that

00:30:07,930 --> 00:30:15,010
we have just implemented and instead of

00:30:11,760 --> 00:30:17,560
calling set attribute method directly on

00:30:15,010 --> 00:30:20,680
the native Dom element we need to call

00:30:17,560 --> 00:30:26,830
this method on the renderer and then

00:30:20,680 --> 00:30:30,790
pass in the element ref okay so this

00:30:26,830 --> 00:30:32,920
will be our next task task 1c and what

00:30:30,790 --> 00:30:37,120
do we need to know well basically it

00:30:32,920 --> 00:30:40,000
will be the same as we have done already

00:30:37,120 --> 00:30:43,630
right so you can for those who haven't

00:30:40,000 --> 00:30:46,320
completed can check out solution 1b this

00:30:43,630 --> 00:30:49,180
will be a starting point and we simply

00:30:46,320 --> 00:30:51,940
additionally inject the renderer service

00:30:49,180 --> 00:30:54,820
and it's currently available as renderer

00:30:51,940 --> 00:30:56,260
to type so that's exactly what we

00:30:54,820 --> 00:31:00,520
specifying the constructor type

00:30:56,260 --> 00:31:02,530
parameter and then as I show here we

00:31:00,520 --> 00:31:03,430
call that attribute method on the

00:31:02,530 --> 00:31:08,110
renderer

00:31:03,430 --> 00:31:12,730
and then we pass in native element as a

00:31:08,110 --> 00:31:16,240
first parameter okay so these are the

00:31:12,730 --> 00:31:20,610
simple steps just two steps one thing to

00:31:16,240 --> 00:31:25,360
notice is that do not forget that render

00:31:20,610 --> 00:31:28,840
takes a native element so here in our

00:31:25,360 --> 00:31:30,970
case this will be this element right

00:31:28,840 --> 00:31:34,270
this is because what we inject into the

00:31:30,970 --> 00:31:38,710
constructor this element and then native

00:31:34,270 --> 00:31:43,200
element this is like this right this is

00:31:38,710 --> 00:31:48,430
what we need to pass in okay good to go

00:31:43,200 --> 00:31:52,200
okay yeah have a question yeah just just

00:31:48,430 --> 00:31:52,200
the mics coming up sorry

00:32:01,380 --> 00:32:10,060
how would you apply focus with render -

00:32:06,900 --> 00:32:12,250
yeah yeah the single question and it's

00:32:10,060 --> 00:32:15,850
interesting that it is always the first

00:32:12,250 --> 00:32:22,000
question that gets us because renderer

00:32:15,850 --> 00:32:24,340
doesn't have said focus method well here

00:32:22,000 --> 00:32:26,380
you just need to make sure first you

00:32:24,340 --> 00:32:28,540
have to understand which platforms

00:32:26,380 --> 00:32:30,610
you're going to support right if most of

00:32:28,540 --> 00:32:32,320
the angular applications run inside the

00:32:30,610 --> 00:32:34,900
browser they don't run inside web

00:32:32,320 --> 00:32:37,870
workers do not use server rendering or

00:32:34,900 --> 00:32:40,800
native scream so if it's inside the

00:32:37,870 --> 00:32:43,870
browser then you just make sure that you

00:32:40,800 --> 00:32:46,780
implement a check if native element is

00:32:43,870 --> 00:32:49,480
not now right and if it's not now so you

00:32:46,780 --> 00:32:52,480
call sad focus on this element so

00:32:49,480 --> 00:32:54,850
however this is the approach that is

00:32:52,480 --> 00:33:01,600
being used right now there is no set

00:32:54,850 --> 00:33:05,610
focused method on the render okay yeah

00:33:01,600 --> 00:33:05,610
some clarification yeah

00:33:14,159 --> 00:33:20,940
so what would be the best practice of

00:33:17,419 --> 00:33:24,749
let's say I need to set an attribute tab

00:33:20,940 --> 00:33:27,629
index zero and then I need to

00:33:24,749 --> 00:33:31,289
immediately apply focus why should i do

00:33:27,629 --> 00:33:36,869
should I use render it to to set an

00:33:31,289 --> 00:33:41,639
attribute and then just grab the element

00:33:36,869 --> 00:33:43,889
directly well it's pretty specific

00:33:41,639 --> 00:33:46,980
question listed others let's go on with

00:33:43,889 --> 00:33:48,869
this with the workshop right but I'll

00:33:46,980 --> 00:33:50,999
come by now okay and answer specific

00:33:48,869 --> 00:34:04,679
questions so that others have something

00:33:50,999 --> 00:34:07,499
to do yeah yeah oh yeah I understand so

00:34:04,679 --> 00:34:11,309
the question is why do we use different

00:34:07,499 --> 00:34:14,099
lifecycle hooks to apply rendering logic

00:34:11,309 --> 00:34:16,470
so when we use component it was inside

00:34:14,099 --> 00:34:20,490
ng after viewing it lifecycle hook

00:34:16,470 --> 00:34:22,440
now inside ng owning it it's because we

00:34:20,490 --> 00:34:25,349
use different strategies to get access

00:34:22,440 --> 00:34:28,379
to the Dom element inside the component

00:34:25,349 --> 00:34:30,899
we used view children query right to get

00:34:28,379 --> 00:34:33,780
access to the Dom element and view

00:34:30,899 --> 00:34:36,929
children query is what evaluated inside

00:34:33,780 --> 00:34:40,290
ng after viewing it lifecycle hook so

00:34:36,929 --> 00:34:46,609
these queries are not available before

00:34:40,290 --> 00:34:51,510
this hook and here was directive we use

00:34:46,609 --> 00:34:54,929
we depend on input bindings right input

00:34:51,510 --> 00:34:58,829
which is here as the attribute name and

00:34:54,929 --> 00:35:01,980
inputs are evaluated inside ng on an it

00:34:58,829 --> 00:35:07,200
lifecycle hook so that's why we have

00:35:01,980 --> 00:35:09,780
this difference here okay now let's do

00:35:07,200 --> 00:35:12,839
that so I'm gonna give you five minutes

00:35:09,780 --> 00:35:15,809
I think most of you have already done it

00:35:12,839 --> 00:35:19,160
so again five minutes let's complete

00:35:15,809 --> 00:35:21,119
this task and it will move forward okay

00:35:19,160 --> 00:35:22,920
again if you have questions raise your

00:35:21,119 --> 00:35:26,299
hand carboy

00:35:22,920 --> 00:35:26,299
okay fine minister

00:37:49,260 --> 00:37:59,340
people have completed it okay okay cool

00:37:54,510 --> 00:38:03,270
so check the solution and as you might

00:37:59,340 --> 00:38:05,070
expect will be a little change to the

00:38:03,270 --> 00:38:09,000
existing implementations so I'm good to

00:38:05,070 --> 00:38:12,990
check out but the way how many people

00:38:09,000 --> 00:38:17,900
had problems with NPM install like the

00:38:12,990 --> 00:38:17,900
NPM didn't work because of slow Wi-Fi

00:38:19,100 --> 00:38:22,530
okay

00:38:20,280 --> 00:38:27,690
okay thanks actually not Nene I was

00:38:22,530 --> 00:38:32,970
expecting a lot more of it cool so it's

00:38:27,690 --> 00:38:36,990
the solution 1c right so here's the

00:38:32,970 --> 00:38:38,760
implementation on top additionally to

00:38:36,990 --> 00:38:42,210
the element draft from injecting the

00:38:38,760 --> 00:38:43,020
renderer here and here I'm using this

00:38:42,210 --> 00:38:46,190
renderer

00:38:43,020 --> 00:38:50,910
set attribute method of the renderer and

00:38:46,190 --> 00:38:54,690
pass in the native element that I got

00:38:50,910 --> 00:38:57,210
from the constructor okay the second

00:38:54,690 --> 00:38:59,130
parameter is the attribute name and the

00:38:57,210 --> 00:39:04,880
attribute value which is an empty string

00:38:59,130 --> 00:39:12,230
here okay so any questions so far

00:39:04,880 --> 00:39:12,230
specific to this task yep

00:39:15,220 --> 00:39:31,700
yeah now now it will be null so the

00:39:28,789 --> 00:39:33,769
question is that we use in render but we

00:39:31,700 --> 00:39:36,499
still reference in native element

00:39:33,769 --> 00:39:38,390
property and what this property will be

00:39:36,499 --> 00:39:40,670
if we run it inside the web worker

00:39:38,390 --> 00:39:41,299
inside the web worker this property will

00:39:40,670 --> 00:39:44,749
be null

00:39:41,299 --> 00:39:48,049
so however the code doesn't fail right

00:39:44,749 --> 00:39:51,049
because we do not call set attribute on

00:39:48,049 --> 00:39:53,299
the now right the renderer itself has

00:39:51,049 --> 00:39:57,140
some workarounds and implementations

00:39:53,299 --> 00:40:00,079
that allow you pass a null and then it

00:39:57,140 --> 00:40:02,690
knows what to do because all renderers

00:40:00,079 --> 00:40:07,190
are platform-specific so that's how it

00:40:02,690 --> 00:40:09,859
works under the hood okay cool so this

00:40:07,190 --> 00:40:10,720
is the first part let me see where we

00:40:09,859 --> 00:40:14,420
are

00:40:10,720 --> 00:40:17,029
yep yeah so this is the first part we

00:40:14,420 --> 00:40:19,489
have completed it it's just kind of a

00:40:17,029 --> 00:40:21,230
warm-up and I showed you that you need

00:40:19,489 --> 00:40:23,569
to split presentation and render in

00:40:21,230 --> 00:40:27,349
logic we need to use renderer to make

00:40:23,569 --> 00:40:28,759
our code cross-platform okay now we get

00:40:27,349 --> 00:40:31,999
into the hardcore stuff which is

00:40:28,759 --> 00:40:34,640
modifying existing Dom structure you

00:40:31,999 --> 00:40:37,569
know we'll start by show I will show you

00:40:34,640 --> 00:40:40,999
what happens if you change the Dom

00:40:37,569 --> 00:40:44,239
elements directly and do not use tools

00:40:40,999 --> 00:40:49,009
provided by the framework okay so here's

00:40:44,239 --> 00:40:56,059
the task this will be tasked to yep it's

00:40:49,009 --> 00:41:04,640
here okay so let me check out and show

00:40:56,059 --> 00:41:09,920
you the data so what we have here we

00:41:04,640 --> 00:41:13,339
have one component expand it here we

00:41:09,920 --> 00:41:16,849
have app component and we have a child a

00:41:13,339 --> 00:41:20,539
component inside which is Dom element

00:41:16,849 --> 00:41:22,970
right what we need to do is we need to

00:41:20,539 --> 00:41:26,539
have a button here and when the button

00:41:22,970 --> 00:41:29,779
is clicked inside the remove method we

00:41:26,539 --> 00:41:32,119
need to remove this a component from the

00:41:29,779 --> 00:41:34,130
door kind of the way you do it with

00:41:32,119 --> 00:41:39,170
jQuery right you just remove the Dharma

00:41:34,130 --> 00:41:40,910
element from the Dom and how we can do

00:41:39,170 --> 00:41:45,440
that right I'm using a few children

00:41:40,910 --> 00:41:47,630
query and template reference here we

00:41:45,440 --> 00:41:50,390
learned about them in the first house to

00:41:47,630 --> 00:41:56,539
get access to this a component to the

00:41:50,390 --> 00:41:58,819
Dom element and then so what is the type

00:41:56,539 --> 00:42:03,710
of you children here the type is query

00:41:58,819 --> 00:42:08,470
list it means that child components

00:42:03,710 --> 00:42:11,599
variable will contain reference to all

00:42:08,470 --> 00:42:14,690
elements marked with the tample

00:42:11,599 --> 00:42:17,480
reference see however since there is

00:42:14,690 --> 00:42:20,930
only one element inside the Dom in the

00:42:17,480 --> 00:42:24,950
template we can use the first property

00:42:20,930 --> 00:42:29,890
of the query list to get access to this

00:42:24,950 --> 00:42:32,359
a component child Dom element okay so

00:42:29,890 --> 00:42:34,579
what you will need to do here you will

00:42:32,359 --> 00:42:38,539
need to do child components right will

00:42:34,579 --> 00:42:41,809
be this child components first right

00:42:38,539 --> 00:42:44,930
this will give you access to the element

00:42:41,809 --> 00:42:47,210
graph specific to the a component that

00:42:44,930 --> 00:42:49,160
corresponds to this a component and then

00:42:47,210 --> 00:42:53,349
we know that to get access to the native

00:42:49,160 --> 00:42:57,019
element we need to use native element

00:42:53,349 --> 00:43:02,269
okay so far so good so what I've just

00:42:57,019 --> 00:43:05,119
explained cool so this is how we will

00:43:02,269 --> 00:43:09,499
get access to the host to the child

00:43:05,119 --> 00:43:12,370
element here another thing is that if we

00:43:09,499 --> 00:43:16,960
take a look at the remove

00:43:12,370 --> 00:43:18,970
child element here remove child method

00:43:16,960 --> 00:43:22,000
of the renderer we will be using

00:43:18,970 --> 00:43:25,960
renderer here so we need to we need to

00:43:22,000 --> 00:43:27,220
inject it like this or have and you

00:43:25,960 --> 00:43:35,140
already know how to do that right you

00:43:27,220 --> 00:43:37,740
just done it so the renderer has removed

00:43:35,140 --> 00:43:42,640
child method right like this

00:43:37,740 --> 00:43:45,550
removed child yes and if we inspect the

00:43:42,640 --> 00:43:48,990
signature for the method it takes two

00:43:45,550 --> 00:43:57,910
nodes the parent node and the child no

00:43:48,990 --> 00:44:02,710
make sense so we already know oh sorry

00:43:57,910 --> 00:44:04,870
yeah we already know how to get access

00:44:02,710 --> 00:44:07,720
to this child element so this will be

00:44:04,870 --> 00:44:09,100
the second node so what we will pass

00:44:07,720 --> 00:44:14,710
inside the remove child

00:44:09,100 --> 00:44:17,440
we need a host parent node and child not

00:44:14,710 --> 00:44:22,270
right this is the signature instead of

00:44:17,440 --> 00:44:24,520
child node will pass this child comps

00:44:22,270 --> 00:44:29,710
right what we've just learned in first

00:44:24,520 --> 00:44:32,080
in native element so child comps as

00:44:29,710 --> 00:44:35,350
explained is evaluated as virtual and

00:44:32,080 --> 00:44:39,720
query it has first the first property

00:44:35,350 --> 00:44:42,400
that references this a component and

00:44:39,720 --> 00:44:46,480
then native element properties get

00:44:42,400 --> 00:44:49,180
access to the native Dom element how do

00:44:46,480 --> 00:44:52,870
we get this parent node what is the

00:44:49,180 --> 00:44:57,130
parent node of this a component does

00:44:52,870 --> 00:45:00,310
anyone know yeah it's the host element

00:44:57,130 --> 00:45:02,920
of the current component exactly and it

00:45:00,310 --> 00:45:05,320
turns out that in a similar way to the

00:45:02,920 --> 00:45:08,850
directive we can inject the host element

00:45:05,320 --> 00:45:13,960
of a component into the constructor okay

00:45:08,850 --> 00:45:17,170
so what we will do is on top of the

00:45:13,960 --> 00:45:19,630
renderer we will also inject host

00:45:17,170 --> 00:45:24,020
component host element right like this

00:45:19,630 --> 00:45:28,359
and then we can pass it as a parent no

00:45:24,020 --> 00:45:33,320
again don't forget native element and

00:45:28,359 --> 00:45:35,450
this code here will go inside the remove

00:45:33,320 --> 00:45:38,630
method so once the button is clicked

00:45:35,450 --> 00:45:40,460
this code is executed and the compare

00:45:38,630 --> 00:45:43,280
the child component is removed from the

00:45:40,460 --> 00:45:45,770
dome okay

00:45:43,280 --> 00:45:49,580
now it's back let's get back to the

00:45:45,770 --> 00:45:51,680
steps so we use you children query and

00:45:49,580 --> 00:45:54,710
template reference to get an HTML

00:45:51,680 --> 00:45:57,260
element and we already have it here let

00:45:54,710 --> 00:46:00,050
me revert it back ever since

00:45:57,260 --> 00:46:02,869
yeah this is the setup so we already

00:46:00,050 --> 00:46:05,359
have it in place then we need to inject

00:46:02,869 --> 00:46:06,859
element ref and renderer into the

00:46:05,359 --> 00:46:09,650
constructor I showed you how to do that

00:46:06,859 --> 00:46:11,599
and then inside the remove method was

00:46:09,650 --> 00:46:14,480
simply called remove child method and

00:46:11,599 --> 00:46:18,020
pass in a hostile amount and a child

00:46:14,480 --> 00:46:21,080
download and again remember to use

00:46:18,020 --> 00:46:23,330
native element property on the host

00:46:21,080 --> 00:46:27,440
element and what's evaluated by view

00:46:23,330 --> 00:46:33,170
children query okay now I'm gonna give

00:46:27,440 --> 00:46:39,560
you a 5 minutes to do this again yeah

00:46:33,170 --> 00:46:44,060
the set up is t2 it's the task to so get

00:46:39,560 --> 00:46:46,609
checkout t2 yeah let me show you here

00:46:44,060 --> 00:46:52,630
right t2 there will be the name of the

00:46:46,609 --> 00:46:55,630
tag okay ready to go everything's clear

00:46:52,630 --> 00:46:55,630
yep

00:46:58,339 --> 00:47:03,570
yeah the question is yeah I'm gonna

00:47:01,440 --> 00:47:06,540
repeat it why do we use view children

00:47:03,570 --> 00:47:10,050
here instead of the view child it's a

00:47:06,540 --> 00:47:11,910
good question I would use normally view

00:47:10,050 --> 00:47:14,880
child here if I know that I only need

00:47:11,910 --> 00:47:18,030
one element but right now I also have

00:47:14,880 --> 00:47:20,910
this interest in check implemented I

00:47:18,030 --> 00:47:24,180
want to know how many child components

00:47:20,910 --> 00:47:26,310
are there right that's why I used view

00:47:24,180 --> 00:47:29,460
children to get the lands property but

00:47:26,310 --> 00:47:32,240
it's specific to to this task so you're

00:47:29,460 --> 00:47:39,750
right it would be view child otherwise

00:47:32,240 --> 00:47:43,099
okay yeah so I can check the lens of all

00:47:39,750 --> 00:47:47,390
child components exactly correct yep

00:47:43,099 --> 00:47:47,390
okay let's go five minutes

00:47:49,250 --> 00:47:53,800
again any questions raise your hair talk

00:47:51,470 --> 00:47:53,800
about

00:47:54,570 --> 00:47:57,839
[Music]

00:52:37,280 --> 00:52:44,880
so how many people have completed it

00:52:41,810 --> 00:52:49,530
Cole Cole most of the people do it

00:52:44,880 --> 00:53:00,890
that's great again let's take a look at

00:52:49,530 --> 00:53:03,570
the solution yeah so so as I explained

00:53:00,890 --> 00:53:07,590
we inject the host element into the

00:53:03,570 --> 00:53:14,250
constructor and the render then what we

00:53:07,590 --> 00:53:16,130
do is slide the remove method we call

00:53:14,250 --> 00:53:20,010
the remove child method of the renderer

00:53:16,130 --> 00:53:23,070
we're passing the host element as the

00:53:20,010 --> 00:53:25,230
first parameter this will be the parent

00:53:23,070 --> 00:53:28,680
element for the knob being deleted and

00:53:25,230 --> 00:53:31,380
then we pass the native element the

00:53:28,680 --> 00:53:33,960
child components Dom element to be

00:53:31,380 --> 00:53:39,960
removed and that's it that's the

00:53:33,960 --> 00:53:45,060
implementation so for running now here

00:53:39,960 --> 00:53:48,890
in Prowse click this button the

00:53:45,060 --> 00:53:51,090
component is removed okay

00:53:48,890 --> 00:53:54,660
now I'm allowed to show you a very

00:53:51,090 --> 00:54:00,450
surprising thing now so if we explore

00:53:54,660 --> 00:54:05,190
the Dom here right this is our I let me

00:54:00,450 --> 00:54:08,060
try to make it okay yeah this is the app

00:54:05,190 --> 00:54:11,270
root right our parent component and

00:54:08,060 --> 00:54:15,450
there is only button inside of it right

00:54:11,270 --> 00:54:19,230
no child component however if we check

00:54:15,450 --> 00:54:20,190
the console log and let me actually

00:54:19,230 --> 00:54:23,310
rerun it

00:54:20,190 --> 00:54:25,080
so I clear the console before I remove

00:54:23,310 --> 00:54:29,610
the element yeah so I'm going to remove

00:54:25,080 --> 00:54:34,260
it now so you see the number of child

00:54:29,610 --> 00:54:36,330
components is one and what's worse is

00:54:34,260 --> 00:54:40,080
that change detection has been executed

00:54:36,330 --> 00:54:44,910
for both a and B components but if we

00:54:40,080 --> 00:54:48,250
check the Dom they're not here so where

00:54:44,910 --> 00:54:50,860
are they and so what's the magic

00:54:48,250 --> 00:54:56,220
is it surprising how many people

00:54:50,860 --> 00:54:56,220
expected the components lands to be one

00:54:56,910 --> 00:55:09,720
okay if you okay right so why do we get

00:55:03,520 --> 00:55:13,350
this result and the reason is because

00:55:09,720 --> 00:55:18,070
angular does not work with Dom directly

00:55:13,350 --> 00:55:22,270
it has a concept known as the view this

00:55:18,070 --> 00:55:25,020
is the data structure that is created

00:55:22,270 --> 00:55:27,400
for every component and it holds

00:55:25,020 --> 00:55:30,820
references to the native Dom element

00:55:27,400 --> 00:55:33,040
found in a components template so this

00:55:30,820 --> 00:55:35,710
is the diagram that illustrates this you

00:55:33,040 --> 00:55:37,980
can see the view on the left and the

00:55:35,710 --> 00:55:42,220
button element on the right in the Dom

00:55:37,980 --> 00:55:45,370
and you see it references it inside the

00:55:42,220 --> 00:55:47,980
view and the problem is that if we work

00:55:45,370 --> 00:55:50,190
directly with the Dom and remove it

00:55:47,980 --> 00:55:53,860
remove the button element from the Dom

00:55:50,190 --> 00:55:57,550
the button view node that sits inside

00:55:53,860 --> 00:56:04,990
the view is not affected right so I've

00:55:57,550 --> 00:56:07,210
created and like this you see most right

00:56:04,990 --> 00:56:09,190
so we removed it from the Dom but it's

00:56:07,210 --> 00:56:13,660
still inside the view and the reference

00:56:09,190 --> 00:56:16,030
is retained and that's the problem so

00:56:13,660 --> 00:56:18,220
angular still thinks that there is a

00:56:16,030 --> 00:56:20,890
hierarchy of views there is a parent app

00:56:18,220 --> 00:56:26,260
component inside of it a component and

00:56:20,890 --> 00:56:28,990
inside of the bay component okay now if

00:56:26,260 --> 00:56:33,430
you're interested more first to know

00:56:28,990 --> 00:56:36,760
more about the view this is how it looks

00:56:33,430 --> 00:56:39,880
under the hood so on the Left I have a

00:56:36,760 --> 00:56:43,920
component with one button element in a

00:56:39,880 --> 00:56:46,540
template so when angular creates and

00:56:43,920 --> 00:56:49,510
instantiates a component it creates the

00:56:46,540 --> 00:56:51,910
view for this component and the view is

00:56:49,510 --> 00:56:54,340
simply an abstraction that binds

00:56:51,910 --> 00:56:57,130
together component class instance of a

00:56:54,340 --> 00:57:00,490
component class and the dom nodes HTML

00:56:57,130 --> 00:57:03,240
Dom knows created for this component and

00:57:00,490 --> 00:57:07,800
I'm showing you guys here

00:57:03,240 --> 00:57:12,250
these two important parts of the view

00:57:07,800 --> 00:57:14,500
okay now but we still have this is for

00:57:12,250 --> 00:57:18,070
one component but what if we have child

00:57:14,500 --> 00:57:23,700
components right then we get a hierarchy

00:57:18,070 --> 00:57:28,020
of views so here for our component right

00:57:23,700 --> 00:57:31,180
so I have one button HTML element and a

00:57:28,020 --> 00:57:33,640
component element right because every

00:57:31,180 --> 00:57:37,240
component still has Dom representation

00:57:33,640 --> 00:57:40,410
which we call host element but what's

00:57:37,240 --> 00:57:44,350
interesting is that it references

00:57:40,410 --> 00:57:47,590
another view right as I said for every

00:57:44,350 --> 00:57:50,320
component angular creates the view so

00:57:47,590 --> 00:57:53,020
here we have app component view that has

00:57:50,320 --> 00:57:57,310
a reference to the child components view

00:57:53,020 --> 00:58:00,820
and change detection runs on this

00:57:57,310 --> 00:58:05,740
hierarchy of these views and every

00:58:00,820 --> 00:58:11,050
single lifecycle hook or view children

00:58:05,740 --> 00:58:17,800
query also runs on the hierarchy view

00:58:11,050 --> 00:58:20,260
view yep so this is again the code for

00:58:17,800 --> 00:58:25,030
you to inspect if we have a child

00:58:20,260 --> 00:58:27,490
component inside then here inside the

00:58:25,030 --> 00:58:30,550
nodes we will have render element which

00:58:27,490 --> 00:58:35,400
is reference to the Dom element created

00:58:30,550 --> 00:58:40,570
for the child component and here we have

00:58:35,400 --> 00:58:46,150
the reference to the components view ok

00:58:40,570 --> 00:58:49,330
now I want you to show this view

00:58:46,150 --> 00:58:52,210
hierarchy inside the console and

00:58:49,330 --> 00:58:55,540
actually what I will do now is I'll go

00:58:52,210 --> 00:58:59,170
inside the sources and this is the

00:58:55,540 --> 00:59:02,350
function that is executed when every

00:58:59,170 --> 00:59:04,960
single component is being checked and as

00:59:02,350 --> 00:59:08,170
I told you in your runs change detection

00:59:04,960 --> 00:59:13,030
on the views right that's why the

00:59:08,170 --> 00:59:14,390
parameter name here is view so what

00:59:13,030 --> 00:59:19,840
we'll do now

00:59:14,390 --> 00:59:23,530
I'm gonna reload put a breakpoint here

00:59:19,840 --> 00:59:27,350
then click remove child element right

00:59:23,530 --> 00:59:30,670
and you see the first view that comes

00:59:27,350 --> 00:59:33,890
here will be our app component view

00:59:30,670 --> 00:59:36,920
right as I explained it has a reference

00:59:33,890 --> 00:59:40,040
to the component class instance and the

00:59:36,920 --> 00:59:41,900
nodes again

00:59:40,040 --> 00:59:43,610
as I showed you if we go through these

00:59:41,900 --> 00:59:47,690
nodes there are different types of these

00:59:43,610 --> 00:59:50,750
nodes will not go inside I don't think

00:59:47,690 --> 00:59:53,540
we need to go there but the important

00:59:50,750 --> 00:59:56,120
part is that once we continue with

00:59:53,540 --> 01:00:00,470
change detection the next view we'll get

00:59:56,120 --> 01:00:02,030
is a components view right what's

01:00:00,470 --> 01:00:04,760
important is that you do not see these

01:00:02,030 --> 01:00:07,250
components in Dom right they're not here

01:00:04,760 --> 01:00:09,260
we have removed them but angle still

01:00:07,250 --> 01:00:11,980
runs change detection on child

01:00:09,260 --> 01:00:19,100
components and if I continue it will be

01:00:11,980 --> 01:00:24,710
B component view right ok so the

01:00:19,100 --> 01:00:28,100
question can be what type of nodes can

01:00:24,710 --> 01:00:31,010
we delete right like jQuery plug-in

01:00:28,100 --> 01:00:34,340
right is it not safe to remove every

01:00:31,010 --> 01:00:37,820
single Dom not the general rule is that

01:00:34,340 --> 01:00:40,610
if you created that dumb note you can

01:00:37,820 --> 01:00:44,450
delete it right if jQuery plugin adds

01:00:40,610 --> 01:00:46,580
some Dom nodes then it can remove them

01:00:44,450 --> 01:00:49,220
safely because angular does not know

01:00:46,580 --> 01:00:52,580
anything about these Dom nodes right so

01:00:49,220 --> 01:00:55,340
there will be no harm done however if

01:00:52,580 --> 01:00:59,210
the nulls created by angular it is not

01:00:55,340 --> 01:01:01,070
safe to delete them without using the

01:00:59,210 --> 01:01:03,530
tools provided by the framework and

01:01:01,070 --> 01:01:05,660
there is a tool that angular provides

01:01:03,530 --> 01:01:08,750
for us to work directly with the

01:01:05,660 --> 01:01:13,700
hierarchy of views and the tool is who

01:01:08,750 --> 01:01:17,120
knows what the name is it's a view

01:01:13,700 --> 01:01:19,190
container right the view container that

01:01:17,120 --> 01:01:23,990
is the tool that we need to use if you

01:01:19,190 --> 01:01:26,930
want to work with the views ok so let's

01:01:23,990 --> 01:01:30,440
get back to this view contain

01:01:26,930 --> 01:01:34,010
what is it well if you imagine Dom nodes

01:01:30,440 --> 01:01:38,480
right then one of these Dom nodes can

01:01:34,010 --> 01:01:41,599
act as a container for other views so

01:01:38,480 --> 01:01:45,279
here you can see that the second Dom

01:01:41,599 --> 01:01:48,829
node or view node acts as a container

01:01:45,279 --> 01:01:51,020
for other views so we can factor we put

01:01:48,829 --> 01:01:53,809
as many views as we like inside this

01:01:51,020 --> 01:01:56,660
container and this container implements

01:01:53,809 --> 01:02:00,079
methods that allow us to manipulate

01:01:56,660 --> 01:02:02,420
these views to create them add them to

01:02:00,079 --> 01:02:05,569
the view container or remove them from a

01:02:02,420 --> 01:02:07,190
view container and even in some advanced

01:02:05,569 --> 01:02:09,650
use cases you can have to view

01:02:07,190 --> 01:02:12,140
containers and move a view between

01:02:09,650 --> 01:02:15,710
containers the sort of drag and drop

01:02:12,140 --> 01:02:18,559
scenario ok so right now we'll take a

01:02:15,710 --> 01:02:22,279
closer look at this view container API

01:02:18,559 --> 01:02:24,200
how to work with it just want to make

01:02:22,279 --> 01:02:26,329
sure that you guys understood what I've

01:02:24,200 --> 01:02:28,460
just said so everything is clear here

01:02:26,329 --> 01:02:30,819
because it's important to understand why

01:02:28,460 --> 01:02:36,260
the view container is there not just

01:02:30,819 --> 01:02:43,180
what's the API ok cool I'm going to take

01:02:36,260 --> 01:02:43,180
it as yes right okay oh yeah

01:02:50,510 --> 01:02:54,550
what can maybe can you can you repeat it

01:02:55,570 --> 01:02:59,930
so is the reason that the view container

01:02:58,100 --> 01:03:01,040
is theirs because that's what enables

01:02:59,930 --> 01:03:03,650
angular to keep track of change

01:03:01,040 --> 01:03:05,450
detection it doesn't actually track stay

01:03:03,650 --> 01:03:08,570
in Dom nodes but it checks tracks it

01:03:05,450 --> 01:03:11,600
into the view containers well it's there

01:03:08,570 --> 01:03:14,240
because it holds other views like you

01:03:11,600 --> 01:03:17,690
have to have a place to add other views

01:03:14,240 --> 01:03:20,180
right child components or as we will see

01:03:17,690 --> 01:03:23,030
now embedded views created using

01:03:20,180 --> 01:03:25,220
template ref so it's it's a container

01:03:23,030 --> 01:03:28,580
you know you have to put something there

01:03:25,220 --> 01:03:30,650
but yes it also helps with change

01:03:28,580 --> 01:03:33,710
detection right because angular knows

01:03:30,650 --> 01:03:35,570
that this container holds some views and

01:03:33,710 --> 01:03:38,510
I need to run change detection on these

01:03:35,570 --> 01:03:40,760
views as well all right so yeah it sort

01:03:38,510 --> 01:03:43,070
of helps with change detection but the

01:03:40,760 --> 01:03:46,490
main purpose is to hold other views and

01:03:43,070 --> 01:03:53,300
to provide an API for you to manipulate

01:03:46,490 --> 01:03:56,030
these views okay so as I said it has API

01:03:53,300 --> 01:03:59,570
to create destroy and manipulate the

01:03:56,030 --> 01:04:03,520
views well this statement here makes Dom

01:03:59,570 --> 01:04:06,080
hierarchy changes safe it's actually

01:04:03,520 --> 01:04:08,720
what is its purpose

01:04:06,080 --> 01:04:10,610
right as you might expect there is

01:04:08,720 --> 01:04:13,850
something called structure of directives

01:04:10,610 --> 01:04:17,030
in angular right like ng ng for ng

01:04:13,850 --> 01:04:20,780
switch all these directives are based on

01:04:17,030 --> 01:04:23,360
the view containers because there is no

01:04:20,780 --> 01:04:27,740
other way in angular to work with the

01:04:23,360 --> 01:04:31,970
views in I didn't say that about render

01:04:27,740 --> 01:04:35,060
but the ng style in ng class directives

01:04:31,970 --> 01:04:37,220
also use renderer under the hood to make

01:04:35,060 --> 01:04:40,190
these directives platform independent

01:04:37,220 --> 01:04:42,170
okay so what I'm explaining you here is

01:04:40,190 --> 01:04:47,630
what is used internally by angular as

01:04:42,170 --> 01:04:50,120
well so how do we work with the view

01:04:47,630 --> 01:04:54,500
continue there are a few things we need

01:04:50,120 --> 01:04:58,490
to do first we need to define the node

01:04:54,500 --> 01:05:02,150
that will act as a view container it can

01:04:58,490 --> 01:05:02,870
be any Dom node in a component sample

01:05:02,150 --> 01:05:07,310
but

01:05:02,870 --> 01:05:10,880
usually ng container is used to be a

01:05:07,310 --> 01:05:15,500
view container right do not confuse them

01:05:10,880 --> 01:05:19,730
this is just the HTML element in it is

01:05:15,500 --> 01:05:25,310
angular-specific that can act as a view

01:05:19,730 --> 01:05:30,580
container okay and to turn this node

01:05:25,310 --> 01:05:30,580
into a view container we need to use

01:05:31,210 --> 01:05:37,370
view child query of you children query

01:05:34,190 --> 01:05:43,660
but the important part is we need to

01:05:37,370 --> 01:05:45,950
pass this read view container raph type

01:05:43,660 --> 01:05:48,340
that's the important part that what

01:05:45,950 --> 01:05:55,730
actually turns dumb node of view node

01:05:48,340 --> 01:05:57,830
interview container okay so here I'm

01:05:55,730 --> 01:06:02,090
using template reference VC here so I

01:05:57,830 --> 01:06:05,930
can put it here or I can replace it here

01:06:02,090 --> 01:06:10,460
right they have to match but this first

01:06:05,930 --> 01:06:13,130
part is simply to get access to the Dom

01:06:10,460 --> 01:06:15,980
node right we used it in our first task

01:06:13,130 --> 01:06:18,290
however this part is very important this

01:06:15,980 --> 01:06:23,210
is what turns a Dom node interview

01:06:18,290 --> 01:06:27,800
container okay and then inside this I'll

01:06:23,210 --> 01:06:29,630
call it view container variable we will

01:06:27,800 --> 01:06:32,390
have a reference to the view container

01:06:29,630 --> 01:06:35,290
and then we can use its API to create

01:06:32,390 --> 01:06:38,150
views or destroy views or move the views

01:06:35,290 --> 01:06:41,090
anything right in here I'm showing you

01:06:38,150 --> 01:06:43,850
the first method that is used to create

01:06:41,090 --> 01:06:47,330
the view which is called create embedded

01:06:43,850 --> 01:06:53,120
view there are two types of views in

01:06:47,330 --> 01:06:55,040
angular embedded views and host views we

01:06:53,120 --> 01:06:57,350
will probably I'm not sure if we will

01:06:55,040 --> 01:07:00,230
have time to talk about host views but

01:06:57,350 --> 01:07:03,800
they are less important people do not

01:07:00,230 --> 01:07:06,710
usually get it and come across them

01:07:03,800 --> 01:07:10,970
usually we work with embedded views that

01:07:06,710 --> 01:07:14,450
are created using templates right so

01:07:10,970 --> 01:07:15,990
here I am passing template Rev inside

01:07:14,450 --> 01:07:19,710
the create embedded view map

01:07:15,990 --> 01:07:23,570
to create the view and add it to the

01:07:19,710 --> 01:07:27,090
view container so actually this line

01:07:23,570 --> 01:07:32,400
does two steps creates the view and adds

01:07:27,090 --> 01:07:36,060
it to the view container okay so we know

01:07:32,400 --> 01:07:38,400
how to create a view container then we

01:07:36,060 --> 01:07:41,190
know how to create the view using the

01:07:38,400 --> 01:07:43,860
container right these are two steps the

01:07:41,190 --> 01:07:46,560
last thing is how to get access to a

01:07:43,860 --> 01:07:48,990
template right because we need a

01:07:46,560 --> 01:07:51,060
template to pass it inside the create

01:07:48,990 --> 01:07:54,720
embedded view method to create the view

01:07:51,060 --> 01:07:57,810
and it's easy because we have ng

01:07:54,720 --> 01:08:01,380
template tag in angular that we can wrap

01:07:57,810 --> 01:08:04,980
all Dom nodes that we want to be part of

01:08:01,380 --> 01:08:08,720
a template and then we can use view

01:08:04,980 --> 01:08:12,119
child query to get access to this

01:08:08,720 --> 01:08:15,750
template and it will return us the

01:08:12,119 --> 01:08:19,109
template raft type okay I've shown you

01:08:15,750 --> 01:08:24,420
here two ways to do that the first one

01:08:19,109 --> 01:08:26,609
is you pass a read template RAF variable

01:08:24,420 --> 01:08:29,490
so it's similar to how you pass view

01:08:26,609 --> 01:08:31,560
container if you see angular sees a dumb

01:08:29,490 --> 01:08:33,990
node but it doesn't know what you want

01:08:31,560 --> 01:08:36,960
from it right and you pass the read

01:08:33,990 --> 01:08:39,359
parameter and you say to angular I want

01:08:36,960 --> 01:08:43,380
it to be a view container or I want it

01:08:39,359 --> 01:08:46,259
to be a template and the other way is to

01:08:43,380 --> 01:08:48,750
simply pass the template draft but these

01:08:46,259 --> 01:08:53,339
probably this method is less used so I

01:08:48,750 --> 01:08:55,380
recommend stick to the first one okay so

01:08:53,339 --> 01:08:57,089
we know how to get the view container

01:08:55,380 --> 01:09:00,000
how to create the view and how to get a

01:08:57,089 --> 01:09:03,450
template so what we need to do now this

01:09:00,000 --> 01:09:07,500
will be enough next task which is task 3

01:09:03,450 --> 01:09:09,080
right here are the steps and let me

01:09:07,500 --> 01:09:18,529
check it out first

01:09:09,080 --> 01:09:18,529
here okay says that I got changes

01:09:25,750 --> 01:09:33,680
okay so this is exactly the same setup

01:09:30,290 --> 01:09:36,350
we had when we implemented the task of

01:09:33,680 --> 01:09:40,370
removing a Dom element right what we

01:09:36,350 --> 01:09:42,860
need to do is first add a view container

01:09:40,370 --> 01:09:45,410
right and we know that we can do that by

01:09:42,860 --> 01:09:48,500
going to in G container right then

01:09:45,410 --> 01:09:50,390
marking it in some way and then use view

01:09:48,500 --> 01:09:52,640
child of your children of you child in

01:09:50,390 --> 01:09:57,260
our case the child will work to get

01:09:52,640 --> 01:10:00,200
access to this ng container okay so this

01:09:57,260 --> 01:10:01,820
will be the first step I have it here

01:10:00,200 --> 01:10:05,960
right

01:10:01,820 --> 01:10:10,910
the second task will be to wrap this Dom

01:10:05,960 --> 01:10:15,170
node in a template again we can do that

01:10:10,910 --> 01:10:19,070
using ng template all right mark it with

01:10:15,170 --> 01:10:21,620
template references okay and wrap our

01:10:19,070 --> 01:10:24,820
dumb note which is component but it

01:10:21,620 --> 01:10:29,570
could have been anything else like this

01:10:24,820 --> 01:10:31,820
and then again views view child to get

01:10:29,570 --> 01:10:34,280
access to this template so we will have

01:10:31,820 --> 01:10:36,580
to view child queries one for view

01:10:34,280 --> 01:10:41,750
container the other one for template

01:10:36,580 --> 01:10:44,630
okay and once we do that we need to do

01:10:41,750 --> 01:10:47,000
two things first we need to create the

01:10:44,630 --> 01:10:50,390
view and add it to the view container

01:10:47,000 --> 01:10:52,880
right once you do that I want you to

01:10:50,390 --> 01:10:56,810
check that you can actually see this

01:10:52,880 --> 01:11:02,000
component inside the Dom and where do we

01:10:56,810 --> 01:11:04,310
add where do we add where we can recall

01:11:02,000 --> 01:11:06,740
create and by the few method because

01:11:04,310 --> 01:11:09,440
since we need view children the view

01:11:06,740 --> 01:11:13,430
child queries being evaluated we can do

01:11:09,440 --> 01:11:15,080
that inside ng ng after if you need

01:11:13,430 --> 01:11:19,880
lifecycle hook that's where we will

01:11:15,080 --> 01:11:23,990
create an embedded view and then inside

01:11:19,880 --> 01:11:27,470
the remove method since we will have the

01:11:23,990 --> 01:11:32,180
view container right we'll have access

01:11:27,470 --> 01:11:35,300
to it we can call clear method or remove

01:11:32,180 --> 01:11:40,940
method to remove

01:11:35,300 --> 01:11:44,540
the view from the view container okay so

01:11:40,940 --> 01:11:47,330
here's the stops I want you to go

01:11:44,540 --> 01:11:51,760
through them now and ask a question if

01:11:47,330 --> 01:11:51,760
there's something that is not clear

01:12:02,510 --> 01:12:10,739
okay ready to go cool

01:12:08,150 --> 01:12:13,710
so again I'm going to give you ten

01:12:10,739 --> 01:12:17,849
minutes for this because this this small

01:12:13,710 --> 01:12:19,559
work here again if you do not know how

01:12:17,849 --> 01:12:22,739
to proceed just raise your hand I'll

01:12:19,559 --> 01:12:26,280
come by and because it's important that

01:12:22,739 --> 01:12:30,230
you understand it this important topic

01:12:26,280 --> 01:12:30,230
okay ten minutes let's go

01:20:55,320 --> 01:21:01,380
so I'm saying that there's significantly

01:20:58,800 --> 01:21:04,230
a few people less people implemented it

01:21:01,380 --> 01:21:06,750
but it's okay as long as you understand

01:21:04,230 --> 01:21:08,940
the concept of a view container why is

01:21:06,750 --> 01:21:12,270
there that it has the API that you

01:21:08,940 --> 01:21:15,630
should use and there are two good

01:21:12,270 --> 01:21:18,090
questions the first question was why

01:21:15,630 --> 01:21:20,389
does renderer have this remove child

01:21:18,090 --> 01:21:24,030
method that we used where does it have

01:21:20,389 --> 01:21:27,389
Dom hierarchy changes methods and it's

01:21:24,030 --> 01:21:30,540
at the moment it's purely internal part

01:21:27,389 --> 01:21:32,730
so angular itself uses renderer to

01:21:30,540 --> 01:21:35,520
create dom nodes and change dom

01:21:32,730 --> 01:21:38,420
hierarchy it uses render because as I

01:21:35,520 --> 01:21:42,869
told you it needs to be cross-platform

01:21:38,420 --> 01:21:45,179
but we do not need we cannot use render

01:21:42,869 --> 01:21:47,250
these methods of the render because as I

01:21:45,179 --> 01:21:50,909
showed you it can have severe

01:21:47,250 --> 01:21:53,880
consequences the second question so

01:21:50,909 --> 01:21:56,190
again we use some methods of the

01:21:53,880 --> 01:21:59,099
renderer to change existing Dom element

01:21:56,190 --> 01:22:02,340
properties and we do not use methods

01:21:59,099 --> 01:22:04,800
that changed on hierarchy to change Dom

01:22:02,340 --> 01:22:06,420
hierarchy we used another tool which is

01:22:04,800 --> 01:22:10,110
view container that we are working with

01:22:06,420 --> 01:22:13,530
right now okay now the second question

01:22:10,110 --> 01:22:17,010
was we implemented rendering logic

01:22:13,530 --> 01:22:20,550
inside the directive in one of our first

01:22:17,010 --> 01:22:22,710
tasks why are we not using it why we're

01:22:20,550 --> 01:22:24,810
not implementing this type of logic into

01:22:22,710 --> 01:22:28,079
directive now why are we implementing it

01:22:24,810 --> 01:22:30,630
inside a component and it's just for the

01:22:28,079 --> 01:22:32,790
educational purposes so I didn't want to

01:22:30,630 --> 01:22:37,489
complicate this stuff by bringing in a

01:22:32,790 --> 01:22:40,349
directive right so but you should always

01:22:37,489 --> 01:22:43,469
try to put rendering logic into

01:22:40,349 --> 01:22:45,119
directives even in this case if you do

01:22:43,469 --> 01:22:47,280
that you will see that what you will do

01:22:45,119 --> 01:22:51,869
will be quite similar to what ng e for

01:22:47,280 --> 01:22:55,500
ng for dollars ok so let's see the

01:22:51,869 --> 01:22:58,070
solution to this task going to bring it

01:22:55,500 --> 01:22:58,070
here

01:23:00,880 --> 01:23:16,930
okay gonna reset everything and get back

01:23:06,490 --> 01:23:18,370
to solution for okay right so oh it's

01:23:16,930 --> 01:23:23,610
not it sorry

01:23:18,370 --> 01:23:27,700
this solution three I guess yep

01:23:23,610 --> 01:23:30,670
so we had this a component inside a

01:23:27,700 --> 01:23:34,780
template right and the task was to wrap

01:23:30,670 --> 01:23:37,600
it inside ng template that's what we did

01:23:34,780 --> 01:23:40,510
this the first time the second part is

01:23:37,600 --> 01:23:43,930
to introduce the view container into the

01:23:40,510 --> 01:23:47,500
dock and exactly as I showed you I'm

01:23:43,930 --> 01:23:52,090
using ng container here and I'm using

01:23:47,500 --> 01:23:54,430
view child query to get access to this

01:23:52,090 --> 01:23:57,550
view contains and I'm also using view

01:23:54,430 --> 01:24:02,680
child query to get access to the

01:23:57,550 --> 01:24:04,870
template created in the Dom here okay so

01:24:02,680 --> 01:24:06,820
these are two parts that we need to

01:24:04,870 --> 01:24:10,930
create the view a view container and

01:24:06,820 --> 01:24:15,130
template so inside the ng after view you

01:24:10,930 --> 01:24:17,860
need lifecycle hook I'm using create

01:24:15,130 --> 01:24:20,830
embedded view method and pass in the

01:24:17,860 --> 01:24:27,040
template raff that I get from you child

01:24:20,830 --> 01:24:30,250
query okay now when I click the Remove

01:24:27,040 --> 01:24:35,500
button I'm using the remove method of

01:24:30,250 --> 01:24:38,890
the view container to remove that view

01:24:35,500 --> 01:24:42,070
from the container okay and that's the

01:24:38,890 --> 01:24:44,710
implementation right exactly as I

01:24:42,070 --> 01:24:52,480
outlined in the steps so if we run in

01:24:44,710 --> 01:24:55,720
now and again I remove it using the same

01:24:52,480 --> 01:24:59,970
button you see we get number of child

01:24:55,720 --> 01:25:03,420
elements zero instead of one yep

01:24:59,970 --> 01:25:03,420
you got one

01:25:04,920 --> 01:25:16,690
yeah it's a good question actually the

01:25:09,400 --> 01:25:19,660
difference is that well we have I don't

01:25:16,690 --> 01:25:22,930
I remove and clear clear removes

01:25:19,660 --> 01:25:26,500
everything right every single view in

01:25:22,930 --> 01:25:30,010
the container and remove method removes

01:25:26,500 --> 01:25:32,440
the view that you specify using the

01:25:30,010 --> 01:25:36,460
index as a parameter so actually remove

01:25:32,440 --> 01:25:38,740
method takes index yeah but since we

01:25:36,460 --> 01:25:40,720
didn't pass an index it will remove the

01:25:38,740 --> 01:25:44,350
last embedded view and we have only one

01:25:40,720 --> 01:25:46,390
view so it will remove yep there are

01:25:44,350 --> 01:26:00,220
questions there may be microphone thank

01:25:46,390 --> 01:26:07,650
you okay so you're asking what happens

01:26:00,220 --> 01:26:11,050
if we have more than one ng template so

01:26:07,650 --> 01:26:14,230
just just we need some clarification so

01:26:11,050 --> 01:26:23,890
I can have as many ng Templars as I want

01:26:14,230 --> 01:26:24,760
here okay and you want to do what well

01:26:23,890 --> 01:26:26,290
you're not

01:26:24,760 --> 01:26:28,270
this important thing to understand

01:26:26,290 --> 01:26:31,600
you're not working with templates you're

01:26:28,270 --> 01:26:36,400
working with views so templates is just

01:26:31,600 --> 01:26:40,870
the data for the view right so here I

01:26:36,400 --> 01:26:43,510
have two templates so since I'm using

01:26:40,870 --> 01:26:45,910
view child template Ralph well this

01:26:43,510 --> 01:26:49,560
could have been rewritten to something

01:26:45,910 --> 01:26:56,800
like template template 1 and template -

01:26:49,560 --> 01:27:00,130
right okay then using view child I can

01:26:56,800 --> 01:27:04,090
pass the the exactly the template that I

01:27:00,130 --> 01:27:06,490
want here which will be t1 for example

01:27:04,090 --> 01:27:12,430
and this will have reference to this

01:27:06,490 --> 01:27:16,020
temple okay okay cool but what I wanted

01:27:12,430 --> 01:27:19,510
to note is that

01:27:16,020 --> 01:27:22,600
the view container creates views and you

01:27:19,510 --> 01:27:25,810
can call the same method like this you

01:27:22,600 --> 01:27:28,630
can call it many times even pass in the

01:27:25,810 --> 01:27:31,900
same template it will create three views

01:27:28,630 --> 01:27:34,420
right because you pass in the template

01:27:31,900 --> 01:27:36,820
and call this method three times it will

01:27:34,420 --> 01:27:39,070
create three views but they will have

01:27:36,820 --> 01:27:41,170
the same input data right because we use

01:27:39,070 --> 01:27:46,960
the same template and you will have

01:27:41,170 --> 01:27:51,870
three child components or son yep hey so

01:27:46,960 --> 01:27:51,870
can ng template contain ng content like

01:27:53,190 --> 01:27:57,210
that's the tricky one

01:27:59,429 --> 01:28:05,679
so well I need to think about it I just

01:28:03,280 --> 01:28:07,690
don't want to take time now oh let's

01:28:05,679 --> 01:28:09,640
after the workshop you can come in and

01:28:07,690 --> 01:28:15,179
we'll explore this use case whoever's

01:28:09,640 --> 01:28:15,179
interested can come by as well okay so

01:28:22,930 --> 01:28:29,960
yes right right the question is why do

01:28:27,980 --> 01:28:32,300
we use ng contain right if we can use

01:28:29,960 --> 01:28:35,480
any of yeah it's because ng container is

01:28:32,300 --> 01:28:37,520
rendered as a comment inside the Dom so

01:28:35,480 --> 01:28:40,010
by angular we rendered as a comment and

01:28:37,520 --> 01:28:42,500
hence we do not introduce extra Dom

01:28:40,010 --> 01:28:44,480
nodes you know if we used Eve for

01:28:42,500 --> 01:28:47,990
example there would be one redundant Eve

01:28:44,480 --> 01:28:51,110
in HTML but ng container is rendered as

01:28:47,990 --> 01:28:57,170
a comment so it's not there doesn't blow

01:28:51,110 --> 01:29:03,920
yeah okay so yeah so I think we have

01:28:57,170 --> 01:29:08,600
time for one task more and I want to get

01:29:03,920 --> 01:29:11,540
to it because it's important let's get

01:29:08,600 --> 01:29:16,610
back to and it's dynamic components

01:29:11,540 --> 01:29:26,890
rendering so we have a task here tasks

01:29:16,610 --> 01:29:29,630
for let me check it out let's go ok so

01:29:26,890 --> 01:29:32,930
what's the data here so we have two

01:29:29,630 --> 01:29:35,690
components a component in B component we

01:29:32,930 --> 01:29:38,210
have two buttons when click each of the

01:29:35,690 --> 01:29:40,370
buttons should add corresponding

01:29:38,210 --> 01:29:43,520
component to the Dom so we do not know

01:29:40,370 --> 01:29:47,260
which component to render beforehand and

01:29:43,520 --> 01:29:49,700
I have this show method here that

01:29:47,260 --> 01:29:52,730
depends on the parameter passed to it

01:29:49,700 --> 01:29:56,270
decides which component to add either A

01:29:52,730 --> 01:30:00,350
or B component okay that's the initial

01:29:56,270 --> 01:30:02,870
setup sometimes people ask why do we

01:30:00,350 --> 01:30:04,790
need dynamic components in this case

01:30:02,870 --> 01:30:08,240
demonstrates it right we do not know

01:30:04,790 --> 01:30:10,280
which component to render and here I

01:30:08,240 --> 01:30:12,500
only have two components but you can

01:30:10,280 --> 01:30:14,750
have hundreds of components right from

01:30:12,500 --> 01:30:17,720
which you can choose so you cannot put

01:30:14,750 --> 01:30:21,560
them well the other thing that I saw is

01:30:17,720 --> 01:30:25,190
that people add them to the HTML inside

01:30:21,560 --> 01:30:27,440
ng-if right so every single component

01:30:25,190 --> 01:30:29,570
inside wrapped inside ng if and then

01:30:27,440 --> 01:30:33,680
they control it using the state of a

01:30:29,570 --> 01:30:35,030
component which is one solution but if

01:30:33,680 --> 01:30:37,190
you have one or two or three comp

01:30:35,030 --> 01:30:41,119
but if you have hundreds you cannot add

01:30:37,190 --> 01:30:43,460
this a bunch of ng ifs there so in this

01:30:41,119 --> 01:30:48,500
case you need to work with dynamic

01:30:43,460 --> 01:30:51,170
components so let's get back to our view

01:30:48,500 --> 01:30:54,020
container and as I told you it can hold

01:30:51,170 --> 01:30:56,780
two type of views the first type of view

01:30:54,020 --> 01:30:59,360
which is create embedded view right and

01:30:56,780 --> 01:31:02,539
we already worked with it this view is

01:30:59,360 --> 01:31:06,020
created using a template the word

01:31:02,539 --> 01:31:10,579
embedded means that this view should

01:31:06,020 --> 01:31:13,579
always be part of a view container okay

01:31:10,579 --> 01:31:17,090
embedded views are always part of view

01:31:13,579 --> 01:31:20,449
containers however we have another type

01:31:17,090 --> 01:31:23,360
of views which is a hosts view and the

01:31:20,449 --> 01:31:27,190
host view can also be part of view

01:31:23,360 --> 01:31:29,570
container but it can also be standalone

01:31:27,190 --> 01:31:33,199
so if you think about it the app

01:31:29,570 --> 01:31:36,079
component the route component is dynamic

01:31:33,199 --> 01:31:40,670
component and it is a host view and it's

01:31:36,079 --> 01:31:42,949
attached directly to the Dom it's not

01:31:40,670 --> 01:31:45,260
part of a view container okay

01:31:42,949 --> 01:31:48,469
so that's the difference between host

01:31:45,260 --> 01:31:51,469
and embedded views and when you work

01:31:48,469 --> 01:31:55,010
with dynamic components and use

01:31:51,469 --> 01:31:57,199
different API provided by the view

01:31:55,010 --> 01:31:59,900
container which is create component

01:31:57,199 --> 01:32:05,840
instead of create embedded view the view

01:31:59,900 --> 01:32:08,900
container creates host views and the

01:32:05,840 --> 01:32:11,690
input data for host views is different

01:32:08,900 --> 01:32:17,389
what is the input data for embedded

01:32:11,690 --> 01:32:21,949
views like a template right

01:32:17,389 --> 01:32:25,300
I was worried no one with us and so for

01:32:21,949 --> 01:32:31,099
the host views the input data is

01:32:25,300 --> 01:32:33,619
component factory right so just just a

01:32:31,099 --> 01:32:36,770
quick run over to here so we have

01:32:33,619 --> 01:32:38,780
metadata this is what we defined with a

01:32:36,770 --> 01:32:41,150
component decorator right we'll provide

01:32:38,780 --> 01:32:42,770
a template for the component then there

01:32:41,150 --> 01:32:45,559
is the thing called angular compiler

01:32:42,770 --> 01:32:46,650
that turns this template interview

01:32:45,559 --> 01:32:49,020
factory

01:32:46,650 --> 01:32:51,870
and or sometimes referred to as

01:32:49,020 --> 01:32:54,810
component factory and this view factory

01:32:51,870 --> 01:32:58,680
is what is used as an input data for the

01:32:54,810 --> 01:33:00,450
view and we've already got familiar with

01:32:58,680 --> 01:33:03,450
the view right you're working with it

01:33:00,450 --> 01:33:09,230
now so the view factor is something that

01:33:03,450 --> 01:33:13,590
is used to create the view so I'm gonna

01:33:09,230 --> 01:33:16,700
skip it to here how do we get this view

01:33:13,590 --> 01:33:21,390
factory right we use something called

01:33:16,700 --> 01:33:24,120
component factory resolver this is the

01:33:21,390 --> 01:33:27,450
service provided by angular that we can

01:33:24,120 --> 01:33:31,080
use to get a factory generated by

01:33:27,450 --> 01:33:35,730
compiler for a particular component so

01:33:31,080 --> 01:33:38,790
in our case when we have component a

01:33:35,730 --> 01:33:42,120
component B how many factories do we

01:33:38,790 --> 01:33:43,920
need right we need two factories one

01:33:42,120 --> 01:33:49,560
factory for the a component and one

01:33:43,920 --> 01:33:51,660
factory for the B component okay so we

01:33:49,560 --> 01:33:57,090
can inject this resolver into the

01:33:51,660 --> 01:33:59,510
constructor okay and then use its

01:33:57,090 --> 01:34:02,610
resolved component factory method and

01:33:59,510 --> 01:34:05,790
pass in component class in our case it

01:34:02,610 --> 01:34:10,520
would be either A or B component and we

01:34:05,790 --> 01:34:20,100
will get a factory as a return Val

01:34:10,520 --> 01:34:22,260
once you have a factory right so once we

01:34:20,100 --> 01:34:25,590
have a factory we can call the create

01:34:22,260 --> 01:34:28,410
method on the view container and pass in

01:34:25,590 --> 01:34:31,140
this factory and it will be quite

01:34:28,410 --> 01:34:34,080
similar to what we did with the template

01:34:31,140 --> 01:34:41,490
right it will create the view and add it

01:34:34,080 --> 01:34:44,700
to the view container so one important

01:34:41,490 --> 01:34:47,580
thing is to add the components you want

01:34:44,700 --> 01:34:50,760
to get factories for into the entry

01:34:47,580 --> 01:34:53,130
components array and that's because in

01:34:50,760 --> 01:34:55,740
go a compiler because it tries to

01:34:53,130 --> 01:34:58,740
optimize things does not generate

01:34:55,740 --> 01:35:00,619
factories for components it doesn't find

01:34:58,740 --> 01:35:04,469
inside templates

01:35:00,619 --> 01:35:07,050
right and in our case inside the

01:35:04,469 --> 01:35:09,510
template we do not have a component or B

01:35:07,050 --> 01:35:14,699
component but we still need factories

01:35:09,510 --> 01:35:17,219
for them so important part we need to

01:35:14,699 --> 01:35:19,050
add both a and B components to the entry

01:35:17,219 --> 01:35:21,389
components so that the compiler

01:35:19,050 --> 01:35:23,940
generates factories for them and then we

01:35:21,389 --> 01:35:33,500
can resolve them using component factory

01:35:23,940 --> 01:35:36,719
result okay so how do we solve this task

01:35:33,500 --> 01:35:39,389
these are these tabs and since we're

01:35:36,719 --> 01:35:43,290
running out of time I'm going to show

01:35:39,389 --> 01:35:45,679
you the implementation and then you can

01:35:43,290 --> 01:35:49,380
try to do it yourself after the workshop

01:35:45,679 --> 01:35:51,869
so first we need to add all components

01:35:49,380 --> 01:35:55,860
that we'll want to add dynamically to

01:35:51,869 --> 01:35:58,099
the entry components then similarly to

01:35:55,860 --> 01:36:02,010
the way we did with the view container

01:35:58,099 --> 01:36:04,309
for the template to work with dynamic

01:36:02,010 --> 01:36:07,349
components we also need a view container

01:36:04,309 --> 01:36:10,139
so we need to add it to the template and

01:36:07,349 --> 01:36:14,250
initialize it using the read view

01:36:10,139 --> 01:36:16,260
container raff parameter okay now we

01:36:14,250 --> 01:36:20,369
need to inject component factory

01:36:16,260 --> 01:36:24,719
resolver to be able to resolve factories

01:36:20,369 --> 01:36:29,070
for the components and once we have a

01:36:24,719 --> 01:36:31,320
container and a factory we can use the

01:36:29,070 --> 01:36:33,630
create component method passing a

01:36:31,320 --> 01:36:39,980
component factory and it will create

01:36:33,630 --> 01:36:39,980
force component and add it to the Dom

01:36:40,010 --> 01:36:50,940
okay so actually I'm thinking that maybe

01:36:49,920 --> 01:36:52,889
I'm going to give you three minutes

01:36:50,940 --> 01:36:55,199
because I want you to get into it so

01:36:52,889 --> 01:36:57,389
just just try to understand what is

01:36:55,199 --> 01:36:58,380
required okay three minutes and after

01:36:57,389 --> 01:37:00,540
that I'll show you the implementation

01:36:58,380 --> 01:37:06,059
okay so you can think a little on your

01:37:00,540 --> 01:37:11,420
own okay let's go then three minutes the

01:37:06,059 --> 01:37:11,420
task that you need to check out is t4

01:37:13,729 --> 01:37:18,229
again any questions raise your hand

01:37:16,019 --> 01:37:18,229
oh c'mon

01:40:31,310 --> 01:40:43,650
okay now how many peoples have completed

01:40:38,130 --> 01:40:51,510
it oh cool more than previous time okay

01:40:43,650 --> 01:40:56,310
so let's see the solution here now

01:40:51,510 --> 01:40:57,830
we introduced view container again then

01:40:56,310 --> 01:41:02,460
[Music]

01:40:57,830 --> 01:41:06,180
we queried here is in read view

01:41:02,460 --> 01:41:09,590
container raft parameter then we inject

01:41:06,180 --> 01:41:14,280
the resolver into the constructor

01:41:09,590 --> 01:41:18,300
because we will be using it here to get

01:41:14,280 --> 01:41:22,560
access to the relevant component factory

01:41:18,300 --> 01:41:26,160
of you factory so once I have a factory

01:41:22,560 --> 01:41:27,630
here I'm clearing every view inside the

01:41:26,160 --> 01:41:30,510
view container because I don't want them

01:41:27,630 --> 01:41:34,560
to nest you know it go one of the other

01:41:30,510 --> 01:41:37,830
and then I call the create component

01:41:34,560 --> 01:41:40,380
method and pass in the factory and

01:41:37,830 --> 01:41:46,290
that's it alright that's how you work

01:41:40,380 --> 01:41:49,850
with dynamic components so if we run it

01:41:46,290 --> 01:41:49,850
just to make sure that it works

01:41:52,370 --> 01:42:01,950
yep show a component show B component

01:41:55,890 --> 01:42:04,650
show a B it said okay do you have any

01:42:01,950 --> 01:42:07,590
questions looking at this code or

01:42:04,650 --> 01:42:15,390
questions related to view container or

01:42:07,590 --> 01:42:22,170
the type of nodes or views okay no

01:42:15,390 --> 01:42:26,760
questions right also what I would like

01:42:22,170 --> 01:42:29,700
to mention is that this implementation

01:42:26,760 --> 01:42:32,970
can be optimized as well because right

01:42:29,700 --> 01:42:35,970
now when we click on the button we call

01:42:32,970 --> 01:42:39,420
each time the create component method

01:42:35,970 --> 01:42:41,160
which creates the view again and again

01:42:39,420 --> 01:42:43,470
destroys creates destroys

01:42:41,160 --> 01:42:47,090
yes actually we can preserve the view

01:42:43,470 --> 01:42:50,640
that is created by the view container

01:42:47,090 --> 01:42:53,250
storage somewhere and then when needed

01:42:50,640 --> 01:42:55,550
we can pass we can use different methods

01:42:53,250 --> 01:42:58,890
different API of the view container like

01:42:55,550 --> 01:43:02,420
insert right and we can pass the view

01:42:58,890 --> 01:43:06,060
directly and this button can be done

01:43:02,420 --> 01:43:08,340
both for dynamic components and for

01:43:06,060 --> 01:43:11,280
templates actually the methods create

01:43:08,340 --> 01:43:14,910
embedded view and create component

01:43:11,280 --> 01:43:17,280
returned the reference to these views

01:43:14,910 --> 01:43:20,340
right the create embedded view returns

01:43:17,280 --> 01:43:22,350
reference to the embedded view create

01:43:20,340 --> 01:43:25,580
component returns reference to the host

01:43:22,350 --> 01:43:30,300
field okay and then we can manipulate

01:43:25,580 --> 01:43:34,470
okay now again where can you read about

01:43:30,300 --> 01:43:38,160
it right angle in depth again this is

01:43:34,470 --> 01:43:42,540
the place here that I mentioned in the

01:43:38,160 --> 01:43:45,600
beginning right so this is where I and

01:43:42,540 --> 01:43:49,760
other people who write angular in devs

01:43:45,600 --> 01:43:52,650
explore contents explore internals and

01:43:49,760 --> 01:43:54,240
write about this stuff and actually

01:43:52,650 --> 01:43:56,190
there's going to be an article I will

01:43:54,240 --> 01:43:58,710
write an article because we were

01:43:56,190 --> 01:44:01,320
supposed to do like another two task

01:43:58,710 --> 01:44:03,540
optimization tasks but we haven't had

01:44:01,320 --> 01:44:05,370
time so I'll write an article and I'll

01:44:03,540 --> 01:44:07,470
put this optimization techniques in

01:44:05,370 --> 01:44:13,290
their article so you can will be able to

01:44:07,470 --> 01:44:14,910
check it there okay so thank you for

01:44:13,290 --> 01:44:21,069
your attendance

01:44:14,910 --> 01:44:21,069

YouTube URL: https://www.youtube.com/watch?v=vz9cNCkaPsY


