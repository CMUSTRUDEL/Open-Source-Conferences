Title: Good Action Hygiene with NgRx   Mike Ryan
Publication date: 2018-11-16
Playlist: ng-conf 2018
Description: 
	ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,030 --> 00:00:03,080
thank you for taking a couple of minutes

00:00:01,410 --> 00:00:06,150
out of your lunch to come to this one

00:00:03,080 --> 00:00:08,069
this is actually probably my most

00:00:06,150 --> 00:00:10,290
exciting talk for the day at least from

00:00:08,069 --> 00:00:11,400
my perspective because I'm gonna be

00:00:10,290 --> 00:00:13,080
talking a little bit about process

00:00:11,400 --> 00:00:15,049
within directs I'm not actually going to

00:00:13,080 --> 00:00:17,550
be writing any code this time and

00:00:15,049 --> 00:00:19,529
process is really important for an index

00:00:17,550 --> 00:00:21,210
application because it helps you write

00:00:19,529 --> 00:00:23,760
higher quality and more maintainable

00:00:21,210 --> 00:00:25,050
programs and I'm really excited to be

00:00:23,760 --> 00:00:27,210
talking about quality because like we

00:00:25,050 --> 00:00:31,500
said this morning quality is at the

00:00:27,210 --> 00:00:33,020
heart of indirects so where I work we

00:00:31,500 --> 00:00:36,149
work on industrial controls

00:00:33,020 --> 00:00:38,040
so if our software fails we can actually

00:00:36,149 --> 00:00:41,430
create real-life dangerous situations

00:00:38,040 --> 00:00:44,070
for people so as a result brand I have

00:00:41,430 --> 00:00:51,149
tried really hard to bake quality and

00:00:44,070 --> 00:00:52,379
day in grx so quality well it's kind of

00:00:51,149 --> 00:00:55,410
achieved through architecture and

00:00:52,379 --> 00:00:57,649
process in grx gives you architecture

00:00:55,410 --> 00:01:00,239
out of the box that's one of its appeals

00:00:57,649 --> 00:01:02,910
but what it does not give you as process

00:01:00,239 --> 00:01:04,850
and with poor process you're gonna risk

00:01:02,910 --> 00:01:06,900
writing really low-quality applications

00:01:04,850 --> 00:01:09,210
so today I want to talk to you about one

00:01:06,900 --> 00:01:10,110
particular indirect process that will

00:01:09,210 --> 00:01:12,630
help you write those high quality

00:01:10,110 --> 00:01:16,470
applications and that's the process of

00:01:12,630 --> 00:01:19,080
good action hygiene so in an index

00:01:16,470 --> 00:01:21,360
application an action is a unified

00:01:19,080 --> 00:01:23,270
interface for describing an event in our

00:01:21,360 --> 00:01:26,640
application for any number of sources

00:01:23,270 --> 00:01:29,100
these could be user interaction users

00:01:26,640 --> 00:01:31,220
playing with your components it can be

00:01:29,100 --> 00:01:33,750
communication with your back-end API

00:01:31,220 --> 00:01:36,390
they can also model interactions with

00:01:33,750 --> 00:01:39,540
device events like for instance the

00:01:36,390 --> 00:01:41,970
fullscreen API and at a minimum an

00:01:39,540 --> 00:01:43,649
action has a type and it could have any

00:01:41,970 --> 00:01:46,680
additional properties on it that we call

00:01:43,649 --> 00:01:48,329
the payload of an action and these

00:01:46,680 --> 00:01:50,040
actions are collected and they form

00:01:48,329 --> 00:01:53,640
what's called a global unified action

00:01:50,040 --> 00:01:56,700
stream so with this action stream we

00:01:53,640 --> 00:01:58,799
pass them to producers producers decide

00:01:56,700 --> 00:02:02,579
how state transitions as a result of an

00:01:58,799 --> 00:02:05,790
action from their actions in state get

00:02:02,579 --> 00:02:07,770
delivered to effects effects can start

00:02:05,790 --> 00:02:11,160
the process of integrating with your

00:02:07,770 --> 00:02:13,700
back-end api's or browser api's effects

00:02:11,160 --> 00:02:16,610
can then dispatch more actions into this

00:02:13,700 --> 00:02:18,020
so they're kind of important really you

00:02:16,610 --> 00:02:21,620
could say that they formed the bedrock

00:02:18,020 --> 00:02:24,260
of an index application actions are the

00:02:21,620 --> 00:02:26,840
inputs and outputs of so many systems in

00:02:24,260 --> 00:02:28,160
India X and it's really important that

00:02:26,840 --> 00:02:29,840
we're gonna get the foundation of our

00:02:28,160 --> 00:02:33,230
applications right by writing

00:02:29,840 --> 00:02:36,080
high-quality actions so how do we write

00:02:33,230 --> 00:02:38,480
good actions well in my experience

00:02:36,080 --> 00:02:41,090
there's really three pitfalls to writing

00:02:38,480 --> 00:02:43,580
a good action I'm going to share these

00:02:41,090 --> 00:02:45,709
pitfalls are what traps like the book at

00:02:43,580 --> 00:02:49,310
the bottom of them and how you can avoid

00:02:45,709 --> 00:02:53,049
them so the first pitfall and this one's

00:02:49,310 --> 00:02:56,120
reusing actions why does this come about

00:02:53,049 --> 00:02:58,819
well like I said I'm a big fan of food

00:02:56,120 --> 00:03:01,910
so I'm writing a menu ordering app to

00:02:58,819 --> 00:03:04,459
order food items and on my menu details

00:03:01,910 --> 00:03:06,830
page I can add any number of items to my

00:03:04,459 --> 00:03:08,780
cart so if the user presses the Add

00:03:06,830 --> 00:03:10,519
burger button I want to go ahead and

00:03:08,780 --> 00:03:13,910
dispatch an action something like

00:03:10,519 --> 00:03:15,590
burgers add one but users can go to the

00:03:13,910 --> 00:03:17,870
burgers page and they can kind of do the

00:03:15,590 --> 00:03:19,489
same thing right they could go add a

00:03:17,870 --> 00:03:22,910
burger to their cart from the burger

00:03:19,489 --> 00:03:27,819
details page and so I want to dispatch

00:03:22,910 --> 00:03:30,920
the same action burgers add one well I

00:03:27,819 --> 00:03:32,780
think this comes out because we go right

00:03:30,920 --> 00:03:34,489
these reducer functions they're going to

00:03:32,780 --> 00:03:36,380
kind of cause the same state change in

00:03:34,489 --> 00:03:39,980
both cases we're going to be adding

00:03:36,380 --> 00:03:41,480
burgers to our cart this burger reducer

00:03:39,980 --> 00:03:43,730
maintains that collection of burgers in

00:03:41,480 --> 00:03:47,060
the system and really I could view this

00:03:43,730 --> 00:03:49,310
action as a command and so I think the

00:03:47,060 --> 00:03:51,010
need to reuse actions comes out because

00:03:49,310 --> 00:03:53,630
we tend to view actions like commands

00:03:51,010 --> 00:03:55,819
but if I read this reducer in a week or

00:03:53,630 --> 00:03:57,950
a year I won't have enough information

00:03:55,819 --> 00:03:58,970
to know where this burger is coming from

00:03:57,950 --> 00:04:01,100
in my application

00:03:58,970 --> 00:04:03,319
I can't tell by looking at this reducer

00:04:01,100 --> 00:04:06,970
if this is coming from the cart page or

00:04:03,319 --> 00:04:09,230
the menu page or the burger details page

00:04:06,970 --> 00:04:10,850
what if instead of sharing that action

00:04:09,230 --> 00:04:14,000
we made a new action for each

00:04:10,850 --> 00:04:15,980
independent event this reducer becomes a

00:04:14,000 --> 00:04:17,299
lot more readable we have a clear

00:04:15,980 --> 00:04:19,130
understanding of what events in the

00:04:17,299 --> 00:04:22,640
system result in a burger being added to

00:04:19,130 --> 00:04:24,919
the application of State so here i've

00:04:22,640 --> 00:04:27,050
replaced that generic action type with

00:04:24,919 --> 00:04:30,620
two specific actions that give it

00:04:27,050 --> 00:04:33,050
that kind of clarity so how can we avoid

00:04:30,620 --> 00:04:35,569
this well actions should really try to

00:04:33,050 --> 00:04:37,039
capture events and not commands instead

00:04:35,569 --> 00:04:39,349
of we're using actions or capturing

00:04:37,039 --> 00:04:41,389
commands in your actions try to actually

00:04:39,349 --> 00:04:44,479
model your actions as unique events in

00:04:41,389 --> 00:04:46,129
your system this will help to help you

00:04:44,479 --> 00:04:48,740
avoid the need to dispatch multiple

00:04:46,129 --> 00:04:50,150
actions in a single call site it's one

00:04:48,740 --> 00:04:52,370
of the most common questions Brandon and

00:04:50,150 --> 00:04:54,949
I get how do I dispatch multiple actions

00:04:52,370 --> 00:04:56,419
from an effect well the answer is you

00:04:54,949 --> 00:04:57,860
should probably never need a dispatch

00:04:56,419 --> 00:04:59,750
multiple actions from the same effect

00:04:57,860 --> 00:05:04,099
because you're capturing unique events

00:04:59,750 --> 00:05:05,690
with their own actions so really you

00:05:04,099 --> 00:05:08,240
want to make reducers and effects the

00:05:05,690 --> 00:05:09,680
decision makers in your application this

00:05:08,240 --> 00:05:11,840
really boils down to separating the

00:05:09,680 --> 00:05:14,659
description of an event and the way it

00:05:11,840 --> 00:05:16,219
gets handled in your app you don't want

00:05:14,659 --> 00:05:18,110
your components to decide how state

00:05:16,219 --> 00:05:20,080
changes that's the kind of mess we're

00:05:18,110 --> 00:05:22,430
trying to avoid when we adopt in grx

00:05:20,080 --> 00:05:24,409
when we're using the command a driven

00:05:22,430 --> 00:05:25,759
action pattern we are telling our

00:05:24,409 --> 00:05:27,530
components that they can decide how

00:05:25,759 --> 00:05:29,120
state changes but that's not what we

00:05:27,530 --> 00:05:30,889
want we want them to capture unique

00:05:29,120 --> 00:05:33,080
events and we want to yield that

00:05:30,889 --> 00:05:37,039
decision-making process to our state

00:05:33,080 --> 00:05:39,139
changes and our side effects the second

00:05:37,039 --> 00:05:41,240
pitfall is using generic action types

00:05:39,139 --> 00:05:43,610
and it turns out this one is pretty

00:05:41,240 --> 00:05:45,349
related to the first pitfall if you're

00:05:43,610 --> 00:05:47,210
avoiding action reuse and you're

00:05:45,349 --> 00:05:49,370
capturing unique events you're probably

00:05:47,210 --> 00:05:52,240
already avoiding generic action types

00:05:49,370 --> 00:05:54,800
but I still think it's worth discussing

00:05:52,240 --> 00:05:56,479
so here I have an effect and it's

00:05:54,800 --> 00:05:59,719
listening for when the user adds a taco

00:05:56,479 --> 00:06:02,150
to their cart let me tell you that from

00:05:59,719 --> 00:06:04,099
personal experience when I come back to

00:06:02,150 --> 00:06:05,990
this effect in a year I have no idea

00:06:04,099 --> 00:06:08,060
where this came from I have to trace

00:06:05,990 --> 00:06:09,949
where this action was dispatched using

00:06:08,060 --> 00:06:11,930
my IDE to figure out how this effect

00:06:09,949 --> 00:06:14,020
onto my system and that's not helping

00:06:11,930 --> 00:06:16,190
anybody

00:06:14,020 --> 00:06:18,949
this also really comes into play when

00:06:16,190 --> 00:06:21,259
you're using the store dev tools here I

00:06:18,949 --> 00:06:22,789
have a store dev tools log generated

00:06:21,259 --> 00:06:25,000
using the store dev tools where I've

00:06:22,789 --> 00:06:27,319
chosen really generic action types and

00:06:25,000 --> 00:06:29,270
there are so many details that are left

00:06:27,319 --> 00:06:31,250
ambiguous in this action log who

00:06:29,270 --> 00:06:33,979
dispatched which action which part of

00:06:31,250 --> 00:06:35,960
the system dispatched it was the action

00:06:33,979 --> 00:06:39,349
the result of user input or was it from

00:06:35,960 --> 00:06:40,729
interacting with my back-end API but if

00:06:39,349 --> 00:06:41,470
instead I had chosen to use really

00:06:40,729 --> 00:06:43,720
descriptive that

00:06:41,470 --> 00:06:45,970
action types it becomes a lot more clear

00:06:43,720 --> 00:06:47,740
and I bet just by reading this action

00:06:45,970 --> 00:06:50,230
log you can probably guess how this

00:06:47,740 --> 00:06:51,970
application works it's clear whether an

00:06:50,230 --> 00:06:53,380
actions coming from a page or if it's

00:06:51,970 --> 00:06:55,300
because I was interacting with a

00:06:53,380 --> 00:06:58,900
back-end API but these are still the

00:06:55,300 --> 00:07:00,610
same actions in my system so from just

00:06:58,900 --> 00:07:02,320
reading the action log alone I have a

00:07:00,610 --> 00:07:06,160
much more insight into how my

00:07:02,320 --> 00:07:08,050
application works so if we go back to

00:07:06,160 --> 00:07:09,670
that same effect and instead we use

00:07:08,050 --> 00:07:11,800
really clear and descriptive action

00:07:09,670 --> 00:07:13,630
types is gonna make it that much easier

00:07:11,800 --> 00:07:15,790
to understand this code when you come

00:07:13,630 --> 00:07:17,530
back to it in a year I don't have to use

00:07:15,790 --> 00:07:20,290
my IDE to figure out these actions are

00:07:17,530 --> 00:07:22,360
dispatched I have really good context

00:07:20,290 --> 00:07:26,260
from these action types where these are

00:07:22,360 --> 00:07:28,480
being dispatched from when you're

00:07:26,260 --> 00:07:30,760
picking an action type you've seen this

00:07:28,480 --> 00:07:32,290
pattern a lot where we put in square

00:07:30,760 --> 00:07:33,910
brackets the source of an action and

00:07:32,290 --> 00:07:36,370
then we give a name to the event that

00:07:33,910 --> 00:07:37,900
arose from it try to pick really

00:07:36,370 --> 00:07:40,169
descriptive names from your sources if

00:07:37,900 --> 00:07:44,440
it's an interaction with a back-end API

00:07:40,169 --> 00:07:46,540
suffix that source name with API if it's

00:07:44,440 --> 00:07:47,919
from a component or a page suffix it was

00:07:46,540 --> 00:07:51,550
component or page it's gonna make your

00:07:47,919 --> 00:07:53,800
life a lot easier so if you've ever

00:07:51,550 --> 00:07:55,270
heard this phrase clean code is code you

00:07:53,800 --> 00:07:58,030
can read after a year and still be able

00:07:55,270 --> 00:07:59,950
to understand well I want to kind of put

00:07:58,030 --> 00:08:02,140
my own indirect spin on it and say that

00:07:59,950 --> 00:08:03,669
good actions or actions you can read

00:08:02,140 --> 00:08:06,580
after a year and tell where they're

00:08:03,669 --> 00:08:08,229
being dispatched from to give you some

00:08:06,580 --> 00:08:10,000
context as to why this is important

00:08:08,229 --> 00:08:12,040
last year the company that I worked

00:08:10,000 --> 00:08:13,840
winter went a lot of reorganization and

00:08:12,040 --> 00:08:17,290
it caused a bunch of new developers to

00:08:13,840 --> 00:08:18,729
join the product team that I was on one

00:08:17,290 --> 00:08:20,560
of the engineers her name is sherry

00:08:18,729 --> 00:08:22,000
commented to me after a week or so of

00:08:20,560 --> 00:08:24,370
getting caught up that the index

00:08:22,000 --> 00:08:25,750
developer tools were a tremendous asset

00:08:24,370 --> 00:08:27,760
in getting ramped on to how the

00:08:25,750 --> 00:08:29,229
application worked and it's because we

00:08:27,760 --> 00:08:31,120
were baking good action hygiene into

00:08:29,229 --> 00:08:32,229
that application she can look at those

00:08:31,120 --> 00:08:34,360
dev tools and have a good understanding

00:08:32,229 --> 00:08:35,880
of how this app worked without having

00:08:34,360 --> 00:08:38,110
actually looked at too much source code

00:08:35,880 --> 00:08:39,969
so help yourself a new developers to

00:08:38,110 --> 00:08:42,450
your project by writing clean actions it

00:08:39,969 --> 00:08:46,200
really helps a lot

00:08:42,450 --> 00:08:49,600
the third pitfall is action subtyping

00:08:46,200 --> 00:08:51,700
what is action subtyping well I really

00:08:49,600 --> 00:08:53,230
see developers fall into this pit when

00:08:51,700 --> 00:08:55,030
they want to try and maybe handle click

00:08:53,230 --> 00:08:55,810
events for multiple options or if they

00:08:55,030 --> 00:08:57,960
want to handle a

00:08:55,810 --> 00:09:00,340
hi responses and errors in a generic way

00:08:57,960 --> 00:09:02,770
so if we go back to that menu page and

00:09:00,340 --> 00:09:05,320
instead of dispatching a unique action

00:09:02,770 --> 00:09:07,060
for every single button on that page we

00:09:05,320 --> 00:09:09,790
went ahead and dispatched a generic ad

00:09:07,060 --> 00:09:12,310
menu item action and then we can specify

00:09:09,790 --> 00:09:14,770
the kind as additional property on that

00:09:12,310 --> 00:09:17,320
action well I don't have to write as

00:09:14,770 --> 00:09:19,480
many actions if I did it this way but

00:09:17,320 --> 00:09:21,250
there's some pitfalls when it comes when

00:09:19,480 --> 00:09:24,100
you want to handle just a specific kind

00:09:21,250 --> 00:09:26,740
in this action type so this process of

00:09:24,100 --> 00:09:29,110
adding additional kinds to actions is

00:09:26,740 --> 00:09:32,589
what I call action subtyping so where's

00:09:29,110 --> 00:09:34,620
the pitfall well the reason this is

00:09:32,589 --> 00:09:37,390
problematic is it starts to introduce

00:09:34,620 --> 00:09:39,370
conditional branches all throughout your

00:09:37,390 --> 00:09:40,839
application and these nested

00:09:39,370 --> 00:09:42,220
conditionals are going to really start

00:09:40,839 --> 00:09:45,820
to add up when you go to write unit

00:09:42,220 --> 00:09:47,500
tests for this application similarly and

00:09:45,820 --> 00:09:50,020
in effect we have to add additional

00:09:47,500 --> 00:09:52,240
filtering to our effect and this is

00:09:50,020 --> 00:09:54,010
another kind of nested conditional where

00:09:52,240 --> 00:09:57,370
percolating these nested conditionals

00:09:54,010 --> 00:09:59,770
throughout this application and what we

00:09:57,370 --> 00:10:01,210
want to do to make testing easier is we

00:09:59,770 --> 00:10:03,250
really want to avoid these nested

00:10:01,210 --> 00:10:05,920
conditionals and reducers and effects if

00:10:03,250 --> 00:10:08,230
I had been explicit upfront and Roton

00:10:05,920 --> 00:10:10,570
and written those three really specific

00:10:08,230 --> 00:10:12,430
action types I could have avoided these

00:10:10,570 --> 00:10:13,930
nested conditionals and all the tests

00:10:12,430 --> 00:10:15,580
that came with it so I should have

00:10:13,930 --> 00:10:20,560
really taken the time upfront to write

00:10:15,580 --> 00:10:22,089
better actions so if instead we chose to

00:10:20,560 --> 00:10:23,770
write unique actions for each subtype

00:10:22,089 --> 00:10:26,080
the reducer looses its conditional

00:10:23,770 --> 00:10:27,750
branch this becomes a much easier test

00:10:26,080 --> 00:10:30,190
to write

00:10:27,750 --> 00:10:32,320
similarly for effects if we use a

00:10:30,190 --> 00:10:34,540
specific action type and avoid subtyping

00:10:32,320 --> 00:10:37,870
we lose the conditional this effect

00:10:34,540 --> 00:10:39,580
becomes easier to test so what we want

00:10:37,870 --> 00:10:42,910
to do is we want to constrain action

00:10:39,580 --> 00:10:44,620
types to be what I call narrow avoid

00:10:42,910 --> 00:10:46,990
putting yourself in a situation we have

00:10:44,620 --> 00:10:49,390
to specify the kind or subtype or class

00:10:46,990 --> 00:10:51,610
of an action just leverage action type

00:10:49,390 --> 00:10:53,080
to describe the event these are going to

00:10:51,610 --> 00:10:54,700
cause you to write more actions that's

00:10:53,080 --> 00:10:56,950
guaranteed and I know ninja X has a

00:10:54,700 --> 00:10:58,690
boilerplate problem but it's worth doing

00:10:56,950 --> 00:11:00,730
you're gonna save yourself more time

00:10:58,690 --> 00:11:01,930
down the road by avoiding these nested

00:11:00,730 --> 00:11:05,320
conditionals they're gonna appear in

00:11:01,930 --> 00:11:06,640
your application it's really worth

00:11:05,320 --> 00:11:08,770
noting that there's a reason why we use

00:11:06,640 --> 00:11:09,670
switch statements it's because you they

00:11:08,770 --> 00:11:11,620
allow you to stay

00:11:09,670 --> 00:11:13,270
case statements so even if you have

00:11:11,620 --> 00:11:15,580
multiple action types that result in the

00:11:13,270 --> 00:11:18,580
state same state change you can leverage

00:11:15,580 --> 00:11:20,640
case fall through to make the same state

00:11:18,580 --> 00:11:24,370
change as the result of multiple actions

00:11:20,640 --> 00:11:26,440
same for effects effects allow you to

00:11:24,370 --> 00:11:29,200
pass multiple action types into the

00:11:26,440 --> 00:11:31,420
f-type operator so many action types can

00:11:29,200 --> 00:11:34,360
cause the same state or the same effect

00:11:31,420 --> 00:11:36,070
to start this pattern of using multiple

00:11:34,360 --> 00:11:38,620
action types and your effects and

00:11:36,070 --> 00:11:42,700
reducers shouldn't be uncommon in an

00:11:38,620 --> 00:11:44,950
indirect application so how can we avoid

00:11:42,700 --> 00:11:48,940
the pitfalls by applying good action

00:11:44,950 --> 00:11:50,950
hygiene well this is sort of the breath

00:11:48,940 --> 00:11:52,780
of air is that there's always exceptions

00:11:50,950 --> 00:11:54,490
to the rule there's a reason I've been

00:11:52,780 --> 00:11:56,170
using the word pitfall and that's

00:11:54,490 --> 00:11:58,510
because sometimes it's perfectly fine to

00:11:56,170 --> 00:12:00,130
bring a safety ladder as a strategy for

00:11:58,510 --> 00:12:01,810
mitigating them you're going to

00:12:00,130 --> 00:12:02,860
encounter code in situations where

00:12:01,810 --> 00:12:04,720
you're going to want to leverage these

00:12:02,860 --> 00:12:06,760
patterns and as long as you are aware of

00:12:04,720 --> 00:12:09,610
what the downsides are it's okay to use

00:12:06,760 --> 00:12:11,200
them without other way I want to talk

00:12:09,610 --> 00:12:14,440
about some strategies for building good

00:12:11,200 --> 00:12:16,630
action hygiene into your process and the

00:12:14,440 --> 00:12:18,880
first strategy is to put clarity ahead

00:12:16,630 --> 00:12:21,190
of brevity this is really a driving

00:12:18,880 --> 00:12:23,950
force for in grx it's why it requires

00:12:21,190 --> 00:12:26,110
you to be so explicit we assert that by

00:12:23,950 --> 00:12:28,240
spending time upfront by being very

00:12:26,110 --> 00:12:30,010
explicit about how side effects start or

00:12:28,240 --> 00:12:32,290
how state changes you're gonna save

00:12:30,010 --> 00:12:33,640
yourself time in the long run with all

00:12:32,290 --> 00:12:36,400
the or with how much easier it makes

00:12:33,640 --> 00:12:37,480
testing your application it's all goes

00:12:36,400 --> 00:12:42,310
towards writing more maintainable

00:12:37,480 --> 00:12:43,930
programs the second thing to do is to

00:12:42,310 --> 00:12:46,420
really try to be empathetic in your

00:12:43,930 --> 00:12:48,370
architecture design choices like I was

00:12:46,420 --> 00:12:50,020
talking about that story of sherry you

00:12:48,370 --> 00:12:52,240
need to consider the other developers on

00:12:50,020 --> 00:12:53,890
your team by being more explicit and

00:12:52,240 --> 00:12:55,960
baking good action hygiene into your

00:12:53,890 --> 00:12:58,180
application you're going to help other

00:12:55,960 --> 00:13:00,220
developers learn and debug your programs

00:12:58,180 --> 00:13:01,660
that you are writing better so we really

00:13:00,220 --> 00:13:03,280
need to try to be empathetic for the

00:13:01,660 --> 00:13:07,150
other developers they're going to be

00:13:03,280 --> 00:13:08,320
helping us write these code but the best

00:13:07,150 --> 00:13:11,740
way that I have found

00:13:08,320 --> 00:13:13,120
to avoid these pitfalls is to write

00:13:11,740 --> 00:13:15,610
actions first when you go build a new

00:13:13,120 --> 00:13:17,560
feature this actually works really well

00:13:15,610 --> 00:13:19,360
from a process standpoint because if

00:13:17,560 --> 00:13:20,680
you're on a team you need the action to

00:13:19,360 --> 00:13:22,150
be written before we can write the

00:13:20,680 --> 00:13:23,170
reducers or the effects or the

00:13:22,150 --> 00:13:25,509
containers

00:13:23,170 --> 00:13:27,369
so by writing those actions first your

00:13:25,509 --> 00:13:29,170
unblocking other developers on your team

00:13:27,369 --> 00:13:32,439
from building the rest of that feature

00:13:29,170 --> 00:13:35,649
in parallel so how do I write actions

00:13:32,439 --> 00:13:39,189
first well I divide the list of actions

00:13:35,649 --> 00:13:40,929
based on their event source from there I

00:13:39,189 --> 00:13:43,569
look at each source and I kind of divide

00:13:40,929 --> 00:13:45,579
them further for the user actions I

00:13:43,569 --> 00:13:49,089
divide them based on which page or

00:13:45,579 --> 00:13:52,089
component that they're coming from for

00:13:49,089 --> 00:13:54,549
back in actions I separate them based on

00:13:52,089 --> 00:13:57,569
the API that I'm going to be interacting

00:13:54,549 --> 00:14:00,730
with or we're capturing with that action

00:13:57,569 --> 00:14:02,470
for device actions I separate those

00:14:00,730 --> 00:14:03,910
based on the browser API that I'm going

00:14:02,470 --> 00:14:07,989
to be interacting with whether that's a

00:14:03,910 --> 00:14:10,149
WebSocket or an index DB connection by

00:14:07,989 --> 00:14:13,329
doing this I'm saving myself some time

00:14:10,149 --> 00:14:14,949
down the road and how is that well it's

00:14:13,329 --> 00:14:17,980
a lot easier to kind of avoid those

00:14:14,949 --> 00:14:19,569
action pitfalls by separating them out

00:14:17,980 --> 00:14:22,119
and thinking through these actions

00:14:19,569 --> 00:14:24,009
upfront I'm gonna avoid the need to

00:14:22,119 --> 00:14:25,179
write command like actions because I

00:14:24,009 --> 00:14:27,819
haven't even written my reducer

00:14:25,179 --> 00:14:29,410
functions yet it's also going to help me

00:14:27,819 --> 00:14:31,720
avoid action subtyping because I'm

00:14:29,410 --> 00:14:34,949
really teasing out all the different

00:14:31,720 --> 00:14:37,899
actions that exist in my application I'm

00:14:34,949 --> 00:14:39,579
also avoiding subtyping I'm truly

00:14:37,899 --> 00:14:43,119
capturing all the unique events that

00:14:39,579 --> 00:14:45,489
happen in my application so really when

00:14:43,119 --> 00:14:47,739
you're dividing these actions up keep

00:14:45,489 --> 00:14:48,730
the action pitfalls in mind doing it

00:14:47,739 --> 00:14:50,889
this way is going to really help you

00:14:48,730 --> 00:14:51,819
avoid some of these practices that's

00:14:50,889 --> 00:14:56,230
going to make testing your application

00:14:51,819 --> 00:14:59,290
and reasoning about it harder the second

00:14:56,230 --> 00:15:00,879
benefit to writing actions first is it

00:14:59,290 --> 00:15:03,069
gives you the time to think about hard

00:15:00,879 --> 00:15:05,559
problems it turns out there's a couple

00:15:03,069 --> 00:15:07,660
of things that this lets you do well

00:15:05,559 --> 00:15:09,610
even if your action list that you come

00:15:07,660 --> 00:15:11,739
up with is incomplete or has obvious

00:15:09,610 --> 00:15:13,329
gaps it's a great way to help you sort

00:15:11,739 --> 00:15:15,220
of wrap your head around a feature

00:15:13,329 --> 00:15:17,309
you're thinking about all the different

00:15:15,220 --> 00:15:19,600
interactions that happen within it

00:15:17,309 --> 00:15:21,519
they'll also help you be more discerning

00:15:19,600 --> 00:15:23,139
about the implementation it's much

00:15:21,519 --> 00:15:25,239
easier to think about the state of your

00:15:23,139 --> 00:15:27,850
application when you define all of the

00:15:25,239 --> 00:15:30,009
events that are in it first and so this

00:15:27,850 --> 00:15:31,629
helps you build a mental model for how

00:15:30,009 --> 00:15:33,220
various segments of your feature are

00:15:31,629 --> 00:15:36,699
going to connect by writing actions

00:15:33,220 --> 00:15:37,030
first if you're on a team it's also

00:15:36,699 --> 00:15:38,110
going to

00:15:37,030 --> 00:15:40,290
help you develop a shared understanding

00:15:38,110 --> 00:15:42,460
of the problem with your teammates I

00:15:40,290 --> 00:15:44,650
found that one of the biggest enablers

00:15:42,460 --> 00:15:46,180
of productivity is to develop a shared

00:15:44,650 --> 00:15:48,670
understanding of the problem space

00:15:46,180 --> 00:15:50,320
amongst your team nothing's gonna hurt

00:15:48,670 --> 00:15:52,510
your team's velocity more than finding

00:15:50,320 --> 00:15:53,980
out at the end of a project that you had

00:15:52,510 --> 00:15:56,050
different understandings of the problem

00:15:53,980 --> 00:15:58,600
you're trying to solve this often leads

00:15:56,050 --> 00:15:59,920
to incompatible implementations by

00:15:58,600 --> 00:16:01,810
designing and writing the actions

00:15:59,920 --> 00:16:03,370
together as a group you can help develop

00:16:01,810 --> 00:16:07,900
a shared understanding of the problem

00:16:03,370 --> 00:16:10,480
and how the feature works so what is

00:16:07,900 --> 00:16:12,370
good action hygiene well it's not

00:16:10,480 --> 00:16:14,170
reusing actions this is going to help

00:16:12,370 --> 00:16:15,820
make it clear what inputs to reducers

00:16:14,170 --> 00:16:17,560
and effects really are it's going to

00:16:15,820 --> 00:16:21,370
make those reducers and effects easier

00:16:17,560 --> 00:16:23,200
to read in a year's time it's using

00:16:21,370 --> 00:16:24,850
descriptive action types this is going

00:16:23,200 --> 00:16:26,950
to help you improve debug ability and

00:16:24,850 --> 00:16:28,870
traceability in your ng rx application

00:16:26,950 --> 00:16:30,730
you're gonna go to look at your index

00:16:28,870 --> 00:16:33,730
action log and know where an action is

00:16:30,730 --> 00:16:35,680
coming from it's about avoiding action

00:16:33,730 --> 00:16:37,480
subtyping this is going to keep

00:16:35,680 --> 00:16:39,130
unnecessary complexity out of your

00:16:37,480 --> 00:16:42,340
reducers and effects and make your tests

00:16:39,130 --> 00:16:44,260
easier to write it's about focusing on

00:16:42,340 --> 00:16:46,210
clarity over brevity you're going to

00:16:44,260 --> 00:16:49,510
always try to lean towards explicit code

00:16:46,210 --> 00:16:51,430
over code that was fast to write it's

00:16:49,510 --> 00:16:53,860
about empathy I can't stress how

00:16:51,430 --> 00:16:55,840
important this one is try to anticipate

00:16:53,860 --> 00:16:58,090
how other developers on your team are

00:16:55,840 --> 00:17:01,090
going to help you build this application

00:16:58,090 --> 00:17:02,920
and finally it's about writing actions

00:17:01,090 --> 00:17:04,540
first this is going to help you avoid

00:17:02,920 --> 00:17:07,920
these pitfalls and develop a deep

00:17:04,540 --> 00:17:15,199
understanding of the feature thank you

00:17:07,920 --> 00:17:15,199

YouTube URL: https://www.youtube.com/watch?v=JmnsEvoy-gY


