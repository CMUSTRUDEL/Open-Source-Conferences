Title: Ngrx Complex Form - Jesse Sanders
Publication date: 2018-11-16
Playlist: ng-conf 2018
Description: 
	ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,030 --> 00:00:04,290
well hey one thanks everybody for coming

00:00:01,770 --> 00:00:05,759
out I'm super excited to be here the

00:00:04,290 --> 00:00:10,889
greatest thing here is last year I was

00:00:05,759 --> 00:00:12,269
sitting in your seat and so a year ago I

00:00:10,889 --> 00:00:14,160
decided you know what I'm gonna I guess

00:00:12,269 --> 00:00:17,070
see what I can do to come out to ng-conf

00:00:14,160 --> 00:00:19,770
and speak and I worked my tail off to do

00:00:17,070 --> 00:00:21,660
so and and now today I get to speak

00:00:19,770 --> 00:00:23,910
actually three times here so it's a huge

00:00:21,660 --> 00:00:25,080
honor to be here and really looking

00:00:23,910 --> 00:00:27,269
forward to walking you guys through in

00:00:25,080 --> 00:00:30,779
grx complex forms otherwise known as

00:00:27,269 --> 00:00:32,940
serenity now just handle complex forms

00:00:30,779 --> 00:00:38,520
within grx otherwise known as don't cry

00:00:32,940 --> 00:00:40,290
it's gonna be okay so forms are hard we

00:00:38,520 --> 00:00:42,030
started building applications forms

00:00:40,290 --> 00:00:44,219
usually started out fairly easy you know

00:00:42,030 --> 00:00:45,629
the specs I get in aren't too bad I can

00:00:44,219 --> 00:00:48,300
go ahead and start to create a form and

00:00:45,629 --> 00:00:50,160
and you know put some validators and

00:00:48,300 --> 00:00:51,840
some conditional logic in there and then

00:00:50,160 --> 00:00:52,739
before I know it usually then we started

00:00:51,840 --> 00:00:54,300
getting a little deeper into the

00:00:52,739 --> 00:00:57,420
application and things get a lot more

00:00:54,300 --> 00:00:58,980
complex so the what comes to mind when I

00:00:57,420 --> 00:01:01,500
think of complex forms is a project I

00:00:58,980 --> 00:01:03,930
worked on a couple of years ago and that

00:01:01,500 --> 00:01:05,159
project we go to create a new form we'd

00:01:03,930 --> 00:01:07,710
actually have to ask the database what

00:01:05,159 --> 00:01:09,210
kind of form is it and then they would

00:01:07,710 --> 00:01:11,310
send us a spec down about what the form

00:01:09,210 --> 00:01:14,130
is what are all the fields and they were

00:01:11,310 --> 00:01:17,670
really named nicely so a 16 you know a

00:01:14,130 --> 00:01:19,830
52 so is all this numeric stuff and then

00:01:17,670 --> 00:01:23,250
it had the rules on went into to display

00:01:19,830 --> 00:01:25,500
things and how to validate it so really

00:01:23,250 --> 00:01:27,509
complex forms I'd love to teach you all

00:01:25,500 --> 00:01:29,700
about that but that's even going to such

00:01:27,509 --> 00:01:32,009
an extreme to take a really a workshop

00:01:29,700 --> 00:01:33,119
to to get you guys through that so today

00:01:32,009 --> 00:01:35,939
what I want to do is talk to you about

00:01:33,119 --> 00:01:38,189
how we simplify forms how do we make our

00:01:35,939 --> 00:01:41,729
lives easy so it really starts with in

00:01:38,189 --> 00:01:44,040
grx ng R X is about simplifying our

00:01:41,729 --> 00:01:46,979
lives and getting ourselves to a level

00:01:44,040 --> 00:01:49,439
of serenity making things easy and

00:01:46,979 --> 00:01:51,689
repeatable having a dependable way of

00:01:49,439 --> 00:01:54,210
handling logic because the alternative

00:01:51,689 --> 00:01:55,890
is this and a lot of us do this is we'll

00:01:54,210 --> 00:01:58,079
create some sort of service usually I

00:01:55,890 --> 00:02:00,329
call mine session service and it starts

00:01:58,079 --> 00:02:02,310
out fairly innocent it's got oh maybe 50

00:02:00,329 --> 00:02:04,409
lines of code in it and then a year

00:02:02,310 --> 00:02:05,969
later it's got over 600 lines and that

00:02:04,409 --> 00:02:09,750
is the one module it has this header and

00:02:05,969 --> 00:02:11,459
it says do not touch right because when

00:02:09,750 --> 00:02:12,780
I touch this everything breaks in

00:02:11,459 --> 00:02:13,510
production when it goes up and it's

00:02:12,780 --> 00:02:16,540
really hard to find

00:02:13,510 --> 00:02:18,129
and lots of problems so ng Rx is all

00:02:16,540 --> 00:02:20,049
about creating some serenity our lives

00:02:18,129 --> 00:02:22,840
creating a dependable way on how we're

00:02:20,049 --> 00:02:24,400
gonna do things the other thing that I'm

00:02:22,840 --> 00:02:26,890
gonna hammer on you guys today is

00:02:24,400 --> 00:02:28,510
container presentation who's doing

00:02:26,890 --> 00:02:29,620
container presentation now otherwise

00:02:28,510 --> 00:02:32,799
known as smart components dumb

00:02:29,620 --> 00:02:35,319
components okay so a pretty good number

00:02:32,799 --> 00:02:36,910
of you so this is a base concept that I

00:02:35,319 --> 00:02:38,140
really want you to take home and start

00:02:36,910 --> 00:02:40,900
using whether or not you start

00:02:38,140 --> 00:02:42,400
implementing ng rx right now container

00:02:40,900 --> 00:02:44,680
presentations going to change how you

00:02:42,400 --> 00:02:47,560
develop your applications and is going

00:02:44,680 --> 00:02:49,299
to help you maximize the reusability so

00:02:47,560 --> 00:02:51,340
we look up here we've got a container we

00:02:49,299 --> 00:02:54,190
got a presentation the container is

00:02:51,340 --> 00:02:56,410
responsible for how things work that's

00:02:54,190 --> 00:02:58,470
its primary concern it's the one that's

00:02:56,410 --> 00:03:00,849
going to render interact with the store

00:02:58,470 --> 00:03:04,239
it's gonna dispatch events and it's

00:03:00,849 --> 00:03:06,489
going to get selectors to get the data

00:03:04,239 --> 00:03:08,980
back out it's gonna then store those in

00:03:06,489 --> 00:03:10,510
observable variables and then it's going

00:03:08,980 --> 00:03:12,760
to handle any sort of events that are

00:03:10,510 --> 00:03:16,540
being bubbled back up the presentation

00:03:12,760 --> 00:03:19,030
component is responsible for presenting

00:03:16,540 --> 00:03:21,280
the data how do things look but it

00:03:19,030 --> 00:03:22,599
actually doesn't know anything so if you

00:03:21,280 --> 00:03:24,730
look here the difference on its input

00:03:22,599 --> 00:03:26,260
here it's getting just plain old data so

00:03:24,730 --> 00:03:27,940
it's not dealing with observables it

00:03:26,260 --> 00:03:30,730
doesn't understand what an observable is

00:03:27,940 --> 00:03:32,079
and then any sort of click events where

00:03:30,730 --> 00:03:34,120
they click on a product they click on a

00:03:32,079 --> 00:03:35,769
customer I want to save something you

00:03:34,120 --> 00:03:36,970
know whatever it is the presentation

00:03:35,769 --> 00:03:38,470
component says hey I don't really know

00:03:36,970 --> 00:03:39,790
what I wanted what you want to do here

00:03:38,470 --> 00:03:42,970
but I'm going to go ahead and admit

00:03:39,790 --> 00:03:45,880
event out and allow the container to

00:03:42,970 --> 00:03:47,709
decide how it's going to be handled by

00:03:45,880 --> 00:03:49,930
doing this what happens is that we

00:03:47,709 --> 00:03:52,389
maximize the reels reusability of this

00:03:49,930 --> 00:03:55,030
component this presentation component I

00:03:52,389 --> 00:03:58,269
can send it any sort of data and in

00:03:55,030 --> 00:04:00,340
depending on what container it's wired

00:03:58,269 --> 00:04:02,879
up with it can respond differently from

00:04:00,340 --> 00:04:04,870
page to page to page how many of us have

00:04:02,879 --> 00:04:06,519
components where we pull in this

00:04:04,870 --> 00:04:09,160
beautiful session service or some other

00:04:06,519 --> 00:04:11,440
service we say hey if this variable is

00:04:09,160 --> 00:04:12,970
set this way then have it respond like

00:04:11,440 --> 00:04:15,879
this although eyes have it respond like

00:04:12,970 --> 00:04:17,829
that or save it like this and we end up

00:04:15,879 --> 00:04:19,359
creating this this huge mess so imagine

00:04:17,829 --> 00:04:22,090
if we could create container components

00:04:19,359 --> 00:04:24,099
that would help encapsulate this and to

00:04:22,090 --> 00:04:25,960
help abstract this out so we could reuse

00:04:24,099 --> 00:04:27,150
these presentation components over and

00:04:25,960 --> 00:04:29,349
over and over

00:04:27,150 --> 00:04:32,199
the other concept I want to talk to you

00:04:29,349 --> 00:04:33,969
about is ng rx entity so this is part of

00:04:32,199 --> 00:04:36,759
the ng rx library it was released this

00:04:33,969 --> 00:04:39,009
past October and I spoke on this at

00:04:36,759 --> 00:04:39,669
angular and at a conference back in

00:04:39,009 --> 00:04:44,199
October

00:04:39,669 --> 00:04:47,560
so the idea to ng rx entity is that and

00:04:44,199 --> 00:04:49,360
this really comes from the Redux spec is

00:04:47,560 --> 00:04:51,849
how to normalize data how do we deal

00:04:49,360 --> 00:04:54,550
with complicated data and relational

00:04:51,849 --> 00:04:57,370
data so one of the tempting things to do

00:04:54,550 --> 00:04:59,099
is start to merge those together and

00:04:57,370 --> 00:05:01,870
nest that data we do not want to do that

00:04:59,099 --> 00:05:03,969
so instead the idea is that our data

00:05:01,870 --> 00:05:06,219
comes usually to us that's not gonna

00:05:03,969 --> 00:05:08,229
know no laser pointer so the top one

00:05:06,219 --> 00:05:10,300
there with the ID name foods we've got a

00:05:08,229 --> 00:05:12,849
ray based data right that's how it's

00:05:10,300 --> 00:05:14,169
coming from our api's that's typically

00:05:12,849 --> 00:05:15,759
we're making a call I'm getting some

00:05:14,169 --> 00:05:17,860
data and that's typically what we're

00:05:15,759 --> 00:05:19,419
working with but the problem with this

00:05:17,860 --> 00:05:21,909
is when we're dealing with a relational

00:05:19,419 --> 00:05:25,210
data it's very difficult then to find

00:05:21,909 --> 00:05:27,879
the customer with an ID of 12 I mean I

00:05:25,210 --> 00:05:29,439
can I can you know I can I can iterate

00:05:27,879 --> 00:05:32,020
over and I can find it and that's great

00:05:29,439 --> 00:05:33,190
and that works great for one but what if

00:05:32,020 --> 00:05:35,129
I have a thousand records I need to

00:05:33,190 --> 00:05:39,039
match up now I have a performance issue

00:05:35,129 --> 00:05:41,560
so the spec on normalizing data is to

00:05:39,039 --> 00:05:43,900
actually store it in a dictionary so the

00:05:41,560 --> 00:05:47,469
ng rx entity library makes it really

00:05:43,900 --> 00:05:49,810
easy for us to create entities that are

00:05:47,469 --> 00:05:52,479
stored as dictionaries so my ID is my

00:05:49,810 --> 00:05:55,150
key and my value is my object now if I

00:05:52,479 --> 00:05:57,339
want a customer with an ID of 12 I just

00:05:55,150 --> 00:05:59,469
say customers square bracket 12 I've got

00:05:57,339 --> 00:06:01,509
my customer makes it very easy to go

00:05:59,469 --> 00:06:05,589
ahead and start joining this relational

00:06:01,509 --> 00:06:08,710
database or data backup so you can see

00:06:05,589 --> 00:06:10,330
their customer customers whatnot alright

00:06:08,710 --> 00:06:12,279
so today we're going to talk about some

00:06:10,330 --> 00:06:14,319
relational data and I want to give you

00:06:12,279 --> 00:06:16,060
an example that you we'd all be able to

00:06:14,319 --> 00:06:18,520
relate to something really simple so an

00:06:16,060 --> 00:06:21,009
order an order has a customer that can

00:06:18,520 --> 00:06:23,500
be associated to it and then an order

00:06:21,009 --> 00:06:26,050
has line items and each line item then

00:06:23,500 --> 00:06:28,960
has a product and the Alaia night has a

00:06:26,050 --> 00:06:30,759
quantity the product has a price so

00:06:28,960 --> 00:06:33,039
pretty simple example I think most of us

00:06:30,759 --> 00:06:36,880
have seen an order at some point in some

00:06:33,039 --> 00:06:38,500
some old database I remember was the the

00:06:36,880 --> 00:06:40,350
old Microsoft Access database that

00:06:38,500 --> 00:06:45,540
always had orders in it you know

00:06:40,350 --> 00:06:47,759
for all that the sample data so nested

00:06:45,540 --> 00:06:49,440
data that the the really tempting thing

00:06:47,759 --> 00:06:50,850
to do here is to start to say well you

00:06:49,440 --> 00:06:52,229
know I've got a customer why don't I

00:06:50,850 --> 00:06:54,990
just go ahead and embed that into my

00:06:52,229 --> 00:06:56,669
order and I'll go ahead and bed my line

00:06:54,990 --> 00:06:59,490
items in and in the products and whatnot

00:06:56,669 --> 00:07:01,169
so this is a very dangerous pattern to

00:06:59,490 --> 00:07:03,060
follow because what happens when I go

00:07:01,169 --> 00:07:04,350
ahead and update the product I have to

00:07:03,060 --> 00:07:06,720
find all the different places that I've

00:07:04,350 --> 00:07:09,120
inserted product and attached it to

00:07:06,720 --> 00:07:11,340
something else so now I no longer have

00:07:09,120 --> 00:07:13,380
one line reducers I have these really

00:07:11,340 --> 00:07:14,940
complicated reducers that are 50 lines

00:07:13,380 --> 00:07:16,979
of code they're very difficult to test

00:07:14,940 --> 00:07:18,620
and the one thing that may not jump out

00:07:16,979 --> 00:07:20,940
to you that's going to be an issue is

00:07:18,620 --> 00:07:23,190
because of the component architecture

00:07:20,940 --> 00:07:27,780
and because these this data is immutable

00:07:23,190 --> 00:07:29,250
if I go to update the product price what

00:07:27,780 --> 00:07:32,039
happens is it's going to force every

00:07:29,250 --> 00:07:34,880
component above it all the way up to

00:07:32,039 --> 00:07:37,050
order to re-render because I'm gonna be

00:07:34,880 --> 00:07:38,789
replacing the existing state with a new

00:07:37,050 --> 00:07:40,349
state and that's going to force it to

00:07:38,789 --> 00:07:43,710
re-render so that's a really bad thing

00:07:40,349 --> 00:07:46,830
that we want to avoid so again don't do

00:07:43,710 --> 00:07:48,210
this bad thing we wanted what we really

00:07:46,830 --> 00:07:50,760
want to do is we want to take our orders

00:07:48,210 --> 00:07:52,020
customers products and line items and

00:07:50,760 --> 00:07:54,990
move those all up to be first-class

00:07:52,020 --> 00:07:56,940
citizens within our store that way we

00:07:54,990 --> 00:07:59,010
can use our entity library to be able to

00:07:56,940 --> 00:08:05,940
select and move stuff around you know

00:07:59,010 --> 00:08:07,949
match it up alright so viewing complex

00:08:05,940 --> 00:08:10,110
data so let's talk about a really simple

00:08:07,949 --> 00:08:11,760
example here I want to be able to

00:08:10,110 --> 00:08:14,250
display a list of orders with the

00:08:11,760 --> 00:08:16,349
customer information and in a total this

00:08:14,250 --> 00:08:17,699
isn't too bad right so with the first

00:08:16,349 --> 00:08:19,530
pass at this it's like okay this is

00:08:17,699 --> 00:08:22,139
gonna be easy I'm gonna enumerate over

00:08:19,530 --> 00:08:24,780
the orders I'm gonna select the customer

00:08:22,139 --> 00:08:26,849
and in the the line item and select the

00:08:24,780 --> 00:08:28,460
product and I'm gonna do my calculations

00:08:26,849 --> 00:08:30,150
and everything's going to be great right

00:08:28,460 --> 00:08:34,349
not so much

00:08:30,150 --> 00:08:35,550
so selectors don't take parameters so

00:08:34,349 --> 00:08:37,589
I'm not able to just make a simple

00:08:35,550 --> 00:08:39,750
enumeration over it then try to do this

00:08:37,589 --> 00:08:41,219
in the HTML and bring this together also

00:08:39,750 --> 00:08:42,599
the other thing is starting to come up

00:08:41,219 --> 00:08:44,580
is like oh no like I've got four

00:08:42,599 --> 00:08:46,050
different streams of data coming in and

00:08:44,580 --> 00:08:47,880
now I I need to figure out how I'm gonna

00:08:46,050 --> 00:08:50,310
get those all back together so I can

00:08:47,880 --> 00:08:52,260
start to these do these calculations so

00:08:50,310 --> 00:08:53,170
the first thing that we did on our

00:08:52,260 --> 00:08:54,820
second pass is

00:08:53,170 --> 00:08:56,170
right let's use combined latest this

00:08:54,820 --> 00:08:58,750
will allow us to bring these four

00:08:56,170 --> 00:09:02,560
streams together and will enumerate over

00:08:58,750 --> 00:09:04,839
it we created a new order view class or

00:09:02,560 --> 00:09:06,519
interface if you will and it has a

00:09:04,839 --> 00:09:08,860
customer on it so I can attach a

00:09:06,519 --> 00:09:10,089
customer and it has a line items array I

00:09:08,860 --> 00:09:13,899
could go ahead and put those in there

00:09:10,089 --> 00:09:17,350
and I could then attach the the products

00:09:13,899 --> 00:09:18,790
to the line items fantastic right except

00:09:17,350 --> 00:09:20,709
for now what I had is I had a container

00:09:18,790 --> 00:09:22,120
that has all this logic enumerated over

00:09:20,709 --> 00:09:23,800
it and then I have a presentation

00:09:22,120 --> 00:09:26,199
component that has to enumerate over it

00:09:23,800 --> 00:09:29,260
and so I'm really duplicating this this

00:09:26,199 --> 00:09:31,660
calculation logic twice so what we

00:09:29,260 --> 00:09:33,519
settled on is we do want to get it down

00:09:31,660 --> 00:09:35,350
to a single stream use our combined

00:09:33,519 --> 00:09:38,889
stream we want to do our calculations

00:09:35,350 --> 00:09:40,060
right at that moment so now we're going

00:09:38,889 --> 00:09:41,800
to go ahead and just create a very

00:09:40,060 --> 00:09:43,899
simple order view model that has the

00:09:41,800 --> 00:09:46,570
three fields that I want an order ID a

00:09:43,899 --> 00:09:48,100
customer in a total and as I'm looping

00:09:46,570 --> 00:09:50,350
over these and finding them which is our

00:09:48,100 --> 00:09:52,990
I was already doing before I can then go

00:09:50,350 --> 00:09:54,730
ahead and do those calculations attach

00:09:52,990 --> 00:09:56,860
it directly and then pass it down to my

00:09:54,730 --> 00:10:00,790
presentation component and it can

00:09:56,860 --> 00:10:02,290
immediately render it nice and simple so

00:10:00,790 --> 00:10:05,170
we have serenity right everything's

00:10:02,290 --> 00:10:07,620
great everything's grand but the problem

00:10:05,170 --> 00:10:10,600
with that is that that's really not life

00:10:07,620 --> 00:10:13,360
we do display data but the harder part

00:10:10,600 --> 00:10:14,890
here is how do I actually edit data so

00:10:13,360 --> 00:10:16,390
let's talk about form basics this is a

00:10:14,890 --> 00:10:18,820
core concept that I want you to

00:10:16,390 --> 00:10:20,410
understand so we talked about our

00:10:18,820 --> 00:10:22,600
container it's going to pass our data

00:10:20,410 --> 00:10:25,480
down through an input down to our

00:10:22,600 --> 00:10:26,890
presentation component our presentation

00:10:25,480 --> 00:10:30,220
component is going to create a form

00:10:26,890 --> 00:10:31,839
group and now that form group when we

00:10:30,220 --> 00:10:34,300
receive the values down we're going to

00:10:31,839 --> 00:10:36,699
patch the values of our customer our

00:10:34,300 --> 00:10:39,130
product our order into the form group

00:10:36,699 --> 00:10:41,560
and that's going to that's going to

00:10:39,130 --> 00:10:43,810
populate our form and then when any sort

00:10:41,560 --> 00:10:47,380
of value changes we want to output those

00:10:43,810 --> 00:10:48,819
back up and emit an event and in most

00:10:47,380 --> 00:10:51,760
cases what we want to do is we want to

00:10:48,819 --> 00:10:53,050
store it in a local variable so we're

00:10:51,760 --> 00:10:54,880
gonna have two variables on our

00:10:53,050 --> 00:10:56,680
container one it's going to be the

00:10:54,880 --> 00:10:57,819
observable for my type so let's say

00:10:56,680 --> 00:11:00,699
we're dealing with the orders so I'm

00:10:57,819 --> 00:11:03,160
gonna have an observable order and then

00:11:00,699 --> 00:11:04,690
I'm gonna have a just a regular plain

00:11:03,160 --> 00:11:05,949
old order and that's going to be my

00:11:04,690 --> 00:11:07,150
local variable that's what I'm gonna

00:11:05,949 --> 00:11:08,320
hold changes in

00:11:07,150 --> 00:11:09,790
you may decide to do it slightly

00:11:08,320 --> 00:11:11,380
different you might want to update the

00:11:09,790 --> 00:11:14,050
store right away with that data and you

00:11:11,380 --> 00:11:16,270
have that option but by doing it this

00:11:14,050 --> 00:11:17,680
way when I click Save then I can go

00:11:16,270 --> 00:11:19,840
ahead and update the store I can go save

00:11:17,680 --> 00:11:21,310
my data versus if they hit cancel now I

00:11:19,840 --> 00:11:22,420
have a store that's already updated with

00:11:21,310 --> 00:11:26,490
a whole bunch of data that I got to

00:11:22,420 --> 00:11:28,690
figure out how to how to roll it back so

00:11:26,490 --> 00:11:30,640
just want you to understand the basics

00:11:28,690 --> 00:11:31,990
here about inputs and outputs and making

00:11:30,640 --> 00:11:34,150
sure that you're how you're wiring this

00:11:31,990 --> 00:11:36,070
stuff up so let's take a look at a

00:11:34,150 --> 00:11:38,320
product form this is a really simple

00:11:36,070 --> 00:11:41,140
example we have two fields here we have

00:11:38,320 --> 00:11:44,650
a product name and a product price so

00:11:41,140 --> 00:11:46,270
nothing too complicated now on this on

00:11:44,650 --> 00:11:48,400
the Container knit what we talked about

00:11:46,270 --> 00:11:51,010
what containers responsibilities are the

00:11:48,400 --> 00:11:52,930
container is responsible for loading

00:11:51,010 --> 00:11:55,030
data dispatching you know to the store

00:11:52,930 --> 00:11:58,060
and then doing selectors to grab that

00:11:55,030 --> 00:11:59,920
data so honor an it here we're gonna go

00:11:58,060 --> 00:12:03,070
ahead and dispatch our load product and

00:11:59,920 --> 00:12:05,710
we're going to be giving it our customer

00:12:03,070 --> 00:12:08,620
ID so we may give it an ID we may not we

00:12:05,710 --> 00:12:11,830
may be loading actually that should be a

00:12:08,620 --> 00:12:13,330
product ID that's a little typo so we'd

00:12:11,830 --> 00:12:15,490
be giving it the product ID there and

00:12:13,330 --> 00:12:18,100
then we're gonna have our product dollar

00:12:15,490 --> 00:12:19,930
sign I like to go ahead and suffix all

00:12:18,100 --> 00:12:21,520
of my observables with a dollar sign so

00:12:19,930 --> 00:12:23,770
I can keep track between the

00:12:21,520 --> 00:12:25,780
non-observable versus the plain object

00:12:23,770 --> 00:12:27,250
and I'm gonna use store pipe to go ahead

00:12:25,780 --> 00:12:29,410
and select from my store and get my

00:12:27,250 --> 00:12:31,870
selected product so now I have my data

00:12:29,410 --> 00:12:33,610
at my container level the other thing I

00:12:31,870 --> 00:12:36,310
need to do with my container is I need

00:12:33,610 --> 00:12:39,400
to watch for changes so on my product

00:12:36,310 --> 00:12:41,590
change when that events being emitted

00:12:39,400 --> 00:12:43,030
from my presentation component I want to

00:12:41,590 --> 00:12:44,800
go ahead and get that product and I want

00:12:43,030 --> 00:12:47,590
to set it to my local variable again so

00:12:44,800 --> 00:12:49,870
it's not it's not suffix there with the

00:12:47,590 --> 00:12:52,690
dollar sign my cursor over the middle of

00:12:49,870 --> 00:12:53,890
that so I'm setting my local variable

00:12:52,690 --> 00:12:55,270
with that product that's been emitted

00:12:53,890 --> 00:12:58,780
back up so that's how I'm getting my

00:12:55,270 --> 00:13:00,520
changes then the presentation component

00:12:58,780 --> 00:13:02,230
we take a look at it's really simple

00:13:00,520 --> 00:13:05,230
here we have a couple basic things that

00:13:02,230 --> 00:13:07,120
we need to do obviously it's got HTML

00:13:05,230 --> 00:13:09,370
and its main job here is to render this

00:13:07,120 --> 00:13:11,440
HTML and render out the product and make

00:13:09,370 --> 00:13:12,820
it you know look visually nice and then

00:13:11,440 --> 00:13:15,010
handle those events and pass them back

00:13:12,820 --> 00:13:17,710
up so you can see here I have an input

00:13:15,010 --> 00:13:19,720
and I've got my product coming in and I

00:13:17,710 --> 00:13:20,320
have an output for product change I'm

00:13:19,720 --> 00:13:22,360
going to go ahead and

00:13:20,320 --> 00:13:23,980
vent have an event matter of type

00:13:22,360 --> 00:13:26,530
product and now that's how I'm gonna get

00:13:23,980 --> 00:13:28,240
the product changes back up I'm gonna

00:13:26,530 --> 00:13:31,720
create a private local variable called

00:13:28,240 --> 00:13:34,210
alive so I can kill my subscription to

00:13:31,720 --> 00:13:35,500
my observable we'll see here in a second

00:13:34,210 --> 00:13:36,820
and the first thing I do on my

00:13:35,500 --> 00:13:40,810
constructor is I'm gonna go ahead and

00:13:36,820 --> 00:13:42,460
build a form so there's really two parts

00:13:40,810 --> 00:13:44,110
to building the form the first part here

00:13:42,460 --> 00:13:47,020
is pretty standard I'm gonna use my form

00:13:44,110 --> 00:13:48,850
builder and I'm gonna create a group and

00:13:47,020 --> 00:13:50,830
I'm gonna create two different

00:13:48,850 --> 00:13:53,530
properties one name one price both with

00:13:50,830 --> 00:13:55,750
a required validator and then one with a

00:13:53,530 --> 00:13:58,090
validate currency validator so pretty

00:13:55,750 --> 00:14:00,010
simple the second part is the part

00:13:58,090 --> 00:14:01,840
that's a little different so here's

00:14:00,010 --> 00:14:04,480
where I want to capture changes that the

00:14:01,840 --> 00:14:06,550
user is making and I want to capture

00:14:04,480 --> 00:14:08,440
every change but I want to capture

00:14:06,550 --> 00:14:10,720
changes and get those sent back up to

00:14:08,440 --> 00:14:12,910
the parents so when they hit save I can

00:14:10,720 --> 00:14:15,580
do something with that so I'm gonna use

00:14:12,910 --> 00:14:19,000
value changes so when the value changes

00:14:15,580 --> 00:14:20,980
I'm gonna take values while we're still

00:14:19,000 --> 00:14:23,260
alive so when we when we actually

00:14:20,980 --> 00:14:26,140
deconstruct this component an destroy it

00:14:23,260 --> 00:14:27,580
alive is gonna get set to false and and

00:14:26,140 --> 00:14:29,500
that'll go ahead and kill the

00:14:27,580 --> 00:14:31,300
subscription we're gonna skip the first

00:14:29,500 --> 00:14:32,920
one and we're gonna debounce on 500

00:14:31,300 --> 00:14:34,210
milliseconds so I don't want to get

00:14:32,920 --> 00:14:35,620
every keystroke that the user is doing

00:14:34,210 --> 00:14:36,400
but I do want to get it once the user

00:14:35,620 --> 00:14:39,970
stop typing

00:14:36,400 --> 00:14:43,120
and if from there it's really this is

00:14:39,970 --> 00:14:45,010
kind of a how how you want to handle it

00:14:43,120 --> 00:14:47,110
but in my case here for this example I

00:14:45,010 --> 00:14:49,000
basically want to say hey if the group's

00:14:47,110 --> 00:14:50,710
valid then we'll go ahead and admit a

00:14:49,000 --> 00:14:52,090
value otherwise just throw it away don't

00:14:50,710 --> 00:14:54,220
don't worry about it we're just gonna

00:14:52,090 --> 00:14:56,020
keep those values local your

00:14:54,220 --> 00:14:57,580
prescription on how you may want to do

00:14:56,020 --> 00:14:59,230
this might look differently you have a

00:14:57,580 --> 00:15:04,270
lot of options here on when you send

00:14:59,230 --> 00:15:08,710
that data up so the other important

00:15:04,270 --> 00:15:10,840
piece here is on ng change ng on changes

00:15:08,710 --> 00:15:13,810
so this happens when the input that

00:15:10,840 --> 00:15:15,310
we're passing down changes so when we

00:15:13,810 --> 00:15:18,720
create the form group if you notice back

00:15:15,310 --> 00:15:21,490
here our defy our default values our

00:15:18,720 --> 00:15:22,750
length they're just blank strings so

00:15:21,490 --> 00:15:25,090
that we're not creating it with any

00:15:22,750 --> 00:15:26,970
values so when the data actually does

00:15:25,090 --> 00:15:28,930
come in and we have loaded the product

00:15:26,970 --> 00:15:30,820
now it's going to go ahead and patch

00:15:28,930 --> 00:15:32,110
those values on to the form so we're

00:15:30,820 --> 00:15:33,680
gonna watch for the changes we're gonna

00:15:32,110 --> 00:15:35,990
make sure that changes include product

00:15:33,680 --> 00:15:37,130
that it has a current value and if that

00:15:35,990 --> 00:15:40,250
is the case then we're gonna go ahead

00:15:37,130 --> 00:15:41,420
and patch those values directly on to

00:15:40,250 --> 00:15:44,630
the forum group and our forms going to

00:15:41,420 --> 00:15:46,970
be populated so again going back to

00:15:44,630 --> 00:15:48,770
forum basics what I just showed you

00:15:46,970 --> 00:15:52,070
there is the containers gonna dispatch

00:15:48,770 --> 00:15:54,140
to go do the load it's gonna select the

00:15:52,070 --> 00:15:56,480
data and it's going to pass it down to

00:15:54,140 --> 00:15:58,910
the presentation component via its input

00:15:56,480 --> 00:16:02,750
the presentation components gonna create

00:15:58,910 --> 00:16:03,950
a form group on changes of that input

00:16:02,750 --> 00:16:05,930
coming down it's going to go ahead and

00:16:03,950 --> 00:16:08,089
patch those values on to the form group

00:16:05,930 --> 00:16:09,440
and then when any sort of value changes

00:16:08,089 --> 00:16:11,180
we're gonna watch value changes on the

00:16:09,440 --> 00:16:13,160
form and when those happen and we're

00:16:11,180 --> 00:16:15,529
valid we're gonna output those through

00:16:13,160 --> 00:16:20,180
an emit event and set our local variable

00:16:15,529 --> 00:16:22,070
this was very simple pattern and this

00:16:20,180 --> 00:16:24,920
really is serenity this is as easy as it

00:16:22,070 --> 00:16:27,980
gets for a very simple form it's not a

00:16:24,920 --> 00:16:30,920
whole lot of magic here so this is great

00:16:27,980 --> 00:16:32,570
but this isn't a complex form but what I

00:16:30,920 --> 00:16:34,970
want you to understand in the form basic

00:16:32,570 --> 00:16:36,860
so that when you go to to wire this into

00:16:34,970 --> 00:16:39,800
a more complex form you understand how

00:16:36,860 --> 00:16:42,400
you might do this so this looks more

00:16:39,800 --> 00:16:44,779
like what complex forms are like a

00:16:42,400 --> 00:16:46,339
little more crazy usually we've got

00:16:44,779 --> 00:16:47,540
nested data and this is where we're

00:16:46,339 --> 00:16:49,910
gonna come back and look at our order

00:16:47,540 --> 00:16:53,630
form so our order form here has a

00:16:49,910 --> 00:16:55,550
customer it has line items and in each

00:16:53,630 --> 00:16:58,160
line item has a product that I can set

00:16:55,550 --> 00:17:04,579
and I've got a value on that so if we

00:16:58,160 --> 00:17:10,209
come over here really quick you can go

00:17:04,579 --> 00:17:14,420
ahead and see here's our form I can edit

00:17:10,209 --> 00:17:16,880
and I can change my product to whatever

00:17:14,420 --> 00:17:18,199
I want I can set my quantity I can go

00:17:16,880 --> 00:17:20,929
ahead and change that it updates my

00:17:18,199 --> 00:17:21,800
price and it updates my subtotal so I

00:17:20,929 --> 00:17:26,480
have a whole bunch of different

00:17:21,800 --> 00:17:28,610
components here I've got my order

00:17:26,480 --> 00:17:31,309
summary I've got my line items I have a

00:17:28,610 --> 00:17:32,450
list of products I've got my customer

00:17:31,309 --> 00:17:38,690
which is an autocomplete

00:17:32,450 --> 00:17:39,800
I can change this to Homer Simpson so

00:17:38,690 --> 00:17:42,910
I've got a lot of things going on here

00:17:39,800 --> 00:17:42,910
multiple levels

00:17:44,750 --> 00:17:51,030
let's switch back over to slides here we

00:17:48,150 --> 00:17:53,100
go so now what how do I handle this

00:17:51,030 --> 00:17:55,140
because now I got to deal with you know

00:17:53,100 --> 00:17:58,830
four different data sources and getting

00:17:55,140 --> 00:17:59,760
those passed in so the should we'll come

00:17:58,830 --> 00:18:01,740
back to this so the first thing we're

00:17:59,760 --> 00:18:03,300
gonna do is on our order container we're

00:18:01,740 --> 00:18:04,380
gonna go ahead and dispatch events we're

00:18:03,300 --> 00:18:06,060
gonna go out we're going to load our

00:18:04,380 --> 00:18:09,240
order we're gonna get a list of

00:18:06,060 --> 00:18:10,950
customers and we're gonna then go select

00:18:09,240 --> 00:18:11,850
the one customer that's already attached

00:18:10,950 --> 00:18:14,100
to this order

00:18:11,850 --> 00:18:16,350
we're gonna go load load our line items

00:18:14,100 --> 00:18:17,670
by the order ID and we're also going to

00:18:16,350 --> 00:18:21,300
get a list of products so we can bind

00:18:17,670 --> 00:18:23,520
those to our selects and we're gonna

00:18:21,300 --> 00:18:28,770
pass all of those down via inputs down

00:18:23,520 --> 00:18:30,870
to our presentation component so coming

00:18:28,770 --> 00:18:35,220
back over here then I'm gonna go ahead

00:18:30,870 --> 00:18:37,230
and create a form group for this form

00:18:35,220 --> 00:18:39,450
but it's really going to only have a

00:18:37,230 --> 00:18:41,490
couple of properties on it one is for

00:18:39,450 --> 00:18:43,290
the customer so the customer is required

00:18:41,490 --> 00:18:44,670
and in one four line items because line

00:18:43,290 --> 00:18:46,710
items are required I have to have at

00:18:44,670 --> 00:18:50,520
least one line item for this to be valid

00:18:46,710 --> 00:18:51,900
so just out of curiosity this is saying

00:18:50,520 --> 00:18:56,070
I'm done in a minute this is supposed to

00:18:51,900 --> 00:18:57,660
be an hour long talk rate okay so I'm

00:18:56,070 --> 00:18:59,970
not sure what's gonna happen there when

00:18:57,660 --> 00:19:02,570
all right he's gonna shock me you said

00:18:59,970 --> 00:19:07,860
though okay perfect excellent

00:19:02,570 --> 00:19:09,510
so all right here with this so we've got

00:19:07,860 --> 00:19:10,770
our order form we're gonna create our

00:19:09,510 --> 00:19:12,630
form group for that and then we're gonna

00:19:10,770 --> 00:19:14,400
create a form group for each one of the

00:19:12,630 --> 00:19:16,440
line items who's ever done a form Group

00:19:14,400 --> 00:19:18,270
array type anyone do work with those

00:19:16,440 --> 00:19:21,090
fantastic so it's a little more

00:19:18,270 --> 00:19:23,190
complicated so each one of these lines

00:19:21,090 --> 00:19:25,350
here is its own form group and then

00:19:23,190 --> 00:19:28,440
those are getting put into an array of

00:19:25,350 --> 00:19:30,210
form groups and in that way each one of

00:19:28,440 --> 00:19:31,890
those can be validated individually and

00:19:30,210 --> 00:19:34,290
then we can add validators to that and

00:19:31,890 --> 00:19:36,450
and assign it directly to that that line

00:19:34,290 --> 00:19:37,740
item so a little bit more complicated so

00:19:36,450 --> 00:19:40,830
let's take a look at how we implemented

00:19:37,740 --> 00:19:45,000
this first thing we did is we go ahead

00:19:40,830 --> 00:19:48,240
and build our form and like I said we're

00:19:45,000 --> 00:19:49,710
doing a form builder array and then

00:19:48,240 --> 00:19:51,810
we're gonna watch for changes on that

00:19:49,710 --> 00:19:53,460
and again we're going to debounce on

00:19:51,810 --> 00:19:56,130
five hundred and if the form groups

00:19:53,460 --> 00:19:57,960
valid if it's not valid then we're going

00:19:56,130 --> 00:19:58,179
to return otherwise we're gonna admit

00:19:57,960 --> 00:20:02,919
the

00:19:58,179 --> 00:20:05,019
you back out gets a little bit more

00:20:02,919 --> 00:20:07,840
complicated on the line items build form

00:20:05,019 --> 00:20:09,369
group so here what we're doing is we're

00:20:07,840 --> 00:20:10,779
looping over the line items and then

00:20:09,369 --> 00:20:12,100
we're adding a line item group and

00:20:10,779 --> 00:20:13,450
they're really the bottom function

00:20:12,100 --> 00:20:15,519
there's the one that's creating each one

00:20:13,450 --> 00:20:17,740
of the form groups and those get added

00:20:15,519 --> 00:20:21,580
and pushed on to the line items form

00:20:17,740 --> 00:20:23,259
array so we've got our product ID which

00:20:21,580 --> 00:20:28,210
is required we've got our quantity which

00:20:23,259 --> 00:20:29,799
is required and so we can build that one

00:20:28,210 --> 00:20:33,220
of the other foundation concepts here is

00:20:29,799 --> 00:20:34,539
cloning is good so usually we don't want

00:20:33,220 --> 00:20:35,740
to do a whole lot of cloning but when

00:20:34,539 --> 00:20:37,570
we're building forms like this and

00:20:35,740 --> 00:20:39,100
especially complex forms the state is

00:20:37,570 --> 00:20:40,960
coming directly out of the store and if

00:20:39,100 --> 00:20:43,539
we allow the user to go ahead and change

00:20:40,960 --> 00:20:45,639
it we're mutating our data so we know we

00:20:43,539 --> 00:20:46,869
now have a problem so often what we're

00:20:45,639 --> 00:20:49,330
doing is when we're doing our selectors

00:20:46,869 --> 00:20:51,700
we're going to go ahead and subscribe to

00:20:49,330 --> 00:20:54,009
that and then clone the data so that

00:20:51,700 --> 00:20:58,480
we're not actually having the user edit

00:20:54,009 --> 00:20:59,919
the real version of it so why is this a

00:20:58,480 --> 00:21:01,029
big deal why should you even be

00:20:59,919 --> 00:21:02,259
concerned with this we're gonna look at

00:21:01,029 --> 00:21:04,330
some code here in just a second and

00:21:02,259 --> 00:21:07,450
start digging into the actual code for

00:21:04,330 --> 00:21:09,519
this but what's what's the big deal so

00:21:07,450 --> 00:21:11,590
the big deal here is that by doing it

00:21:09,519 --> 00:21:13,330
this way in building containers and

00:21:11,590 --> 00:21:15,129
presentation components I can really

00:21:13,330 --> 00:21:17,740
tame the complexity of what's going on

00:21:15,129 --> 00:21:21,129
with my forms I can go ahead and use my

00:21:17,740 --> 00:21:23,019
form groups to to manage my data to

00:21:21,129 --> 00:21:26,139
watch for changes and then be able to

00:21:23,019 --> 00:21:28,119
pass that back up to my container and

00:21:26,139 --> 00:21:32,070
decide how I'm gonna handle that later

00:21:28,119 --> 00:21:34,299
so if we come over here and take a look

00:21:32,070 --> 00:21:35,649
at a little bit of code here the

00:21:34,299 --> 00:21:42,070
components is that big enough can you

00:21:35,649 --> 00:21:43,809
guys see that it's one bigger there so

00:21:42,070 --> 00:21:47,769
here's our orders components and here's

00:21:43,809 --> 00:21:53,379
our orders container our container here

00:21:47,769 --> 00:21:56,679
is pretty simple basically our order

00:21:53,379 --> 00:21:58,230
form in there and then we're passing you

00:21:56,679 --> 00:22:03,429
can see we're passing the orders async

00:21:58,230 --> 00:22:05,049
customers they sink if we actually break

00:22:03,429 --> 00:22:07,299
those out a little bit more so you can

00:22:05,049 --> 00:22:09,749
see them we're passing all these down as

00:22:07,299 --> 00:22:09,749
inputs

00:22:12,299 --> 00:22:16,209
for customer customers line items and

00:22:14,799 --> 00:22:18,070
products and then I have my two

00:22:16,209 --> 00:22:20,049
different events coming back up for my

00:22:18,070 --> 00:22:23,859
changes on my order change in my line

00:22:20,049 --> 00:22:25,599
item change and then here I've got my

00:22:23,859 --> 00:22:28,089
two different buttons for either save or

00:22:25,599 --> 00:22:32,529
cancel so why hTML is pretty pretty

00:22:28,089 --> 00:22:33,669
standard during my ng in it this is

00:22:32,529 --> 00:22:37,509
where I'm going to go ahead and get my

00:22:33,669 --> 00:22:40,029
order ID off the router I'm going to go

00:22:37,509 --> 00:22:42,699
ahead and take that and dispatch a load

00:22:40,029 --> 00:22:44,859
order using that ID and then I'm gonna

00:22:42,699 --> 00:22:50,649
go ahead and select the order and I'm

00:22:44,859 --> 00:22:52,479
going to clone it from there

00:22:50,649 --> 00:22:56,109
you know I'm loading my customers I'm

00:22:52,479 --> 00:22:59,109
selecting I'm dispatching for loan light

00:22:56,109 --> 00:23:02,019
load line items and then selecting those

00:22:59,109 --> 00:23:03,519
as well so on and so forth I have my two

00:23:02,019 --> 00:23:04,569
different change events here so these

00:23:03,519 --> 00:23:06,940
are the ones that are coming back from

00:23:04,569 --> 00:23:08,949
my presentation component coming back up

00:23:06,940 --> 00:23:11,169
and I can go ahead and capture those and

00:23:08,949 --> 00:23:12,789
set those to my private variables my

00:23:11,169 --> 00:23:15,399
line items private variable and my order

00:23:12,789 --> 00:23:18,429
private variable and then on my save I

00:23:15,399 --> 00:23:21,249
can go ahead and up cert each one of the

00:23:18,429 --> 00:23:24,399
line items and then go ahead and update

00:23:21,249 --> 00:23:26,049
my order I'm gonna take all the so I in

00:23:24,399 --> 00:23:27,879
a safe here we're actually doing a very

00:23:26,049 --> 00:23:29,409
simple save so the save is actually

00:23:27,879 --> 00:23:31,449
gonna go save the line items first a

00:23:29,409 --> 00:23:33,190
separate API call and then the second

00:23:31,449 --> 00:23:35,379
call is going to take the line item IDs

00:23:33,190 --> 00:23:37,179
and then put those onto the line item

00:23:35,379 --> 00:23:41,889
IDs on the order and then go ahead and

00:23:37,179 --> 00:23:43,359
up sort the order great so not a whole

00:23:41,889 --> 00:23:45,219
lot of magic in the container it's the

00:23:43,359 --> 00:23:48,940
same exact basic principles of what we

00:23:45,219 --> 00:23:52,629
looked at with the product form very

00:23:48,940 --> 00:23:55,329
simple in terms of you know we're gonna

00:23:52,629 --> 00:23:57,369
dispatch we're going going to select and

00:23:55,329 --> 00:23:59,409
then we're going to watch for those

00:23:57,369 --> 00:24:02,159
changes and then handle those you know

00:23:59,409 --> 00:24:04,509
appropriately when the users click Save

00:24:02,159 --> 00:24:05,769
all right so on the components itself

00:24:04,509 --> 00:24:07,869
though this is where we've broken

00:24:05,769 --> 00:24:09,789
everything out and so we have a lot of

00:24:07,869 --> 00:24:13,119
components this is a fairly complex form

00:24:09,789 --> 00:24:16,029
we've got our order form here which has

00:24:13,119 --> 00:24:18,639
a customer object or customer component

00:24:16,029 --> 00:24:20,709
a line items table component and an

00:24:18,639 --> 00:24:22,089
order summary component and again we're

00:24:20,709 --> 00:24:24,250
just taking that that data that we're

00:24:22,089 --> 00:24:26,200
getting now it's already been

00:24:24,250 --> 00:24:27,700
process through the async pipes or just

00:24:26,200 --> 00:24:28,930
dealing with raw data here and we're

00:24:27,700 --> 00:24:31,060
passing it down to each one of these

00:24:28,930 --> 00:24:35,290
components so if we take a look at like

00:24:31,060 --> 00:24:39,520
the customer component it's it's just

00:24:35,290 --> 00:24:42,700
using the material design autocomplete

00:24:39,520 --> 00:24:45,130
here and then most of the code here for

00:24:42,700 --> 00:24:46,330
it is really just on the input I'm going

00:24:45,130 --> 00:24:47,830
to get an input for what the current

00:24:46,330 --> 00:24:49,960
customer is and I'm going to get an

00:24:47,830 --> 00:24:51,190
input for what all customers and we

00:24:49,960 --> 00:24:52,900
wouldn't really do this in a production

00:24:51,190 --> 00:24:54,910
app right we didn't load all customers

00:24:52,900 --> 00:24:56,530
and pass that down we would actually

00:24:54,910 --> 00:24:58,300
have it go back out to the server and

00:24:56,530 --> 00:25:00,670
and and load more data and we'd have a

00:24:58,300 --> 00:25:03,550
dispatch out so in this case actually

00:25:00,670 --> 00:25:04,780
we'd have another container they would

00:25:03,550 --> 00:25:06,340
they would hold this component that

00:25:04,780 --> 00:25:07,840
would have that logic in it so that we

00:25:06,340 --> 00:25:10,240
could rewire it up and have it work

00:25:07,840 --> 00:25:13,180
differently for something else if we

00:25:10,240 --> 00:25:14,440
needed it to but then again you know the

00:25:13,180 --> 00:25:16,570
same basic things we're going to build a

00:25:14,440 --> 00:25:19,300
form we're gonna watch for changes and

00:25:16,570 --> 00:25:20,980
we're gonna patch those in on and we're

00:25:19,300 --> 00:25:22,990
gonna use set values so we're using a

00:25:20,980 --> 00:25:26,920
banana box and doing two-way binding on

00:25:22,990 --> 00:25:30,190
this one and the rest of this here is

00:25:26,920 --> 00:25:32,530
just for display of the that component

00:25:30,190 --> 00:25:34,390
the the line items table has a little

00:25:32,530 --> 00:25:36,070
bit more code in it this is laying out

00:25:34,390 --> 00:25:38,020
all the different products and and

00:25:36,070 --> 00:25:39,700
setting the selectors and whatnot but

00:25:38,020 --> 00:25:42,040
again the basics and this is what we

00:25:39,700 --> 00:25:44,470
looked at earlier in the slides we're

00:25:42,040 --> 00:25:46,330
gonna get our line items coming down to

00:25:44,470 --> 00:25:47,590
us as an array on our input and we're

00:25:46,330 --> 00:25:49,840
also going to get our products coming

00:25:47,590 --> 00:25:51,520
down to us and and again we're gonna

00:25:49,840 --> 00:25:55,720
output any sort of changes that are

00:25:51,520 --> 00:25:57,160
occurring to those line items when we we

00:25:55,720 --> 00:25:58,750
come into our constructor we're gonna go

00:25:57,160 --> 00:26:03,520
ahead and build our form we're gonna

00:25:58,750 --> 00:26:05,710
patch those values onto the the line

00:26:03,520 --> 00:26:07,090
items form array so again that works a

00:26:05,710 --> 00:26:08,800
little bit different since we have an

00:26:07,090 --> 00:26:10,570
array of those and we're gonna build a

00:26:08,800 --> 00:26:15,610
form group for each one of those line

00:26:10,570 --> 00:26:26,110
items okay how are we doing on time here

00:26:15,610 --> 00:26:27,280
12:27 excellent alright let's switch

00:26:26,110 --> 00:26:33,280
back

00:26:27,280 --> 00:26:38,860
over here all right so what I hope you

00:26:33,280 --> 00:26:41,470
get from this is that in grx is here to

00:26:38,860 --> 00:26:43,300
make your life simple in grx is here to

00:26:41,470 --> 00:26:45,490
help you reduce the complexity of your

00:26:43,300 --> 00:26:47,890
forms if you start to understand the

00:26:45,490 --> 00:26:50,970
form basics and using container and

00:26:47,890 --> 00:26:54,550
presentation components to be able to

00:26:50,970 --> 00:26:55,720
maximize reuse and and minimize having

00:26:54,550 --> 00:26:56,860
to custom code each one of your

00:26:55,720 --> 00:26:59,470
components on how they're gonna deal

00:26:56,860 --> 00:27:01,330
with data having the the container or

00:26:59,470 --> 00:27:03,130
the presentation components create form

00:27:01,330 --> 00:27:05,200
groups watch for those changes and omit

00:27:03,130 --> 00:27:11,410
those back out so we can store those

00:27:05,200 --> 00:27:13,570
back into a local variable so we looked

00:27:11,410 --> 00:27:15,130
at some code they're great so in summary

00:27:13,570 --> 00:27:17,680
here create models to combine your

00:27:15,130 --> 00:27:20,320
entities so anytime we're doing any sort

00:27:17,680 --> 00:27:22,390
of views instead of trying to build

00:27:20,320 --> 00:27:24,190
those on the fly and have logic in both

00:27:22,390 --> 00:27:25,780
your container in your presentation

00:27:24,190 --> 00:27:29,230
component you want to go ahead and take

00:27:25,780 --> 00:27:31,630
those and have them do all the all that

00:27:29,230 --> 00:27:33,130
logic in your container go ahead and

00:27:31,630 --> 00:27:36,940
build up your model and then pass that

00:27:33,130 --> 00:27:40,840
down on as data as your input down to

00:27:36,940 --> 00:27:42,730
your your presentation component really

00:27:40,840 --> 00:27:45,040
understand the container presentation

00:27:42,730 --> 00:27:47,170
pattern again known also as smart

00:27:45,040 --> 00:27:48,340
components and dumb components but if

00:27:47,170 --> 00:27:51,130
you start doing this you're really going

00:27:48,340 --> 00:27:54,730
to maximize your code reduce complexity

00:27:51,130 --> 00:27:57,430
and maximize your reuse so understand

00:27:54,730 --> 00:27:59,640
the in grx base form basics so we've

00:27:57,430 --> 00:28:02,860
covered this multiple times about how to

00:27:59,640 --> 00:28:05,590
passing down on inputs pass out changes

00:28:02,860 --> 00:28:08,160
on outputs store in local variables you

00:28:05,590 --> 00:28:10,540
know watch the values onto the form and

00:28:08,160 --> 00:28:12,070
and bottom line here that I want you to

00:28:10,540 --> 00:28:14,380
get out of this is ngr X will make your

00:28:12,070 --> 00:28:15,600
complex forms very easy you're no longer

00:28:14,380 --> 00:28:17,860
gonna have to deal with

00:28:15,600 --> 00:28:20,140
hopefully this anybody get that error

00:28:17,860 --> 00:28:22,720
where it says value change since last

00:28:20,140 --> 00:28:25,660
checked yeah right that was a really fun

00:28:22,720 --> 00:28:27,370
one I love that one it's my favorite it

00:28:25,660 --> 00:28:29,110
very difficult to debug and very

00:28:27,370 --> 00:28:30,730
difficult to understand and it's mostly

00:28:29,110 --> 00:28:33,580
just cause because we're constantly

00:28:30,730 --> 00:28:35,830
pushing stuff back on to changes that

00:28:33,580 --> 00:28:37,490
are then getting reprocessed and and

00:28:35,830 --> 00:28:41,840
causing this this kind of infinite

00:28:37,490 --> 00:28:43,309
for for angular so really quick

00:28:41,840 --> 00:28:45,020
brie bug what we do is we do

00:28:43,309 --> 00:28:47,030
architectural reviews we do customized

00:28:45,020 --> 00:28:49,700
training and we do angular consulting if

00:28:47,030 --> 00:28:51,490
you found this presentation useful and

00:28:49,700 --> 00:28:53,330
you want to learn a little bit more

00:28:51,490 --> 00:28:55,160
please come out we've got a booth

00:28:53,330 --> 00:28:57,530
actually right outside the doors here be

00:28:55,160 --> 00:28:59,420
happy to take questions there and you

00:28:57,530 --> 00:29:01,429
can reach me via either Twitter at

00:28:59,420 --> 00:29:03,350
Jessie s underscore brie bug or you

00:29:01,429 --> 00:29:06,780
reach me at Jesse dot Sanders at Bri bug

00:29:03,350 --> 00:29:13,430
comm so thanks everybody for coming

00:29:06,780 --> 00:29:13,430

YouTube URL: https://www.youtube.com/watch?v=kPkTXdToYV0


