Title: How I love being ejected  Customizing your Angular build with Bazel - Greg Magolan
Publication date: 2018-11-16
Playlist: ng-conf 2018
Description: 
	ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,030 --> 00:00:22,650
okay check check okay I think I'm good

00:00:07,919 --> 00:00:24,240
to go see my water alright hello thank

00:00:22,650 --> 00:00:26,039
you all for coming this is an

00:00:24,240 --> 00:00:28,890
introduction to customizing your angular

00:00:26,039 --> 00:00:31,109
build with basil I am Greg :

00:00:28,890 --> 00:00:32,579
and I work on the angular team and I've

00:00:31,109 --> 00:00:35,010
been working on the angular build tools

00:00:32,579 --> 00:00:37,230
convergence project known as ABC for

00:00:35,010 --> 00:00:39,719
about six months so if you've never

00:00:37,230 --> 00:00:41,250
heard of basil basil is the build system

00:00:39,719 --> 00:00:44,520
developed by Google it is used to build

00:00:41,250 --> 00:00:46,320
the entire Google repository and what I

00:00:44,520 --> 00:00:48,390
work on is getting angular and basil to

00:00:46,320 --> 00:00:50,550
work well together so that users outside

00:00:48,390 --> 00:00:52,140
of Google using angular can build their

00:00:50,550 --> 00:00:54,090
angular apps in the same way that

00:00:52,140 --> 00:00:58,559
angular or same way that Google does

00:00:54,090 --> 00:01:01,739
internally so today I will be going over

00:00:58,559 --> 00:01:02,910
the benefits of using basil in other

00:01:01,739 --> 00:01:04,409
words what's so great about basil

00:01:02,910 --> 00:01:06,900
compared to the other build systems that

00:01:04,409 --> 00:01:09,810
you might use with angular today and I

00:01:06,900 --> 00:01:12,030
will introduce the building blocks the

00:01:09,810 --> 00:01:14,159
basil called visual rules and I will

00:01:12,030 --> 00:01:17,540
show you how to compose rules together

00:01:14,159 --> 00:01:19,770
to customize an angular build tool chain

00:01:17,540 --> 00:01:22,320
so why is this thought called how I love

00:01:19,770 --> 00:01:24,960
being ejected well this isn't reference

00:01:22,320 --> 00:01:27,390
to the angular CLI ng jet command which

00:01:24,960 --> 00:01:29,909
you may be familiar with and as you see

00:01:27,390 --> 00:01:32,250
here the command ejects the web pack

00:01:29,909 --> 00:01:33,990
config file from an angular CLI project

00:01:32,250 --> 00:01:38,360
to give you full control over the build

00:01:33,990 --> 00:01:41,220
configuration now why would you eject

00:01:38,360 --> 00:01:42,630
well this would usually because you want

00:01:41,220 --> 00:01:45,360
to customize your build beyond what the

00:01:42,630 --> 00:01:47,579
CLI allows however there's a trade off

00:01:45,360 --> 00:01:49,049
which means that you have to maintain

00:01:47,579 --> 00:01:54,210
the book configuration that the seal I

00:01:49,049 --> 00:01:56,280
previously handled for you and this is

00:01:54,210 --> 00:01:57,780
what the build conversion looks like

00:01:56,280 --> 00:02:00,780
when you eject it from a new currency

00:01:57,780 --> 00:02:02,490
lai project so it needless to say this

00:02:00,780 --> 00:02:04,380
can be a bit daunting to maintain if

00:02:02,490 --> 00:02:06,710
you're not an expert in the build to one

00:02:04,380 --> 00:02:06,710
question

00:02:07,880 --> 00:02:12,900
so what makes up a build configuration

00:02:10,560 --> 00:02:15,900
like the web that config that you just

00:02:12,900 --> 00:02:17,670
saw well first you need to tell your

00:02:15,900 --> 00:02:19,319
configuration what the structure of your

00:02:17,670 --> 00:02:21,390
application is meaning the input files

00:02:19,319 --> 00:02:23,970
are where they're located the

00:02:21,390 --> 00:02:25,800
configurational also needs to know what

00:02:23,970 --> 00:02:28,349
the paths are for the output files and

00:02:25,800 --> 00:02:29,880
it needs to know what plugins for the

00:02:28,349 --> 00:02:31,680
languages that you're using the tools

00:02:29,880 --> 00:02:34,230
that you're using and the plugins

00:02:31,680 --> 00:02:36,989
themselves need some configuration you

00:02:34,230 --> 00:02:41,220
also need to have separate configuration

00:02:36,989 --> 00:02:43,049
for develop and production builds and

00:02:41,220 --> 00:02:45,450
you'll see any configuration for things

00:02:43,049 --> 00:02:47,370
like the dev server running your tests

00:02:45,450 --> 00:02:51,450
bundling your application and deployment

00:02:47,370 --> 00:02:53,700
etc and all this can add up to a lot of

00:02:51,450 --> 00:02:55,170
configuration to maintain that is

00:02:53,700 --> 00:02:57,840
usually just kept in a few central

00:02:55,170 --> 00:02:59,400
places like the web pack config file the

00:02:57,840 --> 00:03:02,010
types cryptic fig file and the comic a

00:02:59,400 --> 00:03:03,480
big files for example and when config

00:03:02,010 --> 00:03:06,299
files are central like this they can

00:03:03,480 --> 00:03:08,190
sometimes get to be large and

00:03:06,299 --> 00:03:11,910
complicated and they can also cause a

00:03:08,190 --> 00:03:14,760
lot of merge conflicts for your team so

00:03:11,910 --> 00:03:17,519
in an ideal world we would be able to

00:03:14,760 --> 00:03:20,880
customize an angular build with far less

00:03:17,519 --> 00:03:22,109
configuration to worry about it would be

00:03:20,880 --> 00:03:23,609
great if the configuration was

00:03:22,109 --> 00:03:25,230
decentralized name there's no large

00:03:23,609 --> 00:03:27,840
central configuration files that calls

00:03:25,230 --> 00:03:29,190
merge conflicts we'd be able to stay on

00:03:27,840 --> 00:03:30,750
the supported path for the build tool

00:03:29,190 --> 00:03:33,750
that you're using even though you want a

00:03:30,750 --> 00:03:34,950
customization and you'd still want to be

00:03:33,750 --> 00:03:37,200
able to use the CLI to get all those

00:03:34,950 --> 00:03:38,910
benefits and as a bonus

00:03:37,200 --> 00:03:43,380
it'll be great if the build system was

00:03:38,910 --> 00:03:44,130
also fast and scalable so how would this

00:03:43,380 --> 00:03:47,010
be possible

00:03:44,130 --> 00:03:49,230
we are currently introducing a way for

00:03:47,010 --> 00:03:52,139
the CLI to support more than one build

00:03:49,230 --> 00:03:55,049
tool currently it's using a fixed web

00:03:52,139 --> 00:03:56,549
pack configuration and today it is

00:03:55,049 --> 00:03:59,400
possible to build an angular application

00:03:56,549 --> 00:04:00,630
and library using basil this is still in

00:03:59,400 --> 00:04:03,389
angular labs so it's not ready for

00:04:00,630 --> 00:04:07,290
production and we are investigating how

00:04:03,389 --> 00:04:08,760
to integrate basil with the CLI so that

00:04:07,290 --> 00:04:13,500
you can use both at the same time and

00:04:08,760 --> 00:04:16,130
get the benefits of both so what are the

00:04:13,500 --> 00:04:19,389
benefits of using basil with angular

00:04:16,130 --> 00:04:21,789
first basil designed to be fast at scale

00:04:19,389 --> 00:04:23,550
so it can scale to large apps and large

00:04:21,789 --> 00:04:26,050
teams and it remains fast with

00:04:23,550 --> 00:04:29,680
incremental builds and distributive

00:04:26,050 --> 00:04:31,779
builds and second Basil's full stack so

00:04:29,680 --> 00:04:34,389
it can be used to build off your front

00:04:31,779 --> 00:04:37,419
end and your back end and also supports

00:04:34,389 --> 00:04:38,650
most languages that aren't there and if

00:04:37,419 --> 00:04:40,210
you're interested more in the full stack

00:04:38,650 --> 00:04:43,240
capabilities of basil you can check out

00:04:40,210 --> 00:04:47,740
the video from Alex and tours workshop

00:04:43,240 --> 00:04:49,689
which is just earlier today finally

00:04:47,740 --> 00:04:51,310
basil allows you to customize your build

00:04:49,689 --> 00:04:53,439
with very little configuration which is

00:04:51,310 --> 00:04:55,779
what I'm talking about today with

00:04:53,439 --> 00:04:58,150
basically generally defined what to

00:04:55,779 --> 00:04:59,770
build and not how to build it so basil

00:04:58,150 --> 00:05:02,490
needs to know but your input files and

00:04:59,770 --> 00:05:04,930
the structure of your application but

00:05:02,490 --> 00:05:06,550
the how to configuration is mostly

00:05:04,930 --> 00:05:10,120
handled by basil for you it's abstract

00:05:06,550 --> 00:05:12,669
it away and in basil configuration is

00:05:10,120 --> 00:05:15,189
local to sources typically have a basil

00:05:12,669 --> 00:05:18,099
configuration file per directory and

00:05:15,189 --> 00:05:19,870
your source source folders so this makes

00:05:18,099 --> 00:05:23,050
each configuration file is smaller and

00:05:19,870 --> 00:05:25,000
easier to maintain and it also means

00:05:23,050 --> 00:05:27,460
that sub teams can own their own book

00:05:25,000 --> 00:05:31,930
configurations and it has fewer merge

00:05:27,460 --> 00:05:34,839
conflicts so what makes up a basil

00:05:31,930 --> 00:05:38,139
configuration firstly it's composed of

00:05:34,839 --> 00:05:41,039
build and boss called rules and rules

00:05:38,139 --> 00:05:43,569
perform build steps and others actions

00:05:41,039 --> 00:05:44,889
now rules can be chained together so the

00:05:43,569 --> 00:05:47,979
outputs of one rule will become the

00:05:44,889 --> 00:05:49,270
inputs of the other rule and rules

00:05:47,979 --> 00:05:52,149
generally abstract away as much

00:05:49,270 --> 00:05:53,139
complexity as possible of the build

00:05:52,149 --> 00:05:55,839
steps through a minimal set of

00:05:53,139 --> 00:05:56,889
attributes so you don't make any

00:05:55,839 --> 00:05:59,020
attributes you don't need to worry about

00:05:56,889 --> 00:05:59,409
exactly what the rule is doing on the

00:05:59,020 --> 00:06:02,199
inside

00:05:59,409 --> 00:06:04,569
and finally rules can also configure

00:06:02,199 --> 00:06:06,849
each other for you I'll talk about this

00:06:04,569 --> 00:06:11,020
in more detail but what it means is that

00:06:06,849 --> 00:06:13,870
you get the right less configuration so

00:06:11,020 --> 00:06:15,279
what exactly is a rule in short a basil

00:06:13,870 --> 00:06:18,659
rule specifies the relationship between

00:06:15,279 --> 00:06:21,039
a set of inputs and a set of outputs

00:06:18,659 --> 00:06:22,659
including this the necessary steps known

00:06:21,039 --> 00:06:25,149
as actions to derive the outputs from

00:06:22,659 --> 00:06:26,889
the inputs and different outputs can be

00:06:25,149 --> 00:06:30,129
generated by different actions for

00:06:26,889 --> 00:06:31,870
example one action may generate some of

00:06:30,129 --> 00:06:32,370
the output files of a rule while another

00:06:31,870 --> 00:06:34,370
action

00:06:32,370 --> 00:06:36,900
generate another up I fell for a rule an

00:06:34,370 --> 00:06:39,810
example of rule like this is the engi

00:06:36,900 --> 00:06:41,820
module rule this rule runs the angular

00:06:39,810 --> 00:06:43,740
compiler on a set of tetris typescript

00:06:41,820 --> 00:06:45,449
sources and it is the main rule that you

00:06:43,740 --> 00:06:49,010
use to compile an angular application in

00:06:45,449 --> 00:06:51,600
basil and internal Eng module defines

00:06:49,010 --> 00:06:53,580
two different actions that run ng C with

00:06:51,600 --> 00:06:55,380
different types of settings one of these

00:06:53,580 --> 00:07:00,090
actions generates cs5 outputs while the

00:06:55,380 --> 00:07:02,070
other one generate C is 2015 outputs so

00:07:00,090 --> 00:07:05,220
a downstream rule may depend only on a

00:07:02,070 --> 00:07:07,380
subset of these outputs the TS dev

00:07:05,220 --> 00:07:09,300
server rule for example which runs the

00:07:07,380 --> 00:07:11,580
dev server and serves a bundle of it

00:07:09,300 --> 00:07:13,970
simplify was concatenated we'll just use

00:07:11,580 --> 00:07:16,229
the s5 up its of the entry module rule

00:07:13,970 --> 00:07:18,300
while the roll-up under rule which

00:07:16,229 --> 00:07:20,010
generates a production bundle using rope

00:07:18,300 --> 00:07:24,270
and Aquifer I will use the es2015

00:07:20,010 --> 00:07:26,520
outputs in this way downstream rules can

00:07:24,270 --> 00:07:29,100
configure upstream rules for you so you

00:07:26,520 --> 00:07:31,440
don't need to configure what up puts ng

00:07:29,100 --> 00:07:32,970
module will generate of the possible

00:07:31,440 --> 00:07:34,860
outputs and don't need to worry about

00:07:32,970 --> 00:07:37,680
which outputs the - criminals were role

00:07:34,860 --> 00:07:41,940
which outputs the downstream rules will

00:07:37,680 --> 00:07:43,229
use as you can see here the actual code

00:07:41,940 --> 00:07:45,270
that you would write to configure an

00:07:43,229 --> 00:07:47,400
engine module rule only contains the set

00:07:45,270 --> 00:07:49,289
of input files to use again you just

00:07:47,400 --> 00:07:50,820
describe what to build and the details

00:07:49,289 --> 00:07:56,370
of how to build it are abstracted away

00:07:50,820 --> 00:07:58,620
by ng module I say mostly because ng

00:07:56,370 --> 00:08:00,900
module does allow you to specify a

00:07:58,620 --> 00:08:03,900
optional TS config attribute and

00:08:00,900 --> 00:08:05,340
pasinetta sceptic file however only a

00:08:03,900 --> 00:08:07,010
subset of the options that you'd

00:08:05,340 --> 00:08:09,360
normally use in chance to fig are used

00:08:07,010 --> 00:08:11,360
for example you can specify what libs

00:08:09,360 --> 00:08:13,530
the compiler should include but

00:08:11,360 --> 00:08:16,260
specifying a target and PS config will

00:08:13,530 --> 00:08:18,979
no effect since the entry module rule

00:08:16,260 --> 00:08:22,740
controls that setting for you

00:08:18,979 --> 00:08:24,630
so generally you'd use one entry module

00:08:22,740 --> 00:08:27,060
rule per angular module and your

00:08:24,630 --> 00:08:29,820
configuration to configure multiple

00:08:27,060 --> 00:08:32,339
angular modules you'd use multiple ng

00:08:29,820 --> 00:08:34,820
module rules and chain them together for

00:08:32,339 --> 00:08:37,140
example you may have an app module which

00:08:34,820 --> 00:08:38,580
depends on multiple feature modules and

00:08:37,140 --> 00:08:42,080
some of those feature modules may depend

00:08:38,580 --> 00:08:42,080
on a shared module

00:08:42,690 --> 00:08:48,130
the chain rules together use the depths

00:08:45,880 --> 00:08:49,630
attribute Ferengi module the list of

00:08:48,130 --> 00:08:52,090
depths may include other energy module

00:08:49,630 --> 00:08:54,910
rules or really just any rule whose

00:08:52,090 --> 00:08:58,210
output conforms to the inputs that

00:08:54,910 --> 00:09:00,850
energy module expects another such rule

00:08:58,210 --> 00:09:02,770
is the TS library which compiles a set

00:09:00,850 --> 00:09:05,860
of type scripts for Suzy using TS C and

00:09:02,770 --> 00:09:13,920
a generates the same es5 and es2015

00:09:05,860 --> 00:09:16,420
outputs that ng module does so because

00:09:13,920 --> 00:09:18,640
the Epis of case library agree with what

00:09:16,420 --> 00:09:28,210
ng module expects dependencies these two

00:09:18,640 --> 00:09:30,070
rules can be chained together ok so I've

00:09:28,210 --> 00:09:31,960
introduced a few rules I will start to

00:09:30,070 --> 00:09:34,540
put together a basic angular application

00:09:31,960 --> 00:09:35,980
using the rules I've mentioned here we

00:09:34,540 --> 00:09:37,360
have a single energy module with the

00:09:35,980 --> 00:09:39,970
single component that is built with the

00:09:37,360 --> 00:09:42,640
ng module rule we use the TS dev server

00:09:39,970 --> 00:09:44,680
rule to to run a dev server and the

00:09:42,640 --> 00:09:47,110
roll-up under rule to build a production

00:09:44,680 --> 00:09:50,770
bundle what would the basic

00:09:47,110 --> 00:09:52,540
configuration look like for this in this

00:09:50,770 --> 00:09:54,190
case you'd have a single build up is a

00:09:52,540 --> 00:09:56,350
file which is in your source folder and

00:09:54,190 --> 00:10:02,080
you define the three rules here along

00:09:56,350 --> 00:10:03,820
with their attributes so each rule

00:10:02,080 --> 00:10:06,100
that's defined in this build file is

00:10:03,820 --> 00:10:08,020
addressable by label and you can build

00:10:06,100 --> 00:10:09,610
and run these rules with the Basel build

00:10:08,020 --> 00:10:14,140
and Basel run commands respectively

00:10:09,610 --> 00:10:15,610
depending on the rule type so far so

00:10:14,140 --> 00:10:17,110
good we've configured a basic

00:10:15,610 --> 00:10:19,000
application that can build and run and

00:10:17,110 --> 00:10:20,380
we can build and run it with basil and

00:10:19,000 --> 00:10:23,230
now let's split this application up into

00:10:20,380 --> 00:10:25,540
two ng modules to do this we use a

00:10:23,230 --> 00:10:27,940
second entry module rule and compile the

00:10:25,540 --> 00:10:29,800
two angular modules separately these

00:10:27,940 --> 00:10:31,420
modules are chained together in this

00:10:29,800 --> 00:10:36,700
case we have an app module that depends

00:10:31,420 --> 00:10:39,070
on a feature module the build

00:10:36,700 --> 00:10:41,410
configuration would now reside in two

00:10:39,070 --> 00:10:43,240
separate build up is a files since our

00:10:41,410 --> 00:10:45,640
sources have been now split into

00:10:43,240 --> 00:10:50,440
separate directories typically do have a

00:10:45,640 --> 00:10:52,790
visible felt per source directory okay

00:10:50,440 --> 00:10:54,110
so now let's see how we can figure

00:10:52,790 --> 00:10:57,710
and configure the bill to use SAS

00:10:54,110 --> 00:10:59,360
instead of CSS for component styles the

00:10:57,710 --> 00:11:02,300
engine module rule has an assets

00:10:59,360 --> 00:11:05,630
attribute which expects HTML and CSS

00:11:02,300 --> 00:11:07,940
files however since Impa files can be

00:11:05,630 --> 00:11:10,670
other source files or the generated

00:11:07,940 --> 00:11:12,620
output files of other rules we can use

00:11:10,670 --> 00:11:16,040
the output of the sass binary rule which

00:11:12,620 --> 00:11:18,170
runs the sass compiler ended up with CSS

00:11:16,040 --> 00:11:23,630
and we can use that as the input to the

00:11:18,170 --> 00:11:25,400
assets attribute in general any rule

00:11:23,630 --> 00:11:27,350
that generates the CSS of a file can be

00:11:25,400 --> 00:11:30,950
used as the input to the edgy module a

00:11:27,350 --> 00:11:34,070
sense attribute for example if someone

00:11:30,950 --> 00:11:35,660
wrote a rule that compels lists and

00:11:34,070 --> 00:11:38,390
outputs a CSS file that rule could also

00:11:35,660 --> 00:11:40,940
be used upendra module and the key point

00:11:38,390 --> 00:11:43,430
here is that the author of the LES rule

00:11:40,940 --> 00:11:45,560
and the n ng module rule they worked

00:11:43,430 --> 00:11:47,600
independently but the rules can be used

00:11:45,560 --> 00:11:53,870
together because they agree on their

00:11:47,600 --> 00:11:56,780
outputs and inputs so back to building

00:11:53,870 --> 00:11:58,970
up a hangar application we've added sass

00:11:56,780 --> 00:12:02,960
tells their application using the sass

00:11:58,970 --> 00:12:05,390
binary rule and since an angular

00:12:02,960 --> 00:12:07,880
application depends on RCS we can use

00:12:05,390 --> 00:12:10,670
the GS library rule which runs the

00:12:07,880 --> 00:12:14,300
typescript compiler to compile RSS

00:12:10,670 --> 00:12:16,070
provided from source in this case and RS

00:12:14,300 --> 00:12:18,470
GSR Chanel ships with basil build files

00:12:16,070 --> 00:12:22,190
in its MPM package for this very reason

00:12:18,470 --> 00:12:26,570
and to run the Karma test we can use the

00:12:22,190 --> 00:12:28,910
GS web test rule here the TSO FS rule

00:12:26,570 --> 00:12:31,190
depends on both TS library which

00:12:28,910 --> 00:12:32,810
compiles the test specification and the

00:12:31,190 --> 00:12:36,440
ng module which contains the component

00:12:32,810 --> 00:12:37,580
under test and - she running fast you

00:12:36,440 --> 00:12:39,440
would use the Basel test command

00:12:37,580 --> 00:12:41,900
followed by the label of the test you

00:12:39,440 --> 00:12:43,700
want to run basically we'll build and

00:12:41,900 --> 00:12:47,900
execute this test and then report on its

00:12:43,700 --> 00:12:50,510
eggs of status finally we need a rule to

00:12:47,900 --> 00:12:52,550
run an HTTP server to serve up the

00:12:50,510 --> 00:12:54,920
production bundle so we can ship it to

00:12:52,550 --> 00:12:57,230
the browser and for this we can use the

00:12:54,920 --> 00:13:00,920
node.js binary rule which runs an

00:12:57,230 --> 00:13:04,070
arbitrary skip using nodejs and for the

00:13:00,920 --> 00:13:05,990
prod server we can run the HTTP server

00:13:04,070 --> 00:13:09,080
which we pull down from NPM

00:13:05,990 --> 00:13:11,980
but in general the node.js binary rule

00:13:09,080 --> 00:13:18,500
can be used to run any JavaScript file

00:13:11,980 --> 00:13:20,180
with no jess using basil so that covers

00:13:18,500 --> 00:13:22,310
the basic set of rules that you'd use to

00:13:20,180 --> 00:13:24,500
build test and run an angular

00:13:22,310 --> 00:13:26,080
application of basil and this pattern of

00:13:24,500 --> 00:13:28,520
composing and chaining rules together

00:13:26,080 --> 00:13:30,560
scales up to very large applications in

00:13:28,520 --> 00:13:35,120
which there may be hundreds or thousands

00:13:30,560 --> 00:13:44,060
of rules and use and now we have time

00:13:35,120 --> 00:13:45,770
for a quick demo sorry okay so for this

00:13:44,060 --> 00:13:47,660
demo I'm running the angular base

00:13:45,770 --> 00:13:49,940
application example which is our

00:13:47,660 --> 00:13:52,730
canonical example and what I'm gonna do

00:13:49,940 --> 00:13:55,250
is just add another module to this

00:13:52,730 --> 00:13:58,130
application which includes a pipe which

00:13:55,250 --> 00:14:03,830
will just transform the word world to

00:13:58,130 --> 00:14:07,520
ng-conf so if we look at the code

00:14:03,830 --> 00:14:10,850
I have here's the hello word module and

00:14:07,520 --> 00:14:12,350
it there's an app module as well and

00:14:10,850 --> 00:14:15,770
I've already had the code for the

00:14:12,350 --> 00:14:17,930
ng-conf pipe here inside the ng-conf

00:14:15,770 --> 00:14:21,080
module and there's the build up is a

00:14:17,930 --> 00:14:23,450
file in this folder which configures the

00:14:21,080 --> 00:14:24,440
build for this module so you see the

00:14:23,450 --> 00:14:28,040
source is included here

00:14:24,440 --> 00:14:30,020
there's the TS config and there is a

00:14:28,040 --> 00:14:33,770
difference on our SAS because you need

00:14:30,020 --> 00:14:41,590
our stress for this angular module make

00:14:33,770 --> 00:14:46,010
this a bit bigger okay so okay use this

00:14:41,590 --> 00:14:49,450
you do the import and the HelloWorld

00:14:46,010 --> 00:14:57,980
module to get that pipe so anything

00:14:49,450 --> 00:15:02,980
don't you come for module module okay

00:14:57,980 --> 00:15:02,980
and add its imports as well

00:15:09,580 --> 00:15:13,940
at this point the pipe should be

00:15:11,510 --> 00:15:19,610
included in me module so I could include

00:15:13,940 --> 00:15:24,560
it in the component okay let's take a

00:15:19,610 --> 00:15:29,839
look at the build output so I think I

00:15:24,560 --> 00:15:31,459
forgot to save a file I did okay oh we

00:15:29,839 --> 00:15:34,209
got an error so this is kind of strange

00:15:31,459 --> 00:15:37,640
you see that in the hello verb module

00:15:34,209 --> 00:15:40,070
you can't find the module ng-conf module

00:15:37,640 --> 00:15:41,600
which seems kind of strange because the

00:15:40,070 --> 00:15:43,520
path is actually correct this is where

00:15:41,600 --> 00:15:46,580
the fat lives but what we've forgotten

00:15:43,520 --> 00:15:49,399
in this case is to include the ng-conf

00:15:46,580 --> 00:15:52,160
module that's built by basil as a

00:15:49,399 --> 00:15:54,320
dependency for the hello world module

00:15:52,160 --> 00:15:56,360
which was built by basil to do that I

00:15:54,320 --> 00:16:00,380
would just modify this build file and I

00:15:56,360 --> 00:16:03,680
would add it to the depths how'd you

00:16:00,380 --> 00:16:07,190
come that's the label name for that rule

00:16:03,680 --> 00:16:11,450
I just wrote and we can take a look at

00:16:07,190 --> 00:16:13,850
the output looks good

00:16:11,450 --> 00:16:17,779
it also vibrated and we have hello

00:16:13,850 --> 00:16:21,920
ng-conf just like that you can add

00:16:17,779 --> 00:16:24,890
missions it's good that I work because I

00:16:21,920 --> 00:16:25,310
just put that together this morning all

00:16:24,890 --> 00:16:31,070
right

00:16:25,310 --> 00:16:33,020
so wrap this up okay so the last thing

00:16:31,070 --> 00:16:35,620
I'd like to talk about before wrapping

00:16:33,020 --> 00:16:38,630
up is how basil does incremental builds

00:16:35,620 --> 00:16:41,029
so even for large applications with

00:16:38,630 --> 00:16:42,529
thousands of source files a change to

00:16:41,029 --> 00:16:44,510
your application and basil and the

00:16:42,529 --> 00:16:47,300
result in rebuilding the actions that

00:16:44,510 --> 00:16:48,890
depend on that change so the rebuild

00:16:47,300 --> 00:16:50,630
time and basil is proportional to the

00:16:48,890 --> 00:16:53,870
size of the change and not the size of

00:16:50,630 --> 00:16:55,640
your application for example if I

00:16:53,870 --> 00:16:57,070
modified meyneth yes here and I asked

00:16:55,640 --> 00:17:00,680
basil around the dead server

00:16:57,070 --> 00:17:02,690
basil would only generate the es5

00:17:00,680 --> 00:17:05,480
outputs of that ng module wouldn't even

00:17:02,690 --> 00:17:08,720
run both actions and then it would run

00:17:05,480 --> 00:17:10,160
the dev server for me similarly a fast

00:17:08,720 --> 00:17:13,069
basil too then when the prod server

00:17:10,160 --> 00:17:15,490
basil would then just generate theist

00:17:13,069 --> 00:17:18,350
2015 outputs of that engine module rule

00:17:15,490 --> 00:17:23,799
rebuild the production bundle and run

00:17:18,350 --> 00:17:26,949
productionserver okay so to summarize

00:17:23,799 --> 00:17:30,500
today I went over the benefits of Basel

00:17:26,949 --> 00:17:32,539
namely Basel is fast at scale it's full

00:17:30,500 --> 00:17:34,880
stack and it's customizable very little

00:17:32,539 --> 00:17:37,970
config I talked about the business rules

00:17:34,880 --> 00:17:41,360
that you'd use to build tests and run an

00:17:37,970 --> 00:17:43,519
angular application and I talked about

00:17:41,360 --> 00:17:44,899
how to compose those rules and chain

00:17:43,519 --> 00:17:50,960
them together to customize an angular

00:17:44,899 --> 00:17:52,460
build and so one can try this out so

00:17:50,960 --> 00:17:53,919
angular Basil's still and I knew the

00:17:52,460 --> 00:17:56,450
labs and it's not ready for production

00:17:53,919 --> 00:17:58,370
but you can try basil today to build an

00:17:56,450 --> 00:18:00,830
angular application or an angular

00:17:58,370 --> 00:18:04,730
library using the rules I've talked

00:18:00,830 --> 00:18:06,559
about today and as a 6.0 angular itself

00:18:04,730 --> 00:18:08,059
is also built with basil using the same

00:18:06,559 --> 00:18:10,730
rules so you can actually look in the

00:18:08,059 --> 00:18:14,240
angular repository and see how the build

00:18:10,730 --> 00:18:16,309
system works there and this year our

00:18:14,240 --> 00:18:18,470
plan for angular Bezos to improve the

00:18:16,309 --> 00:18:19,779
ergonomics meaning you get better iron

00:18:18,470 --> 00:18:21,830
messages and you get better tooling

00:18:19,779 --> 00:18:22,970
potentially generating build files for

00:18:21,830 --> 00:18:26,149
you because they could be a pain to

00:18:22,970 --> 00:18:27,320
maintain we're gonna be working on

00:18:26,149 --> 00:18:29,450
performance which means that you get

00:18:27,320 --> 00:18:31,330
faster builds and we'll be adding in

00:18:29,450 --> 00:18:34,370
some features like code splitting and

00:18:31,330 --> 00:18:37,669
then as mentioned earlier in the future

00:18:34,370 --> 00:18:39,049
we'd like to converge angular basil and

00:18:37,669 --> 00:18:41,419
CLI together so that you can get the

00:18:39,049 --> 00:18:45,529
benefits of basil when you use the CLI

00:18:41,419 --> 00:18:46,909
under the hood so here's some links that

00:18:45,529 --> 00:18:49,250
you can visit if you want to learn more

00:18:46,909 --> 00:18:52,220
about this the first link is a capsule

00:18:49,250 --> 00:18:53,779
for the ABC project in there you'll find

00:18:52,220 --> 00:18:56,509
links to other talks and videos as well

00:18:53,779 --> 00:18:59,120
as documentation and the second link is

00:18:56,509 --> 00:19:00,679
to basil itself here you can find out

00:18:59,120 --> 00:19:03,080
how to install basil and find

00:19:00,679 --> 00:19:06,889
documentation for basil and the last few

00:19:03,080 --> 00:19:09,620
links are for the angular basil example

00:19:06,889 --> 00:19:10,669
which I showed you in the demo where you

00:19:09,620 --> 00:19:13,360
can see all the rules I've talked about

00:19:10,669 --> 00:19:16,700
today and use and you can try them out

00:19:13,360 --> 00:19:19,669
so in closing I'd like to thank Alex ego

00:19:16,700 --> 00:19:22,549
the lead on the ABC project who helped

00:19:19,669 --> 00:19:23,990
me put together this talk and also like

00:19:22,549 --> 00:19:26,269
to thank the members of the angular and

00:19:23,990 --> 00:19:27,620
basil teams at Google who gave me some

00:19:26,269 --> 00:19:29,030
good feedback on how to actually put

00:19:27,620 --> 00:19:32,690
this all into 20 minutes

00:19:29,030 --> 00:19:34,970
and they get useful so thank you for

00:19:32,690 --> 00:19:36,230
coming I hope you enjoyed it and the

00:19:34,970 --> 00:19:37,120
slides are available at the link shown

00:19:36,230 --> 00:19:43,360
here

00:19:37,120 --> 00:19:43,360

YouTube URL: https://www.youtube.com/watch?v=ieRJwFGWEOM


