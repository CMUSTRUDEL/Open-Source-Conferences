Title: Protractor: A New Hope - Michael Giambalvo, Craig Nishina
Publication date: 2018-11-16
Playlist: ng-conf 2018
Description: 
	ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:01,210 --> 00:00:05,080
[Applause]

00:00:07,340 --> 00:00:10,470
[Music]

00:00:30,650 --> 00:00:45,530
[Music]

00:00:49,250 --> 00:00:53,329
[Music]

00:00:55,530 --> 00:01:01,030
hi I'm Craig nice inna and I'm Mike Tim

00:00:59,020 --> 00:01:03,460
Bava and we're Google developers from

00:01:01,030 --> 00:01:05,740
the CL office and also angular Seattle

00:01:03,460 --> 00:01:07,300
meetup organizers and contributing

00:01:05,740 --> 00:01:10,869
authors to the book testing angular

00:01:07,300 --> 00:01:12,580
applications way back in the day in 2016

00:01:10,869 --> 00:01:14,560
we worked on the protractor team and

00:01:12,580 --> 00:01:16,300
although we're currently not working on

00:01:14,560 --> 00:01:17,619
it right now actively working on it

00:01:16,300 --> 00:01:19,150
we're still interested in the project

00:01:17,619 --> 00:01:22,149
and today we'd like to share with you

00:01:19,150 --> 00:01:23,530
three tips on screenshot testing a new

00:01:22,149 --> 00:01:25,570
way to write protractor test and

00:01:23,530 --> 00:01:28,690
debugging protractor test with chrome

00:01:25,570 --> 00:01:30,610
dev tools we knew we wanted to do a Star

00:01:28,690 --> 00:01:33,880
Wars theme talk so we were thinking of

00:01:30,610 --> 00:01:35,649
ways to relate Star Wars to testing and

00:01:33,880 --> 00:01:37,390
we came up with is this kind of idea

00:01:35,649 --> 00:01:39,820
that testing is kind of like the force

00:01:37,390 --> 00:01:41,770
and that it has two sides a light side

00:01:39,820 --> 00:01:44,050
and a dark side you can think of the

00:01:41,770 --> 00:01:46,800
light side as unit testing so it's white

00:01:44,050 --> 00:01:50,380
box testing it's it has full isolation

00:01:46,800 --> 00:01:52,149
it's it's very predictable very reliable

00:01:50,380 --> 00:01:55,030
and elegant but it also requires

00:01:52,149 --> 00:01:56,649
discipline and practice to master we

00:01:55,030 --> 00:01:59,470
think of end-to-end testing you think of

00:01:56,649 --> 00:02:01,300
the dark side of the force they're very

00:01:59,470 --> 00:02:03,550
powerful and can be easy an easy

00:02:01,300 --> 00:02:05,140
shortcut to get quick results it's very

00:02:03,550 --> 00:02:09,640
tempting to abuse and you could end up

00:02:05,140 --> 00:02:11,200
with many tests just like the force you

00:02:09,640 --> 00:02:13,150
want to have balance in your testing and

00:02:11,200 --> 00:02:16,209
we recommend achieving this balance by

00:02:13,150 --> 00:02:18,190
having many light unit tests and just a

00:02:16,209 --> 00:02:20,920
few heavy end-to-end tests mostly to

00:02:18,190 --> 00:02:22,959
test the heavy pass through your

00:02:20,920 --> 00:02:27,970
application or the critical paths that

00:02:22,959 --> 00:02:29,800
you can't test any other way but today's

00:02:27,970 --> 00:02:31,660
talk is not about the light side we

00:02:29,800 --> 00:02:33,700
don't have enough time it's about the

00:02:31,660 --> 00:02:35,410
dark side so it's protractor webdriver

00:02:33,700 --> 00:02:37,959
tests and we took some of the best

00:02:35,410 --> 00:02:40,060
practices in over the last year and put

00:02:37,959 --> 00:02:42,640
them in a new module we're calling blue

00:02:40,060 --> 00:02:44,709
harvest blue harvest it's like a

00:02:42,640 --> 00:02:46,180
refreshing swig of blue milk so

00:02:44,709 --> 00:02:47,709
everything you see in the demos today

00:02:46,180 --> 00:02:49,870
you'll be able to do on your own by

00:02:47,709 --> 00:02:51,340
downloading this NPM I'd also recommend

00:02:49,870 --> 00:02:53,290
if you're interested in these techniques

00:02:51,340 --> 00:02:54,940
to look at the NPM look at the source

00:02:53,290 --> 00:02:55,930
look at how we did it it's actually not

00:02:54,940 --> 00:03:00,760
that hard for you to implement these

00:02:55,930 --> 00:03:02,350
techniques on your own so it's time for

00:03:00,760 --> 00:03:06,490
the demo

00:03:02,350 --> 00:03:09,610
good so we'll be looking at our angular

00:03:06,490 --> 00:03:10,990
admin interface for the Deathstar and as

00:03:09,610 --> 00:03:13,060
you can see there's three main tabs we

00:03:10,990 --> 00:03:16,440
have the tractor beam control panel

00:03:13,060 --> 00:03:20,530
there's the prisoner manifest Behind and

00:03:16,440 --> 00:03:24,030
auth guard and we also have the firing

00:03:20,530 --> 00:03:24,030
form so we can fire the Deathstar

00:03:28,720 --> 00:03:32,090
first we're going to show you how to

00:03:30,620 --> 00:03:33,860
take how to write tests that take

00:03:32,090 --> 00:03:35,300
screenshots and then fail at the

00:03:33,860 --> 00:03:36,980
appearance of your application changes

00:03:35,300 --> 00:03:39,590
these are great because they can catch

00:03:36,980 --> 00:03:41,270
things that unit tests might miss so

00:03:39,590 --> 00:03:43,640
regressions in your CSS or changes to

00:03:41,270 --> 00:03:46,160
your assets but they can also be a pain

00:03:43,640 --> 00:03:47,360
to maintain they change anytime the

00:03:46,160 --> 00:03:49,660
appearance of your application changes

00:03:47,360 --> 00:03:51,530
whether or not that's a bug and that

00:03:49,660 --> 00:03:53,780
just means it's important that you have

00:03:51,530 --> 00:03:57,260
an easy way to update your reference

00:03:53,780 --> 00:04:00,739
images if they need to change so now

00:03:57,260 --> 00:04:03,950
let's take a look at the to a screenshot

00:04:00,739 --> 00:04:05,540
test so in the first example on the left

00:04:03,950 --> 00:04:08,390
is the golden image or the reference

00:04:05,540 --> 00:04:10,700
image and this is what we expect the the

00:04:08,390 --> 00:04:13,370
page to look like and when the test runs

00:04:10,700 --> 00:04:16,340
it takes a screenshot of the page and as

00:04:13,370 --> 00:04:17,299
you can see on the image on the right it

00:04:16,340 --> 00:04:19,160
looks like there's something going wrong

00:04:17,299 --> 00:04:20,239
with that formatting right is this the

00:04:19,160 --> 00:04:22,790
kind of thing we might have caught with

00:04:20,239 --> 00:04:24,320
the unit test probably not it looks like

00:04:22,790 --> 00:04:26,270
you know the image looks right and

00:04:24,320 --> 00:04:28,610
there's just something going on with

00:04:26,270 --> 00:04:30,800
that you know the formatting I think

00:04:28,610 --> 00:04:34,729
this might be better for screenshot test

00:04:30,800 --> 00:04:37,100
so as the screenshot runs and it fails

00:04:34,729 --> 00:04:38,870
we get the stiff image and the stiff

00:04:37,100 --> 00:04:41,419
image shows the differences between the

00:04:38,870 --> 00:04:43,160
actual screenshot that we had and the

00:04:41,419 --> 00:04:45,590
golden image and it's highlighted in

00:04:43,160 --> 00:04:48,169
pink it's easy to see whether or not

00:04:45,590 --> 00:04:51,620
this is an acceptable result or output

00:04:48,169 --> 00:04:53,600
so as we can see this is not and it's

00:04:51,620 --> 00:04:54,860
also important to note that if you're

00:04:53,600 --> 00:04:56,630
going to do a screenshot test of any

00:04:54,860 --> 00:04:58,220
type you should always make sure your

00:04:56,630 --> 00:05:00,530
width and height of your windows set

00:04:58,220 --> 00:05:02,810
before and then you just use the our

00:05:00,530 --> 00:05:05,360
blue harbors can compare screenshot API

00:05:02,810 --> 00:05:07,720
and we get the result and check to see

00:05:05,360 --> 00:05:10,130
if it's true or not and that's it

00:05:07,720 --> 00:05:11,600
screenshot test will fail anytime the

00:05:10,130 --> 00:05:13,729
appearance of your application changes

00:05:11,600 --> 00:05:16,669
even if that appearance change isn't a

00:05:13,729 --> 00:05:18,530
regression so in this case we have a

00:05:16,669 --> 00:05:20,060
change that's not a regression we just

00:05:18,530 --> 00:05:22,820
made the text bigger and easier to read

00:05:20,060 --> 00:05:23,990
we we don't we want to update the

00:05:22,820 --> 00:05:25,330
reference image instead of having this

00:05:23,990 --> 00:05:27,560
test fail we can see from the diff

00:05:25,330 --> 00:05:29,060
exactly what the problem was quickly and

00:05:27,560 --> 00:05:31,310
so in order to update our reference

00:05:29,060 --> 00:05:33,169
images we set the update Golden's

00:05:31,310 --> 00:05:35,210
environment variable to true and rerun

00:05:33,169 --> 00:05:37,580
our tests blue harvest will check that

00:05:35,210 --> 00:05:39,200
environment variable and then it'll run

00:05:37,580 --> 00:05:40,940
through your test doing screenshot

00:05:39,200 --> 00:05:42,330
comparisons but instead of failing when

00:05:40,940 --> 00:05:44,430
the screenshots are different

00:05:42,330 --> 00:05:45,629
we'll just update the reference image so

00:05:44,430 --> 00:05:48,659
you can update all your reference images

00:05:45,629 --> 00:05:50,069
just with one command so sometimes there

00:05:48,659 --> 00:05:52,860
are parts of your page you wish to

00:05:50,069 --> 00:05:55,169
ignore in this example a new example

00:05:52,860 --> 00:05:57,509
obi-wan is actually moving and it's an

00:05:55,169 --> 00:05:59,490
animated image of him moving the lever

00:05:57,509 --> 00:06:01,199
so this might make screenshot testing

00:05:59,490 --> 00:06:03,659
really difficult the way we can avoid

00:06:01,199 --> 00:06:06,180
that is if we just add a mask so we use

00:06:03,659 --> 00:06:08,669
blue harvest to just add a mask and the

00:06:06,180 --> 00:06:11,129
way we do that is we find user element

00:06:08,669 --> 00:06:13,020
finery in protractor and we say like

00:06:11,129 --> 00:06:15,090
look for that image lever lever and then

00:06:13,020 --> 00:06:16,349
set it to gray and then when we do this

00:06:15,090 --> 00:06:18,629
we have to make sure we update our

00:06:16,349 --> 00:06:21,449
golden images and then we can then run

00:06:18,629 --> 00:06:22,740
our tests and it should pass you might

00:06:21,449 --> 00:06:24,629
be wondering how well does this actually

00:06:22,740 --> 00:06:26,069
work in practice well we've been doing

00:06:24,629 --> 00:06:27,930
testing like this at Google for a while

00:06:26,069 --> 00:06:30,030
now we have thousands of these kinds of

00:06:27,930 --> 00:06:32,129
tests we don't use blue harvest we use

00:06:30,030 --> 00:06:34,289
another tool but it does a similar thing

00:06:32,129 --> 00:06:36,449
it makes it very easy for us to update

00:06:34,289 --> 00:06:37,919
our reference images one thing we do is

00:06:36,449 --> 00:06:40,050
we keep our Golden's in our source repo

00:06:37,919 --> 00:06:41,400
this makes it very easy to track which

00:06:40,050 --> 00:06:42,479
version of your application produced

00:06:41,400 --> 00:06:44,310
which version of your reference

00:06:42,479 --> 00:06:47,190
screenshots and to track them over time

00:06:44,310 --> 00:06:49,050
we recommend doing that as well one fun

00:06:47,190 --> 00:06:50,849
thing about this testing as you might

00:06:49,050 --> 00:06:53,159
have heard angular material runs every

00:06:50,849 --> 00:06:55,349
commit through Google's internal CI

00:06:53,159 --> 00:06:57,210
before they do a release and our

00:06:55,349 --> 00:06:58,650
internal CI has many applications that

00:06:57,210 --> 00:07:00,750
depend on material and those

00:06:58,650 --> 00:07:02,009
applications of screen shot tests so

00:07:00,750 --> 00:07:04,469
we've actually caught bugs in angular

00:07:02,009 --> 00:07:06,690
material before they released by hat

00:07:04,469 --> 00:07:08,009
because they broke the screen shot test

00:07:06,690 --> 00:07:12,180
for applications that depend on material

00:07:08,009 --> 00:07:14,610
and finally these tests do fail if you

00:07:12,180 --> 00:07:16,229
update chrome sometimes sometimes the

00:07:14,610 --> 00:07:17,699
chrome team will change how shadows

00:07:16,229 --> 00:07:20,219
render and you'll get these little one

00:07:17,699 --> 00:07:22,080
pixel differences it's very obvious from

00:07:20,219 --> 00:07:23,389
the diff image that it wasn't a material

00:07:22,080 --> 00:07:25,469
change it wasn't a significant change

00:07:23,389 --> 00:07:26,639
you just update the reference image and

00:07:25,469 --> 00:07:32,940
get home with your life it's not a big

00:07:26,639 --> 00:07:34,440
deal next we'd like to show you a new

00:07:32,940 --> 00:07:36,509
API for writing end-to-end tests with

00:07:34,440 --> 00:07:38,819
protractor that we call action helpers

00:07:36,509 --> 00:07:40,199
we've been using this API internally for

00:07:38,819 --> 00:07:41,969
a while now and it's become pretty

00:07:40,199 --> 00:07:44,460
popular so we're happy to share it with

00:07:41,969 --> 00:07:46,229
you today we're going to use action

00:07:44,460 --> 00:07:47,250
helpers to write an end-to-end test for

00:07:46,229 --> 00:07:50,029
the form that you have to fill out

00:07:47,250 --> 00:07:53,759
before you can fire the Deathstar

00:07:50,029 --> 00:07:55,009
as sure as as I'm sure you know the

00:07:53,759 --> 00:07:57,979
Empire

00:07:55,009 --> 00:07:59,509
is notoriously bureaucratic so before

00:07:57,979 --> 00:08:02,409
anyone can fire the Deathstar you must

00:07:59,509 --> 00:08:05,749
fill out the form or you know or else

00:08:02,409 --> 00:08:07,490
four-stroke old yeah so we need an

00:08:05,749 --> 00:08:09,110
authorizing officer and we also need a

00:08:07,490 --> 00:08:12,379
command code and the command code must

00:08:09,110 --> 00:08:19,069
have the word gold in it and then we can

00:08:12,379 --> 00:08:20,330
fire the death star yeah so in the past

00:08:19,069 --> 00:08:22,879
we recommended that you write

00:08:20,330 --> 00:08:25,159
integration tests is with page objects a

00:08:22,879 --> 00:08:26,839
page object provides a higher level API

00:08:25,159 --> 00:08:29,389
wrapping the page that you'd like to

00:08:26,839 --> 00:08:31,309
test and the idea is that instead of

00:08:29,389 --> 00:08:34,430
having CSS selectors and whatnot in your

00:08:31,309 --> 00:08:36,319
test you have this object and the CSS

00:08:34,430 --> 00:08:39,199
selectors live there and your test just

00:08:36,319 --> 00:08:42,829
says that system set orbit

00:08:39,199 --> 00:08:44,060
get statuses and fire and part of the

00:08:42,829 --> 00:08:45,560
reason for this is that it's supposed to

00:08:44,060 --> 00:08:47,449
make your test easier to maintain

00:08:45,560 --> 00:08:49,579
if the CSS of your application changes

00:08:47,449 --> 00:08:51,230
you only have to update one thing the

00:08:49,579 --> 00:08:53,060
page object and your test will just

00:08:51,230 --> 00:08:54,380
continue around as normal so this is the

00:08:53,060 --> 00:08:56,060
best practice in order to write this

00:08:54,380 --> 00:09:00,910
test today the first thing we need to do

00:08:56,060 --> 00:09:02,899
is create a page object my goal this is

00:09:00,910 --> 00:09:05,240
gonna write a page object right now

00:09:02,899 --> 00:09:06,889
during our test during a presentation I

00:09:05,240 --> 00:09:07,399
kind of really really bad feeling about

00:09:06,889 --> 00:09:09,829
this

00:09:07,399 --> 00:09:12,500
so you're not the only one there's a

00:09:09,829 --> 00:09:14,810
team within Google the Warsaw team that

00:09:12,500 --> 00:09:16,639
works on GCP they also had a bad feeling

00:09:14,810 --> 00:09:19,220
about writing page objects what they

00:09:16,639 --> 00:09:20,899
found was it just slowed them down so

00:09:19,220 --> 00:09:22,790
you have to find the right combination

00:09:20,899 --> 00:09:24,500
of CSS selectors so what you're doing is

00:09:22,790 --> 00:09:26,329
you've got your application open you've

00:09:24,500 --> 00:09:27,740
got dev tools open you're like digging

00:09:26,329 --> 00:09:30,350
around looking for the right magic

00:09:27,740 --> 00:09:31,399
selector you need for your test and they

00:09:30,350 --> 00:09:33,680
just found that really slowed them down

00:09:31,399 --> 00:09:35,899
and my test difficult to write they also

00:09:33,680 --> 00:09:36,980
found that page objects weren't that

00:09:35,899 --> 00:09:39,860
useful from a maintenance perspective

00:09:36,980 --> 00:09:42,560
because any time the CSS of their page

00:09:39,860 --> 00:09:45,350
changed and it changes a lot because GCP

00:09:42,560 --> 00:09:47,360
updates pretty often the workflow is

00:09:45,350 --> 00:09:48,649
changing anyway so it's actually not the

00:09:47,360 --> 00:09:50,240
case that they could just update their

00:09:48,649 --> 00:09:51,769
page objects and their test would

00:09:50,240 --> 00:09:53,569
continue to run because the

00:09:51,769 --> 00:09:56,870
functionality had changed and so their

00:09:53,569 --> 00:09:58,220
tests needed to be updated as well the

00:09:56,870 --> 00:09:59,810
warsaw team isn't shy about solving

00:09:58,220 --> 00:10:01,670
problems on their own so they came up

00:09:59,810 --> 00:10:04,040
with a library that we're calling action

00:10:01,670 --> 00:10:05,600
helpers the idea behind action helpers

00:10:04,040 --> 00:10:08,120
is to make your test as easy to write as

00:10:05,600 --> 00:10:08,790
possible and you focus only on what you

00:10:08,120 --> 00:10:10,770
can see

00:10:08,790 --> 00:10:12,270
on the page so action helpers use

00:10:10,770 --> 00:10:14,850
text-based selectors instead of

00:10:12,270 --> 00:10:16,530
selecting by CSS elements you say well I

00:10:14,850 --> 00:10:18,960
would see orbit here so I need to click

00:10:16,530 --> 00:10:21,770
that or I see at an officer for this

00:10:18,960 --> 00:10:23,790
button so I need to click that or a fire

00:10:21,770 --> 00:10:25,590
so they're very easy to write it's a

00:10:23,790 --> 00:10:28,590
much simpler API there's there's just

00:10:25,590 --> 00:10:30,090
sort of less typing overall this is

00:10:28,590 --> 00:10:31,020
actually pretty well because tests are

00:10:30,090 --> 00:10:33,240
so easy to write

00:10:31,020 --> 00:10:34,770
they're also them there's less of a

00:10:33,240 --> 00:10:36,120
maintenance problem basically if your

00:10:34,770 --> 00:10:37,710
workflow changes you can throw away the

00:10:36,120 --> 00:10:39,450
test and rewrite a new one pretty

00:10:37,710 --> 00:10:41,910
quickly in fact much faster than you

00:10:39,450 --> 00:10:43,920
could update a page object and one of

00:10:41,910 --> 00:10:46,320
the big advantages of this is that the

00:10:43,920 --> 00:10:48,390
tests read conversationally when you

00:10:46,320 --> 00:10:49,800
read the test it's almost as if it's

00:10:48,390 --> 00:10:51,570
saying what you would say if you were

00:10:49,800 --> 00:10:53,820
just telling someone how to do the same

00:10:51,570 --> 00:10:57,810
test so it's very easy to understand

00:10:53,820 --> 00:10:59,630
immediately what's going on okay so

00:10:57,810 --> 00:11:01,980
here's the firing form from earlier

00:10:59,630 --> 00:11:03,390
we're gonna write an unit we're gonna

00:11:01,980 --> 00:11:05,040
write an end-to-end test on this and

00:11:03,390 --> 00:11:07,620
throughout this demo we're going to use

00:11:05,040 --> 00:11:09,330
the highlight tool a flag for protractor

00:11:07,620 --> 00:11:11,520
and this will help us to see when the

00:11:09,330 --> 00:11:14,790
test runs what's actually being selected

00:11:11,520 --> 00:11:16,950
so first we are clicking on this orbit

00:11:14,790 --> 00:11:19,530
and system and to do that we need to

00:11:16,950 --> 00:11:22,290
click on the input enemy elements by

00:11:19,530 --> 00:11:24,270
their placeholder text and type in some

00:11:22,290 --> 00:11:26,670
data so it looks like we're destroying

00:11:24,270 --> 00:11:29,550
Alderaan yep that's what happens in the

00:11:26,670 --> 00:11:32,040
movie okay all right sounds good

00:11:29,550 --> 00:11:35,190
and then we need to click on the button

00:11:32,040 --> 00:11:37,470
add an officer and we have this really

00:11:35,190 --> 00:11:39,720
that's not it okay and they're gonna

00:11:37,470 --> 00:11:41,850
click on the name we're gonna type in

00:11:39,720 --> 00:11:46,440
Tarkin Admiral Tarkin

00:11:41,850 --> 00:11:48,330
oh yes and we're gonna type in the

00:11:46,440 --> 00:11:52,530
command code and we're going to type in

00:11:48,330 --> 00:11:54,770
something with the word gold in it gold

00:11:52,530 --> 00:11:54,770
one

00:11:57,680 --> 00:12:04,170
now we're going to type in right of gold

00:12:00,120 --> 00:12:06,149
one and we're going to see that check

00:12:04,170 --> 00:12:08,130
circle Michael do you want to talk about

00:12:06,149 --> 00:12:10,680
that so this is how you write assertions

00:12:08,130 --> 00:12:12,930
and action helpers if you have a lot of

00:12:10,680 --> 00:12:14,459
text on your page that might match the

00:12:12,930 --> 00:12:16,500
same elements you can disambiguate it

00:12:14,459 --> 00:12:18,000
with positional locators and there's a

00:12:16,500 --> 00:12:21,930
rich library position locators you can

00:12:18,000 --> 00:12:24,269
say left right under below above in this

00:12:21,930 --> 00:12:26,730
case what I'm saying is when this is

00:12:24,269 --> 00:12:28,920
valid this icon is supposed to change to

00:12:26,730 --> 00:12:31,290
a check circle so I'm looking for the

00:12:28,920 --> 00:12:33,000
text that I just typed gold one and then

00:12:31,290 --> 00:12:34,800
to the right of it I'm expecting to see

00:12:33,000 --> 00:12:37,320
an element with the text check circle

00:12:34,800 --> 00:12:38,370
because I'm using material icons what

00:12:37,320 --> 00:12:40,579
I'm actually looking for is the name of

00:12:38,370 --> 00:12:43,019
the icon so I can just type that here

00:12:40,579 --> 00:12:45,120
it's also good to note that you don't

00:12:43,019 --> 00:12:48,350
have to use text you can just put CSS

00:12:45,120 --> 00:12:50,370
selectors in here and that works too

00:12:48,350 --> 00:12:54,630
okay so next we're going to click on

00:12:50,370 --> 00:12:58,200
fire and then we're gonna click on we're

00:12:54,630 --> 00:12:59,550
gonna see that it's destroyed and we

00:12:58,200 --> 00:13:01,470
have a slow in front of there because

00:12:59,550 --> 00:13:03,990
probably before we used to use browser

00:13:01,470 --> 00:13:05,910
weight and expected conditions and you

00:13:03,990 --> 00:13:08,910
wait to see that the text is destroyed

00:13:05,910 --> 00:13:10,920
but now we just need slow so in action

00:13:08,910 --> 00:13:12,930
helpers the C is your assertion that's

00:13:10,920 --> 00:13:14,190
what you type instead of expect and it

00:13:12,930 --> 00:13:16,470
will fail if it doesn't see what's on

00:13:14,190 --> 00:13:17,850
the page I put slow in front of it as a

00:13:16,470 --> 00:13:20,040
signal that I expect this to happen for

00:13:17,850 --> 00:13:22,320
a while the Deathstar takes awhile they

00:13:20,040 --> 00:13:24,029
charge up so I'm saying that I'm going

00:13:22,320 --> 00:13:25,850
to see destroy it eventually and I want

00:13:24,029 --> 00:13:30,740
you to retry and wait for it to appear

00:13:25,850 --> 00:13:30,740
so okay let's go ahead and run this test

00:13:34,399 --> 00:13:40,170
it's gonna be kind of small because it

00:13:36,810 --> 00:13:41,550
won't be scaled and when you're seeing

00:13:40,170 --> 00:13:43,230
right now is highlight delay click again

00:13:41,550 --> 00:13:45,029
so the elements I'm about to interact

00:13:43,230 --> 00:13:47,160
with are highlighted in blue first and

00:13:45,029 --> 00:13:50,690
they're just like pause so it's easy all

00:13:47,160 --> 00:13:50,690
along with what's happening in the test

00:13:51,620 --> 00:13:59,699
it looks like that console.log is very

00:13:54,029 --> 00:14:04,250
readable and almost reproducible and no

00:13:59,699 --> 00:14:04,250
oh did you

00:14:06,170 --> 00:14:16,590
let's try that again technical

00:14:09,360 --> 00:14:18,980
difficulties sometimes happens typed in

00:14:16,590 --> 00:14:18,980
system

00:14:25,070 --> 00:14:30,320
it's might not work on the on the screen

00:14:27,020 --> 00:14:33,590
actually YP yet okay we clicked the fire

00:14:30,320 --> 00:14:39,530
button and Alderaan is destroyed the

00:14:33,590 --> 00:14:44,840
test passes your monsters were plotting

00:14:39,530 --> 00:14:47,000
that so it works it was a pretty complex

00:14:44,840 --> 00:14:48,800
form I rewrote a test pretty easily it

00:14:47,000 --> 00:14:51,410
looks like we could probably just throw

00:14:48,800 --> 00:14:52,700
away that text information or we could

00:14:51,410 --> 00:14:55,010
get the console log and be able to

00:14:52,700 --> 00:14:58,310
reproduce it right and so this is

00:14:55,010 --> 00:15:00,890
important you might have seen our test

00:14:58,310 --> 00:15:03,200
this logging output because the API is

00:15:00,890 --> 00:15:05,630
so simple a log that describes what it's

00:15:03,200 --> 00:15:07,190
doing is actually identical to the API

00:15:05,630 --> 00:15:08,750
you couldn't just like copy and paste

00:15:07,190 --> 00:15:10,700
this but you can't read it and see

00:15:08,750 --> 00:15:13,040
exactly what's happening I'm going to

00:15:10,700 --> 00:15:15,770
the firing page I'm clicking on system I

00:15:13,040 --> 00:15:17,090
type in Alderaan so on and so forth it's

00:15:15,770 --> 00:15:22,640
very easy to read this log and know

00:15:17,090 --> 00:15:25,730
exactly what the test did once again you

00:15:22,640 --> 00:15:27,050
might ask how well does this work well

00:15:25,730 --> 00:15:29,570
within Google we have hundreds of these

00:15:27,050 --> 00:15:31,760
tests in GCP and this is in fact become

00:15:29,570 --> 00:15:33,920
our preferred way to write tests we've

00:15:31,760 --> 00:15:36,320
found that even a product that evolves

00:15:33,920 --> 00:15:38,540
as rapidly as GCP selecting finding

00:15:36,320 --> 00:15:40,490
elements by text works pretty well the

00:15:38,540 --> 00:15:42,830
the text is actually more stable that

00:15:40,490 --> 00:15:44,990
makes sense than the CSS right because

00:15:42,830 --> 00:15:47,390
CSS is an implementation detail and the

00:15:44,990 --> 00:15:49,520
text is what the user sees so if the

00:15:47,390 --> 00:15:51,080
text of a button changes probably means

00:15:49,520 --> 00:15:52,400
that button does something different but

00:15:51,080 --> 00:15:57,080
the CSS of a button can change without

00:15:52,400 --> 00:15:59,000
changing its actual behavior it once

00:15:57,080 --> 00:16:00,530
again yeah GCP rapidly evolves and this

00:15:59,000 --> 00:16:01,970
is work for it

00:16:00,530 --> 00:16:05,300
also depending on the appearance of the

00:16:01,970 --> 00:16:07,040
page is a benefit and not a weakness if

00:16:05,300 --> 00:16:08,210
your CSS is messed up and something

00:16:07,040 --> 00:16:10,250
that's supposed to be to the right of

00:16:08,210 --> 00:16:12,020
something else isn't that you want to

00:16:10,250 --> 00:16:14,300
catch that you want your test to fail so

00:16:12,020 --> 00:16:16,390
positional selectors are actually not as

00:16:14,300 --> 00:16:18,890
much for problems we thought we would be

00:16:16,390 --> 00:16:21,830
so finally we'd like to show you our

00:16:18,890 --> 00:16:23,840
last example which is writing and being

00:16:21,830 --> 00:16:25,580
able to debug your tests so debugging

00:16:23,840 --> 00:16:27,880
protractor tests in the past used to be

00:16:25,580 --> 00:16:30,050
a pain with webdriver control-flow and

00:16:27,880 --> 00:16:31,910
if you upgrade to the latest protractor

00:16:30,050 --> 00:16:34,160
you will be able to not use the control

00:16:31,910 --> 00:16:37,400
flow and be able to debug with chrome

00:16:34,160 --> 00:16:38,570
dev tools what is the control flow so

00:16:37,400 --> 00:16:39,950
you might have heard about this and

00:16:38,570 --> 00:16:41,060
it's an implementation detail of

00:16:39,950 --> 00:16:42,980
webdriver that you had to be aware of

00:16:41,060 --> 00:16:43,930
but that's not going to be true for much

00:16:42,980 --> 00:16:46,160
longer

00:16:43,930 --> 00:16:48,260
so the important thing to keep in mind

00:16:46,160 --> 00:16:50,810
is that browser commands in an

00:16:48,260 --> 00:16:52,190
integration test or async actions what's

00:16:50,810 --> 00:16:54,170
happening is your test is sending an

00:16:52,190 --> 00:16:56,540
HTTP call to a process that's

00:16:54,170 --> 00:16:58,250
controlling the browser it used to be

00:16:56,540 --> 00:17:00,110
the case that writing a big chain of

00:16:58,250 --> 00:17:03,320
asynchronous actions is very difficult

00:17:00,110 --> 00:17:05,209
in JavaScript so the selenium webdriver

00:17:03,320 --> 00:17:06,020
J has people they came up with this

00:17:05,209 --> 00:17:08,480
clever idea

00:17:06,020 --> 00:17:10,310
they made their API synchronous instead

00:17:08,480 --> 00:17:12,230
of sending the command every time you

00:17:10,310 --> 00:17:14,329
usually enter a command a browser

00:17:12,230 --> 00:17:15,829
command in their API it queues it up in

00:17:14,329 --> 00:17:18,860
something called the control flow that

00:17:15,829 --> 00:17:21,620
runs later then in a single async call

00:17:18,860 --> 00:17:23,600
all of the Kido commands run and your

00:17:21,620 --> 00:17:25,310
test runs this is great because it makes

00:17:23,600 --> 00:17:27,680
your tests easier to read and easier to

00:17:25,310 --> 00:17:29,450
write but it makes it breaks debugging

00:17:27,680 --> 00:17:31,730
right and we're going to show you how

00:17:29,450 --> 00:17:34,130
that happens in the next slides so let's

00:17:31,730 --> 00:17:35,510
take a look at a protractor test the

00:17:34,130 --> 00:17:37,640
first thing that happens is we start

00:17:35,510 --> 00:17:40,790
adding these webdriver promises to the

00:17:37,640 --> 00:17:42,110
control fool queue and we hit the

00:17:40,790 --> 00:17:43,640
debugger point and at this point we

00:17:42,110 --> 00:17:45,380
might have launched the browser window I

00:17:43,640 --> 00:17:47,330
might have navigated to it but we

00:17:45,380 --> 00:17:50,060
haven't actually inputted any of the

00:17:47,330 --> 00:17:51,890
text field yet so if we keep stepping

00:17:50,060 --> 00:17:53,750
over we keep queuing up to the control

00:17:51,890 --> 00:17:56,060
flow and what happens at the end is

00:17:53,750 --> 00:17:57,830
protractor patches the it block and then

00:17:56,060 --> 00:18:00,110
now it starts executing the control fall

00:17:57,830 --> 00:18:03,250
so right at this point it starts typing

00:18:00,110 --> 00:18:07,070
in protractor into the our title block

00:18:03,250 --> 00:18:09,560
now without the control flow and we hit

00:18:07,070 --> 00:18:12,200
the debugger point actually this works

00:18:09,560 --> 00:18:14,420
because we navigate to the page we've

00:18:12,200 --> 00:18:18,230
filled out our form for protractor on

00:18:14,420 --> 00:18:20,330
you hope the control flow is going away

00:18:18,230 --> 00:18:21,980
in selenium for just like Luke's hand is

00:18:20,330 --> 00:18:24,080
gonna be dropped off and drop down a

00:18:21,980 --> 00:18:25,670
garbage disposal but this isn't a

00:18:24,080 --> 00:18:27,350
problem you're gonna get a shiny new

00:18:25,670 --> 00:18:30,860
hand and that hand is a sink a weight

00:18:27,350 --> 00:18:32,750
and so before you can update to slam for

00:18:30,860 --> 00:18:35,000
you're going to have to update all of

00:18:32,750 --> 00:18:36,740
your tests to be asynchronous you have

00:18:35,000 --> 00:18:38,060
to make your it blocks async and you

00:18:36,740 --> 00:18:39,860
have to put a weight in front of every

00:18:38,060 --> 00:18:41,510
command as we showed in the slides but

00:18:39,860 --> 00:18:42,890
the advantage of that is now your tests

00:18:41,510 --> 00:18:46,760
will be able to be debugged with

00:18:42,890 --> 00:18:48,020
standard node.js tools so before you can

00:18:46,760 --> 00:18:50,570
do that some things to keep in mind

00:18:48,020 --> 00:18:52,220
first and your protractor config you

00:18:50,570 --> 00:18:54,679
need to set selenium promise manager

00:18:52,220 --> 00:18:56,919
false this is how you tell protractor to

00:18:54,679 --> 00:18:58,820
run webdriver without the control flow

00:18:56,919 --> 00:18:59,990
in selenium forward there won't be a

00:18:58,820 --> 00:19:01,640
control flow so that'll just be the

00:18:59,990 --> 00:19:03,919
default but this is how you try it out

00:19:01,640 --> 00:19:05,630
early also while you're debugging your

00:19:03,919 --> 00:19:07,340
test you might be inspecting something

00:19:05,630 --> 00:19:09,080
or just like staring at it and thinking

00:19:07,340 --> 00:19:10,940
so you don't want your tests to timeout

00:19:09,080 --> 00:19:13,039
and fail so if you're debugging the

00:19:10,940 --> 00:19:13,760
recommend having a Jasmine no timeout

00:19:13,039 --> 00:19:16,940
that's very high

00:19:13,760 --> 00:19:19,190
just your tests don't timeout finally in

00:19:16,940 --> 00:19:21,890
your TS config for your end-to-end tests

00:19:19,190 --> 00:19:23,360
you want to admit es 2017 because if you

00:19:21,890 --> 00:19:25,400
met an earlier version of JavaScript

00:19:23,360 --> 00:19:27,169
type script will polyfill all the async

00:19:25,400 --> 00:19:28,640
await logic for you and then you'll be

00:19:27,169 --> 00:19:30,890
stepping through your test and you'll

00:19:28,640 --> 00:19:33,470
get into this generated async await code

00:19:30,890 --> 00:19:37,309
and you'll be sad so don't be sad Amit

00:19:33,470 --> 00:19:39,650
yes 2017 so Michael yes 2017 don't we

00:19:37,309 --> 00:19:41,000
mean no date yes this means your you'll

00:19:39,650 --> 00:19:43,100
have to be using protractor you'll be

00:19:41,000 --> 00:19:46,880
running your tests unknown eight but no

00:19:43,100 --> 00:19:47,780
data is the LTS so that's fine finally

00:19:46,880 --> 00:19:50,090
we're going to show in our demo

00:19:47,780 --> 00:19:52,220
debugging with vs code but you can also

00:19:50,090 --> 00:19:54,530
do just with Chrome so you would launch

00:19:52,220 --> 00:19:56,240
protractor like this you'd call node

00:19:54,530 --> 00:19:58,700
directly and pass it the inspect break

00:19:56,240 --> 00:20:00,470
flag this tell the inspect part tells

00:19:58,700 --> 00:20:02,390
know that you're debugging and the break

00:20:00,470 --> 00:20:04,610
part tells it to set a breakpoint right

00:20:02,390 --> 00:20:07,010
when it launches and then you just call

00:20:04,610 --> 00:20:09,830
the protractor script if you open up

00:20:07,010 --> 00:20:12,380
Chrome : / let's inspect chrome we'll

00:20:09,830 --> 00:20:13,549
see the new debugging target available

00:20:12,380 --> 00:20:22,610
you just people to click a link and then

00:20:13,549 --> 00:20:24,440
open dev tools alright so in our repo

00:20:22,610 --> 00:20:26,450
I've got the vs code config to launch

00:20:24,440 --> 00:20:28,159
protractor in debugging mode so I'm just

00:20:26,450 --> 00:20:29,240
going to kick that off now you can see

00:20:28,159 --> 00:20:31,520
the first thing we do is we hit this

00:20:29,240 --> 00:20:33,799
breakpoint on launch but in my test I

00:20:31,520 --> 00:20:36,350
have a debugger statement written that

00:20:33,799 --> 00:20:37,789
we'll go to and we'll break so we launch

00:20:36,350 --> 00:20:40,000
the browser and now we're at our

00:20:37,789 --> 00:20:44,360
debugger statement I can step through

00:20:40,000 --> 00:20:47,360
and all the browser commands run right I

00:20:44,360 --> 00:20:52,309
load my login page I see that I type in

00:20:47,360 --> 00:20:54,140
stuff continue to go on I say that I'm

00:20:52,309 --> 00:20:59,330
not a droid and then I click the login

00:20:54,140 --> 00:21:02,290
button and now I'm on my new page also I

00:20:59,330 --> 00:21:05,260
can open up in the browser under test

00:21:02,290 --> 00:21:07,120
I can open up chrome dev tools and I can

00:21:05,260 --> 00:21:08,200
just type ng Pro I'm a direct agree with

00:21:07,120 --> 00:21:10,150
my application so I could do anything

00:21:08,200 --> 00:21:11,530
that I could do normally in dev tools so

00:21:10,150 --> 00:21:13,780
you want to stop here and inspect stuff

00:21:11,530 --> 00:21:14,890
or look around you can do that you can

00:21:13,780 --> 00:21:20,080
go back to your tests you can continue

00:21:14,890 --> 00:21:21,340
to step and the test is done so actually

00:21:20,080 --> 00:21:23,080
there was something sneaky that just

00:21:21,340 --> 00:21:25,240
happened the chrome dev tools did not

00:21:23,080 --> 00:21:27,160
close down this used to happen a lot

00:21:25,240 --> 00:21:27,610
when you run through a protractor yeah

00:21:27,160 --> 00:21:31,510
that's true

00:21:27,610 --> 00:21:33,100
so the chrome exposes an API that is

00:21:31,510 --> 00:21:34,690
what webdriver uses to control the

00:21:33,100 --> 00:21:36,280
browser it's also a dev tools uses to

00:21:34,690 --> 00:21:37,360
control the browser so in previous

00:21:36,280 --> 00:21:38,920
versions of chrome they would fight over

00:21:37,360 --> 00:21:40,840
each other and if you tried to open the

00:21:38,920 --> 00:21:42,130
debugger during a protractor test it

00:21:40,840 --> 00:21:43,930
would close every time I new command

00:21:42,130 --> 00:21:45,670
came in they fixed that that's no longer

00:21:43,930 --> 00:21:47,050
the case which is really exciting

00:21:45,670 --> 00:21:49,000
because it means there's other tools you

00:21:47,050 --> 00:21:51,340
can build off of that same API that can

00:21:49,000 --> 00:21:53,290
also run during integration tests so

00:21:51,340 --> 00:21:55,240
just know that you can debug your

00:21:53,290 --> 00:21:57,310
website and also be debugging your

00:21:55,240 --> 00:22:01,390
protractor test at the same time f2 dev

00:21:57,310 --> 00:22:04,450
tools open and it's not a problem okay

00:22:01,390 --> 00:22:07,000
so that was our final demo like we said

00:22:04,450 --> 00:22:08,590
earlier we are contributing authors book

00:22:07,000 --> 00:22:11,380
Manning book testing angular

00:22:08,590 --> 00:22:13,060
applications we cover some of these

00:22:11,380 --> 00:22:15,460
examples in further details so please

00:22:13,060 --> 00:22:19,900
check it out it is 40% off with that

00:22:15,460 --> 00:22:23,670
discount code and some final takeaways

00:22:19,900 --> 00:22:26,050
the control flow is going away so if you

00:22:23,670 --> 00:22:28,900
if you want to migrate your tests now is

00:22:26,050 --> 00:22:30,730
the time if you'd like to check out our

00:22:28,900 --> 00:22:32,830
demo app and test that we use today

00:22:30,730 --> 00:22:34,060
please check out our github link if

00:22:32,830 --> 00:22:37,090
you'd like to check out screenshot

00:22:34,060 --> 00:22:38,350
testing or or action helpers please

00:22:37,090 --> 00:22:40,690
check out blue harvests we'd like to

00:22:38,350 --> 00:22:42,040
hear some feedback and thanks to

00:22:40,690 --> 00:22:43,510
Benjamin Bremer's for our Star Wars

00:22:42,040 --> 00:22:45,370
kazoo cover at the beginning the slides

00:22:43,510 --> 00:22:47,440
and special thanks to Bullock from the

00:22:45,370 --> 00:22:49,030
GCP Warsaw team or beaulieu on github

00:22:47,440 --> 00:22:55,750
for the initial plantation of action

00:22:49,030 --> 00:22:56,679
helpers alright that's all we got thank

00:22:55,750 --> 00:22:57,500
you

00:22:56,679 --> 00:23:01,819
you

00:22:57,500 --> 00:23:01,819

YouTube URL: https://www.youtube.com/watch?v=6aPfHrSl0Qk


