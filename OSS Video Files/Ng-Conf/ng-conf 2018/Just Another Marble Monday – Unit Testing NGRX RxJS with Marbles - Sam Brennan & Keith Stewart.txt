Title: Just Another Marble Monday â€“ Unit Testing NGRX RxJS with Marbles - Sam Brennan & Keith Stewart
Publication date: 2018-11-16
Playlist: ng-conf 2018
Description: 
	ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,000 --> 00:00:07,680
I'm Sam I'm Keith and this is our talk

00:00:04,080 --> 00:00:09,840
just another Marvel Monday - in this

00:00:07,680 --> 00:00:13,290
talk we will discuss the benefits of

00:00:09,840 --> 00:00:16,230
marble testing what exactly marbles are

00:00:13,290 --> 00:00:19,289
and how to write a marble diagram my

00:00:16,230 --> 00:00:22,080
favorite marble syntax filter and hot

00:00:19,289 --> 00:00:24,900
and cold observables we'll also get into

00:00:22,080 --> 00:00:27,500
some examples of marble tests well take

00:00:24,900 --> 00:00:30,330
a look and learn about how rxjs

00:00:27,500 --> 00:00:32,279
schedules observables and how we can

00:00:30,330 --> 00:00:34,469
override that in our tests with the test

00:00:32,279 --> 00:00:37,380
scheduler well do a little bit of coding

00:00:34,469 --> 00:00:39,300
together and implement an 80s dance off

00:00:37,380 --> 00:00:42,899
feature into a clone of the popular

00:00:39,300 --> 00:00:47,670
tourer euros and lastly a quiz he's

00:00:42,899 --> 00:00:50,610
kidding no I'm not seriously quit hey

00:00:47,670 --> 00:00:53,730
Keith what up Sam why should we write

00:00:50,610 --> 00:00:54,840
marble tests I'm glad you asked I think

00:00:53,730 --> 00:00:58,350
Jeff said it best

00:00:54,840 --> 00:01:01,469
asynchronous developments is hard so

00:00:58,350 --> 00:01:05,090
when we write web applications

00:01:01,469 --> 00:01:07,140
we're largely writing asynchronous code

00:01:05,090 --> 00:01:08,280
there are many good reasons for this

00:01:07,140 --> 00:01:10,920
which I'm not going to get into today

00:01:08,280 --> 00:01:13,260
but there are some byproducts of this

00:01:10,920 --> 00:01:17,070
when we're testing asynchronous

00:01:13,260 --> 00:01:19,140
functionality such as observables it's

00:01:17,070 --> 00:01:20,490
it's very difficult to write these tests

00:01:19,140 --> 00:01:23,820
in a way that's easy to read and

00:01:20,490 --> 00:01:26,460
understand Sam have you ever had to

00:01:23,820 --> 00:01:29,670
write a test for an asynchronous

00:01:26,460 --> 00:01:31,170
function where you had to set up how

00:01:29,670 --> 00:01:33,090
your data was being resolved up at the

00:01:31,170 --> 00:01:34,979
top before actually executing the

00:01:33,090 --> 00:01:36,030
functionality down at the bottom didn't

00:01:34,979 --> 00:01:39,119
it feel like everything was out of order

00:01:36,030 --> 00:01:40,740
yes it's the worst well-marbled tests

00:01:39,119 --> 00:01:43,350
have you covered because they allow you

00:01:40,740 --> 00:01:44,850
to write your tests in against

00:01:43,350 --> 00:01:48,570
asynchronous functionality in

00:01:44,850 --> 00:01:51,509
asynchronous way so this allows you to

00:01:48,570 --> 00:01:53,970
write your tests in a fashion that much

00:01:51,509 --> 00:01:58,369
more closely resembles the actual flow

00:01:53,970 --> 00:01:58,369
of logic through your application and

00:01:58,520 --> 00:02:05,250
and then everything feels a little

00:02:01,710 --> 00:02:08,340
better and that is radical I know right

00:02:05,250 --> 00:02:10,830
so this and the fact that marble syntax

00:02:08,340 --> 00:02:13,110
is nicely descriptive of what and when

00:02:10,830 --> 00:02:17,610
things are happening in your

00:02:13,110 --> 00:02:19,980
of all makes it much more readable also

00:02:17,610 --> 00:02:21,810
when writing observables it's really

00:02:19,980 --> 00:02:24,240
easy to create race conditions in your

00:02:21,810 --> 00:02:25,830
application Marvel testing is a great

00:02:24,240 --> 00:02:29,340
way of exposing these types of issues

00:02:25,830 --> 00:02:32,580
awesome thanks Keith no problem so

00:02:29,340 --> 00:02:34,740
alligator IO says that marble diagrams

00:02:32,580 --> 00:02:38,790
are a way of visually representing

00:02:34,740 --> 00:02:42,030
observables so here is a marble diagram

00:02:38,790 --> 00:02:43,620
so first the lines show the flow of time

00:02:42,030 --> 00:02:46,260
as indicated by the arrows on the right

00:02:43,620 --> 00:02:49,260
side next we see the marbles which are

00:02:46,260 --> 00:02:51,030
values emitted by the observable then we

00:02:49,260 --> 00:02:54,270
see the operator which here in our face

00:02:51,030 --> 00:02:55,650
it's multiplying everything by 10 then

00:02:54,270 --> 00:02:59,459
we see the bar at the end of the

00:02:55,650 --> 00:03:03,510
sequence which represents completion the

00:02:59,459 --> 00:03:06,060
output contains the values that

00:03:03,510 --> 00:03:09,870
subscribers to the observable will

00:03:06,060 --> 00:03:12,450
receive I always forget that line okay

00:03:09,870 --> 00:03:13,590
and lastly the X represents an error if

00:03:12,450 --> 00:03:15,989
one is present in your code

00:03:13,590 --> 00:03:18,660
oh isn't that one of the the answers for

00:03:15,989 --> 00:03:20,580
the quiz later Keith how is Brad gonna

00:03:18,660 --> 00:03:26,850
win our quiz if you tell everybody the

00:03:20,580 --> 00:03:29,190
answers my bad you're welcome Brad so

00:03:26,850 --> 00:03:31,170
before we get into marble testing we are

00:03:29,190 --> 00:03:32,580
going to learn how to read them every

00:03:31,170 --> 00:03:34,680
time I told someone I was speaking on

00:03:32,580 --> 00:03:36,600
marble testing at ng-conf the response

00:03:34,680 --> 00:03:38,100
was pretty much the same they had to

00:03:36,600 --> 00:03:39,450
write a marble test at one point or

00:03:38,100 --> 00:03:41,190
another and they couldn't figure out

00:03:39,450 --> 00:03:43,890
what the symbols meant that is marble

00:03:41,190 --> 00:03:46,590
syntax and it's also my favorite don't

00:03:43,890 --> 00:03:47,549
ask why I'm a dork I know everyone knows

00:03:46,590 --> 00:03:50,670
sure to exam

00:03:47,549 --> 00:03:53,310
all right so let's briefly discuss

00:03:50,670 --> 00:03:55,739
marble syntax when I first started

00:03:53,310 --> 00:03:56,430
writing marble tests I was a little

00:03:55,739 --> 00:03:58,890
confused by it

00:03:56,430 --> 00:04:00,510
these symbols that that we put into the

00:03:58,890 --> 00:04:03,000
the tests they didn't immediately make

00:04:00,510 --> 00:04:05,250
sense I'm hoping with this baseline

00:04:03,000 --> 00:04:07,620
level of knowledge that it'll help you

00:04:05,250 --> 00:04:09,209
when you start writing a marble test

00:04:07,620 --> 00:04:10,680
yourself that it'll make make a little

00:04:09,209 --> 00:04:12,360
more sense than the easier can we get a

00:04:10,680 --> 00:04:15,180
raise of hands who has written a marble

00:04:12,360 --> 00:04:18,120
test before okay awesome

00:04:15,180 --> 00:04:20,070
well this is old news for you guys all

00:04:18,120 --> 00:04:24,479
right well let's still let's go over it

00:04:20,070 --> 00:04:26,210
real quick so dashes dashes represent a

00:04:24,479 --> 00:04:28,880
period of time

00:04:26,210 --> 00:04:33,280
usually 10 frames and a frame is

00:04:28,880 --> 00:04:37,100
equivalent to 1 millisecond a pipe

00:04:33,280 --> 00:04:38,900
represents completion so at this point

00:04:37,100 --> 00:04:42,470
the observable would stop actually

00:04:38,900 --> 00:04:44,660
emitting values the pound sign

00:04:42,470 --> 00:04:46,060
represents the dreaded error

00:04:44,660 --> 00:04:47,840
I don't like finding those in my code

00:04:46,060 --> 00:04:52,190
yeah me neither

00:04:47,840 --> 00:04:54,800
all right next characters are variables

00:04:52,190 --> 00:04:58,280
which represent values emitted by the

00:04:54,800 --> 00:05:00,800
observable you can use parentheses to

00:04:58,280 --> 00:05:03,500
group together functions that need to be

00:05:00,800 --> 00:05:08,150
executed together need to be executed

00:05:03,500 --> 00:05:10,760
synchronously and the caret represents a

00:05:08,150 --> 00:05:12,889
subscription point this is only used in

00:05:10,760 --> 00:05:16,160
hot observables I think that one's on

00:05:12,889 --> 00:05:18,560
the quiz too come on Sam you just gave

00:05:16,160 --> 00:05:22,550
me a hard time and now this what's going

00:05:18,560 --> 00:05:24,410
on all right all right

00:05:22,550 --> 00:05:26,660
hot and cold observables it's taking

00:05:24,410 --> 00:05:29,419
this a little bit so in our own words

00:05:26,660 --> 00:05:32,510
hot observables are creating values

00:05:29,419 --> 00:05:34,099
before the subscription has started with

00:05:32,510 --> 00:05:36,289
cold observables nothing happens until

00:05:34,099 --> 00:05:38,979
something or someone subscribes to it a

00:05:36,289 --> 00:05:41,630
good example of a hot observable is

00:05:38,979 --> 00:05:43,370
mouse movement because the mouse is

00:05:41,630 --> 00:05:45,440
moving or happening before somebody is

00:05:43,370 --> 00:05:47,060
listening or not a good example of a

00:05:45,440 --> 00:05:50,030
cold observable is an HTTP request

00:05:47,060 --> 00:05:55,400
nothing happens until someone subscribes

00:05:50,030 --> 00:05:57,770
to it so hot and cold observables is a

00:05:55,400 --> 00:06:00,470
concept that once you get it it makes

00:05:57,770 --> 00:06:03,139
sense it's not that hard but it's

00:06:00,470 --> 00:06:05,659
difficult to to explain and therefore

00:06:03,139 --> 00:06:07,789
there ends up being a lot of a lot of

00:06:05,659 --> 00:06:08,900
confusion on the topic so one of the

00:06:07,789 --> 00:06:12,229
things that we wanted to do in this

00:06:08,900 --> 00:06:14,449
presentation was find a an example that

00:06:12,229 --> 00:06:16,699
explains hot and cold observables that

00:06:14,449 --> 00:06:18,199
we can all relate to a little better as

00:06:16,699 --> 00:06:21,710
we were preparing for this talk we found

00:06:18,199 --> 00:06:24,409
a great blog post by Quentin Pittman

00:06:21,710 --> 00:06:27,949
where he took some real-life metaphors

00:06:24,409 --> 00:06:28,760
and and related that to hot and cold

00:06:27,949 --> 00:06:33,139
observables

00:06:28,760 --> 00:06:35,599
so he said hot observables are like

00:06:33,139 --> 00:06:38,330
watching a movie in a movie theater and

00:06:35,599 --> 00:06:41,740
cold observables are like watching a

00:06:38,330 --> 00:06:41,740
movie on Netflix

00:06:43,810 --> 00:06:48,259
the reason why watching a movie in the

00:06:46,849 --> 00:06:49,849
theater is like a hot observable is

00:06:48,259 --> 00:06:51,770
because regardless of when you get there

00:06:49,849 --> 00:06:53,000
the movie has already started and it's

00:06:51,770 --> 00:06:55,729
going to start at its scheduled time

00:06:53,000 --> 00:06:58,039
whether you're there or not the movie in

00:06:55,729 --> 00:07:00,680
these in this example is the data being

00:06:58,039 --> 00:07:03,110
emitted by the observable if you arrive

00:07:00,680 --> 00:07:04,400
late and you subscribe late too bad for

00:07:03,110 --> 00:07:06,229
you you've missed the beginning of the

00:07:04,400 --> 00:07:10,490
movie but you can continue watching on

00:07:06,229 --> 00:07:13,550
from where you got there on the other

00:07:10,490 --> 00:07:15,830
hand watching a movie on Netflix is like

00:07:13,550 --> 00:07:17,479
a cold observable because no matter

00:07:15,830 --> 00:07:19,279
whether or not someone else is already

00:07:17,479 --> 00:07:20,810
watching the movie that you want to or

00:07:19,279 --> 00:07:23,900
how many people are watching the movie

00:07:20,810 --> 00:07:26,060
that you want to your stream doesn't

00:07:23,900 --> 00:07:28,310
start until you start watching the movie

00:07:26,060 --> 00:07:30,979
aka subscribing to it

00:07:28,310 --> 00:07:33,229
so everyone who's watching movie has

00:07:30,979 --> 00:07:36,289
their own separate stream of this data

00:07:33,229 --> 00:07:38,900
and they can all be watching the same

00:07:36,289 --> 00:07:43,580
movie at different points at the same

00:07:38,900 --> 00:07:45,830
time okay now let's take a look at some

00:07:43,580 --> 00:07:47,330
marble tests some examples of them and

00:07:45,830 --> 00:07:50,599
see how hot and cold observables are

00:07:47,330 --> 00:07:52,129
used they're just a disclaimer we will

00:07:50,599 --> 00:07:53,990
be using Jasmine marbles in this

00:07:52,129 --> 00:07:55,849
presentation there are multiple

00:07:53,990 --> 00:07:58,969
different times but for us this is our

00:07:55,849 --> 00:08:07,190
favorite and thank you Mike and Brandon

00:07:58,969 --> 00:08:07,610
for writing this you're awesome that's

00:08:07,190 --> 00:08:10,250
okay

00:08:07,610 --> 00:08:12,349
they'll see it on the record applause

00:08:10,250 --> 00:08:13,939
okay so first let's take a look at what

00:08:12,349 --> 00:08:16,250
we're going to test this is the load

00:08:13,939 --> 00:08:18,469
dancers effect if you don't know what ng

00:08:16,250 --> 00:08:19,909
arts effects to they listen for actions

00:08:18,469 --> 00:08:22,310
to be dispatched and then after

00:08:19,909 --> 00:08:25,639
performing some side effect they return

00:08:22,310 --> 00:08:28,389
a new action so what this effect is

00:08:25,639 --> 00:08:32,149
doing is listening for the low dancers

00:08:28,389 --> 00:08:35,060
action to be dispatched it then executes

00:08:32,149 --> 00:08:37,880
the get dancers function on the dancer

00:08:35,060 --> 00:08:40,820
service and if successful returns the

00:08:37,880 --> 00:08:43,279
low dancer success action along with the

00:08:40,820 --> 00:08:46,490
dancers as a payload if the request

00:08:43,279 --> 00:08:48,300
fails it'll return the low dancers fail

00:08:46,490 --> 00:08:52,220
action

00:08:48,300 --> 00:08:54,750
yeah yeah we don't want that okay so

00:08:52,220 --> 00:08:58,980
this is one of the tests that we might

00:08:54,750 --> 00:09:00,690
write against that particular effect as

00:08:58,980 --> 00:09:04,800
you can see here there are three basic

00:09:00,690 --> 00:09:08,970
sections to the test first we set up our

00:09:04,800 --> 00:09:12,000
payload data then we prepare our

00:09:08,970 --> 00:09:15,570
starting and completion actions before

00:09:12,000 --> 00:09:18,270
we set up our effects and say what we

00:09:15,570 --> 00:09:19,650
expect to actually happen here you can

00:09:18,270 --> 00:09:21,510
see that we are declaring a hot

00:09:19,650 --> 00:09:23,820
observable to represent a stream of

00:09:21,510 --> 00:09:25,770
actions this is because before the test

00:09:23,820 --> 00:09:28,590
begins actions could already be getting

00:09:25,770 --> 00:09:31,290
dispatched the result and the response

00:09:28,590 --> 00:09:32,850
an expected result our cold observables

00:09:31,290 --> 00:09:36,000
because they will not emit any values

00:09:32,850 --> 00:09:37,650
before the test begins also we are using

00:09:36,000 --> 00:09:40,380
marbles syntax to describe what these

00:09:37,650 --> 00:09:42,150
observables are doing so the action that

00:09:40,380 --> 00:09:45,750
starts this process is dispatched after

00:09:42,150 --> 00:09:48,360
10 frame delay then after another 10

00:09:45,750 --> 00:09:51,600
frame delay we receive the response to

00:09:48,360 --> 00:09:52,950
the HTTP request with the set of dancers

00:09:51,600 --> 00:09:57,270
before the observe will stop submitting

00:09:52,950 --> 00:09:59,880
values the expected result has 210 frame

00:09:57,270 --> 00:10:02,070
delays after returning the completion

00:09:59,880 --> 00:10:03,780
action the reason for having 210 frame

00:10:02,070 --> 00:10:05,670
delays here is because the starting

00:10:03,780 --> 00:10:08,760
action and the response had 110 frame

00:10:05,670 --> 00:10:14,460
delay and result the result is delayed

00:10:08,760 --> 00:10:16,590
by both of these okay now let's take a

00:10:14,460 --> 00:10:20,790
look at a test against when this all

00:10:16,590 --> 00:10:23,640
goes wrong so if the HTTP request fails

00:10:20,790 --> 00:10:25,650
then this would be the test that we

00:10:23,640 --> 00:10:27,810
would write the structure is pretty

00:10:25,650 --> 00:10:32,010
similar except for when we're setting up

00:10:27,810 --> 00:10:34,770
the the payload data instead of actually

00:10:32,010 --> 00:10:37,950
setting up the success data in this case

00:10:34,770 --> 00:10:41,490
we are returning an error so we will

00:10:37,950 --> 00:10:43,920
have an error as the payload also one of

00:10:41,490 --> 00:10:46,710
the main differences here is that the

00:10:43,920 --> 00:10:49,260
response here is actually throwing an

00:10:46,710 --> 00:10:51,390
error so again we're not going to be

00:10:49,260 --> 00:10:53,520
returning some data from the HTTP

00:10:51,390 --> 00:10:56,490
request it throws the error we're going

00:10:53,520 --> 00:10:59,520
to deal with that the expected result

00:10:56,490 --> 00:11:01,620
here still has 210 frame delays before

00:10:59,520 --> 00:11:02,410
emitting the completion action this

00:11:01,620 --> 00:11:04,269
again is

00:11:02,410 --> 00:11:07,149
because the previous two steps in this

00:11:04,269 --> 00:11:08,769
process have 110 frame delay each and we

00:11:07,149 --> 00:11:12,670
need to account for it in our expected

00:11:08,769 --> 00:11:15,129
result okay time to dive a little deeper

00:11:12,670 --> 00:11:16,769
let's take a look at a scenario where we

00:11:15,129 --> 00:11:19,300
need to work with the scheduler that

00:11:16,769 --> 00:11:24,040
determines values that determines wind

00:11:19,300 --> 00:11:26,620
values are emitted from observables okay

00:11:24,040 --> 00:11:28,689
so what if the functionality that you

00:11:26,620 --> 00:11:31,810
are testing is doing something to change

00:11:28,689 --> 00:11:33,790
the schedule that the observable is

00:11:31,810 --> 00:11:36,699
emitting values a good example of this

00:11:33,790 --> 00:11:39,009
might be ad bounce to suppress the

00:11:36,699 --> 00:11:41,399
number of values emitted while a user is

00:11:39,009 --> 00:11:44,230
typing in some sort of a search criteria

00:11:41,399 --> 00:11:46,269
alrights j s operators internally use

00:11:44,230 --> 00:11:49,600
the async scheduler to determine when

00:11:46,269 --> 00:11:52,779
they will emit values so what we can do

00:11:49,600 --> 00:11:54,550
is use the get test scheduler method

00:11:52,779 --> 00:11:56,050
that is provided by Jasmine marbles to

00:11:54,550 --> 00:11:57,970
get a scheduler and inject it into our

00:11:56,050 --> 00:12:00,670
effects when we run tests so that we can

00:11:57,970 --> 00:12:02,319
control the flow however we need could

00:12:00,670 --> 00:12:03,910
you show us how we were able to inject

00:12:02,319 --> 00:12:07,389
the scheduler into our effects

00:12:03,910 --> 00:12:10,410
absolutely Sam okay so here's the

00:12:07,389 --> 00:12:13,990
constructor for our effects

00:12:10,410 --> 00:12:17,040
so what we're what we're able to do here

00:12:13,990 --> 00:12:19,720
is use injection tokens to optionally

00:12:17,040 --> 00:12:22,360
inject a debounce value and a new

00:12:19,720 --> 00:12:24,519
scheduler which we can then use in the

00:12:22,360 --> 00:12:26,050
tests for our effects with these in

00:12:24,519 --> 00:12:28,959
place we can go ahead and use the

00:12:26,050 --> 00:12:31,000
injected scheduler if one is provided or

00:12:28,959 --> 00:12:33,069
if one is not we'll just go ahead and

00:12:31,000 --> 00:12:38,199
use the default async scheduler from

00:12:33,069 --> 00:12:40,630
rxjs so this effect handle handles a

00:12:38,199 --> 00:12:42,639
search of the dancers the effect starts

00:12:40,630 --> 00:12:44,740
with the dispatch of a search action it

00:12:42,639 --> 00:12:46,480
then applies the debounce to the data

00:12:44,740 --> 00:12:48,309
stream suppressing any value from being

00:12:46,480 --> 00:12:50,500
emitted for a period of time

00:12:48,309 --> 00:12:52,389
this is where we can use our injected

00:12:50,500 --> 00:12:55,269
debounce value and scheduler when we

00:12:52,389 --> 00:12:59,559
test when we are not testing the ACN

00:12:55,269 --> 00:13:02,199
scheduler we'll take care of things okay

00:12:59,559 --> 00:13:03,939
so when setting up the testbed for our

00:13:02,199 --> 00:13:05,470
tests we can take advantage of the

00:13:03,939 --> 00:13:08,709
injection token so we were looking at

00:13:05,470 --> 00:13:11,050
just a moment ago and provided debounce

00:13:08,709 --> 00:13:13,449
value and use the get test scheduler

00:13:11,050 --> 00:13:15,730
function that's provided by Jasmine

00:13:13,449 --> 00:13:16,180
marbles to inject the scheduler that we

00:13:15,730 --> 00:13:19,149
can use

00:13:16,180 --> 00:13:21,520
in our tests the reason for setting the

00:13:19,149 --> 00:13:23,589
debounce value here at 30 is to make

00:13:21,520 --> 00:13:25,120
things a little easier for us as we are

00:13:23,589 --> 00:13:28,420
testing so that we don't have to write

00:13:25,120 --> 00:13:32,589
quite so many dashes in these tests if

00:13:28,420 --> 00:13:34,510
we have a longer debounce now that we

00:13:32,589 --> 00:13:37,089
have provided a test scheduler we have

00:13:34,510 --> 00:13:38,529
set the debounce value to 30 our test is

00:13:37,089 --> 00:13:40,570
pretty similar to the ones we looked at

00:13:38,529 --> 00:13:42,760
earlier one thing that I would point out

00:13:40,570 --> 00:13:45,250
is that the expected result has a delay

00:13:42,760 --> 00:13:47,589
of 50 frames this is because of the

00:13:45,250 --> 00:13:49,750
starter action and the response each

00:13:47,589 --> 00:13:51,310
have a delay of 10 frames before the 30

00:13:49,750 --> 00:13:54,040
frame debounce is applied to the effect

00:13:51,310 --> 00:13:56,740
hey Sam why don't we show a little more

00:13:54,040 --> 00:13:58,240
interesting example of this type of a

00:13:56,740 --> 00:13:59,440
test and see how it relates to the

00:13:58,240 --> 00:14:04,240
diagrams that you were showing earlier

00:13:59,440 --> 00:14:06,100
girl thank you all right let's do it so

00:14:04,240 --> 00:14:08,230
in this example we show a little more

00:14:06,100 --> 00:14:12,070
about what debounce is actually doing

00:14:08,230 --> 00:14:14,110
for us as you can see here the search

00:14:12,070 --> 00:14:14,760
action is being dispatched a number of

00:14:14,110 --> 00:14:19,149
times

00:14:14,760 --> 00:14:20,440
notice that in the expected result that

00:14:19,149 --> 00:14:23,440
even though the search action was

00:14:20,440 --> 00:14:28,690
dispatched three times the success

00:14:23,440 --> 00:14:30,970
action is only returned twice this is

00:14:28,690 --> 00:14:32,980
because the debounce the debounce is

00:14:30,970 --> 00:14:35,200
suppressing the values and not allowing

00:14:32,980 --> 00:14:37,240
the values to make it through until the

00:14:35,200 --> 00:14:41,470
30 frame delay that we had said earlier

00:14:37,240 --> 00:14:44,860
in the in the testbed had completed so

00:14:41,470 --> 00:14:47,380
now why don't we see how this this

00:14:44,860 --> 00:14:52,000
action stream and the expected result

00:14:47,380 --> 00:14:54,310
look in the diagram this marble diagram

00:14:52,000 --> 00:14:57,100
is showing how the data is flowing

00:14:54,310 --> 00:14:59,620
through our example and how it is and

00:14:57,100 --> 00:15:02,650
how it is influenced by the D balanced

00:14:59,620 --> 00:15:04,630
time operator sorry as you can see here

00:15:02,650 --> 00:15:06,910
in the diagram the values emitted by the

00:15:04,630 --> 00:15:09,660
observable correspond to the actions to

00:15:06,910 --> 00:15:12,160
the action stream in the example test

00:15:09,660 --> 00:15:14,020
the output from the observable shows how

00:15:12,160 --> 00:15:16,329
the values are affected by the D bounce

00:15:14,020 --> 00:15:19,079
time and how it corresponds to the

00:15:16,329 --> 00:15:22,450
expected result in our example test and

00:15:19,079 --> 00:15:23,829
now without further ado it's the time

00:15:22,450 --> 00:15:27,270
that you've all been waiting for

00:15:23,829 --> 00:15:29,850
it's our 80s dance battle

00:15:27,270 --> 00:15:31,080
this is exciting so how are we gonna do

00:15:29,850 --> 00:15:32,790
this we're gonna bring up some people

00:15:31,080 --> 00:15:34,050
maybe Brad you can come up and dance for

00:15:32,790 --> 00:15:36,450
us we'll get some other folks we'll have

00:15:34,050 --> 00:15:41,220
a battle sound good I mean we could do

00:15:36,450 --> 00:15:43,830
that or what better who better to show

00:15:41,220 --> 00:15:46,350
us the 80s dance moves then the 80s

00:15:43,830 --> 00:15:48,390
stars themselves it's time to make these

00:15:46,350 --> 00:15:51,600
eighty stars Duke it out in the most

00:15:48,390 --> 00:15:53,270
grueling but fabulous way it's a dance

00:15:51,600 --> 00:15:56,730
battle for the ages

00:15:53,270 --> 00:15:58,590
okay so again here's the URL for the

00:15:56,730 --> 00:16:01,620
project you're welcome to follow along

00:15:58,590 --> 00:16:03,990
if you'd like but it's not required so

00:16:01,620 --> 00:16:08,430
you can also just watch as we code

00:16:03,990 --> 00:16:10,470
through it after you've cloned the

00:16:08,430 --> 00:16:12,480
project if you are deciding to do this

00:16:10,470 --> 00:16:13,770
with us you can run NPM install to get

00:16:12,480 --> 00:16:16,890
all the correct dependencies you will

00:16:13,770 --> 00:16:20,550
need for this project to run the project

00:16:16,890 --> 00:16:24,060
on your machine just run NPM start from

00:16:20,550 --> 00:16:25,680
the command line and and then in a

00:16:24,060 --> 00:16:30,150
separate terminal if you want to run the

00:16:25,680 --> 00:16:32,370
test you can just run NPM test if you

00:16:30,150 --> 00:16:33,900
fall behind or miss a step you can run

00:16:32,370 --> 00:16:38,250
these commands to get caught up at the

00:16:33,900 --> 00:16:40,020
end of each task we are going to use

00:16:38,250 --> 00:16:41,760
test-driven development to write this

00:16:40,020 --> 00:16:44,550
feature so first we're going to start

00:16:41,760 --> 00:16:45,990
off with writing the test at this point

00:16:44,550 --> 00:16:46,680
the test will be failing because we

00:16:45,990 --> 00:16:49,560
haven't actually written the

00:16:46,680 --> 00:16:51,900
functionality yet so together we will

00:16:49,560 --> 00:16:54,540
make that functionality work and the

00:16:51,900 --> 00:16:56,070
test pass fingers crossed Keefe is a lot

00:16:54,540 --> 00:17:02,070
more optimistic about this than I am

00:16:56,070 --> 00:17:05,880
hey have a little faith in me 1987

00:17:02,070 --> 00:17:07,050
anyone nice okay they'll be live coding

00:17:05,880 --> 00:17:08,550
along with you so you can follow along

00:17:07,050 --> 00:17:12,020
with him and if you have any questions

00:17:08,550 --> 00:17:14,610
do your best robot and I will help you

00:17:12,020 --> 00:17:18,839
okay if you're following along if you

00:17:14,610 --> 00:17:21,660
head over to this this URL here it'll

00:17:18,839 --> 00:17:26,940
take you to the description let's go

00:17:21,660 --> 00:17:31,110
ahead and start coding so first of all

00:17:26,940 --> 00:17:33,930
let me get oh that's not where we're

00:17:31,110 --> 00:17:35,700
going yet okay so here's the application

00:17:33,930 --> 00:17:38,100
that we're working with so like we

00:17:35,700 --> 00:17:40,080
mentioned earlier it's a simple clone of

00:17:38,100 --> 00:17:40,620
the tour of heroes but we've modified a

00:17:40,080 --> 00:17:43,669
little bit

00:17:40,620 --> 00:17:48,150
we've replaced heroes with dancers and

00:17:43,669 --> 00:17:52,919
what we are able to do if I can see my

00:17:48,150 --> 00:17:55,230
mouse here is we have a set of some of

00:17:52,919 --> 00:17:58,470
the 80 stars and we're able to choose

00:17:55,230 --> 00:18:01,020
from those stars and pit them against

00:17:58,470 --> 00:18:05,010
each other so let's see here let's

00:18:01,020 --> 00:18:07,380
choose Susanna Hoffs all right and we

00:18:05,010 --> 00:18:10,860
can click the battle button and there we

00:18:07,380 --> 00:18:14,159
go they are in there dance battle battle

00:18:10,860 --> 00:18:16,350
processing problem is right now this is

00:18:14,159 --> 00:18:18,659
not actually processing the battle and

00:18:16,350 --> 00:18:21,710
telling us who is actually going to win

00:18:18,659 --> 00:18:25,500
so that's what we're gonna implement now

00:18:21,710 --> 00:18:29,010
all right so into the code base here so

00:18:25,500 --> 00:18:31,169
I am using Walla bjs in my editor that's

00:18:29,010 --> 00:18:33,330
how we get some of this nice feedback

00:18:31,169 --> 00:18:35,580
over here letting us know what tests are

00:18:33,330 --> 00:18:36,929
passing and failing you're welcome to

00:18:35,580 --> 00:18:39,450
use that if you're following along as

00:18:36,929 --> 00:18:41,460
well the configuration file for it is at

00:18:39,450 --> 00:18:44,010
the root of the project but not needed

00:18:41,460 --> 00:18:47,279
you can just run the tests using karma

00:18:44,010 --> 00:18:51,450
by running NPM tests at the at the root

00:18:47,279 --> 00:18:54,330
as well okay so again we are using good

00:18:51,450 --> 00:18:55,710
test-driven development style here so

00:18:54,330 --> 00:18:58,200
the first thing that we're going to do

00:18:55,710 --> 00:19:00,360
is write a test that will be failing and

00:18:58,200 --> 00:19:03,779
then fill in the functionality that's

00:19:00,360 --> 00:19:05,370
going to get that passing so real quick

00:19:03,779 --> 00:19:06,840
before we get into the test I'm just

00:19:05,370 --> 00:19:08,309
going to write the shell of our effects

00:19:06,840 --> 00:19:12,299
so that we can reference that in our

00:19:08,309 --> 00:19:18,720
tests so we are if I could spell that

00:19:12,299 --> 00:19:21,720
right writing an effect called battle it

00:19:18,720 --> 00:19:29,220
is going to return an observable of an

00:19:21,720 --> 00:19:31,559
action okay I think that is good for our

00:19:29,220 --> 00:19:35,100
shell so let's go ahead and move over to

00:19:31,559 --> 00:19:38,610
the tests and start writing here so we

00:19:35,100 --> 00:19:40,230
start off by writing our describe so

00:19:38,610 --> 00:19:42,149
this is going to be used to group

00:19:40,230 --> 00:19:47,029
together all of the tests that that

00:19:42,149 --> 00:19:47,029
we're writing for this particular effect

00:19:49,620 --> 00:19:55,020
okay so we've got our describe for

00:19:52,830 --> 00:20:00,260
grouping that let's go ahead and start

00:19:55,020 --> 00:20:00,260
writing our our test so this should

00:20:00,500 --> 00:20:18,539
return a battle outcome determined

00:20:08,429 --> 00:20:24,270
action with the outcome on success okay

00:20:18,539 --> 00:20:25,980
so now what's next so first of all we

00:20:24,270 --> 00:20:27,120
want to go ahead and set up our payload

00:20:25,980 --> 00:20:32,190
data like we were talking about earlier

00:20:27,120 --> 00:20:36,360
so we're gonna need an outcome and we

00:20:32,190 --> 00:20:37,649
have a nice room that gives us all of

00:20:36,360 --> 00:20:38,820
the possible outcomes there so we'll

00:20:37,649 --> 00:20:43,380
grab one of those

00:20:38,820 --> 00:20:46,669
we need a challenger which is a dancer

00:20:43,380 --> 00:20:46,669
and a challenge II

00:20:52,920 --> 00:20:56,910
now this is difficult looking to the

00:20:54,870 --> 00:21:00,900
side while I'm doing this but it's

00:20:56,910 --> 00:21:04,250
coming together okay thank you thank you

00:21:00,900 --> 00:21:06,630
okay so we've got our oh you know what

00:21:04,250 --> 00:21:09,360
realizing I forgot we got two new these

00:21:06,630 --> 00:21:11,250
up these are new instances of these

00:21:09,360 --> 00:21:14,070
classes so there we go there's all the

00:21:11,250 --> 00:21:16,860
red lines gone okay now we set up our

00:21:14,070 --> 00:21:20,730
starting in completion actions so this

00:21:16,860 --> 00:21:23,570
is again a new battle action and it

00:21:20,730 --> 00:21:27,090
takes a payload that includes the

00:21:23,570 --> 00:21:28,950
Challenger and the challenge II all

00:21:27,090 --> 00:21:33,240
right that looks satisfied and our

00:21:28,950 --> 00:21:34,760
completion action is a battle outcome

00:21:33,240 --> 00:21:38,490
[Music]

00:21:34,760 --> 00:21:42,300
determined action which is going to

00:21:38,490 --> 00:21:45,930
receive our outcome okay so let's go

00:21:42,300 --> 00:21:48,360
ahead and start let's see here I again

00:21:45,930 --> 00:21:50,700
did not move that up look at that

00:21:48,360 --> 00:22:00,750
okay so let's go ahead and set up our

00:21:50,700 --> 00:22:04,320
effect so the the action stream is a hot

00:22:00,750 --> 00:22:07,800
observable and so here we're just

00:22:04,320 --> 00:22:09,630
simulating the the action making its way

00:22:07,800 --> 00:22:15,950
into the action stream by being

00:22:09,630 --> 00:22:26,580
dispatched then we set up our battle

00:22:15,950 --> 00:22:31,620
this is a cold observable and here we

00:22:26,580 --> 00:22:36,960
are going to return the outcome all

00:22:31,620 --> 00:22:38,640
right now our expected results okay

00:22:36,960 --> 00:22:41,610
again like we were talking about earlier

00:22:38,640 --> 00:22:43,110
the the previous two steps add to I add

00:22:41,610 --> 00:22:44,820
a 10 frame delay so we need to account

00:22:43,110 --> 00:22:49,550
for both of those here so we have our

00:22:44,820 --> 00:22:49,550
210 frame delays and then

00:22:53,550 --> 00:22:58,140
we return our completion action okay

00:22:56,730 --> 00:23:02,100
there we go

00:22:58,140 --> 00:23:05,460
and that looks okay we'll just get rid

00:23:02,100 --> 00:23:07,740
of that little space there okay okay and

00:23:05,460 --> 00:23:10,530
lastly we just need to tell the dancer

00:23:07,740 --> 00:23:14,280
service action what it should be

00:23:10,530 --> 00:23:16,890
returning and in this case is our battle

00:23:14,280 --> 00:23:18,360
that'll include the outcome okay so now

00:23:16,890 --> 00:23:20,400
it's time to just set up what we

00:23:18,360 --> 00:23:25,110
actually expect the the result to be and

00:23:20,400 --> 00:23:28,559
in this case the the effect battle it

00:23:25,110 --> 00:23:35,790
should be an observable of our expected

00:23:28,559 --> 00:23:38,400
result okay all right so we have our

00:23:35,790 --> 00:23:40,320
tests written here and of course it is

00:23:38,400 --> 00:23:44,070
failing so let's go ahead and get it

00:23:40,320 --> 00:23:48,960
working alright so we're back at our

00:23:44,070 --> 00:24:00,059
effect so this is looking for again a

00:23:48,960 --> 00:24:00,270
type of the battle action okay there we

00:24:00,059 --> 00:24:03,360
go

00:24:00,270 --> 00:24:05,970
and once the battle action has been

00:24:03,360 --> 00:24:07,530
dispatched then the next thing that

00:24:05,970 --> 00:24:12,960
we're going to do is go ahead and

00:24:07,530 --> 00:24:15,660
execute the the function to get the the

00:24:12,960 --> 00:24:19,610
results so we'll take our action here

00:24:15,660 --> 00:24:24,450
this is the battle action and this

00:24:19,610 --> 00:24:28,380
starts dancer service okay here we go

00:24:24,450 --> 00:24:30,830
now this takes a couple of parameters so

00:24:28,380 --> 00:24:33,330
let's go ahead and fill that in so the

00:24:30,830 --> 00:24:35,250
we can get that off of the action

00:24:33,330 --> 00:24:39,080
payload we saw that earlier that that's

00:24:35,250 --> 00:24:46,440
where everything was being housed and

00:24:39,080 --> 00:24:48,270
the challenge II okay all right got that

00:24:46,440 --> 00:24:52,800
all set up now let's just go ahead and

00:24:48,270 --> 00:24:56,460
and map that over to our results so that

00:24:52,800 --> 00:24:58,400
function it returns an outcome and we're

00:24:56,460 --> 00:25:02,429
gonna map that over to the battle

00:24:58,400 --> 00:25:05,520
outcome determined and pass in the

00:25:02,429 --> 00:25:08,360
outcome and there we go

00:25:05,520 --> 00:25:08,360
green lights

00:25:08,480 --> 00:25:15,600
alright ok so so we have our happy path

00:25:13,320 --> 00:25:18,090
done next we need to take care of any

00:25:15,600 --> 00:25:19,970
errors that that might come up so let's

00:25:18,090 --> 00:25:22,260
go ahead and write the test for that

00:25:19,970 --> 00:25:24,120
this one might go a little bit faster

00:25:22,260 --> 00:25:26,490
because it's pretty similar in a lot of

00:25:24,120 --> 00:25:28,200
ways to the previous one so we can take

00:25:26,490 --> 00:25:30,540
advantage of doing a little copying and

00:25:28,200 --> 00:25:34,670
pasting but first let's write what we

00:25:30,540 --> 00:25:34,670
expect to happen so this should return

00:25:36,440 --> 00:25:48,120
this should return a battle fail action

00:25:41,190 --> 00:25:50,700
if there is an error ok so so we set up

00:25:48,120 --> 00:25:58,820
our payload payload data in this case

00:25:50,700 --> 00:26:04,500
it's going to be an error oh no it it

00:25:58,820 --> 00:26:06,540
failed ok so we have that and now I'm

00:26:04,500 --> 00:26:08,700
just going to go ahead and and since a

00:26:06,540 --> 00:26:10,670
lot of this is the same I'm gonna go

00:26:08,700 --> 00:26:13,260
ahead and copy that paste it down here

00:26:10,670 --> 00:26:14,700
the completion though is a little

00:26:13,260 --> 00:26:20,430
different so let's go ahead and write

00:26:14,700 --> 00:26:23,040
that one so in this case we are going to

00:26:20,430 --> 00:26:28,680
be doing a battle fail and its payload

00:26:23,040 --> 00:26:29,550
is the error and I again didn't do it up

00:26:28,680 --> 00:26:34,530
so there we go

00:26:29,550 --> 00:26:38,070
ok so the actions let's go ahead and set

00:26:34,530 --> 00:26:47,760
up our effect here this again is a hot

00:26:38,070 --> 00:26:51,600
observable passing in our starting

00:26:47,760 --> 00:26:52,830
action now the the battle itself is

00:26:51,600 --> 00:26:56,130
going to be a little different here

00:26:52,830 --> 00:26:59,340
because again this is our not-so-happy

00:26:56,130 --> 00:27:01,680
path so it is again a cold observable

00:26:59,340 --> 00:27:03,870
but instead of actually putting a

00:27:01,680 --> 00:27:05,790
variable in here to return a value we're

00:27:03,870 --> 00:27:06,390
instead going to have that dreaded error

00:27:05,790 --> 00:27:10,560
in it

00:27:06,390 --> 00:27:12,840
so in no value being passed passed into

00:27:10,560 --> 00:27:17,220
that variable but instead we're gonna

00:27:12,840 --> 00:27:20,350
throw the air ok and and then the rest

00:27:17,220 --> 00:27:24,130
of it is is pretty similar so

00:27:20,350 --> 00:27:29,890
let's go ahead and again do a little bit

00:27:24,130 --> 00:27:33,370
of copy and paste so alright so we have

00:27:29,890 --> 00:27:34,720
our we have our test written it's again

00:27:33,370 --> 00:27:39,220
failing let's go ahead and get it

00:27:34,720 --> 00:27:41,020
working okay so in this case really all

00:27:39,220 --> 00:27:43,210
that we need to do is catch that error

00:27:41,020 --> 00:27:47,710
and map it over to the appropriate

00:27:43,210 --> 00:27:51,910
function so we're going to do a catch

00:27:47,710 --> 00:27:55,050
error we have the error here and we're

00:27:51,910 --> 00:28:00,400
going to make that an observable of a

00:27:55,050 --> 00:28:04,900
battle fail with the error as the

00:28:00,400 --> 00:28:06,910
payload and with that back to green all

00:28:04,900 --> 00:28:07,870
right I'm gonna save that let's let's

00:28:06,910 --> 00:28:10,120
take a look at what we have in the

00:28:07,870 --> 00:28:14,290
application now and see see how far

00:28:10,120 --> 00:28:17,140
we've come so let's see here alright so

00:28:14,290 --> 00:28:19,420
we're back at our application we got

00:28:17,140 --> 00:28:20,830
Michael Jackson's still here let's see

00:28:19,420 --> 00:28:24,010
who do we want to have them battle this

00:28:20,830 --> 00:28:26,620
time we got the list here any yeah yeah

00:28:24,010 --> 00:28:27,850
what Bowie David Bowie here we go all

00:28:26,620 --> 00:28:30,640
right let's see who wins

00:28:27,850 --> 00:28:32,470
all right ah Michael Jackson isn't he

00:28:30,640 --> 00:28:34,270
awesome this is great but we didn't get

00:28:32,470 --> 00:28:35,650
to see them dancing hey that's that's

00:28:34,270 --> 00:28:38,320
really what we're after right we want to

00:28:35,650 --> 00:28:41,800
see them dance alright so let's go ahead

00:28:38,320 --> 00:28:43,210
and and change this up so that we can

00:28:41,800 --> 00:28:44,050
actually see that happen well add in a

00:28:43,210 --> 00:28:48,400
little delay

00:28:44,050 --> 00:28:50,740
and still process the battle but you

00:28:48,400 --> 00:28:53,850
know get to see the action so again

00:28:50,740 --> 00:28:56,820
let's head back over to our tests and

00:28:53,850 --> 00:29:03,300
we'll write one more test here

00:28:56,820 --> 00:29:10,620
so this should return a battle outcome

00:29:03,300 --> 00:29:17,440
determined action after a 30 frame delay

00:29:10,620 --> 00:29:19,900
okay okay so there we go

00:29:17,440 --> 00:29:22,360
I'm again I'm just gonna go ahead just

00:29:19,900 --> 00:29:24,790
to the keep us moving here I'm gonna go

00:29:22,360 --> 00:29:27,730
ahead and and copy since most of that is

00:29:24,790 --> 00:29:29,440
is pretty much the same and in in your

00:29:27,730 --> 00:29:31,720
real applications you might take some

00:29:29,440 --> 00:29:33,280
some of this's is very similar you could

00:29:31,720 --> 00:29:34,000
move some of this up to the top of the

00:29:33,280 --> 00:29:36,610
describe

00:29:34,000 --> 00:29:38,230
and share it amongst all of your tests

00:29:36,610 --> 00:29:40,360
but I'm just going to go ahead and leave

00:29:38,230 --> 00:29:42,940
that there for now the one difference

00:29:40,360 --> 00:29:45,070
here is going to be that in our starting

00:29:42,940 --> 00:29:47,590
action we're going to go ahead and pass

00:29:45,070 --> 00:29:51,670
in a value into an optional parameter

00:29:47,590 --> 00:29:56,320
here the delay so let's go ahead and add

00:29:51,670 --> 00:30:00,870
in the 30 frame delay right there okay

00:29:56,320 --> 00:30:05,620
and then we will go ahead and set up our

00:30:00,870 --> 00:30:09,940
our observable our effect again so let's

00:30:05,620 --> 00:30:12,160
get that down here and but this one of

00:30:09,940 --> 00:30:15,070
course we're planning on having a delay

00:30:12,160 --> 00:30:16,930
again right so before we were just

00:30:15,070 --> 00:30:19,810
planning on having the 210 frame delays

00:30:16,930 --> 00:30:22,000
this time we need to take it take into

00:30:19,810 --> 00:30:23,860
account the additional 30 30 frames so

00:30:22,000 --> 00:30:27,490
we'll go ahead and add our 30 frames

00:30:23,860 --> 00:30:32,080
right there we've got to tell our dancer

00:30:27,490 --> 00:30:37,110
service what it should be returning and

00:30:32,080 --> 00:30:44,500
that again is the battle and then our

00:30:37,110 --> 00:30:49,660
expectation the effects battle to to be

00:30:44,500 --> 00:30:51,910
the expected observable okay how we

00:30:49,660 --> 00:30:54,610
doing all right we got our test written

00:30:51,910 --> 00:30:56,290
it's again failing so let's go ahead and

00:30:54,610 --> 00:30:58,360
get that working and then see where we

00:30:56,290 --> 00:31:01,210
are so we just need to add in the delay

00:30:58,360 --> 00:31:03,010
again here so right before we map out

00:31:01,210 --> 00:31:07,720
the results we're just going to go ahead

00:31:03,010 --> 00:31:11,980
and add in a delay now what we want to

00:31:07,720 --> 00:31:13,800
do again the delay was optional so we're

00:31:11,980 --> 00:31:16,420
going to go ahead and grab the the

00:31:13,800 --> 00:31:19,390
payload from the action here and take

00:31:16,420 --> 00:31:21,100
the delay and use that but in optional

00:31:19,390 --> 00:31:23,740
so if it's not there we're just going to

00:31:21,100 --> 00:31:25,360
go ahead and set a zero delay the other

00:31:23,740 --> 00:31:26,980
thing that we need to do because notice

00:31:25,360 --> 00:31:28,750
that we're still in the red here we need

00:31:26,980 --> 00:31:31,420
to get this test working or we need to

00:31:28,750 --> 00:31:33,700
get the this functionality working we

00:31:31,420 --> 00:31:35,170
need to go ahead and use that injected

00:31:33,700 --> 00:31:37,960
test scheduler that we had set up

00:31:35,170 --> 00:31:42,640
earlier so we're going to go ahead and

00:31:37,960 --> 00:31:45,400
see if these the scheduler is is

00:31:42,640 --> 00:31:47,770
available for us but if it's not we'll

00:31:45,400 --> 00:31:50,350
just use the default async scheduler

00:31:47,770 --> 00:31:52,840
and there we are we were momentarily we

00:31:50,350 --> 00:31:54,130
are back in the green so awesome let's

00:31:52,840 --> 00:31:56,740
take a look at the test yeah

00:31:54,130 --> 00:31:58,870
everything's looking good this is great

00:31:56,740 --> 00:32:01,620
alright let's let's take a look back at

00:31:58,870 --> 00:32:04,539
our application and see how we're doing

00:32:01,620 --> 00:32:06,370
okay so again Michael Jackson last time

00:32:04,539 --> 00:32:07,510
it was David Bowie any other takers here

00:32:06,370 --> 00:32:09,970
who's next

00:32:07,510 --> 00:32:11,200
Mick Jagger Stevie Nicks Stevie Nicks

00:32:09,970 --> 00:32:13,210
Stevie Nicks

00:32:11,200 --> 00:32:15,880
all right here we go let's see how this

00:32:13,210 --> 00:32:18,510
goes okay we got some dancing going on

00:32:15,880 --> 00:32:21,039
battle in progress who's gonna win

00:32:18,510 --> 00:32:24,549
Michael Jackson again that guy's amazing

00:32:21,039 --> 00:32:27,279
oh all right

00:32:24,549 --> 00:32:27,820
great okay well let's let's see what's

00:32:27,279 --> 00:32:33,330
next

00:32:27,820 --> 00:32:33,330
so last but not least it's quiz time

00:32:33,990 --> 00:32:39,580
okay well Keith is getting that set up

00:32:37,260 --> 00:32:43,149
we're gonna hear from our awesome

00:32:39,580 --> 00:32:46,029
sponsors I don't want to put this the

00:32:43,149 --> 00:32:49,510
too close okay about what our prize it

00:32:46,029 --> 00:32:52,090
is short version another long version

00:32:49,510 --> 00:32:53,710
when we went on wins okay hi my name is

00:32:52,090 --> 00:32:55,960
Brian Darth ways digital and we are

00:32:53,710 --> 00:32:57,970
auctioning offering not auctioning

00:32:55,960 --> 00:33:03,899
offering one public ticket to our

00:32:57,970 --> 00:33:03,899
angular bootcamp we I am very serious

00:33:04,200 --> 00:33:09,070
online if you win the quiz you get to go

00:33:07,450 --> 00:33:15,960
to angular bootcamp yep

00:33:09,070 --> 00:33:21,370
you can also somebody else yeah great

00:33:15,960 --> 00:33:24,340
yes so angular bootcamp oh man they got

00:33:21,370 --> 00:33:26,020
it yeah okay you can go on your phone or

00:33:24,340 --> 00:33:29,580
you think on your laptop to Kahoot dot

00:33:26,020 --> 00:33:33,429
it enter the pin come up with an awesome

00:33:29,580 --> 00:33:34,570
nickname I don't know if Mike and

00:33:33,429 --> 00:33:38,309
Brandon are still in here but if you are

00:33:34,570 --> 00:33:38,309
you can't play that's cheating

00:33:40,970 --> 00:33:46,980
[Laughter]

00:33:43,730 --> 00:33:49,049
it's awesome okay a lot of people here

00:33:46,980 --> 00:33:51,029
amazing what's that where's our music

00:33:49,049 --> 00:33:51,779
where's our awful yeah I don't know the

00:33:51,029 --> 00:33:55,080
music

00:33:51,779 --> 00:33:57,480
music seems to be gone but maybe it

00:33:55,080 --> 00:33:58,649
starts when we it's you dude we still

00:33:57,480 --> 00:34:00,149
got a lot of people coming in here

00:33:58,649 --> 00:34:04,049
alright well we'll give you just another

00:34:00,149 --> 00:34:11,190
moment we're actually doing really good

00:34:04,049 --> 00:34:14,780
on time so yeah okay I'm getting about

00:34:11,190 --> 00:34:14,780
30 more seconds

00:34:16,220 --> 00:34:25,500
Brad Green's hat okay and there are

00:34:22,470 --> 00:34:28,319
rules to this game if whoever is in the

00:34:25,500 --> 00:34:29,879
top three I'm gonna say who is this

00:34:28,319 --> 00:34:33,240
person because everybody wants to know

00:34:29,879 --> 00:34:36,060
and and you're gonna have to yell or do

00:34:33,240 --> 00:34:39,750
a dance or something that's the rule

00:34:36,060 --> 00:34:44,159
and if you don't do it sorry man okay

00:34:39,750 --> 00:34:48,119
let's start okay where is my mouse there

00:34:44,159 --> 00:34:50,369
it is there we go alright are you ready

00:34:48,119 --> 00:34:52,319
nine questions coming up here nine

00:34:50,369 --> 00:34:54,270
questions I hope you took notes what is

00:34:52,319 --> 00:34:57,589
the relationship between observables and

00:34:54,270 --> 00:34:59,730
marbles marbles represent observables

00:34:57,589 --> 00:35:02,220
observables watch for marbles to emit a

00:34:59,730 --> 00:35:05,990
value or marbles are hot observables or

00:35:02,220 --> 00:35:05,990
marbles and hot and observables are cold

00:35:12,380 --> 00:35:18,089
alright we're getting a lot of answers

00:35:14,579 --> 00:35:19,670
here times almost up 48 correct answers

00:35:18,089 --> 00:35:23,010
here that's great

00:35:19,670 --> 00:35:28,920
awesome alright let's see who do we have

00:35:23,010 --> 00:35:31,349
in the in the league in 1880 okay here

00:35:28,920 --> 00:35:33,589
we go next what are the observable types

00:35:31,349 --> 00:35:36,510
we have covered today

00:35:33,589 --> 00:35:39,270
rxjs observables but specific like be

00:35:36,510 --> 00:35:42,329
specific here hot and cold or a teaser

00:35:39,270 --> 00:35:48,109
bowls all of the above is not an option

00:35:42,329 --> 00:35:48,109
I'm sorry okay

00:35:49,660 --> 00:35:56,710
there's no music 3 2 1

00:35:54,089 --> 00:35:57,720
73 correct answers this is awesome you

00:35:56,710 --> 00:36:02,130
guys are doing great

00:35:57,720 --> 00:36:05,140
ok so we had a change in the lead here

00:36:02,130 --> 00:36:09,009
flipster flips there and I a nice

00:36:05,140 --> 00:36:11,019
alright good job get a narrow lead at

00:36:09,009 --> 00:36:13,660
this point though keep it up alright

00:36:11,019 --> 00:36:20,170
next so what is the difference between

00:36:13,660 --> 00:36:22,569
hot and cold observables just so H o is

00:36:20,170 --> 00:36:25,750
continuously watching even when test

00:36:22,569 --> 00:36:30,160
isn't running cold observables are built

00:36:25,750 --> 00:36:32,559
in hot observables are written in a

00:36:30,160 --> 00:36:35,200
template while cold observables are in a

00:36:32,559 --> 00:36:40,480
components what say you

00:36:35,200 --> 00:36:41,680
oh good job guys nice nice ok let's see

00:36:40,480 --> 00:36:49,599
who's in the lead

00:36:41,680 --> 00:36:57,789
who's Lani Danny yeah are you an

00:36:49,599 --> 00:36:58,720
instructor at angular bootcamp okay all

00:36:57,789 --> 00:37:02,759
right next question

00:36:58,720 --> 00:37:05,619
what does the dash mean in a marble test

00:37:02,759 --> 00:37:08,079
it separates values and makes it easier

00:37:05,619 --> 00:37:10,990
to read it represents values being

00:37:08,079 --> 00:37:14,950
displayed on the screen it is a measure

00:37:10,990 --> 00:37:18,549
of time in frames and I'm sad the music

00:37:14,950 --> 00:37:20,410
is really bad well that's not supposed

00:37:18,549 --> 00:37:22,599
to make you sad if it's bad I mean it's

00:37:20,410 --> 00:37:24,069
good like it's a good it's a good like

00:37:22,599 --> 00:37:26,710
Michael Jackson bad who won all the

00:37:24,069 --> 00:37:30,579
dance battles ok ok so it's a measure of

00:37:26,710 --> 00:37:34,480
time in frames okay nice

00:37:30,579 --> 00:37:37,000
Justin T this is amazing good job

00:37:34,480 --> 00:37:37,599
who's anyways I have no idea this is

00:37:37,000 --> 00:37:39,940
crazy

00:37:37,599 --> 00:37:41,079
ok all right here we go next question

00:37:39,940 --> 00:37:42,759
here we go

00:37:41,079 --> 00:37:46,839
who had the best selling album of the

00:37:42,759 --> 00:37:48,519
80s Madonna Prince Michael Jackson her

00:37:46,839 --> 00:37:53,109
David Bowie this should be easy

00:37:48,519 --> 00:37:56,529
come on guys huh question mark no

00:37:53,109 --> 00:38:01,410
googling it either this is good yep here

00:37:56,529 --> 00:38:05,800
we go how we doing 81 anyone answers

00:38:01,410 --> 00:38:08,080
82 right at the last 65 right yeah

00:38:05,800 --> 00:38:15,010
Michael Jackson just wins everything

00:38:08,080 --> 00:38:22,230
this is danger dan' yeah did you Dan all

00:38:15,010 --> 00:38:22,230
right it's okay I got it no applesauce

00:38:22,650 --> 00:38:28,720
okay I got a thumbs up back there all

00:38:26,080 --> 00:38:31,360
right okay all right here we go

00:38:28,720 --> 00:38:33,010
what type of observable does the

00:38:31,360 --> 00:38:35,010
subscription care at work with I believe

00:38:33,010 --> 00:38:37,330
I got fussed at for this one

00:38:35,010 --> 00:38:39,100
hot and cold they will both subscribe

00:38:37,330 --> 00:38:43,390
eventually hot observables or colds

00:38:39,100 --> 00:38:50,950
intervals dude seventy three seventy and

00:38:43,390 --> 00:38:54,700
you guys are quick it was amazing all

00:38:50,950 --> 00:38:57,100
right two one midnight all right a

00:38:54,700 --> 00:38:59,200
little more even spread here forty three

00:38:57,100 --> 00:39:01,230
correct answers so let's see how we're

00:38:59,200 --> 00:39:01,230
doing

00:39:01,310 --> 00:39:07,570
[Applause]

00:39:04,020 --> 00:39:10,180
okay how many questions left let's see

00:39:07,570 --> 00:39:12,720
here seven of nine okay

00:39:10,180 --> 00:39:14,560
so why won't the subscription quo

00:39:12,720 --> 00:39:15,820
subscription care at work on cold

00:39:14,560 --> 00:39:16,890
observables what you talking about

00:39:15,820 --> 00:39:20,109
Willis

00:39:16,890 --> 00:39:21,850
it works on both because cold

00:39:20,109 --> 00:39:24,490
observables are not subscribing to

00:39:21,850 --> 00:39:29,250
anything since hot observables are

00:39:24,490 --> 00:39:31,240
already running they have to subscribe

00:39:29,250 --> 00:39:33,840
there we go this one's a little sweet

00:39:31,240 --> 00:39:36,100
didn't go over this this question so ah

00:39:33,840 --> 00:39:38,890
there we go okay

00:39:36,100 --> 00:39:39,730
thirty-eight correct answers let's see

00:39:38,890 --> 00:39:45,520
how we're doing

00:39:39,730 --> 00:39:48,220
hey Jones hey Jones all right good job

00:39:45,520 --> 00:39:50,680
hey Jones yo do they go okay

00:39:48,220 --> 00:39:53,170
hey good job all right I think we got

00:39:50,680 --> 00:39:55,270
two more so okay still a chance for

00:39:53,170 --> 00:40:01,119
folks to more questions how many frames

00:39:55,270 --> 00:40:05,980
are represented by 1 - 15 frames 25 30

00:40:01,119 --> 00:40:07,840
frames 10 frames it's 15 frames wait oh

00:40:05,980 --> 00:40:10,320
I wasn't supposed to say that wait no

00:40:07,840 --> 00:40:10,320
it's not

00:40:10,829 --> 00:40:21,960
fifteen frames pretty sure

00:40:12,900 --> 00:40:21,960
no all right 71 correct answers I think

00:40:23,579 --> 00:40:31,359
sorry we apologize okay

00:40:26,890 --> 00:40:34,089
hey Jones yeah hey Joe oh nice even

00:40:31,359 --> 00:40:36,339
though he's going away good job Justin d

00:40:34,089 --> 00:40:39,069
though thank you oh we got the next man

00:40:36,339 --> 00:40:42,880
what does an X represent in a marble

00:40:39,069 --> 00:40:45,099
diagram these spots of course that's got

00:40:42,880 --> 00:40:48,819
to be at a subscription point for a hot

00:40:45,099 --> 00:40:51,880
observable a value emitted or an error

00:40:48,819 --> 00:40:54,099
it's the spot right it's a spot pretty

00:40:51,880 --> 00:40:55,089
sure it's a spot I mean what you talking

00:40:54,099 --> 00:41:01,059
about Willis what you talking about

00:40:55,089 --> 00:41:04,119
Willis okay one second good job it's

00:41:01,059 --> 00:41:05,680
nice nice most of you a couple of people

00:41:04,119 --> 00:41:07,420
actually took us up on the spot this is

00:41:05,680 --> 00:41:13,720
great I like that all right

00:41:07,420 --> 00:41:16,380
okay this is awesome

00:41:13,720 --> 00:41:21,839
good job Jared come on up here you won

00:41:16,380 --> 00:41:23,859
did yeah you are I always do that

00:41:21,839 --> 00:41:25,329
alright so I'm just gonna tell you

00:41:23,859 --> 00:41:28,269
really quick about angular bootcamp it

00:41:25,329 --> 00:41:29,950
is a three-day intensive course that we

00:41:28,269 --> 00:41:32,410
offer it's taught by the likes of Bill

00:41:29,950 --> 00:41:33,759
Odom Paul Spears Lance Finney Sanne you

00:41:32,410 --> 00:41:36,549
so if we had a lot of great instructors

00:41:33,759 --> 00:41:38,019
out there we'd do it publicly in various

00:41:36,549 --> 00:41:40,690
cities throughout the US online we also

00:41:38,019 --> 00:41:41,859
do it privately for teams so many of you

00:41:40,690 --> 00:41:43,329
in this room probably do not need

00:41:41,859 --> 00:41:45,099
angular training why are we giving this

00:41:43,329 --> 00:41:47,799
out well you can give it to your

00:41:45,099 --> 00:41:51,579
mother-in-law your neighbor's cat or you

00:41:47,799 --> 00:41:53,140
can apply it to a team purchase so we

00:41:51,579 --> 00:41:55,779
also do private like your team so feel

00:41:53,140 --> 00:41:57,910
free to apply this to either yourself

00:41:55,779 --> 00:41:59,140
your friends or anybody else and if you

00:41:57,910 --> 00:42:00,190
have any questions stop by and see us in

00:41:59,140 --> 00:42:02,490
the booth outside and thank you very

00:42:00,190 --> 00:42:02,490
much

00:42:03,780 --> 00:42:12,280
good job Jared all right awesome my

00:42:08,890 --> 00:42:14,650
storm okay so on okay it's a little bit

00:42:12,280 --> 00:42:16,750
more know what's done okay what's next

00:42:14,650 --> 00:42:22,330
here we go so we're gonna review really

00:42:16,750 --> 00:42:24,370
quick so in this talk we briefly

00:42:22,330 --> 00:42:26,320
discussed the benefits of marble testing

00:42:24,370 --> 00:42:31,090
or unit testing but marble testing in

00:42:26,320 --> 00:42:33,250
specific all right that thing stopped

00:42:31,090 --> 00:42:36,520
working so here we go we went over

00:42:33,250 --> 00:42:39,760
marbles and marble diagrams we looked at

00:42:36,520 --> 00:42:41,770
marble syntax and we talked about hot

00:42:39,760 --> 00:42:44,230
and cold observables we went through

00:42:41,770 --> 00:42:45,670
some example marble tests discussed the

00:42:44,230 --> 00:42:48,670
test scheduler and how we can use that

00:42:45,670 --> 00:42:51,640
in our tests to override the scheduler

00:42:48,670 --> 00:42:54,280
we had an 80s dance off where we

00:42:51,640 --> 00:42:55,720
exercised together or wrote a little bit

00:42:54,280 --> 00:43:01,810
of code together implementing marble

00:42:55,720 --> 00:43:03,340
tests and we had a quiz we would like to

00:43:01,810 --> 00:43:05,680
give a special thank you to the Angie

00:43:03,340 --> 00:43:06,280
conference organizers some of which are

00:43:05,680 --> 00:43:11,800
in the room

00:43:06,280 --> 00:43:13,570
and of course the ng rx organizers and

00:43:11,800 --> 00:43:15,310
the angular community you guys are great

00:43:13,570 --> 00:43:18,610
and if you don't know one of the

00:43:15,310 --> 00:43:20,290
organizers is actually my mom so we'd

00:43:18,610 --> 00:43:23,830
like to say a very very special thank

00:43:20,290 --> 00:43:25,540
you to the intercom for doing so here

00:43:23,830 --> 00:43:28,180
are the slides one more time and they

00:43:25,540 --> 00:43:32,440
will be tweeted out after our talk so no

00:43:28,180 --> 00:43:36,900
worries if you did not get them and now

00:43:32,440 --> 00:43:36,900
you know and knowing is half the battle

00:43:39,530 --> 00:43:41,590

YouTube URL: https://www.youtube.com/watch?v=dwDtMs4mN48


