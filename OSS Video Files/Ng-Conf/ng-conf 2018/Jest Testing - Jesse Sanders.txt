Title: Jest Testing - Jesse Sanders
Publication date: 2018-11-16
Playlist: ng-conf 2018
Description: 
	ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,030 --> 00:00:03,990
alright hey everybody thanks so much for

00:00:01,709 --> 00:00:05,549
coming we're going to talk about just

00:00:03,990 --> 00:00:09,000
testing anybody heard about just yet

00:00:05,549 --> 00:00:10,500
anybody using it right now so just is

00:00:09,000 --> 00:00:11,580
like this super cool framework they're

00:00:10,500 --> 00:00:12,599
going to talk to you about today and

00:00:11,580 --> 00:00:14,759
we're going to take a look at how we'd

00:00:12,599 --> 00:00:16,560
use this within grx but first before we

00:00:14,759 --> 00:00:18,539
get into it too far

00:00:16,560 --> 00:00:20,939
tell you a little bit of story about

00:00:18,539 --> 00:00:22,769
this so I love testing right

00:00:20,939 --> 00:00:24,269
I always kick off every project and I'm

00:00:22,769 --> 00:00:25,260
like okay we're gonna write a bunch of

00:00:24,269 --> 00:00:28,080
tests we're gonna make sure everything's

00:00:25,260 --> 00:00:30,029
got really great coverage and then we

00:00:28,080 --> 00:00:32,040
start getting into our our sprint and

00:00:30,029 --> 00:00:33,420
things start to grind a little bit we

00:00:32,040 --> 00:00:35,670
start to get a little bit behind and

00:00:33,420 --> 00:00:37,890
okay well we only got like a certain

00:00:35,670 --> 00:00:39,450
percentage of coverage and and then we

00:00:37,890 --> 00:00:41,790
get a little further along and that

00:00:39,450 --> 00:00:44,399
percentage keeps going down and testing

00:00:41,790 --> 00:00:46,140
takes a lot of time and and before we

00:00:44,399 --> 00:00:47,280
know what what happens is is that we

00:00:46,140 --> 00:00:48,930
kind of put the test on the back burner

00:00:47,280 --> 00:00:53,370
so we can get our code out to production

00:00:48,930 --> 00:00:54,899
and we we just never make it so really

00:00:53,370 --> 00:00:57,449
what I like to think here is I really

00:00:54,899 --> 00:00:59,940
like the idea of testing and actually I

00:00:57,449 --> 00:01:01,710
really like the idea of you writing

00:00:59,940 --> 00:01:02,520
tasks because my code is pretty good you

00:01:01,710 --> 00:01:03,870
know I don't I don't really have to

00:01:02,520 --> 00:01:07,400
worry about my code it's your code that

00:01:03,870 --> 00:01:10,439
I'm really kind of concerned about so

00:01:07,400 --> 00:01:13,290
test seems hard we never have enough

00:01:10,439 --> 00:01:14,729
time I have to do a lot of setup I got

00:01:13,290 --> 00:01:16,590
to deal with mocks I got to deal with my

00:01:14,729 --> 00:01:18,060
data I got to figure out okay hey I'm

00:01:16,590 --> 00:01:19,650
going to expect this and then what its

00:01:18,060 --> 00:01:21,450
gonna expect and making sure that data

00:01:19,650 --> 00:01:22,740
all looks right and it's almost like a

00:01:21,450 --> 00:01:25,590
whole new set of code that I need to

00:01:22,740 --> 00:01:29,009
maintain just to be able to run the

00:01:25,590 --> 00:01:30,900
tests okay and so never have enough time

00:01:29,009 --> 00:01:34,140
I've got all this all these deadlines

00:01:30,900 --> 00:01:36,390
and whatnot and so here comes this

00:01:34,140 --> 00:01:38,220
library called jest and just really is

00:01:36,390 --> 00:01:39,689
gonna change how you think about testing

00:01:38,220 --> 00:01:41,460
how are you going to approach your

00:01:39,689 --> 00:01:43,320
testing so jess was developed by the

00:01:41,460 --> 00:01:47,610
Facebook team and it's great for

00:01:43,320 --> 00:01:50,040
reactive testing so it's built upon a

00:01:47,610 --> 00:01:54,240
library called Jess Dom with the jet is

00:01:50,040 --> 00:01:55,979
a JavaScript implementation very similar

00:01:54,240 --> 00:01:58,740
like running a headless browser like

00:01:55,979 --> 00:02:01,259
Chrome but it's a pure JavaScript

00:01:58,740 --> 00:02:04,920
implementation and and it's super super

00:02:01,259 --> 00:02:06,719
fast so why use Jess one is that it is

00:02:04,920 --> 00:02:08,280
super fast and one of the things that it

00:02:06,719 --> 00:02:09,090
does is allows all your failed tests to

00:02:08,280 --> 00:02:10,200
run first

00:02:09,090 --> 00:02:12,120
so you ever had it where you got a

00:02:10,200 --> 00:02:13,380
thousand tests and you got two or three

00:02:12,120 --> 00:02:15,090
that are failing but there

00:02:13,380 --> 00:02:16,530
they don't run till like I don't know

00:02:15,090 --> 00:02:18,120
two or three minutes in and by that time

00:02:16,530 --> 00:02:19,320
you know you're already on Facebook and

00:02:18,120 --> 00:02:22,440
you're you know kind of checking stuff

00:02:19,320 --> 00:02:24,540
out and well that all goes away

00:02:22,440 --> 00:02:25,980
the the other really big thing here and

00:02:24,540 --> 00:02:27,480
we're going to dig in today a snapshot

00:02:25,980 --> 00:02:29,070
testing and this is really going to

00:02:27,480 --> 00:02:31,740
change how you set up your tests and

00:02:29,070 --> 00:02:33,270
it's gonna save you a ton of time the

00:02:31,740 --> 00:02:34,830
other great thing about jest here is all

00:02:33,270 --> 00:02:36,960
your tests are sandbox so they run in

00:02:34,830 --> 00:02:38,310
their own little worker all Global's are

00:02:36,960 --> 00:02:39,690
all cleaned up you don't have to worry

00:02:38,310 --> 00:02:41,370
about the fact of like hey we're

00:02:39,690 --> 00:02:42,810
polluting tests to test a test and

00:02:41,370 --> 00:02:44,460
sometimes depending on the order that

00:02:42,810 --> 00:02:47,010
they run they fail we don't have to

00:02:44,460 --> 00:02:49,650
worry about that so they're all

00:02:47,010 --> 00:02:51,630
sandboxed another great thing here who

00:02:49,650 --> 00:02:53,970
likes errors in in karma right now with

00:02:51,630 --> 00:02:56,640
with a test runner who loves run you

00:02:53,970 --> 00:02:58,890
know just scrolling through stack traces

00:02:56,640 --> 00:03:00,480
right well that all goes away so now you

00:02:58,890 --> 00:03:01,560
get some really nice error reporting

00:03:00,480 --> 00:03:03,060
that's going to tell you the exact line

00:03:01,560 --> 00:03:05,190
of where things are at here's what I

00:03:03,060 --> 00:03:06,870
expected here's what I received and

00:03:05,190 --> 00:03:08,310
given me a really nice output so that I

00:03:06,870 --> 00:03:09,510
don't have to go you know run this thing

00:03:08,310 --> 00:03:12,210
down and try to figure out what's going

00:03:09,510 --> 00:03:14,370
on the other beautiful thing here is

00:03:12,210 --> 00:03:17,460
that it from just a pure JavaScript

00:03:14,370 --> 00:03:19,380
implementation it's zero config I don't

00:03:17,460 --> 00:03:20,940
actually have to configure anything now

00:03:19,380 --> 00:03:22,470
for running in the CLI that's not

00:03:20,940 --> 00:03:24,120
totally true we have to do a little bit

00:03:22,470 --> 00:03:26,510
of configuration but I'm gonna walk you

00:03:24,120 --> 00:03:28,980
through that today and it's super simple

00:03:26,510 --> 00:03:31,200
so let's talk about installation

00:03:28,980 --> 00:03:32,970
installs are super simple I don't even

00:03:31,200 --> 00:03:34,350
have to install just itself if you

00:03:32,970 --> 00:03:36,630
actually just installed a just preset

00:03:34,350 --> 00:03:39,000
angular package it will go ahead and

00:03:36,630 --> 00:03:40,350
install just it'll install this preset

00:03:39,000 --> 00:03:42,959
here this is going to set up off most of

00:03:40,350 --> 00:03:45,090
my configuration for me it's gonna load

00:03:42,959 --> 00:03:46,860
a library called TS Jess so that it can

00:03:45,090 --> 00:03:49,500
deal with typescript it also loads the

00:03:46,860 --> 00:03:53,160
just types so what's really nice here is

00:03:49,500 --> 00:03:54,360
that just is built upon jasmine so as

00:03:53,160 --> 00:03:56,160
you're gonna see here we start getting

00:03:54,360 --> 00:03:57,540
in a few examples this is gonna look

00:03:56,160 --> 00:03:58,860
exactly what you like what you've

00:03:57,540 --> 00:04:00,060
already been writing you're not having

00:03:58,860 --> 00:04:02,100
to learn a whole new way of writing

00:04:00,060 --> 00:04:03,840
tests a whole new language and

00:04:02,100 --> 00:04:06,480
descriptors whatnot you have describes

00:04:03,840 --> 00:04:09,240
you have tests you have it you can use

00:04:06,480 --> 00:04:11,730
jess to run your existing tests you

00:04:09,240 --> 00:04:13,560
don't even really have to convert it so

00:04:11,730 --> 00:04:16,260
one of the things we have to do is we

00:04:13,560 --> 00:04:18,030
have to get just configured partly we

00:04:16,260 --> 00:04:19,709
need to tell it for all of our preset

00:04:18,030 --> 00:04:21,660
variables we want to use this Jess

00:04:19,709 --> 00:04:23,460
preset angular now I can put this it

00:04:21,660 --> 00:04:25,710
either into a Jess config or I can put

00:04:23,460 --> 00:04:26,970
it into my package JSON I really like it

00:04:25,710 --> 00:04:28,590
here so that it's not

00:04:26,970 --> 00:04:29,850
polluting my package I want to keep

00:04:28,590 --> 00:04:31,290
things really really simple for my

00:04:29,850 --> 00:04:31,830
package and I don't want to have to put

00:04:31,290 --> 00:04:33,600
that there

00:04:31,830 --> 00:04:35,610
I want to tell it where my roots are and

00:04:33,600 --> 00:04:37,800
then I want to tell it where this set up

00:04:35,610 --> 00:04:40,680
just file is so one of the problems with

00:04:37,800 --> 00:04:43,530
j/s Dom is it doesn't have this property

00:04:40,680 --> 00:04:46,080
called transform and so we need to go

00:04:43,530 --> 00:04:49,230
ahead and add a set up just here to

00:04:46,080 --> 00:04:51,510
define a property on our document body

00:04:49,230 --> 00:04:54,510
style called transform and once we have

00:04:51,510 --> 00:04:57,060
that then this will work with with our

00:04:54,510 --> 00:04:59,070
angular code really nicely so now

00:04:57,060 --> 00:05:00,870
running tests running tests is super

00:04:59,070 --> 00:05:03,060
simple I can either just run just

00:05:00,870 --> 00:05:05,160
straight up and it'll go ahead and kick

00:05:03,060 --> 00:05:09,630
off my test for me or I can go into my

00:05:05,160 --> 00:05:11,730
package.json and change my test key

00:05:09,630 --> 00:05:13,350
therefore under scripts to just and I

00:05:11,730 --> 00:05:15,630
can add additional stuff I can do - -

00:05:13,350 --> 00:05:17,460
coverage or - - watch however I want to

00:05:15,630 --> 00:05:20,340
run that and then I can just run NPM

00:05:17,460 --> 00:05:22,560
test if I want so again really simple to

00:05:20,340 --> 00:05:24,510
configure here didn't have to do a whole

00:05:22,560 --> 00:05:26,220
lot the the preset library makes us

00:05:24,510 --> 00:05:28,050
really simple and then up and away I'm

00:05:26,220 --> 00:05:30,480
going I can start writing tests and

00:05:28,050 --> 00:05:32,730
running them right away so I talked

00:05:30,480 --> 00:05:34,919
about air outputs so that that whole

00:05:32,730 --> 00:05:36,780
stack trace thing with karma just drives

00:05:34,919 --> 00:05:38,040
me crazy because I'm like I'm scroll all

00:05:36,780 --> 00:05:39,510
the way back up to the top to try to

00:05:38,040 --> 00:05:42,360
figure out what's going on and where the

00:05:39,510 --> 00:05:43,979
error is occurring so and even then I've

00:05:42,360 --> 00:05:45,150
got this crazy stack trace I've got to

00:05:43,979 --> 00:05:47,310
sit there and kind of like look and

00:05:45,150 --> 00:05:49,860
figure out what line this test output

00:05:47,310 --> 00:05:51,990
here is beautiful I can see exactly hey

00:05:49,860 --> 00:05:54,450
I wrote this test and and you can kind

00:05:51,990 --> 00:05:57,330
of see here at the bottom you know I

00:05:54,450 --> 00:05:59,070
expect the the some function of 1 & 2 to

00:05:57,330 --> 00:06:01,410
be 4 so I got a little bit of problem

00:05:59,070 --> 00:06:06,560
here with my expectation but I get a

00:06:01,410 --> 00:06:06,560
really nice output on what's going on

00:06:06,800 --> 00:06:11,280
all right so code coverage one of the

00:06:09,090 --> 00:06:13,800
nice things about just is code coverage

00:06:11,280 --> 00:06:15,600
comes out of the box I don't have to

00:06:13,800 --> 00:06:17,610
pull anything in I have to pull in

00:06:15,600 --> 00:06:19,169
Istanbul or or or get that all configure

00:06:17,610 --> 00:06:21,180
now I know we have it really nice when

00:06:19,169 --> 00:06:22,680
we're dealing with the CLI because with

00:06:21,180 --> 00:06:24,270
the CLI it automatically goes ahead and

00:06:22,680 --> 00:06:25,830
configures this for me but if I want to

00:06:24,270 --> 00:06:27,030
make changes to that then you know

00:06:25,830 --> 00:06:29,460
obviously I've got to go configure that

00:06:27,030 --> 00:06:32,850
on my own so here I can go ahead and

00:06:29,460 --> 00:06:34,890
just do - - coverage and it'll go ahead

00:06:32,850 --> 00:06:36,780
and give me an output like this so now I

00:06:34,890 --> 00:06:37,919
can see with my statements branch's

00:06:36,780 --> 00:06:39,450
functions and lines

00:06:37,919 --> 00:06:40,559
what percentage of coverage I have on

00:06:39,450 --> 00:06:43,469
each one

00:06:40,559 --> 00:06:45,329
and it doesn't totally fit in there but

00:06:43,469 --> 00:06:50,189
it show me whatever uncovered lines I

00:06:45,329 --> 00:06:52,679
have so super simple on our test

00:06:50,189 --> 00:06:56,759
coverage there's a couple other options

00:06:52,679 --> 00:06:59,069
here with the CLI one is I want to

00:06:56,759 --> 00:07:00,809
filter tests by file names so if I only

00:06:59,069 --> 00:07:05,839
want to run tests that are within the

00:07:00,809 --> 00:07:05,839
some library or any-any

00:07:06,019 --> 00:07:11,069
TS files that I have that are named sum

00:07:08,909 --> 00:07:14,309
or match on on some so it's gonna use a

00:07:11,069 --> 00:07:15,629
red reg X expression here but I want to

00:07:14,309 --> 00:07:17,909
run that with coverage it's only gonna

00:07:15,629 --> 00:07:20,519
run ones with that filename I can also

00:07:17,909 --> 00:07:22,199
put just into a watch mode so watch mode

00:07:20,519 --> 00:07:26,699
is also a very powerful way of running

00:07:22,199 --> 00:07:27,929
tests when I go into a watch mode it's

00:07:26,699 --> 00:07:30,209
gonna go ahead and bring up this menu I

00:07:27,929 --> 00:07:32,669
can press a to run all tests I can press

00:07:30,209 --> 00:07:34,049
F to only run failed tests so if I've

00:07:32,669 --> 00:07:35,129
got a bunch of tests that are failing I

00:07:34,049 --> 00:07:38,189
don't have to sit here and deal with

00:07:35,129 --> 00:07:40,769
like who's done F describe you know

00:07:38,189 --> 00:07:43,349
who's done F it and then who's done X

00:07:40,769 --> 00:07:45,749
described and then checked it in right

00:07:43,349 --> 00:07:48,360
that's I'm totally guilty of that and

00:07:45,749 --> 00:07:49,559
I'm like wow our coverage just like went

00:07:48,360 --> 00:07:52,169
way way down

00:07:49,559 --> 00:07:54,089
so I don't have to do that anymore I

00:07:52,169 --> 00:07:55,529
don't have to sit there and manipulate

00:07:54,089 --> 00:07:56,849
my code to try to just run the tests

00:07:55,529 --> 00:07:59,519
that are failing I can I could quickly

00:07:56,849 --> 00:08:01,619
just get down to that also when we're

00:07:59,519 --> 00:08:02,789
when we're doing snapshots which we'll

00:08:01,619 --> 00:08:04,289
talk about in a minute when those are

00:08:02,789 --> 00:08:06,809
failing it'll also give me an option to

00:08:04,289 --> 00:08:08,429
update those and I can step by step

00:08:06,809 --> 00:08:11,669
through one by one to get them updated

00:08:08,429 --> 00:08:13,049
or I can you know play the Vegas version

00:08:11,669 --> 00:08:15,209
of it which I just roll the dice you

00:08:13,049 --> 00:08:16,409
know and just throw it down and see and

00:08:15,209 --> 00:08:19,499
yeah just update all of them

00:08:16,409 --> 00:08:22,019
so we'll talk about that in a second all

00:08:19,499 --> 00:08:23,429
right just Global's here these Global's

00:08:22,019 --> 00:08:25,439
should look very familiar these are all

00:08:23,429 --> 00:08:27,089
pretty much the same Global's that you

00:08:25,439 --> 00:08:28,559
have with Jasmine really the main

00:08:27,089 --> 00:08:31,019
difference here is we have two of them

00:08:28,559 --> 00:08:32,759
require actual and require mock so those

00:08:31,019 --> 00:08:35,669
are two different Global's that are

00:08:32,759 --> 00:08:36,779
available but otherwise everything else

00:08:35,669 --> 00:08:39,179
that's there is stuff that you're

00:08:36,779 --> 00:08:42,659
already used to so let's take a look at

00:08:39,179 --> 00:08:44,790
ng rx a simple action here what we have

00:08:42,659 --> 00:08:48,689
is a simple action that does our select

00:08:44,790 --> 00:08:50,399
and what we have is our type is customer

00:08:48,689 --> 00:08:52,110
action types of select and I have a

00:08:50,399 --> 00:08:54,270
constructor with a payload that's public

00:08:52,110 --> 00:08:55,770
so what I know with this is I can

00:08:54,270 --> 00:08:57,390
on the type and I can test what my

00:08:55,770 --> 00:08:59,760
payload is and make sure that my actions

00:08:57,390 --> 00:09:03,600
doing what I want so pretty simple test

00:08:59,760 --> 00:09:05,610
right so here's my test written for jest

00:09:03,600 --> 00:09:08,700
I have my described customer select

00:09:05,610 --> 00:09:10,620
should set the selected ID now what I've

00:09:08,700 --> 00:09:12,690
done here is i'm i've got a customer

00:09:10,620 --> 00:09:15,450
object so there's some of my test data

00:09:12,690 --> 00:09:17,310
and I'm creating a new action and I'm

00:09:15,450 --> 00:09:21,149
calling my customer action select

00:09:17,310 --> 00:09:23,339
passing at that customer and then I'm

00:09:21,149 --> 00:09:25,800
writing expect action type to be

00:09:23,339 --> 00:09:28,110
customer select action expect action

00:09:25,800 --> 00:09:29,279
payload to be my customer this is great

00:09:28,110 --> 00:09:30,660
this is this should look really familiar

00:09:29,279 --> 00:09:32,399
this is probably how you're already

00:09:30,660 --> 00:09:34,110
writing code so this isn't really

00:09:32,399 --> 00:09:35,399
anything special and there's really no

00:09:34,110 --> 00:09:37,440
reason to go to jest if you're gonna

00:09:35,399 --> 00:09:40,080
write tests like this other than the

00:09:37,440 --> 00:09:41,100
watch and a few things like that so

00:09:40,080 --> 00:09:44,580
that's where we get into snapshot

00:09:41,100 --> 00:09:47,010
testing snapshot testing compares the

00:09:44,580 --> 00:09:48,060
expectation to a stored snapshot so

00:09:47,010 --> 00:09:49,920
what's gonna happen now it's going to

00:09:48,060 --> 00:09:52,050
create a folder right next to your test

00:09:49,920 --> 00:09:53,730
called under and I think it's double

00:09:52,050 --> 00:09:56,040
underscore snapshot and it's going to

00:09:53,730 --> 00:09:58,440
store snapshots of what your

00:09:56,040 --> 00:09:59,880
expectations are the beautiful part is

00:09:58,440 --> 00:10:02,430
if it doesn't exist it's going to go

00:09:59,880 --> 00:10:03,990
ahead and create it for you so you don't

00:10:02,430 --> 00:10:05,579
have to go and manually try to figure

00:10:03,990 --> 00:10:08,100
out like okay what's the expected output

00:10:05,579 --> 00:10:09,660
here and we spend so much time trying to

00:10:08,100 --> 00:10:10,980
code these up to figure out and then

00:10:09,660 --> 00:10:15,570
when it changes now we have to maintain

00:10:10,980 --> 00:10:18,390
all of this that all goes away so it's

00:10:15,570 --> 00:10:19,740
gonna perform a diff on our snapshots so

00:10:18,390 --> 00:10:21,839
this is going to look just like what you

00:10:19,740 --> 00:10:24,240
see and get so you're gonna see a diff

00:10:21,839 --> 00:10:25,620
and hey this is this is what I expected

00:10:24,240 --> 00:10:26,850
this is what I received and it's going

00:10:25,620 --> 00:10:28,560
to be red and green and you're gonna be

00:10:26,850 --> 00:10:30,360
able to see where the changes are so you

00:10:28,560 --> 00:10:32,550
can determine very quickly hey is this

00:10:30,360 --> 00:10:34,290
right or is this wrong is this based off

00:10:32,550 --> 00:10:35,730
the refactor I just did or is this

00:10:34,290 --> 00:10:39,209
something you know some other problem

00:10:35,730 --> 00:10:41,430
that I haven't been aware of and I can

00:10:39,209 --> 00:10:42,990
easily update these snapshots on this

00:10:41,430 --> 00:10:46,140
refactor so I can use the watch I can

00:10:42,990 --> 00:10:47,550
step through file-by-file and say yep go

00:10:46,140 --> 00:10:49,890
ahead and update this this is great I'm

00:10:47,550 --> 00:10:51,180
good or I can say no go ahead and set

00:10:49,890 --> 00:10:52,740
these aside and I'll come back to them

00:10:51,180 --> 00:10:55,440
and then I can go back and look at them

00:10:52,740 --> 00:10:56,730
and inspect them one by one now the

00:10:55,440 --> 00:10:59,579
other thing with snapshots is these are

00:10:56,730 --> 00:11:01,380
gonna get checked in with your code so

00:10:59,579 --> 00:11:02,430
these are going to go up to get so

00:11:01,380 --> 00:11:03,900
they're gonna be part of your review

00:11:02,430 --> 00:11:05,459
process when you're doing your PRS

00:11:03,900 --> 00:11:07,050
you're going to be looking at snapshot

00:11:05,459 --> 00:11:07,860
files and making sure does this make

00:11:07,050 --> 00:11:09,870
sense

00:11:07,860 --> 00:11:11,760
so if I've got a developer that is

00:11:09,870 --> 00:11:13,350
checking in a bunch of stuff and they

00:11:11,760 --> 00:11:15,390
just did the massive hey let's just you

00:11:13,350 --> 00:11:17,610
know roll the dice and update at all me

00:11:15,390 --> 00:11:19,410
as a as a reviewer on a pull request

00:11:17,610 --> 00:11:20,370
it's gonna be my responsibility take a

00:11:19,410 --> 00:11:24,960
look at that and go like hey this

00:11:20,370 --> 00:11:27,860
doesn't actually make sense so let's

00:11:24,960 --> 00:11:30,360
look at us a snapshot test example here

00:11:27,860 --> 00:11:32,640
so here this is the same exact task

00:11:30,360 --> 00:11:34,380
slightly you know simplified but we've

00:11:32,640 --> 00:11:35,850
got our customer actions select with a

00:11:34,380 --> 00:11:38,100
customer that data is defined somewhere

00:11:35,850 --> 00:11:40,230
else and now all we have to do is say

00:11:38,100 --> 00:11:43,920
expect my action payload to match my

00:11:40,230 --> 00:11:45,180
snapshot so I don't have to actually go

00:11:43,920 --> 00:11:46,380
set up a whole bunch of data I don't

00:11:45,180 --> 00:11:48,180
have to you know I do have to set up a

00:11:46,380 --> 00:11:49,350
customer to pass in but I don't have to

00:11:48,180 --> 00:11:51,570
sit there and maintain what it looks

00:11:49,350 --> 00:11:53,940
like and making sure all the everything

00:11:51,570 --> 00:11:59,160
matches exactly the same so what's

00:11:53,940 --> 00:12:01,200
actually stored in my snapshot here it's

00:11:59,160 --> 00:12:03,060
going to go ahead and store based on the

00:12:01,200 --> 00:12:04,530
name of the test if I have multiple

00:12:03,060 --> 00:12:06,900
expectations then it's going to denote

00:12:04,530 --> 00:12:09,000
one two three four whatnot in it and

00:12:06,900 --> 00:12:11,430
it's going to go ahead and and the value

00:12:09,000 --> 00:12:13,530
on this is going to be an object and

00:12:11,430 --> 00:12:15,300
this is my customer object so I can take

00:12:13,530 --> 00:12:16,950
quickly take a look at this and say yeah

00:12:15,300 --> 00:12:18,750
that's actually correct that's what I'm

00:12:16,950 --> 00:12:21,540
expecting my my payload to be as this

00:12:18,750 --> 00:12:23,100
customer so visually I'm able to inspect

00:12:21,540 --> 00:12:25,020
it very very quickly I don't have to

00:12:23,100 --> 00:12:27,390
maintain this when it changes it's gonna

00:12:25,020 --> 00:12:28,560
tell me that it's not the same and I can

00:12:27,390 --> 00:12:30,810
determine whether or not this makes

00:12:28,560 --> 00:12:34,050
sense to update my snapshot or if I need

00:12:30,810 --> 00:12:37,230
to fix my code right here so on a

00:12:34,050 --> 00:12:39,870
reducer so reducers are pretty simple to

00:12:37,230 --> 00:12:45,860
test they are and get my timer back up

00:12:39,870 --> 00:12:48,810
there make sure we don't run over timer

00:12:45,860 --> 00:12:50,970
so a reducer is really nothing more than

00:12:48,810 --> 00:12:53,190
a very simple function with a big little

00:12:50,970 --> 00:12:54,570
switch statement in it right so here

00:12:53,190 --> 00:12:57,360
what we have is we have our Select

00:12:54,570 --> 00:12:58,710
action type where we're spreading our

00:12:57,360 --> 00:13:01,410
state and then we're setting our

00:12:58,710 --> 00:13:04,470
selected customer ID so for us to test

00:13:01,410 --> 00:13:06,930
that we have our describe and our test

00:13:04,470 --> 00:13:08,820
we're setting up our action with a new

00:13:06,930 --> 00:13:10,890
select and then we're calling our

00:13:08,820 --> 00:13:13,230
reducer function giving it some initial

00:13:10,890 --> 00:13:16,980
state and an action and we get a new

00:13:13,230 --> 00:13:19,500
state and in from there I can say expect

00:13:16,980 --> 00:13:21,360
this result to match my snapshot so this

00:13:19,500 --> 00:13:23,490
is a great way of being able to test

00:13:21,360 --> 00:13:25,980
I reducer to think about reducers I'm

00:13:23,490 --> 00:13:28,709
reducers always responsible for taking a

00:13:25,980 --> 00:13:30,630
given state with an action and now we're

00:13:28,709 --> 00:13:32,070
producing a new state so now I can go

00:13:30,630 --> 00:13:34,890
through all my different scenarios very

00:13:32,070 --> 00:13:37,050
quickly about based off if I have this

00:13:34,890 --> 00:13:38,370
state and then I pass it this action am

00:13:37,050 --> 00:13:40,200
I going to end up in the state that I

00:13:38,370 --> 00:13:41,940
think I'm going to end up in so I can I

00:13:40,200 --> 00:13:43,649
can code these up very very quickly I

00:13:41,940 --> 00:13:45,839
can go ahead and pass in the correct

00:13:43,649 --> 00:13:47,220
state to hit the scenarios that I want

00:13:45,839 --> 00:13:51,000
to and I don't have to do a lot of

00:13:47,220 --> 00:13:53,250
maintenance on this now we get into

00:13:51,000 --> 00:13:56,100
effects effects are a little bit more

00:13:53,250 --> 00:13:59,720
tricky so when we look at this here we

00:13:56,100 --> 00:14:03,660
have a an observable we're watching for

00:13:59,720 --> 00:14:05,220
the customer action type load so that's

00:14:03,660 --> 00:14:06,630
what we're gonna watch for we're waiting

00:14:05,220 --> 00:14:08,519
for that to fire and when that fires

00:14:06,630 --> 00:14:09,540
we're gonna call a service and that

00:14:08,519 --> 00:14:12,240
service is going to return a new

00:14:09,540 --> 00:14:14,519
observable right and I'm gonna map that

00:14:12,240 --> 00:14:17,190
to either a load success or I'm gonna

00:14:14,519 --> 00:14:18,600
catch the air and do a load fail so when

00:14:17,190 --> 00:14:21,000
initially looking at this it's like oh

00:14:18,600 --> 00:14:23,010
my god how do I test this this is like

00:14:21,000 --> 00:14:24,800
an observable with an observable and and

00:14:23,010 --> 00:14:27,449
how do i how do I pull this all together

00:14:24,800 --> 00:14:30,810
well that that is actually handled

00:14:27,449 --> 00:14:33,300
really nicely by a library called rxjs

00:14:30,810 --> 00:14:36,390
marbles so what this does is this gives

00:14:33,300 --> 00:14:39,949
us a synchronous and dependable way to

00:14:36,390 --> 00:14:42,959
test asynchronous code so we can control

00:14:39,949 --> 00:14:45,660
when things get emitted and what gets

00:14:42,959 --> 00:14:48,630
emitted it gives us two main methods one

00:14:45,660 --> 00:14:52,500
is a hot the hot gives us an observer or

00:14:48,630 --> 00:14:54,329
a subject that behaves as if it's been

00:14:52,500 --> 00:14:57,000
running the entire time and the cold

00:14:54,329 --> 00:14:58,740
gives us an observable that fires up as

00:14:57,000 --> 00:15:00,480
soon as the test fire out so let's take

00:14:58,740 --> 00:15:04,230
a look at what the testing might look

00:15:00,480 --> 00:15:06,329
like for this all right see if I can

00:15:04,230 --> 00:15:08,100
explain this to you here so we have an

00:15:06,329 --> 00:15:10,410
action we're gonna watch for a load and

00:15:08,100 --> 00:15:14,040
then we're on the completion we're

00:15:10,410 --> 00:15:16,500
expecting a load success the response

00:15:14,040 --> 00:15:21,089
here is the response that I want to have

00:15:16,500 --> 00:15:23,579
the service handle and so I wanted to

00:15:21,089 --> 00:15:27,120
return a list of customers and my

00:15:23,579 --> 00:15:29,850
expected ending result is the completion

00:15:27,120 --> 00:15:34,649
which is my load success so I want a an

00:15:29,850 --> 00:15:35,279
observable of a load success with an

00:15:34,649 --> 00:15:38,220
array of cost

00:15:35,279 --> 00:15:39,749
murrs returned so the next thing i'm

00:15:38,220 --> 00:15:42,180
going to do is on my action stream i'm

00:15:39,749 --> 00:15:44,370
going to go ahead and set a hot subject

00:15:42,180 --> 00:15:47,029
here and it's going to be the action so

00:15:44,370 --> 00:15:51,449
this is automatically going to fire up

00:15:47,029 --> 00:15:52,410
watching for the load action and the

00:15:51,449 --> 00:15:54,300
next thing i want to do is i want to go

00:15:52,410 --> 00:15:56,249
ahead and mock the customer service load

00:15:54,300 --> 00:15:58,499
so just has a nice function called FN

00:15:56,249 --> 00:16:00,180
that then i can go ahead and say set

00:15:58,499 --> 00:16:05,189
this load to be my response my response

00:16:00,180 --> 00:16:07,019
and UM's is a subject actually it's re

00:16:05,189 --> 00:16:09,749
that's an observable and and it's going

00:16:07,019 --> 00:16:11,129
to resolve to an array of customers and

00:16:09,749 --> 00:16:14,009
then from there I can say expect the

00:16:11,129 --> 00:16:16,170
effects load to match my snapshot of the

00:16:14,009 --> 00:16:17,759
expected the expected again is the

00:16:16,170 --> 00:16:19,709
completion the completion is the load

00:16:17,759 --> 00:16:21,079
success with that array and so what's

00:16:19,709 --> 00:16:25,769
going to get stored into my snapshot

00:16:21,079 --> 00:16:29,069
isn't observable with my action with my

00:16:25,769 --> 00:16:31,110
array of customers so makes it really

00:16:29,069 --> 00:16:32,850
easy to be able to update the snapshot

00:16:31,110 --> 00:16:35,459
make sure the data is right I don't have

00:16:32,850 --> 00:16:36,629
to do some crazy comparisons and try to

00:16:35,459 --> 00:16:38,459
figure it out it's actually going to

00:16:36,629 --> 00:16:40,259
wrap the whole thing and store that off

00:16:38,459 --> 00:16:43,589
for me this will be nice clean and

00:16:40,259 --> 00:16:44,970
succinct so the the other side of the

00:16:43,589 --> 00:16:47,129
effect is we need to test the air path

00:16:44,970 --> 00:16:49,350
so it's beautiful here is I can use the

00:16:47,129 --> 00:16:50,550
the pound sign so everything is pretty

00:16:49,350 --> 00:16:52,319
much the same right I'm watching for the

00:16:50,550 --> 00:16:55,470
load for the action but my completion is

00:16:52,319 --> 00:16:57,540
a load fail with expecting an error and

00:16:55,470 --> 00:17:00,689
in my response I want to have from the

00:16:57,540 --> 00:17:03,629
service is a is an error and I want to

00:17:00,689 --> 00:17:05,100
go ahead and let that fire and at the

00:17:03,629 --> 00:17:06,480
end here I'm going to make sure that

00:17:05,100 --> 00:17:08,100
it's going to be the it's going to match

00:17:06,480 --> 00:17:10,890
my snapshot of expected which is

00:17:08,100 --> 00:17:14,159
observable with a load fail with a

00:17:10,890 --> 00:17:16,079
message of error so really quick here

00:17:14,159 --> 00:17:17,970
we're gonna wrap up the components is

00:17:16,079 --> 00:17:19,500
the other really powerful piece so this

00:17:17,970 --> 00:17:20,669
allows me to go ahead and take a

00:17:19,500 --> 00:17:21,990
component what do you think about

00:17:20,669 --> 00:17:23,579
component especially presentation

00:17:21,990 --> 00:17:24,959
components they're deterministic based

00:17:23,579 --> 00:17:28,530
on a given state that will render the

00:17:24,959 --> 00:17:30,360
same exact way every single time so

00:17:28,530 --> 00:17:33,210
knowing that I can go ahead and pass an

00:17:30,360 --> 00:17:35,250
array of customers and go ahead and set

00:17:33,210 --> 00:17:37,559
that on my component call fixture detect

00:17:35,250 --> 00:17:40,260
changes and now expect my fixture to

00:17:37,559 --> 00:17:43,649
match the snapshot so if I come over

00:17:40,260 --> 00:17:45,929
here here's the let me just make this a

00:17:43,649 --> 00:17:48,000
little bit bigger for you here's the

00:17:45,929 --> 00:17:48,920
output now I can see I have my app

00:17:48,000 --> 00:17:52,710
customers

00:17:48,920 --> 00:17:54,990
it got set to a an array and within that

00:17:52,710 --> 00:17:58,280
it went ahead and rendered the app

00:17:54,990 --> 00:18:01,560
customers actually that it rendered the

00:17:58,280 --> 00:18:03,270
the child and the child produced the

00:18:01,560 --> 00:18:05,790
unordered list and the line item with

00:18:03,270 --> 00:18:08,930
customer one test one so I can

00:18:05,790 --> 00:18:11,670
automatically have it go ahead and

00:18:08,930 --> 00:18:13,350
render out my HTML and make sure that

00:18:11,670 --> 00:18:15,150
it's actually still rendering the same

00:18:13,350 --> 00:18:16,500
way so a really good example if let's

00:18:15,150 --> 00:18:18,390
say I had a bunch of tags or links that

00:18:16,500 --> 00:18:20,040
that we're first pointing to Instagram

00:18:18,390 --> 00:18:21,720
and then I make some changes cuz now we

00:18:20,040 --> 00:18:24,600
wanted to point to Facebook I'd be able

00:18:21,720 --> 00:18:25,860
to see that very very quickly so this is

00:18:24,600 --> 00:18:26,970
a really great way to be able to test

00:18:25,860 --> 00:18:28,110
your components and make sure that

00:18:26,970 --> 00:18:29,960
they're working the way that you want

00:18:28,110 --> 00:18:35,100
their rendering the way that you want

00:18:29,960 --> 00:18:36,810
alright so just to wrap up just is a

00:18:35,100 --> 00:18:38,310
really great library for being able to

00:18:36,810 --> 00:18:41,040
test quickly I don't have a whole lot of

00:18:38,310 --> 00:18:43,110
setup a very little configuration my

00:18:41,040 --> 00:18:44,820
tests run faster I don't have to wait

00:18:43,110 --> 00:18:46,230
for my failed tests to run they're gonna

00:18:44,820 --> 00:18:46,980
come right up to the front I can move

00:18:46,230 --> 00:18:49,140
through them quickly

00:18:46,980 --> 00:18:50,880
the greatest advantage here to me is

00:18:49,140 --> 00:18:52,470
when we go and refactor now I have two

00:18:50,880 --> 00:18:54,180
hundred tests now I no longer have to

00:18:52,470 --> 00:18:55,050
comment all those out to get it to

00:18:54,180 --> 00:18:57,360
production right

00:18:55,050 --> 00:18:59,460
I can get those fixed in usually a

00:18:57,360 --> 00:19:02,790
couple of hours versus a week or two

00:18:59,460 --> 00:19:05,160
right so very lastly just really quick

00:19:02,790 --> 00:19:07,710
my name is Jesse Sanders I'm the CEO of

00:19:05,160 --> 00:19:09,060
rebug what we do is architecture reviews

00:19:07,710 --> 00:19:12,030
customized training and angular

00:19:09,060 --> 00:19:14,340
consulting you can reach me at Jesse s

00:19:12,030 --> 00:19:16,410
underscore Bri bug or you can reach me

00:19:14,340 --> 00:19:17,910
at my email which is Jesse Sanders at

00:19:16,410 --> 00:19:19,530
Bri bug if you found this presentation

00:19:17,910 --> 00:19:21,300
interesting and you'd like to learn a

00:19:19,530 --> 00:19:23,520
little bit more about it come by we've

00:19:21,300 --> 00:19:24,930
got a booth right outside here and I

00:19:23,520 --> 00:19:26,310
would love to meet you and get your

00:19:24,930 --> 00:19:28,260
questions I'll take any questions out in

00:19:26,310 --> 00:19:31,720
the hallway so thank you for coming

00:19:28,260 --> 00:19:31,720

YouTube URL: https://www.youtube.com/watch?v=d91uDEmbBUs


