Title: Strategies for Server Side Rendering Angular Applications - Vikram Subramanian
Publication date: 2018-11-16
Playlist: ng-conf 2018
Description: 
	ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,000 --> 00:00:07,589
hi everybody how's everybody doing all

00:00:03,959 --> 00:00:11,010
right good all right so I'm Vikram I

00:00:07,589 --> 00:00:13,740
work in the angular team and I lead the

00:00:11,010 --> 00:00:16,039
angular universal project today I'm

00:00:13,740 --> 00:00:19,140
going to be talking about strategies for

00:00:16,039 --> 00:00:21,779
server-side rendering and essentially

00:00:19,140 --> 00:00:25,199
it's not just about the server-side but

00:00:21,779 --> 00:00:27,269
how we transfer the bits from the server

00:00:25,199 --> 00:00:29,460
to the client so there's a lot of the

00:00:27,269 --> 00:00:33,420
client side stuff also involved when you

00:00:29,460 --> 00:00:35,130
are thinking about this so before any of

00:00:33,420 --> 00:00:39,180
like going into any of the new

00:00:35,130 --> 00:00:43,020
strategies we just want to like give a

00:00:39,180 --> 00:00:46,020
short description of why you would be

00:00:43,020 --> 00:00:48,800
interested in server-side rendering this

00:00:46,020 --> 00:00:53,989
is a slide from igor sessio presentation

00:00:48,800 --> 00:00:57,989
so essentially server-side rendering is

00:00:53,989 --> 00:01:00,690
not like completely necessary if you

00:00:57,989 --> 00:01:03,930
wanted to SEO clients areas here is also

00:01:00,690 --> 00:01:07,470
possible but what server-side rendering

00:01:03,930 --> 00:01:12,080
allows you to do is get better quality

00:01:07,470 --> 00:01:14,400
of SEO so so far

00:01:12,080 --> 00:01:16,320
whenever some people have been asking

00:01:14,400 --> 00:01:17,790
who should use it we are being just

00:01:16,320 --> 00:01:21,420
saying here if you want faster

00:01:17,790 --> 00:01:26,040
performance SEO our social preview use

00:01:21,420 --> 00:01:29,700
sort angler Universal but that just

00:01:26,040 --> 00:01:33,750
seems to confuse people more so what we

00:01:29,700 --> 00:01:38,189
would like to present here in ng-conf is

00:01:33,750 --> 00:01:39,720
something that Jeff Whelpley who's one

00:01:38,189 --> 00:01:43,259
of the original cofounders of angular

00:01:39,720 --> 00:01:46,430
Universal told me is to think about

00:01:43,259 --> 00:01:49,079
whether your users

00:01:46,430 --> 00:01:53,899
discover your app for the first time

00:01:49,079 --> 00:01:58,140
through a link right so this means that

00:01:53,899 --> 00:02:00,899
this includes SEO crawlers essentially

00:01:58,140 --> 00:02:03,360
being able to get into your site and

00:02:00,899 --> 00:02:06,509
index every relevant information your

00:02:03,360 --> 00:02:10,950
site so that it makes your app more

00:02:06,509 --> 00:02:13,500
discoverable right and one of the more

00:02:10,950 --> 00:02:19,290
important things to think about when you

00:02:13,500 --> 00:02:22,020
about SEO it is not just about like on

00:02:19,290 --> 00:02:26,160
screen SEO where the crawler can get to

00:02:22,020 --> 00:02:30,420
your data but also about off-screen SEO

00:02:26,160 --> 00:02:32,760
where components like Google Analytics

00:02:30,420 --> 00:02:36,930
are tracking whether new users to your

00:02:32,760 --> 00:02:39,720
site are bouncing off too quickly

00:02:36,930 --> 00:02:42,900
this would also degrade your SEO

00:02:39,720 --> 00:02:46,380
rankings and not rank you as one of the

00:02:42,900 --> 00:02:50,220
authoritative sources of information

00:02:46,380 --> 00:02:52,590
right so so performance and SEO go

00:02:50,220 --> 00:02:56,900
hand-in-hand and we should think of it

00:02:52,590 --> 00:03:00,530
more in terms of discoverability of your

00:02:56,900 --> 00:03:05,130
application or website so from there

00:03:00,530 --> 00:03:07,650
let's just consider a demo that I built

00:03:05,130 --> 00:03:10,140
especially for this talk it's called

00:03:07,650 --> 00:03:17,100
angular shop it's essentially

00:03:10,140 --> 00:03:20,239
masquerading ecommerce site and it it is

00:03:17,100 --> 00:03:25,980
essentially something where you can buy

00:03:20,239 --> 00:03:27,390
itself Google branded merchandise please

00:03:25,980 --> 00:03:30,510
don't sell Google branded merchandise

00:03:27,390 --> 00:03:33,060
Google will sue you this is just an

00:03:30,510 --> 00:03:35,489
example right so this is forked from the

00:03:33,060 --> 00:03:38,340
polymer shop so all the images and

00:03:35,489 --> 00:03:41,060
everything is gone from that so I wanted

00:03:38,340 --> 00:03:44,370
to see like this is like a typical

00:03:41,060 --> 00:03:47,370
angular application using the router

00:03:44,370 --> 00:03:49,980
lazy loading material components

00:03:47,370 --> 00:03:53,070
everything that makes developing an

00:03:49,980 --> 00:03:56,160
angular enjoyable right so it's it's

00:03:53,070 --> 00:04:01,079
supposed to represent typical angular

00:03:56,160 --> 00:04:04,079
application so it's using already using

00:04:01,079 --> 00:04:06,110
the CLI so it's using a OT it's using

00:04:04,079 --> 00:04:10,620
build optimizer it's using minification

00:04:06,110 --> 00:04:13,440
so we should be good right so this is

00:04:10,620 --> 00:04:17,729
just like the like a very initial setup

00:04:13,440 --> 00:04:20,609
that I had for this application and I

00:04:17,729 --> 00:04:23,700
essentially ran lighthouse just on the

00:04:20,609 --> 00:04:25,210
same machine I was running my server and

00:04:23,700 --> 00:04:28,509
these are

00:04:25,210 --> 00:04:31,720
not like real-world numbers but you

00:04:28,509 --> 00:04:33,370
should treat them more like numbers that

00:04:31,720 --> 00:04:34,870
you want to compare your different

00:04:33,370 --> 00:04:37,240
strategies with so that you at least

00:04:34,870 --> 00:04:41,680
know whether it's getting better or

00:04:37,240 --> 00:04:45,280
worse right so we I got the lightest

00:04:41,680 --> 00:04:49,240
numbers just for a pure client-side app

00:04:45,280 --> 00:04:53,919
right so your server sends an empty

00:04:49,240 --> 00:04:57,550
index page so up till almost 2.8 seconds

00:04:53,919 --> 00:05:00,460
there's nothing on the screen and the

00:04:57,550 --> 00:05:02,620
client is essentially downloading the

00:05:00,460 --> 00:05:07,110
JavaScript parsing bootstrapping your

00:05:02,620 --> 00:05:09,970
client app all in this time right and

00:05:07,110 --> 00:05:11,949
after that the client takes over it's

00:05:09,970 --> 00:05:14,979
doing more extra charge to fetch the

00:05:11,949 --> 00:05:18,099
data for this particular page and when

00:05:14,979 --> 00:05:21,070
it finishes bootstrapping and it's ready

00:05:18,099 --> 00:05:24,039
to display something meaningful it's and

00:05:21,070 --> 00:05:26,050
fully interactive it's around 4 seconds

00:05:24,039 --> 00:05:28,479
according to lighthouse but as you can

00:05:26,050 --> 00:05:30,580
see it's almost four point seven seconds

00:05:28,479 --> 00:05:35,020
before you see something useful on the

00:05:30,580 --> 00:05:37,870
screen so the next step I did then was

00:05:35,020 --> 00:05:41,289
okay let's just add suicide rendering

00:05:37,870 --> 00:05:43,900
right and that's what probably most of

00:05:41,289 --> 00:05:48,580
you will try to do so let's see what

00:05:43,900 --> 00:05:50,770
happens when you do that right so this

00:05:48,580 --> 00:05:53,409
is how the page looks after I introduced

00:05:50,770 --> 00:05:56,020
server side rendering to this app as you

00:05:53,409 --> 00:05:59,469
can see the first meaningful paint

00:05:56,020 --> 00:06:02,320
numbers got a lot better right because

00:05:59,469 --> 00:06:08,979
the server is rendering the view for you

00:06:02,320 --> 00:06:10,990
and and you have bits of HTML with

00:06:08,979 --> 00:06:12,759
meaningful data coming to your browser

00:06:10,990 --> 00:06:16,750
directly via browser is able to display

00:06:12,759 --> 00:06:18,400
even before the JavaScript bootstraps so

00:06:16,750 --> 00:06:19,810
let's compare it with the previous

00:06:18,400 --> 00:06:22,570
numbers we had the first meaningful

00:06:19,810 --> 00:06:24,849
paint numbers are great but the first

00:06:22,570 --> 00:06:29,229
interactive numbers have actually become

00:06:24,849 --> 00:06:34,839
worse what's happening so what's

00:06:29,229 --> 00:06:38,169
happening here is essentially the server

00:06:34,839 --> 00:06:39,100
sent more HTML data which the browser

00:06:38,169 --> 00:06:42,250
waited for

00:06:39,100 --> 00:06:45,850
and short but it's still doing the same

00:06:42,250 --> 00:06:48,040
thing it did before which is essentially

00:06:45,850 --> 00:06:50,050
downloading the whole JavaScript it's

00:06:48,040 --> 00:06:54,160
trapping and everything so it just got

00:06:50,050 --> 00:06:59,050
moved up after those 1.3 seconds almost

00:06:54,160 --> 00:07:02,860
so so first meaningful grade a first

00:06:59,050 --> 00:07:05,410
interactive boo so where's the problem

00:07:02,860 --> 00:07:07,360
by now it should be obvious it's not on

00:07:05,410 --> 00:07:09,910
the server the server is trying to do

00:07:07,360 --> 00:07:12,430
its best sending bits early it's

00:07:09,910 --> 00:07:14,490
actually the JavaScript size right the

00:07:12,430 --> 00:07:20,170
size of the JavaScript you are sending

00:07:14,490 --> 00:07:22,780
so again as angular developers we like

00:07:20,170 --> 00:07:25,810
the convenience of using different

00:07:22,780 --> 00:07:27,880
features of angular component libraries

00:07:25,810 --> 00:07:30,400
like material components but all of

00:07:27,880 --> 00:07:33,550
those have a cost that essentially adds

00:07:30,400 --> 00:07:37,870
up to your bundle size so is there

00:07:33,550 --> 00:07:42,300
something we can do to essentially get

00:07:37,870 --> 00:07:47,050
fast first paint as well as get to

00:07:42,300 --> 00:07:49,480
interactive fast right so so the

00:07:47,050 --> 00:07:53,020
strategy that I'm essentially

00:07:49,480 --> 00:07:56,140
experimenting with and we are looking

00:07:53,020 --> 00:08:00,430
into more in the angular team is to see

00:07:56,140 --> 00:08:02,770
whether we can chunk the JavaScript sent

00:08:00,430 --> 00:08:05,590
to the client and loaded into like

00:08:02,770 --> 00:08:09,480
smaller chunks all right so so far we

00:08:05,590 --> 00:08:13,300
have had lazy load loading boundaries

00:08:09,480 --> 00:08:14,410
using the router that is good that's a

00:08:13,300 --> 00:08:16,930
good start

00:08:14,410 --> 00:08:18,720
but we want to see if we can do

00:08:16,930 --> 00:08:22,810
something to make it even more

00:08:18,720 --> 00:08:24,690
fine-grained so we want to break the

00:08:22,810 --> 00:08:26,680
JavaScript in small chunks and load it

00:08:24,690 --> 00:08:29,500
prioritized by importance so what does

00:08:26,680 --> 00:08:33,400
it mean so let's look at our example

00:08:29,500 --> 00:08:36,340
application again so some of them

00:08:33,400 --> 00:08:40,030
important things that the user would

00:08:36,340 --> 00:08:42,610
want to do as soon as a as they see the

00:08:40,030 --> 00:08:46,090
server rendered view is essentially to

00:08:42,610 --> 00:08:50,680
be able to scroll and browse your

00:08:46,090 --> 00:08:52,720
e-commerce site of course and adding

00:08:50,680 --> 00:08:54,730
stuff to cart right you want them to buy

00:08:52,720 --> 00:08:57,100
right and that is the part of the app

00:08:54,730 --> 00:08:59,320
you want to enable as quickly as

00:08:57,100 --> 00:09:01,690
possible and of course you would want

00:08:59,320 --> 00:09:03,700
them to show feedback as soon as they

00:09:01,690 --> 00:09:05,950
add stuff to the cart so they are not

00:09:03,700 --> 00:09:08,860
confused as to what happened to the

00:09:05,950 --> 00:09:11,050
things they added to the car so we want

00:09:08,860 --> 00:09:14,050
to see is there a way to essentially

00:09:11,050 --> 00:09:18,190
make parts of your server rendered view

00:09:14,050 --> 00:09:21,430
interactive first and much faster so

00:09:18,190 --> 00:09:24,730
that users have much better experience

00:09:21,430 --> 00:09:26,830
when they come to your site right so so

00:09:24,730 --> 00:09:28,870
it would be nice if we can have like a

00:09:26,830 --> 00:09:32,440
standalone component that took over the

00:09:28,870 --> 00:09:34,840
add to cart and and could talk to cart

00:09:32,440 --> 00:09:36,310
servers and that talked to a batch

00:09:34,840 --> 00:09:38,830
comprehend that updates the bath right

00:09:36,310 --> 00:09:40,510
this is like the minimum application

00:09:38,830 --> 00:09:43,480
that you want to bootstrap so what are

00:09:40,510 --> 00:09:45,010
the things that are outside of this we

00:09:43,480 --> 00:09:47,200
don't really care about the router at

00:09:45,010 --> 00:09:49,720
this point we really don't want to load

00:09:47,200 --> 00:09:51,670
it we really don't want to pay the cost

00:09:49,720 --> 00:09:54,880
of bringing all the material conference

00:09:51,670 --> 00:09:58,510
there's a cart competent here there's a

00:09:54,880 --> 00:10:00,940
navigation bar all those are fine but

00:09:58,510 --> 00:10:03,280
they don't immediately contribute to

00:10:00,940 --> 00:10:07,030
what the user is trying to do right now

00:10:03,280 --> 00:10:09,430
so the essence of the strategy that we

00:10:07,030 --> 00:10:12,940
are trying to see is is there something

00:10:09,430 --> 00:10:17,530
we can do to just bring up parts of your

00:10:12,940 --> 00:10:21,730
app and starting from angular 6 what we

00:10:17,530 --> 00:10:24,430
have is essentially angular elements and

00:10:21,730 --> 00:10:28,780
we think this is one of those things

00:10:24,430 --> 00:10:32,050
which can let us bootstrap your app into

00:10:28,780 --> 00:10:34,720
like smaller in smaller chunks so there

00:10:32,050 --> 00:10:38,589
are standalone components and they

00:10:34,720 --> 00:10:41,170
essentially can take over Dom elements

00:10:38,589 --> 00:10:42,760
in your document and upgrade them

00:10:41,170 --> 00:10:46,510
essentially adding interactivity or

00:10:42,760 --> 00:10:49,180
features on top of them and the nice

00:10:46,510 --> 00:10:50,920
thing about angular elements on top of

00:10:49,180 --> 00:10:54,450
custom elements or web components is

00:10:50,920 --> 00:10:56,770
essentially you can still make use of

00:10:54,450 --> 00:10:59,740
angular's dependency injection which you

00:10:56,770 --> 00:11:03,040
all love and would like to use so in our

00:10:59,740 --> 00:11:04,660
case it's the essentially individual

00:11:03,040 --> 00:11:05,300
components being able to talk to the

00:11:04,660 --> 00:11:09,740
carts

00:11:05,300 --> 00:11:11,660
right so essentially what is the we are

00:11:09,740 --> 00:11:15,529
calling it like hybrid rendering with

00:11:11,660 --> 00:11:16,459
elements as the name of the strategy so

00:11:15,529 --> 00:11:21,050
what does it mean

00:11:16,459 --> 00:11:24,320
so first the server renders that your

00:11:21,050 --> 00:11:26,899
document but it now adds extra angular

00:11:24,320 --> 00:11:29,360
elements but the server essentially

00:11:26,899 --> 00:11:33,079
treats them as black boxes right it

00:11:29,360 --> 00:11:36,019
doesn't know what to do with those Dom

00:11:33,079 --> 00:11:40,490
elements at this point so it comes to

00:11:36,019 --> 00:11:42,829
the client and we have a bootstrap

00:11:40,490 --> 00:11:45,410
module which is like a bare-bones

00:11:42,829 --> 00:11:48,110
version of your angular application

00:11:45,410 --> 00:11:50,570
which brings up nothing other than the

00:11:48,110 --> 00:11:54,170
browser module right so it's like the

00:11:50,570 --> 00:11:58,070
absolute essential for you to run an

00:11:54,170 --> 00:12:01,790
angular app and the bootstrap model

00:11:58,070 --> 00:12:05,930
comes up and is able to lazy load the

00:12:01,790 --> 00:12:09,470
JavaScript required just to bring those

00:12:05,930 --> 00:12:11,079
angular elements in your page so what

00:12:09,470 --> 00:12:14,270
happens after that

00:12:11,079 --> 00:12:17,690
so those angular element modules

00:12:14,270 --> 00:12:22,270
essentially define custom elements which

00:12:17,690 --> 00:12:25,160
are which now are able to take over the

00:12:22,270 --> 00:12:29,720
angular elements which the server

00:12:25,160 --> 00:12:35,029
rendered is it clear I take that as yes

00:12:29,720 --> 00:12:37,160
and so the browser essentially takes the

00:12:35,029 --> 00:12:39,440
definition of the custom elements and

00:12:37,160 --> 00:12:42,589
you're magically so it's you can almost

00:12:39,440 --> 00:12:44,930
think of it as taking the server

00:12:42,589 --> 00:12:47,600
rendered view and sprinkling little bits

00:12:44,930 --> 00:12:50,390
of interaction on top of it right so we

00:12:47,600 --> 00:12:53,589
can do it in like finer grained as finer

00:12:50,390 --> 00:13:00,470
grained elements and with more control

00:12:53,589 --> 00:13:02,449
so quickly going to butcher it loads one

00:13:00,470 --> 00:13:04,160
module and it gets the cart service and

00:13:02,449 --> 00:13:08,269
what's batch module

00:13:04,160 --> 00:13:09,380
fine so I just want to go through and

00:13:08,269 --> 00:13:12,350
there's a lot more slides to go through

00:13:09,380 --> 00:13:17,510
so so let's go through some of like the

00:13:12,350 --> 00:13:19,639
code behind this right so why does the

00:13:17,510 --> 00:13:22,279
server side view look like so this is

00:13:19,639 --> 00:13:26,690
what it looked like before so the Add to

00:13:22,279 --> 00:13:30,889
Cart is just a button in like ng4 of

00:13:26,690 --> 00:13:35,630
material cards and this gets rendered on

00:13:30,889 --> 00:13:37,930
the server right so what is the new

00:13:35,630 --> 00:13:40,850
thing that we want to add to this

00:13:37,930 --> 00:13:44,380
essentially what we are adding to the

00:13:40,850 --> 00:13:50,139
template is add to cart' custom element

00:13:44,380 --> 00:13:52,820
and it is given all the data it needs to

00:13:50,139 --> 00:13:55,610
independently bootstrap and function

00:13:52,820 --> 00:13:57,829
right so angular elements essentially

00:13:55,610 --> 00:14:02,449
interacts with its external environment

00:13:57,829 --> 00:14:06,110
through either angular di or it can also

00:14:02,449 --> 00:14:09,769
take in data through attributes so here

00:14:06,110 --> 00:14:12,110
we are hooking up the attributes of the

00:14:09,769 --> 00:14:13,850
custom element and passing in all the

00:14:12,110 --> 00:14:19,100
data it needs to function independently

00:14:13,850 --> 00:14:24,560
essentially so so what happens on the

00:14:19,100 --> 00:14:27,110
client so the bootstrap module when it

00:14:24,560 --> 00:14:29,630
bootstrap doesn't do anything like it

00:14:27,110 --> 00:14:32,000
doesn't bootstrap any other like an app

00:14:29,630 --> 00:14:34,880
root or anything like that it's in some

00:14:32,000 --> 00:14:37,160
sense like a headless angular

00:14:34,880 --> 00:14:39,680
application right and all it does is it

00:14:37,160 --> 00:14:43,279
starts loading the essential bits which

00:14:39,680 --> 00:14:47,630
is here like loading the add to cart'

00:14:43,279 --> 00:14:50,269
module so if you had seen Rob stock this

00:14:47,630 --> 00:14:53,600
is essentially how you hook up the

00:14:50,269 --> 00:14:57,319
injector of the top level bootstrap

00:14:53,600 --> 00:15:01,880
module into the custom element angular

00:14:57,319 --> 00:15:04,279
element that you are creating so and

00:15:01,880 --> 00:15:07,399
this is on the add to cart' module side

00:15:04,279 --> 00:15:09,589
it receives the injector which the

00:15:07,399 --> 00:15:12,110
bootstrap module just gave it and is

00:15:09,589 --> 00:15:13,490
able to define a custom element and now

00:15:12,110 --> 00:15:15,769
you have a fully functional custom

00:15:13,490 --> 00:15:18,230
element that is independent in some

00:15:15,769 --> 00:15:20,720
sense but it's also hooked up into

00:15:18,230 --> 00:15:25,610
angular's di mechanism right so you get

00:15:20,720 --> 00:15:27,709
the best of both worlds so the next step

00:15:25,610 --> 00:15:28,449
is what does it do with all the data

00:15:27,709 --> 00:15:31,239
base ends

00:15:28,449 --> 00:15:35,499
all the attributes that we set on the

00:15:31,239 --> 00:15:37,660
server gets hooked up into inputs of the

00:15:35,499 --> 00:15:42,179
component so here we are taking all the

00:15:37,660 --> 00:15:45,009
information for it to handle the

00:15:42,179 --> 00:15:48,509
inventory item that it wants to add to

00:15:45,009 --> 00:15:51,999
the cart so and the nice thing about

00:15:48,509 --> 00:15:54,970
this is your template just says ng

00:15:51,999 --> 00:15:58,869
content which is a nice way of saying

00:15:54,970 --> 00:16:00,519
hey take over the existing Dom without

00:15:58,869 --> 00:16:03,040
actually replacing any of the elements

00:16:00,519 --> 00:16:05,919
right because the add to cart' doesn't

00:16:03,040 --> 00:16:09,100
really want to do anything other than

00:16:05,919 --> 00:16:11,350
add a click handler essentially so so

00:16:09,100 --> 00:16:15,220
this is a very nice feature of angular

00:16:11,350 --> 00:16:17,980
element so in this way it allows us to

00:16:15,220 --> 00:16:25,119
somewhat hydrate existing server view

00:16:17,980 --> 00:16:27,939
with angular element behavior so so it

00:16:25,119 --> 00:16:29,919
gets the name this is constant and it's

00:16:27,939 --> 00:16:33,100
able to use di because we set up all the

00:16:29,919 --> 00:16:36,009
injectors the host listener behaves the

00:16:33,100 --> 00:16:39,549
same way as in any angular component it

00:16:36,009 --> 00:16:43,109
listen for the click and it's that's it

00:16:39,549 --> 00:16:47,589
like it actually performs its function

00:16:43,109 --> 00:16:49,929
without even loading any of the rest of

00:16:47,589 --> 00:16:52,749
angular so we go through a similar

00:16:49,929 --> 00:16:55,539
exercise at the badge so I'm just going

00:16:52,749 --> 00:16:58,539
to go through and here it does something

00:16:55,539 --> 00:17:00,939
slightly different it just doesn't take

00:16:58,539 --> 00:17:03,399
the ng content and reflect it but it

00:17:00,939 --> 00:17:07,059
actually encapsulate sin material badge

00:17:03,399 --> 00:17:09,850
right so that it can add a badge to the

00:17:07,059 --> 00:17:11,889
element that is represented by the ng

00:17:09,850 --> 00:17:14,350
content so you can do lots of cool

00:17:11,889 --> 00:17:18,039
things with this ng-content feature of

00:17:14,350 --> 00:17:21,399
angular elements so a note on card

00:17:18,039 --> 00:17:23,519
service card services essentially

00:17:21,399 --> 00:17:27,240
described as a tree shakable injector

00:17:23,519 --> 00:17:31,659
what this allows us to do is essentially

00:17:27,240 --> 00:17:33,580
not have to always provide it in the

00:17:31,659 --> 00:17:36,480
bootstrap modules because that will

00:17:33,580 --> 00:17:38,440
increase the size of your main bundle

00:17:36,480 --> 00:17:41,650
but

00:17:38,440 --> 00:17:43,750
allow it to come up whenever somebody

00:17:41,650 --> 00:17:46,030
asked for it first right so here in this

00:17:43,750 --> 00:17:48,820
case Add to Cart is the component that's

00:17:46,030 --> 00:17:51,510
asking for first so it delays creation

00:17:48,820 --> 00:17:54,520
creating till somebody asked for it and

00:17:51,510 --> 00:17:57,429
when it gets created it gets added to

00:17:54,520 --> 00:18:00,820
the bootstrap module right and when a

00:17:57,429 --> 00:18:03,250
next module comes and asks for the same

00:18:00,820 --> 00:18:05,380
service it is essentially able to walk

00:18:03,250 --> 00:18:07,210
the injector tree and and by now the

00:18:05,380 --> 00:18:11,110
cart service is attached to your root

00:18:07,210 --> 00:18:14,409
module and so you avoid having to pay

00:18:11,110 --> 00:18:17,440
the cost of putting the cart service in

00:18:14,409 --> 00:18:19,870
the root module just because you don't

00:18:17,440 --> 00:18:21,640
know at what point the service gets

00:18:19,870 --> 00:18:23,830
instantiate right so this is under

00:18:21,640 --> 00:18:27,760
strategy you can use in angular 6 and

00:18:23,830 --> 00:18:30,820
beyond to avoid paying the cost for your

00:18:27,760 --> 00:18:34,260
so what happens to so tree checkable

00:18:30,820 --> 00:18:36,580
providers are default in angular CLI 6ro

00:18:34,260 --> 00:18:38,620
alex acaba who wrote the feature says

00:18:36,580 --> 00:18:41,110
there's no reason why you don't want to

00:18:38,620 --> 00:18:43,870
use tissues so just use it if you have

00:18:41,110 --> 00:18:47,380
the 1% user who doesn't want to use it

00:18:43,870 --> 00:18:49,809
you already know why so what did do to

00:18:47,380 --> 00:18:50,470
the bundle size from 500 and something

00:18:49,809 --> 00:18:54,460
Kb

00:18:50,470 --> 00:18:56,500
it now came down to 172 KB just for the

00:18:54,460 --> 00:18:59,409
a bootstrap module which is really good

00:18:56,500 --> 00:19:02,260
and the chunks that are loaded are more

00:18:59,409 --> 00:19:04,630
in the order of 8 K Phi K so you really

00:19:02,260 --> 00:19:07,299
get like a really fine grained way of

00:19:04,630 --> 00:19:09,880
loading your app so what did it do to

00:19:07,299 --> 00:19:11,830
the performance first meaningful paint

00:19:09,880 --> 00:19:14,320
is 1.4 dollar

00:19:11,830 --> 00:19:18,309
2.8 but first interactive actually went

00:19:14,320 --> 00:19:20,919
down 44.1 to 2.6 so we now have best of

00:19:18,309 --> 00:19:22,299
both worlds so this is essentially the

00:19:20,919 --> 00:19:24,520
strategy that we are trying to

00:19:22,299 --> 00:19:28,450
experiment in angular 6 with angular

00:19:24,520 --> 00:19:31,539
elements so the future looks good we

00:19:28,450 --> 00:19:34,780
want to provide better ergonomics as you

00:19:31,539 --> 00:19:38,140
can see there's a lot of like fiddling

00:19:34,780 --> 00:19:40,809
and plumbing things by hand we want to

00:19:38,140 --> 00:19:44,530
make it more easy to do and better

00:19:40,809 --> 00:19:48,640
integrated with the framework and with

00:19:44,530 --> 00:19:51,730
IV essentially one of the cool things

00:19:48,640 --> 00:19:52,090
for ivy is everything is tree shakin at

00:19:51,730 --> 00:19:54,940
a much

00:19:52,090 --> 00:19:56,110
granular level you might ask like I'm

00:19:54,940 --> 00:19:59,169
never going to write a hello world

00:19:56,110 --> 00:20:02,440
program right why do I care about 2.7 KB

00:19:59,169 --> 00:20:04,299
on the cake we like the cake but why

00:20:02,440 --> 00:20:07,000
should we care about the two points on

00:20:04,299 --> 00:20:09,880
KP but as you can see with the angler

00:20:07,000 --> 00:20:12,760
elements and the granular level at which

00:20:09,880 --> 00:20:15,900
we can load things this becomes more

00:20:12,760 --> 00:20:20,799
important because now you can actually

00:20:15,900 --> 00:20:23,320
define and load angular elements into

00:20:20,799 --> 00:20:25,539
your server-side interview like 2.7 K at

00:20:23,320 --> 00:20:30,669
a time right which which makes your app

00:20:25,539 --> 00:20:32,740
run really good so to summarise use SSR

00:20:30,669 --> 00:20:35,380
if you want your users to discover apps

00:20:32,740 --> 00:20:37,419
through links render initial view on

00:20:35,380 --> 00:20:39,250
server that doesn't change but what we

00:20:37,419 --> 00:20:41,890
are trying to experiment is loading the

00:20:39,250 --> 00:20:44,429
JavaScript in smaller chunks and angular

00:20:41,890 --> 00:20:47,590
6.0 and Beyond will make this easier so

00:20:44,429 --> 00:20:49,270
slides are here I've put up the

00:20:47,590 --> 00:20:53,080
experiment app there it has four levels

00:20:49,270 --> 00:20:56,169
starting from the regular app two levels

00:20:53,080 --> 00:20:59,860
for crazy everything is like hacked up

00:20:56,169 --> 00:21:02,700
so so thanks a lot I hope you enjoyed

00:20:59,860 --> 00:21:02,700

YouTube URL: https://www.youtube.com/watch?v=-8bObydfINA


