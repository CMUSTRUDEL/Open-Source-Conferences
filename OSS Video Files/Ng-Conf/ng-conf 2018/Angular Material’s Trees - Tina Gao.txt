Title: Angular Materialâ€™s Trees - Tina Gao
Publication date: 2018-11-16
Playlist: ng-conf 2018
Description: 
	ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:01,680 --> 00:00:04,740
[Applause]

00:00:06,890 --> 00:00:13,230
hello everyone I'm Tina go I'm a

00:00:11,280 --> 00:00:16,320
software engineer working my angular

00:00:13,230 --> 00:00:19,529
material at Google today I'd like to

00:00:16,320 --> 00:00:24,080
introduce the three components we

00:00:19,529 --> 00:00:24,080
recently built in the angular material a

00:00:24,710 --> 00:00:31,050
little bit more about myself I like

00:00:28,349 --> 00:00:35,730
taking photos of the nature like the

00:00:31,050 --> 00:00:42,989
skies stars and trees maybe that's why I

00:00:35,730 --> 00:00:47,010
build the three components so what

00:00:42,989 --> 00:00:51,110
happens we see trees every day for

00:00:47,010 --> 00:00:56,460
example the file system in our product

00:00:51,110 --> 00:00:59,039
or the files on Google Drive we can

00:00:56,460 --> 00:00:59,640
expand the folder and see what's inside

00:00:59,039 --> 00:01:06,900
it

00:00:59,640 --> 00:01:10,650
maybe there's another folder so now that

00:01:06,900 --> 00:01:13,729
we introduced the three components it's

00:01:10,650 --> 00:01:17,159
four we show representing trees of data

00:01:13,729 --> 00:01:21,030
we have a version that follows maturity

00:01:17,159 --> 00:01:24,479
vine specs in angular material if you

00:01:21,030 --> 00:01:27,150
have your own events bags you can also

00:01:24,479 --> 00:01:32,009
have used the unstirred version in

00:01:27,150 --> 00:01:37,430
angular cdk post mature tree and cdk

00:01:32,009 --> 00:01:37,430
tree will be released in our six version

00:01:38,030 --> 00:01:42,579
[Applause]

00:01:43,220 --> 00:01:51,060
so now let me go through the concepts of

00:01:46,860 --> 00:01:56,280
the tree and show some demos and show

00:01:51,060 --> 00:02:00,420
you how to use the tree now let's see

00:01:56,280 --> 00:02:04,140
the concept of the trees there are two

00:02:00,420 --> 00:02:06,300
type of trees in angular material one is

00:02:04,140 --> 00:02:11,790
a flat tree and the other one is

00:02:06,300 --> 00:02:14,400
necessary in fact tree the logical

00:02:11,790 --> 00:02:18,560
parent-child relationship is flattened

00:02:14,400 --> 00:02:23,340
and they become siblings in the dome

00:02:18,560 --> 00:02:27,920
well in nested tree we preserved the

00:02:23,340 --> 00:02:32,300
parent-child relationship so a node

00:02:27,920 --> 00:02:34,980
children an asset inside a stone

00:02:32,300 --> 00:02:37,320
so we built this two type of tree

00:02:34,980 --> 00:02:39,570
because we believe you may have

00:02:37,320 --> 00:02:43,880
different requirements and different use

00:02:39,570 --> 00:02:49,590
cases and you can choose which one

00:02:43,880 --> 00:02:53,610
choose the one that fit you need so both

00:02:49,590 --> 00:02:57,290
two types have some pros and cons the

00:02:53,610 --> 00:03:01,170
flat tree because we flattened that

00:02:57,290 --> 00:03:04,640
hierarchy so an ancestor and all the

00:03:01,170 --> 00:03:08,549
defendants become siblings in the door

00:03:04,640 --> 00:03:13,049
so it's easier to add virtual scoring to

00:03:08,549 --> 00:03:16,320
the factory it can also handle a large

00:03:13,049 --> 00:03:21,690
amount of data because we can reuse some

00:03:16,320 --> 00:03:26,100
dome elements however it needs a

00:03:21,690 --> 00:03:30,200
flattener to change the hierarchy so it

00:03:26,100 --> 00:03:30,200
is one more step to set up

00:03:33,380 --> 00:03:39,620
for the NASA tree because we preserved

00:03:36,380 --> 00:03:41,930
the parent-child relationship is easier

00:03:39,620 --> 00:03:45,290
to decorate the nested tree to show this

00:03:41,930 --> 00:03:48,560
kind of relationship so it's easier to

00:03:45,290 --> 00:03:51,080
decorate as a tree and it's easier to

00:03:48,560 --> 00:03:55,370
set up because it doesn't need a

00:03:51,080 --> 00:03:59,240
flattener however because the dome

00:03:55,370 --> 00:04:05,090
structure is nested is hurt at virtual

00:03:59,240 --> 00:04:06,560
scrolling to NASA tree so you may wonder

00:04:05,090 --> 00:04:11,480
which one should I use

00:04:06,560 --> 00:04:14,960
I suggest use flat tree as a default

00:04:11,480 --> 00:04:19,760
choice because can handle a large amount

00:04:14,960 --> 00:04:23,360
of data and it's also have better

00:04:19,760 --> 00:04:25,430
performance but if you have a really

00:04:23,360 --> 00:04:27,950
small data side where you just want to

00:04:25,430 --> 00:04:31,550
build a demo you can use the massive

00:04:27,950 --> 00:04:34,670
tree or you have some special decoration

00:04:31,550 --> 00:04:43,340
you want to do and it's hard to do it in

00:04:34,670 --> 00:04:48,970
flat tree can use the NASA tree now

00:04:43,340 --> 00:04:53,450
let's see some demos I have four demos

00:04:48,970 --> 00:04:58,100
one for flat tree one for NASA tree for

00:04:53,450 --> 00:05:02,020
a tree with checkboxes and one tree that

00:04:58,100 --> 00:05:02,020
can dynamic load its children

00:05:05,070 --> 00:05:11,120
here's the data structure for node in

00:05:08,910 --> 00:05:14,190
the tree you can define your own nodes

00:05:11,120 --> 00:05:18,600
it can be different from this this is

00:05:14,190 --> 00:05:21,470
just an example here each node is again

00:05:18,600 --> 00:05:24,810
it can be a category of getting or

00:05:21,470 --> 00:05:33,510
communicating and optionally it has a

00:05:24,810 --> 00:05:37,290
list of children and here's our data we

00:05:33,510 --> 00:05:48,600
have some games some games are nested

00:05:37,290 --> 00:05:52,950
under a category so here's the flat tree

00:05:48,600 --> 00:05:56,910
we built based on the data user can

00:05:52,950 --> 00:06:03,090
click or tap on the toggle to expand a

00:05:56,910 --> 00:06:06,270
tree node we can also make the toggle

00:06:03,090 --> 00:06:14,850
recursive so it's expand all the

00:06:06,270 --> 00:06:19,130
children or make it non recursive so it

00:06:14,850 --> 00:06:19,130
can expand it level by level

00:06:24,039 --> 00:06:31,029
here's a example of an asset tree we use

00:06:28,419 --> 00:06:37,629
the same data structure and data set as

00:06:31,029 --> 00:06:42,249
a flat tree similar you can toggle on

00:06:37,629 --> 00:06:42,849
the tree node to expand it and we can

00:06:42,249 --> 00:06:48,309
make it

00:06:42,849 --> 00:06:52,089
recursive you can see the total line

00:06:48,309 --> 00:06:54,759
connected parent and its children this

00:06:52,089 --> 00:06:58,599
kind of decoration is hard to do in flat

00:06:54,759 --> 00:07:08,020
tree but it's easier to implement in

00:06:58,599 --> 00:07:13,180
NASA tree next I like to show you a

00:07:08,020 --> 00:07:16,689
checklist here we put checkbox in a tree

00:07:13,180 --> 00:07:20,680
node so the checkbox is partially

00:07:16,689 --> 00:07:23,499
selected when some of the children are

00:07:20,680 --> 00:07:27,059
selected and is selected when other

00:07:23,499 --> 00:07:27,059
children are selected

00:07:33,680 --> 00:07:42,340
so here we can check the parent checkbox

00:07:37,400 --> 00:07:46,130
and all the children are selected we can

00:07:42,340 --> 00:07:50,030
select a child and the parent is

00:07:46,130 --> 00:07:52,340
partially selected when we select all

00:07:50,030 --> 00:08:01,100
the children that parent is

00:07:52,340 --> 00:08:05,810
automatically checked the next demo is

00:08:01,100 --> 00:08:10,310
dynamic tree so when users toggle a tree

00:08:05,810 --> 00:08:11,030
note we can see a progress bar and after

00:08:10,310 --> 00:08:14,979
one second

00:08:11,030 --> 00:08:14,979
our children are loaded into the tree

00:08:20,690 --> 00:08:29,090
so in this dynamic loading tree it's not

00:08:24,830 --> 00:08:33,800
have a loading status and when user

00:08:29,090 --> 00:08:36,080
toggle the tree note we fetch the

00:08:33,800 --> 00:08:39,590
children from the database by our async

00:08:36,080 --> 00:08:42,760
cow and when the children returns they

00:08:39,590 --> 00:08:51,170
fed that tree with the updated data and

00:08:42,760 --> 00:08:54,050
change the loading status so I just

00:08:51,170 --> 00:08:58,010
showed some trees we can build using the

00:08:54,050 --> 00:09:03,770
three components let's see how can the

00:08:58,010 --> 00:09:06,560
other tree we need three things the

00:09:03,770 --> 00:09:09,800
first is a Dana's worse which provide

00:09:06,560 --> 00:09:13,340
the tree data the second is a tree

00:09:09,800 --> 00:09:16,400
control which control the expansion and

00:09:13,340 --> 00:09:19,040
collapse of tree node and the last one

00:09:16,400 --> 00:09:24,980
is the template that's how we'd like to

00:09:19,040 --> 00:09:27,380
display a tree so we can assign that

00:09:24,980 --> 00:09:32,030
they'd has worse for the tree in the

00:09:27,380 --> 00:09:35,980
template and there are three 10s worse

00:09:32,030 --> 00:09:39,380
options it can be a data array can be a

00:09:35,980 --> 00:09:41,330
observable of that array or it can be a

00:09:39,380 --> 00:09:44,960
data source with connect and disconnect

00:09:41,330 --> 00:09:48,890
methods the connect method returns an

00:09:44,960 --> 00:09:52,130
optimal of that array if you have used

00:09:48,890 --> 00:09:54,980
the data table in angular material or

00:09:52,130 --> 00:09:58,430
angular cdk you'll be familiar with of

00:09:54,980 --> 00:10:01,100
this kind of Dana's worse here in tree

00:09:58,430 --> 00:10:04,460
each item in the the dead hard will

00:10:01,100 --> 00:10:08,690
represent that tree node and can be

00:10:04,460 --> 00:10:10,880
nested or flattened but for flat tree it

00:10:08,690 --> 00:10:13,120
needs to be flattened before affect the

00:10:10,880 --> 00:10:13,120
tree

00:10:13,840 --> 00:10:20,600
we also have some pre-built that has

00:10:16,790 --> 00:10:24,770
worse one for flattery and one for NASA

00:10:20,600 --> 00:10:27,770
tree but for flattery you will need a

00:10:24,770 --> 00:10:31,030
tree flattener to tell that they are

00:10:27,770 --> 00:10:31,030
source how to build a tree

00:10:33,220 --> 00:10:40,910
the tree control handles the expansion

00:10:36,440 --> 00:10:43,550
on clubs of tree not his also track the

00:10:40,910 --> 00:10:49,250
status of the note it can be said to the

00:10:43,550 --> 00:10:51,649
tree in the template and we provide a

00:10:49,250 --> 00:10:53,959
flat data flattery

00:10:51,649 --> 00:10:59,029
control for flat tree and necessary

00:10:53,959 --> 00:11:02,209
control for method 3 4 flat tree we need

00:10:59,029 --> 00:11:05,990
to pass in two functions one to get a

00:11:02,209 --> 00:11:08,480
current level of the node once you

00:11:05,990 --> 00:11:13,220
return whether that kernel is expendable

00:11:08,480 --> 00:11:15,560
or not for necessary passing one

00:11:13,220 --> 00:11:19,790
function that gets children of the

00:11:15,560 --> 00:11:22,220
current node now the return tab is an

00:11:19,790 --> 00:11:27,040
observer of data array but we will

00:11:22,220 --> 00:11:27,040
support data array in the later version

00:11:29,410 --> 00:11:39,170
now let's see the templates we have tree

00:11:32,570 --> 00:11:42,410
no no death toggle and padding to define

00:11:39,170 --> 00:11:45,980
a tree node we use math we know that

00:11:42,410 --> 00:11:51,079
tree and not necessary note for NASA

00:11:45,980 --> 00:11:54,740
tree in NASA tree we also need math tree

00:11:51,079 --> 00:11:59,329
not outlet that's the precision we put

00:11:54,740 --> 00:12:01,430
other children of colonel you can add

00:11:59,329 --> 00:12:04,029
some decorations around the root node

00:12:01,430 --> 00:12:04,029
outlets

00:12:07,070 --> 00:12:13,070
and the note death defines the template

00:12:09,860 --> 00:12:17,870
of the tree it's also has that not

00:12:13,070 --> 00:12:20,180
context so here we pass in node as

00:12:17,870 --> 00:12:28,430
contacts and later in the template we

00:12:20,180 --> 00:12:30,889
can use not item or not value optionally

00:12:28,430 --> 00:12:35,480
you can define multiple templates for

00:12:30,889 --> 00:12:38,149
the node using our button function the

00:12:35,480 --> 00:12:40,670
tree will use the template that's the

00:12:38,149 --> 00:12:44,870
one function returns true for example

00:12:40,670 --> 00:12:48,500
here the node have two types one is

00:12:44,870 --> 00:12:50,899
input one is select when the type is

00:12:48,500 --> 00:12:55,279
input the first function returns true

00:12:50,899 --> 00:12:58,850
so the first template will be used when

00:12:55,279 --> 00:13:01,130
the second function returns true but not

00:12:58,850 --> 00:13:04,579
happy is select and the second template

00:13:01,130 --> 00:13:07,670
will be used there should be also a

00:13:04,579 --> 00:13:09,589
default template so when none of the

00:13:07,670 --> 00:13:18,019
functions return true a default template

00:13:09,589 --> 00:13:21,470
will be used so the toggle is to expand

00:13:18,019 --> 00:13:24,980
or collapse our tree node you can put

00:13:21,470 --> 00:13:28,899
anywhere in the donut template and is

00:13:24,980 --> 00:13:33,139
triggered by users click or tap event

00:13:28,899 --> 00:13:36,380
for example it can be put on the whole

00:13:33,139 --> 00:13:43,220
node or it can be put on a button inside

00:13:36,380 --> 00:13:46,550
a node template you can also make the

00:13:43,220 --> 00:13:49,939
toggle recursive by not tree not toggle

00:13:46,550 --> 00:13:52,910
recursive and you can add multiple

00:13:49,939 --> 00:13:57,010
targets in one not template and make it

00:13:52,910 --> 00:13:57,010
one recursive one is not

00:14:00,080 --> 00:14:10,279
the padding is for flattery only because

00:14:03,279 --> 00:14:12,470
the three notes flattened and also not

00:14:10,279 --> 00:14:15,769
become siblings in the dome we need a

00:14:12,470 --> 00:14:19,640
way to show the hierarchy so we add

00:14:15,769 --> 00:14:21,890
padding to the note is based on the

00:14:19,640 --> 00:14:25,430
North level and the default padding is

00:14:21,890 --> 00:14:34,480
forty licks elves you can also change

00:14:25,430 --> 00:14:38,420
the padding to other values so for

00:14:34,480 --> 00:14:41,930
accessibility that we have a row tree

00:14:38,420 --> 00:14:45,350
and each node can have a row of three

00:14:41,930 --> 00:14:48,380
item or group it's based on whether the

00:14:45,350 --> 00:14:56,000
node is expendable or not or whether the

00:14:48,380 --> 00:14:59,779
node have children so we have some

00:14:56,000 --> 00:15:04,550
future plans we will add keyboard

00:14:59,779 --> 00:15:07,790
navigation in the later version so user

00:15:04,550 --> 00:15:10,040
can use keyboard to navigate through the

00:15:07,790 --> 00:15:14,029
node and expand or collapse of tree

00:15:10,040 --> 00:15:17,649
nodes we will also add a tree node

00:15:14,029 --> 00:15:20,360
toggle components which is a button and

00:15:17,649 --> 00:15:27,050
you can directly put a component in the

00:15:20,360 --> 00:15:30,230
node template instead acade my coworker

00:15:27,050 --> 00:15:33,020
will work on the virtual schooling and

00:15:30,230 --> 00:15:37,670
will make sure the virtual schooling is

00:15:33,020 --> 00:15:40,279
working with the flattery you also may

00:15:37,670 --> 00:15:43,370
not make a simple tree example that

00:15:40,279 --> 00:15:46,940
accept recent objects so it can just

00:15:43,370 --> 00:15:49,399
pass in one jason object and the tree

00:15:46,940 --> 00:15:56,959
will display the structure of this jason

00:15:49,399 --> 00:15:59,959
object so these are things we we don't

00:15:56,959 --> 00:16:04,070
have in six version but we will have in

00:15:59,959 --> 00:16:06,380
the later version if you want to know

00:16:04,070 --> 00:16:10,990
more about tree you can go to our github

00:16:06,380 --> 00:16:10,990
repo and read the docs about the tree

00:16:11,770 --> 00:16:16,570
so that's all I wanted to talk about the

00:16:14,410 --> 00:16:22,269
tree thank you

00:16:16,570 --> 00:16:22,269
[Applause]

00:16:28,390 --> 00:16:30,450

YouTube URL: https://www.youtube.com/watch?v=s0Vy3sLbeyA


