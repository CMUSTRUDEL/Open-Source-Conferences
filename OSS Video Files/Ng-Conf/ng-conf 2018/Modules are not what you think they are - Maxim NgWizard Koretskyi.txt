Title: Modules are not what you think they are - Maxim NgWizard Koretskyi
Publication date: 2018-11-16
Playlist: ng-conf 2018
Description: 
	ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,000 --> 00:00:04,830
[Applause]

00:00:03,020 --> 00:00:08,340
okay everyone

00:00:04,830 --> 00:00:11,190
my name is Max and I also go by the name

00:00:08,340 --> 00:00:13,980
ng wizard and I have traveled more than

00:00:11,190 --> 00:00:16,699
five thousand miles to come here to you

00:00:13,980 --> 00:00:21,660
guys and tell you one important thing I

00:00:16,699 --> 00:00:23,850
have an addiction yeah I'm actually

00:00:21,660 --> 00:00:27,539
addicted to read in a source code in

00:00:23,850 --> 00:00:29,099
particular angular sources and you know

00:00:27,539 --> 00:00:31,140
what over time I have come to a

00:00:29,099 --> 00:00:31,769
conclusion that it's not such a bad

00:00:31,140 --> 00:00:34,469
thing

00:00:31,769 --> 00:00:36,890
in fact it can be greatly beneficial and

00:00:34,469 --> 00:00:39,960
I'm about to prove it to you today

00:00:36,890 --> 00:00:42,540
my hope is that after this talk angular

00:00:39,960 --> 00:00:47,219
repository will get at least an extra

00:00:42,540 --> 00:00:49,500
1000 Forks so we'll see okay what are we

00:00:47,219 --> 00:00:51,960
going to talked about today we will be

00:00:49,500 --> 00:00:54,750
talking about angular modules and the

00:00:51,960 --> 00:00:58,469
thing about them is that sometimes they

00:00:54,750 --> 00:01:01,410
are confusing well maybe not that

00:00:58,469 --> 00:01:03,149
confusing of course but when I first

00:01:01,410 --> 00:01:06,060
started to use them in non-trivial

00:01:03,149 --> 00:01:08,369
scenarios I found a few things puzzling

00:01:06,060 --> 00:01:11,280
for example we all know that we have

00:01:08,369 --> 00:01:13,500
encapsulation for components and

00:01:11,280 --> 00:01:16,020
templates however there is no

00:01:13,500 --> 00:01:19,590
encapsulation for dynamic components and

00:01:16,020 --> 00:01:22,560
providers okay we all know that we can

00:01:19,590 --> 00:01:25,560
import models modules into other modules

00:01:22,560 --> 00:01:28,799
however there is no module hierarchy

00:01:25,560 --> 00:01:31,350
between them and most tutorials can make

00:01:28,799 --> 00:01:34,020
you think that eager and lazy loaded

00:01:31,350 --> 00:01:36,930
modules are different types when in

00:01:34,020 --> 00:01:39,180
reality they are exactly the same and I

00:01:36,930 --> 00:01:42,240
will show it to you today all right

00:01:39,180 --> 00:01:45,960
let's get started now I don't think that

00:01:42,240 --> 00:01:48,450
modules should be confusing right and to

00:01:45,960 --> 00:01:50,810
me the best way to clear confusions is

00:01:48,450 --> 00:01:53,430
to learn how things work under the hood

00:01:50,810 --> 00:01:57,299
so today I'm taking you on a journey

00:01:53,430 --> 00:01:59,130
into the internals of angular modules we

00:01:57,299 --> 00:02:02,040
will learn the relationship between

00:01:59,130 --> 00:02:05,040
modules and injectors specifically I

00:02:02,040 --> 00:02:08,399
will show you how modules are converted

00:02:05,040 --> 00:02:10,770
into injectors and I will do that by

00:02:08,399 --> 00:02:11,970
telling you about my experience reverse

00:02:10,770 --> 00:02:15,690
engineer and angular

00:02:11,970 --> 00:02:18,330
modules I did that while working on an

00:02:15,690 --> 00:02:20,550
extension mechanism for a plugin based

00:02:18,330 --> 00:02:23,970
application so I also share with you

00:02:20,550 --> 00:02:28,440
some insights today about building an

00:02:23,970 --> 00:02:31,200
extensible platform with angular ok now

00:02:28,440 --> 00:02:33,810
the application I worked one is similar

00:02:31,200 --> 00:02:36,900
to a diagram designer so we have a bunch

00:02:33,810 --> 00:02:38,970
of widgets in a toolbox and each widget

00:02:36,900 --> 00:02:41,550
has its own behavior and properties and

00:02:38,970 --> 00:02:44,370
then to draw a diagram we simply drop a

00:02:41,550 --> 00:02:46,830
widget on a canvas now where this

00:02:44,370 --> 00:02:49,770
application is interesting is that the

00:02:46,830 --> 00:02:52,100
default set of widgets can be extended

00:02:49,770 --> 00:02:54,780
with widgets implemented by third-party

00:02:52,100 --> 00:02:57,690
developers which basically makes the

00:02:54,780 --> 00:02:59,190
application a platform ok

00:02:57,690 --> 00:03:01,459
this diagram illustrates the

00:02:59,190 --> 00:03:05,040
relationship between a platform and

00:03:01,459 --> 00:03:07,440
extension modules so developers

00:03:05,040 --> 00:03:09,570
implement widgets as angular components

00:03:07,440 --> 00:03:11,700
and then they package them in angular

00:03:09,570 --> 00:03:14,400
modules these modules

00:03:11,700 --> 00:03:17,670
according to angular documentation can

00:03:14,400 --> 00:03:19,709
be classified as feature widget modules

00:03:17,670 --> 00:03:23,580
however I refer to them simply as

00:03:19,709 --> 00:03:25,560
extension modules okay so the most

00:03:23,580 --> 00:03:28,050
difficult task when working on this

00:03:25,560 --> 00:03:30,959
application was the implementation of

00:03:28,050 --> 00:03:33,750
the extension mechanism specifically the

00:03:30,959 --> 00:03:37,140
question that I asked myself was how to

00:03:33,750 --> 00:03:41,400
load and render widgets implemented by

00:03:37,140 --> 00:03:44,459
third-party developers now let me show

00:03:41,400 --> 00:03:47,190
you why it was challenging and to do

00:03:44,459 --> 00:03:51,209
that I will use angular material

00:03:47,190 --> 00:03:53,730
libraries an example so this is how we

00:03:51,209 --> 00:03:56,340
import how we extend our applications

00:03:53,730 --> 00:03:57,989
with the library right we simply import

00:03:56,340 --> 00:03:59,970
an extension module with required

00:03:57,989 --> 00:04:03,120
widgets and then we can use these

00:03:59,970 --> 00:04:05,850
widgets in our component templates right

00:04:03,120 --> 00:04:08,970
there are two important things to note

00:04:05,850 --> 00:04:11,489
here first is that we know exactly which

00:04:08,970 --> 00:04:14,100
widgets are provided by an extension

00:04:11,489 --> 00:04:17,519
module correct so in this case it's the

00:04:14,100 --> 00:04:20,700
button widget and second since we import

00:04:17,519 --> 00:04:22,950
these modules explicitly we know exactly

00:04:20,700 --> 00:04:24,360
which modules will be used as part of

00:04:22,950 --> 00:04:27,419
our application

00:04:24,360 --> 00:04:29,639
however in the case of the application I

00:04:27,419 --> 00:04:34,139
was working on all this information was

00:04:29,639 --> 00:04:36,689
missing angular the developers can put

00:04:34,139 --> 00:04:39,060
as many widgets as they like in an

00:04:36,689 --> 00:04:42,270
extension module and there is no

00:04:39,060 --> 00:04:45,139
information beforehand which widgets are

00:04:42,270 --> 00:04:49,139
provided by an extension module and

00:04:45,139 --> 00:04:53,819
second each widget can have its own

00:04:49,139 --> 00:04:56,759
server-side implementation and so it has

00:04:53,819 --> 00:05:00,090
to be deployed to a server first so the

00:04:56,759 --> 00:05:02,819
list of extension modules and widgets is

00:05:00,090 --> 00:05:07,289
generated on the server and then can be

00:05:02,819 --> 00:05:09,840
fetched with an API request so there is

00:05:07,289 --> 00:05:11,940
no information about which extension

00:05:09,840 --> 00:05:15,270
modules to Lord until after the

00:05:11,940 --> 00:05:17,550
application has bootstrap it means that

00:05:15,270 --> 00:05:22,590
every single extension module would need

00:05:17,550 --> 00:05:25,650
to be loaded lazily ok so these are the

00:05:22,590 --> 00:05:29,490
challenges that I faced and what do you

00:05:25,650 --> 00:05:32,219
do sorry when you face a difficult

00:05:29,490 --> 00:05:36,719
challenge I don't know about you guys

00:05:32,219 --> 00:05:37,940
but I usually take a vacation and that's

00:05:36,719 --> 00:05:41,909
exactly what I did

00:05:37,940 --> 00:05:44,120
however this is not how I spent it I was

00:05:41,909 --> 00:05:48,360
actually debugging the router

00:05:44,120 --> 00:05:50,699
implementation and why router well

00:05:48,360 --> 00:05:53,849
because if you think about it it solves

00:05:50,699 --> 00:05:56,069
similar tasks first it doesn't know

00:05:53,849 --> 00:05:58,680
which routes are provided by routing

00:05:56,069 --> 00:06:01,620
module yet it still needs to somehow

00:05:58,680 --> 00:06:04,259
retrieve them and second sometimes it

00:06:01,620 --> 00:06:06,779
needs to lazy load a module right so

00:06:04,259 --> 00:06:09,860
basically I could map this process to my

00:06:06,779 --> 00:06:12,900
own use case it's that just instead of

00:06:09,860 --> 00:06:17,699
routes an extension module would provide

00:06:12,900 --> 00:06:20,789
widgets so let's see what I found there

00:06:17,699 --> 00:06:23,129
this gist demonstrates what the router

00:06:20,789 --> 00:06:27,569
does two ways the lauda module and

00:06:23,129 --> 00:06:29,520
retrieve the routes from it and I have

00:06:27,569 --> 00:06:32,240
removed all the irrelevant stuff and

00:06:29,520 --> 00:06:34,860
ended up with just four lines of code

00:06:32,240 --> 00:06:37,260
however there is so much information

00:06:34,860 --> 00:06:40,010
here let's go step by step

00:06:37,260 --> 00:06:43,230
so first it lazy load the module class

00:06:40,010 --> 00:06:45,930
then it compiles it and gets the module

00:06:43,230 --> 00:06:48,510
factory then this Factory is used to

00:06:45,930 --> 00:06:51,630
create the module instance and an

00:06:48,510 --> 00:06:55,350
injector and then the router uses this

00:06:51,630 --> 00:06:56,640
injector to retrieve the routes now if

00:06:55,350 --> 00:06:58,890
you're looking at this code for the

00:06:56,640 --> 00:07:00,720
first time it probably doesn't make much

00:06:58,890 --> 00:07:02,940
sense to you and it didn't match that

00:07:00,720 --> 00:07:04,590
make sense to me either but don't worry

00:07:02,940 --> 00:07:07,320
because right now we'll explore the

00:07:04,590 --> 00:07:10,950
concepts involved in each of these steps

00:07:07,320 --> 00:07:14,850
and we'll start with the module Factory

00:07:10,950 --> 00:07:17,340
I personally came across this concept

00:07:14,850 --> 00:07:19,910
when exploring the contents of the ng

00:07:17,340 --> 00:07:22,320
folder generated by angular JIT compiler

00:07:19,910 --> 00:07:23,880
you can see this folder for yourself if

00:07:22,320 --> 00:07:26,160
you open the sources tab in the

00:07:23,880 --> 00:07:28,910
developer tools right there it sits with

00:07:26,160 --> 00:07:31,410
module and component factors inside

00:07:28,910 --> 00:07:34,350
after debugging a little bit more I

00:07:31,410 --> 00:07:37,560
found the ng module compiler that takes

00:07:34,350 --> 00:07:38,690
a module class and generates a module

00:07:37,560 --> 00:07:42,180
Factory

00:07:38,690 --> 00:07:45,750
what is this Factory well basically it's

00:07:42,180 --> 00:07:48,690
just a set of providers definitions with

00:07:45,750 --> 00:07:49,620
relevant metadata like dependencies let

00:07:48,690 --> 00:07:52,350
me give you an example

00:07:49,620 --> 00:07:54,600
suppose we have two classes a and B and

00:07:52,350 --> 00:07:59,040
both of these classes are used as

00:07:54,600 --> 00:08:02,730
providers in a module so here B class

00:07:59,040 --> 00:08:05,510
injects an instance of an a class in the

00:08:02,730 --> 00:08:09,030
constructor so basically B depends on a

00:08:05,510 --> 00:08:12,720
write when angular generates a factory

00:08:09,030 --> 00:08:15,630
it reflects this dependency in the

00:08:12,720 --> 00:08:18,150
metadata right you can see here that the

00:08:15,630 --> 00:08:20,580
B provider depends on a and that's it

00:08:18,150 --> 00:08:22,530
that's what makes this module Factory

00:08:20,580 --> 00:08:25,170
and if we get back to the router

00:08:22,530 --> 00:08:28,020
implementation is the second statement

00:08:25,170 --> 00:08:31,650
that takes a module class compiles it

00:08:28,020 --> 00:08:34,320
and gasps a module Factory the next

00:08:31,650 --> 00:08:38,520
statement shows how this factory is used

00:08:34,320 --> 00:08:40,500
to create an instance of a module and it

00:08:38,520 --> 00:08:44,040
basically call create method on and then

00:08:40,500 --> 00:08:46,290
pass in a parent injector what's

00:08:44,040 --> 00:08:49,170
interesting is that when angular creates

00:08:46,290 --> 00:08:50,640
an instance of a module it also creates

00:08:49,170 --> 00:08:54,779
an instance of a ninja

00:08:50,640 --> 00:08:57,480
that holds the providers defined by

00:08:54,779 --> 00:09:01,019
module and we can access this injector

00:08:57,480 --> 00:09:03,510
through the injector property and that's

00:09:01,019 --> 00:09:05,730
exactly what the router does right it

00:09:03,510 --> 00:09:08,250
takes this injector and retrieves the

00:09:05,730 --> 00:09:11,399
routes that are registered as providers

00:09:08,250 --> 00:09:13,320
on a module okay

00:09:11,399 --> 00:09:15,570
so let's recap what we've learned right

00:09:13,320 --> 00:09:17,730
we have a module class then we compile

00:09:15,570 --> 00:09:20,430
it either using jeet or ahead of time

00:09:17,730 --> 00:09:23,600
compiler we get a module factory and

00:09:20,430 --> 00:09:27,060
then in runtime we call great method and

00:09:23,600 --> 00:09:30,360
we get an instance of a module and an

00:09:27,060 --> 00:09:33,089
injector okay if you're looking at this

00:09:30,360 --> 00:09:35,880
diagram and asking yourself if every

00:09:33,089 --> 00:09:38,720
module in angular gets its own factories

00:09:35,880 --> 00:09:42,149
exactly the question that I asked myself

00:09:38,720 --> 00:09:45,149
let's find out so here I have two

00:09:42,149 --> 00:09:49,610
modules a and B and they are imported

00:09:45,149 --> 00:09:53,519
into the main app module this module is

00:09:49,610 --> 00:09:56,250
compiled when angular bootstraps so can

00:09:53,519 --> 00:10:00,480
you guess how many factories are going

00:09:56,250 --> 00:10:03,149
to be there right figures correct

00:10:00,480 --> 00:10:06,110
exactly we get only one factory and

00:10:03,149 --> 00:10:09,149
that's because angular creates factories

00:10:06,110 --> 00:10:12,149
only for modules that are being compiled

00:10:09,149 --> 00:10:15,300
it doesn't create factories for the

00:10:12,149 --> 00:10:18,899
imported modules however the providers

00:10:15,300 --> 00:10:20,910
from the imported modules are merged so

00:10:18,899 --> 00:10:22,860
if you take a look at the factory you

00:10:20,910 --> 00:10:26,209
can see that the providers from the a

00:10:22,860 --> 00:10:29,310
and be imported modules sit there

00:10:26,209 --> 00:10:31,170
incidentally also includes provider

00:10:29,310 --> 00:10:36,060
definitions for the imported module

00:10:31,170 --> 00:10:38,399
classes to make them injectable so what

00:10:36,060 --> 00:10:41,339
we've just learned is that no matter how

00:10:38,399 --> 00:10:43,140
many modules you import after the

00:10:41,339 --> 00:10:45,899
compilation and when angular bootstraps

00:10:43,140 --> 00:10:49,800
is still going to have only one single

00:10:45,899 --> 00:10:51,360
factory in single injector and now that

00:10:49,800 --> 00:10:53,040
we know that let's get back to the

00:10:51,360 --> 00:10:56,610
common confusions that we started with

00:10:53,040 --> 00:10:59,430
and take a look at them again so I told

00:10:56,610 --> 00:11:01,770
you that there is no encapsulation for

00:10:59,430 --> 00:11:04,050
dynamic components and providers right

00:11:01,770 --> 00:11:06,510
and that's because after the calculation

00:11:04,050 --> 00:11:08,880
you don't have several modules you have

00:11:06,510 --> 00:11:11,519
only one single Factory in an injector

00:11:08,880 --> 00:11:14,490
and during the compilation the compiler

00:11:11,519 --> 00:11:16,950
cannot know where in how you will be

00:11:14,490 --> 00:11:19,940
using dynamic components and providers

00:11:16,950 --> 00:11:22,140
right so it cannot control encapsulation

00:11:19,940 --> 00:11:24,510
also you learn today that there is no

00:11:22,140 --> 00:11:27,570
module hierarchy between imported

00:11:24,510 --> 00:11:31,260
modules right and again it's because we

00:11:27,570 --> 00:11:33,540
don't have several modules and the last

00:11:31,260 --> 00:11:36,300
thing Iger is the same as lazy so I told

00:11:33,540 --> 00:11:38,940
you that eager lazy loaded modules and

00:11:36,300 --> 00:11:42,660
lazy loaded modules exactly the same and

00:11:38,940 --> 00:11:46,079
it's true because every eager and lazy

00:11:42,660 --> 00:11:48,079
load that both modules goes through the

00:11:46,079 --> 00:11:54,269
same process of compilation and

00:11:48,079 --> 00:11:56,579
instantiation ok so let's get back to

00:11:54,269 --> 00:11:59,550
our original question that we started

00:11:56,579 --> 00:12:01,320
with how to load and render which is

00:11:59,550 --> 00:12:04,470
implemented by third-party developers

00:12:01,320 --> 00:12:06,750
Ryan take a look at the process as you

00:12:04,470 --> 00:12:09,180
might expect it will be quite similar to

00:12:06,750 --> 00:12:12,029
what the router does so will all the

00:12:09,180 --> 00:12:16,020
module class and then we compile it and

00:12:12,029 --> 00:12:18,390
get a module Factory interestingly this

00:12:16,020 --> 00:12:21,480
particular piece of the process can be

00:12:18,390 --> 00:12:23,760
optimized by first compile in a module

00:12:21,480 --> 00:12:26,610
class during the build time using ahead

00:12:23,760 --> 00:12:30,360
of time compiler and then loading this

00:12:26,610 --> 00:12:33,680
factory directly to the browser once we

00:12:30,360 --> 00:12:36,779
have a factory what do we do with it we

00:12:33,680 --> 00:12:39,450
use it to create a module instance and

00:12:36,779 --> 00:12:43,200
injector right go create method and we

00:12:39,450 --> 00:12:48,060
get an injector in if you ever wondered

00:12:43,200 --> 00:12:52,649
what is lazy loading it's exactly these

00:12:48,060 --> 00:12:54,750
steps and they are not different to how

00:12:52,649 --> 00:12:58,709
any your module is compiled and

00:12:54,750 --> 00:13:01,019
instantiate ok once we have an injector

00:12:58,709 --> 00:13:03,860
we can follow in the step foot steps or

00:13:01,019 --> 00:13:07,800
through outer and retrieve our widgets

00:13:03,860 --> 00:13:09,829
but first these widgets have to be

00:13:07,800 --> 00:13:13,560
registered on a module

00:13:09,829 --> 00:13:15,959
correct so again let's take a look at

00:13:13,560 --> 00:13:16,970
the what the router does and we can

00:13:15,959 --> 00:13:20,740
follow in this foot

00:13:16,970 --> 00:13:23,750
steps so as you'll know the router has

00:13:20,740 --> 00:13:26,420
static methods for route and for child

00:13:23,750 --> 00:13:30,350
and under the hood

00:13:26,420 --> 00:13:33,500
these methods simply registered route

00:13:30,350 --> 00:13:37,610
definitions as providers using the

00:13:33,500 --> 00:13:41,540
specific token routes so we can do the

00:13:37,610 --> 00:13:44,360
same right here I have one extension

00:13:41,540 --> 00:13:47,930
module with one widget implemented as

00:13:44,360 --> 00:13:50,720
component a one and I'm registering it

00:13:47,930 --> 00:13:55,550
on the module using the widgets token

00:13:50,720 --> 00:13:58,579
and as a value I pass in widget

00:13:55,550 --> 00:14:00,949
definition that includes a component

00:13:58,579 --> 00:14:03,740
that implements the widget and the

00:14:00,949 --> 00:14:06,529
widgets name once this module is

00:14:03,740 --> 00:14:09,470
compiled and we get an injector out of

00:14:06,529 --> 00:14:11,680
it we can use this token witches to

00:14:09,470 --> 00:14:17,870
retrieve the list of all the widgets

00:14:11,680 --> 00:14:20,480
provided by an extension module okay now

00:14:17,870 --> 00:14:23,420
we've covered everything we need to know

00:14:20,480 --> 00:14:28,910
before we take a look at the actual code

00:14:23,420 --> 00:14:32,779
and what do it right now so this is how

00:14:28,910 --> 00:14:35,870
we're lured a module class now we

00:14:32,779 --> 00:14:37,790
compile it and get a module Factory and

00:14:35,870 --> 00:14:42,620
we use it factory to create an instance

00:14:37,790 --> 00:14:44,660
of a module and an injector now then we

00:14:42,620 --> 00:14:48,139
use this injector to retrieve the width

00:14:44,660 --> 00:14:50,029
the list of widgets and now we need to

00:14:48,139 --> 00:14:53,540
render it right we haven't talked about

00:14:50,029 --> 00:14:55,459
rendering yeah and since we just

00:14:53,540 --> 00:14:59,420
implemented as angular components and

00:14:55,459 --> 00:15:03,019
loaded lazily they need to be rendered

00:14:59,420 --> 00:15:04,759
as dynamic components and the topic of

00:15:03,019 --> 00:15:07,040
dynamic components rendering is quite

00:15:04,759 --> 00:15:09,589
broad on its own I will not cover much

00:15:07,040 --> 00:15:11,779
details now if you're interested however

00:15:09,589 --> 00:15:13,939
you can intent my workshop tomorrow on

00:15:11,779 --> 00:15:16,759
Dom manipulations I'll be talking in

00:15:13,939 --> 00:15:19,579
depth about Dom manipulations including

00:15:16,759 --> 00:15:21,709
dynamic components rendering so for now

00:15:19,579 --> 00:15:24,740
it's important to know that you can use

00:15:21,709 --> 00:15:27,949
a component Factory to create an

00:15:24,740 --> 00:15:30,889
instance of a component and render it so

00:15:27,949 --> 00:15:33,470
here's the actual code right I'm using

00:15:30,889 --> 00:15:35,869
in factory resolver to get the component

00:15:33,470 --> 00:15:38,869
factory and then pass it interview

00:15:35,869 --> 00:15:44,269
container which instant initiates and

00:15:38,869 --> 00:15:47,809
renders this component I want you all to

00:15:44,269 --> 00:15:50,769
take a second now and appreciate how

00:15:47,809 --> 00:15:55,369
much you can learn by debugging and

00:15:50,769 --> 00:15:58,129
reverse engineering and maybe next time

00:15:55,369 --> 00:16:01,309
when you feel in stock working on a

00:15:58,129 --> 00:16:04,459
difficult task you can find the courage

00:16:01,309 --> 00:16:08,720
inside to take a dive into the sources

00:16:04,459 --> 00:16:09,410
and find some helpful ideas and to help

00:16:08,720 --> 00:16:12,309
you with that

00:16:09,410 --> 00:16:14,809
I started angular in-depth publication I

00:16:12,309 --> 00:16:17,290
started with the goal to explain how

00:16:14,809 --> 00:16:19,970
things work under the hood in angular I

00:16:17,290 --> 00:16:22,220
was lucky to have other authors join me

00:16:19,970 --> 00:16:25,419
in this quest so today in going depth is

00:16:22,220 --> 00:16:27,919
d publication for the most challenging

00:16:25,419 --> 00:16:30,799
topics about angular and related

00:16:27,919 --> 00:16:33,919
technologies incidentally just a few

00:16:30,799 --> 00:16:37,639
days ago we reached our first 1 million

00:16:33,919 --> 00:16:39,889
views thank you so if you're not one of

00:16:37,639 --> 00:16:42,230
our readers yet and want to become an

00:16:39,889 --> 00:16:46,579
expert in angular I definitely recommend

00:16:42,230 --> 00:16:48,679
that you check it out ok so I have put

00:16:46,579 --> 00:16:50,480
together a sample application that

00:16:48,679 --> 00:16:52,069
demonstrates how to implement this

00:16:50,480 --> 00:16:54,230
extension mechanism that I've been

00:16:52,069 --> 00:16:56,569
talking about put it on github here's

00:16:54,230 --> 00:16:59,239
the link check it out I have also

00:16:56,569 --> 00:17:01,339
written a few articles on dynamic

00:16:59,239 --> 00:17:05,029
components rendering in common confusion

00:17:01,339 --> 00:17:09,279
with modules again here are the links do

00:17:05,029 --> 00:17:13,630
check them out ok and the last thing

00:17:09,279 --> 00:17:17,059
wise men say that truth lies within and

00:17:13,630 --> 00:17:20,059
in case of angular is within the angular

00:17:17,059 --> 00:17:24,529
sources so don't be afraid to read them

00:17:20,059 --> 00:17:29,829
and find the truth however always

00:17:24,529 --> 00:17:29,829
remember that nothing stays the same

00:17:30,710 --> 00:17:36,930
thank you for attention and good luck

00:17:33,720 --> 00:17:36,930

YouTube URL: https://www.youtube.com/watch?v=pERhnBBae2k


