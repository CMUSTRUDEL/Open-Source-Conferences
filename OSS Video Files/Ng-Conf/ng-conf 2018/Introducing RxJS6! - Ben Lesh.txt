Title: Introducing RxJS6! - Ben Lesh
Publication date: 2018-11-16
Playlist: ng-conf 2018
Description: 
	ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:04,400 --> 00:00:11,269
how's it going everybody so this this

00:00:08,069 --> 00:00:14,160
talk is called introducing arcs gs6

00:00:11,269 --> 00:00:15,150
I'm Ben Lesh has already introduced I am

00:00:14,160 --> 00:00:18,210
an engineer at Google

00:00:15,150 --> 00:00:20,010
I am the rxjs lead and I just recently

00:00:18,210 --> 00:00:24,210
joined the the angular team

00:00:20,010 --> 00:00:25,170
all right here's thank you very much so

00:00:24,210 --> 00:00:26,550
here's one of the benefits of joining

00:00:25,170 --> 00:00:29,420
the angular team you get to watch Igor

00:00:26,550 --> 00:00:31,470
do handstands this is a view for my desk

00:00:29,420 --> 00:00:35,100
he literally does this like three times

00:00:31,470 --> 00:00:37,160
a day it's amazing this is this is for

00:00:35,100 --> 00:00:39,870
me this is the biggest what's new in RCS

00:00:37,160 --> 00:00:41,670
and and that's because for more than a

00:00:39,870 --> 00:00:42,930
year probably about a year and a half

00:00:41,670 --> 00:00:44,160
now rxjs has been a hundred percent

00:00:42,930 --> 00:00:46,559
volunteer work almost two hundred

00:00:44,160 --> 00:00:48,210
percent volunteer work you know a lot of

00:00:46,559 --> 00:00:49,860
really good people working after hours

00:00:48,210 --> 00:00:52,739
sacrificing time with their families

00:00:49,860 --> 00:00:54,510
working on this and we had a lot of

00:00:52,739 --> 00:00:55,949
really great help actually the only

00:00:54,510 --> 00:00:57,149
person in this list who's not a

00:00:55,949 --> 00:00:58,890
volunteer is front and center there

00:00:57,149 --> 00:01:00,600
Jason Hayden he's on the angular team

00:00:58,890 --> 00:01:02,070
and he's extremely helpful in making

00:01:00,600 --> 00:01:05,549
some of the backward compatibility stuff

00:01:02,070 --> 00:01:07,049
I'm gonna talk about in a little bit and

00:01:05,549 --> 00:01:08,640
what the angular team has been working

00:01:07,049 --> 00:01:11,310
on is they had me working on full time

00:01:08,640 --> 00:01:12,869
on rxjs and rxjs related angular

00:01:11,310 --> 00:01:14,549
functionality so that's that's really

00:01:12,869 --> 00:01:16,380
good news for the rxjs community even

00:01:14,549 --> 00:01:19,799
outside of angular and I'm really

00:01:16,380 --> 00:01:22,740
excited about it something that's really

00:01:19,799 --> 00:01:25,020
important the angular team all once once

00:01:22,740 --> 00:01:27,210
once everyone to know even outside of

00:01:25,020 --> 00:01:29,250
angular land that rxjs is going to

00:01:27,210 --> 00:01:32,970
remain an independent project and the

00:01:29,250 --> 00:01:35,939
decisions that I make on behalf of the

00:01:32,970 --> 00:01:38,430
rxjs team will be on behalf of all rxjs

00:01:35,939 --> 00:01:41,869
users not just specific to the angular

00:01:38,430 --> 00:01:45,390
team it's very important to everybody so

00:01:41,869 --> 00:01:46,860
thank you very much so I'm gonna

00:01:45,390 --> 00:01:48,390
apologize because I'm gonna go pretty

00:01:46,860 --> 00:01:50,040
quickly in 20 minutes I want to cover an

00:01:48,390 --> 00:01:51,479
awful lot of stuff so the first thing I

00:01:50,040 --> 00:01:54,689
want to talk about is what was new in

00:01:51,479 --> 00:01:56,549
rxjs 5 5 and that came out last year but

00:01:54,689 --> 00:02:00,210
it's really important when it comes to

00:01:56,549 --> 00:02:03,750
the migration path to rxjs 6 so there's

00:02:00,210 --> 00:02:06,420
a current stable version in past years

00:02:03,750 --> 00:02:07,979
whenever you were using rfcs 5 or 5 4

00:02:06,420 --> 00:02:09,360
and under this is what we recommended

00:02:07,979 --> 00:02:12,090
the recommended usage was you would

00:02:09,360 --> 00:02:13,319
import observable and you would then add

00:02:12,090 --> 00:02:14,969
your

00:02:13,319 --> 00:02:18,659
methods add your operators and you would

00:02:14,969 --> 00:02:20,969
use them and this is fine with five five

00:02:18,659 --> 00:02:22,650
and up we recommended that people start

00:02:20,969 --> 00:02:23,730
importing the creation methods directly

00:02:22,650 --> 00:02:25,889
and using them like we're doing here

00:02:23,730 --> 00:02:28,079
with of and we also recommended that you

00:02:25,889 --> 00:02:32,129
import pipeable operators and use them

00:02:28,079 --> 00:02:34,409
inside the pipe method of observable so

00:02:32,129 --> 00:02:35,639
the question I get asked I've been asked

00:02:34,409 --> 00:02:39,030
in the hallway a few times here is why

00:02:35,639 --> 00:02:40,500
use pipe herbal operators the the big

00:02:39,030 --> 00:02:41,459
thing about pipe operators is what

00:02:40,500 --> 00:02:43,049
they're doing is they're patching the

00:02:41,459 --> 00:02:46,829
prototype and patching the prototype

00:02:43,049 --> 00:02:48,959
comes with a lot of problems the the

00:02:46,829 --> 00:02:50,340
problems are is very specifically that

00:02:48,959 --> 00:02:52,530
it's global so if you have a library

00:02:50,340 --> 00:02:54,359
that adds map to observable then

00:02:52,530 --> 00:02:55,859
everybody else that can that consumes

00:02:54,359 --> 00:02:57,810
that observable now also has the map

00:02:55,859 --> 00:02:59,609
method they might start relying on that

00:02:57,810 --> 00:03:01,439
and then the library removes it and

00:02:59,609 --> 00:03:02,819
guess what you broke everybody else that

00:03:01,439 --> 00:03:05,069
was relying on it so that's not good

00:03:02,819 --> 00:03:06,840
it's not tree shakable because there's a

00:03:05,069 --> 00:03:09,900
side effect of adding map to the

00:03:06,840 --> 00:03:10,919
prototype and the tree checkers don't

00:03:09,900 --> 00:03:12,689
really know what to do with that you

00:03:10,919 --> 00:03:14,459
could end up trampling somebody else's

00:03:12,689 --> 00:03:17,370
method say if I have a custom filter and

00:03:14,459 --> 00:03:20,220
then you add the RFDS filter then it's

00:03:17,370 --> 00:03:22,259
going to trample my filter and the other

00:03:20,220 --> 00:03:24,090
things is custom operators are much much

00:03:22,259 --> 00:03:24,810
easier to implement in use and I'm going

00:03:24,090 --> 00:03:27,329
to show that in a minute

00:03:24,810 --> 00:03:28,799
and also compilers and lint linters will

00:03:27,329 --> 00:03:30,959
give you a little bit more help if you

00:03:28,799 --> 00:03:32,819
import an operator and you don't use it

00:03:30,959 --> 00:03:35,370
a leaner your linter will complain and

00:03:32,819 --> 00:03:36,870
if you try to use an operator without

00:03:35,370 --> 00:03:41,400
importing it your compilers going to

00:03:36,870 --> 00:03:42,959
complain so here's what a custom Pipal

00:03:41,400 --> 00:03:44,459
operator looks like here I've got a POW

00:03:42,959 --> 00:03:46,739
operator and I'm gonna show how that

00:03:44,459 --> 00:03:48,329
that is actually used here in a second

00:03:46,739 --> 00:03:49,709
but basically you just create a

00:03:48,329 --> 00:03:51,209
higher-order function that returns a

00:03:49,709 --> 00:03:52,560
function that takes an observable and

00:03:51,209 --> 00:03:54,780
returns observable and this is the shape

00:03:52,560 --> 00:03:57,180
of all pipeable operators and you can

00:03:54,780 --> 00:03:58,709
use them with any other pipeable

00:03:57,180 --> 00:04:00,479
operator including filter here that

00:03:58,709 --> 00:04:02,120
comes from rxjs we're using our pal

00:04:00,479 --> 00:04:04,379
operator there and POW is just

00:04:02,120 --> 00:04:07,979
multiplying a number by itself some some

00:04:04,379 --> 00:04:09,479
number of times so the old way and i

00:04:07,979 --> 00:04:10,650
don't expect anybody to read this the

00:04:09,479 --> 00:04:12,030
old way you would have to do this

00:04:10,650 --> 00:04:13,349
without trampling things and the

00:04:12,030 --> 00:04:16,079
prototype would be to subclass

00:04:13,349 --> 00:04:18,090
observable add your pal method and then

00:04:16,079 --> 00:04:19,650
override lift and make sure the lift

00:04:18,090 --> 00:04:20,789
returns your custom observable your

00:04:19,650 --> 00:04:22,409
subclass observable again then you have

00:04:20,789 --> 00:04:24,330
to implement a pile operator and a POW

00:04:22,409 --> 00:04:25,660
subscriber it's a lot of work it's

00:04:24,330 --> 00:04:29,860
clearly a lot more code than

00:04:25,660 --> 00:04:34,120
then the other the other way was I think

00:04:29,860 --> 00:04:36,550
this has just died that's okay so that

00:04:34,120 --> 00:04:37,780
was what was new in our cs5 and how they

00:04:36,550 --> 00:04:39,550
recommend that you move to those because

00:04:37,780 --> 00:04:42,100
we're recommending that people use

00:04:39,550 --> 00:04:44,880
pipeable or pipeable operators in arcgis

00:04:42,100 --> 00:04:48,400
6 that's how we're doing operators so

00:04:44,880 --> 00:04:50,320
rxjs 6 is now in release candidate I am

00:04:48,400 --> 00:04:52,120
actually looking at probably publishing

00:04:50,320 --> 00:05:00,580
the the final version of this today or

00:04:52,120 --> 00:05:03,070
sometime very very soon so new features

00:05:00,580 --> 00:05:04,870
in 6 so what's new in 6 is we've got new

00:05:03,070 --> 00:05:06,910
unhandled air behavior so this is a

00:05:04,870 --> 00:05:08,020
breaking change from 5 I'm going to talk

00:05:06,910 --> 00:05:10,360
about what that means in just a minute

00:05:08,020 --> 00:05:12,220
we also have simplified imports we've

00:05:10,360 --> 00:05:14,950
got some deprecations and some removals

00:05:12,220 --> 00:05:17,050
and we have a new operator but sorry the

00:05:14,950 --> 00:05:20,230
new operator is not that exciting

00:05:17,050 --> 00:05:21,070
everybody likes new stuff but I'll talk

00:05:20,230 --> 00:05:23,230
about it in a minute

00:05:21,070 --> 00:05:26,410
so the unhandled air behavior this is

00:05:23,230 --> 00:05:27,550
this one's important the the old way

00:05:26,410 --> 00:05:30,190
that we are doing things every version

00:05:27,550 --> 00:05:31,780
of previous version of rxjs did this was

00:05:30,190 --> 00:05:33,010
if you have an unhandled error which

00:05:31,780 --> 00:05:34,630
means an area that gets all the way to

00:05:33,010 --> 00:05:37,060
the down to the bottom of your chain of

00:05:34,630 --> 00:05:39,130
observation and you don't have an air

00:05:37,060 --> 00:05:41,620
handler there it's gonna wreath row that

00:05:39,130 --> 00:05:44,080
error synchronously and in the new

00:05:41,620 --> 00:05:46,900
version in arcgis 6 we're going to

00:05:44,080 --> 00:05:51,730
schedule that air to be wreath roan with

00:05:46,900 --> 00:05:53,200
like a set timeout so just just to give

00:05:51,730 --> 00:05:54,580
you example say i have this bad source

00:05:53,200 --> 00:05:55,690
this bad observable and what it's going

00:05:54,580 --> 00:05:58,330
to do is eventually it's going to throw

00:05:55,690 --> 00:05:59,890
an error and i didn't provide an air

00:05:58,330 --> 00:06:01,270
handler to it that second argument i

00:05:59,890 --> 00:06:02,560
just passed a null or maybe i have an

00:06:01,270 --> 00:06:06,370
observer that doesn't have an error

00:06:02,560 --> 00:06:07,930
method on it in this case if bad source

00:06:06,370 --> 00:06:10,120
happens to be totally synchronous which

00:06:07,930 --> 00:06:11,860
it could be I could actually wrap it in

00:06:10,120 --> 00:06:14,560
a try-catch in version 5 and under and

00:06:11,860 --> 00:06:15,970
catch the error as it's wreath roan from

00:06:14,560 --> 00:06:17,950
subscribe it would bubble all the way

00:06:15,970 --> 00:06:21,160
back out and I could catch it there and

00:06:17,950 --> 00:06:23,140
handle it which is kind of weird right

00:06:21,160 --> 00:06:25,120
because if bad source happens to be

00:06:23,140 --> 00:06:26,470
asynchronous someone changes the

00:06:25,120 --> 00:06:28,540
implementation whatever and observables

00:06:26,470 --> 00:06:30,040
are usually asynchronous then try-catch

00:06:28,540 --> 00:06:32,169
is not going to work and asynchronously

00:06:30,040 --> 00:06:36,490
thrown error cannot be caught with try

00:06:32,169 --> 00:06:39,400
catch period so the important thing is

00:06:36,490 --> 00:06:39,610
you with arcs for rxjs 6 you do not want

00:06:39,400 --> 00:06:41,740
to

00:06:39,610 --> 00:06:43,720
depend on that synchronous error wreath

00:06:41,740 --> 00:06:45,129
rowing for unhandled era so you don't

00:06:43,720 --> 00:06:46,750
want to depend on that it's not good

00:06:45,129 --> 00:06:49,810
we're removing it because it comes with

00:06:46,750 --> 00:06:51,280
problems so let's let's look at what you

00:06:49,810 --> 00:06:53,020
would have to do to refactor this bad

00:06:51,280 --> 00:06:55,300
pattern so so I here here's what we're

00:06:53,020 --> 00:06:57,219
doing here and you'll notice in inside

00:06:55,300 --> 00:06:58,479
my catch I've taken out all the logic of

00:06:57,219 --> 00:07:00,909
what we're doing in caching I've already

00:06:58,479 --> 00:07:02,560
kind of wrapped it in a method or in a

00:07:00,909 --> 00:07:04,389
function rather and what you can do is

00:07:02,560 --> 00:07:06,520
just move that function to the air

00:07:04,389 --> 00:07:08,979
handler it's actually even less code now

00:07:06,520 --> 00:07:11,349
and now it'll even handle errors if the

00:07:08,979 --> 00:07:19,000
error happens to be asynchronous so this

00:07:11,349 --> 00:07:20,919
will work in rxjs 6 so the moral of this

00:07:19,000 --> 00:07:22,569
story is the the code that's going to

00:07:20,919 --> 00:07:25,120
break when you upgrade to 6 around this

00:07:22,569 --> 00:07:28,270
was code that was expecting unexpected

00:07:25,120 --> 00:07:29,500
errors which is pretty amazing it sounds

00:07:28,270 --> 00:07:31,779
weird but there actually is code that

00:07:29,500 --> 00:07:33,729
might might do this on purpose you could

00:07:31,779 --> 00:07:35,199
have a test right you could have a test

00:07:33,729 --> 00:07:37,000
that expects when you subscribe to this

00:07:35,199 --> 00:07:38,919
observer you expected to throw some

00:07:37,000 --> 00:07:41,919
specific error synchronously this this

00:07:38,919 --> 00:07:43,449
test will break in rxjs 6 because that

00:07:41,919 --> 00:07:46,870
we no longer synchronous synchronously

00:07:43,449 --> 00:07:48,819
throw errors so to refactor this what

00:07:46,870 --> 00:07:51,340
you would end up having to do is here

00:07:48,819 --> 00:07:52,599
I'm just passing in an observer that has

00:07:51,340 --> 00:07:54,009
an error method on it so it's a little

00:07:52,599 --> 00:07:56,110
bit more explicit a little bit easier to

00:07:54,009 --> 00:07:57,969
read and then I'm I'm running I'm

00:07:56,110 --> 00:08:00,610
testing some expectations against my err

00:07:57,969 --> 00:08:01,569
object that I've got and I'm calling

00:08:00,610 --> 00:08:02,949
done I'm actually making it an

00:08:01,569 --> 00:08:04,839
asynchronous tests so now it'll even

00:08:02,949 --> 00:08:06,250
cover situations where bad source might

00:08:04,839 --> 00:08:10,569
be asynchronous so this is a little bit

00:08:06,250 --> 00:08:12,940
better to do and it'll work in 6 so the

00:08:10,569 --> 00:08:15,599
question then becomes but why why did we

00:08:12,940 --> 00:08:17,080
change the error throwing behavior

00:08:15,599 --> 00:08:19,990
there's this little thing called

00:08:17,080 --> 00:08:21,550
producer interference and it's one of

00:08:19,990 --> 00:08:22,900
the nastiest bugs that you'll ever come

00:08:21,550 --> 00:08:24,550
across because it's like a cross team

00:08:22,900 --> 00:08:27,699
sort of bug that you'll see and I ran

00:08:24,550 --> 00:08:28,900
into this at Netflix and it was one of

00:08:27,699 --> 00:08:30,250
the reasons why there was discussions

00:08:28,900 --> 00:08:31,360
with the tc39 about why we're gonna

00:08:30,250 --> 00:08:35,320
change this behavior even in the

00:08:31,360 --> 00:08:36,669
observable proposal so just to give an

00:08:35,320 --> 00:08:38,110
example we're just we're gonna say that

00:08:36,669 --> 00:08:40,240
we have this third-party services my

00:08:38,110 --> 00:08:41,649
Jeff cross service it's important to

00:08:40,240 --> 00:08:44,440
name things after your friends it's

00:08:41,649 --> 00:08:47,589
always good so Jeff Jeff Croft sir Jeff

00:08:44,440 --> 00:08:48,970
Cross service is this is what the

00:08:47,589 --> 00:08:50,620
interface is like I'm not gonna get into

00:08:48,970 --> 00:08:52,120
the implementation yet but basically

00:08:50,620 --> 00:08:53,230
it's just got this get amazing stuff

00:08:52,120 --> 00:08:55,560
method that returns and

00:08:53,230 --> 00:08:57,970
of numbers and we're going to use this

00:08:55,560 --> 00:09:00,070
amongst a bunch of different consumers

00:08:57,970 --> 00:09:01,600
so our first consumer is the lady leet

00:09:00,070 --> 00:09:03,280
component and all the lady of the

00:09:01,600 --> 00:09:05,440
components doing is using the Jeff cross

00:09:03,280 --> 00:09:08,230
service to get our observable of numbers

00:09:05,440 --> 00:09:09,850
and filtering out trying to get all the

00:09:08,230 --> 00:09:13,540
numbers that are less than 50 and

00:09:09,850 --> 00:09:15,550
display them in some template our second

00:09:13,540 --> 00:09:18,030
consumer is shy component and shai's

00:09:15,550 --> 00:09:21,010
chose mean he's he's written this

00:09:18,030 --> 00:09:22,330
component and he's not really filtering

00:09:21,010 --> 00:09:24,610
out anything he's just using filter to

00:09:22,330 --> 00:09:28,390
be like hey if I get the value 42 I'm

00:09:24,610 --> 00:09:31,180
gonna throw an error shy come on man

00:09:28,390 --> 00:09:32,950
then we have mieszko component he's

00:09:31,180 --> 00:09:34,660
basically doing the opposite of what the

00:09:32,950 --> 00:09:36,160
ladylee component is doing he wants all

00:09:34,660 --> 00:09:40,660
the values that are higher than 50 from

00:09:36,160 --> 00:09:43,180
the Jeff Jeff cross service so we get a

00:09:40,660 --> 00:09:44,560
bug report about this p0 no one knows

00:09:43,180 --> 00:09:46,360
what's going on the meet the mieszko

00:09:44,560 --> 00:09:48,700
component randomly stops showing data

00:09:46,360 --> 00:09:51,220
and they looked there's a hundred

00:09:48,700 --> 00:09:52,570
percent code coverage all integration

00:09:51,220 --> 00:09:53,980
tests passed nothing looks like it's

00:09:52,570 --> 00:09:56,760
wrong with the michiko service it's too

00:09:53,980 --> 00:09:59,440
simple it only happens in production and

00:09:56,760 --> 00:10:00,760
they suspect the Jeff cross services to

00:09:59,440 --> 00:10:03,670
blame they don't know what it is

00:10:00,760 --> 00:10:06,460
so tasked with looking at this so let's

00:10:03,670 --> 00:10:08,710
go look at the Jeff cross service it's

00:10:06,460 --> 00:10:12,010
pretty simple it's all it is is we've

00:10:08,710 --> 00:10:13,300
got this observable stream of it's an

00:10:12,010 --> 00:10:15,370
interval it's going on an interval where

00:10:13,300 --> 00:10:17,470
we're mapping that to a random number

00:10:15,370 --> 00:10:19,720
between a random integer between 0 and

00:10:17,470 --> 00:10:22,630
100 and we're sharing it so we're multi

00:10:19,720 --> 00:10:23,680
casting it so this doesn't look like

00:10:22,630 --> 00:10:25,270
there could be much wrong with this

00:10:23,680 --> 00:10:27,960
either but I guarantee this is going to

00:10:25,270 --> 00:10:31,120
cause our producer interference problem

00:10:27,960 --> 00:10:33,630
so what happened Jeff draw service

00:10:31,120 --> 00:10:35,860
returns a shared multicast observable

00:10:33,630 --> 00:10:38,050
multi casting loops over an array of

00:10:35,860 --> 00:10:39,580
observers and notifies each one of them

00:10:38,050 --> 00:10:41,620
by calling their next method and that

00:10:39,580 --> 00:10:44,770
then calls other functions down your

00:10:41,620 --> 00:10:46,390
chain of observation shai component

00:10:44,770 --> 00:10:49,470
synchronously throws an error if it

00:10:46,390 --> 00:10:52,180
happens to get the number 42

00:10:49,470 --> 00:10:53,650
if the synchronous error goes all the

00:10:52,180 --> 00:10:55,900
way down in the chain of observation and

00:10:53,650 --> 00:10:57,760
is unhandled there's no air handler then

00:10:55,900 --> 00:10:59,260
it's synchronous leary thrown which

00:10:57,760 --> 00:11:00,970
means that javascript is going to take

00:10:59,260 --> 00:11:02,860
over and be like oh well I'm gonna

00:11:00,970 --> 00:11:05,230
unwind the stack looking for a try-catch

00:11:02,860 --> 00:11:06,670
to handle my error it unwinds the stack

00:11:05,230 --> 00:11:08,560
all the way back to the for loop

00:11:06,670 --> 00:11:09,970
that's notifying all the observers and

00:11:08,560 --> 00:11:10,540
what happens when you throw an air in a

00:11:09,970 --> 00:11:14,230
for-loop

00:11:10,540 --> 00:11:16,360
the air the for loop stops it's done and

00:11:14,230 --> 00:11:18,760
then Michiko sat he doesn't get his data

00:11:16,360 --> 00:11:20,740
and since he was the next one in that

00:11:18,760 --> 00:11:23,470
group of consumers it's gonna look like

00:11:20,740 --> 00:11:24,730
that components the problem so imagine

00:11:23,470 --> 00:11:27,070
if different teams developed these

00:11:24,730 --> 00:11:29,500
components and a separate team developed

00:11:27,070 --> 00:11:30,850
the service like figuring out who is to

00:11:29,500 --> 00:11:33,220
blame for this problem it's a very very

00:11:30,850 --> 00:11:34,690
nasty bug to run across unless you

00:11:33,220 --> 00:11:38,920
happen to have me working with you you

00:11:34,690 --> 00:11:40,780
might have a problem so I actually have

00:11:38,920 --> 00:11:42,130
this example you can explore it when I

00:11:40,780 --> 00:11:43,780
get the slides out you'll be able to

00:11:42,130 --> 00:11:45,640
just go to the stack blitz and try it

00:11:43,780 --> 00:11:49,270
out for yourself and see what the air

00:11:45,640 --> 00:11:51,130
what the air looks like arcs gs6 solves

00:11:49,270 --> 00:11:52,990
this problem by scheduling the the

00:11:51,130 --> 00:11:55,810
errors the unhandled airs to be Reath

00:11:52,990 --> 00:11:57,940
rone in a set timeout just like this the

00:11:55,810 --> 00:12:00,700
the lingo for this is called host report

00:11:57,940 --> 00:12:02,530
errors and what this does is it throws

00:12:00,700 --> 00:12:04,570
in its own call stack where it can't

00:12:02,530 --> 00:12:06,490
bubble up to hit anybody's try-catch and

00:12:04,570 --> 00:12:08,350
that means it's gonna get reported to

00:12:06,490 --> 00:12:11,220
window on error or process on air where

00:12:08,350 --> 00:12:13,870
you would expect unhandled errors to go

00:12:11,220 --> 00:12:16,360
if you still have issues with this there

00:12:13,870 --> 00:12:18,700
is a flag there this is call there's a

00:12:16,360 --> 00:12:20,200
you can pull and config and flip used

00:12:18,700 --> 00:12:22,060
deprecated synchronous error handling to

00:12:20,200 --> 00:12:24,700
true if you do that you will get a

00:12:22,060 --> 00:12:26,920
warning in console if any if any library

00:12:24,700 --> 00:12:28,930
in your system is doing that if you are

00:12:26,920 --> 00:12:30,910
a library owner do not do this because

00:12:28,930 --> 00:12:32,470
it is global so if you do it in your

00:12:30,910 --> 00:12:34,000
library you're affecting everybody else

00:12:32,470 --> 00:12:35,470
that's consuming rxjs and it's probably

00:12:34,000 --> 00:12:39,370
a peer dependency and that's not going

00:12:35,470 --> 00:12:40,750
to be good if you are an app owner you

00:12:39,370 --> 00:12:41,860
might it might have a large app and

00:12:40,750 --> 00:12:43,240
you're depending on synchronous air

00:12:41,860 --> 00:12:44,950
throwing and a lot of places for some

00:12:43,240 --> 00:12:46,780
reason if you're desperate you can you

00:12:44,950 --> 00:12:48,130
can try it out but just understand it's

00:12:46,780 --> 00:12:49,330
going to affect the behavior of some of

00:12:48,130 --> 00:12:53,140
your libraries that are consuming our

00:12:49,330 --> 00:12:55,060
xj6 so let's talk about the changes to

00:12:53,140 --> 00:12:56,590
imports the change of the imports this

00:12:55,060 --> 00:12:58,720
is how you import it things in version 5

00:12:56,590 --> 00:13:01,150
so this is again the example I imported

00:12:58,720 --> 00:13:02,410
observable then I patch it with the

00:13:01,150 --> 00:13:04,750
different creation methods and the

00:13:02,410 --> 00:13:08,230
operators and I use it below in version

00:13:04,750 --> 00:13:10,480
5.5 you can import each operator

00:13:08,230 --> 00:13:12,310
individually and then you can you can

00:13:10,480 --> 00:13:15,430
import the creation methods individually

00:13:12,310 --> 00:13:17,620
and use them like this you could also

00:13:15,430 --> 00:13:19,420
import all of the operators from one

00:13:17,620 --> 00:13:19,690
spot from our XG s slash operators and

00:13:19,420 --> 00:13:23,440
version

00:13:19,690 --> 00:13:24,820
five or five point five but the thing is

00:13:23,440 --> 00:13:26,580
we've got a lot of different import

00:13:24,820 --> 00:13:29,260
sites so here's a non-exhaustive list of

00:13:26,580 --> 00:13:32,950
v5 import sites so these are all like

00:13:29,260 --> 00:13:34,810
arcgis arcgis /rx is a kitchen sink ones

00:13:32,950 --> 00:13:37,000
you got observable and sub all the

00:13:34,810 --> 00:13:39,400
subjects you've got schedulers all the

00:13:37,000 --> 00:13:40,930
creation methods these are the operators

00:13:39,400 --> 00:13:43,300
in alphabetic order we're gonna go

00:13:40,930 --> 00:13:44,830
here's one page two pages two columns we

00:13:43,300 --> 00:13:46,870
only made it to F that's the sixth

00:13:44,830 --> 00:13:48,460
letter in the alphabet right so and

00:13:46,870 --> 00:13:50,920
there's there's multiple ways to import

00:13:48,460 --> 00:13:53,290
the operators too so there's hundreds in

00:13:50,920 --> 00:13:55,000
hundreds and hundreds of possible import

00:13:53,290 --> 00:13:58,330
sites in rxjs version five and it

00:13:55,000 --> 00:14:00,310
confuses people in rxjs version six

00:13:58,330 --> 00:14:01,750
there are roughly two that you'll care

00:14:00,310 --> 00:14:04,120
about as an angular developer you will

00:14:01,750 --> 00:14:07,180
import everything that is a type or a

00:14:04,120 --> 00:14:09,010
scheduler or a helper from our rxjs and

00:14:07,180 --> 00:14:12,990
all of the operators get imported from

00:14:09,010 --> 00:14:12,990
rxjs slash operators and that's it

00:14:16,850 --> 00:14:21,769
so here's the complete list of all the

00:14:19,489 --> 00:14:23,600
possible import sites the the top two I

00:14:21,769 --> 00:14:26,239
just told you about rxjs and RCS slash

00:14:23,600 --> 00:14:28,970
operators all of the testing stuff is

00:14:26,239 --> 00:14:30,709
under rxjs slash testing the WebSocket

00:14:28,970 --> 00:14:33,859
implementation is under RCS slash

00:14:30,709 --> 00:14:36,049
WebSocket and our the ArcGIS has its own

00:14:33,859 --> 00:14:37,189
Ajax implementation that nobody in the

00:14:36,049 --> 00:14:39,319
angular community really uses because

00:14:37,189 --> 00:14:43,729
you have the HTTP service that's under

00:14:39,319 --> 00:14:45,319
rxjs slash Ajax so again the two you

00:14:43,729 --> 00:14:47,779
care about just to go over it

00:14:45,319 --> 00:14:49,639
rxjs has all the types all the creation

00:14:47,779 --> 00:14:50,929
methods all of the schedulers all of the

00:14:49,639 --> 00:14:52,429
helpers under it basically anything

00:14:50,929 --> 00:14:54,259
that's not an operator comes from this

00:14:52,429 --> 00:14:55,549
pretty much and then all of the

00:14:54,259 --> 00:14:59,239
operators that you had passed a pipe

00:14:55,549 --> 00:15:01,669
come from rxjs slash operators let's

00:14:59,239 --> 00:15:03,799
talk about deprecations and removals the

00:15:01,669 --> 00:15:05,269
why so the reason that we're deprecating

00:15:03,799 --> 00:15:06,889
and removing certain things is because

00:15:05,269 --> 00:15:09,229
we had some exposed implementation

00:15:06,889 --> 00:15:11,929
details that people were using we also

00:15:09,229 --> 00:15:13,519
want to reduce the library size and we

00:15:11,929 --> 00:15:15,229
want to reduce the API surface area so

00:15:13,519 --> 00:15:18,019
the libraries a little bit easier for

00:15:15,229 --> 00:15:19,339
people to learn and use so right now we

00:15:18,019 --> 00:15:21,619
have too many ways to do the same thing

00:15:19,339 --> 00:15:24,079
these are all ways to do basically what

00:15:21,619 --> 00:15:25,759
observable of does you can import a Rea

00:15:24,079 --> 00:15:27,799
observable or scalar observable you can

00:15:25,759 --> 00:15:29,899
use them directly with new you could you

00:15:27,799 --> 00:15:31,009
could import from array use of I mean

00:15:29,899 --> 00:15:33,019
this is how you do use them these are

00:15:31,009 --> 00:15:34,309
all doing the exact same thing they even

00:15:33,019 --> 00:15:38,869
follow the same code paths in a lot of

00:15:34,309 --> 00:15:40,519
cases in rx gs6 there's there's only one

00:15:38,869 --> 00:15:43,629
way to do this you import of and you use

00:15:40,519 --> 00:15:51,649
it so no more of this which one do I use

00:15:43,629 --> 00:15:53,419
there's one implementation details that

00:15:51,649 --> 00:15:55,339
have been moved or removed so these are

00:15:53,419 --> 00:15:56,749
just as an example there's a lot of

00:15:55,339 --> 00:15:59,119
observables like some people were using

00:15:56,749 --> 00:16:00,859
empty observable or air observable are

00:15:59,119 --> 00:16:01,669
never observable directly you weren't

00:16:00,859 --> 00:16:03,049
really supposed to do that I think

00:16:01,669 --> 00:16:04,729
there's even some documentation out

00:16:03,049 --> 00:16:06,529
there that that recommends you do that

00:16:04,729 --> 00:16:08,449
it was never supposed to happen that way

00:16:06,529 --> 00:16:10,009
it's these were implementation details

00:16:08,449 --> 00:16:11,359
of the library that were to support the

00:16:10,009 --> 00:16:14,299
other methods that were recommending you

00:16:11,359 --> 00:16:15,589
use so there's probably some people that

00:16:14,299 --> 00:16:17,119
are using these are freaking out like oh

00:16:15,589 --> 00:16:18,709
god what do we do don't don't worry

00:16:17,119 --> 00:16:22,609
we've we've got something to help you

00:16:18,709 --> 00:16:24,379
I'll get to that at the end here so

00:16:22,609 --> 00:16:25,489
deprecations we're deprecating result

00:16:24,379 --> 00:16:27,199
selectors a lot of people don't even

00:16:25,489 --> 00:16:29,029
know what this is and I don't even think

00:16:27,199 --> 00:16:30,740
they were really documented that well

00:16:29,029 --> 00:16:32,690
it's this right here

00:16:30,740 --> 00:16:34,730
there's a set for merge map can cat maps

00:16:32,690 --> 00:16:36,530
which map in a few a few other operators

00:16:34,730 --> 00:16:37,820
there was a second mapping function you

00:16:36,530 --> 00:16:40,060
could use to map inner and outer

00:16:37,820 --> 00:16:42,950
observables or inner and outer values

00:16:40,060 --> 00:16:45,590
and omit them you can do the same thing

00:16:42,950 --> 00:16:47,180
by just using a pipe removing all of

00:16:45,590 --> 00:16:48,710
these result selectors resulted in

00:16:47,180 --> 00:16:50,900
removing almost two thousand lines of

00:16:48,710 --> 00:16:52,400
code from our code base so it's it's

00:16:50,900 --> 00:16:54,500
important now these are just deprecated

00:16:52,400 --> 00:16:55,790
we removed them but we're now doing what

00:16:54,500 --> 00:16:57,620
you're seeing here internal in the

00:16:55,790 --> 00:16:59,750
library if you're still using them but

00:16:57,620 --> 00:17:01,850
we're we want you by version seven to

00:16:59,750 --> 00:17:05,480
stop using these and start start doing

00:17:01,850 --> 00:17:07,250
this so so the other thing we're

00:17:05,480 --> 00:17:09,320
deprecating is the operator versions of

00:17:07,250 --> 00:17:10,760
concat and merge and zip and the ones

00:17:09,320 --> 00:17:13,220
that basically they have a counterpart

00:17:10,760 --> 00:17:14,810
that's static and the reason that we're

00:17:13,220 --> 00:17:16,280
removing them is there's a couple

00:17:14,810 --> 00:17:18,830
reasons but i'll get to in a second so

00:17:16,280 --> 00:17:21,470
here's what they look like in operator

00:17:18,830 --> 00:17:23,510
format you've got a pipe and cat b c if

00:17:21,470 --> 00:17:26,300
you use them statically it's just can

00:17:23,510 --> 00:17:28,970
cat a b c it's it's a lot easier to read

00:17:26,300 --> 00:17:30,440
so the the biggest reason we want to

00:17:28,970 --> 00:17:32,600
remove them is we don't want confusion

00:17:30,440 --> 00:17:34,730
between like here's a creation method

00:17:32,600 --> 00:17:36,200
and here's an operator and people try to

00:17:34,730 --> 00:17:38,090
use the creation method as an operator

00:17:36,200 --> 00:17:40,100
and it just breaks and you get this

00:17:38,090 --> 00:17:41,900
function is not an observable type weird

00:17:40,100 --> 00:17:44,330
error and that's that's not good so

00:17:41,900 --> 00:17:47,930
these are deprecated for now and by

00:17:44,330 --> 00:17:50,570
version seven we want to remove them all

00:17:47,930 --> 00:17:53,630
right the new the new operator so

00:17:50,570 --> 00:17:57,500
exciting throw up empty see I can tell

00:17:53,630 --> 00:17:59,420
you're excited the throw off empty what

00:17:57,500 --> 00:18:01,250
it does is it does exactly what it

00:17:59,420 --> 00:18:04,130
sounds like if an observable completes

00:18:01,250 --> 00:18:05,900
without emitting any values it will map

00:18:04,130 --> 00:18:07,970
a new error and throw it down the chain

00:18:05,900 --> 00:18:09,350
of observation if the observable gets a

00:18:07,970 --> 00:18:11,150
value then it's just a pass-through and

00:18:09,350 --> 00:18:13,040
this can be used in a variety of ways

00:18:11,150 --> 00:18:14,930
here's just a contrived example where

00:18:13,040 --> 00:18:18,320
we're saying take all the button clicks

00:18:14,930 --> 00:18:19,400
until someone resizes the view and if no

00:18:18,320 --> 00:18:20,330
one clicks the button before the views

00:18:19,400 --> 00:18:21,650
resize we're going to throw an error

00:18:20,330 --> 00:18:24,920
that said the button wasn't clicked

00:18:21,650 --> 00:18:27,350
before the views resize contrived but

00:18:24,920 --> 00:18:29,150
that's it so those are all the changes

00:18:27,350 --> 00:18:31,640
so great Ben how are we gonna migrate

00:18:29,150 --> 00:18:35,450
and update everything like I'm ruining

00:18:31,640 --> 00:18:38,240
someone's day right now well to to up to

00:18:35,450 --> 00:18:40,010
update to upgrade RCS what you can do is

00:18:38,240 --> 00:18:42,500
you can just if you're using yarn or NPM

00:18:40,010 --> 00:18:44,720
you can right now say rxjs at RC and

00:18:42,500 --> 00:18:48,620
later today it'll just be

00:18:44,720 --> 00:18:50,930
rxjs but very soon anyways and then

00:18:48,620 --> 00:18:52,280
right there you've already got our cs6

00:18:50,930 --> 00:18:55,670
and things are gonna start breaking if

00:18:52,280 --> 00:18:59,210
you're using rxjs 5 features until you

00:18:55,670 --> 00:19:01,160
install rxjs - compat and what rxjs -

00:18:59,210 --> 00:19:02,870
compat is is it is a library that

00:19:01,160 --> 00:19:04,820
provides a bridge to all of the old

00:19:02,870 --> 00:19:09,110
import port sites and old types that

00:19:04,820 --> 00:19:11,510
existed in rxjs 5.5 you won't need the

00:19:09,110 --> 00:19:15,200
RC once we release so again that's

00:19:11,510 --> 00:19:16,940
coming very soon and if you're using the

00:19:15,200 --> 00:19:18,920
newest version of angular CLI it's even

00:19:16,940 --> 00:19:21,590
easier what you do there is you just do

00:19:18,920 --> 00:19:23,600
ng update RCS and that's because we've

00:19:21,590 --> 00:19:26,320
added schematics to the rxjs library a

00:19:23,600 --> 00:19:29,750
package itself that will run with with

00:19:26,320 --> 00:19:33,860
ng update and basically do the previous

00:19:29,750 --> 00:19:39,050
two steps I was showing for year so

00:19:33,860 --> 00:19:42,020
after that thank you very much after

00:19:39,050 --> 00:19:43,760
that like 90 99 percent of you would

00:19:42,020 --> 00:19:46,130
just be good to go even if you have the

00:19:43,760 --> 00:19:48,170
old rxjs 5 5 style as long as you do not

00:19:46,130 --> 00:19:51,950
do anything too crazy it should just

00:19:48,170 --> 00:19:53,780
work at that point so just a recap of

00:19:51,950 --> 00:19:55,790
how to migrate or update the first thing

00:19:53,780 --> 00:19:57,950
you want to do is update to 5 5 10 the

00:19:55,790 --> 00:19:59,840
latest version of 5 5 because there's

00:19:57,950 --> 00:20:01,070
there's some bug fixes in there and you

00:19:59,840 --> 00:20:02,660
want to make sure that you catch any

00:20:01,070 --> 00:20:05,210
bugs that came from those bug fixes

00:20:02,660 --> 00:20:07,490
first and then you and you update to 6

00:20:05,210 --> 00:20:09,980
so update arcs you have 2 6 0 and then

00:20:07,490 --> 00:20:11,750
you can install rxjs - compat if you if

00:20:09,980 --> 00:20:14,750
you haven't already migrated all your

00:20:11,750 --> 00:20:16,010
code to be 6o compliant and then from

00:20:14,750 --> 00:20:17,840
there you want to go through and update

00:20:16,010 --> 00:20:19,460
your imports and your code to be 6o

00:20:17,840 --> 00:20:24,230
compliant and then you can remove arcs

00:20:19,460 --> 00:20:25,310
yes - can pat but headband there's a

00:20:24,230 --> 00:20:26,630
step in there that sounded horrible

00:20:25,310 --> 00:20:28,630
right like going through and updating

00:20:26,630 --> 00:20:31,630
all your code you don't want to do that

00:20:28,630 --> 00:20:34,700
no I don't want to do that either so

00:20:31,630 --> 00:20:36,850
when a Maiko who's who's here somewhere

00:20:34,700 --> 00:20:39,110
I didn't I have seen him around he and

00:20:36,850 --> 00:20:41,420
Vikram and a few other wonderful people

00:20:39,110 --> 00:20:46,190
at Google have helped put together this

00:20:41,420 --> 00:20:49,100
TS lint rule rxjs - TS lint and you can

00:20:46,190 --> 00:20:51,920
actually just install it add a migrate

00:20:49,100 --> 00:20:52,940
migrate TS lint json to your directory

00:20:51,920 --> 00:20:56,330
and all these instructions are in the

00:20:52,940 --> 00:20:57,870
readme for the TS lint rule and then run

00:20:56,330 --> 00:21:00,180
TS lint fix

00:20:57,870 --> 00:21:02,310
and it will go through and update all of

00:21:00,180 --> 00:21:04,140
your dot chained operators to be

00:21:02,310 --> 00:21:06,990
pipeable operators it'll update all of

00:21:04,140 --> 00:21:09,270
your observable loves to be just of

00:21:06,990 --> 00:21:10,890
it'll make everything 6o compliant for

00:21:09,270 --> 00:21:12,600
you you might have to run it more than

00:21:10,890 --> 00:21:14,310
once because there's some quirks around

00:21:12,600 --> 00:21:15,420
TS lint about it'll update it'll update

00:21:14,310 --> 00:21:17,580
everything and then you have to update

00:21:15,420 --> 00:21:20,160
everything again but after you run it a

00:21:17,580 --> 00:21:22,380
two or three times maybe everything will

00:21:20,160 --> 00:21:24,630
be updated I'm sorry about that it's

00:21:22,380 --> 00:21:25,950
kind of funny but everything will be

00:21:24,630 --> 00:21:29,640
updated and from there you can probably

00:21:25,950 --> 00:21:31,260
just remove the rxjs compat package good

00:21:29,640 --> 00:21:39,780
as all your code adjust automatically be

00:21:31,260 --> 00:21:41,840
updated so another thing that people

00:21:39,780 --> 00:21:44,910
should know is right now Google is using

00:21:41,840 --> 00:21:46,200
rxjs 6 in production the same bit that

00:21:44,910 --> 00:21:47,940
we're talking about and we also ran

00:21:46,200 --> 00:21:51,530
these same TS lint rolls across

00:21:47,940 --> 00:21:54,900
thousands of files inside of Google and

00:21:51,530 --> 00:21:55,890
updated everything and it's all it's all

00:21:54,900 --> 00:21:58,230
working so all of this has been

00:21:55,890 --> 00:22:00,360
thoroughly tested for you by Google

00:21:58,230 --> 00:22:02,580
because we've only got one version of

00:22:00,360 --> 00:22:03,750
rxjs inside of Google and it's it's rxjs

00:22:02,580 --> 00:22:06,360
version 6 right now

00:22:03,750 --> 00:22:09,950
so proceed with confidence that this

00:22:06,360 --> 00:22:12,300
stuff is going to work so just a summary

00:22:09,950 --> 00:22:14,310
you want to use the new pikeville

00:22:12,300 --> 00:22:16,920
operators in version 5.5 if you're not

00:22:14,310 --> 00:22:20,430
already version 6 what it gives you is

00:22:16,920 --> 00:22:23,220
simplified imports you got reduced api

00:22:20,430 --> 00:22:24,540
service api surface area and it fixes

00:22:23,220 --> 00:22:25,860
this unhandled errors problem this

00:22:24,540 --> 00:22:28,170
producer interference problem that's

00:22:25,860 --> 00:22:29,640
really nasty and then the migration

00:22:28,170 --> 00:22:32,070
process the first thing you want to do

00:22:29,640 --> 00:22:33,480
again is update to 5/5 first and make

00:22:32,070 --> 00:22:35,580
sure that you've got all of your bugs

00:22:33,480 --> 00:22:37,890
fixed from that and then you install

00:22:35,580 --> 00:22:40,830
ArcGIS at our C or the latest version of

00:22:37,890 --> 00:22:43,140
rxjs rxjs compat will make all of your

00:22:40,830 --> 00:22:44,490
not compatible code that it's backwards

00:22:43,140 --> 00:22:46,770
compatibility so to make your code

00:22:44,490 --> 00:22:48,030
compatible again and then you can run

00:22:46,770 --> 00:22:51,060
the TS lint rules to help you migrate

00:22:48,030 --> 00:22:54,870
and then remove those that compat

00:22:51,060 --> 00:22:56,010
package and last a little bit this bonus

00:22:54,870 --> 00:22:57,900
this last thing I'm going to tell you is

00:22:56,010 --> 00:23:00,120
there is the super secret version 7 work

00:22:57,900 --> 00:23:01,710
is now public there's actually it's

00:23:00,120 --> 00:23:05,040
based off of Andre Stahl it's my friend

00:23:01,710 --> 00:23:06,900
Andre salts call bags and we're gonna

00:23:05,040 --> 00:23:08,250
have the same public API obviously -

00:23:06,900 --> 00:23:11,190
things that we are we're telling you

00:23:08,250 --> 00:23:11,730
we're deprecating but it's gonna have

00:23:11,190 --> 00:23:13,529
the same

00:23:11,730 --> 00:23:15,179
safety guarantees and it's much much

00:23:13,529 --> 00:23:16,559
much smaller and faster an order of

00:23:15,179 --> 00:23:19,500
magnitude in some cases for some

00:23:16,559 --> 00:23:20,639
operators it's there's an experimental

00:23:19,500 --> 00:23:22,470
branch at this link that you can go

00:23:20,639 --> 00:23:24,809
check out as far as like seeing what it

00:23:22,470 --> 00:23:26,070
looks like and there's an active design

00:23:24,809 --> 00:23:28,169
documents about ten pages long

00:23:26,070 --> 00:23:30,510
discussing like the whys in the house of

00:23:28,169 --> 00:23:31,559
this and I say active because vacation

00:23:30,510 --> 00:23:34,529
I'll go through and delete like a whole

00:23:31,559 --> 00:23:36,419
paragraph and rewrite it but just if

00:23:34,529 --> 00:23:38,269
you're curious it's it's out there so

00:23:36,419 --> 00:23:41,060
it's it's not hidden from anybody

00:23:38,269 --> 00:23:46,250
that's it thank you very much

00:23:41,060 --> 00:23:46,250

YouTube URL: https://www.youtube.com/watch?v=JCXZhe6KsxQ


