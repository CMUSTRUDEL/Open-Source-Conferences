Title: Deep dive into content projection - Eudes Petonnet
Publication date: 2018-11-16
Playlist: ng-conf 2018
Description: 
	ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,030 --> 00:00:05,790
yeah my name is hood and I'm the

00:00:02,370 --> 00:00:06,839
technical lead for clarity at VMware so

00:00:05,790 --> 00:00:09,090
today I'm going to talk about content

00:00:06,839 --> 00:00:11,490
projection so if you've ever tried to

00:00:09,090 --> 00:00:13,740
write a reusable component whether it's

00:00:11,490 --> 00:00:16,920
for your own application just inside of

00:00:13,740 --> 00:00:18,480
grab or as a part of a library you

00:00:16,920 --> 00:00:20,430
probably had to project content into it

00:00:18,480 --> 00:00:22,410
so today we're just gonna go quickly

00:00:20,430 --> 00:00:25,529
over the basic cases and we're gonna

00:00:22,410 --> 00:00:27,599
poke and prod at angular to see exactly

00:00:25,529 --> 00:00:29,340
all the weird behaviors you can get and

00:00:27,599 --> 00:00:32,669
understand exactly what's happening

00:00:29,340 --> 00:00:35,370
there and the way we're gonna dive into

00:00:32,669 --> 00:00:37,290
it is we're going to count cheap so

00:00:35,370 --> 00:00:39,270
turns out that's the definition of our

00:00:37,290 --> 00:00:41,399
countenance this is going to be deeply

00:00:39,270 --> 00:00:43,640
technical and I'm asking everyone to

00:00:41,399 --> 00:00:46,860
count sheep so please don't doze off

00:00:43,640 --> 00:00:50,910
like cougar on right so welcome to ng

00:00:46,860 --> 00:00:53,219
farm we have a simple password component

00:00:50,910 --> 00:00:55,199
it has a fence in an energy content

00:00:53,219 --> 00:00:57,870
inside of it so that's the basic content

00:00:55,199 --> 00:01:00,750
projection anything you put inside of my

00:00:57,870 --> 00:01:04,199
pasture ends up inside of the fence and

00:01:00,750 --> 00:01:06,299
next to it we have a sheep component so

00:01:04,199 --> 00:01:07,710
it's a again simple angular component it

00:01:06,299 --> 00:01:11,430
just uses a tree you might not be

00:01:07,710 --> 00:01:13,260
familiar with that counts the number of

00:01:11,430 --> 00:01:14,970
instances of that component so every

00:01:13,260 --> 00:01:18,659
time we get a new sheep the counter goes

00:01:14,970 --> 00:01:20,400
up by one and it displays it yes this

00:01:18,659 --> 00:01:22,680
isn't actual emoji in the code you can

00:01:20,400 --> 00:01:24,840
do that you can actually put them in the

00:01:22,680 --> 00:01:25,799
selectors but for everyone's sanity I

00:01:24,840 --> 00:01:27,990
decided to go with a more traditional

00:01:25,799 --> 00:01:30,479
one for this talk but you could have

00:01:27,990 --> 00:01:32,520
emojis in your selectors so let's just

00:01:30,479 --> 00:01:33,570
say it in action that will be easier so

00:01:32,520 --> 00:01:35,520
I have my pasture

00:01:33,570 --> 00:01:38,880
I put three sheep inside of that and

00:01:35,520 --> 00:01:41,159
what I get is this my three sheep

00:01:38,880 --> 00:01:43,409
counting one two three inside of the

00:01:41,159 --> 00:01:44,909
fence this is an actual web app I did

00:01:43,409 --> 00:01:48,659
not spend way too much time getting this

00:01:44,909 --> 00:01:50,369
to work with CSS borders and I wish I

00:01:48,659 --> 00:01:52,409
could do live examples but I have way

00:01:50,369 --> 00:01:54,780
too many to do so I just share at the

00:01:52,409 --> 00:01:56,310
end and exam to this tablet and those

00:01:54,780 --> 00:01:59,729
are real examples you can go and play

00:01:56,310 --> 00:02:01,890
with and try out if you want so that's

00:01:59,729 --> 00:02:04,350
the basic content projection very simple

00:02:01,890 --> 00:02:06,600
another case that's very common and that

00:02:04,350 --> 00:02:10,289
most of you know is the targeted

00:02:06,600 --> 00:02:11,819
projection so ng-content offers a select

00:02:10,289 --> 00:02:14,370
actually

00:02:11,819 --> 00:02:16,290
it can take any CSS selector so here I'm

00:02:14,370 --> 00:02:18,540
using an element selector for my sheep

00:02:16,290 --> 00:02:21,090
it could be a class selector without

00:02:18,540 --> 00:02:23,700
something or it could be an ad true

00:02:21,090 --> 00:02:26,519
selector with brackets anything you want

00:02:23,700 --> 00:02:28,739
so we have our targeted ng content with

00:02:26,519 --> 00:02:31,379
the Select and then outside of the fence

00:02:28,739 --> 00:02:33,090
we have a casual ng content so the sheep

00:02:31,379 --> 00:02:34,590
will go inside of the fence and anything

00:02:33,090 --> 00:02:36,359
else will go outside so let's say we

00:02:34,590 --> 00:02:40,230
have a particularly facetious user and

00:02:36,359 --> 00:02:43,709
they try to sneak in an elephant next to

00:02:40,230 --> 00:02:47,069
the Sheep luckily with that ng content

00:02:43,709 --> 00:02:50,129
select the sheep are inside of fence and

00:02:47,069 --> 00:02:53,579
the elephant's day outside so works

00:02:50,129 --> 00:02:56,569
great now I'm sure most of you are

00:02:53,579 --> 00:02:59,579
familiar with ng container it's this

00:02:56,569 --> 00:03:02,280
logical element in angular that lets you

00:02:59,579 --> 00:03:04,519
group children for any logical reason

00:03:02,280 --> 00:03:07,139
you want typically structural directives

00:03:04,519 --> 00:03:08,459
and the important part about ng

00:03:07,139 --> 00:03:10,079
container is that it's completely

00:03:08,459 --> 00:03:12,840
transparent it doesn't produce anything

00:03:10,079 --> 00:03:15,239
you can put as many ng containers as you

00:03:12,840 --> 00:03:19,169
want inside of your template the output

00:03:15,239 --> 00:03:21,120
HTML will be exactly the same so ng

00:03:19,169 --> 00:03:23,220
container never changes anything it's

00:03:21,120 --> 00:03:24,930
transparent doesn't impact your output

00:03:23,220 --> 00:03:27,199
it's perfect so obviously this is still

00:03:24,930 --> 00:03:29,310
going to work exactly the same way or

00:03:27,199 --> 00:03:33,479
weight not really

00:03:29,310 --> 00:03:36,299
so what did happen here what happened is

00:03:33,479 --> 00:03:37,379
ng continent happens at Build time it's

00:03:36,299 --> 00:03:39,810
very basic

00:03:37,379 --> 00:03:41,250
almost done at that point but there is a

00:03:39,810 --> 00:03:43,260
reason for it so it happens at Build

00:03:41,250 --> 00:03:44,519
time which means at Build time into

00:03:43,260 --> 00:03:46,409
containers still here it didn't

00:03:44,519 --> 00:03:48,810
disappear it didn't produce any out they

00:03:46,409 --> 00:03:49,859
didn't you know let the rest there is no

00:03:48,810 --> 00:03:52,079
output 'html

00:03:49,859 --> 00:03:53,729
let's see if you're so ng content just

00:03:52,079 --> 00:03:56,099
really looks at the surface everything

00:03:53,729 --> 00:03:58,169
and here it is an ng container and an

00:03:56,099 --> 00:03:58,949
elephant so everything goes outside no

00:03:58,169 --> 00:04:02,129
questions asked

00:03:58,949 --> 00:04:03,959
the problem is you often need an extra

00:04:02,129 --> 00:04:05,489
container whereas it's ng container

00:04:03,959 --> 00:04:07,979
because you need a structural directive

00:04:05,489 --> 00:04:10,019
or your own component that encapsulates

00:04:07,979 --> 00:04:12,479
the sheep or anything like this

00:04:10,019 --> 00:04:14,310
well luckily angular provides an

00:04:12,479 --> 00:04:18,599
undocumented but completely supported

00:04:14,310 --> 00:04:21,599
feature that is ng project as so this is

00:04:18,599 --> 00:04:23,920
getting into the not as well-known parts

00:04:21,599 --> 00:04:27,550
ng project has is an edge

00:04:23,920 --> 00:04:29,050
views that counterbalances the select

00:04:27,550 --> 00:04:30,910
attribute energy content and it takes

00:04:29,050 --> 00:04:33,220
exactly the same kind of selectors you

00:04:30,910 --> 00:04:35,470
can receive any CSS selector in here

00:04:33,220 --> 00:04:38,110
once again we use the nice ship element

00:04:35,470 --> 00:04:40,510
selector and by doing this we tell

00:04:38,110 --> 00:04:42,760
angular at Build time that this energy

00:04:40,510 --> 00:04:46,660
container should be project projected as

00:04:42,760 --> 00:04:48,190
a sheep so once we do this now the sheep

00:04:46,660 --> 00:04:50,680
goes inside of the fence and

00:04:48,190 --> 00:04:52,180
everything's right except now I feel

00:04:50,680 --> 00:04:54,250
absolutely terrible for breaking them up

00:04:52,180 --> 00:04:56,190
so you know what exceptionally we can

00:04:54,250 --> 00:04:59,260
make the elephant a sheep too

00:04:56,190 --> 00:05:01,240
the important part here is that anti

00:04:59,260 --> 00:05:03,490
projectiles can go on absolutely

00:05:01,240 --> 00:05:06,190
anything you want any element and let

00:05:03,490 --> 00:05:07,660
you disguise it as anything else you

00:05:06,190 --> 00:05:10,380
want for the purpose of content

00:05:07,660 --> 00:05:12,850
projection so if you're wrapping your

00:05:10,380 --> 00:05:15,430
whatever you're passing to a third-party

00:05:12,850 --> 00:05:17,080
component in your own component just use

00:05:15,430 --> 00:05:19,990
ng project as and you will go in the

00:05:17,080 --> 00:05:23,070
right place so we've seen target

00:05:19,990 --> 00:05:25,720
projection within the more basic cases

00:05:23,070 --> 00:05:28,030
now we're gonna try hacking angular

00:05:25,720 --> 00:05:30,220
let's see if we can trick it into doing

00:05:28,030 --> 00:05:32,170
something you didn't expect to do so the

00:05:30,220 --> 00:05:34,570
first thing we can try and a lot of

00:05:32,170 --> 00:05:37,510
people have tried this is cloning the

00:05:34,570 --> 00:05:39,730
sheep so you have a pasture you have a

00:05:37,510 --> 00:05:44,020
single ship in there and what if my

00:05:39,730 --> 00:05:46,560
pastures template have has 3ng contents

00:05:44,020 --> 00:05:49,750
what do I get three sheep one one one

00:05:46,560 --> 00:05:52,270
three sheep one two three well the

00:05:49,750 --> 00:05:55,300
answer is to get one sheep that's all

00:05:52,270 --> 00:05:57,550
but wait that's because I have koreandj

00:05:55,300 --> 00:05:59,170
accountants what if I do it smartly what

00:05:57,550 --> 00:06:02,020
if I have a single ng-content

00:05:59,170 --> 00:06:05,350
and I put an energy for on it maybe that

00:06:02,020 --> 00:06:07,150
will work no it doesn't cloning sheep is

00:06:05,350 --> 00:06:09,160
a very hard business requires years of

00:06:07,150 --> 00:06:12,730
research just transitory angular like

00:06:09,160 --> 00:06:15,610
that won't happen overnight so this

00:06:12,730 --> 00:06:16,060
hints toward the fact that this sheep

00:06:15,610 --> 00:06:19,330
here

00:06:16,060 --> 00:06:21,550
seems almost protected by angular so

00:06:19,330 --> 00:06:22,720
maybe we can try one last thing before

00:06:21,550 --> 00:06:27,090
we explain what happened

00:06:22,720 --> 00:06:29,080
it's putting an NG if on the ng-content

00:06:27,090 --> 00:06:29,680
so if we put an energy from the

00:06:29,080 --> 00:06:33,940
ng-content

00:06:29,680 --> 00:06:37,470
and toggle it on and off its own we have

00:06:33,940 --> 00:06:41,620
our sheep it's half our ship is gone

00:06:37,470 --> 00:06:43,569
it's back on the ship is back we're

00:06:41,620 --> 00:06:46,210
playing hide and seek here so this might

00:06:43,569 --> 00:06:48,580
be exactly the behavior we expect but if

00:06:46,210 --> 00:06:50,979
you're familiar with ng if ng F promises

00:06:48,580 --> 00:06:52,840
you that anything inside of it will be

00:06:50,979 --> 00:06:55,270
properly destroyed and recreated every

00:06:52,840 --> 00:06:56,979
time not happening here we still get the

00:06:55,270 --> 00:07:00,210
first shape the very same one we had

00:06:56,979 --> 00:07:04,240
before we didn't recreate a new one so

00:07:00,210 --> 00:07:07,690
what's happening here is that ng content

00:07:04,240 --> 00:07:09,729
doesn't produce any content it just

00:07:07,690 --> 00:07:12,639
moves existing one from one place to

00:07:09,729 --> 00:07:17,349
another think of it like a pen child on

00:07:12,639 --> 00:07:19,960
HTML Dom node or jQuery depends which is

00:07:17,349 --> 00:07:22,060
also very popular it just moves an

00:07:19,960 --> 00:07:25,479
element from one place to another and if

00:07:22,060 --> 00:07:27,310
you chain a pin child well only the last

00:07:25,479 --> 00:07:29,229
parent will actually get the elements

00:07:27,310 --> 00:07:30,849
the previous one will just get it for a

00:07:29,229 --> 00:07:36,789
second and then I'll move on to the next

00:07:30,849 --> 00:07:39,430
one so in the case of our several ng

00:07:36,789 --> 00:07:41,259
contents the first one would get the

00:07:39,430 --> 00:07:42,820
Sheep it would match on every single one

00:07:41,259 --> 00:07:44,469
of them but only the last ng content

00:07:42,820 --> 00:07:47,830
with the Sheep so why does angular do

00:07:44,469 --> 00:07:50,080
this the actual main reason before

00:07:47,830 --> 00:07:53,080
anything else is that you have

00:07:50,080 --> 00:07:55,840
consistent expectations if your path if

00:07:53,080 --> 00:07:58,210
the pasture is not yours if it's a third

00:07:55,840 --> 00:08:00,669
party component and you give that third

00:07:58,210 --> 00:08:02,860
party component a cute little sheep you

00:08:00,669 --> 00:08:04,780
want to make sure that that third party

00:08:02,860 --> 00:08:06,759
component will be able to abuse it you

00:08:04,780 --> 00:08:08,830
give it a cute cheep you get back a cue

00:08:06,759 --> 00:08:13,030
chip in good health that's the entire

00:08:08,830 --> 00:08:15,610
point so angular protects that sheep and

00:08:13,030 --> 00:08:19,030
in technical terms what that means is

00:08:15,610 --> 00:08:21,310
the lifecycle of the sheep is tied to

00:08:19,030 --> 00:08:22,930
the place where it was declared not the

00:08:21,310 --> 00:08:27,789
place where he ends up being displayed

00:08:22,930 --> 00:08:30,460
in the HTML okay so the third party

00:08:27,789 --> 00:08:32,200
component cannot control the lifecycle

00:08:30,460 --> 00:08:34,899
of the sheep only you because you

00:08:32,200 --> 00:08:36,820
declare it can now another side effect

00:08:34,899 --> 00:08:38,740
and I consider this more than a side

00:08:36,820 --> 00:08:40,630
effect than the real reason is that as

00:08:38,740 --> 00:08:42,490
we say the ng content is pretty basic

00:08:40,630 --> 00:08:43,750
and happens at Build time and then

00:08:42,490 --> 00:08:45,850
anything that happens at Build time

00:08:43,750 --> 00:08:48,310
means you don't have to do it at runtime

00:08:45,850 --> 00:08:50,320
so if you have an application that

00:08:48,310 --> 00:08:51,130
displays a thousand components you don't

00:08:50,320 --> 00:08:52,510
go over ever

00:08:51,130 --> 00:08:54,490
every single one of those components at

00:08:52,510 --> 00:08:56,590
runtime figure out what goes where match

00:08:54,490 --> 00:08:58,630
it and then move it you do it at build

00:08:56,590 --> 00:08:59,860
time and then you render it directly in

00:08:58,630 --> 00:09:01,690
the right place in the application so

00:08:59,860 --> 00:09:05,680
you just get better performance because

00:09:01,690 --> 00:09:08,110
of that now breeding sheep is actually a

00:09:05,680 --> 00:09:11,260
very valid use case I can't do it right

00:09:08,110 --> 00:09:14,500
now I tried tried energy for nothing

00:09:11,260 --> 00:09:16,570
words so what can I do well we're all

00:09:14,500 --> 00:09:18,700
engineers here so we all know that the

00:09:16,570 --> 00:09:23,200
only thing you need to be cheap are

00:09:18,700 --> 00:09:29,190
blueprints so what angular calls

00:09:23,200 --> 00:09:30,910
blueprints our template reps or

00:09:29,190 --> 00:09:33,310
blueprints and angular are called

00:09:30,910 --> 00:09:35,500
template res template graph is basically

00:09:33,310 --> 00:09:37,870
you put an NG template element around

00:09:35,500 --> 00:09:39,940
something and that something becomes a

00:09:37,870 --> 00:09:42,420
blueprint you can use it to reproduce

00:09:39,940 --> 00:09:45,670
that content as many times as you want

00:09:42,420 --> 00:09:47,650
so you can use ng template like that and

00:09:45,670 --> 00:09:49,390
maybe you're not familiar with that but

00:09:47,650 --> 00:09:51,040
there's another syntax for it but you

00:09:49,390 --> 00:09:54,070
might be very familiar with which is the

00:09:51,040 --> 00:09:57,370
structural syntax directive so the star

00:09:54,070 --> 00:10:00,130
struck the star syntax here is just

00:09:57,370 --> 00:10:05,200
impact the trigger for wrapping whatever

00:10:00,130 --> 00:10:07,840
it's on inside of an NG template so here

00:10:05,200 --> 00:10:09,520
those two are completely equivalent you

00:10:07,840 --> 00:10:10,930
could write one or the other they end up

00:10:09,520 --> 00:10:13,270
being exactly the same the first one

00:10:10,930 --> 00:10:16,720
actually decreases to the second one

00:10:13,270 --> 00:10:18,820
when compiling so that's how you write

00:10:16,720 --> 00:10:20,020
your template reps but the problem is

00:10:18,820 --> 00:10:21,820
how do you get a hold of them how you

00:10:20,020 --> 00:10:23,710
get a hold of the actual typographic to

00:10:21,820 --> 00:10:26,440
use it well

00:10:23,710 --> 00:10:29,050
easy options are querying for it with

00:10:26,440 --> 00:10:30,820
view child or content child but no one

00:10:29,050 --> 00:10:33,070
likes writing ng templates it's verbose

00:10:30,820 --> 00:10:34,180
it's not I'm gonna show how to do it

00:10:33,070 --> 00:10:37,150
with the structural direct because

00:10:34,180 --> 00:10:39,550
that's a very nice 1-9 syntax so to do

00:10:37,150 --> 00:10:42,550
it you write your directive as an

00:10:39,550 --> 00:10:44,080
attribute directive basic selector

00:10:42,550 --> 00:10:46,780
that's the Select attribute selector and

00:10:44,080 --> 00:10:48,580
in the constructor you just ask for the

00:10:46,780 --> 00:10:49,930
template ref and angular will give you

00:10:48,580 --> 00:10:52,060
the template right for that structural

00:10:49,930 --> 00:10:54,430
directive directly in the constructor so

00:10:52,060 --> 00:10:56,980
in our case I asked for the template ref

00:10:54,430 --> 00:10:59,140
and as for the parent farm component and

00:10:56,980 --> 00:11:01,089
I tell the parent farm component hey

00:10:59,140 --> 00:11:03,390
these are the blueprints for sheep

00:11:01,089 --> 00:11:05,399
that's how you can create more of them

00:11:03,390 --> 00:11:08,430
that's what I'm doing here very simple

00:11:05,399 --> 00:11:09,839
now how do you use this well on the

00:11:08,430 --> 00:11:12,149
application side you just put your

00:11:09,839 --> 00:11:14,070
pasture you put your shape inside with

00:11:12,149 --> 00:11:15,690
that structural directive so technically

00:11:14,070 --> 00:11:17,760
what you're giving here to the farm

00:11:15,690 --> 00:11:21,360
they're farms now not pastures because

00:11:17,760 --> 00:11:23,459
you're breeding sheep obviously so the

00:11:21,360 --> 00:11:26,070
farm that what you're giving here is not

00:11:23,459 --> 00:11:29,370
an actual sheep it's a model of how to

00:11:26,070 --> 00:11:31,410
create sheep and now in the form

00:11:29,370 --> 00:11:34,470
template instead of having three-inch

00:11:31,410 --> 00:11:36,240
contents we use three nd template

00:11:34,470 --> 00:11:39,029
outlets which is just directive that

00:11:36,240 --> 00:11:40,500
angular provides to easily stand out a

00:11:39,029 --> 00:11:42,720
template graph there are other ways

00:11:40,500 --> 00:11:45,300
other API is using typescript services

00:11:42,720 --> 00:11:46,860
from from angular but that's the most

00:11:45,300 --> 00:11:49,709
straightforward and easy way to use it

00:11:46,860 --> 00:11:50,399
and when we do that we get our sheep one

00:11:49,709 --> 00:11:54,329
two three

00:11:50,399 --> 00:11:56,730
we only passed one as part of the and we

00:11:54,329 --> 00:11:58,680
get pre displayed at the end the most

00:11:56,730 --> 00:12:00,630
important part here is that they count

00:11:58,680 --> 00:12:03,269
correctly one two three which means

00:12:00,630 --> 00:12:05,880
they're naturally bred organic sheep not

00:12:03,269 --> 00:12:08,820
weird phones that show one one one each

00:12:05,880 --> 00:12:10,620
sheep is properly instantiated and from

00:12:08,820 --> 00:12:12,360
there will be a separate instance that

00:12:10,620 --> 00:12:14,760
will behave differently based on user

00:12:12,360 --> 00:12:17,190
actions that's the most important part

00:12:14,760 --> 00:12:18,570
now of course everyone's gonna say yeah

00:12:17,190 --> 00:12:20,640
this is all fine and good but there's no

00:12:18,570 --> 00:12:23,279
way I can copy/paste template outlets

00:12:20,640 --> 00:12:26,130
over the place well as I said you can

00:12:23,279 --> 00:12:27,449
use you contain RF and other services

00:12:26,130 --> 00:12:29,190
from angular they're all pretty

00:12:27,449 --> 00:12:32,339
complicated but if you want to just just

00:12:29,190 --> 00:12:35,790
the very simple stuff well luckily ng4

00:12:32,339 --> 00:12:38,040
offers a tablet option you just use ng

00:12:35,790 --> 00:12:39,810
for you pass it a template and it's

00:12:38,040 --> 00:12:41,910
going to use that template instead of

00:12:39,810 --> 00:12:44,399
whatever is inside of the ng for so here

00:12:41,910 --> 00:12:45,810
I give my sheep template to an g4 and I

00:12:44,399 --> 00:12:49,680
still get my sheep and they still count

00:12:45,810 --> 00:12:52,290
one two three exactly the same way you

00:12:49,680 --> 00:12:55,470
remember we had this ng-if example okay

00:12:52,290 --> 00:12:59,699
we can do the same using template graph

00:12:55,470 --> 00:13:01,980
with ng if so we have our template

00:12:59,699 --> 00:13:05,100
outlet and we have our ng F on it and

00:13:01,980 --> 00:13:07,079
this will properly destroy and recreate

00:13:05,100 --> 00:13:09,000
a new sheep every time so for obvious

00:13:07,079 --> 00:13:10,800
animal rights reason I'm not gonna show

00:13:09,000 --> 00:13:13,380
this live this would be far too cruel

00:13:10,800 --> 00:13:15,120
but it works exactly the same way if I

00:13:13,380 --> 00:13:17,040
were to do it and toggle it I'd get

00:13:15,120 --> 00:13:19,050
first sheep one

00:13:17,040 --> 00:13:20,910
then hide then show again it will be

00:13:19,050 --> 00:13:23,790
shipped to hide and show again I'll be

00:13:20,910 --> 00:13:25,709
shipped three so delete and recreate a

00:13:23,790 --> 00:13:30,000
new instance every single time

00:13:25,709 --> 00:13:34,829
so we've seen ng content we've seen ng

00:13:30,000 --> 00:13:37,680
tablet ref ng template is there any way

00:13:34,829 --> 00:13:39,839
we can maybe combine the two to trick

00:13:37,680 --> 00:13:41,490
angular because we're smarter than anger

00:13:39,839 --> 00:13:47,130
there's there has to be something we can

00:13:41,490 --> 00:13:50,519
do well kind of sort of we can do some

00:13:47,130 --> 00:13:52,500
things and their use cases so before I

00:13:50,519 --> 00:13:54,660
actually show what we can do I'm gonna

00:13:52,500 --> 00:13:57,800
show a use case that's a valid one and

00:13:54,660 --> 00:14:00,509
see exactly what we can get out of it so

00:13:57,800 --> 00:14:02,610
this is something you see all over the

00:14:00,509 --> 00:14:05,670
place I think every single I've seen at

00:14:02,610 --> 00:14:08,130
least tried this once you have you're

00:14:05,670 --> 00:14:09,870
projecting your ship and instead of

00:14:08,130 --> 00:14:10,290
having simply pasture or farm now we

00:14:09,870 --> 00:14:12,540
grew up

00:14:10,290 --> 00:14:15,029
we're expanded and we have a barn and

00:14:12,540 --> 00:14:17,190
the outside of the barn and we have a

00:14:15,029 --> 00:14:18,630
whole forum and what we want obviously

00:14:17,190 --> 00:14:22,529
is the Sheep to be in the barn during

00:14:18,630 --> 00:14:26,519
the night and outside during the day so

00:14:22,529 --> 00:14:30,389
when you try this during the day once

00:14:26,519 --> 00:14:31,889
again real way back during the day you

00:14:30,389 --> 00:14:35,910
have your sheep outside everything's

00:14:31,889 --> 00:14:38,810
fine you're good there ok then night

00:14:35,910 --> 00:14:41,160
comes they disappear who knows where

00:14:38,810 --> 00:14:43,139
presumably out in Salt Lake City

00:14:41,160 --> 00:14:44,579
partying somewhere because they come

00:14:43,139 --> 00:14:49,290
back in the next day completely ready

00:14:44,579 --> 00:14:52,410
for the new talks so what did just

00:14:49,290 --> 00:14:54,870
happen here it's always coming back to

00:14:52,410 --> 00:14:57,690
the same thing ng content is basic

00:14:54,870 --> 00:14:59,850
happens at Build time so when we protect

00:14:57,690 --> 00:15:02,069
our sheep at Build time angular is gonna

00:14:59,850 --> 00:15:04,439
see oh we have an energy content a first

00:15:02,069 --> 00:15:06,689
one in the barn the sheep go here then

00:15:04,439 --> 00:15:08,699
we see the second one oh wait no they go

00:15:06,689 --> 00:15:10,410
in the second one so the sheep at Build

00:15:08,699 --> 00:15:15,680
time end up in the second energy content

00:15:10,410 --> 00:15:19,290
then they display nicely night calms

00:15:15,680 --> 00:15:21,779
sorry night tones they're still inside

00:15:19,290 --> 00:15:23,130
of that second energy content it turns

00:15:21,779 --> 00:15:24,899
out it's not displayed because there is

00:15:23,130 --> 00:15:28,560
an energy if but they're still inside of

00:15:24,899 --> 00:15:30,960
that so when when the day comes again

00:15:28,560 --> 00:15:32,280
they display again and they never move

00:15:30,960 --> 00:15:33,780
back to the previous energy content it

00:15:32,280 --> 00:15:34,950
happened at Build time and they match to

00:15:33,780 --> 00:15:37,410
the second one so they're going to stay

00:15:34,950 --> 00:15:39,510
in the second one forever but this is

00:15:37,410 --> 00:15:42,090
this is something everyone wants to do

00:15:39,510 --> 00:15:43,770
all the time a button that becomes a

00:15:42,090 --> 00:15:47,130
span depending on something because it's

00:15:43,770 --> 00:15:49,680
not clickable lots of options so how do

00:15:47,130 --> 00:15:52,170
we actually do this how do we move the

00:15:49,680 --> 00:15:55,440
sheep from inside to outside of the barn

00:15:52,170 --> 00:15:57,600
well once again we're all engineers and

00:15:55,440 --> 00:15:59,640
we know that the only reasonable way to

00:15:57,600 --> 00:16:07,380
safely move something from point A to

00:15:59,640 --> 00:16:09,840
point B or portals so a portal is just a

00:16:07,380 --> 00:16:12,240
coin that can either commit is just a

00:16:09,840 --> 00:16:14,010
term the community coin and it's that

00:16:12,240 --> 00:16:17,310
little contraption at the top very

00:16:14,010 --> 00:16:20,550
simple I put my energy content inside of

00:16:17,310 --> 00:16:23,070
an NG template what does that do well

00:16:20,550 --> 00:16:25,740
what that does is anything I will put

00:16:23,070 --> 00:16:28,320
inside of my farm will be projected

00:16:25,740 --> 00:16:30,060
inside of that template which gives me

00:16:28,320 --> 00:16:32,820
pretty much a template ref that contains

00:16:30,060 --> 00:16:34,140
anything that was inside of the farm the

00:16:32,820 --> 00:16:35,850
entire content right

00:16:34,140 --> 00:16:38,310
remember template ref doesn't produce

00:16:35,850 --> 00:16:40,650
anything doesn't show anything so here

00:16:38,310 --> 00:16:42,540
if we left it like that we didn't we

00:16:40,650 --> 00:16:44,400
wouldn't display anything as part of the

00:16:42,540 --> 00:16:47,190
farm but now we have a template ref

00:16:44,400 --> 00:16:49,920
which we named portal here so we can

00:16:47,190 --> 00:16:52,710
reuse it in the template so we did just

00:16:49,920 --> 00:16:54,630
like before we have our barn we have our

00:16:52,710 --> 00:16:56,790
our tile and instead of having two mg

00:16:54,630 --> 00:16:59,040
contents with anji if we have two mg

00:16:56,790 --> 00:17:01,230
template outlets with anji if we saw

00:16:59,040 --> 00:17:05,640
that earlier right exactly the same

00:17:01,230 --> 00:17:11,580
thing and so what now happens is during

00:17:05,640 --> 00:17:14,339
the day they're outside stamped by the

00:17:11,580 --> 00:17:16,860
second template outlet then night comes

00:17:14,339 --> 00:17:18,780
and the second outlet template outlet

00:17:16,860 --> 00:17:21,089
disabil disappears but the first one

00:17:18,780 --> 00:17:23,190
just gets the template ref and puts it

00:17:21,089 --> 00:17:25,550
inside of the barn so now they're

00:17:23,190 --> 00:17:28,560
correctly inside of the barn and then

00:17:25,550 --> 00:17:31,680
they comes back and they move outside

00:17:28,560 --> 00:17:34,260
again once again the one thing you have

00:17:31,680 --> 00:17:36,000
to notice here is those counters they're

00:17:34,260 --> 00:17:38,840
still one two three they're still the

00:17:36,000 --> 00:17:42,300
exact same sheep we had from before so

00:17:38,840 --> 00:17:44,460
we get template rats right and before

00:17:42,300 --> 00:17:47,460
that template refs allowed us to destroy

00:17:44,460 --> 00:17:49,020
create Chi but those sheep as part of

00:17:47,460 --> 00:17:50,670
the energy content inside of tempura

00:17:49,020 --> 00:17:52,950
graph so anger is still protecting them

00:17:50,670 --> 00:17:54,930
you won't be able to destroy them their

00:17:52,950 --> 00:17:58,080
lifecycle is tied to the application

00:17:54,930 --> 00:18:00,810
itself not the farm component so what we

00:17:58,080 --> 00:18:03,210
learned here is that no matter what we

00:18:00,810 --> 00:18:05,850
do no matter how much we try to cheat

00:18:03,210 --> 00:18:08,880
angular always prevented us from abusing

00:18:05,850 --> 00:18:11,370
the project the cheap so if you take

00:18:08,880 --> 00:18:13,230
anything out of this this talk today

00:18:11,370 --> 00:18:16,020
it's going to be the next two points

00:18:13,230 --> 00:18:18,480
which is depending on what your

00:18:16,020 --> 00:18:20,700
component is going to do that will

00:18:18,480 --> 00:18:23,550
decide it's API so you define the

00:18:20,700 --> 00:18:25,440
behavior then that decides the API and

00:18:23,550 --> 00:18:27,390
based on that they will decide the

00:18:25,440 --> 00:18:29,940
implementation you don't start

00:18:27,390 --> 00:18:32,580
implementing first that won't work so if

00:18:29,940 --> 00:18:36,060
your component takes something and just

00:18:32,580 --> 00:18:37,650
displays it exactly as is then content

00:18:36,060 --> 00:18:40,230
projection is perfect it's what you want

00:18:37,650 --> 00:18:44,880
it's a 1:1 match you get a sheep a

00:18:40,230 --> 00:18:46,860
display of sheep if you want more than

00:18:44,880 --> 00:18:48,660
one sheep if you want the same one but

00:18:46,860 --> 00:18:51,270
recreating it every time if you don't

00:18:48,660 --> 00:18:54,060
want to display any you need blueprints

00:18:51,270 --> 00:18:59,790
you need to receive a template outlet

00:18:54,060 --> 00:19:02,850
for this so always look at the behavior

00:18:59,790 --> 00:19:04,830
of your component then decide what the

00:19:02,850 --> 00:19:07,200
API is going to be structural directive

00:19:04,830 --> 00:19:09,990
template ref or just content projection

00:19:07,200 --> 00:19:14,400
and then you can implement it always go

00:19:09,990 --> 00:19:18,600
that way so that was it this is the

00:19:14,400 --> 00:19:20,310
start bits with all the examples I you

00:19:18,600 --> 00:19:23,160
can go ahead and try and play with it

00:19:20,310 --> 00:19:25,760
has every single example of the portals

00:19:23,160 --> 00:19:29,970
you can try everything you want just

00:19:25,760 --> 00:19:32,100
fork it please and try it out and that's

00:19:29,970 --> 00:19:34,140
it thank you for listening and I promise

00:19:32,100 --> 00:19:36,920
I didn't destroy any sheep during the

00:19:34,140 --> 00:19:36,920
making of this presentation

00:19:37,850 --> 00:19:39,910

YouTube URL: https://www.youtube.com/watch?v=PTwKhxLZ3jI


