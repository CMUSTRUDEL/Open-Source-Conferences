Title: Testing Best Practices for Angular Applications - Yi Qi
Publication date: 2018-11-16
Playlist: ng-conf 2018
Description: 
	ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,000 --> 00:00:11,519
hi everyone I'm ye I come from on your

00:00:08,280 --> 00:00:15,269
team my topic today is testing best

00:00:11,519 --> 00:00:19,920
practice for angular app before we start

00:00:15,269 --> 00:00:21,050
talk I'd like to ask question why do we

00:00:19,920 --> 00:00:25,619
write tests

00:00:21,050 --> 00:00:27,900
well someone probably say because my

00:00:25,619 --> 00:00:33,590
boss asked me to do that I have no

00:00:27,900 --> 00:00:37,230
choice right so that's probably true and

00:00:33,590 --> 00:00:41,100
others might say I won't have a better

00:00:37,230 --> 00:00:41,450
app I won't make my user happy that's

00:00:41,100 --> 00:00:46,260
great

00:00:41,450 --> 00:00:52,350
that's probably or ultimate goal if you

00:00:46,260 --> 00:00:56,039
ask me I'll say well I just don't want

00:00:52,350 --> 00:01:00,780
my new fancy feature was ruined by swim

00:00:56,039 --> 00:01:04,140
simony safe chuckling I also don't want

00:01:00,780 --> 00:01:07,140
to debug for bug for the whole week even

00:01:04,140 --> 00:01:09,590
though even even though a unit it can be

00:01:07,140 --> 00:01:14,010
detected by you in title five lines

00:01:09,590 --> 00:01:18,030
actually I just want to make my self

00:01:14,010 --> 00:01:21,659
happier a great house for myself okay

00:01:18,030 --> 00:01:25,259
let's study first let take a look at

00:01:21,659 --> 00:01:29,220
what we have in angular the first thing

00:01:25,259 --> 00:01:32,280
is unit house and its many testing the

00:01:29,220 --> 00:01:35,369
isolated from a piece of code and in

00:01:32,280 --> 00:01:36,840
general we should have most of us most

00:01:35,369 --> 00:01:39,240
of our test should be unit health

00:01:36,840 --> 00:01:43,250
because it's well being run faster and

00:01:39,240 --> 00:01:47,189
it's edited back the next thing is

00:01:43,250 --> 00:01:50,820
intern test it's mainly focus on testing

00:01:47,189 --> 00:01:54,030
the whole workflow and actually we

00:01:50,820 --> 00:01:56,280
shouldn't have lots of entrant has but

00:01:54,030 --> 00:01:59,490
each of them should be a good

00:01:56,280 --> 00:02:05,250
representation of the real user scenario

00:01:59,490 --> 00:02:09,660
and we also have angular CLI support for

00:02:05,250 --> 00:02:10,379
testing for unicast it can generate the

00:02:09,660 --> 00:02:11,090
template

00:02:10,379 --> 00:02:14,030
unit test

00:02:11,090 --> 00:02:17,360
for each newly generated component and

00:02:14,030 --> 00:02:19,730
it can also collect unit has the on

00:02:17,360 --> 00:02:24,200
camera and display the testing results

00:02:19,730 --> 00:02:26,930
on page the next thing is until test it

00:02:24,200 --> 00:02:30,590
can also generate protector config it's

00:02:26,930 --> 00:02:32,650
also collect tears and run tests okay

00:02:30,590 --> 00:02:35,480
that's all you'll to live without and

00:02:32,650 --> 00:02:39,680
then let's look at take a look at each

00:02:35,480 --> 00:02:43,040
test in detail okay first let's start

00:02:39,680 --> 00:02:47,420
with the Union test well

00:02:43,040 --> 00:02:51,080
Hastings newscasts actually I think

00:02:47,420 --> 00:02:55,160
death is common difficulty we face today

00:02:51,080 --> 00:02:58,340
and angular band Nature had lots of

00:02:55,160 --> 00:03:01,549
async tasks so we will mainly focus on

00:02:58,340 --> 00:03:02,090
that many we have see kind of icing

00:03:01,549 --> 00:03:06,260
tasks

00:03:02,090 --> 00:03:09,319
the first one is promise and the second

00:03:06,260 --> 00:03:14,630
one is timer lights item all and set

00:03:09,319 --> 00:03:17,150
interval the third one is xhr since most

00:03:14,630 --> 00:03:19,840
of angular acts a travel made by HTTP

00:03:17,150 --> 00:03:25,700
client so we will mainly focus on that

00:03:19,840 --> 00:03:30,170
ok the first thing promise promise is

00:03:25,700 --> 00:03:33,829
the most common async task and even some

00:03:30,170 --> 00:03:36,980
other async tasks like timer or xhr menu

00:03:33,829 --> 00:03:39,519
method might also be promise based to

00:03:36,980 --> 00:03:41,840
illustrate this we have a timer for this

00:03:39,519 --> 00:03:44,630
actually is a very simple demo would

00:03:41,840 --> 00:03:47,030
call it delayed echo server as you can

00:03:44,630 --> 00:03:49,910
see we have an input field we have echo

00:03:47,030 --> 00:03:53,030
field in for something and it will be

00:03:49,910 --> 00:03:56,959
echoed to the ecosphere instead of

00:03:53,030 --> 00:03:59,690
accurate directly we had set him out at

00:03:56,959 --> 00:04:02,209
the one-second delay to make it I think

00:03:59,690 --> 00:04:04,120
you can see admission it will sound like

00:04:02,209 --> 00:04:09,940
this

00:04:04,120 --> 00:04:12,560
ok let's start to test how it has that

00:04:09,940 --> 00:04:15,980
first thing we just and keys to the

00:04:12,560 --> 00:04:18,769
input field and then we can wait for

00:04:15,980 --> 00:04:22,130
angular to be stable and emitted up

00:04:18,769 --> 00:04:23,360
changes let me check whether the echo is

00:04:22,130 --> 00:04:26,990
correct

00:04:23,360 --> 00:04:33,439
okay looks good we can grant as see the

00:04:26,990 --> 00:04:36,259
test past but does it really work if we

00:04:33,439 --> 00:04:38,020
change expectation to run content and

00:04:36,259 --> 00:04:43,240
test it again

00:04:38,020 --> 00:04:48,710
as a result well to test the Oh past

00:04:43,240 --> 00:04:52,159
what's going wrong here actually the

00:04:48,710 --> 00:04:55,909
test just completed too early even

00:04:52,159 --> 00:05:00,229
before our async task was completed so

00:04:55,909 --> 00:05:03,349
hot handle is the first thing we can do

00:05:00,229 --> 00:05:06,379
is you've just been done just mean

00:05:03,349 --> 00:05:09,860
provide the way to let us to tell just

00:05:06,379 --> 00:05:13,280
me when the test is completed we need

00:05:09,860 --> 00:05:16,159
pass the time to our test function and

00:05:13,280 --> 00:05:18,639
code on when we know the test is

00:05:16,159 --> 00:05:23,779
completed and the we can land has again

00:05:18,639 --> 00:05:26,270
great the test doubtful fail okay so we

00:05:23,779 --> 00:05:29,719
can change the chain aid to the

00:05:26,270 --> 00:05:33,469
ratification and test again cool

00:05:29,719 --> 00:05:37,969
the test works either any problem with

00:05:33,469 --> 00:05:41,389
this okay let's take like to this what

00:05:37,969 --> 00:05:48,830
if or it has somehow through an error

00:05:41,389 --> 00:05:52,639
that has what happened who the task a

00:05:48,830 --> 00:05:54,729
still fail just courage but the iron

00:05:52,639 --> 00:05:57,680
method is timeout

00:05:54,729 --> 00:06:00,830
well it's somewhat makes sense because

00:05:57,680 --> 00:06:03,830
our dunka bad won't have chance to be

00:06:00,830 --> 00:06:11,120
completed but it's not our method we

00:06:03,830 --> 00:06:13,879
want right how to handle this well first

00:06:11,120 --> 00:06:16,909
thing we need to do is we need catch the

00:06:13,879 --> 00:06:20,599
exception and pass a message over to

00:06:16,909 --> 00:06:24,110
turned off fail so wait a second it can

00:06:20,599 --> 00:06:29,360
show the right error message well it

00:06:24,110 --> 00:06:32,120
works but as we can say to achieve this

00:06:29,360 --> 00:06:33,330
we have to add lots of actual lines of

00:06:32,120 --> 00:06:35,970
code right

00:06:33,330 --> 00:06:37,819
at the time at cash and the dental fail

00:06:35,970 --> 00:06:40,939
is easy to forgot

00:06:37,819 --> 00:06:44,490
do we have easier to do that than

00:06:40,939 --> 00:06:47,580
success in angular will provide the

00:06:44,490 --> 00:06:50,430
icing helper which can automatically

00:06:47,580 --> 00:06:54,479
wait for odd tests inside angular so

00:06:50,430 --> 00:06:58,280
what we need to do it just to Turtles

00:06:54,479 --> 00:07:02,430
instead async async function and

00:06:58,280 --> 00:07:05,280
intestine path and it's also if there's

00:07:02,430 --> 00:07:10,050
exception that has it a and also short

00:07:05,280 --> 00:07:13,800
tracks error that cool but if there any

00:07:10,050 --> 00:07:19,319
problem with this okay I'll take a look

00:07:13,800 --> 00:07:21,719
at what if we have several steps say we

00:07:19,319 --> 00:07:24,599
were sent keys send any come at first

00:07:21,719 --> 00:07:28,560
time and the mission East and things

00:07:24,599 --> 00:07:31,590
done great well the task that has got to

00:07:28,560 --> 00:07:34,169
go past but as you can say even though

00:07:31,590 --> 00:07:40,199
it just have Swiss and keys the code is

00:07:34,169 --> 00:07:43,259
already looks messy the good news is we

00:07:40,199 --> 00:07:46,830
have a sink of it right now and it was

00:07:43,259 --> 00:07:49,979
supported in depth grave it does provide

00:07:46,830 --> 00:07:53,580
the functionality our postman chain with

00:07:49,979 --> 00:07:58,710
cleaners syntax okay let it learn what

00:07:53,580 --> 00:08:01,580
it looks like in test to do it first we

00:07:58,710 --> 00:08:04,830
need add async keyword tooth function

00:08:01,580 --> 00:08:06,629
recall what we have before for the

00:08:04,830 --> 00:08:09,659
lacing helper it will somewhat looks

00:08:06,629 --> 00:08:12,089
like this actually I think helper is a

00:08:09,659 --> 00:08:13,050
function but for now it's a keyword

00:08:12,089 --> 00:08:17,669
they're different

00:08:13,050 --> 00:08:20,639
okay it just sent keys and a weight that

00:08:17,669 --> 00:08:22,349
grow to be stable when we have a very

00:08:20,639 --> 00:08:25,770
key word here it will pause the

00:08:22,349 --> 00:08:28,319
execution and cute promise is resolved

00:08:25,770 --> 00:08:31,199
okay and then we touch changes which

00:08:28,319 --> 00:08:32,909
hack the test okay everything works well

00:08:31,199 --> 00:08:36,839
and code looks much nicer

00:08:32,909 --> 00:08:38,839
okay that's great the next thing is

00:08:36,839 --> 00:08:42,330
timer

00:08:38,839 --> 00:08:45,450
probably we can use the same way to test

00:08:42,330 --> 00:08:48,570
timer say we use async wait we use when

00:08:45,450 --> 00:08:51,450
stable but the one problem is if we

00:08:48,570 --> 00:08:53,670
tasks like this we have to wait the

00:08:51,450 --> 00:08:56,100
timer to be triggered say we have to

00:08:53,670 --> 00:08:57,960
wait maybe actual 2 seconds or something

00:08:56,100 --> 00:09:00,870
like that it works slower

00:08:57,960 --> 00:09:04,380
another thing is sometimes we want how

00:09:00,870 --> 00:09:09,029
more precise time control okay let's

00:09:04,380 --> 00:09:11,880
take a look at them this will call the

00:09:09,029 --> 00:09:14,400
past ICO server actually it just looks

00:09:11,880 --> 00:09:18,150
the same as before but instead of

00:09:14,400 --> 00:09:20,370
calling a static timeout we have added

00:09:18,150 --> 00:09:25,350
the bath time here so we can show the

00:09:20,370 --> 00:09:28,830
animation it was somewhat looked like

00:09:25,350 --> 00:09:33,740
this the icon to be updated and you will

00:09:28,830 --> 00:09:39,779
stop typing for 500 milliseconds okay

00:09:33,740 --> 00:09:45,089
how to test that well when you make sure

00:09:39,779 --> 00:09:47,940
it won't be echoed if we stop if we stop

00:09:45,089 --> 00:09:50,370
less than the past time and it should be

00:09:47,940 --> 00:09:54,330
actual if we stop greater or equal to

00:09:50,370 --> 00:10:00,209
the punch time which means we need an

00:09:54,330 --> 00:10:03,000
accurate time control right so in

00:10:00,209 --> 00:10:05,970
angular we provide of helper called fake

00:10:03,000 --> 00:10:09,720
I think everything is synchronous in

00:10:05,970 --> 00:10:13,950
fake async tone and it's mainly used for

00:10:09,720 --> 00:10:17,400
testing timers and it will be faster and

00:10:13,950 --> 00:10:20,550
we have more preset time control okay

00:10:17,400 --> 00:10:22,860
let's see how it would look like well

00:10:20,550 --> 00:10:26,580
first thing when in rapper has in fake

00:10:22,860 --> 00:10:32,070
racing and we can you stick to advance

00:10:26,580 --> 00:10:35,550
the water clock okay let's see a demo

00:10:32,070 --> 00:10:40,080
how it works well it's actually the

00:10:35,550 --> 00:10:43,230
hammer page and we can use the debug the

00:10:40,080 --> 00:10:45,870
development tool to see her looks

00:10:43,230 --> 00:10:49,260
the first thing they just send keys I

00:10:45,870 --> 00:10:50,570
can see the pieces updated in input

00:10:49,260 --> 00:10:53,310
field that's great

00:10:50,570 --> 00:10:54,300
everything it took four nine nine

00:10:53,310 --> 00:10:56,540
milliseconds

00:10:54,300 --> 00:10:59,580
well it's license times millisecond and

00:10:56,540 --> 00:11:05,180
then we detect changes you can say the

00:10:59,580 --> 00:11:07,980
echo is doesn't updated that's great

00:11:05,180 --> 00:11:11,220
then we can stand another key with an

00:11:07,980 --> 00:11:14,310
ease employees updated we take 100

00:11:11,220 --> 00:11:18,000
millisecond and detect changes so I call

00:11:14,310 --> 00:11:20,850
is not updated either well that's great

00:11:18,000 --> 00:11:23,130
because even though phone at night and

00:11:20,850 --> 00:11:25,470
plasma Henry is great at this great her

00:11:23,130 --> 00:11:28,770
the five hundred well since we send

00:11:25,470 --> 00:11:32,910
another new key the timer suicide okay

00:11:28,770 --> 00:11:35,760
we keep sending his like we sent great

00:11:32,910 --> 00:11:39,870
here and take five hundred missing at

00:11:35,760 --> 00:11:42,600
this time and we talk changes Kuh and a

00:11:39,870 --> 00:11:45,990
Kuh is updated we can keep doing this

00:11:42,600 --> 00:11:47,850
with sank another keys we take one saw

00:11:45,990 --> 00:11:50,340
the main second time and detect changes

00:11:47,850 --> 00:12:00,060
and I could is after thinking that's

00:11:50,340 --> 00:12:02,790
good okay the last thing is xhr one

00:12:00,060 --> 00:12:06,150
possible solution is use just missed by

00:12:02,790 --> 00:12:11,760
we can spy on xhr and replace it with

00:12:06,150 --> 00:12:15,090
more Christmas but well it works that if

00:12:11,760 --> 00:12:18,030
we do that we cannot tax the actual HTTP

00:12:15,090 --> 00:12:21,840
request because it was replaced how can

00:12:18,030 --> 00:12:25,560
we do that is that angular provides a

00:12:21,840 --> 00:12:29,070
helper called HTTP testing controller we

00:12:25,560 --> 00:12:31,800
can use that so when we our task instead

00:12:29,070 --> 00:12:33,870
actually TB request and it will appear

00:12:31,800 --> 00:12:38,070
intercept that the testing controller

00:12:33,870 --> 00:12:41,010
with the mock response okay and see what

00:12:38,070 --> 00:12:44,430
it looks like I have another demo to

00:12:41,010 --> 00:12:49,530
showed us instead of cutting the I coded

00:12:44,430 --> 00:12:53,220
her from input field we got it from JSON

00:12:49,530 --> 00:12:56,120
file we make actor here say if we click

00:12:53,220 --> 00:13:02,790
the fetch data button

00:12:56,120 --> 00:13:04,529
it will be echoed here okay in general

00:13:02,790 --> 00:13:08,160
if we want to use a TB testing

00:13:04,529 --> 00:13:11,519
controller we need import httpclient

00:13:08,160 --> 00:13:13,500
testing module so that we can retrieve

00:13:11,519 --> 00:13:19,170
the HTTP I think controller from

00:13:13,500 --> 00:13:22,680
injector okay neo test is just simple

00:13:19,170 --> 00:13:26,759
first we need click the button and it

00:13:22,680 --> 00:13:31,110
will sent out a 2x HR and then etc will

00:13:26,759 --> 00:13:35,490
be intercept by our controller and then

00:13:31,110 --> 00:13:40,500
we can check whether it's really really

00:13:35,490 --> 00:13:43,379
sent out an xhr to this specific URL and

00:13:40,500 --> 00:13:46,560
then because flash or request with a

00:13:43,379 --> 00:13:48,629
mock response and then we just do the

00:13:46,560 --> 00:13:52,680
same thing that detect changes and check

00:13:48,629 --> 00:13:55,470
whether the echo tax is correct okay it

00:13:52,680 --> 00:13:57,360
works that's really cool right we can

00:13:55,470 --> 00:14:03,800
test everything we want to test here and

00:13:57,360 --> 00:14:07,829
what how really Internet traffic okay

00:14:03,800 --> 00:14:11,850
also we also want to make sure we have

00:14:07,829 --> 00:14:15,569
already test all that it will request so

00:14:11,850 --> 00:14:21,329
we can have a verify here in up to each

00:14:15,569 --> 00:14:25,649
section okay to summarize for promised

00:14:21,329 --> 00:14:29,970
we prefer use async await how timer

00:14:25,649 --> 00:14:33,180
would like to use fake async for testing

00:14:29,970 --> 00:14:37,470
xhr we prefer using HTTP testing

00:14:33,180 --> 00:14:39,990
controller okay if you want to know more

00:14:37,470 --> 00:14:42,000
about unit test you can watch this talk

00:14:39,990 --> 00:14:47,120
it will happen tomorrow present by

00:14:42,000 --> 00:14:53,790
cottony okay that's enough talk okay

00:14:47,120 --> 00:14:57,120
then let's talk about internal test in

00:14:53,790 --> 00:14:59,819
angular we have unturned has same

00:14:57,120 --> 00:15:03,689
framework called protractor it was built

00:14:59,819 --> 00:15:06,720
on top of web driver it has some anger

00:15:03,689 --> 00:15:09,230
specific rotators and it can

00:15:06,720 --> 00:15:16,670
automatically wait for angular

00:15:09,230 --> 00:15:20,160
okay one thing we need to realize is all

00:15:16,670 --> 00:15:25,530
webdriver calls are racing in protractor

00:15:20,160 --> 00:15:27,690
so promise chain are not visible why if

00:15:25,530 --> 00:15:31,710
we do that we will have a really long

00:15:27,690 --> 00:15:35,820
form this chain right so previously we

00:15:31,710 --> 00:15:38,610
have a mechanism called control flow it

00:15:35,820 --> 00:15:42,390
will kill all of the pending promises

00:15:38,610 --> 00:15:46,980
and the random sequentially well it

00:15:42,390 --> 00:15:51,330
works but the problem is actually the

00:15:46,980 --> 00:15:54,270
actual execution time of each webdriver

00:15:51,330 --> 00:15:58,680
car is not the time when the program

00:15:54,270 --> 00:16:02,700
hits that line of code because that code

00:15:58,680 --> 00:16:07,380
was killed and delayed right so which

00:16:02,700 --> 00:16:11,370
make most of development to most of

00:16:07,380 --> 00:16:14,610
debug tool won't work so it had to debug

00:16:11,370 --> 00:16:16,890
and for the same reason it's being

00:16:14,610 --> 00:16:20,760
deprecated and we don't actually we

00:16:16,890 --> 00:16:24,210
don't have it in selenium for since we

00:16:20,760 --> 00:16:26,460
already have a sink of age when it can

00:16:24,210 --> 00:16:27,840
solve the problem of her machine and is

00:16:26,460 --> 00:16:30,950
easy to debug

00:16:27,840 --> 00:16:34,290
we should start to mood to async/await

00:16:30,950 --> 00:16:37,860
just one thing to keep in mind we cannot

00:16:34,290 --> 00:16:40,980
miss mix async evasion and and the

00:16:37,860 --> 00:16:43,170
control flow at the same time so to use

00:16:40,980 --> 00:16:45,510
async wait the first thing we need to do

00:16:43,170 --> 00:16:48,720
is dip our control flow it disabled

00:16:45,510 --> 00:16:51,960
control flow we need modifier or

00:16:48,720 --> 00:16:55,710
protector config and then just use a

00:16:51,960 --> 00:16:58,770
single bit in the test we have a sink

00:16:55,710 --> 00:17:04,410
keyword and weight every webdriver cost

00:16:58,770 --> 00:17:07,530
okay if you want know more about the

00:17:04,410 --> 00:17:11,100
tractor you can also take a look at this

00:17:07,530 --> 00:17:14,240
talk it will present it by Michael and

00:17:11,100 --> 00:17:14,240
Kirk it's pretty

00:17:15,190 --> 00:17:22,530
okay let take a look at quick look at

00:17:18,550 --> 00:17:25,990
what will we ever have in the future

00:17:22,530 --> 00:17:31,240
the first thing is first thing is Elliot

00:17:25,990 --> 00:17:33,670
asked well what is Lt test its use alt

00:17:31,240 --> 00:17:37,630
mode which is ahead of time compilation

00:17:33,670 --> 00:17:41,350
in unit has it will serve the compiled

00:17:37,630 --> 00:17:45,190
templates in tests so it will be much

00:17:41,350 --> 00:17:48,580
faster and more stable the more

00:17:45,190 --> 00:17:52,260
important thing is it will closer to

00:17:48,580 --> 00:17:52,260
what is served in production

00:17:52,620 --> 00:18:01,960
next thing is component harness what is

00:17:58,030 --> 00:18:07,300
that it's a page object framework for

00:18:01,960 --> 00:18:11,620
components and it can be composable like

00:18:07,300 --> 00:18:14,470
components one more thing is it can be

00:18:11,620 --> 00:18:17,590
shared between Union tests and atlanta's

00:18:14,470 --> 00:18:20,170
which means we can just you as a one-day

00:18:17,590 --> 00:18:23,320
job that it can be used in both in test

00:18:20,170 --> 00:18:28,960
and in town okay

00:18:23,320 --> 00:18:31,240
to summarize what we have today Angra

00:18:28,960 --> 00:18:35,950
cell I provide a good support for

00:18:31,240 --> 00:18:40,990
testing and we have lots of helpers for

00:18:35,950 --> 00:18:43,330
different testing scenarios so let's add

00:18:40,990 --> 00:18:46,130
to read tasks and make our life hive

00:18:43,330 --> 00:18:50,109
here okay thank you

00:18:46,130 --> 00:18:50,109

YouTube URL: https://www.youtube.com/watch?v=HJ7Zxkz6iJ0


