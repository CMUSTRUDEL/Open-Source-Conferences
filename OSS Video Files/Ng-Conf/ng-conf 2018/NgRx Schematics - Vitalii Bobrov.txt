Title: NgRx Schematics - Vitalii Bobrov
Publication date: 2018-11-16
Playlist: ng-conf 2018
Description: 
	ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,030 --> 00:00:04,620
hi everybody hope you are not sleeping

00:00:03,259 --> 00:00:07,290
already

00:00:04,620 --> 00:00:10,980
so today I am going to talk about an

00:00:07,290 --> 00:00:13,679
zurich schematics this is the story how

00:00:10,980 --> 00:00:15,900
to get more productive when you are

00:00:13,679 --> 00:00:19,920
implementing and Zurich's on your

00:00:15,900 --> 00:00:24,449
application so before we start I got to

00:00:19,920 --> 00:00:27,060
take some notes about myself so for I'm

00:00:24,449 --> 00:00:29,580
front-end developer for last five years

00:00:27,060 --> 00:00:32,850
but for last two years I'm used

00:00:29,580 --> 00:00:36,390
engineering schematics to build to build

00:00:32,850 --> 00:00:38,610
big enterprise great application also I

00:00:36,390 --> 00:00:41,969
used to be a mentor and Angie goes

00:00:38,610 --> 00:00:45,600
events I have few open-source project

00:00:41,969 --> 00:00:50,100
and at my teenage years I used to play

00:00:45,600 --> 00:00:55,860
on my own rock band so guess who's this

00:00:50,100 --> 00:00:58,109
young man on this picture it's crazy but

00:00:55,860 --> 00:01:02,910
this picture was taken search in years

00:00:58,109 --> 00:01:06,060
ago and music is about creativity you're

00:01:02,910 --> 00:01:08,640
writing your own songs playing concerts

00:01:06,060 --> 00:01:11,130
and so on but how to relate it to

00:01:08,640 --> 00:01:14,369
programming and that's where the

00:01:11,130 --> 00:01:17,100
programming also about creativity it's

00:01:14,369 --> 00:01:19,710
creating your own components thinking

00:01:17,100 --> 00:01:24,689
about your architecture design patterns

00:01:19,710 --> 00:01:27,990
and so on but before we you can play a

00:01:24,689 --> 00:01:31,439
concert and entertaining people you

00:01:27,990 --> 00:01:36,229
should do boring setup before you should

00:01:31,439 --> 00:01:39,240
plug all my ass set up your guitar

00:01:36,229 --> 00:01:43,320
provide soundcheck and this programming

00:01:39,240 --> 00:01:46,670
we do the same thing we set up our build

00:01:43,320 --> 00:01:51,710
system our see eyes provide basic

00:01:46,670 --> 00:01:55,560
boilerplate code and so on and what

00:01:51,710 --> 00:01:59,159
schematics are this is the tool that

00:01:55,560 --> 00:02:03,450
will help you to reduce boilerplate code

00:01:59,159 --> 00:02:06,420
and have more time to implement your own

00:02:03,450 --> 00:02:10,200
business project when we are speaking

00:02:06,420 --> 00:02:12,260
about NGO risks we are used to create

00:02:10,200 --> 00:02:16,340
our store reduce

00:02:12,260 --> 00:02:19,459
Boozer's effects actions containers and

00:02:16,340 --> 00:02:21,650
we doing it once and once again and

00:02:19,459 --> 00:02:25,220
begin and again and again

00:02:21,650 --> 00:02:27,489
it's boring isn't it one way to solve

00:02:25,220 --> 00:02:30,459
this problem is to create some

00:02:27,489 --> 00:02:33,140
abstraction layer on top of your

00:02:30,459 --> 00:02:37,700
Angelics tools for example you can

00:02:33,140 --> 00:02:42,049
provide some Factory to create action

00:02:37,700 --> 00:02:46,129
creators or build some reducer creators

00:02:42,049 --> 00:02:49,849
but any abstraction has its own price it

00:02:46,129 --> 00:02:51,769
can be the price that you increase the

00:02:49,849 --> 00:02:55,099
time people get involved in to your

00:02:51,769 --> 00:03:00,560
project and with that you increase the

00:02:55,099 --> 00:03:04,599
whole development time and hopefully we

00:03:00,560 --> 00:03:08,180
can split our tasks into two categories

00:03:04,599 --> 00:03:12,829
boring and creative creative one is

00:03:08,180 --> 00:03:17,150
about our design architecture reusable

00:03:12,829 --> 00:03:19,430
API and so on on the other hand boring

00:03:17,150 --> 00:03:23,780
is about configuring your web pack

00:03:19,430 --> 00:03:28,579
config or Gow personally I can spend one

00:03:23,780 --> 00:03:30,590
day to twig in my web configuration how

00:03:28,579 --> 00:03:35,260
many of you can write web pack config

00:03:30,590 --> 00:03:35,260
without seeing the dots right there Kent

00:03:36,250 --> 00:03:45,109
is there some welcome I think only he

00:03:40,940 --> 00:03:48,739
can do it yeah really and when we are

00:03:45,109 --> 00:03:52,760
speaking about people and human and

00:03:48,739 --> 00:03:55,579
machines probably humans are better in

00:03:52,760 --> 00:03:58,609
creative tasks at least for now when we

00:03:55,579 --> 00:04:01,400
haven't yet machine learning enough to

00:03:58,609 --> 00:04:04,849
do that on the other hand machines are

00:04:01,400 --> 00:04:08,359
better on some tasks that going once and

00:04:04,849 --> 00:04:10,879
once again then won't be exhausted and

00:04:08,359 --> 00:04:16,070
you should remember that robots don't

00:04:10,879 --> 00:04:20,090
cry and angular team provides us with

00:04:16,070 --> 00:04:23,060
this great tool called and wash UI you

00:04:20,090 --> 00:04:26,660
can create your whole application with

00:04:23,060 --> 00:04:32,300
it and all needed pieces like camp

00:04:26,660 --> 00:04:38,520
directives pipes and services and how

00:04:32,300 --> 00:04:41,570
this stuff was extracted from angular's

00:04:38,520 --> 00:04:44,460
away into a separate project called

00:04:41,570 --> 00:04:49,139
schematics you can install schematics

00:04:44,460 --> 00:04:54,900
alive with yarn or NPM using yarn add

00:04:49,139 --> 00:04:57,900
and Jurek's schematics alight so what

00:04:54,900 --> 00:05:04,290
actually schematics do let's think about

00:04:57,900 --> 00:05:07,530
our file trees files tree like a state

00:05:04,290 --> 00:05:10,889
our code state and we passing it to

00:05:07,530 --> 00:05:14,100
schematic schematic in this case some

00:05:10,889 --> 00:05:17,090
kind of reducer you pass in your files

00:05:14,100 --> 00:05:20,610
and schematic return you new state

00:05:17,090 --> 00:05:24,479
updated files create new files remove

00:05:20,610 --> 00:05:27,690
Samsung or whatever and we as developers

00:05:24,479 --> 00:05:31,830
some kind of side effect to this file

00:05:27,690 --> 00:05:34,880
state normal team provide us with great

00:05:31,830 --> 00:05:38,100
tool called engineering schematics and

00:05:34,880 --> 00:05:42,320
they allow you to create your action

00:05:38,100 --> 00:05:46,830
source reducers and features with

00:05:42,320 --> 00:05:50,610
Handley CI commands so how we can use

00:05:46,830 --> 00:05:53,460
and Jurek schematics the best way to try

00:05:50,610 --> 00:05:56,490
something write some code make your

00:05:53,460 --> 00:06:00,380
hands dirty but what kind of application

00:05:56,490 --> 00:06:03,150
we can create maybe to-do list up

00:06:00,380 --> 00:06:06,570
usually showing examples on to-do list

00:06:03,150 --> 00:06:10,849
ops or when we are speaking about redox

00:06:06,570 --> 00:06:13,500
and G weeks we think about counters

00:06:10,849 --> 00:06:15,750
every day's work you probably create

00:06:13,500 --> 00:06:21,210
some counter to increase and decrease

00:06:15,750 --> 00:06:24,630
numbers isn't you so the answer is not

00:06:21,210 --> 00:06:27,979
we are used to get some data transform

00:06:24,630 --> 00:06:31,139
it and show to the user that's it so

00:06:27,979 --> 00:06:36,289
we're gonna to create Star Wars

00:06:31,139 --> 00:06:39,569
knowledgebase it should look like this

00:06:36,289 --> 00:06:42,780
so it's simple abrogation whisk

00:06:39,569 --> 00:06:48,360
a breeze information about servos heroes

00:06:42,780 --> 00:06:50,910
like name date of birth hate weights or

00:06:48,360 --> 00:06:54,289
for that we're gonna use to material

00:06:50,910 --> 00:06:58,440
design - don't be aware about components

00:06:54,289 --> 00:07:01,319
buttons colors and so on and I go not to

00:06:58,440 --> 00:07:04,259
use sloppy API this is open source

00:07:01,319 --> 00:07:06,840
Star Wars database that available for

00:07:04,259 --> 00:07:11,849
free without any registration as a mess

00:07:06,840 --> 00:07:13,830
and so on so how we can scaffold our

00:07:11,849 --> 00:07:16,830
application of course I going to use

00:07:13,830 --> 00:07:20,210
angular 2 I so I create a new

00:07:16,830 --> 00:07:24,750
application passing the engine you I

00:07:20,210 --> 00:07:28,320
call this as wkb is a cell for Star Wars

00:07:24,750 --> 00:07:30,840
knowledgebase I create providing some

00:07:28,320 --> 00:07:34,860
prefix for my components and directives

00:07:30,840 --> 00:07:38,069
and usually a museum a CSS fall styles

00:07:34,860 --> 00:07:42,090
then I go out to create our fish a model

00:07:38,069 --> 00:07:47,340
to separate consoles and in the future

00:07:42,090 --> 00:07:49,620
easier to extend our application so next

00:07:47,340 --> 00:07:53,159
I've got what material design with its

00:07:49,620 --> 00:07:57,889
dependency company dev kit and I'm

00:07:53,159 --> 00:08:01,469
generating comments list of heroes and

00:07:57,889 --> 00:08:04,590
component for each hero and at the end

00:08:01,469 --> 00:08:07,199
I'm generating servers to have some

00:08:04,590 --> 00:08:13,259
handling methods to fetch data from Star

00:08:07,199 --> 00:08:16,500
Wars API so this was good but we need to

00:08:13,259 --> 00:08:20,490
add energy risk to our application and

00:08:16,500 --> 00:08:26,090
to do so we need to set up at least all

00:08:20,490 --> 00:08:29,190
required packages form a whole platform

00:08:26,090 --> 00:08:32,969
for angelic schematics so we're going to

00:08:29,190 --> 00:08:38,099
install store effects entities or dev

00:08:32,969 --> 00:08:40,740
tools and schematics itself next really

00:08:38,099 --> 00:08:44,399
important thing we're going to set up an

00:08:40,740 --> 00:08:47,490
Jurek's collection as default one in our

00:08:44,399 --> 00:08:49,680
angular so I config to not to specify

00:08:47,490 --> 00:08:52,940
collection every time we go not to use

00:08:49,680 --> 00:08:58,500
any schematic from this collection

00:08:52,940 --> 00:09:02,340
so we initializing our store using ng

00:08:58,500 --> 00:09:07,230
generate store schematic name and we

00:09:02,340 --> 00:09:10,530
name our route state as state then we

00:09:07,230 --> 00:09:13,500
specify and route argument and passing

00:09:10,530 --> 00:09:18,360
the name of module when we wanted to set

00:09:13,500 --> 00:09:22,020
up our roots or then we're going to do

00:09:18,360 --> 00:09:26,790
the same for our effects route effects

00:09:22,020 --> 00:09:29,880
so we passing ng generate effects called

00:09:26,790 --> 00:09:35,870
up and it will generate up effects for

00:09:29,880 --> 00:09:38,880
us next we're going to run feature

00:09:35,870 --> 00:09:41,520
initialization with ngrick schematics

00:09:38,880 --> 00:09:46,140
and feature is just as for three

00:09:41,520 --> 00:09:50,490
schematics action reducer and effect so

00:09:46,140 --> 00:09:54,650
you just run one schematic and it set up

00:09:50,490 --> 00:09:58,670
whole stuff for you for this region and

00:09:54,650 --> 00:10:03,180
we specified that we're going to use our

00:09:58,670 --> 00:10:06,060
feature reducer inside a whole route

00:10:03,180 --> 00:10:09,750
reducer providing the path to this

00:10:06,060 --> 00:10:14,010
reducer so let's look what we got at

00:10:09,750 --> 00:10:17,370
this point so we have a route module set

00:10:14,010 --> 00:10:22,500
up our store with our reducer meter

00:10:17,370 --> 00:10:26,340
reducer we got sort their tools initial

00:10:22,500 --> 00:10:29,880
date on their mode and at the end we got

00:10:26,340 --> 00:10:34,170
effects model set up if you look in our

00:10:29,880 --> 00:10:37,320
reducer we will see that schematic at

00:10:34,170 --> 00:10:41,550
import of our fish reducer inside call

00:10:37,320 --> 00:10:48,530
reducer implements the interface for our

00:10:41,550 --> 00:10:51,990
state and has reducers map for us then

00:10:48,530 --> 00:10:55,290
inside this feature model called heroes

00:10:51,990 --> 00:11:01,320
we have effects module setup for this

00:10:55,290 --> 00:11:11,190
particular feature so this awesome

00:11:01,320 --> 00:11:15,690
let's celebrate it we are done should we

00:11:11,190 --> 00:11:18,540
celebrate I don't think so let's look

00:11:15,690 --> 00:11:23,250
for example on our hero's action file

00:11:18,540 --> 00:11:26,580
what we got in general really nothing we

00:11:23,250 --> 00:11:29,880
got dummy action type which heroes

00:11:26,580 --> 00:11:33,150
action and simple action with just types

00:11:29,880 --> 00:11:37,380
identify but to face data we need three

00:11:33,150 --> 00:11:41,160
kind of actions fetch that will trigger

00:11:37,380 --> 00:11:44,700
our fetching process fridge success go

00:11:41,160 --> 00:11:49,080
back to map our data to the store and

00:11:44,700 --> 00:11:52,950
fetch error action if something going

00:11:49,080 --> 00:11:57,210
wrong so how we can make it better how

00:11:52,950 --> 00:12:01,620
we can use schematics for that we can

00:11:57,210 --> 00:12:06,680
extend and jurak schematics to build our

00:12:01,620 --> 00:12:10,200
own template for fetch actions so and to

00:12:06,680 --> 00:12:12,540
do schematics set up schematics we

00:12:10,200 --> 00:12:15,000
should use come Attucks this is some

00:12:12,540 --> 00:12:20,550
kind of circle of dependency like robots

00:12:15,000 --> 00:12:22,440
making robots so to create custom

00:12:20,550 --> 00:12:26,430
schematic first of all we're gonna to

00:12:22,440 --> 00:12:29,640
set up a schematic cell Xilai globally

00:12:26,430 --> 00:12:32,730
and schematic so i provide us with this

00:12:29,640 --> 00:12:35,280
hendrik command called schematics then

00:12:32,730 --> 00:12:38,670
we go not to specify templates for our

00:12:35,280 --> 00:12:41,940
new schematic that called schematic so

00:12:38,670 --> 00:12:45,090
schematic schematic and then we pass in

00:12:41,940 --> 00:12:48,540
our schematics collection name in our

00:12:45,090 --> 00:12:50,760
case it will be fetch actions then we go

00:12:48,540 --> 00:12:54,120
her to move to our newly created folder

00:12:50,760 --> 00:12:57,360
set up all dependencies views Yaron in

00:12:54,120 --> 00:13:00,240
pm and then we are adding and JIRA

00:12:57,360 --> 00:13:04,320
schematics as dependency because we're

00:13:00,240 --> 00:13:07,080
gonna to use their code base and just

00:13:04,320 --> 00:13:09,870
provide our own template for a schematic

00:13:07,080 --> 00:13:12,570
so what is the structure of every

00:13:09,870 --> 00:13:15,270
schematic the main file for each

00:13:12,570 --> 00:13:18,300
collection is called collection Jace

00:13:15,270 --> 00:13:21,450
file and Anwar deaf kids come attic

00:13:18,300 --> 00:13:23,970
provide us with handy schema for this

00:13:21,450 --> 00:13:28,589
JSON file and you've got all after

00:13:23,970 --> 00:13:30,680
completion for your schematic in IDE so

00:13:28,589 --> 00:13:35,459
next we're gonna have to specify our

00:13:30,680 --> 00:13:38,250
only one schematic that we're gonna to

00:13:35,459 --> 00:13:42,089
use in this collection it called fetch

00:13:38,250 --> 00:13:44,820
actions then we're gonna to provide I'll

00:13:42,089 --> 00:13:49,940
ask for this schematic in our case it be

00:13:44,820 --> 00:13:54,930
F a description it will be used in help

00:13:49,940 --> 00:13:59,790
when we type in help in CI and two main

00:13:54,930 --> 00:14:02,839
files next factory file that grabs all

00:13:59,790 --> 00:14:05,940
arguments from CI parsing them

00:14:02,839 --> 00:14:10,860
transformer and passing to our templates

00:14:05,940 --> 00:14:14,100
and schema schema stands for specify all

00:14:10,860 --> 00:14:17,220
types of our arguments what arguments

00:14:14,100 --> 00:14:22,050
are required description for each

00:14:17,220 --> 00:14:25,770
argument such kind of documentation so

00:14:22,050 --> 00:14:29,880
main file our factory for our schematic

00:14:25,770 --> 00:14:33,690
in our case I just copy pasted factory

00:14:29,880 --> 00:14:36,209
from Angelique's action schematic to

00:14:33,690 --> 00:14:40,279
just reuse it because I want just to

00:14:36,209 --> 00:14:43,680
change template for it but in general

00:14:40,279 --> 00:14:47,370
this schematic Factory just function it

00:14:43,680 --> 00:14:51,300
returns to a rule how to change our file

00:14:47,370 --> 00:14:54,270
system so we parse in our arguments and

00:14:51,300 --> 00:14:57,029
passing them to templates also here we

00:14:54,270 --> 00:15:00,870
are filtering templates if user

00:14:57,029 --> 00:15:04,620
specified spec boolean argument we're

00:15:00,870 --> 00:15:07,579
gonna to create a spec file for them if

00:15:04,620 --> 00:15:11,520
not we're gonna do it myself

00:15:07,579 --> 00:15:14,579
so let's look on file structure in our

00:15:11,520 --> 00:15:18,120
fish actions we created folder called

00:15:14,579 --> 00:15:22,110
files and inside this folder we have all

00:15:18,120 --> 00:15:25,380
our templates even fold folders could be

00:15:22,110 --> 00:15:29,110
templates for us and what I am going to

00:15:25,380 --> 00:15:31,540
focus here we have this special syntax

00:15:29,110 --> 00:15:34,720
underscore underscore variable name

00:15:31,540 --> 00:15:37,600
underscore underscore so for example we

00:15:34,720 --> 00:15:39,850
have past variable and this plus

00:15:37,600 --> 00:15:42,459
variable will be transformed to pass

00:15:39,850 --> 00:15:44,829
that we specify as an argument it will

00:15:42,459 --> 00:15:49,600
create it all necessary folders if

00:15:44,829 --> 00:15:53,680
something not exist then even we can do

00:15:49,600 --> 00:15:57,279
more if we provide in flat argument we

00:15:53,680 --> 00:16:00,390
can generate subfolder optionally and we

00:15:57,279 --> 00:16:04,000
a person named argument to the function

00:16:00,390 --> 00:16:06,880
helper function called - rise to create

00:16:04,000 --> 00:16:09,850
nice disguised name that we use usually

00:16:06,880 --> 00:16:13,320
for files and we're going to do the same

00:16:09,850 --> 00:16:15,870
for our action file and our action

00:16:13,320 --> 00:16:20,470
specification file for tests

00:16:15,870 --> 00:16:24,870
so let's look on our team played I added

00:16:20,470 --> 00:16:28,600
HTTP error reports interface for our

00:16:24,870 --> 00:16:34,000
fresh error action and then I'm going to

00:16:28,600 --> 00:16:36,730
define our fresh action types so we

00:16:34,000 --> 00:16:39,310
create fetch action fetch success action

00:16:36,730 --> 00:16:42,640
and fetch error action and all of them

00:16:39,310 --> 00:16:46,709
will be prefixed by name we specify as

00:16:42,640 --> 00:16:51,880
an argument when we go to run this

00:16:46,709 --> 00:16:55,529
schematic later on in this template file

00:16:51,880 --> 00:17:00,430
we creating three action creative

00:16:55,529 --> 00:17:05,140
classes for each of our action and later

00:17:00,430 --> 00:17:10,120
on we expose the alias type to use on

00:17:05,140 --> 00:17:13,589
our reducer and so on so we are going

00:17:10,120 --> 00:17:17,380
well but before we can publish our

00:17:13,589 --> 00:17:21,520
schematic and expose it to the world we

00:17:17,380 --> 00:17:23,709
need to test it and to test it first of

00:17:21,520 --> 00:17:26,199
all we need to build our schematic our

00:17:23,709 --> 00:17:28,690
generated schematic will have this build

00:17:26,199 --> 00:17:32,950
script for us and we'll just run in it

00:17:28,690 --> 00:17:36,490
then we can use NPM link or yarn link to

00:17:32,950 --> 00:17:39,700
link our newly created package to our

00:17:36,490 --> 00:17:42,030
local storage before we publish it on

00:17:39,700 --> 00:17:48,690
NPM says that org

00:17:42,030 --> 00:17:52,440
and then we can test our schematic on

00:17:48,690 --> 00:17:55,820
real project so we create some project

00:17:52,440 --> 00:17:59,370
in our cases Star Wars knowledgebase and

00:17:55,820 --> 00:18:02,430
we're going to generate our fetch

00:17:59,370 --> 00:18:07,440
actions so we call them for Angie

00:18:02,430 --> 00:18:10,380
generate then we provide in collection

00:18:07,440 --> 00:18:15,980
name this in our case page actions and

00:18:10,380 --> 00:18:19,320
with this does we : also the name of

00:18:15,980 --> 00:18:23,310
schematic from this collection in our

00:18:19,320 --> 00:18:26,550
case I used alias FA but we can also use

00:18:23,310 --> 00:18:29,970
full name fetch actions so it could be

00:18:26,550 --> 00:18:33,350
fetch action fetch action and as an

00:18:29,970 --> 00:18:38,040
argument I'm passing the name of our

00:18:33,350 --> 00:18:41,160
fetch actions and passed them so it will

00:18:38,040 --> 00:18:45,570
create our actions inside hero's feature

00:18:41,160 --> 00:18:51,510
module after that we can run and see the

00:18:45,570 --> 00:18:53,580
result also and angular schematics

00:18:51,510 --> 00:18:56,460
provide us with a bunch of helper

00:18:53,580 --> 00:19:00,420
methods to test our schematics but I

00:18:56,460 --> 00:19:02,400
want to get deep in this topic now so

00:19:00,420 --> 00:19:05,730
this over here

00:19:02,400 --> 00:19:08,540
get creative Visio schematics and feel

00:19:05,730 --> 00:19:10,490
yourself like playing your own rock band

00:19:08,540 --> 00:19:14,260
thank you

00:19:10,490 --> 00:19:16,320
[Applause]

00:19:14,260 --> 00:19:16,320

YouTube URL: https://www.youtube.com/watch?v=q3UcqG72Zl4


