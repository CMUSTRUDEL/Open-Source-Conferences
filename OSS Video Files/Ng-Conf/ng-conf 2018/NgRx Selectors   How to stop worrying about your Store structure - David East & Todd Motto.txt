Title: NgRx Selectors   How to stop worrying about your Store structure - David East & Todd Motto
Publication date: 2018-11-16
Playlist: ng-conf 2018
Description: 
	ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,030 --> 00:00:04,290
welcome everyone thank you all so much

00:00:01,500 --> 00:00:07,410
for coming out this talk is ngrick

00:00:04,290 --> 00:00:09,030
selectors or how do not worry about your

00:00:07,410 --> 00:00:12,240
store structure yes

00:00:09,030 --> 00:00:13,830
so hello I am Todd motto I came all the

00:00:12,240 --> 00:00:16,109
way from England to be here today

00:00:13,830 --> 00:00:20,070
and I said I'm David East and I came all

00:00:16,109 --> 00:00:22,350
the way from Denver one hour flight it's

00:00:20,070 --> 00:00:23,760
a big trip so despite the the distance

00:00:22,350 --> 00:00:26,580
between David and I we've been friends

00:00:23,760 --> 00:00:29,220
for quite a while and we were learning

00:00:26,580 --> 00:00:30,689
in grx a few years ago together we

00:00:29,220 --> 00:00:33,180
jumped on Google Hangouts we were

00:00:30,689 --> 00:00:36,450
talking about things and actually have a

00:00:33,180 --> 00:00:40,770
picture of David and I yeah so this is

00:00:36,450 --> 00:00:41,969
Dave and I learned in in grx so we

00:00:40,770 --> 00:00:43,890
weren't really too sure what we were

00:00:41,969 --> 00:00:46,469
doing and we're here today to present a

00:00:43,890 --> 00:00:47,940
few things that we overcame and the

00:00:46,469 --> 00:00:50,250
funny thing was is actually during this

00:00:47,940 --> 00:00:53,039
time that time I met I was working on an

00:00:50,250 --> 00:00:55,620
ng rx app that was in production and I

00:00:53,039 --> 00:00:56,879
was like a really big like champion for

00:00:55,620 --> 00:00:58,800
using in Jurek so I went up to my

00:00:56,879 --> 00:01:00,989
manager and I told her I was like we

00:00:58,800 --> 00:01:03,420
need to use ng rx like we have all these

00:01:00,989 --> 00:01:04,979
state changes and like injured

00:01:03,420 --> 00:01:07,530
synchronizes state change is going to

00:01:04,979 --> 00:01:09,390
solve all of our problems and the funny

00:01:07,530 --> 00:01:11,630
thing was is this was actually kind of

00:01:09,390 --> 00:01:14,430
my first engineer except so rather than

00:01:11,630 --> 00:01:18,330
using it to solve all these problems I

00:01:14,430 --> 00:01:19,830
kind of created a lot of problems and so

00:01:18,330 --> 00:01:21,720
today we're going to show you a lot of

00:01:19,830 --> 00:01:25,350
the problems that we ran into and what

00:01:21,720 --> 00:01:27,810
we used to solve them so one of the

00:01:25,350 --> 00:01:29,850
biggest things is the store and it seems

00:01:27,810 --> 00:01:32,610
really simple at first it's this magical

00:01:29,850 --> 00:01:35,040
object in which I can subscribe from and

00:01:32,610 --> 00:01:37,229
then I can get state state changes when

00:01:35,040 --> 00:01:40,470
they update and render it to my view and

00:01:37,229 --> 00:01:42,720
it's all kind of simple but the big

00:01:40,470 --> 00:01:46,259
question is how do i structure this

00:01:42,720 --> 00:01:48,540
store for an entire application so you

00:01:46,259 --> 00:01:51,329
might have a component and it renders a

00:01:48,540 --> 00:01:53,100
list of current orders so the obvious

00:01:51,329 --> 00:01:55,229
thing you could think is like okay well

00:01:53,100 --> 00:01:57,180
I'll just take this list of current

00:01:55,229 --> 00:01:59,850
orders and I'll make that a custom slice

00:01:57,180 --> 00:02:02,219
in the store but then let's say you have

00:01:59,850 --> 00:02:04,860
another component and this component is

00:02:02,219 --> 00:02:06,090
responsible for rendering past orders so

00:02:04,860 --> 00:02:08,160
you're like all right I guess I'll take

00:02:06,090 --> 00:02:11,810
that component state and I'll store that

00:02:08,160 --> 00:02:15,020
in my store as well but then

00:02:11,810 --> 00:02:16,220
I needed to store all orders and this is

00:02:15,020 --> 00:02:17,630
where it got kind of weird for me

00:02:16,220 --> 00:02:20,480
because I was like well if I have

00:02:17,630 --> 00:02:23,390
current orders and past orders that's

00:02:20,480 --> 00:02:25,130
all orders I don't really know I was

00:02:23,390 --> 00:02:28,750
doing so I was like I'll just store all

00:02:25,130 --> 00:02:32,930
the orders as a third slice in the store

00:02:28,750 --> 00:02:34,459
and at first the reducer for this was

00:02:32,930 --> 00:02:36,560
actually kind of easy it kind of tricked

00:02:34,459 --> 00:02:39,739
me into following this pattern and so I

00:02:36,560 --> 00:02:42,470
would switch on the order load success

00:02:39,739 --> 00:02:45,140
and that pretty much would give me some

00:02:42,470 --> 00:02:46,910
actions over the network and I would

00:02:45,140 --> 00:02:49,370
take this array and I would just start

00:02:46,910 --> 00:02:51,680
filtering it so I would get my current

00:02:49,370 --> 00:02:53,630
orders by just filtering on the is

00:02:51,680 --> 00:02:55,970
active property and to get my past

00:02:53,630 --> 00:02:58,340
orders I would just invert that and then

00:02:55,970 --> 00:03:01,400
I just tack on all my orders and I

00:02:58,340 --> 00:03:04,580
thought this was really easy but then I

00:03:01,400 --> 00:03:07,130
had to update this data yeah and this

00:03:04,580 --> 00:03:08,780
isn't the easiest piece so this is nice

00:03:07,130 --> 00:03:10,519
and clean or the load success we end up

00:03:08,780 --> 00:03:12,860
with three lines of code and it's it's a

00:03:10,519 --> 00:03:14,480
nice space but when we want to start

00:03:12,860 --> 00:03:16,970
updating things we also can create

00:03:14,480 --> 00:03:20,030
things we can delete things so what does

00:03:16,970 --> 00:03:22,820
it look like when we want to update we

00:03:20,030 --> 00:03:24,620
could do something like this which isn't

00:03:22,820 --> 00:03:26,570
you may know may not be able to be able

00:03:24,620 --> 00:03:28,609
to see it it's so small but it takes a

00:03:26,570 --> 00:03:30,920
lot of cake we've got too many loops

00:03:28,609 --> 00:03:32,690
we've got all orders for past orders we

00:03:30,920 --> 00:03:34,310
have to manually iterate through

00:03:32,690 --> 00:03:35,870
everything we have to detect something

00:03:34,310 --> 00:03:38,239
that we're trying to change and then

00:03:35,870 --> 00:03:39,680
rebind it to the state tree now this is

00:03:38,239 --> 00:03:41,959
just one reducer so if you imagine

00:03:39,680 --> 00:03:45,310
you've got 100 reducers 200 reducers

00:03:41,959 --> 00:03:49,160
this is going to spiral out of control

00:03:45,310 --> 00:03:50,569
so you may look at your codebase like I

00:03:49,160 --> 00:03:52,400
have many times and you come back to

00:03:50,569 --> 00:03:56,060
your reducer and you think what is

00:03:52,400 --> 00:03:58,310
happening who even wrote this so at this

00:03:56,060 --> 00:04:01,819
point I was kind of like maybe we're

00:03:58,310 --> 00:04:03,139
missing something what do we miss so we

00:04:01,819 --> 00:04:05,690
went back to the drawing board and we

00:04:03,139 --> 00:04:08,299
checked out this diagram the lovely

00:04:05,690 --> 00:04:10,639
diagram that took me ages to do so we

00:04:08,299 --> 00:04:12,530
looked at the diagram and we my

00:04:10,639 --> 00:04:14,480
expectation was I can just dispatch

00:04:12,530 --> 00:04:18,470
something put it in my store and then I

00:04:14,480 --> 00:04:20,450
get this new state back but if the

00:04:18,470 --> 00:04:22,970
problem with this diagram is if you only

00:04:20,450 --> 00:04:23,970
use these three tools your actions your

00:04:22,970 --> 00:04:26,010
reducer and your

00:04:23,970 --> 00:04:28,680
date you're going to run into the same

00:04:26,010 --> 00:04:31,230
problems that we ran into and so time I

00:04:28,680 --> 00:04:35,310
got to thinking and we realized that we

00:04:31,230 --> 00:04:37,740
had to redo this diagram that we needed

00:04:35,310 --> 00:04:40,200
to rethink and we actually I think Todd

00:04:37,740 --> 00:04:44,660
stayed up all last night doing this

00:04:40,200 --> 00:04:46,550
diagram so you show us some time yeah

00:04:44,660 --> 00:04:49,260
big change

00:04:46,550 --> 00:04:52,260
so selectively really are the missing

00:04:49,260 --> 00:04:54,480
piece with selectors we solve all the

00:04:52,260 --> 00:04:57,960
problems that we ran into before and you

00:04:54,480 --> 00:05:00,150
might have seen selectors on a tutorial

00:04:57,960 --> 00:05:01,980
or video or in documentation

00:05:00,150 --> 00:05:02,910
probably not in documentation but you

00:05:01,980 --> 00:05:06,240
know you might have seen it somewhere

00:05:02,910 --> 00:05:07,770
and you was communicating to is hey this

00:05:06,240 --> 00:05:09,630
is an advanced concept or an

00:05:07,770 --> 00:05:11,640
intermediate concept you don't need to

00:05:09,630 --> 00:05:13,770
learn this at first but Tom and I are

00:05:11,640 --> 00:05:16,350
here to say that we think that selectors

00:05:13,770 --> 00:05:18,000
are a fundamental concept of ng rx that

00:05:16,350 --> 00:05:20,880
they are there's not just three circles

00:05:18,000 --> 00:05:23,669
than GX there's four and selectors are

00:05:20,880 --> 00:05:25,200
really really simple so you it's easy to

00:05:23,669 --> 00:05:29,910
learn them at first because they're just

00:05:25,200 --> 00:05:32,090
queries to your store and selectors

00:05:29,910 --> 00:05:34,200
provide us with a lot of great benefits

00:05:32,090 --> 00:05:36,750
yeah and the few things that we should

00:05:34,200 --> 00:05:39,060
ideally look for with these benefits we

00:05:36,750 --> 00:05:41,490
get a nice API for composing our view

00:05:39,060 --> 00:05:43,290
models we can reduce our action

00:05:41,490 --> 00:05:46,080
boilerplate which is a hot topic at the

00:05:43,290 --> 00:05:49,350
moment and we can simplify our reducers

00:05:46,080 --> 00:05:51,690
and we also have memorization thinkit's

00:05:49,350 --> 00:05:54,540
should be spelt with an S and we also

00:05:51,690 --> 00:05:55,410
have the routing state as well so the

00:05:54,540 --> 00:05:56,880
route and state will come on through

00:05:55,410 --> 00:06:00,510
this is my favorite piece we saved it

00:05:56,880 --> 00:06:03,570
for the end so it's actually really easy

00:06:00,510 --> 00:06:08,010
to refactor your store for selectors as

00:06:03,570 --> 00:06:10,020
well so before we have these three

00:06:08,010 --> 00:06:12,060
slices of state and we were filtering

00:06:10,020 --> 00:06:13,590
out and you know this is a lot to keep

00:06:12,060 --> 00:06:16,500
track of we don't want to do this so

00:06:13,590 --> 00:06:18,870
it's just delete them and instead of

00:06:16,500 --> 00:06:21,750
keeping track of three pieces of state

00:06:18,870 --> 00:06:23,520
I'm going to keep track of one and like

00:06:21,750 --> 00:06:27,030
before when we had to update state I

00:06:23,520 --> 00:06:29,790
want to do a order added action it's

00:06:27,030 --> 00:06:32,070
really simple all I have to do is like

00:06:29,790 --> 00:06:35,070
add a new order I'm updating one piece

00:06:32,070 --> 00:06:36,449
of State now three pieces yes so we've

00:06:35,070 --> 00:06:38,729
kind of reflected the

00:06:36,449 --> 00:06:41,370
the producer and we've taken those three

00:06:38,729 --> 00:06:43,560
slices of stay out now we treated those

00:06:41,370 --> 00:06:46,169
as more of a view model so how do we

00:06:43,560 --> 00:06:48,090
actually get the view model this is

00:06:46,169 --> 00:06:51,419
where we introduce create feature

00:06:48,090 --> 00:06:53,460
selector and its sibling create selector

00:06:51,419 --> 00:06:56,189
so these are two things that we need to

00:06:53,460 --> 00:06:58,949
create selectors where we can go and

00:06:56,189 --> 00:07:00,509
compose those view models so these posts

00:06:58,949 --> 00:07:02,729
come from ngrick store package you can

00:07:00,509 --> 00:07:04,680
import both of these and we can say that

00:07:02,729 --> 00:07:06,930
we want to create a new reference to

00:07:04,680 --> 00:07:10,139
this new slice of single slice of state

00:07:06,930 --> 00:07:12,000
that we have so we're gonna say give me

00:07:10,139 --> 00:07:13,770
a feature selector and we're just going

00:07:12,000 --> 00:07:16,860
to pass in a string value give me that

00:07:13,770 --> 00:07:18,659
property of orders now the difference

00:07:16,860 --> 00:07:20,669
between the two is the create feature

00:07:18,659 --> 00:07:22,229
selector we have feature modules in

00:07:20,669 --> 00:07:24,840
angular so we have an app module we

00:07:22,229 --> 00:07:27,449
might have a lousy lazy loaded orders

00:07:24,840 --> 00:07:29,370
module so the feature selector is for

00:07:27,449 --> 00:07:31,560
feature modules it will dynamically bind

00:07:29,370 --> 00:07:34,289
itself to the state tree so this is how

00:07:31,560 --> 00:07:36,750
we can create a reference to it so once

00:07:34,289 --> 00:07:38,189
we've got that we now want to come out

00:07:36,750 --> 00:07:39,599
of the reducer we don't want to do any

00:07:38,189 --> 00:07:41,789
view model stuff in there we want to

00:07:39,599 --> 00:07:43,409
compose it here so we're gonna say that

00:07:41,789 --> 00:07:44,639
we want to get the current orders so

00:07:43,409 --> 00:07:47,039
this is how we're going to learn how to

00:07:44,639 --> 00:07:49,940
compose it and we could just pass that

00:07:47,039 --> 00:07:53,759
first selector in as the first argument

00:07:49,940 --> 00:07:55,710
we then get a function argument we get

00:07:53,759 --> 00:07:57,659
the orders given back to us so this

00:07:55,710 --> 00:07:59,460
function will get executed and we can

00:07:57,659 --> 00:08:02,039
then map over things we can filter them

00:07:59,460 --> 00:08:04,199
and we can just return the active items

00:08:02,039 --> 00:08:06,960
so this solves that one problem where we

00:08:04,199 --> 00:08:08,789
have all the current orders now this

00:08:06,960 --> 00:08:10,319
functions got a projector function and

00:08:08,789 --> 00:08:13,589
we'll come on to some more complex uses

00:08:10,319 --> 00:08:15,060
as we continue as well so we also have

00:08:13,589 --> 00:08:18,449
the passed orders so how do we get the

00:08:15,060 --> 00:08:20,250
passed orders we can simply like we were

00:08:18,449 --> 00:08:22,229
doing inside of the reducer we can just

00:08:20,250 --> 00:08:25,909
invert that expression so this is nice

00:08:22,229 --> 00:08:25,909
and clean and it's nice and simple and

00:08:26,810 --> 00:08:31,889
using the selector is really easy to do

00:08:29,550 --> 00:08:34,079
all you do is inject the inject store

00:08:31,889 --> 00:08:36,479
into your component and then what you

00:08:34,079 --> 00:08:41,010
can do is just use the Select method

00:08:36,479 --> 00:08:42,539
then just pass in your selector just

00:08:41,010 --> 00:08:46,319
like that as you would usually use with

00:08:42,539 --> 00:08:48,120
the Select API and so before we had

00:08:46,319 --> 00:08:49,920
three view models sitting in our store

00:08:48,120 --> 00:08:52,829
and we switch that to how

00:08:49,920 --> 00:08:55,529
three selectors and the really big

00:08:52,829 --> 00:08:57,839
benefit of these three selectors is that

00:08:55,529 --> 00:08:59,370
they are reactive and that's just kind

00:08:57,839 --> 00:09:02,459
of like a really fancy way of saying

00:08:59,370 --> 00:09:04,350
like I have one component here my

00:09:02,459 --> 00:09:06,720
current orders component it's going to

00:09:04,350 --> 00:09:08,639
dispatch that a new current item was

00:09:06,720 --> 00:09:11,490
added and what that will do is it'll

00:09:08,639 --> 00:09:13,709
recompute my selectors for any query it

00:09:11,490 --> 00:09:15,570
matches so since it's a new item it'll

00:09:13,709 --> 00:09:17,399
recompute my selector for getting

00:09:15,570 --> 00:09:19,440
current orders as well as getting all

00:09:17,399 --> 00:09:20,940
orders and then as you can see it did

00:09:19,440 --> 00:09:23,100
not update for getting past orders

00:09:20,940 --> 00:09:25,440
because it wasn't affected by it and

00:09:23,100 --> 00:09:28,050
what's really magical about this is that

00:09:25,440 --> 00:09:30,240
it's just one update to synchronize

00:09:28,050 --> 00:09:32,130
multiple pieces of state rather than

00:09:30,240 --> 00:09:36,240
managing multiple actions and trying to

00:09:32,130 --> 00:09:37,199
keep everything in sync in your store so

00:09:36,240 --> 00:09:39,300
the issue that we looked at the

00:09:37,199 --> 00:09:41,040
beginning was having these initial three

00:09:39,300 --> 00:09:43,440
arrows where we had three slices of

00:09:41,040 --> 00:09:45,269
state and expanding scaling the store

00:09:43,440 --> 00:09:46,709
becomes quite challenging so let's

00:09:45,269 --> 00:09:49,019
assume that we've got a new requirement

00:09:46,709 --> 00:09:51,089
and we for practical reasons want to

00:09:49,019 --> 00:09:53,519
click on an order so we want to go and

00:09:51,089 --> 00:09:56,310
get that order by its ID now there's

00:09:53,519 --> 00:09:57,810
multiple ways that we can do this but

00:09:56,310 --> 00:09:59,910
let's look at how we could do this with

00:09:57,810 --> 00:10:01,920
a selector so this is a slightly

00:09:59,910 --> 00:10:04,140
different one because we are as you can

00:10:01,920 --> 00:10:05,399
see we have a parameter we have an ID so

00:10:04,140 --> 00:10:07,880
we're expecting to be able to pass

00:10:05,399 --> 00:10:11,790
something into it and get something back

00:10:07,880 --> 00:10:13,050
now if we take our initial selector so a

00:10:11,790 --> 00:10:14,760
good thing to remember here is that we

00:10:13,050 --> 00:10:17,010
can reuse these selectors we can compose

00:10:14,760 --> 00:10:19,560
them in multiple places so we can pass

00:10:17,010 --> 00:10:22,050
in all of our orders which gives us this

00:10:19,560 --> 00:10:24,269
back we can then say I want to use the

00:10:22,050 --> 00:10:25,560
array prototype fine method and we're

00:10:24,269 --> 00:10:28,380
just going to try and iterate our

00:10:25,560 --> 00:10:30,720
collection and find that single ID so

00:10:28,380 --> 00:10:33,449
this is nice and simple it works but

00:10:30,720 --> 00:10:36,120
there's kind of an issue with this what

00:10:33,449 --> 00:10:38,430
if we want to render say 10,000 items

00:10:36,120 --> 00:10:43,920
wait why would you need to render 10,000

00:10:38,430 --> 00:10:46,440
items my project manager told me so

00:10:43,920 --> 00:10:49,079
rather than having to loop through a

00:10:46,440 --> 00:10:50,910
thousand item just to retrieve one we

00:10:49,079 --> 00:10:54,089
would rather just be able to quickly

00:10:50,910 --> 00:10:56,040
access one item and that is something

00:10:54,089 --> 00:10:58,290
you can do with the NAD pattern and you

00:10:56,040 --> 00:11:00,329
may have seen in some talks today the ng

00:10:58,290 --> 00:11:02,370
RX and ad library and we're not going to

00:11:00,329 --> 00:11:03,519
dive specifically into that library but

00:11:02,370 --> 00:11:05,199
we are going to show you

00:11:03,519 --> 00:11:06,790
works underneath the hood and how you

00:11:05,199 --> 00:11:09,459
can actually implement it without using

00:11:06,790 --> 00:11:11,379
the library yes so this is a really cool

00:11:09,459 --> 00:11:13,629
piece and if you're starting with ng rx

00:11:11,379 --> 00:11:15,819
then this is a really nice thing to kind

00:11:13,629 --> 00:11:17,889
of dive into from the get-go so let's

00:11:15,819 --> 00:11:20,619
assume we've got three here but we could

00:11:17,889 --> 00:11:22,869
assume ten thousand so we've got an

00:11:20,619 --> 00:11:24,519
array and now we've indicated that an

00:11:22,869 --> 00:11:26,439
array we have to loop over things we

00:11:24,519 --> 00:11:27,910
have to filter we have to map and it

00:11:26,439 --> 00:11:29,769
becomes a challenge just to update

00:11:27,910 --> 00:11:32,410
something we have to iterate and replace

00:11:29,769 --> 00:11:34,959
so the proposition with an entity

00:11:32,410 --> 00:11:38,529
pattern is we have these three IDs we've

00:11:34,959 --> 00:11:41,199
got 1 2 & 3 now what if we flatten these

00:11:38,529 --> 00:11:42,879
to an object structure so we take those

00:11:41,199 --> 00:11:45,129
unique IDs which ideally would be

00:11:42,879 --> 00:11:47,829
generated on the server and then we say

00:11:45,129 --> 00:11:50,619
object 1 give us the order 1 and so

00:11:47,829 --> 00:11:52,329
forth now the benefit with this is we've

00:11:50,619 --> 00:11:54,670
mentioned arrays are kind of bad we have

00:11:52,329 --> 00:11:56,439
to iterate and if we did have 10,000

00:11:54,670 --> 00:11:58,720
items then doing something like this

00:11:56,439 --> 00:12:01,449
would not be possible we've we have

00:11:58,720 --> 00:12:03,999
entities square bracket 3 and instantly

00:12:01,449 --> 00:12:05,679
it gives me that one back one back so we

00:12:03,999 --> 00:12:08,350
have number three and we could pass in

00:12:05,679 --> 00:12:11,579
number 10,000 if we wanted to and if we

00:12:08,350 --> 00:12:14,170
get it back as fast as number three and

00:12:11,579 --> 00:12:15,850
using the NAD pattern in a reducer is

00:12:14,170 --> 00:12:20,139
actually really easy because it

00:12:15,850 --> 00:12:23,259
standardizes how we can write it so

00:12:20,139 --> 00:12:25,629
right here we get our orders back as an

00:12:23,259 --> 00:12:27,819
array and we don't want this to be an

00:12:25,629 --> 00:12:29,529
array we want this to be an object so

00:12:27,819 --> 00:12:31,179
this is just like an imaginary flattened

00:12:29,529 --> 00:12:33,069
method that goes through and turns it

00:12:31,179 --> 00:12:35,139
into an object and so now that we have

00:12:33,069 --> 00:12:39,999
it as entities we just put it as a

00:12:35,139 --> 00:12:41,829
property on our state tree however we've

00:12:39,999 --> 00:12:44,319
kind of built our application we're

00:12:41,829 --> 00:12:46,540
using ng fours and changing everything

00:12:44,319 --> 00:12:48,249
over to an entity pattern immediately

00:12:46,540 --> 00:12:50,199
breaks everything so why does it break

00:12:48,249 --> 00:12:54,129
everything don't worry there's a simple

00:12:50,199 --> 00:12:56,670
fix using selectors ironically so we can

00:12:54,129 --> 00:12:59,679
use I'll get all of that our order slice

00:12:56,670 --> 00:13:02,860
now this is no longer an array it looks

00:12:59,679 --> 00:13:05,319
like this so we're actually having

00:13:02,860 --> 00:13:06,939
orders and we want to return that dot

00:13:05,319 --> 00:13:11,079
entities so we're just creating one

00:13:06,939 --> 00:13:13,179
reference to it then we can say okay

00:13:11,079 --> 00:13:15,279
because my application is broken my ng

00:13:13,179 --> 00:13:17,150
fours aren't working how do we transform

00:13:15,279 --> 00:13:19,730
these entities back into in a

00:13:17,150 --> 00:13:21,290
ray for a view model now we learned that

00:13:19,730 --> 00:13:22,970
we don't put view models back in the

00:13:21,290 --> 00:13:25,850
reducer so this is where we can then

00:13:22,970 --> 00:13:28,940
compose these so we can just say object

00:13:25,850 --> 00:13:30,860
keys which will give us basically our

00:13:28,940 --> 00:13:33,830
previous example where we had 1 2 & 3

00:13:30,860 --> 00:13:36,260
then we iterate those and we return each

00:13:33,830 --> 00:13:38,690
entity so we get a brand new array from

00:13:36,260 --> 00:13:40,760
this now the benefit is this is just one

00:13:38,690 --> 00:13:42,710
data structure and we're using two

00:13:40,760 --> 00:13:44,780
selectors we've got our data in one

00:13:42,710 --> 00:13:51,320
format object forms and we've also got

00:13:44,780 --> 00:13:53,120
an array form I've said this there we go

00:13:51,320 --> 00:13:55,490
so like Todd said the NAD pattern is

00:13:53,120 --> 00:13:57,440
really good for fast object lookups if I

00:13:55,490 --> 00:13:59,330
look at something trying to get

00:13:57,440 --> 00:14:00,680
something but 10,000 item in the list

00:13:59,330 --> 00:14:02,360
it's just as fast as getting the first

00:14:00,680 --> 00:14:04,400
item in the list and it really

00:14:02,360 --> 00:14:06,590
simplifies the reducers because it gives

00:14:04,400 --> 00:14:07,760
us a standard way that we can write them

00:14:06,590 --> 00:14:10,340
and we don't have to worry if we're

00:14:07,760 --> 00:14:13,040
doing it the wrong way but where the

00:14:10,340 --> 00:14:15,610
entity pattern really shines is when you

00:14:13,040 --> 00:14:19,940
use it with the router

00:14:15,610 --> 00:14:22,310
so with our get order by ID selector we

00:14:19,940 --> 00:14:24,950
need an ID to get an order so it makes

00:14:22,310 --> 00:14:27,830
sense that if we took a router path of /

00:14:24,950 --> 00:14:30,950
order / 1 well that one is the obvious

00:14:27,830 --> 00:14:32,720
candidate to pass into this ID so you

00:14:30,950 --> 00:14:34,610
might be thinking like okay I guess

00:14:32,720 --> 00:14:38,660
imagine how we'd do this so if we have a

00:14:34,610 --> 00:14:40,070
component we we have this order detail

00:14:38,660 --> 00:14:42,380
component and so the first thing I'll do

00:14:40,070 --> 00:14:46,550
is I'll go to my router and I'll get my

00:14:42,380 --> 00:14:49,610
router state and so this order ID is the

00:14:46,550 --> 00:14:51,590
router state the slush orders / 1 so

00:14:49,610 --> 00:14:54,170
since I have this ID I can just select

00:14:51,590 --> 00:14:56,900
this and put that ID into the selector

00:14:54,170 --> 00:14:58,730
now this is really easy but there is a

00:14:56,900 --> 00:15:01,700
problem with doing this and that's

00:14:58,730 --> 00:15:03,650
because I don't want any routing code in

00:15:01,700 --> 00:15:06,800
my components like routing code belongs

00:15:03,650 --> 00:15:09,530
in route guards or resolvers but the

00:15:06,800 --> 00:15:11,960
great thing about ng RX is is that you

00:15:09,530 --> 00:15:16,610
can actually use routing code with

00:15:11,960 --> 00:15:18,320
selectors and this is where the this is

00:15:16,610 --> 00:15:20,510
probably my favorite piece the route to

00:15:18,320 --> 00:15:21,710
store package comes into play now you

00:15:20,510 --> 00:15:23,750
can download this as well it's available

00:15:21,710 --> 00:15:27,440
on NPM and you can get it up and running

00:15:23,750 --> 00:15:29,960
probably 20 20 minutes now the benefits

00:15:27,440 --> 00:15:30,860
of doing this is one we remove our

00:15:29,960 --> 00:15:33,290
routing

00:15:30,860 --> 00:15:35,120
from the component but we end up with

00:15:33,290 --> 00:15:37,040
treating the whole application not just

00:15:35,120 --> 00:15:40,100
the angular logic but things like the

00:15:37,040 --> 00:15:41,300
URL bar as this single state tree so we

00:15:40,100 --> 00:15:42,980
end up with something like this where we

00:15:41,300 --> 00:15:45,050
have the root of reducer and this is

00:15:42,980 --> 00:15:47,240
given to us for free and we also have

00:15:45,050 --> 00:15:49,550
this state property now you can populate

00:15:47,240 --> 00:15:51,710
this state property with anything that

00:15:49,550 --> 00:15:54,860
is available on the activated route

00:15:51,710 --> 00:15:57,110
snapshot so let's assume that we have

00:15:54,860 --> 00:15:59,300
the URL of orders and we also have this

00:15:57,110 --> 00:16:01,520
params of one so we can have slash

00:15:59,300 --> 00:16:04,540
orders slash one and this is just

00:16:01,520 --> 00:16:07,730
immediately available in the state tree

00:16:04,540 --> 00:16:11,630
so taking our get order by ID example

00:16:07,730 --> 00:16:13,550
how does this actually benefit us so

00:16:11,630 --> 00:16:15,620
let's create a new feature selector this

00:16:13,550 --> 00:16:17,390
will be probably in an app module in the

00:16:15,620 --> 00:16:19,640
root module we can create a feature

00:16:17,390 --> 00:16:22,070
selector that reference to this route to

00:16:19,640 --> 00:16:23,780
reducer now again this is given to us by

00:16:22,070 --> 00:16:28,240
the NJ rx package the route of store

00:16:23,780 --> 00:16:30,590
package now this is probably the

00:16:28,240 --> 00:16:33,980
mind-blowing bit it was for me at least

00:16:30,590 --> 00:16:36,710
so let's take our entities so our object

00:16:33,980 --> 00:16:39,350
structure which is made up of keys of 1

00:16:36,710 --> 00:16:43,400
& 2 & 3 and we've got that paramah

00:16:39,350 --> 00:16:45,200
well so secondly we can then say give me

00:16:43,400 --> 00:16:48,410
the give me the entities and give me the

00:16:45,200 --> 00:16:50,420
Rueter state which in our projector

00:16:48,410 --> 00:16:52,190
function gives them to us in the order

00:16:50,420 --> 00:16:55,670
that we passed them in so we have our

00:16:52,190 --> 00:16:58,700
entities and the router which the magic

00:16:55,670 --> 00:17:01,580
the recipe here is that we can look up

00:16:58,700 --> 00:17:04,100
that single entity with there's no loop

00:17:01,580 --> 00:17:06,260
it's super fast and we get that order ID

00:17:04,100 --> 00:17:08,300
that's available to us on the params so

00:17:06,260 --> 00:17:10,700
we can add it in there instantly now

00:17:08,300 --> 00:17:12,710
this when we navigate away come back and

00:17:10,700 --> 00:17:14,510
go to a new component in the background

00:17:12,710 --> 00:17:16,640
the route restore package is keeping all

00:17:14,510 --> 00:17:18,560
of this in sync so you write this code

00:17:16,640 --> 00:17:22,280
once and it's there you don't have to

00:17:18,560 --> 00:17:24,440
touch it again and using this in a

00:17:22,280 --> 00:17:26,870
component we can go back in refactor it

00:17:24,440 --> 00:17:29,090
so we don't need the order ID anymore

00:17:26,870 --> 00:17:30,740
and we're not calling this selector as a

00:17:29,090 --> 00:17:32,750
function because it's automatically

00:17:30,740 --> 00:17:35,990
being handled for us and what this means

00:17:32,750 --> 00:17:39,340
is is that we don't have any routing

00:17:35,990 --> 00:17:39,340
code in this component

00:17:40,370 --> 00:17:46,880
so there's a new recipe for being able

00:17:43,789 --> 00:17:49,029
to not worry about your store structure

00:17:46,880 --> 00:17:52,159
so you want to follow the entity pattern

00:17:49,029 --> 00:17:54,350
embrace selectors you want to avoid view

00:17:52,159 --> 00:17:56,210
models in your store and like we just

00:17:54,350 --> 00:17:57,559
seen using them all together with the

00:17:56,210 --> 00:18:01,340
routes of state really improves the

00:17:57,559 --> 00:18:03,350
state tree and your selectors so when

00:18:01,340 --> 00:18:06,350
you're thinking about how do i structure

00:18:03,350 --> 00:18:10,460
my store well it's not how do you

00:18:06,350 --> 00:18:12,080
structure it it's how we ask for it so

00:18:10,460 --> 00:18:13,820
the next time you start an engineer X

00:18:12,080 --> 00:18:16,279
app or you have to go back and refactor

00:18:13,820 --> 00:18:19,270
a reducer don't worry about your store

00:18:16,279 --> 00:18:21,490
structure just think selectors first

00:18:19,270 --> 00:18:29,269
thank you thank you very much

00:18:21,490 --> 00:18:29,269

YouTube URL: https://www.youtube.com/watch?v=Y4McLi9scfc


