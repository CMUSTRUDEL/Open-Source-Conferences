Title: I switched a map and you'll never guess what happened next - Pete Darwin, Shai Reznik, Mike Brocchi
Publication date: 2018-11-16
Playlist: ng-conf 2018
Description: 
	If you always forget what switchMap does, or when exactly should you use it, 
this talk will make sure you’ll NEVER again forget what switch, map and switchMap do… 
in a very unusual and entertaining way.

ACTORS:
~~~~~~~
Mike Brocchi ("Reactive Newbie")
Pete Bacon Darwin ("Reactive Nerd")
Shai Reznik ("Reactive Teacher Man")
Ben Lesh ("Ben Lesh")
Kapunahele Wong  ("Backbone Dev 1")
Jeremy Elbourn ("Backbone Dev 2")
Misko Hevery ("Angular Dev 1")
Courtney Christian ("Angular Dev 2")
Additional video footage - Stephen Fluin 
Video slides: David Shushan from HiRez.io

--------------

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,090 --> 00:00:08,910
[Applause]

00:00:19,410 --> 00:00:24,550
hey what's he doing I'm just working on

00:00:23,080 --> 00:00:26,950
finishing this autocomplete component

00:00:24,550 --> 00:00:28,680
being for this Brynn ends tomorrow cool

00:00:26,950 --> 00:00:32,310
can I have a look sure

00:00:28,680 --> 00:00:34,480
hey you're using a switch man nice

00:00:32,310 --> 00:00:38,559
really I am

00:00:34,480 --> 00:00:40,390
well didn't you write this code okay

00:00:38,559 --> 00:00:42,130
listen don't tell the boss or anybody

00:00:40,390 --> 00:00:44,710
else but I just copy and pasted that

00:00:42,130 --> 00:00:45,220
code from Stack Overflow and it seems to

00:00:44,710 --> 00:00:48,070
be working

00:00:45,220 --> 00:00:51,040
what no no you can't do that don't you

00:00:48,070 --> 00:01:00,550
understand switch map no who do I look

00:00:51,040 --> 00:01:02,800
like Ben Lesh hey what's going on why

00:01:00,550 --> 00:01:05,019
don't you explain switch map to him oh

00:01:02,800 --> 00:01:07,570
yeah sure sure it's easy let's look at

00:01:05,019 --> 00:01:09,400
the docs here switch map projects each

00:01:07,570 --> 00:01:11,560
source value to an observable which is

00:01:09,400 --> 00:01:13,360
merged in the output observable emitting

00:01:11,560 --> 00:01:16,360
values only from the most recently

00:01:13,360 --> 00:01:18,310
projected observable

00:01:16,360 --> 00:01:19,960
well you see it subscribes to one at a

00:01:18,310 --> 00:01:21,490
time and then you have to worry about

00:01:19,960 --> 00:01:25,750
which one you're subscribed to you and

00:01:21,490 --> 00:01:28,300
then no idea what he was just talking

00:01:25,750 --> 00:01:29,380
about no me neither but look it's really

00:01:28,300 --> 00:01:31,690
not that difficult okay

00:01:29,380 --> 00:01:36,030
so a switch map is just like it's a

00:01:31,690 --> 00:01:39,180
mapping from one observable to multiple

00:01:36,030 --> 00:01:39,180
[Music]

00:01:51,030 --> 00:01:58,810
then can't you see this poor soul is

00:01:54,280 --> 00:02:02,220
lost here read this what just read the

00:01:58,810 --> 00:02:05,270
story oh okay

00:02:02,220 --> 00:02:09,240
[Music]

00:02:05,270 --> 00:02:12,720
the year is 2018 every five minutes a

00:02:09,240 --> 00:02:15,330
new JavaScript framework is born our

00:02:12,720 --> 00:02:18,540
story takes place inside the offices of

00:02:15,330 --> 00:02:22,490
Kevin Belson a young successful and

00:02:18,540 --> 00:02:25,100
handsome CEO if a little unstable

00:02:22,490 --> 00:02:27,840
you wrote it

00:02:25,100 --> 00:02:32,930
he previously made millions with

00:02:27,840 --> 00:02:35,220
startups such as IBM e and llama date

00:02:32,930 --> 00:02:43,620
he's currently working on his latest

00:02:35,220 --> 00:02:45,870
venture observables Kevin is obsessed

00:02:43,620 --> 00:02:47,610
with the latest technology whenever he

00:02:45,870 --> 00:02:50,670
gets a tweet about a new JavaScript

00:02:47,610 --> 00:02:54,030
framework he needs it like yesterday

00:02:50,670 --> 00:02:56,100
I knew it like yesterday let's see how

00:02:54,030 --> 00:02:58,610
Kevin got on one day when his Twitter

00:02:56,100 --> 00:03:01,830
stream went wild with new frameworks

00:02:58,610 --> 00:03:03,930
what's that beg born is the new hot for

00:03:01,830 --> 00:03:06,000
a walk as quick as you could say misko

00:03:03,930 --> 00:03:09,120
hevery Kevin was on the phone to a

00:03:06,000 --> 00:03:13,130
recruitment agent hello backbone

00:03:09,120 --> 00:03:16,740
recruitment agency Dalaran speaking

00:03:13,130 --> 00:03:22,709
right away sir before you knew it

00:03:16,740 --> 00:03:24,060
developers started to arrive hi do you

00:03:22,709 --> 00:03:26,160
know backbone yes

00:03:24,060 --> 00:03:28,760
great you're hired these are all hiding

00:03:26,160 --> 00:03:32,239
bundles come on come on you're hired and

00:03:28,760 --> 00:03:35,610
they kept coming hi do you know backbone

00:03:32,239 --> 00:03:38,660
yes you're great you could run the bank

00:03:35,610 --> 00:03:38,660
on materials did

00:03:40,220 --> 00:03:46,710
take some more yeah okay but of course

00:03:44,070 --> 00:03:50,430
Twitter never stands still and neither

00:03:46,710 --> 00:03:53,130
too hot new frameworks oh what's that

00:03:50,430 --> 00:03:55,170
Angela is the new HUD frame Oh he was

00:03:53,130 --> 00:03:57,200
now convinced that Angela was what he

00:03:55,170 --> 00:03:57,200
needed

00:03:57,860 --> 00:04:03,650
angular recruitment agency recruiter Rob

00:04:00,750 --> 00:04:08,100
speaking I need angular developers

00:04:03,650 --> 00:04:10,710
recruiter Rob has got you covered thanks

00:04:08,100 --> 00:04:13,650
Rick really Rob but just before any more

00:04:10,710 --> 00:04:15,660
developers arrived wait a minute I don't

00:04:13,650 --> 00:04:20,100
want any more backbone developers I

00:04:15,660 --> 00:04:23,580
better call their loris hello backbone

00:04:20,100 --> 00:04:25,850
recruitment agency tumbler speaking oh

00:04:23,580 --> 00:04:29,730
hi Dolores you're fired

00:04:25,850 --> 00:04:31,980
what didn't you hear angular is the new

00:04:29,730 --> 00:04:35,880
hot travel so please no more backbone

00:04:31,980 --> 00:04:38,400
developers who is this no sooner had he

00:04:35,880 --> 00:04:44,760
hung up than the first angular recruit

00:04:38,400 --> 00:04:46,950
arrived hi do you know angular yes I do

00:04:44,760 --> 00:04:49,370
I'm about ten years of experience then

00:04:46,950 --> 00:04:49,370
you

00:04:51,210 --> 00:05:05,759
who are you misko hevery with mister on

00:05:03,630 --> 00:05:08,520
the team there were plenty of developers

00:05:05,759 --> 00:05:16,770
keen to join observable hi do you know

00:05:08,520 --> 00:05:24,000
angular yes you're hired and this went

00:05:16,770 --> 00:05:27,240
on and on and on great nice stories but

00:05:24,000 --> 00:05:29,789
what the heck is this have to do with

00:05:27,240 --> 00:05:31,919
switch map what iris brilliant

00:05:29,789 --> 00:05:35,520
but then you get it I mean it's obvious

00:05:31,919 --> 00:05:38,639
if you remember she'll get a stream of

00:05:35,520 --> 00:05:42,770
hot new frame earthquakes okay I got

00:05:38,639 --> 00:05:46,650
that and this is an observable of tweets

00:05:42,770 --> 00:05:49,500
yeah and when the first wit arrives then

00:05:46,650 --> 00:05:52,229
the CEO calls the backbone agency and

00:05:49,500 --> 00:05:54,150
then ask them to start sending backbone

00:05:52,229 --> 00:05:58,169
developers and that's a recruit's

00:05:54,150 --> 00:06:01,800
observable so we have two observables at

00:05:58,169 --> 00:06:04,169
the same time ah don't worry about that

00:06:01,800 --> 00:06:06,900
for a minute so they keep sending

00:06:04,169 --> 00:06:08,760
backbone recruits until the CEO gets a

00:06:06,900 --> 00:06:11,099
new tweet about the angular framework

00:06:08,760 --> 00:06:13,310
and calls the angular agency and ask

00:06:11,099 --> 00:06:15,960
them to start sending angular recruits

00:06:13,310 --> 00:06:19,530
what about the background recruits yes

00:06:15,960 --> 00:06:23,340
so don't forget that then she'll cause

00:06:19,530 --> 00:06:27,139
Deloris at the backbone agency and asked

00:06:23,340 --> 00:06:34,070
her to stop sending no backbone there he

00:06:27,139 --> 00:06:37,710
hires her yeah we got that relax man

00:06:34,070 --> 00:06:40,050
yeah so after referrers her they stopped

00:06:37,710 --> 00:06:41,909
sending backbone recruits and that's

00:06:40,050 --> 00:06:44,659
when they kill the backbone recruits

00:06:41,909 --> 00:06:44,659
observable

00:06:45,610 --> 00:06:50,470
[Music]

00:06:47,220 --> 00:06:55,060
yeah and then we see envelope developers

00:06:50,470 --> 00:06:58,440
start rolling in okay and then when that

00:06:55,060 --> 00:07:03,670
comes that's a new recruits observable

00:06:58,440 --> 00:07:06,460
yes so where is the switch map when you

00:07:03,670 --> 00:07:09,580
think about it whenever the CEO gets a

00:07:06,460 --> 00:07:12,250
new tweet he switches from one agency's

00:07:09,580 --> 00:07:16,000
recruits to the other agencies recruits

00:07:12,250 --> 00:07:17,680
see yeah it's obvious like when you

00:07:16,000 --> 00:07:21,640
every time the new framework tweet

00:07:17,680 --> 00:07:27,130
arrives um we kill the most recent

00:07:21,640 --> 00:07:30,100
background recruits observable and then

00:07:27,130 --> 00:07:31,720
we get a new framework ever observable

00:07:30,100 --> 00:07:38,920
to replace it

00:07:31,720 --> 00:07:41,920
um yeah ah okay okay enough fury let's

00:07:38,920 --> 00:07:46,450
see how we might Coley's Oh finally let

00:07:41,920 --> 00:07:49,690
me do this so first we have an

00:07:46,450 --> 00:07:53,010
observable stream of tweets okay so we

00:07:49,690 --> 00:07:56,110
can just hard code that for a moment

00:07:53,010 --> 00:07:58,540
okay so if we were to subscribe to that

00:07:56,110 --> 00:08:00,550
observable we get one framework tweet

00:07:58,540 --> 00:08:04,510
after the other okay what do you mean

00:08:00,550 --> 00:08:04,810
like if I just do this yeah yeah just

00:08:04,510 --> 00:08:08,140
like that

00:08:04,810 --> 00:08:10,570
oh okay let's write in there see check

00:08:08,140 --> 00:08:12,910
the console but first let me sprinkle

00:08:10,570 --> 00:08:15,390
some whoo reactive determine magic on

00:08:12,910 --> 00:08:15,390
top of it

00:08:17,439 --> 00:08:26,050
now you can run the code wow thanks

00:08:21,879 --> 00:08:27,669
reactive teacher man so since we're

00:08:26,050 --> 00:08:29,709
subscribing to their framework tweets

00:08:27,669 --> 00:08:31,959
observable here we'll get first we'll

00:08:29,709 --> 00:08:34,479
get the backbone framework tweet logged

00:08:31,959 --> 00:08:36,490
into the console and then the angular

00:08:34,479 --> 00:08:38,349
framework tweet will arrive and the same

00:08:36,490 --> 00:08:43,000
thing happens alright

00:08:38,349 --> 00:08:45,329
isn't that beautiful right well so we

00:08:43,000 --> 00:08:48,490
don't really need to subscribe just yet

00:08:45,329 --> 00:08:51,670
right for each for a Brooke tweak the

00:08:48,490 --> 00:08:54,430
seal then call looks of an agency that

00:08:51,670 --> 00:08:58,839
specializes in that rebel okay we can

00:08:54,430 --> 00:09:01,180
have a function call called get agency

00:08:58,839 --> 00:09:03,370
which takes a framework and returns us

00:09:01,180 --> 00:09:06,160
the agency for that framework yes

00:09:03,370 --> 00:09:08,709
and then the CEO asked that agency to

00:09:06,160 --> 00:09:10,360
start sending recruits to him yeah right

00:09:08,709 --> 00:09:14,040
so the agency object can have a method

00:09:10,360 --> 00:09:18,790
on it called get recruits observable

00:09:14,040 --> 00:09:21,129
along whole long what no that's so 2017

00:09:18,790 --> 00:09:24,339
we don't change map operators anymore

00:09:21,129 --> 00:09:27,279
the pipe method there yeah yeah sorry

00:09:24,339 --> 00:09:29,589
I knew that okay so the modern way of

00:09:27,279 --> 00:09:32,560
doing it is to put the map functions

00:09:29,589 --> 00:09:37,139
into a pipe call and then this makes the

00:09:32,560 --> 00:09:39,670
code tree shakable yeah what'd he say

00:09:37,139 --> 00:09:41,769
anyway so we have the framework tweet

00:09:39,670 --> 00:09:45,250
and then when we get the framework to

00:09:41,769 --> 00:09:50,370
eat we get its agency right and then for

00:09:45,250 --> 00:09:53,319
each agency we get the agency's recruits

00:09:50,370 --> 00:09:55,709
way are you saying that if we'd

00:09:53,319 --> 00:09:58,600
subscribe to this now we'll start seeing

00:09:55,709 --> 00:10:03,850
individual recruits in the console do

00:09:58,600 --> 00:10:05,380
you mean like something like this yeah I

00:10:03,850 --> 00:10:08,759
think so

00:10:05,380 --> 00:10:13,059
well let's run it and see for ourselves

00:10:08,759 --> 00:10:15,189
so yeah so we see the first backbone

00:10:13,059 --> 00:10:18,250
that tweet arrives and gets mapped to

00:10:15,189 --> 00:10:21,490
that backbone agency but now pay

00:10:18,250 --> 00:10:24,939
attention to this the agency gets mapped

00:10:21,490 --> 00:10:27,819
to an observable of recruits and not the

00:10:24,939 --> 00:10:28,590
actual recruits so that is what we're

00:10:27,819 --> 00:10:32,790
seeing

00:10:28,590 --> 00:10:36,450
load into the console I I did not expect

00:10:32,790 --> 00:10:38,580
that well I expected that this is

00:10:36,450 --> 00:10:45,240
because we're subscribing to an

00:10:38,580 --> 00:10:50,220
observable of observables yeah let's not

00:10:45,240 --> 00:10:52,680
confuse him okay oh because we have the

00:10:50,220 --> 00:10:55,110
recruits observable we can just

00:10:52,680 --> 00:10:56,490
subscribe to that inside of the first

00:10:55,110 --> 00:10:59,490
subscribe as I get the individual

00:10:56,490 --> 00:11:02,160
recruits okay so if we just do something

00:10:59,490 --> 00:11:04,260
like this yes exactly

00:11:02,160 --> 00:11:09,540
okay let's run it again and check the

00:11:04,260 --> 00:11:12,720
result so again we see the backbone gets

00:11:09,540 --> 00:11:15,690
mapped into recruits observe all right

00:11:12,720 --> 00:11:18,240
eventually and then watch this since we

00:11:15,690 --> 00:11:19,860
subscribe inside the subscribe we get

00:11:18,240 --> 00:11:23,850
each individual backbone recruit in the

00:11:19,860 --> 00:11:28,020
console log right and work here and when

00:11:23,850 --> 00:11:31,430
you subscribe inside a subscribe that is

00:11:28,020 --> 00:11:37,710
called flattening the observer wall

00:11:31,430 --> 00:11:40,080
flattening think about it like an array

00:11:37,710 --> 00:11:42,210
of arrays if you'd like to have one

00:11:40,080 --> 00:11:45,740
giant array out of all the values of the

00:11:42,210 --> 00:11:49,440
inner arrays you flatten it flatten it

00:11:45,740 --> 00:11:50,940
okay I got that but you need to be

00:11:49,440 --> 00:11:54,660
careful when you do these with

00:11:50,940 --> 00:11:57,540
observables oh why do we need to be

00:11:54,660 --> 00:12:00,900
careful well let's see what happens when

00:11:57,540 --> 00:12:01,410
the second tweet comes in that shouldn't

00:12:00,900 --> 00:12:02,610
be a problem

00:12:01,410 --> 00:12:04,590
we've already subscribed to the

00:12:02,610 --> 00:12:06,270
background recruits observable and login

00:12:04,590 --> 00:12:07,770
error when we subscribe to that we get

00:12:06,270 --> 00:12:10,260
the background recruits on the console

00:12:07,770 --> 00:12:12,390
log then the angular tweet comes in and

00:12:10,260 --> 00:12:13,980
that gets mapped to its agency and those

00:12:12,390 --> 00:12:16,020
recruits observe their its recruits

00:12:13,980 --> 00:12:18,630
observable and then we subscribe to that

00:12:16,020 --> 00:12:21,270
inside and then we see the angular

00:12:18,630 --> 00:12:24,210
recruits being logged to the console and

00:12:21,270 --> 00:12:29,370
it works yes just like I thought it

00:12:24,210 --> 00:12:33,720
would um Mike yes reactive teacher man

00:12:29,370 --> 00:12:35,630
yeah take a look oh where did those

00:12:33,720 --> 00:12:38,670
extra background developers come from

00:12:35,630 --> 00:12:42,529
the weren't they supposed to stop well

00:12:38,670 --> 00:12:45,829
duh we never fired the first agency

00:12:42,529 --> 00:12:49,190
yes if you remember that when camping

00:12:45,829 --> 00:12:52,160
the CEO hired the angular agency he then

00:12:49,190 --> 00:12:54,260
immediately fired the backbone agency of

00:12:52,160 --> 00:12:55,610
course he didn't have to do that he

00:12:54,260 --> 00:12:57,649
could have chosen not to fire the

00:12:55,610 --> 00:13:00,889
backbone agency and to get all recruits

00:12:57,649 --> 00:13:06,019
from both agencies and this is exactly

00:13:00,889 --> 00:13:09,529
what's happening in our code so if you

00:13:06,019 --> 00:13:12,949
get an observable out as a value from

00:13:09,529 --> 00:13:18,649
another observable you need to flatten

00:13:12,949 --> 00:13:22,519
it flatten it okay and when you flatten

00:13:18,649 --> 00:13:24,649
it you then need to make a decision

00:13:22,519 --> 00:13:28,910
correct right

00:13:24,649 --> 00:13:31,339
we need a flattening strategy a strategy

00:13:28,910 --> 00:13:33,110
of what to do with all those recruit

00:13:31,339 --> 00:13:34,639
subscriptions yes

00:13:33,110 --> 00:13:43,699
whenever you flatten you need a

00:13:34,639 --> 00:13:48,800
flattening strategy strategy okay so in

00:13:43,699 --> 00:13:51,019
this case our flattening strategy is to

00:13:48,800 --> 00:13:53,540
somehow stop getting back on developers

00:13:51,019 --> 00:13:56,240
yes we need to unsubscribe from that

00:13:53,540 --> 00:13:57,019
backbone developers oh I can do that

00:13:56,240 --> 00:14:00,560
that's easy

00:13:57,019 --> 00:14:03,550
okay so right first of all we need to

00:14:00,560 --> 00:14:06,860
store a subscription to the current

00:14:03,550 --> 00:14:09,980
recruits observable subscription yeah in

00:14:06,860 --> 00:14:12,980
the local variable right and then when a

00:14:09,980 --> 00:14:14,899
new recruits observable comes in we have

00:14:12,980 --> 00:14:17,660
to unsubscribe from the previous

00:14:14,899 --> 00:14:20,839
subscription before we subscribe to the

00:14:17,660 --> 00:14:23,390
new observable and that is the flutter

00:14:20,839 --> 00:14:26,600
little strategy

00:14:23,390 --> 00:14:26,600
[Music]

00:14:27,890 --> 00:14:33,630
okay that code is really confusing what

00:14:32,700 --> 00:14:37,020
is he done there

00:14:33,630 --> 00:14:38,510
well this code might look scary but if

00:14:37,020 --> 00:14:41,160
you think about it we're just

00:14:38,510 --> 00:14:43,080
unsubscribing from the previous recruits

00:14:41,160 --> 00:14:46,740
observable before we subscribe to the

00:14:43,080 --> 00:14:50,010
new recruits observer wall okay okay

00:14:46,740 --> 00:14:57,600
why don't we run it and maybe see them

00:14:50,010 --> 00:15:00,450
get killed okay so yeah again we see

00:14:57,600 --> 00:15:02,250
that backbone framework arrived and

00:15:00,450 --> 00:15:05,339
eventually gets mapped into that

00:15:02,250 --> 00:15:07,680
backbone recruits observable now this is

00:15:05,339 --> 00:15:09,660
our first recruits observable so we

00:15:07,680 --> 00:15:11,670
don't have a subscription stored so we

00:15:09,660 --> 00:15:13,350
step over their statement and just

00:15:11,670 --> 00:15:16,200
subscribe to the background recruits

00:15:13,350 --> 00:15:19,200
observable we store its subscription in

00:15:16,200 --> 00:15:21,960
the local variable great and now we

00:15:19,200 --> 00:15:27,380
start seeing backbone developers log in

00:15:21,960 --> 00:15:30,690
onto the console log all of a sudden

00:15:27,380 --> 00:15:34,350
relax it's just a story okay okay we see

00:15:30,690 --> 00:15:36,630
that angular framework arrived and once

00:15:34,350 --> 00:15:39,089
this gets mapped we now have two

00:15:36,630 --> 00:15:41,670
recruits observable to deal with and

00:15:39,089 --> 00:15:46,339
this is where our flattening strategy

00:15:41,670 --> 00:15:46,339
kicks in flattening strategy

00:15:47,730 --> 00:15:55,319
yeah so we enter into the it's time

00:15:51,689 --> 00:15:58,410
because we still have a previously saved

00:15:55,319 --> 00:16:02,009
subscription so we unsubscribe from the

00:15:58,410 --> 00:16:05,549
previous subscription and this is where

00:16:02,009 --> 00:16:14,339
we kill the backbone recruits observable

00:16:05,549 --> 00:16:17,910
yay what just be normal okay okay yeah

00:16:14,339 --> 00:16:20,850
and finally we we subscribe to the new

00:16:17,910 --> 00:16:23,459
angular recruits observable and store

00:16:20,850 --> 00:16:30,629
each subscription into the local verbal

00:16:23,459 --> 00:16:33,929
and stuff but nothing Sark okay should

00:16:30,629 --> 00:16:36,149
get that checked ok and now we start

00:16:33,929 --> 00:16:40,290
seeing angular developers being log to

00:16:36,149 --> 00:16:43,589
the console that is beautiful alright

00:16:40,290 --> 00:16:47,669
and then when we do this this is they

00:16:43,589 --> 00:16:52,619
switch strategy the switch strategy

00:16:47,669 --> 00:16:55,709
right yeah so do you get what we're

00:16:52,619 --> 00:16:57,589
saying up until this point yeah I think

00:16:55,709 --> 00:17:01,139
so but it's still kind of confusing okay

00:16:57,589 --> 00:17:04,010
so let's try to run through it okay okay

00:17:01,139 --> 00:17:06,389
so unsubscribing from the previous

00:17:04,010 --> 00:17:08,970
observable before subscribe me the new

00:17:06,389 --> 00:17:09,959
one is called the switch strategy yeah

00:17:08,970 --> 00:17:11,549
exactly

00:17:09,959 --> 00:17:14,130
yeah we can get rid of all of that scary

00:17:11,549 --> 00:17:19,079
code and just replace it with a single

00:17:14,130 --> 00:17:22,319
call to switch Raph yeah let's run it

00:17:19,079 --> 00:17:23,639
okay okay then you'll see how how it

00:17:22,319 --> 00:17:25,919
works okay great

00:17:23,639 --> 00:17:28,409
the backbone in recruits the background

00:17:25,919 --> 00:17:31,110
tweet arrives and it gets mapped to a

00:17:28,409 --> 00:17:33,539
recruits observable just like before

00:17:31,110 --> 00:17:36,389
haha but this time we store a

00:17:33,539 --> 00:17:40,350
subscription in the switch map function

00:17:36,389 --> 00:17:42,360
and then a Bess's all the individual

00:17:40,350 --> 00:17:45,360
backbone recruits to this subscribe

00:17:42,360 --> 00:17:48,419
method right and then when the new

00:17:45,360 --> 00:17:50,250
angular suite arrives we map that one

00:17:48,419 --> 00:17:53,130
through to an agency and then to its

00:17:50,250 --> 00:17:55,620
recruits observable and here comes the

00:17:53,130 --> 00:17:57,080
switch we're switching to the new

00:17:55,620 --> 00:17:59,750
subscription and

00:17:57,080 --> 00:18:03,440
seeing only the angular recruits to the

00:17:59,750 --> 00:18:04,400
subscribe method oh all that logic

00:18:03,440 --> 00:18:07,460
Erlich

00:18:04,400 --> 00:18:09,910
that's there is inside the switch

00:18:07,460 --> 00:18:12,800
malfunction is that some sort of magic

00:18:09,910 --> 00:18:18,110
no no no it's not magic dude it's just

00:18:12,800 --> 00:18:20,510
code yeah okay the switch map strategy

00:18:18,110 --> 00:18:23,660
does look like a magical thing which

00:18:20,510 --> 00:18:26,330
Maps agencies to individual recruits in

00:18:23,660 --> 00:18:28,370
the sequence but if we look under the

00:18:26,330 --> 00:18:30,980
hood we see that it just does these

00:18:28,370 --> 00:18:33,620
three things it Maps the agency to

00:18:30,980 --> 00:18:35,510
recruit observable it then subscribe to

00:18:33,620 --> 00:18:38,930
this recruits observable and this

00:18:35,510 --> 00:18:41,690
flattens the observable and then it

00:18:38,930 --> 00:18:43,940
applies the switch strategy unsubscribe

00:18:41,690 --> 00:18:48,010
from the previous recruits observable

00:18:43,940 --> 00:18:52,930
before subscribing to the new one and

00:18:48,010 --> 00:18:52,930
this is switch

00:19:02,390 --> 00:19:10,880
[Applause]

00:19:05,300 --> 00:19:14,280
hold on all this actually makes sense

00:19:10,880 --> 00:19:17,820
did I just learn switch man I believe

00:19:14,280 --> 00:19:20,160
you have thanks reactive teacher man now

00:19:17,820 --> 00:19:22,500
I understand how that might autocomplete

00:19:20,160 --> 00:19:26,880
component actually works oh it was a

00:19:22,500 --> 00:19:27,690
group effort but now my work here is

00:19:26,880 --> 00:19:31,020
done

00:19:27,690 --> 00:19:36,080
what's that so someone is struggling

00:19:31,020 --> 00:19:36,080
with the concat map operator reactive

00:19:43,330 --> 00:19:48,489
that was certainly interesting I will

00:19:46,360 --> 00:19:49,619
have to bring that up door and stand up

00:19:48,489 --> 00:19:57,239
tomorrow

00:19:49,619 --> 00:19:57,239
excuse me out now now back to work

00:20:03,269 --> 00:20:12,129
hold on no no no what you need to do

00:20:09,340 --> 00:20:16,320
there is trigger change detection change

00:20:12,129 --> 00:20:16,320
detection doesn't that run automatically

00:20:23,100 --> 00:20:26,759
here we go again

00:20:26,879 --> 00:20:45,970
hey did I ever tell you the story about

00:20:30,909 --> 00:20:50,080
the rabbi and the changes check out high

00:20:45,970 --> 00:20:52,419
res Vallejo and yeah this was Mike this

00:20:50,080 --> 00:20:55,710
was speech I was shy and this was

00:20:52,419 --> 00:20:55,710
sweeter side

00:21:02,710 --> 00:21:05,900

YouTube URL: https://www.youtube.com/watch?v=rUZ9CjcaCEw


