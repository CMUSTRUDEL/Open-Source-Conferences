Title: Angular at Large Organizations - Victor Savkin
Publication date: 2018-11-16
Playlist: ng-conf 2018
Description: 
	ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,770 --> 00:00:06,779
hi there I'm Victor and I'm a co-founder

00:00:04,710 --> 00:00:09,420
of Narwhal and today I want to tell you

00:00:06,779 --> 00:00:11,639
how to use angle effectively at large

00:00:09,420 --> 00:00:14,639
organizations now you see but Google

00:00:11,639 --> 00:00:16,500
working an angle a team used to blog at

00:00:14,639 --> 00:00:18,119
this laughing would come some time ago

00:00:16,500 --> 00:00:20,130
Jeff Jeff cross from the angular team

00:00:18,119 --> 00:00:23,010
and I left Google to start Narwhal and

00:00:20,130 --> 00:00:24,990
these days I blog add a blog good narrow

00:00:23,010 --> 00:00:28,800
detail so check out the blog has a lot

00:00:24,990 --> 00:00:31,109
of high quality angle content last year

00:00:28,800 --> 00:00:34,649
at ng-conf just two of us Jeff and I and

00:00:31,109 --> 00:00:36,630
since I'm tired of the Fox very smart

00:00:34,649 --> 00:00:38,520
folks from the angler community I think

00:00:36,630 --> 00:00:39,899
some some people call us the angular

00:00:38,520 --> 00:00:42,559
Avengers which is you know obviously

00:00:39,899 --> 00:00:46,020
vertical if you see any of us say hi

00:00:42,559 --> 00:00:48,390
those hiring mainly in Toronto Canada so

00:00:46,020 --> 00:00:49,920
it happened to be in Toronto join us if

00:00:48,390 --> 00:00:51,930
you want to work on cool projects you

00:00:49,920 --> 00:00:53,750
know work on open source have flexible

00:00:51,930 --> 00:00:57,059
hours you know will be paid really well

00:00:53,750 --> 00:00:59,600
email me if you're not in Shona still

00:00:57,059 --> 00:01:03,149
email me we make exceptions sometimes

00:00:59,600 --> 00:01:04,949
alright I'm going to talk about using

00:01:03,149 --> 00:01:06,479
angular effectively large organizations

00:01:04,949 --> 00:01:08,909
and there are few components to it so

00:01:06,479 --> 00:01:10,950
the first I want to start by explaining

00:01:08,909 --> 00:01:13,200
how large organizations differ from some

00:01:10,950 --> 00:01:15,479
organizations right and what challenges

00:01:13,200 --> 00:01:17,490
they face then I'm gonna look at two

00:01:15,479 --> 00:01:19,610
main areas to focus that we identified

00:01:17,490 --> 00:01:21,840
by working with lots of clients which is

00:01:19,610 --> 00:01:24,890
source code on dependency management and

00:01:21,840 --> 00:01:26,700
best practices and tools and then

00:01:24,890 --> 00:01:28,320
finally at the end I will give you a

00:01:26,700 --> 00:01:30,869
practical checklist you can print out

00:01:28,320 --> 00:01:34,470
bring to work on Monday and become

00:01:30,869 --> 00:01:36,000
awesome alright I'm going to use an

00:01:34,470 --> 00:01:37,860
arrow on X and this presentation Zhu Tao

00:01:36,000 --> 00:01:40,590
open source sort of set of extensions

00:01:37,860 --> 00:01:43,320
for the English away of optimized for

00:01:40,590 --> 00:01:45,390
like large enterprise things right so

00:01:43,320 --> 00:01:47,220
open source MIT license so I'm not

00:01:45,390 --> 00:01:49,890
selling to you if you use it you know

00:01:47,220 --> 00:01:51,960
great if you don't use it well that's

00:01:49,890 --> 00:01:53,850
great but fine still so three it up to

00:01:51,960 --> 00:01:55,470
you and I'm going to use because it

00:01:53,850 --> 00:01:56,969
provides good solutions for many of the

00:01:55,470 --> 00:01:58,320
problems I'm going to talk about so you

00:01:56,969 --> 00:01:59,820
don't have to use it you know you can

00:01:58,320 --> 00:02:02,549
implement the same kinetic needs

00:01:59,820 --> 00:02:06,360
yourself in your own custom set up right

00:02:02,549 --> 00:02:08,489
we just released 1.0 so it's stable most

00:02:06,360 --> 00:02:09,750
of our clients use it and we are working

00:02:08,489 --> 00:02:12,690
on the next version that's built on top

00:02:09,750 --> 00:02:13,830
of angular scholastics alright let's

00:02:12,690 --> 00:02:16,440
dive into it

00:02:13,830 --> 00:02:18,840
so on a surface large it's more

00:02:16,440 --> 00:02:20,610
organisations as similar to care about

00:02:18,840 --> 00:02:23,400
the same kind of stuff right to the care

00:02:20,610 --> 00:02:25,500
about consistency if every team builds

00:02:23,400 --> 00:02:28,020
you know the apps in a very unique you

00:02:25,500 --> 00:02:30,510
know special way right decoders harlotry

00:02:28,020 --> 00:02:32,520
use it's hard to integrate having a

00:02:30,510 --> 00:02:34,770
consistent set up helps in many ways

00:02:32,520 --> 00:02:37,020
it's code reuse and this team mobility

00:02:34,770 --> 00:02:38,730
right if the developer joints particular

00:02:37,020 --> 00:02:41,880
team she can go to another team and

00:02:38,730 --> 00:02:44,280
still be productive right they care

00:02:41,880 --> 00:02:46,380
about writing safe robust error prone

00:02:44,280 --> 00:02:47,760
code right you want to make sure you

00:02:46,380 --> 00:02:49,440
don't have phrase condition to your

00:02:47,760 --> 00:02:51,420
error handling stop correctly things

00:02:49,440 --> 00:02:53,370
like that the care about writing

00:02:51,420 --> 00:02:55,350
maintainable code right so you can make

00:02:53,370 --> 00:02:57,480
changes to your code with confidence

00:02:55,350 --> 00:03:00,150
right and sort of the theme is

00:02:57,480 --> 00:03:02,280
conference that what's all about if

00:03:00,150 --> 00:03:04,350
developers completely verify that they

00:03:02,280 --> 00:03:06,180
can make changes to your code base if

00:03:04,350 --> 00:03:08,640
you feel confident they will maintain

00:03:06,180 --> 00:03:12,300
your code base in a good way right to

00:03:08,640 --> 00:03:13,920
the healthy total but all right what's

00:03:12,300 --> 00:03:15,930
different about small organizations and

00:03:13,920 --> 00:03:17,730
large organizations is that large

00:03:15,930 --> 00:03:19,530
companies have a lot of people like

00:03:17,730 --> 00:03:22,080
hundreds or thousands of angular

00:03:19,530 --> 00:03:24,570
developers building dozens or hundreds

00:03:22,080 --> 00:03:25,830
of anger apps right and that changes

00:03:24,570 --> 00:03:28,860
everything right the same difference

00:03:25,830 --> 00:03:29,850
between your like your garage right and

00:03:28,860 --> 00:03:32,459
an Amazon warehouse

00:03:29,850 --> 00:03:34,980
so in principle they're like the same at

00:03:32,459 --> 00:03:38,100
storage spaces but the processes you use

00:03:34,980 --> 00:03:40,140
in your garage won't work in an Amazon

00:03:38,100 --> 00:03:42,540
warehouse right small companies can

00:03:40,140 --> 00:03:45,120
often get by by very informal at home

00:03:42,540 --> 00:03:46,950
processes right and those just do not

00:03:45,120 --> 00:03:50,490
work right at large companies you need

00:03:46,950 --> 00:03:52,410
more structure before I jump into you

00:03:50,490 --> 00:03:54,270
know giving you complete advice on how

00:03:52,410 --> 00:03:56,130
to set it up right I want to make a

00:03:54,270 --> 00:03:58,470
comment on why I think angular is good

00:03:56,130 --> 00:04:00,120
for large companies right and I'm maybe

00:03:58,470 --> 00:04:02,250
I'm biased because I wasn't angular team

00:04:00,120 --> 00:04:05,010
obviously I think it's good at you know

00:04:02,250 --> 00:04:06,840
lots of things and no projects of all

00:04:05,010 --> 00:04:09,120
size and for companies of all science

00:04:06,840 --> 00:04:11,280
right but it is specially shines right

00:04:09,120 --> 00:04:13,950
if you have a large organization here's

00:04:11,280 --> 00:04:16,530
why the first reason is that the

00:04:13,950 --> 00:04:18,540
community is not fragmented but everyone

00:04:16,530 --> 00:04:19,260
on the Anglican most folks on the

00:04:18,540 --> 00:04:22,380
angular community

00:04:19,260 --> 00:04:24,750
use angular CLI use your router right

00:04:22,380 --> 00:04:27,360
using grx or plan to use interacts right

00:04:24,750 --> 00:04:29,340
and this uniformity leads to

00:04:27,360 --> 00:04:31,409
to create the consistency so when a

00:04:29,340 --> 00:04:33,360
developer joins a team she can become

00:04:31,409 --> 00:04:35,099
productive some days or like let's say

00:04:33,360 --> 00:04:37,080
weeks but still relatively quickly right

00:04:35,099 --> 00:04:39,210
she can move from a team to a team and

00:04:37,080 --> 00:04:41,370
remain productive right that's that huge

00:04:39,210 --> 00:04:42,810
thing like for many companies and if you

00:04:41,370 --> 00:04:45,150
look at some other ecosystem that's not

00:04:42,810 --> 00:04:46,650
the case right every app is unique and

00:04:45,150 --> 00:04:49,439
it's actually experience doesn't

00:04:46,650 --> 00:04:52,110
transfer as well right angular has

00:04:49,439 --> 00:04:54,689
predictable release cycle right which is

00:04:52,110 --> 00:04:56,759
awesome for larger companies angular

00:04:54,689 --> 00:04:59,400
give you enough time script and time

00:04:56,759 --> 00:05:02,009
script in my opinion is by far the best

00:04:59,400 --> 00:05:03,509
thing that happened to the JavaScript

00:05:02,009 --> 00:05:04,830
ecosystem one of the best thing that

00:05:03,509 --> 00:05:07,409
happened to me personally right it's

00:05:04,830 --> 00:05:08,490
just so good right and suppose the only

00:05:07,409 --> 00:05:10,830
framework that works well with

00:05:08,490 --> 00:05:13,050
typescript like most of them do work

00:05:10,830 --> 00:05:14,879
really well the difference here that the

00:05:13,050 --> 00:05:17,279
whole ecosystem works well with

00:05:14,879 --> 00:05:19,800
JavaScript every single library every

00:05:17,279 --> 00:05:22,529
single to read and as such you're typing

00:05:19,800 --> 00:05:24,870
sign out of date your API fuel ergonomic

00:05:22,529 --> 00:05:26,430
one typed you know all the source code

00:05:24,870 --> 00:05:28,080
manipulation tools you know use

00:05:26,430 --> 00:05:29,879
typescript so you never have any

00:05:28,080 --> 00:05:32,129
mismatch now it just works really well

00:05:29,879 --> 00:05:33,629
the experiences it's almost as good as

00:05:32,129 --> 00:05:36,419
you get you know if you like use job

00:05:33,629 --> 00:05:37,349
right the tooling is excellent so that's

00:05:36,419 --> 00:05:39,810
a huge job right

00:05:37,349 --> 00:05:42,360
and finally angler has a very strong

00:05:39,810 --> 00:05:44,400
emphasis on automation I think should

00:05:42,360 --> 00:05:46,680
happen automatically for you which

00:05:44,400 --> 00:05:49,830
matters a lot more for large

00:05:46,680 --> 00:05:51,750
organizations but all right so those are

00:05:49,830 --> 00:05:53,699
the two these are the two areas we sort

00:05:51,750 --> 00:05:56,759
of identified and at the things you can

00:05:53,699 --> 00:05:59,099
tackle first in your organization and if

00:05:56,759 --> 00:06:01,740
you do it you'll be ahead of other folks

00:05:59,099 --> 00:06:05,089
you know basically you be hired the

00:06:01,740 --> 00:06:08,339
competition let's look at the first one

00:06:05,089 --> 00:06:10,080
as I mentioned large organizations have

00:06:08,339 --> 00:06:11,099
a lot of source code and lots of folks

00:06:10,080 --> 00:06:13,319
just change in the source code

00:06:11,099 --> 00:06:15,089
constantly right so figuring out how to

00:06:13,319 --> 00:06:16,740
store your source code how to

00:06:15,089 --> 00:06:17,099
effectively make changes to your source

00:06:16,740 --> 00:06:18,569
code

00:06:17,099 --> 00:06:20,339
how to set up dependencies between

00:06:18,569 --> 00:06:22,169
different units in your source code read

00:06:20,339 --> 00:06:24,240
between different projects how to build

00:06:22,169 --> 00:06:27,569
and release them as a question you have

00:06:24,240 --> 00:06:30,479
to answer well and relatively earlier

00:06:27,569 --> 00:06:32,669
right once you start examining those

00:06:30,479 --> 00:06:35,069
questions you will quickly see that not

00:06:32,669 --> 00:06:36,630
all projects of modules in your in your

00:06:35,069 --> 00:06:39,270
cell phone like so the different

00:06:36,630 --> 00:06:40,110
categories of project for example you

00:06:39,270 --> 00:06:41,009
will quickly see that there are

00:06:40,110 --> 00:06:42,979
applications

00:06:41,009 --> 00:06:46,259
actually built something that you bundle

00:06:42,979 --> 00:06:48,300
probably using webpack Renault and ship

00:06:46,259 --> 00:06:50,430
to some user minify you create an

00:06:48,300 --> 00:06:52,559
optimized bundle right there are app

00:06:50,430 --> 00:06:54,539
specific lips those sections of your

00:06:52,559 --> 00:06:56,879
apps you want to build independently and

00:06:54,539 --> 00:06:58,080
test independently they usually have

00:06:56,879 --> 00:06:59,369
like owners right

00:06:58,080 --> 00:07:00,659
you build a section of the app you put

00:06:59,369 --> 00:07:03,330
some writer in there some business logic

00:07:00,659 --> 00:07:06,539
right and you then plug it in the same

00:07:03,330 --> 00:07:09,629
app right there are reusable lips like

00:07:06,539 --> 00:07:11,189
components utilities services sometimes

00:07:09,629 --> 00:07:14,370
some indirect stuff can be reused as

00:07:11,189 --> 00:07:18,740
well and there are third-party libraries

00:07:14,370 --> 00:07:20,789
and tools right to be effective a

00:07:18,740 --> 00:07:23,009
developer should be able to do the

00:07:20,789 --> 00:07:24,960
following things right a developer

00:07:23,009 --> 00:07:27,199
should be able to create app specific

00:07:24,960 --> 00:07:29,309
lips sections of apps quickly a

00:07:27,199 --> 00:07:32,009
developer should be able to extract

00:07:29,309 --> 00:07:34,529
reusable lips and see what depends on

00:07:32,009 --> 00:07:36,870
them right a developer should be able to

00:07:34,529 --> 00:07:39,479
verify that the code change APR is safe

00:07:36,870 --> 00:07:40,889
to merge a part where you saw my ability

00:07:39,479 --> 00:07:42,449
of too much which is not hard right I

00:07:40,889 --> 00:07:43,909
developers should be able to the fact

00:07:42,449 --> 00:07:46,020
there are bunch of those things together

00:07:43,909 --> 00:07:47,759
determine who's responsible for

00:07:46,020 --> 00:07:49,649
particular section so ownership see

00:07:47,759 --> 00:07:51,569
based on which type and then an

00:07:49,649 --> 00:07:53,759
developers should be able to use the

00:07:51,569 --> 00:07:57,779
dependency graph and impose constraints

00:07:53,759 --> 00:07:59,249
on that dependency graph so going

00:07:57,779 --> 00:08:01,740
through all of them will take like a

00:07:59,249 --> 00:08:03,539
long time like hours right so I'm going

00:08:01,740 --> 00:08:06,360
to just cherry-pick a few examples to

00:08:03,539 --> 00:08:08,279
show you how good it can be if you just

00:08:06,360 --> 00:08:10,199
put a little bit of salt into it you

00:08:08,279 --> 00:08:12,300
don't have to use our tools right it's

00:08:10,199 --> 00:08:13,860
thought that matters right and how

00:08:12,300 --> 00:08:15,959
unfortunately under one home and it

00:08:13,860 --> 00:08:18,240
usually is right so the contest would be

00:08:15,959 --> 00:08:20,240
you know rustic right so hopefully to

00:08:18,240 --> 00:08:23,370
inspire you to make some changes

00:08:20,240 --> 00:08:26,069
take for example extract canary usable

00:08:23,370 --> 00:08:28,830
library common use case which like we

00:08:26,069 --> 00:08:30,360
should do it all the time right to see

00:08:28,830 --> 00:08:33,120
the difference between how awesome it

00:08:30,360 --> 00:08:35,250
can be and how unfortunate usually is

00:08:33,120 --> 00:08:37,709
let's imagine we have working on some

00:08:35,250 --> 00:08:39,510
help desk like app right way folks can

00:08:37,709 --> 00:08:42,240
submit tickets you know our agents can

00:08:39,510 --> 00:08:43,790
do tickets and do something with them so

00:08:42,240 --> 00:08:46,019
let's imagine have two applications

00:08:43,790 --> 00:08:47,790
implementing this project the first one

00:08:46,019 --> 00:08:50,610
is called tasks desk which is our main

00:08:47,790 --> 00:08:52,380
app which our agents use and the second

00:08:50,610 --> 00:08:54,570
one is called the admin you know some

00:08:52,380 --> 00:08:55,370
sort of add new stuff on a site right

00:08:54,570 --> 00:08:57,720
those are two separate applications

00:08:55,370 --> 00:09:00,330
built for different folks in a different

00:08:57,720 --> 00:09:02,970
way for example the tastic desk maybe

00:09:00,330 --> 00:09:05,180
works one mobile admin app normal cares

00:09:02,970 --> 00:09:08,670
you know works on the interim right and

00:09:05,180 --> 00:09:11,310
each of those is built using a bunch of

00:09:08,670 --> 00:09:13,980
have specific lips right that's what is

00:09:11,310 --> 00:09:16,530
the set up because it's in an axe report

00:09:13,980 --> 00:09:18,660
we can run this command to get sort of

00:09:16,530 --> 00:09:20,340
the depth the graph of all dependencies

00:09:18,660 --> 00:09:22,290
in the seaport we can look at all the

00:09:20,340 --> 00:09:23,370
lips all the apps and we can see how

00:09:22,290 --> 00:09:25,650
they depend on each other right

00:09:23,370 --> 00:09:27,930
right now we see that they don't share

00:09:25,650 --> 00:09:30,330
any code right those two projects are

00:09:27,930 --> 00:09:33,630
separately distinct right there is

00:09:30,330 --> 00:09:36,690
nothing that shared right if we zoom in

00:09:33,630 --> 00:09:38,910
on this particular lip component shop we

00:09:36,690 --> 00:09:41,910
see it used by one of the apps the task

00:09:38,910 --> 00:09:45,840
rest upon main app let's say we have an

00:09:41,910 --> 00:09:47,670
idea and we can go over here to see this

00:09:45,840 --> 00:09:49,980
lip sort of a little bit closer it has

00:09:47,670 --> 00:09:51,960
two components footer and header item

00:09:49,980 --> 00:09:54,330
DiMaggio just exports those two

00:09:51,960 --> 00:09:56,100
composers very basic set up let's say we

00:09:54,330 --> 00:09:58,980
have an idea that we'd like to take one

00:09:56,100 --> 00:10:02,010
of these components say footer right and

00:09:58,980 --> 00:10:04,140
use it in both the apps alright our

00:10:02,010 --> 00:10:05,400
product person talks to us like we need

00:10:04,140 --> 00:10:06,300
to move it and you know use it

00:10:05,400 --> 00:10:09,810
everywhere

00:10:06,300 --> 00:10:11,550
do it quickly right so how do we do it

00:10:09,810 --> 00:10:14,520
like what is the process of extracting

00:10:11,550 --> 00:10:18,540
that component out and using it in in

00:10:14,520 --> 00:10:21,240
post apps in our case because we're

00:10:18,540 --> 00:10:23,730
isn't the a good set of tools we can do

00:10:21,240 --> 00:10:26,280
it very easily right we can use ng

00:10:23,730 --> 00:10:27,750
command and generate a lip of shared

00:10:26,280 --> 00:10:28,890
components right

00:10:27,750 --> 00:10:31,080
again we're not using anything special

00:10:28,890 --> 00:10:32,460
here that just US CLI will just plug in

00:10:31,080 --> 00:10:34,470
custom schematics and then it allow us

00:10:32,460 --> 00:10:36,510
to do that right but generate a leap of

00:10:34,470 --> 00:10:39,180
shared components retailer sheet fourth

00:10:36,510 --> 00:10:40,800
step to we're just moving the component

00:10:39,180 --> 00:10:42,540
over you know you can just drag and drop

00:10:40,800 --> 00:10:45,330
the component is as simple as that right

00:10:42,540 --> 00:10:48,360
and then you update your module to

00:10:45,330 --> 00:10:48,750
export the component right right every

00:10:48,360 --> 00:10:51,930
fourth

00:10:48,750 --> 00:10:54,090
finally we import the new lip interval

00:10:51,930 --> 00:10:56,760
application and then we import the

00:10:54,090 --> 00:10:58,980
module next to the original shim shell

00:10:56,760 --> 00:11:03,000
module right which we move the

00:10:58,980 --> 00:11:05,460
components from finally we run in this

00:11:03,000 --> 00:11:08,200
command to make sure that none of the

00:11:05,460 --> 00:11:10,330
apps that in our repo

00:11:08,200 --> 00:11:12,790
affected by this change right that they

00:11:10,330 --> 00:11:14,140
are not broken that's a big deal right

00:11:12,790 --> 00:11:15,550
because we want to make sure that our

00:11:14,140 --> 00:11:16,630
changes are safe all right

00:11:15,550 --> 00:11:18,790
but when we are doing those three

00:11:16,630 --> 00:11:21,640
factoring extracting things out we don't

00:11:18,790 --> 00:11:23,530
break existing amps and labs right what

00:11:21,640 --> 00:11:25,240
you want to do it like efficiently with

00:11:23,530 --> 00:11:28,600
a motor II test everything every single

00:11:25,240 --> 00:11:30,250
time that's passed not good right it

00:11:28,600 --> 00:11:32,320
will be very slow it will break down

00:11:30,250 --> 00:11:34,210
right so you want to make sure that you

00:11:32,320 --> 00:11:37,120
only tested think that you have to

00:11:34,210 --> 00:11:39,160
retest and nothing else right and we can

00:11:37,120 --> 00:11:40,780
do it by using this command so at this

00:11:39,160 --> 00:11:43,840
point what we have is a reusable library

00:11:40,780 --> 00:11:46,480
we can submit the pr2 master emergent

00:11:43,840 --> 00:11:48,130
the master and then eventually use it in

00:11:46,480 --> 00:11:51,220
our admin app in this time in the same

00:11:48,130 --> 00:11:52,540
fashion right because it's an extra pool

00:11:51,220 --> 00:11:54,580
again we can run the same command when

00:11:52,540 --> 00:11:56,260
run before to see hey now we can see

00:11:54,580 --> 00:11:59,710
that the two apps actually have a shared

00:11:56,260 --> 00:12:01,840
piece right note we can actually measure

00:11:59,710 --> 00:12:03,880
the whole process from the idea in our

00:12:01,840 --> 00:12:06,160
hat I'd like to move this component out

00:12:03,880 --> 00:12:08,560
to you know it's been merged into master

00:12:06,160 --> 00:12:09,700
we can write down the steps and see how

00:12:08,560 --> 00:12:11,710
long it takes in the best-case scenario

00:12:09,700 --> 00:12:14,380
in this case we'll have four simple

00:12:11,710 --> 00:12:17,590
steps and like it may take an hour right

00:12:14,380 --> 00:12:18,880
keep an eye on how slow you see is now

00:12:17,590 --> 00:12:21,310
let's look at how it's typically done

00:12:18,880 --> 00:12:23,680
right it's not typically done so in most

00:12:21,310 --> 00:12:25,960
organizations if I am tasks with the

00:12:23,680 --> 00:12:27,850
same project I need to share this

00:12:25,960 --> 00:12:30,670
component I need to create and configure

00:12:27,850 --> 00:12:33,760
the new repo in my ghe instance right

00:12:30,670 --> 00:12:35,170
presumably I need to stop testing set up

00:12:33,760 --> 00:12:36,700
some sort of energy package there's any

00:12:35,170 --> 00:12:39,580
right to publish it you know to create

00:12:36,700 --> 00:12:41,590
right artifact I need to stop my CI to

00:12:39,580 --> 00:12:43,540
make sure that my lip is dusted in

00:12:41,590 --> 00:12:45,490
automatically I need to set up

00:12:43,540 --> 00:12:48,130
deployment to a private and PM registry

00:12:45,490 --> 00:12:50,080
just a multi-factor right only then

00:12:48,130 --> 00:12:51,250
after I'm done with all of this I can

00:12:50,080 --> 00:12:53,110
move the component over

00:12:51,250 --> 00:12:55,660
testate massaged a little bit make it

00:12:53,110 --> 00:12:58,210
exactly right you know a delete me push

00:12:55,660 --> 00:13:01,180
it to my factory right then I go to the

00:12:58,210 --> 00:13:02,710
main app I pull the package turns out

00:13:01,180 --> 00:13:04,450
it's not exactly right because I you

00:13:02,710 --> 00:13:05,890
know at a human being I make mistakes

00:13:04,450 --> 00:13:07,120
all the time so it goes to the same

00:13:05,890 --> 00:13:09,430
process a couple times

00:13:07,120 --> 00:13:13,450
eventually I arrive at something that

00:13:09,430 --> 00:13:15,520
works right if we look at this this

00:13:13,450 --> 00:13:18,160
usually takes in most organizations at

00:13:15,520 --> 00:13:20,710
least a couple weeks provisionary poor

00:13:18,160 --> 00:13:21,640
provision in CI setting it up takes a

00:13:20,710 --> 00:13:26,050
lot of time but

00:13:21,640 --> 00:13:28,510
one hour operation and the point here

00:13:26,050 --> 00:13:30,670
that because it takes so long to do that

00:13:28,510 --> 00:13:32,320
right it take if it takes what even

00:13:30,670 --> 00:13:34,360
weeks but if it takes multiple days to

00:13:32,320 --> 00:13:36,760
do that it's really hard to me to go to

00:13:34,360 --> 00:13:38,590
my manager and say hey you know I need

00:13:36,760 --> 00:13:40,570
that component I'll see you in a month

00:13:38,590 --> 00:13:43,000
only then I will have it in this answer

00:13:40,570 --> 00:13:46,210
app right or I can just copy it over and

00:13:43,000 --> 00:13:47,830
I'll be done in an hour right my manager

00:13:46,210 --> 00:13:50,380
told me you know are you stupid

00:13:47,830 --> 00:13:53,440
right copy over right well like we have

00:13:50,380 --> 00:13:55,450
a deadline right so they D and then

00:13:53,440 --> 00:13:57,370
because it's so low it takes so long to

00:13:55,450 --> 00:14:00,100
do it properly in a typical setup right

00:13:57,370 --> 00:14:01,330
folks you just duplicate code or put

00:14:00,100 --> 00:14:02,950
code in our own place from the very

00:14:01,330 --> 00:14:05,050
beginning right it doesn't belong there

00:14:02,950 --> 00:14:06,750
but you know that that piece is shared

00:14:05,050 --> 00:14:08,710
you just put everything back right

00:14:06,750 --> 00:14:09,780
because you don't want to go through

00:14:08,710 --> 00:14:12,550
this process later on

00:14:09,780 --> 00:14:14,170
it gets actually a lot worse and a lot

00:14:12,550 --> 00:14:16,780
worse if you try to actually test that

00:14:14,170 --> 00:14:18,720
your reusable library doesn't like a

00:14:16,780 --> 00:14:22,240
change to the user behind pre-safe right

00:14:18,720 --> 00:14:26,080
it's painfully difficult to do it in in

00:14:22,240 --> 00:14:28,650
most setups right and what results same

00:14:26,080 --> 00:14:31,270
if the developers who cannot test that

00:14:28,650 --> 00:14:32,680
right breathe with defensive code so

00:14:31,270 --> 00:14:33,880
they're afraid to make changes you don't

00:14:32,680 --> 00:14:36,220
have the confidence right

00:14:33,880 --> 00:14:38,310
they always under stress the hair gets

00:14:36,220 --> 00:14:41,140
gray as you can see the result of my

00:14:38,310 --> 00:14:42,490
working in the industry right lots of

00:14:41,140 --> 00:14:44,650
other things happen right that's not

00:14:42,490 --> 00:14:46,990
good so it should be a simple of that

00:14:44,650 --> 00:14:48,970
you should be able to do it by running a

00:14:46,990 --> 00:14:50,470
single command essentially right that's

00:14:48,970 --> 00:14:52,930
what happens here you should do it nice

00:14:50,470 --> 00:14:54,640
yeah obviously right even more so you

00:14:52,930 --> 00:14:56,920
should be able to run some command to

00:14:54,640 --> 00:14:59,530
see what exactly is affected by a

00:14:56,920 --> 00:15:01,780
particular change if you touch a file or

00:14:59,530 --> 00:15:03,730
you submit a PR you should know what can

00:15:01,780 --> 00:15:05,680
be affected right in our case we can do

00:15:03,730 --> 00:15:07,240
that in your own setup you should be

00:15:05,680 --> 00:15:09,550
able to do it as well right if you

00:15:07,240 --> 00:15:12,670
cannot do it in the long run right

00:15:09,550 --> 00:15:15,880
you're going to suffer let's see how it

00:15:12,670 --> 00:15:17,680
usually happens right if I am if I have

00:15:15,880 --> 00:15:19,930
a reusable I bring my set up and a bunch

00:15:17,680 --> 00:15:22,630
of apps using it what usually happens is

00:15:19,930 --> 00:15:26,110
I am making a change to a library then

00:15:22,630 --> 00:15:28,510
as someone on my team take this change

00:15:26,110 --> 00:15:29,170
post one of the app that might be using

00:15:28,510 --> 00:15:31,450
the library

00:15:29,170 --> 00:15:33,550
right then through magic of NPM link

00:15:31,450 --> 00:15:34,440
which no one understand or like very few

00:15:33,550 --> 00:15:37,110
people really on the

00:15:34,440 --> 00:15:39,330
right they try to cook it up right let's

00:15:37,110 --> 00:15:41,970
imagine you managed to do that and

00:15:39,330 --> 00:15:44,970
believe me like very few people can do

00:15:41,970 --> 00:15:46,500
it well right you do that and then you

00:15:44,970 --> 00:15:47,280
test the app manually click on a link

00:15:46,500 --> 00:15:50,100
and color works

00:15:47,280 --> 00:15:51,680
no there is no she involved we don't do

00:15:50,100 --> 00:15:54,690
it automatically it manual process

00:15:51,680 --> 00:15:56,550
heated bath takes hours usually takes

00:15:54,690 --> 00:15:59,160
much longer and you usually do it with

00:15:56,550 --> 00:16:01,230
like one app so we get some confidence

00:15:59,160 --> 00:16:03,210
it's not completely broken right but

00:16:01,230 --> 00:16:05,100
that's basically it you don't test with

00:16:03,210 --> 00:16:06,780
every single app because chances are you

00:16:05,100 --> 00:16:09,150
don't even know we depend on your stuff

00:16:06,780 --> 00:16:11,190
right so it's completely broken it

00:16:09,150 --> 00:16:13,230
shockingly bad right I'm surprised

00:16:11,190 --> 00:16:16,260
developers you know can keep any sanity

00:16:13,230 --> 00:16:18,330
with this kind of stuff so if you want

00:16:16,260 --> 00:16:21,120
to so we look at a few examples of how

00:16:18,330 --> 00:16:24,770
good it can be relatively easily if you

00:16:21,120 --> 00:16:28,140
invest you know enough effort and how

00:16:24,770 --> 00:16:29,580
underwhelming it usually is right if you

00:16:28,140 --> 00:16:32,160
want to get better at those things right

00:16:29,580 --> 00:16:34,800
check out those those links explores the

00:16:32,160 --> 00:16:36,900
idea of workspaces or mana ripples we

00:16:34,800 --> 00:16:38,400
have our own open source tool that does

00:16:36,900 --> 00:16:40,290
it right but you don't have to use it

00:16:38,400 --> 00:16:42,630
you can do it on your own just fine

00:16:40,290 --> 00:16:45,750
check out the blog post it talks about

00:16:42,630 --> 00:16:47,790
that explore basil lots of folks at this

00:16:45,750 --> 00:16:50,760
conference talk about basil an excellent

00:16:47,790 --> 00:16:53,070
go-to from Google works here well we

00:16:50,760 --> 00:16:57,480
have a basil flavored version of an axe

00:16:53,070 --> 00:17:00,090
Brooks Oliva somewhat well so you should

00:16:57,480 --> 00:17:01,530
check it out if you're interested then

00:17:00,090 --> 00:17:03,000
and to or from our team they wrote an

00:17:01,530 --> 00:17:04,829
excellent blog post introducing you to

00:17:03,000 --> 00:17:08,189
basil and how to use it with angular

00:17:04,829 --> 00:17:09,860
check out the blog post explore gets the

00:17:08,189 --> 00:17:12,180
modules in your workspaces

00:17:09,860 --> 00:17:14,459
really really good tools for some reason

00:17:12,180 --> 00:17:16,350
no one uses them right I am yet to see a

00:17:14,459 --> 00:17:19,050
person who effectively uses gives up

00:17:16,350 --> 00:17:20,990
modules right just exploit it it's a

00:17:19,050 --> 00:17:24,569
very good thing too in many situations

00:17:20,990 --> 00:17:27,180
finally in forced introversion policy

00:17:24,569 --> 00:17:29,370
meaning that in your org over like in

00:17:27,180 --> 00:17:31,440
your group of teams use only one verse

00:17:29,370 --> 00:17:33,840
to make one version of every package

00:17:31,440 --> 00:17:35,340
right seems crazy and seems like

00:17:33,840 --> 00:17:35,970
unproductive but in the long run you are

00:17:35,340 --> 00:17:37,380
going to win

00:17:35,970 --> 00:17:39,210
you're going to have higher code

00:17:37,380 --> 00:17:41,160
visibility integrate things is much

00:17:39,210 --> 00:17:43,340
easier you developers can move around

00:17:41,160 --> 00:17:46,350
without being stressed out all the time

00:17:43,340 --> 00:17:48,150
all right now let's switch gears and

00:17:46,350 --> 00:17:49,860
talk about the second

00:17:48,150 --> 00:17:52,440
area focus which is promoting best

00:17:49,860 --> 00:17:54,900
practices isn't tolling right as with

00:17:52,440 --> 00:17:57,090
the previous section the idea that the

00:17:54,900 --> 00:17:59,790
the approach using your like a ten

00:17:57,090 --> 00:18:03,030
person organization just doesn't work at

00:17:59,790 --> 00:18:05,670
a large companies right code reviews in

00:18:03,030 --> 00:18:07,890
word-of-mouth a great way so like charge

00:18:05,670 --> 00:18:09,870
normal lunch works really well with like

00:18:07,890 --> 00:18:12,120
ten of you it doesn't work if it's a

00:18:09,870 --> 00:18:14,550
thousand of you I did the process good

00:18:12,120 --> 00:18:16,410
gets brittle you need to put a lot of

00:18:14,550 --> 00:18:18,870
resources into you know education folks

00:18:16,410 --> 00:18:21,559
in this way everything gets inconsistent

00:18:18,870 --> 00:18:24,390
basically it it's not working at about

00:18:21,559 --> 00:18:27,450
the cheese we can do better let's go

00:18:24,390 --> 00:18:29,760
back to this picture and let's imagine

00:18:27,450 --> 00:18:31,890
right now in the state that we have been

00:18:29,760 --> 00:18:33,929
working on this repo for a while we

00:18:31,890 --> 00:18:35,910
worked on a few apps you know those

00:18:33,929 --> 00:18:38,130
three apps and we sort of discovered

00:18:35,910 --> 00:18:41,940
just based on experience that the green

00:18:38,130 --> 00:18:43,380
boxes the libraries it's better if they

00:18:41,940 --> 00:18:45,870
play one of the following four roles

00:18:43,380 --> 00:18:48,059
right let's say we discover that if we

00:18:45,870 --> 00:18:50,580
partition our repository in these four

00:18:48,059 --> 00:18:52,980
categories we have utilities dumb

00:18:50,580 --> 00:18:55,260
components meaning the UI and direct

00:18:52,980 --> 00:18:56,490
staff data access and features which is

00:18:55,260 --> 00:18:56,970
actually think that glue the vision

00:18:56,490 --> 00:18:59,040
together

00:18:56,970 --> 00:19:00,960
if you partition or appoint those four

00:18:59,040 --> 00:19:02,640
categories of lips somehow it's more

00:19:00,960 --> 00:19:05,790
maintainable let's say that's what we've

00:19:02,640 --> 00:19:07,920
learned right from our experience so we

00:19:05,790 --> 00:19:10,470
would like to you know promote this idea

00:19:07,920 --> 00:19:13,380
I had to solve folks at our company

00:19:10,470 --> 00:19:16,470
create those kind of libraries in

00:19:13,380 --> 00:19:17,550
addition we'd like to say that you know

00:19:16,470 --> 00:19:19,980
they shouldn't depend on each other

00:19:17,550 --> 00:19:21,809
freely like it does make sense for dumb

00:19:19,980 --> 00:19:23,630
UI components depend on the direct stuff

00:19:21,809 --> 00:19:26,190
attached it shouldn't be the case

00:19:23,630 --> 00:19:28,290
similarly if you have indirect stuff you

00:19:26,190 --> 00:19:30,270
shouldn't parent components right it

00:19:28,290 --> 00:19:31,980
should be abstracted away so let's say

00:19:30,270 --> 00:19:35,510
we want to impose these constraints on

00:19:31,980 --> 00:19:38,690
our repo as well how can we do it right

00:19:35,510 --> 00:19:41,490
typically it's done like this someone an

00:19:38,690 --> 00:19:44,370
architect right writes a wiki page

00:19:41,490 --> 00:19:46,429
described in the Senate right that page

00:19:44,370 --> 00:19:48,240
gets out of things like in a day

00:19:46,429 --> 00:19:49,980
three-quarters of the company didn't

00:19:48,240 --> 00:19:51,929
hear about the page and never read it

00:19:49,980 --> 00:19:53,280
right it's basically isn't a waste of

00:19:51,929 --> 00:19:54,960
effort it it's it can be still

00:19:53,280 --> 00:19:57,450
productive right but we can do a lot

00:19:54,960 --> 00:19:59,130
better than that right sometimes folks

00:19:57,450 --> 00:20:00,720
try to use code reviews to design which

00:19:59,130 --> 00:20:02,070
works to a degree that coding is

00:20:00,720 --> 00:20:04,620
obviously helped a little bit

00:20:02,070 --> 00:20:07,050
those practices but certain things like

00:20:04,620 --> 00:20:09,480
they check in dependencies that they're

00:20:07,050 --> 00:20:11,850
like allowed whatnot rate can be hard to

00:20:09,480 --> 00:20:15,420
spot and in general it's a good idea to

00:20:11,850 --> 00:20:18,090
sort of make things input to sort of

00:20:15,420 --> 00:20:20,400
build quality in right so you cannot

00:20:18,090 --> 00:20:21,780
make a mistake rather than rely on after

00:20:20,400 --> 00:20:24,090
the fact inspections which could it use

00:20:21,780 --> 00:20:26,850
up right let's see if we can do better

00:20:24,090 --> 00:20:29,160
than that because at a low bar right if

00:20:26,850 --> 00:20:30,600
you look at this again we can sort of

00:20:29,160 --> 00:20:32,610
see that we need to do two things to be

00:20:30,600 --> 00:20:34,620
successful here right first we need to

00:20:32,610 --> 00:20:36,690
enable folks to generate my bridge

00:20:34,620 --> 00:20:38,250
business and market types right if I'm

00:20:36,690 --> 00:20:40,620
generating a data access library I

00:20:38,250 --> 00:20:43,440
should be able to express it right as a

00:20:40,620 --> 00:20:45,540
developer second we need to create a

00:20:43,440 --> 00:20:46,620
link check to make sure that you know

00:20:45,540 --> 00:20:48,890
certain dependencies between our

00:20:46,620 --> 00:20:51,750
libraries are not allowed simple as that

00:20:48,890 --> 00:20:53,340
let's see how we can do it again in this

00:20:51,750 --> 00:20:55,110
case we're working the next repo so

00:20:53,340 --> 00:20:57,180
certain things a little bit simpler but

00:20:55,110 --> 00:20:59,790
the same kind of stuff is possible if

00:20:57,180 --> 00:21:01,580
you have your own homegrown set up right

00:20:59,790 --> 00:21:04,410
you just will take a little bit longer

00:21:01,580 --> 00:21:06,510
so here why isn't this command again we

00:21:04,410 --> 00:21:09,120
using the standard CLI and you know

00:21:06,510 --> 00:21:11,040
tooling to create a workspace command a

00:21:09,120 --> 00:21:12,180
special folder in our workspace we

00:21:11,040 --> 00:21:15,930
called data and his slave

00:21:12,180 --> 00:21:17,670
all right then we provision schema the

00:21:15,930 --> 00:21:20,040
Jesus command essentially we're defining

00:21:17,670 --> 00:21:22,560
inputs what the schematic needs to

00:21:20,040 --> 00:21:23,820
execute in this case we have only one

00:21:22,560 --> 00:21:27,900
input which is the name of the library

00:21:23,820 --> 00:21:29,760
were trying to create next we write in

00:21:27,900 --> 00:21:30,690
the implementation and here the

00:21:29,760 --> 00:21:31,380
implementation is relatively

00:21:30,690 --> 00:21:33,540
straightforward

00:21:31,380 --> 00:21:35,550
we just invoke into existence command X

00:21:33,540 --> 00:21:37,770
we're creating a library and we're

00:21:35,550 --> 00:21:39,660
creating indirect stuff and just you

00:21:37,770 --> 00:21:42,240
know adding to the library in addition

00:21:39,660 --> 00:21:43,830
to that we are running some checks to

00:21:42,240 --> 00:21:45,740
make sure that name is consistent and

00:21:43,830 --> 00:21:47,940
because we values that in our repo

00:21:45,740 --> 00:21:49,530
unless everything we need to do to

00:21:47,940 --> 00:21:52,050
enable code generation peace it's like

00:21:49,530 --> 00:21:53,970
ten lines of code then they add some

00:21:52,050 --> 00:21:55,860
linking constraints and I won't go too

00:21:53,970 --> 00:21:58,080
much into this so don't worry about this

00:21:55,860 --> 00:21:59,910
as much just look at how little code is

00:21:58,080 --> 00:22:02,430
required right - - of protein you try to

00:21:59,910 --> 00:22:05,340
make it happen with this in place i

00:22:02,430 --> 00:22:08,550
developer any developer is able to run

00:22:05,340 --> 00:22:10,140
this command and using the standard CLI

00:22:08,550 --> 00:22:13,770
setup is a little bit of help that an ax

00:22:10,140 --> 00:22:15,470
provides create data X library right and

00:22:13,770 --> 00:22:17,720
if you look at implementation again

00:22:15,470 --> 00:22:19,789
create a lip and recreate indirect stuff

00:22:17,720 --> 00:22:21,679
in the slip and that's what we see over

00:22:19,789 --> 00:22:23,780
here three the lip with indirect stuff

00:22:21,679 --> 00:22:25,400
in that lip right everything is

00:22:23,780 --> 00:22:27,799
configured properly you know

00:22:25,400 --> 00:22:29,480
everything's name properly invariance

00:22:27,799 --> 00:22:31,309
enforced you know taken and set up

00:22:29,480 --> 00:22:32,870
properly everything is done who you read

00:22:31,309 --> 00:22:34,549
LinkedIn and set up properly

00:22:32,870 --> 00:22:36,590
so if you import something which you

00:22:34,549 --> 00:22:39,549
shouldn't be able to import you're going

00:22:36,590 --> 00:22:41,990
to get an error in usgi will fail right

00:22:39,549 --> 00:22:43,789
and again in this case because we sort

00:22:41,990 --> 00:22:46,039
of optimize for this use case in our

00:22:43,789 --> 00:22:47,600
open source tooling right it takes ten

00:22:46,039 --> 00:22:50,000
minutes to do that if you do it on your

00:22:47,600 --> 00:22:51,770
own okay taken a day whatever right but

00:22:50,000 --> 00:22:54,309
it's still possible so you should do it

00:22:51,770 --> 00:22:57,440
regardless if you use our stuff or not

00:22:54,309 --> 00:22:59,780
the next one again I want to stress it

00:22:57,440 --> 00:23:02,780
that even a small company you probably

00:22:59,780 --> 00:23:03,980
have at least a few dozen projects the

00:23:02,780 --> 00:23:06,650
deeper knowledge has in all sorts of

00:23:03,980 --> 00:23:09,320
ways right being able to visualize that

00:23:06,650 --> 00:23:10,070
that workspace she would depend on what

00:23:09,320 --> 00:23:12,710
in what way

00:23:10,070 --> 00:23:14,659
what's loaded lazily what is not loaded

00:23:12,710 --> 00:23:16,850
lately right it's variable it immensely

00:23:14,659 --> 00:23:19,159
variable and if you compare it how it's

00:23:16,850 --> 00:23:21,650
typically done and again someone opens

00:23:19,159 --> 00:23:22,909
OmniGraffle you know draw some diagram

00:23:21,650 --> 00:23:24,620
which is wrong from day one it's not you

00:23:22,909 --> 00:23:27,260
can like it was never right right part

00:23:24,620 --> 00:23:28,520
it to a wiki page it's ignored and you

00:23:27,260 --> 00:23:31,309
know everyone is sad

00:23:28,520 --> 00:23:33,650
right again this a little bit of effort

00:23:31,309 --> 00:23:35,929
you can get up-to-date information all

00:23:33,650 --> 00:23:39,559
the time comparing to something that

00:23:35,929 --> 00:23:42,679
basically provides very low value some

00:23:39,559 --> 00:23:45,890
recommendations create custom schematics

00:23:42,679 --> 00:23:47,539
and custom link checks it takes quite

00:23:45,890 --> 00:23:50,809
some time to become familiar with

00:23:47,539 --> 00:23:53,240
schematics and a NTS length but it's

00:23:50,809 --> 00:23:55,520
totally worth it the payoff is huge if

00:23:53,240 --> 00:23:58,299
you are not doing it you should be doing

00:23:55,520 --> 00:24:00,830
it like soon the value is just immense

00:23:58,299 --> 00:24:01,610
next ultimate everything that can be

00:24:00,830 --> 00:24:04,039
automated

00:24:01,610 --> 00:24:06,110
just absolutely everything but you think

00:24:04,039 --> 00:24:08,210
I don't need automated to mistake right

00:24:06,110 --> 00:24:09,740
you won't automate it for example in our

00:24:08,210 --> 00:24:11,840
case we force you to form and stuff was

00:24:09,740 --> 00:24:13,730
prettier and then force you to run

00:24:11,840 --> 00:24:15,049
preheat checks in your CI so you make

00:24:13,730 --> 00:24:17,000
sure stuff is smart properly right

00:24:15,049 --> 00:24:18,500
things like that you just have to do

00:24:17,000 --> 00:24:20,840
it's very easy to do it takes a data

00:24:18,500 --> 00:24:24,919
step and then you're living in a much

00:24:20,840 --> 00:24:26,990
happier place so there is a checklist

00:24:24,919 --> 00:24:29,059
and I was thinking about going through a

00:24:26,990 --> 00:24:31,309
checklist very slowly sort of

00:24:29,059 --> 00:24:33,529
by point but then it's very long so I

00:24:31,309 --> 00:24:35,600
like screw it so I'm going to point you

00:24:33,529 --> 00:24:37,580
to a blog post that talks about the same

00:24:35,600 --> 00:24:39,440
stuff you know in a much better way with

00:24:37,580 --> 00:24:43,100
a lot more detail and at the end had a

00:24:39,440 --> 00:24:44,600
checklist you know so check it out if

00:24:43,100 --> 00:24:47,269
you want to print it I actually bring it

00:24:44,600 --> 00:24:49,309
to work if you hit this URL you're going

00:24:47,269 --> 00:24:50,539
to get a PDF version you can print you

00:24:49,309 --> 00:24:54,740
can bring to work on Monday and

00:24:50,539 --> 00:24:57,139
hopefully you know improve performance

00:24:54,740 --> 00:25:01,070
the organization oops sorry

00:24:57,139 --> 00:25:04,249
you can take a picture I'm going to

00:25:01,070 --> 00:25:07,789
share slides in Twitter so alright cool

00:25:04,249 --> 00:25:09,049
so follow me on Twitter talk to me at

00:25:07,789 --> 00:25:10,549
the narwhal booth which is right over

00:25:09,049 --> 00:25:11,929
there I'm happy to talk to you more

00:25:10,549 --> 00:25:14,389
about you know enabling those kind of

00:25:11,929 --> 00:25:17,480
things at your company I was hiring and

00:25:14,389 --> 00:25:18,990
also shoot me an email work fast go

00:25:17,480 --> 00:25:23,440
thank you

00:25:18,990 --> 00:25:23,440

YouTube URL: https://www.youtube.com/watch?v=piQ0EZhtus0


