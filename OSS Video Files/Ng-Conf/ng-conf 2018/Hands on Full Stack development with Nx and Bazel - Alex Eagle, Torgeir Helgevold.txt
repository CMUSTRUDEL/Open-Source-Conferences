Title: Hands on Full Stack development with Nx and Bazel - Alex Eagle, Torgeir Helgevold
Publication date: 2018-11-16
Playlist: ng-conf 2018
Description: 
	ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 1500+ developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,080 --> 00:00:02,690
[Applause]

00:00:03,350 --> 00:00:08,429
awesome thanks for coming to our

00:00:05,899 --> 00:00:11,340
workshop on full stack development with

00:00:08,429 --> 00:00:13,190
NX and basil I'm Alex I work on the

00:00:11,340 --> 00:00:17,850
angular team at Google

00:00:13,190 --> 00:00:19,170
I'm tor I worked for Narwhal and we've

00:00:17,850 --> 00:00:21,570
been working together on this stuff for

00:00:19,170 --> 00:00:23,490
I guess about a year it's really awesome

00:00:21,570 --> 00:00:26,340
to be in front of you and force you to

00:00:23,490 --> 00:00:28,260
do it too so I work on this thing called

00:00:26,340 --> 00:00:29,820
angular build tools convergence which is

00:00:28,260 --> 00:00:31,949
under angular labs you'll see this

00:00:29,820 --> 00:00:33,590
little logo up here in the corner this

00:00:31,949 --> 00:00:36,870
means don't use this for production yet

00:00:33,590 --> 00:00:38,100
and I'll put this link again at the end

00:00:36,870 --> 00:00:39,829
but this is the short link for this

00:00:38,100 --> 00:00:43,320
build tools thing that we're working on

00:00:39,829 --> 00:00:46,649
and tor works at Narwhal and supports

00:00:43,320 --> 00:00:48,840
enterprise angular users who have who

00:00:46,649 --> 00:00:49,980
need better integration of all the tools

00:00:48,840 --> 00:00:51,930
that they have to have to do their jobs

00:00:49,980 --> 00:00:53,309
and so it just makes sense for us to be

00:00:51,930 --> 00:00:54,600
working together on this because I'm

00:00:53,309 --> 00:00:56,699
trying to make the way that Google does

00:00:54,600 --> 00:00:59,690
development available and Narwhal was

00:00:56,699 --> 00:01:04,470
trying to help enterprises do things

00:00:59,690 --> 00:01:07,229
sometimes the way Google does yeah

00:01:04,470 --> 00:01:08,820
okay so we'll spend a little bit of time

00:01:07,229 --> 00:01:10,170
I'm just gonna give an overview of Basel

00:01:08,820 --> 00:01:11,850
how many people have already know

00:01:10,170 --> 00:01:17,000
something about it and how many people

00:01:11,850 --> 00:01:19,439
have used it already okay very good so

00:01:17,000 --> 00:01:20,729
there are other talks which I'll

00:01:19,439 --> 00:01:22,439
reference but I'll just spend a little

00:01:20,729 --> 00:01:24,960
bit time on that and then we're actually

00:01:22,439 --> 00:01:26,250
going to like use our laptops and and

00:01:24,960 --> 00:01:27,090
run an app and we'll make some changes

00:01:26,250 --> 00:01:31,220
and we'll see what the development

00:01:27,090 --> 00:01:34,530
workflow looks like so for that part

00:01:31,220 --> 00:01:36,450
we're gonna use this repo and although

00:01:34,530 --> 00:01:38,610
I'm gonna talk for a while go ahead and

00:01:36,450 --> 00:01:40,740
like open this URL and and have this

00:01:38,610 --> 00:01:46,170
available for later so there's a readme

00:01:40,740 --> 00:01:47,520
here that has some instructions and

00:01:46,170 --> 00:01:50,520
there are a couple of ways that you can

00:01:47,520 --> 00:01:53,100
set this up so the first way is you

00:01:50,520 --> 00:01:55,590
could install basil locally on your Mac

00:01:53,100 --> 00:01:56,490
or Linux basil does work on Windows but

00:01:55,590 --> 00:01:58,820
some of the stuff we're going to show

00:01:56,490 --> 00:02:02,130
today doesn't yet work on Windows

00:01:58,820 --> 00:02:03,750
however this is probably they're

00:02:02,130 --> 00:02:06,090
probably too many people for us all to

00:02:03,750 --> 00:02:07,619
do this on the Wi-Fi because there are a

00:02:06,090 --> 00:02:09,390
couple hundred megabytes of toolchain

00:02:07,619 --> 00:02:13,500
that we're going to be using underneath

00:02:09,390 --> 00:02:15,270
since we're doing full stack so please

00:02:13,500 --> 00:02:16,680
you aware of that and if you're like

00:02:15,270 --> 00:02:18,000
it's still downloading after several

00:02:16,680 --> 00:02:19,590
minutes and it's really slow there's a

00:02:18,000 --> 00:02:23,700
better option

00:02:19,590 --> 00:02:25,590
thanks to rhyme calm and a friend of the

00:02:23,700 --> 00:02:26,910
angular team Minko get chef works at

00:02:25,590 --> 00:02:28,440
this company and this is this product he

00:02:26,910 --> 00:02:29,730
works on this is gonna this is going to

00:02:28,440 --> 00:02:31,920
give you a VM that you can just open in

00:02:29,730 --> 00:02:33,150
your browser and the VM is already has

00:02:31,920 --> 00:02:34,650
all of this stuff set up and ready to go

00:02:33,150 --> 00:02:37,500
so that's probably the most convenient

00:02:34,650 --> 00:02:39,450
thing to do however even more convenient

00:02:37,500 --> 00:02:41,010
than that is find somebody else who has

00:02:39,450 --> 00:02:44,100
something working like pair up with a

00:02:41,010 --> 00:02:45,209
buddy nearby and you'll probably be a

00:02:44,100 --> 00:02:47,040
learn from each other anyway

00:02:45,209 --> 00:02:48,560
and even easier than that is you can

00:02:47,040 --> 00:02:51,239
just watched or do the things upfront

00:02:48,560 --> 00:02:53,430
however there's a catch if you do if you

00:02:51,239 --> 00:02:57,090
choose option number four you can't have

00:02:53,430 --> 00:02:59,580
this shirt so the reason to do the setup

00:02:57,090 --> 00:03:00,959
is if you run basil you get a t-shirt at

00:02:59,580 --> 00:03:02,730
least at while supplies last so we have

00:03:00,959 --> 00:03:03,930
shirts up here at the end assuming that

00:03:02,730 --> 00:03:07,459
you've run basil we're gonna do honor

00:03:03,930 --> 00:03:09,510
system please come and get a shirt and

00:03:07,459 --> 00:03:14,340
there are a lot of women's shirts I'm

00:03:09,510 --> 00:03:15,450
being told by my lovely assistant so the

00:03:14,340 --> 00:03:17,070
next 10 minutes I'm going to be talking

00:03:15,450 --> 00:03:18,570
but you can you can go ahead and like

00:03:17,070 --> 00:03:19,680
you know use your laptop I know normally

00:03:18,570 --> 00:03:22,019
during a talk you would all close your

00:03:19,680 --> 00:03:23,010
laptops so go ahead and like you know go

00:03:22,019 --> 00:03:24,870
to this URL there's some instructions

00:03:23,010 --> 00:03:27,780
there so you should be able to go on to

00:03:24,870 --> 00:03:28,980
this onto the VM on R I'm calm and like

00:03:27,780 --> 00:03:32,640
you know you can just leave it sitting

00:03:28,980 --> 00:03:35,100
there so angular builds tools

00:03:32,640 --> 00:03:37,260
convergence the basic idea here is that

00:03:35,100 --> 00:03:38,610
I started working on the Google internal

00:03:37,260 --> 00:03:40,670
tool chain for building angular apps

00:03:38,610 --> 00:03:43,739
because I've done google internal

00:03:40,670 --> 00:03:45,030
tooling for quite a while and at the

00:03:43,739 --> 00:03:46,320
same time we were developing the tool

00:03:45,030 --> 00:03:49,049
chain for you to use an open-source land

00:03:46,320 --> 00:03:51,930
and they're not the same and it makes me

00:03:49,049 --> 00:03:54,540
sad because the stuff I'm working on you

00:03:51,930 --> 00:03:55,530
don't all get to use and we'd end up

00:03:54,540 --> 00:03:56,970
doing a lot of work twice and the

00:03:55,530 --> 00:03:57,989
angular team has a lot more support

00:03:56,970 --> 00:03:59,790
burden because there are so many

00:03:57,989 --> 00:04:01,829
different ways of doing things so what

00:03:59,790 --> 00:04:03,269
if we could make the bubbles overlap

00:04:01,829 --> 00:04:05,489
somewhat and they're never going to be

00:04:03,269 --> 00:04:07,200
the same but what if we could both move

00:04:05,489 --> 00:04:08,040
Google towards you so that the stuff

00:04:07,200 --> 00:04:09,780
that we've been working on is

00:04:08,040 --> 00:04:11,489
open-source and and works in your

00:04:09,780 --> 00:04:12,780
ecosystem and at the same time trying to

00:04:11,489 --> 00:04:16,739
bring some of the open source stuff into

00:04:12,780 --> 00:04:18,269
Google so that through a combination of

00:04:16,739 --> 00:04:20,489
those two things there is more overlap

00:04:18,269 --> 00:04:22,950
so we benefit and hopefully you benefit

00:04:20,489 --> 00:04:26,120
and then I and then I get happy so I

00:04:22,950 --> 00:04:26,120
like working on this stuff that's cool

00:04:26,160 --> 00:04:31,710
so generally the scope of the project is

00:04:28,610 --> 00:04:33,920
anything developer productivity related

00:04:31,710 --> 00:04:38,370
like we have a lot of developer tools

00:04:33,920 --> 00:04:41,280
for cool this is more stuff than I will

00:04:38,370 --> 00:04:42,240
get to in a lifetime probably I don't

00:04:41,280 --> 00:04:43,560
know maybe there's been a medical

00:04:42,240 --> 00:04:46,260
breakthrough

00:04:43,560 --> 00:04:47,760
so we're going to talk about this build

00:04:46,260 --> 00:04:50,070
tool which is just this bubble here and

00:04:47,760 --> 00:04:50,970
our build tool is called basil and so

00:04:50,070 --> 00:04:54,120
that's what we're gonna be using and

00:04:50,970 --> 00:04:55,950
that's what's on the shirts importantly

00:04:54,120 --> 00:04:58,160
that there are arrows that connect basil

00:04:55,950 --> 00:05:00,810
to other parts of the tool chain and so

00:04:58,160 --> 00:05:02,100
depending on how well this thing goes

00:05:00,810 --> 00:05:03,840
being an angular labs if it gets

00:05:02,100 --> 00:05:04,860
promoted more than we will probably will

00:05:03,840 --> 00:05:06,420
start working on some of those other

00:05:04,860 --> 00:05:08,310
arrows to give you some of the things

00:05:06,420 --> 00:05:11,250
that are that are that are related to it

00:05:08,310 --> 00:05:13,530
so we use basil at Google for every

00:05:11,250 --> 00:05:16,860
angular app we build we also now use it

00:05:13,530 --> 00:05:19,080
to build angular itself there are a lot

00:05:16,860 --> 00:05:20,580
of good things I think about Basil's so

00:05:19,080 --> 00:05:22,110
I'm if I had to give you three bullets

00:05:20,580 --> 00:05:24,780
which I didn't have to but I sounds like

00:05:22,110 --> 00:05:26,610
a good number number one it stays fast

00:05:24,780 --> 00:05:28,710
as you scale up both a large code base

00:05:26,610 --> 00:05:31,140
and a large number of developers you can

00:05:28,710 --> 00:05:33,480
customize it you can you know have your

00:05:31,140 --> 00:05:35,280
own your build a special without having

00:05:33,480 --> 00:05:37,200
a giant configuration explosion and it's

00:05:35,280 --> 00:05:41,010
full stack which we're gonna go dive

00:05:37,200 --> 00:05:42,330
into today so I'm basically is gonna

00:05:41,010 --> 00:05:44,730
reference other talks for these parts

00:05:42,330 --> 00:05:46,320
because we don't have time so working

00:05:44,730 --> 00:05:48,030
well at scale watch tirado's talk from

00:05:46,320 --> 00:05:49,830
angular connects last year he talked

00:05:48,030 --> 00:05:51,990
about incrementality and this very

00:05:49,830 --> 00:05:53,130
simple concept that like right now every

00:05:51,990 --> 00:05:55,020
time you do a build you're doing the

00:05:53,130 --> 00:05:57,120
whole build and you only changed one

00:05:55,020 --> 00:05:58,680
thing so that's that just seems

00:05:57,120 --> 00:05:59,550
obviously silly you should only rebuild

00:05:58,680 --> 00:06:01,080
it changed

00:05:59,550 --> 00:06:02,430
ideally it's fine-grained enough that

00:06:01,080 --> 00:06:03,600
like there's really only a tiny amount

00:06:02,430 --> 00:06:07,830
of work to do when you make a change to

00:06:03,600 --> 00:06:09,750
keep me get back up to date again um the

00:06:07,830 --> 00:06:12,720
other thing that silly is that you have

00:06:09,750 --> 00:06:16,500
like a computer and then you know does

00:06:12,720 --> 00:06:18,800
it have 125 terabytes of RAM Jeff that's

00:06:16,500 --> 00:06:18,800
your line

00:06:19,470 --> 00:06:24,660
yeah so what you really should do is its

00:06:22,380 --> 00:06:25,830
have a machines that you can bring up

00:06:24,660 --> 00:06:27,360
and so especially if you're doing an

00:06:25,830 --> 00:06:28,950
initial build you have a really big

00:06:27,360 --> 00:06:30,120
project and you know like we're gonna

00:06:28,950 --> 00:06:31,320
talk about today it has a front end and

00:06:30,120 --> 00:06:32,670
a back end there's a lot of stuff to

00:06:31,320 --> 00:06:34,050
build it takes a long time and people

00:06:32,670 --> 00:06:34,950
are like you know they have the xkcd

00:06:34,050 --> 00:06:36,390
cartoon in mind when they're

00:06:34,950 --> 00:06:37,470
sword-fighting on their office chairs

00:06:36,390 --> 00:06:40,860
because they're waiting for the compile

00:06:37,470 --> 00:06:42,240
so we rely heavily on obviously on the

00:06:40,860 --> 00:06:44,100
increment ality but also on being able

00:06:42,240 --> 00:06:45,660
to execute remotely and then getting

00:06:44,100 --> 00:06:47,760
cash hits from the remote execution so

00:06:45,660 --> 00:06:49,230
if the if your CI has already built a

00:06:47,760 --> 00:06:50,610
head and then you come along later in

00:06:49,230 --> 00:06:51,900
the day and you want to do a build ahead

00:06:50,610 --> 00:06:53,100
you just be able to download the

00:06:51,900 --> 00:06:56,760
artifact so you shouldn't have to redo

00:06:53,100 --> 00:06:58,920
the build I'm not really gonna talk

00:06:56,760 --> 00:07:00,840
about customization because Greg my

00:06:58,920 --> 00:07:02,610
coworker on the ABC team is going to

00:07:00,840 --> 00:07:05,010
give this talk at 5:30 so if you all

00:07:02,610 --> 00:07:08,030
have the stamina to make it that long

00:07:05,010 --> 00:07:09,930
definitely check this out basic idea is

00:07:08,030 --> 00:07:11,610
today you have kind of the choice

00:07:09,930 --> 00:07:13,020
between angular CLI does it all for you

00:07:11,610 --> 00:07:14,670
but it does it only one way or if you

00:07:13,020 --> 00:07:15,900
want to do it your own way you have you

00:07:14,670 --> 00:07:17,640
know you're handed all of the

00:07:15,900 --> 00:07:20,310
configuration files and you've you no

00:07:17,640 --> 00:07:22,020
longer have the CLI experience so we're

00:07:20,310 --> 00:07:23,940
we think that basil can be part of

00:07:22,020 --> 00:07:25,950
fixing that and making it possible to

00:07:23,940 --> 00:07:28,950
have a customized build without all that

00:07:25,950 --> 00:07:31,530
configuration so check out his talk and

00:07:28,950 --> 00:07:32,880
now we can get to today which is what's

00:07:31,530 --> 00:07:35,490
good about doing full stack development

00:07:32,880 --> 00:07:37,110
with basil so first of all how many

00:07:35,490 --> 00:07:39,540
people work both on front-end and

00:07:37,110 --> 00:07:41,070
back-end stuff okay cool so this is the

00:07:39,540 --> 00:07:41,460
right audience wait wait wait don't put

00:07:41,070 --> 00:07:43,740
your hands down

00:07:41,460 --> 00:07:47,070
okay so now if the if the backend system

00:07:43,740 --> 00:07:50,850
you work on is not on this list then put

00:07:47,070 --> 00:07:52,200
your hand down okay cool so these are

00:07:50,850 --> 00:07:53,730
the people who could potentially be

00:07:52,200 --> 00:07:55,470
making use of basil because your

00:07:53,730 --> 00:07:58,919
back-end is here and your front-end now

00:07:55,470 --> 00:08:01,800
builds with basil also and so there's

00:07:58,919 --> 00:08:03,450
they're they're basically let me give

00:08:01,800 --> 00:08:06,390
you four things to think about like why

00:08:03,450 --> 00:08:07,590
you want to do this number one today

00:08:06,390 --> 00:08:08,970
you're probably using two different

00:08:07,590 --> 00:08:11,280
build systems if you do front-end and

00:08:08,970 --> 00:08:14,100
back-end work and that's super annoying

00:08:11,280 --> 00:08:15,630
it's a big context switch build systems

00:08:14,100 --> 00:08:16,650
tend to be kind of leaky abstraction so

00:08:15,630 --> 00:08:18,360
you kind of have to understand how they

00:08:16,650 --> 00:08:19,650
work somewhat you're like oh I have to

00:08:18,360 --> 00:08:22,830
rebuild this thing before I rebuild that

00:08:19,650 --> 00:08:24,840
thing so it's really handy to be able to

00:08:22,830 --> 00:08:26,730
use the same configuration file format

00:08:24,840 --> 00:08:29,880
to make all of your different pieces of

00:08:26,730 --> 00:08:32,100
the build work the other thing that is

00:08:29,880 --> 00:08:33,630
very common

00:08:32,100 --> 00:08:35,490
especially in enterprises is that you'll

00:08:33,630 --> 00:08:37,080
kind of accidentally acquire a lot of

00:08:35,490 --> 00:08:38,789
different technologies in your stack so

00:08:37,080 --> 00:08:39,870
somebody wrote like some Ruby wrapper

00:08:38,789 --> 00:08:41,669
around something and you ended up

00:08:39,870 --> 00:08:42,900
relying on it and you would rewrite it

00:08:41,669 --> 00:08:44,250
in your other back-end language but

00:08:42,900 --> 00:08:46,920
nobody has time so you end up with kind

00:08:44,250 --> 00:08:49,560
of a lot of different a lot of different

00:08:46,920 --> 00:08:51,000
pieces and that diversity makes it hard

00:08:49,560 --> 00:08:52,650
for you as a developer to interact with

00:08:51,000 --> 00:08:54,030
the build tools and so now you just like

00:08:52,650 --> 00:08:56,730
it's always just basil build something

00:08:54,030 --> 00:08:57,690
regardless of what it's written in the

00:08:56,730 --> 00:08:59,040
next one is that you wanna be able to

00:08:57,690 --> 00:09:01,170
write tests and you want to be able to

00:08:59,040 --> 00:09:02,820
make a change and run all of the tests

00:09:01,170 --> 00:09:03,930
and those tests should include I made a

00:09:02,820 --> 00:09:06,390
change to the backend and it broke the

00:09:03,930 --> 00:09:08,190
front-end and so it's really nice to be

00:09:06,390 --> 00:09:09,540
able to write one test that says my

00:09:08,190 --> 00:09:10,770
integration test and it brings up the

00:09:09,540 --> 00:09:11,730
front end the back end and it makes sure

00:09:10,770 --> 00:09:14,190
they work and they're both built from

00:09:11,730 --> 00:09:15,210
head and there's like and and you know

00:09:14,190 --> 00:09:17,790
that you're getting the same thing on

00:09:15,210 --> 00:09:20,220
see I also and the fourth thing which

00:09:17,790 --> 00:09:23,130
we're going to definitely experience

00:09:20,220 --> 00:09:25,110
today is that you get the benefits of

00:09:23,130 --> 00:09:26,070
type checking and like you know

00:09:25,110 --> 00:09:28,920
generally the things of the build system

00:09:26,070 --> 00:09:30,240
does across the boundary of the front

00:09:28,920 --> 00:09:32,010
end and the back end so like you know

00:09:30,240 --> 00:09:33,150
that you make a change here and it still

00:09:32,010 --> 00:09:34,980
works there but you also as you're

00:09:33,150 --> 00:09:36,690
typing you can you can say oh yeah this

00:09:34,980 --> 00:09:37,710
is the thing that my data that this is

00:09:36,690 --> 00:09:39,540
what they're I'm gonna get back from the

00:09:37,710 --> 00:09:41,490
server when I make this when I make this

00:09:39,540 --> 00:09:47,040
API call and so I can I know what I'm

00:09:41,490 --> 00:09:48,390
making the right thing here cool so now

00:09:47,040 --> 00:09:50,390
I'm going to switch gears a little bit

00:09:48,390 --> 00:09:52,950
and and just talk about two specific

00:09:50,390 --> 00:09:54,810
file formats because we're gonna

00:09:52,950 --> 00:09:57,300
encounter those once you start doing

00:09:54,810 --> 00:09:58,650
some coding the first one is this build

00:09:57,300 --> 00:10:01,770
that basil file and this is the

00:09:58,650 --> 00:10:03,840
configuration that basil needs to know

00:10:01,770 --> 00:10:05,940
what to do the thing that you put in

00:10:03,840 --> 00:10:07,470
this configuration file so like I said

00:10:05,940 --> 00:10:09,210
this we're gonna you can see in the repo

00:10:07,470 --> 00:10:10,770
but that we pointed you to already

00:10:09,210 --> 00:10:12,080
there's like there's a Java server that

00:10:10,770 --> 00:10:14,580
has a build file there's a angular

00:10:12,080 --> 00:10:16,050
project has a build file so it's the

00:10:14,580 --> 00:10:17,640
same thing everywhere and then what they

00:10:16,050 --> 00:10:19,050
do is they describe your inputs and what

00:10:17,640 --> 00:10:20,250
your dependencies are and dependencies

00:10:19,050 --> 00:10:23,130
are kind of another form of inputs and

00:10:20,250 --> 00:10:24,120
that's it they don't say what to do you

00:10:23,130 --> 00:10:25,920
just know there's nothing in there that

00:10:24,120 --> 00:10:27,240
says what order to do things in that's

00:10:25,920 --> 00:10:28,860
all Basil's job to figure out when it

00:10:27,240 --> 00:10:30,210
sees these files it constructs a partial

00:10:28,860 --> 00:10:31,260
ordering constraint and then it makes a

00:10:30,210 --> 00:10:33,120
graph and then it figures out which

00:10:31,260 --> 00:10:35,280
things need to be rerun it makes another

00:10:33,120 --> 00:10:37,260
graph of actions is going to rerun you

00:10:35,280 --> 00:10:38,880
don't need to know any of that stuff and

00:10:37,260 --> 00:10:40,140
there's gonna be more more detail about

00:10:38,880 --> 00:10:42,990
how these build files interact with each

00:10:40,140 --> 00:10:44,950
other again in great talk later so I'm

00:10:42,990 --> 00:10:47,590
just gonna show this one example so

00:10:44,950 --> 00:10:49,270
is called ng module we use this to build

00:10:47,590 --> 00:10:51,040
angular itself and you also use it to

00:10:49,270 --> 00:10:52,540
build angular libraries we also use this

00:10:51,040 --> 00:10:53,920
internally at Google this is exactly the

00:10:52,540 --> 00:10:56,200
same code that every Googler runs to

00:10:53,920 --> 00:10:59,530
build angular code and it's just a

00:10:56,200 --> 00:11:02,230
wrapper around the NGC Command tool this

00:10:59,530 --> 00:11:03,880
is all-aware so it just it just adapts

00:11:02,230 --> 00:11:05,820
the two and I'll quickly run through the

00:11:03,880 --> 00:11:07,900
call it the the semantics of this file

00:11:05,820 --> 00:11:09,820
the first line is calling this function

00:11:07,900 --> 00:11:11,260
called ng module when you call it and

00:11:09,820 --> 00:11:12,940
that's called a rule which is just a

00:11:11,260 --> 00:11:15,850
word for a plug-in in basil so we have

00:11:12,940 --> 00:11:16,930
this plugin that we wrote and then by

00:11:15,850 --> 00:11:19,120
calling this we're gonna generate a

00:11:16,930 --> 00:11:20,650
target called app and you've probably if

00:11:19,120 --> 00:11:21,760
you've used like gulp or grunt you

00:11:20,650 --> 00:11:23,050
you're familiar with this notion of a

00:11:21,760 --> 00:11:24,160
target is something you can type and

00:11:23,050 --> 00:11:26,650
like I want to build this thing

00:11:24,160 --> 00:11:28,570
so under basil every single root every

00:11:26,650 --> 00:11:29,980
every one of these little chunks of a

00:11:28,570 --> 00:11:31,360
configuration is individually

00:11:29,980 --> 00:11:33,540
addressable and you can build it or test

00:11:31,360 --> 00:11:36,430
it or run it or whatever you want to do

00:11:33,540 --> 00:11:38,590
so these are the obviously we have to

00:11:36,430 --> 00:11:40,870
hand some typescript sources to NGC the

00:11:38,590 --> 00:11:43,720
angular compiler and we hand it the

00:11:40,870 --> 00:11:45,130
templates and the styles and then

00:11:43,720 --> 00:11:46,810
importantly these depths at the bottom

00:11:45,130 --> 00:11:49,120
are things that it depends on and you'll

00:11:46,810 --> 00:11:51,430
see in a little bit the first one of

00:11:49,120 --> 00:11:53,440
these depths is our is our car TS proto

00:11:51,430 --> 00:11:54,910
which comes from libs api this is the

00:11:53,440 --> 00:11:56,770
api definition that the server and the

00:11:54,910 --> 00:11:58,750
client share so we clearly depend on

00:11:56,770 --> 00:12:01,540
that and then also interesting we depend

00:11:58,750 --> 00:12:03,880
on rxjs but since rxjs publishes basil

00:12:01,540 --> 00:12:05,410
build files in their source distribution

00:12:03,880 --> 00:12:06,910
we can compile it from head so we're

00:12:05,410 --> 00:12:09,100
actually in the compiled rxjs we're not

00:12:06,910 --> 00:12:10,960
going to use their node package because

00:12:09,100 --> 00:12:12,820
it's like more other pieces can start to

00:12:10,960 --> 00:12:13,840
fall inside the ecosystem you know maybe

00:12:12,820 --> 00:12:17,760
in 20 years everything will be basil

00:12:13,840 --> 00:12:19,840
probably not I don't have that much time

00:12:17,760 --> 00:12:22,390
the other thing we're gonna use today is

00:12:19,840 --> 00:12:23,800
protocol buffers so you don't have to

00:12:22,390 --> 00:12:25,630
use protocol buffers we could be using

00:12:23,800 --> 00:12:27,310
like swagger or some other API

00:12:25,630 --> 00:12:29,560
definition this happens to be something

00:12:27,310 --> 00:12:31,630
we use a lot of Google and we use this

00:12:29,560 --> 00:12:33,100
for all of our wire format and it's very

00:12:31,630 --> 00:12:34,450
cross language and it has really good

00:12:33,100 --> 00:12:36,670
characteristics of forwards and

00:12:34,450 --> 00:12:38,920
backwards compatibility and really small

00:12:36,670 --> 00:12:41,050
size on the wire and so it's basically

00:12:38,920 --> 00:12:42,220
you know most Google engineers we joke

00:12:41,050 --> 00:12:43,750
spend about 80% of their time

00:12:42,220 --> 00:12:46,090
marshalling and under marshalling

00:12:43,750 --> 00:12:48,460
protocol buffers and then like panting

00:12:46,090 --> 00:12:49,690
the fields from one to another so this

00:12:48,460 --> 00:12:52,330
is an example of what it looks like this

00:12:49,690 --> 00:12:53,830
is our car definition pretty simple like

00:12:52,330 --> 00:12:55,360
there's just not much text here this is

00:12:53,830 --> 00:12:57,790
actually a protocol buffer definition

00:12:55,360 --> 00:12:59,680
that you're going to be working on

00:12:57,790 --> 00:13:01,630
so I'm gonna hand the tour now to talk

00:12:59,680 --> 00:13:05,280
specifically about the part of this that

00:13:01,630 --> 00:13:07,630
Narwhal contributes okay thanks Alex

00:13:05,280 --> 00:13:13,120
before we start how many of you already

00:13:07,630 --> 00:13:14,350
know an ex quite a few people in case

00:13:13,120 --> 00:13:16,420
you're not familiar with NX it's

00:13:14,350 --> 00:13:19,990
essentially a set of extensions on top

00:13:16,420 --> 00:13:22,000
of the angular CLI and the goal of NX is

00:13:19,990 --> 00:13:25,840
to be helpful but if you're creating a

00:13:22,000 --> 00:13:28,360
large enterprise application and it

00:13:25,840 --> 00:13:30,700
turns out that baseball fits nicely into

00:13:28,360 --> 00:13:35,770
this picture we've added some early

00:13:30,700 --> 00:13:38,290
support into NX to create kind of basal

00:13:35,770 --> 00:13:40,920
ready workspaces so if you're familiar

00:13:38,290 --> 00:13:43,960
with NX you might know this command

00:13:40,920 --> 00:13:45,160
create NX workspace and the only thing

00:13:43,960 --> 00:13:48,040
that's different from the default

00:13:45,160 --> 00:13:51,190
command is that we have this - - basil

00:13:48,040 --> 00:13:53,380
flag on the end and if you run this

00:13:51,190 --> 00:13:56,800
command you get a basil enabled

00:13:53,380 --> 00:14:00,790
workspace and Dan wrote a great blog

00:13:56,800 --> 00:14:03,580
post that we've linked to here with more

00:14:00,790 --> 00:14:07,510
examples of how to set up an NX

00:14:03,580 --> 00:14:09,940
workspace from scratch it's a little bit

00:14:07,510 --> 00:14:11,350
about today's coding exercise we want

00:14:09,940 --> 00:14:14,800
this would be kind of like a hand sewing

00:14:11,350 --> 00:14:17,860
experience so we've created a a repo

00:14:14,800 --> 00:14:20,200
that Alex shared with an NX basil

00:14:17,860 --> 00:14:24,130
workspace it's a relatively simple app

00:14:20,200 --> 00:14:26,110
it's a solicit of luxury cars but it has

00:14:24,130 --> 00:14:28,750
an angular front end and a Java back-end

00:14:26,110 --> 00:14:31,000
and as Alex mentioned we're using the

00:14:28,750 --> 00:14:34,090
the protocol buffers which is

00:14:31,000 --> 00:14:35,290
essentially how we share type inks

00:14:34,090 --> 00:14:40,330
between the backend and the front-end

00:14:35,290 --> 00:14:42,480
and as Alex pointed out the disclaimer

00:14:40,330 --> 00:14:44,860
is that this is prototype quality code

00:14:42,480 --> 00:14:47,350
you please play with it and give us

00:14:44,860 --> 00:14:50,530
feedback but don't jump into production

00:14:47,350 --> 00:14:52,120
just yet did any of you notice dan and I

00:14:50,530 --> 00:14:53,860
last night we're like trying to fix this

00:14:52,120 --> 00:14:55,720
in the in the lobby yeah that's

00:14:53,860 --> 00:14:56,980
definitely prototype yeah it didn't end

00:14:55,720 --> 00:14:59,710
there we actually worked till the

00:14:56,980 --> 00:15:01,510
morning right not only well not all

00:14:59,710 --> 00:15:03,070
night but we we still have work to do in

00:15:01,510 --> 00:15:06,880
the morning

00:15:03,070 --> 00:15:09,100
so okay and like I said we want this to

00:15:06,880 --> 00:15:11,529
be kind of hands-on and so we were lucky

00:15:09,100 --> 00:15:13,570
to have some basil experts here to kind

00:15:11,529 --> 00:15:16,029
of help you out if you get stuck we have

00:15:13,570 --> 00:15:20,050
Dan and we have Greg they're you know

00:15:16,029 --> 00:15:23,230
really they have been instrumental to

00:15:20,050 --> 00:15:25,170
this whole basil angular process so they

00:15:23,230 --> 00:15:30,660
will be health but be more than helpful

00:15:25,170 --> 00:15:33,490
so thanks to Dan and Greg and okay so

00:15:30,660 --> 00:15:36,430
did everyone kind of start the process

00:15:33,490 --> 00:15:39,459
of installing and pulling down the repo

00:15:36,430 --> 00:15:42,610
or or just use the or click through this

00:15:39,459 --> 00:15:44,230
I'll sign into the VM yeah it was it

00:15:42,610 --> 00:15:50,800
clear where the instructions clear

00:15:44,230 --> 00:15:55,269
like come on having issues what's that

00:15:50,800 --> 00:15:57,040
oh oh you're still MPM strolling okay

00:15:55,269 --> 00:16:01,480
yeah so maybe it's better to try the VM

00:15:57,040 --> 00:16:05,199
that rhyme and Minko provided you can

00:16:01,480 --> 00:16:06,610
try that because the first milestone is

00:16:05,199 --> 00:16:08,860
really just get the app up and running

00:16:06,610 --> 00:16:11,290
and when you have all the ins

00:16:08,860 --> 00:16:14,079
dependencies installed you'll run npm

00:16:11,290 --> 00:16:20,829
run start and and navigate in a browser

00:16:14,079 --> 00:16:22,589
to localhost 5432 and we'll give folks a

00:16:20,829 --> 00:16:25,589
couple of minutes to get up to that

00:16:22,589 --> 00:16:25,589
stage

00:16:31,640 --> 00:16:35,520
well yeah it's downloading stuff well

00:16:34,350 --> 00:16:37,470
that's Delphic running for the first

00:16:35,520 --> 00:16:39,570
time that's why that is a slow process

00:16:37,470 --> 00:16:40,980
the first time but you'll notice once

00:16:39,570 --> 00:16:43,080
it's up and running if you kill it and

00:16:40,980 --> 00:16:46,440
restart it you won't be they won't be as

00:16:43,080 --> 00:16:50,610
slow so you'll be kind of hurt by the

00:16:46,440 --> 00:16:53,280
network slowness there yeah like on the

00:16:50,610 --> 00:16:55,680
VM we already ran it for you so you kind

00:16:53,280 --> 00:17:01,680
of one step closer to having it up and

00:16:55,680 --> 00:17:03,960
running what's that oh I said you're

00:17:01,680 --> 00:17:06,570
spinning saying connecting okay is

00:17:03,960 --> 00:17:08,670
anyone else able to connect some some

00:17:06,570 --> 00:17:10,170
people are on okay okay

00:17:08,670 --> 00:17:12,089
like I said earlier if your if your

00:17:10,170 --> 00:17:13,500
thing is having trouble and one of your

00:17:12,089 --> 00:17:15,870
neighbors is working that's that still

00:17:13,500 --> 00:17:18,420
counts yeah that might be the best thing

00:17:15,870 --> 00:17:20,760
but and you can try this at home when

00:17:18,420 --> 00:17:22,170
you're on a faster network hopefully the

00:17:20,760 --> 00:17:27,300
instructions are clear enough to where

00:17:22,170 --> 00:17:28,980
you can give it a shot at home let me

00:17:27,300 --> 00:17:30,240
point out another thing so what you so

00:17:28,980 --> 00:17:31,860
assuming that you're your dev server is

00:17:30,240 --> 00:17:34,020
running you probably see a lot of ugly

00:17:31,860 --> 00:17:35,400
looking output on the terminal so what

00:17:34,020 --> 00:17:37,410
we're trying to do is in a single

00:17:35,400 --> 00:17:39,260
command run to different servers write

00:17:37,410 --> 00:17:41,910
the Java server and the front-end server

00:17:39,260 --> 00:17:43,560
typically I see people do this in two

00:17:41,910 --> 00:17:44,970
different terminals so that you have

00:17:43,560 --> 00:17:46,650
separate output from the two things and

00:17:44,970 --> 00:17:47,970
they don't collide with each other we

00:17:46,650 --> 00:17:49,710
just wanted to make the make this

00:17:47,970 --> 00:17:51,150
workshop a little bit simpler so we're

00:17:49,710 --> 00:17:52,980
using concurrently which is an NPM

00:17:51,150 --> 00:17:54,870
package to just run the two processes at

00:17:52,980 --> 00:17:55,860
the same time but what happens is basil

00:17:54,870 --> 00:17:57,690
is actually a client-server architecture

00:17:55,860 --> 00:17:59,430
and so the two processes are kind of

00:17:57,690 --> 00:18:00,540
like fighting over this lock and so

00:17:59,430 --> 00:18:01,590
you'll see a bunch of output with them

00:18:00,540 --> 00:18:05,100
each one of them is like oh the other

00:18:01,590 --> 00:18:07,410
guys doing something now and yeah trying

00:18:05,100 --> 00:18:09,450
to be put off by by how rough it is just

00:18:07,410 --> 00:18:11,190
imagine how great it will be and this is

00:18:09,450 --> 00:18:14,670
what you will see once it's up and

00:18:11,190 --> 00:18:16,530
running a very simple application list

00:18:14,670 --> 00:18:19,800
of I guess we use the term luxury cars

00:18:16,530 --> 00:18:21,750
loosely here we have Honda Civic of 2008

00:18:19,800 --> 00:18:24,330
but it's gonna be part of your task to

00:18:21,750 --> 00:18:25,950
change that yeah exactly you should fix

00:18:24,330 --> 00:18:27,690
the fix whichever car sir you don't feel

00:18:25,950 --> 00:18:29,670
like your luxury cars you can you'll be

00:18:27,690 --> 00:18:32,220
up to you to fix that and but the

00:18:29,670 --> 00:18:36,420
important part is that the list of cars

00:18:32,220 --> 00:18:38,960
is actually returned from a Java API in

00:18:36,420 --> 00:18:38,960
format JSON

00:18:41,160 --> 00:18:48,090
that's it oh yeah sorry

00:18:48,270 --> 00:18:56,830
where was that slide again okay so it

00:18:55,060 --> 00:18:58,450
sits at the bottom of this one yeah then

00:18:56,830 --> 00:19:02,280
read me and that repo should have the

00:18:58,450 --> 00:19:02,280
up-to-date instructions

00:19:43,159 --> 00:19:46,159
yeah

00:19:58,580 --> 00:20:04,770
how many we're able to get the VM up and

00:20:01,230 --> 00:20:06,420
running okay so quite a few so I think

00:20:04,770 --> 00:20:08,810
at this point if you can't get it to

00:20:06,420 --> 00:20:08,810
work maybe

00:20:08,990 --> 00:20:20,010
join a neighbor or friend and has to be

00:20:15,300 --> 00:20:21,150
at least about six so well okay so the

00:20:20,010 --> 00:20:22,560
question from the audience is what

00:20:21,150 --> 00:20:24,500
version of Noda we're using so actually

00:20:22,560 --> 00:20:27,060
one of the advantages of Basel is that

00:20:24,500 --> 00:20:28,800
as much as possible Basil's in charge of

00:20:27,060 --> 00:20:29,850
installing all of the tool chains and if

00:20:28,800 --> 00:20:31,350
you're a full-stack developer and you

00:20:29,850 --> 00:20:33,300
started from back end you don't know

00:20:31,350 --> 00:20:35,250
what node and then VM and NPM and yarn

00:20:33,300 --> 00:20:36,510
and they don't know which one to use so

00:20:35,250 --> 00:20:38,040
one of the one of the advantages here is

00:20:36,510 --> 00:20:39,120
that you should not even need those

00:20:38,040 --> 00:20:41,340
things installed on your machine you

00:20:39,120 --> 00:20:42,390
just need basil we're still working

00:20:41,340 --> 00:20:43,560
through a couple of bugs where it does

00:20:42,390 --> 00:20:45,900
leak through and try to find the local

00:20:43,560 --> 00:20:47,460
install of yarn but that's that's

00:20:45,900 --> 00:20:49,080
basically the idea so it you don't you

00:20:47,460 --> 00:20:50,940
don't need to know which version of know

00:20:49,080 --> 00:20:52,470
it is involved and for this demo we're

00:20:50,940 --> 00:20:53,610
telling you to do NPM run something so

00:20:52,470 --> 00:20:54,950
that clearly is using the one on the

00:20:53,610 --> 00:20:57,180
machine

00:20:54,950 --> 00:20:59,340
there are obviously trade-offs about

00:20:57,180 --> 00:21:01,820
which tool chain to expose and what

00:20:59,340 --> 00:21:01,820
people are used to

00:21:07,220 --> 00:21:11,040
and if you if you if you're bored by the

00:21:09,510 --> 00:21:14,220
way we put these boxes at the bottom

00:21:11,040 --> 00:21:15,570
with like an extra challenge so you know

00:21:14,220 --> 00:21:18,890
you can try to run the basel command

00:21:15,570 --> 00:21:18,890
that just builds one of the things

00:21:23,270 --> 00:21:29,730
alright shall we move on to the next one

00:21:26,040 --> 00:21:33,380
or do we give people a 5 minutes we have

00:21:29,730 --> 00:21:33,380
another question for an audience member

00:21:34,970 --> 00:21:46,170
so where do you have oh okay yes so I I

00:21:40,950 --> 00:21:47,540
basil is the watch mode for basil if

00:21:46,170 --> 00:21:50,430
using the vm it should just be there

00:21:47,540 --> 00:21:53,100
yeah it should be in package.json for

00:21:50,430 --> 00:21:54,660
the NX oh so there there is a warning

00:21:53,100 --> 00:21:56,160
which is my fault that when you run this

00:21:54,660 --> 00:21:57,570
thing it says it looks like I basil

00:21:56,160 --> 00:21:58,680
wasn't installed locally but it is

00:21:57,570 --> 00:22:05,820
installed locally it's looking in the

00:21:58,680 --> 00:22:07,590
wrong place given more time we would

00:22:05,820 --> 00:22:09,980
have polished up the UI for this a

00:22:07,590 --> 00:22:09,980
little bit more

00:22:19,010 --> 00:22:31,580
okay okay shall we move on or okay and

00:22:29,020 --> 00:22:34,640
you can just come to the normal booth

00:22:31,580 --> 00:22:36,980
tomorrow or or maybe later tonight then

00:22:34,640 --> 00:22:41,240
we can if you have questions we can try

00:22:36,980 --> 00:22:43,160
to sort things out okay so the the next

00:22:41,240 --> 00:22:47,390
milestone is we want to make a modest

00:22:43,160 --> 00:22:50,090
update to the to the template one of the

00:22:47,390 --> 00:22:51,530
templates just to see that the rebuild

00:22:50,090 --> 00:22:54,500
will be triggered by Basel and you'll

00:22:51,530 --> 00:22:58,610
see the change in the browser so just go

00:22:54,500 --> 00:23:01,480
to app component HTML and change the h1

00:22:58,610 --> 00:23:01,480
tags or something else

00:23:08,760 --> 00:23:12,669
we didn't mention by the way I'm not

00:23:10,900 --> 00:23:13,990
sure if when the VM came up if Visual

00:23:12,669 --> 00:23:16,809
Studio code was already there but it is

00:23:13,990 --> 00:23:19,240
installed so you can click the little

00:23:16,809 --> 00:23:22,090
icon in the upper left to get the like

00:23:19,240 --> 00:23:23,820
the all the packages or if you're on the

00:23:22,090 --> 00:23:26,169
command line you can do code space dot

00:23:23,820 --> 00:23:27,340
don't try to like edit from the command

00:23:26,169 --> 00:23:32,559
line it would probably suck so yeah

00:23:27,340 --> 00:23:34,150
Visual Studio code is on this machine so

00:23:32,559 --> 00:23:35,890
what you should see is as soon as you

00:23:34,150 --> 00:23:39,700
hit save it's your trigger a build and

00:23:35,890 --> 00:23:42,580
you should see an updated UI based on

00:23:39,700 --> 00:23:45,010
whatever change you made so just make it

00:23:42,580 --> 00:23:47,049
trivial change just to see that your

00:23:45,010 --> 00:23:55,539
system is actually responding to and

00:23:47,049 --> 00:23:56,950
watching the files appropriately this is

00:23:55,539 --> 00:24:00,730
the step by the way that no matter how

00:23:56,950 --> 00:24:01,960
big your app is we the the objective of

00:24:00,730 --> 00:24:03,850
this project is that it should never be

00:24:01,960 --> 00:24:05,890
longer than two seconds to see your

00:24:03,850 --> 00:24:08,260
change show up in the browser so the V

00:24:05,890 --> 00:24:09,730
Emily we're on is slow and we still have

00:24:08,260 --> 00:24:11,470
some more work to do on performance but

00:24:09,730 --> 00:24:13,000
one of the things that greg has worked

00:24:11,470 --> 00:24:14,020
on is a benchmarking suite so we can

00:24:13,000 --> 00:24:17,169
actually keep track of what the

00:24:14,020 --> 00:24:19,179
development round-trip time is and so

00:24:17,169 --> 00:24:21,820
that's what you should expect if it's

00:24:19,179 --> 00:24:24,120
not happening today then have a free

00:24:21,820 --> 00:24:24,120
t-shirt

00:24:36,090 --> 00:24:40,620
sorry localhost 5432

00:24:45,940 --> 00:24:52,370
yeah here's the URL 5432 you want to do

00:24:50,270 --> 00:24:54,620
another like demo of changing oh yeah

00:24:52,370 --> 00:24:56,360
sources yeah for anybody whose thing is

00:24:54,620 --> 00:25:00,020
not working you can you can just see it

00:24:56,360 --> 00:25:03,040
up here on the screen yeah okay sure so

00:25:00,020 --> 00:25:07,580
essentially I just updated that text and

00:25:03,040 --> 00:25:09,530
then you can see we triggered it's

00:25:07,580 --> 00:25:16,660
compiling only that changed module not

00:25:09,530 --> 00:25:16,660
everything else and then there you go

00:25:17,410 --> 00:25:22,250
and if you finish early you can

00:25:20,510 --> 00:25:26,030
experiment with changing other files

00:25:22,250 --> 00:25:30,680
like the TS file like is they watch it

00:25:26,030 --> 00:25:33,820
and rebuild those as well there's a lot

00:25:30,680 --> 00:25:38,000
of code in that repo for you to modify

00:25:33,820 --> 00:25:44,090
so what's anyone able to get this to

00:25:38,000 --> 00:25:49,720
work cool oh that's good and most of you

00:25:44,090 --> 00:25:49,720
are on the VM or worked thanks Minko

00:25:51,310 --> 00:25:54,460
yes please

00:26:03,440 --> 00:26:08,059
you mean for production serving right

00:26:11,490 --> 00:26:15,790
do you mean for production deployment

00:26:13,810 --> 00:26:18,280
right so the question the question is

00:26:15,790 --> 00:26:19,660
like like how does this relate to the

00:26:18,280 --> 00:26:20,800
way your users would interact with your

00:26:19,660 --> 00:26:22,420
site basically like how would you get

00:26:20,800 --> 00:26:25,060
this code out there so what we're

00:26:22,420 --> 00:26:26,860
showing you here is a dev server and

00:26:25,060 --> 00:26:28,960
it's actually written in go but you

00:26:26,860 --> 00:26:30,280
didn't notice the go tool train was

00:26:28,960 --> 00:26:31,360
automatically downloaded by basil

00:26:30,280 --> 00:26:32,530
the reason it's written and go is that

00:26:31,360 --> 00:26:33,970
we've done a bunch of like micro

00:26:32,530 --> 00:26:35,800
optimizations so that the dev server can

00:26:33,970 --> 00:26:37,060
reload even ten thousand files in like

00:26:35,800 --> 00:26:40,270
two hundred milliseconds because we have

00:26:37,060 --> 00:26:41,470
a lot of Google Apps that do that so the

00:26:40,270 --> 00:26:42,310
dev server you're using is completely

00:26:41,470 --> 00:26:43,270
different from what you would do in

00:26:42,310 --> 00:26:44,680
production at least as far as the

00:26:43,270 --> 00:26:46,210
serving architecture right this is using

00:26:44,680 --> 00:26:48,250
äôt so it's the same JavaScript code you

00:26:46,210 --> 00:26:50,380
would serve to your users if you're

00:26:48,250 --> 00:26:51,700
gonna productionize this number one

00:26:50,380 --> 00:26:54,340
there's a Basel rule in this repository

00:26:51,700 --> 00:26:55,900
which is the prod server and and instead

00:26:54,340 --> 00:26:59,410
of the instead of this server it runs I

00:26:55,900 --> 00:27:01,360
think HTTP server or history server it

00:26:59,410 --> 00:27:03,790
runs like one of your standard node like

00:27:01,360 --> 00:27:06,760
backends but you could also serve it

00:27:03,790 --> 00:27:07,720
from anything under Basel and then of

00:27:06,760 --> 00:27:09,070
course they would you would do a

00:27:07,720 --> 00:27:10,510
packaging step when it's time to release

00:27:09,070 --> 00:27:12,310
basil would not be at all related to

00:27:10,510 --> 00:27:13,510
what you're hosting on cloud unless you

00:27:12,310 --> 00:27:14,650
had a cloud provider that had some sort

00:27:13,510 --> 00:27:17,020
of continuous integration continuous

00:27:14,650 --> 00:27:18,070
delivery built in so typically what we

00:27:17,020 --> 00:27:19,090
do on the angular team for example is

00:27:18,070 --> 00:27:21,850
when it's time to do a release we just

00:27:19,090 --> 00:27:23,320
say basil build basically we give it a

00:27:21,850 --> 00:27:24,850
pattern that it expands to all of our

00:27:23,320 --> 00:27:26,440
NPM packages and it builds all of our

00:27:24,850 --> 00:27:29,230
NPM packages and then we actually do

00:27:26,440 --> 00:27:31,720
basil run like core and PM package

00:27:29,230 --> 00:27:34,690
publish and then that's what sends it

00:27:31,720 --> 00:27:36,370
out to be live so we just do a basil run

00:27:34,690 --> 00:27:37,660
command that's a publish and you could

00:27:36,370 --> 00:27:41,370
do the same thing to publish it to your

00:27:37,660 --> 00:27:41,370
whatever you use for production hosting

00:27:46,129 --> 00:27:49,129
okay

00:27:50,150 --> 00:27:57,050
are we good with this ready to move on

00:27:59,590 --> 00:28:07,539
right so the next so like you said the

00:28:05,710 --> 00:28:09,519
the car selection is less than

00:28:07,539 --> 00:28:13,090
impressive so what we want you to do

00:28:09,519 --> 00:28:14,860
next is to change the response to add

00:28:13,090 --> 00:28:17,590
additional cars that you think are more

00:28:14,860 --> 00:28:21,639
impressive and where you need to make

00:28:17,590 --> 00:28:24,999
those edits is under back-end source and

00:28:21,639 --> 00:28:27,549
cars servlet that Java and in there

00:28:24,999 --> 00:28:31,179
you'll see an array of car objects just

00:28:27,549 --> 00:28:32,350
hop in another car object I can't wait

00:28:31,179 --> 00:28:33,549
to see the tweets where people said they

00:28:32,350 --> 00:28:38,980
went to ng-conf and they were told to

00:28:33,549 --> 00:28:40,269
edit Java code alright we don't want to

00:28:38,980 --> 00:28:43,480
admit it but we do have to work in other

00:28:40,269 --> 00:28:45,369
languages right and also when you get

00:28:43,480 --> 00:28:51,850
saved in that file just watch what the

00:28:45,369 --> 00:28:54,970
browser does so I want to make another

00:28:51,850 --> 00:28:56,559
performance qualification here so I

00:28:54,970 --> 00:28:58,840
basil is similar to the tool we use

00:28:56,559 --> 00:29:00,159
internally internally we have an extra

00:28:58,840 --> 00:29:01,929
feature that's not yet open sourced

00:29:00,159 --> 00:29:03,999
which is that it does JVM hot-swap which

00:29:01,929 --> 00:29:07,659
is a clever way in Java of basically

00:29:03,999 --> 00:29:09,940
doing like hot module reloading where it

00:29:07,659 --> 00:29:11,440
recompiles makes a new jar file and then

00:29:09,940 --> 00:29:13,960
that's like loaded into the running

00:29:11,440 --> 00:29:15,369
server without restarting so that's cool

00:29:13,960 --> 00:29:16,690
and that would make this faster since

00:29:15,369 --> 00:29:18,789
that's not available what happens is

00:29:16,690 --> 00:29:21,490
this Java server after the recompilation

00:29:18,789 --> 00:29:22,809
just restarts itself and then I think

00:29:21,490 --> 00:29:24,820
we'd have like some retry logic in the

00:29:22,809 --> 00:29:29,730
API layer so that it like picks back up

00:29:24,820 --> 00:29:29,730
again when the server is live yeah

00:29:31,530 --> 00:29:39,120
yes so actually the link I showed

00:29:34,080 --> 00:29:40,260
earlier which is gqo /ng slash ABC if

00:29:39,120 --> 00:29:43,320
you scroll down there's like a long list

00:29:40,260 --> 00:29:47,180
of of conferences and the slides are the

00:29:43,320 --> 00:29:47,180
slides are like the next last one there

00:29:47,930 --> 00:29:56,940
yeah which link was it

00:29:54,600 --> 00:29:57,990
yeah just let's just keep it up I mean I

00:29:56,940 --> 00:30:01,610
could show it at the end but then would

00:29:57,990 --> 00:30:01,610
be giving something away probably yeah

00:30:02,390 --> 00:30:08,850
okay yeah so the slides are already

00:30:04,590 --> 00:30:09,900
linked from the end of here yeah we

00:30:08,850 --> 00:30:11,400
should have put that in the readme too

00:30:09,900 --> 00:30:20,850
yeah it should be next time we do this

00:30:11,400 --> 00:30:27,600
workshop we'll take the video from this

00:30:20,850 --> 00:30:28,800
one we'll just play it on loop and again

00:30:27,600 --> 00:30:31,710
if you have extra time there's a box

00:30:28,800 --> 00:30:34,050
here you could try see if you can add

00:30:31,710 --> 00:30:36,780
another method to the Java class you can

00:30:34,050 --> 00:30:40,650
try calling it did anyone successfully

00:30:36,780 --> 00:30:42,000
complete this Wow much faster than I

00:30:40,650 --> 00:30:43,500
thought it was all on this side of the

00:30:42,000 --> 00:30:49,640
room it's maybe the Wi-Fi is faster over

00:30:43,500 --> 00:30:49,640
here the routers on that side yeah yeah

00:30:53,210 --> 00:31:00,240
okay so what's the magic so actually I'm

00:30:58,860 --> 00:31:01,500
not sure what the last step of the magic

00:31:00,240 --> 00:31:03,090
is we both Daniel have to Phyllis no in

00:31:01,500 --> 00:31:04,770
the end I mean so the first thing that

00:31:03,090 --> 00:31:06,450
happens is we're running I basil which

00:31:04,770 --> 00:31:07,710
is a watch mode and izl doesn't care

00:31:06,450 --> 00:31:09,840
what language you're in because it's you

00:31:07,710 --> 00:31:11,160
know full stack so when the Java file

00:31:09,840 --> 00:31:12,630
changed that was one of the files that I

00:31:11,160 --> 00:31:14,880
basil is watching and so it just told

00:31:12,630 --> 00:31:16,590
basil hey rebuild this this jar and then

00:31:14,880 --> 00:31:17,820
the jar gets packaged into a war then

00:31:16,590 --> 00:31:19,590
the war gets pushed into an app engine

00:31:17,820 --> 00:31:21,780
binary and we're using the App Engine

00:31:19,590 --> 00:31:23,640
dev server but actually we hit ends up

00:31:21,780 --> 00:31:25,680
getting restarted because it's a it's

00:31:23,640 --> 00:31:27,750
being run by basil but basil doesn't yet

00:31:25,680 --> 00:31:29,160
know how to how to hot swap the code so

00:31:27,750 --> 00:31:31,700
that restarts and then the client is

00:31:29,160 --> 00:31:31,700
always pinging

00:31:32,880 --> 00:31:37,660
because we don't have like a server

00:31:35,410 --> 00:31:38,800
that's hot swappable um and we wanted to

00:31:37,660 --> 00:31:42,370
make it so that our client refreshed

00:31:38,800 --> 00:31:45,820
when the server does what I do is we

00:31:42,370 --> 00:31:47,830
make the server data dependency of the

00:31:45,820 --> 00:31:49,810
client which basically just means when

00:31:47,830 --> 00:31:51,430
the server changes basil knows that it

00:31:49,810 --> 00:31:54,070
needs to kick off rebuilding the clinic

00:31:51,430 --> 00:31:57,010
just a small hack because things are

00:31:54,070 --> 00:31:59,230
still sort of progressing in basil world

00:31:57,010 --> 00:32:01,360
so basically when the server changes the

00:31:59,230 --> 00:32:03,640
client gets rebuilt and then it tries to

00:32:01,360 --> 00:32:07,720
refresh from the newly reinstated server

00:32:03,640 --> 00:32:09,610
and you get your new data it's yeah it's

00:32:07,720 --> 00:32:10,690
probably that's that's not realistic for

00:32:09,610 --> 00:32:13,150
what you would really do because you

00:32:10,690 --> 00:32:14,320
wouldn't want the web page to refresh if

00:32:13,150 --> 00:32:15,670
there's new data available you would

00:32:14,320 --> 00:32:17,860
expect like to have to do a reload or

00:32:15,670 --> 00:32:19,030
something yeah usually live reload

00:32:17,860 --> 00:32:20,260
applies when the when the web

00:32:19,030 --> 00:32:27,670
application has changed not when the

00:32:20,260 --> 00:32:28,510
data source has changed yeah so so what

00:32:27,670 --> 00:32:30,220
Dan was saying is that there's a

00:32:28,510 --> 00:32:32,380
dependency edge that's kind of

00:32:30,220 --> 00:32:35,500
artificial between the Java server and

00:32:32,380 --> 00:32:37,750
the angular app just so that basil will

00:32:35,500 --> 00:32:39,190
know that the that the angular app needs

00:32:37,750 --> 00:32:41,770
to be bumped whenever the Java server

00:32:39,190 --> 00:32:43,150
comes back up but I mean it's it's cool

00:32:41,770 --> 00:32:44,440
that like these affordances are all

00:32:43,150 --> 00:32:45,820
there in basil right so there's a bunch

00:32:44,440 --> 00:32:46,840
of different ways we could do it we

00:32:45,820 --> 00:32:52,630
could do with some good ways or some

00:32:46,840 --> 00:33:07,000
hacky ways you still have a Honda Civic

00:32:52,630 --> 00:33:09,970
on your store yeah I assume so

00:33:07,000 --> 00:33:16,080
so but I made us a modest improvement by

00:33:09,970 --> 00:33:19,560
adding my car that on the CRV okay so

00:33:16,080 --> 00:33:19,560
yeah one question

00:33:20,850 --> 00:33:26,730
ah so the question is what servers are

00:33:25,080 --> 00:33:27,960
supported so we picked App Engine I

00:33:26,730 --> 00:33:31,260
don't know why we picked App Engine

00:33:27,960 --> 00:33:33,450
because we like yeah it was like there

00:33:31,260 --> 00:33:35,160
are a lot of samples online in the on

00:33:33,450 --> 00:33:37,890
the base whole website and they feature

00:33:35,160 --> 00:33:39,300
those rules so it was just easier to get

00:33:37,890 --> 00:33:41,880
that in there we try to get a dotnet

00:33:39,300 --> 00:33:43,290
that's sample as well but the rules

00:33:41,880 --> 00:33:47,670
weren't as complete we couldn't get it

00:33:43,290 --> 00:33:49,050
working but hopefully next time so one

00:33:47,670 --> 00:33:50,610
way to think of Basel is it has this

00:33:49,050 --> 00:33:53,490
graph but then it just runs whatever

00:33:50,610 --> 00:33:54,930
process you say and that process just

00:33:53,490 --> 00:33:56,340
has to be some tool it has to be built

00:33:54,930 --> 00:33:58,350
by some tool train that it downloads and

00:33:56,340 --> 00:34:00,360
then it has to run you know just runs

00:33:58,350 --> 00:34:02,010
whatever process so this isn't there's

00:34:00,360 --> 00:34:04,950
no there's no limitation about what kind

00:34:02,010 --> 00:34:06,180
of server you could run once you get

00:34:04,950 --> 00:34:07,710
into the like hot swapping and stuff

00:34:06,180 --> 00:34:10,020
then you might need to have a little bit

00:34:07,710 --> 00:34:14,490
more of of an interaction between the

00:34:10,020 --> 00:34:16,620
build tool and the server by the way

00:34:14,490 --> 00:34:18,270
another option is you could have basil

00:34:16,620 --> 00:34:20,010
just build the stuff and then point a

00:34:18,270 --> 00:34:22,620
server that you run outside of basil at

00:34:20,010 --> 00:34:23,820
the output folder it's not as nice

00:34:22,620 --> 00:34:25,170
because now it doesn't know when to

00:34:23,820 --> 00:34:26,850
rebuild right you no longer have like

00:34:25,170 --> 00:34:28,290
your graph is is truncated at this

00:34:26,850 --> 00:34:30,120
boundary and so the supplement aside

00:34:28,290 --> 00:34:31,080
like design incremental anymore but you

00:34:30,120 --> 00:34:33,120
could do that you could just have

00:34:31,080 --> 00:34:35,790
Basil's job is just to build the bundles

00:34:33,120 --> 00:34:37,860
and then my server is external and by

00:34:35,790 --> 00:34:39,900
the way I have on medium I have a blog

00:34:37,860 --> 00:34:41,370
post showing how to make a change to an

00:34:39,900 --> 00:34:44,310
angular app and then it live deploys to

00:34:41,370 --> 00:34:46,040
kubernetes engine which is extra cool

00:34:44,310 --> 00:34:48,180
because docker also has this sort of

00:34:46,040 --> 00:34:49,710
incremental property of having layers of

00:34:48,180 --> 00:34:51,240
filesystem so that one's cool because it

00:34:49,710 --> 00:34:52,470
just updates the layer that was changed

00:34:51,240 --> 00:34:53,700
and then so it just as a small push to

00:34:52,470 --> 00:34:58,040
the servers in like 20 seconds later

00:34:53,700 --> 00:34:58,040
you're live on production fleet yeah

00:35:11,510 --> 00:35:15,119
so the question is if you're using

00:35:13,380 --> 00:35:16,980
firebase functions as a simple back-end

00:35:15,119 --> 00:35:19,980
can basil deploy your code changes there

00:35:16,980 --> 00:35:21,420
on the fly and I haven't haven't seen

00:35:19,980 --> 00:35:26,910
anybody wired that up that sounds like a

00:35:21,420 --> 00:35:29,430
great science experiment the the only

00:35:26,910 --> 00:35:31,050
question to me is sort of ergonomics

00:35:29,430 --> 00:35:32,790
about like how you how the user would do

00:35:31,050 --> 00:35:36,570
that so like for my kubernetes example

00:35:32,790 --> 00:35:37,619
you're doing basil run my finger I base

00:35:36,570 --> 00:35:39,240
I'll run my think that's play so it

00:35:37,619 --> 00:35:40,230
reruns it every time it changes so you

00:35:39,240 --> 00:35:42,359
could certainly do something where you

00:35:40,230 --> 00:35:43,770
do hi basil run my firebase deploy and

00:35:42,359 --> 00:35:49,349
then every time is a change they'll redo

00:35:43,770 --> 00:35:52,109
the deploy I see so you could have

00:35:49,349 --> 00:35:53,970
several different targets although I

00:35:52,109 --> 00:35:55,440
mean basil will only run one target at a

00:35:53,970 --> 00:35:57,089
time so you would probably have to have

00:35:55,440 --> 00:35:58,680
some external like task runner that

00:35:57,089 --> 00:36:00,390
coordinates like running these several

00:35:58,680 --> 00:36:01,740
things in a row so there might be a

00:36:00,390 --> 00:36:04,619
little bit of scripting around it with a

00:36:01,740 --> 00:36:05,730
loop although I mean that's also not I

00:36:04,619 --> 00:36:07,290
mean you certainly could do the loop

00:36:05,730 --> 00:36:08,940
inside of basil to you but you would

00:36:07,290 --> 00:36:10,430
just have to write more basil rules that

00:36:08,940 --> 00:36:25,220
understands multiple firebase functions

00:36:10,430 --> 00:36:27,810
that would be totally cool yeah yeah hmm

00:36:25,220 --> 00:36:29,070
so question is why have you not all been

00:36:27,810 --> 00:36:30,950
using make all this time it was there

00:36:29,070 --> 00:36:34,710
and it worked

00:36:30,950 --> 00:36:36,270
hi sorry questions what are the insights

00:36:34,710 --> 00:36:40,410
about why we forgot the lessons for make

00:36:36,270 --> 00:36:43,980
and we had to yeah I I I'm not a

00:36:40,410 --> 00:36:46,080
JavaScript expert so I don't know but I

00:36:43,980 --> 00:36:47,460
think I think it's I think it may come

00:36:46,080 --> 00:36:48,839
from like you know we didn't used to

00:36:47,460 --> 00:36:49,859
have build tooling in JavaScript land

00:36:48,839 --> 00:36:50,970
you would just change your files and

00:36:49,859 --> 00:36:52,950
refresh in the browser and then we

00:36:50,970 --> 00:36:54,900
started introducing type checkers and

00:36:52,950 --> 00:36:56,700
transpiration and babel and typescript

00:36:54,900 --> 00:36:58,080
and so now you needed something to run

00:36:56,700 --> 00:36:59,190
it but the simple thing to think about

00:36:58,080 --> 00:37:00,660
was oh so I just need this

00:36:59,190 --> 00:37:01,950
transformation as the file comes from

00:37:00,660 --> 00:37:03,540
the disk to the browser so I just need

00:37:01,950 --> 00:37:05,609
some like loader in my server to do that

00:37:03,540 --> 00:37:07,290
so it's easy to think about the small

00:37:05,609 --> 00:37:09,000
problem and then when you actually have

00:37:07,290 --> 00:37:11,700
a complicated graph of things to do on

00:37:09,000 --> 00:37:14,609
every refresh then that system doesn't

00:37:11,700 --> 00:37:17,609
scale as well so I don't know how many

00:37:14,609 --> 00:37:20,750
people have used make before that's like

00:37:17,609 --> 00:37:20,750
a third that's awesome

00:37:21,210 --> 00:37:27,030
okay so how did that go people are

00:37:24,510 --> 00:37:30,089
almost done raise your hand if your Java

00:37:27,030 --> 00:37:32,069
API changed head effects it's okay so

00:37:30,089 --> 00:37:35,490
you quickly show what we did we just

00:37:32,069 --> 00:37:37,890
went into the car servlet Java file and

00:37:35,490 --> 00:37:39,599
added in another object just similar to

00:37:37,890 --> 00:37:42,089
how the other ones are and then this

00:37:39,599 --> 00:37:44,819
whole Builder chain just called add cars

00:37:42,089 --> 00:37:49,010
and and dropped in the new object and

00:37:44,819 --> 00:37:49,010
that's pretty much all you have to do

00:37:49,849 --> 00:37:58,609
okay good right now for the best part

00:37:55,800 --> 00:38:07,140
yeah now it gets even more interesting

00:37:58,609 --> 00:38:09,480
so alright oh no I think we're right so

00:38:07,140 --> 00:38:12,329
now we want to so far we only had three

00:38:09,480 --> 00:38:17,280
properties on that car object let's add

00:38:12,329 --> 00:38:21,329
a new one for color so basically just go

00:38:17,280 --> 00:38:23,040
in and extend the proto object to have

00:38:21,329 --> 00:38:26,819
an additional property kind of follow

00:38:23,040 --> 00:38:29,130
the pattern that's in there and it's

00:38:26,819 --> 00:38:31,859
basically the car dot prototype say P is

00:38:29,130 --> 00:38:33,210
our C and just follow the same

00:38:31,859 --> 00:38:37,410
convention that's in there with the

00:38:33,210 --> 00:38:39,569
incremental ID doesn't matter I just put

00:38:37,410 --> 00:38:44,339
it at the end and up to increment the

00:38:39,569 --> 00:38:47,460
number by one and we also want to ferry

00:38:44,339 --> 00:38:52,190
that property through to the UI so that

00:38:47,460 --> 00:38:52,190
the list also displays the color now

00:39:03,710 --> 00:39:07,150
at the job the job baby

00:39:07,260 --> 00:39:11,540
Jonathan Diaz code with Java yeah one

00:39:10,230 --> 00:39:15,530
type-check

00:39:11,540 --> 00:39:15,530
but we deserializing

00:39:21,800 --> 00:39:26,150
so while you're doing that you could try

00:39:24,680 --> 00:39:28,220
making a mistake and see what happens

00:39:26,150 --> 00:39:29,990
because both the front end and the back

00:39:28,220 --> 00:39:31,490
end should be bound by this API

00:39:29,990 --> 00:39:34,730
definition so if you use the wrong type

00:39:31,490 --> 00:39:35,240
if you misspell the name you can see

00:39:34,730 --> 00:39:37,430
what happens

00:39:35,240 --> 00:39:39,790
again we're multiplexing both of the DEP

00:39:37,430 --> 00:39:42,050
servers unto the same terminal and so

00:39:39,790 --> 00:39:43,310
you may have to like scroll up a while

00:39:42,050 --> 00:39:44,690
to see the change the mistake in the

00:39:43,310 --> 00:39:45,620
type script fortunately that one should

00:39:44,690 --> 00:39:47,540
just show up in the editor the editor

00:39:45,620 --> 00:39:49,430
should see the new DCs file generated

00:39:47,540 --> 00:39:50,750
from the protocol buffer so your your

00:39:49,430 --> 00:39:53,810
typescript code should understand what

00:39:50,750 --> 00:39:55,430
the new API definition is if you want

00:39:53,810 --> 00:39:57,920
you could run this in two terminals one

00:39:55,430 --> 00:39:59,540
for the Java API and one for the UI we

00:39:57,920 --> 00:40:01,790
just figured be easier for demo purposes

00:39:59,540 --> 00:40:03,350
to just combine them actually the price

00:40:01,790 --> 00:40:05,780
you pay is a lot more output in the

00:40:03,350 --> 00:40:06,890
console so if you do want to do that by

00:40:05,780 --> 00:40:09,050
the way just look in the package.json

00:40:06,890 --> 00:40:10,820
right for where the the run script is or

00:40:09,050 --> 00:40:11,930
start so whatever we do in start it says

00:40:10,820 --> 00:40:13,370
concurrently and then it has two

00:40:11,930 --> 00:40:14,450
commands so just try taking those two

00:40:13,370 --> 00:40:16,840
commands out and you could run them

00:40:14,450 --> 00:40:16,840
separately

00:41:01,470 --> 00:41:04,220
yeah question

00:41:08,900 --> 00:41:13,220
oh that's good question so what if you

00:41:10,730 --> 00:41:15,230
use graph QL to describe your schema I

00:41:13,220 --> 00:41:16,790
don't actually know but maybe somebody

00:41:15,230 --> 00:41:25,400
else can answer I assume graph QL does

00:41:16,790 --> 00:41:26,960
generate type script typings so so it's

00:41:25,400 --> 00:41:28,880
at runtime you can ask what what types

00:41:26,960 --> 00:41:30,170
API has so that makes it hard at

00:41:28,880 --> 00:41:31,640
design-time to have a red squiggly in

00:41:30,170 --> 00:41:35,450
the editor that says you misspelled it

00:41:31,640 --> 00:41:36,830
right I'm sure somebody in the community

00:41:35,450 --> 00:41:38,830
has taken the graph QL you know

00:41:36,830 --> 00:41:41,030
definition language and found a way to

00:41:38,830 --> 00:41:44,540
generate had an equivalent type script

00:41:41,030 --> 00:41:46,640
Taipings for it yeah yes okay yes that

00:41:44,540 --> 00:41:48,530
exists I don't know about generating

00:41:46,640 --> 00:41:50,600
like you know a Java jar file that has

00:41:48,530 --> 00:41:52,550
the interfaces to make you know in

00:41:50,600 --> 00:41:54,170
theory if you're gonna use one of these

00:41:52,550 --> 00:41:55,490
data interrupt formats you need a

00:41:54,170 --> 00:41:57,260
generator for every language that gives

00:41:55,490 --> 00:41:58,940
you an API to interact with right and

00:41:57,260 --> 00:42:00,560
it's not just type checking it's also in

00:41:58,940 --> 00:42:02,270
theory like like the job of thing we're

00:42:00,560 --> 00:42:03,650
using here as a builder pattern and the

00:42:02,270 --> 00:42:05,570
protocol buffers are actually immutable

00:42:03,650 --> 00:42:07,400
just kind of a it's a useful property

00:42:05,570 --> 00:42:08,450
and so in each of the language libraries

00:42:07,400 --> 00:42:09,890
there's some thought about like what's

00:42:08,450 --> 00:42:12,410
the idiomatic way in this language to

00:42:09,890 --> 00:42:13,700
express the API of like this data object

00:42:12,410 --> 00:42:15,890
and in JavaScript obviously you know the

00:42:13,700 --> 00:42:18,320
easy way is just like a raw object and

00:42:15,890 --> 00:42:19,910
you can mutate its fields but you could

00:42:18,320 --> 00:42:20,960
imagine for example this protocol buffer

00:42:19,910 --> 00:42:23,000
thing we generated it could give you

00:42:20,960 --> 00:42:25,550
immutable j/s and that might be actually

00:42:23,000 --> 00:42:27,110
useful so that you you can treat your

00:42:25,550 --> 00:42:29,780
your data so that you can be you know

00:42:27,110 --> 00:42:31,250
take these data structures and and not

00:42:29,780 --> 00:42:32,780
have to do the change detection and

00:42:31,250 --> 00:42:33,980
angular to be based on them being

00:42:32,780 --> 00:42:35,630
immutable and always knowing you have

00:42:33,980 --> 00:42:38,080
the you know to do a reactive style

00:42:35,630 --> 00:42:38,080
basically

00:42:58,070 --> 00:43:12,230
anybody done yet yes - first two

00:43:01,970 --> 00:43:14,090
finishers okay five and one thing once

00:43:12,230 --> 00:43:17,870
you have this working just as an

00:43:14,090 --> 00:43:19,790
experiment try to make the angular side

00:43:17,870 --> 00:43:23,050
of things break by making this like

00:43:19,790 --> 00:43:25,550
color too instead and look for a a

00:43:23,050 --> 00:43:26,630
helpful helpful error message telling

00:43:25,550 --> 00:43:30,320
you that you might be doing something

00:43:26,630 --> 00:43:31,910
wrong I'm also curious does anybody

00:43:30,320 --> 00:43:33,620
already have when they're doing full

00:43:31,910 --> 00:43:34,790
stack development a set up that gives

00:43:33,620 --> 00:43:36,560
them type checking on both sides like

00:43:34,790 --> 00:43:39,950
this

00:43:36,560 --> 00:43:41,750
just a couple okay yeah the nice thing

00:43:39,950 --> 00:43:43,640
here is now we catch this at compile

00:43:41,750 --> 00:43:44,720
time usually something like this would

00:43:43,640 --> 00:43:46,970
be called at run time

00:43:44,720 --> 00:43:49,190
yeah and imagine you ever needed to

00:43:46,970 --> 00:43:50,720
change the API be really nice to be able

00:43:49,190 --> 00:43:53,420
to just rerun the tests right

00:43:50,720 --> 00:43:55,930
I know api's are always stable sorry I

00:43:53,420 --> 00:43:55,930
shouldn't have said that

00:43:56,500 --> 00:44:00,340
yes question from the audience

00:44:05,230 --> 00:44:14,530
why is your protocol buffers thing

00:44:07,580 --> 00:44:19,130
failing to compile are you in the VM

00:44:14,530 --> 00:44:21,860
okay so what should happen is again

00:44:19,130 --> 00:44:23,660
protocol buffers is a is in the basil

00:44:21,860 --> 00:44:25,220
world which means that instead of

00:44:23,660 --> 00:44:26,930
getting a binary distribution it gets

00:44:25,220 --> 00:44:28,220
built on your machine which means that

00:44:26,930 --> 00:44:29,990
we're expecting to have a C++

00:44:28,220 --> 00:44:31,490
compilation tool chain on your machine

00:44:29,990 --> 00:44:36,140
because you know all languages are in

00:44:31,490 --> 00:44:37,190
the big tent now so I would expect you

00:44:36,140 --> 00:44:40,390
to I would expect there to be an error

00:44:37,190 --> 00:44:45,380
like the tool train is not available so

00:44:40,390 --> 00:44:46,910
like there's a file at the top called

00:44:45,380 --> 00:44:49,280
workspace which is how basil knows how

00:44:46,910 --> 00:44:54,830
to find these other tool chains

00:44:49,280 --> 00:44:55,970
I don't maybe maybe Dan knows or how do

00:44:54,830 --> 00:44:57,830
we get the how do we get the tool chain

00:44:55,970 --> 00:45:00,880
for the FIR debuff to in order to

00:44:57,830 --> 00:45:00,880
compile the protocol buffers

00:45:08,249 --> 00:45:11,799
sorry I mean I mean for the example like

00:45:10,660 --> 00:45:14,469
how is it intended that you would

00:45:11,799 --> 00:45:18,489
compile protocol buffers or maybe you

00:45:14,469 --> 00:45:19,719
could just come over here and yeah thank

00:45:18,489 --> 00:45:24,309
you Dan for doing most of the setup for

00:45:19,719 --> 00:45:26,529
this repo okay sorry yeah yeah you can

00:45:24,309 --> 00:45:36,609
just yeah I don't know if anybody else

00:45:26,529 --> 00:45:40,769
has this problem his dance card really

00:45:36,609 --> 00:45:40,769
blew oh I forgot that

00:45:46,980 --> 00:45:52,300
did anyone complete this did it work oh

00:45:50,010 --> 00:45:53,560
we're up to a handful did you try to

00:45:52,300 --> 00:45:55,720
like change it back to something in

00:45:53,560 --> 00:45:58,990
ballot so that was a mismatch and you

00:45:55,720 --> 00:46:01,260
saw the error in the console so again if

00:45:58,990 --> 00:46:03,760
you didn't see it you can see it up here

00:46:01,260 --> 00:46:06,790
or you know better luck on a better

00:46:03,760 --> 00:46:08,020
Wi-Fi later and thank you the conference

00:46:06,790 --> 00:46:13,150
Wi-Fi I don't mean to like we're abusing

00:46:08,020 --> 00:46:17,020
it pretty bad I think yes where did the

00:46:13,150 --> 00:46:18,820
generated type strip typings go so so

00:46:17,020 --> 00:46:22,300
basil has this general philosophy not to

00:46:18,820 --> 00:46:24,370
put outputs in your sources so there is

00:46:22,300 --> 00:46:25,900
a directory and you can run basil info

00:46:24,370 --> 00:46:27,460
on the command line and it will tell you

00:46:25,900 --> 00:46:29,290
all the places on your file system where

00:46:27,460 --> 00:46:31,000
it's doing things so it has an output

00:46:29,290 --> 00:46:32,200
base which is actually where it

00:46:31,000 --> 00:46:33,130
downloads the other tool chains because

00:46:32,200 --> 00:46:35,740
they need to live on disk somewhere it

00:46:33,130 --> 00:46:37,150
has some caches so under if you run

00:46:35,740 --> 00:46:38,950
basil info one of the keys there will be

00:46:37,150 --> 00:46:41,620
basil - bin and that's the output

00:46:38,950 --> 00:46:43,240
directory and I think actually in this

00:46:41,620 --> 00:46:44,980
example there is a basil out folder

00:46:43,240 --> 00:46:48,250
right in the project which is just

00:46:44,980 --> 00:46:49,600
assembling into this other place in some

00:46:48,250 --> 00:46:50,980
cases we create the symbol inks in other

00:46:49,600 --> 00:46:51,940
cases they kind of are more of a pain

00:46:50,980 --> 00:46:53,200
than they're worth because you need to

00:46:51,940 --> 00:46:54,910
exclude them from all their tooling or

00:46:53,200 --> 00:47:00,040
else your tools will go flowing into the

00:46:54,910 --> 00:47:01,090
output folder and get confused so yeah

00:47:00,040 --> 00:47:02,440
you can look in the bin folder and

00:47:01,090 --> 00:47:05,530
there's a lot of intermediate artifacts

00:47:02,440 --> 00:47:06,790
that we produce on disk if you for

00:47:05,530 --> 00:47:08,470
example it's like there's a there's a

00:47:06,790 --> 00:47:10,360
web test in this repo it says I think

00:47:08,470 --> 00:47:11,980
it's broken on the VM right now but you

00:47:10,360 --> 00:47:13,420
might be able run on your own machine we

00:47:11,980 --> 00:47:14,410
generate a karmic on behind the scenes

00:47:13,420 --> 00:47:16,570
you don't even see it it goes in this

00:47:14,410 --> 00:47:17,800
bin this bin folder but it's really if

00:47:16,570 --> 00:47:19,480
you need to debug the rule that's

00:47:17,800 --> 00:47:20,380
actually very helpful that what we're

00:47:19,480 --> 00:47:21,790
doing is kind of like the UNIX

00:47:20,380 --> 00:47:23,110
philosophy but we run a program it

00:47:21,790 --> 00:47:24,160
produces some files we take those files

00:47:23,110 --> 00:47:25,540
we pass them another program because you

00:47:24,160 --> 00:47:27,640
can go look at those files it's a debug

00:47:25,540 --> 00:47:28,960
what happened so yeah that bin folder

00:47:27,640 --> 00:47:35,200
has all of these intermediate files as

00:47:28,960 --> 00:47:37,390
well as the final outputs and one other

00:47:35,200 --> 00:47:39,220
thing if you if you if you ask basil to

00:47:37,390 --> 00:47:40,960
build a certain thing it will it will

00:47:39,220 --> 00:47:42,070
then on the in the output it will give

00:47:40,960 --> 00:47:43,090
you the path to the thing it just built

00:47:42,070 --> 00:47:44,290
so it's not that you always have to go

00:47:43,090 --> 00:47:45,700
searching around the file system like I

00:47:44,290 --> 00:47:46,960
just said it's only if you want to see

00:47:45,700 --> 00:47:48,490
intermediate right now we're just doing

00:47:46,960 --> 00:47:50,200
a run command so there's nothing there's

00:47:48,490 --> 00:47:51,280
no artifact that's being built too so

00:47:50,200 --> 00:47:56,590
there's nothing printed that tells you

00:47:51,280 --> 00:48:05,320
where it is ok all right

00:47:56,590 --> 00:48:06,790
do the next one yeah yeah so for the

00:48:05,320 --> 00:48:09,430
next one we want to use we want to add

00:48:06,790 --> 00:48:11,920
something call an NX live this lips in

00:48:09,430 --> 00:48:14,320
NX that's kind of a like a signature

00:48:11,920 --> 00:48:16,480
feature of the NX product it's a way to

00:48:14,320 --> 00:48:19,900
extract code out of your application

00:48:16,480 --> 00:48:21,940
into two cell self-contained modules

00:48:19,900 --> 00:48:23,770
under a lips folder I don't know if you

00:48:21,940 --> 00:48:26,350
guys are familiar with that

00:48:23,770 --> 00:48:28,450
but we'll give you the command they run

00:48:26,350 --> 00:48:32,230
it's like using schematics under the

00:48:28,450 --> 00:48:34,000
hood to produce kind of a a basal module

00:48:32,230 --> 00:48:36,280
because once you run this command you'll

00:48:34,000 --> 00:48:40,710
notice an extra file and it's the build

00:48:36,280 --> 00:48:40,710
file that Alex talked about earlier and

00:48:41,760 --> 00:48:46,570
part of this since that we there's that

00:48:44,770 --> 00:48:48,400
this right here is a little bit of a gap

00:48:46,570 --> 00:48:50,200
in our tooling and will improve this

00:48:48,400 --> 00:48:51,910
later but right now there's one extra

00:48:50,200 --> 00:48:54,130
step that you have to make because when

00:48:51,910 --> 00:48:56,800
you create the lid that becomes kind of

00:48:54,130 --> 00:48:58,810
like an orphaned basal module that isn't

00:48:56,800 --> 00:49:01,240
really picked up anywhere it's not

00:48:58,810 --> 00:49:03,310
included anywhere so you have to make a

00:49:01,240 --> 00:49:05,290
connection in the depths array like I

00:49:03,310 --> 00:49:07,630
think you mentioned that right Alex

00:49:05,290 --> 00:49:10,030
about how to connect dependencies

00:49:07,630 --> 00:49:12,760
between basal modules and that's what

00:49:10,030 --> 00:49:15,160
you do there you take the address kind

00:49:12,760 --> 00:49:19,710
of the address of that basal module that

00:49:15,160 --> 00:49:19,710
is that lib and you register it with the

00:49:21,360 --> 00:49:25,420
and at that point you should be able in

00:49:23,860 --> 00:49:29,260
the in the app you should be able to

00:49:25,420 --> 00:49:32,380
import this angular module and wire it

00:49:29,260 --> 00:49:33,880
up yeah it's the last milestone because

00:49:32,380 --> 00:49:34,900
it's the biggest challenge so don't

00:49:33,880 --> 00:49:36,220
worry we will show you what it looks

00:49:34,900 --> 00:49:37,630
like

00:49:36,220 --> 00:49:40,360
let me make one other point while you're

00:49:37,630 --> 00:49:43,360
doing this the way Libs work in NX and

00:49:40,360 --> 00:49:45,250
also under basil is that they're a

00:49:43,360 --> 00:49:47,080
direct dependency in other words there's

00:49:45,250 --> 00:49:48,550
no are there's no packaging step that

00:49:47,080 --> 00:49:49,930
builds an NPM package that gets shipped

00:49:48,550 --> 00:49:51,040
to an artifact repository that has a

00:49:49,930 --> 00:49:52,630
version and then you change a version

00:49:51,040 --> 00:49:53,590
and then you download the thing that

00:49:52,630 --> 00:49:54,790
would suck because then if you make a

00:49:53,590 --> 00:49:56,530
change in the library it wouldn't

00:49:54,790 --> 00:49:57,700
immediately show up in the app right and

00:49:56,530 --> 00:49:59,350
everything we've shown you today is make

00:49:57,700 --> 00:50:00,550
any change it's immediately visible in

00:49:59,350 --> 00:50:02,680
the app so that's true for these libs as

00:50:00,550 --> 00:50:04,510
well so they get compiled separately

00:50:02,680 --> 00:50:06,070
basil will first compile the lib then

00:50:04,510 --> 00:50:10,030
compile your app against the changes in

00:50:06,070 --> 00:50:11,680
the DTS files and that's

00:50:10,030 --> 00:50:13,090
maybe a very different philosophy for

00:50:11,680 --> 00:50:21,040
how to do libraries than you're used to

00:50:13,090 --> 00:50:22,240
oh I think we need the full command

00:50:21,040 --> 00:50:25,570
right because we didn't globally install

00:50:22,240 --> 00:50:29,740
ng oh yeah sorry that's good to hear

00:50:25,570 --> 00:50:31,840
we didn't we didn't install NX and

00:50:29,740 --> 00:50:35,890
angular CLI globally on this machine so

00:50:31,840 --> 00:50:37,540
we need to refer to it by full path

00:50:35,890 --> 00:50:39,550
because you have those dependencies in

00:50:37,540 --> 00:50:43,810
your node module so instead of doing ng

00:50:39,550 --> 00:50:46,180
do node modules slash dot bin slash ng

00:50:43,810 --> 00:50:49,510
because we don't have the local we ran

00:50:46,180 --> 00:50:51,520
out of space on the VN I think we

00:50:49,510 --> 00:50:53,410
resolved that at a later time but at

00:50:51,520 --> 00:50:54,850
that point we have too scared to touch

00:50:53,410 --> 00:50:58,060
it and about noon we got enough space on

00:50:54,850 --> 00:51:00,220
the VM to do that we said no more no

00:50:58,060 --> 00:51:01,450
more changes to the VM it works yeah so

00:51:00,220 --> 00:51:03,760
there's the updated command you should

00:51:01,450 --> 00:51:06,220
be able to run ng with it but like I

00:51:03,760 --> 00:51:08,260
said if you have angular CLI and NX

00:51:06,220 --> 00:51:11,290
globally installed which is to recommend

00:51:08,260 --> 00:51:13,180
it setup you don't need that full path

00:51:11,290 --> 00:51:14,560
into it you could I mean you could also

00:51:13,180 --> 00:51:18,240
just do it on the VM right now you could

00:51:14,560 --> 00:51:21,630
just do NPM install - at angular / CL I

00:51:18,240 --> 00:51:21,630
should also work

00:51:27,590 --> 00:51:34,950
okay at this point all of your knowledge

00:51:33,210 --> 00:51:36,030
of how to do node programming is just

00:51:34,950 --> 00:51:37,440
coming into play because you have to

00:51:36,030 --> 00:51:40,580
look in the package.json to see how to

00:51:37,440 --> 00:51:40,580
run the script that runs the other thing

00:51:44,660 --> 00:51:51,450
and I also recommend taking a look into

00:51:48,540 --> 00:51:53,610
the libs folder now after you run that

00:51:51,450 --> 00:51:56,070
command because you'll if you're used to

00:51:53,610 --> 00:51:56,880
an X you'll notice one additional file

00:51:56,070 --> 00:51:58,950
with just a build

00:51:56,880 --> 00:52:00,030
baseball file so if you're having

00:51:58,950 --> 00:52:01,320
trouble doing this locally this would be

00:52:00,030 --> 00:52:03,660
a good time to look up here since we're

00:52:01,320 --> 00:52:04,920
gonna run out of time soon so this is

00:52:03,660 --> 00:52:06,330
what this is the output from from

00:52:04,920 --> 00:52:07,950
running that command so it's generated

00:52:06,330 --> 00:52:10,250
this lib cars card and then do you want

00:52:07,950 --> 00:52:15,480
to show how we wire it up yes sure so

00:52:10,250 --> 00:52:17,850
yeah so we located the build basil file

00:52:15,480 --> 00:52:20,430
in the target app for this Lib because

00:52:17,850 --> 00:52:23,580
and then you notice here we already have

00:52:20,430 --> 00:52:27,210
a depth wired up here which is the kind

00:52:23,580 --> 00:52:29,010
of the proto object that we use for

00:52:27,210 --> 00:52:31,830
these cars so if you basically make

00:52:29,010 --> 00:52:38,870
another entry and and instead of API now

00:52:31,830 --> 00:52:45,780
it's going to be lips what I call it

00:52:38,870 --> 00:52:48,420
cars card and then SRC notice we don't

00:52:45,780 --> 00:52:49,680
need to do the full the path is shorter

00:52:48,420 --> 00:52:51,270
here because we have a convention we

00:52:49,680 --> 00:52:53,760
name the base old world the same as the

00:52:51,270 --> 00:52:55,050
folder so we don't have to have if you

00:52:53,760 --> 00:52:56,640
have more than one rule in there you

00:52:55,050 --> 00:52:58,380
need to have like a colon and the name

00:52:56,640 --> 00:53:00,750
of the rule but in this case this bill

00:52:58,380 --> 00:53:03,390
baseball file has just a single external

00:53:00,750 --> 00:53:05,940
rule and notice this now kicked off as

00:53:03,390 --> 00:53:08,070
if if you were to make changes to the

00:53:05,940 --> 00:53:09,720
files on the cars card you wouldn't

00:53:08,070 --> 00:53:12,450
notice any retry goering of the bill

00:53:09,720 --> 00:53:13,620
because basil is not aware of that there

00:53:12,450 --> 00:53:16,530
are a type of good files there but

00:53:13,620 --> 00:53:18,450
they're not part of the app as far as

00:53:16,530 --> 00:53:20,730
basil is concerned they weren't but now

00:53:18,450 --> 00:53:22,290
they are ya know now if we make a change

00:53:20,730 --> 00:53:23,850
to the cars card it should like show up

00:53:22,290 --> 00:53:24,840
in the air well there's one more thing

00:53:23,850 --> 00:53:26,310
we didn't do which is to actually use

00:53:24,840 --> 00:53:28,920
that compose yeah we have to start using

00:53:26,310 --> 00:53:30,630
it inside of our like the first step

00:53:28,920 --> 00:53:31,920
like right now it's just an empty ng

00:53:30,630 --> 00:53:34,470
module you can fill in whatever

00:53:31,920 --> 00:53:37,010
functionality you want there right but

00:53:34,470 --> 00:53:40,010
there's one more point to make and that

00:53:37,010 --> 00:53:40,010
is

00:53:41,310 --> 00:53:46,990
there's a slight change to how we import

00:53:44,830 --> 00:53:50,110
this lib now if you're familiar with NX

00:53:46,990 --> 00:53:53,230
you might remember you seeing like an

00:53:50,110 --> 00:53:57,070
apt and neck symbolic path at whatever

00:53:53,230 --> 00:53:59,440
your org is a project slash whatever the

00:53:57,070 --> 00:54:01,210
feature is you're importing we don't

00:53:59,440 --> 00:54:03,130
have that working at this point so you

00:54:01,210 --> 00:54:04,210
have to use an absolute path the good

00:54:03,130 --> 00:54:06,970
news is that you don't have to use a

00:54:04,210 --> 00:54:10,240
long relative path that dot the slashes

00:54:06,970 --> 00:54:13,750
you back into libs but for right now we

00:54:10,240 --> 00:54:15,790
have to use an absolute path here AB

00:54:13,750 --> 00:54:16,990
absolute to the root of the workspace

00:54:15,790 --> 00:54:18,010
right not on your machine because this

00:54:16,990 --> 00:54:19,960
is something you could check in and

00:54:18,010 --> 00:54:22,690
share with your co-workers so it's going

00:54:19,960 --> 00:54:25,540
to be cars which is the name of the of

00:54:22,690 --> 00:54:26,350
the workspace the facial workspace slash

00:54:25,540 --> 00:54:29,740
libs

00:54:26,350 --> 00:54:34,840
slash you could of course barrel this up

00:54:29,740 --> 00:54:37,150
and shorten it and and like I said this

00:54:34,840 --> 00:54:38,770
is a slight gap in our tooling we would

00:54:37,150 --> 00:54:41,080
like to make this experience better to

00:54:38,770 --> 00:54:42,490
kind of get rid of these like extra

00:54:41,080 --> 00:54:46,500
steps because when you compare this to

00:54:42,490 --> 00:54:49,450
the default CLI /nx you don't make this

00:54:46,500 --> 00:54:50,680
connection of Bill basal files right you

00:54:49,450 --> 00:54:53,740
don't have to worry about that and you

00:54:50,680 --> 00:55:02,590
don't lose that nice symbolic at scope

00:54:53,740 --> 00:55:04,180
syntax right so this is a question yes

00:55:02,590 --> 00:55:05,350
if we had just made this import the bill

00:55:04,180 --> 00:55:06,460
would fail and say I can't find any such

00:55:05,350 --> 00:55:08,110
module and that's because it wasn't

00:55:06,460 --> 00:55:15,040
provided as an input when we ran the

00:55:08,110 --> 00:55:16,780
angular compiler so in Google we have a

00:55:15,040 --> 00:55:17,890
tool that we you would write this import

00:55:16,780 --> 00:55:19,090
and then our tool would say oh I know

00:55:17,890 --> 00:55:20,860
how to satisfy this import and it would

00:55:19,090 --> 00:55:22,150
update the depths for you and I have an

00:55:20,860 --> 00:55:24,190
intern

00:55:22,150 --> 00:55:26,110
jaren hopefully is going to make that

00:55:24,190 --> 00:55:29,590
available for all of you all so it's

00:55:26,110 --> 00:55:32,020
gonna be hard so I wish both of us luck

00:55:29,590 --> 00:55:33,670
but yeah the way we this is not yet the

00:55:32,020 --> 00:55:35,440
developer experience that we need in

00:55:33,670 --> 00:55:38,020
order to make basil under the CLI or

00:55:35,440 --> 00:55:39,460
under NX be the default obviously too

00:55:38,020 --> 00:55:43,480
slow too much setup too many things to

00:55:39,460 --> 00:55:44,500
download not ergonomic enough so we're

00:55:43,480 --> 00:55:47,890
still working on it that's why it's in

00:55:44,500 --> 00:55:49,240
labs the important thing obviously is if

00:55:47,890 --> 00:55:51,340
you really have this problem today and

00:55:49,240 --> 00:55:52,839
you're and like we use this at Google so

00:55:51,340 --> 00:55:54,519
it's good enough for us so

00:55:52,839 --> 00:55:56,289
it's not as ergonomic is the CLI but it

00:55:54,519 --> 00:56:07,089
is usable if you have the problem and

00:55:56,289 --> 00:56:09,609
you need to start using it yeah no sorry

00:56:07,089 --> 00:56:11,499
in the app we added an entry that points

00:56:09,609 --> 00:56:13,029
to the new module we created so we

00:56:11,499 --> 00:56:14,559
created the cars card Lib and then we

00:56:13,029 --> 00:56:18,779
went to the app and added a dependency

00:56:14,559 --> 00:56:23,019
edge well in the build file for our app

00:56:18,779 --> 00:56:28,589
yeah okay so we're almost out of time

00:56:23,019 --> 00:56:28,589
let's just look at the last slide and

00:56:32,219 --> 00:56:38,229
yeah so it's really awesome that you all

00:56:36,219 --> 00:56:40,059
came and tried this I know the setup is

00:56:38,229 --> 00:56:42,940
rough and the code is rough I hope you

00:56:40,059 --> 00:56:44,079
at least got a sense of like why you

00:56:42,940 --> 00:56:47,109
want to have a bill to swim across your

00:56:44,079 --> 00:56:48,910
full stack again if you if you have the

00:56:47,109 --> 00:56:50,739
energy check out Gregg stock at 5:30

00:56:48,910 --> 00:56:52,029
also if you want to stop by the ng

00:56:50,739 --> 00:56:55,599
hackathon

00:56:52,029 --> 00:56:57,759
I have irresponsibly committed myself to

00:56:55,599 --> 00:56:59,739
writing a Basel rule for Cyprus IO which

00:56:57,759 --> 00:57:01,539
I know nothing about but it's how hard

00:56:59,739 --> 00:57:03,309
could it be so we can try hacking on

00:57:01,539 --> 00:57:04,779
some basil stuff so come by there if you

00:57:03,309 --> 00:57:06,670
want to do more hacking even if you want

00:57:04,779 --> 00:57:09,249
to just ask some questions about this

00:57:06,670 --> 00:57:11,499
demo we've been working on and again you

00:57:09,249 --> 00:57:13,690
can the slides and I'll post the video

00:57:11,499 --> 00:57:15,999
eventually to this go link and if you

00:57:13,690 --> 00:57:17,380
ran basil you can come get a shirt so

00:57:15,999 --> 00:57:18,759
I'm sorry that's where we gonna be a

00:57:17,380 --> 00:57:22,770
traffic jam but we'll do our best to

00:57:18,759 --> 00:57:25,849
distribute them thank you

00:57:22,770 --> 00:57:25,849

YouTube URL: https://www.youtube.com/watch?v=1KDDIhcQORM


