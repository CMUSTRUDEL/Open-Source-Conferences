Title: Build Times and Bundle Sizes with Angular Ivy | Joel Parks | Lightning Talks 2021 #ngconf
Publication date: 2021-05-31
Playlist: ng-conf 2021 Lightning Talks
Description: 
	In this talk, Joel Discuss the changes made in Angular Ivy to help decrease build times and improve bundle sizes.

Learn the best ways to build reliable web applications, write quality code, choose scalable architectures, and create effective automated tests at the Reliable Web Summit this August 26-27, 2021. Powered by the team at ng-conf.

Get your ticket ðŸ‘‰ https://reliablewebsummit.com/

ng-conf is a multi-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1000's of developers from across the globe join together to attend talks and workshops by the Angular team and other community experts. 

Follow us on twitter https://twitter.com/ngconfâ€‹ 
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:04,820 --> 00:00:07,869
[Music]

00:00:08,240 --> 00:00:10,320
all right

00:00:08,639 --> 00:00:12,719
so today i'm going to be talking about

00:00:10,320 --> 00:00:15,280
improving build speed and bundle sizes

00:00:12,719 --> 00:00:17,039
with angular iv just a brief

00:00:15,280 --> 00:00:17,760
introduction my name is joel i work as a

00:00:17,039 --> 00:00:20,320
member of the

00:00:17,760 --> 00:00:22,640
the wijma team for grape city which is a

00:00:20,320 --> 00:00:26,240
web components library

00:00:22,640 --> 00:00:29,279
so let's see so first off

00:00:26,240 --> 00:00:31,119
is uh what is angular ivy um iv is

00:00:29,279 --> 00:00:33,200
angular's newest compiler

00:00:31,119 --> 00:00:34,559
it replaces the view engine compiler

00:00:33,200 --> 00:00:37,360
which has been angular's

00:00:34,559 --> 00:00:39,360
default compiler since angular 4. it

00:00:37,360 --> 00:00:41,440
came out with angular 8 and has become

00:00:39,360 --> 00:00:42,879
angular's default compiler since angular

00:00:41,440 --> 00:00:44,640
9.

00:00:42,879 --> 00:00:46,320
there were really two key points that

00:00:44,640 --> 00:00:47,840
the angular team was trying to make here

00:00:46,320 --> 00:00:49,760
with the change from

00:00:47,840 --> 00:00:51,280
view engine to ivy and that is to reach

00:00:49,760 --> 00:00:52,879
better build times through more

00:00:51,280 --> 00:00:54,879
incremental compilation

00:00:52,879 --> 00:00:58,879
and to reach better bundle sizes to

00:00:54,879 --> 00:01:01,120
improve tree shaking compatibility

00:00:58,879 --> 00:01:02,160
now just a quick overview on bundling

00:01:01,120 --> 00:01:04,080
and tree shaking

00:01:02,160 --> 00:01:05,760
so bundling is the optimization

00:01:04,080 --> 00:01:07,680
technique that allows us to merge

00:01:05,760 --> 00:01:09,760
multiple javascript files into

00:01:07,680 --> 00:01:12,080
fewer files and that allows us to reduce

00:01:09,760 --> 00:01:14,560
the number of page requests users

00:01:12,080 --> 00:01:16,479
users make to the server along pages to

00:01:14,560 --> 00:01:18,640
render more quickly

00:01:16,479 --> 00:01:20,320
tree shaking is a term used in the

00:01:18,640 --> 00:01:21,520
javascript context for dead code

00:01:20,320 --> 00:01:23,439
elimination

00:01:21,520 --> 00:01:25,840
the execution flows of a program can be

00:01:23,439 --> 00:01:26,159
represented by a tree of function calls

00:01:25,840 --> 00:01:27,920
so

00:01:26,159 --> 00:01:30,079
functions that are never called can be

00:01:27,920 --> 00:01:30,640
shaken or removed from the tree and not

00:01:30,079 --> 00:01:34,159
included

00:01:30,640 --> 00:01:34,159
in the file final bundle

00:01:34,479 --> 00:01:37,759
two of the more popular ways that we

00:01:36,479 --> 00:01:42,000
bundle applications

00:01:37,759 --> 00:01:44,320
is by using common js and es modules

00:01:42,000 --> 00:01:45,840
these are both bundlers that you can use

00:01:44,320 --> 00:01:49,280
to shrink the

00:01:45,840 --> 00:01:51,759
the number of files that you're serving

00:01:49,280 --> 00:01:53,360
now you want to avoid using common js to

00:01:51,759 --> 00:01:55,680
bundle your applications

00:01:53,360 --> 00:01:57,119
commongs results in larger bundle sizes

00:01:55,680 --> 00:01:58,799
when building

00:01:57,119 --> 00:02:01,040
it's designed to be used on server-side

00:01:58,799 --> 00:02:02,960
applications so it's not optimized

00:02:01,040 --> 00:02:04,399
to be used on client-side applications

00:02:02,960 --> 00:02:06,479
and the iv compiler

00:02:04,399 --> 00:02:08,879
also at this point warns you if you're

00:02:06,479 --> 00:02:10,879
bundling with common js

00:02:08,879 --> 00:02:13,840
and you can see here just a quick little

00:02:10,879 --> 00:02:16,319
code snippet of import functionality

00:02:13,840 --> 00:02:16,959
the top one is common js import and the

00:02:16,319 --> 00:02:19,840
bottom one

00:02:16,959 --> 00:02:22,000
is yes modules as you can see in the

00:02:19,840 --> 00:02:23,840
common gs you're actually able to pass

00:02:22,000 --> 00:02:25,520
things like variables into the file

00:02:23,840 --> 00:02:28,480
paths whereas uh

00:02:25,520 --> 00:02:29,840
with es modules it has to be a static

00:02:28,480 --> 00:02:32,000
string

00:02:29,840 --> 00:02:33,920
and the reason that commonjs can take

00:02:32,000 --> 00:02:35,599
dynamic approaches like this

00:02:33,920 --> 00:02:38,959
is uh because how dependencies are

00:02:35,599 --> 00:02:40,800
loaded common.js loads at runtime

00:02:38,959 --> 00:02:42,800
they're loaded instantiated and

00:02:40,800 --> 00:02:44,480
evaluated all at once

00:02:42,800 --> 00:02:46,080
and this is this is what allows us to do

00:02:44,480 --> 00:02:47,680
things like past variables in the file

00:02:46,080 --> 00:02:49,280
paths

00:02:47,680 --> 00:02:51,280
now because this is all done at runtime

00:02:49,280 --> 00:02:54,000
tree shaking is pretty hard to do

00:02:51,280 --> 00:02:55,280
with common jazz now es modules are more

00:02:54,000 --> 00:02:57,680
static like as you saw

00:02:55,280 --> 00:02:59,280
passing in a static string instead of a

00:02:57,680 --> 00:03:02,400
variable into the file path so that

00:02:59,280 --> 00:03:04,720
makes them more statically analyzable

00:03:02,400 --> 00:03:07,120
the loading instantiating and evaluation

00:03:04,720 --> 00:03:09,360
is broken up into three different phases

00:03:07,120 --> 00:03:10,319
and they aren't required to be performed

00:03:09,360 --> 00:03:11,840
at the same time

00:03:10,319 --> 00:03:15,040
meaning that we can perform more

00:03:11,840 --> 00:03:15,040
effective tree shaking

00:03:15,599 --> 00:03:19,360
um ivy can make better use of es modules

00:03:18,640 --> 00:03:21,200
and bundling

00:03:19,360 --> 00:03:22,800
the view engine because of how iv

00:03:21,200 --> 00:03:24,640
updates the dom versus how the view

00:03:22,800 --> 00:03:26,560
engine would do it

00:03:24,640 --> 00:03:27,840
when the view engine updates the dom and

00:03:26,560 --> 00:03:30,319
you can kind of see this in the

00:03:27,840 --> 00:03:32,080
view engine render pipeline image it

00:03:30,319 --> 00:03:34,159
makes a note of all the associations in

00:03:32,080 --> 00:03:35,040
the html properties and typescript

00:03:34,159 --> 00:03:36,799
properties

00:03:35,040 --> 00:03:38,640
um it then creates a binding between

00:03:36,799 --> 00:03:40,480
these associations

00:03:38,640 --> 00:03:42,799
when angular gets notified of a change

00:03:40,480 --> 00:03:44,400
all of the bindings get re-evaluated and

00:03:42,799 --> 00:03:45,280
the changed binding is marked and

00:03:44,400 --> 00:03:47,760
updated

00:03:45,280 --> 00:03:49,440
and then the template data is is taken

00:03:47,760 --> 00:03:51,200
by the angular interpreter

00:03:49,440 --> 00:03:54,000
and transformed into the dom with the

00:03:51,200 --> 00:03:54,000
latest updates

00:03:54,400 --> 00:03:57,680
with ivy it gets rid of the template

00:03:57,200 --> 00:03:59,200
data

00:03:57,680 --> 00:04:01,840
and handing that off to the angular

00:03:59,200 --> 00:04:03,120
interpreter so that's no longer included

00:04:01,840 --> 00:04:05,040
instead you have a set of template

00:04:03,120 --> 00:04:07,599
instructions that are generated using

00:04:05,040 --> 00:04:09,519
the template html that we write

00:04:07,599 --> 00:04:11,519
the template instructions then hold the

00:04:09,519 --> 00:04:13,360
logic that instantiates components

00:04:11,519 --> 00:04:15,120
creates dom nodes and runs change

00:04:13,360 --> 00:04:17,280
detection so you can see here

00:04:15,120 --> 00:04:18,639
it goes directly from the template html

00:04:17,280 --> 00:04:20,720
to the template instructions

00:04:18,639 --> 00:04:22,320
into the dom you don't need to include

00:04:20,720 --> 00:04:23,840
the angular interpreter with that

00:04:22,320 --> 00:04:25,280
anymore

00:04:23,840 --> 00:04:26,800
that means that there's less that we

00:04:25,280 --> 00:04:30,400
need to include when building and

00:04:26,800 --> 00:04:32,639
bundling our our final application

00:04:30,400 --> 00:04:34,479
and uh finally we get to the actual

00:04:32,639 --> 00:04:36,880
bundle size decreases that you should

00:04:34,479 --> 00:04:38,639
expect to see so for small and large

00:04:36,880 --> 00:04:39,520
applications the angular team says that

00:04:38,639 --> 00:04:41,759
you should expect

00:04:39,520 --> 00:04:44,560
around a 20 to 30 percent decrease in

00:04:41,759 --> 00:04:46,400
size of the bundle outputs

00:04:44,560 --> 00:04:48,560
for medium sized applications it's a

00:04:46,400 --> 00:04:51,280
little bit smaller

00:04:48,560 --> 00:04:51,919
um so in there you're likely to see 15

00:04:51,280 --> 00:04:54,639
to 20

00:04:51,919 --> 00:04:56,320
instead of 20 to 30 percent um and then

00:04:54,639 --> 00:04:56,720
we've actually done some testing with

00:04:56,320 --> 00:04:59,680
our

00:04:56,720 --> 00:05:00,560
own uh component library for for uh

00:04:59,680 --> 00:05:02,560
bundling so

00:05:00,560 --> 00:05:03,919
as you can see in the uh grid on the

00:05:02,560 --> 00:05:07,520
left here uh

00:05:03,919 --> 00:05:09,759
the second column is the final size in

00:05:07,520 --> 00:05:12,160
kilobytes for ivy and the second or the

00:05:09,759 --> 00:05:13,919
third column is for the view engine

00:05:12,160 --> 00:05:15,440
and then the final column is the

00:05:13,919 --> 00:05:16,639
percentage decrease that we're seeing

00:05:15,440 --> 00:05:19,520
between bundling with

00:05:16,639 --> 00:05:20,720
iv and the view engine and then down at

00:05:19,520 --> 00:05:25,199
the bottom you can see the average

00:05:20,720 --> 00:05:27,039
percent decrease is about 30 percent

00:05:25,199 --> 00:05:29,039
and then we get to improve build times

00:05:27,039 --> 00:05:31,120
so in the view engine compiler

00:05:29,039 --> 00:05:32,560
uh each build would force angular to

00:05:31,120 --> 00:05:33,360
recompile everything inside of your

00:05:32,560 --> 00:05:34,880
module

00:05:33,360 --> 00:05:36,400
and it would do so to check to see what

00:05:34,880 --> 00:05:38,080
had been changed

00:05:36,400 --> 00:05:39,680
um the reason that it did this was

00:05:38,080 --> 00:05:43,039
because components could be using

00:05:39,680 --> 00:05:44,960
internal details of another component

00:05:43,039 --> 00:05:46,880
in the iv compiler each component

00:05:44,960 --> 00:05:49,600
references the directives and components

00:05:46,880 --> 00:05:51,440
it uses only by their public apis

00:05:49,600 --> 00:05:53,039
and if you modify an internal detail of

00:05:51,440 --> 00:05:55,120
a component or directive

00:05:53,039 --> 00:05:56,639
the application will automatically know

00:05:55,120 --> 00:05:58,800
what other components use the code

00:05:56,639 --> 00:06:01,600
that's been modified and it only updates

00:05:58,800 --> 00:06:03,520
those components

00:06:01,600 --> 00:06:06,880
and this kind of leads into the ahead of

00:06:03,520 --> 00:06:09,280
time compilation becoming the default

00:06:06,880 --> 00:06:11,199
with ivs improved build times angular

00:06:09,280 --> 00:06:12,560
team is made ahead of time compilation

00:06:11,199 --> 00:06:15,680
the default compile

00:06:12,560 --> 00:06:18,319
compilation method over just in time

00:06:15,680 --> 00:06:20,000
the benefits of using aot compilation

00:06:18,319 --> 00:06:21,600
are things like faster rendering fewer

00:06:20,000 --> 00:06:23,759
asynchronous requests

00:06:21,600 --> 00:06:24,800
smaller angular framework download size

00:06:23,759 --> 00:06:26,639
uh detect

00:06:24,800 --> 00:06:28,720
template errors earlier and better

00:06:26,639 --> 00:06:31,120
security

00:06:28,720 --> 00:06:32,720
and that's it um that is all that you

00:06:31,120 --> 00:06:33,680
need to really know to get started with

00:06:32,720 --> 00:06:35,600
uh

00:06:33,680 --> 00:06:47,520
improving bundle sizes and build times

00:06:35,600 --> 00:06:47,520

YouTube URL: https://www.youtube.com/watch?v=TTVyEPKwR5Q


