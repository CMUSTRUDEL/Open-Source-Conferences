Title: Less Angular Could be More Angular | John Papa | Lightning Talks 2021 #ngconf
Publication date: 2021-05-31
Playlist: ng-conf 2021 Lightning Talks
Description: 
	In this talk, John Papa discusses how you can simplify your code without losing any of the functionality.

https://github.com/johnpapa/angular-what-if 

Learn the best ways to build reliable web applications, write quality code, choose scalable architectures, and create effective automated tests at the Reliable Web Summit this August 26-27, 2021. Powered by the team at ng-conf.

Get your ticket ðŸ‘‰ https://reliablewebsummit.com/

ng-conf is a multi-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1000's of developers from across the globe join together to attend talks and workshops by the Angular team and other community experts.

Follow us on twitter https://twitter.com/ngconfâ€‹ 
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:04,820 --> 00:00:07,869
[Music]

00:00:08,480 --> 00:00:12,559
great and i want to start out by just

00:00:10,160 --> 00:00:14,080
talking to rudy for a moment about

00:00:12,559 --> 00:00:16,400
we're at an angular conference and this

00:00:14,080 --> 00:00:18,240
is an angular world so we have to think

00:00:16,400 --> 00:00:19,199
about what are we doing with our angular

00:00:18,240 --> 00:00:20,960
technology

00:00:19,199 --> 00:00:22,880
and it's not just the problem we're in

00:00:20,960 --> 00:00:23,519
so i want everybody to step back for a

00:00:22,880 --> 00:00:25,439
minute

00:00:23,519 --> 00:00:27,279
and think about what we've been doing

00:00:25,439 --> 00:00:30,000
for the many years for

00:00:27,279 --> 00:00:31,279
a lot of us i'll share my screen here so

00:00:30,000 --> 00:00:33,360
you can kind of get a sense for where

00:00:31,279 --> 00:00:36,559
i'm going

00:00:33,360 --> 00:00:40,160
so the title of my talk is less angular

00:00:36,559 --> 00:00:40,480
is more angular and my name is john papa

00:00:40,160 --> 00:00:42,800
and

00:00:40,480 --> 00:00:44,640
some of you may know me from ng-conf or

00:00:42,800 --> 00:00:46,320
other places on the web

00:00:44,640 --> 00:00:47,360
if you can find me afterwards up on

00:00:46,320 --> 00:00:48,960
twitter if you'd like to have more of a

00:00:47,360 --> 00:00:49,600
conversation about this because i hope

00:00:48,960 --> 00:00:51,440
to get you

00:00:49,600 --> 00:00:54,000
asking more questions than getting

00:00:51,440 --> 00:00:55,520
answers during this talk

00:00:54,000 --> 00:00:58,079
during today's keynote we heard some

00:00:55,520 --> 00:00:59,359
great new things and the theme of today

00:00:58,079 --> 00:01:01,440
was pretty interesting i don't know

00:00:59,359 --> 00:01:03,520
about you here's what i picked out

00:01:01,440 --> 00:01:04,559
i picked out that inline sas is coming

00:01:03,520 --> 00:01:07,119
into our components

00:01:04,559 --> 00:01:08,320
that was a key attribute there and it's

00:01:07,119 --> 00:01:10,799
unlocking new things

00:01:08,320 --> 00:01:11,760
as well as optional ng modules are on

00:01:10,799 --> 00:01:13,119
their way

00:01:11,760 --> 00:01:15,200
what will that mean for our future

00:01:13,119 --> 00:01:17,680
developments optional zones

00:01:15,200 --> 00:01:18,560
that'd be great too and also don't

00:01:17,680 --> 00:01:21,280
forget

00:01:18,560 --> 00:01:22,720
eslint being used instead of tslint

00:01:21,280 --> 00:01:24,000
there was also the protractor

00:01:22,720 --> 00:01:26,880
announcement too

00:01:24,000 --> 00:01:28,560
so what do these things mean if we see

00:01:26,880 --> 00:01:30,960
the forest for the trees

00:01:28,560 --> 00:01:31,600
we look back at many years of angular

00:01:30,960 --> 00:01:33,920
development

00:01:31,600 --> 00:01:35,439
12 different versions right we've all

00:01:33,920 --> 00:01:36,000
been through a lot of changes through

00:01:35,439 --> 00:01:38,159
this

00:01:36,000 --> 00:01:39,280
and things have grown what's really been

00:01:38,159 --> 00:01:40,640
happening

00:01:39,280 --> 00:01:42,079
let's go back in the time machine and

00:01:40,640 --> 00:01:44,000
think about angular when we first

00:01:42,079 --> 00:01:46,399
started years ago with this

00:01:44,000 --> 00:01:48,000
the product had a different environment

00:01:46,399 --> 00:01:50,399
it was really the king of the hill

00:01:48,000 --> 00:01:52,479
there were no other major competitors

00:01:50,399 --> 00:01:54,720
other than jquery which is still huge

00:01:52,479 --> 00:01:56,399
out there for this web framework world

00:01:54,720 --> 00:01:58,240
and the browser was very different the

00:01:56,399 --> 00:02:00,960
ecosystem was different typescript

00:01:58,240 --> 00:02:02,479
didn't exist early on so a lot of things

00:02:00,960 --> 00:02:04,000
had to be baked into angular

00:02:02,479 --> 00:02:07,360
back then to really make things more

00:02:04,000 --> 00:02:09,119
productive and then the web got better

00:02:07,360 --> 00:02:10,239
so what might our future look like

00:02:09,119 --> 00:02:12,080
knowing what some of the things are

00:02:10,239 --> 00:02:13,360
coming already

00:02:12,080 --> 00:02:14,800
i'm here to talk to you about a couple

00:02:13,360 --> 00:02:16,480
things we're going to take a look at

00:02:14,800 --> 00:02:19,360
three pieces of angular that i think

00:02:16,480 --> 00:02:20,720
you might want to consider so i flip out

00:02:19,360 --> 00:02:22,720
of our demo here

00:02:20,720 --> 00:02:25,040
what you're going to see is two

00:02:22,720 --> 00:02:26,319
applications left hand and right hand

00:02:25,040 --> 00:02:28,319
on the one side you'll see an

00:02:26,319 --> 00:02:29,760
application that says mfc

00:02:28,319 --> 00:02:31,360
on the right hand you'll see one that

00:02:29,760 --> 00:02:33,760
says sfc

00:02:31,360 --> 00:02:35,519
these stand for multi-file components

00:02:33,760 --> 00:02:37,360
versus single file components i've

00:02:35,519 --> 00:02:38,800
written the same application with both

00:02:37,360 --> 00:02:40,080
styles

00:02:38,800 --> 00:02:42,400
now just to keep the color codes the

00:02:40,080 --> 00:02:45,360
same the red here is the multi

00:02:42,400 --> 00:02:46,800
and the purple is the single file the

00:02:45,360 --> 00:02:48,000
first thing you might notice is that in

00:02:46,800 --> 00:02:50,640
angular

00:02:48,000 --> 00:02:52,640
we always had this multi-file component

00:02:50,640 --> 00:02:54,400
let's zoom in for a moment on this

00:02:52,640 --> 00:02:55,360
here we can see all of our components on

00:02:54,400 --> 00:02:57,040
the left and you can see there's a

00:02:55,360 --> 00:02:59,680
folder for every component

00:02:57,040 --> 00:03:00,080
we have our html typescript and css or

00:02:59,680 --> 00:03:02,959
sas

00:03:00,080 --> 00:03:04,000
split out also tests if you want those

00:03:02,959 --> 00:03:05,760
well we can do that

00:03:04,000 --> 00:03:08,000
and that worked for a while but why did

00:03:05,760 --> 00:03:10,000
we do that originally a lot of these

00:03:08,000 --> 00:03:12,159
things came up to a couple of reasons

00:03:10,000 --> 00:03:14,159
and here's two that i hear the most one

00:03:12,159 --> 00:03:17,120
is separation of concerns

00:03:14,159 --> 00:03:19,040
well let me tell you something angular's

00:03:17,120 --> 00:03:20,959
opinionated so am i

00:03:19,040 --> 00:03:22,800
separation concerns does not mean

00:03:20,959 --> 00:03:25,120
separation of files

00:03:22,800 --> 00:03:26,799
it doesn't the concerns are not the

00:03:25,120 --> 00:03:28,480
files

00:03:26,799 --> 00:03:30,239
the second thing we hear the most about

00:03:28,480 --> 00:03:31,680
though and this is true

00:03:30,239 --> 00:03:33,280
is back when angular's created the

00:03:31,680 --> 00:03:35,360
tooling really couldn't support having

00:03:33,280 --> 00:03:36,239
html and sas and typescript or

00:03:35,360 --> 00:03:39,280
javascript

00:03:36,239 --> 00:03:40,879
in the same file today we can

00:03:39,280 --> 00:03:42,720
and because of that frameworks like

00:03:40,879 --> 00:03:43,599
react and view and spelt have all taken

00:03:42,720 --> 00:03:46,159
advantage of that

00:03:43,599 --> 00:03:47,760
and they have single file components so

00:03:46,159 --> 00:03:49,599
if we take a look now at the same

00:03:47,760 --> 00:03:51,040
application side by side

00:03:49,599 --> 00:03:52,720
first thing you'll notice is in this

00:03:51,040 --> 00:03:54,239
components folder on the left

00:03:52,720 --> 00:03:56,720
you can see it's taking up the entire

00:03:54,239 --> 00:03:58,879
explorer tree just for the components

00:03:56,720 --> 00:04:00,879
on the right it's only taking up about

00:03:58,879 --> 00:04:03,599
two inches worth on my screen

00:04:00,879 --> 00:04:06,400
it's about a quarter the size i went

00:04:03,599 --> 00:04:08,000
from 15 components and 45 files down to

00:04:06,400 --> 00:04:09,599
15 components

00:04:08,000 --> 00:04:11,760
you're saying what's the big deal i can

00:04:09,599 --> 00:04:13,200
jump around have you ever been inside of

00:04:11,760 --> 00:04:14,879
one of these files and you're like oh

00:04:13,200 --> 00:04:17,199
i'm inside of this auth failed component

00:04:14,879 --> 00:04:18,239
over here and the auth failed component

00:04:17,199 --> 00:04:19,600
isn't really uh

00:04:18,239 --> 00:04:21,440
it's not really doing much but i want to

00:04:19,600 --> 00:04:23,280
look at different pieces of it so then i

00:04:21,440 --> 00:04:25,280
have to jump over to the html

00:04:23,280 --> 00:04:26,720
oh and where's that ng model being used

00:04:25,280 --> 00:04:27,520
i got to jump back over to my type

00:04:26,720 --> 00:04:29,759
script

00:04:27,520 --> 00:04:31,520
and yeah we can do that and it works but

00:04:29,759 --> 00:04:32,960
it's context switching

00:04:31,520 --> 00:04:34,880
so it would be better is just to stay in

00:04:32,960 --> 00:04:35,759
the same context so in single file

00:04:34,880 --> 00:04:38,320
components

00:04:35,759 --> 00:04:38,960
we put the whole thing in line and we

00:04:38,320 --> 00:04:41,600
still get

00:04:38,960 --> 00:04:43,360
full support for intellisense and the

00:04:41,600 --> 00:04:44,720
language service features so i go to my

00:04:43,360 --> 00:04:46,560
heroes component here

00:04:44,720 --> 00:04:48,720
and let's jump down to see something

00:04:46,560 --> 00:04:50,560
like our heroes

00:04:48,720 --> 00:04:51,840
if i come into here you can see i get

00:04:50,560 --> 00:04:54,479
full intellisense

00:04:51,840 --> 00:04:56,880
just like i do inside of an html file

00:04:54,479 --> 00:04:58,880
same thing happens for my uh css

00:04:56,880 --> 00:05:00,240
and now the inline sas is coming we can

00:04:58,880 --> 00:05:02,880
also bake that into here

00:05:00,240 --> 00:05:04,400
as well so a lot of things are really

00:05:02,880 --> 00:05:07,120
opening up the doors and it's not just

00:05:04,400 --> 00:05:09,199
less files it's keeping my focus in one

00:05:07,120 --> 00:05:12,000
file for not jumping around

00:05:09,199 --> 00:05:13,039
and it also helps me see all my code in

00:05:12,000 --> 00:05:15,039
one place

00:05:13,039 --> 00:05:16,479
if i want to i can minimize and do other

00:05:15,039 --> 00:05:18,160
things inside the tooling

00:05:16,479 --> 00:05:19,759
but for me this has been a big big

00:05:18,160 --> 00:05:21,520
efficiency that i've been using

00:05:19,759 --> 00:05:23,120
and i'm super excited that sas is coming

00:05:21,520 --> 00:05:25,280
to it as well

00:05:23,120 --> 00:05:27,280
well number two how many of you out

00:05:25,280 --> 00:05:30,479
there use data in your apps

00:05:27,280 --> 00:05:33,759
i know i do in every app i have so http

00:05:30,479 --> 00:05:35,199
client is awesome now again why do we

00:05:33,759 --> 00:05:36,960
use http client

00:05:35,199 --> 00:05:38,240
back when angular is created there was

00:05:36,960 --> 00:05:40,880
no great

00:05:38,240 --> 00:05:42,800
fetch api in the browser we couldn't

00:05:40,880 --> 00:05:44,880
really rely on this everywhere

00:05:42,800 --> 00:05:46,479
well now fast forward and we have that

00:05:44,880 --> 00:05:48,720
so why aren't we using fetch

00:05:46,479 --> 00:05:50,800
instead of http client you might think

00:05:48,720 --> 00:05:52,479
well it just comes with it it's easier

00:05:50,800 --> 00:05:53,840
well think about react view and stealth

00:05:52,479 --> 00:05:55,680
again what are they using

00:05:53,840 --> 00:05:57,039
or other web frameworks or javascript

00:05:55,680 --> 00:05:59,120
just plain javascript

00:05:57,039 --> 00:06:01,199
they're using the fetch apis and if they

00:05:59,120 --> 00:06:03,600
need something more complex and involved

00:06:01,199 --> 00:06:05,280
they can use things like axios so let's

00:06:03,600 --> 00:06:06,639
take a look at our application and we'll

00:06:05,280 --> 00:06:07,919
jump over to see what that might look

00:06:06,639 --> 00:06:09,759
like

00:06:07,919 --> 00:06:11,039
so here's an angular service called the

00:06:09,759 --> 00:06:12,960
hero service

00:06:11,039 --> 00:06:15,520
and you'll notice i'm pulling in axios

00:06:12,960 --> 00:06:17,520
and i wrote a function called get heroes

00:06:15,520 --> 00:06:19,440
and that get heroes function calls axios

00:06:17,520 --> 00:06:21,919
with an async await

00:06:19,440 --> 00:06:24,000
using promises to get my data back very

00:06:21,919 --> 00:06:25,759
simple code very easy to use

00:06:24,000 --> 00:06:28,240
but notice what you're not seeing as

00:06:25,759 --> 00:06:30,000
well it's not just http switched out for

00:06:28,240 --> 00:06:33,600
axios in this case

00:06:30,000 --> 00:06:36,319
or fetch notice what you're not seeing

00:06:33,600 --> 00:06:38,160
i'll give you a moment where's the

00:06:36,319 --> 00:06:40,960
observables where's rxjs

00:06:38,160 --> 00:06:42,880
where is that piece now rxjs is

00:06:40,960 --> 00:06:44,240
extremely powerful and valuable

00:06:42,880 --> 00:06:45,680
but do you ever just get weighed down

00:06:44,240 --> 00:06:46,319
when you're getting into a technology

00:06:45,680 --> 00:06:48,000
and thinking

00:06:46,319 --> 00:06:49,759
i don't really need this yet i don't

00:06:48,000 --> 00:06:52,560
really need to graduate to learning

00:06:49,759 --> 00:06:54,240
all these concepts well with this you

00:06:52,560 --> 00:06:56,639
don't have to with fetch and axios you

00:06:54,240 --> 00:06:57,919
can jump right the promises

00:06:56,639 --> 00:06:59,840
so let me ask you another thing we could

00:06:57,919 --> 00:07:01,440
get to number three

00:06:59,840 --> 00:07:03,520
do you notice anything else about this

00:07:01,440 --> 00:07:06,960
that's missing in this file

00:07:03,520 --> 00:07:10,080
it's called hero service that's a hint

00:07:06,960 --> 00:07:12,560
where's the class this code has no class

00:07:10,080 --> 00:07:14,240
pun intended so there's no class up here

00:07:12,560 --> 00:07:16,080
just a bunch of functions

00:07:14,240 --> 00:07:17,680
how does that work there's no providers

00:07:16,080 --> 00:07:19,039
there's no dependency injection there's

00:07:17,680 --> 00:07:20,880
no services

00:07:19,039 --> 00:07:22,080
when you teach angular we teach all

00:07:20,880 --> 00:07:25,120
these concepts

00:07:22,080 --> 00:07:27,680
but do we always need a formal class

00:07:25,120 --> 00:07:29,919
do we always need the decorators do we

00:07:27,680 --> 00:07:31,360
always need dependency injection

00:07:29,919 --> 00:07:34,319
sometimes we just want a function

00:07:31,360 --> 00:07:35,280
or a const or a let or a var and that's

00:07:34,319 --> 00:07:37,440
okay

00:07:35,280 --> 00:07:38,800
that's standard javascript and we should

00:07:37,440 --> 00:07:41,919
support that right

00:07:38,800 --> 00:07:44,960
and guess what it all just works it all

00:07:41,919 --> 00:07:47,280
just works so i flip back over to my

00:07:44,960 --> 00:07:48,639
presentation here

00:07:47,280 --> 00:07:50,240
a couple considerations that i brought

00:07:48,639 --> 00:07:51,680
to you today one is think about using

00:07:50,240 --> 00:07:52,479
single file components of what that

00:07:51,680 --> 00:07:54,720
would mean

00:07:52,479 --> 00:07:56,160
sam julian great speaker here at ngconf

00:07:54,720 --> 00:07:58,400
has got some great articles and videos

00:07:56,160 --> 00:08:00,319
on how to do this today

00:07:58,400 --> 00:08:03,120
and inline sas is going to help us and

00:08:00,319 --> 00:08:04,879
consider using fetch for basic http

00:08:03,120 --> 00:08:06,160
why go to axios if you're going to do

00:08:04,879 --> 00:08:08,160
something like interceptors

00:08:06,160 --> 00:08:10,080
you can jump right to that catch my talk

00:08:08,160 --> 00:08:11,520
tomorrow for more about interceptors as

00:08:10,080 --> 00:08:13,039
well

00:08:11,520 --> 00:08:15,199
and last on this javascript and

00:08:13,039 --> 00:08:16,000
typescript modules just work across the

00:08:15,199 --> 00:08:17,599
board

00:08:16,000 --> 00:08:20,400
think about using those perhaps instead

00:08:17,599 --> 00:08:22,000
of using a service in some cases

00:08:20,400 --> 00:08:24,080
so concepts in angular you think about

00:08:22,000 --> 00:08:24,879
the learner coming in we have to learn

00:08:24,080 --> 00:08:28,319
components

00:08:24,879 --> 00:08:31,120
absolutely ng modules hp client

00:08:28,319 --> 00:08:32,719
rxjs services dependency injection

00:08:31,120 --> 00:08:35,519
decorators

00:08:32,719 --> 00:08:36,719
based on what i was talking about today

00:08:35,519 --> 00:08:37,680
they just have to learn components in

00:08:36,719 --> 00:08:40,240
javascript

00:08:37,680 --> 00:08:43,839
and that's it think about the concept

00:08:40,240 --> 00:08:45,440
captain how things can weigh you down

00:08:43,839 --> 00:08:47,200
so i hope that you check this out and i

00:08:45,440 --> 00:08:48,000
hope i left you some more questions and

00:08:47,200 --> 00:08:50,240
answers today

00:08:48,000 --> 00:08:51,279
and think about where could we go what

00:08:50,240 --> 00:08:54,080
if

00:08:51,279 --> 00:08:56,000
angular didn't have some of these things

00:08:54,080 --> 00:08:56,720
but still was just as feature rich and

00:08:56,000 --> 00:08:58,160
robust

00:08:56,720 --> 00:09:00,560
and lets you really unlock your

00:08:58,160 --> 00:09:03,040
potential so less angular

00:09:00,560 --> 00:09:03,920
is more check it out here in my github

00:09:03,040 --> 00:09:09,100
demo

00:09:03,920 --> 00:09:12,149
thanks for your time everybody

00:09:09,100 --> 00:09:12,149
[Music]

00:09:13,839 --> 00:09:15,920

YouTube URL: https://www.youtube.com/watch?v=jEfqP31cBuI


