Title: Lazy Loading Recipes | Pankaj Parkar | Lightning Talks 2021 #ngconf
Publication date: 2021-05-31
Playlist: ng-conf 2021 Lightning Talks
Description: 
	In this talk, variety of Lazy loading recipes are demonstrated.
1. Dynamic component loading
2. Lazy component loading using import (SCAM)
3. Dynamic configuration based form rendering by importing components lazily.  

Slides - https://slides.com/pankajparkar/lazy-loading-recipes
Github - https://github.com/pankajparkar/lazy-loading-recipes

Learn the best ways to build reliable web applications, write quality code, choose scalable architectures, and create effective automated tests at the Reliable Web Summit this August 26-27, 2021. Powered by the team at ng-conf.

Get your ticket ðŸ‘‰ https://reliablewebsummit.com/

ng-conf is a multi-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1000's of developers from across the globe join together to attend talks and workshops by the Angular team and other community experts.

Follow us on twitter https://twitter.com/ngconfâ€‹ 
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:04,820 --> 00:00:07,869
[Music]

00:00:08,480 --> 00:00:11,519
okay

00:00:09,440 --> 00:00:14,719
so in this session we are going to learn

00:00:11,519 --> 00:00:17,520
about different lazy loading recipes

00:00:14,719 --> 00:00:19,600
so quick introduction about myself so

00:00:17,520 --> 00:00:21,279
i'm pankaj parker i'm a msnbp and

00:00:19,600 --> 00:00:23,439
angularj working as a

00:00:21,279 --> 00:00:25,279
technology consultant at verse 2 so if

00:00:23,439 --> 00:00:28,400
you want to follow me you can follow me

00:00:25,279 --> 00:00:29,279
using pankajparkarandal so let's begin

00:00:28,400 --> 00:00:31,760
with the talk

00:00:29,279 --> 00:00:34,160
so first of all what is lazy loading so

00:00:31,760 --> 00:00:36,719
basically lazy loading is a technique of

00:00:34,160 --> 00:00:37,520
loading relevant resources on demand so

00:00:36,719 --> 00:00:40,480
basically

00:00:37,520 --> 00:00:42,239
load whatever required so we are going

00:00:40,480 --> 00:00:45,200
to see four recipes of it

00:00:42,239 --> 00:00:46,079
so one by one this is dynamic loading

00:00:45,200 --> 00:00:48,719
component then

00:00:46,079 --> 00:00:49,200
import scan then config based simple

00:00:48,719 --> 00:00:51,360
form

00:00:49,200 --> 00:00:53,440
and then config based configuration

00:00:51,360 --> 00:00:55,680
based the complex form

00:00:53,440 --> 00:00:56,719
so let's first start so this is very

00:00:55,680 --> 00:00:59,440
simple technique

00:00:56,719 --> 00:01:00,239
we must have used it so basically we

00:00:59,440 --> 00:01:02,800
have a button

00:01:00,239 --> 00:01:04,400
on html and we are calling show business

00:01:02,800 --> 00:01:06,960
card method to display show

00:01:04,400 --> 00:01:09,119
a display business card and what it is

00:01:06,960 --> 00:01:11,360
what it basically does is

00:01:09,119 --> 00:01:13,520
inside a component in using view child

00:01:11,360 --> 00:01:16,159
it gets hold of the container

00:01:13,520 --> 00:01:16,880
and inside show business car method you

00:01:16,159 --> 00:01:19,280
will see that

00:01:16,880 --> 00:01:21,360
first we use factory resolver and we

00:01:19,280 --> 00:01:23,600
resolve the factory of component

00:01:21,360 --> 00:01:25,759
and whatever the instance we get based

00:01:23,600 --> 00:01:26,560
on that we create a component and put it

00:01:25,759 --> 00:01:28,640
inside

00:01:26,560 --> 00:01:30,880
this ng container so that's why dynamic

00:01:28,640 --> 00:01:32,799
component create component the comp

00:01:30,880 --> 00:01:35,280
factory that we have created

00:01:32,799 --> 00:01:36,880
and if you want to pass in other inputs

00:01:35,280 --> 00:01:38,880
properties so you can use just

00:01:36,880 --> 00:01:40,960
instance dot profile so profile object

00:01:38,880 --> 00:01:44,159
being passed cool so let's look at the

00:01:40,960 --> 00:01:46,320
demo of it so this is application

00:01:44,159 --> 00:01:47,280
so when you click on this code you will

00:01:46,320 --> 00:01:49,119
see that this

00:01:47,280 --> 00:01:50,320
particular content dynamically gets

00:01:49,119 --> 00:01:52,479
generated so

00:01:50,320 --> 00:01:53,680
also one more i have one more example

00:01:52,479 --> 00:01:56,479
show user list so

00:01:53,680 --> 00:01:58,000
it also does the same thing so let's

00:01:56,479 --> 00:02:01,439
move on to the next

00:01:58,000 --> 00:02:03,520
next recipe which is imports and scan so

00:02:01,439 --> 00:02:04,560
import is nothing but es6 import but

00:02:03,520 --> 00:02:06,799
what is scam

00:02:04,560 --> 00:02:07,840
so scam is single component angular

00:02:06,799 --> 00:02:10,560
module

00:02:07,840 --> 00:02:12,080
okay so over here i am going to use a

00:02:10,560 --> 00:02:14,319
mini weather application

00:02:12,080 --> 00:02:15,440
and that is going to be embedded in on

00:02:14,319 --> 00:02:18,400
our application

00:02:15,440 --> 00:02:20,239
or inside our application on demand so

00:02:18,400 --> 00:02:21,440
this will help us to save some bits of

00:02:20,239 --> 00:02:23,520
application

00:02:21,440 --> 00:02:24,879
and maybe this could be of size 5 or 10

00:02:23,520 --> 00:02:26,800
kb and we will be

00:02:24,879 --> 00:02:27,920
saving that so let's see how we can do

00:02:26,800 --> 00:02:29,760
that so

00:02:27,920 --> 00:02:31,840
so to implement scam module what you

00:02:29,760 --> 00:02:33,280
have to do is insert your component file

00:02:31,840 --> 00:02:36,160
define your component

00:02:33,280 --> 00:02:37,200
and underneath that define your module

00:02:36,160 --> 00:02:40,800
and export it

00:02:37,200 --> 00:02:43,200
so that it should work okay

00:02:40,800 --> 00:02:44,160
so how to use this so same way we will

00:02:43,200 --> 00:02:46,080
have a button and

00:02:44,160 --> 00:02:47,599
on top of on top of that we will call

00:02:46,080 --> 00:02:49,200
one method

00:02:47,599 --> 00:02:52,319
and then we will using view child we

00:02:49,200 --> 00:02:55,760
will go to get hold of the ng container

00:02:52,319 --> 00:02:56,319
and same way inside load uh load weather

00:02:55,760 --> 00:02:58,000
widget

00:02:56,319 --> 00:02:59,680
method you will see that we have used

00:02:58,000 --> 00:03:02,159
async and

00:02:59,680 --> 00:03:03,680
this is a very important line what we

00:03:02,159 --> 00:03:05,920
are doing over here is

00:03:03,680 --> 00:03:06,959
we are we are pointing to the dashboard

00:03:05,920 --> 00:03:09,519
component file

00:03:06,959 --> 00:03:11,280
and we are loading it lazily so it will

00:03:09,519 --> 00:03:13,040
wait until it gets loaded

00:03:11,280 --> 00:03:14,720
and next three lines are same that we

00:03:13,040 --> 00:03:17,840
have seen in the last

00:03:14,720 --> 00:03:18,959
slide to load the component lazily let's

00:03:17,840 --> 00:03:21,920
look at this

00:03:18,959 --> 00:03:23,200
example quickly so this is it now let's

00:03:21,920 --> 00:03:25,200
look at the network tab

00:03:23,200 --> 00:03:27,200
once you click on the load weather

00:03:25,200 --> 00:03:28,720
widget it load the load weather widget

00:03:27,200 --> 00:03:30,879
file on that instance

00:03:28,720 --> 00:03:32,400
so we save some bits and this is

00:03:30,879 --> 00:03:34,879
dynamically loaded

00:03:32,400 --> 00:03:35,920
nice let's move on to the third third

00:03:34,879 --> 00:03:38,239
recipe

00:03:35,920 --> 00:03:40,000
which is config based simple form so for

00:03:38,239 --> 00:03:42,959
this we are going to use ng component

00:03:40,000 --> 00:03:44,799
outlet directive let's see how so

00:03:42,959 --> 00:03:47,040
suppose we have a controls

00:03:44,799 --> 00:03:48,959
and that is array which is holding

00:03:47,040 --> 00:03:50,400
having component object and each

00:03:48,959 --> 00:03:53,120
component have import

00:03:50,400 --> 00:03:53,920
okay and to display this controls on the

00:03:53,120 --> 00:03:56,959
html

00:03:53,920 --> 00:03:59,280
we have used ng4 okay and

00:03:56,959 --> 00:04:00,560
this ng for is nothing but doing looping

00:03:59,280 --> 00:04:02,879
over controls and

00:04:00,560 --> 00:04:05,120
using ng component outlet and we are

00:04:02,879 --> 00:04:06,959
doing control dot component

00:04:05,120 --> 00:04:08,799
uh so it has a promise so we are using

00:04:06,959 --> 00:04:10,640
async to resolve it so automatically it

00:04:08,799 --> 00:04:12,799
will display the particular currency

00:04:10,640 --> 00:04:15,840
selector number or slide component

00:04:12,799 --> 00:04:17,440
so let's see see the example so as soon

00:04:15,840 --> 00:04:17,759
as you click on this you will see this

00:04:17,440 --> 00:04:19,280
four

00:04:17,759 --> 00:04:21,919
files are loaded and you can see the

00:04:19,280 --> 00:04:22,720
form right now there is a ng component

00:04:21,919 --> 00:04:25,120
outlet have

00:04:22,720 --> 00:04:27,040
one issue where you cannot pass inputs

00:04:25,120 --> 00:04:30,080
and output props to it

00:04:27,040 --> 00:04:32,000
so let's try to resolve that so that's

00:04:30,080 --> 00:04:34,560
the fourth recipe

00:04:32,000 --> 00:04:35,680
so over here i did something more some

00:04:34,560 --> 00:04:37,440
more things like

00:04:35,680 --> 00:04:38,960
now we have components map which is

00:04:37,440 --> 00:04:42,000
currency number select and

00:04:38,960 --> 00:04:44,240
slider and we have controls as well

00:04:42,000 --> 00:04:46,080
so controls is nothing but this data can

00:04:44,240 --> 00:04:46,720
be configuration can be retrieved from

00:04:46,080 --> 00:04:48,880
the server

00:04:46,720 --> 00:04:50,639
and as soon as we receive this we start

00:04:48,880 --> 00:04:53,440
create a form basically we will

00:04:50,639 --> 00:04:55,759
loop over the controls and we will you

00:04:53,440 --> 00:04:59,360
know add those control inside a form

00:04:55,759 --> 00:05:00,560
using add control method and on html how

00:04:59,360 --> 00:05:04,800
it looks like is

00:05:00,560 --> 00:05:06,800
same ng for and then we will be using

00:05:04,800 --> 00:05:08,800
in addition to ng complete component

00:05:06,800 --> 00:05:11,120
outlet component

00:05:08,800 --> 00:05:11,919
directive we will be using ndc dynamic

00:05:11,120 --> 00:05:13,680
inputs

00:05:11,919 --> 00:05:15,680
and over there we will be passing

00:05:13,680 --> 00:05:18,080
compound control inputs which are the

00:05:15,680 --> 00:05:18,880
input props basically different input

00:05:18,080 --> 00:05:22,560
values

00:05:18,880 --> 00:05:24,320
so let's look at this demo

00:05:22,560 --> 00:05:25,840
so now this complete form has been

00:05:24,320 --> 00:05:28,400
rendered using uh

00:05:25,840 --> 00:05:29,759
now you know dynamic component rendering

00:05:28,400 --> 00:05:30,880
and you can see that some values are

00:05:29,759 --> 00:05:32,560
populated

00:05:30,880 --> 00:05:34,000
and this is using reactive form and you

00:05:32,560 --> 00:05:37,360
can see that at the bottom

00:05:34,000 --> 00:05:41,600
the values are getting reflected

00:05:37,360 --> 00:05:43,840
so these are the basic recipes that we

00:05:41,600 --> 00:05:45,039
we were looking at and you can you know

00:05:43,840 --> 00:05:46,720
follow them and

00:05:45,039 --> 00:05:48,400
make some performance improvement your

00:05:46,720 --> 00:05:50,320
application in your application as and

00:05:48,400 --> 00:05:53,840
when needed

00:05:50,320 --> 00:05:53,840
yeah thank you

00:05:54,860 --> 00:06:01,860

YouTube URL: https://www.youtube.com/watch?v=-8GG8wJmPGI


