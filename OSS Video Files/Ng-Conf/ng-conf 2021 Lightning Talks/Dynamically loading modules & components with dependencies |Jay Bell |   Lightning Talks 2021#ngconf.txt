Title: Dynamically loading modules & components with dependencies |Jay Bell |   Lightning Talks 2021#ngconf
Publication date: 2021-05-31
Playlist: ng-conf 2021 Lightning Talks
Description: 
	By using the same dynamic import method the router uses and the Angular Injector, he demonstrates how to lazy load a module and renders a component in an outlet based off of any observable in your application.

Learn the best ways to build reliable web applications, write quality code, choose scalable architectures, and create effective automated tests at the Reliable Web Summit this August 26-27, 2021. Powered by the team at ng-conf.

Get your ticket ðŸ‘‰ https://reliablewebsummit.com/

ng-conf is a multi-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1000's of developers from across the globe join together to attend talks and workshops by the Angular team and other community experts.

Follow us on twitter https://twitter.com/ngconfâ€‹ 
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:04,820 --> 00:00:07,869
[Music]

00:00:08,400 --> 00:00:11,759
hey everyone

00:00:09,120 --> 00:00:12,960
um i don't have as pretty screens our

00:00:11,759 --> 00:00:14,320
slideshows but we're going to go through

00:00:12,960 --> 00:00:16,400
a bit of a live live demo

00:00:14,320 --> 00:00:17,520
i'm glad the prior one was talking about

00:00:16,400 --> 00:00:18,880
lazy loading because we're gonna be

00:00:17,520 --> 00:00:20,000
talking talking a little bit about that

00:00:18,880 --> 00:00:22,640
as well today

00:00:20,000 --> 00:00:23,359
um so to begin we're just gonna take a

00:00:22,640 --> 00:00:25,359
look at this

00:00:23,359 --> 00:00:26,720
super simple demo app what we're gonna

00:00:25,359 --> 00:00:29,119
be doing here is

00:00:26,720 --> 00:00:30,320
dynamically rendering components um into

00:00:29,119 --> 00:00:32,800
the dom using the

00:00:30,320 --> 00:00:35,360
view container ref um through

00:00:32,800 --> 00:00:38,239
observables um so here what we have is

00:00:35,360 --> 00:00:39,200
the red box is just the normal container

00:00:38,239 --> 00:00:41,280
uh the orange

00:00:39,200 --> 00:00:42,879
is a box that's going to be using the

00:00:41,280 --> 00:00:43,600
view container ref and then rendering

00:00:42,879 --> 00:00:46,079
bonus

00:00:43,600 --> 00:00:46,800
into it based off of the query params in

00:00:46,079 --> 00:00:49,520
neural

00:00:46,800 --> 00:00:49,840
so we can see if we choose query one

00:00:49,520 --> 00:00:52,640
this

00:00:49,840 --> 00:00:54,960
is actually a component that uses a view

00:00:52,640 --> 00:00:58,000
container ref to render internally

00:00:54,960 --> 00:01:01,039
um inside the div itself uh rather

00:00:58,000 --> 00:01:04,800
than using uh the selector

00:01:01,039 --> 00:01:04,800
directly so you can see if we switch it

00:01:04,960 --> 00:01:08,080
it goes back and forth so how does this

00:01:07,040 --> 00:01:11,200
work um

00:01:08,080 --> 00:01:13,680
one of the drawbacks i found with

00:01:11,200 --> 00:01:15,280
dynamically rendering components is if

00:01:13,680 --> 00:01:16,880
they have dependencies then those

00:01:15,280 --> 00:01:19,360
dependencies need to be

00:01:16,880 --> 00:01:20,240
defined somewhere else in you know a

00:01:19,360 --> 00:01:22,000
module

00:01:20,240 --> 00:01:23,840
uh whether they be in the root or the

00:01:22,000 --> 00:01:26,560
component you're using here

00:01:23,840 --> 00:01:29,040
um but if you want to lazy load entire

00:01:26,560 --> 00:01:31,360
modules and only render those components

00:01:29,040 --> 00:01:32,799
uh in certain cases then you want those

00:01:31,360 --> 00:01:35,200
dependencies to be

00:01:32,799 --> 00:01:36,799
possibly um isolated out into the

00:01:35,200 --> 00:01:39,200
generated bundles right

00:01:36,799 --> 00:01:40,400
so what's happening here we have just

00:01:39,200 --> 00:01:41,840
our base selector

00:01:40,400 --> 00:01:44,159
and then we have this dynamic outlet

00:01:41,840 --> 00:01:45,600
right here that loads this component

00:01:44,159 --> 00:01:47,680
in uh this is essentially with the

00:01:45,600 --> 00:01:48,880
component factory uh depending on if

00:01:47,680 --> 00:01:51,200
you're running it locally

00:01:48,880 --> 00:01:52,880
or um if you're actually compiled using

00:01:51,200 --> 00:01:54,560
an iv um it'll be a little bit different

00:01:52,880 --> 00:01:56,640
but we'll look at that in a second

00:01:54,560 --> 00:01:58,000
what this is doing is on the right is

00:01:56,640 --> 00:02:00,240
the component code for it

00:01:58,000 --> 00:02:02,320
we just have this view container rest

00:02:00,240 --> 00:02:04,719
and on factory change

00:02:02,320 --> 00:02:06,159
it will load the outlet so it'll clear

00:02:04,719 --> 00:02:08,479
it first so that we don't

00:02:06,159 --> 00:02:09,920
double up the components if you don't

00:02:08,479 --> 00:02:11,760
clear it then every time you reload it

00:02:09,920 --> 00:02:13,200
there'll be a new record below it

00:02:11,760 --> 00:02:16,000
um and then we just create the component

00:02:13,200 --> 00:02:18,480
with the factory this factory is pulled

00:02:16,000 --> 00:02:20,160
from the observable um from a library so

00:02:18,480 --> 00:02:23,360
let's take a quick look at

00:02:20,160 --> 00:02:25,760
what is happening there so

00:02:23,360 --> 00:02:26,400
here is the get component factor as i

00:02:25,760 --> 00:02:29,599
could show you

00:02:26,400 --> 00:02:31,120
here uh this is the query param

00:02:29,599 --> 00:02:32,959
component so this is what's actually

00:02:31,120 --> 00:02:36,319
being async into

00:02:32,959 --> 00:02:39,360
the rx dynamic outlet

00:02:36,319 --> 00:02:40,720
component and it has it's listening to

00:02:39,360 --> 00:02:44,480
the query params

00:02:40,720 --> 00:02:46,319
which then pipe that value into

00:02:44,480 --> 00:02:48,480
the get component factory which pulls

00:02:46,319 --> 00:02:51,280
from a manifest which we will talk about

00:02:48,480 --> 00:02:55,040
in a second

00:02:51,280 --> 00:02:56,480
so back to the service

00:02:55,040 --> 00:02:58,239
so what are we doing here we take the

00:02:56,480 --> 00:02:59,599
component id which in this case is being

00:02:58,239 --> 00:03:00,560
pulled from the query crown but it can

00:02:59,599 --> 00:03:02,560
be from

00:03:00,560 --> 00:03:04,239
pretty much anything you want i'm

00:03:02,560 --> 00:03:06,400
pulling it from group rams you could

00:03:04,239 --> 00:03:08,879
pull it from an ngrx store

00:03:06,400 --> 00:03:10,640
or route params pretty much any

00:03:08,879 --> 00:03:12,319
observable or string value

00:03:10,640 --> 00:03:14,879
you can use to pull from the manifest

00:03:12,319 --> 00:03:18,000
and then render that manifest

00:03:14,879 --> 00:03:20,800
so this works very

00:03:18,000 --> 00:03:21,920
similar to how lazy loading of routes

00:03:20,800 --> 00:03:24,959
works

00:03:21,920 --> 00:03:28,159
the configuration for these manifests

00:03:24,959 --> 00:03:28,720
looks like this so that probably looks

00:03:28,159 --> 00:03:31,040
super

00:03:28,720 --> 00:03:33,280
familiar if you use the angular router

00:03:31,040 --> 00:03:36,799
right you can either use loadchildren

00:03:33,280 --> 00:03:39,840
which will build its own

00:03:36,799 --> 00:03:40,239
bundle for that module or you can use

00:03:39,840 --> 00:03:43,440
the

00:03:40,239 --> 00:03:44,239
module directly so this is what we are

00:03:43,440 --> 00:03:46,560
using

00:03:44,239 --> 00:03:47,920
to reference uh when we pull from our

00:03:46,560 --> 00:03:49,920
query param

00:03:47,920 --> 00:03:52,560
build our component factory and then

00:03:49,920 --> 00:03:54,879
async that into the component

00:03:52,560 --> 00:03:56,560
so back to the service so we have our

00:03:54,879 --> 00:03:59,280
manifest we pulled that based on

00:03:56,560 --> 00:04:00,080
query one or query two from the selector

00:03:59,280 --> 00:04:03,120
drop down

00:04:00,080 --> 00:04:06,720
we call the load children function

00:04:03,120 --> 00:04:08,159
which is this here right or this

00:04:06,720 --> 00:04:08,610
so it's either a promise or it's not a

00:04:08,159 --> 00:04:10,319
promise

00:04:08,610 --> 00:04:12,319
[Music]

00:04:10,319 --> 00:04:14,640
we then pipe off of that um we can use

00:04:12,319 --> 00:04:16,479
promise to resolve to

00:04:14,640 --> 00:04:18,079
make it resolve regardless of its

00:04:16,479 --> 00:04:19,600
promise or not um and then turn that

00:04:18,079 --> 00:04:22,079
into an observable

00:04:19,600 --> 00:04:23,280
so here's where it differs a little bit

00:04:22,079 --> 00:04:25,759
if you're using a

00:04:23,280 --> 00:04:26,960
compiled bundle or not compiled bundle

00:04:25,759 --> 00:04:28,400
because if you're using the compiled

00:04:26,960 --> 00:04:29,759
bundle so it's built with

00:04:28,400 --> 00:04:31,440
you know optimization and build

00:04:29,759 --> 00:04:34,240
optimizer etc um

00:04:31,440 --> 00:04:35,199
you're going to have the ng module

00:04:34,240 --> 00:04:37,840
factory

00:04:35,199 --> 00:04:39,040
already if you're running it locally so

00:04:37,840 --> 00:04:40,320
just with ng-serve

00:04:39,040 --> 00:04:42,240
then you actually need to use the

00:04:40,320 --> 00:04:44,479
angular compiler which is injected

00:04:42,240 --> 00:04:47,280
to compile that module so that either

00:04:44,479 --> 00:04:50,160
way you get the ng module factory back

00:04:47,280 --> 00:04:51,360
once you have the factory we can create

00:04:50,160 --> 00:04:53,600
it using the

00:04:51,360 --> 00:04:54,960
either passed in injector if you want to

00:04:53,600 --> 00:04:57,919
override the injector

00:04:54,960 --> 00:04:58,880
or just the base angular injector at

00:04:57,919 --> 00:05:02,000
this point we now have

00:04:58,880 --> 00:05:03,759
a module ref which we can then

00:05:02,000 --> 00:05:05,840
use to find the component that we're

00:05:03,759 --> 00:05:08,560
going to try and render into our

00:05:05,840 --> 00:05:09,680
in our component which has a provider of

00:05:08,560 --> 00:05:10,880
dynamic component

00:05:09,680 --> 00:05:12,479
because modules can have multiple

00:05:10,880 --> 00:05:13,680
components right they can have multiple

00:05:12,479 --> 00:05:16,479
declarations

00:05:13,680 --> 00:05:17,360
um so this means that we need to tell

00:05:16,479 --> 00:05:19,520
this library

00:05:17,360 --> 00:05:21,280
what one we're rendering at this point

00:05:19,520 --> 00:05:23,360
we have our

00:05:21,280 --> 00:05:24,800
dynamic component type we can resolve

00:05:23,360 --> 00:05:28,000
the component factory

00:05:24,800 --> 00:05:29,840
and then return that back which would

00:05:28,000 --> 00:05:32,000
then return here

00:05:29,840 --> 00:05:33,120
which is an observable and then that

00:05:32,000 --> 00:05:36,240
emits

00:05:33,120 --> 00:05:39,440
we async it into dynamic outlet

00:05:36,240 --> 00:05:42,960
and then it's rendered into the div

00:05:39,440 --> 00:05:45,919
so um yeah that's

00:05:42,960 --> 00:05:46,320
how you render component modules um and

00:05:45,919 --> 00:05:49,039
if

00:05:46,320 --> 00:05:49,919
your module that you're rendering like

00:05:49,039 --> 00:05:52,560
these ones

00:05:49,919 --> 00:05:53,759
have to have dependencies that's totally

00:05:52,560 --> 00:05:54,800
fine you can import them into that

00:05:53,759 --> 00:05:58,240
module and they're

00:05:54,800 --> 00:06:00,479
loaded at module ref well ng module

00:05:58,240 --> 00:06:04,160
factor creation time

00:06:00,479 --> 00:06:06,000
um yeah so that is how you dynamically

00:06:04,160 --> 00:06:08,080
render components

00:06:06,000 --> 00:06:09,360
with dependencies based off of

00:06:08,080 --> 00:06:20,560
observables into

00:06:09,360 --> 00:06:20,560

YouTube URL: https://www.youtube.com/watch?v=IdVn-ZCr0UY


