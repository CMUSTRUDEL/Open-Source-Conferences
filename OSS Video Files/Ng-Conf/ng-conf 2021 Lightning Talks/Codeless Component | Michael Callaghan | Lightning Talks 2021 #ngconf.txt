Title: Codeless Component | Michael Callaghan | Lightning Talks 2021 #ngconf
Publication date: 2021-05-31
Playlist: ng-conf 2021 Lightning Talks
Description: 
	Angular components do not need to be complicated. In fact, with a little HTML and CSS, it is reasonably straightforward to build a component you can reuse in all your projects. In this talk, Michael Callaghan details the creation of a “Loading” indicator.

Learn the best ways to build reliable web applications, write quality code, choose scalable architectures, and create effective automated tests at the Reliable Web Summit this August 26-27, 2021. Powered by the team at ng-conf.

Get your ticket 👉 https://reliablewebsummit.com/

ng-conf is a multi-day Angular conference focused on delivering the highest quality training in the Angular JavaScript framework. 1000's of developers from across the globe join together to attend talks and workshops by the Angular team and other community experts.

Follow us on twitter https://twitter.com/ngconf​ 
Official Website: https://www.ng-conf.org/
Captions: 
	00:00:04,820 --> 00:00:07,869
[Music]

00:00:08,480 --> 00:00:11,440
so i'm mike callahan

00:00:09,840 --> 00:00:12,960
and today i'm going to talk about simple

00:00:11,440 --> 00:00:14,400
angular components

00:00:12,960 --> 00:00:16,880
the cool thing about angular components

00:00:14,400 --> 00:00:19,279
is they don't need to be complicated

00:00:16,880 --> 00:00:21,359
in fact with just a little html and css

00:00:19,279 --> 00:00:23,119
it's reasonably straightforward

00:00:21,359 --> 00:00:25,439
to build a component you can reuse in

00:00:23,119 --> 00:00:27,199
all your projects

00:00:25,439 --> 00:00:29,840
so over the next few minutes i'm going

00:00:27,199 --> 00:00:33,200
to show a complete angular component

00:00:29,840 --> 00:00:34,480
with no imperative code just basic html

00:00:33,200 --> 00:00:36,320
and css

00:00:34,480 --> 00:00:38,399
when we're done i'll provide a stack

00:00:36,320 --> 00:00:40,960
blitz link to the code so you can try it

00:00:38,399 --> 00:00:43,200
out on your own

00:00:40,960 --> 00:00:44,800
in one of my projects recently i needed

00:00:43,200 --> 00:00:46,480
to display a tiny little screen that

00:00:44,800 --> 00:00:48,320
simply tells the user that data is being

00:00:46,480 --> 00:00:49,680
loaded we've all seen them

00:00:48,320 --> 00:00:52,239
i thought about looking for something

00:00:49,680 --> 00:00:53,280
online or maybe even using ionic's

00:00:52,239 --> 00:00:55,120
loading controller

00:00:53,280 --> 00:00:56,480
but that felt too heavy for what i

00:00:55,120 --> 00:00:58,800
wanted

00:00:56,480 --> 00:01:00,719
so then i thought it shouldn't be too

00:00:58,800 --> 00:01:02,719
hard to build one myself right

00:01:00,719 --> 00:01:05,199
so i decided to spend some time writing

00:01:02,719 --> 00:01:08,080
my own to see how it goes

00:01:05,199 --> 00:01:10,320
i found a unique animated gif and got to

00:01:08,080 --> 00:01:10,320
work

00:01:10,479 --> 00:01:15,119
to start i used the angular cli to

00:01:12,720 --> 00:01:17,119
generate a new component named loading

00:01:15,119 --> 00:01:19,040
without any unit tests there's not going

00:01:17,119 --> 00:01:22,479
to be any executable code

00:01:19,040 --> 00:01:22,479
so there's really nothing to test

00:01:23,200 --> 00:01:26,560
inside the component the generated code

00:01:25,200 --> 00:01:28,240
looks like this

00:01:26,560 --> 00:01:29,840
it's just a visual component with no

00:01:28,240 --> 00:01:31,680
other behavior

00:01:29,840 --> 00:01:34,560
the component decorator tells us how the

00:01:31,680 --> 00:01:36,960
component is going to be defined

00:01:34,560 --> 00:01:38,880
selector defines the app's html named

00:01:36,960 --> 00:01:40,640
tag name

00:01:38,880 --> 00:01:43,360
the next two lines tell the angular

00:01:40,640 --> 00:01:45,920
component are the angular compiler and

00:01:43,360 --> 00:01:48,799
us where to find the markup and styles

00:01:45,920 --> 00:01:51,600
for the component respectively

00:01:48,799 --> 00:01:53,439
next is the empty class body itself with

00:01:51,600 --> 00:01:54,159
just those two empty functions which i

00:01:53,439 --> 00:01:57,840
don't need

00:01:54,159 --> 00:01:57,840
so i deleted them entirely

00:01:58,000 --> 00:02:01,040
and i replaced them with just two

00:01:59,439 --> 00:02:03,040
variables

00:02:01,040 --> 00:02:04,719
the input decorators tell angular to

00:02:03,040 --> 00:02:08,160
expose those two variables as

00:02:04,719 --> 00:02:09,920
attributes on the custom html tag

00:02:08,160 --> 00:02:12,080
label is going to be bound to some text

00:02:09,920 --> 00:02:14,160
in the html so that i can tell the user

00:02:12,080 --> 00:02:16,480
exactly what's being loaded

00:02:14,160 --> 00:02:19,599
shown allows the host to show or hide

00:02:16,480 --> 00:02:22,319
the component as needed

00:02:19,599 --> 00:02:24,319
now let's take a look at the markup the

00:02:22,319 --> 00:02:26,480
component itself consists of

00:02:24,319 --> 00:02:27,360
a singular div with a class called

00:02:26,480 --> 00:02:30,239
wrapper

00:02:27,360 --> 00:02:31,599
and a conditional class called hidden if

00:02:30,239 --> 00:02:34,720
the shown attribute is false

00:02:31,599 --> 00:02:37,280
the hidden class will be set inside this

00:02:34,720 --> 00:02:38,959
div are three more elements

00:02:37,280 --> 00:02:40,640
an image tag pointing at the animated

00:02:38,959 --> 00:02:42,080
gif i showed earlier

00:02:40,640 --> 00:02:44,560
an interesting option here would be to

00:02:42,080 --> 00:02:45,440
include encode the image as a base64

00:02:44,560 --> 00:02:47,120
string

00:02:45,440 --> 00:02:49,280
and include it directly in the image tag

00:02:47,120 --> 00:02:52,319
itself

00:02:49,280 --> 00:02:54,080
next a title represented by an h1 tag

00:02:52,319 --> 00:02:56,319
containing in my case a hard-coded

00:02:54,080 --> 00:02:57,760
message to the user

00:02:56,319 --> 00:02:59,920
and the final piece of content is

00:02:57,760 --> 00:03:03,280
paragraph tag with its text

00:02:59,920 --> 00:03:05,760
down to the input label the input

00:03:03,280 --> 00:03:06,640
label field on the component whatever

00:03:05,760 --> 00:03:08,640
the component

00:03:06,640 --> 00:03:10,239
whatever the host component passes as

00:03:08,640 --> 00:03:12,480
that label attribute will be displayed

00:03:10,239 --> 00:03:12,480
here

00:03:12,879 --> 00:03:17,120
the component style sheet handles all of

00:03:15,120 --> 00:03:18,560
its behavior and appearance

00:03:17,120 --> 00:03:20,560
start with some simple rules which i

00:03:18,560 --> 00:03:22,640
believe are self-explanatory

00:03:20,560 --> 00:03:24,480
i set the text size for the header the

00:03:22,640 --> 00:03:25,840
image size for the animation

00:03:24,480 --> 00:03:27,519
and the hidden class will set the

00:03:25,840 --> 00:03:30,480
component display to none completely

00:03:27,519 --> 00:03:32,239
hiding it from view

00:03:30,480 --> 00:03:34,000
the real magic happens in the wrapper

00:03:32,239 --> 00:03:37,280
class so i'll explain it

00:03:34,000 --> 00:03:38,640
in in pieces as i go the first few lines

00:03:37,280 --> 00:03:42,000
are just a bit of setup and shouldn't

00:03:38,640 --> 00:03:43,519
require a whole lot of explanation

00:03:42,000 --> 00:03:45,519
the component will be placed at an

00:03:43,519 --> 00:03:49,120
absolute position

00:03:45,519 --> 00:03:50,319
on this an absolute position on the

00:03:49,120 --> 00:03:51,599
screen and we'll have a fixed width and

00:03:50,319 --> 00:03:53,680
height

00:03:51,599 --> 00:03:55,200
the z index gives it a decent likelihood

00:03:53,680 --> 00:03:57,439
that no other elements will appear in

00:03:55,200 --> 00:03:59,360
front of it

00:03:57,439 --> 00:04:01,200
this next block positions the component

00:03:59,360 --> 00:04:02,319
100 pixels from the top of the screen

00:04:01,200 --> 00:04:05,120
and then it does something kind of

00:04:02,319 --> 00:04:07,760
clever the component's left side is set

00:04:05,120 --> 00:04:09,439
at 50 percent of the host's width

00:04:07,760 --> 00:04:11,439
then it sets a negative margin roughly

00:04:09,439 --> 00:04:12,959
equal to half the components width

00:04:11,439 --> 00:04:15,200
this effectively causes the entire

00:04:12,959 --> 00:04:17,199
component to be centered horizontally

00:04:15,200 --> 00:04:19,440
and the last block is really cool the

00:04:17,199 --> 00:04:20,880
components outline is defined as a 95

00:04:19,440 --> 00:04:23,520
percent opaque solid

00:04:20,880 --> 00:04:24,960
gray line really really wide this ends

00:04:23,520 --> 00:04:26,479
up becoming the overlay

00:04:24,960 --> 00:04:28,000
covering the host component with the

00:04:26,479 --> 00:04:31,600
with its outline so you can't select

00:04:28,000 --> 00:04:33,120
anything behind it here's how you use it

00:04:31,600 --> 00:04:34,560
you simply include the loading tag

00:04:33,120 --> 00:04:35,280
anywhere on the page you want to use it

00:04:34,560 --> 00:04:37,680
set the two in

00:04:35,280 --> 00:04:40,160
attribute the input attributes as you

00:04:37,680 --> 00:04:40,160
see fit

00:04:41,040 --> 00:04:46,080
when it's all assembled and working this

00:04:43,199 --> 00:04:46,080
is what it might look like

00:04:46,880 --> 00:04:49,680
pretty cool wouldn't you say

00:04:49,919 --> 00:04:53,600
and that's all there is to it like i

00:04:51,840 --> 00:04:54,720
said angular components don't need to be

00:04:53,600 --> 00:04:57,360
complicated

00:04:54,720 --> 00:04:58,639
in fact sometimes i don't even need any

00:04:57,360 --> 00:05:00,160
imperative code

00:04:58,639 --> 00:05:02,479
in just a few minutes i have shown how

00:05:00,160 --> 00:05:04,080
to create a simple loading component

00:05:02,479 --> 00:05:05,280
that can easily be used anywhere in your

00:05:04,080 --> 00:05:07,360
application

00:05:05,280 --> 00:05:08,800
further with just a little more effort i

00:05:07,360 --> 00:05:09,680
could build a completely standalone

00:05:08,800 --> 00:05:12,960
component

00:05:09,680 --> 00:05:14,160
that i can drop into any project i wish

00:05:12,960 --> 00:05:15,919
if you want to play around with the code

00:05:14,160 --> 00:05:16,639
yourself it's available on stack blitz

00:05:15,919 --> 00:05:25,840
at the url

00:05:16,639 --> 00:05:25,840
shown here

00:05:26,880 --> 00:05:28,960

YouTube URL: https://www.youtube.com/watch?v=ZiBi0PYgP-w


