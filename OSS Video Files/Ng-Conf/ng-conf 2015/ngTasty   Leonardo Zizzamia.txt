Title: ngTasty   Leonardo Zizzamia
Publication date: 2015-03-05
Playlist: ng-conf 2015
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,000 --> 00:00:02,910
[APPLAUSE]

00:00:02,910 --> 00:00:04,660


00:00:04,660 --> 00:00:06,860
LEONARDO ZIZZAMIA: So my name is Leonardo Zizzamia,

00:00:06,860 --> 00:00:09,440
and today let's do some Tasty benchmark.

00:00:09,440 --> 00:00:12,057
I'm going to talk about ngTasty and building

00:00:12,057 --> 00:00:13,640
high-performance measurable directive.

00:00:13,640 --> 00:00:16,510


00:00:16,510 --> 00:00:18,390
So I work at Twitter.

00:00:18,390 --> 00:00:21,160
We do a lot of stuff with Angular, especially

00:00:21,160 --> 00:00:22,360
for internal tools.

00:00:22,360 --> 00:00:27,400
And recently, every team has a custom solution.

00:00:27,400 --> 00:00:30,370
We just build different share component.

00:00:30,370 --> 00:00:35,755
And in September, I started writing this collection

00:00:35,755 --> 00:00:39,260
of UI component named ngTasty.

00:00:39,260 --> 00:00:43,020
And one of the main goals was actually-- because in my team,

00:00:43,020 --> 00:00:45,920
we have few internal tools.

00:00:45,920 --> 00:00:48,330
We tried to make something open source,

00:00:48,330 --> 00:00:52,060
so we can learn from the outside,

00:00:52,060 --> 00:00:54,470
get feedback from outside, and also, inside,

00:00:54,470 --> 00:00:57,130
have some sort of shared component collection

00:00:57,130 --> 00:01:00,070
between all of the different projects-- with filter,

00:01:00,070 --> 00:01:02,350
service, directive.

00:01:02,350 --> 00:01:05,640
But there were a few problem.

00:01:05,640 --> 00:01:08,840
The other few team who were working Twitter with Angular--

00:01:08,840 --> 00:01:10,950
and every team is a solution.

00:01:10,950 --> 00:01:13,460
But there was nothing to share components

00:01:13,460 --> 00:01:15,140
between all of the different teams

00:01:15,140 --> 00:01:17,805
to share the architecture, or just

00:01:17,805 --> 00:01:21,170
share all the different experiences

00:01:21,170 --> 00:01:26,600
by using Angular inside a big organization, like Twitter.

00:01:26,600 --> 00:01:30,070
So in November, me and other few guys,

00:01:30,070 --> 00:01:33,040
we just create an Angular group inside Twitter.

00:01:33,040 --> 00:01:35,300
And one of the main goals was like, OK,

00:01:35,300 --> 00:01:39,230
let's make a collection, a UI component collection,

00:01:39,230 --> 00:01:41,310
across all the different teams.

00:01:41,310 --> 00:01:45,240
And also, weekly, meet for like a few hours

00:01:45,240 --> 00:01:50,510
and just collaborate with each other in some sort of Angular

00:01:50,510 --> 00:01:51,980
community internal to Twitter.

00:01:51,980 --> 00:01:54,530


00:01:54,530 --> 00:01:56,440
And it went great-- it went pretty great.

00:01:56,440 --> 00:01:57,814
We released internally ngTwitter.

00:01:57,814 --> 00:02:00,600


00:02:00,600 --> 00:02:06,630
It just started with ngTasty as an open source core base.

00:02:06,630 --> 00:02:09,370
And on top of that, we built all the custom solutions

00:02:09,370 --> 00:02:11,380
that we need internally.

00:02:11,380 --> 00:02:15,080
And in the end, we named it ngTwitter.

00:02:15,080 --> 00:02:18,841
So when I started building ngTasty, there are a few things

00:02:18,841 --> 00:02:20,340
like, well, what do they want to do?

00:02:20,340 --> 00:02:23,040
What would they want to this collection UI component?

00:02:23,040 --> 00:02:26,420
And I said, OK, I want something easy to reuse,

00:02:26,420 --> 00:02:28,870
easy to test, easy to benchmark.

00:02:28,870 --> 00:02:32,400
And easy to reuse, easy to test-- there are many article,

00:02:32,400 --> 00:02:35,480
video talk to learn about it.

00:02:35,480 --> 00:02:41,050
And pretty much almost nothing about benchmark for Angular.

00:02:41,050 --> 00:02:44,450
I was like research around, going to the Angular repo

00:02:44,450 --> 00:02:47,000
and looking at all the different code.

00:02:47,000 --> 00:02:48,922
And at one point, I discovered-- late

00:02:48,922 --> 00:02:54,030
in October-- benchpress inside the Angular 1 repo.

00:02:54,030 --> 00:02:54,990
I said, wait.

00:02:54,990 --> 00:02:56,710
This thing looks pretty good.

00:02:56,710 --> 00:02:59,080
So I started using the hold version,

00:02:59,080 --> 00:03:01,710
and now I am going to show also some live demo

00:03:01,710 --> 00:03:03,720
of the new version.

00:03:03,720 --> 00:03:08,780
And the problem-- I ask this question.

00:03:08,780 --> 00:03:09,610
OK.

00:03:09,610 --> 00:03:12,182
I've used some benchmarking tool in the past.

00:03:12,182 --> 00:03:13,140
They are kind of rough.

00:03:13,140 --> 00:03:15,837
It's not a really easy way to benchmark.

00:03:15,837 --> 00:03:17,420
But when I started using benchpresses,

00:03:17,420 --> 00:03:19,920
say, that actually is pretty easy.

00:03:19,920 --> 00:03:24,580
So it is a pretty easy way to performance test

00:03:24,580 --> 00:03:26,910
with a benchpress.

00:03:26,910 --> 00:03:32,980
And the other thing is there is some repeated manual work

00:03:32,980 --> 00:03:34,400
to create a benchmark-- like, you

00:03:34,400 --> 00:03:38,360
need some scaffold [? file ?] for just running everything.

00:03:38,360 --> 00:03:39,890
And it's kind of boring.

00:03:39,890 --> 00:03:42,020
So I said, OK.

00:03:42,020 --> 00:03:44,030
I'm already focused to create a good code

00:03:44,030 --> 00:03:45,360
that you write a lot of tests.

00:03:45,360 --> 00:03:47,290
I don't have time to write the benchmark.

00:03:47,290 --> 00:03:52,190
So I said, how I can make faster that thing-- faster write

00:03:52,190 --> 00:03:53,450
benchmark benchmark?

00:03:53,450 --> 00:03:57,790
So in the end, I create a [? yoman ?] generator named

00:03:57,790 --> 00:04:00,840
just generator-benchpress.

00:04:00,840 --> 00:04:03,140
So you're doing [? npn ?] install generator-benchpress.

00:04:03,140 --> 00:04:04,910
You have a [? yoman ?] generator.

00:04:04,910 --> 00:04:08,250
You can just do a yo benchpress and the name

00:04:08,250 --> 00:04:11,630
on the benchmark you want to create.

00:04:11,630 --> 00:04:16,240
And what it actually does is scuffle all the files you

00:04:16,240 --> 00:04:18,600
need to run in this benchmark.

00:04:18,600 --> 00:04:20,240
So we have the protractor file.

00:04:20,240 --> 00:04:24,620
Because benchpress, as Jeff this morning said,

00:04:24,620 --> 00:04:26,900
runs with a protractor-- the new one.

00:04:26,900 --> 00:04:28,670
So you have the configuration file.

00:04:28,670 --> 00:04:32,240
And you have, in this case, this case study.

00:04:32,240 --> 00:04:38,920
We have the ngTasty index HTML, with all the HTML you need,

00:04:38,920 --> 00:04:43,290
and the JavaScript, and the spec benchmark file

00:04:43,290 --> 00:04:45,750
with all the action, like destroy this element,

00:04:45,750 --> 00:04:48,120
recreate, and do that again.

00:04:48,120 --> 00:04:52,230
So let's see actually how is this code.

00:04:52,230 --> 00:04:52,870
So I'm here.

00:04:52,870 --> 00:04:56,100
I'm in the ngTasty repo.

00:04:56,100 --> 00:04:58,740
There are all different components-- filter, service.

00:04:58,740 --> 00:05:01,750
I'll go in the Benchmark folder inside ngTasty.

00:05:01,750 --> 00:05:04,460


00:05:04,460 --> 00:05:06,280
I think it's good enough.

00:05:06,280 --> 00:05:07,060
OK.

00:05:07,060 --> 00:05:09,310
So there are the HTML files.

00:05:09,310 --> 00:05:11,650
The HTML file is just like you select

00:05:11,650 --> 00:05:15,120
the case you want to benchmark.

00:05:15,120 --> 00:05:20,830
And for this directive, I'm going to destroy the element

00:05:20,830 --> 00:05:22,950
and recreate it a few times.

00:05:22,950 --> 00:05:27,690
And this is just a basic case, like bind a text variable

00:05:27,690 --> 00:05:30,600
with just HelloPerf.

00:05:30,600 --> 00:05:31,300
Pretty simple.

00:05:31,300 --> 00:05:35,990
And you have to destroy DOM and create a DOM function.

00:05:35,990 --> 00:05:39,510
And in the spec file instead, there

00:05:39,510 --> 00:05:42,800
is the action that I'm actually doing-- destroy the DOM.

00:05:42,800 --> 00:05:44,960
I recreated a DOM.

00:05:44,960 --> 00:05:47,470
Benchpress is going to loop in that a few times

00:05:47,470 --> 00:05:52,170
and get all of the different results.

00:05:52,170 --> 00:05:56,640
So let's see actually how does it look.

00:05:56,640 --> 00:05:58,327
It's here.

00:05:58,327 --> 00:05:59,760
Here we go.

00:05:59,760 --> 00:06:01,489
So here I select the Case 1.

00:06:01,489 --> 00:06:02,280
There is HelloPerf.

00:06:02,280 --> 00:06:05,325
And what I'm going to do is just destroy and recreate, destroy,

00:06:05,325 --> 00:06:06,292
recreate.

00:06:06,292 --> 00:06:08,000
I mean, I don't want to do that manually.

00:06:08,000 --> 00:06:12,440
So I'm going to take benchpress and just run that for me.

00:06:12,440 --> 00:06:16,070


00:06:16,070 --> 00:06:17,720
So benchpress is going to run.

00:06:17,720 --> 00:06:19,390
On the background, there is protractor

00:06:19,390 --> 00:06:21,140
that is running that case.

00:06:21,140 --> 00:06:24,346
And just do it a few times.

00:06:24,346 --> 00:06:25,211
AUDIENCE: Yeah!

00:06:25,211 --> 00:06:27,710
LEONARDO ZIZZAMIA: And here we are just there-- 1.3 minutes.

00:06:27,710 --> 00:06:29,740
It was a very basic benchmark.

00:06:29,740 --> 00:06:30,810
So this is the minimum.

00:06:30,810 --> 00:06:35,710
Let's actually do it in a real case.

00:06:35,710 --> 00:06:38,150
In ngTasty, one of the most expensive directives

00:06:38,150 --> 00:06:40,000
is the Table directive.

00:06:40,000 --> 00:06:42,950
And here, there is an implementation

00:06:42,950 --> 00:06:45,780
of a Sorting and Pagination table

00:06:45,780 --> 00:06:48,740
where I have my resource with the header and the rows.

00:06:48,740 --> 00:06:51,270
I'm passing inside of the Table directive.

00:06:51,270 --> 00:06:54,510
And one thing that I want you focus is on the top.

00:06:54,510 --> 00:06:58,010
It's wrote Watch Resource Collection.

00:06:58,010 --> 00:07:02,820
So ngTasty now is in the version 0.5,

00:07:02,820 --> 00:07:05,510
and lately, I give the opportunity

00:07:05,510 --> 00:07:09,600
to the user to decide the scope watch

00:07:09,600 --> 00:07:16,000
you want to use to refresh the data inside the table.

00:07:16,000 --> 00:07:19,140
As before, the default watch was just a div watch.

00:07:19,140 --> 00:07:20,050
It was working.

00:07:20,050 --> 00:07:20,950
It was great.

00:07:20,950 --> 00:07:23,060
But you know, a div watch is kind of expensive.

00:07:23,060 --> 00:07:25,870
So I said, OK, let's give the opportunity to a different API

00:07:25,870 --> 00:07:29,900
implementation to say, OK, I want to use the quality watch,

00:07:29,900 --> 00:07:31,885
the collection watch.

00:07:31,885 --> 00:07:34,485
The default one, in this case, is the reference watch.

00:07:34,485 --> 00:07:37,150


00:07:37,150 --> 00:07:38,870
So let's run the test in this case.

00:07:38,870 --> 00:07:40,100
Let's see how does work this.

00:07:40,100 --> 00:07:43,737


00:07:43,737 --> 00:07:45,570
So in the background, it's running the test.

00:07:45,570 --> 00:07:50,030
And it's doing all the different reference case.

00:07:50,030 --> 00:07:53,040
After, it's going to jump on the collection case.

00:07:53,040 --> 00:07:58,710
And in the end, the quality, or also as a deep watch.

00:07:58,710 --> 00:08:02,170


00:08:02,170 --> 00:08:06,800
So as we know, the deep watch is pretty expensive.

00:08:06,800 --> 00:08:11,800
So here, on the top right, we have 169 millisecond of time

00:08:11,800 --> 00:08:14,810
for scripting after we have the rendered time, the amount

00:08:14,810 --> 00:08:16,560
of garbage collector.

00:08:16,560 --> 00:08:19,820
And the collection one, instead, is nine milliseconds.

00:08:19,820 --> 00:08:24,430
And the reference is set seven milliseconds.

00:08:24,430 --> 00:08:27,673
So what I tried to understand by doing this benchmark-- when

00:08:27,673 --> 00:08:30,433
you're doing refactoring, when you try to always add

00:08:30,433 --> 00:08:32,099
the new feature, new functionality to do

00:08:32,099 --> 00:08:34,970
your directive, it's cool, because you need that feature.

00:08:34,970 --> 00:08:36,020
You write them.

00:08:36,020 --> 00:08:43,210
But sometime you say, OK, how is the speed of this new feature?

00:08:43,210 --> 00:08:44,920
How is it compared with another one?

00:08:44,920 --> 00:08:48,030
And also, for doing the same thing,

00:08:48,030 --> 00:08:50,990
if I have an API implementation in three different ways,

00:08:50,990 --> 00:08:52,360
which one is the faster one?

00:08:52,360 --> 00:08:55,350
Which one I should implement?

00:08:55,350 --> 00:08:59,260
And by benchpress, that is very easy to write, test.

00:08:59,260 --> 00:09:03,102
You can actually see very quickly that the reference one

00:09:03,102 --> 00:09:04,310
is the faster one, of course.

00:09:04,310 --> 00:09:06,690
The collection is slightly slower,

00:09:06,690 --> 00:09:08,900
but still, it's just 12 milliseconds.

00:09:08,900 --> 00:09:11,000
And the deep watch is pretty expensive,

00:09:11,000 --> 00:09:15,400
especially for the amount of memory that they keep.

00:09:15,400 --> 00:09:20,300
One thing that I want show is how this test was built.

00:09:20,300 --> 00:09:22,400
So this test-- it's running under this folder.

00:09:22,400 --> 00:09:24,490
So I'm always running-- so this was

00:09:24,490 --> 00:09:27,470
the test of the latest master version that

00:09:27,470 --> 00:09:29,440
is not released yet.

00:09:29,440 --> 00:09:33,390
And what I'm doing was just like create different case--

00:09:33,390 --> 00:09:37,640
so the reference case, the collection, the quality.

00:09:37,640 --> 00:09:39,110
Just select the radio button.

00:09:39,110 --> 00:09:43,150
And there is an ng-switch with all the different cases.

00:09:43,150 --> 00:09:44,910
So if you want to build your one,

00:09:44,910 --> 00:09:47,310
you just have different case studies,

00:09:47,310 --> 00:09:49,360
and you can go one to another, let's say,

00:09:49,360 --> 00:09:54,090
and analyze which one is the faster or slower.

00:09:54,090 --> 00:09:57,070
Here we have the collection one with the resource collection

00:09:57,070 --> 00:09:59,140
and the equality one.

00:09:59,140 --> 00:10:02,850
In this case, I'm just pointing to the Dist file.

00:10:02,850 --> 00:10:06,790
One thing that also the [? yoman ?] generator does

00:10:06,790 --> 00:10:11,700
is automatically download a specific version

00:10:11,700 --> 00:10:18,800
of your project.

00:10:18,800 --> 00:10:23,300
So in this way, for example, I'm just taking the Dist version.

00:10:23,300 --> 00:10:28,380
But if I want to run a different version of Angular,

00:10:28,380 --> 00:10:30,160
I can just keep a different Angular

00:10:30,160 --> 00:10:33,545
version in my Dist folder, near my Bower component.

00:10:33,545 --> 00:10:35,170
I just run it with a different version.

00:10:35,170 --> 00:10:37,920


00:10:37,920 --> 00:10:44,075
So we saw how you can compare the speed between all

00:10:44,075 --> 00:10:46,830
the different API implementations.

00:10:46,830 --> 00:10:50,050
What about instead is like, I have my feature.

00:10:50,050 --> 00:10:52,180
I have my directive that does that.

00:10:52,180 --> 00:10:55,700
And I want to see, in the past, if I'm actually improving

00:10:55,700 --> 00:10:57,400
the speed or it became slower.

00:10:57,400 --> 00:11:01,100
So these are some major releases of ngTasty-- October, December,

00:11:01,100 --> 00:11:08,660
0.3, 0.4, 0.5, and the latest one that is not out yet.

00:11:08,660 --> 00:11:10,660
So I did some benchmark.

00:11:10,660 --> 00:11:14,320
And when I did, I just created a yo benchpress external.

00:11:14,320 --> 00:11:19,410
So what it actually does is get the case study from the Dist

00:11:19,410 --> 00:11:23,870
folder and copy it in a new one named ng-tasty-0-4-0.

00:11:23,870 --> 00:11:26,500


00:11:26,500 --> 00:11:29,430
So what you're doing is specifying the version you

00:11:29,430 --> 00:11:32,580
want used for that case study.

00:11:32,580 --> 00:11:34,454
Automatically, the [? yoman ?] generator

00:11:34,454 --> 00:11:35,870
is going to download that version.

00:11:35,870 --> 00:11:40,460
And you can, in a very easy way, switch from one version

00:11:40,460 --> 00:11:41,900
to another.

00:11:41,900 --> 00:11:46,400
As we see here, we have the ngTasty folder, the number

00:11:46,400 --> 00:11:50,090
three, where, inside the Bower component,

00:11:50,090 --> 00:11:53,212
there is the version three of ngTasty.

00:11:53,212 --> 00:11:55,170
And the same is going to happen for the other--

00:11:55,170 --> 00:12:01,170
like the four is going to contain the four one.

00:12:01,170 --> 00:12:03,540
And all of them, they are going to run

00:12:03,540 --> 00:12:04,975
into exactly the same table.

00:12:04,975 --> 00:12:07,540


00:12:07,540 --> 00:12:10,440
All the tests that they were running to-- in the end,

00:12:10,440 --> 00:12:12,730
there is the JavaScript code of the case.

00:12:12,730 --> 00:12:18,295
So it's running to a big table with 4,000 rows just trying

00:12:18,295 --> 00:12:20,630
to sort and paginate that table.

00:12:20,630 --> 00:12:24,350


00:12:24,350 --> 00:12:26,100
The result of the [INAUDIBLE] was actually

00:12:26,100 --> 00:12:29,370
pretty interesting, because, as you see on the right,

00:12:29,370 --> 00:12:33,160
the 0.3 was-- all of this is a case for the quality watch.

00:12:33,160 --> 00:12:37,910
As I said in the beginning, the default version of ngTasty

00:12:37,910 --> 00:12:39,910
was using a deep watch-- so very expensive.

00:12:39,910 --> 00:12:42,600
Only recently, I changed that to became faster

00:12:42,600 --> 00:12:45,090
with the collection or reference watch.

00:12:45,090 --> 00:12:50,740
So to look in just the quality watch, we have 154 for the 0.3,

00:12:50,740 --> 00:12:58,530
121 for the 0.4, and 108 for the latest release, for the 0.5.

00:12:58,530 --> 00:12:59,880
I say, OK, great.

00:12:59,880 --> 00:13:01,500
It's good to be always faster.

00:13:01,500 --> 00:13:04,270
And now I did some crazy refactoring,

00:13:04,270 --> 00:13:05,920
and everything gets slow.

00:13:05,920 --> 00:13:07,630
I say, OK.

00:13:07,630 --> 00:13:10,680
So this is very good, because before releasing

00:13:10,680 --> 00:13:13,810
a new version that is slower than an old one,

00:13:13,810 --> 00:13:15,910
I can just run again my benchmark,

00:13:15,910 --> 00:13:19,430
version by version by version, and stop myself

00:13:19,430 --> 00:13:21,090
if something's going wrong.

00:13:21,090 --> 00:13:23,840
Like, OK, something is getting slow,

00:13:23,840 --> 00:13:26,880
so I can use Batarang or another tool

00:13:26,880 --> 00:13:29,640
or just investigate-- understand why it's going slow--

00:13:29,640 --> 00:13:32,010
and fix that before releasing to the public

00:13:32,010 --> 00:13:35,750
for the next major release.

00:13:35,750 --> 00:13:41,410
The next case is how my table is compared

00:13:41,410 --> 00:13:44,730
to the third-party solution.

00:13:44,730 --> 00:13:48,290
And in this case, we have ui-grid-- so Angular ui-grid,

00:13:48,290 --> 00:13:52,167
ng-table, and ng-tasty.

00:13:52,167 --> 00:13:53,500
Now, I'm doing the same process.

00:13:53,500 --> 00:13:56,300
I'm recreating, with the yo benchpress

00:13:56,300 --> 00:14:00,160
external, that specific Bower version.

00:14:00,160 --> 00:14:04,060
So I'm going to take the latest public version for all of them

00:14:04,060 --> 00:14:12,410
and run all the different benchmarks.

00:14:12,410 --> 00:14:15,010
So in this case, we take Angular ui-grid.

00:14:15,010 --> 00:14:17,635
On the back, we have the ui-grid implementation.

00:14:17,635 --> 00:14:22,700


00:14:22,700 --> 00:14:27,480
Of course, each one of them is implementing a different way,

00:14:27,480 --> 00:14:32,581
and each one of them has feature that maybe the other does not

00:14:32,581 --> 00:14:33,080
have.

00:14:33,080 --> 00:14:35,840


00:14:35,840 --> 00:14:38,190
Let's get the latest one.

00:14:38,190 --> 00:14:41,650
So it's doing the one for ng-table.

00:14:41,650 --> 00:14:43,670
So we get here.

00:14:43,670 --> 00:14:45,530
So this is 57.

00:14:45,530 --> 00:14:46,820
This is 44.

00:14:46,820 --> 00:14:50,180
Here I have a copy of the result of it I did this morning.

00:14:50,180 --> 00:14:56,100
So I'm actually analyzing using ng-tasty for the reference one.

00:14:56,100 --> 00:14:59,650
So this is the default version with ng-tasty, with a 0.5.

00:14:59,650 --> 00:15:01,450
That is nine millisecond.

00:15:01,450 --> 00:15:04,590
Ng-tasty, that is the 0.5.3, the latest version.

00:15:04,590 --> 00:15:06,680
41 milliseconds.

00:15:06,680 --> 00:15:10,580
And the angular ui-grid, that is 59.

00:15:10,580 --> 00:15:13,050
So it's pretty good.

00:15:13,050 --> 00:15:16,270
So what I understood here is ng-tasty has

00:15:16,270 --> 00:15:19,060
not all the functionality and the feature

00:15:19,060 --> 00:15:22,380
that Angular ui-grid and ng-table have.

00:15:22,380 --> 00:15:24,370
ng-tasty is just pretty much pagination,

00:15:24,370 --> 00:15:26,200
filtering, and sorting.

00:15:26,200 --> 00:15:31,550
So if I want a table like that, maybe I can use ngTasty.

00:15:31,550 --> 00:15:34,300
If I want something with more functionality, more feature,

00:15:34,300 --> 00:15:38,630
more interesting stuff, I can use ng-table or Angular

00:15:38,630 --> 00:15:39,130
ui-grid.

00:15:39,130 --> 00:15:42,520


00:15:42,520 --> 00:15:45,120
Before Twitter, I was working for a different agency.

00:15:45,120 --> 00:15:48,090
And most of the time, when you start a conversation like, what

00:15:48,090 --> 00:15:49,190
library we should use?

00:15:49,190 --> 00:15:54,310
What ng-table or third-party solution we should use?

00:15:54,310 --> 00:15:58,800
And sometimes the decision is just take by, I don't know,

00:15:58,800 --> 00:16:02,230
preference, or just because you like that guy on Twitter.

00:16:02,230 --> 00:16:07,170
And here, instead, we have a more math result,

00:16:07,170 --> 00:16:08,330
more specific.

00:16:08,330 --> 00:16:10,210
You say, OK, let's do some benchmark.

00:16:10,210 --> 00:16:12,910
Let's see actually how this thing is performing.

00:16:12,910 --> 00:16:15,060
So we say, OK, I want to use Angular grid,

00:16:15,060 --> 00:16:17,290
because it has that functionality that all

00:16:17,290 --> 00:16:18,650
the other, they don't have.

00:16:18,650 --> 00:16:19,310
OK.

00:16:19,310 --> 00:16:22,240
But what about if they have all the same functionality

00:16:22,240 --> 00:16:25,220
and just want to see which one is the faster one?

00:16:25,220 --> 00:16:28,810
So benchpress could be very useful for taking just,

00:16:28,810 --> 00:16:31,370
in a couple of hours, an important decision

00:16:31,370 --> 00:16:34,340
for your project.

00:16:34,340 --> 00:16:41,910
So to recap, to write good code and to write a lot of tests

00:16:41,910 --> 00:16:43,180
is important.

00:16:43,180 --> 00:16:48,280
But it's also important to take care about your performance

00:16:48,280 --> 00:16:49,550
and writing benchmarks.

00:16:49,550 --> 00:16:51,730
Write a benchpress so you can really

00:16:51,730 --> 00:16:54,150
have deeply understanding of your performance.

00:16:54,150 --> 00:16:57,110
And I tried to just show three simple cases.

00:16:57,110 --> 00:16:58,610
Like, I wrote a directive.

00:16:58,610 --> 00:17:00,760
I'm doing three different API implementations.

00:17:00,760 --> 00:17:04,010
I want to see which one is the faster one.

00:17:04,010 --> 00:17:05,986
I have my directive-- I just want

00:17:05,986 --> 00:17:08,810
to see on the last three, four month,

00:17:08,810 --> 00:17:10,569
if I'm getting slower and faster.

00:17:10,569 --> 00:17:12,599
In the end, again, I have my directive,

00:17:12,599 --> 00:17:16,010
and I want to see if I'm going slower

00:17:16,010 --> 00:17:20,810
or faster with other third-party solutions.

00:17:20,810 --> 00:17:24,760
So it's important doing benchmark.

00:17:24,760 --> 00:17:26,180
You should try.

00:17:26,180 --> 00:17:30,580
If you want-- all the code that I show is in the ngTasty repo.

00:17:30,580 --> 00:17:32,810
You can just take the [INAUDIBLE]

00:17:32,810 --> 00:17:34,670
that I show in the slide and just

00:17:34,670 --> 00:17:39,330
really see, again, how doing all these benchmarks--

00:17:39,330 --> 00:17:41,970
and write your own one.

00:17:41,970 --> 00:17:43,465
So grazie.

00:17:43,465 --> 00:17:44,340
Thank you, everybody.

00:17:44,340 --> 00:17:45,540
I'm done.

00:17:45,540 --> 00:17:48,890
[APPLAUSE]


YouTube URL: https://www.youtube.com/watch?v=e6J_JZaIOAQ


