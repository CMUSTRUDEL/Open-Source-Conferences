Title: Digging into Angular Style Guide Decisions - John Papa
Publication date: 2015-03-06
Playlist: ng-conf 2015
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,000 --> 00:00:00,500


00:00:00,500 --> 00:00:03,280
WARD BELL: --angular runway, because this

00:00:03,280 --> 00:00:06,050
is the much-anticipated, most exciting event

00:00:06,050 --> 00:00:07,760
of the entire conference.

00:00:07,760 --> 00:00:10,810
It's the much-anticipated fashion style

00:00:10,810 --> 00:00:12,860
guide by John Papa.

00:00:12,860 --> 00:00:14,920
Because I know that each of you know

00:00:14,920 --> 00:00:18,700
that we have a crisis in development today.

00:00:18,700 --> 00:00:20,510
And that crisis is that developers

00:00:20,510 --> 00:00:23,590
don't know how to dress.

00:00:23,590 --> 00:00:26,100
If you opened up that code base and you've looked inside

00:00:26,100 --> 00:00:27,670
and you took one look and you said,

00:00:27,670 --> 00:00:29,170
that person must have gotten dressed

00:00:29,170 --> 00:00:31,380
in a closet in the dark.

00:00:31,380 --> 00:00:32,880
It's just that bad.

00:00:32,880 --> 00:00:35,220
Now, John and I, we get along together.

00:00:35,220 --> 00:00:36,290
We pair a lot.

00:00:36,290 --> 00:00:39,870
And pairing-- well, it's a very vulnerable moment

00:00:39,870 --> 00:00:42,090
when you open up your code to somebody.

00:00:42,090 --> 00:00:48,087
It requires tenderness, because there you are, very vulnerably.

00:00:48,087 --> 00:00:49,670
And you open up that code and you say,

00:00:49,670 --> 00:00:54,420
John, does that controller make me look fat?

00:00:54,420 --> 00:00:56,830
Anyway, here he is, the sultan of style,

00:00:56,830 --> 00:00:59,346
the angularizer, John Papa.

00:00:59,346 --> 00:01:02,608
[APPLAUSE]

00:01:02,608 --> 00:01:04,697


00:01:04,697 --> 00:01:06,530
JOHN PAPA: Well, it's good that Ward gave me

00:01:06,530 --> 00:01:07,988
a little bit of time, because I was

00:01:07,988 --> 00:01:10,810
trying to bug some code that I was going through for a demo

00:01:10,810 --> 00:01:11,640
here.

00:01:11,640 --> 00:01:13,780
Nothing like a demo failure at the last minute.

00:01:13,780 --> 00:01:15,170
I try and understand some code.

00:01:15,170 --> 00:01:16,875
It's this controller.

00:01:16,875 --> 00:01:19,000
The problem I'm having is I'm looking through here,

00:01:19,000 --> 00:01:22,400
and there's, like, data services inside my controller.

00:01:22,400 --> 00:01:25,500
There's Breeze, HTP, Firebase, oh my.

00:01:25,500 --> 00:01:27,090
It's just a big mess.

00:01:27,090 --> 00:01:27,880
So I don't know.

00:01:27,880 --> 00:01:29,880
I'm just going to go beat up the author of that.

00:01:29,880 --> 00:01:33,260
Oh-- that was me.

00:01:33,260 --> 00:01:36,820
The point here is that when we start writing code,

00:01:36,820 --> 00:01:40,340
we don't always intend it to look the way that it comes out.

00:01:40,340 --> 00:01:41,490
Sometimes it looks great.

00:01:41,490 --> 00:01:42,670
Sometimes it doesn't.

00:01:42,670 --> 00:01:46,099
And code isn't about just the bits, the 1s and the 0s.

00:01:46,099 --> 00:01:48,140
The computer is not the only thing that reads it.

00:01:48,140 --> 00:01:50,130
We all have to be able to communicate with each other

00:01:50,130 --> 00:01:50,942
and with ourselves.

00:01:50,942 --> 00:01:53,400
Because often, we're the ones who write the messy code that

00:01:53,400 --> 00:01:55,270
later on we can't even unread.

00:01:55,270 --> 00:01:56,854
We've had some good examples this week

00:01:56,854 --> 00:01:58,853
of things that were kind of like, maybe I should

00:01:58,853 --> 00:02:00,130
have done something different.

00:02:00,130 --> 00:02:03,940
For example, yesterday, the filter, filter, filter, filter.

00:02:03,940 --> 00:02:07,620
And thank you, Shy, for the-- explaining the provider that

00:02:07,620 --> 00:02:11,540
provides a service which is a factory or a service that's

00:02:11,540 --> 00:02:12,790
a provider.

00:02:12,790 --> 00:02:16,170
He left out a constant or value as well.

00:02:16,170 --> 00:02:17,940
But I think he explained it pretty well.

00:02:17,940 --> 00:02:20,660
So there's things like this that make us think.

00:02:20,660 --> 00:02:23,390
Because code isn't just about code.

00:02:23,390 --> 00:02:25,670
It all comes down to, we need the code

00:02:25,670 --> 00:02:28,680
to be a channel of communication between two people.

00:02:28,680 --> 00:02:30,420
Sometimes it's you and yourself later,

00:02:30,420 --> 00:02:31,836
when you're writing your own code.

00:02:31,836 --> 00:02:34,080
Sometimes it's between two people on a team.

00:02:34,080 --> 00:02:36,510
Either it's a co-locator or at different locations

00:02:36,510 --> 00:02:37,560
around the world.

00:02:37,560 --> 00:02:39,290
Ward and I pair across the country.

00:02:39,290 --> 00:02:41,120
And it works out good, because we can

00:02:41,120 --> 00:02:43,130
communicate with each other.

00:02:43,130 --> 00:02:45,100
So today, my talk is about digging

00:02:45,100 --> 00:02:46,849
into the style guide for Angular,

00:02:46,849 --> 00:02:48,390
and the thoughts and decisions that I

00:02:48,390 --> 00:02:50,960
help put into that and some others, like Todd Motto

00:02:50,960 --> 00:02:54,532
and a lot of the community, and the Angular team as well.

00:02:54,532 --> 00:02:56,240
And the key to a lot of this is, you just

00:02:56,240 --> 00:02:58,390
never know who's going to be looking at that code.

00:02:58,390 --> 00:02:59,285
It could be you.

00:02:59,285 --> 00:03:01,900
It could be somebody crazy like Ward.

00:03:01,900 --> 00:03:03,486
Could be anybody on your team.

00:03:03,486 --> 00:03:05,860
But you want to make sure that when that person's looking

00:03:05,860 --> 00:03:08,550
at that code, they're not giving it one of those moments.

00:03:08,550 --> 00:03:11,890
It's got to be those moments of aha-- instantly recognizable.

00:03:11,890 --> 00:03:15,400
Because code is not intended for the computer,

00:03:15,400 --> 00:03:16,150
believe it or not.

00:03:16,150 --> 00:03:18,010
It's intended for people to read.

00:03:18,010 --> 00:03:19,280
The computers will run it.

00:03:19,280 --> 00:03:21,530
They really don't care about how you design your code,

00:03:21,530 --> 00:03:23,080
as long as it's functional.

00:03:23,080 --> 00:03:26,810
But the people want to make sure they can read your code.

00:03:26,810 --> 00:03:29,690
So it's not about pretty, artful code.

00:03:29,690 --> 00:03:31,800
It really, really isn't, OK?

00:03:31,800 --> 00:03:34,460
We can say, Mishka's got awesome Angular code here

00:03:34,460 --> 00:03:35,210
and he loves this.

00:03:35,210 --> 00:03:36,590
And Igor loves his controllers.

00:03:36,590 --> 00:03:38,010
But it's not about the code.

00:03:38,010 --> 00:03:41,430
It's about the communication-- fast and effective

00:03:41,430 --> 00:03:42,950
communication.

00:03:42,950 --> 00:03:44,910
How many people here have opened up a code base

00:03:44,910 --> 00:03:47,150
because they were asked to modify someone's code,

00:03:47,150 --> 00:03:50,360
and their first instinct was, I don't even know where to begin?

00:03:50,360 --> 00:03:53,440
I mean, we've all had that moment, right?

00:03:53,440 --> 00:03:54,960
Never happens to me.

00:03:54,960 --> 00:03:56,850
My code's perfect.

00:03:56,850 --> 00:03:59,310
But that happens, and it's all about communication.

00:03:59,310 --> 00:04:01,250
So let me give you an example from the style

00:04:01,250 --> 00:04:04,768
guide that kind of drives this home-- a really simple one.

00:04:04,768 --> 00:04:07,101
One of the concepts, and the first concepts in the guide

00:04:07,101 --> 00:04:10,570
is intentionally defining one component per file.

00:04:10,570 --> 00:04:13,190
You don't want to have a mess like you just saw that I wrote,

00:04:13,190 --> 00:04:15,750
actual code, that's a big pile of spaghetti.

00:04:15,750 --> 00:04:17,260
It's hard to get through.

00:04:17,260 --> 00:04:19,370
Looks good, doesn't it?

00:04:19,370 --> 00:04:20,390
I'm Italian.

00:04:20,390 --> 00:04:21,880
I like ravioli code.

00:04:21,880 --> 00:04:26,460
So ravioli code is all about one thing per file.

00:04:26,460 --> 00:04:29,380
Every file's got some cheese, maybe some broccoli, maybe

00:04:29,380 --> 00:04:31,130
some spinach, maybe some meat.

00:04:31,130 --> 00:04:34,390
Everything's encapsulated inside of that ravioli.

00:04:34,390 --> 00:04:35,970
The ravioli knows how to operate.

00:04:35,970 --> 00:04:37,265
It can talk to other raviolis.

00:04:37,265 --> 00:04:40,176


00:04:40,176 --> 00:04:41,550
Somebody can say, yeah, but John,

00:04:41,550 --> 00:04:44,340
we don't want to send 1,000 files to the browser, yada,

00:04:44,340 --> 00:04:45,790
yada, yada, yada, yada.

00:04:45,790 --> 00:04:47,220
We're not going there.

00:04:47,220 --> 00:04:50,050
You're going to bundle, mangle, and minify it anyway, right?

00:04:50,050 --> 00:04:54,650
Or you can call it "bunglify," which I often do by accident.

00:04:54,650 --> 00:04:58,510
So why one thing per file?

00:04:58,510 --> 00:04:59,540
It's easier to read.

00:04:59,540 --> 00:05:01,040
It's easier to identify.

00:05:01,040 --> 00:05:02,420
That's a big key.

00:05:02,420 --> 00:05:04,140
And it's easier to code.

00:05:04,140 --> 00:05:07,670
You can locate your code and find things very, very quickly.

00:05:07,670 --> 00:05:10,720
Because not everybody's going to like to read 2000 lines of code

00:05:10,720 --> 00:05:14,990
in a file-- great movie.

00:05:14,990 --> 00:05:17,425
So I get asked a lot, how did this guide evolve?

00:05:17,425 --> 00:05:19,300
And you get a little glimpse of that already.

00:05:19,300 --> 00:05:21,383
But the big thing with the evolution of this guide

00:05:21,383 --> 00:05:23,202
was, people say, hey, how did Todd Motto

00:05:23,202 --> 00:05:25,660
and you kind of come up with this idea for an Angular style

00:05:25,660 --> 00:05:26,830
guide?

00:05:26,830 --> 00:05:29,370
Some people had this theory that we sat out late night

00:05:29,370 --> 00:05:31,830
and were toasting s'mores over a campfire,

00:05:31,830 --> 00:05:35,037
looking longingly at each other and thought about this.

00:05:35,037 --> 00:05:36,620
There are some other theories as well,

00:05:36,620 --> 00:05:41,070
which are a little less founded, and some a little more founded.

00:05:41,070 --> 00:05:43,510
But the idea was, Todd and I got together last summer.

00:05:43,510 --> 00:05:45,950
We started talking about some common interests

00:05:45,950 --> 00:05:48,260
that we had in really solving a problem of how

00:05:48,260 --> 00:05:50,790
do we communicate better with other Angular developers,

00:05:50,790 --> 00:05:53,610
and reduce the 10 ways to do everything.

00:05:53,610 --> 00:05:55,860
I think 10's being a little generous there.

00:05:55,860 --> 00:05:58,590
Sometimes at Angular, we could do it 100 ways, right?

00:05:58,590 --> 00:06:01,200
But it all comes down to three main principles.

00:06:01,200 --> 00:06:05,930
Readability-- can we read our code quickly?

00:06:05,930 --> 00:06:07,730
Is it a communication tool?

00:06:07,730 --> 00:06:10,170
Can I give my code to somebody else-- and this

00:06:10,170 --> 00:06:13,010
is a great test-- give your code to somebody sitting next to you

00:06:13,010 --> 00:06:16,110
today, and see if they can read it without you talking to them.

00:06:16,110 --> 00:06:19,370
Can they understand what you're trying to accomplish?

00:06:19,370 --> 00:06:21,990
And inevitably, preparing for Angular 2.

00:06:21,990 --> 00:06:24,190
How do we closely align with what we do in Angular 1

00:06:24,190 --> 00:06:26,580
today in the talks that we just saw so we can get ready

00:06:26,580 --> 00:06:28,460
for Angular 2.

00:06:28,460 --> 00:06:31,610
Because it's great to have many choices in life.

00:06:31,610 --> 00:06:33,950
But it's nice to have a path that

00:06:33,950 --> 00:06:38,220
works, as well, so you can have a starting place to get going.

00:06:38,220 --> 00:06:40,620
This is great for teams to kind of get going with.

00:06:40,620 --> 00:06:43,000
And we've had a lot of feedback, Todd and I,

00:06:43,000 --> 00:06:45,580
from the community in how to articulate and shape

00:06:45,580 --> 00:06:47,084
the guides.

00:06:47,084 --> 00:06:48,500
So going back to the guide itself,

00:06:48,500 --> 00:06:51,050
another example is "stop hurting yourself" rule.

00:06:51,050 --> 00:06:53,650
There's a lot of things we do in coding every day that, it's

00:06:53,650 --> 00:06:54,710
just kind of like wait a minute.

00:06:54,710 --> 00:06:55,350
I touched the fire.

00:06:55,350 --> 00:06:55,851
It's hot.

00:06:55,851 --> 00:06:56,641
I touched the fire.

00:06:56,641 --> 00:06:57,170
It's hot.

00:06:57,170 --> 00:06:57,961
I touched the fire.

00:06:57,961 --> 00:07:00,390
It's hot.

00:07:00,390 --> 00:07:03,200
Seriously.

00:07:03,200 --> 00:07:05,100
So why do we do these things?

00:07:05,100 --> 00:07:07,260
We all know we're not supposed to be putting

00:07:07,260 --> 00:07:09,340
all of our service logic inside of a controller,

00:07:09,340 --> 00:07:11,080
but yet sometimes it happens.

00:07:11,080 --> 00:07:13,470
So make sure we take our controller logic that's

00:07:13,470 --> 00:07:15,480
going to be shared and reusable and move it off

00:07:15,480 --> 00:07:17,140
to a service or a factory or a provider

00:07:17,140 --> 00:07:20,190
or a constant or a value or whatever it is in Angular 2,

00:07:20,190 --> 00:07:22,010
right?

00:07:22,010 --> 00:07:22,980
Why?

00:07:22,980 --> 00:07:23,760
Reuse.

00:07:23,760 --> 00:07:26,239
It removes implementation details from that controller

00:07:26,239 --> 00:07:28,030
and it keeps that controller slim and trim,

00:07:28,030 --> 00:07:29,405
much easier to test.

00:07:29,405 --> 00:07:32,030
And then we don't have to worry so much about the communication

00:07:32,030 --> 00:07:34,363
between controllers, because we've got the services that

00:07:34,363 --> 00:07:35,550
can help us do that.

00:07:35,550 --> 00:07:37,710
And of course, makes it much easier

00:07:37,710 --> 00:07:40,527
to reuse across the entire application.

00:07:40,527 --> 00:07:42,610
So now we have a controller that simply just says,

00:07:42,610 --> 00:07:44,640
hey, I don't care how I got my customers.

00:07:44,640 --> 00:07:47,500
I just know this other thing's going to go get it for me.

00:07:47,500 --> 00:07:49,215
Pretty simple to do.

00:07:49,215 --> 00:07:50,590
Another style that's in the guide

00:07:50,590 --> 00:07:52,240
is about the Controller As Style,

00:07:52,240 --> 00:07:53,794
which when it first came out, I think

00:07:53,794 --> 00:07:55,960
people were ready to throw rocks at me and stone me,

00:07:55,960 --> 00:07:57,668
when I was saying, please use this style.

00:07:57,668 --> 00:07:59,090
It's pretty awesome.

00:07:59,090 --> 00:08:01,080
And really, the reason for that is-- not

00:08:01,080 --> 00:08:03,190
the rock-throwing-- but the reason it's awesome

00:08:03,190 --> 00:08:06,030
is that we look at the style for Controller As,

00:08:06,030 --> 00:08:06,985
and it's really this.

00:08:06,985 --> 00:08:09,490
This is just plain old JavaScript.

00:08:09,490 --> 00:08:11,310
It's just a constructor function.

00:08:11,310 --> 00:08:14,730
This is code we've been writing for years and years and years.

00:08:14,730 --> 00:08:16,889
We're creating a new avenger thing at this point,

00:08:16,889 --> 00:08:17,930
and a new instance of it.

00:08:17,930 --> 00:08:20,320
And it's very simple to understand.

00:08:20,320 --> 00:08:23,600
So let's look at this in the Controller As style.

00:08:23,600 --> 00:08:25,510
We've got an Angular controller.

00:08:25,510 --> 00:08:28,580
And we're just using this to create properties off of it.

00:08:28,580 --> 00:08:30,865
It's much more in line with basic JavaScript.

00:08:30,865 --> 00:08:33,373
We're not inventing something new anymore.

00:08:33,373 --> 00:08:35,039
There's no magical dollar scope creature

00:08:35,039 --> 00:08:37,330
which is going to fly out of the sky and save us.

00:08:37,330 --> 00:08:40,085
So all this kind of leads into the reasons

00:08:40,085 --> 00:08:42,335
why we want to lead [INAUDIBLE] in a certain direction

00:08:42,335 --> 00:08:45,460
so we can get ready for Angular 2 on it.

00:08:45,460 --> 00:08:48,290
But I ask you, always ask why.

00:08:48,290 --> 00:08:52,740
The core concepts in the style guide hinge upon the Why.

00:08:52,740 --> 00:08:55,204
There are actually some points that I took out

00:08:55,204 --> 00:08:56,870
of the initial drafts of the style guide

00:08:56,870 --> 00:08:58,744
because I couldn't think of a why other than,

00:08:58,744 --> 00:09:00,050
because I like it.

00:09:00,050 --> 00:09:01,690
That's not a good enough reason.

00:09:01,690 --> 00:09:04,350
It's got to be something more substantiated.

00:09:04,350 --> 00:09:05,842
You can't blindly trust anybody.

00:09:05,842 --> 00:09:07,550
Because sometimes when you blindly trust,

00:09:07,550 --> 00:09:09,820
the unexpected happens.

00:09:09,820 --> 00:09:13,940
And you might fall right on your face.

00:09:13,940 --> 00:09:17,260
I didn't see that one coming.

00:09:17,260 --> 00:09:20,630
So a guide has got to have all three of these things--

00:09:20,630 --> 00:09:23,510
all three, or it's not valid and it's not as valuable

00:09:23,510 --> 00:09:24,900
as it could be.

00:09:24,900 --> 00:09:26,850
So you must explain first what is it

00:09:26,850 --> 00:09:28,980
you're asking the person to do.

00:09:28,980 --> 00:09:30,990
Very clearly, what is it you want them to do?

00:09:30,990 --> 00:09:33,920
Use Controller As, one thing per file.

00:09:33,920 --> 00:09:35,116
And then why?

00:09:35,116 --> 00:09:37,090
Why is that important?

00:09:37,090 --> 00:09:38,190
What am I going to get?

00:09:38,190 --> 00:09:42,430
What's that benefit I get if I use this?

00:09:42,430 --> 00:09:45,766
And finally, how-- don't stop there.

00:09:45,766 --> 00:09:48,140
I love talking to people when they talk to their security

00:09:48,140 --> 00:09:49,030
teams at their companies.

00:09:49,030 --> 00:09:50,520
And the security team tells them, hey, you've

00:09:50,520 --> 00:09:51,960
got a security vulnerability.

00:09:51,960 --> 00:09:53,310
You can't do that.

00:09:53,310 --> 00:09:54,310
And they're like, great.

00:09:54,310 --> 00:09:55,143
How do I solve that?

00:09:55,143 --> 00:09:56,100
Oh, that's not us.

00:09:56,100 --> 00:09:57,720
You have to figure it out.

00:09:57,720 --> 00:10:01,330
You have to show them why and how to solve it.

00:10:01,330 --> 00:10:03,380
So an example in the guide, right here

00:10:03,380 --> 00:10:06,580
I've got one of the snippets from the screen.

00:10:06,580 --> 00:10:08,560
First, I say what I'm asking people to do.

00:10:08,560 --> 00:10:11,019
Say, in this case, have a function declaration

00:10:11,019 --> 00:10:12,310
to hide implementation details.

00:10:12,310 --> 00:10:13,570
And I explain what it is.

00:10:13,570 --> 00:10:16,260
But very clearly underneath, there's the why.

00:10:16,260 --> 00:10:18,200
The why is supposed to support that.

00:10:18,200 --> 00:10:20,990
And it's not important that people agree with all the whys

00:10:20,990 --> 00:10:23,430
so much as you understand the thought process.

00:10:23,430 --> 00:10:26,040
And some of these were written by some of the community coming

00:10:26,040 --> 00:10:28,820
in through several pull requests that I've had,

00:10:28,820 --> 00:10:31,620
and others from Igor when he helped me shape some of this

00:10:31,620 --> 00:10:33,470
over the last couple of months.

00:10:33,470 --> 00:10:36,520
But you've got to have that what and that why.

00:10:36,520 --> 00:10:39,590
So going back to the guide, another big concept I'm into

00:10:39,590 --> 00:10:41,300
is readability.

00:10:41,300 --> 00:10:43,260
I like to have clear names for my functions.

00:10:43,260 --> 00:10:46,770
I'm a low comment guy, and accessible members up top.

00:10:46,770 --> 00:10:48,480
Let me explain what that means.

00:10:48,480 --> 00:10:51,180
And this is important, because here's a real set of code.

00:10:51,180 --> 00:10:52,780
I think Ward Bell wrote this.

00:10:52,780 --> 00:10:55,060
And it's very hard to understand what it says.

00:10:55,060 --> 00:10:56,810
Somebody was being cute-- this is actually

00:10:56,810 --> 00:11:00,430
some code base I found-- where it's saying rools.valideight.

00:11:00,430 --> 00:11:02,780
They think they're being funny, but how do you

00:11:02,780 --> 00:11:04,482
search for this code later on?

00:11:04,482 --> 00:11:05,940
You look for that, you're not going

00:11:05,940 --> 00:11:07,460
to find what you're looking for.

00:11:07,460 --> 00:11:08,960
You can't do Control F, Command F

00:11:08,960 --> 00:11:11,440
to find it and replace and refactor.

00:11:11,440 --> 00:11:12,990
And it's not as clear.

00:11:12,990 --> 00:11:16,630
So having clearly defined names is a big key.

00:11:16,630 --> 00:11:18,307
And how do we work this over to Angular?

00:11:18,307 --> 00:11:20,640
Another piece that is making sure that everything you've

00:11:20,640 --> 00:11:24,050
got, you don't have to scan your entire code file for.

00:11:24,050 --> 00:11:26,200
So put the stuff that's important up top.

00:11:26,200 --> 00:11:29,370
Open the file, see it's a Controller, see it's a service.

00:11:29,370 --> 00:11:31,010
And you can see the exposed interface.

00:11:31,010 --> 00:11:32,790
Don't make me scan 100 lines of code

00:11:32,790 --> 00:11:34,680
to figure out what it's doing.

00:11:34,680 --> 00:11:37,040
Everything I've taught makes it much easier.

00:11:37,040 --> 00:11:38,490
Why?

00:11:38,490 --> 00:11:40,850
Because it answers, what is this thing?

00:11:40,850 --> 00:11:43,300
When I open my code up, I should be instantly knowing

00:11:43,300 --> 00:11:45,069
what is inside of my code.

00:11:45,069 --> 00:11:47,110
This doesn't apply to just JavaScript or Angular.

00:11:47,110 --> 00:11:49,350
It applies to any language you work in.

00:11:49,350 --> 00:11:50,380
Look at your code.

00:11:50,380 --> 00:11:51,420
Soon as I open that file, I should

00:11:51,420 --> 00:11:52,628
know exactly what it's doing.

00:11:52,628 --> 00:11:54,140
What is that interface?

00:11:54,140 --> 00:11:56,220
And it avoids that eternal scrolling syndrome,

00:11:56,220 --> 00:11:58,350
trying to figure out where things are.

00:11:58,350 --> 00:12:00,770
And it's instantly identifiable so you

00:12:00,770 --> 00:12:04,390
know how you can access it from another component.

00:12:04,390 --> 00:12:06,070
So what does this all come down to?

00:12:06,070 --> 00:12:09,190
It comes down to that we read code about 10 times more often

00:12:09,190 --> 00:12:10,776
than we write it.

00:12:10,776 --> 00:12:11,650
You think about that.

00:12:11,650 --> 00:12:13,660
How much time in your day do you write

00:12:13,660 --> 00:12:17,670
code versus reading and processing and refactoring?

00:12:17,670 --> 00:12:20,200
Number of lines of code is not a metric

00:12:20,200 --> 00:12:22,660
we should be measured by.

00:12:22,660 --> 00:12:23,910
It's the quality of that code.

00:12:23,910 --> 00:12:26,110
It's the communication of that code.

00:12:26,110 --> 00:12:28,790
Reading should be easier.

00:12:28,790 --> 00:12:31,739
So leading into now, the next topic

00:12:31,739 --> 00:12:33,780
is, if you ever read code, you need to understand

00:12:33,780 --> 00:12:36,190
the context of the author.

00:12:36,190 --> 00:12:38,182
So this is important in movies too, right?

00:12:38,182 --> 00:12:40,640
So in a movie, let's say you're watching this famous movie.

00:12:40,640 --> 00:12:42,930
And you're trying to figure out what is going on here.

00:12:42,930 --> 00:12:45,550
Is Harry hugging Cedric?

00:12:45,550 --> 00:12:48,070
Is he talking about dinner plans?

00:12:48,070 --> 00:12:50,720
Is he just really hate "Twilight"?

00:12:50,720 --> 00:12:52,210
I don't know.

00:12:52,210 --> 00:12:55,010
I know I do.

00:12:55,010 --> 00:12:57,730
But without context, you don't know what's going on.

00:12:57,730 --> 00:12:59,470
So how do we apply this to Angular?

00:12:59,470 --> 00:13:01,370
Well, we get into things like modularity and structure.

00:13:01,370 --> 00:13:02,786
One of the first things people ask

00:13:02,786 --> 00:13:05,890
is, how do I create that folder structure in my project?

00:13:05,890 --> 00:13:08,930
I mean, we've got 452 generators for Angular, right?

00:13:08,930 --> 00:13:10,960
So how do you create that folder structure?

00:13:10,960 --> 00:13:11,964
What's the right way?

00:13:11,964 --> 00:13:13,380
Well, let's think about the things

00:13:13,380 --> 00:13:16,000
we've learned about communication and readability.

00:13:16,000 --> 00:13:17,710
So we can go by type, where we have

00:13:17,710 --> 00:13:20,320
everything in the controllers and services and views.

00:13:20,320 --> 00:13:23,750
Or we can do it by feature, which to me is more contextual.

00:13:23,750 --> 00:13:26,050
I work on the dashboard or the people

00:13:26,050 --> 00:13:28,310
or the customers or the order entry.

00:13:28,310 --> 00:13:30,070
You work on features at a time.

00:13:30,070 --> 00:13:32,460
I don't work on all the controllers on my app at once,

00:13:32,460 --> 00:13:35,020
or all of views on my app at once.

00:13:35,020 --> 00:13:37,660
So by designing it like that, because if you think about how

00:13:37,660 --> 00:13:39,229
do you design your app.

00:13:39,229 --> 00:13:41,020
And I like to call this the LIFT principle.

00:13:41,020 --> 00:13:43,330
And in order, the first thing I like to make sure

00:13:43,330 --> 00:13:45,110
is I can locate my code easy.

00:13:45,110 --> 00:13:48,327
Folder structure is a big piece, that and naming of the files.

00:13:48,327 --> 00:13:50,160
And then the second piece is identifying it.

00:13:50,160 --> 00:13:51,780
Once I found that file, I should be

00:13:51,780 --> 00:13:54,060
able to open it up and instantly recognize

00:13:54,060 --> 00:13:55,970
what that file is doing.

00:13:55,970 --> 00:13:59,280
What is that controller actually contributing to my project?

00:13:59,280 --> 00:14:00,674
And then flat.

00:14:00,674 --> 00:14:02,340
Have you ever gone to an online shopping

00:14:02,340 --> 00:14:04,309
site and you have to hover over a menu,

00:14:04,309 --> 00:14:06,350
and a drop-down menu comes down, and another one,

00:14:06,350 --> 00:14:07,860
and another one, and another one?

00:14:07,860 --> 00:14:09,130
By the time you get the thing you want,

00:14:09,130 --> 00:14:11,129
you've moved the mouse too far and it goes away.

00:14:11,129 --> 00:14:12,520
You've got to start over.

00:14:12,520 --> 00:14:14,030
It's frustrating.

00:14:14,030 --> 00:14:16,630
Well, when you've got 15 layers of files and folder structures

00:14:16,630 --> 00:14:18,338
inside your project, it's hard for people

00:14:18,338 --> 00:14:19,930
to find what they're looking for.

00:14:19,930 --> 00:14:22,580
So keep it flat as long as you can.

00:14:22,580 --> 00:14:24,525
And then try to stay dry.

00:14:24,525 --> 00:14:26,150
So let's try to apply this a little bit

00:14:26,150 --> 00:14:27,580
to how we could do this in Angular.

00:14:27,580 --> 00:14:29,121
Let's say we start off with a project

00:14:29,121 --> 00:14:31,500
and we've got some things like services and controllers.

00:14:31,500 --> 00:14:33,250
And once we designed this, it looks pretty

00:14:33,250 --> 00:14:35,270
fine to be flat like this.

00:14:35,270 --> 00:14:38,590
But let's say we add a few more features, like directives

00:14:38,590 --> 00:14:42,279
and logging and sessions for maybe a code camp event.

00:14:42,279 --> 00:14:43,820
Once we do that, it gets a little bit

00:14:43,820 --> 00:14:45,179
more difficult to locate.

00:14:45,179 --> 00:14:47,220
So we might create some folder structure in here,

00:14:47,220 --> 00:14:49,590
for all the services that are reusable.

00:14:49,590 --> 00:14:50,667
That's logical.

00:14:50,667 --> 00:14:52,500
We add some more code, though, because we're

00:14:52,500 --> 00:14:53,300
on a mission today.

00:14:53,300 --> 00:14:54,425
We write a bunch more code.

00:14:54,425 --> 00:14:56,700
And now we've got our different features

00:14:56,700 --> 00:15:00,050
for sessions and people and attendees and layout.

00:15:00,050 --> 00:15:02,160
And it's getting a little uncomfortable again.

00:15:02,160 --> 00:15:03,540
So what do we do?

00:15:03,540 --> 00:15:05,350
We create new folder structures.

00:15:05,350 --> 00:15:07,390
And we create those as we need them

00:15:07,390 --> 00:15:09,040
for things like layout and people

00:15:09,040 --> 00:15:11,610
and the sessions and the services.

00:15:11,610 --> 00:15:13,900
And eventually, we end up with that ravioli shape

00:15:13,900 --> 00:15:16,200
again of all of our modules in Angular,

00:15:16,200 --> 00:15:17,365
which are very composable.

00:15:17,365 --> 00:15:19,400
It allows us to work in sprints with teams,

00:15:19,400 --> 00:15:21,750
where different teams work in different modules, all

00:15:21,750 --> 00:15:23,790
with their own dependencies so they can be

00:15:23,790 --> 00:15:25,720
plugged into the big machine.

00:15:25,720 --> 00:15:27,750
So I could work on maybe layout, someone else

00:15:27,750 --> 00:15:31,190
can work on dashboard, and a third person on admin.

00:15:31,190 --> 00:15:33,080
And then we can have a core service module

00:15:33,080 --> 00:15:35,310
that they all depend upon, maybe for data access

00:15:35,310 --> 00:15:37,610
or some reusable widgets.

00:15:37,610 --> 00:15:39,860
And then we can tie them into some lower level things,

00:15:39,860 --> 00:15:42,460
like ui-bootstrap or ngHammer.

00:15:42,460 --> 00:15:44,670
And then maybe next sprint, somebody

00:15:44,670 --> 00:15:46,500
adds in a new module called avengers,

00:15:46,500 --> 00:15:48,052
so they can tie into those.

00:15:48,052 --> 00:15:49,510
And the avengers can take advantage

00:15:49,510 --> 00:15:50,843
of all the other models we have.

00:15:50,843 --> 00:15:53,780
And you can see how this tree, these sets of raviolis,

00:15:53,780 --> 00:15:58,032
can expand out and make it easier to code.

00:15:58,032 --> 00:16:00,240
The whole point is that quickly identifying your code

00:16:00,240 --> 00:16:04,110
is huge and crucial for productivity,

00:16:04,110 --> 00:16:06,810
because if you don't and you can't find your code,

00:16:06,810 --> 00:16:08,565
it's like the never-ending swirl.

00:16:08,565 --> 00:16:09,940
How do they do this stuff anyway?

00:16:09,940 --> 00:16:12,470


00:16:12,470 --> 00:16:15,370
So I want to really call out to the community, who's

00:16:15,370 --> 00:16:17,485
just been amazing at supporting the style guide.

00:16:17,485 --> 00:16:19,110
The Angular team's helped out a little,

00:16:19,110 --> 00:16:21,410
but quite frankly, most of the style guide

00:16:21,410 --> 00:16:24,670
came from you, and from people on the internet and everybody

00:16:24,670 --> 00:16:25,480
who's contributed.

00:16:25,480 --> 00:16:27,360
So I want to show a picture of one of you

00:16:27,360 --> 00:16:28,970
from the audience who's really been

00:16:28,970 --> 00:16:32,267
a special contributor to this, showing their love for Angular.

00:16:32,267 --> 00:16:33,350
Thank you very much, Ward.

00:16:33,350 --> 00:16:37,010


00:16:37,010 --> 00:16:39,846
But the conversation still happens on Github.

00:16:39,846 --> 00:16:41,470
Github's where it all has been located.

00:16:41,470 --> 00:16:41,776
It's been great.

00:16:41,776 --> 00:16:43,859
It's been really useful, because you get the PRs.

00:16:43,859 --> 00:16:45,650
And there's been a lot of traffic up there,

00:16:45,650 --> 00:16:46,560
which is great.

00:16:46,560 --> 00:16:48,060
And it's not just people visiting.

00:16:48,060 --> 00:16:49,800
People are contributing back.

00:16:49,800 --> 00:16:51,854
We've had 700 people fork the repo

00:16:51,854 --> 00:16:54,020
and make their own version of the style guide, which

00:16:54,020 --> 00:16:55,190
is awesome.

00:16:55,190 --> 00:16:56,960
It's not meant to be an end-all, be-all.

00:16:56,960 --> 00:16:59,180
It's meant to be a conversation starter.

00:16:59,180 --> 00:17:00,960
Create one for your company.

00:17:00,960 --> 00:17:03,290
60 different contributors, and most impressive to me,

00:17:03,290 --> 00:17:04,460
is nine different languages.

00:17:04,460 --> 00:17:07,814
I can't speak eight of them, and barely the ninth.

00:17:07,814 --> 00:17:09,480
So we get all these people contributing.

00:17:09,480 --> 00:17:10,938
And I really want to thank you all.

00:17:10,938 --> 00:17:13,180
And it's not stopping here, because as Brad mentioned

00:17:13,180 --> 00:17:16,270
yesterday, I've taken on my own burden

00:17:16,270 --> 00:17:18,140
to start getting going the migration guide,

00:17:18,140 --> 00:17:19,306
but I want everybody's help.

00:17:19,306 --> 00:17:21,520
I want everybody's help to contribute back,

00:17:21,520 --> 00:17:24,970
to figure out, how do we get that bridge from 1.x to 2.0?

00:17:24,970 --> 00:17:26,230
What is important?

00:17:26,230 --> 00:17:29,950
What are your apps doing that you need from the style guide?

00:17:29,950 --> 00:17:33,030
And recently, just this week, Emmanuel Demey, from France,

00:17:33,030 --> 00:17:34,920
has created an ESLint Style Checker,

00:17:34,920 --> 00:17:38,310
which you can use to actually run against your code

00:17:38,310 --> 00:17:39,747
and check for these styles.

00:17:39,747 --> 00:17:42,080
And he's looking for other contributors to help him out,

00:17:42,080 --> 00:17:44,480
to beef up all the rules that are in there,

00:17:44,480 --> 00:17:45,510
which is pretty awesome.

00:17:45,510 --> 00:17:47,195
So kudos to him.

00:17:47,195 --> 00:17:48,570
And if you're looking for a place

00:17:48,570 --> 00:17:51,016
to start for what follows the guide,

00:17:51,016 --> 00:17:52,890
you could check out this Hot Towel Generator,

00:17:52,890 --> 00:17:54,670
which Ward and I have named.

00:17:54,670 --> 00:17:57,680
Because you can't go to a spa without a towel, right?

00:17:57,680 --> 00:17:59,340
At least you wouldn't want to.

00:17:59,340 --> 00:18:03,730
So we can use that to get going with the generators.

00:18:03,730 --> 00:18:06,340
But really, I want you to leave with one thought.

00:18:06,340 --> 00:18:09,260
And that's whatever you do, you want to adopt a style guide.

00:18:09,260 --> 00:18:11,752
It's all about communication.

00:18:11,752 --> 00:18:13,835
It's all about being able to communicate your code

00:18:13,835 --> 00:18:16,880
and making itself readable and evident to everybody else.

00:18:16,880 --> 00:18:19,240
Because you want to be that person-- if you do this

00:18:19,240 --> 00:18:21,210
and adopt a guide-- you want be that person

00:18:21,210 --> 00:18:23,005
who everybody else wants to code with,

00:18:23,005 --> 00:18:27,430
who they want to pair with, who they want to learn from.

00:18:27,430 --> 00:18:29,690
So if you do that, I think we're all in a good place.

00:18:29,690 --> 00:18:31,880
And thank you so much for the contributions.

00:18:31,880 --> 00:18:35,230
[APPLAUSE]


YouTube URL: https://www.youtube.com/watch?v=hG-ARy0oqjI


