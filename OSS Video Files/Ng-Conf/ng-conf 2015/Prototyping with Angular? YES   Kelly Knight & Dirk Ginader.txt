Title: Prototyping with Angular? YES   Kelly Knight & Dirk Ginader
Publication date: 2015-03-05
Playlist: ng-conf 2015
Description: 
	www.ng-conf.org

ng-conf is a two day, single track conference focused on delivering the highest quality training in the Angular JavaScript framework. 500 to 700 Developers from across the country will converge on beautiful Salt Lake City, UT to participate in training sessions by the Google Angular team, and other Angular experts. In addition to the invaluable training, ng-conf will deliver a premier conference experience for attendees, providing opportunities to network with other developers, relax at social events, and engage in some of the unique entertainment opportunities available in Utah.
Captions: 
	00:00:00,000 --> 00:00:00,520


00:00:00,520 --> 00:00:03,360
KELLY KNIGHT: --about how you can use Angular to enhance

00:00:03,360 --> 00:00:05,270
your prototyping strategy.

00:00:05,270 --> 00:00:08,650
So my name is Kelly Knight, and I work in the Google Chicago

00:00:08,650 --> 00:00:09,859
office.

00:00:09,859 --> 00:00:11,150
DIRK GINADER: And hi, I'm Dirk.

00:00:11,150 --> 00:00:14,630
And I work in the beautiful San Francisco office.

00:00:14,630 --> 00:00:16,880
KELLY KNIGHT: And we're both user experience engineers

00:00:16,880 --> 00:00:18,230
at Google.

00:00:18,230 --> 00:00:20,822
So I have some bad news for you.

00:00:20,822 --> 00:00:22,530
We're not going to teach you anything new

00:00:22,530 --> 00:00:23,541
about Angular today.

00:00:23,541 --> 00:00:24,290
DIRK GINADER: Aww.

00:00:24,290 --> 00:00:26,050
KELLY KNIGHT: We're not even on the Angular team.

00:00:26,050 --> 00:00:26,549
No.

00:00:26,549 --> 00:00:28,350
[LAUGHTER]

00:00:28,350 --> 00:00:31,520
We just use the framework, like most of you.

00:00:31,520 --> 00:00:33,730
And a lot of the things that we talk about today

00:00:33,730 --> 00:00:38,090
I really don't recommend going home and using in your apps.

00:00:38,090 --> 00:00:40,200
But what we are going to talk about

00:00:40,200 --> 00:00:46,750
is how you can get the most out of your prototypes.

00:00:46,750 --> 00:00:50,210
And to do that, you have to use an entirely different toolbox

00:00:50,210 --> 00:00:54,271
than you use when you're creating production apps.

00:00:54,271 --> 00:00:57,300
Oh, sorry.

00:00:57,300 --> 00:01:00,290
So I mentioned that we're user experience engineers at Google.

00:01:00,290 --> 00:01:04,420
So what this means is that we're developers for the design team

00:01:04,420 --> 00:01:06,130
and not the engineering team.

00:01:06,130 --> 00:01:08,290
And our goal is to get teams prototyping,

00:01:08,290 --> 00:01:11,900
to make prototyping easier, and to build tools to make

00:01:11,900 --> 00:01:14,210
our prototypes more powerful.

00:01:14,210 --> 00:01:16,640
So a couple of years ago, Dirk and I

00:01:16,640 --> 00:01:20,560
and a couple other prototypers got together to do just that.

00:01:20,560 --> 00:01:23,910
We started creating a suite of prototyping tools using

00:01:23,910 --> 00:01:25,170
Angular.

00:01:25,170 --> 00:01:28,700
So over the last couple years, we've gotten pretty creative

00:01:28,700 --> 00:01:30,490
and come up with some pretty cool ways

00:01:30,490 --> 00:01:32,560
to use Angular to make our prototypes

00:01:32,560 --> 00:01:34,310
work a lot harder for us.

00:01:34,310 --> 00:01:38,130
So we're excited to share some of those ideas with you today.

00:01:38,130 --> 00:01:40,472
So why prototype?

00:01:40,472 --> 00:01:42,680
We really don't have time to get into all the reasons

00:01:42,680 --> 00:01:43,950
that we should be prototyping.

00:01:43,950 --> 00:01:46,420
But you should all be prototyping.

00:01:46,420 --> 00:01:51,060
So it really does save you a lot of time in the long run.

00:01:51,060 --> 00:01:53,720
So the more that you can answer with your prototype

00:01:53,720 --> 00:01:56,810
now, the less headaches you're going

00:01:56,810 --> 00:01:58,600
to have at implementation.

00:01:58,600 --> 00:02:00,600
So it's really, really important to get the most

00:02:00,600 --> 00:02:04,440
that you possibly can out of your prototypes.

00:02:04,440 --> 00:02:08,449
And why did we choose Angular for our prototyping framework?

00:02:08,449 --> 00:02:11,450
So probably for a lot of the same reasons that you chose it.

00:02:11,450 --> 00:02:14,130
It's awesome data binding, custom directives,

00:02:14,130 --> 00:02:19,270
the built-in directives-- all of the awesome Angular goodness.

00:02:19,270 --> 00:02:22,710
But prototyping is a lot different

00:02:22,710 --> 00:02:24,260
than writing production code.

00:02:24,260 --> 00:02:26,720
So the way that we take advantage of these features

00:02:26,720 --> 00:02:28,920
is going to be a little different.

00:02:28,920 --> 00:02:31,550
So prototyping is all about doing

00:02:31,550 --> 00:02:35,670
the absolute minimum amount of work to fake an experience

00:02:35,670 --> 00:02:37,350
to answer a question.

00:02:37,350 --> 00:02:42,070
And it's also about moving really quickly and iterating.

00:02:42,070 --> 00:02:46,840
So writing quality, maintainable code is absolutely forbidden.

00:02:46,840 --> 00:02:49,002
So if you're creating a prototype or a new app

00:02:49,002 --> 00:02:50,710
and you're thinking, oh, this is awesome,

00:02:50,710 --> 00:02:52,840
maybe I'll use this as my alpha version,

00:02:52,840 --> 00:02:56,870
you're probably not doing it right.

00:02:56,870 --> 00:02:58,930
So what we have figured out-- the best method

00:02:58,930 --> 00:03:00,930
is that when you create your prototypes,

00:03:00,930 --> 00:03:03,720
create the content fast, dirty, as quick as you can.

00:03:03,720 --> 00:03:04,950
Do what you got to do.

00:03:04,950 --> 00:03:08,610
But you should be using prototyping tools in there

00:03:08,610 --> 00:03:12,220
that do a lot of the heavy lifting for you.

00:03:12,220 --> 00:03:14,090
So now we're going to get to the good stuff.

00:03:14,090 --> 00:03:15,589
I'm going to hand off to Dirk, who's

00:03:15,589 --> 00:03:16,980
going to talk about analytics.

00:03:16,980 --> 00:03:18,359
DIRK GINADER: Thank you.

00:03:18,359 --> 00:03:20,150
We're going to start with the boring stuff,

00:03:20,150 --> 00:03:21,810
though, because one of the things that

00:03:21,810 --> 00:03:24,730
is the most under-known but most important one

00:03:24,730 --> 00:03:26,480
is you're building a prototype, and you

00:03:26,480 --> 00:03:29,060
want to make sure if the prototype is successful.

00:03:29,060 --> 00:03:30,910
And usually you have more than one version.

00:03:30,910 --> 00:03:32,910
And you want to make sure which one is the best.

00:03:32,910 --> 00:03:34,640
So we got to measure this.

00:03:34,640 --> 00:03:36,310
And what every scientist will tell

00:03:36,310 --> 00:03:38,570
you is that no experiment is of any value

00:03:38,570 --> 00:03:39,770
without instrumentation.

00:03:39,770 --> 00:03:41,750
Though, instrumentation is what we have.

00:03:41,750 --> 00:03:43,030
And I'm slightly biased.

00:03:43,030 --> 00:03:44,509
I work for Google Analytics.

00:03:44,509 --> 00:03:45,800
So it is the tool of my choice.

00:03:45,800 --> 00:03:47,390
I'm going to use that.

00:03:47,390 --> 00:03:50,970
And I'm going to use a beautiful community-driven little service

00:03:50,970 --> 00:03:53,972
that is called Angular Google Analytics that makes this

00:03:53,972 --> 00:03:55,180
really, really nice and easy.

00:03:55,180 --> 00:03:57,870
You just add it as a dependency to your project.

00:03:57,870 --> 00:03:59,644
And you've got to configure two things.

00:03:59,644 --> 00:04:01,310
You've got to add it to your account ID.

00:04:01,310 --> 00:04:04,080
And I want you to turn on User Analytics, which

00:04:04,080 --> 00:04:06,050
gives you the newest version of Analytics.

00:04:06,050 --> 00:04:08,750
And turn on Track Pages, which gives you automatic

00:04:08,750 --> 00:04:12,960
updating all the info that comes from the router, which is nice.

00:04:12,960 --> 00:04:15,500
And then the really, really, really nice part

00:04:15,500 --> 00:04:16,730
is event tracking.

00:04:16,730 --> 00:04:20,269
Event tracking is a way for you to make basically

00:04:20,269 --> 00:04:22,590
every single click, if you want to,

00:04:22,590 --> 00:04:25,930
that is in a relevant area in your application measurable.

00:04:25,930 --> 00:04:30,120
It will send a little ping to Google Analytics.

00:04:30,120 --> 00:04:32,560
And you will end up having all this information in there.

00:04:32,560 --> 00:04:35,090
So right here I'm actually right now testing

00:04:35,090 --> 00:04:37,590
if our new navigation is working the way that we want to.

00:04:37,590 --> 00:04:40,460
I want to make sure that the user ghost finds navigation

00:04:40,460 --> 00:04:41,497
as quick as possible.

00:04:41,497 --> 00:04:43,330
So we're going to measure exactly that time.

00:04:43,330 --> 00:04:44,150
We have a timer.

00:04:44,150 --> 00:04:45,816
We're going to set that timer every time

00:04:45,816 --> 00:04:48,980
the user finds navigation and goes back and forth.

00:04:48,980 --> 00:04:49,672
Same idea here.

00:04:49,672 --> 00:04:50,630
We have a video player.

00:04:50,630 --> 00:04:52,380
We're going to make sure that we know which video player is

00:04:52,380 --> 00:04:54,290
playing, how long it plays, how long it takes

00:04:54,290 --> 00:04:55,970
to load-- all the information that

00:04:55,970 --> 00:04:59,500
makes you being able to actually make a good decision.

00:04:59,500 --> 00:05:01,610
It ends up in a beautiful little report.

00:05:01,610 --> 00:05:04,840
And it gives you the chance to do a-- I love this word-

00:05:04,840 --> 00:05:07,440
data-driven design decision, which is wonderful.

00:05:07,440 --> 00:05:10,689
And it allows you to actually have proper numbers to prove

00:05:10,689 --> 00:05:12,480
that you have the right version that you're

00:05:12,480 --> 00:05:15,090
going to forward to actually build the right thing.

00:05:15,090 --> 00:05:17,039
And I am going back to Kelly.

00:05:17,039 --> 00:05:17,830
KELLY KNIGHT: Cool.

00:05:17,830 --> 00:05:19,110
Thanks.

00:05:19,110 --> 00:05:21,740
So I'm going to talk about versions now.

00:05:21,740 --> 00:05:23,260
As you're iterating on your designs,

00:05:23,260 --> 00:05:25,635
you're probably going to have a lot of different versions

00:05:25,635 --> 00:05:26,550
of your prototype.

00:05:26,550 --> 00:05:29,080
But that's not what I'm talking about in this section.

00:05:29,080 --> 00:05:31,540
What I'm going to talk about is using your prototype

00:05:31,540 --> 00:05:33,540
to design in the browser.

00:05:33,540 --> 00:05:35,960
So at some point in the design process,

00:05:35,960 --> 00:05:40,441
you're still deciding on maybe your colors, spacing, fonts.

00:05:40,441 --> 00:05:41,940
And this is something that's usually

00:05:41,940 --> 00:05:45,100
done in a design tool like Illustrator.

00:05:45,100 --> 00:05:46,744
But if you do this in the browser,

00:05:46,744 --> 00:05:48,410
you can take advantage of Angular's data

00:05:48,410 --> 00:05:52,590
binding to make this a much more dynamic process.

00:05:52,590 --> 00:05:55,520
This is a little fake card I made just for demo purposes

00:05:55,520 --> 00:05:56,840
here.

00:05:56,840 --> 00:06:00,150
Let's say that we've narrowed it down to a few different colors,

00:06:00,150 --> 00:06:03,310
maybe some images, and the movement

00:06:03,310 --> 00:06:06,210
that you want to happen when someone clicks on it-- so

00:06:06,210 --> 00:06:07,840
these different options.

00:06:07,840 --> 00:06:10,775
And you want to see what they look like in combination

00:06:10,775 --> 00:06:12,712
and choose the right one.

00:06:12,712 --> 00:06:14,670
In a design tool, you'd probably go in and just

00:06:14,670 --> 00:06:16,086
toggle on and off different layers

00:06:16,086 --> 00:06:18,400
to see what they look like together.

00:06:18,400 --> 00:06:22,070
But if you tell Angular about these different values

00:06:22,070 --> 00:06:24,640
and then you bind them to UI elements,

00:06:24,640 --> 00:06:26,440
then you can just toggle the values

00:06:26,440 --> 00:06:28,620
to see the different combinations and updates

00:06:28,620 --> 00:06:30,480
in the UI.

00:06:30,480 --> 00:06:34,820
So I'm going to show you a little video of actually doing

00:06:34,820 --> 00:06:36,480
this.

00:06:36,480 --> 00:06:40,650
And the cool thing about it is with just these 13 different

00:06:40,650 --> 00:06:43,890
options, you can see a lot of different permutations

00:06:43,890 --> 00:06:47,220
of this design in one prototype.

00:06:47,220 --> 00:06:49,340
And also, you're designing in the medium

00:06:49,340 --> 00:06:50,861
that it will ultimately end up in.

00:06:50,861 --> 00:06:52,110
So that's always a good thing.

00:06:52,110 --> 00:06:58,200


00:06:58,200 --> 00:07:02,170
You'll see up in the URL parameters-- changing to red.

00:07:02,170 --> 00:07:03,670
Then I am going to change the image.

00:07:03,670 --> 00:07:10,784


00:07:10,784 --> 00:07:12,575
And then I'm going to change the animation.

00:07:12,575 --> 00:07:19,510


00:07:19,510 --> 00:07:22,370
So using URL parameters, it's a pretty simple way to do this.

00:07:22,370 --> 00:07:24,995
But you really get the benefit of being

00:07:24,995 --> 00:07:26,620
able to design in the browser and see--

00:07:26,620 --> 00:07:28,952
[APPLAUSE]

00:07:28,952 --> 00:07:29,952
DIRK GINADER: All right.

00:07:29,952 --> 00:07:33,290
KELLY KNIGHT: OK, awesome!

00:07:33,290 --> 00:07:36,340
It only gets better.

00:07:36,340 --> 00:07:40,110
So in this next section, I'm doing something similar.

00:07:40,110 --> 00:07:41,910
But animation is another thing that's

00:07:41,910 --> 00:07:45,240
kind of hard to do in a static design tool.

00:07:45,240 --> 00:07:48,540
There's this cool site, though, called cubic-bezier.com.

00:07:48,540 --> 00:07:51,060
And it helps you create your curves

00:07:51,060 --> 00:07:53,260
for your CSS transitions.

00:07:53,260 --> 00:07:55,400
And then it spits out the points for you.

00:07:55,400 --> 00:07:59,910
So a cool thing that you can do also in this same URL parameter

00:07:59,910 --> 00:08:02,320
way is get the points from that site,

00:08:02,320 --> 00:08:04,220
and then plug them into your prototype.

00:08:04,220 --> 00:08:07,020
And you can test all the different animations this way

00:08:07,020 --> 00:08:08,421
and choose what's the best.

00:08:08,421 --> 00:08:10,170
And, again, you're doing it in the medium,

00:08:10,170 --> 00:08:12,753
so you know that it's going to end up the way that you see it.

00:08:12,753 --> 00:08:16,986


00:08:16,986 --> 00:08:20,374
DIRK GINADER: Sweet.

00:08:20,374 --> 00:08:23,746
KELLY KNIGHT: Uh-oh.

00:08:23,746 --> 00:08:24,246
OK.

00:08:24,246 --> 00:08:27,150


00:08:27,150 --> 00:08:29,110
So starting with that animation.

00:08:29,110 --> 00:08:30,114
And then I go here.

00:08:30,114 --> 00:08:31,530
Now, this is the cubic-bezier.com.

00:08:31,530 --> 00:08:34,715
I'm creating this really crazy curve.

00:08:34,715 --> 00:08:36,090
It's going to give me the points.

00:08:36,090 --> 00:08:39,309


00:08:39,309 --> 00:08:41,010
Then I just plug them in, reload.

00:08:41,010 --> 00:08:44,660


00:08:44,660 --> 00:08:47,540
And we can see this nasty, bouncy animation.

00:08:47,540 --> 00:08:48,900
DIRK GINADER: It's dreadful.

00:08:48,900 --> 00:08:50,427
KELLY KNIGHT: But it's pretty cool.

00:08:50,427 --> 00:08:52,510
It's just a cool way you can test these things out

00:08:52,510 --> 00:08:53,600
in your prototype.

00:08:53,600 --> 00:08:56,946
[APPLAUSE]

00:08:56,946 --> 00:09:03,550


00:09:03,550 --> 00:09:04,050
All right.

00:09:04,050 --> 00:09:06,650
So those demos are pretty cute.

00:09:06,650 --> 00:09:09,670
But I think we can do better.

00:09:09,670 --> 00:09:12,630
What if you're in mobile and changing URL parameters

00:09:12,630 --> 00:09:15,450
isn't really a super-easy thing to do?

00:09:15,450 --> 00:09:18,340
There are other ways that you can tell the UI about what

00:09:18,340 --> 00:09:19,860
values you're choosing.

00:09:19,860 --> 00:09:22,410
So in this video, I am using the Web Speech

00:09:22,410 --> 00:09:26,560
API to listen for the keywords for our key value pairs.

00:09:26,560 --> 00:09:28,650
And if it hears one of the keywords,

00:09:28,650 --> 00:09:31,435
it's going to update the UI automatically.

00:09:31,435 --> 00:09:33,560
And this just makes it much easier to do on mobile.

00:09:33,560 --> 00:09:39,813


00:09:39,813 --> 00:09:40,780
[VIDEO PLAYBACK]

00:09:40,780 --> 00:09:43,665
-Show the blue with the gondola picture.

00:09:43,665 --> 00:09:47,020


00:09:47,020 --> 00:09:47,790
Try the red.

00:09:47,790 --> 00:09:52,730


00:09:52,730 --> 00:09:54,212
[APPLAUSE]

00:09:54,212 --> 00:09:57,176
Switch to the slide Under Animation.

00:09:57,176 --> 00:10:02,120


00:10:02,120 --> 00:10:04,090
Do the slide Together Animation.

00:10:04,090 --> 00:10:10,799


00:10:10,799 --> 00:10:11,790
[END PLAYBACK]

00:10:11,790 --> 00:10:14,970
So I actually had to do that video on the desktop.

00:10:14,970 --> 00:10:17,530
But when you're doing it on a phone,

00:10:17,530 --> 00:10:18,910
it's actually much, much quicker.

00:10:18,910 --> 00:10:22,280


00:10:22,280 --> 00:10:22,780
Awesome.

00:10:22,780 --> 00:10:25,180
So doing something like this, putting it in a directive

00:10:25,180 --> 00:10:26,895
wouldn't really be that difficult.

00:10:26,895 --> 00:10:27,770
It's on your element.

00:10:27,770 --> 00:10:30,200
You just have to pass in your key value pairs

00:10:30,200 --> 00:10:33,220
and then tell it what key to look for in the URL parameters

00:10:33,220 --> 00:10:35,275
or just tell it to be listening for these keys.

00:10:35,275 --> 00:10:37,400
So there are definitely some edge cases where you'd

00:10:37,400 --> 00:10:39,890
have to be a little trickier.

00:10:39,890 --> 00:10:43,040
But for the most part, it's a pretty simple thing to do.

00:10:43,040 --> 00:10:46,000
So now I'm going to pass it back to Dirk.

00:10:46,000 --> 00:10:46,960
DIRK GINADER: Thanks.

00:10:46,960 --> 00:10:48,960
So one of the things that are easily forgotten

00:10:48,960 --> 00:10:51,960
is that a prototype is built for your user.

00:10:51,960 --> 00:10:53,210
It's called user experience.

00:10:53,210 --> 00:10:54,910
And you don't know who your users are.

00:10:54,910 --> 00:10:57,570
So you want to make sure that it actually works for everybody.

00:10:57,570 --> 00:10:59,739
And because we're prototyping, it's got to be fast.

00:10:59,739 --> 00:11:01,405
So we have one thing that makes it fast.

00:11:01,405 --> 00:11:08,270


00:11:08,270 --> 00:11:08,770
Hello?

00:11:08,770 --> 00:11:11,310
Traditionally, Angular had a bit of a bad reputation

00:11:11,310 --> 00:11:12,900
in terms of its accessibility.

00:11:12,900 --> 00:11:15,280
There really isn't a good reason for that other

00:11:15,280 --> 00:11:21,660
than-- this is really not working right now--

00:11:21,660 --> 00:11:22,640
really bad examples.

00:11:22,640 --> 00:11:25,280
So this is the first one that I just took off Stack Overflow

00:11:25,280 --> 00:11:25,990
right away.

00:11:25,990 --> 00:11:29,140
I just searched for an iteration, and I found this.

00:11:29,140 --> 00:11:31,970
And looking at this-- just looking

00:11:31,970 --> 00:11:33,720
to see there is an ng-click on the li just

00:11:33,720 --> 00:11:34,600
gives me the creeps.

00:11:34,600 --> 00:11:35,681
It does not work.

00:11:35,681 --> 00:11:36,930
You really should not do this.

00:11:36,930 --> 00:11:39,100
Never look at this.

00:11:39,100 --> 00:11:41,690
What you want to start with is a proper, solid foundation

00:11:41,690 --> 00:11:42,610
to build something.

00:11:42,610 --> 00:11:44,182
And we're going to call this POSH.

00:11:44,182 --> 00:11:44,890
I love this word.

00:11:44,890 --> 00:11:46,720
It's Plain Old Semantic HTML.

00:11:46,720 --> 00:11:47,545
AUDIENCE: Woo!

00:11:47,545 --> 00:11:49,080
DIRK GINADER: Yeah, right?

00:11:49,080 --> 00:11:52,120
And I'm going to pull out two things.

00:11:52,120 --> 00:11:55,250
The first one is if it's a navigation that

00:11:55,250 --> 00:11:57,290
happens on the current page or somewhere else,

00:11:57,290 --> 00:12:00,440
then it is a link.

00:12:00,440 --> 00:12:03,810
And anything else that happens, it's a button.

00:12:03,810 --> 00:12:06,360
So we have those two classics covered right away.

00:12:06,360 --> 00:12:09,150
However, we live in a beautiful web components world,

00:12:09,150 --> 00:12:11,290
and HTML might not be enough.

00:12:11,290 --> 00:12:12,510
So we can extend it.

00:12:12,510 --> 00:12:13,400
And we use ARIA.

00:12:13,400 --> 00:12:17,990
And ARIA stands for Accessible Rich Internet Applications.

00:12:17,990 --> 00:12:19,640
And we're going to occur on this, which

00:12:19,640 --> 00:12:22,470
is a completely meaningless piece of div,

00:12:22,470 --> 00:12:25,560
and change the class to be a role.

00:12:25,560 --> 00:12:27,870
And all of a sudden, we have this meaningful thing

00:12:27,870 --> 00:12:31,000
that actually not only looks and smells like a check button,

00:12:31,000 --> 00:12:34,190
but also is announced as such.

00:12:34,190 --> 00:12:36,620
And by adding an ARIA state-- in this case,

00:12:36,620 --> 00:12:39,636
aria-checked equals true-- we actually not only have a check

00:12:39,636 --> 00:12:41,010
button, but the check button also

00:12:41,010 --> 00:12:43,340
has meaning in terms of is it checked or not,

00:12:43,340 --> 00:12:44,860
which is beautiful.

00:12:44,860 --> 00:12:47,880
And last but not least, we also have properties.

00:12:47,880 --> 00:12:49,630
In this case, we're adding aria-label.

00:12:49,630 --> 00:12:53,390
An aria-label is filling this gap of your regular label.

00:12:53,390 --> 00:12:55,530
You can only apply it to form elements.

00:12:55,530 --> 00:12:58,030
Now, in web components, we don't have form elements anymore,

00:12:58,030 --> 00:12:59,380
so we just built everything new.

00:12:59,380 --> 00:13:01,130
An aria-label you can apply to everything,

00:13:01,130 --> 00:13:04,670
so there's no excuse to not apply a label anymore.

00:13:04,670 --> 00:13:06,990
And then we need keyboard support.

00:13:06,990 --> 00:13:09,280
So just being a prototyper on a project

00:13:09,280 --> 00:13:12,240
and not being able to just use my keyboard

00:13:12,240 --> 00:13:14,299
to refresh all the time and move through drives

00:13:14,299 --> 00:13:15,090
me nuts right away.

00:13:15,090 --> 00:13:18,460
So this is my motivation here.

00:13:18,460 --> 00:13:21,810
And to make sure that my div becomes accessible

00:13:21,810 --> 00:13:25,080
using keyboard, I'm adding a tabindex of equal to 0.

00:13:25,080 --> 00:13:27,820
If you wanted to be only JavaScript-focusable,

00:13:27,820 --> 00:13:28,880
you can use minus 1.

00:13:28,880 --> 00:13:32,440
I recommend 0 if you want to tap to it, which is nice.

00:13:32,440 --> 00:13:34,880
And then we can use ngAria.

00:13:34,880 --> 00:13:36,200
ngAria is awesome.

00:13:36,200 --> 00:13:38,520
ngAria is built by the community and is now

00:13:38,520 --> 00:13:42,760
maintained by a couple of people at Google as well as community.

00:13:42,760 --> 00:13:46,820
And what it does is you just add it as dependency.

00:13:46,820 --> 00:13:50,060
And you gain some instant value right away.

00:13:50,060 --> 00:13:52,850
And looking at this, what ngAria does

00:13:52,850 --> 00:13:56,370
is infers what the correct ARIA tag should be based on what

00:13:56,370 --> 00:13:58,820
you included in your ARIA tags.

00:13:58,820 --> 00:14:01,460
So I'm just adding, again, the role of checkbox.

00:14:01,460 --> 00:14:03,750
So it's not just anymore a class.

00:14:03,750 --> 00:14:07,440
And then by just looking at my model of check,

00:14:07,440 --> 00:14:10,910
it will automatically add active, which it does.

00:14:10,910 --> 00:14:12,980
But it also adds aria-checked equals true,

00:14:12,980 --> 00:14:15,560
which is giving the same information to the site,

00:14:15,560 --> 00:14:18,490
as well to non-sited users, without doing anything.

00:14:18,490 --> 00:14:21,580
Same for Disabled-- it just works.

00:14:21,580 --> 00:14:25,820
Same for Valid-- also beautiful.

00:14:25,820 --> 00:14:27,820
And then in the latest release-- I

00:14:27,820 --> 00:14:30,140
think the pull request came in yesterday or the day

00:14:30,140 --> 00:14:33,090
before-- it now also mimics your key press.

00:14:33,090 --> 00:14:35,870
So before, if you had a div and you hit Enter,

00:14:35,870 --> 00:14:37,690
nothing would happen whatsoever.

00:14:37,690 --> 00:14:39,990
That only worked for buttons and anchors.

00:14:39,990 --> 00:14:44,160
Now by just automatically adding tabindex and ng-keypress

00:14:44,160 --> 00:14:46,990
as well, then you have that instant functionality

00:14:46,990 --> 00:14:49,890
that works on your keyboard without doing anything.

00:14:49,890 --> 00:14:53,170
And then lastly, because, again, we don't have a label,

00:14:53,170 --> 00:14:56,530
it will look into the text of your directive,

00:14:56,530 --> 00:14:59,890
takes that text, and adds it into the Aria label,

00:14:59,890 --> 00:15:01,570
so you actually have a proper checkbox,

00:15:01,570 --> 00:15:04,310
like the real thing, except it looks better.

00:15:04,310 --> 00:15:06,330
So think about UX again.

00:15:06,330 --> 00:15:08,110
UX is for everybody.

00:15:08,110 --> 00:15:09,710
And for more accessibility goodness,

00:15:09,710 --> 00:15:11,335
please also check out Julia's talk.

00:15:11,335 --> 00:15:12,890
She'll be looking into accessibility

00:15:12,890 --> 00:15:16,310
testing with Projector later on, which is awesome.

00:15:16,310 --> 00:15:18,328
And back to you.

00:15:18,328 --> 00:15:20,090
KELLY KNIGHT: Cool.

00:15:20,090 --> 00:15:22,380
And now I'm going to be talking about data.

00:15:22,380 --> 00:15:25,600
So one of the big benefits of using prototypes

00:15:25,600 --> 00:15:28,200
is that you can swap out the content.

00:15:28,200 --> 00:15:31,590
So in static mocks, a lot of times the text in the content

00:15:31,590 --> 00:15:32,440
looks perfect.

00:15:32,440 --> 00:15:35,120
And then when you go to implement it with real data,

00:15:35,120 --> 00:15:36,370
not so much.

00:15:36,370 --> 00:15:39,310
So it's really important to use the most realistic data

00:15:39,310 --> 00:15:41,790
that you can get your hands on in your prototypes.

00:15:41,790 --> 00:15:43,640
In fact, if you're doing usability testing

00:15:43,640 --> 00:15:46,190
and you can use the user's actual data,

00:15:46,190 --> 00:15:49,330
then they won't be as focused on the fake data

00:15:49,330 --> 00:15:51,680
and can really focus in on the task at hand.

00:15:51,680 --> 00:15:55,670


00:15:55,670 --> 00:15:58,920
So how do you provide this data to the prototype?

00:15:58,920 --> 00:16:00,270
There's several ways.

00:16:00,270 --> 00:16:03,370
So maybe you have a few different JavaScript objects

00:16:03,370 --> 00:16:05,761
with different content for different scenarios or user

00:16:05,761 --> 00:16:06,260
types.

00:16:06,260 --> 00:16:08,120
And you can just switch those out.

00:16:08,120 --> 00:16:10,940
Yeah, that works pretty well.

00:16:10,940 --> 00:16:12,742
But what we like to do-- oh, I have

00:16:12,742 --> 00:16:16,370
to click this one-- is use Google Sheets as our data

00:16:16,370 --> 00:16:17,480
resource.

00:16:17,480 --> 00:16:20,150
So there are several benefits in doing this.

00:16:20,150 --> 00:16:23,690
First of all, it's just a much better user interface.

00:16:23,690 --> 00:16:25,750
Second, you can update values on the fly.

00:16:25,750 --> 00:16:28,929
So say you want to see if username is three times longer.

00:16:28,929 --> 00:16:30,220
What's that going to look like?

00:16:30,220 --> 00:16:34,160
Change it in your sheet, reload your prototype,

00:16:34,160 --> 00:16:35,070
and there it is.

00:16:35,070 --> 00:16:37,840
So it makes it a lot more dynamic.

00:16:37,840 --> 00:16:41,720
Also, you can have less technical people on your team

00:16:41,720 --> 00:16:43,400
create data sets for you.

00:16:43,400 --> 00:16:46,329
So maybe a researcher wants to test a certain kind of data.

00:16:46,329 --> 00:16:48,870
They can put this together and just use it in the prototypes.

00:16:48,870 --> 00:16:51,260
So that makes it really nice for them.

00:16:51,260 --> 00:16:54,190
And then also, you can have shared sheets.

00:16:54,190 --> 00:16:56,470
So maybe just for some really standard data

00:16:56,470 --> 00:16:58,624
like states and zip codes or something.

00:16:58,624 --> 00:17:00,290
Different prototypers on different teams

00:17:00,290 --> 00:17:02,640
can just use the same sheets, and it

00:17:02,640 --> 00:17:05,619
makes it really efficient.

00:17:05,619 --> 00:17:09,000
And the way that we like to get the data from sheets

00:17:09,000 --> 00:17:13,450
into our prototypes is by using Google Apps Scripts.

00:17:13,450 --> 00:17:16,130
So Google Apps Scripts is this awesome little product

00:17:16,130 --> 00:17:18,609
that lets you write JavaScript to communicate

00:17:18,609 --> 00:17:20,150
with Google APIs.

00:17:20,150 --> 00:17:22,050
So we use it to talk to sheets.

00:17:22,050 --> 00:17:27,829
But you can use it to talk to Docs or Drive, Calendar, Maps,

00:17:27,829 --> 00:17:28,580
Analytics.

00:17:28,580 --> 00:17:31,630
There's a lot of different APIs that you can use.

00:17:31,630 --> 00:17:34,990
So basically, the way that you do this

00:17:34,990 --> 00:17:41,610
is-- so you would go into Apps Scripts, so script.google.com.

00:17:41,610 --> 00:17:45,630
You'd create a script as a web app,

00:17:45,630 --> 00:17:47,946
and then this is the code that you

00:17:47,946 --> 00:17:49,320
write-- this is just JavaScript--

00:17:49,320 --> 00:17:51,990
to get the data from the sheet.

00:17:51,990 --> 00:17:56,190
And then you would deploy this script as a web app.

00:17:56,190 --> 00:18:00,860
So that'll give you a URL that then, back in your prototype,

00:18:00,860 --> 00:18:04,720
you make your request for this data to that URL.

00:18:04,720 --> 00:18:09,440
So you use your handy HTTP JSONP service and make the request.

00:18:09,440 --> 00:18:10,820
And there's your data.

00:18:10,820 --> 00:18:12,790
So it's a super, super easy thing to do.

00:18:12,790 --> 00:18:15,630
You're just using JavaScript.

00:18:15,630 --> 00:18:19,400
But we decided to make it even easier.

00:18:19,400 --> 00:18:23,810
So we created this directive for our designers.

00:18:23,810 --> 00:18:27,200
And this is one of the things that's in our library.

00:18:27,200 --> 00:18:29,390
And all you have to do here is say

00:18:29,390 --> 00:18:31,230
the name of the scope variable that you

00:18:31,230 --> 00:18:32,890
want the data to go into.

00:18:32,890 --> 00:18:34,820
And then we made it a little more dynamic,

00:18:34,820 --> 00:18:37,360
so you can put any spreadsheet key you want.

00:18:37,360 --> 00:18:38,520
And it'll just work.

00:18:38,520 --> 00:18:40,447
So this is one of the more popular things

00:18:40,447 --> 00:18:42,280
that we've done that people use quite a bit.

00:18:42,280 --> 00:18:45,290
So I highly recommend.

00:18:45,290 --> 00:18:46,450
And that's it.

00:18:46,450 --> 00:18:48,450
So we've talked about integrating

00:18:48,450 --> 00:18:50,600
with different products and websites,

00:18:50,600 --> 00:18:54,680
and taking advantage of existing directives and services,

00:18:54,680 --> 00:18:59,620
and different ways that you can bind things in the UI

00:18:59,620 --> 00:19:03,170
to see different manifestations of your prototypes.

00:19:03,170 --> 00:19:07,170
So hopefully, you found this interesting and useful.

00:19:07,170 --> 00:19:10,380
And even if you can't use any of these specific methods

00:19:10,380 --> 00:19:13,190
in your product, hopefully, it just

00:19:13,190 --> 00:19:14,840
got you thinking about different ways

00:19:14,840 --> 00:19:16,790
that you can build tools that you can

00:19:16,790 --> 00:19:20,160
and make your prototypes work even harder for you.

00:19:20,160 --> 00:19:22,030
And that's all we have.

00:19:22,030 --> 00:19:23,070
And thank you very much.

00:19:23,070 --> 00:19:24,070
DIRK GINADER: Thank you.

00:19:24,070 --> 00:19:27,420
[APPLAUSE AND CHEERS]


YouTube URL: https://www.youtube.com/watch?v=ufZpHuiyepg


